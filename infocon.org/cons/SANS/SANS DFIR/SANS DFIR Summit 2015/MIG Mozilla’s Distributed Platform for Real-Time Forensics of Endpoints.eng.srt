1
00:00:00,000 --> 00:00:05,400
hi are you thinking I would like to have

2
00:00:03,360 --> 00:00:07,740
an open source android forensic solution

3
00:00:05,400 --> 00:00:11,210
with real-time data Billy deaths bacon

4
00:00:07,740 --> 00:00:13,889
soup investigate path back and foot wait

5
00:00:11,210 --> 00:00:17,220
there's an option something that is

6
00:00:13,889 --> 00:00:21,830
being actively developed in use for the

7
00:00:17,220 --> 00:00:26,089
last two years written by this man

8
00:00:21,830 --> 00:00:28,619
supports multi platform Windows and Mac

9
00:00:26,090 --> 00:00:30,448
does memory now as does dis analysis

10
00:00:28,619 --> 00:00:32,729
even does some network analysis

11
00:00:30,449 --> 00:00:40,320
depending upon the OS and it looks

12
00:00:32,729 --> 00:00:44,250
really cool but most important with a

13
00:00:40,320 --> 00:00:46,950
detective hat on easily makes this the

14
00:00:44,250 --> 00:00:49,680
best product of the entire conference

15
00:00:46,950 --> 00:00:52,640
there are no t-shirts or stickers the

16
00:00:49,680 --> 00:00:55,110
IMF I would have taken them if he did

17
00:00:52,640 --> 00:00:57,660
but this is julian and he's going to

18
00:00:55,110 --> 00:01:05,700
talk all about meg and i'm very excited

19
00:00:57,660 --> 00:01:09,119
to hear about thank you what great now I

20
00:01:05,700 --> 00:01:13,290
have to make t-shirts thank you and

21
00:01:09,119 --> 00:01:15,630
speakers hi everyone my name is June in

22
00:01:13,290 --> 00:01:20,250
via I'm a French guy they mean the US

23
00:01:15,630 --> 00:01:21,600
working for Mozilla and I work about

24
00:01:20,250 --> 00:01:24,840
fifty percent of my time on make

25
00:01:21,600 --> 00:01:26,820
developing me so I start with a quick

26
00:01:24,840 --> 00:01:29,100
poll how many of you work in an

27
00:01:26,820 --> 00:01:36,240
organization that has more than 10,000

28
00:01:29,100 --> 00:01:38,220
systems okay 100,000 quite a few I know

29
00:01:36,240 --> 00:01:40,408
that people from google here actually a

30
00:01:38,220 --> 00:01:42,210
sec is speaking in the other room but so

31
00:01:40,409 --> 00:01:45,270
we have that kind of problem at Mozilla

32
00:01:42,210 --> 00:01:48,419
where we have a lot of systems a lot a

33
00:01:45,270 --> 00:01:50,850
lot of them and it's just impossible to

34
00:01:48,420 --> 00:01:54,119
do investigation on more than

35
00:01:50,850 --> 00:01:57,419
realistically 200 systems by him even if

36
00:01:54,119 --> 00:02:00,060
you do spiral are an ssh pssh you can

37
00:01:57,420 --> 00:02:02,570
probably do 500 maybe a thousand systems

38
00:02:00,060 --> 00:02:06,270
if you are keep is going to take forever

39
00:02:02,570 --> 00:02:08,609
so this morning in the panel by finding

40
00:02:06,270 --> 00:02:11,120
the needle in the haystack they talked

41
00:02:08,610 --> 00:02:13,470
about the visibility problem and make

42
00:02:11,120 --> 00:02:16,770
attempts to solve that visibility

43
00:02:13,470 --> 00:02:18,930
we know why we need it we know what we

44
00:02:16,770 --> 00:02:21,330
want to look at a bunch of people have

45
00:02:18,930 --> 00:02:23,820
talked about in this analysis of systems

46
00:02:21,330 --> 00:02:27,630
what to look for on a Windows system or

47
00:02:23,820 --> 00:02:34,250
a mac OS system meg is a project that's

48
00:02:27,630 --> 00:02:34,250
oddly how you're going to do this so

49
00:02:34,310 --> 00:02:41,330
I'll be honest I'm not really a

50
00:02:37,200 --> 00:02:45,149
forensics guy my background is really in

51
00:02:41,330 --> 00:02:47,970
web infrastructure security large-scale

52
00:02:45,150 --> 00:02:50,640
distributed systems and how we secure

53
00:02:47,970 --> 00:02:52,800
them so when two years ago when I join

54
00:02:50,640 --> 00:02:54,809
Mozilla my boss at the time as me hey

55
00:02:52,800 --> 00:02:57,300
can you write a digital forensic

56
00:02:54,810 --> 00:02:59,060
platform I was like interesting

57
00:02:57,300 --> 00:03:04,350
challenge how am I going to solve this

58
00:02:59,060 --> 00:03:06,540
and and the main problem we had was not

59
00:03:04,350 --> 00:03:09,299
necessarily extracting data from the

60
00:03:06,540 --> 00:03:12,810
system's was being able to do this on a

61
00:03:09,300 --> 00:03:14,850
large scale of fashion so I work in the

62
00:03:12,810 --> 00:03:16,590
operation security team at Mizzou and

63
00:03:14,850 --> 00:03:18,180
what we do is really were called

64
00:03:16,590 --> 00:03:19,920
Operation security but we're incident

65
00:03:18,180 --> 00:03:22,080
response and words or security

66
00:03:19,920 --> 00:03:25,380
consultants for everything that happens

67
00:03:22,080 --> 00:03:28,080
at Mozilla we do the internet we handle

68
00:03:25,380 --> 00:03:29,820
incidents we have developer design

69
00:03:28,080 --> 00:03:32,820
implement security controls and we build

70
00:03:29,820 --> 00:03:35,970
tools pub we've heard of well make is

71
00:03:32,820 --> 00:03:39,690
here they sort of as a project for by my

72
00:03:35,970 --> 00:03:41,640
coworker Jeb Rheiner called mazda we do

73
00:03:39,690 --> 00:03:43,470
a bunch of work on NSA m and a bunch of

74
00:03:41,640 --> 00:03:49,619
smaller tools all of that comes from the

75
00:03:43,470 --> 00:03:50,910
object team at mozilla so apt 1 i'm

76
00:03:49,620 --> 00:03:52,769
pretty sure everyone is this room has

77
00:03:50,910 --> 00:03:57,870
read this report at one point or another

78
00:03:52,769 --> 00:03:59,700
and a few years ago really we didn't

79
00:03:57,870 --> 00:04:02,250
have too many things to do get on an end

80
00:03:59,700 --> 00:04:04,140
point we had a leg that was looking at a

81
00:04:02,250 --> 00:04:06,420
bunch of stuff and editing us whenever

82
00:04:04,140 --> 00:04:08,220
it was triggering and then apt one came

83
00:04:06,420 --> 00:04:10,980
out and suddenly we had signatures and I

84
00:04:08,220 --> 00:04:12,959
used to look for and everybody's like

85
00:04:10,980 --> 00:04:15,600
how am I going to look for them I have

86
00:04:12,959 --> 00:04:18,030
an md5 or something I don't have

87
00:04:15,600 --> 00:04:19,918
antivirus on my servers how do I go in

88
00:04:18,029 --> 00:04:22,590
and check that I don't have this binary

89
00:04:19,918 --> 00:04:25,500
everyone my systems and no one could

90
00:04:22,590 --> 00:04:27,330
really solve that problem so we started

91
00:04:25,500 --> 00:04:29,819
looking for ways to solve that

92
00:04:27,330 --> 00:04:31,800
and the most obvious way was well we

93
00:04:29,819 --> 00:04:33,629
have ssh everywhere we can just write

94
00:04:31,800 --> 00:04:34,879
those more script running via ssh and do

95
00:04:33,629 --> 00:04:38,580
that across the entire infrastructure

96
00:04:34,879 --> 00:04:42,270
that works up to a point that was

97
00:04:38,580 --> 00:04:46,590
problem one now it's 2015 everybody has

98
00:04:42,270 --> 00:04:49,409
open IOC or some other XML soup yarra

99
00:04:46,590 --> 00:04:51,960
rules and sometimes just an indicator

100
00:04:49,409 --> 00:04:53,729
that something on Twitter like somebody

101
00:04:51,960 --> 00:04:56,609
saying hey if you find this file in the

102
00:04:53,729 --> 00:04:58,740
file system stop freaking out now then

103
00:04:56,610 --> 00:04:59,729
we need a way to check for it but at

104
00:04:58,740 --> 00:05:02,250
Mozilla we're all so worried about

105
00:04:59,729 --> 00:05:05,250
something else we're worried about that

106
00:05:02,250 --> 00:05:07,500
unfortunate comment and that is actually

107
00:05:05,250 --> 00:05:11,310
something that we see a lot more often

108
00:05:07,500 --> 00:05:14,039
than I OCS it is git commit dash a photo

109
00:05:11,310 --> 00:05:16,199
by git push on github we're nope

110
00:05:14,039 --> 00:05:18,690
insurance company a lot of our

111
00:05:16,199 --> 00:05:21,620
repositories are public and very often

112
00:05:18,690 --> 00:05:26,389
someone would just run that command and

113
00:05:21,620 --> 00:05:26,389
end up with AWS credentials on github

114
00:05:26,479 --> 00:05:33,870
that happens a little too often this is

115
00:05:29,879 --> 00:05:36,360
usually how they feel this is really

116
00:05:33,870 --> 00:05:38,279
when they come talk to us and say ah so

117
00:05:36,360 --> 00:05:41,819
I put those credentials on github em

118
00:05:38,279 --> 00:05:43,770
right now what well now you need to go

119
00:05:41,819 --> 00:05:46,169
check on every single server first you

120
00:05:43,770 --> 00:05:47,549
need to rotate in cancel you know revoke

121
00:05:46,169 --> 00:05:51,719
the secret and then you need to rotate

122
00:05:47,550 --> 00:05:53,129
it from all of your systems and it's

123
00:05:51,719 --> 00:05:55,080
hard to do because we have tons of

124
00:05:53,129 --> 00:05:57,930
applications and one might be using a

125
00:05:55,080 --> 00:06:00,389
key from that particular set of

126
00:05:57,930 --> 00:06:02,879
credentials and we don't know where it

127
00:06:00,389 --> 00:06:04,770
is or where it is when it was used and

128
00:06:02,879 --> 00:06:06,000
we're going to revoke it and the

129
00:06:04,770 --> 00:06:07,469
application will break and a bunch of

130
00:06:06,000 --> 00:06:10,349
the infrastructure will go read and

131
00:06:07,469 --> 00:06:13,770
everybody would freak out this is when

132
00:06:10,349 --> 00:06:16,740
we use Meg and with Meg run that kind of

133
00:06:13,770 --> 00:06:19,830
command that will look for a file in for

134
00:06:16,740 --> 00:06:23,339
example / would name berto that contains

135
00:06:19,830 --> 00:06:26,339
the content ABCDEF wanted to 56 a part

136
00:06:23,339 --> 00:06:28,050
of the team and we add some filters to

137
00:06:26,339 --> 00:06:30,569
make that faster we only check for files

138
00:06:28,050 --> 00:06:33,659
that are smaller than 1k and we only go

139
00:06:30,569 --> 00:06:37,979
5 level down the directory tree that's

140
00:06:33,659 --> 00:06:40,080
what meg is for its for retrieving is

141
00:06:37,979 --> 00:06:40,950
for finding systems that we care about

142
00:06:40,080 --> 00:06:43,020
at any given

143
00:06:40,950 --> 00:06:44,760
point because something happened and we

144
00:06:43,020 --> 00:06:48,109
need to scan our infrastructure and went

145
00:06:44,760 --> 00:06:52,460
to figure out where we need to do work

146
00:06:48,110 --> 00:06:55,200
so step back a bit we're Mozilla and

147
00:06:52,460 --> 00:06:57,030
that is actually a very interesting

148
00:06:55,200 --> 00:07:00,870
point because I was talking with a bunch

149
00:06:57,030 --> 00:07:02,190
of people at the conference and we have

150
00:07:00,870 --> 00:07:06,060
a culture that is probably very very

151
00:07:02,190 --> 00:07:08,130
different from most corporations we're

152
00:07:06,060 --> 00:07:10,860
out to build a better internet that is

153
00:07:08,130 --> 00:07:13,110
what people that most it I want to do we

154
00:07:10,860 --> 00:07:15,420
do Firefox we do a bunch of prototyping

155
00:07:13,110 --> 00:07:19,560
experimentations with you firefox OS and

156
00:07:15,420 --> 00:07:20,820
all these things are really research and

157
00:07:19,560 --> 00:07:24,000
development that we transform into

158
00:07:20,820 --> 00:07:26,700
products and what that means is that we

159
00:07:24,000 --> 00:07:29,150
need to iterate fast and people want to

160
00:07:26,700 --> 00:07:32,670
take risk and there's a very very strong

161
00:07:29,150 --> 00:07:34,140
startup incubator mindset where we focus

162
00:07:32,670 --> 00:07:37,290
on the feature on the experimentation

163
00:07:34,140 --> 00:07:39,030
and everything that's costly we may

164
00:07:37,290 --> 00:07:43,080
consider it when we transform the thing

165
00:07:39,030 --> 00:07:44,909
into a product but not necessarily there

166
00:07:43,080 --> 00:07:46,500
is minimalistic centralization groups

167
00:07:44,910 --> 00:07:48,470
are allowed to experiment in their own

168
00:07:46,500 --> 00:07:52,110
corner in their own environment and

169
00:07:48,470 --> 00:07:55,370
everyone at Mozilla knows HTML and can

170
00:07:52,110 --> 00:07:59,130
write then host the website sometimes

171
00:07:55,370 --> 00:08:01,680
they will ask us how to do it but not

172
00:07:59,130 --> 00:08:04,740
too often so what I mean what that means

173
00:08:01,680 --> 00:08:07,430
is that we have a lot of diverse groups

174
00:08:04,740 --> 00:08:09,810
doing things in a many many diverse ways

175
00:08:07,430 --> 00:08:13,260
and this morning one of the panelists

176
00:08:09,810 --> 00:08:15,030
was saying I don't understand why we

177
00:08:13,260 --> 00:08:17,789
can't just lock down these laptops it

178
00:08:15,030 --> 00:08:19,830
should be easy right yes try to do this

179
00:08:17,790 --> 00:08:23,010
in a place like Mozilla and you will

180
00:08:19,830 --> 00:08:24,870
have a riot laptops belong to the

181
00:08:23,010 --> 00:08:26,940
developers there are creative people

182
00:08:24,870 --> 00:08:28,050
they want to be able to customize it

183
00:08:26,940 --> 00:08:29,100
they want to be able to do whatever than

184
00:08:28,050 --> 00:08:30,960
what was it they want to be able to

185
00:08:29,100 --> 00:08:34,490
experiment and we just can't lock things

186
00:08:30,960 --> 00:08:39,120
down and it's almost true for services

187
00:08:34,490 --> 00:08:41,820
so for us security at the perimeter just

188
00:08:39,120 --> 00:08:43,320
doesn't work we can't just put an ids

189
00:08:41,820 --> 00:08:45,660
box at the edge of the network and say

190
00:08:43,320 --> 00:08:47,610
hey we got everything that doesn't work

191
00:08:45,660 --> 00:08:51,000
because we have something like 400

192
00:08:47,610 --> 00:08:52,580
active websites and some of them are

193
00:08:51,000 --> 00:08:54,050
interested to some of them I need

194
00:08:52,580 --> 00:08:57,110
some of them I don't even know where

195
00:08:54,050 --> 00:08:59,900
they are not too long ago I discovered

196
00:08:57,110 --> 00:09:04,250
that we had a partnering mozilla site

197
00:08:59,900 --> 00:09:06,350
was a Chinese search engine hosted on a

198
00:09:04,250 --> 00:09:08,510
box in the Chinese office in the beijing

199
00:09:06,350 --> 00:09:11,090
office I don't even know where is this

200
00:09:08,510 --> 00:09:13,370
and how it got there but it's there and

201
00:09:11,090 --> 00:09:14,540
it's a production side totally legit

202
00:09:13,370 --> 00:09:15,980
nothing wrong with it it's just

203
00:09:14,540 --> 00:09:18,980
completely out of the scope of any

204
00:09:15,980 --> 00:09:21,770
security practices whoever doesn't

205
00:09:18,980 --> 00:09:25,580
offices in hundreds of people work

206
00:09:21,770 --> 00:09:28,699
removed to data center something next 30

207
00:09:25,580 --> 00:09:30,380
or 40 AWS account we as Heroku use

208
00:09:28,700 --> 00:09:32,870
Rackspace and all of that is

209
00:09:30,380 --> 00:09:34,640
disconnected from a central network it

210
00:09:32,870 --> 00:09:36,170
sometimes we will create a VPN tunnel

211
00:09:34,640 --> 00:09:37,850
when we need to have two pieces talk to

212
00:09:36,170 --> 00:09:41,599
each other but most of the time it's

213
00:09:37,850 --> 00:09:44,660
very decentralized so that's what

214
00:09:41,600 --> 00:09:46,850
incident response look like and that's

215
00:09:44,660 --> 00:09:48,949
how it feels like when we have to look

216
00:09:46,850 --> 00:09:51,320
for something it's really really

217
00:09:48,950 --> 00:09:53,330
difficult to even find the owner of the

218
00:09:51,320 --> 00:09:55,100
service the people who have the key to

219
00:09:53,330 --> 00:09:57,320
get in and actually go look at the

220
00:09:55,100 --> 00:10:00,410
system before we can even say well

221
00:09:57,320 --> 00:10:02,240
something happened to it so we have this

222
00:10:00,410 --> 00:10:04,370
massively decentralized environment and

223
00:10:02,240 --> 00:10:07,120
one of SEC team trying to be able to

224
00:10:04,370 --> 00:10:09,770
have access to places so we can do stuff

225
00:10:07,120 --> 00:10:11,060
it's very different from a from a

226
00:10:09,770 --> 00:10:12,319
corporate environment where you can just

227
00:10:11,060 --> 00:10:13,760
centralized and say this is our

228
00:10:12,320 --> 00:10:18,190
corporate policy on how we deploy

229
00:10:13,760 --> 00:10:18,189
systems and they must all do this thing

230
00:10:18,520 --> 00:10:26,870
so we shape our operation security team

231
00:10:22,400 --> 00:10:28,250
to try to be as efficient as possible in

232
00:10:26,870 --> 00:10:30,920
that environment where nothing is really

233
00:10:28,250 --> 00:10:32,540
centralized and this is one I like to

234
00:10:30,920 --> 00:10:34,189
call the object program there are really

235
00:10:32,540 --> 00:10:36,980
three things we care about in the team

236
00:10:34,190 --> 00:10:40,190
the first one is expertise is having

237
00:10:36,980 --> 00:10:41,900
good people people with skills domain

238
00:10:40,190 --> 00:10:44,450
experts who can just jump in on a

239
00:10:41,900 --> 00:10:46,900
problem and really help understand what

240
00:10:44,450 --> 00:10:49,760
is happening people are really important

241
00:10:46,900 --> 00:10:51,530
intelligence or visibility the same

242
00:10:49,760 --> 00:10:53,300
thing is knowing things about your

243
00:10:51,530 --> 00:10:55,610
environment if you don't have

244
00:10:53,300 --> 00:10:57,920
intelligence even if people know what to

245
00:10:55,610 --> 00:10:59,660
look for you don't know how big the

246
00:10:57,920 --> 00:11:01,490
incident could be you don't know where

247
00:10:59,660 --> 00:11:03,610
to look for possible propagation of the

248
00:11:01,490 --> 00:11:05,480
incident you need intelligence and

249
00:11:03,610 --> 00:11:07,579
reactivity

250
00:11:05,480 --> 00:11:10,850
is also an important point if it takes

251
00:11:07,579 --> 00:11:12,829
you three days to get people access to

252
00:11:10,850 --> 00:11:15,350
the system and start looking you're done

253
00:11:12,829 --> 00:11:16,839
the anchors already gone and there's

254
00:11:15,350 --> 00:11:18,740
nothing you can do to save your systems

255
00:11:16,839 --> 00:11:21,949
so you need those three things together

256
00:11:18,740 --> 00:11:27,320
and make helps in the intelligence and

257
00:11:21,949 --> 00:11:30,800
reactivity aspects of it so these three

258
00:11:27,320 --> 00:11:33,769
problems visibility we have too many

259
00:11:30,800 --> 00:11:37,969
systems and they're doing too many

260
00:11:33,769 --> 00:11:40,250
things in too many ways we can't reach

261
00:11:37,970 --> 00:11:44,240
em we can't get us a search access to it

262
00:11:40,250 --> 00:11:48,350
we can get AWS accounts to it or Heroku

263
00:11:44,240 --> 00:11:55,160
a counselor and none of them are

264
00:11:48,350 --> 00:11:58,730
identical we have I believe four or five

265
00:11:55,160 --> 00:12:01,370
different puppet repositories managed by

266
00:11:58,730 --> 00:12:03,500
different teams and when a new team when

267
00:12:01,370 --> 00:12:05,959
a new experiment becomes a product often

268
00:12:03,500 --> 00:12:07,910
they bring in their own operations so

269
00:12:05,959 --> 00:12:09,079
eventually we try to consolidate all of

270
00:12:07,910 --> 00:12:11,240
that into something that makes more

271
00:12:09,079 --> 00:12:13,370
sense but it's very very hard to take

272
00:12:11,240 --> 00:12:15,740
the entire provisioning infrastructure

273
00:12:13,370 --> 00:12:18,800
of a product and merge it into something

274
00:12:15,740 --> 00:12:21,620
else so often we just keep that puppet

275
00:12:18,800 --> 00:12:23,800
repo and whatever dog Center adjacent

276
00:12:21,620 --> 00:12:26,300
mechanism that was set up with it and

277
00:12:23,800 --> 00:12:31,939
make the same people manage it but it

278
00:12:26,300 --> 00:12:37,790
still it's on snowflake so back to the

279
00:12:31,940 --> 00:12:40,690
forensics aspects of it hardcore

280
00:12:37,790 --> 00:12:44,209
forensics will always require having

281
00:12:40,690 --> 00:12:46,250
direct access to the system if you need

282
00:12:44,209 --> 00:12:48,589
to look deep inside the memory of a

283
00:12:46,250 --> 00:12:51,199
running system deep on the file system

284
00:12:48,589 --> 00:12:53,870
or even the bios you need to have access

285
00:12:51,199 --> 00:12:55,189
to it there is no way around it you

286
00:12:53,870 --> 00:12:56,990
either need to take an image if it's a

287
00:12:55,190 --> 00:13:00,110
virtual machine or you need access to

288
00:12:56,990 --> 00:13:02,029
the hardware if its server but 99% of

289
00:13:00,110 --> 00:13:04,220
investigations are actually very very

290
00:13:02,029 --> 00:13:07,610
simple where you don't need that kind of

291
00:13:04,220 --> 00:13:10,459
in-depth I class and most of the time I

292
00:13:07,610 --> 00:13:13,720
was just right before this presentation

293
00:13:10,459 --> 00:13:17,029
I saw it tweet about the hacking team

294
00:13:13,720 --> 00:13:19,370
one of the indicator that tells you to

295
00:13:17,029 --> 00:13:22,430
look inside VAR crash of rtmp

296
00:13:19,370 --> 00:13:24,200
for a file called dot report see some I

297
00:13:22,430 --> 00:13:25,849
know Dean you've seen that one right so

298
00:13:24,200 --> 00:13:27,890
now you're like okay fine well how do I

299
00:13:25,850 --> 00:13:29,990
go check for my linux systems at about

300
00:13:27,890 --> 00:13:33,580
6,000 linux systems connected on Meg

301
00:13:29,990 --> 00:13:36,980
right now I run a command don't make a

302
00:13:33,580 --> 00:13:38,779
good look inside VAR TMP and VAR crash

303
00:13:36,980 --> 00:13:40,880
and tells me if you find a single report

304
00:13:38,779 --> 00:13:42,460
and in a minute it was done give me the

305
00:13:40,880 --> 00:13:44,810
result nope I don't have it anywhere

306
00:13:42,460 --> 00:13:46,520
that is ninety-nine percent for

307
00:13:44,810 --> 00:13:47,930
investigations it's not something we

308
00:13:46,520 --> 00:13:52,069
spent three days doing it's something to

309
00:13:47,930 --> 00:13:55,040
spend 30 seconds during and once in a

310
00:13:52,070 --> 00:13:58,850
while we will find that one indicator

311
00:13:55,040 --> 00:14:00,560
that tells us we have something that may

312
00:13:58,850 --> 00:14:02,750
have gotten act and this is where we get

313
00:14:00,560 --> 00:14:04,430
everybody on deck DEFCON one everybody

314
00:14:02,750 --> 00:14:06,589
starts focusing on this thing drop

315
00:14:04,430 --> 00:14:08,660
everything else we freeze the box we

316
00:14:06,589 --> 00:14:14,180
look at all the possible connections and

317
00:14:08,660 --> 00:14:15,770
we really investigate it and the faster

318
00:14:14,180 --> 00:14:18,829
we run investigation the more we will

319
00:14:15,770 --> 00:14:21,589
investigate it happened to I'm sure

320
00:14:18,830 --> 00:14:23,750
everyone in this room then you see an

321
00:14:21,589 --> 00:14:26,000
indicator and you're like this look like

322
00:14:23,750 --> 00:14:28,430
it's really complex to look for it I

323
00:14:26,000 --> 00:14:30,260
just can't do it right now all right

324
00:14:28,430 --> 00:14:32,270
fine we skip it and we know we're not

325
00:14:30,260 --> 00:14:33,709
covering a hundred percent we know we're

326
00:14:32,270 --> 00:14:35,540
not covering everything but hopefully

327
00:14:33,709 --> 00:14:39,079
the ones we're skipping another ones

328
00:14:35,540 --> 00:14:41,660
that matter well the thing is when it's

329
00:14:39,080 --> 00:14:43,850
not costly to run an investigation you

330
00:14:41,660 --> 00:14:46,400
really reduce a delta to a minimum you

331
00:14:43,850 --> 00:14:48,500
can investigate a lot not more and we do

332
00:14:46,400 --> 00:14:50,300
it for sorts of things someone leaves a

333
00:14:48,500 --> 00:14:52,310
company and we want to make sure that

334
00:14:50,300 --> 00:14:54,560
his accounts have been removed from all

335
00:14:52,310 --> 00:14:56,029
the servers fine on Linux it's a line in

336
00:14:54,560 --> 00:14:59,239
HC password you want to check that

337
00:14:56,029 --> 00:15:01,070
everywhere use me we see well hey

338
00:14:59,240 --> 00:15:03,200
there's an open SSL vulnerability coming

339
00:15:01,070 --> 00:15:04,970
up in two days we want to see which

340
00:15:03,200 --> 00:15:07,400
version of open SSL is used on which

341
00:15:04,970 --> 00:15:10,580
servers fine we use make for that super

342
00:15:07,400 --> 00:15:12,230
easy we found an IP address we can call

343
00:15:10,580 --> 00:15:14,570
netstat through make and we use it for

344
00:15:12,230 --> 00:15:19,100
that the AWS example I was talking

345
00:15:14,570 --> 00:15:21,620
before about before or sometimes we see

346
00:15:19,100 --> 00:15:23,630
something like a weird host from an

347
00:15:21,620 --> 00:15:25,010
experimentation running a weird software

348
00:15:23,630 --> 00:15:27,589
running something we don't really

349
00:15:25,010 --> 00:15:29,180
understand and a few weeks later we

350
00:15:27,589 --> 00:15:31,100
learn that that software is linked to a

351
00:15:29,180 --> 00:15:31,930
possible hang and we want to find it

352
00:15:31,100 --> 00:15:34,060
again

353
00:15:31,930 --> 00:15:35,500
well needle in the haystack it's a lot

354
00:15:34,060 --> 00:15:39,489
easier to find when you have a tool

355
00:15:35,500 --> 00:15:41,770
that's distributed everywhere so two

356
00:15:39,490 --> 00:15:44,850
years ago thats circa 2013 we couldn't

357
00:15:41,770 --> 00:15:49,839
find a tool we liked so we built one I'm

358
00:15:44,850 --> 00:15:53,740
going to talk here very quick about grr

359
00:15:49,839 --> 00:15:57,220
grr rapid response was a G I've learned

360
00:15:53,740 --> 00:16:00,339
does not stand for Google but it is a

361
00:15:57,220 --> 00:16:02,080
tool built and led by Google and it is a

362
00:16:00,339 --> 00:16:05,680
great platform it is a fantastic

363
00:16:02,080 --> 00:16:09,240
platform it has capabilities that make

364
00:16:05,680 --> 00:16:11,920
clearly doesn't have today the issue

365
00:16:09,240 --> 00:16:14,170
when I was evaluating at the time we

366
00:16:11,920 --> 00:16:18,279
were using less sec there's just no good

367
00:16:14,170 --> 00:16:20,920
way to query always psych remotely and

368
00:16:18,279 --> 00:16:24,130
when evaluating grr the one issue I had

369
00:16:20,920 --> 00:16:25,300
with it was that when you run gr it runs

370
00:16:24,130 --> 00:16:27,040
an agent on your system everything's

371
00:16:25,300 --> 00:16:29,199
fine but it doesn't run the

372
00:16:27,040 --> 00:16:31,390
investigation on the system it grabs the

373
00:16:29,200 --> 00:16:34,480
data cope is it into a central platform

374
00:16:31,390 --> 00:16:37,000
and then does the analysis on the

375
00:16:34,480 --> 00:16:38,680
platform itself that means one you need

376
00:16:37,000 --> 00:16:40,360
to transfer the data back to the

377
00:16:38,680 --> 00:16:42,250
platform and two you need to have a

378
00:16:40,360 --> 00:16:43,709
massive database to store all of your

379
00:16:42,250 --> 00:16:48,250
artifacts from the entire infrastructure

380
00:16:43,709 --> 00:16:49,810
and Google can do it I have money we

381
00:16:48,250 --> 00:16:52,029
will never have at Mozilla but we just

382
00:16:49,810 --> 00:16:53,739
can't afford it we don't have that kind

383
00:16:52,029 --> 00:16:58,450
of capabilities and there's also a

384
00:16:53,740 --> 00:17:01,060
strong strong privacy aspect to it make

385
00:16:58,450 --> 00:17:03,130
currently does not run on on end user

386
00:17:01,060 --> 00:17:04,720
laptops at Mozilla but we're considering

387
00:17:03,130 --> 00:17:07,300
it and when you run it on end-user

388
00:17:04,720 --> 00:17:09,069
laptop suddenly your investigation team

389
00:17:07,300 --> 00:17:11,800
has access to all the files of everybody

390
00:17:09,069 --> 00:17:13,329
in the company and when you're again

391
00:17:11,800 --> 00:17:17,409
when you're in a cooperation we can

392
00:17:13,329 --> 00:17:21,428
enforce that let Mozilla we still he

393
00:17:17,410 --> 00:17:23,410
pees we don't do this thing privacy is a

394
00:17:21,429 --> 00:17:25,209
strong factor to us so retrieving data

395
00:17:23,410 --> 00:17:27,160
from the endpoint was a problem and

396
00:17:25,209 --> 00:17:29,350
that's why we decided to build a

397
00:17:27,160 --> 00:17:31,330
platform that does investigation that

398
00:17:29,350 --> 00:17:33,129
has similar capabilities but does not

399
00:17:31,330 --> 00:17:38,050
retrieve data from the endpoints back to

400
00:17:33,130 --> 00:17:42,040
a central server all right let's do some

401
00:17:38,050 --> 00:17:43,870
demos they are recorded so they should

402
00:17:42,040 --> 00:17:44,809
work I will let you enjoy this gift one

403
00:17:43,870 --> 00:17:50,360
more time because it's

404
00:17:44,809 --> 00:17:52,580
some gift I love this one all right

405
00:17:50,360 --> 00:17:58,248
would you mind to rewind the video and

406
00:17:52,580 --> 00:17:59,960
play it again please sink could you go

407
00:17:58,249 --> 00:18:06,799
back to the beginning of it would be

408
00:17:59,960 --> 00:18:09,350
great accent thank you so what's

409
00:18:06,799 --> 00:18:11,210
happening here is that we are on an

410
00:18:09,350 --> 00:18:15,019
investigator laptop cutting the meat

411
00:18:11,210 --> 00:18:18,559
command line and checking for something

412
00:18:15,019 --> 00:18:21,679
in HC chrome d and what we're looking

413
00:18:18,559 --> 00:18:26,269
for is a file that contains the throne

414
00:18:21,679 --> 00:18:29,720
the string bad password and we press

415
00:18:26,269 --> 00:18:31,850
ENTER and the investigation because

416
00:18:29,720 --> 00:18:36,679
that's really what we go to meet action

417
00:18:31,850 --> 00:18:38,480
is sent as we see to 1251 agents now

418
00:18:36,679 --> 00:18:41,899
this recording in real time so it gives

419
00:18:38,480 --> 00:18:45,019
you an idea of how it progresses it is

420
00:18:41,899 --> 00:18:47,209
sent to the MiG platform and process

421
00:18:45,019 --> 00:18:49,100
server side and I will just take a few

422
00:18:47,210 --> 00:18:52,850
seconds to come back and there you go it

423
00:18:49,100 --> 00:18:55,219
comes back and you see that out of all

424
00:18:52,850 --> 00:18:57,049
of the systems that were investigated

425
00:18:55,220 --> 00:19:00,529
one of them called object wonder private

426
00:18:57,049 --> 00:19:03,200
at PHX one mozilla com has that string

427
00:19:00,529 --> 00:19:08,029
in the file code etsy cron the some job

428
00:19:03,200 --> 00:19:10,490
that enacted so what happened here is

429
00:19:08,029 --> 00:19:16,129
this and I'm going to talk really about

430
00:19:10,490 --> 00:19:20,059
how MIG works at the transport pipeline

431
00:19:16,129 --> 00:19:22,428
distributed investigation level so I'm

432
00:19:20,059 --> 00:19:25,789
the investigator on the left and when I

433
00:19:22,429 --> 00:19:29,029
call the main line i really call a REST

434
00:19:25,789 --> 00:19:31,490
API and I send it to json file saying go

435
00:19:29,029 --> 00:19:35,210
look for this thing and on the server

436
00:19:31,490 --> 00:19:37,190
side the API writes it into database of

437
00:19:35,210 --> 00:19:39,110
past pres de base and there's a

438
00:19:37,190 --> 00:19:41,240
scheduler that controls sort of the

439
00:19:39,110 --> 00:19:44,269
messages being passed around and the

440
00:19:41,240 --> 00:19:47,059
scheduler takes that new action finds

441
00:19:44,269 --> 00:19:49,399
out which agents need to be contacted

442
00:19:47,059 --> 00:19:51,820
are currently online for it and passes

443
00:19:49,399 --> 00:19:56,029
them their own little investigation

444
00:19:51,820 --> 00:19:58,090
document now this goes into RabbitMQ if

445
00:19:56,029 --> 00:19:59,740
you're not familiar with it rabbitmq

446
00:19:58,090 --> 00:20:02,080
messaging cue system that does

447
00:19:59,740 --> 00:20:03,730
publication subscription and all of the

448
00:20:02,080 --> 00:20:06,428
agents regardless of where they are

449
00:20:03,730 --> 00:20:08,650
located on the planet are connected to

450
00:20:06,429 --> 00:20:12,460
that one RabbitMQ cluster that has a

451
00:20:08,650 --> 00:20:14,529
public address and by being connected to

452
00:20:12,460 --> 00:20:16,299
that web DM cluster they receive a copy

453
00:20:14,529 --> 00:20:19,500
of the investigation message from

454
00:20:16,299 --> 00:20:21,789
real-time download it run it locally

455
00:20:19,500 --> 00:20:24,100
compile the results and send the

456
00:20:21,789 --> 00:20:26,289
response back they all get back into the

457
00:20:24,100 --> 00:20:28,449
ravaging cluster the scheduler grabs em

458
00:20:26,289 --> 00:20:30,820
right them into the database and the

459
00:20:28,450 --> 00:20:33,370
client on the other end retrieve the

460
00:20:30,820 --> 00:20:39,460
result and says okay I only found one

461
00:20:33,370 --> 00:20:42,610
host that has this marker so let me show

462
00:20:39,460 --> 00:20:45,970
you a few more demos same thing if you

463
00:20:42,610 --> 00:20:53,010
wouldn't mind rewinding it dang it so

464
00:20:45,970 --> 00:20:54,990
here thank you

465
00:20:53,010 --> 00:20:56,940
we're looking for another thing we

466
00:20:54,990 --> 00:20:58,560
really like looking for is private keys

467
00:20:56,940 --> 00:21:00,240
because people tend to the private keys

468
00:20:58,560 --> 00:21:02,220
everywhere so if you want to look for

469
00:21:00,240 --> 00:21:03,750
private keys on your folder same saying

470
00:21:02,220 --> 00:21:05,010
equal to me command line and here we're

471
00:21:03,750 --> 00:21:07,410
going to reduce the scope of the

472
00:21:05,010 --> 00:21:09,830
investigation into a subset of servers

473
00:21:07,410 --> 00:21:13,080
of agents that have a tag on them and

474
00:21:09,830 --> 00:21:17,070
have the tag operator that says are

475
00:21:13,080 --> 00:21:19,530
operated by the object team and we say

476
00:21:17,070 --> 00:21:21,780
okay go looking to /home these agents

477
00:21:19,530 --> 00:21:24,660
and look for files that have the content

478
00:21:21,780 --> 00:21:27,600
begging RS a private key we also reduce

479
00:21:24,660 --> 00:21:30,480
that investigation to five level down

480
00:21:27,600 --> 00:21:34,020
the directories and four files are

481
00:21:30,480 --> 00:21:35,580
smaller than two kilobytes and we just

482
00:21:34,020 --> 00:21:38,010
pipe since it's all batch we just pipe

483
00:21:35,580 --> 00:21:42,030
the results to filter them with a hug a

484
00:21:38,010 --> 00:21:46,070
little bit and the interesting part here

485
00:21:42,030 --> 00:21:49,710
is that only 19 agents get investigated

486
00:21:46,070 --> 00:21:52,439
and the the targeting aspect is

487
00:21:49,710 --> 00:21:53,940
important when an agent an agent is just

488
00:21:52,440 --> 00:21:55,890
this little binary that runs on a server

489
00:21:53,940 --> 00:21:59,160
when it connects to the central platform

490
00:21:55,890 --> 00:22:00,870
it sends a number of metadata about its

491
00:21:59,160 --> 00:22:03,780
what it's running what kind of system

492
00:22:00,870 --> 00:22:06,780
what IP address is a few tags that are

493
00:22:03,780 --> 00:22:09,930
built in and we can use this information

494
00:22:06,780 --> 00:22:11,220
to target only a subset of the systems

495
00:22:09,930 --> 00:22:14,610
we have so you don't always have to

496
00:22:11,220 --> 00:22:16,620
investigate 10,000 are hundred thousand

497
00:22:14,610 --> 00:22:19,020
systems you can just investigate with

498
00:22:16,620 --> 00:22:21,510
you like the one that are named my

499
00:22:19,020 --> 00:22:24,090
sequel for example things like that and

500
00:22:21,510 --> 00:22:28,740
here we see that that one server

501
00:22:24,090 --> 00:22:32,990
external scan one had this marker in

502
00:22:28,740 --> 00:22:32,990
three files and dallas tape the bottom

503
00:22:33,560 --> 00:22:35,620
you

504
00:22:38,450 --> 00:22:41,450
yes

505
00:22:42,490 --> 00:22:48,770
yes so in this case we have an

506
00:22:46,340 --> 00:22:51,740
expiration the dash e at the top that is

507
00:22:48,770 --> 00:22:53,600
said to 30 seconds so it will wait 30

508
00:22:51,740 --> 00:22:55,250
seconds for all agents to process it and

509
00:22:53,600 --> 00:22:56,629
the servers that are offline are not

510
00:22:55,250 --> 00:23:00,710
processing it if you set an expiration

511
00:22:56,630 --> 00:23:02,570
to 24 hours for example it will wait 24

512
00:23:00,710 --> 00:23:04,310
hours before finishing the investigation

513
00:23:02,570 --> 00:23:07,010
and the servers that come back online

514
00:23:04,310 --> 00:23:09,290
when they reconnect the agent the meek

515
00:23:07,010 --> 00:23:11,330
agent on the servers will reconnect to

516
00:23:09,290 --> 00:23:13,430
the rabid mq cluster and it would have

517
00:23:11,330 --> 00:23:16,340
pending actions in there waiting for

518
00:23:13,430 --> 00:23:19,130
them in the queue this action expire

519
00:23:16,340 --> 00:23:20,929
automatically after 24 hours but if they

520
00:23:19,130 --> 00:23:23,390
are pending we'll run them and send the

521
00:23:20,930 --> 00:23:25,940
results so that's actually how we do

522
00:23:23,390 --> 00:23:27,710
investigations on system that has party

523
00:23:25,940 --> 00:23:29,570
connectivity or if you would do

524
00:23:27,710 --> 00:23:31,910
investigation on end-user laptops that

525
00:23:29,570 --> 00:23:33,860
might connect so every day or every two

526
00:23:31,910 --> 00:23:39,080
days you would use a numba exploration

527
00:23:33,860 --> 00:23:45,050
like that alright another video here

528
00:23:39,080 --> 00:23:48,050
should be mine playing it so mega had

529
00:23:45,050 --> 00:23:49,610
several modules and we looked at the

530
00:23:48,050 --> 00:23:52,990
fine module so far this is another

531
00:23:49,610 --> 00:23:55,520
module that queries netstat information

532
00:23:52,990 --> 00:23:57,620
in same thing with such an explosion of

533
00:23:55,520 --> 00:24:02,450
22nd and we look for that specific IP

534
00:23:57,620 --> 00:24:05,120
and what it does is on on linux for

535
00:24:02,450 --> 00:24:07,730
example it will go look into / proc Ned

536
00:24:05,120 --> 00:24:10,100
TCP and proc net UDP for connected

537
00:24:07,730 --> 00:24:12,650
sockets and if it finds that IP in there

538
00:24:10,100 --> 00:24:14,810
then you will return positive results on

539
00:24:12,650 --> 00:24:17,150
Mac OS unfortunately we don't have the

540
00:24:14,810 --> 00:24:20,840
api's to go look for that so we have to

541
00:24:17,150 --> 00:24:22,220
call the command line tools and actually

542
00:24:20,840 --> 00:24:25,220
that's probably something that you has

543
00:24:22,220 --> 00:24:27,530
to the mac OS experts around here and

544
00:24:25,220 --> 00:24:30,500
windows the same thing so here we found

545
00:24:27,530 --> 00:24:32,570
that IP on on to host and now that is

546
00:24:30,500 --> 00:24:34,520
really really useful when we're

547
00:24:32,570 --> 00:24:39,020
investigating what for example most

548
00:24:34,520 --> 00:24:42,980
ioc's have IP information so the first

549
00:24:39,020 --> 00:24:45,860
thing you find we got the c2c IP we got

550
00:24:42,980 --> 00:24:48,860
this ssh connection from there you find

551
00:24:45,860 --> 00:24:51,290
IEP saver work um and you can check them

552
00:24:48,860 --> 00:24:52,699
in your ideas but if you have systems in

553
00:24:51,290 --> 00:24:55,070
edible you guys it may not be behind on

554
00:24:52,700 --> 00:24:58,850
ideas so you may want to use make

555
00:24:55,070 --> 00:25:01,389
for that and the other use of it is

556
00:24:58,850 --> 00:25:04,250
really when we're trying to locate

557
00:25:01,389 --> 00:25:08,149
possible anomalies make are we trying to

558
00:25:04,250 --> 00:25:10,399
find where a rogue employees for example

559
00:25:08,149 --> 00:25:12,199
is connected then we could use me to say

560
00:25:10,399 --> 00:25:15,289
well we see established SSH connections

561
00:25:12,200 --> 00:25:17,330
to all of these systems but you could

562
00:25:15,289 --> 00:25:19,309
use a netstat module to say well lift me

563
00:25:17,330 --> 00:25:21,949
all the servers that are listening on

564
00:25:19,309 --> 00:25:25,850
port 443 and will return your list of

565
00:25:21,950 --> 00:25:28,279
those servers so that gives you really a

566
00:25:25,850 --> 00:25:30,230
tool where if you don't have a central

567
00:25:28,279 --> 00:25:32,330
inventory that knows all the things and

568
00:25:30,230 --> 00:25:34,789
you don't recall that information and

569
00:25:32,330 --> 00:25:36,590
store it forever then you can use me to

570
00:25:34,789 --> 00:25:39,080
acquire it and retrieve that data in

571
00:25:36,590 --> 00:25:41,299
real time it does not gives you a story

572
00:25:39,080 --> 00:25:43,009
called data if you care about it then

573
00:25:41,299 --> 00:25:45,769
you probably need another tool to do it

574
00:25:43,009 --> 00:25:52,100
but it gives you real-time visibility on

575
00:25:45,769 --> 00:25:55,809
your infrastructure one last and this

576
00:25:52,100 --> 00:25:59,230
one is the latest addition to make that

577
00:25:55,809 --> 00:26:02,539
will scan the memory of processors now

578
00:25:59,230 --> 00:26:05,330
this is only user land memory not kernel

579
00:26:02,539 --> 00:26:07,279
memory and it's not a perfect scanning

580
00:26:05,330 --> 00:26:09,129
yet it was keeps on memory regions it

581
00:26:07,279 --> 00:26:12,470
cannot be hidden it does its best to not

582
00:26:09,129 --> 00:26:15,830
disrupt the activity of the system but

583
00:26:12,470 --> 00:26:19,340
you can scan inside running processes

584
00:26:15,830 --> 00:26:22,490
for particular string byte strings or

585
00:26:19,340 --> 00:26:25,459
reg exes and you can scan for example

586
00:26:22,490 --> 00:26:28,519
when we had the hot bit problem a year

587
00:26:25,460 --> 00:26:29,690
ago and we wanted to rotate our keys we

588
00:26:28,519 --> 00:26:30,980
wanted to make sure that the keys that

589
00:26:29,690 --> 00:26:32,840
needed to be reformed were removed from

590
00:26:30,980 --> 00:26:34,309
engine X then you can use a memory

591
00:26:32,840 --> 00:26:36,080
scanner to go look inside the memory and

592
00:26:34,309 --> 00:26:39,139
say did you find the string from that

593
00:26:36,080 --> 00:26:42,259
key yes or no okay it has been rotated

594
00:26:39,139 --> 00:26:50,299
no it hasn't been rotated if you find a

595
00:26:42,259 --> 00:26:52,399
given for example a malware that doesn't

596
00:26:50,299 --> 00:26:54,440
necessarily have a five signature but

597
00:26:52,399 --> 00:26:56,928
you get a memory signature for you can

598
00:26:54,440 --> 00:26:59,720
use me to scan for so here we just

599
00:26:56,929 --> 00:27:02,389
really run a command that looks for

600
00:26:59,720 --> 00:27:05,870
engine X processes dash name engine X

601
00:27:02,389 --> 00:27:06,689
and look for the string TLS object that

602
00:27:05,870 --> 00:27:09,629
I don't

603
00:27:06,690 --> 00:27:12,600
he's on the org era zombies Mozilla

604
00:27:09,630 --> 00:27:14,160
reversed it's our staging site and

605
00:27:12,600 --> 00:27:15,959
that's really just looking for an

606
00:27:14,160 --> 00:27:19,370
engineer server that is running a

607
00:27:15,960 --> 00:27:23,010
virtual host for this particular domain

608
00:27:19,370 --> 00:27:25,979
which happens to be a TLS observatory

609
00:27:23,010 --> 00:27:29,520
another product of mine and it found

610
00:27:25,980 --> 00:27:32,610
that one server observer web one that

611
00:27:29,520 --> 00:27:38,670
has this train in four processes and we

612
00:27:32,610 --> 00:27:40,889
get the PID PID 646 96 98 99 and 700

613
00:27:38,670 --> 00:27:46,440
because there are four engine X workers

614
00:27:40,890 --> 00:27:48,510
on that box so what we're really trying

615
00:27:46,440 --> 00:27:51,960
to build here is digital forensics on

616
00:27:48,510 --> 00:27:53,280
steroid massively distributed means that

617
00:27:51,960 --> 00:27:56,280
it's fast it's really fast to do

618
00:27:53,280 --> 00:27:57,990
investigations it's simple to deploy and

619
00:27:56,280 --> 00:28:02,340
cross-platform I'll talk about that a

620
00:27:57,990 --> 00:28:04,980
little bit more in a minute secure don't

621
00:28:02,340 --> 00:28:07,350
trust until you verify and don't spy on

622
00:28:04,980 --> 00:28:10,050
data respect privacy so let's talk about

623
00:28:07,350 --> 00:28:13,500
these four points a little bit massively

624
00:28:10,050 --> 00:28:15,990
distributed we don't keep state on the

625
00:28:13,500 --> 00:28:19,050
server we just pass messages around

626
00:28:15,990 --> 00:28:21,930
receive responses a very small footprint

627
00:28:19,050 --> 00:28:24,990
to deploy make it's been I think the

628
00:28:21,930 --> 00:28:26,430
database a check yesterday has been

629
00:28:24,990 --> 00:28:27,960
running for a little more than a year

630
00:28:26,430 --> 00:28:29,730
and a half now and it's using 40

631
00:28:27,960 --> 00:28:33,270
gigabyte of storage it's Postgres

632
00:28:29,730 --> 00:28:34,590
database so it's minimal and that is

633
00:28:33,270 --> 00:28:36,930
mostly because we don't retrieve data

634
00:28:34,590 --> 00:28:38,699
from input so we don't have to store a

635
00:28:36,930 --> 00:28:47,730
bunch of blob that we never want to look

636
00:28:38,700 --> 00:28:50,280
at simple to deploy so I'm a security

637
00:28:47,730 --> 00:28:52,950
guy but I'm also knobs and I spent a lot

638
00:28:50,280 --> 00:28:55,379
of time doing sis admin work and I've

639
00:28:52,950 --> 00:28:58,380
worked with chef and puppet and all of

640
00:28:55,380 --> 00:29:01,370
these tours and when you do ups this one

641
00:28:58,380 --> 00:29:03,720
saying you hate is deploying stuff and

642
00:29:01,370 --> 00:29:05,639
deploying stuff usually means that you

643
00:29:03,720 --> 00:29:07,470
have to deal with dependencies across

644
00:29:05,640 --> 00:29:09,870
five different platforms of versions of

645
00:29:07,470 --> 00:29:11,610
Linux and Mac OS and windows figure out

646
00:29:09,870 --> 00:29:15,120
which library is going to break your

647
00:29:11,610 --> 00:29:18,689
entire system etc etc it is a pain it is

648
00:29:15,120 --> 00:29:20,459
horrible to do so be nice to your ops

649
00:29:18,690 --> 00:29:23,370
and give them security tools

650
00:29:20,460 --> 00:29:25,380
easy to deploy and if you can't do the

651
00:29:23,370 --> 00:29:27,570
deploy work for them but they just have

652
00:29:25,380 --> 00:29:30,180
ready to put that RPM package on their

653
00:29:27,570 --> 00:29:31,409
repo and push it then it would probably

654
00:29:30,180 --> 00:29:33,530
never get deployed because they really

655
00:29:31,410 --> 00:29:36,480
don't have time to deal with that and

656
00:29:33,530 --> 00:29:39,180
was Meg that was really something that I

657
00:29:36,480 --> 00:29:41,010
cared about and that's why that's really

658
00:29:39,180 --> 00:29:43,620
the main reason why we pick the go

659
00:29:41,010 --> 00:29:45,780
language to build it because go when you

660
00:29:43,620 --> 00:29:48,000
compile a girl binary it's a static

661
00:29:45,780 --> 00:29:50,190
binary everything is built into it we

662
00:29:48,000 --> 00:29:52,500
take the binary you throw it on any

663
00:29:50,190 --> 00:29:55,530
Linux 64-bit machine you want it will

664
00:29:52,500 --> 00:29:58,860
run so it's great for us we just create

665
00:29:55,530 --> 00:30:01,920
a basic RPM envelope or dead envelope we

666
00:29:58,860 --> 00:30:03,959
just put it up there and runs you can

667
00:30:01,920 --> 00:30:06,090
cross compile I cross compile the binary

668
00:30:03,960 --> 00:30:08,610
for mac OS from linux just put it in a

669
00:30:06,090 --> 00:30:10,949
small dmg file put it in our pocket

670
00:30:08,610 --> 00:30:15,840
puppet and deploys anyone's so it's

671
00:30:10,950 --> 00:30:19,520
really simple to deploy another another

672
00:30:15,840 --> 00:30:21,959
thing we tried with mixed results was to

673
00:30:19,520 --> 00:30:26,370
build the configuration inside the

674
00:30:21,960 --> 00:30:28,620
binary so instead of asking ops 2 to

675
00:30:26,370 --> 00:30:30,959
provision secrets on the machine and

676
00:30:28,620 --> 00:30:33,300
configuration files on the machine and

677
00:30:30,960 --> 00:30:36,210
if you work with puppet provisioning a

678
00:30:33,300 --> 00:30:38,610
necessary key on a machine is not an

679
00:30:36,210 --> 00:30:40,290
easy problem to solve and instead of

680
00:30:38,610 --> 00:30:42,360
doing that we put everything into the

681
00:30:40,290 --> 00:30:43,889
binary at computation so we have good

682
00:30:42,360 --> 00:30:46,169
scripts that are specific to different

683
00:30:43,890 --> 00:30:48,630
part of the infrastructure and they each

684
00:30:46,170 --> 00:30:50,580
pool in their configuration compile it

685
00:30:48,630 --> 00:30:52,020
into a static binary and we just have to

686
00:30:50,580 --> 00:30:55,290
deploy that one thing no configuration

687
00:30:52,020 --> 00:30:58,860
file it does mean the binary must remain

688
00:30:55,290 --> 00:31:01,649
secret moderately secret even if it

689
00:30:58,860 --> 00:31:04,469
leaks there's not much a hacker could do

690
00:31:01,650 --> 00:31:06,120
with the USSR key that's in there but it

691
00:31:04,470 --> 00:31:08,070
does simplify the deployment a lot in

692
00:31:06,120 --> 00:31:09,719
particularly which is great is that you

693
00:31:08,070 --> 00:31:11,550
can't just if you find a system one day

694
00:31:09,720 --> 00:31:13,140
that is completely out of scope you

695
00:31:11,550 --> 00:31:15,000
don't want you to strike of it you take

696
00:31:13,140 --> 00:31:17,310
that one MIG binary you put it there it

697
00:31:15,000 --> 00:31:19,020
takes you two seconds and it runs and

698
00:31:17,310 --> 00:31:20,790
you don't have to worry about it and

699
00:31:19,020 --> 00:31:22,620
we'll keep connecting back home telling

700
00:31:20,790 --> 00:31:25,320
you hey by the way I'm this one guy you

701
00:31:22,620 --> 00:31:27,209
found six months ago that everybody

702
00:31:25,320 --> 00:31:30,330
forgot about and might be an entry point

703
00:31:27,210 --> 00:31:31,549
to your network so it's very easy to

704
00:31:30,330 --> 00:31:34,369
deploy

705
00:31:31,549 --> 00:31:38,330
it is a pain to build but it's easy to

706
00:31:34,369 --> 00:31:42,080
deploy security so I haven't talked

707
00:31:38,330 --> 00:31:49,100
about that yet everybody loves to hate

708
00:31:42,080 --> 00:31:51,289
on PGP I love pgp and we use it a lot of

709
00:31:49,100 --> 00:31:54,019
Mozilla it really is a core component to

710
00:31:51,289 --> 00:31:55,850
everything we do in the security teams

711
00:31:54,019 --> 00:31:57,110
and in the ops teams so it just made

712
00:31:55,850 --> 00:32:00,649
sense to build the security of make

713
00:31:57,110 --> 00:32:02,840
around PTP and when the client the me

714
00:32:00,649 --> 00:32:04,100
client runs at one me command to send an

715
00:32:02,840 --> 00:32:06,080
investigation what happens in the

716
00:32:04,100 --> 00:32:08,988
background is that there's a JSON file

717
00:32:06,080 --> 00:32:13,129
generated that says in there like we see

718
00:32:08,989 --> 00:32:16,369
here searches s1 pass it see Cromley

719
00:32:13,129 --> 00:32:18,259
competent bad password it has a very dte

720
00:32:16,369 --> 00:32:22,759
period so it cannot be replayed for too

721
00:32:18,259 --> 00:32:26,809
long and a target etc that one Jason 5

722
00:32:22,759 --> 00:32:30,739
is signed with your PGP private key on

723
00:32:26,809 --> 00:32:32,570
your local machine that signature is put

724
00:32:30,739 --> 00:32:36,919
inside the JSON files hidden pgp

725
00:32:32,570 --> 00:32:39,619
signature----- and each agent each agent

726
00:32:36,919 --> 00:32:42,470
on the server's the 10,000 or 100,000 of

727
00:32:39,619 --> 00:32:44,658
them will verify that signature so the

728
00:32:42,470 --> 00:32:46,399
agents actually know the list of

729
00:32:44,659 --> 00:32:48,409
investigators that are allowed to run

730
00:32:46,399 --> 00:32:50,689
commands they actually know their PGP

731
00:32:48,409 --> 00:32:53,210
public keys and when the commands arrive

732
00:32:50,690 --> 00:32:54,769
they verify the signatures so even if

733
00:32:53,210 --> 00:32:57,320
someone breaks in even if someone takes

734
00:32:54,769 --> 00:32:59,029
over the entire big platform they can't

735
00:32:57,320 --> 00:33:00,739
send anything to the agents and as they

736
00:32:59,029 --> 00:33:04,190
have stolen one private key from an

737
00:33:00,739 --> 00:33:06,320
investigator now hopefully the ops

738
00:33:04,190 --> 00:33:08,200
people and the security people you know

739
00:33:06,320 --> 00:33:13,090
how to protect the PGP private key

740
00:33:08,200 --> 00:33:16,309
otherwise you have bigger problems so

741
00:33:13,090 --> 00:33:18,049
it's a pretty good security model you

742
00:33:16,309 --> 00:33:21,889
can take over that was another problem

743
00:33:18,049 --> 00:33:24,649
when I was looking at gr that I had is

744
00:33:21,889 --> 00:33:27,320
that you we trust the infrastructure if

745
00:33:24,649 --> 00:33:29,209
the infrastructure is taken over well

746
00:33:27,320 --> 00:33:33,139
you have root access to all of your

747
00:33:29,210 --> 00:33:34,159
systems so it is a problem it's not so

748
00:33:33,139 --> 00:33:36,019
much a problem when you can really

749
00:33:34,159 --> 00:33:38,210
constrain you infrastructure to specific

750
00:33:36,019 --> 00:33:40,639
Network accesses but when like us you

751
00:33:38,210 --> 00:33:42,019
need to have a significant part of it on

752
00:33:40,639 --> 00:33:43,639
the public internet in order for

753
00:33:42,019 --> 00:33:45,550
everybody to connect to you it is a

754
00:33:43,639 --> 00:33:49,929
concern

755
00:33:45,550 --> 00:33:52,909
and finally I'm a big burn notice fan I

756
00:33:49,930 --> 00:33:55,370
used to be a spy I used to be that guy

757
00:33:52,910 --> 00:33:57,380
who loves to record everything that

758
00:33:55,370 --> 00:33:59,449
happens in the infrastructure so that i

759
00:33:57,380 --> 00:34:01,400
can find that one needle that

760
00:33:59,450 --> 00:34:04,460
everybody's looking for and in doing so

761
00:34:01,400 --> 00:34:06,860
I just burned three hundred thousand

762
00:34:04,460 --> 00:34:08,389
dollars on elastic switch clusters and I

763
00:34:06,860 --> 00:34:09,980
don't know how much on ideas and I

764
00:34:08,389 --> 00:34:13,489
recall it ever saying and I found that

765
00:34:09,980 --> 00:34:15,409
one thing and it is still something we

766
00:34:13,489 --> 00:34:20,020
must do but there are places where it

767
00:34:15,409 --> 00:34:22,520
just doesn't work we just can't do it so

768
00:34:20,020 --> 00:34:24,350
we tried something different it's try to

769
00:34:22,520 --> 00:34:27,139
do it without full access this data and

770
00:34:24,350 --> 00:34:28,880
it is hard I was yesterday Tolkien was

771
00:34:27,139 --> 00:34:32,299
one of my co worker but how to do for

772
00:34:28,880 --> 00:34:36,080
durability management using me and the

773
00:34:32,300 --> 00:34:37,910
question was how do we take the package

774
00:34:36,080 --> 00:34:40,130
versions we have on the systems and

775
00:34:37,909 --> 00:34:43,759
actually compare that with database of

776
00:34:40,130 --> 00:34:45,770
renewable packages without retrieving

777
00:34:43,760 --> 00:34:49,550
any package version out of the system's

778
00:34:45,770 --> 00:34:51,168
themselves and the technical aspect of

779
00:34:49,550 --> 00:34:54,290
it got really complicated finally we

780
00:34:51,168 --> 00:34:56,179
found a way to run it but my point is if

781
00:34:54,290 --> 00:34:57,770
you're not going to retrieve data out of

782
00:34:56,179 --> 00:35:01,130
your systems you need to find creative

783
00:34:57,770 --> 00:35:06,320
ways of running investigations it's more

784
00:35:01,130 --> 00:35:08,090
complicated but it's worth it so the

785
00:35:06,320 --> 00:35:10,010
main concept here that agents do the

786
00:35:08,090 --> 00:35:12,140
work and return answers without

787
00:35:10,010 --> 00:35:15,080
returning the raw data they may return

788
00:35:12,140 --> 00:35:19,460
some metadata limited but not the raw

789
00:35:15,080 --> 00:35:22,940
data alright i'll pass very quick on the

790
00:35:19,460 --> 00:35:25,100
on the internals it's a REST API that we

791
00:35:22,940 --> 00:35:27,710
see sign Jason messages distributes it

792
00:35:25,100 --> 00:35:30,110
to agent VAR b mq and stores it in a

793
00:35:27,710 --> 00:35:32,690
possible database this is what it looks

794
00:35:30,110 --> 00:35:34,910
like in the bigger picture it's it's a

795
00:35:32,690 --> 00:35:40,300
kind of unpleasant version of the

796
00:35:34,910 --> 00:35:42,379
previous diagram so on the agent side

797
00:35:40,300 --> 00:35:44,000
you're going to tell your abs that

798
00:35:42,380 --> 00:35:46,850
you're deploying a piece of software on

799
00:35:44,000 --> 00:35:49,760
the servers and rightfully so they're

800
00:35:46,850 --> 00:35:52,880
gonna be like okay how is it running

801
00:35:49,760 --> 00:35:55,010
well it's okay just runs as root all

802
00:35:52,880 --> 00:35:56,010
right oh yes and it needs to connect on

803
00:35:55,010 --> 00:36:00,630
the network on the public

804
00:35:56,010 --> 00:36:02,430
it ok you sure about this thing yep and

805
00:36:00,630 --> 00:36:03,810
you want to run it everywhere sure on

806
00:36:02,430 --> 00:36:07,649
the main load balancers assigning

807
00:36:03,810 --> 00:36:11,490
servers everything ok so point is they

808
00:36:07,650 --> 00:36:13,830
care about this thing so we try to in

809
00:36:11,490 --> 00:36:17,310
the architecture of the agent to kind of

810
00:36:13,830 --> 00:36:19,890
mitigate these concerns by putting the

811
00:36:17,310 --> 00:36:21,420
core functionalities the part that we do

812
00:36:19,890 --> 00:36:24,089
the work go to get the files could look

813
00:36:21,420 --> 00:36:26,760
at the memory into modules and modules

814
00:36:24,090 --> 00:36:28,920
are segregated they are running a

815
00:36:26,760 --> 00:36:31,470
separate processes you can kill them if

816
00:36:28,920 --> 00:36:33,360
you need to we will send box them at

817
00:36:31,470 --> 00:36:34,980
some point to give them just the access

818
00:36:33,360 --> 00:36:36,720
is a need because there's no reason the

819
00:36:34,980 --> 00:36:40,710
final module would have access to the

820
00:36:36,720 --> 00:36:43,730
network etc etcetera and all would use

821
00:36:40,710 --> 00:36:48,090
one hundred percent CPU as a thing and

822
00:36:43,730 --> 00:36:51,510
that's this ugly diagram I also happen

823
00:36:48,090 --> 00:36:53,310
to like ascii art I'm sorry kind of

824
00:36:51,510 --> 00:36:57,060
describes the workflow of actions inside

825
00:36:53,310 --> 00:36:58,680
the agent but the main point is you can

826
00:36:57,060 --> 00:37:00,900
write your own modules to do specific

827
00:36:58,680 --> 00:37:03,810
things for example if you want you have

828
00:37:00,900 --> 00:37:06,390
a module that goes look for specific I

829
00:37:03,810 --> 00:37:08,610
don't know that all of your laptop on my

830
00:37:06,390 --> 00:37:10,980
class have disk encryption enabled

831
00:37:08,610 --> 00:37:12,570
that's a very specific saying that is

832
00:37:10,980 --> 00:37:14,370
not supported with a module or you want

833
00:37:12,570 --> 00:37:16,290
a special way to do it you write your

834
00:37:14,370 --> 00:37:17,790
own little piece of go code and you

835
00:37:16,290 --> 00:37:20,190
compile it into the agent in your ship

836
00:37:17,790 --> 00:37:21,810
it and that module will just be able to

837
00:37:20,190 --> 00:37:23,550
do that one saying so there is really

838
00:37:21,810 --> 00:37:25,320
very very little attack surface to

839
00:37:23,550 --> 00:37:31,230
transform that into a remote code

840
00:37:25,320 --> 00:37:33,450
execution platform alright I talked

841
00:37:31,230 --> 00:37:36,750
about the security model ready so I will

842
00:37:33,450 --> 00:37:38,279
skip on that a little bit the important

843
00:37:36,750 --> 00:37:41,730
part here that we can give fine-grained

844
00:37:38,280 --> 00:37:43,410
acl's to various parts of various groups

845
00:37:41,730 --> 00:37:45,360
inside Mozilla so for example the

846
00:37:43,410 --> 00:37:49,049
incident response team would have access

847
00:37:45,360 --> 00:37:51,300
to every saying and the system in team

848
00:37:49,050 --> 00:37:55,050
just cares about having access to files

849
00:37:51,300 --> 00:37:57,090
so we just give them an ACL that can we

850
00:37:55,050 --> 00:37:59,640
call the final module really and not the

851
00:37:57,090 --> 00:38:02,640
memory module not the other fancy

852
00:37:59,640 --> 00:38:04,830
modules we have and the way that works

853
00:38:02,640 --> 00:38:07,140
is that we just create a list like here

854
00:38:04,830 --> 00:38:08,290
in this document where we list their

855
00:38:07,140 --> 00:38:12,129
public you think

856
00:38:08,290 --> 00:38:14,770
it and make we know that on these these

857
00:38:12,130 --> 00:38:16,780
keys are allowed to call that module we

858
00:38:14,770 --> 00:38:19,630
also have a mechanism to enforce double

859
00:38:16,780 --> 00:38:23,110
signature where we will say for example

860
00:38:19,630 --> 00:38:25,960
that to call the memory module you need

861
00:38:23,110 --> 00:38:28,810
to have two signatures in each other

862
00:38:25,960 --> 00:38:32,260
signature from all you need to have the

863
00:38:28,810 --> 00:38:33,790
weight of four and each investigator

864
00:38:32,260 --> 00:38:36,760
carries its own weight of two so you

865
00:38:33,790 --> 00:38:38,140
need two signature two plus two and you

866
00:38:36,760 --> 00:38:40,900
can do fancy things like that you could

867
00:38:38,140 --> 00:38:43,600
do things like a module that would for

868
00:38:40,900 --> 00:38:46,600
example freezer system lockdown all

869
00:38:43,600 --> 00:38:49,420
accesses and say well we want to have

870
00:38:46,600 --> 00:38:51,069
two signature and really the people in

871
00:38:49,420 --> 00:38:52,660
the security team only have a minimum

872
00:38:51,070 --> 00:38:54,820
weight and we need to have someone from

873
00:38:52,660 --> 00:38:56,830
the legal team to double sign the action

874
00:38:54,820 --> 00:38:58,690
before it goes live you could do things

875
00:38:56,830 --> 00:39:00,400
like that so you know that you're not

876
00:38:58,690 --> 00:39:02,050
giving all accesses to just that one

877
00:39:00,400 --> 00:39:06,400
incident response team is that something

878
00:39:02,050 --> 00:39:11,290
you care about that's why I just talked

879
00:39:06,400 --> 00:39:15,220
about Oh in one cool feature since I

880
00:39:11,290 --> 00:39:17,890
really like PGP is that the rest api of

881
00:39:15,220 --> 00:39:21,669
meg is actually not using classic

882
00:39:17,890 --> 00:39:24,100
authentication it uses a pgp toga so

883
00:39:21,670 --> 00:39:25,240
when you call the me JP I from your

884
00:39:24,100 --> 00:39:28,210
command line tools and you actually

885
00:39:25,240 --> 00:39:30,250
really just doing HTTP with the API what

886
00:39:28,210 --> 00:39:32,770
happens is that for every request your

887
00:39:30,250 --> 00:39:34,630
private key is signing a token that

888
00:39:32,770 --> 00:39:36,970
token is passed to the API and the API

889
00:39:34,630 --> 00:39:39,340
verifies it and say oh sure you're

890
00:39:36,970 --> 00:39:40,959
Julian welcome and by you just that

891
00:39:39,340 --> 00:39:42,910
token we know the identity of the

892
00:39:40,960 --> 00:39:44,530
investigator and we have a signature of

893
00:39:42,910 --> 00:39:46,720
what is being passed and we don't

894
00:39:44,530 --> 00:39:49,410
require an extra username and password

895
00:39:46,720 --> 00:39:49,410
to access the API

896
00:39:54,390 --> 00:40:00,450
um that's database protection things

897
00:39:58,160 --> 00:40:04,200
these things we don't really care about

898
00:40:00,450 --> 00:40:07,049
one word on rabbitmq it's a pain to

899
00:40:04,200 --> 00:40:08,848
secure if you had some rabbitmq systems

900
00:40:07,049 --> 00:40:10,829
in your environment really recommend you

901
00:40:08,849 --> 00:40:13,799
look at them because most likely they

902
00:40:10,829 --> 00:40:16,079
are not secure at all I spent a

903
00:40:13,799 --> 00:40:19,230
significant amount of time learning and

904
00:40:16,079 --> 00:40:22,500
using the RabbitMQ ACL model and it is

905
00:40:19,230 --> 00:40:23,700
not easy it's deep very confusing so if

906
00:40:22,500 --> 00:40:25,440
you're not sure what to look for a new

907
00:40:23,700 --> 00:40:28,189
infra and you see some rabbitmq server

908
00:40:25,440 --> 00:40:31,049
really recommend you go look at them

909
00:40:28,190 --> 00:40:34,650
point is here that we use amqp over TLS

910
00:40:31,049 --> 00:40:37,740
and and we use tightly control rabbitmq

911
00:40:34,650 --> 00:40:39,210
ACLs between the agents and the public

912
00:40:37,740 --> 00:40:40,799
cluster there's really very little

913
00:40:39,210 --> 00:40:42,150
attack surface for an attacker to

914
00:40:40,799 --> 00:40:46,940
connect to the public cluster and take

915
00:40:42,150 --> 00:40:50,849
control of your systems all right so

916
00:40:46,940 --> 00:40:54,210
there are many many many many indicators

917
00:40:50,849 --> 00:40:56,940
of compromise formats you have Nara you

918
00:40:54,210 --> 00:40:59,670
have a open IOC everybody's trying to

919
00:40:56,940 --> 00:41:05,099
standardize their own grrs artifact

920
00:40:59,670 --> 00:41:07,319
formats you make uses a JSON format I'm

921
00:41:05,099 --> 00:41:10,740
not trying to reinvent a new indicator

922
00:41:07,319 --> 00:41:14,549
of compromise format what the Meg format

923
00:41:10,740 --> 00:41:18,149
is is a messenger format a transport

924
00:41:14,549 --> 00:41:21,930
format but it does happen to be fairly

925
00:41:18,150 --> 00:41:25,049
simple so this is a JSON file that

926
00:41:21,930 --> 00:41:29,578
describes Oh things we saw during the

927
00:41:25,049 --> 00:41:31,529
shell shock mess last year when shell

928
00:41:29,579 --> 00:41:34,049
shock was being exploited and we could

929
00:41:31,529 --> 00:41:35,609
find iocs on tons of blogs and website

930
00:41:34,049 --> 00:41:38,970
and everything and I collected them into

931
00:41:35,609 --> 00:41:40,200
that one action that we run many many

932
00:41:38,970 --> 00:41:41,609
times throughout the day to make sure

933
00:41:40,200 --> 00:41:43,649
that our servers were not being exposed

934
00:41:41,609 --> 00:41:45,720
and I still run it once in a while kind

935
00:41:43,650 --> 00:41:48,930
of like an anti virus signature to see

936
00:41:45,720 --> 00:41:50,220
if anyone is using it exploiting it so

937
00:41:48,930 --> 00:41:52,440
what it does here is that you have a

938
00:41:50,220 --> 00:41:56,910
name okay you have a target you can see

939
00:41:52,440 --> 00:42:00,240
here that the target will run this on

940
00:41:56,910 --> 00:42:03,598
systems that are either Linux or Darwin

941
00:42:00,240 --> 00:42:05,000
and are running in demon mode we have

942
00:42:03,599 --> 00:42:07,250
some system

943
00:42:05,000 --> 00:42:09,430
demon moon means the agent is running in

944
00:42:07,250 --> 00:42:12,890
the background as a background process

945
00:42:09,430 --> 00:42:16,720
we have some crown mode where the agent

946
00:42:12,890 --> 00:42:19,129
just wakes up regularity to check in and

947
00:42:16,720 --> 00:42:22,180
here in the operations we are cutting

948
00:42:19,130 --> 00:42:25,310
the file module on all of this path and

949
00:42:22,180 --> 00:42:27,799
we're looking for various things shatter

950
00:42:25,310 --> 00:42:29,660
56 signatures for example so we

951
00:42:27,800 --> 00:42:32,210
calculate the shafts I'm afford the

952
00:42:29,660 --> 00:42:33,859
binaries in those paths and all the

953
00:42:32,210 --> 00:42:36,320
files in this past hundreds of binaries

954
00:42:33,860 --> 00:42:39,110
and we compare it to these shadow 56

955
00:42:36,320 --> 00:42:41,450
nature and further down we have some

956
00:42:39,110 --> 00:42:43,010
regex signatures who sings files that

957
00:42:41,450 --> 00:42:44,960
might contain the busybox string with

958
00:42:43,010 --> 00:42:47,660
the eco there are some other than

959
00:42:44,960 --> 00:42:50,990
orbital we have IP addresses with things

960
00:42:47,660 --> 00:42:54,259
like that so it's a fairly consumable

961
00:42:50,990 --> 00:42:57,049
model compared to when I was evaluating

962
00:42:54,260 --> 00:43:00,230
various solutions I was looking a lot at

963
00:42:57,050 --> 00:43:03,290
the open at UC format in my team Jeff

964
00:43:00,230 --> 00:43:05,150
Breiner root PI IOC a couple of years

965
00:43:03,290 --> 00:43:07,670
ago and spend a lot of time studying the

966
00:43:05,150 --> 00:43:10,070
open IOC format and how to parse it and

967
00:43:07,670 --> 00:43:11,570
everything and we fairly quickly got to

968
00:43:10,070 --> 00:43:14,270
the conclusion that we were not going to

969
00:43:11,570 --> 00:43:15,620
reuse it that we're going to come up

970
00:43:14,270 --> 00:43:18,380
with something that you can just read

971
00:43:15,620 --> 00:43:21,410
you don't it doesn't matter if you have

972
00:43:18,380 --> 00:43:23,960
tons of ioc formats out there if all of

973
00:43:21,410 --> 00:43:25,399
them are super simple to understand and

974
00:43:23,960 --> 00:43:27,620
that's kind of what we're going for and

975
00:43:25,400 --> 00:43:29,090
it was a big discussion with some of the

976
00:43:27,620 --> 00:43:31,250
grr folks and that kind of in the same

977
00:43:29,090 --> 00:43:33,110
mindset now trying to impose a standard

978
00:43:31,250 --> 00:43:35,870
because what really matters at the end

979
00:43:33,110 --> 00:43:37,700
of the day is that one signature you

980
00:43:35,870 --> 00:43:40,580
just found that one byte string that one

981
00:43:37,700 --> 00:43:43,339
checksum that one IP address and how you

982
00:43:40,580 --> 00:43:46,430
represent it does not matter if it's an

983
00:43:43,340 --> 00:43:49,610
xml file json file jana file yeah man

984
00:43:46,430 --> 00:43:52,250
file whatever just a shell it doesn't

985
00:43:49,610 --> 00:43:54,290
matter so we need to have formats that

986
00:43:52,250 --> 00:43:56,630
do not impose their own syntax on you

987
00:43:54,290 --> 00:43:58,430
that you can just use when you need it

988
00:43:56,630 --> 00:44:04,160
very quickly and pass it into your

989
00:43:58,430 --> 00:44:09,319
infrastructure all right icing on the

990
00:44:04,160 --> 00:44:12,710
cake you can geolocate results in Meg

991
00:44:09,320 --> 00:44:16,310
that's a fancy not super useful feature

992
00:44:12,710 --> 00:44:17,790
sometimes it is but I like maps and and

993
00:44:16,310 --> 00:44:20,190
one day I was like I want to use

994
00:44:17,790 --> 00:44:23,040
geoip database so you can if you run an

995
00:44:20,190 --> 00:44:25,380
investigation you can say show me the

996
00:44:23,040 --> 00:44:27,450
results on a map and and for all of the

997
00:44:25,380 --> 00:44:29,400
positive results you find it will geo

998
00:44:27,450 --> 00:44:30,720
locate their public IP so that you know

999
00:44:29,400 --> 00:44:33,930
the public a plea because the agent

1000
00:44:30,720 --> 00:44:36,180
connects to the cluster and in with geo

1001
00:44:33,930 --> 00:44:39,000
locate the public IP and tell you well

1002
00:44:36,180 --> 00:44:40,649
that one agent is in California the

1003
00:44:39,000 --> 00:44:43,290
other one is in Virginia this one is in

1004
00:44:40,650 --> 00:44:45,630
Germany etc etc that's useful if you

1005
00:44:43,290 --> 00:44:47,640
have a lot of mobile users the end goal

1006
00:44:45,630 --> 00:44:48,990
for this for us really at Mozilla that

1007
00:44:47,640 --> 00:44:51,240
we have so many people that are remote

1008
00:44:48,990 --> 00:44:53,910
that the day we run Meg on end-user

1009
00:44:51,240 --> 00:44:59,100
laptops we will need a way to geo locate

1010
00:44:53,910 --> 00:45:02,279
it so we have a generic security

1011
00:44:59,100 --> 00:45:04,740
platform we can do a number of things we

1012
00:45:02,280 --> 00:45:06,600
can do investigations I've talked about

1013
00:45:04,740 --> 00:45:07,859
that but we also do a lot of other

1014
00:45:06,600 --> 00:45:10,080
things and we actually started

1015
00:45:07,860 --> 00:45:13,530
consolidating a lot of our security

1016
00:45:10,080 --> 00:45:15,450
Arsenal in to make security compliance

1017
00:45:13,530 --> 00:45:18,060
verifying that your systems are

1018
00:45:15,450 --> 00:45:19,439
following a set of standard controls is

1019
00:45:18,060 --> 00:45:22,049
something we do with make I'll talk

1020
00:45:19,440 --> 00:45:24,330
about it in a second vulnerability

1021
00:45:22,050 --> 00:45:26,510
scanning we use an expose and it's a

1022
00:45:24,330 --> 00:45:28,950
great platform but it requires to have

1023
00:45:26,510 --> 00:45:32,010
some sort of connectivity where

1024
00:45:28,950 --> 00:45:34,049
oftentimes we don't and instead we're

1025
00:45:32,010 --> 00:45:36,300
trying to look at meg and how to do

1026
00:45:34,050 --> 00:45:39,540
tuner ability management using make and

1027
00:45:36,300 --> 00:45:41,040
the overall standard if you're not

1028
00:45:39,540 --> 00:45:44,940
familiar with the other over standard

1029
00:45:41,040 --> 00:45:47,130
it's an XML format that defines tuner

1030
00:45:44,940 --> 00:45:49,200
abilities on packages so you can ship

1031
00:45:47,130 --> 00:45:51,630
the XML definition to your MIG agents

1032
00:45:49,200 --> 00:45:52,859
tell them if you have engine X lower

1033
00:45:51,630 --> 00:45:54,990
than this version you're vulnerable

1034
00:45:52,860 --> 00:45:56,730
return something that tells me we need

1035
00:45:54,990 --> 00:45:59,490
to be patched and we run that through

1036
00:45:56,730 --> 00:46:02,670
make dynamically and the great thing is

1037
00:45:59,490 --> 00:46:04,979
that when that for example openssl

1038
00:46:02,670 --> 00:46:06,920
vulnerability today will come out we can

1039
00:46:04,980 --> 00:46:08,970
just make an over definition of it

1040
00:46:06,920 --> 00:46:10,230
broadcast it to all of our agents and

1041
00:46:08,970 --> 00:46:13,339
we'll come back telling us where these

1042
00:46:10,230 --> 00:46:16,670
50 servers needs to be patched right now

1043
00:46:13,340 --> 00:46:20,820
this is called auditing with a DD

1044
00:46:16,670 --> 00:46:23,250
guillaume de cinder my team is our local

1045
00:46:20,820 --> 00:46:26,070
auditing expert and I wrote a bunch of 0

1046
00:46:23,250 --> 00:46:27,640
DD Cisco editing for linux plugins

1047
00:46:26,070 --> 00:46:29,320
including one that crack

1048
00:46:27,640 --> 00:46:32,770
what did the events transforms them into

1049
00:46:29,320 --> 00:46:35,500
JSON and feeds them into miles dev and

1050
00:46:32,770 --> 00:46:37,900
we can use that to really keep track of

1051
00:46:35,500 --> 00:46:41,260
what's happening on the servers but or

1052
00:46:37,900 --> 00:46:42,250
did the JSON is a separate i nary that

1053
00:46:41,260 --> 00:46:44,650
needs to be deployed in its own special

1054
00:46:42,250 --> 00:46:48,070
way so the idea was well we already have

1055
00:46:44,650 --> 00:46:51,430
meg deployed a work what we make a Meg

1056
00:46:48,070 --> 00:46:55,450
module that will grab this be otd data

1057
00:46:51,430 --> 00:46:58,660
and pass it into Mastiff blog inspection

1058
00:46:55,450 --> 00:47:01,089
is another big project that I think will

1059
00:46:58,660 --> 00:47:02,770
work on I have a hopefully a team of

1060
00:47:01,090 --> 00:47:06,310
student that will be focusing on that

1061
00:47:02,770 --> 00:47:08,020
later this year kind of OSX tile reading

1062
00:47:06,310 --> 00:47:09,670
your logs and looking for markers and

1063
00:47:08,020 --> 00:47:11,560
they're looking for regex is looking for

1064
00:47:09,670 --> 00:47:13,090
things like that in a distributed way

1065
00:47:11,560 --> 00:47:15,700
because we have a lot of system that

1066
00:47:13,090 --> 00:47:20,050
cannot be that don't feed their log to a

1067
00:47:15,700 --> 00:47:22,089
central system pipeline and maybe some

1068
00:47:20,050 --> 00:47:23,980
NSM stuff maybe doing a distributed tcp

1069
00:47:22,090 --> 00:47:27,270
down system that each system could look

1070
00:47:23,980 --> 00:47:29,560
for their own genus queries for example

1071
00:47:27,270 --> 00:47:32,680
so going back to the security compliance

1072
00:47:29,560 --> 00:47:34,259
stuff it's really just a way to use the

1073
00:47:32,680 --> 00:47:37,270
fine module like I described above

1074
00:47:34,260 --> 00:47:40,270
before and here what we do that the

1075
00:47:37,270 --> 00:47:44,440
compliance item is what we call it test

1076
00:47:40,270 --> 00:47:48,160
driven security and what we do here is

1077
00:47:44,440 --> 00:47:52,180
that we look inside ed SSH SSH d and the

1078
00:47:48,160 --> 00:47:54,549
script come fig for the red Jac's na

1079
00:47:52,180 --> 00:47:57,399
global verbose because we want all of

1080
00:47:54,550 --> 00:48:00,040
our servers to have that parameters set

1081
00:47:57,400 --> 00:48:02,920
in their configuration we do another one

1082
00:48:00,040 --> 00:48:08,230
with check that password usage is off

1083
00:48:02,920 --> 00:48:10,860
that we look for for example disabled

1084
00:48:08,230 --> 00:48:14,620
password login and for slogging whiskey

1085
00:48:10,860 --> 00:48:16,360
that returns in another JSON format that

1086
00:48:14,620 --> 00:48:17,710
we feed into my life and then we can do

1087
00:48:16,360 --> 00:48:19,930
graph like this that we can show our

1088
00:48:17,710 --> 00:48:22,030
system means team and tell them hey

1089
00:48:19,930 --> 00:48:23,500
there's a set of controls that are low

1090
00:48:22,030 --> 00:48:25,360
level you're pretty good at it you're

1091
00:48:23,500 --> 00:48:27,790
like eighty eight percent compliant

1092
00:48:25,360 --> 00:48:32,230
that's great the medium one you know the

1093
00:48:27,790 --> 00:48:34,540
more complicated ones not so good fifty

1094
00:48:32,230 --> 00:48:37,780
six percent and the high one like do you

1095
00:48:34,540 --> 00:48:40,120
have SED nukes enabled not so good

1096
00:48:37,780 --> 00:48:41,319
twenty-seven percent on me now not all

1097
00:48:40,120 --> 00:48:43,299
system needs to

1098
00:48:41,319 --> 00:48:45,489
selinux enable but there are systems

1099
00:48:43,299 --> 00:48:47,410
where we may want to have it enabled and

1100
00:48:45,489 --> 00:48:49,359
keeping track of that and making sure

1101
00:48:47,410 --> 00:48:53,049
the systems they configure the right way

1102
00:48:49,359 --> 00:48:54,940
is difficult so we use me to distribute

1103
00:48:53,049 --> 00:49:01,329
those checks bring back the data and

1104
00:48:54,940 --> 00:49:03,880
graph it so tldr make is a platform made

1105
00:49:01,329 --> 00:49:06,249
of distributed agent securely queried

1106
00:49:03,880 --> 00:49:08,019
from a central platform and to

1107
00:49:06,249 --> 00:49:12,698
investigate a large pool of systems

1108
00:49:08,019 --> 00:49:14,979
remotely and that's it if you have any

1109
00:49:12,699 --> 00:49:18,519
questions happy to take them now or I

1110
00:49:14,979 --> 00:49:33,759
will be around the room afterward thank

1111
00:49:18,519 --> 00:49:36,058
you so most all of my examples on Linux

1112
00:49:33,759 --> 00:49:40,150
because that's really a primary target

1113
00:49:36,059 --> 00:49:43,420
we do support mac OS I think the only

1114
00:49:40,150 --> 00:49:46,180
thing is not supported right now is the

1115
00:49:43,420 --> 00:49:47,739
mac address lookup in the netstat module

1116
00:49:46,180 --> 00:49:49,979
on mac OS but everything else works

1117
00:49:47,739 --> 00:49:52,479
perfectly and we use it in production

1118
00:49:49,979 --> 00:49:57,549
because yes we have microwave servers in

1119
00:49:52,479 --> 00:50:01,718
production and windows is supported it

1120
00:49:57,549 --> 00:50:03,489
does run I need to polish it up a bit so

1121
00:50:01,719 --> 00:50:05,650
it's not running perfectly right now

1122
00:50:03,489 --> 00:50:07,449
mostly because we're not with your

1123
00:50:05,650 --> 00:50:11,890
window shop so it's hard to dedicate

1124
00:50:07,449 --> 00:50:13,059
time to it but theoretically I would say

1125
00:50:11,890 --> 00:50:18,930
the amount of effort to make it run

1126
00:50:13,059 --> 00:50:18,930
Windows is probably a couple of days yes

1127
00:50:22,460 --> 00:50:28,740
so initially we were shipping with an

1128
00:50:26,970 --> 00:50:30,529
upgrade module that would just download

1129
00:50:28,740 --> 00:50:33,029
a new version of the binary of the agent

1130
00:50:30,530 --> 00:50:37,100
installed it locally with a verified

1131
00:50:33,030 --> 00:50:41,760
signature and everything and and run it

1132
00:50:37,100 --> 00:50:43,560
but it turned out that it wasn't really

1133
00:50:41,760 --> 00:50:46,170
necessary because most of our systems

1134
00:50:43,560 --> 00:50:48,029
are in puppet and the ones that are not

1135
00:50:46,170 --> 00:50:50,880
in puppet we can still reach them as

1136
00:50:48,030 --> 00:50:52,680
long as we know where they are we still

1137
00:50:50,880 --> 00:50:56,850
managed to connect to them so for now we

1138
00:50:52,680 --> 00:50:59,310
mostly use a pet and we deploy new rpms

1139
00:50:56,850 --> 00:51:03,420
new debs new TM geez yeah puppet when we

1140
00:50:59,310 --> 00:51:06,000
want you upgrade takes a probably to

1141
00:51:03,420 --> 00:51:11,630
reach all the systems a day or two Joe

1142
00:51:06,000 --> 00:51:11,630
upgrade everything yes

1143
00:51:17,349 --> 00:51:25,869
yes so two things really there is a

1144
00:51:23,019 --> 00:51:27,999
statute dashboard in the form of a of a

1145
00:51:25,869 --> 00:51:32,380
meat console it's a command line console

1146
00:51:27,999 --> 00:51:35,348
I like I don't think i have a screenshot

1147
00:51:32,380 --> 00:51:40,509
of it nope I'm just going to leave it on

1148
00:51:35,349 --> 00:51:42,309
this slide because it's the best one and

1149
00:51:40,509 --> 00:51:44,470
we do have a MIG console now what we're

1150
00:51:42,309 --> 00:51:46,059
looking for is instead of having really

1151
00:51:44,470 --> 00:51:50,049
a dashboard this is really disturbing

1152
00:51:46,059 --> 00:51:52,900
I'm sorry instead of having a dashboard

1153
00:51:50,049 --> 00:51:55,210
that you need to look at what we're

1154
00:51:52,900 --> 00:51:57,729
trying to do is to write workers that

1155
00:51:55,210 --> 00:52:02,349
receive events when new agents connects

1156
00:51:57,729 --> 00:52:04,450
of agents disconnect and trigger an

1157
00:52:02,349 --> 00:52:06,160
alert when it's not something I

1158
00:52:04,450 --> 00:52:07,629
something we care about or an agent is

1159
00:52:06,160 --> 00:52:09,970
disappearing and we don't see a valid

1160
00:52:07,630 --> 00:52:12,579
reason for it and pass it in to us IM

1161
00:52:09,970 --> 00:52:14,649
pipeline what we can escalate it so

1162
00:52:12,579 --> 00:52:16,630
trying to write really instead of doing

1163
00:52:14,650 --> 00:52:19,329
monitoring by hand we're trying to it

1164
00:52:16,630 --> 00:52:30,269
made it through co-workers that run into

1165
00:52:19,329 --> 00:52:30,269
platform any other question excuse me

1166
00:52:31,249 --> 00:52:37,799
not through Meg so we do it with you

1167
00:52:35,759 --> 00:52:43,589
know classic message network security

1168
00:52:37,799 --> 00:52:45,538
monitoring IDs things like that right

1169
00:52:43,589 --> 00:52:48,828
once we know where they are we know what

1170
00:52:45,539 --> 00:52:51,900
to do we can deploy the agent on them

1171
00:52:48,829 --> 00:52:54,479
we're actually trying to run meg on our

1172
00:52:51,900 --> 00:52:55,469
switches at the moment as well and I

1173
00:52:54,479 --> 00:52:57,680
think we could do some interesting

1174
00:52:55,469 --> 00:52:57,680
things

