1
00:00:00,600 --> 00:00:03,169
(dramatic music)

2
00:00:11,144 --> 00:00:12,078
(applause)

3
00:00:12,078 --> 00:00:13,346
- [Keith] Thank you, Phil.

4
00:00:13,346 --> 00:00:14,514
Appreciate it.

5
00:00:15,915 --> 00:00:17,150
Thank you, Phil.

6
00:00:17,150 --> 00:00:19,252
Thank you, all for
coming, I appreciate it.

7
00:00:19,252 --> 00:00:21,820
So, as Phil mentioned,

8
00:00:21,821 --> 00:00:23,957
we're here to talk about,

9
00:00:23,957 --> 00:00:25,492
specifically to talk
about baselining,

10
00:00:25,492 --> 00:00:28,428
and really we're gonna take
an endpoint centric approach

11
00:00:28,428 --> 00:00:32,432
to that using endpoint
telemetry to do baselining.

12
00:00:32,432 --> 00:00:35,869
At scale, baselining
is a concept I think

13
00:00:35,869 --> 00:00:38,038
that everyone in this
room is familiar with.

14
00:00:38,038 --> 00:00:40,205
So it's pretty straight-forward.

15
00:00:40,206 --> 00:00:42,675
You take a system in a
controlled environment.

16
00:00:42,675 --> 00:00:44,144
You understand what
it should look like

17
00:00:44,144 --> 00:00:45,545
in a known good state,

18
00:00:45,545 --> 00:00:47,347
and then that's a
jumping off point

19
00:00:47,347 --> 00:00:49,416
for comparative analysis

20
00:00:49,416 --> 00:00:50,817
that allows you to

21
00:00:52,252 --> 00:00:54,788
moving forward, separate
what's good from what's bad.

22
00:00:54,788 --> 00:00:57,924
That's the ultimate
objective of baselining.

23
00:00:57,924 --> 00:00:59,759
It's a positive
security approach.

24
00:00:59,759 --> 00:01:01,795
So this is not the case where

25
00:01:01,795 --> 00:01:03,763
you make a list of
things that are bad

26
00:01:03,763 --> 00:01:06,433
and then you ask
systems to tell you

27
00:01:06,433 --> 00:01:07,567
when those types
of things happened

28
00:01:07,567 --> 00:01:10,136
or you try to
identify them in data

29
00:01:10,136 --> 00:01:11,371
and then you investigate them.

30
00:01:11,371 --> 00:01:13,273
Baselining is the opposite.

31
00:01:13,273 --> 00:01:14,640
So you wanna take what
you know to be good

32
00:01:14,641 --> 00:01:16,709
and you want to set that aside,

33
00:01:16,709 --> 00:01:18,144
and then you want
to be able to look

34
00:01:18,144 --> 00:01:20,713
pretty effectively and
efficiently at what's left.

35
00:01:22,882 --> 00:01:24,184
So this is about
a new discipline.

36
00:01:24,184 --> 00:01:26,386
There's a ton of tools
available to do this.

37
00:01:27,487 --> 00:01:29,354
You've got the memory side

38
00:01:29,355 --> 00:01:31,257
so if you just look at
the SANS Reading Room,

39
00:01:31,257 --> 00:01:32,525
let me google that for you.

40
00:01:32,525 --> 00:01:34,327
There's a million
of them out there.

41
00:01:34,327 --> 00:01:35,829
Some really good talks,
some really good papers

42
00:01:35,829 --> 00:01:37,297
taking a bunch of
different approaches

43
00:01:37,297 --> 00:01:38,765
using a bunch of
different tools.

44
00:01:38,765 --> 00:01:40,667
So a really common one,

45
00:01:40,667 --> 00:01:41,668
just to take memory,

46
00:01:41,668 --> 00:01:43,470
use something like volatility.

47
00:01:43,470 --> 00:01:44,804
Again, a lot of good papers

48
00:01:44,804 --> 00:01:49,409
and many past SANS talks
that touch on this.

49
00:01:49,409 --> 00:01:50,810
Take the platform of interest,

50
00:01:50,810 --> 00:01:52,312
identify what it looks like,

51
00:01:52,312 --> 00:01:54,581
what processes are running
when it's in known good state

52
00:01:54,581 --> 00:01:56,716
and then you just
run a straight diff.

53
00:01:56,716 --> 00:01:58,684
This came up in in
Troy's keynote yesterday,

54
00:01:58,685 --> 00:02:00,320
doing the same
thing, taking that,

55
00:02:00,320 --> 00:02:02,889
and applying to a guests
in an neutral environment

56
00:02:02,889 --> 00:02:04,723
or any other
virtualization environment.

57
00:02:04,724 --> 00:02:07,327
Just stapping those
things, taking them,

58
00:02:07,327 --> 00:02:10,229
throwing an entire
virtual disk into x-ways,

59
00:02:10,229 --> 00:02:12,131
and just figuring
out what differs.

60
00:02:13,299 --> 00:02:15,168
Using things like survey tools,

61
00:02:15,168 --> 00:02:17,470
so obviously osquery, a
bunch have mentioned here.

62
00:02:17,470 --> 00:02:19,572
We're here more about
that this afternoon.

63
00:02:20,907 --> 00:02:22,542
Using a lot of the
Sysinternals tools, right,

64
00:02:22,542 --> 00:02:25,979
for Microsoft so just
recording on an ongoing basis

65
00:02:25,979 --> 00:02:27,213
things that are
happening on a system

66
00:02:27,213 --> 00:02:28,948
in a controlled environment.

67
00:02:28,948 --> 00:02:30,850
And then, comparing
that to what happens

68
00:02:30,850 --> 00:02:32,352
when you introduce
something new or put

69
00:02:32,352 --> 00:02:34,654
that system into
the wild, right?

70
00:02:34,654 --> 00:02:35,555
And then logs,

71
00:02:38,725 --> 00:02:40,593
we have access to a
lot more information,

72
00:02:40,593 --> 00:02:43,829
it's becoming much easier to
gather and to gather at scale.

73
00:02:43,830 --> 00:02:45,899
You know, logs are still
a super valuable source

74
00:02:45,899 --> 00:02:47,367
of baselining data.

75
00:02:47,367 --> 00:02:50,904
So the upside is that
there's a ton of precedent,

76
00:02:50,904 --> 00:02:53,139
a ton of tools, a
ton of methodology,

77
00:02:53,139 --> 00:02:55,175
and a ton of
automation available

78
00:02:55,175 --> 00:02:56,809
if you want to
baseline a system.

79
00:02:58,077 --> 00:03:00,079
The only downside, if
there's a downside,

80
00:03:00,079 --> 00:03:02,515
is that what we really
need to do is baseline

81
00:03:02,515 --> 00:03:04,551
hundreds, thousands,
hundreds of thousands

82
00:03:04,551 --> 00:03:05,817
of systems at a time.

83
00:03:05,818 --> 00:03:08,821
So particularly as folks
doing incident response

84
00:03:08,821 --> 00:03:11,558
or detection at scale,
you know you need to come

85
00:03:11,558 --> 00:03:13,826
in to an environment and you
need to really, really quickly

86
00:03:13,826 --> 00:03:15,894
wrap your head around
everything that's happening

87
00:03:15,895 --> 00:03:17,797
and you don't always
have the luxury

88
00:03:17,797 --> 00:03:19,732
or you very rarely
have the luxury

89
00:03:19,732 --> 00:03:21,234
of knowing what those
systems look like

90
00:03:21,234 --> 00:03:22,735
when they were put in service.

91
00:03:22,735 --> 00:03:25,672
You may never be able to get
back to that state again.

92
00:03:25,672 --> 00:03:29,075
If you're lucky, the company
knows the target environment.

93
00:03:29,075 --> 00:03:30,542
Someone there has access to that

94
00:03:30,543 --> 00:03:32,946
but it's very, very rare that
you're ever gonna see it.

95
00:03:32,946 --> 00:03:35,715
And the reality is that when
you put a system in service,

96
00:03:35,715 --> 00:03:36,883
that system is going to change.

97
00:03:36,883 --> 00:03:38,484
Software gets updated.

98
00:03:38,484 --> 00:03:40,153
Usage patterns get updated.

99
00:03:40,153 --> 00:03:41,853
Software gets changed.

100
00:03:41,854 --> 00:03:44,624
User requirements
and behaviors change.

101
00:03:46,626 --> 00:03:47,794
What we here to talk about,

102
00:03:47,794 --> 00:03:49,796
at a pretty high level,
just to understand

103
00:03:49,796 --> 00:03:51,331
the methodology that we use

104
00:03:51,331 --> 00:03:53,533
and we'll dive into
some specific numbers

105
00:03:53,533 --> 00:03:57,369
that we see when apply different
approaches to baselining.

106
00:03:57,370 --> 00:04:01,507
But using endpoint telemetry
to accelerate baselining

107
00:04:01,507 --> 00:04:04,744
of a significant number
of systems at scale.

108
00:04:06,212 --> 00:04:07,547
Same approach that we take

109
00:04:07,547 --> 00:04:09,382
when we're baselining
a single system

110
00:04:09,382 --> 00:04:11,784
but applying that in a
way that we can baseline

111
00:04:11,784 --> 00:04:13,286
tens of thousands of systems,

112
00:04:13,286 --> 00:04:15,688
a hundred thousand systems in

113
00:04:15,688 --> 00:04:18,991
hours, days, days
at most, ideally.

114
00:04:20,026 --> 00:04:22,729
So, the real
difference in approach

115
00:04:22,729 --> 00:04:26,132
and this reflects what
the market's doing.

116
00:04:26,132 --> 00:04:28,434
There is tons of tools,

117
00:04:28,434 --> 00:04:31,271
EDR as a discipline is
obviously exploding.

118
00:04:32,805 --> 00:04:36,175
There's a recognized need
to go from doing things

119
00:04:36,175 --> 00:04:38,945
point-in-time to doing
things in an ongoing basis,

120
00:04:38,945 --> 00:04:41,046
and you can liken this
to just taking a picture

121
00:04:41,047 --> 00:04:43,750
of something with a camera
to recording full HD video.

122
00:04:44,717 --> 00:04:45,818
Same thing applies.

123
00:04:47,387 --> 00:04:50,023
You know, that
point-in-time approach works

124
00:04:50,023 --> 00:04:52,725
but the point-in-time
approach is not necessarily

125
00:04:52,725 --> 00:04:54,160
reflective of reality.

126
00:04:55,361 --> 00:04:57,563
So, you can take
a look at a thing

127
00:04:57,563 --> 00:04:59,332
on day zero, that's great.

128
00:04:59,332 --> 00:05:01,801
You can introduce something
else in that system.

129
00:05:01,801 --> 00:05:02,935
You can put that
system in service.

130
00:05:02,935 --> 00:05:03,936
You can compare them

131
00:05:05,305 --> 00:05:08,775
but it's only as effective
as your sample size,

132
00:05:08,775 --> 00:05:11,176
your ability to
continually pull data.

133
00:05:12,378 --> 00:05:13,579
There are obviously
some tools out there

134
00:05:13,579 --> 00:05:15,181
that can do that, even in the

135
00:05:15,181 --> 00:05:17,349
ask-and-get-response
method pretty quickly.

136
00:05:20,887 --> 00:05:22,989
What we want to do is take that,

137
00:05:22,989 --> 00:05:25,892
we want to operationalize
whatever the tool may be,

138
00:05:25,892 --> 00:05:27,560
and there's a number of 'em.

139
00:05:27,560 --> 00:05:28,928
We want to
interoperationalize that

140
00:05:28,928 --> 00:05:31,397
and we wanna stop
baselining in point-in-time

141
00:05:31,397 --> 00:05:33,066
and we want to start
baselining systems

142
00:05:33,066 --> 00:05:34,366
like enterprise at a time.

143
00:05:34,367 --> 00:05:36,769
Look at everything, all at once,

144
00:05:36,769 --> 00:05:38,304
in an operational environment,

145
00:05:38,304 --> 00:05:41,974
reflective of the reality of
that computing environment,

146
00:05:41,974 --> 00:05:44,077
and then we want to start
finding things that are good.

147
00:05:44,077 --> 00:05:45,678
We want to set those aside,

148
00:05:45,678 --> 00:05:47,113
and then we want to start
letting everything else

149
00:05:47,113 --> 00:05:48,314
rise to the surface.

150
00:05:48,314 --> 00:05:51,317
So, this all starts
with collection.

151
00:05:51,317 --> 00:05:54,087
So you can't analyze
what you can't see.

152
00:05:54,087 --> 00:05:56,389
You've gotta have a means
to get this data in.

153
00:05:57,557 --> 00:05:59,392
Again, tons of tools
available to do this.

154
00:06:00,827 --> 00:06:02,328
There's many, many more
that aren't on this slide.

155
00:06:02,328 --> 00:06:05,164
So we happen to be a Cb
Enterprise Response shop.

156
00:06:05,164 --> 00:06:06,933
Again, tons of
Osquery users here.

157
00:06:06,933 --> 00:06:08,735
We're Osquery users as well.

158
00:06:11,404 --> 00:06:12,772
You've got commercial tools.

159
00:06:12,772 --> 00:06:14,373
You've got open source tools.

160
00:06:14,374 --> 00:06:15,675
You've got a lot of
platform native stuff,

161
00:06:15,675 --> 00:06:18,478
so Microsoft is doing
a really good job.

162
00:06:18,478 --> 00:06:21,347
Sysmon is a fantastic
tool for getting

163
00:06:21,347 --> 00:06:23,282
an almost identical
dataset to the one

164
00:06:23,282 --> 00:06:26,152
that we, and many of
you, use for free.

165
00:06:26,152 --> 00:06:27,486
All you've gotta
do is figure out

166
00:06:27,487 --> 00:06:30,390
how to collect that data
and then analyze it.

167
00:06:30,390 --> 00:06:32,825
The tools to do that are
getting better every day.

168
00:06:33,893 --> 00:06:35,727
What does that
collection look like?

169
00:06:35,728 --> 00:06:39,298
On average, we see around
4,300 hundred processes

170
00:06:39,298 --> 00:06:40,533
on one endpoint in a day.

171
00:06:42,101 --> 00:06:45,271
And that converts into
about 86,000 events.

172
00:06:45,271 --> 00:06:48,141
86,000 is probably a
conservative number.

173
00:06:48,141 --> 00:06:51,811
So we'll stop here a
second and explain exactly

174
00:06:51,811 --> 00:06:54,113
what I mean when I
say telemetry, like
endpoint telemetry,

175
00:06:54,113 --> 00:06:56,115
and what exactly and
event constitutes.

176
00:06:56,115 --> 00:06:59,318
So processes are
straightforward, right?

177
00:06:59,318 --> 00:07:01,921
Binary disk gets executed.

178
00:07:01,921 --> 00:07:05,057
Events are all of the things
that that process does.

179
00:07:05,057 --> 00:07:08,060
And you can turn the
dial on that, up or down,

180
00:07:08,060 --> 00:07:10,396
depending on your
needs and your ability

181
00:07:10,396 --> 00:07:12,198
to ingest and analyze that data.

182
00:07:13,599 --> 00:07:17,370
That 86,000 is file
modifications, registry changes,

183
00:07:17,370 --> 00:07:21,441
network connections, module
loads, cross-process events.

184
00:07:21,441 --> 00:07:23,609
You can, that dial, again,
can get turned way up

185
00:07:23,609 --> 00:07:26,579
so we've, if you use
the DPL solution,

186
00:07:26,579 --> 00:07:29,282
you're using another type
of system that's capturing

187
00:07:29,282 --> 00:07:31,383
read information, handle
information, new text,

188
00:07:31,384 --> 00:07:32,485
things like that.

189
00:07:32,485 --> 00:07:33,986
That number can go,

190
00:07:33,986 --> 00:07:36,789
you could hit close to a
million on a single system.

191
00:07:36,789 --> 00:07:39,125
We've seen systems that
capture UI information

192
00:07:39,125 --> 00:07:40,893
and things like
that for context.

193
00:07:42,328 --> 00:07:45,565
Those things are capturing a
tremendous number of signals.

194
00:07:45,565 --> 00:07:47,967
This is a really
conservative number,

195
00:07:49,168 --> 00:07:51,637
and user systems tend to
be noisier than servers.

196
00:07:51,637 --> 00:07:53,573
So you're gonna have a
smaller number of things

197
00:07:53,573 --> 00:07:55,007
executing on a server typically.

198
00:07:55,007 --> 00:07:56,509
A bit longer running processes

199
00:07:56,509 --> 00:07:58,211
and some times you have
varying degrees of change.

200
00:07:58,211 --> 00:08:00,980
So if you just take a really
moderately sized enterprise,

201
00:08:00,980 --> 00:08:03,082
1,000, you start...

202
00:08:03,082 --> 00:08:04,584
I didn't really need
to do the math for you,

203
00:08:04,584 --> 00:08:07,954
but you start to get into
some meaningful numbers,

204
00:08:07,954 --> 00:08:10,156
and if you explode this to

205
00:08:10,156 --> 00:08:11,924
what we all think
of as an enterprise,

206
00:08:11,924 --> 00:08:15,394
so probably around 70,
80, 100,000 systems,

207
00:08:15,394 --> 00:08:17,196
you're dealing with some
pretty meaningful amounts

208
00:08:17,196 --> 00:08:18,498
of data at that point.

209
00:08:19,765 --> 00:08:21,032
The good news is, and again,

210
00:08:21,033 --> 00:08:23,369
this was mentioned in
the keynote yesterday,

211
00:08:25,037 --> 00:08:27,239
once you figure out how
to take in that data

212
00:08:27,240 --> 00:08:28,808
and you get through
the mechanics,

213
00:08:28,808 --> 00:08:30,276
which are becoming
easier every day.

214
00:08:30,276 --> 00:08:34,113
If ingest, storage, and
being able to ask questions

215
00:08:34,113 --> 00:08:37,850
of that data, it really works
to a tremendous advantage.

216
00:08:37,850 --> 00:08:40,385
We're gonna kind of
see some of that now.

217
00:08:40,385 --> 00:08:42,255
So, you're data coming in,
we've solved collection,

218
00:08:42,255 --> 00:08:44,857
and now we need to deal
with filtering and analysis.

219
00:08:46,926 --> 00:08:48,794
Analysis, obviously,
at the end of the day,

220
00:08:48,794 --> 00:08:50,062
you've got to have humans.

221
00:08:50,062 --> 00:08:52,932
You're looking at some
result and set of events

222
00:08:52,932 --> 00:08:54,133
to do this really, really well.

223
00:08:55,301 --> 00:08:57,036
The key is to not have
your humans looking

224
00:08:57,036 --> 00:08:59,704
at the same things
over and over again.

225
00:08:59,705 --> 00:09:02,241
Whatever platform or system
you choose for collection

226
00:09:02,241 --> 00:09:04,544
and however you
choose to store that.

227
00:09:04,544 --> 00:09:07,079
The single most important
thing is that feedback loop

228
00:09:07,079 --> 00:09:09,781
between your analysts and
your filtering mechanism.

229
00:09:11,083 --> 00:09:13,618
When a human, in particular,
makes a decision,

230
00:09:13,619 --> 00:09:15,721
that's a really
expensive operation,

231
00:09:15,721 --> 00:09:18,958
you wanna codify that using
all available criteria,

232
00:09:18,958 --> 00:09:21,761
and you gotta plug that back
into your filtering system

233
00:09:21,761 --> 00:09:23,262
so that your humans
aren't looking

234
00:09:23,262 --> 00:09:24,930
at that same type
of thing again.

235
00:09:26,632 --> 00:09:29,167
This kind of comes down to
the concept of aperture.

236
00:09:30,670 --> 00:09:31,637
Collect it all.

237
00:09:32,638 --> 00:09:34,140
You can store it all,

238
00:09:34,140 --> 00:09:36,842
and the talk yesterday
kind of brought up

239
00:09:36,842 --> 00:09:39,211
the concept of
retrospective analysis.

240
00:09:40,580 --> 00:09:42,748
The most important
thing to figure out,

241
00:09:42,748 --> 00:09:44,350
given that you can
collect it and store it,

242
00:09:44,350 --> 00:09:47,186
is what you can afford
to evaluate right now,

243
00:09:47,186 --> 00:09:50,790
and this is heavily dependent
on the size of your team,

244
00:09:50,790 --> 00:09:53,358
the types of things you're
looking for in the environment.

245
00:09:53,359 --> 00:09:55,361
Are you on a short-term
IR situation,

246
00:09:55,361 --> 00:09:57,163
where you already have
a number of indicators,

247
00:09:57,163 --> 00:09:59,498
you've already got
a place to start?

248
00:09:59,498 --> 00:10:01,500
Are you more of a
service provider

249
00:10:01,500 --> 00:10:03,169
or are you in a long-term
engagement there?

250
00:10:03,169 --> 00:10:04,537
Is it your own enterprise,

251
00:10:04,537 --> 00:10:05,771
where you're going
to be watching

252
00:10:05,771 --> 00:10:07,506
for a really long
period of time,

253
00:10:07,506 --> 00:10:10,810
and have the luxury of kind
of opening up that funnel,

254
00:10:10,810 --> 00:10:12,111
and controlling what comes in,

255
00:10:12,111 --> 00:10:14,646
and slowly expanding
that over time?

256
00:10:15,881 --> 00:10:17,617
What can you afford to evaluate

257
00:10:17,617 --> 00:10:19,318
and how are you
gonna measure it?

258
00:10:19,318 --> 00:10:22,021
Again, every time a
human makes a decision,

259
00:10:22,021 --> 00:10:24,357
based on these
criteria that you set,

260
00:10:24,357 --> 00:10:25,290
you need to capture that.

261
00:10:25,291 --> 00:10:28,527
So criteria, for our purposes,

262
00:10:28,527 --> 00:10:32,798
are attributes or
combinations of things

263
00:10:32,798 --> 00:10:35,234
that we see flowing
in from endpoints

264
00:10:35,234 --> 00:10:36,669
that we care about for
one reason or another.

265
00:10:36,669 --> 00:10:38,504
They can be super broad.

266
00:10:38,504 --> 00:10:40,373
So the very simplest one,
which is extremely broad

267
00:10:40,373 --> 00:10:42,174
but really effective
is just to say

268
00:10:42,174 --> 00:10:45,578
a process starts, we take
a hash to the binary image

269
00:10:45,578 --> 00:10:47,579
from which that process came,

270
00:10:47,580 --> 00:10:49,815
and then we check that
and see if we have it.

271
00:10:49,815 --> 00:10:51,851
Have we adjudicated
this binary before?

272
00:10:51,851 --> 00:10:52,685
Period.

273
00:10:52,685 --> 00:10:54,152
Really, really simple.

274
00:10:54,153 --> 00:10:56,956
If we haven't, it gets
subject to binary analysis.

275
00:10:56,956 --> 00:11:00,493
So dynamic, static, and it
gets put in front of a human.

276
00:11:00,493 --> 00:11:02,228
It seems like an
expensive operation,

277
00:11:02,228 --> 00:11:03,662
but when you start to scale it,

278
00:11:03,663 --> 00:11:06,565
you actually get some pretty
significant economies.

279
00:11:06,565 --> 00:11:09,502
And that's a very effective
backstop against things

280
00:11:09,502 --> 00:11:10,435
that you can't predict

281
00:11:10,436 --> 00:11:12,171
or you didn't see coming.

282
00:11:13,639 --> 00:11:15,508
You can also take the
approach of saying,

283
00:11:15,508 --> 00:11:18,711
all right, well, small team,
tremendous amount of data.

284
00:11:18,711 --> 00:11:21,180
Let's just set system
services aside for a second,

285
00:11:21,180 --> 00:11:23,715
maybe even set signed
software aside,

286
00:11:23,716 --> 00:11:26,185
and now let's just look at
stuff that's not signed.

287
00:11:26,185 --> 00:11:27,920
Really, really simple approach.

288
00:11:27,920 --> 00:11:28,920
It's a good first cut.

289
00:11:28,921 --> 00:11:30,256
Let's understand that.

290
00:11:30,256 --> 00:11:31,589
Let's get our feet wet.

291
00:11:31,590 --> 00:11:33,626
Start to let
filtering take hold.

292
00:11:33,626 --> 00:11:35,995
Let some of our analyst's
decisions take hold.

293
00:11:35,995 --> 00:11:38,764
See what we have left, and
then we'll take another cut.

294
00:11:40,232 --> 00:11:42,300
Those criteria can obviously
get as specific as you want

295
00:11:42,301 --> 00:11:43,402
and we'll see some
of the attributes

296
00:11:43,402 --> 00:11:44,770
that we use to define those.

297
00:11:44,770 --> 00:11:47,939
So, this is simple event rate.

298
00:11:47,940 --> 00:11:50,643
So this is the event
rate into analysts

299
00:11:50,643 --> 00:11:52,311
from an organization
we baseline.

300
00:11:52,311 --> 00:11:55,347
I think it's a guy on
60, 65,000 endpoints.

301
00:11:55,347 --> 00:11:58,884
So plug it in,
start getting data,

302
00:11:58,884 --> 00:12:00,319
got our filtering criteria set.

303
00:12:00,319 --> 00:12:01,786
In this case, I wanna
say our aperture

304
00:12:01,787 --> 00:12:04,123
is probably around 75%.

305
00:12:04,123 --> 00:12:08,527
We're not looking for
100% of things on day one.

306
00:12:08,527 --> 00:12:10,162
We're trying to get a
really good understanding

307
00:12:10,162 --> 00:12:13,099
of the things that we suspect
based on past measurement.

308
00:12:13,099 --> 00:12:15,434
So you take this criteria
and every time analysts

309
00:12:15,434 --> 00:12:18,304
make decisions, you learn
whether those things

310
00:12:18,304 --> 00:12:21,173
are likely or unlikely
to be good or bad,

311
00:12:21,173 --> 00:12:24,043
and you can measure that over
time and use to prioritize.

312
00:12:26,912 --> 00:12:29,682
Around 60,000 endpoints,
end up around 70,000 events.

313
00:12:29,682 --> 00:12:31,851
So that's too much.

314
00:12:32,985 --> 00:12:34,487
I don't know how many
analysts you have.

315
00:12:34,487 --> 00:12:35,420
I would love to have more,

316
00:12:35,421 --> 00:12:37,123
but I don't have that many.

317
00:12:37,123 --> 00:12:38,457
There are patterns in there.

318
00:12:38,457 --> 00:12:41,761
There are definitely
efficiencies that you can glean.

319
00:12:41,761 --> 00:12:44,764
If you control your
platform to varying degrees,

320
00:12:44,764 --> 00:12:46,298
the analysis tools that you use,

321
00:12:46,298 --> 00:12:48,667
and the feedback
mechanisms that you build

322
00:12:48,667 --> 00:12:50,302
can be used to get through this,

323
00:12:50,302 --> 00:12:52,805
but 70,000 is a pretty
unrealistic number

324
00:12:52,805 --> 00:12:55,540
for humans to look at
and make good decisions.

325
00:12:57,076 --> 00:12:59,945
We take a first pass at
that and we just say,

326
00:12:59,945 --> 00:13:01,680
for everything that comes in,

327
00:13:01,680 --> 00:13:04,916
it matches one or
more sets of criteria.

328
00:13:04,917 --> 00:13:07,853
A process comes
in, it's unsigned.

329
00:13:07,853 --> 00:13:09,188
That's one set of criteria.

330
00:13:09,188 --> 00:13:10,689
It's really, really broad.

331
00:13:10,689 --> 00:13:12,891
So we've now kicked
that thing out.

332
00:13:12,892 --> 00:13:13,993
Maybe it also got flagged

333
00:13:13,993 --> 00:13:15,861
because it wrote
an autoruns key.

334
00:13:15,861 --> 00:13:18,030
It also got flagged because
it was an unsigned binary

335
00:13:18,030 --> 00:13:19,265
making a network connection.

336
00:13:19,265 --> 00:13:21,100
Really, really straightforward.

337
00:13:21,100 --> 00:13:21,934
It's simple,

338
00:13:23,536 --> 00:13:25,436
but that's the first
pass that you take,

339
00:13:25,437 --> 00:13:27,807
your criteria, you match
that up with a hash.

340
00:13:27,807 --> 00:13:30,643
So this works well for a lot
of the low hanging fruit.

341
00:13:30,643 --> 00:13:31,877
You get in to an environment,

342
00:13:31,877 --> 00:13:33,179
they've got line of
business applications.

343
00:13:33,179 --> 00:13:34,914
They've got things
you necessarily

344
00:13:34,914 --> 00:13:36,549
would never have seen before.

345
00:13:36,549 --> 00:13:39,151
They're specific
to an organization,

346
00:13:39,151 --> 00:13:40,986
or maybe not specific
to an organization

347
00:13:40,986 --> 00:13:43,589
but they're not things
that you're gonna see

348
00:13:43,589 --> 00:13:45,057
commonly on the platform

349
00:13:45,057 --> 00:13:47,092
but they're easily explained,

350
00:13:47,092 --> 00:13:49,995
and their behaviors are
pretty well-known or inferred

351
00:13:49,995 --> 00:13:52,097
based on prevalence
and things like that.

352
00:13:53,299 --> 00:13:54,733
You can take this approach.

353
00:13:54,733 --> 00:13:55,968
It's really good for
getting rid of those things.

354
00:13:55,968 --> 00:13:57,303
The important thing
to keep in mind

355
00:13:57,303 --> 00:13:58,804
as we go through and
talk about all this

356
00:13:58,804 --> 00:14:02,341
is that at every stage,
every one of these decisions

357
00:14:02,341 --> 00:14:04,243
that you make and
everything that you suppress

358
00:14:04,243 --> 00:14:06,312
or start to filter
out moving forward

359
00:14:06,312 --> 00:14:08,013
has to be tied back
to those criteria.

360
00:14:08,013 --> 00:14:11,584
The reason for that is really
straightforward in that

361
00:14:11,584 --> 00:14:14,286
you're gonna learn how to
look for things in new ways,

362
00:14:14,286 --> 00:14:15,454
and you're always
going to be coming up

363
00:14:15,454 --> 00:14:16,955
with new filtering criteria.

364
00:14:18,390 --> 00:14:21,393
You're even gonna be putting
things in there directly.

365
00:14:21,393 --> 00:14:23,295
Once you get out of
this baselining process,

366
00:14:23,295 --> 00:14:26,298
this converts directly into
finding things that are bad.

367
00:14:26,298 --> 00:14:28,334
So you are going to be
looking explicitly for things

368
00:14:28,334 --> 00:14:31,536
that are bad using
similar criteria,

369
00:14:31,537 --> 00:14:33,339
and you don't want
to blind yourself.

370
00:14:33,339 --> 00:14:36,542
There is never any concept
of this binary is good.

371
00:14:36,542 --> 00:14:37,710
That's just not a thing.

372
00:14:37,710 --> 00:14:40,079
Good things go bad all the time.

373
00:14:40,946 --> 00:14:42,414
We do that.

374
00:14:42,414 --> 00:14:44,049
That takes us, just using those,

375
00:14:44,049 --> 00:14:46,819
that set of criteria,
that's half.

376
00:14:48,254 --> 00:14:51,023
35,000 is still too many good
decisions for people to make

377
00:14:51,023 --> 00:14:54,827
in a reasonable amount of
time so we're not there yet,

378
00:14:54,827 --> 00:14:56,395
but that's half.

379
00:14:56,395 --> 00:14:57,930
It's a good enough first cut.

380
00:14:59,331 --> 00:15:00,766
The obvious problems
we have there

381
00:15:00,766 --> 00:15:04,370
are with things like dual-use
tools, system services.

382
00:15:04,370 --> 00:15:07,706
Dual-use tools being pretty
much all the shell utilities,

383
00:15:08,807 --> 00:15:10,943
remote access tools,
all the things

384
00:15:10,943 --> 00:15:12,478
that you find in a system,

385
00:15:12,478 --> 00:15:13,545
administrative utilities,

386
00:15:13,545 --> 00:15:15,014
they are there for good reason.

387
00:15:15,014 --> 00:15:16,782
They should be used
by some people.

388
00:15:16,782 --> 00:15:19,685
They can absolutely be
misused by other people,

389
00:15:19,685 --> 00:15:22,287
and it's not always
easy to tell or codify

390
00:15:22,288 --> 00:15:24,523
what those conditions are.

391
00:15:24,523 --> 00:15:25,591
Then system services.

392
00:15:26,725 --> 00:15:28,193
We obviously know from
lots of experience

393
00:15:28,193 --> 00:15:29,895
that the very first thing
you do when you get out a box

394
00:15:29,895 --> 00:15:32,364
is get the heck out
of your own payload.

395
00:15:32,364 --> 00:15:34,433
So you migrate into
a system service,

396
00:15:34,433 --> 00:15:37,903
and then you've made it
significantly more difficult

397
00:15:37,903 --> 00:15:40,239
for someone to separate
wheat from chaff

398
00:15:40,239 --> 00:15:41,874
and identify things
that you're doing

399
00:15:41,874 --> 00:15:44,276
versus the thing that
the system is doing.

400
00:15:44,276 --> 00:15:47,613
So we add some more
criteria to this now.

401
00:15:47,613 --> 00:15:50,015
We take criteria plus hash,

402
00:15:50,015 --> 00:15:52,451
and then we add some
relationship data.

403
00:15:52,451 --> 00:15:53,986
We add the writer,
so you can take

404
00:15:53,986 --> 00:15:55,754
that as a piece of criteria.

405
00:15:55,754 --> 00:15:57,222
This is huge.

406
00:15:57,222 --> 00:15:59,391
So pedigree matters a
lot, matters tremendously.

407
00:15:59,391 --> 00:16:02,261
So you've got a binary disk.

408
00:16:02,261 --> 00:16:03,963
Say you've got an Essasge client

409
00:16:03,963 --> 00:16:05,863
that shows up on a Windows box.

410
00:16:05,864 --> 00:16:08,734
It's definitely not a thing
that's there by default,

411
00:16:08,734 --> 00:16:10,502
but it's thing that
you can expect to find

412
00:16:10,502 --> 00:16:12,670
in pockets of most
organizations.

413
00:16:12,671 --> 00:16:13,772
It's not surprising.

414
00:16:14,773 --> 00:16:16,508
Where it came from matters.

415
00:16:16,508 --> 00:16:18,777
If that thing ended up getting
written by a word document,

416
00:16:18,777 --> 00:16:20,879
which is not likely
to happen if possible.

417
00:16:23,315 --> 00:16:24,216
Pedigree matters.

418
00:16:25,617 --> 00:16:27,218
That's a case where that
thing definitely stands out.

419
00:16:27,219 --> 00:16:30,556
If it was written by a
software paritioning system,

420
00:16:30,556 --> 00:16:31,690
so if it was written by SCCM

421
00:16:31,690 --> 00:16:33,058
or it's written by Altiris,

422
00:16:33,058 --> 00:16:35,661
that thing was pushed
out by IT organization,

423
00:16:35,661 --> 00:16:38,296
that's a totally different
conversation at that point.

424
00:16:38,297 --> 00:16:39,898
It may or may not be good,

425
00:16:39,898 --> 00:16:42,968
but it's still a,
you know where to go

426
00:16:42,968 --> 00:16:45,170
to get an answer
to your question

427
00:16:45,170 --> 00:16:47,772
and you've got some
insight into pedigree.

428
00:16:48,640 --> 00:16:51,143
Parents, so parents matter.

429
00:16:51,143 --> 00:16:53,779
Real simple example here in
terms of parent and child.

430
00:16:53,779 --> 00:16:56,181
So, you look at all usage of

431
00:16:56,181 --> 00:16:58,017
really common information
gathering utilities.

432
00:16:58,017 --> 00:16:59,852
So look at who am I
, look at nettrace,

433
00:16:59,852 --> 00:17:01,453
things like that on Windows

434
00:17:01,453 --> 00:17:03,422
and on other platforms as well,

435
00:17:03,422 --> 00:17:06,925
but legitimate information
gathering utilities,

436
00:17:06,925 --> 00:17:08,761
legitimate
administrative utilities.

437
00:17:08,761 --> 00:17:10,029
Also, really frequently use,

438
00:17:10,029 --> 00:17:11,262
when you get in a
box, to figure out,

439
00:17:11,262 --> 00:17:13,197
where am I, what can I see,

440
00:17:13,198 --> 00:17:15,000
what privileges do I have.

441
00:17:15,000 --> 00:17:18,503
So those are things that we
care a lot about looking for,

442
00:17:18,503 --> 00:17:20,872
and in some environments,
you will never ever see them

443
00:17:20,873 --> 00:17:22,274
unless it's something bad.

444
00:17:22,273 --> 00:17:24,075
In other environments,
you'll see that all the time.

445
00:17:24,076 --> 00:17:25,944
So a really good example here is

446
00:17:25,944 --> 00:17:28,947
that you will very often
get into organizations

447
00:17:28,947 --> 00:17:30,381
where they've got
some type of tool

448
00:17:30,382 --> 00:17:32,418
or some type of administrative
system in place.

449
00:17:32,418 --> 00:17:34,986
Every time somebody
logs in, write GP script

450
00:17:34,987 --> 00:17:38,557
is running command on xc which
is running all these things.

451
00:17:38,557 --> 00:17:41,193
So, again, pedigree matters.

452
00:17:41,193 --> 00:17:43,996
If someone terminals
in to a box,

453
00:17:43,996 --> 00:17:47,900
gets into command in XC and
then starts doing these things,

454
00:17:47,900 --> 00:17:49,134
that you can buck it up

455
00:17:49,134 --> 00:17:51,370
and you can look at
that in a certain way.

456
00:17:51,370 --> 00:17:53,237
If GP script all the
sudden does that,

457
00:17:53,238 --> 00:17:55,274
and now you can look at
prevalence and frequency

458
00:17:55,274 --> 00:17:57,408
and see that well,
this happens every time

459
00:17:57,409 --> 00:17:59,178
anybody logs in in
this organization

460
00:17:59,178 --> 00:18:00,946
with 50 or 60 endpoints.

461
00:18:02,081 --> 00:18:04,882
Now you can approach
that in a different way.

462
00:18:04,883 --> 00:18:07,286
So you can use those
things to your advantage

463
00:18:07,286 --> 00:18:09,388
and again, you kind of
chain them all together

464
00:18:09,388 --> 00:18:12,256
to describe, in a very
concrete way, what's good.

465
00:18:12,257 --> 00:18:15,961
If this, the end that and
this, then we say it's okay.

466
00:18:15,961 --> 00:18:17,329
We set that aside,

467
00:18:17,329 --> 00:18:18,897
and then you can start
to layer on top of

468
00:18:18,897 --> 00:18:20,165
that some process metadata,

469
00:18:20,165 --> 00:18:21,733
so taking user ID
and command line.

470
00:18:24,069 --> 00:18:28,474
The command line, so
another simple example,

471
00:18:28,474 --> 00:18:30,242
take IIS worker process.

472
00:18:31,376 --> 00:18:32,744
If that thing spawns a shell

473
00:18:32,744 --> 00:18:34,045
so you can maintain
a big array of

474
00:18:34,046 --> 00:18:35,581
all your shell utilities
in your platform,

475
00:18:35,581 --> 00:18:37,381
if your webservice,

476
00:18:37,382 --> 00:18:39,885
say it's Windows, you
got IIS worker process,

477
00:18:39,885 --> 00:18:41,386
spawns power shell,

478
00:18:41,386 --> 00:18:44,322
it's something you
probably want to look at.

479
00:18:44,323 --> 00:18:45,791
Once you start to
dig in to it further,

480
00:18:45,791 --> 00:18:47,024
you start to look
at the command line,

481
00:18:47,025 --> 00:18:48,560
you start to look
at the user context,

482
00:18:48,560 --> 00:18:51,296
and you say, all right, well,
every single time it does it,

483
00:18:51,296 --> 00:18:52,998
it runs this one script,

484
00:18:52,998 --> 00:18:56,001
and maybe it passes it, one
piece of information, maybe not.

485
00:18:57,369 --> 00:18:59,103
Now, you've got
some context there,

486
00:18:59,104 --> 00:19:00,806
you've got some repeatability,

487
00:19:00,806 --> 00:19:02,574
and you can start to figure out,

488
00:19:02,574 --> 00:19:04,009
alright, well this is...

489
00:19:04,009 --> 00:19:05,544
You know where to go
to ask the question.

490
00:19:05,544 --> 00:19:08,547
You've got a system that's
doing a repeatable thing.

491
00:19:08,547 --> 00:19:10,382
You can chain that
sequence of events together

492
00:19:10,382 --> 00:19:11,683
so you're still
always going to look

493
00:19:11,683 --> 00:19:13,719
for webservers that
are spawning shells.

494
00:19:13,719 --> 00:19:15,154
That's, again, abnormal,

495
00:19:16,321 --> 00:19:18,256
but in this one case,
you can say that's okay,

496
00:19:18,257 --> 00:19:19,858
and you can set that aside.

497
00:19:19,858 --> 00:19:21,493
Again, chaining all
these criteria together.

498
00:19:21,493 --> 00:19:24,062
So, where does that get us?

499
00:19:24,062 --> 00:19:26,365
Now we're down to like
10,000 in this case.

500
00:19:28,200 --> 00:19:29,401
We've gone from 70,000.

501
00:19:29,401 --> 00:19:31,770
We took our first pass,
criteria, and hash.

502
00:19:31,770 --> 00:19:32,937
That got us about halfway.

503
00:19:32,938 --> 00:19:34,273
It's a pretty good cut.

504
00:19:34,273 --> 00:19:35,674
Now we're at 10,000.

505
00:19:35,674 --> 00:19:36,875
We're not at the
promised land yet,

506
00:19:36,875 --> 00:19:38,810
but we're getting there.

507
00:19:38,810 --> 00:19:41,312
So the last two dials
that we have to turn there

508
00:19:41,313 --> 00:19:42,681
are scope and permanence.

509
00:19:42,681 --> 00:19:45,951
Where scope is for every
decision that I make,

510
00:19:45,951 --> 00:19:47,886
how do I want to apply
this moving forward.

511
00:19:47,886 --> 00:19:51,423
And so this is where you
really start to see yourself

512
00:19:51,423 --> 00:19:53,725
taking some really great
advantage of filtering.

513
00:19:53,725 --> 00:19:55,293
When your human
makes that decision,

514
00:19:55,294 --> 00:19:57,029
which is again,
the most expensive

515
00:19:57,029 --> 00:19:58,497
part of this whole process.

516
00:19:59,665 --> 00:20:02,668
If it's take your
power shell example,

517
00:20:02,668 --> 00:20:03,901
so your web server,

518
00:20:03,902 --> 00:20:05,337
that's not a thing
that we expect

519
00:20:05,337 --> 00:20:06,838
to see all over the enterprise.

520
00:20:06,838 --> 00:20:08,807
And if you've got 100 web
servers, or even 1,000,

521
00:20:08,807 --> 00:20:10,175
that's probably not
a thing we expect

522
00:20:10,175 --> 00:20:11,677
to see on most of them.

523
00:20:11,677 --> 00:20:13,611
So we're gonna apply that
to one of those systems,

524
00:20:13,612 --> 00:20:15,547
or we might apply it to several

525
00:20:15,547 --> 00:20:16,815
but we're not gonna
apply that to all.

526
00:20:16,815 --> 00:20:18,550
In the group policy example,

527
00:20:18,550 --> 00:20:20,719
where we've got a
group policy GP script

528
00:20:20,719 --> 00:20:22,187
is running a command prompt,

529
00:20:22,187 --> 00:20:24,356
which goes and gathers a
bunch of system information,

530
00:20:24,356 --> 00:20:27,125
sends it somewhere
internal, it's fine.

531
00:20:27,125 --> 00:20:29,127
That's a thing that we
wanna scope to everyone.

532
00:20:29,127 --> 00:20:31,663
Then similarly, we wanna
a concept of permanence,

533
00:20:31,663 --> 00:20:35,300
where we say, all right,
well, just this once,

534
00:20:35,300 --> 00:20:36,702
this thing's okay.

535
00:20:36,702 --> 00:20:38,136
We have information
about pedigree,

536
00:20:38,136 --> 00:20:39,972
we can see where
a thing came from.

537
00:20:39,972 --> 00:20:41,773
It's not a thing we
expect to see a lot,

538
00:20:41,773 --> 00:20:44,408
and we're still, we're
not really comfortable

539
00:20:44,409 --> 00:20:47,079
making a suppression
decision about this long-term

540
00:20:47,079 --> 00:20:48,746
so we're gonna hide it once.

541
00:20:49,948 --> 00:20:51,083
You can hide it forever,

542
00:20:51,083 --> 00:20:52,117
and I put up my quotes.

543
00:20:52,117 --> 00:20:53,284
Forever to us is, for instance,

544
00:20:53,285 --> 00:20:54,152
is 90 to 120 days.

545
00:20:55,554 --> 00:20:57,623
If we say, apply this to
everybody in the organization,

546
00:20:57,623 --> 00:20:59,291
take even the GP script example.

547
00:21:01,093 --> 00:21:02,594
Apply this to everybody
in the organization,

548
00:21:02,594 --> 00:21:05,230
by default, we apply
that and we age it out

549
00:21:05,230 --> 00:21:06,932
after like 90 to 120 days.

550
00:21:08,233 --> 00:21:09,668
That gives us some scale.

551
00:21:09,668 --> 00:21:10,901
It gets us over that hump.

552
00:21:10,902 --> 00:21:14,940
It helps us get that
initial set of events

553
00:21:14,940 --> 00:21:17,509
that our analysts
have to look at down,

554
00:21:17,509 --> 00:21:19,211
but also gives us a mechanism

555
00:21:19,211 --> 00:21:21,213
that will save us
from bad decisions.

556
00:21:21,213 --> 00:21:22,814
In a semi-automated way.

557
00:21:22,814 --> 00:21:23,982
That's not perfect, but

558
00:21:25,317 --> 00:21:29,388
undoing a bad thing
automatically after 90 days

559
00:21:29,388 --> 00:21:31,122
is better than not at all.

560
00:21:31,123 --> 00:21:33,225
Then you've got some things
that are really forever.

561
00:21:33,225 --> 00:21:35,894
You might say, okay,
this group policy thing,

562
00:21:35,894 --> 00:21:36,895
never gonna go away.

563
00:21:37,896 --> 00:21:39,364
Every 90 days now we're getting

564
00:21:39,364 --> 00:21:40,832
like a billion events coming in.

565
00:21:40,832 --> 00:21:42,534
We don't ever wanna
see this again,

566
00:21:42,534 --> 00:21:44,036
and you can have the
very special button,

567
00:21:44,036 --> 00:21:46,471
the person can push that
makes that thing permanent.

568
00:21:47,773 --> 00:21:49,073
And that's it.

569
00:21:49,074 --> 00:21:50,475
That gets us down to
that promised land,

570
00:21:50,475 --> 00:21:51,576
which is never zero.

571
00:21:53,078 --> 00:21:55,881
We're baselining and
that baseline is alive.

572
00:21:55,881 --> 00:21:58,016
What we want to
do is we just need

573
00:21:58,016 --> 00:22:00,218
to get to a manageable
enough number

574
00:22:01,320 --> 00:22:03,254
given our endpoint count,

575
00:22:03,255 --> 00:22:05,557
and the idea is
that we never stop.

576
00:22:05,557 --> 00:22:08,694
This is not a point-in-time
baseline any more.

577
00:22:08,694 --> 00:22:10,462
This intended to be very
much a living thing.

578
00:22:10,462 --> 00:22:12,831
So at any point in
time, you can take

579
00:22:12,831 --> 00:22:14,733
this set of filtering
criteria you developed,

580
00:22:14,733 --> 00:22:16,635
these decisions
that you've made,

581
00:22:16,635 --> 00:22:17,803
and you can look at that.

582
00:22:17,803 --> 00:22:18,937
You can even diff that.

583
00:22:18,937 --> 00:22:20,706
So if you just
imagine making a list

584
00:22:20,706 --> 00:22:22,006
of all these filtering criteria.

585
00:22:22,007 --> 00:22:23,408
So all of these
different attributes

586
00:22:23,408 --> 00:22:24,609
that you've chained together

587
00:22:24,609 --> 00:22:26,610
and say these things
are okay when they apply

588
00:22:26,611 --> 00:22:28,080
to this set of systems.

589
00:22:28,080 --> 00:22:29,447
You could store
those point-in-time

590
00:22:29,448 --> 00:22:30,716
and you can see how those trend

591
00:22:30,716 --> 00:22:32,818
and those things can
be used for QA/QC.

592
00:22:34,219 --> 00:22:36,421
They can be used to
help you understand

593
00:22:36,421 --> 00:22:38,724
the concept of drift
in an environment,

594
00:22:38,724 --> 00:22:41,993
like how often, on average,
are the environments

595
00:22:41,993 --> 00:22:44,096
that I'm looking at
changing over time.

596
00:22:44,096 --> 00:22:46,898
What might I need to build
in or do to account for that?

597
00:22:48,533 --> 00:22:52,036
Again, the goal here is always
find things that are bad.

598
00:22:52,037 --> 00:22:54,473
So you're taking a
positive approach here

599
00:22:54,473 --> 00:22:56,108
to suppressing what's good.

600
00:22:56,108 --> 00:22:58,777
The overarching goal,
or the only goal,

601
00:22:58,777 --> 00:23:01,480
is to help you bubble up the
things that are bad faster.

602
00:23:02,781 --> 00:23:04,783
By applying this
overtime, we've been able

603
00:23:04,783 --> 00:23:06,685
to scale this
pretty tremendously.

604
00:23:06,685 --> 00:23:09,221
Looking at things, as a rule

605
00:23:09,221 --> 00:23:10,589
having humans look at everything

606
00:23:10,589 --> 00:23:12,357
is a really expensive operation,

607
00:23:13,558 --> 00:23:15,927
but you can see just
by layering together

608
00:23:15,927 --> 00:23:17,696
some really, really
simple attributes,

609
00:23:17,696 --> 00:23:19,063
putting them together
in a simple way,

610
00:23:19,064 --> 00:23:20,532
and then just
architecting a system

611
00:23:20,532 --> 00:23:22,501
that has the proper
feedback loops,

612
00:23:22,501 --> 00:23:24,569
you can do some really,
really effective baselining,

613
00:23:24,569 --> 00:23:26,171
and then at the
tail-end of that,

614
00:23:26,171 --> 00:23:28,740
you can do some
really extraordinarily
effective detection.

615
00:23:28,740 --> 00:23:31,476
The goal is to cast a net
here that's wide enough

616
00:23:31,476 --> 00:23:33,345
and manageable
enough that it gets

617
00:23:33,345 --> 00:23:36,148
to be increasingly
difficult to slip through.

618
00:23:37,082 --> 00:23:38,617
That's all so I'll...

