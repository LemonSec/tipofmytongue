1
00:00:00,734 --> 00:00:03,235
(electronic music)

2
00:00:11,478 --> 00:00:14,681
(audience applauding)

3
00:00:14,681 --> 00:00:18,585
- So first off, this
is a presentation

4
00:00:18,585 --> 00:00:20,320
that was written for
a longer time slot,

5
00:00:20,320 --> 00:00:22,422
and I'm losing some time

6
00:00:22,422 --> 00:00:24,657
at the end of the
regular DFIR time slot

7
00:00:24,657 --> 00:00:26,826
because we have some
important community business

8
00:00:26,826 --> 00:00:28,228
to take care of,

9
00:00:28,228 --> 00:00:30,030
so I will say that
there's a couple of things

10
00:00:30,030 --> 00:00:32,232
I'm gonna just skip over
in this presentation,

11
00:00:32,232 --> 00:00:35,468
but the full slides and
notes and everything

12
00:00:35,468 --> 00:00:38,338
are available from
my website right now.

13
00:00:38,338 --> 00:00:40,106
But what are we
talking about today?

14
00:00:40,106 --> 00:00:44,144
So I'm kind of known for
doing Linux forensics,

15
00:00:44,144 --> 00:00:48,114
and being known as a
Linux forensics person,

16
00:00:48,114 --> 00:00:52,184
I probably see more
Linux forensics cases

17
00:00:52,185 --> 00:00:53,720
than the average person.

18
00:00:53,720 --> 00:00:55,955
One of the most
important artifacts

19
00:00:55,955 --> 00:00:57,724
that we look at
in Linux forensics

20
00:00:57,724 --> 00:00:58,992
is the Bash history file,

21
00:00:58,992 --> 00:01:01,227
which is, of course,
user command history.

22
00:01:01,227 --> 00:01:04,129
And it occurred to me as I'm
doing these investigations

23
00:01:04,129 --> 00:01:07,467
that I knew a lot about Bash
history and how it worked,

24
00:01:07,467 --> 00:01:09,969
but I also had a lot
of questions, right?

25
00:01:09,969 --> 00:01:12,271
I sort of felt like my
knowledge about Bash history

26
00:01:12,272 --> 00:01:15,375
wasn't complete and I
just wanted an excuse
to just sit down

27
00:01:15,375 --> 00:01:16,609
and figure out once and for all

28
00:01:16,609 --> 00:01:19,112
the kind of life cycle
of the Bash history

29
00:01:19,112 --> 00:01:20,880
and answer some of these
outstanding questions.

30
00:01:20,880 --> 00:01:23,116
And then as I was doing this,

31
00:01:23,116 --> 00:01:24,851
I had all these weird,
like "Wow, really?

32
00:01:24,851 --> 00:01:25,952
"Is that the way it works?

33
00:01:25,952 --> 00:01:27,454
"Huh, what, hun?"

34
00:01:27,454 --> 00:01:29,988
And I realized I didn't know
as much about Bash history

35
00:01:29,989 --> 00:01:31,424
as maybe I thought I did.

36
00:01:31,424 --> 00:01:33,259
And so that got me thinking

37
00:01:33,259 --> 00:01:34,794
about the title for
this presentation,

38
00:01:34,794 --> 00:01:36,663
which is, you know,
the game show format,

39
00:01:36,663 --> 00:01:38,598
"You Don't Know Jack
About Bash History."

40
00:01:38,598 --> 00:01:39,833
So let's do it.

41
00:01:39,833 --> 00:01:41,101
We'll do it as a
game show, right?

42
00:01:41,101 --> 00:01:42,635
I always wanted to
be a game show host.

43
00:01:42,635 --> 00:01:45,805
It was one of my life
goals, and so here we go.

44
00:01:45,805 --> 00:01:49,342
So let's talk about the
basics of Bash history, right?

45
00:01:49,342 --> 00:01:54,314
So Bash history lives in a
file in your home directory,

46
00:01:55,715 --> 00:01:58,952
it's called .bashhistory,
and what happens is,

47
00:01:58,952 --> 00:02:00,453
when you start up a shell,

48
00:02:00,453 --> 00:02:04,090
the command shell reads in
your current Bash history file

49
00:02:04,090 --> 00:02:06,459
to populate your history
that you can go back

50
00:02:06,459 --> 00:02:08,761
and search and rerun
previous commands.

51
00:02:08,761 --> 00:02:11,831
When the shell exits,

52
00:02:11,831 --> 00:02:15,101
and it turns out that exit
is a slippery term here,

53
00:02:15,101 --> 00:02:16,903
as I discovered
during this research,

54
00:02:16,903 --> 00:02:19,539
but for some value of
exit, when the shell exits,

55
00:02:19,539 --> 00:02:23,609
what happens it the
exiting shell reads in

56
00:02:23,610 --> 00:02:25,678
the Bash history from disc,

57
00:02:25,678 --> 00:02:28,715
then adds to the end
of it any new commands

58
00:02:28,715 --> 00:02:31,551
that were entered during
that shell session,

59
00:02:31,551 --> 00:02:35,588
and then the whole
thing gets truncated to,

60
00:02:35,588 --> 00:02:37,991
there's an environment
variable called HISTFILESIZE,

61
00:02:37,991 --> 00:02:40,160
which is the number
of lines that go

62
00:02:40,160 --> 00:02:41,694
into your Bash history file.

63
00:02:41,694 --> 00:02:44,063
So it gets truncated
to that many lines

64
00:02:44,063 --> 00:02:46,933
and then dropped
back to disc, okay,

65
00:02:46,933 --> 00:02:50,870
which has some
interesting implications.

66
00:02:50,870 --> 00:02:53,006
So, some important
things to remember

67
00:02:53,006 --> 00:02:56,209
about the basics
of Bash history:

68
00:02:56,209 --> 00:02:57,010
hello.

69
00:03:00,847 --> 00:03:01,881
Okay.

70
00:03:04,350 --> 00:03:05,185
Oops.

71
00:03:06,519 --> 00:03:07,921
All right.
(audience laughs)

72
00:03:07,921 --> 00:03:11,724
Wow, okay, let's go back.

73
00:03:15,461 --> 00:03:19,866
Wow, okay, right,
moving right along.

74
00:03:21,067 --> 00:03:21,901
So,

75
00:03:25,171 --> 00:03:27,807
one thing is the commands

76
00:03:27,807 --> 00:03:29,909
that are in the
active shells, right,

77
00:03:29,909 --> 00:03:31,444
the commands that you've
typed into the shells

78
00:03:31,444 --> 00:03:33,412
that are currently running
in your unit's environment,

79
00:03:33,413 --> 00:03:35,515
aren't on disc, right?

80
00:03:35,515 --> 00:03:37,951
The only place those
commands exist right now,

81
00:03:37,951 --> 00:03:39,219
while that shell is running,

82
00:03:39,219 --> 00:03:41,421
is in the memory of
that process, okay?

83
00:03:41,421 --> 00:03:45,924
So you don't, if you take
a disc image of a system,

84
00:03:45,925 --> 00:03:49,495
you don't get the commands from
the running command shells.

85
00:03:49,495 --> 00:03:51,664
You just get whatever's
been flushed to disc

86
00:03:51,664 --> 00:03:53,433
by shells that have exited.

87
00:03:53,433 --> 00:03:58,438
Also, the order of commands
in the Bash history file

88
00:03:59,906 --> 00:04:02,842
has not necessarily anything
to do with chronology, right?

89
00:04:02,842 --> 00:04:06,045
Because commands are
written to the Bash history

90
00:04:06,879 --> 00:04:08,614
when the shell exits.

91
00:04:08,615 --> 00:04:13,486
So you can have blocks
of commands from shells

92
00:04:13,486 --> 00:04:15,287
all out of chronological
order, all right?

93
00:04:15,288 --> 00:04:19,158
I may start up a
shell 10 hours ago,

94
00:04:20,326 --> 00:04:21,527
type a bunch of
commands into it,

95
00:04:21,527 --> 00:04:22,895
but if I leave
that shell running

96
00:04:22,895 --> 00:04:25,798
and I run and execute a
bunch of other shells,

97
00:04:25,798 --> 00:04:29,068
those ephemeral shells
command histories get dropped

98
00:04:29,068 --> 00:04:31,104
into Bash history,
and then finally,

99
00:04:31,104 --> 00:04:33,106
if I exit that
long-running shell,

100
00:04:33,106 --> 00:04:35,608
any new commands from
that shell get dropped in

101
00:04:35,608 --> 00:04:38,278
after all of the
other ones, right?

102
00:04:38,278 --> 00:04:40,146
Which is confusing
to a lot of people

103
00:04:40,146 --> 00:04:42,482
who are analyzing Bash history.

104
00:04:42,482 --> 00:04:44,651
Also, the nature of the way

105
00:04:44,651 --> 00:04:47,520
Bash writes the
Bash history file

106
00:04:47,520 --> 00:04:50,522
is that the data
blocks that made up

107
00:04:50,523 --> 00:04:54,761
the old Bash history file
don't get overwritten.

108
00:04:54,761 --> 00:04:57,163
Every time you drop a
new Bash history file,

109
00:04:57,163 --> 00:05:00,400
you're dropping it into new,
unallocated data blocks,

110
00:05:00,400 --> 00:05:05,070
which means there tend
to be a lot of older

111
00:05:05,071 --> 00:05:08,708
Bash history copies floating
around and unallocated

112
00:05:08,708 --> 00:05:10,176
on your systems, right?

113
00:05:10,176 --> 00:05:12,145
So even if somebody's
doing anti-forensics

114
00:05:12,145 --> 00:05:14,847
and clearing out the
current Bash history,

115
00:05:14,847 --> 00:05:18,051
you'll still find remnants
of older Bash history files

116
00:05:18,051 --> 00:05:19,419
floating around and unallocated,

117
00:05:19,419 --> 00:05:20,986
and so I want to do a quick demo

118
00:05:20,987 --> 00:05:23,923
that demonstrates
some of these things

119
00:05:23,923 --> 00:05:26,426
just to sort of make
this visual for you.

120
00:05:26,426 --> 00:05:29,462
So, flipping over
into my Unix machine.

121
00:05:30,630 --> 00:05:32,632
Okay, so here's
what I'm gonna do.

122
00:05:32,632 --> 00:05:34,233
First thing I wanna
do is I wanna show you

123
00:05:34,233 --> 00:05:37,837
sort of the current state
of the Bash history file

124
00:05:37,837 --> 00:05:39,806
for my user account.

125
00:05:39,806 --> 00:05:44,811
So we'll do an L S minus I
on my .bash history file,

126
00:05:46,779 --> 00:05:50,917
so it's Inode number 13371491.

127
00:05:50,917 --> 00:05:52,417
All right, so what
I'm gonna do is

128
00:05:52,418 --> 00:05:54,587
I'm gonna do a little
Sleuth Kit action,

129
00:05:55,755 --> 00:05:57,256
'cause you know I'm all
about the Sleuth kit,

130
00:05:57,256 --> 00:06:01,861
so we'll do an Istat on dev
mapper for that Inode number.

131
00:06:05,998 --> 00:06:09,969
So I wanna just show you what
the current block allocation

132
00:06:09,969 --> 00:06:12,872
for my Bash history file is.

133
00:06:12,872 --> 00:06:14,140
All right, you
can see, you know,

134
00:06:14,140 --> 00:06:16,909
the basic information
about my Bash history,

135
00:06:16,909 --> 00:06:19,010
but down here you can
see that the blocks

136
00:06:19,011 --> 00:06:24,016
that this thing currently
occupies are 90, 91, and 92,

137
00:06:24,984 --> 00:06:26,219
all right?

138
00:06:26,219 --> 00:06:27,420
Okay, so here's
what I'm gonna do.

139
00:06:27,420 --> 00:06:29,822
I'm gonna open two
shell windows, right?

140
00:06:29,822 --> 00:06:33,559
So, I'll make this
a little bit bigger

141
00:06:33,559 --> 00:06:35,161
so you can see what I'm typing.

142
00:06:40,600 --> 00:06:42,735
Let's actually do it
as a different window.

143
00:06:44,137 --> 00:06:44,971
Okay.

144
00:06:46,973 --> 00:06:48,241
All right, so,

145
00:06:51,911 --> 00:06:54,614
just to prove a point
here about chronology,

146
00:06:54,614 --> 00:06:59,619
echo, I am typing this
command first, right?

147
00:07:02,355 --> 00:07:05,458
And so in this shell,

148
00:07:06,559 --> 00:07:11,397
I am typing this
command second, right?

149
00:07:12,665 --> 00:07:15,334
Okay, but I'm gonna
exit the shells

150
00:07:15,334 --> 00:07:17,270
in the reverse order, all right?

151
00:07:17,270 --> 00:07:21,841
So I'm gonna exit command
second shell first,

152
00:07:21,841 --> 00:07:24,177
and then I'm gonna execute, oop,

153
00:07:24,177 --> 00:07:29,182
exit, this one second, okay?

154
00:07:30,349 --> 00:07:34,086
And if I tail my
Bash history file,

155
00:07:36,456 --> 00:07:39,792
you can see, right, they went in

156
00:07:39,792 --> 00:07:42,161
in the order that
the shells exited,

157
00:07:42,161 --> 00:07:44,397
not the order I
typed them in, right?

158
00:07:44,397 --> 00:07:46,832
And there's no time
stamps there to tell you

159
00:07:46,833 --> 00:07:49,001
which one actually
happened first, right?

160
00:07:49,001 --> 00:07:52,304
You have to infer that
from other artifacts.

161
00:07:52,305 --> 00:07:55,208
Okay, but the other thing
I wanted to show you is

162
00:07:55,208 --> 00:07:58,411
I wanna show you that the
blocks are changed, too, right?

163
00:07:58,411 --> 00:08:00,313
So my original Bash history file

164
00:08:00,313 --> 00:08:04,082
was in blocks 90,
91, and 92, right?

165
00:08:04,083 --> 00:08:05,952
So the Inode number
doesn't change

166
00:08:05,952 --> 00:08:10,089
when Bash history drops again,

167
00:08:10,089 --> 00:08:11,357
but the block numbers do.

168
00:08:11,357 --> 00:08:14,560
So if I rerun the same
Istat command, right,

169
00:08:14,560 --> 00:08:19,565
you can see that now it's
blocks nine, 10, 11, I think.

170
00:08:21,367 --> 00:08:24,403
So, yeah, so what about
the old blocks, though?

171
00:08:24,403 --> 00:08:26,806
90, 91, 92?

172
00:08:26,806 --> 00:08:28,841
Oh, they're still there,
nothing's overwritten them yet,

173
00:08:28,841 --> 00:08:30,443
'cause I barely use my system,

174
00:08:30,443 --> 00:08:34,981
and I could go back and recover
the original Bash history

175
00:08:34,981 --> 00:08:37,350
from those blocks, right?

176
00:08:37,350 --> 00:08:40,019
So the question is how do you
carve for it, though, right?

177
00:08:40,019 --> 00:08:44,590
Because you got this just sort
of generic text file, right,

178
00:08:44,590 --> 00:08:46,692
and you need a
pattern to carve for

179
00:08:46,692 --> 00:08:48,327
to find the old
Bash history files,

180
00:08:48,327 --> 00:08:50,062
so just as a note
I will tell you

181
00:08:50,062 --> 00:08:55,067
that a good pattern to carve
for, C D space slash, right?

182
00:08:56,502 --> 00:08:58,304
Think about the number of
times in your command shell

183
00:08:58,304 --> 00:09:02,475
you type C D space
slash var log,

184
00:09:02,475 --> 00:09:04,043
or something like that, right?

185
00:09:04,043 --> 00:09:07,647
So it turns out that basic
Unix commands like that,

186
00:09:07,647 --> 00:09:11,584
CD/, LS /, SSH , things
like that are good markers

187
00:09:16,489 --> 00:09:18,691
that you can carve
for in unallocated

188
00:09:18,691 --> 00:09:21,861
to find these remnants of
Bash history floating around

189
00:09:21,861 --> 00:09:23,963
in your system.

190
00:09:23,963 --> 00:09:27,333
And you'll be very
successful at pulling back

191
00:09:27,333 --> 00:09:29,302
chunks of Bash history that way.

192
00:09:29,302 --> 00:09:31,370
Okay, so you get the
basic idea, right,

193
00:09:31,370 --> 00:09:32,605
about how this works?

194
00:09:32,605 --> 00:09:34,273
Okay, let's do some
quiz questions, right?

195
00:09:34,273 --> 00:09:35,474
It's game show time.

196
00:09:35,474 --> 00:09:36,275
So,

197
00:09:39,211 --> 00:09:41,314
(mumbles)

198
00:09:41,314 --> 00:09:42,281
all right,

199
00:09:44,684 --> 00:09:46,285
and feel free to shout them out.

200
00:09:52,325 --> 00:09:57,330
So, in my shell, I R M
my Bash history file,

201
00:09:58,197 --> 00:09:59,699
and then I exit the shell.

202
00:09:59,699 --> 00:10:03,035
What's in Bash history on
the other side of that?

203
00:10:03,035 --> 00:10:06,505
(audience members
responding off-mic)

204
00:10:06,505 --> 00:10:09,208
Yeah, right, I mean, so,
it's basically any commands

205
00:10:09,208 --> 00:10:12,111
that I typed in the shell
where I did that R M,

206
00:10:12,111 --> 00:10:14,313
including the R M
command and the exit,

207
00:10:14,313 --> 00:10:16,348
but possibly also the
commands preceding it, right.

208
00:10:16,349 --> 00:10:20,353
So yeah, so you basically
removed any past history

209
00:10:20,353 --> 00:10:22,854
and you only get the
history for that shell,

210
00:10:22,855 --> 00:10:26,025
which is sort of an
anti-forensic technique.

211
00:10:26,025 --> 00:10:30,795
What's interesting about
this is, okay, great,

212
00:10:30,796 --> 00:10:34,800
but what if I, rather than
removing the Bash history,

213
00:10:34,800 --> 00:10:38,471
which is pretty obvious
that you truncated the file,

214
00:10:40,873 --> 00:10:43,876
what if I edit the
existing Bash history file?

215
00:10:43,876 --> 00:10:45,845
Just make some changes
to the commands

216
00:10:45,845 --> 00:10:50,316
in the Bash history file
to say, cover my tracks,

217
00:10:50,316 --> 00:10:53,886
commands that maybe I
shouldn't have been typing,

218
00:10:53,886 --> 00:10:55,454
so I clean them up a little bit

219
00:10:55,454 --> 00:10:56,789
by editing the
Bash history files.

220
00:10:56,789 --> 00:10:58,324
It's just a text file, right?

221
00:10:58,324 --> 00:11:02,495
So, if I edit Bash history
and then exit the shell,

222
00:11:02,495 --> 00:11:04,964
are my edits going
to be preserved

223
00:11:04,964 --> 00:11:07,033
when the new Bash
history file drops?

224
00:11:08,901 --> 00:11:10,435
Yes, they will,
because remember,

225
00:11:10,436 --> 00:11:12,705
the algorithm that
Bash uses is to

226
00:11:12,705 --> 00:11:15,508
read in the existing
Bash history off of disc,

227
00:11:15,508 --> 00:11:17,009
whatever that is,

228
00:11:17,009 --> 00:11:19,278
append the commands from
my current command shell,

229
00:11:19,278 --> 00:11:21,981
and then truncate to
HISTFILESIZE lines.

230
00:11:21,981 --> 00:11:26,919
So yeah, so you could go
back and modify the history,

231
00:11:28,521 --> 00:11:31,424
and those modifications
will just be carried forward

232
00:11:31,424 --> 00:11:33,459
from that point on.

233
00:11:33,459 --> 00:11:37,863
And integrity attacks
are always more dangerous

234
00:11:37,863 --> 00:11:40,700
than denial of service
attacks, right?

235
00:11:40,700 --> 00:11:44,336
So yeah, I can
manipulate Bash history

236
00:11:44,336 --> 00:11:46,405
just by editing it
like a text file,

237
00:11:46,405 --> 00:11:49,809
which is interesting.

238
00:11:49,809 --> 00:11:53,012
Okay, now we talked about
that Bash history file

239
00:11:53,012 --> 00:11:55,080
is only written on exit,

240
00:11:55,081 --> 00:11:58,384
and it has to be sort
of a normal exit, right,

241
00:11:58,384 --> 00:11:59,952
I understood that, right,

242
00:11:59,952 --> 00:12:03,255
I mean if you kill minus nine
the shell, it just goes away,

243
00:12:03,255 --> 00:12:05,357
and doesn't have a chance
to write Bash history.

244
00:12:05,357 --> 00:12:07,660
So what I did, I
was curious about,

245
00:12:07,660 --> 00:12:11,664
what constitutes a normal
exit for Bash history

246
00:12:11,664 --> 00:12:13,766
as far as getting
written to disk.

247
00:12:13,766 --> 00:12:15,901
And what I was surprised by is

248
00:12:15,901 --> 00:12:19,104
how few different
ways there were

249
00:12:19,105 --> 00:12:22,274
of exiting a shell and getting
the Bash history written.

250
00:12:22,274 --> 00:12:26,812
It turns out that there's only
a very limited number of ways

251
00:12:26,812 --> 00:12:28,981
that you can get Bash
history written out to disc.

252
00:12:28,981 --> 00:12:33,986
So the normal exit commands,
CTRL D, exit, and logout,

253
00:12:34,854 --> 00:12:36,122
if it's a login shell, right,

254
00:12:36,122 --> 00:12:38,958
those are the ones
we see most often,

255
00:12:38,958 --> 00:12:41,593
but it turns out
that beyond those,

256
00:12:41,594 --> 00:12:44,697
there's actually very little
else that causes Bash history

257
00:12:44,697 --> 00:12:45,531
to be written.

258
00:12:45,531 --> 00:12:47,967
So you can kill a shell,

259
00:12:47,967 --> 00:12:50,603
you can send just a normal
kill to the Bash shell,

260
00:12:50,603 --> 00:12:52,738
and it will write Bash
history on the way out.

261
00:12:52,738 --> 00:12:53,706
You can also HUP it.

262
00:12:53,706 --> 00:12:55,107
You can send a SIGHUP to it.

263
00:12:55,107 --> 00:12:57,443
The shell will die and
write Bash history.

264
00:12:58,844 --> 00:13:02,515
No other signals cause
Bash history to be written.

265
00:13:02,515 --> 00:13:05,184
I mean there are literally
dozens of different signals

266
00:13:05,184 --> 00:13:07,453
that you can send to processes
in the Unix environment,

267
00:13:07,453 --> 00:13:10,656
and the only two that result
in Bash history being written

268
00:13:10,656 --> 00:13:13,992
are normal kill, which
is SIGTERM, and SIGHUP.

269
00:13:13,993 --> 00:13:17,163
That's it, which was
surprising to me.

270
00:13:17,163 --> 00:13:19,899
And I went through every
single possible signal,

271
00:13:19,899 --> 00:13:21,367
and I was like, "Wow, really?

272
00:13:21,367 --> 00:13:22,200
"Okay."

273
00:13:23,302 --> 00:13:28,207
You can nuke, if you're
logged in by SSH,

274
00:13:29,308 --> 00:13:31,944
you can nuke the
person's SSH process,

275
00:13:31,944 --> 00:13:35,414
the Bash shell will close
normally and write Bash history.

276
00:13:35,414 --> 00:13:39,485
So even if you kill minus
nine the parent SSH process,

277
00:13:39,485 --> 00:13:43,222
the Bash shell will still
write Bash history, okay?

278
00:13:43,222 --> 00:13:47,593
And if you exit your Windows
or shut down the machine,

279
00:13:47,593 --> 00:13:51,831
some of the shells end
up writing Bash history,

280
00:13:51,831 --> 00:13:53,632
but not all of them,
as it turns out.

281
00:13:53,632 --> 00:13:55,767
So on my typical desktop,

282
00:13:55,768 --> 00:13:58,304
I'll have at least half a dozen

283
00:13:58,304 --> 00:14:00,105
different terminal windows open,

284
00:14:00,105 --> 00:14:03,375
and if I shut down my system,

285
00:14:03,375 --> 00:14:07,079
some of them will flush
their Bash history to disc.

286
00:14:07,079 --> 00:14:10,683
At least three in my
anecdotal testing,

287
00:14:10,683 --> 00:14:13,519
and sometimes up to six
or seven will manage

288
00:14:13,519 --> 00:14:16,755
to write their history
into the Bash history file,

289
00:14:16,755 --> 00:14:19,158
but I won't get all
of them, typically.

290
00:14:19,158 --> 00:14:21,093
And I think what's
going on there

291
00:14:21,093 --> 00:14:22,493
is there's a race condition,

292
00:14:22,494 --> 00:14:24,630
which is all of
those exiting shells

293
00:14:24,630 --> 00:14:27,399
are trying to dump Bash
history at the same time,

294
00:14:27,399 --> 00:14:29,468
and some of them just
clobber each other.

295
00:14:29,468 --> 00:14:32,438
So you don't get the history
from some of the shells,

296
00:14:32,438 --> 00:14:34,073
but you will get some of them.

297
00:14:35,608 --> 00:14:38,077
I found no other way to
write a Bash history file

298
00:14:38,077 --> 00:14:39,578
other than things you
see on this slide,

299
00:14:39,578 --> 00:14:42,514
which is really
surprising to me.

300
00:14:42,514 --> 00:14:45,284
So no other exit conditions
that I could find

301
00:14:45,284 --> 00:14:47,519
caused the history
file to be written,

302
00:14:47,519 --> 00:14:50,155
which is a fascinating
result to me.

303
00:14:51,824 --> 00:14:53,925
Okay, so based on that,

304
00:14:55,094 --> 00:14:57,162
so I open up a brand
new shell window,

305
00:14:57,162 --> 00:14:58,430
but I don't type any commands.

306
00:14:58,430 --> 00:15:01,165
I just hit CTRL D
to exit the shell.

307
00:15:01,166 --> 00:15:04,770
Does Bash update Bash history
under those circumstances,

308
00:15:04,770 --> 00:15:05,603
yes or no?

309
00:15:07,640 --> 00:15:08,774
Who says yes?

310
00:15:09,909 --> 00:15:11,010
Who says no?

311
00:15:12,211 --> 00:15:14,280
Who wouldn't raise their
hands if I said purple?

312
00:15:14,280 --> 00:15:18,918
Okay, so it turns out that
Bash is actually smart enough

313
00:15:18,918 --> 00:15:21,086
not to bother to
write a Bash history

314
00:15:21,086 --> 00:15:22,087
under this circumstance.

315
00:15:22,087 --> 00:15:23,956
If you just close the shell,

316
00:15:23,956 --> 00:15:26,926
without ever typing a command,
it says, "Ah, I don't care,"

317
00:15:26,926 --> 00:15:29,194
and it doesn't update
Bash history at all.

318
00:15:30,296 --> 00:15:31,997
So that was interesting to me.

319
00:15:36,402 --> 00:15:37,403
Okay.

320
00:15:39,638 --> 00:15:42,574
Now, in typical
Unix environments,

321
00:15:42,574 --> 00:15:45,310
SSH uses this feature
called Privilege Separation.

322
00:15:45,311 --> 00:15:47,913
What that means is that
there's a master SSH process,

323
00:15:47,913 --> 00:15:50,149
the thing that's
listening on Port 22.

324
00:15:50,149 --> 00:15:55,154
It forks a child process, a
root running child process,

325
00:15:56,288 --> 00:15:58,157
which in turn forks
another process,

326
00:15:58,157 --> 00:16:01,060
which is the thing that's
owned by your user id

327
00:16:01,060 --> 00:16:02,593
that runs your SSH session.

328
00:16:02,594 --> 00:16:06,432
Okay, so I mentioned that if
you killed that SSH process

329
00:16:06,432 --> 00:16:08,701
that's owned by you, that's
running your session,

330
00:16:08,701 --> 00:16:10,436
you get a Bash history.

331
00:16:10,436 --> 00:16:12,338
So here's a more
interesting question:

332
00:16:12,338 --> 00:16:14,506
that intervening process,

333
00:16:14,506 --> 00:16:17,343
the parent of your
personal SSH process,

334
00:16:18,711 --> 00:16:22,681
if I kill that, do I get
Bash history written to disc?

335
00:16:22,681 --> 00:16:27,286
So what happens if I kill
the root running subprocess

336
00:16:27,286 --> 00:16:29,787
that's running your
personal SSH session?

337
00:16:29,788 --> 00:16:32,091
Do you get a Bash history
file written or not?

338
00:16:35,661 --> 00:16:36,895
You say yes?

339
00:16:36,895 --> 00:16:38,097
You'd be wrong.

340
00:16:38,097 --> 00:16:42,434
So it turns out that
what happens is,

341
00:16:42,434 --> 00:16:44,837
your personal SSH process
just keeps running

342
00:16:44,837 --> 00:16:46,038
and then so does your shell.

343
00:16:46,038 --> 00:16:47,306
You don't get Bash
history at all

344
00:16:47,306 --> 00:16:48,574
because the process
is still running.

345
00:16:48,574 --> 00:16:50,376
Ha ha, trick question, sorry.

346
00:16:50,376 --> 00:16:55,381
Okay, so yeah, so if
you're on a live system,

347
00:16:56,248 --> 00:16:58,350
and you want to get Bash history

348
00:16:58,350 --> 00:17:00,953
from the process of
a logged in user,

349
00:17:00,953 --> 00:17:04,022
don't kill the root
owned SSH process

350
00:17:04,022 --> 00:17:05,858
at the top of that process tree.

351
00:17:05,858 --> 00:17:08,159
Kill the one that's
running their session,

352
00:17:08,160 --> 00:17:11,363
the one that's owned by that
user on that particular TTY.

353
00:17:11,363 --> 00:17:13,499
That's the way to get
Bash history to drop.

354
00:17:14,532 --> 00:17:15,367
All right.

355
00:17:17,803 --> 00:17:21,240
Now, the thing about Bash
history files on disc is that,

356
00:17:21,240 --> 00:17:25,577
by default anyway, there
are no time stamps, right?

357
00:17:25,577 --> 00:17:26,779
Well, that sucks.

358
00:17:27,913 --> 00:17:30,883
But thanks to the
volatility developers,

359
00:17:30,883 --> 00:17:34,920
we can get time stamps
from the Bash history

360
00:17:34,920 --> 00:17:36,188
of shells in memory.

361
00:17:36,188 --> 00:17:38,057
And, more excitingly, we
get all of the commands.

362
00:17:38,057 --> 00:17:39,491
Remember, I said if the
command shell is still running,

363
00:17:39,491 --> 00:17:40,692
you don't see the commands
that have been typed

364
00:17:40,692 --> 00:17:44,730
in that shell until
the shell exits.

365
00:17:49,001 --> 00:17:50,502
But with memory analysis,

366
00:17:50,502 --> 00:17:54,773
I can interrogate the memory
of the running Bash processes

367
00:17:54,773 --> 00:17:56,608
and see all of the
command history,

368
00:17:56,608 --> 00:17:59,311
including the commands that
have been typed in the shell.

369
00:17:59,311 --> 00:18:00,512
Now what's interesting
about this,

370
00:18:00,512 --> 00:18:02,246
take a look at the
example on the slide.

371
00:18:02,247 --> 00:18:04,850
You can see that on the
first several lines,

372
00:18:04,850 --> 00:18:09,088
the timestamps are all
the same, 22:50:33, right?

373
00:18:09,088 --> 00:18:14,093
Okay, that is when this
shell started and read in

374
00:18:14,960 --> 00:18:16,762
the Bash history file from disc.

375
00:18:16,762 --> 00:18:19,965
The minute you see the
time stamps changing,

376
00:18:19,965 --> 00:18:23,534
so down there at
around the echo,

377
00:18:23,535 --> 00:18:26,138
this is the first command I
typed in the shell, right,

378
00:18:26,138 --> 00:18:28,040
that is the first command
I typed in the shell.

379
00:18:28,040 --> 00:18:30,274
And you can tell because
it's the first command

380
00:18:30,275 --> 00:18:32,211
that has a timestamp
that's different

381
00:18:32,211 --> 00:18:33,812
from that baseline timestamp

382
00:18:33,812 --> 00:18:37,783
when the command history
was loaded from disc.

383
00:18:37,783 --> 00:18:41,120
So we see when
the shell started,

384
00:18:41,120 --> 00:18:43,421
we see the first commands
that were typed in that shell,

385
00:18:43,422 --> 00:18:44,356
and so on.

386
00:18:44,356 --> 00:18:45,858
Okay, so that's really useful.

387
00:18:47,392 --> 00:18:49,495
So memory analysis for
the win, definitely,

388
00:18:49,495 --> 00:18:54,299
but I want timestamps
in my Bash history.

389
00:18:55,501 --> 00:18:57,603
So there's an
environment variable.

390
00:18:57,603 --> 00:18:59,071
All right,

391
00:18:59,071 --> 00:19:01,639
so if I just look at my
command history by default,

392
00:19:01,640 --> 00:19:05,310
I just see a list of
commands without timestamps.

393
00:19:05,310 --> 00:19:10,048
But if you set HISTTIMEFORMAT,
then the display changes

394
00:19:10,048 --> 00:19:13,318
and it actually shows you the
timestamps on the commands

395
00:19:13,318 --> 00:19:15,654
in whatever time
format you want.

396
00:19:15,654 --> 00:19:20,659
However, setting HISTTIMEFORMAT
also changes the format

397
00:19:21,860 --> 00:19:25,264
that the Bash
history is dumped in.

398
00:19:25,264 --> 00:19:29,368
So when you turn on
HISTTIMEFORMAT in your shell,

399
00:19:29,368 --> 00:19:32,937
and you look at the
output in Bash history,

400
00:19:32,938 --> 00:19:35,974
all of a sudden these
new comment lines appear.

401
00:19:35,974 --> 00:19:39,011
And those comments are
epic time stamps, right,

402
00:19:39,011 --> 00:19:40,913
number of seconds since 1970,

403
00:19:40,913 --> 00:19:43,415
which represent when that
command was executed.

404
00:19:43,415 --> 00:19:47,319
So HISTTIMEFORMAT not only
changes the display output,

405
00:19:47,319 --> 00:19:51,956
but it actually changes how
that information is saved

406
00:19:51,957 --> 00:19:53,125
in Bash history.

407
00:19:54,393 --> 00:19:55,661
Cool, right?

408
00:19:55,661 --> 00:19:57,129
But of course this is
isn't set by default,

409
00:19:57,129 --> 00:19:59,697
so you're never,
I won't say never,

410
00:19:59,698 --> 00:20:02,501
but rarely in the wild
to we actually encounter

411
00:20:02,501 --> 00:20:05,771
this format in Bash history.

412
00:20:05,771 --> 00:20:10,742
Okay, but let's say we
have history turned on,

413
00:20:10,742 --> 00:20:14,178
some interesting
behaviors that you see.

414
00:20:14,179 --> 00:20:15,414
Okay, so

415
00:20:17,216 --> 00:20:19,751
I'm in a shell, and
I'm typing commands,

416
00:20:19,751 --> 00:20:24,756
and then I set HISTTIMEFORMAT,
and then I exit that shell,

417
00:20:25,490 --> 00:20:27,092
updating Bash history.

418
00:20:27,092 --> 00:20:28,894
What does Bash
history look like?

419
00:20:30,195 --> 00:20:35,200
Do I get timestamps on
the entries from shells

420
00:20:37,035 --> 00:20:39,805
where HISTTIMEFORMAT
wasn't set, right?

421
00:20:39,805 --> 00:20:41,340
Does it go through and populate

422
00:20:41,340 --> 00:20:44,342
all of the Bash history
with timestamp entries,

423
00:20:44,343 --> 00:20:47,746
or just the entries from the
shell that I just exited?

424
00:20:49,281 --> 00:20:50,081
Anybody know?

425
00:20:51,550 --> 00:20:53,819
(audience member
speaking off-mic)

426
00:20:53,819 --> 00:20:55,087
Hhm?

427
00:20:55,087 --> 00:20:56,555
(audience member
speaking off-mic)

428
00:20:56,555 --> 00:20:57,889
Yeah.

429
00:20:57,889 --> 00:21:00,692
So it turns out
that the answer is

430
00:21:02,761 --> 00:21:04,997
everything that didn't
have a timestamp

431
00:21:04,997 --> 00:21:06,698
still doesn't have a timestamp.

432
00:21:06,698 --> 00:21:09,167
You only see timestamps
on the new entries

433
00:21:09,167 --> 00:21:12,803
from the shell where
you set HISTTIMEFORMAT.

434
00:21:12,804 --> 00:21:15,040
Okay, so you got
this hybrid file,

435
00:21:15,040 --> 00:21:16,774
where some of the
entries are timestamped

436
00:21:16,775 --> 00:21:18,377
and some of them aren't.

437
00:21:18,377 --> 00:21:21,713
This is why it's probably
better to set HISTTIMEFORMAT

438
00:21:21,713 --> 00:21:23,248
in something like
that's in profile,

439
00:21:23,248 --> 00:21:25,884
so it's just turned on
by default for everybody.

440
00:21:25,884 --> 00:21:27,152
But be that as it may.

441
00:21:27,152 --> 00:21:29,288
Okay, so yeah, so you
got this hybrid file.

442
00:21:29,288 --> 00:21:33,325
Now let's suppose I
start up another shell

443
00:21:33,325 --> 00:21:35,260
where HISTTIMEFORMAT isn't set,

444
00:21:35,260 --> 00:21:37,262
type in some commands,
and then I exit.

445
00:21:37,262 --> 00:21:39,364
Now what does my Bash
history look like?

446
00:21:40,532 --> 00:21:42,501
(audience member
speaking off-mic)

447
00:21:42,501 --> 00:21:43,769
You're right, it's banded.

448
00:21:43,769 --> 00:21:46,238
So you see a block
with no timestamps,

449
00:21:46,238 --> 00:21:48,707
then you see the
block with timestamps,

450
00:21:48,707 --> 00:21:51,076
and then you see another
block with no timestamps.

451
00:21:51,076 --> 00:21:52,878
So, yeah,

452
00:21:52,878 --> 00:21:56,782
the answer is the Bash
history is agnostic about it,

453
00:21:56,782 --> 00:21:59,784
and is willing to support
files that have timestamps

454
00:21:59,785 --> 00:22:02,321
on some entries and no
timestamps on the other.

455
00:22:03,955 --> 00:22:06,891
(audience member
speaking off-mic)

456
00:22:06,892 --> 00:22:08,794
Yeah, so when you run
the history command,

457
00:22:08,794 --> 00:22:13,632
what you see is banded output,
as it turns out, right,

458
00:22:13,632 --> 00:22:16,101
where some of the things
have legitimate timestamps

459
00:22:16,101 --> 00:22:18,370
that were stored in Bash
history, and some of them are,

460
00:22:18,370 --> 00:22:21,540
"Well, it's when I read Bash
history from disc," right?

461
00:22:21,540 --> 00:22:23,642
Which is also true, by the way,

462
00:22:23,642 --> 00:22:26,211
when you're doing
memory analysis.

463
00:22:26,211 --> 00:22:28,080
If you look at it in memory,

464
00:22:28,080 --> 00:22:30,349
you see the same
banding feature.

465
00:22:30,349 --> 00:22:33,652
So when the Bash history
file is read in from disc,

466
00:22:33,652 --> 00:22:35,520
if it gets timestamps,

467
00:22:35,520 --> 00:22:39,291
it will set the timestamps
on the entries appropriately,

468
00:22:39,291 --> 00:22:42,159
and for the others it's
just shell load times.

469
00:22:42,160 --> 00:22:44,730
So you actually will
see this banded behavior

470
00:22:44,730 --> 00:22:48,467
also brought into
memory analysis as well.

471
00:22:48,467 --> 00:22:49,234
Yeah.

472
00:22:50,135 --> 00:22:50,936
So.

473
00:22:52,871 --> 00:22:54,373
This is my favorite.

474
00:22:54,373 --> 00:22:55,640
Okay.

475
00:22:55,640 --> 00:22:58,477
So, HISTFILESIZE is 500,
which is the default.

476
00:22:58,477 --> 00:23:00,212
I've got HISTTIMEFORMAT,

477
00:23:00,212 --> 00:23:04,449
and I've entered at least
500 single-line commands

478
00:23:04,449 --> 00:23:06,852
into the current shell.

479
00:23:06,852 --> 00:23:09,554
I then exit the shell, okay?

480
00:23:09,554 --> 00:23:14,393
So there are 500 brand
new commands going
into Bash history,

481
00:23:14,393 --> 00:23:16,495
but HISTTIMEFORMAT is set.

482
00:23:16,495 --> 00:23:18,530
So the question is,

483
00:23:18,530 --> 00:23:21,933
how many commands get
saved in Bash history?

484
00:23:23,101 --> 00:23:24,336
(audience member
speaking off-mic)

485
00:23:24,336 --> 00:23:25,570
Who says 250?

486
00:23:26,738 --> 00:23:28,106
Who says all 500?

487
00:23:29,608 --> 00:23:31,009
You're right.

488
00:23:31,009 --> 00:23:34,880
So it turns out that
all 500 lines are saved,

489
00:23:34,880 --> 00:23:37,716
including the timestamps, right?

490
00:23:37,716 --> 00:23:39,083
Okay.

491
00:23:39,084 --> 00:23:41,853
So yeah, you actually do get,

492
00:23:41,853 --> 00:23:45,424
so setting HISTTIME doesn't
shorten the amount of commands

493
00:23:45,424 --> 00:23:46,992
that get saved in Bash history.

494
00:23:46,992 --> 00:23:48,493
So that's a good thing.

495
00:23:48,493 --> 00:23:51,696
So how many lines long is
your Bash history file?

496
00:23:52,998 --> 00:23:55,467
500 commands plus
timestamps, how long is it?

497
00:23:55,467 --> 00:23:57,702
A thousand lines, right?

498
00:23:57,702 --> 00:23:59,171
Wrong.

499
00:23:59,171 --> 00:24:02,274
It's actually 999 lines,
because there's a bug in Bash

500
00:24:02,274 --> 00:24:05,843
that the initial timestamp
comment gets truncated off.

501
00:24:05,844 --> 00:24:09,581
(audience members chuckling)

502
00:24:10,649 --> 00:24:11,582
Yeah.

503
00:24:11,583 --> 00:24:13,051
Okay, yeah, so it's actually,

504
00:24:13,051 --> 00:24:16,822
it turns out that the answer
is the initial timestamp

505
00:24:16,822 --> 00:24:18,590
gets truncated due
to a bug in Bash,

506
00:24:18,590 --> 00:24:22,360
so it's one line less than you
always expect it's gonna be.

507
00:24:22,360 --> 00:24:23,829
Awesome.

508
00:24:23,829 --> 00:24:28,200
Okay, so, there are a number
of environment variables

509
00:24:29,634 --> 00:24:31,169
that control Bash history
and how it gets written,

510
00:24:31,169 --> 00:24:34,239
and these can be used
for anti-forensics.

511
00:24:34,239 --> 00:24:36,908
HISTFILE is where Bash
history gets dropped,

512
00:24:36,908 --> 00:24:39,211
normally it's $HOME.BashHISTORY,

513
00:24:40,612 --> 00:24:42,614
but as an anti-forensic
technique, you would set it

514
00:24:42,614 --> 00:24:47,118
to devnull, which means
it doesn't get written.

515
00:24:47,118 --> 00:24:49,421
HISTFILESIZE, of course,
is the number of lines.

516
00:24:49,421 --> 00:24:50,989
We've already spoken about that.

517
00:24:50,989 --> 00:24:54,593
You can set HISTFILESIZE
to 0, right,

518
00:24:54,593 --> 00:24:56,828
truncating the
Bash history file.

519
00:24:56,828 --> 00:25:01,766
HISTSIZE is the number
of commands to remember,

520
00:25:03,235 --> 00:25:06,036
okay, so that impacts sort of
your currently running shell.

521
00:25:06,037 --> 00:25:09,741
So a few more quick
quiz questions before
we have to wrap up

522
00:25:09,741 --> 00:25:14,746
on this one, so think about
what's gonna happen in memory

523
00:25:16,181 --> 00:25:17,349
and then what's gonna happen
when the Bash history file

524
00:25:17,349 --> 00:25:18,850
finally gets written to disc

525
00:25:18,850 --> 00:25:21,785
when I said HISTFILE
equal to dev null?

526
00:25:21,786 --> 00:25:23,688
So what do you think
happens in memory

527
00:25:23,688 --> 00:25:24,956
when I type that command?

528
00:25:24,956 --> 00:25:27,024
Does it change the
command history

529
00:25:27,025 --> 00:25:28,593
in the memory of
the current shell?

530
00:25:28,593 --> 00:25:30,929
I see Phil shaking his
head no, Phil's right,

531
00:25:30,929 --> 00:25:32,964
it doesn't impact the memory.

532
00:25:32,964 --> 00:25:36,768
But when you write Bash history,

533
00:25:36,768 --> 00:25:39,771
any commands typed in the
shell just go into dev null.

534
00:25:39,771 --> 00:25:43,207
Now the current Bash
history file isn't changed,

535
00:25:43,208 --> 00:25:45,043
so there won't be
any updates to it,

536
00:25:45,043 --> 00:25:47,779
but any commands that were
in there are still there.

537
00:25:47,779 --> 00:25:49,648
But any new commands
in the shell

538
00:25:49,648 --> 00:25:51,382
go to dev null and they're lost.

539
00:25:51,383 --> 00:25:52,217
Okay.

540
00:25:53,351 --> 00:25:55,153
This one's more interesting.

541
00:25:55,153 --> 00:25:58,456
What if I said
HISTFILESIZE equal to zero?

542
00:25:58,456 --> 00:26:00,257
What happens in
memory, anything?

543
00:26:02,093 --> 00:26:05,363
Nope, nothing, actually,
doesn't impact memory at all.

544
00:26:05,363 --> 00:26:07,098
What happens on disc?

545
00:26:08,300 --> 00:26:09,868
So this is one that
really surprised me.

546
00:26:09,868 --> 00:26:12,070
It turns out that
the minute you set

547
00:26:12,070 --> 00:26:14,639
HISTFILESIZE to anything,

548
00:26:16,241 --> 00:26:18,643
the file is immediately
truncated, right?

549
00:26:18,643 --> 00:26:21,046
So in the middle of
your session, if I say,

550
00:26:21,046 --> 00:26:23,181
export HISTFILESIZE
equal to zero,

551
00:26:23,181 --> 00:26:25,817
it immediately truncates
the current Bash history

552
00:26:25,817 --> 00:26:28,587
to zero bytes,
which, or zero lines,

553
00:26:28,587 --> 00:26:32,524
which is interesting to me
because it's the only time

554
00:26:32,524 --> 00:26:34,993
I can find in the
life cycle of Bash

555
00:26:34,993 --> 00:26:39,864
that the history file is updated
not on shell exit, right?

556
00:26:39,864 --> 00:26:41,800
So yeah, so there's
a hook in Bash,

557
00:26:41,800 --> 00:26:44,202
the minute you set
HISTFILESIZE to anything,

558
00:26:44,202 --> 00:26:47,005
it immediately truncates it
to that value, whatever it is,

559
00:26:47,005 --> 00:26:49,007
whether it's zero
or 10 or whatever,

560
00:26:49,007 --> 00:26:50,809
which was a little
surprising to me.

561
00:26:52,277 --> 00:26:56,247
Okay, so what happens if you
set HISTSIZE equal to zero?

562
00:26:56,247 --> 00:26:58,116
What happens in memory?

563
00:26:58,116 --> 00:27:00,352
(audience member
speaking off-mic)

564
00:27:00,352 --> 00:27:02,621
It drops the entire
history list right away.

565
00:27:02,621 --> 00:27:06,057
It immediately drops the
history list in memory.

566
00:27:06,057 --> 00:27:08,259
And when the shell exits,

567
00:27:08,259 --> 00:27:12,697
it's going to truncate Bash
history to be zero lines.

568
00:27:12,697 --> 00:27:15,332
So from an anti-forensics
perspective,

569
00:27:15,333 --> 00:27:18,870
this is the one you
wanna do, right?

570
00:27:18,870 --> 00:27:21,005
Now, I will say that,

571
00:27:21,006 --> 00:27:24,476
looking at the memory images
that I was testing with,

572
00:27:25,543 --> 00:27:27,245
when you set HISTSIZE
equal to zero,

573
00:27:27,245 --> 00:27:29,014
it drops the history list.

574
00:27:29,014 --> 00:27:31,683
But those commands are
still floating around

575
00:27:31,683 --> 00:27:33,752
in the memory of that process,

576
00:27:33,752 --> 00:27:35,620
so the strings
are still visible.

577
00:27:35,620 --> 00:27:38,188
I can run strings
against that process

578
00:27:38,189 --> 00:27:40,458
and see the original commands,

579
00:27:40,458 --> 00:27:43,094
so that leads me to believe
that it would be possible

580
00:27:43,094 --> 00:27:45,597
to write some sort of carver

581
00:27:45,597 --> 00:27:49,334
to pull those out of
the process memory.

582
00:27:49,334 --> 00:27:51,403
I haven't sat down and
actually tried to do that,

583
00:27:51,403 --> 00:27:53,238
but the data is still there,

584
00:27:53,238 --> 00:27:54,739
at least for some
period of time,

585
00:27:54,739 --> 00:27:56,174
so you might be
able to carve it,

586
00:27:56,174 --> 00:27:58,810
even if somebody does
this in their shell.

587
00:27:58,810 --> 00:28:01,946
But new commands won't be
entered into the history list,

588
00:28:01,946 --> 00:28:05,250
so you can't pick up anything
that they do after that,

589
00:28:05,250 --> 00:28:07,052
so everything is forgotten.

590
00:28:07,052 --> 00:28:08,586
So, all right, there we go.

591
00:28:08,586 --> 00:28:12,090
That was the quick and dirty
version of that presentation.

592
00:28:12,090 --> 00:28:13,358
The slides are available

593
00:28:13,358 --> 00:28:15,627
at the website you
see at the bottom.

594
00:28:16,695 --> 00:28:18,096
One minute for questions.

595
00:28:21,833 --> 00:28:25,270
- [Man] So, Hal, when you
open up a shell session

596
00:28:25,270 --> 00:28:29,641
on a Linux machine and your
Bash history essentially

597
00:28:29,641 --> 00:28:32,544
is in memory, new
commands are being edited,

598
00:28:32,544 --> 00:28:35,246
things are being written back,
and you open a second shell.

599
00:28:35,246 --> 00:28:36,715
Using the second shell,

600
00:28:36,715 --> 00:28:40,084
you modify the contents and
then close your session,

601
00:28:40,085 --> 00:28:41,686
and then, ...

602
00:28:41,686 --> 00:28:43,420
- And then the first
shell exits, right?

603
00:28:43,421 --> 00:28:44,823
- [Man] Yeah.

604
00:28:44,823 --> 00:28:48,093
Can you wind up with a situation
where you've effectively

605
00:28:48,093 --> 00:28:52,163
been able to manually edit the
contents of the Bash history?

606
00:28:52,163 --> 00:28:52,997
- Yes.

607
00:28:52,997 --> 00:28:53,932
- [Man] By kind of --

608
00:28:53,932 --> 00:28:55,700
- So in that scenario,

609
00:28:55,700 --> 00:28:58,103
I'm Mister Unsuspecting
in shell number one,

610
00:28:58,103 --> 00:29:00,538
and I've opened up my shell
and I've read the contents

611
00:29:00,538 --> 00:29:02,040
of Bash history.

612
00:29:02,040 --> 00:29:04,476
Then Mister Evildoer in
the second shell comes up,

613
00:29:04,476 --> 00:29:07,245
they edit the contents
of Bash history on disc,

614
00:29:07,245 --> 00:29:09,179
then exit their shell.

615
00:29:09,180 --> 00:29:14,185
That has no impact on the
history that's currently loaded

616
00:29:14,953 --> 00:29:16,721
in the first shell,

617
00:29:16,721 --> 00:29:20,024
but when the first shell exits,

618
00:29:20,024 --> 00:29:24,896
the behavior of Bash is to
read in whatever's on disc,

619
00:29:24,896 --> 00:29:26,598
which is now the
modified Bash history,

620
00:29:26,598 --> 00:29:28,800
and then append new
commands to that.

621
00:29:28,800 --> 00:29:30,301
So yes,

622
00:29:30,301 --> 00:29:33,838
the first shell will carry
forward the malicious edits

623
00:29:33,838 --> 00:29:35,273
from the second shell,

624
00:29:35,273 --> 00:29:39,010
appending their new
commands on to that.

625
00:29:39,010 --> 00:29:43,047
But yes, it will carry
through like you're expecting.

626
00:29:43,047 --> 00:29:44,482
So, yeah.

627
00:29:46,618 --> 00:29:47,452
Right over here.

628
00:29:49,053 --> 00:29:52,791
(assistant speaking off-mic)

629
00:29:54,826 --> 00:29:56,361
- [Man] I actually just wanted
Heather to run over here,

630
00:29:56,361 --> 00:29:57,595
but no....

631
00:29:57,595 --> 00:30:00,098
What about something
like using SCREEN?

632
00:30:01,099 --> 00:30:01,899
- Using what?

633
00:30:01,900 --> 00:30:03,468
- [Man] SCREEN.

634
00:30:03,468 --> 00:30:06,404
- Okay, well, so yeah, so the
question, what about SCREEN?

635
00:30:06,404 --> 00:30:10,675
Each SCREEN session is
a separate Bash shell.

636
00:30:10,675 --> 00:30:13,511
So it's just like
running multiple windows

637
00:30:13,511 --> 00:30:15,180
in an Xwindow environment.

638
00:30:17,916 --> 00:30:19,317
When it exits, it dumps any
history that you've done

639
00:30:19,317 --> 00:30:22,120
in that particular
SCREEN window,

640
00:30:22,120 --> 00:30:26,056
so all the rules we're
talking about apply equally

641
00:30:26,057 --> 00:30:27,692
to that format at well.

642
00:30:29,260 --> 00:30:31,296
The thing about SCREEN is
you can have these really

643
00:30:31,296 --> 00:30:33,598
long-running,
persistent sessions

644
00:30:33,598 --> 00:30:36,533
that you just come back and
reattach to, but never exit,

645
00:30:36,534 --> 00:30:38,503
which means the commands
from those sessions

646
00:30:38,503 --> 00:30:40,004
never get written to disc.

647
00:30:40,004 --> 00:30:42,540
And the only way to get
them out is memory analysis.

648
00:30:42,540 --> 00:30:43,774
All right?

649
00:30:43,775 --> 00:30:45,777
Okay, that's all
we got time for.

650
00:30:45,777 --> 00:30:50,748
I'll be available all next
couple days or right after now

651
00:30:51,950 --> 00:30:54,652
to talk more about this
if you have questions.

652
00:30:54,652 --> 00:30:55,787
Thanks for listening.

653
00:30:55,787 --> 00:30:59,557
(audience applauds)

654
00:30:59,557 --> 00:31:02,393
(electronic music)

