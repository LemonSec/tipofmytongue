1
00:00:00,867 --> 00:00:03,536
(techno sounds)

2
00:00:15,048 --> 00:00:17,017
- [Scott] So I get
to go old school.

3
00:00:17,017 --> 00:00:18,250
- Alright.

4
00:00:18,251 --> 00:00:19,719
And this is my good
buddy, Scott Roberts.

5
00:00:19,719 --> 00:00:22,622
He is one of the DFIR
Engineers over at GitHub.

6
00:00:22,622 --> 00:00:24,257
He is sroberts on Twitter.

7
00:00:24,257 --> 00:00:26,292
If you feel like--actually
you don't tweet much,

8
00:00:26,292 --> 00:00:30,130
so if you feel like silence,
follow him on Twitter.

9
00:00:30,130 --> 00:00:33,233
And like Heroku, they also
have tens of thousands

10
00:00:33,233 --> 00:00:36,669
of servers in production, but
for purposes of osquery stuff

11
00:00:36,669 --> 00:00:38,238
that we'll be talking about,

12
00:00:38,238 --> 00:00:40,540
let's talk about the hundreds
of Mac clients that they have.

13
00:00:41,975 --> 00:00:44,544
So osquery, this is going to
be a story told in three parts.

14
00:00:44,544 --> 00:00:46,413
We're going to start
by talking to you

15
00:00:47,847 --> 00:00:49,382
about what exactly osquery
is even, talking a little bit

16
00:00:49,382 --> 00:00:51,550
about how to use it, and
then once you're familiar

17
00:00:51,551 --> 00:00:54,454
with how to use it, how to
bring that up to big scale,

18
00:00:54,454 --> 00:00:57,257
like tens of thousands of
servers, as we've talked about.

19
00:00:58,291 --> 00:01:00,427
So, what the heck is osquery?

20
00:01:00,427 --> 00:01:03,296
In a nutshell, it is a
way of getting information

21
00:01:03,296 --> 00:01:06,433
that you can already
get off of your servers,

22
00:01:06,433 --> 00:01:09,702
but in a nice, uniform
and consistent place.

23
00:01:09,702 --> 00:01:13,573
It exposes system information
as if it was an SQL table.

24
00:01:13,573 --> 00:01:15,175
And we're all, well
I shouldn't say all,

25
00:01:15,175 --> 00:01:17,210
many of us are
familiar with SQL.

26
00:01:17,210 --> 00:01:19,012
And so rather than
having to remember all

27
00:01:19,012 --> 00:01:20,880
the different
utilities you can go to

28
00:01:20,880 --> 00:01:23,482
to find certain information
about your system,

29
00:01:23,483 --> 00:01:25,885
you can go to one place
to look for the users

30
00:01:25,885 --> 00:01:29,055
and the groups and the
installed packages and stuff.

31
00:01:29,055 --> 00:01:31,825
Osquery also gives us the
really, really helpful

32
00:01:31,825 --> 00:01:33,993
ability to schedule
these queries,

33
00:01:33,993 --> 00:01:36,329
run them over time, and
bring the results back

34
00:01:36,329 --> 00:01:37,863
to some central place.

35
00:01:37,864 --> 00:01:40,533
Which is great if you want
to find changes on a system.

36
00:01:40,533 --> 00:01:42,535
You have a list of
users on a system,

37
00:01:42,535 --> 00:01:44,437
and then you can just for
example bring that in splunk

38
00:01:44,437 --> 00:01:46,506
and have splunk tell
you, hey for some reason

39
00:01:46,506 --> 00:01:49,142
there's more users on a
system than used to be there.

40
00:01:51,311 --> 00:01:53,746
The people responsible
for this are Facebook,

41
00:01:53,746 --> 00:01:57,817
specifically Mike
Arpaia and Teddy Reed.

42
00:01:59,452 --> 00:02:01,387
And we just checked
on this this morning

43
00:02:01,387 --> 00:02:02,789
actually and it was 95
contributors to this project.

44
00:02:02,789 --> 00:02:05,291
This is a very active
project, very healthy project.

45
00:02:06,226 --> 00:02:08,828
- Last commit was 16 hours ago,

46
00:02:08,828 --> 00:02:12,432
so not just sitting
around going bad software.

47
00:02:12,432 --> 00:02:13,266
- Exactly.

48
00:02:15,101 --> 00:02:16,936
- So when you start
off with osquery,

49
00:02:16,936 --> 00:02:20,373
you know, it's easy to
say how it does things,

50
00:02:20,373 --> 00:02:23,209
but how you use it
is a different thing.

51
00:02:23,209 --> 00:02:25,111
There's three kind of key
tools you're going to use

52
00:02:25,111 --> 00:02:27,346
when you get used to osquery.

53
00:02:27,347 --> 00:02:29,115
The first one, and this
is kind of something,

54
00:02:29,115 --> 00:02:31,918
I don't know if any other
instant response tools is doing,

55
00:02:31,918 --> 00:02:33,253
but is osqueryi.

56
00:02:34,420 --> 00:02:35,821
If you're familiar
with Python or Ruby,

57
00:02:35,822 --> 00:02:38,091
you know you can type
in python and you get

58
00:02:38,091 --> 00:02:41,327
dropped into a REPL, a
read evaluate print loop,

59
00:02:41,327 --> 00:02:43,062
where it lets you kind
of execute a command,

60
00:02:43,062 --> 00:02:44,397
immediately see
what it gives back,

61
00:02:44,397 --> 00:02:46,432
and kind of build from there.

62
00:02:46,432 --> 00:02:49,035
Osquery actually lets you
do the exact same thing,

63
00:02:49,035 --> 00:02:50,870
but for your system's state.

64
00:02:50,870 --> 00:02:53,540
So you can run a query, it's
like being able to execute

65
00:02:53,540 --> 00:02:56,075
an anti-virus search just once.

66
00:02:56,075 --> 00:02:58,310
See what comes back,
and refine your query.

67
00:02:58,311 --> 00:03:00,914
So it's a great way to get
familiar with the tool.

68
00:03:00,914 --> 00:03:03,149
It's a great way
to start testing.

69
00:03:03,149 --> 00:03:05,185
We even use it a little bit
for doing one off checks

70
00:03:05,185 --> 00:03:06,553
on specific things.

71
00:03:07,787 --> 00:03:09,289
The real power of
osquery is when you get

72
00:03:09,289 --> 00:03:11,590
to osqueryd, and
that's just the Daemon.

73
00:03:11,591 --> 00:03:14,594
So that's where osquery
gets a configuration,

74
00:03:14,594 --> 00:03:17,829
it runs continuously, feeds
results back somewhere,

75
00:03:17,830 --> 00:03:21,034
remotely, locally,
things like that.

76
00:03:21,901 --> 00:03:23,102
It takes a little bit of set up,

77
00:03:23,102 --> 00:03:24,237
and we're going to talk
about what it takes

78
00:03:24,237 --> 00:03:25,972
to get osqueryd started.

79
00:03:25,972 --> 00:03:29,309
But this is where the real
power of the system is.

80
00:03:29,309 --> 00:03:31,744
And lastly, you
manage osqueryd using

81
00:03:31,744 --> 00:03:33,446
another utility, osqueryctl.

82
00:03:35,081 --> 00:03:36,982
Turn it on, turn
it off, get status.

83
00:03:36,983 --> 00:03:38,952
And this is great because
it takes care of the fact

84
00:03:38,952 --> 00:03:41,621
that different operating
systems do different things

85
00:03:41,621 --> 00:03:43,456
to start up a Daemon.

86
00:03:43,456 --> 00:03:46,426
So on OSX it takes
care of launch control.

87
00:03:47,627 --> 00:03:50,263
On, well Linux has so
much variety on that,

88
00:03:50,263 --> 00:03:52,565
but it just takes care
of all of that for you.

89
00:03:54,133 --> 00:03:55,101
- Alright let's talk about how

90
00:03:55,101 --> 00:03:57,737
you actually use osquery a bit.

91
00:03:57,737 --> 00:04:00,106
This is a beautiful, and I
bet nobody can read this,

92
00:04:00,106 --> 00:04:00,906
so I apologize.

93
00:04:00,907 --> 00:04:01,975
Who can't read this?

94
00:04:01,975 --> 00:04:02,976
Anybody who cannot?

95
00:04:02,976 --> 00:04:04,210
Okay, since you can't read it,

96
00:04:04,210 --> 00:04:06,045
I'll give you a shirt.

97
00:04:06,045 --> 00:04:07,247
So that's my apology for that.

98
00:04:07,247 --> 00:04:09,415
But this is what
the REPL looks like

99
00:04:09,415 --> 00:04:10,917
that Scott was talking about.

100
00:04:10,917 --> 00:04:13,586
It just gives you a nice
little shell like this,

101
00:04:13,586 --> 00:04:15,855
but you can start entering
queries into that.

102
00:04:15,855 --> 00:04:17,991
And since we, like I said
most of us are familiar

103
00:04:17,991 --> 00:04:19,392
with SQL, we'll just
start with something

104
00:04:19,392 --> 00:04:20,793
really, really simple.

105
00:04:20,793 --> 00:04:24,030
Here I have a query to
select star from apt sources,

106
00:04:24,030 --> 00:04:25,465
and it's going to get
you all the information

107
00:04:25,465 --> 00:04:27,366
about you know the apt sources.

108
00:04:27,367 --> 00:04:30,303
So really basic,
easy to understand.

109
00:04:30,303 --> 00:04:31,704
You can get a little
more advanced though,

110
00:04:31,704 --> 00:04:32,939
like you can with SQL.

111
00:04:32,939 --> 00:04:34,540
So here we have one for example,

112
00:04:34,540 --> 00:04:36,509
it's going to find
any Kernel extensions

113
00:04:36,509 --> 00:04:41,180
that were not Apple.com
Kernel extensions and stuff.

114
00:04:41,180 --> 00:04:43,182
And then it'll show you a
nice little table of this.

115
00:04:43,182 --> 00:04:44,517
And this is great for
when you're actually

116
00:04:44,517 --> 00:04:47,520
looking at a machine,
but again I feel like

117
00:04:47,520 --> 00:04:50,722
the real power of osquery
comes in those scheduled

118
00:04:50,723 --> 00:04:52,558
queries that can be doing
this and sending it back

119
00:04:52,558 --> 00:04:54,727
to some kind of log collector.

120
00:04:54,727 --> 00:04:57,363
Really though the power
of SQL is when you start

121
00:04:57,363 --> 00:04:58,831
getting into joins.

122
00:04:58,831 --> 00:05:01,334
So here I'm taking, for
example, the listening ports

123
00:05:01,334 --> 00:05:03,503
and also the processes
on the machine

124
00:05:03,503 --> 00:05:07,373
and doing a join on them
to get all of the pids

125
00:05:07,373 --> 00:05:09,409
and the names of processes
that are listening

126
00:05:09,409 --> 00:05:10,943
on a particular machine.

127
00:05:10,943 --> 00:05:12,979
And I think any of us that
have done instant response

128
00:05:12,979 --> 00:05:14,947
would say that's useful
information to be collecting

129
00:05:14,947 --> 00:05:16,449
on a regular basis.

130
00:05:16,449 --> 00:05:19,118
- [Scott] You mean everybody
hasn't memorized all of msolf?

131
00:05:21,554 --> 00:05:23,690
- And no one should have to.

132
00:05:26,693 --> 00:05:28,394
We have some examples
here, I'm not going to

133
00:05:28,394 --> 00:05:29,896
go through these.

134
00:05:29,896 --> 00:05:31,464
You guys I'm sure are all
going to want to go back

135
00:05:31,464 --> 00:05:33,733
and look at our slides
afterwards to get these queries,

136
00:05:33,733 --> 00:05:35,201
and actually we're going
to talk a little bit

137
00:05:35,201 --> 00:05:37,503
about why you don't even have
to memorize these things.

138
00:05:37,503 --> 00:05:39,104
But I just wanted to show
like some of the stuff

139
00:05:39,105 --> 00:05:41,841
you can do where you start,
you know, doing some joins

140
00:05:41,841 --> 00:05:44,777
and filtering on certain
results and stuff like that.

141
00:05:46,145 --> 00:05:49,282
- And so the whole move between
different types of queries

142
00:05:49,282 --> 00:05:51,883
and going into those
advanced ones is really about

143
00:05:51,884 --> 00:05:53,119
query philosophy.

144
00:05:53,119 --> 00:05:55,788
And this is one of the
options that osquery

145
00:05:55,788 --> 00:05:57,190
gives you that a
lot of other tools

146
00:05:57,190 --> 00:06:00,093
have kind of made
a decision for you.

147
00:06:00,093 --> 00:06:01,961
With osquery because you
can spend a lot of your time

148
00:06:01,961 --> 00:06:04,664
writing your own queries
instead of just relying

149
00:06:04,664 --> 00:06:07,066
on ones that you get from a
vendor or something like that,

150
00:06:07,066 --> 00:06:08,267
you can take your own approach

151
00:06:08,267 --> 00:06:10,603
based on your own environment.

152
00:06:10,603 --> 00:06:13,172
Kevin, because they're
mostly, I know.

153
00:06:13,172 --> 00:06:14,640
- [Kevin] Mike pop there.

154
00:06:14,640 --> 00:06:15,474
- I got excited.

155
00:06:16,976 --> 00:06:19,545
Kevin, working for
Heroku, they're managing

156
00:06:19,545 --> 00:06:21,714
a lot of servers,
they're highly uniform,

157
00:06:21,714 --> 00:06:23,783
so they've taken an
approach of getting back

158
00:06:23,783 --> 00:06:26,285
lots and lots of
information, pulling it back

159
00:06:26,285 --> 00:06:27,787
and doing post processing.

160
00:06:27,787 --> 00:06:30,188
We kind of think of this
as the haystack approach.

161
00:06:30,189 --> 00:06:32,492
Get as much data as you
can, then figure out

162
00:06:32,492 --> 00:06:34,060
what to do with it.

163
00:06:34,060 --> 00:06:36,963
At Github, we're running
osquery primarily

164
00:06:36,963 --> 00:06:38,698
on user laptops.

165
00:06:38,698 --> 00:06:40,799
As a result, we have
to be really targeted

166
00:06:40,800 --> 00:06:43,669
because we have to pay
attention to user privacy.

167
00:06:43,669 --> 00:06:46,005
And so the great
thing about osquery is

168
00:06:46,005 --> 00:06:49,342
unlike Kevin who wants to get
huge slots of information,

169
00:06:49,342 --> 00:06:51,844
I can write queries that
look for just individual

170
00:06:51,844 --> 00:06:54,747
specific things that are
high fidelity indicators

171
00:06:54,747 --> 00:06:56,182
of compromise.

172
00:06:56,182 --> 00:06:58,017
Two different approaches.

173
00:06:58,017 --> 00:06:59,919
They fit two different
environments.

174
00:07:01,587 --> 00:07:03,856
Osquery goes actually
beyond the sequel format.

175
00:07:03,856 --> 00:07:07,226
And actually has a couple
extra things that are useful.

176
00:07:07,226 --> 00:07:10,163
Ad hoc queries, so
you can have groups of

177
00:07:10,163 --> 00:07:12,732
scheduled queries that are
going to run continuously.

178
00:07:12,732 --> 00:07:15,701
You can also add ad hoc
queries that will run once.

179
00:07:15,701 --> 00:07:17,036
And what I love about
this is it gives

180
00:07:17,036 --> 00:07:19,906
kind of a sweeping
capability to osquery

181
00:07:19,906 --> 00:07:21,441
that you might not
have otherwise.

182
00:07:21,441 --> 00:07:23,810
You can pick a specific query,

183
00:07:23,810 --> 00:07:25,912
run it across your entire fleet,

184
00:07:25,912 --> 00:07:28,281
it runs until it's gotten
everybody in a fleet,

185
00:07:28,281 --> 00:07:29,749
and then it comes back.

186
00:07:29,749 --> 00:07:33,519
So you know we were really
dying for this during,

187
00:07:33,519 --> 00:07:37,089
does anybody remember the
iPhone SDK compromise?

188
00:07:37,089 --> 00:07:38,591
And we were literally
going back to users

189
00:07:38,591 --> 00:07:42,228
and saying, hey did you by
any chance visit this website?

190
00:07:42,228 --> 00:07:44,397
And we would have been able
to figure out everything

191
00:07:44,397 --> 00:07:46,632
just using a single
ad hoc query instead.

192
00:07:47,834 --> 00:07:49,702
Osquery give you file
integrity monitoring.

193
00:07:49,702 --> 00:07:52,705
You can set a directory,
it'll essentially you know

194
00:07:52,705 --> 00:07:56,075
fingerprint those files, let
you know if anything changes.

195
00:07:56,075 --> 00:07:59,045
And last, but certainly
not least, is osquery

196
00:07:59,045 --> 00:08:02,682
is actually, will actually
let you do Yara signatures

197
00:08:02,682 --> 00:08:05,518
and send back information where
a Yara signature triggers.

198
00:08:05,518 --> 00:08:09,255
So this gives you another
kind of more malware-centric

199
00:08:09,255 --> 00:08:10,556
detection capability.

200
00:08:13,125 --> 00:08:16,262
Osqueryd is managed through
three particular files,

201
00:08:16,262 --> 00:08:18,397
so you'd start it up
using the osquery.ctl.

202
00:08:19,532 --> 00:08:23,269
The configuration
file is where you put

203
00:08:23,269 --> 00:08:26,038
all of your queries,
this is where you set,

204
00:08:26,038 --> 00:08:29,775
I want to run select star
from kernel extensions.

205
00:08:29,775 --> 00:08:30,909
Things like that.

206
00:08:32,378 --> 00:08:34,380
Osquery flags, which
essentially tells osquery

207
00:08:34,380 --> 00:08:37,482
how to run, so how
often to execute,

208
00:08:37,482 --> 00:08:41,286
how often to look for
updates, things like that.

209
00:08:41,287 --> 00:08:43,723
And most importantly where
the logs end up going.

210
00:08:46,993 --> 00:08:49,896
And then, this is kind of a
little bit of a side note,

211
00:08:49,896 --> 00:08:52,098
but this is where it fit best.

212
00:08:52,098 --> 00:08:53,766
Managing intelligence
with packs.

213
00:08:53,766 --> 00:08:57,270
So those advanced
queries that were shown,

214
00:08:57,270 --> 00:08:58,638
Kevin's mentioned, you
don't actually have to

215
00:08:58,638 --> 00:09:00,373
write them yourself.

216
00:09:00,373 --> 00:09:02,842
Facebook came up with an
idea of bundling groups

217
00:09:02,842 --> 00:09:05,211
of queries that a lot of
people might want to use

218
00:09:05,211 --> 00:09:06,779
into what they call packs.

219
00:09:06,779 --> 00:09:10,249
So these are related
groups of queries.

220
00:09:10,249 --> 00:09:11,551
They live on the file system,

221
00:09:11,551 --> 00:09:14,153
they run with their
own set of schedules.

222
00:09:15,187 --> 00:09:16,756
They're kind of useful.

223
00:09:16,756 --> 00:09:18,624
Kevin and I both
actually brought this up

224
00:09:18,624 --> 00:09:19,959
when we were talking
through our talk today,

225
00:09:19,959 --> 00:09:21,861
we both said yeah
they're useful,

226
00:09:21,861 --> 00:09:24,230
but we don't really use them.

227
00:09:24,230 --> 00:09:28,768
Simply because they tend to
become a management frustration.

228
00:09:28,768 --> 00:09:31,804
- Well especially because,
so here is specifically

229
00:09:31,804 --> 00:09:34,240
why Heroku doesn't use
them, and I use them

230
00:09:34,240 --> 00:09:35,775
as more of a guide.

231
00:09:35,775 --> 00:09:37,577
I definitely look at them.

232
00:09:37,577 --> 00:09:42,582
So again I mentioned tens
of thousands of servers

233
00:09:43,716 --> 00:09:46,185
that are all as
uniform as possible,

234
00:09:46,185 --> 00:09:48,454
but they're uniform
between a class of servers.

235
00:09:48,454 --> 00:09:50,656
So all the web servers
are basically the same.

236
00:09:50,656 --> 00:09:52,757
All the database servers
are basically the same.

237
00:09:52,758 --> 00:09:54,660
But a web server is
not a database server,

238
00:09:54,660 --> 00:09:58,464
so it's not like all
of them are the same.

239
00:09:58,464 --> 00:09:59,899
So one of the things
that I've had to do

240
00:09:59,899 --> 00:10:01,801
is I'll take the
queries that I'm writing

241
00:10:01,801 --> 00:10:04,403
and then I'll add in a
little bit of extra sequel

242
00:10:04,403 --> 00:10:08,074
to say like, I also
want to have a column

243
00:10:08,074 --> 00:10:10,675
called just the class
of this machine.

244
00:10:10,676 --> 00:10:13,312
And it'll just fill it in
with like web or database

245
00:10:13,312 --> 00:10:14,814
or something like that.

246
00:10:14,814 --> 00:10:18,016
And that makes a good example
I think that I can think of

247
00:10:18,017 --> 00:10:22,955
for that would be like a
lot of, we get a lot of,

248
00:10:22,955 --> 00:10:25,324
we should very rarely
see file system changes

249
00:10:25,324 --> 00:10:29,328
to the authorized keys
file on a machine.

250
00:10:29,328 --> 00:10:31,197
So generally across the board,
I don't want to see that.

251
00:10:31,197 --> 00:10:32,698
And I'm going to alert on that.

252
00:10:32,698 --> 00:10:35,367
But on our bastion host,
we actually do require

253
00:10:35,368 --> 00:10:37,570
those keys to change
pretty frequently.

254
00:10:37,570 --> 00:10:39,405
So I don't want to
just write an alert

255
00:10:39,405 --> 00:10:43,074
that's going to blow up every
time any one of our employees

256
00:10:43,075 --> 00:10:44,644
goes through natural
key rotation.

257
00:10:44,644 --> 00:10:46,545
So I have to be able to
differentiate between

258
00:10:46,545 --> 00:10:47,913
the type of server.

259
00:10:47,913 --> 00:10:49,682
And if I'm doing
that, I can't do that

260
00:10:49,682 --> 00:10:52,084
with just like a general
query pack across the board.

261
00:10:52,084 --> 00:10:54,654
I need to actually be
customizing those in some way.

262
00:10:56,188 --> 00:10:58,858
- They're an interesting
capability that has some uses,

263
00:10:58,858 --> 00:11:00,825
but also has some limitations.

264
00:11:00,826 --> 00:11:04,797
- I think it's just a
great book of ideas, yeah.

265
00:11:04,797 --> 00:11:08,601
So let's talk about
using osquery at scale.

266
00:11:08,601 --> 00:11:10,236
And I kind of just
gave away like how

267
00:11:10,236 --> 00:11:12,805
what do I do for
osquery at scale.

268
00:11:12,805 --> 00:11:14,573
But does anybody have any
questions by the way real quick?

269
00:11:14,573 --> 00:11:17,076
I'm just going quick across, no.

270
00:11:17,076 --> 00:11:18,711
Oh, we're supposed to
do that at the end?

271
00:11:18,711 --> 00:11:20,479
No questions, sorry, okay.

272
00:11:22,114 --> 00:11:23,783
Alright, so we've already
kind of talked through this.

273
00:11:23,783 --> 00:11:24,917
How are we using it at Heroku?

274
00:11:24,917 --> 00:11:26,485
We put it on all our servers.

275
00:11:26,485 --> 00:11:28,320
The environment is
very uniform by type,

276
00:11:28,320 --> 00:11:31,023
and then we just look for
things that are not uniform.

277
00:11:31,023 --> 00:11:32,958
I have spent a lot
of time working out

278
00:11:32,958 --> 00:11:34,459
what are the file
system changes that

279
00:11:34,460 --> 00:11:36,495
I should expect to
see on a run time,

280
00:11:36,495 --> 00:11:38,664
and then I can alert
anytime I see something

281
00:11:38,664 --> 00:11:40,232
that is not that.

282
00:11:40,232 --> 00:11:44,603
We do some lookup of
IOCs, but that is really

283
00:11:44,603 --> 00:11:47,372
not so much because I
need to know what it was,

284
00:11:47,373 --> 00:11:49,809
it was more like a head's
up to help my investigation

285
00:11:49,809 --> 00:11:51,377
move forward.

286
00:11:51,377 --> 00:11:54,180
Really any time I see one
of the unexpected changes

287
00:11:54,180 --> 00:11:56,281
on the file system of a server,

288
00:11:56,282 --> 00:11:57,883
that's an incident of some kind.

289
00:11:57,883 --> 00:12:01,020
And it may be that somebody's
trying to do some hacking.

290
00:12:01,020 --> 00:12:02,788
Much more likely,
somebody was just was

291
00:12:02,788 --> 00:12:04,690
making a change outside
of change management.

292
00:12:04,690 --> 00:12:07,126
But either way, it
warrants an investigation.

293
00:12:07,126 --> 00:12:10,596
So just knowing the IOCs,
where we do look ups,

294
00:12:10,596 --> 00:12:13,332
it's really more just
like a here's a head's up.

295
00:12:15,234 --> 00:12:17,369
- At Github, we picked
osquery primarily

296
00:12:17,369 --> 00:12:19,438
because it's one
of the few systems

297
00:12:19,438 --> 00:12:21,841
that works really well on OSX.

298
00:12:21,841 --> 00:12:25,511
At this point,
actually osquery itself

299
00:12:25,511 --> 00:12:27,646
is OSX ad Linux only.

300
00:12:27,646 --> 00:12:29,381
There was a project
by Trail of Bits

301
00:12:29,381 --> 00:12:31,817
where they were trying
to move it to Windows.

302
00:12:31,817 --> 00:12:33,619
I don't actually know what
the status of that project

303
00:12:33,619 --> 00:12:34,787
at this point is.

304
00:12:34,787 --> 00:12:37,523
So we picked it because
we're an OSX shop,

305
00:12:37,523 --> 00:12:40,626
and we needed OSX
support out of our tool.

306
00:12:40,626 --> 00:12:44,295
We use it very specifically
for hunting known IOCs.

307
00:12:44,296 --> 00:12:47,166
So whenever, you know, any
new information comes out

308
00:12:47,166 --> 00:12:48,968
about people attacking
Macs, the first thing

309
00:12:48,968 --> 00:12:51,737
we generally do, take it,
figure out how to write queries

310
00:12:51,737 --> 00:12:54,540
against it, and then push that
out to all of our endpoints.

311
00:12:54,540 --> 00:12:56,509
And we also use it a
little bit for verifying

312
00:12:56,509 --> 00:12:58,544
configurations, things
like making sure

313
00:12:58,544 --> 00:13:01,180
everybody actually has full
disc encryption turned on.

314
00:13:02,314 --> 00:13:03,783
It's still a work in progress,

315
00:13:03,783 --> 00:13:07,253
but it's, when we first
started talking about this,

316
00:13:07,253 --> 00:13:08,687
we were just barely
rolling it out,

317
00:13:08,687 --> 00:13:10,623
and now it's been in
production for a few months

318
00:13:10,623 --> 00:13:11,724
and going really well.

319
00:13:13,492 --> 00:13:16,594
- So earlier Scott mentioned
that there's this file

320
00:13:16,595 --> 00:13:18,998
osquery.conf, which
is used for actually

321
00:13:18,998 --> 00:13:20,766
holding the queries
you want to run.

322
00:13:20,766 --> 00:13:22,568
And when you start
trying to do this across

323
00:13:22,568 --> 00:13:24,336
tens of thousands of
servers, that gets to be

324
00:13:24,336 --> 00:13:27,106
a real pain in the butt
to manage that file.

325
00:13:27,106 --> 00:13:30,543
Especially if there's going
to be different queries

326
00:13:30,543 --> 00:13:33,412
run at different intervals on
different types of servers.

327
00:13:33,412 --> 00:13:35,481
The good news is that
that configuration file

328
00:13:35,481 --> 00:13:38,417
can come from an SLL server.

329
00:13:38,417 --> 00:13:41,420
Yes, so and that server can
receive the logs as well.

330
00:13:41,420 --> 00:13:43,722
Which brings us to Windmill,

331
00:13:43,722 --> 00:13:45,958
developed with love
by Heroku and Github,

332
00:13:45,958 --> 00:13:47,992
specifically us really.

333
00:13:47,993 --> 00:13:49,261
- [Scott] Just us.

334
00:13:49,261 --> 00:13:52,264
- Ah nah, there's been
a couple contributors,

335
00:13:52,264 --> 00:13:54,366
come on, we can't
short change them.

336
00:13:54,366 --> 00:13:56,068
Okay, so what the
heck is Windmill?

337
00:13:56,068 --> 00:13:59,839
Well the osquery logo kind of
looks like a pinwheel thing,

338
00:13:59,839 --> 00:14:01,607
so we decided, you
named it Windmill.

339
00:14:01,607 --> 00:14:02,574
- [Scott] Naming stuff is hard.

340
00:14:02,575 --> 00:14:03,843
- Naming stuff is hard.

341
00:14:03,843 --> 00:14:07,213
Basically it's a ruby
server that gives you

342
00:14:07,213 --> 00:14:10,683
a TLS endpoint that all
of your osquery clients

343
00:14:10,683 --> 00:14:13,018
can check in with, they
register with the server,

344
00:14:13,018 --> 00:14:15,120
and then the server will
say oh you're a web server,

345
00:14:15,120 --> 00:14:16,956
you should be getting
this configuration.

346
00:14:16,956 --> 00:14:19,558
And then they can check in,
you can set an interval.

347
00:14:19,558 --> 00:14:22,561
I think we set it to every
five minute or something,

348
00:14:22,561 --> 00:14:24,997
to check in and see like,
hey should I be getting

349
00:14:24,997 --> 00:14:27,366
a new configuration file
on this, and it'll say yes.

350
00:14:27,366 --> 00:14:28,867
So that's great.

351
00:14:28,868 --> 00:14:30,536
If I need to make a change
to one of my configurations,

352
00:14:30,536 --> 00:14:32,470
I can change it on
the Windmill server,

353
00:14:32,471 --> 00:14:34,740
and then within, you
know, five to 10 minutes,

354
00:14:34,740 --> 00:14:37,743
all of my thousands of web
servers will have checked in

355
00:14:37,743 --> 00:14:40,312
and grabbed that
new configuration.

356
00:14:40,312 --> 00:14:41,280
It is open sourced.

357
00:14:41,280 --> 00:14:42,814
It's on Github.

358
00:14:42,815 --> 00:14:45,150
It organizes endpoints
into configuration groups,

359
00:14:45,150 --> 00:14:48,020
that's what we kind of
call the different classes

360
00:14:48,020 --> 00:14:49,221
of servers.

361
00:14:49,221 --> 00:14:50,522
And it can, as you
mentioned, it can also

362
00:14:50,522 --> 00:14:52,992
receive and forward the logs.

363
00:14:52,992 --> 00:14:57,161
We designed this to be very,
very focused on safety though.

364
00:14:57,162 --> 00:14:59,865
One of the big deals was
having versioned configuration

365
00:14:59,865 --> 00:15:02,401
files and being able to
do canary deployments.

366
00:15:02,401 --> 00:15:05,404
So a canary deployment is
where I take a new version

367
00:15:05,404 --> 00:15:07,539
of my configuration,
and I can say,

368
00:15:07,539 --> 00:15:10,776
I only want to serve this
up to a random selection

369
00:15:10,776 --> 00:15:14,313
of five percent of the run
time servers, for example.

370
00:15:14,313 --> 00:15:16,081
And then I can monitor
them to see that

371
00:15:16,081 --> 00:15:18,183
I haven't written a
really expensive query

372
00:15:19,351 --> 00:15:21,153
that will potentially
take that machine down.

373
00:15:21,153 --> 00:15:22,388
If I don't have any problems,

374
00:15:22,388 --> 00:15:24,156
I can keep turning
it up, 10%, 25,

375
00:15:24,156 --> 00:15:26,691
until eventually I'm
at, okay I want 100%

376
00:15:26,692 --> 00:15:28,460
of the servers in this
configuration group

377
00:15:28,460 --> 00:15:31,397
to be receiving that
configuration file.

378
00:15:32,564 --> 00:15:34,033
So what now?

379
00:15:34,967 --> 00:15:39,338
- [Scott] So the
whole idea of...

380
00:15:39,338 --> 00:15:40,772
- [Kevin] Yeah, you
gotta hold that.

381
00:15:40,773 --> 00:15:41,607
- I do.

382
00:15:42,841 --> 00:15:45,744
So osquery itself gives
us the endpoint piece.

383
00:15:45,744 --> 00:15:47,579
It gives us the thing
that sit on the box

384
00:15:47,579 --> 00:15:49,915
and gets us telemetry.

385
00:15:49,915 --> 00:15:52,550
Windmill adds the ability
to manage that endpoint

386
00:15:52,551 --> 00:15:54,987
and then receive the
telemetry from that.

387
00:15:54,987 --> 00:15:57,423
From Windmill, you can kind
of do whatever you want.

388
00:15:57,423 --> 00:15:59,224
At Github we take it, forward it

389
00:15:59,224 --> 00:16:00,926
into our sys log infrastructure.

390
00:16:00,926 --> 00:16:02,428
It gets filtered into Splunk.

391
00:16:02,428 --> 00:16:03,896
It gets filtered into Elk.

392
00:16:03,896 --> 00:16:06,865
And from there we start
dicing up the data.

393
00:16:06,865 --> 00:16:08,367
It's really easy to work with.

394
00:16:08,367 --> 00:16:12,304
They just throw off json
because no one likes xml.

395
00:16:13,339 --> 00:16:15,274
Anybody like xml?

396
00:16:15,274 --> 00:16:16,275
- [Kevin] Who likes xml?

397
00:16:16,275 --> 00:16:17,108
One, alright.

398
00:16:17,109 --> 00:16:18,377
- No you do not.

399
00:16:18,377 --> 00:16:20,445
I do not believe you,
I do not believe you.

400
00:16:20,446 --> 00:16:22,982
- [Kevin] I will give him
a shirt, there you go.

401
00:16:22,982 --> 00:16:24,449
Oh what a perfect throw too.

402
00:16:24,450 --> 00:16:26,051
- I'm going to
remember that one.

403
00:16:26,051 --> 00:16:27,286
- What, was there a second one?

404
00:16:27,286 --> 00:16:30,789
Oh, let's talk later.

405
00:16:34,426 --> 00:16:36,228
You can't take the medium?

406
00:16:36,228 --> 00:16:38,530
Who is a medium
sized man, alright.

407
00:16:40,299 --> 00:16:43,369
- So that analysis let's
you then take and push

408
00:16:43,369 --> 00:16:46,605
your osquery data into any
of your other infrastructure,

409
00:16:46,605 --> 00:16:50,275
whether it be log management
or whether it be a SIM,

410
00:16:50,275 --> 00:16:54,246
however you work with data,
osquery can get there.

411
00:16:56,882 --> 00:16:59,017
So some resources if
you want to get started.

412
00:16:59,018 --> 00:17:00,486
One of my favorite
things about using

413
00:17:00,486 --> 00:17:02,688
open source tools like
this is you can literally

414
00:17:02,688 --> 00:17:04,857
be sitting there, just
decide you're going to start

415
00:17:04,857 --> 00:17:06,191
playing with it right now.

416
00:17:06,191 --> 00:17:09,560
Osquery.io is
Facebook's website.

417
00:17:09,560 --> 00:17:13,031
They give a ton of information,
a ton of documentation,

418
00:17:13,031 --> 00:17:16,068
a lot of explanation
about what's going on.

419
00:17:16,068 --> 00:17:18,737
It's on Github under
facebook/osquery.

420
00:17:19,637 --> 00:17:20,872
They even have a Python module,

421
00:17:20,873 --> 00:17:22,975
so if you want to
extend osquery,

422
00:17:24,276 --> 00:17:26,378
but you don't want
to write c because

423
00:17:26,377 --> 00:17:30,649
no one wants to write
c, you can do that.

424
00:17:30,649 --> 00:17:35,154
The Windmill tool is on
Github as Heroku/Windmill.

425
00:17:35,154 --> 00:17:38,991
And also Mr. Thompson, an
ambitious lad that he is,

426
00:17:40,092 --> 00:17:41,660
built a tool called
osq simulator,

427
00:17:41,660 --> 00:17:44,496
which lets you test
a tool like Windmill

428
00:17:44,496 --> 00:17:49,501
by spooling up thousands
of faked osquery endpoints.

429
00:17:50,502 --> 00:17:51,703
We should be honest.

430
00:17:51,703 --> 00:17:52,937
We're actually not
the only game in town

431
00:17:52,938 --> 00:17:54,840
when it comes to doing
osquery management.

432
00:17:54,840 --> 00:17:57,376
A lot of other people
recognized what a great tool

433
00:17:57,376 --> 00:17:59,144
this was and got onboard.

434
00:17:59,144 --> 00:18:01,313
Doorman and Collide are probably

435
00:18:01,313 --> 00:18:03,549
the two biggest ones right now.

436
00:18:03,549 --> 00:18:05,651
They're also worth looking into.

437
00:18:05,651 --> 00:18:07,152
Yeah, I guess.

438
00:18:07,152 --> 00:18:08,287
- [Kevin] But only
one of them is

439
00:18:08,287 --> 00:18:10,389
giving away t-shirts
up here, so.

440
00:18:10,389 --> 00:18:11,556
(laughter)

441
00:18:11,557 --> 00:18:13,292
- Make decisions as you will.

442
00:18:13,292 --> 00:18:14,860
- Exactly.

443
00:18:14,860 --> 00:18:17,329
So to summarize, we
talked to you a little bit

444
00:18:17,329 --> 00:18:19,965
about osquery is a
tool that exposes lots

445
00:18:19,965 --> 00:18:22,900
of different system
information as SQL tables,

446
00:18:22,901 --> 00:18:26,138
and gives you the nice SQL
syntax to query them from.

447
00:18:26,138 --> 00:18:28,439
We talked specifically
about how to use osquery,

448
00:18:28,440 --> 00:18:30,742
specifically how
to configure it,

449
00:18:30,742 --> 00:18:32,744
and how you can do
remote configuration

450
00:18:32,744 --> 00:18:36,715
and that's where we got
into using osquery at scale.

451
00:18:36,715 --> 00:18:38,550
Go ahead and advance the slide.

452
00:18:38,550 --> 00:18:39,384
I don't have the thing.

453
00:18:39,384 --> 00:18:41,086
Are there any questions?

454
00:18:42,921 --> 00:18:46,558
- [Man] So when, in terms
of what you're pushing out

455
00:18:46,558 --> 00:18:49,294
to sys log and to
your Sim and stuff,

456
00:18:49,294 --> 00:18:51,396
what are you actually
sending to it?

457
00:18:51,396 --> 00:18:53,465
Is it just query results?

458
00:18:53,465 --> 00:18:57,101
And if so, does it
send something with it

459
00:18:57,102 --> 00:19:00,873
that says what the specific
query was that ran.

460
00:19:00,873 --> 00:19:04,443
- Yeah, so when you set
up your osquery.com file,

461
00:19:04,443 --> 00:19:05,644
which we thought
about showing you,

462
00:19:05,644 --> 00:19:07,146
but sitting here
and doing 20 minutes

463
00:19:07,146 --> 00:19:09,047
of showing you json files
wasn't going to do very well

464
00:19:09,047 --> 00:19:09,848
for our reviews.

465
00:19:11,950 --> 00:19:15,320
The json, or the
osquery.com file includes

466
00:19:15,320 --> 00:19:17,822
a name of a signature, what
the actual signature is,

467
00:19:17,823 --> 00:19:20,759
how often it runs, and
then also some meta data.

468
00:19:20,759 --> 00:19:22,961
And so what you'd
essentially get back

469
00:19:22,961 --> 00:19:24,730
is this was the name of
the signature that fired,

470
00:19:24,730 --> 00:19:27,799
and then here are the results
that came back from it.

471
00:19:27,799 --> 00:19:30,068
So you end up getting both
sides where you'd know

472
00:19:30,068 --> 00:19:32,738
what triggered and what
the results it triggered

473
00:19:32,738 --> 00:19:34,373
came back as.

474
00:19:34,373 --> 00:19:36,208
Essentially it's giving
you the json representation

475
00:19:36,208 --> 00:19:37,709
of that sequel result.

476
00:19:37,709 --> 00:19:40,379
- I think it's worth
mentioning that you get

477
00:19:40,379 --> 00:19:43,948
one log line for every
row of the results.

478
00:19:43,949 --> 00:19:45,918
And then each of the row
is still going to include

479
00:19:45,918 --> 00:19:47,919
that information about what
was the name of the query

480
00:19:47,920 --> 00:19:49,388
that fired.

481
00:19:49,388 --> 00:19:50,789
So you get the time stamp,
the name of the query.

482
00:19:50,789 --> 00:19:52,791
And so if it was something
like five results,

483
00:19:52,791 --> 00:19:54,993
you're going to get
five log lines back.

484
00:19:54,993 --> 00:19:58,697
- Yeah, correlating it back
has never been a hard issue.

485
00:19:58,697 --> 00:20:01,699
- [Kevin] Any other, oh yes sir.

486
00:20:04,203 --> 00:20:07,272
- [Man 2] Are the results
live or are they saved

487
00:20:07,272 --> 00:20:10,242
on the server?

488
00:20:10,242 --> 00:20:12,344
- On the server that sent them?

489
00:20:12,344 --> 00:20:13,912
That's going to
depend on what you set

490
00:20:13,912 --> 00:20:18,016
your log destination to be.

491
00:20:18,016 --> 00:20:20,619
So if you choose to
send them to sys log,

492
00:20:20,619 --> 00:20:22,721
they're going to sit in
sys log on the server.

493
00:20:22,721 --> 00:20:25,123
If you choose to send
them to an https endpoint,

494
00:20:25,123 --> 00:20:26,358
then they're going to go there.

495
00:20:26,358 --> 00:20:28,293
And I don't think it
would still write them

496
00:20:28,293 --> 00:20:30,395
to the file system in that case.

497
00:20:30,395 --> 00:20:31,330
- [Scott] So no.

498
00:20:31,330 --> 00:20:32,831
- No, I'm wrong?

499
00:20:32,831 --> 00:20:35,833
- We actually at Github
made a particular request

500
00:20:35,834 --> 00:20:38,070
to the osquery team,
which was we wanted

501
00:20:38,070 --> 00:20:40,973
the ability to write logs
to two different locations.

502
00:20:40,973 --> 00:20:43,675
Simply because in that whole
kind of user privacy idea,

503
00:20:43,675 --> 00:20:45,377
we wanted people to be
able to go and look at

504
00:20:45,377 --> 00:20:47,512
what were logs collected
on their machine,

505
00:20:47,512 --> 00:20:49,313
but we also wanted
to have them sent out

506
00:20:49,314 --> 00:20:51,216
so we could you know
use them remotely.

507
00:20:51,216 --> 00:20:54,553
So osquery does support the
ability to have two loggers

508
00:20:54,553 --> 00:20:55,988
going at the same time.

509
00:20:55,988 --> 00:20:57,823
So in our case we
configure it so one writes

510
00:20:57,823 --> 00:21:00,359
directly to the file
system and one writes

511
00:21:00,359 --> 00:21:01,560
out through sys log.

512
00:21:01,560 --> 00:21:03,729
So we're able to get
the best of both worlds.

513
00:21:03,729 --> 00:21:06,365
And I think you can configure
that with other loggers

514
00:21:06,365 --> 00:21:08,166
in different ways
if you wanted to.

515
00:21:08,166 --> 00:21:11,637
- But out of the box it wants
to write to one destination?

516
00:21:11,637 --> 00:21:13,105
- [Scott] Out of the
box, it depends on how

517
00:21:13,105 --> 00:21:14,373
you configure it.

518
00:21:14,373 --> 00:21:15,841
- Yeah, I suppose,
okay, good point.

519
00:21:15,841 --> 00:21:16,742
Who else, another?

520
00:21:18,076 --> 00:21:19,544
- [Man 3] So the data
that is collected

521
00:21:19,544 --> 00:21:22,247
is strictly based on what
you've got in your conf file?

522
00:21:23,448 --> 00:21:24,583
- What you've got
in your conf file

523
00:21:24,583 --> 00:21:26,418
or what you are getting
remotely through

524
00:21:26,418 --> 00:21:28,520
remote configurations, so yeah.

525
00:21:30,889 --> 00:21:34,760
The one exception to
that actually being Pax,

526
00:21:34,760 --> 00:21:36,328
because Pax can stay
on the file system

527
00:21:36,328 --> 00:21:39,298
and be consistent, but.

528
00:21:39,298 --> 00:21:40,732
- [Man 4] What are you
having to have server wise

529
00:21:40,732 --> 00:21:43,668
to be able to receive
10,000 nodes worth of data?

530
00:21:43,669 --> 00:21:47,172
I mean what are you
actually putting up

531
00:21:47,172 --> 00:21:49,374
that can retrieve and
store that much data?

532
00:21:49,374 --> 00:21:51,777
- So, at least at
Heroku, our results

533
00:21:51,777 --> 00:21:54,613
are all going
directly into Splunk.

534
00:21:54,613 --> 00:21:56,481
Not directly into Splunk,
we actually have it

535
00:21:56,481 --> 00:21:57,783
configured to write to sys log.

536
00:21:57,783 --> 00:21:59,583
And then we have a
thing that grabs sys log

537
00:21:59,584 --> 00:22:01,653
and moves them over to Splunk.

538
00:22:01,653 --> 00:22:05,490
As far as the system that
handles out those TLS

539
00:22:05,490 --> 00:22:07,693
configurations to all
of them, we do that

540
00:22:07,693 --> 00:22:11,096
with a shockingly small server.

541
00:22:11,096 --> 00:22:13,398
So Heroku has this
concept of dynos,

542
00:22:13,398 --> 00:22:15,367
and I think we
use basically one,

543
00:22:15,367 --> 00:22:18,003
not even, I don't
even think we're using

544
00:22:18,003 --> 00:22:20,906
a performance dyno, we're
using one regular dyno,

545
00:22:20,906 --> 00:22:23,809
and that's capable of
serving those configurations

546
00:22:23,809 --> 00:22:25,744
to our whole fleet.

547
00:22:25,744 --> 00:22:28,980
- We manage our
configurations using Heroku.

548
00:22:28,980 --> 00:22:32,417
We pay seven dollars for
our entire infrastructure.

549
00:22:32,417 --> 00:22:33,819
- [Man 4] So second question is,

550
00:22:33,819 --> 00:22:35,887
and I think we've
talked about this Scott,

551
00:22:35,887 --> 00:22:39,024
why did you use this over GRR?

552
00:22:39,024 --> 00:22:40,257
- I'm sorry?

553
00:22:40,258 --> 00:22:41,827
- [Man 4] Why did you
choose osquery over GRR?

554
00:22:42,828 --> 00:22:43,962
- Overheard?

555
00:22:43,962 --> 00:22:45,230
- [Man 4] Over GRR.

556
00:22:45,230 --> 00:22:47,733
- GRR, GRR, excuse me.

557
00:22:47,733 --> 00:22:52,303
So I like GRR, we do use GRR
for specific investigations.

558
00:22:54,506 --> 00:22:56,174
Personally I look at
endpoint telemetry

559
00:22:56,174 --> 00:22:58,043
as falling into kind
of three categories.

560
00:22:58,043 --> 00:22:59,444
There's alerting,
there's sweeping,

561
00:22:59,444 --> 00:23:02,347
and there's remote forensics.

562
00:23:02,347 --> 00:23:04,583
Osquery is great
for doing alerting,

563
00:23:04,583 --> 00:23:06,718
and it's good for
doing sweeping.

564
00:23:06,718 --> 00:23:09,221
I think GRR is good
for doing sweeping

565
00:23:09,221 --> 00:23:12,023
and great for doing
remote forensics.

566
00:23:12,023 --> 00:23:15,494
If I had somebody, you
know, if one of my users

567
00:23:15,494 --> 00:23:18,295
in Europe got popped and
we wanted to do a deep dive

568
00:23:18,296 --> 00:23:20,799
into their system, I'd
probably have them install GRR

569
00:23:20,799 --> 00:23:22,200
and we'd use that.

570
00:23:22,200 --> 00:23:25,470
But for day to day alerting
and basic sweeping,

571
00:23:26,605 --> 00:23:29,441
osquery does what we
want, lower performance,

572
00:23:29,441 --> 00:23:34,246
lower chances of abuse, which
is probably our biggest thing.

573
00:23:34,246 --> 00:23:36,982
So the other thing
I like about osquery

574
00:23:36,982 --> 00:23:38,917
is it's able to be
very transparent.

575
00:23:38,917 --> 00:23:41,753
If we used some
other vendored tools,

576
00:23:41,753 --> 00:23:43,955
we couldn't necessarily
say, here's everything

577
00:23:43,955 --> 00:23:48,092
that our system is looking
for on your system.

578
00:23:48,093 --> 00:23:49,728
We manage our configuration,

579
00:23:49,728 --> 00:23:51,863
this is going to surprise
anyone that knows Github,

580
00:23:51,863 --> 00:23:53,465
in a Git repo.

581
00:23:53,465 --> 00:23:56,735
And so when my users want
to know what I'm looking for

582
00:23:56,735 --> 00:23:58,503
for the new threat
that just came out,

583
00:23:58,503 --> 00:24:00,371
they can literally look
at the last poll request

584
00:24:00,372 --> 00:24:01,773
that got merged.

585
00:24:01,773 --> 00:24:04,208
And that level of transparency
was one of the reasons

586
00:24:04,209 --> 00:24:06,178
that osquery was a
no brainer for us.

587
00:24:07,946 --> 00:24:10,881
- [Man 4] Kevin, can you
do that GRR pose again,

588
00:24:10,882 --> 00:24:13,452
my camera wasn't ready.

589
00:24:13,452 --> 00:24:14,286
- Oh sorry, five second
pose for the benefit

590
00:24:15,620 --> 00:24:19,024
of those of you that
have flash photography.

591
00:24:19,024 --> 00:24:21,226
- [Scott] You look like
a tiger middle manager.

592
00:24:21,226 --> 00:24:23,495
(laughter)

593
00:24:24,629 --> 00:24:26,231
- That's awesome, thank you.

594
00:24:27,499 --> 00:24:29,000
- [Scott] Any other questions?

595
00:24:30,202 --> 00:24:32,103
- Ladies, I have
two shirts up here

596
00:24:32,103 --> 00:24:34,706
that are in women's cut,
just letting you know.

597
00:24:36,007 --> 00:24:37,309
Maybe you have a question.

598
00:24:38,810 --> 00:24:40,712
Yes, I have a
question over there.

599
00:24:40,712 --> 00:24:42,948
(laughter)

600
00:24:44,749 --> 00:24:47,152
You know what was even
better, was the question.

601
00:24:48,820 --> 00:24:51,623
So what was the question?

602
00:24:51,623 --> 00:24:53,625
She just asked, can I
have a shirt, right?

603
00:24:53,625 --> 00:24:56,461
Okay, who wants to be
responsible for passing

604
00:24:56,461 --> 00:24:57,929
this to her because I
really don't want to try

605
00:24:57,929 --> 00:24:59,431
to throw it that far.

606
00:24:59,431 --> 00:25:01,166
- I really want you to
try to throw it that far.

607
00:25:01,166 --> 00:25:02,567
- Should I try it?

608
00:25:02,567 --> 00:25:05,570
Okay, everyone cover
your beverage, okay,

609
00:25:05,570 --> 00:25:06,804
cover your beverage.

610
00:25:10,375 --> 00:25:11,943
Alright, I got one more
lady's shirt up here.

611
00:25:11,943 --> 00:25:12,978
Who's got a question?

612
00:25:14,346 --> 00:25:15,747
Preferably not one that's
already been asked.

613
00:25:15,747 --> 00:25:16,581
Yes ma'am.

614
00:25:17,616 --> 00:25:20,552
(laughter)

615
00:25:20,552 --> 00:25:22,153
You know what, that was awesome.

616
00:25:24,823 --> 00:25:26,858
- [Scott] I have stickers.

617
00:25:26,858 --> 00:25:28,360
- I also have stickers.

618
00:25:30,762 --> 00:25:31,996
- [Scott] Thank you so much,
we really appreciate it.

619
00:25:31,997 --> 00:25:33,064
We'll be around if you
have any more questions.

620
00:25:33,064 --> 00:25:35,333
(clapping)

