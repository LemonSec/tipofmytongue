1
00:00:00,600 --> 00:00:02,902
(ethereal music)

2
00:00:14,814 --> 00:00:17,217
(applause)

3
00:00:17,217 --> 00:00:20,686
- Alright, is this
working? Yeah, okay.

4
00:00:20,687 --> 00:00:24,491
Hi everybody, welcome to
Start-Process PowerShell.

5
00:00:24,491 --> 00:00:28,128
Get forensic artifact, that
was my little cute-sy way to

6
00:00:28,128 --> 00:00:29,763
add some PowerShell
to the title.

7
00:00:29,763 --> 00:00:31,264
As Rob said, I'm Jared Atkinson.

8
00:00:31,264 --> 00:00:33,233
I work for Veris Group's
Adaptive Thread Division.

9
00:00:33,233 --> 00:00:34,666
We are a small
consulting company

10
00:00:34,667 --> 00:00:36,669
out of Northern Virginia.

11
00:00:36,669 --> 00:00:38,038
A little bit about me:

12
00:00:38,038 --> 00:00:39,772
As he said, I worked
in the U.S. Air Force.

13
00:00:39,773 --> 00:00:42,008
That's where I got
my beginnings, I
was a history major.

14
00:00:42,008 --> 00:00:44,778
The Air Force miscoded me
as a computer science major,

15
00:00:44,778 --> 00:00:46,413
and I guess the rest is history.

16
00:00:47,847 --> 00:00:49,582
Before PowerShell, my
favorite Microsoft product

17
00:00:49,582 --> 00:00:52,085
was Minesweeper, and so in 2015

18
00:00:52,085 --> 00:00:54,788
at Black Hat in Vegas, I won
the Minesweeper competition

19
00:00:54,788 --> 00:00:59,291
and won $2000, so I'm a
professional Minesweeper player,

20
00:00:59,292 --> 00:01:00,727
based on my definition.

21
00:01:00,727 --> 00:01:03,730
I'm the moderator of the
PowerShell.com Security Forum,

22
00:01:03,730 --> 00:01:06,265
so if you have any questions
about PowerShell security,

23
00:01:06,266 --> 00:01:08,101
whether that's
offensive or defensive,

24
00:01:08,101 --> 00:01:10,570
please feel free to come out
there and ask some questions

25
00:01:10,570 --> 00:01:11,704
and we'll make sure
we'll get you in touch

26
00:01:11,704 --> 00:01:13,139
with somebody that can help you.

27
00:01:13,139 --> 00:01:14,808
I develop PowerForensics,

28
00:01:14,808 --> 00:01:16,576
which is what we'll be
talking about today,

29
00:01:16,576 --> 00:01:17,943
as well as Uproot IDS,

30
00:01:17,944 --> 00:01:20,713
which is WMI-based
intrusion detection system,

31
00:01:20,713 --> 00:01:23,315
and WMIEventing, which
also works with Uproot.

32
00:01:23,316 --> 00:01:24,818
And then I do a lot of

33
00:01:24,818 --> 00:01:27,454
forensic artifact
file format research.

34
00:01:28,655 --> 00:01:30,824
So what is
PowerForensics, right?

35
00:01:30,824 --> 00:01:34,426
As a lot of you know, PowerShell
is not really a new thing,

36
00:01:34,427 --> 00:01:36,896
but it's becoming
more of a mainstay

37
00:01:36,896 --> 00:01:38,832
in the information
security field.

38
00:01:38,832 --> 00:01:40,133
Most people are familiar

39
00:01:40,133 --> 00:01:42,936
with the offensive
purposes for PowerShell.

40
00:01:42,936 --> 00:01:44,537
A lot of people are
working on how to

41
00:01:44,537 --> 00:01:47,440
defend or detect
offensive PowerShell,

42
00:01:47,440 --> 00:01:50,042
but what people have really
kind of been sleeping on

43
00:01:50,043 --> 00:01:53,113
is the defensive
utilization of PowerShell.

44
00:01:53,113 --> 00:01:55,849
It was originally created to
be a system administrator tool,

45
00:01:55,849 --> 00:01:58,852
and if it can do system
administration in an enterprise,

46
00:01:58,852 --> 00:02:00,553
it can probably do some
really helpful things

47
00:02:00,553 --> 00:02:03,056
as far as finding
badness in your network.

48
00:02:04,324 --> 00:02:05,859
PowerForensics is a module,

49
00:02:05,859 --> 00:02:07,292
so PowerShell is very modular.

50
00:02:07,293 --> 00:02:10,130
You can write code and
then import cmdlets,

51
00:02:10,130 --> 00:02:13,299
which allow you to
run the commands.

52
00:02:14,300 --> 00:02:15,802
PowerForensics is a module

53
00:02:15,802 --> 00:02:18,771
that's for live
forensic investigation.

54
00:02:18,771 --> 00:02:22,007
PowerShell allows you write
modules in PowerShell,

55
00:02:22,008 --> 00:02:23,443
which is a scripting language,

56
00:02:23,443 --> 00:02:26,613
or in C#, which is what I chose
to use for PowerForensics.

57
00:02:26,613 --> 00:02:27,847
It's a little bit faster

58
00:02:27,847 --> 00:02:29,983
and has a little bit
better class structure,

59
00:02:29,983 --> 00:02:31,784
things of that nature.

60
00:02:31,784 --> 00:02:34,286
One of my things that I wanted
to do with PowerForensics

61
00:02:34,287 --> 00:02:37,056
is minimize the reliance
on the Windows API.

62
00:02:37,056 --> 00:02:40,126
I'm gonna go through how
PowerForensics does that,

63
00:02:40,126 --> 00:02:41,594
how it parses all
the raw structures,

64
00:02:41,594 --> 00:02:42,695
things of that nature.

65
00:02:44,097 --> 00:02:45,932
Right now, it currently
parses NTFS data structures,

66
00:02:45,932 --> 00:02:49,268
like the MFT, the USN
Journal, so on and so forth,

67
00:02:49,269 --> 00:02:50,970
and then a lot of
the Windows Registry,

68
00:02:50,970 --> 00:02:54,541
the Event Log, and a bunch of
other individual artifacts.

69
00:02:54,541 --> 00:02:56,442
Some of my design requirements,

70
00:02:56,442 --> 00:02:58,111
I want it to be
forensically sound.

71
00:02:58,111 --> 00:03:02,248
That's a very touchy-feely
kind of requirement.

72
00:03:02,248 --> 00:03:04,083
One of the things that
I was really looking at

73
00:03:04,083 --> 00:03:06,753
is not relying on
the operating system

74
00:03:06,753 --> 00:03:08,988
because it can lie
to you, as well as

75
00:03:08,988 --> 00:03:11,858
not altering any
artifacts on the system,

76
00:03:11,858 --> 00:03:15,295
or altering as little artifacts
as possible on the system.

77
00:03:15,295 --> 00:03:18,231
I want it to be able execute
on a live running system.

78
00:03:18,231 --> 00:03:19,732
I want it to be
operationally fast,

79
00:03:19,732 --> 00:03:21,467
meaning I could parse the MFT

80
00:03:21,467 --> 00:03:23,336
in seconds rather than minutes,

81
00:03:24,504 --> 00:03:26,005
and then I want
it to be modular,

82
00:03:26,005 --> 00:03:28,575
so each individual cmdlet is
going to perform one function.

83
00:03:28,575 --> 00:03:30,476
For instance, I have
invoke forensic DD,

84
00:03:30,476 --> 00:03:34,280
which allows you to read
arbitrary bytes from a disc.

85
00:03:34,280 --> 00:03:36,616
Then I want that
capability to be able to be

86
00:03:36,616 --> 00:03:39,219
leveraged into an MFT
parser, for example.

87
00:03:40,653 --> 00:03:42,655
I want it to be capable of
working remotely, right?

88
00:03:42,655 --> 00:03:43,890
I want to be able
to run this thing

89
00:03:43,890 --> 00:03:45,992
against a number of
systems remotely,

90
00:03:45,992 --> 00:03:48,494
which we're in the proof
of concept stage with that.

91
00:03:48,494 --> 00:03:50,563
For instance, if
you use F response,

92
00:03:50,563 --> 00:03:51,664
which is a commercial tool,

93
00:03:51,664 --> 00:03:53,499
you can run this remotely.

94
00:03:53,499 --> 00:03:56,668
We also have a couple
open source product tools

95
00:03:56,669 --> 00:03:59,405
that we're working
on to help with that.

96
00:03:59,405 --> 00:04:00,540
Kind of getting into
the nitty gritty

97
00:04:00,540 --> 00:04:02,075
of how PowerForensics works,

98
00:04:03,109 --> 00:04:04,978
right now the only Windows API

99
00:04:04,978 --> 00:04:07,614
that we're actually using
is the CreateFile API.

100
00:04:07,614 --> 00:04:10,083
We use that to get a
handle to the actual disc

101
00:04:10,083 --> 00:04:11,884
to start reading
bytes from it, right?

102
00:04:11,884 --> 00:04:14,754
So you have to rely on the
operating system to do that,

103
00:04:14,754 --> 00:04:15,989
and that's how we're doing it.

104
00:04:15,989 --> 00:04:18,891
Then we're using the
FileStream read method.

105
00:04:18,891 --> 00:04:20,693
It's a dot-net class
that allows you

106
00:04:20,692 --> 00:04:22,996
to start reading those
bytes from that handle.

107
00:04:24,998 --> 00:04:27,900
When I was writing all of
the code for PowerForensics,

108
00:04:27,900 --> 00:04:30,902
I wanted to give myself
some visualization

109
00:04:30,903 --> 00:04:32,071
of how the structures work,

110
00:04:32,071 --> 00:04:34,540
so I made these
pretty little posters.

111
00:04:34,540 --> 00:04:35,642
Just kind of walking
through the way

112
00:04:35,642 --> 00:04:37,143
that PowerForensics would work,

113
00:04:37,143 --> 00:04:39,811
let's say you're trying to
parse the master file table.

114
00:04:39,812 --> 00:04:41,314
You would start with
the master boot record,

115
00:04:41,314 --> 00:04:43,316
which is going to tell you
the different partitions

116
00:04:43,316 --> 00:04:45,484
that you have on
that particular disc.

117
00:04:45,485 --> 00:04:48,021
You would find the
NTFS-based partition,

118
00:04:48,021 --> 00:04:50,256
and then you would go to
the NTFS volume boot record,

119
00:04:50,256 --> 00:04:53,025
which is going to tell you
how large that volume is.

120
00:04:53,026 --> 00:04:55,194
It's going to tell you where
the master file table is,

121
00:04:55,194 --> 00:04:56,863
give you a couple
pointers there.

122
00:04:56,863 --> 00:04:58,498
Then you're gonna come
to the master file table.

123
00:04:58,498 --> 00:04:59,732
I'm kind of going
through this fast

124
00:04:59,732 --> 00:05:01,934
because I have a lot
of demos to show.

125
00:05:03,269 --> 00:05:06,406
The master file table
is a meta-data structure

126
00:05:06,406 --> 00:05:08,675
that has information
about every file,

127
00:05:08,675 --> 00:05:12,145
whether that's a data file
or a directory on the disc.

128
00:05:12,145 --> 00:05:14,380
It has things like
all the timestamps

129
00:05:14,380 --> 00:05:17,817
that we associate typically
with the file system,

130
00:05:17,817 --> 00:05:20,119
last modified, last
changed, last accessed,

131
00:05:20,119 --> 00:05:21,387
so on and so forth.

132
00:05:21,387 --> 00:05:24,090
It also has the name
of the file itself,

133
00:05:24,090 --> 00:05:27,659
so like cmd.exe, and then
it's also going to have,

134
00:05:27,660 --> 00:05:29,629
if it's a data file,
a data attribute

135
00:05:29,629 --> 00:05:31,364
that points to where
the actual contents

136
00:05:31,364 --> 00:05:34,400
of that file exist
on the file system.

137
00:05:34,400 --> 00:05:35,902
This is what a data
attribute looks like.

138
00:05:35,902 --> 00:05:37,437
There's kind of
two different ways.

139
00:05:37,437 --> 00:05:39,405
One could be, the
data could be resident

140
00:05:39,405 --> 00:05:41,474
within the actual
MFT record itself

141
00:05:41,474 --> 00:05:43,443
if it's a relatively small file.

142
00:05:46,846 --> 00:05:48,581
Then if it's a large file,

143
00:05:48,581 --> 00:05:50,917
the data is actually
going to be non-resident,

144
00:05:50,917 --> 00:05:53,919
meaning that the MFT points
to where that data is.

145
00:05:53,920 --> 00:05:56,489
In this case, we have a
file that says Hello World,

146
00:05:56,489 --> 00:05:59,726
and that's what that data
attribute would look like.

147
00:05:59,726 --> 00:06:04,664
If it's a directory file,
as opposed to a data file...

148
00:06:06,199 --> 00:06:10,636
Whoops, this was the MFT
resident data attribute,

149
00:06:10,636 --> 00:06:12,839
and this is the
non-resident data attribute.

150
00:06:14,340 --> 00:06:15,640
The non-resident data attribute

151
00:06:15,641 --> 00:06:17,710
is going to have pointers.

152
00:06:17,710 --> 00:06:19,412
You kind of see over
here these data runs

153
00:06:19,412 --> 00:06:21,847
are pointers to where
the actual contents

154
00:06:21,848 --> 00:06:23,449
of the file are stored on disc.

155
00:06:23,449 --> 00:06:26,386
In this example, this
non-resident attribute

156
00:06:26,386 --> 00:06:28,855
is pointing to a
non-contiguous file,

157
00:06:28,855 --> 00:06:30,323
meaning that the
data's not stored

158
00:06:30,323 --> 00:06:31,758
contiguously on the disc,

159
00:06:31,758 --> 00:06:34,994
so we have multiple pointers
to where that data is.

160
00:06:36,963 --> 00:06:38,598
I'm gonna go into kind of a demo

161
00:06:38,598 --> 00:06:42,468
that shows using PowerForensics
from a case study purpose.

162
00:06:42,468 --> 00:06:44,404
There's a guy named Ali,

163
00:06:44,404 --> 00:06:46,205
he goes by BinaryZ0ne
on Twitter.

164
00:06:46,205 --> 00:06:50,643
He's put out a bunch
of incident-response
challenges online,

165
00:06:50,643 --> 00:06:52,578
and so one of what
I'm going to be using

166
00:06:52,578 --> 00:06:54,614
is one of his
incident-response challenges.

167
00:06:54,614 --> 00:06:56,416
I highly recommend
checking it out.

168
00:06:56,416 --> 00:07:00,453
BinaryZ0ne, there's a zero
instead of an O in Zone.

169
00:07:00,453 --> 00:07:02,054
If we could play
the first video.

170
00:07:04,090 --> 00:07:05,825
I'll kind of narrate
it as it goes along

171
00:07:05,825 --> 00:07:07,393
and explain what's happening.

172
00:07:18,871 --> 00:07:19,806
That was...

173
00:07:19,806 --> 00:07:21,073
I didn't realize it was playing.

174
00:07:22,442 --> 00:07:25,077
Can we go back to the
beginning real quick? Sorry.

175
00:07:25,077 --> 00:07:26,446
I thought the mouse
was your mouse,

176
00:07:26,446 --> 00:07:28,381
not the mouse in the video.

177
00:07:28,381 --> 00:07:30,816
This is just showing
that I'm mounting

178
00:07:30,817 --> 00:07:32,285
a disc image using FTK,

179
00:07:33,519 --> 00:07:35,021
It's mounted as the H drive,

180
00:07:35,021 --> 00:07:37,824
so I just wanted that to be
clear before we get going.

181
00:07:37,824 --> 00:07:39,192
Now I'm starting a demo,

182
00:07:39,192 --> 00:07:40,760
which this is just
a PowerShell script,

183
00:07:40,760 --> 00:07:42,061
which keeps me
from having to type

184
00:07:42,061 --> 00:07:43,796
everything out so
there's no typos.

185
00:07:45,331 --> 00:07:46,566
Kind of a nifty deal.

186
00:07:46,566 --> 00:07:48,967
Jeffrey Snover, the
creator, the godfather

187
00:07:48,968 --> 00:07:50,002
of PowerShell wrote that,

188
00:07:50,002 --> 00:07:52,104
so it's fun to throw in there.

189
00:07:53,272 --> 00:07:54,207
The first thing
that I'm gonna do,

190
00:07:54,207 --> 00:07:56,375
this is a web server, right?

191
00:07:56,375 --> 00:07:57,910
Basic information
behind it is that

192
00:07:57,910 --> 00:07:59,712
we were told there's
a web server that

193
00:07:59,712 --> 00:08:01,214
they suspect has
been compromised,

194
00:08:01,214 --> 00:08:04,050
so the first thing we wanna
do is look at the file system,

195
00:08:04,050 --> 00:08:05,551
what's going on in
the route directory,

196
00:08:05,551 --> 00:08:07,453
kind of grab our bearings there.

197
00:08:07,453 --> 00:08:08,955
Get-ForensicsChildItem
is similar

198
00:08:08,955 --> 00:08:11,824
to a directory listing,
DIR in the command shell,

199
00:08:11,824 --> 00:08:13,659
except what we're doing
is we're parsing the MFT

200
00:08:13,659 --> 00:08:16,762
to determine what files
belong in the route directory.

201
00:08:16,762 --> 00:08:18,898
The first thing that
kind of catches my eye

202
00:08:18,898 --> 00:08:20,867
because this is
a 15-minute demo,

203
00:08:20,867 --> 00:08:23,703
is the xampp directory, which is

204
00:08:23,703 --> 00:08:26,072
typically where a lot
of web server-type

205
00:08:26,072 --> 00:08:27,573
files would be residing,

206
00:08:27,573 --> 00:08:29,909
so I'm kind of interested
in checking that out.

207
00:08:31,410 --> 00:08:32,912
I'm going to...

208
00:08:32,912 --> 00:08:35,681
Get-ForensicFileRecord is
the MFT parsing cmdlet.

209
00:08:35,681 --> 00:08:36,983
All the stuff I
just talked about

210
00:08:36,982 --> 00:08:38,483
you don't even have
to think about it.

211
00:08:38,484 --> 00:08:40,486
You just literally type
in Get-ForensicFileRecord

212
00:08:40,486 --> 00:08:42,655
volumeName H, and it
parsed it that fast.

213
00:08:42,655 --> 00:08:46,092
This is what a MFT record
looks like in PowerShell.

214
00:08:46,092 --> 00:08:48,093
Notice that it has a full name.

215
00:08:48,094 --> 00:08:50,296
The name is $MFT in this case.

216
00:08:50,296 --> 00:08:52,231
It tells you whether
it was deleted

217
00:08:52,231 --> 00:08:54,800
or if it's a directory, it
has a bunch of timestamps

218
00:08:54,800 --> 00:08:56,334
from the standard
information attribute

219
00:08:56,335 --> 00:08:57,870
and the file name attribute.

220
00:08:57,870 --> 00:09:00,172
It also gives you the
parent record number,

221
00:09:00,172 --> 00:09:02,842
the record number for
that particular file.

222
00:09:04,210 --> 00:09:06,145
Then there's an attribute
array, so this is...

223
00:09:06,145 --> 00:09:08,079
That pretty picture that
had the data attribute

224
00:09:08,080 --> 00:09:09,282
and all that kind of stuff,

225
00:09:09,282 --> 00:09:11,817
this is what I'm showing
here in PowerShell.

226
00:09:11,817 --> 00:09:13,686
Notice that there's,
for instance,

227
00:09:13,686 --> 00:09:14,954
a standard
information attribute,

228
00:09:14,954 --> 00:09:17,290
which has a number of
different timestamps,

229
00:09:17,290 --> 00:09:19,891
the file name attribute
has more timestamps,

230
00:09:19,892 --> 00:09:21,427
and then you have
the data attribute.

231
00:09:21,427 --> 00:09:24,297
That data run, in particular,
is where the contents

232
00:09:24,297 --> 00:09:27,667
of the MFT are stored
on the file system.

233
00:09:27,667 --> 00:09:30,269
It's kind of interesting
for us to check out.

234
00:09:30,269 --> 00:09:31,771
This is just showing
the structure

235
00:09:31,771 --> 00:09:33,872
of how PowerForensics works.

236
00:09:35,575 --> 00:09:38,878
Now I'm going to, in particular,

237
00:09:38,878 --> 00:09:40,179
look at the data attribute,

238
00:09:40,179 --> 00:09:41,781
and we're going to
look at the data run.

239
00:09:41,781 --> 00:09:43,715
Just kind of showing
how PowerForensics

240
00:09:43,716 --> 00:09:45,585
stores those data runs.

241
00:09:45,585 --> 00:09:47,620
This is telling us
that relative cluster

242
00:09:47,620 --> 00:09:51,557
from the start of the
volume, 786432, I think,

243
00:09:51,557 --> 00:09:55,294
and it goes for 15,600
clusters, which...

244
00:09:55,294 --> 00:09:59,899
A cluster is 4096 in
this case, 4096 bytes.

245
00:09:59,899 --> 00:10:01,434
That's just telling us the size

246
00:10:01,434 --> 00:10:04,069
and the location of
the master file table.

247
00:10:04,070 --> 00:10:06,138
Now we don't care
about that anymore.

248
00:10:06,138 --> 00:10:08,774
We're gonna go ahead and
whittle down the MFT,

249
00:10:08,774 --> 00:10:11,310
and we're going to say,
"Hey, show us all MFT records

250
00:10:11,310 --> 00:10:14,646
"that have a file name
that starts with H:\xampp."

251
00:10:16,515 --> 00:10:17,683
Then we're going to compare...

252
00:10:17,683 --> 00:10:19,718
We're basically
trying to whittle down

253
00:10:19,719 --> 00:10:24,423
because the MFT has 62,400
records in it, in this case,

254
00:10:24,423 --> 00:10:26,525
usually a lot more in real life.

255
00:10:26,525 --> 00:10:29,595
We whittle it down
to 19,473 records

256
00:10:29,595 --> 00:10:31,497
just within that
xanpp directory,

257
00:10:31,497 --> 00:10:34,400
so we've already got rid of
two-thirds of our records,

258
00:10:34,400 --> 00:10:37,370
just kind of giving ourselves
something to look at.

259
00:10:37,370 --> 00:10:40,473
Now PowerShell has really
cool grouping functions,

260
00:10:40,473 --> 00:10:42,274
so we can group all the records

261
00:10:42,274 --> 00:10:44,977
based on the file name
modification time.

262
00:10:44,977 --> 00:10:46,612
So we're going to
say, "Hey, show us...

263
00:10:46,612 --> 00:10:48,014
"Group all files and show us

264
00:10:48,014 --> 00:10:49,849
"the different file
name modification times

265
00:10:49,849 --> 00:10:53,786
"that are associated
with these xanpp files."

266
00:10:53,786 --> 00:10:55,521
In this case, we have
three different dates

267
00:10:55,521 --> 00:10:57,223
that files were modified,

268
00:10:57,223 --> 00:11:00,559
or in the case of the file
name modification time,

269
00:11:00,559 --> 00:11:01,694
the creation time.

270
00:11:02,895 --> 00:11:06,632
We see that 17,000 were
created on August 23rd.

271
00:11:06,632 --> 00:11:07,967
Then there's two other days,

272
00:11:07,967 --> 00:11:10,703
September 2nd and September 3rd,

273
00:11:10,703 --> 00:11:12,838
where there were a
relatively smaller amount

274
00:11:12,838 --> 00:11:14,939
of files that were modified.

275
00:11:16,542 --> 00:11:17,710
What we're going to do is

276
00:11:17,710 --> 00:11:18,978
we're going to
look at those files

277
00:11:18,978 --> 00:11:21,247
that were modified on
the 2nd of September.

278
00:11:22,548 --> 00:11:24,050
Kind of the logic here is that

279
00:11:25,418 --> 00:11:27,319
when you create a web server,

280
00:11:27,319 --> 00:11:30,222
a lot of files are going
to be created all at once.

281
00:11:30,222 --> 00:11:33,025
Let's see what's changed
since they were created.

282
00:11:33,025 --> 00:11:34,293
This is going to show us...

283
00:11:34,293 --> 00:11:36,028
We're gonna put it all
in chronological order

284
00:11:36,028 --> 00:11:37,530
using that Sort-Object,

285
00:11:37,530 --> 00:11:39,598
and then we're going to
use the Select-Object

286
00:11:39,598 --> 00:11:41,800
to show us the name
and the timestamp.

287
00:11:41,801 --> 00:11:44,170
If you notice, there's just
a ton of different files.

288
00:11:44,170 --> 00:11:45,704
These are like
the session files,

289
00:11:45,705 --> 00:11:48,107
so on an Apache server,
every time somebody tries

290
00:11:48,107 --> 00:11:49,375
to access the Apache server,

291
00:11:49,375 --> 00:11:50,910
you're gonna get one
of these session files,

292
00:11:50,910 --> 00:11:52,178
and there's just tons of them

293
00:11:52,178 --> 00:11:54,280
that are created all
at the same time.

294
00:11:54,280 --> 00:11:56,115
It looks like either we
have a really busy server,

295
00:11:56,115 --> 00:11:58,017
or if it's maybe
a smaller server,

296
00:11:58,017 --> 00:11:59,919
somebody's doing some
sort of port scanning

297
00:11:59,919 --> 00:12:03,055
or trying to do some
automated access.

298
00:12:05,091 --> 00:12:06,692
Then we're going to look
at that second group,

299
00:12:06,692 --> 00:12:08,394
so these are files
that were changed

300
00:12:08,394 --> 00:12:09,929
on the 3rd of September,

301
00:12:09,929 --> 00:12:11,797
and we see one
last session there

302
00:12:11,797 --> 00:12:15,134
that was created at 6:49:23 a.m.

303
00:12:15,134 --> 00:12:16,335
Then we see a bunch
of things like

304
00:12:16,335 --> 00:12:19,371
webshell.zip, phpshell, c99.php.

305
00:12:21,207 --> 00:12:22,475
Do a little open-source...

306
00:12:22,475 --> 00:12:24,410
I mean, webshell.zip,
you don't really need

307
00:12:24,410 --> 00:12:26,112
to do that much open-source
research, I guess,

308
00:12:26,112 --> 00:12:29,281
but c99.php, if you
go to Virus Total

309
00:12:29,281 --> 00:12:30,516
or you Google that, you'll see

310
00:12:30,516 --> 00:12:32,351
that there's something
strange about that,

311
00:12:32,351 --> 00:12:34,653
but we can actually
look at those files.

312
00:12:34,653 --> 00:12:36,122
We're gonna parse the MFT,

313
00:12:36,122 --> 00:12:38,324
figure out where the
data of that session is,

314
00:12:38,324 --> 00:12:40,192
and we can parse out
what the contents

315
00:12:40,192 --> 00:12:41,460
of that file are.

316
00:12:41,460 --> 00:12:43,496
In this case, it looks
like somebody tried to

317
00:12:43,496 --> 00:12:46,031
do some sort of connection
using an admin username.

318
00:12:47,399 --> 00:12:48,367
Then we're going to go ahead

319
00:12:48,367 --> 00:12:50,468
and look at this phpshell2.php.

320
00:12:52,605 --> 00:12:54,607
We can open it up, and
here's the contents

321
00:12:54,607 --> 00:12:57,142
of that php script.

322
00:12:57,143 --> 00:13:00,246
We see there's an
IP address, a port,

323
00:13:00,246 --> 00:13:03,848
some sort of connecting
out via sockets going on.

324
00:13:03,849 --> 00:13:05,918
You could give that to
someone that knows php

325
00:13:05,918 --> 00:13:07,319
and they would be
able to determine

326
00:13:07,319 --> 00:13:10,021
what's actually happening
with that script.

327
00:13:11,190 --> 00:13:12,691
Not gonna go in deep with that

328
00:13:12,691 --> 00:13:14,593
because of time limitations,
but that's kind of an idea

329
00:13:14,593 --> 00:13:17,729
of something that you would
be able to quickly find.

330
00:13:17,730 --> 00:13:20,065
A really cool thing
about PowerShell is that

331
00:13:20,065 --> 00:13:22,268
PowerShell is built on
the dot-net framework.

332
00:13:22,268 --> 00:13:24,170
Dot-net gives us
tons of capabilities,

333
00:13:24,170 --> 00:13:26,539
one of which is the
date-time object.

334
00:13:26,539 --> 00:13:28,674
So Get-Date allows
us to create a date.

335
00:13:28,674 --> 00:13:31,877
In this case, I wanted
to create a start date

336
00:13:31,877 --> 00:13:36,314
of September 3rd at
basically midnight.

337
00:13:37,950 --> 00:13:39,351
Then we're going to
give it an end date,

338
00:13:39,351 --> 00:13:42,054
and there's actually a
method on the start date

339
00:13:42,054 --> 00:13:43,255
that we just add one day,

340
00:13:43,255 --> 00:13:45,524
so now we have a temporal range

341
00:13:45,524 --> 00:13:47,726
of the 3rd through the 4th.

342
00:13:47,726 --> 00:13:49,461
Now we can really
whittle down and say,

343
00:13:49,461 --> 00:13:52,898
"Hey, show me every
file that was modified

344
00:13:52,898 --> 00:13:56,435
"between the 3rd and the
4th of September, 2015."

345
00:13:57,570 --> 00:13:59,271
Just parsing the MFT again.

346
00:13:59,271 --> 00:14:02,341
Now I'm going to build
a window showing,

347
00:14:02,341 --> 00:14:04,577
like I said, every file that has

348
00:14:04,577 --> 00:14:07,313
a file name modification
time that falls between

349
00:14:07,313 --> 00:14:09,247
September 3rd at 12:00 a.m.

350
00:14:09,248 --> 00:14:11,016
and September 4th at 12:00 a.m.

351
00:14:13,052 --> 00:14:15,087
It's gonna be a much
more stark contrast

352
00:14:15,087 --> 00:14:16,889
between the number
of total MFT records

353
00:14:16,889 --> 00:14:18,691
versus the number of MFT records

354
00:14:18,691 --> 00:14:20,092
that fall within that range.

355
00:14:21,660 --> 00:14:23,896
We started with 62,400,

356
00:14:23,896 --> 00:14:25,664
and after that, we have 22.

357
00:14:25,664 --> 00:14:27,165
So now we have...

358
00:14:27,166 --> 00:14:29,001
We kind of have a temporal range

359
00:14:29,001 --> 00:14:30,836
of when some weird
stuff was going on,

360
00:14:30,836 --> 00:14:32,671
and we have 22 files that were

361
00:14:32,671 --> 00:14:35,307
modified/created
during that timeframe.

362
00:14:36,809 --> 00:14:39,911
Again, we're gonna sort it
based on that timestamp,

363
00:14:39,912 --> 00:14:40,846
and then we're going to show

364
00:14:40,846 --> 00:14:43,082
just the name and the timestamp.

365
00:14:43,082 --> 00:14:44,884
Again, a lot of these
files are similar

366
00:14:44,884 --> 00:14:46,385
to what we already saw,

367
00:14:46,385 --> 00:14:48,220
but we have a couple
more interesting things,

368
00:14:48,220 --> 00:14:49,588
like the temporary
internet files,

369
00:14:49,588 --> 00:14:52,958
which have XSS_S, we
could check that out,

370
00:14:52,958 --> 00:14:55,593
and then we have that
IP address again.

371
00:14:55,594 --> 00:14:57,963
Might be something that
is worth investigating.

372
00:14:59,231 --> 00:15:01,834
Again, the webshells
kind of going on.

373
00:15:03,802 --> 00:15:06,038
Just kind of a different
way to look at it,

374
00:15:06,038 --> 00:15:08,073
kind of narrow your scope there.

375
00:15:08,073 --> 00:15:09,942
Then you see like ad_driver.sys

376
00:15:09,942 --> 00:15:14,947
or mwdwdui.BUD in the
driver's directory.

377
00:15:16,348 --> 00:15:18,016
Who knows what that is
off the top of their head,

378
00:15:18,017 --> 00:15:20,352
but we could go check that out.

379
00:15:20,352 --> 00:15:22,922
The next thing that we wanna
look at is the USN Journal,

380
00:15:22,922 --> 00:15:24,857
which is the update
sequence number journal.

381
00:15:24,857 --> 00:15:26,959
It keeps track of
file operations.

382
00:15:26,959 --> 00:15:29,228
Dave Cohen's the man when
it comes to the USN Journal,

383
00:15:29,228 --> 00:15:31,262
if you have any
questions about it.

384
00:15:31,263 --> 00:15:32,765
This is going to keep
track of everything

385
00:15:32,765 --> 00:15:34,266
that changes on the file system,

386
00:15:34,266 --> 00:15:38,069
so even more granularity
of when a file is updated,

387
00:15:38,070 --> 00:15:41,106
when it's deleted, when it's
created, so on and so forth.

388
00:15:41,106 --> 00:15:43,676
A deleted file, you may
be able to determine

389
00:15:43,676 --> 00:15:46,879
that is exists from
parsing the MFT,

390
00:15:46,879 --> 00:15:48,881
but the USN Journal
is going to keep

391
00:15:48,881 --> 00:15:50,549
information about that
regardless of whether

392
00:15:50,549 --> 00:15:52,184
the MFT tells you about it.

393
00:15:53,519 --> 00:15:55,688
This is what a USN
Journal object looks like.

394
00:15:55,688 --> 00:15:58,790
We have ServerManager.log,
it has a record number,

395
00:15:58,791 --> 00:16:01,093
which points to the MFT.

396
00:16:01,093 --> 00:16:02,593
Then we have the
parent sequence number

397
00:16:02,594 --> 00:16:06,165
so we could derive the path of
that ServerManager.log file,

398
00:16:06,165 --> 00:16:07,366
and we have a timestamp.

399
00:16:07,366 --> 00:16:09,835
Then the reason tells
you what happened.

400
00:16:09,835 --> 00:16:12,204
Data extended means
that somebody was adding

401
00:16:12,204 --> 00:16:13,671
data to that file.

402
00:16:13,672 --> 00:16:16,241
A log file you expect to
see that pretty frequently.

403
00:16:17,443 --> 00:16:19,444
Again, we're gonna
take that USN Journal,

404
00:16:19,445 --> 00:16:21,180
and we're going
to whittle it down

405
00:16:21,180 --> 00:16:22,982
to that temporal range
between the 3rd of September

406
00:16:22,982 --> 00:16:24,650
and the 4th of September.

407
00:16:26,418 --> 00:16:30,155
We went from 12,429
records to about 8,000.

408
00:16:31,590 --> 00:16:34,226
There's still a lot of stuff
that falls within that range.

409
00:16:35,828 --> 00:16:37,295
I don't know about you,
but I don't want to look

410
00:16:37,296 --> 00:16:39,832
at 8,000 different
USN Journal entries,

411
00:16:39,832 --> 00:16:41,934
and so we're gonna use
that Group-Object function

412
00:16:41,934 --> 00:16:42,968
in PowerShell again.

413
00:16:45,504 --> 00:16:47,206
These are all the
different files

414
00:16:47,206 --> 00:16:49,341
that have USN Journal
entries, all grouped together.

415
00:16:49,341 --> 00:16:54,346
You see ServerManager.log
makes up 8,273 of our 8,400.

416
00:16:55,748 --> 00:16:58,217
You could go look at what
ServerManager.log is,

417
00:16:58,217 --> 00:16:59,585
whether that's
interesting or not.

418
00:16:59,585 --> 00:17:01,754
You could kind of
put that to the side.

419
00:17:01,754 --> 00:17:03,222
Once you check it out,
I think it has to do

420
00:17:03,222 --> 00:17:05,156
with installing
roles on a server,

421
00:17:05,156 --> 00:17:07,592
something along those lines
if I remember correctly.

422
00:17:07,593 --> 00:17:08,961
We see that that session file

423
00:17:08,961 --> 00:17:10,596
that was interesting previously,

424
00:17:10,596 --> 00:17:13,031
that's been updated 14 times.

425
00:17:13,031 --> 00:17:16,568
We see that's that temporary
internet file there.

426
00:17:16,568 --> 00:17:18,137
We also see php331.tmp.

427
00:17:19,838 --> 00:17:21,740
That's something I
haven't seen before

428
00:17:23,709 --> 00:17:25,444
in this investigation.

429
00:17:25,444 --> 00:17:26,878
Here we're able to
see that the file

430
00:17:26,878 --> 00:17:29,348
that's the USN Journal
for the FILE_CREATE.

431
00:17:29,348 --> 00:17:31,582
It also gave us the
record number 62330.

432
00:17:34,586 --> 00:17:36,522
Group-Object kind of obfuscates

433
00:17:36,522 --> 00:17:38,023
the actual details from you,

434
00:17:38,023 --> 00:17:39,792
so what we're going to do
is we're going to try to

435
00:17:39,792 --> 00:17:42,327
actually see what those USN
Journal entries look like

436
00:17:42,327 --> 00:17:46,098
for that php2331.tmp.

437
00:17:49,435 --> 00:17:50,402
And here they are.

438
00:17:51,837 --> 00:17:55,574
We can see that at 7:10:15 is
when that file was created,

439
00:17:55,574 --> 00:17:57,209
based on the USN Journal entry.

440
00:17:58,677 --> 00:18:00,646
Then we can see that there's
some data truncation there,

441
00:18:00,646 --> 00:18:03,382
and then data extend.

442
00:18:03,382 --> 00:18:05,017
It all kind of happened
all at the same time,

443
00:18:05,017 --> 00:18:07,152
so when file creation occurs,

444
00:18:07,152 --> 00:18:08,720
there's a lot of
things that go on.

445
00:18:08,720 --> 00:18:10,656
Then we see that it was
also renamed, right?

446
00:18:10,656 --> 00:18:12,558
Hmm, that's interesting,

447
00:18:12,558 --> 00:18:14,126
so that file wasn't in the MFT

448
00:18:14,126 --> 00:18:16,261
because that name
doesn't exist anymore

449
00:18:16,261 --> 00:18:17,963
because the file
name was changed.

450
00:18:20,532 --> 00:18:23,836
We're gonna go ahead and store
that in a variable $62330,

451
00:18:27,106 --> 00:18:30,242
and then we are going to see
that there's six of them.

452
00:18:31,076 --> 00:18:32,344
We're gonna look at one,

453
00:18:32,344 --> 00:18:34,079
so that's what it looks
like, that RENAME_OLD.

454
00:18:36,415 --> 00:18:39,384
Then we're able to pivot
from that into the MFT,

455
00:18:39,384 --> 00:18:42,287
so there's a
GetFileRecord method.

456
00:18:42,287 --> 00:18:43,455
I clicked pretty fast,

457
00:18:43,455 --> 00:18:44,822
but what we're
able to do is pivot

458
00:18:44,823 --> 00:18:47,426
from the USN Journal
back into the MFT,

459
00:18:47,426 --> 00:18:50,795
and we can see that that file
got renamed to phpshell.php,

460
00:18:52,131 --> 00:18:53,332
and then we have
all the timestamps

461
00:18:53,332 --> 00:18:56,668
to kind of corroborate
that information.

462
00:19:01,106 --> 00:19:02,341
Rename at 7:15.

463
00:19:03,308 --> 00:19:05,144
We ran the GetFileRecord method,

464
00:19:05,144 --> 00:19:07,012
which allows us to
automatically go

465
00:19:07,012 --> 00:19:08,447
from that USN Journal entry

466
00:19:08,447 --> 00:19:11,283
into the relevant master
file table entries.

467
00:19:16,021 --> 00:19:17,456
When I was making this video,

468
00:19:17,456 --> 00:19:18,756
I was talking in my
head, trying to make sure

469
00:19:18,757 --> 00:19:20,259
that the timing
kind of worked out.

470
00:19:20,259 --> 00:19:22,027
(laughs)

471
00:19:22,027 --> 00:19:23,495
Who knows how that went?

472
00:19:23,495 --> 00:19:25,030
Alright, so now we're gonna see
what the content of that is,

473
00:19:25,030 --> 00:19:27,866
and if you know php,
then that's probably...

474
00:19:27,866 --> 00:19:29,268
Doesn't look like something
that's really good.

475
00:19:29,268 --> 00:19:31,069
It looks like it's gonna
basically allow you

476
00:19:31,069 --> 00:19:32,803
to run an arbitrary
system command.

477
00:19:34,039 --> 00:19:36,675
The next thing, we found
some weird phpshell,

478
00:19:36,675 --> 00:19:38,577
but one thing I wanna
look at is the access log,

479
00:19:38,577 --> 00:19:40,112
the Apache access log.

480
00:19:40,112 --> 00:19:43,849
This isn't in the Github
version of PowerForensics yet,

481
00:19:43,849 --> 00:19:45,050
but just kind of playing around

482
00:19:45,050 --> 00:19:46,985
with some of the
power of PowerShell.

483
00:19:46,985 --> 00:19:48,219
Excuse the bad pun.

484
00:19:48,220 --> 00:19:50,355
What we're going
to do is parse that

485
00:19:50,355 --> 00:19:52,558
into a $access variable.

486
00:19:52,558 --> 00:19:54,059
The cool thing about the C#...

487
00:19:55,661 --> 00:19:57,196
The cool thing about the C# DLL

488
00:19:59,331 --> 00:20:02,333
that we're running from
exposes all of our classes

489
00:20:02,334 --> 00:20:06,471
as if they're dot-net
objects or dot-net classes,

490
00:20:06,471 --> 00:20:09,074
and so we could run the
GetInstances method.

491
00:20:09,074 --> 00:20:12,511
This is what Apache
log object looks like.

492
00:20:12,511 --> 00:20:14,879
We have a status, we
have the user agent,

493
00:20:14,880 --> 00:20:17,416
the http method, a timestamp.

494
00:20:19,117 --> 00:20:21,553
All these timestamps
are a common value.

495
00:20:21,553 --> 00:20:23,855
They're all dot-net
date-time objects,

496
00:20:23,855 --> 00:20:26,158
so you can pivot, get
to the milliseconds,

497
00:20:26,158 --> 00:20:28,193
the number of ticks,
so on and so forth.

498
00:20:28,193 --> 00:20:32,164
We grouped all of these
based on the http method.

499
00:20:32,164 --> 00:20:33,966
If somebody's writing
something to a web server

500
00:20:33,966 --> 00:20:35,466
or got unauthorized access,

501
00:20:35,467 --> 00:20:37,369
they would probably
be posting data to it.

502
00:20:37,369 --> 00:20:39,504
We wanna go check
out all those posts.

503
00:20:40,672 --> 00:20:41,873
Couple different
ways to look at it.

504
00:20:41,873 --> 00:20:44,009
That's kind of overflow.

505
00:20:44,009 --> 00:20:45,544
We're getting a
lot of information,

506
00:20:45,544 --> 00:20:50,382
but maybe an interesting thing
is like that c99.php?act=cmd

507
00:20:51,717 --> 00:20:53,051
might give us a timestamp
on when somebody

508
00:20:53,051 --> 00:20:56,655
was issuing a command
to that c99.php shell.

509
00:20:59,291 --> 00:21:00,524
See that they're
using Iceweasel,

510
00:21:00,525 --> 00:21:02,427
which if you're a
Kali Linux user,

511
00:21:02,427 --> 00:21:05,464
you probably are familiar
with that browser

512
00:21:07,599 --> 00:21:08,500
or user agent.

513
00:21:10,135 --> 00:21:11,536
This is just a different
way to look at it,

514
00:21:11,536 --> 00:21:14,139
kind of seeing what
those refers were.

515
00:21:14,139 --> 00:21:16,707
There's some weird
php shell or php file

516
00:21:16,708 --> 00:21:18,110
that we haven't seen before,

517
00:21:18,110 --> 00:21:20,445
whether that ended up
being successful or not,

518
00:21:20,445 --> 00:21:23,014
we don't know unless we look
deeper into the objects,

519
00:21:23,015 --> 00:21:25,350
but just kind of different
way to look at that.

520
00:21:26,451 --> 00:21:27,452
This is where...

521
00:21:27,452 --> 00:21:28,720
Now we're kind of getting

522
00:21:28,720 --> 00:21:30,155
into the forensic
timeline concept,

523
00:21:30,155 --> 00:21:33,024
and so like with
log to timeline,

524
00:21:33,025 --> 00:21:35,560
forensic timeline became
a very important thing

525
00:21:35,560 --> 00:21:36,828
when you're doing
an investigation,

526
00:21:36,828 --> 00:21:39,064
kind of helps you build
out that temporal range

527
00:21:39,064 --> 00:21:40,332
and then do investigations.

528
00:21:40,332 --> 00:21:42,768
It aggregates all
this information,

529
00:21:42,768 --> 00:21:45,037
the MFT, the registry,
so on and so forth.

530
00:21:45,037 --> 00:21:46,238
What we're doing
here is we're showing

531
00:21:46,238 --> 00:21:47,739
what an MFT record looks like,

532
00:21:47,739 --> 00:21:49,775
and notice that there's multiple
timestamps there, right?

533
00:21:49,775 --> 00:21:52,577
So I can't build a direct...

534
00:21:53,812 --> 00:21:56,848
A direct timeline based
on that one MFT record,

535
00:21:56,848 --> 00:22:00,085
so what I have is a unified
forensic timeline object,

536
00:22:00,085 --> 00:22:01,987
which is going to
look at an MFT object

537
00:22:01,987 --> 00:22:04,089
and then parse out the
different timestamps.

538
00:22:04,089 --> 00:22:06,558
Notice that one
MFT record object

539
00:22:06,558 --> 00:22:10,095
turned into two forensic
timeline objects.

540
00:22:11,863 --> 00:22:14,166
Now what I'm doing is
I GetForensicTimeline.

541
00:22:14,166 --> 00:22:16,101
Simple as that, you
tell it what volume

542
00:22:16,101 --> 00:22:17,102
you want to run it against,

543
00:22:17,102 --> 00:22:18,503
and then save it
into a variable,

544
00:22:18,503 --> 00:22:21,572
and it's parsing the registry,
the master file table,

545
00:22:22,974 --> 00:22:25,277
I think the event logs,
but maybe not in this case.

546
00:22:25,277 --> 00:22:27,479
Prefetch, all kinds of stuff.

547
00:22:28,780 --> 00:22:30,716
Here's the sources that
we have in this case.

548
00:22:30,716 --> 00:22:34,686
USN Journal, registry, MFT,
and then ShellLink files.

549
00:22:36,655 --> 00:22:38,090
Now, what we're going to do is,

550
00:22:38,090 --> 00:22:41,158
again, we're going to
reduce the data sets

551
00:22:41,159 --> 00:22:44,062
from everything into
that temporal range

552
00:22:44,062 --> 00:22:45,397
of the 3rd through the 4th.

553
00:22:46,798 --> 00:22:48,633
If you want, you could
just output this to Excel,

554
00:22:48,633 --> 00:22:51,403
but there's like 200,000
lines of information.

555
00:22:55,474 --> 00:23:00,145
Okay, so we went from 244,000
entries in the timeline,

556
00:23:00,145 --> 00:23:02,714
and by reducing it,
we went to 8,700,

557
00:23:02,714 --> 00:23:04,883
which is a lot more manageable.

558
00:23:04,883 --> 00:23:06,585
Doug Finke, who's
a PowerShell MVP

559
00:23:06,585 --> 00:23:08,253
out of New York, I believe,

560
00:23:08,253 --> 00:23:10,688
he wrote Export Excel,
which is a PowerShell module

561
00:23:10,689 --> 00:23:13,959
which allows you to
automatically build
Excel documents

562
00:23:13,959 --> 00:23:15,527
from the command line.

563
00:23:15,527 --> 00:23:17,929
Just kind of showing that
use with the timeline,

564
00:23:17,929 --> 00:23:20,265
so you pipe all those
objects into Export Excel.

565
00:23:20,265 --> 00:23:21,466
It pops it up for you,

566
00:23:21,466 --> 00:23:23,601
and then it's already
built into a table

567
00:23:23,602 --> 00:23:26,204
and the top row
stays safe for you.

568
00:23:26,204 --> 00:23:28,540
It has all the timestamps there,

569
00:23:28,540 --> 00:23:29,841
just all the information
trying to look

570
00:23:29,841 --> 00:23:32,343
as similar to log to
timeline as possible,

571
00:23:32,344 --> 00:23:33,845
because I know a lot of
people are using that

572
00:23:33,845 --> 00:23:37,749
trying to kind of keep it
general or keep it the same.

573
00:23:39,785 --> 00:23:41,219
That's the end of
that, but that...

574
00:23:41,219 --> 00:23:42,687
Ultimately what you would do is

575
00:23:42,687 --> 00:23:45,223
then go through that timeline
and do your investigation.

576
00:23:45,223 --> 00:23:48,427
Then if we could go
back to the PowerPoints.

577
00:23:50,395 --> 00:23:52,798
Back to the PowerPoint, cool.

578
00:23:58,103 --> 00:23:59,838
I played the video too quickly,

579
00:23:59,838 --> 00:24:01,673
but client doesn't...

580
00:24:01,673 --> 00:24:02,908
This is the situation.

581
00:24:02,908 --> 00:24:04,141
They didn't give you
that much information.

582
00:24:04,142 --> 00:24:05,544
They said, "Hey, we
have a web server.

583
00:24:05,544 --> 00:24:07,512
"The web server we
suspect was compromised."

584
00:24:07,512 --> 00:24:09,380
So these are the things
that we needed to do

585
00:24:09,381 --> 00:24:11,283
during that video,
which I think we did.

586
00:24:11,283 --> 00:24:12,384
Then you could kind of,

587
00:24:12,384 --> 00:24:15,987
based on that 15-minute
investigation,

588
00:24:15,987 --> 00:24:17,422
we're able to say things like,

589
00:24:17,422 --> 00:24:21,793
"Hey, there's a possible
attacker IP of 192.168.56.102.

590
00:24:21,793 --> 00:24:24,161
Looks like there was some
sort of brute forcing.

591
00:24:24,162 --> 00:24:25,697
A little bit more
investigation would've led you

592
00:24:25,697 --> 00:24:27,498
to think that it was Sequel Map.

593
00:24:27,499 --> 00:24:29,034
The time that it started,

594
00:24:29,034 --> 00:24:32,304
of initial access,
was 6:49:23 a.m.

595
00:24:32,304 --> 00:24:33,638
There's a number of
different webshells

596
00:24:33,638 --> 00:24:35,974
that were created
on that system.

597
00:24:35,974 --> 00:24:37,476
That's kind of the
initial findings

598
00:24:37,476 --> 00:24:40,045
that you could give to your
customer or to your boss.

599
00:24:40,045 --> 00:24:41,480
- [Woman] If anyone
else has questions...

600
00:24:41,480 --> 00:24:43,081
- Yeah, if anybody
has questions,

601
00:24:43,081 --> 00:24:46,618
I could be outside waiting
and we can take them offline.

602
00:24:46,618 --> 00:24:48,119
Thanks guys, appreciate it.

603
00:24:48,119 --> 00:24:50,088
(applause)

604
00:24:50,088 --> 00:24:52,824
(ethereal music)

