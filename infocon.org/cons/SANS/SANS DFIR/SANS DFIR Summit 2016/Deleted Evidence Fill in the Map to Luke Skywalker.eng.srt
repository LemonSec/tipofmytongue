1
00:00:00,867 --> 00:00:04,270
(wondrous electronic music)

2
00:00:14,614 --> 00:00:16,016
- Thanks, it's nice to be here.

3
00:00:16,015 --> 00:00:19,586
I'm very honored, it's
awesome being selected

4
00:00:19,586 --> 00:00:23,857
for SANS DFIR, it's just so
many talented people here.

5
00:00:23,857 --> 00:00:26,726
So it's a little
nerve-racking, but it's great,

6
00:00:26,726 --> 00:00:27,727
it's such an honor.

7
00:00:29,162 --> 00:00:32,432
All right, so we're gonna
talk about deleted evidence.

8
00:00:32,432 --> 00:00:34,501
So when we talk about
deleted evidence,

9
00:00:34,501 --> 00:00:38,671
it's important to talk about
how that evidence was deleted,

10
00:00:38,671 --> 00:00:41,641
and then if the evidence is
gone, are there artifacts

11
00:00:41,641 --> 00:00:44,878
of the file creation
or file access.

12
00:00:44,878 --> 00:00:46,513
So let's get started.

13
00:00:46,513 --> 00:00:50,116
There's these cool
slide transitions
in-between each slide,

14
00:00:50,116 --> 00:00:53,753
thanks to George Lucas's,
the way Star Wars

15
00:00:53,753 --> 00:00:55,255
was filmed originally.

16
00:00:55,255 --> 00:00:57,090
- I had to watch a YouTube
video like three times

17
00:00:57,090 --> 00:00:58,625
to find all the
different transitions,

18
00:00:58,625 --> 00:01:00,160
and luckily PowerPoint
has them built in.

19
00:01:00,160 --> 00:01:01,428
- [Mary] It's really cool.

20
00:01:01,428 --> 00:01:02,928
- So you, too, can make
Star Wars on PowerPoint.

21
00:01:02,929 --> 00:01:05,698
- Yeah, so if you don't like
them, blame George Lucas.

22
00:01:05,698 --> 00:01:10,336
But they're, anyway, so
just a quick introduction.

23
00:01:10,336 --> 00:01:14,007
I'm Mary Singh, I've been with
Mandiant about 6 1/2 years

24
00:01:14,007 --> 00:01:16,209
dealing with, I don't like APT,

25
00:01:16,209 --> 00:01:19,512
but more advanced
type of attackers

26
00:01:19,512 --> 00:01:24,017
and financial cases and more
recently, healthcare cases.

27
00:01:24,017 --> 00:01:25,785
- I'm Dave Pany, I've
been with Mandiant

28
00:01:25,785 --> 00:01:28,721
for about three years, also
doing targeted attacks.

29
00:01:28,721 --> 00:01:32,759
I love credit card malware
and PFI investigations.

30
00:01:32,759 --> 00:01:35,762
And just a quick shout-out
to my university, Bloomsburg.

31
00:01:35,762 --> 00:01:37,931
Before I came from Mandiant,
I graduated from Bloomsburg.

32
00:01:37,931 --> 00:01:40,866
There are a couple alumni and
a professor in the audience,

33
00:01:40,867 --> 00:01:44,237
so if anyone is looking for
fresh-out-of-school talent

34
00:01:44,237 --> 00:01:47,039
that is ready to be
molded into the upcoming

35
00:01:47,040 --> 00:01:50,210
presents of this
summit, get in touch.

36
00:01:50,210 --> 00:01:51,044
- Definitely.

37
00:01:52,278 --> 00:01:56,516
Okay, so how are files deleted?

38
00:01:56,516 --> 00:01:59,285
Of course, there's many, many
ways files can be deleted.

39
00:01:59,285 --> 00:02:03,021
I'm covering the top three
ways that I think are relevant.

40
00:02:03,022 --> 00:02:05,191
When an attacker creates a file,

41
00:02:05,191 --> 00:02:07,093
it can be deleted automatically.

42
00:02:07,093 --> 00:02:09,863
Either self-destruction
is built into malware,

43
00:02:09,863 --> 00:02:14,868
or there's a file dropper that
automatically deletes itself.

44
00:02:16,002 --> 00:02:18,304
Sometimes antivirus
will delete the malware,

45
00:02:18,304 --> 00:02:20,540
especially if you're
responding to a case

46
00:02:20,540 --> 00:02:22,408
like six months, a year later,

47
00:02:22,408 --> 00:02:23,910
antivirus all of sudden says,

48
00:02:23,910 --> 00:02:26,012
hey, there's something bad here.

49
00:02:26,012 --> 00:02:27,547
You know, thanks, antivirus,

50
00:02:27,547 --> 00:02:31,017
but AV will automatically
delete some of the files.

51
00:02:31,017 --> 00:02:34,988
Sometimes an attacker
will drop an initial

52
00:02:34,988 --> 00:02:37,891
piece of malware, AV
actually detects it,

53
00:02:37,891 --> 00:02:39,292
and then the attacker gets upset

54
00:02:39,292 --> 00:02:41,828
and creates a new
variant of the file.

55
00:02:41,828 --> 00:02:45,031
So if you're ever
analyzing antivirus logs,

56
00:02:45,031 --> 00:02:46,533
don't get comfortable and think,

57
00:02:46,533 --> 00:02:48,934
oh, well, AV caught
it, we are good to go.

58
00:02:48,935 --> 00:02:50,570
Sometimes the
attacker will come in

59
00:02:50,570 --> 00:02:52,338
and create a different version,

60
00:02:52,338 --> 00:02:56,643
or I've seen it where the
actual original dropper

61
00:02:56,643 --> 00:02:58,478
for the back door
is quarantined,

62
00:02:58,478 --> 00:03:02,048
but then the back door
itself is left behind.

63
00:03:02,048 --> 00:03:04,083
And then I've also seen
it where an attacker

64
00:03:04,083 --> 00:03:06,386
will just manually
delete a file,

65
00:03:06,386 --> 00:03:08,221
either through a
script or just typing

66
00:03:08,221 --> 00:03:11,391
a command to delete
it, and I have seen

67
00:03:11,391 --> 00:03:14,260
malware in the recycle
bin, believe it or not,

68
00:03:14,260 --> 00:03:16,196
so always just check
there just in case

69
00:03:16,196 --> 00:03:17,997
the attacker is sloppy.

70
00:03:17,997 --> 00:03:19,866
- Have you ever seen malware
deleted with a well-placed

71
00:03:19,866 --> 00:03:21,868
laser through the exhaust hatch?

72
00:03:21,868 --> 00:03:23,102
- No, no!

73
00:03:23,102 --> 00:03:24,204
- Might have to make it
explode, I don't know.

74
00:03:24,204 --> 00:03:25,505
- That would be cool.
- Next time.

75
00:03:25,505 --> 00:03:28,041
- Maybe one day,
maybe next year, so.

76
00:03:29,509 --> 00:03:33,178
But these are the different
ways attackers delete files.

77
00:03:34,547 --> 00:03:36,416
And of course, files
can't always be recovered,

78
00:03:36,416 --> 00:03:39,385
y'all know this, it really
depends on how the file

79
00:03:39,385 --> 00:03:42,822
was deleted and how
quickly the file system

80
00:03:42,822 --> 00:03:46,426
reads and writes data and
the level of activity.

81
00:03:46,426 --> 00:03:48,861
Also, if you're dealing
with a solid state drive,

82
00:03:48,861 --> 00:03:51,497
that is a lot more challenging
because the evidence

83
00:03:51,497 --> 00:03:53,933
won't be left behind,
so it makes me sad,

84
00:03:53,933 --> 00:03:56,269
but it's the
reality of the game.

85
00:03:56,269 --> 00:03:59,806
So if the file can't be
recovered, all hope is not lost.

86
00:04:00,907 --> 00:04:03,876
We can look at artifacts
of file creation.

87
00:04:03,876 --> 00:04:05,912
There's a lot of these,
but we'll go over

88
00:04:05,912 --> 00:04:07,380
some of the basics.

89
00:04:07,380 --> 00:04:11,284
MFT, Jared Atkinson talked
about this yesterday,

90
00:04:11,284 --> 00:04:12,518
if you were at his talk.

91
00:04:12,518 --> 00:04:14,420
There's a lot more
details to the MFT,

92
00:04:14,420 --> 00:04:17,390
but I wanted to make it look
like a cool light saber,

93
00:04:17,390 --> 00:04:20,125
so these are the details
you get right there.

94
00:04:20,125 --> 00:04:23,662
But so there's
standard information,

95
00:04:23,663 --> 00:04:25,665
that's what you see
in the Window's GUI,

96
00:04:26,532 --> 00:04:29,234
you know, dates, file times.

97
00:04:29,235 --> 00:04:31,404
There's also file
name attributes

98
00:04:31,404 --> 00:04:33,706
and the corresponding data,
and then there's a lot

99
00:04:33,706 --> 00:04:37,377
of cool stuff like USN
numbers, which I'll talk about.

100
00:04:38,544 --> 00:04:40,746
But if the file is
under 700 bytes,

101
00:04:40,747 --> 00:04:43,049
then the file data
could be retained

102
00:04:43,049 --> 00:04:44,751
in the original MFT record.

103
00:04:44,751 --> 00:04:48,121
It's very nice if you have a
attacker configuration file

104
00:04:48,121 --> 00:04:51,323
or a small output file,
so sometimes if the file

105
00:04:51,324 --> 00:04:54,060
is deleted by the
attacker and the MFT entry

106
00:04:54,060 --> 00:04:56,562
is left behind, we can
pull that data out.

107
00:04:57,830 --> 00:05:00,633
So a little more
in-depth on that,

108
00:05:00,633 --> 00:05:02,234
I had to stick with
the Star Wars theme.

109
00:05:02,235 --> 00:05:05,772
So pretend you had like a
hand, and that hand is cut off,

110
00:05:05,772 --> 00:05:09,342
so if the file is deleted
and then like the hand

111
00:05:09,342 --> 00:05:12,145
gets replaced with a robot
hand, then you're kinda like

112
00:05:12,145 --> 00:05:15,114
hosed because the robot
hand overwrote that data.

113
00:05:15,114 --> 00:05:17,450
But if there's no robot
hand, then you might be able

114
00:05:17,450 --> 00:05:20,053
to recover the data
from the MFT record.

115
00:05:20,053 --> 00:05:22,155
It's a stretch, I know,
(audience laughing)

116
00:05:22,155 --> 00:05:25,224
but you'll remember
this, though.

117
00:05:25,224 --> 00:05:28,628
How many people use
EnCase in the room?

118
00:05:28,628 --> 00:05:30,395
I won't judge you, don't worry.

119
00:05:30,396 --> 00:05:32,365
I use EnCase, I love EnCase!

120
00:05:32,365 --> 00:05:35,702
So if you ever look in
the Lost Files directory,

121
00:05:35,702 --> 00:05:37,170
there's like the tree structure,

122
00:05:37,170 --> 00:05:40,239
Lost Files at the bottom,
EnCase pulls that information

123
00:05:40,239 --> 00:05:43,508
from the MFT, the
inactive records.

124
00:05:45,378 --> 00:05:46,846
Okay?
- Yeah.

125
00:05:46,846 --> 00:05:50,350
So not only does every file
have its own MFT record

126
00:05:50,350 --> 00:05:52,685
with standard info and
file name attributes

127
00:05:52,685 --> 00:05:54,887
of what's going on in
there, every directory says,

128
00:05:54,887 --> 00:05:57,590
hey, I need a list of
what's in my directory,

129
00:05:57,590 --> 00:06:00,727
all the files in there, so it
has this really cool concept.

130
00:06:00,727 --> 00:06:03,462
You might have seen a $I30 file

131
00:06:03,463 --> 00:06:07,533
if you're using an AccessData
product or an index record

132
00:06:07,533 --> 00:06:10,670
that we'll look at here,
but it's basically a list

133
00:06:10,670 --> 00:06:12,872
of everything that's in the
folder or in the directory

134
00:06:12,872 --> 00:06:14,974
with the file name,
the timestamps.

135
00:06:14,974 --> 00:06:16,976
And you may have
used Willi's tool,

136
00:06:16,976 --> 00:06:21,013
INDXParse.py or .python
to parse this information

137
00:06:21,013 --> 00:06:22,948
from a non-resident
index record.

138
00:06:22,949 --> 00:06:25,818
Just like how files can
be resident in the MFT,

139
00:06:25,818 --> 00:06:27,019
so can these big lists.

140
00:06:27,019 --> 00:06:28,488
If they're small enough,
they'll be resident.

141
00:06:28,488 --> 00:06:30,690
If they're too big,
they'll be non-resident

142
00:06:30,690 --> 00:06:32,658
somewhere on the disk,
and you can talk to Jared

143
00:06:32,658 --> 00:06:35,795
about finding runs and
all kinds of good stuff.

144
00:06:35,795 --> 00:06:38,831
But we'll take a look at, this
is an example on the screen

145
00:06:38,831 --> 00:06:41,801
of a non-resident index
record looks like.

146
00:06:43,436 --> 00:06:45,905
And you got your
hotline bling, swag,

147
00:06:45,905 --> 00:06:48,607
so it's pretty exciting when
you can parse this stuff.

148
00:06:50,476 --> 00:06:51,844
I know you guys
are really excited

149
00:06:51,844 --> 00:06:53,079
you brought your binoculars.

150
00:06:53,079 --> 00:06:55,848
This is what an MFT
record looks like.

151
00:06:55,848 --> 00:06:58,151
You'll see at the top
your file zero header,

152
00:06:58,151 --> 00:07:00,653
and then you'll see a standard
information attribute,

153
00:07:00,653 --> 00:07:03,856
two file name attributes, one's
actually a short file name.

154
00:07:03,856 --> 00:07:07,058
You'll see the 0x90
attribute which is, I think,

155
00:07:07,059 --> 00:07:09,429
index root attribute,
and that would be

156
00:07:09,429 --> 00:07:12,532
where your resident list
of files is contained.

157
00:07:12,532 --> 00:07:13,966
In this scenario,
though, it's too big,

158
00:07:13,966 --> 00:07:16,169
so we have an A0
and a B0 attribute.

159
00:07:16,169 --> 00:07:20,039
The A0 says, hey, go look at
this non-resident section.

160
00:07:20,039 --> 00:07:23,109
But if we look down at the
bottom, we see all those Fs.

161
00:07:23,109 --> 00:07:27,046
So this is the F and
end of our MFT record,

162
00:07:27,046 --> 00:07:29,282
but there's a lot of stuff
goin' on under there.

163
00:07:29,282 --> 00:07:31,284
So let's take a closer look.

164
00:07:31,284 --> 00:07:34,554
If we look, we can see these
files names or whatever,

165
00:07:34,554 --> 00:07:36,556
Cannons and Shield,
pretty interesting.

166
00:07:36,556 --> 00:07:40,760
Has anybody ever had a
keyword search hit in the MFT,

167
00:07:40,760 --> 00:07:42,562
and you just say, yeah, I'll
just use the most cool MFT

168
00:07:42,562 --> 00:07:44,997
parser I've ever seen,
and it'll pull out that

169
00:07:44,997 --> 00:07:47,400
information from that
file, and you got nothing?

170
00:07:48,534 --> 00:07:49,769
That's how I found this first.

171
00:07:49,769 --> 00:07:51,537
I had a keyword search
hit, it as my first week

172
00:07:51,537 --> 00:07:54,707
on the job at FireEye, I
was onsite, super excited,

173
00:07:54,707 --> 00:07:57,477
found this malware, just
parsed the MFT, nothing,

174
00:07:57,477 --> 00:07:59,912
really sad, really embarrassed,
I didn't know what to do.

175
00:07:59,912 --> 00:08:02,414
So I started doing some
research, and I found out

176
00:08:02,415 --> 00:08:06,452
that if you look, you can
kinda see these 32 bytes

177
00:08:06,452 --> 00:08:08,855
of data there that may
stand out to some of you

178
00:08:08,855 --> 00:08:11,390
who've looked at an MFT
in Hex before, may not,

179
00:08:11,390 --> 00:08:13,058
but those are gonna
be timestamps.

180
00:08:13,059 --> 00:08:15,595
So I found out that what
happened in this scenario

181
00:08:15,595 --> 00:08:18,264
is the index record
that lists the files

182
00:08:18,264 --> 00:08:20,700
was resident at
one point in time,

183
00:08:20,700 --> 00:08:23,803
and it filled up this
space, and then that list

184
00:08:23,803 --> 00:08:26,439
grew so big it had to
be move out to the disk,

185
00:08:26,439 --> 00:08:28,574
so it's now non-resident,
but that slack space

186
00:08:28,574 --> 00:08:31,444
never got overwritten, so we
can carve this information out.

187
00:08:31,444 --> 00:08:33,279
And at the top, you can
see that we were able

188
00:08:33,279 --> 00:08:35,581
to recover the timestamps
for SHIELD.EXE,

189
00:08:36,782 --> 00:08:39,085
some flags, the file
sizes, and the name.

190
00:08:39,085 --> 00:08:42,255
For Cannons, we didn't know,
there were no timestamps left,

191
00:08:42,255 --> 00:08:44,724
they got overwritten, but we
can know that there was likely

192
00:08:44,724 --> 00:08:47,994
a filed or directory
named Cannons in this
parent directory.

193
00:08:47,994 --> 00:08:49,395
So that's pretty cool.

194
00:08:50,830 --> 00:08:52,665
Very exciting, always a win.

195
00:08:54,700 --> 00:08:57,003
- All right, so I'm
gonna talk about Journal,

196
00:08:57,003 --> 00:08:58,104
is Dave Cowen here?

197
00:08:58,104 --> 00:08:59,472
Don't judge me if you are.

198
00:09:00,673 --> 00:09:02,475
Crap, all right, I was
hoping he didn't come,

199
00:09:02,475 --> 00:09:06,445
but so, Dave Cowen, sorry.
(audience laughing)

200
00:09:06,445 --> 00:09:08,948
I apologize, you can talk
to me and yell at me later,

201
00:09:08,948 --> 00:09:12,785
but the Journal just, it was
created for stability purposes,

202
00:09:12,785 --> 00:09:15,254
and there's a lot of
really interesting

203
00:09:15,254 --> 00:09:16,722
information in the Journal.

204
00:09:16,722 --> 00:09:19,492
How many people have parsed the
Journal before, USN Journal?

205
00:09:19,492 --> 00:09:20,926
A few of you.

206
00:09:20,927 --> 00:09:24,764
I mean, it's not, it's
newish, but a lot times

207
00:09:24,764 --> 00:09:27,567
we stick with our
old ways of analysis,

208
00:09:27,567 --> 00:09:29,001
but the Journal is awesome.

209
00:09:29,001 --> 00:09:31,337
You can pull out all
kinds of good information,

210
00:09:31,337 --> 00:09:33,339
especially if
attackers have deleted

211
00:09:33,339 --> 00:09:35,141
evidence of their activity.

212
00:09:35,141 --> 00:09:38,377
There's a lot of reason
flags within the Journal

213
00:09:38,377 --> 00:09:41,479
entries itself, and
shockingly, the reasons

214
00:09:41,480 --> 00:09:43,049
actually match
with what happened.

215
00:09:43,049 --> 00:09:45,084
So FILE_CREATE means
the file was created,

216
00:09:45,084 --> 00:09:47,185
and FILE_DELETED
is file is deleted.

217
00:09:47,186 --> 00:09:49,655
So that's awesome, so
Microsoft is very helpful.

218
00:09:51,090 --> 00:09:53,392
But the Journal is
overwritten fairly often,

219
00:09:53,392 --> 00:09:55,828
so unless it's a
more recent hack,

220
00:09:55,828 --> 00:09:58,664
then it may or may
not be useful to you.

221
00:09:58,664 --> 00:10:00,967
If the records have
been overwritten,

222
00:10:00,967 --> 00:10:03,401
you can carve them out
of unallocated space

223
00:10:03,402 --> 00:10:06,839
or pull information
from Volume Shadow Copy,

224
00:10:08,307 --> 00:10:10,543
but Cory Harrell, I don't
think he's here this year,

225
00:10:10,543 --> 00:10:12,745
but he has a good blog entry.

226
00:10:12,745 --> 00:10:14,947
Dave Cowen's blog
is always great.

227
00:10:14,947 --> 00:10:17,583
And then I've use, for the
next slide, the case study,

228
00:10:17,583 --> 00:10:21,853
I've used Joakim's
UsnJrnl2Csv parser,

229
00:10:21,854 --> 00:10:23,923
which is very helpful.

230
00:10:23,923 --> 00:10:26,626
So in this case, I
parsed the Journal.

231
00:10:26,626 --> 00:10:31,631
It was 400,000 lines, which
really was not fun to analyze,

232
00:10:33,065 --> 00:10:35,801
but it parsed out things
like file name, timestamp,

233
00:10:35,801 --> 00:10:37,703
MFT reference, that's helpful,

234
00:10:37,703 --> 00:10:40,640
and then the corresponding
reason codes.

235
00:10:40,640 --> 00:10:43,175
I just focused in
on file creations,

236
00:10:43,175 --> 00:10:46,277
renames, things like that.

237
00:10:46,278 --> 00:10:48,848
And then conveniently, we
had a Windows Defender log,

238
00:10:48,848 --> 00:10:51,250
which Dave will talk about,
where we had a file name

239
00:10:51,250 --> 00:10:54,787
to go off of, so based
on that search, I found,

240
00:10:54,787 --> 00:10:57,957
oh, there's this hux.exe,
and then timeline analysis,

241
00:10:57,957 --> 00:11:00,226
there's this other
malware called kylo,

242
00:11:00,226 --> 00:11:02,728
and great, I'm good
to go, there this MFT

243
00:11:02,728 --> 00:11:05,263
parent reference number
with corresponding

244
00:11:05,264 --> 00:11:07,199
to the MFT that I
found out, oh, okay,

245
00:11:07,199 --> 00:11:10,069
the file was originally
in C:\Windows.

246
00:11:11,270 --> 00:11:14,807
So I went and did a
filtering on Excel,

247
00:11:14,807 --> 00:11:18,944
my favorite analysis
tool, and Excel showed me

248
00:11:18,944 --> 00:11:21,680
there was even more
data within C:\Windows.

249
00:11:21,681 --> 00:11:23,849
There was these files
which I knew about.

250
00:11:23,849 --> 00:11:26,252
It's kind of cool to see
like all of the activity

251
00:11:26,252 --> 00:11:28,920
that goes on beyond the
scenes, that surprised me.

252
00:11:28,921 --> 00:11:32,358
But there was, I saw this
rename which is kind of weird.

253
00:11:32,358 --> 00:11:34,226
Does anyone know what
that is, AAAA.AAA?

254
00:11:36,395 --> 00:11:37,363
What, any?
- Austin doesn't count.

255
00:11:37,363 --> 00:11:39,131
- Yeah, no Mandiant people.

256
00:11:39,131 --> 00:11:40,766
Anyone else know
(laughs) about it?

257
00:11:42,568 --> 00:11:44,069
No one knows?

258
00:11:44,070 --> 00:11:46,305
All right, well Dave will
talk about it in a little bit.

259
00:11:46,305 --> 00:11:49,175
So hold on, it's exciting.

260
00:11:49,175 --> 00:11:51,676
So but based on
timeline analysis,

261
00:11:51,677 --> 00:11:54,346
I was just focused
on January 30th.

262
00:11:54,346 --> 00:11:56,916
On January 31st, there
was more activity,

263
00:11:56,916 --> 00:11:59,318
and there's this test
directory created,

264
00:11:59,318 --> 00:12:01,721
and then an additional ps.exec.

265
00:12:01,721 --> 00:12:05,524
So just a note on that, just
don't put your blinders on.

266
00:12:05,524 --> 00:12:08,894
If you find something bad,
you know, it's easy to say,

267
00:12:08,894 --> 00:12:10,796
oh, anything that
happened with an hour,

268
00:12:10,796 --> 00:12:12,631
let's focus on that,
but you never know.

269
00:12:12,631 --> 00:12:15,701
The attacker might come back
a day, a week, a month later.

270
00:12:15,701 --> 00:12:18,938
So don't put your blinders
or blast shield down.

271
00:12:18,938 --> 00:12:20,906
Make sure you look
at all the evidence.

272
00:12:22,842 --> 00:12:23,675
Okay?

273
00:12:25,377 --> 00:12:27,613
It's gonna click four
times, I know it's gonna go.

274
00:12:27,613 --> 00:12:29,115
Okay, there you go.
- Awesome.

275
00:12:29,115 --> 00:12:30,916
So for those of you who
may not have been familiar

276
00:12:30,916 --> 00:12:33,853
the AAAA, BBBB, has
anybody used SDelete,

277
00:12:33,853 --> 00:12:35,521
the Sysinternals tool?

278
00:12:36,555 --> 00:12:37,757
A couple?

279
00:12:37,757 --> 00:12:39,157
I don't know if Mark
is in the room--

280
00:12:39,158 --> 00:12:41,293
- I don't think so.
- Or in the building today,

281
00:12:41,293 --> 00:12:43,295
but he's got some
pretty cool tools.

282
00:12:43,295 --> 00:12:45,231
So SDelete is a
Sysinternals tool

283
00:12:45,231 --> 00:12:46,932
very similar to
like Shred on Linux

284
00:12:46,932 --> 00:12:49,235
that allows you
to overwrite data,

285
00:12:49,235 --> 00:12:51,771
and it'll also overwrite
the file name consecutively.

286
00:12:51,771 --> 00:12:54,839
If it's a five-letter file
name, it'll do five A's,

287
00:12:54,840 --> 00:12:56,876
then the three A's
for the extension,

288
00:12:56,876 --> 00:13:00,012
all the way down
B, C, D, E, F to Z.

289
00:13:00,012 --> 00:13:02,714
Every once in a while,
we see, well, we do see

290
00:13:02,715 --> 00:13:05,384
attackers do this an
anti-forensics technique,

291
00:13:05,384 --> 00:13:08,721
and it leaves files that we
parse from index records,

292
00:13:08,721 --> 00:13:10,990
maybe using a tool like
Willi's from the slack space

293
00:13:10,990 --> 00:13:13,692
or finding them in Slack,
or even MFT records

294
00:13:13,692 --> 00:13:17,496
for files named ZZZZZ,
but every once in a while,

295
00:13:17,496 --> 00:13:19,999
you'll see ones
that stop at F or R,

296
00:13:19,999 --> 00:13:21,500
so that's kind of interesting.

297
00:13:21,500 --> 00:13:24,003
The file contents, unless
you can find a fragment

298
00:13:24,003 --> 00:13:27,907
from a previous time or go
back on the shadow copies,

299
00:13:27,907 --> 00:13:30,843
probably are unrecoverable,
they'd been wiped pretty well.

300
00:13:30,843 --> 00:13:32,911
So it's, you know, ah,
Dave, this is terrible!

301
00:13:32,912 --> 00:13:34,513
Attackers are always
gonna use SDelete,

302
00:13:34,513 --> 00:13:36,282
you're never gonna be able
to find out what happens,

303
00:13:36,282 --> 00:13:37,817
that's the end of the world.

304
00:13:37,817 --> 00:13:40,820
Don't fear, there are a couple
artifacts we can look for.

305
00:13:40,820 --> 00:13:43,222
Similar to clearing event
logs, when you run SDelete,

306
00:13:43,222 --> 00:13:45,290
it kinda leaves its
own artifact behind.

307
00:13:45,291 --> 00:13:47,259
In the registry, you
have to accept a Eula

308
00:13:47,259 --> 00:13:49,061
whenever you run a
Sysinternals tool,

309
00:13:49,061 --> 00:13:52,198
same thing with ps.exec
and all the other ones.

310
00:13:52,198 --> 00:13:55,201
That will create a nice
registry in the user hive

311
00:13:55,201 --> 00:13:57,403
of the user who ran
SDelete, so you'll be able

312
00:13:57,403 --> 00:14:00,306
to tie it to a specific user
which is always helpful.

313
00:14:00,306 --> 00:14:02,508
And you can also look
at your USN Journal,

314
00:14:02,508 --> 00:14:03,876
like Mary just showed
us the example.

315
00:14:03,876 --> 00:14:05,578
You can look at your
parsed MFT records,

316
00:14:05,578 --> 00:14:07,478
you can look at your
parsed index records,

317
00:14:07,479 --> 00:14:08,948
everything that we're
gonna talk about today

318
00:14:08,948 --> 00:14:12,785
you can look for for
those AAAAA, BBBBB, ZZZZZ.

319
00:14:12,785 --> 00:14:15,353
And this is neat regex that
I didn't create by myself.

320
00:14:15,354 --> 00:14:17,022
I tried to create,
then I got some help

321
00:14:17,022 --> 00:14:18,757
from Ian Ahl and Jay Taylor.

322
00:14:18,757 --> 00:14:20,693
There's like look-backs or
something crazy in there,

323
00:14:20,693 --> 00:14:22,795
but that should
find three letters

324
00:14:22,795 --> 00:14:24,896
propended by three
of the same letters.

325
00:14:24,897 --> 00:14:25,865
I'm not sure which
direction you guys

326
00:14:25,865 --> 00:14:28,467
can see my pointing in.

327
00:14:28,467 --> 00:14:30,269
So not all fear is lost.

328
00:14:30,269 --> 00:14:33,372
You can try and find some
hope in that example.

329
00:14:33,372 --> 00:14:34,607
- Yeah, and it's important.

330
00:14:34,607 --> 00:14:35,875
At first I thought,
well, let's just look

331
00:14:35,875 --> 00:14:38,711
for ZZZ.ZZZ and
then call it a day,

332
00:14:38,711 --> 00:14:41,647
but for some reason, the
tool doesn't always end on Z.

333
00:14:41,647 --> 00:14:43,048
Sometimes it's still B.
- If anybody know why,

334
00:14:43,048 --> 00:14:44,617
find us afterwords.
- Yeah, we have no idea why.

335
00:14:44,617 --> 00:14:47,719
But sometimes it ends
on W or X or whatever.

336
00:14:47,720 --> 00:14:51,123
So the log file, it's
similar to USN Journal

337
00:14:51,123 --> 00:14:55,561
where there's, it tracks
things that happen on a file.

338
00:14:55,561 --> 00:14:57,029
It contains a lot more detail,

339
00:14:57,029 --> 00:15:00,499
like changes to file attributes
and things that the Journal

340
00:15:00,499 --> 00:15:04,003
doesn't track, but there's
only 32,000 records,

341
00:15:04,003 --> 00:15:07,006
so there's not as much
history as the Journal is.

342
00:15:07,006 --> 00:15:10,376
So when you're doing analysis,
look at both artifacts.

343
00:15:10,376 --> 00:15:12,578
You might find
something in one file

344
00:15:12,578 --> 00:15:14,680
but maybe not in the other one.

345
00:15:14,680 --> 00:15:16,247
It doesn't track
specific changes,

346
00:15:16,248 --> 00:15:19,451
but if there's like a date
change or something else,

347
00:15:19,451 --> 00:15:22,621
then you might see that in
the corresponding log file.

348
00:15:22,621 --> 00:15:24,590
And you can relate
it back to the MFT,

349
00:15:24,590 --> 00:15:26,926
so the log file
can be linked back

350
00:15:26,926 --> 00:15:30,629
to a specific file
name or directory.

351
00:15:30,629 --> 00:15:33,799
In this case, we found,
there was a BAR file,

352
00:15:33,799 --> 00:15:35,300
and then the attacker renamed it

353
00:15:35,301 --> 00:15:37,903
to a text file and deleted
it, and all of this activity

354
00:15:37,903 --> 00:15:41,540
was recorded in Logfile
conveniently for us.

355
00:15:43,008 --> 00:15:45,945
So all right, we talked bout
artifacts of file creation.

356
00:15:45,945 --> 00:15:48,180
Next, we'll do file access.

357
00:15:48,180 --> 00:15:50,114
- Awesome, so a lot
of these artifacts

358
00:15:50,115 --> 00:15:52,051
may or may not have
been seen before.

359
00:15:52,051 --> 00:15:56,055
One of my favorite ones
that's been real useful lately

360
00:15:56,055 --> 00:15:58,390
is known as
CCM_RecentlyUsedApps.

361
00:15:58,390 --> 00:16:00,259
If you've turned on a
computer in the past year,

362
00:16:00,259 --> 00:16:04,296
you may have heard about this
new hot topic called WMI,

363
00:16:04,296 --> 00:16:08,167
all over Black Hat last
year, super popular,

364
00:16:08,167 --> 00:16:11,370
lots of awesome things
you can do with it,

365
00:16:11,370 --> 00:16:13,572
but something that
we've seen for a while

366
00:16:13,572 --> 00:16:16,775
are keyword search hits
in this file OBJECTS.DATA.

367
00:16:16,775 --> 00:16:18,843
OBJECTS.DATA is part
of the repository

368
00:16:18,844 --> 00:16:21,847
for all of the WMI stuff
that goes on in a system,

369
00:16:21,847 --> 00:16:23,882
and we see, oh, like
here's the file name

370
00:16:23,882 --> 00:16:25,684
in this repository
that's kinda surrounded

371
00:16:25,684 --> 00:16:28,286
by all this random gobbledygook,
what's going on here,

372
00:16:28,287 --> 00:16:29,722
what can we do with it.

373
00:16:29,722 --> 00:16:31,957
Turns out that one
of these artifacts

374
00:16:31,957 --> 00:16:34,193
is known as
CCM_RecentlyUsedApps.

375
00:16:34,193 --> 00:16:38,230
It is part of the SCCM
sysadmin server setup

376
00:16:38,230 --> 00:16:41,233
that usually takes
place in an enterprise.

377
00:16:41,233 --> 00:16:43,968
So if you're doing this
as a law enforcement basis

378
00:16:43,969 --> 00:16:46,605
on a one-off computer, you
may not have this artifact.

379
00:16:46,605 --> 00:16:48,874
And if SCCM is being
utilized, you'll also need

380
00:16:48,874 --> 00:16:50,342
software metering to be enabled.

381
00:16:50,342 --> 00:16:52,711
Software metering is a
tool for sysadmins to say,

382
00:16:52,711 --> 00:16:55,114
yeah, you know, this
application gets used a lot,

383
00:16:55,114 --> 00:16:56,849
maybe we should
renew the license,

384
00:16:56,849 --> 00:16:59,018
or no one ever uses
this, it's not so cool.

385
00:16:59,018 --> 00:17:01,153
But either way, it creates
an awesome forensic artifact

386
00:17:01,153 --> 00:17:03,188
for us in this
OBJECTS.DATA file.

387
00:17:04,356 --> 00:17:05,790
Again, it's probably
only enterprise only.

388
00:17:05,790 --> 00:17:08,394
You may have stumbled across
this as a keyword hit.

389
00:17:08,394 --> 00:17:11,063
So we'll talk about keyword
hits in a little bit,

390
00:17:11,063 --> 00:17:13,098
but right now, I've seen
two known structures.

391
00:17:13,098 --> 00:17:15,901
One of them I don't have
pictured is an XML base

392
00:17:15,901 --> 00:17:18,404
with nice tags that's
easy to read, very cool.

393
00:17:18,404 --> 00:17:20,973
The other one is just
delimited by two null bytes

394
00:17:20,973 --> 00:17:23,108
as you'll see on
the screen there.

395
00:17:23,108 --> 00:17:26,310
But let's talk about what
you see in this artifact

396
00:17:26,310 --> 00:17:28,614
when you can pull
it out and read it.

397
00:17:28,614 --> 00:17:31,917
You'll see stuff like the
file name, the file path.

398
00:17:31,917 --> 00:17:34,786
You also see some really cool
stuff like last used time,

399
00:17:34,787 --> 00:17:39,191
which I believe is when the
file completed executing last.

400
00:17:39,191 --> 00:17:42,394
You'll see an associated
user name, super cool.

401
00:17:42,394 --> 00:17:43,796
If you know how to
parse it properly,

402
00:17:43,796 --> 00:17:46,432
you'll get a launch
count, very awesome.

403
00:17:46,432 --> 00:17:47,499
Kinda like Prefetch,
it'll tell you

404
00:17:47,499 --> 00:17:49,168
how many times it has run.

405
00:17:50,502 --> 00:17:51,770
And you'll get this
other information

406
00:17:51,770 --> 00:17:53,305
I'll take a look at such
as the file description,

407
00:17:53,305 --> 00:17:55,808
file version, the company name.

408
00:17:55,808 --> 00:17:58,077
Those are gonna be
found in your PE header,

409
00:17:58,077 --> 00:18:00,679
so in the metadata
header of the executable.

410
00:18:00,679 --> 00:18:04,450
Super, super valuable, we'll
show you why in a second.

411
00:18:04,450 --> 00:18:07,786
But you'll find it here
in the WMI repository.

412
00:18:07,786 --> 00:18:09,588
That's obviously that
data file on the screen.

413
00:18:09,588 --> 00:18:12,224
And there's also this Inventory
Store file that we've seen

414
00:18:12,224 --> 00:18:15,860
on Windows Vista or Windows
7 and plus on some systems.

415
00:18:15,861 --> 00:18:17,362
It has this artifact.

416
00:18:17,362 --> 00:18:20,699
If anybody knows what the
heck InventoryStore.sdf is,

417
00:18:20,699 --> 00:18:24,169
I wanna know, come find me,
but it's a compact SQL database

418
00:18:24,169 --> 00:18:25,737
that you can open
up in SQL server,

419
00:18:25,737 --> 00:18:28,807
extract the clear text out,
and then look for these

420
00:18:28,807 --> 00:18:31,176
keyword structures.

421
00:18:31,176 --> 00:18:33,544
It's awesome, really cool.

422
00:18:33,545 --> 00:18:36,582
This is what it looks like
after you're able to parse it.

423
00:18:36,582 --> 00:18:38,484
So what stands out here?

424
00:18:38,484 --> 00:18:41,186
Obviously the yellow
highlights stand out.

425
00:18:41,186 --> 00:18:44,923
The parser doesn't do
that, but what stands out

426
00:18:44,923 --> 00:18:47,659
is the lack of information
for the attacker files.

427
00:18:47,659 --> 00:18:49,695
You'll see Adobe and
Citrix all have all those

428
00:18:49,695 --> 00:18:52,998
metadata fields filled
out, super easy to see,

429
00:18:52,998 --> 00:18:54,733
and you can kind
of validate that.

430
00:18:54,733 --> 00:18:56,400
But when you start looking
at the fields that don't

431
00:18:56,401 --> 00:18:57,903
have the information filled out,

432
00:18:57,903 --> 00:18:59,605
I guess attackers don't
care, they don't wanna put

433
00:18:59,605 --> 00:19:01,039
their company name in
there, they don't wanna put

434
00:19:01,039 --> 00:19:02,608
their malware version in there.

435
00:19:02,608 --> 00:19:05,677
I don't know, maybe they don't
have a nice release cadence

436
00:19:05,677 --> 00:19:07,678
where they wanna
have Read Me notes.

437
00:19:07,679 --> 00:19:09,681
But either way,
awesome artifact for us

438
00:19:09,681 --> 00:19:12,918
using kind of a
anomaly detection,

439
00:19:12,918 --> 00:19:14,218
let's just called
it machine learning,

440
00:19:14,219 --> 00:19:16,788
using our brains, and
make it really cool.

441
00:19:16,788 --> 00:19:18,190
But that stands out.

442
00:19:18,190 --> 00:19:19,258
You can find it's
interesting, and then you

443
00:19:19,258 --> 00:19:20,859
can search for known file names.

444
00:19:20,859 --> 00:19:24,196
There's the file path, you
can your timeline skills

445
00:19:24,196 --> 00:19:26,532
with the timestamps, you
can use a user account

446
00:19:26,532 --> 00:19:29,635
that you know is bad, all
kinds of awesome stuff.

447
00:19:29,635 --> 00:19:32,371
So Dave, how do we get this
really cool information now?

448
00:19:32,371 --> 00:19:33,572
You're telling us
that it's in there,

449
00:19:33,572 --> 00:19:35,206
it's this weird structure.

450
00:19:35,207 --> 00:19:39,778
Right now, you can use the
FLARE Team's python sim setup

451
00:19:39,778 --> 00:19:42,347
which you can install on a
Linux system pretty easily,

452
00:19:42,347 --> 00:19:45,517
and you can run this sample
script that I kinda created.

453
00:19:45,517 --> 00:19:47,219
Please note that that
will only pull out

454
00:19:47,219 --> 00:19:50,689
allocated records that
are actively being used

455
00:19:50,689 --> 00:19:52,157
in the WMI repository.

456
00:19:53,292 --> 00:19:54,426
It turns out that there
are a lot of records

457
00:19:54,426 --> 00:19:55,860
that are not allocated anymore

458
00:19:55,861 --> 00:19:58,397
and that python sim cannot see,

459
00:19:58,397 --> 00:20:00,432
so you have to kind
of carve them out.

460
00:20:00,432 --> 00:20:04,036
I have a carver written,
I'm just waiting on somebody

461
00:20:04,036 --> 00:20:06,538
to tell me my python
code is PEP-8 enough

462
00:20:06,538 --> 00:20:08,307
to put in on like
the Mandiant blog.

463
00:20:08,307 --> 00:20:10,676
So keep an eye out
for that, it's coming.

464
00:20:10,676 --> 00:20:12,444
You'll just run it on
a OBJECTS.DATA file.

465
00:20:12,444 --> 00:20:14,178
It'll carve it out, pull
out all the information

466
00:20:14,179 --> 00:20:17,049
you've seen before, and
hopefully be useful.

467
00:20:17,049 --> 00:20:18,517
So keep an eye out for that.

468
00:20:23,388 --> 00:20:26,324
All right, another cool
one that I know less about,

469
00:20:26,325 --> 00:20:28,927
but I've seen this in the
OBJECTS.DATA and Inventory Store

470
00:20:28,927 --> 00:20:31,196
files as well, is
FileSystemFile,

471
00:20:31,196 --> 00:20:33,497
just another way that
I think in this time

472
00:20:33,498 --> 00:20:35,901
it's WMI actually
keeping track of files

473
00:20:35,901 --> 00:20:38,270
that are present on the
system at some point in time.

474
00:20:38,270 --> 00:20:41,039
No evidence to indicate
that these files executed.

475
00:20:41,039 --> 00:20:42,874
They were just on the
system, got recorded.

476
00:20:42,874 --> 00:20:46,178
I've never actually found
malware in this data structure,

477
00:20:46,178 --> 00:20:48,814
which is interesting, and I
have found lots of malware

478
00:20:48,814 --> 00:20:50,515
in the CCM_RecentlyUsedApps.

479
00:20:50,515 --> 00:20:52,985
But similarly, you can
get some good information

480
00:20:52,985 --> 00:20:56,120
such as company name, the
PE metadata which might help

481
00:20:56,121 --> 00:20:59,091
stuff stand out, language,
path size, and they're found

482
00:20:59,091 --> 00:21:01,627
in the same exact
locations that I've seen

483
00:21:03,795 --> 00:21:07,399
as the OBJECTS.DATA and
Inventory Store files.

484
00:21:07,399 --> 00:21:09,868
Also, they have an XML structure
that I've seen in the past

485
00:21:09,868 --> 00:21:12,838
and a null byte version
that I've seen as well.

486
00:21:12,838 --> 00:21:13,872
So they're out there.

487
00:21:13,872 --> 00:21:15,474
If you get a keyword search hit,

488
00:21:16,642 --> 00:21:18,176
you may wanna just
track this down

489
00:21:18,176 --> 00:21:20,745
or contact someone and say,
hey, what was that weird guy

490
00:21:20,746 --> 00:21:22,714
who did that talk about
that thing that one time,

491
00:21:22,714 --> 00:21:23,915
and try and get some
more information

492
00:21:23,915 --> 00:21:25,350
about what you're looking at.

493
00:21:27,819 --> 00:21:32,291
This is a case study based
on an APT29, a big-daddy

494
00:21:32,291 --> 00:21:35,761
APT29 you may have heard
of, and Windows Defender.

495
00:21:35,761 --> 00:21:39,697
Turns out Windows Defender
is so good at recording

496
00:21:39,698 --> 00:21:43,902
that APT29 is on your system,
so bad at stopping them.

497
00:21:43,902 --> 00:21:46,271
It's like, hey, I see
your APT29 malware,

498
00:21:46,271 --> 00:21:48,607
nice, I'm gonna let you go.
(audience laughing)

499
00:21:48,607 --> 00:21:51,009
That's, it was amazing,
it was amazing.

500
00:21:51,009 --> 00:21:53,178
And I'll show you screenshots,
but it was super awesome

501
00:21:53,178 --> 00:21:56,281
at recording that files
were present on the system.

502
00:21:56,281 --> 00:21:58,116
You may find Windows
Defender logs

503
00:21:58,116 --> 00:22:02,487
at that path there,
MPLog date .log.

504
00:22:02,487 --> 00:22:05,324
And does anybody here know
what Microsoft antimalware is?

505
00:22:06,525 --> 00:22:08,660
I'm gonna find Troy, so
I need to ask somebody.

506
00:22:08,660 --> 00:22:11,029
I think it's just
Azure's implementation,

507
00:22:11,029 --> 00:22:12,497
but I'm not sure,
so if anybody has

508
00:22:12,497 --> 00:22:14,533
a clear example, let me know.

509
00:22:14,533 --> 00:22:15,833
But it has the
same kind of stuff.

510
00:22:15,834 --> 00:22:17,235
It says, oh, we found this file

511
00:22:17,235 --> 00:22:19,437
in the system, we scanned it.

512
00:22:19,438 --> 00:22:22,808
Jar Jar, "Squeeze me," he's
really excited to be there.

513
00:22:22,808 --> 00:22:24,076
But you'll get a keyword hit.

514
00:22:24,076 --> 00:22:25,577
This is how I found
this log, actually,

515
00:22:25,577 --> 00:22:29,915
with a keyword hit for this
attacker file named 5442.exe.

516
00:22:31,083 --> 00:22:32,517
Some of you may have
seen this malware.

517
00:22:32,517 --> 00:22:35,787
It was a super active
phishing campaign last year

518
00:22:35,787 --> 00:22:39,257
that they were sending
out this executable file.

519
00:22:39,257 --> 00:22:41,927
Awesome, had a timestamp
of when the scan started,

520
00:22:41,927 --> 00:22:43,829
so now I know at
that time this file

521
00:22:43,829 --> 00:22:45,263
was present on the system.

522
00:22:45,263 --> 00:22:48,567
I don't know if it executed,
I don't know if it was

523
00:22:48,567 --> 00:22:51,103
being interacted with, I
don't know if Windows Defender

524
00:22:51,103 --> 00:22:52,604
was just scanning it for fun

525
00:22:52,604 --> 00:22:55,574
or because it wanted to
take a nice inventory access

526
00:22:55,574 --> 00:22:57,676
of all the files on the system.

527
00:22:57,676 --> 00:23:00,078
But this is how I
felt after I saw that.

528
00:23:00,078 --> 00:23:02,013
It was like, if I
had two extra hands,

529
00:23:02,013 --> 00:23:04,216
I would do it, but I don't.

530
00:23:04,216 --> 00:23:08,320
So I said, okay, I have
this giant text file log.

531
00:23:08,320 --> 00:23:10,789
I'll just scroll
up and scroll down.

532
00:23:10,789 --> 00:23:13,091
Oh, my gosh, so many
more attacker tools

533
00:23:13,091 --> 00:23:15,394
that I didn't now about
before, now I've seen them,

534
00:23:15,394 --> 00:23:18,296
Windows Defender,
you're so average.

535
00:23:18,296 --> 00:23:19,765
You would be great if you
would've stopped them,

536
00:23:19,765 --> 00:23:22,033
but because you didn't,
you're just average.

537
00:23:22,033 --> 00:23:23,334
So we can see all
these other files

538
00:23:23,335 --> 00:23:25,804
in the same directory
with timestamps.

539
00:23:25,804 --> 00:23:28,573
Really, really
cool, Chrome PWGrab,

540
00:23:28,573 --> 00:23:31,610
SDelete, you guys may
have heard of that, too.

541
00:23:31,610 --> 00:23:34,044
Really cool stuff, and
this was a great way

542
00:23:34,045 --> 00:23:37,015
to find these artifacts.

543
00:23:37,015 --> 00:23:38,483
That's how I felt afterwards.

544
00:23:38,483 --> 00:23:41,520
I was like, yeah, guys,
thank you, Windows Defender.

545
00:23:41,520 --> 00:23:43,522
And the client was super
happy that we found

546
00:23:43,522 --> 00:23:46,390
some more activity.
- He's so dreamy. (laughs)

547
00:23:46,391 --> 00:23:48,026
- Yeah, Mary's kind
of in love with Han.

548
00:23:48,026 --> 00:23:50,529
- [Mary] I love
Han Solo. (laughs)

549
00:23:50,529 --> 00:23:52,464
- But so what we did
was we built a custom,

550
00:23:52,464 --> 00:23:54,232
you know, there's big, a lot
of talk about automation.

551
00:23:54,232 --> 00:23:55,966
So it's like, I kinda
like to do python,

552
00:23:55,967 --> 00:23:58,136
just rip the timestamps
and the paths out,

553
00:23:58,136 --> 00:24:00,539
and it was super easy
to see that at this time

554
00:24:00,539 --> 00:24:03,275
the file was present on
the system during a scan,

555
00:24:03,275 --> 00:24:04,476
and I got these file paths.

556
00:24:04,476 --> 00:24:06,011
There were a lot of
records in-between there

557
00:24:06,011 --> 00:24:09,214
that I kind of filtered out,
but we were able to identify

558
00:24:09,214 --> 00:24:11,316
very suspicious files that
we didn't know about before

559
00:24:11,316 --> 00:24:12,818
because they were no
longer on the system,

560
00:24:12,818 --> 00:24:14,686
and other artifacts
hadn't recorded them.

561
00:24:14,686 --> 00:24:16,822
So Mary mentioned earlier
about antivirus logs,

562
00:24:16,822 --> 00:24:18,255
whether it's Windows Defender.

563
00:24:18,256 --> 00:24:20,759
I've seen like
Symantec say, oh, hey,

564
00:24:20,759 --> 00:24:22,761
I have this ransomware
file that's overwriting

565
00:24:22,761 --> 00:24:27,032
the Symantec program files,
I'm not gonna stop it, though.

566
00:24:27,032 --> 00:24:29,301
I'm like, why would
you not stop that?

567
00:24:29,301 --> 00:24:33,138
But awesome ways, check
your AB logs for anything.

568
00:24:33,138 --> 00:24:35,439
- Yeah, McAfee, too, is
famous for, hey, I see

569
00:24:35,440 --> 00:24:38,210
this bad thing happening, but
I'm not gonna do anything.

570
00:24:38,210 --> 00:24:39,678
- So nice of them to
let us know, though.

571
00:24:39,678 --> 00:24:41,313
- Yeah, it's very
nice, very helpful.

572
00:24:41,313 --> 00:24:42,681
- [Dave] It gives us work.

573
00:24:42,681 --> 00:24:44,983
- All right, so next
is AppCompatCache.

574
00:24:44,983 --> 00:24:48,587
I had a whole talk on
this in SANS DFIR 2013,

575
00:24:48,587 --> 00:24:50,989
so look it up if you
want more details,

576
00:24:50,989 --> 00:24:55,026
best conference ever, but
it really is like ShimCache.

577
00:24:55,026 --> 00:24:57,329
We use it, every host
we analyze at Mandiant,

578
00:24:57,329 --> 00:25:00,632
we always look at the
AppCompatCache or ShimCache.

579
00:25:00,632 --> 00:25:02,868
It records all kinds
of good information

580
00:25:02,868 --> 00:25:05,736
like last modified time,
last execution time,

581
00:25:05,737 --> 00:25:07,172
recorded in these keys.

582
00:25:07,172 --> 00:25:09,207
The way it words is when
the file is executed

583
00:25:09,207 --> 00:25:11,943
or created in Vista
Plus!, that file metadata

584
00:25:11,943 --> 00:25:14,713
is put into like a data
structure in memory,

585
00:25:14,713 --> 00:25:17,282
and then when the system is
shut down, that data structure

586
00:25:17,282 --> 00:25:20,318
is written into the
system registry hive.

587
00:25:20,318 --> 00:25:21,987
So some tools you
can use to parse

588
00:25:21,987 --> 00:25:23,822
that out is ShimCache Parser.

589
00:25:23,822 --> 00:25:27,292
If you're on a server or you're
looking at something live

590
00:25:27,292 --> 00:25:30,262
that an attacker is on but the
system hasn't been shut down,

591
00:25:30,262 --> 00:25:31,963
you can use the
Volatility plugin

592
00:25:31,963 --> 00:25:35,300
to pull out that ShimCache
information from memory.

593
00:25:35,300 --> 00:25:37,802
For an example, we
knew Anakin Nediacs,

594
00:25:37,802 --> 00:25:40,304
he was on the system, we
had no idea what happened,

595
00:25:40,305 --> 00:25:42,173
how it got on there,
and then using,

596
00:25:42,173 --> 00:25:46,411
parsing ShimCache, we saw Obiwan
was responsible for Anakin.

597
00:25:46,411 --> 00:25:48,480
- It's also recently proven
that if you submit a bug

598
00:25:48,480 --> 00:25:50,715
for ShimCache, parser.pythonn
will have it fixed

599
00:25:50,715 --> 00:25:51,750
in like 20 minutes, so, just a--

600
00:25:51,750 --> 00:25:52,884
- Yeah, that's true.

601
00:25:54,052 --> 00:25:56,487
So Windows Prefetch, I
debated putting this in.

602
00:25:56,488 --> 00:25:59,391
It's an oldie but goodie.

603
00:25:59,391 --> 00:26:02,894
It records the last
128 files executed,

604
00:26:02,894 --> 00:26:04,596
so if an attacker is long gone,

605
00:26:04,596 --> 00:26:08,166
this might retain evidence
that malware was executed,

606
00:26:08,166 --> 00:26:11,735
and even accessed files within
10 seconds of execution,

607
00:26:11,736 --> 00:26:14,306
you can pull that
information as well.

608
00:26:14,306 --> 00:26:16,875
So there's a good
Prefetch parser here.

609
00:26:16,875 --> 00:26:19,044
It covers XP all the
way to Windows 10.

610
00:26:19,044 --> 00:26:20,679
Windows 10, they
changed the format

611
00:26:20,679 --> 00:26:22,614
because they like
to mess with us,

612
00:26:22,614 --> 00:26:27,118
but this parser takes care of
that for you, which is nice.

613
00:26:27,118 --> 00:26:29,921
So some final thoughts,
there's a lot more artifacts

614
00:26:29,921 --> 00:26:31,723
that we just don't
have time to cover,

615
00:26:31,723 --> 00:26:33,792
but always research
your keyword hits,

616
00:26:33,792 --> 00:26:35,526
especially the EnCase
people in here.

617
00:26:35,527 --> 00:26:38,797
If you have keyword hits
under this weird like evidence

618
00:26:38,797 --> 00:26:41,666
you've never seen before,
then look into it,

619
00:26:41,666 --> 00:26:43,902
look at research webinars.

620
00:26:43,902 --> 00:26:44,936
I don't need to tell you this,

621
00:26:44,936 --> 00:26:46,605
you're here at the conference,

622
00:26:46,605 --> 00:26:48,340
but other presentations
are helpful

623
00:26:48,340 --> 00:26:50,341
and always be learning
about new technology.

624
00:26:50,342 --> 00:26:52,477
And think like the attacker.

625
00:26:52,477 --> 00:26:55,013
One of our Red Team
guys concerned me,

626
00:26:55,013 --> 00:26:57,549
and he said, "I'm gonna
look at your presentation

627
00:26:57,549 --> 00:27:01,119
"and adapt my Red Team
techniques to not record

628
00:27:01,119 --> 00:27:03,053
"any of this information
we're talking about."

629
00:27:03,054 --> 00:27:04,522
- [Dave] Well, we'll find
some other way to find out.

630
00:27:04,522 --> 00:27:07,524
- That's comforting, but
yeah, attackers are sneaky,

631
00:27:07,525 --> 00:27:10,028
and just, we have to
adapt to their techniques.

632
00:27:10,028 --> 00:27:11,696
- And definitely the
keyword search hits.

633
00:27:11,696 --> 00:27:14,131
A lot of these artifacts are
found by keyword search hits.

634
00:27:14,132 --> 00:27:17,569
If you can find someone who
can do the reverse-engineering

635
00:27:17,569 --> 00:27:19,504
or the little bit
of de-obfuscation,

636
00:27:19,504 --> 00:27:21,005
please, please, please find it.

637
00:27:21,006 --> 00:27:23,074
And if you were at the panel
today, please document it.

638
00:27:23,074 --> 00:27:25,610
Let's get some blog posts
out about this information.

639
00:27:25,610 --> 00:27:28,979
I promise I'm working
on one on the CCM RUAs,

640
00:27:28,980 --> 00:27:31,950
so super important.
- Definitely.

641
00:27:31,950 --> 00:27:33,451
- And follow us on Twitter.

642
00:27:33,451 --> 00:27:35,153
You may know me as that
guy who just followed you

643
00:27:35,153 --> 00:27:36,588
like 20 minutes ago on Twitter.

644
00:27:36,588 --> 00:27:38,523
I've been trying to follow
everybody I possibly could, so.

645
00:27:38,523 --> 00:27:39,858
- Popular guy.

646
00:27:39,858 --> 00:27:41,659
So are there any questions, or?

647
00:27:41,660 --> 00:27:43,895
- [Man] So you mentioned
the, depending on how

648
00:27:43,895 --> 00:27:46,231
the file was deleted,
is there any indicators

649
00:27:46,231 --> 00:27:48,400
that tell you how
the file was deleted

650
00:27:48,400 --> 00:27:52,070
so we know how much time to
spend trying to recover it?

651
00:27:52,070 --> 00:27:53,538
- That's a good question!

652
00:27:53,538 --> 00:27:55,540
That's why we covered
SDelete, so if an attacker

653
00:27:55,540 --> 00:27:58,443
tries to securely delete,
they're obviously being

654
00:27:58,443 --> 00:28:01,579
a little more advanced than
just manually deleting it.

655
00:28:02,747 --> 00:28:04,649
They're kind of--
- I've actually,

656
00:28:04,649 --> 00:28:06,551
recently we saw, we had a
case where the attacker,

657
00:28:06,551 --> 00:28:08,453
rather than do SDelete,
they were just copying

658
00:28:08,453 --> 00:28:10,555
a large file that
was their system file

659
00:28:10,555 --> 00:28:12,123
over on top of
their existing file,

660
00:28:12,123 --> 00:28:14,659
so that pretty much
overwrites all the content.

661
00:28:14,659 --> 00:28:16,961
And then they would just
rename it and delete it,

662
00:28:16,961 --> 00:28:19,364
very similar to SDelete,
but very sneaky.

663
00:28:20,498 --> 00:28:23,802
We actually, we
judge our time spent

664
00:28:23,802 --> 00:28:27,038
on if it's worth recovering
based on how much budget

665
00:28:27,038 --> 00:28:29,207
our client has if they
want to send us an image

666
00:28:29,207 --> 00:28:31,042
and spend this time,
'cause it is very

667
00:28:31,042 --> 00:28:34,312
time-intensive to try, and
it's hit or miss, right?

668
00:28:34,312 --> 00:28:35,746
So but if we see
something like SDelete

669
00:28:35,747 --> 00:28:37,382
or an overwriting,
we're gonna know

670
00:28:37,382 --> 00:28:39,751
it's gonna be less likely,
but possible maybe.

671
00:28:39,751 --> 00:28:41,086
- Sometimes based
on the file name,

672
00:28:41,086 --> 00:28:42,520
you kinda know
what it is anyway.

673
00:28:42,520 --> 00:28:46,024
Attackers aren't very good
about renaming their stuff, so.

674
00:28:46,024 --> 00:28:47,524
- [Man] Any tools that
would be good in here,

675
00:28:47,525 --> 00:28:49,728
definitely Malware Labs,
any tools that are better

676
00:28:49,728 --> 00:28:53,965
to immediately recover if you
happen to catch it in play?

677
00:28:53,965 --> 00:28:57,068
- Scalpel I've heard is
good to recover files

678
00:28:57,068 --> 00:29:00,271
from like raw image,
raw disk stuff?

679
00:29:00,271 --> 00:29:01,806
Yeah, Scalpel is
good, there's a few--

680
00:29:01,806 --> 00:29:03,641
- I also like Bulk Extractor,
depending on the type of file.

681
00:29:03,641 --> 00:29:05,110
- [Mary] Bulk Extractor,
that's a good one.

682
00:29:05,110 --> 00:29:06,377
- Like archives can be
pretty good at recovering

683
00:29:06,377 --> 00:29:07,579
or pointing you
in that direction.

684
00:29:07,579 --> 00:29:10,248
Bulk Extractor, it's fast.
- Yep!

685
00:29:10,248 --> 00:29:12,851
- [Man] You mentioned
the PE header metadata

686
00:29:12,851 --> 00:29:15,320
that shows up in the
OBJECT.DATA file.

687
00:29:15,320 --> 00:29:19,890
I did not see the compile
date in the table there.

688
00:29:19,891 --> 00:29:23,762
Does that get put into
there, or is it not present?

689
00:29:23,762 --> 00:29:25,730
- I don't know if I
heard, you said for PE,

690
00:29:25,730 --> 00:29:27,766
you didn't see a compile
date put in there?

691
00:29:27,766 --> 00:29:30,902
Okay, yeah, I mean,
we sometimes use the,

692
00:29:30,902 --> 00:29:32,937
if we are able to
recover, I don't know

693
00:29:32,937 --> 00:29:36,241
if I'm answering this,
if we are able to recover

694
00:29:36,241 --> 00:29:40,645
the file, we do look at the
compile date to find it was--

695
00:29:40,645 --> 00:29:42,914
- I think he meant if in
the CCM_RecentlyUsedApps--

696
00:29:42,914 --> 00:29:44,415
- Oh, that one, okay.
- Sometimes I see it there.

697
00:29:44,415 --> 00:29:46,351
I don't remember, there's
a list of like 40 items

698
00:29:46,351 --> 00:29:48,686
that are in there, and it
may or may not be in there.

699
00:29:48,686 --> 00:29:50,388
I can follow up with you.

700
00:29:50,388 --> 00:29:52,322
All the fields are
documented in the blog post

701
00:29:52,323 --> 00:29:53,691
and the script
that'll be coming out.

702
00:29:53,691 --> 00:29:56,227
But I don't remember, but maybe.

703
00:29:56,227 --> 00:29:57,695
I'll follow up, I apologize.

704
00:29:57,695 --> 00:29:59,397
- [Man] Yeah, if the
compile date's in there,

705
00:29:59,397 --> 00:30:00,865
that would be a cool thing.

706
00:30:00,865 --> 00:30:02,133
- Sure!

707
00:30:02,133 --> 00:30:03,601
- [Emcee] All right,
I think we're gonna

708
00:30:03,601 --> 00:30:05,103
have to end it there,
we've got lunch comin' up.

709
00:30:05,103 --> 00:30:06,638
A big round of applause for
Mary and Dave, thank you!

710
00:30:06,638 --> 00:30:07,972
(audience applauding)

711
00:30:07,972 --> 00:30:11,643
(wondrous electronic music)

712
00:30:15,046 --> 00:30:16,681
(logo swooshes)

