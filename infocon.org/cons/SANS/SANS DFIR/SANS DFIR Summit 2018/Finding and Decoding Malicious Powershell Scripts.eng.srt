1
00:00:00,700 --> 00:00:03,436
(dramatic music)

2
00:00:10,543 --> 00:00:12,645
(audience applauds)

3
00:00:12,645 --> 00:00:15,215
- So my name is Mari DeGrazia.

4
00:00:15,215 --> 00:00:17,417
I'm with Kroll Cyber Security

5
00:00:17,417 --> 00:00:21,121
and at Kroll we
come across a lot of

6
00:00:21,121 --> 00:00:24,491
malicious PowerShell scripts
in our investigations.

7
00:00:24,491 --> 00:00:27,259
So today I'm gonna walk through

8
00:00:27,260 --> 00:00:30,230
how you find these
malicious PowerShell scripts

9
00:00:30,230 --> 00:00:33,033
and then how you
can decode them.

10
00:00:33,033 --> 00:00:36,469
But first, one of the
things you may have noticed

11
00:00:36,469 --> 00:00:39,973
here at this conference
is DFIR Superheros.

12
00:00:39,973 --> 00:00:42,342
You're here to learn how
to channel these powers.

13
00:00:42,342 --> 00:00:46,112
And so today, I have
some prizes to help you

14
00:00:46,112 --> 00:00:50,250
channel that inner
DFIR Superhero.

15
00:00:50,250 --> 00:00:53,053
Some of you that know
me know that I'm a maker

16
00:00:53,053 --> 00:00:54,988
and I enjoy making things.

17
00:00:54,988 --> 00:00:58,491
So right here I have an
Iron Man arc reactor.

18
00:00:58,491 --> 00:01:01,327
It's gonna go through and do
a couple different things.

19
00:01:01,327 --> 00:01:04,763
I made it with an
Arduino 3D printed case

20
00:01:04,763 --> 00:01:08,333
and I have some Easter eggs
hidden in my presentation.

21
00:01:08,334 --> 00:01:10,770
So if you see one
of these Easter eggs

22
00:01:10,770 --> 00:01:14,240
either raise your hand or stand
up, it's a pretty big room.

23
00:01:14,240 --> 00:01:17,077
I have my colleagues
Ron and Kirtan in here.

24
00:01:17,077 --> 00:01:19,179
They'll come around and find
you and give you a ticket.

25
00:01:19,179 --> 00:01:23,116
Come and see me afterwards and
I will give you one of these.

26
00:01:23,116 --> 00:01:28,121
The next thing I have is
the Lasso of Truth here

27
00:01:28,988 --> 00:01:30,523
from Wonder Woman.

28
00:01:30,523 --> 00:01:32,559
Nice strong powerful woman,

29
00:01:32,559 --> 00:01:34,360
so we gotta get this going.

30
00:01:34,360 --> 00:01:36,196
Rob Lee, if I could
have you come up here

31
00:01:36,196 --> 00:01:40,200
to help me test
this Lasso of Truth,

32
00:01:40,200 --> 00:01:42,402
I would greatly appreciate that.

33
00:01:45,171 --> 00:01:50,143
So go ahead, hold one end
and I'll wrap it around you.

34
00:01:50,143 --> 00:01:51,544
Yes, here we go.

35
00:01:53,780 --> 00:01:56,416
So Rob, I know you can't
see this, but it lights up.

36
00:01:56,416 --> 00:01:59,452
Can you tell me the last
time you were in Vegas

37
00:01:59,452 --> 00:02:03,021
at the Cosmopolitan, how
much did you really lose

38
00:02:03,022 --> 00:02:04,724
on the Blackjack tables?

39
00:02:06,893 --> 00:02:08,360
(audience laughs)

40
00:02:08,360 --> 00:02:11,831
Wait a minute, you gotta
demonstrate that this works.

41
00:02:12,866 --> 00:02:15,168
(Rob groans)
A lot, okay.

42
00:02:16,402 --> 00:02:17,202
(Rob groans)
We won't disclose it here.

43
00:02:17,203 --> 00:02:18,538
We're all professionals.

44
00:02:20,273 --> 00:02:22,308
- On account of the drinkin'.

45
00:02:22,308 --> 00:02:23,243
(both laugh)

46
00:02:23,243 --> 00:02:25,345
More than I usually lose.

47
00:02:25,345 --> 00:02:27,847
- Close enough, close
enough. (laughs)

48
00:02:27,847 --> 00:02:28,681
Thank you.

49
00:02:30,150 --> 00:02:32,952
All right, so keep your eyes
open for these Easter eggs.

50
00:02:32,952 --> 00:02:34,120
See if you can find 'em

51
00:02:34,120 --> 00:02:35,355
and if you want one,

52
00:02:35,355 --> 00:02:37,023
make sure that you stand
up or raise your hand

53
00:02:37,023 --> 00:02:38,658
so that you can be seen.

54
00:02:38,658 --> 00:02:40,692
So why PowerShell?

55
00:02:40,693 --> 00:02:43,429
We've had a couple
presentations already

56
00:02:43,429 --> 00:02:47,033
that have demonstrated how
powerful PowerShell is.

57
00:02:47,033 --> 00:02:50,869
Yesterday Devon Ackerman
talked about Office 365

58
00:02:50,870 --> 00:02:55,408
and he leveraged PowerShell
to access Office 365.

59
00:02:55,408 --> 00:02:57,777
We had another
presentation today

60
00:02:57,777 --> 00:02:59,811
where they were
demonstrating techniques

61
00:02:59,812 --> 00:03:03,716
of stealing tokens
with PowerShell.

62
00:03:03,716 --> 00:03:06,085
So this is a very
powerful language,

63
00:03:06,085 --> 00:03:09,222
just like the name would
suggest, PowerShell.

64
00:03:09,222 --> 00:03:13,927
This let's attackers
live off the land.

65
00:03:13,927 --> 00:03:16,662
They don't have to
bring a binary with them

66
00:03:16,663 --> 00:03:18,932
and drop it on a system,

67
00:03:18,932 --> 00:03:22,902
they can leverage the tools
that are in Windows systems

68
00:03:22,902 --> 00:03:26,039
to actually get
what they need done.

69
00:03:26,039 --> 00:03:29,075
All right, so this helps
them also be fileless.

70
00:03:29,075 --> 00:03:33,880
Like is said, they're not
dropping a binary on the system,

71
00:03:33,880 --> 00:03:36,716
they're getting to use the
tools that are there natively

72
00:03:36,716 --> 00:03:40,954
which ultimately helps
them evade anti-virus.

73
00:03:40,954 --> 00:03:42,755
They're in there, they're
getting things done,

74
00:03:42,755 --> 00:03:47,427
the last thing they wanna do
is starting tripping that AV

75
00:03:47,427 --> 00:03:49,629
to let them know that
they're in there.

76
00:03:49,629 --> 00:03:51,930
They also want
their tools to run.

77
00:03:51,931 --> 00:03:55,501
If AV trips and starts
catching those tools,

78
00:03:55,501 --> 00:03:56,869
of course they're
not gonna get done

79
00:03:56,869 --> 00:03:58,571
what they need to get done.

80
00:03:58,571 --> 00:04:03,476
It gives them full access to
WMI and the .NET Framework.

81
00:04:04,344 --> 00:04:05,311
These are both powerful tools.

82
00:04:05,311 --> 00:04:06,980
You think about these tools,

83
00:04:06,980 --> 00:04:10,783
these are things
that administrators
use to do their job.

84
00:04:10,783 --> 00:04:15,787
So whatever can be used for
good can also be used for evil.

85
00:04:16,990 --> 00:04:20,526
And also, there is a
huge lack of logging

86
00:04:20,526 --> 00:04:22,295
when it comes to
Windows PowerShell.

87
00:04:22,295 --> 00:04:24,664
So when we talk about
logs that we look at

88
00:04:24,664 --> 00:04:29,002
as forensic examiners,
before Windows 10,

89
00:04:29,002 --> 00:04:31,137
there isn't a lot of
logging for PowerShell.

90
00:04:31,137 --> 00:04:34,574
Now you can go on, take
some additional steps

91
00:04:34,574 --> 00:04:37,710
on some older systems,
update some libraries,

92
00:04:37,710 --> 00:04:39,912
get that PowerShell
logging installed,

93
00:04:39,912 --> 00:04:42,515
but even after you get
the PowerShell logging

94
00:04:42,515 --> 00:04:45,717
there's additional steps you
have to take to enable it.

95
00:04:45,718 --> 00:04:48,187
So in a lotta the cases
that we work at Kroll,

96
00:04:48,187 --> 00:04:49,555
we don't see this.

97
00:04:49,555 --> 00:04:52,392
We get into an environment
and very rarely

98
00:04:52,392 --> 00:04:55,461
do we get the logging
associated with PowerShell.

99
00:04:55,461 --> 00:04:57,397
All right, so what
kind of bad stuff

100
00:04:57,397 --> 00:04:59,098
can you do with PowerShell?

101
00:04:59,098 --> 00:05:01,401
Well you might not have
your attacker taking off

102
00:05:01,401 --> 00:05:04,504
with a whole stadium
like Magneto did,

103
00:05:04,504 --> 00:05:06,973
but they definitely, you saw
with those demonstrations

104
00:05:06,973 --> 00:05:09,575
earlier with PowerShell,
you can do a ton.

105
00:05:09,575 --> 00:05:12,245
You've got the data
exfiltration, you've
got the recon,

106
00:05:12,245 --> 00:05:17,250
you've got the remote
command execution.

107
00:05:18,651 --> 00:05:20,353
Pretty much anything your
attacker wants to do,

108
00:05:20,353 --> 00:05:22,889
they can leverage
PowerShell to do this.

109
00:05:22,889 --> 00:05:26,659
And a lot of it like I
said is done in memory.

110
00:05:26,659 --> 00:05:28,161
So here is an example,

111
00:05:28,161 --> 00:05:32,098
something that I have seen a
lot within our investigations.

112
00:05:32,098 --> 00:05:35,101
One way that they use
to push out PowerShell

113
00:05:35,101 --> 00:05:38,338
within the environment is
the service control manager.

114
00:05:38,338 --> 00:05:40,707
And I kinda like to call
this spray and play,

115
00:05:40,707 --> 00:05:43,276
because if you find
this on one system,

116
00:05:43,276 --> 00:05:45,078
there's a good chance
you're gonna find it

117
00:05:45,078 --> 00:05:48,748
across your entire environment
on a lot of systems.

118
00:05:48,748 --> 00:05:52,452
The service control
manager is a native tool

119
00:05:52,452 --> 00:05:53,920
built into Windows.

120
00:05:53,920 --> 00:05:57,557
It allows you to install
services and to manage them,

121
00:05:57,557 --> 00:05:59,525
stop them, and start them.

122
00:05:59,525 --> 00:06:00,727
So it's pretty simple.

123
00:06:00,727 --> 00:06:03,096
You just use the command S-E.

124
00:06:03,096 --> 00:06:05,098
Another good way to think of it

125
00:06:05,098 --> 00:06:07,500
is like a poor man's PsExec.

126
00:06:07,500 --> 00:06:10,670
The service control
manager you can execute

127
00:06:10,670 --> 00:06:13,072
on remote machines.

128
00:06:13,072 --> 00:06:16,008
So you think about using
a tool like PsExec,

129
00:06:16,008 --> 00:06:19,277
well the attacker is
already leaving a footprint.

130
00:06:19,278 --> 00:06:22,915
That's not a native tool to
Windows, that's a PsExec tool.

131
00:06:22,915 --> 00:06:25,585
So they have to bring
in a tool, PsExec,

132
00:06:25,585 --> 00:06:27,587
to push things out remotely.

133
00:06:27,587 --> 00:06:29,589
But with a service
control manager,

134
00:06:29,589 --> 00:06:33,259
that is a native tool built
into Windows that they can use.

135
00:06:33,259 --> 00:06:35,762
If you're familiar with
some of the artifacts

136
00:06:35,762 --> 00:06:37,997
left behind by PsExec,

137
00:06:37,997 --> 00:06:40,800
if you use it, it makes an
entry in the registry key

138
00:06:40,800 --> 00:06:42,468
when you accept the EULA.

139
00:06:42,468 --> 00:06:44,570
Well not with the
service control manager.

140
00:06:44,570 --> 00:06:48,508
So here they have a tool
that let's them access

141
00:06:48,508 --> 00:06:52,210
any Windows system in
the environment remotely.

142
00:06:52,211 --> 00:06:53,713
Okay, so they're gonna use this

143
00:06:53,713 --> 00:06:56,082
and they're gonna call
the create command

144
00:06:56,082 --> 00:06:58,551
and then supply a service name.

145
00:06:58,551 --> 00:07:00,820
Now here I've used the
FakeDriver service name,

146
00:07:00,820 --> 00:07:03,589
but typically what we
see on our investigations

147
00:07:03,589 --> 00:07:06,726
is a random service name,

148
00:07:06,726 --> 00:07:09,896
anywhere from maybe
12 to 16 digits long

149
00:07:09,896 --> 00:07:13,065
with capital and
lower case letters.

150
00:07:13,065 --> 00:07:15,968
They do this because the
service control manager

151
00:07:15,968 --> 00:07:17,670
wants a unique name.

152
00:07:17,670 --> 00:07:20,807
So if they're pushing it
out to multiple systems,

153
00:07:20,807 --> 00:07:23,276
multiple times across
the environment,

154
00:07:23,276 --> 00:07:25,545
they wanna make sure that
there's not a collision

155
00:07:25,545 --> 00:07:28,181
in the service control name,

156
00:07:28,181 --> 00:07:30,883
so they'll use a
random name here.

157
00:07:30,883 --> 00:07:33,786
The next thing they supply is
what's called the the bin-path

158
00:07:33,786 --> 00:07:35,388
the binary path.

159
00:07:35,388 --> 00:07:38,390
So normally if you're
installing a legitimate service

160
00:07:38,391 --> 00:07:41,294
in Windows, this would
be where you would supply

161
00:07:41,294 --> 00:07:44,464
the path to the executable
that you're going to run.

162
00:07:44,464 --> 00:07:47,667
But here, what they do
instead of pointing it

163
00:07:47,667 --> 00:07:50,803
to a legitimate service,
is they're pointing it

164
00:07:50,803 --> 00:07:55,808
to command.exe and then they're
gonna leverage commande.exe

165
00:07:57,210 --> 00:08:00,580
to run whatever PowerShell
command is that they wanna do.

166
00:08:00,580 --> 00:08:04,150
And don't forget, they can do
this remotely on any system.

167
00:08:04,150 --> 00:08:07,553
And here we have some other
variables that they'll use.

168
00:08:07,553 --> 00:08:10,923
They'll use a -c, -q,

169
00:08:12,291 --> 00:08:14,327
something so when that
command prompt in PowerShell

170
00:08:14,327 --> 00:08:15,962
pop up it's quite, right?

171
00:08:15,962 --> 00:08:17,597
Because if they're on a system,

172
00:08:17,597 --> 00:08:18,664
the last thing they wanna do

173
00:08:18,664 --> 00:08:20,433
is alert you that they're there.

174
00:08:20,433 --> 00:08:23,302
And right here we can see,
they're basically setting up

175
00:08:23,302 --> 00:08:25,338
a backshell to meterpreter.

176
00:08:25,338 --> 00:08:28,274
Meterpreter is very
strong, very powerful.

177
00:08:28,274 --> 00:08:31,978
So ultimately their goal
is to have a reverse shell

178
00:08:31,978 --> 00:08:33,312
setup into meterpreter.

179
00:08:33,312 --> 00:08:34,881
And like a say,
you're gonna see this

180
00:08:34,881 --> 00:08:37,516
across multiple systems
within the environment.

181
00:08:38,918 --> 00:08:41,554
Okay, so here's what the
attacker actually sees

182
00:08:41,554 --> 00:08:43,021
on their end.

183
00:08:43,022 --> 00:08:45,691
They set up a listener and
they're gonna listen for that.

184
00:08:45,691 --> 00:08:49,295
So once they execute that
command, it's gonna establish

185
00:08:49,295 --> 00:08:51,863
a reverse shell
up to their system

186
00:08:51,864 --> 00:08:54,567
and boom, now they
have access to that

187
00:08:54,567 --> 00:08:57,537
from their system that
they're working off of.

188
00:08:57,537 --> 00:09:00,573
So if all of this is done
from the command line,

189
00:09:00,573 --> 00:09:02,675
fileless so to say,

190
00:09:02,675 --> 00:09:06,212
they're not downloading a
backdoor that's an executable,

191
00:09:06,212 --> 00:09:11,217
how do we as examiners
find evidence of this.

192
00:09:12,652 --> 00:09:15,521
Well the service control
manager is actually logged

193
00:09:15,521 --> 00:09:17,790
in the system event log.

194
00:09:17,790 --> 00:09:20,059
So right here is
your magic number

195
00:09:20,059 --> 00:09:24,363
that you're gonna
wanna look for, 7045.

196
00:09:24,363 --> 00:09:27,800
This is the event
log id associated

197
00:09:27,800 --> 00:09:30,902
with new services
installed on a system.

198
00:09:30,903 --> 00:09:33,839
So when they run
that S-E command,

199
00:09:33,839 --> 00:09:37,577
that will leave an entry
in the system event log.

200
00:09:38,444 --> 00:09:39,712
Okay, what does it look like?

201
00:09:39,712 --> 00:09:44,250
I ran through an example
that was in plain ASCII,

202
00:09:44,250 --> 00:09:47,787
but normally the attackers
are going to use obfuscation.

203
00:09:47,787 --> 00:09:50,489
Now it's my understanding
through some
exercises yesterday,

204
00:09:50,489 --> 00:09:52,758
you saw some Base64

205
00:09:52,758 --> 00:09:55,595
and you're gonna see
the same thing here.

206
00:09:55,595 --> 00:09:59,031
So here we have
an event ID, 7045.

207
00:10:00,700 --> 00:10:03,936
And right here you
can see this is what

208
00:10:03,936 --> 00:10:06,806
the random service name
is going to look like.

209
00:10:06,806 --> 00:10:09,842
And then right here is
where you see the COMSPEC,

210
00:10:09,842 --> 00:10:13,245
which is that
command.exe on the system

211
00:10:13,245 --> 00:10:15,147
and they're calling PowerShell.

212
00:10:15,147 --> 00:10:19,619
And like I said, this
is Base64 encoding

213
00:10:19,619 --> 00:10:21,120
that you're going to see,

214
00:10:21,120 --> 00:10:23,422
when you start looking
at these entries.

215
00:10:23,422 --> 00:10:27,159
Now when it comes to
Base64, as a programmer,

216
00:10:27,159 --> 00:10:31,097
Base64 can actually look
a couple of different ways

217
00:10:31,097 --> 00:10:33,733
and I have two different
ways right here.

218
00:10:33,733 --> 00:10:36,535
Can anybody tell
me the difference

219
00:10:36,535 --> 00:10:38,904
between the Base64 on the top

220
00:10:38,904 --> 00:10:41,741
and I think I saw
a hand over here.

221
00:10:41,741 --> 00:10:42,975
Jake was that you?

222
00:10:42,975 --> 00:10:44,443
I think this was
the first one I saw.

223
00:10:44,443 --> 00:10:46,178
So where do you
see the Easter egg.

224
00:10:48,180 --> 00:10:50,750
Princess Diana, right down here.

225
00:10:50,750 --> 00:10:52,551
Okay, so Jake's go
the first prize,

226
00:10:52,551 --> 00:10:54,120
they'll come over and
give you the ticket.

227
00:10:54,120 --> 00:10:59,091
So the Base64 on top
is Unicode encoding.

228
00:11:00,326 --> 00:11:01,694
You can see there's
a lot of a's in here

229
00:11:01,694 --> 00:11:04,163
and it just looks
different than the Unicode,

230
00:11:04,163 --> 00:11:06,432
or the Base64 down here.

231
00:11:06,432 --> 00:11:08,367
You can also see
there's some slashes

232
00:11:08,367 --> 00:11:10,803
and some different varieties.

233
00:11:10,803 --> 00:11:12,405
So when you're looking at Base64

234
00:11:13,739 --> 00:11:16,375
you kinda start to
recognize these patterns,

235
00:11:16,375 --> 00:11:19,311
Unicode and regular.

236
00:11:19,311 --> 00:11:23,215
So programmically I like to
deal with things in Python.

237
00:11:23,215 --> 00:11:26,318
I know a couple people, this
is about PowerShell right,

238
00:11:26,318 --> 00:11:28,821
but if you go to my
GitHub and you look at

239
00:11:28,821 --> 00:11:30,623
the things that I've worked on,

240
00:11:30,623 --> 00:11:32,458
I like to do things in Python.

241
00:11:32,458 --> 00:11:35,795
I'm stubborn, I should
probably learn PowerShell,

242
00:11:35,795 --> 00:11:37,396
but I'm gonna brute port this

243
00:11:37,396 --> 00:11:39,632
because I wanna learn
how to do this Python.

244
00:11:39,632 --> 00:11:41,599
A lotta my current
scripts are in Python,

245
00:11:41,600 --> 00:11:43,369
my processes are Python,

246
00:11:43,369 --> 00:11:48,340
so I just kinda wanna roll
in this decoding into Python.

247
00:11:49,842 --> 00:11:51,310
So Python, if you've never
used it before, is simple,

248
00:11:51,310 --> 00:11:53,012
easy to use.

249
00:11:53,012 --> 00:11:55,080
Just type Python, it's
gonna drop you down

250
00:11:55,081 --> 00:11:57,717
into an interactive shell
to run some commands.

251
00:11:57,717 --> 00:12:01,319
We're gonna just run
the import base64

252
00:12:02,888 --> 00:12:05,991
so that we can
decode this Base64.

253
00:12:05,991 --> 00:12:08,526
Supply a variable, our code,

254
00:12:08,527 --> 00:12:11,464
that we're just gonna
drop that Base64 into

255
00:12:11,464 --> 00:12:16,001
and then finally just do
base64.b64decode our code

256
00:12:16,001 --> 00:12:17,269
and we get the code.

257
00:12:17,269 --> 00:12:19,772
So what does this look
like on that event log

258
00:12:19,772 --> 00:12:21,774
that I supplied earlier?

259
00:12:21,774 --> 00:12:23,275
Same thing.

260
00:12:23,275 --> 00:12:25,444
Now the event log that I had
earlier was actually Unicode.

261
00:12:25,444 --> 00:12:29,080
So this is where we
have to specify UTF16.

262
00:12:29,081 --> 00:12:33,853
So that's actually gonna
decode our Unicode Base64

263
00:12:33,853 --> 00:12:35,654
and this is what it looks like.

264
00:12:35,654 --> 00:12:37,823
Now if you're looking at
this goin' like, holy crap,

265
00:12:37,823 --> 00:12:40,226
I have no idea what
that says, you know,

266
00:12:40,226 --> 00:12:42,895
I know Python, I
don't know PowerShell,

267
00:12:42,895 --> 00:12:44,430
I don't know JavaScript,

268
00:12:44,430 --> 00:12:47,299
but you can look for
things within the code

269
00:12:47,299 --> 00:12:50,669
to kinda tip you off
to what it might be

270
00:12:50,669 --> 00:12:53,372
even if you don't fully know
the programming language.

271
00:12:53,372 --> 00:12:56,909
So right here we see something
that says Net.Sockets.

272
00:12:56,909 --> 00:12:58,778
So I start to get an idea,

273
00:12:58,778 --> 00:13:01,480
they're probably opening
up something here,

274
00:13:01,480 --> 00:13:03,983
some kind of connection,
it's a socket.

275
00:13:03,983 --> 00:13:07,152
And then right here, this
is what I'm looking for.

276
00:13:07,153 --> 00:13:10,589
This is the golden egg for me.

277
00:13:10,589 --> 00:13:14,693
This is the IP address that
those attackers are using

278
00:13:14,693 --> 00:13:17,263
to establish that reverse shell.

279
00:13:17,263 --> 00:13:20,733
Now sometimes it's gonna
be an external IP address.

280
00:13:20,733 --> 00:13:24,069
Sometimes it will be
an internal IP address.

281
00:13:24,069 --> 00:13:26,305
We just worked a case,
and it's pretty common

282
00:13:26,305 --> 00:13:28,574
in this PFI investigations

283
00:13:28,574 --> 00:13:30,442
where they're stealing
credit card data,

284
00:13:30,442 --> 00:13:33,913
like my colleagues Ron and
Brandon talked about yesterday,

285
00:13:33,913 --> 00:13:36,882
they'll find one system
or maybe two systems

286
00:13:36,882 --> 00:13:39,285
within the environment
that have connectivity

287
00:13:39,285 --> 00:13:40,920
to the outside world.

288
00:13:40,920 --> 00:13:42,988
So they'll attack the
point-of-sale systems,

289
00:13:42,988 --> 00:13:45,658
the back of house, and
then they'll set up

290
00:13:45,658 --> 00:13:48,928
one of these reverse shells
to an internal system

291
00:13:48,928 --> 00:13:50,629
and then go out from there.

292
00:13:50,629 --> 00:13:52,932
So when you're looking
for these IOCs,

293
00:13:52,932 --> 00:13:57,570
you're gonna see both internal
and external IP addresses

294
00:13:57,570 --> 00:13:59,238
embedded within this code.

295
00:14:00,406 --> 00:14:02,141
Okay, I wish it were
that easy, right,

296
00:14:02,141 --> 00:14:04,877
because then my presentation
would be wrapped up,

297
00:14:04,877 --> 00:14:08,079
we'd all be going to
lunch, but there's more.

298
00:14:08,080 --> 00:14:13,085
Very rarely are you going to
just get one layer of Base64.

299
00:14:14,220 --> 00:14:16,655
It becomes like a
Russian stacking doll.

300
00:14:16,655 --> 00:14:20,192
They're gonna use multiple
and multiple layers

301
00:14:20,192 --> 00:14:22,862
of obfuscation to hide
what they're doing

302
00:14:22,862 --> 00:14:25,564
and to make our jobs
as investigators

303
00:14:25,564 --> 00:14:27,800
more challenging and difficult.

304
00:14:27,800 --> 00:14:31,469
Okay, here's another
example, 7045 with COMSPEC.

305
00:14:31,470 --> 00:14:34,673
Now you guys should start
to notice a theme here

306
00:14:34,673 --> 00:14:36,408
with the COMSPEC, right?

307
00:14:36,408 --> 00:14:38,777
They're calling powershell.exe.

308
00:14:38,777 --> 00:14:40,512
But this one,

309
00:14:40,512 --> 00:14:45,516
this one is using compression,
all right, Gzip compression.

310
00:14:46,819 --> 00:14:49,054
So the first time I saw this,

311
00:14:50,890 --> 00:14:53,826
I was trying to figure
out, okay I see the Base64,

312
00:14:53,826 --> 00:14:55,661
I see there's some
kind of compression,

313
00:14:55,661 --> 00:14:58,897
I need to figure out
how to decode this.

314
00:14:58,898 --> 00:15:02,534
So what the attackers had
done in this situation

315
00:15:02,534 --> 00:15:06,739
is there's a payload and then
that payload is compressed

316
00:15:06,739 --> 00:15:09,541
and then Base64.

317
00:15:09,541 --> 00:15:14,079
So in order to decode that,
we've gotta reverse the process.

318
00:15:14,079 --> 00:15:17,382
We have to decode that Base64.

319
00:15:17,383 --> 00:15:19,685
We have to decompress it

320
00:15:19,685 --> 00:15:22,488
and then finally
we get our payload.

321
00:15:22,488 --> 00:15:26,592
So I already talked about
how to decode the Base64,

322
00:15:26,592 --> 00:15:30,029
but this time instead of
writing it out to the screen,

323
00:15:30,029 --> 00:15:31,931
we're gonna drop it into a file.

324
00:15:31,931 --> 00:15:34,266
Now programmically if
you're familiar with Python,

325
00:15:34,266 --> 00:15:36,635
I don't nescessarily have
to drop it out to a file,

326
00:15:36,635 --> 00:15:38,470
but the first time I did this

327
00:15:38,470 --> 00:15:40,673
I wanted to see if
these steps worked,

328
00:15:40,673 --> 00:15:43,375
so I kinda wanted to break
it down to the basics.

329
00:15:43,375 --> 00:15:48,380
So once I went ahead and
dropped that out to a zip file.

330
00:15:49,415 --> 00:15:51,950
I think I saw right here.

331
00:15:51,951 --> 00:15:52,818
What do you see?

332
00:15:54,553 --> 00:15:56,055
Stark right here.

333
00:15:56,055 --> 00:16:00,526
All right so, Iron Man's
real name, right Stark.

334
00:16:00,526 --> 00:16:03,127
So the first time I did this,

335
00:16:03,128 --> 00:16:06,332
I went ahead and I
decoded that Base64

336
00:16:06,332 --> 00:16:08,867
and put it out to a Gzip file

337
00:16:08,867 --> 00:16:11,036
and then I just used
7-Zip to unzip it

338
00:16:11,036 --> 00:16:13,604
and I about fell outta my
chair when it actually worked,

339
00:16:13,605 --> 00:16:16,642
because it was like, it
couldn't be that easy right?

340
00:16:16,642 --> 00:16:18,510
And so this is
what I got though.

341
00:16:18,510 --> 00:16:21,847
I looked at this as I was
like, where's my IP address?

342
00:16:21,847 --> 00:16:23,182
Where's the code?

343
00:16:23,182 --> 00:16:25,150
I know that I took
the right steps

344
00:16:25,150 --> 00:16:28,153
because I didn't get an error
when I tried to decompress it.

345
00:16:28,153 --> 00:16:30,055
If it wasn't a zip file,

346
00:16:30,055 --> 00:16:32,358
Python would have thrown
out an error to me

347
00:16:32,358 --> 00:16:34,660
or it just wouldn't have
looked like anything.

348
00:16:34,660 --> 00:16:37,396
So this is actually shellcode.

349
00:16:37,396 --> 00:16:41,132
So within the Base64,
within the compression,

350
00:16:41,133 --> 00:16:43,202
there's now shellcode.

351
00:16:43,202 --> 00:16:46,972
I am not a malware
reverse engineer.

352
00:16:46,972 --> 00:16:50,242
My home is the
host-based forensics,

353
00:16:50,242 --> 00:16:53,145
but there are things
that I can do kind of

354
00:16:53,145 --> 00:16:55,314
to get the low hanging fruit,

355
00:16:55,314 --> 00:16:57,516
to see if I can find
those IP addresses

356
00:16:57,516 --> 00:17:01,453
so that I can pass them
off to my clients quickly

357
00:17:01,453 --> 00:17:04,690
so that they can start
blocking IP addresses.

358
00:17:04,690 --> 00:17:07,626
And like I said, there can
be internal IP addresses

359
00:17:07,626 --> 00:17:10,796
so I wanna look for those
so I know what other systems

360
00:17:10,796 --> 00:17:12,564
I can start looking at.

361
00:17:12,564 --> 00:17:15,634
So there's this great
utility I like to use

362
00:17:15,634 --> 00:17:18,569
by PDFStreamDumper called scdbg

363
00:17:19,738 --> 00:17:22,274
and this is just a
nice, simple program

364
00:17:22,273 --> 00:17:25,010
that you can run
over the file quickly

365
00:17:25,010 --> 00:17:29,081
to see if it can pull out
any interesting information

366
00:17:29,081 --> 00:17:31,082
from the shellcode.

367
00:17:31,083 --> 00:17:34,586
So it's pretty
simple to run, scdbg,

368
00:17:34,586 --> 00:17:36,522
you just point it to the file

369
00:17:36,522 --> 00:17:39,224
and it'll run over
that shellcode.

370
00:17:39,224 --> 00:17:41,260
And boom, right here I can see

371
00:17:41,260 --> 00:17:44,463
some libraries are being
called, a WSASocket.

372
00:17:45,631 --> 00:17:48,901
And then boom, I
get my IP address.

373
00:17:48,901 --> 00:17:51,136
Now I don't have
all the other code

374
00:17:51,136 --> 00:17:52,504
that goes along with this,

375
00:17:52,504 --> 00:17:55,506
but I know based
on this event ID,

376
00:17:55,507 --> 00:17:58,110
I know based on this methodology

377
00:17:58,110 --> 00:18:00,312
and just what we're
seeing out there,

378
00:18:00,312 --> 00:18:04,449
that this is more than likely
that reverse meterpreter shell

379
00:18:04,450 --> 00:18:06,385
that I'm looking for.

380
00:18:07,419 --> 00:18:09,455
Okay, but wait, there's more.

381
00:18:09,455 --> 00:18:13,058
So we had the Base64,
we had the compression,

382
00:18:13,058 --> 00:18:18,063
we had the payload, but the
attackers are still doing more

383
00:18:18,797 --> 00:18:20,866
to obfuscate this data.

384
00:18:20,866 --> 00:18:24,203
All right, so here we've
got our random service name,

385
00:18:24,203 --> 00:18:27,106
we've got the COMSPEC,
now can anybody tell me

386
00:18:27,106 --> 00:18:29,108
what level of Base64?

387
00:18:29,108 --> 00:18:32,077
Is this the Unicode or is
this the regular Base64?

388
00:18:33,512 --> 00:18:34,879
This is the Unicode right?

389
00:18:34,880 --> 00:18:36,148
This is what it looks.

390
00:18:36,148 --> 00:18:38,317
You can tell it's a
lot more voluminous.

391
00:18:38,317 --> 00:18:39,885
It has the a's in it.

392
00:18:39,885 --> 00:18:42,488
You don't see any of
the slashes in it,

393
00:18:42,488 --> 00:18:44,123
so this has been Unicoded.

394
00:18:44,123 --> 00:18:47,092
So we know about the
Unicode and here you can see

395
00:18:47,092 --> 00:18:48,794
there's an encodedcommand.

396
00:18:48,794 --> 00:18:52,231
And one thing about
PowerShell is sometimes

397
00:18:52,231 --> 00:18:54,633
you won't actually see
the encodedcommand,

398
00:18:54,633 --> 00:18:57,936
they'll use the shorthand
for it which I think is -e.

399
00:18:57,936 --> 00:19:01,740
Here they have a -nop,
which means no profile.

400
00:19:01,740 --> 00:19:04,343
They're gonna run the
PowerShell with no profile,

401
00:19:04,343 --> 00:19:08,113
but sometimes you'll see the
-nop written out as noprofile.

402
00:19:08,113 --> 00:19:10,182
So like in the
presentation previously

403
00:19:10,182 --> 00:19:12,784
where they were talking about
all the different variables

404
00:19:12,784 --> 00:19:14,486
and how you can switch it up.

405
00:19:14,486 --> 00:19:16,221
With these PowerShell
signatures,

406
00:19:16,221 --> 00:19:18,457
if you start thinking
about those signatures,

407
00:19:18,457 --> 00:19:19,858
same type a thing.

408
00:19:19,858 --> 00:19:22,895
It might be spelled out
encodedcommand, it might be -e,

409
00:19:22,895 --> 00:19:27,900
it might be spelled out
noprofile, or nop, or -whidden,

410
00:19:29,001 --> 00:19:30,235
or whatever the
shortcut is for that.

411
00:19:30,235 --> 00:19:32,971
So those are things that
if you're running your

412
00:19:32,971 --> 00:19:35,541
keyword searches, you're gonna
have to be careful about,

413
00:19:35,541 --> 00:19:38,177
that you don't get
trapped into just thinking

414
00:19:38,177 --> 00:19:41,312
one type of command
is always used.

415
00:19:41,313 --> 00:19:46,151
So right here we decoded
that first layer of Base64

416
00:19:46,151 --> 00:19:47,686
and guess what we get again?

417
00:19:48,554 --> 00:19:51,990
We get another layer of Base64.

418
00:19:51,990 --> 00:19:55,227
So they Base64
encoded it Unicode,

419
00:19:55,227 --> 00:19:59,731
now we have regular
Base64 again.

420
00:19:59,731 --> 00:20:02,701
And then on top of it,
we get compression.

421
00:20:02,701 --> 00:20:06,238
But this time if you
scan this string,

422
00:20:06,238 --> 00:20:09,408
you're gonna see it's
not Gzip compressed.

423
00:20:09,408 --> 00:20:11,376
It just says IO.Compression.

424
00:20:11,376 --> 00:20:15,013
And like I said, I am
not a PowerShell person.

425
00:20:15,013 --> 00:20:17,216
I'm a Pythonista, I love Python,

426
00:20:17,216 --> 00:20:18,917
so I wanted to figure out,

427
00:20:18,917 --> 00:20:20,651
okay what kind of
compression is this?

428
00:20:20,652 --> 00:20:22,287
It's not Gzip.

429
00:20:22,287 --> 00:20:25,224
I tried running it, put
it out to a Gzip file.

430
00:20:25,224 --> 00:20:28,460
So silly me, I think
okay, this is Windows,

431
00:20:28,460 --> 00:20:30,696
right, this has just gotta
be regular compression.

432
00:20:30,696 --> 00:20:33,031
So I just put it into
a regular zip file.

433
00:20:33,031 --> 00:20:34,332
I try and open that up.

434
00:20:34,333 --> 00:20:36,001
It doesn't work.

435
00:20:36,001 --> 00:20:40,072
I try several different Python
libraries to decompress this.

436
00:20:40,072 --> 00:20:44,642
I tried seeing if it was
.tar file, a .rar file,

437
00:20:44,643 --> 00:20:45,677
couldn't figure it out.

438
00:20:45,677 --> 00:20:47,678
Then finally I figured out,

439
00:20:47,679 --> 00:20:49,681
I call it just like
the .NET compression.

440
00:20:49,681 --> 00:20:51,650
I know the people in
here that know PowerShell

441
00:20:51,650 --> 00:20:54,152
are probably like yeah,
that's what it is, right?

442
00:20:54,152 --> 00:20:57,489
But I work with Python and if
you're familiar with Python,

443
00:20:57,489 --> 00:20:59,992
Python is cross-platform
compatible.

444
00:20:59,992 --> 00:21:03,195
It runs on Windows, in runs
on Linux, it runs on Mac,

445
00:21:03,195 --> 00:21:05,764
so when you talk about .NET,

446
00:21:05,764 --> 00:21:09,133
Python isn't gonna
restrict itself

447
00:21:09,134 --> 00:21:10,936
to just running on Windows.

448
00:21:10,936 --> 00:21:15,040
But me being stubborn, I'm
like there has to be a way

449
00:21:15,040 --> 00:21:16,608
to do this in Python.

450
00:21:16,608 --> 00:21:19,778
I wanna figure out how
to do this in Python.

451
00:21:19,778 --> 00:21:23,415
And I found something
called Iron Python.

452
00:21:23,415 --> 00:21:27,219
Iron Python brings
in .NET libraries

453
00:21:27,219 --> 00:21:29,521
so that you can utilize Python

454
00:21:29,521 --> 00:21:32,357
to do some of the
things on Windows.

455
00:21:32,357 --> 00:21:35,726
So by leveraging Iron Python
and some of the libraries,

456
00:21:35,727 --> 00:21:38,930
I was able to import those
libraries into Python

457
00:21:38,930 --> 00:21:41,433
so that I could access, what
I just kind of nicknamed

458
00:21:41,433 --> 00:21:43,935
IO.Compression or
.NET compression,

459
00:21:43,935 --> 00:21:46,605
because it seems specifically
related to PowerShell,

460
00:21:46,605 --> 00:21:49,241
not the typical compression
that you run across.

461
00:21:49,241 --> 00:21:51,710
So here I've just
imported the libraries.

462
00:21:51,710 --> 00:21:53,545
I wrote a function
where basically

463
00:21:53,545 --> 00:21:56,281
it's gonna take
that decoded Base64

464
00:21:56,281 --> 00:22:00,552
and then it's gonna decompress
it and give me the .txt file.

465
00:22:01,687 --> 00:22:03,955
And here's an example
of how you run it.

466
00:22:03,955 --> 00:22:05,590
You run it just
like regular Python,

467
00:22:05,590 --> 00:22:09,995
except you call ipy.exe
and the name of the script.

468
00:22:09,995 --> 00:22:12,129
All right, and so
here is an example

469
00:22:12,130 --> 00:22:16,201
of what an embedded
script looks like,

470
00:22:16,201 --> 00:22:18,670
once again setting up
a meterpreter shell.

471
00:22:18,670 --> 00:22:21,139
We have an IP
address with a port.

472
00:22:21,139 --> 00:22:23,574
Now in all of these
examples I've shown you,

473
00:22:23,575 --> 00:22:28,580
the PowerShell code embedded
within that Base64 can vary.

474
00:22:30,415 --> 00:22:33,151
You're not always gonna
see the same script

475
00:22:33,151 --> 00:22:35,954
embedded inside that Base64.

476
00:22:35,954 --> 00:22:37,822
The other thing
that's frustrating

477
00:22:37,823 --> 00:22:40,492
is within the case
what you're gonna see,

478
00:22:40,492 --> 00:22:44,363
or what we have seen,
is variations, right?

479
00:22:44,363 --> 00:22:46,331
So everything that
I just ran through,

480
00:22:46,331 --> 00:22:47,832
that's not what
you're gonna get.

481
00:22:47,833 --> 00:22:51,136
These pieces are gonna be put
together in different ways.

482
00:22:51,136 --> 00:22:53,472
Sometimes it will
be Base64 encoded.

483
00:22:53,472 --> 00:22:55,674
Sometimes it will
be Base64 Unicode.

484
00:22:55,674 --> 00:22:57,642
And then you're gonna
have your compression,

485
00:22:57,642 --> 00:22:59,711
IO.Compression and your Gzip

486
00:22:59,711 --> 00:23:01,213
and then maybe your shellcode.

487
00:23:01,213 --> 00:23:04,883
But you never quite know what
order that's gonna go into

488
00:23:04,883 --> 00:23:06,385
and what you're gonna do.

489
00:23:06,385 --> 00:23:09,788
And within each case,
it's going to vary.

490
00:23:09,788 --> 00:23:13,091
So maybe on May fifth,
when the attacker's in,

491
00:23:13,091 --> 00:23:14,559
they use one methodology.

492
00:23:14,559 --> 00:23:16,094
So great, you come
up with your script,

493
00:23:16,094 --> 00:23:18,864
you've got everything running,
you got everything working,

494
00:23:18,864 --> 00:23:21,299
and the you find a whole
new set of log entries

495
00:23:21,299 --> 00:23:25,137
from another day, and it's
gonna be completely different.

496
00:23:25,137 --> 00:23:27,072
A lotta times
they're using tools

497
00:23:27,072 --> 00:23:29,507
that automate this on the
backend to push it out.

498
00:23:32,110 --> 00:23:35,246
So I talked about that example
before where they're using

499
00:23:35,247 --> 00:23:38,817
S-E to push it out
within the environment.

500
00:23:38,817 --> 00:23:40,285
So you're thinking okay,

501
00:23:40,285 --> 00:23:43,255
they're using a service control
manager, that's persistence.

502
00:23:43,255 --> 00:23:47,092
No, they are actually just using
the service control manager

503
00:23:47,092 --> 00:23:48,627
to push it out.

504
00:23:48,627 --> 00:23:51,363
If you look in the event logs,
you'll actually see an error,

505
00:23:51,363 --> 00:23:54,132
because it's not a
legitimate service,

506
00:23:54,132 --> 00:23:56,368
they're just leveraging
it to push it out.

507
00:23:56,368 --> 00:24:00,906
So they still haven't gotten
their persistent mechanism yet.

508
00:24:00,906 --> 00:24:04,743
So ultimately, an attacker,
they wanna survive that reboot.

509
00:24:04,743 --> 00:24:09,748
They want that
persistent mechanism
within the environment.

510
00:24:10,916 --> 00:24:12,384
So there's something
that we've come across

511
00:24:12,384 --> 00:24:15,287
called WMI persistence.

512
00:24:15,287 --> 00:24:18,423
And basically they're using
the subscription service

513
00:24:18,423 --> 00:24:21,927
within the Windows
Management Instrumentation,

514
00:24:21,927 --> 00:24:23,895
to basically, I'd
like to think of it

515
00:24:23,895 --> 00:24:28,900
like a scheduled task that
is triggered by an action.

516
00:24:30,202 --> 00:24:32,003
So part of this
subscription is a filter.

517
00:24:32,003 --> 00:24:36,207
So in the filter they
can set certain triggers

518
00:24:36,208 --> 00:24:39,344
that will trigger this
backdoor to happen.

519
00:24:39,344 --> 00:24:42,214
And then once that
filter is triggered,

520
00:24:42,214 --> 00:24:44,149
it'll point to a consumer.

521
00:24:44,149 --> 00:24:48,285
The consumer is the executable
or the script that will run.

522
00:24:48,286 --> 00:24:50,188
And I'll show an example
of this in a minute.

523
00:24:50,188 --> 00:24:52,257
And then the third part
of this subscription

524
00:24:52,257 --> 00:24:54,926
is what's called a Filter
to Consumer binding.

525
00:24:54,926 --> 00:24:57,128
It's just the part
within the WMI

526
00:24:57,128 --> 00:25:02,033
that's gonna tell, hey, once
this specific action happens,

527
00:25:02,033 --> 00:25:05,437
this is the file that
I want you to execute.

528
00:25:05,437 --> 00:25:09,507
And this is all stored in
a file called OBJECTS.DATA.

529
00:25:09,508 --> 00:25:14,513
It's
C:\WINDOWS\system32\wbem\Reposi.

530
00:25:15,680 --> 00:25:18,650
Fireeye actually has a
great blog post on this

531
00:25:18,650 --> 00:25:20,785
that details everything.

532
00:25:20,785 --> 00:25:24,356
And there's a great Python
script, of course Python right,

533
00:25:24,356 --> 00:25:27,025
that you can run over this file

534
00:25:27,025 --> 00:25:29,728
that's gonna help you
find these things,

535
00:25:29,728 --> 00:25:30,829
PyWMIPersitenceFinder.

536
00:25:32,898 --> 00:25:35,332
So I went ahead and
ran this script.

537
00:25:35,333 --> 00:25:38,703
You can get this on
GitHub by David Pany.

538
00:25:38,703 --> 00:25:42,440
I ran this script
over one of these

539
00:25:42,440 --> 00:25:44,109
and let's take a
closer look at this.

540
00:25:44,109 --> 00:25:47,745
So here's a filter
called UPDATER.

541
00:25:47,746 --> 00:25:49,881
All right, I saw a hand.

542
00:25:49,881 --> 00:25:52,250
I couldn't quite see, Ron
or Kirtan do you know?

543
00:25:52,250 --> 00:25:53,885
Over here, okay.

544
00:25:53,885 --> 00:25:55,453
You wanna tell us what you see.

545
00:25:57,289 --> 00:25:58,490
Jarvas, right here.

546
00:25:59,624 --> 00:26:02,394
So here we have a
filter called UPDATER

547
00:26:02,394 --> 00:26:07,399
and it says AND
Targetinstance.EventCode
= '4625'

548
00:26:08,967 --> 00:26:12,270
and Targetinstance.Message
Like '%admin%'.

549
00:26:12,270 --> 00:26:13,204
So what do we think?

550
00:26:13,204 --> 00:26:15,440
What's the event code 4625?

551
00:26:15,440 --> 00:26:16,274
Whoops.

552
00:26:18,577 --> 00:26:23,582
4625 is associated with
failed login and then admin.

553
00:26:24,816 --> 00:26:28,787
So this means that if
we have a failed login

554
00:26:28,787 --> 00:26:33,525
for admin account, go
ahead and run the consumer,

555
00:26:33,525 --> 00:26:35,894
which is going to be
our PowerShell script.

556
00:26:35,894 --> 00:26:38,396
So basically, all the
attacker has to do

557
00:26:38,396 --> 00:26:40,498
to get their backshell
to trigger is,

558
00:26:40,498 --> 00:26:44,302
go in through RDP and try
and login like an admin

559
00:26:44,302 --> 00:26:47,072
and as long as that
password fails,

560
00:26:47,072 --> 00:26:49,407
so if they've changed
that admin password

561
00:26:49,407 --> 00:26:51,976
in the environment, it
doesn't even matter,

562
00:26:51,977 --> 00:26:54,479
the attacker can just go
in and try any password

563
00:26:54,479 --> 00:26:56,848
and as long as it fails,
it's gonna trigger

564
00:26:56,848 --> 00:26:58,750
that persistent mechanism.

565
00:26:58,750 --> 00:27:03,655
And once again, that
persistent mechanism is Base64.

566
00:27:03,655 --> 00:27:06,725
Here's the name of it,
it's called UPDATER.

567
00:27:06,725 --> 00:27:11,029
And here's our tie in right
here, that ties the filter

568
00:27:11,029 --> 00:27:12,764
to the consumer name

569
00:27:12,764 --> 00:27:15,600
and then of course
our Base64 encoding.

570
00:27:15,600 --> 00:27:17,668
Now like I said,
this can be encoded

571
00:27:17,669 --> 00:27:19,070
in all those different layers

572
00:27:19,070 --> 00:27:20,504
and all those different levels,

573
00:27:20,505 --> 00:27:24,075
so you'll have to go
through and decode that.

574
00:27:24,075 --> 00:27:26,911
All right now when we talk
about persistent mechanisms

575
00:27:26,911 --> 00:27:28,647
the registry, right?

576
00:27:28,647 --> 00:27:31,349
The registry has
lotsa good places

577
00:27:31,349 --> 00:27:32,884
for persistent mechanisms.

578
00:27:32,884 --> 00:27:36,121
We've got the autorun keys,
we have installed services,

579
00:27:36,121 --> 00:27:40,258
so using the tool Registry
Explorer by Eric Zimmerman

580
00:27:40,258 --> 00:27:42,994
you can go in and start
looking for these things.

581
00:27:42,994 --> 00:27:47,032
So here is an example
of an autorun key.

582
00:27:47,032 --> 00:27:48,733
And typically what I've seen,

583
00:27:48,733 --> 00:27:51,602
is I kinda call it,
following the breadcrumbs.

584
00:27:51,603 --> 00:27:53,738
If we take a look
at this autorun key,

585
00:27:53,738 --> 00:27:55,740
we can see the COMSPEC.

586
00:27:55,740 --> 00:27:58,610
We know that COMSPEC
is command.exe

587
00:27:58,610 --> 00:28:01,446
and typically you're not gonna
see that referenced like this

588
00:28:01,446 --> 00:28:02,746
in the registry.

589
00:28:02,747 --> 00:28:06,151
And then we can also
see, from Base64.

590
00:28:06,151 --> 00:28:09,621
But if you look here,
there's no Base64 here.

591
00:28:10,989 --> 00:28:12,657
Where's the Base64?

592
00:28:12,657 --> 00:28:14,859
We can see there's
something bad going on,

593
00:28:14,859 --> 00:28:17,529
but there's no Base64 here.

594
00:28:17,529 --> 00:28:19,998
And what this code
actually does,

595
00:28:19,998 --> 00:28:24,235
is it references another key.

596
00:28:24,235 --> 00:28:29,174
So right here it's
saying, go get this key

597
00:28:29,174 --> 00:28:32,811
and then run whatever
is in this key.

598
00:28:32,811 --> 00:28:35,813
So then you have
to go find that key

599
00:28:35,814 --> 00:28:40,185
to actually find
the Base64 code.

600
00:28:40,185 --> 00:28:43,588
And you can see right here
is a pretty big chunk a code.

601
00:28:43,588 --> 00:28:45,824
Now if you see something
like this, of course,

602
00:28:45,824 --> 00:28:48,093
it should be a huge red flag,

603
00:28:48,093 --> 00:28:50,395
because really, most programmers

604
00:28:50,395 --> 00:28:52,197
are not gonna do
something like this

605
00:28:52,197 --> 00:28:54,331
and put it in the registry.

606
00:28:55,500 --> 00:28:57,102
PowerShell logs.

607
00:28:57,102 --> 00:29:00,905
If you are lucky enough
to get PowerShell logs

608
00:29:00,905 --> 00:29:02,206
in your investigation,

609
00:29:02,207 --> 00:29:05,710
it can be a great
wealth of information

610
00:29:05,710 --> 00:29:08,913
and I believe Matt Bromley
and I worked a case

611
00:29:08,913 --> 00:29:10,815
where we saw
something like this.

612
00:29:12,250 --> 00:29:14,853
So if you go in and you look
at these PowerShell codes,

613
00:29:14,853 --> 00:29:16,087
or the PowerShell log,

614
00:29:16,087 --> 00:29:18,556
you're gonna find what's
called a scriptblock.

615
00:29:18,556 --> 00:29:22,727
So the attackers will use a
command called Downloadstring,

616
00:29:22,727 --> 00:29:25,563
and that Downloadstring
will download something

617
00:29:25,563 --> 00:29:28,166
off the internet into memory.

618
00:29:28,166 --> 00:29:30,735
And then when it's in
memory they can launch it.

619
00:29:30,735 --> 00:29:32,736
So something we'll see a lot of

620
00:29:32,737 --> 00:29:35,707
is something called
Invoke-Shellcode.

621
00:29:35,707 --> 00:29:37,976
And a lotta times, they
don't even stage this

622
00:29:37,976 --> 00:29:41,479
on their own system
or an IP address

623
00:29:41,479 --> 00:29:44,115
that you can pivot off of
or see a connection to,

624
00:29:44,115 --> 00:29:45,583
it's on GitHub.

625
00:29:45,583 --> 00:29:48,620
They literally go and they
just download the code

626
00:29:48,620 --> 00:29:51,089
directly from GitHub.

627
00:29:51,089 --> 00:29:53,992
And once they do
that, they execute it.

628
00:29:53,992 --> 00:29:55,593
And in this particular instance

629
00:29:55,593 --> 00:29:58,129
they inject it into a process.

630
00:29:58,129 --> 00:30:00,532
And this time it was notepad.

631
00:30:00,532 --> 00:30:02,300
Okay, now sometimes I mention,

632
00:30:02,300 --> 00:30:05,370
we can kind of use
programs like scdbg

633
00:30:05,370 --> 00:30:08,540
to go through and get
that low hanging fruit

634
00:30:08,540 --> 00:30:10,008
out of the shellcode,

635
00:30:10,008 --> 00:30:13,144
but sometimes, you
just might not be able

636
00:30:13,144 --> 00:30:16,114
to decode the shellcode.

637
00:30:16,114 --> 00:30:18,616
But here we have a process

638
00:30:18,616 --> 00:30:20,418
that we know that the shellcode

639
00:30:20,418 --> 00:30:23,221
is associated
with, with notepad.

640
00:30:23,221 --> 00:30:26,357
So if you are lucky enough
to get a memory sample

641
00:30:26,357 --> 00:30:27,859
along with it,

642
00:30:27,859 --> 00:30:31,663
you can go into that memory
sample and pull out those IOCs

643
00:30:31,663 --> 00:30:33,932
rather than kinda
jumping through the hoops

644
00:30:33,932 --> 00:30:36,434
of trying to decode
that shellcode.

645
00:30:38,870 --> 00:30:41,606
Were there any hands that
went up on the last slide?

646
00:30:43,942 --> 00:30:45,543
Anybody see that?

647
00:30:47,745 --> 00:30:48,879
Did I see a hand?

648
00:30:48,880 --> 00:30:50,315
I'm not sure who was first.

649
00:30:50,315 --> 00:30:52,050
I think over here
in the red shirt.

650
00:30:54,686 --> 00:30:55,485
Did you?

651
00:31:00,959 --> 00:31:02,560
The, what's that?

652
00:31:02,560 --> 00:31:05,163
Yes, that's Wonder
Woman's invisible plane.

653
00:31:05,163 --> 00:31:07,799
It's really hard to like
draw an invisible plane,

654
00:31:07,799 --> 00:31:09,968
so that was the best
I could do, okay,

655
00:31:09,968 --> 00:31:13,171
'cause she's invisible, but we
can see her body right there

656
00:31:13,171 --> 00:31:14,272
a little bit.

657
00:31:14,272 --> 00:31:15,439
Yeah, I was
wondering about that.

658
00:31:15,440 --> 00:31:16,608
What good is it to
have an invisible plane

659
00:31:16,608 --> 00:31:18,243
if you can see the person in it?

660
00:31:18,243 --> 00:31:21,012
Okay, so anyways if
we get memory sample

661
00:31:22,280 --> 00:31:24,816
we can run volatility
over this memory sample

662
00:31:24,816 --> 00:31:29,487
to dump what is in
that notepad process

663
00:31:29,487 --> 00:31:32,257
to pull out those IOCs.

664
00:31:32,257 --> 00:31:34,859
So we used a command
called imageinfo.

665
00:31:34,859 --> 00:31:37,528
The memory sample
to get the profile.

666
00:31:37,528 --> 00:31:40,365
Then moving forward
we used that profile.

667
00:31:40,365 --> 00:31:42,267
Then we're gonna run pslist

668
00:31:42,267 --> 00:31:43,902
to get the running process list.

669
00:31:43,902 --> 00:31:47,438
We find out which
instance is notepad

670
00:31:47,438 --> 00:31:49,774
and then we go ahead
and run the malfind,

671
00:31:49,774 --> 00:31:52,709
which is gonna find
injected processes

672
00:31:52,710 --> 00:31:55,313
and it's gonna dump
it out to a folder.

673
00:31:55,313 --> 00:31:57,582
And once we have that
dumped out, like I said,

674
00:31:57,582 --> 00:31:59,450
I just do the real simple stuff,

675
00:31:59,450 --> 00:32:01,286
grab the low hanging fruit.

676
00:32:01,286 --> 00:32:03,154
I'm just gonna run
strings over that

677
00:32:03,154 --> 00:32:04,622
and see what I can find.

678
00:32:04,622 --> 00:32:08,226
And right here, I've used
the inject shellcode,

679
00:32:08,226 --> 00:32:09,694
it's injected notepad.

680
00:32:09,694 --> 00:32:11,596
I'm able to dump that process

681
00:32:11,596 --> 00:32:14,499
and then get the IP address out.

682
00:32:19,971 --> 00:32:23,274
There's not, but did you
find something? (laughs)

683
00:32:23,274 --> 00:32:24,943
Is that? What is that?

684
00:32:24,943 --> 00:32:26,244
Tell me.

685
00:32:26,244 --> 00:32:28,212
Is that an Iron Man
or a Wonder Woman?

686
00:32:29,714 --> 00:32:32,116
Oh, Aquaman, okay.

687
00:32:32,116 --> 00:32:33,551
So we're going to whole another,

688
00:32:33,551 --> 00:32:36,287
isn't he in another
universe than these guys?

689
00:32:36,287 --> 00:32:37,188
I don't even know.

690
00:32:38,523 --> 00:32:40,190
I loved him though,
he's pretty awesome.

691
00:32:41,759 --> 00:32:43,661
So wrapping up in summary,

692
00:32:43,661 --> 00:32:48,533
what are the IOCs that we can
look for as investigators?

693
00:32:48,533 --> 00:32:50,368
I just kinda wanted
to present a slide,

694
00:32:50,368 --> 00:32:52,070
kind of with all of our IOCs.

695
00:32:52,070 --> 00:32:55,473
So system event log 7045.

696
00:32:55,473 --> 00:32:57,709
So if you've got a
splunk girl like we do,

697
00:32:57,709 --> 00:33:00,111
I work with Scott, he's
able to go through,

698
00:33:00,111 --> 00:33:04,082
and pull out all these
event logs in one shot

699
00:33:04,082 --> 00:33:07,218
and give us all
the basics before,

700
00:33:07,218 --> 00:33:08,920
and we can go through
and decode it.

701
00:33:08,920 --> 00:33:12,123
So this is a great magic
number I like to call,

702
00:33:12,123 --> 00:33:14,225
that immediately as you
start an investigation,

703
00:33:14,225 --> 00:33:16,394
you can start looking
for this event ID

704
00:33:16,394 --> 00:33:17,996
and see if you've
got this activity

705
00:33:17,996 --> 00:33:19,731
going on in the environment.

706
00:33:19,731 --> 00:33:21,232
There's also the event code

707
00:33:21,232 --> 00:33:25,703
that is in close
proximity to it, the 7009.

708
00:33:25,703 --> 00:33:27,672
This is the failed event.

709
00:33:27,672 --> 00:33:30,141
So what happens is, that
service control manager

710
00:33:30,141 --> 00:33:31,609
tries to start up.

711
00:33:31,609 --> 00:33:34,345
It actually fails, because
it's not a legitimate service,

712
00:33:34,345 --> 00:33:39,250
so you might also see the
7009 in close proximity.

713
00:33:39,250 --> 00:33:42,453
The other thing is, if you get
these Windows PowerShell logs

714
00:33:42,453 --> 00:33:43,855
you can look for these things,

715
00:33:43,855 --> 00:33:48,459
the Downloadstring,
executing a remote command,

716
00:33:48,459 --> 00:33:50,962
and you can also just
sort by the warnings

717
00:33:50,962 --> 00:33:52,230
in that event log.

718
00:33:52,230 --> 00:33:54,832
And Windows does a good
job of identifying those

719
00:33:54,832 --> 00:33:58,002
as malicious within
the event log itself.

720
00:33:58,002 --> 00:34:00,071
Search for that COMSPEC.

721
00:34:00,071 --> 00:34:01,839
Now you're probably not
gonna wanna run that

722
00:34:01,839 --> 00:34:04,675
as keyword search over
the entire computer,

723
00:34:04,675 --> 00:34:06,744
but we know that we
see it in the registry,

724
00:34:06,744 --> 00:34:09,212
we know that we see
it in the event logs,

725
00:34:09,213 --> 00:34:11,749
so that's a place that
you can be looking for it.

726
00:34:11,748 --> 00:34:14,685
And RegRipper is a
tool that I love to use

727
00:34:14,685 --> 00:34:16,087
because it's a
command line tool.

728
00:34:16,087 --> 00:34:18,156
I can roll it in
with my processes.

729
00:34:18,156 --> 00:34:20,391
You can use two
plugins in RegRipper

730
00:34:20,391 --> 00:34:22,427
to help you find
this, the AutoRuns,

731
00:34:22,427 --> 00:34:24,595
which is gonna show
you that first key,

732
00:34:24,594 --> 00:34:25,897
and then the Sizes.

733
00:34:25,897 --> 00:34:29,967
And the Sizes plugin
will look for any values

734
00:34:29,967 --> 00:34:34,172
within the binary and the
RegSize within the registry

735
00:34:34,172 --> 00:34:36,541
that are over a
certain threshold.

736
00:34:36,541 --> 00:34:38,376
And because we know
that PowerShell

737
00:34:38,376 --> 00:34:40,144
takes up a big chunk in there,

738
00:34:40,143 --> 00:34:42,612
it's gonna pull this stuff
out for you immediately

739
00:34:42,612 --> 00:34:44,047
and it does a good job.

740
00:34:44,047 --> 00:34:47,317
I shared my findings with
Harlan and he updated his plugin

741
00:34:47,318 --> 00:34:48,686
to help support that.

742
00:34:50,955 --> 00:34:53,056
- [Host] All right, big
round of applause for Mari.

743
00:34:53,056 --> 00:34:55,692
(host cheers)

744
00:34:55,693 --> 00:34:58,796
(suspenseful music)

