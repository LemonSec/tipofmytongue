1
00:00:10,176 --> 00:00:12,779
(applauding)

2
00:00:12,779 --> 00:00:16,082
- I would like to take
the opportunity to address

3
00:00:16,082 --> 00:00:18,785
a serious topic here
before I get going.

4
00:00:18,785 --> 00:00:23,023
Due to recent regulatory changes

5
00:00:23,023 --> 00:00:25,792
I've updated my privacy
policy that I'd like

6
00:00:25,792 --> 00:00:28,128
to let everyone know this.

7
00:00:28,128 --> 00:00:29,529
Right, you can come read it.

8
00:00:31,431 --> 00:00:35,268
And before we
proceed, you all must

9
00:00:35,268 --> 00:00:36,970
accept these cookies.

10
00:00:36,970 --> 00:00:39,305
Does everyone accept
these cookies?

11
00:00:39,305 --> 00:00:40,507
Thank you.

12
00:00:40,507 --> 00:00:43,309
The internet, you've
accepted them.

13
00:00:43,309 --> 00:00:46,312
Congratulations, you
are GDPR compliant.

14
00:00:47,747 --> 00:00:49,416
I don't think
that's how it works.

15
00:00:51,418 --> 00:00:54,854
Anyways, we're here
to talk about logging,

16
00:00:54,854 --> 00:00:56,756
monitoring, and
alerting in AWS today

17
00:00:56,756 --> 00:01:00,460
and I've been speaking about
this for a little while.

18
00:01:00,460 --> 00:01:02,796
And I have a lot of
in depth information,

19
00:01:02,796 --> 00:01:04,730
but what I wanted
to provide is a,

20
00:01:04,730 --> 00:01:07,467
essentially a too long,
didn't read version

21
00:01:07,467 --> 00:01:10,904
of what we should be looking at.

22
00:01:10,904 --> 00:01:12,104
There's a lot of documentation,

23
00:01:12,105 --> 00:01:13,673
there's a lot of
things to know about

24
00:01:13,673 --> 00:01:15,742
and there's a lot to take away.

25
00:01:15,742 --> 00:01:17,444
And I don't wanna
send you guys home,

26
00:01:17,444 --> 00:01:21,614
you folks home with
an additional years
worth of homework,

27
00:01:21,614 --> 00:01:24,417
so hopefully there are
some takeaways from here

28
00:01:24,417 --> 00:01:26,719
that you can immediately
apply and implement.

29
00:01:26,719 --> 00:01:29,521
So here's kind of the why me.

30
00:01:29,522 --> 00:01:31,124
I don't think it
really matters about me

31
00:01:31,124 --> 00:01:32,859
or what I've done,
but why am I here

32
00:01:32,859 --> 00:01:36,628
and why am I in a position
to talk to you about AWS

33
00:01:36,629 --> 00:01:39,666
and best practicing and logging,
monitoring, and alerting

34
00:01:39,666 --> 00:01:41,167
as it relates to IR.

35
00:01:41,167 --> 00:01:44,938
So I've spent an
inordinate amount of time

36
00:01:44,938 --> 00:01:48,842
researching AWS, I
helped build our incident

37
00:01:48,842 --> 00:01:52,745
respond service line and
it was about two or three

38
00:01:52,745 --> 00:01:55,615
years of just pouring through
the AWS documentation.

39
00:01:55,615 --> 00:01:57,083
Anyone that keeps up
with this sort of stuff,

40
00:01:57,083 --> 00:01:58,917
you know that literally
every single day,

41
00:01:58,918 --> 00:02:01,421
Amazon is coming out
with something new

42
00:02:02,856 --> 00:02:05,291
or a change to an existing
thing with a different name

43
00:02:05,291 --> 00:02:08,595
that you have to
constantly keep up with.

44
00:02:08,595 --> 00:02:12,065
So I want to take this
opportunity to consolidate

45
00:02:12,065 --> 00:02:14,466
my years of research so
that you don't have to

46
00:02:14,467 --> 00:02:17,437
go and do the same and say,
how do I even get started

47
00:02:17,437 --> 00:02:18,671
in this thing, what
are these main things

48
00:02:18,671 --> 00:02:20,472
that I need to look at?

49
00:02:20,473 --> 00:02:22,275
Just tell me what is
this condensed version

50
00:02:22,275 --> 00:02:24,244
of 30 minutes and what
can I take away to do?

51
00:02:24,244 --> 00:02:25,912
So here's the agenda.

52
00:02:25,912 --> 00:02:28,314
Always starts with
the AWS security model

53
00:02:28,314 --> 00:02:31,216
because it is very
critical to understanding

54
00:02:31,217 --> 00:02:32,952
deliniation and security there.

55
00:02:34,087 --> 00:02:35,888
And surprise, surprise,
logging, monitoring,

56
00:02:35,889 --> 00:02:37,390
and alerting is on the agenda.

57
00:02:37,390 --> 00:02:41,528
I have left some time in
for softball questions.

58
00:02:41,528 --> 00:02:42,661
So if we could queue those up,

59
00:02:42,662 --> 00:02:44,497
those would be much appreciated.

60
00:02:44,497 --> 00:02:46,232
Is this anyone here?

61
00:02:46,232 --> 00:02:47,767
Why they moved to AWS?

62
00:02:47,767 --> 00:02:49,869
This is how it works, right.

63
00:02:49,869 --> 00:02:52,605
Just take our responsibility
and just offload

64
00:02:52,605 --> 00:02:55,742
it to someone else because
this is super easy, right.

65
00:02:55,742 --> 00:02:57,376
Anyone?

66
00:02:57,377 --> 00:02:59,712
This is how organizations
work, thank you

67
00:02:59,712 --> 00:03:02,114
for a few people being honest.

68
00:03:02,115 --> 00:03:04,651
So not quite.

69
00:03:06,719 --> 00:03:08,954
There is a shared
responsibility model.

70
00:03:08,955 --> 00:03:12,025
This is not a unilateral
responsibility model.

71
00:03:12,025 --> 00:03:16,796
So AWS is responsible for
security of the cloud,

72
00:03:16,796 --> 00:03:19,198
the bare meta stuff
that they provide,

73
00:03:19,199 --> 00:03:20,934
the storage that they provide.

74
00:03:20,934 --> 00:03:24,204
The backend, essentially, of
the services they provide.

75
00:03:24,204 --> 00:03:26,406
But you are responsible for
everything above this line.

76
00:03:26,406 --> 00:03:28,942
So you're responsible
for security in the cloud

77
00:03:28,942 --> 00:03:32,045
and there is a distinct
difference, surprise, surprise,

78
00:03:32,045 --> 00:03:33,512
you are responsible for it.

79
00:03:33,513 --> 00:03:35,949
Securing your data,
all your applications

80
00:03:35,949 --> 00:03:37,217
that you build.

81
00:03:37,217 --> 00:03:39,752
Everything that you
design and construct

82
00:03:39,752 --> 00:03:42,388
and configure in there,
you are responsible for.

83
00:03:42,388 --> 00:03:43,790
And this is critical.

84
00:03:45,191 --> 00:03:47,560
I usually make everyone
repeat this in the audience

85
00:03:47,560 --> 00:03:49,128
and it's extremely
uncomfortable and I'm

86
00:03:49,128 --> 00:03:51,164
gonna make a game time
decision on whether

87
00:03:51,164 --> 00:03:52,165
I do this right now.

88
00:03:53,633 --> 00:03:57,136
No, I made you guys do it
last year so I'll skip this.

89
00:03:57,136 --> 00:03:59,906
These are the main log sources
we're gonna be looking at.

90
00:03:59,906 --> 00:04:03,376
So today's focus is
CloudTrail, CloudWatch, VPC,

91
00:04:03,376 --> 00:04:06,879
S3, and we're also
gonna throw in Config,

92
00:04:06,879 --> 00:04:08,748
which is a pretty useful thing.

93
00:04:08,748 --> 00:04:10,450
Yes, there are
other log sources.

94
00:04:10,450 --> 00:04:12,751
Yes, there's ELB and CloudFront
and other things like that,

95
00:04:12,752 --> 00:04:15,955
but they're not really
what I would consider

96
00:04:15,955 --> 00:04:17,590
the core critical
of what pretty much

97
00:04:17,589 --> 00:04:19,291
everyone is gonna
be able to use.

98
00:04:19,291 --> 00:04:21,560
So instead I'd like to
focus on these main five

99
00:04:21,560 --> 00:04:23,195
that we'll talk about today.

100
00:04:25,164 --> 00:04:29,269
So starting with CloudTrail,
if anyone is new to AWS

101
00:04:29,269 --> 00:04:31,738
or is starting an AWS
and what is this we hear

102
00:04:31,738 --> 00:04:33,239
about the slot, this
is probably the thing

103
00:04:33,239 --> 00:04:35,041
you're gonna hear the most
about an AWS CloudTrail.

104
00:04:35,041 --> 00:04:37,543
This is essentially
your syslog on steroids.

105
00:04:38,778 --> 00:04:40,813
Due to recent
developments in AWS,

106
00:04:40,813 --> 00:04:43,483
they are available for
90 days by default.

107
00:04:43,483 --> 00:04:45,151
They didn't used to be.

108
00:04:46,653 --> 00:04:50,323
But they've done you a
favor in enabling those,

109
00:04:50,323 --> 00:04:52,157
so worst case those
should at least have

110
00:04:52,158 --> 00:04:54,994
90 days worth of logs for you
to go back and do something

111
00:04:54,994 --> 00:04:56,696
should you identify an incident.

112
00:04:56,696 --> 00:05:00,500
And there's a couple pain
points here as there are

113
00:05:00,500 --> 00:05:02,502
with a few AWS services.

114
00:05:02,502 --> 00:05:05,338
Each region's logs
are kept only in that

115
00:05:05,338 --> 00:05:07,473
region's bucket, by default.

116
00:05:07,473 --> 00:05:11,377
So if you were operating
out of say, US East one,

117
00:05:11,377 --> 00:05:14,147
and you've enabled
CloudTrail logs

118
00:05:15,248 --> 00:05:17,417
and something happens
in your account

119
00:05:17,417 --> 00:05:20,085
and you say, okay great,
I'm gonna search through,

120
00:05:20,086 --> 00:05:21,721
I go to the bucket
where the CloudTrail is

121
00:05:21,721 --> 00:05:23,356
and US East one and
I search through it

122
00:05:23,356 --> 00:05:26,993
and there's only one instance
of this activity happening.

123
00:05:26,993 --> 00:05:29,295
Yes, in US East one.

124
00:05:29,295 --> 00:05:31,664
But for the 11 other
regions, you don't know

125
00:05:31,664 --> 00:05:33,832
because those logs aren't
stored in that bucket.

126
00:05:33,833 --> 00:05:35,668
It's very inconvenient.

127
00:05:35,668 --> 00:05:38,571
But there is one changing
configuration you can do

128
00:05:38,571 --> 00:05:41,808
that will pay you back
in spades and also,

129
00:05:41,808 --> 00:05:44,510
myself if I'm doing
the incident response

130
00:05:44,510 --> 00:05:46,913
or any of you all, if you're
doing the incident response

131
00:05:46,913 --> 00:05:50,149
and that is configuring
apply trail to all regions.

132
00:05:50,149 --> 00:05:53,286
This will by default
collect all of the regions

133
00:05:53,286 --> 00:05:54,887
into one bucket so
that when you're doing

134
00:05:54,887 --> 00:05:57,090
these searches in the
future, all you do is seaarch

135
00:05:57,090 --> 00:05:59,157
through a single bucket's
logs and you have access

136
00:05:59,158 --> 00:06:01,794
to all of what's happening
across the different regions.

137
00:06:01,794 --> 00:06:04,097
This is probably the
most important point

138
00:06:04,097 --> 00:06:05,498
from this presentation.

139
00:06:05,498 --> 00:06:06,998
If you take nothing else away,

140
00:06:06,999 --> 00:06:09,669
it's to click apply
trail to all regions

141
00:06:09,669 --> 00:06:10,902
whenever you see that.

142
00:06:10,903 --> 00:06:12,605
That is gonna be your
key to success there

143
00:06:12,605 --> 00:06:14,307
for global logging.

144
00:06:14,307 --> 00:06:17,844
CloudWatch, this essentially

145
00:06:18,978 --> 00:06:21,280
performance metrics
on your systems.

146
00:06:21,280 --> 00:06:22,347
These are enabled by default.

147
00:06:22,348 --> 00:06:24,350
They're sent every 15 minutes.

148
00:06:24,350 --> 00:06:26,419
If you do detailed
monitoring, they'll send it

149
00:06:26,419 --> 00:06:27,887
every one minute.

150
00:06:27,887 --> 00:06:31,324
They can be useful in a
sense, but more importantly

151
00:06:31,324 --> 00:06:35,128
CloudWatch can be
configured to also monitor

152
00:06:35,128 --> 00:06:38,464
your instances and
for those who are new,

153
00:06:38,464 --> 00:06:40,299
AWS instances is
essentially your systems.

154
00:06:40,299 --> 00:06:42,001
It's the virtual machine
that you're using.

155
00:06:42,001 --> 00:06:43,803
A term instances.

156
00:06:43,803 --> 00:06:47,039
So CloudWatch logs can
be configured to monitor

157
00:06:47,039 --> 00:06:49,776
your instances at a host level,

158
00:06:49,776 --> 00:06:51,277
which can be super convenient.

159
00:06:53,279 --> 00:06:57,450
Config is essentially
tracking resource compliance

160
00:06:57,450 --> 00:06:58,683
against a set of rules.

161
00:06:58,684 --> 00:07:00,153
So Config, short
for configuration,

162
00:07:00,153 --> 00:07:01,954
it's probably not a long
leap to understand that.

163
00:07:01,954 --> 00:07:05,558
This is easily set up by
the console or command line.

164
00:07:05,558 --> 00:07:10,563
And this delivers
logs to a SNS topic,

165
00:07:11,731 --> 00:07:13,299
which is essentially
something that can

166
00:07:13,299 --> 00:07:17,203
send alerts for emails
or if you're using

167
00:07:17,203 --> 00:07:21,506
a slack lank, can integrate
an API for notifications,

168
00:07:21,507 --> 00:07:24,577
simple notification
services, what it stands for.

169
00:07:24,577 --> 00:07:27,113
And a nice recent,
relatively recent development

170
00:07:27,113 --> 00:07:29,882
is that now this has multi
region data aggregation.

171
00:07:29,882 --> 00:07:32,351
So remember we talked about
CloudTrail, initially only

172
00:07:32,351 --> 00:07:33,920
logged to a single region,
but could you apply

173
00:07:33,920 --> 00:07:35,521
it to all to consolidate it.

174
00:07:35,521 --> 00:07:37,056
Config now has that capability.

175
00:07:37,056 --> 00:07:39,991
So as you may be picking up,
certain services by default

176
00:07:39,992 --> 00:07:42,562
are limited to a certain
region, which something

177
00:07:42,562 --> 00:07:44,163
you've always gotta keep
in mind as you go through

178
00:07:44,163 --> 00:07:45,565
and configure your accounts.

179
00:07:47,767 --> 00:07:50,937
Bonus, if you
configure the agent

180
00:07:50,937 --> 00:07:55,107
on all of your host end
points you can also use

181
00:07:55,107 --> 00:07:58,311
CloudWatch as
essentially a poor man's

182
00:07:58,311 --> 00:08:00,580
software inventory reporting
system and changes,

183
00:08:00,580 --> 00:08:04,550
to where if something's
installed or updated or changed

184
00:08:04,550 --> 00:08:07,386
this can then be sent to
CloudWatch for you logging

185
00:08:07,386 --> 00:08:10,122
and alerting on which can
be super useful sometimes.

186
00:08:12,458 --> 00:08:13,626
So S3.

187
00:08:13,626 --> 00:08:15,727
S3 is the main storage
service for AWS.

188
00:08:17,330 --> 00:08:21,300
Highly recommend you
configure these several things

189
00:08:22,168 --> 00:08:25,171
for any S3 bucket you're using.

190
00:08:25,171 --> 00:08:27,406
And if they delete multi-factor
authentication delete

191
00:08:27,406 --> 00:08:30,009
so this prevents,
and if some attacker

192
00:08:30,009 --> 00:08:31,511
from getting in there
and stealing someone's

193
00:08:31,511 --> 00:08:33,312
credentials and just going
deleting all the logs

194
00:08:33,312 --> 00:08:35,248
because as an attacker, that's
the first thing I would do.

195
00:08:35,248 --> 00:08:36,682
I get into an account, I'm
gonna go into CloudTrail,

196
00:08:36,682 --> 00:08:39,352
I'm gonna delete every single
log I can possibly find.

197
00:08:40,820 --> 00:08:42,555
This prevents, that requires
multi-factor authentication

198
00:08:42,554 --> 00:08:44,222
for someone to authenticate
so that someone

199
00:08:44,222 --> 00:08:46,892
can't just blindly go through
and do all that sort of stuff.

200
00:08:46,893 --> 00:08:49,262
Bucket level logging,
which they call,

201
00:08:49,262 --> 00:08:50,997
it's essentially
management level logging

202
00:08:50,997 --> 00:08:53,498
which is really high level
logging of this bucket

203
00:08:53,499 --> 00:08:55,268
was created, this
bucket was deleted.

204
00:08:55,268 --> 00:08:57,036
Very few things that
it's actually useful for.

205
00:08:57,036 --> 00:08:58,670
Enabled by default.

206
00:08:58,671 --> 00:09:00,806
But the object level
data logging is not

207
00:09:00,806 --> 00:09:02,041
enabled by default.

208
00:09:02,041 --> 00:09:04,877
So to put this into an example,

209
00:09:04,877 --> 00:09:07,646
we've had customers
come to us and say,

210
00:09:07,647 --> 00:09:11,217
we think data was accessed
or taken from an S3 bucket.

211
00:09:11,217 --> 00:09:13,752
And we say, okay great,
give us all the logs.

212
00:09:13,753 --> 00:09:15,988
And we get a bunch of
CloudTrail logs that show

213
00:09:15,988 --> 00:09:19,926
bucket created, bucket
deleted, bucket created,

214
00:09:19,926 --> 00:09:22,528
bucket deleted and
we're like that's great,

215
00:09:22,528 --> 00:09:24,664
but you didn't have
data event logging

216
00:09:24,664 --> 00:09:26,532
to see if any of the
data was accessed.

217
00:09:26,532 --> 00:09:28,801
This is a huge oversight.

218
00:09:28,801 --> 00:09:30,870
This is absolutely
critical for anything

219
00:09:30,870 --> 00:09:32,371
that resides in the
bucket to show what was

220
00:09:32,371 --> 00:09:34,273
put in there, what was
taken out of there.

221
00:09:34,273 --> 00:09:35,708
If you're creating things,
if you're removing things,

222
00:09:35,708 --> 00:09:36,909
if you're moving things around.

223
00:09:36,909 --> 00:09:39,078
Absolutely critical,
you want to enable this.

224
00:09:39,078 --> 00:09:41,847
Server access logs
are also a possibility

225
00:09:41,847 --> 00:09:43,382
to be enabled and
they're essentially

226
00:09:43,382 --> 00:09:45,351
a patchy-ish logs.

227
00:09:45,351 --> 00:09:47,620
So if you like a patchy logs,

228
00:09:47,620 --> 00:09:51,591
or if you hate a patchy logs,
these are a patchy logs.

229
00:09:51,591 --> 00:09:53,626
They can be useful.

230
00:09:53,626 --> 00:09:55,595
Again, these are the major
things that I would focus

231
00:09:55,595 --> 00:09:58,030
on for S3 configuration.

232
00:09:58,030 --> 00:09:59,298
VPC flow logs.

233
00:09:59,298 --> 00:10:01,601
These are essentially
net flow logs.

234
00:10:01,601 --> 00:10:03,970
If you've seen that flow,
you will be right at home

235
00:10:03,970 --> 00:10:05,204
with VPC flow logs.

236
00:10:05,204 --> 00:10:07,739
These can be enabled for
either the entire VPC,

237
00:10:07,740 --> 00:10:09,208
which is essentially,

238
00:10:09,208 --> 00:10:13,379
well you can consider like a
VLAN equivalent and On Premise.

239
00:10:13,379 --> 00:10:16,115
A subnet or an elastic
network interface,

240
00:10:16,115 --> 00:10:18,150
which essentially just
a network interface.

241
00:10:18,150 --> 00:10:20,386
So it can be looking solely
at a specific machine's

242
00:10:20,386 --> 00:10:24,323
equivalent of a knick, all
the way up to an entire VLAN.

243
00:10:25,658 --> 00:10:27,860
I highly recommend
enabling this for anything

244
00:10:27,860 --> 00:10:29,495
you remotely care about.

245
00:10:29,495 --> 00:10:32,732
Storage is cheap-ish in AWS.

246
00:10:32,732 --> 00:10:36,035
And these can provide
a massive amount

247
00:10:36,035 --> 00:10:39,204
of valuable data, especially
when doing incident response.

248
00:10:41,507 --> 00:10:43,409
And this is the
beautiful thing about AWS

249
00:10:43,409 --> 00:10:45,177
because if you have an
On Premise environment

250
00:10:45,177 --> 00:10:48,014
and you say, oh I
wanna enable network,

251
00:10:48,014 --> 00:10:51,350
I wanna enable netflow
logging today for

252
00:10:51,350 --> 00:10:55,821
this VLAN we have,
how long would it take

253
00:10:55,821 --> 00:10:57,490
you guys to do that?

254
00:10:57,490 --> 00:10:58,958
I mean the average person.

255
00:10:58,958 --> 00:11:00,992
A day, three days, a week.

256
00:11:00,993 --> 00:11:03,663
Six months to buy an
appliance and suffer

257
00:11:03,663 --> 00:11:05,931
through vendor stuff, right.

258
00:11:05,931 --> 00:11:07,633
This is literally a
click of a button.

259
00:11:07,633 --> 00:11:09,101
You go to the VPC and you go,

260
00:11:09,101 --> 00:11:12,238
enable VPC flow logs and they
automatically start going.

261
00:11:12,238 --> 00:11:14,006
Absolutely awesome.

262
00:11:15,541 --> 00:11:17,610
Each of these are logged
to CloudWatch logs

263
00:11:17,610 --> 00:11:19,679
as a separate log group
in a different stream.

264
00:11:19,679 --> 00:11:21,847
And you can create metrics
and filters for these.

265
00:11:21,847 --> 00:11:23,983
And we'll get into
these specific metrics

266
00:11:23,983 --> 00:11:25,617
and filters later on
in the presentation.

267
00:11:25,618 --> 00:11:28,688
But you can do things such
as, anything you would

268
00:11:28,688 --> 00:11:30,523
do with netflow data,
look for bruit force,

269
00:11:30,523 --> 00:11:32,091
RAP or SSH attempts.

270
00:11:32,091 --> 00:11:34,760
You can look for known
malicious traffic to Ips

271
00:11:34,760 --> 00:11:36,862
or large outbound
data transfers.

272
00:11:38,130 --> 00:11:41,467
So that was the logging
set up config of those

273
00:11:41,467 --> 00:11:43,803
four to five main areas.

274
00:11:43,803 --> 00:11:45,204
So what's the TLDR for this?

275
00:11:45,204 --> 00:11:46,738
So how do I enable these?

276
00:11:46,739 --> 00:11:48,941
CloudTrail and CloudWatch
are enabled by default,

277
00:11:48,941 --> 00:11:51,277
with the exception of the
few configuration things

278
00:11:51,277 --> 00:11:54,113
that I said to kind of
go in poke and adjust.

279
00:11:54,113 --> 00:11:58,150
These absolutely should
be configured by you.

280
00:11:58,150 --> 00:12:00,586
How do you centralize
them though?

281
00:12:00,586 --> 00:12:05,591
So CloudTrail, if we go
through and we configure it

282
00:12:06,759 --> 00:12:07,927
and we apply it to all
regions you have all

283
00:12:07,927 --> 00:12:09,695
of your CloudTrail
logs essentially stored

284
00:12:09,695 --> 00:12:12,198
in one bucket that you can
look for, which is amazing.

285
00:12:12,198 --> 00:12:14,132
Stored in a single S3
bucket for easy searching.

286
00:12:14,133 --> 00:12:16,202
That's the easy way to do it.

287
00:12:16,202 --> 00:12:19,538
When things are
sent to CloudWatch,

288
00:12:19,538 --> 00:12:23,075
it is actually considered
a separate log area

289
00:12:23,075 --> 00:12:26,812
and that can require a
kind of convoluted set up

290
00:12:26,812 --> 00:12:29,749
for centralization,
sending to a thing called

291
00:12:29,749 --> 00:12:32,418
Kenesis Streams which sends it
to this whole stream source.

292
00:12:32,418 --> 00:12:34,653
And then you use AWS slap
defunctions to kind of

293
00:12:34,653 --> 00:12:36,689
sent them wherever
else you'd like.

294
00:12:36,689 --> 00:12:38,824
You don't have to know
about that right now.

295
00:12:38,824 --> 00:12:40,992
But just keep that in
reference for the future.

296
00:12:40,993 --> 00:12:42,928
When you get down the road
and you get to CloudWatch

297
00:12:42,928 --> 00:12:45,397
stuff and you're like, how
do I centralize these at all

298
00:12:45,397 --> 00:12:47,600
because there's no button
to just click and do that.

299
00:12:48,534 --> 00:12:49,802
And how should I configure them?

300
00:12:49,802 --> 00:12:52,271
I gave you some tips
and tricks, but really

301
00:12:52,271 --> 00:12:53,939
you need to go read the docs.

302
00:12:53,939 --> 00:12:56,007
You really gotta understand
how your business works

303
00:12:56,008 --> 00:12:57,943
and really what you
need to focus on.

304
00:12:57,943 --> 00:12:59,145
Those are the core
stuff that I would say

305
00:12:59,145 --> 00:13:00,212
at minimum you should
have configure,

306
00:13:00,212 --> 00:13:01,480
but those aren't the end.

307
00:13:01,480 --> 00:13:03,415
So this should get you
started and at least

308
00:13:03,415 --> 00:13:04,817
have something to
take home and say,

309
00:13:04,817 --> 00:13:06,318
this is what we need
to be doing right

310
00:13:06,318 --> 00:13:07,787
and this is exactly how we
need to configure stuff.

311
00:13:07,787 --> 00:13:09,688
And we can figure the
rest out, the intricacies

312
00:13:09,688 --> 00:13:12,258
as we go down, but we've
got the core requirements.

313
00:13:14,160 --> 00:13:15,427
So for monitoring and alerting.

314
00:13:15,427 --> 00:13:16,896
So we've got the logging
covered, so how do I

315
00:13:16,896 --> 00:13:18,396
configure and set
up logging so I have

316
00:13:18,397 --> 00:13:20,199
all the right stuff coming
and where do I configure

317
00:13:20,199 --> 00:13:21,534
it to send it, so what about
monitoring and alerting?

318
00:13:21,534 --> 00:13:23,302
So we have the logs now
and they're coming in.

319
00:13:23,302 --> 00:13:25,271
So how do we monitor
and alert on them?

320
00:13:26,639 --> 00:13:29,608
Generally, this is how the
stuff breaks down for the APIs.

321
00:13:29,608 --> 00:13:33,579
Gets and Lists can indicate
a numeration or recon,

322
00:13:33,579 --> 00:13:35,281
describes lists look ups.

323
00:13:35,281 --> 00:13:36,848
Same sort of thing
for data collection,

324
00:13:36,849 --> 00:13:38,250
if an attacker is in there.

325
00:13:38,250 --> 00:13:40,085
If he starts seeing a
bunch of these in logs

326
00:13:40,085 --> 00:13:42,221
from a singular instance of

327
00:13:42,221 --> 00:13:45,758
API calls to get for your
entire infrastructure

328
00:13:45,758 --> 00:13:46,892
or describe that sort of stuff,

329
00:13:46,892 --> 00:13:48,060
that can be indicative
of an attacker

330
00:13:48,060 --> 00:13:50,396
going in and numerating
and doing recon.

331
00:13:50,396 --> 00:13:52,397
Delete, disable, remove.

332
00:13:52,398 --> 00:13:56,068
AWS has conveniently
built their API to have

333
00:13:56,068 --> 00:13:58,603
these sort of prefixes for
a lot of different services.

334
00:13:58,604 --> 00:14:01,173
So whatever service you
have, there is a lot

335
00:14:01,173 --> 00:14:03,142
of get whatever to
do a bunch of reads.

336
00:14:03,142 --> 00:14:04,777
And for every service
there's a lot of describe

337
00:14:04,777 --> 00:14:07,246
to do specific descriptions
of the configurations.

338
00:14:07,246 --> 00:14:09,415
And then if you
wanna delete stuff,

339
00:14:09,415 --> 00:14:10,882
it's typically delete something.

340
00:14:10,883 --> 00:14:12,151
It's super convenient.

341
00:14:12,151 --> 00:14:13,519
So this is typically
how they break down,

342
00:14:13,519 --> 00:14:14,887
to kind of give you an
overview of in general,

343
00:14:14,887 --> 00:14:17,589
what might these
API calls look like

344
00:14:17,590 --> 00:14:21,293
and what would I want to
monitor for different areas

345
00:14:21,293 --> 00:14:22,595
of focus, so log tampering,

346
00:14:22,595 --> 00:14:24,396
resource creation
modification lesion.

347
00:14:24,396 --> 00:14:26,298
This is a kind of
high level overview.

348
00:14:26,298 --> 00:14:30,569
So what services and logs
should I monitor specifically?

349
00:14:30,569 --> 00:14:34,339
Well all of these I would
say, which is kind of

350
00:14:34,340 --> 00:14:36,108
most of the major ones.

351
00:14:38,677 --> 00:14:40,746
And how should I do it?

352
00:14:40,746 --> 00:14:43,048
So what tools can I use
to monitor and alert

353
00:14:43,048 --> 00:14:45,651
and surprisingly, or not
surprisingly for those

354
00:14:45,651 --> 00:14:48,753
that saged to AWS, they
give you a lot of tools

355
00:14:48,754 --> 00:14:50,422
to do a lot of this yourself.

356
00:14:50,422 --> 00:14:54,660
So simply using native
tools, I would say this is

357
00:14:54,660 --> 00:14:57,429
what I would term the
quad-fecta of monitoring

358
00:14:57,429 --> 00:14:58,964
and alerting using native tools.

359
00:14:58,964 --> 00:15:02,334
Config, CloudTrail,
CloudWatch, and Lambda,

360
00:15:02,334 --> 00:15:05,103
you can pretty much do
almost everything you'd

361
00:15:05,104 --> 00:15:06,305
want to do from
monitoring and alerting

362
00:15:06,305 --> 00:15:08,140
with those four services.

363
00:15:08,140 --> 00:15:10,742
And supporting tools,
trusted advisor.

364
00:15:10,743 --> 00:15:13,212
That kind of gives you
a break down of things

365
00:15:13,212 --> 00:15:15,414
that AWS is looking
at in your account.

366
00:15:15,414 --> 00:15:17,348
These basic checks
that are saying,

367
00:15:17,349 --> 00:15:19,084
you probably
shouldn't have this,

368
00:15:19,084 --> 00:15:20,486
this is an alert you
might wanna look at,

369
00:15:20,486 --> 00:15:22,187
this is kind of
configured this way,

370
00:15:22,187 --> 00:15:23,522
you might wanna check that out.

371
00:15:23,522 --> 00:15:25,057
Kind of their pro
bono thing for,

372
00:15:25,057 --> 00:15:28,260
there's a free tier and
there's a paid tier, obviously

373
00:15:28,260 --> 00:15:30,863
and there's Guard Duty, if
anyone has heard of that,

374
00:15:30,863 --> 00:15:34,133
that's a relatively
new-ish service

375
00:15:34,133 --> 00:15:36,702
and that automatically
monitors your VPC

376
00:15:36,702 --> 00:15:38,070
flow logs which are net flow.

377
00:15:38,070 --> 00:15:41,206
Your CloudTrail
logs and DNS logs.

378
00:15:41,206 --> 00:15:43,809
Even if you don't
have DNS configured.

379
00:15:45,144 --> 00:15:48,814
So this is kind of
awesome as your first step

380
00:15:48,814 --> 00:15:49,747
toward monitoring and alerting.

381
00:15:49,748 --> 00:15:51,183
You may wanna check this out.

382
00:15:52,551 --> 00:15:55,521
But of course, it's
region limited.

383
00:15:55,521 --> 00:15:56,921
So remember I said earlier,
some of these services

384
00:15:56,922 --> 00:15:59,224
or a lot of these services
are region limited

385
00:15:59,224 --> 00:16:01,727
to begin with so you gotta
keep an eye out for these.

386
00:16:04,029 --> 00:16:06,198
The upside is this logs the
CloudWatch so you can do

387
00:16:06,198 --> 00:16:08,100
some kind of CloudWatchy
things to get them

388
00:16:08,100 --> 00:16:10,636
centralized as I hit
on a little bit earlier

389
00:16:10,636 --> 00:16:12,070
and we'll get into
a little bit later.

390
00:16:12,071 --> 00:16:14,640
Another caviat is only analyzes

391
00:16:14,640 --> 00:16:16,141
CloudTrail management events.

392
00:16:16,141 --> 00:16:18,877
Which are higher level,
resource created,

393
00:16:18,877 --> 00:16:23,314
resource deleting configuration
chain sort of stuff.

394
00:16:23,315 --> 00:16:25,517
If you want to be
monitoring things like

395
00:16:26,719 --> 00:16:29,488
we hit on for S3 bucket
object access logging

396
00:16:29,488 --> 00:16:32,224
for objects created,
deleted, that sort of stuff,

397
00:16:32,224 --> 00:16:33,459
this is not gonna do it.

398
00:16:33,459 --> 00:16:34,693
You have to set
that up yourself.

399
00:16:34,693 --> 00:16:36,694
So that's a kind of
important caviat.

400
00:16:37,997 --> 00:16:39,798
Here's kind of example
of native monitoring

401
00:16:39,798 --> 00:16:41,133
and alerting infrastructure.

402
00:16:41,133 --> 00:16:43,369
This is just taken straight from

403
00:16:44,903 --> 00:16:48,073
Amazon's answer segment
of their set up.

404
00:16:48,073 --> 00:16:49,875
So this is kind of
how you might expect

405
00:16:49,875 --> 00:16:51,910
a native set up to look.

406
00:16:51,910 --> 00:16:53,945
And this kind of thing
can be super powerful

407
00:16:53,946 --> 00:16:55,848
and can pretty much
get you to to the last

408
00:16:55,848 --> 00:16:57,750
80, 90% of what
you might wanna do.

409
00:16:59,485 --> 00:17:04,256
So how about specific examples
for monitoring and alerting.

410
00:17:04,256 --> 00:17:06,692
So CloudWatch alarms.

411
00:17:06,692 --> 00:17:08,660
CloudWatch has two
things you can use

412
00:17:08,660 --> 00:17:10,162
for monitoring and alerting.

413
00:17:10,162 --> 00:17:12,331
It has alarms and events and
first we'll hit on alarms.

414
00:17:12,330 --> 00:17:14,198
So these are essentially
basic notifications

415
00:17:14,199 --> 00:17:16,068
for certain sorts of things.

416
00:17:16,068 --> 00:17:19,437
So for billing, I would
suggest setting up an alarm

417
00:17:19,438 --> 00:17:21,040
when a certain
threshold is reached

418
00:17:21,040 --> 00:17:24,009
because it's not just
important for managing costs,

419
00:17:24,009 --> 00:17:28,781
but remember everything in AWS
essentially costs something.

420
00:17:28,781 --> 00:17:30,282
It's cost based on usage.

421
00:17:30,282 --> 00:17:32,283
So if an attacker is in
there and they're spending

422
00:17:32,284 --> 00:17:33,719
up a bunch of instances
and they're doing

423
00:17:33,719 --> 00:17:36,355
a bunch of stuff, that's likely
going to incur some costs.

424
00:17:36,355 --> 00:17:38,457
So if you have some general
understanding of your baseline,

425
00:17:38,457 --> 00:17:40,225
what it should
and shouldn't hit,

426
00:17:40,225 --> 00:17:42,061
there should be an alarm
in there that says,

427
00:17:42,061 --> 00:17:43,962
if this ever reaches
this level or this thing,

428
00:17:43,962 --> 00:17:45,864
just send me a notification
so I can check it out.

429
00:17:45,864 --> 00:17:48,333
You might be surprised
at how many incidents

430
00:17:48,333 --> 00:17:50,836
you can catch by just
looking at billing alerts.

431
00:17:52,538 --> 00:17:56,475
System logs, so you can
create alarms for system logs

432
00:17:56,475 --> 00:17:57,943
that you may be monitoring
with CloudWatch.

433
00:17:57,943 --> 00:17:59,311
So you can create
a metric in alarm

434
00:17:59,311 --> 00:18:01,413
on any RDP connections,
or even maybe

435
00:18:01,413 --> 00:18:02,881
PS Exec being run on systems.

436
00:18:02,881 --> 00:18:04,850
This is really powerful stuff.

437
00:18:04,850 --> 00:18:09,021
You can create an
alarm for any instance

438
00:18:09,021 --> 00:18:12,324
being stopped, terminated,
rebooted, or recovered.

439
00:18:12,324 --> 00:18:16,061
And you can use
flow logs to monitor

440
00:18:16,061 --> 00:18:17,696
for network traffic
spikes and C2 activity

441
00:18:17,696 --> 00:18:18,964
with CloudWatch alarms.

442
00:18:18,964 --> 00:18:20,198
So you can set up
an alarm and say,

443
00:18:20,199 --> 00:18:21,700
if there's a spike
in network traffic,

444
00:18:21,700 --> 00:18:23,068
maybe you wanna
set it up and say

445
00:18:23,068 --> 00:18:24,570
network traffic shouldn't
spike that these

446
00:18:24,570 --> 00:18:26,370
hours of the day, maybe at
night or something like that.

447
00:18:26,371 --> 00:18:27,573
And I'm gonna get an
alarm if there's ever

448
00:18:27,573 --> 00:18:29,274
high usage of network
traffic at night.

449
00:18:29,274 --> 00:18:32,744
Or if I have particular
malicious IP addresses

450
00:18:32,744 --> 00:18:34,346
that I wanna look for,
I can set up alarms

451
00:18:34,346 --> 00:18:36,582
that say if you ever see
this, send me an alarm,

452
00:18:36,582 --> 00:18:39,118
send me a notification, let
me know what's going on.

453
00:18:40,486 --> 00:18:42,387
So CloudWatch events are little
bit different than alarms.

454
00:18:42,387 --> 00:18:43,889
They're not just a notification.

455
00:18:43,889 --> 00:18:45,991
They're to perform
actions in response

456
00:18:45,991 --> 00:18:47,493
to certain things that happen.

457
00:18:47,493 --> 00:18:49,394
So you can send yourself an
alarm when something happens,

458
00:18:49,394 --> 00:18:52,064
but you might wanna do something
in response to that action

459
00:18:52,064 --> 00:18:54,032
and this is where
CloudWatch events come in.

460
00:18:54,032 --> 00:18:58,236
So running through a bunch
of the major services,

461
00:18:58,237 --> 00:18:59,671
how can we use CloudWatch
events to really

462
00:18:59,671 --> 00:19:01,440
monitor and alert
on those things.

463
00:19:01,440 --> 00:19:03,976
So for CloudTrail, if
you're sending logs to them

464
00:19:03,976 --> 00:19:06,445
you might want to
perform some reaction

465
00:19:06,445 --> 00:19:08,547
if you see a stop logging API

466
00:19:08,547 --> 00:19:10,516
or a delete trail API call made.

467
00:19:10,516 --> 00:19:12,251
So you may want to
send a notification

468
00:19:12,251 --> 00:19:15,320
to the security team
saying, hey this happened.

469
00:19:15,320 --> 00:19:16,421
Remember we did
CloudWatch alarms,

470
00:19:16,421 --> 00:19:17,956
say hey this thing happened.

471
00:19:17,956 --> 00:19:19,457
Someone did a stop
logging and delete trail

472
00:19:19,458 --> 00:19:21,693
which we shouldn't
be having done,

473
00:19:21,693 --> 00:19:23,595
and then with an event
you can actually take

474
00:19:23,595 --> 00:19:25,130
that data an format it
into an email and give

475
00:19:25,130 --> 00:19:27,866
them that data of who did
it and where it came from

476
00:19:27,866 --> 00:19:29,902
and a source IP and
all that sort of stuff.

477
00:19:29,902 --> 00:19:31,503
It can be really powerful.

478
00:19:31,503 --> 00:19:34,673
Say you have an unsupported
instance type created.

479
00:19:34,673 --> 00:19:36,675
You can use a Lambda
function which is essentially

480
00:19:36,675 --> 00:19:39,444
a response code you
run that's server-less,

481
00:19:39,444 --> 00:19:42,147
that just runs at
hawk in real time

482
00:19:42,147 --> 00:19:43,514
in response to certain events.

483
00:19:43,515 --> 00:19:46,351
You can code NOJS or Javascript
or Python or whatever.

484
00:19:46,351 --> 00:19:48,820
You can say, oh if
there's this unsupported

485
00:19:48,820 --> 00:19:51,189
instance type, I wanna
create this function and say,

486
00:19:51,190 --> 00:19:53,625
whatever that instance type is,

487
00:19:53,625 --> 00:19:55,627
whatever that instance ID
is, go and shut that down

488
00:19:55,627 --> 00:19:57,829
because should never be created.

489
00:19:57,829 --> 00:20:00,331
I personally have some of
these set up for our team

490
00:20:00,332 --> 00:20:04,937
where if someone spends
up a massive GPU instance

491
00:20:04,937 --> 00:20:06,437
or something like
that that's completely

492
00:20:06,438 --> 00:20:09,074
unnecessary for our line
of work, it shuts it down.

493
00:20:09,074 --> 00:20:11,143
There's no reason to be
having that source up front.

494
00:20:11,143 --> 00:20:13,545
Using this to leverage,
force multiply for yourself.

495
00:20:13,545 --> 00:20:15,247
You don't have to
specifically respond

496
00:20:15,247 --> 00:20:16,682
to every one of these things.

497
00:20:16,682 --> 00:20:18,951
You can leverage
CloudWatch events to say,

498
00:20:18,951 --> 00:20:21,553
immediately do this
until I get to it.

499
00:20:21,553 --> 00:20:23,422
So immediately shut it down,
or immediately terminate,

500
00:20:23,422 --> 00:20:24,990
or immediately do whatever.

501
00:20:24,990 --> 00:20:27,526
If an instance is
terminated, you can create

502
00:20:27,526 --> 00:20:29,361
a CloudWatch event, say if
anything is ever terminated

503
00:20:29,361 --> 00:20:32,698
quickly grab some logs from
it before you shut it down.

504
00:20:32,698 --> 00:20:36,301
How useful would it be
to have some information

505
00:20:36,301 --> 00:20:38,604
from that system before
it's completely blown away.

506
00:20:38,604 --> 00:20:40,973
Especially companies that
are using auto scaling,

507
00:20:40,973 --> 00:20:42,574
where they have thousands
of instances spun up

508
00:20:42,574 --> 00:20:44,209
and spun down all the time.

509
00:20:44,209 --> 00:20:47,145
And we go and talk to them,
preparing for incident

510
00:20:47,145 --> 00:20:48,113
response blah, blah,
blah and they're like,

511
00:20:48,113 --> 00:20:49,381
but we're using auto scaling.

512
00:20:49,381 --> 00:20:50,482
How would we ever get
information from systems

513
00:20:50,482 --> 00:20:52,050
that are already terminated?

514
00:20:52,050 --> 00:20:53,619
Well this is a great
way to do that.

515
00:20:53,619 --> 00:20:56,355
So set up some rules that
before it's terminated

516
00:20:56,355 --> 00:20:57,689
just collect some
basic information.

517
00:20:57,689 --> 00:20:59,091
Maybe you wanna collect
some basic logging.

518
00:20:59,091 --> 00:21:01,059
Maybe you wanna collect
some certain metadata

519
00:21:01,059 --> 00:21:03,495
about about the instance
before it completely shuts down

520
00:21:03,495 --> 00:21:05,330
so you have some insight
into what was going on.

521
00:21:05,330 --> 00:21:06,697
So if an attacker spins
it up and does something

522
00:21:06,698 --> 00:21:08,734
and shuts it down,
terminates it without this,

523
00:21:08,734 --> 00:21:10,636
you're not gonna
have the information.

524
00:21:12,204 --> 00:21:13,972
For GuardDuty, you could
use CloudWatch events

525
00:21:13,972 --> 00:21:16,208
to just configure
all those findings

526
00:21:16,208 --> 00:21:18,210
to be converted into an event.

527
00:21:18,210 --> 00:21:20,012
And then monitor for
these specific findings.

528
00:21:20,012 --> 00:21:23,715
So GuardDuty uses findings
as basically it's,

529
00:21:23,715 --> 00:21:25,384
each piece of
information that it says,

530
00:21:25,384 --> 00:21:27,152
this is something I found
that's probably an alert,

531
00:21:27,152 --> 00:21:29,254
and you might wanna
do something to it.

532
00:21:31,890 --> 00:21:34,493
If a new user is created,
maybe you wanna disable

533
00:21:34,493 --> 00:21:36,094
the account until it's reviewed.

534
00:21:36,094 --> 00:21:37,929
Maybe you only want
one person doing this

535
00:21:37,929 --> 00:21:39,765
and maybe you say, I'm
putting in an event

536
00:21:39,765 --> 00:21:42,000
that says, if an account
is created by anyone

537
00:21:42,000 --> 00:21:44,936
other than this person,
immediately disable that,

538
00:21:44,936 --> 00:21:46,170
I need to review it.

539
00:21:47,239 --> 00:21:49,875
Or if there's gratuitous
failed logins,

540
00:21:49,875 --> 00:21:51,143
you can send an
email to yourself.

541
00:21:51,143 --> 00:21:52,911
You can block the
IP immediately.

542
00:21:54,179 --> 00:21:56,481
Anything you put your
mind to that you wanna

543
00:21:56,481 --> 00:21:58,784
code in Python and use
these libraries to do,

544
00:21:58,784 --> 00:22:00,252
it's pretty awesome.

545
00:22:00,252 --> 00:22:02,654
If there's log files
deleted from an S3 bucket,

546
00:22:02,654 --> 00:22:05,324
you may wanna respond
and send notification

547
00:22:05,324 --> 00:22:07,859
and compile that
information into who did

548
00:22:07,859 --> 00:22:09,593
this delete request and
send me an email with it

549
00:22:09,594 --> 00:22:10,862
because I wanna know
exactly when someone

550
00:22:10,862 --> 00:22:12,531
deletes stuff from
a certain bucket.

551
00:22:12,531 --> 00:22:14,733
Or if a sensitive
role is assumed.

552
00:22:14,733 --> 00:22:16,501
If you have this admin
role that you're using

553
00:22:16,501 --> 00:22:17,936
for only a certain set
of people to do stuff,

554
00:22:17,936 --> 00:22:19,804
you can create a Lambda
function that says,

555
00:22:19,805 --> 00:22:23,241
whoever assumed this role
that's not in this list,

556
00:22:23,241 --> 00:22:24,609
immediately disable their
account because they should

557
00:22:24,609 --> 00:22:25,843
have never assumed
a role onto this

558
00:22:25,844 --> 00:22:27,412
and something is
immediately wrong.

559
00:22:29,414 --> 00:22:32,484
Trusted Advisory I hit
on a little bit earlier.

560
00:22:33,919 --> 00:22:37,789
Say you have unutilized or
underutilized EC2 instances.

561
00:22:39,224 --> 00:22:40,958
If an instance is just
sitting there running

562
00:22:40,959 --> 00:22:42,294
for three months, maybe
you want these scripts

563
00:22:42,294 --> 00:22:44,329
running that say if
something is sitting

564
00:22:44,329 --> 00:22:46,031
for more than a week and no
one's using it, shut it down.

565
00:22:46,031 --> 00:22:47,765
This can be great
for billing and also

566
00:22:47,766 --> 00:22:50,569
just to reduce your
attack surface as well.

567
00:22:50,569 --> 00:22:53,071
If you have an access
key publicly exposed,

568
00:22:53,071 --> 00:22:54,805
respond immediately,
delete the access key,

569
00:22:54,806 --> 00:22:56,508
and send an email notification.

570
00:22:56,508 --> 00:22:57,743
That could be super useful.

571
00:22:57,743 --> 00:23:00,312
There's a lot of S3
bucket negligence awards

572
00:23:00,312 --> 00:23:04,349
that are occurring in
the news and there's

573
00:23:04,349 --> 00:23:05,783
always someone's leaking a key

574
00:23:05,784 --> 00:23:06,952
and always someone is
leaving a bucket wide open.

575
00:23:06,952 --> 00:23:08,620
So these are some
great things to kind of

576
00:23:08,620 --> 00:23:10,322
address that and mitigate that.

577
00:23:10,322 --> 00:23:12,256
If a known malicious
IP is seen in your VPC

578
00:23:12,257 --> 00:23:15,427
net flow logs, respond
in a certain way.

579
00:23:15,427 --> 00:23:18,330
Run a command to capture
memory on that system.

580
00:23:18,330 --> 00:23:20,499
Use the Lambda function
to isolate that instance.

581
00:23:20,499 --> 00:23:23,502
If you see bruit forcing
alarm with the offending Ips

582
00:23:23,502 --> 00:23:24,803
in a traffic summary.

583
00:23:24,803 --> 00:23:26,738
And if you see large
outbound data tranfers,

584
00:23:26,738 --> 00:23:28,740
perhaps you just wanna
be looking at these

585
00:23:28,740 --> 00:23:30,909
VPC flow logs and say,

586
00:23:30,909 --> 00:23:33,578
if there is any
outbound connection

587
00:23:33,578 --> 00:23:35,747
that's sending way more
data out than is coming in,

588
00:23:35,747 --> 00:23:37,449
that's a problem, we
need to alert on that

589
00:23:37,449 --> 00:23:39,484
and say that's a possible
data ex fill attempt

590
00:23:39,484 --> 00:23:42,754
and that needs to immediately
be made known to us.

591
00:23:42,754 --> 00:23:44,156
How easy is this stuff
to do On Premises?

592
00:23:44,156 --> 00:23:45,424
It's not easy.

593
00:23:45,424 --> 00:23:46,858
You couldn't just take
an On Premise network

594
00:23:46,858 --> 00:23:49,226
and say, well I'm
gonna start capturing

595
00:23:49,227 --> 00:23:50,829
all net flow today and
I'm gonna create a role

596
00:23:50,829 --> 00:23:53,398
that notifies me on any
large outbound data transfer,

597
00:23:53,398 --> 00:23:54,632
larger than X.

598
00:23:54,633 --> 00:23:58,203
AWS becomes extremely
powerful in this regard

599
00:23:58,203 --> 00:23:59,471
in allowing you to
do so many things

600
00:23:59,471 --> 00:24:01,106
that you could not do
before On Premises.

601
00:24:02,707 --> 00:24:04,142
For configuration
rules and changes,

602
00:24:04,142 --> 00:24:06,778
perhaps you wanna send
notification request

603
00:24:06,778 --> 00:24:08,013
when anything changes.

604
00:24:08,013 --> 00:24:09,380
Perhaps you have a
static environment.

605
00:24:09,381 --> 00:24:10,916
You wanna say if
anything changes in here,

606
00:24:10,916 --> 00:24:13,985
I wanna send an alert and
I wanna trigger something.

607
00:24:13,985 --> 00:24:15,419
Or maybe every once
in a while I wanna run

608
00:24:15,420 --> 00:24:18,290
validation that
all of my accounts

609
00:24:18,290 --> 00:24:20,692
have multi-factor
authentication enabled on them.

610
00:24:20,692 --> 00:24:22,194
And if someone's disabled
them in the meantime,

611
00:24:22,194 --> 00:24:24,361
if I run a scan and
that's disabled,

612
00:24:24,362 --> 00:24:26,298
their account's gonna be
disabled and an email's

613
00:24:26,298 --> 00:24:27,766
gonna be sent to them and say,

614
00:24:27,766 --> 00:24:29,434
hey this is a problem,
you need to re-enable this

615
00:24:29,434 --> 00:24:32,537
and it won't be enabled until
you respond back to this.

616
00:24:32,537 --> 00:24:35,740
You can run checks
for unused IPs.

617
00:24:35,740 --> 00:24:37,242
If a user is created.

618
00:24:37,242 --> 00:24:38,909
The sky is the limit here.

619
00:24:38,910 --> 00:24:40,312
I could run through all
these specific things,

620
00:24:40,312 --> 00:24:44,216
but this is essentially
some key ways

621
00:24:44,216 --> 00:24:46,618
to be using the Config service

622
00:24:46,618 --> 00:24:48,352
to be monitoring
for resource changes

623
00:24:48,353 --> 00:24:50,889
considering Config is
monitoring for these already.

624
00:24:52,757 --> 00:24:54,459
So that's a bunch
of native tools,

625
00:24:55,660 --> 00:24:57,095
which pretty much
cover the gamete,

626
00:24:57,095 --> 00:24:58,263
but there are third party tools

627
00:24:58,263 --> 00:25:00,665
that do an awesome job as well.

628
00:25:00,665 --> 00:25:02,033
And I wanna make sure
I call those out.

629
00:25:02,033 --> 00:25:05,203
So here's a list, I'm
not gonna go into them.

630
00:25:05,203 --> 00:25:09,474
But this is probably
a great core set

631
00:25:09,474 --> 00:25:11,208
of third party tools if
you were going to look

632
00:25:11,209 --> 00:25:14,613
into them for monitoring
and alerting in AWS.

633
00:25:14,613 --> 00:25:17,649
These companies have
not done anything

634
00:25:17,649 --> 00:25:19,751
starkly different
than anyone else,

635
00:25:19,751 --> 00:25:21,586
except they've looked
AWS and they lived in it

636
00:25:21,586 --> 00:25:24,022
long enough that they've
said, I wanna automate

637
00:25:24,022 --> 00:25:27,091
this sort of thing, I
wanna harness AWS resources

638
00:25:28,193 --> 00:25:29,694
better for our purposes.

639
00:25:29,694 --> 00:25:31,329
And so they put together these
packages that use mostly,

640
00:25:31,329 --> 00:25:33,732
just absolutely
native AWS stuff.

641
00:25:33,732 --> 00:25:35,000
It's nothing you
couldn't do yourself,

642
00:25:35,000 --> 00:25:36,034
but they've already
put in the hard work

643
00:25:36,034 --> 00:25:37,469
for doing this sort of stuff.

644
00:25:37,469 --> 00:25:39,304
So I highly recommend
checking these out as well.

645
00:25:39,304 --> 00:25:41,006
So what's the TLDR of this?

646
00:25:41,006 --> 00:25:42,274
What should I be monitoring?

647
00:25:42,274 --> 00:25:44,042
Everything, essentially.

648
00:25:44,042 --> 00:25:46,110
And it's not that hard.

649
00:25:46,111 --> 00:25:47,779
It's hard to hear,
year monitor everything

650
00:25:47,779 --> 00:25:48,980
and you're like, oh great.

651
00:25:48,980 --> 00:25:50,982
That's a big let down,
but as you can see

652
00:25:50,982 --> 00:25:52,751
a lot of this stuff is
just one click away.

653
00:25:52,751 --> 00:25:54,052
It's not that hard to configure.

654
00:25:54,052 --> 00:25:56,154
At least get it
enabled and going.

655
00:25:57,322 --> 00:25:59,524
And at least you know
there's both native

656
00:25:59,524 --> 00:26:00,792
and third party tools.

657
00:26:00,792 --> 00:26:02,026
I went through all
the native tools,

658
00:26:02,027 --> 00:26:04,062
or most of the core
native tools that you

659
00:26:04,062 --> 00:26:06,598
wanna use for
monitory and alerting.

660
00:26:06,598 --> 00:26:09,200
It's a decent size list,
but it's not impossible.

661
00:26:10,635 --> 00:26:13,438
In what order should I set
up monitoring and alerting?

662
00:26:13,438 --> 00:26:15,307
So that's sometimes a
difficult question to answer

663
00:26:15,307 --> 00:26:17,309
and I started thinking
about this and I thought,

664
00:26:17,309 --> 00:26:20,979
it's not really that
dissimilar from setting up

665
00:26:20,979 --> 00:26:23,214
an actually useful
thread intel program.

666
00:26:23,214 --> 00:26:25,082
So thread intel is a huge rage

667
00:26:25,083 --> 00:26:27,252
and how do I set up a
thread intel program?

668
00:26:28,553 --> 00:26:30,288
I often see a lot of companies,
they go and they say,

669
00:26:30,288 --> 00:26:33,124
well what feeds can we
buy and we'll just pay

670
00:26:33,124 --> 00:26:34,793
for all this external
stuff and third party tools

671
00:26:34,793 --> 00:26:36,293
and blah, blah, blah.

672
00:26:36,294 --> 00:26:37,529
And I don't think that's
necessarily the right way.

673
00:26:37,529 --> 00:26:39,497
I think the right
way is to follow

674
00:26:39,497 --> 00:26:40,699
this sort of model
at the bottom.

675
00:26:40,699 --> 00:26:42,000
So first you've
gotta clearly define

676
00:26:42,000 --> 00:26:43,802
what you're gonna monitor.

677
00:26:43,802 --> 00:26:45,437
You wanna monitor everything
or just certain things,

678
00:26:45,437 --> 00:26:47,906
certain VPCs, certain critical
areas, certain servers?

679
00:26:47,906 --> 00:26:49,040
Identify that.

680
00:26:49,040 --> 00:26:50,542
Understand your
existing valuable data.

681
00:26:50,542 --> 00:26:53,110
Your most valuable signatures

682
00:26:53,111 --> 00:26:55,880
are what you're seeing already.

683
00:26:55,880 --> 00:26:57,015
Those are signatures.

684
00:26:57,015 --> 00:26:58,249
You already have these.

685
00:26:58,249 --> 00:26:59,918
You have thread intel,
you have signatures for

686
00:26:59,918 --> 00:27:02,087
data that you're gonna
monitor and alert on.

687
00:27:02,087 --> 00:27:03,121
These exist in your environment.

688
00:27:03,121 --> 00:27:04,789
You've just gotta look for it.

689
00:27:04,789 --> 00:27:08,393
So implement and exhaust
your native tools.

690
00:27:08,393 --> 00:27:10,629
Number one, and this
is what I recommend

691
00:27:10,629 --> 00:27:13,031
for anyone to do before
they start looking

692
00:27:13,031 --> 00:27:14,866
at third part stuff.

693
00:27:14,866 --> 00:27:17,369
There is so much
you can do in AWS

694
00:27:17,369 --> 00:27:19,070
and I provided kind
of a small road map

695
00:27:19,070 --> 00:27:22,107
and core cutout of
those that you really

696
00:27:22,107 --> 00:27:24,075
shouldn't even be
considering third party stuff

697
00:27:24,075 --> 00:27:25,577
until you've
exhausted all those.

698
00:27:25,577 --> 00:27:26,778
And if you think you have
exhausted native stuff,

699
00:27:26,778 --> 00:27:28,880
really go back and
re-look at this stuff

700
00:27:28,880 --> 00:27:31,282
because there's a lot of data
that you could easily miss.

701
00:27:31,282 --> 00:27:32,216
Only then should you
really start looking

702
00:27:32,217 --> 00:27:33,451
at third party tools and say,

703
00:27:33,451 --> 00:27:34,953
hey I know what I've got.

704
00:27:34,953 --> 00:27:36,354
I know what I need
to be monitoring.

705
00:27:36,354 --> 00:27:38,156
I'm doing everything
I can and you know,

706
00:27:38,156 --> 00:27:39,957
if it's just a
shortage of man power,

707
00:27:39,958 --> 00:27:41,159
that's great, use
a third party tool.

708
00:27:41,159 --> 00:27:42,560
But you need to be
in a position to say,

709
00:27:42,560 --> 00:27:44,095
I know I'm already doing
the best that I can

710
00:27:44,095 --> 00:27:45,196
with native tools
before I start looking

711
00:27:45,196 --> 00:27:46,563
at third party set up.

712
00:27:48,466 --> 00:27:50,901
And I think that's it.

713
00:27:50,902 --> 00:27:52,337
Thank you very much.

714
00:27:52,337 --> 00:27:55,373
(applauding)

715
00:27:55,373 --> 00:27:58,043
(intense music)

