1
00:00:00,600 --> 00:00:02,669
(serene music)

2
00:00:10,176 --> 00:00:13,847
(audience applause)

3
00:00:13,847 --> 00:00:15,382
- Okay, hi I'm Yogesh Khatri

4
00:00:15,382 --> 00:00:19,819
and I'm gonna be talking
about Mac forensics today.

5
00:00:20,987 --> 00:00:23,590
Most people know me as
a Windows forensics guy

6
00:00:23,590 --> 00:00:26,626
and about three years ago,

7
00:00:26,626 --> 00:00:29,696
I decided to take the
leap into Mac forensics

8
00:00:29,696 --> 00:00:33,433
and teach myself how
the Mac OS works.

9
00:00:33,433 --> 00:00:37,937
And this is pretty much a
culmination of that effort.

10
00:00:37,937 --> 00:00:41,474
I decided that the best
way to learn Mac forensics

11
00:00:41,474 --> 00:00:45,144
would be to start
from the ground up.

12
00:00:45,145 --> 00:00:49,449
And how about learn
about all the artifacts

13
00:00:49,449 --> 00:00:51,550
and write code to parse them.

14
00:00:51,551 --> 00:00:52,819
Not only parse them,

15
00:00:52,819 --> 00:00:54,320
but basically search,
find and parse them.

16
00:00:54,320 --> 00:00:57,557
And that's what led to this
project being developed.

17
00:01:00,126 --> 00:01:02,095
But that was not the
only inspiration.

18
00:01:02,095 --> 00:01:03,530
There were a lot
of frustrations.

19
00:01:03,530 --> 00:01:05,498
There was a lot
of needs and goals

20
00:01:05,498 --> 00:01:07,267
that I had for this project.

21
00:01:07,267 --> 00:01:10,869
When I started looking
for tools as all of us do,

22
00:01:10,870 --> 00:01:13,373
you don't wanna write tools
if they already exist.

23
00:01:14,741 --> 00:01:18,311
So when I searched for
tools that already existed,

24
00:01:18,311 --> 00:01:23,316
I couldn't find any that would
do what I wanted them to do.

25
00:01:24,717 --> 00:01:28,655
My goals were something
that's free open-source,

26
00:01:28,655 --> 00:01:31,591
something that would work
with a full disk image,

27
00:01:31,591 --> 00:01:35,428
something that I could just
hit the button it would go.

28
00:01:35,428 --> 00:01:38,231
It would mount the image,
pull out the artifacts,

29
00:01:38,231 --> 00:01:39,732
and then present them

30
00:01:39,732 --> 00:01:41,768
in something like
spreadsheet-like format,

31
00:01:41,768 --> 00:01:44,104
which, all of us
like Excel, right?

32
00:01:44,104 --> 00:01:47,740
So setting out to do that,

33
00:01:49,075 --> 00:01:50,210
couldn't find any tools,

34
00:01:50,210 --> 00:01:51,511
everything that was out there

35
00:01:51,511 --> 00:01:54,914
already assumed that
you had a Mac image

36
00:01:54,914 --> 00:01:56,850
and it was already mounted up.

37
00:01:56,850 --> 00:02:00,086
And most tools that I saw

38
00:02:00,086 --> 00:02:02,489
that would go and
pull out artifacts,

39
00:02:02,489 --> 00:02:05,391
would simply open up all of
the plists and SQLite database

40
00:02:05,391 --> 00:02:06,893
and then dump data back

41
00:02:06,893 --> 00:02:10,330
into a flat-out text file
or something like that.

42
00:02:10,330 --> 00:02:12,198
They were either proprietary,

43
00:02:12,198 --> 00:02:15,101
not free, or dependent
on Objective C,

44
00:02:15,101 --> 00:02:16,503
and they could
only run on a Mac,

45
00:02:16,503 --> 00:02:19,905
or they required .NET,

46
00:02:19,906 --> 00:02:21,374
which meant they only
worked on Windows.

47
00:02:21,374 --> 00:02:23,309
There were other problems.

48
00:02:23,309 --> 00:02:26,813
up until, I wanna
say six months back,

49
00:02:26,813 --> 00:02:29,815
most tools, including
commercial ones,

50
00:02:29,816 --> 00:02:32,418
actually all tools
that I know of,

51
00:02:32,418 --> 00:02:34,354
did not support LZM compression,

52
00:02:34,354 --> 00:02:38,258
which is something that Mac
has had since El Capitan.

53
00:02:39,492 --> 00:02:41,494
LZM compression, that includes,

54
00:02:41,494 --> 00:02:43,696
if you take a count of
the number of files,

55
00:02:43,696 --> 00:02:46,166
anywhere between 30
to 50% of your files,

56
00:02:46,166 --> 00:02:47,634
were LZM-compressed.

57
00:02:47,634 --> 00:02:50,236
And that meant you were missing
a big chunk of that data.

58
00:02:50,236 --> 00:02:52,438
In the last few months,
most tools have caught up,

59
00:02:52,438 --> 00:02:54,673
but back then I believe
BlackLight was the only tool

60
00:02:54,674 --> 00:02:57,076
that could read a disk image

61
00:02:57,076 --> 00:03:01,214
and show you all your
LZM-compressed files correctly.

62
00:03:01,214 --> 00:03:05,151
So with all this in
mind, I said well,

63
00:03:06,319 --> 00:03:07,921
if nothing exists,
we'll create a tool

64
00:03:07,921 --> 00:03:11,891
that will go ahead and
do what we want it to do,

65
00:03:11,891 --> 00:03:13,760
which was work with
full disk images.

66
00:03:15,328 --> 00:03:19,832
Other than that there was
also the sheer volume of files

67
00:03:19,832 --> 00:03:22,168
that really bothered me.

68
00:03:23,703 --> 00:03:26,439
On a Mac, any of the
recent versions of Mac,

69
00:03:26,439 --> 00:03:31,444
from three or four years ago,
three or four versions back,

70
00:03:32,812 --> 00:03:34,447
the sheer volume of plists
and SQLite database,

71
00:03:34,447 --> 00:03:37,784
does anybody know
how many plists exist
on a Mac these days,

72
00:03:37,784 --> 00:03:39,219
on just a base install?

73
00:03:40,520 --> 00:03:41,387
Take a guess.

74
00:03:42,922 --> 00:03:43,756
800.

75
00:03:45,258 --> 00:03:46,192
Anything else?

76
00:03:47,460 --> 00:03:49,929
1,000 maybe, 2,000, 3,000.

77
00:03:51,497 --> 00:03:53,433
It's actually 20,000.

78
00:03:53,433 --> 00:03:56,069
Close to twenty thousand,
only plist files,

79
00:03:56,069 --> 00:04:00,540
several hundred
SQLite databases,

80
00:04:00,540 --> 00:04:01,908
several dozens of logs.

81
00:04:01,908 --> 00:04:03,176
I didn't wanna go through

82
00:04:03,176 --> 00:04:04,977
and parse each one
of this manually.

83
00:04:04,978 --> 00:04:07,947
I did some Mac forensics
several years ago.

84
00:04:07,947 --> 00:04:09,515
It was a lot simpler then,

85
00:04:09,515 --> 00:04:13,619
but now I didn't wanna go
through 20,000 plists manually.

86
00:04:13,620 --> 00:04:16,289
So that was another
reason where I decided,

87
00:04:16,289 --> 00:04:19,358
well, you can't do
this manually, you
have to automate it.

88
00:04:19,358 --> 00:04:20,560
Let's go there.

89
00:04:20,560 --> 00:04:22,495
Another reason
for automation is,

90
00:04:24,497 --> 00:04:26,199
this thing called SFL files.

91
00:04:27,333 --> 00:04:29,769
Manual analysis
can only go so far.

92
00:04:29,769 --> 00:04:31,738
How many of you
encountered SFL files

93
00:04:31,738 --> 00:04:33,740
and tried to read them?

94
00:04:33,740 --> 00:04:35,708
Raise of hands please.

95
00:04:35,708 --> 00:04:36,976
A few people have.

96
00:04:36,976 --> 00:04:38,311
If you've been
doing Mac forensics,

97
00:04:38,311 --> 00:04:40,380
you've probably come
across SFL files.

98
00:04:40,380 --> 00:04:45,385
Again, these have been seen
since El Capitan onwards.

99
00:04:46,786 --> 00:04:47,987
These are the ones

100
00:04:47,987 --> 00:04:50,523
that keep track of your
recent items mostly.

101
00:04:50,523 --> 00:04:52,025
These files look
something like this.

102
00:04:52,025 --> 00:04:54,060
They are not
human-readable plists,

103
00:04:54,060 --> 00:04:56,296
they are meant to
be machine readable.

104
00:04:58,231 --> 00:05:01,034
This looks complicated at first.

105
00:05:01,034 --> 00:05:03,903
You can't make heads or tails
of it just by looking at it.

106
00:05:03,903 --> 00:05:06,472
So is it impossible
to read this by hand?

107
00:05:06,472 --> 00:05:08,274
No, you can't read this.

108
00:05:08,274 --> 00:05:12,412
Let me show you how you
can read this SFL files.

109
00:05:12,412 --> 00:05:16,282
You start by going to
the dollar objects.

110
00:05:17,717 --> 00:05:20,119
The dollar objects
thing over there

111
00:05:20,119 --> 00:05:23,423
and you number all of
your objects in that tree.

112
00:05:25,425 --> 00:05:28,061
Once you number the objects,
you start at object number one,

113
00:05:28,061 --> 00:05:31,330
and then you start
reading those values out.

114
00:05:31,331 --> 00:05:33,533
And from what you can see here,

115
00:05:33,533 --> 00:05:36,502
object number one
is a NS dictionary,

116
00:05:36,502 --> 00:05:38,838
but you don't actually see that,

117
00:05:38,838 --> 00:05:40,573
because I haven't quite expanded

118
00:05:40,573 --> 00:05:42,842
that dollar class
variable there.

119
00:05:42,842 --> 00:05:45,277
But I can tell you it is
a for-type dictionary.

120
00:05:45,278 --> 00:05:48,715
And dictionaries are just
key value pair tables,

121
00:05:48,715 --> 00:05:49,549
if you may.

122
00:05:50,717 --> 00:05:52,885
So here, you can
see there are about,

123
00:05:54,120 --> 00:05:56,923
okay, let's try
the laser pointer,

124
00:05:56,923 --> 00:05:58,358
that's the keys value

125
00:05:58,358 --> 00:06:02,562
and right there is the values
associated to the keys.

126
00:06:02,562 --> 00:06:04,731
There are three keys
here, two three and four.

127
00:06:04,731 --> 00:06:09,335
And the corresponding values
are five, six, and ten.

128
00:06:09,335 --> 00:06:12,238
Except these themselves,
are not the keys and values.

129
00:06:12,238 --> 00:06:15,775
These are the locations
to the keys and values.

130
00:06:15,775 --> 00:06:18,378
So that would be the
location of the first key.

131
00:06:19,679 --> 00:06:20,780
And that means the first key

132
00:06:20,780 --> 00:06:22,782
is located at object number two,

133
00:06:22,782 --> 00:06:24,484
which is located down there.

134
00:06:24,484 --> 00:06:26,686
So the key itself is version.

135
00:06:27,954 --> 00:06:31,391
And the value
corresponding to that key

136
00:06:31,391 --> 00:06:33,760
is in object number five,

137
00:06:33,760 --> 00:06:36,195
which would be the value one.

138
00:06:36,195 --> 00:06:38,831
So after this analysis,

139
00:06:38,831 --> 00:06:42,235
you then have your key value
pair, version equal to one.

140
00:06:43,403 --> 00:06:44,771
And this is an
iterative process.

141
00:06:44,771 --> 00:06:49,075
You keep doing this
throughout to read this file.

142
00:06:49,075 --> 00:06:51,544
Not efficient for humans.

143
00:06:51,544 --> 00:06:53,413
Machines can do it
in a split second.

144
00:06:54,280 --> 00:06:56,248
So if you keep reading that,

145
00:06:56,249 --> 00:06:57,950
the next thing you
will see in there

146
00:06:57,950 --> 00:07:00,820
is the next key value
pair is three and six.

147
00:07:01,988 --> 00:07:04,524
Key represented at
three, value at six.

148
00:07:04,524 --> 00:07:05,858
And, oops!

149
00:07:08,094 --> 00:07:09,562
I don't think we can see that,

150
00:07:09,562 --> 00:07:12,298
but there was supposed
to be a highlight

151
00:07:12,298 --> 00:07:14,167
around object number six.

152
00:07:14,167 --> 00:07:19,171
Three is version and six
is that thing over there.

153
00:07:20,606 --> 00:07:23,042
This is object number six,
it's another dictionary.

154
00:07:23,042 --> 00:07:26,813
So you have this dictionary
embedded over here.

155
00:07:26,813 --> 00:07:29,115
You have a dictionary
inside a dictionary.

156
00:07:29,115 --> 00:07:30,716
And very quickly it
gets complicated,

157
00:07:30,716 --> 00:07:32,919
as you have nesting
and embedding involved.

158
00:07:32,919 --> 00:07:37,089
So, again, difficult
to interpret manually.

159
00:07:37,089 --> 00:07:39,192
But if I keep moving forward,

160
00:07:39,192 --> 00:07:40,860
and confusing the
hell out of everyone,

161
00:07:40,860 --> 00:07:44,697
which is not the point
of this talk today,

162
00:07:44,697 --> 00:07:46,432
we'll just quickly move ahead.

163
00:07:47,633 --> 00:07:50,803
So here you have one
more key value pair,

164
00:07:50,803 --> 00:07:52,205
which is seven and eight.

165
00:07:52,205 --> 00:07:54,073
And those are the values.

166
00:07:54,073 --> 00:07:58,144
So
com.apple.LSSharedFileList.MaxA,

167
00:07:58,144 --> 00:07:59,512
value equal to ten.

168
00:08:02,048 --> 00:08:04,016
This is the reconstructed plist.

169
00:08:04,016 --> 00:08:06,185
Instead of those 50 lines,

170
00:08:06,185 --> 00:08:09,689
once you read it manually,
you can reconstruct this.

171
00:08:09,689 --> 00:08:12,725
Or better write a program
to reconstruct this

172
00:08:12,725 --> 00:08:17,730
human readable plist
from that SFL plist.

173
00:08:19,198 --> 00:08:21,167
So again, an example of where
manual analysis really fails,

174
00:08:21,167 --> 00:08:23,068
and you have to write
a program to do this.

175
00:08:23,069 --> 00:08:25,171
So for all of these
reasons put together,

176
00:08:25,171 --> 00:08:26,973
I decided to create Mac_apt.

177
00:08:28,374 --> 00:08:30,409
So what exactly is Mac_apt?

178
00:08:30,409 --> 00:08:31,577
Before I talk about that,

179
00:08:31,577 --> 00:08:33,779
I'm talking about a little bit

180
00:08:33,779 --> 00:08:37,683
of the design, of what the
design considerations were.

181
00:08:37,683 --> 00:08:40,486
As forensic analysts, as I
mentioned, we love Excel.

182
00:08:40,486 --> 00:08:42,288
We like to see
Excel-like output.

183
00:08:42,288 --> 00:08:43,756
The output of Mac_apt

184
00:08:43,756 --> 00:08:46,158
once it's done processing
the various artifacts

185
00:08:46,158 --> 00:08:49,595
is gonna be in CSV
files, Excel databases

186
00:08:49,595 --> 00:08:51,297
and SQLite databases.

187
00:08:52,431 --> 00:08:56,335
As for input, this will
work with E01 files,

188
00:08:56,335 --> 00:08:59,839
the gold standard, I
suppose, for imaging.

189
00:08:59,839 --> 00:09:03,109
Not the gold standard, but
the most used standard.

190
00:09:03,109 --> 00:09:05,144
It'll work with DD images.

191
00:09:05,144 --> 00:09:09,248
You can feed it
individual artifacts too.

192
00:09:10,416 --> 00:09:12,685
So if you're working
in forensics,

193
00:09:12,685 --> 00:09:15,054
you're likely to have a
full disk image to process.

194
00:09:15,054 --> 00:09:16,521
If you're working IR,

195
00:09:16,522 --> 00:09:19,325
very likely you only have
individual artifacts,

196
00:09:19,325 --> 00:09:21,394
plists and SQLite databases

197
00:09:21,394 --> 00:09:23,329
which you've already
collected from a triage.

198
00:09:23,329 --> 00:09:26,832
Or maybe you wanna run
Mac_apt on the actual system

199
00:09:26,832 --> 00:09:27,934
and get output.

200
00:09:27,934 --> 00:09:29,135
All of that is possible.

201
00:09:30,303 --> 00:09:31,304
So it works with
full disk images,

202
00:09:31,304 --> 00:09:32,738
works with individual artifacts,

203
00:09:32,738 --> 00:09:35,207
also works with mounted images.

204
00:09:35,207 --> 00:09:36,842
If you have an image
already mounted up,

205
00:09:36,842 --> 00:09:39,178
you can point it to
the root of that image.

206
00:09:39,178 --> 00:09:41,180
It will go parse
everything out for you.

207
00:09:42,548 --> 00:09:45,184
In the interest of time we're
gonna move quickly here.

208
00:09:47,186 --> 00:09:48,621
It's completely open-source.

209
00:09:48,621 --> 00:09:50,790
Every library we've used,

210
00:09:50,790 --> 00:09:52,992
we've made sure its
platform agnostic.

211
00:09:52,992 --> 00:09:55,728
And it works on
Windows, Linux and Mac.

212
00:09:57,296 --> 00:09:59,732
There is a native HFS
parser which I put in there,

213
00:09:59,732 --> 00:10:01,800
a native APFS parser.

214
00:10:01,801 --> 00:10:04,103
So this project has been
out for about a year

215
00:10:04,103 --> 00:10:05,637
that was version 0.1,

216
00:10:05,638 --> 00:10:09,041
but it's improved
quite a bit since then.

217
00:10:09,041 --> 00:10:12,545
And now I think it's time I
can talk about it (chuckles).

218
00:10:12,545 --> 00:10:16,649
But as far as APFS parsing goes,

219
00:10:19,085 --> 00:10:21,954
we don't do
encrypted images yet.

220
00:10:21,954 --> 00:10:23,989
Maybe something we
can add in the future,

221
00:10:23,990 --> 00:10:26,692
but basic APFS support is there.

222
00:10:26,692 --> 00:10:30,730
In fact, I added APFS
support back in December.

223
00:10:30,730 --> 00:10:33,899
And I believe we were one
of the only DFIR tools

224
00:10:33,899 --> 00:10:36,235
to support APFS at the time,

225
00:10:36,235 --> 00:10:39,438
the first freeware tool to
support APFS full disc parsing.

226
00:10:41,073 --> 00:10:44,977
So, in a nutshell, what
exactly is Mac_apt?

227
00:10:44,977 --> 00:10:46,579
It's the final evidence button

228
00:10:46,579 --> 00:10:49,214
as we used to say in my company,

229
00:10:49,215 --> 00:10:51,851
like previous former
employer (chuckles).

230
00:10:51,851 --> 00:10:54,820
But no, it's close to that.

231
00:10:54,820 --> 00:10:58,991
What Mac_apt is, this is
the architecture you feed it

232
00:10:58,991 --> 00:11:00,226
and evidence file.

233
00:11:01,394 --> 00:11:04,597
And under the hood, the
framework goes ahead,

234
00:11:04,597 --> 00:11:07,500
parses it out, pulls
out the various layers,

235
00:11:07,500 --> 00:11:09,702
the partitions,
the file systems,

236
00:11:09,702 --> 00:11:12,805
determines which partition
has Mac OS installed,

237
00:11:12,805 --> 00:11:14,372
goes ahead and mounts that,

238
00:11:14,373 --> 00:11:16,676
and then once it's
done with this,

239
00:11:16,676 --> 00:11:19,779
through an API, it provides
all of this information

240
00:11:19,779 --> 00:11:21,280
to individual plugins.

241
00:11:21,280 --> 00:11:22,915
And individual plugins can go

242
00:11:22,915 --> 00:11:24,583
and pull out the
various artifacts.

243
00:11:24,583 --> 00:11:27,586
So really, this is a
Python-based framework

244
00:11:27,586 --> 00:11:29,055
which is extendable.

245
00:11:29,055 --> 00:11:33,693
You write plug-ins to target
different artifacts on the Mac.

246
00:11:34,427 --> 00:11:35,661
So we've got a plugin

247
00:11:35,661 --> 00:11:37,896
that will target all
your Wi-Fi points.

248
00:11:37,897 --> 00:11:40,232
It'll bring that
information out.

249
00:11:40,232 --> 00:11:42,468
We have a plugin that'll get
you all your recent items,

250
00:11:42,468 --> 00:11:44,969
we'll have a plugin that
will get you information

251
00:11:44,970 --> 00:11:46,772
about spotlight shortcuts.

252
00:11:46,772 --> 00:11:48,240
You have another plugin

253
00:11:48,240 --> 00:11:52,478
that will get you information
on Safari history files,

254
00:11:55,047 --> 00:11:56,315
for example.

255
00:11:56,315 --> 00:11:57,950
And there's a laundry
list of these ones.

256
00:11:59,919 --> 00:12:01,853
Once the plugins
are done processing,

257
00:12:01,854 --> 00:12:05,057
we have unified output,
which is, I think,

258
00:12:05,057 --> 00:12:07,393
one of the really
cool features we have.

259
00:12:07,393 --> 00:12:11,130
In a single API call, you
can write out to a CSV file,

260
00:12:11,130 --> 00:12:15,434
an excel file as well
as an SQLite database.

261
00:12:16,702 --> 00:12:21,273
And as analysts I like
to use the phrase,

262
00:12:21,273 --> 00:12:22,775
trust but verify.

263
00:12:22,775 --> 00:12:24,709
So this allows you to do that.

264
00:12:24,710 --> 00:12:27,046
Any artifact that
Mac_apt will process,

265
00:12:27,046 --> 00:12:29,615
it will automatically
export out of your evidence,

266
00:12:29,615 --> 00:12:31,984
and put it into an
exports folder for you,

267
00:12:31,984 --> 00:12:33,719
for manual review.

268
00:12:33,719 --> 00:12:36,422
So by analysts for
analysts (chuckles).

269
00:12:38,424 --> 00:12:40,259
This is the help file.

270
00:12:40,259 --> 00:12:45,030
If you go on Mac_apt minus
H, you get this long list.

271
00:12:45,030 --> 00:12:46,564
It looks complicated,
but it's not.

272
00:12:46,565 --> 00:12:49,201
It's just showing you all
the input output options.

273
00:12:50,903 --> 00:12:55,040
And then at the bottom, you
can see all the various plugins

274
00:12:55,040 --> 00:12:57,476
and it's a very long list.

275
00:12:59,411 --> 00:13:02,180
So when you run it, looks
something like this.

276
00:13:02,181 --> 00:13:03,949
It takes about a
few minutes to run

277
00:13:06,485 --> 00:13:09,355
on an average-sized image.

278
00:13:10,589 --> 00:13:13,292
I have had this run
from anywhere between

279
00:13:13,292 --> 00:13:15,795
two to ten minutes
and it's done.

280
00:13:15,795 --> 00:13:18,197
Once it's done, the
output looks like this.

281
00:13:19,899 --> 00:13:21,734
This is the excel file output.

282
00:13:21,734 --> 00:13:23,302
And what you'll see here

283
00:13:23,302 --> 00:13:27,306
is there is a single tab.

284
00:13:27,306 --> 00:13:32,278
In some cases, well a single
sheet for each plug-in output.

285
00:13:32,278 --> 00:13:34,513
So all those sheets down there,

286
00:13:34,513 --> 00:13:38,717
they are from each single
plugin that was run.

287
00:13:38,717 --> 00:13:40,319
And right now you are looking at

288
00:13:40,319 --> 00:13:44,290
the output of the Active
Directory domains plug-in.

289
00:13:44,290 --> 00:13:47,092
This is telling me that
this particular Mac

290
00:13:47,092 --> 00:13:49,694
was connected to
the FOR420 domain,

291
00:13:49,695 --> 00:13:51,764
and it's giving me
information about that.

292
00:13:51,764 --> 00:13:53,732
Now, I'm not showing
you all the columns,

293
00:13:53,732 --> 00:13:55,634
'cause the screen is
only so much wide.

294
00:13:56,836 --> 00:13:58,604
But pay attention
to that last column,

295
00:13:58,604 --> 00:13:59,905
which is the source column.

296
00:14:01,373 --> 00:14:03,676
Now again, trust but verify.

297
00:14:03,676 --> 00:14:06,779
Every row of data, every
single sheet in there,

298
00:14:06,779 --> 00:14:08,280
is going to have
that source column.

299
00:14:08,280 --> 00:14:09,982
It's very important from DFIR.

300
00:14:09,982 --> 00:14:12,918
It will tell you exactly
where that data came from.

301
00:14:14,086 --> 00:14:15,654
So you can go and
manually verify it.

302
00:14:16,755 --> 00:14:17,689
Okay.

303
00:14:17,690 --> 00:14:19,892
Oh, and in the next few slides,

304
00:14:19,892 --> 00:14:21,827
I am going to walk you
through some of the output,

305
00:14:21,827 --> 00:14:23,596
some of the plugins
that we have,

306
00:14:23,596 --> 00:14:25,531
some of the more
useful information.

307
00:14:25,531 --> 00:14:29,667
Now, as an analyst
or a forensic guy,

308
00:14:29,668 --> 00:14:32,705
if someone comes to me with
a MacBook or a MacBook image

309
00:14:32,705 --> 00:14:35,174
and says, "Hey, process this."

310
00:14:35,174 --> 00:14:36,809
What are some of the
most pertinent things?

311
00:14:36,809 --> 00:14:38,410
Immediately, right off the bat,

312
00:14:38,410 --> 00:14:39,612
regardless of what the case is,

313
00:14:39,612 --> 00:14:41,646
that I always wanna
know about the evidence.

314
00:14:41,647 --> 00:14:43,349
So first that comes
to my mind is,

315
00:14:43,349 --> 00:14:46,819
okay, what's the
operating system on it?

316
00:14:46,819 --> 00:14:48,187
What's the version of the OS?

317
00:14:48,187 --> 00:14:49,622
What's the time zone setting?

318
00:14:52,458 --> 00:14:53,726
What's the file system on it?

319
00:14:53,726 --> 00:14:54,994
How many files and
folders are there?

320
00:14:54,994 --> 00:14:56,362
How much free space is there?

321
00:14:56,362 --> 00:14:58,329
Some basic information
about the evidence.

322
00:14:58,330 --> 00:14:59,765
We have a basic info plugin

323
00:14:59,765 --> 00:15:02,468
that gets you all this
information on a Mac.

324
00:15:02,468 --> 00:15:06,872
If you go do the
About This Mac dialog,

325
00:15:06,872 --> 00:15:08,607
it gives you some
of that information.

326
00:15:08,607 --> 00:15:13,612
This is the output from
Mac_apt, the basic info plug-in.

327
00:15:14,780 --> 00:15:17,283
And it tries to get
you most of that data.

328
00:15:17,283 --> 00:15:19,251
We can even pull the
serial number from there,

329
00:15:19,251 --> 00:15:20,986
in case you ever wanna go back

330
00:15:20,986 --> 00:15:23,689
and verify that you
imaged is the right Mac.

331
00:15:25,324 --> 00:15:26,257
That happens.

332
00:15:26,258 --> 00:15:27,393
I have seen it happen (chuckles)

333
00:15:27,393 --> 00:15:29,995
with some of my
colleagues in the past.

334
00:15:29,995 --> 00:15:32,331
Unfortunately, you've
imaged wrong machine.

335
00:15:35,401 --> 00:15:36,669
Okay.

336
00:15:36,669 --> 00:15:37,937
The next thing that
I always wanna know

337
00:15:37,937 --> 00:15:40,572
on every single case,
how many users exist?

338
00:15:42,608 --> 00:15:44,510
Mac_apt will pull
that information out.

339
00:15:44,510 --> 00:15:45,778
We have a users plugin

340
00:15:45,778 --> 00:15:48,614
that will give you a
long list of users.

341
00:15:48,614 --> 00:15:51,216
Again, you are not seeing all
rows and all columns here,

342
00:15:51,216 --> 00:15:53,719
I'm only showing you
some of the users here.

343
00:15:53,719 --> 00:15:57,623
On any Mac you have anywhere
between 75 to 100 users,

344
00:15:57,623 --> 00:15:59,458
depending on the
version of the Mac.

345
00:15:59,458 --> 00:16:03,762
Because most of those
users are the default ones,

346
00:16:03,762 --> 00:16:04,997
they're used by services.

347
00:16:04,997 --> 00:16:06,431
They usually start
with an underscore.

348
00:16:06,432 --> 00:16:07,967
I've removed all of those.

349
00:16:07,967 --> 00:16:10,836
These are only the actual
users, with user accounts,

350
00:16:10,836 --> 00:16:12,771
that you're seeing here.

351
00:16:12,771 --> 00:16:15,207
We can also get you the
deleted user information.

352
00:16:15,207 --> 00:16:17,742
This comes from
one of the plists.

353
00:16:17,743 --> 00:16:21,547
And if your user has
auto log-in enabled,

354
00:16:21,547 --> 00:16:24,984
we can pull that
user's password,

355
00:16:24,984 --> 00:16:28,187
because it's really stored
in an obfuscated format

356
00:16:28,187 --> 00:16:32,691
in the /Etsy/KCPasswordFile,
we can go un-obfuscate it,

357
00:16:32,691 --> 00:16:34,326
and then just give it to you.

358
00:16:34,326 --> 00:16:36,462
And then you can use this
to do other cool stuff.

359
00:16:36,462 --> 00:16:37,863
You can take that password

360
00:16:37,863 --> 00:16:42,468
and then go decrypt his keychain
and find more passwords.

361
00:16:45,004 --> 00:16:46,505
If you're using a Mac,

362
00:16:46,505 --> 00:16:49,608
very likely you're using
the Safari browser.

363
00:16:49,608 --> 00:16:51,042
We can pull pretty much

364
00:16:51,043 --> 00:16:53,746
all the information that
Safari leaves on the machine,

365
00:16:53,746 --> 00:16:56,949
from the users
library/Safari folder,

366
00:16:56,949 --> 00:17:00,651
which includes search history,

367
00:17:00,652 --> 00:17:05,657
the downloaded files, last
sessions, extensions, if any.

368
00:17:06,992 --> 00:17:09,861
The only thing that I haven't
coded, is the cookies.

369
00:17:09,862 --> 00:17:11,497
That's procrastination
on my part,

370
00:17:11,497 --> 00:17:14,099
its lowest on my
list of things to do.

371
00:17:14,098 --> 00:17:15,900
But, yes, cookies
will be there too.

372
00:17:18,470 --> 00:17:21,040
On a Mac, unlike Windows,

373
00:17:21,040 --> 00:17:23,041
it saves every single print job.

374
00:17:24,675 --> 00:17:27,245
Anytime you print
anything, that is saved.

375
00:17:27,246 --> 00:17:29,848
So we have a print jobs
plug-in in Mac_apt.

376
00:17:29,848 --> 00:17:32,918
And that will pull out all
of your printed history

377
00:17:32,918 --> 00:17:36,822
from every single printer
that you've connected to,

378
00:17:36,822 --> 00:17:39,058
which I think is pretty cool.

379
00:17:39,058 --> 00:17:42,561
It'll give you the name of
the document that was printed,

380
00:17:42,561 --> 00:17:43,762
the time that it was printed,

381
00:17:43,762 --> 00:17:45,831
the number of copies,

382
00:17:45,831 --> 00:17:48,900
which application was used to
print it, all that cool stuff.

383
00:17:48,901 --> 00:17:52,704
All of this is located under
private/var/spool/cups/ folder.

384
00:17:52,704 --> 00:17:56,675
And the files usually begin
with C followed by a number.

385
00:17:56,675 --> 00:18:00,779
So you'll see C0001,
C0002, and so on.

386
00:18:02,748 --> 00:18:07,152
We have a plugin that will get
you terminal session history.

387
00:18:07,152 --> 00:18:09,188
This is one of my
favorite new items.

388
00:18:10,389 --> 00:18:13,091
Macs have always saved
your terminal history,

389
00:18:15,127 --> 00:18:16,395
well, not only Macs,

390
00:18:16,395 --> 00:18:18,864
all Unix, Linux saves
your terminal history

391
00:18:18,864 --> 00:18:23,535
as a bash history file
under your profile.

392
00:18:23,535 --> 00:18:28,540
But since El Capitan, Mac
implemented saving history

393
00:18:29,408 --> 00:18:31,677
on a session by session basis.

394
00:18:31,677 --> 00:18:33,178
Which session am
I talking about?

395
00:18:33,178 --> 00:18:35,380
A session here is just
a terminal window.

396
00:18:35,380 --> 00:18:37,082
Anytime you launch
a terminal window,

397
00:18:37,082 --> 00:18:38,784
that is defined
as a session here.

398
00:18:40,385 --> 00:18:44,123
The commands you enter in each
different terminal windows

399
00:18:44,123 --> 00:18:45,591
are logged separately.

400
00:18:45,591 --> 00:18:48,226
They're not exactly
in that format,

401
00:18:48,227 --> 00:18:49,862
but this is located
under your profile

402
00:18:49,862 --> 00:18:53,098
under a folder
called bash_sessions.

403
00:18:54,666 --> 00:18:57,903
And there's about a set of
three files for each session.

404
00:18:57,903 --> 00:18:59,404
And the way it works is,

405
00:18:59,404 --> 00:19:02,207
it will show you commands that
you type in in that session,

406
00:19:02,207 --> 00:19:04,476
as well as all prior history.

407
00:19:04,476 --> 00:19:06,345
And then the next terminal
window you launch,

408
00:19:06,345 --> 00:19:08,480
it will show you
all prior history

409
00:19:08,480 --> 00:19:12,918
and then followed by commands
in that particular session.

410
00:19:12,918 --> 00:19:15,888
So if you were to actually
compare those files

411
00:19:15,888 --> 00:19:18,122
and remove the common
element in there,

412
00:19:18,123 --> 00:19:20,492
and then you compare the
timestamps on the files,

413
00:19:20,492 --> 00:19:23,361
you can actually come up
with this short list of,

414
00:19:23,362 --> 00:19:25,797
okay, these were the commands
that were actually run

415
00:19:25,797 --> 00:19:27,366
within this particular session.

416
00:19:28,734 --> 00:19:30,769
If you wanna read
more about that,

417
00:19:30,769 --> 00:19:32,070
about a couple of months ago,

418
00:19:32,070 --> 00:19:33,572
I wrote a blog article on that.

419
00:19:33,572 --> 00:19:35,541
Please go ahead and do that.

420
00:19:35,541 --> 00:19:38,076
I'm just gonna move forward
in the interest of time.

421
00:19:38,076 --> 00:19:39,444
But it's very interesting.

422
00:19:39,444 --> 00:19:41,914
This is great information
for DFIR folks,

423
00:19:41,914 --> 00:19:44,883
because prior to this,

424
00:19:44,883 --> 00:19:46,885
you could not tell when
a single command was run.

425
00:19:46,885 --> 00:19:47,753
Was it run yesterday?

426
00:19:47,753 --> 00:19:48,854
Was it run a year back?

427
00:19:48,854 --> 00:19:49,821
I don't know.

428
00:19:49,821 --> 00:19:51,290
Now you can tell exactly,

429
00:19:51,290 --> 00:19:52,758
'cause there's a
timeframe associated

430
00:19:52,758 --> 00:19:54,760
with each set of commands.

431
00:19:54,760 --> 00:19:55,727
So this is great.

432
00:19:57,930 --> 00:20:00,465
We have a plug-in
called recent items.

433
00:20:00,465 --> 00:20:05,337
The recent items plug-in gets
you a lot of information,

434
00:20:05,337 --> 00:20:10,008
including recent, not recent,
but actually all volumes.

435
00:20:10,008 --> 00:20:13,912
Anytime you mount a volume,
an external USB disk,

436
00:20:13,912 --> 00:20:17,216
an internal disk, a DMG file,

437
00:20:17,216 --> 00:20:20,585
all volumes that you mount
are actually logged in OS X.

438
00:20:20,586 --> 00:20:23,755
The recent items plug-in
pulls all volume information.

439
00:20:23,755 --> 00:20:26,758
It will also pull all
recently used items.

440
00:20:28,160 --> 00:20:31,129
These, by the way, are
all coming from SFL files.

441
00:20:31,129 --> 00:20:32,764
And it's limited

442
00:20:32,764 --> 00:20:36,935
to the last ten recent
applications per user.

443
00:20:38,303 --> 00:20:40,072
You can get your recently
used applications.

444
00:20:40,072 --> 00:20:43,708
We can get you recently
connected to servers and hosts

445
00:20:43,709 --> 00:20:48,680
if you use Finder to
connect to other machines.

446
00:20:50,082 --> 00:20:52,851
And here you can see me
connecting to my phone,

447
00:20:52,851 --> 00:20:56,088
because I have a
Droid NAS device app

448
00:20:56,088 --> 00:20:57,723
and then I transfer
files that way.

449
00:20:57,723 --> 00:21:00,292
You can see me connecting
to my SD card right there.

450
00:21:04,863 --> 00:21:06,999
This plugin also gets you

451
00:21:06,999 --> 00:21:11,303
the recently accessed
documents and folders.

452
00:21:11,303 --> 00:21:15,140
Anytime you access any
folder or file in Finder,

453
00:21:15,140 --> 00:21:16,508
that is logged too.

454
00:21:16,508 --> 00:21:18,443
So this is a plugin

455
00:21:18,443 --> 00:21:21,613
that does a lot of heavy
duty lifting in the backend.

456
00:21:21,613 --> 00:21:25,284
It reads hundreds of
plists and SFL files

457
00:21:25,284 --> 00:21:26,718
to get you this information.

458
00:21:30,555 --> 00:21:32,224
This is a plugin that
one of my students wrote,

459
00:21:32,224 --> 00:21:34,158
he's actually here, Jack Farley.

460
00:21:35,627 --> 00:21:38,830
If you use iMessage, we can
parse all of your chats now.

461
00:21:39,898 --> 00:21:42,833
And it's pretty cool.

462
00:21:42,834 --> 00:21:46,238
All of your chat record history
just laid out right there,

463
00:21:46,238 --> 00:21:48,840
including any
attachments if you have,

464
00:21:48,840 --> 00:21:50,442
if you've sent attachments.

465
00:21:50,442 --> 00:21:52,978
If you notice just
below that smiley,

466
00:21:52,978 --> 00:21:54,513
you can barely see it,

467
00:21:54,513 --> 00:21:58,917
but it says obj in a little
bit square brackets with,

468
00:22:00,052 --> 00:22:02,353
obj with a dotted
square around it, right?

469
00:22:02,354 --> 00:22:07,359
That is the symbol for a
Unicode object placeholder.

470
00:22:08,226 --> 00:22:09,461
We haven't inserted that,

471
00:22:09,461 --> 00:22:11,463
that's just the way
it is in the database.

472
00:22:11,463 --> 00:22:15,367
That means that an
attachment was sent over

473
00:22:15,367 --> 00:22:17,469
and that's a
placeholder for that.

474
00:22:17,469 --> 00:22:18,870
There are columns to
the right of this,

475
00:22:18,870 --> 00:22:20,738
which we are not showing here,

476
00:22:20,739 --> 00:22:23,008
which detail all the attachments

477
00:22:23,008 --> 00:22:25,344
that were sent through
attachment metadata

478
00:22:25,344 --> 00:22:26,978
and where they are right now.

479
00:22:30,215 --> 00:22:32,751
Anytime you've
typed in shortcuts,

480
00:22:32,751 --> 00:22:36,021
you've typed in a search term,

481
00:22:36,021 --> 00:22:40,425
to search for a document
or an application,

482
00:22:40,425 --> 00:22:41,860
this is the primary way

483
00:22:41,860 --> 00:22:44,062
you would search for
documents or applications

484
00:22:44,062 --> 00:22:45,330
and launch them on a Mac.

485
00:22:46,798 --> 00:22:50,402
Here you can see that I just
type in TE and I hit enter.

486
00:22:50,402 --> 00:22:53,071
And that launches the
TeamViewer application.

487
00:22:53,071 --> 00:22:54,572
Mac_apt will pull
all of this out

488
00:22:54,573 --> 00:22:58,744
from the com.spotlight
shortcuts plist in my profile.

489
00:23:00,112 --> 00:23:03,181
Again, sometimes this is
very useful information

490
00:23:03,181 --> 00:23:04,683
in an IR investigation.

491
00:23:06,485 --> 00:23:09,321
If you've used Wi-Fi,
which everybody does,

492
00:23:09,321 --> 00:23:10,822
Mac keeps a track
of all of that.

493
00:23:10,822 --> 00:23:13,558
Mac_apt will pull out all
of your Wi-Fi history,

494
00:23:13,558 --> 00:23:18,096
and here you can actually
see me in Austin in 2015.

495
00:23:18,096 --> 00:23:22,567
This is from my old MacBook
and at Zurich Airport in 2014

496
00:23:22,567 --> 00:23:26,538
and Oakhurst California,
again in 2015.

497
00:23:28,774 --> 00:23:31,476
This is one of my favorites.

498
00:23:31,476 --> 00:23:35,247
Notes and notifications
give you at times

499
00:23:35,247 --> 00:23:37,582
very useful data in
your investigations.

500
00:23:37,582 --> 00:23:39,985
And I think these are artifacts

501
00:23:39,985 --> 00:23:42,219
that are often overlooked
by investigators.

502
00:23:42,220 --> 00:23:44,723
And they're not
frequently talked about.

503
00:23:44,723 --> 00:23:47,726
So I've blogged about the format

504
00:23:47,726 --> 00:23:50,695
of the notes database
also, earlier.

505
00:23:50,695 --> 00:23:53,631
The Notes app ships
with Mac OS by default.

506
00:23:53,632 --> 00:23:54,933
And most people use this

507
00:23:54,933 --> 00:23:58,069
to capture all kinds
of miscellaneous notes.

508
00:23:59,371 --> 00:24:00,572
This is Mac_apt's output.

509
00:24:01,973 --> 00:24:05,610
And often you will find
some very interesting data.

510
00:24:05,610 --> 00:24:07,312
A lot of times users
will put passwords

511
00:24:07,312 --> 00:24:08,847
and other really
good stuff (chuckles)

512
00:24:08,847 --> 00:24:10,782
that you can use in
your investigation.

513
00:24:12,217 --> 00:24:15,287
We can parse all the Notes
databases, most of them.

514
00:24:15,287 --> 00:24:17,889
There's about six or seven
different versions of this,

515
00:24:17,889 --> 00:24:22,828
and it took some time to
accommodate all the variations.

516
00:24:25,597 --> 00:24:29,501
And this is the second
favorite of mine,

517
00:24:29,501 --> 00:24:31,136
alerts and notifications.

518
00:24:31,136 --> 00:24:33,605
So what you see on
top is an alert.

519
00:24:33,605 --> 00:24:36,308
And as soon as you hit
close, that goes away.

520
00:24:36,308 --> 00:24:41,313
Sometimes, depending
on which API was used,

521
00:24:42,047 --> 00:24:43,548
the alert may go away,

522
00:24:43,548 --> 00:24:45,650
but it may come down into
the notifications pane,

523
00:24:46,918 --> 00:24:48,119
and stay there (laughs).

524
00:24:50,021 --> 00:24:52,157
This is the output from Mac_apt,

525
00:24:52,157 --> 00:24:54,292
which gives you all of that.

526
00:24:54,292 --> 00:24:58,196
As you can see, Mac OS only
shows me the alerts from today

527
00:24:58,196 --> 00:25:00,764
and maybe yesterday,
the last few days,

528
00:25:00,765 --> 00:25:03,902
but it will not show
me anything older.

529
00:25:03,902 --> 00:25:05,303
In this case,

530
00:25:05,303 --> 00:25:08,139
I had not used this
machine for many many days,

531
00:25:08,139 --> 00:25:10,375
and so there was nothing for
yesterday or the day before.

532
00:25:10,375 --> 00:25:12,410
So it's only showing me
three alerts from today,

533
00:25:12,410 --> 00:25:13,879
but if you parse the database,

534
00:25:13,879 --> 00:25:16,247
you're gonna see a lot of
information, good information,

535
00:25:16,248 --> 00:25:18,550
including snippets of emails,

536
00:25:20,485 --> 00:25:23,455
messages from
different applications.

537
00:25:24,823 --> 00:25:26,591
I think about a month ago,

538
00:25:26,591 --> 00:25:30,195
Patrick Wardle from Objective-C,

539
00:25:30,195 --> 00:25:32,062
made the discovery that
the Signal messenger,

540
00:25:32,063 --> 00:25:34,833
which is supposed to be
a secure messaging app,

541
00:25:35,700 --> 00:25:37,035
which delivers a message to you,

542
00:25:37,035 --> 00:25:38,270
as soon as you read the message,

543
00:25:38,270 --> 00:25:40,504
it's supposed to auto
delete that message.

544
00:25:40,505 --> 00:25:44,042
Because they use the wrong
notification API call,

545
00:25:44,042 --> 00:25:45,744
it actually ended
up being embedded

546
00:25:45,744 --> 00:25:47,579
in the notifications database.

547
00:25:47,579 --> 00:25:49,114
And if you were to
go and parse that,

548
00:25:49,114 --> 00:25:53,418
you would get all of the Signal
store, delivered messages.

549
00:25:53,418 --> 00:25:56,955
So again, can be pretty
useful in an investigation.

550
00:25:59,157 --> 00:26:00,391
In the interest of time,

551
00:26:00,392 --> 00:26:02,260
I'm going to just
skip over this.

552
00:26:02,260 --> 00:26:05,864
Whenever you download
something from the internet,

553
00:26:05,864 --> 00:26:07,365
typically Mac will scan it.

554
00:26:07,365 --> 00:26:10,669
There's technologies in under
the hood like Gatekeeper

555
00:26:10,669 --> 00:26:15,674
that will scan all of
these downloaded files

556
00:26:17,075 --> 00:26:19,077
and make sure there's no
viruses or malware in them.

557
00:26:19,077 --> 00:26:20,378
There is,

558
00:26:22,781 --> 00:26:25,383
sorry (chuckles),
there is a database

559
00:26:25,383 --> 00:26:27,218
which is called
the Quarantine v2.

560
00:26:28,453 --> 00:26:30,989
Mac_apt goes and parses
that database for you.

561
00:26:30,989 --> 00:26:33,525
Again, pretty good
useful resource

562
00:26:33,525 --> 00:26:35,060
if you have a
compromised machine

563
00:26:35,060 --> 00:26:37,963
and you wanna see what was
downloaded and opened up.

564
00:26:37,963 --> 00:26:39,831
The user may not remember.

565
00:26:39,831 --> 00:26:43,267
Regardless of whether you
click open or cancel on that,

566
00:26:43,268 --> 00:26:46,605
it's gonna make an entry in
the Quarantine database anyway.

567
00:26:47,906 --> 00:26:49,206
This does not work

568
00:26:49,207 --> 00:26:52,010
if you are doing
private browsing.

569
00:26:52,010 --> 00:26:55,080
Incognito, it will not go
to Quarantine database.

570
00:26:55,080 --> 00:26:58,550
But for everything that was
downloaded normally, it will.

571
00:27:00,885 --> 00:27:05,357
And this is something
that is new and upcoming.

572
00:27:05,357 --> 00:27:08,326
And I wanna talk about this
because I'm really excited.

573
00:27:08,326 --> 00:27:10,762
When I talk to Mac experts,

574
00:27:10,762 --> 00:27:14,933
a lot of them simply
give me this phrase.

575
00:27:14,933 --> 00:27:18,970
They say, "To process
a Mac, you need a Mac.

576
00:27:18,970 --> 00:27:21,239
"You can't process a
Mac without a Mac."

577
00:27:21,239 --> 00:27:25,377
And I sort of take it upon
myself to break that stereotype,

578
00:27:25,377 --> 00:27:26,878
and say, "No,

579
00:27:26,878 --> 00:27:31,483
"I wanna be able to process a
Mac on a Linux box, why not?

580
00:27:31,483 --> 00:27:34,953
"Through a completely open
source solution, why not?"

581
00:27:34,953 --> 00:27:36,388
And part of the reason
why they say that,

582
00:27:36,388 --> 00:27:38,523
and they have good
reasoning to say that,

583
00:27:39,658 --> 00:27:42,327
it boils down to
mostly one artifact.

584
00:27:42,327 --> 00:27:45,063
And that one artifact is
the spotlight database.

585
00:27:45,063 --> 00:27:50,068
The spotlight database is
a mostly unexplored entity,

586
00:27:51,202 --> 00:27:52,504
which nobody knows
the format of.

587
00:27:52,504 --> 00:27:53,838
It's undocumented.

588
00:27:53,838 --> 00:27:56,741
So we took a look at it.

589
00:27:56,741 --> 00:27:59,244
I was able to
decipher the format

590
00:27:59,244 --> 00:28:00,879
and I now have a plugin

591
00:28:00,879 --> 00:28:02,880
which should be out in
another couple of weeks,

592
00:28:02,881 --> 00:28:04,916
which will get you all
of the spotlight data.

593
00:28:04,916 --> 00:28:05,750
So what is spotlight?

594
00:28:05,750 --> 00:28:08,219
Spotlight is the service

595
00:28:08,219 --> 00:28:12,957
that indexes all of
your data and metadata

596
00:28:12,957 --> 00:28:14,259
for every single file.

597
00:28:14,259 --> 00:28:16,161
So inside spotlight database,

598
00:28:16,161 --> 00:28:20,899
it's got information for all
of your office documents,

599
00:28:20,899 --> 00:28:25,270
it's got email metadata,
it's got ID3 tags,

600
00:28:25,270 --> 00:28:28,173
it's got information from
your TV shows, anything,

601
00:28:28,173 --> 00:28:29,908
any and every file
that you have,

602
00:28:29,908 --> 00:28:31,810
metadata has been recorded.

603
00:28:31,810 --> 00:28:35,179
Which in and of
itself, is not that,

604
00:28:36,414 --> 00:28:37,615
it's not that great.

605
00:28:37,615 --> 00:28:39,517
Because you have
the full disk image,

606
00:28:39,517 --> 00:28:42,520
you can get that data
from the files again.

607
00:28:42,520 --> 00:28:47,292
But there's at least four to
five different types of data

608
00:28:47,292 --> 00:28:51,696
which spotlight collects, which
is nowhere else on the disk.

609
00:28:51,696 --> 00:28:54,466
And one of the data you
can see in this screenshot,

610
00:28:55,467 --> 00:28:57,302
this is a Finder window,

611
00:28:57,302 --> 00:28:59,303
and I've clicked on
the recent button.

612
00:28:59,304 --> 00:29:02,707
This is showing me all
the recently opened files.

613
00:29:02,707 --> 00:29:04,876
How does Finder know the
recently opened files?

614
00:29:04,876 --> 00:29:09,881
That timestamp, date last open,
is only stored in spotlight.

615
00:29:09,881 --> 00:29:11,983
It's not in the file system,

616
00:29:11,983 --> 00:29:13,752
it's not anywhere
else on the disk.

617
00:29:14,853 --> 00:29:16,321
Other than date last open,

618
00:29:16,321 --> 00:29:19,256
there is also a number of times

619
00:29:19,257 --> 00:29:22,560
you opened a particular
application or document

620
00:29:22,560 --> 00:29:25,029
that is stored in the
spotlight database.

621
00:29:25,029 --> 00:29:26,498
There is also a field

622
00:29:26,498 --> 00:29:28,967
that stores where
each and where,

623
00:29:28,967 --> 00:29:32,337
if you downloaded a file,
where did it come from?

624
00:29:32,337 --> 00:29:34,706
The entire URL of where
it was downloaded from.

625
00:29:34,706 --> 00:29:36,073
So there's some,

626
00:29:36,074 --> 00:29:37,742
at least four to five different
pieces of information,

627
00:29:37,742 --> 00:29:39,476
that you don't
have anywhere else.

628
00:29:39,477 --> 00:29:40,879
But it is only in spotlight.

629
00:29:40,879 --> 00:29:45,884
And this is the
output of Mac_apt,

630
00:29:46,618 --> 00:29:48,186
the SQLite database.

631
00:29:48,186 --> 00:29:49,587
And I'm running a query
over the output of Mac_apt

632
00:29:49,587 --> 00:29:51,589
to recreate pretty
much the same view.

633
00:29:51,589 --> 00:29:54,192
And as you can see, it is
the same dates and times

634
00:29:54,192 --> 00:29:56,194
and the same exact files.

635
00:29:57,595 --> 00:30:01,833
So this module will be
out in the next week or so

636
00:30:01,833 --> 00:30:03,968
because I still need to
do some more debugging

637
00:30:03,968 --> 00:30:05,970
and testing on it,
but it's mostly done.

638
00:30:07,539 --> 00:30:08,773
So I'm really excited

639
00:30:08,773 --> 00:30:10,707
about being able to
parse spotlight data.

640
00:30:12,076 --> 00:30:13,545
And this is it.

641
00:30:13,545 --> 00:30:15,713
This is the full list of
plugins that Mac_apt parses out.

642
00:30:18,183 --> 00:30:20,819
So we haven't talked
about every single one,

643
00:30:20,819 --> 00:30:22,086
there's a networking plugin,

644
00:30:22,086 --> 00:30:23,755
which gives you all of
your DHCP information

645
00:30:23,755 --> 00:30:26,524
and the last IP address
and all of that.

646
00:30:26,524 --> 00:30:28,560
There's some other
stuff in there.

647
00:30:28,560 --> 00:30:31,729
There is Netusage, which
again is really cool.

648
00:30:31,729 --> 00:30:35,333
It gives you the
usage information.

649
00:30:35,333 --> 00:30:38,336
Pretty much what Srum
does for windows.

650
00:30:38,336 --> 00:30:40,939
Netusage is sort of
a subset of that.

651
00:30:40,939 --> 00:30:43,074
It'll tell you which
application used

652
00:30:43,074 --> 00:30:46,744
or consumed how much data up
and down over which interface,

653
00:30:46,744 --> 00:30:47,544
pretty cool.

654
00:30:48,980 --> 00:30:50,215
And in the near future,

655
00:30:50,215 --> 00:30:52,149
this is what's planned
out for Mac_apt.

656
00:30:52,150 --> 00:30:55,086
So I wanna upgrade the
code to Python version 3,

657
00:30:55,086 --> 00:30:57,789
because right now it's
a Python 2 only program.

658
00:30:59,290 --> 00:31:01,793
And one of the other artifacts,

659
00:31:01,793 --> 00:31:04,862
that right now you
need a Mac to process,

660
00:31:04,863 --> 00:31:06,831
is the Apple Unified Logs,

661
00:31:06,831 --> 00:31:09,000
which none of the
tools can process

662
00:31:09,000 --> 00:31:11,970
because we don't know the
format of Apple Unified Logs.

663
00:31:11,970 --> 00:31:13,404
It's no longer a text file.

664
00:31:14,539 --> 00:31:17,242
So it is on my list
of things to do

665
00:31:17,242 --> 00:31:19,878
to reverse engineer
Apple Unified Logs too.

666
00:31:19,878 --> 00:31:21,312
And then some of
these other items,

667
00:31:21,312 --> 00:31:22,746
at least three or four of these,

668
00:31:22,747 --> 00:31:24,782
are currently being worked
on either by myself,

669
00:31:24,782 --> 00:31:26,050
or one of my students.

670
00:31:26,951 --> 00:31:28,553
And these will be out shortly.

671
00:31:30,388 --> 00:31:33,291
And that's about it.

672
00:31:35,460 --> 00:31:36,427
Thank you.

673
00:31:36,427 --> 00:31:39,429
(audience applause)

674
00:31:40,365 --> 00:31:43,134
(dramatic music)

