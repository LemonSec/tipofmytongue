1
00:00:00,600 --> 00:00:02,769
(digital music)

2
00:00:09,876 --> 00:00:12,946
(applause)

3
00:00:12,946 --> 00:00:16,448
- This is my fourth DFIR
Summit, is the third time

4
00:00:16,449 --> 00:00:18,852
that I've stood on this
stage and spoke to people.

5
00:00:18,852 --> 00:00:22,522
You're saying to yourself,
"Shelly, why on earth would"

6
00:00:22,522 --> 00:00:25,424
"you be terrified? You've
done this a few times before."

7
00:00:25,425 --> 00:00:27,827
Because like the
Simpson's Troy McClure,

8
00:00:27,827 --> 00:00:30,563
you may recognize
me from talks like,

9
00:00:30,563 --> 00:00:32,399
10 Ways to Rock your Sock,

10
00:00:32,399 --> 00:00:35,001
and Rising from The
Ashes: How to Rebuild

11
00:00:35,001 --> 00:00:36,635
Your Security
Program Gone Wrong,

12
00:00:36,636 --> 00:00:38,505
with a little help
from Taylor Swift.

13
00:00:40,607 --> 00:00:42,675
But those were people
and process talks,

14
00:00:42,675 --> 00:00:44,410
and maybe a little bit
about the technology

15
00:00:44,411 --> 00:00:47,113
that you use while you're
doing those processes.

16
00:00:47,113 --> 00:00:49,249
I'm Canadian, so I say
process, by the way.

17
00:00:50,717 --> 00:00:54,788
I will not say a-boot at any
time in this presentation.

18
00:00:56,756 --> 00:00:58,792
I've never given,
what I would consider,

19
00:00:58,792 --> 00:01:01,061
a really technical talk.

20
00:01:01,061 --> 00:01:04,397
Something that, sort
of bared my soul

21
00:01:04,397 --> 00:01:06,466
a little bit about
how technical,

22
00:01:06,466 --> 00:01:08,801
or how not so technical I
am compared to other folks

23
00:01:08,802 --> 00:01:09,636
in the room.

24
00:01:11,137 --> 00:01:13,873
Additionally, I have
been challenging myself

25
00:01:13,873 --> 00:01:15,775
to learn to code better.

26
00:01:15,775 --> 00:01:20,346
Now, read that as: "at all"
over the last few years.

27
00:01:21,948 --> 00:01:25,285
When I looked at those
two things, I decided to

28
00:01:25,285 --> 00:01:29,089
one, devise and code a
solution to a problem

29
00:01:29,089 --> 00:01:32,425
that has been alluding
me for a number of years,

30
00:01:32,425 --> 00:01:35,494
and then terrify
myself by presenting it

31
00:01:35,495 --> 00:01:36,729
in front of my peers.

32
00:01:37,997 --> 00:01:40,500
Today, I bring you DNS splice.

33
00:01:42,435 --> 00:01:45,672
At the beginning, as Phil said,
my name is Shelly Giesbrecht

34
00:01:45,672 --> 00:01:48,441
I am a managing lead of
the Cisco Security Instant

35
00:01:48,441 --> 00:01:52,378
Response Services Team,
and I have a confession.

36
00:01:52,378 --> 00:01:53,513
I love DNS.

37
00:01:57,083 --> 00:02:00,353
Back when I gave my first
talk at the DFIR Summit,

38
00:02:00,353 --> 00:02:03,089
I was working for an
oil and gas company.

39
00:02:04,524 --> 00:02:06,960
I was a security operations
analyst, an instant responder.

40
00:02:06,960 --> 00:02:09,461
My boss had just bought
us our first SIM,

41
00:02:10,630 --> 00:02:13,299
and we had done
an exhaustive RFP.

42
00:02:14,868 --> 00:02:18,271
We'd asked all the
leading SIM-benders
a litany of questions

43
00:02:18,271 --> 00:02:20,739
and the most important
one to me was,

44
00:02:20,740 --> 00:02:23,610
do you parse
Microsoft DNS locks?

45
00:02:24,744 --> 00:02:29,549
To a vendor, they
said, "uh-huh, we do."

46
00:02:29,549 --> 00:02:32,018
Guess what? They all lied.

47
00:02:34,521 --> 00:02:37,923
Okay, "lied" is a
strong word, admittedly,

48
00:02:37,924 --> 00:02:42,061
but what they meant
was, "We parse the DNS"

49
00:02:42,061 --> 00:02:46,633
"server-service log"
which has events.

50
00:02:46,633 --> 00:02:50,370
Great gems like the DNS
server service has started.

51
00:02:52,605 --> 00:02:57,510
And: The DNS server
service has stopped.

52
00:02:59,946 --> 00:03:01,915
I guess I should have
been more specific.

53
00:03:03,850 --> 00:03:05,685
So I spent the next
two to three years

54
00:03:05,685 --> 00:03:08,788
chasing my SIM vendor
saying what I really wanted

55
00:03:08,788 --> 00:03:11,090
was the request and
response data from the

56
00:03:11,090 --> 00:03:13,226
Microsoft DNS debug log.

57
00:03:14,227 --> 00:03:16,896
Crickets for two years, nothing.

58
00:03:16,896 --> 00:03:20,232
So I eventually wrote my own
parser that is all in history.

59
00:03:20,233 --> 00:03:24,404
However, that actually wasn't
addressed by that SIM vendor

60
00:03:24,404 --> 00:03:29,409
until 2015, which is a
long time for an artifact.

61
00:03:30,877 --> 00:03:32,412
There's been a lot of talk
about new artifacts today,

62
00:03:32,412 --> 00:03:35,248
but this is an old-school
artifact that I think

63
00:03:35,248 --> 00:03:38,650
has a lot of value, and I
think we shouldn't ignore

64
00:03:38,651 --> 00:03:41,888
because we still have them all
sitting out there somewhere.

65
00:03:46,192 --> 00:03:47,026
Why DNS?

66
00:03:48,394 --> 00:03:53,132
Well, I don't know if anybody
else spent seven minutes

67
00:03:53,132 --> 00:03:54,734
on their first slide, but I did.

68
00:03:57,570 --> 00:03:59,072
Why DNS?

69
00:03:59,072 --> 00:04:02,976
Because DNS is an integral part,
from a protocol-perspective

70
00:04:02,976 --> 00:04:05,812
of the communication that goes
on, on our internal networks

71
00:04:05,812 --> 00:04:08,781
and on the great adventure we
call the Internet, every day.

72
00:04:09,949 --> 00:04:13,686
Every time a host on our
networks makes a call

73
00:04:13,686 --> 00:04:17,257
for a named service,
or a named resource,

74
00:04:17,257 --> 00:04:19,826
there's a DNS request
that goes along with that.

75
00:04:19,826 --> 00:04:21,594
That's a lot of data.

76
00:04:22,962 --> 00:04:26,498
If we're not looking at
request and response queries,

77
00:04:26,499 --> 00:04:30,570
then we're really missing
out on a huge piece of that

78
00:04:30,570 --> 00:04:35,308
super-timeline that creates the
fabric of our investigations

79
00:04:36,976 --> 00:04:40,079
All right, let's have a look
and let's go see if we can

80
00:04:40,079 --> 00:04:41,214
get some DNS data.

81
00:04:43,016 --> 00:04:44,217
There's a small problem.

82
00:04:45,718 --> 00:04:50,690
DNS logging, from Microsoft,
has been for a long time

83
00:04:50,690 --> 00:04:52,625
reasonably problematic.

84
00:04:52,625 --> 00:04:57,130
For one, it is not, and has
never been, on by default.

85
00:04:58,831 --> 00:05:03,770
In the realm of logging in the
world, DNS debug logging is,

86
00:05:06,339 --> 00:05:08,841
for lack of a better term and
apologies to my good friend,

87
00:05:08,841 --> 00:05:12,779
Ryan Moran, the red-headed
stepchild of the logging world.

88
00:05:17,750 --> 00:05:22,188
If you work at an organization
that has a SIM platform,

89
00:05:23,690 --> 00:05:25,158
good for you.

90
00:05:25,158 --> 00:05:27,060
You get it to be ingested,
parsed, and spit out,

91
00:05:27,060 --> 00:05:30,697
and added to your data,
but for a lot of us,

92
00:05:31,798 --> 00:05:34,000
particularly the
traveling consultants,

93
00:05:34,000 --> 00:05:36,736
when I go out to see a client
all the time, frequently,

94
00:05:36,736 --> 00:05:38,538
those clients have very little

95
00:05:38,538 --> 00:05:40,840
in the way of
logging, if at all.

96
00:05:40,840 --> 00:05:43,142
If they're doing DNS
logging, it's probably

97
00:05:43,142 --> 00:05:45,745
not going anywhere, and
they may not have a way

98
00:05:45,745 --> 00:05:47,080
to parse that data.

99
00:05:49,248 --> 00:05:51,751
That's where the idea
for DNS splice started.

100
00:05:54,253 --> 00:05:56,522
Let's talk a little
bit about DNS logging.

101
00:05:56,522 --> 00:06:00,926
As I said, in Microsoft DNS,
it has not, and has never been,

102
00:06:00,927 --> 00:06:02,295
on by default.

103
00:06:04,397 --> 00:06:09,402
Additionally, when we go
way back to Windows 2003,

104
00:06:10,837 --> 00:06:12,505
and I'm not going to ask
for hands, but I know that

105
00:06:12,505 --> 00:06:15,441
there is someone in this
room that at a branch office,

106
00:06:15,441 --> 00:06:19,645
or maybe the main office has
a Windows 2003 DNS server

107
00:06:19,645 --> 00:06:21,180
still running.

108
00:06:21,180 --> 00:06:23,416
Don't lie to me, because I've
been to some of your offices.

109
00:06:23,416 --> 00:06:26,219
Okay, maybe not you guys, but
I've been to some offices.

110
00:06:28,087 --> 00:06:31,524
The only way to see request
and response queries

111
00:06:31,524 --> 00:06:36,529
from Microsoft 2003 DNS server
service, was by turning on

112
00:06:37,397 --> 00:06:39,432
the Microsoft DNS debug log.

113
00:06:41,200 --> 00:06:43,369
If we ask Microsoft
about turning it on,

114
00:06:43,369 --> 00:06:44,904
what are they going to tell us?

115
00:06:46,539 --> 00:06:47,774
It's a debug log.

116
00:06:47,774 --> 00:06:51,077
Unless you're debugging,
don't turn it on.

117
00:06:51,077 --> 00:06:53,446
It's a performance-hit,
but how else are we

118
00:06:53,446 --> 00:06:55,181
going to get that data?

119
00:06:55,181 --> 00:06:58,518
That's it, so we have the
choice of either turning it on

120
00:06:58,518 --> 00:07:00,352
and maybe taking
a performance hit

121
00:07:01,454 --> 00:07:03,289
and missing all of
that data all together.

122
00:07:04,757 --> 00:07:06,959
In my experience, as long
as you have a well-built

123
00:07:06,959 --> 00:07:11,397
DNS server, the performance
hit really isn't that much.

124
00:07:11,397 --> 00:07:15,134
To turn this on, we're going
to go into the DNS console,

125
00:07:15,134 --> 00:07:18,037
the DNS management console,
right-click on the DNS server,

126
00:07:19,238 --> 00:07:21,307
go into the properties
on the debugging tab.

127
00:07:22,175 --> 00:07:23,876
Click the box for log packets.

128
00:07:23,876 --> 00:07:25,945
You can choose a few
different options,

129
00:07:25,945 --> 00:07:27,180
depending on what
you want to do,

130
00:07:27,180 --> 00:07:28,881
but most of them
are on by default.

131
00:07:28,881 --> 00:07:30,715
You want to choose a
file path and a name,

132
00:07:30,716 --> 00:07:32,985
and the size, how big
do you want it to get?

133
00:07:34,187 --> 00:07:35,988
These do get fairly
large fairly quickly

134
00:07:35,988 --> 00:07:37,990
if you have a DNS
server that's very busy,

135
00:07:37,990 --> 00:07:40,092
so you may want to move
those off somewhere

136
00:07:40,092 --> 00:07:42,695
so that you don't overwrite
that very precious data.

137
00:07:44,363 --> 00:07:46,666
Let's have a little look and see

138
00:07:46,666 --> 00:07:48,835
what they've given
us in this file.

139
00:07:50,536 --> 00:07:52,338
Well, that's all right.

140
00:07:52,338 --> 00:07:55,441
They've given us a few fields
that they're describing.

141
00:07:55,441 --> 00:07:58,611
There's time and date, and
right down at the bottom there,

142
00:07:58,611 --> 00:08:00,279
you'll see something
called question name,

143
00:08:00,279 --> 00:08:05,117
which probably may belong to
the URL that we're requesting.

144
00:08:05,117 --> 00:08:07,019
Let's have a look
at that URL and see.

145
00:08:08,721 --> 00:08:13,359
Good god, what in the name
of all that is holy is that?

146
00:08:13,359 --> 00:08:16,628
That, my friends, is
what Microsoft considers

147
00:08:17,930 --> 00:08:19,098
a URL query.

148
00:08:20,766 --> 00:08:23,569
The parentheses represent,
the number in the parentheses

149
00:08:23,569 --> 00:08:26,239
represent the number of
characters that come after that

150
00:08:26,239 --> 00:08:28,039
with a zero record
on the end indicating

151
00:08:28,040 --> 00:08:29,041
the end of the line.

152
00:08:31,077 --> 00:08:33,379
That's great, but it's
kind of ugly, isn't it?

153
00:08:34,514 --> 00:08:36,082
Additionally, there's
some weird things

154
00:08:36,082 --> 00:08:37,383
about this log as well.

155
00:08:37,383 --> 00:08:40,720
If it's a response,
they mark it with an R.

156
00:08:40,720 --> 00:08:43,155
If it's a query, it's blank.

157
00:08:45,825 --> 00:08:48,694
They have a flag or an op
code for a standard query,

158
00:08:48,694 --> 00:08:51,764
which is a Q, so if it's a
response to a standard query,

159
00:08:51,764 --> 00:08:53,332
you get an RQ.

160
00:08:53,332 --> 00:08:58,004
If it's a query of a standard
query, you get a blank Q.

161
00:08:59,639 --> 00:09:02,141
Which means that the
spacing and the formatting

162
00:09:02,141 --> 00:09:06,212
of this log are off, and
not all that easy to pull in

163
00:09:06,212 --> 00:09:11,217
to, say, the OG of our
forensic toolset, Excel

164
00:09:11,951 --> 00:09:12,785
and look at very easily.

165
00:09:18,324 --> 00:09:20,760
I will tell you that this
horror show continued

166
00:09:20,760 --> 00:09:24,864
until Windows 2008 R2, they
made a small date format change,

167
00:09:24,864 --> 00:09:26,666
but this sort of
logging continued.

168
00:09:26,666 --> 00:09:29,502
It just didn't seem
like it was important.

169
00:09:29,502 --> 00:09:34,507
Somewhere between 2008 and
2012, Microsoft may possibly

170
00:09:35,708 --> 00:09:39,178
have decided that
DNS debug logging,

171
00:09:39,178 --> 00:09:41,280
or pardon me, restore
and response logging

172
00:09:41,280 --> 00:09:45,084
was actually something that
could be, possibly, interesting.

173
00:09:45,084 --> 00:09:47,587
You notice me could be
and possibly because

174
00:09:48,788 --> 00:09:50,523
it's still not on by default.

175
00:09:54,460 --> 00:09:56,228
They made it an event trace log.

176
00:09:56,228 --> 00:09:58,064
I'm not going to say they
screwed up a little bit

177
00:09:58,064 --> 00:10:01,500
because Nicole loves them
so much, but they're not

178
00:10:01,500 --> 00:10:02,668
that easy to deal with.

179
00:10:04,003 --> 00:10:06,572
There's two types of
logs that were created

180
00:10:06,572 --> 00:10:08,741
for Windows 2012.

181
00:10:08,741 --> 00:10:11,010
The first one is
a DNS audit log.

182
00:10:11,010 --> 00:10:14,814
The DNS audit log has events
like zone transfer records,

183
00:10:14,814 --> 00:10:16,015
which is great.

184
00:10:16,015 --> 00:10:18,651
It's in the format
of a very lovely EVTX

185
00:10:20,720 --> 00:10:22,154
event log format.

186
00:10:22,154 --> 00:10:23,656
It sits in the event viewer,
very nice to look at.

187
00:10:23,656 --> 00:10:26,791
You can send it out to
your seams very easily.

188
00:10:26,792 --> 00:10:29,495
The other one is the
DNS analytical log,

189
00:10:29,495 --> 00:10:32,164
and it's in the event
trace log format.

190
00:10:33,466 --> 00:10:35,034
We want to turn this
on, we're going to go

191
00:10:35,034 --> 00:10:37,336
into the event viewer,
navigate to application

192
00:10:37,336 --> 00:10:39,872
and service logs,
Microsoft Windows,

193
00:10:39,872 --> 00:10:41,339
and DNS server.

194
00:10:41,340 --> 00:10:45,144
You're going to right-click
there, select view,

195
00:10:45,144 --> 00:10:47,780
and check: show
analytic and debug logs,

196
00:10:47,780 --> 00:10:51,016
because yes, they still
consider it a debug log.

197
00:10:52,151 --> 00:10:55,954
It's not crucial
data, it's just debug.

198
00:10:57,657 --> 00:10:59,358
You're still not done then.

199
00:11:00,826 --> 00:11:03,362
Still in the event viewer,
once you've turned this on,

200
00:11:03,362 --> 00:11:06,432
you see those two new logs
appear, audit and analytical.

201
00:11:07,733 --> 00:11:09,401
You need to right-click
on the analytical,

202
00:11:09,402 --> 00:11:13,539
select properties, and you
need to check the radio button

203
00:11:13,539 --> 00:11:16,175
at the bottom there that
says, do not overwrite events,

204
00:11:16,175 --> 00:11:18,611
clear manually, to make sure
that they don't overwrite it

205
00:11:18,611 --> 00:11:22,381
for you, and then, and only
then, you can enable the log.

206
00:11:24,216 --> 00:11:27,420
You have to click okay,
that is very important.

207
00:11:27,420 --> 00:11:31,223
Quickly right-click there,
radio button at the bottom,

208
00:11:32,391 --> 00:11:34,993
check and away you go.

209
00:11:37,797 --> 00:11:40,633
Now as I said, these
are in ETL format.

210
00:11:40,633 --> 00:11:43,636
To get these out, where it's
compared to the DNS debug logs

211
00:11:43,636 --> 00:11:46,939
of 2003 and 2008, all I had
to do and I did it in a very

212
00:11:48,407 --> 00:11:51,077
un-forensic way for this
particular realm of tests,

213
00:11:51,077 --> 00:11:52,111
I just copied it off.

214
00:11:52,978 --> 00:11:54,512
It was fine.

215
00:11:54,513 --> 00:11:56,515
These guys are a little bit
different, because they aren't

216
00:11:56,515 --> 00:11:59,518
read in "normal tools"

217
00:12:00,720 --> 00:12:03,823
I did a lot of Googling
and I found that a tool

218
00:12:03,823 --> 00:12:06,826
called Tracelog which exists
in the Windows Developer Kit,

219
00:12:06,826 --> 00:12:08,527
if you install the Windows
developer kit, you can use

220
00:12:08,527 --> 00:12:11,163
Tracelog to export these to CSV.

221
00:12:11,163 --> 00:12:13,933
Well, I installed
Windows developer kit,

222
00:12:13,933 --> 00:12:16,402
which is a large
download for one tool,

223
00:12:16,402 --> 00:12:20,673
on both my 2012 and
2016 DNS servers,

224
00:12:20,673 --> 00:12:24,009
and I don't know what I was
doing, I might be doing it wrong

225
00:12:24,009 --> 00:12:25,644
but it wasn't really
working for me.

226
00:12:25,644 --> 00:12:27,379
I did a little bit more
research, and I found

227
00:12:27,379 --> 00:12:31,951
there's actually an executable
right in the System32

228
00:12:31,951 --> 00:12:33,953
directory called TraceReport
which pretty much

229
00:12:33,953 --> 00:12:35,121
does the same thing.

230
00:12:36,555 --> 00:12:37,823
Using the command
on the screen there,

231
00:12:37,823 --> 00:12:39,692
which I am not going
to say out loud.

232
00:12:40,926 --> 00:12:43,529
You can export those
very easily to CSV.

233
00:12:44,630 --> 00:12:46,098
I did all this research,
it took me a while

234
00:12:46,098 --> 00:12:49,367
to figure this out,
and then I discovered

235
00:12:49,368 --> 00:12:52,605
really recently, before
I could update my slides,

236
00:12:52,605 --> 00:12:54,640
and when I say recently,
I mean in the last week.

237
00:12:54,640 --> 00:12:57,476
If you're in the event
viewer, you can actually

238
00:12:57,476 --> 00:13:01,113
save all these events
out as a CSV file.

239
00:13:01,113 --> 00:13:03,082
I'm actually going to write
a little bit of a blog post

240
00:13:03,082 --> 00:13:05,351
on it because it's
not as simple as that,

241
00:13:05,351 --> 00:13:07,753
but you can actually do
this a little bit easier

242
00:13:07,753 --> 00:13:09,255
than what I did.

243
00:13:09,255 --> 00:13:11,557
That said, if you're going
to automate the process,

244
00:13:11,557 --> 00:13:13,793
and actually grab those
logs out on a regular basis,

245
00:13:13,793 --> 00:13:14,994
this might be the
way you want to go

246
00:13:14,994 --> 00:13:16,862
because this probably
easier to script.

247
00:13:19,231 --> 00:13:20,665
These look like this.

248
00:13:20,666 --> 00:13:22,668
A lot of extraneous
columns that I've hidden,

249
00:13:24,236 --> 00:13:28,607
but you get an event
description, event
IDs, fantastic.

250
00:13:30,376 --> 00:13:32,911
The clock time is
in Microsoft Epoch.

251
00:13:36,215 --> 00:13:39,685
You get the DNS server
that was the interface,

252
00:13:39,685 --> 00:13:41,686
as well as the client IP,

253
00:13:42,822 --> 00:13:45,457
and either the response
or the request URL.

254
00:13:47,026 --> 00:13:48,761
As we're going through
this, you may notice

255
00:13:48,761 --> 00:13:50,762
some of the names of my hosts.

256
00:13:50,763 --> 00:13:54,233
My entire domain
and all of the hosts

257
00:13:54,233 --> 00:13:56,901
are from characters from
the Black Panther Universe.

258
00:13:59,905 --> 00:14:02,308
Now I've got these logs,
and I had to decide

259
00:14:02,308 --> 00:14:04,577
what I wanted to do with them.

260
00:14:04,577 --> 00:14:06,879
I wanted to read
them into memory,

261
00:14:06,879 --> 00:14:10,015
and be able to then
parse them and put them

262
00:14:10,015 --> 00:14:12,585
into a format that I
could do more with.

263
00:14:13,953 --> 00:14:17,356
Then I wanted to output
it to some sort of file.

264
00:14:17,356 --> 00:14:19,825
I chose CSV, because for
me, that was the easiest

265
00:14:19,825 --> 00:14:20,893
thing to go for.

266
00:14:23,863 --> 00:14:25,598
I wanted to add a
little bit more value

267
00:14:25,598 --> 00:14:27,366
to this tool, hopefully.

268
00:14:27,366 --> 00:14:29,134
I created some stats.

269
00:14:29,134 --> 00:14:32,137
Initially, they're
fairly small ones.

270
00:14:32,137 --> 00:14:35,406
Some outliers, I'm going to
talk about those in a minute.

271
00:14:35,407 --> 00:14:37,743
We print those to the screen
when you run the tool.

272
00:14:39,211 --> 00:14:43,916
Additionally, I wanted to be
able to look up the domains

273
00:14:45,317 --> 00:14:47,353
that I was pulling out,
and figure out if there was

274
00:14:47,353 --> 00:14:48,954
something that I needed
to be concerned about

275
00:14:48,954 --> 00:14:51,357
around them, so I wanted
to include the ability

276
00:14:51,357 --> 00:14:55,327
to use some online tools
that we have available to us,

277
00:14:55,327 --> 00:14:58,130
like Virus Total to do
a domain report lookup.

278
00:14:58,130 --> 00:15:01,433
I created an API look
up for Virus Total

279
00:15:01,433 --> 00:15:05,371
and I work for Cisco, so
I use the Threat Grid,

280
00:15:05,371 --> 00:15:06,739
because I have an API tool.

281
00:15:08,374 --> 00:15:10,676
I was going to include a look
up for our whois as well,

282
00:15:10,676 --> 00:15:12,778
but with the whole GDPR
thing, I decided to wait

283
00:15:12,778 --> 00:15:13,612
for version two.

284
00:15:14,780 --> 00:15:18,217
I did not bring a policy
signup for all of you.

285
00:15:19,652 --> 00:15:21,287
That was very
clever, by the way.

286
00:15:22,788 --> 00:15:25,024
The requirements for
this is pretty easy.

287
00:15:25,024 --> 00:15:26,191
You need Python.

288
00:15:26,191 --> 00:15:27,927
It is written in 2.7 right now.

289
00:15:27,927 --> 00:15:31,664
My apologies to the
folks, the fans of 3.0.

290
00:15:31,664 --> 00:15:34,934
You need the request
module from Python.

291
00:15:34,934 --> 00:15:37,368
Captain Obvious, you
also need some DNS logs.

292
00:15:41,140 --> 00:15:43,008
As Matt Sayer said
in his presentation,

293
00:15:43,008 --> 00:15:46,345
it is always a good idea
to start by doing the -H,

294
00:15:46,345 --> 00:15:47,680
figuring out what you need to do

295
00:15:47,680 --> 00:15:49,147
when you're running the code.

296
00:15:53,419 --> 00:15:57,021
There are three command
arguments for DNS splice.

297
00:15:57,022 --> 00:15:59,825
The first one is
required, and that is -i

298
00:15:59,825 --> 00:16:02,628
because they need to know
where your DNS file is

299
00:16:02,628 --> 00:16:05,431
that you're actually
ingesting into the tool.

300
00:16:05,431 --> 00:16:07,199
The second two are optional.

301
00:16:07,199 --> 00:16:09,168
First one is the
VirusTotal API key, -v

302
00:16:10,602 --> 00:16:12,905
and the second one is your
ThreatGrid API key, -t.

303
00:16:18,577 --> 00:16:21,046
Basic parsing, pretty easy.

304
00:16:21,046 --> 00:16:23,682
I wanted to make this as
simple as possible, frankly.

305
00:16:24,850 --> 00:16:26,952
The command is, unless
you've past your Python,

306
00:16:26,952 --> 00:16:31,957
Python, the script
name dns_v1.py, -i
and your file name.

307
00:16:34,660 --> 00:16:37,695
It opens the file, it
figures out what version

308
00:16:37,696 --> 00:16:39,398
of Windows that
you're using based on

309
00:16:39,398 --> 00:16:42,234
what is in the
lines of the file.

310
00:16:42,234 --> 00:16:45,938
Spits it out, cleans it up,
and then formats the values

311
00:16:45,938 --> 00:16:49,742
and gives you four columns:
Timestamp, client IP,

312
00:16:49,742 --> 00:16:52,310
the full URL requested,
and the base domain.

313
00:16:54,146 --> 00:16:56,048
Really simple, I wanted
to make sure that

314
00:16:56,048 --> 00:16:58,050
this didn't have a lot of
extraneous stuff in it.

315
00:16:58,050 --> 00:17:00,285
It's really just what you need.

316
00:17:00,285 --> 00:17:03,088
This is kind of what it
ends up looking like.

317
00:17:03,088 --> 00:17:04,656
No live demo for me.

318
00:17:07,393 --> 00:17:08,560
I type very slowly.

319
00:17:12,931 --> 00:17:17,936
Entering in the command line,
with the path to your file.

320
00:17:22,708 --> 00:17:25,244
When you hit enter,
it starts spitting out

321
00:17:25,243 --> 00:17:27,478
a bunch of stuff to the screen.

322
00:17:27,479 --> 00:17:30,215
We scroll up a little
bit, and it'll tell you

323
00:17:30,215 --> 00:17:32,650
that you are parsing
your ugly DNS logs.

324
00:17:36,021 --> 00:17:38,624
It also is going to give
you those stats right away.

325
00:17:41,860 --> 00:17:44,897
The output file is
called output.csv.

326
00:17:44,897 --> 00:17:47,399
It is outputted and saved
to the directory that

327
00:17:47,399 --> 00:17:49,267
you run the script from.

328
00:17:50,769 --> 00:17:54,273
It includes, as I
said, four columns.

329
00:17:54,273 --> 00:17:58,610
The time and date stamp, the
client IP that's requesting,

330
00:17:58,610 --> 00:18:00,946
the URL that was requested,
and the base domain.

331
00:18:04,550 --> 00:18:07,919
The statistics are really
about improving, again,

332
00:18:07,920 --> 00:18:10,856
my ability to code and taking
the steps one step farther.

333
00:18:10,856 --> 00:18:14,059
I wanted to include some things
that I think I would look at

334
00:18:14,059 --> 00:18:16,762
if I was looking at this
data and trying to figure out

335
00:18:16,762 --> 00:18:19,164
whether there was some outliers
that I needed to know about.

336
00:18:19,164 --> 00:18:23,969
The first one is, the client
with the most requests,

337
00:18:23,969 --> 00:18:26,371
because sometimes, we're looking
for an operational problem,

338
00:18:26,371 --> 00:18:28,440
maybe a client is causing
an issue on our networks.

339
00:18:28,440 --> 00:18:31,176
Or maybe we're looking
for something that

340
00:18:31,176 --> 00:18:32,711
has a high amount
of queries that's

341
00:18:32,711 --> 00:18:34,680
maybe doing something malicious.

342
00:18:34,680 --> 00:18:38,550
The second one was, what are
our top 10 requested domains?

343
00:18:38,550 --> 00:18:40,351
What's getting
requested the most?

344
00:18:40,352 --> 00:18:42,287
Do we have something
that's maybe suspicious

345
00:18:42,287 --> 00:18:43,489
that we need to look at?

346
00:18:44,923 --> 00:18:47,092
The last one was, the top
10 least requested domains.

347
00:18:47,092 --> 00:18:49,795
Let's face it, those
outliers, those small ones,

348
00:18:49,795 --> 00:18:51,597
are maybe the ones
that we don't see,

349
00:18:51,597 --> 00:18:53,665
and that may be causing
the most problem.

350
00:18:55,501 --> 00:18:58,904
Those stats auto-magically
appear on the screen

351
00:18:58,904 --> 00:19:00,706
as soon as you run
the basic command.

352
00:19:03,809 --> 00:19:05,711
They kind of end up
looking like this.

353
00:19:06,945 --> 00:19:08,480
Top 10 requesting
and all of that.

354
00:19:08,480 --> 00:19:11,383
Client IPs gives you the
IP and the number of times

355
00:19:11,383 --> 00:19:13,085
that they have
requested a domain.

356
00:19:15,187 --> 00:19:17,356
The top 10 requested
domains and the top 10

357
00:19:17,356 --> 00:19:19,625
least requested domains,
again with the domain name

358
00:19:19,625 --> 00:19:21,660
and the number of times
that they were requested.

359
00:19:26,365 --> 00:19:29,468
This was this next piece,
and it was important to me

360
00:19:29,468 --> 00:19:33,305
to one, again, I stretched my,
hopefully, coding abilities.

361
00:19:33,305 --> 00:19:36,742
Also, I always want to
know, what am I looking at?

362
00:19:36,742 --> 00:19:38,710
I've got this list of domains,
but let's do something

363
00:19:38,710 --> 00:19:39,978
interesting with it.

364
00:19:39,978 --> 00:19:42,814
We added the API domain lookup.

365
00:19:45,551 --> 00:19:49,987
You run your command, and I
on purpose, did not include

366
00:19:49,988 --> 00:19:54,059
the typing in the
domain, in the command,

367
00:19:54,059 --> 00:19:55,994
because I wanted to make
sure that I didn't forget

368
00:19:55,994 --> 00:19:59,630
to remove my own API keys
from any of the slides.

369
00:20:01,099 --> 00:20:04,403
Once it's run, it starts
at the bottom there.

370
00:20:04,403 --> 00:20:08,307
It'll run each domain as it
goes, and when that domain

371
00:20:08,307 --> 00:20:10,709
is complete, you get it
complete on the screen

372
00:20:10,709 --> 00:20:12,144
and it moves to the next one.

373
00:20:15,547 --> 00:20:17,115
Again, really easy to run.

374
00:20:18,550 --> 00:20:21,820
Full command with the -i and
then -v with your API key.

375
00:20:23,922 --> 00:20:25,724
What it's doing is using
the list of domains that was

376
00:20:25,724 --> 00:20:27,658
created during the
output.parsing.

377
00:20:29,428 --> 00:20:32,164
Because with the public
API key, VirusTotal lookups

378
00:20:32,164 --> 00:20:35,767
are limited to four per minute.

379
00:20:35,767 --> 00:20:37,803
I actually limited it
to three per minute.

380
00:20:37,803 --> 00:20:39,871
It seemed to work a
little better, and I
wanted to make sure

381
00:20:39,871 --> 00:20:41,840
that when you were using
the tool, that you didn't

382
00:20:41,840 --> 00:20:44,676
outstrip or get banned for
the day, because you used

383
00:20:44,676 --> 00:20:46,445
too many in a particular minute.

384
00:20:47,946 --> 00:20:51,183
It parses out to a CSV
file called VT_output.csv.

385
00:20:53,318 --> 00:20:55,988
Right now, in this current
version, it parses out

386
00:20:55,988 --> 00:20:58,690
into two columns, the
domain and a very large

387
00:20:58,690 --> 00:21:01,693
blob of JSON goodness
from VirusTotal.

388
00:21:03,862 --> 00:21:05,197
It kind of looks like this.

389
00:21:06,965 --> 00:21:09,001
Your two columns
with your domain,

390
00:21:09,001 --> 00:21:11,403
and a very large JSON blob.

391
00:21:13,272 --> 00:21:16,041
If you don't use the API key,
then you get this written

392
00:21:16,041 --> 00:21:18,644
to the screen to say that
you didn't use your API key.

393
00:21:20,012 --> 00:21:22,748
This is going to look very
familiar to the last few slides.

394
00:21:24,583 --> 00:21:28,086
The ThreatGrid lookup is
again, simply another way

395
00:21:28,086 --> 00:21:29,688
to add functionality.

396
00:21:29,688 --> 00:21:32,424
In the future, I'm
very interested in
adding other API keys.

397
00:21:32,424 --> 00:21:35,093
Please let me know if there's
something you'd like me to add

398
00:21:37,229 --> 00:21:38,730
Very, very similar
functionality.

399
00:21:38,730 --> 00:21:42,701
Once you've typed your API
key in with the command,

400
00:21:42,701 --> 00:21:44,670
it will run at the
bottom of the screen.

401
00:21:46,605 --> 00:21:50,309
When a domain is finished,
it marks it complete,

402
00:21:50,309 --> 00:21:51,576
and moves to the next one.

403
00:21:58,450 --> 00:22:00,786
Very same command path
using -t and your API key.

404
00:22:03,388 --> 00:22:05,890
ThreatGrid, at least for
me, is limited to a lookup

405
00:22:05,891 --> 00:22:10,128
of 50 searches per day,
domains or otherwise.

406
00:22:10,128 --> 00:22:12,997
I wanted to make sure that
we were narrowing down,

407
00:22:12,998 --> 00:22:15,067
not just using that full list,
because maybe those aren't

408
00:22:15,067 --> 00:22:16,601
the ones we want to look at.

409
00:22:16,601 --> 00:22:18,904
I limited it to the top 10,

410
00:22:18,904 --> 00:22:21,139
and the top least
requested domains.

411
00:22:21,139 --> 00:22:22,808
You can play with that
number in the code.

412
00:22:22,808 --> 00:22:25,444
You could actually go up to
obviously, 25 per on either side

413
00:22:25,444 --> 00:22:28,680
or depending on where you
wanted those numbers to lie

414
00:22:28,680 --> 00:22:32,384
and figure out what the
best balance for you is.

415
00:22:34,353 --> 00:22:37,089
Parses out again to another
file, TG_output.csv.

416
00:22:41,693 --> 00:22:44,663
Ends up looking very
similarly, like this.

417
00:22:48,567 --> 00:22:51,370
If you don't use the
ThreatGrid key, then obviously,

418
00:22:51,370 --> 00:22:53,338
you get this printed
to the screen as well.

419
00:22:55,207 --> 00:22:57,309
This is a big slide for me,
because there's a lot of things

420
00:22:57,309 --> 00:22:59,144
that I discovered along the
way, that I really wanted

421
00:22:59,144 --> 00:23:00,045
to do with this.

422
00:23:01,246 --> 00:23:03,515
The first thing
is to clean it up.

423
00:23:04,683 --> 00:23:07,519
This was a really first
coding project for me,

424
00:23:07,519 --> 00:23:11,123
and over the last day and a
half, watching some amazing

425
00:23:11,123 --> 00:23:14,393
things being introduced,
following Matt Sayer

426
00:23:14,393 --> 00:23:16,194
is a little
intimidating, frankly.

427
00:23:17,596 --> 00:23:21,299
After his presentation
on Mac app yesterday,

428
00:23:21,299 --> 00:23:23,635
I was thinking to
myself, "Oh my goodness"

429
00:23:24,970 --> 00:23:26,705
but it's something
to aspire to for me,

430
00:23:26,705 --> 00:23:29,341
and that's kind of
where I'm taking this.

431
00:23:29,341 --> 00:23:32,310
They had next step
slides, this is mine.

432
00:23:32,310 --> 00:23:34,012
I want to clean up my code.

433
00:23:34,012 --> 00:23:36,415
My next steps for me is to
learn how to create functions,

434
00:23:36,415 --> 00:23:39,084
exception handling, and
those other niceties of code

435
00:23:39,084 --> 00:23:42,854
that make it more of
an application, as
opposed to a script.

436
00:23:42,854 --> 00:23:44,790
I also want to port
it to Python three.

437
00:23:44,790 --> 00:23:46,524
It's going to allow me a
little bit more functionality

438
00:23:46,525 --> 00:23:48,994
with some of the new
modules that are coming out.

439
00:23:48,994 --> 00:23:50,762
I think, obviously, give
it a little bit more

440
00:23:50,762 --> 00:23:52,062
of a future path
with the end-of-life

441
00:23:52,063 --> 00:23:54,633
for Python 2.7 coming up.

442
00:23:56,134 --> 00:23:57,636
I'd like to create a config
file, because if we're going

443
00:23:57,636 --> 00:24:00,739
to be using API keys, and
maybe user-defined directories

444
00:24:00,739 --> 00:24:02,441
and files, you want to
be able to put those into

445
00:24:02,441 --> 00:24:05,076
a config file and not have
to type them in all the time.

446
00:24:06,678 --> 00:24:09,281
I'd like to include multi-file
upload, because we want to

447
00:24:09,281 --> 00:24:12,451
make our data set bigger if
we can, and be able to use,

448
00:24:12,451 --> 00:24:14,686
if we're constantly
pulling in different files,

449
00:24:14,686 --> 00:24:16,187
have that bigger
data set to look at

450
00:24:16,188 --> 00:24:17,923
from all of our DNS servers.

451
00:24:20,125 --> 00:24:21,960
This one came from my friend,
Tom Yarish, when he was

452
00:24:21,960 --> 00:24:24,496
looking at the tool, and
it makes a lot of sense.

453
00:24:24,496 --> 00:24:26,264
Folks want to be able
to name their own files,

454
00:24:26,264 --> 00:24:28,466
put them where they want
to, and maybe output them

455
00:24:28,467 --> 00:24:30,535
in a format that isn't CSV.

456
00:24:30,535 --> 00:24:33,104
We're looking at some other
options, like JSON and XML,

457
00:24:33,104 --> 00:24:35,273
but you folks can let me
know if there's something

458
00:24:35,273 --> 00:24:37,375
that would be interesting
for you to have.

459
00:24:39,311 --> 00:24:41,646
With the upgrade to Python
three, I'll be able to use

460
00:24:41,646 --> 00:24:44,616
the statistics module, and
maybe some other stuff out there

461
00:24:44,616 --> 00:24:46,718
to create a little bit more
flexibility with regards

462
00:24:46,718 --> 00:24:49,387
to those statistics and
make those a little bit

463
00:24:49,387 --> 00:24:50,422
more useful again.

464
00:24:52,757 --> 00:24:54,292
I also noticed when
I was doing this,

465
00:24:54,292 --> 00:24:57,896
that as I was pulling out a
lot of the popular domains

466
00:24:57,896 --> 00:25:02,801
like Google.com, Microsoft.com,
Nerdiosity.com, very popular

467
00:25:03,902 --> 00:25:05,237
come up a lot.

468
00:25:06,638 --> 00:25:08,974
Sometimes, we might want
to reduce that noise volume

469
00:25:08,974 --> 00:25:11,408
and exclude those
from our searches.

470
00:25:11,409 --> 00:25:14,479
We may also want to include
the internal domains

471
00:25:14,479 --> 00:25:15,914
that are coming up as well.

472
00:25:15,914 --> 00:25:17,581
Again, to make sure
that we're only getting

473
00:25:17,582 --> 00:25:20,585
maybe that external traffic,
if that's what we're looking at

474
00:25:22,187 --> 00:25:25,189
I want to make use of the
JSON data that's coming back

475
00:25:25,190 --> 00:25:27,893
from the API calls, figuring out

476
00:25:27,893 --> 00:25:32,664
what is really important in
those blobs that are coming back

477
00:25:32,664 --> 00:25:34,733
Maybe formatting into
some sort of report

478
00:25:34,733 --> 00:25:36,400
that a user might
be able to run.

479
00:25:38,403 --> 00:25:40,705
I'd also like to create some
sort of backend for this.

480
00:25:40,705 --> 00:25:42,807
A storage vehicle,
because let's face it.

481
00:25:42,807 --> 00:25:44,743
If you're pulling in all
of this data all the time,

482
00:25:44,743 --> 00:25:47,312
you want to be able to maybe
have some specialized queries

483
00:25:47,312 --> 00:25:50,348
with regards to either
their specific time,

484
00:25:50,348 --> 00:25:54,085
or different types of domains

485
00:25:54,085 --> 00:25:55,554
or otherwise, so I
want to make sure that

486
00:25:55,554 --> 00:25:57,489
I can put that into somewhere
that you can acctually

487
00:25:57,489 --> 00:25:58,924
then go in and search.

488
00:25:59,925 --> 00:26:02,961
Maybe, just maybe, a GUI.

489
00:26:02,961 --> 00:26:04,496
We love the command
line, say it with me,

490
00:26:04,496 --> 00:26:06,331
we all love the command line.

491
00:26:07,699 --> 00:26:10,969
Sometimes, ease of use,
or being able to include

492
00:26:10,969 --> 00:26:12,437
data visualizations
or otherwise,

493
00:26:12,437 --> 00:26:13,972
I think that would be
really interesting,

494
00:26:13,972 --> 00:26:16,274
and definitely again,
from a coding perspective,

495
00:26:16,274 --> 00:26:18,243
it's going to help me
stretch a little bit

496
00:26:18,243 --> 00:26:19,678
and learn a little bit more.

497
00:26:22,280 --> 00:26:25,417
I want to say thank you so
much for coming on this journey

498
00:26:25,417 --> 00:26:26,251
with me today.

499
00:26:27,419 --> 00:26:31,556
This has been a little
bit of, like I said,

500
00:26:31,556 --> 00:26:33,091
a terrifying experience.

501
00:26:33,091 --> 00:26:35,593
I have done some things
that I never thought

502
00:26:35,594 --> 00:26:36,828
I was going to do.

503
00:26:36,828 --> 00:26:38,330
One, learn to code
a little bit better.

504
00:26:38,330 --> 00:26:41,399
Two, figure out how to deal
with those ugly DNS logs

505
00:26:41,399 --> 00:26:43,133
that have been plaguing
me for a number of years.

506
00:26:43,134 --> 00:26:46,371
Three, and probably
most important,

507
00:26:46,371 --> 00:26:49,774
is giving back to a
DFIR community that
has given me a lot.

508
00:26:53,411 --> 00:26:56,348
Thanks to Rob, and Phil,
and Jennifer Santiago,

509
00:26:56,348 --> 00:26:57,882
and the Sans team
for putting together

510
00:26:57,882 --> 00:27:00,518
such an amazing conference
over the last two days.

511
00:27:00,518 --> 00:27:04,322
I'm last, so I get to say thank
you on behalf of everybody.

512
00:27:04,322 --> 00:27:06,591
(applause)

513
00:27:12,864 --> 00:27:16,401
DNS Splice is available
on GitHub now.

514
00:27:16,401 --> 00:27:19,137
Please give it a
download, give it a try,

515
00:27:19,137 --> 00:27:22,506
if only because I would really
love everybody's feedback.

516
00:27:22,507 --> 00:27:24,042
I want to continue this journey.

517
00:27:24,042 --> 00:27:27,345
I would really appreciate
you continuing on with me.

518
00:27:27,345 --> 00:27:30,649
Thank you very much, and
enjoy the Forensic Forecast.

519
00:27:31,716 --> 00:27:33,952
(applause)

