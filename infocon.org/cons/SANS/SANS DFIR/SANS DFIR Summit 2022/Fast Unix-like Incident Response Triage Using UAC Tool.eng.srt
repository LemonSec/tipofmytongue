1
00:00:00,659 --> 00:00:02,960
foreign

2
00:00:06,859 --> 00:00:10,500
first of all I would like to thank Sam's

3
00:00:10,500 --> 00:00:12,960
um for this great event and the

4
00:00:12,960 --> 00:00:15,540
opportunity to be here to talk to you uh

5
00:00:15,540 --> 00:00:18,960
today okay so let me introduce myself uh

6
00:00:18,960 --> 00:00:20,460
well I'm not gonna

7
00:00:20,460 --> 00:00:23,400
uh be too long okay you can find me on

8
00:00:23,400 --> 00:00:26,460
LinkedIn my name is Thiago I'm speaking

9
00:00:26,460 --> 00:00:28,400
from Brazil

10
00:00:28,400 --> 00:00:32,640
and I'm currently working as a senior

11
00:00:32,640 --> 00:00:34,920
digital investigator and France Analyst

12
00:00:34,920 --> 00:00:38,520
at IBM okay so moving on uh I'm here

13
00:00:38,520 --> 00:00:42,260
today oops sorry

14
00:00:42,360 --> 00:00:45,360
I didn't click it

15
00:00:45,360 --> 00:00:48,420
okay so moving on I'm here to talk about

16
00:00:48,420 --> 00:00:52,700
how to fast triage okay unix-like

17
00:00:52,700 --> 00:00:57,180
systems uh using the UAC tool

18
00:00:57,180 --> 00:00:58,559
um in the first part of this

19
00:00:58,559 --> 00:01:01,500
presentation I will basically show how

20
00:01:01,500 --> 00:01:05,580
uh UAC works and then we're gonna jump

21
00:01:05,580 --> 00:01:08,580
into analysis of uh compromised Linux

22
00:01:08,580 --> 00:01:10,520
system okay

23
00:01:10,520 --> 00:01:13,380
so um

24
00:01:13,380 --> 00:01:16,680
let's suppose you are working on an

25
00:01:16,680 --> 00:01:18,960
instant response engagement where you

26
00:01:18,960 --> 00:01:21,479
you know are connected to uh

27
00:01:21,479 --> 00:01:25,979
uh VM sphere server and uh then you were

28
00:01:25,979 --> 00:01:28,380
trying to treat Azure system and boom

29
00:01:28,380 --> 00:01:31,860
you try to extract some information and

30
00:01:31,860 --> 00:01:34,579
uh come on

31
00:01:34,579 --> 00:01:38,340
these first uh should be uh are similar

32
00:01:38,340 --> 00:01:41,579
to a Linux uh system right so another

33
00:01:41,579 --> 00:01:43,200
one

34
00:01:43,200 --> 00:01:47,280
you are triaging on FreeBSD and you go

35
00:01:47,280 --> 00:01:51,899
to slack proc no proc FS come on they

36
00:01:51,899 --> 00:01:55,259
used to be all unix-like systems right

37
00:01:55,259 --> 00:01:58,380
and then you are triaging a Solaris okay

38
00:01:58,380 --> 00:01:59,820
system

39
00:01:59,820 --> 00:02:02,640
and you try to copy and paste your

40
00:02:02,640 --> 00:02:08,340
comments from your uh notes and again

41
00:02:08,340 --> 00:02:11,038
some options are not even accepted or

42
00:02:11,038 --> 00:02:14,580
available on some native Commons so come

43
00:02:14,580 --> 00:02:18,180
on you you start get nervous in front of

44
00:02:18,180 --> 00:02:21,480
your customer right doing your uh triage

45
00:02:21,480 --> 00:02:22,860
and engagement

46
00:02:22,860 --> 00:02:25,319
the last one uh the last one here is

47
00:02:25,319 --> 00:02:28,500
concerning the PS so

48
00:02:28,500 --> 00:02:32,220
Linux is Linux all Linux are similar to

49
00:02:32,220 --> 00:02:35,160
each other right so no uh some of them

50
00:02:35,160 --> 00:02:38,220
are so small are embedded Linux systems

51
00:02:38,220 --> 00:02:41,040
that they don't even have the common uh

52
00:02:41,040 --> 00:02:44,879
uh options in PS for instance the dash e

53
00:02:44,879 --> 00:02:47,540
or Dash EF they are not even available

54
00:02:47,540 --> 00:02:51,360
so uh how many how many of you already

55
00:02:51,360 --> 00:02:53,340
faced on this uh situation before

56
00:02:53,340 --> 00:02:55,860
imagine you are in front of your

57
00:02:55,860 --> 00:02:57,840
client trying to extract information

58
00:02:57,840 --> 00:03:01,260
from its uh his server and you know you

59
00:03:01,260 --> 00:03:03,360
need to go to Google need to go to your

60
00:03:03,360 --> 00:03:08,819
notes it's not good right so there's a

61
00:03:08,819 --> 00:03:12,360
lot of good tools out there uh for data

62
00:03:12,360 --> 00:03:15,720
collection and tri but sometimes you you

63
00:03:15,720 --> 00:03:19,379
can't just deploy egrs EGR solutions and

64
00:03:19,379 --> 00:03:23,159
client server based Solutions uh in the

65
00:03:23,159 --> 00:03:25,620
environment you just need a quick uh

66
00:03:25,620 --> 00:03:29,640
triage for your uh Linux or your Unix

67
00:03:29,640 --> 00:03:32,580
system so what is UAC it's basically a

68
00:03:32,580 --> 00:03:35,940
shell script that makes use of native

69
00:03:35,940 --> 00:03:39,780
binary tools to collect artifacts USC

70
00:03:39,780 --> 00:03:42,360
was created to facilitate and speed up

71
00:03:42,360 --> 00:03:45,900
data collection from for quick triage so

72
00:03:45,900 --> 00:03:48,959
no installation is required it it's not

73
00:03:48,959 --> 00:03:52,500
depends on dependencies or packages uh

74
00:03:52,500 --> 00:03:55,620
you can even run UAC from a USB device

75
00:03:55,620 --> 00:04:01,140
or a network share okay uh

76
00:04:01,140 --> 00:04:03,239
oops

77
00:04:03,239 --> 00:04:07,440
UAC supports most of uh Linux systems

78
00:04:07,440 --> 00:04:10,200
okay most of the

79
00:04:10,200 --> 00:04:13,700
the unix-like systems like Android AIX

80
00:04:13,700 --> 00:04:18,858
vsphere FreeBSD Linux uh a lot of uh uh

81
00:04:18,858 --> 00:04:23,100
systems I have been even testing UAC on

82
00:04:23,100 --> 00:04:27,419
small routers like open wrt

83
00:04:27,419 --> 00:04:30,240
or network attached storage devices like

84
00:04:30,240 --> 00:04:33,440
qnap sign knowledge okay they are

85
00:04:33,440 --> 00:04:36,720
unix-like systems workstations servers

86
00:04:36,720 --> 00:04:38,940
uh even in different architectures

87
00:04:38,940 --> 00:04:41,759
because UAC is architecture independent

88
00:04:41,759 --> 00:04:46,020
so you can run on rpcs park or even on

89
00:04:46,020 --> 00:04:48,840
Linux running on on mainframes

90
00:04:48,840 --> 00:04:52,860
so I left here the the project page and

91
00:04:52,860 --> 00:04:55,259
the project documentation page for you

92
00:04:55,259 --> 00:04:57,500
guys

93
00:04:58,500 --> 00:05:03,900
so how UAC Works behind the scenes

94
00:05:03,900 --> 00:05:05,460
uh

95
00:05:05,460 --> 00:05:08,460
first of all UAC will check for the

96
00:05:08,460 --> 00:05:11,520
available system tools this is where UAC

97
00:05:11,520 --> 00:05:14,880
checks for if tar is available if gz

98
00:05:14,880 --> 00:05:17,520
gzip is available if stat is available

99
00:05:17,520 --> 00:05:21,120
what options to find common supports on

100
00:05:21,120 --> 00:05:22,800
the target system

101
00:05:22,800 --> 00:05:27,840
then uh UAC will load the configuration

102
00:05:27,840 --> 00:05:29,039
file

103
00:05:29,039 --> 00:05:32,699
it will build a list of artifacts to be

104
00:05:32,699 --> 00:05:34,800
collected based on the options you

105
00:05:34,800 --> 00:05:36,479
provided on the command line and we're

106
00:05:36,479 --> 00:05:40,259
gonna see this uh in a field then UIC

107
00:05:40,259 --> 00:05:43,620
uses a couple of collectors to to triage

108
00:05:43,620 --> 00:05:45,900
or to collect data from from the server

109
00:05:45,900 --> 00:05:49,380
so uh there's basically five collectors

110
00:05:49,380 --> 00:05:51,419
the common collector will

111
00:05:51,419 --> 00:05:53,820
we'll be using to run comments on the

112
00:05:53,820 --> 00:05:56,539
system and start output into text files

113
00:05:56,539 --> 00:06:00,539
Define comma Define collector is used to

114
00:06:00,539 --> 00:06:04,139
find files and store the output into

115
00:06:04,139 --> 00:06:06,539
text files as well so if you are trying

116
00:06:06,539 --> 00:06:08,820
to find executable files trying to find

117
00:06:08,820 --> 00:06:11,520
hidden files this is the the the the

118
00:06:11,520 --> 00:06:14,280
collector that does that there is a stat

119
00:06:14,280 --> 00:06:16,860
uh collector which

120
00:06:16,860 --> 00:06:20,220
uh collects file system metadata

121
00:06:20,220 --> 00:06:24,060
information using the Stacked command

122
00:06:24,060 --> 00:06:26,819
there's the hash which

123
00:06:26,819 --> 00:06:29,880
uh like the name says will hash files

124
00:06:29,880 --> 00:06:33,240
for you using using one of the the hash

125
00:06:33,240 --> 00:06:35,400
algorithms that you set in the

126
00:06:35,400 --> 00:06:38,460
configuration file and uh the last one

127
00:06:38,460 --> 00:06:40,740
is the file collector this one is will

128
00:06:40,740 --> 00:06:44,400
just collect raw files for you so you

129
00:06:44,400 --> 00:06:46,919
can set UAC to collect the slash Etc

130
00:06:46,919 --> 00:06:51,600
slash varlogs and the raw files will be

131
00:06:51,600 --> 00:06:54,120
collected and will be started in the

132
00:06:54,120 --> 00:06:56,699
same uh patch structure in the output

133
00:06:56,699 --> 00:06:59,639
file okay for more information about the

134
00:06:59,639 --> 00:07:01,740
collectors what options you have please

135
00:07:01,740 --> 00:07:04,020
go to the I invite you to visit the

136
00:07:04,020 --> 00:07:07,020
projects documentation page okay and

137
00:07:07,020 --> 00:07:07,979
then

138
00:07:07,979 --> 00:07:10,500
after the collection UAC will create an

139
00:07:10,500 --> 00:07:13,979
output file will hash that output file

140
00:07:13,979 --> 00:07:18,539
and uh we'll create an acquisition log

141
00:07:18,539 --> 00:07:21,000
for you so let's see how

142
00:07:21,000 --> 00:07:23,819
is the artifacts uh

143
00:07:23,819 --> 00:07:26,599
in in UAC so

144
00:07:26,599 --> 00:07:30,060
USC has what we call artifacts file so

145
00:07:30,060 --> 00:07:32,160
the artifacts is

146
00:07:32,160 --> 00:07:34,259
the artifacts file is used to define

147
00:07:34,259 --> 00:07:36,860
parameters that will be used to collect

148
00:07:36,860 --> 00:07:39,900
data okay so they are basically yaml

149
00:07:39,900 --> 00:07:43,139
files located in the artifacts folder

150
00:07:43,139 --> 00:07:46,319
and you will see will read those files

151
00:07:46,319 --> 00:07:48,479
on the Fly and base it on better

152
00:07:48,479 --> 00:07:52,380
contents uh we'll collect the data uh

153
00:07:52,380 --> 00:07:55,800
for you using one of the five collectors

154
00:07:55,800 --> 00:07:59,280
so uh an artifact file we have the list

155
00:07:59,280 --> 00:08:01,680
of artifacts and then

156
00:08:01,680 --> 00:08:04,680
the artifact uh definition

157
00:08:04,680 --> 00:08:06,599
okay

158
00:08:06,599 --> 00:08:10,440
here's here's some examples so

159
00:08:10,440 --> 00:08:11,039
um

160
00:08:11,039 --> 00:08:13,860
as you can see artifacts will run on

161
00:08:13,860 --> 00:08:18,360
predefined operating systems okay so the

162
00:08:18,360 --> 00:08:21,500
first one will only run on on vsphere

163
00:08:21,500 --> 00:08:24,240
right uh

164
00:08:24,240 --> 00:08:27,479
artifacts will also be collected using

165
00:08:27,479 --> 00:08:29,400
one of the collectors that I mentioned

166
00:08:29,400 --> 00:08:33,419
and each collector has its own options

167
00:08:33,419 --> 00:08:37,140
okay so it's very customizable you can

168
00:08:37,140 --> 00:08:40,500
do a lot of uh different collections

169
00:08:40,500 --> 00:08:43,320
okay from any system

170
00:08:43,320 --> 00:08:46,680
and then we have the profile file the

171
00:08:46,680 --> 00:08:49,200
profile file is used to define the list

172
00:08:49,200 --> 00:08:52,019
of artifacts that will be collected it's

173
00:08:52,019 --> 00:08:55,380
it's also a yaml file so the the profile

174
00:08:55,380 --> 00:08:57,180
file has a header

175
00:08:57,180 --> 00:09:00,720
has the list of artifacts that will be

176
00:09:00,720 --> 00:09:02,940
collected in the order that will be

177
00:09:02,940 --> 00:09:05,700
collected okay so volatility information

178
00:09:05,700 --> 00:09:06,779
first

179
00:09:06,779 --> 00:09:09,180
then you can add

180
00:09:09,180 --> 00:09:11,940
a group of artifacts you can add a

181
00:09:11,940 --> 00:09:15,420
single artifact file you can

182
00:09:15,420 --> 00:09:17,640
even uh um

183
00:09:17,640 --> 00:09:21,720
select a a whole folder and then exclude

184
00:09:21,720 --> 00:09:25,440
some specific artifacts as well okay so

185
00:09:25,440 --> 00:09:29,000
it's very customizable

186
00:09:29,000 --> 00:09:33,000
so uh as you can see UHC provides quite

187
00:09:33,000 --> 00:09:36,720
a few options in in the right here uh

188
00:09:36,720 --> 00:09:38,279
that can be used during the the

189
00:09:38,279 --> 00:09:41,880
execution for instance if you know uh uh

190
00:09:41,880 --> 00:09:43,440
or have a clue when the incident

191
00:09:43,440 --> 00:09:46,080
occurred you can use the dash dash date

192
00:09:46,080 --> 00:09:49,140
range start and and or the date range

193
00:09:49,140 --> 00:09:52,860
and to limit the number of files and

194
00:09:52,860 --> 00:09:55,440
logs that will be collected so the

195
00:09:55,440 --> 00:09:59,220
output file will be uh um smaller and

196
00:09:59,220 --> 00:10:01,860
easier to be transferred okay you can

197
00:10:01,860 --> 00:10:03,420
also transfer

198
00:10:03,420 --> 00:10:08,880
that output QR S3 bucket using a pre uh

199
00:10:08,880 --> 00:10:13,620
pre-signed URL or via a STP server as

200
00:10:13,620 --> 00:10:16,620
well you can use uh

201
00:10:16,620 --> 00:10:17,940
um

202
00:10:17,940 --> 00:10:22,339
keys for transferring uh via SFTP okay

203
00:10:22,339 --> 00:10:25,140
uh again please take a look on the

204
00:10:25,140 --> 00:10:27,720
project documentation page for all the

205
00:10:27,720 --> 00:10:30,480
available options you have uh during the

206
00:10:30,480 --> 00:10:33,680
collection okay

207
00:10:34,140 --> 00:10:37,680
uh let's talk about the output files so

208
00:10:37,680 --> 00:10:40,320
the default format for the output file

209
00:10:40,320 --> 00:10:44,220
is UAC Dash the hostname Dash the OS

210
00:10:44,220 --> 00:10:46,980
Dash the timestamp this makes the

211
00:10:46,980 --> 00:10:49,440
collection I mean easier it identified

212
00:10:49,440 --> 00:10:52,019
so you can you you have the hostname the

213
00:10:52,019 --> 00:10:55,079
OS and when the the the collection was

214
00:10:55,079 --> 00:10:58,079
done just uh uh checking the file name

215
00:10:58,079 --> 00:11:02,640
so by default UAC will uh create a log

216
00:11:02,640 --> 00:11:05,880
file and a tar gz file okay

217
00:11:05,880 --> 00:11:09,300
but when the when Jeezy is not available

218
00:11:09,300 --> 00:11:11,940
on the system and I have seen that

219
00:11:11,940 --> 00:11:15,500
UAC will just create a tar file for you

220
00:11:15,500 --> 00:11:19,019
and even if there's no tar available on

221
00:11:19,019 --> 00:11:21,779
the system and I have seen this uh

222
00:11:21,779 --> 00:11:24,300
already on on some compromised systems

223
00:11:24,300 --> 00:11:25,200
where

224
00:11:25,200 --> 00:11:28,320
the malicious code deleted a couple of

225
00:11:28,320 --> 00:11:31,860
uh built-in comments from the system uh

226
00:11:31,860 --> 00:11:35,339
UAC will create a folder and copy all

227
00:11:35,339 --> 00:11:37,800
the collected data to that folder so

228
00:11:37,800 --> 00:11:39,440
this way you can

229
00:11:39,440 --> 00:11:45,200
SFTP or SCP the the files to your foresk

230
00:11:45,200 --> 00:11:47,820
workstation or whatever the place you

231
00:11:47,820 --> 00:11:50,839
want okay

232
00:11:51,899 --> 00:11:54,300
what about the acquisition log the

233
00:11:54,300 --> 00:11:55,680
acquisition log

234
00:11:55,680 --> 00:11:58,800
it's just a text file okay that has some

235
00:11:58,800 --> 00:12:01,380
basic information about acquisition such

236
00:12:01,380 --> 00:12:04,380
as the the case information you can uh

237
00:12:04,380 --> 00:12:06,600
set this information on the command line

238
00:12:06,600 --> 00:12:09,120
when you are running the tool okay if

239
00:12:09,120 --> 00:12:11,100
you want to identify the case number the

240
00:12:11,100 --> 00:12:13,980
advanced the description of your case uh

241
00:12:13,980 --> 00:12:16,620
it will it it also holds the system

242
00:12:16,620 --> 00:12:18,720
information like the operating system

243
00:12:18,720 --> 00:12:21,660
for that collection the architecture the

244
00:12:21,660 --> 00:12:25,019
host name uh the acquisition information

245
00:12:25,019 --> 00:12:28,019
so the mount point if it was run on a

246
00:12:28,019 --> 00:12:31,200
mounted image as well uh the acquisition

247
00:12:31,200 --> 00:12:34,560
start and and and and finish date and I

248
00:12:34,560 --> 00:12:37,380
think the most important one the the md5

249
00:12:37,380 --> 00:12:42,060
for the um the output file okay for uh

250
00:12:42,060 --> 00:12:45,000
your conference

251
00:12:45,000 --> 00:12:48,779
okay let's take a look on the what's

252
00:12:48,779 --> 00:12:51,300
within the output file

253
00:12:51,300 --> 00:12:55,200
so this first uh folder here we think so

254
00:12:55,200 --> 00:12:57,720
when you decompress the contents of the

255
00:12:57,720 --> 00:13:00,480
Target easy you're gonna see this root

256
00:13:00,480 --> 00:13:03,920
folder here in scribe brackets this

257
00:13:03,920 --> 00:13:06,839
directory uh contains file collected by

258
00:13:06,839 --> 00:13:10,380
the file collector okay uh these files

259
00:13:10,380 --> 00:13:11,639
will be

260
00:13:11,639 --> 00:13:14,279
collected as I mentioned in their raw

261
00:13:14,279 --> 00:13:18,540
format and will be placed in their uh

262
00:13:18,540 --> 00:13:22,079
original path as the as the compromised

263
00:13:22,079 --> 00:13:25,440
system or the triage system okay UAC has

264
00:13:25,440 --> 00:13:27,240
artifacts to collect system

265
00:13:27,240 --> 00:13:30,779
configuration files log files user files

266
00:13:30,779 --> 00:13:33,480
such as the bash history browser files

267
00:13:33,480 --> 00:13:36,480
they will all be placed within this root

268
00:13:36,480 --> 00:13:39,300
uh folder okay in the same path they

269
00:13:39,300 --> 00:13:41,339
were found in the Target system

270
00:13:41,339 --> 00:13:44,220
you can either extract the contents of

271
00:13:44,220 --> 00:13:47,700
this root directory or even what I have

272
00:13:47,700 --> 00:13:51,899
been done is load uac's output file into

273
00:13:51,899 --> 00:13:54,899
your preferred forensic tool for

274
00:13:54,899 --> 00:13:57,660
processing okay I have been using a lot

275
00:13:57,660 --> 00:14:01,139
of uh uh commercial tools and free tools

276
00:14:01,139 --> 00:14:03,959
to process uh this information for me so

277
00:14:03,959 --> 00:14:06,480
to process browser history files browser

278
00:14:06,480 --> 00:14:09,959
data user data login and logouts log

279
00:14:09,959 --> 00:14:13,560
files okay you can just uh dump the

280
00:14:13,560 --> 00:14:17,459
output file into uh your forensic 2 as a

281
00:14:17,459 --> 00:14:21,000
disk image and it will do the job

282
00:14:21,000 --> 00:14:23,100
for you

283
00:14:23,100 --> 00:14:25,920
and the remaining uh directories here

284
00:14:25,920 --> 00:14:29,519
contain the artifacts collected by any

285
00:14:29,519 --> 00:14:31,440
other collector like the hash collector

286
00:14:31,440 --> 00:14:33,779
stats collector the the the common

287
00:14:33,779 --> 00:14:34,980
collector

288
00:14:34,980 --> 00:14:38,820
uh for instance in this uh example here

289
00:14:38,820 --> 00:14:42,360
uh the body file uh

290
00:14:42,360 --> 00:14:45,000
was created on the body file folder so

291
00:14:45,000 --> 00:14:47,820
this one was collected by stat

292
00:14:47,820 --> 00:14:50,699
um collector

293
00:14:50,699 --> 00:14:52,320
and um

294
00:14:52,320 --> 00:14:56,160
most of the the artifacts collected by

295
00:14:56,160 --> 00:15:00,240
UAC will be uh started into uh text

296
00:15:00,240 --> 00:15:05,940
files so um in this uh example here if

297
00:15:05,940 --> 00:15:09,139
you can see the the the the the hardware

298
00:15:09,139 --> 00:15:11,880
artifacts that were collected or the

299
00:15:11,880 --> 00:15:15,060
artifacts uh related to the hardware of

300
00:15:15,060 --> 00:15:16,740
the compromising system were collected

301
00:15:16,740 --> 00:15:19,920
you can see a lot of text files here so

302
00:15:19,920 --> 00:15:24,060
in in this example here the the CPU info

303
00:15:24,060 --> 00:15:26,940
comment was ran and the output of that

304
00:15:26,940 --> 00:15:30,839
comment was starting the CPU info dot

305
00:15:30,839 --> 00:15:34,560
txt so this makes the output easier to

306
00:15:34,560 --> 00:15:38,459
be found okay so also quicker if you

307
00:15:38,459 --> 00:15:41,100
need to identify what you what you are

308
00:15:41,100 --> 00:15:42,959
looking for so if you are trying to

309
00:15:42,959 --> 00:15:45,480
search for a specific common output you

310
00:15:45,480 --> 00:15:47,880
can just take a look on the output here

311
00:15:47,880 --> 00:15:51,779
and and identify your uh uh uh comment

312
00:15:51,779 --> 00:15:56,880
or your artifacts pretty uh quick

313
00:15:56,880 --> 00:16:00,779
also I think you guys noticed there's

314
00:16:00,779 --> 00:16:05,820
this STD ER files this is uh basically

315
00:16:05,820 --> 00:16:08,959
the the direct the error redirection so

316
00:16:08,959 --> 00:16:10,800
for any

317
00:16:10,800 --> 00:16:13,980
common that is ran on the compromised

318
00:16:13,980 --> 00:16:17,339
system UAC will also store the error

319
00:16:17,339 --> 00:16:20,519
messages okay so uh this way you can

320
00:16:20,519 --> 00:16:24,120
check and and investigate why a specific

321
00:16:24,120 --> 00:16:28,199
comment uh failed or if any errors were

322
00:16:28,199 --> 00:16:32,839
rated during the the triage

323
00:16:35,480 --> 00:16:40,680
the uac.log uh these logs holds

324
00:16:40,680 --> 00:16:43,019
information such as the command line use

325
00:16:43,019 --> 00:16:45,839
it when you run you AC the system

326
00:16:45,839 --> 00:16:49,199
information the options that you use it

327
00:16:49,199 --> 00:16:53,339
on the uac.com file the available system

328
00:16:53,339 --> 00:16:56,399
tools such as if tar was available if

329
00:16:56,399 --> 00:16:59,459
stat was available so you can have

330
00:16:59,459 --> 00:17:02,279
uh uh information about what kind of

331
00:17:02,279 --> 00:17:06,359
system we were you were triaging you may

332
00:17:06,359 --> 00:17:08,459
see ensures that all operations are

333
00:17:08,459 --> 00:17:11,339
logged and any errors can be identified

334
00:17:11,339 --> 00:17:16,199
in further addressed by the analyst

335
00:17:16,199 --> 00:17:18,000
so um

336
00:17:18,000 --> 00:17:21,419
besides that uh if we scroll uh down a

337
00:17:21,419 --> 00:17:25,020
little bit uh the UAC log file uh all

338
00:17:25,020 --> 00:17:27,720
the comments ran on the systems will

339
00:17:27,720 --> 00:17:31,919
also be recorded okay with their own

340
00:17:31,919 --> 00:17:35,100
timestamps so in this example here we

341
00:17:35,100 --> 00:17:37,200
can see

342
00:17:37,200 --> 00:17:39,720
um UAC started to to trade out the

343
00:17:39,720 --> 00:17:41,700
system and started by

344
00:17:41,700 --> 00:17:42,780
um

345
00:17:42,780 --> 00:17:45,240
collecting information from a process

346
00:17:45,240 --> 00:17:48,360
listing uh running a couple of PS

347
00:17:48,360 --> 00:17:50,520
comments with different

348
00:17:50,520 --> 00:17:51,900
um

349
00:17:51,900 --> 00:17:55,679
parameters and then on the second

350
00:17:55,679 --> 00:18:00,059
screen here uh we can see find trying to

351
00:18:00,059 --> 00:18:03,679
find some information for the Linux mru

352
00:18:03,679 --> 00:18:08,460
artifact so you have the complete uh uh

353
00:18:08,460 --> 00:18:11,340
um snapshot about what happened and when

354
00:18:11,340 --> 00:18:16,860
UAC collected that uh kind of um

355
00:18:16,860 --> 00:18:19,980
um artifact okay

356
00:18:19,980 --> 00:18:23,460
so let's do the fun part here uh let's

357
00:18:23,460 --> 00:18:24,900
investigate our

358
00:18:24,900 --> 00:18:28,200
I think the the best way to show you uh

359
00:18:28,200 --> 00:18:29,880
some of the artifacts collected by UAC

360
00:18:29,880 --> 00:18:32,400
is by analyzing a real compromised

361
00:18:32,400 --> 00:18:35,880
system right so let's go

362
00:18:35,880 --> 00:18:38,160
um one of the first places I would go

363
00:18:38,160 --> 00:18:39,780
when I need to analyze a compromised

364
00:18:39,780 --> 00:18:42,660
server is the process listing I think

365
00:18:42,660 --> 00:18:45,780
most of you would agree right so you can

366
00:18:45,780 --> 00:18:48,720
you can see here on the left

367
00:18:48,720 --> 00:18:50,940
uh UAC collects the process listing

368
00:18:50,940 --> 00:18:52,740
using different Commons different

369
00:18:52,740 --> 00:18:56,160
parameters and this is why why because

370
00:18:56,160 --> 00:19:00,059
uh to give you the analysts that as much

371
00:19:00,059 --> 00:19:00,980
as information

372
00:19:00,980 --> 00:19:04,500
uh uh the script can to provide you with

373
00:19:04,500 --> 00:19:07,039
this information

374
00:19:07,799 --> 00:19:12,179
another uh important artifact is

375
00:19:12,179 --> 00:19:16,260
the full path of the running processes

376
00:19:16,260 --> 00:19:19,320
um so as you know the the exe file

377
00:19:19,320 --> 00:19:21,480
within the product PID is a symbolic

378
00:19:21,480 --> 00:19:24,960
link to uh the actual path name to the

379
00:19:24,960 --> 00:19:28,799
uh executive executed comments right so

380
00:19:28,799 --> 00:19:30,660
in this compromised system here we can

381
00:19:30,660 --> 00:19:32,900
see that the binary file

382
00:19:32,900 --> 00:19:35,100
ntp client

383
00:19:35,100 --> 00:19:37,880
was executed from an uncommon directory

384
00:19:37,880 --> 00:19:44,039
right uh Dev shm and it also shows the

385
00:19:44,039 --> 00:19:47,520
binary uh was deleted from disk very

386
00:19:47,520 --> 00:19:49,679
suspicious right so this is a common

387
00:19:49,679 --> 00:19:52,260
technique used by attackers when

388
00:19:52,260 --> 00:19:56,280
where malware is install it is acute it

389
00:19:56,280 --> 00:19:58,500
and then deleted from disk so no

390
00:19:58,500 --> 00:20:01,080
remnants are are left the model will

391
00:20:01,080 --> 00:20:04,020
continue to run and execute uh we will

392
00:20:04,020 --> 00:20:05,820
no longer appear uh the executable will

393
00:20:05,820 --> 00:20:08,340
no longer appear on the disk

394
00:20:08,340 --> 00:20:12,419
so uh why they use this uh because that

395
00:20:12,419 --> 00:20:15,299
uh Slash Dev slash shm is our world

396
00:20:15,299 --> 00:20:17,700
writable director that only exists in

397
00:20:17,700 --> 00:20:18,600
memory

398
00:20:18,600 --> 00:20:20,460
so its content will be lost when the

399
00:20:20,460 --> 00:20:23,280
system is shut down or rebooted it's a

400
00:20:23,280 --> 00:20:24,960
convenient place to store malicious code

401
00:20:24,960 --> 00:20:27,900
don't you think so let's take a look on

402
00:20:27,900 --> 00:20:29,460
this malicious

403
00:20:29,460 --> 00:20:31,640
process here

404
00:20:31,640 --> 00:20:36,900
UAC will also collect or try to make a

405
00:20:36,900 --> 00:20:40,440
copy of the proc PID folder so UAC will

406
00:20:40,440 --> 00:20:42,059
collect a lot of information from that

407
00:20:42,059 --> 00:20:45,539
folder which is very uh uh useful for

408
00:20:45,539 --> 00:20:47,520
your investigation like the file

409
00:20:47,520 --> 00:20:49,679
descriptors uh the common name

410
00:20:49,679 --> 00:20:53,100
associated associated with the process

411
00:20:53,100 --> 00:20:56,640
UAC will also collect

412
00:20:56,640 --> 00:21:00,059
or make a copper try to make a copy of

413
00:21:00,059 --> 00:21:03,020
the deleted process using DD

414
00:21:03,020 --> 00:21:07,200
uh as this as this process is probably a

415
00:21:07,200 --> 00:21:09,960
malicious file UAC will collect it using

416
00:21:09,960 --> 00:21:15,120
DD with an option con uh equal Swan uh

417
00:21:15,120 --> 00:21:17,940
this option makes every pair of input

418
00:21:17,940 --> 00:21:21,660
bytes to be swapping okay so if you want

419
00:21:21,660 --> 00:21:24,059
to revert back you need to use that

420
00:21:24,059 --> 00:21:27,179
option as well UAC will also collect the

421
00:21:27,179 --> 00:21:29,940
strings for for running process and and

422
00:21:29,940 --> 00:21:32,760
so on a lot of information from from the

423
00:21:32,760 --> 00:21:36,059
proc FS for Linux systems obviously some

424
00:21:36,059 --> 00:21:39,179
systems do not even have the proc uh um

425
00:21:39,179 --> 00:21:41,039
file system

426
00:21:41,039 --> 00:21:45,179
okay UAC will also make a copy of the

427
00:21:45,179 --> 00:21:48,539
open files when

428
00:21:48,539 --> 00:21:51,059
UAC identifies the process has been

429
00:21:51,059 --> 00:21:52,679
deleted so when the process has been

430
00:21:52,679 --> 00:21:54,360
deleted from disk and it's still running

431
00:21:54,360 --> 00:21:57,960
it's suspicious so what UAC will do is

432
00:21:57,960 --> 00:22:00,780
check all the the the files that are

433
00:22:00,780 --> 00:22:04,200
being opened by that specific process my

434
00:22:04,200 --> 00:22:07,080
resource process and make a copy of them

435
00:22:07,080 --> 00:22:09,840
as well to help you with your

436
00:22:09,840 --> 00:22:12,740
investigation

437
00:22:13,200 --> 00:22:17,820
another uh nice artifact is the hidden

438
00:22:17,820 --> 00:22:20,820
files in directories so in the in the

439
00:22:20,820 --> 00:22:24,179
Unix uh basic systems a hidden file is

440
00:22:24,179 --> 00:22:28,679
nothing but a file name starting with a

441
00:22:28,679 --> 00:22:31,020
period right if either a file or a

442
00:22:31,020 --> 00:22:33,299
directory so you can

443
00:22:33,299 --> 00:22:36,840
you cannot see those files those hidden

444
00:22:36,840 --> 00:22:40,799
files uh with the normal LS command by

445
00:22:40,799 --> 00:22:44,179
default unless you use the dash a option

446
00:22:44,179 --> 00:22:47,940
attackers will sometimes try to to hide

447
00:22:47,940 --> 00:22:52,080
to hide their malicious code AS hidden

448
00:22:52,080 --> 00:22:55,260
files and and directories however hidden

449
00:22:55,260 --> 00:22:57,419
files and directors are not so common

450
00:22:57,419 --> 00:23:01,200
outside the user's home folders We Know

451
00:23:01,200 --> 00:23:04,620
home the user's home folders have a lot

452
00:23:04,620 --> 00:23:08,340
of hidden uh files and folders but

453
00:23:08,340 --> 00:23:11,640
outside there uh it's not so common to

454
00:23:11,640 --> 00:23:14,100
have uh hidden files and folders in the

455
00:23:14,100 --> 00:23:16,919
in the file system so in this example

456
00:23:16,919 --> 00:23:17,940
here

457
00:23:17,940 --> 00:23:20,640
UAC collected all the hidden files and

458
00:23:20,640 --> 00:23:24,600
we can see some suspicious files in some

459
00:23:24,600 --> 00:23:30,439
World writable uh directories right

460
00:23:30,840 --> 00:23:33,600
and this is uh also

461
00:23:33,600 --> 00:23:37,200
another artifact that is collected uh

462
00:23:37,200 --> 00:23:40,100
the list of word writable files and

463
00:23:40,100 --> 00:23:43,200
directories so in this example here we

464
00:23:43,200 --> 00:23:47,220
can see some in tnp and uh one in bar

465
00:23:47,220 --> 00:23:50,340
tnp so if you noticed this on a

466
00:23:50,340 --> 00:23:53,340
compromised server yeah take a look on

467
00:23:53,340 --> 00:23:55,260
on them because they are very

468
00:23:55,260 --> 00:23:58,260
suspicious

469
00:23:58,799 --> 00:24:01,740
so let's go back to our

470
00:24:01,740 --> 00:24:05,340
suspicious process I would say uh

471
00:24:05,340 --> 00:24:07,380
hopefully in this system that I was

472
00:24:07,380 --> 00:24:09,900
triaging that that there is net stat

473
00:24:09,900 --> 00:24:12,179
available so let's take a look on the

474
00:24:12,179 --> 00:24:15,120
next stat uh output

475
00:24:15,120 --> 00:24:18,120
uh we can see here according to this

476
00:24:18,120 --> 00:24:22,860
output the process uh has established uh

477
00:24:22,860 --> 00:24:26,640
remote connection to this IP here 194

478
00:24:26,640 --> 00:24:32,400
131 98 244 on part 443

479
00:24:32,400 --> 00:24:36,000
uh but okay travel but you mentioned in

480
00:24:36,000 --> 00:24:36,840
the in the beginning of this

481
00:24:36,840 --> 00:24:38,940
presentation let's start next touch is

482
00:24:38,940 --> 00:24:42,000
not always available on on some Unique

483
00:24:42,000 --> 00:24:45,659
Systems yeah so for instance for this

484
00:24:45,659 --> 00:24:47,640
sphere it will you will see we use

485
00:24:47,640 --> 00:24:49,799
another command to retrieve the the

486
00:24:49,799 --> 00:24:53,460
network uh connections and for the most

487
00:24:53,460 --> 00:24:57,299
recent uh Linux systems uh it also uses

488
00:24:57,299 --> 00:25:01,200
SS the socket statistics commands and

489
00:25:01,200 --> 00:25:03,539
the socket statistics commands are the

490
00:25:03,539 --> 00:25:07,320
SS command is pretty the same as netstat

491
00:25:07,320 --> 00:25:10,740
so UAC will use both netstat and SS to

492
00:25:10,740 --> 00:25:15,059
collect information about open uh ports

493
00:25:15,059 --> 00:25:17,520
and as you can see here again

494
00:25:17,520 --> 00:25:20,580
UAC will collect the same Commons or the

495
00:25:20,580 --> 00:25:23,220
the same information used using

496
00:25:23,220 --> 00:25:25,380
different parameters so you can have

497
00:25:25,380 --> 00:25:28,380
different views for the same artifact

498
00:25:28,380 --> 00:25:31,580
that you are looking for

499
00:25:31,799 --> 00:25:34,799
and then just throw in the IP into uh

500
00:25:34,799 --> 00:25:37,679
zerosoto we can see it's really

501
00:25:37,679 --> 00:25:40,860
associated with a malicious

502
00:25:40,860 --> 00:25:43,080
activity

503
00:25:43,080 --> 00:25:45,240
let's talk about

504
00:25:45,240 --> 00:25:47,940
timeline but before that let's talk

505
00:25:47,940 --> 00:25:50,700
about the body file timeline analysis is

506
00:25:50,700 --> 00:25:53,640
useful for a range of Investigations uh

507
00:25:53,640 --> 00:25:55,799
types and and often use it to answer

508
00:25:55,799 --> 00:25:58,760
questions about when a computer was used

509
00:25:58,760 --> 00:26:02,400
or what events occurred before or after

510
00:26:02,400 --> 00:26:05,940
a given event I believe most of you are

511
00:26:05,940 --> 00:26:08,460
familiar with the body file format it's

512
00:26:08,460 --> 00:26:11,400
a it's basically a CSV file that uses

513
00:26:11,400 --> 00:26:15,120
the pipe uh Char as the delimiter

514
00:26:15,120 --> 00:26:17,880
instead of the the comma

515
00:26:17,880 --> 00:26:20,640
uh in order to enhance the timeline

516
00:26:20,640 --> 00:26:23,940
creation and Analysis UAC will extract

517
00:26:23,940 --> 00:26:26,279
the file system metadata information for

518
00:26:26,279 --> 00:26:29,220
you from files and directories using the

519
00:26:29,220 --> 00:26:33,919
stat command to create a body file

520
00:26:33,919 --> 00:26:35,460
so

521
00:26:35,460 --> 00:26:38,880
um here's some examples of body files

522
00:26:38,880 --> 00:26:42,960
created by UAC on different systems and

523
00:26:42,960 --> 00:26:46,200
file systems so no matter what the file

524
00:26:46,200 --> 00:26:49,620
system is the system or uh the

525
00:26:49,620 --> 00:26:52,980
architecture UAC will try to create a

526
00:26:52,980 --> 00:26:56,340
body file uh for you so you can load

527
00:26:56,340 --> 00:26:59,220
into your preferred foresk tool like mac

528
00:26:59,220 --> 00:27:02,820
time or plazo

529
00:27:02,820 --> 00:27:04,440
um

530
00:27:04,440 --> 00:27:07,279
so

531
00:27:07,500 --> 00:27:11,340
how how UAC collects the body file or

532
00:27:11,340 --> 00:27:12,799
the metadata information

533
00:27:12,799 --> 00:27:17,580
for AIX and solar responses because

534
00:27:17,580 --> 00:27:19,320
I don't know if you guys are familiar

535
00:27:19,320 --> 00:27:21,360
with AIX and Solaris but they are they

536
00:27:21,360 --> 00:27:24,720
they do not have the stat command so you

537
00:27:24,720 --> 00:27:27,600
cannot extract the same information as

538
00:27:27,600 --> 00:27:31,500
in in a Linux a Freebase the a Mac OS so

539
00:27:31,500 --> 00:27:35,100
UAC comes with a per basic stock version

540
00:27:35,100 --> 00:27:37,380
okay so if you

541
00:27:37,380 --> 00:27:40,559
if the stat command is not available on

542
00:27:40,559 --> 00:27:43,200
the system that you are triading UAC

543
00:27:43,200 --> 00:27:46,980
will try to create the body file using

544
00:27:46,980 --> 00:27:51,120
the start uh per version instead and the

545
00:27:51,120 --> 00:27:53,760
output is exactly

546
00:27:53,760 --> 00:27:56,539
the same

547
00:27:57,600 --> 00:28:00,720
so let's back to our case again

548
00:28:00,720 --> 00:28:02,940
as as I said the body fight is very

549
00:28:02,940 --> 00:28:04,799
useful when you are trying to to create

550
00:28:04,799 --> 00:28:07,080
a super timeline for this presentation

551
00:28:07,080 --> 00:28:10,620
by uses plazo to parse

552
00:28:10,620 --> 00:28:15,059
uh uh uh uac's output fire for this uh

553
00:28:15,059 --> 00:28:19,500
server here and plazo did a a great job

554
00:28:19,500 --> 00:28:22,500
parsing uh all the artifacts including

555
00:28:22,500 --> 00:28:25,320
the body file but you can use uh your

556
00:28:25,320 --> 00:28:28,559
preferred to I created a a

557
00:28:28,559 --> 00:28:31,559
plugin for Action as well to parse the

558
00:28:31,559 --> 00:28:34,919
body file you can go to magnets page and

559
00:28:34,919 --> 00:28:37,860
download if you are uh familiar with

560
00:28:37,860 --> 00:28:39,960
action

561
00:28:39,960 --> 00:28:41,820
so

562
00:28:41,820 --> 00:28:44,960
after processing the output in in plazo

563
00:28:44,960 --> 00:28:49,140
uh you can use either a Microsoft Excel

564
00:28:49,140 --> 00:28:53,279
or this awesome timeline Explorer tool

565
00:28:53,279 --> 00:28:56,159
by Eric ziemerman to analyze our data

566
00:28:56,159 --> 00:29:00,000
you can even ingest the parseed data

567
00:29:00,000 --> 00:29:03,539
into time sketch as you can see here

568
00:29:03,539 --> 00:29:08,640
plazo parset uh uh the the log files the

569
00:29:08,640 --> 00:29:11,700
WTMP which stores information about

570
00:29:11,700 --> 00:29:14,120
Logan's log out and also

571
00:29:14,120 --> 00:29:17,520
Palazzo uh was able to

572
00:29:17,520 --> 00:29:20,520
parse the metadata information collected

573
00:29:20,520 --> 00:29:24,779
by UAC so this is your your timeline

574
00:29:24,779 --> 00:29:28,020
will look like pretty the same as uh uh

575
00:29:28,020 --> 00:29:31,500
one created from a full uh disk image

576
00:29:31,500 --> 00:29:34,500
but super timeline can be huge thousands

577
00:29:34,500 --> 00:29:36,960
of lines so it would be good to have a

578
00:29:36,960 --> 00:29:40,559
pivot point to start with right like a a

579
00:29:40,559 --> 00:29:43,799
keyword like a process name or or even

580
00:29:43,799 --> 00:29:45,299
better the date and time when the

581
00:29:45,299 --> 00:29:47,880
malicious process is started on the

582
00:29:47,880 --> 00:29:49,980
compromised system

583
00:29:49,980 --> 00:29:54,720
so hopefully uh you can use PS to gather

584
00:29:54,720 --> 00:29:58,500
info so UAC will do this for you uh in

585
00:29:58,500 --> 00:30:00,419
in our example here the malicious

586
00:30:00,419 --> 00:30:05,460
process uh 43 396 it started at

587
00:30:05,460 --> 00:30:11,100
10 10 33 a.m on a Friday July 15th by

588
00:30:11,100 --> 00:30:13,080
the Tomcat user

589
00:30:13,080 --> 00:30:15,779
but how about the time zone

590
00:30:15,779 --> 00:30:19,440
the time zone can be uh check it

591
00:30:19,440 --> 00:30:23,220
checking the date dot txt file which is

592
00:30:23,220 --> 00:30:28,520
another artifact collected by UAC

593
00:30:28,740 --> 00:30:31,620
okay moving back to our super timeline

594
00:30:31,620 --> 00:30:33,840
we can use the date and time when the

595
00:30:33,840 --> 00:30:36,779
malicious process started as our Pivot

596
00:30:36,779 --> 00:30:40,200
Point uh so let's take a look on a few

597
00:30:40,200 --> 00:30:41,220
uh

598
00:30:41,220 --> 00:30:45,620
lines here so uh

599
00:30:45,720 --> 00:30:47,580
remember that the malicious process

600
00:30:47,580 --> 00:30:50,940
started by the Tomcat user right so as

601
00:30:50,940 --> 00:30:53,820
you can see here the Tomcat user log it

602
00:30:53,820 --> 00:30:56,100
into the system seconds before the

603
00:30:56,100 --> 00:30:58,980
malicious process is starting

604
00:30:58,980 --> 00:31:02,159
two seconds after that uh we can see

605
00:31:02,159 --> 00:31:04,140
some suspicious files being created on

606
00:31:04,140 --> 00:31:07,320
disk these files uh uh we already

607
00:31:07,320 --> 00:31:11,279
identify it uh earlier today right using

608
00:31:11,279 --> 00:31:14,100
the the the the hidden files collector

609
00:31:14,100 --> 00:31:17,940
and uh and the word writable uh um

610
00:31:17,940 --> 00:31:21,140
collector as well

611
00:31:21,299 --> 00:31:24,419
let's continue for our analysis um

612
00:31:24,419 --> 00:31:30,000
more files here being created just uh

613
00:31:30,000 --> 00:31:36,059
before the process was uh Ran So I mean

614
00:31:36,059 --> 00:31:39,600
super timelines in and UAC are very I

615
00:31:39,600 --> 00:31:41,220
would say super timelines are very

616
00:31:41,220 --> 00:31:44,159
useful for triaging and identify what

617
00:31:44,159 --> 00:31:48,240
was done and with this body file file uh

618
00:31:48,240 --> 00:31:51,600
collected by UAC makes your uh uh a life

619
00:31:51,600 --> 00:31:54,059
easier because they're also gonna have

620
00:31:54,059 --> 00:31:57,000
information about files being created uh

621
00:31:57,000 --> 00:32:00,059
change and access it uh and and in the

622
00:32:00,059 --> 00:32:02,539
file system

623
00:32:03,600 --> 00:32:06,120
okay uh as part of the collection UAC

624
00:32:06,120 --> 00:32:09,419
will also hash the executable files okay

625
00:32:09,419 --> 00:32:12,360
of all running processes in this case

626
00:32:12,360 --> 00:32:13,320
here

627
00:32:13,320 --> 00:32:15,840
we have the hash for the suspicious file

628
00:32:15,840 --> 00:32:21,000
which I also uh throw into virus Toto

629
00:32:21,000 --> 00:32:25,799
and boom it's related to Mirai botnet

630
00:32:25,799 --> 00:32:29,880
okay before we finish I would like to

631
00:32:29,880 --> 00:32:32,220
mention some additional features

632
00:32:32,220 --> 00:32:34,740
provided by UAC if you are charging A

633
00:32:34,740 --> 00:32:36,299
system that is running containers for

634
00:32:36,299 --> 00:32:39,480
instance either using Docker or podman

635
00:32:39,480 --> 00:32:41,880
UAC will make use of them to collect

636
00:32:41,880 --> 00:32:45,600
artifacts uh for containers here we see

637
00:32:45,600 --> 00:32:47,460
we also collect information such as the

638
00:32:47,460 --> 00:32:49,740
list of containers uh if they are

639
00:32:49,740 --> 00:32:52,440
running or stop it when they started the

640
00:32:52,440 --> 00:32:55,919
list of exposed ports everything for you

641
00:32:55,919 --> 00:32:57,600
also

642
00:32:57,600 --> 00:33:00,840
UAC will collect information or

643
00:33:00,840 --> 00:33:03,960
artifacts from each running collect

644
00:33:03,960 --> 00:33:06,720
running container

645
00:33:06,720 --> 00:33:09,720
so UAC will look through the existing

646
00:33:09,720 --> 00:33:12,120
containers and collect logs collect

647
00:33:12,120 --> 00:33:15,059
Network information and so on for you

648
00:33:15,059 --> 00:33:18,960
and uh starting the output file this is

649
00:33:18,960 --> 00:33:20,760
extremely useful when we are triaging a

650
00:33:20,760 --> 00:33:22,799
server running hundreds of containers

651
00:33:22,799 --> 00:33:26,480
right so it's handy

652
00:33:26,940 --> 00:33:31,440
um snap and flat back uh snap is mostly

653
00:33:31,440 --> 00:33:34,080
used in was created by canonical it's

654
00:33:34,080 --> 00:33:37,620
mostly used in Ubuntu and

655
00:33:37,620 --> 00:33:39,620
um

656
00:33:39,960 --> 00:33:45,059
flat pack is mostly used in Red Hat uh

657
00:33:45,059 --> 00:33:49,080
distributions right both package formats

658
00:33:49,080 --> 00:33:51,899
are being widely used today and for

659
00:33:51,899 --> 00:33:54,240
institute to be prepared to collect

660
00:33:54,240 --> 00:33:57,419
artifacts related to them let's take a

661
00:33:57,419 --> 00:33:59,899
look uh a closer look on this telegram

662
00:33:59,899 --> 00:34:03,720
artifact so in the first on the Red

663
00:34:03,720 --> 00:34:07,860
Square here uh says UAC will collect the

664
00:34:07,860 --> 00:34:12,899
log.txt file on a normal uh path if the

665
00:34:12,899 --> 00:34:15,418
telegram application is installed using

666
00:34:15,418 --> 00:34:19,520
the built-in uh package managers like

667
00:34:19,520 --> 00:34:23,520
apt dnf um the second one and the third

668
00:34:23,520 --> 00:34:26,699
one here are related to Flat pack and

669
00:34:26,699 --> 00:34:30,359
this map so UAC will also collect is

670
00:34:30,359 --> 00:34:32,099
also prepared to collect information

671
00:34:32,099 --> 00:34:38,720
from snap and flat pack uh applications

672
00:34:39,060 --> 00:34:41,879
creation time for

673
00:34:41,879 --> 00:34:44,820
xt4 okay this is interesting

674
00:34:44,820 --> 00:34:48,239
uh most Linux systems will not provide

675
00:34:48,239 --> 00:34:50,639
the creation time or birth time for a

676
00:34:50,639 --> 00:34:54,659
file or director via the stat command

677
00:34:54,659 --> 00:34:58,320
well there's a debug FS approach but

678
00:34:58,320 --> 00:35:02,220
it's it's I mean it's not practical you

679
00:35:02,220 --> 00:35:04,859
need to do a lot of steps a lot of

680
00:35:04,859 --> 00:35:10,440
comments so uh what UAC does is uh UAC

681
00:35:10,440 --> 00:35:13,800
has its own to start X

682
00:35:13,800 --> 00:35:16,200
stat X uses

683
00:35:16,200 --> 00:35:20,220
system call that was introduced since

684
00:35:20,220 --> 00:35:22,859
kernel 4.11.

685
00:35:22,859 --> 00:35:26,520
so if the system has

686
00:35:26,520 --> 00:35:31,260
is running kernel 4.11 or newer UAC will

687
00:35:31,260 --> 00:35:34,440
try to run stat X to retrieve the

688
00:35:34,440 --> 00:35:38,339
creation date for files and folders okay

689
00:35:38,339 --> 00:35:43,260
so this is very very useful for when UAC

690
00:35:43,260 --> 00:35:47,400
is creating the body file you also you

691
00:35:47,400 --> 00:35:50,940
also have the creation time for xt4

692
00:35:50,940 --> 00:35:54,960
files okay if the kernel version is 4.11

693
00:35:54,960 --> 00:35:59,040
or newer which is awesome

694
00:35:59,040 --> 00:36:02,640
to finish my presentation here uh last

695
00:36:02,640 --> 00:36:04,880
but not least the memory acquisition

696
00:36:04,880 --> 00:36:07,200
memory analysis is a powerful for

697
00:36:07,200 --> 00:36:09,180
instance technique but acquiring memory

698
00:36:09,180 --> 00:36:11,880
jump from Unix like systems has been

699
00:36:11,880 --> 00:36:14,520
proven to be challenged right I think

700
00:36:14,520 --> 00:36:17,460
you guys agree with me so UAC uses

701
00:36:17,460 --> 00:36:20,040
Microsoft avml tool to create memory

702
00:36:20,040 --> 00:36:22,619
dumps for Linux systems unfortunately

703
00:36:22,619 --> 00:36:26,820
this is uh or this only works for uh

704
00:36:26,820 --> 00:36:29,220
Linux okay after the collection you can

705
00:36:29,220 --> 00:36:32,160
use your preferred to uh to parse and

706
00:36:32,160 --> 00:36:33,920
analyze the memory

707
00:36:33,920 --> 00:36:37,079
contains okay

708
00:36:37,079 --> 00:36:39,000
so if you want to find more information

709
00:36:39,000 --> 00:36:42,000
about UAC please visit the projects uh

710
00:36:42,000 --> 00:36:43,320
with post Story the projects

711
00:36:43,320 --> 00:36:47,400
documentation page uh I invite you all

712
00:36:47,400 --> 00:36:49,079
to contribute

713
00:36:49,079 --> 00:36:52,619
to the um to the project either creating

714
00:36:52,619 --> 00:36:56,579
a new new artifacts be meeting new

715
00:36:56,579 --> 00:36:59,940
profiles uh proposing new features and

716
00:36:59,940 --> 00:37:04,500
and even reporting uh bugs okay uh

717
00:37:04,500 --> 00:37:07,859
my special thanks to uh the IBM cert and

718
00:37:07,859 --> 00:37:10,020
X-Force guys that had been supporting

719
00:37:10,020 --> 00:37:12,960
the two since its beginning thank you

720
00:37:12,960 --> 00:37:16,380
Sams as well feel free to contact me in

721
00:37:16,380 --> 00:37:19,200
LinkedIn Twitter or in the digital

722
00:37:19,200 --> 00:37:22,980
forensics uh Discord server and good

723
00:37:22,980 --> 00:37:25,800
looking have fun during your incident

724
00:37:25,800 --> 00:37:29,359
response engagements yeah

