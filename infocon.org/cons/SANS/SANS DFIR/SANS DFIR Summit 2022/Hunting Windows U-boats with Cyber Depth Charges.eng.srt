1
00:00:00,659 --> 00:00:02,960
foreign

2
00:00:07,340 --> 00:00:10,740
researcher here at Splunk and this is uh

3
00:00:10,740 --> 00:00:13,019
my talk on Hunting Windows U-boats with

4
00:00:13,019 --> 00:00:16,320
cyber depth charges

5
00:00:16,320 --> 00:00:19,320
um who am I I'm M haggis on Twitter get

6
00:00:19,320 --> 00:00:21,840
M haggis probably not best to Google

7
00:00:21,840 --> 00:00:24,720
haggis right now

8
00:00:24,720 --> 00:00:26,220
um but yeah I currently have been at

9
00:00:26,220 --> 00:00:28,019
school for about a year and a half

10
00:00:28,019 --> 00:00:30,000
on the threat research team this is

11
00:00:30,000 --> 00:00:31,619
where we simulate or emulate threat

12
00:00:31,619 --> 00:00:33,899
actors we research new techniques

13
00:00:33,899 --> 00:00:36,360
generate content and we publish all this

14
00:00:36,360 --> 00:00:37,760
out into

15
00:00:37,760 --> 00:00:40,260
Splunk Enterprise security and we have

16
00:00:40,260 --> 00:00:41,760
an app Enterprise security content

17
00:00:41,760 --> 00:00:45,660
update and prior to Splunk I was at Red

18
00:00:45,660 --> 00:00:48,480
Canary for four years and you may know

19
00:00:48,480 --> 00:00:50,879
me from Atomic red team

20
00:00:50,879 --> 00:00:53,219
and other parts will start research that

21
00:00:53,219 --> 00:00:54,840
we had done there

22
00:00:54,840 --> 00:00:56,820
um so yeah let's hop in I'm very excited

23
00:00:56,820 --> 00:00:58,620
to share this with everybody

24
00:00:58,620 --> 00:01:02,460
all right so back in 2018

25
00:01:02,460 --> 00:01:06,060
um we I was digging through a carbon

26
00:01:06,060 --> 00:01:09,360
black response binary store

27
00:01:09,360 --> 00:01:10,500
um

28
00:01:10,500 --> 00:01:13,080
and it was just kind of like looking for

29
00:01:13,080 --> 00:01:15,600
an interesting binaries that were you

30
00:01:15,600 --> 00:01:16,979
know being collected by carbon black

31
00:01:16,979 --> 00:01:20,580
response and ended up coming across a a

32
00:01:20,580 --> 00:01:23,060
very interesting suspicious like

33
00:01:23,060 --> 00:01:25,560
system.sys file ended up being a driver

34
00:01:25,560 --> 00:01:28,860
it was named like a dub file and whatnot

35
00:01:28,860 --> 00:01:30,420
and um

36
00:01:30,420 --> 00:01:33,240
it took us a while to get this blog out

37
00:01:33,240 --> 00:01:34,680
at Red Canary because we didn't really

38
00:01:34,680 --> 00:01:36,600
know how to shape it because we didn't

39
00:01:36,600 --> 00:01:38,520
know how it got to this environment or

40
00:01:38,520 --> 00:01:40,920
got to this particular endpoint

41
00:01:40,920 --> 00:01:42,780
um we had shipped the detection but we

42
00:01:42,780 --> 00:01:44,880
didn't have all the artifacts there

43
00:01:44,880 --> 00:01:47,100
and so Casey and I we had dug into this

44
00:01:47,100 --> 00:01:49,140
we identified it was definitely some

45
00:01:49,140 --> 00:01:51,119
type of a root kit loading up into this

46
00:01:51,119 --> 00:01:54,420
endpoint we didn't know what or why

47
00:01:54,420 --> 00:01:55,740
um and then later we shipped another

48
00:01:55,740 --> 00:01:59,220
detection or a Blog uh related to some

49
00:01:59,220 --> 00:02:00,840
of the behaviors related to it ended up

50
00:02:00,840 --> 00:02:04,860
being a report pushed out by NS Focus

51
00:02:04,860 --> 00:02:06,119
Global

52
00:02:06,119 --> 00:02:10,380
um called nugget Phantom and they had a

53
00:02:10,380 --> 00:02:11,640
kind of like this little graph here

54
00:02:11,640 --> 00:02:15,000
showing how this got onto an endpoint

55
00:02:15,000 --> 00:02:16,980
and we had all the same similar

56
00:02:16,980 --> 00:02:18,720
artifacts and

57
00:02:18,720 --> 00:02:21,360
the uh you can see it kind of popped in

58
00:02:21,360 --> 00:02:23,099
through Eternal blue

59
00:02:23,099 --> 00:02:25,739
um they had you know renamed.jpg files

60
00:02:25,739 --> 00:02:28,140
different things leading up to and then

61
00:02:28,140 --> 00:02:30,239
the piece that we caught was this dump

62
00:02:30,239 --> 00:02:32,599
underscore X8

63
00:02:32,599 --> 00:02:37,319
x64.sys file that was signed and it had

64
00:02:37,319 --> 00:02:39,780
a an expired certificate

65
00:02:39,780 --> 00:02:41,459
um but with Windows a lot of things can

66
00:02:41,459 --> 00:02:43,319
still be loaded and that's where a lot

67
00:02:43,319 --> 00:02:46,319
of this talk comes from and so all these

68
00:02:46,319 --> 00:02:48,480
behaviors are very interesting and it

69
00:02:48,480 --> 00:02:50,640
took us a long time to truly see where

70
00:02:50,640 --> 00:02:52,379
what this was coming from and why it was

71
00:02:52,379 --> 00:02:55,319
here and this was one of the first like

72
00:02:55,319 --> 00:02:58,019
true like driver-based root kits that I

73
00:02:58,019 --> 00:03:01,200
have found and it was just so strange

74
00:03:01,200 --> 00:03:03,120
um and getting there took a lot of work

75
00:03:03,120 --> 00:03:06,480
uh and so the problem in why I'm here

76
00:03:06,480 --> 00:03:08,280
talking about it is hunting drivers as

77
00:03:08,280 --> 00:03:11,340
Windows root kits is very hard uh the

78
00:03:11,340 --> 00:03:14,159
the volume of data coming out of Windows

79
00:03:14,159 --> 00:03:18,659
is very high for module lows dlls uh

80
00:03:18,659 --> 00:03:21,959
assist files there's a you know talking

81
00:03:21,959 --> 00:03:23,220
about from like a threat hunting

82
00:03:23,220 --> 00:03:26,519
perspective the reward is kind of low

83
00:03:26,519 --> 00:03:29,159
um you can't just say go find root Cuts

84
00:03:29,159 --> 00:03:31,560
because you won't find a root kit out of

85
00:03:31,560 --> 00:03:33,480
a 50 000 endpoint environment

86
00:03:33,480 --> 00:03:36,000
and if there is one it's going to be

87
00:03:36,000 --> 00:03:37,980
very hard to identify it you know

88
00:03:37,980 --> 00:03:39,840
without taking apart every single one of

89
00:03:39,840 --> 00:03:41,580
them or trying to understand identify

90
00:03:41,580 --> 00:03:44,700
what each driver is doing it could take

91
00:03:44,700 --> 00:03:47,760
years and it just it's just a very slow

92
00:03:47,760 --> 00:03:50,400
process and call it a special level of

93
00:03:50,400 --> 00:03:52,140
fret hunting

94
00:03:52,140 --> 00:03:54,720
um it's just a different place to be and

95
00:03:54,720 --> 00:03:58,980
the challenge is is very hard so

96
00:03:58,980 --> 00:04:01,140
that's why I I think this is a very

97
00:04:01,140 --> 00:04:02,580
interesting talk

98
00:04:02,580 --> 00:04:04,319
um and try to get people to think about

99
00:04:04,319 --> 00:04:06,720
drivers a little bit differently

100
00:04:06,720 --> 00:04:08,340
because it's they are actively being

101
00:04:08,340 --> 00:04:09,180
used

102
00:04:09,180 --> 00:04:10,860
um they have actively always been used

103
00:04:10,860 --> 00:04:13,260
in the past by you know what you want to

104
00:04:13,260 --> 00:04:15,060
call it nation state threat actors you

105
00:04:15,060 --> 00:04:17,040
know they use these things to persist in

106
00:04:17,040 --> 00:04:19,918
a very long-term long-form way so

107
00:04:19,918 --> 00:04:22,860
argetta is uh what do drivers Buy in

108
00:04:22,860 --> 00:04:24,600
adversary you know why would an

109
00:04:24,600 --> 00:04:26,699
adversary use a driver we're going to

110
00:04:26,699 --> 00:04:29,220
talk about driver siding because siding

111
00:04:29,220 --> 00:04:31,560
goes pretty hand in hand with how

112
00:04:31,560 --> 00:04:34,800
Windows Microsoft and a driver can be

113
00:04:34,800 --> 00:04:37,139
loaded into the operating system we'll

114
00:04:37,139 --> 00:04:39,060
dig into hunting for them we'll look at

115
00:04:39,060 --> 00:04:42,419
living off the land drivers or byobd

116
00:04:42,419 --> 00:04:44,699
bring your own vulnerable driver and

117
00:04:44,699 --> 00:04:46,800
then hopefully get some tips on how to

118
00:04:46,800 --> 00:04:49,380
prevent this what's native to Windows

119
00:04:49,380 --> 00:04:52,500
and dig into all of that fun stuff

120
00:04:52,500 --> 00:04:55,979
all right so jumping in my favorite

121
00:04:55,979 --> 00:04:58,380
little cat thumbs up what do drivers buy

122
00:04:58,380 --> 00:05:00,300
an adversary

123
00:05:00,300 --> 00:05:02,880
um the tricky thing with Windows is we

124
00:05:02,880 --> 00:05:04,020
are dealing with an operating system

125
00:05:04,020 --> 00:05:06,000
that's been around for a long time so

126
00:05:06,000 --> 00:05:07,440
we're looking at a lot of backwards

127
00:05:07,440 --> 00:05:09,180
compatibility here

128
00:05:09,180 --> 00:05:11,880
Microsoft Windows will load signed

129
00:05:11,880 --> 00:05:15,300
unsigned drivers old and new

130
00:05:15,300 --> 00:05:17,400
um there are pieces in there today that

131
00:05:17,400 --> 00:05:19,620
will help us natively prevent these

132
00:05:19,620 --> 00:05:21,900
things but typically if it's been there

133
00:05:21,900 --> 00:05:23,940
for a long time maybe a driver that's

134
00:05:23,940 --> 00:05:26,160
malicious or vulnerable it's probably

135
00:05:26,160 --> 00:05:28,020
still there today and it's still being

136
00:05:28,020 --> 00:05:29,820
loaded up and that's what makes these

137
00:05:29,820 --> 00:05:32,400
really hard it does provide that kernel

138
00:05:32,400 --> 00:05:34,139
level persistence whether it's something

139
00:05:34,139 --> 00:05:36,419
that's being exploited as a vulnerable

140
00:05:36,419 --> 00:05:38,699
driver or it was actually a malicious

141
00:05:38,699 --> 00:05:40,560
driver that was placed there being

142
00:05:40,560 --> 00:05:42,780
loaded and executed that way

143
00:05:42,780 --> 00:05:45,419
this is extremely hard for antivirus

144
00:05:45,419 --> 00:05:48,240
products to prevent and thankfully

145
00:05:48,240 --> 00:05:50,580
Microsoft is taking a stronger approach

146
00:05:50,580 --> 00:05:53,400
with how they allow drivers to be signed

147
00:05:53,400 --> 00:05:55,620
and vetted and placed into the operating

148
00:05:55,620 --> 00:05:58,139
system but AV products today they don't

149
00:05:58,139 --> 00:05:59,880
really see vulnerable drivers as

150
00:05:59,880 --> 00:06:01,919
malicious because if you start

151
00:06:01,919 --> 00:06:04,860
preventing legitimate drivers then you

152
00:06:04,860 --> 00:06:07,080
start preventing things from working on

153
00:06:07,080 --> 00:06:09,120
the operating system and they're hard to

154
00:06:09,120 --> 00:06:10,880
detect they're not named

155
00:06:10,880 --> 00:06:14,039
evildriver.sys they're just they could

156
00:06:14,039 --> 00:06:15,600
be anything like what we saw with the

157
00:06:15,600 --> 00:06:17,759
Nugget Phantom tool it was just dump

158
00:06:17,759 --> 00:06:21,600
underscore some numbers.sys and you

159
00:06:21,600 --> 00:06:22,919
can't just look at it and say that

160
00:06:22,919 --> 00:06:26,039
that's bad based on the name so it can

161
00:06:26,039 --> 00:06:27,419
get really tricky when you're diving

162
00:06:27,419 --> 00:06:29,400
into these things and trying to identify

163
00:06:29,400 --> 00:06:32,460
what is truly malicious

164
00:06:32,460 --> 00:06:34,740
um and like I mentioned drivers and

165
00:06:34,740 --> 00:06:38,039
signing go very hand in hand

166
00:06:38,039 --> 00:06:40,680
um back in the day 32-bit drivers were

167
00:06:40,680 --> 00:06:43,259
always unsigned and you will probably

168
00:06:43,259 --> 00:06:44,940
see some of these in your environment

169
00:06:44,940 --> 00:06:48,000
still uh Windows Vista and up we started

170
00:06:48,000 --> 00:06:50,100
seeing new enforcement again it did

171
00:06:50,100 --> 00:06:52,220
require that backwards compatibility

172
00:06:52,220 --> 00:06:55,020
backwards compatibility introduced

173
00:06:55,020 --> 00:06:58,199
living off the land drivers or rephrase

174
00:06:58,199 --> 00:07:01,860
by eclipseum as screwdrivers or we see

175
00:07:01,860 --> 00:07:04,740
in miter I got the T number it's t1068

176
00:07:04,740 --> 00:07:07,680
where they reference byovd bring your

177
00:07:07,680 --> 00:07:09,960
own vulnerable driver now when we're

178
00:07:09,960 --> 00:07:11,580
talking about votable drivers these are

179
00:07:11,580 --> 00:07:13,199
drivers that are assigned they're

180
00:07:13,199 --> 00:07:16,139
legitimate maybe they're expired or

181
00:07:16,139 --> 00:07:18,360
distrusted today but you could still

182
00:07:18,360 --> 00:07:20,039
bring them into the operating system and

183
00:07:20,039 --> 00:07:22,039
load them to do whatever you need to do

184
00:07:22,039 --> 00:07:24,539
and then it also led to certificate

185
00:07:24,539 --> 00:07:27,419
theft probably the most recent one we

186
00:07:27,419 --> 00:07:30,180
know for cert theft was related to uh

187
00:07:30,180 --> 00:07:32,699
the lapsis group where they had you know

188
00:07:32,699 --> 00:07:34,380
infiltrated Nvidia stole their

189
00:07:34,380 --> 00:07:35,819
certificate and then all of a sudden we

190
00:07:35,819 --> 00:07:38,520
started seeing like signed malware

191
00:07:38,520 --> 00:07:40,500
um so all of this kind of combined is

192
00:07:40,500 --> 00:07:42,840
how like drivers and signatures truly go

193
00:07:42,840 --> 00:07:44,580
hand in hand

194
00:07:44,580 --> 00:07:47,479
um and there's a lot more here but

195
00:07:47,479 --> 00:07:50,099
there's only so much we can dive into uh

196
00:07:50,099 --> 00:07:51,960
just related to the signing and how

197
00:07:51,960 --> 00:07:53,699
these things kind of go down but that's

198
00:07:53,699 --> 00:07:56,099
the gist so

199
00:07:56,099 --> 00:07:57,960
um what's a hunt where to hunt and how

200
00:07:57,960 --> 00:07:59,360
are we going to hunt for these things

201
00:07:59,360 --> 00:08:01,800
let's dive in

202
00:08:01,800 --> 00:08:03,960
um another quick thing dropped earlier

203
00:08:03,960 --> 00:08:05,099
this year

204
00:08:05,099 --> 00:08:07,020
what so many things have dropped this

205
00:08:07,020 --> 00:08:08,099
year

206
00:08:08,099 --> 00:08:10,259
um but this one stood out to me and this

207
00:08:10,259 --> 00:08:11,900
one I thought was really cool because

208
00:08:11,900 --> 00:08:13,860
this group

209
00:08:13,860 --> 00:08:16,440
um this chinese-linked actors Symantec

210
00:08:16,440 --> 00:08:17,520
says it's you know one of the most

211
00:08:17,520 --> 00:08:20,039
advanced pieces of malware they saw uh

212
00:08:20,039 --> 00:08:24,120
the Jackson stealthy back door and most

213
00:08:24,120 --> 00:08:27,840
all of this was malicious drivers

214
00:08:27,840 --> 00:08:30,900
um that they had signed and so when I

215
00:08:30,900 --> 00:08:32,580
saw that this is the first thing I

216
00:08:32,580 --> 00:08:34,740
thought was let's go and dump this and

217
00:08:34,740 --> 00:08:36,958
see what's actually in these in these

218
00:08:36,958 --> 00:08:39,299
Styles because I want to understand you

219
00:08:39,299 --> 00:08:41,820
know how it's what you know like who the

220
00:08:41,820 --> 00:08:43,620
publisher was what they're saying their

221
00:08:43,620 --> 00:08:45,660
company is and you know if it's truly

222
00:08:45,660 --> 00:08:46,680
signed

223
00:08:46,680 --> 00:08:49,380
um so I used a tool called Sig check

224
00:08:49,380 --> 00:08:52,560
from CIS internals and so this

225
00:08:52,560 --> 00:08:54,600
screenshot here we'll see on the left

226
00:08:54,600 --> 00:08:56,820
whether it's verified and you can see

227
00:08:56,820 --> 00:08:58,920
most of them are signed some were

228
00:08:58,920 --> 00:09:01,200
explicitly revoked

229
00:09:01,200 --> 00:09:02,880
um which is good or bad I don't know but

230
00:09:02,880 --> 00:09:04,500
it'll still be loaded and then the

231
00:09:04,500 --> 00:09:06,720
32-bit ones are going to be mostly your

232
00:09:06,720 --> 00:09:08,220
unsigned ones here

233
00:09:08,220 --> 00:09:10,680
and then when you're looking at these

234
00:09:10,680 --> 00:09:13,500
the dates always of Interest a lot of

235
00:09:13,500 --> 00:09:15,420
this can be spoofed and changed however

236
00:09:15,420 --> 00:09:17,880
you want uh publisher

237
00:09:17,880 --> 00:09:20,820
and Company are interesting uh this is

238
00:09:20,820 --> 00:09:22,380
one of the first things that stood out

239
00:09:22,380 --> 00:09:24,540
to me was they're saying Microsoft

240
00:09:24,540 --> 00:09:28,380
Corporation but the digsig publisher is

241
00:09:28,380 --> 00:09:30,839
something else entirely which it would

242
00:09:30,839 --> 00:09:33,360
be Microsoft if it was publisher so

243
00:09:33,360 --> 00:09:36,060
those are really off for me

244
00:09:36,060 --> 00:09:37,680
um some of them have descriptions which

245
00:09:37,680 --> 00:09:40,740
is great but sometimes a description you

246
00:09:40,740 --> 00:09:42,600
know doesn't really mean anything which

247
00:09:42,600 --> 00:09:44,459
Microsoft would never ship I would have

248
00:09:44,459 --> 00:09:45,540
said I would assume Microsoft would

249
00:09:45,540 --> 00:09:48,120
never shipping when transport driver or

250
00:09:48,120 --> 00:09:50,760
Ms land driver things like that and then

251
00:09:50,760 --> 00:09:52,440
under the product

252
00:09:52,440 --> 00:09:55,200
one I'll call out is right here why I

253
00:09:55,200 --> 00:09:56,580
highlight it

254
00:09:56,580 --> 00:09:58,440
um thing that stood out to me real quick

255
00:09:58,440 --> 00:09:59,640
was

256
00:09:59,640 --> 00:10:02,279
the way Microsoft signs these and the

257
00:10:02,279 --> 00:10:04,860
way the product is uh this one in

258
00:10:04,860 --> 00:10:06,839
particular has a couple spaces in front

259
00:10:06,839 --> 00:10:09,000
of its name and so to confirm that what

260
00:10:09,000 --> 00:10:10,560
I ended up doing

261
00:10:10,560 --> 00:10:14,220
was I used a Powershell to just dump a

262
00:10:14,220 --> 00:10:17,519
bunch of version info for these and I

263
00:10:17,519 --> 00:10:19,140
call it out right here you can see this

264
00:10:19,140 --> 00:10:21,540
one has spaces inside of it

265
00:10:21,540 --> 00:10:22,860
um and so

266
00:10:22,860 --> 00:10:25,320
they kind of look legitimate being

267
00:10:25,320 --> 00:10:28,200
Microsoft Windows OS for the product you

268
00:10:28,200 --> 00:10:29,640
know they got the names kind of right

269
00:10:29,640 --> 00:10:31,860
some of them are signed

270
00:10:31,860 --> 00:10:34,019
this is why it's so important to

271
00:10:34,019 --> 00:10:35,399
understand what's running in your

272
00:10:35,399 --> 00:10:37,500
environment and goes right back to with

273
00:10:37,500 --> 00:10:40,260
nugget Phantom you know what's out there

274
00:10:40,260 --> 00:10:42,360
you know what's running assigned or

275
00:10:42,360 --> 00:10:44,040
distrusted and things like that that's

276
00:10:44,040 --> 00:10:45,779
why the signing stuff is so important

277
00:10:45,779 --> 00:10:48,420
for rootkits because again it just makes

278
00:10:48,420 --> 00:10:50,339
them look far more legitimate than they

279
00:10:50,339 --> 00:10:52,920
really are and that just here at the

280
00:10:52,920 --> 00:10:55,920
bottom leads to just the whole code dub

281
00:10:55,920 --> 00:10:57,959
of all of these drivers uh the

282
00:10:57,959 --> 00:11:00,420
spreadsheet and the Powershell output

283
00:11:00,420 --> 00:11:01,740
here

284
00:11:01,740 --> 00:11:03,420
so

285
00:11:03,420 --> 00:11:06,000
um I I kind of look at the the like the

286
00:11:06,000 --> 00:11:08,279
signature the certificate data uh kind

287
00:11:08,279 --> 00:11:09,779
of the same way carbon black response

288
00:11:09,779 --> 00:11:11,760
shows it in the product

289
00:11:11,760 --> 00:11:13,200
um I just kind of wanted to break this

290
00:11:13,200 --> 00:11:14,579
down so everybody kind of sees what

291
00:11:14,579 --> 00:11:16,800
these look like so digsig result is like

292
00:11:16,800 --> 00:11:18,660
whether it's signed or unsigned or in

293
00:11:18,660 --> 00:11:20,339
this case it's showing up a sign with

294
00:11:20,339 --> 00:11:21,839
Sig check

295
00:11:21,839 --> 00:11:23,940
um you got your publisher which is like

296
00:11:23,940 --> 00:11:27,600
this uh Beijing type Corp company name

297
00:11:27,600 --> 00:11:30,240
Microsoft and transport driver and the

298
00:11:30,240 --> 00:11:31,440
product things like that so you can kind

299
00:11:31,440 --> 00:11:33,899
of see where these align with uh carbon

300
00:11:33,899 --> 00:11:37,260
black response and so you can see uh if

301
00:11:37,260 --> 00:11:38,820
you were hunting for these types of

302
00:11:38,820 --> 00:11:41,220
things and any product or you know

303
00:11:41,220 --> 00:11:44,160
manually sifting through an endpoint

304
00:11:44,160 --> 00:11:46,380
um this data is very important uh and it

305
00:11:46,380 --> 00:11:49,260
can tell you puzzles and or tell you

306
00:11:49,260 --> 00:11:51,660
gives you pieces to the puzzle and you

307
00:11:51,660 --> 00:11:52,980
have to kind of combine these things and

308
00:11:52,980 --> 00:11:55,380
understand what's legitimate or not

309
00:11:55,380 --> 00:11:58,560
um a really interesting hunt uh is going

310
00:11:58,560 --> 00:12:01,200
back to that timepiece here and saying

311
00:12:01,200 --> 00:12:04,380
let's run in my environment from 2015

312
00:12:04,380 --> 00:12:05,720
and before

313
00:12:05,720 --> 00:12:07,920
and you might find some really old

314
00:12:07,920 --> 00:12:09,779
software that had installed the driver

315
00:12:09,779 --> 00:12:13,079
years ago or you might find it today

316
00:12:13,079 --> 00:12:15,180
somebody's trying to install a piece of

317
00:12:15,180 --> 00:12:17,640
software that has a driver required on

318
00:12:17,640 --> 00:12:20,760
there that's a really old signed driver

319
00:12:20,760 --> 00:12:22,980
um it's it's a really sketchy world

320
00:12:22,980 --> 00:12:24,959
digging at the drivers and the

321
00:12:24,959 --> 00:12:26,820
signatures and all that so it's kind of

322
00:12:26,820 --> 00:12:28,620
like almost like two talks in one you're

323
00:12:28,620 --> 00:12:30,300
like hey I'm going for root kits but at

324
00:12:30,300 --> 00:12:31,980
the same time I have to know and

325
00:12:31,980 --> 00:12:33,120
understand a little bit about how

326
00:12:33,120 --> 00:12:36,120
signing works with this

327
00:12:36,120 --> 00:12:40,320
um so drivers they can they can be

328
00:12:40,320 --> 00:12:42,320
loaded kind of from pretty much anywhere

329
00:12:42,320 --> 00:12:44,700
typically they will always come out

330
00:12:44,700 --> 00:12:47,339
legitimately come out of a driver's path

331
00:12:47,339 --> 00:12:50,519
in system 32 drivers or uh you'll see

332
00:12:50,519 --> 00:12:52,800
like sometimes uh adversary will drop it

333
00:12:52,800 --> 00:12:55,079
under School drivers or they'll put it

334
00:12:55,079 --> 00:12:57,779
into you know program data or Windows 10

335
00:12:57,779 --> 00:12:59,820
things like that

336
00:12:59,820 --> 00:13:01,440
um those are really good hunts they're

337
00:13:01,440 --> 00:13:03,300
very simple to go after

338
00:13:03,300 --> 00:13:06,360
if you want to find syst styles.sys

339
00:13:06,360 --> 00:13:08,100
files running from non-standard paths

340
00:13:08,100 --> 00:13:10,500
you can say not in these couple paths

341
00:13:10,500 --> 00:13:12,660
that you know for your environment and

342
00:13:12,660 --> 00:13:14,399
then start to kind of drill down from

343
00:13:14,399 --> 00:13:17,579
there for like nugget Phantom or

344
00:13:17,579 --> 00:13:20,760
dachshund those types of uh things this

345
00:13:20,760 --> 00:13:22,440
little card Blackberry here at the

346
00:13:22,440 --> 00:13:24,300
bottom says you know looking for drivers

347
00:13:24,300 --> 00:13:26,459
that are explicitly distrusted well you

348
00:13:26,459 --> 00:13:28,920
can say not in this path but I want to

349
00:13:28,920 --> 00:13:30,899
find explicitly distrusted binaries or

350
00:13:30,899 --> 00:13:33,360
CIS files in my environment that'd be

351
00:13:33,360 --> 00:13:35,279
one way to go after it

352
00:13:35,279 --> 00:13:38,459
um digsig result really helps to narrow

353
00:13:38,459 --> 00:13:40,920
down the amount of data you have to look

354
00:13:40,920 --> 00:13:43,680
at there will be false positives

355
00:13:43,680 --> 00:13:45,959
um and if you just remove the digsig

356
00:13:45,959 --> 00:13:47,820
result you'll just get every system file

357
00:13:47,820 --> 00:13:50,220
running in your environment so you have

358
00:13:50,220 --> 00:13:52,620
to play with the data uh balance the

359
00:13:52,620 --> 00:13:54,300
amount of volume of the information you

360
00:13:54,300 --> 00:13:56,639
want to have to dig through and it gets

361
00:13:56,639 --> 00:13:58,680
just voluminous because now you're just

362
00:13:58,680 --> 00:14:00,720
looking at everything

363
00:14:00,720 --> 00:14:03,240
um but like we saw a dachshund you'll

364
00:14:03,240 --> 00:14:06,000
find stuff with Microsoft tied to it

365
00:14:06,000 --> 00:14:08,579
with a different publisher and then

366
00:14:08,579 --> 00:14:10,260
those will start to stand out you might

367
00:14:10,260 --> 00:14:12,899
find you know adware and random things

368
00:14:12,899 --> 00:14:14,880
like that popping

369
00:14:14,880 --> 00:14:17,540
um and yeah I I make the name because

370
00:14:17,540 --> 00:14:20,000
malicious drivers are never just

371
00:14:20,000 --> 00:14:22,440
evildriver.sys they can be anything

372
00:14:22,440 --> 00:14:25,620
right and there's all kinds of names

373
00:14:25,620 --> 00:14:27,120
that you'll find out there and you saw

374
00:14:27,120 --> 00:14:30,000
daxon use pretty commonly things to

375
00:14:30,000 --> 00:14:31,500
blend in

376
00:14:31,500 --> 00:14:33,120
um they want to persist right and that's

377
00:14:33,120 --> 00:14:35,880
the whole point of using a root kit as a

378
00:14:35,880 --> 00:14:37,560
driver you want to persist on this

379
00:14:37,560 --> 00:14:39,300
endpoint for an extremely long period of

380
00:14:39,300 --> 00:14:42,660
time without being detected

381
00:14:42,660 --> 00:14:44,880
um and so what's another place we can

382
00:14:44,880 --> 00:14:46,079
look at

383
00:14:46,079 --> 00:14:48,720
um so with Dachshund or with uh any

384
00:14:48,720 --> 00:14:51,060
driver in your environment

385
00:14:51,060 --> 00:14:53,100
um you can go and look for new Services

386
00:14:53,100 --> 00:14:55,740
being registered uh or drivers being

387
00:14:55,740 --> 00:14:58,560
registered and so under current control

388
00:14:58,560 --> 00:15:02,760
set Services you can find new and all

389
00:15:02,760 --> 00:15:05,040
drivers being registered and so this is

390
00:15:05,040 --> 00:15:06,540
a really good example to like say like

391
00:15:06,540 --> 00:15:08,279
an adversary gets on the box or using

392
00:15:08,279 --> 00:15:10,320
football strike or something

393
00:15:10,320 --> 00:15:13,019
um and they register a new driver and

394
00:15:13,019 --> 00:15:14,399
this would be a cool place where you

395
00:15:14,399 --> 00:15:16,019
would see the registration happening

396
00:15:16,019 --> 00:15:18,899
someone writing two Services uh red surf

397
00:15:18,899 --> 00:15:21,720
32 hitting it like why what's what's so

398
00:15:21,720 --> 00:15:24,300
you know monitoring it uh it might be an

399
00:15:24,300 --> 00:15:25,560
Avenue but it's not going to be the most

400
00:15:25,560 --> 00:15:26,940
perfect Avenue because you'll end up

401
00:15:26,940 --> 00:15:28,740
finding that there's always something

402
00:15:28,740 --> 00:15:30,540
going on with drivers being registered

403
00:15:30,540 --> 00:15:32,040
or new Services being registered here

404
00:15:32,040 --> 00:15:34,500
they can be a little voluminous

405
00:15:34,500 --> 00:15:36,180
um the two registry keys here at the

406
00:15:36,180 --> 00:15:39,300
bottom this is the safe boot safe mode

407
00:15:39,300 --> 00:15:42,779
uh persistent so an adversary may hit

408
00:15:42,779 --> 00:15:46,260
these to keep their driver loading up

409
00:15:46,260 --> 00:15:48,420
into safe mode so if you were attempting

410
00:15:48,420 --> 00:15:50,459
to you know maybe something suspicious

411
00:15:50,459 --> 00:15:52,199
happened on this box and while they

412
00:15:52,199 --> 00:15:54,180
registered in safe mode you're in safe

413
00:15:54,180 --> 00:15:55,800
mode it's still going to load up and

414
00:15:55,800 --> 00:15:56,760
call out

415
00:15:56,760 --> 00:15:59,639
back to nugget Phantom

416
00:15:59,639 --> 00:16:01,740
um it most likely was just mining for

417
00:16:01,740 --> 00:16:04,440
Bitcoins but they also wanted to do it

418
00:16:04,440 --> 00:16:06,180
in safe mode so no matter what they

419
00:16:06,180 --> 00:16:08,160
persisted for a very long period of time

420
00:16:08,160 --> 00:16:10,500
so that they could just get Bitcoin

421
00:16:10,500 --> 00:16:12,839
right so there's a lot of persistence

422
00:16:12,839 --> 00:16:15,720
here and registry is a great place to go

423
00:16:15,720 --> 00:16:17,940
and monitor these two particular keys I

424
00:16:17,940 --> 00:16:20,579
added Atomic test for it

425
00:16:20,579 --> 00:16:22,800
um you can find this an atomic red team

426
00:16:22,800 --> 00:16:24,240
where you can just simulate that

427
00:16:24,240 --> 00:16:26,519
behavior to go and try to identify any

428
00:16:26,519 --> 00:16:28,440
kind of rights to the safe boot key

429
00:16:28,440 --> 00:16:31,260
there that whole path

430
00:16:31,260 --> 00:16:33,180
um another one that's really cool with

431
00:16:33,180 --> 00:16:35,459
Windows thankfully we have an event code

432
00:16:35,459 --> 00:16:37,139
7045

433
00:16:37,139 --> 00:16:39,600
and if you want to just look at all 70

434
00:16:39,600 --> 00:16:41,759
45s in your environment

435
00:16:41,759 --> 00:16:44,160
um remove the service type here and it

436
00:16:44,160 --> 00:16:46,079
will show you everything uh being

437
00:16:46,079 --> 00:16:48,360
registered and it it's not just kernel

438
00:16:48,360 --> 00:16:50,040
mode drivers you'll see all kinds of

439
00:16:50,040 --> 00:16:53,459
data popping but thankfully we can set

440
00:16:53,459 --> 00:16:55,079
this to just looking at kernel mode

441
00:16:55,079 --> 00:16:57,420
drivers being added and registered to

442
00:16:57,420 --> 00:17:00,779
your environment it may be voluminous uh

443
00:17:00,779 --> 00:17:02,279
you might find a lot of things happening

444
00:17:02,279 --> 00:17:05,220
all the time but once you start to

445
00:17:05,220 --> 00:17:07,500
narrow it down and get like a decent

446
00:17:07,500 --> 00:17:10,439
Baseline of what's new or what's you

447
00:17:10,439 --> 00:17:13,199
know kind of normal and happening you

448
00:17:13,199 --> 00:17:15,359
can start to see those patterns pop up

449
00:17:15,359 --> 00:17:18,119
and you get a really good idea of what's

450
00:17:18,119 --> 00:17:20,280
you know known good and knowing bad for

451
00:17:20,280 --> 00:17:21,799
your environment

452
00:17:21,799 --> 00:17:25,319
and a lot of this a lot of drivering uh

453
00:17:25,319 --> 00:17:27,000
and whatnot is based on just

454
00:17:27,000 --> 00:17:28,740
unfortunately a baseline of what's

455
00:17:28,740 --> 00:17:30,960
happening in your environment there's no

456
00:17:30,960 --> 00:17:33,059
perfect answer for going after these

457
00:17:33,059 --> 00:17:35,899
things unfortunately

458
00:17:36,059 --> 00:17:38,220
um so yeah uh we talked briefly about

459
00:17:38,220 --> 00:17:40,080
Lowell drivers screwdrivers back on the

460
00:17:40,080 --> 00:17:42,240
signing side of things

461
00:17:42,240 --> 00:17:44,039
um there's been some pretty solid

462
00:17:44,039 --> 00:17:46,440
research out there uh about vulnerable

463
00:17:46,440 --> 00:17:48,960
drivers Capcom driver has been around a

464
00:17:48,960 --> 00:17:50,880
very long time

465
00:17:50,880 --> 00:17:52,679
um there's some Dell drivers out there

466
00:17:52,679 --> 00:17:55,140
most recently which uh was blocked by

467
00:17:55,140 --> 00:17:57,960
rapid7 on the second link which uh back

468
00:17:57,960 --> 00:18:00,900
in 2021 just last December there's a

469
00:18:00,900 --> 00:18:02,160
couple there's I think there's three

470
00:18:02,160 --> 00:18:04,679
Dell drivers uh that could still be

471
00:18:04,679 --> 00:18:06,840
abused today and Rapid seven walks

472
00:18:06,840 --> 00:18:08,940
through how to abuse those which is

473
00:18:08,940 --> 00:18:11,100
incredible really cool stuff

474
00:18:11,100 --> 00:18:12,900
um there's some ASRock drivers so we're

475
00:18:12,900 --> 00:18:15,900
talking not just you know random drivers

476
00:18:15,900 --> 00:18:17,400
out there but these are yeah Dell

477
00:18:17,400 --> 00:18:19,200
drivers this is like Hardware based type

478
00:18:19,200 --> 00:18:21,299
drivers that are just vulnerable and can

479
00:18:21,299 --> 00:18:23,100
still be abused

480
00:18:23,100 --> 00:18:25,200
um Microsoft has a really solid block

481
00:18:25,200 --> 00:18:26,100
list

482
00:18:26,100 --> 00:18:28,679
and this should be enabled by default

483
00:18:28,679 --> 00:18:31,799
today in Windows 10 11. so if you were

484
00:18:31,799 --> 00:18:33,539
to attempt to load up the Capcom driver

485
00:18:33,539 --> 00:18:37,080
it should be blocked uh if it's not then

486
00:18:37,080 --> 00:18:39,000
you probably need to go in and start

487
00:18:39,000 --> 00:18:40,380
revisiting these rules and start

488
00:18:40,380 --> 00:18:41,700
blocking these

489
00:18:41,700 --> 00:18:44,820
now the Dell drivers are not on the

490
00:18:44,820 --> 00:18:47,400
Microsoft lock list uh there's three of

491
00:18:47,400 --> 00:18:49,980
them and they're not too old but they're

492
00:18:49,980 --> 00:18:51,600
interesting and they should be tracked

493
00:18:51,600 --> 00:18:54,720
in a certain way because obviously midi

494
00:18:54,720 --> 00:18:57,320
large organizations use Dell hardware

495
00:18:57,320 --> 00:19:00,240
and these drivers are most likely there

496
00:19:00,240 --> 00:19:02,160
if you've had these if you had this type

497
00:19:02,160 --> 00:19:04,620
of hardware for a couple years now

498
00:19:04,620 --> 00:19:06,360
um you'll have these Dell drivers most

499
00:19:06,360 --> 00:19:07,919
likely and whether you know they're

500
00:19:07,919 --> 00:19:09,299
vulnerable or not this is where you have

501
00:19:09,299 --> 00:19:11,940
to go in and dig look at that version of

502
00:19:11,940 --> 00:19:13,140
the driver

503
00:19:13,140 --> 00:19:15,360
determine if you can update it to the

504
00:19:15,360 --> 00:19:17,760
latest without breaking things and then

505
00:19:17,760 --> 00:19:20,880
go from there right so yeah eclipsium

506
00:19:20,880 --> 00:19:22,620
did their research a couple years ago I

507
00:19:22,620 --> 00:19:23,880
don't think they've had an update in a

508
00:19:23,880 --> 00:19:26,220
year or two but they have a long list of

509
00:19:26,220 --> 00:19:29,220
drivers that may be abused

510
00:19:29,220 --> 00:19:31,500
um and then attacker KB has a CDE for

511
00:19:31,500 --> 00:19:33,059
one of them here as well

512
00:19:33,059 --> 00:19:35,400
so yeah hopefully uh this helps you get

513
00:19:35,400 --> 00:19:37,260
a good idea and go and Chase these I've

514
00:19:37,260 --> 00:19:38,760
tried to create a spreadsheet of these

515
00:19:38,760 --> 00:19:42,360
once or twice before but I feel like uh

516
00:19:42,360 --> 00:19:44,520
there's just so much variance and so

517
00:19:44,520 --> 00:19:47,580
much data to share on this that there's

518
00:19:47,580 --> 00:19:49,440
not just like a good place to just dump

519
00:19:49,440 --> 00:19:51,240
it but hopefully I'll get this done soon

520
00:19:51,240 --> 00:19:52,620
and I I gotta get it out there I think

521
00:19:52,620 --> 00:19:54,419
it's worthwhile at least folks can see

522
00:19:54,419 --> 00:19:56,280
it all in one place

523
00:19:56,280 --> 00:19:59,220
oh so this is the problem right his

524
00:19:59,220 --> 00:20:01,679
windows will load them all uh I worked

525
00:20:01,679 --> 00:20:03,780
for a large corporation uh prior to Red

526
00:20:03,780 --> 00:20:06,840
Canary we had 50 000 endpoints all

527
00:20:06,840 --> 00:20:08,580
around the globe

528
00:20:08,580 --> 00:20:10,799
um I wish we could just say Microsoft

529
00:20:10,799 --> 00:20:13,860
enable uh your prevention and block all

530
00:20:13,860 --> 00:20:16,020
these things or why is my AV not

531
00:20:16,020 --> 00:20:18,539
preventing these things or at least like

532
00:20:18,539 --> 00:20:20,820
telling me about them

533
00:20:20,820 --> 00:20:22,860
um you know we had old software going

534
00:20:22,860 --> 00:20:24,720
back to like XP and everything like that

535
00:20:24,720 --> 00:20:26,880
like it's just old stuff and it will

536
00:20:26,880 --> 00:20:30,059
just load it uh 36-bit unsigned drivers

537
00:20:30,059 --> 00:20:32,820
how do you know they're bad or good like

538
00:20:32,820 --> 00:20:35,160
it's there's just so much and then

539
00:20:35,160 --> 00:20:37,260
upgrading these systems to today having

540
00:20:37,260 --> 00:20:39,480
to use this old piece of software old

541
00:20:39,480 --> 00:20:41,940
Hardware that requires a driver

542
00:20:41,940 --> 00:20:43,320
you can't just turn these things off

543
00:20:43,320 --> 00:20:45,720
right like you got a business to run and

544
00:20:45,720 --> 00:20:47,460
that's the hard part is Windows will

545
00:20:47,460 --> 00:20:49,500
just go ahead and load every single one

546
00:20:49,500 --> 00:20:51,000
of them

547
00:20:51,000 --> 00:20:53,580
um which stinks so

548
00:20:53,580 --> 00:20:55,200
um let's stack and rank all of these

549
00:20:55,200 --> 00:20:56,880
right um so how do we like kind of like

550
00:20:56,880 --> 00:20:59,280
dig into our hunting dig into you know

551
00:20:59,280 --> 00:21:01,559
trying to identify these you know using

552
00:21:01,559 --> 00:21:03,500
you know whatever data sources we have

553
00:21:03,500 --> 00:21:06,600
and so in this particular case I'm just

554
00:21:06,600 --> 00:21:09,059
using Splunk I'm using sysmon

555
00:21:09,059 --> 00:21:11,220
I have a config that I share called

556
00:21:11,220 --> 00:21:13,980
hunting naked there's other configs that

557
00:21:13,980 --> 00:21:15,780
you could use with sysmon where you can

558
00:21:15,780 --> 00:21:17,640
just you know say show me everything for

559
00:21:17,640 --> 00:21:21,020
event code six uh six is driver loading

560
00:21:21,020 --> 00:21:24,419
and so here I'm just saying you know

561
00:21:24,419 --> 00:21:27,900
show me sys files or all event code 6

562
00:21:27,900 --> 00:21:31,140
here whether they're signed who signed

563
00:21:31,140 --> 00:21:33,120
it that's our signature piece and

564
00:21:33,120 --> 00:21:35,220
whether it's still signed

565
00:21:35,220 --> 00:21:36,659
um and in this case you can see I was

566
00:21:36,659 --> 00:21:38,880
playing with some of the Dell drivers uh

567
00:21:38,880 --> 00:21:41,880
Capcom drivers are in here and this is

568
00:21:41,880 --> 00:21:44,159
running on uh what we have at Splunk is

569
00:21:44,159 --> 00:21:46,320
called the Splunk attack range and so

570
00:21:46,320 --> 00:21:47,880
I'm just loading this up into a server

571
00:21:47,880 --> 00:21:50,460
2016 machine and was just playing with

572
00:21:50,460 --> 00:21:53,700
them pretty simple to do and I'll share

573
00:21:53,700 --> 00:21:55,679
all of this on my repo I'll give that

574
00:21:55,679 --> 00:21:57,780
link out here in a minute but uh yeah

575
00:21:57,780 --> 00:21:59,940
you can see different paths all that

576
00:21:59,940 --> 00:22:01,320
kind of stuff and just playing and

577
00:22:01,320 --> 00:22:04,500
loading and it all works just fine uh I

578
00:22:04,500 --> 00:22:07,140
did not exploit these but uh the the

579
00:22:07,140 --> 00:22:09,539
fact that these are running in an

580
00:22:09,539 --> 00:22:11,220
environment from non-standard paths is

581
00:22:11,220 --> 00:22:12,539
kind of like one of those pieces where

582
00:22:12,539 --> 00:22:15,000
you want to go and inventory and

583
00:22:15,000 --> 00:22:17,280
understand in your environment you know

584
00:22:17,280 --> 00:22:19,380
what's happening out there where our

585
00:22:19,380 --> 00:22:21,419
assist file is loading so if you do have

586
00:22:21,419 --> 00:22:23,460
an EDR or a place where this type of

587
00:22:23,460 --> 00:22:27,120
data is like Central you can dig through

588
00:22:27,120 --> 00:22:29,700
sys files and understand why are they

589
00:22:29,700 --> 00:22:31,860
running from non-stander paths is it a

590
00:22:31,860 --> 00:22:33,900
particular software that requires it to

591
00:22:33,900 --> 00:22:36,840
be in this right random plays or can it

592
00:22:36,840 --> 00:22:38,520
be updated or removed so that you don't

593
00:22:38,520 --> 00:22:41,480
have to deal with that

594
00:22:41,760 --> 00:22:43,559
um and then I also created a very basic

595
00:22:43,559 --> 00:22:45,299
dashboard in Splunk which again will be

596
00:22:45,299 --> 00:22:47,940
on my repo and I'm just looking for like

597
00:22:47,940 --> 00:22:51,240
new sys files coming in my environment

598
00:22:51,240 --> 00:22:53,280
um and at the time you know I was

599
00:22:53,280 --> 00:22:55,860
playing with Capcom and whatnot so you

600
00:22:55,860 --> 00:22:58,500
could see those and then creating a new

601
00:22:58,500 --> 00:23:00,840
or adding a new kernel driver so this is

602
00:23:00,840 --> 00:23:04,100
the 7045 and sc.exe

603
00:23:04,100 --> 00:23:07,140
saying create this new you know driver

604
00:23:07,140 --> 00:23:10,799
type his kernel start it uh and ship it

605
00:23:10,799 --> 00:23:12,780
that way so there are ways we can go and

606
00:23:12,780 --> 00:23:14,820
look for these things they may not all

607
00:23:14,820 --> 00:23:17,159
be the same adversaries may not do this

608
00:23:17,159 --> 00:23:20,220
every single time by registering it or

609
00:23:20,220 --> 00:23:22,380
you know what not but it's hopefully

610
00:23:22,380 --> 00:23:26,340
with 70 45 and registry looking for new

611
00:23:26,340 --> 00:23:28,559
system files on this things like that

612
00:23:28,559 --> 00:23:30,720
all kind of help and give us some better

613
00:23:30,720 --> 00:23:33,000
visibility into what's happening out

614
00:23:33,000 --> 00:23:35,100
there

615
00:23:35,100 --> 00:23:37,500
um and then like kind of on the EDR side

616
00:23:37,500 --> 00:23:41,159
you know where do CIS files load

617
00:23:41,159 --> 00:23:43,080
um you'll find all of your drivers

618
00:23:43,080 --> 00:23:46,260
loading into ntos kernel and if you ever

619
00:23:46,260 --> 00:23:49,440
looked at ntos kernel it is a uh yeah

620
00:23:49,440 --> 00:23:52,080
it's it's a barn burner

621
00:23:52,080 --> 00:23:53,700
um there's just tons of things going all

622
00:23:53,700 --> 00:23:56,640
the time and so I would look at this

623
00:23:56,640 --> 00:23:59,700
with carbon black response and it's just

624
00:23:59,700 --> 00:24:02,280
that's everything so I always try to

625
00:24:02,280 --> 00:24:06,600
limit the uh what I want to look at

626
00:24:06,600 --> 00:24:09,000
based on the digital signature results

627
00:24:09,000 --> 00:24:11,400
that signing data was it is it

628
00:24:11,400 --> 00:24:14,220
distrusted or is it unsigned

629
00:24:14,220 --> 00:24:15,480
um yeah you're gonna miss things you're

630
00:24:15,480 --> 00:24:17,280
going to miss whether you know a sign

631
00:24:17,280 --> 00:24:19,140
malicious driver or vulnerable drivers

632
00:24:19,140 --> 00:24:21,539
loading things like that but maybe we

633
00:24:21,539 --> 00:24:23,460
can find some distrusted ones which we

634
00:24:23,460 --> 00:24:25,020
did see with Dachshund some were

635
00:24:25,020 --> 00:24:27,900
explicitly distrusted uh and with nugget

636
00:24:27,900 --> 00:24:30,780
Phantom it was distrusted as well so we

637
00:24:30,780 --> 00:24:32,640
can go and look for these things into US

638
00:24:32,640 --> 00:24:35,100
kernel and the way CB response works at

639
00:24:35,100 --> 00:24:37,380
the time was you could say uh the

640
00:24:37,380 --> 00:24:39,600
digital signature result of the module

641
00:24:39,600 --> 00:24:43,440
load is unsigned or distrusted into ntos

642
00:24:43,440 --> 00:24:45,179
kernel

643
00:24:45,179 --> 00:24:47,340
um again it's voluminous there's going

644
00:24:47,340 --> 00:24:49,799
to be so many things going on in most

645
00:24:49,799 --> 00:24:51,299
organizations

646
00:24:51,299 --> 00:24:53,280
um you can also perform this same type

647
00:24:53,280 --> 00:24:54,480
of pattern

648
00:24:54,480 --> 00:24:56,580
looking for the results loading into

649
00:24:56,580 --> 00:24:59,460
like lsas uh lsas is another one that

650
00:24:59,460 --> 00:25:01,200
will just kind of load a lot of things

651
00:25:01,200 --> 00:25:03,720
and it's a lot of just volume and data

652
00:25:03,720 --> 00:25:07,260
and you're like why is a unsigned dll

653
00:25:07,260 --> 00:25:10,620
loading into lsas it makes no sense but

654
00:25:10,620 --> 00:25:12,419
if you're working in Windows long enough

655
00:25:12,419 --> 00:25:15,740
it all makes sense

656
00:25:15,960 --> 00:25:17,400
um I don't know if it's a sinking ship

657
00:25:17,400 --> 00:25:19,500
but it's a ship right and so we keep

658
00:25:19,500 --> 00:25:21,299
digging and going deeper into these

659
00:25:21,299 --> 00:25:22,980
things

660
00:25:22,980 --> 00:25:25,080
um you know digging into signing digging

661
00:25:25,080 --> 00:25:26,880
into drivers trying to understand these

662
00:25:26,880 --> 00:25:29,220
patterns and you know depending on how

663
00:25:29,220 --> 00:25:30,900
large your organization is what's the

664
00:25:30,900 --> 00:25:33,900
best way for you to go and and pull this

665
00:25:33,900 --> 00:25:36,120
data back is it one by one do you have

666
00:25:36,120 --> 00:25:40,260
an EDR is this data somehow Central

667
00:25:40,260 --> 00:25:42,840
um to to identify these things and to do

668
00:25:42,840 --> 00:25:45,659
better at it I call these pen test

669
00:25:45,659 --> 00:25:48,960
report tips uh on Twitter I call it red

670
00:25:48,960 --> 00:25:51,600
team tips because I always feel like

671
00:25:51,600 --> 00:25:53,640
um whenever we get a report from a pen

672
00:25:53,640 --> 00:25:55,380
test or a red team is very just like

673
00:25:55,380 --> 00:25:58,380
inventory drivers enable Windows attack

674
00:25:58,380 --> 00:26:00,539
surface reduction rules

675
00:26:00,539 --> 00:26:03,000
um the very high level maybe you know

676
00:26:03,000 --> 00:26:04,860
you can't do it in your org I could

677
00:26:04,860 --> 00:26:06,659
never do it in my org

678
00:26:06,659 --> 00:26:08,159
um it's always these hard things like

679
00:26:08,159 --> 00:26:10,500
yeah sure you know

680
00:26:10,500 --> 00:26:12,000
um but I think it's important to know

681
00:26:12,000 --> 00:26:14,820
that there are things that we can do we

682
00:26:14,820 --> 00:26:17,039
can inventory drivers that's that's not

683
00:26:17,039 --> 00:26:19,380
too crazy hard but it's hard

684
00:26:19,380 --> 00:26:22,380
um a tax service reduction rules uh you

685
00:26:22,380 --> 00:26:24,960
can enable these through Powershell and

686
00:26:24,960 --> 00:26:26,820
I always say that if you can't enable

687
00:26:26,820 --> 00:26:28,799
them to prevention at least put it in

688
00:26:28,799 --> 00:26:31,140
audit and get that data somewhere so

689
00:26:31,140 --> 00:26:33,900
then you can at least see maybe a Capcom

690
00:26:33,900 --> 00:26:36,000
driver is out there and it's either

691
00:26:36,000 --> 00:26:38,039
legit or not being used at least you

692
00:26:38,039 --> 00:26:40,500
know it's there and ASR could prevent

693
00:26:40,500 --> 00:26:43,740
that for you or say like those ASRock

694
00:26:43,740 --> 00:26:45,240
drivers or something like that anything

695
00:26:45,240 --> 00:26:49,200
on the Microsoft block list is here ASR

696
00:26:49,200 --> 00:26:50,700
will help you prevent these things

697
00:26:50,700 --> 00:26:52,620
pretty much almost out of the box and

698
00:26:52,620 --> 00:26:54,299
you're ready to go uh if you can't

699
00:26:54,299 --> 00:26:57,779
enforce for prevent go for audit

700
00:26:57,779 --> 00:27:00,320
um use secure but very simple right

701
00:27:00,320 --> 00:27:02,100
hopefully a lot of these things are

702
00:27:02,100 --> 00:27:04,860
enabled today there is a new thing with

703
00:27:04,860 --> 00:27:07,679
Windows last couple years driver signing

704
00:27:07,679 --> 00:27:09,900
enforcement Microsoft has really taken

705
00:27:09,900 --> 00:27:12,900
steps to prevent uh just anything from

706
00:27:12,900 --> 00:27:14,880
loading that's signed but there's still

707
00:27:14,880 --> 00:27:16,559
ways around around it as we've kind of

708
00:27:16,559 --> 00:27:19,200
seen with vulnerable drivers that are

709
00:27:19,200 --> 00:27:22,140
signed Implement a type of application

710
00:27:22,140 --> 00:27:25,020
control back then you know it was bit

711
00:27:25,020 --> 00:27:28,020
nine it's like Enterprise prevent or

712
00:27:28,020 --> 00:27:30,000
something today there's other ones out

713
00:27:30,000 --> 00:27:31,860
there there's a lot of app control tools

714
00:27:31,860 --> 00:27:34,380
even Defender application control or

715
00:27:34,380 --> 00:27:37,799
tool like app Locker you can prevent sys

716
00:27:37,799 --> 00:27:39,600
files from loading out of non-saler

717
00:27:39,600 --> 00:27:41,880
paths once you have your inventory you

718
00:27:41,880 --> 00:27:44,159
can ship an app Locker policy that says

719
00:27:44,159 --> 00:27:47,039
do not load CIS files from program data

720
00:27:47,039 --> 00:27:49,799
and from then on hopefully you know you

721
00:27:49,799 --> 00:27:51,960
never have to deal with it but something

722
00:27:51,960 --> 00:27:53,460
bad will never run out of those certain

723
00:27:53,460 --> 00:27:55,320
paths

724
00:27:55,320 --> 00:27:58,140
um so yeah and it's sort of a summary of

725
00:27:58,140 --> 00:28:00,179
all all of this right the conclusion is

726
00:28:00,179 --> 00:28:02,279
very much this is hard there's a ton of

727
00:28:02,279 --> 00:28:03,960
data out there to be dug through and to

728
00:28:03,960 --> 00:28:07,679
be had uh however getting to a place of

729
00:28:07,679 --> 00:28:09,840
knowing what's there like an

730
00:28:09,840 --> 00:28:11,700
Enlightenment type Place knowing what's

731
00:28:11,700 --> 00:28:12,960
there

732
00:28:12,960 --> 00:28:15,179
um all of this is obtainable if you

733
00:28:15,179 --> 00:28:16,860
can't prevent it at least we can go and

734
00:28:16,860 --> 00:28:18,779
dig and hunt for these things and

735
00:28:18,779 --> 00:28:20,820
identify them

736
00:28:20,820 --> 00:28:22,620
um definitely look into preventative

737
00:28:22,620 --> 00:28:25,440
measures if you haven't seen how app

738
00:28:25,440 --> 00:28:28,020
Locker works or ASR rules and how they

739
00:28:28,020 --> 00:28:30,720
can be enabled and prevented I'll share

740
00:28:30,720 --> 00:28:32,760
my link to my repo where I have a lot of

741
00:28:32,760 --> 00:28:35,159
like just the simple basic stuff to kind

742
00:28:35,159 --> 00:28:36,900
of run with

743
00:28:36,900 --> 00:28:38,760
um check for prevalence look for drivers

744
00:28:38,760 --> 00:28:41,760
out there what's out there and we have a

745
00:28:41,760 --> 00:28:45,140
list based on eclipsium Microsoft

746
00:28:45,140 --> 00:28:48,659
rapid7 they have all dumped a list of

747
00:28:48,659 --> 00:28:50,640
vulnerable drivers at least we can go

748
00:28:50,640 --> 00:28:53,400
and understand all right you know we can

749
00:28:53,400 --> 00:28:55,380
we have we run Dell well we have a lot

750
00:28:55,380 --> 00:28:57,120
of Dell drivers okay like we should

751
00:28:57,120 --> 00:28:59,039
probably look at versions and make sure

752
00:28:59,039 --> 00:29:00,240
they've been updated in the last couple

753
00:29:00,240 --> 00:29:02,340
years things like that

754
00:29:02,340 --> 00:29:03,779
um it's mostly just keeping an eye on

755
00:29:03,779 --> 00:29:05,460
these things right so what's new what's

756
00:29:05,460 --> 00:29:07,440
been re what's been recently registered

757
00:29:07,440 --> 00:29:09,419
uh as a kernel mode driver in my

758
00:29:09,419 --> 00:29:13,020
environment and if you haven't uh check

759
00:29:13,020 --> 00:29:14,700
out Atomic red team there's a lot of

760
00:29:14,700 --> 00:29:17,220
good data in there and my repo will have

761
00:29:17,220 --> 00:29:19,919
a simple little uh Atomic a simple

762
00:29:19,919 --> 00:29:21,899
Atomic test that will help you to

763
00:29:21,899 --> 00:29:24,480
register a driver and then you can go

764
00:29:24,480 --> 00:29:26,399
and you know hunt for it and check it

765
00:29:26,399 --> 00:29:29,100
out whether it's your EDR or in you know

766
00:29:29,100 --> 00:29:30,600
Splunk or if you're trying to do

767
00:29:30,600 --> 00:29:32,940
something more manual you could do it

768
00:29:32,940 --> 00:29:34,440
all these different ways so

769
00:29:34,440 --> 00:29:37,200
yeah uh thank you for listening I I

770
00:29:37,200 --> 00:29:38,820
don't know if I went fast or slow I

771
00:29:38,820 --> 00:29:41,159
don't know but uh uh my repo's here

772
00:29:41,159 --> 00:29:45,059
GitHub M haggis slash notes I have a

773
00:29:45,059 --> 00:29:48,600
driver's uh path in there and inside I

774
00:29:48,600 --> 00:29:51,720
have uh my slide I have notes I also

775
00:29:51,720 --> 00:29:54,360
have um a vulnerable driver to play with

776
00:29:54,360 --> 00:29:56,640
things like that

777
00:29:56,640 --> 00:29:58,020
um yeah thank you all for listening

778
00:29:58,020 --> 00:30:00,120
thank you Sans for having me I really

779
00:30:00,120 --> 00:30:02,840
appreciate it

780
00:30:03,200 --> 00:30:06,260
all right

