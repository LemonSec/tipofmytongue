1
00:00:00,659 --> 00:00:02,960
foreign

2
00:00:06,799 --> 00:00:09,540
I'm going to talk about uh OneDrive

3
00:00:09,540 --> 00:00:11,400
forensics uh

4
00:00:11,400 --> 00:00:13,679
basically

5
00:00:13,679 --> 00:00:14,360
um

6
00:00:14,360 --> 00:00:16,560
OneDrive is

7
00:00:16,560 --> 00:00:18,600
Microsoft's uh

8
00:00:18,600 --> 00:00:20,580
Cloud file solution a storage solution

9
00:00:20,580 --> 00:00:22,920
and uh it comes in two different flavors

10
00:00:22,920 --> 00:00:25,980
uh business and personal

11
00:00:25,980 --> 00:00:28,439
um what I'm going to touch on is

12
00:00:28,439 --> 00:00:31,320
basically what if we don't have unified

13
00:00:31,320 --> 00:00:34,500
audit logs or anything related that's

14
00:00:34,500 --> 00:00:37,040
stored in the cloud uh this can become

15
00:00:37,040 --> 00:00:39,780
particularly true with on the personal

16
00:00:39,780 --> 00:00:41,399
side because we're not going to have the

17
00:00:41,399 --> 00:00:44,340
unified audit logs anyways so basically

18
00:00:44,340 --> 00:00:46,320
what is left on the endpoint that we can

19
00:00:46,320 --> 00:00:49,399
still grab data from

20
00:00:50,239 --> 00:00:53,340
quick control on me um about me I'm

21
00:00:53,340 --> 00:00:57,360
gonna be for analyst uh Sans alumni

22
00:00:57,360 --> 00:00:58,140
um

23
00:00:58,140 --> 00:01:00,059
I wrote OneDrive Explorer which we're

24
00:01:00,059 --> 00:01:03,059
gonna kind of touch on today uh also did

25
00:01:03,059 --> 00:01:05,820
sub parser it deals with um semantic

26
00:01:05,820 --> 00:01:07,920
endpoint production

27
00:01:07,920 --> 00:01:10,080
um so if you're a semantic shop I'd

28
00:01:10,080 --> 00:01:12,840
recommend checking that out uh also did

29
00:01:12,840 --> 00:01:14,700
some stuff with pretty x-ray in

30
00:01:14,700 --> 00:01:18,000
particular uh decrypting McAfee or

31
00:01:18,000 --> 00:01:20,220
McAfee and uh

32
00:01:20,220 --> 00:01:23,939
uh semantic quarantine pills I also

33
00:01:23,939 --> 00:01:26,000
wrote uh

34
00:01:26,000 --> 00:01:28,920
pcap tool plugin for proc.

35
00:01:28,920 --> 00:01:32,580
um and couple targets modules for Cape

36
00:01:32,580 --> 00:01:34,680
and then uh you can find my information

37
00:01:34,680 --> 00:01:39,479
on keybase and then the GitHub for uh

38
00:01:39,479 --> 00:01:42,619
OneDrive Explorer

39
00:01:43,619 --> 00:01:44,939
um so the agenda for today we're gonna

40
00:01:44,939 --> 00:01:47,520
cover a couple OneDrive artifacts uh

41
00:01:47,520 --> 00:01:49,020
collection

42
00:01:49,020 --> 00:01:50,820
um then we're gonna jump into OneDrive

43
00:01:50,820 --> 00:01:54,119
Explorer uh do some automation with cape

44
00:01:54,119 --> 00:01:56,520
and little Lessons Learned and we're

45
00:01:56,520 --> 00:01:57,840
going to touch on the log files a little

46
00:01:57,840 --> 00:02:00,020
bit

47
00:02:02,700 --> 00:02:05,219
um so as a warning there might be a

48
00:02:05,219 --> 00:02:07,380
little spoiler alert with this too uh if

49
00:02:07,380 --> 00:02:10,739
you're taking the for 500 because uh

50
00:02:10,739 --> 00:02:12,420
I borrowed the data from there just so I

51
00:02:12,420 --> 00:02:14,400
wasn't like exposing any personal data

52
00:02:14,400 --> 00:02:16,739
and stuff like that so

53
00:02:16,739 --> 00:02:19,560
but as far as artifacts go

54
00:02:19,560 --> 00:02:21,599
um we have local files

55
00:02:21,599 --> 00:02:25,319
uh so these would include like the the

56
00:02:25,319 --> 00:02:28,739
default location for your OneDrive files

57
00:02:28,739 --> 00:02:30,860
um

58
00:02:31,020 --> 00:02:35,459
you also have data stored in the Regis

59
00:02:35,459 --> 00:02:37,260
in the user's registry

60
00:02:37,260 --> 00:02:38,879
um under

61
00:02:38,879 --> 00:02:41,819
this under software Microsoft uh

62
00:02:41,819 --> 00:02:43,980
OneDrive accounts and also in the sync

63
00:02:43,980 --> 00:02:47,519
engine product uh sync engines provider

64
00:02:47,519 --> 00:02:49,319
um and we also have some metadata laying

65
00:02:49,319 --> 00:02:55,399
around in the uh user zapdata folders

66
00:02:57,239 --> 00:02:59,819
um first artifact I want to touch on is

67
00:02:59,819 --> 00:03:01,560
in the tenants key

68
00:03:01,560 --> 00:03:04,980
and what this key does is it tracks

69
00:03:04,980 --> 00:03:06,840
um the folders that are synced from

70
00:03:06,840 --> 00:03:10,319
other other sources uh it's important to

71
00:03:10,319 --> 00:03:13,080
look at this location to find

72
00:03:13,080 --> 00:03:16,200
where on the endpoint all these files

73
00:03:16,200 --> 00:03:18,720
are stored because

74
00:03:18,720 --> 00:03:19,980
um when they're shared out they're not

75
00:03:19,980 --> 00:03:22,920
always in like the user's OneDrive or

76
00:03:22,920 --> 00:03:24,300
Dash

77
00:03:24,300 --> 00:03:27,060
um whatever company name it is they can

78
00:03:27,060 --> 00:03:30,140
be stored in other locations

79
00:03:32,159 --> 00:03:35,280
and then for metadata wise you have the

80
00:03:35,280 --> 00:03:37,920
user said that that file that's uh

81
00:03:37,920 --> 00:03:40,140
stored in local Microsoft OneDrive

82
00:03:40,140 --> 00:03:42,180
settings

83
00:03:42,180 --> 00:03:43,620
um depending on this personal or

84
00:03:43,620 --> 00:03:44,519
business

85
00:03:44,519 --> 00:03:46,019
uh

86
00:03:46,019 --> 00:03:48,239
so what this stores is local files cloud

87
00:03:48,239 --> 00:03:49,680
files

88
00:03:49,680 --> 00:03:50,340
um

89
00:03:50,340 --> 00:03:52,980
so if we run strings on it it'll just

90
00:03:52,980 --> 00:03:56,220
dump out uh just a list of the files and

91
00:03:56,220 --> 00:03:58,500
folders that that are in OneDrive and

92
00:03:58,500 --> 00:04:00,659
there's you know no Rhyme or Reason to

93
00:04:00,659 --> 00:04:01,680
them

94
00:04:01,680 --> 00:04:04,739
on if they're like you know there's no

95
00:04:04,739 --> 00:04:07,760
holder structure to it

96
00:04:07,860 --> 00:04:10,260
so with this data

97
00:04:10,260 --> 00:04:13,739
um we can uh we know the default

98
00:04:13,739 --> 00:04:15,840
location

99
00:04:15,840 --> 00:04:17,940
um but in order to collect everything we

100
00:04:17,940 --> 00:04:20,220
need to check check the registry

101
00:04:20,220 --> 00:04:23,160
uh once we find all the locations where

102
00:04:23,160 --> 00:04:25,020
the files are then we can start our

103
00:04:25,020 --> 00:04:28,080
OneDrive collection

104
00:04:28,080 --> 00:04:29,280
um this starts to get complicated

105
00:04:29,280 --> 00:04:31,800
multi-user systems because if the user

106
00:04:31,800 --> 00:04:34,259
wasn't logged in their registry Hive

107
00:04:34,259 --> 00:04:35,940
might not be mounted so you'll have to

108
00:04:35,940 --> 00:04:37,740
run an initial collection

109
00:04:37,740 --> 00:04:39,660
parse that data out and then go back

110
00:04:39,660 --> 00:04:43,320
through and uh collect all the files

111
00:04:43,320 --> 00:04:46,080
um another issue is is Microsoft uses a

112
00:04:46,080 --> 00:04:48,000
reparse point

113
00:04:48,000 --> 00:04:50,759
for storing their Fells and what this

114
00:04:50,759 --> 00:04:53,160
means is

115
00:04:53,160 --> 00:04:56,400
not all the files are actually stored on

116
00:04:56,400 --> 00:04:58,320
the endpoint itself this uh this is used

117
00:04:58,320 --> 00:05:00,180
for saving space and

118
00:05:00,180 --> 00:05:01,620
and um

119
00:05:01,620 --> 00:05:03,419
the issue is if you try collecting

120
00:05:03,419 --> 00:05:04,919
against the three parts point you can

121
00:05:04,919 --> 00:05:07,020
actually pull in more data in your

122
00:05:07,020 --> 00:05:08,580
collection

123
00:05:08,580 --> 00:05:09,780
um that originally wasn't on the

124
00:05:09,780 --> 00:05:10,740
endpoint

125
00:05:10,740 --> 00:05:13,320
so then you can run into your scope of

126
00:05:13,320 --> 00:05:16,080
Authority or or even um storage space

127
00:05:16,080 --> 00:05:18,620
issues

128
00:05:19,620 --> 00:05:21,240
so let's rethink how we're doing this a

129
00:05:21,240 --> 00:05:22,860
little bit

130
00:05:22,860 --> 00:05:25,340
um so if we go back to our uh user said

131
00:05:25,340 --> 00:05:28,199
uh dot that file

132
00:05:28,199 --> 00:05:30,300
before like before we ran strings on it

133
00:05:30,300 --> 00:05:32,100
and we get a list of files and folders

134
00:05:32,100 --> 00:05:34,919
and I said there's

135
00:05:34,919 --> 00:05:36,960
really no way of telling which file is

136
00:05:36,960 --> 00:05:40,520
under which folder or anything like that

137
00:05:40,680 --> 00:05:42,419
if we actually open this file up in a

138
00:05:42,419 --> 00:05:44,820
hex editor um we can start to see

139
00:05:44,820 --> 00:05:47,160
different data structures uh we can

140
00:05:47,160 --> 00:05:49,320
distinguish what is actually a file what

141
00:05:49,320 --> 00:05:50,880
is what is a folder

142
00:05:50,880 --> 00:05:53,100
and then we can also get additional data

143
00:05:53,100 --> 00:05:57,680
like The Jive item id parent ID e-tigs

144
00:05:57,680 --> 00:06:00,539
folder names hashes

145
00:06:00,539 --> 00:06:02,160
and uh

146
00:06:02,160 --> 00:06:04,500
so by pairing these Drive item IDs back

147
00:06:04,500 --> 00:06:06,300
to their parent IDs we can actually

148
00:06:06,300 --> 00:06:08,960
break this information out and rebuild

149
00:06:08,960 --> 00:06:11,539
the file and folder structure without

150
00:06:11,539 --> 00:06:14,340
having to collect uh any additional

151
00:06:14,340 --> 00:06:16,698
files

152
00:06:16,919 --> 00:06:19,259
so I'll show you quickly in OneDrive

153
00:06:19,259 --> 00:06:20,580
Explorer

154
00:06:20,580 --> 00:06:22,139
um so basically if you go to the

155
00:06:22,139 --> 00:06:22,979
settings

156
00:06:22,979 --> 00:06:26,539
and you go and you load the

157
00:06:26,539 --> 00:06:28,560
user.sid.fire the user said that that

158
00:06:28,560 --> 00:06:29,580
file

159
00:06:29,580 --> 00:06:31,800
um once we get there down on the

160
00:06:31,800 --> 00:06:33,780
location you'll see that it actually

161
00:06:33,780 --> 00:06:36,120
reconstructs the file structure quite

162
00:06:36,120 --> 00:06:38,160
quickly

163
00:06:38,160 --> 00:06:41,180
a little bit more

164
00:06:43,080 --> 00:06:46,919
so as you can see we got the user folder

165
00:06:46,919 --> 00:06:48,660
um folders that were shared with uh the

166
00:06:48,660 --> 00:06:50,699
user itself

167
00:06:50,699 --> 00:06:52,440
um you look on the on the right you can

168
00:06:52,440 --> 00:06:53,940
see different uh

169
00:06:53,940 --> 00:06:55,620
like the

170
00:06:55,620 --> 00:06:57,960
let's skip that for now but you can see

171
00:06:57,960 --> 00:07:00,660
like the um the drive item IDs things

172
00:07:00,660 --> 00:07:03,000
like that uh the thing with the drive

173
00:07:03,000 --> 00:07:07,380
item ID is looking back at at uh

174
00:07:07,380 --> 00:07:09,900
um Microsoft's documentation

175
00:07:09,900 --> 00:07:12,060
you can see that

176
00:07:12,060 --> 00:07:14,220
this is a way of locating the files on

177
00:07:14,220 --> 00:07:17,940
the system or up in the cloud so

178
00:07:17,940 --> 00:07:19,860
if we got that information we can

179
00:07:19,860 --> 00:07:22,800
actually go back and query uh OneDrive

180
00:07:22,800 --> 00:07:23,880
itself

181
00:07:23,880 --> 00:07:28,259
and and download any files that we need

182
00:07:28,259 --> 00:07:30,240
um just as an example

183
00:07:30,240 --> 00:07:32,639
like the slide presentation here if you

184
00:07:32,639 --> 00:07:35,580
look in the uh URL you'll see that it

185
00:07:35,580 --> 00:07:38,220
that that the um Drive Item ID is

186
00:07:38,220 --> 00:07:41,479
actually in the URL itself

187
00:07:43,199 --> 00:07:45,240
um so instead of looking at the tenants

188
00:07:45,240 --> 00:07:46,620
he

189
00:07:46,620 --> 00:07:48,240
what I'm going to do is look at the sync

190
00:07:48,240 --> 00:07:51,539
engines and um so again this identifies

191
00:07:51,539 --> 00:07:54,780
the default uh local file storage

192
00:07:54,780 --> 00:07:58,199
um and it also shows what's also shared

193
00:07:58,199 --> 00:08:00,900
with the user from different owners

194
00:08:00,900 --> 00:08:04,520
but if you notice

195
00:08:05,220 --> 00:08:07,919
the key name actually matches up with

196
00:08:07,919 --> 00:08:10,020
the drive item ID

197
00:08:10,020 --> 00:08:12,300
so if we take this data we can actually

198
00:08:12,300 --> 00:08:15,000
find the mount points in uh OneDrive

199
00:08:15,000 --> 00:08:16,740
Explorer so

200
00:08:16,740 --> 00:08:19,440
on the left is the original data that we

201
00:08:19,440 --> 00:08:22,800
parsed if we add in user's registry keys

202
00:08:22,800 --> 00:08:25,680
now we have the actual uh folder

203
00:08:25,680 --> 00:08:29,780
locations on on the endpoint

204
00:08:33,599 --> 00:08:35,700
um see recycling bin

205
00:08:35,700 --> 00:08:38,700
uh so this information

206
00:08:38,700 --> 00:08:40,380
um

207
00:08:40,380 --> 00:08:42,958
the deleted items are kept online in the

208
00:08:42,958 --> 00:08:45,839
recycling bin uh they're 30 30 days for

209
00:08:45,839 --> 00:08:46,860
personal

210
00:08:46,860 --> 00:08:50,100
uh and they're kept for 93 days for

211
00:08:50,100 --> 00:08:51,360
business

212
00:08:51,360 --> 00:08:52,200
um

213
00:08:52,200 --> 00:08:54,899
and if the files were actually on the

214
00:08:54,899 --> 00:08:57,300
endpoint itself they'll appear in the

215
00:08:57,300 --> 00:09:00,979
recycling bin on the fellow system

216
00:09:02,160 --> 00:09:03,959
um so in OneDrive in the Explorer we can

217
00:09:03,959 --> 00:09:07,080
actually take the end user the recycling

218
00:09:07,080 --> 00:09:09,060
bin and we can actually incorporate this

219
00:09:09,060 --> 00:09:10,140
data in

220
00:09:10,140 --> 00:09:13,399
and pull out more information

221
00:09:14,220 --> 00:09:18,120
I'm going way too fast so so if we take

222
00:09:18,120 --> 00:09:21,000
this data um we go again we can grab our

223
00:09:21,000 --> 00:09:23,339
users

224
00:09:23,339 --> 00:09:24,360
um

225
00:09:24,360 --> 00:09:28,339
I usually said that that file

226
00:09:30,000 --> 00:09:32,220
as we get there again

227
00:09:32,220 --> 00:09:34,140
load that in

228
00:09:34,140 --> 00:09:35,760
and then we can also grab the user's

229
00:09:35,760 --> 00:09:38,180
registry

230
00:09:46,740 --> 00:09:50,480
and we add in the recycling bin

231
00:09:52,380 --> 00:09:54,540
import

232
00:09:54,540 --> 00:09:57,240
so now if we look at the data we can see

233
00:09:57,240 --> 00:09:58,320
that

234
00:09:58,320 --> 00:10:00,540
any of the files that were actually on

235
00:10:00,540 --> 00:10:02,640
the endpoint that were deleted along

236
00:10:02,640 --> 00:10:05,760
with their hashes and

237
00:10:05,760 --> 00:10:07,500
um

238
00:10:07,500 --> 00:10:09,540
so then we can take those actual hashes

239
00:10:09,540 --> 00:10:11,580
and we can go back up and we can grab

240
00:10:11,580 --> 00:10:14,760
and uh compare that back on

241
00:10:14,760 --> 00:10:17,040
the cloud to get

242
00:10:17,040 --> 00:10:19,939
um our actual file

243
00:10:21,600 --> 00:10:24,000
so all this is great but then um so

244
00:10:24,000 --> 00:10:25,740
automation how do we how do we go about

245
00:10:25,740 --> 00:10:27,839
automating this

246
00:10:27,839 --> 00:10:29,760
um without having to go back and doing

247
00:10:29,760 --> 00:10:32,160
multiple Collections and

248
00:10:32,160 --> 00:10:33,959
and uh

249
00:10:33,959 --> 00:10:35,820
pressing the data and then go back and

250
00:10:35,820 --> 00:10:38,399
pull back in what we need

251
00:10:38,399 --> 00:10:40,620
so with cape

252
00:10:40,620 --> 00:10:42,180
um

253
00:10:42,180 --> 00:10:44,820
we can uh there's actual all we need to

254
00:10:44,820 --> 00:10:47,579
do is grab the OneDrive metadata

255
00:10:47,579 --> 00:10:49,200
the recycling bin

256
00:10:49,200 --> 00:10:52,320
and the re and the registry hives

257
00:10:52,320 --> 00:10:55,560
um and then on the module side uh they

258
00:10:55,560 --> 00:10:57,240
built out

259
00:10:57,240 --> 00:11:00,060
for the command line version of OneDrive

260
00:11:00,060 --> 00:11:07,518
Explorer it can do csvs jsons and htmls

261
00:11:10,440 --> 00:11:13,560
so after running this data

262
00:11:13,560 --> 00:11:15,839
um depending on what we did uh this is

263
00:11:15,839 --> 00:11:18,779
just an example of the output that we

264
00:11:18,779 --> 00:11:20,899
have

265
00:11:25,320 --> 00:11:28,740
so Lessons Learned

266
00:11:28,740 --> 00:11:33,899
um the key takeaways from this is

267
00:11:33,899 --> 00:11:34,680
um

268
00:11:34,680 --> 00:11:36,420
we can find data from one or multiple

269
00:11:36,420 --> 00:11:37,740
sources

270
00:11:37,740 --> 00:11:40,800
um so back to we can just grab the DAT

271
00:11:40,800 --> 00:11:42,839
file we can get that information in

272
00:11:42,839 --> 00:11:44,459
or we can

273
00:11:44,459 --> 00:11:47,399
add in the usage registry plus a

274
00:11:47,399 --> 00:11:49,860
recycling bin to get a bigger uh bigger

275
00:11:49,860 --> 00:11:52,200
and more complete picture

276
00:11:52,200 --> 00:11:54,959
um this eliminates multiple collections

277
00:11:54,959 --> 00:11:57,660
it's easy to and it's easy to use on

278
00:11:57,660 --> 00:12:00,779
multiple user systems and it also solves

279
00:12:00,779 --> 00:12:03,120
the the uh

280
00:12:03,120 --> 00:12:05,100
scope or the storage and the scope of

281
00:12:05,100 --> 00:12:06,240
authority

282
00:12:06,240 --> 00:12:08,640
um and it's also easy to automate

283
00:12:08,640 --> 00:12:11,519
and down down below is just a example of

284
00:12:11,519 --> 00:12:14,480
the command line running

285
00:12:16,380 --> 00:12:18,600
but there's one more thing it's uh what

286
00:12:18,600 --> 00:12:20,880
what about the log files so these are

287
00:12:20,880 --> 00:12:23,220
the um

288
00:12:23,220 --> 00:12:27,420
in the user's app data local folder uh

289
00:12:27,420 --> 00:12:30,899
you have what are called odl logs um

290
00:12:30,899 --> 00:12:33,779
and this stores various information like

291
00:12:33,779 --> 00:12:36,959
the syncing of OneDrive uh user account

292
00:12:36,959 --> 00:12:39,240
linking unlinking uploading download

293
00:12:39,240 --> 00:12:41,339
loading so pretty much anything that

294
00:12:41,339 --> 00:12:43,500
happens on the back end

295
00:12:43,500 --> 00:12:44,339
um

296
00:12:44,339 --> 00:12:46,680
these files are actually

297
00:12:46,680 --> 00:12:48,899
obstructed

298
00:12:48,899 --> 00:12:51,480
um you guess yeah I'm probably gonna

299
00:12:51,480 --> 00:12:53,880
Slaughter his name yugesh uh

300
00:12:53,880 --> 00:12:57,000
had back in February I think it was uh

301
00:12:57,000 --> 00:12:59,639
created a parser to unobficate these

302
00:12:59,639 --> 00:13:01,380
files and um

303
00:13:01,380 --> 00:13:04,440
the way to unobster kingdom was in the

304
00:13:04,440 --> 00:13:06,019
obstacation

305
00:13:06,019 --> 00:13:08,339
stringmap.txt file

306
00:13:08,339 --> 00:13:10,079
um but unfortunately

307
00:13:10,079 --> 00:13:12,540
a couple months later after he came out

308
00:13:12,540 --> 00:13:13,560
with this

309
00:13:13,560 --> 00:13:15,720
Microsoft changed things up and this

310
00:13:15,720 --> 00:13:18,620
file no longer exists uh now it uses

311
00:13:18,620 --> 00:13:21,420
some sort of encryption key that really

312
00:13:21,420 --> 00:13:24,380
hasn't been solved yet

313
00:13:28,079 --> 00:13:30,420
um One Drive Explorer does have a kind

314
00:13:30,420 --> 00:13:32,760
of an experimental thing in it where

315
00:13:32,760 --> 00:13:34,920
it'll actually parcel the files it's

316
00:13:34,920 --> 00:13:37,139
still a work in progress

317
00:13:37,139 --> 00:13:40,019
um and it's based off of yugesh's uh

318
00:13:40,019 --> 00:13:41,880
um original work

319
00:13:41,880 --> 00:13:44,760
and this is just an example of

320
00:13:44,760 --> 00:13:47,399
running it again against a live system

321
00:13:47,399 --> 00:13:50,399
and

322
00:13:50,579 --> 00:13:53,339
and parsing out all the

323
00:13:53,339 --> 00:13:54,180
um

324
00:13:54,180 --> 00:13:56,040
user logs

325
00:13:56,040 --> 00:13:59,060
for you to look at

326
00:13:59,700 --> 00:14:02,279
and

327
00:14:02,279 --> 00:14:04,740
as a special thanks to the these are the

328
00:14:04,740 --> 00:14:06,000
various people that kind of help me

329
00:14:06,000 --> 00:14:09,060
along the way to figure this out

330
00:14:09,060 --> 00:14:11,180
um

331
00:14:11,459 --> 00:14:13,560
and like I said I went too fast so this

332
00:14:13,560 --> 00:14:15,880
is about all that I have so

333
00:14:15,880 --> 00:14:16,510
[Applause]

334
00:14:16,510 --> 00:14:19,659
[Music]

