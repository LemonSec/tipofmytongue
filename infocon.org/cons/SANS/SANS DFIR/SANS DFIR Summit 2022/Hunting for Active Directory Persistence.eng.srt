1
00:00:00,659 --> 00:00:02,960
foreign

2
00:00:07,859 --> 00:00:09,660
thank you everyone for being here today

3
00:00:09,660 --> 00:00:11,880
my name is Thomas

4
00:00:11,880 --> 00:00:14,759
if you want the armor the French

5
00:00:14,759 --> 00:00:17,220
pronunciation and I will indeed be

6
00:00:17,220 --> 00:00:19,560
talking about active directory today and

7
00:00:19,560 --> 00:00:22,260
more precisely on how a Syria responder

8
00:00:22,260 --> 00:00:25,859
we can uncover persistence implanted by

9
00:00:25,859 --> 00:00:28,320
threat actors

10
00:00:28,320 --> 00:00:29,580
up

11
00:00:29,580 --> 00:00:32,040
a few words on myself first I do

12
00:00:32,040 --> 00:00:33,840
incident response at Western which is a

13
00:00:33,840 --> 00:00:36,780
French consulting firm I also do stuff

14
00:00:36,780 --> 00:00:39,180
on the more offensive side mainly pen

15
00:00:39,180 --> 00:00:41,340
test and red teams with the focus on

16
00:00:41,340 --> 00:00:42,600
Windows and active directory

17
00:00:42,600 --> 00:00:45,180
environments and I tried to contribute

18
00:00:45,180 --> 00:00:47,160
to open source projects such as Ed

19
00:00:47,160 --> 00:00:49,440
Austin blast a tool I developed with a

20
00:00:49,440 --> 00:00:52,020
colleague in farsight ad I told that I'm

21
00:00:52,020 --> 00:00:54,860
introducing today

22
00:00:56,820 --> 00:00:58,980
so I guess most of you are familiar with

23
00:00:58,980 --> 00:01:01,620
what active directory is a quick very

24
00:01:01,620 --> 00:01:03,500
quick reminder nonetheless

25
00:01:03,500 --> 00:01:05,760
active directories of Microsoft

26
00:01:05,760 --> 00:01:08,840
directory services that spindle

27
00:01:08,840 --> 00:01:11,220
authentication and authorization across

28
00:01:11,220 --> 00:01:12,960
an organization

29
00:01:12,960 --> 00:01:16,260
it can mostly be used too well mostly it

30
00:01:16,260 --> 00:01:18,200
can notably be used to administrate

31
00:01:18,200 --> 00:01:21,420
endpoints Windows endpoints

32
00:01:21,420 --> 00:01:24,060
and is in that regard often considered

33
00:01:24,060 --> 00:01:26,520
to be the Keys of the Kingdom

34
00:01:26,520 --> 00:01:28,439
it's been challenged in the recent year

35
00:01:28,439 --> 00:01:30,479
by Azure ad which is a completely

36
00:01:30,479 --> 00:01:33,240
different product but it's so tightly

37
00:01:33,240 --> 00:01:35,880
implicated with the on-prem networks

38
00:01:35,880 --> 00:01:38,040
that it's mostly here it's most likely

39
00:01:38,040 --> 00:01:41,780
here to stay for a little while longer

40
00:01:42,060 --> 00:01:44,280
so why should we care about active

41
00:01:44,280 --> 00:01:46,020
directory security

42
00:01:46,020 --> 00:01:49,399
you have here an example of

43
00:01:49,399 --> 00:01:51,960
ransomware incidents that occurred in

44
00:01:51,960 --> 00:01:54,780
2020 2020

45
00:01:54,780 --> 00:01:56,880
and it showcased quite well uh

46
00:01:56,880 --> 00:01:59,280
ransomware operators can leverage active

47
00:01:59,280 --> 00:02:01,740
directory to elevate the Privileges and

48
00:02:01,740 --> 00:02:04,979
deploy their ransomware payload at scale

49
00:02:04,979 --> 00:02:07,500
very standard classical techniques here

50
00:02:07,500 --> 00:02:11,099
with remote initial access from Citrix

51
00:02:11,099 --> 00:02:13,140
Farm Exposed on the internet

52
00:02:13,140 --> 00:02:16,860
and then exploitation of a vulnerability

53
00:02:16,860 --> 00:02:19,620
on an impact system with followed by

54
00:02:19,620 --> 00:02:21,780
your lateral movements first we have a

55
00:02:21,780 --> 00:02:23,760
local administrator I can't mutualized

56
00:02:23,760 --> 00:02:25,020
on value system and then with

57
00:02:25,020 --> 00:02:28,620
increasingly privileged domain accounts

58
00:02:28,620 --> 00:02:30,720
what's interesting here is that between

59
00:02:30,720 --> 00:02:32,700
the time the attacker had obtained

60
00:02:32,700 --> 00:02:35,099
domain admin privileges and the times he

61
00:02:35,099 --> 00:02:37,980
ransomware payload was deployed the

62
00:02:37,980 --> 00:02:40,620
threat actor took around a week to Snoop

63
00:02:40,620 --> 00:02:42,420
around and exfiltrate confidential

64
00:02:42,420 --> 00:02:46,080
information or what or well what they

65
00:02:46,080 --> 00:02:47,640
thought were a confidential information

66
00:02:47,640 --> 00:02:50,459
at least but they could also have used

67
00:02:50,459 --> 00:02:52,739
that time to deploy persistence to come

68
00:02:52,739 --> 00:02:55,260
back more easily in the environment for

69
00:02:55,260 --> 00:02:59,299
example if their Ransom was not paid

70
00:03:01,319 --> 00:03:03,180
it's an example but there are many

71
00:03:03,180 --> 00:03:06,120
others for the past few years so yeah

72
00:03:06,120 --> 00:03:08,220
active directory as being the Keys of

73
00:03:08,220 --> 00:03:10,260
the Kingdom is quite often targeted in

74
00:03:10,260 --> 00:03:12,860
ransomware operation

75
00:03:12,860 --> 00:03:15,780
netload let's now say that we are

76
00:03:15,780 --> 00:03:17,340
incidentally spending on that incident

77
00:03:17,340 --> 00:03:19,319
and we are working on the forest

78
00:03:19,319 --> 00:03:21,540
recovery part

79
00:03:21,540 --> 00:03:24,720
we will have two options really uh to

80
00:03:24,720 --> 00:03:27,480
recover the forests the first one would

81
00:03:27,480 --> 00:03:29,940
be to rebuild from scratch which is

82
00:03:29,940 --> 00:03:32,840
something that can be done on smallish

83
00:03:32,840 --> 00:03:36,239
domain but as this incident happened on

84
00:03:36,239 --> 00:03:37,739
the domain with thousands and thousands

85
00:03:37,739 --> 00:03:39,959
of endpoints and users that would just

86
00:03:39,959 --> 00:03:41,879
not be possible not practical

87
00:03:41,879 --> 00:03:44,040
so we would have to go the second option

88
00:03:44,040 --> 00:03:46,799
which is to use as a backups if they are

89
00:03:46,799 --> 00:03:48,599
not encrypted and if there are backups

90
00:03:48,599 --> 00:03:51,000
of course or to use the current state of

91
00:03:51,000 --> 00:03:53,040
the active directory domain

92
00:03:53,040 --> 00:03:56,159
to do that we would shut down all domain

93
00:03:56,159 --> 00:03:58,620
controller except for the PDC place that

94
00:03:58,620 --> 00:04:01,860
PDC in an isolated Network and replicate

95
00:04:01,860 --> 00:04:04,080
data on the newly promoted domain

96
00:04:04,080 --> 00:04:05,220
controller

97
00:04:05,220 --> 00:04:07,799
at this step this is where as incident

98
00:04:07,799 --> 00:04:09,540
responder we can help

99
00:04:09,540 --> 00:04:12,360
uh because before going backlight in

100
00:04:12,360 --> 00:04:14,939
production we would have to clean the

101
00:04:14,939 --> 00:04:16,978
active directory domain identify and

102
00:04:16,978 --> 00:04:20,160
remove any eventual persistence left by

103
00:04:20,160 --> 00:04:22,940
this protector

104
00:04:26,460 --> 00:04:29,280
to do that we will have a few challenges

105
00:04:29,280 --> 00:04:32,280
the first one would be the lack of

106
00:04:32,280 --> 00:04:35,040
historical information

107
00:04:35,040 --> 00:04:37,860
as anyone that has done commercial

108
00:04:37,860 --> 00:04:40,380
incident response may know if logs are

109
00:04:40,380 --> 00:04:42,180
not centralized from domain controllers

110
00:04:42,180 --> 00:04:45,479
and its offense is not the case you have

111
00:04:45,479 --> 00:04:48,000
very little historical data as the logs

112
00:04:48,000 --> 00:04:50,040
rotate very quickly so you may have only

113
00:04:50,040 --> 00:04:52,320
a few hours of historical data in the

114
00:04:52,320 --> 00:04:54,479
security event logs

115
00:04:54,479 --> 00:04:57,240
and even if you have more data even if

116
00:04:57,240 --> 00:04:59,040
the logs are centralized

117
00:04:59,040 --> 00:05:02,340
it's often only authentication logs like

118
00:05:02,340 --> 00:05:05,400
very basic or cables very basic

119
00:05:05,400 --> 00:05:07,380
authentication success failure or

120
00:05:07,380 --> 00:05:09,840
cabarrass ticket requests so why things

121
00:05:09,840 --> 00:05:11,940
are great to map lateral movements they

122
00:05:11,940 --> 00:05:14,100
are not enough to precisely identify

123
00:05:14,100 --> 00:05:15,840
persistence

124
00:05:15,840 --> 00:05:18,419
and the last thing is it's often also

125
00:05:18,419 --> 00:05:20,520
the defaults or the policy that is

126
00:05:20,520 --> 00:05:22,979
enabled which offered with a good

127
00:05:22,979 --> 00:05:25,620
Baseline but is missing some key events

128
00:05:25,620 --> 00:05:30,320
to map and identify persistence

129
00:05:30,500 --> 00:05:33,180
everything that's lost however as we

130
00:05:33,180 --> 00:05:36,300
have a few uh sub a few way to retrieve

131
00:05:36,300 --> 00:05:38,759
some historical data the first one is to

132
00:05:38,759 --> 00:05:41,280
Ada replication metadata

133
00:05:41,280 --> 00:05:43,919
a replication is a mechanism used by

134
00:05:43,919 --> 00:05:46,320
condominant controllers across a domain

135
00:05:46,320 --> 00:05:49,080
of forests to replicate data and have a

136
00:05:49,080 --> 00:05:52,758
common set of objects

137
00:05:52,919 --> 00:05:55,620
without much privileges only standard

138
00:05:55,620 --> 00:05:58,020
user privileges we can retrieve a

139
00:05:58,020 --> 00:06:00,120
replication metadata about the

140
00:06:00,120 --> 00:06:02,820
replication operations that occurred and

141
00:06:02,820 --> 00:06:05,460
this metadata can give us information on

142
00:06:05,460 --> 00:06:08,100
the last time attribute was modified and

143
00:06:08,100 --> 00:06:11,820
the last value as a attribute took

144
00:06:11,820 --> 00:06:13,860
I'm not going to go into too much detail

145
00:06:13,860 --> 00:06:15,900
here as there is a lot of material in

146
00:06:15,900 --> 00:06:18,479
the deck and in the presentation

147
00:06:18,479 --> 00:06:20,520
it's a subject that has already been

148
00:06:20,520 --> 00:06:23,819
covered notably last year in the defire

149
00:06:23,819 --> 00:06:27,240
summit here with the ad timeline a tool

150
00:06:27,240 --> 00:06:30,900
developed by the French agency to make a

151
00:06:30,900 --> 00:06:33,419
timeline from this uh replication

152
00:06:33,419 --> 00:06:34,800
metadata

153
00:06:34,800 --> 00:06:36,539
there are two more slides in the Decks

154
00:06:36,539 --> 00:06:39,060
that are hidden currently because uh so

155
00:06:39,060 --> 00:06:40,800
if you want more detail you can look at

156
00:06:40,800 --> 00:06:43,979
the published slide but yeah

157
00:06:43,979 --> 00:06:46,860
I as I had to meet the 40-minute time

158
00:06:46,860 --> 00:06:51,080
frame I can go into too much detail here

159
00:06:51,180 --> 00:06:54,539
another artifact that can help us to

160
00:06:54,539 --> 00:06:56,220
identify compromise the account this

161
00:06:56,220 --> 00:06:58,740
time is the user access login

162
00:06:58,740 --> 00:07:00,600
this artifact has been put in the

163
00:07:00,600 --> 00:07:04,199
spotlight quite recently as it's enabled

164
00:07:04,199 --> 00:07:06,300
by default and has two years of

165
00:07:06,300 --> 00:07:08,460
historical data compared to the few

166
00:07:08,460 --> 00:07:10,500
hours we may have from security log

167
00:07:10,500 --> 00:07:13,020
that's huge

168
00:07:13,020 --> 00:07:15,060
through this artifacts we can track

169
00:07:15,060 --> 00:07:18,660
access to the Windows Server roles so

170
00:07:18,660 --> 00:07:20,520
for instance we can track access to the

171
00:07:20,520 --> 00:07:23,060
active directory domain Services role

172
00:07:23,060 --> 00:07:27,240
which is the ad role basically and we

173
00:07:27,240 --> 00:07:29,520
can retrieve information on the client

174
00:07:29,520 --> 00:07:32,580
username and client IP accessing this

175
00:07:32,580 --> 00:07:34,500
service

176
00:07:34,500 --> 00:07:36,660
this artifact is of Great Value to map

177
00:07:36,660 --> 00:07:38,639
lateral movements and also identify

178
00:07:38,639 --> 00:07:41,039
possibly compromised accounts so it can

179
00:07:41,039 --> 00:07:42,840
help us focus our research for

180
00:07:42,840 --> 00:07:45,380
persistence

181
00:07:47,400 --> 00:07:50,759
and finally another way we can follow to

182
00:07:50,759 --> 00:07:53,220
identify persistence it's to query the

183
00:07:53,220 --> 00:07:55,740
current states of the objects

184
00:07:55,740 --> 00:07:58,139
these are tools that do that must

185
00:07:58,139 --> 00:08:00,240
notably blood on a very famous one to

186
00:08:00,240 --> 00:08:03,300
identify a compromise path and pink

187
00:08:03,300 --> 00:08:07,139
castle more on the security audit side

188
00:08:07,139 --> 00:08:09,300
and we can use those tools to quickly

189
00:08:09,300 --> 00:08:11,340
enumerate information about the objects

190
00:08:11,340 --> 00:08:13,620
and have an evaluation of our security

191
00:08:13,620 --> 00:08:16,380
level they still are particularly useful

192
00:08:16,380 --> 00:08:18,479
in the hardening parts of the forest

193
00:08:18,479 --> 00:08:20,759
recovery because we want to identify

194
00:08:20,759 --> 00:08:23,220
Persistence of course but we want also

195
00:08:23,220 --> 00:08:25,379
to make sure there is no easy way for

196
00:08:25,379 --> 00:08:27,120
the attacker to come back and Elevate

197
00:08:27,120 --> 00:08:29,840
its privilege again

198
00:08:31,620 --> 00:08:34,500
but while those two are great

199
00:08:34,500 --> 00:08:37,380
they are not specifically aimed to

200
00:08:37,380 --> 00:08:39,779
identifying persistence they are more

201
00:08:39,779 --> 00:08:41,458
aimed to evaluate your sexuality level

202
00:08:41,458 --> 00:08:44,219
that's why I developed First Sight ID

203
00:08:44,219 --> 00:08:46,580
which is a tool that

204
00:08:46,580 --> 00:08:48,720
enumerates the current state of the

205
00:08:48,720 --> 00:08:51,120
domain to identify anomalies and

206
00:08:51,120 --> 00:08:52,920
retrieve as much attempt as possible

207
00:08:52,920 --> 00:08:55,800
through Ada replication metadata

208
00:08:55,800 --> 00:08:58,260
it's a Powershell toolkit that produces

209
00:08:58,260 --> 00:09:01,320
either CSV or Json files for manual

210
00:09:01,320 --> 00:09:03,720
analysis for example using timeline

211
00:09:03,720 --> 00:09:06,540
Explorer or to be sent in your cm of

212
00:09:06,540 --> 00:09:08,839
choice

213
00:09:12,180 --> 00:09:14,339
but before jumping right into

214
00:09:14,339 --> 00:09:16,620
identifying persistence we have to make

215
00:09:16,620 --> 00:09:18,180
sure that we have access to the right

216
00:09:18,180 --> 00:09:19,500
data

217
00:09:19,500 --> 00:09:22,080
that we can see all objects

218
00:09:22,080 --> 00:09:24,120
because in active directory it's

219
00:09:24,120 --> 00:09:28,440
possible to hide objects using

220
00:09:28,440 --> 00:09:31,019
specific access right so for example by

221
00:09:31,019 --> 00:09:33,660
setting red property denied access right

222
00:09:33,660 --> 00:09:35,940
it would be possible to fully hide an

223
00:09:35,940 --> 00:09:37,320
object

224
00:09:37,320 --> 00:09:40,320
well if you only set and there is a demo

225
00:09:40,320 --> 00:09:42,000
showcasing that just after if you only

226
00:09:42,000 --> 00:09:44,279
set the Deni access right to read

227
00:09:44,279 --> 00:09:46,380
properties the object can still be

228
00:09:46,380 --> 00:09:48,720
listed from its organizational unit of

229
00:09:48,720 --> 00:09:51,300
residency but it's also possible to

230
00:09:51,300 --> 00:09:53,760
prevent listing of children objects on

231
00:09:53,760 --> 00:09:56,040
that organizational units so that the

232
00:09:56,040 --> 00:09:58,980
object is completely hidden

233
00:09:58,980 --> 00:10:01,140
we have a quick demo here showcasing

234
00:10:01,140 --> 00:10:03,380
that

235
00:10:04,260 --> 00:10:06,360
so first a new object is a new

236
00:10:06,360 --> 00:10:08,399
organizational unit is added in the

237
00:10:08,399 --> 00:10:10,880
domain

238
00:10:11,300 --> 00:10:14,519
a new user is added as well

239
00:10:14,519 --> 00:10:16,440
and as we can see we can retrieve all

240
00:10:16,440 --> 00:10:19,560
attributes of these object

241
00:10:19,560 --> 00:10:21,779
now we are setting a deny rights on the

242
00:10:21,779 --> 00:10:23,100
objects

243
00:10:23,100 --> 00:10:25,200
and so we can no longer find this object

244
00:10:25,200 --> 00:10:27,000
we can no longer retrieve any of these

245
00:10:27,000 --> 00:10:29,160
object attributes

246
00:10:29,160 --> 00:10:31,620
we can however as you can see here list

247
00:10:31,620 --> 00:10:34,860
the children of the organizational units

248
00:10:34,860 --> 00:10:37,500
this object lives in to retrieve to see

249
00:10:37,500 --> 00:10:39,420
that we have an object here

250
00:10:39,420 --> 00:10:42,300
but second command here it's possible to

251
00:10:42,300 --> 00:10:45,420
prevent that to deny the listing of

252
00:10:45,420 --> 00:10:47,399
children and we can no longer see our

253
00:10:47,399 --> 00:10:50,100
objects so if we only query the current

254
00:10:50,100 --> 00:10:52,860
state of the domain we may miss some

255
00:10:52,860 --> 00:10:55,500
fully hidden users

256
00:10:55,500 --> 00:10:58,079
there will be another technique that can

257
00:10:58,079 --> 00:11:01,680
use to hide not this time completely an

258
00:11:01,680 --> 00:11:04,320
object but only specific attributes

259
00:11:04,320 --> 00:11:07,260
so that instead of having a fully Hidden

260
00:11:07,260 --> 00:11:09,180
Object there is only

261
00:11:09,180 --> 00:11:11,160
um attributes related to persistence

262
00:11:11,160 --> 00:11:12,779
that can be hidden

263
00:11:12,779 --> 00:11:14,459
we will have a demonstration here

264
00:11:14,459 --> 00:11:18,180
showing how we can do that with

265
00:11:18,180 --> 00:11:20,820
the Sid history so I'm going to go into

266
00:11:20,820 --> 00:11:23,880
more detail on the SSID story in just a

267
00:11:23,880 --> 00:11:27,120
bit but we are going to Showcase here

268
00:11:27,120 --> 00:11:29,760
how it's possible to add an SID in

269
00:11:29,760 --> 00:11:31,320
history which is not something that can

270
00:11:31,320 --> 00:11:32,820
normally be done so it's something that

271
00:11:32,820 --> 00:11:36,360
is done through a DC Shadow attack

272
00:11:36,360 --> 00:11:40,320
and how we can hide this history

273
00:11:40,320 --> 00:11:43,920
so that it's not you know no longer

274
00:11:43,920 --> 00:11:46,560
possible to retrieve any of the Sid

275
00:11:46,560 --> 00:11:48,060
configured in history

276
00:11:48,060 --> 00:11:51,360
and if we do that there will be no

277
00:11:51,360 --> 00:11:53,820
difference between a user not having any

278
00:11:53,820 --> 00:11:57,000
Sid in history and a user having an SID

279
00:11:57,000 --> 00:11:59,399
in history but without preventing with

280
00:11:59,399 --> 00:12:01,800
prevented listing

281
00:12:01,800 --> 00:12:03,899
so here we are doing the DC Shadow

282
00:12:03,899 --> 00:12:05,100
attack so

283
00:12:05,100 --> 00:12:07,560
well it's an attack used to impersonate

284
00:12:07,560 --> 00:12:09,360
the domain controller and conduct

285
00:12:09,360 --> 00:12:11,579
operations that we normally not be

286
00:12:11,579 --> 00:12:12,899
doable

287
00:12:12,899 --> 00:12:15,899
and we can now see that our user has an

288
00:12:15,899 --> 00:12:17,640
SID in history

289
00:12:17,640 --> 00:12:19,560
if we prevent this thing of the Sid

290
00:12:19,560 --> 00:12:20,700
history

291
00:12:20,700 --> 00:12:23,339
and we do the query again we no longer

292
00:12:23,339 --> 00:12:25,620
see the Sid here so it would be

293
00:12:25,620 --> 00:12:27,600
completely possible for a threat actor

294
00:12:27,600 --> 00:12:29,880
to hide some things that would Hollow

295
00:12:29,880 --> 00:12:31,380
them to maintain persistence in the

296
00:12:31,380 --> 00:12:33,360
domain and if we don't take care of that

297
00:12:33,360 --> 00:12:35,339
each case we may miss something

298
00:12:35,339 --> 00:12:38,420
critically important

299
00:12:39,660 --> 00:12:42,540
to identify that one option would be to

300
00:12:42,540 --> 00:12:45,060
enumerate access rights in order to find

301
00:12:45,060 --> 00:12:47,940
any deny access right for example but

302
00:12:47,940 --> 00:12:49,680
there are many edge cases to consider

303
00:12:49,680 --> 00:12:51,899
here because it's possible to set

304
00:12:51,899 --> 00:12:54,240
explicit deny but it's also possible to

305
00:12:54,240 --> 00:12:57,060
remove all Grant all access right

306
00:12:57,060 --> 00:13:00,420
granting access so it's not sufficient

307
00:13:00,420 --> 00:13:02,459
to only look for Denis

308
00:13:02,459 --> 00:13:04,860
it will also be possible to hide the

309
00:13:04,860 --> 00:13:06,839
security descriptor which contains the

310
00:13:06,839 --> 00:13:09,060
access rights and so we would no longer

311
00:13:09,060 --> 00:13:11,399
be able to pass zoos

312
00:13:11,399 --> 00:13:13,740
one solution as implemented in a

313
00:13:13,740 --> 00:13:16,200
farsight ad is to rely directly on

314
00:13:16,200 --> 00:13:18,600
replication operations which which are

315
00:13:18,600 --> 00:13:21,420
as I said earlier the operation used by

316
00:13:21,420 --> 00:13:24,000
a domain controller to replicate data

317
00:13:24,000 --> 00:13:27,180
and by retrieving data this way we are

318
00:13:27,180 --> 00:13:30,360
not impacted by access rights

319
00:13:30,360 --> 00:13:33,420
to do that I use code from mimicats and

320
00:13:33,420 --> 00:13:35,100
make me Enterprise admin which are

321
00:13:35,100 --> 00:13:36,959
projects that implement the decision

322
00:13:36,959 --> 00:13:39,660
attack more on the offensive side so

323
00:13:39,660 --> 00:13:41,820
yeah the code from the offensive side

324
00:13:41,820 --> 00:13:45,480
was user in this project

325
00:13:45,480 --> 00:13:49,100
and if we now take a look

326
00:13:50,820 --> 00:13:55,579
at what kind of result we can get

327
00:13:57,060 --> 00:13:59,639
by importing the fast site ID Powershell

328
00:13:59,639 --> 00:14:00,600
Scripts

329
00:14:00,600 --> 00:14:03,180
and executing the CMD let to retrieve a

330
00:14:03,180 --> 00:14:05,639
replication information we will retrieve

331
00:14:05,639 --> 00:14:07,160
those

332
00:14:07,160 --> 00:14:09,600
attributes through a replication

333
00:14:09,600 --> 00:14:11,519
operation and we will also retrieve them

334
00:14:11,519 --> 00:14:14,100
through direct queries and we will check

335
00:14:14,100 --> 00:14:16,740
if we all we have the same level of

336
00:14:16,740 --> 00:14:19,860
information if not that means those

337
00:14:19,860 --> 00:14:23,120
attributes are hidden

338
00:14:28,079 --> 00:14:30,439
foreign

339
00:14:43,920 --> 00:14:46,800
and so as we can see here we have both

340
00:14:46,800 --> 00:14:48,779
our fully hidden user with all its

341
00:14:48,779 --> 00:14:51,360
hidden attributes and our user with only

342
00:14:51,360 --> 00:14:53,339
a partial subset of attributes hidden

343
00:14:53,339 --> 00:14:55,680
there is the icid story and there is

344
00:14:55,680 --> 00:14:57,420
also the primary group ID that was

345
00:14:57,420 --> 00:14:59,220
actually hidden as well but didn't make

346
00:14:59,220 --> 00:15:01,320
the cut for the previous demos previous

347
00:15:01,320 --> 00:15:04,260
demo but yeah by doing that we can make

348
00:15:04,260 --> 00:15:06,600
sure that we have access to the rights

349
00:15:06,600 --> 00:15:08,279
attributes and we can start looking for

350
00:15:08,279 --> 00:15:10,820
persistence

351
00:15:11,279 --> 00:15:12,959
there are multiple techniques that can

352
00:15:12,959 --> 00:15:15,720
be used lots of techniques I won't have

353
00:15:15,720 --> 00:15:18,360
time to cover all of them and I've

354
00:15:18,360 --> 00:15:20,100
divided those techniques in two

355
00:15:20,100 --> 00:15:22,680
categories the first one are techniques

356
00:15:22,680 --> 00:15:24,720
that allow a threat actor to maintain

357
00:15:24,720 --> 00:15:27,060
authenticated access and the second

358
00:15:27,060 --> 00:15:29,459
categories are techniques that can be

359
00:15:29,459 --> 00:15:31,680
used from an authenticated access to

360
00:15:31,680 --> 00:15:33,899
elevate privileges

361
00:15:33,899 --> 00:15:35,880
there are of course some techniques that

362
00:15:35,880 --> 00:15:37,860
can be used for both so there may be

363
00:15:37,860 --> 00:15:40,820
some overlapping here

364
00:15:41,880 --> 00:15:43,500
we will start but looking at the

365
00:15:43,500 --> 00:15:44,880
techniques that can be used to maintain

366
00:15:44,880 --> 00:15:47,519
access and we will take for granted that

367
00:15:47,519 --> 00:15:49,500
every users and computers password have

368
00:15:49,500 --> 00:15:52,320
been reset and that the kbtgt and Trust

369
00:15:52,320 --> 00:15:54,240
icon passwords have been resetted twice

370
00:15:54,240 --> 00:15:56,880
visit twice in order to invalidate care

371
00:15:56,880 --> 00:15:59,420
bearers tickets

372
00:16:00,480 --> 00:16:03,139
foreign

373
00:16:05,839 --> 00:16:09,120
security identities attributes of a user

374
00:16:09,120 --> 00:16:12,540
that I will be referencing to as UPN and

375
00:16:12,540 --> 00:16:15,899
alsac ID attributes

376
00:16:15,899 --> 00:16:18,360
both of those attributes as you may see

377
00:16:18,360 --> 00:16:20,579
on the certificate processing logic here

378
00:16:20,579 --> 00:16:22,740
which is quite complicated but doesn't

379
00:16:22,740 --> 00:16:25,320
matter too much to us with two

380
00:16:25,320 --> 00:16:29,240
attributes have an impact in the PK

381
00:16:29,240 --> 00:16:32,459
authentication flow PK needs is

382
00:16:32,459 --> 00:16:34,920
authentication through private public

383
00:16:34,920 --> 00:16:38,959
keys in a care bearers Authentication

384
00:16:39,060 --> 00:16:42,240
what's important to us here is that

385
00:16:42,240 --> 00:16:44,579
the subject I'll name of the certificate

386
00:16:44,579 --> 00:16:47,040
used for the authentication is mapped to

387
00:16:47,040 --> 00:16:50,940
the user upm if the user has a new PN

388
00:16:50,940 --> 00:16:53,820
and can allow authentication that way

389
00:16:53,820 --> 00:16:56,160
if the certificate has no subjectal name

390
00:16:56,160 --> 00:16:58,079
then some parameters of the

391
00:16:58,079 --> 00:17:00,660
certificators are used to be mapped with

392
00:17:00,660 --> 00:17:03,540
the user alsac ID

393
00:17:03,540 --> 00:17:07,559
as a result by modifying a user UPN or

394
00:17:07,559 --> 00:17:10,020
altsec ID it will be possible to

395
00:17:10,020 --> 00:17:12,359
authenticate as that user using a

396
00:17:12,359 --> 00:17:14,099
certificate belonging to a completely

397
00:17:14,099 --> 00:17:16,938
different user

398
00:17:18,540 --> 00:17:22,140
one thing one thing was nothing here is

399
00:17:22,140 --> 00:17:24,240
that every time you do a package

400
00:17:24,240 --> 00:17:28,099
authentication you can conduct a second

401
00:17:28,099 --> 00:17:32,100
subsequent cabarrass ticket request to

402
00:17:32,100 --> 00:17:34,919
retrieve the anti-ash of the user it's

403
00:17:34,919 --> 00:17:37,679
called unpack the ash it's been put in

404
00:17:37,679 --> 00:17:40,020
the spotlight quite recently and it's

405
00:17:40,020 --> 00:17:41,820
something that have been implemented by

406
00:17:41,820 --> 00:17:44,039
Microsoft to allow ntlm authentication

407
00:17:44,039 --> 00:17:45,179
following your cable result

408
00:17:45,179 --> 00:17:46,980
authentication which would otherwise not

409
00:17:46,980 --> 00:17:49,140
be something possible

410
00:17:49,140 --> 00:17:52,080
but yeah for us it means well for select

411
00:17:52,080 --> 00:17:54,600
turns it means that by doing a pic I

412
00:17:54,600 --> 00:17:56,039
need authentication it's not only

413
00:17:56,039 --> 00:17:58,020
possible to authenticate as your user

414
00:17:58,020 --> 00:17:59,940
but also retrieve additional credential

415
00:17:59,940 --> 00:18:01,260
information

416
00:18:01,260 --> 00:18:03,840
and possibly the user password by doing

417
00:18:03,840 --> 00:18:07,879
some offline brute first attack

418
00:18:08,640 --> 00:18:11,640
in order to identify persistence to a

419
00:18:11,640 --> 00:18:14,220
user principle name and adsec ID we have

420
00:18:14,220 --> 00:18:15,960
to understand a bit more how those

421
00:18:15,960 --> 00:18:18,419
attributes are constructed

422
00:18:18,419 --> 00:18:20,520
for the user principle name it's quite

423
00:18:20,520 --> 00:18:22,799
easy they are based around the user

424
00:18:22,799 --> 00:18:26,700
username or mail attributes so we can

425
00:18:26,700 --> 00:18:29,460
query those and check whether or not

426
00:18:29,460 --> 00:18:30,960
there is an anomaly here so it's

427
00:18:30,960 --> 00:18:32,820
relatively easy to spot something that

428
00:18:32,820 --> 00:18:35,780
seem not normal

429
00:18:35,780 --> 00:18:40,020
it's much much more difficult as it's

430
00:18:40,020 --> 00:18:42,299
some parameters from the certificate and

431
00:18:42,299 --> 00:18:44,160
the Fingerprints of the certificate is

432
00:18:44,160 --> 00:18:48,900
one of them so it's very difficult to be

433
00:18:48,900 --> 00:18:52,799
100 certain that a certificate belongs

434
00:18:52,799 --> 00:18:55,820
or not to that user

435
00:18:57,059 --> 00:18:59,760
that's why if there is no a definitive

436
00:18:59,760 --> 00:19:01,799
conclusion on that it's generally

437
00:19:01,799 --> 00:19:06,740
advised to remove all SEC ID entries

438
00:19:06,740 --> 00:19:10,799
in first set ID the upnr enumerated as

439
00:19:10,799 --> 00:19:13,919
well as the old SEC ID and some work is

440
00:19:13,919 --> 00:19:15,780
done to check whether or not the UPN

441
00:19:15,780 --> 00:19:17,640
seems legitimate

442
00:19:17,640 --> 00:19:19,620
there are also timestamp retrieved

443
00:19:19,620 --> 00:19:22,559
through ID replication metadata to check

444
00:19:22,559 --> 00:19:24,120
whether or not this attributes were

445
00:19:24,120 --> 00:19:26,280
modified recently or in the time frame

446
00:19:26,280 --> 00:19:29,100
or attack which can help us identify

447
00:19:29,100 --> 00:19:31,500
whether or not there is some kind of

448
00:19:31,500 --> 00:19:34,640
persistence going on here

449
00:19:36,440 --> 00:19:39,000
another technique that can be leveraged

450
00:19:39,000 --> 00:19:41,640
to maintain authenticated access is

451
00:19:41,640 --> 00:19:43,980
through an attribute known as a shadow

452
00:19:43,980 --> 00:19:47,820
credential the msdsk credential link

453
00:19:47,820 --> 00:19:50,660
this attribute was aided by Microsoft to

454
00:19:50,660 --> 00:19:53,340
allow public private care authentication

455
00:19:53,340 --> 00:19:55,380
in an environment without a public

456
00:19:55,380 --> 00:19:57,480
infrastructure

457
00:19:57,480 --> 00:19:59,640
so it doesn't contain directly a

458
00:19:59,640 --> 00:20:02,220
certificate material but it contain what

459
00:20:02,220 --> 00:20:04,799
is called click credentials we will get

460
00:20:04,799 --> 00:20:07,140
into a bit more that later on and those

461
00:20:07,140 --> 00:20:10,200
can be used to authenticate

462
00:20:10,200 --> 00:20:12,299
this attribute has been spotting has

463
00:20:12,299 --> 00:20:14,160
been put in the spotlight quite recently

464
00:20:14,160 --> 00:20:17,700
as a takeover primitive so more for the

465
00:20:17,700 --> 00:20:19,380
lateral movement and privilege

466
00:20:19,380 --> 00:20:21,840
escalation part but it can also be used

467
00:20:21,840 --> 00:20:25,039
to maintain persistence

468
00:20:26,820 --> 00:20:30,299
so what we can do here is pass this key

469
00:20:30,299 --> 00:20:32,460
credential which are otherwise just a

470
00:20:32,460 --> 00:20:35,700
blob of data not human readable to

471
00:20:35,700 --> 00:20:37,320
retrieve more information on the key

472
00:20:37,320 --> 00:20:41,179
credential on each key credential

473
00:20:41,179 --> 00:20:43,380
interestingly enough we have a quick

474
00:20:43,380 --> 00:20:45,419
created timestamp for each key

475
00:20:45,419 --> 00:20:47,580
credential which can give us information

476
00:20:47,580 --> 00:20:49,980
on whether or not this material this key

477
00:20:49,980 --> 00:20:51,780
was added during our time frame of

478
00:20:51,780 --> 00:20:52,740
attack

479
00:20:52,740 --> 00:20:55,380
there is also an approximate last last

480
00:20:55,380 --> 00:20:58,200
timestamp of last use but it doesn't

481
00:20:58,200 --> 00:21:02,280
seem to be reliably updated so

482
00:21:02,280 --> 00:21:05,220
well there is a key created one which is

483
00:21:05,220 --> 00:21:07,320
reliable but the second one is more

484
00:21:07,320 --> 00:21:09,918
indicative

485
00:21:12,419 --> 00:21:15,179
and last but not least another technique

486
00:21:15,179 --> 00:21:16,980
that can be leveraged to maintain

487
00:21:16,980 --> 00:21:20,640
persistence is through certificates

488
00:21:20,640 --> 00:21:25,020
it's a the most obvious one as any users

489
00:21:25,020 --> 00:21:28,679
or computer accounts can request a

490
00:21:28,679 --> 00:21:30,900
certificate for itself with a period

491
00:21:30,900 --> 00:21:35,159
value with a validity of one year

492
00:21:35,159 --> 00:21:37,620
so if a threat actor has compromised an

493
00:21:37,620 --> 00:21:38,400
account

494
00:21:38,400 --> 00:21:40,740
they could simply request a certificate

495
00:21:40,740 --> 00:21:42,900
and use a certificate to authenticate

496
00:21:42,900 --> 00:21:46,500
even following a password reset

497
00:21:46,500 --> 00:21:48,600
and again through the Enterprise

498
00:21:48,600 --> 00:21:50,820
technique that could retrieve the

499
00:21:50,820 --> 00:21:53,960
anti-ash of the account

500
00:21:57,120 --> 00:21:59,820
what we can do here is we can try to

501
00:21:59,820 --> 00:22:03,000
look for all the certificates check for

502
00:22:03,000 --> 00:22:06,179
the the period of validity to check

503
00:22:06,179 --> 00:22:08,159
whether or not the certificate were

504
00:22:08,159 --> 00:22:10,679
recently generated

505
00:22:10,679 --> 00:22:12,539
and we can also check if those

506
00:22:12,539 --> 00:22:15,539
certificates uh have subject file name

507
00:22:15,539 --> 00:22:17,340
of subject all name because as I said

508
00:22:17,340 --> 00:22:19,679
earlier with subject all memory can be

509
00:22:19,679 --> 00:22:22,200
used to authenticate as other users so

510
00:22:22,200 --> 00:22:23,880
there could be some certificate

511
00:22:23,880 --> 00:22:26,100
associated with the low privileged user

512
00:22:26,100 --> 00:22:29,340
actually uh following authentication to

513
00:22:29,340 --> 00:22:32,600
a much more privileged one

514
00:22:33,419 --> 00:22:36,299
and yeah what we do in facet ad is that

515
00:22:36,299 --> 00:22:38,100
we pass all of these certificates and we

516
00:22:38,100 --> 00:22:39,780
try to retrieve as much information as

517
00:22:39,780 --> 00:22:43,260
possible as much time as possible but

518
00:22:43,260 --> 00:22:45,720
while certificate can be requested they

519
00:22:45,720 --> 00:22:47,700
could also have been compromised in past

520
00:22:47,700 --> 00:22:50,340
exploitation techniques and so a threat

521
00:22:50,340 --> 00:22:51,840
actor may have compromised already

522
00:22:51,840 --> 00:22:53,880
existing certificates

523
00:22:53,880 --> 00:22:55,740
is that the case

524
00:22:55,740 --> 00:22:59,400
well it's usually recommended to renew

525
00:22:59,400 --> 00:23:02,880
the Cs certificate with certificates at

526
00:23:02,880 --> 00:23:04,500
least progressively because it's

527
00:23:04,500 --> 00:23:06,480
something that would invalidate all the

528
00:23:06,480 --> 00:23:08,640
current certificates not only for client

529
00:23:08,640 --> 00:23:10,679
authentication but for example also for

530
00:23:10,679 --> 00:23:12,500
several authentication

531
00:23:12,500 --> 00:23:15,539
certificates used to do for example

532
00:23:15,539 --> 00:23:19,760
https access in the environment

533
00:23:23,820 --> 00:23:26,520
if we now take a look at techniques that

534
00:23:26,520 --> 00:23:28,200
could be used to maintain a path to High

535
00:23:28,200 --> 00:23:31,080
privileges so from an authenticated

536
00:23:31,080 --> 00:23:33,539
context this time we have a few

537
00:23:33,539 --> 00:23:36,780
techniques there notably care bearers

538
00:23:36,780 --> 00:23:38,640
and constrained delegations or campus

539
00:23:38,640 --> 00:23:40,679
delegations that won't be covered

540
00:23:40,679 --> 00:23:43,440
because uh to follow the 40-minute time

541
00:23:43,440 --> 00:23:46,140
frame but what we would be talking about

542
00:23:46,140 --> 00:23:49,559
are the Sid and primary group ID

543
00:23:49,559 --> 00:23:53,039
persistence but first what does high

544
00:23:53,039 --> 00:23:55,860
privileges mean

545
00:23:55,860 --> 00:23:57,720
there are some well-known groups domain

546
00:23:57,720 --> 00:24:00,000
and mean and enterprising means which

547
00:24:00,000 --> 00:24:02,640
gives us a possibility to do basically

548
00:24:02,640 --> 00:24:04,919
everything in the environment but there

549
00:24:04,919 --> 00:24:06,780
are also other groups sometimes not as

550
00:24:06,780 --> 00:24:09,059
well known that are direct compromise

551
00:24:09,059 --> 00:24:10,799
paths to domain and mean and Enterprise

552
00:24:10,799 --> 00:24:12,480
admin privileges

553
00:24:12,480 --> 00:24:14,039
there is for example the several

554
00:24:14,039 --> 00:24:16,200
operators backup operators that can

555
00:24:16,200 --> 00:24:17,940
remotely connect to domain controllers

556
00:24:17,940 --> 00:24:21,240
and dump the ntds active directory

557
00:24:21,240 --> 00:24:22,320
database

558
00:24:22,320 --> 00:24:24,440
so even those whose may not be

559
00:24:24,440 --> 00:24:27,600
considered from the starters as highly

560
00:24:27,600 --> 00:24:29,940
privileges privileged as domain and mean

561
00:24:29,940 --> 00:24:31,980
and Enterprise admin they have a very

562
00:24:31,980 --> 00:24:33,840
quick and easy way to elevate the

563
00:24:33,840 --> 00:24:36,439
Privileges

564
00:24:37,740 --> 00:24:41,039
okay so now on the Sid and primary group

565
00:24:41,039 --> 00:24:43,440
ID persistence

566
00:24:43,440 --> 00:24:46,020
whenever you authenticate on Windows you

567
00:24:46,020 --> 00:24:48,179
get an access token it's linked to your

568
00:24:48,179 --> 00:24:50,460
process explorer.txt for example and

569
00:24:50,460 --> 00:24:52,260
this process is used for every operation

570
00:24:52,260 --> 00:24:54,960
you conduct it really represents your

571
00:24:54,960 --> 00:24:57,360
security context

572
00:24:57,360 --> 00:24:59,940
this access token in the case of

573
00:24:59,940 --> 00:25:02,039
kerberus authentication is constructed

574
00:25:02,039 --> 00:25:04,260
using the service ticket provided to

575
00:25:04,260 --> 00:25:05,760
authenticate

576
00:25:05,760 --> 00:25:09,659
the service ticket contains notably the

577
00:25:09,659 --> 00:25:12,840
primary group ID as well as all the SIDS

578
00:25:12,840 --> 00:25:15,480
in history you may have

579
00:25:15,480 --> 00:25:18,059
so in the authentication flow you first

580
00:25:18,059 --> 00:25:19,320
get the ticket granting tickets

581
00:25:19,320 --> 00:25:21,120
following your camera's authentication

582
00:25:21,120 --> 00:25:23,580
you get you then get a service ticket

583
00:25:23,580 --> 00:25:28,200
from which as a pack is added to your

584
00:25:28,200 --> 00:25:30,980
access token

585
00:25:31,799 --> 00:25:34,740
and then whenever you access securable

586
00:25:34,740 --> 00:25:37,559
resources that is Resources with a

587
00:25:37,559 --> 00:25:41,159
security descriptor this access token is

588
00:25:41,159 --> 00:25:44,460
used against the access control list on

589
00:25:44,460 --> 00:25:45,960
the objects

590
00:25:45,960 --> 00:25:48,779
and every access right defines an SID

591
00:25:48,779 --> 00:25:51,179
and there is a mapping there between the

592
00:25:51,179 --> 00:25:53,220
Sid you have in your access token and

593
00:25:53,220 --> 00:25:55,080
the SIDS that are allowed to do

594
00:25:55,080 --> 00:25:57,779
operation on the objects if you are

595
00:25:57,779 --> 00:26:01,080
allowed to conduct the operation you get

596
00:26:01,080 --> 00:26:03,360
the access you want otherwise you get an

597
00:26:03,360 --> 00:26:06,179
access denied Euro

598
00:26:06,179 --> 00:26:09,179
so for persistence point of view what

599
00:26:09,179 --> 00:26:11,460
you had in the Sid history or what you

600
00:26:11,460 --> 00:26:13,740
had in the primary group ID will

601
00:26:13,740 --> 00:26:15,659
ultimately be used whenever you access

602
00:26:15,659 --> 00:26:18,059
resources so it would be fully possible

603
00:26:18,059 --> 00:26:20,880
to impersonate a more privileged user by

604
00:26:20,880 --> 00:26:23,640
adding by adding Sid in history or by

605
00:26:23,640 --> 00:26:27,020
modifying your primary group ID

606
00:26:27,840 --> 00:26:30,419
to look for persistence here first on

607
00:26:30,419 --> 00:26:33,299
the Sid historic side we can enumerate

608
00:26:33,299 --> 00:26:36,539
all SIDS in a story and look whether or

609
00:26:36,539 --> 00:26:39,240
not they belong to the current domain it

610
00:26:39,240 --> 00:26:41,700
should normally never be the case a sid

611
00:26:41,700 --> 00:26:44,220
history is normally used for migration

612
00:26:44,220 --> 00:26:46,440
purposes between of users between

613
00:26:46,440 --> 00:26:49,980
domains so there should never be any Sid

614
00:26:49,980 --> 00:26:52,919
belonging to the children domain

615
00:26:52,919 --> 00:26:55,200
and we can also check whether or not

616
00:26:55,200 --> 00:26:57,299
this Sid belongs to a more privileged

617
00:26:57,299 --> 00:26:58,980
user

618
00:26:58,980 --> 00:27:02,120
on the air ID primary group ID part

619
00:27:02,120 --> 00:27:05,480
primary group ID have by default value

620
00:27:05,480 --> 00:27:08,580
linked to the object type so for example

621
00:27:08,580 --> 00:27:11,880
for users I have a precise air ID which

622
00:27:11,880 --> 00:27:14,400
should normally not change so here we

623
00:27:14,400 --> 00:27:16,380
can enumerate those value take for

624
00:27:16,380 --> 00:27:19,260
anything that's not default and map is

625
00:27:19,260 --> 00:27:22,260
with air ID so it's a relative ID with

626
00:27:22,260 --> 00:27:24,120
group of the domain to check whether or

627
00:27:24,120 --> 00:27:27,480
not the error ID is privileged

628
00:27:27,480 --> 00:27:30,240
and as with every replicated attributes

629
00:27:30,240 --> 00:27:32,100
we can reach with timestamp from

630
00:27:32,100 --> 00:27:34,559
replication metadata to check whether or

631
00:27:34,559 --> 00:27:38,000
not the change was recently made

632
00:27:42,179 --> 00:27:44,640
okay now if we take a look at the group

633
00:27:44,640 --> 00:27:47,820
policy object persistence

634
00:27:47,820 --> 00:27:49,740
there would be quite a lot to say on

635
00:27:49,740 --> 00:27:52,980
gpos they are basically a way to deploy

636
00:27:52,980 --> 00:27:56,100
parameters or settings either to users

637
00:27:56,100 --> 00:27:58,500
or to endpoints

638
00:27:58,500 --> 00:28:00,840
they can they can be configured on

639
00:28:00,840 --> 00:28:03,179
organizational units seats or domain

640
00:28:03,179 --> 00:28:07,740
with a prevalence order and the GPO the

641
00:28:07,740 --> 00:28:10,020
closest to the user or computer being

642
00:28:10,020 --> 00:28:13,559
applied in case of conflicting conflicts

643
00:28:13,559 --> 00:28:15,720
there cannot be some kind of filtering

644
00:28:15,720 --> 00:28:18,720
going on uh with the wwmi filtering for

645
00:28:18,720 --> 00:28:21,779
example to only apply on specific hosts

646
00:28:21,779 --> 00:28:25,140
or users but for us whenever looking at

647
00:28:25,140 --> 00:28:26,880
persistence it doesn't matter that much

648
00:28:26,880 --> 00:28:28,919
because we would rather have false

649
00:28:28,919 --> 00:28:32,640
positives and false negatives right

650
00:28:32,640 --> 00:28:34,799
and while it's quite complicated it can

651
00:28:34,799 --> 00:28:37,320
also play to our advantage there were a

652
00:28:37,320 --> 00:28:40,279
case where the attacker grandkid himself

653
00:28:40,279 --> 00:28:44,100
privileges to a GPO a new creative GPO

654
00:28:44,100 --> 00:28:46,799
and by doing that he overridden an

655
00:28:46,799 --> 00:28:49,440
existing GPO and removed access for

656
00:28:49,440 --> 00:28:51,960
legitimate administrators and that's how

657
00:28:51,960 --> 00:28:55,400
the threat actor got caught

658
00:28:58,140 --> 00:29:00,059
if we take a closer look at what can be

659
00:29:00,059 --> 00:29:02,520
defined through gpos there really is

660
00:29:02,520 --> 00:29:05,159
lots of settings there can be login

661
00:29:05,159 --> 00:29:08,400
rights or privileges so for instance the

662
00:29:08,400 --> 00:29:10,320
right to remotely connect to an endpoint

663
00:29:10,320 --> 00:29:12,600
and drop process memory that would be

664
00:29:12,600 --> 00:29:15,179
one thing for example there can also be

665
00:29:15,179 --> 00:29:17,520
active directory domain level privileges

666
00:29:17,520 --> 00:29:19,559
that can be configured through GPO so

667
00:29:19,559 --> 00:29:21,659
for example the right to add a Kerberos

668
00:29:21,659 --> 00:29:24,120
delegation in the domain

669
00:29:24,120 --> 00:29:26,399
there is a possibility to execute code

670
00:29:26,399 --> 00:29:29,340
in a number of way through immediate or

671
00:29:29,340 --> 00:29:32,100
scheduled tasks for instance as well as

672
00:29:32,100 --> 00:29:34,440
by deploying login or log of scripts

673
00:29:34,440 --> 00:29:37,200
that get executed whenever a user logon

674
00:29:37,200 --> 00:29:39,000
logger for whenever the computer start

675
00:29:39,000 --> 00:29:41,159
off or is shut down

676
00:29:41,159 --> 00:29:45,179
and there is also the possibility to

677
00:29:45,179 --> 00:29:48,059
um modify the registry directly by

678
00:29:48,059 --> 00:29:52,580
setting by setting your registry keys

679
00:29:52,980 --> 00:29:55,679
one thing interesting here is that the

680
00:29:55,679 --> 00:29:58,320
GPO files so as a part of the gpos that

681
00:29:58,320 --> 00:30:00,960
contains the settings as a files

682
00:30:00,960 --> 00:30:03,659
directly as files uh normally stored on

683
00:30:03,659 --> 00:30:05,340
the sysible directory on domain

684
00:30:05,340 --> 00:30:07,980
controller which is a replicated

685
00:30:07,980 --> 00:30:10,799
directory but they could also be stored

686
00:30:10,799 --> 00:30:13,380
on something entirely different as long

687
00:30:13,380 --> 00:30:15,419
as the endpoint have access to that

688
00:30:15,419 --> 00:30:16,799
folder

689
00:30:16,799 --> 00:30:18,840
and so there would be a way for threat

690
00:30:18,840 --> 00:30:21,059
actors to

691
00:30:21,059 --> 00:30:24,299
um change what their GPO does simply by

692
00:30:24,299 --> 00:30:26,700
modifying files I have a right access to

693
00:30:26,700 --> 00:30:28,200
and

694
00:30:28,200 --> 00:30:31,799
um yeah that's something that would make

695
00:30:31,799 --> 00:30:33,539
uh incident response here a bit more

696
00:30:33,539 --> 00:30:34,980
difficult because

697
00:30:34,980 --> 00:30:37,080
if we don't have access to the file well

698
00:30:37,080 --> 00:30:38,520
we can we may know that it's

699
00:30:38,520 --> 00:30:40,320
illegitimate but we would have no way of

700
00:30:40,320 --> 00:30:44,178
knowing what was done through that GPO

701
00:30:46,640 --> 00:30:49,559
there is two commandlets aim that

702
00:30:49,559 --> 00:30:52,320
uncovering GPO persistence the first one

703
00:30:52,320 --> 00:30:56,360
looks at access rights granted and gpos

704
00:30:56,360 --> 00:31:00,360
and GPO files as well as when the GPU

705
00:31:00,360 --> 00:31:02,700
was created whether or not the GPO is

706
00:31:02,700 --> 00:31:04,860
linked and applied to a privileged

707
00:31:04,860 --> 00:31:07,380
object so this one is most of a first

708
00:31:07,380 --> 00:31:10,860
look to have a first and distance first

709
00:31:10,860 --> 00:31:13,080
understanding of the GPU configured and

710
00:31:13,080 --> 00:31:16,860
try to then focus our analysis on

711
00:31:16,860 --> 00:31:20,240
specific gpos

712
00:31:20,840 --> 00:31:24,360
the first one the second one sorry is a

713
00:31:24,360 --> 00:31:26,640
bit more complicated and passes the GPR

714
00:31:26,640 --> 00:31:28,220
files to retrieve a number of settings

715
00:31:28,220 --> 00:31:31,380
so for example it will retrieve and pass

716
00:31:31,380 --> 00:31:34,200
the XML files configuring immediate or

717
00:31:34,200 --> 00:31:36,960
scheduled tasks to

718
00:31:36,960 --> 00:31:39,600
have an understanding of what the GPO is

719
00:31:39,600 --> 00:31:41,340
executing

720
00:31:41,340 --> 00:31:43,919
it will also look at which privileges

721
00:31:43,919 --> 00:31:45,960
are granted through GPO and whether or

722
00:31:45,960 --> 00:31:47,640
not those privileges may allow remote

723
00:31:47,640 --> 00:31:50,159
access or may allow a threat actor to

724
00:31:50,159 --> 00:31:51,960
conduct privileged operation on the

725
00:31:51,960 --> 00:31:54,559
endpoints

726
00:31:54,659 --> 00:31:56,460
so yeah there is a number of settings

727
00:31:56,460 --> 00:31:59,760
configured there some things are very

728
00:31:59,760 --> 00:32:02,159
hard to um

729
00:32:02,159 --> 00:32:05,399
fully and comprehensively pass for

730
00:32:05,399 --> 00:32:07,500
example registry keys because I could be

731
00:32:07,500 --> 00:32:10,080
a dozens or dozens of possible ways to

732
00:32:10,080 --> 00:32:13,200
execute cut to registry of course but it

733
00:32:13,200 --> 00:32:15,659
can give you a good under a good first

734
00:32:15,659 --> 00:32:18,360
understanding of whether or not the GPO

735
00:32:18,360 --> 00:32:21,500
seems mail issues or not

736
00:32:22,260 --> 00:32:24,919
foreign

737
00:32:25,940 --> 00:32:29,520
way to maintain persistence on a domain

738
00:32:29,520 --> 00:32:32,279
would be through access rights

739
00:32:32,279 --> 00:32:34,260
there are some well-known access right

740
00:32:34,260 --> 00:32:37,320
there such as a generic call or right

741
00:32:37,320 --> 00:32:40,200
dscl access rights that with all all

742
00:32:40,200 --> 00:32:42,600
operation to be conducted on the objects

743
00:32:42,600 --> 00:32:45,059
but there could be also some specific

744
00:32:45,059 --> 00:32:48,840
edge cases such as the right to modify

745
00:32:48,840 --> 00:32:51,120
specific attributes of a user or

746
00:32:51,120 --> 00:32:54,059
computer account so for example we could

747
00:32:54,059 --> 00:32:56,340
a threat actor

748
00:32:56,340 --> 00:32:58,919
could Grant himself the right to modify

749
00:32:58,919 --> 00:33:01,679
the UPN or lsec ID attribute of a user

750
00:33:01,679 --> 00:33:04,679
to later on authenticate as that user by

751
00:33:04,679 --> 00:33:07,320
first setting the attribute value to a

752
00:33:07,320 --> 00:33:12,360
certificate uh he has access to

753
00:33:12,360 --> 00:33:14,340
and that can also be some specific

754
00:33:14,340 --> 00:33:17,460
access rights such as the one to rep to

755
00:33:17,460 --> 00:33:19,500
conduct replication operations so for

756
00:33:19,500 --> 00:33:22,799
example as used in this async attack so

757
00:33:22,799 --> 00:33:25,860
to retrieve Secrets or the access rights

758
00:33:25,860 --> 00:33:28,279
that will allow the DC Shadow attack

759
00:33:28,279 --> 00:33:30,600
which is the attack that was used to

760
00:33:30,600 --> 00:33:33,899
modify an SID history

761
00:33:33,899 --> 00:33:36,240
so there is a lot of edge cases to

762
00:33:36,240 --> 00:33:37,679
consider here

763
00:33:37,679 --> 00:33:41,159
and this acts privileged or dangerous

764
00:33:41,159 --> 00:33:43,140
access right could config could be

765
00:33:43,140 --> 00:33:45,179
configured on a number of privileged

766
00:33:45,179 --> 00:33:47,760
objects there is a well-known administer

767
00:33:47,760 --> 00:33:49,559
the container of course

768
00:33:49,559 --> 00:33:52,559
um with a scl access rights are

769
00:33:52,559 --> 00:33:55,740
replicated to uh privileged objects but

770
00:33:55,740 --> 00:33:58,440
it doesn't cover every privileged object

771
00:33:58,440 --> 00:34:00,000
that would be for example domain

772
00:34:00,000 --> 00:34:02,220
controllers machine accounts domain

773
00:34:02,220 --> 00:34:03,659
controller groups which are not

774
00:34:03,659 --> 00:34:06,120
protected and so there would be also a

775
00:34:06,120 --> 00:34:08,460
number of privileged access to review

776
00:34:08,460 --> 00:34:10,199
and that's where automation really

777
00:34:10,199 --> 00:34:12,678
shines

778
00:34:15,000 --> 00:34:17,940
so in parasite ID there is two

779
00:34:17,940 --> 00:34:22,440
possibility uh to help in covering HCL

780
00:34:22,440 --> 00:34:25,379
based persistence the first one is by

781
00:34:25,379 --> 00:34:27,418
reviewing the access right configured

782
00:34:27,418 --> 00:34:29,520
only on privileged objects the second

783
00:34:29,520 --> 00:34:32,879
one on all the objects in the domain and

784
00:34:32,879 --> 00:34:35,339
to filter or highlight dangerous access

785
00:34:35,339 --> 00:34:37,440
rights so with a list of hard-coded

786
00:34:37,440 --> 00:34:40,800
access rights that may not be uh

787
00:34:40,800 --> 00:34:42,359
comprehensive of course because there

788
00:34:42,359 --> 00:34:46,139
could be Edge case is not considered

789
00:34:46,139 --> 00:34:49,440
it can take a lot of time and be quite

790
00:34:49,440 --> 00:34:51,659
time consuming especially in a forest

791
00:34:51,659 --> 00:34:54,300
recovery procedure where we have to move

792
00:34:54,300 --> 00:34:56,940
fast and provide results fast so a

793
00:34:56,940 --> 00:34:59,700
second option is to restore the ACL from

794
00:34:59,700 --> 00:35:02,400
their default values

795
00:35:02,400 --> 00:35:04,980
the default values are retrieved from

796
00:35:04,980 --> 00:35:07,380
the Shimmer the active directory Shema

797
00:35:07,380 --> 00:35:09,240
at the forest level

798
00:35:09,240 --> 00:35:13,500
and are linked to the object specific

799
00:35:13,500 --> 00:35:15,920
class

800
00:35:16,020 --> 00:35:18,119
it would however be possible for a

801
00:35:18,119 --> 00:35:20,640
threat actor with enough privileges of

802
00:35:20,640 --> 00:35:24,680
course to modify those scl and so

803
00:35:24,680 --> 00:35:28,140
replicating or restoring scl from their

804
00:35:28,140 --> 00:35:30,300
default value would not be enough to

805
00:35:30,300 --> 00:35:32,460
eradicate persistence

806
00:35:32,460 --> 00:35:35,099
so that's why there is a command LED in

807
00:35:35,099 --> 00:35:39,660
the first site module to verify if the

808
00:35:39,660 --> 00:35:42,960
SL are actually uh into their default

809
00:35:42,960 --> 00:35:44,820
States based on the Microsoft

810
00:35:44,820 --> 00:35:47,339
documentation and to highlight a

811
00:35:47,339 --> 00:35:49,260
possible danger with access right if

812
00:35:49,260 --> 00:35:51,980
that's not the case

813
00:35:54,420 --> 00:35:56,040
Okay so

814
00:35:56,040 --> 00:35:57,839
in conclusion

815
00:35:57,839 --> 00:35:59,400
um

816
00:35:59,400 --> 00:36:02,280
as you may have seen identifying ID

817
00:36:02,280 --> 00:36:04,740
persistence is hard and the automation

818
00:36:04,740 --> 00:36:07,260
has its limits because there are lots of

819
00:36:07,260 --> 00:36:09,720
edge cases to consider and there may be

820
00:36:09,720 --> 00:36:12,359
cases where what could be persistence

821
00:36:12,359 --> 00:36:15,359
may actually be the result of legitimate

822
00:36:15,359 --> 00:36:18,300
administrative actions

823
00:36:18,300 --> 00:36:21,359
something also very important in a

824
00:36:21,359 --> 00:36:23,099
forest recovery procedure is that

825
00:36:23,099 --> 00:36:25,560
persistence or privileged escalation

826
00:36:25,560 --> 00:36:28,920
path could already be present in the

827
00:36:28,920 --> 00:36:31,520
environment so looking at timestamp

828
00:36:31,520 --> 00:36:34,079
matching the time frame as the attack is

829
00:36:34,079 --> 00:36:36,540
not enough there should be a review of

830
00:36:36,540 --> 00:36:39,359
all the possible compromise paths to

831
00:36:39,359 --> 00:36:41,640
make sure the domain is more secure than

832
00:36:41,640 --> 00:36:44,339
before the attack so not only going back

833
00:36:44,339 --> 00:36:46,560
to how it was before the attack but also

834
00:36:46,560 --> 00:36:49,320
making sure that any compromise path

835
00:36:49,320 --> 00:36:50,700
that could have been exploited by the

836
00:36:50,700 --> 00:36:54,720
stratector is a remediately

837
00:36:54,720 --> 00:36:59,339
and last Point uh ad backup isolation is

838
00:36:59,339 --> 00:37:01,920
really important

839
00:37:01,920 --> 00:37:06,000
especially for ransomware attack it's

840
00:37:06,000 --> 00:37:09,780
much more easier to go from a state that

841
00:37:09,780 --> 00:37:11,880
is presumed to be good rather than

842
00:37:11,880 --> 00:37:14,160
trying to find persistence in a state

843
00:37:14,160 --> 00:37:18,000
that is known to be bad right so yeah

844
00:37:18,000 --> 00:37:20,339
making sure it's properly isolated not

845
00:37:20,339 --> 00:37:23,099
domain joined and that there is some

846
00:37:23,099 --> 00:37:24,720
testing going on to make sure that the

847
00:37:24,720 --> 00:37:27,720
backup can be actually restored

848
00:37:27,720 --> 00:37:29,520
there have been a number of techniques

849
00:37:29,520 --> 00:37:32,579
that could not be covered in this torque

850
00:37:32,579 --> 00:37:34,859
but there are more content in the deck

851
00:37:34,859 --> 00:37:36,480
and if you want to take a look at for

852
00:37:36,480 --> 00:37:38,880
example chairs persistence and if you

853
00:37:38,880 --> 00:37:40,740
have questions feel free to ask them in

854
00:37:40,740 --> 00:37:42,839
the slack and I will try to answer as

855
00:37:42,839 --> 00:37:44,390
much question as possible

856
00:37:44,390 --> 00:37:45,010
[Applause]

857
00:37:45,010 --> 00:37:48,169
[Music]

