1
00:00:11,519 --> 00:00:16,000
i'm going to introduce to you

2
00:00:13,840 --> 00:00:17,759
jonathan ketchum so what i hear about

3
00:00:16,000 --> 00:00:19,198
john and i haven't met you in person i

4
00:00:17,760 --> 00:00:20,240
don't believe john and if i have i'm

5
00:00:19,199 --> 00:00:23,760
really sorry

6
00:00:20,240 --> 00:00:25,439
but people say you are the sharpest tack

7
00:00:23,760 --> 00:00:27,039
you are like you know how you people say

8
00:00:25,439 --> 00:00:30,080
not the sharpest pack in the box you

9
00:00:27,039 --> 00:00:31,599
are sharper than the sharpest tack

10
00:00:30,080 --> 00:00:33,280
the one thing that jonathan and i do

11
00:00:31,599 --> 00:00:35,600
have in common is the air force

12
00:00:33,280 --> 00:00:36,320
so near and dear to me and without

13
00:00:35,600 --> 00:00:39,600
further ado

14
00:00:36,320 --> 00:00:40,879
i will hand this over to you all right

15
00:00:39,600 --> 00:00:41,920
thanks so much heather can you guys hear

16
00:00:40,879 --> 00:00:44,239
me

17
00:00:41,920 --> 00:00:45,440
you sound great all right fantastic well

18
00:00:44,239 --> 00:00:46,559
thank you heather for the great

19
00:00:45,440 --> 00:00:48,239
introduction

20
00:00:46,559 --> 00:00:49,919
uh as heather mentioned my name is john

21
00:00:48,239 --> 00:00:51,360
ketchum i'm one of the full-time threat

22
00:00:49,920 --> 00:00:53,440
hunters at usaa

23
00:00:51,360 --> 00:00:54,719
in the cyber threat operations center

24
00:00:53,440 --> 00:00:55,919
and today i'd like to talk to you

25
00:00:54,719 --> 00:00:58,079
briefly about

26
00:00:55,920 --> 00:01:00,480
our project to improve the kansa open

27
00:00:58,079 --> 00:01:02,239
source framework

28
00:01:00,480 --> 00:01:03,839
get the obligatory legal statement out

29
00:01:02,239 --> 00:01:05,600
of the way any opinions that i expressed

30
00:01:03,840 --> 00:01:07,040
during this presentation are my own not

31
00:01:05,600 --> 00:01:08,880
my employers but

32
00:01:07,040 --> 00:01:10,240
i will say that i do work for a really

33
00:01:08,880 --> 00:01:11,360
awesome employer and we have a really

34
00:01:10,240 --> 00:01:13,280
cool mission

35
00:01:11,360 --> 00:01:14,960
and part of our mission is to ensure and

36
00:01:13,280 --> 00:01:15,520
facilitate the financial security of our

37
00:01:14,960 --> 00:01:16,960
members

38
00:01:15,520 --> 00:01:18,720
and one of the large ways that we do

39
00:01:16,960 --> 00:01:21,520
that is through innovation

40
00:01:18,720 --> 00:01:22,880
and through embracing of open source and

41
00:01:21,520 --> 00:01:24,560
that's largely because

42
00:01:22,880 --> 00:01:26,640
with open source we're able to tailor

43
00:01:24,560 --> 00:01:27,600
our applications to the needs of our

44
00:01:26,640 --> 00:01:28,880
environment

45
00:01:27,600 --> 00:01:31,600
it allows us to stay on the bleeding

46
00:01:28,880 --> 00:01:34,079
edge of security tactics and techniques

47
00:01:31,600 --> 00:01:35,600
and to keep the cost low and competitive

48
00:01:34,079 --> 00:01:36,798
and to my knowledge

49
00:01:35,600 --> 00:01:38,320
this is one of the largest single

50
00:01:36,799 --> 00:01:41,119
contributions back to an open source

51
00:01:38,320 --> 00:01:42,880
project that usa has allowed

52
00:01:41,119 --> 00:01:44,320
over 10 000 lines of code and more on

53
00:01:42,880 --> 00:01:47,039
the way so we're super excited to talk

54
00:01:44,320 --> 00:01:47,039
about this today

55
00:01:47,200 --> 00:01:51,360
so here's a quick overview of what we'll

56
00:01:49,520 --> 00:01:53,600
be covering today

57
00:01:51,360 --> 00:01:55,119
to be completely honest up front there's

58
00:01:53,600 --> 00:01:55,520
way too much content here for me to

59
00:01:55,119 --> 00:01:58,159
cover

60
00:01:55,520 --> 00:02:00,240
in just 30 minutes and so i'm going to

61
00:01:58,159 --> 00:02:02,000
be probably talking a little bit quickly

62
00:02:00,240 --> 00:02:03,600
and i'm going to skip some slides i

63
00:02:02,000 --> 00:02:04,960
wanted to keep the slides included so

64
00:02:03,600 --> 00:02:06,640
that they're going to be posted after

65
00:02:04,960 --> 00:02:08,799
the fact on the sans portal

66
00:02:06,640 --> 00:02:10,160
and so will the videos so if you feel

67
00:02:08,800 --> 00:02:11,920
like i'm going too quickly

68
00:02:10,160 --> 00:02:13,599
the good news is you can download the

69
00:02:11,920 --> 00:02:14,799
video later and watch it at half speed

70
00:02:13,599 --> 00:02:17,280
so i don't sound like a

71
00:02:14,800 --> 00:02:18,640
talking chipmunk if at all possible if

72
00:02:17,280 --> 00:02:19,520
you're able to save your questions for

73
00:02:18,640 --> 00:02:21,760
the discord

74
00:02:19,520 --> 00:02:23,360
track 2 hallway that i've got that'd be

75
00:02:21,760 --> 00:02:25,599
great it'll allow me to get through

76
00:02:23,360 --> 00:02:26,959
more of the content with everybody but

77
00:02:25,599 --> 00:02:28,399
if not you know i'll try to go as quick

78
00:02:26,959 --> 00:02:29,840
as i can and

79
00:02:28,400 --> 00:02:32,879
allow a little bit of time for questions

80
00:02:29,840 --> 00:02:34,000
at the end so a quick refresher

81
00:02:32,879 --> 00:02:36,160
and for those of you who aren't familiar

82
00:02:34,000 --> 00:02:38,319
what is kansa let's say you've got an

83
00:02:36,160 --> 00:02:39,840
incident where you suspect a few hosts

84
00:02:38,319 --> 00:02:41,119
on your network have been compromised

85
00:02:39,840 --> 00:02:42,560
and you need to gather some additional

86
00:02:41,120 --> 00:02:43,920
forensic artifacts to support your

87
00:02:42,560 --> 00:02:45,760
investigation

88
00:02:43,920 --> 00:02:47,280
the good news is kansa is an excellent

89
00:02:45,760 --> 00:02:48,799
tool for the job

90
00:02:47,280 --> 00:02:50,319
the reason is that it relies on

91
00:02:48,800 --> 00:02:52,080
powershell and

92
00:02:50,319 --> 00:02:54,238
winrm which are native services in

93
00:02:52,080 --> 00:02:55,840
windows so you don't need to install any

94
00:02:54,239 --> 00:02:57,280
agents or do anything additional

95
00:02:55,840 --> 00:02:58,879
all the tools that you need are already

96
00:02:57,280 --> 00:03:00,800
there in most cases

97
00:02:58,879 --> 00:03:02,159
and it allows you to run arbitrary

98
00:03:00,800 --> 00:03:03,599
modules and there's a lot of community

99
00:03:02,159 --> 00:03:04,720
provided modules out there to collect

100
00:03:03,599 --> 00:03:06,000
certain artifacts

101
00:03:04,720 --> 00:03:07,519
but the best part is you can write your

102
00:03:06,000 --> 00:03:09,200
own so whatever it is you're looking for

103
00:03:07,519 --> 00:03:10,560
you can look for exactly that by writing

104
00:03:09,200 --> 00:03:13,440
your own custom modules

105
00:03:10,560 --> 00:03:15,200
i do want to talk about briefly uh what

106
00:03:13,440 --> 00:03:17,040
what kansa is not

107
00:03:15,200 --> 00:03:19,280
it is not an endpoint detection response

108
00:03:17,040 --> 00:03:22,000
solution it's not antivirus

109
00:03:19,280 --> 00:03:24,879
it cannot replace your event logging

110
00:03:22,000 --> 00:03:27,519
solution it's not real time so

111
00:03:24,879 --> 00:03:28,399
it has a very niche place in incident

112
00:03:27,519 --> 00:03:30,080
response

113
00:03:28,400 --> 00:03:32,159
and potentially threat hunting in that

114
00:03:30,080 --> 00:03:34,400
you can use it to supplement

115
00:03:32,159 --> 00:03:35,599
those log sources to get artifacts that

116
00:03:34,400 --> 00:03:36,560
you're not already getting through some

117
00:03:35,599 --> 00:03:38,238
other means

118
00:03:36,560 --> 00:03:40,239
and one of the the niche areas that

119
00:03:38,239 --> 00:03:41,599
kansa fills is especially in large

120
00:03:40,239 --> 00:03:41,920
enterprise environments where many of

121
00:03:41,599 --> 00:03:43,518
them

122
00:03:41,920 --> 00:03:45,359
are starting to feel that agent fatigue

123
00:03:43,519 --> 00:03:47,040
too many agents on the endpoints i.t is

124
00:03:45,360 --> 00:03:48,640
not really very positive about

125
00:03:47,040 --> 00:03:50,400
throwing another agent on there just for

126
00:03:48,640 --> 00:03:51,839
threat hunting and

127
00:03:50,400 --> 00:03:53,200
you know the great thing about kansa is

128
00:03:51,840 --> 00:03:54,239
that there's no agent required it's

129
00:03:53,200 --> 00:03:56,720
relying on native

130
00:03:54,239 --> 00:03:58,159
windows services and and capabilities so

131
00:03:56,720 --> 00:03:59,519
that's that's really the advantage that

132
00:03:58,159 --> 00:04:01,040
we have here with kansa

133
00:03:59,519 --> 00:04:02,159
there's lots of different cans of forks

134
00:04:01,040 --> 00:04:03,519
out there all of them provide great

135
00:04:02,159 --> 00:04:05,679
capabilities

136
00:04:03,519 --> 00:04:07,360
let's talk briefly though about what is

137
00:04:05,680 --> 00:04:08,560
a prerequisite to get candida to work in

138
00:04:07,360 --> 00:04:10,239
your environment

139
00:04:08,560 --> 00:04:11,599
well first of all you've got to have

140
00:04:10,239 --> 00:04:12,959
powershell and the good news is if

141
00:04:11,599 --> 00:04:14,879
you're a large enterprise

142
00:04:12,959 --> 00:04:16,160
you probably have powershell already if

143
00:04:14,879 --> 00:04:18,000
you're running windows windows 10

144
00:04:16,160 --> 00:04:19,519
includes powershell v5 by default

145
00:04:18,000 --> 00:04:21,839
i can tell you that for several years we

146
00:04:19,519 --> 00:04:24,400
ran kansa against the entire environment

147
00:04:21,839 --> 00:04:25,280
at usaa and it works fine with windows 7

148
00:04:24,400 --> 00:04:28,080
as well going far

149
00:04:25,280 --> 00:04:29,280
as far back as powershell version uh

150
00:04:28,080 --> 00:04:32,400
you're also going to need

151
00:04:29,280 --> 00:04:35,359
winrm the service winrm windows remoting

152
00:04:32,400 --> 00:04:37,919
uh ws man is as it's otherwise known and

153
00:04:35,360 --> 00:04:39,199
port 5985 or 5986 allowed through the

154
00:04:37,919 --> 00:04:40,560
host-based firewall

155
00:04:39,199 --> 00:04:43,759
i generally recommend that you do this

156
00:04:40,560 --> 00:04:45,919
via a gpo or a logon script so you can

157
00:04:43,759 --> 00:04:49,360
achieve as wide of a reach as possible

158
00:04:45,919 --> 00:04:49,359
with getting those settings enabled

159
00:04:49,440 --> 00:04:52,400
uh you're also going to need some

160
00:04:50,479 --> 00:04:53,199
credentials and a lot of infosec

161
00:04:52,400 --> 00:04:55,280
professionals

162
00:04:53,199 --> 00:04:56,720
like to default to wanting domain admin

163
00:04:55,280 --> 00:04:58,400
credentials i can tell you right now

164
00:04:56,720 --> 00:04:59,120
that uh with all the threat hunting that

165
00:04:58,400 --> 00:05:00,479
we've done and

166
00:04:59,120 --> 00:05:01,680
the hundreds of cans of jobs that we've

167
00:05:00,479 --> 00:05:03,440
run across our environment we've never

168
00:05:01,680 --> 00:05:05,120
had the need for domain admin

169
00:05:03,440 --> 00:05:06,479
i do recommend that whatever credentials

170
00:05:05,120 --> 00:05:08,160
you use you make sure that they're part

171
00:05:06,479 --> 00:05:09,280
of a group that has local admin on the

172
00:05:08,160 --> 00:05:10,560
boxes that you're going to be running

173
00:05:09,280 --> 00:05:13,758
kansa against

174
00:05:10,560 --> 00:05:15,600
and in extreme cases you may need up to

175
00:05:13,759 --> 00:05:17,520
the sed bug privilege

176
00:05:15,600 --> 00:05:19,759
but really local admin is sufficient for

177
00:05:17,520 --> 00:05:21,758
any kansas job that you're going to run

178
00:05:19,759 --> 00:05:23,600
also microsoft's remote server

179
00:05:21,759 --> 00:05:25,520
administration toolkit is super helpful

180
00:05:23,600 --> 00:05:26,800
it allows you to query active directory

181
00:05:25,520 --> 00:05:28,880
through powershell

182
00:05:26,800 --> 00:05:30,720
and get a list of those target systems

183
00:05:28,880 --> 00:05:32,960
in active directory real time so you

184
00:05:30,720 --> 00:05:34,320
have a list of of the active machines

185
00:05:32,960 --> 00:05:35,680
that you want to reach out to and run

186
00:05:34,320 --> 00:05:36,800
kansa against

187
00:05:35,680 --> 00:05:38,639
the next few items that i'm going to

188
00:05:36,800 --> 00:05:39,039
list here as prerequisites are grayed

189
00:05:38,639 --> 00:05:40,560
out

190
00:05:39,039 --> 00:05:42,719
and that's just to denote that you only

191
00:05:40,560 --> 00:05:44,160
need these things to use or leverage

192
00:05:42,720 --> 00:05:46,240
some of the enhancements that we've

193
00:05:44,160 --> 00:05:48,880
added to the kansa project in the last

194
00:05:46,240 --> 00:05:49,600
month or so the first i list here is elk

195
00:05:48,880 --> 00:05:52,240
but really

196
00:05:49,600 --> 00:05:53,919
any centralized login solution will work

197
00:05:52,240 --> 00:05:56,400
it just needs to be able to accept

198
00:05:53,919 --> 00:05:58,479
json formatted messages coming in on an

199
00:05:56,400 --> 00:06:00,239
arbitrary tcp listener port

200
00:05:58,479 --> 00:06:02,400
and with our contribution back to the

201
00:06:00,240 --> 00:06:04,720
project we provided a sample

202
00:06:02,400 --> 00:06:06,960
grok parser for logstash but really like

203
00:06:04,720 --> 00:06:09,440
i said any centralized login solution

204
00:06:06,960 --> 00:06:10,719
will work just fine we also recommend

205
00:06:09,440 --> 00:06:12,240
deployment servers and we'll talk more

206
00:06:10,720 --> 00:06:13,440
about this later but this is what allows

207
00:06:12,240 --> 00:06:15,600
us to scale up

208
00:06:13,440 --> 00:06:17,680
and deploy kansa jobs to hundreds of

209
00:06:15,600 --> 00:06:19,520
thousands of systems very very rapidly

210
00:06:17,680 --> 00:06:20,960
the exact number of servers is up to you

211
00:06:19,520 --> 00:06:22,479
it really depends on the size of your

212
00:06:20,960 --> 00:06:23,280
environment and how quickly you want to

213
00:06:22,479 --> 00:06:25,039
be able to get those

214
00:06:23,280 --> 00:06:27,119
jobs those kinds of jobs out to the

215
00:06:25,039 --> 00:06:28,719
environment and finally we also

216
00:06:27,120 --> 00:06:30,479
recommend a staging server or set of

217
00:06:28,720 --> 00:06:31,360
servers a cluster possibly funded by a

218
00:06:30,479 --> 00:06:33,520
load balancer

219
00:06:31,360 --> 00:06:35,440
we use the staging server to stage

220
00:06:33,520 --> 00:06:37,758
auxiliary binaries or

221
00:06:35,440 --> 00:06:38,960
helper tools that the kansas modules can

222
00:06:37,759 --> 00:06:41,759
download

223
00:06:38,960 --> 00:06:42,479
and use to gather additional artifacts

224
00:06:41,759 --> 00:06:45,759
that may not be

225
00:06:42,479 --> 00:06:47,680
possible with just native powershell

226
00:06:45,759 --> 00:06:48,880
so we love kansa and we don't want to

227
00:06:47,680 --> 00:06:50,639
disparage it at all

228
00:06:48,880 --> 00:06:52,479
we're super excited about using it but

229
00:06:50,639 --> 00:06:54,160
let's talk about its limitations

230
00:06:52,479 --> 00:06:56,000
so really it's designed to be run from

231
00:06:54,160 --> 00:06:57,840
an analyst workstation and it's

232
00:06:56,000 --> 00:06:59,039
really focused on incident response so

233
00:06:57,840 --> 00:07:00,799
you're kind of focused on

234
00:06:59,039 --> 00:07:02,000
you know 50 to 100 targets maybe a

235
00:07:00,800 --> 00:07:03,120
thousand if you've got a really beefy

236
00:07:02,000 --> 00:07:05,199
workstation

237
00:07:03,120 --> 00:07:06,960
uh and a good good network connection

238
00:07:05,199 --> 00:07:09,199
but it's really not designed to

239
00:07:06,960 --> 00:07:11,120
be run against the entire environment uh

240
00:07:09,199 --> 00:07:12,560
all at once very rapidly

241
00:07:11,120 --> 00:07:14,560
uh since it's running from the analyst

242
00:07:12,560 --> 00:07:16,160
workstation your real network bottleneck

243
00:07:14,560 --> 00:07:16,639
there is going to be deploying the job

244
00:07:16,160 --> 00:07:18,880
out

245
00:07:16,639 --> 00:07:20,479
if you try to connect to 200 000

246
00:07:18,880 --> 00:07:22,240
machines from your laptop

247
00:07:20,479 --> 00:07:23,680
it's going to take a while and then

248
00:07:22,240 --> 00:07:25,599
another limitation is that it's

249
00:07:23,680 --> 00:07:27,520
synchronous in nature meaning that

250
00:07:25,599 --> 00:07:29,199
the kansa framework connects to the

251
00:07:27,520 --> 00:07:30,639
endpoint and stays connected for the

252
00:07:29,199 --> 00:07:31,280
duration of the module that you're

253
00:07:30,639 --> 00:07:33,199
running

254
00:07:31,280 --> 00:07:34,880
waiting for those results to come back

255
00:07:33,199 --> 00:07:36,160
and then collects those results before

256
00:07:34,880 --> 00:07:38,639
it moves on to the next

257
00:07:36,160 --> 00:07:39,360
series so serial and synchronous in

258
00:07:38,639 --> 00:07:40,880
nature

259
00:07:39,360 --> 00:07:41,919
which you know are two of the problems

260
00:07:40,880 --> 00:07:43,759
that we're going to have to overcome to

261
00:07:41,919 --> 00:07:44,960
get it to scale and finally

262
00:07:43,759 --> 00:07:46,400
the results are stored on the local

263
00:07:44,960 --> 00:07:48,239
machine so if you run this from your

264
00:07:46,400 --> 00:07:49,359
analyst workstation your laptop

265
00:07:48,240 --> 00:07:50,560
if you work in a large enterprise

266
00:07:49,360 --> 00:07:51,360
environment and you have more than one

267
00:07:50,560 --> 00:07:52,639
threat hunter

268
00:07:51,360 --> 00:07:54,720
you're going to have a problem sharing

269
00:07:52,639 --> 00:07:56,000
those results and collaborating on them

270
00:07:54,720 --> 00:07:57,520
we've done several threat hunting

271
00:07:56,000 --> 00:07:59,199
engagements with kansa where we collect

272
00:07:57,520 --> 00:08:00,560
hundreds of millions of records

273
00:07:59,199 --> 00:08:01,919
and being able to work through those

274
00:08:00,560 --> 00:08:03,919
hundreds of millions of records if

275
00:08:01,919 --> 00:08:06,560
they're all on one person's laptop

276
00:08:03,919 --> 00:08:08,400
becomes a little bit difficult so this

277
00:08:06,560 --> 00:08:10,000
slide here is really just going over a

278
00:08:08,400 --> 00:08:12,080
visual depiction of what the serial

279
00:08:10,000 --> 00:08:14,000
synchronous nature of kansa

280
00:08:12,080 --> 00:08:15,440
represents as far as a difficulty in

281
00:08:14,000 --> 00:08:16,960
scaling in the environment i think you

282
00:08:15,440 --> 00:08:19,120
guys get the picture

283
00:08:16,960 --> 00:08:20,159
well what i want to talk about is you

284
00:08:19,120 --> 00:08:21,599
know our goal

285
00:08:20,160 --> 00:08:22,960
we think kansas is great in incident

286
00:08:21,599 --> 00:08:24,159
response but we wanted to use it from a

287
00:08:22,960 --> 00:08:25,440
threat hunting perspective and threat

288
00:08:24,160 --> 00:08:27,199
hunting is all about

289
00:08:25,440 --> 00:08:29,360
knowing normal so you can find those

290
00:08:27,199 --> 00:08:32,719
outliers so we wanted to run

291
00:08:29,360 --> 00:08:34,479
one module on over 150 000 systems get

292
00:08:32,719 --> 00:08:36,159
the results as quickly as possible to be

293
00:08:34,479 --> 00:08:36,959
able to identify those outliers in our

294
00:08:36,159 --> 00:08:38,718
environment

295
00:08:36,958 --> 00:08:40,478
and the problem that we ran into is that

296
00:08:38,719 --> 00:08:42,000
it was just too slow even for modules it

297
00:08:40,479 --> 00:08:44,959
only took a couple of seconds

298
00:08:42,000 --> 00:08:46,640
uh running that against 150 000 systems

299
00:08:44,959 --> 00:08:48,160
would take well over a day and that was

300
00:08:46,640 --> 00:08:51,199
just not fast enough for us

301
00:08:48,160 --> 00:08:52,640
call us you know captain impatient so

302
00:08:51,200 --> 00:08:54,880
we had to come up with a solution to

303
00:08:52,640 --> 00:08:56,080
address that and our first solution to

304
00:08:54,880 --> 00:08:57,439
address this

305
00:08:56,080 --> 00:09:00,240
was to throw more horsepower at the

306
00:08:57,440 --> 00:09:02,240
situation right the old tim the toolman

307
00:09:00,240 --> 00:09:04,080
taylor solution is let's get some more

308
00:09:02,240 --> 00:09:04,640
servers in there and divide up the job

309
00:09:04,080 --> 00:09:06,560
now

310
00:09:04,640 --> 00:09:08,160
if you're a manager you call this

311
00:09:06,560 --> 00:09:10,319
delegating the responsibility

312
00:09:08,160 --> 00:09:12,079
to your team but from a computing

313
00:09:10,320 --> 00:09:13,839
engineer perspective this is distributed

314
00:09:12,080 --> 00:09:15,440
parallelized computing so

315
00:09:13,839 --> 00:09:17,279
we wrote a script that basically takes

316
00:09:15,440 --> 00:09:19,120
the job and let's say you have 150

317
00:09:17,279 --> 00:09:21,120
000 endpoints you want to target it

318
00:09:19,120 --> 00:09:22,800
divides that that task that

319
00:09:21,120 --> 00:09:24,959
list of targets up into a bunch of

320
00:09:22,800 --> 00:09:27,439
subtargets subtasks

321
00:09:24,959 --> 00:09:28,880
and then it divvies them up between all

322
00:09:27,440 --> 00:09:30,320
of your kansas servers you've got in

323
00:09:28,880 --> 00:09:31,439
high speed data centers with great

324
00:09:30,320 --> 00:09:32,560
connectivity to the rest of the

325
00:09:31,440 --> 00:09:34,240
environment

326
00:09:32,560 --> 00:09:36,719
and the way that this works is the

327
00:09:34,240 --> 00:09:40,320
analysts will launch the kansa module by

328
00:09:36,720 --> 00:09:43,279
calling out to the kansas servers

329
00:09:40,320 --> 00:09:44,800
and invoking a regular copy of the kansa

330
00:09:43,279 --> 00:09:46,399
framework

331
00:09:44,800 --> 00:09:48,240
on those servers to reach out to the

332
00:09:46,399 --> 00:09:51,680
endpoint and each server then

333
00:09:48,240 --> 00:09:53,680
will reach out to its subset of targets

334
00:09:51,680 --> 00:09:54,880
across the environment and run that

335
00:09:53,680 --> 00:09:56,719
kansa job

336
00:09:54,880 --> 00:09:58,640
waiting for the job to complete collect

337
00:09:56,720 --> 00:10:00,560
the results bring them back

338
00:09:58,640 --> 00:10:02,399
and then to solve that other problem it

339
00:10:00,560 --> 00:10:03,920
sends all of the results into our

340
00:10:02,399 --> 00:10:06,160
centralized log management solution we

341
00:10:03,920 --> 00:10:08,959
chose elk for our hunting solution but

342
00:10:06,160 --> 00:10:10,240
really any log solution will do after

343
00:10:08,959 --> 00:10:12,800
all the results are there in

344
00:10:10,240 --> 00:10:14,399
elk you can then use elks dashboards

345
00:10:12,800 --> 00:10:15,680
aggregations visualizations to very

346
00:10:14,399 --> 00:10:17,920
quickly tease out

347
00:10:15,680 --> 00:10:19,439
all of those outliers and anomalies i

348
00:10:17,920 --> 00:10:21,439
know many of you your parents told you

349
00:10:19,440 --> 00:10:23,120
growing up that being different was good

350
00:10:21,440 --> 00:10:25,200
but in a threat hunting scenario

351
00:10:23,120 --> 00:10:26,320
different is suspicious and deserves an

352
00:10:25,200 --> 00:10:28,160
investigation

353
00:10:26,320 --> 00:10:30,240
and so this is what allows us to find

354
00:10:28,160 --> 00:10:32,000
those outliers very very quickly

355
00:10:30,240 --> 00:10:34,160
and with this enhancement we were able

356
00:10:32,000 --> 00:10:36,160
to make great success we could run

357
00:10:34,160 --> 00:10:37,439
small cans of jobs uh that took you know

358
00:10:36,160 --> 00:10:40,000
maybe a minute or less

359
00:10:37,440 --> 00:10:41,600
in under a day but that was still too

360
00:10:40,000 --> 00:10:42,800
slow for us and that's because we needed

361
00:10:41,600 --> 00:10:45,200
to solve that other problem

362
00:10:42,800 --> 00:10:47,279
of synchronicity the fact that kansa by

363
00:10:45,200 --> 00:10:49,920
default stays connected to the endpoint

364
00:10:47,279 --> 00:10:51,360
while the module runs

365
00:10:49,920 --> 00:10:53,279
so we needed to come up with a way to

366
00:10:51,360 --> 00:10:55,120
get and get around the synchronicity

367
00:10:53,279 --> 00:10:57,519
and our solution to that was to create

368
00:10:55,120 --> 00:10:59,680
asynchronous kansa jobs we call these

369
00:10:57,519 --> 00:11:01,519
fire and forget modules because they're

370
00:10:59,680 --> 00:11:03,519
they're largely self-guided

371
00:11:01,519 --> 00:11:04,720
autonomous modules that we can launch

372
00:11:03,519 --> 00:11:07,200
against an endpoint

373
00:11:04,720 --> 00:11:08,880
and then walk away so the idea is that

374
00:11:07,200 --> 00:11:10,480
we spawn an orphan child process and

375
00:11:08,880 --> 00:11:11,519
have that process run the module

376
00:11:10,480 --> 00:11:14,079
collection

377
00:11:11,519 --> 00:11:15,680
and then report all of its results

378
00:11:14,079 --> 00:11:17,519
directly to our login solution rather

379
00:11:15,680 --> 00:11:19,680
than waiting for the kansas server

380
00:11:17,519 --> 00:11:20,720
so the idea here is in addition to our

381
00:11:19,680 --> 00:11:21,920
module code that's collecting the

382
00:11:20,720 --> 00:11:23,040
forensics we're interested in

383
00:11:21,920 --> 00:11:25,040
we're also going to include some

384
00:11:23,040 --> 00:11:26,399
functions to standardize our results to

385
00:11:25,040 --> 00:11:29,199
send them to elk

386
00:11:26,399 --> 00:11:30,800
to base base64 encode and compress the

387
00:11:29,200 --> 00:11:32,000
entire module so we can spawn it as a

388
00:11:30,800 --> 00:11:33,519
orphan child process

389
00:11:32,000 --> 00:11:35,040
and then include a self unpacker

390
00:11:33,519 --> 00:11:36,640
functionality so that

391
00:11:35,040 --> 00:11:38,399
it has the ability to extract itself

392
00:11:36,640 --> 00:11:40,000
whenever when it arrives on the endpoint

393
00:11:38,399 --> 00:11:42,480
and we take all of that and we package

394
00:11:40,000 --> 00:11:44,000
it up into our fully autonomous

395
00:11:42,480 --> 00:11:46,000
fire forget module that we can then

396
00:11:44,000 --> 00:11:48,240
deploy against the endpoint

397
00:11:46,000 --> 00:11:49,680
and here's a notional view if you speak

398
00:11:48,240 --> 00:11:51,519
powershell of what we're doing

399
00:11:49,680 --> 00:11:53,359
really all it is is taking all of that

400
00:11:51,519 --> 00:11:54,800
functionality the module code to collect

401
00:11:53,360 --> 00:11:56,000
the artifacts as well as everything

402
00:11:54,800 --> 00:11:57,839
necessary to make it autonomous

403
00:11:56,000 --> 00:11:58,959
we put it into a script block and then

404
00:11:57,839 --> 00:11:59,839
we have a function that takes that

405
00:11:58,959 --> 00:12:02,560
script block

406
00:11:59,839 --> 00:12:04,639
compresses it down base64 encodes it

407
00:12:02,560 --> 00:12:05,518
prepends the functions to decompress it

408
00:12:04,639 --> 00:12:07,760
and and d

409
00:12:05,519 --> 00:12:09,279
base64 encode it and then we use a

410
00:12:07,760 --> 00:12:10,000
simple wimmy call when we land on the

411
00:12:09,279 --> 00:12:12,160
box

412
00:12:10,000 --> 00:12:14,240
to spawn an orphan child process kind of

413
00:12:12,160 --> 00:12:15,600
like the linux equivalent no hub

414
00:12:14,240 --> 00:12:18,240
so that when we disconnect from the

415
00:12:15,600 --> 00:12:20,560
machine the process doesn't die

416
00:12:18,240 --> 00:12:21,920
and with that we're able to push out

417
00:12:20,560 --> 00:12:24,160
just like before using that same

418
00:12:21,920 --> 00:12:24,880
distributed deployment mechanism we can

419
00:12:24,160 --> 00:12:26,480
push those

420
00:12:24,880 --> 00:12:28,240
fire and forget modules out and we have

421
00:12:26,480 --> 00:12:29,920
multiple advantages here the moment we

422
00:12:28,240 --> 00:12:31,680
start firing those modules out

423
00:12:29,920 --> 00:12:33,519
they begin to execute in the environment

424
00:12:31,680 --> 00:12:35,040
and immediately when the job is done

425
00:12:33,519 --> 00:12:36,560
that system will start to report its

426
00:12:35,040 --> 00:12:38,240
results into elk so

427
00:12:36,560 --> 00:12:40,160
from the moment we click go we can go

428
00:12:38,240 --> 00:12:43,680
into our dashboards and start the

429
00:12:40,160 --> 00:12:43,680
real-time analysis right away

430
00:12:43,920 --> 00:12:47,040
so we have achieved success now we're

431
00:12:46,079 --> 00:12:50,239
able to run

432
00:12:47,040 --> 00:12:51,760
kansa jobs that take forever and we can

433
00:12:50,240 --> 00:12:52,320
launch those in just you know a minute

434
00:12:51,760 --> 00:12:54,720
or two

435
00:12:52,320 --> 00:12:55,920
it's fantastic yes i see some questions

436
00:12:54,720 --> 00:12:57,120
coming in can you get a copy of the

437
00:12:55,920 --> 00:12:58,560
powershell blocks yep

438
00:12:57,120 --> 00:13:00,240
the code has all been contributed back

439
00:12:58,560 --> 00:13:00,719
to the open source project so it's all

440
00:13:00,240 --> 00:13:02,560
out there

441
00:13:00,720 --> 00:13:04,240
and the these slides will be made

442
00:13:02,560 --> 00:13:05,920
available later

443
00:13:04,240 --> 00:13:07,519
but some of you in the audience probably

444
00:13:05,920 --> 00:13:09,360
noticed something interesting about that

445
00:13:07,519 --> 00:13:11,680
powershell block that i put up there

446
00:13:09,360 --> 00:13:12,720
we look exactly like malware if you were

447
00:13:11,680 --> 00:13:14,560
looking closely

448
00:13:12,720 --> 00:13:15,760
looking back at that block you'll see

449
00:13:14,560 --> 00:13:17,680
some key signs

450
00:13:15,760 --> 00:13:20,240
that should flag and throw off red

451
00:13:17,680 --> 00:13:21,680
alerts uh we're using memory streams

452
00:13:20,240 --> 00:13:23,279
we're compressing we're

453
00:13:21,680 --> 00:13:24,719
base64 encoding this looks like

454
00:13:23,279 --> 00:13:26,240
obfuscated powershell

455
00:13:24,720 --> 00:13:28,000
and then you have the telltale sign of

456
00:13:26,240 --> 00:13:30,240
evil powershell at the bottom spawning a

457
00:13:28,000 --> 00:13:33,200
powershell instance with no profile

458
00:13:30,240 --> 00:13:33,760
hidden window and an obfuscated command

459
00:13:33,200 --> 00:13:35,920
block

460
00:13:33,760 --> 00:13:37,760
that sets off all sorts of alarm bells

461
00:13:35,920 --> 00:13:39,839
and you know you probably thought that

462
00:13:37,760 --> 00:13:40,720
and so did our edr solution and all of

463
00:13:39,839 --> 00:13:42,720
our monitoring

464
00:13:40,720 --> 00:13:44,079
you can imagine the faces of our

465
00:13:42,720 --> 00:13:45,519
incident responders when

466
00:13:44,079 --> 00:13:47,279
hundreds and hundreds of thousands of

467
00:13:45,519 --> 00:13:48,560
alerts came pouring into their queue for

468
00:13:47,279 --> 00:13:50,240
evil powershell

469
00:13:48,560 --> 00:13:52,239
cybergeddon was pouring in through the

470
00:13:50,240 --> 00:13:55,839
gates so we had to find a way to

471
00:13:52,240 --> 00:13:58,480
to fix this our solution was four-fold

472
00:13:55,839 --> 00:13:58,959
first of all using an api we we work

473
00:13:58,480 --> 00:14:02,079
with

474
00:13:58,959 --> 00:14:05,040
our edr to negotiate a

475
00:14:02,079 --> 00:14:05,920
safe word basically a way of dynamically

476
00:14:05,040 --> 00:14:07,680
suppressing

477
00:14:05,920 --> 00:14:10,560
the evil powershell that we're about to

478
00:14:07,680 --> 00:14:11,839
invoke by telling the edr it's okay it's

479
00:14:10,560 --> 00:14:13,040
just us and you can make this a

480
00:14:11,839 --> 00:14:14,880
time-based safe word

481
00:14:13,040 --> 00:14:16,079
it really depends on your edr solution

482
00:14:14,880 --> 00:14:17,600
but you're just basically

483
00:14:16,079 --> 00:14:19,599
doing a temporary suppression for the

484
00:14:17,600 --> 00:14:20,959
rule set that you have now

485
00:14:19,600 --> 00:14:22,240
the edr isn't the only thing that was

486
00:14:20,959 --> 00:14:23,920
flipping out our network-based

487
00:14:22,240 --> 00:14:25,440
detections our windows event logging

488
00:14:23,920 --> 00:14:26,319
detections were also seeing this evil

489
00:14:25,440 --> 00:14:28,480
powershell and

490
00:14:26,320 --> 00:14:30,399
and losing their mind so we solved that

491
00:14:28,480 --> 00:14:32,079
through a couple of other calls we reach

492
00:14:30,399 --> 00:14:33,600
out to our password vault and get a set

493
00:14:32,079 --> 00:14:35,279
of temporary burner credentials and you

494
00:14:33,600 --> 00:14:36,880
really only need those to be checked out

495
00:14:35,279 --> 00:14:38,560
for a couple of minutes just long enough

496
00:14:36,880 --> 00:14:40,959
to authenticate to all 150

497
00:14:38,560 --> 00:14:41,680
000 endpoints spawn the orphan child

498
00:14:40,959 --> 00:14:43,680
process

499
00:14:41,680 --> 00:14:45,279
and then it's okay for those credentials

500
00:14:43,680 --> 00:14:46,800
to temporarily expire

501
00:14:45,279 --> 00:14:49,680
rotate because you don't need them

502
00:14:46,800 --> 00:14:51,279
anymore but we then use that user

503
00:14:49,680 --> 00:14:52,959
context for that temporary account to

504
00:14:51,279 --> 00:14:55,199
reach out to our source solution

505
00:14:52,959 --> 00:14:56,319
and say hey you're about to see some

506
00:14:55,199 --> 00:14:57,519
alerts come in

507
00:14:56,320 --> 00:14:59,600
they're going to come in under the user

508
00:14:57,519 --> 00:15:00,959
context of x whatever the temporary

509
00:14:59,600 --> 00:15:02,959
burner account was

510
00:15:00,959 --> 00:15:04,479
over the duration of these times and

511
00:15:02,959 --> 00:15:05,119
these are the possible alert types that

512
00:15:04,480 --> 00:15:07,199
you might see

513
00:15:05,120 --> 00:15:08,800
please suppress them it's just the hunt

514
00:15:07,199 --> 00:15:10,079
team doing our thing

515
00:15:08,800 --> 00:15:11,599
and our source solution will validate

516
00:15:10,079 --> 00:15:13,040
our api key that we're coming from an

517
00:15:11,600 --> 00:15:15,040
approved source etc

518
00:15:13,040 --> 00:15:16,880
and then assuming that everything passes

519
00:15:15,040 --> 00:15:18,399
it'll put in a temporary suppression for

520
00:15:16,880 --> 00:15:19,680
any of those other alerts that aren't

521
00:15:18,399 --> 00:15:21,360
generated by the er

522
00:15:19,680 --> 00:15:22,560
and finally we reach out via slack to

523
00:15:21,360 --> 00:15:23,839
the onship analyst to tell them what

524
00:15:22,560 --> 00:15:25,518
we're about to do so they don't get

525
00:15:23,839 --> 00:15:26,000
overwhelmed if they see any alerts that

526
00:15:25,519 --> 00:15:28,880
do slip

527
00:15:26,000 --> 00:15:30,240
through only at that point will we

528
00:15:28,880 --> 00:15:31,439
launch that kansas fire and forget

529
00:15:30,240 --> 00:15:34,000
module but this time

530
00:15:31,440 --> 00:15:35,759
it's pre-pended with that safe word so

531
00:15:34,000 --> 00:15:38,160
that the edr will see it

532
00:15:35,759 --> 00:15:39,759
but will safely ignore it as normal

533
00:15:38,160 --> 00:15:42,399
operations

534
00:15:39,759 --> 00:15:44,240
so by now we've achieved success and we

535
00:15:42,399 --> 00:15:46,240
have gone to ludicrous speed we're able

536
00:15:44,240 --> 00:15:47,199
to run kansa jobs regardless of how big

537
00:15:46,240 --> 00:15:49,040
the job is

538
00:15:47,199 --> 00:15:50,639
we can deploy it in under a couple of

539
00:15:49,040 --> 00:15:52,639
minutes across the entire environment

540
00:15:50,639 --> 00:15:54,880
150 000 systems

541
00:15:52,639 --> 00:15:55,759
but we have a new problem we're tipping

542
00:15:54,880 --> 00:15:57,759
over services

543
00:15:55,759 --> 00:15:59,120
in prod one of the things that we forgot

544
00:15:57,759 --> 00:16:01,040
to take into account

545
00:15:59,120 --> 00:16:02,480
is shared resource environments

546
00:16:01,040 --> 00:16:03,839
especially your virtual desktop

547
00:16:02,480 --> 00:16:04,800
infrastructure or virtual server

548
00:16:03,839 --> 00:16:06,399
infrastructure

549
00:16:04,800 --> 00:16:08,240
the way that those are allocated is they

550
00:16:06,399 --> 00:16:09,519
all share physical resources

551
00:16:08,240 --> 00:16:11,440
and they do that with the assumption

552
00:16:09,519 --> 00:16:12,720
that there's no way that every single

553
00:16:11,440 --> 00:16:14,880
virtual machine in the environment is

554
00:16:12,720 --> 00:16:17,920
going to need to use its disk i o

555
00:16:14,880 --> 00:16:18,480
or its ram or its cpu all at the same

556
00:16:17,920 --> 00:16:20,000
time

557
00:16:18,480 --> 00:16:21,920
so we'll dynamically provision it where

558
00:16:20,000 --> 00:16:24,320
it's needed on demand but you know what

559
00:16:21,920 --> 00:16:26,000
are the odds that'll happen all at once

560
00:16:24,320 --> 00:16:27,680
along comes our weaponized version of

561
00:16:26,000 --> 00:16:29,680
kansa which is basically a blue team

562
00:16:27,680 --> 00:16:32,079
botnet that's been sanctioned

563
00:16:29,680 --> 00:16:33,599
that tries to do all of those things all

564
00:16:32,079 --> 00:16:34,719
at once across every device in the

565
00:16:33,600 --> 00:16:36,880
environment and

566
00:16:34,720 --> 00:16:38,800
we may have on a couple of occasions uh

567
00:16:36,880 --> 00:16:40,399
you know bottlenecked disk io or

568
00:16:38,800 --> 00:16:42,880
you know spike to the cpu for every

569
00:16:40,399 --> 00:16:44,800
device uh this is really only a

570
00:16:42,880 --> 00:16:46,880
a problem in those shared resource

571
00:16:44,800 --> 00:16:47,920
environments uh fortunately the company

572
00:16:46,880 --> 00:16:49,439
that i work for

573
00:16:47,920 --> 00:16:51,279
takes a very uh forward forward-thinking

574
00:16:49,440 --> 00:16:52,880
approach to these outages

575
00:16:51,279 --> 00:16:54,480
and looks at them as an opportunity to

576
00:16:52,880 --> 00:16:55,519
improve our resiliency for our

577
00:16:54,480 --> 00:16:57,759
provisioning of those

578
00:16:55,519 --> 00:16:59,360
those resources but they also don't look

579
00:16:57,759 --> 00:17:00,240
kindly on repeat offenders so they

580
00:16:59,360 --> 00:17:02,480
expected us

581
00:17:00,240 --> 00:17:04,400
to make improvements so that our kansa

582
00:17:02,480 --> 00:17:06,400
modules our fire and forget modules

583
00:17:04,400 --> 00:17:07,760
could be safely deployed in a shared

584
00:17:06,400 --> 00:17:09,280
resource environment

585
00:17:07,760 --> 00:17:11,039
so we came up with several safeguards

586
00:17:09,280 --> 00:17:11,678
the first of which is a pre-launch

587
00:17:11,039 --> 00:17:13,919
checklist

588
00:17:11,679 --> 00:17:16,480
this one's really manual but we check

589
00:17:13,919 --> 00:17:17,600
for outages beforehand using the api

590
00:17:16,480 --> 00:17:18,720
and if there's already an existing

591
00:17:17,599 --> 00:17:19,520
outage we're not going to launch a

592
00:17:18,720 --> 00:17:21,679
kansas scan

593
00:17:19,520 --> 00:17:22,959
and further exacerbate problems by using

594
00:17:21,679 --> 00:17:24,799
more resources

595
00:17:22,959 --> 00:17:26,079
but more importantly we don't want to

596
00:17:24,799 --> 00:17:27,520
launch a kansas scan if there's already

597
00:17:26,079 --> 00:17:28,879
an outage because we don't want to get

598
00:17:27,520 --> 00:17:30,080
blamed for the outage that wasn't our

599
00:17:28,880 --> 00:17:31,679
fault everybody knows

600
00:17:30,080 --> 00:17:34,080
you tip over the environment once or

601
00:17:31,679 --> 00:17:35,520
twice with kansa and from that moment on

602
00:17:34,080 --> 00:17:36,879
every time there's an outage somebody's

603
00:17:35,520 --> 00:17:38,080
calling you saying hey are you running a

604
00:17:36,880 --> 00:17:40,240
kansas scan

605
00:17:38,080 --> 00:17:41,760
so after we've checked to make sure

606
00:17:40,240 --> 00:17:43,440
there's not already an outage going on

607
00:17:41,760 --> 00:17:46,160
we use an automated help desk

608
00:17:43,440 --> 00:17:48,080
notification via api rest api call to

609
00:17:46,160 --> 00:17:49,440
your trouble ticketing system and when

610
00:17:48,080 --> 00:17:50,639
that fire forget module lands on the

611
00:17:49,440 --> 00:17:52,240
endpoint it checks in

612
00:17:50,640 --> 00:17:53,919
and notifies the help desk saying i'm

613
00:17:52,240 --> 00:17:55,280
running a kansa job on this endpoint if

614
00:17:53,919 --> 00:17:56,559
you have any questions or concerns

615
00:17:55,280 --> 00:17:57,918
please reach out to the hunt team here's

616
00:17:56,559 --> 00:17:59,200
their contact info

617
00:17:57,919 --> 00:18:01,039
that way if the help desk starts to get

618
00:17:59,200 --> 00:18:02,000
flooded with reports of sluggishness or

619
00:18:01,039 --> 00:18:03,280
other problems

620
00:18:02,000 --> 00:18:05,280
they can look in their helpdesk system

621
00:18:03,280 --> 00:18:06,000
and immediately see that the hunt team

622
00:18:05,280 --> 00:18:07,840
might

623
00:18:06,000 --> 00:18:09,679
be involved and they can reach out to us

624
00:18:07,840 --> 00:18:11,120
to have a stop

625
00:18:09,679 --> 00:18:13,120
probably the most important safeguard

626
00:18:11,120 --> 00:18:16,320
that we put in is staggered execution

627
00:18:13,120 --> 00:18:17,360
we can uh we can configure in a a shared

628
00:18:16,320 --> 00:18:20,240
resource environment

629
00:18:17,360 --> 00:18:21,760
staggered delayed start basically we we

630
00:18:20,240 --> 00:18:23,600
give a max delay and say

631
00:18:21,760 --> 00:18:25,120
up to four hours and when that fire

632
00:18:23,600 --> 00:18:26,639
forget module lands on the endpoint it

633
00:18:25,120 --> 00:18:27,360
chooses a random number between zero

634
00:18:26,640 --> 00:18:29,280
seconds

635
00:18:27,360 --> 00:18:30,639
and four hours and goes to sleep for

636
00:18:29,280 --> 00:18:32,480
that random amount of time

637
00:18:30,640 --> 00:18:34,080
when that time has elapsed it wakes back

638
00:18:32,480 --> 00:18:35,600
up it

639
00:18:34,080 --> 00:18:37,199
executes its code to collect the

640
00:18:35,600 --> 00:18:38,240
artifacts sends those artifacts in and

641
00:18:37,200 --> 00:18:40,240
then exits

642
00:18:38,240 --> 00:18:41,760
and that's a way of where leveling those

643
00:18:40,240 --> 00:18:42,480
resources that are shared across the

644
00:18:41,760 --> 00:18:44,480
environment

645
00:18:42,480 --> 00:18:46,000
that's a huge improvement there we also

646
00:18:44,480 --> 00:18:47,520
implemented a cpu limiter so we can

647
00:18:46,000 --> 00:18:50,000
restrict the kansa module

648
00:18:47,520 --> 00:18:51,440
to just idle cpu cycles on each of the

649
00:18:50,000 --> 00:18:53,200
machines

650
00:18:51,440 --> 00:18:54,880
and the managers will love this but we

651
00:18:53,200 --> 00:18:55,760
also included performance metrics not

652
00:18:54,880 --> 00:18:57,440
for them

653
00:18:55,760 --> 00:18:58,879
but for us with every kansa fire and

654
00:18:57,440 --> 00:19:01,120
forget module we report the number of

655
00:18:58,880 --> 00:19:02,480
cpu cycles used the amount of memory the

656
00:19:01,120 --> 00:19:04,159
duration that the module took to

657
00:19:02,480 --> 00:19:05,600
complete and we have a dashboard and we

658
00:19:04,160 --> 00:19:07,039
can see if the trend lines start to

659
00:19:05,600 --> 00:19:07,760
spike we know there's a problem in the

660
00:19:07,039 --> 00:19:09,360
environment

661
00:19:07,760 --> 00:19:11,120
and that those shared resources might be

662
00:19:09,360 --> 00:19:12,159
bottlenecking and then we can we can do

663
00:19:11,120 --> 00:19:14,000
something about it

664
00:19:12,160 --> 00:19:15,280
which leads me to the next point uh

665
00:19:14,000 --> 00:19:16,960
adding an abort function

666
00:19:15,280 --> 00:19:18,720
i told you before these were orphaned

667
00:19:16,960 --> 00:19:20,799
child processes so it's not as simple as

668
00:19:18,720 --> 00:19:23,200
just hitting control c to stop it

669
00:19:20,799 --> 00:19:24,639
uh to stop the pain from happening so we

670
00:19:23,200 --> 00:19:25,840
created an abort function which is

671
00:19:24,640 --> 00:19:27,600
really just another kansa fire and

672
00:19:25,840 --> 00:19:30,159
forget module that goes out as a hunt

673
00:19:27,600 --> 00:19:31,678
hunter seeker killer of kansa modules

674
00:19:30,160 --> 00:19:33,120
and kills any running cans of modules in

675
00:19:31,679 --> 00:19:34,880
the environment

676
00:19:33,120 --> 00:19:37,280
and then finally a sort of dead man

677
00:19:34,880 --> 00:19:39,120
switch we set a a timer to say

678
00:19:37,280 --> 00:19:40,799
no kansa module for this particular type

679
00:19:39,120 --> 00:19:41,520
of module should run longer than x

680
00:19:40,799 --> 00:19:43,120
minutes

681
00:19:41,520 --> 00:19:44,799
and if that time elapses and the

682
00:19:43,120 --> 00:19:46,239
module's still running it'll terminate

683
00:19:44,799 --> 00:19:47,440
it on the endpoint without us having to

684
00:19:46,240 --> 00:19:50,480
do any

685
00:19:47,440 --> 00:19:51,440
uh having to do anything so now we've

686
00:19:50,480 --> 00:19:52,799
got safe fast

687
00:19:51,440 --> 00:19:54,160
scalable kinds of jobs that aren't

688
00:19:52,799 --> 00:19:56,000
firing alerts into the queue but we have

689
00:19:54,160 --> 00:19:57,760
a problem with our code management

690
00:19:56,000 --> 00:19:59,200
these individual modules are getting

691
00:19:57,760 --> 00:20:00,720
huge because they have all of those

692
00:19:59,200 --> 00:20:02,480
helper functions the autonomous

693
00:20:00,720 --> 00:20:05,120
functions the alerts the safety

694
00:20:02,480 --> 00:20:06,159
mechanisms the metrics and the module

695
00:20:05,120 --> 00:20:07,520
code

696
00:20:06,159 --> 00:20:08,799
making a change to one of those helper

697
00:20:07,520 --> 00:20:09,600
functions means we have to go modify

698
00:20:08,799 --> 00:20:12,559
every single

699
00:20:09,600 --> 00:20:13,600
module that we've created so we came up

700
00:20:12,559 --> 00:20:15,600
with just in time

701
00:20:13,600 --> 00:20:17,520
fire and forget modules what we did here

702
00:20:15,600 --> 00:20:18,480
is separate out the actual module code

703
00:20:17,520 --> 00:20:20,639
from all of those

704
00:20:18,480 --> 00:20:22,240
helper functions that are universal

705
00:20:20,640 --> 00:20:23,600
across all of our firing forget modules

706
00:20:22,240 --> 00:20:24,559
and we called those our fire and forget

707
00:20:23,600 --> 00:20:26,559
wrapper

708
00:20:24,559 --> 00:20:28,158
and now the module code is very simple

709
00:20:26,559 --> 00:20:30,320
again if you speak powershell

710
00:20:28,159 --> 00:20:31,679
this is a legitimate fire forget module

711
00:20:30,320 --> 00:20:33,120
it's basically a for loop that goes

712
00:20:31,679 --> 00:20:34,080
through the list of all the running

713
00:20:33,120 --> 00:20:35,760
processes

714
00:20:34,080 --> 00:20:37,918
enumerates all of the properties like

715
00:20:35,760 --> 00:20:39,440
the process owner the process path the

716
00:20:37,919 --> 00:20:41,200
binary name etc

717
00:20:39,440 --> 00:20:43,120
and adds them to a hash table and then

718
00:20:41,200 --> 00:20:43,760
uses the add result helper function to

719
00:20:43,120 --> 00:20:45,918
send those

720
00:20:43,760 --> 00:20:47,440
into our log management solution the

721
00:20:45,919 --> 00:20:48,880
problem is that the add result function

722
00:20:47,440 --> 00:20:50,480
that you see defined here doesn't

723
00:20:48,880 --> 00:20:51,600
actually exist it's not a real function

724
00:20:50,480 --> 00:20:52,960
that's one of those helpers that's

725
00:20:51,600 --> 00:20:54,799
defined in the wrapper

726
00:20:52,960 --> 00:20:56,320
so to get around that we created a fire

727
00:20:54,799 --> 00:20:57,280
forget development template that has a

728
00:20:56,320 --> 00:20:59,200
bunch of stub

729
00:20:57,280 --> 00:21:00,639
helper functions so you can test your

730
00:20:59,200 --> 00:21:02,559
code and develop it

731
00:21:00,640 --> 00:21:04,880
without having to have that full code

732
00:21:02,559 --> 00:21:06,320
base of over 700 lines of wrapper code

733
00:21:04,880 --> 00:21:08,480
here's a quick snapshot of what that

734
00:21:06,320 --> 00:21:11,360
stub helper function list looks like

735
00:21:08,480 --> 00:21:11,919
nothing special but now when you invoke

736
00:21:11,360 --> 00:21:13,199
kansa

737
00:21:11,919 --> 00:21:14,720
at launch time and you tell it you've

738
00:21:13,200 --> 00:21:16,159
got a fire and forget module the kansa

739
00:21:14,720 --> 00:21:17,600
framework will strip out all of that

740
00:21:16,159 --> 00:21:20,000
development feature

741
00:21:17,600 --> 00:21:21,918
and splice your module code into the

742
00:21:20,000 --> 00:21:23,360
wrapper dynamically as well as

743
00:21:21,919 --> 00:21:24,640
transcribing any of the runtime

744
00:21:23,360 --> 00:21:25,600
variables that you pass through at the

745
00:21:24,640 --> 00:21:27,600
command line

746
00:21:25,600 --> 00:21:29,280
into that module what you have here now

747
00:21:27,600 --> 00:21:30,158
is a dynamically generated fire and

748
00:21:29,280 --> 00:21:32,399
forget module

749
00:21:30,159 --> 00:21:35,280
or what we affectionately refer to as a

750
00:21:32,400 --> 00:21:35,280
defer spasm

751
00:21:35,919 --> 00:21:38,799
there's a few code snippets here i

752
00:21:37,440 --> 00:21:40,480
really don't have time to cover them

753
00:21:38,799 --> 00:21:42,480
like i said all of this code is already

754
00:21:40,480 --> 00:21:43,919
committed to the open source kansa repo

755
00:21:42,480 --> 00:21:45,440
in the main branch so you can go

756
00:21:43,919 --> 00:21:46,960
download it right now and these slides

757
00:21:45,440 --> 00:21:48,960
will be made available later

758
00:21:46,960 --> 00:21:50,240
this is a list of all of the helper

759
00:21:48,960 --> 00:21:52,320
functions that are included

760
00:21:50,240 --> 00:21:54,240
in the wrapper as well as all the

761
00:21:52,320 --> 00:21:55,840
metrics that we include in every single

762
00:21:54,240 --> 00:21:57,520
fire and forget job

763
00:21:55,840 --> 00:21:59,039
and all the safety mechanisms that are

764
00:21:57,520 --> 00:22:00,320
available every time we run a fire and

765
00:21:59,039 --> 00:22:01,760
forget job

766
00:22:00,320 --> 00:22:03,360
and then i've got some screenshots here

767
00:22:01,760 --> 00:22:05,760
of a sample launch sequence

768
00:22:03,360 --> 00:22:06,559
again not enough time to cover all of

769
00:22:05,760 --> 00:22:08,158
this here

770
00:22:06,559 --> 00:22:10,240
i do want to point out that you know we

771
00:22:08,159 --> 00:22:12,559
ran this job here that the kansa module

772
00:22:10,240 --> 00:22:14,080
runs in under two seconds per endpoint

773
00:22:12,559 --> 00:22:15,678
but we intentionally spaced it out over

774
00:22:14,080 --> 00:22:16,158
the space of an hour showing you that's

775
00:22:15,679 --> 00:22:18,400
that

776
00:22:16,159 --> 00:22:19,919
delayed execution feature to show how we

777
00:22:18,400 --> 00:22:22,000
could take a spike of

778
00:22:19,919 --> 00:22:23,520
operational resource requirement and we

779
00:22:22,000 --> 00:22:26,400
could flatten that curve out it seemed

780
00:22:23,520 --> 00:22:28,799
like a very timely reference

781
00:22:26,400 --> 00:22:30,400
finally push bin doesn't scale kansa has

782
00:22:28,799 --> 00:22:31,440
the ability for you to push binaries out

783
00:22:30,400 --> 00:22:32,880
that are dependencies that your

784
00:22:31,440 --> 00:22:34,799
powershell might use

785
00:22:32,880 --> 00:22:36,480
the problem is you have to push that out

786
00:22:34,799 --> 00:22:38,158
at launch and that slows down your

787
00:22:36,480 --> 00:22:38,799
deployment so we changed it into a pole

788
00:22:38,159 --> 00:22:40,480
bin

789
00:22:38,799 --> 00:22:42,480
and basically had the cans of fire and

790
00:22:40,480 --> 00:22:44,480
forget module reach out to a web server

791
00:22:42,480 --> 00:22:46,159
and pull those resources down

792
00:22:44,480 --> 00:22:47,840
dynamically and it can do it after it

793
00:22:46,159 --> 00:22:49,600
awakens from that random sleep timer so

794
00:22:47,840 --> 00:22:50,720
it does wear leveling on our rest api

795
00:22:49,600 --> 00:22:52,399
front end as well

796
00:22:50,720 --> 00:22:54,320
this is just a graphical representation

797
00:22:52,400 --> 00:22:56,000
of how that works i know i'm running

798
00:22:54,320 --> 00:22:57,360
short on time so i'll just skip through

799
00:22:56,000 --> 00:22:58,559
some of this other stuff here

800
00:22:57,360 --> 00:23:00,479
these are the new command line

801
00:22:58,559 --> 00:23:02,879
parameters you can use to leverage our

802
00:23:00,480 --> 00:23:04,559
enhancements that we've created

803
00:23:02,880 --> 00:23:06,559
and some additional functions and

804
00:23:04,559 --> 00:23:08,320
features that we've added to the project

805
00:23:06,559 --> 00:23:09,760
and one final limitation that we had to

806
00:23:08,320 --> 00:23:11,280
overcome is the launch command line

807
00:23:09,760 --> 00:23:13,280
getting too long

808
00:23:11,280 --> 00:23:15,200
this is a snapshot of what an actual

809
00:23:13,280 --> 00:23:16,720
kansa fire forget launch command line

810
00:23:15,200 --> 00:23:18,000
looks like because all of those safety

811
00:23:16,720 --> 00:23:19,520
mechanisms and everything

812
00:23:18,000 --> 00:23:21,440
are all dynamics we can configure them

813
00:23:19,520 --> 00:23:23,039
for each run the problem is that's a

814
00:23:21,440 --> 00:23:24,240
really long command line

815
00:23:23,039 --> 00:23:26,400
so there's several ways that you could

816
00:23:24,240 --> 00:23:28,640
solve that

817
00:23:26,400 --> 00:23:30,799
we we solved it here with a kansa

818
00:23:28,640 --> 00:23:31,679
launcher basically an interactive prompt

819
00:23:30,799 --> 00:23:33,679
that allows the

820
00:23:31,679 --> 00:23:35,440
hunt operator to dynamically choose

821
00:23:33,679 --> 00:23:36,799
their population target list to build

822
00:23:35,440 --> 00:23:37,520
all the parameters to set all the

823
00:23:36,799 --> 00:23:39,840
safeties

824
00:23:37,520 --> 00:23:41,120
and launch or abort as necessary as well

825
00:23:39,840 --> 00:23:42,240
as collecting telemetry and sending out

826
00:23:41,120 --> 00:23:44,158
notifications

827
00:23:42,240 --> 00:23:47,520
uh this part has not been open source

828
00:23:44,159 --> 00:23:47,520
yet we're working towards that

829
00:23:47,919 --> 00:23:51,360
here's some fire and forget models that

830
00:23:49,120 --> 00:23:52,959
we've created uh i i don't have a lot of

831
00:23:51,360 --> 00:23:54,320
time for case studies i wish i did

832
00:23:52,960 --> 00:23:55,679
there's a whole bunch here in the slide

833
00:23:54,320 --> 00:23:56,799
so i encourage you to read over them and

834
00:23:55,679 --> 00:23:59,120
ask me in the

835
00:23:56,799 --> 00:24:00,960
hallway channel in discord i will cover

836
00:23:59,120 --> 00:24:02,799
one case study though uh to give you an

837
00:24:00,960 --> 00:24:04,080
idea of how you can use kansa at scale

838
00:24:02,799 --> 00:24:07,200
for threat hunting

839
00:24:04,080 --> 00:24:09,360
so the hypothesis here is that

840
00:24:07,200 --> 00:24:10,799
system 32 is a great place for bad guys

841
00:24:09,360 --> 00:24:11,840
to hide their malware because nobody

842
00:24:10,799 --> 00:24:13,360
knows what's really supposed to be in

843
00:24:11,840 --> 00:24:15,360
there there's a lot of binaries and

844
00:24:13,360 --> 00:24:17,760
everybody's afraid of deleting anything

845
00:24:15,360 --> 00:24:19,360
so it's a perfect place to hide we have

846
00:24:17,760 --> 00:24:21,120
a kansa module that will go out and

847
00:24:19,360 --> 00:24:22,399
enumerate the entire contents of the

848
00:24:21,120 --> 00:24:24,158
system32 folder

849
00:24:22,400 --> 00:24:25,600
and get as much metadata as possible

850
00:24:24,159 --> 00:24:27,200
including file hashes

851
00:24:25,600 --> 00:24:29,199
digital signatures validating the

852
00:24:27,200 --> 00:24:30,880
digital signatures etc

853
00:24:29,200 --> 00:24:32,400
and then bring all that back into our

854
00:24:30,880 --> 00:24:34,320
elk stack and from there

855
00:24:32,400 --> 00:24:36,400
we can use least frequency of occurrence

856
00:24:34,320 --> 00:24:38,000
to pivot through to look for outliers

857
00:24:36,400 --> 00:24:39,760
weird file names that aren't present

858
00:24:38,000 --> 00:24:41,679
everywhere weird hashes etc

859
00:24:39,760 --> 00:24:43,520
one such output that we ran into on one

860
00:24:41,679 --> 00:24:44,240
hunt was that six machines in our

861
00:24:43,520 --> 00:24:46,080
environment

862
00:24:44,240 --> 00:24:47,279
had a copy of the utilman executable

863
00:24:46,080 --> 00:24:48,240
which is supposed to be present in

864
00:24:47,279 --> 00:24:50,080
system 32

865
00:24:48,240 --> 00:24:51,520
that had a different hash than the hash

866
00:24:50,080 --> 00:24:52,720
present in the rest of our environment

867
00:24:51,520 --> 00:24:53,600
for those of you who are veterans in the

868
00:24:52,720 --> 00:24:55,440
audience you know

869
00:24:53,600 --> 00:24:57,439
this is a classic windows accessibility

870
00:24:55,440 --> 00:24:59,360
hijack where you can remote into the

871
00:24:57,440 --> 00:25:01,679
machine and hit the windows u

872
00:24:59,360 --> 00:25:03,678
shortcut key and it will pop a system

873
00:25:01,679 --> 00:25:05,360
shell now unfortunately for us this was

874
00:25:03,679 --> 00:25:06,960
not done out of malice it was

875
00:25:05,360 --> 00:25:08,959
some i.t administrators that were trying

876
00:25:06,960 --> 00:25:10,799
to regain access to a system that they

877
00:25:08,960 --> 00:25:12,159
they had some troubles with

878
00:25:10,799 --> 00:25:14,000
so the output here was really some

879
00:25:12,159 --> 00:25:15,360
remedial training and and getting some

880
00:25:14,000 --> 00:25:18,080
new detections in place

881
00:25:15,360 --> 00:25:19,600
but there's countless examples of this

882
00:25:18,080 --> 00:25:21,120
uh where you can use

883
00:25:19,600 --> 00:25:22,480
kansa at scale to collect millions and

884
00:25:21,120 --> 00:25:24,959
millions of records and then be able to

885
00:25:22,480 --> 00:25:26,240
pivot through those to find the outliers

886
00:25:24,960 --> 00:25:27,440
unfortunately it looks like i'm almost

887
00:25:26,240 --> 00:25:28,559
out of time i might have time for a

888
00:25:27,440 --> 00:25:29,760
couple questions i know that we'll be

889
00:25:28,559 --> 00:25:31,760
running into a break

890
00:25:29,760 --> 00:25:33,360
uh so i'll just i'll zip through to the

891
00:25:31,760 --> 00:25:35,440
end and if you have questions

892
00:25:33,360 --> 00:25:37,039
please definitely hit me up in the

893
00:25:35,440 --> 00:25:38,240
discord channel that i have out there

894
00:25:37,039 --> 00:25:40,879
the hallway chat

895
00:25:38,240 --> 00:25:43,840
i would love to talk more about this oh

896
00:25:40,880 --> 00:25:43,840
let's go back one

897
00:25:44,240 --> 00:25:49,279
all right uh heather were there any

898
00:25:46,320 --> 00:25:49,279
questions that came up

899
00:25:49,360 --> 00:25:53,279
there are a few so there's one that just

900
00:25:52,000 --> 00:25:55,360
came in are there any

901
00:25:53,279 --> 00:25:57,279
common threats that are highlighted when

902
00:25:55,360 --> 00:25:59,120
using this method

903
00:25:57,279 --> 00:26:00,799
yeah so that's a great question we try

904
00:25:59,120 --> 00:26:02,158
to take the approach of

905
00:26:00,799 --> 00:26:03,520
our threat intelligence team will

906
00:26:02,159 --> 00:26:04,880
highlight the threats that are targeting

907
00:26:03,520 --> 00:26:06,480
us and then we look at their tactics

908
00:26:04,880 --> 00:26:08,080
techniques and procedures based off of

909
00:26:06,480 --> 00:26:09,840
like the mitre attack framework

910
00:26:08,080 --> 00:26:11,840
to see what threats that they use what

911
00:26:09,840 --> 00:26:13,678
tactics and techniques they use

912
00:26:11,840 --> 00:26:15,279
and we'll go out and look for those we

913
00:26:13,679 --> 00:26:16,960
can write a custom kansa module to look

914
00:26:15,279 --> 00:26:19,520
for those particular tactics so

915
00:26:16,960 --> 00:26:20,480
a great example uh there was a threat

916
00:26:19,520 --> 00:26:22,480
actor that

917
00:26:20,480 --> 00:26:23,679
leveraged the print monitor as a

918
00:26:22,480 --> 00:26:25,120
persistence mechanism

919
00:26:23,679 --> 00:26:27,039
so we wrote a kansa module that'll

920
00:26:25,120 --> 00:26:27,840
enumerate all print monitors across the

921
00:26:27,039 --> 00:26:30,320
environment

922
00:26:27,840 --> 00:26:31,360
and then it'll find those dlls on disk

923
00:26:30,320 --> 00:26:33,200
it'll hash them

924
00:26:31,360 --> 00:26:34,879
it'll enrich that by bumping those

925
00:26:33,200 --> 00:26:35,520
hashes up against the file reputation

926
00:26:34,880 --> 00:26:37,279
service

927
00:26:35,520 --> 00:26:39,200
and then any of those files that the

928
00:26:37,279 --> 00:26:40,480
hash is unknown we can then collect

929
00:26:39,200 --> 00:26:42,799
those files run them through our

930
00:26:40,480 --> 00:26:44,640
analysis pipeline to get a disposition

931
00:26:42,799 --> 00:26:47,600
so yeah yeah you can definitely target

932
00:26:44,640 --> 00:26:49,600
it to a specific threat actor technique

933
00:26:47,600 --> 00:26:52,480
okay here's another one how's running

934
00:26:49,600 --> 00:26:53,678
kansa through firewalls at scale

935
00:26:52,480 --> 00:26:55,200
yeah that's a great question you

936
00:26:53,679 --> 00:26:56,799
definitely need to have the firewall

937
00:26:55,200 --> 00:26:57,919
team on your side we're fortunate that

938
00:26:56,799 --> 00:27:00,320
at usaa

939
00:26:57,919 --> 00:27:01,279
uh we sit in the same same room as the

940
00:27:00,320 --> 00:27:02,559
firewall team

941
00:27:01,279 --> 00:27:03,919
and we have to have a very close

942
00:27:02,559 --> 00:27:06,158
partnership with them because our

943
00:27:03,919 --> 00:27:08,000
network is very highly segmented and so

944
00:27:06,159 --> 00:27:09,200
getting kansa capability

945
00:27:08,000 --> 00:27:10,960
you know to reach through all of those

946
00:27:09,200 --> 00:27:11,840
firewalls down to the endpoint is is

947
00:27:10,960 --> 00:27:13,679
difficult

948
00:27:11,840 --> 00:27:14,959
uh really you know you want to restrict

949
00:27:13,679 --> 00:27:17,600
that as much as possible

950
00:27:14,960 --> 00:27:18,640
we restricted the access for 5985 or

951
00:27:17,600 --> 00:27:20,320
5986

952
00:27:18,640 --> 00:27:22,080
from our hunt servers those distributed

953
00:27:20,320 --> 00:27:23,200
servers that i mentioned very early on

954
00:27:22,080 --> 00:27:24,879
so we really only allow that

955
00:27:23,200 --> 00:27:26,880
connectivity from those servers and we

956
00:27:24,880 --> 00:27:29,200
only allow connectivity to those servers

957
00:27:26,880 --> 00:27:30,880
from our sock subnet so we're locking

958
00:27:29,200 --> 00:27:32,480
down the firewalls to only allow kansa

959
00:27:30,880 --> 00:27:34,000
to be run from the kansas servers

960
00:27:32,480 --> 00:27:37,279
against the environment

961
00:27:34,000 --> 00:27:38,320
and not the other way around here's a

962
00:27:37,279 --> 00:27:40,159
fun one

963
00:27:38,320 --> 00:27:42,879
do you have the acronym breakdown for

964
00:27:40,159 --> 00:27:45,039
defer spasm

965
00:27:42,880 --> 00:27:46,480
you could you can go back to that slide

966
00:27:45,039 --> 00:27:48,158
but remember it just starts off with a

967
00:27:46,480 --> 00:27:49,600
dynamically generated fire and forget

968
00:27:48,159 --> 00:27:52,720
module that has all the integrated

969
00:27:49,600 --> 00:27:54,000
helper functions and everything else

970
00:27:52,720 --> 00:27:56,320
all right let's see i think we have time

971
00:27:54,000 --> 00:27:58,159
for one more do your modules drop any

972
00:27:56,320 --> 00:28:00,480
data on the endpoint

973
00:27:58,159 --> 00:28:01,919
we strive to avoid making any changes to

974
00:28:00,480 --> 00:28:03,520
the endpoint to preserve the forensic

975
00:28:01,919 --> 00:28:05,440
integrity of the endpoint so

976
00:28:03,520 --> 00:28:07,200
by default we try to stay memory

977
00:28:05,440 --> 00:28:07,760
resonant only we're like memory resident

978
00:28:07,200 --> 00:28:09,440
malware

979
00:28:07,760 --> 00:28:10,879
a botnet that if you reboot the computer

980
00:28:09,440 --> 00:28:14,559
we're gone

981
00:28:10,880 --> 00:28:16,000
but if necessary we can drop a binary to

982
00:28:14,559 --> 00:28:17,200
the endpoint on the file system to

983
00:28:16,000 --> 00:28:18,799
leverage that binary

984
00:28:17,200 --> 00:28:20,559
you know great example is there's some

985
00:28:18,799 --> 00:28:22,320
some great binaries out there from sam's

986
00:28:20,559 --> 00:28:24,158
mentor sam's faculty like registry

987
00:28:22,320 --> 00:28:25,520
explorer and the re command

988
00:28:24,159 --> 00:28:27,279
that allow you to quickly scrape through

989
00:28:25,520 --> 00:28:29,679
the windows registry to look for large

990
00:28:27,279 --> 00:28:30,880
registry keys or base64 encoded registry

991
00:28:29,679 --> 00:28:32,720
keys and it does it much more

992
00:28:30,880 --> 00:28:34,159
efficiently than powershell does

993
00:28:32,720 --> 00:28:36,720
so yeah we have the opportunity with

994
00:28:34,159 --> 00:28:38,399
those that staging server to download

995
00:28:36,720 --> 00:28:40,880
that file temporarily it will touch

996
00:28:38,399 --> 00:28:42,639
disk run that job and then clean up

997
00:28:40,880 --> 00:28:44,320
after ourselves after the fact but

998
00:28:42,640 --> 00:28:47,440
most of our cans of modules stay memory

999
00:28:44,320 --> 00:28:50,000
resident only and don't touch disk

1000
00:28:47,440 --> 00:28:50,720
fantastic if you have any more questions

1001
00:28:50,000 --> 00:28:53,039
for john

1002
00:28:50,720 --> 00:28:54,559
please post them in his track he will be

1003
00:28:53,039 --> 00:28:56,000
in the hallway

1004
00:28:54,559 --> 00:28:57,678
technically i guess all day today and

1005
00:28:56,000 --> 00:28:58,080
tomorrow so you can keep asking

1006
00:28:57,679 --> 00:29:00,559
questions

1007
00:28:58,080 --> 00:29:02,320
as they come up um thank you for the

1008
00:29:00,559 --> 00:29:04,080
amazing references to

1009
00:29:02,320 --> 00:29:06,000
all the tv shows and movies from my

1010
00:29:04,080 --> 00:29:08,559
childhood

1011
00:29:06,000 --> 00:29:09,200
much appreciated fantastic talk thank

1012
00:29:08,559 --> 00:29:13,840
you

1013
00:29:09,200 --> 00:29:13,840
thank you heather

1014
00:29:24,000 --> 00:29:26,080
you

