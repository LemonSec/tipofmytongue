1
00:00:01,040 --> 00:00:07,429
[Music]

2
00:00:12,559 --> 00:00:15,920
next

3
00:00:13,200 --> 00:00:17,359
we have moritz and willie and they are

4
00:00:15,920 --> 00:00:19,600
going to

5
00:00:17,359 --> 00:00:21,119
be talking to us about malware

6
00:00:19,600 --> 00:00:22,960
capabilities

7
00:00:21,119 --> 00:00:24,240
so i will let you two kick it off and if

8
00:00:22,960 --> 00:00:26,880
you're new to track

9
00:00:24,240 --> 00:00:27,439
2 i will try to pin all the questions

10
00:00:26,880 --> 00:00:29,439
and such

11
00:00:27,439 --> 00:00:31,039
to your specific channel but more

12
00:00:29,439 --> 00:00:33,440
importantly in track two so it's easy

13
00:00:31,039 --> 00:00:35,520
for you to find them

14
00:00:33,440 --> 00:00:38,239
awesome well thanks heather and we are

15
00:00:35,520 --> 00:00:39,600
just so excited to be here at this event

16
00:00:38,239 --> 00:00:41,040
i mean the fact that we're able to host

17
00:00:39,600 --> 00:00:42,320
this virtually when we're not able to

18
00:00:41,040 --> 00:00:43,600
come together in person

19
00:00:42,320 --> 00:00:45,680
uh so cool the way we're sharing

20
00:00:43,600 --> 00:00:48,640
information here

21
00:00:45,680 --> 00:00:49,200
so i'm actually joined with my colleague

22
00:00:48,640 --> 00:00:52,239
sorry

23
00:00:49,200 --> 00:00:52,239
mouse stopped working

24
00:00:53,760 --> 00:00:58,879
let's see there we go again all right so

25
00:00:57,360 --> 00:01:01,680
here we are and i'm joined with

26
00:00:58,879 --> 00:01:02,718
my colleague moritz he's in germany i'm

27
00:01:01,680 --> 00:01:05,760
in denver

28
00:01:02,719 --> 00:01:08,640
and virtually we're both in that discord

29
00:01:05,760 --> 00:01:09,280
channel valentin robbe so as you have

30
00:01:08,640 --> 00:01:12,400
questions

31
00:01:09,280 --> 00:01:14,479
during our presentation even afterwards

32
00:01:12,400 --> 00:01:16,560
questions comments concerns ideas any of

33
00:01:14,479 --> 00:01:20,479
those things shoot on over there

34
00:01:16,560 --> 00:01:24,240
and we'll connect directly with you

35
00:01:20,479 --> 00:01:25,759
all right so i know why you're here you

36
00:01:24,240 --> 00:01:28,960
know why you're here

37
00:01:25,759 --> 00:01:30,000
you're here to learn about kappa kappa

38
00:01:28,960 --> 00:01:33,839
is our new

39
00:01:30,000 --> 00:01:36,240
open source tool that analyzes a program

40
00:01:33,840 --> 00:01:38,000
and identifies the things that it thinks

41
00:01:36,240 --> 00:01:41,520
that the program could do

42
00:01:38,000 --> 00:01:42,720
we call these capabilities and now copy

43
00:01:41,520 --> 00:01:44,798
uses rules

44
00:01:42,720 --> 00:01:46,479
that are written by experts to recognize

45
00:01:44,799 --> 00:01:49,200
these capabilities

46
00:01:46,479 --> 00:01:50,320
that means kappa is expert driven it's

47
00:01:49,200 --> 00:01:52,320
not an ai system

48
00:01:50,320 --> 00:01:54,240
it's not a machine learning system it's

49
00:01:52,320 --> 00:01:56,158
expert driven by these rules and so it

50
00:01:54,240 --> 00:01:58,240
can be easily explained to other human

51
00:01:56,159 --> 00:02:00,880
beings the results

52
00:01:58,240 --> 00:02:02,079
it also has an extensible rule set which

53
00:02:00,880 --> 00:02:05,679
means that kappa

54
00:02:02,079 --> 00:02:07,600
is always learning new capabilities new

55
00:02:05,680 --> 00:02:10,160
things that might see in malware

56
00:02:07,600 --> 00:02:10,799
also you can learn too because these

57
00:02:10,160 --> 00:02:12,959
rules

58
00:02:10,800 --> 00:02:15,120
we've designed them in a way to be

59
00:02:12,959 --> 00:02:16,800
easily digestible by a human

60
00:02:15,120 --> 00:02:19,599
so if you're not quite sure how

61
00:02:16,800 --> 00:02:23,120
processed doppelganging works to

62
00:02:19,599 --> 00:02:25,040
effect process injection you can take a

63
00:02:23,120 --> 00:02:27,040
peek at that rule and understand

64
00:02:25,040 --> 00:02:28,720
oh these are the key features that i

65
00:02:27,040 --> 00:02:31,599
would need to notice

66
00:02:28,720 --> 00:02:33,120
while inspecting that program so i know

67
00:02:31,599 --> 00:02:34,319
there's a lot of kind of intrepid

68
00:02:33,120 --> 00:02:36,160
investigators

69
00:02:34,319 --> 00:02:37,920
here with us you're probably wondering

70
00:02:36,160 --> 00:02:40,640
okay i understand i understand let's see

71
00:02:37,920 --> 00:02:42,000
what it looks like in practice so we're

72
00:02:40,640 --> 00:02:43,920
just going to jump right in

73
00:02:42,000 --> 00:02:45,440
we're going to take a pop culture

74
00:02:43,920 --> 00:02:47,359
malware sample

75
00:02:45,440 --> 00:02:49,120
wannacry we saw that spread around the

76
00:02:47,360 --> 00:02:50,959
world a couple of years back

77
00:02:49,120 --> 00:02:52,800
and we're just going to toss it at kappa

78
00:02:50,959 --> 00:02:55,760
and see what happens

79
00:02:52,800 --> 00:02:57,120
now kappa is a command line tool which

80
00:02:55,760 --> 00:02:59,120
means we're going to invoke it

81
00:02:57,120 --> 00:03:00,400
from the command line the terminal and

82
00:02:59,120 --> 00:03:02,879
we'll just run kappa

83
00:03:00,400 --> 00:03:05,040
point it to our program we'll see that

84
00:03:02,879 --> 00:03:06,640
it analyzes for a couple seconds

85
00:03:05,040 --> 00:03:08,400
it's processing doing a lot of really

86
00:03:06,640 --> 00:03:09,920
hard work and then it will display those

87
00:03:08,400 --> 00:03:12,080
results to us

88
00:03:09,920 --> 00:03:13,839
let's dig in to what these results

89
00:03:12,080 --> 00:03:16,959
actually look like

90
00:03:13,840 --> 00:03:19,680
the primary table has two big

91
00:03:16,959 --> 00:03:21,840
columns and on the left hand side there

92
00:03:19,680 --> 00:03:23,120
these are the capabilities that kappa

93
00:03:21,840 --> 00:03:25,920
has identified

94
00:03:23,120 --> 00:03:26,560
in that wannacry sample note that

95
00:03:25,920 --> 00:03:29,440
they're nice

96
00:03:26,560 --> 00:03:31,360
human readable kind of fragments of

97
00:03:29,440 --> 00:03:34,959
sentences that can help you interpret

98
00:03:31,360 --> 00:03:36,799
what this program might do and as i read

99
00:03:34,959 --> 00:03:38,239
through them i see that this program

100
00:03:36,799 --> 00:03:41,360
might be able to

101
00:03:38,239 --> 00:03:43,440
send and receive data connect to a url

102
00:03:41,360 --> 00:03:45,519
with an http request

103
00:03:43,440 --> 00:03:46,720
i see that it can manipulate files on

104
00:03:45,519 --> 00:03:50,000
the file system

105
00:03:46,720 --> 00:03:51,280
and persist via windows service and as i

106
00:03:50,000 --> 00:03:52,080
read through those names i'm also

107
00:03:51,280 --> 00:03:54,000
noticing

108
00:03:52,080 --> 00:03:55,200
that they're kind of sorted in such a

109
00:03:54,000 --> 00:03:57,200
way that like things

110
00:03:55,200 --> 00:03:59,359
show up together and that makes it

111
00:03:57,200 --> 00:04:03,599
easier for me to kind of interpret

112
00:03:59,360 --> 00:04:05,040
this kind of page worth of information

113
00:04:03,599 --> 00:04:07,439
now another thing that's important to

114
00:04:05,040 --> 00:04:08,798
realize as we're taking a peek at this

115
00:04:07,439 --> 00:04:11,200
output from kappa

116
00:04:08,799 --> 00:04:12,959
is that kappa isn't telling us whether

117
00:04:11,200 --> 00:04:15,040
or not it's looking at malware

118
00:04:12,959 --> 00:04:16,720
that's not the purpose of the tool

119
00:04:15,040 --> 00:04:19,279
instead what kappa does

120
00:04:16,720 --> 00:04:21,040
is it gives us a description of the

121
00:04:19,279 --> 00:04:23,440
program that we're inspecting

122
00:04:21,040 --> 00:04:25,520
and we leave it up to you to decide what

123
00:04:23,440 --> 00:04:27,440
that means in the context of your

124
00:04:25,520 --> 00:04:29,919
investigation

125
00:04:27,440 --> 00:04:30,719
why i found this to be sometimes more

126
00:04:29,919 --> 00:04:31,919
useful

127
00:04:30,720 --> 00:04:34,479
is when i'm dealing with an

128
00:04:31,919 --> 00:04:37,359
investigation that deals with gray wear

129
00:04:34,479 --> 00:04:39,840
for example a remote administration tool

130
00:04:37,360 --> 00:04:41,759
like dameware or teamviewer

131
00:04:39,840 --> 00:04:42,880
may be legitimately used by a system

132
00:04:41,759 --> 00:04:45,280
administrator

133
00:04:42,880 --> 00:04:47,360
to remotely connect to a computer but

134
00:04:45,280 --> 00:04:50,159
i've also been a part of investigations

135
00:04:47,360 --> 00:04:52,080
where attackers use the same software

136
00:04:50,160 --> 00:04:54,240
maliciously

137
00:04:52,080 --> 00:04:55,599
so in that's why this is where kappa

138
00:04:54,240 --> 00:04:56,080
really excels because it's not going to

139
00:04:55,600 --> 00:04:58,080
tell you

140
00:04:56,080 --> 00:04:59,919
dameware is or is not malware it's going

141
00:04:58,080 --> 00:05:02,560
to tell you dameware is

142
00:04:59,919 --> 00:05:05,440
a remote administration tool does that

143
00:05:02,560 --> 00:05:07,600
fit with your investigation

144
00:05:05,440 --> 00:05:09,680
so as we return our attention to the

145
00:05:07,600 --> 00:05:13,280
capabilities identified

146
00:05:09,680 --> 00:05:14,800
by kappa we we find that they do support

147
00:05:13,280 --> 00:05:16,799
our current understanding of the

148
00:05:14,800 --> 00:05:19,039
wannacry worm

149
00:05:16,800 --> 00:05:19,840
we see that it has it has a resource

150
00:05:19,039 --> 00:05:22,080
section

151
00:05:19,840 --> 00:05:24,880
and we see that it contains the ability

152
00:05:22,080 --> 00:05:25,599
to extract data including an embedded pe

153
00:05:24,880 --> 00:05:27,840
file

154
00:05:25,600 --> 00:05:29,280
and install it for persistence via a

155
00:05:27,840 --> 00:05:32,000
windows service

156
00:05:29,280 --> 00:05:32,559
that's exactly in line with what i

157
00:05:32,000 --> 00:05:35,600
remember

158
00:05:32,560 --> 00:05:36,000
about wannacry i also remember another

159
00:05:35,600 --> 00:05:37,600
thing

160
00:05:36,000 --> 00:05:39,280
about wannacry it always jumps to the

161
00:05:37,600 --> 00:05:40,800
forefront of my mind and that's that

162
00:05:39,280 --> 00:05:43,840
kill switch

163
00:05:40,800 --> 00:05:46,080
right wannacry had when it first ran

164
00:05:43,840 --> 00:05:47,758
it would see can i connect to this

165
00:05:46,080 --> 00:05:51,120
domain and sure enough

166
00:05:47,759 --> 00:05:54,160
cap is able to identify that um

167
00:05:51,120 --> 00:05:56,479
this binary connects to a url

168
00:05:54,160 --> 00:05:57,680
now if i'm not quite sure that i trust

169
00:05:56,479 --> 00:06:02,479
kappa here

170
00:05:57,680 --> 00:06:05,280
i can say hey please show me your work

171
00:06:02,479 --> 00:06:06,159
and kappa will not only show us the

172
00:06:05,280 --> 00:06:08,559
rules that match

173
00:06:06,160 --> 00:06:09,759
the capabilities if it's detected but it

174
00:06:08,560 --> 00:06:13,039
will also show us

175
00:06:09,759 --> 00:06:14,240
why it identified a capability and we

176
00:06:13,039 --> 00:06:16,318
see here

177
00:06:14,240 --> 00:06:17,680
that kappa identified the capability

178
00:06:16,319 --> 00:06:20,240
connecting to a url

179
00:06:17,680 --> 00:06:21,360
because of the sequence of api calls

180
00:06:20,240 --> 00:06:24,240
internet open

181
00:06:21,360 --> 00:06:26,000
internet open url internet close handle

182
00:06:24,240 --> 00:06:28,319
that's just what i would expect

183
00:06:26,000 --> 00:06:30,240
and furthermore it will tell us exactly

184
00:06:28,319 --> 00:06:33,600
where in the program

185
00:06:30,240 --> 00:06:35,680
this evidence can be found so for me

186
00:06:33,600 --> 00:06:37,600
as a reverse engineer this is critical

187
00:06:35,680 --> 00:06:39,919
information because now i can go and i

188
00:06:37,600 --> 00:06:43,120
can navigate to that part of the program

189
00:06:39,919 --> 00:06:45,440
inspect it myself and verify that

190
00:06:43,120 --> 00:06:47,199
cap is working correctly it's not a

191
00:06:45,440 --> 00:06:50,240
magic black box

192
00:06:47,199 --> 00:06:51,919
and so when i open this in ida pro and i

193
00:06:50,240 --> 00:06:54,560
review the disassembly

194
00:06:51,919 --> 00:06:56,240
what i see is a textbook example of

195
00:06:54,560 --> 00:06:58,800
connecting to our url

196
00:06:56,240 --> 00:07:00,160
using the microsoft api so that's

197
00:06:58,800 --> 00:07:02,400
exactly

198
00:07:00,160 --> 00:07:03,440
exactly what capital was saying and

199
00:07:02,400 --> 00:07:05,198
furthermore

200
00:07:03,440 --> 00:07:07,680
this leads us to the part of the binary

201
00:07:05,199 --> 00:07:10,880
where we actually see the url

202
00:07:07,680 --> 00:07:13,840
that served as that kill switch

203
00:07:10,880 --> 00:07:15,120
so in just a couple moments we run kappa

204
00:07:13,840 --> 00:07:16,799
we jump to the interesting part of the

205
00:07:15,120 --> 00:07:19,440
binary and we can extract

206
00:07:16,800 --> 00:07:21,039
this ioc and start to feed that back

207
00:07:19,440 --> 00:07:24,560
into our investigation

208
00:07:21,039 --> 00:07:26,318
really neat stuff so on a whole i found

209
00:07:24,560 --> 00:07:27,680
kappa to be really useful

210
00:07:26,319 --> 00:07:30,319
over the past year as we've been

211
00:07:27,680 --> 00:07:32,560
developing this tool

212
00:07:30,319 --> 00:07:35,039
and the key reason why i like it is that

213
00:07:32,560 --> 00:07:36,639
it helps me make a decision

214
00:07:35,039 --> 00:07:38,159
during an investigation it's not just

215
00:07:36,639 --> 00:07:40,160
saying this is good or bad it's

216
00:07:38,160 --> 00:07:41,360
telling me what i need to care about in

217
00:07:40,160 --> 00:07:43,280
the binary

218
00:07:41,360 --> 00:07:44,720
i mean just think about it if you're

219
00:07:43,280 --> 00:07:46,559
doing an investigation

220
00:07:44,720 --> 00:07:48,000
dealing with ransomware that your

221
00:07:46,560 --> 00:07:49,520
response is going to be different

222
00:07:48,000 --> 00:07:51,440
than dealing with a back door that

223
00:07:49,520 --> 00:07:52,960
communicates via http

224
00:07:51,440 --> 00:07:54,560
with ransomware you're probably going to

225
00:07:52,960 --> 00:07:55,919
reach for those backups and start

226
00:07:54,560 --> 00:07:59,199
restoring systems

227
00:07:55,919 --> 00:08:01,359
you have backups right but with an http

228
00:07:59,199 --> 00:08:03,360
backdoor once you realize this you may

229
00:08:01,360 --> 00:08:05,680
pivot to something like the proxy logs

230
00:08:03,360 --> 00:08:07,199
as an additional source of information

231
00:08:05,680 --> 00:08:10,000
to figure out what the attacker was

232
00:08:07,199 --> 00:08:11,680
doing kappa will help you with this

233
00:08:10,000 --> 00:08:13,919
because it helps because it will let you

234
00:08:11,680 --> 00:08:16,720
know whether it might be ransomware or

235
00:08:13,919 --> 00:08:20,000
an http backdoor

236
00:08:16,720 --> 00:08:22,879
now i wrote major parts of

237
00:08:20,000 --> 00:08:25,120
kappa i know how it works i know where

238
00:08:22,879 --> 00:08:27,440
the warts are inside of the source code

239
00:08:25,120 --> 00:08:29,840
and yet despite that i'm constantly

240
00:08:27,440 --> 00:08:32,640
wowed by how well the tool works

241
00:08:29,840 --> 00:08:34,399
it continued like i'm not joking here

242
00:08:32,640 --> 00:08:35,919
i'm really surprised how well it detects

243
00:08:34,399 --> 00:08:38,880
on these capabilities

244
00:08:35,919 --> 00:08:40,399
so i hope you find the same thing but

245
00:08:38,880 --> 00:08:42,958
now that we know a bit about

246
00:08:40,399 --> 00:08:44,399
what it looks like into when we run it

247
00:08:42,958 --> 00:08:46,160
and some of the outputs

248
00:08:44,399 --> 00:08:49,040
let's take a peek and let me tell you a

249
00:08:46,160 --> 00:08:51,839
bit about how it came about

250
00:08:49,040 --> 00:08:54,319
now me and my team the flare team we're

251
00:08:51,839 --> 00:08:56,959
reverse engineering in intel shop within

252
00:08:54,320 --> 00:08:58,560
mandiant we spend a lot of time triaging

253
00:08:56,959 --> 00:08:59,839
unknown binaries

254
00:08:58,560 --> 00:09:01,839
these might be in support of an

255
00:08:59,839 --> 00:09:04,000
investigation or maybe when we're

256
00:09:01,839 --> 00:09:05,920
hunting across virustotal for example

257
00:09:04,000 --> 00:09:07,120
looking for interesting binaries

258
00:09:05,920 --> 00:09:09,599
and usually what we need to do is

259
00:09:07,120 --> 00:09:12,080
understand is this program that we found

260
00:09:09,600 --> 00:09:13,839
does it explain some sort of activity

261
00:09:12,080 --> 00:09:15,279
that we we know something about you know

262
00:09:13,839 --> 00:09:16,080
the attacker logged in and they did this

263
00:09:15,279 --> 00:09:18,720
thing

264
00:09:16,080 --> 00:09:19,920
was that affected by this program that

265
00:09:18,720 --> 00:09:22,240
we found

266
00:09:19,920 --> 00:09:24,240
and so i'll use tools like ida pro and

267
00:09:22,240 --> 00:09:26,560
strings and cis internals and pe

268
00:09:24,240 --> 00:09:28,959
parsers and i'll and i'll inspect the

269
00:09:26,560 --> 00:09:31,040
bina i'll extract information

270
00:09:28,959 --> 00:09:32,959
and that helps me make conclusions you

271
00:09:31,040 --> 00:09:35,439
know for example with strings

272
00:09:32,959 --> 00:09:37,279
i'll run this tool and it will extract

273
00:09:35,440 --> 00:09:38,080
all those human readable bits of

274
00:09:37,279 --> 00:09:41,120
information

275
00:09:38,080 --> 00:09:43,120
from the binary file and

276
00:09:41,120 --> 00:09:44,480
i use this because in my experience i

277
00:09:43,120 --> 00:09:47,279
found that a lot of times

278
00:09:44,480 --> 00:09:48,959
malware configuration data is stored in

279
00:09:47,279 --> 00:09:52,560
this human readable

280
00:09:48,959 --> 00:09:54,560
part of the the binary program and so if

281
00:09:52,560 --> 00:09:57,119
i go here and i look at the strings

282
00:09:54,560 --> 00:09:58,079
i can oftentimes recover maybe the c2

283
00:09:57,120 --> 00:10:02,320
server address

284
00:09:58,080 --> 00:10:04,800
used by the program so i always do this

285
00:10:02,320 --> 00:10:06,480
even though it's fairly tedious there

286
00:10:04,800 --> 00:10:07,760
might be tens of thousands of lines to

287
00:10:06,480 --> 00:10:11,120
kind of wade through

288
00:10:07,760 --> 00:10:12,240
and what really sucks is i have a lot of

289
00:10:11,120 --> 00:10:14,880
experience

290
00:10:12,240 --> 00:10:16,399
and so this can go pretty quickly for me

291
00:10:14,880 --> 00:10:17,760
i've done it a lot time a lot of times

292
00:10:16,399 --> 00:10:20,800
before

293
00:10:17,760 --> 00:10:22,240
and so it's not the end of the world if

294
00:10:20,800 --> 00:10:24,160
i have to wade through 10 000 lines

295
00:10:22,240 --> 00:10:25,440
because i can do it pretty quickly

296
00:10:24,160 --> 00:10:28,240
but for those without too much

297
00:10:25,440 --> 00:10:29,279
experience this can be a really arduous

298
00:10:28,240 --> 00:10:31,200
task

299
00:10:29,279 --> 00:10:33,760
you're not really sure which string am i

300
00:10:31,200 --> 00:10:35,279
looking for which piece of information

301
00:10:33,760 --> 00:10:37,360
should i pull together and make a

302
00:10:35,279 --> 00:10:40,560
conclusion that's

303
00:10:37,360 --> 00:10:42,000
that's really hard to do and so what

304
00:10:40,560 --> 00:10:44,079
kappa is doing

305
00:10:42,000 --> 00:10:46,000
and why we share with the world now is

306
00:10:44,079 --> 00:10:49,120
that it starts to stitch together a lot

307
00:10:46,000 --> 00:10:51,200
of these pieces of information

308
00:10:49,120 --> 00:10:53,279
um and start suggesting to you next

309
00:10:51,200 --> 00:10:54,720
steps because we've noticed that a lot

310
00:10:53,279 --> 00:10:57,040
of tools

311
00:10:54,720 --> 00:10:58,480
as they exist today you know they're

312
00:10:57,040 --> 00:11:01,040
technically correct

313
00:10:58,480 --> 00:11:02,320
they give you true data but they're very

314
00:11:01,040 --> 00:11:05,519
conservative

315
00:11:02,320 --> 00:11:08,560
and even if it's easy to

316
00:11:05,519 --> 00:11:12,640
suggest the next step of analysis or

317
00:11:08,560 --> 00:11:14,479
even if it's easy these tools do not go

318
00:11:12,640 --> 00:11:15,920
ahead and give you extra context or

319
00:11:14,480 --> 00:11:18,880
interpretation

320
00:11:15,920 --> 00:11:20,719
they place that burden on you as the

321
00:11:18,880 --> 00:11:23,439
investigator or analyst

322
00:11:20,720 --> 00:11:25,360
so kappa's our response to this a tool

323
00:11:23,440 --> 00:11:27,839
that can automatically recognize

324
00:11:25,360 --> 00:11:29,120
patterns start to make analytical

325
00:11:27,839 --> 00:11:32,240
conclusions

326
00:11:29,120 --> 00:11:34,000
and lead you on a path to get back

327
00:11:32,240 --> 00:11:35,760
to your investigation get back to

328
00:11:34,000 --> 00:11:36,959
finding those bad guys and kicking them

329
00:11:35,760 --> 00:11:40,000
out of networks

330
00:11:36,959 --> 00:11:41,680
so now that we know a bit about how

331
00:11:40,000 --> 00:11:43,920
kappa can be used a little bit about

332
00:11:41,680 --> 00:11:45,439
what it output what's output looks like

333
00:11:43,920 --> 00:11:47,120
let's turn it over to morris who's going

334
00:11:45,440 --> 00:11:50,720
to show us exactly how

335
00:11:47,120 --> 00:11:50,720
the magic works behind the scenes

336
00:11:55,279 --> 00:11:59,519
awesome thank you willie i'm very

337
00:11:56,959 --> 00:12:02,800
excited to be here and sharing this tool

338
00:11:59,519 --> 00:12:05,600
with the whole community so

339
00:12:02,800 --> 00:12:06,479
i think i have control now yeah perfect

340
00:12:05,600 --> 00:12:08,480
thank you

341
00:12:06,480 --> 00:12:10,240
so let's dive into how capper actually

342
00:12:08,480 --> 00:12:13,040
works and

343
00:12:10,240 --> 00:12:14,800
automatically identifies capabilities in

344
00:12:13,040 --> 00:12:16,719
a program

345
00:12:14,800 --> 00:12:17,839
for that doing that it relies on two

346
00:12:16,720 --> 00:12:20,399
main components

347
00:12:17,839 --> 00:12:21,200
first one being features extraction

348
00:12:20,399 --> 00:12:22,959
engine

349
00:12:21,200 --> 00:12:25,120
where we do code analysis to pull out

350
00:12:22,959 --> 00:12:27,040
features such as strings the disassembly

351
00:12:25,120 --> 00:12:28,880
of a program and a code flow

352
00:12:27,040 --> 00:12:31,120
and then also a rules engine which

353
00:12:28,880 --> 00:12:34,480
applies logic to find combinations

354
00:12:31,120 --> 00:12:37,440
of these features let's dive into the

355
00:12:34,480 --> 00:12:39,120
features extraction here first here we

356
00:12:37,440 --> 00:12:40,079
see the general structure of a windows

357
00:12:39,120 --> 00:12:42,320
pe file

358
00:12:40,079 --> 00:12:43,920
that contains in some part of it the

359
00:12:42,320 --> 00:12:46,160
executing code

360
00:12:43,920 --> 00:12:47,120
in that code or on that code we can

361
00:12:46,160 --> 00:12:49,600
apply advanced

362
00:12:47,120 --> 00:12:50,240
static analysis and reverse engineer the

363
00:12:49,600 --> 00:12:53,360
program

364
00:12:50,240 --> 00:12:56,160
flow and the disassembly from it

365
00:12:53,360 --> 00:12:57,600
here's the uh an example code segment

366
00:12:56,160 --> 00:12:58,880
disassembled in ida pro

367
00:12:57,600 --> 00:13:00,399
and some of these features that are

368
00:12:58,880 --> 00:13:02,000
interesting here and that we pull out

369
00:13:00,399 --> 00:13:05,279
with the feature engine

370
00:13:02,000 --> 00:13:08,240
are api calls which tell the are

371
00:13:05,279 --> 00:13:10,000
present in the binary to tell anything

372
00:13:08,240 --> 00:13:12,959
to allow for any

373
00:13:10,000 --> 00:13:13,360
functionality in the program to happen

374
00:13:12,959 --> 00:13:15,199
then

375
00:13:13,360 --> 00:13:17,360
numbers which are commonly used as

376
00:13:15,200 --> 00:13:18,160
constant being passed to such functions

377
00:13:17,360 --> 00:13:20,880
to specify

378
00:13:18,160 --> 00:13:21,839
their real behavior or in programming

379
00:13:20,880 --> 00:13:26,720
constructs such as

380
00:13:21,839 --> 00:13:28,560
loops or conditional jumps

381
00:13:26,720 --> 00:13:30,800
then we also pull out things like string

382
00:13:28,560 --> 00:13:32,719
references which allow us to also get

383
00:13:30,800 --> 00:13:35,359
more detail about what is happening

384
00:13:32,720 --> 00:13:36,959
in this code segment a very cool thing

385
00:13:35,360 --> 00:13:38,959
here is that we can associate

386
00:13:36,959 --> 00:13:41,199
all features that we find with the

387
00:13:38,959 --> 00:13:42,560
respective offset in the file so the

388
00:13:41,199 --> 00:13:45,680
virtual function offset

389
00:13:42,560 --> 00:13:47,680
or just a general file offset and

390
00:13:45,680 --> 00:13:49,519
not only that we can also associate it

391
00:13:47,680 --> 00:13:51,359
with encompassing context

392
00:13:49,519 --> 00:13:53,279
so for example if we disassemble a whole

393
00:13:51,360 --> 00:13:55,199
function we can

394
00:13:53,279 --> 00:13:56,880
group every feature that we find in that

395
00:13:55,199 --> 00:13:59,760
function with that

396
00:13:56,880 --> 00:14:00,320
specific code part even on a lower scope

397
00:13:59,760 --> 00:14:02,079
these

398
00:14:00,320 --> 00:14:03,600
disassembled functions normally consists

399
00:14:02,079 --> 00:14:05,519
of basic blocks

400
00:14:03,600 --> 00:14:07,839
these little building parts are

401
00:14:05,519 --> 00:14:10,079
functions and for each of these

402
00:14:07,839 --> 00:14:12,720
features we can also associate them with

403
00:14:10,079 --> 00:14:12,719
those blocks

404
00:14:13,120 --> 00:14:16,800
besides the code we can also pull out

405
00:14:14,880 --> 00:14:17,680
other metadata including header

406
00:14:16,800 --> 00:14:21,439
information

407
00:14:17,680 --> 00:14:22,638
or other section such as the import

408
00:14:21,440 --> 00:14:24,880
address table

409
00:14:22,639 --> 00:14:26,880
or pull out the strings from the entire

410
00:14:24,880 --> 00:14:28,800
file most of them will likely find in

411
00:14:26,880 --> 00:14:30,560
the data section

412
00:14:28,800 --> 00:14:32,319
so now that we have all of our features

413
00:14:30,560 --> 00:14:34,560
extracted for a binary

414
00:14:32,320 --> 00:14:36,079
we put them into our big features bags

415
00:14:34,560 --> 00:14:37,599
associate them with their respective

416
00:14:36,079 --> 00:14:40,079
contacts if necessary

417
00:14:37,600 --> 00:14:40,800
and then we can start our rule engine

418
00:14:40,079 --> 00:14:43,839
the rules

419
00:14:40,800 --> 00:14:45,359
work under the assumption that we once a

420
00:14:43,839 --> 00:14:46,800
specific combination of features is

421
00:14:45,360 --> 00:14:48,240
present we can deduce that the

422
00:14:46,800 --> 00:14:51,359
capability

423
00:14:48,240 --> 00:14:53,360
is contained in the file to

424
00:14:51,360 --> 00:14:54,639
illustrate this let's look at this

425
00:14:53,360 --> 00:14:56,880
disassembly

426
00:14:54,639 --> 00:14:58,480
segment here again normally when i

427
00:14:56,880 --> 00:15:00,000
reverse engineer i don't look at every

428
00:14:58,480 --> 00:15:01,680
instruction line by line

429
00:15:00,000 --> 00:15:03,600
i focus more on the bigger picture and

430
00:15:01,680 --> 00:15:06,880
some features that send out to me

431
00:15:03,600 --> 00:15:08,000
here in this case these two api calls in

432
00:15:06,880 --> 00:15:09,760
combination really

433
00:15:08,000 --> 00:15:11,920
indicate to me that this is some kind of

434
00:15:09,760 --> 00:15:13,519
dropper like behavior where we first

435
00:15:11,920 --> 00:15:15,839
write a file to the disk

436
00:15:13,519 --> 00:15:17,760
and then execute it using the second api

437
00:15:15,839 --> 00:15:21,519
call

438
00:15:17,760 --> 00:15:24,000
another example here we see

439
00:15:21,519 --> 00:15:25,279
three numbers as constants being passed

440
00:15:24,000 --> 00:15:27,680
to this socket

441
00:15:25,279 --> 00:15:29,600
api call and if you've done socket

442
00:15:27,680 --> 00:15:31,599
programming before you may recognize

443
00:15:29,600 --> 00:15:33,279
recognize that this is the creation of a

444
00:15:31,600 --> 00:15:36,399
tcp socket

445
00:15:33,279 --> 00:15:37,920
and as reverse engineering becomes more

446
00:15:36,399 --> 00:15:40,639
and more

447
00:15:37,920 --> 00:15:41,920
use or as i over the years i learned

448
00:15:40,639 --> 00:15:43,440
more of these reverse engineering

449
00:15:41,920 --> 00:15:46,719
techniques and tricks

450
00:15:43,440 --> 00:15:48,480
and these little patterns and

451
00:15:46,720 --> 00:15:50,480
now i think finally with kappa we found

452
00:15:48,480 --> 00:15:54,000
a way to codify this knowledge

453
00:15:50,480 --> 00:15:56,079
into extendable and repeatable

454
00:15:54,000 --> 00:15:58,800
a process and make that accessible to

455
00:15:56,079 --> 00:16:00,880
everyone here really in the community

456
00:15:58,800 --> 00:16:02,079
so the bigger picture we extract our

457
00:16:00,880 --> 00:16:04,959
features we apply

458
00:16:02,079 --> 00:16:07,279
a rule logic to it and then that results

459
00:16:04,959 --> 00:16:09,119
in our program capabilities

460
00:16:07,279 --> 00:16:11,120
since the rules are really the the core

461
00:16:09,120 --> 00:16:12,240
part of what we do here with the

462
00:16:11,120 --> 00:16:14,399
detection and the

463
00:16:12,240 --> 00:16:16,000
combination of features let's dive into

464
00:16:14,399 --> 00:16:19,279
how they look like

465
00:16:16,000 --> 00:16:20,000
here's an example rule we use the yaml

466
00:16:19,279 --> 00:16:22,639
syntax

467
00:16:20,000 --> 00:16:24,800
for these rules you can see they're

468
00:16:22,639 --> 00:16:25,360
nicely to understand by humans easy to

469
00:16:24,800 --> 00:16:27,279
read

470
00:16:25,360 --> 00:16:29,040
and they're also good to pass using

471
00:16:27,279 --> 00:16:30,800
programming languages

472
00:16:29,040 --> 00:16:32,719
in this rule here we have two main

473
00:16:30,800 --> 00:16:33,279
sections first one being the meta

474
00:16:32,720 --> 00:16:36,399
section

475
00:16:33,279 --> 00:16:38,320
which includes the rule name and that is

476
00:16:36,399 --> 00:16:40,480
a unique identifier among the entire

477
00:16:38,320 --> 00:16:42,160
rule set

478
00:16:40,480 --> 00:16:43,600
specifying the capability that we're

479
00:16:42,160 --> 00:16:46,480
trying to detect here

480
00:16:43,600 --> 00:16:47,360
this name was used in the example output

481
00:16:46,480 --> 00:16:49,600
that really showed

482
00:16:47,360 --> 00:16:51,440
in one of these first slides and

483
00:16:49,600 --> 00:16:53,279
indicates the capability

484
00:16:51,440 --> 00:16:54,480
with also with every rule we can

485
00:16:53,279 --> 00:16:58,160
associate a grouping

486
00:16:54,480 --> 00:17:01,600
and categorization to make them

487
00:16:58,160 --> 00:17:03,279
easily to get an easy higher level

488
00:17:01,600 --> 00:17:05,839
understanding of what a program is doing

489
00:17:03,279 --> 00:17:07,599
based on these different categories

490
00:17:05,839 --> 00:17:10,159
associated with that we support

491
00:17:07,599 --> 00:17:12,480
other taxonomies to do tagging of

492
00:17:10,160 --> 00:17:15,760
behavior and programs for example the

493
00:17:12,480 --> 00:17:16,160
attack framework to go from an input

494
00:17:15,760 --> 00:17:19,439
file

495
00:17:16,160 --> 00:17:21,280
and associate this capability with the

496
00:17:19,439 --> 00:17:23,439
specific attack technique our

497
00:17:21,280 --> 00:17:26,319
intelligence team really likes this

498
00:17:23,439 --> 00:17:27,760
capability to do automated tagging of a

499
00:17:26,319 --> 00:17:30,559
bunch of different binaries in an

500
00:17:27,760 --> 00:17:31,919
automated fashion

501
00:17:30,559 --> 00:17:35,280
last thing i want to point out here in

502
00:17:31,919 --> 00:17:37,520
the meta section is this function scope

503
00:17:35,280 --> 00:17:38,879
this scope tells kappa basically where

504
00:17:37,520 --> 00:17:41,360
to look so

505
00:17:38,880 --> 00:17:42,080
in this case in a function and we want

506
00:17:41,360 --> 00:17:43,280
to see

507
00:17:42,080 --> 00:17:45,280
these features that we're going to talk

508
00:17:43,280 --> 00:17:47,360
about here next in the scope of a

509
00:17:45,280 --> 00:17:49,918
disassembled function

510
00:17:47,360 --> 00:17:51,039
so now these let's look at these

511
00:17:49,919 --> 00:17:53,600
individual features

512
00:17:51,039 --> 00:17:55,280
they encode the real rule logic and are

513
00:17:53,600 --> 00:17:58,159
really the core of this rule

514
00:17:55,280 --> 00:17:58,799
they consist of a logical tree that

515
00:17:58,160 --> 00:18:00,640
combines

516
00:17:58,799 --> 00:18:02,320
the features that we're looking for

517
00:18:00,640 --> 00:18:05,840
using things like and or

518
00:18:02,320 --> 00:18:08,080
not and also range counts

519
00:18:05,840 --> 00:18:09,280
and then we have the actual features and

520
00:18:08,080 --> 00:18:11,120
those are really at the core

521
00:18:09,280 --> 00:18:12,480
of things i look for when i reverse

522
00:18:11,120 --> 00:18:14,239
engineer a sample

523
00:18:12,480 --> 00:18:16,160
looking for specific api calls looking

524
00:18:14,240 --> 00:18:18,080
for numbers looking for strings

525
00:18:16,160 --> 00:18:20,160
here in this example we want to see a

526
00:18:18,080 --> 00:18:22,480
call to open up the registry

527
00:18:20,160 --> 00:18:24,160
setting a value in it and then those

528
00:18:22,480 --> 00:18:24,720
values those numbers the constants and

529
00:18:24,160 --> 00:18:27,440
the string

530
00:18:24,720 --> 00:18:29,440
at the bottom define the specifics of

531
00:18:27,440 --> 00:18:31,760
this operation

532
00:18:29,440 --> 00:18:33,679
overall this rule looks for the creation

533
00:18:31,760 --> 00:18:36,080
of a registered run key

534
00:18:33,679 --> 00:18:37,679
and is a very common technique we see in

535
00:18:36,080 --> 00:18:40,879
malware or used to see at least a

536
00:18:37,679 --> 00:18:42,960
malware for persistence

537
00:18:40,880 --> 00:18:44,240
now let's start with some other rules to

538
00:18:42,960 --> 00:18:47,200
see how they work and

539
00:18:44,240 --> 00:18:48,559
uh what all functionality we provide

540
00:18:47,200 --> 00:18:50,960
here we have the

541
00:18:48,559 --> 00:18:52,080
create tcp socket example that i was

542
00:18:50,960 --> 00:18:55,039
talking about earlier

543
00:18:52,080 --> 00:18:56,320
in that little disassembly snippet coded

544
00:18:55,039 --> 00:18:58,640
it up as a rule

545
00:18:56,320 --> 00:18:59,760
with this identification of these

546
00:18:58,640 --> 00:19:02,160
specific numbers

547
00:18:59,760 --> 00:19:04,480
six one and two and one of these api

548
00:19:02,160 --> 00:19:07,360
calls we can

549
00:19:04,480 --> 00:19:08,080
ensure to find the creation of a tcp

550
00:19:07,360 --> 00:19:09,760
socket

551
00:19:08,080 --> 00:19:11,439
here we define the scope of a basic

552
00:19:09,760 --> 00:19:12,559
block to really make sure that all of

553
00:19:11,440 --> 00:19:14,720
these segments

554
00:19:12,559 --> 00:19:18,000
all of these features show up in a very

555
00:19:14,720 --> 00:19:19,919
tight segment in the program

556
00:19:18,000 --> 00:19:21,120
to ensure that this functionality is

557
00:19:19,919 --> 00:19:23,360
there

558
00:19:21,120 --> 00:19:24,719
now as we were developing this we

559
00:19:23,360 --> 00:19:26,799
quickly found out that it's going to be

560
00:19:24,720 --> 00:19:28,720
very useful for us to reference

561
00:19:26,799 --> 00:19:30,480
other capabilities that we already

562
00:19:28,720 --> 00:19:34,559
defined and found with

563
00:19:30,480 --> 00:19:36,960
existing rules in other rules so we can

564
00:19:34,559 --> 00:19:38,559
build capabilities on top of each other

565
00:19:36,960 --> 00:19:40,720
and that's where we implemented this

566
00:19:38,559 --> 00:19:42,240
match feature here where we can just

567
00:19:40,720 --> 00:19:45,679
reference all the features

568
00:19:42,240 --> 00:19:47,440
that were previously defined and

569
00:19:45,679 --> 00:19:50,080
here in this case we use it to find

570
00:19:47,440 --> 00:19:52,240
functions that create a tcp socket

571
00:19:50,080 --> 00:19:54,080
and then perform a call to one of these

572
00:19:52,240 --> 00:19:57,200
apis to connect

573
00:19:54,080 --> 00:20:00,399
indicating to us that this is um

574
00:19:57,200 --> 00:20:00,960
this program may be behaving as a tcp

575
00:20:00,400 --> 00:20:02,880
client

576
00:20:00,960 --> 00:20:04,240
connecting to a remote server and now

577
00:20:02,880 --> 00:20:07,360
what we commonly see that

578
00:20:04,240 --> 00:20:10,159
when malware speaks out straight to

579
00:20:07,360 --> 00:20:10,158
command server

580
00:20:10,880 --> 00:20:16,960
last example i want to show here to

581
00:20:14,000 --> 00:20:18,559
mainly point out these two bytes these

582
00:20:16,960 --> 00:20:19,919
two additional features here bytes and

583
00:20:18,559 --> 00:20:21,760
offsets

584
00:20:19,919 --> 00:20:23,840
bytes similar to strings can be

585
00:20:21,760 --> 00:20:26,320
referenced in disassembled functions to

586
00:20:23,840 --> 00:20:28,240
indicate things like crypto constants

587
00:20:26,320 --> 00:20:31,678
or here in this case they are being used

588
00:20:28,240 --> 00:20:32,720
as class ids and interface ids for com

589
00:20:31,679 --> 00:20:34,799
objects

590
00:20:32,720 --> 00:20:36,240
com objects are a microsoft technique to

591
00:20:34,799 --> 00:20:37,360
provide different functionality on the

592
00:20:36,240 --> 00:20:39,039
operating system

593
00:20:37,360 --> 00:20:40,399
and here in this example we're trying to

594
00:20:39,039 --> 00:20:43,280
identify

595
00:20:40,400 --> 00:20:45,280
task scheduling access using these

596
00:20:43,280 --> 00:20:48,399
offsets

597
00:20:45,280 --> 00:20:51,200
with the this mechanism

598
00:20:48,400 --> 00:20:52,240
creates an object and the offsets then

599
00:20:51,200 --> 00:20:53,919
reference

600
00:20:52,240 --> 00:20:55,840
different functionality in those

601
00:20:53,919 --> 00:20:58,559
programs and

602
00:20:55,840 --> 00:21:00,799
offsets can also be used to identify

603
00:20:58,559 --> 00:21:03,360
register offset structures

604
00:21:00,799 --> 00:21:05,039
memory offsets and other common

605
00:21:03,360 --> 00:21:08,158
techniques we see

606
00:21:05,039 --> 00:21:10,000
again we associate that with techniques

607
00:21:08,159 --> 00:21:12,799
from the attack framework here to

608
00:21:10,000 --> 00:21:15,679
achieve persistence via schedule task

609
00:21:12,799 --> 00:21:16,080
and also in the matter section we can

610
00:21:15,679 --> 00:21:18,640
include

611
00:21:16,080 --> 00:21:20,639
examples which i think is a very cool

612
00:21:18,640 --> 00:21:23,039
way for the community to

613
00:21:20,640 --> 00:21:25,679
track samples that contain specific

614
00:21:23,039 --> 00:21:27,440
behavior in the real world

615
00:21:25,679 --> 00:21:28,880
given the file name file hash and a

616
00:21:27,440 --> 00:21:30,799
specific offset

617
00:21:28,880 --> 00:21:32,240
and it also allows us to do during the

618
00:21:30,799 --> 00:21:34,158
development of kappa

619
00:21:32,240 --> 00:21:35,600
once we tweak our rule engine once we

620
00:21:34,159 --> 00:21:37,760
tweak specific rules

621
00:21:35,600 --> 00:21:38,719
we can we have regression tests to make

622
00:21:37,760 --> 00:21:40,799
sure that

623
00:21:38,720 --> 00:21:44,320
all of this functionality still matches

624
00:21:40,799 --> 00:21:48,400
even after we made those changes

625
00:21:44,320 --> 00:21:50,000
so currently kappa supports 261 rules

626
00:21:48,400 --> 00:21:51,919
here there's a rough grouping of them by

627
00:21:50,000 --> 00:21:53,280
namespace and

628
00:21:51,919 --> 00:21:55,200
i think it's pretty impressive that we

629
00:21:53,280 --> 00:21:56,559
already came up with such a high number

630
00:21:55,200 --> 00:21:58,960
especially because we were mostly

631
00:21:56,559 --> 00:21:59,678
focused on writing the core of the

632
00:21:58,960 --> 00:22:02,559
framework

633
00:21:59,679 --> 00:22:04,480
so far but of course as we were reverse

634
00:22:02,559 --> 00:22:05,440
engineering malwa samples over the last

635
00:22:04,480 --> 00:22:07,120
year

636
00:22:05,440 --> 00:22:08,320
we were using kappa we were improving

637
00:22:07,120 --> 00:22:09,760
the rules we were adding cool

638
00:22:08,320 --> 00:22:12,240
functionality

639
00:22:09,760 --> 00:22:13,600
and already have a good coverage but i

640
00:22:12,240 --> 00:22:15,200
really hope that this number

641
00:22:13,600 --> 00:22:16,959
of rules is going to increase

642
00:22:15,200 --> 00:22:18,400
significantly

643
00:22:16,960 --> 00:22:20,159
i hope the community is not going to

644
00:22:18,400 --> 00:22:21,520
only benefit from this tool by using it

645
00:22:20,159 --> 00:22:24,480
but also can help

646
00:22:21,520 --> 00:22:25,200
contribute rules back come back with

647
00:22:24,480 --> 00:22:27,280
ideas to

648
00:22:25,200 --> 00:22:29,600
us willy's gonna talk more about this

649
00:22:27,280 --> 00:22:31,360
process i think our goal is to have

650
00:22:29,600 --> 00:22:33,120
uh half of the people who signed up for

651
00:22:31,360 --> 00:22:34,399
the summit registered

652
00:22:33,120 --> 00:22:36,639
half of the people who registered for

653
00:22:34,400 --> 00:22:38,880
the summit um contribute a rule and i

654
00:22:36,640 --> 00:22:41,360
think then we're in really good shape

655
00:22:38,880 --> 00:22:42,240
uh i'm going to turn it back to willy

656
00:22:41,360 --> 00:22:44,399
now to see

657
00:22:42,240 --> 00:22:46,640
more of these rules in action and see

658
00:22:44,400 --> 00:22:50,799
the engine in action

659
00:22:46,640 --> 00:22:53,600
and yeah take it away will he

660
00:22:50,799 --> 00:22:56,240
alright sweet let me just get my clicker

661
00:22:53,600 --> 00:22:56,240
going again

662
00:22:57,440 --> 00:23:02,159
it's not quite there all right here we

663
00:22:59,360 --> 00:23:03,280
go so moritz has done a great job of

664
00:23:02,159 --> 00:23:05,600
walking us

665
00:23:03,280 --> 00:23:06,639
kind of bringing us behind the curtains

666
00:23:05,600 --> 00:23:09,280
showing us

667
00:23:06,640 --> 00:23:10,000
how kappa works and so with these new

668
00:23:09,280 --> 00:23:12,799
details

669
00:23:10,000 --> 00:23:14,720
we can go back and take another peek or

670
00:23:12,799 --> 00:23:16,960
peek at another example

671
00:23:14,720 --> 00:23:19,520
and see some of the more advanced

672
00:23:16,960 --> 00:23:20,880
features and uses of kappa

673
00:23:19,520 --> 00:23:23,360
so for this example again we're going to

674
00:23:20,880 --> 00:23:25,360
take that other part of wannacry

675
00:23:23,360 --> 00:23:27,120
it'll be the encrypter component the

676
00:23:25,360 --> 00:23:30,719
part that destroys

677
00:23:27,120 --> 00:23:32,959
systems and so we're gonna run kappa

678
00:23:30,720 --> 00:23:35,120
from our terminal pointing it towards

679
00:23:32,960 --> 00:23:37,200
the wannacry encrypter

680
00:23:35,120 --> 00:23:38,399
going to process for a couple seconds

681
00:23:37,200 --> 00:23:40,960
not that many

682
00:23:38,400 --> 00:23:42,480
and get us our output this output again

683
00:23:40,960 --> 00:23:45,600
breaks down to include

684
00:23:42,480 --> 00:23:47,840
both the attack mapping that we can kind

685
00:23:45,600 --> 00:23:49,520
of categorize this malware into

686
00:23:47,840 --> 00:23:51,600
and so this can be really helpful if

687
00:23:49,520 --> 00:23:54,480
we're looking at an unknown binary

688
00:23:51,600 --> 00:23:56,080
maybe understanding where it fits within

689
00:23:54,480 --> 00:23:57,840
the attack earth

690
00:23:56,080 --> 00:23:59,199
attack or life cycle there is a part of

691
00:23:57,840 --> 00:24:01,678
the initial access or

692
00:23:59,200 --> 00:24:03,120
part of achieving its objective we could

693
00:24:01,679 --> 00:24:04,559
potentially use this information for

694
00:24:03,120 --> 00:24:07,039
that

695
00:24:04,559 --> 00:24:09,200
and then for the meat of the output is

696
00:24:07,039 --> 00:24:10,400
the list of capabilities that kappa

697
00:24:09,200 --> 00:24:12,559
identified

698
00:24:10,400 --> 00:24:15,039
and so as i kind of scan through this

699
00:24:12,559 --> 00:24:17,279
list here for the wannacry encrypter

700
00:24:15,039 --> 00:24:19,440
things that stand out to me include the

701
00:24:17,279 --> 00:24:23,760
ability to encrypt via xor

702
00:24:19,440 --> 00:24:26,000
aes rsa rc4 excuse me

703
00:24:23,760 --> 00:24:27,840
as well as the ability to enumerate

704
00:24:26,000 --> 00:24:30,000
files on the file system

705
00:24:27,840 --> 00:24:31,279
and fetch metadata about those storage

706
00:24:30,000 --> 00:24:33,760
devices

707
00:24:31,279 --> 00:24:35,440
that to me sounds exactly like what i

708
00:24:33,760 --> 00:24:36,158
see in a lot of ransomware and

709
00:24:35,440 --> 00:24:40,080
encryption

710
00:24:36,159 --> 00:24:42,159
encryptor samples so this is consistent

711
00:24:40,080 --> 00:24:43,918
in fact as i was putting together these

712
00:24:42,159 --> 00:24:46,559
slides i was like

713
00:24:43,919 --> 00:24:48,240
yes that pattern often when i see it i

714
00:24:46,559 --> 00:24:49,279
immediately think in my mind as a

715
00:24:48,240 --> 00:24:52,000
reverse engineer

716
00:24:49,279 --> 00:24:52,880
it's probably ransomware so i quickly

717
00:24:52,000 --> 00:24:55,360
drafted up

718
00:24:52,880 --> 00:24:57,279
a kappa rule that could encode this you

719
00:24:55,360 --> 00:24:59,439
know it's 10 lines long it's

720
00:24:57,279 --> 00:25:00,559
succinct and it's easy for other humans

721
00:24:59,440 --> 00:25:02,799
to understand

722
00:25:00,559 --> 00:25:04,639
and it's easy for me to share this now

723
00:25:02,799 --> 00:25:06,639
with other with other people

724
00:25:04,640 --> 00:25:08,799
and so i'm saying when i see encryption

725
00:25:06,640 --> 00:25:10,159
when i see file system enumeration when

726
00:25:08,799 --> 00:25:12,639
i see metadata fetch

727
00:25:10,159 --> 00:25:14,480
maybe that's ransomware and one of the

728
00:25:12,640 --> 00:25:16,480
cool things i want to point out here

729
00:25:14,480 --> 00:25:18,240
is we're matching based on name space

730
00:25:16,480 --> 00:25:18,960
here which means that i don't have to

731
00:25:18,240 --> 00:25:21,200
enumerate

732
00:25:18,960 --> 00:25:22,480
all the different types of encryption

733
00:25:21,200 --> 00:25:24,640
that are out there that i'm

734
00:25:22,480 --> 00:25:26,400
looking for in the ransomware i can rely

735
00:25:24,640 --> 00:25:27,600
on there being any sort of encryption in

736
00:25:26,400 --> 00:25:29,120
the binary

737
00:25:27,600 --> 00:25:30,959
and other rules are going to pick that

738
00:25:29,120 --> 00:25:34,959
up for us

739
00:25:30,960 --> 00:25:36,640
so is this a high quality rule um

740
00:25:34,960 --> 00:25:38,080
i'm not quite sure yet i don't know

741
00:25:36,640 --> 00:25:39,919
exactly how it works because i haven't

742
00:25:38,080 --> 00:25:42,559
had a chance to run on our testbed

743
00:25:39,919 --> 00:25:43,919
that we use to quickly identify the

744
00:25:42,559 --> 00:25:46,559
false positive rate

745
00:25:43,919 --> 00:25:46,960
but what i can assure you is that this

746
00:25:46,559 --> 00:25:48,720
rule

747
00:25:46,960 --> 00:25:50,320
captures the spirit of what we're trying

748
00:25:48,720 --> 00:25:53,039
to do with kappa

749
00:25:50,320 --> 00:25:54,480
uh we're trying to enable us enable the

750
00:25:53,039 --> 00:25:57,440
community to quickly

751
00:25:54,480 --> 00:25:58,240
encode these rules and it gives us an 80

752
00:25:57,440 --> 00:26:00,480
20

753
00:25:58,240 --> 00:26:01,840
solution where it does a really good job

754
00:26:00,480 --> 00:26:03,679
on most of the things that we actually

755
00:26:01,840 --> 00:26:06,720
encounter in the real world

756
00:26:03,679 --> 00:26:10,080
and is easily explainable

757
00:26:06,720 --> 00:26:12,400
to other human beings now it's not

758
00:26:10,080 --> 00:26:14,559
all roses and butterflies because there

759
00:26:12,400 --> 00:26:17,440
are many real world samples out there

760
00:26:14,559 --> 00:26:18,320
that have been obfuscated or packed and

761
00:26:17,440 --> 00:26:21,279
kappa

762
00:26:18,320 --> 00:26:22,960
can handle these samples very well its

763
00:26:21,279 --> 00:26:24,720
code analysis engine is just

764
00:26:22,960 --> 00:26:26,320
it's not advanced enough yet to auto

765
00:26:24,720 --> 00:26:28,480
unpack the sample

766
00:26:26,320 --> 00:26:29,520
and figure out what's going on but all

767
00:26:28,480 --> 00:26:32,240
is not lost

768
00:26:29,520 --> 00:26:33,600
because we've made we put spent a lot of

769
00:26:32,240 --> 00:26:35,120
effort to ensure

770
00:26:33,600 --> 00:26:37,199
that cap is not just going to throw a

771
00:26:35,120 --> 00:26:40,719
stack trace up or even worse

772
00:26:37,200 --> 00:26:42,240
display misleading data to you instead

773
00:26:40,720 --> 00:26:44,880
it's going to do its best to identify

774
00:26:42,240 --> 00:26:47,039
these edge cases and suggest to you

775
00:26:44,880 --> 00:26:48,559
what you should be doing instead it's

776
00:26:47,039 --> 00:26:49,360
going to lead you down this path of

777
00:26:48,559 --> 00:26:52,080
analysis

778
00:26:49,360 --> 00:26:52,719
and so it'll say hey i think this file's

779
00:26:52,080 --> 00:26:54,000
packed

780
00:26:52,720 --> 00:26:56,480
i'm not seeing the results i would

781
00:26:54,000 --> 00:26:58,480
expect for this binary so therefore

782
00:26:56,480 --> 00:27:00,720
you should try unpacking the sample

783
00:26:58,480 --> 00:27:02,400
before re-running in kappa

784
00:27:00,720 --> 00:27:04,640
that way you're less likely to make a

785
00:27:02,400 --> 00:27:07,039
mistake in your investigation

786
00:27:04,640 --> 00:27:08,640
likewise when kappa encounters a file

787
00:27:07,039 --> 00:27:09,520
type that it doesn't recognize or

788
00:27:08,640 --> 00:27:12,080
support

789
00:27:09,520 --> 00:27:12,960
it can give you similar suggestions

790
00:27:12,080 --> 00:27:15,678
today

791
00:27:12,960 --> 00:27:17,039
kappa supports analyzing native windows

792
00:27:15,679 --> 00:27:18,240
pe files

793
00:27:17,039 --> 00:27:20,559
and that's just because it's what we

794
00:27:18,240 --> 00:27:22,159
typically see in our investigations

795
00:27:20,559 --> 00:27:25,039
it's a majority of what i reverse

796
00:27:22,159 --> 00:27:27,520
engineer that's where my experience lies

797
00:27:25,039 --> 00:27:28,640
so when it sees something like an l-file

798
00:27:27,520 --> 00:27:31,679
a mock-o-file

799
00:27:28,640 --> 00:27:33,919
or maybe a dot-net module it'll say hey

800
00:27:31,679 --> 00:27:35,760
i don't know what to do here but i do

801
00:27:33,919 --> 00:27:37,840
know that you as a human

802
00:27:35,760 --> 00:27:38,879
might want a tool might want to use a

803
00:27:37,840 --> 00:27:42,158
tool like

804
00:27:38,880 --> 00:27:44,000
dnspy to decompile the program and maybe

805
00:27:42,159 --> 00:27:46,000
you should take a peek over there

806
00:27:44,000 --> 00:27:48,240
so it's going to warn you and suggest

807
00:27:46,000 --> 00:27:51,360
the next step

808
00:27:48,240 --> 00:27:54,080
and all right but of course

809
00:27:51,360 --> 00:27:55,360
we have some really big plans for where

810
00:27:54,080 --> 00:27:58,559
we want to go

811
00:27:55,360 --> 00:28:01,120
with kappa um the number one thing

812
00:27:58,559 --> 00:28:02,000
is to collect a massive rule set that

813
00:28:01,120 --> 00:28:04,320
encodes

814
00:28:02,000 --> 00:28:06,080
all of the the really interesting things

815
00:28:04,320 --> 00:28:08,000
that we've seen in malware and that's

816
00:28:06,080 --> 00:28:09,840
not just going to come from more it's

817
00:28:08,000 --> 00:28:12,159
for me and morris that's going to come

818
00:28:09,840 --> 00:28:14,080
from the community as well as we kind of

819
00:28:12,159 --> 00:28:16,000
look across globally what we see out

820
00:28:14,080 --> 00:28:18,480
there and figure out what to recognize

821
00:28:16,000 --> 00:28:19,600
but more on this in a moment in the

822
00:28:18,480 --> 00:28:21,279
meantime

823
00:28:19,600 --> 00:28:22,719
i think there's a natural fit for what

824
00:28:21,279 --> 00:28:25,840
we've done with kappa

825
00:28:22,720 --> 00:28:26,320
on a static analysis side and applying

826
00:28:25,840 --> 00:28:29,678
that

827
00:28:26,320 --> 00:28:30,158
to dynamic analysis taking for example

828
00:28:29,679 --> 00:28:33,440
um

829
00:28:30,159 --> 00:28:35,039
a sandbox data like an api trace

830
00:28:33,440 --> 00:28:37,440
when malware was run within a virtual

831
00:28:35,039 --> 00:28:38,640
machine and all of its activities were

832
00:28:37,440 --> 00:28:40,080
recorded

833
00:28:38,640 --> 00:28:42,240
it seems to me that we could use a lot

834
00:28:40,080 --> 00:28:43,439
of the same logic from the existing

835
00:28:42,240 --> 00:28:46,640
kappa engine

836
00:28:43,440 --> 00:28:48,720
to kind of map out what was a program

837
00:28:46,640 --> 00:28:51,440
doing at any point in time

838
00:28:48,720 --> 00:28:53,120
we might be able to say definitively

839
00:28:51,440 --> 00:28:55,520
this program when i first started

840
00:28:53,120 --> 00:28:56,158
it connected to a c2 server here are the

841
00:28:55,520 --> 00:28:58,000
events

842
00:28:56,159 --> 00:28:59,200
then it downloaded another payload here

843
00:28:58,000 --> 00:29:00,080
are the events that support that

844
00:28:59,200 --> 00:29:02,320
conclusion

845
00:29:00,080 --> 00:29:03,199
and then finally we inject it to a third

846
00:29:02,320 --> 00:29:05,279
process

847
00:29:03,200 --> 00:29:06,799
and we can actually point the different

848
00:29:05,279 --> 00:29:08,880
different events that

849
00:29:06,799 --> 00:29:09,840
allow us to make that conclusion so that

850
00:29:08,880 --> 00:29:12,320
seems like a natural

851
00:29:09,840 --> 00:29:14,158
fit and then of course we're going to

852
00:29:12,320 --> 00:29:16,158
continue with our integration

853
00:29:14,159 --> 00:29:18,240
with existing reverse engineering

854
00:29:16,159 --> 00:29:21,279
workflows so that kappa can be

855
00:29:18,240 --> 00:29:22,880
both useful to instant responders who

856
00:29:21,279 --> 00:29:23,760
need a standalone tool to get their

857
00:29:22,880 --> 00:29:27,279
results

858
00:29:23,760 --> 00:29:29,039
as well as hardcore reverse engineers

859
00:29:27,279 --> 00:29:30,799
who are down into their weeds of

860
00:29:29,039 --> 00:29:32,240
disassembly trying to figure out what

861
00:29:30,799 --> 00:29:33,440
programs are doing

862
00:29:32,240 --> 00:29:35,760
so we're gonna we'll integrate with

863
00:29:33,440 --> 00:29:39,039
tools like gidra radare

864
00:29:35,760 --> 00:29:42,080
binary ninja etc and today

865
00:29:39,039 --> 00:29:42,799
my favorite way to use kappa is actually

866
00:29:42,080 --> 00:29:46,720
within

867
00:29:42,799 --> 00:29:48,080
our ida pro integration and plug-in

868
00:29:46,720 --> 00:29:51,200
and this integration just made a lot of

869
00:29:48,080 --> 00:29:53,199
sense because us reverse engineers

870
00:29:51,200 --> 00:29:54,960
ida pro is our primary place that we

871
00:29:53,200 --> 00:29:57,200
spend time is where we

872
00:29:54,960 --> 00:29:58,640
explore a file it's where we save our

873
00:29:57,200 --> 00:30:00,399
notes and it's how we communicate with

874
00:29:58,640 --> 00:30:04,000
other reverse engineers

875
00:30:00,399 --> 00:30:07,279
and so pulling cappa into this workflow

876
00:30:04,000 --> 00:30:08,480
is just you know it's the obvious thing

877
00:30:07,279 --> 00:30:11,039
to do really

878
00:30:08,480 --> 00:30:11,760
um and the way that it helps me do a

879
00:30:11,039 --> 00:30:14,080
better job

880
00:30:11,760 --> 00:30:15,520
honestly it really does is that it can

881
00:30:14,080 --> 00:30:17,199
point and guide me

882
00:30:15,520 --> 00:30:19,520
towards the interesting parts of our

883
00:30:17,200 --> 00:30:22,559
program this matters when i

884
00:30:19,520 --> 00:30:23,440
open up a potentially malicious file it

885
00:30:22,559 --> 00:30:26,320
might have two

886
00:30:23,440 --> 00:30:27,679
five or ten thousand functions i might

887
00:30:26,320 --> 00:30:29,760
potentially have to go through

888
00:30:27,679 --> 00:30:30,960
a majority or all of those functions to

889
00:30:29,760 --> 00:30:33,039
figure out

890
00:30:30,960 --> 00:30:34,240
where the key part of the binary is that

891
00:30:33,039 --> 00:30:37,360
lets me find

892
00:30:34,240 --> 00:30:39,760
artifacts or indicators but

893
00:30:37,360 --> 00:30:41,520
with kappa this tool can highlight for

894
00:30:39,760 --> 00:30:44,158
us exactly where

895
00:30:41,520 --> 00:30:46,000
different functionality is implemented

896
00:30:44,159 --> 00:30:48,559
so when i use capital without a pro

897
00:30:46,000 --> 00:30:50,880
i can immediately jump to for example

898
00:30:48,559 --> 00:30:52,559
the function that constructs the

899
00:30:50,880 --> 00:30:54,159
the network packet that communicates

900
00:30:52,559 --> 00:30:56,559
with the c2 server

901
00:30:54,159 --> 00:30:57,840
and allows me to maybe write a decoder

902
00:30:56,559 --> 00:30:59,600
or something like that

903
00:30:57,840 --> 00:31:02,639
it allows me to zero in very quickly on

904
00:30:59,600 --> 00:31:04,480
the important parts of the program

905
00:31:02,640 --> 00:31:06,799
another thing i really love about this

906
00:31:04,480 --> 00:31:08,720
integration is that the plugin is

907
00:31:06,799 --> 00:31:12,158
extremely interactive

908
00:31:08,720 --> 00:31:14,799
and this drives really well with ida pro

909
00:31:12,159 --> 00:31:16,559
right ida pro the interactive

910
00:31:14,799 --> 00:31:19,600
disassembler that's in the name

911
00:31:16,559 --> 00:31:21,360
of this tool our plugin is also

912
00:31:19,600 --> 00:31:24,639
extremely interactive

913
00:31:21,360 --> 00:31:25,519
as we explore the results as we review

914
00:31:24,640 --> 00:31:28,320
the evidence

915
00:31:25,519 --> 00:31:30,399
in the artifact tree we can easily

916
00:31:28,320 --> 00:31:33,200
hyperlink around the binary

917
00:31:30,399 --> 00:31:35,199
and we can select and highlight the

918
00:31:33,200 --> 00:31:36,399
entries and addresses that support these

919
00:31:35,200 --> 00:31:38,000
conclusions

920
00:31:36,399 --> 00:31:40,158
so i can both find interesting parts of

921
00:31:38,000 --> 00:31:41,840
the binary and also

922
00:31:40,159 --> 00:31:44,559
learn about patterns that i should be

923
00:31:41,840 --> 00:31:46,320
recognizing on my own

924
00:31:44,559 --> 00:31:48,240
it's just a great enhancement to my

925
00:31:46,320 --> 00:31:49,600
existing workflow

926
00:31:48,240 --> 00:31:51,760
so at this point you're probably

927
00:31:49,600 --> 00:31:53,279
thinking where can i get this thing and

928
00:31:51,760 --> 00:31:55,039
how can i start using it

929
00:31:53,279 --> 00:31:56,399
well i promise you by the time we get

930
00:31:55,039 --> 00:31:57,919
off this uh

931
00:31:56,399 --> 00:31:59,678
this presentation what's that like five

932
00:31:57,919 --> 00:32:01,360
minutes from now four minutes

933
00:31:59,679 --> 00:32:02,799
you could have the tool and you could

934
00:32:01,360 --> 00:32:05,760
have already run it

935
00:32:02,799 --> 00:32:06,559
because you need to go to github fireeye

936
00:32:05,760 --> 00:32:08,399
kappa

937
00:32:06,559 --> 00:32:10,158
and you can download download the

938
00:32:08,399 --> 00:32:12,479
standalone executables

939
00:32:10,159 --> 00:32:14,080
and run them right now they don't

940
00:32:12,480 --> 00:32:16,000
require any installation

941
00:32:14,080 --> 00:32:17,918
and they'll work on windows linux and

942
00:32:16,000 --> 00:32:20,000
mac os systems

943
00:32:17,919 --> 00:32:21,760
so go ahead download them give them a

944
00:32:20,000 --> 00:32:23,279
try get a sense for what kappa can

945
00:32:21,760 --> 00:32:25,120
detect today

946
00:32:23,279 --> 00:32:27,039
we'll also be working to get this

947
00:32:25,120 --> 00:32:29,360
release as part of the flare vm

948
00:32:27,039 --> 00:32:32,000
and remnux distributions so that your

949
00:32:29,360 --> 00:32:35,840
analysis workstations are pre-populated

950
00:32:32,000 --> 00:32:36,320
with this tool but we don't want you to

951
00:32:35,840 --> 00:32:38,959
just

952
00:32:36,320 --> 00:32:39,600
download kappa what we want you to be

953
00:32:38,960 --> 00:32:41,760
doing

954
00:32:39,600 --> 00:32:43,678
is to be constantly thinking while

955
00:32:41,760 --> 00:32:45,360
you're doing an investigation

956
00:32:43,679 --> 00:32:46,880
while you're looking at an unknown

957
00:32:45,360 --> 00:32:48,719
binary how

958
00:32:46,880 --> 00:32:50,000
are you making your analytical

959
00:32:48,720 --> 00:32:52,559
conclusions

960
00:32:50,000 --> 00:32:53,360
what pieces of evidence make you think a

961
00:32:52,559 --> 00:32:56,639
program

962
00:32:53,360 --> 00:33:00,000
connects via http injects code

963
00:32:56,640 --> 00:33:03,360
or does some other functionality and

964
00:33:00,000 --> 00:33:06,720
can you encode that as a kappa rule

965
00:33:03,360 --> 00:33:08,879
because when we as a community

966
00:33:06,720 --> 00:33:11,120
encode these rules and share them what

967
00:33:08,880 --> 00:33:13,679
we're doing is we're magnifying

968
00:33:11,120 --> 00:33:14,959
and we're reflecting our experience back

969
00:33:13,679 --> 00:33:16,799
out globally

970
00:33:14,960 --> 00:33:18,559
you know we're we're hoping a couple

971
00:33:16,799 --> 00:33:20,559
hundred people might use kappa

972
00:33:18,559 --> 00:33:22,080
realistically a few thousand people or

973
00:33:20,559 --> 00:33:24,399
even ideally

974
00:33:22,080 --> 00:33:25,918
ten thousand people might use kappa so

975
00:33:24,399 --> 00:33:29,120
if you're able to express

976
00:33:25,919 --> 00:33:31,840
an analytical conclusion with this tool

977
00:33:29,120 --> 00:33:34,399
then that many people just automatically

978
00:33:31,840 --> 00:33:36,559
benefit from your experience

979
00:33:34,399 --> 00:33:38,158
we think that would be just so amazing

980
00:33:36,559 --> 00:33:38,639
and that's why we've made it extremely

981
00:33:38,159 --> 00:33:41,039
easy

982
00:33:38,640 --> 00:33:42,880
to encode your rules to share them with

983
00:33:41,039 --> 00:33:44,720
us because we understand

984
00:33:42,880 --> 00:33:46,159
it's the quality of the rules that are

985
00:33:44,720 --> 00:33:48,640
going to make or break

986
00:33:46,159 --> 00:33:50,159
kappa the more interesting things we can

987
00:33:48,640 --> 00:33:52,000
teach kappa how to recognize

988
00:33:50,159 --> 00:33:53,679
the more useful it's going to be for you

989
00:33:52,000 --> 00:33:57,440
all

990
00:33:53,679 --> 00:34:00,559
so in summary kappa is a tool

991
00:33:57,440 --> 00:34:02,320
that will process programs and make

992
00:34:00,559 --> 00:34:02,879
guesses at what it thinks those programs

993
00:34:02,320 --> 00:34:05,200
can do

994
00:34:02,880 --> 00:34:07,120
it'll try to find those capabilities and

995
00:34:05,200 --> 00:34:09,359
it's going to use rules to do this

996
00:34:07,120 --> 00:34:10,719
and those rules can be written by you

997
00:34:09,359 --> 00:34:12,319
they should be written by you

998
00:34:10,719 --> 00:34:14,158
and very soon we'll have a corpus of

999
00:34:12,320 --> 00:34:16,240
rules that can identify

1000
00:34:14,159 --> 00:34:17,599
all the most interesting behaviors that

1001
00:34:16,239 --> 00:34:20,560
we've actually seen

1002
00:34:17,599 --> 00:34:20,960
in real world malware so at this point i

1003
00:34:20,560 --> 00:34:23,599
want to

1004
00:34:20,960 --> 00:34:25,599
thank you for your time please go ahead

1005
00:34:23,599 --> 00:34:27,280
and shoot any questions for us

1006
00:34:25,599 --> 00:34:29,520
into those chat channels and we'll do

1007
00:34:27,280 --> 00:34:33,860
our best to address them right now

1008
00:34:29,520 --> 00:34:36,949
thank you

1009
00:34:33,860 --> 00:34:36,949
[Music]

1010
00:34:41,280 --> 00:34:43,359
you

