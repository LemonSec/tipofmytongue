1
00:00:01,040 --> 00:00:07,429
[Music]

2
00:00:12,719 --> 00:00:16,160
all right

3
00:00:13,360 --> 00:00:18,800
well next up i am really excited to

4
00:00:16,160 --> 00:00:20,960
introduce to you ryan benson from google

5
00:00:18,800 --> 00:00:22,800
um ryan vince and i have actually had an

6
00:00:20,960 --> 00:00:25,439
interesting kind of

7
00:00:22,800 --> 00:00:27,039
over overlapping path throughout our

8
00:00:25,439 --> 00:00:27,840
careers kind of had a couple of places

9
00:00:27,039 --> 00:00:29,439
where we

10
00:00:27,840 --> 00:00:31,679
uh worked together even though we were

11
00:00:29,439 --> 00:00:33,840
not physically in the same spot

12
00:00:31,679 --> 00:00:35,760
but right now he's uh he's with google

13
00:00:33,840 --> 00:00:38,160
um he's a security engineer there

14
00:00:35,760 --> 00:00:38,960
and he's going to be talking about a

15
00:00:38,160 --> 00:00:40,559
tool

16
00:00:38,960 --> 00:00:42,000
that is near and dear to my heart in the

17
00:00:40,559 --> 00:00:44,559
network forensic world called

18
00:00:42,000 --> 00:00:46,320
unfurl and it's a tool that he'll be

19
00:00:44,559 --> 00:00:47,839
able to uh to talk through and it's also

20
00:00:46,320 --> 00:00:50,559
publicly available

21
00:00:47,840 --> 00:00:52,160
really pulling out all the data that is

22
00:00:50,559 --> 00:00:54,399
available in those urls

23
00:00:52,160 --> 00:00:55,839
um so this is definitely a library i've

24
00:00:54,399 --> 00:00:58,480
been watching or utility i've been

25
00:00:55,840 --> 00:01:00,559
watching for a long time um and i'm

26
00:00:58,480 --> 00:01:01,919
really pumped that that we've got a talk

27
00:01:00,559 --> 00:01:03,199
on it because i know there's a lot of

28
00:01:01,920 --> 00:01:03,840
things that you've been working on with

29
00:01:03,199 --> 00:01:05,199
it so

30
00:01:03,840 --> 00:01:07,040
i'll go ahead and turn it over to you

31
00:01:05,199 --> 00:01:08,080
ryan uh thank you very much for joining

32
00:01:07,040 --> 00:01:11,920
us and uh

33
00:01:08,080 --> 00:01:13,759
the floor is yours hey thank you phil

34
00:01:11,920 --> 00:01:15,200
all right so as this kind of shows here

35
00:01:13,760 --> 00:01:16,799
i'm going to be in for a nice

36
00:01:15,200 --> 00:01:17,360
introduction i'm going to be talking

37
00:01:16,799 --> 00:01:20,320
about

38
00:01:17,360 --> 00:01:20,640
uh unfurl and so that from the tagline

39
00:01:20,320 --> 00:01:23,039
here

40
00:01:20,640 --> 00:01:24,080
unfurl is a tool that lets you extract

41
00:01:23,040 --> 00:01:27,200
and visualize

42
00:01:24,080 --> 00:01:28,798
data from urls uh

43
00:01:27,200 --> 00:01:30,640
so there's lots of tools out there that

44
00:01:28,799 --> 00:01:33,040
uh maybe it's like some kind of threat

45
00:01:30,640 --> 00:01:35,520
intel tools that can take a url

46
00:01:33,040 --> 00:01:36,880
or a domain or an ip and look it up in

47
00:01:35,520 --> 00:01:38,000
some big database and tell you more

48
00:01:36,880 --> 00:01:39,920
information

49
00:01:38,000 --> 00:01:41,360
or maybe there's a tool that uh will

50
00:01:39,920 --> 00:01:42,880
kind of crawl website and tell you what

51
00:01:41,360 --> 00:01:44,399
technologies it's built with like what

52
00:01:42,880 --> 00:01:46,320
kind of stack it has

53
00:01:44,399 --> 00:01:48,560
you know any uh tracking codes embedded

54
00:01:46,320 --> 00:01:50,479
in it uh or maybe enumerate all the sub

55
00:01:48,560 --> 00:01:51,840
domains or the pages like

56
00:01:50,479 --> 00:01:54,240
uh those are all great tools and

57
00:01:51,840 --> 00:01:56,960
referral is none of those things okay

58
00:01:54,240 --> 00:01:59,039
uh unfurl is a tool that focuses on just

59
00:01:56,960 --> 00:02:01,119
the data that's in the url like actually

60
00:01:59,040 --> 00:02:03,280
the string that makes up the url

61
00:02:01,119 --> 00:02:05,520
and pulling out every bit of information

62
00:02:03,280 --> 00:02:09,840
that it can just from that url

63
00:02:05,520 --> 00:02:09,840
and turning it into a directed graph

64
00:02:10,720 --> 00:02:14,319
and so okay what does that actually mean

65
00:02:13,040 --> 00:02:16,319
a direct graph

66
00:02:14,319 --> 00:02:18,958
uh i think the easiest way to explain

67
00:02:16,319 --> 00:02:20,958
that is just to kind of show you

68
00:02:18,959 --> 00:02:22,000
so here we have unfurl and this is the

69
00:02:20,959 --> 00:02:24,879
interface it's pretty simple

70
00:02:22,000 --> 00:02:25,280
there's just a logo uh there's a little

71
00:02:24,879 --> 00:02:27,040
box

72
00:02:25,280 --> 00:02:28,720
and a button that says unfold and so you

73
00:02:27,040 --> 00:02:30,799
put the uh

74
00:02:28,720 --> 00:02:32,400
the url in there and then you click on

75
00:02:30,800 --> 00:02:34,640
referral and then let's see what happens

76
00:02:32,400 --> 00:02:34,640
here

77
00:02:35,519 --> 00:02:39,280
so this is what you get

78
00:02:40,270 --> 00:02:43,280
[Music]

79
00:02:41,360 --> 00:02:45,360
sorry so this is what you get so you

80
00:02:43,280 --> 00:02:47,120
take the url and uh it becomes

81
00:02:45,360 --> 00:02:49,040
the first note there moves down from the

82
00:02:47,120 --> 00:02:50,640
box and becomes the first note in this

83
00:02:49,040 --> 00:02:52,160
uh directed tree

84
00:02:50,640 --> 00:02:54,000
or structure graph and so this is set up

85
00:02:52,160 --> 00:02:55,519
like a tree and so that first node is

86
00:02:54,000 --> 00:02:57,680
called the root node

87
00:02:55,519 --> 00:02:59,599
and the way unfurl works is that it runs

88
00:02:57,680 --> 00:03:00,480
uh so there's the core kind of unfurl

89
00:02:59,599 --> 00:03:01,920
code

90
00:03:00,480 --> 00:03:03,119
and then there's all these parsers and

91
00:03:01,920 --> 00:03:04,799
the parsers are kind of like the

92
00:03:03,120 --> 00:03:05,840
important the meat of like what unfurl

93
00:03:04,800 --> 00:03:08,080
actually does

94
00:03:05,840 --> 00:03:09,280
and unfurl takes every parser and runs

95
00:03:08,080 --> 00:03:11,599
it against every node

96
00:03:09,280 --> 00:03:13,200
and if the node or if the parser is

97
00:03:11,599 --> 00:03:16,238
applicable to that node's content

98
00:03:13,200 --> 00:03:18,238
it will create a child node of some

99
00:03:16,239 --> 00:03:20,400
subcomponent so it's trying to break up

100
00:03:18,239 --> 00:03:22,159
a big thing into a smaller thing that's

101
00:03:20,400 --> 00:03:23,360
kind of the general gist of what unfurl

102
00:03:22,159 --> 00:03:24,959
does

103
00:03:23,360 --> 00:03:27,280
so this first kind of you know contrived

104
00:03:24,959 --> 00:03:30,159
example we're taking this url and we're

105
00:03:27,280 --> 00:03:33,120
breaking it up into its sub components

106
00:03:30,159 --> 00:03:35,120
so first here we have it breaks up first

107
00:03:33,120 --> 00:03:37,519
we have the scheme right so https

108
00:03:35,120 --> 00:03:38,319
is one node uh the next node is network

109
00:03:37,519 --> 00:03:41,920
location

110
00:03:38,319 --> 00:03:43,040
so www.example.com uh then we have the

111
00:03:41,920 --> 00:03:44,559
path

112
00:03:43,040 --> 00:03:47,200
and then we have at the last letter we

113
00:03:44,560 --> 00:03:49,360
have the query string kind of split off

114
00:03:47,200 --> 00:03:51,119
and so for login it runs all of its note

115
00:03:49,360 --> 00:03:52,080
all of its parsers against all those

116
00:03:51,120 --> 00:03:54,159
child nodes

117
00:03:52,080 --> 00:03:55,280
and so for https uh there wasn't really

118
00:03:54,159 --> 00:03:57,200
anything else you could parse out of

119
00:03:55,280 --> 00:03:58,959
that so there's no child nodes

120
00:03:57,200 --> 00:04:01,119
if you look at the network location it

121
00:03:58,959 --> 00:04:01,680
it pulled out the sub domain and the

122
00:04:01,120 --> 00:04:04,400
main name

123
00:04:01,680 --> 00:04:06,080
and then the tld it took the path and

124
00:04:04,400 --> 00:04:07,360
broke it up into the different segments

125
00:04:06,080 --> 00:04:09,840
and then it kind of split the query

126
00:04:07,360 --> 00:04:11,360
string into its kind of pairs right

127
00:04:09,840 --> 00:04:13,439
there

128
00:04:11,360 --> 00:04:15,120
and so this is a very again simple

129
00:04:13,439 --> 00:04:17,599
example but that's kind of just

130
00:04:15,120 --> 00:04:18,649
the general idea of how unfurl works

131
00:04:17,600 --> 00:04:21,829
with urls

132
00:04:18,649 --> 00:04:21,829
[Music]

133
00:04:22,000 --> 00:04:27,199
and so okay why why urls uh so i do a

134
00:04:25,600 --> 00:04:27,600
lot of investigations right that's my

135
00:04:27,199 --> 00:04:29,919
job as

136
00:04:27,600 --> 00:04:31,520
a security engineer and pretty much

137
00:04:29,919 --> 00:04:33,520
every investigation

138
00:04:31,520 --> 00:04:35,198
these days in no matter like the flavor

139
00:04:33,520 --> 00:04:36,799
uh involves like internet related

140
00:04:35,199 --> 00:04:38,320
artifacts right if you're looking at an

141
00:04:36,800 --> 00:04:39,919
insider threat case

142
00:04:38,320 --> 00:04:41,599
like what kind of evidence what kind of

143
00:04:39,919 --> 00:04:42,159
activities a person did in their web

144
00:04:41,600 --> 00:04:44,479
browser

145
00:04:42,160 --> 00:04:46,320
it is obviously important and critical

146
00:04:44,479 --> 00:04:47,199
if you're looking at an intrusion case

147
00:04:46,320 --> 00:04:48,960
you know any kind of network

148
00:04:47,199 --> 00:04:49,759
infrastructure that the attacker has or

149
00:04:48,960 --> 00:04:51,680
used

150
00:04:49,759 --> 00:04:52,800
or where any payloads came from is

151
00:04:51,680 --> 00:04:54,400
important

152
00:04:52,800 --> 00:04:56,240
if you're reverse engineering malware

153
00:04:54,400 --> 00:04:58,000
you might find uh network indicators in

154
00:04:56,240 --> 00:04:59,840
there maybe or maybe the

155
00:04:58,000 --> 00:05:01,199
malware is communicating back to some

156
00:04:59,840 --> 00:05:02,719
server using

157
00:05:01,199 --> 00:05:05,039
you know some kind of url parameters or

158
00:05:02,720 --> 00:05:06,000
something like that uh so urls are kind

159
00:05:05,039 --> 00:05:07,680
of i think the

160
00:05:06,000 --> 00:05:09,919
the most common the least common

161
00:05:07,680 --> 00:05:12,560
denominator in a lot of these kind of uh

162
00:05:09,919 --> 00:05:15,758
internet cases

163
00:05:12,560 --> 00:05:16,240
uh and so i think i want to get the most

164
00:05:15,759 --> 00:05:17,840
i can

165
00:05:16,240 --> 00:05:19,280
out of out of a url i think they're a

166
00:05:17,840 --> 00:05:20,479
little bit overlooked as far as their

167
00:05:19,280 --> 00:05:22,559
utility

168
00:05:20,479 --> 00:05:23,680
uh because also if you have more data

169
00:05:22,560 --> 00:05:25,440
like if you're looking if you're looking

170
00:05:23,680 --> 00:05:26,479
at somebody's web browser history right

171
00:05:25,440 --> 00:05:28,719
you probably have

172
00:05:26,479 --> 00:05:30,240
a whole mess of sqlite databases and

173
00:05:28,720 --> 00:05:32,080
cache files and preferences

174
00:05:30,240 --> 00:05:33,680
and json files and all this good stuff

175
00:05:32,080 --> 00:05:34,479
to look at and you should definitely

176
00:05:33,680 --> 00:05:36,800
look at that right

177
00:05:34,479 --> 00:05:38,000
you should use all the evidence you have

178
00:05:36,800 --> 00:05:40,960
but what if you just have

179
00:05:38,000 --> 00:05:42,400
uh like a firewall log or a proxy log or

180
00:05:40,960 --> 00:05:44,320
you carve some url

181
00:05:42,400 --> 00:05:45,840
from memory or you found it in an

182
00:05:44,320 --> 00:05:48,400
allocated or something

183
00:05:45,840 --> 00:05:50,320
uh we can still get a lot of information

184
00:05:48,400 --> 00:05:53,440
just from that url and so that's kind of

185
00:05:50,320 --> 00:05:54,560
where referral comes in

186
00:05:53,440 --> 00:05:56,080
and then of course everybody everybody

187
00:05:54,560 --> 00:05:56,720
loves an asterisk on the statement right

188
00:05:56,080 --> 00:05:58,719
so

189
00:05:56,720 --> 00:06:01,680
uh we'll we'll get to this uh kind of at

190
00:05:58,720 --> 00:06:01,680
the end of the presentation

191
00:06:03,120 --> 00:06:06,479
okay so as i kind of go through this i

192
00:06:05,199 --> 00:06:08,240
have some uh

193
00:06:06,479 --> 00:06:10,159
i guess general principles that i kind

194
00:06:08,240 --> 00:06:11,759
of apply to my investigations

195
00:06:10,160 --> 00:06:13,360
uh and they're kind of reflected uh in

196
00:06:11,759 --> 00:06:15,680
an unfor all too so i'm gonna

197
00:06:13,360 --> 00:06:17,120
reference them as we go so the first one

198
00:06:15,680 --> 00:06:19,120
that kind of came out of that

199
00:06:17,120 --> 00:06:21,600
uh was use what you have right so if you

200
00:06:19,120 --> 00:06:23,680
have a whole mess of extra data you have

201
00:06:21,600 --> 00:06:24,720
a full browser history and full profile

202
00:06:23,680 --> 00:06:26,080
and all that stuff

203
00:06:24,720 --> 00:06:28,639
you should definitely use it right for

204
00:06:26,080 --> 00:06:30,080
your investigation but if you just have

205
00:06:28,639 --> 00:06:31,280
a url like

206
00:06:30,080 --> 00:06:32,880
you can still use that you should use

207
00:06:31,280 --> 00:06:34,000
what you have and we can get we can

208
00:06:32,880 --> 00:06:36,719
still get value from it for an

209
00:06:34,000 --> 00:06:36,720
investigation

210
00:06:37,759 --> 00:06:41,199
okay this is the part where if i could

211
00:06:39,600 --> 00:06:42,960
actually see the live audience

212
00:06:41,199 --> 00:06:44,720
i would quiz you and say hey can anybody

213
00:06:42,960 --> 00:06:47,198
tell me what this is what

214
00:06:44,720 --> 00:06:48,639
any information about it so i mean i

215
00:06:47,199 --> 00:06:49,919
can't see us but you can still

216
00:06:48,639 --> 00:06:52,720
feel free to speak out what you think

217
00:06:49,919 --> 00:06:55,198
this is uh

218
00:06:52,720 --> 00:06:57,039
okay there's appropriate pause all right

219
00:06:55,199 --> 00:06:59,360
so if you said it was a

220
00:06:57,039 --> 00:07:00,639
timestamp you'd be correct maybe you're

221
00:06:59,360 --> 00:07:01,599
really familiar and stare at these

222
00:07:00,639 --> 00:07:04,160
things a lot

223
00:07:01,599 --> 00:07:05,919
and you thought oh maybe it's a unix

224
00:07:04,160 --> 00:07:07,680
epoch kind of time stamp because it

225
00:07:05,919 --> 00:07:10,960
starts with a one five

226
00:07:07,680 --> 00:07:12,240
uh this is probably relatively recent uh

227
00:07:10,960 --> 00:07:13,680
maybe if you really start these a lot

228
00:07:12,240 --> 00:07:15,280
like i do you thought there was maybe

229
00:07:13,680 --> 00:07:16,000
some fractional seconds because it looks

230
00:07:15,280 --> 00:07:19,039
a little long

231
00:07:16,000 --> 00:07:20,240
to be a normal epoch time stamp

232
00:07:19,039 --> 00:07:22,800
uh and yeah those things are all right

233
00:07:20,240 --> 00:07:26,319
so this is a unix epoch time stamp uh

234
00:07:22,800 --> 00:07:28,240
with milliseconds and so unfurl just

235
00:07:26,319 --> 00:07:30,319
again it has one of the many parsers it

236
00:07:28,240 --> 00:07:31,840
has is for timestamps so

237
00:07:30,319 --> 00:07:33,120
that there's that kind of that blue bar

238
00:07:31,840 --> 00:07:34,239
of the clock it's kind of telling you

239
00:07:33,120 --> 00:07:36,400
that the first node

240
00:07:34,240 --> 00:07:37,280
that uh that number was parsed into

241
00:07:36,400 --> 00:07:39,758
human readable

242
00:07:37,280 --> 00:07:40,479
timestamp and if you want more

243
00:07:39,759 --> 00:07:42,479
information

244
00:07:40,479 --> 00:07:45,039
about that timestamp how it was parsed

245
00:07:42,479 --> 00:07:46,639
if you can hover over

246
00:07:45,039 --> 00:07:49,199
each node it'll tell you more

247
00:07:46,639 --> 00:07:50,639
information about it

248
00:07:49,199 --> 00:07:52,479
this is kind of a general design

249
00:07:50,639 --> 00:07:53,919
philosophy for unfurl

250
00:07:52,479 --> 00:07:55,758
like these graphs i'm showing you right

251
00:07:53,919 --> 00:07:57,599
now are pretty simple and small

252
00:07:55,759 --> 00:07:59,120
but as they get bigger i don't want to

253
00:07:57,599 --> 00:07:59,440
cloud i would i don't want to confuse

254
00:07:59,120 --> 00:08:01,759
the

255
00:07:59,440 --> 00:08:03,919
valuable bits of information with the

256
00:08:01,759 --> 00:08:06,080
extra kind of supporting information

257
00:08:03,919 --> 00:08:07,919
and that's obviously a design choice and

258
00:08:06,080 --> 00:08:09,758
subjective on my part

259
00:08:07,919 --> 00:08:11,840
so i but i try and balance what i think

260
00:08:09,759 --> 00:08:13,840
is useful for the analyst

261
00:08:11,840 --> 00:08:15,198
versus what just my more extra like

262
00:08:13,840 --> 00:08:17,039
trivia kind of stuff

263
00:08:15,199 --> 00:08:18,800
and so some information i hide away in

264
00:08:17,039 --> 00:08:20,318
these hovers so if you hover over a node

265
00:08:18,800 --> 00:08:21,440
you can get some more context around

266
00:08:20,319 --> 00:08:23,599
something

267
00:08:21,440 --> 00:08:25,199
in the same way if you hover over a link

268
00:08:23,599 --> 00:08:26,639
it'll tell you like the blue link with

269
00:08:25,199 --> 00:08:27,440
the clock it'll tell you what kind of

270
00:08:26,639 --> 00:08:30,800
parser

271
00:08:27,440 --> 00:08:32,559
ran this uh

272
00:08:30,800 --> 00:08:34,399
and so again with that like this is a

273
00:08:32,559 --> 00:08:35,279
number that unfurl parsed as a time

274
00:08:34,399 --> 00:08:37,120
stamp

275
00:08:35,279 --> 00:08:38,719
uh and so one of the things that

276
00:08:37,120 --> 00:08:40,000
referral does not to be cluttered is it

277
00:08:38,719 --> 00:08:42,159
only pars things that

278
00:08:40,000 --> 00:08:44,080
are what i call a plausible time stamp

279
00:08:42,159 --> 00:08:44,959
so for this context that means a time

280
00:08:44,080 --> 00:08:47,760
stamp

281
00:08:44,959 --> 00:08:49,279
that is between 2015 and 2025 right

282
00:08:47,760 --> 00:08:51,439
because there's lots of numbers

283
00:08:49,279 --> 00:08:52,800
that you could parse as a timestamp

284
00:08:51,440 --> 00:08:54,320
correctly but it might show like you

285
00:08:52,800 --> 00:08:56,560
know 20 70

286
00:08:54,320 --> 00:08:58,080
or you know 1972 or some things that

287
00:08:56,560 --> 00:08:59,279
like are probably false positive so

288
00:08:58,080 --> 00:08:59,920
again that's the balance of trying to

289
00:08:59,279 --> 00:09:02,399
show you

290
00:08:59,920 --> 00:09:04,959
uh just the most relevant information in

291
00:09:02,399 --> 00:09:04,959
the interface

292
00:09:05,600 --> 00:09:09,120
okay so the second kind of general

293
00:09:07,120 --> 00:09:10,959
principle is automate right so that

294
00:09:09,120 --> 00:09:13,040
translating a timestamp from a number to

295
00:09:10,959 --> 00:09:14,319
a to a human readable timestamp

296
00:09:13,040 --> 00:09:16,719
that's not rocket science there's

297
00:09:14,320 --> 00:09:19,279
probably a dozen or five dozen tools

298
00:09:16,720 --> 00:09:20,959
that can do that for you so maybe using

299
00:09:19,279 --> 00:09:22,720
unfurl just makes this

300
00:09:20,959 --> 00:09:24,160
saves you five seconds you don't have to

301
00:09:22,720 --> 00:09:24,800
copy and paste the number to a different

302
00:09:24,160 --> 00:09:26,319
tool

303
00:09:24,800 --> 00:09:28,160
you don't have to try and decipher click

304
00:09:26,320 --> 00:09:30,160
through the options and see what kind of

305
00:09:28,160 --> 00:09:31,680
timestamp format you think it is

306
00:09:30,160 --> 00:09:33,920
uh but again it's not rocket science

307
00:09:31,680 --> 00:09:34,719
it's pretty simple but these little

308
00:09:33,920 --> 00:09:37,120
automations

309
00:09:34,720 --> 00:09:40,160
i think are kind of what i call unfurls

310
00:09:37,120 --> 00:09:41,600
uh like building block approach

311
00:09:40,160 --> 00:09:43,120
so for one if you have a building block

312
00:09:41,600 --> 00:09:44,240
it just doesn't take you you don't go

313
00:09:43,120 --> 00:09:46,480
just from url

314
00:09:44,240 --> 00:09:48,080
to like some big complicated answer it

315
00:09:46,480 --> 00:09:49,519
shows you unfurl shows you all the

316
00:09:48,080 --> 00:09:51,040
intermediate steps

317
00:09:49,519 --> 00:09:53,040
so kind of it's like a show your work

318
00:09:51,040 --> 00:09:53,680
approach so lets you see what unfurl is

319
00:09:53,040 --> 00:09:56,399
doing

320
00:09:53,680 --> 00:09:57,359
uh it helps you understand i think more

321
00:09:56,399 --> 00:09:59,600
what's going on

322
00:09:57,360 --> 00:10:00,800
in these transforms it also lets you you

323
00:09:59,600 --> 00:10:02,079
know it also lets you double check and

324
00:10:00,800 --> 00:10:02,399
make sure it's not making a mistake

325
00:10:02,079 --> 00:10:05,279
right

326
00:10:02,399 --> 00:10:06,560
all software has bugs uh and again also

327
00:10:05,279 --> 00:10:08,720
i hope it'll help you

328
00:10:06,560 --> 00:10:10,640
learn a better bit about what unfurl is

329
00:10:08,720 --> 00:10:11,440
doing so then for i guess also for your

330
00:10:10,640 --> 00:10:13,120
knowledge

331
00:10:11,440 --> 00:10:14,640
but also if you have to explain this

332
00:10:13,120 --> 00:10:16,399
evidence to somebody else which you

333
00:10:14,640 --> 00:10:18,480
probably will if it's an important case

334
00:10:16,399 --> 00:10:19,519
uh you have a better understanding about

335
00:10:18,480 --> 00:10:21,360
what happened

336
00:10:19,519 --> 00:10:23,600
and why and not just oh a tool told me

337
00:10:21,360 --> 00:10:25,360
this uh

338
00:10:23,600 --> 00:10:26,880
yeah so these automates the other cool

339
00:10:25,360 --> 00:10:28,959
thing i think these building blocks

340
00:10:26,880 --> 00:10:30,000
is just because the automations are

341
00:10:28,959 --> 00:10:32,880
simple and small

342
00:10:30,000 --> 00:10:33,839
doesn't mean they're not valuable uh you

343
00:10:32,880 --> 00:10:35,439
guys are all familiar

344
00:10:33,839 --> 00:10:37,200
cyber chef right i think that really

345
00:10:35,440 --> 00:10:38,640
nicely illustrates the power

346
00:10:37,200 --> 00:10:40,320
of when you chain a lot of small

347
00:10:38,640 --> 00:10:40,880
automations together you can get really

348
00:10:40,320 --> 00:10:43,200
powerful

349
00:10:40,880 --> 00:10:44,480
results right so i think the small

350
00:10:43,200 --> 00:10:46,160
animations are kind of like

351
00:10:44,480 --> 00:10:48,720
greater than sum of their parts uh

352
00:10:46,160 --> 00:10:48,719
situation

353
00:10:50,079 --> 00:10:53,199
okay back to back to audience quiz time

354
00:10:52,079 --> 00:10:55,519
uh

355
00:10:53,200 --> 00:10:57,440
can anybody can you tell me what this is

356
00:10:55,519 --> 00:11:01,839
i mean i can't hear you but

357
00:10:57,440 --> 00:11:01,839
uh what does this look like

358
00:11:02,000 --> 00:11:06,959
if you set a uuid uh you are correct but

359
00:11:05,279 --> 00:11:09,680
can you tell me anything else about this

360
00:11:06,959 --> 00:11:09,680
cdu id

361
00:11:11,600 --> 00:11:14,399
again if you start these things long

362
00:11:12,959 --> 00:11:15,518
enough you could tell me it's a version

363
00:11:14,399 --> 00:11:17,279
one uuid

364
00:11:15,519 --> 00:11:18,959
right and so the little uh cheat sheet

365
00:11:17,279 --> 00:11:20,480
for that the shortcut for that is look

366
00:11:18,959 --> 00:11:21,760
at the third grouping of numbers the

367
00:11:20,480 --> 00:11:23,200
first digit

368
00:11:21,760 --> 00:11:25,519
that happens to be a one so this is a

369
00:11:23,200 --> 00:11:28,560
version one uuid

370
00:11:25,519 --> 00:11:31,279
and again more background about uuids uh

371
00:11:28,560 --> 00:11:31,920
this version one uuid is generated based

372
00:11:31,279 --> 00:11:34,079
off

373
00:11:31,920 --> 00:11:35,599
the system's uh the time and the mac

374
00:11:34,079 --> 00:11:38,560
address so

375
00:11:35,600 --> 00:11:38,560
again that's kind of cool

376
00:11:39,040 --> 00:11:42,079
but yeah so time generated mac address

377
00:11:40,720 --> 00:11:45,279
can we pull that out from

378
00:11:42,079 --> 00:11:46,719
the uuid and in fact we can it's all

379
00:11:45,279 --> 00:11:47,360
just encoded in there so you know how to

380
00:11:46,720 --> 00:11:50,240
pull it out

381
00:11:47,360 --> 00:11:50,240
you can pull those out

382
00:11:50,639 --> 00:11:54,240
and this is where again a little bit

383
00:11:52,160 --> 00:11:56,560
more of that building block approach

384
00:11:54,240 --> 00:11:58,800
so from the uuid the first node this

385
00:11:56,560 --> 00:11:59,439
version one uid is based on time mac

386
00:11:58,800 --> 00:12:00,959
address

387
00:11:59,440 --> 00:12:02,639
that's what i call descriptor note

388
00:12:00,959 --> 00:12:04,079
sometimes it just uh

389
00:12:02,639 --> 00:12:05,839
i think is information that's relevant

390
00:12:04,079 --> 00:12:08,399
to the analyst and so it's just

391
00:12:05,839 --> 00:12:10,000
there's no data in there it's from from

392
00:12:08,399 --> 00:12:11,600
the artifact it's just explaining a

393
00:12:10,000 --> 00:12:13,279
little bit more about what it is

394
00:12:11,600 --> 00:12:16,959
in these next two nodes it tells you the

395
00:12:13,279 --> 00:12:18,399
time generated in the mac address

396
00:12:16,959 --> 00:12:20,000
but you notice the time generated is

397
00:12:18,399 --> 00:12:22,160
just a number right and the mac address

398
00:12:20,000 --> 00:12:23,680
is just a mac address but can we do more

399
00:12:22,160 --> 00:12:27,199
with that

400
00:12:23,680 --> 00:12:28,959
and yes we can so again with unfurl uh

401
00:12:27,200 --> 00:12:29,760
it runs all the parsers it has against

402
00:12:28,959 --> 00:12:31,680
every node

403
00:12:29,760 --> 00:12:32,959
i ran out even all those parsers against

404
00:12:31,680 --> 00:12:34,959
the descriptor node but i mean

405
00:12:32,959 --> 00:12:36,479
uh there's nothing to parse there so it

406
00:12:34,959 --> 00:12:38,880
didn't produce any results

407
00:12:36,480 --> 00:12:40,800
but the time the timestamp parser picked

408
00:12:38,880 --> 00:12:42,079
up that time generated as a time stamp

409
00:12:40,800 --> 00:12:44,079
and translated it

410
00:12:42,079 --> 00:12:45,199
and there's also a mac address uh kind

411
00:12:44,079 --> 00:12:46,880
of translator so it

412
00:12:45,200 --> 00:12:48,480
looks up the you know the first half of

413
00:12:46,880 --> 00:12:50,000
mac address can tell you the vendor

414
00:12:48,480 --> 00:12:53,200
of the mac address and so it does that

415
00:12:50,000 --> 00:12:55,360
kind of translation too

416
00:12:53,200 --> 00:12:57,200
and this is the first example of a graph

417
00:12:55,360 --> 00:12:59,440
where we have different colored edges

418
00:12:57,200 --> 00:13:01,760
or links in this graph like the very

419
00:12:59,440 --> 00:13:03,760
first example was all that very simple

420
00:13:01,760 --> 00:13:04,959
url parser so it's always kind of base

421
00:13:03,760 --> 00:13:08,560
black it's kind of like

422
00:13:04,959 --> 00:13:10,160
the base parser for unfurl the uuid

423
00:13:08,560 --> 00:13:10,880
parser is in this kind of yellow gold

424
00:13:10,160 --> 00:13:12,319
color

425
00:13:10,880 --> 00:13:14,079
and then the blue is the time stamp and

426
00:13:12,320 --> 00:13:16,320
the red is the mac address so

427
00:13:14,079 --> 00:13:18,239
you know again a higher level hopefully

428
00:13:16,320 --> 00:13:20,399
you can kind of glance and get a small

429
00:13:18,240 --> 00:13:21,970
idea about what kind of transform

430
00:13:20,399 --> 00:13:25,120
each of these parsers were doing

431
00:13:21,970 --> 00:13:27,680
[Music]

432
00:13:25,120 --> 00:13:29,680
and time stamps like digital forensics

433
00:13:27,680 --> 00:13:32,638
uh we love time stamps so anytime i can

434
00:13:29,680 --> 00:13:34,479
plot a timestamp from an id like a uuid

435
00:13:32,639 --> 00:13:35,839
that makes you really excited so my team

436
00:13:34,480 --> 00:13:37,200
at google we work on a lot of open

437
00:13:35,839 --> 00:13:39,120
source forensics tools

438
00:13:37,200 --> 00:13:41,040
uh one of them is plaza which is

439
00:13:39,120 --> 00:13:43,120
basically try to pull the time stamps

440
00:13:41,040 --> 00:13:44,880
out of everything you can imagine

441
00:13:43,120 --> 00:13:46,399
and then time sketch is a nice way to

442
00:13:44,880 --> 00:13:47,120
view all those timestamps that you

443
00:13:46,399 --> 00:13:49,600
extracted

444
00:13:47,120 --> 00:13:51,120
oh so anytime i can find a time stamp as

445
00:13:49,600 --> 00:13:53,760
a forensic analyst i'm i'm pretty

446
00:13:51,120 --> 00:13:53,760
excited about it

447
00:13:55,519 --> 00:14:02,399
okay back to crazy time again uh what is

448
00:13:58,160 --> 00:14:04,639
this guy

449
00:14:02,399 --> 00:14:06,560
if you set a uuid like the last one you

450
00:14:04,639 --> 00:14:08,160
would you'd be correct

451
00:14:06,560 --> 00:14:09,839
and again what's what's the next step so

452
00:14:08,160 --> 00:14:12,319
i'm looking at the third grouping

453
00:14:09,839 --> 00:14:14,160
first digits that's a four it's a

454
00:14:12,320 --> 00:14:16,880
version for uid

455
00:14:14,160 --> 00:14:17,680
uh and unlike the version one uid the

456
00:14:16,880 --> 00:14:20,160
version four

457
00:14:17,680 --> 00:14:21,839
is random uh there's no timestamps

458
00:14:20,160 --> 00:14:23,439
there's no fun stuff hidden in it we

459
00:14:21,839 --> 00:14:26,240
can't pull anything out of it

460
00:14:23,440 --> 00:14:26,800
uh so you know that's sad uh this is

461
00:14:26,240 --> 00:14:28,560
also the

462
00:14:26,800 --> 00:14:30,240
unfortunately the most common uuid

463
00:14:28,560 --> 00:14:32,000
you'll find kind of used today

464
00:14:30,240 --> 00:14:34,079
because like there's a good reason why

465
00:14:32,000 --> 00:14:37,040
you want to have a random id instead of

466
00:14:34,079 --> 00:14:38,239
extracting things from it uh but so the

467
00:14:37,040 --> 00:14:40,079
description note here

468
00:14:38,240 --> 00:14:43,519
version 4 uid is your only generated it

469
00:14:40,079 --> 00:14:46,719
it inferal is telling you that

470
00:14:43,519 --> 00:14:48,320
in right but i mean i don't think that's

471
00:14:46,720 --> 00:14:49,040
a complete waste i think i still think

472
00:14:48,320 --> 00:14:52,000
that is

473
00:14:49,040 --> 00:14:52,719
is helpful uh because the next kind of

474
00:14:52,000 --> 00:14:55,040
principle is

475
00:14:52,720 --> 00:14:56,079
is recognized dead ends right so and

476
00:14:55,040 --> 00:14:58,959
ferl could tell me

477
00:14:56,079 --> 00:14:59,680
that this this 128 bits encoded as a

478
00:14:58,959 --> 00:15:02,479
string here

479
00:14:59,680 --> 00:15:04,479
which is a uuid uh is random like

480
00:15:02,480 --> 00:15:06,240
there's no further value in there

481
00:15:04,480 --> 00:15:08,160
stop thinking about it move on move your

482
00:15:06,240 --> 00:15:09,279
investigative focus and your brain power

483
00:15:08,160 --> 00:15:11,439
to something where you might actually

484
00:15:09,279 --> 00:15:12,560
get some more results uh so i think

485
00:15:11,440 --> 00:15:14,160
recognizing dead ends in your

486
00:15:12,560 --> 00:15:15,040
investigation is a good way to keep

487
00:15:14,160 --> 00:15:17,279
focused

488
00:15:15,040 --> 00:15:18,480
uh and it's also a great way to just

489
00:15:17,279 --> 00:15:19,120
kind of keep you on track so i think

490
00:15:18,480 --> 00:15:22,480
unfurl

491
00:15:19,120 --> 00:15:23,680
uh denoting when something is random or

492
00:15:22,480 --> 00:15:25,920
there's nothing in there i think is

493
00:15:23,680 --> 00:15:27,680
still valuable it's like we showed we

494
00:15:25,920 --> 00:15:28,880
looked at uid v4

495
00:15:27,680 --> 00:15:30,719
which is probably the most common

496
00:15:28,880 --> 00:15:32,800
example of this

497
00:15:30,720 --> 00:15:34,160
so those are random but also looking

498
00:15:32,800 --> 00:15:36,160
more if you ever looked at

499
00:15:34,160 --> 00:15:37,199
like medium the blog site there's like a

500
00:15:36,160 --> 00:15:38,800
little hash attached

501
00:15:37,199 --> 00:15:41,040
a random looking string attached to the

502
00:15:38,800 --> 00:15:42,160
end of the urls for tracking that's a

503
00:15:41,040 --> 00:15:44,719
random number

504
00:15:42,160 --> 00:15:45,920
that's random so there's nothing juicy

505
00:15:44,720 --> 00:15:47,600
hidden in there

506
00:15:45,920 --> 00:15:49,599
uh i was recently looking at some

507
00:15:47,600 --> 00:15:50,000
spotify urls and there's this big long

508
00:15:49,600 --> 00:15:51,600
hex

509
00:15:50,000 --> 00:15:53,440
looking string in there and that's also

510
00:15:51,600 --> 00:15:54,320
it's just a random number nothing hidden

511
00:15:53,440 --> 00:15:55,759
in there but

512
00:15:54,320 --> 00:15:57,600
it's good to recognize these and so i

513
00:15:55,759 --> 00:15:59,040
can stop like thinking about what it is

514
00:15:57,600 --> 00:16:01,920
and move on to something that could

515
00:15:59,040 --> 00:16:01,920
actually help my case

516
00:16:03,120 --> 00:16:07,120
okay enough with these fun kind of

517
00:16:04,720 --> 00:16:09,279
made-up examples uh we're at the dfr

518
00:16:07,120 --> 00:16:10,639
summit and we all love twitter

519
00:16:09,279 --> 00:16:12,959
uh hopefully we're all tweeting as

520
00:16:10,639 --> 00:16:14,720
ourselves today uh

521
00:16:12,959 --> 00:16:16,239
and so here's a little example of

522
00:16:14,720 --> 00:16:17,680
looking at a twitter url

523
00:16:16,240 --> 00:16:19,759
all right so we have again the simple

524
00:16:17,680 --> 00:16:21,680
unreferral interface you just take

525
00:16:19,759 --> 00:16:22,959
uh this is a url of a tweet from my

526
00:16:21,680 --> 00:16:25,120
friend phil moore

527
00:16:22,959 --> 00:16:28,560
and you let's just put that in there and

528
00:16:25,120 --> 00:16:28,560
click the unfurl button

529
00:16:28,800 --> 00:16:32,160
okay so here's what it looks like so we

530
00:16:31,839 --> 00:16:34,160
have

531
00:16:32,160 --> 00:16:35,360
at the top we kind of have the base uh

532
00:16:34,160 --> 00:16:37,199
url parsers

533
00:16:35,360 --> 00:16:39,040
breaking out the like the domain name

534
00:16:37,199 --> 00:16:41,279
twitter and then like the path

535
00:16:39,040 --> 00:16:43,599
and then the next time the ul parser is

536
00:16:41,279 --> 00:16:45,519
breaking up the path

537
00:16:43,600 --> 00:16:46,720
uh into fillmore and then status and

538
00:16:45,519 --> 00:16:48,240
then this long number

539
00:16:46,720 --> 00:16:50,320
and that long number is split up into

540
00:16:48,240 --> 00:16:53,279
some sub things so let's uh zoom in on

541
00:16:50,320 --> 00:16:53,279
that just a little bit

542
00:16:53,920 --> 00:16:57,759
okay so twitter uh i'm assuming most

543
00:16:56,320 --> 00:17:00,800
people are familiar with twitter

544
00:16:57,759 --> 00:17:01,680
uh so back in the day in 2010 they were

545
00:17:00,800 --> 00:17:04,559
growing a lot

546
00:17:01,680 --> 00:17:05,839
and they needed a a kind of id structure

547
00:17:04,559 --> 00:17:06,480
and they wanted these things to be

548
00:17:05,839 --> 00:17:08,799
generated

549
00:17:06,480 --> 00:17:10,720
quickly and on distributed in the

550
00:17:08,799 --> 00:17:13,199
distributed way so on lots of computers

551
00:17:10,720 --> 00:17:15,520
no coordination another wrinkle is that

552
00:17:13,199 --> 00:17:17,839
they wanted them to be roughly sortable

553
00:17:15,520 --> 00:17:19,439
by time so if the number is smaller uh

554
00:17:17,839 --> 00:17:20,720
it's an older tweet or that's an older

555
00:17:19,439 --> 00:17:23,760
object if it's a newer

556
00:17:20,720 --> 00:17:25,280
if it's a larger number it's newer

557
00:17:23,760 --> 00:17:27,280
and so they come up with a scheme called

558
00:17:25,280 --> 00:17:28,480
snowflakes so this number is a twitter

559
00:17:27,280 --> 00:17:30,320
snowflake

560
00:17:28,480 --> 00:17:32,320
and so from the snowflake the first part

561
00:17:30,320 --> 00:17:33,520
of that number is a time stamp which we

562
00:17:32,320 --> 00:17:35,280
can extract

563
00:17:33,520 --> 00:17:36,879
and then for the kind of uniqueness the

564
00:17:35,280 --> 00:17:37,918
distributed part of the snowflake we can

565
00:17:36,880 --> 00:17:40,240
pull out some

566
00:17:37,919 --> 00:17:42,160
uh machine ids and sequence numbers uh

567
00:17:40,240 --> 00:17:42,640
on the at the on the right kind of of

568
00:17:42,160 --> 00:17:46,000
the

569
00:17:42,640 --> 00:17:48,720
of the snowflake

570
00:17:46,000 --> 00:17:49,919
again like i could have gone from the

571
00:17:48,720 --> 00:17:51,520
snowflake

572
00:17:49,919 --> 00:17:52,960
pulling out that number and translating

573
00:17:51,520 --> 00:17:54,879
it immediately inside that to a

574
00:17:52,960 --> 00:17:55,600
timestamp but instead i left it as just

575
00:17:54,880 --> 00:17:57,520
a number

576
00:17:55,600 --> 00:17:59,360
and then unfurl picked up that it was a

577
00:17:57,520 --> 00:18:00,960
timestamp and then translate it for you

578
00:17:59,360 --> 00:18:04,799
in a human readable kind of way

579
00:18:00,960 --> 00:18:07,360
uh right there okay cool so we pulled a

580
00:18:04,799 --> 00:18:09,600
time stamp out of the snowflake

581
00:18:07,360 --> 00:18:11,280
great uh what does that timestamp

582
00:18:09,600 --> 00:18:14,399
actually mean so let's try and do some

583
00:18:11,280 --> 00:18:16,559
looking so this is uh that's

584
00:18:14,400 --> 00:18:17,840
again that's the tweet the url of the

585
00:18:16,559 --> 00:18:20,160
tweet at the top and then here's the

586
00:18:17,840 --> 00:18:21,199
content by phil of that tweet

587
00:18:20,160 --> 00:18:22,720
and then if you look at something on

588
00:18:21,200 --> 00:18:24,240
twitter you kind of see at the bottom it

589
00:18:22,720 --> 00:18:26,000
can tell you

590
00:18:24,240 --> 00:18:27,520
uh the time it was sent and like the app

591
00:18:26,000 --> 00:18:28,240
it was sent and whatever right so here

592
00:18:27,520 --> 00:18:29,750
we have

593
00:18:28,240 --> 00:18:31,440
uh 10 34 pm

594
00:18:29,750 --> 00:18:33,440
[Music]

595
00:18:31,440 --> 00:18:35,120
and then here we have the the node from

596
00:18:33,440 --> 00:18:37,039
unfurl and accounting for

597
00:18:35,120 --> 00:18:38,320
time zones uh in australia versus

598
00:18:37,039 --> 00:18:40,400
pacific time

599
00:18:38,320 --> 00:18:42,799
uh yeah so this time is when the tweet

600
00:18:40,400 --> 00:18:43,440
was sent so now we that's kind of cool

601
00:18:42,799 --> 00:18:46,240
we can tell

602
00:18:43,440 --> 00:18:46,960
just from a url uh no api lookups no

603
00:18:46,240 --> 00:18:49,360
anything like that

604
00:18:46,960 --> 00:18:50,640
we can tell when a tweet was sent just

605
00:18:49,360 --> 00:18:52,399
from information embedded in that

606
00:18:50,640 --> 00:18:56,240
snowflake so

607
00:18:52,400 --> 00:18:58,240
i think that's pretty neat

608
00:18:56,240 --> 00:18:59,600
and let's actually go back and look at

609
00:18:58,240 --> 00:19:00,400
that tweet so phil has done a lot of

610
00:18:59,600 --> 00:19:02,320
great work on

611
00:19:00,400 --> 00:19:03,679
finding stuff hidden inside or not

612
00:19:02,320 --> 00:19:06,320
hidden uh

613
00:19:03,679 --> 00:19:07,120
decoding things inside google urls uh

614
00:19:06,320 --> 00:19:08,960
and then this tweet

615
00:19:07,120 --> 00:19:10,399
is talking about a new one he found the

616
00:19:08,960 --> 00:19:12,720
sx srf

617
00:19:10,400 --> 00:19:13,600
parameter and he's saying it looks like

618
00:19:12,720 --> 00:19:15,200
a bunch of uh

619
00:19:13,600 --> 00:19:16,879
kind of stuff and then a colon and then

620
00:19:15,200 --> 00:19:19,360
a number that looks like an epoch

621
00:19:16,880 --> 00:19:19,360
timestamp

622
00:19:20,240 --> 00:19:23,600
and so again google urls right i

623
00:19:22,320 --> 00:19:24,000
couldn't do this talk without talking

624
00:19:23,600 --> 00:19:25,918
about

625
00:19:24,000 --> 00:19:28,400
google search urls they're probably the

626
00:19:25,919 --> 00:19:30,160
best example the most common example

627
00:19:28,400 --> 00:19:32,000
of huge big urls you're going to see on

628
00:19:30,160 --> 00:19:33,840
the internet that probably have a bunch

629
00:19:32,000 --> 00:19:37,039
of fun stuff hidden inside them

630
00:19:33,840 --> 00:19:38,480
uh and you'd be correct but so

631
00:19:37,039 --> 00:19:40,879
i think what i used to do and what i

632
00:19:38,480 --> 00:19:43,120
still do uh is the first thing as i look

633
00:19:40,880 --> 00:19:44,720
at this url i see it's google.com

634
00:19:43,120 --> 00:19:46,399
search and then i just scan it looking

635
00:19:44,720 --> 00:19:47,840
for the q equals

636
00:19:46,400 --> 00:19:49,679
to find out what the person has searched

637
00:19:47,840 --> 00:19:51,840
for right and i imagine that's probably

638
00:19:49,679 --> 00:19:53,440
the approach that most people take uh

639
00:19:51,840 --> 00:19:54,240
you can just find the queue for the

640
00:19:53,440 --> 00:19:56,160
query

641
00:19:54,240 --> 00:20:00,000
and look at that and see that the person

642
00:19:56,160 --> 00:20:01,919
search for gfr.blog space unfurl

643
00:20:00,000 --> 00:20:03,600
so again i think that's probably the

644
00:20:01,919 --> 00:20:05,600
most valuable part of this

645
00:20:03,600 --> 00:20:07,280
url right knowing what the person

646
00:20:05,600 --> 00:20:07,918
searched for in the fact it was google

647
00:20:07,280 --> 00:20:10,320
search

648
00:20:07,919 --> 00:20:11,600
uh but it's by no means the only thing

649
00:20:10,320 --> 00:20:14,000
that we can pull out of it

650
00:20:11,600 --> 00:20:16,399
so let's uh throw this this puppy into

651
00:20:14,000 --> 00:20:16,400
unfurl

652
00:20:17,280 --> 00:20:21,039
okay so i know you can't read that it's

653
00:20:18,960 --> 00:20:24,880
very tiny but there is a lot of stuff in

654
00:20:21,039 --> 00:20:24,879
this url so we'll zoom in on the pieces

655
00:20:25,360 --> 00:20:28,559
all right so here we have kind of the

656
00:20:26,880 --> 00:20:31,600
base url parser

657
00:20:28,559 --> 00:20:33,200
just pulls out the domain and search but

658
00:20:31,600 --> 00:20:34,480
all the good stuff that we kind of care

659
00:20:33,200 --> 00:20:37,600
about and this is

660
00:20:34,480 --> 00:20:37,600
in the query string

661
00:20:38,320 --> 00:20:41,200
so this is going to step through some

662
00:20:39,760 --> 00:20:42,158
kind of examples from the query string

663
00:20:41,200 --> 00:20:44,000
here

664
00:20:42,159 --> 00:20:45,360
so we have the first we just parsed out

665
00:20:44,000 --> 00:20:48,080
the queue right so q

666
00:20:45,360 --> 00:20:49,600
for query is jfr blog space unfurl so

667
00:20:48,080 --> 00:20:50,320
that was simple it just did the url

668
00:20:49,600 --> 00:20:53,199
escape

669
00:20:50,320 --> 00:20:54,879
translating that plus to a space uh but

670
00:20:53,200 --> 00:20:55,760
again it pulls out this query so you can

671
00:20:54,880 --> 00:20:58,080
easily see

672
00:20:55,760 --> 00:20:59,440
what the person searched for there's

673
00:20:58,080 --> 00:21:01,120
another query in there

674
00:20:59,440 --> 00:21:02,720
another parameter in there called oq

675
00:21:01,120 --> 00:21:04,959
which is the original query

676
00:21:02,720 --> 00:21:06,400
this is typically the same as the query

677
00:21:04,960 --> 00:21:08,000
but it can be different if you use like

678
00:21:06,400 --> 00:21:11,120
a suggestion

679
00:21:08,000 --> 00:21:11,120
or other things like that

680
00:21:11,679 --> 00:21:15,760
all right next we have the sxsrf

681
00:21:14,080 --> 00:21:17,120
parameter that phil was talking about

682
00:21:15,760 --> 00:21:19,280
and just like he said

683
00:21:17,120 --> 00:21:21,120
we split off that first part don't know

684
00:21:19,280 --> 00:21:22,559
what it is well we said we split that

685
00:21:21,120 --> 00:21:23,600
parameter on the colon so the first part

686
00:21:22,559 --> 00:21:25,600
is on the left

687
00:21:23,600 --> 00:21:27,039
and the second part is that long number

688
00:21:25,600 --> 00:21:29,120
and then again unfurl picked it up that

689
00:21:27,039 --> 00:21:31,840
it was a timestamp and so it translated

690
00:21:29,120 --> 00:21:31,840
it

691
00:21:32,880 --> 00:21:36,480
over here we have another parameter so

692
00:21:34,400 --> 00:21:38,640
the e i parameter there's a lot of good

693
00:21:36,480 --> 00:21:40,320
research done by people on this

694
00:21:38,640 --> 00:21:42,000
so we know how to split it up into these

695
00:21:40,320 --> 00:21:43,280
four different components but right now

696
00:21:42,000 --> 00:21:44,640
we only know

697
00:21:43,280 --> 00:21:46,158
what the first part is i mean we know

698
00:21:44,640 --> 00:21:46,720
that it's a that it looks like a time

699
00:21:46,159 --> 00:21:47,919
stamp

700
00:21:46,720 --> 00:21:49,600
the other three we're not sure what

701
00:21:47,919 --> 00:21:50,080
those are so infertile can split those

702
00:21:49,600 --> 00:21:51,840
out

703
00:21:50,080 --> 00:21:52,960
you can show you those numbers in case

704
00:21:51,840 --> 00:21:53,520
maybe you're the person to figure out

705
00:21:52,960 --> 00:21:56,080
what those

706
00:21:53,520 --> 00:21:57,760
three things mean uh but then it also

707
00:21:56,080 --> 00:22:00,320
translates that first one into into a

708
00:21:57,760 --> 00:22:00,320
timestamp

709
00:22:01,520 --> 00:22:05,679
and then the vet if you've uh looked at

710
00:22:03,919 --> 00:22:08,000
these before that is one of my favorite

711
00:22:05,679 --> 00:22:10,159
uh kind of parameters this is all about

712
00:22:08,000 --> 00:22:11,840
how somebody clicked on a link

713
00:22:10,159 --> 00:22:13,520
so this first parameter is the link

714
00:22:11,840 --> 00:22:15,280
index that it pulled out this tells you

715
00:22:13,520 --> 00:22:17,120
how far down the page this was like the

716
00:22:15,280 --> 00:22:17,760
11th link on the page the person clicked

717
00:22:17,120 --> 00:22:20,399
on

718
00:22:17,760 --> 00:22:22,799
uh the link type uh there are like this

719
00:22:20,400 --> 00:22:24,799
one is 60 000 something there are lots

720
00:22:22,799 --> 00:22:26,080
of link types uh if it's one of the kind

721
00:22:24,799 --> 00:22:27,200
if it's one of the ones

722
00:22:26,080 --> 00:22:29,439
that kind of the community has

723
00:22:27,200 --> 00:22:30,960
researched uh infero will translate that

724
00:22:29,440 --> 00:22:33,200
the link type for you like it was a

725
00:22:30,960 --> 00:22:34,130
video or a book or a news or whatever it

726
00:22:33,200 --> 00:22:35,520
is

727
00:22:34,130 --> 00:22:37,520
[Music]

728
00:22:35,520 --> 00:22:39,600
uh then we have the time stamp again uh

729
00:22:37,520 --> 00:22:40,879
it's just pulled out as a number unfurl

730
00:22:39,600 --> 00:22:42,000
picks it up as a time stamp and

731
00:22:40,880 --> 00:22:43,039
translates it

732
00:22:42,000 --> 00:22:44,640
and then we have these other two

733
00:22:43,039 --> 00:22:45,919
parameters that we don't know what they

734
00:22:44,640 --> 00:22:47,570
are but they're again just kind of

735
00:22:45,919 --> 00:22:50,770
shown there for completeness is sake

736
00:22:47,570 --> 00:22:50,770
[Music]

737
00:22:51,120 --> 00:22:54,719
and then this one the gs underscore l

738
00:22:53,120 --> 00:22:57,918
parameter from a google search

739
00:22:54,720 --> 00:22:59,280
is pretty neat uh again i think phil

740
00:22:57,919 --> 00:23:01,440
did it maybe some other people did some

741
00:22:59,280 --> 00:23:03,520
research on this this is a whole mess of

742
00:23:01,440 --> 00:23:05,440
parameters they're kind of separated by

743
00:23:03,520 --> 00:23:06,720
by a period and if there's no parameter

744
00:23:05,440 --> 00:23:07,520
between the periods that just means the

745
00:23:06,720 --> 00:23:10,720
answer or the

746
00:23:07,520 --> 00:23:12,240
value is null uh there's at least 26

747
00:23:10,720 --> 00:23:13,840
of these i think we only have an idea

748
00:23:12,240 --> 00:23:14,159
what maybe six or seven of them mean and

749
00:23:13,840 --> 00:23:15,600
so

750
00:23:14,159 --> 00:23:18,480
those are just the ones that unfurl

751
00:23:15,600 --> 00:23:20,879
shows you uh but this is all about

752
00:23:18,480 --> 00:23:22,159
how someone used the search thing so it

753
00:23:20,880 --> 00:23:24,000
tells you they they

754
00:23:22,159 --> 00:23:25,280
selected search terms using the keyboard

755
00:23:24,000 --> 00:23:27,120
using the enter key

756
00:23:25,280 --> 00:23:28,480
you can tell you how long someone was on

757
00:23:27,120 --> 00:23:30,158
the search page

758
00:23:28,480 --> 00:23:32,159
uh in total uh before they started

759
00:23:30,159 --> 00:23:33,679
typing uh how long

760
00:23:32,159 --> 00:23:35,760
uh before they selected the search box

761
00:23:33,679 --> 00:23:37,600
all this really nifty kind of like

762
00:23:35,760 --> 00:23:38,960
i mean it's basically trivia right about

763
00:23:37,600 --> 00:23:41,520
what a person did

764
00:23:38,960 --> 00:23:42,720
uh but i mean this stuff like it's it's

765
00:23:41,520 --> 00:23:45,039
trivia and it's not

766
00:23:42,720 --> 00:23:46,400
important uh until it's really important

767
00:23:45,039 --> 00:23:47,039
to your case right every case is

768
00:23:46,400 --> 00:23:48,480
different

769
00:23:47,039 --> 00:23:50,080
and sometimes these little bits of

770
00:23:48,480 --> 00:23:52,480
context and little bits of help

771
00:23:50,080 --> 00:23:53,760
uh can it can make or break a case right

772
00:23:52,480 --> 00:23:55,600
or it

773
00:23:53,760 --> 00:23:57,760
can at least be really viable

774
00:23:55,600 --> 00:23:59,279
corroboration of some other

775
00:23:57,760 --> 00:24:00,960
other finding that you have right so i

776
00:23:59,279 --> 00:24:04,320
think all this neat little stuff is

777
00:24:00,960 --> 00:24:06,159
pretty fun

778
00:24:04,320 --> 00:24:08,158
so i'm just kind of making easier to see

779
00:24:06,159 --> 00:24:09,360
these again i'm pulling those three time

780
00:24:08,159 --> 00:24:11,200
stamps we talked about

781
00:24:09,360 --> 00:24:12,479
uh in a little bigger view so we have

782
00:24:11,200 --> 00:24:15,200
the sx srf

783
00:24:12,480 --> 00:24:16,799
the ei and the vid and looking at these

784
00:24:15,200 --> 00:24:19,360
what's interesting

785
00:24:16,799 --> 00:24:21,200
is they're all approximately the same

786
00:24:19,360 --> 00:24:22,799
time but not exactly

787
00:24:21,200 --> 00:24:24,799
uh it's also interesting that they all

788
00:24:22,799 --> 00:24:26,240
have different levels of precision right

789
00:24:24,799 --> 00:24:28,960
so the first one

790
00:24:26,240 --> 00:24:30,880
is millisecond timestamp the ei

791
00:24:28,960 --> 00:24:32,400
parameter is just to the second

792
00:24:30,880 --> 00:24:34,320
and the vet is actually to the micro

793
00:24:32,400 --> 00:24:35,760
second

794
00:24:34,320 --> 00:24:38,320
so again i think it's interesting that

795
00:24:35,760 --> 00:24:40,158
these all are again another

796
00:24:38,320 --> 00:24:41,760
they're each individual points pointing

797
00:24:40,159 --> 00:24:44,159
to a timestamp uh

798
00:24:41,760 --> 00:24:46,559
i think from research we've kind of

799
00:24:44,159 --> 00:24:49,760
concluded that this is the time

800
00:24:46,559 --> 00:24:51,520
of the search session started which many

801
00:24:49,760 --> 00:24:52,879
times is very close to when the search

802
00:24:51,520 --> 00:24:54,799
itself happened but that's not

803
00:24:52,880 --> 00:24:56,320
necessarily always true

804
00:24:54,799 --> 00:24:58,000
so again all this stuff is all these

805
00:24:56,320 --> 00:25:00,399
research about what these parameters

806
00:24:58,000 --> 00:25:01,600
mean is all from the community

807
00:25:00,400 --> 00:25:03,279
trying to figure it out right because

808
00:25:01,600 --> 00:25:04,480
these things are not uh open source

809
00:25:03,279 --> 00:25:05,520
they're not published by google what

810
00:25:04,480 --> 00:25:06,720
they are so again

811
00:25:05,520 --> 00:25:08,080
this is just our interpretation and

812
00:25:06,720 --> 00:25:09,919
google could also feel free to change

813
00:25:08,080 --> 00:25:13,279
these anytime right so that will

814
00:25:09,919 --> 00:25:14,960
again install this kind of grain of salt

815
00:25:13,279 --> 00:25:16,720
so yeah that's kind of cool we got three

816
00:25:14,960 --> 00:25:18,240
parameters we've got three time stamps

817
00:25:16,720 --> 00:25:19,039
hidden inside that long string that we

818
00:25:18,240 --> 00:25:20,559
started with

819
00:25:19,039 --> 00:25:22,960
that we didn't know before plus a little

820
00:25:20,559 --> 00:25:28,080
extra fun uh timing stuff in there and

821
00:25:22,960 --> 00:25:29,760
how they clicked on a link and etc

822
00:25:28,080 --> 00:25:31,120
and so yeah so this is uh the kind of

823
00:25:29,760 --> 00:25:31,919
fourth principle i want to say is

824
00:25:31,120 --> 00:25:33,918
details matter

825
00:25:31,919 --> 00:25:35,919
right so we started with that google

826
00:25:33,919 --> 00:25:38,000
search we can skim it and find

827
00:25:35,919 --> 00:25:39,039
that i searched for dfr.blog space

828
00:25:38,000 --> 00:25:40,720
unfurl

829
00:25:39,039 --> 00:25:42,000
uh and i still think that's the most

830
00:25:40,720 --> 00:25:42,880
important part out of all the things

831
00:25:42,000 --> 00:25:44,640
that i just talked about

832
00:25:42,880 --> 00:25:47,039
but all those details that we found in

833
00:25:44,640 --> 00:25:49,200
the rest of the url i think they matter

834
00:25:47,039 --> 00:25:51,520
so don't overlook the details i mean

835
00:25:49,200 --> 00:25:54,720
with urls or with i think anything else

836
00:25:51,520 --> 00:25:54,720
in a friendly investigation

837
00:25:55,840 --> 00:26:00,000
all right so we're chatting on discord

838
00:25:57,760 --> 00:26:02,000
with this summit right so discord's a

839
00:26:00,000 --> 00:26:03,279
chat application uh it can be web-based

840
00:26:02,000 --> 00:26:06,159
or can be a client

841
00:26:03,279 --> 00:26:07,760
uh either way but this is a url of a

842
00:26:06,159 --> 00:26:09,520
discord message if you right-click on a

843
00:26:07,760 --> 00:26:10,000
message you can say copy link to it and

844
00:26:09,520 --> 00:26:12,960
this is

845
00:26:10,000 --> 00:26:15,039
the kind of information you would get

846
00:26:12,960 --> 00:26:18,559
and so i'll talk about this real quick

847
00:26:15,039 --> 00:26:20,158
so the url is just discord.com

848
00:26:18,559 --> 00:26:22,000
i'm gonna change it recently to discord

849
00:26:20,159 --> 00:26:23,840
from discord app to discord.com

850
00:26:22,000 --> 00:26:25,120
anyway that slash channels and then

851
00:26:23,840 --> 00:26:27,600
slash uh three

852
00:26:25,120 --> 00:26:30,000
really big numbers that's what the url

853
00:26:27,600 --> 00:26:30,000
looks like

854
00:26:30,159 --> 00:26:34,240
and let's see what i'm feeling can do

855
00:26:31,919 --> 00:26:36,480
with that okay so it kind of parsed out

856
00:26:34,240 --> 00:26:39,840
the discord the domain and then the

857
00:26:36,480 --> 00:26:43,360
the path and then it parsed out

858
00:26:39,840 --> 00:26:44,639
uh those those big numbers into smaller

859
00:26:43,360 --> 00:26:46,559
uh into you can parse out the

860
00:26:44,640 --> 00:26:49,279
information from those numbers

861
00:26:46,559 --> 00:26:50,559
so discord kind of followed suit with uh

862
00:26:49,279 --> 00:26:52,480
twitter i mean and twitter was

863
00:26:50,559 --> 00:26:54,960
i mean they're by far the only person to

864
00:26:52,480 --> 00:26:56,240
do that uh twitter's snowflake idea has

865
00:26:54,960 --> 00:26:58,000
spawned a whole

866
00:26:56,240 --> 00:26:59,840
there are so many variants of the

867
00:26:58,000 --> 00:27:02,080
snowflake used by different companies uh

868
00:26:59,840 --> 00:27:04,399
the discord uh has their own thing

869
00:27:02,080 --> 00:27:06,240
called a discord snowflake

870
00:27:04,400 --> 00:27:08,720
and so falls in a similar path there is

871
00:27:06,240 --> 00:27:10,720
a timestamp embedded in the beginning

872
00:27:08,720 --> 00:27:12,320
of the identifier and then there's some

873
00:27:10,720 --> 00:27:14,480
other bits that infer will parse out

874
00:27:12,320 --> 00:27:16,000
like the worker id process id increment

875
00:27:14,480 --> 00:27:18,399
uh that again less are important but are

876
00:27:16,000 --> 00:27:21,440
still there about in the

877
00:27:18,399 --> 00:27:25,678
discord snowflake

878
00:27:21,440 --> 00:27:27,440
so like our last uh

879
00:27:25,679 --> 00:27:28,960
like our last uh url we looked at for

880
00:27:27,440 --> 00:27:30,559
the google searched we have we pulled

881
00:27:28,960 --> 00:27:33,120
three time steps out of this

882
00:27:30,559 --> 00:27:35,200
but unlike that these three time stamps

883
00:27:33,120 --> 00:27:37,760
are drastically different times

884
00:27:35,200 --> 00:27:38,240
right the first one's in 2018 the second

885
00:27:37,760 --> 00:27:41,919
one is

886
00:27:38,240 --> 00:27:45,600
january 2019 and the third one is uh

887
00:27:41,919 --> 00:27:47,520
november 2019. so okay interesting

888
00:27:45,600 --> 00:27:49,120
uh so these are all time stamps i mean

889
00:27:47,520 --> 00:27:50,559
they're all discord snowflakes and

890
00:27:49,120 --> 00:27:51,520
they're all parsed the same way and so

891
00:27:50,559 --> 00:27:54,000
we pulled out uh

892
00:27:51,520 --> 00:27:55,520
these three different time stamps but

893
00:27:54,000 --> 00:27:56,880
again doing some research and figuring

894
00:27:55,520 --> 00:27:59,039
out kind of from context what these

895
00:27:56,880 --> 00:28:01,840
things mean

896
00:27:59,039 --> 00:28:03,600
uh we can pull out lots of interesting

897
00:28:01,840 --> 00:28:06,240
bits kind of about the discord uh

898
00:28:03,600 --> 00:28:07,199
architecture i guess so the way these

899
00:28:06,240 --> 00:28:08,960
snowflakes

900
00:28:07,200 --> 00:28:11,360
i guess in these unique ids in general

901
00:28:08,960 --> 00:28:13,919
work is they're often the time stamp

902
00:28:11,360 --> 00:28:16,559
embedded in the id is often reflection

903
00:28:13,919 --> 00:28:17,440
of when the object it identifies was

904
00:28:16,559 --> 00:28:20,559
created

905
00:28:17,440 --> 00:28:22,320
us over here from this first uh

906
00:28:20,559 --> 00:28:24,480
discord snowflake we can tell you that

907
00:28:22,320 --> 00:28:26,000
that represents the discord server that

908
00:28:24,480 --> 00:28:27,440
they're on

909
00:28:26,000 --> 00:28:29,120
that this message was sent on and so i

910
00:28:27,440 --> 00:28:30,320
can tell you when this server was

911
00:28:29,120 --> 00:28:32,559
created just from

912
00:28:30,320 --> 00:28:33,678
that snowflake likewise the second

913
00:28:32,559 --> 00:28:35,200
parameter is the

914
00:28:33,679 --> 00:28:37,039
time channel so you can tell you when

915
00:28:35,200 --> 00:28:40,640
the channel was created

916
00:28:37,039 --> 00:28:41,039
on this discord server and then lastly

917
00:28:40,640 --> 00:28:43,200
uh

918
00:28:41,039 --> 00:28:45,360
when the message that we're talking

919
00:28:43,200 --> 00:28:46,480
about was created and again like

920
00:28:45,360 --> 00:28:48,240
when a message created it's pretty

921
00:28:46,480 --> 00:28:50,080
analogous to when the message was sent

922
00:28:48,240 --> 00:28:51,679
uh so that might be the most interesting

923
00:28:50,080 --> 00:28:53,439
bit you can tell when a message was sent

924
00:28:51,679 --> 00:28:55,679
just by this url

925
00:28:53,440 --> 00:28:57,120
uh but the the server and channel parts

926
00:28:55,679 --> 00:28:59,039
can also be pretty interesting if you're

927
00:28:57,120 --> 00:29:00,879
trying to do more profiling on

928
00:28:59,039 --> 00:29:02,640
like was this channel created exactly

929
00:29:00,880 --> 00:29:04,000
the same time as the server

930
00:29:02,640 --> 00:29:05,760
is the whole server relatively new

931
00:29:04,000 --> 00:29:07,039
relatively old so what's these

932
00:29:05,760 --> 00:29:08,240
little bits of context again it might be

933
00:29:07,039 --> 00:29:08,799
trivial or might be really important to

934
00:29:08,240 --> 00:29:10,799
your case

935
00:29:08,799 --> 00:29:12,399
so again just knowing that they're there

936
00:29:10,799 --> 00:29:14,879
i think is great

937
00:29:12,399 --> 00:29:16,479
and this is by far the only url pattern

938
00:29:14,880 --> 00:29:18,399
you can pull up from discord

939
00:29:16,480 --> 00:29:21,120
another really interesting one is for if

940
00:29:18,399 --> 00:29:24,158
you put the url of a file attachment

941
00:29:21,120 --> 00:29:25,918
there again the id that represents the

942
00:29:24,159 --> 00:29:27,440
file attachment you can pull out the

943
00:29:25,919 --> 00:29:30,000
timestamp from there

944
00:29:27,440 --> 00:29:31,760
telling when uh that file was first

945
00:29:30,000 --> 00:29:33,919
uploaded to discord as an attachment

946
00:29:31,760 --> 00:29:35,360
so that's pretty cool i've seen somebody

947
00:29:33,919 --> 00:29:36,320
have some interactions with some people

948
00:29:35,360 --> 00:29:37,439
on twitter

949
00:29:36,320 --> 00:29:40,000
about looking at things that are

950
00:29:37,440 --> 00:29:41,760
uploaded to virustotal from discord and

951
00:29:40,000 --> 00:29:42,399
you can tell or like malware that was

952
00:29:41,760 --> 00:29:44,480
uploaded

953
00:29:42,399 --> 00:29:46,000
to virustotal and had some physical

954
00:29:44,480 --> 00:29:46,880
references to it so you can tell when

955
00:29:46,000 --> 00:29:48,320
this was

956
00:29:46,880 --> 00:29:50,000
sent and all this kind of fun stuff so

957
00:29:48,320 --> 00:29:51,678
there's lots of possibilities with

958
00:29:50,000 --> 00:29:55,120
timestamps again like i said earlier

959
00:29:51,679 --> 00:29:56,960
i love timestamps

960
00:29:55,120 --> 00:29:58,239
okay and so this is like the fifth last

961
00:29:56,960 --> 00:29:59,679
principle i want to talk about is the

962
00:29:58,240 --> 00:30:01,840
context matters

963
00:29:59,679 --> 00:30:04,320
so those three discord snowflakes in the

964
00:30:01,840 --> 00:30:05,120
url were parsed by and furl in exactly

965
00:30:04,320 --> 00:30:06,720
the same way right

966
00:30:05,120 --> 00:30:09,199
the snowflake structure is exactly the

967
00:30:06,720 --> 00:30:11,360
same but their position in the url

968
00:30:09,200 --> 00:30:12,480
their context uh altered kind of what

969
00:30:11,360 --> 00:30:14,799
they mean

970
00:30:12,480 --> 00:30:16,399
so i think in like in in with the urls

971
00:30:14,799 --> 00:30:18,799
and with all aspects kind of

972
00:30:16,399 --> 00:30:22,959
of any investigation uh your context

973
00:30:18,799 --> 00:30:24,639
matters too so please don't forget that

974
00:30:22,960 --> 00:30:26,799
all right we're back to the beginning

975
00:30:24,640 --> 00:30:30,000
why urls with the asterisk

976
00:30:26,799 --> 00:30:31,520
uh so unfurl can definitely do stuff

977
00:30:30,000 --> 00:30:32,159
with urls right kind of as we walk

978
00:30:31,520 --> 00:30:34,480
through

979
00:30:32,159 --> 00:30:36,000
i can do some good stuff with domains

980
00:30:34,480 --> 00:30:38,799
including internationalized ones so if

981
00:30:36,000 --> 00:30:40,240
you ever have any domains that look uh

982
00:30:38,799 --> 00:30:41,840
like they're percent encoded and have

983
00:30:40,240 --> 00:30:43,360
this weird funky stuff in there

984
00:30:41,840 --> 00:30:45,199
and throw a part of that correctly and

985
00:30:43,360 --> 00:30:45,678
showing you like the actual characters

986
00:30:45,200 --> 00:30:47,760
that the

987
00:30:45,679 --> 00:30:49,840
that the end user would typically see

988
00:30:47,760 --> 00:30:50,960
and for also parse parses.magnet links

989
00:30:49,840 --> 00:30:54,158
if you do have any kind of like

990
00:30:50,960 --> 00:30:54,799
file sharing investigations uh infernal

991
00:30:54,159 --> 00:30:57,440
supports

992
00:30:54,799 --> 00:30:59,360
uh at least a dozen probably more kinds

993
00:30:57,440 --> 00:31:01,039
of link shorteners or short links

994
00:30:59,360 --> 00:31:03,120
and this one is like the one thing i

995
00:31:01,039 --> 00:31:04,879
want to call out almost everything that

996
00:31:03,120 --> 00:31:06,399
referral does is just

997
00:31:04,880 --> 00:31:08,559
all local right it's just based off

998
00:31:06,399 --> 00:31:10,000
transforms for things in the url

999
00:31:08,559 --> 00:31:11,279
and that's for a lot of reasons but one

1000
00:31:10,000 --> 00:31:12,399
of them is you know it's kind of opsec

1001
00:31:11,279 --> 00:31:13,760
right you don't want to be reaching out

1002
00:31:12,399 --> 00:31:17,039
to

1003
00:31:13,760 --> 00:31:18,158
random urls right so shortlinks is the

1004
00:31:17,039 --> 00:31:19,840
one exception

1005
00:31:18,159 --> 00:31:22,080
this reaches out to the link shortener

1006
00:31:19,840 --> 00:31:24,158
site to tell you what the destination is

1007
00:31:22,080 --> 00:31:25,760
it doesn't touch the actual destination

1008
00:31:24,159 --> 00:31:27,279
so it's kind of a balance of being

1009
00:31:25,760 --> 00:31:28,799
useful versus opposite so i think it's

1010
00:31:27,279 --> 00:31:29,840
pretty safe but you can always disable

1011
00:31:28,799 --> 00:31:32,480
that if

1012
00:31:29,840 --> 00:31:34,240
that is a deal breaker for you and then

1013
00:31:32,480 --> 00:31:36,000
lastly with urls right we have lots of

1014
00:31:34,240 --> 00:31:37,039
these site-specific parsers i saw the

1015
00:31:36,000 --> 00:31:38,480
ones for google

1016
00:31:37,039 --> 00:31:40,720
are for social media sites we've looked

1017
00:31:38,480 --> 00:31:43,039
at ones for chat like discord

1018
00:31:40,720 --> 00:31:44,399
there's ones for email uh there's lots

1019
00:31:43,039 --> 00:31:45,679
for other search engines

1020
00:31:44,399 --> 00:31:47,600
other things so there's lots of these

1021
00:31:45,679 --> 00:31:48,480
site specific parsers uh we're always

1022
00:31:47,600 --> 00:31:50,480
working on more

1023
00:31:48,480 --> 00:31:51,679
and i'm happy to take requests or help

1024
00:31:50,480 --> 00:31:53,279
you if you'd like to write your own for

1025
00:31:51,679 --> 00:31:55,360
a particular website so i think that's

1026
00:31:53,279 --> 00:31:57,120
great

1027
00:31:55,360 --> 00:31:58,879
but it's not just urls right this was

1028
00:31:57,120 --> 00:32:01,120
kind of from our examples in the

1029
00:31:58,880 --> 00:32:02,720
beginning uh unfurl compare is a time

1030
00:32:01,120 --> 00:32:04,479
stamp if you want to use it as a tool to

1031
00:32:02,720 --> 00:32:05,440
translate time stamps into their human

1032
00:32:04,480 --> 00:32:08,080
readable form

1033
00:32:05,440 --> 00:32:10,080
it can do that for you it translates

1034
00:32:08,080 --> 00:32:13,039
lots of unique ids we talked about

1035
00:32:10,080 --> 00:32:14,799
uuids and snowflake variants but finding

1036
00:32:13,039 --> 00:32:16,480
all these different unique id schemes

1037
00:32:14,799 --> 00:32:17,200
with time stamps embedded in them has

1038
00:32:16,480 --> 00:32:18,559
become

1039
00:32:17,200 --> 00:32:20,640
somewhat of a hobby of mine so i have a

1040
00:32:18,559 --> 00:32:21,039
lot of these in here uh and i'm adding

1041
00:32:20,640 --> 00:32:23,120
more

1042
00:32:21,039 --> 00:32:24,240
uh all the time and there's other things

1043
00:32:23,120 --> 00:32:26,639
like json uh

1044
00:32:24,240 --> 00:32:28,960
and some compression like some zip stuff

1045
00:32:26,640 --> 00:32:31,200
and base base64 encodings

1046
00:32:28,960 --> 00:32:32,640
and then protobufs and so unfortunate

1047
00:32:31,200 --> 00:32:33,919
parts all these things kind of by

1048
00:32:32,640 --> 00:32:36,159
themselves standalone

1049
00:32:33,919 --> 00:32:37,039
but it's also not a coincidence that all

1050
00:32:36,159 --> 00:32:39,039
these things

1051
00:32:37,039 --> 00:32:40,240
are things that you would find in a url

1052
00:32:39,039 --> 00:32:42,320
right because that is

1053
00:32:40,240 --> 00:32:43,360
again the main focus of url but of

1054
00:32:42,320 --> 00:32:44,799
unfurl

1055
00:32:43,360 --> 00:32:46,559
but you can use it for more things than

1056
00:32:44,799 --> 00:32:48,399
that

1057
00:32:46,559 --> 00:32:49,840
and i kind of glanced over that last one

1058
00:32:48,399 --> 00:32:51,518
there protobufs if you

1059
00:32:49,840 --> 00:32:52,559
if i said protobufs and you kind of got

1060
00:32:51,519 --> 00:32:53,760
triggered a little bit and we're just

1061
00:32:52,559 --> 00:32:54,960
like protobufs

1062
00:32:53,760 --> 00:32:56,559
uh then you've probably looked at them

1063
00:32:54,960 --> 00:32:57,039
before uh they're not the most easy

1064
00:32:56,559 --> 00:33:00,399
thing

1065
00:32:57,039 --> 00:33:01,279
to examine uh protobuf is a open source

1066
00:33:00,399 --> 00:33:03,120
kind of uh

1067
00:33:01,279 --> 00:33:05,519
technology from google where it tries to

1068
00:33:03,120 --> 00:33:07,760
store key value pairs in a very compact

1069
00:33:05,519 --> 00:33:08,799
efficient form so part of that is that

1070
00:33:07,760 --> 00:33:10,480
you can

1071
00:33:08,799 --> 00:33:12,158
tell kind of what's in it but you don't

1072
00:33:10,480 --> 00:33:12,960
know exactly the meaning of everything

1073
00:33:12,159 --> 00:33:14,799
without

1074
00:33:12,960 --> 00:33:16,320
an accompanying dot proto file which

1075
00:33:14,799 --> 00:33:18,799
defines what it is

1076
00:33:16,320 --> 00:33:20,080
but unfurl can help you show the things

1077
00:33:18,799 --> 00:33:21,440
that you can tell from a protobuf

1078
00:33:20,080 --> 00:33:22,639
without the proto file

1079
00:33:21,440 --> 00:33:24,880
and so i'm going to show you a quick

1080
00:33:22,640 --> 00:33:27,600
example of that because

1081
00:33:24,880 --> 00:33:30,080
protobufs could use simple okay so this

1082
00:33:27,600 --> 00:33:33,039
is an example of just unfurl

1083
00:33:30,080 --> 00:33:35,360
so protobufs on the internet i see them

1084
00:33:33,039 --> 00:33:36,720
most often in google urls right because

1085
00:33:35,360 --> 00:33:37,519
it's a google technology kind of makes

1086
00:33:36,720 --> 00:33:40,000
sense they would

1087
00:33:37,519 --> 00:33:41,679
use them a lot uh but they're also

1088
00:33:40,000 --> 00:33:43,679
increasingly common in mobile phone

1089
00:33:41,679 --> 00:33:46,000
investigation start you might find

1090
00:33:43,679 --> 00:33:47,600
a protobuf inside a sqli database or a

1091
00:33:46,000 --> 00:33:49,039
plus file

1092
00:33:47,600 --> 00:33:52,000
and if that's the case you can copy up

1093
00:33:49,039 --> 00:33:54,240
the hex from like a database or plist

1094
00:33:52,000 --> 00:33:55,519
and drop it in referral so that's what

1095
00:33:54,240 --> 00:33:56,880
this is this is just a hex screen kind

1096
00:33:55,519 --> 00:33:58,320
of put in there

1097
00:33:56,880 --> 00:34:00,960
and you click on furl and infor will

1098
00:33:58,320 --> 00:34:01,360
parse it out so the link here says hex

1099
00:34:00,960 --> 00:34:03,360
plus

1100
00:34:01,360 --> 00:34:05,279
proto so it's actually kind of uh the

1101
00:34:03,360 --> 00:34:06,399
cineferral's way of kind of skipping a

1102
00:34:05,279 --> 00:34:09,199
step it doesn't show you

1103
00:34:06,399 --> 00:34:09,759
this the the hex representation or the

1104
00:34:09,199 --> 00:34:11,199
binary

1105
00:34:09,760 --> 00:34:12,960
representation of the proto because i

1106
00:34:11,199 --> 00:34:14,638
don't think that's very helpful

1107
00:34:12,960 --> 00:34:16,320
but that kind of hex plus plural is at

1108
00:34:14,639 --> 00:34:18,079
least letting you know that happened

1109
00:34:16,320 --> 00:34:19,599
and then it shows you what that protobuf

1110
00:34:18,079 --> 00:34:20,639
to kind of decode into so there's that

1111
00:34:19,599 --> 00:34:23,159
protobuf

1112
00:34:20,639 --> 00:34:24,560
with a bunch of numbers and then again

1113
00:34:23,159 --> 00:34:26,879
unfortunately again

1114
00:34:24,560 --> 00:34:28,239
and we'll expand that protobuf into each

1115
00:34:26,879 --> 00:34:30,319
kind of each uh

1116
00:34:28,239 --> 00:34:31,759
each value each key value in there is

1117
00:34:30,320 --> 00:34:33,359
its own kind of node

1118
00:34:31,760 --> 00:34:35,919
and then again because unreferral runs

1119
00:34:33,359 --> 00:34:37,520
its parsers against every single node

1120
00:34:35,918 --> 00:34:39,118
a couple of those nodes got picked up as

1121
00:34:37,520 --> 00:34:41,280
timestamps and got translated

1122
00:34:39,119 --> 00:34:42,800
as timestamps again this is of no

1123
00:34:41,280 --> 00:34:43,520
knowledge no advanced knowledge of what

1124
00:34:42,800 --> 00:34:45,440
this

1125
00:34:43,520 --> 00:34:47,520
dot profile should be or the definition

1126
00:34:45,440 --> 00:34:48,960
of this protobuf

1127
00:34:47,520 --> 00:34:51,199
but yeah so this is a way that unfurl

1128
00:34:48,960 --> 00:34:52,000
can help you kind of kind of expand her

1129
00:34:51,199 --> 00:34:53,678
unfurl

1130
00:34:52,000 --> 00:34:56,879
uh the prototype so hopefully that

1131
00:34:53,679 --> 00:34:56,879
should help you in an investigation

1132
00:34:57,280 --> 00:35:01,119
and then hopefully this presentation uh

1133
00:34:59,520 --> 00:35:02,640
made you think unfurl was

1134
00:35:01,119 --> 00:35:04,560
might be useful to you so i'd love for

1135
00:35:02,640 --> 00:35:05,759
you to give it a try

1136
00:35:04,560 --> 00:35:08,078
so when you want to try you have a

1137
00:35:05,760 --> 00:35:09,520
couple options the first decision you

1138
00:35:08,079 --> 00:35:10,960
need to make is if you want to use the

1139
00:35:09,520 --> 00:35:12,240
interactive version which i've been

1140
00:35:10,960 --> 00:35:14,240
showing you here

1141
00:35:12,240 --> 00:35:15,919
it's kind of a web interface you drop it

1142
00:35:14,240 --> 00:35:16,720
in click a button you can move the nodes

1143
00:35:15,920 --> 00:35:18,240
around

1144
00:35:16,720 --> 00:35:20,000
with the mouse you can change the colors

1145
00:35:18,240 --> 00:35:21,598
all that kind of fun stuff

1146
00:35:20,000 --> 00:35:23,359
there's also if you really want to

1147
00:35:21,599 --> 00:35:25,440
there's a 3d version of this that i

1148
00:35:23,359 --> 00:35:27,200
made i mean mostly for an april fool's

1149
00:35:25,440 --> 00:35:28,800
joke but you can then for all things in

1150
00:35:27,200 --> 00:35:30,480
3d if you want

1151
00:35:28,800 --> 00:35:32,160
and if you happen to have a vr headset

1152
00:35:30,480 --> 00:35:35,359
you can actually unfurl things

1153
00:35:32,160 --> 00:35:36,799
in vr again that's also on online

1154
00:35:35,359 --> 00:35:38,799
but there is an accompanying tool called

1155
00:35:36,800 --> 00:35:41,359
the unfurl cli which

1156
00:35:38,800 --> 00:35:42,320
has all the same functionality as the

1157
00:35:41,359 --> 00:35:44,319
the gui version

1158
00:35:42,320 --> 00:35:45,839
but if you like if the command line is

1159
00:35:44,320 --> 00:35:47,839
better suited for your workflow uh

1160
00:35:45,839 --> 00:35:49,839
here it is so the command line it kind

1161
00:35:47,839 --> 00:35:51,920
of uh i tried to emulate the

1162
00:35:49,839 --> 00:35:53,520
drifted graph kind of tree uh the little

1163
00:35:51,920 --> 00:35:54,960
ascii art there

1164
00:35:53,520 --> 00:35:57,520
and this just shows you kind of the same

1165
00:35:54,960 --> 00:35:59,040
thing on the fan line it also supports

1166
00:35:57,520 --> 00:36:00,880
bulk reading from files and writing from

1167
00:35:59,040 --> 00:36:04,320
files if you want to do a lot of stuff

1168
00:36:00,880 --> 00:36:05,839
at once and then okay so once you figure

1169
00:36:04,320 --> 00:36:07,280
out what kind of tool you want to use uh

1170
00:36:05,839 --> 00:36:08,560
you can use it so if you want to use it

1171
00:36:07,280 --> 00:36:10,400
right now online

1172
00:36:08,560 --> 00:36:12,160
there's a version hosted on my website

1173
00:36:10,400 --> 00:36:14,640
so it's dfr.blog

1174
00:36:12,160 --> 00:36:16,078
unfurl or you can go to unfurl.link they

1175
00:36:14,640 --> 00:36:18,640
both go to the same place if you just

1176
00:36:16,079 --> 00:36:20,000
want to play with the online version

1177
00:36:18,640 --> 00:36:21,680
if you like to get the code and run it

1178
00:36:20,000 --> 00:36:24,400
locally or do some development on it

1179
00:36:21,680 --> 00:36:26,240
it's on that github link right there

1180
00:36:24,400 --> 00:36:28,320
if you like using python you can just

1181
00:36:26,240 --> 00:36:31,919
install it quickly with pip install

1182
00:36:28,320 --> 00:36:33,359
dfir dash unfurl and yeah so hopefully

1183
00:36:31,920 --> 00:36:34,880
you use it if you have any questions i'm

1184
00:36:33,359 --> 00:36:36,880
available on twitter or i'll be on the

1185
00:36:34,880 --> 00:36:39,440
discord chat or you can send me an email

1186
00:36:36,880 --> 00:36:40,079
or github or i'm pretty easy to find so

1187
00:36:39,440 --> 00:36:41,680
uh

1188
00:36:40,079 --> 00:36:44,079
happy to take any questions if we have

1189
00:36:41,680 --> 00:36:45,839
any time

1190
00:36:44,079 --> 00:36:47,359
that's awesome ryan it's kind of funny i

1191
00:36:45,839 --> 00:36:48,560
had to chuckle to myself and you said

1192
00:36:47,359 --> 00:36:50,640
hey go try it

1193
00:36:48,560 --> 00:36:53,119
i realized you weren't able to watch the

1194
00:36:50,640 --> 00:36:54,960
uh the discord in track one

1195
00:36:53,119 --> 00:36:56,720
they've been posting all kinds of stuff

1196
00:36:54,960 --> 00:36:58,240
into into discord and talking about all

1197
00:36:56,720 --> 00:37:01,680
the stuff that it does including

1198
00:36:58,240 --> 00:37:03,200
um unshortening urls um so

1199
00:37:01,680 --> 00:37:04,960
i i didn't have a chance to try that one

1200
00:37:03,200 --> 00:37:06,480
but i guess uh short links could

1201
00:37:04,960 --> 00:37:08,880
get expanded which is pretty cool as

1202
00:37:06,480 --> 00:37:10,800
well um

1203
00:37:08,880 --> 00:37:12,720
a series of questions kind of centered

1204
00:37:10,800 --> 00:37:13,839
on this and i think it's probably

1205
00:37:12,720 --> 00:37:15,759
addressed by the

1206
00:37:13,839 --> 00:37:16,880
the command line version but is there

1207
00:37:15,760 --> 00:37:20,320
any kind of

1208
00:37:16,880 --> 00:37:22,079
api or other capability like can the

1209
00:37:20,320 --> 00:37:25,520
command line tool generate json

1210
00:37:22,079 --> 00:37:26,800
for example uh so not right now

1211
00:37:25,520 --> 00:37:28,880
it just does a text kind of

1212
00:37:26,800 --> 00:37:30,480
representation of that tree

1213
00:37:28,880 --> 00:37:32,160
uh but that would be a pretty simple

1214
00:37:30,480 --> 00:37:34,480
thing to add if people want to do it

1215
00:37:32,160 --> 00:37:35,440
uh so you can also imp like unfurl the

1216
00:37:34,480 --> 00:37:37,359
two scripts i use

1217
00:37:35,440 --> 00:37:38,880
from command line are very simple

1218
00:37:37,359 --> 00:37:40,240
there's import like then for a library

1219
00:37:38,880 --> 00:37:40,720
and do things so if you're into python

1220
00:37:40,240 --> 00:37:42,720
you could

1221
00:37:40,720 --> 00:37:44,200
an import unfurl and use it in your own

1222
00:37:42,720 --> 00:37:45,598
application to get like a json

1223
00:37:44,200 --> 00:37:48,160
[Music]

1224
00:37:45,599 --> 00:37:49,040
interesting okay very cool um yeah

1225
00:37:48,160 --> 00:37:51,440
that's uh

1226
00:37:49,040 --> 00:37:53,920
my my wheels are already turning onto

1227
00:37:51,440 --> 00:37:58,160
stuff to potentially integrate this with

1228
00:37:53,920 --> 00:38:01,280
um what is the licensing on the tool

1229
00:37:58,160 --> 00:38:02,640
uh apache 2 i think whatever the google

1230
00:38:01,280 --> 00:38:04,000
one is where it says

1231
00:38:02,640 --> 00:38:06,720
use however you want don't sue us i

1232
00:38:04,000 --> 00:38:12,160
think that's the license yeah

1233
00:38:06,720 --> 00:38:15,359
i like your tldr okay excellent

1234
00:38:12,160 --> 00:38:15,759
no no worries there nor am i um let's

1235
00:38:15,359 --> 00:38:18,960
see

1236
00:38:15,760 --> 00:38:22,560
another question where did that one

1237
00:38:18,960 --> 00:38:22,560
go um

1238
00:38:22,800 --> 00:38:26,640
onion links does it do anything special

1239
00:38:24,880 --> 00:38:27,680
with uh with onion links or any other

1240
00:38:26,640 --> 00:38:30,240
kind of similar

1241
00:38:27,680 --> 00:38:31,839
ones no but that would be an interesting

1242
00:38:30,240 --> 00:38:32,479
thing to add to it that's that's a good

1243
00:38:31,839 --> 00:38:34,640
idea

1244
00:38:32,480 --> 00:38:35,680
cool well one of the things you

1245
00:38:34,640 --> 00:38:37,759
mentioned i

1246
00:38:35,680 --> 00:38:39,520
believe is key here is you know because

1247
00:38:37,760 --> 00:38:41,200
it is sitting on github

1248
00:38:39,520 --> 00:38:42,880
and uh you know pull requests are always

1249
00:38:41,200 --> 00:38:45,759
graciously accepted as

1250
00:38:42,880 --> 00:38:46,400
i know all of us that work on github are

1251
00:38:45,760 --> 00:38:50,079
our

1252
00:38:46,400 --> 00:38:52,160
apps to say um you know this

1253
00:38:50,079 --> 00:38:53,119
great framework exists and now somebody

1254
00:38:52,160 --> 00:38:55,359
who's got a one

1255
00:38:53,119 --> 00:38:56,160
top one off very tiny little minute

1256
00:38:55,359 --> 00:38:58,640
requirement

1257
00:38:56,160 --> 00:39:00,480
can can build upon the existing

1258
00:38:58,640 --> 00:39:02,240
framework with just what they need and

1259
00:39:00,480 --> 00:39:03,760
then you know reintroduce that hopefully

1260
00:39:02,240 --> 00:39:05,118
back to the uh to the community as well

1261
00:39:03,760 --> 00:39:06,320
so everybody can do it so that's

1262
00:39:05,119 --> 00:39:08,880
excellent

1263
00:39:06,320 --> 00:39:10,320
um any requests or ideas if you want to

1264
00:39:08,880 --> 00:39:12,320
build your own parser i am more than

1265
00:39:10,320 --> 00:39:13,280
happy to help you answer questions coach

1266
00:39:12,320 --> 00:39:15,040
you through whatever

1267
00:39:13,280 --> 00:39:17,920
uh happy to help if anybody wants to

1268
00:39:15,040 --> 00:39:21,200
write their own kind of powers for this

1269
00:39:17,920 --> 00:39:22,720
awesome no that is great i'm uh i'm

1270
00:39:21,200 --> 00:39:24,480
the one of the questions that came in

1271
00:39:22,720 --> 00:39:26,799
here um that was actually one that

1272
00:39:24,480 --> 00:39:29,040
published me as well was uh how could it

1273
00:39:26,800 --> 00:39:31,040
be utilized with analysis tools like

1274
00:39:29,040 --> 00:39:34,079
elastic and my first thought was oh

1275
00:39:31,040 --> 00:39:37,599
this would be an amazing filter plug-in

1276
00:39:34,079 --> 00:39:39,760
for logstash if uh you know potentially

1277
00:39:37,599 --> 00:39:41,680
translate that out so that that's

1278
00:39:39,760 --> 00:39:43,680
you know another idea for integration

1279
00:39:41,680 --> 00:39:45,118
potentially hopefully somebody can

1280
00:39:43,680 --> 00:39:47,200
to pick that up and run with it

1281
00:39:45,119 --> 00:39:50,480
potentially that was kind of

1282
00:39:47,200 --> 00:39:51,359
um it might make integration easier with

1283
00:39:50,480 --> 00:39:52,800
a lot of these tools

1284
00:39:51,359 --> 00:39:54,720
like maybe embedding a whole graph might

1285
00:39:52,800 --> 00:39:56,240
be kind of hard but having the text

1286
00:39:54,720 --> 00:39:57,118
version is an easier step for

1287
00:39:56,240 --> 00:40:00,720
integrating so that's

1288
00:39:57,119 --> 00:40:02,800
kind of why it came about yeah yeah

1289
00:40:00,720 --> 00:40:04,879
absolutely i think that makes good sense

1290
00:40:02,800 --> 00:40:06,319
um so i guess the last question in here

1291
00:40:04,880 --> 00:40:07,359
since we just have a minute here before

1292
00:40:06,319 --> 00:40:10,640
we go into break

1293
00:40:07,359 --> 00:40:13,440
um if there's a url

1294
00:40:10,640 --> 00:40:14,960
embedded in the url so if it's encoded

1295
00:40:13,440 --> 00:40:16,000
and you've got another url it does

1296
00:40:14,960 --> 00:40:19,359
unfurl

1297
00:40:16,000 --> 00:40:21,839
pull that nested url out yes it should

1298
00:40:19,359 --> 00:40:23,520
and if it doesn't let me access that is

1299
00:40:21,839 --> 00:40:26,240
way cool

1300
00:40:23,520 --> 00:40:27,520
good um well all right there's a couple

1301
00:40:26,240 --> 00:40:31,680
of other questions in here

1302
00:40:27,520 --> 00:40:32,079
um i'm going to uh copy paste those into

1303
00:40:31,680 --> 00:40:34,319
your

1304
00:40:32,079 --> 00:40:35,280
your discord hallway channel so we don't

1305
00:40:34,319 --> 00:40:36,720
lose those

1306
00:40:35,280 --> 00:40:38,319
um there's a couple that are very

1307
00:40:36,720 --> 00:40:40,480
similar so i'll try to

1308
00:40:38,319 --> 00:40:42,000
coalesce those together um but thanks

1309
00:40:40,480 --> 00:40:43,680
very much i

1310
00:40:42,000 --> 00:40:45,520
followed the projects into it announced

1311
00:40:43,680 --> 00:40:47,279
it and i'm really really

1312
00:40:45,520 --> 00:40:49,200
like even just seeing you walk through

1313
00:40:47,280 --> 00:40:50,720
it here uh opened my eyes to a lot of

1314
00:40:49,200 --> 00:40:52,399
new possibilities so

1315
00:40:50,720 --> 00:40:54,240
thanks for for working to create it and

1316
00:40:52,400 --> 00:40:56,079
for sharing it and uh and taking the

1317
00:40:54,240 --> 00:40:57,439
time with us today to explain a lot of

1318
00:40:56,079 --> 00:40:58,160
what it can do you did some great work

1319
00:40:57,440 --> 00:41:00,160
and uh

1320
00:40:58,160 --> 00:41:01,279
it's gonna get used a lot more than it

1321
00:41:00,160 --> 00:41:07,259
already has

1322
00:41:01,280 --> 00:41:10,349
great thanks and thank you for having me

1323
00:41:07,260 --> 00:41:10,349
[Music]

1324
00:41:15,920 --> 00:41:18,000
you

