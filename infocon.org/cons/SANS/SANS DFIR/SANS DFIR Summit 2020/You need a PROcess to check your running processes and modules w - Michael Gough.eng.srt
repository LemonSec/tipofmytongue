1
00:00:01,040 --> 00:00:07,429
[Music]

2
00:00:12,160 --> 00:00:14,480
let's take a minute here to introduce

3
00:00:13,920 --> 00:00:17,520
our

4
00:00:14,480 --> 00:00:19,760
our next speaker uh just for a moment um

5
00:00:17,520 --> 00:00:22,160
michael goff is going to be talking to

6
00:00:19,760 --> 00:00:24,160
us about memory frenzy so

7
00:00:22,160 --> 00:00:26,000
before we get deep into the content here

8
00:00:24,160 --> 00:00:28,720
i just wanted to say like this is

9
00:00:26,000 --> 00:00:29,119
this is how we form our stomachs we've

10
00:00:28,720 --> 00:00:32,960
got

11
00:00:29,119 --> 00:00:34,960
two different styles of talks our our uh

12
00:00:32,960 --> 00:00:36,800
keynotes that we have are very high

13
00:00:34,960 --> 00:00:39,520
level very aspirational very

14
00:00:36,800 --> 00:00:41,360
uh you know very strategic and thought

15
00:00:39,520 --> 00:00:44,000
absolutely critical for us to know

16
00:00:41,360 --> 00:00:45,360
where are we going as a community and a

17
00:00:44,000 --> 00:00:46,480
lot of our other talks are going to have

18
00:00:45,360 --> 00:00:50,000
some of that as well

19
00:00:46,480 --> 00:00:52,480
but we also now pivot hard right

20
00:00:50,000 --> 00:00:53,440
into very deep down technical

21
00:00:52,480 --> 00:00:54,959
information

22
00:00:53,440 --> 00:00:57,360
and uh michael's going to be sharing

23
00:00:54,960 --> 00:00:59,039
with with us some of that

24
00:00:57,360 --> 00:01:00,800
michael comes to us with a very

25
00:00:59,039 --> 00:01:03,039
extensive background in

26
00:01:00,800 --> 00:01:05,119
uh an incident response in consulting uh

27
00:01:03,039 --> 00:01:08,320
he's currently with the ncc group

28
00:01:05,119 --> 00:01:09,920
in uh in actually austin texas

29
00:01:08,320 --> 00:01:12,000
so along with two of our other speakers

30
00:01:09,920 --> 00:01:13,840
that'll be coming up later in the agenda

31
00:01:12,000 --> 00:01:15,280
um i think michael's one of the few

32
00:01:13,840 --> 00:01:16,159
folks that actually showed up for the

33
00:01:15,280 --> 00:01:18,400
live event

34
00:01:16,159 --> 00:01:20,159
so to speak so he's coming to us from

35
00:01:18,400 --> 00:01:23,439
the original source of

36
00:01:20,159 --> 00:01:24,720
the dfir summit but we're glad to have

37
00:01:23,439 --> 00:01:27,199
his support here

38
00:01:24,720 --> 00:01:28,960
um he also brings to us a lot of

39
00:01:27,200 --> 00:01:30,000
experience as i said in the incident

40
00:01:28,960 --> 00:01:33,919
response realm

41
00:01:30,000 --> 00:01:35,840
um so you're going to see some of our um

42
00:01:33,920 --> 00:01:37,360
some of our talks center more heavily on

43
00:01:35,840 --> 00:01:38,720
the digital forensics some

44
00:01:37,360 --> 00:01:40,400
heavily more heavily on the incident

45
00:01:38,720 --> 00:01:41,840
response this is going to kind of be a

46
00:01:40,400 --> 00:01:44,079
bridge between them both so it's

47
00:01:41,840 --> 00:01:46,240
exciting to kind of kick off with that

48
00:01:44,079 --> 00:01:48,158
so with that all being said

49
00:01:46,240 --> 00:01:50,320
we are just about at the kickoff time

50
00:01:48,159 --> 00:01:52,880
for that um talk about how to

51
00:01:50,320 --> 00:01:54,720
find things that are hidden by using

52
00:01:52,880 --> 00:01:56,640
memory analysis because

53
00:01:54,720 --> 00:01:59,039
as i know mike was going to talk about

54
00:01:56,640 --> 00:01:59,680
here um sometimes it can be easy to hide

55
00:01:59,040 --> 00:02:01,920
from

56
00:01:59,680 --> 00:02:02,960
system artifacts like the disk but

57
00:02:01,920 --> 00:02:05,119
memory is going to all

58
00:02:02,960 --> 00:02:06,240
in many cases be your ultimate source of

59
00:02:05,119 --> 00:02:08,080
truth so

60
00:02:06,240 --> 00:02:09,280
without any further delay i'd like to go

61
00:02:08,080 --> 00:02:12,319
ahead and uh

62
00:02:09,280 --> 00:02:12,720
bring michael into the broadcast if you

63
00:02:12,319 --> 00:02:15,119
will

64
00:02:12,720 --> 00:02:17,520
uh thanks for joining us and i will turn

65
00:02:15,120 --> 00:02:19,599
it over to you

66
00:02:17,520 --> 00:02:20,879
thanks phil uh good virtually seeing you

67
00:02:19,599 --> 00:02:21,760
because i'm down here at the hilton

68
00:02:20,879 --> 00:02:24,399
there's nobody here

69
00:02:21,760 --> 00:02:24,399
what's going on

70
00:02:24,800 --> 00:02:30,160
well um please uh please enjoy a

71
00:02:27,920 --> 00:02:31,760
a beverage in the uh the lobby bar when

72
00:02:30,160 --> 00:02:35,599
you're done for me

73
00:02:31,760 --> 00:02:38,160
i will all right

74
00:02:35,599 --> 00:02:39,518
so uh what what i'm going to talk about

75
00:02:38,160 --> 00:02:42,160
today is

76
00:02:39,519 --> 00:02:43,360
the need for us to check or create a

77
00:02:42,160 --> 00:02:45,920
running

78
00:02:43,360 --> 00:02:46,959
process process so processing

79
00:02:45,920 --> 00:02:50,000
differentiate

80
00:02:46,959 --> 00:02:52,560
processes from a process

81
00:02:50,000 --> 00:02:54,160
shout out to andrew haye because i'm

82
00:02:52,560 --> 00:02:55,920
going to use the canadian version of

83
00:02:54,160 --> 00:02:58,400
process to differentiate the two so we

84
00:02:55,920 --> 00:03:00,079
are all professionals we need a process

85
00:02:58,400 --> 00:03:02,319
to find and look for these running

86
00:03:00,080 --> 00:03:03,920
processes i am a blue team defender

87
00:03:02,319 --> 00:03:05,359
defender ninja mao archeologist

88
00:03:03,920 --> 00:03:07,920
logaholic principal

89
00:03:05,360 --> 00:03:09,920
incident response engineer for ncc group

90
00:03:07,920 --> 00:03:12,720
and i love properly configure logs many

91
00:03:09,920 --> 00:03:15,920
of you probably heard

92
00:03:12,720 --> 00:03:18,640
too many of you heard

93
00:03:15,920 --> 00:03:20,879
me do talks on logging because they tell

94
00:03:18,640 --> 00:03:24,000
us who what where when and hopefully how

95
00:03:20,879 --> 00:03:24,000
something occurred

96
00:03:24,159 --> 00:03:28,720
i am the creator of these cheat sheets

97
00:03:26,000 --> 00:03:29,599
as phil mentioned i have a long list of

98
00:03:28,720 --> 00:03:31,680
things i've done

99
00:03:29,599 --> 00:03:33,359
for the community and within it i'm also

100
00:03:31,680 --> 00:03:36,400
the co-creator of login d

101
00:03:33,360 --> 00:03:38,799
as well as the co-host of the incident

102
00:03:36,400 --> 00:03:42,480
response podcast

103
00:03:38,799 --> 00:03:44,319
so why this talk files memory or file is

104
00:03:42,480 --> 00:03:47,518
in-memory only malware

105
00:03:44,319 --> 00:03:49,440
right to expand this expanding threat

106
00:03:47,519 --> 00:03:51,440
that's becoming more and more common too

107
00:03:49,440 --> 00:03:53,840
common actually

108
00:03:51,440 --> 00:03:55,599
the idea here is commodity malware red

109
00:03:53,840 --> 00:03:57,920
team engagements and of course apt

110
00:03:55,599 --> 00:03:58,399
attackers use it this method can avoid

111
00:03:57,920 --> 00:04:02,159
many

112
00:03:58,400 --> 00:04:04,720
security tools so let's rethink or

113
00:04:02,159 --> 00:04:06,959
redefine fileless malware i we did a

114
00:04:04,720 --> 00:04:08,400
podcast recently on this subject

115
00:04:06,959 --> 00:04:10,239
and it troubles me when we hear the

116
00:04:08,400 --> 00:04:12,000
generic term files malware because i

117
00:04:10,239 --> 00:04:13,439
think as you listen to the definitions

118
00:04:12,000 --> 00:04:15,439
i'm about to talk about

119
00:04:13,439 --> 00:04:17,759
you'll immediately know where to take

120
00:04:15,439 --> 00:04:18,959
your mind and how you might go about

121
00:04:17,759 --> 00:04:22,240
looking for these various

122
00:04:18,959 --> 00:04:24,240
fileless malwares so rethinking it

123
00:04:22,240 --> 00:04:25,600
files malware that can only be found in

124
00:04:24,240 --> 00:04:28,160
memory right

125
00:04:25,600 --> 00:04:29,120
of a running system malware plus memory

126
00:04:28,160 --> 00:04:31,680
equals memoir

127
00:04:29,120 --> 00:04:33,040
so if i say to any of you hey we gotta

128
00:04:31,680 --> 00:04:34,800
go look for some memoir

129
00:04:33,040 --> 00:04:36,479
i think as incident responders and

130
00:04:34,800 --> 00:04:36,960
forensics people we can wrap our heads

131
00:04:36,479 --> 00:04:40,080
around

132
00:04:36,960 --> 00:04:40,880
ah we got an in-memory scenario no files

133
00:04:40,080 --> 00:04:43,199
can be found

134
00:04:40,880 --> 00:04:44,560
if you scan the disk as phil mentioned

135
00:04:43,199 --> 00:04:45,600
and the system while the system is

136
00:04:44,560 --> 00:04:47,919
running anyway

137
00:04:45,600 --> 00:04:49,759
or very short-lived right they download

138
00:04:47,919 --> 00:04:50,400
the file they execute the file to delete

139
00:04:49,759 --> 00:04:52,880
the file

140
00:04:50,400 --> 00:04:53,599
a lot of this is also bypasses your file

141
00:04:52,880 --> 00:04:56,320
integrity

142
00:04:53,600 --> 00:04:58,240
monitoring solutions and the typical

143
00:04:56,320 --> 00:05:01,440
infection vectors are injection

144
00:04:58,240 --> 00:05:02,000
dll side loading hijacking process

145
00:05:01,440 --> 00:05:03,759
hollowing

146
00:05:02,000 --> 00:05:06,400
download source code and compile the

147
00:05:03,759 --> 00:05:08,639
fly.net jc etc

148
00:05:06,400 --> 00:05:10,479
also users can double click this to

149
00:05:08,639 --> 00:05:12,560
start the attack as well

150
00:05:10,479 --> 00:05:14,639
fileless malware the file that lives

151
00:05:12,560 --> 00:05:17,039
somewhere right it has to live somewhere

152
00:05:14,639 --> 00:05:24,080
so let's do a better job guiding people

153
00:05:17,039 --> 00:05:27,039
on signs of where to look for it

154
00:05:24,080 --> 00:05:27,680
so let's look at these terms regular

155
00:05:27,039 --> 00:05:29,520
malware

156
00:05:27,680 --> 00:05:31,120
plus a payload in the registry is

157
00:05:29,520 --> 00:05:31,758
ridgeware right it's not fileless

158
00:05:31,120 --> 00:05:34,000
there's just

159
00:05:31,759 --> 00:05:35,039
it's just hidden in a different place

160
00:05:34,000 --> 00:05:37,280
wmi where

161
00:05:35,039 --> 00:05:39,280
malware plus the payload and a wmi

162
00:05:37,280 --> 00:05:41,840
database is wmi ware

163
00:05:39,280 --> 00:05:42,799
powershell where malware plus payload

164
00:05:41,840 --> 00:05:45,840
and powershell

165
00:05:42,800 --> 00:05:48,479
equals powershell compileware

166
00:05:45,840 --> 00:05:49,599
this is malware plus a payload compile

167
00:05:48,479 --> 00:05:54,080
on the fly

168
00:05:49,600 --> 00:05:56,319
can be called compileware downloadware

169
00:05:54,080 --> 00:05:59,198
malware plus payload downloaded each

170
00:05:56,319 --> 00:06:01,520
time through text files or or whatnot

171
00:05:59,199 --> 00:06:02,639
compiled on the fly can be known as

172
00:06:01,520 --> 00:06:05,599
downloadware or maybe

173
00:06:02,639 --> 00:06:06,560
lol basswear and if you think about this

174
00:06:05,600 --> 00:06:08,800
for a second

175
00:06:06,560 --> 00:06:10,639
as i mentioned these i think we all can

176
00:06:08,800 --> 00:06:12,080
kind of say oh i have to go look here

177
00:06:10,639 --> 00:06:13,199
for that or i might have to look this

178
00:06:12,080 --> 00:06:16,880
way for that

179
00:06:13,199 --> 00:06:19,120
and that's the purpose of of looking for

180
00:06:16,880 --> 00:06:21,199
very specific files malware types so we

181
00:06:19,120 --> 00:06:21,919
can focus on how to find it how to hunt

182
00:06:21,199 --> 00:06:23,440
it

183
00:06:21,919 --> 00:06:25,680
keep in mind not all malware will have

184
00:06:23,440 --> 00:06:28,400
an autorun asap if you

185
00:06:25,680 --> 00:06:29,280
saw the latest trickbot recently and saw

186
00:06:28,400 --> 00:06:31,280
its mo

187
00:06:29,280 --> 00:06:33,440
they actually infected the workstations

188
00:06:31,280 --> 00:06:35,359
and used smd

189
00:06:33,440 --> 00:06:36,880
and then jumped over to the domain

190
00:06:35,360 --> 00:06:38,479
controllers and injected

191
00:06:36,880 --> 00:06:40,240
the malware on the domain controllers

192
00:06:38,479 --> 00:06:42,639
and nothing was running

193
00:06:40,240 --> 00:06:44,479
uh or nothing was found on the box

194
00:06:42,639 --> 00:06:46,800
itself except in memory

195
00:06:44,479 --> 00:06:48,000
so this is a great you know tactic to go

196
00:06:46,800 --> 00:06:50,560
and detect it as

197
00:06:48,000 --> 00:06:52,319
systems will look you know analysts and

198
00:06:50,560 --> 00:06:53,840
and security systems will look on

199
00:06:52,319 --> 00:06:55,520
obvious indicators they just won't be

200
00:06:53,840 --> 00:06:57,599
there only in memory

201
00:06:55,520 --> 00:06:58,719
and especially the red team that doesn't

202
00:06:57,599 --> 00:07:00,639
like to leave ioc

203
00:06:58,720 --> 00:07:02,319
so they're obviously not going to write

204
00:07:00,639 --> 00:07:03,280
auto runs as well right they get in they

205
00:07:02,319 --> 00:07:05,360
launch stuff

206
00:07:03,280 --> 00:07:07,119
and they'll live as long as the system

207
00:07:05,360 --> 00:07:09,599
doesn't reboot

208
00:07:07,120 --> 00:07:10,400
or like drydex showed autorun is created

209
00:07:09,599 --> 00:07:12,960
on shutdown

210
00:07:10,400 --> 00:07:13,679
then deleted on startup once the mower

211
00:07:12,960 --> 00:07:16,000
loads so

212
00:07:13,680 --> 00:07:17,199
there's no signs of persistence um

213
00:07:16,000 --> 00:07:18,720
pretty typical for some of these

214
00:07:17,199 --> 00:07:20,000
commodity malwares who saw this with one

215
00:07:18,720 --> 00:07:22,560
mti

216
00:07:20,000 --> 00:07:24,080
dealing with them in the gaming too so

217
00:07:22,560 --> 00:07:26,880
what is the memory may be

218
00:07:24,080 --> 00:07:26,880
all we can see

219
00:07:27,120 --> 00:07:30,639
and like i mentioned trick bot on the

220
00:07:28,960 --> 00:07:31,520
domain controller doesn't survive or

221
00:07:30,639 --> 00:07:32,720
reboot

222
00:07:31,520 --> 00:07:34,080
and so this is something we need to

223
00:07:32,720 --> 00:07:35,840
really pay attention to because now

224
00:07:34,080 --> 00:07:37,039
trickbot's a commodity malware lots of

225
00:07:35,840 --> 00:07:38,080
us have seen it lots of us have

226
00:07:37,039 --> 00:07:40,719
evaluated

227
00:07:38,080 --> 00:07:42,240
lots of us have gotten it and so we now

228
00:07:40,720 --> 00:07:44,240
need to think uh oh

229
00:07:42,240 --> 00:07:46,080
i can't go run tools and check user

230
00:07:44,240 --> 00:07:47,840
directories for things i can't go look

231
00:07:46,080 --> 00:07:48,960
for an asap because it's probably not

232
00:07:47,840 --> 00:07:50,638
going to exist

233
00:07:48,960 --> 00:07:52,080
right so we're going back to old school

234
00:07:50,639 --> 00:07:54,240
forensics in some

235
00:07:52,080 --> 00:07:56,000
aspect of making sure that memory is

236
00:07:54,240 --> 00:07:56,639
something we look at or something that's

237
00:07:56,000 --> 00:07:59,840
running

238
00:07:56,639 --> 00:08:01,599
is something we look at so how do we

239
00:07:59,840 --> 00:08:03,919
find this stuff

240
00:08:01,599 --> 00:08:05,840
first everything you should do should be

241
00:08:03,919 --> 00:08:08,318
mapped to miter attack

242
00:08:05,840 --> 00:08:09,840
if you haven't done this or don't uh

243
00:08:08,319 --> 00:08:10,319
understand the logic of what i'm talking

244
00:08:09,840 --> 00:08:11,758
about

245
00:08:10,319 --> 00:08:14,160
it just got a lot better with sub

246
00:08:11,759 --> 00:08:16,240
techniques um for example

247
00:08:14,160 --> 00:08:17,680
the items and memory only or the types

248
00:08:16,240 --> 00:08:19,680
of things i've talked about thus far

249
00:08:17,680 --> 00:08:21,919
are technique 1500 compile after

250
00:08:19,680 --> 00:08:24,720
delivery technique 1127

251
00:08:21,919 --> 00:08:25,599
trusted developer utilities technique

252
00:08:24,720 --> 00:08:28,240
1055

253
00:08:25,599 --> 00:08:29,680
process injection technique 1196 control

254
00:08:28,240 --> 00:08:31,120
panel applets etc

255
00:08:29,680 --> 00:08:32,719
and there's more and then the sub

256
00:08:31,120 --> 00:08:34,719
techniques that just got released last

257
00:08:32,719 --> 00:08:37,440
week break those down even even better

258
00:08:34,719 --> 00:08:38,640
and this allows you to target your hunts

259
00:08:37,440 --> 00:08:40,959
target your

260
00:08:38,640 --> 00:08:42,880
your tools and try to figure out can you

261
00:08:40,958 --> 00:08:43,439
detect these things do you have a way to

262
00:08:42,880 --> 00:08:45,600
go about

263
00:08:43,440 --> 00:08:47,040
checking these running processes new

264
00:08:45,600 --> 00:08:49,760
control panel applets

265
00:08:47,040 --> 00:08:50,480
signs of injection uh misuse of wall

266
00:08:49,760 --> 00:08:52,959
bins

267
00:08:50,480 --> 00:08:53,519
and then things that compile on the fly

268
00:08:52,959 --> 00:08:56,399
as just

269
00:08:53,519 --> 00:08:57,600
an example so we need to create a

270
00:08:56,399 --> 00:09:00,000
process

271
00:08:57,600 --> 00:09:01,760
to start looking for this condition

272
00:09:00,000 --> 00:09:02,560
tools are just not preventing this

273
00:09:01,760 --> 00:09:04,959
technique

274
00:09:02,560 --> 00:09:05,599
i worked with the very large edr where

275
00:09:04,959 --> 00:09:07,518
we were

276
00:09:05,600 --> 00:09:09,360
definitely beat up by control panel

277
00:09:07,519 --> 00:09:10,800
applets because it was so noisy there

278
00:09:09,360 --> 00:09:12,800
was no alert for them

279
00:09:10,800 --> 00:09:14,640
and so this was the technique that was

280
00:09:12,800 --> 00:09:15,279
used and the red team did very well at

281
00:09:14,640 --> 00:09:17,439
it

282
00:09:15,279 --> 00:09:20,320
so we need to build a better process

283
00:09:17,440 --> 00:09:22,640
hourly weekly monthly

284
00:09:20,320 --> 00:09:24,399
build some routines to detect and alert

285
00:09:22,640 --> 00:09:26,319
for this type of technique

286
00:09:24,399 --> 00:09:28,399
we need to build a process into our

287
00:09:26,320 --> 00:09:29,440
daily weekly monthly yearly routines for

288
00:09:28,399 --> 00:09:32,320
threat hunts

289
00:09:29,440 --> 00:09:32,320
for this techniques

290
00:09:32,959 --> 00:09:36,000
fighting memoir traditional forensics

291
00:09:35,279 --> 00:09:37,600
has us dumping

292
00:09:36,000 --> 00:09:39,200
a memory image and running tools like

293
00:09:37,600 --> 00:09:42,240
volatility against it

294
00:09:39,200 --> 00:09:43,040
now for me that's very useful in many

295
00:09:42,240 --> 00:09:45,920
cases

296
00:09:43,040 --> 00:09:47,360
but it's also uh not very scalable if i

297
00:09:45,920 --> 00:09:48,560
want to try to run this on a hundred or

298
00:09:47,360 --> 00:09:50,480
a thousand machines

299
00:09:48,560 --> 00:09:52,319
so i need another way to look at it the

300
00:09:50,480 --> 00:09:52,720
volatility lets me dump the files lets

301
00:09:52,320 --> 00:09:54,640
me

302
00:09:52,720 --> 00:09:56,000
dump the dlls the drivers which then i

303
00:09:54,640 --> 00:09:57,839
can post process to see if there's

304
00:09:56,000 --> 00:09:59,120
anything going on with them

305
00:09:57,839 --> 00:10:01,600
and we'll show you some some of that

306
00:09:59,120 --> 00:10:03,360
here in a second logs can contain a lot

307
00:10:01,600 --> 00:10:05,360
of data this is going to be a big win

308
00:10:03,360 --> 00:10:06,240
here you can see the csc compiles you

309
00:10:05,360 --> 00:10:08,079
can see

310
00:10:06,240 --> 00:10:09,519
low bins being executed right so logs

311
00:10:08,079 --> 00:10:11,680
contain a lot of detail

312
00:10:09,519 --> 00:10:12,720
and you can alert on this behavior if

313
00:10:11,680 --> 00:10:16,319
you collect then

314
00:10:12,720 --> 00:10:18,399
detect or hunt checking run

315
00:10:16,320 --> 00:10:20,640
running processes and their modules on a

316
00:10:18,399 --> 00:10:22,480
live system is a great option

317
00:10:20,640 --> 00:10:23,760
because then i'm just scanning what's

318
00:10:22,480 --> 00:10:25,279
running currently

319
00:10:23,760 --> 00:10:26,880
it's quick i can do this across all the

320
00:10:25,279 --> 00:10:28,720
machines lower impact

321
00:10:26,880 --> 00:10:30,640
a lot a lot more a lot more speed

322
00:10:28,720 --> 00:10:32,079
involved here and better yet look for

323
00:10:30,640 --> 00:10:33,680
signs of injection would be

324
00:10:32,079 --> 00:10:35,519
awesome because that's where these guys

325
00:10:33,680 --> 00:10:36,160
are are side loading injecting into

326
00:10:35,519 --> 00:10:38,480
explore

327
00:10:36,160 --> 00:10:39,199
and other processes look for other

328
00:10:38,480 --> 00:10:41,519
artifacts

329
00:10:39,200 --> 00:10:43,920
auto runs asap registry keys storing

330
00:10:41,519 --> 00:10:45,760
scripts or large payloads wmi databases

331
00:10:43,920 --> 00:10:47,680
storing scripts and or payloads

332
00:10:45,760 --> 00:10:49,839
and on powershell large blocks office

333
00:10:47,680 --> 00:10:52,319
station base64 etc

334
00:10:49,839 --> 00:10:54,160
these things definitely these in-memory

335
00:10:52,320 --> 00:10:56,480
components will often write to that

336
00:10:54,160 --> 00:10:58,160
kofter stored its payloads in the

337
00:10:56,480 --> 00:11:00,640
registry so did when nti

338
00:10:58,160 --> 00:11:03,439
so looking and eliminating that uh is a

339
00:11:00,640 --> 00:11:03,439
big win there too

340
00:11:03,519 --> 00:11:06,640
so here's some examples i've got kofter

341
00:11:05,279 --> 00:11:09,680
quackbot and drydex

342
00:11:06,640 --> 00:11:13,360
in kofter's case uh they did an implant

343
00:11:09,680 --> 00:11:15,359
to siswell 64 service host well anytime

344
00:11:13,360 --> 00:11:16,079
i see ciswell 64 anything i'm going to

345
00:11:15,360 --> 00:11:18,480
investigate

346
00:11:16,079 --> 00:11:19,439
and if i see signs of implants like we

347
00:11:18,480 --> 00:11:23,360
show here

348
00:11:19,440 --> 00:11:25,200
then definitely it's highly suspect

349
00:11:23,360 --> 00:11:27,360
and here's an example of quackbot doing

350
00:11:25,200 --> 00:11:30,720
a similar technique so quackbot is

351
00:11:27,360 --> 00:11:32,480
implanting into ciswell 64 explorer

352
00:11:30,720 --> 00:11:33,920
well you know these are all 64-bit

353
00:11:32,480 --> 00:11:36,160
machines microsoft doesn't really

354
00:11:33,920 --> 00:11:38,959
support 32-bit much anymore

355
00:11:36,160 --> 00:11:40,800
and so it's real obvious to me that

356
00:11:38,959 --> 00:11:43,760
something fishy is here when i see two

357
00:11:40,800 --> 00:11:45,439
explorers and one of them's in cisvo 64.

358
00:11:43,760 --> 00:11:47,920
and then looking at drydex it's a little

359
00:11:45,440 --> 00:11:50,639
different drudex side loads of dll

360
00:11:47,920 --> 00:11:51,920
using a trusted known good binary in an

361
00:11:50,639 --> 00:11:54,480
odd location

362
00:11:51,920 --> 00:11:55,040
and that's really the trick there it

363
00:11:54,480 --> 00:11:57,040
definitely

364
00:11:55,040 --> 00:11:59,120
injects into the parent which in this

365
00:11:57,040 --> 00:12:00,880
case has run dll-32 how they launched

366
00:11:59,120 --> 00:12:04,079
the dll in this case

367
00:12:00,880 --> 00:12:06,160
um and uh the item obviously the dll

368
00:12:04,079 --> 00:12:08,239
is not signed it's not from the catalog

369
00:12:06,160 --> 00:12:10,560
so these are dead giveaways to us

370
00:12:08,240 --> 00:12:12,399
in the login d area when we do a static

371
00:12:10,560 --> 00:12:14,079
analysis with our b9 module

372
00:12:12,399 --> 00:12:16,079
and that the file is definitely

373
00:12:14,079 --> 00:12:16,719
malicious no matter what they named the

374
00:12:16,079 --> 00:12:19,120
file

375
00:12:16,720 --> 00:12:21,040
i made it named drydex just for ease of

376
00:12:19,120 --> 00:12:23,360
being able to read it

377
00:12:21,040 --> 00:12:25,760
in the case of extracted files so things

378
00:12:23,360 --> 00:12:27,440
we extract or dump with login d or

379
00:12:25,760 --> 00:12:30,000
we would do the file extraction with

380
00:12:27,440 --> 00:12:32,399
volatility here's the same kind of

381
00:12:30,000 --> 00:12:33,360
scenario i take the files and i post

382
00:12:32,399 --> 00:12:35,600
cross quack bot

383
00:12:33,360 --> 00:12:36,639
and i can immediately see through a

384
00:12:35,600 --> 00:12:40,079
string

385
00:12:36,639 --> 00:12:40,880
query that we do that the pdb string is

386
00:12:40,079 --> 00:12:42,239
very odd

387
00:12:40,880 --> 00:12:44,000
you know it's something that that

388
00:12:42,240 --> 00:12:45,680
definitely doesn't look normal to me and

389
00:12:44,000 --> 00:12:48,000
it would be suspicious

390
00:12:45,680 --> 00:12:49,199
uh here's kofter doing some weird things

391
00:12:48,000 --> 00:12:51,519
with their naming

392
00:12:49,200 --> 00:12:53,120
so again what the external file name is

393
00:12:51,519 --> 00:12:54,560
is not often what the internal or

394
00:12:53,120 --> 00:12:56,880
original file name is

395
00:12:54,560 --> 00:12:58,399
and so those two stick out as artifacts

396
00:12:56,880 --> 00:13:01,439
that we can definitely parse

397
00:12:58,399 --> 00:13:03,760
the strings for and see

398
00:13:01,440 --> 00:13:05,200
or the metadata and in dragnet's case

399
00:13:03,760 --> 00:13:08,160
they use this great

400
00:13:05,200 --> 00:13:10,880
pdb location c stop soft duck liquid

401
00:13:08,160 --> 00:13:12,880
build wide divide dictionary.pdb

402
00:13:10,880 --> 00:13:14,720
uh you know that would stick out to most

403
00:13:12,880 --> 00:13:16,399
analysts i think

404
00:13:14,720 --> 00:13:20,240
and these were evaluated to log in the

405
00:13:16,399 --> 00:13:22,399
b9 module as we extracted these files

406
00:13:20,240 --> 00:13:24,079
so some more examples right they the bad

407
00:13:22,399 --> 00:13:26,880
guys can call out to the internet

408
00:13:24,079 --> 00:13:27,359
download code or compile it uh they can

409
00:13:26,880 --> 00:13:29,680
use

410
00:13:27,360 --> 00:13:30,639
the http capability within excel for

411
00:13:29,680 --> 00:13:32,079
example right

412
00:13:30,639 --> 00:13:35,040
as just one they can use all the old

413
00:13:32,079 --> 00:13:36,399
bins to fetch this stuff as well

414
00:13:35,040 --> 00:13:38,240
and they fetch the malware so it doesn't

415
00:13:36,399 --> 00:13:38,639
live on disk they drop it and then they

416
00:13:38,240 --> 00:13:40,240
can do

417
00:13:38,639 --> 00:13:42,240
many things right cobalt strike and

418
00:13:40,240 --> 00:13:44,079
scythe make custom malware packages that

419
00:13:42,240 --> 00:13:45,279
you can configure to do whatever it is

420
00:13:44,079 --> 00:13:47,199
you want to do

421
00:13:45,279 --> 00:13:49,199
the low bins are trusted signed

422
00:13:47,199 --> 00:13:49,599
microsoft binaries that have the ability

423
00:13:49,199 --> 00:13:51,279
of

424
00:13:49,600 --> 00:13:53,440
of loading like we saw with drydex and

425
00:13:51,279 --> 00:13:55,199
run dll 32 in the previous slide

426
00:13:53,440 --> 00:13:57,120
uh red serve can call up the internet

427
00:13:55,199 --> 00:13:57,599
radios and can call it the internet as

428
00:13:57,120 --> 00:13:59,279
well

429
00:13:57,600 --> 00:14:01,279
there's a whole list which i think

430
00:13:59,279 --> 00:14:04,399
started out with i don't know casey data

431
00:14:01,279 --> 00:14:06,160
a list on 15 20 lol bins and it's well

432
00:14:04,399 --> 00:14:08,399
over 100 now and here's a link to the

433
00:14:06,160 --> 00:14:10,399
github page for that project

434
00:14:08,399 --> 00:14:12,480
and then there's the compilers so if i

435
00:14:10,399 --> 00:14:15,079
download these dot cs command line

436
00:14:12,480 --> 00:14:17,760
files into the temp directory i launched

437
00:14:15,079 --> 00:14:18,319
csc.exe or ms build or jsc whatever the

438
00:14:17,760 --> 00:14:20,480
combo

439
00:14:18,320 --> 00:14:22,079
of files you downloaded and then i just

440
00:14:20,480 --> 00:14:22,880
compile them on the fly and inject them

441
00:14:22,079 --> 00:14:25,199
into memory

442
00:14:22,880 --> 00:14:26,399
so watching for these executions are key

443
00:14:25,199 --> 00:14:27,839
as well

444
00:14:26,399 --> 00:14:29,360
and then they may write to disk on

445
00:14:27,839 --> 00:14:30,800
shutdown or delete on startup like in

446
00:14:29,360 --> 00:14:32,639
the case of drydex's

447
00:14:30,800 --> 00:14:34,800
previous cases and other malware i have

448
00:14:32,639 --> 00:14:34,800
seen

449
00:14:35,120 --> 00:14:38,560
so in the course of the uh of the

450
00:14:37,519 --> 00:14:40,000
compiled on the fly

451
00:14:38,560 --> 00:14:42,399
now here's an example where you can see

452
00:14:40,000 --> 00:14:42,880
the dot cs and command line files on the

453
00:14:42,399 --> 00:14:44,720
right

454
00:14:42,880 --> 00:14:47,199
and here's what it looks like in process

455
00:14:44,720 --> 00:14:48,000
explorer showing command.exe calling

456
00:14:47,199 --> 00:14:50,319
powershell

457
00:14:48,000 --> 00:14:52,560
calling csc so the parent child

458
00:14:50,320 --> 00:14:55,360
relationship is definitely odd here

459
00:14:52,560 --> 00:14:57,359
and clearly uh csc compiling would make

460
00:14:55,360 --> 00:14:59,440
me investigate it so look for the random

461
00:14:57,360 --> 00:15:00,800
dot cs the random name dot cs the random

462
00:14:59,440 --> 00:15:03,760
name dots command line

463
00:15:00,800 --> 00:15:06,000
and executions of csc exe no config full

464
00:15:03,760 --> 00:15:07,920
paths

465
00:15:06,000 --> 00:15:09,760
control play on laplets i really don't

466
00:15:07,920 --> 00:15:11,439
like these right these things over here

467
00:15:09,760 --> 00:15:12,000
all the control panels full of them the

468
00:15:11,440 --> 00:15:14,639
flash player

469
00:15:12,000 --> 00:15:15,839
java etc and they're generally executed

470
00:15:14,639 --> 00:15:18,720
with run dll32

471
00:15:15,839 --> 00:15:20,320
or control.exe uh whatever directory

472
00:15:18,720 --> 00:15:21,680
they want to use they can use

473
00:15:20,320 --> 00:15:23,680
and they call it whatever it is they

474
00:15:21,680 --> 00:15:25,279
want to call it a fake java they make it

475
00:15:23,680 --> 00:15:27,040
look like java make it look like flash

476
00:15:25,279 --> 00:15:28,399
player and because they're launching it

477
00:15:27,040 --> 00:15:30,719
where their cpls live

478
00:15:28,399 --> 00:15:31,920
it's highly noisy and they pretty much

479
00:15:30,720 --> 00:15:32,639
can live under their you know go into

480
00:15:31,920 --> 00:15:34,719
the radar

481
00:15:32,639 --> 00:15:36,800
and live there and nobody will notice

482
00:15:34,720 --> 00:15:37,279
and many edr's one i've had experience

483
00:15:36,800 --> 00:15:38,959
with

484
00:15:37,279 --> 00:15:40,720
uh just doesn't have an alert for this

485
00:15:38,959 --> 00:15:42,880
and it is a minor attack

486
00:15:40,720 --> 00:15:44,639
technique id that's why mapping to mitre

487
00:15:42,880 --> 00:15:46,720
is a great thing

488
00:15:44,639 --> 00:15:48,880
it launches a bad dll into memory though

489
00:15:46,720 --> 00:15:50,639
using a load bin the cpo files load all

490
00:15:48,880 --> 00:15:51,920
the time so it's very noisy so you're

491
00:15:50,639 --> 00:15:53,600
going to have to really work on

492
00:15:51,920 --> 00:15:55,680
excluding all the noisy

493
00:15:53,600 --> 00:15:58,000
normal traffic the baselining of this

494
00:15:55,680 --> 00:16:00,160
scenario third-party applets are not

495
00:15:58,000 --> 00:16:01,279
well signed unfortunately furthering the

496
00:16:00,160 --> 00:16:02,800
investigation

497
00:16:01,279 --> 00:16:04,720
of making it look obvious well that

498
00:16:02,800 --> 00:16:06,800
stuff will be unsigned well surprised

499
00:16:04,720 --> 00:16:08,800
some of the good stuff will be too

500
00:16:06,800 --> 00:16:10,959
many edr's don't learn this method and

501
00:16:08,800 --> 00:16:13,199
red teams love this method it comes with

502
00:16:10,959 --> 00:16:15,839
cobalt strike scythe and others

503
00:16:13,199 --> 00:16:16,240
will utilize and provide modules for you

504
00:16:15,839 --> 00:16:19,839
to

505
00:16:16,240 --> 00:16:23,600
infect from a red team perspective

506
00:16:19,839 --> 00:16:26,240
so monitoring for and threat hunting

507
00:16:23,600 --> 00:16:27,040
we need to develop a process to monitor

508
00:16:26,240 --> 00:16:29,920
and detect

509
00:16:27,040 --> 00:16:31,519
for and or threat hunt for signs of

510
00:16:29,920 --> 00:16:34,240
these techniques step one

511
00:16:31,519 --> 00:16:36,000
you have to enable the data so if you're

512
00:16:34,240 --> 00:16:37,759
doing logging and you need to go back to

513
00:16:36,000 --> 00:16:39,440
the cheat sheets i mentioned earlier

514
00:16:37,759 --> 00:16:41,839
configure systems that at least collect

515
00:16:39,440 --> 00:16:43,680
this data in the case of the windows

516
00:16:41,839 --> 00:16:45,680
it's not on by default sorry to say

517
00:16:43,680 --> 00:16:46,638
microsoft does not do a good job default

518
00:16:45,680 --> 00:16:48,399
logging

519
00:16:46,639 --> 00:16:50,000
mac does a better job linux you're going

520
00:16:48,399 --> 00:16:53,120
to do some work there as well

521
00:16:50,000 --> 00:16:55,040
to make sure that you are collecting

522
00:16:53,120 --> 00:16:56,639
this information so that you can look

523
00:16:55,040 --> 00:16:59,279
for these signs of these command

524
00:16:56,639 --> 00:17:01,759
parameters of compiling and whatnot

525
00:16:59,279 --> 00:17:03,519
and enable for windows be sure to enable

526
00:17:01,759 --> 00:17:04,160
and collect process command line this is

527
00:17:03,519 --> 00:17:05,599
crucial

528
00:17:04,160 --> 00:17:07,360
this is a lot of edr's do this

529
00:17:05,599 --> 00:17:09,039
automatically

530
00:17:07,359 --> 00:17:10,799
and i know there's a thud of you know

531
00:17:09,039 --> 00:17:12,160
hey i may see a password but trust me

532
00:17:10,799 --> 00:17:14,400
the red team and the bad guys

533
00:17:12,160 --> 00:17:16,319
are not looking at logs for passwords

534
00:17:14,400 --> 00:17:17,679
they are doing mimikats they are doing

535
00:17:16,319 --> 00:17:19,760
responder they're doing

536
00:17:17,679 --> 00:17:21,199
keystroke logging to get your passwords

537
00:17:19,760 --> 00:17:23,839
or you're just going to give them up

538
00:17:21,199 --> 00:17:24,319
as uh potentially solve the twitter

539
00:17:23,839 --> 00:17:26,879
account

540
00:17:24,319 --> 00:17:28,399
hack or somebody might have been paid so

541
00:17:26,880 --> 00:17:29,919
there's lots of ways to get passwords

542
00:17:28,400 --> 00:17:32,160
and reading the logs is not one of them

543
00:17:29,919 --> 00:17:35,120
especially because they will rotate

544
00:17:32,160 --> 00:17:35,840
as local logs are very small normally

545
00:17:35,120 --> 00:17:37,600
step two

546
00:17:35,840 --> 00:17:39,678
create detections for many of these

547
00:17:37,600 --> 00:17:41,439
techniques i've spoken about so far

548
00:17:39,679 --> 00:17:42,960
and process command line is going to be

549
00:17:41,440 --> 00:17:45,120
key in

550
00:17:42,960 --> 00:17:48,640
seeing these initial execution it's in

551
00:17:45,120 --> 00:17:50,879
the parameters from a long perspective

552
00:17:48,640 --> 00:17:53,120
step three come up with a process to

553
00:17:50,880 --> 00:17:54,080
scan running processes and their loaded

554
00:17:53,120 --> 00:17:56,080
modules

555
00:17:54,080 --> 00:17:59,520
running processes as we saw with the

556
00:17:56,080 --> 00:18:02,799
injections in the case of quackbot

557
00:17:59,520 --> 00:18:04,720
and kofter in the case of drydex it's a

558
00:18:02,799 --> 00:18:05,600
side loaded dll and injection into

559
00:18:04,720 --> 00:18:08,080
explorer

560
00:18:05,600 --> 00:18:09,120
so it's real key here to look at what's

561
00:18:08,080 --> 00:18:10,960
running on the box

562
00:18:09,120 --> 00:18:13,439
again you can do a volatility memory

563
00:18:10,960 --> 00:18:15,600
dump and process it with volatility or

564
00:18:13,440 --> 00:18:17,440
you know go that route as well more time

565
00:18:15,600 --> 00:18:19,918
consuming larger files but

566
00:18:17,440 --> 00:18:22,000
uh seriously consider looking for a way

567
00:18:19,919 --> 00:18:22,880
to scan running processes and the

568
00:18:22,000 --> 00:18:26,000
modules that they

569
00:18:22,880 --> 00:18:28,320
load to look for signs these bad food

570
00:18:26,000 --> 00:18:29,280
and tech to detect these in memory only

571
00:18:28,320 --> 00:18:31,039
infections

572
00:18:29,280 --> 00:18:32,879
this should be both for regular

573
00:18:31,039 --> 00:18:34,640
detection and for threat hunting so i

574
00:18:32,880 --> 00:18:35,760
can threat hunt go out and connect all

575
00:18:34,640 --> 00:18:37,039
these machines with something like

576
00:18:35,760 --> 00:18:38,559
arthur winterm

577
00:18:37,039 --> 00:18:40,480
uh connections or any other tool you

578
00:18:38,559 --> 00:18:42,799
have a big fix or whatnot

579
00:18:40,480 --> 00:18:43,679
run a tool that looks for this condition

580
00:18:42,799 --> 00:18:45,760
dump it out

581
00:18:43,679 --> 00:18:47,840
to a location that's known and it goes

582
00:18:45,760 --> 00:18:50,240
to your sim or you just pull back the

583
00:18:47,840 --> 00:18:51,918
results and parse it manually

584
00:18:50,240 --> 00:18:53,360
if it's a detection mechanism again you

585
00:18:51,919 --> 00:18:54,080
can run this as a scheduled task or

586
00:18:53,360 --> 00:18:56,080
whatnot

587
00:18:54,080 --> 00:18:57,520
and get this sent to your sim to alert

588
00:18:56,080 --> 00:18:58,159
on and then of course you're going to

589
00:18:57,520 --> 00:18:59,840
filter out

590
00:18:58,160 --> 00:19:01,840
the known goods and hopefully you'll

591
00:18:59,840 --> 00:19:02,799
have a pretty good alert for any signs

592
00:19:01,840 --> 00:19:04,799
of injections

593
00:19:02,799 --> 00:19:06,000
there are definitely signs of normal

594
00:19:04,799 --> 00:19:07,760
hooking that's normal

595
00:19:06,000 --> 00:19:10,240
chrome and firefox will hook all the

596
00:19:07,760 --> 00:19:11,600
time and so look for the injections in

597
00:19:10,240 --> 00:19:13,840
the implants

598
00:19:11,600 --> 00:19:17,039
um and again watch for these indication

599
00:19:13,840 --> 00:19:18,559
injections is the biggest key here

600
00:19:17,039 --> 00:19:20,400
if you want to go the next route after

601
00:19:18,559 --> 00:19:22,320
you dump files from let's say volatility

602
00:19:20,400 --> 00:19:23,919
or log into your other item you want to

603
00:19:22,320 --> 00:19:26,960
dump files from

604
00:19:23,919 --> 00:19:29,520
you can scan the string output

605
00:19:26,960 --> 00:19:31,520
of that file and look for indications of

606
00:19:29,520 --> 00:19:33,600
these strings so there's a short list

607
00:19:31,520 --> 00:19:35,520
and these are normally occurring in

608
00:19:33,600 --> 00:19:37,199
other programs for sure

609
00:19:35,520 --> 00:19:38,559
but definitely if you were to evaluate

610
00:19:37,200 --> 00:19:42,160
the three samples i showed you

611
00:19:38,559 --> 00:19:44,399
these strings show up a lot it's not a

612
00:19:42,160 --> 00:19:46,400
it's a high false positive rate but it

613
00:19:44,400 --> 00:19:52,880
is a good first step of doing some

614
00:19:46,400 --> 00:19:54,720
string parsing for injected items

615
00:19:52,880 --> 00:19:56,400
low bins low bass that can download

616
00:19:54,720 --> 00:19:58,160
stuff so here's a short list of items

617
00:19:56,400 --> 00:20:00,880
that we know can download files

618
00:19:58,160 --> 00:20:02,400
according to cisco talos uh i would

619
00:20:00,880 --> 00:20:04,240
concur with several of these i've seen

620
00:20:02,400 --> 00:20:07,440
these quite extensively

621
00:20:04,240 --> 00:20:10,240
mshta heavily used by kofter for example

622
00:20:07,440 --> 00:20:10,799
and when nti um these on the right will

623
00:20:10,240 --> 00:20:13,840
show

624
00:20:10,799 --> 00:20:15,520
uh a lot more use in the wild in

625
00:20:13,840 --> 00:20:17,520
as regards to downloading stuff

626
00:20:15,520 --> 00:20:18,799
powershell obviously registered 32 we

627
00:20:17,520 --> 00:20:20,158
see that it's admin

628
00:20:18,799 --> 00:20:22,799
the background intelligent transfer

629
00:20:20,159 --> 00:20:23,760
service um can all download things to

630
00:20:22,799 --> 00:20:25,679
your box

631
00:20:23,760 --> 00:20:27,280
and so these are two lists you can use

632
00:20:25,679 --> 00:20:31,360
to help craft your

633
00:20:27,280 --> 00:20:33,840
your alerts hunts and or detections

634
00:20:31,360 --> 00:20:35,678
and remember it's not that these execute

635
00:20:33,840 --> 00:20:37,280
it's the process command line that is

636
00:20:35,679 --> 00:20:39,440
key here it's what executes

637
00:20:37,280 --> 00:20:41,120
after the name of this binary and of

638
00:20:39,440 --> 00:20:43,120
course matthew's the minor attack

639
00:20:41,120 --> 00:20:48,158
many of these items are in minor attack

640
00:20:43,120 --> 00:20:51,439
as technique ids or sub techniques

641
00:20:48,159 --> 00:20:52,640
best options for process tools well log

642
00:20:51,440 --> 00:20:54,000
management is going to be your best

643
00:20:52,640 --> 00:20:56,880
friend here right if you can

644
00:20:54,000 --> 00:20:58,640
send the log data of these executions

645
00:20:56,880 --> 00:20:59,840
with their parameters to a log

646
00:20:58,640 --> 00:21:01,919
management solution

647
00:20:59,840 --> 00:21:04,080
by far going to be your best option to

648
00:21:01,919 --> 00:21:05,679
catch these things as they execute

649
00:21:04,080 --> 00:21:07,600
versus worrying about or trying to

650
00:21:05,679 --> 00:21:10,000
detect these later

651
00:21:07,600 --> 00:21:11,760
if not then you will need a process to

652
00:21:10,000 --> 00:21:13,760
manually check for running processes and

653
00:21:11,760 --> 00:21:15,760
their modules and signs of injections or

654
00:21:13,760 --> 00:21:18,879
you're going to have to do

655
00:21:15,760 --> 00:21:20,879
large-scale memory uh dumps with a

656
00:21:18,880 --> 00:21:22,080
tool enterprise tool like in case or

657
00:21:20,880 --> 00:21:23,919
something or

658
00:21:22,080 --> 00:21:25,360
manually go dump all the memory and

659
00:21:23,919 --> 00:21:27,440
machines every so often

660
00:21:25,360 --> 00:21:29,439
as part of a hunt and then process

661
00:21:27,440 --> 00:21:30,960
volatility etc and then maybe process

662
00:21:29,440 --> 00:21:32,000
that up with log nd

663
00:21:30,960 --> 00:21:33,840
but you'll have to come up with

664
00:21:32,000 --> 00:21:35,200
something if you don't um you're going

665
00:21:33,840 --> 00:21:36,399
to get nailed like trick bot

666
00:21:35,200 --> 00:21:39,200
is shown with the injection of the

667
00:21:36,400 --> 00:21:41,360
domain controller you may find patient

668
00:21:39,200 --> 00:21:43,679
zero which is the user that got

669
00:21:41,360 --> 00:21:45,199
infected and re-image them but guess

670
00:21:43,679 --> 00:21:46,080
what you got malware running in your

671
00:21:45,200 --> 00:21:47,600
domain controller

672
00:21:46,080 --> 00:21:49,520
so this is kind of a critical thing

673
00:21:47,600 --> 00:21:51,840
we're going to need to start doing

674
00:21:49,520 --> 00:21:54,240
uh log nd premium system journals tools

675
00:21:51,840 --> 00:21:56,480
suites sysmon id 8 and 10

676
00:21:54,240 --> 00:21:58,559
using winram with arthur memory dump

677
00:21:56,480 --> 00:21:59,360
with volatility are all possible options

678
00:21:58,559 --> 00:22:00,960
here

679
00:21:59,360 --> 00:22:03,678
there's many ways to skin a cat just

680
00:22:00,960 --> 00:22:07,120
pick one or two and try it and get it

681
00:22:03,679 --> 00:22:07,120
integrated into your process

682
00:22:07,360 --> 00:22:11,760
so conclusion create a process to look

683
00:22:10,640 --> 00:22:13,600
for running processes

684
00:22:11,760 --> 00:22:16,000
and their modules look for signs of

685
00:22:13,600 --> 00:22:18,639
injections more importantly

686
00:22:16,000 --> 00:22:19,280
if you're and test your edrs right use

687
00:22:18,640 --> 00:22:21,600
some of the

688
00:22:19,280 --> 00:22:23,360
uh automated attack tools to test if

689
00:22:21,600 --> 00:22:25,120
this condition can be detected

690
00:22:23,360 --> 00:22:26,479
or actually go you know sign up for

691
00:22:25,120 --> 00:22:28,959
skype or or

692
00:22:26,480 --> 00:22:30,480
cobalt strike and try it or hire a team

693
00:22:28,960 --> 00:22:32,880
like ncc group or others

694
00:22:30,480 --> 00:22:34,000
to actually use this technique and see

695
00:22:32,880 --> 00:22:36,240
if you can detect it

696
00:22:34,000 --> 00:22:38,080
or afterwards go hunt for it and look

697
00:22:36,240 --> 00:22:40,080
for the signs of injection

698
00:22:38,080 --> 00:22:41,918
log the process command line execution

699
00:22:40,080 --> 00:22:44,158
collect that and alert on that this

700
00:22:41,919 --> 00:22:45,520
is going to be key in seeing its initial

701
00:22:44,159 --> 00:22:47,840
execution

702
00:22:45,520 --> 00:22:49,679
and of course monitor for the executions

703
00:22:47,840 --> 00:22:51,678
discussions presentation

704
00:22:49,679 --> 00:22:53,280
and uh you'll be way ahead of the game

705
00:22:51,679 --> 00:22:55,039
here

706
00:22:53,280 --> 00:22:56,639
here's some tools to consider i've

707
00:22:55,039 --> 00:22:58,000
listed a bunch here that are pretty well

708
00:22:56,640 --> 00:23:01,440
known some open source

709
00:22:58,000 --> 00:23:03,200
uh some premium items uh some are older

710
00:23:01,440 --> 00:23:05,919
projects may not be as compatible

711
00:23:03,200 --> 00:23:09,600
windows 10 nowadays

712
00:23:05,919 --> 00:23:11,039
uh gur recall invitero mem hunter uh i

713
00:23:09,600 --> 00:23:12,559
couldn't get that to work now that the

714
00:23:11,039 --> 00:23:15,600
later versions of windows and

715
00:23:12,559 --> 00:23:16,480
old.net version being used but there's

716
00:23:15,600 --> 00:23:18,799
some tools to

717
00:23:16,480 --> 00:23:20,000
give you some ideas you can go play with

718
00:23:18,799 --> 00:23:20,480
let me know if you have any others as

719
00:23:20,000 --> 00:23:22,720
well

720
00:23:20,480 --> 00:23:24,240
some other homework and resources to

721
00:23:22,720 --> 00:23:27,679
look at that definitely will

722
00:23:24,240 --> 00:23:29,200
help you understand this area um again

723
00:23:27,679 --> 00:23:30,880
mitre attacks some techniques coming

724
00:23:29,200 --> 00:23:32,640
soon so go read up on that

725
00:23:30,880 --> 00:23:34,000
it's now released you can go look at the

726
00:23:32,640 --> 00:23:36,159
matrix and expand it

727
00:23:34,000 --> 00:23:38,799
the sub techniques i really like that i

728
00:23:36,159 --> 00:23:40,799
tell people to go plot that at 36 by 48

729
00:23:38,799 --> 00:23:42,320
print lots of copies laminate it and get

730
00:23:40,799 --> 00:23:42,960
your color coders and start highlighting

731
00:23:42,320 --> 00:23:44,639
stuff

732
00:23:42,960 --> 00:23:47,039
and if this is a project you take on

733
00:23:44,640 --> 00:23:48,159
just for mitre and map all these process

734
00:23:47,039 --> 00:23:49,679
injection and

735
00:23:48,159 --> 00:23:52,159
interesting ways of doing things then

736
00:23:49,679 --> 00:23:53,919
great make sure you have this covered so

737
00:23:52,159 --> 00:23:54,480
that you can catch that example of trick

738
00:23:53,919 --> 00:23:56,640
bot

739
00:23:54,480 --> 00:23:57,840
or the other quack box covers and dry

740
00:23:56,640 --> 00:23:59,039
decks that i discussed in this

741
00:23:57,840 --> 00:24:01,520
presentation

742
00:23:59,039 --> 00:24:02,480
um and again some other reading that you

743
00:24:01,520 --> 00:24:04,400
can do

744
00:24:02,480 --> 00:24:05,600
so uh some resources here's where we get

745
00:24:04,400 --> 00:24:07,840
arthurs we get login d

746
00:24:05,600 --> 00:24:09,120
here's we get the cheat sheets and with

747
00:24:07,840 --> 00:24:11,760
that we can go ahead

748
00:24:09,120 --> 00:24:12,158
and do some questions i will be hanging

749
00:24:11,760 --> 00:24:16,240
out

750
00:24:12,159 --> 00:24:17,840
in the my channel down there so you can

751
00:24:16,240 --> 00:24:19,039
ask me all kinds of questions and with

752
00:24:17,840 --> 00:24:22,399
that we'll uh

753
00:24:19,039 --> 00:24:22,400
we'll start answering some questions

754
00:24:23,840 --> 00:24:27,360
excellent thank you very much michael um

755
00:24:25,760 --> 00:24:28,480
i've been keeping track of a lot of

756
00:24:27,360 --> 00:24:30,879
these in here um

757
00:24:28,480 --> 00:24:32,480
i i guess i should first of all say

758
00:24:30,880 --> 00:24:33,520
you're probably getting a lot of traffic

759
00:24:32,480 --> 00:24:35,200
to your cheat sheets

760
00:24:33,520 --> 00:24:37,440
uh right now because there are a lot of

761
00:24:35,200 --> 00:24:40,640
requests for that url so we were helpful

762
00:24:37,440 --> 00:24:43,279
happy to uh to share that link out um

763
00:24:40,640 --> 00:24:45,760
one that came in fairly early on but i

764
00:24:43,279 --> 00:24:46,240
think actually works really well here is

765
00:24:45,760 --> 00:24:48,879
um

766
00:24:46,240 --> 00:24:49,520
if we hibernate a system with some of

767
00:24:48,880 --> 00:24:52,640
these

768
00:24:49,520 --> 00:24:55,440
uh these processes running

769
00:24:52,640 --> 00:24:57,120
um is is that findable in the

770
00:24:55,440 --> 00:24:58,400
hibernation files and i was wondering if

771
00:24:57,120 --> 00:24:59,360
you could talk a little bit about kind

772
00:24:58,400 --> 00:25:03,200
of the

773
00:24:59,360 --> 00:25:04,158
the post-mortem kind of flavor of memory

774
00:25:03,200 --> 00:25:05,360
forensics through

775
00:25:04,159 --> 00:25:07,360
through something like a hibernation

776
00:25:05,360 --> 00:25:09,520
funnel i think in the

777
00:25:07,360 --> 00:25:10,719
case of hibernation and extracting that

778
00:25:09,520 --> 00:25:11,760
you're going to have to go traditional

779
00:25:10,720 --> 00:25:13,679
forensics i don't

780
00:25:11,760 --> 00:25:15,279
i don't have a good way of doing that

781
00:25:13,679 --> 00:25:18,159
outside of

782
00:25:15,279 --> 00:25:19,039
of doing just typical forensics so using

783
00:25:18,159 --> 00:25:22,559
your your typical

784
00:25:19,039 --> 00:25:24,080
in case type tools um to be able to take

785
00:25:22,559 --> 00:25:25,520
that file then analyze it

786
00:25:24,080 --> 00:25:26,799
there are quite a bit of artifacts in

787
00:25:25,520 --> 00:25:28,240
there right so you should be able to see

788
00:25:26,799 --> 00:25:30,000
the fact that once you hibernated this

789
00:25:28,240 --> 00:25:32,080
box that everything's still there

790
00:25:30,000 --> 00:25:33,200
um and there should be great artifacts

791
00:25:32,080 --> 00:25:35,678
for you to detect

792
00:25:33,200 --> 00:25:38,400
but again it's very time consuming and

793
00:25:35,679 --> 00:25:39,679
the idea here is why i said a process

794
00:25:38,400 --> 00:25:42,080
is because i think this is something

795
00:25:39,679 --> 00:25:44,799
that needs to move more towards the live

796
00:25:42,080 --> 00:25:45,199
system analysis more in the hunting area

797
00:25:44,799 --> 00:25:47,600
more

798
00:25:45,200 --> 00:25:48,880
into find a tool that can protect you

799
00:25:47,600 --> 00:25:50,799
better here

800
00:25:48,880 --> 00:25:52,159
i know one of a red teamer blurted out

801
00:25:50,799 --> 00:25:53,520
you know i'm not promoting this

802
00:25:52,159 --> 00:25:55,200
particular solution because there's way

803
00:25:53,520 --> 00:25:57,520
around all edrs

804
00:25:55,200 --> 00:25:59,279
but crowdstrike seems to do a pretty

805
00:25:57,520 --> 00:26:00,879
good job in some of these areas

806
00:25:59,279 --> 00:26:02,320
and it really annoys some of our red

807
00:26:00,880 --> 00:26:04,480
teamers right so

808
00:26:02,320 --> 00:26:06,000
the idea here is to look for more

809
00:26:04,480 --> 00:26:09,279
detection capabilities

810
00:26:06,000 --> 00:26:11,520
more proactive live system capabilities

811
00:26:09,279 --> 00:26:13,200
because as we go into hibernation page

812
00:26:11,520 --> 00:26:16,158
file traditional forensics

813
00:26:13,200 --> 00:26:16,559
uh disk images they're time-consuming

814
00:26:16,159 --> 00:26:18,559
and

815
00:26:16,559 --> 00:26:20,559
disks are getting large they take

816
00:26:18,559 --> 00:26:21,200
forever to image they take forever to

817
00:26:20,559 --> 00:26:24,000
consume

818
00:26:21,200 --> 00:26:25,919
into the tool that you're using and so

819
00:26:24,000 --> 00:26:27,760
um what i'm proposing here is we start

820
00:26:25,919 --> 00:26:28,480
looking more at live systems for this

821
00:26:27,760 --> 00:26:30,320
area

822
00:26:28,480 --> 00:26:32,320
and so we get and cross that line into

823
00:26:30,320 --> 00:26:35,678
traditional friendships hyper fill page

824
00:26:32,320 --> 00:26:36,720
h file uh disk images at that point

825
00:26:35,679 --> 00:26:38,480
you're going to have to

826
00:26:36,720 --> 00:26:40,240
go low and slow and and do it the

827
00:26:38,480 --> 00:26:43,360
old-fashioned forensics way

828
00:26:40,240 --> 00:26:45,760
is my take yeah

829
00:26:43,360 --> 00:26:47,039
absolutely um another question that kind

830
00:26:45,760 --> 00:26:49,120
of actually follows on nicely

831
00:26:47,039 --> 00:26:51,600
something you're just saying um question

832
00:26:49,120 --> 00:26:54,320
came in about performing some of these

833
00:26:51,600 --> 00:26:56,320
types of investigative steps at scale

834
00:26:54,320 --> 00:26:59,279
one of you have any any suggestions or

835
00:26:56,320 --> 00:27:01,760
pointers on how in a large enterprise

836
00:26:59,279 --> 00:27:03,600
you would approach the idea of you know

837
00:27:01,760 --> 00:27:04,799
memory forensics when you've got

838
00:27:03,600 --> 00:27:07,039
fifty thousand hundred thousand

839
00:27:04,799 --> 00:27:09,200
endpoints or something along that line

840
00:27:07,039 --> 00:27:10,320
well memory forensics that scale is why

841
00:27:09,200 --> 00:27:13,200
i say let's go

842
00:27:10,320 --> 00:27:13,678
do it live right it's less intrusive i

843
00:27:13,200 --> 00:27:17,760
remember

844
00:27:13,679 --> 00:27:20,559
a little test i did uh stopping a

845
00:27:17,760 --> 00:27:22,480
a process on a game environment each

846
00:27:20,559 --> 00:27:23,678
process stopping it dumping the memory

847
00:27:22,480 --> 00:27:25,600
for each one of those

848
00:27:23,679 --> 00:27:27,200
and then scanning it for signs of the

849
00:27:25,600 --> 00:27:28,959
when nti strings

850
00:27:27,200 --> 00:27:30,480
and the minute you stop one of the

851
00:27:28,960 --> 00:27:32,000
processes that you know

852
00:27:30,480 --> 00:27:34,240
aren't supposed to be stopped and are

853
00:27:32,000 --> 00:27:36,799
trying to write data to a database

854
00:27:34,240 --> 00:27:38,399
you'll get a lot of hate email so you

855
00:27:36,799 --> 00:27:40,399
have to be real careful here right

856
00:27:38,399 --> 00:27:42,799
so in scale you do have a challenge you

857
00:27:40,399 --> 00:27:43,678
need a tool that lets you go from one to

858
00:27:42,799 --> 00:27:45,600
many

859
00:27:43,679 --> 00:27:48,000
whether it's a configuration management

860
00:27:45,600 --> 00:27:49,678
tool so for those who have big fix you

861
00:27:48,000 --> 00:27:50,960
have probably the best security tool on

862
00:27:49,679 --> 00:27:52,960
the face of the planet

863
00:27:50,960 --> 00:27:55,279
because bigfix not only lets you make a

864
00:27:52,960 --> 00:27:56,799
query like let's say osquery does or any

865
00:27:55,279 --> 00:27:58,399
question you might want to ponder

866
00:27:56,799 --> 00:28:01,039
you can craft within the big fix

867
00:27:58,399 --> 00:28:02,320
analysis and go out and say here go see

868
00:28:01,039 --> 00:28:04,559
if i have this but

869
00:28:02,320 --> 00:28:08,000
you also have fixlet capability and you

870
00:28:04,559 --> 00:28:10,559
can push out a fixlet that says go run

871
00:28:08,000 --> 00:28:11,360
memdum and give me an image of this

872
00:28:10,559 --> 00:28:13,360
thing you know

873
00:28:11,360 --> 00:28:14,719
at the proper hour after the backups are

874
00:28:13,360 --> 00:28:16,320
done whatever the

875
00:28:14,720 --> 00:28:18,240
coordination is because remember at

876
00:28:16,320 --> 00:28:20,240
enterprise you have a challenge one

877
00:28:18,240 --> 00:28:21,919
you have to fit it in when i t doesn't

878
00:28:20,240 --> 00:28:23,600
want to rip your neck off

879
00:28:21,919 --> 00:28:25,360
two if you're doing it against a server

880
00:28:23,600 --> 00:28:27,279
farm that has shared storage

881
00:28:25,360 --> 00:28:29,120
uh if you're asking for it to do a lot

882
00:28:27,279 --> 00:28:31,120
of disk related activities

883
00:28:29,120 --> 00:28:32,879
uh the sand's gonna get beat up and

884
00:28:31,120 --> 00:28:33,840
you'll have a lot of it guys trying to

885
00:28:32,880 --> 00:28:35,200
rip your head off

886
00:28:33,840 --> 00:28:37,199
so you have to take these things into

887
00:28:35,200 --> 00:28:38,799
account but a configurement a

888
00:28:37,200 --> 00:28:39,919
configuration management tool like let's

889
00:28:38,799 --> 00:28:41,760
say a big fix

890
00:28:39,919 --> 00:28:43,120
would be a great option here because i

891
00:28:41,760 --> 00:28:46,240
can create a job

892
00:28:43,120 --> 00:28:46,959
push out a a mem dump job to dump the

893
00:28:46,240 --> 00:28:49,600
memory to

894
00:28:46,960 --> 00:28:51,840
various locations storage whatever that

895
00:28:49,600 --> 00:28:53,678
i can then post process with volatility

896
00:28:51,840 --> 00:28:55,760
or i can push out a job let's say log

897
00:28:53,679 --> 00:28:57,360
into your system journals or other tools

898
00:28:55,760 --> 00:28:59,679
that will allow me to check the running

899
00:28:57,360 --> 00:29:00,320
processes on the fly as a as a typical

900
00:28:59,679 --> 00:29:02,880
job

901
00:29:00,320 --> 00:29:04,480
that is less intensive on the system

902
00:29:02,880 --> 00:29:05,600
because you are pretty much looking at

903
00:29:04,480 --> 00:29:08,240
only in memory

904
00:29:05,600 --> 00:29:09,918
and of course again work with rit guys

905
00:29:08,240 --> 00:29:12,880
to make sure they're not doing some

906
00:29:09,919 --> 00:29:13,760
compiling of of game code that would be

907
00:29:12,880 --> 00:29:16,240
a bad thing

908
00:29:13,760 --> 00:29:17,200
uh again don't ask me how i know that um

909
00:29:16,240 --> 00:29:18,880
so

910
00:29:17,200 --> 00:29:20,080
from that perspective the tools you have

911
00:29:18,880 --> 00:29:20,880
for an it that manage your

912
00:29:20,080 --> 00:29:23,039
infrastructure

913
00:29:20,880 --> 00:29:24,480
may be of great use to you here another

914
00:29:23,039 --> 00:29:25,120
one is if you're in a windows

915
00:29:24,480 --> 00:29:27,679
environment

916
00:29:25,120 --> 00:29:29,439
you have windows rm built into windows

917
00:29:27,679 --> 00:29:31,279
it's an already existing agent

918
00:29:29,440 --> 00:29:33,200
if you configure that you have the

919
00:29:31,279 --> 00:29:34,320
ability of command line control across

920
00:29:33,200 --> 00:29:36,080
the environment thus

921
00:29:34,320 --> 00:29:37,520
arthur projects like arthur which are

922
00:29:36,080 --> 00:29:39,279
for kukanza

923
00:29:37,520 --> 00:29:41,120
as well as the talk over and track two

924
00:29:39,279 --> 00:29:42,159
which uh i wish was off by an hour so i

925
00:29:41,120 --> 00:29:44,080
could watch it

926
00:29:42,159 --> 00:29:45,360
um but jonathan and i have already

927
00:29:44,080 --> 00:29:46,720
hooked up and we're gonna have some

928
00:29:45,360 --> 00:29:48,158
discussions after the fact

929
00:29:46,720 --> 00:29:50,880
but something that lets you do a

930
00:29:48,159 --> 00:29:52,799
one-to-many um and i think jonathan's on

931
00:29:50,880 --> 00:29:55,039
on track there right is a great example

932
00:29:52,799 --> 00:29:57,440
so definitely watch his recorded talk

933
00:29:55,039 --> 00:29:59,360
this is going to be a windows rm windows

934
00:29:57,440 --> 00:30:00,640
specific environment where i can run

935
00:29:59,360 --> 00:30:02,959
from my security or

936
00:30:00,640 --> 00:30:05,039
several security analyst desktops push a

937
00:30:02,960 --> 00:30:06,960
job across my entire environment

938
00:30:05,039 --> 00:30:08,399
and ten thousand hundred thousand

939
00:30:06,960 --> 00:30:10,240
endpoints as well

940
00:30:08,399 --> 00:30:12,320
i used to work for large healthcare and

941
00:30:10,240 --> 00:30:13,840
uh winrm was a solution we used and

942
00:30:12,320 --> 00:30:14,559
configured for some of the people that

943
00:30:13,840 --> 00:30:16,879
were

944
00:30:14,559 --> 00:30:18,799
acquired to investigate them so good

945
00:30:16,880 --> 00:30:22,159
question

946
00:30:18,799 --> 00:30:24,720
very cool um you know and just a

947
00:30:22,159 --> 00:30:25,520
a slight different kind of perspective

948
00:30:24,720 --> 00:30:27,440
on that you know

949
00:30:25,520 --> 00:30:28,720
my primary focus is on the network

950
00:30:27,440 --> 00:30:32,159
centric uh you know

951
00:30:28,720 --> 00:30:34,399
investigations uh network forensics and

952
00:30:32,159 --> 00:30:36,399
you know we use scoping in that same

953
00:30:34,399 --> 00:30:37,760
kind of a situation where instead of

954
00:30:36,399 --> 00:30:39,199
having a problem that is a hundred

955
00:30:37,760 --> 00:30:41,600
thousand size

956
00:30:39,200 --> 00:30:43,120
we try to figure out like where are the

957
00:30:41,600 --> 00:30:45,600
50 60 70

958
00:30:43,120 --> 00:30:46,158
that are in scope and then we're able to

959
00:30:45,600 --> 00:30:48,240
take that

960
00:30:46,159 --> 00:30:50,559
that scale still dealing 70 memory

961
00:30:48,240 --> 00:30:52,159
images is not necessarily feasible in

962
00:30:50,559 --> 00:30:54,158
many situations but

963
00:30:52,159 --> 00:30:55,440
you know being able to scope down your

964
00:30:54,159 --> 00:30:59,600
problem

965
00:30:55,440 --> 00:31:01,600
um to expand upon that a little bit

966
00:30:59,600 --> 00:31:03,678
um i would agree so when we approach

967
00:31:01,600 --> 00:31:04,000
threat hunting we never do it 100 of the

968
00:31:03,679 --> 00:31:05,440
time

969
00:31:04,000 --> 00:31:07,039
you don't put a threat tool out there

970
00:31:05,440 --> 00:31:08,640
and say go hunt all things

971
00:31:07,039 --> 00:31:10,559
for the very purpose of what i said

972
00:31:08,640 --> 00:31:12,159
about the service connected to a sand

973
00:31:10,559 --> 00:31:14,080
uh you potentially will crash the

974
00:31:12,159 --> 00:31:15,840
environment and and you know once that

975
00:31:14,080 --> 00:31:17,840
happens trying to get that back

976
00:31:15,840 --> 00:31:18,959
is hard so whenever you address this

977
00:31:17,840 --> 00:31:21,519
kind of challenge

978
00:31:18,960 --> 00:31:22,240
definitely do what phil points out

979
00:31:21,519 --> 00:31:24,159
sampling

980
00:31:22,240 --> 00:31:25,279
never do more than 10 of the environment

981
00:31:24,159 --> 00:31:27,039
once ever

982
00:31:25,279 --> 00:31:28,720
make sure it's refined make sure you've

983
00:31:27,039 --> 00:31:29,519
talked everybody did anybody see

984
00:31:28,720 --> 00:31:32,080
anything

985
00:31:29,519 --> 00:31:32,799
now this is going to be more true on

986
00:31:32,080 --> 00:31:34,399
servers

987
00:31:32,799 --> 00:31:36,080
than it will be on workstations

988
00:31:34,399 --> 00:31:38,399
especially in the case of doing

989
00:31:36,080 --> 00:31:40,399
just running process checks uh memory

990
00:31:38,399 --> 00:31:41,918
dumps uh you know the user might know

991
00:31:40,399 --> 00:31:43,518
something or see something and if

992
00:31:41,919 --> 00:31:44,240
they're compiling game code or any other

993
00:31:43,519 --> 00:31:46,240
kind of code

994
00:31:44,240 --> 00:31:48,000
where they have a very intensive

995
00:31:46,240 --> 00:31:50,080
calculating program running

996
00:31:48,000 --> 00:31:51,919
they will notice that this is occurring

997
00:31:50,080 --> 00:31:54,720
so always do your samples go from like

998
00:31:51,919 --> 00:31:57,279
10 then 10 to 20 to 20 to 40 then 40 to

999
00:31:54,720 --> 00:31:59,840
75 and then maybe do the last 25

1000
00:31:57,279 --> 00:32:01,039
but be very clear here of trying to just

1001
00:31:59,840 --> 00:32:02,879
you know say i'm gonna go try this and

1002
00:32:01,039 --> 00:32:04,320
launch everywhere until you are certain

1003
00:32:02,880 --> 00:32:06,799
there is no impact

1004
00:32:04,320 --> 00:32:08,158
to running these kinds of tools because

1005
00:32:06,799 --> 00:32:10,080
you know memory dumps across

1006
00:32:08,159 --> 00:32:11,360
a thousand or ten thousand or hundred

1007
00:32:10,080 --> 00:32:13,600
thousand units

1008
00:32:11,360 --> 00:32:15,279
uh you'll get a lot of help desk calls a

1009
00:32:13,600 --> 00:32:16,879
lot on heavy campers so that's that's a

1010
00:32:15,279 --> 00:32:19,519
really good point phil that the sampling

1011
00:32:16,880 --> 00:32:21,919
is is crucial here for sure

1012
00:32:19,519 --> 00:32:24,000
we we call those the resume generating

1013
00:32:21,919 --> 00:32:25,600
events sometimes where uh

1014
00:32:24,000 --> 00:32:29,120
it doesn't end well for the person that

1015
00:32:25,600 --> 00:32:29,120
just yolos their admin

1016
00:32:32,640 --> 00:32:36,320
so two questions that came in that are

1017
00:32:34,640 --> 00:32:38,080
somewhat related so i'm going to try to

1018
00:32:36,320 --> 00:32:40,960
summarize them both together

1019
00:32:38,080 --> 00:32:42,080
um questions came in about doing memory

1020
00:32:40,960 --> 00:32:44,880
forensics

1021
00:32:42,080 --> 00:32:46,399
whether it be at scale or targeted in

1022
00:32:44,880 --> 00:32:49,360
cloud environments

1023
00:32:46,399 --> 00:32:51,039
or in locally virtualized environments

1024
00:32:49,360 --> 00:32:51,439
is there any any kind of pointers you've

1025
00:32:51,039 --> 00:32:54,720
got

1026
00:32:51,440 --> 00:32:58,080
on on how that changes the game at all

1027
00:32:54,720 --> 00:33:00,720
not really the process is the same um uh

1028
00:32:58,080 --> 00:33:01,360
i won't call it a process uh an andrew

1029
00:33:00,720 --> 00:33:04,320
ism

1030
00:33:01,360 --> 00:33:05,918
with his canadian twang um the process

1031
00:33:04,320 --> 00:33:07,279
is the same there right you're gonna run

1032
00:33:05,919 --> 00:33:09,600
the same tool suites

1033
00:33:07,279 --> 00:33:11,600
it's just this can be ridiculously slow

1034
00:33:09,600 --> 00:33:13,760
i've done some vms and oh my gosh

1035
00:33:11,600 --> 00:33:15,360
literally start it and friday afternoon

1036
00:33:13,760 --> 00:33:16,240
and come back monday and it's still not

1037
00:33:15,360 --> 00:33:18,000
done

1038
00:33:16,240 --> 00:33:20,399
so i've been through there it's time

1039
00:33:18,000 --> 00:33:22,080
consuming understand it's time consuming

1040
00:33:20,399 --> 00:33:24,000
cloud will be a little better but again

1041
00:33:22,080 --> 00:33:27,519
it depends on how big a cloud box

1042
00:33:24,000 --> 00:33:28,799
you did but memory dumps same tool suite

1043
00:33:27,519 --> 00:33:31,600
you'll just have to create a jump post

1044
00:33:28,799 --> 00:33:33,200
potentially within it and then call

1045
00:33:31,600 --> 00:33:34,879
that data and save it back and have

1046
00:33:33,200 --> 00:33:36,240
permissions so

1047
00:33:34,880 --> 00:33:38,159
that's pretty much all you have to kind

1048
00:33:36,240 --> 00:33:39,760
of think about is how do i get to that

1049
00:33:38,159 --> 00:33:42,240
like on an open network

1050
00:33:39,760 --> 00:33:44,480
and how can i create that jump post or a

1051
00:33:42,240 --> 00:33:46,480
forensics host within the cloud

1052
00:33:44,480 --> 00:33:48,960
or in the case of the vm can i create an

1053
00:33:46,480 --> 00:33:51,039
esxi box that allows me to see and

1054
00:33:48,960 --> 00:33:51,919
access all these other boxes so i can do

1055
00:33:51,039 --> 00:33:54,640
this

1056
00:33:51,919 --> 00:33:55,360
but those vms those people will notice

1057
00:33:54,640 --> 00:33:58,080
if you start

1058
00:33:55,360 --> 00:33:59,678
pounding on them uh like this thus again

1059
00:33:58,080 --> 00:34:02,158
a running process

1060
00:33:59,679 --> 00:34:04,880
uh check and looking at their modules is

1061
00:34:02,159 --> 00:34:07,600
far faster we're talking a few minutes

1062
00:34:04,880 --> 00:34:09,200
compared to potentially uh an hour or

1063
00:34:07,600 --> 00:34:10,480
more and not to mention if you have to

1064
00:34:09,199 --> 00:34:12,638
do an image info

1065
00:34:10,480 --> 00:34:14,159
to determine what uh profile you're

1066
00:34:12,639 --> 00:34:16,240
going to run against this thing

1067
00:34:14,159 --> 00:34:18,159
uh holy moly that's gonna take up some

1068
00:34:16,239 --> 00:34:19,918
time

1069
00:34:18,159 --> 00:34:21,919
yeah and one that just came in kind of i

1070
00:34:19,918 --> 00:34:22,719
guess that's a corollary to what we were

1071
00:34:21,918 --> 00:34:23,918
just talking about

1072
00:34:22,719 --> 00:34:25,520
and i actually don't even know the

1073
00:34:23,918 --> 00:34:26,638
answer to this so hopefully you can shed

1074
00:34:25,520 --> 00:34:29,199
some light on it

1075
00:34:26,639 --> 00:34:30,879
how does something like docker change

1076
00:34:29,199 --> 00:34:32,638
change this do you go for the host or is

1077
00:34:30,879 --> 00:34:34,319
there some kind of artifact you can use

1078
00:34:32,639 --> 00:34:37,280
within the container

1079
00:34:34,320 --> 00:34:38,960
memory forensics uh funny uh i just

1080
00:34:37,280 --> 00:34:42,079
recently did a docker uh

1081
00:34:38,960 --> 00:34:44,240
uh investigation and you will have to go

1082
00:34:42,079 --> 00:34:45,839
to the host and run it from the host

1083
00:34:44,239 --> 00:34:47,678
docker is for the most part look at it

1084
00:34:45,839 --> 00:34:50,159
just like es6i or

1085
00:34:47,679 --> 00:34:51,119
aws it's an instance right it manages

1086
00:34:50,159 --> 00:34:53,919
the instance

1087
00:34:51,119 --> 00:34:55,359
uh docker you know itself has artifacts

1088
00:34:53,918 --> 00:34:56,719
to tell you what kind of track is going

1089
00:34:55,359 --> 00:34:58,880
in and out of those

1090
00:34:56,719 --> 00:35:00,240
containers so there is definitely some

1091
00:34:58,880 --> 00:35:02,160
configuration that needs to occur in

1092
00:35:00,240 --> 00:35:03,279
docker by default docker does not log

1093
00:35:02,160 --> 00:35:05,279
much

1094
00:35:03,280 --> 00:35:07,280
so definitely take a look at that but

1095
00:35:05,280 --> 00:35:07,839
there's also the concept of docker has

1096
00:35:07,280 --> 00:35:10,000
this

1097
00:35:07,839 --> 00:35:11,520
snapshot viewing capability where you

1098
00:35:10,000 --> 00:35:12,480
can see the deltas between what was

1099
00:35:11,520 --> 00:35:14,880
deployed

1100
00:35:12,480 --> 00:35:17,040
and and what's what was running now and

1101
00:35:14,880 --> 00:35:18,720
that potentially can help you as well

1102
00:35:17,040 --> 00:35:20,240
but again it's looking for the changes

1103
00:35:18,720 --> 00:35:22,560
of the system disks

1104
00:35:20,240 --> 00:35:23,839
more so than what's running in memory

1105
00:35:22,560 --> 00:35:25,920
because the system is usually powered

1106
00:35:23,839 --> 00:35:28,078
down when you do those comparisons

1107
00:35:25,920 --> 00:35:30,079
um so yeah you're still going to have to

1108
00:35:28,079 --> 00:35:30,880
look at the container running within

1109
00:35:30,079 --> 00:35:32,480
docker

1110
00:35:30,880 --> 00:35:34,000
for the memory dumps and running

1111
00:35:32,480 --> 00:35:36,320
processes

1112
00:35:34,000 --> 00:35:38,320
traffic wise you know you're on what

1113
00:35:36,320 --> 00:35:40,160
phil does right look at the traffic of

1114
00:35:38,320 --> 00:35:42,320
what's coming in and out of the docker

1115
00:35:40,160 --> 00:35:45,440
contracts

1116
00:35:42,320 --> 00:35:48,079
very cool um two

1117
00:35:45,440 --> 00:35:49,200
related questions uh do you have any

1118
00:35:48,079 --> 00:35:51,280
maybe this is something

1119
00:35:49,200 --> 00:35:53,118
uh that you can cover in the uh uh

1120
00:35:51,280 --> 00:35:55,280
covered more extensively in the hallway

1121
00:35:53,119 --> 00:35:57,839
uh channel when we're done here but uh

1122
00:35:55,280 --> 00:35:58,880
do you have any recommended resources or

1123
00:35:57,839 --> 00:36:01,359
things to search for

1124
00:35:58,880 --> 00:36:02,480
specifically when uh your examples were

1125
00:36:01,359 --> 00:36:04,078
all window-centric

1126
00:36:02,480 --> 00:36:07,280
when you get into the linux or the mac

1127
00:36:04,079 --> 00:36:10,480
os and parts of the environments

1128
00:36:07,280 --> 00:36:11,760
um so there are there's utility as uh

1129
00:36:10,480 --> 00:36:13,760
people are where the objective c

1130
00:36:11,760 --> 00:36:14,560
utilities has an equivalent running

1131
00:36:13,760 --> 00:36:17,760
processes

1132
00:36:14,560 --> 00:36:20,720
uh utility for mac os to use um

1133
00:36:17,760 --> 00:36:22,240
in the case of linux obviously a ps

1134
00:36:20,720 --> 00:36:23,279
command for see what's running in the

1135
00:36:22,240 --> 00:36:25,598
process

1136
00:36:23,280 --> 00:36:27,440
but more so in linux when you're looking

1137
00:36:25,599 --> 00:36:28,320
for hidden kind of things that attack

1138
00:36:27,440 --> 00:36:30,560
linux

1139
00:36:28,320 --> 00:36:32,320
um look at because it's so easy to do in

1140
00:36:30,560 --> 00:36:34,640
linux look at what

1141
00:36:32,320 --> 00:36:36,079
is in slash proc meaning slash for every

1142
00:36:34,640 --> 00:36:37,920
process that's running there's a slash

1143
00:36:36,079 --> 00:36:41,760
proc directory there's a pid

1144
00:36:37,920 --> 00:36:44,240
and within that so slash proc 1.5.10

1145
00:36:41,760 --> 00:36:46,000
and then inside that everything's a file

1146
00:36:44,240 --> 00:36:47,839
and inside that is an exe

1147
00:36:46,000 --> 00:36:49,760
uh which points to the thing that's

1148
00:36:47,839 --> 00:36:52,160
running and so if they hide all that

1149
00:36:49,760 --> 00:36:54,160
they can't hide that you know that the

1150
00:36:52,160 --> 00:36:56,078
exe is there with this line

1151
00:36:54,160 --> 00:36:58,319
and so spit out that line and look for

1152
00:36:56,079 --> 00:37:00,079
it and then if you can't see that in ps

1153
00:36:58,320 --> 00:37:02,480
then you know that's being hidden

1154
00:37:00,079 --> 00:37:03,680
um that's that's a tricky way to go

1155
00:37:02,480 --> 00:37:05,280
about finding these root kits

1156
00:37:03,680 --> 00:37:06,879
this was how we found the struts

1157
00:37:05,280 --> 00:37:09,200
vulnerability in the gaming environment

1158
00:37:06,880 --> 00:37:10,720
as we ran this check against slash proc

1159
00:37:09,200 --> 00:37:12,319
found that a couple slash procs were

1160
00:37:10,720 --> 00:37:14,240
completely hidden we have no way into it

1161
00:37:12,320 --> 00:37:15,839
but we said we'll look past that look at

1162
00:37:14,240 --> 00:37:17,279
the exe in the string that's actually

1163
00:37:15,839 --> 00:37:20,160
loading the thing that's running

1164
00:37:17,280 --> 00:37:21,680
and that's how we found the uh code that

1165
00:37:20,160 --> 00:37:23,440
was running on the box

1166
00:37:21,680 --> 00:37:24,879
because it was hidden in nps it was

1167
00:37:23,440 --> 00:37:27,200
hidden in slash brock

1168
00:37:24,880 --> 00:37:29,119
but we know the line that exists that

1169
00:37:27,200 --> 00:37:31,040
will cause this thing to launch

1170
00:37:29,119 --> 00:37:32,480
um and that's running so that would be

1171
00:37:31,040 --> 00:37:34,480
my trick there

1172
00:37:32,480 --> 00:37:36,359
because it's really easy to hide stuff

1173
00:37:34,480 --> 00:37:40,160
in linux from i mean this was a

1174
00:37:36,359 --> 00:37:42,560
2005 method so it's been around forever

1175
00:37:40,160 --> 00:37:44,799
and it's still being used

1176
00:37:42,560 --> 00:37:46,320
right one of the uh the catch phrases

1177
00:37:44,800 --> 00:37:48,000
that we've got on our memory forensics

1178
00:37:46,320 --> 00:37:49,520
class forensics 526

1179
00:37:48,000 --> 00:37:51,280
is i always have to take a moment and

1180
00:37:49,520 --> 00:37:52,160
make sure i don't cross it and screw the

1181
00:37:51,280 --> 00:37:55,280
logic up

1182
00:37:52,160 --> 00:37:57,279
um is malware can hide but it has to run

1183
00:37:55,280 --> 00:38:00,640
and uh you know that's certainly is the

1184
00:37:57,280 --> 00:38:02,320
entree to uh to memory forensics so

1185
00:38:00,640 --> 00:38:04,400
this is the kind of a topic that you're

1186
00:38:02,320 --> 00:38:05,359
interested in you've got lots of good

1187
00:38:04,400 --> 00:38:07,760
content

1188
00:38:05,359 --> 00:38:08,400
around that both you know webcasts and

1189
00:38:07,760 --> 00:38:10,000
certainly

1190
00:38:08,400 --> 00:38:11,599
michael a lot of your resources are

1191
00:38:10,000 --> 00:38:12,880
helping with that as well

1192
00:38:11,599 --> 00:38:14,240
um you know a lot of those free

1193
00:38:12,880 --> 00:38:15,920
resources we can provide to the

1194
00:38:14,240 --> 00:38:16,560
community and you know you really want

1195
00:38:15,920 --> 00:38:19,440
to

1196
00:38:16,560 --> 00:38:20,560
sharpen that knife you know is as best

1197
00:38:19,440 --> 00:38:22,640
as possible

1198
00:38:20,560 --> 00:38:33,839
forensic 526 is certainly a good option

1199
00:38:22,640 --> 00:38:33,839
for that as well

1200
00:38:36,240 --> 00:38:38,319
you

