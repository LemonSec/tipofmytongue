1
00:00:01,060 --> 00:00:04,189
[Music]

2
00:00:12,080 --> 00:00:15,679
frank mclean's been a

3
00:00:13,599 --> 00:00:16,640
friend of sands for pretty much as long

4
00:00:15,679 --> 00:00:18,880
as i can remember

5
00:00:16,640 --> 00:00:20,640
uh always a blast to work with you and

6
00:00:18,880 --> 00:00:22,000
really happy to have you back frank

7
00:00:20,640 --> 00:00:24,240
i also get the pleasure of working with

8
00:00:22,000 --> 00:00:26,240
frank at red canary as well so it's uh

9
00:00:24,240 --> 00:00:28,159
it's it's either frank is a glutton for

10
00:00:26,240 --> 00:00:30,320
punishment and like seeing me around a

11
00:00:28,160 --> 00:00:31,359
lot or uh or maybe we just work really

12
00:00:30,320 --> 00:00:33,680
well together

13
00:00:31,359 --> 00:00:34,399
so uh without further ado he's gonna be

14
00:00:33,680 --> 00:00:37,200
talking about

15
00:00:34,399 --> 00:00:38,960
uh a technique um that i won't get into

16
00:00:37,200 --> 00:00:40,079
now since the intro and let him uh don't

17
00:00:38,960 --> 00:00:41,440
want to steal your fire

18
00:00:40,079 --> 00:00:43,200
but uh talk about a technique that

19
00:00:41,440 --> 00:00:46,399
attackers can use to

20
00:00:43,200 --> 00:00:48,160
basically overtake uh you know

21
00:00:46,399 --> 00:00:49,840
make your system load libraries from

22
00:00:48,160 --> 00:00:51,519
from inappropriate places

23
00:00:49,840 --> 00:00:52,640
uh it sounds weird when i just said that

24
00:00:51,520 --> 00:00:53,360
out loud but i think you know what i

25
00:00:52,640 --> 00:00:55,520
mean

26
00:00:53,360 --> 00:00:57,039
um basically talk about search order

27
00:00:55,520 --> 00:00:59,840
hijacking um so we're

28
00:00:57,039 --> 00:01:01,359
to talk about that here so um we'll talk

29
00:00:59,840 --> 00:01:03,600
about that not only from what it is

30
00:01:01,359 --> 00:01:05,119
a perspective but also how to detect and

31
00:01:03,600 --> 00:01:06,799
uh how to respond to that from a

32
00:01:05,119 --> 00:01:09,040
forensic point of view so

33
00:01:06,799 --> 00:01:10,000
frank thanks for joining us and uh and

34
00:01:09,040 --> 00:01:13,040
sharing your knowledge

35
00:01:10,000 --> 00:01:15,920
we're happy to have you thanks thanks

36
00:01:13,040 --> 00:01:19,840
for the intro and i'm happy to be here

37
00:01:15,920 --> 00:01:23,119
all right so as phil kind of alluded to

38
00:01:19,840 --> 00:01:28,560
um today we're going to be talking about

39
00:01:23,119 --> 00:01:28,560
search order hijacking or soh

40
00:01:29,360 --> 00:01:34,960
but first a little about me so i spent

41
00:01:32,799 --> 00:01:35,360
several years doing digital forensics

42
00:01:34,960 --> 00:01:38,158
and

43
00:01:35,360 --> 00:01:38,720
incident response consulting and i moved

44
00:01:38,159 --> 00:01:41,840
from there

45
00:01:38,720 --> 00:01:44,798
into corporate in financial services

46
00:01:41,840 --> 00:01:47,280
where i ran our security operations team

47
00:01:44,799 --> 00:01:49,840
for several years

48
00:01:47,280 --> 00:01:52,320
and now i've been with red canary on the

49
00:01:49,840 --> 00:01:55,680
detection engineering team

50
00:01:52,320 --> 00:02:00,399
for a bit over four years and i also

51
00:01:55,680 --> 00:02:00,399
lead our certs internal training program

52
00:02:02,399 --> 00:02:07,520
so what is uh dll source order now we're

53
00:02:06,159 --> 00:02:11,520
not going to go

54
00:02:07,520 --> 00:02:13,599
very far into what dll search order is

55
00:02:11,520 --> 00:02:14,080
but i wanted to kind of set out at least

56
00:02:13,599 --> 00:02:16,959
some

57
00:02:14,080 --> 00:02:17,680
basic info for it because that's going

58
00:02:16,959 --> 00:02:19,120
to

59
00:02:17,680 --> 00:02:20,840
that's really going to kind of set the

60
00:02:19,120 --> 00:02:22,000
stage for much of what we're talking

61
00:02:20,840 --> 00:02:25,200
about

62
00:02:22,000 --> 00:02:26,319
dlls are shared code libraries on

63
00:02:25,200 --> 00:02:30,238
windows

64
00:02:26,319 --> 00:02:31,599
and based on references within the

65
00:02:30,239 --> 00:02:33,519
binary

66
00:02:31,599 --> 00:02:34,799
within the executable they will get

67
00:02:33,519 --> 00:02:38,080
loaded into memory

68
00:02:34,800 --> 00:02:41,360
on execution or as needed

69
00:02:38,080 --> 00:02:44,000
to perform that shared function they can

70
00:02:41,360 --> 00:02:47,040
be leveraged by multiple processes

71
00:02:44,000 --> 00:02:50,800
even simultaneously and

72
00:02:47,040 --> 00:02:52,000
aside from having each dll's fully

73
00:02:50,800 --> 00:02:54,560
qualified path

74
00:02:52,000 --> 00:02:55,440
hard-coded in the binary or manifest

75
00:02:54,560 --> 00:02:58,400
file

76
00:02:55,440 --> 00:02:59,040
the system will search for dlls

77
00:02:58,400 --> 00:03:02,640
following

78
00:02:59,040 --> 00:03:02,640
a preset order

79
00:03:02,800 --> 00:03:06,480
and that preset order is where search

80
00:03:05,040 --> 00:03:10,000
order hijacking or

81
00:03:06,480 --> 00:03:13,599
soh comes into play now

82
00:03:10,000 --> 00:03:15,920
if you know the name of a legitimate dll

83
00:03:13,599 --> 00:03:16,799
that will be loaded into memory by a

84
00:03:15,920 --> 00:03:19,920
legitimate

85
00:03:16,800 --> 00:03:22,239
and presumably trusted but perhaps not

86
00:03:19,920 --> 00:03:27,200
frequently executed binary

87
00:03:22,239 --> 00:03:30,799
you can set up search order hijacking

88
00:03:27,200 --> 00:03:33,760
by placing a copy of that binary

89
00:03:30,799 --> 00:03:34,640
the legitimate binary and a malicious

90
00:03:33,760 --> 00:03:38,079
dll

91
00:03:34,640 --> 00:03:40,238
which has a legitimate name together in

92
00:03:38,080 --> 00:03:42,400
a path that you control

93
00:03:40,239 --> 00:03:44,159
this is commonly done under the user

94
00:03:42,400 --> 00:03:47,280
profile because you have

95
00:03:44,159 --> 00:03:50,239
you know read write access

96
00:03:47,280 --> 00:03:51,840
then when that legitimate binary

97
00:03:50,239 --> 00:03:54,000
executes

98
00:03:51,840 --> 00:03:54,879
the malicious dlo gets loaded into

99
00:03:54,000 --> 00:03:57,200
memory

100
00:03:54,879 --> 00:04:01,840
thus running its code in the context of

101
00:03:57,200 --> 00:04:01,839
that presumably trusted process

102
00:04:02,879 --> 00:04:08,879
all right so this slide

103
00:04:06,159 --> 00:04:10,000
and the next slide there's there's just

104
00:04:08,879 --> 00:04:14,079
an egregious

105
00:04:10,000 --> 00:04:16,959
error on these slides and i blame myself

106
00:04:14,080 --> 00:04:18,000
and i blame the four other people that

107
00:04:16,959 --> 00:04:21,040
reviewed this

108
00:04:18,000 --> 00:04:23,360
this deck um for me

109
00:04:21,040 --> 00:04:25,840
for not catching it and and that's the

110
00:04:23,360 --> 00:04:29,199
title is it's just all wrong

111
00:04:25,840 --> 00:04:33,758
it shouldn't say why is

112
00:04:29,199 --> 00:04:37,280
soh important it should say

113
00:04:33,759 --> 00:04:39,360
what is so important

114
00:04:37,280 --> 00:04:40,638
but just that put that out there because

115
00:04:39,360 --> 00:04:45,440
you know jokes right

116
00:04:40,639 --> 00:04:48,960
it's a it's a thing now right so

117
00:04:45,440 --> 00:04:52,719
these are the stats from uh the 2020

118
00:04:48,960 --> 00:04:56,400
red canary threat detection report

119
00:04:52,720 --> 00:04:59,360
right soh was in eighth place

120
00:04:56,400 --> 00:05:01,039
overall from an adversary technique

121
00:04:59,360 --> 00:05:03,520
perspective

122
00:05:01,039 --> 00:05:04,320
okay tying things in with with minor

123
00:05:03,520 --> 00:05:06,880
attack

124
00:05:04,320 --> 00:05:08,159
and it impacted 16 percent of our

125
00:05:06,880 --> 00:05:10,240
customers

126
00:05:08,160 --> 00:05:12,160
and those numbers increased over the

127
00:05:10,240 --> 00:05:15,919
course of the year as we developed

128
00:05:12,160 --> 00:05:18,240
new ways to identify uh related activity

129
00:05:15,919 --> 00:05:19,840
and as we continue to improve our

130
00:05:18,240 --> 00:05:21,600
detection methodologies

131
00:05:19,840 --> 00:05:23,758
i expect those numbers will also

132
00:05:21,600 --> 00:05:25,840
increase

133
00:05:23,759 --> 00:05:28,479
now there's going to be a link uh to

134
00:05:25,840 --> 00:05:31,599
that report later in the presentation

135
00:05:28,479 --> 00:05:34,159
uh for anybody that's interested and

136
00:05:31,600 --> 00:05:34,880
um also want to know with the recent

137
00:05:34,160 --> 00:05:38,720
roll out

138
00:05:34,880 --> 00:05:43,520
of the miter attack sub techniques

139
00:05:38,720 --> 00:05:46,639
soh is now 1574.001

140
00:05:43,520 --> 00:05:48,560
instead of 1038 and

141
00:05:46,639 --> 00:05:52,800
there's a link to the sub techniques and

142
00:05:48,560 --> 00:05:55,440
and whatnot as well

143
00:05:52,800 --> 00:05:55,440
okay so

144
00:05:55,840 --> 00:06:00,880
we see soh applied by various

145
00:05:59,840 --> 00:06:04,000
adversaries

146
00:06:00,880 --> 00:06:05,919
both commodity and advanced

147
00:06:04,000 --> 00:06:08,240
it provides a means of persistence

148
00:06:05,919 --> 00:06:10,639
potential privilege escalation

149
00:06:08,240 --> 00:06:11,360
um and bypassing various security

150
00:06:10,639 --> 00:06:14,880
controls

151
00:06:11,360 --> 00:06:17,440
prevention detection and so on

152
00:06:14,880 --> 00:06:18,159
and if if anybody here happens to watch

153
00:06:17,440 --> 00:06:21,440
the

154
00:06:18,160 --> 00:06:23,120
full disclosure email list you'll

155
00:06:21,440 --> 00:06:27,280
quickly realize that there

156
00:06:23,120 --> 00:06:30,479
are a lot of legitimate

157
00:06:27,280 --> 00:06:32,559
signed binaries for operating systems

158
00:06:30,479 --> 00:06:34,479
and trusted third parties

159
00:06:32,560 --> 00:06:36,400
that are vulnerable to search order

160
00:06:34,479 --> 00:06:38,479
hijacking

161
00:06:36,400 --> 00:06:40,799
it's it's pretty crazy the sheer volume

162
00:06:38,479 --> 00:06:40,800
of it

163
00:06:42,319 --> 00:06:47,600
now there are a lot of talks and a lot

164
00:06:44,400 --> 00:06:49,758
of articles blog posts etc about

165
00:06:47,600 --> 00:06:51,680
search order hijacking from various

166
00:06:49,759 --> 00:06:54,080
aspects

167
00:06:51,680 --> 00:06:56,240
but very few address early

168
00:06:54,080 --> 00:06:59,198
identification

169
00:06:56,240 --> 00:07:01,360
based on ongoing activity instead they

170
00:06:59,199 --> 00:07:02,080
focus on the kind of the after the fact

171
00:07:01,360 --> 00:07:04,160
forensics

172
00:07:02,080 --> 00:07:05,758
reverse engineering the dlls or

173
00:07:04,160 --> 00:07:09,919
executables

174
00:07:05,759 --> 00:07:10,479
and so on and if any of you are familiar

175
00:07:09,919 --> 00:07:13,120
with

176
00:07:10,479 --> 00:07:16,080
red canary you know that we leverage

177
00:07:13,120 --> 00:07:18,720
endpoint detection and response or edr

178
00:07:16,080 --> 00:07:21,520
telemetry to identify an alert on active

179
00:07:18,720 --> 00:07:24,000
threats within our customer environments

180
00:07:21,520 --> 00:07:26,080
and the concept of using edr telemetry

181
00:07:24,000 --> 00:07:28,479
is what i'm going to focus on today

182
00:07:26,080 --> 00:07:31,120
instead of that kind of the the after

183
00:07:28,479 --> 00:07:34,560
the fact deep dive

184
00:07:31,120 --> 00:07:35,599
but i'm not going to do that from the

185
00:07:34,560 --> 00:07:39,039
perspective of

186
00:07:35,599 --> 00:07:42,000
any given platform um nor

187
00:07:39,039 --> 00:07:42,800
how we use any of that data specifically

188
00:07:42,000 --> 00:07:45,199
so

189
00:07:42,800 --> 00:07:47,280
you know if you've got carbon black

190
00:07:45,199 --> 00:07:51,520
response or crowdstrike or

191
00:07:47,280 --> 00:07:54,638
you know atp or whatever you may be

192
00:07:51,520 --> 00:07:57,599
using if you're using some type of edr

193
00:07:54,639 --> 00:07:59,680
i've tried to keep this generic from

194
00:07:57,599 --> 00:08:02,878
that angle and just provide

195
00:07:59,680 --> 00:08:03,520
methods and concepts that you can use to

196
00:08:02,879 --> 00:08:05,759
extract

197
00:08:03,520 --> 00:08:09,599
information from whatever data sources

198
00:08:05,759 --> 00:08:09,599
you have at your disposal

199
00:08:11,759 --> 00:08:18,160
now the most accurate way to identify

200
00:08:15,039 --> 00:08:22,318
soh is based on knowing

201
00:08:18,160 --> 00:08:25,360
every single legitimate binary

202
00:08:22,319 --> 00:08:27,440
on every single system

203
00:08:25,360 --> 00:08:28,560
every path that they're expected to

204
00:08:27,440 --> 00:08:30,960
launch from

205
00:08:28,560 --> 00:08:33,679
and they just check all of those

206
00:08:30,960 --> 00:08:33,679
constantly

207
00:08:33,760 --> 00:08:39,360
combine that with knowing every

208
00:08:37,519 --> 00:08:42,240
legitimate dll

209
00:08:39,360 --> 00:08:43,919
that those binaries are supposed to load

210
00:08:42,240 --> 00:08:46,080
by name

211
00:08:43,919 --> 00:08:47,120
and check the unexpected binary launch

212
00:08:46,080 --> 00:08:51,040
paths to see

213
00:08:47,120 --> 00:08:54,160
if any of those dlls by name

214
00:08:51,040 --> 00:08:58,079
are being loaded as well

215
00:08:54,160 --> 00:09:00,560
back that up a little bit further

216
00:08:58,080 --> 00:09:01,120
and look to identify the activity based

217
00:09:00,560 --> 00:09:03,680
on

218
00:09:01,120 --> 00:09:07,200
the file rights of those legitimate

219
00:09:03,680 --> 00:09:10,959
executables and illegitimate dlls

220
00:09:07,200 --> 00:09:10,959
to those unexpected paths

221
00:09:11,040 --> 00:09:17,279
now you might think

222
00:09:14,399 --> 00:09:18,480
that it'd be as easy as watching for any

223
00:09:17,279 --> 00:09:21,519
file rights of

224
00:09:18,480 --> 00:09:24,320
xs or dlls to those paths but

225
00:09:21,519 --> 00:09:26,480
i'll tell you from experience not so

226
00:09:24,320 --> 00:09:29,920
much

227
00:09:26,480 --> 00:09:33,680
and so if the

228
00:09:29,920 --> 00:09:37,040
best way isn't all that feasible

229
00:09:33,680 --> 00:09:38,880
right which is kind of the point of this

230
00:09:37,040 --> 00:09:40,240
at least keep that in the back of your

231
00:09:38,880 --> 00:09:43,600
mind

232
00:09:40,240 --> 00:09:47,040
right while you're doing that focus on

233
00:09:43,600 --> 00:09:50,320
other behaviors that may help point

234
00:09:47,040 --> 00:09:53,519
to search order hijacking at various

235
00:09:50,320 --> 00:09:53,519
levels of the technique

236
00:09:55,519 --> 00:10:00,320
okay so let's say that you have a

237
00:09:59,279 --> 00:10:02,959
scenario which

238
00:10:00,320 --> 00:10:04,079
looks like it might be related to soh

239
00:10:02,959 --> 00:10:07,359
how can you confirm

240
00:10:04,079 --> 00:10:08,880
it check out the xe's to see if they're

241
00:10:07,360 --> 00:10:11,680
legitimate

242
00:10:08,880 --> 00:10:12,560
remember they might be window system

243
00:10:11,680 --> 00:10:14,880
binaries

244
00:10:12,560 --> 00:10:16,239
often ones that are not very commonly

245
00:10:14,880 --> 00:10:18,800
used

246
00:10:16,240 --> 00:10:21,839
or other legitimate binaries for other

247
00:10:18,800 --> 00:10:24,640
third-party software

248
00:10:21,839 --> 00:10:25,440
then check dlls in that same directory

249
00:10:24,640 --> 00:10:28,720
do any

250
00:10:25,440 --> 00:10:30,079
exist which are named the same as known

251
00:10:28,720 --> 00:10:33,200
legitimate ones but

252
00:10:30,079 --> 00:10:36,239
don't contain the appropriate signatures

253
00:10:33,200 --> 00:10:37,920
or metadata or perhaps even have been

254
00:10:36,240 --> 00:10:42,480
flagged by antivirus

255
00:10:37,920 --> 00:10:44,800
engines as malicious again

256
00:10:42,480 --> 00:10:46,000
the key aspect here is that the

257
00:10:44,800 --> 00:10:48,319
malicious dll

258
00:10:46,000 --> 00:10:50,000
gets loaded from the same path as the

259
00:10:48,320 --> 00:10:52,959
executable

260
00:10:50,000 --> 00:10:54,560
if the legitimate dll of that name is

261
00:10:52,959 --> 00:10:58,319
likely to already be

262
00:10:54,560 --> 00:11:01,119
in memory memory will be

263
00:10:58,320 --> 00:11:02,640
checked first and then the technique

264
00:11:01,120 --> 00:11:05,279
fails

265
00:11:02,640 --> 00:11:06,560
so it's not going to be the most common

266
00:11:05,279 --> 00:11:08,399
binaries

267
00:11:06,560 --> 00:11:09,760
the most common executables or most

268
00:11:08,399 --> 00:11:12,480
common processes

269
00:11:09,760 --> 00:11:14,480
it's going to be something legitimate

270
00:11:12,480 --> 00:11:16,720
but a little less common

271
00:11:14,480 --> 00:11:19,040
because they don't want to run into the

272
00:11:16,720 --> 00:11:21,120
the possibility that a dll

273
00:11:19,040 --> 00:11:24,560
is already loaded in memory and then

274
00:11:21,120 --> 00:11:24,560
just mess the whole thing up

275
00:11:27,040 --> 00:11:31,519
okay so i've talked at a pretty high

276
00:11:30,959 --> 00:11:34,000
level

277
00:11:31,519 --> 00:11:35,440
about some methods that you might be

278
00:11:34,000 --> 00:11:38,480
able to use

279
00:11:35,440 --> 00:11:41,360
to identify

280
00:11:38,480 --> 00:11:43,120
and validate uh search order hijacking

281
00:11:41,360 --> 00:11:46,240
activity

282
00:11:43,120 --> 00:11:46,959
next i'm going to provide some sample

283
00:11:46,240 --> 00:11:49,920
logic

284
00:11:46,959 --> 00:11:52,160
that you might be able to use to help

285
00:11:49,920 --> 00:11:55,519
get started

286
00:11:52,160 --> 00:11:56,959
and as i mentioned already detecting

287
00:11:55,519 --> 00:12:00,560
search order hijacking

288
00:11:56,959 --> 00:12:03,040
isn't necessarily straightforward

289
00:12:00,560 --> 00:12:03,680
and some of the concepts are fairly

290
00:12:03,040 --> 00:12:06,399
broad

291
00:12:03,680 --> 00:12:08,399
and may be prone to noise in order to

292
00:12:06,399 --> 00:12:11,279
help raise up activity

293
00:12:08,399 --> 00:12:12,399
so a lot of it really depends on the

294
00:12:11,279 --> 00:12:14,959
individual

295
00:12:12,399 --> 00:12:14,959
environment

296
00:12:17,920 --> 00:12:23,599
now these are some some rough ideas

297
00:12:21,040 --> 00:12:25,920
um that i've pulled together based on

298
00:12:23,600 --> 00:12:28,720
some of the things that we look for

299
00:12:25,920 --> 00:12:30,399
uh i've structured this kind of like a

300
00:12:28,720 --> 00:12:34,560
query but it isn't

301
00:12:30,399 --> 00:12:35,920
any particular query language um any uh

302
00:12:34,560 --> 00:12:37,439
what is it they always say that the

303
00:12:35,920 --> 00:12:39,599
names have been changed to protect the

304
00:12:37,440 --> 00:12:41,279
innocent

305
00:12:39,600 --> 00:12:42,959
if it happens to line up with something

306
00:12:41,279 --> 00:12:46,160
that you use great but

307
00:12:42,959 --> 00:12:46,160
it was not intentional

308
00:12:46,560 --> 00:12:52,160
hopefully here the the logic construct

309
00:12:49,839 --> 00:12:53,120
is something that you can use to create

310
00:12:52,160 --> 00:12:55,519
queries

311
00:12:53,120 --> 00:12:57,279
uh within your own environment if you

312
00:12:55,519 --> 00:12:58,560
aren't already looking for these types

313
00:12:57,279 --> 00:13:01,600
of things

314
00:12:58,560 --> 00:13:04,319
but be forewarned

315
00:13:01,600 --> 00:13:05,120
they may be noisy depending on your

316
00:13:04,320 --> 00:13:08,959
environment

317
00:13:05,120 --> 00:13:13,040
so don't go full production

318
00:13:08,959 --> 00:13:16,719
right from the start and also

319
00:13:13,040 --> 00:13:19,439
two of these at the bottom two

320
00:13:16,720 --> 00:13:20,079
will only work if you can reliably

321
00:13:19,440 --> 00:13:22,880
collect

322
00:13:20,079 --> 00:13:24,959
signature information depending on your

323
00:13:22,880 --> 00:13:27,040
data source

324
00:13:24,959 --> 00:13:28,638
this can be challenging especially if

325
00:13:27,040 --> 00:13:31,920
the information is stored

326
00:13:28,639 --> 00:13:34,320
in a manifest file instead of embedded

327
00:13:31,920 --> 00:13:37,439
in the binary

328
00:13:34,320 --> 00:13:39,199
all of them are probably going to

329
00:13:37,440 --> 00:13:42,240
require further tuning

330
00:13:39,199 --> 00:13:49,839
depending on your individual results in

331
00:13:42,240 --> 00:13:49,839
your environment

332
00:13:50,480 --> 00:13:57,279
now as alluded to before

333
00:13:53,519 --> 00:14:01,440
detecting actual search order hijacking

334
00:13:57,279 --> 00:14:03,839
as it happens can be challenging and

335
00:14:01,440 --> 00:14:05,040
we continue working on ways to do that

336
00:14:03,839 --> 00:14:07,199
better

337
00:14:05,040 --> 00:14:08,800
one of the things that or one of the

338
00:14:07,199 --> 00:14:10,959
ways that we've approached it

339
00:14:08,800 --> 00:14:12,240
is by building detector logic that's

340
00:14:10,959 --> 00:14:16,000
focused on

341
00:14:12,240 --> 00:14:19,040
other behavior which can in

342
00:14:16,000 --> 00:14:21,600
turn point to the possibility of

343
00:14:19,040 --> 00:14:22,319
search order hijacking then during

344
00:14:21,600 --> 00:14:25,839
analysis

345
00:14:22,320 --> 00:14:29,519
you can identify more concretely

346
00:14:25,839 --> 00:14:31,199
call that out and and help make sense of

347
00:14:29,519 --> 00:14:34,480
it by saying hey here's where

348
00:14:31,199 --> 00:14:34,479
sort of hijacking occurs

349
00:14:34,560 --> 00:14:39,040
as a result of using the kind of the the

350
00:14:36,800 --> 00:14:41,279
broader detector logic that's looking at

351
00:14:39,040 --> 00:14:44,399
other things and not narrowly focused in

352
00:14:41,279 --> 00:14:46,720
on what might be soh

353
00:14:44,399 --> 00:14:47,920
we've seen this happen associated with

354
00:14:46,720 --> 00:14:50,959
scheduled tasks

355
00:14:47,920 --> 00:14:54,079
process injection

356
00:14:50,959 --> 00:14:56,880
masquerading use of admin shares and

357
00:14:54,079 --> 00:14:59,519
domain trust discovery just to name a

358
00:14:56,880 --> 00:15:02,160
few

359
00:14:59,519 --> 00:15:05,120
we'll look at a couple of examples from

360
00:15:02,160 --> 00:15:07,839
real world activity

361
00:15:05,120 --> 00:15:09,680
not just what we were able to set up in

362
00:15:07,839 --> 00:15:14,160
a lab by reversing

363
00:15:09,680 --> 00:15:17,199
malicious dlls or specific malware

364
00:15:14,160 --> 00:15:18,639
seeing it in this way can provide some

365
00:15:17,199 --> 00:15:21,439
clues

366
00:15:18,639 --> 00:15:22,160
that we can then watch for as activity

367
00:15:21,440 --> 00:15:27,360
unfolds

368
00:15:22,160 --> 00:15:30,560
on systems

369
00:15:27,360 --> 00:15:33,199
all right so looking at some looking at

370
00:15:30,560 --> 00:15:35,839
some past detections

371
00:15:33,199 --> 00:15:36,719
here we have the creation of a scheduled

372
00:15:35,839 --> 00:15:40,320
task

373
00:15:36,720 --> 00:15:43,680
to launch a legitimate windows binary

374
00:15:40,320 --> 00:15:47,519
a binary that's part of bitlocker

375
00:15:43,680 --> 00:15:53,120
from a path under the user profile

376
00:15:47,519 --> 00:15:56,399
in app data roaming every 60 minutes

377
00:15:53,120 --> 00:15:57,519
now not only do we have a legitimate

378
00:15:56,399 --> 00:16:00,560
binary where it

379
00:15:57,519 --> 00:16:02,079
shouldn't be but we also have

380
00:16:00,560 --> 00:16:05,518
persistence mechanism

381
00:16:02,079 --> 00:16:05,519
because of the scheduled task

382
00:16:05,680 --> 00:16:10,000
it's important to note again reiterate

383
00:16:08,800 --> 00:16:12,399
this

384
00:16:10,000 --> 00:16:13,279
that most of the binaries we see used

385
00:16:12,399 --> 00:16:16,639
this way are

386
00:16:13,279 --> 00:16:18,720
not commonly executing binaries

387
00:16:16,639 --> 00:16:20,880
leveraging something that is less common

388
00:16:18,720 --> 00:16:22,240
but still trusted like this bitlocker

389
00:16:20,880 --> 00:16:24,560
binary

390
00:16:22,240 --> 00:16:25,839
is less likely to cause conflicts that

391
00:16:24,560 --> 00:16:27,758
with dlls that

392
00:16:25,839 --> 00:16:30,399
might already be loaded into memory by

393
00:16:27,759 --> 00:16:32,560
another process

394
00:16:30,399 --> 00:16:33,440
remember if it's already loaded in

395
00:16:32,560 --> 00:16:35,439
memory

396
00:16:33,440 --> 00:16:37,839
the search order hijacking isn't going

397
00:16:35,440 --> 00:16:37,839
to work

398
00:16:42,079 --> 00:16:45,199
now shortly following the creation of

399
00:16:43,920 --> 00:16:48,839
the scheduled task

400
00:16:45,199 --> 00:16:51,680
the executable itself the bde ui serve

401
00:16:48,839 --> 00:16:52,240
xe is written to disk in that same

402
00:16:51,680 --> 00:16:55,519
reference

403
00:16:52,240 --> 00:16:55,519
path in app data roaming

404
00:16:55,759 --> 00:17:00,079
now the windows command processor did

405
00:16:58,079 --> 00:17:04,159
the file right

406
00:17:00,079 --> 00:17:08,000
and if i recall correctly it copied uh

407
00:17:04,160 --> 00:17:10,400
the bde binary from system 32

408
00:17:08,000 --> 00:17:12,000
and wrote it to that location under the

409
00:17:10,400 --> 00:17:14,720
user profile

410
00:17:12,000 --> 00:17:16,959
so that's a possible detector concept as

411
00:17:14,720 --> 00:17:16,959
well

412
00:17:17,280 --> 00:17:23,520
and going through this we can leverage

413
00:17:20,559 --> 00:17:24,639
all of these observables in a lather

414
00:17:23,520 --> 00:17:27,359
rinse repeat

415
00:17:24,640 --> 00:17:28,880
sort of scenario to continue improving

416
00:17:27,359 --> 00:17:33,840
detection methodologies

417
00:17:28,880 --> 00:17:33,840
as we go

418
00:17:33,919 --> 00:17:38,640
now at this point we definitely know

419
00:17:37,600 --> 00:17:42,000
that we're looking

420
00:17:38,640 --> 00:17:44,160
at sir short of hijacking being set up

421
00:17:42,000 --> 00:17:49,039
now the dll being written here has a

422
00:17:44,160 --> 00:17:52,559
legitimate name so wts api 32 dll

423
00:17:49,039 --> 00:17:52,559
it's part of the remote desktop

424
00:17:53,120 --> 00:18:01,039
stuff it it has a legitimate name

425
00:17:57,760 --> 00:18:01,760
but it is not the actual legitimate wts

426
00:18:01,039 --> 00:18:04,960
api

427
00:18:01,760 --> 00:18:08,640
32 dll nor

428
00:18:04,960 --> 00:18:11,679
is it in the proper and expected path

429
00:18:08,640 --> 00:18:14,160
now this one in particular

430
00:18:11,679 --> 00:18:15,679
did not see going through all the way

431
00:18:14,160 --> 00:18:18,320
with execution

432
00:18:15,679 --> 00:18:20,160
so we didn't get to see that as the

433
00:18:18,320 --> 00:18:22,720
activity unfurled

434
00:18:20,160 --> 00:18:24,240
unfurled see see what i did there yeah

435
00:18:22,720 --> 00:18:28,799
more jokes

436
00:18:24,240 --> 00:18:32,720
mark that track two there's jokes

437
00:18:28,799 --> 00:18:32,720
but it is still classic soh

438
00:18:35,280 --> 00:18:39,520
all right and so another example

439
00:18:36,960 --> 00:18:39,520
detection

440
00:18:39,679 --> 00:18:46,080
this one we're dealing with

441
00:18:42,799 --> 00:18:48,879
masquerading right starting off that way

442
00:18:46,080 --> 00:18:50,480
we have the windows script host it's a w

443
00:18:48,880 --> 00:18:53,679
script

444
00:18:50,480 --> 00:18:57,919
writing a binary under the user profile

445
00:18:53,679 --> 00:19:01,919
this ie dot 8 a a 444

446
00:18:57,919 --> 00:19:03,760
whatever tmp metadata indicates that

447
00:19:01,919 --> 00:19:07,520
this is the gnu

448
00:19:03,760 --> 00:19:11,120
diffutils binary cmp.exe

449
00:19:07,520 --> 00:19:14,799
but the size is wrong and osen

450
00:19:11,120 --> 00:19:14,799
says that it's actually immated

451
00:19:15,440 --> 00:19:20,480
so whether it was a compromised binary

452
00:19:18,080 --> 00:19:22,399
or they just leveraged metadata

453
00:19:20,480 --> 00:19:24,160
don't know either way looks like it's

454
00:19:22,400 --> 00:19:27,840
attempting to masquerade

455
00:19:24,160 --> 00:19:30,880
as that diffutills binary

456
00:19:27,840 --> 00:19:31,918
and this actually kicks off other

457
00:19:30,880 --> 00:19:34,720
activity

458
00:19:31,919 --> 00:19:36,240
which goes into the shorter hijacking

459
00:19:34,720 --> 00:19:38,320
side of things

460
00:19:36,240 --> 00:19:39,520
probably a trick bot or something like

461
00:19:38,320 --> 00:19:44,240
that that

462
00:19:39,520 --> 00:19:44,240
leverages uh soh more commonly

463
00:19:45,760 --> 00:19:50,080
and then we're right back into a

464
00:19:47,840 --> 00:19:50,959
situation that's very similar to the

465
00:19:50,080 --> 00:19:54,080
previous

466
00:19:50,960 --> 00:19:54,799
detection that we looked at a copy of

467
00:19:54,080 --> 00:19:59,280
the

468
00:19:54,799 --> 00:20:01,280
windows fax and scan binary wfs.exe

469
00:19:59,280 --> 00:20:02,879
is written to disk under the user

470
00:20:01,280 --> 00:20:07,840
profile

471
00:20:02,880 --> 00:20:07,840
again in app data roaming

472
00:20:10,000 --> 00:20:13,039
and if we wanted more confirmation for

473
00:20:12,480 --> 00:20:16,880
it

474
00:20:13,039 --> 00:20:20,320
we've got it here a legitimately named

475
00:20:16,880 --> 00:20:23,760
but completely malicious dll

476
00:20:20,320 --> 00:20:27,120
is written to the same path and now

477
00:20:23,760 --> 00:20:27,120
it's ready for loading

478
00:20:31,280 --> 00:20:34,480
and so the binary and the dll are

479
00:20:33,200 --> 00:20:37,679
prepped there

480
00:20:34,480 --> 00:20:39,360
they've been copied written to

481
00:20:37,679 --> 00:20:41,840
directory under the control of the

482
00:20:39,360 --> 00:20:43,918
adversary under the user profile

483
00:20:41,840 --> 00:20:45,760
where you've got read write execute

484
00:20:43,919 --> 00:20:48,240
access

485
00:20:45,760 --> 00:20:50,799
and now the scheduled task gets set up

486
00:20:48,240 --> 00:20:56,480
for execution and persistence

487
00:20:50,799 --> 00:21:03,840
so in 60 minutes our wfs.xe

488
00:20:56,480 --> 00:21:08,799
binary will be live and in living color

489
00:21:03,840 --> 00:21:10,799
and here we go it is spawned

490
00:21:08,799 --> 00:21:14,400
and what happens immediately after

491
00:21:10,799 --> 00:21:14,400
spawning drumroll

492
00:21:15,039 --> 00:21:18,720
and there you have it it's going

493
00:21:17,440 --> 00:21:21,600
backwards

494
00:21:18,720 --> 00:21:21,600
wrong way slides

495
00:21:22,559 --> 00:21:29,678
so that mfc 42u dlo

496
00:21:25,760 --> 00:21:33,520
uh legitimate name illegitimate binary

497
00:21:29,679 --> 00:21:36,480
gets loaded into memory by wfs

498
00:21:33,520 --> 00:21:37,039
so whatever code it contains is now

499
00:21:36,480 --> 00:21:39,760
running

500
00:21:37,039 --> 00:21:39,760
in memory

501
00:21:40,880 --> 00:21:45,840
search order hijacking for the win

502
00:21:50,400 --> 00:21:55,840
all right so is it all doom and gloom no

503
00:21:53,760 --> 00:21:56,879
no of course not nothing is all doom and

504
00:21:55,840 --> 00:21:59,439
gloom

505
00:21:56,880 --> 00:22:02,320
all that we need to do to prevent search

506
00:21:59,440 --> 00:22:05,600
order hijacking

507
00:22:02,320 --> 00:22:09,678
is to have all compiled binaries

508
00:22:05,600 --> 00:22:12,719
have explicit fully qualified

509
00:22:09,679 --> 00:22:13,760
path references for all dlls that will

510
00:22:12,720 --> 00:22:18,720
be used

511
00:22:13,760 --> 00:22:24,840
including all dependent dlls that's all

512
00:22:18,720 --> 00:22:26,000
simple right okay so maybe not quite so

513
00:22:24,840 --> 00:22:29,760
simple

514
00:22:26,000 --> 00:22:31,840
at any rate good security hygiene can

515
00:22:29,760 --> 00:22:34,480
help

516
00:22:31,840 --> 00:22:35,760
microsoft also has some resources that

517
00:22:34,480 --> 00:22:39,120
can be leveraged to help

518
00:22:35,760 --> 00:22:41,440
mitigate some of the risk and having

519
00:22:39,120 --> 00:22:44,879
solid detection methodologies that

520
00:22:41,440 --> 00:22:47,120
balance out signal to noise and

521
00:22:44,880 --> 00:22:48,159
still catch activity as early as

522
00:22:47,120 --> 00:22:51,120
possible

523
00:22:48,159 --> 00:22:51,120
can help as well

524
00:22:52,240 --> 00:22:57,840
we'll have those links um and obviously

525
00:22:56,080 --> 00:22:59,760
you're not going to remember all these i

526
00:22:57,840 --> 00:23:03,120
don't expect you to write them all down

527
00:22:59,760 --> 00:23:06,400
if you do you get brownie points

528
00:23:03,120 --> 00:23:08,320
um but maybe you can make a uh

529
00:23:06,400 --> 00:23:09,440
take a picture of it make a little

530
00:23:08,320 --> 00:23:11,918
animated picture

531
00:23:09,440 --> 00:23:12,480
all those things called fill gifs is

532
00:23:11,919 --> 00:23:14,480
that right

533
00:23:12,480 --> 00:23:16,400
they're called gifs i think like peanut

534
00:23:14,480 --> 00:23:19,520
butter

535
00:23:16,400 --> 00:23:20,080
anyway um sans will post the slide decks

536
00:23:19,520 --> 00:23:22,480
so

537
00:23:20,080 --> 00:23:25,120
you'll have uh you'll have access to the

538
00:23:22,480 --> 00:23:25,120
links there

539
00:23:25,520 --> 00:23:30,480
and i talked too fast

540
00:23:29,200 --> 00:23:33,520
should have been just a few minutes

541
00:23:30,480 --> 00:23:37,280
longer but phil had me so excited

542
00:23:33,520 --> 00:23:40,879
i couldn't help myself so

543
00:23:37,280 --> 00:23:44,720
that's pretty much it we can go into

544
00:23:40,880 --> 00:23:47,279
q a hopefully not crickets

545
00:23:44,720 --> 00:23:48,640
it's a it's an interesting topic i think

546
00:23:47,279 --> 00:23:50,159
because

547
00:23:48,640 --> 00:23:52,320
it is something that's extremely

548
00:23:50,159 --> 00:23:53,120
prevalent we're seeing more and more of

549
00:23:52,320 --> 00:23:56,320
it on a

550
00:23:53,120 --> 00:23:57,439
daily basis used by all types of

551
00:23:56,320 --> 00:24:00,240
adversaries

552
00:23:57,440 --> 00:24:01,760
i won't say that that this had anything

553
00:24:00,240 --> 00:24:05,520
to do with the twitter

554
00:24:01,760 --> 00:24:08,559
uh debacle but you know who knows

555
00:24:05,520 --> 00:24:12,080
the the information isn't in yet so

556
00:24:08,559 --> 00:24:13,200
anything's possible right anything is

557
00:24:12,080 --> 00:24:16,639
possible

558
00:24:13,200 --> 00:24:18,400
um you know i got to uh

559
00:24:16,640 --> 00:24:20,799
i got it i gotta be honest frank you

560
00:24:18,400 --> 00:24:23,120
know i i came close to uh to to

561
00:24:20,799 --> 00:24:24,480
dropping the band hammer and muting you

562
00:24:23,120 --> 00:24:27,600
for your pronunciation

563
00:24:24,480 --> 00:24:29,679
it was uh it was pretty close

564
00:24:27,600 --> 00:24:33,439
i know where this is going i know where

565
00:24:29,679 --> 00:24:36,080
this is going and i don't like it

566
00:24:33,440 --> 00:24:36,480
the joke there is uh you know franklin

567
00:24:36,080 --> 00:24:39,120
is

568
00:24:36,480 --> 00:24:39,520
one of the things that i i obviously

569
00:24:39,120 --> 00:24:41,840
doesn't

570
00:24:39,520 --> 00:24:43,440
really anger me i just find it silly uh

571
00:24:41,840 --> 00:24:45,439
pronunciation of gif

572
00:24:43,440 --> 00:24:46,480
i say it's gif because i looked in the

573
00:24:45,440 --> 00:24:48,880
code in um

574
00:24:46,480 --> 00:24:49,919
github and that's where that's where it

575
00:24:48,880 --> 00:24:51,679
was

576
00:24:49,919 --> 00:24:52,480
uh there are a couple of questions in

577
00:24:51,679 --> 00:24:54,400
here um

578
00:24:52,480 --> 00:24:57,600
[Music]

579
00:24:54,400 --> 00:24:58,960
so um question here on oh that's a good

580
00:24:57,600 --> 00:25:02,158
one we'll come back to as well

581
00:24:58,960 --> 00:25:04,400
is there a tool that would identify when

582
00:25:02,159 --> 00:25:05,200
there's a mismatch between a legit file

583
00:25:04,400 --> 00:25:07,360
name and an

584
00:25:05,200 --> 00:25:09,279
incorrect location is there any kind

585
00:25:07,360 --> 00:25:10,879
like i can envision

586
00:25:09,279 --> 00:25:14,240
what could do that i'm just wondering if

587
00:25:10,880 --> 00:25:18,000
you know of any that uh that do that

588
00:25:14,240 --> 00:25:20,960
um off the top of my head i'm not

589
00:25:18,000 --> 00:25:23,360
really aware of a tool that looks

590
00:25:20,960 --> 00:25:26,480
specifically at that

591
00:25:23,360 --> 00:25:31,520
there are some tools that are designed

592
00:25:26,480 --> 00:25:35,279
to help identify search order hijacking

593
00:25:31,520 --> 00:25:38,960
stuff from different angles i've not

594
00:25:35,279 --> 00:25:40,400
used any of them and i don't know that

595
00:25:38,960 --> 00:25:43,679
anything is being

596
00:25:40,400 --> 00:25:45,279
kind of really currently maintained um

597
00:25:43,679 --> 00:25:48,320
from that perspective of the

598
00:25:45,279 --> 00:25:48,960
of the ones that i've seen and and thus

599
00:25:48,320 --> 00:25:52,158
not

600
00:25:48,960 --> 00:25:57,679
you know being aware of any efficacy

601
00:25:52,159 --> 00:26:00,799
uh i didn't try to include any of that

602
00:25:57,679 --> 00:26:02,480
info in there oh yeah i understand i

603
00:26:00,799 --> 00:26:05,440
just wasn't sure if you're familiar

604
00:26:02,480 --> 00:26:06,960
with uh with any off hand my my gut

605
00:26:05,440 --> 00:26:08,720
jacket i'm speculating here

606
00:26:06,960 --> 00:26:11,440
is that would probably be something that

607
00:26:08,720 --> 00:26:12,720
falls into the arena of file integrity

608
00:26:11,440 --> 00:26:16,000
monitoring

609
00:26:12,720 --> 00:26:18,799
um and or something along

610
00:26:16,000 --> 00:26:20,720
some kind of an edr type of a solution

611
00:26:18,799 --> 00:26:22,158
but um i i don't know of any either i

612
00:26:20,720 --> 00:26:25,279
just didn't know if you maybe

613
00:26:22,159 --> 00:26:27,039
maybe had the challenge with that is

614
00:26:25,279 --> 00:26:30,960
that you would have to know

615
00:26:27,039 --> 00:26:34,400
what binaries would be targeted

616
00:26:30,960 --> 00:26:35,039
right so i mean the world's your oyster

617
00:26:34,400 --> 00:26:38,159
there

618
00:26:35,039 --> 00:26:38,559
from that perspective so i mean yeah you

619
00:26:38,159 --> 00:26:41,840
could

620
00:26:38,559 --> 00:26:44,960
you could profile everything

621
00:26:41,840 --> 00:26:47,439
under the windows directory

622
00:26:44,960 --> 00:26:52,000
and just say hey if any binaries by

623
00:26:47,440 --> 00:26:54,720
these names show up somewhere else

624
00:26:52,000 --> 00:26:55,440
but yeah you know that that starts to

625
00:26:54,720 --> 00:26:58,080
get

626
00:26:55,440 --> 00:27:00,320
a little bit problematic because with

627
00:26:58,080 --> 00:27:02,639
search order hijacking the binary name

628
00:27:00,320 --> 00:27:05,520
doesn't actually have to remain the same

629
00:27:02,640 --> 00:27:07,520
so we've seen some scenarios where

630
00:27:05,520 --> 00:27:09,760
something got copied or written to the

631
00:27:07,520 --> 00:27:11,760
user profile

632
00:27:09,760 --> 00:27:13,039
where they didn't retain the name to it

633
00:27:11,760 --> 00:27:16,158
right like the uh

634
00:27:13,039 --> 00:27:20,000
the the diffutils thing

635
00:27:16,159 --> 00:27:22,080
it got written as a tmp file

636
00:27:20,000 --> 00:27:24,279
with some crazy random name or something

637
00:27:22,080 --> 00:27:28,240
like that it doesn't have to be

638
00:27:24,279 --> 00:27:32,799
cmp.exe yeah it'll still run

639
00:27:28,240 --> 00:27:32,799
and because of the because of the

640
00:27:32,880 --> 00:27:37,760
the calls in from the binary for the

641
00:27:35,600 --> 00:27:39,439
dlls that it's looking to load

642
00:27:37,760 --> 00:27:41,919
the only thing that has to have the

643
00:27:39,440 --> 00:27:44,960
proper name is the dll

644
00:27:41,919 --> 00:27:47,679
not the not the xe itself so

645
00:27:44,960 --> 00:27:48,960
trying to trying to build a profile for

646
00:27:47,679 --> 00:27:50,559
that i think is

647
00:27:48,960 --> 00:27:52,080
is going to be one of the challenging

648
00:27:50,559 --> 00:27:54,080
things because

649
00:27:52,080 --> 00:27:56,000
you don't really know what that's going

650
00:27:54,080 --> 00:27:59,439
to look like it could be anything and

651
00:27:56,000 --> 00:28:01,760
not just a system binary right

652
00:27:59,440 --> 00:28:02,960
you could drop some other legitimate

653
00:28:01,760 --> 00:28:06,080
third-party

654
00:28:02,960 --> 00:28:09,200
binary onto the system

655
00:28:06,080 --> 00:28:13,039
that you've snarfed from somewhere

656
00:28:09,200 --> 00:28:16,159
and hey it's going to work the same

657
00:28:13,039 --> 00:28:19,679
too as long as it gets to launch

658
00:28:16,159 --> 00:28:21,840
then it's a you know it's a target

659
00:28:19,679 --> 00:28:24,480
yeah i mean and it probably speaks to

660
00:28:21,840 --> 00:28:28,399
the the

661
00:28:24,480 --> 00:28:30,640
i'll i guess i'll lightly say the uh the

662
00:28:28,399 --> 00:28:32,719
widely various mechanisms by which

663
00:28:30,640 --> 00:28:35,919
software developers have their

664
00:28:32,720 --> 00:28:37,840
applications just function normally

665
00:28:35,919 --> 00:28:39,279
so that it's hard to consistently model

666
00:28:37,840 --> 00:28:40,639
that and that's that's part of what

667
00:28:39,279 --> 00:28:42,399
makes it challenging for us how do you

668
00:28:40,640 --> 00:28:44,559
tell good from evil

669
00:28:42,399 --> 00:28:47,120
um do you know if this also translates

670
00:28:44,559 --> 00:28:48,799
in any form out to max by chance

671
00:28:47,120 --> 00:28:50,559
is there any kind of similar and i'd

672
00:28:48,799 --> 00:28:55,039
actually extend on that to um

673
00:28:50,559 --> 00:28:58,158
uh to using some linux machines as well

674
00:28:55,039 --> 00:29:02,080
yes so similar things

675
00:28:58,159 --> 00:29:04,080
exist there um they get a little bit

676
00:29:02,080 --> 00:29:07,840
more complicated

677
00:29:04,080 --> 00:29:11,039
um but yes there are shared libraries

678
00:29:07,840 --> 00:29:14,480
um on on linux and

679
00:29:11,039 --> 00:29:18,559
and mac um operating systems and those

680
00:29:14,480 --> 00:29:19,760
can you know fall prey to a similar type

681
00:29:18,559 --> 00:29:22,879
of scheme

682
00:29:19,760 --> 00:29:27,760
it's a little bit different um

683
00:29:22,880 --> 00:29:27,760
and not as um

684
00:29:28,320 --> 00:29:31,760
not as widely talked about uh by any

685
00:29:31,120 --> 00:29:35,039
means but

686
00:29:31,760 --> 00:29:36,320
yes it it it does exist um that is a

687
00:29:35,039 --> 00:29:41,039
concern

688
00:29:36,320 --> 00:29:43,439
and you know something that as

689
00:29:41,039 --> 00:29:44,960
as those in as those types of operating

690
00:29:43,440 --> 00:29:48,320
systems show up

691
00:29:44,960 --> 00:29:50,880
in corporate environments being able to

692
00:29:48,320 --> 00:29:55,840
detect on that type of activity is is

693
00:29:50,880 --> 00:29:55,840
becoming more and more important

694
00:29:56,240 --> 00:30:01,360
yeah definitely um there's a couple of

695
00:29:59,679 --> 00:30:03,200
other comments in here that are in

696
00:30:01,360 --> 00:30:05,199
you know again a similar vein i'll kind

697
00:30:03,200 --> 00:30:06,880
of sum those up like they're

698
00:30:05,200 --> 00:30:08,960
whether it's file integrity monitoring

699
00:30:06,880 --> 00:30:11,520
or in the chat

700
00:30:08,960 --> 00:30:12,320
michael had mentioned uh you know going

701
00:30:11,520 --> 00:30:15,120
through

702
00:30:12,320 --> 00:30:16,879
your your known locations and hashing

703
00:30:15,120 --> 00:30:18,719
those files and making sure that you're

704
00:30:16,880 --> 00:30:20,480
using just the correct correct ones

705
00:30:18,720 --> 00:30:22,240
intended ones

706
00:30:20,480 --> 00:30:24,080
you know whether it's using app data

707
00:30:22,240 --> 00:30:25,919
roaming or whether it's using some of

708
00:30:24,080 --> 00:30:27,760
the other common locations

709
00:30:25,919 --> 00:30:30,080
um you know it really just becomes a

710
00:30:27,760 --> 00:30:31,760
matter of risk and reward in many cases

711
00:30:30,080 --> 00:30:32,399
where yeah there's a way that we can

712
00:30:31,760 --> 00:30:34,320
solve that

713
00:30:32,399 --> 00:30:35,678
that problem and sometimes that that

714
00:30:34,320 --> 00:30:38,158
problem solving is

715
00:30:35,679 --> 00:30:39,840
more trouble than the problem is in the

716
00:30:38,159 --> 00:30:42,720
first place i guess

717
00:30:39,840 --> 00:30:43,279
um you know somebody else had mentioned

718
00:30:42,720 --> 00:30:46,880
a

719
00:30:43,279 --> 00:30:46,880
question where was that

720
00:30:47,279 --> 00:30:52,399
oh shoot i lost it oh um

721
00:30:50,880 --> 00:30:54,880
we're in your slide you said all you

722
00:30:52,399 --> 00:30:58,719
have to do is application white listing

723
00:30:54,880 --> 00:30:59,440
um or you know the the examples that you

724
00:30:58,720 --> 00:31:01,360
had given

725
00:30:59,440 --> 00:31:02,640
um you know application library white

726
00:31:01,360 --> 00:31:05,918
listening their

727
00:31:02,640 --> 00:31:08,080
potential solutions but they come with

728
00:31:05,919 --> 00:31:10,159
you know a big cost in terms of the

729
00:31:08,080 --> 00:31:10,639
complexity of the system of maintaining

730
00:31:10,159 --> 00:31:13,840
it

731
00:31:10,640 --> 00:31:16,399
anybody that's run any kind of a uh

732
00:31:13,840 --> 00:31:18,000
allow listing operation knows that it

733
00:31:16,399 --> 00:31:20,080
takes maintenance it's not a fire and

734
00:31:18,000 --> 00:31:22,320
forget type of a task so

735
00:31:20,080 --> 00:31:23,678
that's a bit of a bit of a challenge

736
00:31:22,320 --> 00:31:26,960
there as well

737
00:31:23,679 --> 00:31:30,000
um let's see

738
00:31:26,960 --> 00:31:34,399
let's see there's a lot of stuff in

739
00:31:30,000 --> 00:31:34,399
the the question listing here um

740
00:31:34,640 --> 00:31:38,240
some of these i'm gonna have to pull out

741
00:31:36,640 --> 00:31:41,279
here to uh um

742
00:31:38,240 --> 00:31:42,640
you know to to put into your your

743
00:31:41,279 --> 00:31:47,519
hallway but i know we still have a

744
00:31:42,640 --> 00:31:48,880
couple of minutes um

745
00:31:47,519 --> 00:31:51,600
yeah there's some good theoretical

746
00:31:48,880 --> 00:31:54,720
examples of potential solutions for that

747
00:31:51,600 --> 00:31:56,480
um in terms of okay that's a good one um

748
00:31:54,720 --> 00:31:58,159
you know the the threat detection report

749
00:31:56,480 --> 00:32:02,000
that ray canary puts out

750
00:31:58,159 --> 00:32:02,720
um is is that a place where potentially

751
00:32:02,000 --> 00:32:04,240
i'm not signing

752
00:32:02,720 --> 00:32:05,919
up for anything but potentially you

753
00:32:04,240 --> 00:32:08,080
might be able to

754
00:32:05,919 --> 00:32:09,440
uh talk about where the common

755
00:32:08,080 --> 00:32:12,720
directories are that

756
00:32:09,440 --> 00:32:14,720
adversaries might use for search order

757
00:32:12,720 --> 00:32:16,240
hijacking is that a trend or

758
00:32:14,720 --> 00:32:19,200
do you think that's even useful as a

759
00:32:16,240 --> 00:32:22,159
potential indicator

760
00:32:19,200 --> 00:32:23,919
so like where they would copy and

761
00:32:22,159 --> 00:32:26,559
execute from

762
00:32:23,919 --> 00:32:28,399
yeah yeah just if there's any trends

763
00:32:26,559 --> 00:32:30,960
along those lines

764
00:32:28,399 --> 00:32:32,239
yeah app data roaming i mean that's the

765
00:32:30,960 --> 00:32:35,519
that's the big one

766
00:32:32,240 --> 00:32:37,039
um the majority of what we see is under

767
00:32:35,519 --> 00:32:39,120
app data roaming

768
00:32:37,039 --> 00:32:40,399
now obviously it doesn't have to be

769
00:32:39,120 --> 00:32:43,518
there that's an

770
00:32:40,399 --> 00:32:46,000
easy one simply because

771
00:32:43,519 --> 00:32:47,200
you want the user to execute or you've

772
00:32:46,000 --> 00:32:49,039
got some

773
00:32:47,200 --> 00:32:50,640
process like a scheduled task that's

774
00:32:49,039 --> 00:32:54,960
going to be executing it

775
00:32:50,640 --> 00:32:57,919
as the user that's a place that has

776
00:32:54,960 --> 00:32:58,880
you know read write execute capabilities

777
00:32:57,919 --> 00:33:02,640
um

778
00:32:58,880 --> 00:33:06,000
another thing that will show up on the

779
00:33:02,640 --> 00:33:08,000
uh on the

780
00:33:06,000 --> 00:33:09,519
full disclosure email list that people

781
00:33:08,000 --> 00:33:11,440
talk about there

782
00:33:09,519 --> 00:33:12,880
is that you can write something to the

783
00:33:11,440 --> 00:33:16,159
root of c

784
00:33:12,880 --> 00:33:18,159
right and that's by default

785
00:33:16,159 --> 00:33:19,600
you create a directory there you've got

786
00:33:18,159 --> 00:33:22,240
full read write

787
00:33:19,600 --> 00:33:24,480
execute capabilities as well so that's

788
00:33:22,240 --> 00:33:26,640
an easy thing

789
00:33:24,480 --> 00:33:28,799
but we haven't really seen adversaries

790
00:33:26,640 --> 00:33:31,679
do that

791
00:33:28,799 --> 00:33:33,200
not not saying that it doesn't happen

792
00:33:31,679 --> 00:33:34,960
but that's not the

793
00:33:33,200 --> 00:33:37,279
that's not the common thread the most

794
00:33:34,960 --> 00:33:41,279
common thread is under the user profile

795
00:33:37,279 --> 00:33:43,519
and from there under app data roaming

796
00:33:41,279 --> 00:33:44,799
so i mean yeah that is that is something

797
00:33:43,519 --> 00:33:46,880
that you can

798
00:33:44,799 --> 00:33:49,840
you know that you can think about from a

799
00:33:46,880 --> 00:33:53,120
detection methodology perspective

800
00:33:49,840 --> 00:33:56,639
if you have ways to

801
00:33:53,120 --> 00:34:01,039
watch for what gets written there um

802
00:33:56,640 --> 00:34:01,600
the you know as i kind of alluded to in

803
00:34:01,039 --> 00:34:04,720
the

804
00:34:01,600 --> 00:34:08,239
in the in the deck

805
00:34:04,720 --> 00:34:09,918
you might think watching for executable

806
00:34:08,239 --> 00:34:13,199
rights

807
00:34:09,918 --> 00:34:14,879
or even just execution from those

808
00:34:13,199 --> 00:34:18,239
directories would be an easy

809
00:34:14,879 --> 00:34:20,480
tell but

810
00:34:18,239 --> 00:34:22,000
when you start going down that path you

811
00:34:20,480 --> 00:34:24,719
really quickly realize

812
00:34:22,000 --> 00:34:26,960
that there's a whole bunch of stuff that

813
00:34:24,719 --> 00:34:30,319
happens that way that you would think

814
00:34:26,960 --> 00:34:33,040
okay this is evil it's

815
00:34:30,320 --> 00:34:35,280
wait it's not evil why is this

816
00:34:33,040 --> 00:34:37,279
executable written here under the user

817
00:34:35,280 --> 00:34:39,119
why is this executable launching here

818
00:34:37,280 --> 00:34:42,000
under the user

819
00:34:39,119 --> 00:34:42,399
it's like what you know what's going on

820
00:34:42,000 --> 00:34:46,839
and

821
00:34:42,399 --> 00:34:49,679
you know head explosion type time

822
00:34:46,839 --> 00:34:51,839
um it it gets really difficult and so

823
00:34:49,679 --> 00:34:52,639
you've got to balance out that signal to

824
00:34:51,839 --> 00:34:54,399
noise

825
00:34:52,639 --> 00:34:55,839
you know it's part of what i say you

826
00:34:54,399 --> 00:34:59,200
know here's some

827
00:34:55,839 --> 00:35:02,880
some sample query logic that

828
00:34:59,200 --> 00:35:03,919
maybe is a starting point don't turn it

829
00:35:02,880 --> 00:35:06,480
on

830
00:35:03,920 --> 00:35:07,040
right not don't go full production with

831
00:35:06,480 --> 00:35:09,119
that

832
00:35:07,040 --> 00:35:10,400
you've got to have a way to to check

833
00:35:09,119 --> 00:35:13,760
that against

834
00:35:10,400 --> 00:35:16,240
you know a subset of the environment

835
00:35:13,760 --> 00:35:16,960
you know something like that to start to

836
00:35:16,240 --> 00:35:18,479
see

837
00:35:16,960 --> 00:35:20,320
what your noise level is going to be

838
00:35:18,480 --> 00:35:22,720
because you could not only very quickly

839
00:35:20,320 --> 00:35:25,520
overwhelm systems that are trying to

840
00:35:22,720 --> 00:35:26,240
log all of this information um you could

841
00:35:25,520 --> 00:35:27,839
overwhelm

842
00:35:26,240 --> 00:35:29,680
analysts that are having to try to look

843
00:35:27,839 --> 00:35:30,078
at those to validate alerts that are

844
00:35:29,680 --> 00:35:33,279
coming

845
00:35:30,079 --> 00:35:35,599
through you just want to be cognizant of

846
00:35:33,280 --> 00:35:38,400
what's going on and things that seem

847
00:35:35,599 --> 00:35:41,520
like oh this is a perfect idea

848
00:35:38,400 --> 00:35:44,800
we can detect all the evil

849
00:35:41,520 --> 00:35:46,560
yeah you may be able to but

850
00:35:44,800 --> 00:35:50,000
you may also be killing your people in

851
00:35:46,560 --> 00:35:50,000
your systems at the same time

852
00:35:50,160 --> 00:35:53,520
yeah yeah it kind of goes back again

853
00:35:52,240 --> 00:35:56,240
where

854
00:35:53,520 --> 00:35:56,960
there are solutions but when we look at

855
00:35:56,240 --> 00:35:58,560
the realities of implementing

856
00:35:56,960 --> 00:36:01,760
implementing

857
00:35:58,560 --> 00:36:04,560
them we uh we just may not like those

858
00:36:01,760 --> 00:36:05,520
uh good stuff um well there are a couple

859
00:36:04,560 --> 00:36:07,200
other questions

860
00:36:05,520 --> 00:36:09,280
um we are coming up against the next

861
00:36:07,200 --> 00:36:10,000
break the next uh talk here so i want to

862
00:36:09,280 --> 00:36:12,079
go ahead and

863
00:36:10,000 --> 00:36:14,400
get the hand off for uh for that one

864
00:36:12,079 --> 00:36:15,520
ready um thanks very much frank it's

865
00:36:14,400 --> 00:36:16,400
always great to have you and i know

866
00:36:15,520 --> 00:36:17,920
we've got another talk

867
00:36:16,400 --> 00:36:19,440
uh of yours i believe it's coming up

868
00:36:17,920 --> 00:36:22,560
tomorrow right

869
00:36:19,440 --> 00:36:25,040
that is correct okay got it

870
00:36:22,560 --> 00:36:26,000
um so i'm excited for that as well and a

871
00:36:25,040 --> 00:36:27,839
little bit of a different

872
00:36:26,000 --> 00:36:29,359
talk and i'll uh i'll let the

873
00:36:27,839 --> 00:36:30,960
introductions go with that one when the

874
00:36:29,359 --> 00:36:31,680
time comes but it's in the agenda as

875
00:36:30,960 --> 00:36:33,280
well

876
00:36:31,680 --> 00:36:34,879
um we're going to take just a couple of

877
00:36:33,280 --> 00:36:37,280
minutes here to get up and

878
00:36:34,880 --> 00:36:39,200
handle the handoff to our next

879
00:36:37,280 --> 00:36:41,839
presenters to uh david and

880
00:36:39,200 --> 00:36:42,879
matt matthew and uh we'll uh we'll come

881
00:36:41,839 --> 00:36:45,359
back in about three

882
00:36:42,880 --> 00:36:46,240
so i'm gonna get your questions into

883
00:36:45,359 --> 00:36:48,640
frank's

884
00:36:46,240 --> 00:36:55,839
hallway channel in just a moment here so

885
00:36:48,640 --> 00:36:55,839
thanks again frank appreciate your time

886
00:37:02,240 --> 00:37:04,319
you

