1
00:00:10,360 --> 00:00:13,920
So open source deeper made easy the name of our talk

2
00:00:15,670 --> 00:00:19,948
Who we are why why you might care about us? My name is Allan Horlick Oski

3
00:00:19,980 --> 00:00:26,459
I currently work for square as a security engineer. We've got over 17 years of experience doing this in

4
00:00:27,130 --> 00:00:34,469
All aspects of it. I also like to code I've developed siler Cd Qr and now CCF p.m.. And

5
00:00:35,739 --> 00:00:41,248
My name is Steven. Hank. I'm a tam at Iceberg, and I've been doing instant response forensics

6
00:00:42,040 --> 00:00:44,729
Information security stuff for 10 or 11 years now

7
00:00:45,700 --> 00:00:48,149
It starts all to blend together right it does yeah

8
00:00:49,210 --> 00:00:50,260
so

9
00:00:50,260 --> 00:00:57,000
on this page, you'll see my face github repository a lot of cool stuff in there a lot of just random stuff as well, so

10
00:00:58,690 --> 00:01:00,690
our agenda for today is

11
00:01:01,359 --> 00:01:05,548
we're gonna talk about why why I made this why we care about this and

12
00:01:06,010 --> 00:01:11,609
Then we're gonna give an overview of what CCf really is CC. FVM really is and

13
00:01:12,580 --> 00:01:15,449
Talk about the different phases for incident response

14
00:01:16,420 --> 00:01:20,640
Live response the collection processing investigating, and how this is going to help?

15
00:01:22,420 --> 00:01:24,130
so

16
00:01:24,130 --> 00:01:29,970
We're gonna go through a lot of this data really quickly because of the the time constraints

17
00:01:29,970 --> 00:01:34,470
and we know that they're gonna be a lot of questions at the end, so please ask questions otherwise, we

18
00:01:35,110 --> 00:01:40,079
You know we'll we'll have a lot of time to fill so with this. Why did we make this?

19
00:01:41,560 --> 00:01:43,619
digital forensics and incident response is

20
00:01:44,290 --> 00:01:47,549
One of those fields that is very hard to get into a lot of people

21
00:01:47,619 --> 00:01:48,780
Don't know how to do this

22
00:01:48,780 --> 00:01:51,180
They don't have the tools or they think the tools are very expensive

23
00:01:51,180 --> 00:01:52,000
so

24
00:01:52,000 --> 00:01:52,840
I

25
00:01:52,840 --> 00:01:56,490
Wanted to make a tool suite that I could use to make my life easier

26
00:01:56,549 --> 00:01:59,578
My friends decided that they liked it and that you put it online

27
00:01:59,579 --> 00:02:01,889
and then I found out a whole bunch of people really liked it and

28
00:02:02,560 --> 00:02:07,079
Put in a bunch of support the key aspects were that it had to be easy to use

29
00:02:07,869 --> 00:02:09,869
because this was made from

30
00:02:10,389 --> 00:02:13,918
Somebody who has no experience to being flexible enough to have

31
00:02:14,500 --> 00:02:19,769
Value to those of us who have been doing this for a long time had to be scalable what I mean by that

32
00:02:19,769 --> 00:02:25,199
It's supposed to work on somebody's laptop all the way up to an enterprise level sitting on a server somewhere

33
00:02:26,680 --> 00:02:33,420
And also had to be affordable. I wanted this tool to be accessible to students. I wanted this tool to be accessible to

34
00:02:34,629 --> 00:02:39,089
That single it person who's in charge of their entire Company's infrastructure

35
00:02:39,280 --> 00:02:44,399
And they maybe don't have as much money for security so I wanted I

36
00:02:44,890 --> 00:02:49,409
didn't want there to be any barriers to getting this information from Raw Data to

37
00:02:50,799 --> 00:02:53,638
end product human readable format, and

38
00:02:54,459 --> 00:02:59,158
I wanted everything to work together and be as plug-and-play as possible as much as I hate that term

39
00:02:59,159 --> 00:03:01,159
But I wanted it to be able to turn on and work

40
00:03:02,590 --> 00:03:09,179
But kind of go through a little overview so basically with this set of tools you've got your ir analyst first thing. He does is

41
00:03:09,819 --> 00:03:17,607
Initiate this the the artifact collection on a compromised system those artifacts go directly to your centralized server the Ccf VM and

42
00:03:17,889 --> 00:03:24,959
then with the processing happens there the analyst can then go and begin analysis immediately from that Central central location, so

43
00:03:26,349 --> 00:03:28,349
that happens with

44
00:03:28,810 --> 00:03:30,810
three parts, right

45
00:03:30,879 --> 00:03:37,469
You know there we go so first you collect collection happens with sylar and an sfTp server that runs on CCF

46
00:03:37,470 --> 00:03:41,728
Vm you the processing and CDQ are and then you can do an investigation in CCF

47
00:03:45,040 --> 00:03:50,730
so that's gonna get us into the first piece which is collection collection is going to be done with Sylar its mail gave a

48
00:03:51,010 --> 00:03:53,010
Pretty good summary of it

49
00:03:53,560 --> 00:03:54,639
I

50
00:03:54,639 --> 00:04:00,839
realized once I left the consulting world that I didn't have this really nice collection tool suite that I used to have and

51
00:04:01,060 --> 00:04:04,709
When I looked around to see what tools were available for open source community

52
00:04:05,769 --> 00:04:10,289
I didn't find anything. I really liked I found stuff. That worked that was really slow

53
00:04:10,290 --> 00:04:14,250
and I found stuff that left a lot of artifacts on disks and so on and so forth so

54
00:04:15,040 --> 00:04:18,238
I worked with a partner of mine, Jason Yaga

55
00:04:18,238 --> 00:04:25,318
Give him a good shout out because he is the programmer extraordinaire who helped me build this thing I wanted it to be

56
00:04:25,750 --> 00:04:26,950
fast

57
00:04:26,950 --> 00:04:28,950
go around the I

58
00:04:29,220 --> 00:04:32,570
do as much in memory as possible and

59
00:04:33,210 --> 00:04:35,210
Leave his little artifacts on the disk

60
00:04:35,280 --> 00:04:40,339
and I wanted to have a secure transmission mechanism built in so that as

61
00:04:40,710 --> 00:04:45,650
An analyst I could run this thing and have all of those things combined

62
00:04:46,590 --> 00:04:51,349
So so we you know we kind of talked on that with real allen touched briefly

63
00:04:51,350 --> 00:04:56,899
We've got these these factors in artifact collection right we want to try and have as minimal impact on the host as possible especially

64
00:04:57,030 --> 00:05:03,440
Because in this case we're doing kind of a live response initial initial collection, and so we may have to go back later

65
00:05:03,440 --> 00:05:08,540
We want to make sure that we don't impact what happens the the the potentially compromised

66
00:05:09,180 --> 00:05:12,140
System, you know we want to impact that as little as possible

67
00:05:12,140 --> 00:05:19,878
So we want to minimize the number of process executions we created few have competitive entries as possible as few prefetch our files as possible

68
00:05:20,280 --> 00:05:21,859
And we want to minimize the data

69
00:05:21,860 --> 00:05:26,330
That's risking written to disk or to memory so that if you have to go back later and do a full

70
00:05:26,610 --> 00:05:31,580
Forensic image, or you pull memory you still have as much of what was there as part of the compromise

71
00:05:32,220 --> 00:05:33,920
System is still there

72
00:05:33,920 --> 00:05:39,770
You know when you have to go back for a full thing or a full capture and then additionally the windows api is

73
00:05:40,380 --> 00:05:48,080
Great, but it has things like file locking well when you want to pull raw registry files off of the disk the locked files

74
00:05:48,570 --> 00:05:51,379
You know will prevent you from doing that so we go around the api

75
00:05:51,960 --> 00:05:57,438
With sylar to be able to pull where those things you know what otherwise be locked

76
00:05:58,260 --> 00:06:03,739
Additionally it allows you to collect stuff from slack space that otherwise you know would not be pulled via the api

77
00:06:06,150 --> 00:06:10,039
so it's also important to put in there that there was a lot of

78
00:06:11,400 --> 00:06:18,770
Flexibility a lot of fail safes put in so that if for whatever reason that didn't work you could still use the api

79
00:06:19,140 --> 00:06:23,899
To go ahead and collect these things because some data is better than noting

80
00:06:24,810 --> 00:06:29,869
So I've mentioned live response a couple of times and as well as like a full image and so kind of the difference of that

81
00:06:29,870 --> 00:06:34,160
For those who aren't aware is a lie response is basically a click quick collection, right?

82
00:06:34,160 --> 00:06:39,499
I have an alert that came back and all the investigation. I've been able to do with the tools without touching the hosts

83
00:06:40,320 --> 00:06:44,760
Leave me with questions. So I need to go pull a set of artifacts to make a determination of

84
00:06:45,610 --> 00:06:48,719
Do I need to do more do I need to pull a full image?

85
00:06:48,720 --> 00:06:50,130
Do I need to do a cold disk image?

86
00:06:50,130 --> 00:06:51,760
and so the idea is

87
00:06:51,760 --> 00:06:58,319
get the the minimal set of artifacts you can so you can do a quick investigation to decide is this box owned or

88
00:06:58,480 --> 00:07:04,980
Is it not or is it probably possibly owned or is it not so then you can move on and spend?

89
00:07:05,200 --> 00:07:08,039
The time into a full investigation if you need to do that

90
00:07:08,200 --> 00:07:10,200
So we're in that case

91
00:07:10,200 --> 00:07:12,209
You know you'd pull the full block level copy

92
00:07:12,490 --> 00:07:17,790
Use your right blockers your forensics tool suites things like that and obviously that takes a whole lot more time

93
00:07:18,040 --> 00:07:22,679
Which in an incident response you want to be as quick as possible to get to ground truth?

94
00:07:23,260 --> 00:07:29,039
Right and I want to I do want to point out that the not forensic, ly sound collection technique?

95
00:07:29,320 --> 00:07:31,890
What that bullet means is that for?

96
00:07:32,890 --> 00:07:40,498
Legal reasons live responses typically never typically never used to take things to court

97
00:07:41,140 --> 00:07:45,839
That's what sylar was built to do was to do that quick and dirty

98
00:07:46,120 --> 00:07:49,200
Get me the raw information so that I can parse it off the system

99
00:07:52,090 --> 00:07:53,739
so

100
00:07:53,740 --> 00:07:55,740
This is for people to go read later

101
00:07:56,530 --> 00:08:00,419
This is a list of what's default collected by sylar on a windows box

102
00:08:00,700 --> 00:08:05,640
it'll detect the os and it'll go through and collect these things you'll notice that it's using the

103
00:08:06,640 --> 00:08:11,308
System route a program data those sort of shortcuts, so that you can

104
00:08:12,040 --> 00:08:16,649
doesn't matter where they what drive they installed the os on you can also use this as

105
00:08:17,860 --> 00:08:19,330
absolute Path

106
00:08:19,330 --> 00:08:22,289
Cdef whatever the Drive letters are it works for both?

107
00:08:22,290 --> 00:08:27,599
I also want to point out that you can collect the mfT off of any drive that's on the system if you put something in

108
00:08:27,600 --> 00:08:32,820
The collection list because you can modify this yourself you put something in the collection list that isn't there

109
00:08:32,820 --> 00:08:37,379
It's not going to break the script. It's simply going to give you a line and the logs. It says this wasn't there

110
00:08:40,150 --> 00:08:47,519
So right now. We've got a demo that. We're gonna go ahead and start. This is a default collection on a windows 10 box and

111
00:08:48,250 --> 00:08:54,479
I do want to point out that almost all of these demos all these command line demos were wrong on my daughter's

112
00:08:55,149 --> 00:08:57,659
$800 laptop to kind of prove that this will run anywhere

113
00:08:58,899 --> 00:09:01,769
So keep that in mind when you see the speed and the collection

114
00:09:02,620 --> 00:09:06,419
The this is basically in the beginning

115
00:09:06,420 --> 00:09:12,240
It says here's the server the username the password and then the output filename that we're going to use you're gonna see that

116
00:09:12,850 --> 00:09:14,520
through all of these iterations

117
00:09:14,520 --> 00:09:19,589
It's going to tell you exactly what it's collecting what scrolled by really fast for all the things that didn't exist

118
00:09:20,050 --> 00:09:27,870
It recursively goes through any directory path you give it. I would not do see colon slash that kind of defeats the purpose

119
00:09:28,630 --> 00:09:30,580
so well

120
00:09:30,580 --> 00:09:33,659
What we're gonna get out of this is we're gonna see this finish

121
00:09:33,660 --> 00:09:34,740
We're gonna see this finish

122
00:09:34,740 --> 00:09:38,339
And then we're gonna log in and validate that it's there one of the things that I

123
00:09:38,830 --> 00:09:41,009
Really really liked about this is there's almost

124
00:09:41,080 --> 00:09:47,099
This five hundred and sixty five hundred and fifty some odd files here that we collected in less than 13 seconds

125
00:09:48,070 --> 00:09:51,179
So that is done in memory

126
00:09:51,910 --> 00:09:56,069
Ssh off of the box the memory collection is all streamed

127
00:09:56,110 --> 00:09:59,550
so we don't use any more than 15 meg's of memory at a time and

128
00:10:01,209 --> 00:10:03,209
It'll use 100% of one core

129
00:10:04,990 --> 00:10:10,289
But like I said 13 seconds to do a full collection, not bad

130
00:10:13,089 --> 00:10:17,879
The next thing we're going to see is go ahead and start this demo. This is how we do a

131
00:10:18,399 --> 00:10:21,629
custom collection you'll see in the command line space delimited

132
00:10:21,730 --> 00:10:27,240
I use an absolute path, and I use a relative system shortcut to

133
00:10:27,760 --> 00:10:32,879
Go ahead and call this out as you saw it took a less than a second to complete

134
00:10:33,790 --> 00:10:41,130
And it'll take this demo longer to login and do an LS on the directory than it did to ssh it off the box

135
00:10:41,500 --> 00:10:43,709
So for artifacts left on the box

136
00:10:43,709 --> 00:10:49,319
You're gonna see an app compat entry and an mfT entry for the file being written disk and that's it

137
00:10:50,440 --> 00:10:52,440
so

138
00:10:53,320 --> 00:10:56,429
With that we move now that we have the data on the box

139
00:10:57,190 --> 00:11:03,419
We need a way to process it and this is where most people have a have a hard time having a system that does everything

140
00:11:03,850 --> 00:11:08,040
So Johan was up here this morning. Those have you heard his talk. He talked a lot about pazzo

141
00:11:08,040 --> 00:11:12,209
I'm not gonna repeat what he said because he didn't awesome Dom explaining. What it does CD, qr

142
00:11:12,210 --> 00:11:16,289
Makes use of pazzo to provide the parsing engine, what CD, qr

143
00:11:16,290 --> 00:11:22,920
Does is it makes it easy to use for everybody and it also implements some of my best practices our best practices on

144
00:11:23,260 --> 00:11:25,289
What you need to do for live response?

145
00:11:25,900 --> 00:11:28,079
Plaza will process everything

146
00:11:28,810 --> 00:11:30,810
but I wanted this to be quick, so

147
00:11:34,330 --> 00:11:37,469
Stephen sure so CD Qr. Plazo

148
00:11:38,050 --> 00:11:41,909
Takes a long time to run for those who have run it you start it you walk away

149
00:11:41,910 --> 00:11:45,000
Come back in Several hours, so we've added some

150
00:11:45,610 --> 00:11:47,400
Commands which is here really quick

151
00:11:47,400 --> 00:11:54,089
I'm not gonna read through them, but to make it go as fast as possible it will eat all of your cPU so

152
00:11:54,940 --> 00:11:58,320
Be aware of that before you started on something you're trying to do something right? Yeah

153
00:11:58,320 --> 00:12:01,589
the max cPU the reason I listed this flag up here was

154
00:12:02,170 --> 00:12:05,550
If you're in a vm by default, it'll always use

155
00:12:06,370 --> 00:12:12,120
Three less than whatever your max cPU count is so if you're in a VM, and they give you two cords

156
00:12:12,120 --> 00:12:15,959
It's always going to use one so that was the genesis for that

157
00:12:15,959 --> 00:12:18,388
I've also found it to be really handy when it's sitting on its own

158
00:12:18,390 --> 00:12:20,010
And it's the only thing running on the server

159
00:12:20,010 --> 00:12:21,760
And you want it to use all of the threads

160
00:12:21,760 --> 00:12:27,119
If anybody wants to get into the deep dark details of how pazzo works in thread counts and stuff see me afterwards

161
00:12:27,120 --> 00:12:29,190
I'm not Gonna or everybody with that

162
00:12:29,190 --> 00:12:35,549
And then hashing I've turned hashing on by default so it's going to hash every artifact you give it

163
00:12:36,130 --> 00:12:39,150
I would not if you're really pressed for time

164
00:12:39,150 --> 00:12:41,079
You can turn it off with that flag

165
00:12:41,080 --> 00:12:48,689
but I wouldn't it eats up very very little time and it is so useful to have the hashes for things in your reporting and

166
00:12:49,360 --> 00:12:51,599
When you're gripping through things not have to do it again

167
00:12:52,300 --> 00:12:57,510
The - P option I am gonna go through all these because you know I kind of proud of all this so

168
00:13:00,400 --> 00:13:02,639
Windows Linux and Mac are you and

169
00:13:03,670 --> 00:13:05,589
Dad which I believe

170
00:13:05,589 --> 00:13:06,540
We will cover later

171
00:13:06,540 --> 00:13:10,680
But there are four different options for parsing and we'll cover what all of those do so

172
00:13:11,140 --> 00:13:15,329
What this does is so it does use Plazo, but what we've had on top applause oh

173
00:13:15,329 --> 00:13:21,118
Because plazo spits out one big gigantic timeline that is very very good at crashing excel

174
00:13:21,940 --> 00:13:25,590
Now obviously you know we all love excel and we don't want it to crash

175
00:13:25,590 --> 00:13:28,739
So what we try to do is break this up into reports that made more sense together

176
00:13:29,130 --> 00:13:35,010
So things that belong together should should kind of go together so file system stuff registry stuff

177
00:13:35,500 --> 00:13:38,219
process execution stuff and try and lift lump those together

178
00:13:38,530 --> 00:13:44,639
So that when you're looking for certain indications of things you can go to one spot, and it you know there's less Likelihood

179
00:13:44,640 --> 00:13:46,679
You'll crash excel. It'll be a little bit faster

180
00:13:46,680 --> 00:13:51,209
It's it's a little bit quicker to get to what you're looking for so that improves your triage time

181
00:13:52,120 --> 00:13:59,609
And then additionally it will reparse some of the artifacts that father does lazo does a great job of running through the raw stuff?

182
00:13:59,800 --> 00:14:05,490
but for example when it puts things in a description field it'll be things like the event id the

183
00:14:05,920 --> 00:14:11,069
system like it's a whole bunch of stuff altogether they overload the description field to make it in and fit into the

184
00:14:11,350 --> 00:14:14,010
Generic Super Timeline Format, and yes

185
00:14:14,010 --> 00:14:17,309
The Data is there, but you can't pivot off of it very easily you can't sort by it

186
00:14:17,310 --> 00:14:18,640
You can't do a lot of things

187
00:14:18,640 --> 00:14:25,289
So the reporting functionality tries to fix that for I believe it's that six reports right now are completely

188
00:14:25,810 --> 00:14:28,919
Yeah until to split that up, and then it also adds the human readable

189
00:14:28,920 --> 00:14:34,860
So instead of just getting event iD 4268 you can see windows process creation. I think

190
00:14:35,410 --> 00:14:39,419
process execution so that you can see that very easily and again back to that like

191
00:14:39,640 --> 00:14:42,780
single person and it shop or someone new to the forensics field

192
00:14:43,030 --> 00:14:47,369
Don't want to have to open up a separate window of okay. What are their all the process of nid there, okay?

193
00:14:47,370 --> 00:14:52,140
I need these three let me go back here crap. What was that one, right? It's it's all built in right there, so

194
00:14:53,590 --> 00:14:58,379
Here we got the parser options to alan mention. You've got do all the things which is literally every plot so far sir

195
00:14:58,930 --> 00:15:00,420
It takes the longest

196
00:15:00,420 --> 00:15:07,020
But we've also split out windows linux and mac to try and improve that speed to only run the ones that you actually will need

197
00:15:07,540 --> 00:15:09,540
And this makes it kind of a swiss army

198
00:15:09,610 --> 00:15:12,330
Because Plaza will take in kind of whatever you give it

199
00:15:12,330 --> 00:15:15,839
You can give it everything everything that you ever say it'll take anything, right?

200
00:15:15,839 --> 00:15:19,109
You can give it a folder you can give it a zip file. You can give it an image

201
00:15:19,110 --> 00:15:19,740
You can give it

202
00:15:19,740 --> 00:15:24,750
You know a disk image or a Vm or if you just had a set of artifacts right like I've got you know this

203
00:15:25,000 --> 00:15:30,150
One the windows event file in one registry hive you can just give it those two things and it'll work

204
00:15:33,440 --> 00:15:35,479
Here's our chart. Don't try and read it

205
00:15:35,480 --> 00:15:36,680
We're not Gonna read it to you

206
00:15:36,680 --> 00:15:40,699
But just to give you an idea of kind of where these reports that we generate

207
00:15:41,040 --> 00:15:46,399
Out of CDC are what they're built out of so app compat Contra Magnetic cache Etc

208
00:15:47,129 --> 00:15:52,699
So that's more just for reference later not not for anything else, but wanted to give you an idea of how this maps

209
00:15:53,220 --> 00:15:58,279
Right we a lot of work went into what goes into these reports and which parsers are selected

210
00:15:59,069 --> 00:16:04,877
One of the things that we don't touch on is what how did the parsers get selected and which ones going where cuz it's nice

211
00:16:04,879 --> 00:16:06,879
to say the parts are types, but if

212
00:16:07,170 --> 00:16:13,250
You're interested in the github. I have a nice traceability Matrix for pazos version 1.3 1.4

213
00:16:13,259 --> 00:16:16,519
105 that says in windows these are the parsers

214
00:16:17,579 --> 00:16:23,659
Linux Mac, and so forth it also goes through which other new parsers between the different versions of Plazo

215
00:16:23,660 --> 00:16:29,180
And that's all in an excel document in the documentation folder within the CDQ ARc github

216
00:16:31,079 --> 00:16:35,539
So here's an example. I talked about that extra parsing see you have that the description field for example

217
00:16:35,540 --> 00:16:38,329
and you can see it next to the event id field so

218
00:16:39,060 --> 00:16:41,060
4624 and

219
00:16:41,100 --> 00:16:44,630
Account was successfully logged on right make the liddy's here you can pivot

220
00:16:45,089 --> 00:16:49,879
Right one of the ways I like using this in cases is once I get this report

221
00:16:49,880 --> 00:16:56,630
I'll hide everything that doesn't have something in that description field and that tells me that of those events that are left

222
00:16:56,630 --> 00:17:01,279
those are the security relevant events coming from that five hundred and fifty some odd list of

223
00:17:01,740 --> 00:17:05,419
Event Ids if you want more event ids it's python

224
00:17:05,970 --> 00:17:12,079
Go to this new line type in the number and your description if you don't like the description that I'm using which comes from windows

225
00:17:12,079 --> 00:17:19,219
Ultimate security the awesome site of mad props to them they you can change the name if you don't like it change

226
00:17:19,530 --> 00:17:22,939
It that's the great thing about open source if you do make changes

227
00:17:22,939 --> 00:17:26,989
I would sure like a pull request and send it back in for everybody else to use

228
00:17:29,460 --> 00:17:30,720
so

229
00:17:30,720 --> 00:17:34,339
The other thing we can do with CDCr is we can send those reports directly to cabana

230
00:17:34,340 --> 00:17:40,100
So you don't have to do it from CSV and there's kind of the default paths for your cubano server once it's set up

231
00:17:40,470 --> 00:17:44,990
And if you set up kop f which is a pretty cool elasticsearch management interface

232
00:17:45,750 --> 00:17:49,459
That's the the link for that right the nice thing about CC

233
00:17:49,460 --> 00:17:54,199
FVm is I can make links like this because it's gonna be the same way every time you start up that VM

234
00:17:58,080 --> 00:18:00,168
so we're gonna have a demo run now and

235
00:18:01,049 --> 00:18:03,289
if so this first one is going to be

236
00:18:04,290 --> 00:18:06,290
Just processing

237
00:18:06,330 --> 00:18:13,250
The Demo zip that we collected which is a collection of artifacts the dash z tells it it's a zip file

238
00:18:13,250 --> 00:18:19,489
It's gonna unzip everything and put it in a temporary folder process it and delete the temporary folder when it's done

239
00:18:19,740 --> 00:18:24,079
He's telling it to use Mac. CPU what you see underneath parsing image

240
00:18:24,720 --> 00:18:28,429
That's what you would have to type to get Plaza to work the way that CD, qr

241
00:18:28,429 --> 00:18:33,619
Has it to work for windows artifacts by default and we are going to skip ahead because nobody?

242
00:18:33,960 --> 00:18:37,970
Needs to watch that happened the next thing that's Gonna start is

243
00:18:38,490 --> 00:18:39,840
the

244
00:18:39,840 --> 00:18:43,280
Plaza works by making a database file, and then you take that database file

245
00:18:43,280 --> 00:18:49,939
And you make a super timeline or CSV or other type of output in this case. It's making the super timeline

246
00:18:51,059 --> 00:18:52,649
once that finishes

247
00:18:52,650 --> 00:18:54,650
You're going to see CD, Qr

248
00:18:54,720 --> 00:19:01,910
Continues to run and it's Gonna build those individual reports, so it's gonna parse this out into up to 16 different individual reports

249
00:19:01,980 --> 00:19:04,760
This is where we're grouping like-Minded Data together

250
00:19:06,240 --> 00:19:09,469
Yes, nobody likes a little spinny thing on a command line

251
00:19:09,470 --> 00:19:11,150
And you're gonna see this finish

252
00:19:11,150 --> 00:19:13,150
and when this finishes you're going to see

253
00:19:13,230 --> 00:19:18,589
How it tells you which reports we've made which ones that kept which meant they weren't empty

254
00:19:18,690 --> 00:19:23,090
and it's going to tell you how long so we did all of that in under 20 minutes on a

255
00:19:23,760 --> 00:19:26,089
Really inexpensive laptop running this VM

256
00:19:29,340 --> 00:19:34,188
Will go ahead and start this next demo. This is taking the same database file

257
00:19:34,559 --> 00:19:39,529
Which it won't have to reprocess all those and put it into an elastic search underneath

258
00:19:39,990 --> 00:19:47,329
The Index Demo so - - es space Demo is going to give you that data into the elastic search database

259
00:19:47,330 --> 00:19:49,330
That's already built into Ccf VM

260
00:19:49,950 --> 00:19:53,929
It's gonna prompt you by defaults. It's always Gonna ask you to keep things and

261
00:19:54,690 --> 00:20:00,010
we can see here that it asks you to keep the database file that you previously made because it has the same name and

262
00:20:00,830 --> 00:20:04,840
When you say yes, it just starts inserting the data into the elasticsearch database

263
00:20:05,420 --> 00:20:10,090
This is going to end up and finish say hey, I'm done and in about ten minutes

264
00:20:10,090 --> 00:20:15,069
We took all the data that we just had in CSV files. We've stuffed it into an elastic search database

265
00:20:17,720 --> 00:20:22,989
This is one of the urls that was listed on the previous slide. This is Gonna. Go ahead and show us

266
00:20:23,690 --> 00:20:30,039
Our different nodes. We can see that we have an index make all the case underscore CD qr underscore demo

267
00:20:30,920 --> 00:20:38,739
It's always going to start with case in Cd. Qr. That's gonna help with stacking that comes later it also helps us build infrastructure of

268
00:20:40,490 --> 00:20:45,400
People being able to share what comes next in the content in Caban

269
00:20:46,880 --> 00:20:48,880
so now we've got our

270
00:20:48,890 --> 00:20:54,070
Data back from our host we've processed it. So now we got to do our investigation right, so

271
00:20:54,590 --> 00:20:55,699
traditionally

272
00:20:55,700 --> 00:20:58,389
Especially logged a time line and still with with CD, qr

273
00:20:58,390 --> 00:21:01,119
You've got your CSV reports you can open that in your favorite tool like excel

274
00:21:01,910 --> 00:21:06,519
But it's the year 2017 we probably have a better way to do that which would be elastic

275
00:21:07,370 --> 00:21:14,228
So everyone's familiar with the elk stack unfortunately logstash did not make the cut plaza attended to cut that one out

276
00:21:15,290 --> 00:21:20,739
So we have elastic search which is our search and kind of analytics back in and then kibana is for visualization

277
00:21:20,870 --> 00:21:22,870
and and your Gui front-end

278
00:21:24,650 --> 00:21:30,129
CcF puts us all ccf. Vm puts us all together puts it into one. VM. That can it's an osf

279
00:21:30,890 --> 00:21:36,369
File you can use virtualbox you can use Vmware you can use your your virtualization product of choice

280
00:21:36,950 --> 00:21:42,069
if you use virtualbox then the entire solution is free except for the hardware and

281
00:21:43,010 --> 00:21:49,090
I know for a fact. It works. Well on all of them. We're gonna have some built in saved queries

282
00:21:49,640 --> 00:21:53,200
Visualizations and dashboards to give people a taste of what's possible?

283
00:21:55,070 --> 00:21:57,070
switching it back to you, so

284
00:21:57,200 --> 00:22:02,289
Basically obviously there's general advantage of this right using something like graph or excel is a bit clunky

285
00:22:02,290 --> 00:22:07,090
You can only do like a single search at a time where your piping commands together and that gets kind of kind of obnoxious?

286
00:22:07,580 --> 00:22:09,560
but you now have a

287
00:22:09,560 --> 00:22:13,178
Web-based interface you can have multiple people use the same thing

288
00:22:13,390 --> 00:22:17,079
And share searches you can start to build up this process flow for your group or your team?

289
00:22:18,049 --> 00:22:20,439
You know it becomes very standard, right?

290
00:22:20,480 --> 00:22:26,770
I would make a recommendation that you if you're gonna use this in production either hide this behind something or

291
00:22:27,200 --> 00:22:32,590
Go do the work to put authentication on it because que cabana by default does not have any authentication

292
00:22:34,429 --> 00:22:39,699
Do not put this on your enterprise, and then me if there because there's no authentication that somebody got in

293
00:22:40,250 --> 00:22:43,209
So and we put this in multiple indexes as we saw a little bit earlier

294
00:22:43,460 --> 00:22:46,329
So that means you can then go and investigate a single host

295
00:22:46,540 --> 00:22:47,570
That you pull artifacts them

296
00:22:47,570 --> 00:22:48,350
or you can

297
00:22:48,350 --> 00:22:49,418
Look at all the hosts

298
00:22:49,419 --> 00:22:52,809
They pulled or a set of hosts that you've pulled so you know if you've got a case

299
00:22:52,809 --> 00:22:57,879
And you want a stacking you identify a new file. That is a potentially engaged or involving

300
00:22:58,490 --> 00:23:04,419
Malicious activity attacker activity you can now go back and say okay. Where else is this and you can stack against everything

301
00:23:05,390 --> 00:23:07,390
so if we start this demo

302
00:23:07,549 --> 00:23:09,999
With this we're gonna have to go back. This is a bug in cabana

303
00:23:10,270 --> 00:23:14,530
You have to go back when you add new stuff and go last five years for it to identify that there's something there

304
00:23:15,140 --> 00:23:16,309
just

305
00:23:16,309 --> 00:23:18,309
How it works how it works?

306
00:23:18,770 --> 00:23:23,979
So here we can see we've got these these saved dashboards so first thing will go in the parser details

307
00:23:23,980 --> 00:23:26,169
And so this is where you can see how many records there are

308
00:23:26,780 --> 00:23:28,129
against each

309
00:23:28,130 --> 00:23:33,579
parser and so there's you know quite a few of them there to list them all out you can see what what shows up and

310
00:23:34,130 --> 00:23:36,080
It'll give you information like the system information

311
00:23:36,080 --> 00:23:41,500
And then also the number of records associated with the various user sids that were found on the box

312
00:23:43,429 --> 00:23:44,809
and then

313
00:23:44,809 --> 00:23:47,769
You know lee you can see you've got some of these other ones app compat

314
00:23:47,840 --> 00:23:50,079
persistence things that we have already created and are built into

315
00:23:50,630 --> 00:23:52,520
Ccf VM

316
00:23:52,520 --> 00:23:57,069
so for all of these demos, or there'll be links in the

317
00:23:57,740 --> 00:24:01,990
Presentation that's provided later to all of these videos. Yeah, they're all up on YouTube

318
00:24:02,270 --> 00:24:07,809
So if we start this one this one's gonna kind of show a little bit about that. That's stacking. We've got multiple indexes, so

319
00:24:08,540 --> 00:24:14,139
The first thing we have to do because cubana doesn't actually know about the indexes that are available in elastic is you have to tell?

320
00:24:14,140 --> 00:24:20,469
Them about it. So that's where kop f comes in Super handy because it tells you the indexes that are in elastic

321
00:24:20,840 --> 00:24:24,159
So you can go in it's a very nice easy copy and paste procedure

322
00:24:24,919 --> 00:24:27,419
Copy it from here. Go back into cabana

323
00:24:29,080 --> 00:24:32,100
paste it wait for it to turn green and say go and

324
00:24:32,830 --> 00:24:35,039
Through this process we created. There's our demo

325
00:24:35,200 --> 00:24:41,220
We'll do it once more time for the full demo that we we collected. You know getting back from when we collected earlier with Tyler

326
00:24:41,919 --> 00:24:47,489
So this is all carried all the way through to the end of the presentation do the same thing for the full demo

327
00:24:48,580 --> 00:24:50,698
Paste it wait a second click go

328
00:24:53,019 --> 00:24:58,409
Alright, so now we've got we've got two in our indexes within our elasticsearch

329
00:24:59,049 --> 00:25:00,700
cluster of one

330
00:25:00,700 --> 00:25:02,700
So we can drop it down

331
00:25:02,919 --> 00:25:08,128
Here over on the side, and you can see we've got demo and demo full so if you look at Demo over there

332
00:25:08,129 --> 00:25:10,129
There's about 500,000

333
00:25:10,210 --> 00:25:15,090
items or objects in it there's Demo full demo folds about 2 million and

334
00:25:16,269 --> 00:25:18,269
you know you can go back and go to the

335
00:25:19,629 --> 00:25:20,639
Cd q R star

336
00:25:20,639 --> 00:25:21,668
And that has all of them

337
00:25:21,669 --> 00:25:27,179
right with this you can search everything you can stack it you can pick things out as you want to see them or if you

338
00:25:27,179 --> 00:25:30,719
Need to review them for your case right remember this works on

339
00:25:31,210 --> 00:25:38,579
That those indexes can be a single machine multiple machines single artifacts multiple artifacts anything you throw at it

340
00:25:39,039 --> 00:25:42,268
That pazzo can parse it's going to get stuck into this database

