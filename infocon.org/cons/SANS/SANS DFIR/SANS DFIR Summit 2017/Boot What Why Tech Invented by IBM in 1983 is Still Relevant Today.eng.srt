1
00:00:00,867 --> 00:00:04,204
(pleasant, entrancing music)

2
00:00:09,242 --> 00:00:11,311
(audience applauding)

3
00:00:11,311 --> 00:00:14,214
- So this talk is
called Boot What?

4
00:00:14,214 --> 00:00:18,385
Why tech invented by IBM in
1983 is still relevant today.

5
00:00:20,754 --> 00:00:23,289
I'm Chief Security
Architect at FireEye,

6
00:00:23,289 --> 00:00:25,692
wannabe sailor in the off time,

7
00:00:25,692 --> 00:00:30,296
and part time Incident
Responder Forensic Analyst.

8
00:00:30,296 --> 00:00:32,464
So for overview perspective,

9
00:00:32,465 --> 00:00:35,969
we're gonna walk through
basis and background.

10
00:00:35,969 --> 00:00:37,737
A lot of this is
neat informational.

11
00:00:37,737 --> 00:00:40,907
We went through some
investigations starting in 2015,

12
00:00:40,907 --> 00:00:43,108
and I want everyone here
to not have to go through

13
00:00:43,109 --> 00:00:45,145
that same pain of
having to learn

14
00:00:45,145 --> 00:00:47,614
what a master boot record is,
what a volume boot record is,

15
00:00:47,614 --> 00:00:51,918
and all of the different
ways you can manipulate it.

16
00:00:51,918 --> 00:00:53,653
So, in 1983, let's...

17
00:00:56,189 --> 00:00:58,258
Just after I was born.

18
00:00:58,258 --> 00:01:01,728
Let's see, Lotus
1-2-3 was popular,

19
00:01:01,728 --> 00:01:04,364
chicken McNuggets had
just been released,

20
00:01:04,364 --> 00:01:06,966
the Redskins won their
first super bowl,

21
00:01:06,966 --> 00:01:09,803
it was the first
season of The A-Team,

22
00:01:09,803 --> 00:01:11,304
Thriller was the
best selling record,

23
00:01:11,304 --> 00:01:15,275
and IBM releases the
master boot record.

24
00:01:15,275 --> 00:01:17,310
So, most of you are
probably familiar with this,

25
00:01:17,310 --> 00:01:19,145
but just wanna make sure
everyone's on the same page.

26
00:01:19,145 --> 00:01:23,048
So, on a hard disk, you're
gonna have the disk,

27
00:01:24,684 --> 00:01:26,986
and on Linux and Windows
it's slightly different

28
00:01:26,986 --> 00:01:28,721
in terms of how
it's represented.

29
00:01:28,721 --> 00:01:29,956
Within that disk,

30
00:01:29,956 --> 00:01:31,558
you're gonna have one
or multiple partitions,

31
00:01:31,558 --> 00:01:32,792
and within those partitions,

32
00:01:32,792 --> 00:01:34,060
you're gonna have one
or multiple volumes,

33
00:01:34,060 --> 00:01:37,497
where you're gonna
have the file system.

34
00:01:37,497 --> 00:01:39,432
I wanna go through a couple
technology definitions

35
00:01:39,432 --> 00:01:41,101
so you guys are all
on the same page.

36
00:01:41,101 --> 00:01:44,504
So, the BIOS is the basic
input output system,

37
00:01:44,504 --> 00:01:46,673
the MBR is the
master boot record,

38
00:01:46,673 --> 00:01:48,808
the VBR is the
volume boot record,

39
00:01:48,808 --> 00:01:50,643
the BPB is the BIOS
parameter block,

40
00:01:50,643 --> 00:01:52,779
and the IPL is the
initial program loader.

41
00:01:52,779 --> 00:01:54,514
I'll be using all of these terms

42
00:01:54,514 --> 00:01:56,048
kind of natively throughout
the presentation,

43
00:01:56,049 --> 00:01:59,185
so just wanna make sure
you're familiar with them.

44
00:01:59,185 --> 00:02:02,388
So, in 1983, when
IBM released the MBR,

45
00:02:03,389 --> 00:02:05,058
this is the kind
of basic process

46
00:02:05,058 --> 00:02:08,061
of how the operating
system actually loads.

47
00:02:08,061 --> 00:02:11,931
So, you have the BIOS, and
the BIOS will do a POST.

48
00:02:11,931 --> 00:02:13,500
Do you guys remember back
in the day where you saw

49
00:02:13,500 --> 00:02:17,804
the clock ticking up as
it was doing the testing?

50
00:02:17,804 --> 00:02:19,839
I remember on some of the
first computers I had,

51
00:02:19,839 --> 00:02:22,041
that could take a little while.

52
00:02:22,041 --> 00:02:25,111
So, it'll find the active
drive in the BIOS config.

53
00:02:25,111 --> 00:02:27,679
It'll load the first 512 bytes

54
00:02:27,680 --> 00:02:29,816
into a specific address space,

55
00:02:29,816 --> 00:02:31,451
and then it will
execute those bytes

56
00:02:31,451 --> 00:02:34,821
and execute the
master boot record.

57
00:02:34,821 --> 00:02:39,159
Now, the master boot record is
the first sector of the disk.

58
00:02:39,159 --> 00:02:41,227
It's loaded at that same offset,

59
00:02:41,227 --> 00:02:45,498
but it relocates itself to
load the volume boot record.

60
00:02:45,498 --> 00:02:47,534
So, it's a mix of code and data.

61
00:02:47,534 --> 00:02:49,234
The partition table is the data,

62
00:02:49,235 --> 00:02:52,138
and then the code
is a 16-bit code.

63
00:02:53,406 --> 00:02:56,743
It executes in 16-bit real mode,

64
00:02:56,743 --> 00:02:58,611
and then it reads
the partition table

65
00:02:58,611 --> 00:03:02,781
to then load the active
partition for that system.

66
00:03:02,782 --> 00:03:04,684
It loads the first sector
of the active partition,

67
00:03:04,684 --> 00:03:06,953
which has the
volume boot record,

68
00:03:06,953 --> 00:03:08,421
and it loads into that
same address space

69
00:03:08,421 --> 00:03:10,156
and then executes the
volume boot record

70
00:03:10,156 --> 00:03:12,158
of the active partition.

71
00:03:13,526 --> 00:03:16,763
So now, the volume boot record,
once that's been executed,

72
00:03:16,763 --> 00:03:19,032
it's at the first sector
of the active partition.

73
00:03:19,032 --> 00:03:21,301
It's also loaded at 0x7C00.

74
00:03:22,468 --> 00:03:24,369
It's also a mix
of code and data.

75
00:03:24,370 --> 00:03:28,141
The data is what's the
BIOS parameter block.

76
00:03:28,141 --> 00:03:30,777
It executes in 16-bit real mode,

77
00:03:30,777 --> 00:03:33,845
and then it loads
the next 15 sectors,

78
00:03:33,846 --> 00:03:35,148
which is called the
initial program load,

79
00:03:35,148 --> 00:03:36,816
and that's all code.

80
00:03:38,017 --> 00:03:40,253
Initial program load
is always 15 sectors

81
00:03:40,253 --> 00:03:41,988
following the
volume boot record.

82
00:03:41,988 --> 00:03:45,992
It's often loaded at 7E00,
but sometimes 0xD000.

83
00:03:48,127 --> 00:03:49,562
It starts in 16-bit real mode,

84
00:03:49,562 --> 00:03:52,966
but this is where the
system starts to transition

85
00:03:52,966 --> 00:03:55,902
from real mode into
protected mode.

86
00:03:57,303 --> 00:03:59,204
At the point, that's
when, at least in Windows,

87
00:03:59,205 --> 00:04:01,674
where it loads the NT
loader and the boot manager,

88
00:04:01,674 --> 00:04:03,943
and you actually
load the file system,

89
00:04:03,943 --> 00:04:07,480
and then the operating system
starts to load from there.

90
00:04:07,480 --> 00:04:08,947
So, I wanted to make sure

91
00:04:08,948 --> 00:04:10,450
that you are familiar with
all of the background,

92
00:04:10,450 --> 00:04:12,552
because now from an
attack vector perspective,

93
00:04:12,552 --> 00:04:14,988
you can then understand
how each of these could be

94
00:04:14,988 --> 00:04:19,459
potentially manipulated
or targeted by a
different attacker.

95
00:04:19,459 --> 00:04:21,861
So, a couple known
attack vectors.

96
00:04:21,861 --> 00:04:25,698
TDL4, change the actual code
in the master boot record

97
00:04:25,698 --> 00:04:27,866
to load and do malicious things.

98
00:04:27,867 --> 00:04:30,937
Whereas Olmasco actually
changed the partition table

99
00:04:30,937 --> 00:04:34,274
to mark a different
partition as active.

100
00:04:36,242 --> 00:04:40,346
We've seen volume boot record
be targeted by Rovnix and GapZ

101
00:04:40,346 --> 00:04:42,782
by changing the code in the VBR,

102
00:04:42,782 --> 00:04:44,651
or manipulating the
BIOS parameter blocks

103
00:04:44,651 --> 00:04:46,419
and the settings
to get code to load

104
00:04:46,419 --> 00:04:50,123
from a different part
of the disk drive.

105
00:04:50,123 --> 00:04:52,724
And then, you can also
do direct modification

106
00:04:52,725 --> 00:04:54,160
of the initial program load,

107
00:04:54,160 --> 00:04:57,864
or the code that's running
at those 15 sectors.

108
00:04:59,565 --> 00:05:02,201
Okay, so now we have
that as a background.

109
00:05:02,201 --> 00:05:05,305
What do we do if we replace
the MBR with malicious code?

110
00:05:05,305 --> 00:05:06,939
So, some samples that do this.

111
00:05:06,939 --> 00:05:10,510
You have MebRoot,
XPAJ, and TDL4.

112
00:05:10,510 --> 00:05:12,679
What'll often happen in one of
these replacement scenarios,

113
00:05:12,679 --> 00:05:16,316
is they'll copy the
legitimate MBR, VBR, and IPL

114
00:05:16,316 --> 00:05:17,883
to a different location on disk,

115
00:05:17,884 --> 00:05:20,253
say an allocated space
or somewhere else.

116
00:05:20,253 --> 00:05:22,587
They will then load
their malicious code,

117
00:05:22,588 --> 00:05:24,590
and then transfer to
that point on disk

118
00:05:24,590 --> 00:05:27,659
where the original MBR or VBR is

119
00:05:27,660 --> 00:05:29,329
so that the operating
system loads normally

120
00:05:29,329 --> 00:05:30,596
and they don't
have to worry about

121
00:05:30,596 --> 00:05:32,165
knowing exactly the intricacies

122
00:05:32,165 --> 00:05:34,167
of the hard drive they're
running on, et cetera.

123
00:05:34,167 --> 00:05:36,669
They just copy it and move it.

124
00:05:38,004 --> 00:05:39,739
So, if you add a partition,

125
00:05:39,739 --> 00:05:41,006
what you could do is you
could either replace,

126
00:05:41,007 --> 00:05:43,876
modify, or add
partition table entries.

127
00:05:43,876 --> 00:05:45,945
So, Olmasco does this,
where it basically marks

128
00:05:45,945 --> 00:05:47,847
a new active partition.

129
00:05:50,183 --> 00:05:51,584
You can see here.

130
00:05:54,253 --> 00:05:55,555
This used to be the
active partition,

131
00:05:55,555 --> 00:05:57,623
and now it sets a
new active partition

132
00:05:57,623 --> 00:05:59,625
that then loads the VBR.

133
00:06:02,862 --> 00:06:05,064
You can actually
replace the existing VBR

134
00:06:05,064 --> 00:06:06,733
with malicious code.

135
00:06:07,867 --> 00:06:09,335
In this case Rovnix,

136
00:06:09,335 --> 00:06:13,472
and the investigation we did
as early as 2015 with BOOTRASH,

137
00:06:13,473 --> 00:06:15,908
changed and modified both
the volume boot record

138
00:06:15,908 --> 00:06:18,344
and the initial program load.

139
00:06:20,346 --> 00:06:22,615
You can replace the
BIOS parameter block.

140
00:06:22,615 --> 00:06:25,184
So there are a series of values
in the BIOS parameter block

141
00:06:25,184 --> 00:06:27,620
that control where
it loads code from.

142
00:06:27,620 --> 00:06:29,722
So, you can change any
one of those values,

143
00:06:29,722 --> 00:06:31,556
and the system will
actually load code

144
00:06:31,557 --> 00:06:33,793
from that different offset.

145
00:06:34,827 --> 00:06:36,162
So, GapZ does this by,

146
00:06:36,162 --> 00:06:38,798
there's a field called
the HiddenSectors value,

147
00:06:38,798 --> 00:06:40,299
and you can change it.

148
00:06:40,299 --> 00:06:43,369
And it basically says how far
to jump forward or backward.

149
00:06:43,369 --> 00:06:44,837
So, by modifying that,

150
00:06:44,837 --> 00:06:48,974
you'll have it jump to a
different location on disk.

151
00:06:48,975 --> 00:06:50,176
And then, lastly,

152
00:06:50,176 --> 00:06:51,978
you can replace the IPL
with malicious code,

153
00:06:51,978 --> 00:06:55,648
and BOOTRASH partly does
this as well as Rovnix.

154
00:06:55,648 --> 00:06:57,583
So, what can you do when
you actually then get code

155
00:06:57,583 --> 00:06:59,085
to load before the
operating system.

156
00:06:59,085 --> 00:07:00,820
Well, first you're
probably gonna wanna hook

157
00:07:00,820 --> 00:07:02,455
the IVT and IDT.

158
00:07:02,455 --> 00:07:05,390
You can modify bytes on disk.

159
00:07:05,391 --> 00:07:07,026
Like I said, you're
gonna back up

160
00:07:07,026 --> 00:07:09,162
the original master boot
record, volume boot record,

161
00:07:09,162 --> 00:07:12,198
or IPL so the operating system
can still load like normal.

162
00:07:12,198 --> 00:07:13,666
And then, often times
what they're gonna do,

163
00:07:13,666 --> 00:07:16,102
is they're gonna do some
kind of kernel modifications

164
00:07:16,102 --> 00:07:18,037
to hide their presence.

165
00:07:19,238 --> 00:07:20,706
And they can do all this
because they're running

166
00:07:20,706 --> 00:07:22,608
prior to the system
being transitioned

167
00:07:22,608 --> 00:07:26,279
from real mode to
protected mode, in memory.

168
00:07:27,480 --> 00:07:31,384
So, one walkthrough kind
of a case study of FIN1,

169
00:07:31,384 --> 00:07:32,885
which many of you...

170
00:07:32,885 --> 00:07:35,855
Who here has investigated,
do you remember Sn.exe?

171
00:07:35,855 --> 00:07:37,790
Raise your hand, anybody?

172
00:07:37,790 --> 00:07:38,691
Track data.

173
00:07:41,093 --> 00:07:44,797
These guys were very
prevalent in 2008 and 2009.

174
00:07:44,797 --> 00:07:46,199
It's actually my first case.

175
00:07:46,199 --> 00:07:48,734
I worked with Robert Wallace.

176
00:07:48,734 --> 00:07:52,572
Spent a lot of time together
in Atlanta at RBS WorldPay.

177
00:07:52,572 --> 00:07:55,441
Many of you here are
probably familiar with that.

178
00:07:55,441 --> 00:07:57,943
Spent a lot of time at
Fidelity Information Services

179
00:07:57,944 --> 00:08:00,313
in 2011, same attacker.

180
00:08:00,313 --> 00:08:02,647
So, what's interesting is
to have seen these guys go,

181
00:08:02,648 --> 00:08:05,551
from 2008, it was actually
my very first investigation,

182
00:08:05,551 --> 00:08:07,986
and in that investigation,
it was very simple.

183
00:08:07,987 --> 00:08:10,556
It was a sequel injection
attack from the outside in.

184
00:08:10,556 --> 00:08:13,693
They didn't have any backdoors,
they only used web shells.

185
00:08:13,693 --> 00:08:15,728
It was fairly simple.

186
00:08:15,728 --> 00:08:17,864
They deployed the
sniffer, Sn.exe,

187
00:08:17,864 --> 00:08:22,001
to large swaths of systems
to hoover up track data

188
00:08:22,001 --> 00:08:25,070
that was flowing
through the network.

189
00:08:28,774 --> 00:08:30,042
Pretty simple, right?

190
00:08:30,042 --> 00:08:31,544
Once you knew one
thing to look for,

191
00:08:31,544 --> 00:08:33,179
you'd for it on every other
system and you'd find it.

192
00:08:33,179 --> 00:08:37,015
So then, you see them
transition in 2011,

193
00:08:37,015 --> 00:08:39,584
to they're using
commodity backdoors.

194
00:08:39,585 --> 00:08:42,355
They're infecting dozens, or
potentially hundreds of systems

195
00:08:42,355 --> 00:08:43,623
with those backdoors.

196
00:08:43,623 --> 00:08:47,093
They're mostly poison
ivy and pretty simple.

197
00:08:47,093 --> 00:08:49,594
No real sophistication.

198
00:08:49,595 --> 00:08:51,330
And now, when we
see them in 2015,

199
00:08:51,330 --> 00:08:53,399
they're using all
custom backdoors,

200
00:08:53,399 --> 00:08:54,867
including Linxux backdoors.

201
00:08:54,867 --> 00:08:56,836
And we see them, actually,
this is the first time

202
00:08:56,836 --> 00:09:00,306
we saw them doing boot
record manipulation.

203
00:09:00,306 --> 00:09:03,209
So, it's impressive to see
how far they've come in,

204
00:09:03,209 --> 00:09:06,845
you know, seven,
eight, nine years.

205
00:09:06,846 --> 00:09:08,514
So, finding BOOTRASH.

206
00:09:08,514 --> 00:09:10,850
How'd we find it in the
first case, in 2015?

207
00:09:10,850 --> 00:09:12,785
So, we had a system that we knew

208
00:09:12,785 --> 00:09:14,754
that was beaconing
to a bad domain.

209
00:09:14,754 --> 00:09:17,323
And from analyzing the system,

210
00:09:17,323 --> 00:09:19,358
the forensic analyst was
looking at the system,

211
00:09:19,358 --> 00:09:20,626
and they were trying
to find the code

212
00:09:20,626 --> 00:09:23,129
that was responsible for
launching that backdoor.

213
00:09:23,129 --> 00:09:24,597
And they did all
the common things

214
00:09:24,597 --> 00:09:26,299
a forensic analyst would
do, they looked at services,

215
00:09:26,299 --> 00:09:29,302
they looked at run
keys, AppInit_DLLs.

216
00:09:29,302 --> 00:09:31,804
They looked at Windows scheduled
tasks, named and unnamed,

217
00:09:31,804 --> 00:09:34,206
they looked at files
and startup folders.

218
00:09:34,206 --> 00:09:35,041
Nothing.

219
00:09:36,208 --> 00:09:38,077
So they looked for some
more advanced things.

220
00:09:38,077 --> 00:09:40,980
They looked for things like WMI
event filters and consumers,

221
00:09:40,980 --> 00:09:43,215
they looked for search
order hijacking,

222
00:09:43,215 --> 00:09:45,451
they looked for
DLL side loading.

223
00:09:45,451 --> 00:09:47,086
They even looked at
the master boot record,

224
00:09:47,086 --> 00:09:49,021
because we'd seen that
in previous cases,

225
00:09:49,021 --> 00:09:51,223
where attackers, Chinese
nation state attackers,

226
00:09:51,223 --> 00:09:54,327
had overwritten and modified
the master boot record.

227
00:09:54,327 --> 00:09:56,929
So, we looked at the master
boot record on that system,

228
00:09:56,929 --> 00:09:58,531
and it checked out.

229
00:10:02,568 --> 00:10:03,836
We didn't find anything,

230
00:10:03,836 --> 00:10:06,105
and we were starting to
get a little frustrated.

231
00:10:06,105 --> 00:10:09,609
One of the good rules of
thumb from my experience is,

232
00:10:09,609 --> 00:10:13,446
if you can't find the
code or the backdoor,

233
00:10:13,446 --> 00:10:14,680
and you know a system's infected

234
00:10:14,680 --> 00:10:16,915
and you can't find how
or why it's loading.

235
00:10:16,916 --> 00:10:20,453
Those are the ones you
spend, 5, 10, 12, 20, 30

236
00:10:20,453 --> 00:10:24,256
hours on to figure out
what's causing it to load.

237
00:10:24,256 --> 00:10:26,726
In my experience at Mandiant,

238
00:10:26,726 --> 00:10:29,362
this is how we found WMI
event filters and consumers,

239
00:10:29,362 --> 00:10:30,930
this is how we found
search order hijacking,

240
00:10:30,930 --> 00:10:32,897
both first, second, tertiary,

241
00:10:32,898 --> 00:10:34,433
this is how we found
DLL side loading,

242
00:10:34,433 --> 00:10:36,068
and this is how we found
legitimate file patching.

243
00:10:36,068 --> 00:10:37,703
In each and every case, we
had some other indication

244
00:10:37,703 --> 00:10:39,738
the attacker was
active on the system,

245
00:10:39,739 --> 00:10:41,674
or it's infected, but we
couldn't figure out why.

246
00:10:41,674 --> 00:10:45,111
And we had analysts spend
the time to really dive deep

247
00:10:45,111 --> 00:10:47,480
and figure out what happened.

248
00:10:47,480 --> 00:10:50,449
And so that's what happened
in this particular case.

249
00:10:50,449 --> 00:10:52,852
So, we performed memory
analysis of the system,

250
00:10:52,852 --> 00:10:54,420
and we knew that there
were two processes

251
00:10:54,420 --> 00:10:58,024
that were injected into,
wininet and svchost.

252
00:10:58,024 --> 00:11:00,092
After exhausting, you know,

253
00:11:00,092 --> 00:11:01,560
I'd probably already
spent about eight hours

254
00:11:01,560 --> 00:11:03,194
looking at this one system,

255
00:11:03,195 --> 00:11:04,397
looking at every possible angle

256
00:11:04,397 --> 00:11:06,032
of what it could potentially be.

257
00:11:06,032 --> 00:11:07,867
So, I just started, you know...

258
00:11:07,867 --> 00:11:09,435
I acquired the
process address space

259
00:11:09,435 --> 00:11:11,704
of both wininet and svchost,

260
00:11:11,704 --> 00:11:14,573
and I started just going
through the strings manually,

261
00:11:14,573 --> 00:11:17,877
because that's how
desperate I was.

262
00:11:17,877 --> 00:11:21,881
I got lucky, and I
found this, basically,

263
00:11:21,881 --> 00:11:24,884
help menu of the
attackers backdoor.

264
00:11:26,218 --> 00:11:28,688
They called it nemesis.

265
00:11:28,688 --> 00:11:30,356
Now we can see that.

266
00:11:30,356 --> 00:11:34,527
And there were a
bunch of strings that
are referenced here.

267
00:11:38,330 --> 00:11:40,733
VBR, and VFS, and all
these other terms,

268
00:11:40,733 --> 00:11:43,868
and who knows what
those things are?

269
00:11:43,869 --> 00:11:45,671
I ask a colleague of
mine, John Liberty,

270
00:11:45,671 --> 00:11:49,375
I said, "Hey, take a
look at this help page.

271
00:11:49,375 --> 00:11:53,546
"See if you can give me any
hints, or tips, or tricks

272
00:11:53,546 --> 00:11:55,147
"in terms of what you
think it might be."

273
00:11:55,147 --> 00:11:57,083
He's like, "Oh, VBR, is that
the volume boot record?"

274
00:11:57,083 --> 00:11:59,318
I was like, "Oh, we'd looked
at the master boot record,

275
00:11:59,318 --> 00:12:03,089
"but I don't know all the
underlying guts and internals

276
00:12:03,089 --> 00:12:04,323
"of how this stuff works."

277
00:12:04,323 --> 00:12:06,192
So, I was like,
"Maybe that's it."

278
00:12:06,192 --> 00:12:08,427
So we had a hypothesis.

279
00:12:08,427 --> 00:12:11,297
Okay, well maybe it's a
volume boot record bootkit.

280
00:12:11,297 --> 00:12:12,832
Great, now what?

281
00:12:12,832 --> 00:12:14,366
How do I do that, right?

282
00:12:14,366 --> 00:12:15,901
So, I had to do a
bunch of research

283
00:12:15,901 --> 00:12:17,636
and figure out
where is it on disk,

284
00:12:17,636 --> 00:12:20,406
how do I get to it,
how do I find it,

285
00:12:20,406 --> 00:12:24,075
how do I actually
acquire, how is it set up?

286
00:12:25,478 --> 00:12:28,113
So, I used RedLine to basically
do a disk and volume listing

287
00:12:28,114 --> 00:12:31,350
to get the drive
geometry and offsets

288
00:12:31,350 --> 00:12:34,587
to know where to
acquire the data from.

289
00:12:35,988 --> 00:12:39,225
You'll see the PhysicalDrive0
and slash-slash-backslash

290
00:12:39,225 --> 00:12:41,594
from before from the
very first slides.

291
00:12:41,594 --> 00:12:43,429
The offset's depending
on the drive geometry,

292
00:12:43,429 --> 00:12:45,197
and then the size.

293
00:12:45,197 --> 00:12:47,233
So, if I wanna grab
the volume boot record,

294
00:12:47,233 --> 00:12:49,167
I'm gonna acquire 512 bytes.

295
00:12:49,168 --> 00:12:51,871
Or, if I wanna include
the initial program load,

296
00:12:51,871 --> 00:12:56,040
you get 16 times 512 to get
that whole block of data.

297
00:12:58,844 --> 00:13:00,846
So, that's how we actually
acquired the volume boot record

298
00:13:00,846 --> 00:13:03,449
from this particular system.

299
00:13:03,449 --> 00:13:07,786
And at that point, I was
beyond my level of skillset.

300
00:13:07,787 --> 00:13:10,489
I can triage, and look at files,

301
00:13:12,291 --> 00:13:15,594
and know generally what
they do, if it's a backdoor.

302
00:13:15,594 --> 00:13:17,429
But you need a real
malware analyst

303
00:13:17,429 --> 00:13:19,131
to do full reversing of that.

304
00:13:19,131 --> 00:13:22,134
So, shout-out to
Willi Ballenthin,

305
00:13:22,134 --> 00:13:23,602
I kicked it over
to him and said,

306
00:13:23,602 --> 00:13:25,704
"Hey, I think this is a
volume boot record bootkit.

307
00:13:25,704 --> 00:13:27,205
"I have no idea how they work.

308
00:13:27,206 --> 00:13:30,643
"I think this is the VBR, can
you validate that for me?"

309
00:13:30,643 --> 00:13:32,311
And help, basically.

310
00:13:33,746 --> 00:13:36,816
So, he went and analyzed it,
and came back the next day

311
00:13:36,816 --> 00:13:40,986
and was like, "Yep, you found
it, it's a VBR bootkit."

312
00:13:42,788 --> 00:13:45,758
He then told me, "Okay,
well based on this,

313
00:13:45,758 --> 00:13:48,227
"I Need you to go get
data from this offset,

314
00:13:48,227 --> 00:13:50,095
"and this location,
and this size."

315
00:13:50,095 --> 00:13:53,566
Because BOOTRASH actually
stored its components

316
00:13:53,566 --> 00:13:55,734
in an allocated space.

317
00:13:55,734 --> 00:13:57,303
So, I acquire all of
the different components

318
00:13:57,303 --> 00:13:58,571
and we put that together,

319
00:13:58,571 --> 00:13:59,538
and that's how we
got the full picture

320
00:13:59,538 --> 00:14:00,973
of how the malware operated,

321
00:14:00,973 --> 00:14:03,943
because when you have a bootkit
that modifies the MBR/VBR,

322
00:14:03,943 --> 00:14:05,845
it's not enough code
space for you have

323
00:14:05,845 --> 00:14:09,014
all of the functionality
in that 512 bytes.

324
00:14:09,014 --> 00:14:10,516
So, oftentimes what they'll do,

325
00:14:10,516 --> 00:14:12,418
is they'll have bytes that
are sitting somewhere else.

326
00:14:12,418 --> 00:14:16,589
All that the bootkit does is
load code from somewhere else.

327
00:14:18,891 --> 00:14:20,425
So, how does BOOTRASH work?

328
00:14:20,426 --> 00:14:23,095
So, the BIOS loads the
master boot record.

329
00:14:23,095 --> 00:14:25,331
The legitimate
master boot record

330
00:14:25,331 --> 00:14:27,700
loads the malicious
volume boot record.

331
00:14:27,700 --> 00:14:29,101
The volume boot
record then loads

332
00:14:29,101 --> 00:14:31,003
the various components it needs

333
00:14:31,003 --> 00:14:33,639
in a virtual file system
that's custom to it.

334
00:14:33,639 --> 00:14:35,107
And they can either
store them in

335
00:14:35,107 --> 00:14:38,843
an allocated space on
disk, or in the registry.

336
00:14:38,844 --> 00:14:42,081
The malicious VBR and
IPL then load a copy

337
00:14:42,081 --> 00:14:45,818
of the legitimate VBR,
and the legitimate VBR

338
00:14:45,818 --> 00:14:49,755
then loads the legitimate
initial program load.

339
00:14:50,656 --> 00:14:52,324
BOOTRASH then patches the IVT,

340
00:14:52,324 --> 00:14:53,692
or the interrupt vector table,

341
00:14:53,692 --> 00:14:55,294
so that it can
intercept memory queries

342
00:14:55,294 --> 00:14:58,063
when the OS loader
gains control.

343
00:14:58,931 --> 00:15:00,399
And then it patches the IDT,

344
00:15:00,399 --> 00:15:02,434
so that when it changes
from real to protected mode,

345
00:15:02,434 --> 00:15:03,868
it redirects control
back to the bootkit

346
00:15:03,869 --> 00:15:07,539
every time that a specific
address is executed.

347
00:15:07,539 --> 00:15:10,576
This way, it can then
intercept OS calls,

348
00:15:10,576 --> 00:15:14,747
and inject its components as
part of the normal kernel load.

349
00:15:15,881 --> 00:15:17,149
So, some pretty advanced stuff

350
00:15:17,149 --> 00:15:18,517
for you to be able to
actually execute that,

351
00:15:18,517 --> 00:15:21,921
and this is all from a
financial threat actor.

352
00:15:21,921 --> 00:15:24,423
So, looking at this one system,

353
00:15:24,423 --> 00:15:27,526
it took us probably
20 hours worth of time

354
00:15:27,526 --> 00:15:30,161
to identify that it
was a VBR boot kit,

355
00:15:30,162 --> 00:15:32,765
identify the functionality.

356
00:15:32,765 --> 00:15:35,434
We then needed to find, okay,
well where else is this?

357
00:15:35,434 --> 00:15:37,903
At the time, we didn't
have tools in place

358
00:15:37,903 --> 00:15:40,940
to actually parse out
any of the MBR/VBR data,

359
00:15:40,940 --> 00:15:42,708
all of those data
structures we talked about.

360
00:15:42,708 --> 00:15:45,978
So, because we knew that the
attacker was actually storing

361
00:15:45,978 --> 00:15:49,348
the legitimate VBR
at a specific offset,

362
00:15:49,348 --> 00:15:52,117
we basically acquired
every 512 bytes from

363
00:15:52,117 --> 00:15:53,886
that specific offset
on every system across

364
00:15:53,886 --> 00:15:56,421
the environment, and then
looked for the original VBR.

365
00:15:56,422 --> 00:15:58,557
And if we found it, we knew
that system was infected.

366
00:15:58,557 --> 00:15:59,992
So, it worked, and
allowed us to scale

367
00:15:59,992 --> 00:16:01,593
that particular investigation,

368
00:16:01,593 --> 00:16:04,930
but it's very specific
to that backdoor.

369
00:16:06,765 --> 00:16:08,199
So, if the attacker
changed anything

370
00:16:08,200 --> 00:16:12,538
or had a different variant,
we may have missed it.

371
00:16:12,538 --> 00:16:15,908
We then spent time,
starting in 2015,

372
00:16:15,908 --> 00:16:17,876
I said, "Okay, well how can
we generically identify this?"

373
00:16:17,876 --> 00:16:22,680
So, updating our tool kit
so that they can parse out

374
00:16:22,681 --> 00:16:27,353
the partition tables, hash
the code section of the MBR,

375
00:16:27,353 --> 00:16:30,021
hash the code
section of the VBR,

376
00:16:30,022 --> 00:16:31,490
return all of the
different values

377
00:16:31,490 --> 00:16:32,958
from past parameter blocks
so we can stack them,

378
00:16:32,958 --> 00:16:35,026
and look at them,
and scale them.

379
00:16:35,027 --> 00:16:36,428
So, we had the investigation.

380
00:16:36,428 --> 00:16:37,863
So, the very first
one with BOOTRASH

381
00:16:37,863 --> 00:16:40,232
that we saw was in 2015.

382
00:16:40,232 --> 00:16:43,569
We then saw them again
December of 2016.

383
00:16:45,771 --> 00:16:49,074
So, we went from
really huge man hours

384
00:16:49,074 --> 00:16:52,044
of having to identify
and analyze this,

385
00:16:52,044 --> 00:16:54,813
to we knew that FIN1 was there.

386
00:16:54,813 --> 00:16:57,316
And as soon as we knew
they were there, we found,

387
00:16:57,316 --> 00:16:59,418
it was like a Saturday
morning, it was like 10 a.m.

388
00:16:59,418 --> 00:17:00,953
I was talking with Robert
Wallace on the phone,

389
00:17:00,953 --> 00:17:03,088
I was like, "All right,
we're gonna run this tool,

390
00:17:03,088 --> 00:17:04,623
"we're gonna collect
all of this data."

391
00:17:04,623 --> 00:17:08,293
And in about 30 minutes, we
found two infected systems.

392
00:17:08,292 --> 00:17:11,062
It was pretty cool seeing
how you can go from

393
00:17:11,063 --> 00:17:12,965
not having any generic
techniques and you need to spend

394
00:17:12,964 --> 00:17:15,434
a lot of time, to now with the
right tools and visibility,

395
00:17:15,434 --> 00:17:17,235
you can actually then, at scale,

396
00:17:17,236 --> 00:17:19,671
find deviations from the norm

397
00:17:21,940 --> 00:17:24,676
and confirm they're
an actual bootkit.

398
00:17:24,675 --> 00:17:27,846
In 2016, this was
at a financial firm.

399
00:17:31,150 --> 00:17:35,320
In this case, FIN1 was
targeting track data from ATMs.

400
00:17:37,656 --> 00:17:40,759
So, pretty consistent
thing for them.

401
00:17:42,027 --> 00:17:44,096
So, using these at scale.

402
00:17:45,631 --> 00:17:50,602
All of these results are from
running on 260,000 systems,

403
00:17:50,602 --> 00:17:53,372
where we basically parsed
all these fields out

404
00:17:53,372 --> 00:17:54,573
and returned that back,

405
00:17:54,573 --> 00:17:57,276
and then kind of stacked
it and reviewed it.

406
00:17:57,276 --> 00:17:58,710
One of these things to note is,

407
00:17:58,710 --> 00:18:00,379
hashing the master
boot record by itself

408
00:18:00,379 --> 00:18:02,414
to the 512 bytes of code,

409
00:18:02,414 --> 00:18:03,949
isn't gonna compress
down very well

410
00:18:03,949 --> 00:18:05,717
in terms of frequency
of occurrence,

411
00:18:05,717 --> 00:18:06,985
because there's some
timestamps that are in there

412
00:18:06,985 --> 00:18:08,654
at specific offsets.

413
00:18:10,422 --> 00:18:12,691
What we learned, was
the way to do this is

414
00:18:12,691 --> 00:18:15,194
you actually only want
to hash the code section

415
00:18:15,194 --> 00:18:16,595
of the master boot record.

416
00:18:16,595 --> 00:18:19,465
So, you basically wanna
combine starting at offset 218,

417
00:18:19,465 --> 00:18:21,066
and then 224 to 416.

418
00:18:21,066 --> 00:18:23,268
If you combine and
basically cat those together

419
00:18:23,268 --> 00:18:27,506
and create a hash of it,
it'll fold down fairly well.

420
00:18:27,506 --> 00:18:31,677
So on 265,000 systems, it
uniques down to about 6,663.

421
00:18:34,046 --> 00:18:36,048
Not as good as I'd like.

422
00:18:37,082 --> 00:18:38,484
Going and reviewing in these,

423
00:18:38,484 --> 00:18:40,686
because they're 16-bit code,

424
00:18:40,686 --> 00:18:42,987
and reversing them, it takes
quite a bit of time and effort.

425
00:18:42,988 --> 00:18:46,325
So it's not something that's
gonna scale really well.

426
00:18:46,325 --> 00:18:47,926
It works, just not, you know,

427
00:18:47,926 --> 00:18:49,394
it's gonna take a lot of effort.

428
00:18:49,394 --> 00:18:52,531
So why did we have
more than 6,000 hashes?

429
00:18:52,531 --> 00:18:54,666
Lots of different
legitimate applications

430
00:18:54,666 --> 00:18:56,033
modify the master boot record.

431
00:18:56,034 --> 00:18:59,471
If you have PGP, or
Altiris, or SafeBoot,

432
00:19:00,873 --> 00:19:03,542
or anything that does hard
disk level encryption,

433
00:19:03,542 --> 00:19:05,209
it's modifying that because
it's actually loading

434
00:19:05,210 --> 00:19:06,445
before the operating system.

435
00:19:06,445 --> 00:19:07,678
The only way you
can do that is by

436
00:19:07,679 --> 00:19:09,781
modifying the MBR, or
VBR, or something else.

437
00:19:09,781 --> 00:19:12,684
And the most common way
is to modify the MBR,

438
00:19:12,684 --> 00:19:15,287
and you load initially, and
that's how you actually then

439
00:19:15,287 --> 00:19:19,158
decrypt and open the
operating system.

440
00:19:19,158 --> 00:19:20,591
And if you think about it,

441
00:19:20,592 --> 00:19:23,529
let's say you take one version
of encryption software,

442
00:19:23,529 --> 00:19:25,697
there's probably then
multiple variants of that,

443
00:19:25,697 --> 00:19:27,765
and then multiple
variants per OS.

444
00:19:27,766 --> 00:19:29,034
So, pretty quickly
you're going to have

445
00:19:29,034 --> 00:19:32,037
a fairly large number of MBRs.

446
00:19:32,037 --> 00:19:33,539
The other thing is you
also have lot's of, like,

447
00:19:33,539 --> 00:19:35,941
really tiny, minor variations.

448
00:19:35,941 --> 00:19:37,442
So, you may have
a JMP instruction.

449
00:19:37,442 --> 00:19:41,246
In one MBR, it has a very
small, different length.

450
00:19:42,414 --> 00:19:44,081
Or you may have strings
where they just change

451
00:19:44,082 --> 00:19:48,053
the capitalization
for whatever reason.

452
00:19:48,053 --> 00:19:51,156
We've found copies of
MBR backup utilities

453
00:19:51,156 --> 00:19:52,691
where it sorts
multiple copies of it,

454
00:19:52,691 --> 00:19:55,494
that way if your
MBR gets infected

455
00:19:55,494 --> 00:19:57,029
through a bootkit
or something else,

456
00:19:57,029 --> 00:20:00,699
they can basically
recover and get you back.

457
00:20:01,900 --> 00:20:03,302
So, thing that we're
exploring right now,

458
00:20:03,302 --> 00:20:04,870
or trying to improve on this,

459
00:20:04,870 --> 00:20:07,472
is we're looking to see if
we can use hamming distance

460
00:20:07,472 --> 00:20:10,576
to calculate and find
useful variations.

461
00:20:10,576 --> 00:20:13,111
We're looking to see if we can
extend tools like vivisect,

462
00:20:13,111 --> 00:20:15,113
which do emulation.

463
00:20:15,113 --> 00:20:17,583
But right now we're focused
on 32-bit and 64-bit,

464
00:20:17,583 --> 00:20:20,085
seeing if we can extend
them to 16-bit code.

465
00:20:20,085 --> 00:20:21,553
And that way, if you think about

466
00:20:21,553 --> 00:20:25,390
a legitimate master boot
record or volume boot record,

467
00:20:25,390 --> 00:20:27,526
the code section of it is gonna
be pretty straight forward.

468
00:20:27,526 --> 00:20:28,794
It's gonna load,

469
00:20:28,794 --> 00:20:30,128
and it's basically gonna
run straight through it.

470
00:20:30,128 --> 00:20:31,362
Whereas, most attackers,

471
00:20:31,363 --> 00:20:33,632
when they're gonna
load their own code,

472
00:20:33,632 --> 00:20:35,067
they're probably gonna
have some sort of, like,

473
00:20:35,067 --> 00:20:36,768
XOR decoding routine,
which is gonna have

474
00:20:36,768 --> 00:20:38,470
lots of looping type functions.

475
00:20:38,470 --> 00:20:40,472
And those things aren't normal.

476
00:20:40,472 --> 00:20:43,141
So if you can do emulation
and find that kind of loops,

477
00:20:43,141 --> 00:20:44,977
or structures, or hooking,

478
00:20:44,977 --> 00:20:48,313
or other instruction
frequency that are uncommon,

479
00:20:48,313 --> 00:20:49,781
we think that we might
be able to use that

480
00:20:49,781 --> 00:20:52,317
to more generically find
malicious master boot records

481
00:20:52,317 --> 00:20:53,285
that scale.

482
00:20:53,285 --> 00:20:54,653
Some we're actively looking at,

483
00:20:54,653 --> 00:20:57,155
but we're not quite there yet.

484
00:21:00,092 --> 00:21:00,859
The VBR.

485
00:21:01,960 --> 00:21:03,862
The VBR actually stacks
down much better.

486
00:21:03,862 --> 00:21:06,498
So if you take the code section
of the volume boot record,

487
00:21:06,498 --> 00:21:07,866
you hash that.

488
00:21:07,866 --> 00:21:09,568
There aren't the
variations like there are

489
00:21:09,568 --> 00:21:11,737
in the master boot record,

490
00:21:13,171 --> 00:21:14,573
and it stacks
actually quite well.

491
00:21:14,573 --> 00:21:17,009
So across the 365,000 systems,

492
00:21:17,009 --> 00:21:20,012
you see here that you have

493
00:21:20,012 --> 00:21:21,280
the vast majority of them, like,

494
00:21:21,280 --> 00:21:23,915
just these hashes here,
that's the frequency.

495
00:21:23,915 --> 00:21:25,050
So, you can see on a chart

496
00:21:25,050 --> 00:21:27,786
where the vast
majority of them fit.

497
00:21:27,786 --> 00:21:28,987
So if you find an outlier

498
00:21:28,987 --> 00:21:31,356
that's not one of these
six or seven listed,

499
00:21:31,356 --> 00:21:33,358
it's probably something
you should look into.

500
00:21:33,358 --> 00:21:34,726
And the bulk of this tail,

501
00:21:34,726 --> 00:21:36,862
I don't know what
the application is,

502
00:21:36,862 --> 00:21:38,230
but if you look at
the strings of it,

503
00:21:38,230 --> 00:21:40,799
it actually has,
like, M, as in mike,

504
00:21:40,799 --> 00:21:42,434
protect exclamation point.

505
00:21:42,434 --> 00:21:45,470
And that accounts for,
like, 80% of that tail.

506
00:21:45,470 --> 00:21:47,039
So it's actually pretty
easy to identify,

507
00:21:47,039 --> 00:21:50,309
and you can do reasonably
at scale across enterprise,

508
00:21:50,309 --> 00:21:53,645
even say 20,000,
30,000, 40,000 systems.

509
00:21:55,147 --> 00:21:57,683
So, if you take the metadata
in the BIOS parameter block,

510
00:21:57,683 --> 00:22:01,119
say the HiddenSector's
value, the IPL offset.

511
00:22:01,119 --> 00:22:03,988
You get a similar grouping,

512
00:22:03,989 --> 00:22:06,158
where you have a really
high number of...

513
00:22:06,158 --> 00:22:07,859
A couple of these
you need values.

514
00:22:07,859 --> 00:22:11,362
63/2048/81920, they're
all the most common ones,

515
00:22:11,363 --> 00:22:13,398
and then we're at
the really long tail

516
00:22:13,398 --> 00:22:15,100
depending on the
disk partitions.

517
00:22:15,100 --> 00:22:17,569
And something that's realistic
for you to go through,

518
00:22:17,569 --> 00:22:20,639
more manually than, say,
the master boot record,

519
00:22:20,639 --> 00:22:23,475
based on how that
calculated down.

520
00:22:26,478 --> 00:22:27,979
One of the values in
the BIOS parameter block

521
00:22:27,979 --> 00:22:29,881
is called the JMP instruction.

522
00:22:29,881 --> 00:22:32,217
On 99.99999% of systems,

523
00:22:32,217 --> 00:22:35,053
it's gonna be just
this one value,

524
00:22:36,521 --> 00:22:37,356
EB5290.

525
00:22:39,825 --> 00:22:42,461
And then all of the
other possible values,

526
00:22:42,461 --> 00:22:43,995
things like the partition table,

527
00:22:43,995 --> 00:22:46,630
and all of these others
basically stacked
to one single one.

528
00:22:46,631 --> 00:22:49,267
So, it's really easy to
find deviations from that,

529
00:22:49,267 --> 00:22:51,103
because they don't
happen very often.

530
00:22:51,103 --> 00:22:53,939
So, we'll add one
more thing here.

531
00:22:54,840 --> 00:22:56,207
So, we were looking at,

532
00:22:56,208 --> 00:22:58,744
this is basically a
page from Microsoft,

533
00:22:58,744 --> 00:23:00,478
and we were looking
at, you know,

534
00:23:00,479 --> 00:23:02,814
they basically describe
what the MBR and VBR is,

535
00:23:02,814 --> 00:23:04,683
and then all the
different offsets,

536
00:23:04,683 --> 00:23:06,918
and the field length,
and then the name.

537
00:23:06,918 --> 00:23:09,487
And what we noticed was,

538
00:23:09,488 --> 00:23:11,590
so if you see GapZ
actually modifies

539
00:23:11,590 --> 00:23:15,427
the HiddenSectors value,
which is right there.

540
00:23:17,229 --> 00:23:19,765
And that changes where
you redirect the MBR

541
00:23:19,765 --> 00:23:21,266
to load code from.

542
00:23:22,834 --> 00:23:24,069
But there were three,

543
00:23:24,069 --> 00:23:27,873
actually for or five
different null values,

544
00:23:27,873 --> 00:23:30,308
that were either not used
by NTFS or were zero,

545
00:23:30,308 --> 00:23:33,945
and there really wasn't
much documentation on them.

546
00:23:33,945 --> 00:23:36,181
So, what we found was all
of these are left over

547
00:23:36,181 --> 00:23:40,352
from the FAT file system,
and the structures there,

548
00:23:42,687 --> 00:23:45,490
the disk just kind
of ignores them.

549
00:23:45,490 --> 00:23:46,958
But what happens if
you enter a value?

550
00:23:46,958 --> 00:23:48,293
So, what we wanted to see was,

551
00:23:48,293 --> 00:23:51,495
if you actually change
and add some code here,

552
00:23:51,496 --> 00:23:54,299
can you actually get
control flow execution

553
00:23:54,299 --> 00:23:57,335
similar to modifying
the HiddenSectors value?

554
00:23:57,335 --> 00:23:58,937
And what we found is,

555
00:23:58,937 --> 00:24:02,474
you actually can get
code to load maliciously

556
00:24:02,474 --> 00:24:04,609
if you change the
number of FAT copies,

557
00:24:04,609 --> 00:24:07,712
which basically changes
the number of read sectors

558
00:24:07,712 --> 00:24:09,915
to read further into
the disk than it should.

559
00:24:09,915 --> 00:24:11,416
If you change the root
directory entries,

560
00:24:11,416 --> 00:24:13,819
which is basically
the same as above,

561
00:24:13,819 --> 00:24:16,888
it reads sectors
further than the disk,

562
00:24:16,888 --> 00:24:18,356
and then sectors per FAT.

563
00:24:18,356 --> 00:24:19,524
Basically, you can cause the VBR

564
00:24:19,524 --> 00:24:21,892
to read more than one sector.

565
00:24:21,893 --> 00:24:23,995
So, instead of just reading
the first 15 sectors

566
00:24:23,995 --> 00:24:25,464
for the initial program load,

567
00:24:25,464 --> 00:24:27,399
you get it to load the
first 20, or the first 50,

568
00:24:27,399 --> 00:24:29,668
or however many you wanted.

569
00:24:30,869 --> 00:24:32,404
So, that was kind of
unique to, you know,

570
00:24:32,404 --> 00:24:33,572
there are other things out there

571
00:24:33,572 --> 00:24:35,674
from other legacy file systems

572
00:24:35,674 --> 00:24:38,810
that they wanted to
be compatible with.

573
00:24:38,810 --> 00:24:40,245
And do you wanna
look at the slide,

574
00:24:40,245 --> 00:24:41,446
that's what it looks like

575
00:24:41,446 --> 00:24:44,014
if you actually
change those values

576
00:24:44,015 --> 00:24:47,085
(intense drum music)

