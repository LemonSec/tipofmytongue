1
00:00:09,409 --> 00:00:12,879
(audience applauding)

2
00:00:12,879 --> 00:00:16,549
- So we are Austin Baker
and Jacob Christie.

3
00:00:16,549 --> 00:00:19,119
I used to work in desktop
support, came from a kind of

4
00:00:19,119 --> 00:00:21,054
sysadmin background,

5
00:00:21,054 --> 00:00:23,823
eventually sold out
became a consultant,

6
00:00:23,823 --> 00:00:27,093
now I forensicate doing
that, and I'm a great patron

7
00:00:27,093 --> 00:00:31,031
of the coffee arts and I'm
sure many of you all are.

8
00:00:31,031 --> 00:00:33,699
And if anybody else in
the crowd has a boxer dog

9
00:00:33,700 --> 00:00:38,104
then you're my new best
friend, sorry Matt, I tried.

10
00:00:38,104 --> 00:00:40,673
- And I am Austin Baker, I'm
sure most of you don't know

11
00:00:40,673 --> 00:00:43,410
who I am, but that's okay,
hopefully I'll get to know you.

12
00:00:43,410 --> 00:00:46,346
So I originally started
out, about four years ago,

13
00:00:46,346 --> 00:00:48,348
doing forensics and
incident response.

14
00:00:48,348 --> 00:00:50,650
And I learned from actually
a lot of people here,

15
00:00:50,650 --> 00:00:53,053
a lot of great
resources, learned a lot.

16
00:00:53,053 --> 00:00:56,122
I slowly started moving
into the pen testing

17
00:00:56,122 --> 00:00:58,425
red teaming side, that's
primarily where I spend

18
00:00:58,425 --> 00:01:00,794
most of my time, but I still
have a very deep passion

19
00:01:00,794 --> 00:01:03,430
for forensics and in fact
most of my red teaming is

20
00:01:03,430 --> 00:01:07,534
very forensically driven these
days, so hopefully we can

21
00:01:07,534 --> 00:01:09,035
combine that together.

22
00:01:09,035 --> 00:01:10,303
And this is a picture of my
cat, because I'm a little bit

23
00:01:10,303 --> 00:01:13,073
more of a cat person
than a boxer person.

24
00:01:13,073 --> 00:01:16,609
Thank you, thank you, a
beautiful cat picture.

25
00:01:16,609 --> 00:01:19,079
- [Jacob] Good, so
let's get into it.

26
00:01:19,079 --> 00:01:21,146
This is sorta the agenda,
we're not gonna bore you by

27
00:01:21,147 --> 00:01:22,782
walking through each of
these bullet points because

28
00:01:22,782 --> 00:01:26,953
we're going to actually
walk through them as we go

29
00:01:28,621 --> 00:01:31,024
but we thought we'd start
off with this little nugget.

30
00:01:31,024 --> 00:01:33,059
- So everyone's had that
experience, where you sit

31
00:01:33,059 --> 00:01:36,062
down and you're like
okay time to forensicate,

32
00:01:36,062 --> 00:01:37,262
then you look and
you see there's only

33
00:01:37,263 --> 00:01:40,733
one event log left
on the system.

34
00:01:40,733 --> 00:01:41,701
- [Jacob] It's a
wonderful feeling.

35
00:01:41,701 --> 00:01:44,104
- Yeah it is, it's great.

36
00:01:44,104 --> 00:01:46,272
- So event logs, they're great,

37
00:01:46,272 --> 00:01:48,508
we've extolled their
virtues for years.

38
00:01:48,508 --> 00:01:50,009
What are they used for?

39
00:01:50,009 --> 00:01:53,680
Well we can find log in,
log out, connecting to your

40
00:01:53,680 --> 00:01:57,851
network share remote desktop,
all kinds of fun stuff,

41
00:01:57,851 --> 00:02:00,286
process created as I
think they're eluding to

42
00:02:00,286 --> 00:02:04,757
in the earlier talk, service
installations, start stop,

43
00:02:04,757 --> 00:02:06,893
great stuff, and if
you're really really cool

44
00:02:06,893 --> 00:02:09,262
there's even PowerShell login.

45
00:02:09,262 --> 00:02:11,764
- Turns out logs are
really great resources.

46
00:02:11,764 --> 00:02:14,300
The only issue with logs,
and there are some other

47
00:02:14,300 --> 00:02:16,769
artefacts as well, but the
primary issue with logs

48
00:02:16,769 --> 00:02:19,606
in my opinion is, because
they're so powerful

49
00:02:19,606 --> 00:02:21,541
and because they're so
explicit about the activity

50
00:02:21,541 --> 00:02:23,877
that they track, you
don't have to do a lot of

51
00:02:23,877 --> 00:02:26,579
interpreting for some
of these log sources,

52
00:02:26,579 --> 00:02:29,582
we tend to take
them at face value.

53
00:02:29,582 --> 00:02:31,684
Most people when they
look at event logs,

54
00:02:31,684 --> 00:02:34,087
parse them and put
them into a timeline,

55
00:02:34,087 --> 00:02:35,588
they don't think to themselves,

56
00:02:35,588 --> 00:02:39,091
well how I trust that the
event ID that's part of this

57
00:02:39,092 --> 00:02:41,694
is actually correct, how
do I trust that the user

58
00:02:41,694 --> 00:02:43,296
that's said to have logged in

59
00:02:43,296 --> 00:02:44,831
is actually the user that did?

60
00:02:44,831 --> 00:02:48,400
And it's a little bit of a
dilemma because typically

61
00:02:48,401 --> 00:02:50,637
you know they system's been
compromised where the system

62
00:02:50,637 --> 00:02:53,840
was operated by a malicious
user, yet the forensic

63
00:02:53,840 --> 00:02:56,109
artefacts that
belong to the system,

64
00:02:56,109 --> 00:02:58,511
belong to the person
who compromised it,

65
00:02:58,511 --> 00:03:01,347
they have the ability to
mess around with or alter

66
00:03:01,347 --> 00:03:03,149
those forensic artefacts
and we already have several

67
00:03:03,149 --> 00:03:05,885
great examples of
file system artefacts.

68
00:03:05,885 --> 00:03:07,387
There was a great
presentation last year at this

69
00:03:07,387 --> 00:03:09,622
very conference about all
the different ways that

70
00:03:09,622 --> 00:03:11,224
someone can try to
hide the fact that

71
00:03:11,224 --> 00:03:13,993
a file was on a system from you.

72
00:03:13,993 --> 00:03:16,162
But not a lot of people
talk about event logs,

73
00:03:16,162 --> 00:03:19,265
which is unfortunate, but
hopefully we can talk, start

74
00:03:19,265 --> 00:03:22,000
that conversation today because
they are a great resource

75
00:03:22,001 --> 00:03:24,170
but you want to have
some degree of caution

76
00:03:24,170 --> 00:03:27,406
about using them without
interrogating the validity

77
00:03:27,407 --> 00:03:29,676
of the event logs as
well as tracking attacks

78
00:03:29,676 --> 00:03:32,612
against the integrity
of those event logs,

79
00:03:32,612 --> 00:03:34,948
either by removing
them or altering them.

80
00:03:34,948 --> 00:03:36,716
- I think it's somehow like
event logs are the least

81
00:03:36,716 --> 00:03:38,585
sexy anti-forensic technique.

82
00:03:38,585 --> 00:03:40,820
- [Austin] Basically, yeah.

83
00:03:41,955 --> 00:03:43,923
- So given that,
why should we care?

84
00:03:43,923 --> 00:03:47,227
So we have evidence that
advance threat hackers

85
00:03:47,227 --> 00:03:50,430
have used all kinds of
levels of clearing event logs

86
00:03:50,430 --> 00:03:52,732
from the very basic level
to start with up to the

87
00:03:52,732 --> 00:03:55,535
very complicated
that we'll get into,

88
00:03:55,535 --> 00:03:57,470
in order to sort of
manipulate the trace

89
00:03:57,470 --> 00:03:59,505
that they were there
in the first place.

90
00:03:59,505 --> 00:04:01,507
There are also now
publicly available tools

91
00:04:01,507 --> 00:04:03,643
that have sort of come to light

92
00:04:03,643 --> 00:04:07,280
that show how to remove
or alter these event logs.

93
00:04:07,280 --> 00:04:10,617
And addressing these and
sort of looking through

94
00:04:10,617 --> 00:04:12,918
your environment and seeing
where this might happen,

95
00:04:12,919 --> 00:04:15,188
might cue you in as to
other things that might be

96
00:04:15,188 --> 00:04:17,724
going on that you otherwise
might not have known about.

97
00:04:17,724 --> 00:04:19,259
- Right.

98
00:04:19,259 --> 00:04:23,496
So hopefully by the end of
this talk, our goal is to

99
00:04:23,496 --> 00:04:27,133
establish the different
techniques that both red teams,

100
00:04:27,133 --> 00:04:30,270
in some special cases
and attackers have
actually been seen

101
00:04:30,270 --> 00:04:34,539
using to manipulate or
hide event logs from you,

102
00:04:34,540 --> 00:04:37,243
the forensicator,
determine if there are any

103
00:04:37,243 --> 00:04:39,445
forensic artefacts that
might be recovered that

104
00:04:39,445 --> 00:04:41,914
tips you off to the
fact that that occurred

105
00:04:41,914 --> 00:04:45,183
and discuss larger
scale recommendations,

106
00:04:45,184 --> 00:04:48,154
more strategic recommendations,
to ensure that the sources

107
00:04:48,154 --> 00:04:51,024
of information you're pulling
and your typical tactics

108
00:04:51,024 --> 00:04:52,859
for doing forensics
don't fall prey

109
00:04:52,859 --> 00:04:56,561
to any malicious manipulation
of these log sources.

110
00:04:56,562 --> 00:04:58,798
- Barring that we might just
make you really hate our talk.

111
00:04:58,798 --> 00:05:00,500
- [Austin] Right, yeah,
hopefully you don't walk out

112
00:05:00,500 --> 00:05:04,370
of this feeling really
bummed about event logs.

113
00:05:05,505 --> 00:05:07,840
- [Jacob] So we'll start
with the old trusty,

114
00:05:07,840 --> 00:05:12,712
the auto-log was cleared,
then EID 1102 for the curious,

115
00:05:12,712 --> 00:05:13,913
this is what we like to think of

116
00:05:13,913 --> 00:05:16,549
as the lazy person's
anti-forensics.

117
00:05:16,549 --> 00:05:19,719
You go in, you do all your
stuff, it all gets logged,

118
00:05:19,719 --> 00:05:21,320
and then out your
way out the door,

119
00:05:21,321 --> 00:05:23,656
maybe as an afterthought, you
just clear all these logs.

120
00:05:23,656 --> 00:05:24,924
- [Austin] Just toss a match

121
00:05:24,924 --> 00:05:25,590
through the door as
you're walking out.

122
00:05:25,591 --> 00:05:26,759
- Yeah why not?

123
00:05:26,759 --> 00:05:30,096
So it's noisy, it
records itself doing it,

124
00:05:30,096 --> 00:05:33,299
but it's extremely common
for different versions

125
00:05:33,299 --> 00:05:36,835
of actors out there, all
different levels of threats,

126
00:05:36,836 --> 00:05:41,007
and it gets the job done so if
it ain't broke don't fix it.

127
00:05:41,941 --> 00:05:43,542
So how can we work around this?

128
00:05:43,543 --> 00:05:45,311
Well we can correlate
other things that

129
00:05:45,311 --> 00:05:47,479
might have happened
on disk at the time,

130
00:05:47,480 --> 00:05:50,583
we can look at other
artefacts that may have

131
00:05:50,583 --> 00:05:53,286
come before or after the
audit log was cleared,

132
00:05:53,286 --> 00:05:54,954
and we can also try to
look at our S.I.E.M.

133
00:05:54,954 --> 00:05:57,090
to see what might
have been forwarded

134
00:05:57,090 --> 00:06:00,025
before the audit
log was cleared.

135
00:06:00,026 --> 00:06:02,161
- So this is the one
part of this that I think

136
00:06:02,161 --> 00:06:04,397
there is a lot of
conversation about, there are

137
00:06:04,397 --> 00:06:06,733
a lot of great tools out
there that look to recover

138
00:06:06,733 --> 00:06:09,802
things like event logs
from memory, recover scraps

139
00:06:09,802 --> 00:06:13,139
of event logs of disk,
tools like EVTXtract,

140
00:06:13,139 --> 00:06:14,807
that are already out there
that are great tools,

141
00:06:14,807 --> 00:06:17,009
that are part of this
particular problem,

142
00:06:17,009 --> 00:06:19,479
part of the reason why
those tools were created,

143
00:06:19,479 --> 00:06:22,615
was the fact that this was
so easy, so trivial to do.

144
00:06:22,615 --> 00:06:25,818
So those areas are
typically covered,

145
00:06:25,818 --> 00:06:27,887
so we want to spend the most
of our time talking about

146
00:06:27,887 --> 00:06:31,958
other techniques that
aren't quite as obvious.

147
00:06:31,958 --> 00:06:34,994
- [Jacob] So moving
on from there.

148
00:06:34,994 --> 00:06:37,263
- Everyone here probably
knows that there are

149
00:06:37,263 --> 00:06:39,332
several configuration
options that you can put

150
00:06:39,332 --> 00:06:42,635
for your event log providers,
one the the most important

151
00:06:42,635 --> 00:06:45,738
of those is the maximum
size that the log can hold.

152
00:06:45,738 --> 00:06:47,740
So you probably have
seen in the past,

153
00:06:47,740 --> 00:06:49,909
this is a technique that
some attackers have used,

154
00:06:49,909 --> 00:06:51,911
where they simply just
drop the size to lower than

155
00:06:51,911 --> 00:06:55,081
the current existing size and
basically truncate the log

156
00:06:55,081 --> 00:06:57,183
and just release all
the rest of the data.

157
00:06:57,183 --> 00:07:00,586
Now there's an interesting
new option that's actually

158
00:07:00,586 --> 00:07:02,755
supported natively in
PowerShell where you can

159
00:07:02,755 --> 00:07:06,592
actually change the retention
option to prevent the log

160
00:07:06,592 --> 00:07:09,562
from being written
to with new events.

161
00:07:09,562 --> 00:07:12,465
So the combination of the
old technique and sort of the

162
00:07:12,465 --> 00:07:15,568
new more accessible technique
is to shrink the log

163
00:07:15,568 --> 00:07:18,171
past its current size so
that it's the smallest

164
00:07:18,171 --> 00:07:20,807
it can actually be and
change the retention policy

165
00:07:20,807 --> 00:07:23,509
so that no new logs
get added to it.

166
00:07:23,509 --> 00:07:25,745
After you've done that, you
can basically do whatever

167
00:07:25,745 --> 00:07:29,081
you want on the system, maybe
exfiltrate, move laterally,

168
00:07:29,081 --> 00:07:33,252
log in, log out, and as
long as that policy holds,

169
00:07:34,687 --> 00:07:36,689
no new logs will get pushed
to that except for the one log

170
00:07:36,689 --> 00:07:40,827
that states that the log
configuration was changed.

171
00:07:40,827 --> 00:07:44,030
So after you're done, after
you're done with all of

172
00:07:44,030 --> 00:07:47,265
your malicious activity, you
simply take off the retention

173
00:07:47,266 --> 00:07:50,136
policy to allow new logs
to keep flooding in,

174
00:07:50,136 --> 00:07:53,005
they roll off everything
that was in the small log,

175
00:07:53,005 --> 00:07:55,141
and then you pop the size
back up to its normal size,

176
00:07:55,141 --> 00:07:58,444
and as far as anyone's
considered, nothing happened.

177
00:07:58,444 --> 00:08:00,346
- [Jacob] The big nice hole
in your new log timeline.

178
00:08:00,346 --> 00:08:02,281
- Right, a big timeline gap.

179
00:08:02,281 --> 00:08:04,951
Although if you're doing
forensics several weeks after

180
00:08:04,951 --> 00:08:09,655
the incident, you may not even
notice that there's a gap.

181
00:08:09,655 --> 00:08:10,789
- It might be hard
to see but there's

182
00:08:10,790 --> 00:08:12,792
actually just
basically a one liner.

183
00:08:12,792 --> 00:08:14,559
- Right, there's a one
line PowerShell command

184
00:08:14,560 --> 00:08:18,030
to do this and you can see
the immediate effect is that

185
00:08:18,030 --> 00:08:20,366
all the logs are
now truncated and no

186
00:08:20,366 --> 00:08:23,736
new logs are going
to be written.

187
00:08:23,736 --> 00:08:26,272
- So this presents
sort of two challenges

188
00:08:26,272 --> 00:08:28,274
to the investigator,
how do I figure out

189
00:08:28,274 --> 00:08:31,744
if this happened and
what do I do about it?

190
00:08:31,744 --> 00:08:35,014
So how you can detect
it actively is to

191
00:08:36,948 --> 00:08:39,385
sort of look for any of
those registry changes.

192
00:08:39,385 --> 00:08:42,889
So as Austin noted, if you've
got the retention change

193
00:08:42,889 --> 00:08:45,024
and you've got the
max size change,

194
00:08:45,024 --> 00:08:47,059
these actually get
recorded in the registry,

195
00:08:47,059 --> 00:08:48,593
and again it's gonna be
kinda hard to see there

196
00:08:48,594 --> 00:08:53,199
but they're in there with
max size and with retention,

197
00:08:53,199 --> 00:08:55,935
specifically that gets
changed to all F's.

198
00:08:55,935 --> 00:08:58,738
- [Austin] Right, retention
will get changed to all F's

199
00:08:58,738 --> 00:09:03,042
when it's set to ignore all
new logs, never write new logs.

200
00:09:03,042 --> 00:09:04,277
- [Jacob] So hang
on to everything

201
00:09:04,277 --> 00:09:05,945
I've already got
in that event log.

202
00:09:05,945 --> 00:09:07,847
- And these made great
sources, so if you're

203
00:09:07,847 --> 00:09:10,550
fortunate enough to have
some sort of end point

204
00:09:10,550 --> 00:09:14,219
monitoring technology W,
MyEvent hooking into these

205
00:09:14,220 --> 00:09:16,923
different activities,
registry key changes to these

206
00:09:16,923 --> 00:09:19,792
particular registries are
always great to watch for

207
00:09:19,792 --> 00:09:24,497
because it is very rare
that an actual administrator

208
00:09:24,497 --> 00:09:28,367
will need to go and
start truncating logs.

209
00:09:28,367 --> 00:09:29,901
Not to say it doesn't
happen, because,

210
00:09:29,902 --> 00:09:31,604
as everyone in here is familiar,

211
00:09:31,604 --> 00:09:33,639
there are some very strange
administrator behaviors

212
00:09:33,639 --> 00:09:35,942
you'll find, run into
every now and then.

213
00:09:35,942 --> 00:09:38,778
But, these are two particularly
great things to look for,

214
00:09:38,778 --> 00:09:39,712
both from the dead
disk forensic side,

215
00:09:39,712 --> 00:09:42,014
as well as live monitoring.

216
00:09:42,014 --> 00:09:44,083
- So let's say you actually
have seen this happen.

217
00:09:44,083 --> 00:09:45,818
What do we do about it now?

218
00:09:45,818 --> 00:09:49,722
So you wanna go ahead and find
the registry change, stamps,

219
00:09:49,722 --> 00:09:52,658
timestamps associated
with that activity.

220
00:09:52,658 --> 00:09:54,193
And again, go through
your timeline,

221
00:09:54,193 --> 00:09:55,728
look at your other artefacts.

222
00:09:55,728 --> 00:09:56,963
Try to piece together what
else might have been going on

223
00:09:56,963 --> 00:09:58,631
at the time.

224
00:09:58,631 --> 00:10:01,567
And then we're just kind of
falling back with the usual.

225
00:10:01,567 --> 00:10:05,404
Well you can try to carve
EVTX chunks from disk memory.

226
00:10:05,404 --> 00:10:06,906
Go through your
standard process.

227
00:10:06,906 --> 00:10:09,007
- Unfortunately, that's sort
of the universal fallback

228
00:10:09,008 --> 00:10:10,476
for these things.

229
00:10:10,476 --> 00:10:12,945
If you don't have good
external logging sources,

230
00:10:12,945 --> 00:10:14,580
that are being
forwarded properly,

231
00:10:14,580 --> 00:10:16,849
you're almost always
going to fall back to, oh,

232
00:10:16,849 --> 00:10:18,718
where you're lucky enough
to get a memory image.

233
00:10:18,718 --> 00:10:20,353
Can you get the event
logs out of memory?

234
00:10:20,353 --> 00:10:23,155
Or are you lucky enough that
there is unallocated space

235
00:10:23,155 --> 00:10:25,958
out there that have event log
chunks that you can parse?

236
00:10:25,958 --> 00:10:28,227
So, I'm sure everyone
here operates

237
00:10:28,227 --> 00:10:30,463
in environments exclusively,

238
00:10:30,463 --> 00:10:32,365
that have perfect
S.I.E.M. forwarding rules,

239
00:10:32,365 --> 00:10:33,966
and event logging procedures

240
00:10:33,966 --> 00:10:35,601
that you don't have
to worry about that.

241
00:10:35,601 --> 00:10:36,836
But just in case.

242
00:10:36,836 --> 00:10:38,137
- Well, and you're
always detecting this

243
00:10:38,137 --> 00:10:39,638
like five minutes
after it happened.

244
00:10:39,639 --> 00:10:41,173
- Right exactly, this never
happens, so this is all.

245
00:10:41,173 --> 00:10:44,443
This never happens to you
guys, don't worry about it.

246
00:10:44,443 --> 00:10:47,279
Right, so one of
the questions is,

247
00:10:48,514 --> 00:10:52,451
why delete logs, when I
could just modify them?

248
00:10:52,451 --> 00:10:55,955
And sort of the thinking
before was, well,

249
00:10:57,690 --> 00:11:01,327
we can kind of do this, it
academically makes sense.

250
00:11:01,327 --> 00:11:02,828
I've had a lot of conversations

251
00:11:02,828 --> 00:11:05,164
with individuals that do a
lot of event logging tools.

252
00:11:05,164 --> 00:11:07,600
And the answer has always
been, yes it's trivial to.

253
00:11:07,600 --> 00:11:09,101
It would be trivial
for me to do it,

254
00:11:09,101 --> 00:11:11,203
but why on Earth would I ever
make a tool that does this?

255
00:11:11,203 --> 00:11:12,204
Right, makes perfect sense.

256
00:11:12,204 --> 00:11:13,439
Why would you make it easier

257
00:11:13,439 --> 00:11:16,242
to do something like
this than you need to?

258
00:11:16,242 --> 00:11:17,443
But unfortunately,

259
00:11:17,443 --> 00:11:18,611
that's usually where
the conversation stops.

260
00:11:18,611 --> 00:11:20,746
It's not that attackers
aren't doing this,

261
00:11:20,746 --> 00:11:22,448
it's just that we
don't release tools

262
00:11:22,448 --> 00:11:24,583
to make it easier for them.

263
00:11:24,583 --> 00:11:26,651
That said, there
are, you've seen

264
00:11:26,652 --> 00:11:29,822
these existing forensic tools
that all exist out there.

265
00:11:29,822 --> 00:11:33,125
You can just use simple
modification to the code

266
00:11:33,125 --> 00:11:35,561
to turn a event
log parsing utility

267
00:11:35,561 --> 00:11:38,564
into an event log
rewriting utility.

268
00:11:41,267 --> 00:11:42,768
Right, so event log structure.

269
00:11:42,768 --> 00:11:46,005
So this is the 7,000
mile high overview.

270
00:11:46,005 --> 00:11:49,775
You have your EVTX file
separated into chunks,

271
00:11:49,775 --> 00:11:52,578
which consist of
binary XML data.

272
00:11:52,578 --> 00:11:55,347
Each chunk has the first
and last record numbers,

273
00:11:55,347 --> 00:11:57,817
that are contained as offsets.

274
00:11:57,817 --> 00:12:00,086
And then there are two
different kinds of checksums

275
00:12:00,086 --> 00:12:02,054
that you'll run into,
the header checksum,

276
00:12:02,054 --> 00:12:03,555
and the data checksum.

277
00:12:03,556 --> 00:12:05,591
And these checksums come
into particular importance

278
00:12:05,591 --> 00:12:07,526
when you're talking
about rewriting data,

279
00:12:07,526 --> 00:12:11,830
in order to mask the integrity
having been manipulated.

280
00:12:11,831 --> 00:12:14,667
So, the checksum is CRC32.

281
00:12:14,667 --> 00:12:16,135
So obviously it's very simple.

282
00:12:16,135 --> 00:12:19,805
Everyone, not a great, too
easy to manipulate, and mask,

283
00:12:21,207 --> 00:12:25,377
and sort of generate fake
CRC32s that match in general.

284
00:12:25,377 --> 00:12:27,346
But that's not so
much of an issue.

285
00:12:27,346 --> 00:12:30,583
So you take the forensic
parser, and you change it to,

286
00:12:30,583 --> 00:12:32,718
instead of as it's parsing logs,

287
00:12:32,718 --> 00:12:35,320
look for pieces of evidence
that you're interested in,

288
00:12:35,321 --> 00:12:37,356
as a potential attacker.

289
00:12:37,356 --> 00:12:40,693
Maybe I don't like certain event
logs, event IDs showing up.

290
00:12:40,693 --> 00:12:42,093
I could target the event ID,

291
00:12:42,094 --> 00:12:43,529
I could target
the record number,

292
00:12:43,529 --> 00:12:46,332
if I'm interested in removing
a particular event log,

293
00:12:46,332 --> 00:12:49,968
which is exactly what the
public tool out there does.

294
00:12:49,969 --> 00:12:52,471
You could get more creative,
and look for strings,

295
00:12:52,471 --> 00:12:53,672
and rewrite those strings

296
00:12:53,672 --> 00:12:56,408
before writing the
event log back to disk.

297
00:12:56,408 --> 00:12:58,978
A lot of creative ways
to do this on disk.

298
00:12:58,978 --> 00:13:00,279
A lot of ways to manipulate it,

299
00:13:00,279 --> 00:13:02,581
and cover up the fact
that it was manipulated,

300
00:13:02,581 --> 00:13:06,719
provided that you can
get access to the file.

301
00:13:06,719 --> 00:13:08,821
- And that sounds
like a lot of fun,

302
00:13:08,821 --> 00:13:10,589
if you're on the red team side.

303
00:13:10,589 --> 00:13:11,791
But if you're on
the blue team side,

304
00:13:11,791 --> 00:13:12,725
you're probably
having a little bit

305
00:13:12,725 --> 00:13:14,260
of heartburn right about now.

306
00:13:14,260 --> 00:13:17,329
Because, okay, it's one thing
if the event log was cleared.

307
00:13:17,329 --> 00:13:19,598
It's another thing if I can
say it was clearly resized,

308
00:13:19,598 --> 00:13:22,101
and I know that stuff
might have fallen off.

309
00:13:22,101 --> 00:13:25,104
But if I don't know
that it was modified

310
00:13:25,104 --> 00:13:27,106
in a suspicious way,

311
00:13:27,106 --> 00:13:31,644
and that modification was
then itself covered up,

312
00:13:31,644 --> 00:13:32,812
I might be tearing
my hair out trying

313
00:13:32,812 --> 00:13:34,480
to figure out what's
going on here.

314
00:13:34,480 --> 00:13:36,348
So how can we
actually detect this?

315
00:13:36,348 --> 00:13:38,150
You can look for utilities,

316
00:13:38,150 --> 00:13:40,286
and my attempt to
release locks on files.

317
00:13:40,286 --> 00:13:43,722
These are always in use by the
Windows event logging system.

318
00:13:43,722 --> 00:13:47,827
The EVTX files themselves
should always be locked.

319
00:13:47,827 --> 00:13:51,664
So, if you see utilities
dropped, go and unlock those.

320
00:13:51,664 --> 00:13:53,598
That might be a
bit of a red flag.

321
00:13:53,599 --> 00:13:58,404
You would also look for
events, or events being logged,

322
00:13:58,404 --> 00:14:00,639
saying hey, this Windows
event logging system

323
00:14:00,639 --> 00:14:02,474
stopped all of a sudden.

324
00:14:02,474 --> 00:14:06,011
That would be a nice pointer
in the right direction.

325
00:14:06,011 --> 00:14:08,180
- [Austin] And one
thing that is not going

326
00:14:08,180 --> 00:14:09,781
to leave any particular
artefacts behind,

327
00:14:09,782 --> 00:14:11,550
but is a possibility as well,

328
00:14:11,550 --> 00:14:14,319
just like you can
parse data forensically

329
00:14:14,320 --> 00:14:18,724
off of the raw disk, you can
also write to the raw disk,

330
00:14:18,724 --> 00:14:20,626
to overwrite certain sectors.

331
00:14:20,626 --> 00:14:25,030
So, you don't always have to
formally stop the service,

332
00:14:25,030 --> 00:14:27,266
in order to access
those disk portions

333
00:14:27,266 --> 00:14:28,968
that you're looking for.

334
00:14:28,968 --> 00:14:31,103
But, it's just something
to be aware of.

335
00:14:31,103 --> 00:14:32,938
You're not gonna find any
artefacts related to that,

336
00:14:32,938 --> 00:14:34,640
since it's all at
the disk level.

337
00:14:34,640 --> 00:14:36,175
But, something to be aware,

338
00:14:36,175 --> 00:14:37,910
that it's not just
stopping the service,

339
00:14:37,910 --> 00:14:39,612
that here that's key.

340
00:14:39,612 --> 00:14:42,615
- Yeah, and so, what
do we do about it?

341
00:14:42,615 --> 00:14:43,916
Well assuming we'd
gotten to the stage

342
00:14:43,916 --> 00:14:46,118
where we think this
actually happened.

343
00:14:46,118 --> 00:14:49,221
And we're pretty sure we
can start digging for it.

344
00:14:49,221 --> 00:14:51,824
In that case, you're gonna wanna
go ahead and maybe compare,

345
00:14:51,824 --> 00:14:53,525
what's the event log on disk,

346
00:14:53,525 --> 00:14:55,327
versus what was
recorded to my S.I.E.M.

347
00:14:55,327 --> 00:14:56,595
Whether those events
hopefully got forwarded

348
00:14:56,595 --> 00:14:58,397
to you beforehand.

349
00:14:58,397 --> 00:15:00,933
And if you do a little
diff, you hold up the one,

350
00:15:00,933 --> 00:15:03,936
you hold up the other,
and they don't match,

351
00:15:03,936 --> 00:15:06,805
you know that something
fishy definitely occurred.

352
00:15:06,805 --> 00:15:09,641
And what it is that is the
difference between those two,

353
00:15:09,642 --> 00:15:13,812
might point you in the right
direction, really pop out.

354
00:15:13,812 --> 00:15:16,248
Additionally, you can of
course carve from memory,

355
00:15:16,248 --> 00:15:19,551
carve from disk, carve
and keep carving.

356
00:15:19,551 --> 00:15:21,620
Maybe you've got
volume shadow copies,

357
00:15:21,620 --> 00:15:24,290
or hard disk backups somewhere.

358
00:15:24,290 --> 00:15:25,557
I mean, swing for the fences.

359
00:15:25,557 --> 00:15:27,126
- Yeah, you might get lucky.

360
00:15:27,126 --> 00:15:29,093
So you may as well try.

361
00:15:29,094 --> 00:15:32,498
So, one of the common
threads here is that,

362
00:15:32,498 --> 00:15:34,266
when you're dealing
with modifications

363
00:15:34,266 --> 00:15:35,935
to the local disk event logs,

364
00:15:35,935 --> 00:15:38,203
that are being parsed by
all these forensic tools,

365
00:15:38,203 --> 00:15:40,406
and incident response tools,

366
00:15:40,406 --> 00:15:42,308
well the common
response is, okay,

367
00:15:42,308 --> 00:15:44,843
if I have a S.I.E.M. and my
logs are being forwarded,

368
00:15:44,843 --> 00:15:46,712
then I don't really
care about any of this.

369
00:15:46,712 --> 00:15:49,782
And the answer is, yes but.

370
00:15:49,782 --> 00:15:53,519
And the big but there is that
a lot of people set these up,

371
00:15:53,519 --> 00:15:55,854
and get the logs forwarding,
and they have alerts,

372
00:15:55,854 --> 00:15:57,122
and all these great things.

373
00:15:57,122 --> 00:15:59,123
But they don't have a
great method to detect

374
00:15:59,124 --> 00:16:01,927
when the S.I.E.M.
event log corridors

375
00:16:01,927 --> 00:16:04,330
are not operating correctly.

376
00:16:04,330 --> 00:16:07,666
So my sort of gut
check self assessment

377
00:16:07,666 --> 00:16:09,768
for S.I.E.M. logging is,

378
00:16:09,768 --> 00:16:12,237
if these three things
happen, do you know about it?

379
00:16:12,237 --> 00:16:15,607
If someone stops the endpoint
log forwarding service

380
00:16:15,607 --> 00:16:18,510
on my endpoint, do I
know that happened?

381
00:16:18,510 --> 00:16:21,013
If someone changes
a firewall rule,

382
00:16:21,013 --> 00:16:22,948
or intercepts network
communications,

383
00:16:22,948 --> 00:16:25,050
to prevent my event
log forwarding agent

384
00:16:25,050 --> 00:16:27,353
from getting event logs
back to my central server,

385
00:16:27,353 --> 00:16:28,786
do I know about it?

386
00:16:28,787 --> 00:16:31,724
If a system hasn't forwarded
logs in several days,

387
00:16:31,724 --> 00:16:33,225
do I know about it?

388
00:16:33,225 --> 00:16:35,461
For most people, the answer
to these questions are no.

389
00:16:35,461 --> 00:16:37,296
You would have no idea, unless
you were actively looking

390
00:16:37,296 --> 00:16:40,733
for any attempt to subvert
those S.I.E.M. logs

391
00:16:40,733 --> 00:16:44,335
from being properly forwarded,
and collected for review.

392
00:16:44,336 --> 00:16:45,571
- Well, and ironically,

393
00:16:45,571 --> 00:16:47,006
if you did change
the Windows Firewall

394
00:16:47,006 --> 00:16:48,841
to drop all the
packets forwarded

395
00:16:48,841 --> 00:16:50,976
from your event log forwarder,

396
00:16:50,976 --> 00:16:52,544
that would show up
in the event log.

397
00:16:52,544 --> 00:16:55,214
So, it's the chicken
and egg problem.

398
00:16:55,214 --> 00:16:57,249
- Yeah, there you go.

399
00:16:57,249 --> 00:16:59,251
So one of the more
interesting techniques

400
00:16:59,251 --> 00:17:02,221
that actually gets around this,

401
00:17:02,221 --> 00:17:06,525
the idea of the S.I.E.M. sort
of universally saving you is,

402
00:17:06,525 --> 00:17:08,327
if we move off disk into memory.

403
00:17:08,327 --> 00:17:09,862
So, recently there's been

404
00:17:09,862 --> 00:17:12,131
a lot of really
great work out there.

405
00:17:12,131 --> 00:17:13,966
Especially with WI
event consumers,

406
00:17:13,965 --> 00:17:16,435
and Event Tracing now has become

407
00:17:16,435 --> 00:17:19,370
quite a popular
topic for discussion.

408
00:17:19,371 --> 00:17:21,473
So we're getting more
insight into how these,

409
00:17:21,473 --> 00:17:24,609
the sort of provider
consumer architecture works,

410
00:17:24,609 --> 00:17:28,781
in kernel town, to get us
the data that we look at,

411
00:17:28,781 --> 00:17:30,349
for the forensic artefacts.

412
00:17:30,349 --> 00:17:33,185
But, high level overview.

413
00:17:33,185 --> 00:17:34,753
You basically have series of,

414
00:17:34,753 --> 00:17:37,056
chunks of data being passed
from providers to consumers,

415
00:17:37,056 --> 00:17:38,924
that eventually get
written out to logs,

416
00:17:38,924 --> 00:17:41,427
being passed through
a series of APIs.

417
00:17:41,427 --> 00:17:43,728
And with a little bit
of reverse engineering,

418
00:17:43,729 --> 00:17:46,398
and upstream memory hooking,

419
00:17:46,398 --> 00:17:49,501
you can actually get the event
log providers and consumers

420
00:17:49,501 --> 00:17:52,071
to do really interesting
things with that information,

421
00:17:52,071 --> 00:17:53,237
all in memory.

422
00:17:55,441 --> 00:18:00,379
So, simple proof of concept
tool, and one caveat, obviously,

423
00:18:00,379 --> 00:18:03,748
so just to lower any
concern out there,

424
00:18:03,749 --> 00:18:05,651
we're not releasing
any tools to do this.

425
00:18:05,651 --> 00:18:08,220
This is not something that
we're going to put out there.

426
00:18:08,220 --> 00:18:09,822
I wouldn't do that to you guys.

427
00:18:09,822 --> 00:18:11,023
Love you guys, don't wanna
make your lives harder

428
00:18:11,023 --> 00:18:13,192
than they already are.

429
00:18:13,192 --> 00:18:14,626
This is simply a
proof of concept.

430
00:18:14,626 --> 00:18:16,360
It uses a debugging tool

431
00:18:16,361 --> 00:18:19,298
that we've developed
over at FireEye.

432
00:18:19,298 --> 00:18:22,334
It allows you to do sort
of malware analysis,

433
00:18:22,334 --> 00:18:24,336
and in memory analysis,

434
00:18:24,336 --> 00:18:26,572
as part of the reverse
engineering process.

435
00:18:26,572 --> 00:18:29,507
So, the example that we
did was, we said, okay,

436
00:18:29,508 --> 00:18:32,377
what's one event ID that I
don't want showing up in disk?

437
00:18:32,377 --> 00:18:33,611
So the one that we chose

438
00:18:33,612 --> 00:18:35,514
was the new process
created event log.

439
00:18:35,514 --> 00:18:37,149
So, this is very
typical to monitor.

440
00:18:37,149 --> 00:18:39,818
You're looking for
process trees spawning.

441
00:18:39,818 --> 00:18:43,455
So I wanna see, okay, did
PowerShell spawn something else?

442
00:18:43,455 --> 00:18:46,358
Well then that's bad, and
I wanna go fix the problem.

443
00:18:46,358 --> 00:18:48,193
So in this case, we
picked an event ID.

444
00:18:48,193 --> 00:18:50,329
And we said, I don't
want that event ID

445
00:18:50,329 --> 00:18:51,996
to be written to disk anymore.

446
00:18:51,997 --> 00:18:56,502
So we looked at the event
logging service DLL,

447
00:18:56,502 --> 00:19:00,405
identified the necessary
steps in the process chain,

448
00:19:00,405 --> 00:19:02,841
where the event log
data gets passed down,

449
00:19:02,841 --> 00:19:06,410
and identified the one call
that takes the event log data,

450
00:19:06,411 --> 00:19:08,247
and actually pushes
it off the buffer,

451
00:19:08,247 --> 00:19:11,617
into the disk, or into
the event log on disk.

452
00:19:11,617 --> 00:19:14,485
So, using something like a
debugger, any debugging tool

453
00:19:14,486 --> 00:19:17,723
can do this, you can do this
in any programming language

454
00:19:17,723 --> 00:19:20,591
on Windows, it's
not that difficult.

455
00:19:20,592 --> 00:19:23,996
But once you identify the
necessary APIs to hook into,

456
00:19:23,996 --> 00:19:26,632
you can basically tell it to
do anything with that data.

457
00:19:26,632 --> 00:19:28,500
So in this case, we
just completely skip

458
00:19:28,500 --> 00:19:32,538
over the fact that the
write to event log call

459
00:19:32,538 --> 00:19:33,906
is being made.

460
00:19:33,906 --> 00:19:35,706
Instead, we just say
skip it and move on,

461
00:19:35,707 --> 00:19:38,210
and go process other event logs.

462
00:19:38,210 --> 00:19:39,645
You could see a
similar situation

463
00:19:39,645 --> 00:19:41,312
where we didn't just
simply ignore writing it,

464
00:19:41,313 --> 00:19:44,049
we went in and actually changed
the data that got written.

465
00:19:44,049 --> 00:19:46,185
Anytime a certain event
log ID gets written,

466
00:19:46,185 --> 00:19:49,388
or attempted to written to
disk, we change the data,

467
00:19:49,388 --> 00:19:51,857
and then we let that get
written to disk instead.

468
00:19:51,857 --> 00:19:55,928
So it's a persistent in
memory method of altering

469
00:19:55,928 --> 00:19:58,297
or hiding event log data,

470
00:19:58,297 --> 00:20:01,333
that uses this provider
consumer relationship,

471
00:20:01,333 --> 00:20:03,302
and seeks to interfere with it,

472
00:20:03,302 --> 00:20:06,405
by interfering in
the API call chain.

473
00:20:08,473 --> 00:20:09,707
- Extra dicey.

474
00:20:09,708 --> 00:20:11,543
So, now what do we do?

475
00:20:13,845 --> 00:20:15,881
Outside of additional
memory forensics,

476
00:20:15,881 --> 00:20:19,551
looking for hooking,
anything at that point.

477
00:20:20,986 --> 00:20:22,187
- [Austin] Right, crying.

478
00:20:22,187 --> 00:20:25,357
- Crying mostly,
yeah, that's a shame.

479
00:20:26,525 --> 00:20:28,727
You've got no disk
artefacts for this.

480
00:20:28,727 --> 00:20:30,395
You probably don't
have any S.I.E.M. data

481
00:20:30,395 --> 00:20:31,629
to correlate against,

482
00:20:31,630 --> 00:20:33,832
because it's only gonna
forward what it has.

483
00:20:33,832 --> 00:20:36,435
And it's getting a lot tougher.

484
00:20:38,203 --> 00:20:39,671
So the better option there,

485
00:20:39,671 --> 00:20:42,241
is to just stop it from
happening in the first place.

486
00:20:42,241 --> 00:20:45,610
Knowing that an attacker
can go in and use ETW,

487
00:20:45,611 --> 00:20:49,648
use WMI, use these
various consumer
producers relationships,

488
00:20:49,648 --> 00:20:51,850
within the Windows architecture.

489
00:20:51,850 --> 00:20:53,584
We can do the same
thing ourselves.

490
00:20:53,585 --> 00:20:56,588
Go in, create your
own WMI implant,

491
00:20:56,588 --> 00:20:59,291
to look for other WMI implants.

492
00:20:59,291 --> 00:21:02,060
Or, similarly with
ETW, setup a trace

493
00:21:02,060 --> 00:21:05,030
to look for traces being setup.

494
00:21:05,030 --> 00:21:08,267
It's all very Inceptioney,
kind of, really.

495
00:21:08,267 --> 00:21:09,801
- [Austin] We have to
go one level deeper.

496
00:21:09,801 --> 00:21:11,535
- Yeah, chasing your
own tail mostly.

497
00:21:11,536 --> 00:21:13,272
- Going further upstream.

498
00:21:13,272 --> 00:21:16,475
So, event log tracing is
particularly interesting.

499
00:21:16,475 --> 00:21:18,776
And you'll actually
see, I think,

500
00:21:18,777 --> 00:21:22,247
a lot of endpoint agents
moving to event tracing

501
00:21:22,247 --> 00:21:25,150
as the source of events,
as opposed to event logs.

502
00:21:25,150 --> 00:21:27,219
Or event log related events.

503
00:21:27,219 --> 00:21:30,922
And the reason why is, it
is sufficiently upstream,

504
00:21:30,922 --> 00:21:35,060
to make it much more
difficult to tamper with.

505
00:21:35,060 --> 00:21:36,628
You have a lot more
capability to detect

506
00:21:36,628 --> 00:21:39,598
that people are trying
to tamper with it.

507
00:21:39,598 --> 00:21:43,368
With your event tracing,
and your WMI event calls.

508
00:21:43,368 --> 00:21:47,004
So it's going to become a
lot more common I think.

509
00:21:47,005 --> 00:21:48,540
Especially with live monitoring,

510
00:21:48,540 --> 00:21:52,377
to use that as the go to
source for event log data.

511
00:21:55,414 --> 00:21:57,316
- So some final thoughts.

512
00:21:57,316 --> 00:21:59,318
The primary goal of
this talk is really just

513
00:21:59,318 --> 00:22:00,886
to shine a light on some,

514
00:22:00,886 --> 00:22:04,156
maybe under discussed topics
within anti-forensics.

515
00:22:04,156 --> 00:22:07,826
So again, time stomping
is very well known,

516
00:22:07,826 --> 00:22:09,594
very well documented.

517
00:22:10,796 --> 00:22:12,331
Every other attempt.

518
00:22:12,331 --> 00:22:17,269
- File deletion, shell log
history, deletion and removal.

519
00:22:17,269 --> 00:22:20,539
All of these have been
talked about extensively

520
00:22:20,539 --> 00:22:22,908
at this point, because
some people wanted

521
00:22:22,908 --> 00:22:25,377
to bring attention to
particular forensic artefacts

522
00:22:25,377 --> 00:22:29,947
that attackers are keen
to avoid leaving behind.

523
00:22:29,948 --> 00:22:32,584
And, there was
actually a great report

524
00:22:32,584 --> 00:22:35,854
that was just recently published
by Japan's C.E.R.T. team,

525
00:22:35,854 --> 00:22:40,492
that is a complete compendium
of all event log IDs

526
00:22:40,492 --> 00:22:43,729
and related events, for lateral
movement in an environment.

527
00:22:43,729 --> 00:22:45,230
And it's an amazing resource.

528
00:22:45,230 --> 00:22:47,833
And these are all event logs
that should be forwarded,

529
00:22:47,833 --> 00:22:49,835
and collected, and alerted on.

530
00:22:49,835 --> 00:22:53,171
But it relies on that
ecosystem being preserved.

531
00:22:53,171 --> 00:22:54,840
And not a lot of
thought gets put

532
00:22:54,840 --> 00:22:58,744
into making sure that event
logs are being preserved.

533
00:22:58,744 --> 00:23:01,379
We only just now started
thinking about, well,

534
00:23:01,380 --> 00:23:05,417
how do I make sure that my
WMI consumers are the ones

535
00:23:05,417 --> 00:23:06,985
that I left there,
and not being modified

536
00:23:06,985 --> 00:23:09,588
or manipulated by an attacker.

537
00:23:09,588 --> 00:23:13,258
The same attention should
eventually get paid to events.

538
00:23:13,258 --> 00:23:16,661
Either via event tracing
modification, or monitoring,

539
00:23:16,661 --> 00:23:19,197
or some other further
upstream check

540
00:23:19,197 --> 00:23:22,566
against this type of
malicious behavior.

541
00:23:22,567 --> 00:23:24,736
- This is all well and
good, because really,

542
00:23:24,736 --> 00:23:26,705
at the end of the day,
if you have an attacker

543
00:23:26,705 --> 00:23:29,541
that's doing this to you,
you already have a problem.

544
00:23:29,541 --> 00:23:32,577
Like, this is not the
first source of a problem.

545
00:23:32,577 --> 00:23:34,179
But, that said,
think about the kind

546
00:23:34,179 --> 00:23:37,849
of attackers where these few
event logs are the only trace

547
00:23:37,849 --> 00:23:39,784
left of their activity,

548
00:23:39,785 --> 00:23:42,020
and even that if they're
cleaning them up.

549
00:23:42,020 --> 00:23:44,322
Now they're really low and slow.

550
00:23:44,322 --> 00:23:45,956
- Right, we like our
event logs a lot.

551
00:23:45,957 --> 00:23:48,193
I love event logs
as a red teamer.

552
00:23:48,193 --> 00:23:49,928
They're a constant
source of frustration,

553
00:23:49,928 --> 00:23:52,397
because obviously when we go
out and red team for clients,

554
00:23:52,397 --> 00:23:56,668
we don't delete event logs,
because that's just not nice.

555
00:23:56,668 --> 00:23:59,603
But, real attackers don't
have the same dedication

556
00:23:59,604 --> 00:24:01,139
to quality service.

557
00:24:02,507 --> 00:24:04,176
So, you'll find that
they're a lot more sloppy

558
00:24:04,176 --> 00:24:07,245
with what they're willing
to do to evade detection.

559
00:24:07,245 --> 00:24:08,947
And, we can do the
best that we can

560
00:24:08,947 --> 00:24:10,849
to try and prevent them
from getting to that point.

561
00:24:10,849 --> 00:24:13,885
But, at the end of the day,
your best resource right now

562
00:24:13,885 --> 00:24:16,488
is going to be your S.I.E.M.
and your S.I.E.M. logging.

563
00:24:16,488 --> 00:24:19,024
So, making sure that you have
the appropriate monitoring

564
00:24:19,024 --> 00:24:21,592
over those agents, is
going to go a long way.

565
00:24:21,593 --> 00:24:24,062
Just like you wouldn't
want your endpoint agent

566
00:24:24,062 --> 00:24:27,698
to stop working, and
you not know about it,

567
00:24:27,699 --> 00:24:29,768
until several weeks later.

568
00:24:29,768 --> 00:24:31,803
You want to know when your
event log forwarding service

569
00:24:31,803 --> 00:24:33,438
has been stopped.

570
00:24:33,438 --> 00:24:35,474
You wanna make sure
that you don't run

571
00:24:35,474 --> 00:24:37,008
into a surprise
later, when you learn

572
00:24:37,008 --> 00:24:39,411
that your S.I.E.M. doesn't
have event logs from 300

573
00:24:39,411 --> 00:24:42,781
of your systems, because
someone went and turned it off.

574
00:24:42,781 --> 00:24:46,784
So part of that's just
good environmental safety,

575
00:24:46,785 --> 00:24:49,654
in terms of preserving
the security ecosystem

576
00:24:49,654 --> 00:24:51,957
that you guys work
very hard to setup.

577
00:24:51,957 --> 00:24:54,259
And that people like me
are working very hard

578
00:24:54,259 --> 00:24:56,628
to circumvent and tear down.

579
00:24:56,628 --> 00:24:58,964
But, at the end of the day,
we don't want anyone here

580
00:24:58,964 --> 00:25:01,399
to say, oh well
throw event logs out,

581
00:25:01,399 --> 00:25:02,900
they're useless,
someone can mess them.

582
00:25:02,901 --> 00:25:04,269
Because we don't
do the same thing

583
00:25:04,269 --> 00:25:05,804
for file system artefacts.

584
00:25:05,804 --> 00:25:08,473
We don't do the same thing
for shell back event logs.

585
00:25:08,473 --> 00:25:09,707
Any of these other resources,

586
00:25:09,708 --> 00:25:13,245
that are just as
easily tamperable.

587
00:25:13,245 --> 00:25:15,447
We just add a little bit
of qualification, and say,

588
00:25:15,447 --> 00:25:16,982
okay, here's the circumstances

589
00:25:16,982 --> 00:25:19,651
where I know obviously
someone's tampering with it.

590
00:25:19,651 --> 00:25:20,886
Here are some circumstances

591
00:25:20,886 --> 00:25:22,687
where someone might
be tampering with it.

592
00:25:22,687 --> 00:25:24,389
And just making sure
that you know how to tell

593
00:25:24,389 --> 00:25:27,425
when someone's trying to
lead you down the wrong path.

594
00:25:27,425 --> 00:25:29,094
And additional S.I.E.M. logging,

595
00:25:29,094 --> 00:25:30,862
live system monitoring
through Event Tracing,

596
00:25:30,862 --> 00:25:32,497
those are all great
methods to do that,

597
00:25:32,497 --> 00:25:33,899
and make sure that
no one's gonna get

598
00:25:33,899 --> 00:25:35,800
the best of you at
the end of the day.

599
00:25:35,800 --> 00:25:37,335
- Yeah, I think at
the end of the day,

600
00:25:37,335 --> 00:25:39,437
like it's not very
exciting to do telemetry,

601
00:25:39,437 --> 00:25:41,106
and system health,

602
00:25:41,106 --> 00:25:42,774
but man, that really
pays the bills.

603
00:25:42,774 --> 00:25:44,508
- Yeah it does.

604
00:25:44,509 --> 00:25:48,813
So some things that I
wanna make sure to do is,

605
00:25:48,813 --> 00:25:51,516
muchas gracias to Michael
Bayley, who actually helped

606
00:25:51,516 --> 00:25:53,351
quite a bit with the
reverse engineering

607
00:25:53,351 --> 00:25:55,120
of the event log DLL.

608
00:25:56,288 --> 00:25:58,490
Helped out with setting
up Flare QTB for this.

609
00:25:58,490 --> 00:26:00,659
Great resource, great
guy, highly recommend

610
00:26:00,659 --> 00:26:02,561
checking out his
blog and Twitter.

611
00:26:02,561 --> 00:26:04,763
He's a phenomenal resource
for reverse engineering,

612
00:26:04,763 --> 00:26:07,331
especially on the red
team side of the house.

613
00:26:07,332 --> 00:26:08,733
And of course Willy Balentine,

614
00:26:08,733 --> 00:26:10,702
who I'm sure gets
thanked quite frequently,

615
00:26:10,702 --> 00:26:12,404
for his EVTX parser,

616
00:26:12,404 --> 00:26:15,173
which I used to
formulate my tool,

617
00:26:15,173 --> 00:26:17,409
that did this sort
of manipulation,

618
00:26:17,409 --> 00:26:19,678
as well as the EVTXtract,
which allows you

619
00:26:19,678 --> 00:26:22,247
to carve event logs from disk,

620
00:26:22,247 --> 00:26:23,748
which we also used
as part of this.

621
00:26:23,748 --> 00:26:26,785
So, two great utilities that
I highly recommend using,

622
00:26:26,785 --> 00:26:27,986
especially if you
wanna learn more

623
00:26:27,986 --> 00:26:30,522
about the event
log format on disk.

