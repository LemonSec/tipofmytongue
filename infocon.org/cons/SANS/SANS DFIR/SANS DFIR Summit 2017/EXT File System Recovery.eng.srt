1
00:00:09,609 --> 00:00:12,679
(audience applause)

2
00:00:12,679 --> 00:00:15,181
- Some things can't be unseen.

3
00:00:16,616 --> 00:00:20,653
So look, probably there's
a lot of people in the room

4
00:00:20,653 --> 00:00:23,490
who think of me as
this kind of crazy guy

5
00:00:23,490 --> 00:00:27,694
who spends a lot of time
looking at the internals of

6
00:00:27,694 --> 00:00:30,997
UNIX file systems
in a hex editor.

7
00:00:30,997 --> 00:00:35,235
Yeah, well this
presentation is going to do

8
00:00:35,235 --> 00:00:37,904
nothing to correct that opinion,

9
00:00:40,573 --> 00:00:44,244
so this is actually based
on some ideas that I had

10
00:00:44,244 --> 00:00:48,081
when I had been doing my
Linux forensics casework,

11
00:00:48,081 --> 00:00:51,985
and sometimes you deal
with investigations

12
00:00:51,985 --> 00:00:55,422
where bad things happen
to your file system.

13
00:00:55,422 --> 00:00:57,657
You're dealing with
a damaged file system

14
00:00:57,657 --> 00:01:01,193
and I wanted to talk about
a couple of different cases.

15
00:01:01,194 --> 00:01:04,097
One is one that I
actually experienced where

16
00:01:04,096 --> 00:01:07,699
our suspects became
aware that, you know,

17
00:01:07,700 --> 00:01:10,003
we were about to
seize their systems,

18
00:01:10,003 --> 00:01:12,172
and so they did the,
"Cheese it, the cops."

19
00:01:12,172 --> 00:01:14,107
Let's remove the file system

20
00:01:14,107 --> 00:01:18,378
and try and get rid of
all of the evidence.

21
00:01:18,378 --> 00:01:22,449
The other one can happen
accidentally, right,

22
00:01:22,449 --> 00:01:26,386
you know, you're gonna zero
that drive for your next case.

23
00:01:26,386 --> 00:01:29,322
Oh, did I mean to type sda?

24
00:01:29,322 --> 00:01:31,491
No, no I didn't,
I just overwrote

25
00:01:31,491 --> 00:01:33,993
at least part of my
primary hard drive,

26
00:01:33,993 --> 00:01:37,297
but you also see people doing
this for exfoliation, I mean,

27
00:01:37,297 --> 00:01:40,467
you know, either
overwriting the drive,

28
00:01:40,467 --> 00:01:44,070
or putting a new
virgin operating system

29
00:01:44,070 --> 00:01:48,241
on top of the nefarious stuff,
so these are all cases where

30
00:01:49,642 --> 00:01:53,413
you've got either the remnants
of a removed file system

31
00:01:53,413 --> 00:01:56,916
or fragments of a
preexisting file system,

32
00:01:56,916 --> 00:01:59,185
but things are messed up,

33
00:01:59,185 --> 00:02:02,322
and things are messed
up in a particular way.

34
00:02:02,322 --> 00:02:04,224
In both of these scenarios,

35
00:02:04,224 --> 00:02:06,693
the situation you're
dealing with is basically

36
00:02:06,693 --> 00:02:09,496
all the metadata is gone,
right, so what ain't you got?

37
00:02:09,496 --> 00:02:12,565
You ain't got
metadata, and you know,

38
00:02:13,967 --> 00:02:17,170
and that actually covers a
lot of territory so first up,

39
00:02:17,170 --> 00:02:18,605
all the inode information right,

40
00:02:18,605 --> 00:02:22,108
so when I delete something
in UNIX file system,

41
00:02:22,108 --> 00:02:24,144
the inode associated with
the file or directory

42
00:02:24,144 --> 00:02:26,546
that I deleted is
mostly zeroed out,

43
00:02:26,546 --> 00:02:28,815
so all of the block
pointer information

44
00:02:28,815 --> 00:02:31,451
or all of the extent
information gets zeroed out.

45
00:02:31,451 --> 00:02:33,920
You lose that mapping to where

46
00:02:33,920 --> 00:02:38,391
the content of the file
used to live on disk, right?

47
00:02:38,391 --> 00:02:41,928
If somebody overwrites
the file system,

48
00:02:41,928 --> 00:02:46,032
the inodes in the beginning
of each block group

49
00:02:46,032 --> 00:02:48,401
get overwritten, so you lose
all of that inode metadata.

50
00:02:48,401 --> 00:02:49,769
You don't know where the files

51
00:02:49,769 --> 00:02:52,071
used to live on
the disk anymore.

52
00:02:52,071 --> 00:02:53,940
Ext, at least
through ext3 forward

53
00:02:53,940 --> 00:02:55,708
is a journaling file system,
so you think, oh, okay,

54
00:02:55,708 --> 00:02:57,544
well I'm gonna, you know,
go look at the journal.

55
00:02:57,544 --> 00:02:59,746
Problem is, you know, if I just

56
00:02:59,746 --> 00:03:02,682
rm minus rf the
entire file system,

57
00:03:02,682 --> 00:03:06,553
so many journal transactions
happen during that event

58
00:03:06,553 --> 00:03:09,389
that you basically overrun
the journal, I mean,

59
00:03:09,389 --> 00:03:12,625
you overwrite the old stuff,
so the journal doesn't give you

60
00:03:12,625 --> 00:03:16,229
a very large window of what
happened to that file system,

61
00:03:16,229 --> 00:03:18,731
so you can't really use the
journal to reconstruct things.

62
00:03:18,731 --> 00:03:21,167
If the file system is damaged,

63
00:03:21,167 --> 00:03:24,871
you may have even lost
the inode for the journal,

64
00:03:24,871 --> 00:03:26,739
so you don't even know where
the journal lives on disk,

65
00:03:26,739 --> 00:03:30,143
so you have to go groveling
around through unallocated

66
00:03:30,143 --> 00:03:32,478
to try and find and
reconstruct the journal blocks

67
00:03:32,478 --> 00:03:35,915
which are spread
all over the place.

68
00:03:35,915 --> 00:03:38,483
And the other thing is,

69
00:03:38,484 --> 00:03:41,521
and it turns out
that in my research,

70
00:03:41,521 --> 00:03:44,323
the last one is actually the
most difficult one for me.

71
00:03:44,324 --> 00:03:46,626
The block and inode
allocation maps

72
00:03:46,626 --> 00:03:50,063
that sit up at the
beginning of the block group

73
00:03:50,063 --> 00:03:53,333
also get overwritten,
so you're going through,

74
00:03:53,333 --> 00:03:55,234
you know, trying
to recover blocks

75
00:03:55,235 --> 00:03:56,836
from the remaining disk space,

76
00:03:56,836 --> 00:03:59,472
but you don't know which
ones of those blocks

77
00:03:59,472 --> 00:04:01,641
are actually allocated and
part of the file system,

78
00:04:01,641 --> 00:04:04,810
or which represent
old data, and that,

79
00:04:06,179 --> 00:04:07,880
as it turns out, it
turns out to be a hassle,

80
00:04:07,880 --> 00:04:10,549
so all of this metadata
is completely gone,

81
00:04:10,550 --> 00:04:13,052
but I still wanted
to say, okay so,

82
00:04:13,052 --> 00:04:15,321
what can I do as far as
file system recovery,

83
00:04:15,321 --> 00:04:17,190
even in a scenario
where I basically

84
00:04:17,190 --> 00:04:20,059
have no metadata
that I can work with,

85
00:04:20,059 --> 00:04:22,595
so what do you have left?

86
00:04:22,595 --> 00:04:25,999
So what you have left
is at least some of

87
00:04:27,433 --> 00:04:30,003
the actual data blocks that
used to be in the file system,

88
00:04:30,003 --> 00:04:31,604
and in those data blocks,

89
00:04:31,604 --> 00:04:35,041
you've got directory
content, right?

90
00:04:35,041 --> 00:04:37,710
So UNIX file systems, basically,

91
00:04:38,878 --> 00:04:40,813
directories are
nothing more than

92
00:04:40,813 --> 00:04:44,717
sequential lists of
entries, and those entries,

93
00:04:44,717 --> 00:04:46,986
all they do is
they map file names

94
00:04:46,986 --> 00:04:49,722
and directory names to
inode numbers, right,

95
00:04:49,722 --> 00:04:51,390
so here's a example.

96
00:04:52,325 --> 00:04:54,327
This is a partial directory.

97
00:04:54,327 --> 00:04:56,496
So let's say this is
my home directory.

98
00:04:56,496 --> 00:04:58,798
If you look at the internals of

99
00:04:58,798 --> 00:05:01,067
that directory
file for home/hal,

100
00:05:01,067 --> 00:05:04,637
what you see is the
sequential list of entries

101
00:05:04,637 --> 00:05:06,539
and they're not even
in alphabetical order.

102
00:05:06,539 --> 00:05:09,241
They're basically in
the order in which

103
00:05:09,242 --> 00:05:12,545
the objects were created
in the directory, right?

104
00:05:12,545 --> 00:05:14,047
So every directory starts with

105
00:05:14,047 --> 00:05:16,749
the dot and dot-dot
links that, you know,

106
00:05:16,749 --> 00:05:18,818
the dot link points to
the directory itself,

107
00:05:18,818 --> 00:05:21,688
the dot-dot link points
to the parent, but then,

108
00:05:21,688 --> 00:05:23,690
you've just got, you
know, a bunch of entries,

109
00:05:23,690 --> 00:05:27,026
so inode number 127153
is the directory.

110
00:05:30,330 --> 00:05:33,199
The file type is also stored
in the directory file,

111
00:05:33,199 --> 00:05:34,467
called Downloads, you know,

112
00:05:34,467 --> 00:05:35,902
and then there's my
desktop directory

113
00:05:35,902 --> 00:05:38,604
and my dot profile
file, and so on.

114
00:05:38,604 --> 00:05:40,940
Just bang, bang, bang,
one after the other

115
00:05:40,940 --> 00:05:43,209
in this directory file.

116
00:05:43,209 --> 00:05:47,313
Okay now, you know, if
the file system is whole

117
00:05:47,313 --> 00:05:48,848
and fully connected, you know,

118
00:05:48,848 --> 00:05:51,084
okay, that's my
home/hal directory,

119
00:05:51,084 --> 00:05:56,089
but if I'm just groveling
around in a damaged file system

120
00:05:56,089 --> 00:05:59,892
and I find this block
of directory entries,

121
00:05:59,892 --> 00:06:04,597
I don't actually know the
name of that directory.

122
00:06:04,597 --> 00:06:06,566
I know there's a block
that has, you know,

123
00:06:06,566 --> 00:06:10,335
downloads, desktop, dot profile,
and dot ssh directories,

124
00:06:10,336 --> 00:06:13,106
so it's probably some
user's home directory,

125
00:06:13,106 --> 00:06:16,976
but I don't particularly
know which user it is.

126
00:06:16,976 --> 00:06:18,678
Okay, so that's
part of the problem.

127
00:06:18,678 --> 00:06:22,148
You're running around through
this damaged file system

128
00:06:22,148 --> 00:06:24,183
and you keep finding
these directories,

129
00:06:24,183 --> 00:06:27,787
but how do you
reconnect them back into

130
00:06:27,787 --> 00:06:30,690
the original
contiguous file system?

131
00:06:30,690 --> 00:06:32,325
Well look, okay, so
this is, you know,

132
00:06:32,325 --> 00:06:35,594
this was, at least at one
point, the home/hal directory,

133
00:06:35,595 --> 00:06:37,897
so somewhere else on the disk,

134
00:06:37,897 --> 00:06:39,565
I'm gonna find a block of data

135
00:06:39,565 --> 00:06:42,502
which was the slash
home directory, right?

136
00:06:42,502 --> 00:06:45,371
So if I look at
that block of data,

137
00:06:45,371 --> 00:06:47,774
there's an entry in
there for hal, right,

138
00:06:47,774 --> 00:06:50,676
you know, there used to
be a home/hal directory.

139
00:06:50,676 --> 00:06:55,381
So this is where the
intelligence starts coming in.

140
00:06:55,381 --> 00:06:56,849
All right, so think
about it, right.

141
00:06:56,849 --> 00:07:00,753
So home/hal has a dot link
that points to itself,

142
00:07:00,753 --> 00:07:03,055
and that dot link tells us that

143
00:07:03,055 --> 00:07:04,791
the original inode
associated with

144
00:07:04,791 --> 00:07:07,693
this directory
was 127151, right?

145
00:07:07,693 --> 00:07:09,262
I don't know the name
of the directory,

146
00:07:09,262 --> 00:07:13,232
but I know what inode used
to be associated with it,

147
00:07:13,232 --> 00:07:17,103
but if I look at its parent,
the old home directory now,

148
00:07:17,103 --> 00:07:18,971
there should be an entry, right?

149
00:07:18,971 --> 00:07:21,140
So there's an entry
that, you know,

150
00:07:21,140 --> 00:07:23,976
corresponds to
that 127151, right,

151
00:07:26,012 --> 00:07:27,747
that actually tells me the name

152
00:07:27,747 --> 00:07:29,715
associated with
that inode, right?

153
00:07:29,715 --> 00:07:33,518
So if can find the parent, I
can match up the inode numbers

154
00:07:33,519 --> 00:07:37,824
and go, oh, cool, you
know, 127151 is hal,

155
00:07:37,824 --> 00:07:41,394
so that's how you can
get to a file name,

156
00:07:41,394 --> 00:07:43,796
you know, by tying
the inodes together,

157
00:07:43,796 --> 00:07:45,498
so you have to find the parent

158
00:07:45,498 --> 00:07:50,303
and then, use the dot
linkage to figure that out.

159
00:07:50,303 --> 00:07:53,606
But you also have the
dot-dot link, so you know,

160
00:07:53,606 --> 00:07:55,373
by way of confirmation, right,

161
00:07:55,374 --> 00:07:57,643
I know that in the original
home/hal directory,

162
00:07:57,643 --> 00:08:00,279
there's a dot-dot link that
points back to its parent,

163
00:08:00,279 --> 00:08:03,850
so it's inode
number 18350, right?

164
00:08:03,850 --> 00:08:06,586
So the dot link in the parent

165
00:08:06,586 --> 00:08:08,721
should be the same
inode number, right?

166
00:08:08,721 --> 00:08:12,558
So, 18350 should be the
inode associated with

167
00:08:12,558 --> 00:08:15,428
the dot link in the
corresponding parent directory,

168
00:08:15,428 --> 00:08:17,563
so you can use that for
confirmation, right,

169
00:08:17,563 --> 00:08:19,397
as you're going through
and you're finding

170
00:08:19,398 --> 00:08:21,000
all of these directory blocks

171
00:08:21,000 --> 00:08:23,102
floating around in
the file system,

172
00:08:23,102 --> 00:08:27,272
you can use these linkages to
tie everything back together,

173
00:08:27,273 --> 00:08:31,010
and ultimately, you know,
if you find enough of this,

174
00:08:31,010 --> 00:08:34,914
you can begin reconstructing
the original file system,

175
00:08:34,914 --> 00:08:36,616
even without any of
the metadata, I mean,

176
00:08:36,616 --> 00:08:39,352
we're just like brute
force, you know,

177
00:08:39,352 --> 00:08:43,523
raw parsing the directory
files, but it kind of works.

178
00:08:46,692 --> 00:08:50,863
So, great, but how do I even
locate these directory files.

179
00:08:52,865 --> 00:08:55,468
I mean, in a connected
file system, it's easy,

180
00:08:55,468 --> 00:08:56,669
because the inodes are there

181
00:08:56,669 --> 00:08:58,704
and you can find the
directory file content,

182
00:08:58,704 --> 00:09:00,839
but with the metadata gone,

183
00:09:00,840 --> 00:09:05,011
how do I even begin identifying
these directory blocks

184
00:09:05,945 --> 00:09:08,548
in order to begin parsing them?

185
00:09:09,715 --> 00:09:12,818
The answer is, if
you think about it,

186
00:09:12,818 --> 00:09:14,387
there's actually a signature

187
00:09:14,387 --> 00:09:17,122
associated with
directory files, right,

188
00:09:17,123 --> 00:09:19,959
so we can actually
use this signature

189
00:09:19,959 --> 00:09:22,795
to carve for the
directory blocks,

190
00:09:23,963 --> 00:09:25,665
and to understand
that signature,

191
00:09:25,665 --> 00:09:28,767
you have to look a little
bit more closely at exactly

192
00:09:28,768 --> 00:09:32,171
how these UNIX directory
entries are structured.

193
00:09:32,171 --> 00:09:35,007
Okay, so the first thing that
you need to understand is

194
00:09:35,007 --> 00:09:38,710
that UNIX directory
files must begin

195
00:09:38,711 --> 00:09:41,614
with a dot and dot-dot
link, so they always have

196
00:09:41,614 --> 00:09:45,318
those two entries right
at the front of the block.

197
00:09:45,318 --> 00:09:47,218
So you're thinking, well,
if I could characterize

198
00:09:47,219 --> 00:09:49,322
what those entries look like,

199
00:09:49,322 --> 00:09:51,190
I should be able to
create a signature,

200
00:09:51,190 --> 00:09:55,027
and that's exactly right,
so a directory entry

201
00:09:56,162 --> 00:09:59,365
is actually, it's a
variable length record.

202
00:09:59,365 --> 00:10:01,968
The first four bytes are
always the inode number,

203
00:10:01,968 --> 00:10:04,303
you know, whatever inode
number that happens to be,

204
00:10:04,303 --> 00:10:06,305
and then, the next two bytes

205
00:10:06,305 --> 00:10:09,108
are the total length
of the directory entry,

206
00:10:09,108 --> 00:10:13,279
including the inode field
and the entry length field.

207
00:10:14,847 --> 00:10:18,784
It's worth noting
that directory entries

208
00:10:18,784 --> 00:10:22,321
in UNIX file systems
are four byte aligned,

209
00:10:22,321 --> 00:10:24,790
so you know, in the
case of the dot link,

210
00:10:24,790 --> 00:10:29,161
I could actually fit that
directory entry into nine bytes,

211
00:10:29,161 --> 00:10:31,696
but because everything has
to be four byte aligned,

212
00:10:31,697 --> 00:10:33,799
the dot link is
always 12 bytes long,

213
00:10:33,799 --> 00:10:36,802
so it's rounded up to the
next four byte quantity.

214
00:10:36,802 --> 00:10:38,471
Okay, so you've got
the entry length,

215
00:10:38,471 --> 00:10:40,272
and then, the actual
length of the file name,

216
00:10:40,272 --> 00:10:43,609
which in the case of the dot
link is just one character,

217
00:10:43,609 --> 00:10:47,747
right, so that's, you
know, one byte long.

218
00:10:47,747 --> 00:10:49,781
Then you have a byte which is

219
00:10:49,782 --> 00:10:52,685
the file type, the
file type code.

220
00:10:52,685 --> 00:10:55,588
Two is the code
for subdirectories,

221
00:10:56,789 --> 00:10:58,357
and then, you actually
have the file name.

222
00:10:58,357 --> 00:11:00,059
Now in the case of the dot link,

223
00:11:00,059 --> 00:11:02,361
there's three extra bytes
in the directory entry,

224
00:11:02,361 --> 00:11:04,964
so we round up to a
four byte quantity,

225
00:11:04,964 --> 00:11:07,600
and those are just null filled.

226
00:11:07,600 --> 00:11:09,201
So once you put
all that together,

227
00:11:09,201 --> 00:11:11,170
I mean, you can see
it on the slide,

228
00:11:11,170 --> 00:11:13,039
there's actually a
very nice signature

229
00:11:13,039 --> 00:11:14,774
for that initial dot entry.

230
00:11:14,774 --> 00:11:16,509
There's, you know,
gonna be four bytes

231
00:11:16,509 --> 00:11:19,712
of whatever the inode is, but
after that four byte offset,

232
00:11:19,712 --> 00:11:24,450
it's always gonna be a 12
byte directory entry length,

233
00:11:24,450 --> 00:11:29,288
so it's little envian, so
zero C zero zero, and then,

234
00:11:29,288 --> 00:11:31,691
the length of the file name
is always gonna be one,

235
00:11:31,691 --> 00:11:33,426
and then the type is
always gonna be two

236
00:11:33,426 --> 00:11:35,428
because it's always a
directory, and then,

237
00:11:35,428 --> 00:11:36,729
the file name itself field

238
00:11:36,729 --> 00:11:39,799
is always gonna be
two E, and then nulls.

239
00:11:39,799 --> 00:11:44,136
So that's a nice, you
know, eight byte signature,

240
00:11:44,136 --> 00:11:46,539
offset four bytes from the
beginning of the block,

241
00:11:46,539 --> 00:11:50,710
and it's very easy to pull out
the initial directory block

242
00:11:51,911 --> 00:11:54,345
using that signature,
so that what you do.

243
00:11:54,346 --> 00:11:55,881
You basically just
run through the blocks

244
00:11:55,881 --> 00:11:58,284
looking for that signature.

245
00:11:58,284 --> 00:12:02,054
And you can begin finding
these and parsing them.

246
00:12:02,054 --> 00:12:04,356
Okay, so great, so
we have this idea

247
00:12:04,356 --> 00:12:06,158
that if we find these
directory blocks

248
00:12:06,158 --> 00:12:07,960
and parse through
them, we can, you know,

249
00:12:07,960 --> 00:12:09,895
maybe reconstruct
the file system

250
00:12:09,895 --> 00:12:12,398
by using these inode linkages.

251
00:12:14,066 --> 00:12:17,403
Nothing is ever that
easy though, right?

252
00:12:18,871 --> 00:12:22,975
Typically, UNIX directories
tend to be small.

253
00:12:22,975 --> 00:12:25,411
90 or more percent
of the directories

254
00:12:25,411 --> 00:12:27,946
in your UNIX file
system are only gonna be

255
00:12:27,947 --> 00:12:30,983
a single block long, and
so, that's great, I mean,

256
00:12:30,983 --> 00:12:33,118
we can locate the blocks
using the signature we saw

257
00:12:33,119 --> 00:12:35,755
on the previous slide and
we're good to go, but you know,

258
00:12:35,755 --> 00:12:37,890
five to 10 percent
of the directories

259
00:12:37,890 --> 00:12:40,526
in your UNIX file system
are gonna be large enough

260
00:12:40,526 --> 00:12:43,896
that they need to go
across multiple blocks.

261
00:12:43,896 --> 00:12:47,333
Unfortunately, typically,
directory files

262
00:12:48,834 --> 00:12:51,904
that are more than a single
block tend to be fragmented,

263
00:12:51,904 --> 00:12:53,439
and the reason for that is

264
00:12:53,439 --> 00:12:57,675
the way UNIX file systems
tend to do block allocation,

265
00:12:57,676 --> 00:13:00,112
so the way this works
in UNIX file systems is

266
00:13:00,112 --> 00:13:03,616
blocks are grouped together
into these block groups

267
00:13:03,616 --> 00:13:06,218
that are scattered
throughout the disk.

268
00:13:06,218 --> 00:13:08,621
When you create a
new subdirectory,

269
00:13:08,621 --> 00:13:13,092
it goes into the least used
block group, basically,

270
00:13:13,092 --> 00:13:16,629
and then, as you add files
in that subdirectory,

271
00:13:16,629 --> 00:13:20,332
the file system driver
tends to allocate the files

272
00:13:20,332 --> 00:13:24,537
in the same block group
with its directory,

273
00:13:24,537 --> 00:13:26,071
so the problem is, you know,

274
00:13:26,071 --> 00:13:27,540
you start off with
a small directory

275
00:13:27,540 --> 00:13:29,809
and you keep adding files
and keep adding files,

276
00:13:29,809 --> 00:13:32,745
and the directory
grows to a point where

277
00:13:32,745 --> 00:13:36,916
the directory file needs to
gwom a second block onto it.

278
00:13:38,250 --> 00:13:40,920
By the time that happens,
all of the blocks

279
00:13:40,920 --> 00:13:43,021
near the original
directory block

280
00:13:43,022 --> 00:13:45,357
have been allocated
to files, and so,

281
00:13:45,357 --> 00:13:48,661
you almost always will fragment

282
00:13:48,661 --> 00:13:50,996
the second block of
the directory file,

283
00:13:50,996 --> 00:13:54,366
so the problem for
us reconstructing
the file system is

284
00:13:54,366 --> 00:13:57,236
okay, I can find the original
block of the directory

285
00:13:57,236 --> 00:14:00,206
by using the dot link signature,

286
00:14:00,206 --> 00:14:03,576
but what happens if
it's a big directory?

287
00:14:05,010 --> 00:14:07,746
I don't know where the rest
of that directory file is,

288
00:14:07,746 --> 00:14:09,481
so that was an issue.

289
00:14:11,217 --> 00:14:15,387
The other thing that you have
in active file systems is

290
00:14:17,323 --> 00:14:20,391
you know, things get deleted,

291
00:14:20,392 --> 00:14:23,996
and so there's some
interesting detail around

292
00:14:23,996 --> 00:14:26,265
parsing deleted
directory entries,

293
00:14:26,265 --> 00:14:28,067
which we'll talk
about in a little bit.

294
00:14:28,067 --> 00:14:32,171
There's also this problem where
there's just churn, right,

295
00:14:32,171 --> 00:14:35,241
so you know, a file or
directory is created

296
00:14:35,241 --> 00:14:38,444
in a temp directory,
for example, and
then it gets deleted,

297
00:14:38,444 --> 00:14:42,615
and then its inode gets
reallocated to some other file,

298
00:14:44,016 --> 00:14:48,120
but there may be copies of
the old data floating around,

299
00:14:50,222 --> 00:14:52,290
and as I discovered
when I started

300
00:14:52,291 --> 00:14:55,961
doing this in real file
systems, there's actually like

301
00:14:55,961 --> 00:14:59,565
a lot of copies of the
same directory data,

302
00:15:00,966 --> 00:15:04,036
because you end up finding
copies of the directory block

303
00:15:04,036 --> 00:15:08,973
in journal entries, and you
know, it's just, it's nuts,

304
00:15:08,974 --> 00:15:12,077
it's actually quite
a lot of conflicting

305
00:15:12,077 --> 00:15:15,047
and redundant information
that you have to somehow

306
00:15:15,047 --> 00:15:17,216
navigate through to
try and build an idea

307
00:15:17,216 --> 00:15:19,485
of what the original
file system was,

308
00:15:19,485 --> 00:15:21,954
so I want to talk
a little bit about

309
00:15:21,954 --> 00:15:23,454
some of the points
on this slide,

310
00:15:23,455 --> 00:15:26,158
and describe a bit of the
pain that I went through

311
00:15:26,158 --> 00:15:28,093
when I was trying
to deal with this.

312
00:15:28,093 --> 00:15:31,563
All right, so let's
first talk about

313
00:15:31,563 --> 00:15:32,865
deleted directory entries and

314
00:15:32,865 --> 00:15:36,001
how those work in
UNIX file systems.

315
00:15:36,001 --> 00:15:38,637
Okay, so we start with
a simple directory.

316
00:15:38,637 --> 00:15:42,473
It's got five files in it plus
the dot and dot-dot links.

317
00:15:42,474 --> 00:15:45,978
By the way, quiz time,
there's an RMO in it

318
00:15:45,978 --> 00:15:47,378
for the first person
who can tell me

319
00:15:47,379 --> 00:15:49,882
what the file names
are in this directory.

320
00:15:49,882 --> 00:15:53,051
Okay, so while you're
working on that.

321
00:15:54,720 --> 00:15:56,922
So here we've got a
simple directory, right,

322
00:15:56,922 --> 00:15:59,591
so we got five files, bang,
bang, bang, bang, bang,

323
00:15:59,591 --> 00:16:01,327
plus the dot and dot-dot link.

324
00:16:01,327 --> 00:16:03,395
One thing to notice here,

325
00:16:03,395 --> 00:16:06,497
check out the
entry length field,

326
00:16:06,498 --> 00:16:10,602
which is the second
column, on that last entry.

327
00:16:10,602 --> 00:16:11,971
You see it's a big number?

328
00:16:11,971 --> 00:16:16,075
Remember, it's little
envian, so it's 0FB4.

329
00:16:16,075 --> 00:16:18,610
Okay, so for those of
you who don't want to

330
00:16:18,610 --> 00:16:20,713
pull out your trusty calculator,

331
00:16:20,713 --> 00:16:22,481
I'll do the Math for you.

332
00:16:22,481 --> 00:16:25,150
That number corresponds to 4020.

333
00:16:27,419 --> 00:16:28,954
If you do the Math on this,

334
00:16:28,954 --> 00:16:32,824
there's 76 bytes of directory
entries preceding that entry.

335
00:16:35,661 --> 00:16:39,231
And so, the way this works
in ext files systems,

336
00:16:39,231 --> 00:16:42,501
the last entry is
always block aligned,

337
00:16:43,802 --> 00:16:47,573
so however much space
is left in the block,

338
00:16:47,573 --> 00:16:51,477
that's what the length of
the last entry is, okay.

339
00:16:51,477 --> 00:16:54,413
Directory entries are
not allowed to cross
block boundaries.

340
00:16:54,413 --> 00:16:57,516
So anyway, just a
little note there.

341
00:16:57,516 --> 00:17:01,420
Okay now, let's see what
happens to this directory

342
00:17:01,420 --> 00:17:04,923
if I basically rm minus
rf that directory.

343
00:17:06,525 --> 00:17:08,660
Now, if I rm minus
rf that directory,

344
00:17:08,660 --> 00:17:12,031
the inode that used to
point to this directory

345
00:17:12,031 --> 00:17:16,667
is zeroed out, but the block
that was that directory file

346
00:17:16,667 --> 00:17:20,104
is still there on disk and
you can take a look at it,

347
00:17:20,105 --> 00:17:23,842
and what you see
just at the surface,

348
00:17:23,842 --> 00:17:28,280
take a look at the entry
length for the dot-dot field.

349
00:17:28,280 --> 00:17:30,949
You'll notice that it's
another big number,

350
00:17:30,949 --> 00:17:34,486
so what happens when I rm
minus rf a directory is

351
00:17:34,486 --> 00:17:38,657
all of the files get
unlinked from that directory,

352
00:17:39,992 --> 00:17:43,829
so just before the directory
itself is unlinked,

353
00:17:43,829 --> 00:17:45,731
it's an empty directory, okay,

354
00:17:45,731 --> 00:17:47,266
and so that's what
you see there.

355
00:17:47,266 --> 00:17:51,437
The entry length for that
dot-dot link is actually 4084.

356
00:17:55,407 --> 00:17:58,577
Basically, the 12
bytes of the dot entry,

357
00:17:58,577 --> 00:18:01,680
and then, everything
else in the block.

358
00:18:01,680 --> 00:18:05,017
But if you look past
that dot-dot entry,

359
00:18:06,585 --> 00:18:10,122
you can still see the
original directory entries

360
00:18:10,122 --> 00:18:13,692
for the files that used
to be in that directory.

361
00:18:13,692 --> 00:18:16,161
They're basically now in the
slack space of the directory,

362
00:18:16,161 --> 00:18:18,464
the unallocated space
of that directory,

363
00:18:18,464 --> 00:18:21,066
but you can go parse them out.

364
00:18:21,066 --> 00:18:22,634
They haven't moved.

365
00:18:22,634 --> 00:18:24,136
The data is still there.

366
00:18:24,136 --> 00:18:26,705
The inode numbers and the
file names are still there,

367
00:18:26,705 --> 00:18:29,073
so you can parse them out,

368
00:18:29,074 --> 00:18:32,678
and this is the way deletion
works in UNIX directory files.

369
00:18:32,678 --> 00:18:36,014
When you delete a file
somewhere in the directory,

370
00:18:36,014 --> 00:18:39,818
the previous entry
grows to basically

371
00:18:39,818 --> 00:18:43,155
consume the old deleted
directory entry.

372
00:18:43,155 --> 00:18:45,791
But the old directory
entry is still there

373
00:18:45,791 --> 00:18:48,961
and can be parsed out if
you go looking for it,

374
00:18:48,961 --> 00:18:50,829
so one of the things
that you need to do

375
00:18:50,829 --> 00:18:53,398
when you're groveling through
these UNIX directory files

376
00:18:53,398 --> 00:18:56,767
is if you've got a
bunch of slack space

377
00:18:56,768 --> 00:18:58,537
at the end of a directory entry,

378
00:18:58,537 --> 00:19:01,840
go look at that and see if it's
a parsable directory entry.

379
00:19:01,840 --> 00:19:04,643
You know it has to be
four byte aligned, right,

380
00:19:04,643 --> 00:19:07,446
so you can write
some parsing code

381
00:19:07,446 --> 00:19:09,481
to go find the deleted
directory entries,

382
00:19:09,481 --> 00:19:10,983
because, you know, in this case,

383
00:19:10,983 --> 00:19:12,818
the deleted directory
entries are interesting.

384
00:19:12,818 --> 00:19:14,653
They tell me the file names

385
00:19:14,653 --> 00:19:16,655
that were in that
directory originally.

386
00:19:16,655 --> 00:19:19,024
Anybody got the file names yet?

387
00:19:19,024 --> 00:19:19,858
Come on.

388
00:19:20,993 --> 00:19:22,360
- [Man In Audience] See
to a dot at the end.

389
00:19:22,361 --> 00:19:24,096
- Correct, good call.

390
00:19:29,368 --> 00:19:31,102
Good catch, okay, so,

391
00:19:32,504 --> 00:19:35,206
all right, so great,
so now we've got,

392
00:19:35,207 --> 00:19:38,410
you know, deleted directory
entries that we care about,

393
00:19:38,410 --> 00:19:40,646
and we need to parse for those.

394
00:19:40,646 --> 00:19:43,315
Now, the other thing
is this, you know,

395
00:19:43,315 --> 00:19:45,083
thing I talked about
with inode churn, right,

396
00:19:45,083 --> 00:19:48,587
you're gonna find a lot
of conflicting information

397
00:19:48,587 --> 00:19:51,290
when you go through
a UNIX file system.

398
00:19:51,290 --> 00:19:54,259
You're gonna find
a bunch of blocks

399
00:19:54,259 --> 00:19:57,296
that all talk about
the same inode number,

400
00:19:57,296 --> 00:19:59,631
and they may tell you
that that inode number

401
00:19:59,631 --> 00:20:02,701
is associated with
different file names.

402
00:20:02,701 --> 00:20:06,171
So you go parsing through the
blocks in your file system,

403
00:20:06,171 --> 00:20:09,708
your damaged file system,
and you find 12 blocks

404
00:20:09,708 --> 00:20:13,579
that say, you know,
inode number 390936 is

405
00:20:13,579 --> 00:20:17,749
tmp/systemd, some random
GUID that has NJU in it,

406
00:20:19,318 --> 00:20:22,788
and then, you find another
10 blocks that say,

407
00:20:22,788 --> 00:20:25,390
that same inode number, 390936,

408
00:20:25,390 --> 00:20:29,561
is tmp/systemd, some other
GUID that starts qYK something.

409
00:20:31,463 --> 00:20:36,101
So the question is which
information is correct?

410
00:20:36,101 --> 00:20:37,536
Which do you believe?

411
00:20:37,536 --> 00:20:41,039
If you're trying to
reconstruct the file system,

412
00:20:41,039 --> 00:20:42,774
which one is it?

413
00:20:42,774 --> 00:20:45,476
Okay, so since I can't
really see people,

414
00:20:45,477 --> 00:20:47,012
we'll do this by applause.

415
00:20:47,012 --> 00:20:49,681
How many people think
it's the first one,

416
00:20:49,681 --> 00:20:53,685
the 12 blocks that say it's
systemd NJU blah, blah, blah,

417
00:20:53,685 --> 00:20:56,488
so applaud if you
think that's the one.

418
00:20:56,488 --> 00:20:57,322
Wow, okay.

419
00:20:58,290 --> 00:20:59,791
Okay, that guy.

420
00:20:59,791 --> 00:21:02,961
All right, so how many of you
think it's the second one,

421
00:21:02,961 --> 00:21:05,631
it's the 10 blocks that say qYK?

422
00:21:06,865 --> 00:21:08,667
Wow, nobody is
willing to put their

423
00:21:08,667 --> 00:21:10,034
money where their
mouth is on this one.

424
00:21:10,035 --> 00:21:12,271
Okay, so there was
more people that said

425
00:21:12,271 --> 00:21:14,438
it was the second one.

426
00:21:14,439 --> 00:21:15,774
Huh, guess what?

427
00:21:16,808 --> 00:21:18,910
It's neither one.

428
00:21:18,910 --> 00:21:20,412
The file had actually been

429
00:21:20,412 --> 00:21:22,714
completely unallocated from
the original file system.

430
00:21:22,714 --> 00:21:25,216
What you're finding is
old residual data that

431
00:21:25,217 --> 00:21:28,587
actually isn't even relevant
to the original file system.

432
00:21:28,587 --> 00:21:30,555
Ha, welcome to my world.

433
00:21:30,555 --> 00:21:33,425
Okay, so this gives
you an idea of

434
00:21:33,425 --> 00:21:36,895
some of the complications that
arise trying to reconstruct

435
00:21:36,895 --> 00:21:40,532
this information into a
meaningful file system.

436
00:21:40,532 --> 00:21:43,668
So I spent a bunch of time
beating my head around this,

437
00:21:43,669 --> 00:21:46,138
and trying to come up with
little puristic methods

438
00:21:46,138 --> 00:21:49,408
and things like that,
and I've got a tool now

439
00:21:49,408 --> 00:21:53,911
that I think is about
95, 98% effective

440
00:21:53,912 --> 00:21:56,615
at rebuilding the
original file system

441
00:21:56,615 --> 00:21:58,950
just from the basic data blocks,

442
00:21:58,950 --> 00:22:02,321
and I checked that in
to a new Git Hub repo

443
00:22:02,321 --> 00:22:04,222
this morning before I came down,

444
00:22:04,222 --> 00:22:07,526
and with apologies
to David Kovar,

445
00:22:07,526 --> 00:22:09,961
I call the tool, Analyze EXT.

446
00:22:11,430 --> 00:22:13,999
Some of you may have used
David's Analyze MFT tool,

447
00:22:13,999 --> 00:22:17,302
and I'm sure I'll get a
complaining email from him

448
00:22:17,302 --> 00:22:19,036
from stealing his
idea, so anyways,

449
00:22:19,037 --> 00:22:22,074
so there's an Analyze
EXT tool that you can use

450
00:22:22,074 --> 00:22:26,812
that will try and reconstruct
a file system layout

451
00:22:26,812 --> 00:22:29,814
purely based on data
block information

452
00:22:29,815 --> 00:22:32,417
that it finds in your image.

453
00:22:32,417 --> 00:22:35,853
It also can just dump
out raw information

454
00:22:37,489 --> 00:22:39,725
about what it finds in
these directory blocks,

455
00:22:39,725 --> 00:22:42,026
and it dumps it out in
a tab delimited format

456
00:22:42,027 --> 00:22:44,296
so that you can like load
it into a spreadsheet

457
00:22:44,296 --> 00:22:46,064
and process the data that way.

458
00:22:46,064 --> 00:22:48,800
(dramatic music)

