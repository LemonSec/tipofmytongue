1
00:00:08,775 --> 00:00:10,410
(audience claps)

2
00:00:10,410 --> 00:00:11,945
- Thank you, everybody.

3
00:00:11,945 --> 00:00:13,913
Thank you Matt, for
the introduction.

4
00:00:13,913 --> 00:00:15,115
I'd also just like to point out

5
00:00:15,115 --> 00:00:16,383
that the lights
aren't that bright,

6
00:00:16,383 --> 00:00:18,551
so everyone else who
was up here before,

7
00:00:18,551 --> 00:00:19,852
I don't know what
their problem was.

8
00:00:19,853 --> 00:00:21,688
But I can see all of your faces

9
00:00:21,688 --> 00:00:24,090
smiling at me, and I love it.

10
00:00:25,892 --> 00:00:27,927
So I'm Dave Pany, I'm
an incident response,

11
00:00:27,927 --> 00:00:30,230
and a forensics consultant.

12
00:00:30,230 --> 00:00:31,898
I'm a Python hobbyist.

13
00:00:31,898 --> 00:00:34,501
The tool we're talking about
today is written in Python.

14
00:00:34,501 --> 00:00:38,605
Not a Python expert, so
if it is quirky or weird,

15
00:00:40,073 --> 00:00:41,341
just letting you
know that up front.

16
00:00:41,341 --> 00:00:42,876
There's my GitHub link,

17
00:00:42,876 --> 00:00:46,646
and there will be some more
information about that later.

18
00:00:46,646 --> 00:00:48,281
I also am a self-described

19
00:00:48,281 --> 00:00:50,650
curator of bespoken
artisan, artifacts.

20
00:00:50,650 --> 00:00:53,053
I like to find new things.

21
00:00:53,053 --> 00:00:55,321
The talk that I am following,
is really difficult to follow,

22
00:00:55,321 --> 00:00:56,855
because that was really awesome.

23
00:00:56,856 --> 00:00:59,092
I like to see all kinds of
interesting things like that,

24
00:00:59,092 --> 00:01:02,128
weird parsing, and all
kinds of interesting things.

25
00:01:02,128 --> 00:01:05,999
I'm also quite fond of not
just payment card breaches,

26
00:01:05,999 --> 00:01:07,366
but investigating them.

27
00:01:07,367 --> 00:01:08,935
I think they're a lot of fun.

28
00:01:08,935 --> 00:01:11,171
And my time as an
incident responder,

29
00:01:11,171 --> 00:01:14,107
I've had some great examples
of, and great experiences,

30
00:01:14,107 --> 00:01:16,676
tracking down financially
motivated attack groups.

31
00:01:16,676 --> 00:01:19,412
Trying to find the credit
card data that they've stolen,

32
00:01:19,412 --> 00:01:21,147
and trying to see
if we can figure out

33
00:01:21,147 --> 00:01:23,349
how much data they've stolen.

34
00:01:23,349 --> 00:01:26,019
That's my Twitter
handle as well.

35
00:01:26,019 --> 00:01:27,454
Not David Pany.

36
00:01:27,454 --> 00:01:30,789
I'm not a lawyer, so I
cannot give any legal advice

37
00:01:30,790 --> 00:01:34,694
about what to do if you
have a credit card breach.

38
00:01:34,694 --> 00:01:38,765
Not a PFI, PCI forensic
investigator, not a QSA.

39
00:01:38,765 --> 00:01:40,700
You may be thinking, "Well
Dave, why are you up there?"

40
00:01:40,700 --> 00:01:42,669
I can't answer that
question either.

41
00:01:42,669 --> 00:01:45,038
And I'm also not responsible
for any errors that occur,

42
00:01:45,038 --> 00:01:46,872
like if my tool does
count something wrong.

43
00:01:46,873 --> 00:01:48,374
I'm more than happy to
help you troubleshoot it,

44
00:01:48,374 --> 00:01:50,276
but please don't sue me.

45
00:01:50,276 --> 00:01:51,678
I don't want to do
that, and my employer

46
00:01:51,678 --> 00:01:55,014
doesn't want to be
responsible for that either.

47
00:01:55,014 --> 00:01:56,249
So who dat?

48
00:01:56,249 --> 00:01:58,318
What are we talking
about with CDPO?

49
00:01:58,318 --> 00:02:02,255
The credit card data
processor and organizer.

50
00:02:02,255 --> 00:02:04,591
Throughout the next 30
minutes, we're gonna talk about

51
00:02:04,591 --> 00:02:07,292
what magnetic track data
looks like on a credit card.

52
00:02:07,293 --> 00:02:10,230
An example of how we use
credit cards to buy things,

53
00:02:10,229 --> 00:02:12,465
and what that looks like a
little bit on the back end.

54
00:02:12,465 --> 00:02:15,401
And also an example
of how attackers steal
this information,

55
00:02:15,401 --> 00:02:18,371
and then how we find
out what they've stolen.

56
00:02:18,371 --> 00:02:19,906
We'll talk about the
old way to do it,

57
00:02:19,906 --> 00:02:23,309
and then we'll talk about
the new way, the CDPO way.

58
00:02:23,309 --> 00:02:25,111
And give you a little demo.

59
00:02:25,111 --> 00:02:27,914
So that's what we're
gonna talk about today.

60
00:02:27,914 --> 00:02:29,214
What is magnetic
track data look like?

61
00:02:29,215 --> 00:02:30,416
I had that hard drive on there.

62
00:02:30,416 --> 00:02:32,118
When I think at a
forensic's conference,

63
00:02:32,118 --> 00:02:33,353
when you think about magnets,

64
00:02:33,353 --> 00:02:34,320
that's kind of what
we're thinking of,

65
00:02:34,320 --> 00:02:35,822
so we got rid of that.

66
00:02:35,822 --> 00:02:40,727
When you look at a magnetic
track data on your credit card,

67
00:02:40,727 --> 00:02:42,028
it's just a black strip.

68
00:02:42,028 --> 00:02:43,463
You may think, "What
the heck is that?"

69
00:02:43,463 --> 00:02:45,899
But when you swipe it,
the special readers

70
00:02:45,899 --> 00:02:48,201
can pull this type of
information off of it.

71
00:02:48,201 --> 00:02:50,303
You'll see track one
and track two on there,

72
00:02:50,303 --> 00:02:52,405
they should be on pretty
much every credit card.

73
00:02:52,405 --> 00:02:54,707
Track one, the big
difference is it has a name.

74
00:02:54,707 --> 00:02:56,509
We'll look at what the
other information is.

75
00:02:56,509 --> 00:03:00,779
Track three, I have heard
it exists, never seen it.

76
00:03:00,780 --> 00:03:04,184
And a fun fact, we were
trying to determine

77
00:03:04,184 --> 00:03:07,053
if malware was
effectively capturing

78
00:03:07,053 --> 00:03:08,454
credit card numbers one time,

79
00:03:08,454 --> 00:03:10,023
and I saw this in
the output file.

80
00:03:10,023 --> 00:03:13,927
So I reached into my
wallet, and I said,

81
00:03:13,927 --> 00:03:15,460
"Man, that does look like
my credit card number,

82
00:03:15,461 --> 00:03:16,963
this is some pretty
good malware."

83
00:03:16,963 --> 00:03:18,464
And I did find my own stuff,

84
00:03:18,464 --> 00:03:19,699
and then all my
co-workers were like,

85
00:03:19,699 --> 00:03:21,267
"Hey, can you see if my
name's in there, too?"

86
00:03:21,267 --> 00:03:23,203
It was kind of fun,
kind of terrifying.

87
00:03:23,203 --> 00:03:26,706
And a lot of evil
responsibility to have.

88
00:03:26,706 --> 00:03:28,474
But these are things
you may come across

89
00:03:28,474 --> 00:03:32,845
when you're investigating
a credit card breach.

90
00:03:32,845 --> 00:03:34,614
Now I do just kind of
feel like this guy.

91
00:03:34,614 --> 00:03:36,115
The LifeLock guy who put his

92
00:03:36,115 --> 00:03:37,383
social security number
on the billboard.

93
00:03:37,383 --> 00:03:39,619
You all saw a credit
card number of mine,

94
00:03:39,619 --> 00:03:41,221
but it's expired, and
it wasn't real anyway,

95
00:03:41,221 --> 00:03:42,455
so I don't really feel that bad.

96
00:03:42,455 --> 00:03:43,990
But I thought it'd
be a fun slide.

97
00:03:43,990 --> 00:03:45,792
So let's look at
breakdown track data.

98
00:03:45,792 --> 00:03:46,960
This is track one.

99
00:03:46,960 --> 00:03:48,695
It has our name
highlighted in orange,

100
00:03:48,695 --> 00:03:50,829
it'll be our primary
account number.

101
00:03:50,830 --> 00:03:53,099
That's the number on
the front of your card.

102
00:03:53,099 --> 00:03:55,969
Highlighted in blue there,
is gonna be my name.

103
00:03:55,969 --> 00:03:58,271
And highlighted in green is
gonna be the expiration date,

104
00:03:58,271 --> 00:04:00,206
in year/year,
month/month format.

105
00:04:00,206 --> 00:04:02,308
Track two will be
the exact same,

106
00:04:02,308 --> 00:04:03,543
except some of the delimiters

107
00:04:03,543 --> 00:04:05,178
at the beginning and the
end will be different.

108
00:04:05,178 --> 00:04:07,079
And instead of a
caret name caret,

109
00:04:07,080 --> 00:04:09,048
it'll just have an equal sign.

110
00:04:09,048 --> 00:04:12,785
This is all the information
you need to make ...

111
00:04:12,785 --> 00:04:14,320
Well, partially, this is
the information you need

112
00:04:14,320 --> 00:04:18,858
to generate a fake credit
card, or to make a transaction.

113
00:04:18,858 --> 00:04:21,527
Along with the less
interesting data,

114
00:04:21,527 --> 00:04:24,197
such as the security code.

115
00:04:24,197 --> 00:04:25,765
Fun fact, the security
code on the magnet,

116
00:04:25,765 --> 00:04:27,066
is different than
the security code

117
00:04:27,066 --> 00:04:28,167
printed on the
back of your card.

118
00:04:28,167 --> 00:04:29,736
So those won't line up.

119
00:04:29,736 --> 00:04:31,804
And that's how your bank
knows if it was a card present

120
00:04:31,804 --> 00:04:33,272
or a card not
present transaction,

121
00:04:33,273 --> 00:04:35,041
which I thought was
interesting to learn.

122
00:04:35,041 --> 00:04:36,342
But that's the
other stuff there.

123
00:04:36,342 --> 00:04:37,844
Everything after
the expiration date

124
00:04:37,844 --> 00:04:41,447
is kind of discretionary to
the card brand, and the bank.

125
00:04:41,447 --> 00:04:42,882
And they may put
different things in there,

126
00:04:42,882 --> 00:04:44,884
maybe a different length levels.

127
00:04:44,884 --> 00:04:47,320
And I think I had a link
to a Wikipedia page,

128
00:04:47,320 --> 00:04:49,022
where it's just where
I do all my research.

129
00:04:49,022 --> 00:04:54,027
So my high school teachers
are very disappointed in me.

130
00:04:54,027 --> 00:04:56,628
So when you buy something,
you swipe your card,

131
00:04:56,629 --> 00:04:58,097
it goes on that
cool little reader.

132
00:04:58,097 --> 00:05:00,166
It decodes the data
that we just looked at,

133
00:05:00,166 --> 00:05:01,668
sends that into
the POS terminal,

134
00:05:01,668 --> 00:05:04,637
which is running Windows,
Linux, iPad, whatever it is.

135
00:05:04,637 --> 00:05:08,841
Sends that in there, in clear
text usually, by the way.

136
00:05:08,841 --> 00:05:11,077
And then the POS application
will send that to the bank,

137
00:05:11,077 --> 00:05:13,146
and say, "Hey, look I
have this track data,

138
00:05:13,146 --> 00:05:15,715
can you please validate it,
make sure the credit limit

139
00:05:15,715 --> 00:05:18,183
has enough to make
this purchase."

140
00:05:18,184 --> 00:05:19,719
You know, for me
and my black card,

141
00:05:19,719 --> 00:05:21,788
I never get
declined, it's great.

142
00:05:21,788 --> 00:05:24,857
But, oh wait, that's not me.

143
00:05:24,857 --> 00:05:26,326
But this is how it works.

144
00:05:26,326 --> 00:05:28,194
Important to keep in mind
that on most systems,

145
00:05:28,194 --> 00:05:31,030
by default, the card
reader, when you swipe it,

146
00:05:31,030 --> 00:05:32,664
does not encrypt the data.

147
00:05:32,665 --> 00:05:33,900
Just sends it in clear text,

148
00:05:33,900 --> 00:05:35,435
as you just saw it to
the POS application.

149
00:05:35,435 --> 00:05:36,703
There are third party solutions,

150
00:05:36,703 --> 00:05:38,371
that when you make
a transaction,

151
00:05:38,371 --> 00:05:39,938
it will encrypt it
right at the reader.

152
00:05:39,939 --> 00:05:41,207
And from then on it's difficult

153
00:05:41,207 --> 00:05:43,376
for an attacker to
steal and decrypt.

154
00:05:43,376 --> 00:05:46,546
But, when it's not encrypted,

155
00:05:46,546 --> 00:05:49,182
it's easier for the
attacker to get.

156
00:05:49,182 --> 00:05:52,018
So that's what it looks like
when you make a purchase.

157
00:05:52,018 --> 00:05:54,986
Let's see what happens, how
an attacker exploits that.

158
00:05:54,987 --> 00:05:58,658
They will put card scraping
malware on a POS system,

159
00:05:58,658 --> 00:06:00,493
which is, you're just going
to process the memory.

160
00:06:00,493 --> 00:06:02,161
And it keeps scanning, and
scanning, and scanning,

161
00:06:02,161 --> 00:06:04,097
looking for a regular expression

162
00:06:04,097 --> 00:06:06,366
that matches that track data
format that we looked about.

163
00:06:06,366 --> 00:06:08,700
Either track one or
track two, probably both,

164
00:06:08,701 --> 00:06:10,636
they wanna grab all the tracks.

165
00:06:10,636 --> 00:06:12,105
Tracks on tracks, on tracks.

166
00:06:12,105 --> 00:06:13,873
We've seen certain card scrapers

167
00:06:13,873 --> 00:06:16,442
that'll just tear
up all the memory.

168
00:06:16,442 --> 00:06:18,277
Some of them will be focused on

169
00:06:18,277 --> 00:06:19,611
a specific application memory.

170
00:06:19,612 --> 00:06:21,481
There are different
POS applications,

171
00:06:21,481 --> 00:06:22,849
they'll just be scanning
the memory sections

172
00:06:22,849 --> 00:06:25,118
of that executable.

173
00:06:25,118 --> 00:06:26,586
So they'll run a Regex.

174
00:06:26,586 --> 00:06:30,156
Some of them may do some
validation, some might not.

175
00:06:30,156 --> 00:06:33,693
And then the interesting
thing is that ...

176
00:06:33,693 --> 00:06:34,926
What the attacker tries to do,

177
00:06:34,927 --> 00:06:36,396
is they have to get
this credit card data

178
00:06:36,396 --> 00:06:39,899
out of the memory, and into
a file, or registry key.

179
00:06:39,899 --> 00:06:42,468
Or maybe they'll send it an
aggregation server somewhere.

180
00:06:42,468 --> 00:06:43,703
But as an investigator,

181
00:06:43,703 --> 00:06:44,904
we need to find where
that output file is,

182
00:06:44,904 --> 00:06:47,974
'cause that's what
we're trying to count.

183
00:06:47,974 --> 00:06:49,575
And it's likely encoded.

184
00:06:49,575 --> 00:06:53,079
I haven't seen many credit
card scraping malware,

185
00:06:53,079 --> 00:06:54,947
like just write it
out in clear text.

186
00:06:54,947 --> 00:06:57,116
So everyone who runs
the default EnCase,

187
00:06:57,116 --> 00:06:59,585
like credit card, or
pan, or track data.

188
00:06:59,585 --> 00:07:01,186
Regex then get four
million false positives,

189
00:07:01,187 --> 00:07:02,622
and has never found
anything good.

190
00:07:02,622 --> 00:07:05,858
Probably not gonna help
you for a lot of these.

191
00:07:05,858 --> 00:07:07,994
Bulk Extractor is good at
finding track data, though.

192
00:07:07,994 --> 00:07:09,128
'Cause it does some
of the validations

193
00:07:09,128 --> 00:07:10,363
we're gonna talk about.

194
00:07:10,363 --> 00:07:13,065
But if it's encoded,
it doesn't matter.

195
00:07:13,065 --> 00:07:15,701
So, what are the steps
in investigating,

196
00:07:15,701 --> 00:07:17,603
and trying to find out
how much track data

197
00:07:17,603 --> 00:07:19,872
we can confirm that
the attacker had,

198
00:07:19,872 --> 00:07:21,674
or that we can at least dig up?

199
00:07:21,674 --> 00:07:23,775
Keep in mind the fines
that the victim faces

200
00:07:23,776 --> 00:07:26,145
will be based probably on
the entire exposure window

201
00:07:26,145 --> 00:07:27,780
of when the first
system was hacked,

202
00:07:27,780 --> 00:07:29,080
till when those were mediated.

203
00:07:29,081 --> 00:07:30,817
It doesn't matter
how much you find,

204
00:07:30,817 --> 00:07:33,119
it's gonna be however long
they think they were hacked,

205
00:07:33,119 --> 00:07:34,887
and all the cards
processed during that time

206
00:07:34,887 --> 00:07:36,956
should be deemed compromised.

207
00:07:36,956 --> 00:07:39,926
But our card brands
and our clients

208
00:07:39,926 --> 00:07:41,426
want us to find out what we can,

209
00:07:41,427 --> 00:07:44,630
and track down as much as we
can, which is why we do this.

210
00:07:44,630 --> 00:07:47,400
So finding and decoding
the track data,

211
00:07:47,400 --> 00:07:49,234
is something that I
don't have anything new

212
00:07:49,235 --> 00:07:51,537
to present to you for, but we're
gonna talk about it anyway.

213
00:07:51,537 --> 00:07:52,839
And then going through
the next couple steps,

214
00:07:52,839 --> 00:07:55,741
or how we can improve
upon the old ways.

215
00:07:55,741 --> 00:07:57,376
We can aggregate
the data we find,

216
00:07:57,376 --> 00:08:00,212
remove duplicates,
validate it, organize it,

217
00:08:00,213 --> 00:08:01,681
and generate statistics
that are useful

218
00:08:01,681 --> 00:08:03,515
for everyone involved.

219
00:08:04,684 --> 00:08:06,719
So, how do we find
the track data,

220
00:08:06,719 --> 00:08:08,888
if we can't do keyword searches?

221
00:08:08,888 --> 00:08:10,823
The most helpful thing is
if it's an attack group

222
00:08:10,823 --> 00:08:13,359
you know about, like
Raw POS, or Carbanak,

223
00:08:13,359 --> 00:08:15,394
or someone that you've
seen in the past.

224
00:08:15,394 --> 00:08:17,763
Any of the thin groups that
you may have heard about.

225
00:08:17,763 --> 00:08:20,233
You may know, "Oh, this is
a specific malware family.

226
00:08:20,233 --> 00:08:22,568
I know what the
filenames are gonna be,

227
00:08:22,568 --> 00:08:24,370
I know where they're gonna
write the output to."

228
00:08:24,370 --> 00:08:26,739
You can go find them easily.

229
00:08:26,739 --> 00:08:27,673
If you don't have
that information,

230
00:08:27,673 --> 00:08:29,408
or if it's a new attack group,

231
00:08:29,408 --> 00:08:32,378
you might have to find
the malware file itself.

232
00:08:32,378 --> 00:08:33,880
Do some reverse
engineering, find out,

233
00:08:33,880 --> 00:08:36,716
"Oh, this is writing it
out to a specific file,

234
00:08:36,716 --> 00:08:38,084
or a specific registry key."

235
00:08:38,083 --> 00:08:41,353
And you have to get
that, and it's gonna be

236
00:08:41,354 --> 00:08:43,856
a bit more of a manual process.

237
00:08:43,856 --> 00:08:45,658
And you're also gonna have
to collect all this data,

238
00:08:45,658 --> 00:08:46,993
from all the systems
that they have access to,

239
00:08:46,993 --> 00:08:48,895
all the systems they
think they're stored on.

240
00:08:48,895 --> 00:08:51,364
An attacker may
compromise one server

241
00:08:51,364 --> 00:08:53,766
in an organization,
and then deploy

242
00:08:53,766 --> 00:08:55,901
their POS malware out
to all the locations.

243
00:08:55,902 --> 00:08:57,370
And from there, they'll
take the output files,

244
00:08:57,370 --> 00:08:58,871
and collect it all back there.

245
00:08:58,871 --> 00:09:01,841
Great place to find tons
and tons of output files.

246
00:09:01,841 --> 00:09:03,376
You may want to
check there, as well.

247
00:09:03,376 --> 00:09:05,343
And you may have to
extract any interesting

248
00:09:05,344 --> 00:09:07,547
places that the
credit card data's at.

249
00:09:07,547 --> 00:09:09,482
Attackers be stealthin',
they're trying to be sneaky,

250
00:09:09,482 --> 00:09:11,416
they don't want EnCase
to find anything,

251
00:09:11,417 --> 00:09:15,354
which I mean, not that
hard to accomplish.

252
00:09:15,354 --> 00:09:17,823
But they may encode their data

253
00:09:17,823 --> 00:09:19,292
because they will
hide it in a ...

254
00:09:19,292 --> 00:09:20,927
Oh no!

255
00:09:20,927 --> 00:09:22,795
They will hide it in a ...

256
00:09:22,795 --> 00:09:24,564
Sorry, wrong button, user error.

257
00:09:24,564 --> 00:09:26,332
They'll encode, they'll
exrun encode it,

258
00:09:26,332 --> 00:09:27,667
they'll Base64 code it,

259
00:09:27,667 --> 00:09:29,468
they use some keys for
the exrun encoding,

260
00:09:29,468 --> 00:09:31,771
that may be difficult to remove.

261
00:09:31,771 --> 00:09:34,372
I have seen incident
response companies

262
00:09:34,373 --> 00:09:35,975
that they find the
credit card output files,

263
00:09:35,975 --> 00:09:37,743
and they don't know how
to reverse engineer it.

264
00:09:37,743 --> 00:09:39,912
They say, "I just don't
know what to do here."

265
00:09:39,912 --> 00:09:41,314
And they say, "I
guess we can't confirm

266
00:09:41,314 --> 00:09:43,449
any credit card data was
actually stolen by the malware."

267
00:09:43,449 --> 00:09:46,419
And holy cow, that's bold.

268
00:09:46,419 --> 00:09:47,687
So, if that ever happens to you,

269
00:09:47,687 --> 00:09:50,690
please get a second opinion.

270
00:09:50,690 --> 00:09:52,892
But somebody's gotta reverse
engineer this process,

271
00:09:52,892 --> 00:09:54,393
and help you deal
with the decoding.

272
00:09:54,393 --> 00:09:56,896
I'm not an expert at
that, so good luck.

273
00:09:56,896 --> 00:09:58,363
If you have any questions,
I can try and help,

274
00:09:58,364 --> 00:10:02,001
but that's really depends
on the malware family.

275
00:10:02,001 --> 00:10:03,202
So the old ways to do,

276
00:10:03,202 --> 00:10:04,637
the next thing's we're
gonna talk about.

277
00:10:04,637 --> 00:10:06,171
You wanna aggregate some files,

278
00:10:06,172 --> 00:10:08,274
where you found an output
file in every POS system.

279
00:10:08,274 --> 00:10:10,876
Maybe it made a new ouput
file every hour, every day.

280
00:10:10,876 --> 00:10:12,745
You need to collect
all these output files.

281
00:10:12,745 --> 00:10:14,814
Maybe you wanna organize
them by location.

282
00:10:14,814 --> 00:10:16,348
You found an aggregation server,

283
00:10:16,349 --> 00:10:17,883
you have all kinds
of output files.

284
00:10:17,883 --> 00:10:19,118
How do you keep track of them,

285
00:10:19,118 --> 00:10:20,886
how do you merge them
together for processing?

286
00:10:20,886 --> 00:10:22,021
Do you process
them all separately

287
00:10:22,021 --> 00:10:23,756
or do you cat them all together?

288
00:10:23,756 --> 00:10:27,927
In the old days we would cat
them together, and that was it.

289
00:10:29,629 --> 00:10:31,297
And then you have
duplicates, right?

290
00:10:31,297 --> 00:10:32,732
If I'm a repeat customer,

291
00:10:32,732 --> 00:10:34,634
I'll go back and I'll swipe
my card several times.

292
00:10:34,634 --> 00:10:37,503
Do I want to count that as
several lost card records?

293
00:10:37,503 --> 00:10:38,471
No, definitely not.

294
00:10:38,471 --> 00:10:39,972
We want to de-duplicate that,

295
00:10:39,972 --> 00:10:42,174
we don't want to
say that the ...

296
00:10:42,174 --> 00:10:45,544
More cards were stolen
then actually were.

297
00:10:45,544 --> 00:10:47,513
If we have output
files on the POS system

298
00:10:47,513 --> 00:10:49,582
and aggregation server, we
wanna de-duplicate that,

299
00:10:49,582 --> 00:10:51,617
so we don't have to
worry about that either.

300
00:10:51,617 --> 00:10:53,185
In the past, we would
run sort and unique

301
00:10:53,185 --> 00:10:56,789
Linux commands on these text
files to take care of that.

302
00:10:56,789 --> 00:10:58,324
Again, nothing very exciting,

303
00:10:58,324 --> 00:11:01,227
and it was a lot of
processing, a lot to do.

304
00:11:01,227 --> 00:11:02,161
We want to validate it.

305
00:11:02,161 --> 00:11:03,362
Are these cards real?

306
00:11:03,362 --> 00:11:04,796
Did the malware
just randomly scrape

307
00:11:04,797 --> 00:11:08,801
some stuff that seemed to
match the Regex, that was fake?

308
00:11:08,801 --> 00:11:10,302
There are a couple
validations we can perform.

309
00:11:10,302 --> 00:11:12,204
There's a math algorithm
called the Luhn algorithm,

310
00:11:12,204 --> 00:11:13,406
which we'll talk
about in a minute.

311
00:11:13,406 --> 00:11:17,309
That most credit cards
should comply to.

312
00:11:17,309 --> 00:11:19,178
We wanna see if the brand
matches a known brand,

313
00:11:19,178 --> 00:11:20,513
or if it's some random number,

314
00:11:20,513 --> 00:11:22,615
that probably won't
match a brand.

315
00:11:22,615 --> 00:11:23,849
We wanna see if the
expiration date,

316
00:11:23,849 --> 00:11:25,351
that was recorded
there was valid.

317
00:11:25,351 --> 00:11:27,953
Is the month recorded 22?

318
00:11:27,953 --> 00:11:30,021
Probably not a valid
track data record.

319
00:11:30,022 --> 00:11:31,157
If an attacker had that,

320
00:11:31,157 --> 00:11:33,325
they probably
wouldn't make a card,

321
00:11:33,325 --> 00:11:35,561
to make fraudulent
transactions with.

322
00:11:35,561 --> 00:11:37,363
And is the track data
in a valid format?

323
00:11:37,363 --> 00:11:38,431
If it's just garbledy-gook,

324
00:11:38,431 --> 00:11:40,099
that doesn't look like anything,

325
00:11:40,099 --> 00:11:42,101
but we do have other
real track data,

326
00:11:42,101 --> 00:11:44,503
we can probably filter
that out, as well.

327
00:11:44,503 --> 00:11:46,138
So the old method was
a lot of custom stuff.

328
00:11:46,138 --> 00:11:49,575
We would have custom
one parsing scripts,

329
00:11:49,575 --> 00:11:53,746
we'd have to run the
Regex stuff by ourselves.

330
00:11:53,746 --> 00:11:55,448
Trying to calculate
the brands and validate

331
00:11:55,448 --> 00:11:57,249
the expiration dates
was really tricky.

332
00:11:57,249 --> 00:11:59,285
We had all kinds of
custom Python scripts.

333
00:11:59,285 --> 00:12:01,219
And when I first got into
this, we would Google,

334
00:12:01,220 --> 00:12:02,722
"Hey, how do we do this,
how do we do this?"

335
00:12:02,722 --> 00:12:04,390
Like, "Is there anybody
who has done this before?"

336
00:12:04,390 --> 00:12:06,625
And I didn't find very much
documentation or anything,

337
00:12:06,625 --> 00:12:10,362
so we were kind of
making stuff as we went.

338
00:12:10,362 --> 00:12:13,766
Which isn't standardized,
isn't reviewed,

339
00:12:13,766 --> 00:12:16,801
there's no auditing, it was
just kind of interesting.

340
00:12:16,802 --> 00:12:18,437
That's how we did that.

341
00:12:18,437 --> 00:12:19,905
And then you're trying to
organize all these files.

342
00:12:19,905 --> 00:12:21,874
I have my encoded
files, I decoded them,

343
00:12:21,874 --> 00:12:23,943
now I have decoded
versions of the files.

344
00:12:23,943 --> 00:12:25,911
Now I aggregated them,
based on location.

345
00:12:25,911 --> 00:12:28,214
I catted them together, now I
have these aggregated files.

346
00:12:28,214 --> 00:12:29,448
I have de-duplicated files,

347
00:12:29,448 --> 00:12:31,283
where I've removed all
the unique lines ...

348
00:12:31,283 --> 00:12:33,252
Or, I've just kept
the unique lines,

349
00:12:33,252 --> 00:12:35,988
and I validated the ones
that pass the Luhn test,

350
00:12:35,988 --> 00:12:37,356
and I have to run
brand validation,

351
00:12:37,356 --> 00:12:39,425
and I have run expiration
date validation.

352
00:12:39,425 --> 00:12:41,392
All these files were
just all over the place,

353
00:12:41,393 --> 00:12:42,895
in different folders.

354
00:12:42,895 --> 00:12:44,563
And if you maybe forgot
a step on a certain file,

355
00:12:44,563 --> 00:12:46,665
you didn't know, you had
to take meticulous notes.

356
00:12:46,665 --> 00:12:48,400
It was a giant pain.

357
00:12:48,400 --> 00:12:50,935
And it was just really
difficult to keep track of.

358
00:12:50,936 --> 00:12:52,805
Very tough.

359
00:12:52,805 --> 00:12:55,440
And then you wanna calculate
some statistics, right?

360
00:12:55,441 --> 00:12:56,609
The victim and the
banks wanna know,

361
00:12:56,609 --> 00:12:58,244
well how many cards were stolen?

362
00:12:58,244 --> 00:13:01,514
We'd say, "Well, we have
50 primary account numbers

363
00:13:01,514 --> 00:13:05,017
that were found, but we
actually have 55 different

364
00:13:05,017 --> 00:13:07,820
primary account numbers and
expiration date combinations."

365
00:13:07,820 --> 00:13:09,655
My Costco card just expired,

366
00:13:09,655 --> 00:13:11,223
they sent me a new
one in the mail,

367
00:13:11,223 --> 00:13:12,591
and it had the
same account number

368
00:13:12,591 --> 00:13:14,026
with a different
expiration date.

369
00:13:14,026 --> 00:13:15,093
And now if I go
back to the store

370
00:13:15,094 --> 00:13:16,629
and swipe it one month later,

371
00:13:16,629 --> 00:13:18,430
they have the same number
with two expiration dates.

372
00:13:18,430 --> 00:13:20,565
People always get confused
about how that happens.

373
00:13:20,566 --> 00:13:22,268
That's the best
example I can have.

374
00:13:22,268 --> 00:13:24,336
Maybe a different authorized
user would do the same thing

375
00:13:24,336 --> 00:13:25,304
if they have the
same account number,

376
00:13:25,304 --> 00:13:27,039
but an expiration date.

377
00:13:27,039 --> 00:13:29,175
That's what we
wanna keep track of.

378
00:13:29,175 --> 00:13:31,010
American Express or
Discover calls us, says,

379
00:13:31,010 --> 00:13:32,511
"Hey, how many of our
cards were stolen?"

380
00:13:32,511 --> 00:13:33,444
Well, we have to validate.

381
00:13:33,445 --> 00:13:35,214
We gotta check some brands.

382
00:13:35,214 --> 00:13:37,449
These are some
things we can find.

383
00:13:37,449 --> 00:13:40,019
We wanna figure out how
many cards were found

384
00:13:40,019 --> 00:13:42,788
that the cards are
still valid, right?

385
00:13:42,788 --> 00:13:45,090
If this hack started a year ago,

386
00:13:45,090 --> 00:13:46,559
the cards that were
swiped a year ago

387
00:13:46,559 --> 00:13:47,959
may have expired since then,

388
00:13:47,960 --> 00:13:49,728
they may not be valid right now.

389
00:13:49,728 --> 00:13:51,197
I mean, they were
still compromised,

390
00:13:51,197 --> 00:13:53,098
but they may not
be valid right now.

391
00:13:53,098 --> 00:13:57,468
It is possible that people
will swipe expired cards.

392
00:13:57,469 --> 00:13:58,737
First time I saw it, I said,

393
00:13:58,737 --> 00:14:00,072
"Man, that person must
have been an idiot."

394
00:14:00,072 --> 00:14:01,874
And then two weeks
later, I did it myself,

395
00:14:01,874 --> 00:14:03,275
with a card I forgot I had.

396
00:14:03,275 --> 00:14:04,410
I swiped it, it got declined,
and I looked and said,

397
00:14:04,410 --> 00:14:05,644
"Aw crap, now I'm that idiot."

398
00:14:05,644 --> 00:14:07,346
So please don't
make fun of people

399
00:14:07,346 --> 00:14:09,849
if you see an expired card,
because we can all do that.

400
00:14:09,849 --> 00:14:11,350
And I have done that.

401
00:14:11,350 --> 00:14:13,686
So please make fun of me,
if you feel the need to.

402
00:14:13,686 --> 00:14:15,521
But the old way to do this
was with custom scripts,

403
00:14:15,521 --> 00:14:17,522
so it was whipping
stuff together,

404
00:14:17,523 --> 00:14:20,526
and seeing if it worked,
and hoping it did.

405
00:14:20,526 --> 00:14:22,828
So, why do we have the new way?

406
00:14:22,828 --> 00:14:24,964
It was really
difficult to keep track

407
00:14:24,964 --> 00:14:26,465
of what we were
doing consistently.

408
00:14:26,465 --> 00:14:29,635
Very difficult for a third
party to reproduce it.

409
00:14:29,635 --> 00:14:32,271
It was very difficult for
our peer to review it.

410
00:14:32,271 --> 00:14:34,006
Very difficult to keep
track of all these files,

411
00:14:34,006 --> 00:14:38,110
without really meticulous
notes and command line history.

412
00:14:38,110 --> 00:14:39,645
Difficult to de-duplicate.

413
00:14:39,645 --> 00:14:41,981
And if you try and open
this stuff in Excel,

414
00:14:41,981 --> 00:14:45,684
Excel only supports about
1,048,000 rows, which is ...

415
00:14:45,684 --> 00:14:48,820
You may not think you'd ever
hit that, but I have, so ...

416
00:14:48,821 --> 00:14:53,425
Gimme one second, I just have
to get this next part ready.

417
00:14:53,425 --> 00:14:54,260
Because we're gonna ...

418
00:14:54,260 --> 00:14:55,194
Oh no, got an ad.

419
00:14:55,194 --> 00:14:58,097
We have the new way coming up.

420
00:14:58,097 --> 00:15:00,432
I wanna introduce
to you guys, CDPO.

421
00:15:00,432 --> 00:15:02,368
(horns)

422
00:15:03,702 --> 00:15:06,572
With my sweet Rasta
horn sound effect.

423
00:15:06,572 --> 00:15:08,574
So the card data
processor and organizer,

424
00:15:08,574 --> 00:15:10,008
is the tool that I made,

425
00:15:10,009 --> 00:15:13,679
that helps deal with
some of these problems.

426
00:15:13,679 --> 00:15:16,015
Again, I'm not claiming
it to be 100% accurate.

427
00:15:16,015 --> 00:15:17,650
Please don't sue
me if it's wrong,

428
00:15:17,650 --> 00:15:21,520
but it's a repeatable process
that has been standardized.

429
00:15:21,520 --> 00:15:23,889
We can edit it, if we
find things are missing.

430
00:15:23,889 --> 00:15:25,591
It's open source,
it can be reviewed.

431
00:15:25,591 --> 00:15:28,661
It's portable, all it
requires is Python.

432
00:15:28,661 --> 00:15:31,664
Tried to even keep out
any Python dependencies,

433
00:15:31,664 --> 00:15:33,098
where you pip install.

434
00:15:33,098 --> 00:15:35,601
Because it's amazing,
every time I make a program

435
00:15:35,601 --> 00:15:38,404
that requires pip install,
that my usage goes down

436
00:15:38,404 --> 00:15:41,040
to like 5% of the people
who should be using it.

437
00:15:41,040 --> 00:15:43,509
So we tried to keep
it easy to use.

438
00:15:43,509 --> 00:15:45,377
It's pretty secure,
it encrypts the data,

439
00:15:45,377 --> 00:15:48,314
in the database that it creates
at rest, so that's good.

440
00:15:48,314 --> 00:15:52,483
Although you will still have
your clear text input data.

441
00:15:52,484 --> 00:15:54,253
It's flexible, we
can combine stuff.

442
00:15:54,253 --> 00:15:56,155
We can create subsets of data.

443
00:15:56,155 --> 00:15:58,589
It's way faster than
doing all the old stuff

444
00:15:58,590 --> 00:16:00,125
that we just talked about.

445
00:16:00,125 --> 00:16:02,594
So it's super fast, and it
helps you stay organized,

446
00:16:02,594 --> 00:16:04,697
and it's relatively easy.

447
00:16:05,864 --> 00:16:07,399
So some of the features.

448
00:16:07,399 --> 00:16:10,869
It's all Python, Python 2.X
or whatever, so no Python 3.

449
00:16:12,571 --> 00:16:16,175
You give it the input from
your decoded raw track files.

450
00:16:16,175 --> 00:16:18,544
The things that, you've found
them, you've decoded them.

451
00:16:18,544 --> 00:16:20,412
It'll run a Regex to
make sure that data

452
00:16:20,412 --> 00:16:22,548
is a track format, it'll
run the Luhn check.

453
00:16:22,548 --> 00:16:24,049
It will do some
simple brand matching,

454
00:16:24,049 --> 00:16:26,452
we'll talk about these, and
it will do RC4 encryption,

455
00:16:26,452 --> 00:16:29,154
because it's easy,
fast, easy to implement.

456
00:16:29,154 --> 00:16:30,622
In theory we could
add a different

457
00:16:30,622 --> 00:16:33,358
encryption method in the future,
if people really want that.

458
00:16:33,359 --> 00:16:35,160
But it's just nice to
have that in there.

459
00:16:35,160 --> 00:16:37,329
And you can pass the database
around between your co-workers

460
00:16:37,329 --> 00:16:39,564
and users can store
stuff in the database,

461
00:16:39,565 --> 00:16:41,400
they can load it
up with a password.

462
00:16:41,400 --> 00:16:43,102
It's nice.

463
00:16:43,102 --> 00:16:45,036
So here's the validations
that it's gonna do.

464
00:16:45,037 --> 00:16:47,940
This is the regular expression
we're gonna match on.

465
00:16:47,940 --> 00:16:49,041
We have ...

466
00:16:49,041 --> 00:16:51,577
Oh, again, these green buttons.

467
00:16:51,577 --> 00:16:54,947
The blue part is looking for
12-19 numbers, starting with 1.

468
00:16:54,947 --> 00:16:56,815
I don't think any credit card
numbers will start with zero,

469
00:16:56,815 --> 00:16:58,183
so we don't want
to match on those.

470
00:16:58,183 --> 00:16:59,451
We can change that if needed.

471
00:16:59,451 --> 00:17:00,719
Then it'll look for
the middle section,

472
00:17:00,719 --> 00:17:03,655
which is the equal sign,
or the caret name caret.

473
00:17:03,655 --> 00:17:05,391
Then it'll look for
the next four digits,

474
00:17:05,391 --> 00:17:06,925
which are gonna be
the expiration date.

475
00:17:06,925 --> 00:17:08,092
You may notice that
the security code,

476
00:17:08,093 --> 00:17:10,396
and the discretionary
date is missing.

477
00:17:10,396 --> 00:17:11,896
I don't really care about that,

478
00:17:11,896 --> 00:17:14,133
it doesn't help us track down
how many cards were stolen.

479
00:17:14,133 --> 00:17:17,469
But PSI reports do wanna
know if that data was there,

480
00:17:17,469 --> 00:17:19,071
so you may want to do
a manual verification,

481
00:17:19,070 --> 00:17:21,205
just say yes it is there,
and no it's not there.

482
00:17:21,205 --> 00:17:22,340
But in order to keep track

483
00:17:22,340 --> 00:17:23,742
of how many numbers were needed,

484
00:17:23,742 --> 00:17:26,377
we don't need that information,
so we don't include it.

485
00:17:26,377 --> 00:17:28,047
So, how do we do
the Luhn algorithm?

486
00:17:28,047 --> 00:17:30,883
The Luhn algorithm, which
maybe you pronounce it "Loon",

487
00:17:30,883 --> 00:17:33,252
I've been told it's Luhn.

488
00:17:33,252 --> 00:17:35,087
But it's a simple
math algorithm,

489
00:17:35,087 --> 00:17:37,056
where you double some of
the numbers, add them up,

490
00:17:37,056 --> 00:17:38,557
and mod it by the last number,

491
00:17:38,557 --> 00:17:40,893
and it has to equal
zero or something.

492
00:17:40,893 --> 00:17:42,027
It's relatively simple.

493
00:17:42,027 --> 00:17:43,529
There's the description
from Wikipedia.

494
00:17:43,529 --> 00:17:45,197
If want to check
it out, and a link.

495
00:17:45,197 --> 00:17:46,864
I know the text is small.

496
00:17:46,865 --> 00:17:50,402
But CDPO will check the
primary account number

497
00:17:50,402 --> 00:17:52,805
for the Luhn algorithm,
and see if it's valid.

498
00:17:52,805 --> 00:17:54,673
If it's not valid, we might want

499
00:17:54,673 --> 00:17:56,208
to assume that maybe their ...

500
00:17:56,208 --> 00:17:58,410
The credit card malware
was not so good,

501
00:17:58,410 --> 00:18:01,380
and it actually grabbed a
random number before the pan,

502
00:18:01,380 --> 00:18:02,781
so it actually cut
off the first one,

503
00:18:02,781 --> 00:18:04,216
and try that and see ...

504
00:18:04,216 --> 00:18:07,285
If the 18 digits I grabbed
weren't Luhn valid,

505
00:18:07,286 --> 00:18:10,022
let's try the 17 digits,
let's try the 16, the 15,

506
00:18:10,022 --> 00:18:13,358
and it'll go until,
I think, it hits 15.

507
00:18:14,359 --> 00:18:15,593
So it will do that.

508
00:18:15,594 --> 00:18:16,862
So just something
to keep in mind.

509
00:18:16,862 --> 00:18:18,397
It'll also tell you
if it's doing that.

510
00:18:18,397 --> 00:18:20,765
It'll say, "Hey,
x number of lines

511
00:18:20,766 --> 00:18:22,634
didn't contain the
Luhn valid pan,

512
00:18:22,634 --> 00:18:24,937
but the sub-strings
did contain pan."

513
00:18:24,937 --> 00:18:26,839
So it's just something
you may want to validate,

514
00:18:26,839 --> 00:18:28,373
and we'll help you
do that as well.

515
00:18:28,373 --> 00:18:31,510
Another question is, do
all brands require Luhn?

516
00:18:31,510 --> 00:18:34,580
As far as I know, all the
really popular ones do,

517
00:18:34,580 --> 00:18:36,747
but Wikipedia told
me that some don't.

518
00:18:36,748 --> 00:18:39,585
So we'll take a look
at that right here.

519
00:18:39,585 --> 00:18:40,986
Dave, how do you do
brand validation?

520
00:18:40,986 --> 00:18:42,621
You probably have
some like really cool

521
00:18:42,621 --> 00:18:44,423
inside scoop with
the card brands.

522
00:18:44,423 --> 00:18:46,024
Nope, I would use
Wikipedia again.

523
00:18:46,024 --> 00:18:47,626
And Wikipedia says,
"Hey, if the card number

524
00:18:47,626 --> 00:18:50,629
starts with these digits, or
these digits, it's this brand."

525
00:18:50,629 --> 00:18:52,197
So this is how CDPO does it.

526
00:18:52,197 --> 00:18:55,900
It does change, but
man is it way faster

527
00:18:55,901 --> 00:18:58,971
than doing it any other way,
or using a giant database.

528
00:18:58,971 --> 00:19:00,606
So this is what we have for now.

529
00:19:00,606 --> 00:19:01,840
Anything it doesn't recognize,

530
00:19:01,840 --> 00:19:03,175
it will just put into
an unknown category,

531
00:19:03,175 --> 00:19:05,244
which you can review
manually yourself.

532
00:19:05,244 --> 00:19:08,045
I also suggest taking the
data that we do process,

533
00:19:08,046 --> 00:19:10,616
and if you are talking
to the card brands

534
00:19:10,616 --> 00:19:11,850
or to specific banks, saying,

535
00:19:11,850 --> 00:19:13,351
"Hey, can you please
help us verify these,

536
00:19:13,352 --> 00:19:14,786
and validate that
these are actually

537
00:19:14,786 --> 00:19:16,121
the brands they belong to?"

538
00:19:16,121 --> 00:19:17,523
They will probably be
much more accurate,

539
00:19:17,523 --> 00:19:19,791
but no one's let me into
their secret sauce yet.

540
00:19:19,791 --> 00:19:23,061
I do have another slide
coming up with some details.

541
00:19:23,061 --> 00:19:24,263
But again, this is Wikipedia,

542
00:19:24,263 --> 00:19:26,398
so you'll probably fail
your research paper

543
00:19:26,398 --> 00:19:28,300
if you use this source.

544
00:19:29,434 --> 00:19:31,837
And it's pretty fast,
it's pretty good.

545
00:19:31,837 --> 00:19:33,872
But how it works, I guess
I forgot to mention,

546
00:19:33,872 --> 00:19:36,241
is the first 1-8 digits of
the primary account number,

547
00:19:36,241 --> 00:19:39,278
are specific to a
brand or a bank.

548
00:19:39,278 --> 00:19:41,413
So you can track
that down this way.

549
00:19:41,413 --> 00:19:44,449
And then Wikipedia
does have the ...

550
00:19:44,449 --> 00:19:45,384
Shows different lengths.

551
00:19:45,384 --> 00:19:47,319
You could have 15-19 characters.

552
00:19:47,319 --> 00:19:49,454
And one validation ...

553
00:19:49,454 --> 00:19:51,490
There's one that
says not required,

554
00:19:51,490 --> 00:19:53,692
or no validation, so in theory,

555
00:19:53,692 --> 00:19:55,661
some cards don't need the Luhn.

556
00:19:55,661 --> 00:19:56,828
So C3PO ...

557
00:19:56,828 --> 00:20:00,566
Or CDPO, I mean,
wouldn't count those.

558
00:20:00,566 --> 00:20:02,234
So in the future, I
have thought about,

559
00:20:02,234 --> 00:20:04,235
there's this website
binlist.net, where
you can either ...

560
00:20:04,236 --> 00:20:06,838
You can just paste in the
first up to eight digits

561
00:20:06,838 --> 00:20:08,273
of a primary account number,

562
00:20:08,273 --> 00:20:09,707
and it'll tell you the bank.

563
00:20:09,708 --> 00:20:12,211
So, rather than sending
all of your data

564
00:20:12,211 --> 00:20:15,581
to this website, my goal
is to just use their

565
00:20:15,581 --> 00:20:17,916
throttled API, and scrape
every single possible

566
00:20:17,916 --> 00:20:19,384
combination, and
create like a database,

567
00:20:19,384 --> 00:20:21,887
or a range on your local system,
that you could query again.

568
00:20:21,887 --> 00:20:23,088
So you're not
sending compromised

569
00:20:23,088 --> 00:20:25,424
information to the internet.

570
00:20:26,858 --> 00:20:28,827
In theory, I've gotten it to
work a little bit in the past,

571
00:20:28,827 --> 00:20:30,229
but it is throttled,
so it takes a long time

572
00:20:30,229 --> 00:20:31,163
to build the database.

573
00:20:31,163 --> 00:20:32,164
Especially if you want to go out

574
00:20:32,164 --> 00:20:33,498
to eight numbers
of significance.

575
00:20:33,498 --> 00:20:35,234
You can say, "Just
give me anything

576
00:20:35,234 --> 00:20:36,601
up to all the
first four digits."

577
00:20:36,602 --> 00:20:38,770
But it's complicated,
we're working on it.

578
00:20:38,770 --> 00:20:40,405
Another thing is, if
you do have access

579
00:20:40,405 --> 00:20:43,175
to a paid intel list,
submit the account numbers

580
00:20:43,175 --> 00:20:45,310
to that intel list, and they
can probably help you out.

581
00:20:45,310 --> 00:20:46,979
That's another thing that we do.

582
00:20:46,979 --> 00:20:50,549
Troubleshooting, you may
come across a line that

583
00:20:50,549 --> 00:20:52,451
shouldn't have been matched,
or it's not matching something,

584
00:20:52,451 --> 00:20:54,219
and you wanna find out why.

585
00:20:54,219 --> 00:20:56,121
I'm in the process of making
a script that will tell you,

586
00:20:56,121 --> 00:20:58,657
"Oh this line didn't make it
into CDPO, and this is why."

587
00:20:58,657 --> 00:21:01,592
In case you're missing
information that
you would expect.

588
00:21:01,593 --> 00:21:02,527
These are the commands.

589
00:21:02,527 --> 00:21:03,729
They're here for reference.

590
00:21:03,729 --> 00:21:06,298
The basic is, as you'll
import data into it,

591
00:21:06,298 --> 00:21:08,333
you'll be able to combine
multiple collections.

592
00:21:08,333 --> 00:21:11,803
You'll query, create subsets,
you'll show statistics,

593
00:21:11,803 --> 00:21:14,439
you can show
detailed statistics.

594
00:21:14,439 --> 00:21:15,707
You can create a
.csv of all the stats

595
00:21:15,707 --> 00:21:16,975
that are loaded in there,

596
00:21:16,975 --> 00:21:18,976
and you can write
out the decrypted

597
00:21:18,977 --> 00:21:20,512
account information to a .csv.

598
00:21:20,512 --> 00:21:23,514
You know, for providing
to a victim or a bank.

599
00:21:23,515 --> 00:21:25,117
Let's take a look
at a quick demo.

600
00:21:25,117 --> 00:21:27,653
So, everything that's really
important you should focus on,

601
00:21:27,653 --> 00:21:28,820
is highlighted in red.

602
00:21:28,820 --> 00:21:30,422
Up top, is just how you run it.

603
00:21:30,422 --> 00:21:33,025
If you just run CDPO.py
as a Python script,

604
00:21:33,025 --> 00:21:35,761
it'll use a
CDPO.sqlite database.

605
00:21:36,628 --> 00:21:38,263
Or you can specify a database.

606
00:21:38,263 --> 00:21:39,563
In this example, someone sent me

607
00:21:39,564 --> 00:21:42,234
the SANS_DB.sqlite database.

608
00:21:42,234 --> 00:21:44,136
The next very important
part is this nice Askey art

609
00:21:44,136 --> 00:21:45,637
that you should
all take a look at.

610
00:21:45,637 --> 00:21:48,706
I made that, it was
very time intensive.

611
00:21:48,707 --> 00:21:50,208
I just typed that
into some website

612
00:21:50,208 --> 00:21:51,943
that generated Askey art for me.

613
00:21:51,943 --> 00:21:53,145
And then a third,
extremely important part,

614
00:21:53,145 --> 00:21:54,613
is the license here that says,

615
00:21:54,613 --> 00:21:55,881
no one's responsible for this.

616
00:21:55,881 --> 00:21:57,082
This is "as is".

617
00:21:57,082 --> 00:21:58,617
Although I keep
talking bad about it,

618
00:21:58,617 --> 00:22:00,319
but I think it does
work really well.

619
00:22:00,319 --> 00:22:02,120
But I just want to make
sure you're all aware.

620
00:22:02,120 --> 00:22:03,822
And in case you're not
aware, it'll then ask you,

621
00:22:03,822 --> 00:22:05,724
"Hey, are you sure you
understand the terms

622
00:22:05,724 --> 00:22:07,426
that you're not gonna sue me?"

623
00:22:07,426 --> 00:22:09,160
So you just have to
put yes in there,

624
00:22:09,161 --> 00:22:10,862
or something that
begins with "Y".

625
00:22:10,862 --> 00:22:11,997
And then CDPO will say,

626
00:22:11,997 --> 00:22:13,498
"Hey look, this
database already exists.

627
00:22:13,498 --> 00:22:15,000
Do you wanna delete it, make
a new one with that name?

628
00:22:15,000 --> 00:22:17,002
Do you wanna load it, or do
you want to keep that one

629
00:22:17,002 --> 00:22:19,271
and add another one with
a timestamp as the name?"

630
00:22:19,271 --> 00:22:21,005
So let's choose load.

631
00:22:21,006 --> 00:22:22,474
Okay, so this is really cool.

632
00:22:22,474 --> 00:22:25,409
Now we're in the PCI track
data relations command prompt.

633
00:22:25,410 --> 00:22:27,612
It's a nice Python
feature, that let's you ...

634
00:22:27,612 --> 00:22:30,115
Just keeps looping for
a command COB in here.

635
00:22:30,115 --> 00:22:31,350
You can run the help command,

636
00:22:31,350 --> 00:22:32,751
and see all the commands
we just talked about.

637
00:22:32,751 --> 00:22:34,653
I'm gonna run the show command.

638
00:22:34,653 --> 00:22:37,122
That'll show me
I have one loaded

639
00:22:37,122 --> 00:22:39,424
collection up here
named patient0decoded.

640
00:22:39,424 --> 00:22:41,893
So I say, "Oh okay, that's
a lot of information."

641
00:22:41,893 --> 00:22:43,995
855 unique primary
account numbers,

642
00:22:43,995 --> 00:22:45,664
that's a good number
of credit card numbers

643
00:22:45,664 --> 00:22:48,166
that could have ended
up on the dark web.

644
00:22:48,166 --> 00:22:49,967
It'll give you information about

645
00:22:49,968 --> 00:22:52,070
if we have track one
only, track two only.

646
00:22:52,070 --> 00:22:53,739
If both tracks were
recorded by the malware

647
00:22:53,739 --> 00:22:56,541
in some of the brands
that we matched.

648
00:22:56,541 --> 00:22:58,275
But I have all these other
files I need to import.

649
00:22:58,276 --> 00:23:00,345
I have this patient0
that my friend did,

650
00:23:00,345 --> 00:23:01,813
but I have systems 2, 3, and 4.

651
00:23:01,813 --> 00:23:03,949
I have a lot of data that
I wanted to check out.

652
00:23:03,949 --> 00:23:06,351
So I'm gonna run import, and
I can just do a path here

653
00:23:06,351 --> 00:23:09,721
from my working directory
input slash systems star.

654
00:23:09,721 --> 00:23:12,157
It'll use the wildcard
there, which is pretty nice.

655
00:23:12,157 --> 00:23:13,558
And in this example,
each of these

656
00:23:13,558 --> 00:23:17,462
had about 220 some thousand
lines of track data,

657
00:23:18,663 --> 00:23:21,366
that were imported
in 78-87 seconds.

658
00:23:21,366 --> 00:23:23,902
So while you're watching
it happen, it's slow,

659
00:23:23,902 --> 00:23:25,370
but I promise you,
that's really fast,

660
00:23:25,370 --> 00:23:27,272
compared to what
we used to have.

661
00:23:27,272 --> 00:23:29,140
This malware was also
kind of inefficient.

662
00:23:29,141 --> 00:23:31,710
We have a 2,653 unique lines

663
00:23:31,710 --> 00:23:34,246
did not contain track
database on a Regex.

664
00:23:34,246 --> 00:23:36,848
A bunch of other
lines didn't contain

665
00:23:36,848 --> 00:23:38,350
valid expiration dates.

666
00:23:38,350 --> 00:23:39,283
So it'll tell you if it
notices errors like that,

667
00:23:39,284 --> 00:23:41,787
that we can help you track down.

668
00:23:41,787 --> 00:23:44,156
Okay, so I imported
all of these files,

669
00:23:44,156 --> 00:23:45,757
now I just wanna lump
everything together.

670
00:23:45,757 --> 00:23:48,560
I'll run combine all the files.

671
00:23:48,560 --> 00:23:49,761
I thought I made the text big,

672
00:23:49,761 --> 00:23:51,363
but I apologize if it's
still way too small.

673
00:23:51,363 --> 00:23:53,265
So you can run one
command, and it'll say,

674
00:23:53,265 --> 00:23:54,666
"Hey, you have the
collections loaded,

675
00:23:54,666 --> 00:23:56,701
which ones do you wanna
add to the collection?"

676
00:23:56,701 --> 00:23:58,970
Or you could just say all,
to throw them all in there.

677
00:23:58,970 --> 00:24:01,039
So this took about
90 seconds to run.

678
00:24:01,039 --> 00:24:05,143
And it ended up with
622,000 lines of unique pan,

679
00:24:06,278 --> 00:24:07,813
and expiration
date combinations.

680
00:24:07,813 --> 00:24:10,081
Primary account number and
expiration date combinations.

681
00:24:10,081 --> 00:24:11,183
So that's a lot of track data,

682
00:24:11,183 --> 00:24:13,318
now we're getting somewhere.

683
00:24:13,318 --> 00:24:15,187
So then you run
the stat command,

684
00:24:15,187 --> 00:24:16,921
which will not only show
you the same information

685
00:24:16,922 --> 00:24:19,057
you saw before with
the show command,

686
00:24:19,057 --> 00:24:21,259
it'll show you the components
that were loaded in there.

687
00:24:21,259 --> 00:24:23,361
So as you're combining and
organizing these files,

688
00:24:23,361 --> 00:24:25,263
you can keep track of which
files you loaded together.

689
00:24:25,263 --> 00:24:26,997
So, when you say, "How did
you create this collection?"

690
00:24:26,998 --> 00:24:28,433
You don't have to ...

691
00:24:28,433 --> 00:24:30,602
"Oh, I don't know what
information that came from."

692
00:24:30,602 --> 00:24:32,070
And then the stat command
will also show you

693
00:24:32,070 --> 00:24:34,973
expiration date count,
based on year and month.

694
00:24:34,973 --> 00:24:36,441
So this is an example.

695
00:24:36,441 --> 00:24:40,178
For 2016, we have 44,221 cards
that expired in that year,

696
00:24:40,178 --> 00:24:41,713
and then it's broken
down by month.

697
00:24:41,713 --> 00:24:44,783
There are six in January,
11 in February, and so on.

698
00:24:44,783 --> 00:24:46,051
So, kind of useful.

699
00:24:46,051 --> 00:24:49,553
Always interesting
to see where it goes.

700
00:24:49,554 --> 00:24:51,389
If we run a query,
all the files command,

701
00:24:51,389 --> 00:24:53,225
we can query specific
data out of there.

702
00:24:53,225 --> 00:24:55,293
We can say, "I wanna find ..."

703
00:24:55,293 --> 00:24:57,728
"I only want to see the
track data that fits

704
00:24:57,729 --> 00:24:59,998
a specific expiration
date range."

705
00:24:59,998 --> 00:25:00,999
For here I chose greater than

706
00:25:00,999 --> 00:25:04,069
or less than, with a "G" option.

707
00:25:04,069 --> 00:25:06,571
And I said 1706,
which is 2017, June.

708
00:25:06,571 --> 00:25:08,740
So all the cards that are valid

709
00:25:08,740 --> 00:25:11,943
are either expiring or still
valid, as of this month.

710
00:25:11,943 --> 00:25:15,480
Then it'll ask what brands I
want, I chose American Express.

711
00:25:15,480 --> 00:25:16,948
Maybe they're
knocking at the door,

712
00:25:16,948 --> 00:25:18,583
they wanna know which
data of theirs was stolen.

713
00:25:18,583 --> 00:25:19,851
And they only want to know data

714
00:25:19,851 --> 00:25:21,586
that was stolen,
that had both tracks.

715
00:25:21,586 --> 00:25:23,889
Why? I don't know, but
the option's there.

716
00:25:23,889 --> 00:25:27,792
So we choose that, and it
got less than 22,000 results,

717
00:25:27,792 --> 00:25:28,994
so that's very useful.

718
00:25:28,994 --> 00:25:31,196
We can then add that
into its own collection,

719
00:25:31,196 --> 00:25:34,432
so that we can run stats and
combine it again some more.

720
00:25:34,432 --> 00:25:37,402
But then I'm gonna run the
command file, AMEX report,

721
00:25:37,402 --> 00:25:39,104
which is going to then write

722
00:25:39,104 --> 00:25:41,640
all that decrypted
information to a file.

723
00:25:41,640 --> 00:25:43,041
And then I'll run the
.csv stats command,

724
00:25:43,041 --> 00:25:44,309
which is going to
generate a .csv

725
00:25:44,309 --> 00:25:45,377
that we'll look at all the stats

726
00:25:45,377 --> 00:25:47,412
of everything we have loaded in.

727
00:25:47,412 --> 00:25:50,882
So I check my file system,
there's AMEXreport.csv.

728
00:25:50,882 --> 00:25:53,552
Not gonna show you an
example of that file.

729
00:25:53,552 --> 00:25:55,786
Unfortunately here
in a public setting.

730
00:25:55,787 --> 00:25:59,224
But then we have the CDPO
stats with the timestamp.csv.

731
00:25:59,224 --> 00:26:00,625
Which looks like this.

732
00:26:00,625 --> 00:26:03,161
All of the information
we have loaded in,

733
00:26:03,161 --> 00:26:05,363
how many accounts with primary
account numbers we have.

734
00:26:05,363 --> 00:26:06,731
And their expiration dates.

735
00:26:06,731 --> 00:26:08,133
How many records
had track one only,

736
00:26:08,133 --> 00:26:10,035
track two only, both tracks.

737
00:26:10,035 --> 00:26:12,370
The expiration dates, which
is a terrible JSON format,

738
00:26:12,370 --> 00:26:14,139
because that was really
difficult to put into Excel,

739
00:26:14,139 --> 00:26:16,308
so that what's we're
stuck with right now.

740
00:26:16,308 --> 00:26:17,809
And then an overview of what
all the brands look like,

741
00:26:17,809 --> 00:26:19,277
and you'll be able to
see that some brands

742
00:26:19,277 --> 00:26:23,248
are more popular than
others, as you may expect.

743
00:26:24,449 --> 00:26:25,717
And when we run the
statistics command,

744
00:26:25,717 --> 00:26:27,385
it'll show us the
query that we ran,

745
00:26:27,385 --> 00:26:31,556
so we know exactly how we
created this queried collection.

746
00:26:34,359 --> 00:26:36,428
And when you leave, it'll
give you a motivational

747
00:26:36,428 --> 00:26:38,296
blue ribbon, that says,
"You're the Best."

748
00:26:38,296 --> 00:26:40,131
Because Askey art
is very important.

749
00:26:40,131 --> 00:26:43,368
(audience claps)

750
00:26:43,368 --> 00:26:44,602
When you do stuff like this,

751
00:26:44,603 --> 00:26:46,271
we want you to feel
happy, and empowered.

752
00:26:46,271 --> 00:26:47,906
Because you just did
something really really cool.

753
00:26:47,906 --> 00:26:51,509
So hopefully the blue ribbon
helps, and I appreciate that.

754
00:26:51,509 --> 00:26:54,245
So that's our live
PowerPoint demo.

755
00:26:54,245 --> 00:26:57,748
You can download
this from my GitHub.

756
00:26:57,749 --> 00:26:59,985
In the future, would like to
add a couple more commands,

757
00:26:59,985 --> 00:27:01,886
to do a little bit
more manipulation.

758
00:27:01,886 --> 00:27:03,888
Tab completion, all those
commands you saw there,

759
00:27:03,888 --> 00:27:06,091
there is no tab
completion right now.

760
00:27:06,091 --> 00:27:07,958
We have some combination
speed improvements,

761
00:27:07,959 --> 00:27:09,394
maybe stronger encryption,

762
00:27:09,394 --> 00:27:12,864
maybe the binless post
processing we talked about.

763
00:27:12,864 --> 00:27:14,299
Things to watch out for.

764
00:27:14,299 --> 00:27:17,735
If the victim is using
format-preserving encryption

765
00:27:17,736 --> 00:27:20,538
that maybe the data's tokenized,

766
00:27:20,538 --> 00:27:24,442
but it still fits the
track data format.

767
00:27:24,442 --> 00:27:26,177
It may even still pass
the Luhn algorithm.

768
00:27:26,177 --> 00:27:27,812
CDPO doesn't care,
it'll just process

769
00:27:27,812 --> 00:27:29,581
it as normal data, so
watch out for that.

770
00:27:29,581 --> 00:27:31,515
You may have store cards
or gift cards that have ...

771
00:27:31,516 --> 00:27:33,818
Maybe don't need
the Luhn algorithm,

772
00:27:33,818 --> 00:27:37,122
or they have their own
custom IN or BIN numbers.

773
00:27:37,122 --> 00:27:39,124
And I don't know what
chip, and pin and chip,

774
00:27:39,124 --> 00:27:40,825
and sig data looks
like in memory.

775
00:27:40,825 --> 00:27:42,394
So if anybody
knows, let me know,

776
00:27:42,394 --> 00:27:44,763
but I haven't' seen any malware
scraping that stuff out.

777
00:27:44,763 --> 00:27:48,332
And I don't know if it's a
normal track data formats.

778
00:27:48,333 --> 00:27:49,734
I'd like to shout out
to Patrick Charbonneau,

779
00:27:49,734 --> 00:27:52,236
who helped implement
the RC4 encryption.

780
00:27:52,237 --> 00:27:53,505
Jay Taylor, a friend of mine

781
00:27:53,505 --> 00:27:55,206
who helped me figure
out the old ways,

782
00:27:55,206 --> 00:27:57,708
and how we did it, and
why we need the new ways.

783
00:27:57,709 --> 00:27:58,977
And Brandan Schondorfer,
who's working

784
00:27:58,977 --> 00:28:02,881
on a cool SQL query
to have more speed.

785
00:28:02,881 --> 00:28:05,116
So, standardized, not
perfect, all right?

786
00:28:05,116 --> 00:28:06,384
Summary.

787
00:28:06,384 --> 00:28:08,153
It's standardized, it's
fast, there's features,

788
00:28:08,153 --> 00:28:09,888
it's expandable, and
it's not perfect,

789
00:28:09,888 --> 00:28:13,925
but it's reproducible, and
better than what we had before.

790
00:28:13,925 --> 00:28:16,127
So, if you get to use it
and have any questions,

791
00:28:16,127 --> 00:28:17,395
just please let me know.

792
00:28:17,395 --> 00:28:20,331
Or generate an issue
or feature request.

793
00:28:20,331 --> 00:28:22,332
And that's it.

