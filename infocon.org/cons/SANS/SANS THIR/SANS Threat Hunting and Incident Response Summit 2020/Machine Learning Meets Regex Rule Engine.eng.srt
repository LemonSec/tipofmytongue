1
00:00:05,600 --> 00:00:09,040
um

2
00:00:06,799 --> 00:00:10,480
interested in this next one this is the

3
00:00:09,040 --> 00:00:14,000
one that we uh when we saw the

4
00:00:10,480 --> 00:00:15,519
the uh cfp come in um david had uh

5
00:00:14,000 --> 00:00:17,440
really piqued our interest and i wanted

6
00:00:15,519 --> 00:00:20,160
to kind of frame it up a little bit

7
00:00:17,440 --> 00:00:22,000
i love the variety of different kinds of

8
00:00:20,160 --> 00:00:24,000
presentations we have some of them like

9
00:00:22,000 --> 00:00:25,680
like with mary's very applied very

10
00:00:24,000 --> 00:00:27,279
direct showing how

11
00:00:25,680 --> 00:00:28,720
the knowledge that we get from

12
00:00:27,279 --> 00:00:30,960
understanding the inner workings of a

13
00:00:28,720 --> 00:00:31,439
tool turn into things that we can use

14
00:00:30,960 --> 00:00:33,680
for

15
00:00:31,439 --> 00:00:34,559
retrospective hunting and then sometimes

16
00:00:33,680 --> 00:00:36,480
we've got to look

17
00:00:34,559 --> 00:00:38,480
toward the future what's what's the next

18
00:00:36,480 --> 00:00:40,559
wave of what this

19
00:00:38,480 --> 00:00:42,559
our industry is going to do the concept

20
00:00:40,559 --> 00:00:44,559
of threat hunting is going to need

21
00:00:42,559 --> 00:00:46,320
um and of course a lot of that goes into

22
00:00:44,559 --> 00:00:49,360
the really big

23
00:00:46,320 --> 00:00:50,079
scientific kind of uh concepts that you

24
00:00:49,360 --> 00:00:52,399
know haven't

25
00:00:50,079 --> 00:00:54,320
necessarily been commoditized down into

26
00:00:52,399 --> 00:00:55,920
a nice consumable package that we can

27
00:00:54,320 --> 00:00:56,800
deploy out on our networks or in our

28
00:00:55,920 --> 00:00:58,079
environments

29
00:00:56,800 --> 00:00:59,919
well that's what we're looking at we're

30
00:00:58,079 --> 00:01:00,800
looking out toward the future certainly

31
00:00:59,920 --> 00:01:03,120
machine learning is

32
00:01:00,800 --> 00:01:04,479
is a term that gets used very often

33
00:01:03,120 --> 00:01:06,080
sometimes very loosely

34
00:01:04,479 --> 00:01:08,000
but we want to make sure that we

35
00:01:06,080 --> 00:01:09,760
understand what it does in many cases

36
00:01:08,000 --> 00:01:10,720
what it doesn't and understand how we're

37
00:01:09,760 --> 00:01:12,960
going to

38
00:01:10,720 --> 00:01:13,920
make it actionable make it usable in our

39
00:01:12,960 --> 00:01:15,839
environments

40
00:01:13,920 --> 00:01:17,200
and david comes to us from cisco where

41
00:01:15,840 --> 00:01:20,320
that's part of what he does

42
00:01:17,200 --> 00:01:22,640
in in his job is building out these

43
00:01:20,320 --> 00:01:23,839
really big nebulous concepts like

44
00:01:22,640 --> 00:01:25,439
machine learning

45
00:01:23,840 --> 00:01:27,520
and making him more actionable and he's

46
00:01:25,439 --> 00:01:28,960
going to specifically be looking at some

47
00:01:27,520 --> 00:01:30,479
statistical modeling

48
00:01:28,960 --> 00:01:32,000
of combining machine learning and

49
00:01:30,479 --> 00:01:33,280
regular expressions so

50
00:01:32,000 --> 00:01:35,360
kind of something you're maybe a little

51
00:01:33,280 --> 00:01:37,119
bit more familiar with on the regex side

52
00:01:35,360 --> 00:01:38,799
maybe introducing another layer on it

53
00:01:37,119 --> 00:01:39,200
with the machine learning portion as

54
00:01:38,799 --> 00:01:42,320
well

55
00:01:39,200 --> 00:01:43,759
so without any further delay it's uh i'm

56
00:01:42,320 --> 00:01:45,119
very excited to introduce david

57
00:01:43,759 --> 00:01:48,240
rodriguez and

58
00:01:45,119 --> 00:01:49,600
with that please drop some knowledge

59
00:01:48,240 --> 00:01:53,360
bombs for us because

60
00:01:49,600 --> 00:01:54,880
i'm super excited for uh for this one

61
00:01:53,360 --> 00:01:56,880
awesome well thank you so much for that

62
00:01:54,880 --> 00:01:58,560
introduction phil um i

63
00:01:56,880 --> 00:02:00,079
really cannot tell you guys how much of

64
00:01:58,560 --> 00:02:02,159
a pleasure it is to be here

65
00:02:00,079 --> 00:02:04,240
uh i this is going to be a tough act to

66
00:02:02,159 --> 00:02:05,439
follow mary was an amazing speaker and

67
00:02:04,240 --> 00:02:07,759
uh if you didn't know anything about

68
00:02:05,439 --> 00:02:08,560
wine scp i'm sure she's piqued your

69
00:02:07,759 --> 00:02:10,479
interest

70
00:02:08,560 --> 00:02:12,239
so as phil was saying i'm going to try

71
00:02:10,479 --> 00:02:14,800
to push the boundaries today

72
00:02:12,239 --> 00:02:16,400
a little bit with what i have been kind

73
00:02:14,800 --> 00:02:17,040
of working with for like the last few

74
00:02:16,400 --> 00:02:19,200
months

75
00:02:17,040 --> 00:02:20,959
uh working with rule engines and why we

76
00:02:19,200 --> 00:02:22,879
started to build something in-house

77
00:02:20,959 --> 00:02:24,720
so that we could in the future start to

78
00:02:22,879 --> 00:02:25,840
deploy some statistical models that we

79
00:02:24,720 --> 00:02:29,520
found useful

80
00:02:25,840 --> 00:02:32,720
uh in other systems so

81
00:02:29,520 --> 00:02:34,160
um so uh again my name is dave rodriguez

82
00:02:32,720 --> 00:02:36,720
i'm a tech lead at

83
00:02:34,160 --> 00:02:37,920
cisco umbrella so and um for about the

84
00:02:36,720 --> 00:02:39,040
last five years i've been working with

85
00:02:37,920 --> 00:02:41,440
dns data

86
00:02:39,040 --> 00:02:43,280
trying to mine that data and those logs

87
00:02:41,440 --> 00:02:44,239
to identify various threats such as

88
00:02:43,280 --> 00:02:47,360
malvertising

89
00:02:44,239 --> 00:02:50,480
phishing attacks botnets

90
00:02:47,360 --> 00:02:52,000
dns exfiltration and things like that so

91
00:02:50,480 --> 00:02:53,599
the title of my talk is machine learning

92
00:02:52,000 --> 00:02:55,280
meeting regex rule engine

93
00:02:53,599 --> 00:02:57,599
basically if you don't get anything from

94
00:02:55,280 --> 00:02:59,120
this talk i just want one thing

95
00:02:57,599 --> 00:03:00,879
other than this it's just that i'm

96
00:02:59,120 --> 00:03:02,080
trying to push the boundaries of rural

97
00:03:00,879 --> 00:03:03,200
engines and maybe

98
00:03:02,080 --> 00:03:06,000
some of the tools that you might be

99
00:03:03,200 --> 00:03:08,560
using already currently such as yara

100
00:03:06,000 --> 00:03:10,480
snort cerakata and all these other

101
00:03:08,560 --> 00:03:12,480
frameworks that allow you to

102
00:03:10,480 --> 00:03:14,159
essentially assemble various logic

103
00:03:12,480 --> 00:03:16,640
patterns and apply them on

104
00:03:14,159 --> 00:03:18,159
input data sets whether these be various

105
00:03:16,640 --> 00:03:22,879
network logs from proxy

106
00:03:18,159 --> 00:03:24,480
networks firewalls or dns logs

107
00:03:22,879 --> 00:03:26,079
so maybe i can tell you a little bit

108
00:03:24,480 --> 00:03:27,359
about my experience

109
00:03:26,080 --> 00:03:29,280
and hopefully it relates to something

110
00:03:27,360 --> 00:03:33,440
that you've been doing so i think

111
00:03:29,280 --> 00:03:35,200
my day to day is actually threat hunting

112
00:03:33,440 --> 00:03:36,959
but rather than looking at one single

113
00:03:35,200 --> 00:03:39,440
organization i'm usually looking at

114
00:03:36,959 --> 00:03:40,640
tons of organizations or unique users

115
00:03:39,440 --> 00:03:43,200
across the internet

116
00:03:40,640 --> 00:03:44,399
usually at cisco umbrella we're

117
00:03:43,200 --> 00:03:46,560
resolving anywhere from

118
00:03:44,400 --> 00:03:48,480
billions of dns requests at any given

119
00:03:46,560 --> 00:03:49,440
day and i'm trying to understand the

120
00:03:48,480 --> 00:03:51,280
entities that are

121
00:03:49,440 --> 00:03:53,120
associated with malicious threat like

122
00:03:51,280 --> 00:03:53,840
malicious actors on the internet whether

123
00:03:53,120 --> 00:03:56,000
it's not

124
00:03:53,840 --> 00:03:57,760
bulletproof hosting infrastructures or

125
00:03:56,000 --> 00:03:59,120
maybe someone within a network is trying

126
00:03:57,760 --> 00:04:01,439
to exfiltrate data

127
00:03:59,120 --> 00:04:03,120
using dns tunneling and on the other

128
00:04:01,439 --> 00:04:04,480
hand i'm trying to besides look at these

129
00:04:03,120 --> 00:04:06,879
topological relationships and

130
00:04:04,480 --> 00:04:08,399
assign them identify those regions that

131
00:04:06,879 --> 00:04:10,399
are

132
00:04:08,400 --> 00:04:11,519
neighborhoods that are malicious i'm

133
00:04:10,400 --> 00:04:13,040
also thinking about the behavioral

134
00:04:11,519 --> 00:04:13,599
attributes of these entities on the

135
00:04:13,040 --> 00:04:15,439
internet

136
00:04:13,599 --> 00:04:17,599
whether or not there's sort of uh

137
00:04:15,439 --> 00:04:19,440
anomalies in the requests that are being

138
00:04:17,600 --> 00:04:20,479
made from certain machines to certain

139
00:04:19,440 --> 00:04:22,320
internet

140
00:04:20,478 --> 00:04:23,758
resources or maybe domain names on the

141
00:04:22,320 --> 00:04:25,199
internet that start to see various

142
00:04:23,759 --> 00:04:28,960
spikes in in their

143
00:04:25,199 --> 00:04:32,080
the requested traffic to them

144
00:04:28,960 --> 00:04:34,239
and so hopefully this this while my

145
00:04:32,080 --> 00:04:35,440
world is thinking about dns traffic

146
00:04:34,240 --> 00:04:37,440
in the end i'm usually just thinking

147
00:04:35,440 --> 00:04:40,639
about logs i'm thinking about taking

148
00:04:37,440 --> 00:04:42,000
some log line in this case dns logs

149
00:04:40,639 --> 00:04:44,240
and trying to apply some model to

150
00:04:42,000 --> 00:04:44,800
identify some sort of risk associated

151
00:04:44,240 --> 00:04:46,320
with it

152
00:04:44,800 --> 00:04:47,360
perhaps it's i'm trying to identify

153
00:04:46,320 --> 00:04:48,080
domains that are associated with

154
00:04:47,360 --> 00:04:50,000
phishing

155
00:04:48,080 --> 00:04:51,520
in this case i'm usually taking one

156
00:04:50,000 --> 00:04:53,360
single log line and

157
00:04:51,520 --> 00:04:57,840
trying to apply some model in the most

158
00:04:53,360 --> 00:04:57,840
simplest form and identifying

159
00:04:58,000 --> 00:05:01,120
usually the goal is to keep these models

160
00:04:59,759 --> 00:05:03,120
fairly simple and and

161
00:05:01,120 --> 00:05:04,880
easy to deploy there's usually lens of

162
00:05:03,120 --> 00:05:07,440
infrastructure that's behind the scenes

163
00:05:04,880 --> 00:05:08,960
in place there's lots of input data sets

164
00:05:07,440 --> 00:05:11,199
and there's lots of ways to actually

165
00:05:08,960 --> 00:05:12,159
export these domains so that there's

166
00:05:11,199 --> 00:05:13,520
actually enforcement

167
00:05:12,160 --> 00:05:15,520
with our different products at cisco

168
00:05:13,520 --> 00:05:17,840
umbrella

169
00:05:15,520 --> 00:05:19,120
but usually everything hits the van the

170
00:05:17,840 --> 00:05:20,479
minute the customer complains about

171
00:05:19,120 --> 00:05:22,400
something

172
00:05:20,479 --> 00:05:24,400
and i find myself maybe you find

173
00:05:22,400 --> 00:05:26,400
yourself going back to the drawing board

174
00:05:24,400 --> 00:05:27,919
you rethink these ideas statistical

175
00:05:26,400 --> 00:05:29,440
models that you've been working on

176
00:05:27,919 --> 00:05:31,280
that you thought were so elegant and

177
00:05:29,440 --> 00:05:33,039
free in their simplicity

178
00:05:31,280 --> 00:05:34,638
and their ability to explain their

179
00:05:33,039 --> 00:05:35,360
various data sets you had previously

180
00:05:34,639 --> 00:05:37,440
curated

181
00:05:35,360 --> 00:05:39,039
and trained them on but you realize that

182
00:05:37,440 --> 00:05:41,520
maybe you forgot something about

183
00:05:39,039 --> 00:05:42,800
those logs those individual log lines

184
00:05:41,520 --> 00:05:43,359
maybe there was something about a time

185
00:05:42,800 --> 00:05:45,759
stamp

186
00:05:43,360 --> 00:05:47,120
that you sort of were just forgetting so

187
00:05:45,759 --> 00:05:48,160
you need to start filtering on that

188
00:05:47,120 --> 00:05:49,840
maybe there's something about the

189
00:05:48,160 --> 00:05:50,400
clients and the certain organizations

190
00:05:49,840 --> 00:05:52,239
that you're

191
00:05:50,400 --> 00:05:53,758
focusing on where your model only

192
00:05:52,240 --> 00:05:56,560
applies specifically for those

193
00:05:53,759 --> 00:05:58,080
use cases and so on and so as your model

194
00:05:56,560 --> 00:06:00,639
starts to get more complicated or

195
00:05:58,080 --> 00:06:02,719
i've had experience with this is that

196
00:06:00,639 --> 00:06:05,360
then the deployment itself also just

197
00:06:02,720 --> 00:06:06,000
starts to multiply in its complexity and

198
00:06:05,360 --> 00:06:09,199
so that becomes

199
00:06:06,000 --> 00:06:10,720
a problem to maintain and so on the one

200
00:06:09,199 --> 00:06:12,639
hand these statistical models

201
00:06:10,720 --> 00:06:13,840
um or the data scientists are really

202
00:06:12,639 --> 00:06:15,600
pushing the limit

203
00:06:13,840 --> 00:06:17,039
that becomes this problem where they're

204
00:06:15,600 --> 00:06:19,440
either hard to deploy

205
00:06:17,039 --> 00:06:21,280
or these models are just too generic

206
00:06:19,440 --> 00:06:23,759
where in the lab they're great

207
00:06:21,280 --> 00:06:24,880
but in reality they just basically throw

208
00:06:23,759 --> 00:06:26,400
tons of fps

209
00:06:24,880 --> 00:06:29,120
and they cause a real problem for our

210
00:06:26,400 --> 00:06:29,120
support teams

211
00:06:29,520 --> 00:06:33,198
so to kind of counter that there's these

212
00:06:31,520 --> 00:06:35,840
rule engines where they kind of

213
00:06:33,199 --> 00:06:39,280
help kind of refine the scope of what

214
00:06:35,840 --> 00:06:39,280
you want to be looking at things

215
00:06:39,759 --> 00:06:43,600
and usually in my mind i think of role

216
00:06:42,160 --> 00:06:45,039
engine in a couple different ways

217
00:06:43,600 --> 00:06:47,039
i think of it as just either a

218
00:06:45,039 --> 00:06:49,120
configuration file and then

219
00:06:47,039 --> 00:06:50,639
a compiler that takes this configuration

220
00:06:49,120 --> 00:06:52,880
file and then applies

221
00:06:50,639 --> 00:06:53,919
this or essentially compiles this

222
00:06:52,880 --> 00:06:55,360
configuration file

223
00:06:53,919 --> 00:06:57,758
so that it can be applied like a

224
00:06:55,360 --> 00:06:59,759
statistical model on some input data set

225
00:06:57,759 --> 00:07:01,440
so such that there's a result or a rule

226
00:06:59,759 --> 00:07:02,960
that's outputted

227
00:07:01,440 --> 00:07:04,719
in this case i'm looking at a space we

228
00:07:02,960 --> 00:07:07,599
can look at a specific example here is

229
00:07:04,720 --> 00:07:08,080
an example configuration file or rule by

230
00:07:07,599 --> 00:07:10,479
that is

231
00:07:08,080 --> 00:07:11,919
that can be written in the yara language

232
00:07:10,479 --> 00:07:13,280
it's usually made up of three different

233
00:07:11,919 --> 00:07:15,198
parts

234
00:07:13,280 --> 00:07:16,719
but really the most interesting part is

235
00:07:15,199 --> 00:07:18,880
actually the last

236
00:07:16,720 --> 00:07:20,240
in this case it's the what's known as a

237
00:07:18,880 --> 00:07:21,599
condition in yara

238
00:07:20,240 --> 00:07:23,919
and what this says is that if the

239
00:07:21,599 --> 00:07:27,199
existence of any of these parts a

240
00:07:23,919 --> 00:07:29,599
b or c exist then this rule

241
00:07:27,199 --> 00:07:31,440
will be evaluated to true sort of like a

242
00:07:29,599 --> 00:07:34,400
boolean expression

243
00:07:31,440 --> 00:07:35,840
and what is kind of interesting in that

244
00:07:34,400 --> 00:07:36,400
is that when you start to think about

245
00:07:35,840 --> 00:07:38,479
how

246
00:07:36,400 --> 00:07:39,919
what a configuration file of a rule is

247
00:07:38,479 --> 00:07:42,159
it's just taking input data

248
00:07:39,919 --> 00:07:44,799
in this case yara is highly specific

249
00:07:42,160 --> 00:07:48,319
towards data sets that are related to

250
00:07:44,800 --> 00:07:50,160
binaries or input files um it then is

251
00:07:48,319 --> 00:07:52,080
going to output some sort of score

252
00:07:50,160 --> 00:07:53,440
and in a way that's very similar to way

253
00:07:52,080 --> 00:07:55,359
statistical models

254
00:07:53,440 --> 00:07:59,199
where i was previously explaining kind

255
00:07:55,360 --> 00:08:00,800
of has a similar abstraction

256
00:07:59,199 --> 00:08:02,400
but as you start to work with these

257
00:08:00,800 --> 00:08:03,599
tools and these rules

258
00:08:02,400 --> 00:08:05,679
you start to realize that there's kind

259
00:08:03,599 --> 00:08:07,280
of like this problem where

260
00:08:05,680 --> 00:08:09,199
you start to kind of focus on these very

261
00:08:07,280 --> 00:08:10,878
specific attributes for example that

262
00:08:09,199 --> 00:08:12,879
previous yara rule was just looking for

263
00:08:10,879 --> 00:08:13,680
various stream patterns literally in a

264
00:08:12,879 --> 00:08:15,680
file

265
00:08:13,680 --> 00:08:17,840
and in and of itself that might be true

266
00:08:15,680 --> 00:08:21,280
that that's really going to be helping

267
00:08:17,840 --> 00:08:23,359
enforce and support some sort of

268
00:08:21,280 --> 00:08:25,280
known malicious event it might not

269
00:08:23,360 --> 00:08:27,280
generalize to something in the future

270
00:08:25,280 --> 00:08:28,878
and so you have this at this tendency to

271
00:08:27,280 --> 00:08:31,198
start to kind of hyper focus

272
00:08:28,879 --> 00:08:32,399
on potentially random noise and in

273
00:08:31,199 --> 00:08:35,519
statistical modeling

274
00:08:32,399 --> 00:08:35,519
they call that overfitting

275
00:08:35,839 --> 00:08:39,919
so there seems to be this trade-off you

276
00:08:38,080 --> 00:08:41,360
have the data scientists or these like

277
00:08:39,919 --> 00:08:42,880
or that if you put on a data scientist

278
00:08:41,360 --> 00:08:44,240
hat you're kind of working with these

279
00:08:42,880 --> 00:08:45,760
models that seem to be a little bit

280
00:08:44,240 --> 00:08:48,080
generic

281
00:08:45,760 --> 00:08:49,519
and they seem to generalize pretty well

282
00:08:48,080 --> 00:08:50,080
but on the other hand you have these

283
00:08:49,519 --> 00:08:52,720
rules

284
00:08:50,080 --> 00:08:54,320
that are highly specific and currently

285
00:08:52,720 --> 00:08:55,839
the way that it feels is that you're on

286
00:08:54,320 --> 00:08:57,360
this like lower left-hand curve where

287
00:08:55,839 --> 00:08:58,720
there's just this huge trade-off

288
00:08:57,360 --> 00:09:01,360
where you're either focusing on these

289
00:08:58,720 --> 00:09:03,040
models or you're focusing on these rules

290
00:09:01,360 --> 00:09:04,959
and in this talk i want to just try to

291
00:09:03,040 --> 00:09:05,519
push this curve to the upper right hand

292
00:09:04,959 --> 00:09:07,040
corner

293
00:09:05,519 --> 00:09:09,040
i want to just say that when you're

294
00:09:07,040 --> 00:09:09,760
trying to work on rules actually you

295
00:09:09,040 --> 00:09:11,120
don't have to

296
00:09:09,760 --> 00:09:12,959
like think of this as two different

297
00:09:11,120 --> 00:09:14,399
worlds you can just think of this as

298
00:09:12,959 --> 00:09:15,279
that you're pushing the limits of the

299
00:09:14,399 --> 00:09:17,600
rule engine

300
00:09:15,279 --> 00:09:19,519
to get you closer to models that are

301
00:09:17,600 --> 00:09:23,839
going to be more generic and help you

302
00:09:19,519 --> 00:09:23,839
simplify your workflows in the future

303
00:09:24,080 --> 00:09:27,279
okay so this brings us to kind of like

304
00:09:25,760 --> 00:09:29,519
the heart of this problem

305
00:09:27,279 --> 00:09:31,279
at least as i kind of hope to kind of

306
00:09:29,519 --> 00:09:34,160
convey new information to you

307
00:09:31,279 --> 00:09:34,720
so i will talk about now in this part

308
00:09:34,160 --> 00:09:36,399
kind of like

309
00:09:34,720 --> 00:09:39,120
how to build your own sort of rule

310
00:09:36,399 --> 00:09:40,480
engine using regular expressions

311
00:09:39,120 --> 00:09:42,240
to do that we're going to need to be

312
00:09:40,480 --> 00:09:44,160
able to talk about how you can take

313
00:09:42,240 --> 00:09:45,519
something like that yar rule a

314
00:09:44,160 --> 00:09:48,480
configuration file

315
00:09:45,519 --> 00:09:50,080
and an expression that is essentially

316
00:09:48,480 --> 00:09:52,160
like

317
00:09:50,080 --> 00:09:53,680
declaring the logical sequence of

318
00:09:52,160 --> 00:09:56,000
operations you want applied

319
00:09:53,680 --> 00:09:58,800
on some sort of input and then producing

320
00:09:56,000 --> 00:10:00,399
some sort of score at the end

321
00:09:58,800 --> 00:10:02,000
so to be able to do that i'm going to

322
00:10:00,399 --> 00:10:04,640
focus on why we

323
00:10:02,000 --> 00:10:05,279
at umbrella why we decided to build our

324
00:10:04,640 --> 00:10:08,000
own

325
00:10:05,279 --> 00:10:09,680
model uh or rural engine rather than use

326
00:10:08,000 --> 00:10:11,600
some of the pre-existing tools

327
00:10:09,680 --> 00:10:13,599
on the one case we knew that we wanted

328
00:10:11,600 --> 00:10:15,600
to focus on domain names only

329
00:10:13,600 --> 00:10:17,680
we actually wanted to simply just apply

330
00:10:15,600 --> 00:10:20,560
simple regular expressions across

331
00:10:17,680 --> 00:10:21,920
domain names themselves at the same time

332
00:10:20,560 --> 00:10:24,160
we also need to do this across

333
00:10:21,920 --> 00:10:26,000
millions and so we needed something that

334
00:10:24,160 --> 00:10:28,719
is very fast and efficient

335
00:10:26,000 --> 00:10:29,760
applying various uh combinations of

336
00:10:28,720 --> 00:10:32,399
regular expressions

337
00:10:29,760 --> 00:10:32,959
over these domain names and none of the

338
00:10:32,399 --> 00:10:35,680
previous

339
00:10:32,959 --> 00:10:36,160
like rule engines sort of had that were

340
00:10:35,680 --> 00:10:39,599
kind of

341
00:10:36,160 --> 00:10:41,279
focused on that area so if you're not

342
00:10:39,600 --> 00:10:44,079
familiar with domain names uh this is

343
00:10:41,279 --> 00:10:46,320
sort of an example on cisco.com

344
00:10:44,079 --> 00:10:47,760
and as you think about domain names and

345
00:10:46,320 --> 00:10:49,600
we're trying to exploit the different

346
00:10:47,760 --> 00:10:50,319
lexical characteristics of these domain

347
00:10:49,600 --> 00:10:52,240
names

348
00:10:50,320 --> 00:10:53,760
dns is very specific in that it has a

349
00:10:52,240 --> 00:10:56,880
very specific hierarchy

350
00:10:53,760 --> 00:10:58,319
where these dot um these symbols of the

351
00:10:56,880 --> 00:11:01,120
dot

352
00:10:58,320 --> 00:11:02,000
essentially demarcate various parts of

353
00:11:01,120 --> 00:11:04,079
the domain mean

354
00:11:02,000 --> 00:11:05,440
for various routing purposes usually

355
00:11:04,079 --> 00:11:07,359
starting at the prefix

356
00:11:05,440 --> 00:11:09,440
on this case it's starting with the com

357
00:11:07,360 --> 00:11:11,760
which is helping route down something of

358
00:11:09,440 --> 00:11:13,360
cost a paid level domain called cisco

359
00:11:11,760 --> 00:11:15,279
and the sub domain itself

360
00:11:13,360 --> 00:11:18,959
isn't something that which the owner of

361
00:11:15,279 --> 00:11:18,959
the pay level domain can then control

362
00:11:19,760 --> 00:11:23,519
now in the domain name as i'm trying to

363
00:11:21,920 --> 00:11:25,040
i kind of push you towards thinking

364
00:11:23,519 --> 00:11:26,240
about this problem of what can you do

365
00:11:25,040 --> 00:11:28,399
with domain names

366
00:11:26,240 --> 00:11:29,279
i'm just trying to make in this slide

367
00:11:28,399 --> 00:11:30,160
just kind of show you

368
00:11:29,279 --> 00:11:32,000
there's there's different ways of

369
00:11:30,160 --> 00:11:32,640
writing regexes to capture different

370
00:11:32,000 --> 00:11:34,720
parts

371
00:11:32,640 --> 00:11:36,319
parts of a domain name in this case you

372
00:11:34,720 --> 00:11:38,399
start to use a lot of anchoring

373
00:11:36,320 --> 00:11:40,000
with your regexes to identify different

374
00:11:38,399 --> 00:11:41,920
parts

375
00:11:40,000 --> 00:11:44,000
in this case for example you can anchor

376
00:11:41,920 --> 00:11:46,399
towards the end and you can get the tld

377
00:11:44,000 --> 00:11:48,000
for calm and you can also anchor on the

378
00:11:46,399 --> 00:11:48,480
lower on the beginning parts of the

379
00:11:48,000 --> 00:11:52,320
string

380
00:11:48,480 --> 00:11:52,320
and capture subdomain characteristics

381
00:11:53,760 --> 00:11:56,880
okay so here's the first rule that um

382
00:11:56,240 --> 00:11:58,560
within

383
00:11:56,880 --> 00:12:00,000
our configuration files this is how you

384
00:11:58,560 --> 00:12:01,518
express it

385
00:12:00,000 --> 00:12:03,440
a certain rule that will be applied on a

386
00:12:01,519 --> 00:12:05,120
domain name in this

387
00:12:03,440 --> 00:12:07,120
example maybe i'll just pause for a

388
00:12:05,120 --> 00:12:09,120
second and like kind of let you try to

389
00:12:07,120 --> 00:12:10,399
just digest what's kind of being

390
00:12:09,120 --> 00:12:12,160
expressed here

391
00:12:10,399 --> 00:12:13,600
there's a two there's three sections

392
00:12:12,160 --> 00:12:14,560
kind of as previously in the yar rule

393
00:12:13,600 --> 00:12:16,320
there's a meta

394
00:12:14,560 --> 00:12:18,000
meta section it's kind of just

395
00:12:16,320 --> 00:12:19,200
information that's just kind of generic

396
00:12:18,000 --> 00:12:23,760
that will be used for

397
00:12:19,200 --> 00:12:26,560
different uh monitoring um and um

398
00:12:23,760 --> 00:12:27,360
enforcement later uh with some other

399
00:12:26,560 --> 00:12:29,760
parts of this

400
00:12:27,360 --> 00:12:30,800
uh rule engine that we don't really need

401
00:12:29,760 --> 00:12:31,839
to talk about right now

402
00:12:30,800 --> 00:12:33,519
and then there's kind of the heart of

403
00:12:31,839 --> 00:12:34,880
this problem where it's essentially the

404
00:12:33,519 --> 00:12:36,560
definition of the patterns

405
00:12:34,880 --> 00:12:38,079
of rules or in this case regular

406
00:12:36,560 --> 00:12:38,959
expressions that will be applied on

407
00:12:38,079 --> 00:12:41,279
domain names

408
00:12:38,959 --> 00:12:42,719
and then how those ex those patterns

409
00:12:41,279 --> 00:12:44,639
will then be combined

410
00:12:42,720 --> 00:12:47,120
in what's what we're calling we call an

411
00:12:44,639 --> 00:12:47,120
expression

412
00:12:48,560 --> 00:12:52,160
so as i kind of pause and kind of just

413
00:12:50,560 --> 00:12:53,839
explain this a little bit maybe in

414
00:12:52,160 --> 00:12:55,600
english here's what i see when i'm

415
00:12:53,839 --> 00:12:58,959
looking at this this

416
00:12:55,600 --> 00:13:02,000
rule is essentially looking for domains

417
00:12:58,959 --> 00:13:03,599
that don't have subdomains that end with

418
00:13:02,000 --> 00:13:05,680
the tld site

419
00:13:03,600 --> 00:13:07,360
and that have the pay level domain

420
00:13:05,680 --> 00:13:10,399
starting with the characteristics

421
00:13:07,360 --> 00:13:10,399
my dash apple

422
00:13:12,639 --> 00:13:18,560
okay so um so kind of re

423
00:13:16,160 --> 00:13:20,160
rethinking that expression um so sorry

424
00:13:18,560 --> 00:13:22,638
let me just go back and kind of

425
00:13:20,160 --> 00:13:24,240
show this so the tld and domain is the

426
00:13:22,639 --> 00:13:25,040
expression which i want to now focus on

427
00:13:24,240 --> 00:13:27,200
i want to kind of

428
00:13:25,040 --> 00:13:28,800
use that as a stepping stone to helping

429
00:13:27,200 --> 00:13:31,760
you think about how do you actually

430
00:13:28,800 --> 00:13:33,839
build your own rule engine and basically

431
00:13:31,760 --> 00:13:34,240
what you need to do is work backwards

432
00:13:33,839 --> 00:13:35,839
from

433
00:13:34,240 --> 00:13:38,079
where you're essentially trying to end

434
00:13:35,839 --> 00:13:38,959
so in this case we want to evaluate this

435
00:13:38,079 --> 00:13:40,719
expression

436
00:13:38,959 --> 00:13:42,800
and so to get there we need to rethink

437
00:13:40,720 --> 00:13:45,600
how that looks

438
00:13:42,800 --> 00:13:46,639
so graphically we can rewrite this

439
00:13:45,600 --> 00:13:49,040
regular expression

440
00:13:46,639 --> 00:13:50,079
in a binary tree essentially the leaf

441
00:13:49,040 --> 00:13:53,199
nodes are the

442
00:13:50,079 --> 00:13:54,638
regular expressions themselves there on

443
00:13:53,199 --> 00:13:56,319
the one hand on the left hand node is

444
00:13:54,639 --> 00:13:57,120
the tld regular expression on the right

445
00:13:56,320 --> 00:13:59,680
hand side

446
00:13:57,120 --> 00:14:00,800
is the domain regular expression these

447
00:13:59,680 --> 00:14:03,519
are then evaluated

448
00:14:00,800 --> 00:14:05,680
across the domain name in this instance

449
00:14:03,519 --> 00:14:08,000
does the domain name have the site tld

450
00:14:05,680 --> 00:14:08,959
in this other instance does the does the

451
00:14:08,000 --> 00:14:11,120
domain

452
00:14:08,959 --> 00:14:13,599
actually not have a sub domain and does

453
00:14:11,120 --> 00:14:15,760
it start with my-apple

454
00:14:13,600 --> 00:14:18,160
once evaluated for example these would

455
00:14:15,760 --> 00:14:21,600
evaluate to numbers maybe zero or one

456
00:14:18,160 --> 00:14:22,000
boolean indicators describing whether or

457
00:14:21,600 --> 00:14:25,279
not

458
00:14:22,000 --> 00:14:26,079
the the pattern matched now once you

459
00:14:25,279 --> 00:14:27,680
have these

460
00:14:26,079 --> 00:14:29,439
leaf nodes with that contain these

461
00:14:27,680 --> 00:14:31,839
integers you have this

462
00:14:29,440 --> 00:14:32,880
root node that is essentially the

463
00:14:31,839 --> 00:14:34,800
operator

464
00:14:32,880 --> 00:14:36,399
that defines how you combine the

465
00:14:34,800 --> 00:14:38,800
information that's contained in the

466
00:14:36,399 --> 00:14:39,600
leaf nodes in this case it's a logical

467
00:14:38,800 --> 00:14:41,920
operator

468
00:14:39,600 --> 00:14:45,279
which we want to use as an and operator

469
00:14:41,920 --> 00:14:47,360
if you write a truth table for this

470
00:14:45,279 --> 00:14:49,040
so for example if the evaluation of the

471
00:14:47,360 --> 00:14:52,079
left-hand node was one

472
00:14:49,040 --> 00:14:54,800
and the right-hand one was a zero this

473
00:14:52,079 --> 00:14:56,800
evaluated would evaluate to zero

474
00:14:54,800 --> 00:14:58,560
on the other hand or false and then if

475
00:14:56,800 --> 00:15:00,880
the left-hand node was a one and the

476
00:14:58,560 --> 00:15:04,399
right-hand node was a one

477
00:15:00,880 --> 00:15:04,399
this would evaluate to a true

478
00:15:06,160 --> 00:15:09,920
now that was one single operator now

479
00:15:08,480 --> 00:15:10,720
imagine you can have lots of different

480
00:15:09,920 --> 00:15:12,399
operators

481
00:15:10,720 --> 00:15:14,079
you can have these logical operators

482
00:15:12,399 --> 00:15:15,920
such as and or

483
00:15:14,079 --> 00:15:18,079
or greater than or less than you can

484
00:15:15,920 --> 00:15:19,199
imagine numbers boolean indicators on

485
00:15:18,079 --> 00:15:22,560
the leaf nodes

486
00:15:19,199 --> 00:15:23,120
indicating yes or no and then you can

487
00:15:22,560 --> 00:15:25,040
also now

488
00:15:23,120 --> 00:15:26,560
imagine since these and the leaf nodes

489
00:15:25,040 --> 00:15:27,120
you can think of integers being down

490
00:15:26,560 --> 00:15:28,959
there

491
00:15:27,120 --> 00:15:30,959
you can think about actually arithmetic

492
00:15:28,959 --> 00:15:31,599
operators you can think about doing

493
00:15:30,959 --> 00:15:33,119
addition

494
00:15:31,600 --> 00:15:35,199
on these numbers you can think about

495
00:15:33,120 --> 00:15:36,639
subtraction multiplication

496
00:15:35,199 --> 00:15:39,519
and now that's essentially the aha

497
00:15:36,639 --> 00:15:40,959
moment that's the minute when

498
00:15:39,519 --> 00:15:42,639
like i started when i started thinking

499
00:15:40,959 --> 00:15:43,920
about this problem what was at the heart

500
00:15:42,639 --> 00:15:46,959
of these rule engines

501
00:15:43,920 --> 00:15:49,519
is just the ability to combine

502
00:15:46,959 --> 00:15:51,518
these integers in arithmetic expressions

503
00:15:49,519 --> 00:15:53,360
that essentially are the building blocks

504
00:15:51,519 --> 00:15:55,440
for larger expressions that are more

505
00:15:53,360 --> 00:15:57,440
complicated

506
00:15:55,440 --> 00:15:59,199
and so for example when you start

507
00:15:57,440 --> 00:15:59,519
combining what is when i think about

508
00:15:59,199 --> 00:16:00,800
most

509
00:15:59,519 --> 00:16:02,800
machine learning models or these

510
00:16:00,800 --> 00:16:03,680
statistical models you start to think of

511
00:16:02,800 --> 00:16:05,599
them as actually

512
00:16:03,680 --> 00:16:06,800
lots of different variations of very

513
00:16:05,600 --> 00:16:08,880
simple um

514
00:16:06,800 --> 00:16:10,000
operations in algebra it's usually

515
00:16:08,880 --> 00:16:11,199
either simply addition and

516
00:16:10,000 --> 00:16:13,839
multiplication

517
00:16:11,199 --> 00:16:15,599
or it might be matrix multiplication and

518
00:16:13,839 --> 00:16:17,120
addition

519
00:16:15,600 --> 00:16:18,800
and so hence there might be all these

520
00:16:17,120 --> 00:16:20,880
custom operators you could think of

521
00:16:18,800 --> 00:16:22,959
kind of envision where if you have

522
00:16:20,880 --> 00:16:24,800
information in leaf nodes

523
00:16:22,959 --> 00:16:26,239
you can combine them using various

524
00:16:24,800 --> 00:16:27,758
operators in this case

525
00:16:26,240 --> 00:16:29,199
some some of the few that you might be

526
00:16:27,759 --> 00:16:29,600
thinking of or you might be familiar

527
00:16:29,199 --> 00:16:31,120
with

528
00:16:29,600 --> 00:16:33,360
is such as the dot product of two

529
00:16:31,120 --> 00:16:35,600
vectors you might think of

530
00:16:33,360 --> 00:16:36,880
what's known as a hat of matter product

531
00:16:35,600 --> 00:16:38,399
or what otherwise

532
00:16:36,880 --> 00:16:40,480
called the pointwise product of two

533
00:16:38,399 --> 00:16:41,199
vectors or you might be thinking

534
00:16:40,480 --> 00:16:43,759
actually

535
00:16:41,199 --> 00:16:45,519
even beyond the scope of those simple

536
00:16:43,759 --> 00:16:47,519
just arithmetic or

537
00:16:45,519 --> 00:16:49,600
matrix algebra you could be thinking

538
00:16:47,519 --> 00:16:51,120
about linear model operator

539
00:16:49,600 --> 00:16:52,720
where if you think about what is the

540
00:16:51,120 --> 00:16:55,040
guts of a linear model it's

541
00:16:52,720 --> 00:16:56,079
it's the coefficients of the model and

542
00:16:55,040 --> 00:16:59,199
it's an input

543
00:16:56,079 --> 00:17:00,160
and they're dotted together same with a

544
00:16:59,199 --> 00:17:02,160
glm

545
00:17:00,160 --> 00:17:04,159
typically this is the dot product of

546
00:17:02,160 --> 00:17:06,559
input coefficients with an input

547
00:17:04,160 --> 00:17:09,280
sorry with coefficients with an input

548
00:17:06,559 --> 00:17:11,098
that are then exponentiated

549
00:17:09,280 --> 00:17:12,720
and so on

550
00:17:11,098 --> 00:17:15,119
[Music]

551
00:17:12,720 --> 00:17:16,720
okay so what's really interesting that i

552
00:17:15,119 --> 00:17:19,119
would just want to kind of

553
00:17:16,720 --> 00:17:20,400
reiterate here is that given these kind

554
00:17:19,119 --> 00:17:21,760
of expressions that you

555
00:17:20,400 --> 00:17:24,000
are an expression that can be written in

556
00:17:21,760 --> 00:17:25,760
a binary tree you want to think about

557
00:17:24,000 --> 00:17:27,439
you can think about these root or these

558
00:17:25,760 --> 00:17:30,400
leaf nodes containing not just

559
00:17:27,439 --> 00:17:31,280
zeros or ones but also on any integers

560
00:17:30,400 --> 00:17:34,799
for example

561
00:17:31,280 --> 00:17:37,039
one two three four five in that case

562
00:17:34,799 --> 00:17:38,320
without using simple regular expressions

563
00:17:37,039 --> 00:17:39,200
what i'm talking about is just the

564
00:17:38,320 --> 00:17:41,760
difference between

565
00:17:39,200 --> 00:17:42,640
doing a simple pattern match versus a

566
00:17:41,760 --> 00:17:45,200
find all

567
00:17:42,640 --> 00:17:47,360
match on the regex in this case you

568
00:17:45,200 --> 00:17:50,000
might be counting the number of matches

569
00:17:47,360 --> 00:17:50,000
of a pattern

570
00:17:52,000 --> 00:17:55,280
and one of the simple or like one thing

571
00:17:53,679 --> 00:17:56,080
you might be wondering is well if you're

572
00:17:55,280 --> 00:17:57,760
in if

573
00:17:56,080 --> 00:17:59,760
one kind of caveat here is like as you

574
00:17:57,760 --> 00:18:01,440
start to evaluate leaf nodes at

575
00:17:59,760 --> 00:18:03,039
different values other than boolean

576
00:18:01,440 --> 00:18:04,960
values such as zero and one

577
00:18:03,039 --> 00:18:06,240
the question becomes how do logical

578
00:18:04,960 --> 00:18:08,640
operators continue to

579
00:18:06,240 --> 00:18:09,360
work um in that case this is just a

580
00:18:08,640 --> 00:18:11,039
simple slide

581
00:18:09,360 --> 00:18:12,559
i maybe won't go into all the details

582
00:18:11,039 --> 00:18:14,720
here but it's simple to

583
00:18:12,559 --> 00:18:16,480
or i just want to express that you can

584
00:18:14,720 --> 00:18:18,000
kind of rethink what our logical

585
00:18:16,480 --> 00:18:19,919
operators

586
00:18:18,000 --> 00:18:21,039
within the framework of having actual

587
00:18:19,919 --> 00:18:22,880
integer counts

588
00:18:21,039 --> 00:18:24,400
such that they actually still evaluate

589
00:18:22,880 --> 00:18:27,120
as you would expect them to

590
00:18:24,400 --> 00:18:27,679
so as the lower example is showing you

591
00:18:27,120 --> 00:18:30,479
how

592
00:18:27,679 --> 00:18:32,000
you can actually kind of combine um

593
00:18:30,480 --> 00:18:34,640
these kind of

594
00:18:32,000 --> 00:18:35,360
counts uh in logical operators such that

595
00:18:34,640 --> 00:18:38,960
like

596
00:18:35,360 --> 00:18:38,959
you you get what you would expect

597
00:18:39,840 --> 00:18:43,840
okay so now that i've kind of described

598
00:18:41,520 --> 00:18:44,720
a little bit how like in my mind what is

599
00:18:43,840 --> 00:18:46,559
at the heart of

600
00:18:44,720 --> 00:18:48,880
a rule engine it's essentially a

601
00:18:46,559 --> 00:18:50,240
compiler that takes a configuration file

602
00:18:48,880 --> 00:18:52,160
and then expresses it

603
00:18:50,240 --> 00:18:54,240
typically in some sort of logical

604
00:18:52,160 --> 00:18:54,960
sequence so that the operations which

605
00:18:54,240 --> 00:18:57,919
you as

606
00:18:54,960 --> 00:18:58,480
an analyst want performed on it the next

607
00:18:57,919 --> 00:19:00,720
thing is

608
00:18:58,480 --> 00:19:01,840
being able to just actually build that

609
00:19:00,720 --> 00:19:03,919
expression or

610
00:19:01,840 --> 00:19:05,439
that abstraction or in this case a

611
00:19:03,919 --> 00:19:07,360
binary tree

612
00:19:05,440 --> 00:19:09,039
so the simplest way of doing that is

613
00:19:07,360 --> 00:19:10,719
actually taking your

614
00:19:09,039 --> 00:19:12,640
simple expression that you wrote as a

615
00:19:10,720 --> 00:19:14,720
human in human readable format

616
00:19:12,640 --> 00:19:16,559
and putting that into more computable

617
00:19:14,720 --> 00:19:18,559
computer readable format

618
00:19:16,559 --> 00:19:20,720
in this case we want to take an infix

619
00:19:18,559 --> 00:19:23,039
expression and rewrite it as a postfix

620
00:19:20,720 --> 00:19:25,120
expression on the right hand side is the

621
00:19:23,039 --> 00:19:27,520
post-fix expression

622
00:19:25,120 --> 00:19:28,799
that's kind of it's it's basically a

623
00:19:27,520 --> 00:19:31,840
sort of a

624
00:19:28,799 --> 00:19:34,480
way of traversing this

625
00:19:31,840 --> 00:19:35,520
string such that when you finally reach

626
00:19:34,480 --> 00:19:38,400
an operator

627
00:19:35,520 --> 00:19:39,840
you then sort of have a rule that

628
00:19:38,400 --> 00:19:41,440
essentially performs the

629
00:19:39,840 --> 00:19:42,879
arithmetic in the way that you would do

630
00:19:41,440 --> 00:19:45,280
it in the same way that you do with

631
00:19:42,880 --> 00:19:45,280
inline

632
00:19:47,440 --> 00:19:51,280
so the big part maybe one thing that i

633
00:19:49,440 --> 00:19:52,080
want to just kind of caveat here is just

634
00:19:51,280 --> 00:19:54,160
like what's really

635
00:19:52,080 --> 00:19:55,199
fun about this part of the problem of

636
00:19:54,160 --> 00:19:57,120
being able to just

637
00:19:55,200 --> 00:19:58,720
literally parse uh something that

638
00:19:57,120 --> 00:20:00,479
someone would write you know kind of

639
00:19:58,720 --> 00:20:02,000
logically in these rule engines

640
00:20:00,480 --> 00:20:04,000
and then kind of extracting them into

641
00:20:02,000 --> 00:20:05,280
this postfix expression is that this is

642
00:20:04,000 --> 00:20:06,559
sort of one of those places where it

643
00:20:05,280 --> 00:20:08,158
actually allows you as

644
00:20:06,559 --> 00:20:09,678
if you were the author of these role

645
00:20:08,159 --> 00:20:12,320
engine you could actually

646
00:20:09,679 --> 00:20:13,039
implement really nice like sim uh kind

647
00:20:12,320 --> 00:20:14,799
of

648
00:20:13,039 --> 00:20:16,640
like uh syntactic sugar i guess

649
00:20:14,799 --> 00:20:18,639
sometimes you might call it where it

650
00:20:16,640 --> 00:20:20,000
makes things sort of simpler for the

651
00:20:18,640 --> 00:20:22,480
user so you can kind of

652
00:20:20,000 --> 00:20:23,280
put shorthand so maybe there's like a a

653
00:20:22,480 --> 00:20:26,240
special for

654
00:20:23,280 --> 00:20:26,240
like um

655
00:20:27,600 --> 00:20:31,039
they use a certain character that's sort

656
00:20:29,520 --> 00:20:33,200
of reserved that

657
00:20:31,039 --> 00:20:34,240
you don't let users use so for example

658
00:20:33,200 --> 00:20:36,240
if you use the letter

659
00:20:34,240 --> 00:20:38,159
e it might be a shorthand notation for

660
00:20:36,240 --> 00:20:41,360
the number 2.718

661
00:20:38,159 --> 00:20:44,400
literally the abbreviation of the

662
00:20:41,360 --> 00:20:45,678
natural number e so

663
00:20:44,400 --> 00:20:47,679
there's lots of things you can kind of

664
00:20:45,679 --> 00:20:49,360
do in this kind of area

665
00:20:47,679 --> 00:20:50,960
that help kind of like simplify the

666
00:20:49,360 --> 00:20:52,559
workflow of like let's say when you're

667
00:20:50,960 --> 00:20:54,159
building these rules um

668
00:20:52,559 --> 00:20:55,760
in just which i'll show you in just a

669
00:20:54,159 --> 00:20:57,840
little bit so

670
00:20:55,760 --> 00:20:59,360
the what is the big deal with this like

671
00:20:57,840 --> 00:21:01,199
in fixed to postfix

672
00:20:59,360 --> 00:21:02,399
the idea is that it just simplifies

673
00:21:01,200 --> 00:21:04,559
everything like literally

674
00:21:02,400 --> 00:21:06,080
we're essentially almost done with this

675
00:21:04,559 --> 00:21:06,799
problem we almost have a completely

676
00:21:06,080 --> 00:21:08,960
constructed

677
00:21:06,799 --> 00:21:10,480
a rule engine from scratch because at

678
00:21:08,960 --> 00:21:12,080
this point now all we need to do is

679
00:21:10,480 --> 00:21:13,120
simply iterate through this postfix

680
00:21:12,080 --> 00:21:16,399
expression

681
00:21:13,120 --> 00:21:18,158
and then using a stack we can just pop

682
00:21:16,400 --> 00:21:19,760
we can then push thing we can iterate

683
00:21:18,159 --> 00:21:21,600
through the postfix expression

684
00:21:19,760 --> 00:21:23,679
push each of the individual elements

685
00:21:21,600 --> 00:21:25,678
onto the stack then each time you

686
00:21:23,679 --> 00:21:27,200
reach an operator in this postfix

687
00:21:25,679 --> 00:21:29,039
expression you start popping off the

688
00:21:27,200 --> 00:21:31,440
elements

689
00:21:29,039 --> 00:21:33,760
in the stack and then you essentially

690
00:21:31,440 --> 00:21:36,400
construct your binary tree

691
00:21:33,760 --> 00:21:36,400
for example

692
00:21:37,919 --> 00:21:41,280
okay so like i was saying so that is

693
00:21:40,080 --> 00:21:43,199
pretty much the heart of

694
00:21:41,280 --> 00:21:44,320
everything at least in my mind and at

695
00:21:43,200 --> 00:21:46,240
least

696
00:21:44,320 --> 00:21:48,399
when we implemented our version it

697
00:21:46,240 --> 00:21:51,679
really ended up just being one line

698
00:21:48,400 --> 00:21:53,600
or sorry one file of go laying code

699
00:21:51,679 --> 00:21:54,880
that contained essentially all of the

700
00:21:53,600 --> 00:21:56,719
logic that you

701
00:21:54,880 --> 00:21:58,559
you just saw in the previous slide

702
00:21:56,720 --> 00:22:00,480
essentially just to rephrase it

703
00:21:58,559 --> 00:22:02,559
we have a configuration file which is

704
00:22:00,480 --> 00:22:04,640
parsed we have an expression that is

705
00:22:02,559 --> 00:22:06,240
then rewritten into a binary tree

706
00:22:04,640 --> 00:22:08,320
and then we have essentially regular

707
00:22:06,240 --> 00:22:13,840
expressions that are applied

708
00:22:08,320 --> 00:22:13,840
at the leaf nodes on domain names

709
00:22:14,720 --> 00:22:17,919
so here's a few examples what do you

710
00:22:16,240 --> 00:22:20,640
like why why do all of this

711
00:22:17,919 --> 00:22:21,200
and so here's kind of like what a few

712
00:22:20,640 --> 00:22:23,120
different

713
00:22:21,200 --> 00:22:24,240
ways that you can rethink using your

714
00:22:23,120 --> 00:22:27,360
roles

715
00:22:24,240 --> 00:22:28,159
your role engines so that you can enable

716
00:22:27,360 --> 00:22:30,080
these kind of

717
00:22:28,159 --> 00:22:31,760
slightly more nuanced ways of thinking

718
00:22:30,080 --> 00:22:33,360
about rules and writing rules

719
00:22:31,760 --> 00:22:35,200
here's an example of simply lit

720
00:22:33,360 --> 00:22:37,280
embedding in

721
00:22:35,200 --> 00:22:38,799
the precondition that a domain name has

722
00:22:37,280 --> 00:22:40,960
lots of digits compared to the

723
00:22:38,799 --> 00:22:44,400
alphabetical characters in the domain

724
00:22:40,960 --> 00:22:46,960
in this case it's more than 25

725
00:22:44,400 --> 00:22:48,720
at the same time you can kind of whittle

726
00:22:46,960 --> 00:22:50,159
down the space of domains that you want

727
00:22:48,720 --> 00:22:52,840
to be looking at for example

728
00:22:50,159 --> 00:22:54,559
to those domains that with the the tld

729
00:22:52,840 --> 00:22:56,399
icu

730
00:22:54,559 --> 00:22:57,840
here's another example where you can

731
00:22:56,400 --> 00:22:59,200
express things now that's literally a

732
00:22:57,840 --> 00:23:02,559
linear combination

733
00:22:59,200 --> 00:23:04,240
of the evaluation of rejects such that

734
00:23:02,559 --> 00:23:06,639
you actually have a linear model

735
00:23:04,240 --> 00:23:08,880
but then you have a cutoff point where

736
00:23:06,640 --> 00:23:10,240
if this evaluates to some number greater

737
00:23:08,880 --> 00:23:12,400
than say 0.5

738
00:23:10,240 --> 00:23:13,360
then you have a classification of a

739
00:23:12,400 --> 00:23:15,039
domain as

740
00:23:13,360 --> 00:23:17,439
meeting some criteria maybe that it's

741
00:23:15,039 --> 00:23:19,760
phishing versus not

742
00:23:17,440 --> 00:23:20,960
and maybe i can just pause here um to

743
00:23:19,760 --> 00:23:23,919
kind of just mention that with

744
00:23:20,960 --> 00:23:25,760
these linear models this is totally not

745
00:23:23,919 --> 00:23:26,320
theoretical this is actually something

746
00:23:25,760 --> 00:23:27,760
which

747
00:23:26,320 --> 00:23:29,840
on our team we've been actually

748
00:23:27,760 --> 00:23:32,158
experimenting with a lot

749
00:23:29,840 --> 00:23:33,280
and for a long for over like the last

750
00:23:32,159 --> 00:23:34,880
probably three years

751
00:23:33,280 --> 00:23:36,960
we've been experimenting with lots of

752
00:23:34,880 --> 00:23:38,960
different deep learning techniques to

753
00:23:36,960 --> 00:23:40,799
tease out character character

754
00:23:38,960 --> 00:23:43,520
combinations across domain names

755
00:23:40,799 --> 00:23:45,200
that we think are can kind of predict

756
00:23:43,520 --> 00:23:47,840
malicious domain names

757
00:23:45,200 --> 00:23:49,279
and so this kind of hyper focus on very

758
00:23:47,840 --> 00:23:51,039
specific keywords and their linear

759
00:23:49,279 --> 00:23:52,559
combinations to identify phishing

760
00:23:51,039 --> 00:23:55,279
domains we've actually found it to be

761
00:23:52,559 --> 00:23:55,279
quite successful

762
00:23:56,240 --> 00:23:59,679
so so then kind of like kind of push

763
00:23:58,159 --> 00:24:01,440
this just a little bit further so

764
00:23:59,679 --> 00:24:02,720
you're kind of just aware of it is that

765
00:24:01,440 --> 00:24:05,279
you can kind of also

766
00:24:02,720 --> 00:24:05,919
kind of used the different operations

767
00:24:05,279 --> 00:24:07,520
and

768
00:24:05,919 --> 00:24:09,279
that kind of worked previously kind of

769
00:24:07,520 --> 00:24:11,279
shown that you can

770
00:24:09,279 --> 00:24:13,120
so that you can exponentiate these

771
00:24:11,279 --> 00:24:18,320
linear combinations and you can

772
00:24:13,120 --> 00:24:19,760
achieve a generalized linear model

773
00:24:18,320 --> 00:24:21,200
okay so now that i've kind of given a

774
00:24:19,760 --> 00:24:22,559
few different examples hopefully that

775
00:24:21,200 --> 00:24:26,159
makes sense

776
00:24:22,559 --> 00:24:27,360
um i've uh i'm now kind of going to just

777
00:24:26,159 --> 00:24:30,320
kind of walk you through

778
00:24:27,360 --> 00:24:32,240
some of the um some of the ways that we

779
00:24:30,320 --> 00:24:33,678
kind of just took steps towards putting

780
00:24:32,240 --> 00:24:36,080
out this final

781
00:24:33,679 --> 00:24:37,520
rule engine uh what were the actually

782
00:24:36,080 --> 00:24:39,918
the simplest steps we took

783
00:24:37,520 --> 00:24:41,039
um it wasn't at all i would say

784
00:24:39,919 --> 00:24:42,720
admittedly uh

785
00:24:41,039 --> 00:24:44,320
building out these statistical models to

786
00:24:42,720 --> 00:24:44,799
start and that's what i kind of want to

787
00:24:44,320 --> 00:24:47,120
discuss

788
00:24:44,799 --> 00:24:48,720
now and then where we're at now is kind

789
00:24:47,120 --> 00:24:51,279
of working on uh

790
00:24:48,720 --> 00:24:52,559
the these statistical models sorry i'm

791
00:24:51,279 --> 00:24:55,679
uh looking at

792
00:24:52,559 --> 00:24:58,240
the the the slack chat and uh someone

793
00:24:55,679 --> 00:25:00,559
is uh playing around with um some trick

794
00:24:58,240 --> 00:25:03,840
so that's awesome

795
00:25:00,559 --> 00:25:04,720
okay so i work on a fairly small team at

796
00:25:03,840 --> 00:25:07,760
least currently

797
00:25:04,720 --> 00:25:09,840
um and so the question was how could we

798
00:25:07,760 --> 00:25:11,600
really tackle a problem that was

799
00:25:09,840 --> 00:25:12,080
actually quite big that was brought to

800
00:25:11,600 --> 00:25:14,399
us

801
00:25:12,080 --> 00:25:15,600
so management came to us asking if

802
00:25:14,400 --> 00:25:17,120
whether or not we could

803
00:25:15,600 --> 00:25:18,719
improve the efficacy towards phishing

804
00:25:17,120 --> 00:25:20,559
attacks which they recently saw a major

805
00:25:18,720 --> 00:25:22,000
uptick to our enterprise customers this

806
00:25:20,559 --> 00:25:22,720
was pretty much across the board in the

807
00:25:22,000 --> 00:25:25,919
u.s

808
00:25:22,720 --> 00:25:27,279
and in europe and now the the problem

809
00:25:25,919 --> 00:25:28,000
there was we were going to be really

810
00:25:27,279 --> 00:25:32,080
held accountable

811
00:25:28,000 --> 00:25:33,919
for this so um our team started really

812
00:25:32,080 --> 00:25:35,199
really brainstorming what was the best

813
00:25:33,919 --> 00:25:36,960
thing we could do with the limited

814
00:25:35,200 --> 00:25:38,080
resources we had and maybe you found

815
00:25:36,960 --> 00:25:39,120
yourself you found yourself doing

816
00:25:38,080 --> 00:25:40,799
similar things

817
00:25:39,120 --> 00:25:42,158
on the one hand kind of i've alluded to

818
00:25:40,799 --> 00:25:44,080
we actually have

819
00:25:42,159 --> 00:25:46,080
had some previous work working with some

820
00:25:44,080 --> 00:25:49,199
deep learning models or even psychic

821
00:25:46,080 --> 00:25:50,080
learn models that identify dom phishing

822
00:25:49,200 --> 00:25:52,000
domains

823
00:25:50,080 --> 00:25:53,199
based on just the keywords that are used

824
00:25:52,000 --> 00:25:55,200
within a domain name

825
00:25:53,200 --> 00:25:56,799
we started ranking those and how much

826
00:25:55,200 --> 00:25:58,000
time it would take for us to do that

827
00:25:56,799 --> 00:26:00,320
and then how much coverage it would

828
00:25:58,000 --> 00:26:02,159
actually um provide us and

829
00:26:00,320 --> 00:26:03,600
essentially reduce the customer

830
00:26:02,159 --> 00:26:05,120
complaints we were actually getting

831
00:26:03,600 --> 00:26:06,879
or what we called internally false

832
00:26:05,120 --> 00:26:08,479
negatives

833
00:26:06,880 --> 00:26:10,240
we also had kind of debates and

834
00:26:08,480 --> 00:26:12,640
conversations and proof

835
00:26:10,240 --> 00:26:13,840
concepts of the efficacy of us focusing

836
00:26:12,640 --> 00:26:16,480
on very specific

837
00:26:13,840 --> 00:26:17,199
uh bulletproof hosters and their their

838
00:26:16,480 --> 00:26:19,840
attendance and

839
00:26:17,200 --> 00:26:20,960
their tendency to be using fishing uh as

840
00:26:19,840 --> 00:26:24,080
a very uh

841
00:26:20,960 --> 00:26:26,080
prominent theme in their attacks

842
00:26:24,080 --> 00:26:27,439
similarly we were looking at different

843
00:26:26,080 --> 00:26:28,960
ways of looking at actually just the

844
00:26:27,440 --> 00:26:32,000
html content of

845
00:26:28,960 --> 00:26:33,840
phishing pages on one on for one

846
00:26:32,000 --> 00:26:35,039
one example was actually just taking

847
00:26:33,840 --> 00:26:36,639
screenshots of

848
00:26:35,039 --> 00:26:38,400
phishing pages and applying a

849
00:26:36,640 --> 00:26:41,520
convolutional neural network on

850
00:26:38,400 --> 00:26:42,400
the the image and i did and just

851
00:26:41,520 --> 00:26:46,240
labeling it

852
00:26:42,400 --> 00:26:49,200
uh as a login page or not

853
00:26:46,240 --> 00:26:50,400
and then we had a whole series of um

854
00:26:49,200 --> 00:26:52,960
based on the

855
00:26:50,400 --> 00:26:53,600
the reports from our customers and the

856
00:26:52,960 --> 00:26:56,159
phishing

857
00:26:53,600 --> 00:26:57,678
attacks that they were seeing recently

858
00:26:56,159 --> 00:26:59,120
there were a bunch of simple ideas that

859
00:26:57,679 --> 00:27:00,080
we had that we could potentially put

860
00:26:59,120 --> 00:27:02,879
together really

861
00:27:00,080 --> 00:27:03,678
quickly uh in terms of regexes over

862
00:27:02,880 --> 00:27:05,919
across a

863
00:27:03,679 --> 00:27:08,159
series of different brands and different

864
00:27:05,919 --> 00:27:12,799
keyword combinations that we typically

865
00:27:08,159 --> 00:27:12,799
never saw in domains

866
00:27:13,600 --> 00:27:16,639
and so we ended up kind of slowly taking

867
00:27:16,080 --> 00:27:18,559
steps

868
00:27:16,640 --> 00:27:20,480
out of this hole that it felt like we

869
00:27:18,559 --> 00:27:21,918
were in uh and some of the

870
00:27:20,480 --> 00:27:23,679
here's just three of the approaches that

871
00:27:21,919 --> 00:27:25,039
we started walking through

872
00:27:23,679 --> 00:27:26,880
and we started working on and i'll try

873
00:27:25,039 --> 00:27:28,158
to allude to different highlights and

874
00:27:26,880 --> 00:27:28,720
like some pain points that we had with

875
00:27:28,159 --> 00:27:30,480
these

876
00:27:28,720 --> 00:27:31,840
the first was keyword neighborhoods in

877
00:27:30,480 --> 00:27:34,240
this example you're looking at

878
00:27:31,840 --> 00:27:35,279
a domain name with a keyword apple uh

879
00:27:34,240 --> 00:27:37,360
and then some

880
00:27:35,279 --> 00:27:38,720
neighborhood of characters uh that are

881
00:27:37,360 --> 00:27:39,360
associated with this known fishing

882
00:27:38,720 --> 00:27:41,679
domain

883
00:27:39,360 --> 00:27:42,479
that's the um so that's what the apple

884
00:27:41,679 --> 00:27:44,960
the id dash

885
00:27:42,480 --> 00:27:46,320
check instead of the neighborhood we

886
00:27:44,960 --> 00:27:48,640
then configure like

887
00:27:46,320 --> 00:27:50,320
wrote scripts to take a series of

888
00:27:48,640 --> 00:27:51,120
thousands of domains that were known to

889
00:27:50,320 --> 00:27:54,720
be fishing

890
00:27:51,120 --> 00:27:56,158
and applied uh a filter over

891
00:27:54,720 --> 00:27:58,000
various brands that we wanted to be

892
00:27:56,159 --> 00:28:00,240
looking for known brands

893
00:27:58,000 --> 00:28:02,320
and then we would try to extract and

894
00:28:00,240 --> 00:28:05,200
sort of um

895
00:28:02,320 --> 00:28:06,399
sort of uh walk through these strings

896
00:28:05,200 --> 00:28:08,320
and sort of like open

897
00:28:06,399 --> 00:28:10,959
kind of include new characters that we

898
00:28:08,320 --> 00:28:14,480
thought might be sufficient to identify

899
00:28:10,960 --> 00:28:16,080
uh various uh anomalous sort of key

900
00:28:14,480 --> 00:28:17,679
like character combinations with known

901
00:28:16,080 --> 00:28:20,879
brands so in this case like

902
00:28:17,679 --> 00:28:21,360
that's sort of bizarre that the apple id

903
00:28:20,880 --> 00:28:25,200
dash

904
00:28:21,360 --> 00:28:27,918
check just happens at all

905
00:28:25,200 --> 00:28:31,840
in for example that in like our traffic

906
00:28:27,919 --> 00:28:31,840
we maybe have never seen that before

907
00:28:33,039 --> 00:28:36,640
and like i was saying that we did this

908
00:28:34,799 --> 00:28:38,960
for tons of brands there was

909
00:28:36,640 --> 00:28:40,720
we have a very large user base and so

910
00:28:38,960 --> 00:28:41,760
there's we needed ways to automate this

911
00:28:40,720 --> 00:28:43,760
there were thousands of

912
00:28:41,760 --> 00:28:45,520
brands that we were trying to kind of

913
00:28:43,760 --> 00:28:46,559
provide some minimal coverage for and

914
00:28:45,520 --> 00:28:49,600
identifying

915
00:28:46,559 --> 00:28:51,279
various phishing domains and

916
00:28:49,600 --> 00:28:53,360
this was just kind of a slide to kind of

917
00:28:51,279 --> 00:28:54,720
allude to some of the challenges of

918
00:28:53,360 --> 00:28:57,279
trying to like work with

919
00:28:54,720 --> 00:28:58,000
lots of different domain or brands and

920
00:28:57,279 --> 00:29:00,000
you'll find yourself

921
00:28:58,000 --> 00:29:03,039
working through especially restricting

922
00:29:00,000 --> 00:29:03,039
yourself to regexes

923
00:29:03,520 --> 00:29:06,639
and here's a slide of just kind of

924
00:29:04,880 --> 00:29:07,200
showing like so what we started doing is

925
00:29:06,640 --> 00:29:08,960
we started

926
00:29:07,200 --> 00:29:10,320
working internally we have lots of feeds

927
00:29:08,960 --> 00:29:12,720
internally and you might be

928
00:29:10,320 --> 00:29:14,080
familiar with fish tank that's a product

929
00:29:12,720 --> 00:29:15,919
that was started up in

930
00:29:14,080 --> 00:29:17,360
dns which is the predecessor to cisco

931
00:29:15,919 --> 00:29:20,000
umbrella

932
00:29:17,360 --> 00:29:21,360
and um but at the same time we needed to

933
00:29:20,000 --> 00:29:22,799
kind of expand our

934
00:29:21,360 --> 00:29:25,678
our reach and we so we started using a

935
00:29:22,799 --> 00:29:27,360
lot of open source uh

936
00:29:25,679 --> 00:29:28,960
domains that were kind of being

937
00:29:27,360 --> 00:29:31,360
identified as iocs

938
00:29:28,960 --> 00:29:32,000
and so um this is just an example where

939
00:29:31,360 --> 00:29:33,678
it's actually

940
00:29:32,000 --> 00:29:36,000
becomes fairly non-trivial to automate

941
00:29:33,679 --> 00:29:38,159
this concept of like the neighborhoods

942
00:29:36,000 --> 00:29:40,240
of to brands for example you'll start to

943
00:29:38,159 --> 00:29:40,960
see that brands start to appear as sub

944
00:29:40,240 --> 00:29:43,520
domains

945
00:29:40,960 --> 00:29:45,440
or the actual like brand domain name

946
00:29:43,520 --> 00:29:46,000
itself appears in the domain but there's

947
00:29:45,440 --> 00:29:48,559
very few

948
00:29:46,000 --> 00:29:50,320
characters that you can kind of leverage

949
00:29:48,559 --> 00:29:51,360
in terms of the neighborhoods to kind of

950
00:29:50,320 --> 00:29:53,678
identify that

951
00:29:51,360 --> 00:29:55,360
and so you needed to so we we really had

952
00:29:53,679 --> 00:29:57,440
to like kind of

953
00:29:55,360 --> 00:29:58,719
surgically get into these scripts and

954
00:29:57,440 --> 00:30:01,200
kind of automate the way

955
00:29:58,720 --> 00:30:02,159
which like finding the not only finding

956
00:30:01,200 --> 00:30:03,520
the brands finding

957
00:30:02,159 --> 00:30:05,919
the placement of the brands within the

958
00:30:03,520 --> 00:30:08,000
domain names making sure that the

959
00:30:05,919 --> 00:30:09,440
then outputted regexes that were trying

960
00:30:08,000 --> 00:30:11,520
to identify the brands

961
00:30:09,440 --> 00:30:14,880
would have certain anchor points counts

962
00:30:11,520 --> 00:30:14,879
of digits and things like that

963
00:30:15,360 --> 00:30:18,559
another approach we took was actually

964
00:30:16,640 --> 00:30:19,440
just trying to rethink how our attackers

965
00:30:18,559 --> 00:30:21,440
attacking us

966
00:30:19,440 --> 00:30:23,120
and so we started brute forcing actually

967
00:30:21,440 --> 00:30:24,080
a ton of our brand finding the brands

968
00:30:23,120 --> 00:30:26,799
that we wanted to focus

969
00:30:24,080 --> 00:30:28,480
on and starting to permute the different

970
00:30:26,799 --> 00:30:30,158
domain names so that

971
00:30:28,480 --> 00:30:31,520
we actually kind of preemptively thought

972
00:30:30,159 --> 00:30:34,640
about that some of the various type of

973
00:30:31,520 --> 00:30:36,240
squats that actually people are using

974
00:30:34,640 --> 00:30:38,640
here's an example of kind of one of the

975
00:30:36,240 --> 00:30:40,559
effective one of the more effective uh

976
00:30:38,640 --> 00:30:42,559
permutations that we've found is just a

977
00:30:40,559 --> 00:30:42,960
simple alliteration of instagram using

978
00:30:42,559 --> 00:30:45,360
an

979
00:30:42,960 --> 00:30:46,640
l instead of an i and what i thought

980
00:30:45,360 --> 00:30:48,158
like about this example

981
00:30:46,640 --> 00:30:50,159
is not only like this was just something

982
00:30:48,159 --> 00:30:52,799
that was not at all on our radar but it

983
00:30:50,159 --> 00:30:54,720
became just a very prominent kind of

984
00:30:52,799 --> 00:30:56,720
once we became aware of it we realized

985
00:30:54,720 --> 00:30:57,440
that the prominence of this online at

986
00:30:56,720 --> 00:30:59,120
the moment

987
00:30:57,440 --> 00:31:01,120
is just how often people are being

988
00:30:59,120 --> 00:31:02,879
phished at instagram

989
00:31:01,120 --> 00:31:04,399
for essentially copyright infringement

990
00:31:02,880 --> 00:31:05,440
basically scaring people to think that

991
00:31:04,399 --> 00:31:07,439
like they've just posted

992
00:31:05,440 --> 00:31:09,519
or reposted a picture that someone's

993
00:31:07,440 --> 00:31:11,600
trying to sue them for now

994
00:31:09,519 --> 00:31:13,919
and i like this because these domain the

995
00:31:11,600 --> 00:31:15,600
one domain on on the left is actually

996
00:31:13,919 --> 00:31:17,120
a permutation of instagram and on the

997
00:31:15,600 --> 00:31:18,959
right you kind of see this nice

998
00:31:17,120 --> 00:31:20,879
kind of neighborhood of characters that

999
00:31:18,960 --> 00:31:24,399
maybe previously we would have never

1000
00:31:20,880 --> 00:31:26,240
known instagram was kind of like if it

1001
00:31:24,399 --> 00:31:28,000
if we saw those characters kind of or

1002
00:31:26,240 --> 00:31:28,960
those substrings kind of in combination

1003
00:31:28,000 --> 00:31:31,039
with instagram

1004
00:31:28,960 --> 00:31:34,320
then we would now kind of start to think

1005
00:31:31,039 --> 00:31:34,320
that they're going to be malicious

1006
00:31:34,799 --> 00:31:38,158
also like one of the things that we also

1007
00:31:36,960 --> 00:31:41,519
started doing was actually

1008
00:31:38,159 --> 00:31:42,480
rethinking how um you you take a series

1009
00:31:41,519 --> 00:31:44,000
of domains so

1010
00:31:42,480 --> 00:31:45,519
what we were working with like those

1011
00:31:44,000 --> 00:31:46,880
millions of domains a day

1012
00:31:45,519 --> 00:31:48,240
that we're trying to process and trying

1013
00:31:46,880 --> 00:31:49,519
to kind of identify these phishing

1014
00:31:48,240 --> 00:31:51,200
attacks

1015
00:31:49,519 --> 00:31:53,279
but at the same time we have a huge

1016
00:31:51,200 --> 00:31:56,159
treasure trove of known

1017
00:31:53,279 --> 00:31:57,200
historical uh fishing domains and on the

1018
00:31:56,159 --> 00:32:00,640
one hand

1019
00:31:57,200 --> 00:32:03,200
some of these attacker or like these

1020
00:32:00,640 --> 00:32:04,880
actors uh are kind of reusing their

1021
00:32:03,200 --> 00:32:06,240
infrastructure reusing scripts

1022
00:32:04,880 --> 00:32:08,960
and they're essentially just like you

1023
00:32:06,240 --> 00:32:11,679
know permuting different like keywords

1024
00:32:08,960 --> 00:32:12,880
maybe just appending various um digits

1025
00:32:11,679 --> 00:32:14,720
in those domains

1026
00:32:12,880 --> 00:32:16,159
this is an example where some of some of

1027
00:32:14,720 --> 00:32:17,360
the times they're literally just getting

1028
00:32:16,159 --> 00:32:19,519
lazy and they just they just

1029
00:32:17,360 --> 00:32:20,799
use variations of digits this is a

1030
00:32:19,519 --> 00:32:23,919
pretty easy

1031
00:32:20,799 --> 00:32:25,360
catch with a regex but what i want to

1032
00:32:23,919 --> 00:32:27,120
kind of highlight with this

1033
00:32:25,360 --> 00:32:28,879
is just like actually how you can kind

1034
00:32:27,120 --> 00:32:29,518
of work this backwards in the other

1035
00:32:28,880 --> 00:32:30,799
direction

1036
00:32:29,519 --> 00:32:32,000
just like actually you can use some of

1037
00:32:30,799 --> 00:32:32,559
these other techniques in the other

1038
00:32:32,000 --> 00:32:34,640
direction

1039
00:32:32,559 --> 00:32:36,720
which is not that you want to identify

1040
00:32:34,640 --> 00:32:39,039
malicious domains but you actually want

1041
00:32:36,720 --> 00:32:41,440
to identify benign domains so

1042
00:32:39,039 --> 00:32:42,640
for example if you set up a you if

1043
00:32:41,440 --> 00:32:45,760
you've ever set up

1044
00:32:42,640 --> 00:32:47,120
um some sort of script to monitor all

1045
00:32:45,760 --> 00:32:47,840
the domains that are going in and out of

1046
00:32:47,120 --> 00:32:50,479
a network

1047
00:32:47,840 --> 00:32:51,678
and you start to like lay in a few

1048
00:32:50,480 --> 00:32:52,960
different keywords

1049
00:32:51,679 --> 00:32:54,720
you start to notice that you know you

1050
00:32:52,960 --> 00:32:56,640
get these false positives

1051
00:32:54,720 --> 00:32:58,399
at the same time you can also start to

1052
00:32:56,640 --> 00:32:59,840
use these registers to actually

1053
00:32:58,399 --> 00:33:02,000
filter out things that you know are

1054
00:32:59,840 --> 00:33:03,760
actually okay um these are usually

1055
00:33:02,000 --> 00:33:05,679
automated services

1056
00:33:03,760 --> 00:33:07,360
domains that are used in apis that are

1057
00:33:05,679 --> 00:33:09,600
just kind of transferring various

1058
00:33:07,360 --> 00:33:11,039
data back and forth and a lot of those

1059
00:33:09,600 --> 00:33:11,918
domains are actually algorithmically

1060
00:33:11,039 --> 00:33:13,679
generated

1061
00:33:11,919 --> 00:33:15,039
and and actually quite predictable in

1062
00:33:13,679 --> 00:33:16,399
nature in the future

1063
00:33:15,039 --> 00:33:18,559
and so they're usually using very

1064
00:33:16,399 --> 00:33:20,320
specific types of character combinations

1065
00:33:18,559 --> 00:33:21,600
or a prepending of digits and this is

1066
00:33:20,320 --> 00:33:25,678
one of those examples

1067
00:33:21,600 --> 00:33:27,760
that we kind of use to leverage that

1068
00:33:25,679 --> 00:33:29,760
okay so i just described uh pretty

1069
00:33:27,760 --> 00:33:31,440
quickly just a few examples of how we

1070
00:33:29,760 --> 00:33:34,000
actually kind of bootstrapped out

1071
00:33:31,440 --> 00:33:35,600
our phishing detection using the sort of

1072
00:33:34,000 --> 00:33:37,360
rule engine that i kind of described

1073
00:33:35,600 --> 00:33:38,959
previously so you can imagine a lot of

1074
00:33:37,360 --> 00:33:41,120
those reg axes or just

1075
00:33:38,960 --> 00:33:42,240
essentially the regex is that kind of

1076
00:33:41,120 --> 00:33:44,158
you saw on the

1077
00:33:42,240 --> 00:33:45,360
the slides just there but then maybe

1078
00:33:44,159 --> 00:33:47,679
with a few little

1079
00:33:45,360 --> 00:33:49,760
checks maybe we only let those rules or

1080
00:33:47,679 --> 00:33:53,200
those patterns go out if

1081
00:33:49,760 --> 00:33:55,919
the tlds were being cheaply

1082
00:33:53,200 --> 00:33:56,640
uh you could buy them for cheap on

1083
00:33:55,919 --> 00:33:58,799
godaddy

1084
00:33:56,640 --> 00:33:59,919
or we only let that roll out if they're

1085
00:33:58,799 --> 00:34:03,039
cheap by

1086
00:33:59,919 --> 00:34:06,480
registration at reg ru which is like a

1087
00:34:03,039 --> 00:34:07,760
a russian hoster another popular thing

1088
00:34:06,480 --> 00:34:10,159
that we would use is

1089
00:34:07,760 --> 00:34:11,520
something like identifying actually free

1090
00:34:10,159 --> 00:34:14,159
uh

1091
00:34:11,520 --> 00:34:16,399
pre uh country code glds things like

1092
00:34:14,159 --> 00:34:16,399
that

1093
00:34:16,639 --> 00:34:19,760
but now that i've kind of described that

1094
00:34:18,239 --> 00:34:22,239
i want to talk about like

1095
00:34:19,760 --> 00:34:22,879
how we actually kind of went forward to

1096
00:34:22,239 --> 00:34:24,638
kind of

1097
00:34:22,879 --> 00:34:26,480
and have now kind of systematically

1098
00:34:24,639 --> 00:34:28,720
started to build like

1099
00:34:26,480 --> 00:34:31,040
uh like a routine around using this

1100
00:34:28,719 --> 00:34:33,759
framework so that we can actually

1101
00:34:31,040 --> 00:34:34,480
deploy things to production so we

1102
00:34:33,760 --> 00:34:36,159
started with a

1103
00:34:34,480 --> 00:34:37,760
cli tool so that we could rapidly

1104
00:34:36,159 --> 00:34:39,280
prototype things we wanted to be able to

1105
00:34:37,760 --> 00:34:41,440
take in millions of domain names

1106
00:34:39,280 --> 00:34:42,720
on and try a really simple rule really

1107
00:34:41,440 --> 00:34:45,839
quickly and just get feedback

1108
00:34:42,719 --> 00:34:48,078
literally within a minute

1109
00:34:45,839 --> 00:34:49,599
and we so we built so as i've kind of

1110
00:34:48,079 --> 00:34:53,040
been alluding to we built this

1111
00:34:49,599 --> 00:34:54,560
we built our rural engine in go uh

1112
00:34:53,040 --> 00:34:56,879
simply for performance that we could

1113
00:34:54,560 --> 00:34:59,839
actually do that so that we could

1114
00:34:56,879 --> 00:35:01,359
test millions of domain names um with a

1115
00:34:59,839 --> 00:35:04,560
ton of different regex

1116
00:35:01,359 --> 00:35:06,000
combinations with a simple uh simple

1117
00:35:04,560 --> 00:35:08,160
performance metric on that

1118
00:35:06,000 --> 00:35:09,280
is that we could easily take thousands

1119
00:35:08,160 --> 00:35:11,200
of um

1120
00:35:09,280 --> 00:35:12,720
these patterns very basic patterns and

1121
00:35:11,200 --> 00:35:14,480
apply them on millions of domains

1122
00:35:12,720 --> 00:35:17,279
names and get like a result within a

1123
00:35:14,480 --> 00:35:18,240
minute or less than a couple minutes at

1124
00:35:17,280 --> 00:35:20,960
the very

1125
00:35:18,240 --> 00:35:23,118
worst um but what i'm highlighting here

1126
00:35:20,960 --> 00:35:25,920
is the performance related to this regex

1127
00:35:23,119 --> 00:35:27,599
rule engine with respect to linear like

1128
00:35:25,920 --> 00:35:29,599
kind of more complicated expressions

1129
00:35:27,599 --> 00:35:31,440
that are kind of like linear models

1130
00:35:29,599 --> 00:35:33,839
so what you see here basically the

1131
00:35:31,440 --> 00:35:35,520
takeaway is that in testing in the cli

1132
00:35:33,839 --> 00:35:37,839
tool you can build about 100

1133
00:35:35,520 --> 00:35:38,960
linear models and apply it on 1.8

1134
00:35:37,839 --> 00:35:40,560
million domains

1135
00:35:38,960 --> 00:35:43,599
and it'll take you just a little over

1136
00:35:40,560 --> 00:35:45,279
two minutes to evaluate

1137
00:35:43,599 --> 00:35:47,280
so now that we had a cli tool to do

1138
00:35:45,280 --> 00:35:49,359
things locally we needed to be able to

1139
00:35:47,280 --> 00:35:51,200
actually test on larger periods of time

1140
00:35:49,359 --> 00:35:52,319
so what we needed to do was actually

1141
00:35:51,200 --> 00:35:54,560
replay

1142
00:35:52,320 --> 00:35:55,359
essentially all the domains that were

1143
00:35:54,560 --> 00:35:57,920
newly seen

1144
00:35:55,359 --> 00:35:58,480
over the last 30 days or the last 90

1145
00:35:57,920 --> 00:36:00,320
days

1146
00:35:58,480 --> 00:36:01,599
and tried to test the efficacy of a rule

1147
00:36:00,320 --> 00:36:02,960
to see if this thing actually was going

1148
00:36:01,599 --> 00:36:04,160
to be good enough to go out to the

1149
00:36:02,960 --> 00:36:08,079
public

1150
00:36:04,160 --> 00:36:10,399
and enforce things um at first query so

1151
00:36:08,079 --> 00:36:11,599
to do that we used since we have a small

1152
00:36:10,400 --> 00:36:13,760
team we really

1153
00:36:11,599 --> 00:36:15,040
don't have the resources to maintain

1154
00:36:13,760 --> 00:36:17,680
servers that are

1155
00:36:15,040 --> 00:36:18,160
like gonna potentially go down and all

1156
00:36:17,680 --> 00:36:19,598
didn't

1157
00:36:18,160 --> 00:36:22,240
all the maintenance that's due with that

1158
00:36:19,599 --> 00:36:24,560
so we use a lot of serverless

1159
00:36:22,240 --> 00:36:26,640
infrastructure in aws here's an example

1160
00:36:24,560 --> 00:36:27,599
of how we use a cli tool that's written

1161
00:36:26,640 --> 00:36:29,920
in golang

1162
00:36:27,599 --> 00:36:31,520
to call out to what's known as an sns

1163
00:36:29,920 --> 00:36:33,119
notification in aws

1164
00:36:31,520 --> 00:36:34,720
this essentially is just kind of like a

1165
00:36:33,119 --> 00:36:35,680
message that gets routed to a few

1166
00:36:34,720 --> 00:36:38,560
different

1167
00:36:35,680 --> 00:36:40,399
um what are known as lambdas in aws that

1168
00:36:38,560 --> 00:36:42,160
kind of say hey there's

1169
00:36:40,400 --> 00:36:44,560
a request someone wants to test this

1170
00:36:42,160 --> 00:36:47,040
rule over this time period of all the

1171
00:36:44,560 --> 00:36:50,320
additions of newly seen domains within

1172
00:36:47,040 --> 00:36:51,440
the umbrella resolver fleet over this

1173
00:36:50,320 --> 00:36:54,480
time period

1174
00:36:51,440 --> 00:36:56,160
and then maybe shovels in you know up to

1175
00:36:54,480 --> 00:36:57,680
like hundred a million domains and it

1176
00:36:56,160 --> 00:37:00,240
kind of just shuffles it down to

1177
00:36:57,680 --> 00:37:02,160
uh it's one one little worker that

1178
00:37:00,240 --> 00:37:04,078
essentially is the cli tool

1179
00:37:02,160 --> 00:37:05,920
but essentially broke up the work that's

1180
00:37:04,079 --> 00:37:07,440
now hitting that little worker

1181
00:37:05,920 --> 00:37:09,680
and so the worker kind of distributes

1182
00:37:07,440 --> 00:37:10,240
the work and only has to work on a

1183
00:37:09,680 --> 00:37:12,720
portion

1184
00:37:10,240 --> 00:37:14,560
of that law like the the million

1185
00:37:12,720 --> 00:37:18,078
potentially domains that it has to

1186
00:37:14,560 --> 00:37:19,520
uh apply the regexes on and the rules

1187
00:37:18,079 --> 00:37:22,079
and then once it's done kind of like the

1188
00:37:19,520 --> 00:37:25,520
output is just pushed to an s3 bucket

1189
00:37:22,079 --> 00:37:28,960
so that the user can just download

1190
00:37:25,520 --> 00:37:28,960
the detections that are resulting

1191
00:37:29,200 --> 00:37:32,319
and then the last kind of way that we

1192
00:37:31,119 --> 00:37:35,200
kind of think about uh

1193
00:37:32,320 --> 00:37:36,400
maybe just describing is uh how do we

1194
00:37:35,200 --> 00:37:38,480
work with this type of

1195
00:37:36,400 --> 00:37:39,440
how do we work with this framework and

1196
00:37:38,480 --> 00:37:41,520
uh to get

1197
00:37:39,440 --> 00:37:43,200
put things out into production we've

1198
00:37:41,520 --> 00:37:45,119
decided to kind of work and commit to

1199
00:37:43,200 --> 00:37:46,799
having a production rule branch

1200
00:37:45,119 --> 00:37:48,480
which is essentially that's what our

1201
00:37:46,800 --> 00:37:50,400
customers are seeing

1202
00:37:48,480 --> 00:37:52,560
whenever someone works on an experiment

1203
00:37:50,400 --> 00:37:53,280
uh and adding a new rule they'll branch

1204
00:37:52,560 --> 00:37:55,520
off of that

1205
00:37:53,280 --> 00:37:56,960
master branch they'll create their kind

1206
00:37:55,520 --> 00:37:58,720
of like to perform their experiments

1207
00:37:56,960 --> 00:38:01,200
they'll run their back tests

1208
00:37:58,720 --> 00:38:02,799
and then um they'll create a pr request

1209
00:38:01,200 --> 00:38:04,879
and then they think it's good enough

1210
00:38:02,800 --> 00:38:06,800
uh to be merged into master this will

1211
00:38:04,880 --> 00:38:08,880
then trigger a review process

1212
00:38:06,800 --> 00:38:10,560
that's reviewed internally on my team

1213
00:38:08,880 --> 00:38:10,960
each member will then have to approve

1214
00:38:10,560 --> 00:38:13,599
this

1215
00:38:10,960 --> 00:38:14,960
pull request and then this also triggers

1216
00:38:13,599 --> 00:38:16,240
an analyst review

1217
00:38:14,960 --> 00:38:18,000
where there's a bunch of automated

1218
00:38:16,240 --> 00:38:20,399
scripts that happen to go and

1219
00:38:18,000 --> 00:38:23,119
essentially take you know what is the

1220
00:38:20,400 --> 00:38:25,440
proposed kind of efficacy of the

1221
00:38:23,119 --> 00:38:27,119
the rule and then kind of does some

1222
00:38:25,440 --> 00:38:28,800
checking and validation on the domains

1223
00:38:27,119 --> 00:38:30,320
from the pre-existing caches that it

1224
00:38:28,800 --> 00:38:31,920
would have caught over

1225
00:38:30,320 --> 00:38:34,720
a historical time period in the back

1226
00:38:31,920 --> 00:38:36,880
test this is usually uh results in

1227
00:38:34,720 --> 00:38:38,319
screenshots of the domains that would

1228
00:38:36,880 --> 00:38:38,880
have been flagged to see if these were

1229
00:38:38,320 --> 00:38:41,520
actually

1230
00:38:38,880 --> 00:38:43,359
known to be actually fine or not or

1231
00:38:41,520 --> 00:38:45,520
non-phishing pages

1232
00:38:43,359 --> 00:38:46,560
and then once the review is kind of

1233
00:38:45,520 --> 00:38:49,359
completed

1234
00:38:46,560 --> 00:38:50,078
and approved of by by our team and the

1235
00:38:49,359 --> 00:38:51,119
analyst team

1236
00:38:50,079 --> 00:38:53,359
this is then handed off to the

1237
00:38:51,119 --> 00:38:55,920
engineering team where they take

1238
00:38:53,359 --> 00:38:57,839
this uh production rule file they then

1239
00:38:55,920 --> 00:38:59,280
run their perform their unit test

1240
00:38:57,839 --> 00:39:01,920
and then the rule is essentially

1241
00:38:59,280 --> 00:39:04,640
deployed to production

1242
00:39:01,920 --> 00:39:05,280
so in closing um i kind of talked about

1243
00:39:04,640 --> 00:39:06,799
a ruling

1244
00:39:05,280 --> 00:39:08,000
the model world trade off and how it

1245
00:39:06,800 --> 00:39:09,359
sort of feels like rural engines are

1246
00:39:08,000 --> 00:39:11,440
kind of

1247
00:39:09,359 --> 00:39:13,279
on one side and the statistical models

1248
00:39:11,440 --> 00:39:14,800
on the other i hope that i kind of just

1249
00:39:13,280 --> 00:39:16,400
kind of pushed you to rethink a little

1250
00:39:14,800 --> 00:39:20,079
bit about how you can think about real

1251
00:39:16,400 --> 00:39:22,000
engines and using arithmetic operations

1252
00:39:20,079 --> 00:39:23,760
and so i talked about specifically a

1253
00:39:22,000 --> 00:39:25,040
domain name regex rule engine how you

1254
00:39:23,760 --> 00:39:26,880
can kind of use all these different

1255
00:39:25,040 --> 00:39:28,079
character combinations and operators and

1256
00:39:26,880 --> 00:39:31,119
expressions

1257
00:39:28,079 --> 00:39:32,320
and then the binary tree algorithms and

1258
00:39:31,119 --> 00:39:33,920
then i talked about how like our team

1259
00:39:32,320 --> 00:39:34,800
just worked on bootstrapping phishing

1260
00:39:33,920 --> 00:39:37,920
coverage um

1261
00:39:34,800 --> 00:39:39,119
and then uh talked about a little bit

1262
00:39:37,920 --> 00:39:41,280
about how we kind of

1263
00:39:39,119 --> 00:39:42,240
deploy these things and work with this

1264
00:39:41,280 --> 00:39:44,240
rural engine

1265
00:39:42,240 --> 00:39:53,200
and the role of life cycle how we

1266
00:39:44,240 --> 00:39:53,200
develop them and we have reviews

