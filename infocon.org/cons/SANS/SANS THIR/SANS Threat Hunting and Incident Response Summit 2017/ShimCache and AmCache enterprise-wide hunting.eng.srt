1
00:00:00,360 --> 00:00:07,820
[Music]

2
00:00:04,220 --> 00:00:07,820
[Applause]

3
00:00:09,420 --> 00:00:17,499
right so as human beings we've we've

4
00:00:14,230 --> 00:00:20,199
always been drawn to to try to find

5
00:00:17,499 --> 00:00:23,710
order out of chaos to to find elusive

6
00:00:20,199 --> 00:00:28,079
patterns or to connect the proverbial

7
00:00:23,710 --> 00:00:30,819
dots right and at the other day that's

8
00:00:28,079 --> 00:00:33,370
fairly close to what we do while

9
00:00:30,819 --> 00:00:36,070
engaging at threat hunting activities

10
00:00:33,370 --> 00:00:40,089
right ultimately we try to connect the

11
00:00:36,070 --> 00:00:42,190
dots that will lead us to evidence of an

12
00:00:40,090 --> 00:00:47,020
active threat actor within our

13
00:00:42,190 --> 00:00:49,690
environment okay but let me tell you as

14
00:00:47,020 --> 00:00:52,570
as as daunting as connecting the dots

15
00:00:49,690 --> 00:00:54,599
might seem on a beautiful night sky like

16
00:00:52,570 --> 00:00:58,300
the one I brought here for you

17
00:00:54,600 --> 00:01:00,790
the challenge that were up to on a day

18
00:00:58,300 --> 00:01:05,468
to day business is way more complex

19
00:01:00,790 --> 00:01:08,649
right we need help and that's basically

20
00:01:05,468 --> 00:01:12,538
what I'm here for today right try and

21
00:01:08,649 --> 00:01:16,749
bring some more help into the field so

22
00:01:12,539 --> 00:01:18,310
before we move on very quick 101 hunting

23
00:01:16,749 --> 00:01:21,509
cuz I want to put my finger on one

24
00:01:18,310 --> 00:01:25,389
specific aspect that has not been

25
00:01:21,509 --> 00:01:27,999
discussed yet right so textbook hunting

26
00:01:25,389 --> 00:01:30,068
you select data sources you throw them

27
00:01:27,999 --> 00:01:32,829
into your analytics whatever those may

28
00:01:30,069 --> 00:01:35,530
be those will do their magic and will

29
00:01:32,829 --> 00:01:38,109
spit out a set of leads then you have to

30
00:01:35,530 --> 00:01:40,840
qualify those needs because all leads

31
00:01:38,109 --> 00:01:44,048
are not born equal and they just triage

32
00:01:40,840 --> 00:01:46,420
all right and triazine is basically

33
00:01:44,049 --> 00:01:48,939
throwing that lead into a false positive

34
00:01:46,420 --> 00:01:51,819
bucket which is going to be fairly large

35
00:01:48,939 --> 00:01:53,908
if you're doing fake hunting or it's

36
00:01:51,819 --> 00:01:55,100
either engaging your incident response

37
00:01:53,909 --> 00:02:01,640
protocol

38
00:01:55,100 --> 00:02:04,100
right now this is hunting textbook right

39
00:02:01,640 --> 00:02:06,140
straight from a textbook the truth when

40
00:02:04,100 --> 00:02:07,940
you start doing this thing for real is

41
00:02:06,140 --> 00:02:11,180
that it looks a bit more like this than

42
00:02:07,940 --> 00:02:11,600
here and if I'm to be entirely honest

43
00:02:11,180 --> 00:02:16,250
with you

44
00:02:11,600 --> 00:02:19,940
it really looks like this right it's a

45
00:02:16,250 --> 00:02:24,290
bit of a mess okay so what's the problem

46
00:02:19,940 --> 00:02:27,230
here the problem is you can't triage all

47
00:02:24,290 --> 00:02:29,540
the leads you can generate and you don't

48
00:02:27,230 --> 00:02:30,920
know which of the leads is going to be

49
00:02:29,540 --> 00:02:35,179
the one that's going to take you to the

50
00:02:30,920 --> 00:02:37,130
attacker right so how many leads can you

51
00:02:35,180 --> 00:02:38,510
triage it depends on two things what's

52
00:02:37,130 --> 00:02:40,640
your budget I don't care if that's

53
00:02:38,510 --> 00:02:44,209
people hours per week at the end of the

54
00:02:40,640 --> 00:02:47,299
day it's gonna be dollars and your

55
00:02:44,209 --> 00:02:49,700
triaging cost per lead and that is the

56
00:02:47,300 --> 00:02:51,500
topic I want to highlight today I think

57
00:02:49,700 --> 00:02:53,720
as a community we should be discussing

58
00:02:51,500 --> 00:02:55,310
more about that and the reason I bring

59
00:02:53,720 --> 00:02:57,350
this to your attention is because the

60
00:02:55,310 --> 00:02:59,120
tool that I'm going to be releasing

61
00:02:57,350 --> 00:02:59,840
today is open source and presented to

62
00:02:59,120 --> 00:03:01,610
you right now

63
00:02:59,840 --> 00:03:03,140
it's gonna help you two things it's

64
00:03:01,610 --> 00:03:06,049
gonna provide you with some very cool

65
00:03:03,140 --> 00:03:08,390
analytics for your hunting exercises but

66
00:03:06,049 --> 00:03:11,480
it's also going to help you to

67
00:03:08,390 --> 00:03:13,970
dramatically reduce your triaging cost

68
00:03:11,480 --> 00:03:15,440
per lead no matter where you get the

69
00:03:13,970 --> 00:03:18,350
lead from if you get the lead from

70
00:03:15,440 --> 00:03:19,820
appcompat processor great if you get the

71
00:03:18,350 --> 00:03:23,299
lead from anywhere else you can still

72
00:03:19,820 --> 00:03:25,700
use this tool to dramatically low that

73
00:03:23,299 --> 00:03:27,709
triaging cost per lead and if you do

74
00:03:25,700 --> 00:03:28,940
that you're going to triage more leads

75
00:03:27,709 --> 00:03:30,680
and you're going to increase your

76
00:03:28,940 --> 00:03:32,440
probability of getting to the good one

77
00:03:30,680 --> 00:03:34,560
the one that takes you to the attackers

78
00:03:32,440 --> 00:03:37,440
so

79
00:03:34,560 --> 00:03:41,280
why another tool right everyone agrees

80
00:03:37,440 --> 00:03:44,190
that enterprise-wide execution data is

81
00:03:41,280 --> 00:03:47,670
priceless but to be honest I haven't

82
00:03:44,190 --> 00:03:50,100
really seen a lot of people use this to

83
00:03:47,670 --> 00:03:51,839
its fullest potential okay and this is

84
00:03:50,100 --> 00:03:53,549
not using it to its fullest potential

85
00:03:51,840 --> 00:03:54,209
this is not efficient this is not

86
00:03:53,550 --> 00:03:56,550
effective

87
00:03:54,209 --> 00:03:58,410
this is barely just scratching the

88
00:03:56,550 --> 00:04:00,569
surface of the data that we have there

89
00:03:58,410 --> 00:04:02,520
okay there's a million other reasons I

90
00:04:00,569 --> 00:04:07,410
don't have time to go into right now as

91
00:04:02,520 --> 00:04:08,910
to why I needed a new tool okay so let's

92
00:04:07,410 --> 00:04:11,160
go straight away and and see what that

93
00:04:08,910 --> 00:04:14,459
looks like so as any other tool have you

94
00:04:11,160 --> 00:04:16,649
just executed its gonna dump basically a

95
00:04:14,459 --> 00:04:19,620
help menu of you it's gonna tell you

96
00:04:16,649 --> 00:04:21,238
what I can do I call these modules I

97
00:04:19,620 --> 00:04:22,950
don't have time to go through each one

98
00:04:21,238 --> 00:04:24,630
of these modules there's a lot of things

99
00:04:22,950 --> 00:04:26,460
the tool can do for you but I've

100
00:04:24,630 --> 00:04:29,400
selected too few that I think they're

101
00:04:26,460 --> 00:04:31,859
going to be of interest for you as a

102
00:04:29,400 --> 00:04:34,159
hunting an incident response community

103
00:04:31,860 --> 00:04:38,100
right the rest you just have to go and

104
00:04:34,160 --> 00:04:40,919
check them out yourselves so first

105
00:04:38,100 --> 00:04:43,919
things first you need to get data into

106
00:04:40,919 --> 00:04:46,950
the tool right not a big deal the tool

107
00:04:43,919 --> 00:04:49,950
supports a lot of different file formats

108
00:04:46,950 --> 00:04:51,900
and sources it is designed right now

109
00:04:49,950 --> 00:04:54,659
specifically to focus on shim cached

110
00:04:51,900 --> 00:04:56,130
data and a.m. cached data just because I

111
00:04:54,660 --> 00:04:58,830
can count on every single one of my

112
00:04:56,130 --> 00:05:00,690
customers having that available for me

113
00:04:58,830 --> 00:05:03,120
but the important thing here is the

114
00:05:00,690 --> 00:05:05,490
whole ingestion engine has been designed

115
00:05:03,120 --> 00:05:09,360
in such a way that it's trivial for you

116
00:05:05,490 --> 00:05:11,250
to build up a new ingestion plugin in a

117
00:05:09,360 --> 00:05:13,200
few minutes and the load your data no

118
00:05:11,250 --> 00:05:14,130
matter you know what that looks like

119
00:05:13,200 --> 00:05:17,789
right

120
00:05:14,130 --> 00:05:19,620
so let's go and see it in action what

121
00:05:17,790 --> 00:05:21,900
I'm doing here is basically specifying a

122
00:05:19,620 --> 00:05:23,910
database of going to create I'm using

123
00:05:21,900 --> 00:05:28,320
the load module and I'm pointing it in

124
00:05:23,910 --> 00:05:29,790
this case - is it fun and there it goes

125
00:05:28,320 --> 00:05:32,280
what it's doing now it's basically

126
00:05:29,790 --> 00:05:32,880
looking at what stuff I'm throwing at

127
00:05:32,280 --> 00:05:35,400
the tool

128
00:05:32,880 --> 00:05:36,330
are these new hosts are these hosts I've

129
00:05:35,400 --> 00:05:38,849
already loaded

130
00:05:36,330 --> 00:05:42,180
are these new instances and the concept

131
00:05:38,850 --> 00:05:43,530
of instance is important because for

132
00:05:42,180 --> 00:05:45,660
example if we're talking about shim

133
00:05:43,530 --> 00:05:49,020
cache data right Shin cache data lives

134
00:05:45,660 --> 00:05:51,270
within the system hive and specifically

135
00:05:49,020 --> 00:05:53,609
within the control set of the system

136
00:05:51,270 --> 00:05:57,180
model and you all know that a system has

137
00:05:53,610 --> 00:05:59,430
at least two but can have more control

138
00:05:57,180 --> 00:06:02,220
sets and each one of those represent a

139
00:05:59,430 --> 00:06:05,790
different snapshot in time of that

140
00:06:02,220 --> 00:06:09,030
information right and you're also going

141
00:06:05,790 --> 00:06:10,680
to have your current system hive and at

142
00:06:09,030 --> 00:06:14,099
the very least you're gonna have another

143
00:06:10,680 --> 00:06:16,260
one sitting in the reg back folder again

144
00:06:14,100 --> 00:06:19,020
with all its control sets so all of

145
00:06:16,260 --> 00:06:22,469
those are different snapshots in time of

146
00:06:19,020 --> 00:06:23,969
this trace of execution data which is

147
00:06:22,470 --> 00:06:27,570
what the two is going to be feeding on

148
00:06:23,970 --> 00:06:30,330
all right so it's basically doing its

149
00:06:27,570 --> 00:06:32,760
thing it's figuring out hey what data

150
00:06:30,330 --> 00:06:35,240
are you trying to feed me do I have it -

151
00:06:32,760 --> 00:06:37,980
do I need to load it and then it's using

152
00:06:35,240 --> 00:06:41,130
multi processing under the hood to use

153
00:06:37,980 --> 00:06:43,650
all your available cores to make this in

154
00:06:41,130 --> 00:06:47,820
just as fast as possible and there's a

155
00:06:43,650 --> 00:06:49,289
whole technology inside of it of the

156
00:06:47,820 --> 00:06:51,840
tool which is going to dynamically

157
00:06:49,290 --> 00:06:53,850
create or reduce the number of processes

158
00:06:51,840 --> 00:06:56,429
to maximize throughput of the ingestion

159
00:06:53,850 --> 00:06:59,100
while minimizing the impact of your

160
00:06:56,430 --> 00:07:02,280
system at the end of the day the key

161
00:06:59,100 --> 00:07:05,660
point is you know in this example here I

162
00:07:02,280 --> 00:07:08,820
am loading Shimkus data for about 3

163
00:07:05,660 --> 00:07:12,180
3,000 endpoints I'm doing so on this

164
00:07:08,820 --> 00:07:13,740
macbook pro here and it's running in

165
00:07:12,180 --> 00:07:15,539
five minutes

166
00:07:13,740 --> 00:07:18,690
here I think it's six because this was

167
00:07:15,539 --> 00:07:21,900
recorded on the sift VM but I think that

168
00:07:18,690 --> 00:07:23,699
exports only to virtual CPUs but you get

169
00:07:21,900 --> 00:07:25,888
the deal you get the idea right I needed

170
00:07:23,699 --> 00:07:27,419
this thing to be fast to be efficient to

171
00:07:25,889 --> 00:07:30,449
run with me at the speed that we need to

172
00:07:27,419 --> 00:07:34,409
run when we're doing an IR or while

173
00:07:30,449 --> 00:07:34,770
we're hunting right so we got 1.3

174
00:07:34,410 --> 00:07:38,550
million

175
00:07:34,770 --> 00:07:39,990
entry execution rows loaded so the first

176
00:07:38,550 --> 00:07:42,000
thing that you want to do of course is

177
00:07:39,990 --> 00:07:44,160
you want to search for bad things and

178
00:07:42,000 --> 00:07:46,440
that's what the search module is

179
00:07:44,160 --> 00:07:49,349
assigned for right now if you don't

180
00:07:46,440 --> 00:07:51,240
provide any parameters to the search

181
00:07:49,349 --> 00:07:54,090
module what it's going to do is it's

182
00:07:51,240 --> 00:07:57,840
gonna fall back through a file of known

183
00:07:54,090 --> 00:08:00,568
bad regular expressions that that the

184
00:07:57,840 --> 00:08:02,068
tool shipped with right I'm really

185
00:08:00,569 --> 00:08:06,509
hoping the community is going to jump up

186
00:08:02,069 --> 00:08:08,340
and help us contribute to build up the

187
00:08:06,509 --> 00:08:10,979
set of regular expressions that we are

188
00:08:08,340 --> 00:08:13,919
we released by default okay

189
00:08:10,979 --> 00:08:16,380
the other important highlight about the

190
00:08:13,919 --> 00:08:18,840
search feature here is that again it's

191
00:08:16,380 --> 00:08:20,219
using multi-processing under the hood so

192
00:08:18,840 --> 00:08:23,190
basically that means you're gonna get

193
00:08:20,219 --> 00:08:26,009
really really fast regular expression

194
00:08:23,190 --> 00:08:28,460
searchings searches and the other key

195
00:08:26,009 --> 00:08:31,650
component is it's designed to scale

196
00:08:28,460 --> 00:08:33,689
another one of the reasons why I had to

197
00:08:31,650 --> 00:08:38,279
or I decided I needed to build a tool

198
00:08:33,690 --> 00:08:41,279
was the day I try to throw 3,000 regular

199
00:08:38,279 --> 00:08:43,439
expressions at grep and grep just died

200
00:08:41,279 --> 00:08:45,329
on me this thing won't die I've been

201
00:08:43,440 --> 00:08:47,490
running with 3,000 regular expressions

202
00:08:45,329 --> 00:08:49,170
on this tool for the last year it's

203
00:08:47,490 --> 00:08:50,760
gonna take it it's gonna take a while

204
00:08:49,170 --> 00:08:52,020
but it's gonna take it it's not going to

205
00:08:50,760 --> 00:08:52,890
crack it sooner but it's gonna it's

206
00:08:52,020 --> 00:08:55,550
gonna work it's gonna give you the

207
00:08:52,890 --> 00:09:00,209
results it's designed for that right so

208
00:08:55,550 --> 00:09:02,399
um once you finish searching you get two

209
00:09:00,209 --> 00:09:03,989
things you get a list of results which

210
00:09:02,399 --> 00:09:06,480
is what you're going to triage and then

211
00:09:03,990 --> 00:09:08,550
you're gonna get a high level histogram

212
00:09:06,480 --> 00:09:11,519
that is basically showing you hey this

213
00:09:08,550 --> 00:09:13,859
is the stuff that we found all right

214
00:09:11,519 --> 00:09:17,040
and you can see here's some examples of

215
00:09:13,860 --> 00:09:20,399
the kind of things that by default are

216
00:09:17,040 --> 00:09:22,230
included in this known bad file and I

217
00:09:20,399 --> 00:09:28,019
want to I want to draw your attention to

218
00:09:22,230 --> 00:09:30,079
two one specifically here but anyway the

219
00:09:28,019 --> 00:09:33,480
last one here is basically looking for

220
00:09:30,079 --> 00:09:35,160
misplaced SVC hosts so as we see hosts

221
00:09:33,480 --> 00:09:38,160
are DXE running from places where it

222
00:09:35,160 --> 00:09:41,490
shouldn't okay fairly fairly interesting

223
00:09:38,160 --> 00:09:44,249
thing to be aware of we're gonna go

224
00:09:41,490 --> 00:09:45,569
we're going to find those two bad guys

225
00:09:44,249 --> 00:09:46,980
but we're gonna find them using a

226
00:09:45,569 --> 00:09:48,479
completely different technique a

227
00:09:46,980 --> 00:09:51,959
completely different set of analytics

228
00:09:48,480 --> 00:09:54,629
right just as an example of how the tool

229
00:09:51,959 --> 00:09:59,518
can help you find evil through very

230
00:09:54,629 --> 00:10:01,889
different paths moving forwards and

231
00:09:59,519 --> 00:10:04,619
probably into what I think is the most

232
00:10:01,889 --> 00:10:07,920
interesting analytics the tool has right

233
00:10:04,619 --> 00:10:10,649
now this thing includes something that

234
00:10:07,920 --> 00:10:13,559
we call or I call a temporal execution

235
00:10:10,649 --> 00:10:15,360
correlation engine and what that does is

236
00:10:13,559 --> 00:10:17,910
the following you provided with a file

237
00:10:15,360 --> 00:10:19,559
name of interest and what the thing is

238
00:10:17,910 --> 00:10:21,420
gonna do is it's gonna go out through

239
00:10:19,559 --> 00:10:23,309
your data set your three founded

240
00:10:21,420 --> 00:10:26,670
endpoints in this case and it's going to

241
00:10:23,309 --> 00:10:28,559
look every time that file am executed

242
00:10:26,670 --> 00:10:31,378
and it's gonna take note of what

243
00:10:28,559 --> 00:10:34,139
executed before or after within a user

244
00:10:31,379 --> 00:10:36,660
configurable window of interest alright

245
00:10:34,139 --> 00:10:40,350
and once that is done it's going to

246
00:10:36,660 --> 00:10:42,929
quantify the temporal execution strength

247
00:10:40,350 --> 00:10:45,749
and the way we do that is using formulas

248
00:10:42,929 --> 00:10:49,040
that are very similar to the way that we

249
00:10:45,749 --> 00:10:53,009
measured gravity in the sense that as

250
00:10:49,040 --> 00:10:55,769
execution distance grows the execute the

251
00:10:53,009 --> 00:10:57,929
temporal execution strength diminishes

252
00:10:55,769 --> 00:11:00,420
exponentially up until a point in which

253
00:10:57,929 --> 00:11:01,360
well there is no there is no strength at

254
00:11:00,420 --> 00:11:03,368
all

255
00:11:01,360 --> 00:11:07,029
let me just show you how this worked

256
00:11:03,369 --> 00:11:09,069
with an example for which you can

257
00:11:07,029 --> 00:11:11,170
actually predict the results right now

258
00:11:09,069 --> 00:11:13,449
anyone that's been looking at Jim cash

259
00:11:11,170 --> 00:11:16,049
for more than a day or two knows that

260
00:11:13,449 --> 00:11:19,839
every time that you run Nataly eggsy

261
00:11:16,049 --> 00:11:23,230
Nataly HZ automatically spawns net1 dot

262
00:11:19,839 --> 00:11:26,350
exe right ok so what I'm going to do

263
00:11:23,230 --> 00:11:29,709
here is I'm running a t curve on net dot

264
00:11:26,350 --> 00:11:31,689
exe and using that basically as an

265
00:11:29,709 --> 00:11:34,868
example to show you the kind of output

266
00:11:31,689 --> 00:11:41,160
that we get and and how we can interpret

267
00:11:34,869 --> 00:11:41,160
that so

268
00:11:46,320 --> 00:11:52,180
well the tool is basically doing here is

269
00:11:49,890 --> 00:11:54,250
finding all those executions as I said

270
00:11:52,180 --> 00:11:55,719
before seeing what was running before

271
00:11:54,250 --> 00:11:57,910
and after and then it's providing me

272
00:11:55,720 --> 00:12:01,930
with this list and this list is sorted

273
00:11:57,910 --> 00:12:04,780
by temporal execution correlation

274
00:12:01,930 --> 00:12:06,880
strength right top to bottom so it's

275
00:12:04,780 --> 00:12:10,110
telling me hey there's this file called

276
00:12:06,880 --> 00:12:12,550
Matawan dot exe which has a very strong

277
00:12:10,110 --> 00:12:15,010
temporal execution correlation with your

278
00:12:12,550 --> 00:12:17,109
file of interest which was net exe and

279
00:12:15,010 --> 00:12:22,290
it's also telling me hey this thing

280
00:12:17,110 --> 00:12:25,390
executed 1179 times after net dot exe

281
00:12:22,290 --> 00:12:28,900
around 600 times before and this is a

282
00:12:25,390 --> 00:12:32,140
side effect of consecutive executions of

283
00:12:28,900 --> 00:12:34,480
net dot exe and it's also given me the

284
00:12:32,140 --> 00:12:37,180
total execution within the whole dataset

285
00:12:34,480 --> 00:12:39,040
within the whole 3,000 hosts so I have a

286
00:12:37,180 --> 00:12:41,219
ballpark figure of how many times this

287
00:12:39,040 --> 00:12:45,569
was executed within my organization and

288
00:12:41,220 --> 00:12:47,320
finally it's telling me if the bond is

289
00:12:45,570 --> 00:12:50,260
bi-directional

290
00:12:47,320 --> 00:12:53,200
all right so every time it finds a file

291
00:12:50,260 --> 00:12:55,000
that has a strong temporal execution

292
00:12:53,200 --> 00:12:57,610
with my file of interest it

293
00:12:55,000 --> 00:12:59,410
automatically tries to calculate that

294
00:12:57,610 --> 00:13:02,800
same relationship the other way around

295
00:12:59,410 --> 00:13:04,959
right and if that is true you're gonna

296
00:13:02,800 --> 00:13:07,300
see an inverse bond here now why is that

297
00:13:04,960 --> 00:13:11,470
important that's important for us

298
00:13:07,300 --> 00:13:14,380
because if the file that we're using

299
00:13:11,470 --> 00:13:17,310
calculating a tea core is interesting

300
00:13:14,380 --> 00:13:20,020
for us and it has a strong

301
00:13:17,310 --> 00:13:22,569
bi-directional relationship with this

302
00:13:20,020 --> 00:13:24,250
other file then this second file is also

303
00:13:22,570 --> 00:13:26,230
going to be of interest for us because

304
00:13:24,250 --> 00:13:28,360
every time this thing runs this thing

305
00:13:26,230 --> 00:13:30,160
also runs and the other way around

306
00:13:28,360 --> 00:13:32,260
every time this thing was executed in my

307
00:13:30,160 --> 00:13:35,350
environment this thing was executed in

308
00:13:32,260 --> 00:13:38,650
my environment too so it's an excellent

309
00:13:35,350 --> 00:13:41,800
way to pivot through attacker files

310
00:13:38,650 --> 00:13:44,780
within your environment using this kind

311
00:13:41,800 --> 00:13:46,579
of pivoting technique based on

312
00:13:44,780 --> 00:13:50,360
temporal execution correlation strings

313
00:13:46,580 --> 00:13:52,760
right let's move on let's see a

314
00:13:50,360 --> 00:13:55,010
different analytics what I'm gonna run

315
00:13:52,760 --> 00:13:58,100
now is something called eleven module

316
00:13:55,010 --> 00:14:00,740
and the eleven module uses an algorithm

317
00:13:58,100 --> 00:14:03,100
called the Levenstein algorithm which is

318
00:14:00,740 --> 00:14:06,110
an algorithm that given two strings

319
00:14:03,100 --> 00:14:08,270
calculates the Edit distance from string

320
00:14:06,110 --> 00:14:10,580
one to the other so how many changes I

321
00:14:08,270 --> 00:14:13,160
need to do to one string to get to the

322
00:14:10,580 --> 00:14:15,800
second one and by default if we don't

323
00:14:13,160 --> 00:14:17,900
provide any other arguments it's going

324
00:14:15,800 --> 00:14:19,819
to do this for everything living within

325
00:14:17,900 --> 00:14:24,020
windows system32 and it's going to

326
00:14:19,820 --> 00:14:26,210
highlight all the small deviations from

327
00:14:24,020 --> 00:14:29,180
legitimate file names that have been

328
00:14:26,210 --> 00:14:34,240
executed within system 32 across my

329
00:14:29,180 --> 00:14:38,030
3,000 and points in this case got it so

330
00:14:34,240 --> 00:14:42,200
what do we get well we see one pill a

331
00:14:38,030 --> 00:14:46,420
bad guy we see one SV host missing the

332
00:14:42,200 --> 00:14:49,490
seat that was executed from within

333
00:14:46,420 --> 00:14:51,890
windows system32 on one of my three

334
00:14:49,490 --> 00:14:54,380
thousand machines right now what I'm

335
00:14:51,890 --> 00:14:57,130
doing is I'm just going to use eleven

336
00:14:54,380 --> 00:15:01,250
sign again but this time I'm specifying

337
00:14:57,130 --> 00:15:03,560
svchost.exe so now I don't here in which

338
00:15:01,250 --> 00:15:07,150
folder this thing was run from I want to

339
00:15:03,560 --> 00:15:10,189
see any typos around SVC host

340
00:15:07,150 --> 00:15:14,600
what folder they were executed from and

341
00:15:10,190 --> 00:15:19,590
we find another likely bad guy no one

342
00:15:14,600 --> 00:15:21,540
called svchost.exe RS

343
00:15:19,590 --> 00:15:23,490
okay so now we're gonna do is we're just

344
00:15:21,540 --> 00:15:25,380
gonna search for these and see where

345
00:15:23,490 --> 00:15:31,320
they executed what system would folder

346
00:15:25,380 --> 00:15:32,790
so we start with the SBCC host s guy of

347
00:15:31,320 --> 00:15:34,680
course all the host names have been

348
00:15:32,790 --> 00:15:36,959
redacted here but by the way I'm showing

349
00:15:34,680 --> 00:15:39,930
you the real stuff this is not doctored

350
00:15:36,960 --> 00:15:42,380
databases these is these are real

351
00:15:39,930 --> 00:15:45,359
databases from real investigations right

352
00:15:42,380 --> 00:15:49,439
we saw this one run i was executed from

353
00:15:45,360 --> 00:15:56,010
deep the D Drive and now we're searching

354
00:15:49,440 --> 00:15:57,930
for the other one as we host dot exe and

355
00:15:56,010 --> 00:15:59,790
there you go we get the host name with

356
00:15:57,930 --> 00:16:02,310
the tej we get everything and we confirm

357
00:15:59,790 --> 00:16:06,469
that this one was indeed executed from

358
00:16:02,310 --> 00:16:13,709
within windows system32 on this specific

359
00:16:06,470 --> 00:16:16,380
redacted host name okay let's move on F

360
00:16:13,710 --> 00:16:19,140
search is another module that allows you

361
00:16:16,380 --> 00:16:20,400
to do searches on specific fields I'm

362
00:16:19,140 --> 00:16:25,650
not going to show it to you guys I don't

363
00:16:20,400 --> 00:16:27,089
have time but we need this to learn the

364
00:16:25,650 --> 00:16:29,630
name of the fields because that work

365
00:16:27,089 --> 00:16:31,650
that's what we need to use the stack

366
00:16:29,630 --> 00:16:33,839
module which is what I'm running right

367
00:16:31,650 --> 00:16:38,880
now so what I'm doing now is I'm telling

368
00:16:33,839 --> 00:16:42,900
it hay stack file paths for me for every

369
00:16:38,880 --> 00:16:47,040
execution of svchost.exe right so we

370
00:16:42,900 --> 00:16:49,260
found typos around SVC host to see where

371
00:16:47,040 --> 00:16:51,839
all those correctly spelled as we see

372
00:16:49,260 --> 00:16:54,360
hosts run from and what I see

373
00:16:51,839 --> 00:16:56,490
immediately is haters you know there's

374
00:16:54,360 --> 00:16:58,920
two very strange places I have two

375
00:16:56,490 --> 00:17:01,590
executions of svchost.exe

376
00:16:58,920 --> 00:17:05,639
from the root of the recycle bin

377
00:17:01,590 --> 00:17:07,980
doesn't look good right so let's go

378
00:17:05,640 --> 00:17:09,570
ahead and search for them so that we get

379
00:17:07,980 --> 00:17:12,060
a bit more of information who we see

380
00:17:09,569 --> 00:17:19,500
what systems we see what time stamps we

381
00:17:12,060 --> 00:17:21,629
have and what we see is basically the

382
00:17:19,500 --> 00:17:24,060
fact that the last modification time

383
00:17:21,630 --> 00:17:26,490
stamp stored on the Shemesh record for

384
00:17:24,060 --> 00:17:28,909
these two is exactly the same which is

385
00:17:26,490 --> 00:17:31,920
another interesting red flag for us

386
00:17:28,910 --> 00:17:33,630
so the last thing that we're going to do

387
00:17:31,920 --> 00:17:36,240
here is I'm going to go back to my tea

388
00:17:33,630 --> 00:17:38,880
core module my temporal execution

389
00:17:36,240 --> 00:17:41,940
correlation module and I'm gonna tell it

390
00:17:38,880 --> 00:17:45,330
hey I want to see what stuff is related

391
00:17:41,940 --> 00:17:49,470
to svchost.exe but not to any

392
00:17:45,330 --> 00:17:52,020
svchost.exe only to those ones that were

393
00:17:49,470 --> 00:17:53,670
executed from the root to the recycle

394
00:17:52,020 --> 00:17:57,840
bin okay

395
00:17:53,670 --> 00:18:00,200
what can you tell me about that so we

396
00:17:57,840 --> 00:18:00,199
run that

397
00:18:02,080 --> 00:18:11,320
and what we get is three files right one

398
00:18:09,010 --> 00:18:14,410
of these C files is pretty obvious right

399
00:18:11,320 --> 00:18:19,409
it's telling me hey Who am I was

400
00:18:14,410 --> 00:18:21,940
executed two times before svchost.exe

401
00:18:19,410 --> 00:18:24,850
was executed from the roots of the

402
00:18:21,940 --> 00:18:26,800
recycle bin on two systems within your

403
00:18:24,850 --> 00:18:30,429
3,000 hosts that you're looking at in

404
00:18:26,800 --> 00:18:32,110
this database I don't have time to drive

405
00:18:30,430 --> 00:18:34,150
into the other one and to the other two

406
00:18:32,110 --> 00:18:36,280
files that present a strong temporal

407
00:18:34,150 --> 00:18:39,070
execution correlation here so you have

408
00:18:36,280 --> 00:18:40,720
to take this as an act of faith one of

409
00:18:39,070 --> 00:18:45,159
those well the dropper and the other one

410
00:18:40,720 --> 00:18:48,310
was a credential dumper okay this is

411
00:18:45,160 --> 00:18:50,140
that speed at which we can hunt and at

412
00:18:48,310 --> 00:18:51,790
which we can triage if we're using the

413
00:18:50,140 --> 00:18:55,870
right tools this is the way it should be

414
00:18:51,790 --> 00:18:57,639
done right so I don't have time for I

415
00:18:55,870 --> 00:18:59,320
know I have time for one more demo sorry

416
00:18:57,640 --> 00:19:01,210
yeah so let me show you the databases

417
00:18:59,320 --> 00:19:02,350
this is the database we've been looking

418
00:19:01,210 --> 00:19:04,750
at so far it's around three hundred

419
00:19:02,350 --> 00:19:06,879
Meg's and it only has a shim cache data

420
00:19:04,750 --> 00:19:09,760
now let me show you a different data set

421
00:19:06,880 --> 00:19:11,590
this one is like 10 gigs and this one

422
00:19:09,760 --> 00:19:14,580
has a combination of both shim cache and

423
00:19:11,590 --> 00:19:17,830
AM cache data for a bigger organization

424
00:19:14,580 --> 00:19:19,750
this was well Devon was four thousand

425
00:19:17,830 --> 00:19:21,970
three hundred and something hosts we got

426
00:19:19,750 --> 00:19:25,240
a total of 26 million entries on this

427
00:19:21,970 --> 00:19:26,560
database I don't have time to drop you

428
00:19:25,240 --> 00:19:28,420
through the whole analytics I'm gonna

429
00:19:26,560 --> 00:19:30,909
take you straight to the meat and this

430
00:19:28,420 --> 00:19:32,140
one these attackers are very noisy one

431
00:19:30,910 --> 00:19:34,360
of the things they did was they just

432
00:19:32,140 --> 00:19:37,180
brought many cats into the environment

433
00:19:34,360 --> 00:19:39,040
without even renaming it and executed it

434
00:19:37,180 --> 00:19:41,680
and that was the flag and that got us

435
00:19:39,040 --> 00:19:44,409
you know called in by the customer so

436
00:19:41,680 --> 00:19:48,160
what I'm doing here is I am basically

437
00:19:44,410 --> 00:19:52,180
searching for this case for a mimic

438
00:19:48,160 --> 00:19:54,610
to see what's up there and boom well

439
00:19:52,180 --> 00:19:57,060
this thing is telling me is hey this

440
00:19:54,610 --> 00:19:59,530
thing runs 17 times

441
00:19:57,060 --> 00:20:01,659
six of those are duplicate hits so it's

442
00:19:59,530 --> 00:20:03,639
going to remove them from four from my

443
00:20:01,660 --> 00:20:06,490
view and the important thing for me is

444
00:20:03,640 --> 00:20:09,280
the fact that most of them have been

445
00:20:06,490 --> 00:20:12,640
executed from within the Windows config

446
00:20:09,280 --> 00:20:14,139
folder which is odd so that makes me

447
00:20:12,640 --> 00:20:16,750
think oh maybe this is the you know

448
00:20:14,140 --> 00:20:19,420
preferred staging folder for this

449
00:20:16,750 --> 00:20:22,510
specific attacker so what I'm doing now

450
00:20:19,420 --> 00:20:24,790
it is I'm using stack module again but

451
00:20:22,510 --> 00:20:27,310
the other way around now I wanted to

452
00:20:24,790 --> 00:20:30,310
stack filenames

453
00:20:27,310 --> 00:20:32,080
for everything that was executed from

454
00:20:30,310 --> 00:20:33,850
within that folder across my four

455
00:20:32,080 --> 00:20:37,929
thousand two hundred something hosts

456
00:20:33,850 --> 00:20:39,730
boom right there you go this doesn't

457
00:20:37,930 --> 00:20:42,340
really need a lot of explanation to

458
00:20:39,730 --> 00:20:44,980
anyone right you basically have to go

459
00:20:42,340 --> 00:20:47,320
ahead and hit the red button move your

460
00:20:44,980 --> 00:20:51,730
organization into incident response mode

461
00:20:47,320 --> 00:20:55,210
right by the way there's no CGI here

462
00:20:51,730 --> 00:20:57,400
these videos have not been sped up at

463
00:20:55,210 --> 00:21:05,080
all this has all been playback in real

464
00:20:57,400 --> 00:21:08,650
time so more stuff more analytics time

465
00:21:05,080 --> 00:21:10,360
stacking time stacking is designed for a

466
00:21:08,650 --> 00:21:12,430
slightly different scenario so instead

467
00:21:10,360 --> 00:21:15,189
of pure hunting as we understand it here

468
00:21:12,430 --> 00:21:16,990
times tagging is designed for when you

469
00:21:15,190 --> 00:21:18,730
are investigating you have a clear

470
00:21:16,990 --> 00:21:21,460
understanding of what the attackers did

471
00:21:18,730 --> 00:21:24,090
and when they were active but you're not

472
00:21:21,460 --> 00:21:26,830
sure if you're missing something right

473
00:21:24,090 --> 00:21:29,679
yeah maybe the attackers you know

474
00:21:26,830 --> 00:21:32,590
deviated from the known TTP's just for

475
00:21:29,680 --> 00:21:35,050
one host I left it there as a plan-b as

476
00:21:32,590 --> 00:21:36,909
a backup in case they were found and I

477
00:21:35,050 --> 00:21:39,340
really see everything they did

478
00:21:36,910 --> 00:21:41,860
well what time stacking does is very

479
00:21:39,340 --> 00:21:44,740
simple okay you provided with a time

480
00:21:41,860 --> 00:21:47,050
frame of activity no activity of your

481
00:21:44,740 --> 00:21:48,610
attackers and what it's gonna do is it's

482
00:21:47,050 --> 00:21:51,280
gonna go and it's gonna find everything

483
00:21:48,610 --> 00:21:52,740
that executed within that time frame or

484
00:21:51,280 --> 00:21:55,450
nearby that time

485
00:21:52,740 --> 00:21:58,270
okay it's gonna go on its get to do the

486
00:21:55,450 --> 00:22:01,170
same thing for every single phylum that

487
00:21:58,270 --> 00:22:04,180
executed outside of the timeframe of

488
00:22:01,170 --> 00:22:07,180
attacker activity and then it's gonna do

489
00:22:04,180 --> 00:22:09,460
a very simple Rachel it's just gonna

490
00:22:07,180 --> 00:22:11,380
calculate number of times that the

491
00:22:09,460 --> 00:22:13,930
phylum executed within the known

492
00:22:11,380 --> 00:22:15,970
attacker time frame divided by the

493
00:22:13,930 --> 00:22:19,330
number of times that file and executed

494
00:22:15,970 --> 00:22:21,730
outside and the end result of this is

495
00:22:19,330 --> 00:22:23,080
very simple we just sort it and what

496
00:22:21,730 --> 00:22:25,510
this is gonna do it's going to

497
00:22:23,080 --> 00:22:28,419
automatically bubble all the way to the

498
00:22:25,510 --> 00:22:30,490
top those files that the attacker

499
00:22:28,420 --> 00:22:33,550
brought into the environment and were

500
00:22:30,490 --> 00:22:35,560
executed primarily only while the guys

501
00:22:33,550 --> 00:22:37,960
were active in our environment so it's a

502
00:22:35,560 --> 00:22:41,669
really good way to make sure that we're

503
00:22:37,960 --> 00:22:46,090
not missing anything right more stuff

504
00:22:41,670 --> 00:22:50,140
Ricans can reconcile analytics that's

505
00:22:46,090 --> 00:22:51,550
included in the tool right now and well

506
00:22:50,140 --> 00:22:54,700
this thing is gonna do is basically try

507
00:22:51,550 --> 00:22:57,240
to identify reconnaissance sessions so

508
00:22:54,700 --> 00:23:01,030
it has a list of all the reconnaissance

509
00:22:57,240 --> 00:23:02,950
commands which are by the way you know

510
00:23:01,030 --> 00:23:06,700
use all the time these days with the

511
00:23:02,950 --> 00:23:09,520
whole agent less post exploitation buzzy

512
00:23:06,700 --> 00:23:10,840
trendy situation in which we're in so

513
00:23:09,520 --> 00:23:12,700
it's basically going to search for each

514
00:23:10,840 --> 00:23:16,480
one of those across your whole database

515
00:23:12,700 --> 00:23:18,460
and once it's find them it's going to

516
00:23:16,480 --> 00:23:20,860
tie to it's going to try to group them

517
00:23:18,460 --> 00:23:22,630
into reconnaissance sessions so if I

518
00:23:20,860 --> 00:23:25,270
find an isolated ping that's not

519
00:23:22,630 --> 00:23:27,390
interested but if I find a ping followed

520
00:23:25,270 --> 00:23:31,420
by a Who am I followed by ideas query

521
00:23:27,390 --> 00:23:33,780
alright depending on the cohesiveness so

522
00:23:31,420 --> 00:23:35,950
how close or they are to one another

523
00:23:33,780 --> 00:23:39,460
this thing is basically going to

524
00:23:35,950 --> 00:23:41,890
attribute a weight to that particular

525
00:23:39,460 --> 00:23:43,840
reconnaissance session and tallying all

526
00:23:41,890 --> 00:23:46,810
of that up is going to attribute a

527
00:23:43,840 --> 00:23:49,120
weight to the reconnaissance scoring for

528
00:23:46,810 --> 00:23:50,530
a host so one of the things I like to do

529
00:23:49,120 --> 00:23:53,020
is I like to run this and then I just

530
00:23:50,530 --> 00:23:54,920
like to go all the way to the top spores

531
00:23:53,020 --> 00:23:57,980
and see what happened there

532
00:23:54,920 --> 00:24:00,740
right and well sometimes I find it

533
00:23:57,980 --> 00:24:02,570
hackers sometimes I find Microsoft was

534
00:24:00,740 --> 00:24:06,890
running a wolf pack which has the same

535
00:24:02,570 --> 00:24:09,700
kind of effect but the interesting thing

536
00:24:06,890 --> 00:24:12,740
about recon scan is not really using it

537
00:24:09,700 --> 00:24:14,660
on its own it's the fact that it's a

538
00:24:12,740 --> 00:24:17,060
good example of how you can create a

539
00:24:14,660 --> 00:24:21,230
module that is really designed to feed

540
00:24:17,060 --> 00:24:23,990
other more advanced analytics that's

541
00:24:21,230 --> 00:24:27,680
find evil right now everyone's standing

542
00:24:23,990 --> 00:24:30,650
here has said you can't replace the

543
00:24:27,680 --> 00:24:32,150
human right and I love my job so I'm

544
00:24:30,650 --> 00:24:36,710
gonna say also that you can't replace a

545
00:24:32,150 --> 00:24:40,460
human right but but I'm presenting you

546
00:24:36,710 --> 00:24:44,120
here a zero knowledge context-free evil

547
00:24:40,460 --> 00:24:47,510
finder right the only caveat is that it

548
00:24:44,120 --> 00:24:49,189
doesn't work all the time yet but bear

549
00:24:47,510 --> 00:24:50,990
with you for a second well this thing

550
00:24:49,190 --> 00:24:55,640
will do is the following

551
00:24:50,990 --> 00:24:57,380
very simple idea it'll just go and look

552
00:24:55,640 --> 00:25:00,410
at every single reconnaissance session

553
00:24:57,380 --> 00:25:02,480
identify by the rican module it will go

554
00:25:00,410 --> 00:25:06,160
ahead and we'll look hey what files were

555
00:25:02,480 --> 00:25:07,820
executed within that within those

556
00:25:06,160 --> 00:25:09,640
reconnaissance or potential

557
00:25:07,820 --> 00:25:13,720
reconnaissance sessions

558
00:25:09,640 --> 00:25:15,580
okay once it has all of that it's just

559
00:25:13,720 --> 00:25:18,550
gonna go ahead perform frequency

560
00:25:15,580 --> 00:25:21,510
analysis based on filename and it's

561
00:25:18,550 --> 00:25:25,740
gonna sort that for you the end result

562
00:25:21,510 --> 00:25:30,190
well the stuff that has primarily been

563
00:25:25,740 --> 00:25:32,440
executed within or near by things

564
00:25:30,190 --> 00:25:35,650
identified as potential reconnaissance

565
00:25:32,440 --> 00:25:40,480
sessions are going to bubble up very

566
00:25:35,650 --> 00:25:42,010
simple idea extremely powerful okay now

567
00:25:40,480 --> 00:25:44,080
don't go running and try this and every

568
00:25:42,010 --> 00:25:47,590
single over your engagements it's not

569
00:25:44,080 --> 00:25:50,889
yet ready for consumption but let me

570
00:25:47,590 --> 00:25:53,860
tell you I've found evil with this thing

571
00:25:50,890 --> 00:25:55,120
on three different well actually two so

572
00:25:53,860 --> 00:25:57,100
the first one was the one that really

573
00:25:55,120 --> 00:26:00,219
inspired me to create the modules of

574
00:25:57,100 --> 00:26:03,760
it's sort of a test really on two

575
00:26:00,220 --> 00:26:04,360
breaches okay we're talking about zero

576
00:26:03,760 --> 00:26:12,940
knowledge

577
00:26:04,360 --> 00:26:15,070
hit the button evil finder okay so the

578
00:26:12,940 --> 00:26:19,210
whole point of releasing the tool here

579
00:26:15,070 --> 00:26:21,310
is basically achieving a set of goals

580
00:26:19,210 --> 00:26:23,410
right on the one side contributing to

581
00:26:21,310 --> 00:26:25,210
helping people out there improve their

582
00:26:23,410 --> 00:26:27,520
hunting skills we had some great

583
00:26:25,210 --> 00:26:31,630
presentation yes it about hunting on a

584
00:26:27,520 --> 00:26:33,340
budget well guys this is free you know

585
00:26:31,630 --> 00:26:36,790
so it'll support any budget that you

586
00:26:33,340 --> 00:26:38,770
have and as I said before you don't need

587
00:26:36,790 --> 00:26:42,850
any crazy hardware to run this thing you

588
00:26:38,770 --> 00:26:44,200
can I run it on my macbook pro and I've

589
00:26:42,850 --> 00:26:47,050
scaled it all the way up to sixty

590
00:26:44,200 --> 00:26:48,670
thousand notes so far so you're not

591
00:26:47,050 --> 00:26:52,389
gonna need to buy any expensive hardware

592
00:26:48,670 --> 00:26:54,160
to do that either and the other point is

593
00:26:52,390 --> 00:26:57,590
because I would like the community to

594
00:26:54,160 --> 00:27:00,900
set up they'll step up

595
00:26:57,590 --> 00:27:03,059
start creating more advanced analytics

596
00:27:00,900 --> 00:27:06,540
we're always pushing to get more data

597
00:27:03,059 --> 00:27:07,530
and more data is good but there's one

598
00:27:06,540 --> 00:27:11,490
thing that's even better than getting

599
00:27:07,530 --> 00:27:13,770
more data is using the data we have in a

600
00:27:11,490 --> 00:27:16,830
more intelligent way and we're not doing

601
00:27:13,770 --> 00:27:18,990
enough of that there's a treasure trove

602
00:27:16,830 --> 00:27:20,809
and this is just one example all right

603
00:27:18,990 --> 00:27:22,740
there's a treasure trove of information

604
00:27:20,809 --> 00:27:24,840
that's just slipping through our fingers

605
00:27:22,740 --> 00:27:27,090
because we're not consuming the data in

606
00:27:24,840 --> 00:27:30,080
a really intelligent way okay hopefully

607
00:27:27,090 --> 00:27:33,480
by releasing the tool all the boring

608
00:27:30,080 --> 00:27:35,370
work of you know parsing integrating

609
00:27:33,480 --> 00:27:37,470
structuring the indexing is done and now

610
00:27:35,370 --> 00:27:39,899
the only thing you have you go is jump

611
00:27:37,470 --> 00:27:41,760
into it you know type ten or twenty

612
00:27:39,900 --> 00:27:44,730
lines of Python code and you can you

613
00:27:41,760 --> 00:27:47,270
know test all your crazy Schauer ideas

614
00:27:44,730 --> 00:27:47,270
as I call them

615
00:27:49,380 --> 00:27:52,969
[Music]

