1
00:00:00,600 --> 00:00:03,169
(chords ringing)

2
00:00:07,707 --> 00:00:10,243
(audience clapping)

3
00:00:10,243 --> 00:00:12,145
- I've been a threat
hunter for a long time.

4
00:00:12,145 --> 00:00:13,747
And specifically,

5
00:00:13,747 --> 00:00:16,315
before I was with
my current employer,

6
00:00:16,315 --> 00:00:18,852
I worked with one of
those consulting firms,

7
00:00:18,852 --> 00:00:20,587
we'd do hunt missions, right.

8
00:00:20,587 --> 00:00:22,055
And we'd go out.

9
00:00:22,055 --> 00:00:25,458
And we'd typically spend
somewhere between two weeks

10
00:00:25,458 --> 00:00:27,093
and a month with
an organization.

11
00:00:27,093 --> 00:00:28,428
We'd spend a half day,

12
00:00:28,428 --> 00:00:30,096
here's the principles
of hunting,

13
00:00:30,096 --> 00:00:32,732
and then we'd hunt with them
in their data sources, right.

14
00:00:32,732 --> 00:00:34,501
Because hunting is just
one of those things

15
00:00:34,501 --> 00:00:37,904
that you really need
to learn by doing.

16
00:00:37,904 --> 00:00:39,806
Right, experience
is where you get it.

17
00:00:39,806 --> 00:00:42,742
And it was there that
the idea for this

18
00:00:42,742 --> 00:00:44,276
really germinated for me.

19
00:00:44,277 --> 00:00:47,747
Because we've got all
of these use cases.

20
00:00:47,747 --> 00:00:51,217
Several have been
eluded to, right,

21
00:00:51,217 --> 00:00:53,887
where we've got situations
where time and again,

22
00:00:53,887 --> 00:00:56,056
your experience,
you're a hunter,

23
00:00:56,056 --> 00:00:59,893
you find that oh the bad guy's
love to use this technique.

24
00:00:59,893 --> 00:01:01,227
And so to use this technique,

25
00:01:01,227 --> 00:01:04,129
I go look for this data source.

26
00:01:04,129 --> 00:01:05,432
And in this data source,

27
00:01:05,432 --> 00:01:07,133
I look at these places.

28
00:01:07,133 --> 00:01:08,902
Use cases based upon,

29
00:01:09,769 --> 00:01:11,704
as Rob talked about in his talk,

30
00:01:11,704 --> 00:01:14,407
the intel of the actual
adversaries, right.

31
00:01:14,407 --> 00:01:18,845
Well that's where machine
learning can benefit us.

32
00:01:18,845 --> 00:01:21,714
I am not a data scientist.

33
00:01:21,714 --> 00:01:24,884
I do not claim to
be a data scientist.

34
00:01:24,884 --> 00:01:27,587
But what I'm hoping
to convince you today,

35
00:01:27,587 --> 00:01:31,324
I'm actually releasing a
new tool to help with this.

36
00:01:31,324 --> 00:01:34,027
There's another one out there
that I'll also refer to.

37
00:01:34,027 --> 00:01:36,863
But data with the
machine learning

38
00:01:38,698 --> 00:01:42,368
has come to the point where
we can run it as professionals

39
00:01:42,368 --> 00:01:43,670
as a black box.

40
00:01:43,670 --> 00:01:47,107
You do not need to be a
data scientist anymore.

41
00:01:47,107 --> 00:01:49,676
And hopefully I will
convince you of that.

42
00:01:49,676 --> 00:01:52,645
But I'm gonna start
off with a quiz.

43
00:01:52,645 --> 00:01:55,181
I know it's not lunchtime yet.

44
00:01:55,181 --> 00:01:56,783
I apologize.

45
00:01:56,783 --> 00:01:59,352
But somebody must
recognize what this looks.

46
00:01:59,352 --> 00:02:02,188
What's this a
Wireshark capture of?

47
00:02:02,188 --> 00:02:04,290
How 'bout this one?

48
00:02:04,290 --> 00:02:06,659
Anybody recognize this one?

49
00:02:06,659 --> 00:02:09,329
This is our old
friend, Hancitor.

50
00:02:09,329 --> 00:02:12,098
And then how 'bout this one?

51
00:02:12,098 --> 00:02:15,268
This would be good old
Cob-der dropping lah-kee

52
00:02:15,268 --> 00:02:17,137
on your environment.

53
00:02:17,137 --> 00:02:19,739
So, the reason I
brought these up

54
00:02:19,739 --> 00:02:21,774
is because in this room,

55
00:02:21,774 --> 00:02:23,977
we probably have a cross-section

56
00:02:23,977 --> 00:02:28,148
of some of the top talent in
the world at incident response.

57
00:02:29,415 --> 00:02:30,983
And even us,

58
00:02:30,984 --> 00:02:32,819
looking at these Wiresharks,

59
00:02:32,819 --> 00:02:35,054
are hard-pressed
to what is this?

60
00:02:35,054 --> 00:02:36,789
How do we use this, right.

61
00:02:36,789 --> 00:02:40,260
That's what I think
the root challenge,

62
00:02:40,260 --> 00:02:42,929
if you're at most organizations

63
00:02:42,929 --> 00:02:45,565
and you want to get
rolling in cyber hunting.

64
00:02:45,565 --> 00:02:47,133
You've got some challenges.

65
00:02:47,133 --> 00:02:49,602
You gotta find
experienced practitioners.

66
00:02:49,602 --> 00:02:53,773
Because I can tell you that
an experienced threat hunter

67
00:02:53,773 --> 00:02:55,742
versus a non-experienced
threat hunter,

68
00:02:55,742 --> 00:02:58,545
your results are going
to be night and day.

69
00:02:58,545 --> 00:03:03,448
So two, it really takes a long
time to develop these skills.

70
00:03:03,449 --> 00:03:06,719
I would consider
myself a moderately
capable threat hunter,

71
00:03:06,719 --> 00:03:10,890
and I've been focusing on
this for at least a decade.

72
00:03:12,025 --> 00:03:13,993
Often we have too
much data to look for.

73
00:03:13,993 --> 00:03:18,064
I work at an organization
with 350,000 employees.

74
00:03:19,199 --> 00:03:22,035
We have hundreds of
thousands of computers.

75
00:03:22,035 --> 00:03:26,940
I have a Bro sensor grid
of over 200,000, or 2,000.

76
00:03:26,940 --> 00:03:28,641
200,000 would be
really impressive.

77
00:03:28,641 --> 00:03:31,411
2,000 Bro network sensors.

78
00:03:31,411 --> 00:03:34,447
That's a lot of data
to sift through.

79
00:03:34,447 --> 00:03:36,449
And so what we do in our case

80
00:03:36,449 --> 00:03:38,651
is we have a weekly
hunt mission.

81
00:03:38,651 --> 00:03:41,621
So one of the things we've
found works really effective

82
00:03:41,621 --> 00:03:43,923
and one of our team members

83
00:03:43,923 --> 00:03:45,692
is actually gonna talk
about this tomorrow

84
00:03:45,692 --> 00:03:46,960
in a lot more detail.

85
00:03:46,960 --> 00:03:48,328
So I don't want to
steal his thunder.

86
00:03:48,328 --> 00:03:50,530
But we rotate folks through.

87
00:03:50,530 --> 00:03:52,765
So we have a week where

88
00:03:52,765 --> 00:03:55,400
the portion of the C-Cert team,

89
00:03:55,401 --> 00:03:58,137
some of our other
groups that support us,

90
00:03:58,137 --> 00:04:00,106
they spend the week just hunting

91
00:04:00,106 --> 00:04:02,208
on a particular hunt mission.

92
00:04:02,208 --> 00:04:04,844
But till they cycle back around,

93
00:04:04,844 --> 00:04:07,747
so a particular use
case gets hunted.

94
00:04:07,747 --> 00:04:09,415
So maybe last week,

95
00:04:09,415 --> 00:04:13,352
we hunted OWA logs
for indicators of
particular threats.

96
00:04:16,255 --> 00:04:20,426
By the time they circled back
around to those OWA logs,

97
00:04:20,426 --> 00:04:22,729
it might be three
months from now,

98
00:04:22,729 --> 00:04:24,964
just because of
the sheer quantity.

99
00:04:24,964 --> 00:04:27,033
Then on the other side,

100
00:04:27,033 --> 00:04:31,271
there's some really, really
strong benefits from hunting.

101
00:04:31,271 --> 00:04:35,541
So one of the questions
earlier I think for Rob was

102
00:04:35,541 --> 00:04:38,778
well how do you quantify
the value of threat hunting?

103
00:04:38,778 --> 00:04:42,415
I personally, actually
think the output of finding

104
00:04:42,415 --> 00:04:44,651
the unknown malicious activity

105
00:04:44,651 --> 00:04:47,287
is a secondary benefit
to threat hunting.

106
00:04:47,287 --> 00:04:48,787
I really do.

107
00:04:48,788 --> 00:04:51,858
I think the really strong
benefits for threat hunting

108
00:04:51,858 --> 00:04:55,762
are one, it drives
continuous improvement

109
00:04:55,762 --> 00:04:57,797
in our detection capabilities.

110
00:04:57,797 --> 00:05:00,700
Right, if we find
something in a threat hunt,

111
00:05:00,700 --> 00:05:02,502
then we should
immediately be pivoting to

112
00:05:02,502 --> 00:05:05,672
how do we find this
on an ongoing basis?

113
00:05:05,672 --> 00:05:09,842
How do we find this on a
constant, iterative basis?

114
00:05:11,244 --> 00:05:14,781
And third, and I think
ultimately most important,

115
00:05:14,781 --> 00:05:18,785
because if you didn't get
from Rob's talk on the keynote

116
00:05:18,785 --> 00:05:23,089
that the most important
thing is the people,

117
00:05:23,089 --> 00:05:26,592
it's an incredible
mentoring vehicle.

118
00:05:26,592 --> 00:05:28,061
So in our case,

119
00:05:28,061 --> 00:05:32,198
we have one of our really
experienced incident handlers,

120
00:05:32,198 --> 00:05:33,433
our top level analysts,

121
00:05:33,433 --> 00:05:35,668
leading the hunt mission,

122
00:05:35,668 --> 00:05:38,538
backed up by a level
two and a level one.

123
00:05:38,538 --> 00:05:41,908
Not because the experienced
person really needs

124
00:05:41,908 --> 00:05:44,110
the level two and the level one,

125
00:05:44,110 --> 00:05:46,746
but because it's
just a fantastic way

126
00:05:46,746 --> 00:05:50,015
to help the level one analyst
become a level two analyst,

127
00:05:50,016 --> 00:05:53,152
and the level two analyst
become a level three analyst.

128
00:05:53,152 --> 00:05:56,289
'Cause we have to
grow our capabilities.

129
00:05:56,289 --> 00:06:00,159
So, that's where I see
the real opportunity

130
00:06:00,159 --> 00:06:02,161
for machine learning.

131
00:06:02,161 --> 00:06:05,031
Now, I'm gonna differ
from all of the vendors

132
00:06:05,031 --> 00:06:07,100
that you might have
talked to at RSA,

133
00:06:07,100 --> 00:06:09,569
and some of these shows that say

134
00:06:09,569 --> 00:06:12,538
artificial intelligence
and machine learning

135
00:06:12,538 --> 00:06:14,640
is these magic silver bullets

136
00:06:14,640 --> 00:06:16,676
that's gonna solve
all your problems.

137
00:06:16,676 --> 00:06:17,977
That's bull pucky.

138
00:06:17,977 --> 00:06:20,513
Just gonna put that
out there right now.

139
00:06:20,513 --> 00:06:23,616
There's nothing magical
about machine learning.

140
00:06:23,616 --> 00:06:26,786
It's just giving a
computer an ability

141
00:06:28,221 --> 00:06:31,691
to do some of the type of
analytical work that we do.

142
00:06:31,691 --> 00:06:33,325
And then specifically,

143
00:06:33,326 --> 00:06:35,995
I think taking
particular use cases.

144
00:06:35,995 --> 00:06:37,463
So for instance,

145
00:06:37,463 --> 00:06:40,967
the tool that I'm gonna
demo here in just a second,

146
00:06:40,967 --> 00:06:43,034
which I've called Assimilate,

147
00:06:43,035 --> 00:06:44,937
'cause somebody keeps
referring to my team

148
00:06:44,937 --> 00:06:46,839
as the Borg Collective.

149
00:06:48,775 --> 00:06:51,943
Assimilate is going to ingest

150
00:06:51,944 --> 00:06:53,379
row HTTP headers,

151
00:06:54,580 --> 00:06:57,015
looking for unknown
malicious activity.

152
00:06:57,016 --> 00:07:00,253
Right, and then it kicks
out hey this is interesting.

153
00:07:00,253 --> 00:07:02,054
Now I want to be clear here.

154
00:07:02,054 --> 00:07:05,857
This is not intended as
a replacement for your

155
00:07:07,927 --> 00:07:08,961
IDS stuff,

156
00:07:08,961 --> 00:07:11,364
your other detection systems.

157
00:07:11,364 --> 00:07:13,866
This is a hunting tool.

158
00:07:13,866 --> 00:07:16,736
What machine learning
is gonna put out

159
00:07:16,736 --> 00:07:19,739
is going to be useful for you

160
00:07:19,739 --> 00:07:21,840
as a hunter to go through.

161
00:07:21,841 --> 00:07:24,710
This is not gonna replace
people, anything like that.

162
00:07:24,710 --> 00:07:26,145
But what this does,

163
00:07:26,145 --> 00:07:29,816
is it allows you to
take specific use cases.

164
00:07:31,250 --> 00:07:34,387
The last talk, where he talked
about taking those use cases

165
00:07:34,387 --> 00:07:35,721
and defining those,

166
00:07:35,721 --> 00:07:38,057
and those become
inputs for further,

167
00:07:38,057 --> 00:07:40,193
that's what this
allows you to do.

168
00:07:40,193 --> 00:07:43,229
So enough of me pontificating.

169
00:07:43,229 --> 00:07:46,065
Let me switch over
to a demo here.

170
00:07:48,301 --> 00:07:50,536
So this is an actual
screen capture.

171
00:07:50,536 --> 00:07:54,407
I did a screen capture
because I was trying to

172
00:07:54,407 --> 00:07:55,407
avoid the...

173
00:07:56,709 --> 00:07:58,578
And it looks like our
resolution is off a little bit.

174
00:07:58,578 --> 00:08:02,448
But I think we'll still
get the main thing.

175
00:08:02,448 --> 00:08:04,015
So in an attempt to

176
00:08:05,318 --> 00:08:07,385
stymie the demo gods,

177
00:08:07,386 --> 00:08:10,623
what I did was I
just screen captured.

178
00:08:10,623 --> 00:08:12,592
So I'm running Assimilate here.

179
00:08:12,592 --> 00:08:14,827
You notice I've got a directory

180
00:08:14,827 --> 00:08:16,229
of a whole bunch of Bro logs.

181
00:08:16,229 --> 00:08:20,032
I mentioned I've got
over 2,000 Bro sensors.

182
00:08:20,032 --> 00:08:23,835
So I have pretty sizeable
Bro logs to work with.

183
00:08:23,836 --> 00:08:28,241
We get a few terabytes a
day which is kinda handy.

184
00:08:28,241 --> 00:08:30,610
And so what I'm doing
here is I'm running

185
00:08:30,610 --> 00:08:32,178
Assimilate Assess.

186
00:08:32,178 --> 00:08:35,515
So there's two components
to machine learning.

187
00:08:35,515 --> 00:08:39,050
First, you've got to
train a model, okay.

188
00:08:39,051 --> 00:08:41,854
And then you've got to apply
that model against your data.

189
00:08:41,854 --> 00:08:44,023
So in this instance,
what I'm doing is

190
00:08:44,023 --> 00:08:46,559
Assimilate is first
loading up the models.

191
00:08:46,559 --> 00:08:48,160
And I'll explain how
we build the models

192
00:08:48,160 --> 00:08:49,795
and all that in a minute.

193
00:08:49,795 --> 00:08:53,031
And it's testing that
specific snort log.

194
00:08:53,032 --> 00:08:55,034
I'm outputting my output

195
00:08:56,569 --> 00:08:59,137
into a file called findings.txt

196
00:09:00,740 --> 00:09:03,175
because of course
I'm gonna go want to

197
00:09:03,175 --> 00:09:05,176
chase those down later.

198
00:09:05,177 --> 00:09:07,079
And then I did a dash v,

199
00:09:07,079 --> 00:09:11,083
just so it'll list out as it's
going a little more verbosely

200
00:09:11,083 --> 00:09:14,887
so that you can see that
it's actually doing stuff.

201
00:09:14,887 --> 00:09:18,523
And let me just speed things
up a little bit there.

202
00:09:18,524 --> 00:09:20,293
So I jump through.

203
00:09:20,293 --> 00:09:22,895
Horribly exciting, isn't it?

204
00:09:22,895 --> 00:09:24,430
Like every tool.

205
00:09:24,430 --> 00:09:26,998
So literally, what
this is doing though

206
00:09:26,999 --> 00:09:28,301
is really straightforward.

207
00:09:28,301 --> 00:09:30,970
It's just ingesting
that Bro output log

208
00:09:30,970 --> 00:09:35,875
and just parsing it looking
for anomalous activity.

209
00:09:35,875 --> 00:09:38,945
Stuff that you may want
to go hunt on this.

210
00:09:38,945 --> 00:09:41,380
You may want to go
chase this down.

211
00:09:41,380 --> 00:09:45,251
Because this is potentially
bad in your environment.

212
00:09:45,251 --> 00:09:47,420
So what are we looking at there?

213
00:09:47,420 --> 00:09:50,323
Let me go a little
more particular.

214
00:09:51,891 --> 00:09:53,125
So in this case,

215
00:09:53,125 --> 00:09:55,828
I'm using an algorithm
called Naive Bayes.

216
00:09:55,828 --> 00:09:59,531
Anybody recognize
Naive Bayes algorithm?

217
00:09:59,532 --> 00:10:01,867
Right, that's used for what?

218
00:10:03,736 --> 00:10:06,771
Shout it out, don't be bashful.

219
00:10:06,772 --> 00:10:08,374
Spam, exactly.

220
00:10:08,374 --> 00:10:11,844
Naive Bayes has been used
since literally the '90s

221
00:10:11,844 --> 00:10:13,279
to find spam.

222
00:10:13,279 --> 00:10:16,849
Naive Bayes algorithm is really,
really excellent algorithm

223
00:10:16,849 --> 00:10:19,418
for looking at textual content.

224
00:10:20,653 --> 00:10:22,521
And what are HTTP headers?

225
00:10:22,521 --> 00:10:24,022
Textual content.

226
00:10:24,023 --> 00:10:28,060
And now, this is not by any
means the only algorithm.

227
00:10:28,060 --> 00:10:29,962
I picked this one actually

228
00:10:29,962 --> 00:10:32,732
because I've got
several of these tools

229
00:10:32,732 --> 00:10:35,401
that I've developed that
I'll be releasing here

230
00:10:35,401 --> 00:10:36,901
over the next bit.

231
00:10:36,902 --> 00:10:39,338
But the original one I
was actually gonna release

232
00:10:39,338 --> 00:10:40,740
for the talk

233
00:10:40,740 --> 00:10:45,444
used another technique
algorithm called Random Forest.

234
00:10:45,444 --> 00:10:48,247
But Dave Bianco
and Chris McCubbin

235
00:10:48,247 --> 00:10:50,116
released a tool called Clearcut

236
00:10:50,116 --> 00:10:52,451
that I'll talk more
about in a second

237
00:10:52,451 --> 00:10:54,086
that uses Random Forest.

238
00:10:54,086 --> 00:10:55,755
So instead of duplicating,

239
00:10:55,755 --> 00:10:57,623
we've already got a great
tool that uses that.

240
00:10:57,623 --> 00:10:59,825
Let's do a new tool.

241
00:10:59,825 --> 00:11:01,394
So I went with Naive Bayes.

242
00:11:01,394 --> 00:11:03,396
So, in the process here,

243
00:11:03,396 --> 00:11:07,333
had I just showed you
the whole demo or video,

244
00:11:07,333 --> 00:11:11,437
it would have parsed
through 37,440 HTTP headers.

245
00:11:13,105 --> 00:11:17,276
In the end, it found 46
things that looked suspicious,

246
00:11:17,276 --> 00:11:20,279
which is about a
tenth of a percent.

247
00:11:22,715 --> 00:11:25,785
How long is it gonna
take you to parse through

248
00:11:25,785 --> 00:11:27,053
37,440 headers?

249
00:11:29,588 --> 00:11:34,026
And what do you think your
accuracy is going to be in that?

250
00:11:34,026 --> 00:11:37,063
This is where the
tool can be helpful

251
00:11:37,063 --> 00:11:39,298
to help us find stuff.

252
00:11:39,298 --> 00:11:42,635
So this is an example
of its output.

253
00:11:42,635 --> 00:11:46,271
So what it's showing here
is just the individual

254
00:11:46,272 --> 00:11:49,775
lines that had suspicious
entries on them.

255
00:11:51,243 --> 00:11:55,181
And at this point as a hunter
I would go chase those down.

256
00:11:57,483 --> 00:12:00,518
So what do we need to do this?

257
00:12:00,519 --> 00:12:02,588
It's pretty straightforward.

258
00:12:02,588 --> 00:12:04,622
You're gonna need Python.

259
00:12:04,623 --> 00:12:06,559
There's two modules you need.

260
00:12:06,559 --> 00:12:09,328
Scikit Learn and Pandas.

261
00:12:09,328 --> 00:12:12,231
You're gonna need
some packet captures

262
00:12:12,231 --> 00:12:14,567
of non-malicious activity.

263
00:12:14,567 --> 00:12:16,736
This is actually,
in my experience,

264
00:12:16,736 --> 00:12:18,738
the hardest thing to come by.

265
00:12:18,738 --> 00:12:20,940
So in your environment,

266
00:12:20,940 --> 00:12:23,976
the beauty of machine
learning is that

267
00:12:23,976 --> 00:12:26,045
its accuracy will be best

268
00:12:27,213 --> 00:12:29,615
if you build the model
in your environment

269
00:12:29,615 --> 00:12:31,016
on your traffic.

270
00:12:31,016 --> 00:12:35,154
Because your environment's
traffic is unique.

271
00:12:35,154 --> 00:12:37,256
Even though it's
using the same RFCs

272
00:12:37,256 --> 00:12:40,391
and the same protocols all
the rest of us are using,

273
00:12:40,392 --> 00:12:41,227
the actual

274
00:12:43,362 --> 00:12:45,331
day to day, hour by hour,

275
00:12:45,331 --> 00:12:48,167
minute by minute
output is unique.

276
00:12:49,535 --> 00:12:53,872
And so, capturing some
non-malicious activity, right.

277
00:12:53,873 --> 00:12:55,141
You just needs some pcaps.

278
00:12:55,141 --> 00:12:57,209
I've got some scripts
and stuff to convert it

279
00:12:57,209 --> 00:12:58,676
here in a second I'll show.

280
00:12:58,677 --> 00:13:01,147
But the trick though is,

281
00:13:01,147 --> 00:13:05,117
you want to get it without
malicious activity in it.

282
00:13:05,117 --> 00:13:07,353
(laughing) So that
can be tricky.

283
00:13:07,353 --> 00:13:08,920
'Cause otherwise
you're gonna teach

284
00:13:08,921 --> 00:13:10,456
the machine learning algorithm

285
00:13:10,456 --> 00:13:13,058
that your bad is
normal and good.

286
00:13:13,058 --> 00:13:16,128
And that's probably not what
we're looking to achieve.

287
00:13:16,128 --> 00:13:19,165
Packet captures of malicious
activity, that's easy.

288
00:13:19,165 --> 00:13:20,966
You can get 'em from
your environment.

289
00:13:20,966 --> 00:13:23,269
There's some other, I'll
give you some spots.

290
00:13:23,269 --> 00:13:25,104
You're gonna need Bro.

291
00:13:25,104 --> 00:13:29,241
You're gonna need a customized
Bro HTTP header script.

292
00:13:29,241 --> 00:13:32,411
So, I'm not using
the Bro HTTP module.

293
00:13:33,612 --> 00:13:35,281
That's what Clearcut uses.

294
00:13:35,281 --> 00:13:36,214
Great module.

295
00:13:36,215 --> 00:13:38,117
So if you're familiar with Bro,

296
00:13:38,117 --> 00:13:42,588
Bro has a standard module on
by default called Bro HTTP

297
00:13:42,588 --> 00:13:46,257
where it breaks out all of
the individual HTTP headers.

298
00:13:46,258 --> 00:13:49,428
Bro HTTP header is
actually a separate

299
00:13:51,430 --> 00:13:52,765
output within Bro.

300
00:13:52,765 --> 00:13:54,433
It's been available for years.

301
00:13:54,433 --> 00:13:57,002
It's not on by default.

302
00:13:57,002 --> 00:13:59,170
So I've customized a script

303
00:13:59,171 --> 00:14:00,840
to turn it on.

304
00:14:00,840 --> 00:14:03,442
All of this is packaged
up, by the way,

305
00:14:03,442 --> 00:14:05,711
up on the GitHub link there

306
00:14:05,711 --> 00:14:07,546
that I've got at the bottom,

307
00:14:07,546 --> 00:14:09,548
which has got this tool.

308
00:14:10,749 --> 00:14:12,985
What I customized
is really simple.

309
00:14:12,985 --> 00:14:15,154
I added the Bro Con reference.

310
00:14:15,154 --> 00:14:18,357
So everybody's familiar with
Bro and the Bro Con reference?

311
00:14:18,357 --> 00:14:20,892
That gives us the ability
when we're hunting this data

312
00:14:20,893 --> 00:14:22,995
to pivot back to
the full session

313
00:14:22,995 --> 00:14:25,231
so we can do the
full investigation.

314
00:14:25,231 --> 00:14:28,467
And then, we need of
course Bro itself,

315
00:14:29,635 --> 00:14:32,271
and the Assimilate
Python scripts.

316
00:14:32,271 --> 00:14:33,671
All of that.

317
00:14:33,672 --> 00:14:36,175
Well Sci-kit Learn
modules are not available.

318
00:14:36,175 --> 00:14:39,078
And the packet captures
are not at the GitHub.

319
00:14:39,078 --> 00:14:41,814
But the rest is at
the GitHub there.

320
00:14:41,814 --> 00:14:45,950
All right, so how do we
do this then step by step?

321
00:14:45,951 --> 00:14:47,519
Well the first thing
you've gotta do

322
00:14:47,519 --> 00:14:49,221
is you're gonna need to go out,

323
00:14:49,221 --> 00:14:52,024
and you're gonna need to
collect and process some data.

324
00:14:52,024 --> 00:14:55,761
So you need to go out,
capture those pcaps.

325
00:14:55,761 --> 00:14:59,932
Then you're gonna convert
them into Bro HTTP headers.

326
00:15:02,134 --> 00:15:04,203
That, we'll use to
train the model.

327
00:15:04,203 --> 00:15:06,372
I'll show you how to do
that in just a second here.

328
00:15:06,372 --> 00:15:10,541
So the training will just
literally ingest the Bro output,

329
00:15:11,710 --> 00:15:13,646
both the normal
and the malicious,

330
00:15:13,646 --> 00:15:15,347
and it will build a model file,

331
00:15:15,347 --> 00:15:16,515
it'll save it out.

332
00:15:16,515 --> 00:15:17,616
From then on,

333
00:15:17,616 --> 00:15:20,052
all you need to do is run it.

334
00:15:21,587 --> 00:15:24,423
That should result in
some suspicious entries.

335
00:15:24,423 --> 00:15:26,692
You look at those
suspicious entries.

336
00:15:26,692 --> 00:15:28,360
When you get those
suspicious entries,

337
00:15:28,360 --> 00:15:30,429
you're gonna find,
especially initially,

338
00:15:30,429 --> 00:15:33,732
oh no, this is legitimate
traffic, which is fine.

339
00:15:33,732 --> 00:15:36,168
You just feed that back
in and retrain your model

340
00:15:36,168 --> 00:15:40,039
to tighten it up a
little bit and you win.

341
00:15:40,039 --> 00:15:42,274
That's the overall step by step.

342
00:15:42,274 --> 00:15:44,443
So literally, you can do this

343
00:15:44,443 --> 00:15:47,579
without having a bunch of
data science expertise,

344
00:15:47,579 --> 00:15:50,748
without having deep,
deep understanding
of machine learning.

345
00:15:50,749 --> 00:15:52,451
Now, that said,

346
00:15:52,451 --> 00:15:56,455
I do recommend at least
getting a basic premise.

347
00:15:59,258 --> 00:16:02,995
Primer maybe is a better word
for it on machine learning.

348
00:16:02,995 --> 00:16:05,764
But given that we only
had half hour windows

349
00:16:05,764 --> 00:16:07,266
for these talks,

350
00:16:07,266 --> 00:16:10,202
that's a little bit too
much to bite off for this.

351
00:16:10,202 --> 00:16:14,373
And indeed, if you go back
to David Bianco's B-Sides,

352
00:16:15,341 --> 00:16:16,408
2016 DC talk,

353
00:16:18,143 --> 00:16:22,147
he does a great job of
explaining the fundamentals.

354
00:16:22,147 --> 00:16:25,084
He did that when he
released Clearcut.

355
00:16:25,084 --> 00:16:26,919
So, no need to
reinvent the wheel.

356
00:16:26,919 --> 00:16:30,756
Go Google Clearcut and
Bianco, you'll find it,

357
00:16:32,624 --> 00:16:33,525
and profit.

358
00:16:34,727 --> 00:16:37,262
So, simple diagram of
what this looks like.

359
00:16:37,262 --> 00:16:39,598
So we take Wireshark,

360
00:16:39,598 --> 00:16:43,168
we collect some normal
traffic from our environment,

361
00:16:43,168 --> 00:16:45,070
get those pcaps, right.

362
00:16:46,772 --> 00:16:50,476
If you're not familiar with
malware-traffic-analysis.net,

363
00:16:50,476 --> 00:16:51,577
shame on you.

364
00:16:52,778 --> 00:16:55,280
He does just a fantastic job

365
00:16:55,280 --> 00:16:59,451
of keeping an up to date
of the latest, greatest fun

366
00:17:00,319 --> 00:17:02,253
that is being thrown at us

367
00:17:02,254 --> 00:17:04,390
by a bunch of the adversaries.

368
00:17:04,390 --> 00:17:05,958
Internal malicious traffic,

369
00:17:05,958 --> 00:17:07,359
so take your zoo,

370
00:17:07,358 --> 00:17:11,530
run some pcaps out of
Cuckoo, stuff like that.

371
00:17:11,530 --> 00:17:13,499
Grab those pcaps.

372
00:17:13,499 --> 00:17:16,735
And then what you're
gonna want to do,

373
00:17:16,734 --> 00:17:18,771
I'll show you the
script in a second,

374
00:17:18,771 --> 00:17:20,271
you're gonna need
to label it, right.

375
00:17:20,271 --> 00:17:22,006
So separate those pcaps.

376
00:17:22,007 --> 00:17:23,675
Here's normal traffic,

377
00:17:23,675 --> 00:17:26,412
here's malicious traffic, okay.

378
00:17:26,412 --> 00:17:27,679
And then,

379
00:17:27,679 --> 00:17:30,349
you'll need to install the

380
00:17:30,349 --> 00:17:34,520
customized HTTP headers Bro
module that's up on GitHub.

381
00:17:35,921 --> 00:17:38,290
And then just process
all those packet captures

382
00:17:38,290 --> 00:17:39,391
with dash r.

383
00:17:39,391 --> 00:17:40,926
Right, Bro dash r,

384
00:17:40,926 --> 00:17:42,628
your pcap file,

385
00:17:42,628 --> 00:17:45,964
that'll spit out all of
the headers that you need.

386
00:17:45,964 --> 00:17:48,399
Just collect hose
headers into a directory,

387
00:17:48,400 --> 00:17:50,803
run Assimilate on it, boom.

388
00:17:50,803 --> 00:17:52,538
It's that easy, okay.

389
00:17:53,672 --> 00:17:55,841
So this is what the customized

390
00:17:55,841 --> 00:17:58,243
Bro HTTP headers
script looks like.

391
00:17:58,243 --> 00:18:00,279
Like I said, really the
only thing I'm doing here

392
00:18:00,279 --> 00:18:02,815
is putting out the HTTP headers

393
00:18:04,850 --> 00:18:06,752
function from Bro.

394
00:18:06,752 --> 00:18:08,887
What that is, if you're
not familiar by the way,

395
00:18:08,887 --> 00:18:10,656
is it's just a serial string

396
00:18:10,656 --> 00:18:12,691
of all of the headers together.

397
00:18:12,691 --> 00:18:14,326
So it's got the user agent,

398
00:18:14,326 --> 00:18:15,494
the yer-ee,

399
00:18:15,494 --> 00:18:17,428
all of the HTTP headers

400
00:18:18,764 --> 00:18:20,498
in one single string,

401
00:18:22,568 --> 00:18:25,537
which is convenient for this.

402
00:18:25,537 --> 00:18:29,074
And then, again I'm trying
to make the barrier to entry

403
00:18:29,074 --> 00:18:30,609
as low as possible.

404
00:18:30,609 --> 00:18:32,977
So this is a shell
script that I wrote

405
00:18:32,978 --> 00:18:36,515
for personally
processing all the pcaps.

406
00:18:36,515 --> 00:18:39,718
So, if you don't want
to even bother with

407
00:18:39,718 --> 00:18:43,422
understanding how
to run Bro dash r,

408
00:18:43,422 --> 00:18:46,825
this'll just iterate
through a directory,

409
00:18:46,825 --> 00:18:48,594
take all of the pcaps,

410
00:18:48,594 --> 00:18:51,230
runs them through Bro r,

411
00:18:51,230 --> 00:18:55,334
extracts out the Bro HTTP,
and Bro HTTP headers.

412
00:18:55,334 --> 00:18:59,872
I take both of those out
because I also run Clearcut.

413
00:18:59,872 --> 00:19:02,407
And so that puts it
then into a folder

414
00:19:02,407 --> 00:19:04,676
so I can train Clearcut as well,

415
00:19:04,676 --> 00:19:07,212
so I can double the
bang for my buck.

416
00:19:07,212 --> 00:19:10,215
And then it looks
like this running.

417
00:19:12,251 --> 00:19:14,153
Pretty straightforward.

418
00:19:17,990 --> 00:19:18,824
So here,

419
00:19:20,025 --> 00:19:21,793
I'm running the shell script.

420
00:19:21,793 --> 00:19:25,531
Notice, I've got there a
directory full of pcaps.

421
00:19:25,531 --> 00:19:27,032
And I'm now seeing

422
00:19:28,433 --> 00:19:29,434
an HTTP.log,

423
00:19:30,702 --> 00:19:33,205
and an HTTP headers.log.

424
00:19:33,205 --> 00:19:35,807
What I had my script
do is just name

425
00:19:35,807 --> 00:19:39,044
the log files the same
name as the pcaps,

426
00:19:39,044 --> 00:19:40,812
so I could just
easily keep track of

427
00:19:40,812 --> 00:19:44,248
what log files went
with what pcaps.

428
00:19:44,249 --> 00:19:47,920
And just calls on Bro
to process through.

429
00:19:47,920 --> 00:19:49,154
It runs pretty quick.

430
00:19:49,154 --> 00:19:50,656
Bro's really fast.

431
00:19:51,590 --> 00:19:53,324
So a folder of pcaps,

432
00:19:54,826 --> 00:19:56,795
quick shell script,

433
00:19:56,795 --> 00:19:58,564
and Bob's your uncle.

434
00:20:00,265 --> 00:20:03,202
So then, you process the pcaps.

435
00:20:03,202 --> 00:20:04,536
So once you've got that,

436
00:20:04,536 --> 00:20:06,471
what we now end up with is

437
00:20:06,471 --> 00:20:08,140
I've got two folders.

438
00:20:08,140 --> 00:20:11,109
One that's my training data,

439
00:20:11,109 --> 00:20:13,645
my normal training data,

440
00:20:13,645 --> 00:20:16,315
and one that's my
malicious training data.

441
00:20:16,315 --> 00:20:20,485
So now at this point I
simply run assimilate-train.

442
00:20:25,424 --> 00:20:26,258
So...

443
00:20:29,428 --> 00:20:31,096
assimilate-train.py,

444
00:20:32,598 --> 00:20:34,499
there's the parameters.

445
00:20:37,035 --> 00:20:38,537
And in this case,

446
00:20:38,537 --> 00:20:41,840
notice the dash n is
pointing to a directory

447
00:20:41,840 --> 00:20:44,842
of HTTP headers
with normal traffic,

448
00:20:46,144 --> 00:20:48,480
and the dash m is malicious.

449
00:20:50,749 --> 00:20:54,386
And so literally, it's gonna
ingest all of those headers,

450
00:20:54,386 --> 00:20:57,155
use that to train
my model files.

451
00:20:58,190 --> 00:20:59,625
Obviously, there's all kinds

452
00:20:59,625 --> 00:21:01,093
of parameters there you can add,

453
00:21:01,093 --> 00:21:04,663
like custom naming your model
files and stuff like that.

454
00:21:04,663 --> 00:21:09,001
But the defaults should
work for you pretty well.

455
00:21:09,001 --> 00:21:12,271
And that'll take a
bit to run through.

456
00:21:12,271 --> 00:21:14,673
And then it's gonna spit out,

457
00:21:16,308 --> 00:21:18,610
spit out the model files.

458
00:21:18,610 --> 00:21:21,612
I'll jump ahead in
interest of time.

459
00:21:23,382 --> 00:21:24,650
Now in this case,

460
00:21:24,650 --> 00:21:27,252
I trained some massive files.

461
00:21:27,252 --> 00:21:29,521
Again, I have a lot of data.

462
00:21:29,521 --> 00:21:33,191
So my model files are
over 500 meg in size.

463
00:21:33,191 --> 00:21:35,360
Yours probably
won't be that large.

464
00:21:35,360 --> 00:21:37,195
That's not a bad thing.

465
00:21:37,195 --> 00:21:39,364
I'm just a big believer in

466
00:21:41,133 --> 00:21:43,168
being overly thorough

467
00:21:43,168 --> 00:21:46,004
and trying to be as
accurate as possible.

468
00:21:46,004 --> 00:21:48,240
So then once we've
got it trained,

469
00:21:48,240 --> 00:21:49,207
we're good to go.

470
00:21:49,207 --> 00:21:51,243
Now there's a few gotchas

471
00:21:51,243 --> 00:21:52,678
that you want to
bear in mind here.

472
00:21:52,678 --> 00:21:54,413
So the more data,

473
00:21:54,413 --> 00:21:58,583
i.e. the more normal traffic
and the more malware you have,

474
00:21:58,583 --> 00:22:01,019
the better accuracy you've got.

475
00:22:01,019 --> 00:22:03,121
But unfortunately,
on the flip side,

476
00:22:03,121 --> 00:22:04,790
the bigger your models are,

477
00:22:04,790 --> 00:22:06,524
i.e., that higher accuracy,

478
00:22:06,525 --> 00:22:08,527
it will run slower.

479
00:22:08,527 --> 00:22:09,761
So on my to-do,

480
00:22:09,761 --> 00:22:11,129
I'm actually gonna redo

481
00:22:11,129 --> 00:22:13,998
some of the Assimilate
functions in Lua.

482
00:22:13,999 --> 00:22:16,368
There's an inline Lua
function for Python

483
00:22:16,368 --> 00:22:20,572
that's really nice for
speeding up Python, side trick.

484
00:22:20,572 --> 00:22:22,707
But I didn't get
that done in time

485
00:22:22,708 --> 00:22:24,309
for the event here.

486
00:22:25,510 --> 00:22:28,714
So that will come in the
not too distant future.

487
00:22:28,714 --> 00:22:31,450
Another big gotcha is that

488
00:22:31,450 --> 00:22:33,452
Bro headers, by default,

489
00:22:35,721 --> 00:22:38,390
and I ran into Seth and
a bunch of the Bro folks

490
00:22:38,390 --> 00:22:39,891
out at RSA this year.

491
00:22:39,891 --> 00:22:42,961
And I gave them crap about
not giving me an option

492
00:22:42,961 --> 00:22:46,031
natively in Bro to turn
off header normalization.

493
00:22:46,031 --> 00:22:47,198
So Bro, today,

494
00:22:49,067 --> 00:22:51,636
when it takes all the headers,

495
00:22:51,636 --> 00:22:54,973
it upper cases all of
the headers themselves.

496
00:22:54,973 --> 00:22:58,610
That actually dramatically
reduces your accuracy.

497
00:22:58,610 --> 00:23:00,779
My personal copy
of Bro that I used

498
00:23:00,779 --> 00:23:02,280
for actually training,

499
00:23:02,280 --> 00:23:05,183
I modified the Bro source
code and recompiled it

500
00:23:05,183 --> 00:23:07,953
to take off the
header up-casing.

501
00:23:08,987 --> 00:23:12,324
The accuracy
dramatically goes up.

502
00:23:12,324 --> 00:23:15,927
The reason it goes
up is because...

503
00:23:15,927 --> 00:23:18,996
The reason I love HTTP
headers for hunting

504
00:23:18,997 --> 00:23:21,400
is because in the real world,

505
00:23:22,734 --> 00:23:25,937
our developers and
our software folks,

506
00:23:25,937 --> 00:23:28,273
the RFCs for HTTP don't say,

507
00:23:29,708 --> 00:23:32,878
well this is standard
HTTP header order,

508
00:23:32,878 --> 00:23:36,982
and you're supposed to use
camel case here, whatever.

509
00:23:36,982 --> 00:23:39,451
None of that is specified.

510
00:23:39,451 --> 00:23:42,254
But, most legitimate software

511
00:23:42,254 --> 00:23:45,389
is using either the
Windows libraries

512
00:23:45,390 --> 00:23:47,692
to generate their HTTP,

513
00:23:47,692 --> 00:23:48,827
the MAC libraries,

514
00:23:48,827 --> 00:23:50,462
or the Linux libraries.

515
00:23:50,462 --> 00:23:54,666
And those libraries absolutely
do have conventions.

516
00:23:54,666 --> 00:23:57,436
They have just kind
of standardizations.

517
00:23:57,436 --> 00:24:01,273
And so, the bad guys
don't know what those are,

518
00:24:02,908 --> 00:24:04,109
for the most part.

519
00:24:04,109 --> 00:24:05,644
I'm sure there's some
bad guys out there

520
00:24:05,644 --> 00:24:08,013
that are smart enough to
have cross-referenced that.

521
00:24:08,013 --> 00:24:09,981
But most of them don't.

522
00:24:09,981 --> 00:24:12,751
And so they'll make
little, tiny typos,

523
00:24:12,751 --> 00:24:16,087
and little tiny errors
in their implementation,

524
00:24:16,087 --> 00:24:18,557
'cause they're hand
rolling their comms.

525
00:24:18,557 --> 00:24:19,958
They're trying to
make it look like

526
00:24:19,958 --> 00:24:21,893
our legitimate HTTP.

527
00:24:21,893 --> 00:24:23,528
But because they're
hand rolling it,

528
00:24:23,528 --> 00:24:25,831
they'll make little
nuanced mistakes.

529
00:24:25,831 --> 00:24:28,033
And that's where
your differentiation.

530
00:24:28,033 --> 00:24:31,969
Unfortunately, because Bro
upper cases the headers,

531
00:24:31,970 --> 00:24:35,140
we lose a lot of those nuances.

532
00:24:35,140 --> 00:24:37,509
And so, if you're
gonna do this for real,

533
00:24:37,509 --> 00:24:39,411
I highly recommend...

534
00:24:39,411 --> 00:24:42,280
Now Seth promised that
he's gonna have an option

535
00:24:42,280 --> 00:24:47,252
to command line or option to
turn off header normalization

536
00:24:47,252 --> 00:24:48,220
at some point.

537
00:24:48,220 --> 00:24:49,688
We'll see.

538
00:24:49,688 --> 00:24:53,158
In the meantime, it's just
literally one line code change

539
00:24:53,158 --> 00:24:54,592
in Bro to fix it.

540
00:24:55,994 --> 00:24:57,928
Now it does break a bunch
of other stuff in Bro,

541
00:24:57,929 --> 00:24:59,831
which is why they haven't
done it generally,

542
00:24:59,831 --> 00:25:01,399
just to be clear.

543
00:25:01,399 --> 00:25:03,334
But when you're
running Bro locally

544
00:25:03,335 --> 00:25:04,936
just to process pcaps,

545
00:25:04,936 --> 00:25:08,305
it doesn't matter if the other
stuff doesn't work right.

546
00:25:08,306 --> 00:25:10,442
And then, another thing is

547
00:25:10,442 --> 00:25:12,544
tighter scoping on those.

548
00:25:12,544 --> 00:25:15,614
So what I mean by
this is the malicious.

549
00:25:15,614 --> 00:25:18,049
So if I go out to
malware-analysis.net

550
00:25:18,049 --> 00:25:22,120
and I download some of
those fantastic pcaps,

551
00:25:22,120 --> 00:25:24,856
if you haven't
looked really closely

552
00:25:24,856 --> 00:25:26,558
at how malware operates,

553
00:25:26,558 --> 00:25:28,460
it does a lot of the same things

554
00:25:28,460 --> 00:25:30,462
that legitimate
software does, right.

555
00:25:30,462 --> 00:25:31,629
So a lot of times,

556
00:25:31,630 --> 00:25:35,033
when the malware
first goes to connect,

557
00:25:35,033 --> 00:25:36,801
it'll try to connect to Google,

558
00:25:36,801 --> 00:25:39,271
just to see if it has
internet connectivity.

559
00:25:39,271 --> 00:25:43,774
Or Microsoft's certificate
validation function in Windows

560
00:25:43,775 --> 00:25:45,877
will automatically
kick off, right.

561
00:25:45,877 --> 00:25:47,946
And so if you take the time

562
00:25:47,946 --> 00:25:51,049
to go into the Bro
header conversions

563
00:25:52,417 --> 00:25:54,718
of the malware pcaps

564
00:25:54,719 --> 00:25:57,956
and just nuke those
standard lines out,

565
00:25:57,956 --> 00:26:01,825
again, your accuracy
will go way, way up.

566
00:26:01,826 --> 00:26:03,328
Okay, so few tips.

567
00:26:04,863 --> 00:26:08,333
And then after that,
it's just literally

568
00:26:08,333 --> 00:26:09,568
a matter of running it.

569
00:26:09,568 --> 00:26:12,203
So again, the intent
here of this tool

570
00:26:12,203 --> 00:26:15,373
is just to be able to, right,

571
00:26:15,373 --> 00:26:18,109
run it and assess
your Bro files.

572
00:26:19,077 --> 00:26:20,378
Once you've got that,

573
00:26:20,378 --> 00:26:22,514
collected your pcaps,

574
00:26:22,514 --> 00:26:25,716
processed them with Bro
to get the headers out,

575
00:26:25,717 --> 00:26:27,786
use those to train your models,

576
00:26:27,786 --> 00:26:30,555
from then on, you just run it.

577
00:26:30,555 --> 00:26:32,357
And it's pretty straightforward.

578
00:26:32,357 --> 00:26:33,591
The tool supports,

579
00:26:33,592 --> 00:26:36,661
you can run it against
an individual log file,

580
00:26:36,661 --> 00:26:40,298
or you can run it against an
entire directory of log files.

581
00:26:40,298 --> 00:26:42,701
Both are supported.

582
00:26:42,701 --> 00:26:46,204
And that's what I
demoed at the beginning.

583
00:26:47,672 --> 00:26:48,840
All right, so.

584
00:26:49,808 --> 00:26:52,010
So, we run our Assimilate.

585
00:26:53,411 --> 00:26:56,681
So, I mentioned earlier
that I think this has gotten

586
00:26:56,681 --> 00:26:59,284
to the point where
this is a black box.

587
00:26:59,284 --> 00:27:00,819
And the reason I say that

588
00:27:00,819 --> 00:27:04,856
is because when you download
Assimilate from GitHub,

589
00:27:04,856 --> 00:27:06,524
what you're gonna see is

590
00:27:06,524 --> 00:27:09,494
these are not a
big program, right.

591
00:27:09,494 --> 00:27:11,463
They're very small programs.

592
00:27:11,463 --> 00:27:13,398
Indeed, the actual code

593
00:27:14,432 --> 00:27:15,266
to do the

594
00:27:17,569 --> 00:27:19,104
data science part

595
00:27:19,104 --> 00:27:20,872
is like four lines.

596
00:27:20,872 --> 00:27:25,043
Most of the actual work is
parsing the Bro log files.

597
00:27:27,679 --> 00:27:31,483
And so, ultimately, what I want
you to take away from this,

598
00:27:31,483 --> 00:27:32,716
I hope,

599
00:27:32,717 --> 00:27:34,586
is that like I said,

600
00:27:34,586 --> 00:27:37,122
because of all of the
stuff that's been done

601
00:27:37,122 --> 00:27:39,491
by some phenomenally, you know,

602
00:27:39,491 --> 00:27:42,494
people way, way smarter than me,

603
00:27:42,494 --> 00:27:46,164
that allows me to go out and
take a specific use case,

604
00:27:46,164 --> 00:27:50,769
literally Assimilate is
taking one specific use case

605
00:27:50,769 --> 00:27:54,506
of looking for particular
types of malicious activity

606
00:27:54,506 --> 00:27:56,274
in HTTP headers.

607
00:27:56,274 --> 00:27:58,642
Right, so a hunting use case,

608
00:27:58,643 --> 00:28:01,813
and turning it into a
tool that I can then use

609
00:28:01,813 --> 00:28:03,848
on an ongoing real-time basis.

610
00:28:03,848 --> 00:28:06,685
(upbeat drumming)

