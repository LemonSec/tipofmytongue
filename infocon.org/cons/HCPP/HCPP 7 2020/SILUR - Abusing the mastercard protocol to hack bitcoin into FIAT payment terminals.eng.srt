1
00:00:02,050 --> 00:00:05,359
[Applause]

2
00:00:05,359 --> 00:00:07,120
thank you very much i'm also very

3
00:00:07,120 --> 00:00:10,000
excited to be present here again to my

4
00:00:10,000 --> 00:00:12,320
favorite conference of the year

5
00:00:12,320 --> 00:00:14,400
uh and thanks for the introduction sorry

6
00:00:14,400 --> 00:00:16,560
for not being personally

7
00:00:16,560 --> 00:00:19,039
there at nepalese but yeah stateless

8
00:00:19,039 --> 00:00:20,560
people have even

9
00:00:20,560 --> 00:00:23,680
verse trevoristics or jurisdictions

10
00:00:23,680 --> 00:00:26,720
at these times than the normal people

11
00:00:26,720 --> 00:00:30,080
so uh yeah as the introduction

12
00:00:30,080 --> 00:00:32,079
said that i'm i'm a hacker and a

13
00:00:32,079 --> 00:00:33,360
cryptographer at

14
00:00:33,360 --> 00:00:36,000
various projects and companies and also

15
00:00:36,000 --> 00:00:36,880
consultant

16
00:00:36,880 --> 00:00:38,800
bounty hunter and sometimes malware

17
00:00:38,800 --> 00:00:40,640
analyst and

18
00:00:40,640 --> 00:00:43,920
this talk will be gonna abuse a little

19
00:00:43,920 --> 00:00:45,440
the the original

20
00:00:45,440 --> 00:00:48,320
non-iso version of the emv standard

21
00:00:48,320 --> 00:00:50,480
that's used on uh contactless and

22
00:00:50,480 --> 00:00:53,520
contact payments in our credit cards

23
00:00:53,520 --> 00:00:56,000
because uh as the hardware got stronger

24
00:00:56,000 --> 00:00:57,039
and stronger i

25
00:00:57,039 --> 00:01:00,239
i realized that only a handful of people

26
00:01:00,239 --> 00:01:03,280
uh maybe read the whole 700 pages

27
00:01:03,280 --> 00:01:07,040
of the emv protocol and only a handful

28
00:01:07,040 --> 00:01:09,600
like percent of that maybe liked bitcoin

29
00:01:09,600 --> 00:01:10,560
so much that they

30
00:01:10,560 --> 00:01:14,720
realized that the 144 kilobyte

31
00:01:14,720 --> 00:01:17,840
memory that these cards now have uh

32
00:01:17,840 --> 00:01:21,360
actually supports storing mutex utxos

33
00:01:21,360 --> 00:01:23,200
and we're gonna talk about the

34
00:01:23,200 --> 00:01:25,040
cryptographic features of these new

35
00:01:25,040 --> 00:01:26,400
cards uh

36
00:01:26,400 --> 00:01:28,240
which eventually led me to the

37
00:01:28,240 --> 00:01:30,079
realization that maybe we can sign

38
00:01:30,079 --> 00:01:32,320
bitcoin transactions on credit card

39
00:01:32,320 --> 00:01:33,360
hardware

40
00:01:33,360 --> 00:01:36,479
so on the agenda we're gonna recap the

41
00:01:36,479 --> 00:01:37,520
problem here why

42
00:01:37,520 --> 00:01:40,560
why i think this is still something

43
00:01:40,560 --> 00:01:43,040
worthy of research then some hardware

44
00:01:43,040 --> 00:01:44,560
warrants we have seen

45
00:01:44,560 --> 00:01:47,680
uh excellent talks here with elena for

46
00:01:47,680 --> 00:01:48,640
treasure

47
00:01:48,640 --> 00:01:50,560
with more it's on build your own

48
00:01:50,560 --> 00:01:52,159
hardware bullet and stuff and

49
00:01:52,159 --> 00:01:54,799
and gonna have a little detour on how to

50
00:01:54,799 --> 00:01:56,159
make the cheapest

51
00:01:56,159 --> 00:01:58,479
i think hardware wallet out of uh credit

52
00:01:58,479 --> 00:01:59,280
card

53
00:01:59,280 --> 00:02:02,719
hardware than emv history uh

54
00:02:02,719 --> 00:02:06,799
like a tldr version of the protocol so i

55
00:02:06,799 --> 00:02:10,080
i tried to distill the 700 pages as much

56
00:02:10,080 --> 00:02:11,440
as i could

57
00:02:11,440 --> 00:02:14,640
uh then we are gonna clarify the attack

58
00:02:14,640 --> 00:02:15,599
assumptions

59
00:02:15,599 --> 00:02:19,680
uh or or the misuse assumptions as if

60
00:02:19,680 --> 00:02:22,319
this is originally not not an attack

61
00:02:22,319 --> 00:02:24,879
uh this is a the feature of an emv an

62
00:02:24,879 --> 00:02:27,040
overlooked feature so we are not going

63
00:02:27,040 --> 00:02:29,599
to hack into mastercard servers or

64
00:02:29,599 --> 00:02:32,720
or something and we are gonna go into

65
00:02:32,720 --> 00:02:35,519
detail how to abuse the protocol for btc

66
00:02:35,519 --> 00:02:38,640
so problem formalization still

67
00:02:38,640 --> 00:02:40,560
only one percent of the population owns

68
00:02:40,560 --> 00:02:42,319
coins this is

69
00:02:42,319 --> 00:02:45,040
a long going subject even on this

70
00:02:45,040 --> 00:02:47,040
conference like people trying to go

71
00:02:47,040 --> 00:02:51,440
into adaptation and stuff and

72
00:02:51,440 --> 00:02:53,840
this is a my personal view on that is

73
00:02:53,840 --> 00:02:54,640
that

74
00:02:54,640 --> 00:02:57,200
most end users can't absorb new

75
00:02:57,200 --> 00:02:58,959
technology that fast

76
00:02:58,959 --> 00:03:02,080
and uh a misconception is

77
00:03:02,080 --> 00:03:05,280
is that btc bitcoins and crypto you

78
00:03:05,280 --> 00:03:07,599
user experience is bad and that's why

79
00:03:07,599 --> 00:03:09,280
it's happening but

80
00:03:09,280 --> 00:03:12,080
in my experience as as most likely i

81
00:03:12,080 --> 00:03:12,879
made my

82
00:03:12,879 --> 00:03:16,159
first online money transfer on bitcoin

83
00:03:16,159 --> 00:03:17,120
and that

84
00:03:17,120 --> 00:03:20,959
i transacted fiat only after uh btc ux

85
00:03:20,959 --> 00:03:22,959
is just fine it's great uh

86
00:03:22,959 --> 00:03:24,879
decentralized thinking is the hard part

87
00:03:24,879 --> 00:03:27,920
that that and that's not part of ux

88
00:03:27,920 --> 00:03:31,360
uh and usually these times generally in

89
00:03:31,360 --> 00:03:33,280
software and the technology backward

90
00:03:33,280 --> 00:03:34,799
compatibility design

91
00:03:34,799 --> 00:03:37,360
helps but we can't really do that here

92
00:03:37,360 --> 00:03:39,360
with crypto and we saw that

93
00:03:39,360 --> 00:03:42,640
many many trials uh and we're gonna have

94
00:03:42,640 --> 00:03:43,840
examples on the net

95
00:03:43,840 --> 00:03:45,519
next slide on that but crypto is just

96
00:03:45,519 --> 00:03:47,519
super hard to make backward compatible

97
00:03:47,519 --> 00:03:50,080
because it's so normal and so new

98
00:03:50,080 --> 00:03:52,640
so not because not so clever place this

99
00:03:52,640 --> 00:03:53,120
is

100
00:03:53,120 --> 00:03:56,720
a very biased version of my views

101
00:03:56,720 --> 00:03:59,680
stable coins in my opinion absolutely

102
00:03:59,680 --> 00:04:01,680
out of the question to make backward

103
00:04:01,680 --> 00:04:02,640
compatible

104
00:04:02,640 --> 00:04:06,400
crypto views also app poly banks like

105
00:04:06,400 --> 00:04:07,439
revolut

106
00:04:07,439 --> 00:04:10,480
supporting crypto where you can only buy

107
00:04:10,480 --> 00:04:12,720
basically the exchange rate and you

108
00:04:12,720 --> 00:04:15,519
don't have access to your case and such

109
00:04:15,519 --> 00:04:19,918
is also just putting dirt under the rug

110
00:04:19,918 --> 00:04:23,520
there are visa cards uh supporting

111
00:04:23,520 --> 00:04:25,759
bitcoin in a way that

112
00:04:25,759 --> 00:04:28,800
uh real time you spend fiat money from a

113
00:04:28,800 --> 00:04:30,320
pool or from the company

114
00:04:30,320 --> 00:04:32,560
like for i think uh the old version of

115
00:04:32,560 --> 00:04:34,960
monaco now called crypto.com

116
00:04:34,960 --> 00:04:38,400
worked like this uh so you spent it

117
00:04:38,400 --> 00:04:39,280
directly

118
00:04:39,280 --> 00:04:42,800
at the point of the cell

119
00:04:42,800 --> 00:04:44,560
fiat from their pool and after the

120
00:04:44,560 --> 00:04:46,800
settlement interval which happens

121
00:04:46,800 --> 00:04:49,919
between the acquirer and the card issuer

122
00:04:49,919 --> 00:04:53,040
uh you actually spend uh your money

123
00:04:53,040 --> 00:04:55,199
and only coin desk as far as i know

124
00:04:55,199 --> 00:04:57,440
today only quality desk has a version of

125
00:04:57,440 --> 00:04:59,759
the same stuff but they exchange your

126
00:04:59,759 --> 00:05:01,360
crypto real time not after the

127
00:05:01,360 --> 00:05:02,800
settlement

128
00:05:02,800 --> 00:05:06,880
uh interval so there are more clever

129
00:05:06,880 --> 00:05:09,919
place to make it more uh make crypto

130
00:05:09,919 --> 00:05:11,280
more accessible like

131
00:05:11,280 --> 00:05:14,080
hardware roulette uh like trezor and

132
00:05:14,080 --> 00:05:15,120
ledger

133
00:05:15,120 --> 00:05:17,199
uh they're super good on the end user

134
00:05:17,199 --> 00:05:19,520
level uh for adaptation

135
00:05:19,520 --> 00:05:23,199
but less on the uh on the

136
00:05:23,199 --> 00:05:25,120
acquirer level because they need

137
00:05:25,120 --> 00:05:26,960
separate apps

138
00:05:26,960 --> 00:05:29,440
apis integration and we know that

139
00:05:29,440 --> 00:05:31,120
commerce and e-commerce can't really

140
00:05:31,120 --> 00:05:31,520
keep

141
00:05:31,520 --> 00:05:34,320
up with these stuffs i mean uh when i

142
00:05:34,320 --> 00:05:35,440
tried this

143
00:05:35,440 --> 00:05:38,720
attack with my credit cards i had to

144
00:05:38,720 --> 00:05:39,600
realize that

145
00:05:39,600 --> 00:05:42,960
my bank still uses embedded soap inside

146
00:05:42,960 --> 00:05:43,919
soap

147
00:05:43,919 --> 00:05:47,280
so xml everywhere and

148
00:05:47,280 --> 00:05:51,360
and and such so

149
00:05:51,360 --> 00:05:53,600
and also some hardware hacks have been

150
00:05:53,600 --> 00:05:55,600
introduced uh recently i think

151
00:05:55,600 --> 00:05:58,880
uh this year uh has been one ledger uh

152
00:05:58,880 --> 00:06:00,960
site channel attack and also last year

153
00:06:00,960 --> 00:06:02,319
there was another

154
00:06:02,319 --> 00:06:06,160
uh century private key uh reading

155
00:06:06,160 --> 00:06:10,319
with lasers uh and exotic operations

156
00:06:10,319 --> 00:06:12,319
on treasure and ledgers are not really

157
00:06:12,319 --> 00:06:14,960
possible so no moneros tells the dresses

158
00:06:14,960 --> 00:06:15,919
and bullet

159
00:06:15,919 --> 00:06:18,639
proof uh bulletproof sense touch and

160
00:06:18,639 --> 00:06:20,400
exotic cryptographic

161
00:06:20,400 --> 00:06:24,639
place so when i was looking at okay what

162
00:06:24,639 --> 00:06:26,880
to use what's the hardware i

163
00:06:26,880 --> 00:06:30,319
um i didn't see a practical attack for a

164
00:06:30,319 --> 00:06:32,080
while and

165
00:06:32,080 --> 00:06:35,199
last time i i saw practical

166
00:06:35,199 --> 00:06:37,600
hardware level attacks on credit cards

167
00:06:37,600 --> 00:06:39,120
was max butler

168
00:06:39,120 --> 00:06:42,080
days uh when i was still a script kid

169
00:06:42,080 --> 00:06:43,680
with hacking so i didn't have a chance

170
00:06:43,680 --> 00:06:44,240
to

171
00:06:44,240 --> 00:06:47,080
actually hack something but reading the

172
00:06:47,080 --> 00:06:49,120
specifications of these nxp

173
00:06:49,120 --> 00:06:52,560
gco cards that we our banks use

174
00:06:52,560 --> 00:06:55,919
they're actually super strong uh

175
00:06:55,919 --> 00:06:57,759
i don't so i don't know any credit card

176
00:06:57,759 --> 00:07:00,000
hacks on hardware level recently please

177
00:07:00,000 --> 00:07:02,000
comment or share with me these slides

178
00:07:02,000 --> 00:07:03,120
are available

179
00:07:03,120 --> 00:07:05,120
actually online on hack md and maybe

180
00:07:05,120 --> 00:07:06,800
edit it if you know

181
00:07:06,800 --> 00:07:10,160
uh any that i don't backward compatible

182
00:07:10,160 --> 00:07:12,400
uh i mean this on on a mental level

183
00:07:12,400 --> 00:07:13,520
because most people

184
00:07:13,520 --> 00:07:17,199
uh intuitively know or already know how

185
00:07:17,199 --> 00:07:18,479
to use these

186
00:07:18,479 --> 00:07:21,120
uh because uh two and a half billion

187
00:07:21,120 --> 00:07:23,039
cards are out there as of today

188
00:07:23,039 --> 00:07:25,039
excluding the united states

189
00:07:25,039 --> 00:07:27,440
uh that's a lot this is actually how i

190
00:07:27,440 --> 00:07:29,599
realized this is the number why oracle

191
00:07:29,599 --> 00:07:30,000
claims

192
00:07:30,000 --> 00:07:33,039
three billion uh devices run

193
00:07:33,039 --> 00:07:35,680
java out in the world i was wondering

194
00:07:35,680 --> 00:07:37,440
why they claimed that but after reading

195
00:07:37,440 --> 00:07:38,560
these statistics

196
00:07:38,560 --> 00:07:41,440
i think this is what they mean because

197
00:07:41,440 --> 00:07:42,720
these cards also run

198
00:07:42,720 --> 00:07:46,560
a super restricted dump version of java

199
00:07:46,560 --> 00:07:49,919
in them they are super affordable

200
00:07:49,919 --> 00:07:52,479
like the most uh the card with the

201
00:07:52,479 --> 00:07:54,160
highest memory cost like

202
00:07:54,160 --> 00:07:57,440
10 or 15 euros and the ones uh

203
00:07:57,440 --> 00:08:00,400
i i wanted to get to testing it costed

204
00:08:00,400 --> 00:08:01,680
four euros

205
00:08:01,680 --> 00:08:03,599
uh so compared to ledger and friends

206
00:08:03,599 --> 00:08:05,360
that's very affordable

207
00:08:05,360 --> 00:08:08,560
and they support very generic levels of

208
00:08:08,560 --> 00:08:10,160
cryptography so

209
00:08:10,160 --> 00:08:13,440
uh yeah they have uh hash uh hash

210
00:08:13,440 --> 00:08:14,720
accelerators for

211
00:08:14,720 --> 00:08:17,840
s for sha triple devs aes

212
00:08:17,840 --> 00:08:20,400
but the most important feature for me is

213
00:08:20,400 --> 00:08:20,879
that

214
00:08:20,879 --> 00:08:24,400
uh they have elliptic curve arithmetics

215
00:08:24,400 --> 00:08:25,599
generalized

216
00:08:25,599 --> 00:08:28,800
to finite fields which means that with

217
00:08:28,800 --> 00:08:31,360
with uh using a clever transformation

218
00:08:31,360 --> 00:08:32,000
for the

219
00:08:32,000 --> 00:08:34,479
twisted edwards form to the mod uh to

220
00:08:34,479 --> 00:08:35,279
the bios

221
00:08:35,279 --> 00:08:38,640
fires transform we can also support

222
00:08:38,640 --> 00:08:39,719
curve

223
00:08:39,719 --> 00:08:42,640
25519 on these cards

224
00:08:42,640 --> 00:08:46,080
and make ecd assay signatures on that

225
00:08:46,080 --> 00:08:48,399
but if we can support this arithmetics

226
00:08:48,399 --> 00:08:50,560
and and we have access to a random

227
00:08:50,560 --> 00:08:53,200
number generator and hashes then we can

228
00:08:53,200 --> 00:08:55,519
also do stats address generations and

229
00:08:55,519 --> 00:08:57,760
maybe even bulletproofs on the last part

230
00:08:57,760 --> 00:08:59,519
i'm kinda uncertain

231
00:08:59,519 --> 00:09:02,000
i this was just a hunch but maybe even

232
00:09:02,000 --> 00:09:02,800
bulletproofs

233
00:09:02,800 --> 00:09:07,440
are possible uh with the generalized ec

234
00:09:07,440 --> 00:09:09,680
so the requirements of the of the

235
00:09:09,680 --> 00:09:11,600
abusive protocol i wanted

236
00:09:11,600 --> 00:09:14,080
back when i started this project early

237
00:09:14,080 --> 00:09:15,519
early this year

238
00:09:15,519 --> 00:09:17,279
is that i wanted to use standard

239
00:09:17,279 --> 00:09:20,240
commercially available jcop cards

240
00:09:20,240 --> 00:09:23,440
um that's that was a hard question

241
00:09:23,440 --> 00:09:25,440
because commercially available

242
00:09:25,440 --> 00:09:28,560
uh as i had to realize it's not that

243
00:09:28,560 --> 00:09:30,320
easy because first

244
00:09:30,320 --> 00:09:33,680
uh cards with this high level or this

245
00:09:33,680 --> 00:09:34,480
much

246
00:09:34,480 --> 00:09:37,839
flexibility of programmable level people

247
00:09:37,839 --> 00:09:40,800
you can buy these from are really really

248
00:09:40,800 --> 00:09:42,720
curious about what you want to use it

249
00:09:42,720 --> 00:09:43,120
for

250
00:09:43,120 --> 00:09:45,040
you have to fill a lot of paper and it's

251
00:09:45,040 --> 00:09:47,200
not like you just go to a web shop and

252
00:09:47,200 --> 00:09:51,440
buy some uh their ec arithmetic jcop

253
00:09:51,440 --> 00:09:53,200
cards they want to do

254
00:09:53,200 --> 00:09:55,839
their kyc on people and actually i

255
00:09:55,839 --> 00:09:56,560
couldn't get

256
00:09:56,560 --> 00:09:58,800
those cards with my consulting company

257
00:09:58,800 --> 00:10:00,560
so they even looked into that

258
00:10:00,560 --> 00:10:03,680
a consulting company uh with this

259
00:10:03,680 --> 00:10:05,680
profile can't have these cars so they

260
00:10:05,680 --> 00:10:06,240
simply

261
00:10:06,240 --> 00:10:09,839
rejected my payment on that so another

262
00:10:09,839 --> 00:10:11,760
requirement is that the private key

263
00:10:11,760 --> 00:10:13,760
stays on the cards because

264
00:10:13,760 --> 00:10:15,680
this this idea couldn't compete with

265
00:10:15,680 --> 00:10:17,519
monaco and all the people who

266
00:10:17,519 --> 00:10:19,279
already issued visa supported

267
00:10:19,279 --> 00:10:21,279
cryptocurrency cards

268
00:10:21,279 --> 00:10:23,519
because they are custodial and that's if

269
00:10:23,519 --> 00:10:24,880
it's not your keys

270
00:10:24,880 --> 00:10:26,800
that's not your coins everybody knows

271
00:10:26,800 --> 00:10:29,839
that third requirement is the reader

272
00:10:29,839 --> 00:10:32,000
terminal is unmodified so i don't want

273
00:10:32,000 --> 00:10:34,240
to build my own readers my

274
00:10:34,240 --> 00:10:36,640
mobile apps on android for accepting

275
00:10:36,640 --> 00:10:39,040
because deploying those to

276
00:10:39,040 --> 00:10:42,720
acquires and shops is just too tedious

277
00:10:42,720 --> 00:10:46,399
too legally binding and and

278
00:10:46,399 --> 00:10:49,760
and most likely impossible

279
00:10:49,760 --> 00:10:53,440
on a large scale uh another part is that

280
00:10:53,440 --> 00:10:54,880
the technological

281
00:10:54,880 --> 00:10:58,000
uh part which i'm involved in does not

282
00:10:58,000 --> 00:10:58,480
involve

283
00:10:58,480 --> 00:11:01,200
any fiat currency in the process now i

284
00:11:01,200 --> 00:11:02,320
have to put

285
00:11:02,320 --> 00:11:05,279
uh put here that the legal part might do

286
00:11:05,279 --> 00:11:06,560
because we're gonna see that

287
00:11:06,560 --> 00:11:08,560
there are certificate rest of chains

288
00:11:08,560 --> 00:11:09,600
involved

289
00:11:09,600 --> 00:11:11,600
and i still don't know what it takes

290
00:11:11,600 --> 00:11:13,120
i've tried to go and

291
00:11:13,120 --> 00:11:15,839
and i've already started to talk on how

292
00:11:15,839 --> 00:11:16,160
uh

293
00:11:16,160 --> 00:11:18,320
to formally get that but i have the

294
00:11:18,320 --> 00:11:19,200
feeling that

295
00:11:19,200 --> 00:11:22,560
i'm not gonna get uh uh certif assigned

296
00:11:22,560 --> 00:11:24,640
by a certificate authority with a

297
00:11:24,640 --> 00:11:26,560
necessary due diligence

298
00:11:26,560 --> 00:11:29,760
meaning the time not to buy another bank

299
00:11:29,760 --> 00:11:33,120
so for testing i used

300
00:11:33,120 --> 00:11:35,440
the smart card reader i received with my

301
00:11:35,440 --> 00:11:37,839
estonian id card and two

302
00:11:37,839 --> 00:11:40,640
really old script cards from which the

303
00:11:40,640 --> 00:11:41,440
upper one

304
00:11:41,440 --> 00:11:46,320
is unusable i i broke it with some apdu

305
00:11:46,320 --> 00:11:50,160
command and it doesn't want to receive

306
00:11:50,160 --> 00:11:53,279
anything else the bottom one

307
00:11:53,279 --> 00:11:58,320
is not bricked but the atc is broken so

308
00:11:58,320 --> 00:12:01,839
also not gonna be useful for payments

309
00:12:01,839 --> 00:12:05,120
uh even though it's already expired so

310
00:12:05,120 --> 00:12:08,399
the htc is not not the only

311
00:12:08,399 --> 00:12:12,320
matter of concern here so emv let's

312
00:12:12,320 --> 00:12:14,079
start with the protocol with some

313
00:12:14,079 --> 00:12:15,040
history before

314
00:12:15,040 --> 00:12:18,639
jumping into the specifications so

315
00:12:18,639 --> 00:12:23,120
after the the huge max butler iceman

316
00:12:23,120 --> 00:12:25,760
script and cortic forums golden age of

317
00:12:25,760 --> 00:12:27,519
karting hacks

318
00:12:27,519 --> 00:12:32,000
emv came into play with collaboration of

319
00:12:32,000 --> 00:12:34,399
european mastercard and visa to make a

320
00:12:34,399 --> 00:12:35,760
standardized and

321
00:12:35,760 --> 00:12:40,000
flexible and uh i have to stress this it

322
00:12:40,000 --> 00:12:41,839
became so flexible that now

323
00:12:41,839 --> 00:12:44,399
we can assign bitcoin with this so

324
00:12:44,399 --> 00:12:46,399
flexible secure protocol

325
00:12:46,399 --> 00:12:49,600
for payments also communication channel

326
00:12:49,600 --> 00:12:50,959
agnostic because we

327
00:12:50,959 --> 00:12:53,440
see that uh it doesn't matter whether

328
00:12:53,440 --> 00:12:54,240
it's a

329
00:12:54,240 --> 00:12:57,200
you put it in a physical reader or just

330
00:12:57,200 --> 00:12:59,600
nfc and paypass contactless payments or

331
00:12:59,600 --> 00:13:01,279
postcard emulation

332
00:13:01,279 --> 00:13:05,200
uh if you uh put it on your phone

333
00:13:05,200 --> 00:13:08,079
and and when he and we came into play we

334
00:13:08,079 --> 00:13:08,639
see that

335
00:13:08,639 --> 00:13:10,880
the golden age of credit card hacking is

336
00:13:10,880 --> 00:13:13,600
over unfortunately i haven't been able

337
00:13:13,600 --> 00:13:14,079
to

338
00:13:14,079 --> 00:13:16,639
be active there and carding came to a

339
00:13:16,639 --> 00:13:17,920
halt or a

340
00:13:17,920 --> 00:13:21,279
really really slow down and 99

341
00:13:21,279 --> 00:13:24,959
uh this is my own statistics but uh

342
00:13:24,959 --> 00:13:27,760
uh i think it's not really inaccurate so

343
00:13:27,760 --> 00:13:30,160
99 percent is about social engineering

344
00:13:30,160 --> 00:13:31,839
and clever cashing out

345
00:13:31,839 --> 00:13:35,040
through amazon gift cards and stuff

346
00:13:35,040 --> 00:13:39,040
so uh tldrv

347
00:13:39,040 --> 00:13:41,600
the the really important field for us

348
00:13:41,600 --> 00:13:43,680
because it has like i don't know a bunch

349
00:13:43,680 --> 00:13:44,399
of bunch of

350
00:13:44,399 --> 00:13:47,040
abbreviations that you have to dig out

351
00:13:47,040 --> 00:13:47,760
from the

352
00:13:47,760 --> 00:13:50,720
700 pages of specifications these are

353
00:13:50,720 --> 00:13:52,320
the most important ones

354
00:13:52,320 --> 00:13:54,240
as a programmer at this hacker you have

355
00:13:54,240 --> 00:13:56,000
to take care of

356
00:13:56,000 --> 00:13:58,240
uh the the card and the protocol uses

357
00:13:58,240 --> 00:14:01,040
asm.1 binary encoding rules

358
00:14:01,040 --> 00:14:04,399
format there is a an atc

359
00:14:04,399 --> 00:14:07,040
the transaction counter which is gonna

360
00:14:07,040 --> 00:14:08,480
be incremented that

361
00:14:08,480 --> 00:14:11,120
not really not only the critical parts

362
00:14:11,120 --> 00:14:12,639
or even reading

363
00:14:12,639 --> 00:14:15,440
some ad specifics files out from the

364
00:14:15,440 --> 00:14:16,240
card

365
00:14:16,240 --> 00:14:18,480
he's gonna increment this atc counter

366
00:14:18,480 --> 00:14:21,279
and if it's not aligned with the bank

367
00:14:21,279 --> 00:14:24,800
uh your your card's gonna be declined so

368
00:14:24,800 --> 00:14:27,519
when you are testing this idea really

369
00:14:27,519 --> 00:14:29,279
use some expired card because

370
00:14:29,279 --> 00:14:31,680
if you read into the master card up with

371
00:14:31,680 --> 00:14:33,600
get processing options as we're gonna

372
00:14:33,600 --> 00:14:34,160
see

373
00:14:34,160 --> 00:14:37,440
you're gonna increment this etc uh atc

374
00:14:37,440 --> 00:14:40,480
uh and basically your card is gonna be

375
00:14:40,480 --> 00:14:41,760
unusable

376
00:14:41,760 --> 00:14:45,279
you have application ids or

377
00:14:45,279 --> 00:14:48,160
in theory you have multiple ids but in

378
00:14:48,160 --> 00:14:50,160
practice you only have one

379
00:14:50,160 --> 00:14:53,360
which consists of an r id which you get

380
00:14:53,360 --> 00:14:55,120
which you got from the certificate

381
00:14:55,120 --> 00:14:57,600
authority or the payment

382
00:14:57,600 --> 00:15:01,040
process or who signs uh your part of the

383
00:15:01,040 --> 00:15:02,079
case and the

384
00:15:02,079 --> 00:15:04,639
pix which is uh your part to

385
00:15:04,639 --> 00:15:06,160
differentiate uh

386
00:15:06,160 --> 00:15:09,199
your uh your different apps and

387
00:15:09,199 --> 00:15:11,680
yeah your different apps from the card

388
00:15:11,680 --> 00:15:13,199
you have pd

389
00:15:13,199 --> 00:15:16,000
uol which is the processing options data

390
00:15:16,000 --> 00:15:18,079
list is basically a list of what

391
00:15:18,079 --> 00:15:21,120
stuff my card supports the reader gonna

392
00:15:21,120 --> 00:15:22,399
ask it from you

393
00:15:22,399 --> 00:15:25,360
and you this consists of like i support

394
00:15:25,360 --> 00:15:26,639
online verification

395
00:15:26,639 --> 00:15:31,120
with uh pins and blocking if

396
00:15:31,120 --> 00:15:34,560
the pin is entered wrong wrong time

397
00:15:34,560 --> 00:15:37,519
three times and such so these these are

398
00:15:37,519 --> 00:15:38,560
uh

399
00:15:38,560 --> 00:15:42,399
supported uh functionality

400
00:15:42,399 --> 00:15:45,680
of the card and most importantly the tbr

401
00:15:45,680 --> 00:15:47,519
which is the transaction verification

402
00:15:47,519 --> 00:15:49,279
results it's an 8-bit

403
00:15:49,279 --> 00:15:50,880
result on the transaction which you

404
00:15:50,880 --> 00:15:52,880
actually even though something happens

405
00:15:52,880 --> 00:15:54,480
at the very end of the transactional

406
00:15:54,480 --> 00:15:56,639
lifecycle you will not gonna see because

407
00:15:56,639 --> 00:16:00,079
uh you're not gonna see which is very

408
00:16:00,079 --> 00:16:03,759
uh clever because we can do uh

409
00:16:03,759 --> 00:16:06,320
sideshow analyzes based on time and such

410
00:16:06,320 --> 00:16:06,880
so

411
00:16:06,880 --> 00:16:09,120
we won't be able to extract the

412
00:16:09,120 --> 00:16:10,320
information where

413
00:16:10,320 --> 00:16:13,360
the forgery or something failed

414
00:16:13,360 --> 00:16:16,000
because the errors are gonna be just uh

415
00:16:16,000 --> 00:16:16,399
or

416
00:16:16,399 --> 00:16:18,639
together maxed together into this tvr

417
00:16:18,639 --> 00:16:20,800
and only at the very end you're gonna

418
00:16:20,800 --> 00:16:24,079
know that if many of these masks are one

419
00:16:24,079 --> 00:16:26,959
that then your transactions are gonna be

420
00:16:26,959 --> 00:16:29,120
rejected

421
00:16:29,120 --> 00:16:31,279
so communication between the terminal

422
00:16:31,279 --> 00:16:35,199
and the card uses standard t0 type apdu

423
00:16:35,199 --> 00:16:37,759
format which consists of a class usually

424
00:16:37,759 --> 00:16:38,240
zero

425
00:16:38,240 --> 00:16:40,399
as hardware occurs in the audience

426
00:16:40,399 --> 00:16:41,440
already no

427
00:16:41,440 --> 00:16:44,880
instruction a4 as you all know parameter

428
00:16:44,880 --> 00:16:46,639
one parameter two

429
00:16:46,639 --> 00:16:50,880
uh parameter three uh as in the epdu

430
00:16:50,880 --> 00:16:53,600
specification it can be a p3 but we all

431
00:16:53,600 --> 00:16:55,360
know that in p0

432
00:16:55,360 --> 00:16:58,399
and emv also this

433
00:16:58,399 --> 00:17:00,720
is this indicates how large of a

434
00:17:00,720 --> 00:17:02,000
response i expect

435
00:17:02,000 --> 00:17:04,559
backed from the terminal so i send down

436
00:17:04,559 --> 00:17:06,079
the class instruction

437
00:17:06,079 --> 00:17:08,559
parameters and p3 indicates that this is

438
00:17:08,559 --> 00:17:09,359
the

439
00:17:09,359 --> 00:17:12,559
maximum amount of data a payload can

440
00:17:12,559 --> 00:17:13,039
consist

441
00:17:13,039 --> 00:17:15,919
as a response from me so transaction

442
00:17:15,919 --> 00:17:17,599
life cycle

443
00:17:17,599 --> 00:17:21,199
step one is select application

444
00:17:21,199 --> 00:17:24,240
this was the first surprise for me

445
00:17:24,240 --> 00:17:27,760
uh and i had to put my head around is

446
00:17:27,760 --> 00:17:29,520
that if this card supports multiple

447
00:17:29,520 --> 00:17:30,720
applications

448
00:17:30,720 --> 00:17:33,440
why every one of them only has one so

449
00:17:33,440 --> 00:17:35,200
this select application is involved in

450
00:17:35,200 --> 00:17:36,960
the transaction life cycle but

451
00:17:36,960 --> 00:17:40,160
if it only has one up then uh what's

452
00:17:40,160 --> 00:17:42,960
what's good for it why can't i have a

453
00:17:42,960 --> 00:17:44,960
single credit card for all my bank

454
00:17:44,960 --> 00:17:45,600
accounts and

455
00:17:45,600 --> 00:17:47,919
applications if you if the terminal can

456
00:17:47,919 --> 00:17:48,720
select

457
00:17:48,720 --> 00:17:51,600
or i can select one and it's most likely

458
00:17:51,600 --> 00:17:52,240
because of

459
00:17:52,240 --> 00:17:55,520
accountability so i assume they

460
00:17:55,520 --> 00:17:58,400
couldn't resolve if i lose my card my

461
00:17:58,400 --> 00:18:00,000
credit card done which one

462
00:18:00,000 --> 00:18:02,160
which bank do i have to call for a

463
00:18:02,160 --> 00:18:04,000
replacement if i had all my bank

464
00:18:04,000 --> 00:18:05,440
accounts on them

465
00:18:05,440 --> 00:18:08,559
so inside these apps you have so called

466
00:18:08,559 --> 00:18:09,840
afls

467
00:18:09,840 --> 00:18:13,200
application file locators which

468
00:18:13,200 --> 00:18:15,679
our application specific files uh

469
00:18:15,679 --> 00:18:16,480
between these

470
00:18:16,480 --> 00:18:18,559
little apps so first step is that we

471
00:18:18,559 --> 00:18:20,160
select these

472
00:18:20,160 --> 00:18:22,880
this is this you can do uh do freely

473
00:18:22,880 --> 00:18:25,039
without breaking the card you can use

474
00:18:25,039 --> 00:18:28,480
emv tool uh a python uh

475
00:18:28,480 --> 00:18:32,160
script on github to to read these or

476
00:18:32,160 --> 00:18:35,600
card peak uh that's a more advanced gui

477
00:18:35,600 --> 00:18:37,360
applications to browse

478
00:18:37,360 --> 00:18:39,600
uh cards that i can recommend and i also

479
00:18:39,600 --> 00:18:40,559
use for

480
00:18:40,559 --> 00:18:43,360
for this presentation second step get

481
00:18:43,360 --> 00:18:46,000
processing option which is gonna

482
00:18:46,000 --> 00:18:48,720
get the pdul list from our card into the

483
00:18:48,720 --> 00:18:49,679
terminal

484
00:18:49,679 --> 00:18:52,320
now pay attention this is the first step

485
00:18:52,320 --> 00:18:53,280
where you can

486
00:18:53,280 --> 00:18:56,640
you will increment the atc and

487
00:18:56,640 --> 00:18:58,960
uh from this that that card is for

488
00:18:58,960 --> 00:19:00,880
hacking only never enter it

489
00:19:00,880 --> 00:19:03,679
into a permanent because that's gonna

490
00:19:03,679 --> 00:19:06,000
raise some red flags at your bank

491
00:19:06,000 --> 00:19:10,160
uh for fraud so get processing captions

492
00:19:10,160 --> 00:19:12,720
um the terminal and the cart basically

493
00:19:12,720 --> 00:19:13,600
agree on

494
00:19:13,600 --> 00:19:17,120
app versions protocol versions uh

495
00:19:17,120 --> 00:19:19,919
and such for these and verification

496
00:19:19,919 --> 00:19:21,440
options because you have

497
00:19:21,440 --> 00:19:23,280
various levels of online and offline

498
00:19:23,280 --> 00:19:25,760
verifications and the cart have to

499
00:19:25,760 --> 00:19:29,120
send which kinds are supported so

500
00:19:29,120 --> 00:19:31,360
third step read application data from

501
00:19:31,360 --> 00:19:34,080
the selected app

502
00:19:34,080 --> 00:19:36,320
the second surprise in this protocol is

503
00:19:36,320 --> 00:19:38,320
that you can't specify which files

504
00:19:38,320 --> 00:19:41,280
you want to read which makes the afl the

505
00:19:41,280 --> 00:19:42,480
application file

506
00:19:42,480 --> 00:19:45,039
locator feels kind of obsolete for me

507
00:19:45,039 --> 00:19:46,160
because

508
00:19:46,160 --> 00:19:49,840
what what are they for if i can specify

509
00:19:49,840 --> 00:19:53,679
uh these uh for reading and we're gonna

510
00:19:53,679 --> 00:19:54,480
see

511
00:19:54,480 --> 00:19:57,600
on on later slides uh that it was

512
00:19:57,600 --> 00:19:59,120
designed for something else

513
00:19:59,120 --> 00:20:01,280
so basically read update that means that

514
00:20:01,280 --> 00:20:02,880
you are gonna have to read

515
00:20:02,880 --> 00:20:06,159
everything inside that app so

516
00:20:06,159 --> 00:20:09,200
if you are talking uh about a

517
00:20:09,200 --> 00:20:10,559
cryptocurrency wallet

518
00:20:10,559 --> 00:20:13,760
on mastercard protocol uh i expect

519
00:20:13,760 --> 00:20:15,280
everyone to encrypt

520
00:20:15,280 --> 00:20:17,360
different parts of the wallet well

521
00:20:17,360 --> 00:20:18,799
because a reader

522
00:20:18,799 --> 00:20:22,640
will read every key or every every

523
00:20:22,640 --> 00:20:25,840
file inside these applications

524
00:20:25,840 --> 00:20:28,320
and thankfully we do support in place

525
00:20:28,320 --> 00:20:30,480
encryption on the card because it has

526
00:20:30,480 --> 00:20:31,280
aes

527
00:20:31,280 --> 00:20:34,480
and even integrated elliptical integrity

528
00:20:34,480 --> 00:20:36,080
the encryption you can do

529
00:20:36,080 --> 00:20:38,000
on this card so technically it's all

530
00:20:38,000 --> 00:20:40,400
possible so after reading

531
00:20:40,400 --> 00:20:43,440
the application specific files we have

532
00:20:43,440 --> 00:20:48,799
check one i'm just gonna

533
00:20:48,799 --> 00:20:50,880
i just checked if uh we are still in

534
00:20:50,880 --> 00:20:52,720
line so

535
00:20:52,720 --> 00:20:55,120
after reading application specific files

536
00:20:55,120 --> 00:20:56,400
the terminal

537
00:20:56,400 --> 00:21:00,840
is gonna do its first round of uh fraud

538
00:21:00,840 --> 00:21:03,840
detection

539
00:21:04,159 --> 00:21:06,960
did you have any slides because i don't

540
00:21:06,960 --> 00:21:10,240
think that you're sharing your screen

541
00:21:10,640 --> 00:21:13,520
oh jesus we were wondering whether like

542
00:21:13,520 --> 00:21:13,919
you're

543
00:21:13,919 --> 00:21:15,520
like alluding to some metaphorical

544
00:21:15,520 --> 00:21:16,960
slides or whether you actually

545
00:21:16,960 --> 00:21:19,360
have any um i just wanted to jump in and

546
00:21:19,360 --> 00:21:21,840
let you know

547
00:21:22,000 --> 00:21:25,919
no but it's okay it's

548
00:21:25,919 --> 00:21:29,120
oh okay that makes a lot of sense um

549
00:21:29,120 --> 00:21:32,640
cool well i it's fortunate that

550
00:21:32,640 --> 00:21:34,400
these slides are actually a public

551
00:21:34,400 --> 00:21:36,960
website i just pasted into the

552
00:21:36,960 --> 00:21:39,440
uh the room here and everyone can check

553
00:21:39,440 --> 00:21:40,559
it real time

554
00:21:40,559 --> 00:21:44,400
so all of my slides uh are using hackmd

555
00:21:44,400 --> 00:21:47,360
and you can recap it sorry for that not

556
00:21:47,360 --> 00:21:48,880
at all okay so you should have realized

557
00:21:48,880 --> 00:21:49,760
sooner um

558
00:21:49,760 --> 00:21:51,280
so tell you what if you can share them

559
00:21:51,280 --> 00:21:52,880
now and then the rest will share through

560
00:21:52,880 --> 00:21:54,640
paragony polish through the channels

561
00:21:54,640 --> 00:21:58,559
so people can catch up in the schedule

562
00:21:58,559 --> 00:22:02,080
yes uh okay i shared it here

563
00:22:02,080 --> 00:22:05,200
uh in in the panel and if you would be

564
00:22:05,200 --> 00:22:07,360
so kind to put it on the telegram

565
00:22:07,360 --> 00:22:08,400
channel

566
00:22:08,400 --> 00:22:11,440
also and every every channel so

567
00:22:11,440 --> 00:22:14,720
sorry people uh thank you

568
00:22:14,720 --> 00:22:18,880
so let's slide back so uh

569
00:22:18,880 --> 00:22:23,360
problem formulation uh stable coins yes

570
00:22:23,360 --> 00:22:27,679
uh jcop cards

571
00:22:27,679 --> 00:22:30,960
just a very short uh

572
00:22:30,960 --> 00:22:34,240
recap on the apdu

573
00:22:34,240 --> 00:22:37,120
select app get processing options read

574
00:22:37,120 --> 00:22:39,200
update and check one so here

575
00:22:39,200 --> 00:22:43,679
we were let's get back to full screen

576
00:22:43,679 --> 00:22:47,039
so coming back after the technical

577
00:22:47,039 --> 00:22:50,320
issues so based on the

578
00:22:50,320 --> 00:22:52,240
application provide specification

579
00:22:52,240 --> 00:22:53,760
specific data

580
00:22:53,760 --> 00:22:56,240
we got like card experience application

581
00:22:56,240 --> 00:22:58,400
versions processing options

582
00:22:58,400 --> 00:23:00,960
the terminal is gonna have its first

583
00:23:00,960 --> 00:23:01,600
round of

584
00:23:01,600 --> 00:23:04,240
uh front checking and of course if the

585
00:23:04,240 --> 00:23:05,520
card expired

586
00:23:05,520 --> 00:23:08,960
uh the application versions don't align

587
00:23:08,960 --> 00:23:12,559
or uh it's go it's going to mask some of

588
00:23:12,559 --> 00:23:15,440
the trv bits if two of these bits are

589
00:23:15,440 --> 00:23:17,840
uh set at this tab then the transaction

590
00:23:17,840 --> 00:23:19,840
is guaranteed to fail

591
00:23:19,840 --> 00:23:23,520
and also at this step uh

592
00:23:23,520 --> 00:23:26,720
the terminal is gonna verify our cards

593
00:23:26,720 --> 00:23:31,039
uh key certificate rest of chain

594
00:23:31,039 --> 00:23:33,360
and yeah there is a certificate first of

595
00:23:33,360 --> 00:23:34,320
chain in the

596
00:23:34,320 --> 00:23:36,320
process there is a certificate authority

597
00:23:36,320 --> 00:23:37,840
that has to sign us

598
00:23:37,840 --> 00:23:41,279
the issuer uh part that the terminal is

599
00:23:41,279 --> 00:23:41,760
gonna

600
00:23:41,760 --> 00:23:43,200
check back into the acquired the

601
00:23:43,200 --> 00:23:46,559
terminal has uh hard-coded

602
00:23:46,559 --> 00:23:48,400
uh public key of the certificate

603
00:23:48,400 --> 00:23:51,600
authority and it's acquired

604
00:23:51,600 --> 00:23:54,159
and it's gonna cross check uh what what

605
00:23:54,159 --> 00:23:55,960
are we provided with uh

606
00:23:55,960 --> 00:24:00,720
x uh 506 certificates

607
00:24:00,720 --> 00:24:02,880
uh with this authority so we have to be

608
00:24:02,880 --> 00:24:04,000
signed

609
00:24:04,000 --> 00:24:06,400
for the transaction to succeed most

610
00:24:06,400 --> 00:24:08,720
likely this is the most challenging

611
00:24:08,720 --> 00:24:11,679
or uh one would accept this is the most

612
00:24:11,679 --> 00:24:13,120
challenging part

613
00:24:13,120 --> 00:24:16,320
of making your own bitcoin credit cards

614
00:24:16,320 --> 00:24:17,360
but

615
00:24:17,360 --> 00:24:19,120
my research concluded that it's

616
00:24:19,120 --> 00:24:21,039
surprisingly easy

617
00:24:21,039 --> 00:24:23,120
uh at least on statistics level because

618
00:24:23,120 --> 00:24:24,960
on formalities i'm i'm still

619
00:24:24,960 --> 00:24:27,360
trying to find partners who are willing

620
00:24:27,360 --> 00:24:28,400
to sign

621
00:24:28,400 --> 00:24:31,200
my credit cards so i can actually test

622
00:24:31,200 --> 00:24:32,000
these uh

623
00:24:32,000 --> 00:24:35,760
on on a shop but statistically when i

624
00:24:35,760 --> 00:24:37,679
looked into who can self sign

625
00:24:37,679 --> 00:24:39,679
their certificates and b certificate

626
00:24:39,679 --> 00:24:41,200
authorities i found

627
00:24:41,200 --> 00:24:44,240
really interesting stuff like uh

628
00:24:44,240 --> 00:24:47,039
several and several uh airline loyalty

629
00:24:47,039 --> 00:24:48,880
cards even in zimbabwe

630
00:24:48,880 --> 00:24:51,120
you don't have to be like star alliance

631
00:24:51,120 --> 00:24:52,159
at such

632
00:24:52,159 --> 00:24:54,960
uh level to self sign your own

633
00:24:54,960 --> 00:24:56,640
certificates uh

634
00:24:56,640 --> 00:24:59,200
really really small no name loyalty

635
00:24:59,200 --> 00:25:00,000
cards can be

636
00:25:00,000 --> 00:25:03,200
need even disney has its own uh

637
00:25:03,200 --> 00:25:05,440
even disney's a certificate authority i

638
00:25:05,440 --> 00:25:07,200
expect the

639
00:25:07,200 --> 00:25:09,919
the the cards in disneyland were so out

640
00:25:09,919 --> 00:25:10,559
of

641
00:25:10,559 --> 00:25:13,200
uh scale that they they had to make

642
00:25:13,200 --> 00:25:14,240
their own

643
00:25:14,240 --> 00:25:16,960
uh travel agents instead even sports

644
00:25:16,960 --> 00:25:17,520
event

645
00:25:17,520 --> 00:25:20,640
and programs so nhl uh cards

646
00:25:20,640 --> 00:25:23,360
uh are not signed by anyone so nhl is

647
00:25:23,360 --> 00:25:23,919
its own

648
00:25:23,919 --> 00:25:26,480
certificate authority for their visa

649
00:25:26,480 --> 00:25:28,640
supported cards

650
00:25:28,640 --> 00:25:31,039
so i expect that it's it's you don't

651
00:25:31,039 --> 00:25:31,679
have to

652
00:25:31,679 --> 00:25:34,400
have definitely a banking license to

653
00:25:34,400 --> 00:25:34,880
have

654
00:25:34,880 --> 00:25:38,880
your own uh your own uh credit card

655
00:25:38,880 --> 00:25:42,720
so uh for for check two for the second

656
00:25:42,720 --> 00:25:43,120
part

657
00:25:43,120 --> 00:25:46,400
because at check one uh we only

658
00:25:46,400 --> 00:25:48,799
verify that the card card itself is

659
00:25:48,799 --> 00:25:50,799
valid its expiry is very lead its

660
00:25:50,799 --> 00:25:52,000
versions align

661
00:25:52,000 --> 00:25:55,039
so step two we're gonna verify

662
00:25:55,039 --> 00:25:58,320
that the credit card holder as a person

663
00:25:58,320 --> 00:26:01,360
is is authorized to use this card

664
00:26:01,360 --> 00:26:04,720
so it has multiple

665
00:26:04,720 --> 00:26:07,840
uh versions which uh this is one part

666
00:26:07,840 --> 00:26:08,159
that

667
00:26:08,159 --> 00:26:10,799
pdol consists of what verification

668
00:26:10,799 --> 00:26:12,320
methods we support

669
00:26:12,320 --> 00:26:14,320
and the the terminal and the cart have

670
00:26:14,320 --> 00:26:16,159
to agree on those so cryptographic

671
00:26:16,159 --> 00:26:17,200
signature

672
00:26:17,200 --> 00:26:20,640
uh with rsa this is increasingly popular

673
00:26:20,640 --> 00:26:23,039
in mexico and some parts of the us

674
00:26:23,039 --> 00:26:25,840
but uh in in the year we still use

675
00:26:25,840 --> 00:26:28,000
offline insightful

676
00:26:28,000 --> 00:26:31,360
uh pin and this in ciphered uh crypto

677
00:26:31,360 --> 00:26:34,480
is very uh

678
00:26:34,480 --> 00:26:37,520
very less documented and i'm still

679
00:26:37,520 --> 00:26:40,640
not sure because two documentation on

680
00:26:40,640 --> 00:26:42,880
how these insipher pins work

681
00:26:42,880 --> 00:26:46,480
kinda contradict uh what what i can tell

682
00:26:46,480 --> 00:26:47,520
is that it's it's

683
00:26:47,520 --> 00:26:50,799
uh it uses a clever almost

684
00:26:50,799 --> 00:26:53,760
hash derivation function like version

685
00:26:53,760 --> 00:26:55,120
that has your

686
00:26:55,120 --> 00:26:58,640
your pin rotated into and this key is

687
00:26:58,640 --> 00:27:00,640
actually used as you know

688
00:27:00,640 --> 00:27:03,679
session key derivation so your card pin

689
00:27:03,679 --> 00:27:07,039
is used as part of the session key

690
00:27:07,039 --> 00:27:11,360
with every payment uh in the next step

691
00:27:11,360 --> 00:27:13,440
and we can also use combinations of the

692
00:27:13,440 --> 00:27:14,400
offline

693
00:27:14,400 --> 00:27:17,600
uh pin verification and the signatures

694
00:27:17,600 --> 00:27:20,720
which sounds super cool i don't know

695
00:27:20,720 --> 00:27:24,000
any any banks that support this please

696
00:27:24,000 --> 00:27:24,559
also

697
00:27:24,559 --> 00:27:26,720
make a comment if you if your bank

698
00:27:26,720 --> 00:27:28,320
supports it

699
00:27:28,320 --> 00:27:31,919
so the last step of risk management

700
00:27:31,919 --> 00:27:34,880
is that the terminal and the card must

701
00:27:34,880 --> 00:27:35,760
agree whether

702
00:27:35,760 --> 00:27:39,200
to continue here from offline to online

703
00:27:39,200 --> 00:27:41,679
and the leader has a little more power

704
00:27:41,679 --> 00:27:44,080
on these decisions so if the reader

705
00:27:44,080 --> 00:27:46,000
uh said to the card that we have to

706
00:27:46,000 --> 00:27:49,039
continue offline because for example

707
00:27:49,039 --> 00:27:51,679
either you made too many offline atc

708
00:27:51,679 --> 00:27:53,440
increments in the past

709
00:27:53,440 --> 00:27:57,200
or one of the trv flags are already won

710
00:27:57,200 --> 00:28:01,039
and you are like borderline throat

711
00:28:01,039 --> 00:28:03,039
with this transaction on my previous

712
00:28:03,039 --> 00:28:04,399
risk management steps

713
00:28:04,399 --> 00:28:06,399
and we have to ask your bank for

714
00:28:06,399 --> 00:28:07,760
verification

715
00:28:07,760 --> 00:28:09,840
so the reader has more power but if the

716
00:28:09,840 --> 00:28:12,080
reader has offline verification from the

717
00:28:12,080 --> 00:28:12,559
card

718
00:28:12,559 --> 00:28:16,480
the card still can ask online uh

719
00:28:16,480 --> 00:28:19,200
version and this is also one part when

720
00:28:19,200 --> 00:28:19,919
the atc

721
00:28:19,919 --> 00:28:23,600
increment will result your card blocked

722
00:28:23,600 --> 00:28:25,200
and here comes the interesting part

723
00:28:25,200 --> 00:28:26,880
where where we're gonna put

724
00:28:26,880 --> 00:28:30,799
the the bitcoin transaction here uh one

725
00:28:30,799 --> 00:28:34,080
the uh the terminal uh

726
00:28:34,080 --> 00:28:36,640
communication is relayed from the

727
00:28:36,640 --> 00:28:37,840
acquirer

728
00:28:37,840 --> 00:28:40,880
acquirer to the issuer which is us in

729
00:28:40,880 --> 00:28:42,000
encrypted form

730
00:28:42,000 --> 00:28:44,960
and the require is not involved in any

731
00:28:44,960 --> 00:28:46,320
of the fraud detection

732
00:28:46,320 --> 00:28:48,640
and the transaction verification it's

733
00:28:48,640 --> 00:28:50,159
because of scalability

734
00:28:50,159 --> 00:28:53,039
nobody it's not decentralization it's

735
00:28:53,039 --> 00:28:54,279
like federated

736
00:28:54,279 --> 00:28:56,960
decentralization uh i shouldn't be

737
00:28:56,960 --> 00:28:57,760
involved

738
00:28:57,760 --> 00:29:01,279
into john doe buying bread at the store

739
00:29:01,279 --> 00:29:03,360
that's the acquirers policy and we're

740
00:29:03,360 --> 00:29:06,480
gonna just do the settlement at the end

741
00:29:06,480 --> 00:29:10,000
uh so the issuer will have to know

742
00:29:10,000 --> 00:29:12,799
a location or some communication info

743
00:29:12,799 --> 00:29:14,960
embedded on the card that who the issuer

744
00:29:14,960 --> 00:29:15,520
is who

745
00:29:15,520 --> 00:29:17,679
do i have to ask for transaction

746
00:29:17,679 --> 00:29:19,840
validity which we can write on the card

747
00:29:19,840 --> 00:29:20,799
if we have

748
00:29:20,799 --> 00:29:24,240
uh ability to it so we have no technical

749
00:29:24,240 --> 00:29:26,559
and i stress term so we have no

750
00:29:26,559 --> 00:29:28,240
technical restriction on

751
00:29:28,240 --> 00:29:31,279
making our own emv backend uh

752
00:29:31,279 --> 00:29:33,679
hardcoded on the card because the emv

753
00:29:33,679 --> 00:29:35,440
protocol will read this out

754
00:29:35,440 --> 00:29:38,080
and communicate with the issuer directly

755
00:29:38,080 --> 00:29:39,360
of course it has

756
00:29:39,360 --> 00:29:43,679
various uh legal uh legal reasons that

757
00:29:43,679 --> 00:29:47,520
nobody uh does this so

758
00:29:47,520 --> 00:29:50,559
from after all these fraud detection

759
00:29:50,559 --> 00:29:51,200
steps and

760
00:29:51,200 --> 00:29:54,080
checks that the reader and the card have

761
00:29:54,080 --> 00:29:55,039
to agree on

762
00:29:55,039 --> 00:29:57,520
the transaction are packed in a very

763
00:29:57,520 --> 00:29:58,640
flexible

764
00:29:58,640 --> 00:30:01,600
uh arqc request which is a request

765
00:30:01,600 --> 00:30:03,200
crypto

766
00:30:03,200 --> 00:30:06,640
cryptogram uh term which i

767
00:30:06,640 --> 00:30:09,840
don't know why they uh why they

768
00:30:09,840 --> 00:30:12,000
called in the specification like this

769
00:30:12,000 --> 00:30:13,520
this is basically

770
00:30:13,520 --> 00:30:16,559
uh one one problem or or one super

771
00:30:16,559 --> 00:30:17,360
flexible

772
00:30:17,360 --> 00:30:19,919
stuff that we're gonna exploit here is

773
00:30:19,919 --> 00:30:20,399
that the

774
00:30:20,399 --> 00:30:24,559
er qc has to made by the card not by the

775
00:30:24,559 --> 00:30:27,600
the reader uh

776
00:30:27,600 --> 00:30:29,679
on a technical level i i still don't

777
00:30:29,679 --> 00:30:31,679
really get why this decision was made

778
00:30:31,679 --> 00:30:33,039
because usually

779
00:30:33,039 --> 00:30:35,120
uh the cashier enters the amount into

780
00:30:35,120 --> 00:30:36,880
the terminal and

781
00:30:36,880 --> 00:30:39,520
it should uh make that the request and

782
00:30:39,520 --> 00:30:40,159
the card

783
00:30:40,159 --> 00:30:42,399
should only sign it but as the

784
00:30:42,399 --> 00:30:44,480
specification said we have these uh

785
00:30:44,480 --> 00:30:46,080
already

786
00:30:46,080 --> 00:30:49,679
actually i'm just gonna uh can i send

787
00:30:49,679 --> 00:30:52,960
files into the chat

788
00:30:53,279 --> 00:30:56,640
no then uh i will just

789
00:30:56,640 --> 00:30:58,960
upload on the q and a the whole

790
00:30:58,960 --> 00:31:00,720
specification here

791
00:31:00,720 --> 00:31:03,279
so the specification says clearly says

792
00:31:03,279 --> 00:31:05,840
that the cart makes the arqc

793
00:31:05,840 --> 00:31:09,440
based on the data that the uh

794
00:31:09,440 --> 00:31:12,960
the reader sends uh sends it and

795
00:31:12,960 --> 00:31:16,159
it has no specified format uh

796
00:31:16,159 --> 00:31:18,799
as for the emv specification now there

797
00:31:18,799 --> 00:31:19,279
are some

798
00:31:19,279 --> 00:31:23,640
easel uh specification i think uh iso

799
00:31:23,640 --> 00:31:27,600
8583 specifies an arqc format for

800
00:31:27,600 --> 00:31:30,480
contactless payment but emv itself has

801
00:31:30,480 --> 00:31:31,519
no restriction

802
00:31:31,519 --> 00:31:35,039
on it and this is when i had uh the idea

803
00:31:35,039 --> 00:31:38,480
so maybe i can sign a utxo as an arqc

804
00:31:38,480 --> 00:31:40,240
because the acquirer

805
00:31:40,240 --> 00:31:42,640
uh doesn't see it because communication

806
00:31:42,640 --> 00:31:44,399
through the acquirer is

807
00:31:44,399 --> 00:31:47,360
uh encrypted and the last stamp on

808
00:31:47,360 --> 00:31:49,600
transaction validity

809
00:31:49,600 --> 00:31:53,600
is on the on the issuer who whom if

810
00:31:53,600 --> 00:31:56,320
uh have access to a bitcoin full node

811
00:31:56,320 --> 00:31:58,840
can verify assign you to

812
00:31:58,840 --> 00:32:01,919
exo on the next step

813
00:32:01,919 --> 00:32:04,799
we have an optional second card action

814
00:32:04,799 --> 00:32:05,760
uh

815
00:32:05,760 --> 00:32:08,720
which would i don't know whether uh is

816
00:32:08,720 --> 00:32:10,720
useful in the protocol if there are some

817
00:32:10,720 --> 00:32:12,480
technical issues for example

818
00:32:12,480 --> 00:32:14,960
i still don't know whether i'm gonna be

819
00:32:14,960 --> 00:32:16,480
signed with my demo

820
00:32:16,480 --> 00:32:20,480
uh from uh from a bank uh if not then i

821
00:32:20,480 --> 00:32:20,799
can

822
00:32:20,799 --> 00:32:22,799
most probably use this step ad optional

823
00:32:22,799 --> 00:32:24,320
secured card action

824
00:32:24,320 --> 00:32:27,519
to make some lighting level uh

825
00:32:27,519 --> 00:32:32,880
exchange or or lightning level hackery

826
00:32:33,039 --> 00:32:35,440
uh but but uh the in the original hack

827
00:32:35,440 --> 00:32:37,760
or the original abuse of protocol step 8

828
00:32:37,760 --> 00:32:38,000
is

829
00:32:38,000 --> 00:32:41,360
excluded as it's originally optional in

830
00:32:41,360 --> 00:32:43,360
the whole emv process

831
00:32:43,360 --> 00:32:45,679
the second part of our script because

832
00:32:45,679 --> 00:32:47,360
yeah utxos

833
00:32:47,360 --> 00:32:50,799
has to be present on the card so we also

834
00:32:50,799 --> 00:32:51,200
have

835
00:32:51,200 --> 00:32:54,399
need an ability to update them

836
00:32:54,399 --> 00:32:56,880
this is actually a part i got uh some

837
00:32:56,880 --> 00:32:58,559
help from max hildebrand

838
00:32:58,559 --> 00:33:01,760
uh hi if you are there so this problem

839
00:33:01,760 --> 00:33:02,960
was pointed out

840
00:33:02,960 --> 00:33:06,640
by him so on the last step of the

841
00:33:06,640 --> 00:33:08,320
transaction verification we have the

842
00:33:08,320 --> 00:33:09,440
ability to run

843
00:33:09,440 --> 00:33:12,480
arbitrary java byte code

844
00:33:12,480 --> 00:33:15,760
on the card so from the issuer goes

845
00:33:15,760 --> 00:33:18,960
encrypted back to the acquirer to the

846
00:33:18,960 --> 00:33:20,480
terminal and the terminal

847
00:33:20,480 --> 00:33:24,480
sends raw encrypted java bytecode to the

848
00:33:24,480 --> 00:33:25,519
card like

849
00:33:25,519 --> 00:33:28,399
your bank said you you have to run this

850
00:33:28,399 --> 00:33:28,799
and

851
00:33:28,799 --> 00:33:31,760
this means that we can update our utxos

852
00:33:31,760 --> 00:33:33,679
on the card

853
00:33:33,679 --> 00:33:37,039
so going into the attack for for real

854
00:33:37,039 --> 00:33:37,519
now

855
00:33:37,519 --> 00:33:39,840
our shop our assumptions that we are

856
00:33:39,840 --> 00:33:42,399
signed by a certificate authority that i

857
00:33:42,399 --> 00:33:44,960
listed at the beginning otherwise you

858
00:33:44,960 --> 00:33:46,799
are committing credit card

859
00:33:46,799 --> 00:33:49,840
throat which i'm not gonna encourage on

860
00:33:49,840 --> 00:33:50,960
video

861
00:33:50,960 --> 00:33:54,399
so also on the issuer side we have

862
00:33:54,399 --> 00:33:56,960
a fully synchronized bitcoin full node

863
00:33:56,960 --> 00:33:57,760
because we

864
00:33:57,760 --> 00:33:59,760
don't want to harm the bitcoin network

865
00:33:59,760 --> 00:34:01,519
with uh

866
00:34:01,519 --> 00:34:05,440
with double spending and such

867
00:34:05,440 --> 00:34:07,840
uh we are gonna only use online

868
00:34:07,840 --> 00:34:09,280
authentication

869
00:34:09,280 --> 00:34:11,599
when i started this project beginning of

870
00:34:11,599 --> 00:34:12,480
this year

871
00:34:12,480 --> 00:34:14,719
i was super excited when i realized that

872
00:34:14,719 --> 00:34:16,879
you can use offline authentication and

873
00:34:16,879 --> 00:34:20,079
strictly just public key signatures for

874
00:34:20,079 --> 00:34:22,320
verifying a transaction

875
00:34:22,320 --> 00:34:25,199
uh i had to i had to realize that you

876
00:34:25,199 --> 00:34:26,320
can only do this

877
00:34:26,320 --> 00:34:29,040
two or three times maximum with the card

878
00:34:29,040 --> 00:34:29,839
before

879
00:34:29,839 --> 00:34:32,800
a reader uh will enforce you online

880
00:34:32,800 --> 00:34:34,879
verification because too many offlines

881
00:34:34,879 --> 00:34:35,679
are

882
00:34:35,679 --> 00:34:39,679
are very uh very risky for them

883
00:34:39,679 --> 00:34:42,800
and also atms only have on

884
00:34:42,800 --> 00:34:45,918
online verification so you can't ask for

885
00:34:45,918 --> 00:34:49,359
a signature-based verification on an atm

886
00:34:49,359 --> 00:34:52,399
and uh during this attack we don't care

887
00:34:52,399 --> 00:34:54,000
how the settlement

888
00:34:54,000 --> 00:34:57,119
legally happens between the issuer and

889
00:34:57,119 --> 00:34:58,240
the acquirer

890
00:34:58,240 --> 00:35:01,599
most likely because i don't have a clue

891
00:35:01,599 --> 00:35:02,000
about

892
00:35:02,000 --> 00:35:05,839
legal stuffs so uh even do i have some

893
00:35:05,839 --> 00:35:06,960
assumptions and

894
00:35:06,960 --> 00:35:09,280
some thoughts on how this can be

895
00:35:09,280 --> 00:35:10,400
circumvented

896
00:35:10,400 --> 00:35:12,480
i'm not in the position to give advices

897
00:35:12,480 --> 00:35:14,320
on that

898
00:35:14,320 --> 00:35:17,040
so the issuer uh information which is

899
00:35:17,040 --> 00:35:19,200
basically us is stored on the card

900
00:35:19,200 --> 00:35:21,359
uh the acquirer communicates with this

901
00:35:21,359 --> 00:35:23,359
issue issuer in a triple dash

902
00:35:23,359 --> 00:35:26,480
uh x uh encrypted channel

903
00:35:26,480 --> 00:35:29,599
uh which means that we have no

904
00:35:29,599 --> 00:35:32,000
technical restriction to write our java

905
00:35:32,000 --> 00:35:32,640
based

906
00:35:32,640 --> 00:35:34,400
backend you probably want the java this

907
00:35:34,400 --> 00:35:36,480
backend for this for compatibility

908
00:35:36,480 --> 00:35:37,040
reasons

909
00:35:37,040 --> 00:35:40,079
most likely emv will only have java

910
00:35:40,079 --> 00:35:42,079
based sdks for you

911
00:35:42,079 --> 00:35:44,480
so the card stores the extended public

912
00:35:44,480 --> 00:35:45,440
key for you

913
00:35:45,440 --> 00:35:48,079
uh uh because we want to support hd

914
00:35:48,079 --> 00:35:48,960
wallets

915
00:35:48,960 --> 00:35:52,320
and your utxo lists

916
00:35:52,320 --> 00:35:55,440
uh the latest card the the one

917
00:35:55,440 --> 00:35:58,720
i i want to get signed

918
00:35:58,720 --> 00:36:02,240
by a bank has 144 kilobyte memory

919
00:36:02,240 --> 00:36:05,200
memory so plenty of memory to store your

920
00:36:05,200 --> 00:36:07,359
utxos

921
00:36:07,359 --> 00:36:09,359
uh which also introduces two other

922
00:36:09,359 --> 00:36:10,720
problems or

923
00:36:10,720 --> 00:36:14,560
concerts about this hack uh i do here

924
00:36:14,560 --> 00:36:16,800
yes this is a privacy privacy issue

925
00:36:16,800 --> 00:36:18,320
because all your transactions

926
00:36:18,320 --> 00:36:20,640
are gonna be traceable on the issuers

927
00:36:20,640 --> 00:36:22,960
and it has your public key and even

928
00:36:22,960 --> 00:36:25,839
access to your utxo so even without the

929
00:36:25,839 --> 00:36:28,960
xbob the utxo chain is stored

930
00:36:28,960 --> 00:36:32,000
by account this also means that

931
00:36:32,000 --> 00:36:34,800
spending from the same key outside of

932
00:36:34,800 --> 00:36:36,800
this whole embry

933
00:36:36,800 --> 00:36:40,560
will result in a in a broken utxo set

934
00:36:40,560 --> 00:36:42,320
and you are not going to be able to

935
00:36:42,320 --> 00:36:44,880
spend your bitcoins anymore just like if

936
00:36:44,880 --> 00:36:46,800
you would increment your atc

937
00:36:46,800 --> 00:36:50,320
on a fiat credit cards so

938
00:36:50,320 --> 00:36:52,720
the get processing option the pt or list

939
00:36:52,720 --> 00:36:53,599
will consist

940
00:36:53,599 --> 00:36:55,599
of an online verification and being

941
00:36:55,599 --> 00:36:56,800
standard

942
00:36:56,800 --> 00:37:00,160
european union format ptol

943
00:37:00,160 --> 00:37:03,359
and the arqc is formatted as a bitcoin

944
00:37:03,359 --> 00:37:03,839
core

945
00:37:03,839 --> 00:37:07,040
utxo uh that's gonna be for right

946
00:37:07,040 --> 00:37:10,000
forwarded to the issuer uh which is

947
00:37:10,000 --> 00:37:10,800
first

948
00:37:10,800 --> 00:37:14,640
uh checks for transaction sanity uh

949
00:37:14,640 --> 00:37:17,280
like it came from the the gossip network

950
00:37:17,280 --> 00:37:19,280
the inventory protocol

951
00:37:19,280 --> 00:37:23,200
forwarded to the uh forward it back to

952
00:37:23,200 --> 00:37:23,920
the

953
00:37:23,920 --> 00:37:26,640
network and form an ar pc our pc is

954
00:37:26,640 --> 00:37:27,599
basically the

955
00:37:27,599 --> 00:37:30,880
ar qc response which also doesn't have

956
00:37:30,880 --> 00:37:33,359
any restriction on it on its format

957
00:37:33,359 --> 00:37:36,800
so and also can have scripts so

958
00:37:36,800 --> 00:37:40,160
on an ar pc we we tell the terminal that

959
00:37:40,160 --> 00:37:41,359
yes this was a

960
00:37:41,359 --> 00:37:43,599
valid transaction the the transaction

961
00:37:43,599 --> 00:37:44,640
sanity

962
00:37:44,640 --> 00:37:47,760
uh is fine the utxos are all nice but

963
00:37:47,760 --> 00:37:48,240
for

964
00:37:48,240 --> 00:37:50,320
confirmation we are gonna get back on

965
00:37:50,320 --> 00:37:51,839
that on the settlement

966
00:37:51,839 --> 00:37:55,359
slide so as for confirmation uh

967
00:37:55,359 --> 00:37:58,960
uh at the beginning i assume that uh

968
00:37:58,960 --> 00:38:01,920
we either have to wait for confirmation

969
00:38:01,920 --> 00:38:03,359
from the network which

970
00:38:03,359 --> 00:38:05,440
most terminal ones support because a

971
00:38:05,440 --> 00:38:07,280
contactless payment

972
00:38:07,280 --> 00:38:09,760
only powers the card for fraction of a

973
00:38:09,760 --> 00:38:10,720
second

974
00:38:10,720 --> 00:38:13,440
so even if we assume that yes the the

975
00:38:13,440 --> 00:38:15,680
cashier will wait for the confirmation

976
00:38:15,680 --> 00:38:17,760
as a good bitcoiner should

977
00:38:17,760 --> 00:38:20,640
you have to touch your card a second

978
00:38:20,640 --> 00:38:21,119
time

979
00:38:21,119 --> 00:38:24,640
and set some uh arqc flags

980
00:38:24,640 --> 00:38:27,599
to indicate that i'm in this transact

981
00:38:27,599 --> 00:38:29,440
transaction i'm checking back on the

982
00:38:29,440 --> 00:38:30,560
previous one's

983
00:38:30,560 --> 00:38:32,960
confirmation because my explorer said

984
00:38:32,960 --> 00:38:34,079
that it's fine

985
00:38:34,079 --> 00:38:36,000
this is one but this is really overkill

986
00:38:36,000 --> 00:38:37,599
so we're gonna assume

987
00:38:37,599 --> 00:38:40,800
that as in hcp you don't wanna disrupt

988
00:38:40,800 --> 00:38:42,240
your own community

989
00:38:42,240 --> 00:38:44,640
and the erpc only consists of gossip

990
00:38:44,640 --> 00:38:46,480
network delivery not blockchain

991
00:38:46,480 --> 00:38:47,520
confirmation

992
00:38:47,520 --> 00:38:51,280
in this script the imported part because

993
00:38:51,280 --> 00:38:54,880
all uh risk management and and checkings

994
00:38:54,880 --> 00:38:55,359
and

995
00:38:55,359 --> 00:38:57,839
cardholder verification we already

996
00:38:57,839 --> 00:38:59,680
passed all that

997
00:38:59,680 --> 00:39:02,000
whatever the issuer claims about the

998
00:39:02,000 --> 00:39:04,160
transaction at this part is absolute

999
00:39:04,160 --> 00:39:06,000
justice and it's gonna be

1000
00:39:06,000 --> 00:39:08,720
uh treated as such by the terminal

1001
00:39:08,720 --> 00:39:10,240
because the terminal had

1002
00:39:10,240 --> 00:39:12,160
two or three chances to check for

1003
00:39:12,160 --> 00:39:14,000
validity even at the bank

1004
00:39:14,000 --> 00:39:16,000
if it wanted online verification and we

1005
00:39:16,000 --> 00:39:18,000
always reported that yes this is

1006
00:39:18,000 --> 00:39:20,960
uh the transaction is valid uh card

1007
00:39:20,960 --> 00:39:22,320
order verification

1008
00:39:22,320 --> 00:39:24,720
succeeded so in this last step with the

1009
00:39:24,720 --> 00:39:28,320
arpc whatever the issuers say

1010
00:39:28,320 --> 00:39:32,079
is treated true because what bank would

1011
00:39:32,079 --> 00:39:35,119
uh rob themselves from its own money so

1012
00:39:35,119 --> 00:39:36,640
they didn't have to make

1013
00:39:36,640 --> 00:39:39,839
this adversarial behavior modeling and

1014
00:39:39,839 --> 00:39:40,560
the amv

1015
00:39:40,560 --> 00:39:43,440
protocol it was originally for

1016
00:39:43,440 --> 00:39:44,560
centralized

1017
00:39:44,560 --> 00:39:47,680
works or whatever

1018
00:39:48,400 --> 00:39:51,200
so yeah about

1019
00:39:51,920 --> 00:39:55,280
about the previous topic and for

1020
00:39:55,280 --> 00:39:56,240
settlement

1021
00:39:56,240 --> 00:40:00,079
uh usually this is a five to seven day

1022
00:40:00,079 --> 00:40:02,800
interval this is the part when uh the

1023
00:40:02,800 --> 00:40:04,880
acquirer and the issuer actually

1024
00:40:04,880 --> 00:40:08,000
exchange money because when you uh touch

1025
00:40:08,000 --> 00:40:08,480
your

1026
00:40:08,480 --> 00:40:10,800
terminal touch your card and buy some

1027
00:40:10,800 --> 00:40:12,800
groceries at the shop what

1028
00:40:12,800 --> 00:40:15,839
really happens is that at first uh the

1029
00:40:15,839 --> 00:40:18,800
card actually just freezes your balance

1030
00:40:18,800 --> 00:40:21,440
and only after the settlement interval

1031
00:40:21,440 --> 00:40:22,079
will

1032
00:40:22,079 --> 00:40:25,040
the the end party will actually get uh

1033
00:40:25,040 --> 00:40:26,800
their money

1034
00:40:26,800 --> 00:40:30,400
uh it by by low

1035
00:40:30,400 --> 00:40:33,920
or by varying low because it varies

1036
00:40:33,920 --> 00:40:37,040
by uh jurisdiction it should be a five

1037
00:40:37,040 --> 00:40:38,720
to seven day interval

1038
00:40:38,720 --> 00:40:41,839
but as i've consulted with uh with

1039
00:40:41,839 --> 00:40:44,079
someone with decades of experience in

1040
00:40:44,079 --> 00:40:44,640
the

1041
00:40:44,640 --> 00:40:47,040
payment processing and electronic

1042
00:40:47,040 --> 00:40:48,480
payments industry

1043
00:40:48,480 --> 00:40:52,160
they told me that uh basically no bag

1044
00:40:52,160 --> 00:40:54,000
respects these five to seven day

1045
00:40:54,000 --> 00:40:55,520
interval because they are legacy

1046
00:40:55,520 --> 00:40:56,160
software

1047
00:40:56,160 --> 00:40:59,280
and huge amounts of human errors which

1048
00:40:59,280 --> 00:41:01,520
it's much more chaotic and mostly goes

1049
00:41:01,520 --> 00:41:02,480
manually

1050
00:41:02,480 --> 00:41:05,040
so settlement is like a manual push

1051
00:41:05,040 --> 00:41:06,400
button whenever

1052
00:41:06,400 --> 00:41:10,640
someone does that in a

1053
00:41:10,640 --> 00:41:14,880
in in a dungeon or i don't know so

1054
00:41:14,880 --> 00:41:17,119
another problem with the settlement is

1055
00:41:17,119 --> 00:41:18,640
that you don't get a certificate

1056
00:41:18,640 --> 00:41:21,599
authority signature most likely without

1057
00:41:21,599 --> 00:41:22,560
due diligence

1058
00:41:22,560 --> 00:41:24,640
as i told you i still don't know that

1059
00:41:24,640 --> 00:41:26,400
because i'm still at the beginning of

1060
00:41:26,400 --> 00:41:27,520
the process

1061
00:41:27,520 --> 00:41:31,200
and i really hope they won't want

1062
00:41:31,200 --> 00:41:35,520
finance licenses from me

1063
00:41:35,520 --> 00:41:37,520
and thankfully self-signing

1064
00:41:37,520 --> 00:41:39,839
statistically for me

1065
00:41:39,839 --> 00:41:42,079
seems not that hard as getting those

1066
00:41:42,079 --> 00:41:44,480
finance licenses so if i don't get

1067
00:41:44,480 --> 00:41:47,359
a ca signature from a bank or other

1068
00:41:47,359 --> 00:41:48,000
financial

1069
00:41:48,000 --> 00:41:51,200
institute then i'm gonna go with

1070
00:41:51,200 --> 00:41:54,480
the self-signing method because as far

1071
00:41:54,480 --> 00:41:54,960
as see

1072
00:41:54,960 --> 00:41:58,160
if if no names impove

1073
00:41:58,160 --> 00:42:01,040
flight or travel agents you can make

1074
00:42:01,040 --> 00:42:01,839
their own

1075
00:42:01,839 --> 00:42:04,319
self-signed certificates for visa cards

1076
00:42:04,319 --> 00:42:05,520
then

1077
00:42:05,520 --> 00:42:08,720
so i can with with uh estonia consulting

1078
00:42:08,720 --> 00:42:10,000
company

1079
00:42:10,000 --> 00:42:13,680
so if we because this settlement problem

1080
00:42:13,680 --> 00:42:14,720
is is

1081
00:42:14,720 --> 00:42:16,880
super discouraging in the whole protocol

1082
00:42:16,880 --> 00:42:18,560
because we either

1083
00:42:18,560 --> 00:42:20,800
stole steal money from the acquirer

1084
00:42:20,800 --> 00:42:22,400
which we don't want to do

1085
00:42:22,400 --> 00:42:25,920
or we can't do this protocol hole so

1086
00:42:25,920 --> 00:42:28,720
let's have an extra assumption uh

1087
00:42:28,720 --> 00:42:29,680
throughout this

1088
00:42:29,680 --> 00:42:32,720
this talk we assumed till now that

1089
00:42:32,720 --> 00:42:35,440
don't have modified readers and modified

1090
00:42:35,440 --> 00:42:36,400
terminals it's

1091
00:42:36,400 --> 00:42:40,560
stocks if i go to the store now

1092
00:42:40,560 --> 00:42:42,560
it's gonna have stock firmware and no

1093
00:42:42,560 --> 00:42:43,680
additional code

1094
00:42:43,680 --> 00:42:46,720
but if we get the extra assumption in

1095
00:42:46,720 --> 00:42:47,680
that we can

1096
00:42:47,680 --> 00:42:50,880
do our own readers and such then we can

1097
00:42:50,880 --> 00:42:53,520
eliminate of course the settlement

1098
00:42:53,520 --> 00:42:56,400
problem because it's going to have

1099
00:42:56,400 --> 00:42:58,480
access to the same channels

1100
00:42:58,480 --> 00:43:01,760
uh into bitcoin that the card

1101
00:43:01,760 --> 00:43:04,800
that the car does uh for checking

1102
00:43:04,800 --> 00:43:06,800
validity and we don't have to rely

1103
00:43:06,800 --> 00:43:10,800
on the original banking logic for

1104
00:43:10,800 --> 00:43:13,440
for settling money between two accounts

1105
00:43:13,440 --> 00:43:17,040
if the reader also has access to bitcoin

1106
00:43:17,040 --> 00:43:21,119
so yeah this was the little

1107
00:43:21,119 --> 00:43:23,839
protocol abuse for emv that i wanted to

1108
00:43:23,839 --> 00:43:24,400
present

1109
00:43:24,400 --> 00:43:26,640
also thanks again max for pointing out

1110
00:43:26,640 --> 00:43:27,520
the xbob

1111
00:43:27,520 --> 00:43:30,640
and the utxo issues on this

1112
00:43:30,640 --> 00:43:33,359
uh the slides are available online as i

1113
00:43:33,359 --> 00:43:34,800
told you i

1114
00:43:34,800 --> 00:43:37,280
will reshare it on every channel that i

1115
00:43:37,280 --> 00:43:40,480
have access into http 4

1116
00:43:40,480 --> 00:43:43,839
and also i'm going to share these

1117
00:43:43,839 --> 00:43:46,640
into in a link for people who are

1118
00:43:46,640 --> 00:43:48,560
interested on the specifics

1119
00:43:48,560 --> 00:43:52,319
that i try to distill here and

1120
00:43:52,319 --> 00:43:55,440
yeah i'll try to keep up to date with

1121
00:43:55,440 --> 00:43:57,920
with everyone uh with this project after

1122
00:43:57,920 --> 00:44:00,000
i get signed by the ceo

1123
00:44:00,000 --> 00:44:03,599
by a ca to sign bitcoins with credit

1124
00:44:03,599 --> 00:44:04,079
cards

1125
00:44:04,079 --> 00:44:06,839
so i'm ready for question thank you so

1126
00:44:06,839 --> 00:44:09,839
much

1127
00:44:13,119 --> 00:44:17,119
okay can you hear me yes also just just

1128
00:44:17,119 --> 00:44:18,480
triple checking because like

1129
00:44:18,480 --> 00:44:20,160
these tech conferences are always on in

1130
00:44:20,160 --> 00:44:22,160
the sense that microphones don't work

1131
00:44:22,160 --> 00:44:24,160
right does anyone have any questions for

1132
00:44:24,160 --> 00:44:25,920
steeler

1133
00:44:25,920 --> 00:44:28,480
right and i will try my best to get the

1134
00:44:28,480 --> 00:44:29,359
microphone

1135
00:44:29,359 --> 00:44:31,359
over to you in some kind of way that

1136
00:44:31,359 --> 00:44:32,960
doesn't

1137
00:44:32,960 --> 00:44:36,240
stretch it hey hi i'm just kind of

1138
00:44:36,240 --> 00:44:36,880
curious

1139
00:44:36,880 --> 00:44:38,480
regarding the news that's came out

1140
00:44:38,480 --> 00:44:40,240
around wirex and their

1141
00:44:40,240 --> 00:44:43,440
native mastercard integration for crypto

1142
00:44:43,440 --> 00:44:44,960
and do you reckon that

1143
00:44:44,960 --> 00:44:46,640
anything that you're doing is related to

1144
00:44:46,640 --> 00:44:48,240
the same kind of process or

1145
00:44:48,240 --> 00:44:50,079
is this a completely separate uh

1146
00:44:50,079 --> 00:44:52,720
implementation

1147
00:44:54,000 --> 00:44:56,880
um i don't know any specifics about uh

1148
00:44:56,880 --> 00:44:58,880
virex even though i have some colleagues

1149
00:44:58,880 --> 00:45:01,040
working on that projects i don't know

1150
00:45:01,040 --> 00:45:04,400
uh which kind of support for

1151
00:45:04,400 --> 00:45:07,760
for coins days uh introduced here

1152
00:45:07,760 --> 00:45:09,599
i have a feeling because i've mentioned

1153
00:45:09,599 --> 00:45:11,680
some research uh at the beginning of

1154
00:45:11,680 --> 00:45:13,040
this project on

1155
00:45:13,040 --> 00:45:16,319
uh crypto accepting visa cards and i

1156
00:45:16,319 --> 00:45:18,800
have a hunch this is don't get this as a

1157
00:45:18,800 --> 00:45:19,839
guarantee that

1158
00:45:19,839 --> 00:45:22,720
uh virex also has this you spend money

1159
00:45:22,720 --> 00:45:24,880
from a fiat pool and after settlement

1160
00:45:24,880 --> 00:45:26,880
interval they gonna exchange it

1161
00:45:26,880 --> 00:45:30,480
and refill the pool most visa

1162
00:45:30,480 --> 00:45:34,000
compatible credit uh crypto cards works

1163
00:45:34,000 --> 00:45:37,040
this fair this way as far as i know but

1164
00:45:37,040 --> 00:45:40,079
uh i can't answer you like super

1165
00:45:40,079 --> 00:45:41,920
with super confidence because i haven't

1166
00:45:41,920 --> 00:45:43,200
checked wirex

1167
00:45:43,200 --> 00:45:45,599
specifically their their specifications

1168
00:45:45,599 --> 00:45:59,040
thank you very much

