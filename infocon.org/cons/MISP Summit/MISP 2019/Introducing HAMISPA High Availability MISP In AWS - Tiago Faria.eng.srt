1
00:00:02,330 --> 00:00:08,490
hi there everyone thank you for sticking

2
00:00:05,910 --> 00:00:10,230
around that was a long day it's

3
00:00:08,490 --> 00:00:13,379
definitely a lot more intimidating once

4
00:00:10,230 --> 00:00:15,000
you're here so bear with me my name is

5
00:00:13,380 --> 00:00:17,160
Tiago I work for some more company

6
00:00:15,000 --> 00:00:19,410
called trick or sec in the context of

7
00:00:17,160 --> 00:00:22,439
this summit I thought it was relevant to

8
00:00:19,410 --> 00:00:25,829
add that I also work in Miss cloud which

9
00:00:22,439 --> 00:00:28,320
basically maintains AM ice which are

10
00:00:25,829 --> 00:00:37,260
basically configured images that you can

11
00:00:28,320 --> 00:00:38,070
spawn on AWS ec2 instances okay and the

12
00:00:37,260 --> 00:00:40,290
things that we're going to talk about

13
00:00:38,070 --> 00:00:42,360
even though it's in the title of the of

14
00:00:40,290 --> 00:00:44,010
the presentation it's not really about

15
00:00:42,360 --> 00:00:46,260
eight of us and I'll go into a little

16
00:00:44,010 --> 00:00:47,910
bit more detail about that later on the

17
00:00:46,260 --> 00:00:49,080
idea here is to present scenarios for

18
00:00:47,910 --> 00:00:51,989
high availability for missed

19
00:00:49,080 --> 00:00:53,610
appointments and also showcase some

20
00:00:51,990 --> 00:00:55,890
experiments that worked and those that

21
00:00:53,610 --> 00:00:58,830
fail and some notes for deployment as

22
00:00:55,890 --> 00:01:00,540
well so we're not going to be talking

23
00:00:58,830 --> 00:01:02,339
about step-by-step guides for deployment

24
00:01:00,540 --> 00:01:03,629
so this is not like a list that will

25
00:01:02,340 --> 00:01:06,899
guide you to this appointment of this

26
00:01:03,630 --> 00:01:10,380
nor is it an installation for miss it's

27
00:01:06,899 --> 00:01:13,649
also not a course on AWS and this is by

28
00:01:10,380 --> 00:01:15,380
any means not the best or the standard

29
00:01:13,649 --> 00:01:17,850
on how you should do high availability

30
00:01:15,380 --> 00:01:20,298
the idea here is to have a conversation

31
00:01:17,850 --> 00:01:23,130
or start a conversation about what to do

32
00:01:20,299 --> 00:01:25,049
the reason that I'm doing this talk is

33
00:01:23,130 --> 00:01:28,048
well it's not just because of this issue

34
00:01:25,049 --> 00:01:30,329
in the github repo but there was

35
00:01:28,049 --> 00:01:33,649
definitely some some discussion about

36
00:01:30,329 --> 00:01:37,229
how to do high availability in Mis and

37
00:01:33,649 --> 00:01:38,909
well I thought about doing that and the

38
00:01:37,229 --> 00:01:40,920
idea here is that this might be useful

39
00:01:38,909 --> 00:01:43,679
for someone who is trying to do a high

40
00:01:40,920 --> 00:01:46,380
availability deployment and maybe a

41
00:01:43,679 --> 00:01:47,729
public reference so people who did this

42
00:01:46,380 --> 00:01:50,880
before are people who want to do this

43
00:01:47,729 --> 00:01:54,658
maybe can give some ideas or open some

44
00:01:50,880 --> 00:01:56,818
issues on what they find and yeah that's

45
00:01:54,659 --> 00:01:58,319
how I misspoke was born and this is

46
00:01:56,819 --> 00:02:00,929
basically a cluster and high

47
00:01:58,319 --> 00:02:03,420
availability resilient environments that

48
00:02:00,929 --> 00:02:05,039
whatever just AWS so even though I am

49
00:02:03,420 --> 00:02:07,619
using AWS what we're going to talk about

50
00:02:05,039 --> 00:02:09,330
here today can apply to any other cloud

51
00:02:07,619 --> 00:02:10,500
providers or even not even a cloud

52
00:02:09,330 --> 00:02:12,390
provider if you just want to do these

53
00:02:10,500 --> 00:02:14,430
things all by yourself you can do that

54
00:02:12,390 --> 00:02:16,859
no problem whatsoever

55
00:02:14,430 --> 00:02:18,599
so the way that we went about this is to

56
00:02:16,860 --> 00:02:21,390
have high availability and disaster

57
00:02:18,599 --> 00:02:23,339
recovery for databases all our missing

58
00:02:21,390 --> 00:02:25,230
code code base is going to run on a

59
00:02:23,340 --> 00:02:27,420
cluster I will have a shared file system

60
00:02:25,230 --> 00:02:29,250
between all of these cluster nodes will

61
00:02:27,420 --> 00:02:31,470
do world balancing between these cluster

62
00:02:29,250 --> 00:02:33,269
nodes and the interesting thing is that

63
00:02:31,470 --> 00:02:35,129
we want to do auto scaling for this as

64
00:02:33,269 --> 00:02:36,920
well so if something bad happens we want

65
00:02:35,129 --> 00:02:39,268
to go out to scale so we always maintain

66
00:02:36,920 --> 00:02:41,159
availability and performance and we'll

67
00:02:39,269 --> 00:02:43,739
use as much encryption as we can both in

68
00:02:41,159 --> 00:02:45,870
present data at rest and also average

69
00:02:43,739 --> 00:02:49,709
some services for Web Application

70
00:02:45,870 --> 00:02:53,329
Firewall and the OS protection so what

71
00:02:49,709 --> 00:02:56,159
we end up with is something like this

72
00:02:53,329 --> 00:02:57,480
though the way that I found is probably

73
00:02:56,159 --> 00:02:58,980
better to explain this is by going

74
00:02:57,480 --> 00:03:01,649
through each service we're not going to

75
00:02:58,980 --> 00:03:03,030
go into a lot of detail but we'll run

76
00:03:01,650 --> 00:03:05,489
through some of these service real quick

77
00:03:03,030 --> 00:03:07,470
and we're going to do this with AWS 101

78
00:03:05,489 --> 00:03:10,889
so we started here with the V PC this is

79
00:03:07,470 --> 00:03:12,989
basically our network and we are we are

80
00:03:10,889 --> 00:03:14,639
running with the with the PPC with to

81
00:03:12,989 --> 00:03:16,500
private subnets and to public subnets

82
00:03:14,639 --> 00:03:17,760
some different availability zones to

83
00:03:16,500 --> 00:03:20,699
maintain higher availability

84
00:03:17,760 --> 00:03:22,198
we also have our DHCP options well well

85
00:03:20,699 --> 00:03:24,359
configure so that we don't give public

86
00:03:22,199 --> 00:03:26,129
routable IP addresses where we shouldn't

87
00:03:24,359 --> 00:03:28,049
and we have internet gateways for the

88
00:03:26,129 --> 00:03:31,048
public subnet and not gateways for

89
00:03:28,049 --> 00:03:33,389
private subnets so starting off here in

90
00:03:31,049 --> 00:03:36,269
the database layer we are using a

91
00:03:33,389 --> 00:03:38,370
service called AWS RDS which is

92
00:03:36,269 --> 00:03:39,810
relational database services and it

93
00:03:38,370 --> 00:03:41,730
allows you to configure manage and scale

94
00:03:39,810 --> 00:03:43,109
databases all right also does a lot of

95
00:03:41,730 --> 00:03:44,608
automation so you don't have to worry

96
00:03:43,109 --> 00:03:47,430
about the database aspects or

97
00:03:44,609 --> 00:03:49,500
maintenance of the database aspect it

98
00:03:47,430 --> 00:03:51,000
supports several engines its engines I

99
00:03:49,500 --> 00:03:52,799
including my sequel which is the one

100
00:03:51,000 --> 00:03:55,109
that we're going to use this has to

101
00:03:52,799 --> 00:03:56,760
recover your auto updating DNS endpoints

102
00:03:55,109 --> 00:03:58,769
so basically if something bad happens to

103
00:03:56,760 --> 00:04:01,078
your one of your databases it will just

104
00:03:58,769 --> 00:04:02,729
update the DNS for you and your cluster

105
00:04:01,079 --> 00:04:04,440
will continue working and then there's

106
00:04:02,729 --> 00:04:08,040
also a read replica which I will talk

107
00:04:04,440 --> 00:04:10,079
more later on the way that we went about

108
00:04:08,040 --> 00:04:13,228
the file system was through the usage of

109
00:04:10,079 --> 00:04:14,940
AWS CFS which is the elastic file system

110
00:04:13,229 --> 00:04:16,380
it's basically an NFS file share that

111
00:04:14,940 --> 00:04:18,089
you can mount on your cluster nodes and

112
00:04:16,380 --> 00:04:21,180
they will all have access to this

113
00:04:18,089 --> 00:04:23,520
information so Amazon maintains a mount

114
00:04:21,180 --> 00:04:25,260
helper for most distributions so if

115
00:04:23,520 --> 00:04:27,090
you're running ubuntu cent OS whatever

116
00:04:25,260 --> 00:04:28,770
you'll be able to mount your NFS no

117
00:04:27,090 --> 00:04:31,650
problem it's also very easy to

118
00:04:28,770 --> 00:04:33,508
at TLS and there's no upfront

119
00:04:31,650 --> 00:04:35,489
requirements for provisioning and this

120
00:04:33,509 --> 00:04:38,129
is the place that will hold all of our

121
00:04:35,490 --> 00:04:42,180
misspelled database or code base x-ray

122
00:04:38,129 --> 00:04:43,680
sorry so in regards to the ec2 instances

123
00:04:42,180 --> 00:04:47,970
this is the place that will hold the

124
00:04:43,680 --> 00:04:49,080
actual codes these are called Elastic

125
00:04:47,970 --> 00:04:50,909
Compute clouds

126
00:04:49,080 --> 00:04:53,758
it's a compute capacity think of them as

127
00:04:50,909 --> 00:04:55,680
virtual machines basically all of these

128
00:04:53,759 --> 00:04:58,050
are in a very friendly of an executive

129
00:04:55,680 --> 00:04:59,340
system so if you're under warranty you

130
00:04:58,050 --> 00:05:00,629
can run a pool to centralize whatever

131
00:04:59,340 --> 00:05:02,969
there's a lot of choices for you there

132
00:05:00,629 --> 00:05:05,220
these instances will be our cluster

133
00:05:02,970 --> 00:05:06,750
notes they will be part of the auto

134
00:05:05,220 --> 00:05:08,610
scaling group so this thing that will

135
00:05:06,750 --> 00:05:10,889
just provision new instances as

136
00:05:08,610 --> 00:05:12,539
performance requires it and they will

137
00:05:10,889 --> 00:05:14,099
basically hold all of the configuration

138
00:05:12,539 --> 00:05:16,110
so when we install Mis we're going to

139
00:05:14,099 --> 00:05:20,610
install misc on an instance and that

140
00:05:16,110 --> 00:05:22,199
includes Apache PHP etc etc after we do

141
00:05:20,610 --> 00:05:23,639
the first configuration on the first

142
00:05:22,199 --> 00:05:26,340
instance we're going to use that as a

143
00:05:23,639 --> 00:05:28,110
source for the AMI

144
00:05:26,340 --> 00:05:32,460
and then it will just launch new

145
00:05:28,110 --> 00:05:34,199
instances based on that ami moving on to

146
00:05:32,460 --> 00:05:35,969
the application load balancer this is

147
00:05:34,199 --> 00:05:38,250
the place that will be the entry point

148
00:05:35,969 --> 00:05:40,710
for the access it will distribute

149
00:05:38,250 --> 00:05:42,630
traffic across multiple targets and it

150
00:05:40,710 --> 00:05:44,250
will also keep an eye on the instance

151
00:05:42,630 --> 00:05:47,250
help so to see if everything is ok with

152
00:05:44,250 --> 00:05:48,719
the instances it will also interact with

153
00:05:47,250 --> 00:05:50,130
artists gaming groups so if it needs to

154
00:05:48,719 --> 00:05:51,690
spawn an instance or terminate and

155
00:05:50,130 --> 00:05:53,849
instances will do all of that by itself

156
00:05:51,690 --> 00:05:55,259
and it can also be a source for our

157
00:05:53,849 --> 00:05:58,520
content distribution network so if you

158
00:05:55,259 --> 00:06:01,490
want to publish miss on a CDN Network

159
00:05:58,520 --> 00:06:03,900
the alb would be the place to do that

160
00:06:01,490 --> 00:06:05,909
now the other thing that we have right

161
00:06:03,900 --> 00:06:08,219
here is our ec2 bastion host this is

162
00:06:05,909 --> 00:06:09,539
basically our way of managing all of our

163
00:06:08,219 --> 00:06:12,029
network because all of our network is

164
00:06:09,539 --> 00:06:14,009
actually in private networks or most of

165
00:06:12,029 --> 00:06:15,810
our implementation here is behind

166
00:06:14,009 --> 00:06:17,550
private networks and we need we need a

167
00:06:15,810 --> 00:06:19,259
way to get in and basically do this

168
00:06:17,550 --> 00:06:22,139
configuration and we do this through a

169
00:06:19,259 --> 00:06:25,050
based in hosts so this one actually

170
00:06:22,139 --> 00:06:27,090
lives in a public subnet we use SSH keys

171
00:06:25,050 --> 00:06:28,949
and we basically whitelist a single IP

172
00:06:27,090 --> 00:06:30,479
address to get there we use multi-factor

173
00:06:28,949 --> 00:06:34,729
authentication to again and this machine

174
00:06:30,479 --> 00:06:37,169
can be turned off or on as you need it

175
00:06:34,729 --> 00:06:39,779
to other components here in the public

176
00:06:37,169 --> 00:06:40,560
subnet so the window the Web Application

177
00:06:39,779 --> 00:06:42,719
Firewall

178
00:06:40,560 --> 00:06:44,760
this is basically a native OS server

179
00:06:42,720 --> 00:06:46,740
that you can basically turn in or turn

180
00:06:44,760 --> 00:06:48,390
on and it will pretty much do everything

181
00:06:46,740 --> 00:06:50,460
by itself if you want to have some

182
00:06:48,390 --> 00:06:51,840
custom rules on it you can but by

183
00:06:50,460 --> 00:06:53,400
default it will give you like sequel

184
00:06:51,840 --> 00:06:55,229
injection cross-site scripting stuff

185
00:06:53,400 --> 00:06:57,510
like that

186
00:06:55,230 --> 00:06:59,730
the other one is AWS shields which

187
00:06:57,510 --> 00:07:03,360
basically is the managed service for

188
00:06:59,730 --> 00:07:05,250
denial of service protection actually by

189
00:07:03,360 --> 00:07:06,870
default on AWS already gives you this

190
00:07:05,250 --> 00:07:08,100
surface so anything you explore every

191
00:07:06,870 --> 00:07:08,610
time you expose something to the

192
00:07:08,100 --> 00:07:10,710
Internet

193
00:07:08,610 --> 00:07:13,140
AWS will give you this service it's

194
00:07:10,710 --> 00:07:14,729
already turned on for free but if you

195
00:07:13,140 --> 00:07:17,610
want to have like another level of

196
00:07:14,730 --> 00:07:21,810
protection they offer like a pro AWS

197
00:07:17,610 --> 00:07:24,570
shield advanced and then 2 nd diagram of

198
00:07:21,810 --> 00:07:27,690
Hama spa we have AWS route 53 which is

199
00:07:24,570 --> 00:07:29,460
basically our DNS provider and it's also

200
00:07:27,690 --> 00:07:30,660
have high availability manage and s

201
00:07:29,460 --> 00:07:33,330
provider and one of the cool things

202
00:07:30,660 --> 00:07:35,430
about browse 53 is that it does help

203
00:07:33,330 --> 00:07:37,109
check so it can it can see if for

204
00:07:35,430 --> 00:07:39,120
example if I had another load balancer

205
00:07:37,110 --> 00:07:40,620
and it does help check and it sees that

206
00:07:39,120 --> 00:07:42,360
this world balancer failed if I had a

207
00:07:40,620 --> 00:07:44,070
pair of oil infrastructure right here it

208
00:07:42,360 --> 00:07:46,050
would just stop routing to this one at

209
00:07:44,070 --> 00:07:47,669
the DNS level it would stop routing to

210
00:07:46,050 --> 00:07:49,470
this one it will just run to a parallel

211
00:07:47,669 --> 00:07:53,900
infrastructure which could or could not

212
00:07:49,470 --> 00:07:56,820
be connected to the same RDS instances

213
00:07:53,900 --> 00:08:00,450
to finish this off you notice that

214
00:07:56,820 --> 00:08:03,050
there's an icon here for kms and kms is

215
00:08:00,450 --> 00:08:05,789
enabled here here and here so database

216
00:08:03,050 --> 00:08:07,740
NFS share in the virtual machines and

217
00:08:05,790 --> 00:08:09,750
it's basically this is AWS key

218
00:08:07,740 --> 00:08:12,720
management system it allows you to

219
00:08:09,750 --> 00:08:13,860
create and manage keys and the cool

220
00:08:12,720 --> 00:08:16,169
thing about this is that it's really

221
00:08:13,860 --> 00:08:17,940
easy to turn on on several different AWS

222
00:08:16,169 --> 00:08:19,770
services because well integration is

223
00:08:17,940 --> 00:08:22,469
just there and it uses hardware security

224
00:08:19,770 --> 00:08:27,900
models for well basically for validation

225
00:08:22,470 --> 00:08:29,430
so how do we put all of this together so

226
00:08:27,900 --> 00:08:30,570
we start off by creating the V PC and

227
00:08:29,430 --> 00:08:31,950
prepare the firewalls that's the

228
00:08:30,570 --> 00:08:34,799
security group so we do all of that

229
00:08:31,950 --> 00:08:37,289
after that that's done we create a PDF s

230
00:08:34,799 --> 00:08:39,929
shares and FS so we create on instance

231
00:08:37,289 --> 00:08:41,819
in our ta RDS we create the operating

232
00:08:39,929 --> 00:08:43,468
system and mount the NFS share we can

233
00:08:41,820 --> 00:08:44,820
figure with wicket we do anything that

234
00:08:43,469 --> 00:08:47,730
we want to do with it

235
00:08:44,820 --> 00:08:50,280
and that includes well and you can

236
00:08:47,730 --> 00:08:51,680
include configuration of maze pair as

237
00:08:50,280 --> 00:08:54,630
well

238
00:08:51,680 --> 00:08:56,469
after you use this as a source you will

239
00:08:54,630 --> 00:08:58,240
use this am i as the

240
00:08:56,470 --> 00:09:00,370
for new instances and I will show you

241
00:08:58,240 --> 00:09:03,820
that in a little bit when you configure

242
00:09:00,370 --> 00:09:06,280
miss you will configure miss in the NFS

243
00:09:03,820 --> 00:09:07,870
mounts so it would not be in the single

244
00:09:06,280 --> 00:09:10,600
instance it will be in the instance but

245
00:09:07,870 --> 00:09:12,490
it's actually mounted on an FS share and

246
00:09:10,600 --> 00:09:13,780
when you connect when you do the my

247
00:09:12,490 --> 00:09:15,520
sequel configuration of minutes we are

248
00:09:13,780 --> 00:09:18,040
actually going to do that for the RDS so

249
00:09:15,520 --> 00:09:19,569
you connected to RDS and then you create

250
00:09:18,040 --> 00:09:21,610
the auto scaling group which I will show

251
00:09:19,570 --> 00:09:23,200
also in a little bit you can figure your

252
00:09:21,610 --> 00:09:25,840
application volt balancer you can figure

253
00:09:23,200 --> 00:09:27,160
the health checks one of the tips for

254
00:09:25,840 --> 00:09:28,900
this is that if you are running miss

255
00:09:27,160 --> 00:09:31,660
behind the world balancer if you want to

256
00:09:28,900 --> 00:09:33,880
do health checks don't do health check

257
00:09:31,660 --> 00:09:36,130
against like users slash walk in because

258
00:09:33,880 --> 00:09:39,130
that's too heavy have like an HTML file

259
00:09:36,130 --> 00:09:41,500
static HTML file just to return and okay

260
00:09:39,130 --> 00:09:43,720
and do the health check against that so

261
00:09:41,500 --> 00:09:47,800
after you do that you configure the DNS

262
00:09:43,720 --> 00:09:48,880
you basically can use ASM from a device

263
00:09:47,800 --> 00:09:50,920
as well to issue the assistive

264
00:09:48,880 --> 00:09:52,360
certificates and that will provision and

265
00:09:50,920 --> 00:09:53,770
install the certificate so you don't

266
00:09:52,360 --> 00:09:55,510
have to worry about maintaining any

267
00:09:53,770 --> 00:09:57,640
certificates and I will talk about the

268
00:09:55,510 --> 00:09:59,620
actual certificates in Miss in a little

269
00:09:57,640 --> 00:10:01,360
bit and if you want enable Web

270
00:09:59,620 --> 00:10:03,640
Application Firewall or if you want to

271
00:10:01,360 --> 00:10:05,530
publish it on a CDN

272
00:10:03,640 --> 00:10:10,330
so a content distribution network you

273
00:10:05,530 --> 00:10:13,060
can you can do that as well now this is

274
00:10:10,330 --> 00:10:14,740
I mean all of this is basically an

275
00:10:13,060 --> 00:10:16,359
installation that you can do on a single

276
00:10:14,740 --> 00:10:18,910
machine and you can do in separate

277
00:10:16,360 --> 00:10:21,610
machines it's really up to you the only

278
00:10:18,910 --> 00:10:23,740
thing that is probably a benefit of this

279
00:10:21,610 --> 00:10:24,880
is the resiliency and the performance

280
00:10:23,740 --> 00:10:26,830
that you're gonna get out of this

281
00:10:24,880 --> 00:10:29,860
installation and one of the things I

282
00:10:26,830 --> 00:10:31,570
thought would be cool to show is so you

283
00:10:29,860 --> 00:10:32,920
can there's actually so this is actually

284
00:10:31,570 --> 00:10:34,570
running behind the website so if you

285
00:10:32,920 --> 00:10:37,449
want to go to a specific website and see

286
00:10:34,570 --> 00:10:38,770
this you can but you'll have no login so

287
00:10:37,450 --> 00:10:41,170
you'll basically see what you see like

288
00:10:38,770 --> 00:10:42,730
users and user slash login so it's not

289
00:10:41,170 --> 00:10:44,829
very useful so what I thought I will do

290
00:10:42,730 --> 00:10:46,360
is instead of viewing that or instead of

291
00:10:44,830 --> 00:10:47,830
like refreshing your web page and you

292
00:10:46,360 --> 00:10:49,720
saw and you would be able to see like

293
00:10:47,830 --> 00:10:51,970
the page loading up I thought about

294
00:10:49,720 --> 00:10:54,760
creating some chaos around miss

295
00:10:51,970 --> 00:10:56,680
infrastructure and oh sorry and the

296
00:10:54,760 --> 00:10:59,020
first the first test what we're going to

297
00:10:56,680 --> 00:11:01,359
do is basically a path she would fail

298
00:10:59,020 --> 00:11:04,870
right so you have your instance

299
00:11:01,360 --> 00:11:07,630
and for some reason Apache fails and by

300
00:11:04,870 --> 00:11:09,160
Apache failure I mean that the the file

301
00:11:07,630 --> 00:11:11,170
that we are using to do the help

302
00:11:09,160 --> 00:11:12,640
it would not respond so it we would get

303
00:11:11,170 --> 00:11:14,410
like a timeout or something so the

304
00:11:12,640 --> 00:11:15,640
application load balancer will not be

305
00:11:14,410 --> 00:11:17,980
able to retrieve the file that we are

306
00:11:15,640 --> 00:11:21,400
using to do the to do the health check

307
00:11:17,980 --> 00:11:23,140
and once did this happens our

308
00:11:21,400 --> 00:11:24,819
application vault balancer will say okay

309
00:11:23,140 --> 00:11:27,100
so this particular instance the one that

310
00:11:24,820 --> 00:11:28,960
I don't get a reply from this instance

311
00:11:27,100 --> 00:11:30,970
I'm gonna consider this instance faulty

312
00:11:28,960 --> 00:11:32,710
and I'm going to start a new one put

313
00:11:30,970 --> 00:11:34,210
this one behind the load balancer and

314
00:11:32,710 --> 00:11:35,980
terminate this one because clearly

315
00:11:34,210 --> 00:11:37,510
something is happening here and that's

316
00:11:35,980 --> 00:11:40,240
the approach that we're taking so

317
00:11:37,510 --> 00:11:41,770
ephemeral almost instances so instances

318
00:11:40,240 --> 00:11:44,080
they lose their importance because

319
00:11:41,770 --> 00:11:45,760
they're just instances at spawn and the

320
00:11:44,080 --> 00:11:47,950
important part is actually in NFS share

321
00:11:45,760 --> 00:11:49,450
so any instance is like you can just

322
00:11:47,950 --> 00:11:52,120
throw it away if something bad happens

323
00:11:49,450 --> 00:11:54,610
to it and this is what this video will

324
00:11:52,120 --> 00:11:56,110
show I think ok here we go I'm not by

325
00:11:54,610 --> 00:11:58,330
the way I'm not brave enough to do the

326
00:11:56,110 --> 00:12:00,610
demos live so I'm sorry for that so

327
00:11:58,330 --> 00:12:03,730
there's records or recordings or

328
00:12:00,610 --> 00:12:05,440
everything so I will I will talk through

329
00:12:03,730 --> 00:12:07,780
this so basically we have our world

330
00:12:05,440 --> 00:12:09,910
balancer here and you see that our world

331
00:12:07,780 --> 00:12:12,130
balancer has two targets which are now

332
00:12:09,910 --> 00:12:13,420
considered healthy and this is basically

333
00:12:12,130 --> 00:12:14,860
because they are passing the health

334
00:12:13,420 --> 00:12:18,250
checks that we have configured for them

335
00:12:14,860 --> 00:12:19,780
and the thing that I'm gonna do after

336
00:12:18,250 --> 00:12:21,850
this is I'm going to go to the instances

337
00:12:19,780 --> 00:12:23,260
listing and I'm gonna get the private

338
00:12:21,850 --> 00:12:25,180
IPS and you'll see that these are none

339
00:12:23,260 --> 00:12:26,410
rattleball ivory addresses because now

340
00:12:25,180 --> 00:12:28,120
that none of these instances are

341
00:12:26,410 --> 00:12:30,100
actually exposed to the internet and

342
00:12:28,120 --> 00:12:32,410
that half as you could saw in or as you

343
00:12:30,100 --> 00:12:34,060
can see in the diagram there so I'm

344
00:12:32,410 --> 00:12:36,400
basically in my bastion house right

345
00:12:34,060 --> 00:12:39,609
there and I'm connecting to my private

346
00:12:36,400 --> 00:12:41,470
instances which my security group rules

347
00:12:39,610 --> 00:12:43,990
allow obviously so I have connections

348
00:12:41,470 --> 00:12:46,270
from my public subnet to my private

349
00:12:43,990 --> 00:12:48,870
subnet and I'm basically going to stop

350
00:12:46,270 --> 00:12:48,870
Apache here

351
00:12:56,670 --> 00:13:02,949
okay so stop the party everything is

352
00:13:00,639 --> 00:13:04,120
still okay after the time that you

353
00:13:02,949 --> 00:13:05,849
define in the health checks can be

354
00:13:04,120 --> 00:13:08,199
configured to whatever time you want

355
00:13:05,850 --> 00:13:11,410
after a little bit it will be considered

356
00:13:08,199 --> 00:13:13,420
unhealthy so this means that the

357
00:13:11,410 --> 00:13:15,670
registered instance has a problem so if

358
00:13:13,420 --> 00:13:17,110
I go to my instances well immediately

359
00:13:15,670 --> 00:13:18,969
nothing will happen because there's

360
00:13:17,110 --> 00:13:21,040
still some time but if I if I go back to

361
00:13:18,970 --> 00:13:22,839
my load balancer you can see here that

362
00:13:21,040 --> 00:13:24,699
it's actually draining connection so the

363
00:13:22,839 --> 00:13:26,560
load balancer knows that there's a

364
00:13:24,699 --> 00:13:28,180
problem with that instance and it will

365
00:13:26,560 --> 00:13:29,819
terminate the connections that are going

366
00:13:28,180 --> 00:13:33,040
through or going through that instance

367
00:13:29,819 --> 00:13:35,620
and just find a better way to route the

368
00:13:33,040 --> 00:13:37,599
client to the well to do working

369
00:13:35,620 --> 00:13:39,370
instances and as soon as that happens

370
00:13:37,600 --> 00:13:41,949
you see that the new instance is created

371
00:13:39,370 --> 00:13:44,589
this actually is is an instance that

372
00:13:41,949 --> 00:13:46,300
holds the same configuration same code

373
00:13:44,589 --> 00:13:49,990
same everything

374
00:13:46,300 --> 00:13:52,329
and once this instance is started if you

375
00:13:49,990 --> 00:13:54,250
go back to the world balancer still

376
00:13:52,329 --> 00:13:56,920
nothing there but after a while you see

377
00:13:54,250 --> 00:13:58,660
here initials so it's been registered in

378
00:13:56,920 --> 00:13:59,889
the load balancer so now the load

379
00:13:58,660 --> 00:14:01,959
balancer knows that there's a new

380
00:13:59,889 --> 00:14:03,730
instance there until its status is

381
00:14:01,959 --> 00:14:06,119
healthy nothing will happen so the world

382
00:14:03,730 --> 00:14:09,550
balancer started an instance here and

383
00:14:06,120 --> 00:14:11,199
this after this moves from unhealthy to

384
00:14:09,550 --> 00:14:13,060
healthy or changes from unhealthy to

385
00:14:11,199 --> 00:14:15,250
healthy it will say okay this health

386
00:14:13,060 --> 00:14:16,660
this instance is good this will be the

387
00:14:15,250 --> 00:14:19,959
one that we're going to be sending the

388
00:14:16,660 --> 00:14:22,540
traffic to now every time that this

389
00:14:19,959 --> 00:14:25,180
happens you can or not it's up to you

390
00:14:22,540 --> 00:14:28,089
get a notification of a new instance

391
00:14:25,180 --> 00:14:29,920
that was launched you see that the

392
00:14:28,089 --> 00:14:31,540
faulty instance was removed and just

393
00:14:29,920 --> 00:14:34,509
like that it disappeared it was

394
00:14:31,540 --> 00:14:36,069
terminated in snow longer parts of the

395
00:14:34,509 --> 00:14:37,990
it's no longer part of the involved

396
00:14:36,069 --> 00:14:41,849
balancer and you also get a notification

397
00:14:37,990 --> 00:14:45,579
saying that the instance was terminated

398
00:14:41,850 --> 00:14:47,380
okay that was one example we have

399
00:14:45,579 --> 00:14:49,750
another one for CPU as this one is is

400
00:14:47,380 --> 00:14:52,180
similar so it's not a very long video

401
00:14:49,750 --> 00:14:54,939
but basically what's gonna happen is I'm

402
00:14:52,180 --> 00:14:56,979
going to stress out my CPUs just you I

403
00:14:54,939 --> 00:15:00,250
don't know show performance degradation

404
00:14:56,980 --> 00:15:01,509
or performance problems and I sped up

405
00:15:00,250 --> 00:15:04,180
the video a little bit just so you don't

406
00:15:01,509 --> 00:15:05,620
have to endure through this but I'm

407
00:15:04,180 --> 00:15:07,839
basically doing the same thing so I'm

408
00:15:05,620 --> 00:15:09,500
going to the two nodes and I'm basically

409
00:15:07,839 --> 00:15:12,350
putting their CPU at 100

410
00:15:09,500 --> 00:15:13,820
and I will show you why the application

411
00:15:12,350 --> 00:15:15,830
load balancer will consider this a

412
00:15:13,820 --> 00:15:17,990
problem but basically what I'm doing is

413
00:15:15,830 --> 00:15:28,130
I'm stressing the CPUs and I'm putting

414
00:15:17,990 --> 00:15:29,930
them at 100% okay so this is actually

415
00:15:28,130 --> 00:15:31,970
interesting so it sees here you can see

416
00:15:29,930 --> 00:15:34,160
here that the average CPU should be at

417
00:15:31,970 --> 00:15:35,960
50% so this is a scaling policy so I

418
00:15:34,160 --> 00:15:37,760
told my out provocation volt balancer

419
00:15:35,960 --> 00:15:39,740
which is aware of the status of my

420
00:15:37,760 --> 00:15:42,770
instances that if something happens in

421
00:15:39,740 --> 00:15:44,150
which my overall PI doesn't have 50

422
00:15:42,770 --> 00:15:46,490
percent of performance it should

423
00:15:44,150 --> 00:15:48,890
consider that the problem and it should

424
00:15:46,490 --> 00:15:51,560
scale and add additional instances and

425
00:15:48,890 --> 00:15:53,840
because both of them were at 100% CPU

426
00:15:51,560 --> 00:15:55,640
utilization they can see the application

427
00:15:53,840 --> 00:15:58,010
volt balancer considered them both

428
00:15:55,640 --> 00:15:59,720
faulty and it started actually two

429
00:15:58,010 --> 00:16:05,090
different instances so you see here that

430
00:15:59,720 --> 00:16:07,220
it launched two new ec2 instances and it

431
00:16:05,090 --> 00:16:09,140
will basically do the exact same process

432
00:16:07,220 --> 00:16:11,450
again so because the CPU was stressing

433
00:16:09,140 --> 00:16:13,069
out it started two new instances the old

434
00:16:11,450 --> 00:16:14,420
ones will be terminated the new ones

435
00:16:13,070 --> 00:16:17,090
will be registered in the application

436
00:16:14,420 --> 00:16:18,979
world balancer and well in this case

437
00:16:17,090 --> 00:16:20,450
because we only have two instances and

438
00:16:18,980 --> 00:16:22,120
you're obviously we have to have to do

439
00:16:20,450 --> 00:16:24,620
some sizing when you're doing this

440
00:16:22,120 --> 00:16:26,300
because we only have two instances and I

441
00:16:24,620 --> 00:16:28,040
stressed out both of them we are

442
00:16:26,300 --> 00:16:30,829
obviously gonna have some downtime or at

443
00:16:28,040 --> 00:16:34,339
least have a performance it but you

444
00:16:30,830 --> 00:16:37,340
probably didn't have to be as a restless

445
00:16:34,340 --> 00:16:40,040
and this one is just determination so if

446
00:16:37,340 --> 00:16:41,810
someone for some reason happened to just

447
00:16:40,040 --> 00:16:43,640
go to the panel delete the virtual

448
00:16:41,810 --> 00:16:45,410
machine because we said that we need at

449
00:16:43,640 --> 00:16:47,750
least two instances for this to perform

450
00:16:45,410 --> 00:16:49,910
correctly AWS will just start a new

451
00:16:47,750 --> 00:16:54,070
instance to maintain that same level of

452
00:16:49,910 --> 00:16:56,360
service so if I do a terminate here

453
00:16:54,070 --> 00:16:58,160
after a little bit you see that it's

454
00:16:56,360 --> 00:17:03,770
shutting down the is shutting down the

455
00:16:58,160 --> 00:17:05,930
nodes and I see here these are two so I

456
00:17:03,770 --> 00:17:07,910
always have to have two instances and

457
00:17:05,930 --> 00:17:13,070
because I terminated one it immediately

458
00:17:07,910 --> 00:17:14,210
started a new instance and yeah and the

459
00:17:13,069 --> 00:17:15,560
rest of the video it's a basic we

460
00:17:14,210 --> 00:17:16,819
already saw so you'll get an email

461
00:17:15,560 --> 00:17:20,329
saying that an instance of sermonette

462
00:17:16,819 --> 00:17:22,069
and nuances was added etc etc so going

463
00:17:20,329 --> 00:17:22,730
forward with this I think there's some

464
00:17:22,069 --> 00:17:25,220
room for

465
00:17:22,730 --> 00:17:27,560
Here I am having some issues with Apache

466
00:17:25,220 --> 00:17:30,650
I'm not exactly sure what's so maybe

467
00:17:27,560 --> 00:17:32,120
consider engines I don't know one of the

468
00:17:30,650 --> 00:17:34,010
things that would also be interesting

469
00:17:32,120 --> 00:17:36,590
and that obviously depends very much on

470
00:17:34,010 --> 00:17:38,420
your wrist case of Miss is have for

471
00:17:36,590 --> 00:17:40,520
example an auto scaling groups for the

472
00:17:38,420 --> 00:17:45,640
reed replicas so I don't think I have

473
00:17:40,520 --> 00:17:45,639
you know it's so if you go back here

474
00:17:46,060 --> 00:17:51,649
here so for example this part of the

475
00:17:49,580 --> 00:17:53,510
database is actually for disaster

476
00:17:51,650 --> 00:17:55,820
recovery so when you spawn an RDS

477
00:17:53,510 --> 00:17:57,379
instance it will create your main

478
00:17:55,820 --> 00:18:00,080
database and it will create a second

479
00:17:57,380 --> 00:18:01,580
database and this is the the one that in

480
00:18:00,080 --> 00:18:03,770
case something happens to this one it

481
00:18:01,580 --> 00:18:05,330
will self update the DNS entry so that

482
00:18:03,770 --> 00:18:07,340
your configuration will go to the one

483
00:18:05,330 --> 00:18:10,310
that is working the read replica however

484
00:18:07,340 --> 00:18:12,230
is not for disaster recovery so the idea

485
00:18:10,310 --> 00:18:14,149
that I had is if you have some systems

486
00:18:12,230 --> 00:18:16,040
that are using miss pin a programmatic

487
00:18:14,150 --> 00:18:18,230
way let's say for example that your

488
00:18:16,040 --> 00:18:20,149
extracting information out of miss to

489
00:18:18,230 --> 00:18:22,820
put on your suit cutter or snort you're

490
00:18:20,150 --> 00:18:24,590
basically doing the IDS export or the

491
00:18:22,820 --> 00:18:26,480
needs export maybe you could have an

492
00:18:24,590 --> 00:18:29,090
autopsy I mean group or just consult

493
00:18:26,480 --> 00:18:30,230
this read replica directly directly and

494
00:18:29,090 --> 00:18:31,820
you would get all of this information

495
00:18:30,230 --> 00:18:32,960
from the read replica because you don't

496
00:18:31,820 --> 00:18:34,790
have to interact with it you're just

497
00:18:32,960 --> 00:18:36,770
basically exporting information out of

498
00:18:34,790 --> 00:18:38,570
Miss you would do that through here and

499
00:18:36,770 --> 00:18:40,910
you would leave your normal database for

500
00:18:38,570 --> 00:18:43,730
your everyday use that's just an idea

501
00:18:40,910 --> 00:18:46,220
it's really I can do many different ways

502
00:18:43,730 --> 00:18:49,370
so the other thing is I'm going to look

503
00:18:46,220 --> 00:18:52,820
into using AWS domestic cash Redis in

504
00:18:49,370 --> 00:18:54,860
this specific case to see if we can gain

505
00:18:52,820 --> 00:18:56,870
some performance benefits out of this I

506
00:18:54,860 --> 00:18:59,840
didn't do a lot of metrics with this

507
00:18:56,870 --> 00:19:01,310
my main focus also because the metrics

508
00:18:59,840 --> 00:19:02,990
are very much dependent on the instances

509
00:19:01,310 --> 00:19:06,080
that you are using and I was using

510
00:19:02,990 --> 00:19:09,440
mostly very low level or not expensive

511
00:19:06,080 --> 00:19:11,990
instances so I don't have a lot of

512
00:19:09,440 --> 00:19:13,850
performance metrics and the other thing

513
00:19:11,990 --> 00:19:15,290
that I want to do is basically do the

514
00:19:13,850 --> 00:19:18,350
DNS failover for a different application

515
00:19:15,290 --> 00:19:20,389
load balancer so if route 53 the DNS the

516
00:19:18,350 --> 00:19:22,070
part that we use to access miss if it

517
00:19:20,390 --> 00:19:24,710
does the health check and if it sees

518
00:19:22,070 --> 00:19:26,540
that volt balancer is not responding it

519
00:19:24,710 --> 00:19:28,760
will just crowd us through a different

520
00:19:26,540 --> 00:19:32,180
application load balancer

521
00:19:28,760 --> 00:19:33,410
now this is not a very technical talk I

522
00:19:32,180 --> 00:19:36,200
am aware of that

523
00:19:33,410 --> 00:19:36,380
so I will put it's not up there yet but

524
00:19:36,200 --> 00:19:39,020
I

525
00:19:36,380 --> 00:19:41,570
we'll put all of this like et CFS tab

526
00:19:39,020 --> 00:19:44,030
configurations Apache configurations so

527
00:19:41,570 --> 00:19:46,370
everything that went into this I will

528
00:19:44,030 --> 00:19:48,740
put up in this github repo in case

529
00:19:46,370 --> 00:19:50,510
you're considering doing this and yeah

530
00:19:48,740 --> 00:19:52,670
like I said if you if you have any

531
00:19:50,510 --> 00:19:54,950
questions or the idea behind this I know

532
00:19:52,670 --> 00:19:57,500
I said it's not about AWS and I then

533
00:19:54,950 --> 00:19:59,180
gave a lot of examples about AWS but the

534
00:19:57,500 --> 00:20:00,920
idea here is to talk more about a high

535
00:19:59,180 --> 00:20:02,330
performance or a high veil not high

536
00:20:00,920 --> 00:20:02,810
performance like in the talk that we saw

537
00:20:02,330 --> 00:20:05,449
before

538
00:20:02,810 --> 00:20:07,490
that's that I can't do that even if I

539
00:20:05,450 --> 00:20:09,440
want it but from an infrastructure

540
00:20:07,490 --> 00:20:11,450
perspective perspective and architecture

541
00:20:09,440 --> 00:20:14,570
perspective to get the conversation

542
00:20:11,450 --> 00:20:16,160
started on high availability so if you

543
00:20:14,570 --> 00:20:17,840
have any questions yeah I feel free I'm

544
00:20:16,160 --> 00:20:22,850
also on twitter if you want to talk more

545
00:20:17,840 --> 00:20:24,590
about this or AWS yeah so first of all

546
00:20:22,850 --> 00:20:26,659
thanks because this is really great

547
00:20:24,590 --> 00:20:28,159
stuff that you presented but one thing I

548
00:20:26,660 --> 00:20:29,750
was wondering about is did you ever run

549
00:20:28,160 --> 00:20:31,880
into a situation with Miss where you

550
00:20:29,750 --> 00:20:33,620
felt that we kind of had to work against

551
00:20:31,880 --> 00:20:39,230
it you to make this work so was there

552
00:20:33,620 --> 00:20:42,110
any blocker for you that we could not

553
00:20:39,230 --> 00:20:43,700
necessarily miss peel is not this

554
00:20:42,110 --> 00:20:44,990
sometimes so the approach that we took

555
00:20:43,700 --> 00:20:46,670
here is basically the approach that you

556
00:20:44,990 --> 00:20:48,380
would take to have any high available by

557
00:20:46,670 --> 00:20:50,420
the application in a specific case in

558
00:20:48,380 --> 00:20:53,450
other ways there was nothing specific in

559
00:20:50,420 --> 00:20:55,250
Miss that was complicated there there's

560
00:20:53,450 --> 00:20:58,130
a few situations where I was getting a

561
00:20:55,250 --> 00:21:00,550
lot of lag Holtz requests and that's

562
00:20:58,130 --> 00:21:03,200
this is where I paint you on Gator

563
00:21:00,550 --> 00:21:05,149
because I still need to walk into that

564
00:21:03,200 --> 00:21:06,440
and and I will know that this is here

565
00:21:05,150 --> 00:21:08,600
and that I will put everything up on

566
00:21:06,440 --> 00:21:10,160
github I will talk with you guys because

567
00:21:08,600 --> 00:21:13,120
there's definitely some things that's

568
00:21:10,160 --> 00:21:13,120
because work there yeah

569
00:21:25,990 --> 00:21:29,670
that

570
00:21:27,570 --> 00:21:31,200
good question very very good question no

571
00:21:29,670 --> 00:21:31,770
I haven't know so I haven't done

572
00:21:31,200 --> 00:21:33,570
anything

573
00:21:31,770 --> 00:21:36,210
I used to reform quite a bit in

574
00:21:33,570 --> 00:21:38,970
transformation quite a bit to an extent

575
00:21:36,210 --> 00:21:41,550
the miss quelled packet or a Mis

576
00:21:38,970 --> 00:21:44,130
they're actually built with packer and

577
00:21:41,550 --> 00:21:47,430
we do some out of my automation around

578
00:21:44,130 --> 00:21:49,230
that but we never actually done a class

579
00:21:47,430 --> 00:21:52,470
formation or terraform deployment of

580
00:21:49,230 --> 00:21:54,060
Miss that's pretty interesting it will

581
00:21:52,470 --> 00:21:54,690
be I don't know maybe quite an

582
00:21:54,060 --> 00:21:56,669
undertaking

583
00:21:54,690 --> 00:21:59,430
maybe with these pieces of the puzzle it

584
00:21:56,670 --> 00:22:01,740
will be quite interesting to have like

585
00:21:59,430 --> 00:22:03,150
malformation I will absolutely walk into

586
00:22:01,740 --> 00:22:07,010
that but if you're working on that and

587
00:22:03,150 --> 00:22:07,010
if you want to ping me yeah please yeah

588
00:22:18,800 --> 00:22:24,649
yeah yeah yeah yeah yeah absolutely

589
00:22:22,790 --> 00:22:28,220
absolutely that's one of the things so

590
00:22:24,650 --> 00:22:30,590
on top of the the Cinco Cinco Cinco

591
00:22:28,220 --> 00:22:33,020
black holes white holes yeah so on top

592
00:22:30,590 --> 00:22:34,730
of that we I definitely work it and need

593
00:22:33,020 --> 00:22:39,280
to walk into that as well because that

594
00:22:34,730 --> 00:22:39,280
is definitely an issue absolutely yeah

595
00:22:43,720 --> 00:22:48,550
do we should I understand so that means

596
00:22:46,190 --> 00:22:50,630
right no you can have a slave and master

597
00:22:48,550 --> 00:22:54,080
but you're gonna do a few masters at

598
00:22:50,630 --> 00:22:57,050
some times okay that makes sense for the

599
00:22:54,080 --> 00:23:06,860
ready sex aspect you mentioned elastic

600
00:22:57,050 --> 00:23:09,139
cash is the standard credit protocol so

601
00:23:06,860 --> 00:23:10,879
actually ElastiCache is a the VESA

602
00:23:09,140 --> 00:23:13,520
software they have they have memcache

603
00:23:10,880 --> 00:23:16,490
and they have Redis so I know that you

604
00:23:13,520 --> 00:23:19,010
guys are using Redis so I mentioned

605
00:23:16,490 --> 00:23:21,800
Redis in ElastiCache just as an

606
00:23:19,010 --> 00:23:24,830
alternative of moving this off of the of

607
00:23:21,800 --> 00:23:26,450
the instance to to like sort of divide

608
00:23:24,830 --> 00:23:27,710
the responsibility away from the

609
00:23:26,450 --> 00:23:30,110
instance and move it to another surface

610
00:23:27,710 --> 00:23:32,450
to have more components into this and

611
00:23:30,110 --> 00:23:34,939
elastic cash with Redis was the one that

612
00:23:32,450 --> 00:23:40,940
I thought could more easily fit in to

613
00:23:34,940 --> 00:23:41,540
what you guys already did yeah yeah yeah

614
00:23:40,940 --> 00:23:43,850
exactly

615
00:23:41,540 --> 00:23:45,560
that's yeah that's that's the idea

616
00:23:43,850 --> 00:23:48,490
behind the future improvement is to also

617
00:23:45,560 --> 00:23:48,490
work a little bit on that

618
00:24:07,830 --> 00:24:13,049
yes that's a good question so the only

619
00:24:10,289 --> 00:24:17,070
reason behind EFS is because you don't

620
00:24:13,049 --> 00:24:20,399
have to worry about roads or basically

621
00:24:17,070 --> 00:24:22,918
any mounting problems or any mounting

622
00:24:20,399 --> 00:24:24,989
issues because of the mount helper that

623
00:24:22,919 --> 00:24:27,210
Amazon makes available it's quite easy

624
00:24:24,990 --> 00:24:29,130
to mount that as an NFS share but you

625
00:24:27,210 --> 00:24:31,110
can you can basically do it with

626
00:24:29,130 --> 00:24:33,000
anything as long as it's something that

627
00:24:31,110 --> 00:24:35,729
is transversal to all of the instances

628
00:24:33,000 --> 00:24:37,350
you could go with with anything the cool

629
00:24:35,730 --> 00:24:39,120
thing about EFS is that for the

630
00:24:37,350 --> 00:24:40,860
operating system it will show up as a

631
00:24:39,120 --> 00:24:43,860
very simple file system you can mount it

632
00:24:40,860 --> 00:24:47,219
anywhere you want and that can be for

633
00:24:43,860 --> 00:24:48,570
example for www miss so that that's cool

634
00:24:47,220 --> 00:24:50,490
but if you want to do it with something

635
00:24:48,570 --> 00:24:59,490
else you can you can absolutely can do

636
00:24:50,490 --> 00:25:00,370
that no problem yeah okay thank you very

637
00:24:59,490 --> 00:25:05,110
much

638
00:25:00,370 --> 00:25:05,110
[Applause]

