1
00:00:00,000 --> 00:00:04,420
where you can view different places
where the attacks can happen when a user

2
00:00:04,420 --> 00:00:08,760
first connects to a service the first
time you log into a nap either in a web

3
00:00:08,760 --> 00:00:13,290
browser or a few authenticating happen
your phones in the service somehow

4
00:00:13,290 --> 00:00:18,279
there's an exchange of credentials there
and then as you use the app as you're

5
00:00:18,279 --> 00:00:20,740
sitting there in the browser clicking on
different things when you're a blip in

6
00:00:20,740 --> 00:00:24,049
two different screens packets go back
and forth every one of those packets be

7
00:00:24,050 --> 00:00:26,930
somehow authenticated so the server
knows it's you because it's a stateless

8
00:00:26,930 --> 00:00:33,010
protocol and then there there's sort of
a restart functionality like like when

9
00:00:33,010 --> 00:00:35,649
you log in again so if you haven't
touched the app and a month or two

10
00:00:35,649 --> 00:00:38,820
months you fired up on your phone is
still knows you're there

11
00:00:38,820 --> 00:00:41,820
chances are pretty good any kind of
session tokens will expire so there's

12
00:00:41,820 --> 00:00:47,090
something on the device that is still
able to prove to the server that that

13
00:00:47,090 --> 00:00:51,390
you're still you without you having to
enter your password again so in all

14
00:00:51,390 --> 00:00:55,010
these cases you're trying to attack was
trying to steal credentials if all they

15
00:00:55,010 --> 00:01:01,239
got access to the network you know the
disabled elastin and try and if they

16
00:01:01,239 --> 00:01:03,890
have access to the server the server
network perhaps they can catch the

17
00:01:03,890 --> 00:01:07,840
credentials as they slide by on the way
to the application I've certainly seen

18
00:01:07,840 --> 00:01:12,460
some applications where the the
encryption doesn't make it all the way

19
00:01:12,460 --> 00:01:18,820
down to the end servers up the load
balancer as hell is stripped off here it

20
00:01:18,820 --> 00:01:22,179
stripped off and then it goes down to
the servers over HTTP all internal

21
00:01:22,180 --> 00:01:25,570
network so it's theoretically secure
attacker hacked one of those things

22
00:01:25,570 --> 00:01:29,889
amongst ECB don't see all the password
flying by I'm not sure how prevalent

23
00:01:29,890 --> 00:01:34,960
that designers but it's certainly
something that that does happen they can

24
00:01:34,960 --> 00:01:39,000
also attack in as it's being used if
you're actually able to breaking the

25
00:01:39,000 --> 00:01:44,299
server and and modified the the software
on the server on the client like on a

26
00:01:44,299 --> 00:01:49,920
desktop you could be longer and just as
their typing the keys and then obviously

27
00:01:49,920 --> 00:01:54,820
storage ceiling of after database server
or if you've got a client got tokenism

28
00:01:54,820 --> 00:02:01,770
the credentials stored on the iPhone
trying to extract that I mentioned

29
00:02:01,770 --> 00:02:06,990
sessions and certainly whenever you're
using the app and and sending request to

30
00:02:06,990 --> 00:02:09,369
the pets of those surveyed you can send
your password every single time if you

31
00:02:09,369 --> 00:02:13,620
want to do that kind of silly because
they put your password a greater risk so

32
00:02:13,620 --> 00:02:18,160
maybe you use a token the special go
that only last for an hour a day

33
00:02:18,160 --> 00:02:20,859
couple days something like that
everybody has a different perspective

34
00:02:20,860 --> 00:02:25,090
somewhat but the right expiration time
is so you send a token of saying here's

35
00:02:25,090 --> 00:02:30,470
my children here's my requests I'm gonna
get back at gift well concealed that

36
00:02:30,470 --> 00:02:34,430
token they can just send their own pack
up the services give me all your money

37
00:02:34,430 --> 00:02:39,470
why the service can give you cash gifts
and money the same time there's a

38
00:02:39,470 --> 00:02:44,800
full-featured web so one thing that
people can do is they can add something

39
00:02:44,800 --> 00:02:49,160
called the nonce to the token is
something that that's that's associate

40
00:02:49,160 --> 00:02:54,430
with that can only be used once the
server sees a request comes to forgive

41
00:02:54,430 --> 00:02:57,660
has got a token tokens are always gotten
onto I've never seen this nonsense ok

42
00:02:57,660 --> 00:03:01,510
all processes and then it writes that
monsoonal it listens as I've used this

43
00:03:01,510 --> 00:03:05,109
before an attacker replays that exact
same authentication with the different

44
00:03:05,110 --> 00:03:08,610
different payload the service going to
say I've seen as non-sport everything

45
00:03:08,610 --> 00:03:13,090
looked good but you used this before I'm
gonna do and that helps to prevent a

46
00:03:13,090 --> 00:03:16,910
replay attack where somebody can sniff
the connection get your credentials and

47
00:03:16,910 --> 00:03:22,040
just make requests as you may have to be
able to recreate that not all the

48
00:03:22,040 --> 00:03:24,950
nuances just a random number in the
server track so obviously you can just

49
00:03:24,950 --> 00:03:28,450
pick up your own minds so what you have
to do is somehow they're tied that

50
00:03:28,450 --> 00:03:33,220
cryptographically to the rest of the
credentials in the in the package it's

51
00:03:33,220 --> 00:03:37,190
also helpful to include a timestamp
alongside an answer or as part of the

52
00:03:37,190 --> 00:03:40,920
string is that would attract every
single thing you've ever said I can do

53
00:03:40,920 --> 00:03:44,140
say track the last five minutes worth of
stuff and if one comes in with an

54
00:03:44,140 --> 00:03:48,760
old-time stampa just throws it away and
again then the time simpson also had to

55
00:03:48,760 --> 00:03:51,920
be cryptographically tied everything
otherwise change that

56
00:03:51,920 --> 00:04:00,510
so now we can talk about some actual
systems

57
00:04:00,510 --> 00:04:05,709
there are dozens of of systems available
out there today that you people can use

58
00:04:05,709 --> 00:04:09,530
for authenticating use applications in
practice only if you were really in

59
00:04:09,530 --> 00:04:14,200
common use to describe five of them here
and i've seen maybe two or three years

60
00:04:14,200 --> 00:04:18,988
as many as four other systems beyond
that they're very rare maybe one or two

61
00:04:18,988 --> 00:04:24,840
customers like Oasis amal is a really
powerful spec its massive huge is crazy

62
00:04:24,840 --> 00:04:28,570
I've seen it once and I can't even
remember where that I saw as I was gonna

63
00:04:28,570 --> 00:04:31,349
put the news talking I can remember
there's so many different things that

64
00:04:31,350 --> 00:04:32,330
you can do with it

65
00:04:32,330 --> 00:04:36,698
most of the time it's going to be one of
these five system and of these five

66
00:04:36,699 --> 00:04:41,300
three of them are generally built into
the browser so it's it's a system that's

67
00:04:41,300 --> 00:04:46,160
available directly to a web back the
other ones lost one into our newly built

68
00:04:46,160 --> 00:04:52,020
in browser so they're really only
available for dedicated applications so

69
00:04:52,020 --> 00:04:56,880
authorization basic said he is writing
the password to the server Senate on the

70
00:04:56,880 --> 00:05:01,539
on the other line which is really done
send it as individual HTTP headers and

71
00:05:01,539 --> 00:05:08,310
as base 64 encoded string authorization
letter say it send it in the euro as and

72
00:05:08,310 --> 00:05:11,599
defined as equals and then the indy five
past I've seen all by all of these

73
00:05:11,599 --> 00:05:14,990
methods including the indy five pass
called out as if I pass which is very

74
00:05:14,990 --> 00:05:16,920
convenient

75
00:05:16,920 --> 00:05:24,100
so it works it's very simple is very
easy you can just build the form and

76
00:05:24,100 --> 00:05:28,010
your web page and submit it and the
server processes it it's it's it's

77
00:05:28,010 --> 00:05:32,180
simple you can't the server send back a
triple-double you authenticate header

78
00:05:32,180 --> 00:05:37,620
which which causes the browser to pop up
its own password form it's perfectly

79
00:05:37,620 --> 00:05:41,630
fine as long as you trust to tell us as
soon as tell us breaks you're screwed

80
00:05:41,630 --> 00:05:46,750
and the password gets the ball and again
using this as a session authenticator

81
00:05:46,750 --> 00:05:52,810
its past every single time increases the
risk of that disclosure and again never

82
00:05:52,810 --> 00:05:56,650
put him so that was the first thought
that was easy

83
00:05:56,650 --> 00:06:02,010
authorization Digest is somewhat more
complicated what happens with this is

84
00:06:02,010 --> 00:06:05,030
you connect to the server the services
ok give me some stuff

85
00:06:05,030 --> 00:06:09,010
here's some parameters declined combines
us parameters along with your your

86
00:06:09,010 --> 00:06:13,789
password and send up a token that's all
all those are cryptographically tied the

87
00:06:13,790 --> 00:06:16,820
password cell has never actually sent
over the network which is fantastic and

88
00:06:16,820 --> 00:06:19,280
the Packer can see this whole
transaction they can't do anything at

89
00:06:19,280 --> 00:06:26,210
all they can get your password so here's
a more detailed description client asked

90
00:06:26,210 --> 00:06:29,219
her what pages or something

91
00:06:29,220 --> 00:06:34,250
services ok good to me and use the
digest mode and here's a realm which is

92
00:06:34,250 --> 00:06:39,220
kind of a server namespace it might be
an application they might be a DNS name

93
00:06:39,220 --> 00:06:43,120
of the server something like that is a
random nonce here's the album we're

94
00:06:43,120 --> 00:06:48,310
gonna use which there's not really many
albums unfortunately and a QRP quality

95
00:06:48,310 --> 00:06:50,960
of protection

96
00:06:50,960 --> 00:06:54,900
the client takes those things take some
other data sometimes

97
00:06:54,900 --> 00:06:59,539
client non CNN announced counter
combines all those things with your

98
00:06:59,540 --> 00:07:00,280
password

99
00:07:00,280 --> 00:07:04,989
sends it back up so here's what is
actually doing it takes you use ready

100
00:07:04,990 --> 00:07:09,400
the realm the server gave you and your
password in plaintext separates them

101
00:07:09,400 --> 00:07:14,210
with Colin's take 75 hash of that
strength and it takes the nonce the

102
00:07:14,210 --> 00:07:18,900
server gave you the client counter the
non-stick line creates and the quality

103
00:07:18,900 --> 00:07:23,630
protection for those a string and then
takes the method impasse select get an

104
00:07:23,630 --> 00:07:27,600
application and slash logging joins all
those things together and added take

105
00:07:27,600 --> 00:07:32,050
that the method and device as well then
takes all those thousands gather so the

106
00:07:32,050 --> 00:07:37,479
hash those other four things in another
hash one big strength take 75 hash it

107
00:07:37,479 --> 00:07:41,870
out and send it back to this is what you
end up looking like the server the

108
00:07:41,870 --> 00:07:46,840
client sends back an HTTP header says
www authenticate digest and all this

109
00:07:46,840 --> 00:07:52,500
stuff it's all one great big line with
no returns just got the nonce the survey

110
00:07:52,500 --> 00:07:57,860
gave you that the only got the algorithm
opaque which is just a number of the

111
00:07:57,860 --> 00:08:03,000
survey gives you the client gives back
quality production some of the things

112
00:08:03,000 --> 00:08:10,310
like that I'm sorry this is what the
search term services so then here's his

113
00:08:10,310 --> 00:08:13,800
example the actual hashing so you've got
the password for the user IDs got the

114
00:08:13,800 --> 00:08:18,520
the brown I'm not going to pronounce
that got his password is of course in

115
00:08:18,520 --> 00:08:22,060
general because this is Tim the
enchanter take the hash of all that you

116
00:08:22,060 --> 00:08:29,909
get a string you got to get and slashes
the method a path that passion that you

117
00:08:29,909 --> 00:08:33,919
get an extra and then you take that the
indy five of the first ring all the

118
00:08:33,919 --> 00:08:37,760
other stuff in the last room and you get
your response and then you send it back

119
00:08:37,760 --> 00:08:41,870
as a new header with all the information
they're so now with this responses

120
00:08:41,870 --> 00:08:46,200
server has everything he needs to do to
recreate the response on the server side

121
00:08:46,200 --> 00:08:50,550
that the responses server creates itself
matches the response you've given then

122
00:08:50,550 --> 00:08:52,569
you've proven that you have access to
that passed

123
00:08:52,570 --> 00:08:59,380
it's it's a pretty good system you don't
usually see this recession potential use

124
00:08:59,380 --> 00:09:04,450
but because it's got these nuances that
helped push on the replay attack the

125
00:09:04,450 --> 00:09:09,770
nonce example that I should hear you say
that 1450 a whatever that's a unix

126
00:09:09,770 --> 00:09:13,020
timestamp so the nonce actually has a
time some kind of embedded inside the

127
00:09:13,020 --> 00:09:15,890
strength so that helps as well

128
00:09:15,890 --> 00:09:20,280
astronauts into the network the quality
protection I mention that before usually

129
00:09:20,280 --> 00:09:24,170
so often that just simply does
authentication it is also into that

130
00:09:24,170 --> 00:09:28,290
provide some additional integrity
productions and there's another half

131
00:09:28,290 --> 00:09:33,250
that gets involved in that whole
signature the message body so now you

132
00:09:33,250 --> 00:09:37,390
got some protection against somebody
intercepting a packet and modifying the

133
00:09:37,390 --> 00:09:43,810
request and still using the original
request for this relies on an MB five

134
00:09:43,810 --> 00:09:48,280
hash of username and password if the
server wants to rebuild this on the fly

135
00:09:48,280 --> 00:09:52,170
its gotta have your plain text bass work
in a database and that's obviously about

136
00:09:52,170 --> 00:09:56,729
that so what a lot of them will do is
all just have a username and password

137
00:09:56,730 --> 00:10:01,000
and now you got a 95 that triplet and
that's what stored on the server still

138
00:10:01,000 --> 00:10:04,670
something that might be brute-force
brute-force in traffic and transit even

139
00:10:04,670 --> 00:10:10,229
but also because that hash of using
wrong password is the only thing is

140
00:10:10,230 --> 00:10:16,070
really secret to go back here so many
attacks the server they get that hash

141
00:10:16,070 --> 00:10:19,240
out of the server they just drop it
right into this whole thing and they

142
00:10:19,240 --> 00:10:22,800
never need to know your password
authenticated yourself so having cash

143
00:10:22,800 --> 00:10:27,609
compromises the account you don't even
have to crack the password so they could

144
00:10:27,610 --> 00:10:31,680
not send the password across really bad
in that of the databases is compromised

145
00:10:31,680 --> 00:10:35,599
users compromise

146
00:10:35,600 --> 00:10:41,250
so NTLM kind of similar to die just a
lot of ways but it's a proprietary not

147
00:10:41,250 --> 00:10:46,110
very well publicly documented vertical
is binary its ugly it uses UTF 16 which

148
00:10:46,110 --> 00:10:50,069
nobody's ever done strings on Windows
danger you get all these bases in the

149
00:10:50,069 --> 00:10:55,779
words and it's impossible to grab and we
hate it when he took forever the way

150
00:10:55,779 --> 00:11:01,560
this works so many connects to a web
page it says unauthorized use NTLM so

151
00:11:01,560 --> 00:11:04,388
the next line and that block is this is
the client speaking back to the

152
00:11:04,389 --> 00:11:10,500
servicing ok authorization and tell em
and a string of a 64 did I get a jump on

153
00:11:10,500 --> 00:11:13,910
that below its like I said it's all my
energy source ourself with a little

154
00:11:13,910 --> 00:11:18,410
header of MTL MSSP and there's some
flags in there that don't pertain right

155
00:11:18,410 --> 00:11:22,000
now but there's there's against all
binary particle lots of little bells and

156
00:11:22,000 --> 00:11:26,569
whistles and I'm just scratching the
surface of health and healing there's

157
00:11:26,569 --> 00:11:33,979
lots of data lots of details on a little
tricks I'm not going to go to so the

158
00:11:33,980 --> 00:11:37,019
client says okay let's do this the
server sends back a message has got a

159
00:11:37,019 --> 00:11:41,839
big block in Dayton there is a challenge
in there and there's a target block and

160
00:11:41,839 --> 00:11:47,240
both of those will be described in a
moment the user's browser and the

161
00:11:47,240 --> 00:11:50,189
pressure him and tell him takes user's
password

162
00:11:50,189 --> 00:11:54,130
cleaning house on it and what it does
with that is it doesn't have it turns a

163
00:11:54,130 --> 00:12:01,819
UDF 1694 hash on FB until Mb one has
standard adds 50 cent 21 bites but said

164
00:12:01,819 --> 00:12:07,469
in 23 chances 7 bites each Transocean 2d
yes keys and Crips the challenge regions

165
00:12:07,470 --> 00:12:12,110
with each key one at a time one small
together to make one response does the

166
00:12:12,110 --> 00:12:13,480
same thing with the old man

167
00:12:13,480 --> 00:12:21,089
so creating the DSP is kind of strange
you've got seven bites what it does is

168
00:12:21,089 --> 00:12:25,810
it takes the seven bids out of each
client and kind of spreads them out

169
00:12:25,810 --> 00:12:32,329
across a bite and then the missing lower
but everybody becomes so it's kind of

170
00:12:32,329 --> 00:12:35,420
strange it's hard to follow when you
look at the slides in person and kind of

171
00:12:35,420 --> 00:12:40,050
draw the lines and it makes more sense
so anyway here's an example where you

172
00:12:40,050 --> 00:12:44,880
take the password turned beauty of 16
taken before hash of it do the magic on

173
00:12:44,880 --> 00:12:50,550
and now you've got three binary keys you
encrypt the challenge which is that 60

174
00:12:50,550 --> 00:12:54,740
64 F C that was the first key you gotta
for cyberattacks second key in the

175
00:12:54,740 --> 00:12:56,670
second time protects etcetera

176
00:12:56,670 --> 00:13:00,019
Kamal together and you can see where the
first time it takes is a def 86 and

177
00:13:00,019 --> 00:13:03,880
that's what they're there at the bottom
and ends with the 67th so that's the

178
00:13:03,880 --> 00:13:08,350
response but that all the response cuz
course you have to put that inside a

179
00:13:08,350 --> 00:13:12,040
packed secret this new message to take
three until a message or just got better

180
00:13:12,040 --> 00:13:15,639
as got some reserve bids is getting
Peters domain name that user name the

181
00:13:15,639 --> 00:13:21,329
DNS name in the two responses so again
what's a crazy buying the right there

182
00:13:21,329 --> 00:13:27,500
don't like this right there you can see
the response of a kind of highlight if

183
00:13:27,500 --> 00:13:32,399
that's the same insulin responses I had
before it goes back to server service

184
00:13:32,399 --> 00:13:34,190
all the same magic on its side

185
00:13:34,190 --> 00:13:40,630
responses match you had the password
authenticated and he'll then be too

186
00:13:40,630 --> 00:13:46,270
little bit more complicated than just
taking in 2011 hash they use that has a

187
00:13:46,270 --> 00:13:52,230
key to do an age Mac operation on the
string of user name in uppercase and the

188
00:13:52,230 --> 00:13:57,690
target domain like on your computer the
demand is registered to that creates an

189
00:13:57,690 --> 00:14:01,410
insulin be to hash that is used as an H
Mackay for the string including a

190
00:14:01,410 --> 00:14:05,620
challenge ahead or timestamp the target
block we saw before and on all that kind

191
00:14:05,620 --> 00:14:11,860
of stuff so similar idea but a little
bit deeper and harder to to figure out

192
00:14:11,860 --> 00:14:18,570
that and here's the response when you're
done you've got a response to speed the

193
00:14:18,570 --> 00:14:22,260
the first block that have highlighted
there's a time stamp which is a naughty

194
00:14:22,260 --> 00:14:27,370
unix timestamp as a 64 bit little Indian
times damn and hundreds of microseconds

195
00:14:27,370 --> 00:14:33,250
since jennifer 1601 I'm not sure why
they picked us just what Windows uses in

196
00:14:33,250 --> 00:14:36,150
this announcement is a target block
which came from the initial type 2

197
00:14:36,150 --> 00:14:40,630
message to all the stuff gets sent
backup server does the stuff I think it

198
00:14:40,630 --> 00:14:46,480
just like I just you don't see that a
lot recession credentials and you've got

199
00:14:46,480 --> 00:14:49,840
some of the same benefits and some of
the same problems it doesn't matter of

200
00:14:49,840 --> 00:14:53,380
network which is great and has a
client-server nuances which helps

201
00:14:53,380 --> 00:14:58,470
prevent replay attacks but again it's
complicated there's potential for bugs

202
00:14:58,470 --> 00:15:02,260
and again it has compromised you can
just drop it right into the client side

203
00:15:02,260 --> 00:15:05,850
as if they had the password and created
on the fly and your authenticated

204
00:15:05,850 --> 00:15:17,120
without having to crack passwords so
there's definitely a trail

205
00:15:17,120 --> 00:15:22,230
now off one is kinda neat began actually
as a OpenID or Twitter and I'll speak

206
00:15:22,230 --> 00:15:26,740
briefly but when I D later and as they
were developing that for for Twitter

207
00:15:26,740 --> 00:15:30,080
they kinda went off in new directions in
sarajevo just building a whole new

208
00:15:30,080 --> 00:15:34,279
system they call the toll as I said
before some of these systems in this one

209
00:15:34,279 --> 00:15:37,439
in particular is not actually
authentication and authorization system

210
00:15:37,440 --> 00:15:42,170
and what it's really doing is brokering
your application is brokering

211
00:15:42,170 --> 00:15:46,719
authorization from a third party system
and practices all kind of a blur

212
00:15:46,720 --> 00:15:49,460
distinction but that's what's going on

213
00:15:49,460 --> 00:15:54,170
makes extensive use of shared secrets in
signatures so here's an example of Tim

214
00:15:54,170 --> 00:16:00,099
wants to let some application accesses
Twitter the application context whether

215
00:16:00,100 --> 00:16:05,500
says give me a token and Twitter says OK
login now the authentication partisan

216
00:16:05,500 --> 00:16:09,060
actually happening between the user and
Twitter directly so it's not actually

217
00:16:09,060 --> 00:16:12,400
part of the electorate across all
happening over here that could be using

218
00:16:12,400 --> 00:16:16,010
really super incredibly secure things or
it could be you just getting your

219
00:16:16,010 --> 00:16:20,189
password out on public channel everybody
sees it how that happens is beyond the

220
00:16:20,190 --> 00:16:25,890
application fortunately once you've had
occasion to Twitter you say okay here's

221
00:16:25,890 --> 00:16:31,920
here's the request to open them that you
gave me you want to let those Abused

222
00:16:31,920 --> 00:16:36,180
your county so sure I wanted to take
this special code back to to your

223
00:16:36,180 --> 00:16:39,050
application and punched in if you're
doing it manually it'll give you like a

224
00:16:39,050 --> 00:16:42,490
six digit number if this is all
programmatically might be a more

225
00:16:42,490 --> 00:16:45,700
extensive training all happens just back
and forth and Pakistanis are never cease

226
00:16:45,700 --> 00:16:50,610
to your application has the original
request open government with her and

227
00:16:50,610 --> 00:16:53,860
it's got the code that you just got from
Twitter when you've authorized it it

228
00:16:53,860 --> 00:16:57,380
since both of those back to Twitter
directly towards ok now you've linked

229
00:16:57,380 --> 00:17:02,329
that account to the service here is kind
of drying out

230
00:17:02,329 --> 00:17:07,809
to the apt to the server gets a token
take the children to the user's browser

231
00:17:07,809 --> 00:17:12,928
user authorizes that token code back
since it opened in the code back to in

232
00:17:12,929 --> 00:17:17,019
this case Twitter and now it looks up
against an access token so now the

233
00:17:17,019 --> 00:17:22,089
application can continue to use it and
in this case they call different things

234
00:17:22,089 --> 00:17:27,339
the consumer is the application on the
device authentication server is you know

235
00:17:27,339 --> 00:17:30,269
the service that you're you're logging
in through an under-resourced server is

236
00:17:30,269 --> 00:17:34,409
what you're using to get information
from the case of Twitter authentication

237
00:17:34,409 --> 00:17:39,090
server resources are the same
organization but sometimes they're not

238
00:17:39,090 --> 00:17:42,799
sometimes you get a website that says
login using Twitter in this case the all

239
00:17:42,799 --> 00:17:46,769
servers Twitter but the resource servers
your box that's kind of how they do that

240
00:17:46,769 --> 00:17:52,409
and like I said there's a lot of secrets
the client has a specific token in

241
00:17:52,409 --> 00:17:57,600
secret key that's a sign specifically to
the apt by the service so if you want to

242
00:17:57,600 --> 00:18:00,939
develop a Twitter account you go to turn
say and now I need the key and you get a

243
00:18:00,940 --> 00:18:05,980
client application token key and that's
long lived compiling the application is

244
00:18:05,980 --> 00:18:10,610
usually specific two and a half or maybe
to a developer and every instance of

245
00:18:10,610 --> 00:18:15,139
that app across a platform will have
that same key then when you first

246
00:18:15,139 --> 00:18:20,820
request authorization you get a specific
request token back and that is a token

247
00:18:20,820 --> 00:18:25,090
in a key as well use that just for this
process and then throw it away and then

248
00:18:25,090 --> 00:18:29,370
once you finish the system you get your
own account specific access token key

249
00:18:29,370 --> 00:18:33,949
those are what really makes a connection
between the Afghan a service that stays

250
00:18:33,950 --> 00:18:34,779
on the device

251
00:18:34,779 --> 00:18:40,610
hopefully well-protected because that's
how you then login in the future so I

252
00:18:40,610 --> 00:18:45,129
don't use all these crazy keys so you
take the things you want to save the

253
00:18:45,130 --> 00:18:49,149
server the method you also get login or
whatever

254
00:18:49,149 --> 00:18:51,340
in this case we're talking about

255
00:18:51,340 --> 00:18:57,520
the request a callback method token
nuances that all that stuff and that

256
00:18:57,520 --> 00:19:00,510
becomes your your sort of your
authentication string and he got the

257
00:19:00,510 --> 00:19:03,920
client secret which is again the secret
is dedicated just to the application so

258
00:19:03,920 --> 00:19:09,460
we bought secret use that secret to do
an age match 01 signature on the

259
00:19:09,460 --> 00:19:14,890
strength and that becomes your
authorization now the string is crazy

260
00:19:14,890 --> 00:19:18,220
the way they built it and this just
looks like absolute hell but there's a

261
00:19:18,220 --> 00:19:23,030
reason for it they take all the
parameters they turn them to UTSA and

262
00:19:23,030 --> 00:19:27,889
they URL encode them and put them
together using a purse and separations

263
00:19:27,890 --> 00:19:32,610
so that's where you get the office call
back nine percent 3d obese or call back

264
00:19:32,610 --> 00:19:38,740
equals out of band and murky something
and you get all this ugly string and

265
00:19:38,740 --> 00:19:42,890
then in front of that you put the method
that represent the path to represent

266
00:19:42,890 --> 00:19:48,010
that's your authorizations during the
primaries have to be sorted in

267
00:19:48,010 --> 00:19:52,520
alphabetical order as well all this is
so that the backend can be guaranteed to

268
00:19:52,520 --> 00:19:56,610
have created the string the exact same
way as the front of you create with the

269
00:19:56,610 --> 00:20:01,419
same primers be great just a little bit
different the hashes will match so you

270
00:20:01,420 --> 00:20:05,970
do all that stuff you do a shot each
match I'll one transaction I using the

271
00:20:05,970 --> 00:20:09,920
client key indicators and AM percent
because in other cases will be client

272
00:20:09,920 --> 00:20:14,350
and the access key right now you just
have one so it's only got the one but

273
00:20:14,350 --> 00:20:17,149
they still had the Trillium percent
that's the key

274
00:20:17,150 --> 00:20:22,610
insisting you get authorization and then
you send all that up as a header just

275
00:20:22,610 --> 00:20:27,399
like he did for her digest and there you
got all the information that was present

276
00:20:27,400 --> 00:20:32,000
in the set sign thing and then the
signature all this is just to get

277
00:20:32,000 --> 00:20:37,250
permission to ask to connect so now you
can now your apt has done all that

278
00:20:37,250 --> 00:20:40,900
Twitter says okay here's here's your
temporary token then you go the other

279
00:20:40,900 --> 00:20:45,260
thing where you you go into the browser
user authentication code back goes back

280
00:20:45,260 --> 00:20:47,180
and forth in the end you end up with
your own

281
00:20:47,180 --> 00:20:53,720
token an access token that's abuser
level with their own key and key and

282
00:20:53,720 --> 00:20:54,250
then

283
00:20:54,250 --> 00:20:59,090
the software which is a special code
this and that the client receives these

284
00:20:59,090 --> 00:21:04,649
they store and then all future requests
are built kind of the same way you do

285
00:21:04,650 --> 00:21:09,650
exactly the same thing every time you
send a request to the service any API

286
00:21:09,650 --> 00:21:15,470
call and it's got the path of ppl call
by them they're so somebody steals the

287
00:21:15,470 --> 00:21:20,290
authentication of the wire they can't
change in pointed to a different command

288
00:21:20,290 --> 00:21:25,020
and then optionally you can also include
variables for the command so if you've

289
00:21:25,020 --> 00:21:29,270
got a you know some kind of thing I said
look up and if there's a couple of posts

290
00:21:29,270 --> 00:21:32,310
variables you can also include them as
part of the signature which prevents

291
00:21:32,310 --> 00:21:35,850
again the package from being modified in
transit you've got some additional

292
00:21:35,850 --> 00:21:38,639
integrity protections built in

293
00:21:38,640 --> 00:21:43,850
now of course just like Mt Lemmon
digestive problem with with these hashes

294
00:21:43,850 --> 00:21:48,899
with the keys on the server you end up
with a token and keep air for every

295
00:21:48,900 --> 00:21:52,790
account so every user disconnected their
Twitter app to Twitter there's an

296
00:21:52,790 --> 00:21:57,180
authentication token and access token an
access token key on the server

297
00:21:57,180 --> 00:22:00,730
associated with that account if you
break into the database you grab all

298
00:22:00,730 --> 00:22:05,290
those keys you better than you need to
login so one suggestion I've made is

299
00:22:05,290 --> 00:22:11,300
that you don't actually store the access
token on the server because when the

300
00:22:11,300 --> 00:22:13,389
client connects

301
00:22:13,390 --> 00:22:18,430
version of books refusing to read it
sends the oil consumer key it sends the

302
00:22:18,430 --> 00:22:23,180
key in the clear to the server the
server will habit when it's evaluating

303
00:22:23,180 --> 00:22:29,460
the request of the server can do is take
that that key in a shit use the house to

304
00:22:29,460 --> 00:22:33,670
look up the database now they've got
your key to open the database now

305
00:22:33,670 --> 00:22:37,460
they've got your keys well and it can
continue into the authorization so this

306
00:22:37,460 --> 00:22:40,690
way so he breaks into the server they
get your secret he can't do anything

307
00:22:40,690 --> 00:22:45,240
with it cuz I don't know what public use
associated with it so that's another way

308
00:22:45,240 --> 00:22:48,600
you can try at least improve the
security little bit on the server side

309
00:22:48,600 --> 00:22:55,649
off 1 overall it's very strong it's not
nonsense and Constantius get signatures

310
00:22:55,650 --> 00:23:00,930
got everything you need to have a very
strong secure back and forth finally

311
00:23:00,930 --> 00:23:04,190
restored access tokens once you've
authorized you never send the password

312
00:23:04,190 --> 00:23:09,700
over the network integrity controls are
great you can also usually individually

313
00:23:09,700 --> 00:23:17,130
revoke access by applications I don't
use our phones dead and you can destroy

314
00:23:17,130 --> 00:23:21,420
those tokens so they're no longer valid
but it is very complicated and difficult

315
00:23:21,420 --> 00:23:24,690
to understand and you're relying on the
remote service to do that initial

316
00:23:24,690 --> 00:23:28,110
indication

317
00:23:28,110 --> 00:23:31,870
so at one point they started working on
something called the awesome web

318
00:23:31,870 --> 00:23:36,000
resources authorization protocol and at
some point that kind of took on a life

319
00:23:36,000 --> 00:23:41,230
of its own and became too and it took
off one and simple but in many ways mean

320
00:23:41,230 --> 00:23:45,190
a lot more complicated other ways and
it's not really a strictly defined her

321
00:23:45,190 --> 00:23:49,690
to go small like a framework that you
can build on next and expand do changes

322
00:23:49,690 --> 00:23:56,410
to the big key differences are all the
user secrets all that smack signing it

323
00:23:56,410 --> 00:24:02,040
relies exclusively on T lester security
and they also obviously relying on local

324
00:24:02,040 --> 00:24:06,110
stores for protecting the tokens on the
device they're still the client can I

325
00:24:06,110 --> 00:24:10,159
claim secret but during the processor to
censor that the server as is again

326
00:24:10,160 --> 00:24:16,250
there's no signing authorization postal
very similar to what one was claimed

327
00:24:16,250 --> 00:24:19,330
request authorization for server the
server gives a special grants which help

328
00:24:19,330 --> 00:24:23,580
explain the second find themselves that
granted the authorization server gets a

329
00:24:23,580 --> 00:24:29,649
token and then use a token for future
requests or demands of France the first

330
00:24:29,650 --> 00:24:33,320
one is very close to how off one works
usually when you have a different

331
00:24:33,320 --> 00:24:38,230
different authorization server increase
or servers is an implicit which is aimed

332
00:24:38,230 --> 00:24:42,350
a browser client avoids one of the steps
gonna consolidates its faster back and

333
00:24:42,350 --> 00:24:47,110
for us because you're just authorizing
the current session resource owner

334
00:24:47,110 --> 00:24:51,020
password credentials actually since the
password to the server in the process of

335
00:24:51,020 --> 00:24:55,139
the authentication actually is happening
with no water that and then Prime

336
00:24:55,140 --> 00:24:58,750
credentials as very similar but now
you're actually claim to the surface

337
00:24:58,750 --> 00:25:01,850
that's if there's like an account
associated with the application as the

338
00:25:01,850 --> 00:25:08,280
application the user quick example of
this we see this a lot like if you have

339
00:25:08,280 --> 00:25:13,399
an obligation on the web that once again
a user's account you login to the web

340
00:25:13,400 --> 00:25:18,830
app you want to come to to get up so
great to get home you login to get up

341
00:25:18,830 --> 00:25:26,199
and say hey I want to authorize this out
so it's ok great today show their says

342
00:25:26,200 --> 00:25:30,780
since the ClientID so now that the
application is sent to get home you the

343
00:25:30,780 --> 00:25:34,970
idea of the absolute knows which way
that is trying to connect and a scope

344
00:25:34,970 --> 00:25:37,200
which is basically saying I want them to
be able to

345
00:25:37,200 --> 00:25:44,429
list repositories user says yes I'm
happy letting this application using the

346
00:25:44,429 --> 00:25:48,159
first have to use whatever get help
soften occasion has to factor etcetera

347
00:25:48,159 --> 00:25:52,630
the authorized the account and say yes I
agree with that school but I'm one

348
00:25:52,630 --> 00:26:01,580
letter repositories so that the
application the application requests the

349
00:26:01,580 --> 00:26:05,500
connection now it says the ClientID and
the claims secret and the code that get

350
00:26:05,500 --> 00:26:09,309
home just gave you saying okay now let's
make this link

351
00:26:09,309 --> 00:26:17,350
talking back and now you're counseling
together so I ran to get through ought

352
00:26:17,350 --> 00:26:21,769
to pretty quickly there but it is like I
said it's very similar to how it works

353
00:26:21,769 --> 00:26:28,529
in the conceptual but all the sick all
the details from the signatures and the

354
00:26:28,529 --> 00:26:34,350
houses and stuff just so you can access
token of lives forever

355
00:26:34,350 --> 00:26:37,149
acceptance bad have a children's lives
forever so usually there's there's a

356
00:26:37,149 --> 00:26:40,820
timeout on nose and a lot of times when
you first connect you'll get it refresh

357
00:26:40,820 --> 00:26:44,750
token so you start both of those in your
device access tokens what use all the

358
00:26:44,750 --> 00:26:48,200
time it gets compromised it eventually
dies anyway after an hour a day or

359
00:26:48,200 --> 00:26:51,679
something like that when you make
another request with the old access to

360
00:26:51,679 --> 00:26:55,870
open it denied you say oh well how about
this refresh token that's great and that

361
00:26:55,870 --> 00:27:00,260
gives you access to continue on so you
obviously have to make sure both of

362
00:27:00,260 --> 00:27:06,070
those are securely stored on the other
reasonably good system it's open

363
00:27:06,070 --> 00:27:10,289
framework you can extend it you can do
some direct authentication which is

364
00:27:10,289 --> 00:27:11,139
great

365
00:27:11,139 --> 00:27:15,168
essentially it's a way as a standard way
to have a universal session took just

366
00:27:15,169 --> 00:27:19,039
told them that any afternoons and
implements same library for whatever

367
00:27:19,039 --> 00:27:23,110
you're doing but because it is so
generalized different systems have

368
00:27:23,110 --> 00:27:26,029
implemented things a little differently
like the GitHub example I showed you

369
00:27:26,029 --> 00:27:29,269
won't work exactly for some Google Apps
of homework exact of some other things

370
00:27:29,269 --> 00:27:34,389
so interoperability may be a pain so on
the one hand you can have come in

371
00:27:34,389 --> 00:27:35,219
libraries

372
00:27:35,220 --> 00:27:40,870
you might not be able to also there's no
timestamp announces our signature so

373
00:27:40,870 --> 00:27:45,270
tokenism hoping to grab you can use it
as often as you want you can still get

374
00:27:45,270 --> 00:27:50,049
out of the the stream taking on her back
and make a different requests are

375
00:27:50,049 --> 00:27:55,720
universally accepted ok I was gonna talk
about some other systems I don't really

376
00:27:55,720 --> 00:28:00,730
have time by WTF is very cool especially
the way that you be key which is the

377
00:28:00,730 --> 00:28:04,360
first big implementation of it works
fantastic tricks that they did to put a

378
00:28:04,360 --> 00:28:08,260
whole lot of private keys on a small
very cheap hardware dongle definitely

379
00:28:08,260 --> 00:28:12,350
fun to look at a somewhat token isn't
really a system or protocol as a way to

380
00:28:12,350 --> 00:28:16,830
kind of build the token it has signed
data it's got a header it's got claims

381
00:28:16,830 --> 00:28:19,770
you care about it's got a signature
basically for the header in the claims

382
00:28:19,770 --> 00:28:24,658
new signature thought altogether OpenID
distributed authentication identity

383
00:28:24,659 --> 00:28:31,630
system was popular for while not as much
today it kind of worked in 2001 and in

384
00:28:31,630 --> 00:28:34,500
the most recent version of this
so-called OpenID connect which is

385
00:28:34,500 --> 00:28:40,360
layered on top of a lot to cram in b5 I
just doing here because it's something

386
00:28:40,360 --> 00:28:45,110
he's to see a lot for email another
signature reclaim challenge response

387
00:28:45,110 --> 00:28:49,199
system using a tracking device that had
a lot of other weaknesses that are a

388
00:28:49,200 --> 00:28:53,409
little bit deeper largely deprecated you
don't really use this anymore she

389
00:28:53,409 --> 00:28:54,320
couldn't see this

390
00:28:54,320 --> 00:28:59,710
and finally there's obviously public
private keys very strong very difficult

391
00:28:59,710 --> 00:29:04,190
to attack as long as you don't have bugs
in library or the CIA attacks to provide

392
00:29:04,190 --> 00:29:08,860
additional encryption and authentication
but now you've got a large database of

393
00:29:08,860 --> 00:29:13,110
public keys it's it's big it's
complicated it's weird I rarely see this

394
00:29:13,110 --> 00:29:17,039
except sometimes as a way to sort of
additionally find a device to a service

395
00:29:17,039 --> 00:29:23,470
so we're gonna give more detail on those
but will jump into just a quick review

396
00:29:23,470 --> 00:29:25,799
common elements

397
00:29:25,799 --> 00:29:30,489
like a strong indication user's password
they all use passwords except for off

398
00:29:30,489 --> 00:29:35,509
one words that's not really like 12 is
optional digest and Illinois lost one

399
00:29:35,509 --> 00:29:40,600
both called use signatures announces
optional times outside I guess it kind

400
00:29:40,600 --> 00:29:45,779
of depends on how you build your loved
one has optional PKI I didn't mention

401
00:29:45,779 --> 00:29:52,210
when in the signature using each max
show one you can also do our station so

402
00:29:52,210 --> 00:29:55,210
there's actually a public-private key
signature method instead of just the

403
00:29:55,210 --> 00:29:56,499
HMAC

404
00:29:56,499 --> 00:30:00,999
don't think I see that too often in the
book digest and no one can provide

405
00:30:00,999 --> 00:30:07,999
integrity protections on the data so
basic is easy that's a good thing

406
00:30:07,999 --> 00:30:13,809
digesters resistance replay and
telemetry system replay off one same

407
00:30:13,809 --> 00:30:18,408
thing about medical tokens onto a simple
and tokens is also good strength of

408
00:30:18,409 --> 00:30:23,509
these protocols weaknesses basically
gonna pass out of the water especially

409
00:30:23,509 --> 00:30:29,710
for digest that's a bad session
authentication digest mode can be

410
00:30:29,710 --> 00:30:34,129
vulnerable some brute force attacks on
her side storage issues and then there's

411
00:30:34,129 --> 00:30:39,379
the fact that the hash can be reused and
ellen has some of the same issues

412
00:30:39,379 --> 00:30:44,389
especially the hash reuse as complicated
as binary and needed I just use my

413
00:30:44,389 --> 00:30:49,439
recessions off one complicated that's a
that's a drawback

414
00:30:49,440 --> 00:30:53,210
the complications in North one is part
of what drove off to drop all those

415
00:30:53,210 --> 00:31:00,750
those crazy senators who has very little
replay integrity protections

416
00:31:00,750 --> 00:31:06,040
so throw all that into a table read is
in my opinion bad stuff means my opinion

417
00:31:06,040 --> 00:31:09,620
good stuff you can see you come from not
really all that great but it's kinda

418
00:31:09,620 --> 00:31:14,090
hard to avoid unfortunately I just until
a much better foreign logins but they've

419
00:31:14,090 --> 00:31:18,330
got some serious drawbacks off one is
terrific processions fantastic

420
00:31:18,330 --> 00:31:23,409
recessions but you really can't do the
actual initial login with it and walk to

421
00:31:23,410 --> 00:31:30,180
was just kind of a mixed bag so if I
would recommend something for logins

422
00:31:30,180 --> 00:31:33,860
nothing's really ideal like to see
something better come up I'm still

423
00:31:33,860 --> 00:31:38,409
looking to see if one already exists for
sessions I love it when I would

424
00:31:38,410 --> 00:31:42,640
definitely recommend using that they say
it's a pain in the neck but I think you

425
00:31:42,640 --> 00:31:46,700
can I think it's pretty easy to figure
out is lots of libraries so I that's I

426
00:31:46,700 --> 00:31:51,460
think the benefits definitely are worth
trying to figure out how to use that

427
00:31:51,460 --> 00:31:56,560
there are some of the considerations
these things don't happen in a vacuum

428
00:31:56,560 --> 00:31:59,610
you can make the most of your protocol
in the world and it can be no good at

429
00:31:59,610 --> 00:32:04,040
all because it takes way too long to
process slogans on the server side on

430
00:32:04,040 --> 00:32:07,530
the other hand you can also meet some of
the other servers and delicate

431
00:32:07,530 --> 00:32:11,360
authentication how often do two
different houses works the same

432
00:32:11,360 --> 00:32:15,959
arguments you have against using
Decrypter a scripture or long pkts stuff

433
00:32:15,960 --> 00:32:20,330
like that on the back end so things have
to consider in this don't have to make

434
00:32:20,330 --> 00:32:23,750
sure you got flexibility if you want to
change your system if you have different

435
00:32:23,750 --> 00:32:28,660
hashes you might eventually moved to you
wanna be necessarily locked in and also

436
00:32:28,660 --> 00:32:33,140
need to consider climb technical
capabilities now early capability

437
00:32:33,140 --> 00:32:36,450
question but Justin information question
I did it I talked last year in which I

438
00:32:36,450 --> 00:32:40,870
looked at how iOS apps handled
authentication and two-thirds of the App

439
00:32:40,870 --> 00:32:44,770
Store tokens in securely in a way that
actor with access to the device could

440
00:32:44,770 --> 00:32:45,770
get the children out

441
00:32:45,770 --> 00:32:49,770
got access to your account about half of
them strong passwords and securely as

442
00:32:49,770 --> 00:32:50,200
well

443
00:32:50,200 --> 00:32:55,110
another big drawback is an embedded in
browser so if you want to do that a web

444
00:32:55,110 --> 00:32:58,939
application level you've got to
implement JavaScript do not imply that

445
00:32:58,940 --> 00:32:59,890
in javascript

446
00:32:59,890 --> 00:33:05,500
that's just bad traffic paper that I
sighed and my white paper from tom has

447
00:33:05,500 --> 00:33:12,170
acted just destroys that it's a bad idea
and of course password resets are still

448
00:33:12,170 --> 00:33:15,800
the weakest link if you forget your
password how do you get it back

449
00:33:15,800 --> 00:33:19,100
that's that's where people are really
vulnerable words that's difficult to get

450
00:33:19,100 --> 00:33:22,649
this done well you compromise your
targets email account you can reset

451
00:33:22,650 --> 00:33:27,680
their passwords SMS kind of helps but
not necessarily sometimes I can be

452
00:33:27,680 --> 00:33:35,310
smooth what have you stolen their phone
what if their phone sends SMS tax to the

453
00:33:35,310 --> 00:33:42,450
screen and they're locked Mac and
somebody doesn't reset and little text

454
00:33:42,450 --> 00:33:46,770
shows up on the screen as well there's
the code so there's some issues with

455
00:33:46,770 --> 00:33:50,210
hackers and massive change one Password
Recovery to another to another in and

456
00:33:50,210 --> 00:33:54,130
got all kinds of stuff because once he
gets access to one thing you can use

457
00:33:54,130 --> 00:33:57,070
that to prove to a customer service rep
that you are that person to get access

458
00:33:57,070 --> 00:34:01,409
something else you move on so Password
Reset is still a big problem and then

459
00:34:01,410 --> 00:34:05,450
just getting fed up with the abbey
onboarding and a half

460
00:34:05,450 --> 00:34:09,940
very narrow window for attacks only
happens once but depending on the

461
00:34:09,940 --> 00:34:13,780
circumstances that might be a good
target like maybe there's a Starbucks

462
00:34:13,780 --> 00:34:17,800
after that has some really juicy
information that you want to steal where

463
00:34:17,800 --> 00:34:22,080
people probably going to be on boarding
to a Starbucks Starbucks Starbucks and

464
00:34:22,080 --> 00:34:26,449
networking you're getting all the stuff
maybe you might see somebody using that

465
00:34:26,449 --> 00:34:29,918
for the first time you get their
credentials not really good at Target

466
00:34:29,918 --> 00:34:34,489
attack but it might be something you
could you could do for a broad spectrum

467
00:34:34,489 --> 00:34:45,709
just serendipity attack so there's some
possibilities of issues there I had 12

468
00:34:45,710 --> 00:34:50,990
demonstrated tool and number one right
of time in order to the tools not ready

469
00:34:50,989 --> 00:34:56,850
the 1 I'm testing applications large
times in all see these things go by and

470
00:34:56,850 --> 00:35:00,950
say ok here is sometimes is obvious and
you know exactly what's going on in the

471
00:35:00,950 --> 00:35:05,520
clear or something like that you like ok
I know what's going on but sometimes you

472
00:35:05,520 --> 00:35:11,490
want to verify if you're not quite sure
you see how come by and you think I shot

473
00:35:11,490 --> 00:35:17,359
56 ashes unsalted what's up I thought
let's try and find out I'm so how do you

474
00:35:17,360 --> 00:35:22,170
test for things like that he has a
custom solution and and I think it's

475
00:35:22,170 --> 00:35:24,490
important to be able to do that because
you need to understand what's going on

476
00:35:24,490 --> 00:35:27,290
you can't really understand it listening
to prove to yourself that you understand

477
00:35:27,290 --> 00:35:32,450
it so a lot of times all by myself
custom coding up something to build a

478
00:35:32,450 --> 00:35:36,180
house or breaking encryption container
things like that just to show that I

479
00:35:36,180 --> 00:35:39,259
really do understand it once I
understand that can decide what to say

480
00:35:39,260 --> 00:35:43,250
so what I was trying to do is come a
long way to go the simple tool to help

481
00:35:43,250 --> 00:35:48,320
with at least some of this when I want
to be able to do is to to simplify the

482
00:35:48,320 --> 00:35:52,030
testing it can't be completely turned to
your still gonna have to do a little bit

483
00:35:52,030 --> 00:35:55,810
of coding little bit of tweaking and
then of course somebody who does this

484
00:35:55,810 --> 00:35:59,480
for a living will then be able to make
it hope we can build on Andrus expand or

485
00:35:59,480 --> 00:36:04,910
change things as encounter other systems
as they think they understand what I'm

486
00:36:04,910 --> 00:36:09,379
working towards something where you can
either just say build me a response and

487
00:36:09,380 --> 00:36:12,450
it'll prompt you still can watch the
callback code what's the consumer keep

488
00:36:12,450 --> 00:36:16,720
it a secret and get all the information
and feedback the signature that matches

489
00:36:16,720 --> 00:36:22,509
that pack one of the reasons that I saw
cited for the development with up to

490
00:36:22,510 --> 00:36:25,619
was that with off when it was difficult
for developers to test because you

491
00:36:25,619 --> 00:36:29,010
couldn't simply cut and paste to curl
command to test against the server

492
00:36:29,010 --> 00:36:33,380
thought your God is because people can't
do do these things on the fly that that

493
00:36:33,380 --> 00:36:37,320
we ended up with a walk to so the goal
here are becoming something that would

494
00:36:37,320 --> 00:36:39,850
allow you to test these things manually
without her

495
00:36:39,850 --> 00:36:45,279
to write crazy code understand how to
build and stuff like that because again

496
00:36:45,280 --> 00:36:48,600
being able to test these things as
you're developing you always have to

497
00:36:48,600 --> 00:36:49,100
test it

498
00:36:49,100 --> 00:36:53,069
you want to go with the most secure
system possible so something to help you

499
00:36:53,070 --> 00:36:59,000
understand that secure system better as
you develop and then maybe you'll use of

500
00:36:59,000 --> 00:37:06,440
a kind of hoping for but that I'm also
looking at i'm kind of developing a like

501
00:37:06,440 --> 00:37:10,060
a pseudocode you can maybe even create a
file that just as ok here's the things I

502
00:37:10,060 --> 00:37:14,730
want to ask the user for here's what I
do with them I join them on them and

503
00:37:14,730 --> 00:37:19,410
there is the result of so this basically
is the digest method just put in playing

504
00:37:19,410 --> 00:37:24,210
pseudocode so the idea would be to you
can do all these things again read the

505
00:37:24,210 --> 00:37:27,500
response you could verify that the
afternoon what you think it's snowing

506
00:37:27,500 --> 00:37:33,330
and I'm also kind of considering the
idea of doing a full outline a pic

507
00:37:33,330 --> 00:37:38,100
actually reach out to the server and
connect and actually prompt the user

508
00:37:38,100 --> 00:37:42,339
input just basically to pretend your
browser but then also spent all the

509
00:37:42,340 --> 00:37:46,610
intermediate results as is building the
competition doing all the work you can

510
00:37:46,610 --> 00:37:49,280
kind of see what's going on behind the
scenes and understanding check then

511
00:37:49,280 --> 00:37:52,500
maybe be able to follow certain
parameters and things like that so maybe

512
00:37:52,500 --> 00:37:57,190
the server is vulnerable to 93 use maybe
you can use this to help understand that

513
00:37:57,190 --> 00:38:01,550
and then even potentially doing
something similar the server-side

514
00:38:01,550 --> 00:38:05,420
pretend to be a server but again spit
out little bits of data as the

515
00:38:05,420 --> 00:38:09,290
authentication progresses you can get a
window into the internal workings of it

516
00:38:09,290 --> 00:38:12,810
there's also eighty people in dot org

517
00:38:12,810 --> 00:38:17,220
which does some similar stuff they've
got basically is it's just a dead inside

518
00:38:17,220 --> 00:38:22,359
you can send stuff to testing out apps
and they actually have functionality for

519
00:38:22,360 --> 00:38:26,440
basic and digest mode they don't have
until I think they might have used to

520
00:38:26,440 --> 00:38:27,079
but they don't

521
00:38:27,079 --> 00:38:30,880
so that that something along those lines
would also be very useful so those are

522
00:38:30,880 --> 00:38:36,619
things I hope to get out in the next
month or two would be useful for people

523
00:38:36,619 --> 00:38:43,450
to wrap up got tremendous left corner my
clock again lots of different ways to do

524
00:38:43,450 --> 00:38:48,739
this only about five ways are in common
use almost every app that I see uses one

525
00:38:48,739 --> 00:38:53,009
of these five systems like I said five
years of doing out testing only seen

526
00:38:53,009 --> 00:38:58,180
other systems a few times handful of
times alone have some strengths all of

527
00:38:58,180 --> 00:39:01,368
them have some weaknesses all the
abilities against them either in the

528
00:39:01,369 --> 00:39:05,890
implementation or in the the protocol
itself did you find a workaround

529
00:39:05,890 --> 00:39:12,969
51 got upgraded to be one of the
strongest is largely written off as too

530
00:39:12,969 --> 00:39:18,440
hard and alternative is I think too weak
but I still think there's hope for the

531
00:39:18,440 --> 00:39:22,529
future improvements in browsers would be
great if we can improve the initial

532
00:39:22,529 --> 00:39:25,729
Lausanne exchange that would be
fantastic if you could integrate lost

533
00:39:25,729 --> 00:39:30,118
one or something similar to that that
would be exceptional even if we can have

534
00:39:30,119 --> 00:39:33,209
some direct JavaScript interface that
could do some of these things in

535
00:39:33,209 --> 00:39:36,598
JavaScript without having to write that
might help but you still have the issue

536
00:39:36,599 --> 00:39:39,499
of whether I do trust all is good to
begin with because it came from a media

537
00:39:39,499 --> 00:39:44,939
server and it might not be trustworthy
new developments are really exciting to

538
00:39:44,940 --> 00:39:48,839
YouTube is cool its integrated in chrome
now and it's there they were adding

539
00:39:48,839 --> 00:39:52,739
support other browsers so we can change
the browser with new systems that's

540
00:39:52,739 --> 00:39:53,319
great

541
00:39:53,319 --> 00:39:57,880
the growing emphasis in recent years on
to factor into subsystems is great

542
00:39:57,880 --> 00:40:01,699
starting to see some authentic alternate
about the negation systems like digits

543
00:40:01,699 --> 00:40:05,279
which is great for onboarding you walk
into a service and you have a cell phone

544
00:40:05,279 --> 00:40:08,489
number and it bounces a code to your
cell phone and your login and does all

545
00:40:08,489 --> 00:40:11,559
the talking stuffing backward you never
have to worry about crazy passwords

546
00:40:11,559 --> 00:40:16,529
emails again having evaluated whether
that's really good idea not above the

547
00:40:16,529 --> 00:40:20,039
concept but again you myself fall back
into the whole question of password

548
00:40:20,039 --> 00:40:24,279
resets and stuff like that so but I'm
glad that we're seeing seeing things

549
00:40:24,279 --> 00:40:24,740
being done

550
00:40:24,740 --> 00:40:31,229
on I'll put the slides online will be
available at the company's site at NCC

551
00:40:31,230 --> 00:40:36,280
group and also putting on my blog north
Old org maybe not today probably

552
00:40:36,280 --> 00:40:40,920
tomorrow I'll several white paper which
is goes into all the details of all

553
00:40:40,920 --> 00:40:45,240
these things especially the systems that
I crossed over at the end with little

554
00:40:45,240 --> 00:40:46,118
bit more detail

555
00:40:46,119 --> 00:40:50,560
much better explanations when I can spit
out here at warp speed and extensive

556
00:40:50,560 --> 00:40:54,840
references for not only the actual specs
but also pages that I encountered as I

557
00:40:54,840 --> 00:40:57,950
was trying to collect all this
information that I found very helpful

558
00:40:57,950 --> 00:41:01,009
one of the reasons I did this whole talk
is that whenever I run into something

559
00:41:01,010 --> 00:41:04,619
like oh I said oh I know how that works
and I start looking into no I forgot how

560
00:41:04,619 --> 00:41:08,020
that works and I spend an hour searching
google trying to find the one page to

561
00:41:08,020 --> 00:41:11,400
explain it to me and then I understand
it again and I go back so I'm hoping

562
00:41:11,400 --> 00:41:15,020
that this white paper in this light can
be a good reference 44 how some of these

563
00:41:15,020 --> 00:41:18,310
things work and again once a
demonstration to was finished

564
00:41:18,310 --> 00:41:24,369
publishing that is what I so that was an
awful lot of information a very short

565
00:41:24,369 --> 00:41:29,140
time I hope I didn't kill anybody's
brings on a Sunday morning after party

566
00:41:29,140 --> 00:41:31,210
any questions you may have

567
00:41:31,210 --> 00:41:44,150
minutes yes

568
00:41:44,150 --> 00:42:00,059
Steve Gibson in school have not heard of
that what is that briefly

569
00:42:00,059 --> 00:42:05,339
ok

570
00:42:05,339 --> 00:42:15,049
are you taking something totally on
unusual had a check out of Bantu to do

571
00:42:15,049 --> 00:42:19,859
some of the stuff interesting I love
talking about I just got the shut up so

572
00:42:19,859 --> 00:42:20,989
thank you very much

