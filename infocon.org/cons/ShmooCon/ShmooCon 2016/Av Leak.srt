1
00:00:00,000 --> 00:00:03,870
to my name is Alex Avila's El I'm
presenting a V Leeds turning antivirus

2
00:00:03,870 --> 00:00:08,510
simulators inside out so brief outline
of the presentation was an introduction

3
00:00:08,510 --> 00:00:12,340
by moving some background on this topic
of end of our simulation and emulation

4
00:00:12,340 --> 00:00:18,150
discuss AV leaked the tool that I built
this results and actual live demo of AV

5
00:00:18,150 --> 00:00:23,269
the connection then talk about malware
discovery so now that I've discovered

6
00:00:23,269 --> 00:00:27,320
through the use of a leak and then
closed with some rocks on future work

7
00:00:27,320 --> 00:00:34,149
and what he could take his work in and
follow so brief about me I'm a recent

8
00:00:34,149 --> 00:00:38,899
graduate of Rensselaer Polytechnic
Institute RPI and I built a V league has

9
00:00:38,899 --> 00:00:44,059
put my master's research under dr.
peeling owner at RPI was a member of RPI

10
00:00:44,059 --> 00:00:45,000
sec

11
00:00:45,000 --> 00:00:49,450
the security club there and see TFD I'm
super see that on Oct scoreboards

12
00:00:49,450 --> 00:00:55,410
anything that's us so I built as a V
leaked a novel tool that allows

13
00:00:55,410 --> 00:00:59,019
researchers to easily and quickly
extract artifacts of the Malaysian out

14
00:00:59,020 --> 00:01:02,559
of commercial end of our simulators that
can you can you then used to detect the

15
00:01:02,559 --> 00:01:07,100
presence of these emulators and then
write evasive malware that the texts

16
00:01:07,100 --> 00:01:12,820
being emulated and then pays benignly so
as to evade detection and I would like

17
00:01:12,820 --> 00:01:16,380
in current work in this field work is
presented at recent conferences like

18
00:01:16,380 --> 00:01:20,140
black hat and places like that the real
state of the art namin the hacker

19
00:01:20,140 --> 00:01:23,540
community on this work is kinda like
handwriting sequel injections like if

20
00:01:23,540 --> 00:01:28,439
you're a CTF you have a web browser and
no dash dash select Start it's a real

21
00:01:28,439 --> 00:01:36,059
pain real difficult to NAV lake is kinda
like having stomach that you later and

22
00:01:36,060 --> 00:01:39,470
let it rip and pulls out all these
artifacts emulation I really really

23
00:01:39,470 --> 00:01:44,329
easily and without a lot of work and
thought on your side so some background

24
00:01:44,329 --> 00:01:45,298
on this topic

25
00:01:45,299 --> 00:01:50,820
automated dynamic malware analysis
static signature based on our analysis

26
00:01:50,820 --> 00:01:55,939
is really useless in the face of one
million plus new samples of malware

27
00:01:55,939 --> 00:02:00,298
detected per day that was a recent
estimate from I think some an attack was

28
00:02:00,299 --> 00:02:05,340
that they're saying they believe one
million plus binaries per day so far too

29
00:02:05,340 --> 00:02:05,930
much

30
00:02:05,930 --> 00:02:11,530
for human analyst look at what you gotta
do is go run the malware samples

31
00:02:11,530 --> 00:02:16,510
internet isolated environments and see
how they behave at runtime see what

32
00:02:16,510 --> 00:02:21,679
they're gonna do and then you can pick
out but he's about where find unique

33
00:02:21,680 --> 00:02:27,030
ones you wanna look at further and so
forth so you gonna be looking for known

34
00:02:27,030 --> 00:02:30,160
signatures at runtime that pack
empowerment representing so now where's

35
00:02:30,160 --> 00:02:35,320
encrypt it another way you can match any
hash against any of that but at runtime

36
00:02:35,320 --> 00:02:38,530
and memory and you can scan member and
find the signatures that you know are

37
00:02:38,530 --> 00:02:42,120
there because it's just the same comment
piece of crime we're packed a million

38
00:02:42,120 --> 00:02:46,870
different times and you can also hear is
to classify malicious behavior so the

39
00:02:46,870 --> 00:02:52,620
fact this binary did this unique thing
that you know but nine miners should not

40
00:02:52,620 --> 00:02:58,260
get in the way of finding out where the
problem statement a problem with

41
00:02:58,260 --> 00:03:02,459
automated analysis systems is an hour
can easily detect them and can be a man

42
00:03:02,459 --> 00:03:08,840
I only and then what I want to do is
actually make it easier to detect these

43
00:03:08,840 --> 00:03:14,489
systems in a sense how do we easily find
ways of detecting them so there's plenty

44
00:03:14,489 --> 00:03:17,630
of research on an analysis and
simulation

45
00:03:17,630 --> 00:03:21,140
detecting VMware detecting chemo things
like that that's very well documented

46
00:03:21,140 --> 00:03:25,880
Google Google around and that's been a
field of study for a past ten or fifteen

47
00:03:25,880 --> 00:03:30,190
years since the dawn of emulation and
virtualization people finding ways that

48
00:03:30,190 --> 00:03:32,019
are virtualized

49
00:03:32,019 --> 00:03:37,060
GM's are not like real systems but a lot
of that work has not really looked at

50
00:03:37,060 --> 00:03:40,739
the everyday products that people use
their computers that consumer antivirus

51
00:03:40,739 --> 00:03:44,600
products that you go by staples on
Amazon or ever installed on your home

52
00:03:44,600 --> 00:03:52,109
computer and expect to be protecting you
so a traditional malware sandbox what

53
00:03:52,110 --> 00:03:57,000
you might be familiar West looks kinda
like this so you have this is kind of

54
00:03:57,000 --> 00:03:59,650
basically every possible that I know of

55
00:03:59,650 --> 00:04:04,099
our sandbox put together she might have
user mode analysis processes might have

56
00:04:04,099 --> 00:04:09,720
kernel drivers that are now Asus you
might have a process introspection via

57
00:04:09,720 --> 00:04:15,459
the EM introspection going on from
outside of the vietnam be take all sorts

58
00:04:15,459 --> 00:04:18,228
of different forms but generally what
you're doing is on top of a

59
00:04:18,228 --> 00:04:22,820
virtualization layer VMware chemo maybe
then at the hypervisor level you're

60
00:04:22,820 --> 00:04:27,949
running a real operating system usually
windows are targets windows and then

61
00:04:27,949 --> 00:04:32,060
you're analyzing malware within that
sandbox in a real Windows operating

62
00:04:32,060 --> 00:04:35,830
system that just a virtualized when
members and executing you throw away to

63
00:04:35,830 --> 00:04:40,240
the sandbox down and start of a new one
that's fresh new malware in there and so

64
00:04:40,240 --> 00:04:45,479
on so forth in this is what's very well
documented how you would you detect that

65
00:04:45,479 --> 00:04:52,659
sort of thing now a consumer ed Mueller
looks more like this you have an x86

66
00:04:52,660 --> 00:04:57,099
emulator that emulates the x86
instruction set you know step-by-step

67
00:04:57,099 --> 00:05:01,880
instruction by destruction and then
alongside that you have a user mode

68
00:05:01,880 --> 00:05:05,419
Windows API emulator emulates the
Windows API and all these functions

69
00:05:05,419 --> 00:05:10,030
might find in D levels in their
libraries that come with the with the

70
00:05:10,030 --> 00:05:15,119
Windows operating system and those
that's running within the end of our

71
00:05:15,120 --> 00:05:18,680
simulator which is likely running a
system of some sort of high privilege

72
00:05:18,680 --> 00:05:22,960
and power systems little lot of
privilege to watch systems to watch

73
00:05:22,960 --> 00:05:27,638
events going on and often they don't
really bother isolating internal

74
00:05:27,639 --> 00:05:31,960
components are some bacterial components
they really want to run everything often

75
00:05:31,960 --> 00:05:38,000
the same context with this high
privilege so now we're then runs by

76
00:05:38,000 --> 00:05:42,470
itself is the only thing really running
in that analysis environment there and

77
00:05:42,470 --> 00:05:46,090
its biggest up there with the activist
seconds later and then what makes a call

78
00:05:46,090 --> 00:05:52,030
to a library function the Windows API
emulators misstep in an amulet execution

79
00:05:52,030 --> 00:05:56,559
of a given Windows API function for the
malware until it can then look for some

80
00:05:56,560 --> 00:05:57,440
jurors that

81
00:05:57,440 --> 00:06:01,920
there and memories or here's to classify
the malware and this is happening in

82
00:06:01,920 --> 00:06:06,920
real time to protect real users
computers in the field so says you have

83
00:06:06,920 --> 00:06:10,330
this installed your laptop you download
a file you click on the file once you've

84
00:06:10,330 --> 00:06:11,050
clicked on it

85
00:06:11,050 --> 00:06:15,140
scandal triggered and they're gonna take
that binary go right into this sandbox

86
00:06:15,140 --> 00:06:19,710
and see what it does not to tell you is
this man we're not thinking identified

87
00:06:19,710 --> 00:06:22,989
with it should be /

88
00:06:22,990 --> 00:06:29,200
very fast very quickly not use a lot of
ram it down too much you know users just

89
00:06:29,200 --> 00:06:33,430
gonna install the thing if it slows down
too much and ends up causing more harm

90
00:06:33,430 --> 00:06:39,220
than malware potentially could so as I
said these ABM letters have a lot of

91
00:06:39,220 --> 00:06:44,920
limitations I gotta run quickly got a
lot of memory you can't use a high-end

92
00:06:44,920 --> 00:06:49,740
virtualization system like a movie where
these are you a proprietary and open

93
00:06:49,740 --> 00:06:55,020
source products but they're well worked
on a big teams work on them lots of

94
00:06:55,020 --> 00:06:59,320
Engineers you're building your own
emulator

95
00:06:59,320 --> 00:07:03,219
in house with a couple enjoy your
company and they have a million other

96
00:07:03,220 --> 00:07:06,640
things to keep track of because you know
million plus new malware samples a day

97
00:07:06,640 --> 00:07:08,500
coming in

98
00:07:08,500 --> 00:07:12,750
copyright law that prevents you from
redistributing a full copy of the

99
00:07:12,750 --> 00:07:17,550
Windows operating system so again you
could install Windows on top of VMware

100
00:07:17,550 --> 00:07:22,270
and run that she had a real high end
systems or something like that but he

101
00:07:22,270 --> 00:07:26,049
was not charged company can't distribute
copies of Windows you're not selling

102
00:07:26,050 --> 00:07:28,890
licenses to use that backup windows and
so forth

103
00:07:28,890 --> 00:07:34,250
emulating the Windows API just like you
run the positive PR you know you the

104
00:07:34,250 --> 00:07:38,380
standard Windows API functions you go to
emulate them yourself and build it

105
00:07:38,380 --> 00:07:42,250
yourself and you also have the kind of
generally poor softer entering the AV

106
00:07:42,250 --> 00:07:47,450
industry it is pretty remarkable but you
know these AV companies don't have the

107
00:07:47,450 --> 00:07:50,469
best software engineering there's been a
lot of offensive work looking at these

108
00:07:50,470 --> 00:07:55,300
Davies and finding that they disabled
common protections like an axe opting

109
00:07:55,300 --> 00:07:57,260
out of a hassle or things like that

110
00:07:57,260 --> 00:08:02,080
these guys are not a couple games for
security goes and Robin on top of their

111
00:08:02,080 --> 00:08:04,969
game as far as just general softer
engineering goes they have too costly

112
00:08:04,970 --> 00:08:08,560
pump out new updates new patches new
signature things like that all the time

113
00:08:08,560 --> 00:08:13,750
not a lot of time to go back and fix old
stuff just concentration try to keep up

114
00:08:13,750 --> 00:08:17,580
with the constant proliferation of
malware so there's offer ends up being

115
00:08:17,580 --> 00:08:25,669
honestly the best engineered and if it
gets bye bye so in terms of emulation

116
00:08:25,670 --> 00:08:29,460
detection as I said very well documented
how you might go about detecting VMware

117
00:08:29,460 --> 00:08:35,299
ki-moon like that I did a big literature
survey on academic research in this

118
00:08:35,299 --> 00:08:40,390
field and I came up with this kind of
ontology of into five categories of

119
00:08:40,390 --> 00:08:44,770
emulation detection of environmental
artifacts are things that are in the

120
00:08:44,770 --> 00:08:49,069
operating system environment itself so
not the operating system that's that's

121
00:08:49,070 --> 00:08:52,910
running but the environment that the the
computer you're looking at is so things

122
00:08:52,910 --> 00:08:57,240
like user names what accounts for their
what are serial numbers for different

123
00:08:57,240 --> 00:09:03,060
install drivers are extensions what
programs are installed in their things

124
00:09:03,060 --> 00:09:03,670
like that

125
00:09:03,670 --> 00:09:08,079
what processes are running what windows
are open these are environmentally

126
00:09:08,080 --> 00:09:13,300
specific to the specific computer that
is being emulated then you have OSAP I

127
00:09:13,300 --> 00:09:17,530
inconsistency so I'm using the Windows
API but you're not running the real

128
00:09:17,530 --> 00:09:21,810
Windows API that Microsoft erode your
emulating yourself so you read the MSDN

129
00:09:21,810 --> 00:09:26,680
documentation and then you go right you
know functions that emulate deformities

130
00:09:26,680 --> 00:09:30,699
API functions so it's very hard to get
those behaving exactly right as real

131
00:09:30,700 --> 00:09:34,460
Windows API would throw exceptions when
they should turn the right to secure

132
00:09:34,460 --> 00:09:38,120
area code when they should I respecting
the fact that maybe when 27 vs Windows

133
00:09:38,120 --> 00:09:41,510
XP has different area codes return and
you're treating me like one of those

134
00:09:41,510 --> 00:09:45,950
systems update things and you lots of
inconsistency in the functionality of

135
00:09:45,950 --> 00:09:51,070
the operating system API network
emulation often checks for network

136
00:09:51,070 --> 00:09:55,940
connections and these emulators emulate
network connectivity and often respond

137
00:09:55,940 --> 00:09:59,800
with generic success messages or things
like that to network requests in an

138
00:09:59,800 --> 00:10:04,099
effort to go to our into running further
and that obviously has another vector

139
00:10:04,100 --> 00:10:06,830
for detection of timing attacks

140
00:10:06,830 --> 00:10:11,740
these are very well-documented against
things like the American no time in

141
00:10:11,740 --> 00:10:17,020
immune systems is very hard to get right
in fact as a paper called transparency

142
00:10:17,020 --> 00:10:20,600
accountability and transparency is
published by researchers at Carnegie

143
00:10:20,600 --> 00:10:24,600
Mellon and a couple researchers at
VMware work together in this paper and

144
00:10:24,600 --> 00:10:27,800
they basically said it's almost
impossible to get a mutation of time

145
00:10:27,800 --> 00:10:31,709
correct and we won't even bother doing
it because you know ninety-nine percent

146
00:10:31,710 --> 00:10:34,950
of users of virtualization don't need
don't need cycle accurate a millisecond

147
00:10:34,950 --> 00:10:39,160
accurate timing they just need to
virtualize their new web apps web

148
00:10:39,160 --> 00:10:40,469
service things like that

149
00:10:40,470 --> 00:10:45,270
malware researchers who aren't exactly
accurate timing that's exactly a real

150
00:10:45,270 --> 00:10:51,490
you would have a tiny minority of people
who use virtualization so not only is it

151
00:10:51,490 --> 00:10:55,370
very difficult to there's not really a
lot of interest in making very accurate

152
00:10:55,370 --> 00:11:01,380
timing subsidized multithreading things
get even stranger when you have multiple

153
00:11:01,380 --> 00:11:05,400
threads running and might have race
conditions and you could have setup code

154
00:11:05,400 --> 00:11:09,300
that has decreased conditions that might
be introduced her triggered when only

155
00:11:09,300 --> 00:11:12,510
when you're in the AM and then CPU

156
00:11:12,510 --> 00:11:16,660
process introspection is the next one
that's looking at your own process when

157
00:11:16,660 --> 00:11:20,780
you're being virtualize so things like
how big is my memory space weather

158
00:11:20,780 --> 00:11:24,569
addresses are starting to stack in my
process what's in the heat within my

159
00:11:24,570 --> 00:11:29,690
process could detect allows that are
directed to you you could detect that

160
00:11:29,690 --> 00:11:32,480
you're running in the special I space it
doesn't pay the real real space might

161
00:11:32,480 --> 00:11:38,350
you could look at you know CPU cache
problems things like that are related

162
00:11:38,350 --> 00:11:42,400
directly to the execution of your
process itself and then finally we have

163
00:11:42,400 --> 00:11:48,510
CPU red pills so these are instructions
that when running the CPU on the virtual

164
00:11:48,510 --> 00:11:53,470
ICP you don't behave the way they would
in a real CPU x86 is an incredibly

165
00:11:53,470 --> 00:11:57,480
complicated instruction set the pace
instruction specification from Intel as

166
00:11:57,480 --> 00:12:01,240
far as I know has nine hundred and six
instructions that before these crazy

167
00:12:01,240 --> 00:12:03,560
some instructions vector math

168
00:12:03,560 --> 00:12:09,020
DRM specific instructions multimedia
decoding crypto instructions just the

169
00:12:09,020 --> 00:12:13,680
basic structure of 96 instructions Intel
doesn't even get it right between their

170
00:12:13,680 --> 00:12:17,469
real CPUs and their manuals the way that
the spec works in order to

171
00:12:17,470 --> 00:12:22,029
virtualization systems they won't throw
the right folks when they should they

172
00:12:22,029 --> 00:12:28,050
might accept instructions that are
malformed or encoded they might you know

173
00:12:28,050 --> 00:12:34,000
not set a certain status register status
flag after an operation and that's a

174
00:12:34,000 --> 00:12:35,670
very well-documented field of study

175
00:12:35,670 --> 00:12:38,420
there's actually a paper called a
fistful of red pills for students learn

176
00:12:38,420 --> 00:12:43,829
more about that so terms of finding
those artifacts of emulation we want to

177
00:12:43,830 --> 00:12:48,400
find them will detect any leaders how do
you do that most obvious answer that

178
00:12:48,400 --> 00:12:52,430
comes up comes to mind me is you reverse
them you know you just take them and you

179
00:12:52,430 --> 00:12:58,050
throw the entire software NIDA reversing
it that's very very difficult extremely

180
00:12:58,050 --> 00:13:03,339
time-consuming expensive tools like Ida
and then you can have expert knowledge

181
00:13:03,339 --> 00:13:09,450
first reverse engineering in general and
she's a very challenging pastor taking

182
00:13:09,450 --> 00:13:15,700
on modular multi-part software very
complex concerning their top of the

183
00:13:15,700 --> 00:13:18,580
operating system itself just as
complicated if not more than the

184
00:13:18,580 --> 00:13:21,430
operating system and not as well
documented the operating system might be

185
00:13:21,430 --> 00:13:26,079
then you have to lower x86 really well
if you're looking at a CPU emulator you

186
00:13:26,080 --> 00:13:30,750
better be able to really understand x86
and how the heads and what to look for

187
00:13:30,750 --> 00:13:36,650
actually reversed a cpi-m leader itself
operating systems if you're looking at

188
00:13:36,650 --> 00:13:39,839
the simulation of the Windows API you
should never really know the Windows API

189
00:13:39,839 --> 00:13:44,820
well to be able to spot inconsistencies
and their relation to Windows API versus

190
00:13:44,820 --> 00:13:48,620
the real one and then you'll see a lot
of our behavior because again these gems

191
00:13:48,620 --> 00:13:54,610
target malware designed to run malware
and the most interesting spots look at

192
00:13:54,610 --> 00:13:59,580
them for weaknesses and vulnerabilities
and ways of detecting are probably in

193
00:13:59,580 --> 00:14:00,420
there

194
00:14:00,420 --> 00:14:04,689
responses or their their code that
handles kind of behaviour like for

195
00:14:04,690 --> 00:14:08,700
example calling sleep in order to stall
execution she want it might want to look

196
00:14:08,700 --> 00:14:12,450
at their relation to sleep function to
see how they handle that but there's

197
00:14:12,450 --> 00:14:16,709
plenty of other more obscure Mauer
behaviors that you need to know all

198
00:14:16,709 --> 00:14:20,510
about in order to effectively respond to
these things and then finally have a

199
00:14:20,510 --> 00:14:25,829
limited lifespan she do less work and
then the AV company puts out version 2.0

200
00:14:25,829 --> 00:14:30,388
their avi me later they changed the
obfuscation techniques system using

201
00:14:30,389 --> 00:14:34,959
their tools they rewrite it compiled all
kinds of stuff I know you're working out

202
00:14:34,959 --> 00:14:38,060
the window and say there is no
obligation to pick me up the

203
00:14:38,060 --> 00:14:42,180
breakthrough that now to get into the
thing to start reversing again very very

204
00:14:42,180 --> 00:14:46,579
difficult and again these things and
maybe option may have been tiny house

205
00:14:46,579 --> 00:14:50,779
features custom bright binary formats
things like that it's it's very

206
00:14:50,779 --> 00:14:55,959
non-trivial not a lot of this knowledge
that said it is technically possible

207
00:14:55,959 --> 00:15:01,739
here we have a reverse engineering Stock
Exchange answer from rolf rolls if

208
00:15:01,740 --> 00:15:04,279
you're not familiar with rolf is
probably one of the best recent years

209
00:15:04,279 --> 00:15:11,060
the world absolutely brilliant and we
posted a question over and Exchange

210
00:15:11,060 --> 00:15:14,599
asking them about are asking people in
general had a take on this task of

211
00:15:14,600 --> 00:15:17,760
reversing at a bar simulators and Rolf
came into the job done that's a couple

212
00:15:17,760 --> 00:15:21,890
times and you know you have some general
guidelines had you the stuff I tried

213
00:15:21,890 --> 00:15:27,269
calling through with this and it is very
very difficult still nine Tripoli even

214
00:15:27,269 --> 00:15:30,480
if you are someone as brilliant as role
but that's it is technically possible

215
00:15:30,480 --> 00:15:34,980
has been documented I got the speaker
also recon about some this work and very

216
00:15:34,980 --> 00:15:40,329
impressive so real state of the art
besides doing reverse engineering is the

217
00:15:40,329 --> 00:15:44,199
so-called black box testing in this has
been presented the highest-profile

218
00:15:44,199 --> 00:15:48,689
presentation of work like this was a
black hat 2014 by Arnie Sweden and a lot

219
00:15:48,690 --> 00:15:51,490
of us by he and they presented work

220
00:15:51,490 --> 00:15:57,089
cause called out one Packer to rule them
all and they made a pact were able to

221
00:15:57,089 --> 00:16:02,520
have a lot of interest simulators and
they did some black box testing so what

222
00:16:02,520 --> 00:16:06,220
you do is you begin with the question is
function X in the emulator and directly

223
00:16:06,220 --> 00:16:13,959
or you know is this CPU opcode ameloid
directly or is this an artifact present

224
00:16:13,959 --> 00:16:18,500
but just a yes or no question are true
or false question then you create a

225
00:16:18,500 --> 00:16:22,740
binary that's as a function acts is not
correct or is correct or whatever you

226
00:16:22,740 --> 00:16:26,600
wanna do but you basically check its
return code you lend shoes to either

227
00:16:26,600 --> 00:16:32,350
drop malware or not right now we're to
exit and then compile this by now so in

228
00:16:32,350 --> 00:16:36,130
the end of our simulator and then you'll
run it in the end of our simulator

229
00:16:36,130 --> 00:16:42,950
police chemist this binary for me now
when it runs it function actually run a

230
00:16:42,950 --> 00:16:46,970
result will come out of it and then the
your binary will say we see the correct

231
00:16:46,970 --> 00:16:51,660
result or do we not men shoes to either
drop now we're not drop malware and the

232
00:16:51,660 --> 00:16:56,110
AV will observe the runtime behavior at
this point here you've given it see if

233
00:16:56,110 --> 00:17:00,940
our was or was not dropped and then you
have one bit of insight into the end of

234
00:17:00,940 --> 00:17:04,800
our state it's basically one but Oracle
it enters the strip us question for you

235
00:17:04,800 --> 00:17:10,959
one bit at a time so this is obviously
very slow very painstaking and you know

236
00:17:10,959 --> 00:17:18,069
very manual you're going to be doing
this bit by bit by bit so this is best

237
00:17:18,069 --> 00:17:21,920
really suited for finding negative
results so finding ocean access not

238
00:17:21,920 --> 00:17:27,059
emulated properly but many of these
obscure cases and cases things like that

239
00:17:27,059 --> 00:17:30,370
it's very hard to proving that things
are right but it is easy to find things

240
00:17:30,370 --> 00:17:35,719
that are wrong that said you can kind of
extract positive artifacts of emulation

241
00:17:35,720 --> 00:17:39,730
of their environmental attracts you
could do a thing like say get username

242
00:17:39,730 --> 00:17:44,090
of returns admin you then say it was
this first letter of what was termed a

243
00:17:44,090 --> 00:17:48,350
was it be was at sea was a dear you
could do a binary search of that range

244
00:17:48,350 --> 00:17:52,570
but again that's very slow very
painstaking the blind sheik injection of

245
00:17:52,570 --> 00:17:54,350
that research you know the letter

246
00:17:54,350 --> 00:18:00,820
was then we'll sleep or we won't get
very slow painstaking this particular

247
00:18:00,820 --> 00:18:05,470
work of doing is it in a letter abcd
Kyle Adams as a researcher at Juniper

248
00:18:05,470 --> 00:18:10,370
Networks he presented to market b-sides
314 in Las Vegas where he did that to it

249
00:18:10,370 --> 00:18:15,379
EVG is a javascript emulator and he
extracted some small amounts of

250
00:18:15,380 --> 00:18:17,330
information from from there

251
00:18:17,330 --> 00:18:22,870
using a technique but in a very slow and
very painful so after giving that back

252
00:18:22,870 --> 00:18:29,570
I'm going to say be leaked which is my
tools my innovation top of this work so

253
00:18:29,570 --> 00:18:33,500
it really is a tool and API for
extracting information from

254
00:18:33,500 --> 00:18:37,330
anti-abortion leaders without using
binary overseeing its built-in C and

255
00:18:37,330 --> 00:18:42,500
Python and it's very fast in terms of
setting up a new baby and integrating I

256
00:18:42,500 --> 00:18:47,760
can take a new TV and getting caught up
with a number of hours mostly automated

257
00:18:47,760 --> 00:18:51,429
script running in the scripture take a
couple hours to run a nice gonna sit

258
00:18:51,429 --> 00:18:56,250
back and let them run then I can program
test cases that query in and look inside

259
00:18:56,250 --> 00:19:00,100
the simulator and see what's in their
number of minutes and I can't estimate

260
00:19:00,100 --> 00:19:04,860
get results back in the burbs seconds to
any of this information as we make this

261
00:19:04,860 --> 00:19:09,870
one bit channel into a conventional
arbitrarily large channel we do that by

262
00:19:09,870 --> 00:19:14,658
mapping and encrypted malware samples on
to end symbols in this case we use

263
00:19:14,659 --> 00:19:18,010
asking voters but it could be any symbol
you want to express coming into this

264
00:19:18,010 --> 00:19:25,030
matter second looks like this table of
asking letters maps to various pieces

265
00:19:25,030 --> 00:19:29,879
about where we're at Rose couple time
our samples and mapping like that and

266
00:19:29,880 --> 00:19:33,900
what we do is inside the emulator we
take a reading we dropped malware

267
00:19:33,900 --> 00:19:39,210
accordingly to express what we saw
inside the emulator so we need to start

268
00:19:39,210 --> 00:19:42,770
by taking much of our samples and
packing them so we take the sample

269
00:19:42,770 --> 00:19:47,799
encrypted get an encrypted blob I'm
sticking to our table near here have

270
00:19:47,799 --> 00:19:50,668
taken the range of 0 to 256 the ASCII
range

271
00:19:50,669 --> 00:19:54,340
in the middle of their titles packing
the K

272
00:19:54,340 --> 00:19:58,019
that's actually from a rap video made by
Kaspersky Lab's you can find it on

273
00:19:58,019 --> 00:20:03,059
youtube ushering in the caves and
official video from the lab with two

274
00:20:03,059 --> 00:20:07,119
guys who talk about how great software
isn't when I'm back in the cage is my

275
00:20:07,119 --> 00:20:11,488
secret weapon is me antispam and
antivirus protection is really funny I

276
00:20:11,489 --> 00:20:15,909
thought this was appropriate for now
packing the malware and particularly

277
00:20:15,909 --> 00:20:23,950
letters you know let's take a look at up
so now inside the emulator we have this

278
00:20:23,950 --> 00:20:29,190
big blobs big array of packed malware
samples in the stable when make a call

279
00:20:29,190 --> 00:20:34,759
like get username and lets it returns a
de mille 480 emulator we now drop by

280
00:20:34,759 --> 00:20:41,509
whenever 6586 so forth we drop them out
in that table corresponds to letters AV

281
00:20:41,509 --> 00:20:48,570
and then he comes back and says well we
saw this virus we go back to our table

282
00:20:48,570 --> 00:21:11,700
correlate that across we saw on a we
proceed with the rest the letters we saw

283
00:21:11,700 --> 00:21:17,690
see as an hour off the news there right
once and running one anywhere against

284
00:21:17,690 --> 00:21:20,970
any AV to any of you that you can talk
to and maybe they could have integrated

285
00:21:20,970 --> 00:21:22,490
with the system

286
00:21:22,490 --> 00:21:27,050
your seat test cases work against a TV
its generic you also have a Python API

287
00:21:27,050 --> 00:21:30,610
to build script will test cases meaning
creek interactive things your

288
00:21:30,610 --> 00:21:34,750
grandfather's you can sit there and you
don't have to constantly tweak things

289
00:21:34,750 --> 00:21:38,490
you can say I want to run this test and
business results of this test run this

290
00:21:38,490 --> 00:21:41,050
other tests and so forth and so forth

291
00:21:41,050 --> 00:21:44,780
believe the name of test cases just
integrate with other applications which

292
00:21:44,780 --> 00:21:48,040
is one thing I'm gonna shut my demo
integrate this with Lib capstone which

293
00:21:48,040 --> 00:21:52,290
is a great LOV amidst assembly framework
and I was able to disassemble code the

294
00:21:52,290 --> 00:21:57,480
helmet in the emulators released right
there in my script also say integrated

295
00:21:57,480 --> 00:22:00,110
with the web app and make a calm your
own virustotal type thing at least

296
00:22:00,110 --> 00:22:03,899
information or these emulators you could
do anything that talks to Python you can

297
00:22:03,900 --> 00:22:07,120
certainly greatly with AV leak if you
father made a python you can integrate

298
00:22:07,120 --> 00:22:14,429
that and going to be easy to integrate
new way these automated scripts so can

299
00:22:14,430 --> 00:22:19,210
the flow of AV leak we start with our
test case then I'm try to make this very

300
00:22:19,210 --> 00:22:23,220
simple clothes to Redding real see that
will run a real system and is printed

301
00:22:23,220 --> 00:22:28,790
out standard out so this one is very
simple just gonna print out our 20 just

302
00:22:28,790 --> 00:22:34,050
what is the name of the program running
faster if you like Python code that's

303
00:22:34,050 --> 00:22:37,889
going to deal with this compilation and
testing and stuff for us to talk to the

304
00:22:37,890 --> 00:22:44,260
compiler him says he believes compile
this test case they test case scenario

305
00:22:44,260 --> 00:22:49,540
we go talk to the AV and we talked to
scan this manner for me and the baby

306
00:22:49,540 --> 00:22:52,879
comes back and says oh we found this
malware and then we can repeat this

307
00:22:52,880 --> 00:22:57,830
again as we need to look more and more
information or the AV

308
00:22:57,830 --> 00:23:04,908
so I tested for commercial antivirus
products Kaspersky AVG but defender and

309
00:23:04,909 --> 00:23:10,820
virus blockade or DBA 32 I chose the is
av is by uploading Mauer droppers to

310
00:23:10,820 --> 00:23:15,158
virustotal why didn't I created a
dropper for the ecard virus actually not

311
00:23:15,159 --> 00:23:20,279
a virus it's a good test case designed
by a consortium of antivirus companies

312
00:23:20,279 --> 00:23:25,440
and it's basically just a test if they
can detect malware malicious and this

313
00:23:25,440 --> 00:23:27,970
was made like twenty years ago

314
00:23:27,970 --> 00:23:31,840
proper that dropped econ test case and
then I saw what came back from Barstow

315
00:23:31,840 --> 00:23:36,500
delivered what matters identified and we
look forward Tamika dedications so I

316
00:23:36,500 --> 00:23:40,799
found a bunch of the avian sold said you
know week are not a not a virus . this

317
00:23:40,799 --> 00:23:46,190
dot dot dot the other thing whatever and
they're all exactly the same string so I

318
00:23:46,190 --> 00:23:49,450
need some good looking around like that
he compared to look at some other sites

319
00:23:49,450 --> 00:23:52,929
found that actually all of those
products all use the BitDefender engines

320
00:23:52,929 --> 00:23:57,130
they had lessons out this one engine and
used across multiple products so I chose

321
00:23:57,130 --> 00:24:00,909
four different AV products that use
different emulation engines that are

322
00:24:00,909 --> 00:24:05,090
different detection names and also chose
them to become diverse geographically

323
00:24:05,090 --> 00:24:09,870
and should have tried to make sure that
I was getting a wide range of things

324
00:24:09,870 --> 00:24:14,518
only did choose for you could look at
more but I really want to go for depth

325
00:24:14,519 --> 00:24:18,669
depth of testing and trying lots of
different tests out rather than just a

326
00:24:18,669 --> 00:24:21,860
breath of having a lot of mao of
eighties that I can talk to is going to

327
00:24:21,860 --> 00:24:24,300
be so simple to integrate new eighties

328
00:24:24,300 --> 00:24:29,110
and chose ford focus on for now I also
tried to choose the medicare cover range

329
00:24:29,110 --> 00:24:34,479
of complexity dispersed is obviously a
really very complex software very well

330
00:24:34,480 --> 00:24:39,870
known company and that are seen a video
but defender a little less so and then

331
00:24:39,870 --> 00:24:44,770
bibi is really not that well-known not a
very notable company and sure enough I

332
00:24:44,770 --> 00:24:48,629
did find that you know there is not
nearly as well as the other ones you

333
00:24:48,630 --> 00:24:50,000
want to see how that would play out

334
00:24:50,000 --> 00:24:56,250
know does the reputation behind the
software really is it really reflected

335
00:24:56,250 --> 00:25:00,800
in the emulators that they presented so
now some results and actual not a live

336
00:25:00,800 --> 00:25:05,320
demo as well so again these are the five
categories of emission detection that I

337
00:25:05,320 --> 00:25:14,740
looked at just a fresh start with facts
I found hardcore program names

338
00:25:14,740 --> 00:25:21,130
computername strategies max registry
entries etc within these emulators again

339
00:25:21,130 --> 00:25:24,160
you're the only process running in the
emulator when you're being analyzed

340
00:25:24,160 --> 00:25:29,190
there is just this one hour process but
real Windows systems don't just run one

341
00:25:29,190 --> 00:25:32,340
process there a multiprocessing are
operating system

342
00:25:32,340 --> 00:25:35,570
your mobile processors running at once
you are able to see what other processes

343
00:25:35,570 --> 00:25:39,220
are running on the system so I did that
I said one of the processes are running

344
00:25:39,220 --> 00:25:43,580
and found lots of fake processes running
within these systems they just hard

345
00:25:43,580 --> 00:25:46,530
coded a list of other processes are
running is hard coded

346
00:25:46,530 --> 00:25:50,670
kids and you can just look at that and
find unique strengths and stuff in there

347
00:25:50,670 --> 00:25:54,470
you can look at open windows generally
Windows operating systems

348
00:25:54,470 --> 00:25:58,850
you know 'cause have windows open when
users are using the computer their

349
00:25:58,850 --> 00:26:02,199
windows open and you can get enumerate
those windows see what windows are open

350
00:26:02,200 --> 00:26:06,660
and then just on the side there have a
presentation of a couple artifacts I

351
00:26:06,660 --> 00:26:13,030
found she CRD 0 randomized is your name
every time it's run it runs you DVD

352
00:26:13,030 --> 00:26:18,540
cause you MWL sample our sample but
defender your test app and BBA yourself

353
00:26:18,540 --> 00:26:22,870
that exe and then you get computer name
is random but actually the same every

354
00:26:22,870 --> 00:26:24,050
time

355
00:26:24,050 --> 00:26:27,409
you know those other ones are our but
these are just like hard coded in there

356
00:26:27,410 --> 00:26:31,420
so every time in the AV you make a query
to get computer name you get one of

357
00:26:31,420 --> 00:26:36,330
those strings back and you can just say
oh well if I C NFC team whatever I know

358
00:26:36,330 --> 00:26:41,810
their money and disperse key I'm going
to 9 I'm not going to text me these are

359
00:26:41,810 --> 00:26:47,020
the these are the most simple art faxed
to find but also the most simple to a

360
00:26:47,020 --> 00:26:50,830
shop and fix these are just like hard
coated strings left in this code and

361
00:26:50,830 --> 00:26:58,010
compiled so well every to find there are
some very easy to remove the system

362
00:26:58,010 --> 00:27:01,970
registry and other environmental
artifact I as good as i said i think is

363
00:27:01,970 --> 00:27:06,300
a interactive API so I use this API to
be done to file system in the registry

364
00:27:06,300 --> 00:27:11,659
of these products so did as I went to
the C Drive and I said show me all files

365
00:27:11,660 --> 00:27:13,610
in the C Drive from there

366
00:27:13,610 --> 00:27:18,909
show me you know folders with narrow and
I kept by tearing out every single file

367
00:27:18,910 --> 00:27:25,450
on these systems that for the registry
of these systems I found here

368
00:27:25,450 --> 00:27:29,490
the first one a elephant on Monday
feature that was in the butt fender

369
00:27:29,490 --> 00:27:33,170
engine translate left Romanian to
English using Google Translate now

370
00:27:33,170 --> 00:27:37,940
romanian company and translates to its a
ghost file it exists to say no

371
00:27:37,940 --> 00:27:44,310
got back I don't know translation of
anyone's Romanian has a better one but

372
00:27:44,310 --> 00:27:46,540
it looks like some kind of joke or
something referring to the fact that

373
00:27:46,540 --> 00:27:51,310
it's a big file also but defender see
Batman and from there there's Batman

374
00:27:51,310 --> 00:27:57,649
Batman dot com Batman bat especially in
the file system in this fall there

375
00:27:57,650 --> 00:28:01,340
seemed upbeat settings my documents you
have all these files these are only

376
00:28:01,340 --> 00:28:06,270
three or four at of about 40 files and
if you look look at the new look I

377
00:28:06,270 --> 00:28:10,730
random but if you look closely you'll
notice that these are actually a random

378
00:28:10,730 --> 00:28:15,090
just smash her hands on keyboard you
wonderful things like this like Aoi oh

379
00:28:15,090 --> 00:28:19,659
those are three adjacent kids are all
touching and you can look at the casino

380
00:28:19,660 --> 00:28:23,190
you'll see things like I'm just ran a
hand across the home row or things like

381
00:28:23,190 --> 00:28:27,690
that so clearly I just need to make make
a bunch of random violence and some

382
00:28:27,690 --> 00:28:33,030
smash their hands it's weird stuff you
find vacant stalls of other antivirus

383
00:28:33,030 --> 00:28:35,700
products like you find like the registry

384
00:28:35,700 --> 00:28:42,250
and in the file system of Lake 24 Navy
products installed Kaspersky via

385
00:28:42,250 --> 00:28:48,000
emulator other has a 20 or 30 products
installed and running at once in the

386
00:28:48,000 --> 00:28:53,649
emulator when the process listing
file-sharing clients and software like

387
00:28:53,649 --> 00:28:57,658
that it's pretty much a registry entries
led to World of Warcraft not quite sure

388
00:28:57,659 --> 00:29:01,779
what that was up that DVD actually had a
Windows product idea included within

389
00:29:01,779 --> 00:29:07,480
their registry also found a bunch of
references to farm manager and the BBA

390
00:29:07,480 --> 00:29:09,480
tenderness bursty

391
00:29:09,480 --> 00:29:14,809
manager is a file system manager that is
available as freeware and former USSR

392
00:29:14,809 --> 00:29:19,860
countries so I guess it's very popular
over there and I found references to it

393
00:29:19,860 --> 00:29:24,678
within this file systems my hypothesis
is that program at least companies

394
00:29:24,679 --> 00:29:29,360
probably no spider their actual losses
from their real computer and took all

395
00:29:29,360 --> 00:29:33,408
the strength and file names and just
kind of made them to be that made those

396
00:29:33,409 --> 00:29:37,519
to be the file system and all the
references to farm manager to various

397
00:29:37,519 --> 00:29:41,340
file sharing clients that might be using
to our discovery like that that's that's

398
00:29:41,340 --> 00:29:47,459
my best apotheosis always API
inconsistency your functions fail return

399
00:29:47,460 --> 00:29:51,230
unique wrong values has now stopped so
forth

400
00:29:51,230 --> 00:29:58,159
you lack of commissions are forced to
file system so like Dec system by

401
00:29:58,159 --> 00:30:01,429
Information folder you should not be
able to write to but in all these get

402
00:30:01,429 --> 00:30:03,649
right to it and open files and so forth

403
00:30:03,649 --> 00:30:09,570
window and doing an interaction is often
not emulated in these movies present

404
00:30:09,570 --> 00:30:12,189
fake open windows on the system's

405
00:30:12,190 --> 00:30:15,649
actually try to interact with them press
buttons on the side windows messages

406
00:30:15,649 --> 00:30:19,428
that stuff doesn't really often work has
malware doesn't often do that please a

407
00:30:19,429 --> 00:30:23,940
few companies not really focused on
giving a high-fidelity simulation of

408
00:30:23,940 --> 00:30:28,940
windows and go interaction and AVG the
format message function

409
00:30:28,940 --> 00:30:34,140
should return a string describing an
error message like you know where this

410
00:30:34,140 --> 00:30:38,630
happened because no permissions or
whatever air whatever happened is your

411
00:30:38,630 --> 00:30:43,280
turn the air message and hexadecimal
back to you did before I don't know

412
00:30:43,280 --> 00:30:46,870
what's up with that there are plenty of
these but a lot of their not very

413
00:30:46,870 --> 00:30:51,439
interesting look at just dysfunction
Phillips ties fail fails silently or

414
00:30:51,440 --> 00:30:54,830
this function always returns negative
water always turn 04 doesn't do anything

415
00:30:54,830 --> 00:30:58,610
to not that interesting as things to
present but there should be there that

416
00:30:58,610 --> 00:31:03,280
you could exploit them in relation to
the library could this is really

417
00:31:03,280 --> 00:31:08,800
interesting You Know in mind as you can
do get back address and library you can

418
00:31:08,800 --> 00:31:13,139
press the point or two given function in
a link library so I did that for three

419
00:31:13,140 --> 00:31:16,920
to four others have used that for every
single function

420
00:31:16,920 --> 00:31:21,020
32 and I jumped out the instructions are
found there just what role bites are

421
00:31:21,020 --> 00:31:25,370
there when I say it bak address what I
see their account is this common theme

422
00:31:25,370 --> 00:31:28,850
across all these movies was that obscure
accepting instructions are used to

423
00:31:28,850 --> 00:31:34,800
trigger picked up by the CPU emulator
what that looks like it is here in AVG

424
00:31:34,800 --> 00:31:40,210
we see the standard Windows API hot
patch prologue prologue we see a lot

425
00:31:40,210 --> 00:31:45,070
more BBX their access and then the two
by ordinal export number of the function

426
00:31:45,070 --> 00:31:52,120
was just called so my is that malware
programs in general don't often run like

427
00:31:52,120 --> 00:31:57,489
new BBX and then have a number with 000
so when the CPU emulator

428
00:31:57,490 --> 00:32:01,990
sits alongside with the Windows emulator
sees that instruction it knows well

429
00:32:01,990 --> 00:32:05,100
you've called get username or you get
bak address you've called mother brought

430
00:32:05,100 --> 00:32:09,360
over the function you called it knows
that and it steps in emulate that

431
00:32:09,360 --> 00:32:16,490
function for the binary defender I saw
two different patterns one this this

432
00:32:16,490 --> 00:32:21,830
kind of push around you but number and
then you call this address is invalid

433
00:32:21,830 --> 00:32:26,540
e-mail address so presumably when
BitDefender sees this call to this

434
00:32:26,540 --> 00:32:30,430
invalid address CPM had picked up knows
that it needs to emulate a certain

435
00:32:30,430 --> 00:32:34,940
function and again the address varies so
too often be like the oil export number

436
00:32:34,940 --> 00:32:41,360
1234 so forth and then that up and then
you said the other pattern where they'd

437
00:32:41,360 --> 00:32:49,360
be directed to BofA 0001 and between
functions and defender you'll see in 23

438
00:32:49,360 --> 00:32:54,139
real winner systems that's what I looked
at I had not between functions in my 32

439
00:32:54,140 --> 00:33:02,720
on my system you get entry fee be a
conditional jump jumping on both just

440
00:33:02,720 --> 00:33:08,590
the next instruction and then move DWORD
pointer address CPM leader sees this as

441
00:33:08,590 --> 00:33:12,600
it needs to emulate something in between
junctions in VBA you see the Holt

442
00:33:12,600 --> 00:33:17,360
instructor said between functions
especially actually get this right

443
00:33:17,360 --> 00:33:20,899
real programs in normal programs I
malicious programs really should be

444
00:33:20,900 --> 00:33:24,320
looking at library code found within
their process based on know why you'd

445
00:33:24,320 --> 00:33:29,149
want to do that so actually they will
give you two instructions and the list

446
00:33:29,150 --> 00:33:32,870
generate random bites her on just a few
random names and you ask for your name

447
00:33:32,870 --> 00:33:38,600
of 40 actually if you do enough of this
you poke enough code those who you with

448
00:33:38,600 --> 00:33:42,240
a classification say well we hear
mystically think you're exploit that

449
00:33:42,240 --> 00:33:46,880
script that generic my theories me they
think you are some exploit or something

450
00:33:46,880 --> 00:33:50,260
maybe looking to build a rope chain or
looking to fingerprint the specific

451
00:33:50,260 --> 00:33:54,390
emulator their specific system you're
running on like that this is is really

452
00:33:54,390 --> 00:33:59,620
pretty good you shouldn't really normal
not malicious programs I can't think of

453
00:33:59,620 --> 00:34:03,010
any valid reason from to be doing this
level of introspection looking at a

454
00:34:03,010 --> 00:34:05,430
local libraries within their process
unless they're trying to do something

455
00:34:05,430 --> 00:34:10,119
malicious

456
00:34:10,119 --> 00:34:15,119
network emulation so skinny jeans but
defender all emulate network

457
00:34:15,119 --> 00:34:16,210
connectivity

458
00:34:16,210 --> 00:34:20,230
responded success Tim Mehl network
queries and actually they'll respond

459
00:34:20,230 --> 00:34:24,279
with valid ipa files and I downloaded
executables from all three of these

460
00:34:24,279 --> 00:34:29,039
systems were made a request and I
reverse engineer the man found more

461
00:34:29,039 --> 00:34:31,679
things that I could use to detect these
emulators by saying you know five

462
00:34:31,679 --> 00:34:34,740
million or question I see this specific
file come down with a specific set of

463
00:34:34,739 --> 00:34:38,229
lights come down in the file I know in
the emulator

464
00:34:38,230 --> 00:34:41,829
this is probably where catching malware
my download a second stage one batter

465
00:34:41,829 --> 00:34:48,970
executor you know payload timing I
checked there are a number of timing and

466
00:34:48,969 --> 00:34:54,230
windows and also did you see attorneys
DSCP instructions on the CPU and I found

467
00:34:54,230 --> 00:34:57,630
there's really no need for sophisticated
timing attacks there are very specific

468
00:34:57,630 --> 00:35:01,970
time attacks documented in academic
literature detecting hypervisors things

469
00:35:01,970 --> 00:35:07,618
like that but in these emulators the
timing was hopelessly broken and I also

470
00:35:07,619 --> 00:35:10,519
found that within the timing was another
artist

471
00:35:10,519 --> 00:35:17,950
environmental artifact so you'd say get
get time and always 0 sales October 3rd

472
00:35:17,950 --> 00:35:22,618
2011 at 7:02 p.m. every single time you
ask the time so it's basic environmental

473
00:35:22,619 --> 00:35:27,230
artifact in its own right at least
attempted to be realistic and then

474
00:35:27,230 --> 00:35:30,259
between BBA were totally dysfunctional
and they're coming

475
00:35:30,259 --> 00:35:35,279
implementation process introspection and
there's lots of these but not very

476
00:35:35,279 --> 00:35:40,130
interesting to look at something like
the ICP I things but these are a bunch

477
00:35:40,130 --> 00:35:43,619
of categories of things you could look
at my job to just see all this point

478
00:35:43,619 --> 00:35:47,999
there is you know not what I expected or
this field is on the path for things

479
00:35:47,999 --> 00:35:52,019
like that you can look at the stock
above yourself after you run a function

480
00:35:52,019 --> 00:35:57,118
you can see if there was actual data
left on the stack by the executor did a

481
00:35:57,119 --> 00:36:01,859
system that would be there might not be
so you can also look at D levels in

482
00:36:01,859 --> 00:36:05,720
memory of you call the library library
returns a pointer to the start of the

483
00:36:05,720 --> 00:36:10,078
season to the DLC should see the MZ her
if you don't see that you might know

484
00:36:10,079 --> 00:36:12,039
your name you later

485
00:36:12,039 --> 00:36:15,900
fantasy be red pills findings appear at
bill requires a lot of testing

486
00:36:15,900 --> 00:36:19,480
infrastructure we have some limited
support for that

487
00:36:19,480 --> 00:36:22,900
but I didn't really focus on this
because there is very well thought out

488
00:36:22,900 --> 00:36:26,750
these attacks but does require a lot of
work lot of infrastructure one of the

489
00:36:26,750 --> 00:36:30,369
most cutting-edge papers in the skilled
published last year

490
00:36:30,369 --> 00:36:33,730
what they did is they started grad
student down to grab them reading x86

491
00:36:33,730 --> 00:36:38,550
manual come with nineteen thousand plus
test cases for the x86 instruction set

492
00:36:38,550 --> 00:36:45,300
which then ran those test cases are open
to the public so given a choice to do

493
00:36:45,300 --> 00:36:49,550
that we're doing kind of like just
finding out random had a try I didn't

494
00:36:49,550 --> 00:36:54,440
wanna go and do all the effort of
building the test harnesses to do that

495
00:36:54,440 --> 00:36:58,130
so we do have some limit support but
it's not that great but I didn't just

496
00:36:58,130 --> 00:37:03,300
handcrafted test his creation looking at
you need instructions like CPUID det ser

497
00:37:03,300 --> 00:37:07,730
ut SCP instructions that are pretty
weird obscure and I expect would not be

498
00:37:07,730 --> 00:37:10,780
able to correctly a chance really
interesting promising results from holes

499
00:37:10,780 --> 00:37:17,100
so some common themes of these areas is
that extremely simple detection methods

500
00:37:17,100 --> 00:37:21,480
are very efficient and don't really seem
to get passed on to get updated even

501
00:37:21,480 --> 00:37:24,380
when the disclosed hardcore
environmental artifacts are clearly

502
00:37:24,380 --> 00:37:29,130
there from programmers and they think
it's funny to say about me and at sea or

503
00:37:29,130 --> 00:37:32,810
this is a ghost filed that back but you
know that's another way of detecting

504
00:37:32,810 --> 00:37:38,340
these systems attempt to block malicious
behavior leaving $24 products running

505
00:37:38,340 --> 00:37:42,760
letting you write all these vials
leaving files in the My Documents folder

506
00:37:42,760 --> 00:37:45,680
that malware might want to pick up
Internet network things like that

507
00:37:45,680 --> 00:37:50,940
there's plenty of things in there that
they really try to make Mauer make it

508
00:37:50,940 --> 00:37:56,109
behave maliciously give a reason to show
its true behaviors they know that it's a

509
00:37:56,109 --> 00:38:00,310
fact malware and there's also a general
lack of heuristic classification for

510
00:38:00,310 --> 00:38:03,460
emulation detection behavior academic
literature has looked at this problem

511
00:38:03,460 --> 00:38:07,950
lot and academics have come up with ways
of detecting malware based solely on the

512
00:38:07,950 --> 00:38:12,649
fact that is using intimidation behavior
but these ideas are not really doing

513
00:38:12,650 --> 00:38:16,359
that then that one instance where
Kaspersky would say here

514
00:38:16,359 --> 00:38:21,250
script that actually I'm gonna be a live
demo of Ely connection

515
00:38:21,250 --> 00:38:29,530
difference is that alright so here we go
I said if you like as a interactive API

516
00:38:29,530 --> 00:38:34,810
so I actually wrote a script to do this
all for me so I just said you are 20 and

517
00:38:34,810 --> 00:38:39,850
Kaspersky over 32 executions the name of
the product process that was running

518
00:38:39,850 --> 00:38:44,839
changed here but defender relating out
these strengths test app you'll notice

519
00:38:44,840 --> 00:38:49,030
that but defender is going bite by bite
and a lot slower than Kaspersky that's

520
00:38:49,030 --> 00:38:53,570
because kasperski's able to text 31
piece of malware per on so the emulator

521
00:38:53,570 --> 00:38:57,350
will see one piece and continue running
talk to 31 pieces of our have been

522
00:38:57,350 --> 00:39:02,200
dropped but defender will only take one
member at a time when our subconscious

523
00:39:02,200 --> 00:39:07,490
finds one piece of malware stops and
says we found malware and AVG me very

524
00:39:07,490 --> 00:39:11,220
long path to an interesting time of
abbreviated that just get directly to

525
00:39:11,220 --> 00:39:15,209
the unrest says malware sample and maybe
ever called self that exe again this is

526
00:39:15,210 --> 00:39:19,990
in real time running and compiling you
know right now tens by the hundreds of

527
00:39:19,990 --> 00:39:23,310
test cases running them through the end
of our simulator doing this translation

528
00:39:23,310 --> 00:39:27,980
back of what powers dropped to what we
saw inside you see some weird stuff

529
00:39:27,980 --> 00:39:32,220
expressions file system on C Drive
markie post a promise that's if you had

530
00:39:32,220 --> 00:39:36,879
a Spanish Windows operating system there
are those files were just going to

531
00:39:36,880 --> 00:39:41,470
hamper their hands on screen keyboard
never gonna dump the first hands

532
00:39:41,470 --> 00:39:46,180
processes running within these fake
process used to not real others

533
00:39:46,180 --> 00:39:53,560
hardcoded to get a response when you ask
for what processes running

534
00:39:53,560 --> 00:39:59,440
well this is running again briefly show
you what the demagogues looks like we

535
00:39:59,440 --> 00:40:04,340
have an API we can do something she ate
some these objects and then I have a

536
00:40:04,340 --> 00:40:10,860
bunch of test cases and maybe they got
league and so forth and so against a

537
00:40:10,860 --> 00:40:17,000
very simple just you know from a BAPI
important Starr and his All running in

538
00:40:17,000 --> 00:40:20,620
the background of a command-line tool
for running these test cases if you just

539
00:40:20,620 --> 00:40:25,190
want to run a single seat test case you
can do that but enforcement here just

540
00:40:25,190 --> 00:40:29,790
what this automated so here we see test
app that's our process and I'm gonna

541
00:40:29,790 --> 00:40:35,810
argue 0 within the fenders test up so
we're running as Pitt running before the

542
00:40:35,810 --> 00:40:42,910
essential Windows systems are strange in
order to save time just kids you have

543
00:40:42,910 --> 00:40:47,540
six processes running at Pitt number 12
defender that doesn't happen in real

544
00:40:47,540 --> 00:40:54,980
systems each process has its own here we
see the format message function and you

545
00:40:54,980 --> 00:41:04,390
can see when the message IDs at 2000 and
when we said two dead beef and beef for

546
00:41:04,390 --> 00:41:09,740
the message was sent 20 to return the
operation completed successfully

547
00:41:09,740 --> 00:41:14,770
we're gonna do about VBA code for the
sleep function and when you see this is

548
00:41:14,770 --> 00:41:19,450
the rocks bites returned when we get
back address and as I said I have

549
00:41:19,450 --> 00:41:23,120
integration with other other systems of
the library so integrated capstone here

550
00:41:23,120 --> 00:41:28,740
I disassembled that right there in line
for you and you can see that code that's

551
00:41:28,740 --> 00:41:36,790
their guests I guess steve is export
number fax 303 within the country to and

552
00:41:36,790 --> 00:41:42,050
you can capture and release the things I
got here a real system call to sleep

553
00:41:42,050 --> 00:41:47,040
11 millisecond actually encouraged about
15 seconds of 50 milliseconds overhead

554
00:41:47,040 --> 00:41:51,330
the actual time it takes to go to the
code for sleep go into the kernel be

555
00:41:51,330 --> 00:41:54,790
paged out be put to sleep so forth with
an avg

556
00:41:54,790 --> 00:41:58,500
you sleep for exactly one millisecond
that's not realistic

557
00:41:58,500 --> 00:42:01,940
you know there's no overhead sleep
problems have an integer that store's

558
00:42:01,940 --> 00:42:06,030
current time they've been committed by
one conspiracy at the same thing it's

559
00:42:06,030 --> 00:42:14,220
hyper real to reel you make $10 to sleep
sleep and incur exactly you know ten

560
00:42:14,220 --> 00:42:20,259
seconds ten minutes in milliseconds + in
the clock clock that's not realistic and

561
00:42:20,260 --> 00:42:24,200
real system you have lots of overhead
well actually making a call to sleep in

562
00:42:24,200 --> 00:42:27,910
your process but the sleep for a minute
and so forth and BitDefender you just

563
00:42:27,910 --> 00:42:33,370
totally random values those are the same
Iran so every time from this script I

564
00:42:33,370 --> 00:42:37,600
get the same weird numbers but doesn't
make any sense of how they arrived at

565
00:42:37,600 --> 00:42:43,290
those numbers for a 10 minute difference
in time we made our question google.com

566
00:42:43,290 --> 00:42:48,490
and Kaspersky and we got back this key
file and I'm gonna skip through soon

567
00:42:48,490 --> 00:42:53,830
interesting parts of it she had her own
boss mode PC download in brackets and

568
00:42:53,830 --> 00:42:59,170
then google.com also add especially when
you look at actual on the filesystem

569
00:42:59,170 --> 00:43:03,480
sexual deal I'll like you open up from
32 . deal on the filesystem you'll see

570
00:43:03,480 --> 00:43:08,420
again a valid be her and then you'll see
in brackets que el auto generated

571
00:43:08,420 --> 00:43:11,120
presumably Kaspersky Lab's
auto-generated maybe have a script that

572
00:43:11,120 --> 00:43:16,660
makes fake pee files running CPUID any
veggies sepia military get genuine Intel

573
00:43:16,660 --> 00:43:21,670
and then running it with another flag
set you get identifies an Athlon

574
00:43:21,670 --> 00:43:26,150
processor and AMD processors that's
inconsistent kind of weird this is just

575
00:43:26,150 --> 00:43:28,410
the tip of the iceberg and this is what
I could just show you a couple minutes

576
00:43:28,410 --> 00:43:32,270
your smoke on but again you can see how
fast this was compared to that one bit

577
00:43:32,270 --> 00:43:35,820
testing and if you've seen prior work in
this field it is very tedious very

578
00:43:35,820 --> 00:43:38,920
monogamous and did not get a lot of
information at once

579
00:43:38,920 --> 00:43:43,770
well this is a very simple tacked on the
system's it's very powerful and very

580
00:43:43,770 --> 00:43:50,430
easy to use and never believed in a
documentary for now and talk about our

581
00:43:50,430 --> 00:43:55,129
discovery so I did all this work to find
ways to find and learn about the navy's

582
00:43:55,130 --> 00:43:58,390
what about malware that exploiting these
vulnerabilities in the instance

583
00:43:58,390 --> 00:44:01,310
artifacts left in the systems

584
00:44:01,310 --> 00:44:05,980
so advanced malware authors already
using these artifacts if you google some

585
00:44:05,980 --> 00:44:12,020
of them like KLR generated more this
this string of the coast I'll txt you'll

586
00:44:12,020 --> 00:44:16,520
find results on Google and this is just
what I can find a Google with publicly

587
00:44:16,520 --> 00:44:20,950
available for analysis and boxes that
analyze these binaries run strings on

588
00:44:20,950 --> 00:44:25,990
them and present the results of analysis
of their Google indexed by Google if

589
00:44:25,990 --> 00:44:29,479
your navy company you're sitting on a
big library of malware probably find a

590
00:44:29,480 --> 00:44:30,340
whole lot more

591
00:44:30,340 --> 00:44:34,930
you close to look for things like
specific string sequence of bytes that

592
00:44:34,930 --> 00:44:38,350
are related to enter Malaysia behavior
this is just what's available on Google

593
00:44:38,350 --> 00:44:44,670
and I found hundreds of our samples like
this just by googling certain extrinsic

594
00:44:44,670 --> 00:44:49,800
I found when I googled he predicted he
found within DVDs registry in that

595
00:44:49,800 --> 00:44:56,720
direction I found this AVG evasive
malware 5329 XLS tonight I school

596
00:44:56,720 --> 00:45:01,080
websites like a middle school in
Thailand and we got hacked while sitting

597
00:45:01,080 --> 00:45:04,920
in there and put it to virustotal only
32 uploads

598
00:45:04,920 --> 00:45:08,080
before me within the past like two or
three years and I was the third upload

599
00:45:08,080 --> 00:45:13,270
ever and I found hundreds of artifacts
related to AVG mostly related to

600
00:45:13,270 --> 00:45:17,490
introduce function emulation so they did
a lot of EDX thing twice on that and

601
00:45:17,490 --> 00:45:21,660
there's hundreds more instances of the
lock movie X instruction and no idea

602
00:45:21,660 --> 00:45:22,810
what this was

603
00:45:22,810 --> 00:45:26,720
I did do some research on the site and
it looks like they actually were hacked

604
00:45:26,720 --> 00:45:31,509
there was some defacement from smacking
group while ago so maybe that's what

605
00:45:31,510 --> 00:45:35,150
that was I don't know it was really
really interesting and that's the only

606
00:45:35,150 --> 00:45:39,360
result in Google when I googled that
particular string is really fun setting

607
00:45:39,360 --> 00:45:44,470
that in my thesis as a source $22 XLS I
was told that I was not feeling the

608
00:45:44,470 --> 00:45:49,250
citation format for an excel sheet but
I'm setting a piece of malware online

609
00:45:49,250 --> 00:45:54,840
and perhaps most interesting leave was
this evil bunny malware the so called

610
00:45:54,840 --> 00:46:00,060
Animal Farm apt and I found that was
evading but defender in 2011 I was

611
00:46:00,060 --> 00:46:04,380
looking up test after the exe which is
the process name within a defender and

612
00:46:04,380 --> 00:46:05,660
you'll find within

613
00:46:05,660 --> 00:46:09,640
like one of the first countries run by
evil but before it goes into its main

614
00:46:09,640 --> 00:46:13,700
payload is that it checks if they missed
a staff and then choose not to run or

615
00:46:13,700 --> 00:46:19,640
run based on what is known as it also
not running its name is this a FYI J EMV

616
00:46:19,640 --> 00:46:26,379
my theories perhaps that's expressed
Eastern emulation maybe whoever made

617
00:46:26,380 --> 00:46:31,109
this kind of like took a snapshot of
Kaspersky and found that string so one

618
00:46:31,109 --> 00:46:35,308
very naive approach to finding of facts
that I did not touch on his actual you

619
00:46:35,309 --> 00:46:40,079
just run the eighty process and you just
take a cordon and you get to the

620
00:46:40,079 --> 00:46:43,460
courtroom and you might try and strings
that are unpacked at runtime they're not

621
00:46:43,460 --> 00:46:45,559
gonna leave this model strings just
sitting there

622
00:46:45,559 --> 00:46:49,660
unencrypted on desk but a runtime them
he might be unpacked emitter sitting

623
00:46:49,660 --> 00:46:52,890
there in memory just how much the number
and you can get through in finding new

624
00:46:52,890 --> 00:46:56,410
strings so perhaps they did that and
found this string that they thought was

625
00:46:56,410 --> 00:46:59,788
using dispersed every time I really
don't know what I do know for sure that

626
00:46:59,789 --> 00:47:04,339
test is but defender related to this was
a very good defender in 2011 it was

627
00:47:04,339 --> 00:47:10,130
reported on last year and you know the
defender has not fix this as far as I

628
00:47:10,130 --> 00:47:16,049
know you know last I looked when I was
still sitting there in a bit funnier if

629
00:47:16,049 --> 00:47:20,980
they don't really care and it was highly
advanced malware goes into how the whole

630
00:47:20,980 --> 00:47:27,849
thing really crazy to see this and now
closing remarks and future work

631
00:47:27,849 --> 00:47:32,760
integrate more V's test more of them
again I went for a big depth of testing

632
00:47:32,760 --> 00:47:35,869
lots of different test cases and that's
what your breath of a lot of different

633
00:47:35,869 --> 00:47:41,760
products can have more pre-built test
cases one idea for doing that is to use

634
00:47:41,760 --> 00:47:42,910
the wine

635
00:47:42,910 --> 00:47:47,770
which one is a compatibility layer for
the Windows API for Lexus you can run

636
00:47:47,770 --> 00:47:53,270
Windows binaries on Linux wine has your
tests for the entire Windows API sweet

637
00:47:53,270 --> 00:47:59,559
pickles unit tests and put them over 280
leak then we built the test these guys

638
00:47:59,559 --> 00:48:03,869
really easily currently what I tend to
do with the MSDN find example usage

639
00:48:03,869 --> 00:48:08,230
forgiven API I copy pasted out and when
they say printf I say you know just call

640
00:48:08,230 --> 00:48:13,119
my extraction functions that but you
know it's very difficult though I set up

641
00:48:13,119 --> 00:48:16,549
the right structure the right kind of
things right states when your functions

642
00:48:16,549 --> 00:48:19,640
that rely on other functions be called
instructions nationalized gets a lot

643
00:48:19,640 --> 00:48:23,069
more difficult sophie had winds unit
testing we could make that a lot easier

644
00:48:23,069 --> 00:48:28,288
and then most interesting only leverage
ivy league for vulnerability research so

645
00:48:28,289 --> 00:48:33,039
this work was actually really motivated
by finding Amelia breakouts the original

646
00:48:33,039 --> 00:48:36,849
idea of this was proposed by Jeremy
black Florida researcher at RPI has a

647
00:48:36,849 --> 00:48:42,720
PhD student and he wanted to break out
of emulators so we begin this research

648
00:48:42,720 --> 00:48:48,399
as an undergrad research project about
two years ago I then took it doesn't

649
00:48:48,400 --> 00:48:51,069
graduate credit for it and then I ran
with it and made it my master's thesis

650
00:48:51,069 --> 00:48:54,538
of the debate literature seven academic
work in the field as well but the

651
00:48:54,539 --> 00:48:57,660
original motivation for this was in fact
a breakout

652
00:48:57,660 --> 00:49:02,618
was not the same information out and
break out as I said often religious

653
00:49:02,619 --> 00:49:06,970
coalition because the emulator running a
system it's not isolated now I was

654
00:49:06,970 --> 00:49:11,200
working on this topic about two years
ago with Jeremy but only recently has

655
00:49:11,200 --> 00:49:17,259
received attention in the community most
notably with Mindy project zero has been

656
00:49:17,260 --> 00:49:20,470
going after he isn't finding tons of
really trivial vulnerabilities in them

657
00:49:20,470 --> 00:49:25,319
many of them related things like web web
administration clients or personal file

658
00:49:25,319 --> 00:49:29,160
formats but one of them and actually I
think actually the first availability he

659
00:49:29,160 --> 00:49:32,680
dropped it was this June the analysis
and exploitation

660
00:49:32,680 --> 00:49:36,819
vulnerability what he did was he took
the East Haddam you later and later that

661
00:49:36,819 --> 00:49:43,089
song and founder vulnerability based in
their relation of sub ESP vs a DSP is

662
00:49:43,089 --> 00:49:49,319
basically able to take the ESP ESP get
control of it leaked information out

663
00:49:49,319 --> 00:49:51,440
about the state of the real process
those

664
00:49:51,440 --> 00:49:56,460
and then break out of the emulator by
building eruption and it was really

665
00:49:56,460 --> 00:49:59,970
impressive really cool actually only
work i've seen

666
00:49:59,970 --> 00:50:03,578
and doing this palaces incredible
vulnerability researcher credible

667
00:50:03,579 --> 00:50:07,630
exploit developer far better than me but
I think it's really cool to use some of

668
00:50:07,630 --> 00:50:11,150
that gave you liek enable that sort of
work we also recently had the

669
00:50:11,150 --> 00:50:14,230
publication of the antivirus hacker's
handbook by Jackson court and leaseback

670
00:50:14,230 --> 00:50:18,790
Eleni another great book talking about
vulnerabilities in EV products not so

671
00:50:18,790 --> 00:50:21,900
much with their emulators but just
touched on that topic is really only

672
00:50:21,900 --> 00:50:29,260
recently seeing some public interest in
this field so evasion traditional IRA of

673
00:50:29,260 --> 00:50:33,520
a few matters is time consuming a very
fast runs in seconds to hours you saw

674
00:50:33,520 --> 00:50:37,359
there really get out much of artifacts
million in just five minutes

675
00:50:37,359 --> 00:50:42,690
expensive to al-qaida versus free tools
like seen Python expert knowledge of all

676
00:50:42,690 --> 00:50:46,520
these different fields versus basic
knowledge of seeing the Windows API if

677
00:50:46,520 --> 00:50:51,990
you can write Windows API code that just
prints and data you can use any leak and

678
00:50:51,990 --> 00:50:55,879
then a limited lifespan updated every
product you're on a fax no longer work

679
00:50:55,880 --> 00:51:00,010
vs Navy League which is very easy to
refresh the new copy they view product

680
00:51:00,010 --> 00:51:02,819
you run your suite of test cases against
that you can strip that are left with

681
00:51:02,819 --> 00:51:06,259
the API and not your business again with
all these new artifacts of emulation

682
00:51:06,260 --> 00:51:12,160
biography and related work during Black
morning and thank you very much for his

683
00:51:12,160 --> 00:51:16,868
help this work for them that black hat
during the one but Oracle work some

684
00:51:16,869 --> 00:51:22,829
academic work on an anti-immigration and
anti anti emulation report on little

685
00:51:22,829 --> 00:51:28,280
money for Marion had discovered it and
then tavis houses be so thank you very

686
00:51:28,280 --> 00:51:32,800
much the German blackthorn my advisor
dr. building owner patch burnout in

687
00:51:32,800 --> 00:51:36,640
interviews I know these guys help me
build a prototype of Haley if you like

688
00:51:36,640 --> 00:51:39,400
as an undergraduate research project
known as i said i cant read on for my

689
00:51:39,400 --> 00:51:44,280
masters research and dr. Greg Hughes and
also a big thank you to our price check

690
00:51:44,280 --> 00:51:48,210
the strip club in my school is part of
what these guys are sitting up here in

691
00:51:48,210 --> 00:51:55,180
the front row bigshot RPI sector Aaron
just released a class on our analysis at

692
00:51:55,180 --> 00:51:58,440
github / RPI sex / malware

693
00:51:58,440 --> 00:52:02,990
last semester our club taught a class on
my expectation going from basic

694
00:52:02,990 --> 00:52:07,828
exploitation up to temper exploitation
and just two days ago I these guys drop

695
00:52:07,829 --> 00:52:10,500
the class in our analysis it's really
great so check it out you might have

696
00:52:10,500 --> 00:52:26,250
seen and read it in that sector on
Twitter so many questions

697
00:52:26,250 --> 00:52:32,770
are based on high-end emulator systems
like the Mr look emo which have

698
00:52:32,770 --> 00:52:37,930
well-documented attacks against them it
could be done but a big thank you from

699
00:52:37,930 --> 00:52:41,700
doing that is the fact that those
devices are very expensive travis has

700
00:52:41,700 --> 00:52:45,529
actually able to get his hands on a fire
appliance project zero disciplinary

701
00:52:45,530 --> 00:52:49,650
research against them in principle
artifacts and exploits rather but again

702
00:52:49,650 --> 00:52:53,260
it's very expensive a couple systems
it's very cheap to buy a copy of one of

703
00:52:53,260 --> 00:53:00,090
these ideas and just installed on your
computer right now thank you very much

