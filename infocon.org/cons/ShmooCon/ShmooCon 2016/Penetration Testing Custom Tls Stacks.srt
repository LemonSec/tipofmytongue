1
00:00:00,000 --> 00:00:10,330
hello everyone so yeah I'll be talking
about about TLS mostly today and i'd

2
00:00:10,330 --> 00:00:14,530
about you know how you react when you're
faced with a custom tailor stocks or

3
00:00:14,530 --> 00:00:19,279
something which is not standard OpenSSL
based or things like that and how we got

4
00:00:19,279 --> 00:00:23,900
it all with with a guy I've never met
basically from over Europe

5
00:00:23,900 --> 00:00:29,490
which is an offensive jealous dock where
she placed most of our verse gappy so

6
00:00:29,490 --> 00:00:33,350
you know the usual who am I so basically
most security engineer work at Citrix

7
00:00:33,350 --> 00:00:37,400
and I'm mostly interested in you know
low-level topics you know crypto fussing

8
00:00:37,400 --> 00:00:43,000
and and exploit their and the usual
disclaimer so generally the agenda I'm

9
00:00:43,000 --> 00:00:45,739
going to try and keep you pretty
practical and not go into much crypto

10
00:00:45,739 --> 00:00:50,480
deaths so I'll try most of the stuff
presented here will be you know

11
00:00:50,480 --> 00:00:55,290
reproducible and practical and so i i
just like to have a quick chat about the

12
00:00:55,290 --> 00:00:59,260
TLS attack timeline first you know what
what has been shown was come up in the

13
00:00:59,260 --> 00:01:04,479
last in the last few years and and one
of the problems with it and most you

14
00:01:04,479 --> 00:01:08,130
know the difficulty in reducing those
attacks basically you know when you got

15
00:01:08,130 --> 00:01:10,880
something new which comes out in the
news or not in the news with something

16
00:01:10,880 --> 00:01:15,390
major on TLS you know the difficulty of
replaying it I have a really quick

17
00:01:15,390 --> 00:01:18,590
refresher on TLS I'll try to keep it
short I don't know how familiar you guys

18
00:01:18,590 --> 00:01:22,740
are with the protocol I'll keep it
pretty sure and then I'll talk about

19
00:01:22,740 --> 00:01:27,419
Gabby SSL TLS which is the offensive
stock which is about scrappy and you

20
00:01:27,420 --> 00:01:32,600
know why we built it was the goals of it
and what its purpose and obviously are

21
00:01:32,600 --> 00:01:37,619
due tomorrow and then they're not gonna
be a more in depth in into what to look

22
00:01:37,620 --> 00:01:41,800
for basically in custom tailor stock so
you know how the fingerprint them you

23
00:01:41,800 --> 00:01:49,310
know how to facade channels and a little
talk about fragmentation and then I'll

24
00:01:49,310 --> 00:01:51,680
talk about how you know

25
00:01:51,680 --> 00:01:56,890
helps you by making encryption
transparency for abstracting the crypto

26
00:01:56,890 --> 00:02:00,260
part from from the actual product also
that you can attack what's inside that

27
00:02:00,260 --> 00:02:04,590
clear text package as opposed to handing
crypto and an H max insiders and purity

28
00:02:04,590 --> 00:02:09,709
and then I'll just do a quick demo of
detecting poodle and and fragmentation

29
00:02:09,709 --> 00:02:14,140
obfuscation through TLS and if I got
time I'll talk a bit about the fighting

30
00:02:14,140 --> 00:02:19,940
capabilities so you know quick
introduction about LSU notes and why why

31
00:02:19,940 --> 00:02:22,790
we decided to build this is that you
know it's such a critical critical to

32
00:02:22,790 --> 00:02:26,819
the internet as everyone knows you know
it runs everything and the thing with it

33
00:02:26,819 --> 00:02:28,750
you know is that he's got very few
alternatives

34
00:02:28,750 --> 00:02:32,600
a session low protocols you know which
provides security for other stuff is

35
00:02:32,600 --> 00:02:35,790
more or less nothing out there so we'd
better make sure that it's OK and that

36
00:02:35,790 --> 00:02:40,609
it works well and the thing is it's so
complex right it's it's super complex

37
00:02:40,610 --> 00:02:43,380
until I'd written this this stock i
don't realize it

38
00:02:43,380 --> 00:02:48,940
which depth it was complex and how many
cases it had you know it's got three key

39
00:02:48,940 --> 00:02:53,840
exchanges got a you know over a hundred
ciphers probably you know multiple PRS a

40
00:02:53,840 --> 00:02:58,200
ton of hash functions and the the state
is insane inside the the state machine

41
00:02:58,200 --> 00:03:02,630
so the good thing is that it's under
scrutiny rise like there's a lot of

42
00:03:02,630 --> 00:03:06,700
people working on it or researching on
it and coming up with new alternatives

43
00:03:06,700 --> 00:03:11,488
to do things and your tax on it but you
know when you're on the defensive side

44
00:03:11,489 --> 00:03:17,110
you're seeing basically the growth of
the number of attacks and a lack of

45
00:03:17,110 --> 00:03:20,610
tooling I see you seeing these are your
tax come up every few months and I'm

46
00:03:20,610 --> 00:03:24,180
really talking about protocol level
attacks on implementation level and you

47
00:03:24,180 --> 00:03:27,130
know you've got you've got a lack of
tooling is to go all this stuff coming

48
00:03:27,130 --> 00:03:31,530
out with new no proof of concept nothing
and you're kind of trying to figure out

49
00:03:31,530 --> 00:03:35,209
if a product is affected you know if
it's something you your charger this is

50
00:03:35,209 --> 00:03:41,610
actors and and yes the attack tools
general Hawk ride your get worse case

51
00:03:41,610 --> 00:03:45,900
you get nothing you get a paper with
some ass and stuff go through best case

52
00:03:45,900 --> 00:03:49,630
you know you get some life in with a bit
of OpenSSL customs officials to compile

53
00:03:49,630 --> 00:03:55,769
Japan alright so just a quick view on
the Taylors protocol level attacks just

54
00:03:55,769 --> 00:03:59,989
the timeline most elegant detail and
intelligent soon as I was saying the

55
00:03:59,989 --> 00:04:02,910
programs under scrutiny which is great
and you can see there's been under

56
00:04:02,910 --> 00:04:07,980
scrutiny even more since like rocky 2013
2012 and with a with a massive

57
00:04:07,980 --> 00:04:12,630
improvement in the number of local level
attacks and you know as we all know

58
00:04:12,630 --> 00:04:16,450
openness also has good at Arnold
implementation bugs which are coming out

59
00:04:16,450 --> 00:04:19,228
which is starting to calm down but you
know you've also got that to deal with

60
00:04:19,228 --> 00:04:23,380
so you know if you look this is russia
all the attacks I could think about it

61
00:04:23,380 --> 00:04:28,380
could remember which I tried to put
together a three some help with food but

62
00:04:28,380 --> 00:04:30,320
basically

63
00:04:30,320 --> 00:04:36,630
you know like until 2013 you don't have
a lot to care about right and it's

64
00:04:36,630 --> 00:04:39,810
probably you probably wasn't a good
thing you know is it shows now and since

65
00:04:39,810 --> 00:04:45,530
2013 and accelerating now you get more
and more of this stuff and not only do

66
00:04:45,530 --> 00:04:47,619
you get more and more of this stuff
which you get more and more complex

67
00:04:47,620 --> 00:04:52,240
stuff you know like logjam Moscow opry
computation you know sloth what came out

68
00:04:52,240 --> 00:04:56,570
recently is working to avoid collisions
tax and stuff on the used inside the

69
00:04:56,570 --> 00:05:04,570
protocol sold as is complex off so yes I
was saying you know their tax tax

70
00:05:04,570 --> 00:05:08,260
increase in frequency meaning now you've
got very little turnaround time to deal

71
00:05:08,260 --> 00:05:11,990
with them and complexity and you
generally deal with two classes of them

72
00:05:11,990 --> 00:05:15,700
which are either the protocol level
which is the worst case because then the

73
00:05:15,700 --> 00:05:20,280
program's broken where to find fixes and
workarounds and all this stuff or what

74
00:05:20,280 --> 00:05:28,659
the crypto level so you know just a
quick note about reproducing them so

75
00:05:28,660 --> 00:05:31,540
again you have to

76
00:05:31,540 --> 00:05:34,670
you gonna have spent some time trying to
understand the attack probably see graph

77
00:05:34,670 --> 00:05:37,740
paper you know you've got a couple of
hours you going to read through it you

78
00:05:37,740 --> 00:05:41,880
know and and figure out what you can do
it and you need to figure out most

79
00:05:41,880 --> 00:05:45,159
importantly the practical impact of it
as opposed to the theoretical one

80
00:05:45,160 --> 00:05:49,040
there's a big difference right on your
products and more importantly you need

81
00:05:49,040 --> 00:05:55,020
to focus on on reproducibility because
you need to to reproduce it for

82
00:05:55,020 --> 00:05:58,490
hopefully for people in Dev and QA
because you want to be able to provide

83
00:05:58,490 --> 00:06:02,760
them something they can work on to
actually fix a problem right and and

84
00:06:02,760 --> 00:06:06,270
provide something actionable which the
cute guys contest with an actually do

85
00:06:06,270 --> 00:06:10,190
some regression and you know right now I
don't think there's any tool in this

86
00:06:10,190 --> 00:06:13,520
place so there wasn't until a couple of
months back which which would allow you

87
00:06:13,520 --> 00:06:22,210
to do this another thing is is mostly
with you know with response right if any

88
00:06:22,210 --> 00:06:27,229
of you deal with response you know you
get you going again talk and then in a

89
00:06:27,230 --> 00:06:30,610
couple of hours you're probably going to
get a customer response case right

90
00:06:30,610 --> 00:06:35,050
asking you sure affected and the thing
is is that you know customers they don't

91
00:06:35,050 --> 00:06:38,100
always understand the practical impact
on it and you know it's normal because

92
00:06:38,100 --> 00:06:42,320
you as a security engineer who does this
you know all day already taking a few

93
00:06:42,320 --> 00:06:46,630
hours a few days to figure out you know
that you know take out the far right and

94
00:06:46,630 --> 00:06:52,159
and so the thing is you've got this you
know customers on sends you're gonna

95
00:06:52,160 --> 00:06:55,170
have to provide your response team is
gonna have to provide an answer within

96
00:06:55,170 --> 00:07:01,670
the next couple of hours right and or
next couple of days are best and Russia

97
00:07:01,670 --> 00:07:06,320
you know you had two solutions on till
now it's like you do crypto code review

98
00:07:06,320 --> 00:07:11,719
so the thing is like if you're working
on TLS stock which is custom and you

99
00:07:11,720 --> 00:07:15,360
know if you got sources then you can
perform code review the thing is which

100
00:07:15,360 --> 00:07:18,840
is super hard with a custom stock is
that you've got a lack of comparison

101
00:07:18,840 --> 00:07:22,169
point right it's not like you're looking
at open a cell and you go to compare it

102
00:07:22,170 --> 00:07:25,560
with a patch or you're looking at I
don't know if it's still again something

103
00:07:25,560 --> 00:07:29,660
else so that's pretty tough and again
you know when you looking into crypto

104
00:07:29,660 --> 00:07:33,130
code is quite hard to get the full
picture I when you're looking at a tiny

105
00:07:33,130 --> 00:07:36,610
routine you know wondering okay if this
is not prime what's going to happen

106
00:07:36,610 --> 00:07:37,990
inside you know

107
00:07:37,990 --> 00:07:42,750
10 routines of crypto staff it can be
quite difficult to get you know a good

108
00:07:42,750 --> 00:07:47,500
idea of what's happening again you know
you can write a park but you had this

109
00:07:47,500 --> 00:07:52,980
lack of tooling so many had to Licensee
code extent of SSL tweak it right except

110
00:07:52,980 --> 00:07:56,940
you know about this number of arguments
and all this kind of stuff because the

111
00:07:56,940 --> 00:08:01,330
problem is you got a big difference
between you know security you focus to

112
00:08:01,330 --> 00:08:05,500
land you know general death toll and you
know that's a good thing right could you

113
00:08:05,500 --> 00:08:08,680
know death toll hopefully they will made
their you know give you a whole bunch of

114
00:08:08,680 --> 00:08:11,830
safeguards which prevents you from
screwing up the length screen mockup you

115
00:08:11,830 --> 00:08:16,609
know your site for your crypto all these
things which which you don't need you

116
00:08:16,610 --> 00:08:20,470
all those safeguards prevent you from
achieving you know the actual attacks on

117
00:08:20,470 --> 00:08:29,990
this so you know the idea is if you
build a park its reproducible and you

118
00:08:29,990 --> 00:08:33,620
can using QA and you can use in
regression right as opposed to decode

119
00:08:33,620 --> 00:08:41,010
review well you know you have an answer
possibly and may be wrong so I'll do a

120
00:08:41,010 --> 00:08:46,770
super quick refresher on cialis just so
that you know we're all clear on your

121
00:08:46,770 --> 00:08:50,970
the fundamental concepts because the
tour we wrote you still have to be

122
00:08:50,970 --> 00:08:53,350
familiar with TLS how it works

123
00:08:53,350 --> 00:08:56,850
different layers of it the difference of
protocols and all this stuff because it

124
00:08:56,850 --> 00:09:04,750
is a complete complex product so so yes
I said LSU no session by session layer

125
00:09:04,750 --> 00:09:09,040
so it does nothing basically except you
know provide integrity authentication

126
00:09:09,040 --> 00:09:16,130
and encryption well that's not nothing
but it only you know shits bites and its

127
00:09:16,130 --> 00:09:20,610
main main reason is to perform a
handshake and then provide crypto know

128
00:09:20,610 --> 00:09:26,930
based on that handshake so you gonna
negotiate a sale ciphers of max

129
00:09:26,930 --> 00:09:31,479
you know secrets and that's going to
allow them to build a taco tunnel

130
00:09:31,480 --> 00:09:36,399
basically based on service offers and
the thing is is that it's fully

131
00:09:36,399 --> 00:09:39,700
transparent to the protocol again writer
pre-approval doesn't take anything you

132
00:09:39,700 --> 00:09:43,910
want through it and i think is getting
quite a high round trip times so you

133
00:09:43,910 --> 00:09:46,949
know you need at least four Packers or
two round trips to create handshake

134
00:09:46,950 --> 00:09:53,089
she's quite a bit compared to other
stuff also offers session resumption and

135
00:09:53,089 --> 00:09:55,899
that's quite an interesting education
means that you don't have to go since

136
00:09:55,899 --> 00:09:58,260
the the handshake is so expensive

137
00:09:58,260 --> 00:10:03,029
you can resume tillis session but that
resumption is not indicated right just

138
00:10:03,029 --> 00:10:08,050
assumes that both sides know the maasi
group which is the master piece of

139
00:10:08,050 --> 00:10:13,199
material used to drive the keys and it
can authenticate both client server

140
00:10:13,200 --> 00:10:18,899
right and provides integrity and
confidentiality is also what's

141
00:10:18,899 --> 00:10:23,200
interesting is that it relies on TCP for
packet delivery and ordering right so

142
00:10:23,200 --> 00:10:26,350
that's footy less it's fine you know
these people take care of ordering your

143
00:10:26,350 --> 00:10:29,279
pocket calling them the right order and
giving them to your site and had to get

144
00:10:29,279 --> 00:10:34,260
them out the thing is if there's a
virtual school DTS which runs on UDP

145
00:10:34,260 --> 00:10:39,459
right and btls car allowance people
ordering so he's got the whole notion

146
00:10:39,459 --> 00:10:45,300
home sequence number and it also have
has secret offsets and things like that

147
00:10:45,300 --> 00:10:48,920
so you coming back to case work on new
york-listed IP fragmentation in the old

148
00:10:48,920 --> 00:10:53,849
days we can have overlapping offsets
with you all this kind of stuff alright

149
00:10:53,850 --> 00:11:00,950
so the message format so so TLS roughly
it's actually a collection of some

150
00:11:00,950 --> 00:11:06,790
protocols so you gonna have the
handshake protocol which is in charge of

151
00:11:06,790 --> 00:11:12,400
negotiating apparently does in short of
deriving the key material of having

152
00:11:12,400 --> 00:11:16,500
extensions and all those kinds of things
you've got the change site aspect which

153
00:11:16,500 --> 00:11:21,220
is already a protocol is just about as a
single by basically which is encrypted

154
00:11:21,220 --> 00:11:25,000
under the current cycle scheme and which
signals a transition right so when you

155
00:11:25,000 --> 00:11:29,079
get a chance I suspect this stack knows
that these two change crypto operation I

156
00:11:29,079 --> 00:11:33,670
it's the last packet included on the
current site for standard rate and then

157
00:11:33,670 --> 00:11:35,469
you switch to the new site

158
00:11:35,470 --> 00:11:38,490
so typically during the handshake or get
a chance I suspect which is in clear

159
00:11:38,490 --> 00:11:43,330
text and the next packet following will
be encrypted under the negotiator meters

160
00:11:43,330 --> 00:11:50,550
right and then you've got alert which is
another sub vertical so all it does is

161
00:11:50,550 --> 00:11:53,479
era handing so you're probably you know
you probably skip that one thing that's

162
00:11:53,480 --> 00:11:56,430
fine you know just as they were handing
the thing is it doesn't hunting for

163
00:11:56,430 --> 00:11:59,849
Christmas stuff so a colleague too much
information and there's been problems

164
00:11:59,850 --> 00:12:06,770
within the past and you have to be very
cautious of what Alice leaks and finally

165
00:12:06,770 --> 00:12:11,290
application data so that's just the
layer which will shift your data across

166
00:12:11,290 --> 00:12:15,530
which is the most complex from the Crypt
operation but it has no state at least

167
00:12:15,530 --> 00:12:21,270
or only cyber state so it's quite kind
of summer and so thing to remember is

168
00:12:21,270 --> 00:12:25,600
age of the sub protocols encapsulated in
what's called a record header header

169
00:12:25,600 --> 00:12:29,010
just a really simple little blog it's
five bites it will tell you which deals

170
00:12:29,010 --> 00:12:33,110
motion using the length of what's coming
after it and the payload type so

171
00:12:33,110 --> 00:12:40,620
basically which some protocol follows so
you know it looks really simple is in

172
00:12:40,620 --> 00:12:44,700
charge of transporting the sub protocols
and it's always clear text right so

173
00:12:44,700 --> 00:12:47,980
you've always access to their record
label because you always need to know

174
00:12:47,980 --> 00:12:52,980
basically what some call comes in after
and it's always clear text so it means

175
00:12:52,980 --> 00:12:57,230
that you know in TLS another quirk is
that the payload length is never

176
00:12:57,230 --> 00:13:01,370
completely put is not protected
basically you know except by when you

177
00:13:01,370 --> 00:13:05,080
can decipher will be aligned on a block
boundary and the padding but basically

178
00:13:05,080 --> 00:13:10,310
your length is out there so TLS does
allow you to play with padding to

179
00:13:10,310 --> 00:13:17,829
compensate that to some extent but it's
not widely deployed and record their

180
00:13:17,830 --> 00:13:22,200
stock basically inside a packer so
you've not gotten i dont no direct

181
00:13:22,200 --> 00:13:26,450
mapping between a TLS record which is
called portion and a TCP packet it can

182
00:13:26,450 --> 00:13:31,980
be in multiple packard's it can be in
one package and all this and you can

183
00:13:31,980 --> 00:13:35,060
control that at the Taylor slayer
through fragmentation which will talk

184
00:13:35,060 --> 00:13:36,270
about later

185
00:13:36,270 --> 00:13:43,260
so tiny bit more on the handshake so is
in charge of negotiating compression

186
00:13:43,260 --> 00:13:47,830
rice at Els can perform compression
before does encryption right which is

187
00:13:47,830 --> 00:13:51,560
definitely not a good idea and that's
why no one does it anymore right

188
00:13:51,560 --> 00:13:55,239
expose a whole bunch of problems through
compression layer which can lead stuff

189
00:13:55,240 --> 00:13:57,490
about the text so that is gone

190
00:13:57,490 --> 00:14:03,990
negotiates crypto power meters so which
he exchanged you going to use it gonna

191
00:14:03,990 --> 00:14:11,410
be RSA secured in Helmand or development
which side are you going to use which

192
00:14:11,410 --> 00:14:16,839
signature algorithm are you going to use
the time and things like that and which

193
00:14:16,840 --> 00:14:20,390
are you going to use and all those kind
of things and most importantly it's in

194
00:14:20,390 --> 00:14:26,250
charge of initiating crypto materials so
pls comes with a custom pseudorandom

195
00:14:26,250 --> 00:14:29,360
function right which is seeded by all
this stuff so we'll take a bunch of

196
00:14:29,360 --> 00:14:34,310
randomness a bunch of static portions
master secret which is generated

197
00:14:34,310 --> 00:14:36,900
basically through the key exchange
makers in through our assay with a few

198
00:14:36,900 --> 00:14:40,790
Helmand and that is used to generate
marcia group which in turn is used to

199
00:14:40,790 --> 00:14:44,949
generate all the keys which are used to
encrypt operation so the thing is is

200
00:14:44,950 --> 00:14:48,960
that the keys I symmetrical in TLS right
you've got a key from client to server

201
00:14:48,960 --> 00:14:52,430
and one from service clients over the
age of accessing for this kind of stuff

202
00:14:52,430 --> 00:14:55,520
so the handshake as good a good role in
there

203
00:14:55,520 --> 00:15:00,220
doing that and other really important
role is gone it's in charge of ensuring

204
00:15:00,220 --> 00:15:05,180
that the handshake is free of of
tampering in transit so you'd think ok

205
00:15:05,180 --> 00:15:09,250
pls let me drop no change the cipher by
another version and just passed the

206
00:15:09,250 --> 00:15:11,860
package when I'm and the Middle
obviously you can't do that and thank

207
00:15:11,860 --> 00:15:15,040
you for you know thanks a lot of ways
the downgrade will be trivial so you got

208
00:15:15,040 --> 00:15:18,969
this message which is fundamental which
is called the finished message which is

209
00:15:18,970 --> 00:15:22,680
encrypted and which is basically
collection of all the hashes of the

210
00:15:22,680 --> 00:15:27,800
previous messages and so is transferred
and then it's checked on both sides so

211
00:15:27,800 --> 00:15:30,520
if both sides in OC hey we've got
different how should all these previous

212
00:15:30,520 --> 00:15:35,189
messages you know got tampering and
that's not gonna work right and other

213
00:15:35,190 --> 00:15:39,870
important thing is that it's it's really
extensible rise so you can extend pls

214
00:15:39,870 --> 00:15:44,300
through a bunch of extensions and you
can you can basically you know it's got

215
00:15:44,300 --> 00:15:48,310
a ton of extensions each time you do
handshake you gonna say which elliptic

216
00:15:48,310 --> 00:15:53,619
curve format for your points you support
which Kurdi support which which URL

217
00:15:53,620 --> 00:15:58,020
which hosts name are you trying to reach
in the case of us tonight which a player

218
00:15:58,020 --> 00:16:01,540
particularly gonna use for hd2 for
speedy and all that stuff all that is

219
00:16:01,540 --> 00:16:08,740
done extensions 3d less and Starbucks of
handshake works basically right so the

220
00:16:08,740 --> 00:16:13,710
handshake has a Mac size 22 Bell 69 and
the thing is the max fragment size and

221
00:16:13,710 --> 00:16:19,920
TLS is to the poll 14 so to 65,000 bites
right so in practice the handshake can

222
00:16:19,920 --> 00:16:24,150
be fragmented across multiple records
meaning that your stock has to be able

223
00:16:24,150 --> 00:16:28,880
to do reassembly to fully understand the
message and the thing is the very few

224
00:16:28,880 --> 00:16:33,280
stocks I'll do that because you don't
really need to cause you know 65,000 by

225
00:16:33,280 --> 00:16:38,930
says a lot for single message and I'll
talk a bit of the side effects that this

226
00:16:38,930 --> 00:16:44,140
can have some messages basically get
have arbitrary training data so as I

227
00:16:44,140 --> 00:16:49,360
said you know you can have extensions in
your handshake but the thing is so that

228
00:16:49,360 --> 00:16:53,610
to ensure compatibility the extensions
don't have to be understood on both

229
00:16:53,610 --> 00:16:57,400
sides of this means that you can just
throw garbage data inside a at the end

230
00:16:57,400 --> 00:16:58,439
of a handshake and it

231
00:16:58,440 --> 00:17:02,790
work fine and this is fundamental
because this was was what was using

232
00:17:02,790 --> 00:17:06,938
sloth to be able to compute the
pre-match collisions and md5 to allow

233
00:17:06,939 --> 00:17:11,720
breaking performing the attack but
further down you don't necessarily need

234
00:17:11,720 --> 00:17:16,780
a certificate writers all these weird
stuff which is never used but you can do

235
00:17:16,780 --> 00:17:21,180
and all of us are si Thu Dec age where
basically the service I will generate

236
00:17:21,180 --> 00:17:26,130
key key material on the fly right will
generate certificate on the fly for you

237
00:17:26,130 --> 00:17:30,490
and also you can have this is a really
weird work and it's a real pain to

238
00:17:30,490 --> 00:17:34,470
implement and two parties but you can
have stacked handshakes basically which

239
00:17:34,470 --> 00:17:41,510
is my previous diagram you had a record
and then a handshake and a record and a

240
00:17:41,510 --> 00:17:45,620
handshake and a record and a handshake
that this really weird quirk where you

241
00:17:45,620 --> 00:17:50,580
can concatenate a bunch of handshakes
together inside a record and job does

242
00:17:50,580 --> 00:18:02,659
not so this is just a quick rehash of
the application data stuff so the

243
00:18:02,660 --> 00:18:07,280
application data which is just the
Vallejo in charge of transporting things

244
00:18:07,280 --> 00:18:11,860
is in charge of encrypting an auto
mechanic pattern packets so what

245
00:18:11,860 --> 00:18:16,310
happened is that your clear text so you
get your feet get request goes through

246
00:18:16,310 --> 00:18:20,580
you know the stock and then there's an
HMAC which is calculated awful that

247
00:18:20,580 --> 00:18:24,820
right so it's just a matter should
ensure integrity of the text and then

248
00:18:24,820 --> 00:18:28,570
the thing is pat dry with a bunch of
bites so the important thing to

249
00:18:28,570 --> 00:18:32,929
understand is that the padding is never
protected by the H macro sinatra tend to

250
00:18:32,930 --> 00:18:36,130
get it so this was the whole problem
with pool with all these things we can

251
00:18:36,130 --> 00:18:39,970
just flip bytes in the in the planning
because it's not tend to get it right

252
00:18:39,970 --> 00:18:46,760
this is although makanan crips problem
and and and obviously yes there's no

253
00:18:46,760 --> 00:18:49,670
padding you know twenty thing which is
protected by a stream cipher because

254
00:18:49,670 --> 00:18:56,880
they don't have a block size because all
this to take us to scrapie SSL TLS so

255
00:18:56,880 --> 00:19:02,460
the idea behind this was like alright so
we've got all this stuff coming in

256
00:19:02,460 --> 00:19:07,450
how do we deal with how do we review
stuff how do you learn about how do you

257
00:19:07,450 --> 00:19:12,640
do love you you you know you exploit
your tax on it it's you need some kind

258
00:19:12,640 --> 00:19:16,450
of stock which helps you do that and and
this was a story about what we built in

259
00:19:16,450 --> 00:19:23,890
so scrappy if you guys are familiar with
its just a library which allows which is

260
00:19:23,890 --> 00:19:27,950
great because it allows you to model a
network protocol and it will dissect it

261
00:19:27,950 --> 00:19:31,300
will basically allowed to craft craft
packets and break them and dissect them

262
00:19:31,300 --> 00:19:37,200
so get your representation out of the
bites so so sketchy saulters is just I

263
00:19:37,200 --> 00:19:43,570
it's it lives about scrappy and it it
just isn't charge of allowing you to

264
00:19:43,570 --> 00:19:47,950
create packard's and allow you to
dissect Pakistan viewer they are so the

265
00:19:47,950 --> 00:19:52,370
thing is we try to make it stateless as
much as possible and that's a real real

266
00:19:52,370 --> 00:19:57,550
pain to do because pls is so stateless
take full by default rights in massive

267
00:19:57,550 --> 00:20:01,000
massive state machine that's all it is
and it does stuff but the thing is if

268
00:20:01,000 --> 00:20:03,700
you want to exercise the code at the
state machine later you have to be

269
00:20:03,700 --> 00:20:09,240
stateless right so scrappy allows you to
do this stuff to do to these kind of

270
00:20:09,240 --> 00:20:10,860
things

271
00:20:10,860 --> 00:20:14,600
allows you to craft packard's and
dissect them so meaning that when you

272
00:20:14,600 --> 00:20:18,659
get a response from the server it will
be able to dissected for you and provide

273
00:20:18,660 --> 00:20:21,980
you the individual fields which makes
sense which you can then reuse write

274
00:20:21,980 --> 00:20:27,030
yourself and it does quick decision
Hanley so as I was saying you should

275
00:20:27,030 --> 00:20:30,660
have to double the crypt operations
that's kind of a tractor the way but it

276
00:20:30,660 --> 00:20:34,360
provides hooks into it so you can modify
the padding can modify them back on the

277
00:20:34,360 --> 00:20:37,899
fly into some stuff like that and then
we can do a bunch of sniffing but it was

278
00:20:37,900 --> 00:20:43,720
not his first purpose so why bother
right as I was saying you know Taylor

279
00:20:43,720 --> 00:20:47,420
stocks they're built to be robust you
know and

280
00:20:47,420 --> 00:20:51,360
you know thanks for that all the Devils
who actually know build those stocks you

281
00:20:51,360 --> 00:20:55,459
know they're really robust as a security
engineer that's a pain because you can't

282
00:20:55,460 --> 00:21:00,650
modify all the parameter as you need in
order to reproduce stuff then force

283
00:21:00,650 --> 00:21:04,180
input validation you know and the tear
down the connection on their own and

284
00:21:04,180 --> 00:21:11,810
basically they're not flexible at all so
the goal of this is to create to create

285
00:21:11,810 --> 00:21:17,600
a stack which is easy to use basically
mostly easy to install right because you

286
00:21:17,600 --> 00:21:21,689
know if you have a problem installing it
please follow bug you know it should be

287
00:21:21,690 --> 00:21:27,250
stuck in just work so if we haven't done
the job probably just thought about it

288
00:21:27,250 --> 00:21:31,800
should simplify basically the discovery
and exploitation of tea responsibilities

289
00:21:31,800 --> 00:21:36,110
that come out or basically in in a
response in Aereo just help you figure

290
00:21:36,110 --> 00:21:42,520
out if its a problem for product details
you full control of any dealers field as

291
00:21:42,520 --> 00:21:46,650
I said it try super hard to maintain no
state so that for example you can set

292
00:21:46,650 --> 00:21:50,670
you can send a record within an alert
and then send a handshake on top right

293
00:21:50,670 --> 00:21:54,880
that makes absolutely no sense from the
40 S state machine you can do this and

294
00:21:54,880 --> 00:22:00,720
so you can look for for state machine
bugs and they are some

295
00:22:00,720 --> 00:22:05,570
hopefully has good documentation good
documents and documentation examples and

296
00:22:05,570 --> 00:22:11,330
no checks are enforced right so it's not
for use by death there's no certificate

297
00:22:11,330 --> 00:22:14,189
checking no signature checking there's
nothing right now length checking

298
00:22:14,190 --> 00:22:18,600
anything so all this is basically all
you want to do is that it's not

299
00:22:18,600 --> 00:22:19,419
necessary

300
00:22:19,420 --> 00:22:23,610
this is the stuff you're looking for and
it wasn't hard sane defaults and

301
00:22:23,610 --> 00:22:29,100
transparent encryption so I won't go
over the full support of what it what it

302
00:22:29,100 --> 00:22:36,250
does basically but pretty much anything
which is for myself v3 to tell us 12

303
00:22:36,250 --> 00:22:43,570
works should work it supports all the
major exchangers so you can do

304
00:22:43,570 --> 00:22:44,760
RSA

305
00:22:44,760 --> 00:22:51,780
ephemeral diffie-hellman elliptic curve
all this stuff does our SNDA signatures

306
00:22:51,780 --> 00:22:56,720
he needs and you can do any recorded
extension but that's more by Telus

307
00:22:56,720 --> 00:23:00,810
design will say you can throw any random
but said it right and you can do some

308
00:23:00,810 --> 00:23:05,360
places so the only thing missing is
basically the authenticated ciphers so

309
00:23:05,360 --> 00:23:12,590
Sgt MCCI mode we rely on my trip turned
it doesn't seem so you know if you just

310
00:23:12,590 --> 00:23:16,500
install the stable branch basically it
should be a simple as people's doorsteps

311
00:23:16,500 --> 00:23:19,230
LTS that should pull all the
dependencies and you should be done

312
00:23:19,230 --> 00:23:22,410
that's all the the links to the other

313
00:23:22,410 --> 00:23:30,340
you know get right pose but you don't
really need that so so the concept is

314
00:23:30,340 --> 00:23:33,240
gonna start Gabby and it's going to
bring back a prompt to you not sure you

315
00:23:33,240 --> 00:23:37,530
know second right and we made sure that
all the classes start with the dealer so

316
00:23:37,530 --> 00:23:40,820
you should be kind of easy to explore
you know you can just order complete and

317
00:23:40,820 --> 00:23:45,550
should allow you know give us a
sufficient stuff is Gabby basically this

318
00:23:45,550 --> 00:23:49,300
will be like a no-brainer for you will
be super simple to use against exactly

319
00:23:49,300 --> 00:23:55,470
you know it's just lives on top of it so
it's the same some stuff you know sure

320
00:23:55,470 --> 00:23:58,240
to check what feels available you can do
a less of the thing and it will tell you

321
00:23:58,240 --> 00:24:03,370
hey you know you need to add this this
size of you know two bites and etcetera

322
00:24:03,370 --> 00:24:08,270
so the only thing is that we added you
know a small proxy object around a

323
00:24:08,270 --> 00:24:12,560
soccer ball at Els socket which is the
thing used to send and receive data and

324
00:24:12,560 --> 00:24:19,919
all it does basically is it puts don't
shape for you so you can send it bites

325
00:24:19,920 --> 00:24:23,690
you know scrappy type packard and it
will transform a two-by-four send it out

326
00:24:23,690 --> 00:24:27,480
and it does the other thing the other
way or the other way and so you know you

327
00:24:27,480 --> 00:24:34,840
build packets you know it's copies are
really just by adding the / in front of

328
00:24:34,840 --> 00:24:41,169
them this is what you do so I'll just
show you really quickly so I've got an

329
00:24:41,170 --> 00:24:48,350
OpenSSL so basically running TLS wanted
to show you guys quick example of what

330
00:24:48,350 --> 00:24:57,360
you can do

331
00:24:57,360 --> 00:25:06,990
alright so basically just drops in a
shell and then write this will give you

332
00:25:06,990 --> 00:25:11,760
a list so the front so this will give
you a list basically you're all

333
00:25:11,760 --> 00:25:16,820
available records and things and so the
ideas are you can build packard's pretty

334
00:25:16,820 --> 00:25:27,700
simply and that's the only you know
manual demo will do

335
00:25:27,700 --> 00:25:33,769
just built you are you know I climb
hello and you can do that with anything

336
00:25:33,769 --> 00:25:39,190
else and so basically the idea is that
then you get this this output which is

337
00:25:39,190 --> 00:25:45,980
which can show you so basically it will
show you write the dissected payload and

338
00:25:45,980 --> 00:25:49,620
you know you can interact with any type
in their meaning that you know you can

339
00:25:49,620 --> 00:25:53,399
change anything in there you know the
SessionID the site to sweep the

340
00:25:53,399 --> 00:25:56,969
compression methods and all this stuff
doesn't seem like a big deal but it was

341
00:25:56,970 --> 00:26:01,370
something which I don't think it's just
before and i think is it will pre

342
00:26:01,370 --> 00:26:04,668
compute all the boring stuff for
Umenyiora generates around them by you

343
00:26:04,669 --> 00:26:10,090
know get the next time you know she's a
daddy for an insightful look at all the

344
00:26:10,090 --> 00:26:20,780
lengths and all this stuff is done for
you

345
00:26:20,780 --> 00:26:28,770
yes we are just a quick example of of
basically sending just a client low to a

346
00:26:28,770 --> 00:26:31,710
serving getting a response to this is
all the code you need more rest to do

347
00:26:31,710 --> 00:26:36,230
that right and a lot of it is just you
know creating a socket and doing doing

348
00:26:36,230 --> 00:26:46,930
this kind of stuff

349
00:26:46,930 --> 00:26:52,250
sent it out to open a cell service right
and when I'm showing you here I thought

350
00:26:52,250 --> 00:26:57,940
the screen was bigger so this is a bit
is basically the server response so what

351
00:26:57,940 --> 00:27:01,340
you get back is you get back a server
responds with a whole bunch of fields

352
00:27:01,340 --> 00:27:05,760
with which you can interact again right
so if you want to dynamically check you

353
00:27:05,760 --> 00:27:09,510
know if the session IDs generators are
properly random and stuff stuff you can

354
00:27:09,510 --> 00:27:13,860
do you can collect all this stuff what's
interesting is that you also get

355
00:27:13,860 --> 00:27:18,129
certificates back and they paused in
their sin 1 representation so you got

356
00:27:18,130 --> 00:27:21,770
access to all this stuff within the cert
you know you can check extensions and

357
00:27:21,770 --> 00:27:26,350
stay and check all these things the
signatures invalidate all that another

358
00:27:26,350 --> 00:27:31,189
interesting part basically here is that
it will give you all the elliptic curve

359
00:27:31,190 --> 00:27:35,950
diffie-hellman server parameter is right
so all the diffie-hellman stuff and you

360
00:27:35,950 --> 00:27:40,260
got straightaway access to that so you
have access to the prime denotes the

361
00:27:40,260 --> 00:27:43,370
group size and all this kind of things
to the signatures to the name of the

362
00:27:43,370 --> 00:27:52,409
curve and all these things and there's
just a show you again this basically

363
00:27:52,410 --> 00:27:56,820
something which will maintain all the
history of the packets for you just call

364
00:27:56,820 --> 00:28:01,800
like it which is a context so it holds
the context for the whole TLS session

365
00:28:01,800 --> 00:28:05,800
and what it does is that it's pretty
handy because it will give you every

366
00:28:05,800 --> 00:28:09,460
single parameter which has been
negotiated during the transaction so

367
00:28:09,460 --> 00:28:15,240
here for example you can see here this
is the curve point from the elliptic

368
00:28:15,240 --> 00:28:19,730
curve diffie-hellman exchange showed two
years an equation and you know so you

369
00:28:19,730 --> 00:28:23,380
can act on all this but you can get back
the point back into some calculation on

370
00:28:23,380 --> 00:28:25,660
Kurds and all this stuff right

371
00:28:25,660 --> 00:28:30,370
also gives you you know the pre master
secret so all this debris master secret

372
00:28:30,370 --> 00:28:34,919
the secret secret then to rival the key
material you can interact with it change

373
00:28:34,920 --> 00:28:39,510
in Tampa with it and all this kind of
things obviously here there is not yet

374
00:28:39,510 --> 00:28:43,780
any Mac encryption and IV stuff because
the the connection hasn't gone through

375
00:28:43,780 --> 00:28:52,480
yet so they're going to do the parameter
be generated

376
00:28:52,480 --> 00:28:56,040
ok so I just want to show you really
quickly how you can also craft

377
00:28:56,040 --> 00:28:59,950
extensions and why this is pretty much
the same thing is just before step I'm

378
00:28:59,950 --> 00:29:01,470
going to add a bunch of extensions

379
00:29:01,470 --> 00:29:03,900
you know it's not very impressive views
going to see in washington is a bunch of

380
00:29:03,900 --> 00:29:08,040
extensions but the thing is why super
interesting is that tis extensions they

381
00:29:08,040 --> 00:29:12,220
force the server to perform different
code pass so the thing is when you can

382
00:29:12,220 --> 00:29:15,140
play with extensions you can start
phasing them and exercising new code

383
00:29:15,140 --> 00:29:19,400
possible on the server side and that's
why I show you how to cross them because

384
00:29:19,400 --> 00:29:23,809
it really allows you to get into the
extensions and force them to a level

385
00:29:23,809 --> 00:29:28,178
that can you know hopefully or
unfortunately trigger service I crash

386
00:29:28,179 --> 00:29:46,790
right so just start Wireshark on this to
Michelle

387
00:29:46,790 --> 00:29:56,040
so here again just gonna show basically
hello so I sent a hollow with an LPN

388
00:29:56,040 --> 00:30:01,490
NS&I and fragmentation sizes I wish to
negotiate with the server which will

389
00:30:01,490 --> 00:30:05,540
talk about that extension indeed a bit
later and so if you look basically here

390
00:30:05,540 --> 00:30:09,750
you've got control we crafted a packet
will you got full control here

391
00:30:09,750 --> 00:30:13,320
of the server servername and so you know
you can do a whole bunch of stuff on

392
00:30:13,320 --> 00:30:17,139
this you also have control of the length
and all the valuable different fields

393
00:30:17,140 --> 00:30:20,360
you can pretty much be any bites you
want anywhere in this package which

394
00:30:20,360 --> 00:30:23,909
means I you know you can change the
length of the list change you know the

395
00:30:23,910 --> 00:30:30,870
type of all this stuff same here for
negotiated hd2 above this so same thing

396
00:30:30,870 --> 00:30:36,409
right you can you can go after whatever
you want in this stuff and here I said a

397
00:30:36,410 --> 00:30:42,710
fragment length which is which is
invalid right this shouldn't be you know

398
00:30:42,710 --> 00:30:47,450
I can only be a value 12345 so was just
a show basically I hear you can you can

399
00:30:47,450 --> 00:30:58,360
throw any any bites you want in southern
extensions

400
00:30:58,360 --> 00:31:03,330
another thing I wanna show you is the
transparent traffic decryption to hear

401
00:31:03,330 --> 00:31:07,889
what all do is again this is all the
code you need right to speak with us and

402
00:31:07,890 --> 00:31:12,330
and encrypt data to advise I'm just
going to get requests back to OpenSSL

403
00:31:12,330 --> 00:31:16,179
but the thing is you know it's just
gonna show you that all the keying

404
00:31:16,180 --> 00:31:18,870
material you gonna get it back and
you're going to be able to have a look

405
00:31:18,870 --> 00:31:22,129
into it so you can poke into the
randomness of IVs of all this kind of

406
00:31:22,130 --> 00:31:28,620
stuff and later is how you can actually
tamper with the different phases of this

407
00:31:28,620 --> 00:31:41,709
inside the encryption

408
00:31:41,710 --> 00:31:50,919
write a response this is just a cell
which is responsible was ciphers and

409
00:31:50,919 --> 00:31:55,520
except as you can see that you got a 200
OKC got a response here but what's

410
00:31:55,520 --> 00:31:59,220
interesting basically is here everything
all this is exposed again

411
00:31:59,220 --> 00:32:02,779
programmatically you can get access to
all this so you got actually access to

412
00:32:02,779 --> 00:32:08,779
the Ivy League's it's just want to write
the Mac the padding and adding length

413
00:32:08,779 --> 00:32:12,330
which older fields which are you know
which other metadata for your day

414
00:32:12,330 --> 00:32:19,678
diversity in which I tripped inside the
channel and again if you look at the the

415
00:32:19,679 --> 00:32:24,580
TLS context you gonna have so here you
can see that you've got the elliptic

416
00:32:24,580 --> 00:32:27,330
curve private key for you

417
00:32:27,330 --> 00:32:31,510
client as well as you know your your
public key you know the church you

418
00:32:31,510 --> 00:32:35,220
working on the server side stuff and you
got the pre musta secret the master's

419
00:32:35,220 --> 00:32:39,940
degree which has been calculated through
eche and they're all a bunch of random

420
00:32:39,940 --> 00:32:45,130
bytes right coming from the server and
then finally your encryption keys so

421
00:32:45,130 --> 00:32:49,360
potentially you could use this united
struck this data and may be decrypted

422
00:32:49,360 --> 00:32:56,000
with Wireshark and all this kind of
stuff

423
00:32:56,000 --> 00:33:03,020
alright so now you know why should you
vaguely the capabilities of the tool

424
00:33:03,020 --> 00:33:09,790
further is is what you want to look for
so say you're either in response or

425
00:33:09,790 --> 00:33:14,370
penetration testing were having a look
at those stocks counselor one of the

426
00:33:14,370 --> 00:33:19,350
stocks just just want to have a look for
and some of this will be pretty basic

427
00:33:19,350 --> 00:33:24,899
a full go for you you know Taylor some
of it might be a bit more surprising so

428
00:33:24,900 --> 00:33:28,360
you know you have to do basic recon so
what dealers versions are supported what

429
00:33:28,360 --> 00:33:31,479
what ciphers were compression methods
you know which ordering a ciphers

430
00:33:31,480 --> 00:33:32,340
etcetera

431
00:33:32,340 --> 00:33:35,030
spend a lot of time on this cause this
is well covered and it's pretty simple

432
00:33:35,030 --> 00:33:40,200
there's a lot of tools out there was
another interesting one is that you can

433
00:33:40,200 --> 00:33:45,110
try and fingerprint the TLS stock more
precisely so one thing is that generally

434
00:33:45,110 --> 00:33:49,770
that the the custom stats i've seen are
generally thought of something at some

435
00:33:49,770 --> 00:33:55,760
stage ride and the thing is is that
those various baselines have different

436
00:33:55,760 --> 00:33:59,810
behaviour at the time and so you can try
and fingerprint the stock to figure out

437
00:33:59,810 --> 00:34:03,100
i think you can probably get down even
primitive the major version number of

438
00:34:03,100 --> 00:34:07,230
war was stuck and do I haven't really
research research further into this but

439
00:34:07,230 --> 00:34:10,770
you could imagine having at all similar
to pop you know to which fingerprints

440
00:34:10,770 --> 00:34:15,949
when map basically gives you bring a
fingerprint you know the TSP stock or

441
00:34:15,949 --> 00:34:19,989
what host to running you could probably
do the same thing he would be less so

442
00:34:19,989 --> 00:34:23,908
for example OpenSSL depending on the
version will add an empty plain text

443
00:34:23,909 --> 00:34:27,200
fragment right and I don't think either
stocks do that mean it will just send an

444
00:34:27,199 --> 00:34:33,000
empty string and empty blog which will
be encrypted and pass through Jason C as

445
00:34:33,000 --> 00:34:36,250
I said you know has the concept of a
stack handshake and so that's something

446
00:34:36,250 --> 00:34:42,260
you'd only see with it and also another
one you can figure out is you will get a

447
00:34:42,260 --> 00:34:46,320
different alert type when tampering with
the finish message so the finish

448
00:34:46,320 --> 00:34:49,970
messages are said was a harsher or you
know the previous Pakistan stuff but

449
00:34:49,969 --> 00:34:54,029
it's got a small header which is about
five mice which is you know just a bunch

450
00:34:54,030 --> 00:34:59,060
of the handshake basically head up and
when you Tampa without you will get

451
00:34:59,060 --> 00:34:59,630
different

452
00:34:59,630 --> 00:35:03,299
message depending on the stock from time
to time so you know there's probably

453
00:35:03,299 --> 00:35:09,799
more research to be done in this space
but I think it's tough which can be done

454
00:35:09,799 --> 00:35:13,740
another thing you want to look into is
actually the state machine so the thing

455
00:35:13,740 --> 00:35:17,819
is this is really a tricky testing part
and it's really boring and tedious to do

456
00:35:17,819 --> 00:35:21,630
the thing is it's mostly manual work
because you ever try and trick the

457
00:35:21,630 --> 00:35:26,140
jealous you know state machine into
entered invalid state and the thing is

458
00:35:26,140 --> 00:35:29,578
it's mostly mental state and you know
you good knowledge of the RSC another

459
00:35:29,579 --> 00:35:33,069
state machine and you know I'm trying to
think of ways how to automate this but

460
00:35:33,069 --> 00:35:38,500
they might not need to because the guys
from India in France and I think there

461
00:35:38,500 --> 00:35:41,200
they cooperate with other people
basically they brought out flexed pls

462
00:35:41,200 --> 00:35:45,879
couple of months ago which basically
allows to test for these data machine

463
00:35:45,880 --> 00:35:50,529
style problems and and basically can
give you a really good starting point

464
00:35:50,529 --> 00:35:54,519
for manual testing so it's a really good
tool is based off mighty mighty less

465
00:35:54,519 --> 00:35:57,479
it's their verified implementation of
the lesser the guys like you find all

466
00:35:57,480 --> 00:36:03,160
the protocol level attacks until it and
and yes it will exercise of state

467
00:36:03,160 --> 00:36:06,569
machine and it's the only tool open
source stories that I know which allows

468
00:36:06,569 --> 00:36:11,670
you to do that and then it basically
lets you drill down with GAAP yourself

469
00:36:11,670 --> 00:36:15,539
if you want to on the areas it has
identified only further in and the thing

470
00:36:15,539 --> 00:36:19,299
is those stocks that got a lot of legacy
stuff so for example one thing I

471
00:36:19,299 --> 00:36:21,029
encountered maybe

472
00:36:21,029 --> 00:36:25,449
couple of years ago or a year ago was
serving gated cryptography and if anyone

473
00:36:25,449 --> 00:36:30,609
has a clue what that is but basically
it's a really super old mechanism where

474
00:36:30,609 --> 00:36:35,169
it's it's based on the export stuff and
where you could buy your client could

475
00:36:35,169 --> 00:36:40,390
renegotiate stronger cycle is based on
the certificate type returned by the

476
00:36:40,390 --> 00:36:44,359
server so you know that stuff is still
out there probably in some stocks for

477
00:36:44,359 --> 00:36:45,819
some reason

478
00:36:45,819 --> 00:36:51,400
all right on to defeat Helmand you know
generally you know if you put them in

479
00:36:51,400 --> 00:36:54,959
the same bucket so you know you want to
look at the group size that's pretty

480
00:36:54,959 --> 00:36:58,799
simple because now you got access to all
the prime numbers the field size and all

481
00:36:58,799 --> 00:37:02,999
these values from the privilege check
you want to look for subgroup

482
00:37:02,999 --> 00:37:08,189
confinement attacks possible and you
know the signature algorithm used

483
00:37:08,189 --> 00:37:11,558
another thing he knew from the client
side but if you send you know just a

484
00:37:11,559 --> 00:37:14,999
bunch of random values in their see what
happens right now it's pretty trivial

485
00:37:14,999 --> 00:37:20,689
today so scrappy assault Els uses tiny
c4 lifted curve calculation so that's a

486
00:37:20,689 --> 00:37:25,319
library which allows you to do it take
care of again without any enforcement so

487
00:37:25,319 --> 00:37:29,650
you can perform arithmetic off curve and
all this kind of things so integrated

488
00:37:29,650 --> 00:37:33,329
pre-world with yourself because you can
actually drill down to the elliptic

489
00:37:33,329 --> 00:37:40,059
curve level and send it back to ask AP
which is helpful at times so I'll talk

490
00:37:40,059 --> 00:37:44,569
about side channels really quickly but
that's a more known problems won't

491
00:37:44,569 --> 00:37:48,779
bother too much you know so when the pre
musta secrets decrypted basically GLS

492
00:37:48,779 --> 00:37:49,999
mandates

493
00:37:49,999 --> 00:37:56,959
qualify for padding which is you know
appalling scheme and showed like you

494
00:37:56,959 --> 00:38:01,939
really 898 that this parking scheme once
you gonna padding Oracle and you can

495
00:38:01,939 --> 00:38:06,428
basically you recover the cleartext so
the thing is you generally want to check

496
00:38:06,429 --> 00:38:11,109
you want to generate faulty padding for
the PMS said that it through and you

497
00:38:11,109 --> 00:38:15,890
know check if you got time or response
differences due to develop adding that

498
00:38:15,890 --> 00:38:20,939
would allow you to carry out this time I
use a talk called by bleach which allows

499
00:38:20,939 --> 00:38:27,219
you to generate faulty padding so what
you do is spit out your PMS in it which

500
00:38:27,219 --> 00:38:30,709
he gathered force copy and then just
generate some faulty padding sending

501
00:38:30,709 --> 00:38:33,459
encrypted and send it back out to the
server and see what happens

502
00:38:33,459 --> 00:38:39,448
so again a bunch of side channels but
more on symmetrical trip so which are

503
00:38:39,449 --> 00:38:44,299
you know well known well documented so
you know you wanna check padding and you

504
00:38:44,299 --> 00:38:48,259
know mike has must be constant time you
know there's a whole bunch well again a

505
00:38:48,259 --> 00:38:50,809
whole bunch of such channels on that
stuff and yellow tights must be

506
00:38:50,809 --> 00:38:59,739
identical and another one is that you
wanna check that the stock actually does

507
00:38:59,739 --> 00:39:04,059
proper by checking so some snacks I
don't you have received recently but

508
00:39:04,059 --> 00:39:08,179
will only check a bunch so that was
brutal to for example is that the stock

509
00:39:08,179 --> 00:39:11,849
only check the two last by surpassing as
opposed to the whole bunch which allowed

510
00:39:11,849 --> 00:39:19,049
you know to expand food all from request
to 65,000 right for a bite and the thing

511
00:39:19,049 --> 00:39:24,609
is the Mac also can be you can have the
same problem where the stock will check

512
00:39:24,609 --> 00:39:28,869
on you won by automatic washer by so
that I can you find that out and same

513
00:39:28,869 --> 00:39:31,959
thing for the verify data which is the
the hash which was talking about to

514
00:39:31,959 --> 00:39:35,259
finish message where you want to make
sure it's completely checked otherwise

515
00:39:35,259 --> 00:39:39,259
you know the tampering in transit could
try find a collision or something like

516
00:39:39,259 --> 00:39:44,999
that so you know the idea is also you
have to do all this just in the demo

517
00:39:44,999 --> 00:39:49,549
after we're basically it's pretty simple
to do hopefully with them with this

518
00:39:49,549 --> 00:39:53,839
stack where you can you know all this
stuff will be pro calculated for you and

519
00:39:53,839 --> 00:39:57,019
all you need is to flip a bite and send
it out and see what happens

520
00:39:57,019 --> 00:40:04,709
just a tiny word on D das so pls is UDP
rise the TLS version

521
00:40:04,710 --> 00:40:09,200
over UDP just to really simplify and if
you look at it returns the certificate

522
00:40:09,200 --> 00:40:13,509
chain on the first packet right so i
think is sending a DTS hello message

523
00:40:13,510 --> 00:40:17,750
which is roughly 64 bytes which you can
obviously spoofs and it's really be and

524
00:40:17,750 --> 00:40:21,109
you getting a detailed response which
can be several gigabytes right because

525
00:40:21,109 --> 00:40:26,009
it's a searching so that's you know
major problem and the fixes inside the

526
00:40:26,010 --> 00:40:34,070
protocol but it's it's the main right so
we definitely want to make sure that

527
00:40:34,070 --> 00:40:39,420
your server overloaded actually send a
Hello verify request which is just a

528
00:40:39,420 --> 00:40:43,950
small cookie what it says is it goes are
you not gonna perform all this expensive

529
00:40:43,950 --> 00:40:47,589
you know I'm not gonna send all these
bites in a wire right now so I don't

530
00:40:47,589 --> 00:40:50,549
know who you are then you send your
small cookie and you do your request

531
00:40:50,550 --> 00:40:55,570
again with a cookie and then I'll give
you i'll give you the the real response

532
00:40:55,570 --> 00:40:58,800
back but you definitely want to check
for that because I mean the

533
00:40:58,800 --> 00:41:06,150
amplification problem is not as severe
as the talk about fragmentation so this

534
00:41:06,150 --> 00:41:12,250
is quite nice actually it's so the specs
as any package above sixteen thousand

535
00:41:12,250 --> 00:41:16,119
bites must be fragmented but the thing
is you can choose any fragment size you

536
00:41:16,119 --> 00:41:20,599
want and if you remember as I was saying
earlier very few stocks support here

537
00:41:20,599 --> 00:41:24,440
less reassembly so this means that the
UN service probably going to support it

538
00:41:24,440 --> 00:41:28,700
but your mailbox might not so what you
can do is you can fragment you packers

539
00:41:28,700 --> 00:41:33,609
say making 16 bytes and centers across
and there's a good chance that your

540
00:41:33,609 --> 00:41:39,109
mailbox full fails actually rebuilt it
so all the stuff like IPS you know all

541
00:41:39,109 --> 00:41:43,240
the stuff was manning the middles TLS
without if it fails open it can be

542
00:41:43,240 --> 00:41:48,250
vulnerable to this stuff it doesn't do
property less reassembly so one

543
00:41:48,250 --> 00:41:52,480
interesting thing is that from a client
you can you start but you can also to

544
00:41:52,480 --> 00:41:56,140
some extent ask the server too friendly
stuff so there's a small extension

545
00:41:56,140 --> 00:41:58,089
called the maximum pregnant

546
00:41:58,090 --> 00:42:04,010
negotiation which allows you to say hey
server I only can read you know 512 byte

547
00:42:04,010 --> 00:42:07,380
packet so Kenya fragment them in your
response back to me

548
00:42:07,380 --> 00:42:11,470
meaning that you can also control to
some level of fragmentation which is

549
00:42:11,470 --> 00:42:16,589
sent back to you and that kicks in
generally at the search for when just

550
00:42:16,590 --> 00:42:20,620
after the just before the certificates
are sent so you could potentially ask

551
00:42:20,620 --> 00:42:23,529
your server to fragment again the
certificates when passing them back to

552
00:42:23,530 --> 00:42:29,560
you which would possibly defeat the
middle box right and again as I was

553
00:42:29,560 --> 00:42:33,299
saying DDS allows you to specify the
fragment offset so you can have staff

554
00:42:33,300 --> 00:42:37,140
where you gonna have you gonna send a
chunk and then you're going to have an

555
00:42:37,140 --> 00:42:40,790
offset which starts within the chunk
again and so you can overlap data on

556
00:42:40,790 --> 00:42:47,240
this again using detailed us right so
I'll just a quick talk about how you can

557
00:42:47,240 --> 00:42:53,669
make how has GPS LTS makes you know the
Hawks transparent to you and how you can

558
00:42:53,670 --> 00:43:01,400
touch the the padding you know touch the
max and ideas and all this stuff so it

559
00:43:01,400 --> 00:43:06,180
exposes a method called cellist to rule
and all its purpose to do is basically

560
00:43:06,180 --> 00:43:13,399
give give it some bites that context for
Sony encrypted so you know the ideas you

561
00:43:13,400 --> 00:43:16,590
give it you get requests with the
context of your current session and it

562
00:43:16,590 --> 00:43:19,790
returns you the encrypted version you
can sit on the wire so pretty simple

563
00:43:19,790 --> 00:43:29,670
thing is it allows it gives you a few so
first of all the crypto material for you

564
00:43:29,670 --> 00:43:34,240
meaning that in so that crypto blob or
have you know a correct Mac correct

565
00:43:34,240 --> 00:43:35,810
planning and all these things

566
00:43:35,810 --> 00:43:39,610
thing is it exposes a bunch of hooks a
compression time pre and post encryption

567
00:43:39,610 --> 00:43:45,730
meaning that if you register call back
you can you can catch the state

568
00:43:45,730 --> 00:43:50,100
preemption when the package is still he
takes so you can get the data with the

569
00:43:50,100 --> 00:43:53,850
correct mark the correct planning and
everything and act on it before it hits

570
00:43:53,850 --> 00:43:57,529
the encryption routing meaning that now
you can tamper with padding

571
00:43:57,530 --> 00:44:02,300
and the Mac and all this stuff by easily
because you don't have to calculate them

572
00:44:02,300 --> 00:44:05,370
you don't have to bother about keeping
strip the track of the PRF of the

573
00:44:05,370 --> 00:44:12,830
various keys and all this stuff you can
just change this so all this stuff you

574
00:44:12,830 --> 00:44:15,680
know there's an abstraction called the
crypto container basically which which

575
00:44:15,680 --> 00:44:19,629
is just an object which holds a
reference to the key into the Mac the

576
00:44:19,630 --> 00:44:24,230
padding on the paneling and if you look
at the tiny snippet below you know I

577
00:44:24,230 --> 00:44:30,180
just giving a global plain text without
context I'm calling modify padding right

578
00:44:30,180 --> 00:44:35,299
and all this does is that is gonna it's
gonna you know flip a bite inside the

579
00:44:35,300 --> 00:44:39,280
padding and send it out and see so this
basically allows you to test for

580
00:44:39,280 --> 00:44:45,130
approval in like you know fifteen lines
of code if you know the the socket

581
00:44:45,130 --> 00:44:48,110
harming and all this stuff and you can
you can do the same thing for the Mac

582
00:44:48,110 --> 00:44:51,160
make sure all by Sir test you can do the
same thing for the better fighter you

583
00:44:51,160 --> 00:44:56,480
know and as you ready to put into the
protocol so it's super useful as I was

584
00:44:56,480 --> 00:45:00,310
saying to modify crypto stay with are
keeping track of the PRS the ciphers the

585
00:45:00,310 --> 00:45:05,330
max and all this stuff and it allows
users to reproduce attacks which

586
00:45:05,330 --> 00:45:21,819
happened inside the crypto element so
there really quick demo of this

587
00:45:21,819 --> 00:45:32,970
so basically I'm just gonna

588
00:45:32,970 --> 00:45:36,259
so this is an example so you can just
find on the web at the reference was

589
00:45:36,260 --> 00:45:40,590
getting so yeah I'm gonna run it against

590
00:45:40,590 --> 00:45:49,850
so basically what I'm doing is actually
being a bunch of bad bites and a TLS 1.2

591
00:45:49,850 --> 00:45:53,890
stuck right so what's happening is that
you know I resisted that hook as I was

592
00:45:53,890 --> 00:45:57,629
saying I'm just flipping all the boys
inside the inside the cypher and you

593
00:45:57,630 --> 00:46:03,630
notice want to is not available right so
this just works out of the box thing is

594
00:46:03,630 --> 00:46:12,460
if I restart my openness also has a cell
v3 mode and do the same thing here

595
00:46:12,460 --> 00:46:16,240
you'll see that it's you know the the
connection continues basically

596
00:46:16,240 --> 00:46:20,640
regardless of when I flip the bites so
that allows you to detect this stuff

597
00:46:20,640 --> 00:46:24,799
really super easily and you know this is
easy to provide to you know to a deft

598
00:46:24,800 --> 00:46:35,569
him and started to cure a regression or
whatever you want to do

599
00:46:35,569 --> 00:46:42,999
do a really quick demo on fragmentation
show you the last one here again all I'm

600
00:46:42,999 --> 00:46:48,859
doing is I'm going to create a packet
hello and I'm gonna fragmented on the 16

601
00:46:48,859 --> 00:46:53,420
by boundary right and you're going to
see that in Wireshark basically you

602
00:46:53,420 --> 00:46:58,109
don't why shot fails to rebuild a
Packard and this a good bunch of stocks

603
00:46:58,109 --> 00:47:19,920
out there which also failed to do the
same thing

604
00:47:19,920 --> 00:47:27,430
adjusted a handshake fragmented in 16
bytes fragments and send it across and

605
00:47:27,430 --> 00:47:38,700
basically you'll see that here you can
see that here was shocked when he sees

606
00:47:38,700 --> 00:47:42,129
an encrypted handshake message I don't
know why a figure that out but he can

607
00:47:42,130 --> 00:47:45,670
see my sixteen by fragments here which
are held to be re-assembled as a clam

608
00:47:45,670 --> 00:47:50,040
hello but it's a year it means that the
intermediate device has no knowledge of

609
00:47:50,040 --> 00:48:04,800
of this and what's happening on the wire
sorry

610
00:48:04,800 --> 00:48:12,660
alright so this is all I had for you
guys so basically you know I just yes

611
00:48:12,660 --> 00:48:16,220
this is mostly what I had for you guys I
was just to show you know that this this

612
00:48:16,220 --> 00:48:20,759
stuff if you work with less quite a lot
I can really help you you know prototype

613
00:48:20,760 --> 00:48:24,180
attacks pretty quickly and make sure
that you know no I'm not sure your

614
00:48:24,180 --> 00:48:28,009
products affected you know it's not
amazing stuff it's just it just allows

615
00:48:28,010 --> 00:48:31,950
you to get access to a whole bunch of
fields are you couldn't before and makes

616
00:48:31,950 --> 00:48:33,669
prototyping really much simpler

617
00:48:33,670 --> 00:48:38,750
you know you get access the whole bites
the whole represented device inside you

618
00:48:38,750 --> 00:48:45,370
know insanity last handshake and
Titleist self yeah it's really valuable

619
00:48:45,370 --> 00:48:50,720
I mean mostly I can speak for us it was
really super helpful in response mostly

620
00:48:50,720 --> 00:48:54,490
when you've got these problems will come
out you can prototype this super quickly

621
00:48:54,490 --> 00:48:58,640
and you can get you a black box for your
product and no issue affected are not

622
00:48:58,640 --> 00:49:02,629
straight away and I was there was pretty
good you can also help people you know

623
00:49:02,630 --> 00:49:05,420
which are interested in learning and
experimenting with TLS basically and

624
00:49:05,420 --> 00:49:06,290
just having a look

625
00:49:06,290 --> 00:49:11,740
just playing around with it 'cause
billing practices is quite simple yes or

626
00:49:11,740 --> 00:49:12,720
just a bunch of thanks

627
00:49:12,720 --> 00:49:16,730
like to think so basically he's the guy
with me working on this and in Europe

628
00:49:16,730 --> 00:49:24,370
who started the project ideas I just
contributed to it and so yes you find

629
00:49:24,370 --> 00:49:28,770
any bugs in airway different interested
to hear it to be shy just you know I

630
00:49:28,770 --> 00:49:35,340
just followed up and speak to me this my
gal failures thanks a lot

