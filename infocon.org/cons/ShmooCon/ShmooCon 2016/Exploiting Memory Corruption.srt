1
00:00:00,000 --> 00:00:21,330
well over a decade

2
00:00:21,330 --> 00:00:33,089
some of the recent research but a lot of
the stuff I have here goes back over 10

3
00:00:33,090 --> 00:00:42,780
years another contribution to an outline
of what I'll be talking about for the

4
00:00:42,780 --> 00:00:47,070
rest of the talk will talk a little bit
about bug hunting look at the internals

5
00:00:47,070 --> 00:00:51,290
of free artisan like we did he get some
contacts will talk about stack smashing

6
00:00:51,290 --> 00:00:55,720
in practice also talking some other bugs
and I'll go through an example of

7
00:00:55,720 --> 00:01:08,880
authorization issues are vendors are
being back doors into the system's

8
00:01:08,880 --> 00:01:18,470
overall you know but I wasn't focused on
the research I was restricting my focus

9
00:01:18,470 --> 00:01:23,429
to memory corruption only and as I
mentioned developers everything from the

10
00:01:23,430 --> 00:01:28,150
west to the application in C

11
00:01:28,150 --> 00:01:37,270
really expecting usual in my case I
started by auden whenever I get my hands

12
00:01:37,270 --> 00:01:43,170
on it so there's a lot of their so look
at our top lightweight AP particular as

13
00:01:43,170 --> 00:01:49,570
receives there are costs lots of
contributed servers are likely to

14
00:01:49,570 --> 00:02:00,000
constrain and so on

15
00:02:00,000 --> 00:02:10,530
bugs are you as well as causing honestly
some of the most serious

16
00:02:10,530 --> 00:02:22,740
possibly a lot of course we are
constantly I did finally said

17
00:02:22,740 --> 00:02:28,540
contributed servers SDKs and in
particular as per seats Internet of

18
00:02:28,540 --> 00:02:37,649
Things so far disclosed something like
nineteen and even fixed which is great I

19
00:02:37,650 --> 00:02:44,390
have had problems disclosing and I've
playing or crashes

20
00:02:44,390 --> 00:02:53,950
bugs are hard just to give you an
example of the kind of talking about

21
00:02:53,950 --> 00:02:59,209
this is in misperceived international
spot warm built on top of screen artists

22
00:02:59,209 --> 00:03:06,760
and what they have is a client that runs
and communicated with a cloud server and

23
00:03:06,760 --> 00:03:12,950
what it will do is send request up to
this that they control and process

24
00:03:12,950 --> 00:03:21,268
responses use their cards are too like
managed by so quickly as possible

25
00:03:21,269 --> 00:03:30,700
reading on skype yet so we look at this
boat is doing is our CDs and officially

26
00:03:30,700 --> 00:03:33,470
takes on line 226 everything between

27
00:03:33,470 --> 00:03:46,400
the nonce to Jason attribute and the
comma phone calls on the staff does so

28
00:03:46,400 --> 00:03:51,830
we can impersonate the server compromise
it then we can execute code to talk to

29
00:03:51,830 --> 00:03:54,510
and as it turns out dude other
vulnerabilities

30
00:03:54,510 --> 00:04:10,500
64 corruption despite a web server the
lessons and we are seeing you all what

31
00:04:10,500 --> 00:04:18,519
it does is basically copied everything
between you and HTTP requests into this

32
00:04:18,519 --> 00:04:33,280
year old friend instruction that out so
it's really easy to any oversight is one

33
00:04:33,280 --> 00:04:34,750
example of how

34
00:04:34,750 --> 00:04:45,280
server so really the nineties never and
these are

35
00:04:45,280 --> 00:04:52,619
it's clear that these are new and in
space you know memory corruption is

36
00:04:52,620 --> 00:04:57,190
really easy burglars introduced
developers that are you know parsing

37
00:04:57,190 --> 00:05:04,550
requests and responses by hand handling
requests for Android application and so

38
00:05:04,550 --> 00:05:09,770
on you know request that violate
standards that don't intentionally

39
00:05:09,770 --> 00:05:15,039
trigger immigration issues and manners
are always helping so for example on

40
00:05:15,040 --> 00:05:18,840
scene as he gazed at disabled yup
debugging assertions that actually

41
00:05:18,840 --> 00:05:26,900
perform security function or include
updated versions of libraries so we

42
00:05:26,900 --> 00:05:29,340
won't understand you know what's
happening under the hood in the context

43
00:05:29,340 --> 00:05:34,260
of three artists were triggering one of
these blogs and I'm really decide if

44
00:05:34,260 --> 00:05:38,570
these bugs are exploitable in the
context of three artists in order to put

45
00:05:38,570 --> 00:05:48,400
the bugs in context will look more at
the internals of us so it's a real time

46
00:05:48,400 --> 00:05:51,510
operating system is made by a company
based on the UK called real-time

47
00:05:51,510 --> 00:05:56,169
engineer's has been in development for
over a decade and it's a really low s

48
00:05:56,169 --> 00:06:01,909
what it gives you is task creation
tasking process and management

49
00:06:01,910 --> 00:06:06,020
inter-process communication using to use
some of wars in new taxes for

50
00:06:06,020 --> 00:06:10,990
synchronization did you hit them
multiple implementations for memory

51
00:06:10,990 --> 00:06:16,790
management and broad strokes that's
really about it doesn't have to say your

52
00:06:16,790 --> 00:06:24,290
YouTube user doesn't mandate the use of
a particular tcp/ip implementation you

53
00:06:24,290 --> 00:06:28,990
can use different implementations with
it so it's really grew for you know

54
00:06:28,990 --> 00:06:33,640
putting together a system and as a
result it's quite tiny I mean it weighs

55
00:06:33,640 --> 00:06:38,310
in at under twenty thousand lines of C
you can order to a new platform in under

56
00:06:38,310 --> 00:06:42,460
a thousand lines of C and assembly and
in terms of the memory footprint you can

57
00:06:42,460 --> 00:06:47,500
run it in under a cave memories so this
can run really constrained platforms

58
00:06:47,500 --> 00:06:52,160
which is great and I think it's been so
successful in caen porting to so many

59
00:06:52,160 --> 00:06:58,260
platforms lightweight I P it's a really
popular embedded tcp/ip stack was

60
00:06:58,260 --> 00:07:02,789
originally written by Adam jungles and
disliking particular supports a lot of

61
00:07:02,790 --> 00:07:07,840
different protocols including SNMP DNS
and so on and includes a lot of

62
00:07:07,840 --> 00:07:11,710
contributed servers web servers DNS
servers and so on and you'll also find

63
00:07:11,710 --> 00:07:16,890
that a lot of you know commercial and
obvious developers develop a lot of

64
00:07:16,890 --> 00:07:26,450
service to take advantage of the data
footprint in context and can you can you

65
00:07:26,450 --> 00:07:33,090
read the ok so we look at this picture
on the left here we have the knack for a

66
00:07:33,090 --> 00:07:36,770
separate assets running on three artists
and on the right there's the system he

67
00:07:36,770 --> 00:07:43,539
and all tasks as well as the colonel
share a single keep our costs and

68
00:07:43,540 --> 00:07:47,990
there's also statically allocated buffer
down in the bottom right and if you look

69
00:07:47,990 --> 00:07:52,610
at the test accuracy that it's going
downwards d the functions currently

70
00:07:52,610 --> 00:07:56,940
executing his part euro and it was
called by process request so we know

71
00:07:56,940 --> 00:08:01,620
that this task is it's reacting some
data coming over the network and has a

72
00:08:01,620 --> 00:08:06,980
couple different kinds of data that is
using the process request function has

73
00:08:06,980 --> 00:08:10,940
allocated 40 bytes we see this red chunk
on the heat

74
00:08:10,940 --> 00:08:15,430
has been allocated by that task there
there's a pointer to this article

75
00:08:15,430 --> 00:08:21,460
allocated buffer user agent last user
agent and parts URL has allocated an

76
00:08:21,460 --> 00:08:25,950
array on D one stack if you look over
the heap we see that that chunk that's

77
00:08:25,950 --> 00:08:30,159
been allocated has better than includes
pointers next chunk in this case is no

78
00:08:30,160 --> 00:08:33,969
because it's been allocated and also
includes the size which is 48 bytes

79
00:08:33,969 --> 00:08:39,409
being a place for the header and then 40
bytes for the data that was allocated

80
00:08:39,409 --> 00:08:44,910
and there's also an orange chunk and and
this is memory that's been allocated by

81
00:08:44,910 --> 00:08:49,140
another task in the system and we can
see that the free chunks there are

82
00:08:49,140 --> 00:08:54,270
arranged in a singly linked list so the
memory manager can find free memory when

83
00:08:54,270 --> 00:08:59,480
tasks requested so we've already
mentioned some of the key data

84
00:08:59,480 --> 00:09:04,370
structures here we saw the task have a
thick stack region that allocated

85
00:09:04,370 --> 00:09:08,130
actually on the system he was addressing
because it combines the settings for

86
00:09:08,130 --> 00:09:14,780
stack and heap overflows in this context
talk about the scheduler the schedule

87
00:09:14,780 --> 00:09:19,520
maintains multiple lists that he uses to
decide what asked ron was already list

88
00:09:19,520 --> 00:09:25,530
of suspended tasks was to be terminated
tasks that need to be cleaned up and

89
00:09:25,530 --> 00:09:29,550
when the scheduler is doing with these
tasks it maintains metadata for an

90
00:09:29,550 --> 00:09:34,880
executing task in a task control blocker
TCB and when the scheduler is actually

91
00:09:34,880 --> 00:09:38,530
went when a task is running the
scheduler will set a pointer to the GCB

92
00:09:38,530 --> 00:09:41,079
of the currently executing task

93
00:09:41,080 --> 00:09:47,000
antes de Weert saw that there's a a
single system heat that shared by all

94
00:09:47,000 --> 00:09:51,440
tasks and the colonel and lightweight I
P also maintains its own seat where

95
00:09:51,440 --> 00:09:56,110
allocates memory for inbound packet data
data structures for tracking network

96
00:09:56,110 --> 00:10:00,160
connections and so on and there's also a
system stack and that's the stack that's

97
00:10:00,160 --> 00:10:05,920
used when the system initially boots
that's the stock were that's where the

98
00:10:05,920 --> 00:10:10,500
main functions stack frame lives for
example and that's also used by

99
00:10:10,500 --> 00:10:11,640
interrupt handler

100
00:10:11,640 --> 00:10:18,400
so we mention the schedule a little bit
about context switching real systems

101
00:10:18,400 --> 00:10:21,709
they're always going to have multiple
tasks at the very least we're gonna have

102
00:10:21,710 --> 00:10:25,770
a server network thread that's
communicating with the network and

103
00:10:25,770 --> 00:10:31,750
always has an idle task that runs when
no other tasks are able to execute and

104
00:10:31,750 --> 00:10:36,460
scheduler handles context switching and
when it's switching contacts between

105
00:10:36,460 --> 00:10:41,000
tasks what it will do is first of all
the register state for the executing

106
00:10:41,000 --> 00:10:45,690
task including the program counter and
pushes it onto the stack for that task

107
00:10:45,690 --> 00:10:50,380
and then it updates the TCB to keep
track of ok where is the top of the

108
00:10:50,380 --> 00:10:55,660
stack for this task now after I pushed
all the execution state onto it and then

109
00:10:55,660 --> 00:11:00,170
it kicks ass to run and the reverse
process it restores the state including

110
00:11:00,170 --> 00:11:05,790
the program counter offer that a stack
and then what citron so to see this

111
00:11:05,790 --> 00:11:11,329
visually here again we have this example
of the Asura task and executing parse

112
00:11:11,330 --> 00:11:16,060
URL if you look over to the right
there's the TCB for this task and you

113
00:11:16,060 --> 00:11:22,439
know we can quickly go through the
entries in this TV so the first entry is

114
00:11:22,440 --> 00:11:26,610
tracking the top of the stack and she
disappointing actually into the middle

115
00:11:26,610 --> 00:11:30,950
of the stock for this task and that's
the value that was the top of stack when

116
00:11:30,950 --> 00:11:36,690
the task is scheduled for since then the
stock has grown there's list the

117
00:11:36,690 --> 00:11:42,570
scheduler uses 24 entries that the
scheduler uses to track information

118
00:11:42,570 --> 00:11:48,660
about the task in various lists a
priority and extract which that's the

119
00:11:48,660 --> 00:11:55,520
beginning of this tax the region of
memory continuous tastic in memory or

120
00:11:55,520 --> 00:12:01,370
you could think of it as the women for
for this for the stack for this task on

121
00:12:01,370 --> 00:12:02,950
their last name

122
00:12:02,950 --> 00:12:06,180
of these priority that's also used for
scheduling and a runtime counter that's

123
00:12:06,180 --> 00:12:12,689
used for tracking performance statistics
Dr context switching it happened we see

124
00:12:12,690 --> 00:12:17,780
that we've pushed all the the execution
state of the task onto the stack updated

125
00:12:17,780 --> 00:12:22,329
top with top of the stack so the
scheduler knows where where the state of

126
00:12:22,330 --> 00:12:31,750
lives and the runtime counter has also
changed because additional tax talk

127
00:12:31,750 --> 00:12:41,500
about the artists like we saw that three
times are organized a single so less

128
00:12:41,500 --> 00:12:49,430
efficient find regional peace in Sri
Lanka starting the Legion strange ones

129
00:12:49,430 --> 00:12:56,120
each memory socket her stint in size

130
00:12:56,120 --> 00:13:04,400
next chance and uses first outpatient
strategy so it walks you find that the

131
00:13:04,400 --> 00:13:11,750
next and also as the unused part of that
show back in 20 write a new check into

132
00:13:11,750 --> 00:13:20,380
the unused portion and good music and
memories 34 for most of the season

133
00:13:20,380 --> 00:13:29,410
johnson said he got two adjacent regions

134
00:13:29,410 --> 00:13:37,829
supports multiple API's programmers need
to be the last there's the neck on media

135
00:13:37,830 --> 00:13:48,510
and I mentioned earlier it's very simple

136
00:13:48,510 --> 00:13:54,960
the way works has been driven clinton's
registers registered handler that's all

137
00:13:54,960 --> 00:14:01,980
no relevance occur for argument sake and
in the case of UDP and where the

138
00:14:01,980 --> 00:14:07,110
signature of the function looks like
this and if you look at the third

139
00:14:07,110 --> 00:14:14,880
argument is a pointer to people that
actually allows landlords to access so

140
00:14:14,880 --> 00:14:30,810
that's how we actually did as I
mentioned like a manager and he lets us

141
00:14:30,810 --> 00:14:34,900
has some features that when I first
heard about them I thought ok maybe this

142
00:14:34,900 --> 00:14:40,079
is some sort of explanation one of the
things that supports his stack overflow

143
00:14:40,080 --> 00:14:46,680
detection ok some kind of Canary carry
implementation it turns out it doesn't

144
00:14:46,680 --> 00:14:52,989
have service security purpose the system
will halt if it detects Stack Overflow

145
00:14:52,990 --> 00:14:57,710
and it's not meant to detect overflow
offers that have been allocated on the

146
00:14:57,710 --> 00:15:04,290
stack the way it works says if we look
here we have the stack region for a task

147
00:15:04,290 --> 00:15:10,280
is going downwards and the scheduler
will perform up to two chaps after a

148
00:15:10,280 --> 00:15:12,500
task has been suspended

149
00:15:12,500 --> 00:15:15,530
check of the stack pointer has gone
beyond the beginning of that stock

150
00:15:15,530 --> 00:15:19,270
region in memory limit of the stack we
can see that on the bottom it's seen as

151
00:15:19,270 --> 00:15:24,930
you know stack pointer points beyond
that limit and also writes a kind of a

152
00:15:24,930 --> 00:15:29,760
canary value at the beginning of this
memory region and will compare that to

153
00:15:29,760 --> 00:15:34,650
expected sequence of bytes to see if it
was overridden at some point if the

154
00:15:34,650 --> 00:15:41,490
stock grew into this canary area while
the task was executing so we see if we

155
00:15:41,490 --> 00:15:45,890
were if we were able to overflow a stack
allocated buffer somewhere in the middle

156
00:15:45,890 --> 00:15:49,030
of this tax will be riding towards
higher dresses in neither of these

157
00:15:49,030 --> 00:15:55,140
checks were detected so it's not doesn't
give us doesn't buy anything in terms of

158
00:15:55,140 --> 00:16:01,310
security I mention a few artists
supports the MPU

159
00:16:01,310 --> 00:16:06,989
John cortex m3 and what this allows you
to do is you can create restricted tasks

160
00:16:06,990 --> 00:16:11,830
and define memory regions up to three as
well as the the stock for that

161
00:16:11,830 --> 00:16:15,600
particular task and then few ensures
that the task can only write to those

162
00:16:15,600 --> 00:16:21,060
memory regions the OS doesn't implement
any controls to prevent restricted task

163
00:16:21,060 --> 00:16:25,199
from reading a regular task so you know
restricted tasks

164
00:16:25,200 --> 00:16:31,180
restricted task you could ask escalate
privileges by creating a privilege task

165
00:16:31,180 --> 00:16:37,870
and doing the rest of what everyone is
doing at that point so the MPU support

166
00:16:37,870 --> 00:16:42,670
its really intended to protect those on
system system and its not review

167
00:16:42,670 --> 00:16:49,219
security concerns so so we've seen some
bugs and now they have some sense of the

168
00:16:49,220 --> 00:16:52,770
internals of the operating system I'm
sure a lot of guys are already trying to

169
00:16:52,770 --> 00:16:57,680
connect the two so somehow I think like
an attacker will talk about 10 bilities

170
00:16:57,680 --> 00:17:01,729
and specifically focused on stack buffer
overflows because they tend to be common

171
00:17:01,730 --> 00:17:10,819
in the code bases when you're reviewing
source code and you spot a potential bug

172
00:17:10,819 --> 00:17:15,670
it's only the first step at that point
you need to investigate and in practice

173
00:17:15,670 --> 00:17:20,390
that means deploying these offer on real
hardware developing payloads and see if

174
00:17:20,390 --> 00:17:24,020
you could trigger the vulnerability
remotely and in my case I need a lot of

175
00:17:24,020 --> 00:17:26,319
hardware in the process

176
00:17:26,319 --> 00:17:36,560
see some of it in the picture here and
yeah it's it's tough to type in terms of

177
00:17:36,560 --> 00:17:40,899
hardware that work particularly well for
me these samples

178
00:17:40,900 --> 00:17:50,970
with the same i GTG blogger really work
well to build software using gcc

179
00:17:50,970 --> 00:18:07,370
GDP I really didn't have to rely on each
60 site deal next year's pages 86 ed

180
00:18:07,370 --> 00:18:14,050
with the secretary lynn pictures here
allows you to detail but a warning when

181
00:18:14,050 --> 00:18:25,870
one student said it's very painful to
see ya so

182
00:18:25,870 --> 00:18:31,629
proposals are now that we know a little
bit more about internal operating system

183
00:18:31,630 --> 00:18:37,090
we know that we're redirecting execution
in the context Stack Overflow that's

184
00:18:37,090 --> 00:18:41,379
happening that's happening in the
context of the task and we see on the

185
00:18:41,380 --> 00:18:47,900
right here to function of a long now
work is going to turn dressed and ready

186
00:18:47,900 --> 00:18:56,190
to execute with you know unlike simpler
embedded systems that asked that the

187
00:18:56,190 --> 00:19:02,290
task of Honor bility has dedicated staff
so that stock isn't being shared by

188
00:19:02,290 --> 00:19:08,010
interrupt handlers so we have sort of an
undisturbed space for exploitation I

189
00:19:08,010 --> 00:19:11,930
wasn't sure if this is the case but
probably not surprised scheduler eats

190
00:19:11,930 --> 00:19:19,050
everything running alone execute so you
know I'm asking robert is actually sweet

191
00:19:19,050 --> 00:19:23,940
asian and pacific me an army can put the
people that were executing anywhere

192
00:19:23,940 --> 00:19:28,910
beyond a stock but it can also be
elsewhere in memory because the system

193
00:19:28,910 --> 00:19:33,580
and everything is executed

194
00:19:33,580 --> 00:19:38,810
so the problem we're trying to solve you
know now that we have the ability to

195
00:19:38,810 --> 00:19:43,080
execute payload in practice the appeal
is going to be quite small

196
00:19:43,080 --> 00:19:46,149
you know it's going to be subject to the
limits of the particular vulnerability

197
00:19:46,150 --> 00:19:49,330
and we're looking at and we want full
remote code execution we really want to

198
00:19:49,330 --> 00:19:55,090
demonstrate that this is a serious issue
so there's two general questions that we

199
00:19:55,090 --> 00:19:59,429
have to answer that one always has to
answer in this context is one where we

200
00:19:59,430 --> 00:20:07,040
gonna redirect execution and with three
artists in particular we need to clean

201
00:20:07,040 --> 00:20:10,480
things up when you're done we need to
make sure that the task that's being

202
00:20:10,480 --> 00:20:16,450
exploited keeps functioning and the
reason is that task for example could be

203
00:20:16,450 --> 00:20:21,860
the thread that handles network
communication so that has doesn't

204
00:20:21,860 --> 00:20:27,729
survive then the system is inaccessible
anymore but in practice in either of

205
00:20:27,730 --> 00:20:34,220
these things are hard so we'll talk
about execution redirection first and

206
00:20:34,220 --> 00:20:44,010
simplest solution can often work in
artists are generally allocated when the

207
00:20:44,010 --> 00:20:48,160
system starts and dole in a case to be
allocated unknown location if you're

208
00:20:48,160 --> 00:20:52,230
creating cast dynamically and it's being
out in the heat then you may not know

209
00:20:52,230 --> 00:20:57,670
where that stack region falls for the
task but that's right much rarer in

210
00:20:57,670 --> 00:21:01,170
practice these tasks are generally
created right when the system starts up

211
00:21:01,170 --> 00:21:07,210
so we know exactly where the stock for a
given task will fall in memory and

212
00:21:07,210 --> 00:21:12,180
furthermore for looking at other bility
because these systems are simpler we

213
00:21:12,180 --> 00:21:16,110
also know exactly where r inbound
payload where the data from the request

214
00:21:16,110 --> 00:21:20,310
that's actually triggering the ball
lives on that staff so

215
00:21:20,310 --> 00:21:28,280
inaccurate me know exact address and
execute a situation where we don't know

216
00:21:28,280 --> 00:21:30,230
exactly where the deal is unstoppable

217
00:21:30,230 --> 00:21:37,040
multiple firmware version has multiple
code past we still have a window

218
00:21:37,040 --> 00:21:38,690
dressing is quite small

219
00:21:38,690 --> 00:21:46,660
where we know the feelin so no need to
budget ninety style will not slip

220
00:21:46,660 --> 00:21:48,640
something like that

221
00:21:48,640 --> 00:21:59,310
assuming the architecture allows iraq
has a better approach in a lot of

222
00:21:59,310 --> 00:22:03,700
situations in practice and we have a
register that you know references that

223
00:22:03,700 --> 00:22:07,680
imbalance payload that triggered the
vulnerability then we can use dropped to

224
00:22:07,680 --> 00:22:09,380
manipulate the register

225
00:22:09,380 --> 00:22:13,020
led addressing the register and then
call it so then we don't have to make

226
00:22:13,020 --> 00:22:18,090
assumptions or reason about where that
people's lives in memory is just a side

227
00:22:18,090 --> 00:22:28,120
effect of that it contains a reference
to be mentioning robbins because we're

228
00:22:28,120 --> 00:22:32,989
not trying to buy passing on the
stacking certainly we use dropped

229
00:22:32,990 --> 00:22:37,830
because the gadget addresses are
predictable in cases where he appealed

230
00:22:37,830 --> 00:22:48,320
against me were using rock we can
trampoline to argue that you can even

231
00:22:48,320 --> 00:22:49,260
use

232
00:22:49,260 --> 00:23:04,629
iraqis him to perform their hits and
we'll see an example gives us some other

233
00:23:04,630 --> 00:23:05,630
options

234
00:23:05,630 --> 00:23:12,910
get some help from the operating system
we have some specific actions codes for

235
00:23:12,910 --> 00:23:15,720
free or other uses static

236
00:23:15,720 --> 00:23:22,330
Ltd such as a little more so that gives
us additional locations where we may be

237
00:23:22,330 --> 00:23:27,780
able to the data and in some cases even
overflow them so this is an overflow of

238
00:23:27,780 --> 00:23:32,399
these people crammed statically out each
structure and you see here we cannot

239
00:23:32,400 --> 00:23:39,190
overwrite mean weight second and so we
have the 360 and overwriting them

240
00:23:39,190 --> 00:23:45,710
doesn't doesn't also little bit
troubling we can write right into the

241
00:23:45,710 --> 00:23:50,060
heat but in practice it can be hard to
take advantage of that but this is one

242
00:23:50,060 --> 00:23:55,060
of the other vulnerabilities that I just
closed also mentioned we talked about

243
00:23:55,060 --> 00:23:59,030
lightweight IDE having its own memory
manager you look at driver

244
00:23:59,030 --> 00:24:04,300
implementations or three are constantly
way you'll see that rain buffers are

245
00:24:04,300 --> 00:24:11,790
used in all our key when school starts
the sequence of regions of memories

246
00:24:11,790 --> 00:24:13,300
restoring inbound

247
00:24:13,300 --> 00:24:21,610
dreams and these are also falls on
predictable sequence driver specific but

248
00:24:21,610 --> 00:24:30,409
if you look at how these these addresses
tend to be predictable so we can do kind

249
00:24:30,410 --> 00:24:36,040
of very end of spring we just send lots
of traffic to the device and thought

250
00:24:36,040 --> 00:24:37,220
this buffer

251
00:24:37,220 --> 00:24:43,720
and then jumped you a Merry option if
nothing else as possible and other

252
00:24:43,720 --> 00:24:46,799
clients are communicating with the
device then this may not be successful

253
00:24:46,799 --> 00:24:52,690
the time just mentioned it as an option
when nothing else works sorry there were

254
00:24:52,690 --> 00:24:58,059
really have a lot of possibilities over
200 I can't imagine situation where you

255
00:24:58,059 --> 00:25:04,450
wouldn't be able to take advantage of
the attacker the other question here is

256
00:25:04,450 --> 00:25:08,510
what we gonna do when we're done we
don't want to break the target asked his

257
00:25:08,510 --> 00:25:12,940
thread and we need to be able to
continue communicating with the device

258
00:25:12,940 --> 00:25:17,510
in a practice room not only overriding a
return address but were blowing away

259
00:25:17,510 --> 00:25:20,809
register that were preserved for the
caller of the function that has the

260
00:25:20,809 --> 00:25:25,690
vulnerability you can spend a lot of
time on piecing together not only a safe

261
00:25:25,690 --> 00:25:30,080
place to return when you're done with
expedition but also safe values for

262
00:25:30,080 --> 00:25:35,220
those registers that you blew away and
because the systems are simpler that's

263
00:25:35,220 --> 00:25:38,679
probably gonna work out for you but
there is a better solution that is just

264
00:25:38,679 --> 00:25:45,110
to effectively restart the task and in
case of lightweight I P we're talking

265
00:25:45,110 --> 00:25:49,379
about like when I P with callbacks you
can restart the tcp/ip threaten to

266
00:25:49,380 --> 00:25:56,130
return to the entry point for that task
function and this is using a reference

267
00:25:56,130 --> 00:26:00,030
to statically allocated data structure
so it just keeps functioning there's no

268
00:26:00,030 --> 00:26:04,760
disruption in network indications this
this is gonna memory intermediate

269
00:26:04,760 --> 00:26:08,408
functions allocated memory gonna know
where that is not going to be able to

270
00:26:08,409 --> 00:26:14,049
free it and you want to unroll the stack
when you do this as it would be unrolled

271
00:26:14,049 --> 00:26:19,049
when you first started task but this
works in practice

272
00:26:19,049 --> 00:26:23,399
I'll briefly mention other bug classes
we are he saw a static buffer overflow

273
00:26:23,399 --> 00:26:27,840
and the impact you know in a case it's
going to depend on what falls after that

274
00:26:27,840 --> 00:26:32,549
started before and we saw we can right
into the deep so you know why that's

275
00:26:32,549 --> 00:26:37,200
troubling in practice and when I looked
at it really easy to get a job so I

276
00:26:37,200 --> 00:26:48,769
thought still a good place to the deal
it's a really interesting topic but in

277
00:26:48,769 --> 00:26:58,210
the interest of time he joins us in my
case don't know haven't worked out all

278
00:26:58,210 --> 00:27:11,320
looking example and ends in this context
so in terms of our objectives in this

279
00:27:11,320 --> 00:27:18,100
example shows an overflowing call that
country artists on an ARM Cortex and

280
00:27:18,100 --> 00:27:23,840
we're gonna go from executing a small
stature in the original request or

281
00:27:23,840 --> 00:27:31,980
nearby to be able to execute arbitrary
code and our goal here is not to

282
00:27:31,980 --> 00:27:33,739
destabilize the system

283
00:27:33,739 --> 00:27:41,559
target servers and we're going to use
the facilities to see so this allows us

284
00:27:41,559 --> 00:27:51,809
to not write a lot of cool cheap to give
you an outline of the approach will

285
00:27:51,809 --> 00:27:56,139
exploit the vulnerability to get code
execution and we're gonna executed

286
00:27:56,139 --> 00:27:58,600
staging

287
00:27:58,600 --> 00:28:02,539
staging Taylor right second stage alone
somewhere

288
00:28:02,539 --> 00:28:10,529
area memory where we'll start then we
need to hook into the system still a

289
00:28:10,529 --> 00:28:14,480
network of the same ones

290
00:28:14,480 --> 00:28:29,860
and a call back and listen and execute
and I'll turn you for that particular

291
00:28:29,860 --> 00:28:40,590
bond mentioned earlier and that is in
practice registered references are we

292
00:28:40,590 --> 00:28:48,980
look at our 10 bytes in size in its
battle with and the bites a follower

293
00:28:48,980 --> 00:29:00,169
actually so instead of hard coating the
address of trying to reason with or not

294
00:29:00,169 --> 00:29:09,740
that's a reliable waging what we want to
do is used to branch to the address

295
00:29:09,740 --> 00:29:18,929
unfortunately on the ARM Cortex you'll
see today so we're adding horror to walk

296
00:29:18,929 --> 00:29:28,390
past the size and also have to add one
that's because the leasing addresses

297
00:29:28,390 --> 00:29:34,740
names inside for branching always has to
be said and that's actually really

298
00:29:34,740 --> 00:29:43,200
aspect of the cortex and I'm like or
text me or you can simply gadget

299
00:29:43,200 --> 00:29:50,020
branches in stock corner when you're
both their first ever register were

300
00:29:50,020 --> 00:29:55,450
using so it gets a little more
complicated so what we'll do is we're

301
00:29:55,450 --> 00:30:02,320
going to use dropped to 22 are arrested
and then branch and for this particular

302
00:30:02,320 --> 00:30:05,480
vulnerability it also turns out that it
didn't have a lot of space to work with

303
00:30:05,480 --> 00:30:12,700
I only had forty eight bytes to build
this change while the dresses so

304
00:30:12,700 --> 00:30:21,650
constrained in terms of size after we
just rock scene and executed restart

305
00:30:21,650 --> 00:30:32,510
deep breath a little more detail as I
said we want to make our 1428 increment

306
00:30:32,510 --> 00:30:44,820
and then branch to the system image
around campaign so much from you but I'm

307
00:30:44,820 --> 00:30:50,030
surprised there are no god but as always
the way we get there is no

308
00:30:50,030 --> 00:30:55,980
straightforward so far so there wasn't a
simple gadget just a movie I want to

309
00:30:55,980 --> 00:31:01,480
take advantage of these gadgets looking
for the last four gadgets to were using

310
00:31:01,480 --> 00:31:11,280
here that are adding orator 290 which
contains an artist I wanted to get some

311
00:31:11,280 --> 00:31:16,418
of the few gadgets like now that would
actually climb wasn't so the first step

312
00:31:16,419 --> 00:31:28,320
was one in his first three gadgets and
and actually required to register as it

313
00:31:28,320 --> 00:31:32,870
should say so what's the register has
been moved into our two things get

314
00:31:32,870 --> 00:31:41,610
simpler and we can use the the Ghajini
the second section to add more to it and

315
00:31:41,610 --> 00:31:47,389
then were able to branch to branch into
our payload then we perform the rest of

316
00:31:47,390 --> 00:31:49,520
the expectation

317
00:31:49,520 --> 00:31:56,940
so this solve the first problem in a
general way and I were able to execute

318
00:31:56,940 --> 00:32:02,020
our stager but we need to write the code
for a call back that's also part of a

319
00:32:02,020 --> 00:32:07,040
robust somewhere in memory where it's
not going to be disturbed and we can use

320
00:32:07,040 --> 00:32:13,520
mine copy to do this to the OS's makes
it easy and there's there's more than

321
00:32:13,520 --> 00:32:16,870
one place where you can put it on my
trip was to put it past the end of the

322
00:32:16,870 --> 00:32:20,750
systems that before so this is unused
real memory where nothing will touch it

323
00:32:20,750 --> 00:32:26,720
we could allocate memory in the store
there and also would be disturbed

324
00:32:26,720 --> 00:32:34,250
we use lightweight I peacekeepers while
allocating memory there and we can even

325
00:32:34,250 --> 00:32:38,550
put it in the stack of the exploited a
so that's the beginning of the stock in

326
00:32:38,550 --> 00:32:42,680
memory that limit next act if we know
that that has doesn't get close to that

327
00:32:42,680 --> 00:32:46,860
then we also have some space where we
could put in there might be more useful

328
00:32:46,860 --> 00:32:54,889
in cases are you using the MPU and you
can if you need someplace to put it I

329
00:32:54,890 --> 00:33:04,850
should mention on their X 1066 X we have
fewer options that requires that being

330
00:33:04,850 --> 00:33:11,389
executed called instruction RAM so in
that case we need to put this out there

331
00:33:11,390 --> 00:33:18,899
and use rock before we can hook it into
the operating system

332
00:33:18,899 --> 00:33:23,928
so what we've written somewhere in
memory we need to wire it in comics are

333
00:33:23,929 --> 00:33:28,450
the simplest way to do this and it's
ideal because we're not going to

334
00:33:28,450 --> 00:33:31,089
interfere with scheduling of any tasks

335
00:33:31,089 --> 00:33:34,928
we're not gonna starve other cast in the
system we don't need to think about the

336
00:33:34,929 --> 00:33:39,200
problem of starvation so it makes it
really simple in the case of you P it's

337
00:33:39,200 --> 00:33:45,489
really only three calls so we create a
protocol block for UDP we find he's

338
00:33:45,489 --> 00:33:56,909
really what wires all that we see in
this town like we did when we have three

339
00:33:56,909 --> 00:34:11,200
calls function at this allows us to run
and you can also do this is now

340
00:34:11,199 --> 00:34:19,939
connection just chose this particular
example but we do have alternatives

341
00:34:19,940 --> 00:34:23,609
because call ducks aren't always
supported depends on how the the the

342
00:34:23,609 --> 00:34:27,558
firmware for the system has been built
so called on an option we can create a

343
00:34:27,559 --> 00:34:32,970
home task and once again the operating
system makes it simple so we can create

344
00:34:32,969 --> 00:34:38,839
and in a case are payload would have to
do a little more work to you know set up

345
00:34:38,839 --> 00:34:45,589
a worsening socket connection but at
that point we have attached schedule

346
00:34:45,589 --> 00:34:51,250
then run that actually execute the code
in this case starvation is a

347
00:34:51,250 --> 00:34:57,349
consideration the schedules always gonna
run the next available task that has the

348
00:34:57,349 --> 00:35:02,420
highest priority so we need to consider
starvation and in practice that means

349
00:35:02,420 --> 00:35:08,750
making the task block for a while as a
while because you need the particular

350
00:35:08,750 --> 00:35:11,530
system

351
00:35:11,530 --> 00:35:22,040
yeah conceptually this isn't too
different from the calls were using

352
00:35:22,040 --> 00:35:32,420
listen for incoming packets and execute
them so he has are seeing something

353
00:35:32,420 --> 00:35:40,890
small that wires to be able to text you
whenever we don't wanna run just need

354
00:35:40,890 --> 00:35:45,390
traffic that his device so we need to
mark are packaged in some way and the

355
00:35:45,390 --> 00:35:54,310
simple way to do this is just that
indicates to the NBC 8 2012 callback

356
00:35:54,310 --> 00:36:04,670
season has this magic and again on the X
16 because we can execute and certain

357
00:36:04,670 --> 00:36:10,950
region and we have forced

358
00:36:10,950 --> 00:36:17,290
which implement more complicated logic
meet you in the code so we need sequence

359
00:36:17,290 --> 00:36:18,640
numbers or something

360
00:36:18,640 --> 00:36:31,950
execution and and require the subsequent
pack was gonna allow us to larger

361
00:36:31,950 --> 00:36:41,689
islands and implementation can be quite
small so here's the instructions just to

362
00:36:41,690 --> 00:36:46,950
give you an example and I pulled this
off my system so we can see that this is

363
00:36:46,950 --> 00:36:52,799
Ryan passes stock systems technology
which is Jul 01 so real so the first

364
00:36:52,800 --> 00:37:03,050
thing you are magic and we put that into
another package and the instructions of

365
00:37:03,050 --> 00:37:06,810
person that does deserve our three
in-store the return address

366
00:37:06,810 --> 00:37:12,170
and then we access our to that second or
third party which is a pointer to the

367
00:37:12,170 --> 00:37:23,250
packet access deep the payload pointer
there actually and the next step

368
00:37:23,250 --> 00:37:27,910
instructions this is a logical is really
happened so the first thing we do is

369
00:37:27,910 --> 00:37:31,060
read them from from the beginning

370
00:37:31,060 --> 00:37:43,880
regions were reading from 2011 starring
Irwan we then read and we also

371
00:37:43,880 --> 00:37:52,820
increments are zero byte files are ready
to branch to the magic destruction there

372
00:37:52,820 --> 00:38:03,040
is doing a comparison to see those not
otherwise see 20 that's gonna actually

373
00:38:03,040 --> 00:38:10,160
executed and then there's clean up their
stores 5 instructions at the end that

374
00:38:10,160 --> 00:38:16,490
actually before so we get back on
pointer to pee wee construct the address

375
00:38:16,490 --> 00:38:23,759
of people 341 have to do that too big to
do anything or instruction and we

376
00:38:23,760 --> 00:38:30,500
actually very good citizens here and
once you're done freeing the package

377
00:38:30,500 --> 00:38:43,890
then we return and we can go on so what
can we do with this is not leavin system

378
00:38:43,890 --> 00:38:49,129
memory so around after the three cents
but we can write a blast in a permanent

379
00:38:49,130 --> 00:38:52,539
but the fact is gonna resent

380
00:38:52,539 --> 00:39:17,619
news only because there won't be any
evidence of cancer in traffic and go but

381
00:39:17,619 --> 00:39:24,979
conclusions and recommendations

382
00:39:24,979 --> 00:39:30,410
it's hard not to be a little pessimistic
here in 2016 here we are telling

383
00:39:30,410 --> 00:39:34,848
developers that they need to manage
memories safely in C and like I said

384
00:39:34,849 --> 00:39:40,199
there's an astonishing amount of code
for our toss one platform but at least

385
00:39:40,199 --> 00:39:46,140
half a dozen other platforms have
developers actively writing code in C so

386
00:39:46,140 --> 00:39:53,660
we're looking at many more years of
memory corruption for these softer and

387
00:39:53,660 --> 00:39:56,959
because these devices are softer it's
important to isolate them you don't

388
00:39:56,959 --> 00:40:02,249
wanna have them co-existing with more
sensitive systems put them on their own

389
00:40:02,249 --> 00:40:08,238
part of the network security
professionals we need to raise awareness

390
00:40:08,239 --> 00:40:12,249
make sure that people understand the
consequences of bugs like these

391
00:40:12,249 --> 00:40:18,649
catastrophic we need to audit this
technology and and help people fix them

392
00:40:18,650 --> 00:40:25,799
and they get pics and there's an
opportunity for vendors to implement

393
00:40:25,799 --> 00:40:29,909
additional protections for these
embedded systems with three artists we

394
00:40:29,909 --> 00:40:37,769
saw having canaries her integrity checks
taking advantage of executables memory

395
00:40:37,769 --> 00:40:43,640
support it and randomizing Liana memory
these would be fantastic things that

396
00:40:43,640 --> 00:40:50,129
would make an attacker's job harder and
the operating system is open source so

397
00:40:50,130 --> 00:40:55,740
any one of us could do this too

398
00:40:55,740 --> 00:41:10,160
so conclusions I mentioned there is
easily a dozen other platforms out there

399
00:41:10,160 --> 00:41:17,230
more tcp/ip implementations for anyone
who's interested so I encourage people

400
00:41:17,230 --> 00:41:26,980
just to see what's out there and try to
have only scratched the surface of the

401
00:41:26,980 --> 00:41:33,580
one of six and eight years Phu 66 hinted
at it briefly in the talk there's

402
00:41:33,580 --> 00:41:43,880
additional challenges when it comes to
their future is really interesting and

403
00:41:43,880 --> 00:41:49,840
I'm planning a white paper so far in
there and talk to me after the talk if

404
00:41:49,840 --> 00:41:59,040
you're curious people to think of us
from NCC group he suggested area got me

405
00:41:59,040 --> 00:42:02,320
interested in this research Stevan
Ridley and Steven Lawler have an

406
00:42:02,320 --> 00:42:08,490
excellent training found that part of
the talking to check out that training

407
00:42:08,490 --> 00:42:16,049
all the reference research and
definitely anyone and folks who reviewed

408
00:42:16,050 --> 00:42:20,880
the talk with me and give me feedback
and organizers for putting the plan

409
00:42:20,880 --> 00:42:31,480
together and most of all thanks everyone
for coming

410
00:42:31,480 --> 00:42:50,490
and that's actually a few minutes for
questions which questions

411
00:42:50,490 --> 00:43:10,729
so we don't need to I ram it simply
don't have to call ya in the first half

412
00:43:10,730 --> 00:43:34,180
before you actually magic value matches
copy it over and execute

413
00:43:34,180 --> 00:43:41,410
it's hard as you can so so it would be
emulating an ARM platform so so that

414
00:43:41,410 --> 00:43:45,529
handy but in terms of the funding that's
that's one hurdle that you're gonna he

415
00:43:45,530 --> 00:43:50,680
added that if you're looking at software
for MIPS or four the SP 8266 there

416
00:43:50,680 --> 00:43:55,120
really isn't there is an alternative but
for the SBA 266 there's no alternative

417
00:43:55,120 --> 00:44:00,690
and the other thing is that because it's
sensitive to memory layout and so on

418
00:44:00,690 --> 00:44:04,670
you made your investigation in an
unrelated environment and then find the

419
00:44:04,670 --> 00:44:09,960
details are different so there's a
tradeoff there but yet you would be the

420
00:44:09,960 --> 00:44:21,380
way to go

421
00:44:21,380 --> 00:44:23,870
and definitely hit me up if you wanted
him

