1
00:00:00,000 --> 00:00:05,520
are one liners I would like to throw
some of this stuff but I'm gonna throw

2
00:00:05,520 --> 00:00:14,299
it into the audience if you would like
swag so as always we have a lot of stuff

3
00:00:14,299 --> 00:00:20,160
going on there's a lot of really good
training going on if you haven't had a

4
00:00:20,160 --> 00:00:24,830
head over to the lockpick village in a
highly suggested there are some amazing

5
00:00:24,830 --> 00:00:29,979
art being treated for hackers for
charity and they're doing that are live

6
00:00:29,980 --> 00:00:33,760
on the fly some beautiful prints are
also available for sale and all of that

7
00:00:33,760 --> 00:00:41,899
goes directly directorship charity so
user wants some stuff here

8
00:00:41,899 --> 00:00:49,530
trust me it does work you have to take
the little thing off the battery

9
00:00:49,530 --> 00:01:03,630
somebody else that listens but can't
catch

10
00:01:03,630 --> 00:01:10,190
so this is a really big room if you have
questions there is a heckler migrate

11
00:01:10,190 --> 00:01:14,030
middle or come all the way up to the
front these guys will be great for the

12
00:01:14,030 --> 00:01:20,070
to answer your whatever questions you
have no you all got us a ball we r shook

13
00:01:20,070 --> 00:01:25,800
on the only conference with balls those
balls and not stress balls you can

14
00:01:25,800 --> 00:01:31,560
relieve your stress if you're seeing a
presenter but there are other prisoners

15
00:01:31,560 --> 00:01:36,380
are going on if you see a presenter that
you disagree with the reason you have

16
00:01:36,380 --> 00:01:41,390
those balls and so you can take them and
check them at the presenter it's some of

17
00:01:41,390 --> 00:01:46,350
its hard to stand up and and call out
somebody and say I don't believe you I

18
00:01:46,350 --> 00:01:51,190
think what you just said is bullshit
that's why we give you can stand up and

19
00:01:51,190 --> 00:02:01,229
suck that and the fact that you don't
agree I'm sorry but if you receive back

20
00:02:01,229 --> 00:02:11,068
so the last thing I have my last year's
shirt be back actually conduct or if you

21
00:02:11,068 --> 00:02:15,500
have any feedback whether you really
love presenter whether you think that we

22
00:02:15,500 --> 00:02:19,090
are doing something really great if you
think we have we're doing something we

23
00:02:19,090 --> 00:02:24,290
need to change please let us know we
take all of that feedback to heart and

24
00:02:24,290 --> 00:02:28,040
we try and respond to each and every
email that we get and communicate with

25
00:02:28,040 --> 00:02:31,400
each of you because we want to make this
the best conference that we can so

26
00:02:31,400 --> 00:02:35,630
please send emails to feedback its
Macondo door and we will read and

27
00:02:35,630 --> 00:02:41,840
respond to every single one of them are
not automated spam and will try we want

28
00:02:41,840 --> 00:02:46,770
to make this contest best as possible so
without will toss my last sure to

29
00:02:46,770 --> 00:02:51,800
somebody else it wasn't I and then
introduced Sarah and John will be

30
00:02:51,800 --> 00:02:55,810
talking to us about suffered by networks

31
00:02:55,810 --> 00:03:05,500
good morning everybody ok glad you all
made it out after the the crazy crazy

32
00:03:05,500 --> 00:03:10,760
evening of frivolity last night in here
looks like they clean it up pretty well

33
00:03:10,760 --> 00:03:15,239
first off just a disclaimer I just
noticed the screens are are actually in

34
00:03:15,239 --> 00:03:19,370
front of us we are going to be needing
the laser pointer for the demonstration

35
00:03:19,370 --> 00:03:24,790
portion of it and so the cameras are
back there if you do not want to be in a

36
00:03:24,790 --> 00:03:28,170
cameraman be probably standing right
about here so that I can laser point to

37
00:03:28,170 --> 00:03:33,369
the screen so if you do not want your
picture taken you know probably steer

38
00:03:33,370 --> 00:03:37,130
clear of these few seats right here
because because you may end up being in

39
00:03:37,130 --> 00:03:43,010
the background something I know how they
deal with cameras here welcome it's

40
00:03:43,010 --> 00:03:46,640
really good to be here we're talking
about something very near and dear to

41
00:03:46,640 --> 00:03:53,069
our hearts Defined Networking just a
little introduction on on who we are we

42
00:03:53,069 --> 00:03:57,399
are both very very passionate nerds that
focused on the network side of things we

43
00:03:57,400 --> 00:04:02,209
love everything to do with networking
she handles a lot more of the building

44
00:04:02,209 --> 00:04:07,730
and I handle a lot more of the you know
securing breaking securing and so that

45
00:04:07,730 --> 00:04:13,988
that's brings up a really good point so
a lot of people here you know nerves

46
00:04:13,989 --> 00:04:18,820
this and that had no fears about
speaking up here this move all people in

47
00:04:18,820 --> 00:04:22,190
the audience that are definitely way
smarter than me actually my greatest

48
00:04:22,190 --> 00:04:27,440
fear is getting in a fight with her on
stage because while we we've research

49
00:04:27,440 --> 00:04:33,460
together very well we do it emits a
violent disagreement so that's that's my

50
00:04:33,460 --> 00:04:36,719
current that's what I'm scared about
second quick note about the shoe balls

51
00:04:36,720 --> 00:04:40,979
we are both very aware our weaknesses
speaking very quickly so we will expand

52
00:04:40,979 --> 00:04:42,710
the use of small balls to in court

53
00:04:42,710 --> 00:04:47,710
encompass if we're talking too fast you
free to let us know because we both do

54
00:04:47,710 --> 00:04:54,450
that a lot especially if I networking so
just start here how many of you have

55
00:04:54,450 --> 00:04:58,630
heard of software networking before
sweet a lot of people how many of you

56
00:04:58,630 --> 00:05:00,719
have actively worked with it

57
00:05:00,720 --> 00:05:05,659
securing building ok look around your
hands up look around there's there's

58
00:05:05,659 --> 00:05:06,190
there's

59
00:05:06,190 --> 00:05:10,210
a few shot rate up a few tentative 'he's

60
00:05:10,210 --> 00:05:13,750
Defined Networking is huge in she's in
going to a second some of the companies

61
00:05:13,750 --> 00:05:18,960
are using it why is it why is there so
little representation here for something

62
00:05:18,960 --> 00:05:22,460
that is that is increasing as you can
see in billions of dollars every year

63
00:05:22,460 --> 00:05:22,930
there

64
00:05:22,930 --> 00:05:27,820
market research is anticipating twelve
billion dollars by 2019 on the

65
00:05:27,820 --> 00:05:30,940
conservative side you can see things
Weiwei greater than that I usually go on

66
00:05:30,940 --> 00:05:35,070
the conservative side and and that's
what they're saying by 2019 so so what

67
00:05:35,070 --> 00:05:38,590
is the reason behind this why who's
using it first of all and why are we

68
00:05:38,590 --> 00:05:41,450
hearing more about it why we're only a
few hands up and we talked about

69
00:05:41,450 --> 00:05:46,860
security within sorry if I networking
well the answer to that is supported by

70
00:05:46,860 --> 00:05:50,210
networking is actually kind of
complicated it's not like setting up a

71
00:05:50,210 --> 00:05:53,989
traditional network which I love doing
it actually requires a little bit more

72
00:05:53,990 --> 00:05:58,420
you need architects coders you need
security people you need not want folks

73
00:05:58,420 --> 00:06:03,010
like us because software-defined
networking have a lot more pieces as you

74
00:06:03,010 --> 00:06:07,440
can see on the screen there are lots of
large large corporations to include an

75
00:06:07,440 --> 00:06:12,469
essay on there are using Afghan and they
have been for years and years on Google

76
00:06:12,470 --> 00:06:16,830
actually develop their own controller
and drop andromeda all of these

77
00:06:16,830 --> 00:06:19,930
companies are using covered by
networking because it's a very powerful

78
00:06:19,930 --> 00:06:23,580
tool and if able to meet the needs of
their large data centers that

79
00:06:23,580 --> 00:06:30,169
traditional networking is just failing
we're trying to bring to light here is

80
00:06:30,169 --> 00:06:33,859
that those large data centers have been
using a while and it is expanding in

81
00:06:33,860 --> 00:06:37,480
getting lower and lower in the stack is
we're gonna show here and how the

82
00:06:37,480 --> 00:06:42,820
amazing capability that it has even for
smaller businesses smaller companies a

83
00:06:42,820 --> 00:06:45,469
few of the solutions that are out there
right now they're they're commercial

84
00:06:45,470 --> 00:06:49,270
open source it really started as almost
an open source community driven project

85
00:06:49,270 --> 00:06:53,729
with a lot of commercial vendor support
a lot of vendor by and so companies like

86
00:06:53,730 --> 00:07:00,230
HP broken Dell have lent engineers to
the SDN project due to essentially help

87
00:07:00,230 --> 00:07:06,120
develop this capability so you can
actually buy hardware switches that have

88
00:07:06,120 --> 00:07:09,810
Sdn built into a nasty and capabilities
open till capabilities we have a network

89
00:07:09,810 --> 00:07:13,380
secular we're going to be using a little
bit later to show to show you guys a few

90
00:07:13,380 --> 00:07:16,040
things answer some questions

91
00:07:16,040 --> 00:07:21,690
but if you don't have you know a lot of
money to pay brocade or pay Dell or HP

92
00:07:21,690 --> 00:07:26,320
to come into your to your workplace and
set it up for you you're gonna need to

93
00:07:26,320 --> 00:07:29,960
do some research and and studying on
your own and a lot of that can be done

94
00:07:29,960 --> 00:07:34,150
through the open source platforms a lot
of the controllers are built on the open

95
00:07:34,150 --> 00:07:38,010
daylight and floodlight platforms are
the two most common controllers that are

96
00:07:38,010 --> 00:07:41,510
out there there's a few others up there
that we listed that are great for her

97
00:07:41,510 --> 00:07:43,870
recent for different purposes

98
00:07:43,870 --> 00:07:47,520
open visa which is a virtual switch that
handles open close you can actually

99
00:07:47,520 --> 00:07:53,580
completely have an entire virtual Sen
inside a single for your own research

100
00:07:53,580 --> 00:07:59,130
study purposes a great tool and then
VMware has and Cisco kind of break their

101
00:07:59,130 --> 00:08:04,460
own flavor of it as especially Cisco
likes to do so

102
00:08:04,460 --> 00:08:07,409
VMware does it because of their
integration with virtual machine some of

103
00:08:07,410 --> 00:08:11,420
the stuff there they need some specific
functionality and Cisco was not happy

104
00:08:11,420 --> 00:08:15,410
with some of the stuff that OpenFlow
protocol had so they rewrote protocol a

105
00:08:15,410 --> 00:08:22,050
bit to fit their needs so what what
actually is Sen we've been talking about

106
00:08:22,050 --> 00:08:23,790
it a lot what what is it

107
00:08:23,790 --> 00:08:27,640
well I know a lot of hands went up but
we're just gonna review a couple things

108
00:08:27,640 --> 00:08:32,720
when is Sdn really extended abstract in
the function of the control plane and

109
00:08:32,720 --> 00:08:36,130
the data plane from a network device
it's moving those in two separate

110
00:08:36,130 --> 00:08:40,960
separate locations logically ok I do
wanna make the distinction that St and

111
00:08:40,960 --> 00:08:43,830
is not the same as network function
virtualization there's a lot of

112
00:08:43,830 --> 00:08:47,700
confusion around when you're doing that
work function virtualization you're

113
00:08:47,700 --> 00:08:51,540
taking in networking devices which are
rather something in your abstracting the

114
00:08:51,540 --> 00:08:55,490
functions of that provide secure network
from the hardware and your virtualizing

115
00:08:55,490 --> 00:09:00,210
that now they are very complementary to
each other and if we can be used to

116
00:09:00,210 --> 00:09:04,340
virtualize your data forwarding plane
devices your switches that are going to

117
00:09:04,340 --> 00:09:09,410
be operating in your St an environment
but let's get a little bit deeper into

118
00:09:09,410 --> 00:09:13,439
the weeds with FDM so if you look right
here we're gonna stand her center on

119
00:09:13,440 --> 00:09:17,830
this picture on the controller the
controller in STN is your logical point

120
00:09:17,830 --> 00:09:21,790
of control it handles all your control
plane functions right where do I send

121
00:09:21,790 --> 00:09:25,880
traffic what do I do with this traffic
what's going on to control yourself is

122
00:09:25,880 --> 00:09:28,170
generally run as an application on

123
00:09:28,170 --> 00:09:33,639
linux-based platform and then we have
some control channel lines here the

124
00:09:33,639 --> 00:09:37,660
control channel lines are connecting the
controller to the data 14 devices so

125
00:09:37,660 --> 00:09:41,510
like I said the control plane functions
were abstracted and remove those to the

126
00:09:41,510 --> 00:09:46,439
controller we've taken the data 14
devices on the bottom is open flow

127
00:09:46,440 --> 00:09:50,230
switches in their handling all of my
data plan functions so the controller

128
00:09:50,230 --> 00:09:53,790
needs to be able to communicate to these
devices they use the control channel and

129
00:09:53,790 --> 00:09:57,370
will go up a little bit more into the
control channel later the better gonna

130
00:09:57,370 --> 00:10:02,079
be communicating instructions basically
and then at the very bottom we have all

131
00:10:02,079 --> 00:10:05,689
her hosts are hosts are communicating
with their dad affording devices through

132
00:10:05,690 --> 00:10:10,440
the OpenFlow protocol this is what we
call the southbound lane and we're going

133
00:10:10,440 --> 00:10:13,779
to be doing a lot of talking on the
southbound lane and the control channel

134
00:10:13,779 --> 00:10:19,209
specifically the northbound lane which
is where the API is revived basically

135
00:10:19,209 --> 00:10:25,479
communicates to the controller and
augments the ability to produce flows to

136
00:10:25,480 --> 00:10:31,760
security in a lot of flow-based function
that are coming from specialized plugin

137
00:10:31,760 --> 00:10:37,199
API is that are either bender developed
or developing not so much but that's

138
00:10:37,199 --> 00:10:43,349
what's happening at the northbound lane
Dr ste an environment that show but what

139
00:10:43,350 --> 00:10:49,149
is it really so basically this is a
really really lame in way of explaining

140
00:10:49,149 --> 00:10:53,490
it but my controllers gonna be sending
my close to my switches I put on here

141
00:10:53,490 --> 00:10:58,180
think ACL because my flow is a little
bit more than what you would understand

142
00:10:58,180 --> 00:11:04,140
in a routing table or a switching
switching table so your controllers

143
00:11:04,140 --> 00:11:08,069
gonna send this flow information because
it has the control functions down to my

144
00:11:08,070 --> 00:11:11,890
dad affording devices the switches are
going to use these flows in the flow

145
00:11:11,890 --> 00:11:14,980
tables when they're receiving
information they're going to look for an

146
00:11:14,980 --> 00:11:18,360
action there flows and then they're
gonna just do whatever the action is for

147
00:11:18,360 --> 00:11:19,380
that out

148
00:11:19,380 --> 00:11:23,569
drop that traffic whatever's appropriate
now to switch received something from a

149
00:11:23,569 --> 00:11:26,880
host and it doesn't have a flow that
matches it goes through all the flows

150
00:11:26,880 --> 00:11:30,209
and nothing matches now with the
switches gonna do that's gonna take a

151
00:11:30,209 --> 00:11:34,510
packet from that transmission and its
gonna put that up to the controller on

152
00:11:34,510 --> 00:11:37,860
the controller is going to be able to
either send instructions

153
00:11:37,860 --> 00:11:42,700
to the to the switch on what to do with
that type of traffic or it may need to

154
00:11:42,700 --> 00:11:47,140
further send that information up to one
of those APs are plugins I'm to let that

155
00:11:47,140 --> 00:11:52,819
process and and provide instructions so
either I got a flow from the controller

156
00:11:52,820 --> 00:11:58,010
or probably I'm gonna end up dropping
that that traffic now it's not

157
00:11:58,010 --> 00:12:02,310
necessarily a drop action will talk
about that a little bit later you may

158
00:12:02,310 --> 00:12:05,729
have a flood ruled that you didn't take
out of your switch which you should do

159
00:12:05,730 --> 00:12:10,660
and that will cause that traffic to let
out all ports but will hit that a bit

160
00:12:10,660 --> 00:12:16,180
later so at this point you're thinking
okay now I'm stopping a traffic flow and

161
00:12:16,180 --> 00:12:19,339
I'm sending something to the controller
which is gonna process that in software

162
00:12:19,339 --> 00:12:23,529
that seems kind of slow this doesn't
sound like a good idea for a large data

163
00:12:23,529 --> 00:12:27,760
center for this this type of application
isn't call for slow why would you do

164
00:12:27,760 --> 00:12:32,060
this well I would do this because of the
control that I have ultimately that

165
00:12:32,060 --> 00:12:36,880
first packet that goes to the controller
in a packet in message that is going to

166
00:12:36,880 --> 00:12:41,680
take a few milliseconds more ok but
after that all the subsequent packets in

167
00:12:41,680 --> 00:12:45,099
the traffic as long as there was a flow
provided are going to be processed at

168
00:12:45,100 --> 00:12:50,640
line speed controller itself can handle
the controller and the switches themself

169
00:12:50,640 --> 00:12:55,529
can handle logic matching logic layer
one all the way through later for and

170
00:12:55,529 --> 00:13:00,250
any combination that you can imagine
just about all of those those different

171
00:13:00,250 --> 00:13:05,850
layers the API's themselves are able to
handle some functions of looking into

172
00:13:05,850 --> 00:13:09,579
the payload for deep packet inspection
but that's not something that is

173
00:13:09,579 --> 00:13:12,839
currently supported in the OpenFlow side
where the controller and the switch is

174
00:13:12,839 --> 00:13:17,709
resigned yet however those API's do
provide us the ability to really look at

175
00:13:17,709 --> 00:13:22,939
traffic dynamically through every layer
of the OSI and make decisions so that's

176
00:13:22,940 --> 00:13:27,760
a huge powerful tool and by the way this
is all programmatic this does not

177
00:13:27,760 --> 00:13:35,649
require human intervention the same way
a traditional network does talking

178
00:13:35,649 --> 00:13:42,939
so we've been talking about flows so I
wanted to point out kind of two basic

179
00:13:42,939 --> 00:13:47,019
ways that you can imagine how I can
create my flows in a network again

180
00:13:47,019 --> 00:13:51,990
closer what we're using an order 24
traffic so we have a proactive type of

181
00:13:51,990 --> 00:13:56,939
flow and we have a reactive type of flow
the proactive flows think about those as

182
00:13:56,939 --> 00:14:00,939
a as an architect and engineer you're
gonna decide the paths through your

183
00:14:00,939 --> 00:14:04,349
network that you want your traffic to
travel this this means that your

184
00:14:04,350 --> 00:14:07,899
controller needs to have an accurate
idea of the topology and we'll get into

185
00:14:07,899 --> 00:14:12,490
that later on and this type of
formulating your flows in your pads is

186
00:14:12,490 --> 00:14:16,470
more static but for that reason it's a
little bit more secure I'm not going to

187
00:14:16,470 --> 00:14:21,529
have any surprises ok but when
researching static and secure I feel

188
00:14:21,529 --> 00:14:25,639
like we're losing some of the benefits
of the flexibility of the STN provides

189
00:14:25,639 --> 00:14:29,629
us so that's when we can look at
reactive flows reactive flows are

190
00:14:29,629 --> 00:14:34,790
enabled by the controller and these are
gonna be based on those packet in like I

191
00:14:34,790 --> 00:14:38,519
said when the switch get something from
a host and it doesn't have a flood that

192
00:14:38,519 --> 00:14:42,309
matches it sends it to the controller
the controller can either itself or

193
00:14:42,309 --> 00:14:46,540
through the API's provide instructions
in a reactive fashion to that particular

194
00:14:46,540 --> 00:14:51,160
package so this can be resource
intensive if I have a lot of traffic on

195
00:14:51,160 --> 00:14:54,860
my network that I haven't planned for
and all of those packets are getting set

196
00:14:54,860 --> 00:14:58,429
up to the controller so it doesn't
really scale well so the answer really

197
00:14:58,429 --> 00:14:59,170
is

198
00:14:59,170 --> 00:15:06,679
have a good mix of both proactive and
reactive flows and then I'll stop

199
00:15:06,679 --> 00:15:10,399
talking we're gonna talk a little bit
about the anatomy of a flow just for you

200
00:15:10,399 --> 00:15:14,230
guys that may not have you know you may
not have dug in that deep into what

201
00:15:14,230 --> 00:15:18,540
clothes do so this is kind of what a
flow looks like you're gonna have a flow

202
00:15:18,540 --> 00:15:22,219
table in her switch or many float able
to nurse which depending on the hardware

203
00:15:22,220 --> 00:15:26,620
that you're running the rule portion
that's very important that's going to be

204
00:15:26,620 --> 00:15:29,939
your matching field so I can spend on
the bottom you can see there the

205
00:15:29,939 --> 00:15:35,889
switches in the controller able to match
based on any fields layers 1 through 4

206
00:15:35,889 --> 00:15:40,360
and please understand that there are
things that are not depicted here that

207
00:15:40,360 --> 00:15:45,439
we do see special applications that can
match for like DSCP codes for QoS and

208
00:15:45,439 --> 00:15:46,670
things like that actual

209
00:15:46,670 --> 00:15:51,520
fields within the IP header so that's
really amazing so there we have the rule

210
00:15:51,520 --> 00:15:55,660
the next part is 15 match something I've
said ok this traffic matches this

211
00:15:55,660 --> 00:16:00,370
particular flow away do with the traffic
that's going to be my action understand

212
00:16:00,370 --> 00:16:04,540
that action and and instructions are
synonymous I'm gonna use those terms of

213
00:16:04,540 --> 00:16:07,829
both of those terms because the charm
actually change from action to

214
00:16:07,830 --> 00:16:11,390
instructions of the added capabilities
with the Newark limitations of the

215
00:16:11,390 --> 00:16:15,620
OpenFlow protocol for my actions right
here we just have some very generic

216
00:16:15,620 --> 00:16:20,160
actions that can be taken I can forward
the packet either to a port or ports I

217
00:16:20,160 --> 00:16:24,469
can for the packet to a particular
destination based on an IPA have a lot

218
00:16:24,470 --> 00:16:28,320
of our options here I can also send that
package up to the controller that allows

219
00:16:28,320 --> 00:16:32,780
the controller to processing or send it
to an API for further instruction I can

220
00:16:32,780 --> 00:16:36,860
drop the packet obviously and then the
normal 14 pipeline that's something we

221
00:16:36,860 --> 00:16:40,690
will hit again later that means that
basically I can treat this particular

222
00:16:40,690 --> 00:16:50,100
traffic this a way I would in a letter
to learning switch so really what this

223
00:16:50,100 --> 00:16:54,310
is is security and networking did we
just become best friends

224
00:16:54,310 --> 00:17:00,890
security networking though the beauty of
Sen in our opinion is that you can marry

225
00:17:00,890 --> 00:17:06,639
these two things so I talked a lot about
flows and how you can use flows before

226
00:17:06,640 --> 00:17:10,020
we get into the security portion as I
know you guys are all waiting for him to

227
00:17:10,020 --> 00:17:14,780
talk about security I want to point out
the best practice ideas for creating

228
00:17:14,780 --> 00:17:18,619
your network and its secure way ok so
now instead of just writing to get there

229
00:17:18,619 --> 00:17:22,739
I can route to get there the way I want
to get there in a secure way so coarse

230
00:17:22,740 --> 00:17:26,930
and fine grain flows I have the ability
with all these matching options to match

231
00:17:26,930 --> 00:17:32,570
something very coarsely rightly all ipv4
traffic pretty broad or I can have very

232
00:17:32,570 --> 00:17:37,510
fine-grained closed specify specific
host in a city with a specific

233
00:17:37,510 --> 00:17:41,960
destination in mind there's all sorts of
things we can do they're so in a large

234
00:17:41,960 --> 00:17:46,180
Sdn environment think about your course
core switches and routers you want those

235
00:17:46,180 --> 00:17:50,820
processing large amounts of data very
quickly to those who remain large course

236
00:17:50,820 --> 00:17:54,760
generic type closer to be placed in
there around the edges of my network

237
00:17:54,760 --> 00:17:56,340
that's where I'm probably gonna happen

238
00:17:56,340 --> 00:18:01,110
fighter green regular tight clothes and
some of these may be a product of those

239
00:18:01,110 --> 00:18:06,350
reactive flows that you talked about
that we didn't really see when we talked

240
00:18:06,350 --> 00:18:10,090
about the anatomy of the flow is the
priority I mention that you have low

241
00:18:10,090 --> 00:18:14,399
tables within your switches the priority
is something that you're gonna sign to

242
00:18:14,400 --> 00:18:19,409
the flow and think about it like if I
have a higher priority and it matches

243
00:18:19,409 --> 00:18:23,460
that's the flow that's gonna be used for
this lower priority flow even if it also

244
00:18:23,460 --> 00:18:28,070
matches that to think about how that
kind of again gives me the ability to

245
00:18:28,070 --> 00:18:33,990
treat these flows almost like an access
list in a firewall I can also use

246
00:18:33,990 --> 00:18:38,350
multiple tables within my switches these
tables allow me to really separate my

247
00:18:38,350 --> 00:18:42,590
traffic and I can send an action for a
specific match to just refer to another

248
00:18:42,590 --> 00:18:48,939
table so let's just say generic simple
example I have ipv4 and ipv6 and running

249
00:18:48,940 --> 00:18:53,340
dual stack and my network I want all my
ipv4 to do these things that I have this

250
00:18:53,340 --> 00:18:57,830
whole table creative full flows I also
have a very broad match for all ipv6

251
00:18:57,830 --> 00:19:02,399
traffic based on either type that the
action should be sent it to this flow

252
00:19:02,399 --> 00:19:09,020
table is an immediate process through
all these IP v4 flow rules so I'm about

253
00:19:09,020 --> 00:19:14,520
done is really awesome because when
you're networks under attack

254
00:19:14,520 --> 00:19:18,450
we feel that flows can reality retaliate
and we're going to talk about that

255
00:19:18,450 --> 00:19:26,919
security finally 30 there are really
three main avenues attack of an OpenFlow

256
00:19:26,919 --> 00:19:32,970
Sdn network these are very broad very
broad avenues and and generally collect

257
00:19:32,970 --> 00:19:37,590
most of the various types of attacks you
can see on St N one of the control

258
00:19:37,590 --> 00:19:41,870
channel that communication link between
the controller and the switches the

259
00:19:41,870 --> 00:19:45,168
controller itself is also another avenue
attack as well as the flows within the

260
00:19:45,169 --> 00:19:47,990
switches in the flows that are being
sent to the switches were gonna look at

261
00:19:47,990 --> 00:19:51,809
each one of these things and give you a
few a few aspects of each one that you

262
00:19:51,809 --> 00:19:56,230
need to be aware of the control channel
once again this is the communication

263
00:19:56,230 --> 00:19:59,720
between the controller in the switch and
so it's very important that it is secure

264
00:19:59,720 --> 00:20:04,980
the control channel itself can be
managed in or out of band meaning out of

265
00:20:04,980 --> 00:20:08,760
and it's a bit running a completely
separate TCP network

266
00:20:08,760 --> 00:20:12,680
outside of the OpenFlow network and that
is great because it's actually

267
00:20:12,680 --> 00:20:16,770
physically separated from your OpenFlow
network and there's a lot of security

268
00:20:16,770 --> 00:20:21,210
associated with that however
manageability can suffer because now you

269
00:20:21,210 --> 00:20:25,120
have to have places they can route to
that separate network in band makes

270
00:20:25,120 --> 00:20:28,449
management really great because from
within OpenFlow you can now manage your

271
00:20:28,450 --> 00:20:33,810
controller from any any OpenFlow host
really obviously you don't want every

272
00:20:33,810 --> 00:20:36,790
open to host managing your controller so
there are security associations with

273
00:20:36,790 --> 00:20:40,550
that as well as security implications
associated with that as well

274
00:20:40,550 --> 00:20:48,210
control channel can be secured with TLS
or TCP initially testified that it was

275
00:20:48,210 --> 00:20:52,270
required that that control shall be
secure with you less well you start

276
00:20:52,270 --> 00:20:56,000
requiring things like to you less and
people are complaining and so later

277
00:20:56,000 --> 00:20:59,440
editions of the protocol now allow for
both and guess which one

278
00:20:59,440 --> 00:21:04,760
most people are using not be less so
there is an overhead associate Els and

279
00:21:04,760 --> 00:21:07,760
implementation yes you have to actually
load all your certificates on the

280
00:21:07,760 --> 00:21:14,370
switches which can cause problems so a
lot of people are using TCP still to

281
00:21:14,370 --> 00:21:17,040
manage their to manage their control
channel talk a little bit more about

282
00:21:17,040 --> 00:21:18,440
that later

283
00:21:18,440 --> 00:21:22,630
control channel is just a TV network so
it's vulnerable to all the traditional

284
00:21:22,630 --> 00:21:25,760
network attacks that you'll see on any
other network

285
00:21:25,760 --> 00:21:29,379
here's a few of a few the tax we're
actually we're actually able to

286
00:21:29,380 --> 00:21:34,810
successfully leverage against that
control pain control channel remember

287
00:21:34,810 --> 00:21:40,480
ever cap I used it in high school to you
know traffic around my library but you

288
00:21:40,480 --> 00:21:44,870
can still use basic tools like that
later to man-in-the-middle attack on a

289
00:21:44,870 --> 00:21:48,850
control on a controller versus a switch
and now you can see every bit of traffic

290
00:21:48,850 --> 00:21:52,750
that passes between the control and the
switch and inject traffic as you see fit

291
00:21:52,750 --> 00:21:56,970
we'll talk about that a little later as
well this allows you to impersonate the

292
00:21:56,970 --> 00:22:00,270
controller and make the switches think
you're the controller potentially taking

293
00:22:00,270 --> 00:22:05,290
over the entire Sdn so it's very
important that your control channel is

294
00:22:05,290 --> 00:22:09,990
properly secured because in addition to
that the denial of service

295
00:22:09,990 --> 00:22:15,690
behavior the switches have can depend on
how you program so which loses

296
00:22:15,690 --> 00:22:18,730
connection to the controller it
essentially goes into one of two states

297
00:22:18,730 --> 00:22:23,120
and most familiar you could probably use
the field open or feel closed ideologies

298
00:22:23,120 --> 00:22:27,590
so feel secure is that is more feel
close basically the switch behavior if

299
00:22:27,590 --> 00:22:31,418
it loses connection with the controller
is just continue processing traffic

300
00:22:31,419 --> 00:22:35,929
based on the flows it has and when those
lows time out the switch just dropped

301
00:22:35,929 --> 00:22:40,210
traffic that's the more field closed
mind set DVR standalone means the

302
00:22:40,210 --> 00:22:44,260
switches process the process the traffic
as if it was a normal switch so

303
00:22:44,260 --> 00:22:48,190
basically reverted to regular layer 2
switch and switch will process traffic

304
00:22:48,190 --> 00:22:52,790
that way clearly both have security
issues and availability issues and you

305
00:22:52,790 --> 00:22:55,928
need to make a careful choice which one
you which one you choose to implement

306
00:22:55,929 --> 00:23:01,260
right now I'd like to do a quick tip of
the hat to mr. Gregory picket at

307
00:23:01,260 --> 00:23:05,270
hellfire security he's one of the few
other people that is talked at security

308
00:23:05,270 --> 00:23:08,840
conventions about sovereign if I network
if you look for hacker con security

309
00:23:08,840 --> 00:23:14,280
convention talks on SDN it's really him
maybe a couple of folks that are say

310
00:23:14,280 --> 00:23:17,629
there's not a whole lot of discussion
about this and that's what we got

311
00:23:17,630 --> 00:23:20,580
excited about it because we love
networking and there's so much potential

312
00:23:20,580 --> 00:23:24,250
for security within soccer Defined
Networking we felt that it really need

313
00:23:24,250 --> 00:23:29,270
to get come out to a wider audience and
such as this new congress mister picket

314
00:23:29,270 --> 00:23:33,590
developed some great Python based tools
for open till version one that can

315
00:23:33,590 --> 00:23:40,320
incorporate OpenFlow networks can toss
controllers can can impersonate switches

316
00:23:40,320 --> 00:23:43,559
all kinds of great tools that can be
found on its website at hellfire

317
00:23:43,559 --> 00:23:54,870
healthier security obviously the first
stage of any successful attack about an

318
00:23:54,870 --> 00:23:59,389
open network from within an open network
well enough

319
00:23:59,390 --> 00:24:02,720
depending on the way the switches are
programmed your open ports can be

320
00:24:02,720 --> 00:24:07,320
scarily quiet so you plug into an open
support in turn on Wireshark and you may

321
00:24:07,320 --> 00:24:14,590
actually not hear anything your
broadcasts are at the switch between the

322
00:24:14,590 --> 00:24:19,090
switch and controllers your typical our
broadcasts here you know Mtns all that

323
00:24:19,090 --> 00:24:21,959
other stuff that microsoft does not
actually getting broadcast because the

324
00:24:21,960 --> 00:24:25,770
controller can specify exactly what to
do with all that stuff and see you may

325
00:24:25,770 --> 00:24:29,408
actually depending on the configuration
not actually hear anything going into a

326
00:24:29,409 --> 00:24:31,900
port so there's a great secure

327
00:24:31,900 --> 00:24:36,320
implication therefore you're not getting
your unable to just passively sniffle

328
00:24:36,320 --> 00:24:41,200
lot of information about an open network
if it's properly configured occasionally

329
00:24:41,200 --> 00:24:45,870
though you will see LDP and host
identification messages those are away

330
00:24:45,870 --> 00:24:49,969
controller manages the links and looks
at tracks where the hosts are on the

331
00:24:49,970 --> 00:24:55,670
network so OpenFlow uses them LDP
variance to attract hosting link states

332
00:24:55,670 --> 00:24:59,840
within a network another interesting
thing we noticed was meted certain

333
00:24:59,840 --> 00:25:04,330
you're printing the flows and based on
hits and misses once we had once we were

334
00:25:04,330 --> 00:25:07,399
able to listen on the control channel we
could start sending traffic in OpenFlow

335
00:25:07,400 --> 00:25:10,810
ports and see what the switch was
sending to the controller and asking

336
00:25:10,810 --> 00:25:14,500
about this allowed us to fingerprint
exactly what flows were in the switches

337
00:25:14,500 --> 00:25:18,700
based on hey this this which sent this
traffic some plays into the controller

338
00:25:18,700 --> 00:25:23,260
includes the switch clearly had a flow
for that piece of traffic we can now

339
00:25:23,260 --> 00:25:28,210
begin to a numerate the flows within the
switches in addition to that some of the

340
00:25:28,210 --> 00:25:32,890
default flows when you when you open the
box controller plugin the switches it

341
00:25:32,890 --> 00:25:36,050
will install a lot of default flows just
make your network work and some of those

342
00:25:36,050 --> 00:25:40,520
include as you mention the flood flows
you send us you sent a package if the

343
00:25:40,520 --> 00:25:43,530
switch doesn't know what it does it's
legit out all ports essentially either

344
00:25:43,530 --> 00:25:47,629
switching or hub type mentality
depending on the depending on the

345
00:25:47,630 --> 00:25:52,150
controller using this can allow you to
plug one thing into each into to open

346
00:25:52,150 --> 00:25:56,160
ports and listen on one and send random
traffic of this one and see what's

347
00:25:56,160 --> 00:25:58,810
getting flooded over here so you now
know what matches within the switch

348
00:25:58,810 --> 00:26:04,560
lastly you can you can actually conduct
hella sweep of the network and pinpoint

349
00:26:04,560 --> 00:26:09,480
OpenFlow capable devices within the
network because the default behavior for

350
00:26:09,480 --> 00:26:14,380
overflow devices is to respond hello so
you send a TCP based hello and see who

351
00:26:14,380 --> 00:26:16,850
hellos back

352
00:26:16,850 --> 00:26:20,980
controllers and depending on the
implementation some of the other other

353
00:26:20,980 --> 00:26:26,990
devices as well so a lot of times when
you when you start talking to you less

354
00:26:26,990 --> 00:26:32,230
and insecurity specifically with with
suffered if I networking folks they will

355
00:26:32,230 --> 00:26:39,880
hand weighted by saying just pls pls pls
is a great 2010 there is great he last

356
00:26:39,880 --> 00:26:45,120
august 10 2012 that is a great tool and
can provide some great security

357
00:26:45,120 --> 00:26:48,520
but it's definitely not the answer to
everything in there some specific things

358
00:26:48,520 --> 00:26:52,470
we need to be mindful of when
implementing key lesson in STN

359
00:26:52,470 --> 00:26:55,800
unfortunately is not as easy as just
implementing TLS there are some things

360
00:26:55,800 --> 00:27:02,370
we need to think about this is a pillow
packing our issue is this is the exact

361
00:27:02,370 --> 00:27:07,110
specification of hello packet we know
exactly what's inside that tacit the

362
00:27:07,110 --> 00:27:11,620
protocol is predictable so inside hello
packet I know that his nineteen bites

363
00:27:11,620 --> 00:27:16,129
there's no padding there's no random
transmission ideas that are generated

364
00:27:16,130 --> 00:27:20,390
it's a sequential transmission ideas
generated so when I see an encrypted 19

365
00:27:20,390 --> 00:27:26,070
bite or plus the TLS enter nineteen by
packing go by I now know exactly what

366
00:27:26,070 --> 00:27:31,350
that package is as you can see here I
have a Hello packet next to its

367
00:27:31,350 --> 00:27:38,330
encrypted counterpart and it's very
simple and straightforward we know what

368
00:27:38,330 --> 00:27:43,428
every field in a khaki jeans so based on
their side and that's just a Hello

369
00:27:43,429 --> 00:27:47,150
example there's echo request sexual
pleasures and many other packets that we

370
00:27:47,150 --> 00:27:51,960
can identify based on their size so now
we can man in the middle your network

371
00:27:51,960 --> 00:27:55,590
because once again there are you later
to attack you can still man the middle

372
00:27:55,590 --> 00:28:02,399
of TLS connection and we can now packets
we don't want based on their size so I

373
00:28:02,400 --> 00:28:06,679
inject of bad flow into your switch the
switch goes to update or the controller

374
00:28:06,679 --> 00:28:09,580
pulls the switch and switch goes up to
the controller I can just not that

375
00:28:09,580 --> 00:28:13,309
packet out I don't care what's inside
and I know it's an update because I know

376
00:28:13,309 --> 00:28:16,100
what the sizes and I can prevent the
controller from receiving updates from

377
00:28:16,100 --> 00:28:21,080
those switches I can conduct recon of
your network based on traffic statistics

378
00:28:21,080 --> 00:28:26,480
so I can write scripts that will look
for these eyes of packets and generate

379
00:28:26,480 --> 00:28:29,990
information on ok this end of the
network the flows are pretty pretty

380
00:28:29,990 --> 00:28:34,290
course and there's a lot of packing into
the controller I can start getting a lot

381
00:28:34,290 --> 00:28:37,530
of information about your network just
based on the packet sizes that are

382
00:28:37,530 --> 00:28:41,730
coming across the even without knowing
the contents and lastly since we know

383
00:28:41,730 --> 00:28:44,480
exactly what's in that package we can
begin hashing these increasing rainbow

384
00:28:44,480 --> 00:28:47,590
tables that will eventually start
fingerprinting your keys with your

385
00:28:47,590 --> 00:28:53,350
network this is a significant problem as
this tells us a lot and it is not

386
00:28:53,350 --> 00:28:56,428
secured by the encryption encryption is
not defeat

387
00:28:56,429 --> 00:29:02,950
the all the things we can find out about
these packets so we talked a little bit

388
00:29:02,950 --> 00:29:07,710
about the about the control channel and
the implications there the next avenue

389
00:29:07,710 --> 00:29:15,470
of attack is the controller itself and
she's entitled about that one controller

390
00:29:15,470 --> 00:29:18,720
at like I mentioned before in the end
the controller is my central point of

391
00:29:18,720 --> 00:29:23,649
logic ok the controller is going to be
the brain the heart the soul of an ISDN

392
00:29:23,649 --> 00:29:27,768
to the controller really is a single
point of failure and I know a lot of

393
00:29:27,769 --> 00:29:31,100
your thinking that like oh my god if the
controller goes down everything is it's

394
00:29:31,100 --> 00:29:35,080
over right whatever stop you don't just
have one controller and a large network

395
00:29:35,080 --> 00:29:39,809
you have usually overlays of slices on
in those controllers have different

396
00:29:39,809 --> 00:29:42,658
prices of the network and you have a
lover mechanisms and high availability

397
00:29:42,659 --> 00:29:46,440
but we're not going to go into all that
but I do want to point out in terms of

398
00:29:46,440 --> 00:29:50,019
the controller is that this controllers
and application that's running on

399
00:29:50,019 --> 00:29:55,119
usually a linux-based platform so
whatever the ladies are inherent in that

400
00:29:55,119 --> 00:30:00,689
platform you haven't patched it now your
controllers vulnerable so be careful

401
00:30:00,690 --> 00:30:05,999
there's really nothing new there now
controller in API facing this is fine

402
00:30:05,999 --> 00:30:08,480
and there's a lot of people that have
done research on this

403
00:30:08,480 --> 00:30:13,200
you have a very just a myriad of API's
and plugins that have been built to

404
00:30:13,200 --> 00:30:18,659
interfaith on the controller and provide
additional functionality so the ideas

405
00:30:18,659 --> 00:30:23,139
from the data plane if I'm sending in
Pakistan malformed have unexpected

406
00:30:23,139 --> 00:30:27,529
payloads just all sorts of different
variables if I'm sending those in and

407
00:30:27,529 --> 00:30:31,619
thus causing the switch to relate these
to the controller via the packet in

408
00:30:31,619 --> 00:30:35,678
message the controller may get this in
freak out I might pass it up to an API

409
00:30:35,679 --> 00:30:39,480
in freak out the key here is when we
start looking at funding the control an

410
00:30:39,480 --> 00:30:44,360
API that only just takes one packet to
crush me saque to secure coding is very

411
00:30:44,360 --> 00:30:48,508
important and I know that's not maybe
you guys' problem that's the the vendors

412
00:30:48,509 --> 00:30:52,049
but on the open source ID it's something
that we should be cognizant of

413
00:30:52,049 --> 00:30:57,440
controller overload is also a problem
there's a lot of talk out there about

414
00:30:57,440 --> 00:31:00,980
denial of service distributed denial of
service obviously I've talked about

415
00:31:00,980 --> 00:31:02,830
these packing in messages lot

416
00:31:02,830 --> 00:31:08,899
enough posts that have been compromised
if I have the capability to send a very

417
00:31:08,899 --> 00:31:13,408
high rate of packets that I know are
going to get a pack it in generated cos

418
00:31:13,409 --> 00:31:16,519
they're missing those flows there's
nothing in there that matches that's

419
00:31:16,519 --> 00:31:20,750
gonna get sent up to the controller if I
overwhelm the controller with a high

420
00:31:20,750 --> 00:31:25,769
rate of packets a large number of
packets then I consumers resources and

421
00:31:25,769 --> 00:31:31,010
I've basically . your your your network
so the ideas control plane policing can

422
00:31:31,010 --> 00:31:35,760
help there's a function called me during
that absolutely can help however vendors

423
00:31:35,760 --> 00:31:38,700
generally just suggest you meter K

424
00:31:38,700 --> 00:31:42,960
you really need to meter your traffic
and then lastly in terms of the

425
00:31:42,960 --> 00:31:46,820
controller topology changes are very
very near and dear to the controller can

426
00:31:46,820 --> 00:31:51,590
like I said the controller needs to have
a good logical idea of the topology your

427
00:31:51,590 --> 00:31:56,379
network in order to make those decisions
for those reactive flows home again to

428
00:31:56,380 --> 00:31:59,880
determine the best way to get from point
A to point B if i dont know what youre

429
00:31:59,880 --> 00:32:04,080
talking she looks like we have LDP
variants that john mentioned before

430
00:32:04,080 --> 00:32:08,539
you'll often see this particular
function referred to as FTP OpenFlow

431
00:32:08,539 --> 00:32:14,450
controller itself is going to by default
be running a host tracker service as

432
00:32:14,450 --> 00:32:18,389
well as a link tracker service now the
host trackers dermis maybe something

433
00:32:18,389 --> 00:32:21,600
that you look at turning off is what
it's doing is it's looking for all the

434
00:32:21,600 --> 00:32:26,590
individual hosts in a large data center
you may not really need that cake and

435
00:32:26,590 --> 00:32:29,740
you may think about turning that off
because that is something where those

436
00:32:29,740 --> 00:32:34,919
hosts directly talking to through the
SDN on network have the ability to push

437
00:32:34,919 --> 00:32:39,899
those LDP various messages in now if I
can control one of those host if I can

438
00:32:39,899 --> 00:32:43,908
just I can just exploit one of them and
I can start spoofing messages I can

439
00:32:43,909 --> 00:32:47,409
start sending instructions the
controller telling him that meet up one

440
00:32:47,409 --> 00:32:51,870
over there now I'm over there now I'm
over there so that's the problem it's

441
00:32:51,870 --> 00:32:54,668
going to confuse the controller and
that's it's really going to cause issues

442
00:32:54,669 --> 00:32:58,519
I'm you can turn that service off but
again it's something to think about

443
00:32:58,519 --> 00:33:03,039
because those are easy to speak now on
the link tracking side of this those

444
00:33:03,039 --> 00:33:06,669
particular packets the time to live data
and decrement normally so it's easy to

445
00:33:06,669 --> 00:33:11,399
relay from host position really packets
spoofed packets in things around and

446
00:33:11,399 --> 00:33:15,639
making links appear where they really
shouldn't be obviously this again is an

447
00:33:15,639 --> 00:33:19,799
issue because it may cause the
controller to create flows where it

448
00:33:19,799 --> 00:33:22,908
shouldn't be creating posters it doesn't
have an accurate idea of the topology

449
00:33:22,909 --> 00:33:27,100
I'm so one suggestion that I have read
about in terms of securing this

450
00:33:27,100 --> 00:33:31,539
particular issue is at least for the
hosts tracking service to have some sort

451
00:33:31,539 --> 00:33:35,590
of a precondition check of indication
for these messages it's just too heavy

452
00:33:35,590 --> 00:33:39,779
and it's too much so precondition check
would mean that if I send you an update

453
00:33:39,779 --> 00:33:41,490
the says hey I moved over there

454
00:33:41,490 --> 00:33:44,960
my partner and gone down over here in up
over there and that's something that

455
00:33:44,960 --> 00:33:48,289
neon controllers gonna be aware of
because these messages are going to come

456
00:33:48,289 --> 00:33:52,419
from the switches to notify them I'm
status changes within their own within

457
00:33:52,419 --> 00:33:58,950
their configurations like airports other
very important though so the flows I

458
00:33:58,950 --> 00:34:04,399
just keep coming back to the flows the
flows are very important like john

459
00:34:04,399 --> 00:34:09,868
mentioned earlier that blood flow I
kinda wanna back up and talk about that

460
00:34:09,869 --> 00:34:14,280
from it that blood flow that is usually
when implemented out of the box priority

461
00:34:14,280 --> 00:34:18,149
0 meaning that if we didn't match
anything of a higher priority that would

462
00:34:18,149 --> 00:34:23,060
have been reactive or or put in that's
where that comes in so when I send think

463
00:34:23,060 --> 00:34:28,020
about it as if it was an ACL that's an
implicit permit at the end of your ACO

464
00:34:28,020 --> 00:34:31,589
that may not be what we want to do we
may want to think more heavily about

465
00:34:31,589 --> 00:34:35,418
going towards the implicit deny so maybe
have a flow in there with a higher

466
00:34:35,418 --> 00:34:40,310
priority than 0 that dropped your
traffic flow types are generic either

467
00:34:40,310 --> 00:34:46,080
type flows are going to control your lol
DPR ipv4 ipv6 all those things it's very

468
00:34:46,080 --> 00:34:50,250
important to be aware that again many
controllers all these different vendors

469
00:34:50,250 --> 00:34:54,000
had different ways of handling it many
controllers are gonna send very generic

470
00:34:54,000 --> 00:35:00,010
type flows very very coarse type close
to help facilitate this track this

471
00:35:00,010 --> 00:35:01,960
traffic getting to the right place

472
00:35:01,960 --> 00:35:08,170
the flood flows in the normal 40 the
flood flows are gonna happen they're

473
00:35:08,170 --> 00:35:10,810
gonna happen out of the box the
controllers gonna send

474
00:35:10,810 --> 00:35:14,810
the switches and that's gonna say
anything you receive an OpenFlow ports

475
00:35:14,810 --> 00:35:19,630
and that all other ports the normal
authority is treated like treat this

476
00:35:19,630 --> 00:35:23,350
traffic like you were a normal switch
this is something that's gonna be

477
00:35:23,350 --> 00:35:27,110
available on your hybrid type switches
that allow you to do both traditional

478
00:35:27,110 --> 00:35:33,510
pipeline forwarding and reopen flow flow
injection injection that is a real

479
00:35:33,510 --> 00:35:36,530
danger we talked a lot about the
man-in-the-middle attack and being able

480
00:35:36,530 --> 00:35:40,550
to get into that control channel
impersonated controller do things like

481
00:35:40,550 --> 00:35:45,530
that even just spoofing packets and
sending them in when I see TCP so the

482
00:35:45,530 --> 00:35:50,490
idea with injection is if I can somehow
circumvent all of your security and and

483
00:35:50,490 --> 00:35:55,120
i cant man in the middle europe your
network I can inject slows so now that I

484
00:35:55,120 --> 00:35:59,420
control your network goes if I have bad
traffic that I want to get through your

485
00:35:59,420 --> 00:36:03,910
network I can redirect traffic around
your existing firewalls your IPS is your

486
00:36:03,910 --> 00:36:07,250
ideas wherever you happen to have in
that if you an environment to try to

487
00:36:07,250 --> 00:36:12,950
protect your your information so I'm
just going to reiterate close think of

488
00:36:12,950 --> 00:36:21,790
them as not only moving packets but also
a way to secure your network after

489
00:36:21,790 --> 00:36:28,440
really digging into St N we we we really
felt strongly about the fact that Sen in

490
00:36:28,440 --> 00:36:33,070
the capability to make the network more
than just packet transport transport

491
00:36:33,070 --> 00:36:37,120
network topology can be changed in
milliseconds that's something that we're

492
00:36:37,120 --> 00:36:41,130
gonna go through in our demo and this is
something that's done with zero human

493
00:36:41,130 --> 00:36:45,410
intervention you can have code triggers
on a condition that can change the whole

494
00:36:45,410 --> 00:36:49,359
topology of your network based on
providing flows deleting flows

495
00:36:49,360 --> 00:36:55,220
reordering flows and changing where
you're here traffic goes so something to

496
00:36:55,220 --> 00:36:55,950
think about

497
00:36:55,950 --> 00:37:00,169
once we get towards a moving target
defense or often this is something

498
00:37:00,170 --> 00:37:03,670
that's been talked about in STN and
there's a lot of theories and we kind of

499
00:37:03,670 --> 00:37:08,330
have her own spin on moving target
defense are often but the ideas I can

500
00:37:08,330 --> 00:37:13,440
very easily relocate a host I can
redirect traffic very easily with very

501
00:37:13,440 --> 00:37:19,210
thing is in the new implementations of
OpenFlow you're able to not only in

502
00:37:19,210 --> 00:37:23,420
terms of actions for something back and
change all those aspects that I matched

503
00:37:23,420 --> 00:37:28,890
on your source IP of dot line once I get
that right comes in the port of the

504
00:37:28,890 --> 00:37:32,629
switch I can actually change that and
you're no longer 2012 everyone else your

505
00:37:32,630 --> 00:37:36,500
dog too so it's kind of like thinking
that if your network person right that's

506
00:37:36,500 --> 00:37:40,450
how I think of that but it's not it's
far more powerful because that condition

507
00:37:40,450 --> 00:37:44,078
changing you . to can be only when
you're talking over here when you're

508
00:37:44,079 --> 00:37:48,310
talking over here you're still not one
that's fine or maybe you're not three so

509
00:37:48,310 --> 00:37:52,339
there's a lot of power in that just like
with traffic redirection being able to

510
00:37:52,339 --> 00:37:58,290
redirect my traffic based on a defensive
or offensive mechanism very very

511
00:37:58,290 --> 00:38:06,099
powerful so so what's the answer all
this we use Sdn is it secure is insecure

512
00:38:06,099 --> 00:38:13,810
with this as a security community and
help build the security within STN

513
00:38:13,810 --> 00:38:20,060
because once again as it happens so much
this protocol is being built and

514
00:38:20,060 --> 00:38:24,069
security is is you know it's behind
there but it's kind of struggling to

515
00:38:24,069 --> 00:38:28,339
catch up we need to build this protocol
with security in mind pls was a great

516
00:38:28,339 --> 00:38:34,900
solution that's not the only answer as
you can see most of the security

517
00:38:34,900 --> 00:38:40,310
functions of SDN currently are plugins
to the controller that's great and

518
00:38:40,310 --> 00:38:44,290
there's some great ones I have had some
listed up here for example we the HP Net

519
00:38:44,290 --> 00:38:49,009
Protector can actually scrub DNS traffic
so put the flow into into all your

520
00:38:49,010 --> 00:38:53,810
switches that shoots DNS traffic over to
whitelist and blacklist and you can you

521
00:38:53,810 --> 00:38:58,880
can control what traffic it's go through
your network protection there Dr

522
00:38:58,880 --> 00:39:03,569
scrubbers built into St Annes as soon as
it detects a lot of weird stuff matching

523
00:39:03,569 --> 00:39:06,869
your clothes it'll start sending it to a
Dr scrubber there's some really great

524
00:39:06,869 --> 00:39:11,440
plugins for the controller but what we
really need is a holistic solution that

525
00:39:11,440 --> 00:39:17,000
looks at the network as a whole for one
example we can it is it is possible to

526
00:39:17,000 --> 00:39:20,650
inject flows into switches and a
controller not know about them so we

527
00:39:20,650 --> 00:39:24,359
need a solution that can pull the
switches in the controller n determine

528
00:39:24,359 --> 00:39:26,000
that everybody speaking the same
language

529
00:39:26,000 --> 00:39:30,040
cash flows that are in the switches hash
the flows out in the controller compared

530
00:39:30,040 --> 00:39:34,500
against each other make sure that
everybody's on the same page what we can

531
00:39:34,500 --> 00:39:38,250
do now at St Anna will demonstrate in
our in our demo is we can leverage

532
00:39:38,250 --> 00:39:42,590
existing security assets you have your
snorts your trip wires all these sorts

533
00:39:42,590 --> 00:39:46,040
of things into an SDN so that your
networking actually dynamically make

534
00:39:46,040 --> 00:39:50,870
decisions based on alerts from those
things obviously most importantly though

535
00:39:50,870 --> 00:39:55,569
is is do your own research and testing
there is no cookie-cutter solution for

536
00:39:55,570 --> 00:39:59,490
Sdn in in a network every company's
gonna run it differently every company

537
00:39:59,490 --> 00:40:01,160
can have different network requirements

538
00:40:01,160 --> 00:40:05,160
that's why we go back to the it's
complicated thing there are some amazing

539
00:40:05,160 --> 00:40:10,299
control and beauty in STN but it is a
little tricky and it wont unlike a

540
00:40:10,300 --> 00:40:14,090
regular switch routers it kind of semi
one size fits all

541
00:40:14,090 --> 00:40:20,950
St is not like that so let's talk a
little about what we've done here

542
00:40:20,950 --> 00:40:26,230
leading into the demo first of all we
are here because we love this stuff I

543
00:40:26,230 --> 00:40:31,640
finish my masters degree she's been in
networking her whole life we are

544
00:40:31,640 --> 00:40:35,670
passionate about this stuff we both had
happy consulting jobs is something we

545
00:40:35,670 --> 00:40:38,840
we've been researching on our own time
because we've been wanting to get it out

546
00:40:38,840 --> 00:40:41,990
there to the security community how
important this stuff is so what we're

547
00:40:41,990 --> 00:40:46,000
trying to do here is we're trying to
create a vendor agnostic framework so

548
00:40:46,000 --> 00:40:49,500
many of those plugins I spoke about our
vendor specific yesterday and it has a

549
00:40:49,500 --> 00:40:53,380
great plugin and it only works with
Fortinet equipment which hopefully you

550
00:40:53,380 --> 00:40:55,570
all have patches of like last week

551
00:40:55,570 --> 00:41:00,100
vendor agnostic framework is really
important we need to start an

552
00:41:00,100 --> 00:41:05,360
open-source discussion on how we can as
a community build security within our

553
00:41:05,360 --> 00:41:10,290
soft if I networking and leverage the
power of it a lot of the capabilities of

554
00:41:10,290 --> 00:41:14,140
security testing and are still in a
white paper or proprietary phase of

555
00:41:14,140 --> 00:41:17,730
companies go off and do their own thing
build their own proprietary plug ins or

556
00:41:17,730 --> 00:41:21,950
college students are trying to graduate
in writing white papers on it we need a

557
00:41:21,950 --> 00:41:25,620
lot more grassroots support from the
community to do this

558
00:41:25,620 --> 00:41:32,560
the flow logic for for this security
model needs to really can be based on

559
00:41:32,560 --> 00:41:37,480
the type of attack so if it sees a
snorkel or come in for a me know Andy

560
00:41:37,480 --> 00:41:38,119
Dawson

561
00:41:38,119 --> 00:41:41,700
or you know shellcode coming across your
network you can now redirecting traffic

562
00:41:41,700 --> 00:41:46,169
whatever you want and where everyone and
the logic that can support that is is

563
00:41:46,170 --> 00:41:50,849
not that complicated you essentially
just can pick what you want based on

564
00:41:50,849 --> 00:41:54,390
broad categories you all know about tort
categories you can pick it based on

565
00:41:54,390 --> 00:41:59,589
categories of attack and gradually
defined flows based on that so we're

566
00:41:59,589 --> 00:42:08,819
gonna lead into the into the demo here
from here so I can later point here is

567
00:42:08,819 --> 00:42:13,220
what we have built over here and what
we're gonna do is we're going to zoom in

568
00:42:13,220 --> 00:42:17,240
on each one of these and give you an
idea of what it looks like and how we've

569
00:42:17,240 --> 00:42:21,529
created an appliance that can wear a
concept of an appliance that can

570
00:42:21,529 --> 00:42:27,240
redirect traffic dynamically based on
attacks within the network what we have

571
00:42:27,240 --> 00:42:41,078
here is here are three Brocade switches
and we have them right here in running

572
00:42:41,079 --> 00:42:47,440
an HP Canon HP controller managing them
so each each which has a different host

573
00:42:47,440 --> 00:42:52,059
hanging off this which has our tacker
this which has a honeypot this which has

574
00:42:52,059 --> 00:42:57,440
our victim and up here we have our mean
are smart sensor and are and/or log

575
00:42:57,440 --> 00:43:01,269
server as well as this handy-dandy
security plans that we've been working

576
00:43:01,269 --> 00:43:02,879
on now

577
00:43:02,880 --> 00:43:05,900
full disclosure here we try to minimize
the number of Ian's we had running in

578
00:43:05,900 --> 00:43:12,170
here so are taxes kind of dumb and are
victims also sensor so attacker decides

579
00:43:12,170 --> 00:43:16,739
to attack the smart sensor got it we
gotta get a dumb attacker here that's

580
00:43:16,739 --> 00:43:23,289
basically what we built and and so fuel
clicker let's let's look first at what

581
00:43:23,289 --> 00:43:26,390
the controller looks like you know
status quo normal flows in the

582
00:43:26,390 --> 00:43:33,029
controller so what we have here is the
HP SDN controller has it has a lot of

583
00:43:33,029 --> 00:43:36,690
great functionality and again a great
user interface that works really well

584
00:43:36,690 --> 00:43:41,019
and so after this week if you like to
take a look at it we do have a running

585
00:43:41,019 --> 00:43:45,078
up here and you can get a better look at
it so basically what we do here is we're

586
00:43:45,079 --> 00:43:49,040
gonna show the flows in between the
attacker in

587
00:43:49,040 --> 00:43:53,690
and the victim so you can see down there
on the bottom left there's art actor and

588
00:43:53,690 --> 00:44:03,050
we're gonna set him as the source

589
00:44:03,050 --> 00:44:07,670
victim as the destination gonna show the
flows in between them and as you can see

590
00:44:07,670 --> 00:44:11,430
there is a current flow that is built
directing traffic between those two host

591
00:44:11,430 --> 00:44:18,500
controller allows a lot of capability
and showing in illustrating the flows

592
00:44:18,500 --> 00:44:22,040
that are going between them most
humility that little tiny box in a link

593
00:44:22,040 --> 00:44:24,779
between the two switches is actually one
of the packet counters and will show how

594
00:44:24,780 --> 00:44:29,880
many packets are matching outflow you
can actually see the status of network

595
00:44:29,880 --> 00:44:43,780
traffic going across that link so let's
go down to our tax I think they're so

596
00:44:43,780 --> 00:44:52,239
attacker

597
00:44:52,239 --> 00:45:05,199
attackers gonna send an evil king and
will demonstrate here once we get it up

598
00:45:05,199 --> 00:45:10,389
we have a person or triggering on things
and reason we did that is because things

599
00:45:10,389 --> 00:45:13,269
have a really great graphical you can
see things getting dropped you can see

600
00:45:13,269 --> 00:45:19,058
things getting how long they're taking
going and so we're gonna run this script

601
00:45:19,059 --> 00:45:27,999
and have him glad it's not a live demo
will be a lot worse this is planned this

602
00:45:27,999 --> 00:45:29,738
is planned it's a review

603
00:45:29,739 --> 00:45:36,809
there's there will be a don't have
prizes you can just leave with your

604
00:45:36,809 --> 00:45:49,959
dignity

605
00:45:49,959 --> 00:45:55,868
presentation software for those of you
that have not seen him for like three

606
00:45:55,869 --> 00:45:59,909
years on an enemy to presentations
really cool and here we go

607
00:45:59,909 --> 00:46:08,609
not PowerPoint ok so they're sending his
he sending his evil beings and as you

608
00:46:08,609 --> 00:46:14,499
can see look at this thirteen notice how
is taking a little while 13 took 11

609
00:46:14,499 --> 00:46:19,479
milliseconds that is because that
traffic was just redirected

610
00:46:19,479 --> 00:46:23,848
attackers still thinks he's hitting his
victim in reality he's not he's hitting

611
00:46:23,849 --> 00:46:28,549
avian that we stood up inside our
honeymoon and doesn't realize it and it

612
00:46:28,549 --> 00:46:32,399
this is you can do in maps can you can
do anything and they just continuously

613
00:46:32,399 --> 00:46:36,249
scan that hosts him thinking that he's
still the same place when in reality

614
00:46:36,249 --> 00:46:41,078
there's been no change he's actually
just talking to one of our host that we

615
00:46:41,079 --> 00:46:46,899
are now fully monitoring what happened
here is our appliance triggered on this

616
00:46:46,899 --> 00:46:54,799
attack as you can see it connected to
our door sport ever attack and built-in

617
00:46:54,799 --> 00:47:00,689
sense flows to the controller detector
attack kills all the clothes and the

618
00:47:00,689 --> 00:47:04,460
controller and our attackers fully
redirected to the next

619
00:47:04,460 --> 00:47:12,400
let's real quick look at the at the what
happened here so the hosts on the honey

620
00:47:12,400 --> 00:47:18,280
host has the same MAC addresses same IP
address as the as the original hosted

621
00:47:18,280 --> 00:47:20,780
and so the controller thinks there's two
hosts that are coming out of two

622
00:47:20,780 --> 00:47:24,089
different switches the controls little
confused but if we look at the source

623
00:47:24,089 --> 00:47:28,259
and destination it's now no longer
following that original path we plotted

624
00:47:28,260 --> 00:47:32,970
it's now going through the honey switch
into the honey host he's no longer

625
00:47:32,970 --> 00:47:36,950
talking to the same host we've
completely dynamically redirected

626
00:47:36,950 --> 00:47:41,868
traffic to get the isolate that attacker
fully so she can talk anything else on

627
00:47:41,869 --> 00:47:47,250
the network except what we want him to
the implications of this are we can at

628
00:47:47,250 --> 00:47:53,140
now due to those attacks we can now
spawn viens and spawned networks inside

629
00:47:53,140 --> 00:47:56,618
that honey net so he actually thinks
he's pivoting within our network when in

630
00:47:56,619 --> 00:48:01,869
reality he's in a glass box that we're
watching really incredible stuff through

631
00:48:01,869 --> 00:48:07,540
we are able to send you know put up a
Linux names based for example listening

632
00:48:07,540 --> 00:48:11,359
on port 80 he now thinks he's talking to
a web server that sort of thing is is

633
00:48:11,359 --> 00:48:22,210
really easily done with soccer Defined
Networking redirecting that attacker we

634
00:48:22,210 --> 00:48:27,210
love Sen and as we try to lose to USC
and here it's already being used is

635
00:48:27,210 --> 00:48:30,849
being used heavily by large corporations
government entities and it's been used

636
00:48:30,849 --> 00:48:36,310
for years and years being used as it
moves closer and closer to our homes and

637
00:48:36,310 --> 00:48:40,730
and and you know this small small to
medium data centers that you guys might

638
00:48:40,730 --> 00:48:45,240
you know frequent we need to be able to
understand at the end we need to be able

639
00:48:45,240 --> 00:48:49,740
to recognize that security implement
implication that threats that are

640
00:48:49,740 --> 00:48:53,430
inherent with it and we need to find
creative ways around that we need to

641
00:48:53,430 --> 00:48:57,580
innovate and the Open Networking
Foundation there they've kind of been

642
00:48:57,580 --> 00:49:01,880
the lead for development of the OpenFlow
protocol development of the OpenFlow

643
00:49:01,880 --> 00:49:05,970
switch specification and they have a lot
of Brian from all these commercial

644
00:49:05,970 --> 00:49:09,759
vendors but again on the security
community side of it

645
00:49:09,760 --> 00:49:13,730
will require innovation and
collaboration among us to build that

646
00:49:13,730 --> 00:49:19,590
framework STN can be a security
instrument that's the beauty of it

647
00:49:19,590 --> 00:49:25,470
a traditional network moved package and
STN network can move packets smartly so

648
00:49:25,470 --> 00:49:29,810
we can leverage the sensors that we only
have the appliances that we re how all

649
00:49:29,810 --> 00:49:33,670
these things that we already have we can
leverage these interfacing with simple

650
00:49:33,670 --> 00:49:38,280
programming and we can create a more
dynamic defense with internet work so

651
00:49:38,280 --> 00:49:47,720
right now we love STN because it is a
network that can fight back so that's a

652
00:49:47,720 --> 00:49:52,189
broad overview of St and insecurity
there so many rabbit holes that this

653
00:49:52,190 --> 00:49:56,820
goes into so many beautiful aspects
depending on what you're good at so if

654
00:49:56,820 --> 00:50:01,290
you're a coder is a lot of stuff to do
if your networking person there's a lot

655
00:50:01,290 --> 00:50:02,070
of talk to you there

656
00:50:02,070 --> 00:50:06,790
requires a community effort and that's
all we're trying to show here so at this

657
00:50:06,790 --> 00:50:11,610
time that's all we have we're running a
little short on time if you have any

658
00:50:11,610 --> 00:50:15,380
questions we're happy to answer them we
do have the set up over here I don't

659
00:50:15,380 --> 00:50:19,200
know if we're gonna have time to pull it
up all the way but but what were your

660
00:50:19,200 --> 00:50:30,680
questions we explain it really well for
everybody's really confused when we're

661
00:50:30,680 --> 00:50:35,250
gonna be an awesome we got someone got a
heckler

