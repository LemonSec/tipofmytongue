1
00:00:00,000 --> 00:00:03,490
gatekeeper exposed

2
00:00:03,490 --> 00:00:08,700
morning so let's talk about exposing
gatekeeper my name is Patrick Warren

3
00:00:08,700 --> 00:00:14,099
alive worked at a bunch of acronyms
places on the director of R&D at snack

4
00:00:14,099 --> 00:00:18,910
so senators crowdsourced vulnerability
discovery ensure we think that currently

5
00:00:18,910 --> 00:00:23,430
humans are still better finding
vulnerabilities than machines so

6
00:00:23,430 --> 00:00:26,740
basically we have added security
researchers freelancers from all over

7
00:00:26,740 --> 00:00:30,810
the world who signed up with us to find
bugs in our customers websites mobile

8
00:00:30,810 --> 00:00:36,030
apps IOT devices and networks and let
you know a little knots in secret secret

9
00:00:36,030 --> 00:00:38,520
customer security really sucks

10
00:00:38,520 --> 00:00:42,700
panettone money trail researchers top
researchers about to hit two hundred

11
00:00:42,700 --> 00:00:45,840
thousand dollars that we've paid out
from under abilities so if you're

12
00:00:45,840 --> 00:00:50,430
interested in doing some bug bounty
hunting finding some vulnerabilities in

13
00:00:50,430 --> 00:00:56,090
lab getting paid definitely check out
enact dot com all rights in these talk

14
00:00:56,090 --> 00:01:00,609
divided into three parts going to start
with a brief technical overview of

15
00:01:00,609 --> 00:01:06,299
deeper following that to talk about ways
I found to bite a steeper and then

16
00:01:06,299 --> 00:01:10,340
finally we're gonna end with higher on a
tool to protect Mac users because as

17
00:01:10,340 --> 00:01:16,759
we'll see Apple screwed up some taxes as
hacking any technology to look for

18
00:01:16,759 --> 00:01:20,490
security vulnerabilities I think it's
good to thoroughly understand it let's

19
00:01:20,490 --> 00:01:25,679
dive in and talk about how do you keep
her works under the hood now I'm sure

20
00:01:25,680 --> 00:01:28,979
you're all aware your security
professionals that yes contrary to what

21
00:01:28,979 --> 00:01:34,229
Apple kinda wants us to think max do in
fact get now turns out though most are

22
00:01:34,229 --> 00:01:39,380
trojans which means they require user
interaction to achieve infection since

23
00:01:39,380 --> 00:01:45,270
about 2006 we seeing a good number of OS
X and OS 10 Trojans and many many Mac

24
00:01:45,270 --> 00:01:50,158
users infecting themselves so in 2012
Apple had been kinda getting tired of

25
00:01:50,159 --> 00:01:53,780
this basically you know there's always
news about Mac malware all these Mac

26
00:01:53,780 --> 00:01:58,079
botnets so they decided to do something
about this and introduced gatekeeper

27
00:01:58,079 --> 00:02:04,880
Saudi keeper is a built-in security
component sacks and has really one job

28
00:02:04,880 --> 00:02:08,359
one goal and that is to block
unauthorized

29
00:02:08,360 --> 00:02:13,130
code from the Internet in order to
protect naive Mac users so Apple states

30
00:02:13,130 --> 00:02:17,790
that if a downloaded application was
developed by an unknown developer that's

31
00:02:17,790 --> 00:02:22,100
one with no developer I D or was
tampered with for example in download

32
00:02:22,100 --> 00:02:26,510
gatekeeper can block the application
from being installed now as you can see

33
00:02:26,510 --> 00:02:30,560
on the slide in a pop up there at the
bottom it's the user even tries to run

34
00:02:30,560 --> 00:02:35,450
this unauthorized are tempered code
gatekeeper will detect and drop this pop

35
00:02:35,450 --> 00:02:39,010
up in the only option is to click OK
which essentially kills the application

36
00:02:39,010 --> 00:02:43,760
cities our tenth run the application
easily even if they they try to topple

37
00:02:43,760 --> 00:02:49,600
touts deeper deeper as an essential core
OS component and one could argue that

38
00:02:49,600 --> 00:02:52,920
it's one of the cornerstones
technologies kind of their security

39
00:02:52,920 --> 00:03:00,179
posture there's two scenarios were
deeper can protect max users can help

40
00:03:00,180 --> 00:03:04,180
prevent users who are tricked into
downloading and executing malicious code

41
00:03:04,180 --> 00:03:08,870
and honestly attackers are pretty
convincing see you can't blame users too

42
00:03:08,870 --> 00:03:13,110
much right we're probably not gonna fall
for these attacks but there's a decent

43
00:03:13,110 --> 00:03:16,360
percentage of the population that's
going to be tricked into these attacks

44
00:03:16,360 --> 00:03:20,330
in areas there's a quote I like that's
basically there's no cash for human

45
00:03:20,330 --> 00:03:25,130
stupidity Saudi keeper does a pretty
good job blocking attacks from a variety

46
00:03:25,130 --> 00:03:29,320
of sources for example the user goes to
website and its been actor thats

47
00:03:29,320 --> 00:03:33,660
malicious website I might try to trick
the user and say hey your computer is

48
00:03:33,660 --> 00:03:38,079
infected please download install this
application to clean your computer of

49
00:03:38,080 --> 00:03:41,230
course when the user downloads and runs
that application then they're really

50
00:03:41,230 --> 00:03:46,018
infected or similarly users go to an
adult websites malicious werman hacked

51
00:03:46,019 --> 00:03:51,239
might say hey in order to watch the
adult content please install this plugin

52
00:03:51,239 --> 00:03:53,140
so I've been told

53
00:03:53,140 --> 00:03:57,149
obviously if the user goes and installs
that plugin or that code it's going to

54
00:03:57,150 --> 00:04:02,510
be malicious and then they just so he
tries to protect naive users even if

55
00:04:02,510 --> 00:04:07,828
they are tricked or coerced into running
something that's potentially a beekeeper

56
00:04:07,829 --> 00:04:12,570
can also protect OS X users to more
advanced adversaries its content is

57
00:04:12,570 --> 00:04:18,010
distributed in securely so for example
over HTTP outside the Mac App Store

58
00:04:18,010 --> 00:04:20,380
attacker with network level

59
00:04:20,380 --> 00:04:24,990
access the intercept and inject
malicious code into the down luckily

60
00:04:24,990 --> 00:04:30,330
gatekeeper verifies digital signature of
any download so we don't have to worry

61
00:04:30,330 --> 00:04:35,950
about such as to 2016 you know you would
think that most downloads distributed

62
00:04:35,950 --> 00:04:40,930
over HTTPS securely anyways all turns
out unfortunately that's not really the

63
00:04:40,930 --> 00:04:45,640
case I looked at some security products
last year and actually every single

64
00:04:45,640 --> 00:04:49,659
piece of Mac security software was
distributed legitimately from the

65
00:04:49,660 --> 00:04:53,940
customer the company's websites over
HTTP again this means if there's a

66
00:04:53,940 --> 00:04:57,490
network level adversary may be a nation
state or someone with such capabilities

67
00:04:57,490 --> 00:05:01,460
they could in theory man in the middle
of this attack so this is kind of

68
00:05:01,460 --> 00:05:06,239
unfortunate but luckily in Syria dig
deeper for Texas against alright so how

69
00:05:06,240 --> 00:05:10,160
does gatekeeper actually work well a
pretty high level actually fairly

70
00:05:10,160 --> 00:05:15,770
straight 420 user downloads a file a
special quarantine action gets added to

71
00:05:15,770 --> 00:05:20,419
this file then when the user goes to run
this downloaded file for example by

72
00:05:20,420 --> 00:05:24,330
double-clicking since the quarantine
action has been set

73
00:05:24,330 --> 00:05:28,820
gatekeeper checks the file to ensure
that it conforms to new users d keeper

74
00:05:28,820 --> 00:05:34,099
settings to the default is to only allow
apps that has been signed with an Apple

75
00:05:34,100 --> 00:05:38,300
Developer idea or by Apple proper you
can jack the setting up to the very most

76
00:05:38,300 --> 00:05:43,070
stringent level which will only allow
codes from the Mac App Store so let's

77
00:05:43,070 --> 00:05:47,140
take a closer look at this quarantine
action because this is what triggers

78
00:05:47,140 --> 00:05:52,219
deeper inspection so you know i text
files can have extended attributes

79
00:05:52,220 --> 00:05:58,450
basically file metadata for example when
you color a folder in Finder it's stored

80
00:05:58,450 --> 00:06:02,990
as an extended action and yes the files
that are downloaded from the Internet

81
00:06:02,990 --> 00:06:08,190
get tagged with a quarantine attribute
name colm . apple.com now you can view

82
00:06:08,190 --> 00:06:12,170
these from the terminal the the X a
determined so here you can see I

83
00:06:12,170 --> 00:06:16,670
downloaded a text file using Chrome and
if I use the Exeter man I can dump some

84
00:06:16,670 --> 00:06:21,000
of the extended attributes for example
we can then see that com dot Apple dock

85
00:06:21,000 --> 00:06:23,660
quantity actually

86
00:06:23,660 --> 00:06:27,260
the Common App about quarantine
attribute was originally just used for a

87
00:06:27,260 --> 00:06:32,020
technology called filed quarantine it
was introduced in Leopard and it's still

88
00:06:32,020 --> 00:06:36,460
used today and is responsible for the
pop-up you get for any downloaded

89
00:06:36,460 --> 00:06:39,510
content from the Internet that says are
you sure you want to open this file

90
00:06:39,510 --> 00:06:41,680
because it was downloaded from the
Internet

91
00:06:41,680 --> 00:06:44,710
very important to understand that first
this is not a keeper the source file

92
00:06:44,710 --> 00:06:48,840
quarantined and also this popup is going
to be shown for any content even

93
00:06:48,840 --> 00:06:53,320
continent sign has not been tampered in
transit an extra layer that Apple kinda

94
00:06:53,320 --> 00:06:58,000
likes to put up there today this
attribute as I mentioned is also used to

95
00:06:58,000 --> 00:07:02,760
as a kind of like a trigger event
receiver now besides using the Exeter

96
00:07:02,760 --> 00:07:07,849
man you can also programmatically dump
the extended actually it's rainy style

97
00:07:07,850 --> 00:07:11,910
programmatically it's just a dictionary
on its serialize so it's very easy

98
00:07:11,910 --> 00:07:15,530
dumping if you programmatically account
of parcels out a little better against

99
00:07:15,530 --> 00:07:18,700
the text file I downloaded we can see
there's the application that downloads

100
00:07:18,700 --> 00:07:23,950
sat down with a timestamp when it was
downloaded the URL from where the file

101
00:07:23,950 --> 00:07:29,560
was downloaded from house in a few times
that disquieting actually is added for

102
00:07:29,560 --> 00:07:33,330
all files that are downloaded from the
Internet well it turns out this is kind

103
00:07:33,330 --> 00:07:38,090
of an imp oversimplification to hear
I've coded up a custom downloader a few

104
00:07:38,090 --> 00:07:42,570
lines of code just a lil you I a user
puts in a URL links download and it will

105
00:07:42,570 --> 00:07:46,849
download the file and we did run X
adirondack file was downloaded we can

106
00:07:46,850 --> 00:07:51,550
see that there are no file attributes
which is kinda weird this file was just

107
00:07:51,550 --> 00:07:54,240
downloaded from the internet so what
what's going on

108
00:07:54,240 --> 00:07:58,760
well turns out it's the responsibility
of the downloading applications to

109
00:07:58,760 --> 00:08:03,030
support the notion of quality attributes
so there's two ways and application

110
00:08:03,030 --> 00:08:07,919
supports the first is manually so an
application can call these set resource

111
00:08:07,919 --> 00:08:12,330
values method and tacit a dictionary
just a key-value pair and the key should

112
00:08:12,330 --> 00:08:17,659
be NSURL quarantine properties and then
the values are any values you want for

113
00:08:17,660 --> 00:08:23,410
the 2003 extended the code in my custom
downloader and now any files downloaded

114
00:08:23,410 --> 00:08:28,919
with my little at will have the clinton
actually doing it manually is a little

115
00:08:28,919 --> 00:08:32,659
tedious you gotta adds an extra codes
are trying to problematic so I decided

116
00:08:32,659 --> 00:08:33,260
to make it

117
00:08:33,260 --> 00:08:37,900
a little easier so it turns out that you
can simply set a key in the applications

118
00:08:37,900 --> 00:08:43,030
info topless file which is a property
list file and basically you set the

119
00:08:43,030 --> 00:08:49,709
Alice file quarantine enabled key
incentive to true now anytime file

120
00:08:49,710 --> 00:08:53,240
download via this application the
operating system will automatically add

121
00:08:53,240 --> 00:08:58,290
to file your application still has to
set this value in the property info

122
00:08:58,290 --> 00:09:02,819
topless but other than that everything
will automatically have that wanted to

123
00:09:02,820 --> 00:09:07,490
hear again I took out my old code just
set that property list he and now any

124
00:09:07,490 --> 00:09:13,060
files downloaded agency has a quality
attributes that was a quarantine Ashley

125
00:09:13,060 --> 00:09:17,619
again anytime a file is executed that
has the set deeper will automatically be

126
00:09:17,620 --> 00:09:23,420
invoked will examine the end-to-end
gatekeeper process is you know somewhat

127
00:09:23,420 --> 00:09:27,510
rather complicated as this overview
shows a lot of different steps user mode

128
00:09:27,510 --> 00:09:32,780
components but no worries were gonna
dive into each of these steps we have a

129
00:09:32,780 --> 00:09:38,709
really good understanding of exactly
what's going on so the first thing is a

130
00:09:38,710 --> 00:09:42,430
user double clicks a file that they just
downloaded and in this case will soon

131
00:09:42,430 --> 00:09:47,729
the files on signs eventually gatekeeper
will actually blocked so finder will

132
00:09:47,730 --> 00:09:51,990
handle this click and by means of the
launch services framework will send an

133
00:09:51,990 --> 00:09:56,530
XP CD message to get the application
watch XTC messages simply and IDC

134
00:09:56,530 --> 00:10:02,449
message messages sent to another process
so specifically as the call stack shows

135
00:10:02,450 --> 00:10:07,380
the spawn he launched his function is
invoked to send the message I have

136
00:10:07,380 --> 00:10:10,480
dumped some of the arguments in the
values that are in this message and we

137
00:10:10,480 --> 00:10:15,430
can see there's a label the past the
application and an interesting attribute

138
00:10:15,430 --> 00:10:20,270
that has spawned via launched estopped
flag what this does is this indicates

139
00:10:20,270 --> 00:10:24,500
that application should be launched but
in a suspended state will see that this

140
00:10:24,500 --> 00:10:28,460
is what allows gatekeeper to validate
the application and if it's unsigned and

141
00:10:28,460 --> 00:10:31,510
I trusted it'll kill it so the
application will be spawned it'll be in

142
00:10:31,510 --> 00:10:36,530
the suspended state nothing will
actually run yet right to launch the

143
00:10:36,530 --> 00:10:38,100
gets this XTC message

144
00:10:38,100 --> 00:10:44,060
finer what does it simply turns around
and makes a system call kazakhstan now

145
00:10:44,060 --> 00:10:48,349
if you look at the call stack now this
is incorrect modes you can see that this

146
00:10:48,350 --> 00:10:54,319
call passes through Apple's quarantine .
tax extension Cecilia cause the hook

147
00:10:54,319 --> 00:10:59,769
vino to check exact function now this
function is part of policy module for

148
00:10:59,769 --> 00:11:05,069
mandatory access control or Mac for some
time to come to dig into all this cum

149
00:11:05,069 --> 00:11:09,920
policy but suffice to say it checks
flags and then we'll bail early if the

150
00:11:09,920 --> 00:11:14,819
user has previously approved the style
or if this file is on a read only file

151
00:11:14,819 --> 00:11:20,310
system for example a dmg that was
downloaded from right now we're back in

152
00:11:20,310 --> 00:11:24,469
user mode the application has been
spawned but is in a suspended states

153
00:11:24,470 --> 00:11:29,540
nothing actually running yet now if the
app has the quarantine action you set

154
00:11:29,540 --> 00:11:36,569
watch services makes another XTC request
this time to core services agent sorry

155
00:11:36,569 --> 00:11:42,170
core services you I agents again you can
see I've dumps d arguments in this

156
00:11:42,170 --> 00:11:46,189
message and we can see again it includes
the applications path and then some

157
00:11:46,189 --> 00:11:52,490
interesting for a matter such as a risk
category as its name implies the core

158
00:11:52,490 --> 00:11:58,079
services you I agent is Kirk or service
that can handle you I so pop ups and

159
00:11:58,079 --> 00:12:02,769
whatnot we look at the stacktrace we can
see that when it gets an XP CD message

160
00:12:02,769 --> 00:12:07,410
it utilizes a class called gek
quarantine resolve it to talk to the

161
00:12:07,410 --> 00:12:12,500
experts text from now this framework
gets the files signing information call

162
00:12:12,500 --> 00:12:16,819
to the SEC copy signing information and
then classifies the file even if it's

163
00:12:16,819 --> 00:12:20,930
not know this is actually kinda where
gatekeeper proper is really doing its

164
00:12:20,930 --> 00:12:25,469
thing is examining the signature of the
file verifying to make sure it's not

165
00:12:25,470 --> 00:12:30,050
tampered with and then we'll clock
classify that file so what's the expert

166
00:12:30,050 --> 00:12:35,490
X framework as process and classified
the file or services you I agent creates

167
00:12:35,490 --> 00:12:38,610
an alert because remember in this case
the file we just downloaded it and are

168
00:12:38,610 --> 00:12:40,490
trying to execute is

169
00:12:40,490 --> 00:12:45,270
so you can see the G cake warranty
resolver alert for path method

170
00:12:45,270 --> 00:12:51,089
allocating an excellent and a slur is
just how you create a pop up in OSX so

171
00:12:51,089 --> 00:12:54,500
the bottom right you can see the
snippets and disassembly that handles

172
00:12:54,500 --> 00:12:58,450
what happens when the user clicks okay
because again this file is unsigned

173
00:12:58,450 --> 00:13:01,350
there's no option to even allow the user
to run it just gonna tell the user I'm

174
00:13:01,350 --> 00:13:05,270
blocking it and when user clicks okay as
we can see in the disassembly and

175
00:13:05,270 --> 00:13:09,040
actually kills the unsigned or the
unapproved applications specifically by

176
00:13:09,040 --> 00:13:13,810
calling Ellis calamities gatekeeper
actually blocks the application from

177
00:13:13,810 --> 00:13:19,089
actually running what happens if the
downloading application though was

178
00:13:19,089 --> 00:13:21,240
signed and approved by the user

179
00:13:21,240 --> 00:13:25,560
well two things first the quarantine
attributes lags get updated specifically

180
00:13:25,560 --> 00:13:31,589
the they get bored with forty and then
remember the application was filed in a

181
00:13:31,589 --> 00:13:37,670
suspended state the last will then call
elisete application information item to

182
00:13:37,670 --> 00:13:42,099
resume the application is at this point
gatekeepers said hey this app looks good

183
00:13:42,100 --> 00:13:45,750
yeses from the internet but it's signed
an allowance and allow the application

184
00:13:45,750 --> 00:13:52,910
to resume and application can execute
them do it that's a fairly technical

185
00:13:52,910 --> 00:13:57,939
overview of file quarantine and deeper
analysis talk about how we can get

186
00:13:57,940 --> 00:14:02,550
unsigned unauthorized malicious code
executes

187
00:14:02,550 --> 00:14:07,920
I want to reiterate the goal of
gatekeeper to block unsigned

188
00:14:07,920 --> 00:14:12,589
unauthorized code from being able to
execute even if the user tries to run

189
00:14:12,589 --> 00:14:19,550
that circle that has to get unsigned
malicious code to run to talk about some

190
00:14:19,550 --> 00:14:24,589
known shortcomings of getting my opinion
these are not buy passes for say they're

191
00:14:24,589 --> 00:14:28,910
just good things to be aware of the
first if you have a remote exploit for

192
00:14:28,910 --> 00:14:33,390
example and / or in a browser if your
shell command is able to download a file

193
00:14:33,390 --> 00:14:37,350
it can likely ensure that that file
doesn't have the clinton attribute set

194
00:14:37,350 --> 00:14:41,000
you know can manually remove them or
manually download it to make sure those

195
00:14:41,000 --> 00:14:45,540
those values that quarantine value is
even there at eight o'clock to slide

196
00:14:45,540 --> 00:14:46,810
that articulates this

197
00:14:46,810 --> 00:14:50,949
if you have remote arbitrary code
execution you're not gonna have to be

198
00:14:50,950 --> 00:14:55,070
worried about the gatekeeper only gets
invoked if the quarantine attributes are

199
00:14:55,070 --> 00:15:01,100
set on the earlier the downing
application also has the support the

200
00:15:01,100 --> 00:15:05,350
notion of quarantine fala experts
luckily essentially all major

201
00:15:05,350 --> 00:15:10,890
applications they do so browsers email
clients chat lines they all will for any

202
00:15:10,890 --> 00:15:15,420
file downloaded from them will have this
one teen attributes are there some

203
00:15:15,420 --> 00:15:20,060
smaller or third-party applications that
don't support the notion of course he

204
00:15:20,060 --> 00:15:26,020
actually it's so one example of this was
I went I were in was a Mac Trojan was

205
00:15:26,020 --> 00:15:30,600
alone rather just a Trojan that was
spread via infected applications on

206
00:15:30,600 --> 00:15:34,980
piratebay so photoshop those things
right so users would be you know it I

207
00:15:34,980 --> 00:15:38,580
swear that they would download that and
run that even though these applications

208
00:15:38,580 --> 00:15:43,220
were unsigned and malicious the torrent
downloader for example mutual did not

209
00:15:43,220 --> 00:15:47,070
support while clinton attributes to the
file would never get that quirky

210
00:15:47,070 --> 00:15:50,240
attribute sets in the user double-click
to run it

211
00:15:50,240 --> 00:15:53,800
gatekeeper would never get invoked never
examine the file and yes users would get

212
00:15:53,800 --> 00:16:02,050
photoshop but they would also get
generic gatekeeper bypass the first is

213
00:16:02,050 --> 00:16:09,439
CEE 2014 8826 and it leverage in
militias jar file to bypass key our it

214
00:16:09,440 --> 00:16:14,380
required job to be installed now the 200
be talking about today worked on any

215
00:16:14,380 --> 00:16:18,900
default OS install the first was an
attack described last year that

216
00:16:18,900 --> 00:16:22,990
leveraged eyelids hijacking to fully
bypass keeper and the other one time to

217
00:16:22,990 --> 00:16:29,030
talk about today as well as a new attack
that also affected El Capitan alright so

218
00:16:29,030 --> 00:16:33,790
the first bypassed by now examine
gatekeeper and I found that it does a

219
00:16:33,790 --> 00:16:37,680
great job verifying the downloaded
application bundle that gets executed

220
00:16:37,680 --> 00:16:41,949
when the user double clicks you touches
at all it'll break the digital signature

221
00:16:41,950 --> 00:16:46,589
and a gatekeeper will resoundingly
locket so you really can't modify that

222
00:16:46,589 --> 00:16:52,970
application but external content was not
verified which is generally OK unless

223
00:16:52,970 --> 00:16:56,430
the application that the user runs is
linked against such

224
00:16:56,430 --> 00:17:01,790
external content so what we can do in 33
statuses pretty easy to bypass de a

225
00:17:01,790 --> 00:17:06,270
keeper for the first and most important
is we need to find a sign application

226
00:17:06,270 --> 00:17:11,179
that contains an external relative
dependency to hijack mobile dialer will

227
00:17:11,179 --> 00:17:14,360
show what this means in a second and
then we can do is you can build a

228
00:17:14,359 --> 00:17:20,339
malicious installer package PNG image as
that image that we can create the

229
00:17:20,339 --> 00:17:24,260
necessary folder structure and then we
can either host this online and try to

230
00:17:24,260 --> 00:17:28,309
coerce users into running it or
downloading it or more stealthily we can

231
00:17:28,309 --> 00:17:34,270
now inject it into insecure downloads if
we have never global capabilities right

232
00:17:34,270 --> 00:17:37,720
stuff like this is the most important
one we need to find a gatekeeper

233
00:17:37,720 --> 00:17:43,100
approved application with a relatively
external dependency on hijacked dynamic

234
00:17:43,100 --> 00:17:47,590
library so turns out that instruments
not out fits the bill we can see that

235
00:17:47,590 --> 00:17:52,059
it's trusted it's accepted by gatekeeper
right it signed by Apple proper so this

236
00:17:52,059 --> 00:17:57,389
means if the user downloads instruments
it's always gonna be allowed to run our

237
00:17:57,390 --> 00:18:02,020
if we dump its dependencies its imports
the libraries that imports run we can

238
00:18:02,020 --> 00:18:05,710
see that one exists outside the
application bundle outside the

239
00:18:05,710 --> 00:18:08,260
application packet but relative to

240
00:18:08,260 --> 00:18:12,660
so this means we can put this all in the
same installer package other reason

241
00:18:12,660 --> 00:18:15,860
instruments out has this is it doesn't
really expect to be distributed

242
00:18:15,860 --> 00:18:20,669
independently installed under Xcode
which is Apple's IDE so make sense for

243
00:18:20,670 --> 00:18:23,420
it to kind of have some shared
dependencies on that you know some code

244
00:18:23,420 --> 00:18:28,059
code reuse the basically when
instruments that act is none the less

245
00:18:28,059 --> 00:18:32,559
loader will look at its dependencies and
take wherever directory instruments that

246
00:18:32,559 --> 00:18:37,399
app is go up in this case one or two
directories and looks for that died 11

247
00:18:37,400 --> 00:18:43,430
then just loaded now we can create an
installer package with that required

248
00:18:43,430 --> 00:18:47,880
South basically so as I mentioned the
hijacker dialogue is external

249
00:18:47,880 --> 00:18:51,990
specifically it's in the shared
frameworks directory so we can create

250
00:18:51,990 --> 00:18:55,730
this file structure this folder
structure directory structure on a dmg

251
00:18:55,730 --> 00:18:59,820
on an installer package so the very top
you can see in the application's

252
00:18:59,820 --> 00:19:03,320
directory is instruments that out and we
have the other soldiers for example the

253
00:19:03,320 --> 00:19:08,889
shared frameworks directory and there we
put our malicious unsigned island now if

254
00:19:08,890 --> 00:19:12,830
the user sees this installer package
they're gonna be confusing like what I

255
00:19:12,830 --> 00:19:17,290
clicked with all these extra files so
obviously we should clean this up so we

256
00:19:17,290 --> 00:19:22,340
can hide the files and folders that we
don't see we can set a top-level aliases

257
00:19:22,340 --> 00:19:26,760
one nice thing for the user to click on
and we can change the icon background

258
00:19:26,760 --> 00:19:31,710
and make it read only so if we do this
this is an example of a D&G image that

259
00:19:31,710 --> 00:19:36,060
we can present to the user now this is
great because we can fully customize it

260
00:19:36,060 --> 00:19:40,169
so in this case a user has been tricked
into Downing fake flash update we can

261
00:19:40,170 --> 00:19:44,630
build this dmg so it looks exactly like
this or if they are even downloading a

262
00:19:44,630 --> 00:19:49,040
legitimate flash installer thats
distributed over HTTP again this is the

263
00:19:49,040 --> 00:19:54,060
DMG we can provide to them pretty
freakin that's what happens when they

264
00:19:54,060 --> 00:19:57,649
run it well we have max gatekeeper
setting so jacked up all the way to say

265
00:19:57,650 --> 00:20:02,920
only allow code from the master lets the
user gets this dmg either they you know

266
00:20:02,920 --> 00:20:08,420
where we injected into an insecure
download once they click on it they will

267
00:20:08,420 --> 00:20:12,200
get the quarantine pop but again this
happens for any file is downloaded from

268
00:20:12,200 --> 00:20:16,940
the Internet it signed an untapped so
they're likely and click OK because you

269
00:20:16,940 --> 00:20:20,380
know they are in the process of
downloading software so once they do it

270
00:20:20,380 --> 00:20:24,410
gatekeeper will examine what is being
executed and it's really instruments

271
00:20:24,410 --> 00:20:28,940
that the gatekeeper says alright this is
validated it signed by Apple proper I'm

272
00:20:28,940 --> 00:20:33,970
allowed to run as soon as a let it run
the OS dynamic linker and loader will

273
00:20:33,970 --> 00:20:36,890
start loading the dialogues that
instruments that out is dependent on

274
00:20:36,890 --> 00:20:41,910
everyone is external to the application
directory is not validated so we'll load

275
00:20:41,910 --> 00:20:46,770
and execute as soon as it executes us we
have unsigned code execution and we can

276
00:20:46,770 --> 00:20:49,750
kill and Sherman sought out before it
even shown to the user because remember

277
00:20:49,750 --> 00:20:52,090
this case of probably expecting a flash

278
00:20:52,090 --> 00:20:56,178
and then we can obviously show the user
whatever they want so we can kick off

279
00:20:56,179 --> 00:20:59,720
illegitimate / installer while in the
background installing some militias

280
00:20:59,720 --> 00:21:05,029
inside now where Apple patched the
cinema talk a little bit more about the

281
00:21:05,029 --> 00:21:09,370
details of how they passed it but
basically statically check the download

282
00:21:09,370 --> 00:21:13,049
an application to make sure doesn't have
any of these external pilots but

283
00:21:13,049 --> 00:21:17,789
external content is still not verified
which is a problem if the application

284
00:21:17,789 --> 00:21:22,900
either execute were dynamically loads at
runtime any other external content so

285
00:21:22,900 --> 00:21:27,470
here's another gatekeeper by that so you
can step one the most important to find

286
00:21:27,470 --> 00:21:30,390
a signed application something that's
going to be accepted

287
00:21:30,390 --> 00:21:35,820
verified by gatekeeper that at runtime
loads or execute relatively external

288
00:21:35,820 --> 00:21:40,090
binary or dynamic library and then again
you can create this malicious installer

289
00:21:40,090 --> 00:21:46,580
package that can be hosted online or
injected into an HTTP download the first

290
00:21:46,580 --> 00:21:52,350
example is Photoshop Photoshop execute
as the pseudocode on the right shows

291
00:21:52,350 --> 00:21:56,799
what does it looks up one directory from
its application for a folder or

292
00:21:56,799 --> 00:22:00,889
directory called plugins penetrates
through all of that and any plugins it

293
00:22:00,890 --> 00:22:05,940
finds in their loads them and execute
how this is all done at runtime so

294
00:22:05,940 --> 00:22:10,399
gatekeeper has already validated
Photoshop databse Zach aids valid signed

295
00:22:10,399 --> 00:22:12,449
by Adobe it has not been tampered with

296
00:22:12,450 --> 00:22:16,610
looks good and then let it run and then
again these malicious plugins get loaded

297
00:22:16,610 --> 00:22:21,129
so this is again how we can buy that now
there's some limitations of the

298
00:22:21,130 --> 00:22:25,000
Photoshop attack wanna requires
Photoshop to be run this is great if

299
00:22:25,000 --> 00:22:29,070
you're tricking users into downloading a
free version of Photoshop but if you're

300
00:22:29,070 --> 00:22:34,000
trying to download say some Mac security
software you like injects Photoshop into

301
00:22:34,000 --> 00:22:37,919
the download gonna be massive and then
when they double click what they think

302
00:22:37,919 --> 00:22:41,909
is the you know the eighty installer
like Photoshop gonna pop up because it

303
00:22:41,909 --> 00:22:46,679
has to run before the plugins get loaded
so it's really not that I wanted to find

304
00:22:46,679 --> 00:22:50,380
kind of a better attack that would work
on any deeper settings and also would be

305
00:22:50,380 --> 00:22:56,169
a lot more stuff when it when I founded
Apple signed binary cold icy thwart that

306
00:22:56,169 --> 00:23:01,380
when executed looks for an absolute
executable called I D tool d in the same

307
00:23:01,380 --> 00:23:02,370
directory

308
00:23:02,370 --> 00:23:08,209
then execute since the second tool aidid
rudy is programmatically executed it is

309
00:23:08,210 --> 00:23:15,140
not verified by geeky so it can be
unsigned attack they can be delivered as

310
00:23:15,140 --> 00:23:19,720
a malicious installer package posted
online injected into needs to be the

311
00:23:19,720 --> 00:23:24,190
first thing I do is I create a top-level
alias the points to apples to this is my

312
00:23:24,190 --> 00:23:28,860
seat and again you can name the icon
place whatever I can you want change the

313
00:23:28,860 --> 00:23:31,139
name of this and this

314
00:23:31,140 --> 00:23:36,300
Elias now ensures that when the user
clicks at the Apple signed to run so

315
00:23:36,300 --> 00:23:40,020
that Apple sign tool I see tool again
you can rename it to whatever you want

316
00:23:40,020 --> 00:23:44,809
to add the dot at extension because it's
a command-line executable and on my Mac

317
00:23:44,809 --> 00:23:49,030
OS X when you double-click on a
command-line executable terminal window

318
00:23:49,030 --> 00:23:54,760
pops up you rename it . that's good
because we don't want is popping up on

319
00:23:54,760 --> 00:24:01,540
you do step three is you plant the
winery that matches what Apple's winery

320
00:24:01,540 --> 00:24:06,920
is looking for so this is I B to D again
this can be unsigned militias whatever

321
00:24:06,920 --> 00:24:10,280
you want it to be an asset for if you
need to turn around and execute another

322
00:24:10,280 --> 00:24:15,120
application since I see tool and I de
Tulear both expected to be command line

323
00:24:15,120 --> 00:24:20,149
tools your unsigned I D tool the
obviously execute anything once

324
00:24:20,150 --> 00:24:27,240
including a nice application so the
keeper was truly broken in my humble

325
00:24:27,240 --> 00:24:30,670
opinion I thought it was you know easy
to bypass completely broken so let's

326
00:24:30,670 --> 00:24:37,070
talk about what Apple did 261 abilities
Seattle packs the first bug in Yosemite

327
00:24:37,070 --> 00:24:42,100
service pack 4 and the second bug in El
Capitan Service Pack 1 so let's look

328
00:24:42,100 --> 00:24:47,909
exactly how they went about passion
these vulnerabilities call is when an

329
00:24:47,910 --> 00:24:52,610
application is statically linked against
a an external dynamic library that can

330
00:24:52,610 --> 00:24:53,409
be placed with

331
00:24:53,410 --> 00:24:58,130
inseam malicious package so when Apple
indicated that they had released

332
00:24:58,130 --> 00:25:02,930
attached I ran my proof of concept and
it sailed which was a good thing from a

333
00:25:02,930 --> 00:25:08,620
security place nice error message in
syslog in the basically said sales dilam

334
00:25:08,620 --> 00:25:13,810
check so it appeared that Apple has now
implemented a patch to verify externally

335
00:25:13,810 --> 00:25:19,889
linked external silence so I grabbed the
file system for that string for that

336
00:25:19,890 --> 00:25:23,730
error message I started within the
expert act framework which makes sense

337
00:25:23,730 --> 00:25:28,450
because this is pretty much ready keeper
proper is implemented in his road so I

338
00:25:28,450 --> 00:25:32,520
disassembled the expert X framework
library and you can see that there's a

339
00:25:32,520 --> 00:25:36,690
new method there that was implementing
that's called performed Island bundled

340
00:25:36,690 --> 00:25:42,700
check as you can see in the disassembly
if this method fails the error messages

341
00:25:42,700 --> 00:25:44,420
then displayed in stock

342
00:25:44,420 --> 00:25:49,300
this is kind of where the patch is
actually being dynamic bucket debugging

343
00:25:49,300 --> 00:25:52,940
you can determine the arguments that are
passed this new method the patch method

344
00:25:52,940 --> 00:25:57,330
can see basically argh 0 is the class
are gone is the message name and in the

345
00:25:57,330 --> 00:26:01,919
final Arg Arg three is actually the path
the application that's goood

346
00:26:01,920 --> 00:26:06,870
total sense gatekeepers verifying with
being executed so makes sense that you

347
00:26:06,870 --> 00:26:13,159
know this function with a capacity to
that application engineer d performed I

348
00:26:13,160 --> 00:26:17,610
left bundle check method nice town of
those three things first that allocates

349
00:26:17,610 --> 00:26:22,449
an instance of a new class called expert
act deliberate check conduct the methods

350
00:26:22,450 --> 00:26:27,090
for this new class using something like
last time once an instance of this class

351
00:26:27,090 --> 00:26:34,459
has been instantiated it invokes the
person max Marco message actually forced

352
00:26:34,460 --> 00:26:43,400
finally calls check commands with bundle
URL so check them and with URL method is

353
00:26:43,400 --> 00:26:47,520
really the heart of this new patch so
let's reverse engineer to find out

354
00:26:47,520 --> 00:26:52,710
exactly what it does so it turns out it
does too simple things for all dynamic

355
00:26:52,710 --> 00:26:55,960
library dependencies anything that
statically linked in the application

356
00:26:55,960 --> 00:26:59,480
that's about to be run insurers to
things

357
00:26:59,480 --> 00:27:02,260
ensures that either of these these
dynamic libraries

358
00:27:02,260 --> 00:27:08,190
within a trusted system directory so
something like / system / library or

359
00:27:08,190 --> 00:27:12,320
that they fall within the applications
bundle so in short applications that are

360
00:27:12,320 --> 00:27:16,480
linked against eyelids even signed
dynamic libraries that are outside the

361
00:27:16,480 --> 00:27:19,470
application bundles are but not allowed

362
00:27:19,470 --> 00:27:24,590
trusted OS past are gonna be blocked
actually a fairly reasonable but it only

363
00:27:24,590 --> 00:27:32,510
patches is one very specific external
content is still not really very high on

364
00:27:32,510 --> 00:27:36,879
the patch for my second book again I
started by re-running my proof of

365
00:27:36,880 --> 00:27:40,290
concepts and again it's failed which
some sturdy point of view is a good

366
00:27:40,290 --> 00:27:44,450
thing again gave me this nice error
message in syslog specifically failed

367
00:27:44,450 --> 00:27:48,960
gatekeeper checkers LG KE check is kind
of a helpful thing so again I grabbed

368
00:27:48,960 --> 00:27:52,880
the file system actually started looking
at X protect framework again because

369
00:27:52,880 --> 00:27:56,050
that's where the first act was
implemented and he asked that string

370
00:27:56,050 --> 00:28:01,080
showed up in that same binary so I
disassembled that file again looked for

371
00:28:01,080 --> 00:28:04,990
a cross reference to that strength and
again I found a new message this was

372
00:28:04,990 --> 00:28:10,280
called perform block list check now I
dynamically debug this method to see

373
00:28:10,280 --> 00:28:14,629
exactly you know what was going on and I
found it takes a path the application

374
00:28:14,630 --> 00:28:18,040
that's about Iran which again makes
sense and then a list of something

375
00:28:18,040 --> 00:28:24,440
called blocked six which I thought was
interesting that I reversed the block

376
00:28:24,440 --> 00:28:27,980
list check method and found that it does
too simple thanks

377
00:28:27,980 --> 00:28:31,970
the first thing it does is it gets the
application I D of the application

378
00:28:31,970 --> 00:28:35,670
that's about to execute again this is
the application the user has downloaded

379
00:28:35,670 --> 00:28:40,110
the keepers in the process of verifying
and then it checks is the application I

380
00:28:40,110 --> 00:28:40,629
D

381
00:28:40,630 --> 00:28:46,860
in a hard-coded blacklist so basically
all Apple did in this crash was

382
00:28:46,860 --> 00:28:53,360
blacklist the applications that I had
used in my proof of concept sorry Apple

383
00:28:53,360 --> 00:28:57,919
so let's summarize Apple's patches the
first one seems likely to prevent these

384
00:28:57,920 --> 00:29:01,780
external statically linked islands from
the abuse but again it only specifically

385
00:29:01,780 --> 00:29:05,660
blocks that one attack the second one
just blacklist

386
00:29:05,660 --> 00:29:09,940
very specific binaries I have used in
Apple's approval concept that are

387
00:29:09,940 --> 00:29:14,799
provided so again neither generically
block the execution of unsigned internet

388
00:29:14,799 --> 00:29:20,970
code which is what gatekeeper claims and
seeks to provide now since Apple's patch

389
00:29:20,970 --> 00:29:27,110
the second bugsy de 2015 7024 was so in
their words targeted its conceptually

390
00:29:27,110 --> 00:29:33,049
trivial to buy so all we need is three
things first an apple signed by injury

391
00:29:33,049 --> 00:29:39,179
which means a binder the gatekeeper will
allow that calls exact the POSIX lawn or

392
00:29:39,179 --> 00:29:44,049
systems and other execs another another
piece of content on a relative minor the

393
00:29:44,049 --> 00:29:48,090
one that can be placed in the same
installer package and I do want to point

394
00:29:48,090 --> 00:29:51,080
out that when I talk to Al about this
originally and provided them with the

395
00:29:51,080 --> 00:29:55,530
concept I articulated this very clearly
said guys there's the systemic a

396
00:29:55,530 --> 00:29:59,220
systemic issue the gatekeepers not
validating external content

397
00:29:59,220 --> 00:30:02,940
here's a proof of concept illustration
this but there's probably lots more

398
00:30:02,940 --> 00:30:07,480
applications out there I'm really kinda
lazy / on to you straight the problem

399
00:30:07,480 --> 00:30:12,710
but you know there's going to be a
simple script script that looks for

400
00:30:12,710 --> 00:30:16,169
Apple signed by injuries that called
exactly on relative buyers and I think

401
00:30:16,169 --> 00:30:21,220
the soft went to lunch came back and is
a list of candidate binaries and turns

402
00:30:21,220 --> 00:30:26,990
out the first one it found was aware
well how so if we monitor the file i/o

403
00:30:26,990 --> 00:30:32,190
for AC tool which was the first winery I
found we can see that when it's executed

404
00:30:32,190 --> 00:30:37,470
it looks for a binary in the same
directory called I D 2010 at the bottom

405
00:30:37,470 --> 00:30:43,450
can see if we place a binary in that
same directory called I D 2080 tool is a

406
00:30:43,450 --> 00:30:47,220
finds it will execute it so perfect this
is exactly what we need for our attack

407
00:30:47,220 --> 00:30:52,340
so literally all we have to do to buy
that Apple's patches take the same

408
00:30:52,340 --> 00:30:56,649
original proven concept and simply
replace IC tool which was blacklisted

409
00:30:56,650 --> 00:30:59,450
with a seat

410
00:30:59,450 --> 00:31:04,980
and has allowed us to bypass gatekeepers
even on a time of fully patched OSX

411
00:31:04,980 --> 00:31:09,600
again I'm sure there's lots of other
wineries that could be abused so again

412
00:31:09,600 --> 00:31:12,949
I'm lazy I found one you know approves

413
00:31:12,950 --> 00:31:19,100
right so videotape image straight the
stack usually

414
00:31:19,100 --> 00:31:26,320
observations first this is a test at $10
not to Fox fully patched gatekeeper is

415
00:31:26,320 --> 00:31:30,549
enabled and then there's only watched
items that are running and there's no

416
00:31:30,549 --> 00:31:36,700
process called John W right so what we
gonna do is we're gonna man in the

417
00:31:36,700 --> 00:31:37,330
middle

418
00:31:37,330 --> 00:31:41,879
Kaspersky download because as we'll see
this prestigious tributes their Mac

419
00:31:41,880 --> 00:31:48,840
security software over HTTP so the user
goes to Google Wave like oh I heard her

420
00:31:48,840 --> 00:31:52,629
talking there's Mac Miller I should
protect themselves so they typed

421
00:31:52,630 --> 00:31:54,019
security

422
00:31:54,019 --> 00:31:58,039
this is chris Christie's website I
haven't man in the middle desk when they

423
00:31:58,039 --> 00:32:02,940
click the download button this is gonna
start and http download now what I can

424
00:32:02,940 --> 00:32:07,880
do is intercept that download and inject
malicious unsigned code so I'm gonna do

425
00:32:07,880 --> 00:32:12,779
is an exact copy of my worm which is
known and unknown side so in theory

426
00:32:12,779 --> 00:32:16,860
gatekeepers to block this one because
the dow it has been temper and then to

427
00:32:16,860 --> 00:32:18,110
its been tampered with

428
00:32:18,110 --> 00:32:23,269
unsigned malicious code so you know
you'd you'd hope that would protect the

429
00:32:23,269 --> 00:32:28,600
user from this so as soon as the dollar
and finished using DoubleClick running

430
00:32:28,600 --> 00:32:32,199
software going up the quarantine popup
that basically just as hey you down and

431
00:32:32,200 --> 00:32:36,480
dispersed again this possibly be there
even if expressly download was not

432
00:32:36,480 --> 00:32:37,179
tampered with

433
00:32:37,179 --> 00:32:42,149
they get the download the DMG a double
click on it and we can see in a second

434
00:32:42,149 --> 00:32:46,580
the Kaspersky installer prompts users
find you nothing we were to happen the

435
00:32:46,580 --> 00:32:51,610
keeper hasn't popped up block the
executable we're going on but if we look

436
00:32:51,610 --> 00:32:56,469
at the process list we now see there's a
new process called Java W running and if

437
00:32:56,470 --> 00:33:01,779
we look at me code signatures this you
can do that with the code sign dash deep

438
00:33:01,779 --> 00:33:06,369
these flags will examine the code
signature Salazar file we can see that

439
00:33:06,369 --> 00:33:11,059
one side so this is a new process
running that's unsigned again deeper is

440
00:33:11,059 --> 00:33:14,940
supposed to block these things also if
we go to knock knock

441
00:33:14,940 --> 00:33:18,820
we can see that there is a new launch
agent that's been installed are

442
00:33:18,820 --> 00:33:22,879
specifically something called Java W you
not only was the unsigned code able to

443
00:33:22,879 --> 00:33:28,859
run it was also able to persistence and
if we look at this follow closely you

444
00:33:28,859 --> 00:33:33,199
can see that virus whole has flagged
this and if we load up the virus total

445
00:33:33,200 --> 00:33:37,539
page we can see that this is again I
weren't known piece of our defense is a

446
00:33:37,539 --> 00:33:40,859
complete fail multiple levels right
gatekeeper supposed to block Tamara

447
00:33:40,859 --> 00:33:44,330
downloads and it's supposed to protect
against unsigned malicious code running

448
00:33:44,330 --> 00:33:49,499
again this was on a fully patched system
and again this is the attack scenario

449
00:33:49,499 --> 00:33:52,859
that keeps me up at night where I'm sure
there's adversaries out there that are

450
00:33:52,859 --> 00:33:58,119
able to download or intercept man in the
middle in secure connections so now they

451
00:33:58,119 --> 00:34:06,178
have a capability to sleep to attack
even fully patched Mac OS so Apple did

452
00:34:06,179 --> 00:34:10,889
actually black list OC sorry AC tools
few days ago so again they're like well

453
00:34:10,889 --> 00:34:17,299
we should do something about this let's
just blacklist the new

454
00:34:17,299 --> 00:34:26,799
obviously didn't sixties stomach issue
again showed that my words carefully

455
00:34:26,799 --> 00:34:30,788
somewhat of an incompetent from security
plans you let's look at how we can kind

456
00:34:30,789 --> 00:34:35,529
of take matters into our own hands until
they release a real facts and had

457
00:34:35,529 --> 00:34:38,989
indicated that they are working on a
more comprehensive sex it's just taking

458
00:34:38,989 --> 00:34:46,629
them so first I looked in to see if I
can use various OS level consigning

459
00:34:46,629 --> 00:34:50,270
enforcement and you can do this via
source control it turns out there's a

460
00:34:50,270 --> 00:34:55,980
flag p.m. CST informant enforcement its
undocumented but it seems to enforce

461
00:34:55,980 --> 00:35:00,640
globally code signing all processes and
libraries however when I enable this

462
00:35:00,640 --> 00:35:05,759
even in a clean the AM and a lot of
crashes Safari which is randomly crash

463
00:35:05,760 --> 00:35:09,480
and it's also global so this means like
everything has to be signed so I develop

464
00:35:09,480 --> 00:35:14,250
a lot of software which is annoying and
I can't sign so mighty and this is

465
00:35:14,250 --> 00:35:15,530
really not a good option

466
00:35:15,530 --> 00:35:20,990
undocumented since the break even Apple
software and its global so I think we

467
00:35:20,990 --> 00:35:26,020
need a custom fix the customs now after
I detailed the first date hereof bypass

468
00:35:26,020 --> 00:35:30,700
using dial-up hijacking petrol also
known as OS X reverser on Twitter

469
00:35:30,700 --> 00:35:35,839
released a new tool called date cover
basically it's a current extension that

470
00:35:35,840 --> 00:35:42,040
installed a mandatory access on a map
and I did was in blocks unsigned pages

471
00:35:42,040 --> 00:35:47,430
in any sign process now this is great
because it's worth daily attack but it

472
00:35:47,430 --> 00:35:52,069
doesn't doesn't block doesn't prevent D
second Douglas the standalone minors but

473
00:35:52,070 --> 00:35:55,820
really to school he open source and it
really inspired me to write another tool

474
00:35:55,820 --> 00:36:01,030
so I figured I'd write a similar tool
that simply blocks the execution of all

475
00:36:01,030 --> 00:36:04,790
unsigned buyers from the internet that
statement sounds familiar it's because

476
00:36:04,790 --> 00:36:10,009
that's what gatekeeper says it'll do so
it turns out Apple actually already uses

477
00:36:10,010 --> 00:36:14,380
Sandboxie to validate a lot of things at
runtime and I figured it'd be trivial to

478
00:36:14,380 --> 00:36:19,400
create a runtime hook to monitor
execution without so conceptually what

479
00:36:19,400 --> 00:36:21,340
we're going to do is three things

480
00:36:21,340 --> 00:36:25,780
check anytime a new process has started
does that by now we have a quarantine

481
00:36:25,780 --> 00:36:29,610
ashley is it from the internet and then
we're going to check who has previously

482
00:36:29,610 --> 00:36:34,380
approved by the user and it wasn't gonna
make sure that that binary is other

483
00:36:34,380 --> 00:36:38,090
words were gonna block unsigned
non-approved Internet Diners again doing

484
00:36:38,090 --> 00:36:43,780
what he says it will do so the first
thing we need to be able to do is

485
00:36:43,780 --> 00:36:47,620
monitor process creation so we can check
it on my injury is from the internet and

486
00:36:47,620 --> 00:36:50,069
if so if it's signed and trusted

487
00:36:50,070 --> 00:36:54,210
series of blog posts on this that detail
how to do this

488
00:36:54,210 --> 00:36:58,010
short we can use the kernel
authorization for a day off subsystem to

489
00:36:58,010 --> 00:37:01,690
do this and apple provides this
framework for kernel developers actually

490
00:37:01,690 --> 00:37:05,750
a really nice framework is what you can
do is you can register a listener for a

491
00:37:05,750 --> 00:37:09,670
whole variety of events such as process
creation and the Alaska will

492
00:37:09,670 --> 00:37:14,220
automatically call you in time that
occurs that really incurring much

493
00:37:14,220 --> 00:37:21,368
so this is what the code looks like we
invoke chaos listen Scopus this week

494
00:37:21,369 --> 00:37:25,240
tells the chaos framework a were
interested in some event and you passed

495
00:37:25,240 --> 00:37:30,589
out there's a variety of schools which
choose the chaos scope file up and then

496
00:37:30,590 --> 00:37:35,580
we also provide a call back and since we
registered the kiosk scopes I'll scope

497
00:37:35,580 --> 00:37:39,930
anytime a file event occurs we will get
automatically invoked by the operating

498
00:37:39,930 --> 00:37:44,450
system we can see what we do is we
ignore all file operations except for

499
00:37:44,450 --> 00:37:48,689
file exact and this means we're will
indicate that a new processor speed

500
00:37:48,690 --> 00:37:55,220
three processes by injuries from the
internet again recall quarantine actions

501
00:37:55,220 --> 00:37:58,810
are added to basically everything that's
downloaded from the Internet

502
00:37:58,810 --> 00:38:03,060
Apple's plenty in docx file to see how
they did it and they call this

503
00:38:03,060 --> 00:38:09,830
undocumented function Mac get expat
basically you pass Aveeno to the file so

504
00:38:09,830 --> 00:38:13,848
the process that's about to be spawned
in a string in this case com dot Apple

505
00:38:13,849 --> 00:38:17,660
the quarantine attributes and I'll
filibuster with the value of backwards

506
00:38:17,660 --> 00:38:21,450
now we have a way to get clinton
attributes for the process that's about

507
00:38:21,450 --> 00:38:23,410
to be executed

508
00:38:23,410 --> 00:38:28,839
it's not quite that easy so when you
double-click the DMG image to mount the

509
00:38:28,839 --> 00:38:33,089
DMG image if it's from the internet will
have the quarantine attribute the files

510
00:38:33,089 --> 00:38:37,450
themselves will not say when the user
then goes the double click the file that

511
00:38:37,450 --> 00:38:41,759
was mounted and we look at that thought
she doesn't have any clinton even on

512
00:38:41,760 --> 00:38:46,040
that file is essentially from the
internet right Eng this means that

513
00:38:46,040 --> 00:38:51,020
follows exactly executed off the DMG
don't have parenting attributes so what

514
00:38:51,020 --> 00:38:57,000
what we know what turns out we can map
the file back to its dmg and then take

515
00:38:57,000 --> 00:39:02,869
check that dmg disease has filed a touch
complex basically we can do this in five

516
00:39:02,869 --> 00:39:07,080
steps so the first thing is we check if
the battery is running out of / volumes

517
00:39:07,080 --> 00:39:12,029
which indicated indicates that it's on a
mounted files we don't get a mount

518
00:39:12,030 --> 00:39:16,750
structure for the minor by injuries the
node and then we get a stack

519
00:39:16,750 --> 00:39:21,310
structure and we can extract a
thunderstorm out from name value which

520
00:39:21,310 --> 00:39:27,920
have will have a DSD mountain passes
something like / death this one over the

521
00:39:27,920 --> 00:39:31,890
aisle registry which is kind of a tree
of all devices that the kernel keeps

522
00:39:31,890 --> 00:39:36,460
looking for a parent that has a child
with that same matching point so again

523
00:39:36,460 --> 00:39:41,230
we're looking for a child has something
like / dad / disc one we find a child

524
00:39:41,230 --> 00:39:45,640
that has that same BSD mounting the
parent actually has a member called

525
00:39:45,640 --> 00:39:50,830
image underscore path which has the full
path of the DMG now we had the DMG image

526
00:39:50,830 --> 00:39:54,660
we can access the file quarantine
attributes to see if it was from the

527
00:39:54,660 --> 00:39:57,790
internet and therefore know that the
file that's being executed even though

528
00:39:57,790 --> 00:40:01,370
it does not have the clinton attributes
came from the Internet by means of this

529
00:40:01,370 --> 00:40:08,350
dmg image that was not recall we want to
block all downloaded binaries soviet the

530
00:40:08,350 --> 00:40:11,839
quarantine attributes we can determine
something from the internet how we don't

531
00:40:11,840 --> 00:40:16,760
want to block files that were explicitly
or previously approved by the user again

532
00:40:16,760 --> 00:40:20,880
reverse engineering Apple's quarantine
docx you can see they check the

533
00:40:20,880 --> 00:40:25,620
quarantine attributes for a flag with
valuable X 40 rather they were that out

534
00:40:25,620 --> 00:40:31,259
see that are calling user mode this is
what was that when the user click OK to

535
00:40:31,260 --> 00:40:35,970
allow ha so we basically just check for
that flag value and if it's at this

536
00:40:35,970 --> 00:40:41,520
means that I was previously approved by
the users go out so they get to this

537
00:40:41,520 --> 00:40:46,220
point we have a downloaded by Nuri that
was not previously approved by the user

538
00:40:46,220 --> 00:40:49,959
so all we have to do now to check if
it's signed turns out this is actually

539
00:40:49,960 --> 00:40:53,870
kinda hard to do some user mode because
there's no public or exported ATI

540
00:40:53,870 --> 00:41:00,109
methods you can call to check the source
file file executable is actually look at

541
00:41:00,110 --> 00:41:04,710
some of the source code for Apple even
see that they do that do this no

542
00:41:04,710 --> 00:41:09,340
basically they lock the V notes for the
file and then get a pointer to what they

543
00:41:09,340 --> 00:41:14,160
call a UBC infrastructure and then in
this structure they check for a pointer

544
00:41:14,160 --> 00:41:18,940
to ACS blob structure and the CIS blob
structure is no means the file is

545
00:41:18,940 --> 00:41:25,619
unsigned not null it is Apple's code
uses a lot of fun exported function

546
00:41:25,619 --> 00:41:31,230
an undocumented structures but that's
not gonna stop so if we reverse engineer

547
00:41:31,230 --> 00:41:35,690
the Vino lock function which is not
exporting we can see that it just calls

548
00:41:35,690 --> 00:41:40,740
lock mutex lock which is actually expert
so we can just call that directly then

549
00:41:40,740 --> 00:41:44,459
turns out the offsets learn these
various private structures are all the

550
00:41:44,460 --> 00:41:47,119
same in all versions of OS X 1011

551
00:41:47,119 --> 00:41:50,039
got some very nice checks to make sure
kernel extensions only gonna run on that

552
00:41:50,039 --> 00:41:54,160
operating system then we're good to go
because the offsets are also so here's

553
00:41:54,160 --> 00:41:58,348
the code which allows us to determine if
a binary is signed or not

554
00:41:58,349 --> 00:42:04,920
from putting that all together I created
a tool that can provide some protection

555
00:42:04,920 --> 00:42:10,299
it's called us DRS which is the Latin
word for geeky the tools released on my

556
00:42:10,299 --> 00:42:14,499
personal OSX security website and the
kernel component is signed meaning you

557
00:42:14,499 --> 00:42:19,189
have to do anything crazy like code
signing open source and its generically

558
00:42:19,190 --> 00:42:23,690
protects against the run time running on
my laptop and I will continue to run

559
00:42:23,690 --> 00:42:30,480
until Apple gets their act right so
let's wrap this up with some conclusions

560
00:42:30,480 --> 00:42:36,299
first I just want to reiterate Apple
wants us to think that Max no never get

561
00:42:36,299 --> 00:42:40,440
now or never get infected and just in
case they could there's this great

562
00:42:40,440 --> 00:42:44,700
product called gatekeeper that protects
users from both Trojans and

563
00:42:44,700 --> 00:42:49,029
man-in-the-middle downs but
unfortunately the reality is deeper only

564
00:42:49,029 --> 00:42:53,599
currently protects Mac used against very
lame attackers

565
00:42:53,599 --> 00:42:58,619
issues about patching things correctly I
think this is bad for a variety of ways

566
00:42:58,619 --> 00:43:02,739
what it really gives users a false sense
of security right when you reported dog

567
00:43:02,739 --> 00:43:06,940
to an operating system that her and a
release a patch I personally a lot of

568
00:43:06,940 --> 00:43:08,910
people trust that is that right

569
00:43:08,910 --> 00:43:13,578
gonna go out and reality the past that's
a lot of work right we reported them a

570
00:43:13,579 --> 00:43:18,369
bug spray they don't have a bounty
program yet to recover doing a big favor

571
00:43:18,369 --> 00:43:22,319
so when they patch it we assume that
it's patched the promise Apple has

572
00:43:22,319 --> 00:43:26,200
definitely messed up and security
patches recently gave a talk at DEFCON

573
00:43:26,200 --> 00:43:29,819
about how they messed up the patch for
crude pipe which was a nice privilege

574
00:43:29,819 --> 00:43:31,220
escalation honorably

575
00:43:31,220 --> 00:43:34,839
able to truly get around this entry
exploit the vulnerability even on a

576
00:43:34,839 --> 00:43:35,680
fully patched

577
00:43:35,680 --> 00:43:38,859
so if I'm an evil match half packer

578
00:43:38,859 --> 00:43:43,170
to do is wait to Apple releases attached
to reverse engineer to find out what the

579
00:43:43,170 --> 00:43:48,160
bug is yes I'll be able then to target
on patch users but it's a blue screen of

580
00:43:48,160 --> 00:43:51,379
all these patches will you basically
just got a 30 day and now you can target

581
00:43:51,380 --> 00:43:55,619
even users of fully touch the other
Apple take a little more time and then

582
00:43:55,619 --> 00:43:59,260
patched things you know validly
fundamentally and really address the

583
00:43:59,260 --> 00:44:06,640
issue as opposed to putting a bandage
now I know a lot but I drank the apple

584
00:44:06,640 --> 00:44:11,440
juice avid Mac users I love Apple I'm
not sure they love me but I'm ok with

585
00:44:11,440 --> 00:44:15,710
that have done a decent amount of OSX
rehearsing and I keep finding these

586
00:44:15,710 --> 00:44:19,940
trivial bugs and he's passed by taxes
obviously as I can find that yes I have

587
00:44:19,940 --> 00:44:22,859
a lot of experience but obviously
there's going to be other actors out

588
00:44:22,859 --> 00:44:26,900
there you know nation states recent
years there might be a little more evil

589
00:44:26,900 --> 00:44:31,640
that bothers me I really don't want my
Mac computer to get hacked so as

590
00:44:31,640 --> 00:44:36,440
aggression rights and OSX security tools
for myself first and foremost selfishly

591
00:44:36,440 --> 00:44:39,990
that I should treat you know make them
available for free so that other Mac

592
00:44:39,990 --> 00:44:45,689
users can possibly be protected as well
as my side hobby is to run a small LSX

593
00:44:45,690 --> 00:44:50,520
security website has got a nice
collection of recent LSX now where the

594
00:44:50,520 --> 00:44:53,650
80 communities really like to share
their samples with random security

595
00:44:53,650 --> 00:44:57,369
researchers so I spent some time trying
to get a nice collection together so you

596
00:44:57,369 --> 00:45:01,059
wanna race engineer some acne our secret
of how it works there's a nice

597
00:45:01,059 --> 00:45:06,520
collection and I also have these tools I
wrote to that protect my Mac that you

598
00:45:06,520 --> 00:45:10,780
know I share for free so the first tool
task exploratory much like Process

599
00:45:10,780 --> 00:45:14,490
Explorer on Windows shows all running
processes loaded islands but you can do

600
00:45:14,490 --> 00:45:18,109
cool things like say show me all
unsigned components that are running

601
00:45:18,109 --> 00:45:22,319
processes are unsigned eyelets
integrated with virustotal you can see

602
00:45:22,319 --> 00:45:26,420
you can say show me anything that's flag
or anything that's not from Apple's it's

603
00:45:26,420 --> 00:45:28,470
really good way to kind of figure out
what's going on here

604
00:45:28,470 --> 00:45:32,919
knock-knock we saw on the video it's
basically just auto runs for OSX again

605
00:45:32,920 --> 00:45:36,619
shows he was persistently installed on
your Mac computer integrated with

606
00:45:36,619 --> 00:45:40,640
virustotal so you can see too many
mouths or just maybe why your computer

607
00:45:40,640 --> 00:45:46,279
is running slow block block is very
complimentary to knock knock it monitors

608
00:45:46,280 --> 00:45:47,089
the persist

609
00:45:47,089 --> 00:45:52,299
locations that knock knock examines it's
almost like a firewall locations and

610
00:45:52,299 --> 00:45:56,299
provides real-time monitoring
capabilities and a time anything goes to

611
00:45:56,299 --> 00:46:01,089
persist software on your Mac you get a
pop-up saying you know alert when it's

612
00:46:01,089 --> 00:46:04,499
released last year all publicly
available Mac malware samples again

613
00:46:04,499 --> 00:46:05,549
after the fact

614
00:46:05,549 --> 00:46:09,859
block Lockwood attacks and you know one
user because again these all these Mac

615
00:46:09,859 --> 00:46:13,839
malware samples tried to persist text
you as a simple utility Show Chrome

616
00:46:13,839 --> 00:46:17,660
extensions integrated again with
virustotal talk about Australia's today

617
00:46:17,660 --> 00:46:22,890
and then the dial-in hijack scanner will
detect if you have any dialogue hijacked

618
00:46:22,890 --> 00:46:27,808
on your computer or if there's any
applications that are vulnerable so

619
00:46:27,809 --> 00:46:34,329
that's a wrap I will post the slides on
Twitter and we have three minutes for

620
00:46:34,329 --> 00:46:42,920
any questions

621
00:46:42,920 --> 00:47:01,750
would you recommend using any kind of
third-party antivirus software on the

622
00:47:01,750 --> 00:47:10,020
Mac has built-in antivirus product
expert act that it's based on static

623
00:47:10,020 --> 00:47:15,369
signatures which is weak but will
protect you from known issues you know

624
00:47:15,369 --> 00:47:19,130
so unknown stuff is probably not going
to get detected anyways I do run those

625
00:47:19,130 --> 00:47:32,619
netsch but stating that I know this is
last when the last time the conference I

626
00:47:32,619 --> 00:47:37,859
really appreciate you all staying now so
I think Apple Store continuing to be

627
00:47:37,859 --> 00:47:39,029
materials for talks

