1
00:00:00,000 --> 00:00:19,340
so without any further do I'd like to
introduce you please give a warm welcome

2
00:00:19,340 --> 00:00:34,980
to Karl who be talking about post
exploitation and go I guess I should be

3
00:00:34,980 --> 00:00:48,620
standing but the podium sucks so I'm
gonna set screw it ever hear me OK

4
00:00:48,620 --> 00:00:52,260
so the title is on the left

5
00:00:52,260 --> 00:00:55,469
make sure but he's in the right place
you know what do you mean this isn't

6
00:00:55,469 --> 00:01:04,309
Jeff Massa stock so I just put marathon
presentation style attack really fast in

7
00:01:04,309 --> 00:01:07,460
general and I'm on stage in front of a
bunch of people smarter than me so I'll

8
00:01:07,460 --> 00:01:12,330
probably talk about five times as fast
as I should feel free to just yelled

9
00:01:12,330 --> 00:01:18,240
slowdown really loud and if I can well
as we're used to it

10
00:01:18,240 --> 00:01:24,000
and anytime is a good time for a
question because I will go intentions

11
00:01:24,000 --> 00:01:28,610
and I will totally forgot so your
question will go unanswered so just mean

12
00:01:28,610 --> 00:01:39,679
that or something if i dont stop so this
talk is about implants those of you who

13
00:01:39,679 --> 00:01:42,979
work in the fed's base are probably
familiar with the term implant those of

14
00:01:42,979 --> 00:01:47,250
you who aren't an implant is basically
an interpreter which will make sense

15
00:01:47,250 --> 00:01:54,640
that is everybody else your gonna get a
quick primer on it in about five minutes

16
00:01:54,640 --> 00:02:01,270
so if you are you know what those things
are just drinking raw eggs so what does

17
00:02:01,270 --> 00:02:06,250
an implant so for the purposes of this
talk when we talk about implants were

18
00:02:06,250 --> 00:02:13,650
talking about post exploitation stuff
but specifically post exploitation stuff

19
00:02:13,650 --> 00:02:18,209
usually in this talk that is a Thomas so
nothing's that reply with the shelves

20
00:02:18,209 --> 00:02:21,360
are things that are going to give us
some some tcp/ip sockets that we can

21
00:02:21,360 --> 00:02:27,090
kind of mess with we're talking about
largely autonomous things things that

22
00:02:27,090 --> 00:02:30,450
will go into it they need to get out and
the only time you're going to hear from

23
00:02:30,450 --> 00:02:34,488
them again as when they're done running
so this is kind of a career out of a

24
00:02:34,489 --> 00:02:39,070
similarly alright so you're exploit
airfields exact her medicine saves every

25
00:02:39,070 --> 00:02:42,420
used to access your victim this is the
thing that we're putting in the victim

26
00:02:42,420 --> 00:02:52,060
alright so other people's implants so
there's basically two forms of

27
00:02:52,060 --> 00:02:58,100
exploitation stuff whether it comes in
the form of a self-contained binary or

28
00:02:58,100 --> 00:03:01,900
really exotic shellcode there's
basically two legal ones in the illegal

29
00:03:01,900 --> 00:03:07,459
ones so the non shady ones are usually
not autonomous front way they're

30
00:03:07,459 --> 00:03:10,330
designed to get you a shell as quick as
possible

31
00:03:10,330 --> 00:03:16,770
some of them come with patter add-ons
and cover channel but at the end of the

32
00:03:16,770 --> 00:03:21,390
day they're designed to get you a
real-time control interface for a system

33
00:03:21,390 --> 00:03:26,029
or a group of assets which is totally
different than the stuff the bad guys

34
00:03:26,030 --> 00:03:30,110
does the only exception to this in terms
of explicitly illegal programs that I'm

35
00:03:30,110 --> 00:03:34,420
aware of are flat-out spyware Fisher and
stuff like that which is technically

36
00:03:34,420 --> 00:03:43,310
illegal but not safe for pen testing for
obvious political reasons the only ones

37
00:03:43,310 --> 00:03:49,650
are usually and even if they weren't the
problem is that you don't you can't

38
00:03:49,650 --> 00:03:52,740
trust them to you don't really know what
they do they're distributed in a binary

39
00:03:52,740 --> 00:03:58,130
format yeah you can reverse it but
that's just not practical for time's

40
00:03:58,130 --> 00:04:01,640
sake rate like it's probably owned is
probably back toward its way too much

41
00:04:01,640 --> 00:04:04,579
money to deploy decline site and you
can't play on client if you're

42
00:04:04,580 --> 00:04:08,400
performing an assessment environment
kids never gonna let you run now on

43
00:04:08,400 --> 00:04:11,580
their shit both of them suffer from the
problem

44
00:04:11,580 --> 00:04:16,760
of AV usually has access to both and
that's pretty much all they do all the

45
00:04:16,760 --> 00:04:21,579
time is try to make them not work so
having your own you know would be nice

46
00:04:21,579 --> 00:04:28,690
as it is just some examples you know in
case the categories weren't clear of

47
00:04:28,690 --> 00:04:36,820
stuff in both categories so why why not
write her own well it turns out riding

48
00:04:36,820 --> 00:04:45,900
on a massive pain in the ass their shit
up life forms right like you know your

49
00:04:45,900 --> 00:04:50,239
program wakes up and it thinks it's on a
computer and it's on a tablet tablet

50
00:04:50,240 --> 00:04:55,250
it's different iPad tablet or a tablet
without you know with two disk drives

51
00:04:55,250 --> 00:05:00,730
instead of one or doesn't have a CD
Drive it has some weird thing is right

52
00:05:00,730 --> 00:05:04,500
and who knows what operating system is
running on it is operating systems run

53
00:05:04,500 --> 00:05:08,070
on everything these days are you can put
Windows on a Mac you can put Linux on a

54
00:05:08,070 --> 00:05:16,200
Dell Windows ship to PC Windows 8 Phones
of things and processors are gimme rate

55
00:05:16,200 --> 00:05:20,550
like there's our maps now starter David
hard

56
00:05:20,550 --> 00:05:27,680
Jim Italy difficult writing a payload is
no different language options so like

57
00:05:27,680 --> 00:05:32,140
anybody who's done a lot of reverse
engineering on actual like criminal

58
00:05:32,140 --> 00:05:38,450
malware is probably because that's the
malware trick of its really annoying to

59
00:05:38,450 --> 00:05:42,650
reverse because it runs inside an
emulator so you can just take on

60
00:05:42,650 --> 00:05:47,150
bullshit and confuse reversers usually
pretty popular folds or malware but as

61
00:05:47,150 --> 00:05:51,179
the top of limitations especially if
you're writing Delphi bugs for cross

62
00:05:51,180 --> 00:05:55,350
compiling and other operating systems
and you know generally writing the three

63
00:05:55,350 --> 00:05:58,820
languages the editorial languages that
are on the slider massive pain in the

64
00:05:58,820 --> 00:06:02,909
ass yes 12 haskell marriage in the
audience I'm looking at you directly at

65
00:06:02,910 --> 00:06:03,830
don't care

66
00:06:03,830 --> 00:06:07,580
riding high school and you know
formulated dread functions for doing

67
00:06:07,580 --> 00:06:13,320
Data Expo is stupid nobody wants to do
that I don't do that right

68
00:06:13,320 --> 00:06:20,750
and the other everybody's option is C++
code that runs on everything or job but

69
00:06:20,750 --> 00:06:22,950
no right

70
00:06:22,950 --> 00:06:30,760
Lake have you written written in C++
that shit is hard isn't it

71
00:06:30,760 --> 00:06:34,520
don't shrug it means that the guy who
said payloads banned from CDC before

72
00:06:34,520 --> 00:06:41,650
because I can't we do this in time
because it's in fucking see lol and yeah

73
00:06:41,650 --> 00:06:44,929
because for Java and emulators and all
that

74
00:06:44,930 --> 00:06:50,440
insanity yeah and then there's the
problem of using you know obviously if

75
00:06:50,440 --> 00:06:52,610
you're if you're building a payload
you're going to want to be in a compiled

76
00:06:52,610 --> 00:06:57,330
language so it runs and everything but
building something and compiled language

77
00:06:57,330 --> 00:07:01,359
out of tactics that are in all of us are
learning about in the communal space on

78
00:07:01,360 --> 00:07:06,050
the internet you know using questionable
methods not questioned whether it's

79
00:07:06,050 --> 00:07:08,650
whatever is kind of like building a Rube
Goldberg machine right like you to

80
00:07:08,650 --> 00:07:13,229
reverse engineer a bunch of other
people's finished products and take

81
00:07:13,229 --> 00:07:16,969
those parts out and then build something
with those parts that is a shit ton of

82
00:07:16,970 --> 00:07:25,620
work and then there's the CT problem
like fishing should be the easiest job

83
00:07:25,620 --> 00:07:29,759
for a consultant to do yet spinning up
the server for the website and up taking

84
00:07:29,759 --> 00:07:37,310
ninety percent of the time because SSL
and domain origin and signatures and and

85
00:07:37,310 --> 00:07:42,789
and and so all this stuff is a massive
pain in the ass to get right once it's

86
00:07:42,789 --> 00:07:46,050
super time-consuming and then even if
you got it alright and you do all the

87
00:07:46,050 --> 00:07:47,750
work in the beginning

88
00:07:47,750 --> 00:07:57,229
somebody to do something so this is
basically on how maybe we can make this

89
00:07:57,229 --> 00:08:00,400
process and not suck but this is our
goal here

90
00:08:00,400 --> 00:08:03,810
right okay so to make this not suck only
want alright well first of all this guy

91
00:08:03,810 --> 00:08:09,510
is the devil and you should just kind of
know that if you don't just trust me

92
00:08:09,510 --> 00:08:13,070
this guy is the devil will cause
problems getting reverse engineer the

93
00:08:13,070 --> 00:08:16,380
fact of life people are going to take a
binary apart if it's any good if they're

94
00:08:16,380 --> 00:08:19,150
not it's probably not doing what you
want

95
00:08:19,150 --> 00:08:23,758
always include a big red button frankly
even true legal or illegal

96
00:08:23,759 --> 00:08:27,220
at the end of the day you're going to
want to be able to make your pain go

97
00:08:27,220 --> 00:08:28,479
away

98
00:08:28,479 --> 00:08:33,229
future generation has to be fast and
effortless because otherwise you will be

99
00:08:33,229 --> 00:08:38,900
left behind and you just won't use it
and compromise other functions either

100
00:08:38,900 --> 00:08:42,799
lol use lazier CT use you'll get lazy
about your search you won't sign your

101
00:08:42,799 --> 00:08:47,079
code and all of these things make for
better upset because we're all human

102
00:08:47,079 --> 00:08:50,500
beings as much as we want to be we have
sores

103
00:08:50,500 --> 00:08:59,100
and human beings are lazy like I know
you guys I'm lazy I mean I i cant get my

104
00:08:59,100 --> 00:09:02,720
cold because I don't know about you guys
but I wake up on Saturday and I'm like

105
00:09:02,720 --> 00:09:07,570
what is this do I was too stoned to
remember that's why I have comments on

106
00:09:07,570 --> 00:09:11,450
my codes I mean I feel like I've said is
that thing and pretty much like the

107
00:09:11,450 --> 00:09:15,380
online pastor of all things I'm sectors
is the growth of these days

108
00:09:15,380 --> 00:09:20,280
opposition movement the bottom her face
in case people don't know who is in it

109
00:09:20,280 --> 00:09:28,790
and realize that I saw him on the left
no he's not an old Chinese guy so enter

110
00:09:28,790 --> 00:09:35,180
the user landowner anybody seen as I
write you know it's like the whole

111
00:09:35,180 --> 00:09:38,540
civilization inside the battery I guess
that's basically what are you the owner

112
00:09:38,540 --> 00:09:44,430
is what the hell that anybody who in
this room does not know what a loader is

113
00:09:44,430 --> 00:09:48,920
in terms of operating system contacts
really everything a person knows what a

114
00:09:48,920 --> 00:09:59,620
letter is alright you on the way to
userspace lotteries

115
00:09:59,620 --> 00:10:04,529
ok well you guys know in a letter to me
is so i guess im not gonna spend forever

116
00:10:04,529 --> 00:10:09,270
on it yes it is you know a lot of the
part of the operating system that loads

117
00:10:09,270 --> 00:10:13,550
programs it it takes that interprets a
binary format makes a room on the stack

118
00:10:13,550 --> 00:10:17,430
for process copies all the stuff where
it needs to go in the process and then

119
00:10:17,430 --> 00:10:25,890
it links all the things and then says go
do stuff so pretty much every national

120
00:10:25,890 --> 00:10:32,560
loader out there in the universe will
only do this from a file system it

121
00:10:32,560 --> 00:10:35,599
almost never do it from memory if it
will do for memory usually won't give

122
00:10:35,600 --> 00:10:40,779
unlimited access you know our regular
user permission to do it from memory

123
00:10:40,779 --> 00:10:46,720
because now we're reasons the only
exception I'm aware of that is the

124
00:10:46,720 --> 00:10:51,670
Bionic loader that's inside Android but
there's a ton of reasons why they try to

125
00:10:51,670 --> 00:10:54,860
make you not use it because you love
things that successfully use it

126
00:10:54,860 --> 00:11:00,540
regularly are usually really shady tho
userspace letter is basically a program

127
00:11:00,540 --> 00:11:04,860
that does exactly the same saying only
it's a program so you can make it run

128
00:11:04,860 --> 00:11:10,550
for memory if you want to you and it
doesn't require any operating system

129
00:11:10,550 --> 00:11:12,790
system calls and things like that

130
00:11:12,790 --> 00:11:17,480
the big deal is that if you build a
userspace loader that includes a binary

131
00:11:17,480 --> 00:11:21,200
file interpreter there's nothing
stopping you from calling free compiled

132
00:11:21,200 --> 00:11:25,029
code in its compiled state you can take
whole tools for buying a reason to stick

133
00:11:25,029 --> 00:11:31,500
of memory and go run this thing and it
works so by doing this we have a lot of

134
00:11:31,500 --> 00:11:33,959
problems worse off right like we don't
have this guy oh you're reading from

135
00:11:33,959 --> 00:11:35,219
memory

136
00:11:35,220 --> 00:11:40,040
reverse engineering we're still getting
reverse engineered but probably any

137
00:11:40,040 --> 00:11:44,199
reversal will tell you looking for
random function call that might be the

138
00:11:44,200 --> 00:11:47,170
loader and then trying to take apart but
it's loading without knowing the binary

139
00:11:47,170 --> 00:11:53,300
type or whether or not it's pat is a
much more involved process then taking a

140
00:11:53,300 --> 00:11:56,729
bar code in regular contact so we're
we're helping with that

141
00:11:56,730 --> 00:12:00,980
you don't have to worry about the big
red button because we're using somebody

142
00:12:00,980 --> 00:12:08,209
else's code so pretty easy to remove it
also contained iteration being fast is a

143
00:12:08,209 --> 00:12:12,689
given rate is I can just download
somebody else install and use it doesn't

144
00:12:12,690 --> 00:12:18,470
work use another one that's at ten
seconds and that you know all these

145
00:12:18,470 --> 00:12:21,610
things that I've been friendly kiss you
can use tools that have established

146
00:12:21,610 --> 00:12:25,490
protocols for putting stuff back and not
that's that's good I'm say that means

147
00:12:25,490 --> 00:12:31,110
the means are fast and well actually I
actually use these things turned out of

148
00:12:31,110 --> 00:12:35,459
bonuses from userspace letters so
they're gonna memory which is just good

149
00:12:35,459 --> 00:12:39,969
for speeding and other stuff usually all
the threat endpoint protection tools out

150
00:12:39,970 --> 00:12:42,480
there like your silence as a near

151
00:12:42,480 --> 00:12:52,230
McAfee and protects and your other 14
assaults on board members like median

152
00:12:52,230 --> 00:12:57,290
some crap prematurely all those things
work is they all look for API calls in

153
00:12:57,290 --> 00:13:01,260
the operating system user base later
doesn't make it so it's not going to

154
00:13:01,260 --> 00:13:05,130
show up in a process lists like a show
up and as a resource you just kind of

155
00:13:05,130 --> 00:13:13,139
invisible so it's nice alright so to
recap leg open source implants are shady

156
00:13:13,139 --> 00:13:18,260
building around is annoying but water
makes things easier that means we can

157
00:13:18,260 --> 00:13:21,269
use other peoples tools this is this is
a good thing right this is very little

158
00:13:21,269 --> 00:13:30,550
code to maintain and doesn't kind of
horrible how to implement these guys on

159
00:13:30,550 --> 00:13:36,930
Windows use that they really don't
bother adding your own just use that

160
00:13:36,930 --> 00:13:45,239
it's super well maintained it actually
used in the bunch and a vendor still

161
00:13:45,240 --> 00:13:49,630
aren't flagging all the binders we make
it clearly it's like a club anytime soon

162
00:13:49,630 --> 00:13:56,600
the only caveat to using this is that
when you use it to load fully composited

163
00:13:56,600 --> 00:14:01,760
binaries it doesn't it originally
designed to Lodi levels and not be files

164
00:14:01,760 --> 00:14:03,590
in general even though there

165
00:14:03,590 --> 00:14:10,980
the same thing so I have a version of
this that is modified to allow arguments

166
00:14:10,980 --> 00:14:15,880
because you don't usually pass arguments
to ATL and at some point today when I'm

167
00:14:15,880 --> 00:14:22,850
not shaking and terrified from being on
stage or post that code yea on Linux

168
00:14:22,850 --> 00:14:27,550
it's slightly more difficult only
because there's like all things on Linux

169
00:14:27,550 --> 00:14:33,079
there's too many options and so those
are two the OSK one is kind of more of a

170
00:14:33,080 --> 00:14:37,510
debugger ones that there's a bunch of
overhead probably not practical to use

171
00:14:37,510 --> 00:14:43,340
in a payload but you can and the liberal
phone is kind of the given example and

172
00:14:43,340 --> 00:14:47,960
it's probably hard to read on the slide
but that URL is somebody on Stack

173
00:14:47,960 --> 00:14:51,820
Overflow actually implementing a
userspace loader and legs using health

174
00:14:51,820 --> 00:14:55,140
club and it's only about 60 lines of
code even though it's all in C so

175
00:14:55,140 --> 00:15:01,410
there's that there's Bionic we talked
about earlier for an Android or you can

176
00:15:01,410 --> 00:15:05,770
just get an elf parser and build it
yourself which is pretty easy since its

177
00:15:05,770 --> 00:15:17,199
open source you can read the letter code
and do it one caveat on Linux Linux

178
00:15:17,200 --> 00:15:22,000
binaries assume they're all getting
loaded in the same place so unless

179
00:15:22,000 --> 00:15:28,520
you're payload contained binary is
compiled position independent you can

180
00:15:28,520 --> 00:15:33,550
get errors and less whatever you're
running a statically linked into the

181
00:15:33,550 --> 00:15:39,790
language were gonna talk about a minute
everything is directly linked I have

182
00:15:39,790 --> 00:15:44,439
invested it that much but this guy did
really as a dog on it and by following

183
00:15:44,440 --> 00:15:46,780
his slides in about an hour

184
00:15:46,780 --> 00:15:50,010
totally a us-based letter-writing so am
I gonna bother explaining the internal

185
00:15:50,010 --> 00:15:53,030
that you should just go out his dog

186
00:15:53,030 --> 00:15:57,020
basically where to buy zeroed in on
exactly that runs from memory does Apple

187
00:15:57,020 --> 00:16:02,250
release another bit that we could just
do that so we did

188
00:16:02,250 --> 00:16:08,180
so now we're gonna talk about well we're
gonna go around around my examples so I

189
00:16:08,180 --> 00:16:12,160
have found that all of these things are
really easy to do and go go solves a lot

190
00:16:12,160 --> 00:16:22,329
of problems for you it's it's cool so so
go ships with a compiler an alternate

191
00:16:22,330 --> 00:16:26,890
compiler for it could see goes so goes
an interface to gcc amongst other things

192
00:16:26,890 --> 00:16:30,890
this means that you can take C code and
you can call it directly and go just

193
00:16:30,890 --> 00:16:40,470
import from any OS any of the supported
OS's and it supported OS's the ones I

194
00:16:40,470 --> 00:16:46,030
have listed on the slide is not even all
of them it works on it does work on 19

195
00:16:46,030 --> 00:16:52,470
it also work on bare metal if you can
pilot for Plan nine but build against

196
00:16:52,470 --> 00:16:59,770
the bare-knuckle SDK and there's another
like eight or nine other operating

197
00:16:59,770 --> 00:17:05,000
system that runs on everything and it
also comes with a guarantee mcgovern

198
00:17:05,000 --> 00:17:09,119
time basically makes writing go kind of
like garbage collection and you can use

199
00:17:09,119 --> 00:17:15,458
string literals you know it's the syntax
is pretty simple it's nice also you get

200
00:17:15,459 --> 00:17:21,030
over jeans instead of manic manually
managing threads oh my god save so much

201
00:17:21,030 --> 00:17:29,410
time go run some function instead of
betrayed

202
00:17:29,410 --> 00:17:33,800
and it natively compiled all those
operating systems because fucking

203
00:17:33,800 --> 00:17:43,280
leaders so I was going to try to be
awesome and compile it in front of you

204
00:17:43,280 --> 00:17:46,510
and show how to use it but it turns out
setting up a dub environment and a

205
00:17:46,510 --> 00:17:50,170
Windows XP p.m. that is from your friend
and cracked doesn't always work so I

206
00:17:50,170 --> 00:18:07,510
made a video instead this example is
using go Mimi cats which is our products

207
00:18:07,510 --> 00:18:13,990
are released on a while ago and this is
this is kinda well this is the source

208
00:18:13,990 --> 00:18:17,870
code there is a rudimentary support file
that comes with it it's kinda hard to

209
00:18:17,870 --> 00:18:24,659
see so this stuff up here is some C code
that just loads memory model it's only

210
00:18:24,660 --> 00:18:28,200
three lines and they're just compiler
flags I'm literally just playing in the

211
00:18:28,200 --> 00:18:32,700
damage and the rest of this code looks
like it does a lot of fancy stuff is

212
00:18:32,700 --> 00:18:40,410
really just pulling a one-time pad out
of memory because when writing this I I

213
00:18:40,410 --> 00:18:45,460
tested this on a corporate machine and
had corporate AV problem so I couldn't

214
00:18:45,460 --> 00:18:52,220
keep me cats on my computer long enough
to compile the binary hands I 58 rosalee

215
00:18:52,220 --> 00:18:56,110
internet looking for a solution to this
problem and turns out that somebody

216
00:18:56,110 --> 00:19:02,620
wrote a library called Gobinda forego
that is for storing static assets as

217
00:19:02,620 --> 00:19:06,120
giant strings inside ago program because
there's a lot of web developers who are

218
00:19:06,120 --> 00:19:12,350
using go so I just wrote a one-time pad
thing that takes a binary files into one

219
00:19:12,350 --> 00:19:17,620
time beds and then I used his storage
system so I just go this file and it

220
00:19:17,620 --> 00:19:22,489
wasn't for me in my place so that's
that's what all this code is here and

221
00:19:22,490 --> 00:19:29,090
then the actual business end of the
stick where stuff is getting called my

222
00:19:29,090 --> 00:19:35,330
area is just this one line the C dot
memory call entry point handle that it

223
00:19:35,330 --> 00:19:39,939
that's me calling any binary in the
world with a single line of code into a

224
00:19:39,940 --> 00:19:44,600
room on the output so they because the
morrow and add some new awesome and

225
00:19:44,600 --> 00:19:53,969
sweet just function interested and so
this that's that's kinda works under the

226
00:19:53,970 --> 00:19:59,490
head it's all it's all public on how to
compile it this example as me blogging

227
00:19:59,490 --> 00:20:10,620
any USB stick with me canse on it just
regular for every day forever you'll see

228
00:20:10,620 --> 00:20:16,510
antivirus as soon as I enter the folder
immediately isolate the original binary

229
00:20:16,510 --> 00:20:17,900
and this is just downloaded from the
site

230
00:20:17,900 --> 00:20:28,260
impact modified whatever and it seems
like on it like it's not okay and so

231
00:20:28,260 --> 00:20:33,790
this demo this is even as using the
expiration date added this is an actual

232
00:20:33,790 --> 00:20:37,010
trading or do anything fun this is just
an example of what I can do with a

233
00:20:37,010 --> 00:20:39,629
single line of code and just put out by
using a single line of code

234
00:20:39,630 --> 00:20:43,690
automatically get packing right so this
is me going into my go-to source

235
00:20:43,690 --> 00:20:52,040
directory and running the gummy candy
binary which was compiled using the

236
00:20:52,040 --> 00:20:56,800
other binary so this should set up the
same maybe and it just works that's it

237
00:20:56,800 --> 00:20:58,230
working

238
00:20:58,230 --> 00:21:19,760
dumping hashes and all that jazz

239
00:21:19,760 --> 00:21:27,740
interesting questions you have any
questions

240
00:21:27,740 --> 00:21:44,720
yeah that's true but even still it was
it was only like 50 lines of code

241
00:21:44,720 --> 00:21:59,000
mentally implemented and calling the
executable still one line

242
00:21:59,000 --> 00:22:07,780
sure so I talked about a Thomas
functionality sorry the question was for

243
00:22:07,780 --> 00:22:12,480
the recording you know can you talk
about autonomous functionality so yeah

244
00:22:12,480 --> 00:22:15,460
what are some annoying things when doing
autonomous functionality will threads is

245
00:22:15,460 --> 00:22:20,840
one one line of code that I showed him
my example is a go function so that

246
00:22:20,840 --> 00:22:25,250
means I can run it as its own thread
without system time and I can do that

247
00:22:25,250 --> 00:22:28,500
forever and I don't have to use any
system with red libraries to do it so

248
00:22:28,500 --> 00:22:31,430
things that are monitoring API calls for
that calls and stuff

249
00:22:31,430 --> 00:22:39,860
no problem also being able to use whole
composited tools in your tools means

250
00:22:39,860 --> 00:22:45,189
that why do you have to actual trades
earlier eight if you have a payload and

251
00:22:45,190 --> 00:22:46,570
you're in a job

252
00:22:46,570 --> 00:22:49,830
you know I just want to shell why do you
want that she'll focus I'm gonna drop

253
00:22:49,830 --> 00:22:54,379
credentials and you know then I want to
use those credentials on albeit at

254
00:22:54,380 --> 00:22:58,299
systems and see if there's you know
something out so what would you do that

255
00:22:58,299 --> 00:23:07,750
opiates exact ok well that a binary yeah
alright we'll just take peairs exec and

256
00:23:07,750 --> 00:23:10,970
put it in the binary and those exact
your answer and you don't have to write

257
00:23:10,970 --> 00:23:27,470
a close race and this is this is
happening isn't it

258
00:23:27,470 --> 00:23:40,260
is hot I can yell so few years ago I was
at DEFCON and we're running contests and

259
00:23:40,260 --> 00:23:45,799
we're up on stage and we're at the
Riviera and standing there thinking all

260
00:23:45,799 --> 00:23:49,389
these people for help have announced the
winners yet and I think the hotel staff

261
00:23:49,390 --> 00:23:54,980
and I got confused at the park as I'd
like to thank you like support staff and

262
00:23:54,980 --> 00:23:59,990
everyone's like boo drink drink and i
got nothing to drink my little thing

263
00:23:59,990 --> 00:24:05,049
maybe fifteen seconds later by response
others like this he said to handle

264
00:24:05,049 --> 00:24:08,980
something down in front of me I'm busy
into stride stride I pointed the logo

265
00:24:08,980 --> 00:24:12,390
towards him so he'd know what it was and
I looked around in the front row to see

266
00:24:12,390 --> 00:24:18,860
if anybody else had anything to drink
and nobody else stood up and everyone

267
00:24:18,860 --> 00:24:22,770
should I can't do this continual is a
drink this things are not paying

268
00:24:22,770 --> 00:24:26,900
attention span in and around open up
give it back and his backers in the

269
00:24:26,900 --> 00:24:32,770
labels and Everclear

270
00:24:32,770 --> 00:24:40,129
and I tell you like it it's not meant to
shoot like that I was thinking like a

271
00:24:40,130 --> 00:24:46,480
couple big gulps and I cannot stop the
process so my face with flushing sorry

272
00:24:46,480 --> 00:24:50,690
to lose the ability to breathe I was
trying to think people either handle I

273
00:24:50,690 --> 00:24:54,400
can remember and I used a real names and
they ran on stage and like SAT quietly

274
00:24:54,400 --> 00:25:50,230
in the hallway so ever since then I i
not like that

275
00:25:50,230 --> 00:26:08,960
anything else

276
00:26:08,960 --> 00:26:17,390
yes

277
00:26:17,390 --> 00:26:23,220
reverse engineering ongoing there is no
it's not a pain in the ass at all

278
00:26:23,220 --> 00:26:26,750
because unlike the rest of the civilized

279
00:26:26,750 --> 00:26:31,580
quote compiled languages in the world go
when you include a library for now this

280
00:26:31,580 --> 00:26:34,750
is on the list of things to do and floss
people are pretty good about getting

281
00:26:34,750 --> 00:26:38,460
around to those things in this case
security-related in the only thing they

282
00:26:38,460 --> 00:26:45,320
do people hate is dynamic loads and
security I go to go compiler will take a

283
00:26:45,320 --> 00:26:49,970
librarian's including entire library
you're in your mind and you make it in

284
00:26:49,970 --> 00:26:53,350
this is platform-independent will do
this on every platform is really big

285
00:26:53,350 --> 00:26:59,850
which is a giant many as it also means
that while ago binaries are relatively

286
00:26:59,850 --> 00:27:04,178
rare because of usage and because the
language is very tightly controlled and

287
00:27:04,179 --> 00:27:08,070
doesn't allow dynamic load so unless you
find a bug in the language kind of

288
00:27:08,070 --> 00:27:16,389
having fun about the it's really strange
because there's no there's no resources

289
00:27:16,390 --> 00:27:20,059
moving around and everything is
statically linked you don't have to use

290
00:27:20,059 --> 00:27:24,530
the operating system to get your evil
deeds done you can just write or exploit

291
00:27:24,530 --> 00:27:27,360
and then jump to wherever you want in
the language and I've actually I've

292
00:27:27,360 --> 00:27:31,059
actually written proof of concept where
you can compile you can use the code

293
00:27:31,059 --> 00:27:37,129
compiler to compile just to go unchecked
and you can manually jump to the objects

294
00:27:37,130 --> 00:27:41,710
entry point because the compiler will
put one in there just in case and called

295
00:27:41,710 --> 00:27:47,350
a code linearly as if you had a
dynamically winking go even though that

296
00:27:47,350 --> 00:27:54,990
doesn't exist so yeah the miners are a
pretty pretty they are also

297
00:27:54,990 --> 00:27:59,200
functions aren't stripped by default and
the function naming schema matches the

298
00:27:59,200 --> 00:28:03,179
human-readable naming scheme so unless
something's pactor stripped it's all

299
00:28:03,179 --> 00:28:20,880
very apparent

300
00:28:20,880 --> 00:28:27,380
so the question was how to go I'm not
enough of a go expert answer that

301
00:28:27,380 --> 00:28:31,450
entirely from memory so I'll first
answer by saying I don't know I will

302
00:28:31,450 --> 00:28:37,260
tell you that what I do know is that it
is not a direct call to whatever your

303
00:28:37,260 --> 00:28:42,460
operating system version of the thread
manager is there are lots of reasons for

304
00:28:42,460 --> 00:28:43,700
this one of them

305
00:28:43,700 --> 00:28:50,860
oddly enough is actually security the go
run time will enforce its own version of

306
00:28:50,860 --> 00:28:56,449
memory protection according to like an
exact style rules as available and it

307
00:28:56,450 --> 00:28:57,230
will do this

308
00:28:57,230 --> 00:29:01,230
autonomously so when you push dynamic
data to things that it knows there is

309
00:29:01,230 --> 00:29:05,520
responsibility it will flag does not
executable and will change the execution

310
00:29:05,520 --> 00:29:11,220
types of memory all over in time for you
I don't know that it never calls the

311
00:29:11,220 --> 00:29:14,530
system thread libraries but I do know
that it has the capability to manage

312
00:29:14,530 --> 00:29:17,879
those three layers entirely in software
whether or not a dozen them all the time

313
00:29:17,880 --> 00:29:31,410
I don't know but I'll get her address is
the victor wise and yellow R as in

314
00:29:31,410 --> 00:29:41,280
Robert you as an underneath and Sam the
number 001 virus reserve one right

