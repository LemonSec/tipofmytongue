1
00:00:00,000 --> 00:00:04,620
<font color="#CCCCCC">old in this system</font><font color="#E5E5E5"> is 45</font><font color="#CCCCCC"> minutes so if</font>

2
00:00:02,370 --> 00:00:08,969
you're not refreshing within a 45 minute

3
00:00:04,620 --> 00:00:11,309
slot your identity will go away so

4
00:00:08,970 --> 00:00:12,840
essentially this<font color="#CCCCCC"> is the way the kind</font><font color="#E5E5E5"> of</font>

5
00:00:11,309 --> 00:00:15,899
like an overview or what the ght is

6
00:00:12,840 --> 00:00:17,820
doing and how it<font color="#E5E5E5"> works internally there</font>

7
00:00:15,900 --> 00:00:21,180
is a routing table inside there which<font color="#CCCCCC"> is</font>

8
00:00:17,820 --> 00:00:24,180
each node keep such a routing table and

9
00:00:21,180 --> 00:00:27,990
it has its own identity which is<font color="#E5E5E5"> also a</font>

10
00:00:24,180 --> 00:00:30,750
number<font color="#E5E5E5"> in this big space where the other</font>

11
00:00:27,990 --> 00:00:34,500
identities lie and the<font color="#E5E5E5"> idea is that and</font>

12
00:00:30,750 --> 00:00:35,940
the each node couldn't keep a complete

13
00:00:34,500 --> 00:00:37,559
ruling table because the complete

14
00:00:35,940 --> 00:00:40,709
routing table is in the millions of

15
00:00:37,559 --> 00:00:42,599
notes right so so because it's in<font color="#E5E5E5"> the</font>

16
00:00:40,710 --> 00:00:44,250
millions of notes you could not keep the

17
00:00:42,600 --> 00:00:47,039
complete table so<font color="#CCCCCC"> you keep a partial</font>

18
00:00:44,250 --> 00:00:50,700
table on each node and the trick is that

19
00:00:47,039 --> 00:00:55,710
you're building<font color="#E5E5E5"> in a way such that the</font>

20
00:00:50,700 --> 00:00:57,660
closer so<font color="#E5E5E5"> you have an identity each node</font>

21
00:00:55,710 --> 00:01:00,059
has an identity in the<font color="#E5E5E5"> routing table and</font>

22
00:00:57,660 --> 00:01:02,160
and has a and identity in the in the

23
00:01:00,059 --> 00:01:05,280
<font color="#E5E5E5">search space which</font><font color="#CCCCCC"> is the same space as</font>

24
00:01:02,160 --> 00:01:09,119
we store identities which we map to IP

25
00:01:05,280 --> 00:01:11,939
propels and the closer we are to our

26
00:01:09,119 --> 00:01:14,460
cells the more we know the more notes we

27
00:01:11,939 --> 00:01:17,100
know so<font color="#CCCCCC"> that means for instance suppose</font>

28
00:01:14,460 --> 00:01:20,759
you have a long bit string and use the

29
00:01:17,100 --> 00:01:24,030
first bit there is 0 for your case then

30
00:01:20,759 --> 00:01:28,259
you<font color="#CCCCCC"> don't know more than that</font><font color="#E5E5E5"> most eight</font>

31
00:01:24,030 --> 00:01:30,450
notes that has a 1 bit there and as you

32
00:01:28,259 --> 00:01:33,150
have more and<font color="#CCCCCC"> more the proof of</font><font color="#E5E5E5"> your own</font>

33
00:01:30,450 --> 00:01:35,009
identity as more and more as you get a

34
00:01:33,150 --> 00:01:38,159
<font color="#E5E5E5">larger and larger prefix in common with</font>

35
00:01:35,009 --> 00:01:40,770
the<font color="#CCCCCC"> node you'll gradually no more and</font>

36
00:01:38,159 --> 00:01:43,200
more notes close to yourself so there's

37
00:01:40,770 --> 00:01:45,960
a it's<font color="#E5E5E5"> based on the bit strings of these</font>

38
00:01:43,200 --> 00:01:47,759
identities<font color="#E5E5E5"> I'm not going to cover too</font>

39
00:01:45,960 --> 00:01:52,350
much but the effect is<font color="#CCCCCC"> that the closer</font>

40
00:01:47,759 --> 00:01:54,630
we are I mean<font color="#E5E5E5"> the we know more about</font><font color="#CCCCCC"> our</font>

41
00:01:52,350 --> 00:01:56,339
neighbors so to speak in the distance

42
00:01:54,630 --> 00:01:59,729
metric then we know about<font color="#E5E5E5"> people who are</font>

43
00:01:56,340 --> 00:02:01,320
a long way from us<font color="#E5E5E5"> and this is why we</font>

44
00:01:59,729 --> 00:02:03,630
can use this recursion scheme where we

45
00:02:01,320 --> 00:02:06,089
can ask others who has other<font color="#E5E5E5"> parts of</font>

46
00:02:03,630 --> 00:02:08,519
<font color="#E5E5E5">the of the of the departure routing</font>

47
00:02:06,090 --> 00:02:10,140
table and ask them what they know and if

48
00:02:08,520 --> 00:02:12,629
they are closer to the target<font color="#E5E5E5"> they know</font>

49
00:02:10,139 --> 00:02:13,829
more because they have<font color="#E5E5E5"> more of the</font>

50
00:02:12,629 --> 00:02:16,470
prefix in common

51
00:02:13,830 --> 00:02:20,070
we have so that that<font color="#E5E5E5"> is more or</font><font color="#CCCCCC"> less how</font>

52
00:02:16,470 --> 00:02:23,970
the kind<font color="#E5E5E5"> of like a little bit about how</font>

53
00:02:20,070 --> 00:02:27,480
it works the early implementation I've

54
00:02:23,970 --> 00:02:29,490
written has this structure in general

55
00:02:27,480 --> 00:02:33,630
let's see if<font color="#CCCCCC"> you're hey I have a mouse</font>

56
00:02:29,490 --> 00:02:35,160
and so the these diamonds are processes

57
00:02:33,630 --> 00:02:37,890
in the<font color="#E5E5E5"> system</font><font color="#CCCCCC"> so there are four</font>

58
00:02:35,160 --> 00:02:40,320
processes in<font color="#CCCCCC"> the system itself which are</font>

59
00:02:37,890 --> 00:02:42,029
the network subsystem the state

60
00:02:40,320 --> 00:02:46,950
<font color="#E5E5E5">subsystem that tracks the routing table</font>

61
00:02:42,030 --> 00:02:49,440
a store which tracks identities from

62
00:02:46,950 --> 00:02:51,420
others and a track out which track our

63
00:02:49,440 --> 00:02:54,390
identities in the table<font color="#CCCCCC"> so we can</font>

64
00:02:51,420 --> 00:02:55,980
refresh them since this<font color="#CCCCCC"> is rolling</font>

65
00:02:54,390 --> 00:02:57,929
there's a specific process called the

66
00:02:55,980 --> 00:03:00,030
supervisor up here who makes sure<font color="#CCCCCC"> that</font>

67
00:02:57,930 --> 00:03:02,670
if any of these dies we restart them

68
00:03:00,030 --> 00:03:04,709
from a safe state so this is<font color="#CCCCCC"> a standard</font>

69
00:03:02,670 --> 00:03:07,200
thing and Erlang that you are trying<font color="#E5E5E5"> to</font>

70
00:03:04,709 --> 00:03:08,940
build<font color="#E5E5E5"> robustness by that different</font>

71
00:03:07,200 --> 00:03:11,640
internal clients in the system they can

72
00:03:08,940 --> 00:03:14,430
do queries out and they do that by

73
00:03:11,640 --> 00:03:18,119
manipulating either the store tracker or

74
00:03:14,430 --> 00:03:19,950
directly the network<font color="#E5E5E5"> and out here we</font>

75
00:03:18,120 --> 00:03:21,750
have the internet and the<font color="#CCCCCC"> internet</font>

76
00:03:19,950 --> 00:03:25,018
communicates with the<font color="#CCCCCC"> network part of</font>

77
00:03:21,750 --> 00:03:26,760
the system and so there's UDP packets

78
00:03:25,019 --> 00:03:32,160
going back and forth between these two

79
00:03:26,760 --> 00:03:35,280
guys the things in boxes are modules so

80
00:03:32,160 --> 00:03:38,910
we have<font color="#E5E5E5"> different modules in the system</font>

81
00:03:35,280 --> 00:03:41,610
<font color="#E5E5E5">so the protocol</font><font color="#CCCCCC"> code is tied directly to</font>

82
00:03:38,910 --> 00:03:43,769
the network stack where's the rent of my

83
00:03:41,610 --> 00:03:45,510
random subsystem here that handles

84
00:03:43,769 --> 00:03:47,910
random numbers is shared by multiple

85
00:03:45,510 --> 00:03:50,310
things and the same<font color="#CCCCCC"> for this module down</font>

86
00:03:47,910 --> 00:03:54,750
here which handles time in the system in

87
00:03:50,310 --> 00:03:56,910
general one<font color="#E5E5E5"> of the things is that that</font>

88
00:03:54,750 --> 00:03:59,880
the state here keeps the partial routing

89
00:03:56,910 --> 00:04:02,400
table inside here<font color="#E5E5E5"> and this the state</font>

90
00:03:59,880 --> 00:04:04,859
metadata is the thing<font color="#CCCCCC"> that is</font>

91
00:04:02,400 --> 00:04:08,400
responsible<font color="#E5E5E5"> for refreshing notes that we</font>

92
00:04:04,860 --> 00:04:10,200
know in the routing<font color="#E5E5E5"> table so once the</font>

93
00:04:08,400 --> 00:04:12,360
problem with the routing table is that

94
00:04:10,200 --> 00:04:14,488
it is dynamic<font color="#CCCCCC"> right it at a certain time</font>

95
00:04:12,360 --> 00:04:16,290
<font color="#CCCCCC">and note might be added to the</font><font color="#E5E5E5"> network</font>

96
00:04:14,489 --> 00:04:18,478
or a note might disappear from the

97
00:04:16,290 --> 00:04:21,989
<font color="#CCCCCC">network and then also handle that we</font>

98
00:04:18,478 --> 00:04:23,880
need some<font color="#CCCCCC"> kind of of the you know mrs.</font>

99
00:04:21,988 --> 00:04:25,710
essa that<font color="#E5E5E5"> keeps track and periodically</font>

100
00:04:23,880 --> 00:04:27,300
refreshes things and that is the state

101
00:04:25,710 --> 00:04:29,789
metadata that does that

102
00:04:27,300 --> 00:04:31,470
and everything here is then governed by

103
00:04:29,789 --> 00:04:34,199
the state process itself which then

104
00:04:31,470 --> 00:04:37,740
keeps that routing table state in inside

105
00:04:34,199 --> 00:04:39,750
the system so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the overview you</font>

106
00:04:37,740 --> 00:04:47,159
have four processes in order to handle

107
00:04:39,750 --> 00:04:48,479
<font color="#E5E5E5">this that is actually enough so what is</font>

108
00:04:47,159 --> 00:04:51,449
the motivation here well there's

109
00:04:48,479 --> 00:04:54,090
millions of notes so the code better be

110
00:04:51,449 --> 00:04:55,830
correct one of the<font color="#E5E5E5"> problems you have is</font>

111
00:04:54,090 --> 00:04:59,039
you if you have a very<font color="#E5E5E5"> large system like</font>

112
00:04:55,830 --> 00:05:02,280
this is the<font color="#E5E5E5"> question of how do you do</font>

113
00:04:59,039 --> 00:05:03,840
software upgrade I mean say you find a

114
00:05:02,280 --> 00:05:07,109
buck and you fix the park in the system

115
00:05:03,840 --> 00:05:10,500
then the problem<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that that particular</font>

116
00:05:07,110 --> 00:05:12,659
park I mean<font color="#E5E5E5"> it's it's in the system</font><font color="#CCCCCC"> now</font>

117
00:05:10,500 --> 00:05:14,669
and you make a new patch and you upload

118
00:05:12,659 --> 00:05:17,789
your new patch and not everyone operates

119
00:05:14,669 --> 00:05:19,378
<font color="#E5E5E5">right so the problem is that there are</font>

120
00:05:17,789 --> 00:05:21,419
<font color="#E5E5E5">certain box that might persist forever</font>

121
00:05:19,379 --> 00:05:23,370
in your in your system because it's so

122
00:05:21,419 --> 00:05:25,198
large it's not possible to have

123
00:05:23,370 --> 00:05:28,139
everybody catch at a certain<font color="#E5E5E5"> point</font><font color="#CCCCCC"> in</font>

124
00:05:25,199 --> 00:05:30,539
time so so that is one of<font color="#E5E5E5"> the reasons</font>

125
00:05:28,139 --> 00:05:33,870
why you really<font color="#E5E5E5"> want correctness you want</font>

126
00:05:30,539 --> 00:05:36,479
to try to minimize the risk that there's

127
00:05:33,870 --> 00:05:38,819
any kind<font color="#E5E5E5"> of error going on in here and</font>

128
00:05:36,479 --> 00:05:40,860
then also the code is somewhat tricky so

129
00:05:38,819 --> 00:05:43,409
you better<font color="#E5E5E5"> get it correct so so this</font>

130
00:05:40,860 --> 00:05:45,150
this is kind of like why do extensive

131
00:05:43,409 --> 00:05:50,940
testing on this well this<font color="#CCCCCC"> is the</font>

132
00:05:45,150 --> 00:05:55,560
motivation so quick check is a method

133
00:05:50,940 --> 00:06:00,330
that was<font color="#E5E5E5"> invented by a guy named Cohen</font>

134
00:05:55,560 --> 00:06:03,810
<font color="#CCCCCC">klassen and</font><font color="#E5E5E5"> John Hughes back in 1999 and</font>

135
00:06:00,330 --> 00:06:06,479
the way it works is that they observed

136
00:06:03,810 --> 00:06:10,979
the observed one very important thing

137
00:06:06,479 --> 00:06:13,349
which is that if you write unit tests

138
00:06:10,979 --> 00:06:14,758
and<font color="#E5E5E5"> you get to a certain point in</font><font color="#CCCCCC"> your</font>

139
00:06:13,349 --> 00:06:16,740
software it doesn't scale anymore

140
00:06:14,759 --> 00:06:19,110
because<font color="#E5E5E5"> it's human effort to write unit</font>

141
00:06:16,740 --> 00:06:21,900
tests and the problem<font color="#E5E5E5"> is that once you</font>

142
00:06:19,110 --> 00:06:23,669
have you have<font color="#E5E5E5"> different kind of unit</font>

143
00:06:21,900 --> 00:06:26,219
tests you can<font color="#E5E5E5"> combine them into new</font>

144
00:06:23,669 --> 00:06:29,370
tests and this means that you get<font color="#E5E5E5"> a</font>

145
00:06:26,219 --> 00:06:31,110
multiplicative way of doing things and

146
00:06:29,370 --> 00:06:33,210
that means<font color="#E5E5E5"> that the number of test cases</font>

147
00:06:31,110 --> 00:06:35,310
you have they explode and they explode

148
00:06:33,210 --> 00:06:39,120
exponentially if you want to cover every

149
00:06:35,310 --> 00:06:40,950
kind of interaction so this<font color="#E5E5E5"> is a problem</font>

150
00:06:39,120 --> 00:06:43,080
<font color="#E5E5E5">because it's very hard</font>

151
00:06:40,950 --> 00:06:47,430
work to maintain a lot set of unit tests

152
00:06:43,080 --> 00:06:49,500
so they they thought<font color="#CCCCCC"> about this and they</font>

153
00:06:47,430 --> 00:06:50,970
figured out that well this is one

154
00:06:49,500 --> 00:06:52,710
problem the other problem is that

155
00:06:50,970 --> 00:06:58,020
writing unit tests is some of the most

156
00:06:52,710 --> 00:07:00,060
<font color="#E5E5E5">boring thing you can do so they decided</font>

157
00:06:58,020 --> 00:07:02,460
<font color="#E5E5E5">to make</font><font color="#CCCCCC"> it fun</font><font color="#E5E5E5"> to write test cases and</font>

158
00:07:00,060 --> 00:07:03,840
the way you do that is don't write the

159
00:07:02,460 --> 00:07:08,370
test cases but generate them

160
00:07:03,840 --> 00:07:10,830
automatically so so<font color="#CCCCCC"> how would</font><font color="#E5E5E5"> you go</font>

161
00:07:08,370 --> 00:07:13,080
about generating test automatically well

162
00:07:10,830 --> 00:07:16,560
the way quick<font color="#CCCCCC"> check does it is it's as</font>

163
00:07:13,080 --> 00:07:17,969
well we come up with<font color="#E5E5E5"> some kind of</font>

164
00:07:16,560 --> 00:07:20,310
property which is<font color="#CCCCCC"> a mathematical</font>

165
00:07:17,970 --> 00:07:22,710
property very often that the<font color="#E5E5E5"> system want</font>

166
00:07:20,310 --> 00:07:24,360
we want the system to have and so we

167
00:07:22,710 --> 00:07:25,919
have some system under test and<font color="#E5E5E5"> we want</font>

168
00:07:24,360 --> 00:07:28,380
to check<font color="#CCCCCC"> that it has this particular</font>

169
00:07:25,920 --> 00:07:31,230
property so what we<font color="#E5E5E5"> can do is we can</font>

170
00:07:28,380 --> 00:07:34,350
generate random inputs to the system

171
00:07:31,230 --> 00:07:36,420
<font color="#E5E5E5">under test and</font><font color="#CCCCCC"> then verify under these</font>

172
00:07:34,350 --> 00:07:38,490
very random inputs we just generated

173
00:07:36,420 --> 00:07:41,250
well then the system has<font color="#CCCCCC"> the properties</font>

174
00:07:38,490 --> 00:07:44,250
we want and the goal here is to try to

175
00:07:41,250 --> 00:07:45,780
make the system break and find something

176
00:07:44,250 --> 00:07:47,220
where we break the property right

177
00:07:45,780 --> 00:07:50,309
because that means we have a<font color="#CCCCCC"> bokken we</font>

178
00:07:47,220 --> 00:07:51,780
can fix it<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is the coming</font>

179
00:07:50,310 --> 00:07:54,120
<font color="#E5E5E5">up with good properties tends to be</font>

180
00:07:51,780 --> 00:07:56,760
non-trivial this is where you you need a

181
00:07:54,120 --> 00:07:58,110
certain kind of them of experience in

182
00:07:56,760 --> 00:08:00,180
order to do it and the more you<font color="#E5E5E5"> do it</font>

183
00:07:58,110 --> 00:08:03,900
the easier it gets to come up with<font color="#CCCCCC"> good</font>

184
00:08:00,180 --> 00:08:06,240
properties for<font color="#CCCCCC"> the system</font><font color="#E5E5E5"> and the thing</font>

185
00:08:03,900 --> 00:08:08,460
that people usually start doing when

186
00:08:06,240 --> 00:08:10,890
they think about this is so the problem

187
00:08:08,460 --> 00:08:12,989
is don't you just<font color="#CCCCCC"> re implement the</font>

188
00:08:10,890 --> 00:08:14,550
property I mean don't<font color="#E5E5E5"> you just</font>

189
00:08:12,990 --> 00:08:15,900
reimplement the system we<font color="#CCCCCC"> just built in</font>

190
00:08:14,550 --> 00:08:18,750
the property and<font color="#E5E5E5"> the goal is</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> avoid</font>

191
00:08:15,900 --> 00:08:20,460
doing that so what what you want to have

192
00:08:18,750 --> 00:08:23,460
is you want<font color="#E5E5E5"> to have simple provinces</font>

193
00:08:20,460 --> 00:08:25,620
that does not necessarily a you know

194
00:08:23,460 --> 00:08:28,080
capture all of what the system is trying

195
00:08:25,620 --> 00:08:29,640
to do but just capture the major parts

196
00:08:28,080 --> 00:08:32,098
of what the system is trying to do and

197
00:08:29,640 --> 00:08:34,229
the hope is then that<font color="#E5E5E5"> in if you break</font>

198
00:08:32,099 --> 00:08:36,030
one<font color="#E5E5E5"> of those simpler provinces which is</font>

199
00:08:34,229 --> 00:08:37,470
<font color="#E5E5E5">essentially simpler than the system you</font>

200
00:08:36,030 --> 00:08:39,990
are implementing<font color="#E5E5E5"> if you break one</font><font color="#CCCCCC"> of</font>

201
00:08:37,470 --> 00:08:42,120
those properties then then you<font color="#CCCCCC"> actually</font>

202
00:08:39,990 --> 00:08:44,730
find box in the system<font color="#E5E5E5"> so in a certain</font>

203
00:08:42,120 --> 00:08:46,200
<font color="#E5E5E5">sense it's not a question of formally</font>

204
00:08:44,730 --> 00:08:52,650
proving that this system is entirely

205
00:08:46,200 --> 00:08:54,390
correct it is a a way to you know it's a

206
00:08:52,650 --> 00:08:56,939
way<font color="#CCCCCC"> to find box in your</font><font color="#E5E5E5"> code</font>

207
00:08:54,390 --> 00:08:58,590
efficiently and that is the goal and

208
00:08:56,940 --> 00:09:00,360
this is why I call it semi-formal

209
00:08:58,590 --> 00:09:02,670
because it's not really formal it's it's

210
00:09:00,360 --> 00:09:06,420
<font color="#CCCCCC">just a very powerful tool</font><font color="#E5E5E5"> for finding</font>

211
00:09:02,670 --> 00:09:08,370
box in the co-pays the key power of

212
00:09:06,420 --> 00:09:10,079
quick check is that once you have a

213
00:09:08,370 --> 00:09:12,030
counter example for your properties or

214
00:09:10,080 --> 00:09:13,740
once you know something<font color="#E5E5E5"> that isn't true</font>

215
00:09:12,030 --> 00:09:16,230
because of<font color="#E5E5E5"> something it implies what is</font>

216
00:09:13,740 --> 00:09:18,960
called a shrinking policy so it tries to

217
00:09:16,230 --> 00:09:21,660
<font color="#E5E5E5">minimize that test case down until it</font>

218
00:09:18,960 --> 00:09:23,580
finds is simpler test case that it can

219
00:09:21,660 --> 00:09:25,319
then present you and this<font color="#E5E5E5"> is powerful</font>

220
00:09:23,580 --> 00:09:27,270
<font color="#CCCCCC">because</font><font color="#E5E5E5"> it means</font><font color="#CCCCCC"> that you automatically</font>

221
00:09:25,320 --> 00:09:29,940
get simple test cases even though the

222
00:09:27,270 --> 00:09:33,000
error might occur in a very complex

223
00:09:29,940 --> 00:09:36,210
fashion so I have had test cases where

224
00:09:33,000 --> 00:09:38,670
you have 200 something steps in order to

225
00:09:36,210 --> 00:09:42,450
be use it but after<font color="#E5E5E5"> shrinking it's six</font>

226
00:09:38,670 --> 00:09:44,069
steps to produce it and 200 something<font color="#CCCCCC"> is</font>

227
00:09:42,450 --> 00:09:46,260
impossible to<font color="#E5E5E5"> actually figure out what</font>

228
00:09:44,070 --> 00:09:48,540
is wrong but six steps it's very it's

229
00:09:46,260 --> 00:09:51,240
positive it's easy and it's better yet

230
00:09:48,540 --> 00:09:54,270
because all of those steps you know that

231
00:09:51,240 --> 00:09:55,680
they are<font color="#E5E5E5"> related to the</font><font color="#CCCCCC"> bug if</font><font color="#E5E5E5"> you if</font>

232
00:09:54,270 --> 00:09:57,449
the system were able to<font color="#E5E5E5"> remove one of</font>

233
00:09:55,680 --> 00:10:00,449
<font color="#E5E5E5">the steps and then it would have a</font>

234
00:09:57,450 --> 00:10:03,030
smaller test case so so so it's it's

235
00:10:00,450 --> 00:10:05,250
really<font color="#E5E5E5"> good at minimizing test cases</font>

236
00:10:03,030 --> 00:10:10,709
it's<font color="#E5E5E5"> not necessarily</font><font color="#CCCCCC"> the minimal one but</font>

237
00:10:05,250 --> 00:10:13,800
it's it's it's close so what how do you

238
00:10:10,710 --> 00:10:15,510
<font color="#E5E5E5">do it well as I said</font><font color="#CCCCCC"> a metric in order</font>

239
00:10:13,800 --> 00:10:18,120
to be metric you need three properties

240
00:10:15,510 --> 00:10:20,160
you need a property of reflexivity you

241
00:10:18,120 --> 00:10:23,100
need a property of symmetry and you need

242
00:10:20,160 --> 00:10:24,839
the triangle inequality to hold and here

243
00:10:23,100 --> 00:10:26,340
<font color="#E5E5E5">I'm going to focus on symmetry just to</font>

244
00:10:24,840 --> 00:10:28,710
give you an example so symmetry says

245
00:10:26,340 --> 00:10:30,630
that if<font color="#E5E5E5"> I have two identities x and y</font>

246
00:10:28,710 --> 00:10:32,640
well then the distance<font color="#E5E5E5"> from X to Y</font>

247
00:10:30,630 --> 00:10:36,870
better be the same as the<font color="#CCCCCC"> distance from</font>

248
00:10:32,640 --> 00:10:39,750
Y to X<font color="#CCCCCC"> so this is a property of the</font>

249
00:10:36,870 --> 00:10:42,390
<font color="#E5E5E5">effect of being a metric and here's how</font>

250
00:10:39,750 --> 00:10:45,540
you would formulate it in quick check so

251
00:10:42,390 --> 00:10:48,180
you say well for<font color="#CCCCCC"> all pairs X Y where we</font>

252
00:10:45,540 --> 00:10:49,680
generate with these this identity here

253
00:10:48,180 --> 00:10:52,770
is a generator that<font color="#CCCCCC"> generates a random</font>

254
00:10:49,680 --> 00:10:56,489
identity and we generate a pair those

255
00:10:52,770 --> 00:10:58,920
well then we<font color="#E5E5E5"> we can ask our the X to Y</font>

256
00:10:56,490 --> 00:11:02,430
distance the same as the Y to X distance

257
00:10:58,920 --> 00:11:04,439
and once you run this it'll it'll push

258
00:11:02,430 --> 00:11:06,839
out it'll generate random identities and

259
00:11:04,440 --> 00:11:07,980
do this in<font color="#E5E5E5"> this case I ran a hundred</font>

260
00:11:06,840 --> 00:11:10,830
test cases which

261
00:11:07,980 --> 00:11:13,410
take like two milliseconds and then it

262
00:11:10,830 --> 00:11:15,180
has verified this and of course inside

263
00:11:13,410 --> 00:11:18,780
the full model you will you would also

264
00:11:15,180 --> 00:11:21,540
say verify reflectivity and the triangle

265
00:11:18,780 --> 00:11:25,170
<font color="#CCCCCC">equality and other stuff so this this</font>

266
00:11:21,540 --> 00:11:28,740
this is<font color="#E5E5E5"> kind of like an example of how</font>

267
00:11:25,170 --> 00:11:33,569
you verify simple properties in quick

268
00:11:28,740 --> 00:11:39,660
check but that isn't<font color="#CCCCCC"> really gonna cut it</font>

269
00:11:33,570 --> 00:11:41,370
for a complete tht so stateless<font color="#E5E5E5"> quick</font>

270
00:11:39,660 --> 00:11:45,360
check models which is what I just show

271
00:11:41,370 --> 00:11:48,000
you is not enough so you need to employ

272
00:11:45,360 --> 00:11:49,380
more advanced tooling and the<font color="#E5E5E5"> more</font>

273
00:11:48,000 --> 00:11:52,170
advanced tooling is called stateful

274
00:11:49,380 --> 00:11:57,390
quick check models so now we in this

275
00:11:52,170 --> 00:12:00,900
case we always generate you know inputs

276
00:11:57,390 --> 00:12:03,480
and we have no state between say running

277
00:12:00,900 --> 00:12:05,250
this one's and running and again what we

278
00:12:03,480 --> 00:12:08,490
really want is we want<font color="#E5E5E5"> to be able to say</font>

279
00:12:05,250 --> 00:12:11,280
if I have a if I have executed say a

280
00:12:08,490 --> 00:12:13,260
ping command I expect that later<font color="#E5E5E5"> on pong</font>

281
00:12:11,280 --> 00:12:15,390
comes in something<font color="#E5E5E5"> like that so I need</font>

282
00:12:13,260 --> 00:12:18,000
to know that at that point in time I

283
00:12:15,390 --> 00:12:20,699
have a ping outstanding on the network

284
00:12:18,000 --> 00:12:24,000
wire such that i can receive it later<font color="#E5E5E5"> on</font>

285
00:12:20,700 --> 00:12:26,610
and and this is what leads you to the

286
00:12:24,000 --> 00:12:30,270
idea<font color="#E5E5E5"> of building stateful models so the</font>

287
00:12:26,610 --> 00:12:33,150
idea of<font color="#CCCCCC"> a stateful model is that you</font>

288
00:12:30,270 --> 00:12:35,850
have some<font color="#E5E5E5"> states on</font><font color="#CCCCCC"> the model m 0 then</font>

289
00:12:33,150 --> 00:12:37,920
you generate some commands<font color="#E5E5E5"> e 0 and you</font>

290
00:12:35,850 --> 00:12:40,350
get<font color="#E5E5E5"> into another state so to a state</font>

291
00:12:37,920 --> 00:12:42,360
transition into<font color="#CCCCCC"> m1</font><font color="#E5E5E5"> and then you generate</font>

292
00:12:40,350 --> 00:12:44,460
another command C 1 you do a state

293
00:12:42,360 --> 00:12:46,650
transition into n2 and now you build up

294
00:12:44,460 --> 00:12:49,320
a stateful model where you transition

295
00:12:46,650 --> 00:12:51,780
between states so what you're generating

296
00:12:49,320 --> 00:12:55,830
in this case is<font color="#CCCCCC"> that you're generating</font>

297
00:12:51,780 --> 00:12:58,530
when you're sitting in stadium<font color="#E5E5E5"> 0 you're</font>

298
00:12:55,830 --> 00:13:02,460
looking at what are<font color="#CCCCCC"> the</font><font color="#E5E5E5"> possible</font>

299
00:12:58,530 --> 00:13:04,079
commands<font color="#E5E5E5"> I can generate in state m0</font><font color="#CCCCCC"> and</font>

300
00:13:02,460 --> 00:13:05,970
that might not be everyone does a

301
00:13:04,080 --> 00:13:09,600
precondition here that might say well

302
00:13:05,970 --> 00:13:11,550
you can only generate in m0 which is the

303
00:13:09,600 --> 00:13:13,710
<font color="#CCCCCC">initial state I might only</font><font color="#E5E5E5"> be able to</font>

304
00:13:11,550 --> 00:13:17,490
<font color="#CCCCCC">generate some kind of open the file or</font>

305
00:13:13,710 --> 00:13:19,560
any new to the system thing and then

306
00:13:17,490 --> 00:13:21,240
once i generate a command<font color="#E5E5E5"> i have to</font>

307
00:13:19,560 --> 00:13:23,489
generate some inputs to the command

308
00:13:21,240 --> 00:13:26,520
because in this case<font color="#CCCCCC"> the command by it</font>

309
00:13:23,490 --> 00:13:28,290
might be generate a ping ok<font color="#CCCCCC"> so what are</font>

310
00:13:26,520 --> 00:13:31,649
the pure<font color="#E5E5E5"> I want to contact and what is</font>

311
00:13:28,290 --> 00:13:34,380
the what I mean what is the<font color="#E5E5E5"> P I want to</font>

312
00:13:31,649 --> 00:13:35,760
contact in that case<font color="#E5E5E5"> and so I have to</font>

313
00:13:34,380 --> 00:13:39,390
generate the command I have to generate

314
00:13:35,760 --> 00:13:41,520
its inputs once i have that i also have

315
00:13:39,390 --> 00:13:43,770
a next state transition function in the

316
00:13:41,520 --> 00:13:47,670
system so<font color="#CCCCCC"> i can say what is the m1 state</font>

317
00:13:43,770 --> 00:13:50,310
so now<font color="#E5E5E5"> i essentially build a model based</font>

318
00:13:47,670 --> 00:13:52,020
on that concept where<font color="#E5E5E5"> i can generate</font>

319
00:13:50,310 --> 00:13:53,819
commands<font color="#CCCCCC"> i can generate inputs to</font>

320
00:13:52,020 --> 00:13:56,370
commands<font color="#E5E5E5"> and i can move between states</font>

321
00:13:53,820 --> 00:13:59,399
like this so now i have a trace a stage

322
00:13:56,370 --> 00:14:03,540
model trace stay chained that<font color="#E5E5E5"> i have</font>

323
00:13:59,399 --> 00:14:06,360
built up and this slide I think I<font color="#E5E5E5"> said</font>

324
00:14:03,540 --> 00:14:09,180
most of it yeah so so essentially what

325
00:14:06,360 --> 00:14:11,040
you do is you generate a random command

326
00:14:09,180 --> 00:14:14,790
you generate inputs for that command

327
00:14:11,040 --> 00:14:16,529
then you actually<font color="#CCCCCC"> Rivera</font><font color="#E5E5E5"> Phi another</font>

328
00:14:14,790 --> 00:14:17,880
precondition that the inputs are also

329
00:14:16,529 --> 00:14:19,800
valid because there are certain

330
00:14:17,880 --> 00:14:22,170
situations where given a command given

331
00:14:19,800 --> 00:14:24,300
certain inputs they are not valid and

332
00:14:22,170 --> 00:14:25,770
then you repeat this state transition

333
00:14:24,300 --> 00:14:27,870
until we have a<font color="#CCCCCC"> sizable chain and</font>

334
00:14:25,770 --> 00:14:30,600
<font color="#CCCCCC">sizable chain in this case is something</font>

335
00:14:27,870 --> 00:14:35,220
<font color="#E5E5E5">like 50 commands to 300 400 commands</font>

336
00:14:30,600 --> 00:14:39,899
something<font color="#E5E5E5"> along that that size so once</font>

337
00:14:35,220 --> 00:14:42,300
you<font color="#CCCCCC"> have that then you run the thing</font>

338
00:14:39,899 --> 00:14:44,880
against the real system so down here we

339
00:14:42,300 --> 00:14:48,540
have<font color="#CCCCCC"> a zero which is</font><font color="#E5E5E5"> the state of the</font>

340
00:14:44,880 --> 00:14:50,310
<font color="#E5E5E5">system under</font><font color="#CCCCCC"> test and we run the same z0</font>

341
00:14:48,540 --> 00:14:53,010
command against that one the one we just

342
00:14:50,310 --> 00:14:55,349
generated and the p0 here is then a post

343
00:14:53,010 --> 00:14:57,750
condition verification so now we run a

344
00:14:55,350 --> 00:15:00,990
step and we verify that the step matches

345
00:14:57,750 --> 00:15:04,020
our model expectation and run another

346
00:15:00,990 --> 00:15:07,020
step checks that it verifies<font color="#E5E5E5"> and oil and</font>

347
00:15:04,020 --> 00:15:09,270
then that matches its its its transition

348
00:15:07,020 --> 00:15:11,220
and so on<font color="#E5E5E5"> and so forth so the idea is</font>

349
00:15:09,270 --> 00:15:12,839
now we have a stateful model and it's

350
00:15:11,220 --> 00:15:15,000
very powerful<font color="#E5E5E5"> because it allows us to</font>

351
00:15:12,839 --> 00:15:18,570
say<font color="#CCCCCC"> things we couldn't say before like</font>

352
00:15:15,000 --> 00:15:21,540
we can say and if I I'm trying to verify

353
00:15:18,570 --> 00:15:22,920
say a hash table I can have a state that

354
00:15:21,540 --> 00:15:25,560
says what<font color="#CCCCCC"> are the keys in the</font><font color="#E5E5E5"> hash table</font>

355
00:15:22,920 --> 00:15:27,599
which means<font color="#CCCCCC"> that i can i can start</font>

356
00:15:25,560 --> 00:15:30,510
saying stuff like if i look up this key

357
00:15:27,600 --> 00:15:32,370
it better be there and if<font color="#E5E5E5"> i look up this</font>

358
00:15:30,510 --> 00:15:33,870
key it better not be<font color="#E5E5E5"> there because i</font>

359
00:15:32,370 --> 00:15:34,760
know what the internal state of the

360
00:15:33,870 --> 00:15:37,430
system is

361
00:15:34,760 --> 00:15:38,870
and I need this in order to handle<font color="#CCCCCC"> this</font>

362
00:15:37,430 --> 00:15:41,089
thing because there's a<font color="#CCCCCC"> lot of state</font>

363
00:15:38,870 --> 00:15:43,280
<font color="#E5E5E5">going on in in the in the internal</font>

364
00:15:41,090 --> 00:15:46,040
processes in this system and<font color="#E5E5E5"> I have to</font>

365
00:15:43,280 --> 00:15:50,600
handle those so I need<font color="#E5E5E5"> any state for</font>

366
00:15:46,040 --> 00:15:53,780
models in<font color="#CCCCCC"> order to do that so the thing</font>

367
00:15:50,600 --> 00:15:56,450
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> also here there's another</font>

368
00:15:53,780 --> 00:15:59,870
important<font color="#E5E5E5"> point about why do this and</font>

369
00:15:56,450 --> 00:16:02,450
the<font color="#E5E5E5"> point is</font><font color="#CCCCCC"> that once you have a</font>

370
00:15:59,870 --> 00:16:04,340
stateful model it is usually tighter in

371
00:16:02,450 --> 00:16:06,830
the sense that it is closer to the

372
00:16:04,340 --> 00:16:09,350
<font color="#E5E5E5">system under test and that means that</font><font color="#CCCCCC"> it</font>

373
00:16:06,830 --> 00:16:10,910
<font color="#CCCCCC">is easier to find box and the box you'll</font>

374
00:16:09,350 --> 00:16:13,280
find a better and easier to<font color="#E5E5E5"> actually</font>

375
00:16:10,910 --> 00:16:15,650
work with because you know more<font color="#CCCCCC"> about</font>

376
00:16:13,280 --> 00:16:17,930
what was the expectation of<font color="#E5E5E5"> the</font>

377
00:16:15,650 --> 00:16:20,180
underlying system but it turns out that

378
00:16:17,930 --> 00:16:23,540
<font color="#E5E5E5">just using stateful models is not enough</font>

379
00:16:20,180 --> 00:16:27,380
because<font color="#E5E5E5"> now we have I mean we go up here</font>

380
00:16:23,540 --> 00:16:29,990
to the to the<font color="#E5E5E5"> overview somewhere like</font>

381
00:16:27,380 --> 00:16:31,939
this we have like four or five processes

382
00:16:29,990 --> 00:16:34,040
in here and we have<font color="#CCCCCC"> a lot of different</font>

383
00:16:31,940 --> 00:16:35,300
you know modules and we are<font color="#E5E5E5"> trying to</font>

384
00:16:34,040 --> 00:16:38,480
<font color="#CCCCCC">build a</font><font color="#E5E5E5"> state from bottle for all of</font>

385
00:16:35,300 --> 00:16:40,609
<font color="#E5E5E5">these and that is going to break down</font>

386
00:16:38,480 --> 00:16:42,290
because that stateful model will<font color="#CCCCCC"> be so</font>

387
00:16:40,610 --> 00:16:45,440
big that you cannot really understand it

388
00:16:42,290 --> 00:16:49,160
and cope with it so there's a trick in

389
00:16:45,440 --> 00:16:53,930
quick check that is<font color="#E5E5E5"> primarily built by</font>

390
00:16:49,160 --> 00:16:56,780
wolf<font color="#CCCCCC"> Norrell who did act as well and the</font>

391
00:16:53,930 --> 00:16:58,939
thing<font color="#E5E5E5"> is that what he does is well</font>

392
00:16:56,780 --> 00:17:00,829
rather than having one big model let us

393
00:16:58,940 --> 00:17:04,880
split the stateful model into several

394
00:17:00,830 --> 00:17:07,339
components so the<font color="#E5E5E5"> idea is that you build</font>

395
00:17:04,880 --> 00:17:10,850
a component for each module in your

396
00:17:07,339 --> 00:17:13,399
system<font color="#E5E5E5"> and then that module calls are</font>

397
00:17:10,849 --> 00:17:16,760
the modules so you mark those other

398
00:17:13,400 --> 00:17:20,390
modules that it calls meaning that<font color="#E5E5E5"> now I</font>

399
00:17:16,760 --> 00:17:22,099
can isolate<font color="#CCCCCC"> a module and by marking it</font>

400
00:17:20,390 --> 00:17:26,120
essentially isolated from the rest of

401
00:17:22,099 --> 00:17:29,810
the system the the thing is now that

402
00:17:26,119 --> 00:17:31,850
once I do that I have a set of isolated

403
00:17:29,810 --> 00:17:34,340
small state machines one for each<font color="#E5E5E5"> module</font>

404
00:17:31,850 --> 00:17:36,230
in the system and I then can trust of

405
00:17:34,340 --> 00:17:38,840
those together by recombining in into a

406
00:17:36,230 --> 00:17:40,970
full model so this allows me to define

407
00:17:38,840 --> 00:17:42,949
the system by essentially isolating each

408
00:17:40,970 --> 00:17:45,350
module on his own like the routing table

409
00:17:42,950 --> 00:17:48,060
module I can say let me build a

410
00:17:45,350 --> 00:17:51,240
correctness test for that and then

411
00:17:48,060 --> 00:17:53,159
it on put it inside another module by

412
00:17:51,240 --> 00:17:56,400
clustering these underlying state

413
00:17:53,160 --> 00:17:59,610
machines together so what you do is you

414
00:17:56,400 --> 00:18:01,230
do this by mocking and there's a marking

415
00:17:59,610 --> 00:18:06,600
system<font color="#E5E5E5"> building into</font><font color="#CCCCCC"> oil and quick check</font>

416
00:18:01,230 --> 00:18:11,520
for doing this so the thing is<font color="#CCCCCC"> that</font>

417
00:18:06,600 --> 00:18:14,340
whenever a system then calls out to

418
00:18:11,520 --> 00:18:17,490
another module we say well this<font color="#E5E5E5"> is an</font>

419
00:18:14,340 --> 00:18:18,959
expectation of<font color="#E5E5E5"> the mock so we expect</font>

420
00:18:17,490 --> 00:18:21,900
that<font color="#CCCCCC"> there's a call out to this</font>

421
00:18:18,960 --> 00:18:23,640
underlying subsystem and then the

422
00:18:21,900 --> 00:18:27,900
<font color="#E5E5E5">response we send back is generated</font>

423
00:18:23,640 --> 00:18:30,390
randomly because we can do that so in

424
00:18:27,900 --> 00:18:32,040
reality<font color="#E5E5E5"> we are now isolating the system</font>

425
00:18:30,390 --> 00:18:35,010
<font color="#E5E5E5">and we're generating the response value</font>

426
00:18:32,040 --> 00:18:37,409
<font color="#E5E5E5">so we might</font><font color="#CCCCCC"> say well we</font><font color="#E5E5E5"> stay where we</font>

427
00:18:35,010 --> 00:18:40,110
are here we expect this call to to be

428
00:18:37,410 --> 00:18:42,090
made and once that call is made what is

429
00:18:40,110 --> 00:18:43,679
the appropriate response well it's

430
00:18:42,090 --> 00:18:45,899
either true or false or something like

431
00:18:43,680 --> 00:18:48,240
that we<font color="#E5E5E5"> just generate a random response</font>

432
00:18:45,900 --> 00:18:51,660
in and since we know what the response

433
00:18:48,240 --> 00:18:54,690
is we are able to<font color="#E5E5E5"> use this in order to</font>

434
00:18:51,660 --> 00:18:57,930
you know<font color="#E5E5E5"> what the models you do later on</font>

435
00:18:54,690 --> 00:18:59,550
with that response and there's also a

436
00:18:57,930 --> 00:19:02,070
possibility of doing model internal

437
00:18:59,550 --> 00:19:05,100
transitions here which then further

438
00:19:02,070 --> 00:19:06,720
module arises our components and it

439
00:19:05,100 --> 00:19:09,000
allows<font color="#CCCCCC"> us to do a lot of</font><font color="#E5E5E5"> things where</font>

440
00:19:06,720 --> 00:19:11,100
you can factor out commonalities in your

441
00:19:09,000 --> 00:19:12,900
state machines so<font color="#E5E5E5"> really you are</font>

442
00:19:11,100 --> 00:19:14,189
starting programming at the model level

443
00:19:12,900 --> 00:19:16,770
and programming at the state machine

444
00:19:14,190 --> 00:19:18,930
level and finally there's a way to

445
00:19:16,770 --> 00:19:23,129
simulate the fact that you might<font color="#CCCCCC"> have a</font>

446
00:19:18,930 --> 00:19:25,560
call that blocks and this this is also

447
00:19:23,130 --> 00:19:27,780
<font color="#E5E5E5">necessary because say I'm doing I'm a</font>

448
00:19:25,560 --> 00:19:29,730
client and I'm calling<font color="#E5E5E5"> into the system</font>

449
00:19:27,780 --> 00:19:31,620
with the ping well that client is

450
00:19:29,730 --> 00:19:33,930
blocked until a palm comes back or a

451
00:19:31,620 --> 00:19:36,479
timeout happens so in order to handle

452
00:19:33,930 --> 00:19:38,550
<font color="#CCCCCC">this we need to have a way to say in the</font>

453
00:19:36,480 --> 00:19:40,800
model that I'm making this call and now

454
00:19:38,550 --> 00:19:42,300
the car is blocking and the support for

455
00:19:40,800 --> 00:19:44,970
this inner line quick check as well and

456
00:19:42,300 --> 00:19:47,310
the<font color="#CCCCCC"> weight it's it's done as we are some</font>

457
00:19:44,970 --> 00:19:49,470
clever continuation stuff so essentially

458
00:19:47,310 --> 00:19:51,510
you are<font color="#E5E5E5"> wrapping up the rest of your</font>

459
00:19:49,470 --> 00:19:54,180
when the block happens you take the rest

460
00:19:51,510 --> 00:19:57,360
of<font color="#E5E5E5"> the of the of the operation as a</font>

461
00:19:54,180 --> 00:19:59,610
continuation you save that<font color="#CCCCCC"> in a separate</font>

462
00:19:57,360 --> 00:20:01,409
<font color="#E5E5E5">place and then when the unblock happens</font>

463
00:19:59,610 --> 00:20:01,949
you splice in that continuation stack

464
00:20:01,410 --> 00:20:05,070
back in

465
00:20:01,950 --> 00:20:07,799
to the current<font color="#E5E5E5"> race so it's it's clever</font>

466
00:20:05,070 --> 00:20:09,658
its really clever and it allows you<font color="#E5E5E5"> that</font>

467
00:20:07,799 --> 00:20:12,750
<font color="#E5E5E5">the gist of it is that it allows you to</font>

468
00:20:09,659 --> 00:20:14,039
handle<font color="#CCCCCC"> multiple processes calling into</font>

469
00:20:12,750 --> 00:20:16,080
the system and being blocked on the

470
00:20:14,039 --> 00:20:19,769
system because you can model plugging

471
00:20:16,080 --> 00:20:21,539
processes with this<font color="#E5E5E5"> I have a simplified</font>

472
00:20:19,769 --> 00:20:24,870
example of what they look<font color="#CCCCCC"> like these</font>

473
00:20:21,539 --> 00:20:27,149
test cases so this<font color="#CCCCCC"> is the state system</font>

474
00:20:24,870 --> 00:20:30,268
has a routing table lookup and here we

475
00:20:27,149 --> 00:20:35,370
have essentially an identity and we won

476
00:20:30,269 --> 00:20:38,760
num some in notes close to that identity

477
00:20:35,370 --> 00:20:40,918
and so this up here defines in the model

478
00:20:38,760 --> 00:20:42,870
in the in the in the test specification

479
00:20:40,919 --> 00:20:44,909
says basically well if you want to

480
00:20:42,870 --> 00:20:46,199
execute this closest to command well

481
00:20:44,909 --> 00:20:49,440
you're<font color="#E5E5E5"> just going to call the real</font>

482
00:20:46,200 --> 00:20:51,750
system on systems closest to<font color="#CCCCCC"> commands so</font>

483
00:20:49,440 --> 00:20:54,269
this is kind of like the the command

484
00:20:51,750 --> 00:20:56,549
itself we can generate the precondition

485
00:20:54,269 --> 00:20:59,549
for doing this is it has to be we must

486
00:20:56,549 --> 00:21:02,250
be<font color="#CCCCCC"> in</font><font color="#E5E5E5"> some state s which is initialized</font>

487
00:20:59,549 --> 00:21:03,929
so we're<font color="#E5E5E5"> not allowed</font><font color="#CCCCCC"> to do this closest</font>

488
00:21:02,250 --> 00:21:07,350
to call unless the state engine has been

489
00:21:03,929 --> 00:21:09,120
initialized so one of the first thing

490
00:21:07,350 --> 00:21:12,600
the state system will do is will

491
00:21:09,120 --> 00:21:14,580
initialize the<font color="#CCCCCC"> states the distributed</font>

492
00:21:12,600 --> 00:21:17,279
hash tables routing table state system

493
00:21:14,580 --> 00:21:21,090
and then it'll<font color="#CCCCCC"> be in an initialized</font>

494
00:21:17,279 --> 00:21:22,679
state then we have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> generate some some</font>

495
00:21:21,090 --> 00:21:24,480
parameters we have to generate the

496
00:21:22,679 --> 00:21:26,850
identity and the norm of here so how do

497
00:21:24,480 --> 00:21:29,159
we<font color="#E5E5E5"> do that well we supply some random</font>

498
00:21:26,850 --> 00:21:32,219
identity and some random natural number

499
00:21:29,159 --> 00:21:34,440
in<font color="#E5E5E5"> particular we can supply 0 here so</font>

500
00:21:32,220 --> 00:21:36,419
you can actually ask for the<font color="#E5E5E5"> 0 closest</font>

501
00:21:34,440 --> 00:21:40,200
to this one right that<font color="#E5E5E5"> that is a limit</font>

502
00:21:36,419 --> 00:21:43,320
case and then you have this is a

503
00:21:40,200 --> 00:21:45,600
call-out specification it essentially

504
00:21:43,320 --> 00:21:47,668
<font color="#E5E5E5">says how the marking system works so it</font>

505
00:21:45,600 --> 00:21:50,549
says so that well when you<font color="#E5E5E5"> call</font><font color="#CCCCCC"> in with</font>

506
00:21:47,669 --> 00:21:52,710
this idea none I expect that<font color="#E5E5E5"> it is a</font>

507
00:21:50,549 --> 00:21:54,809
call to<font color="#CCCCCC"> this routing</font><font color="#E5E5E5"> me test system and</font>

508
00:21:52,710 --> 00:21:57,210
we're asking for neighbors down there

509
00:21:54,809 --> 00:22:00,389
and we're asking for ID<font color="#E5E5E5"> nom and this is</font>

510
00:21:57,210 --> 00:22:02,760
<font color="#E5E5E5">just a dummy variable so this is what we</font>

511
00:22:00,389 --> 00:22:05,879
expect the mock to have in<font color="#E5E5E5"> its call out</font>

512
00:22:02,760 --> 00:22:09,629
and we expect it to return<font color="#E5E5E5"> then then our</font>

513
00:22:05,880 --> 00:22:12,480
generated return is a list of peers so

514
00:22:09,630 --> 00:22:14,309
this<font color="#E5E5E5"> is a generator this part here that</font>

515
00:22:12,480 --> 00:22:15,450
generates a random list of PS that we

516
00:22:14,309 --> 00:22:18,690
give back

517
00:22:15,450 --> 00:22:22,710
so now<font color="#CCCCCC"> that is bound to the NS thing</font>

518
00:22:18,690 --> 00:22:24,990
here and then we say that that the call

519
00:22:22,710 --> 00:22:28,169
our sequence returns the inners so this

520
00:22:24,990 --> 00:22:31,380
means that the post condition of this

521
00:22:28,169 --> 00:22:34,649
thing is that it expects the list of

522
00:22:31,380 --> 00:22:37,440
peers that we just<font color="#E5E5E5"> generated by calling</font>

523
00:22:34,649 --> 00:22:39,479
<font color="#E5E5E5">into the subsystem through mocking is</font>

524
00:22:37,440 --> 00:22:42,450
exactly the response we want for this

525
00:22:39,480 --> 00:22:44,909
closest to core in this case but this

526
00:22:42,450 --> 00:22:46,559
what what this thing has done is that we

527
00:22:44,909 --> 00:22:48,990
have the state process that has some

528
00:22:46,559 --> 00:22:52,080
things around it inside that there's a

529
00:22:48,990 --> 00:22:54,299
routing table which which we actually

530
00:22:52,080 --> 00:22:56,519
mucked out and the only<font color="#E5E5E5"> thing we're</font>

531
00:22:54,299 --> 00:22:58,500
testing here is that our state process

532
00:22:56,519 --> 00:23:00,240
is doing the right thing under the

533
00:22:58,500 --> 00:23:03,690
<font color="#E5E5E5">assumption that the underlying routing</font>

534
00:23:00,240 --> 00:23:05,159
table is doing the right thing there's

535
00:23:03,690 --> 00:23:07,260
no internal state transition here so I

536
00:23:05,159 --> 00:23:10,080
<font color="#CCCCCC">don't have a way to essentially</font>

537
00:23:07,260 --> 00:23:13,408
transition from this state I mean is the

538
00:23:10,080 --> 00:23:15,029
same as it were that when I started and

539
00:23:13,409 --> 00:23:18,659
I looked<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the code if I could find</font>

540
00:23:15,029 --> 00:23:20,760
something that was I easy<font color="#E5E5E5"> enough to kind</font>

541
00:23:18,659 --> 00:23:22,409
of explain in one slide that<font color="#CCCCCC"> that had a</font>

542
00:23:20,760 --> 00:23:24,059
state transition but I really couldn't

543
00:23:22,409 --> 00:23:26,309
<font color="#E5E5E5">find it many of the other cases are way</font>

544
00:23:24,059 --> 00:23:27,750
more complicated than this one so<font color="#E5E5E5"> I just</font>

545
00:23:26,309 --> 00:23:29,850
wanted<font color="#CCCCCC"> to give you a feel for how you</font>

546
00:23:27,750 --> 00:23:35,399
what what they<font color="#E5E5E5"> look like these things</font>

547
00:23:29,850 --> 00:23:38,309
you<font color="#E5E5E5"> write so the global arch of doing</font>

548
00:23:35,399 --> 00:23:41,340
this<font color="#E5E5E5"> whoo you then do it well the</font><font color="#CCCCCC"> idea</font>

549
00:23:38,309 --> 00:23:43,049
<font color="#CCCCCC">is build a universe around the client so</font>

550
00:23:41,340 --> 00:23:45,418
there's millions of notes out there so

551
00:23:43,049 --> 00:23:46,830
simulate millionth notes right you don't

552
00:23:45,419 --> 00:23:49,620
want to run millions of notes because

553
00:23:46,830 --> 00:23:55,620
that would<font color="#CCCCCC"> be very expensive in UAH over</font>

554
00:23:49,620 --> 00:23:57,090
years AWS you know credit so so you

555
00:23:55,620 --> 00:23:59,610
<font color="#E5E5E5">don't want to actually run a million</font>

556
00:23:57,090 --> 00:24:01,110
notes you want to simulate them and the

557
00:23:59,610 --> 00:24:02,729
inside is that you don't<font color="#E5E5E5"> have to</font>

558
00:24:01,110 --> 00:24:03,990
<font color="#CCCCCC">simulate the mall you</font><font color="#E5E5E5"> don't have to you</font>

559
00:24:02,730 --> 00:24:05,700
only have to<font color="#E5E5E5"> simulate those you</font>

560
00:24:03,990 --> 00:24:08,850
communicate with in this particular test

561
00:24:05,700 --> 00:24:10,380
case which isn't all of them it's very

562
00:24:08,850 --> 00:24:14,730
often<font color="#E5E5E5"> like five notes you</font><font color="#CCCCCC"> have to</font>

563
00:24:10,380 --> 00:24:16,860
simulate so this makes it<font color="#E5E5E5"> way easier the</font>

564
00:24:14,730 --> 00:24:19,409
next inside is the universe your simile

565
00:24:16,860 --> 00:24:20,939
it should be the worst ever right rather

566
00:24:19,409 --> 00:24:23,309
than building a universe that behaves

567
00:24:20,940 --> 00:24:25,260
like normal universes behave you want a

568
00:24:23,309 --> 00:24:28,260
universe that behaves really badly like

569
00:24:25,260 --> 00:24:29,309
sending in wrong data if you call<font color="#CCCCCC"> out to</font>

570
00:24:28,260 --> 00:24:31,470
a file system it

571
00:24:29,309 --> 00:24:37,350
returns error again<font color="#E5E5E5"> something nasty</font>

572
00:24:31,470 --> 00:24:40,769
right if you and if you you know<font color="#E5E5E5"> a make</font>

573
00:24:37,350 --> 00:24:43,230
a curry out that query might go well<font color="#E5E5E5"> I'd</font>

574
00:24:40,769 --> 00:24:45,450
my time out or the network socket might

575
00:24:43,230 --> 00:24:47,639
have an error<font color="#CCCCCC"> because network is socket</font>

576
00:24:45,450 --> 00:24:49,649
is down of the network is lost so you

577
00:24:47,639 --> 00:24:52,799
<font color="#CCCCCC">just encode all these possibilities and</font>

578
00:24:49,649 --> 00:24:55,049
then you tune the internal system such

579
00:24:52,799 --> 00:24:58,289
that it is very often the case that the

580
00:24:55,049 --> 00:25:01,259
uncommon cases have so<font color="#E5E5E5"> basically the</font>

581
00:24:58,289 --> 00:25:03,600
normal operation is actually the one

582
00:25:01,259 --> 00:25:05,879
<font color="#CCCCCC">that is the</font><font color="#E5E5E5"> most uncommon in the test</font>

583
00:25:03,600 --> 00:25:07,320
case and all the exceptional cases are

584
00:25:05,879 --> 00:25:09,509
the ones that are most common in the

585
00:25:07,320 --> 00:25:11,820
test case by<font color="#E5E5E5"> switching it around like</font>

586
00:25:09,509 --> 00:25:13,919
this<font color="#E5E5E5"> you make sure that you hit all the</font>

587
00:25:11,820 --> 00:25:15,749
nasty cases that people forget when they

588
00:25:13,919 --> 00:25:18,059
<font color="#E5E5E5">write code right and then there's</font>

589
00:25:15,749 --> 00:25:22,860
another trick rather than<font color="#CCCCCC"> using the</font>

590
00:25:18,059 --> 00:25:25,259
large set of a 256-bit identity space we

591
00:25:22,860 --> 00:25:27,959
just caught it down to seven bit so now

592
00:25:25,259 --> 00:25:29,730
i can<font color="#CCCCCC"> add most have 127 notes in there</font>

593
00:25:27,960 --> 00:25:31,440
and that means all the corner cases

594
00:25:29,730 --> 00:25:34,619
where you have collisions and notes they

595
00:25:31,440 --> 00:25:36,269
have them all the<font color="#E5E5E5"> time so that in for</font>

596
00:25:34,619 --> 00:25:38,668
that that forces me to actually handle

597
00:25:36,269 --> 00:25:40,440
those cases right because now<font color="#CCCCCC"> I have</font>

598
00:25:38,669 --> 00:25:42,269
<font color="#E5E5E5">made it simpler and of course</font><font color="#CCCCCC"> when you</font>

599
00:25:40,440 --> 00:25:47,490
then compile it for for production you

600
00:25:42,269 --> 00:25:49,950
just move<font color="#CCCCCC"> 72</font><font color="#E5E5E5"> 256 so this</font><font color="#CCCCCC"> is another</font>

601
00:25:47,490 --> 00:25:51,960
trick simplify the the production system

602
00:25:49,950 --> 00:25:53,639
while you're testing it and then opened

603
00:25:51,960 --> 00:25:58,830
up for for the full thing when you're

604
00:25:53,639 --> 00:26:01,139
really<font color="#E5E5E5"> doing things so as I cept when</font>

605
00:25:58,830 --> 00:26:02,939
you generate test cases you want to tune

606
00:26:01,139 --> 00:26:05,850
them you want to<font color="#E5E5E5"> generate all the nasty</font>

607
00:26:02,940 --> 00:26:08,309
cases you don't<font color="#CCCCCC"> want to generate the</font>

608
00:26:05,850 --> 00:26:10,529
cases in your generator test that are

609
00:26:08,309 --> 00:26:12,240
the common<font color="#E5E5E5"> ones because you just use the</font>

610
00:26:10,529 --> 00:26:14,460
system you will be traversing that code

611
00:26:12,240 --> 00:26:15,779
path all the<font color="#E5E5E5"> time what you want to do is</font>

612
00:26:14,460 --> 00:26:20,999
you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to force the system to do</font>

613
00:26:15,779 --> 00:26:24,330
things that<font color="#E5E5E5"> are not that common right so</font>

614
00:26:20,999 --> 00:26:26,039
if you know a bit about the common cases

615
00:26:24,330 --> 00:26:28,980
that usually go wrong in such systems

616
00:26:26,039 --> 00:26:31,019
you can<font color="#E5E5E5"> you can really tune your</font>

617
00:26:28,980 --> 00:26:34,499
heuristics such that it tends to find

618
00:26:31,019 --> 00:26:36,809
box very very quickly the goal here is

619
00:26:34,499 --> 00:26:38,909
and I want<font color="#E5E5E5"> to stress this the goal is to</font>

620
00:26:36,809 --> 00:26:42,299
<font color="#E5E5E5">find box it's not to prove that the code</font>

621
00:26:38,909 --> 00:26:43,240
<font color="#CCCCCC">is correct dextra</font><font color="#E5E5E5"> famous is famously</font>

622
00:26:42,299 --> 00:26:46,179
said that

623
00:26:43,240 --> 00:26:50,500
<font color="#E5E5E5">some</font><font color="#CCCCCC"> something to the same extent as a</font>

624
00:26:46,179 --> 00:26:52,360
certain point that you can not prove the

625
00:26:50,500 --> 00:26:54,190
absence of box essentially that that

626
00:26:52,360 --> 00:26:56,590
there's no way by which you can be sure

627
00:26:54,190 --> 00:26:58,660
that<font color="#CCCCCC"> there are no box in your code even</font>

628
00:26:56,590 --> 00:27:01,600
if you did a proof in some kind of proof

629
00:26:58,660 --> 00:27:03,790
assistant then<font color="#E5E5E5"> I mean your specification</font>

630
00:27:01,600 --> 00:27:06,189
might be wrong so there's always<font color="#E5E5E5"> a</font>

631
00:27:03,790 --> 00:27:07,960
boundary you can keep pushing so here

632
00:27:06,190 --> 00:27:09,940
the goal is generate some test cases

633
00:27:07,960 --> 00:27:14,650
that I'm very likely<font color="#E5E5E5"> to hit box in the</font>

634
00:27:09,940 --> 00:27:18,970
system by being<font color="#E5E5E5"> nasty to the system so</font>

635
00:27:14,650 --> 00:27:20,260
well what do you do well the possible

636
00:27:18,970 --> 00:27:22,510
commands you<font color="#CCCCCC"> can generate in such a</font>

637
00:27:20,260 --> 00:27:24,520
model are all the commands that<font color="#E5E5E5"> can be</font>

638
00:27:22,510 --> 00:27:26,410
<font color="#E5E5E5">issued by a client in sight they want to</font>

639
00:27:24,520 --> 00:27:29,080
call out into the hash table<font color="#E5E5E5"> so that is</font>

640
00:27:26,410 --> 00:27:31,510
kind ping a certain note or<font color="#E5E5E5"> store this</font>

641
00:27:29,080 --> 00:27:34,720
identity out in the table<font color="#E5E5E5"> or look for</font>

642
00:27:31,510 --> 00:27:36,280
this identity in the outer table and

643
00:27:34,720 --> 00:27:38,950
it's important to note that client

644
00:27:36,280 --> 00:27:42,580
commands can block if I ping a node then

645
00:27:38,950 --> 00:27:44,650
I'm blocked as a client until the answer

646
00:27:42,580 --> 00:27:47,740
that ping comes back so I have to handle

647
00:27:44,650 --> 00:27:51,460
that by using model dosis blog on block

648
00:27:47,740 --> 00:27:52,900
commands in<font color="#E5E5E5"> the system and</font><font color="#CCCCCC"> then the</font>

649
00:27:51,460 --> 00:27:54,730
other kind of commands<font color="#CCCCCC"> that can happen</font>

650
00:27:52,900 --> 00:27:58,240
is that the universe can actually make a

651
00:27:54,730 --> 00:28:00,820
request at our node right so it can send

652
00:27:58,240 --> 00:28:04,990
a request into our node and then we have

653
00:28:00,820 --> 00:28:07,870
to<font color="#E5E5E5"> respond back to the universe so</font>

654
00:28:04,990 --> 00:28:09,760
there's commands we can generate as a

655
00:28:07,870 --> 00:28:12,040
client the calls into the hash<font color="#CCCCCC"> table and</font>

656
00:28:09,760 --> 00:28:14,710
there's commands<font color="#E5E5E5"> that the universe can</font>

657
00:28:12,040 --> 00:28:16,659
generate to us us towards<font color="#E5E5E5"> us as a node</font>

658
00:28:14,710 --> 00:28:20,110
in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> in the world in the hash table</font>

659
00:28:16,660 --> 00:28:22,540
and so there's a bit<font color="#CCCCCC"> more commands than</font>

660
00:28:20,110 --> 00:28:27,309
just the commands that that are the

661
00:28:22,540 --> 00:28:30,100
commands you<font color="#CCCCCC"> can call into the</font><font color="#E5E5E5"> system so</font>

662
00:28:27,309 --> 00:28:32,170
now we come into tricks and one of the

663
00:28:30,100 --> 00:28:34,270
problems in this<font color="#E5E5E5"> system is that it has a</font>

664
00:28:32,170 --> 00:28:36,190
randomness the server places in<font color="#E5E5E5"> this</font>

665
00:28:34,270 --> 00:28:39,670
code where you're pulling out a random

666
00:28:36,190 --> 00:28:41,530
integer and and the way you need<font color="#CCCCCC"> to</font>

667
00:28:39,670 --> 00:28:44,260
<font color="#E5E5E5">handle that is by</font><font color="#CCCCCC"> marking the randomness</font>

668
00:28:41,530 --> 00:28:45,790
and the reason you need to do it is that

669
00:28:44,260 --> 00:28:47,740
essentially what you're looking at here

670
00:28:45,790 --> 00:28:52,270
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that you have a two-party linear type</font>

671
00:28:47,740 --> 00:28:54,640
system in the sense that in a linear

672
00:28:52,270 --> 00:28:56,320
type system you have a concept of choice

673
00:28:54,640 --> 00:28:56,830
<font color="#CCCCCC">and there are two kinds</font><font color="#E5E5E5"> of choice in</font>

674
00:28:56,320 --> 00:28:59,080
this

675
00:28:56,830 --> 00:29:03,220
does choice I do and there's<font color="#CCCCCC"> choice</font>

676
00:28:59,080 --> 00:29:05,139
somebody else does in this case this the

677
00:29:03,220 --> 00:29:07,870
model can<font color="#E5E5E5"> peek among say several</font>

678
00:29:05,140 --> 00:29:10,149
commands or you can pick among several

679
00:29:07,870 --> 00:29:12,250
inputs to certain commands and it's a

680
00:29:10,149 --> 00:29:13,840
choice that the model makes but then the

681
00:29:12,250 --> 00:29:16,000
system<font color="#E5E5E5"> of the test might make choices as</font>

682
00:29:13,840 --> 00:29:19,029
well depending on what I put into it and

683
00:29:16,000 --> 00:29:21,519
<font color="#E5E5E5">that is choice I have no</font><font color="#CCCCCC"> control over so</font>

684
00:29:19,029 --> 00:29:24,340
for instance if i do this i generate a

685
00:29:21,519 --> 00:29:26,440
command that then it forces the model to

686
00:29:24,340 --> 00:29:28,570
do a random call to the random system

687
00:29:26,440 --> 00:29:31,990
well then the model the system under

688
00:29:28,570 --> 00:29:36,399
<font color="#CCCCCC">test is making a random</font><font color="#E5E5E5"> choice or which</font>

689
00:29:31,990 --> 00:29:38,889
<font color="#CCCCCC">i have no direct control so so here by</font>

690
00:29:36,399 --> 00:29:41,260
mocking the randomness and<font color="#E5E5E5"> i can move</font>

691
00:29:38,889 --> 00:29:44,620
the randomness into the model so now i

692
00:29:41,260 --> 00:29:47,950
<font color="#CCCCCC">have the</font><font color="#E5E5E5"> choice of what random value</font>

693
00:29:44,620 --> 00:29:50,260
<font color="#CCCCCC">will return so now</font><font color="#E5E5E5"> i generate not just I</font>

694
00:29:47,950 --> 00:29:52,269
just don't use the normal random number

695
00:29:50,260 --> 00:29:55,480
generator in<font color="#CCCCCC"> the system I have a random</font>

696
00:29:52,269 --> 00:29:57,370
<font color="#E5E5E5">number generator myself and then I use</font>

697
00:29:55,480 --> 00:29:59,740
that<font color="#CCCCCC"> one so i can predict what is going</font>

698
00:29:57,370 --> 00:30:02,350
<font color="#E5E5E5">to push back into the</font><font color="#CCCCCC"> system and now i</font>

699
00:29:59,740 --> 00:30:04,120
have i have the<font color="#CCCCCC"> control over the whole</font>

700
00:30:02,350 --> 00:30:06,279
<font color="#CCCCCC">thing because</font><font color="#E5E5E5"> i turned it around and</font>

701
00:30:04,120 --> 00:30:07,870
this is a<font color="#E5E5E5"> very common trick you have to</font>

702
00:30:06,279 --> 00:30:09,880
use in these systems in order to prove

703
00:30:07,870 --> 00:30:12,158
them correct because there's a<font color="#CCCCCC"> lot of</font>

704
00:30:09,880 --> 00:30:15,880
cases<font color="#E5E5E5"> where the system</font><font color="#CCCCCC"> under test have</font>

705
00:30:12,159 --> 00:30:18,399
certain choices and trying to model your

706
00:30:15,880 --> 00:30:20,799
your system by allowing the thing to

707
00:30:18,399 --> 00:30:22,719
have certain multiple choices is usually

708
00:30:20,799 --> 00:30:25,418
very very very hard and sometimes

709
00:30:22,720 --> 00:30:27,760
totally impossible so<font color="#CCCCCC"> the triggers that</font>

710
00:30:25,419 --> 00:30:30,250
you essentially mark that thing move it

711
00:30:27,760 --> 00:30:32,350
into<font color="#E5E5E5"> the model and</font><font color="#CCCCCC"> then you make the the</font>

712
00:30:30,250 --> 00:30:34,360
informed choice about what the

713
00:30:32,350 --> 00:30:38,139
underlying system should do in that<font color="#E5E5E5"> case</font>

714
00:30:34,360 --> 00:30:40,389
so this this trick kind of solved

715
00:30:38,139 --> 00:30:41,979
everything i had with randomness in the

716
00:30:40,389 --> 00:30:44,709
system because<font color="#E5E5E5"> there's no randomness</font>

717
00:30:41,980 --> 00:30:47,139
anymore<font color="#CCCCCC"> i made it into explicit</font>

718
00:30:44,710 --> 00:30:50,110
deterministic things which I control and

719
00:30:47,139 --> 00:30:53,439
that leads me to the other<font color="#E5E5E5"> thing and</font>

720
00:30:50,110 --> 00:30:56,049
this is perhaps the thing I see most of

721
00:30:53,440 --> 00:31:00,970
the<font color="#E5E5E5"> time in in the real world no pun</font>

722
00:30:56,049 --> 00:31:03,850
intended which is time handling so in

723
00:31:00,970 --> 00:31:07,510
Tristan's in general people are very bad

724
00:31:03,850 --> 00:31:10,929
at handling time and the thing<font color="#CCCCCC"> you</font>

725
00:31:07,510 --> 00:31:12,040
<font color="#CCCCCC">should think about</font><font color="#E5E5E5"> is that time</font>

726
00:31:10,930 --> 00:31:15,070
should<font color="#E5E5E5"> really be modeled purely</font>

727
00:31:12,040 --> 00:31:16,990
functionally so what you do is you say

728
00:31:15,070 --> 00:31:19,450
well there's a point in<font color="#CCCCCC"> time which we</font>

729
00:31:16,990 --> 00:31:21,910
can<font color="#E5E5E5"> call now and we inject that into the</font>

730
00:31:19,450 --> 00:31:24,280
into the call and the system itself is

731
00:31:21,910 --> 00:31:28,090
never ever going to<font color="#E5E5E5"> ask for the time</font>

732
00:31:24,280 --> 00:31:29,649
from there on out we we say we take the

733
00:31:28,090 --> 00:31:31,659
<font color="#E5E5E5">time stamp and then we tell the system</font>

734
00:31:29,650 --> 00:31:33,310
the time is now this point in time

735
00:31:31,660 --> 00:31:36,130
please do your stuff with that

736
00:31:33,310 --> 00:31:38,169
<font color="#E5E5E5">information and it's the right way</font><font color="#CCCCCC"> of</font>

737
00:31:36,130 --> 00:31:40,240
looking at it because time is what<font color="#E5E5E5"> I</font>

738
00:31:38,170 --> 00:31:42,670
call epsilon relative anyway I mean if

739
00:31:40,240 --> 00:31:44,890
you inside your system take a snapshot

740
00:31:42,670 --> 00:31:47,350
of time it's a certain point well when

741
00:31:44,890 --> 00:31:50,680
when the next<font color="#E5E5E5"> instruction executes we</font>

742
00:31:47,350 --> 00:31:52,990
have already<font color="#CCCCCC"> moved in epsilon in time so</font>

743
00:31:50,680 --> 00:31:56,020
the<font color="#E5E5E5"> point is that time is always lagging</font>

744
00:31:52,990 --> 00:31:57,760
behind in every system anyway so you

745
00:31:56,020 --> 00:32:00,280
<font color="#E5E5E5">really want to mark your system such</font>

746
00:31:57,760 --> 00:32:02,350
that it is a<font color="#E5E5E5"> catch up model it knows</font>

747
00:32:00,280 --> 00:32:04,300
what<font color="#E5E5E5"> the time is currently and then it</font>

748
00:32:02,350 --> 00:32:06,129
gets a point that says oh now the time

749
00:32:04,300 --> 00:32:09,010
is here<font color="#E5E5E5"> okay fine so I have to catch up</font>

750
00:32:06,130 --> 00:32:11,260
to that point but while is catching up

751
00:32:09,010 --> 00:32:13,330
times<font color="#E5E5E5"> then moving a little bit right so</font>

752
00:32:11,260 --> 00:32:15,640
so now the time is<font color="#E5E5E5"> actually an epsilon</font>

753
00:32:13,330 --> 00:32:18,550
above that but the building your system

754
00:32:15,640 --> 00:32:20,920
with this ketchup trick in in mind and

755
00:32:18,550 --> 00:32:23,770
it's usually<font color="#E5E5E5"> vacation that you get</font>

756
00:32:20,920 --> 00:32:26,050
<font color="#E5E5E5">better systems and I see very many</font>

757
00:32:23,770 --> 00:32:29,050
systems that are modal in this that they

758
00:32:26,050 --> 00:32:30,909
have a a catch-up mode and an operating

759
00:32:29,050 --> 00:32:32,889
mode so when they start up and they're

760
00:32:30,910 --> 00:32:34,360
behind they start with the catch-up mode

761
00:32:32,890 --> 00:32:37,120
and then they keep on being<font color="#E5E5E5"> in that</font>

762
00:32:34,360 --> 00:32:39,100
until they hit the own arm caught up so

763
00:32:37,120 --> 00:32:40,899
i go into operating<font color="#E5E5E5"> mode but if you</font>

764
00:32:39,100 --> 00:32:43,240
write your code such that it is always

765
00:32:40,900 --> 00:32:45,670
catching up you don't need<font color="#E5E5E5"> the operating</font>

766
00:32:43,240 --> 00:32:47,740
mode anymore so you can you can get rid

767
00:32:45,670 --> 00:32:51,220
of<font color="#E5E5E5"> that modal construction in your</font>

768
00:32:47,740 --> 00:32:53,740
language and so what you do here is you

769
00:32:51,220 --> 00:32:55,720
write your time handling like this

770
00:32:53,740 --> 00:32:57,760
inside<font color="#E5E5E5"> the</font><font color="#CCCCCC"> system so time is handled</font>

771
00:32:55,720 --> 00:32:59,590
like this inside this inside this model

772
00:32:57,760 --> 00:33:02,950
and inside the system under<font color="#CCCCCC"> test and</font>

773
00:32:59,590 --> 00:33:06,070
then what<font color="#CCCCCC"> you do is you say well let me</font>

774
00:33:02,950 --> 00:33:08,620
then build a model of Erlang's timing

775
00:33:06,070 --> 00:33:11,169
constructs so if i set a timer it's a

776
00:33:08,620 --> 00:33:13,149
model that actually has the time and<font color="#CCCCCC"> i'm</font>

777
00:33:11,170 --> 00:33:16,330
<font color="#CCCCCC">mocking</font><font color="#E5E5E5"> the real timing calls in the</font>

778
00:33:13,150 --> 00:33:17,830
system so<font color="#E5E5E5"> again</font><font color="#CCCCCC"> i'm moving time from</font>

779
00:33:16,330 --> 00:33:19,960
something that<font color="#CCCCCC"> is controlled by the</font>

780
00:33:17,830 --> 00:33:21,730
system to something that is controlled

781
00:33:19,960 --> 00:33:23,710
<font color="#E5E5E5">by the model and</font><font color="#CCCCCC"> i have a specific</font>

782
00:33:21,730 --> 00:33:25,120
<font color="#CCCCCC">callin model that sets advanced time</font>

783
00:33:23,710 --> 00:33:27,610
from<font color="#E5E5E5"> here to there</font>

784
00:33:25,120 --> 00:33:29,530
so now<font color="#E5E5E5"> I control when time is actually</font>

785
00:33:27,610 --> 00:33:32,050
stepping<font color="#CCCCCC"> ahead as stepping forward and</font>

786
00:33:29,530 --> 00:33:36,580
that allows me<font color="#CCCCCC"> to find some really</font><font color="#E5E5E5"> nasty</font>

787
00:33:32,050 --> 00:33:38,320
box in and around time because I i can

788
00:33:36,580 --> 00:33:39,790
have cases where something happens and

789
00:33:38,320 --> 00:33:42,909
something happens at the same time

790
00:33:39,790 --> 00:33:44,770
precisely at the same time when nothing

791
00:33:42,910 --> 00:33:47,020
was in between<font color="#E5E5E5"> and that is not possible</font>

792
00:33:44,770 --> 00:33:50,650
in the real world but checking for it is

793
00:33:47,020 --> 00:33:54,280
nice so when so this this is this<font color="#E5E5E5"> is a</font>

794
00:33:50,650 --> 00:33:56,800
this is<font color="#E5E5E5"> a really good trick inject time</font>

795
00:33:54,280 --> 00:34:00,428
and handle time purely functionally it

796
00:33:56,800 --> 00:34:03,550
simplifies so much code it's it's and

797
00:34:00,429 --> 00:34:06,160
once this project i started<font color="#E5E5E5"> doing it for</font>

798
00:34:03,550 --> 00:34:08,168
<font color="#E5E5E5">real and every</font><font color="#CCCCCC"> project i've written sins</font>

799
00:34:06,160 --> 00:34:13,899
uses this model because it's so<font color="#E5E5E5"> much</font>

800
00:34:08,168 --> 00:34:16,270
easier so what have I model almost

801
00:34:13,899 --> 00:34:18,819
everything the only thing that is not

802
00:34:16,270 --> 00:34:22,600
currently<font color="#E5E5E5"> modeled is this search system</font>

803
00:34:18,820 --> 00:34:24,190
that recursos when it request something

804
00:34:22,600 --> 00:34:26,199
and gets back some values and then

805
00:34:24,190 --> 00:34:27,730
request some work impacts on values so

806
00:34:26,199 --> 00:34:30,189
you have this recursion going on when

807
00:34:27,730 --> 00:34:33,820
you convert against a specific identity

808
00:34:30,190 --> 00:34:36,550
that is<font color="#E5E5E5"> not yet modeled in the system in</font>

809
00:34:33,820 --> 00:34:38,440
the cluster of all the components when

810
00:34:36,550 --> 00:34:39,850
you when you add them together so

811
00:34:38,440 --> 00:34:42,550
there's bound to be a park or two in

812
00:34:39,850 --> 00:34:44,980
there I'm pretty<font color="#E5E5E5"> sure whenever I do this</font>

813
00:34:42,550 --> 00:34:47,710
this box<font color="#E5E5E5"> in there so that is not yet</font>

814
00:34:44,980 --> 00:34:50,110
safe I found something between<font color="#CCCCCC"> 10 and 20</font>

815
00:34:47,710 --> 00:34:53,320
bucks when when I took this on the code

816
00:34:50,110 --> 00:34:56,710
and some of them were some of whom were

817
00:34:53,320 --> 00:34:58,360
of the kind where you have to it's one

818
00:34:56,710 --> 00:35:00,190
<font color="#CCCCCC">in the million kinds of box it's</font>

819
00:34:58,360 --> 00:35:01,750
something<font color="#E5E5E5"> that happens very rarely but</font>

820
00:35:00,190 --> 00:35:05,920
still will happen it's it as a certain

821
00:35:01,750 --> 00:35:08,920
point for somebody so it I say it works

822
00:35:05,920 --> 00:35:13,990
I you<font color="#CCCCCC"> you find</font><font color="#E5E5E5"> some box which are very</font>

823
00:35:08,920 --> 00:35:16,120
unlikely to be found<font color="#E5E5E5"> by unit tests so</font>

824
00:35:13,990 --> 00:35:19,600
yes and finally everything is open

825
00:35:16,120 --> 00:35:24,130
<font color="#E5E5E5">source so you can just go there and look</font>

826
00:35:19,600 --> 00:35:28,569
at the code if you<font color="#CCCCCC"> want so everything is</font>

827
00:35:24,130 --> 00:35:31,150
<font color="#E5E5E5">there including the whole model the the</font>

828
00:35:28,570 --> 00:35:35,260
component model uses is I<font color="#E5E5E5"> think it's the</font>

829
00:35:31,150 --> 00:35:37,510
largest one outside commercial places so

830
00:35:35,260 --> 00:35:38,370
it's the largest open source component

831
00:35:37,510 --> 00:35:42,780
model

832
00:35:38,370 --> 00:35:48,450
<font color="#CCCCCC">Forlan quick check that is out there yes</font>

833
00:35:42,780 --> 00:35:58,500
so are there<font color="#E5E5E5"> any questions or are people</font>

834
00:35:48,450 --> 00:36:01,560
destroyed yes honest I know it's not and

835
00:35:58,500 --> 00:36:05,190
the commercial quick check i use is not

836
00:36:01,560 --> 00:36:07,680
<font color="#E5E5E5">open source and that's a</font><font color="#CCCCCC"> problem and the</font>

837
00:36:05,190 --> 00:36:09,570
reason<font color="#E5E5E5"> is that the reason I use it is</font>

838
00:36:07,680 --> 00:36:19,020
because I couldn't do this without it

839
00:36:09,570 --> 00:36:21,120
and yes it's yeah yes but it's worse

840
00:36:19,020 --> 00:36:22,800
than that because the the stateful model

841
00:36:21,120 --> 00:36:24,630
is not really what you see i use

842
00:36:22,800 --> 00:36:26,640
component models which is an entirely

843
00:36:24,630 --> 00:36:28,380
different thing so they build stateful

844
00:36:26,640 --> 00:36:31,470
models then they did parallel stateful

845
00:36:28,380 --> 00:36:34,050
models and which I even which is another

846
00:36:31,470 --> 00:36:36,480
thing by itself<font color="#E5E5E5"> but then what they</font>

847
00:36:34,050 --> 00:36:38,040
started doing are these component models

848
00:36:36,480 --> 00:36:41,520
which are really<font color="#E5E5E5"> based on a very clever</font>

849
00:36:38,040 --> 00:36:42,900
monad where you can do all<font color="#CCCCCC"> this mocking</font>

850
00:36:41,520 --> 00:36:45,330
and call out stuff and blocking and

851
00:36:42,900 --> 00:36:47,820
unblocking and there's a whole tears L

852
00:36:45,330 --> 00:36:49,650
for writing mock specification where you

853
00:36:47,820 --> 00:36:51,060
can say well I have these free possible

854
00:36:49,650 --> 00:36:53,970
calls and they can happen in any order

855
00:36:51,060 --> 00:36:55,590
or then if I commit<font color="#CCCCCC"> to this path then</font>

856
00:36:53,970 --> 00:36:57,569
these<font color="#E5E5E5"> three things must happen that or</font>

857
00:36:55,590 --> 00:36:58,980
the body if I commit<font color="#CCCCCC"> to that part well</font>

858
00:36:57,570 --> 00:37:01,110
then these things<font color="#E5E5E5"> not have must happen</font>

859
00:36:58,980 --> 00:37:04,290
in<font color="#E5E5E5"> that order and this call is optional</font>

860
00:37:01,110 --> 00:37:07,440
<font color="#E5E5E5">so you have all these kinds of dsl for</font>

861
00:37:04,290 --> 00:37:10,259
subscribing mocking and and that's very

862
00:37:07,440 --> 00:37:14,700
very powerful<font color="#E5E5E5"> and and that is not own</font>

863
00:37:10,260 --> 00:37:16,680
source either so so and the clustering

864
00:37:14,700 --> 00:37:20,850
features that i use another saw season

865
00:37:16,680 --> 00:37:22,830
so so so that that is a weakness I think

866
00:37:20,850 --> 00:37:25,589
the stateful part is pretty easy to

867
00:37:22,830 --> 00:37:27,060
write I think we could say say we take a

868
00:37:25,590 --> 00:37:29,130
camel and<font color="#E5E5E5"> we say we want to implement</font>

869
00:37:27,060 --> 00:37:32,070
<font color="#E5E5E5">that photo camera I think that is not</font>

870
00:37:29,130 --> 00:37:33,900
that<font color="#E5E5E5"> hard to actually get right the</font>

871
00:37:32,070 --> 00:37:35,370
other the other thing that is subtle but

872
00:37:33,900 --> 00:37:37,050
hard to get right in these quick check

873
00:37:35,370 --> 00:37:39,480
models are the generators and those

874
00:37:37,050 --> 00:37:41,820
wrinkles so what what defines their

875
00:37:39,480 --> 00:37:44,520
power is really<font color="#E5E5E5"> not how feature full</font>

876
00:37:41,820 --> 00:37:47,490
they are it is how good they are at the

877
00:37:44,520 --> 00:37:49,470
heuristics right and because I've seen

878
00:37:47,490 --> 00:37:51,209
<font color="#E5E5E5">examples of using quick check models</font>

879
00:37:49,470 --> 00:37:51,959
where you are running a million<font color="#E5E5E5"> test</font>

880
00:37:51,210 --> 00:37:53,670
cases it

881
00:37:51,960 --> 00:37:55,589
finds nothing because just doing pure

882
00:37:53,670 --> 00:37:57,420
randomness this system is not doing

883
00:37:55,589 --> 00:37:59,790
randomness it's doing highly skewed

884
00:37:57,420 --> 00:38:01,380
distributions where it targets very

885
00:37:59,790 --> 00:38:04,500
specific kinds of things<font color="#CCCCCC"> that are very</font>

886
00:38:01,380 --> 00:38:06,750
<font color="#E5E5E5">often wrong in systems so it might</font><font color="#CCCCCC"> take</font>

887
00:38:04,500 --> 00:38:08,849
I have an example<font color="#E5E5E5"> where it took</font>

888
00:38:06,750 --> 00:38:11,040
thousands cases to find something with

889
00:38:08,849 --> 00:38:13,380
one of the competing<font color="#CCCCCC"> quickcheck</font>

890
00:38:11,040 --> 00:38:16,980
implementations this particular

891
00:38:13,380 --> 00:38:19,500
<font color="#E5E5E5">implementation found it in 24 cases so</font>

892
00:38:16,980 --> 00:38:21,270
there's really if you do this right

893
00:38:19,500 --> 00:38:29,310
there's really<font color="#E5E5E5"> something something to be</font>

894
00:38:21,270 --> 00:38:31,950
gained there's there's actually really

895
00:38:29,310 --> 00:38:34,799
good papers about it if<font color="#E5E5E5"> you have the ACM</font>

896
00:38:31,950 --> 00:38:38,759
library available then then the<font color="#E5E5E5"> real</font>

897
00:38:34,800 --> 00:38:40,380
otherwise you have a wall yes but I can

898
00:38:38,760 --> 00:38:42,420
link use of the papers they all document

899
00:38:40,380 --> 00:38:45,570
it pretty well and it is possible to to

900
00:38:42,420 --> 00:38:47,609
you know I to steal this and implement

901
00:38:45,570 --> 00:38:51,960
it if you want and I think<font color="#E5E5E5"> that that</font>

902
00:38:47,609 --> 00:38:56,250
that the papers a reasonably good a lot

903
00:38:51,960 --> 00:38:58,260
of this is not used much outside a cubic

904
00:38:56,250 --> 00:39:00,780
writer and quick<font color="#CCCCCC"> chek actually so</font><font color="#E5E5E5"> I tend</font>

905
00:38:58,260 --> 00:39:02,640
to<font color="#E5E5E5"> be the first user and then I have to</font>

906
00:39:00,780 --> 00:39:04,320
<font color="#E5E5E5">improve the documentation and ask them</font>

907
00:39:02,640 --> 00:39:06,270
some questions about<font color="#E5E5E5"> how do you use this</font>

908
00:39:04,320 --> 00:39:10,230
and there has been<font color="#E5E5E5"> for instance for the</font>

909
00:39:06,270 --> 00:39:12,660
clustering thing in this I I asked<font color="#E5E5E5"> them</font>

910
00:39:10,230 --> 00:39:14,190
why is this not working as i expect and

911
00:39:12,660 --> 00:39:16,410
the answer was oh but the documentation

912
00:39:14,190 --> 00:39:18,570
is wrong so it's clear you cannot use

913
00:39:16,410 --> 00:39:22,980
that we have to fix the documentation

914
00:39:18,570 --> 00:39:26,010
first and so so more work is needed but

915
00:39:22,980 --> 00:39:27,990
but it's I mean it's when you look at

916
00:39:26,010 --> 00:39:31,109
how powerful it is we want this in<font color="#E5E5E5"> more</font>

917
00:39:27,990 --> 00:39:33,629
languages definitely it's so powerful I

918
00:39:31,109 --> 00:39:35,759
and then it's fun that's another thing

919
00:39:33,630 --> 00:39:43,690
it's really<font color="#CCCCCC"> fun to to hack these kinds</font>

920
00:39:35,760 --> 00:39:48,430
of things yes more questions oh come on

921
00:39:43,690 --> 00:40:07,060
pureness with the time steps<font color="#CCCCCC"> I would</font>

922
00:39:48,430 --> 00:40:08,710
just<font color="#E5E5E5"> like to ask you how your show your</font>

923
00:40:07,060 --> 00:40:12,460
thing in production or you're thinking

924
00:40:08,710 --> 00:40:26,650
testing here what is your concern your

925
00:40:12,460 --> 00:40:28,150
concern is efficiency ah yes yeah but

926
00:40:26,650 --> 00:40:30,940
perhaps you could d cobble it I mean

927
00:40:28,150 --> 00:40:32,770
most<font color="#E5E5E5"> of the time</font><font color="#CCCCCC"> when time passes right</font>

928
00:40:30,940 --> 00:40:36,730
so time advances there's nothing to do

929
00:40:32,770 --> 00:40:38,619
right so if you decouple the

930
00:40:36,730 --> 00:40:40,569
memorization from the time so you say

931
00:40:38,619 --> 00:40:42,609
<font color="#E5E5E5">okay so I move for edit to this point</font>

932
00:40:40,569 --> 00:40:45,160
and there's still nothing<font color="#E5E5E5"> to do well</font>

933
00:40:42,609 --> 00:40:47,799
then I<font color="#CCCCCC"> don't think you need to memorize</font>

934
00:40:45,160 --> 00:40:50,890
because that is a very cheap operation

935
00:40:47,800 --> 00:40:52,990
so so i would definitely<font color="#E5E5E5"> if i had that</font>

936
00:40:50,890 --> 00:40:56,259
problem and<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> in kind of like an</font>

937
00:40:52,990 --> 00:40:58,750
efficiency I worried about efficiency of

938
00:40:56,260 --> 00:41:00,550
<font color="#E5E5E5">this and namely memorization and caching</font>

939
00:40:58,750 --> 00:41:03,609
I would definitely think about can ID

940
00:41:00,550 --> 00:41:06,220
corporal the memo cash part from the

941
00:41:03,609 --> 00:41:08,828
timing<font color="#E5E5E5"> part such that i can avoid this</font>

942
00:41:06,220 --> 00:41:11,259
problem right because you're right<font color="#CCCCCC"> if</font>

943
00:41:08,829 --> 00:41:14,470
<font color="#E5E5E5">the if the timing part is part of your</font>

944
00:41:11,260 --> 00:41:17,710
underlying call then the<font color="#E5E5E5"> problem is that</font>

945
00:41:14,470 --> 00:41:20,109
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is going to change all the time and</font>

946
00:41:17,710 --> 00:41:22,540
then my memo cash is dead right because

947
00:41:20,109 --> 00:41:25,089
it'll be<font color="#E5E5E5"> trashed by doing this but if</font>

948
00:41:22,540 --> 00:41:26,500
you for instance think about it and<font color="#E5E5E5"> say</font>

949
00:41:25,089 --> 00:41:28,180
<font color="#CCCCCC">okay so first</font><font color="#E5E5E5"> I'm going to take this</font>

950
00:41:26,500 --> 00:41:30,670
<font color="#CCCCCC">thing i'm going to take other parameters</font>

951
00:41:28,180 --> 00:41:32,680
then<font color="#E5E5E5"> i'm going to do a computation is</font>

952
00:41:30,670 --> 00:41:34,000
there anything to do right if there's

953
00:41:32,680 --> 00:41:37,089
something to do now<font color="#E5E5E5"> i have a list of</font>

954
00:41:34,000 --> 00:41:39,190
operations and perhaps that is my zabal

955
00:41:37,089 --> 00:41:40,960
or<font color="#CCCCCC"> cashable or subsystem so that is mean</font>

956
00:41:39,190 --> 00:41:42,280
why Zabaleen<font color="#CCCCCC"> cacheable and</font><font color="#E5E5E5"> i think</font>

957
00:41:40,960 --> 00:41:45,880
nowadays that that doing pure

958
00:41:42,280 --> 00:41:50,050
computation on the cpu is has zero cost

959
00:41:45,880 --> 00:41:52,510
if the<font color="#E5E5E5"> problem very often is that you</font>

960
00:41:50,050 --> 00:41:54,310
hit some I or memory barrier but doing

961
00:41:52,510 --> 00:41:56,539
things inside this<font color="#CCCCCC"> view to figure out</font>

962
00:41:54,310 --> 00:41:59,089
stuff is almost free

963
00:41:56,539 --> 00:42:02,329
so that that that would<font color="#CCCCCC"> be my guess at</font>

964
00:41:59,089 --> 00:42:04,308
how I would go about it simply try to

965
00:42:02,329 --> 00:42:06,739
mud out the time from your memorized

966
00:42:04,309 --> 00:42:09,859
course if it's possible I mean you might

967
00:42:06,739 --> 00:42:33,799
be in a situation<font color="#E5E5E5"> where it's not so yes</font>

968
00:42:09,859 --> 00:42:38,449
yes so yes so<font color="#CCCCCC"> so what yeah so what you</font>

969
00:42:33,799 --> 00:42:41,419
do is you say you define a set of

970
00:42:38,449 --> 00:42:45,259
possible commands right so the possible

971
00:42:41,419 --> 00:42:48,379
see zeroes are defined<font color="#CCCCCC"> by you right each</font>

972
00:42:45,259 --> 00:42:50,630
sees see has a precondition tied to it

973
00:42:48,380 --> 00:42:53,959
which says whether or not it can<font color="#E5E5E5"> fire in</font>

974
00:42:50,630 --> 00:42:55,640
the current state right so given m0 it

975
00:42:53,959 --> 00:42:57,169
might be impossible to fire this

976
00:42:55,640 --> 00:43:00,379
particular command because it might<font color="#CCCCCC"> be</font>

977
00:42:57,169 --> 00:43:02,239
quenched at this point right then

978
00:43:00,380 --> 00:43:04,519
there's a weighting function that says I

979
00:43:02,239 --> 00:43:06,619
prefer to generate in this state I

980
00:43:04,519 --> 00:43:08,569
prefer<font color="#CCCCCC"> to generate these commands and</font>

981
00:43:06,619 --> 00:43:10,880
not that<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> is important</font><font color="#E5E5E5"> for</font>

982
00:43:08,569 --> 00:43:13,339
instance say I have a timer hanging in

983
00:43:10,880 --> 00:43:15,559
the thymus system and I really<font color="#E5E5E5"> want that</font>

984
00:43:13,339 --> 00:43:17,419
to fire as soon<font color="#E5E5E5"> as i</font><font color="#CCCCCC"> can so i have a</font>

985
00:43:15,559 --> 00:43:21,319
weight<font color="#CCCCCC"> on that</font><font color="#E5E5E5"> i say if there's a timer</font>

986
00:43:17,419 --> 00:43:23,299
waiting and<font color="#CCCCCC"> cat</font><font color="#E5E5E5"> that can fire up the the</font>

987
00:43:21,319 --> 00:43:25,429
chance of<font color="#E5E5E5"> that firing a little bit not a</font>

988
00:43:23,299 --> 00:43:27,650
lot<font color="#E5E5E5"> because i want to have these nasty</font>

989
00:43:25,429 --> 00:43:29,479
into leavings with timers but a bit a

990
00:43:27,650 --> 00:43:31,939
little bit so it is more likely to fire

991
00:43:29,479 --> 00:43:34,038
eventually kind of close to<font color="#CCCCCC"> this point</font>

992
00:43:31,939 --> 00:43:36,288
and once you have<font color="#E5E5E5"> kind of picked a</font>

993
00:43:34,039 --> 00:43:38,569
command then you pick and try to

994
00:43:36,289 --> 00:43:41,150
generate inputs for that command right

995
00:43:38,569 --> 00:43:43,579
and those are also based on<font color="#E5E5E5"> the state so</font>

996
00:43:41,150 --> 00:43:45,949
the state can also limit those and then

997
00:43:43,579 --> 00:43:48,259
when once you have generated that you

998
00:43:45,949 --> 00:43:49,969
have another precondition that says<font color="#CCCCCC"> ok</font>

999
00:43:48,259 --> 00:43:52,849
so that command with these particular

1000
00:43:49,969 --> 00:43:54,650
<font color="#E5E5E5">inputs add is that allowed and if</font><font color="#CCCCCC"> that</font>

1001
00:43:52,849 --> 00:43:56,479
failed to backtrack and try not and

1002
00:43:54,650 --> 00:43:59,689
other other inputs until you hit it

1003
00:43:56,479 --> 00:44:02,029
right and once you have a valid<font color="#CCCCCC"> command</font>

1004
00:43:59,689 --> 00:44:05,839
generated then you use your transition

1005
00:44:02,029 --> 00:44:09,950
to<font color="#E5E5E5"> figure out what m1 is and now you I</font>

1006
00:44:05,839 --> 00:44:11,599
<font color="#CCCCCC">named one</font><font color="#E5E5E5"> you repeat the game right and</font>

1007
00:44:09,950 --> 00:44:13,848
another point<font color="#E5E5E5"> that I kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> leaned over</font>

1008
00:44:11,599 --> 00:44:17,270
here is that the<font color="#CCCCCC"> callout thing nowadays</font>

1009
00:44:13,849 --> 00:44:19,430
contains both the state transitions the

1010
00:44:17,270 --> 00:44:22,130
expected postcondition return values

1011
00:44:19,430 --> 00:44:25,129
internal assertions on the model and

1012
00:44:22,130 --> 00:44:27,530
external assertions on the on the system

1013
00:44:25,130 --> 00:44:29,450
won't insist so nowadays essentially the

1014
00:44:27,530 --> 00:44:31,760
<font color="#E5E5E5">callout sequence that</font><font color="#CCCCCC"> monett the points</font>

1015
00:44:29,450 --> 00:44:35,359
that encompasses all of this transition

1016
00:44:31,760 --> 00:44:38,359
stuff inside it and that is<font color="#E5E5E5"> not true in</font>

1017
00:44:35,359 --> 00:44:41,060
the earlier stateful models this is a

1018
00:44:38,359 --> 00:44:43,160
kind<font color="#E5E5E5"> of like a new newest development in</font>

1019
00:44:41,060 --> 00:44:46,940
the last two years but it is more

1020
00:44:43,160 --> 00:44:48,410
efficient because it allows you to it's

1021
00:44:46,940 --> 00:44:50,240
more efficient because it allows you to

1022
00:44:48,410 --> 00:44:53,299
kind of like cram everything into one

1023
00:44:50,240 --> 00:44:55,939
call out sequence and the<font color="#CCCCCC"> fact that you</font>

1024
00:44:53,300 --> 00:44:58,190
can have one of<font color="#E5E5E5"> the things i didn't</font>

1025
00:44:55,940 --> 00:45:00,560
really you know touch on is that you can

1026
00:44:58,190 --> 00:45:02,030
have several internal model transitions

1027
00:45:00,560 --> 00:45:04,160
before you have a state transition in

1028
00:45:02,030 --> 00:45:06,740
the real system so you might have this

1029
00:45:04,160 --> 00:45:09,140
ability<font color="#E5E5E5"> to local transitions and then do</font>

1030
00:45:06,740 --> 00:45:11,750
a new command and that<font color="#E5E5E5"> is that is what</font>

1031
00:45:09,140 --> 00:45:13,490
you use the call out stuff for and it's

1032
00:45:11,750 --> 00:45:15,349
it's powerful because it means you that

1033
00:45:13,490 --> 00:45:17,240
you can do stuff like<font color="#E5E5E5"> okay so the client</font>

1034
00:45:15,349 --> 00:45:18,349
here<font color="#E5E5E5"> I'm going to add the clients of the</font>

1035
00:45:17,240 --> 00:45:21,020
blocking list and then I'm going<font color="#E5E5E5"> to</font>

1036
00:45:18,349 --> 00:45:22,400
block it so now from now on I know<font color="#E5E5E5"> that</font>

1037
00:45:21,020 --> 00:45:25,339
this client is blocked and I know<font color="#CCCCCC"> it's</font>

1038
00:45:22,400 --> 00:45:27,170
process identifier so when<font color="#E5E5E5"> I could do an</font>

1039
00:45:25,339 --> 00:45:29,509
unblock I can see unplug that this

1040
00:45:27,170 --> 00:45:31,339
process identifier and then continue

1041
00:45:29,510 --> 00:45:33,950
with doing remove it from the blocked

1042
00:45:31,339 --> 00:45:36,319
state and then continue and this is

1043
00:45:33,950 --> 00:45:41,000
where the continuations happen because<font color="#E5E5E5"> I</font>

1044
00:45:36,319 --> 00:45:43,279
write that as at block remove what what

1045
00:45:41,000 --> 00:45:45,230
happens in<font color="#E5E5E5"> the system is it says at oh</font>

1046
00:45:43,280 --> 00:45:46,970
that's a block so removing the rest of

1047
00:45:45,230 --> 00:45:49,460
things goes on to the continuation thing

1048
00:45:46,970 --> 00:45:52,490
over here and then when the unblock hits

1049
00:45:49,460 --> 00:45:55,760
I do this by splicing it into my current

1050
00:45:52,490 --> 00:45:57,410
state that that is how it works and you

1051
00:45:55,760 --> 00:45:58,910
<font color="#CCCCCC">need this in order to</font><font color="#E5E5E5"> handle this</font>

1052
00:45:57,410 --> 00:46:02,470
because that's blocking calls in here

1053
00:45:58,910 --> 00:46:02,470
yes

1054
00:46:04,239 --> 00:46:10,529
cool no more<font color="#E5E5E5"> questions</font>

