1
00:00:00,000 --> 00:00:15,210
yes hello and welcome to<font color="#CCCCCC"> ya hello yeah I</font>

2
00:00:13,559 --> 00:00:18,359
see that<font color="#E5E5E5"> I'm going to</font><font color="#CCCCCC"> talk about till</font>

3
00:00:15,210 --> 00:00:20,460
yesterday and focusing on attacks that

4
00:00:18,359 --> 00:00:23,039
we've seen against here less in<font color="#CCCCCC"> the past</font>

5
00:00:20,460 --> 00:00:24,330
couple<font color="#E5E5E5"> of years and also a problem that</font>

6
00:00:23,039 --> 00:00:27,930
I think<font color="#E5E5E5"> doesn't get enough attention</font>

7
00:00:24,330 --> 00:00:32,699
which is the people implementing TLS but

8
00:00:27,930 --> 00:00:35,579
doing it in<font color="#E5E5E5"> the wrong way so a quick</font>

9
00:00:32,700 --> 00:00:37,950
introduction about me I for one work as

10
00:00:35,579 --> 00:00:43,350
a freelance journalist I mostly<font color="#E5E5E5"> right</font>

11
00:00:37,950 --> 00:00:46,590
for the German news magazine golem and I

12
00:00:43,350 --> 00:00:49,590
also do<font color="#E5E5E5"> a fuzzing which I talked</font><font color="#CCCCCC"> about</font>

13
00:00:46,590 --> 00:00:51,539
yesterday which is<font color="#E5E5E5"> where I run a project</font>

14
00:00:49,590 --> 00:00:53,640
that's funded by the infrastructure

15
00:00:51,539 --> 00:00:57,030
initiative formula Linux Foundation and

16
00:00:53,640 --> 00:00:59,190
I write a monthly newsletter about TLS

17
00:00:57,030 --> 00:01:02,309
which is the bulletproof TLS newsletter

18
00:00:59,190 --> 00:01:04,860
which you can all and should<font color="#E5E5E5"> all</font>

19
00:01:02,309 --> 00:01:07,200
subscribe to then you get a monthly

20
00:01:04,860 --> 00:01:10,140
summary of all the<font color="#E5E5E5"> important</font><font color="#CCCCCC"> stuff that</font>

21
00:01:07,200 --> 00:01:12,330
has happened around tears and I also

22
00:01:10,140 --> 00:01:15,299
<font color="#E5E5E5">occasionally trying to fix</font><font color="#CCCCCC"> things in the</font>

23
00:01:12,330 --> 00:01:17,548
TLS ecosystem which sometimes turns out

24
00:01:15,299 --> 00:01:23,759
to be difficult<font color="#CCCCCC"> and yeah that's</font><font color="#E5E5E5"> what I</font>

25
00:01:17,549 --> 00:01:25,560
try to talk<font color="#CCCCCC"> about today so I don't think</font>

26
00:01:23,759 --> 00:01:27,299
I<font color="#CCCCCC"> need to tell this to anyone here TLS</font>

27
00:01:25,560 --> 00:01:30,840
is very important because we basically

28
00:01:27,299 --> 00:01:33,720
use it all the time whenever<font color="#E5E5E5"> we're doing</font>

29
00:01:30,840 --> 00:01:38,100
a Google search or log into Facebook or

30
00:01:33,720 --> 00:01:44,340
check our emails usually these days this

31
00:01:38,100 --> 00:01:46,439
happens encrypted over TLS and this is

32
00:01:44,340 --> 00:01:51,570
<font color="#E5E5E5">just because this often causes some</font>

33
00:01:46,439 --> 00:01:54,478
confusion so what about the ssl versus

34
00:01:51,570 --> 00:01:58,320
TLS thing so<font color="#CCCCCC"> SSL is essentially just the</font>

35
00:01:54,479 --> 00:02:01,469
old name of TLS ssl was invented by

36
00:01:58,320 --> 00:02:03,360
Netscape in the 1990s and it had to

37
00:02:01,469 --> 00:02:06,390
public versions there was a virgin too

38
00:02:03,360 --> 00:02:09,869
and the version 3 the version<font color="#CCCCCC"> 1 it was</font>

39
00:02:06,390 --> 00:02:12,430
only an internal thing and then it was

40
00:02:09,869 --> 00:02:14,500
kind of moved over to being a

41
00:02:12,430 --> 00:02:18,310
official internet standard and it was

42
00:02:14,500 --> 00:02:20,079
renamed<font color="#E5E5E5"> to TLS and unfortunately the</font>

43
00:02:18,310 --> 00:02:23,439
versioning is causing some confusion

44
00:02:20,079 --> 00:02:25,030
because it was we had<font color="#CCCCCC"> SSL two and three</font>

45
00:02:23,439 --> 00:02:29,170
and then the new your thing was called

46
00:02:25,030 --> 00:02:31,480
<font color="#E5E5E5">here s 1.0 and 1.1 and 1.2 and soon we</font>

47
00:02:29,170 --> 00:02:32,980
will have 1.3 although there's currently

48
00:02:31,480 --> 00:02:36,040
a discussion whether this should be

49
00:02:32,980 --> 00:02:39,518
called a TLS 2 point 0 or maybe four

50
00:02:36,040 --> 00:02:42,010
point oh so<font color="#E5E5E5"> not entirely sure but I will</font>

51
00:02:39,519 --> 00:02:43,780
call it<font color="#CCCCCC"> tedious 1.3 because</font><font color="#E5E5E5"> until the</font>

52
00:02:42,010 --> 00:02:47,918
day before yesterday that was<font color="#E5E5E5"> what we</font>

53
00:02:43,780 --> 00:02:50,349
thought we would call it and also the

54
00:02:47,919 --> 00:02:52,989
colors here kind<font color="#E5E5E5"> of indicate that all</font>

55
00:02:50,349 --> 00:02:55,030
versions of the original SSL are

56
00:02:52,989 --> 00:02:57,069
insecure these days so they have

57
00:02:55,030 --> 00:03:02,560
<font color="#E5E5E5">designed security vulnerabilities that</font>

58
00:02:57,069 --> 00:03:06,879
cannot be fixed and TLS 1.2 oh and 1.1

59
00:03:02,560 --> 00:03:08,560
are at least problematic so the only

60
00:03:06,879 --> 00:03:14,138
thing you should<font color="#E5E5E5"> really use these days</font>

61
00:03:08,560 --> 00:03:15,909
is TLS 1.2 then they have been a bunch

62
00:03:14,139 --> 00:03:19,540
of attacks in the past couple<font color="#E5E5E5"> of years</font>

63
00:03:15,909 --> 00:03:21,399
and you probably all know this these

64
00:03:19,540 --> 00:03:24,159
days and attack you really goes with a

65
00:03:21,400 --> 00:03:28,180
catchy name at least and sometimes<font color="#E5E5E5"> even</font>

66
00:03:24,159 --> 00:03:30,459
with the logo so this trend was mostly

67
00:03:28,180 --> 00:03:34,299
started with the<font color="#CCCCCC"> so called beast attack</font>

68
00:03:30,459 --> 00:03:38,049
and I<font color="#E5E5E5"> think the one that got most</font>

69
00:03:34,299 --> 00:03:40,689
attention of all was heartbleed and like

70
00:03:38,049 --> 00:03:48,669
continued over and the latest<font color="#E5E5E5"> one was</font>

71
00:03:40,689 --> 00:03:50,829
called sweet 32 yeah so and this is an

72
00:03:48,669 --> 00:03:53,349
aspect<font color="#E5E5E5"> that I find very interesting like</font>

73
00:03:50,829 --> 00:03:57,129
for many of these<font color="#E5E5E5"> attacks almost all of</font>

74
00:03:53,349 --> 00:03:59,409
them you can find pretty old sources

75
00:03:57,129 --> 00:04:01,120
where this attack was already described

76
00:03:59,409 --> 00:04:05,078
or at least a version of it was

77
00:04:01,120 --> 00:04:08,620
described so if you take something<font color="#E5E5E5"> like</font>

78
00:04:05,079 --> 00:04:12,729
I don't<font color="#E5E5E5"> know the drone attack which is</font>

79
00:04:08,620 --> 00:04:15,220
the so-called black<font color="#E5E5E5"> Baja attack the</font>

80
00:04:12,729 --> 00:04:18,489
underlying attack was discovered in 1998

81
00:04:15,220 --> 00:04:20,199
and one may<font color="#E5E5E5"> wonder why why do we still</font>

82
00:04:18,488 --> 00:04:23,260
have<font color="#E5E5E5"> a problem</font><font color="#CCCCCC"> with an attack that was</font>

83
00:04:20,199 --> 00:04:25,230
discovered<font color="#E5E5E5"> that long ago and this is</font>

84
00:04:23,260 --> 00:04:29,159
true<font color="#CCCCCC"> for many of these attacks</font>

85
00:04:25,230 --> 00:04:32,160
yeah so<font color="#E5E5E5"> here's just a list and I have</font>

86
00:04:29,160 --> 00:04:36,120
<font color="#E5E5E5">actually more examples for that but they</font>

87
00:04:32,160 --> 00:04:37,920
didn't fit on the slide anymore but<font color="#E5E5E5"> we</font>

88
00:04:36,120 --> 00:04:40,530
often see this that we have a new attack

89
00:04:37,920 --> 00:04:42,900
and<font color="#E5E5E5"> it's basically just a new version of</font>

90
00:04:40,530 --> 00:04:45,090
an attack that's been often more than

91
00:04:42,900 --> 00:04:50,909
<font color="#CCCCCC">ten years old or sometimes even like 20</font>

92
00:04:45,090 --> 00:04:52,770
<font color="#E5E5E5">years old and I want to go through the</font>

93
00:04:50,910 --> 00:04:54,660
history<font color="#E5E5E5"> of one of these</font><font color="#CCCCCC"> attacks which</font>

94
00:04:52,770 --> 00:04:58,469
has been<font color="#E5E5E5"> especially persistent and these</font>

95
00:04:54,660 --> 00:05:01,200
are the so-called padding Oracle's which

96
00:04:58,470 --> 00:05:07,350
the first description was by<font color="#E5E5E5"> say give</font>

97
00:05:01,200 --> 00:05:13,020
only in 2002 and the background<font color="#CCCCCC"> of this</font>

98
00:05:07,350 --> 00:05:15,990
is so TLS up until recently most TLS

99
00:05:13,020 --> 00:05:19,289
connections used something called CBC

100
00:05:15,990 --> 00:05:22,110
mode which<font color="#CCCCCC"> is a mode for block ciphers</font>

101
00:05:19,290 --> 00:05:28,410
and it combined it with an H Meg

102
00:05:22,110 --> 00:05:30,750
authentication<font color="#CCCCCC"> tech and because the CBC</font>

103
00:05:28,410 --> 00:05:33,000
mode does the encryption and the<font color="#E5E5E5"> H make</font>

104
00:05:30,750 --> 00:05:35,640
does the authenticity so it guarantees

105
00:05:33,000 --> 00:05:39,000
that nobody changes the data on<font color="#E5E5E5"> the way</font>

106
00:05:35,640 --> 00:05:41,820
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> way this is</font><font color="#E5E5E5"> done in TLS is the</font>

107
00:05:39,000 --> 00:05:45,090
<font color="#CCCCCC">so-called</font><font color="#E5E5E5"> Mac then encrypt or more</font>

108
00:05:41,820 --> 00:05:49,050
precise Mac then<font color="#E5E5E5"> Pat and encrypt so it</font>

109
00:05:45,090 --> 00:05:51,750
first calculates the mac and puts it

110
00:05:49,050 --> 00:05:53,850
after the plaintext then it pads it up

111
00:05:51,750 --> 00:05:57,000
to a certain block size and then

112
00:05:53,850 --> 00:06:01,410
encrypted with<font color="#E5E5E5"> cbc and this turns out to</font>

113
00:05:57,000 --> 00:06:04,380
be very problematic and a quick look at

114
00:06:01,410 --> 00:06:06,330
this padding so the way the padding

115
00:06:04,380 --> 00:06:09,390
looks like is actually quite simple if

116
00:06:06,330 --> 00:06:12,060
if it's one bite and it's just a zero if

117
00:06:09,390 --> 00:06:14,729
it's two bites and it's two ones and if

118
00:06:12,060 --> 00:06:17,850
it three bites then it's 32 so it's

119
00:06:14,730 --> 00:06:25,230
<font color="#E5E5E5">always like one bite more than the</font>

120
00:06:17,850 --> 00:06:29,520
number<font color="#E5E5E5"> you have here and then in the</font>

121
00:06:25,230 --> 00:06:32,160
original TLS 1.1 at one point there was

122
00:06:29,520 --> 00:06:35,039
the idea that if you get an error with

123
00:06:32,160 --> 00:06:37,530
the padding you get one error message

124
00:06:35,040 --> 00:06:38,400
and if you get an error with the<font color="#CCCCCC"> Mac you</font>

125
00:06:37,530 --> 00:06:41,190
get another error

126
00:06:38,400 --> 00:06:46,289
message so if the padding is somehow

127
00:06:41,190 --> 00:06:48,660
doesn't match you get an error it which

128
00:06:46,290 --> 00:06:50,820
is in a decryption alert and if the<font color="#CCCCCC"> Mac</font>

129
00:06:48,660 --> 00:06:57,060
fails you get this bad record<font color="#CCCCCC"> make error</font>

130
00:06:50,820 --> 00:06:59,490
and this is CBC<font color="#E5E5E5"> mode looks a bit</font>

131
00:06:57,060 --> 00:07:02,400
complicated<font color="#E5E5E5"> but it actually isn't that</font>

132
00:06:59,490 --> 00:07:04,199
<font color="#E5E5E5">complicated if you think like the main</font>

133
00:07:02,400 --> 00:07:07,770
thing you need to understand here is

134
00:07:04,199 --> 00:07:15,660
that every ciphertext is<font color="#E5E5E5"> X or into the</font>

135
00:07:07,770 --> 00:07:18,210
<font color="#E5E5E5">next block so yeah and how the attack</font>

136
00:07:15,660 --> 00:07:20,490
works so if you want to<font color="#E5E5E5"> attack this you</font>

137
00:07:18,210 --> 00:07:22,380
just throw<font color="#CCCCCC"> away the last block because</font>

138
00:07:20,490 --> 00:07:24,090
that always only<font color="#E5E5E5"> contains padding</font>

139
00:07:22,380 --> 00:07:28,680
because the padding is always that long

140
00:07:24,090 --> 00:07:32,429
and for the block before you can

141
00:07:28,680 --> 00:07:37,680
actually<font color="#E5E5E5"> buy</font><font color="#CCCCCC"> XOR in like in</font><font color="#E5E5E5"> this block</font>

142
00:07:32,430 --> 00:07:42,419
<font color="#CCCCCC">you can try to X or all the possible</font>

143
00:07:37,680 --> 00:07:46,590
values and at some point this will end

144
00:07:42,419 --> 00:07:50,940
up<font color="#CCCCCC"> being a 0 here and 0 is a valid</font>

145
00:07:46,590 --> 00:07:53,010
padding therefore once you put forth a

146
00:07:50,940 --> 00:07:57,030
true you and you get the valid padding

147
00:07:53,010 --> 00:07:59,610
here you have<font color="#CCCCCC"> guessed one bite correctly</font>

148
00:07:57,030 --> 00:08:03,929
and you<font color="#E5E5E5"> can decrypt one bite of this</font>

149
00:07:59,610 --> 00:08:07,889
encryption is that kind of clear or and

150
00:08:03,930 --> 00:08:10,320
you end up then you can basically do the

151
00:08:07,889 --> 00:08:12,570
same for next fight and try a padding

152
00:08:10,320 --> 00:08:14,789
with two bites and for the next<font color="#CCCCCC"> byte and</font>

153
00:08:12,570 --> 00:08:17,699
<font color="#E5E5E5">so on and by</font><font color="#CCCCCC"> that with several</font>

154
00:08:14,789 --> 00:08:22,080
connections you can like you<font color="#E5E5E5"> you need on</font>

155
00:08:17,699 --> 00:08:26,190
on<font color="#E5E5E5"> average 128 connections for each byte</font>

156
00:08:22,080 --> 00:08:29,520
to decrypt it so that's bad week the

157
00:08:26,190 --> 00:08:32,429
attacker can decrypt data and the first

158
00:08:29,520 --> 00:08:34,020
solution for this was<font color="#E5E5E5"> that they said</font>

159
00:08:32,429 --> 00:08:35,760
<font color="#CCCCCC">okay we have these different error</font>

160
00:08:34,020 --> 00:08:37,708
messages and<font color="#E5E5E5"> East give the attacker</font>

161
00:08:35,760 --> 00:08:39,299
information that the attacker can use to

162
00:08:37,708 --> 00:08:41,489
decrypt stuff so we just changed that

163
00:08:39,299 --> 00:08:44,370
<font color="#CCCCCC">and only sent</font><font color="#E5E5E5"> the same error message all</font>

164
00:08:41,490 --> 00:08:47,100
<font color="#E5E5E5">the time and the current t less than</font>

165
00:08:44,370 --> 00:08:51,209
resist decryption failed error must not

166
00:08:47,100 --> 00:08:54,329
be sent so this was in 2002

167
00:08:51,209 --> 00:08:57,719
so we would assume everyone has fixed

168
00:08:54,329 --> 00:09:02,638
this by now like for example HP they

169
00:08:57,720 --> 00:09:04,649
fixed it yesterday<font color="#E5E5E5"> I reported it to them</font>

170
00:09:02,639 --> 00:09:07,110
sometime last year I<font color="#E5E5E5"> don't exactly</font>

171
00:09:04,649 --> 00:09:09,209
remember but yesterday I got an email

172
00:09:07,110 --> 00:09:13,050
<font color="#E5E5E5">that was the first</font><font color="#CCCCCC"> reaction to my report</font>

173
00:09:09,209 --> 00:09:15,809
in bed they fixed it now on the<font color="#E5E5E5"> other</font>

174
00:09:13,050 --> 00:09:18,990
hand<font color="#E5E5E5"> circle um they are also vulnerable</font>

175
00:09:15,809 --> 00:09:22,019
to<font color="#E5E5E5"> this and they never answered my</font>

176
00:09:18,990 --> 00:09:23,910
emails so it's probably<font color="#E5E5E5"> not fixed if you</font>

177
00:09:22,019 --> 00:09:29,129
have<font color="#CCCCCC"> 60 router or if your customer of</font>

178
00:09:23,910 --> 00:09:31,079
them you might ask them about it but

179
00:09:29,129 --> 00:09:33,540
then now we have the same error message

180
00:09:31,079 --> 00:09:35,699
so if the attacker cannot do this error

181
00:09:33,540 --> 00:09:37,410
<font color="#E5E5E5">message padding Oracle anymore but</font>

182
00:09:35,699 --> 00:09:39,929
there's<font color="#E5E5E5"> still a problem because it takes</font>

183
00:09:37,410 --> 00:09:41,939
a different time to just check the

184
00:09:39,929 --> 00:09:43,980
padding or to check the<font color="#CCCCCC"> Mac because</font>

185
00:09:41,939 --> 00:09:45,959
calculating the<font color="#E5E5E5"> Mac involves some</font>

186
00:09:43,980 --> 00:09:48,660
complicated crypto and that just takes

187
00:09:45,959 --> 00:09:51,719
<font color="#E5E5E5">longer therefore the attacker can just</font>

188
00:09:48,660 --> 00:09:54,689
do all the same attack and just

189
00:09:51,720 --> 00:09:56,910
measuring how fast the server answers

190
00:09:54,689 --> 00:10:01,319
and then he has this padding Oracle

191
00:09:56,910 --> 00:10:05,129
attack all over again so this was also

192
00:10:01,319 --> 00:10:08,579
tried to<font color="#E5E5E5"> be fixed in TLS 1.2 so they</font>

193
00:10:05,129 --> 00:10:10,949
<font color="#CCCCCC">proposed a method</font><font color="#E5E5E5"> how you change it in a</font>

194
00:10:08,579 --> 00:10:13,199
way that it's always taking roughly at

195
00:10:10,949 --> 00:10:16,019
the same time but they already admit

196
00:10:13,199 --> 00:10:17,368
this leaves a small timing channel but

197
00:10:16,019 --> 00:10:20,549
it does<font color="#E5E5E5"> not believe to be large enough</font>

198
00:10:17,369 --> 00:10:22,740
to be exploitable and I want you now to

199
00:10:20,549 --> 00:10:24,660
remember that because<font color="#E5E5E5"> we will come back</font>

200
00:10:22,740 --> 00:10:31,230
to that a<font color="#E5E5E5"> few slides later slides later</font>

201
00:10:24,660 --> 00:10:33,089
so yeah so TLS 1.2 says you should fix

202
00:10:31,230 --> 00:10:35,339
timing they<font color="#CCCCCC"> propose something and then</font>

203
00:10:33,089 --> 00:10:41,369
they tell you it doesn't really fix it

204
00:10:35,339 --> 00:10:44,579
edit and only partly fixes it then a

205
00:10:41,369 --> 00:10:46,769
<font color="#E5E5E5">couple of years</font><font color="#CCCCCC"> later this I mean we</font>

206
00:10:44,579 --> 00:10:48,388
also have apart from here s and other

207
00:10:46,769 --> 00:10:51,149
encrypted protocol which is quite

208
00:10:48,389 --> 00:10:53,399
important this<font color="#E5E5E5"> SSH and they do something</font>

209
00:10:51,149 --> 00:10:55,290
<font color="#E5E5E5">different they don't use Mac then</font>

210
00:10:53,399 --> 00:10:58,110
encrypt they use something called Mac

211
00:10:55,290 --> 00:11:00,689
and encrypts so what they do is they

212
00:10:58,110 --> 00:11:02,819
calculate a mac<font color="#E5E5E5"> and then they encrypt</font>

213
00:11:00,689 --> 00:11:04,949
the plaintext<font color="#E5E5E5"> and place the</font><font color="#CCCCCC"> mac outside</font>

214
00:11:02,819 --> 00:11:07,110
and it turned out that this

215
00:11:04,950 --> 00:11:09,690
is<font color="#CCCCCC"> also very problematic and there was</font>

216
00:11:07,110 --> 00:11:11,700
an attack against it<font color="#E5E5E5"> and these days</font>

217
00:11:09,690 --> 00:11:14,010
these modes that have this vulnerability

218
00:11:11,700 --> 00:11:16,980
are no longer enabled by default in

219
00:11:14,010 --> 00:11:18,689
openssh but<font color="#CCCCCC"> I think they still can be</font>

220
00:11:16,980 --> 00:11:22,590
enabled<font color="#CCCCCC"> and some other implementations</font>

221
00:11:18,690 --> 00:11:24,930
to use them<font color="#E5E5E5"> and there was also a very</font>

222
00:11:22,590 --> 00:11:28,710
similar padding Oracle attack against

223
00:11:24,930 --> 00:11:32,010
XML encryption which but it didn't use

224
00:11:28,710 --> 00:11:34,710
padding it actually used arrows based on

225
00:11:32,010 --> 00:11:38,100
<font color="#CCCCCC">ASCII codes so it could</font><font color="#E5E5E5"> kind of trick</font>

226
00:11:34,710 --> 00:11:39,690
that in some sometimes the XML would

227
00:11:38,100 --> 00:11:41,940
validate and sometimes not and thereby

228
00:11:39,690 --> 00:11:47,070
doing something<font color="#CCCCCC"> very similar to a</font>

229
00:11:41,940 --> 00:11:49,110
padding Oracle attack and then<font color="#CCCCCC"> I</font><font color="#E5E5E5"> told</font>

230
00:11:47,070 --> 00:11:53,040
you you should remember this small non

231
00:11:49,110 --> 00:11:55,440
exploitable timing side channel so as

232
00:11:53,040 --> 00:11:57,329
<font color="#E5E5E5">you may imagine a couple of years</font><font color="#CCCCCC"> later</font>

233
00:11:55,440 --> 00:11:59,790
someone showed that indeed it was

234
00:11:57,330 --> 00:12:04,260
exploitable<font color="#E5E5E5"> which was the so-called</font>

235
00:11:59,790 --> 00:12:06,480
lucky 13 attack and this turned out to

236
00:12:04,260 --> 00:12:09,270
<font color="#E5E5E5">be a real mess because like trying to</font>

237
00:12:06,480 --> 00:12:13,950
<font color="#E5E5E5">fix the lucky 13 attack it's really hard</font>

238
00:12:09,270 --> 00:12:16,110
so for example<font color="#E5E5E5"> amazon they wrote their</font>

239
00:12:13,950 --> 00:12:18,750
own tail as<font color="#E5E5E5"> implementation and they</font>

240
00:12:16,110 --> 00:12:20,580
implemented what they thought was a fix

241
00:12:18,750 --> 00:12:23,670
for the<font color="#CCCCCC"> Lucky thirteen attack but</font><font color="#E5E5E5"> then</font>

242
00:12:20,580 --> 00:12:25,500
like the the authors of the origin<font color="#E5E5E5"> lucky</font>

243
00:12:23,670 --> 00:12:27,150
13 attacks had a look at<font color="#CCCCCC"> it and said no</font>

244
00:12:25,500 --> 00:12:29,670
<font color="#CCCCCC">this doesn't work we can still attack it</font>

245
00:12:27,150 --> 00:12:33,390
then there are some implementations that

246
00:12:29,670 --> 00:12:35,760
just chose to<font color="#E5E5E5"> not try to fix it because</font>

247
00:12:33,390 --> 00:12:37,980
it's too bothersome and they just<font color="#E5E5E5"> say</font><font color="#CCCCCC"> ok</font>

248
00:12:35,760 --> 00:12:40,020
use newest I promotes we we don't bother

249
00:12:37,980 --> 00:12:43,440
to fix this it's<font color="#CCCCCC"> just too too annoying</font>

250
00:12:40,020 --> 00:12:47,069
for example the go TLS<font color="#E5E5E5"> deck does this</font>

251
00:12:43,440 --> 00:12:49,320
and and also the the TLS<font color="#E5E5E5"> tag from</font>

252
00:12:47,070 --> 00:12:52,680
hannahs they're not<font color="#E5E5E5"> quite so broken TLS</font>

253
00:12:49,320 --> 00:12:55,920
he presented at this camp as far as I'm

254
00:12:52,680 --> 00:13:00,329
aware he also has not not<font color="#CCCCCC"> even attempted</font>

255
00:12:55,920 --> 00:13:04,709
to to fix this timing league and then

256
00:13:00,330 --> 00:13:08,280
earlier this year yoga's<font color="#E5E5E5"> Omaha ski found</font>

257
00:13:04,710 --> 00:13:12,000
out that while trying<font color="#E5E5E5"> to fix this lucky</font>

258
00:13:08,280 --> 00:13:14,939
13 attack openssl has actually opened up

259
00:13:12,000 --> 00:13:17,760
another padding Oracle attack that<font color="#E5E5E5"> is</font>

260
00:13:14,940 --> 00:13:20,310
more severe than the lucky 13 attack

261
00:13:17,760 --> 00:13:22,920
and if you<font color="#E5E5E5"> look at the changelog from</font>

262
00:13:20,310 --> 00:13:25,380
the latest<font color="#E5E5E5"> openssh version you will see</font>

263
00:13:22,920 --> 00:13:29,370
that they also apparently had some

264
00:13:25,380 --> 00:13:33,660
variant of the<font color="#CCCCCC"> Lucky thirteen</font><font color="#E5E5E5"> attack</font>

265
00:13:29,370 --> 00:13:37,650
that was fixed in the<font color="#CCCCCC"> latest version and</font>

266
00:13:33,660 --> 00:13:39,660
a lot<font color="#CCCCCC"> of this comes down to what Moxie</font>

267
00:13:37,650 --> 00:13:41,550
Marlinspike is once described as the

268
00:13:39,660 --> 00:13:44,939
so-called cryptographic<font color="#E5E5E5"> doom principle</font>

269
00:13:41,550 --> 00:13:47,069
where he says if you have to perform<font color="#E5E5E5"> any</font>

270
00:13:44,940 --> 00:13:49,380
cryptographic operation before verifying

271
00:13:47,070 --> 00:13:52,410
the<font color="#CCCCCC"> Mac on a message you've received it</font>

272
00:13:49,380 --> 00:13:55,260
will somehow inevitably lead to doom so

273
00:13:52,410 --> 00:13:57,270
his idea here is that ideally the very

274
00:13:55,260 --> 00:13:59,700
first thing you should do if you get<font color="#CCCCCC"> a</font>

275
00:13:57,270 --> 00:14:02,699
cryptographic message is to check that

276
00:13:59,700 --> 00:14:05,100
it's correct and if it's<font color="#CCCCCC"> not correct you</font>

277
00:14:02,700 --> 00:14:10,500
don't try to do anything else with it

278
00:14:05,100 --> 00:14:15,330
you<font color="#E5E5E5"> just send an error and be done yeah</font>

279
00:14:10,500 --> 00:14:18,210
so when when all these attacks came up

280
00:14:15,330 --> 00:14:20,340
against CC mode especially lucky 13 a

281
00:14:18,210 --> 00:14:22,830
lot of people<font color="#E5E5E5"> said ok what can we do</font>

282
00:14:20,340 --> 00:14:25,560
maybe we switch<font color="#CCCCCC"> to some other encryption</font>

283
00:14:22,830 --> 00:14:31,080
mode and the only thing that was

284
00:14:25,560 --> 00:14:34,979
basically left in TLS was our c4 and I

285
00:14:31,080 --> 00:14:36,720
see four but it<font color="#E5E5E5"> wasn't</font><font color="#CCCCCC"> really the best</font>

286
00:14:34,980 --> 00:14:38,400
idea because it<font color="#E5E5E5"> was already known at</font>

287
00:14:36,720 --> 00:14:41,250
that time that our c4 had some

288
00:14:38,400 --> 00:14:43,230
weaknesses so<font color="#E5E5E5"> Ashley for is unlike CBC</font>

289
00:14:41,250 --> 00:14:46,110
it's not a block cipher it's a stream

290
00:14:43,230 --> 00:14:48,660
cipher and it turns out in the key

291
00:14:46,110 --> 00:14:50,310
stream of<font color="#E5E5E5"> a thief or at some points</font>

292
00:14:48,660 --> 00:14:53,880
there are some bits that are more likely

293
00:14:50,310 --> 00:14:58,680
than others this was already known for

294
00:14:53,880 --> 00:15:00,420
<font color="#E5E5E5">since 2000 at least but then in 2013</font>

295
00:14:58,680 --> 00:15:05,250
after a lot of<font color="#E5E5E5"> people have switched to</font>

296
00:15:00,420 --> 00:15:07,380
RC for a team consisting of<font color="#E5E5E5"> dan</font>

297
00:15:05,250 --> 00:15:09,390
<font color="#E5E5E5">bernstein Kenny Patterson and a couple</font>

298
00:15:07,380 --> 00:15:13,680
of others they were able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> show that</font>

299
00:15:09,390 --> 00:15:18,060
you can actually practically exploit

300
00:15:13,680 --> 00:15:22,560
these biases in TLS and then over<font color="#CCCCCC"> the</font>

301
00:15:18,060 --> 00:15:24,569
<font color="#E5E5E5">last</font><font color="#CCCCCC"> year's there were a</font><font color="#E5E5E5"> lot of new</font>

302
00:15:22,560 --> 00:15:26,880
papers that road improvements to these

303
00:15:24,570 --> 00:15:31,010
attacks<font color="#E5E5E5"> so it's been improved again and</font>

304
00:15:26,880 --> 00:15:34,220
again and which in the end led to an

305
00:15:31,010 --> 00:15:37,730
RFC which now says that the use of our

306
00:15:34,220 --> 00:15:44,210
<font color="#E5E5E5">c4 and TLS must not be done and should</font>

307
00:15:37,730 --> 00:15:46,190
be<font color="#E5E5E5"> forbidden so and the real</font><font color="#CCCCCC"> solution</font>

308
00:15:44,210 --> 00:15:49,490
for<font color="#E5E5E5"> these problems is actually something</font>

309
00:15:46,190 --> 00:15:52,070
called authenticated encryption so the

310
00:15:49,490 --> 00:15:54,800
<font color="#E5E5E5">idea is basically okay we learned from</font>

311
00:15:52,070 --> 00:15:57,230
many examples that when people<font color="#E5E5E5"> try to</font>

312
00:15:54,800 --> 00:16:00,469
combine encryption and authentication

313
00:15:57,230 --> 00:16:03,890
they very often get<font color="#E5E5E5"> it wrong because</font>

314
00:16:00,470 --> 00:16:05,630
they are like three main different ways

315
00:16:03,890 --> 00:16:08,510
to<font color="#CCCCCC"> do it and only</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> is the right way</font>

316
00:16:05,630 --> 00:16:10,790
so the<font color="#E5E5E5"> idea is okay then let's</font>

317
00:16:08,510 --> 00:16:13,370
standardized and what's called an

318
00:16:10,790 --> 00:16:15,260
authenticated encryption mode which<font color="#CCCCCC"> is</font>

319
00:16:13,370 --> 00:16:18,530
like a standardized way to do both

320
00:16:15,260 --> 00:16:21,800
things together and the most widely<font color="#CCCCCC"> used</font>

321
00:16:18,530 --> 00:16:24,530
is GCM which stands for Galois counter

322
00:16:21,800 --> 00:16:27,680
mode and the one that recently gained a

323
00:16:24,530 --> 00:16:30,410
lot of traction is poorly 1305 which is

324
00:16:27,680 --> 00:16:32,420
usually used in combination with<font color="#CCCCCC"> chapter</font>

325
00:16:30,410 --> 00:16:40,490
20 which are both the constructions from

326
00:16:32,420 --> 00:16:42,560
DJ be so and this<font color="#E5E5E5"> is something everyone</font>

327
00:16:40,490 --> 00:16:46,100
who does anything with crypto I'd like

328
00:16:42,560 --> 00:16:48,800
to<font color="#CCCCCC"> tell them you should just ever always</font>

329
00:16:46,100 --> 00:16:51,080
<font color="#CCCCCC">use authenticated encryption there's</font>

330
00:16:48,800 --> 00:16:54,319
almost never a good reason not<font color="#E5E5E5"> to use</font>

331
00:16:51,080 --> 00:16:57,020
<font color="#E5E5E5">authenticated encryption and a lot of a</font>

332
00:16:54,320 --> 00:16:59,000
text that we've seen<font color="#CCCCCC"> in the past would</font>

333
00:16:57,020 --> 00:17:01,010
have been avoided like it's true for all

334
00:16:59,000 --> 00:17:03,980
these padding Oracle attacks I told<font color="#E5E5E5"> you</font>

335
00:17:01,010 --> 00:17:06,410
there was recently<font color="#CCCCCC"> an attack on I</font>

336
00:17:03,980 --> 00:17:09,230
message which was because they were not

337
00:17:06,410 --> 00:17:11,660
<font color="#E5E5E5">using authenticated encryption and I</font>

338
00:17:09,230 --> 00:17:14,569
myself<font color="#CCCCCC"> shorten a tank on</font><font color="#E5E5E5"> the own cloud</font>

339
00:17:11,660 --> 00:17:17,000
encryption module they didn't use any

340
00:17:14,569 --> 00:17:19,069
authentication at all and in all those

341
00:17:17,000 --> 00:17:21,079
instances just saying<font color="#E5E5E5"> okay use an</font>

342
00:17:19,069 --> 00:17:25,220
authenticated encryption mode would<font color="#E5E5E5"> have</font>

343
00:17:21,079 --> 00:17:27,139
prevented these attacks now I was

344
00:17:25,220 --> 00:17:28,940
wondering a bit why why aren't people

345
00:17:27,140 --> 00:17:30,680
using authenticated encryption modes

346
00:17:28,940 --> 00:17:33,710
because we've known this for a long time

347
00:17:30,680 --> 00:17:37,010
<font color="#E5E5E5">and it's not actually it's not secret</font>

348
00:17:33,710 --> 00:17:39,550
and it's it's also not something very

349
00:17:37,010 --> 00:17:39,550
advanced

350
00:17:39,860 --> 00:17:47,750
and then recently<font color="#E5E5E5"> on some mailing list</font>

351
00:17:44,059 --> 00:17:50,990
from Krypto party I think someone posted

352
00:17:47,750 --> 00:17:54,350
a link to a crypto introduction material

353
00:17:50,990 --> 00:17:56,450
from a university so it was a lecturer

354
00:17:54,350 --> 00:17:58,939
cryptography one or something<font color="#CCCCCC"> and I</font>

355
00:17:56,450 --> 00:18:00,559
looked into<font color="#E5E5E5"> that and I said I</font><font color="#CCCCCC"> don't</font>

356
00:17:58,940 --> 00:18:02,420
think this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> very good</font><font color="#E5E5E5"> because they</font>

357
00:18:00,559 --> 00:18:05,660
don't teach people to use authenticated

358
00:18:02,420 --> 00:18:07,670
encryption and what they they were

359
00:18:05,660 --> 00:18:10,190
<font color="#E5E5E5">teaching were these five cipher modes</font>

360
00:18:07,670 --> 00:18:12,470
and I can go through<font color="#CCCCCC"> them ECB is</font>

361
00:18:10,190 --> 00:18:14,510
basically not really a cipher moded I

362
00:18:12,470 --> 00:18:16,520
<font color="#E5E5E5">always say it's more an example what you</font>

363
00:18:14,510 --> 00:18:19,100
should never do because it's completely

364
00:18:16,520 --> 00:18:23,360
insecure and nobody should use it ever

365
00:18:19,100 --> 00:18:25,520
for anything CBC is the one we heard

366
00:18:23,360 --> 00:18:28,668
about earlier and TLS which led to all

367
00:18:25,520 --> 00:18:32,210
these padding Oracle problems<font color="#E5E5E5"> cfp and</font>

368
00:18:28,669 --> 00:18:35,540
ofp are a bit more obscure I mean there

369
00:18:32,210 --> 00:18:38,059
I think gpg still uses some variant of

370
00:18:35,540 --> 00:18:39,980
it but they are not invites reduce and I

371
00:18:38,059 --> 00:18:41,928
don't see a they are kind of a bit

372
00:18:39,980 --> 00:18:48,230
outdated I don't see any<font color="#CCCCCC"> reason to teach</font>

373
00:18:41,929 --> 00:18:50,210
them today counter mode is it's in part

374
00:18:48,230 --> 00:18:52,790
what what's underlying many modern

375
00:18:50,210 --> 00:18:55,340
ciphers but by itself it's also not an

376
00:18:52,790 --> 00:18:58,428
authenticated encryption mode<font color="#CCCCCC"> okay so</font>

377
00:18:55,340 --> 00:19:00,260
then I had a conversation with someone

378
00:18:58,429 --> 00:19:03,740
<font color="#E5E5E5">who apparently was a professor in</font>

379
00:19:00,260 --> 00:19:05,870
computer science who was doing crypto

380
00:19:03,740 --> 00:19:08,120
lectures and I asked him what<font color="#E5E5E5"> cipher</font>

381
00:19:05,870 --> 00:19:11,270
morsi's teaching and he told me<font color="#E5E5E5"> this</font>

382
00:19:08,120 --> 00:19:14,090
exact same five cipher modes and then<font color="#E5E5E5"> I</font>

383
00:19:11,270 --> 00:19:16,730
<font color="#E5E5E5">did a</font><font color="#CCCCCC"> Google search on computer science</font>

384
00:19:14,090 --> 00:19:18,530
crypto introduction courses and almost

385
00:19:16,730 --> 00:19:21,620
all of<font color="#CCCCCC"> them teach these five cipher</font>

386
00:19:18,530 --> 00:19:24,230
modes and I wanted<font color="#CCCCCC"> okay why is</font><font color="#E5E5E5"> that is</font>

387
00:19:21,620 --> 00:19:26,629
there some secret list that all the

388
00:19:24,230 --> 00:19:28,610
computer science people get with cipher

389
00:19:26,630 --> 00:19:30,950
modes they should teach and actually

390
00:19:28,610 --> 00:19:33,979
there is<font color="#E5E5E5"> this list and it's in this book</font>

391
00:19:30,950 --> 00:19:37,220
it's applied cryptography from<font color="#E5E5E5"> Brewster</font>

392
00:19:33,980 --> 00:19:39,320
<font color="#CCCCCC">nyah now this is like the most famous</font>

393
00:19:37,220 --> 00:19:41,360
<font color="#CCCCCC">book in cryptography but there's a</font>

394
00:19:39,320 --> 00:19:44,960
<font color="#E5E5E5">problem with it and it's that it's from</font>

395
00:19:41,360 --> 00:19:48,110
1996 I mean that's really<font color="#E5E5E5"> a long time</font>

396
00:19:44,960 --> 00:19:50,179
ago<font color="#CCCCCC"> and I mean proofs when I did a lot</font>

397
00:19:48,110 --> 00:19:52,908
<font color="#CCCCCC">of wrote a lot</font><font color="#E5E5E5"> of right things in this</font>

398
00:19:50,179 --> 00:19:55,099
book but<font color="#CCCCCC"> it's just not up to</font><font color="#E5E5E5"> date and</font>

399
00:19:52,909 --> 00:19:57,289
he<font color="#E5E5E5"> couldn't know about petting</font><font color="#CCCCCC"> oracle's</font>

400
00:19:55,099 --> 00:19:58,849
because they were<font color="#CCCCCC"> not invented yet he</font>

401
00:19:57,289 --> 00:20:00,349
couldn't<font color="#CCCCCC"> know about authenticated</font>

402
00:19:58,849 --> 00:20:02,629
encryption modes because they were not

403
00:20:00,349 --> 00:20:08,239
authenticated encryption modes in 1996

404
00:20:02,629 --> 00:20:12,049
so um yeah maybe the universities should

405
00:20:08,239 --> 00:20:18,440
update their crypto materials what they

406
00:20:12,049 --> 00:20:19,700
teach yeah so take the take home that

407
00:20:18,440 --> 00:20:21,889
the rice you should always use

408
00:20:19,700 --> 00:20:26,179
authenticated encryption if you build

409
00:20:21,889 --> 00:20:28,668
crypto protocols applications but even

410
00:20:26,179 --> 00:20:30,349
authenticated encryption that's not the

411
00:20:28,669 --> 00:20:32,629
end of<font color="#CCCCCC"> the debate there's currently a</font>

412
00:20:30,349 --> 00:20:34,700
lot of discussions of how we could do

413
00:20:32,629 --> 00:20:37,969
better authenticated encryption modes

414
00:20:34,700 --> 00:20:41,299
there's currently a competition running

415
00:20:37,970 --> 00:20:42,950
which is the Caesar competition for new

416
00:20:41,299 --> 00:20:44,599
authenticated encryption modes and

417
00:20:42,950 --> 00:20:48,349
there's especially a debate about

418
00:20:44,599 --> 00:20:50,658
something called synthetic<font color="#E5E5E5"> IVs which I</font>

419
00:20:48,349 --> 00:20:53,539
will get<font color="#CCCCCC"> to know</font><font color="#E5E5E5"> because like especially</font>

420
00:20:50,659 --> 00:20:56,149
the GCM mode by now most people are

421
00:20:53,539 --> 00:21:00,859
settled on using GCM especially in TLS

422
00:20:56,149 --> 00:21:03,889
but it's not<font color="#E5E5E5"> uncontroversial many people</font>

423
00:21:00,859 --> 00:21:08,509
say GCM is not a very good mode it's

424
00:21:03,889 --> 00:21:10,728
hard to implement correctly so and an

425
00:21:08,509 --> 00:21:14,149
issue that I looked at earlier this year

426
00:21:10,729 --> 00:21:17,690
is the so-called nonce<font color="#E5E5E5"> entry</font><font color="#CCCCCC"> CM so non</font>

427
00:21:14,149 --> 00:21:20,359
stands<font color="#E5E5E5"> for number used once so it's</font>

428
00:21:17,690 --> 00:21:22,429
relatively simple you need some value to

429
00:21:20,359 --> 00:21:25,489
start your encryption and this needs to

430
00:21:22,429 --> 00:21:27,649
be unique so<font color="#CCCCCC"> you should</font><font color="#E5E5E5"> never use the</font>

431
00:21:25,489 --> 00:21:33,109
<font color="#CCCCCC">same nonce value for to encryption</font>

432
00:21:27,649 --> 00:21:35,059
operations with the same key so the

433
00:21:33,109 --> 00:21:37,489
<font color="#E5E5E5">problem here</font><font color="#CCCCCC"> is that the TLS Turner</font>

434
00:21:35,059 --> 00:21:40,249
doesn't tell you anything reasonable

435
00:21:37,489 --> 00:21:42,649
about how you choose this nonce it says

436
00:21:40,249 --> 00:21:44,809
you could use the TLS record number but

437
00:21:42,649 --> 00:21:46,428
you don't have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> and it doesn't tell</font>

438
00:21:44,809 --> 00:21:50,720
<font color="#E5E5E5">you what's the secure way to choose</font>

439
00:21:46,429 --> 00:21:53,330
<font color="#CCCCCC">anons and</font><font color="#E5E5E5"> what is not and it's quite</font>

440
00:21:50,720 --> 00:21:55,700
simple to choose<font color="#CCCCCC"> a non</font><font color="#E5E5E5"> securely you can</font>

441
00:21:53,330 --> 00:21:57,619
just use<font color="#CCCCCC"> a counter you use</font><font color="#E5E5E5"> 0 as the</font>

442
00:21:55,700 --> 00:22:00,859
first nonce and then use one and then

443
00:21:57,619 --> 00:22:04,939
use<font color="#CCCCCC"> 2 and so on</font><font color="#E5E5E5"> I turned out some</font>

444
00:22:00,859 --> 00:22:06,679
implementations get it wrong and<font color="#E5E5E5"> some we</font>

445
00:22:04,940 --> 00:22:09,230
found<font color="#CCCCCC"> a couple of servers that</font>

446
00:22:06,680 --> 00:22:11,150
you are just sending duplicate nonces

447
00:22:09,230 --> 00:22:13,820
some of them were<font color="#E5E5E5"> just always using 0</font>

448
00:22:11,150 --> 00:22:15,500
some of them were the first two values

449
00:22:13,820 --> 00:22:19,010
were the same and then we're using a

450
00:22:15,500 --> 00:22:21,860
counter and all kind of stuff we were

451
00:22:19,010 --> 00:22:24,140
able to<font color="#E5E5E5"> identify three vendors but for</font>

452
00:22:21,860 --> 00:22:28,850
one<font color="#E5E5E5"> of them it's not disclosed yet the</font>

453
00:22:24,140 --> 00:22:32,210
other<font color="#E5E5E5"> two were read where and</font><font color="#CCCCCC"> cavium and</font>

454
00:22:28,850 --> 00:22:36,740
we also found devices that were<font color="#CCCCCC"> choosing</font>

455
00:22:32,210 --> 00:22:38,900
the nonce at random which is it's not<font color="#E5E5E5"> a</font>

456
00:22:36,740 --> 00:22:42,380
very severe problem but if you encrypt

457
00:22:38,900 --> 00:22:46,280
large amounts of data<font color="#E5E5E5"> it may become a</font>

458
00:22:42,380 --> 00:22:48,230
problem so because then after some if

459
00:22:46,280 --> 00:22:50,870
you<font color="#E5E5E5"> come if you're encrypting several</font>

460
00:22:48,230 --> 00:22:54,200
gigabytes of data you may get some risks

461
00:22:50,870 --> 00:22:55,850
that the nonce collides yeah we've

462
00:22:54,200 --> 00:23:01,460
written a paper on this and also<font color="#E5E5E5"> had a</font>

463
00:22:55,850 --> 00:23:05,360
talk at<font color="#E5E5E5"> black head this year okay next</font>

464
00:23:01,460 --> 00:23:07,070
<font color="#CCCCCC">up is deprecation so when we find all</font>

465
00:23:05,360 --> 00:23:09,860
these vulnerabilities often in<font color="#E5E5E5"> old</font>

466
00:23:07,070 --> 00:23:11,689
protocol versions we often want to say

467
00:23:09,860 --> 00:23:15,530
okay we now want to get rid of this

468
00:23:11,690 --> 00:23:18,740
<font color="#E5E5E5">really old stuff and it turns out again</font>

469
00:23:15,530 --> 00:23:21,379
and<font color="#E5E5E5"> again that this is really hard so</font><font color="#CCCCCC"> we</font>

470
00:23:18,740 --> 00:23:24,950
had the drone attack earlier this year

471
00:23:21,380 --> 00:23:27,410
which was against<font color="#CCCCCC"> SSL version 2 now as</font>

472
00:23:24,950 --> 00:23:30,050
is our version 2 is like the<font color="#E5E5E5"> the oldest</font>

473
00:23:27,410 --> 00:23:35,810
thing you can imagine in the TLS space

474
00:23:30,050 --> 00:23:38,899
and already 2011 there was an RFC saying

475
00:23:35,810 --> 00:23:40,909
that you must disable ssl version to

476
00:23:38,900 --> 00:23:45,620
both on your server and your client but

477
00:23:40,910 --> 00:23:47,150
<font color="#CCCCCC">despite that the the the researchers who</font>

478
00:23:45,620 --> 00:23:50,449
did the drone attack found out that

479
00:23:47,150 --> 00:23:52,790
<font color="#E5E5E5">one-third of the service in the internet</font>

480
00:23:50,450 --> 00:23:54,410
were vulnerable to their attack the

481
00:23:52,790 --> 00:23:56,960
interesting thing there was that they

482
00:23:54,410 --> 00:23:59,390
could launch their check even if the

483
00:23:56,960 --> 00:24:02,090
same key was used on another server with

484
00:23:59,390 --> 00:24:04,700
ssl to enabled so if you<font color="#E5E5E5"> had a situation</font>

485
00:24:02,090 --> 00:24:06,470
where you had a web server that<font color="#CCCCCC"> had</font><font color="#E5E5E5"> ssl</font>

486
00:24:04,700 --> 00:24:09,050
to disabled but you had a mail server

487
00:24:06,470 --> 00:24:10,880
with the same certificate you could use

488
00:24:09,050 --> 00:24:14,270
that mail server to attack the web

489
00:24:10,880 --> 00:24:17,120
server but anyway the point<font color="#CCCCCC"> i want to</font>

490
00:24:14,270 --> 00:24:18,750
make here is that yeah we try<font color="#E5E5E5"> to say</font>

491
00:24:17,120 --> 00:24:21,419
forbid as is over

492
00:24:18,750 --> 00:24:24,930
true and it turns out many people didn't

493
00:24:21,420 --> 00:24:28,560
follow that advice after the so-called

494
00:24:24,930 --> 00:24:30,450
logjam attack chrome decided to disable

495
00:24:28,560 --> 00:24:36,419
diffie-hellman key exchange<font color="#CCCCCC"> wrists with</font>

496
00:24:30,450 --> 00:24:38,130
very small groups because the but it's

497
00:24:36,420 --> 00:24:40,500
long been known that this would be<font color="#E5E5E5"> weak</font>

498
00:24:38,130 --> 00:24:42,090
<font color="#CCCCCC">and it was</font><font color="#E5E5E5"> basically a security problem</font>

499
00:24:40,500 --> 00:24:46,080
of<font color="#CCCCCC"> chrome that they didn't do this</font>

500
00:24:42,090 --> 00:24:48,720
earlier and you can find a threat and

501
00:24:46,080 --> 00:24:50,699
the chrome forms about that where many

502
00:24:48,720 --> 00:24:53,460
users were really angry about<font color="#E5E5E5"> this</font>

503
00:24:50,700 --> 00:24:55,350
because here one user saying this error

504
00:24:53,460 --> 00:24:58,710
is preventing<font color="#CCCCCC"> me from opening the</font><font color="#E5E5E5"> login</font>

505
00:24:55,350 --> 00:25:03,570
page on my cisco are<font color="#E5E5E5"> we 0 for 2 g grout</font>

506
00:24:58,710 --> 00:25:06,570
<font color="#CCCCCC">ER and others were yeah a bit more</font>

507
00:25:03,570 --> 00:25:08,189
aggressive<font color="#CCCCCC"> like saying do I have to dump</font>

508
00:25:06,570 --> 00:25:11,070
chrome I need to<font color="#E5E5E5"> get to my routers in</font>

509
00:25:08,190 --> 00:25:14,400
can't there's<font color="#CCCCCC"> no</font><font color="#E5E5E5"> way to update</font><font color="#CCCCCC"> the ssl</font>

510
00:25:11,070 --> 00:25:16,260
on my rotors this is ridiculous<font color="#CCCCCC"> we had</font>

511
00:25:14,400 --> 00:25:19,050
to use<font color="#CCCCCC"> internet explorer to access a</font>

512
00:25:16,260 --> 00:25:20,970
very secure website so people are really

513
00:25:19,050 --> 00:25:23,760
outraged that chrome was improving

514
00:25:20,970 --> 00:25:27,000
security by disallowing these in secure

515
00:25:23,760 --> 00:25:31,740
encryption variants so on the page

516
00:25:27,000 --> 00:25:34,890
before we had this cisco router now this

517
00:25:31,740 --> 00:25:40,290
cisco router was released in 2012 and

518
00:25:34,890 --> 00:25:42,270
RSA with 412 bits which is similar to

519
00:25:40,290 --> 00:25:44,850
the security of RSA and diffie-hellman

520
00:25:42,270 --> 00:25:50,910
is basically the same<font color="#CCCCCC"> with the same size</font>

521
00:25:44,850 --> 00:25:55,679
so RS a 512 was broken in 1999 so since

522
00:25:50,910 --> 00:25:57,390
1999 it was basically obvious that these

523
00:25:55,680 --> 00:25:59,670
small diffie-hellman groups are a

524
00:25:57,390 --> 00:26:02,730
security risk and shouldn't be used and

525
00:25:59,670 --> 00:26:04,800
still a cisco 13 years<font color="#CCCCCC"> later published a</font>

526
00:26:02,730 --> 00:26:06,600
new product that's that's only

527
00:26:04,800 --> 00:26:10,950
supporting these small diffie-hellman

528
00:26:06,600 --> 00:26:14,550
groups and things like<font color="#E5E5E5"> this happen all</font>

529
00:26:10,950 --> 00:26:18,720
the time so in 2010 nokia and microsoft

530
00:26:14,550 --> 00:26:22,230
produced the<font color="#CCCCCC"> lumia 800 phone which was a</font>

531
00:26:18,720 --> 00:26:25,170
at that time a really expensive phone so

532
00:26:22,230 --> 00:26:27,060
it was kind of high end class and it had

533
00:26:25,170 --> 00:26:31,980
a<font color="#E5E5E5"> married male client that only supports</font>

534
00:26:27,060 --> 00:26:32,580
SSO version 3 TLS one point of it is a

535
00:26:31,980 --> 00:26:34,559
success

536
00:26:32,580 --> 00:26:37,379
to ssf version 3 was published in

537
00:26:34,559 --> 00:26:40,529
nineteen<font color="#CCCCCC"> ninety nine so l 11 years</font>

538
00:26:37,380 --> 00:26:43,049
earlier and then the poodle attack came

539
00:26:40,529 --> 00:26:45,899
and poodle was an attack against<font color="#CCCCCC"> s</font>

540
00:26:43,049 --> 00:26:48,179
version<font color="#E5E5E5"> 3 so many people disabled</font><font color="#CCCCCC"> ssl</font>

541
00:26:45,899 --> 00:26:50,129
version 3 and it turns out ok people

542
00:26:48,179 --> 00:26:51,929
<font color="#E5E5E5">with that phone could not use email</font>

543
00:26:50,130 --> 00:26:55,649
anymore because their maid service for

544
00:26:51,929 --> 00:26:58,799
this is abling ssl version 3 the problem

545
00:26:55,649 --> 00:27:00,779
here is why why does<font color="#CCCCCC"> microsoft in 2010</font>

546
00:26:58,799 --> 00:27:03,779
publisher product which<font color="#CCCCCC"> has completely</font>

547
00:27:00,779 --> 00:27:06,029
<font color="#E5E5E5">outdated TLS deck and something</font>

548
00:27:03,779 --> 00:27:08,460
basically<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> happens with floods</font>

549
00:27:06,029 --> 00:27:13,470
box devices from AVM which is mostly

550
00:27:08,460 --> 00:27:16,110
used in<font color="#CCCCCC"> germany</font><font color="#E5E5E5"> and the same thing is</font>

551
00:27:13,470 --> 00:27:19,380
happening again and again so right now

552
00:27:16,110 --> 00:27:21,449
we<font color="#E5E5E5"> basically know that these due to all</font>

553
00:27:19,380 --> 00:27:24,870
these padding Oracle's the TLS one point

554
00:27:21,450 --> 00:27:27,210
and 1.1 we may want to get rid of them

555
00:27:24,870 --> 00:27:29,760
<font color="#E5E5E5">at some point but there's a lot of stuff</font>

556
00:27:27,210 --> 00:27:32,370
out there including for example Apple

557
00:27:29,760 --> 00:27:36,240
Mail that<font color="#CCCCCC"> doesn't support</font><font color="#E5E5E5"> anything newer</font>

558
00:27:32,370 --> 00:27:38,039
than till s 1 point 0 so<font color="#CCCCCC"> we may get the</font>

559
00:27:36,240 --> 00:27:39,899
same discussion again in a couple of

560
00:27:38,039 --> 00:27:43,889
years when we want to deprecate here at

561
00:27:39,899 --> 00:27:46,799
one point oh so<font color="#CCCCCC"> what I want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> ask you</font>

562
00:27:43,889 --> 00:27:49,500
<font color="#E5E5E5">is why do why is it acceptable that</font><font color="#CCCCCC"> that</font>

563
00:27:46,799 --> 00:27:51,299
products and especially often<font color="#E5E5E5"> high-end</font>

564
00:27:49,500 --> 00:27:54,690
products very expensive products come

565
00:27:51,299 --> 00:27:59,460
<font color="#CCCCCC">the substandard</font><font color="#E5E5E5"> crypt</font><font color="#CCCCCC"> worshipped and I</font>

566
00:27:54,690 --> 00:28:01,860
don't have a good answer to<font color="#CCCCCC"> that and now</font>

567
00:27:59,460 --> 00:28:06,210
I want<font color="#E5E5E5"> to get to TLS implementation box</font>

568
00:28:01,860 --> 00:28:10,199
and this is one which kind<font color="#E5E5E5"> of has a long</font>

569
00:28:06,210 --> 00:28:12,570
history in 2008 I opened this back in

570
00:28:10,200 --> 00:28:15,389
the Mozilla bug tracker where I

571
00:28:12,570 --> 00:28:18,299
discovered<font color="#CCCCCC"> that I was using server with</font>

572
00:28:15,389 --> 00:28:20,610
various websites with different

573
00:28:18,299 --> 00:28:24,210
certificates and I experience sometimes

574
00:28:20,610 --> 00:28:25,799
especially with bad internet connections

575
00:28:24,210 --> 00:28:29,130
the server would show me the<font color="#E5E5E5"> wrong</font>

576
00:28:25,799 --> 00:28:34,139
certificate and why was that happening

577
00:28:29,130 --> 00:28:35,639
so that needs a bit of background you

578
00:28:34,139 --> 00:28:40,439
need to understand how<font color="#E5E5E5"> the TLS handshake</font>

579
00:28:35,639 --> 00:28:42,240
works so the TLS handshake basically the

580
00:28:40,440 --> 00:28:45,539
server and the client need to agree on

581
00:28:42,240 --> 00:28:46,410
some version of TLS they both support so

582
00:28:45,539 --> 00:28:48,540
what's happening is

583
00:28:46,410 --> 00:28:51,120
the client sends the so-called client

584
00:28:48,540 --> 00:28:54,510
hello message and says yet dear server

585
00:28:51,120 --> 00:28:57,330
the<font color="#E5E5E5"> maximum TLS version I support is TS</font>

586
00:28:54,510 --> 00:28:59,280
1.2 and then<font color="#E5E5E5"> maybe the server doesn't</font>

587
00:28:57,330 --> 00:29:02,100
support that yet because<font color="#E5E5E5"> it's an older</font>

588
00:28:59,280 --> 00:29:04,110
server and the<font color="#E5E5E5"> correct way to do then is</font>

589
00:29:02,100 --> 00:29:06,000
<font color="#E5E5E5">it sends</font><font color="#CCCCCC"> back a server hello with a</font>

590
00:29:04,110 --> 00:29:09,719
lower version number so it might say

591
00:29:06,000 --> 00:29:11,490
<font color="#CCCCCC">okay I don't</font><font color="#E5E5E5"> support it as 1.2 I support</font>

592
00:29:09,720 --> 00:29:13,650
<font color="#E5E5E5">tearless one point oh and then it sends</font>

593
00:29:11,490 --> 00:29:15,660
<font color="#CCCCCC">back a server hello and in case both</font>

594
00:29:13,650 --> 00:29:19,200
support that then they can make a

595
00:29:15,660 --> 00:29:21,960
connection however word often happens is

596
00:29:19,200 --> 00:29:23,430
that if<font color="#CCCCCC"> you send a client hello to a</font>

597
00:29:21,960 --> 00:29:26,340
server with the version it doesn't

598
00:29:23,430 --> 00:29:28,530
support then it will<font color="#CCCCCC"> just not know what</font>

599
00:29:26,340 --> 00:29:31,020
to do with it and may send an error

600
00:29:28,530 --> 00:29:33,660
message or it may terminate the

601
00:29:31,020 --> 00:29:37,379
connection or omit it may crash and

602
00:29:33,660 --> 00:29:40,470
produce a timeout and this is called

603
00:29:37,380 --> 00:29:42,180
version intolerance and this is<font color="#CCCCCC"> always a</font>

604
00:29:40,470 --> 00:29:43,860
back in the server so this is<font color="#E5E5E5"> not</font>

605
00:29:42,180 --> 00:29:50,880
correct behavior but it's very

606
00:29:43,860 --> 00:29:55,229
widespread and this<font color="#CCCCCC"> light doesn't belong</font>

607
00:29:50,880 --> 00:29:58,440
<font color="#CCCCCC">there sorry and what the browser's did</font>

608
00:29:55,230 --> 00:30:00,240
over the years is that they said okay we

609
00:29:58,440 --> 00:30:02,490
need<font color="#CCCCCC"> to handle this somehow when we</font>

610
00:30:00,240 --> 00:30:05,310
introduce new TLS versions we cannot

611
00:30:02,490 --> 00:30:08,040
break ten percent of the internet so

612
00:30:05,310 --> 00:30:10,530
they implemented a fallback<font color="#E5E5E5"> so they say</font>

613
00:30:08,040 --> 00:30:15,629
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> if our connection with TLS 1.2</font>

614
00:30:10,530 --> 00:30:17,700
fails we will try it again with TLS 1.1

615
00:30:15,630 --> 00:30:19,530
and then we will try it again with TLS

616
00:30:17,700 --> 00:30:22,380
one point and<font color="#E5E5E5"> then we will try it again</font>

617
00:30:19,530 --> 00:30:24,899
with ssl version 3 and we will just try

618
00:30:22,380 --> 00:30:27,510
all<font color="#E5E5E5"> the versions we support which</font>

619
00:30:24,900 --> 00:30:29,880
sometimes has been called a protocol

620
00:30:27,510 --> 00:30:35,250
dance I think<font color="#E5E5E5"> this was term was coined</font>

621
00:30:29,880 --> 00:30:37,740
in the poodle attack paper then in 2014

622
00:30:35,250 --> 00:30:39,390
I'm totally not<font color="#CCCCCC"> levu presented an attack</font>

623
00:30:37,740 --> 00:30:41,670
which was called the virtual<font color="#E5E5E5"> host</font>

624
00:30:39,390 --> 00:30:43,800
confusion attack and this attack

625
00:30:41,670 --> 00:30:46,050
actually exploited this browser behavior

626
00:30:43,800 --> 00:30:51,629
because it was an attack that needed a

627
00:30:46,050 --> 00:30:53,940
connection<font color="#E5E5E5"> which ssl version 3 and which</font>

628
00:30:51,630 --> 00:30:59,610
kind<font color="#E5E5E5"> of also gets back to</font><font color="#CCCCCC"> the park</font><font color="#E5E5E5"> i</font>

629
00:30:53,940 --> 00:31:00,150
reported earlier so and an attack<font color="#CCCCCC"> i can</font>

630
00:30:59,610 --> 00:31:02,969
trust

631
00:31:00,150 --> 00:31:06,360
trigger these fall bags<font color="#E5E5E5"> because if you</font>

632
00:31:02,970 --> 00:31:08,010
block a connection with TS 1.2 then the

633
00:31:06,360 --> 00:31:09,570
browser will<font color="#E5E5E5"> fall back and if you block</font>

634
00:31:08,010 --> 00:31:11,760
the next connection until it's a

635
00:31:09,570 --> 00:31:13,530
necessary version<font color="#E5E5E5"> 3 connection you can</font>

636
00:31:11,760 --> 00:31:16,950
force the browser to use this older

637
00:31:13,530 --> 00:31:18,960
version and then later<font color="#CCCCCC"> he'd let ya the</font>

638
00:31:16,950 --> 00:31:22,050
poodle attack came and this<font color="#E5E5E5"> really maybe</font>

639
00:31:18,960 --> 00:31:23,640
this a big issue<font color="#E5E5E5"> because it was an</font>

640
00:31:22,050 --> 00:31:26,850
attack against also an attacker gets

641
00:31:23,640 --> 00:31:29,370
version 3 which nobody<font color="#E5E5E5"> was supposed to</font>

642
00:31:26,850 --> 00:31:31,379
use anymore but due to using these

643
00:31:29,370 --> 00:31:33,870
downgrade attacks you could force people

644
00:31:31,380 --> 00:31:35,250
into using this<font color="#E5E5E5"> old attack and going</font>

645
00:31:33,870 --> 00:31:37,139
back<font color="#CCCCCC"> to the back I showed</font><font color="#E5E5E5"> you earlier</font>

646
00:31:35,250 --> 00:31:39,210
what was happening there was actually

647
00:31:37,140 --> 00:31:40,800
that sometimes with the bad internet

648
00:31:39,210 --> 00:31:42,810
connections these four bags were

649
00:31:40,800 --> 00:31:47,010
triggered just because the connection

650
00:31:42,810 --> 00:31:49,379
failed due to a bad connection and if

651
00:31:47,010 --> 00:31:51,570
you're using different certificates on

652
00:31:49,380 --> 00:31:54,480
one server you're using a technology

653
00:31:51,570 --> 00:31:56,850
called SN<font color="#E5E5E5"> I and that was not</font><font color="#CCCCCC"> available</font>

654
00:31:54,480 --> 00:31:59,280
in SS every one two three so if a

655
00:31:56,850 --> 00:32:01,199
downgrade happens then you<font color="#E5E5E5"> see the wrong</font>

656
00:31:59,280 --> 00:32:03,030
certificate because this technology<font color="#CCCCCC"> to</font>

657
00:32:01,200 --> 00:32:08,340
support different<font color="#E5E5E5"> certificates doesn't</font>

658
00:32:03,030 --> 00:32:10,620
work anymore<font color="#E5E5E5"> so what then happened was</font>

659
00:32:08,340 --> 00:32:14,370
that there was a proposal<font color="#E5E5E5"> to implement</font>

660
00:32:10,620 --> 00:32:17,040
something called a<font color="#E5E5E5"> CSV where the server</font>

661
00:32:14,370 --> 00:32:19,350
can tell the browser that ok hello I'm

662
00:32:17,040 --> 00:32:23,970
not broken please down to these

663
00:32:19,350 --> 00:32:26,580
downgrades so what we have<font color="#CCCCCC"> here is we</font>

664
00:32:23,970 --> 00:32:28,890
have<font color="#E5E5E5"> a version negotiation mechanism</font>

665
00:32:26,580 --> 00:32:31,800
that works if it's correctly implemented

666
00:32:28,890 --> 00:32:34,080
then several servers implement it in the

667
00:32:31,800 --> 00:32:36,840
wrong way then the browsers implement

668
00:32:34,080 --> 00:32:38,970
<font color="#E5E5E5">the workaround for it then we learn that</font>

669
00:32:36,840 --> 00:32:41,669
this workaround introduces the security

670
00:32:38,970 --> 00:32:43,800
issue so we need another workaround for

671
00:32:41,670 --> 00:32:46,650
the<font color="#E5E5E5"> security if you introduced by</font>

672
00:32:43,800 --> 00:32:48,600
workaround<font color="#E5E5E5"> for a broken device so that</font>

673
00:32:46,650 --> 00:32:54,270
kind of the situation<font color="#E5E5E5"> we're often in in</font>

674
00:32:48,600 --> 00:32:56,610
the TLS ecosystem so yeah we known this

675
00:32:54,270 --> 00:32:58,440
issue since at least 2003 there's a

676
00:32:56,610 --> 00:33:00,899
document at Mozilla which basically

677
00:32:58,440 --> 00:33:04,020
describes it in relative detail which

678
00:33:00,900 --> 00:33:08,730
talks<font color="#CCCCCC"> about like netscape versions and</font>

679
00:33:04,020 --> 00:33:12,120
mozilla 0.9 and where this<font color="#E5E5E5"> already was a</font>

680
00:33:08,730 --> 00:33:12,730
<font color="#E5E5E5">problem but these days the</font><font color="#CCCCCC"> browser's</font>

681
00:33:12,120 --> 00:33:15,219
<font color="#CCCCCC">have</font>

682
00:33:12,730 --> 00:33:18,610
these downgrades because after poodle

683
00:33:15,220 --> 00:33:21,160
many stuff got fixed but now we will

684
00:33:18,610 --> 00:33:26,139
have<font color="#CCCCCC"> t less 1.3 in a couple of months at</font>

685
00:33:21,160 --> 00:33:28,419
all<font color="#E5E5E5"> this is going to start again so Adam</font>

686
00:33:26,140 --> 00:33:31,210
Langley he's<font color="#CCCCCC"> a google developer recently</font>

687
00:33:28,419 --> 00:33:32,620
wrote a blog post yet has taken about 15

688
00:33:31,210 --> 00:33:34,000
years to get<font color="#CCCCCC"> to the point where the web</font>

689
00:33:32,620 --> 00:33:38,260
browsers don't have to work a brown

690
00:33:34,000 --> 00:33:40,840
probe<font color="#E5E5E5"> but broken version negotiation but</font>

691
00:33:38,260 --> 00:33:42,309
when we try to add a fourth TLS 1.3 in

692
00:33:40,840 --> 00:33:46,059
the next year we will have to add back

693
00:33:42,309 --> 00:33:48,520
the verdict around no doubt so developer

694
00:33:46,059 --> 00:33:50,290
of one of the main browser says there's

695
00:33:48,520 --> 00:33:52,870
no question we will have to do this all

696
00:33:50,290 --> 00:33:56,950
again<font color="#E5E5E5"> although we know that it's kind of</font>

697
00:33:52,870 --> 00:33:59,979
stupid and<font color="#CCCCCC"> I try to follow that up a bit</font>

698
00:33:56,950 --> 00:34:03,910
and I did<font color="#E5E5E5"> some scans who has this</font>

699
00:33:59,980 --> 00:34:07,179
problem and<font color="#CCCCCC"> I was able</font><font color="#E5E5E5"> to identify a</font>

700
00:34:03,910 --> 00:34:09,700
couple of vendors but I was not very

701
00:34:07,179 --> 00:34:12,730
<font color="#CCCCCC">happy with their reactions so I found</font>

702
00:34:09,699 --> 00:34:16,569
<font color="#CCCCCC">okay IBM HTTP server will had this</font>

703
00:34:12,730 --> 00:34:17,830
problem they told me yeah at some<font color="#CCCCCC"> point</font>

704
00:34:16,570 --> 00:34:19,600
they understood the problem at first

705
00:34:17,830 --> 00:34:22,119
they said they don't think they have

706
00:34:19,600 --> 00:34:23,949
this problem and they had<font color="#E5E5E5"> some</font>

707
00:34:22,119 --> 00:34:25,330
difficulty understanding it but then at

708
00:34:23,949 --> 00:34:28,089
some point they understood<font color="#CCCCCC"> it and told</font>

709
00:34:25,330 --> 00:34:30,100
me<font color="#CCCCCC"> okay that they expect by the end of</font>

710
00:34:28,090 --> 00:34:33,250
the<font color="#CCCCCC"> year they may fix it because it's</font>

711
00:34:30,100 --> 00:34:34,659
too late for the next release I try to

712
00:34:33,250 --> 00:34:36,940
explain<font color="#E5E5E5"> them that this</font><font color="#CCCCCC"> is an urgent</font>

713
00:34:34,659 --> 00:34:38,440
issue because TLS 1.3 is going to be

714
00:34:36,940 --> 00:34:41,980
cheap<font color="#E5E5E5"> but they didn't answer on that</font>

715
00:34:38,440 --> 00:34:44,260
citrix they apparently already knew

716
00:34:41,980 --> 00:34:46,149
about this issue but they haven't told

717
00:34:44,260 --> 00:34:48,550
<font color="#E5E5E5">me anything I've asked them like for a</font>

718
00:34:46,149 --> 00:34:51,819
time frame when they will fix it and

719
00:34:48,550 --> 00:34:53,350
they haven't answered on that and Cisco

720
00:34:51,820 --> 00:34:57,100
<font color="#E5E5E5">it turned out that these were mostly</font>

721
00:34:53,350 --> 00:34:59,080
devices that are out of support and so

722
00:34:57,100 --> 00:35:00,190
they will<font color="#CCCCCC"> probably never get an update</font>

723
00:34:59,080 --> 00:35:05,859
but there are still a lot of these

724
00:35:00,190 --> 00:35:07,990
<font color="#E5E5E5">devices out in the internet and I also</font>

725
00:35:05,859 --> 00:35:09,759
asked some website operators from

726
00:35:07,990 --> 00:35:12,580
popular websites that currently have

727
00:35:09,760 --> 00:35:15,580
this problem the<font color="#CCCCCC"> the top one was Apple</font>

728
00:35:12,580 --> 00:35:17,830
they didn't answer<font color="#E5E5E5"> and paypal told me</font>

729
00:35:15,580 --> 00:35:20,410
that ssl issues are<font color="#CCCCCC"> not part of their</font>

730
00:35:17,830 --> 00:35:22,480
bug bounty program then<font color="#E5E5E5"> I asked</font><font color="#CCCCCC"> them a</font>

731
00:35:20,410 --> 00:35:24,220
<font color="#CCCCCC">okay but I</font><font color="#E5E5E5"> don't want a back bounty I</font>

732
00:35:22,480 --> 00:35:25,250
just want you to fix this<font color="#E5E5E5"> and they</font>

733
00:35:24,220 --> 00:35:29,629
didn't<font color="#E5E5E5"> answer on that</font>

734
00:35:25,250 --> 00:35:32,060
and ebay didn't answer at all so that's

735
00:35:29,630 --> 00:35:38,870
kind of what<font color="#CCCCCC"> kind of the reaction of top</font>

736
00:35:32,060 --> 00:35:41,480
website operators yeah this was<font color="#E5E5E5"> not the</font>

737
00:35:38,870 --> 00:35:43,759
only<font color="#E5E5E5"> issue of that kind so a couple of</font>

738
00:35:41,480 --> 00:35:48,050
<font color="#CCCCCC">years ago</font><font color="#E5E5E5"> we had a problem that some f5</font>

739
00:35:43,760 --> 00:35:49,640
load balancers they actually terminated

740
00:35:48,050 --> 00:35:52,880
the connection if you try<font color="#E5E5E5"> to do a</font>

741
00:35:49,640 --> 00:35:56,509
handshake with which was larger than 256

742
00:35:52,880 --> 00:35:58,910
bytes but<font color="#E5E5E5"> smaller than 512 bytes</font><font color="#CCCCCC"> so</font>

743
00:35:56,510 --> 00:36:00,560
there was like a window in which the

744
00:35:58,910 --> 00:36:04,339
size of the handshake would cause the

745
00:36:00,560 --> 00:36:06,529
server to not work correctly<font color="#CCCCCC"> and so what</font>

746
00:36:04,340 --> 00:36:08,720
<font color="#E5E5E5">could you do you could just fill up</font><font color="#CCCCCC"> your</font>

747
00:36:06,530 --> 00:36:10,970
handshake with some garbage which was

748
00:36:08,720 --> 00:36:14,930
done<font color="#CCCCCC"> it's cool it's a petting extension</font>

749
00:36:10,970 --> 00:36:18,649
for the handshake now maybe<font color="#E5E5E5"> you can</font>

750
00:36:14,930 --> 00:36:20,660
guess what happened next so what

751
00:36:18,650 --> 00:36:22,400
happened<font color="#CCCCCC"> next was that we found out okay</font>

752
00:36:20,660 --> 00:36:24,020
but there are other TLS implementations

753
00:36:22,400 --> 00:36:27,500
<font color="#E5E5E5">that break if</font><font color="#CCCCCC"> you send a handshake</font>

754
00:36:24,020 --> 00:36:29,810
larger than 512 bytes so<font color="#CCCCCC"> you can pet it</font>

755
00:36:27,500 --> 00:36:31,820
and then these f5 devices no longer

756
00:36:29,810 --> 00:36:35,029
break but then some Cisco device breaks

757
00:36:31,820 --> 00:36:37,610
the good<font color="#CCCCCC"> thing about this was the Cisco</font>

758
00:36:35,030 --> 00:36:40,340
device was for email<font color="#CCCCCC"> and the other thing</font>

759
00:36:37,610 --> 00:36:43,400
<font color="#E5E5E5">was for HTTPS so you could kind of if</font>

760
00:36:40,340 --> 00:36:49,730
you only pad HTTPS then you kind of<font color="#E5E5E5"> work</font>

761
00:36:43,400 --> 00:36:51,650
around most program devices and there

762
00:36:49,730 --> 00:36:54,920
are other things that that happened like

763
00:36:51,650 --> 00:36:57,020
<font color="#CCCCCC">you can basically almost try to imagine</font>

764
00:36:54,920 --> 00:36:58,730
everything you could get wrong in ET les

765
00:36:57,020 --> 00:37:02,540
tag and you will find<font color="#E5E5E5"> someone who gets</font>

766
00:36:58,730 --> 00:37:04,880
it wrong so we were talking<font color="#CCCCCC"> about poodle</font>

767
00:37:02,540 --> 00:37:07,310
earlier poodle was an attack that relied

768
00:37:04,880 --> 00:37:10,040
on the fact that the padding in SSL

769
00:37:07,310 --> 00:37:13,759
version 3 was not defined in the

770
00:37:10,040 --> 00:37:16,700
specification and until at one point<font color="#CCCCCC"> oh</font>

771
00:37:13,760 --> 00:37:19,190
the specification says how you should do

772
00:37:16,700 --> 00:37:23,600
the padding but some implementations

773
00:37:19,190 --> 00:37:25,190
just didn't check for that and this so

774
00:37:23,600 --> 00:37:27,290
they were vulnerable to the poodle

775
00:37:25,190 --> 00:37:31,520
attack<font color="#CCCCCC"> although they were not using SSL</font>

776
00:37:27,290 --> 00:37:34,310
version 3 and then it turned<font color="#CCCCCC"> out that</font>

777
00:37:31,520 --> 00:37:37,029
<font color="#E5E5E5">there are also implementations that only</font>

778
00:37:34,310 --> 00:37:39,400
checked a part of the padding and

779
00:37:37,029 --> 00:37:42,429
<font color="#E5E5E5">just some bite somewhere only checking</font>

780
00:37:39,400 --> 00:37:44,289
the last bite and so and some were

781
00:37:42,429 --> 00:37:47,799
missing like the first bite or the first

782
00:37:44,289 --> 00:37:49,900
two bites the canoe TLS<font color="#E5E5E5"> one</font><font color="#CCCCCC"> I I actually</font>

783
00:37:47,799 --> 00:37:53,019
figured out<font color="#E5E5E5"> and that was interesting</font>

784
00:37:49,900 --> 00:37:55,329
because this back was already found by

785
00:37:53,019 --> 00:37:59,078
the authors of the<font color="#E5E5E5"> Lucky thirteen paper</font>

786
00:37:55,329 --> 00:38:01,779
but<font color="#E5E5E5"> like the original back was that it</font>

787
00:37:59,079 --> 00:38:05,859
missed to check two bites and then it

788
00:38:01,779 --> 00:38:11,890
was changed to miss only<font color="#E5E5E5"> one bite so</font>

789
00:38:05,859 --> 00:38:14,140
yeah then there were a<font color="#CCCCCC"> couple of</font>

790
00:38:11,890 --> 00:38:16,929
implementations that simply didn't check

791
00:38:14,140 --> 00:38:19,299
the<font color="#E5E5E5"> mac so they had no authenticity for</font>

792
00:38:16,929 --> 00:38:21,849
the connection vulnerable there were

793
00:38:19,299 --> 00:38:23,589
five<font color="#CCCCCC"> Cisco and</font><font color="#E5E5E5"> forty net and some didn't</font>

794
00:38:21,849 --> 00:38:24,999
check<font color="#CCCCCC"> the so-called finished message</font>

795
00:38:23,589 --> 00:38:27,308
which is<font color="#E5E5E5"> something that's there to</font>

796
00:38:24,999 --> 00:38:34,178
protect the integrity of the handshake

797
00:38:27,309 --> 00:38:37,419
yeah then there<font color="#CCCCCC"> was the very interesting</font>

798
00:38:34,179 --> 00:38:40,329
paper by florian Wymer so if you're

799
00:38:37,419 --> 00:38:43,058
doing an RSA signature what you usually

800
00:38:40,329 --> 00:38:44,979
do is that you're splitting the

801
00:38:43,059 --> 00:38:47,799
calculation up into two smaller

802
00:38:44,979 --> 00:38:50,408
calculations because RSA is operating

803
00:38:47,799 --> 00:38:52,119
with the product of two primes and you

804
00:38:50,409 --> 00:38:54,009
can use if you know the two primes you

805
00:38:52,119 --> 00:38:56,679
can do this faster by splitting it up

806
00:38:54,009 --> 00:38:58,089
into calculations but there's a<font color="#CCCCCC"> problem</font>

807
00:38:56,679 --> 00:39:01,299
with that that if one of these

808
00:38:58,089 --> 00:39:05,319
calculations produces wrong result then

809
00:39:01,299 --> 00:39:07,329
if<font color="#E5E5E5"> you still then by seeing the</font>

810
00:39:05,319 --> 00:39:10,089
signature you can calculate<font color="#CCCCCC"> the private</font>

811
00:39:07,329 --> 00:39:12,699
key therefore if there's any hardware

812
00:39:10,089 --> 00:39:15,069
flaw or software back that occasionally

813
00:39:12,699 --> 00:39:18,699
produces wrong results this may leak a

814
00:39:15,069 --> 00:39:20,799
private key and there were all<font color="#E5E5E5"> kinds of</font>

815
00:39:18,699 --> 00:39:23,949
devices vulnerable to this from Citrix

816
00:39:20,799 --> 00:39:25,959
hillstone suks<font color="#CCCCCC"> redware with a copy on</font>

817
00:39:23,949 --> 00:39:27,939
trip you may notice that<font color="#E5E5E5"> some of these</font>

818
00:39:25,959 --> 00:39:33,038
company names throw up more often on my

819
00:39:27,939 --> 00:39:39,249
<font color="#E5E5E5">slides that may tell you something yeah</font>

820
00:39:33,039 --> 00:39:41,739
and all these<font color="#CCCCCC"> stories have made me come</font>

821
00:39:39,249 --> 00:39:43,959
to<font color="#E5E5E5"> the conclusion that almost every</font>

822
00:39:41,739 --> 00:39:46,959
imaginable TLS implementation floor can

823
00:39:43,959 --> 00:39:49,118
be found in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> wild so if you want</font><font color="#E5E5E5"> to</font>

824
00:39:46,959 --> 00:39:50,529
write a nice paper about TLS what I

825
00:39:49,119 --> 00:39:53,230
recommend to you would<font color="#CCCCCC"> be</font>

826
00:39:50,530 --> 00:39:54,880
look<font color="#E5E5E5"> into the tls</font><font color="#CCCCCC"> turn right</font><font color="#E5E5E5"> and see if</font>

827
00:39:53,230 --> 00:39:57,040
you can find things that you think

828
00:39:54,880 --> 00:40:00,160
<font color="#CCCCCC">people could miss or people could get</font>

829
00:39:57,040 --> 00:40:02,920
wrong and then try to find a<font color="#E5E5E5"> way how you</font>

830
00:40:00,160 --> 00:40:04,450
can test for<font color="#E5E5E5"> this and then scan the</font>

831
00:40:02,920 --> 00:40:06,700
internet and you will find vulnerable

832
00:40:04,450 --> 00:40:12,790
implementations I can guarantee<font color="#CCCCCC"> you that</font>

833
00:40:06,700 --> 00:40:14,859
yeah so I think<font color="#E5E5E5"> one problem is that we</font>

834
00:40:12,790 --> 00:40:16,840
don't really<font color="#E5E5E5"> have very good tests for</font>

835
00:40:14,860 --> 00:40:19,750
these kinds of problems so we don't have

836
00:40:16,840 --> 00:40:22,060
anything like<font color="#E5E5E5"> TLS test suite where I</font>

837
00:40:19,750 --> 00:40:24,190
could<font color="#CCCCCC"> say just run this test suite</font>

838
00:40:22,060 --> 00:40:26,320
against the server and show me if it

839
00:40:24,190 --> 00:40:29,110
behaves correctly and especially<font color="#E5E5E5"> for</font>

840
00:40:26,320 --> 00:40:31,750
negative tests like I send something

841
00:40:29,110 --> 00:40:34,150
with a defect padding doesn't still try

842
00:40:31,750 --> 00:40:35,770
to connect with<font color="#E5E5E5"> me or what kind of error</font>

843
00:40:34,150 --> 00:40:38,680
message does it send is the error

844
00:40:35,770 --> 00:40:42,160
message the correct one all<font color="#E5E5E5"> these kinds</font>

845
00:40:38,680 --> 00:40:44,620
of<font color="#CCCCCC"> things and</font><font color="#E5E5E5"> there there are some</font>

846
00:40:42,160 --> 00:40:49,060
projects right now trying this I think

847
00:40:44,620 --> 00:40:51,460
<font color="#CCCCCC">Hannah's is also trying it but yeah and</font>

848
00:40:49,060 --> 00:40:53,980
there's like a wretched developer who is

849
00:40:51,460 --> 00:40:56,320
currently developing a project code TLS

850
00:40:53,980 --> 00:40:57,970
father which goes into<font color="#E5E5E5"> that direction so</font>

851
00:40:56,320 --> 00:40:59,560
I have<font color="#E5E5E5"> some hope that</font><font color="#CCCCCC"> this may improve</font>

852
00:40:57,970 --> 00:41:07,180
in the future and we have better test

853
00:40:59,560 --> 00:41:12,340
tools how much time do<font color="#CCCCCC"> I have ok then</font>

854
00:41:07,180 --> 00:41:14,200
I'll add the optional slides ok so in

855
00:41:12,340 --> 00:41:16,630
the past couple<font color="#E5E5E5"> of years we had some</font>

856
00:41:14,200 --> 00:41:21,640
kind of trend that the web especially is

857
00:41:16,630 --> 00:41:24,490
going to TLS by default and some large

858
00:41:21,640 --> 00:41:26,710
players mostly google but also<font color="#CCCCCC"> Mozilla</font>

859
00:41:24,490 --> 00:41:29,859
and<font color="#E5E5E5"> let's encrypt have try to push for</font>

860
00:41:26,710 --> 00:41:32,710
HTTPS by default<font color="#E5E5E5"> and I think</font><font color="#CCCCCC"> this is</font>

861
00:41:29,860 --> 00:41:34,360
generally a very good thing even<font color="#E5E5E5"> despite</font>

862
00:41:32,710 --> 00:41:36,100
all those vulnerabilities it's still

863
00:41:34,360 --> 00:41:38,650
better to encrypt then not to encrypt

864
00:41:36,100 --> 00:41:41,020
but there's a surprising amount of

865
00:41:38,650 --> 00:41:44,860
pushback against this idea of default

866
00:41:41,020 --> 00:41:46,930
HTTPS and I think most of it is grounded

867
00:41:44,860 --> 00:41:53,020
because people don't really understand

868
00:41:46,930 --> 00:41:54,520
what HTTPS does so many the most popular

869
00:41:53,020 --> 00:41:57,130
thing is probably<font color="#E5E5E5"> that people say I</font>

870
00:41:54,520 --> 00:41:58,570
<font color="#E5E5E5">don't need HTTPS for my blog because</font>

871
00:41:57,130 --> 00:42:01,210
there's nothing<font color="#E5E5E5"> secret on my blog</font>

872
00:41:58,570 --> 00:42:03,770
everyone can see it everyone<font color="#E5E5E5"> can read it</font>

873
00:42:01,210 --> 00:42:05,990
but that

874
00:42:03,770 --> 00:42:08,540
that fails to understand what https

875
00:42:05,990 --> 00:42:11,359
actually is about so<font color="#CCCCCC"> HTTPS is encryption</font>

876
00:42:08,540 --> 00:42:13,550
but it's also authentication so it means

877
00:42:11,360 --> 00:42:16,280
you get a guarantee that what the server

878
00:42:13,550 --> 00:42:18,620
sends you is really<font color="#E5E5E5"> the data you get and</font>

879
00:42:16,280 --> 00:42:21,170
here's an example from from the local

880
00:42:18,620 --> 00:42:22,520
supermarket<font color="#E5E5E5"> here when I came here on the</font>

881
00:42:21,170 --> 00:42:25,220
ferry like we went<font color="#E5E5E5"> to the supermarket</font>

882
00:42:22,520 --> 00:42:27,920
and they have<font color="#CCCCCC"> free Wi-Fi and if you go</font>

883
00:42:25,220 --> 00:42:30,859
on their Wi-Fi they inject a banner into

884
00:42:27,920 --> 00:42:32,630
the website yourself in clue so this<font color="#CCCCCC"> is</font>

885
00:42:30,860 --> 00:42:35,330
actually happening that people running

886
00:42:32,630 --> 00:42:37,070
<font color="#CCCCCC">wifis they inject content into the other</font>

887
00:42:35,330 --> 00:42:39,230
<font color="#CCCCCC">web pages you're surfing too and with</font>

888
00:42:37,070 --> 00:42:43,400
HTTPS this is just not<font color="#CCCCCC"> possible because</font>

889
00:42:39,230 --> 00:42:47,120
the content<font color="#CCCCCC"> is authenticated then</font>

890
00:42:43,400 --> 00:42:49,040
there's the<font color="#E5E5E5"> idea okay we might use HTTPS</font>

891
00:42:47,120 --> 00:42:51,230
but only for the part of the<font color="#E5E5E5"> web page</font>

892
00:42:49,040 --> 00:42:53,570
that's transmitting important data

893
00:42:51,230 --> 00:42:56,210
especially people say okay we will

894
00:42:53,570 --> 00:43:00,890
encrypt the login but not the web page

895
00:42:56,210 --> 00:43:03,650
itself this picture here is gmx which is

896
00:43:00,890 --> 00:43:05,569
like<font color="#CCCCCC"> the biggest German email provider</font>

897
00:43:03,650 --> 00:43:07,490
and that's exactly what they are doing

898
00:43:05,570 --> 00:43:10,130
they have an unencrypted web page and

899
00:43:07,490 --> 00:43:12,500
you log into that the problem<font color="#E5E5E5"> here</font><font color="#CCCCCC"> is</font>

900
00:43:10,130 --> 00:43:16,850
the attacker can change the login form

901
00:43:12,500 --> 00:43:19,010
so it's transmitted unencrypted and

902
00:43:16,850 --> 00:43:21,350
unprotected so the attack<font color="#E5E5E5"> I can just</font>

903
00:43:19,010 --> 00:43:23,390
change the target of the login<font color="#E5E5E5"> so it</font>

904
00:43:21,350 --> 00:43:25,819
sends your username<font color="#CCCCCC"> and password to</font>

905
00:43:23,390 --> 00:43:27,799
someone else and then<font color="#E5E5E5"> it could forward</font>

906
00:43:25,820 --> 00:43:30,530
you back to to the real log in and you

907
00:43:27,800 --> 00:43:32,480
wouldn't notice this<font color="#E5E5E5"> is called an SSL</font>

908
00:43:30,530 --> 00:43:37,940
stripping attack it's been presented by

909
00:43:32,480 --> 00:43:40,370
Moxie Marlinspike i think in 2009 and

910
00:43:37,940 --> 00:43:43,520
then there's the<font color="#CCCCCC"> issue of performance</font>

911
00:43:40,370 --> 00:43:45,980
when people say<font color="#CCCCCC"> ok but if i run TLS then</font>

912
00:43:43,520 --> 00:43:50,210
my server will overheat and the<font color="#E5E5E5"> cpu will</font>

913
00:43:45,980 --> 00:43:51,740
spike all the time and this it's granted

914
00:43:50,210 --> 00:43:54,350
that people have wrong ideas how

915
00:43:51,740 --> 00:43:58,310
expensive crypto is in computational

916
00:43:54,350 --> 00:44:00,110
costs so actually<font color="#E5E5E5"> TLS is relatively</font>

917
00:43:58,310 --> 00:44:01,640
cheap when it comes to computational

918
00:44:00,110 --> 00:44:04,580
costs especially if you use something

919
00:44:01,640 --> 00:44:07,100
reasonably current and if you do

920
00:44:04,580 --> 00:44:09,230
something<font color="#E5E5E5"> like running a PHP page then</font>

921
00:44:07,100 --> 00:44:13,130
you simply won't notice the additional

922
00:44:09,230 --> 00:44:15,920
performance cost of HTTPS and also if

923
00:44:13,130 --> 00:44:17,660
you're using HTTP to then you can<font color="#CCCCCC"> even</font>

924
00:44:15,920 --> 00:44:19,670
get better performance by using

925
00:44:17,660 --> 00:44:22,640
here s because HTTP true is not

926
00:44:19,670 --> 00:44:27,109
available on without TLS at least in

927
00:44:22,640 --> 00:44:29,779
practice and then and this<font color="#CCCCCC"> I</font><font color="#E5E5E5"> find the</font>

928
00:44:27,109 --> 00:44:32,630
hardest to debate because it is in part

929
00:44:29,780 --> 00:44:35,150
true and is<font color="#E5E5E5"> that people say yes</font>

930
00:44:32,630 --> 00:44:37,099
certificate authorities that give out

931
00:44:35,150 --> 00:44:39,589
the TLS certificate they are all corrupt

932
00:44:37,099 --> 00:44:42,289
they cannot be trusted therefore we

933
00:44:39,589 --> 00:44:45,529
should<font color="#E5E5E5"> not use TLS and these problems</font>

934
00:44:42,289 --> 00:44:47,059
are real I<font color="#E5E5E5"> mean just just this week</font>

935
00:44:45,530 --> 00:44:48,890
there was a new incident with the

936
00:44:47,059 --> 00:44:51,410
<font color="#E5E5E5">Chinese authority will sign that</font>

937
00:44:48,890 --> 00:44:53,420
apparently issued a certificate for

938
00:44:51,410 --> 00:44:57,799
github to someone else who was not

939
00:44:53,420 --> 00:44:59,780
github and all the time we we can read

940
00:44:57,799 --> 00:45:03,859
stories about certificate authorities

941
00:44:59,780 --> 00:45:06,380
getting things wrong but what people

942
00:45:03,859 --> 00:45:08,690
<font color="#E5E5E5">fail</font><font color="#CCCCCC"> to recognize is that in the past</font>

943
00:45:06,380 --> 00:45:10,760
years<font color="#E5E5E5"> the situation has improved a lot</font>

944
00:45:08,690 --> 00:45:12,950
<font color="#E5E5E5">and one of</font><font color="#CCCCCC"> the developments is that we</font>

945
00:45:10,760 --> 00:45:14,690
now have something called the baseline

946
00:45:12,950 --> 00:45:16,910
requirements which is just<font color="#E5E5E5"> a written</font>

947
00:45:14,690 --> 00:45:19,190
<font color="#E5E5E5">down set of rules how cas have to</font>

948
00:45:16,910 --> 00:45:22,220
operate and we didn't have that before

949
00:45:19,190 --> 00:45:23,960
so right right<font color="#E5E5E5"> now I mean they are not</font>

950
00:45:22,220 --> 00:45:25,640
ideal yet there's a lot that could be

951
00:45:23,960 --> 00:45:27,140
improved but at least we have some kind

952
00:45:25,640 --> 00:45:29,868
of guidelines how these should operate

953
00:45:27,140 --> 00:45:33,109
and also we have new technologies that

954
00:45:29,869 --> 00:45:35,900
make it harder to to exploit this issue

955
00:45:33,109 --> 00:45:38,509
and one of them is HTTP public key

956
00:45:35,900 --> 00:45:41,210
pinning which is where a<font color="#E5E5E5"> web page can</font>

957
00:45:38,510 --> 00:45:43,880
tell the browser<font color="#E5E5E5"> okay this is mikey and</font>

958
00:45:41,210 --> 00:45:46,520
this is my backup key and please save

959
00:45:43,880 --> 00:45:48,680
them<font color="#E5E5E5"> and if someone shows you this web</font>

960
00:45:46,520 --> 00:45:50,509
page with a different key then something

961
00:45:48,680 --> 00:45:53,240
<font color="#E5E5E5">is wrong and then you should send an</font>

962
00:45:50,510 --> 00:45:55,339
alert and not serve to that web<font color="#CCCCCC"> page so</font>

963
00:45:53,240 --> 00:45:58,759
this kind of adds an additional trust on

964
00:45:55,339 --> 00:46:00,950
first use mechanism to https but a

965
00:45:58,760 --> 00:46:03,440
warning a lot of<font color="#E5E5E5"> people</font><font color="#CCCCCC"> try to implement</font>

966
00:46:00,950 --> 00:46:05,299
it and don't really understand what they

967
00:46:03,440 --> 00:46:06,980
are doing and this has the potential

968
00:46:05,299 --> 00:46:09,529
that you can lock yourself out of your

969
00:46:06,980 --> 00:46:12,140
own<font color="#CCCCCC"> webpage because if you pin to a key</font>

970
00:46:09,529 --> 00:46:14,180
and then lose<font color="#CCCCCC"> the key and also lose your</font>

971
00:46:12,140 --> 00:46:15,379
backup key then there's nothing you can

972
00:46:14,180 --> 00:46:18,109
do anymore your site will be

973
00:46:15,380 --> 00:46:21,319
unaccessible for for at least a couple

974
00:46:18,109 --> 00:46:23,900
of<font color="#E5E5E5"> months so oh this is a good</font>

975
00:46:21,319 --> 00:46:25,339
technology but<font color="#E5E5E5"> only if you really</font>

976
00:46:23,900 --> 00:46:28,670
understand<font color="#E5E5E5"> it very well you should</font>

977
00:46:25,339 --> 00:46:30,770
implement it and then there's

978
00:46:28,670 --> 00:46:31,350
certificate transparency which is the

979
00:46:30,770 --> 00:46:33,390
idea<font color="#CCCCCC"> that</font>

980
00:46:31,350 --> 00:46:36,509
we have some public locks where all the

981
00:46:33,390 --> 00:46:38,700
certificates are locked and right now

982
00:46:36,510 --> 00:46:41,280
this is only implemented in parts but I

983
00:46:38,700 --> 00:46:42,960
think it's still<font color="#E5E5E5"> already very useful so</font>

984
00:46:41,280 --> 00:46:44,970
a lot of these incidents we have these

985
00:46:42,960 --> 00:46:47,070
days with certificate authorities they

986
00:46:44,970 --> 00:46:49,200
get uncovered because they are these

987
00:46:47,070 --> 00:46:51,540
locks and everyone can see what's<font color="#CCCCCC"> going</font>

988
00:46:49,200 --> 00:46:53,730
on which certificates are<font color="#E5E5E5"> issued and you</font>

989
00:46:51,540 --> 00:46:55,440
can yourself<font color="#E5E5E5"> like look into these locks</font>

990
00:46:53,730 --> 00:46:57,810
if they<font color="#E5E5E5"> are certificates for your domain</font>

991
00:46:55,440 --> 00:46:59,730
that you don't know<font color="#CCCCCC"> about and then you</font>

992
00:46:57,810 --> 00:47:03,600
<font color="#E5E5E5">know something is really strange wrong</font>

993
00:46:59,730 --> 00:47:05,910
and there was like a major incident with

994
00:47:03,600 --> 00:47:07,140
<font color="#E5E5E5">semantics last year which was uncovered</font>

995
00:47:05,910 --> 00:47:09,629
due to the certificate transparency

996
00:47:07,140 --> 00:47:13,890
locks so I think<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> really a very</font>

997
00:47:09,630 --> 00:47:15,750
good step in the right direction so the

998
00:47:13,890 --> 00:47:18,540
biggest<font color="#CCCCCC"> problem actually people who want</font>

999
00:47:15,750 --> 00:47:21,600
to migrate to HTTPS and can't have<font color="#E5E5E5"> is</font>

1000
00:47:18,540 --> 00:47:24,390
third party content and especially ads

1001
00:47:21,600 --> 00:47:26,850
so I told<font color="#E5E5E5"> you</font><font color="#CCCCCC"> earlier that i</font><font color="#E5E5E5"> work for</font>

1002
00:47:24,390 --> 00:47:29,279
this<font color="#E5E5E5"> drum in IT news web page and they</font>

1003
00:47:26,850 --> 00:47:31,170
<font color="#E5E5E5">don't use https and the reason is that</font>

1004
00:47:29,280 --> 00:47:33,960
they have an ad network that does not

1005
00:47:31,170 --> 00:47:36,990
support HTTPS and ad networks especially

1006
00:47:33,960 --> 00:47:39,240
complicated because it's often a whole

1007
00:47:36,990 --> 00:47:41,520
chain of actress so you're including

1008
00:47:39,240 --> 00:47:43,589
something<font color="#E5E5E5"> from your ad network and they</font>

1009
00:47:41,520 --> 00:47:46,020
have other ad networks that are

1010
00:47:43,590 --> 00:47:49,200
delivering their banners and then they

1011
00:47:46,020 --> 00:47:53,220
fetch the banner from from the real at

1012
00:47:49,200 --> 00:47:55,649
customer so<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think this is</font><font color="#CCCCCC"> the big</font>

1013
00:47:53,220 --> 00:47:57,959
biggest stopper when people try to

1014
00:47:55,650 --> 00:48:00,480
migrate to HTTPS and<font color="#CCCCCC"> this is also why</font>

1015
00:47:57,960 --> 00:48:02,700
you see that a lot<font color="#E5E5E5"> of media pages don't</font>

1016
00:48:00,480 --> 00:48:08,700
migrate to https although they should

1017
00:48:02,700 --> 00:48:11,160
yeah so in the future the the next big

1018
00:48:08,700 --> 00:48:13,109
thing will be killed as 1.3 or maybe it

1019
00:48:11,160 --> 00:48:17,160
will<font color="#CCCCCC"> be teal as</font><font color="#E5E5E5"> 2.0 or four point oh</font>

1020
00:48:13,110 --> 00:48:18,540
<font color="#CCCCCC">that's currently discussed but TLS 1.3</font>

1021
00:48:17,160 --> 00:48:21,210
will deprecated a whole lot of

1022
00:48:18,540 --> 00:48:24,720
<font color="#E5E5E5">problematic coupla goons constructions</font>

1023
00:48:21,210 --> 00:48:26,640
so one is the the RS a handshake which

1024
00:48:24,720 --> 00:48:29,220
doesn't mean<font color="#E5E5E5"> they will deprecated RSA</font>

1025
00:48:26,640 --> 00:48:31,529
but the if you're using RSA without an

1026
00:48:29,220 --> 00:48:34,410
additional key exchange that will be

1027
00:48:31,530 --> 00:48:36,030
deprecated so all the cipher modes until

1028
00:48:34,410 --> 00:48:38,370
s 1 point 3 will have what's called

1029
00:48:36,030 --> 00:48:40,860
forward secrecy and they will avoid

1030
00:48:38,370 --> 00:48:43,819
these black and<font color="#CCCCCC"> baja attacks which for</font>

1031
00:48:40,860 --> 00:48:46,160
example reason<font color="#E5E5E5"> for the drone attack</font>

1032
00:48:43,820 --> 00:48:49,850
then there will be<font color="#E5E5E5"> no more</font><font color="#CCCCCC"> an</font>

1033
00:48:46,160 --> 00:48:52,250
authenticated encryption modes the<font color="#E5E5E5"> CBC H</font>

1034
00:48:49,850 --> 00:48:54,290
<font color="#E5E5E5">Mac combination which was so problematic</font>

1035
00:48:52,250 --> 00:49:00,350
due to these padding Oracle's will be

1036
00:48:54,290 --> 00:49:02,690
gone and the then also the the old ours

1037
00:49:00,350 --> 00:49:07,520
emotes will be deprecated so our essay

1038
00:49:02,690 --> 00:49:10,130
has<font color="#CCCCCC"> there's a version p kc s 1 1.5 which</font>

1039
00:49:07,520 --> 00:49:11,509
is kind<font color="#E5E5E5"> of one the original RSA standard</font>

1040
00:49:10,130 --> 00:49:13,220
or the one that most people are using

1041
00:49:11,510 --> 00:49:15,320
today and they will move to something

1042
00:49:13,220 --> 00:49:17,899
you are which<font color="#CCCCCC"> is called PSS and which</font>

1043
00:49:15,320 --> 00:49:20,750
has some much better security properties

1044
00:49:17,900 --> 00:49:22,340
and also<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> V cash functions that</font>

1045
00:49:20,750 --> 00:49:27,680
are<font color="#E5E5E5"> still part of the standard will be</font>

1046
00:49:22,340 --> 00:49:29,510
deprecated yeah so but some problems

1047
00:49:27,680 --> 00:49:31,370
remain so as I said earlier version

1048
00:49:29,510 --> 00:49:33,500
intolerance and other compatibility

1049
00:49:31,370 --> 00:49:38,120
issues we will see them again with TLS

1050
00:49:33,500 --> 00:49:40,550
<font color="#E5E5E5">1.3 and also sometimes cross protocol</font>

1051
00:49:38,120 --> 00:49:43,040
attacks can keep old weaknesses so even

1052
00:49:40,550 --> 00:49:45,380
if you have<font color="#CCCCCC"> TS 1.3 which disables some</font>

1053
00:49:43,040 --> 00:49:47,900
stuff if you still support older

1054
00:49:45,380 --> 00:49:49,730
versions this may enable attacks on that

1055
00:49:47,900 --> 00:49:51,590
<font color="#E5E5E5">level and there's been an interesting</font>

1056
00:49:49,730 --> 00:49:56,720
paper about blacking bhai texts about

1057
00:49:51,590 --> 00:49:58,580
that last year yeah conclusion so TLS is

1058
00:49:56,720 --> 00:50:00,859
becoming the default and that's a good

1059
00:49:58,580 --> 00:50:02,540
thing<font color="#E5E5E5"> you should all support that if you</font>

1060
00:50:00,860 --> 00:50:06,710
have a web page or if you're responsible

1061
00:50:02,540 --> 00:50:08,990
for web page please deliver<font color="#E5E5E5"> HTTPS we see</font>

1062
00:50:06,710 --> 00:50:11,930
very<font color="#CCCCCC"> older texts</font><font color="#E5E5E5"> coming back which means</font>

1063
00:50:08,990 --> 00:50:15,979
<font color="#E5E5E5">we're not really fixing them in a proper</font>

1064
00:50:11,930 --> 00:50:18,109
way implementation<font color="#CCCCCC"> box like version</font>

1065
00:50:15,980 --> 00:50:20,990
intolerance introduced a security risk

1066
00:50:18,110 --> 00:50:22,610
and they also often<font color="#CCCCCC"> introduce a security</font>

1067
00:50:20,990 --> 00:50:26,390
risk not only for themselves but also

1068
00:50:22,610 --> 00:50:30,020
for the ecosystem as a whole at site try

1069
00:50:26,390 --> 00:50:32,870
avoid we implementing TLS<font color="#CCCCCC"> hannah's is an</font>

1070
00:50:30,020 --> 00:50:35,630
exception I trust him that<font color="#E5E5E5"> he can do but</font>

1071
00:50:32,870 --> 00:50:37,640
because<font color="#E5E5E5"> what we very often see is that</font>

1072
00:50:35,630 --> 00:50:39,500
that<font color="#E5E5E5"> enterprise vendors stripped their</font>

1073
00:50:37,640 --> 00:50:41,629
own TLS stake and then we have all these

1074
00:50:39,500 --> 00:50:43,730
broken implementations and it's<font color="#CCCCCC"> usually</font>

1075
00:50:41,630 --> 00:50:45,770
better to just use optimizes<font color="#CCCCCC"> L because</font>

1076
00:50:43,730 --> 00:50:49,730
you can say a lot of bad things about

1077
00:50:45,770 --> 00:50:53,210
openssl but at least these days they

1078
00:50:49,730 --> 00:50:57,010
tend<font color="#E5E5E5"> to get the basics right and I think</font>

1079
00:50:53,210 --> 00:51:01,180
<font color="#E5E5E5">we need better testing tools so</font>

1080
00:50:57,010 --> 00:51:16,800
yeah yeah then thanks for<font color="#E5E5E5"> listening and</font>

1081
00:51:01,180 --> 00:51:16,799
do you have questions yeah yeah

1082
00:51:23,440 --> 00:51:32,290
yeah so the<font color="#CCCCCC"> question was like how strong</font>

1083
00:51:29,200 --> 00:51:37,180
i would recommend for RSA and RSA was

1084
00:51:32,290 --> 00:51:39,910
the issue so I mean 2048 is probably

1085
00:51:37,180 --> 00:51:42,250
strong enough because that will only get

1086
00:51:39,910 --> 00:51:43,839
broken very likely only get broken by

1087
00:51:42,250 --> 00:51:45,370
quantum computers and if you have a

1088
00:51:43,840 --> 00:51:46,450
quantum computer than everything's

1089
00:51:45,370 --> 00:51:51,970
broken that we use today so

1090
00:51:46,450 --> 00:51:53,439
unfortunately the thing is I could<font color="#CCCCCC"> have</font>

1091
00:51:51,970 --> 00:51:55,390
added more slides I could have talked

1092
00:51:53,440 --> 00:51:57,190
<font color="#E5E5E5">about post quantum cryptography and</font>

1093
00:51:55,390 --> 00:52:02,049
things like that it's also very

1094
00:51:57,190 --> 00:52:04,330
interesting but yeah but I'm aware<font color="#CCCCCC"> of</font>

1095
00:52:02,050 --> 00:52:24,910
<font color="#CCCCCC">this java client problems so the Java</font>

1096
00:52:04,330 --> 00:52:26,860
TLS tag is<font color="#CCCCCC"> not very good yeah the</font>

1097
00:52:24,910 --> 00:52:31,120
<font color="#CCCCCC">question was what about</font><font color="#E5E5E5"> going beyond 4k</font>

1098
00:52:26,860 --> 00:52:35,920
so it gets really slow when you get to

1099
00:52:31,120 --> 00:52:37,779
8k and it doesn't<font color="#E5E5E5"> read if you think 4k</font>

1100
00:52:35,920 --> 00:52:40,540
is not good enough<font color="#CCCCCC"> in</font><font color="#E5E5E5"> security for you</font>

1101
00:52:37,780 --> 00:52:41,740
then you<font color="#E5E5E5"> should not look at larger</font><font color="#CCCCCC"> Keys</font>

1102
00:52:40,540 --> 00:52:45,009
<font color="#CCCCCC">you should look at post quantum</font>

1103
00:52:41,740 --> 00:52:47,709
cryptography because the<font color="#E5E5E5"> only realistic</font>

1104
00:52:45,010 --> 00:52:50,980
risk for RSA with large key sizes are

1105
00:52:47,710 --> 00:52:53,890
quantum computers and you don't protect

1106
00:52:50,980 --> 00:52:55,150
a lot<font color="#E5E5E5"> against them with with larger kiss</font>

1107
00:52:53,890 --> 00:52:58,270
you want to use post quantum

1108
00:52:55,150 --> 00:53:07,720
cryptography but that<font color="#E5E5E5"> kind of a yeah</font>

1109
00:52:58,270 --> 00:53:09,640
yeah<font color="#CCCCCC"> but then you can use like make a</font>

1110
00:53:07,720 --> 00:53:12,660
lease with one megabyte key and you will

1111
00:53:09,640 --> 00:53:12,660
be<font color="#E5E5E5"> probably much safer</font>

1112
00:53:13,999 --> 00:53:31,158
yeah so so I I can support what he does

1113
00:53:28,579 --> 00:53:34,519
that so I think<font color="#E5E5E5"> this key sighs debate</font>

1114
00:53:31,159 --> 00:53:36,709
gets too<font color="#E5E5E5"> much attention so there there's</font>

1115
00:53:34,519 --> 00:53:40,189
a lot more to secure crypto protocol

1116
00:53:36,709 --> 00:53:42,319
than the key<font color="#CCCCCC"> size and you're most likely</font>

1117
00:53:40,189 --> 00:53:44,569
problem is implementation<font color="#E5E5E5"> bugs and your</font>

1118
00:53:42,319 --> 00:53:47,629
next<font color="#E5E5E5"> most likely problem is bad cryptic</font>

1119
00:53:44,569 --> 00:53:49,939
instructions and the key size is unless

1120
00:53:47,629 --> 00:53:59,629
you're using very old stuff the least

1121
00:53:49,939 --> 00:54:02,138
likely to be your problem<font color="#E5E5E5"> okay and</font>

1122
00:53:59,629 --> 00:54:02,139
<font color="#CCCCCC">thanks</font>

