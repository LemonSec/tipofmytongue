1
00:00:00,000 --> 00:00:13,380
yeah hello so I'm<font color="#CCCCCC"> Hanus and I will talk</font>

2
00:00:11,010 --> 00:00:17,490
about<font color="#E5E5E5"> Mirage operating switch is a</font>

3
00:00:13,380 --> 00:00:20,520
robust operating system designed and

4
00:00:17,490 --> 00:00:22,320
built from the ground up so first of all

5
00:00:20,520 --> 00:00:25,380
advertisement<font color="#E5E5E5"> for your favorite</font>

6
00:00:22,320 --> 00:00:29,400
operating system which is<font color="#E5E5E5"> Linux just</font>

7
00:00:25,380 --> 00:00:33,899
turned 25 years old so here's your cake

8
00:00:29,400 --> 00:00:37,379
you know<font color="#CCCCCC"> it you have</font><font color="#E5E5E5"> to go ahead and</font>

9
00:00:33,899 --> 00:00:42,809
compile it yourself so good luck<font color="#E5E5E5"> with</font>

10
00:00:37,380 --> 00:00:45,300
that in the meantime also Linux is one

11
00:00:42,809 --> 00:00:48,959
of the widely used operating system

12
00:00:45,300 --> 00:00:53,038
soberly and it was<font color="#E5E5E5"> actually designed for</font>

13
00:00:48,960 --> 00:00:55,170
machines like that so it's a<font color="#E5E5E5"> bit old and</font>

14
00:00:53,039 --> 00:00:58,469
a bit big because there are layers of

15
00:00:55,170 --> 00:01:03,989
layers of legacy and so on or as some

16
00:00:58,469 --> 00:01:07,080
people might know I'm preaching that

17
00:01:03,989 --> 00:01:09,509
Linux is actually built on sand and here

18
00:01:07,080 --> 00:01:12,720
you can see<font color="#CCCCCC"> what happens if you built on</font>

19
00:01:09,510 --> 00:01:14,850
sand so you can build<font color="#E5E5E5"> any Palace on sand</font>

20
00:01:12,720 --> 00:01:19,770
but it will sink anyways if there's

21
00:01:14,850 --> 00:01:22,860
enough water so i think we are learning

22
00:01:19,770 --> 00:01:27,149
and we are learning by instead<font color="#CCCCCC"> of using</font>

23
00:01:22,860 --> 00:01:29,340
a full linux for our services or so we

24
00:01:27,150 --> 00:01:32,280
do something<font color="#CCCCCC"> with containers because</font>

25
00:01:29,340 --> 00:01:36,060
it's a<font color="#E5E5E5"> new big thing and i have to tell</font>

26
00:01:32,280 --> 00:01:41,159
<font color="#CCCCCC">you containers are a nice solution but</font>

27
00:01:36,060 --> 00:01:46,229
unfortunately they burn so where are we

28
00:01:41,159 --> 00:01:48,420
we<font color="#CCCCCC"> are using seventies technology which</font>

29
00:01:46,229 --> 00:01:53,280
was never meant to be used in that way

30
00:01:48,420 --> 00:01:56,250
still in 2016 our systems get more and

31
00:01:53,280 --> 00:02:02,130
more complex<font color="#E5E5E5"> so it's not getting easier</font>

32
00:01:56,250 --> 00:02:06,210
it don't get easier anyways we have

33
00:02:02,130 --> 00:02:11,190
several layers of legacies so we build

34
00:02:06,210 --> 00:02:12,870
legacy so we<font color="#E5E5E5"> built our current systems</font>

35
00:02:11,190 --> 00:02:15,989
on top of

36
00:02:12,870 --> 00:02:18,569
different layers of legacy which means

37
00:02:15,989 --> 00:02:21,989
<font color="#E5E5E5">that we don't get rid of software but we</font>

38
00:02:18,569 --> 00:02:24,268
only increase ever the amount of the

39
00:02:21,989 --> 00:02:29,280
<font color="#E5E5E5">amount of source code and in my opinion</font>

40
00:02:24,269 --> 00:02:31,739
we strongly need a rewrite of all of the

41
00:02:29,280 --> 00:02:35,489
basics and the fundaments in order to

42
00:02:31,739 --> 00:02:38,640
think about what we actually wanted

43
00:02:35,489 --> 00:02:43,409
chief and what is there and what we

44
00:02:38,640 --> 00:02:45,988
don't need yet so I claim as<font color="#E5E5E5"> Lisa also</font>

45
00:02:43,409 --> 00:02:51,120
does that the whole damn system is wrong

46
00:02:45,989 --> 00:02:54,510
and please keep your coins I really want

47
00:02:51,120 --> 00:02:57,900
<font color="#E5E5E5">to have change so what</font><font color="#CCCCCC"> is a general idea</font>

48
00:02:54,510 --> 00:03:01,679
behind that or what is my personal goal

49
00:02:57,900 --> 00:03:04,650
within my lifetime or so to<font color="#E5E5E5"> have a</font>

50
00:03:01,680 --> 00:03:07,079
<font color="#E5E5E5">system which I would claim hive because</font>

51
00:03:04,650 --> 00:03:10,109
the name cloud is already taken in a

52
00:03:07,079 --> 00:03:14,879
different world and this name cloud is

53
00:03:10,109 --> 00:03:16,829
nice but this wrong so what I would<font color="#CCCCCC"> like</font>

54
00:03:14,879 --> 00:03:20,518
to have is a data store and

55
00:03:16,829 --> 00:03:24,870
communication system which is not too

56
00:03:20,519 --> 00:03:29,639
difficult to imagine but it should have

57
00:03:24,870 --> 00:03:32,340
as a first class citizen trust network

58
00:03:29,639 --> 00:03:35,129
which is then also used for resource

59
00:03:32,340 --> 00:03:38,459
sharing and it should build out our

60
00:03:35,129 --> 00:03:41,638
ponds on some federated approach so I

61
00:03:38,459 --> 00:03:45,660
<font color="#E5E5E5">don't think that we can get away with</font>

62
00:03:41,639 --> 00:03:49,470
having some sort of Federation where

63
00:03:45,660 --> 00:03:53,910
each of your own hives is basically a

64
00:03:49,470 --> 00:03:58,620
set of machines or hierarchy of machines

65
00:03:53,910 --> 00:04:02,400
yeah regarding clouds I hear completely

66
00:03:58,620 --> 00:04:06,120
agree with<font color="#CCCCCC"> that FSF e advertisement that</font>

67
00:04:02,400 --> 00:04:09,510
there is no cloud just<font color="#E5E5E5"> other people's</font>

68
00:04:06,120 --> 00:04:12,660
computers so what are<font color="#E5E5E5"> the requirements</font>

69
00:04:09,510 --> 00:04:15,209
for<font color="#E5E5E5"> such a high if I have in my</font><font color="#CCCCCC"> mind</font>

70
00:04:12,660 --> 00:04:18,298
well it must be easy to set up because<font color="#CCCCCC"> I</font>

71
00:04:15,209 --> 00:04:21,269
want<font color="#E5E5E5"> to enable non technical experts to</font>

72
00:04:18,298 --> 00:04:25,650
<font color="#CCCCCC">be to to install and run their</font>

73
00:04:21,269 --> 00:04:26,250
infrastructure down obviously<font color="#CCCCCC"> you have</font>

74
00:04:25,650 --> 00:04:29,070
multiple

75
00:04:26,250 --> 00:04:32,850
devices which might be mobile phones or

76
00:04:29,070 --> 00:04:35,280
computers laptops or whatever as<font color="#E5E5E5"> I</font>

77
00:04:32,850 --> 00:04:37,530
mentioned you have some resources which

78
00:04:35,280 --> 00:04:39,510
you might want to share so I could say

79
00:04:37,530 --> 00:04:43,109
oh yeah born egg was such a great venue

80
00:04:39,510 --> 00:04:46,710
everybody whom I met I just<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

81
00:04:43,110 --> 00:04:50,190
allow them to use up to<font color="#CCCCCC"> 22 the end of my</font>

82
00:04:46,710 --> 00:04:52,739
resources which I have which should then

83
00:04:50,190 --> 00:04:55,620
also be a bit transitive so you should

84
00:04:52,740 --> 00:05:00,270
give<font color="#E5E5E5"> them away to someone else's and</font>

85
00:04:55,620 --> 00:05:02,700
deep need of that obviously core of the

86
00:05:00,270 --> 00:05:06,210
whole<font color="#CCCCCC"> thing is to have some federated</font>

87
00:05:02,700 --> 00:05:08,010
group messaging hopefully encrypted I

88
00:05:06,210 --> 00:05:13,320
hope some people are working on that

89
00:05:08,010 --> 00:05:16,770
right now right here then we have

90
00:05:13,320 --> 00:05:20,280
persistent data store<font color="#E5E5E5"> I mean I usually</font>

91
00:05:16,770 --> 00:05:23,640
want to have some data available and I

92
00:05:20,280 --> 00:05:26,340
don't really<font color="#E5E5E5"> want to manually care about</font>

93
00:05:23,640 --> 00:05:28,740
taking that software are making the data

94
00:05:26,340 --> 00:05:31,380
up and running my<font color="#CCCCCC"> arson</font><font color="#E5E5E5"> to my other</font>

95
00:05:28,740 --> 00:05:34,800
<font color="#CCCCCC">hosts manually but somehow the</font>

96
00:05:31,380 --> 00:05:36,479
persistent data stuff should just take

97
00:05:34,800 --> 00:05:41,520
<font color="#CCCCCC">care of that I mean there are algorithms</font>

98
00:05:36,479 --> 00:05:44,520
out there it can't be<font color="#E5E5E5"> too hard yeah</font>

99
00:05:41,520 --> 00:05:47,849
short difference between centralized and

100
00:05:44,520 --> 00:05:50,340
decentralized so I believe in a

101
00:05:47,850 --> 00:05:53,040
decentralized approach but i think<font color="#CCCCCC"> that</font>

102
00:05:50,340 --> 00:05:56,580
the Federation federated approach is

103
00:05:53,040 --> 00:06:00,570
similar to use by by email and so on

104
00:05:56,580 --> 00:06:06,060
this actually makes sense yeah the trust

105
00:06:00,570 --> 00:06:09,930
never guy already told you you should be

106
00:06:06,060 --> 00:06:12,540
able to share resources also<font color="#CCCCCC"> in a</font>

107
00:06:09,930 --> 00:06:16,770
transitive sense you<font color="#CCCCCC"> should be able to</font>

108
00:06:12,540 --> 00:06:20,970
distribute those access tokens to<font color="#E5E5E5"> two</font>

109
00:06:16,770 --> 00:06:24,180
resources to other people and I would

110
00:06:20,970 --> 00:06:28,110
like to<font color="#E5E5E5"> be able to say oh my friends who</font>

111
00:06:24,180 --> 00:06:30,600
is able to<font color="#E5E5E5"> receive presence updates from</font>

112
00:06:28,110 --> 00:06:34,289
me so when I switch the country he gets

113
00:06:30,600 --> 00:06:37,169
my new phone number<font color="#E5E5E5"> so then it's not</font>

114
00:06:34,289 --> 00:06:38,210
clear to<font color="#CCCCCC"> me how you address stuff I mean</font>

115
00:06:37,169 --> 00:06:40,698
<font color="#E5E5E5">you can use a</font>

116
00:06:38,210 --> 00:06:44,479
rekha gold system then you need some

117
00:06:40,699 --> 00:06:48,440
initial some centralized source of all

118
00:06:44,479 --> 00:06:51,020
the naming information some centralized

119
00:06:48,440 --> 00:06:53,660
database might be not might not be the

120
00:06:51,020 --> 00:06:56,719
<font color="#E5E5E5">right choice</font><font color="#CCCCCC"> maybe a distributed hash</font>

121
00:06:53,660 --> 00:06:59,599
table<font color="#CCCCCC"> is better and account verification</font>

122
00:06:56,720 --> 00:07:04,699
well how do you<font color="#E5E5E5"> get into that</font><font color="#CCCCCC"> network is</font>

123
00:06:59,599 --> 00:07:08,509
done by some initial key fingerprint

124
00:07:04,699 --> 00:07:10,099
verification or barcode scan so that is

125
00:07:08,509 --> 00:07:13,940
what I have<font color="#CCCCCC"> in mind basically as</font>

126
00:07:10,099 --> 00:07:19,759
resources we have storage CPU and

127
00:07:13,940 --> 00:07:22,849
network network nodes so bandwidth what

128
00:07:19,759 --> 00:07:25,430
are the properties of<font color="#E5E5E5"> such an individual</font>

129
00:07:22,849 --> 00:07:28,430
machine i'm talking about<font color="#E5E5E5"> this it should</font>

130
00:07:25,430 --> 00:07:30,620
be able<font color="#E5E5E5"> to separate the concerns of</font><font color="#CCCCCC"> the</font>

131
00:07:28,430 --> 00:07:33,500
different services there might be some

132
00:07:30,620 --> 00:07:35,780
services like that or<font color="#CCCCCC"> something that</font>

133
00:07:33,500 --> 00:07:38,000
that there should be a strong isolation

134
00:07:35,780 --> 00:07:43,099
between my data and your data obviously

135
00:07:38,000 --> 00:07:45,650
<font color="#CCCCCC">if you backup your data to my notes they</font>

136
00:07:43,099 --> 00:07:49,159
should be encrypted with something<font color="#E5E5E5"> only</font>

137
00:07:45,650 --> 00:07:51,620
you know also<font color="#E5E5E5"> if there are several notes</font>

138
00:07:49,159 --> 00:07:53,360
and they have some sort of locality like

139
00:07:51,620 --> 00:07:56,630
the same physical machine they should

140
00:07:53,360 --> 00:08:00,500
use smarter ways for communication than

141
00:07:56,630 --> 00:08:02,870
<font color="#E5E5E5">tcp/ip so they shouldn't need</font><font color="#CCCCCC"> to use a</font>

142
00:08:00,500 --> 00:08:05,120
network stack if they are the<font color="#CCCCCC"> same</font>

143
00:08:02,870 --> 00:08:09,949
physical machine and they can just use a

144
00:08:05,120 --> 00:08:13,820
piece of shared memory and each of those

145
00:08:09,949 --> 00:08:17,659
services should actually be only have

146
00:08:13,820 --> 00:08:20,539
the complexity it strictly needs and as

147
00:08:17,659 --> 00:08:24,590
mentioned some Federation<font color="#E5E5E5"> and group</font>

148
00:08:20,539 --> 00:08:28,039
communication um baba my I've been told

149
00:08:24,590 --> 00:08:30,979
that I should<font color="#E5E5E5"> be more realistic should</font>

150
00:08:28,039 --> 00:08:33,348
cut down on<font color="#E5E5E5"> my things so let's talk</font>

151
00:08:30,979 --> 00:08:37,069
about operating systems and operating

152
00:08:33,349 --> 00:08:40,789
system<font color="#E5E5E5"> designs so this I just</font><font color="#CCCCCC"> showed you</font>

153
00:08:37,070 --> 00:08:45,170
where I want to be within the<font color="#E5E5E5"> next five</font>

154
00:08:40,789 --> 00:08:47,689
to<font color="#E5E5E5"> ten years what what are the bigger</font>

155
00:08:45,170 --> 00:08:50,360
goals of what I'm currently trying<font color="#E5E5E5"> to do</font>

156
00:08:47,690 --> 00:08:53,510
but at the moment I'm more

157
00:08:50,360 --> 00:08:57,290
into the simple problems like designing

158
00:08:53,510 --> 00:08:59,959
an operating system miraa show as this

159
00:08:57,290 --> 00:09:02,660
has been started<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> seven years ago</font>

160
00:08:59,959 --> 00:09:05,779
in Cambridge at the<font color="#CCCCCC"> University as a</font>

161
00:09:02,660 --> 00:09:08,870
research project and it was done by

162
00:09:05,779 --> 00:09:13,010
people who were involved previously also

163
00:09:08,870 --> 00:09:16,519
in the Xen hypervisor<font color="#CCCCCC"> showing which was</font>

164
00:09:13,010 --> 00:09:21,560
<font color="#E5E5E5">also a project started at the University</font>

165
00:09:16,519 --> 00:09:25,130
<font color="#E5E5E5">and as a PhD of someone and then was</font>

166
00:09:21,560 --> 00:09:27,768
published later out wall service our

167
00:09:25,130 --> 00:09:31,670
company<font color="#CCCCCC"> or several companies and people</font>

168
00:09:27,769 --> 00:09:34,310
who actually use it<font color="#E5E5E5"> marussia</font><font color="#CCCCCC"> as a clean</font>

169
00:09:31,670 --> 00:09:36,800
slate operating system written an o

170
00:09:34,310 --> 00:09:40,790
camel which is a programming<font color="#E5E5E5"> language</font>

171
00:09:36,800 --> 00:09:44,779
designed or developed in<font color="#E5E5E5"> France mainly</font>

172
00:09:40,790 --> 00:09:50,360
availables and maybe it's<font color="#E5E5E5"> 25 years used</font>

173
00:09:44,779 --> 00:09:53,180
in both academic and industry and it's

174
00:09:50,360 --> 00:09:56,390
actively developed this compiled

175
00:09:53,180 --> 00:09:59,209
functional modular language so you

176
00:09:56,390 --> 00:10:02,149
compile to native code to native x86

177
00:09:59,209 --> 00:10:06,920
assembly or so and then<font color="#CCCCCC"> just execute</font>

178
00:10:02,149 --> 00:10:11,390
that and the compilers city dump or it's

179
00:10:06,920 --> 00:10:14,390
not pretty smart<font color="#CCCCCC"> so does a translation a</font>

180
00:10:11,390 --> 00:10:16,519
pretty straightforward translation of

181
00:10:14,390 --> 00:10:18,529
the source code to the binary code which

182
00:10:16,519 --> 00:10:21,949
means that<font color="#CCCCCC"> you have a developer you can</font>

183
00:10:18,529 --> 00:10:25,040
already roughly reason how the binary

184
00:10:21,949 --> 00:10:27,589
will look like and you pay as you go so

185
00:10:25,040 --> 00:10:30,380
if you have locations in your code<font color="#CCCCCC"> that</font>

186
00:10:27,589 --> 00:10:34,370
will<font color="#E5E5E5"> end up likely end up as allocations</font>

187
00:10:30,380 --> 00:10:38,149
in the<font color="#CCCCCC"> binary welcome allows you to</font>

188
00:10:34,370 --> 00:10:40,790
<font color="#E5E5E5">write some sort of declarative coats so</font>

189
00:10:38,149 --> 00:10:44,480
code they can<font color="#E5E5E5"> actually read the code and</font>

190
00:10:40,790 --> 00:10:47,839
understand it<font color="#E5E5E5"> and the idea</font><font color="#CCCCCC"> about</font>

191
00:10:44,480 --> 00:10:51,709
configurability and complexity of system

192
00:10:47,839 --> 00:10:54,649
is that<font color="#E5E5E5"> if you reconfigure your your</font>

193
00:10:51,709 --> 00:10:59,930
application or your operating system

194
00:10:54,649 --> 00:11:00,910
then you basically recompile so you

195
00:10:59,930 --> 00:11:04,989
don't really<font color="#E5E5E5"> have to</font>

196
00:11:00,910 --> 00:11:09,610
configuration as an external resource

197
00:11:04,990 --> 00:11:13,870
but you can have<font color="#CCCCCC"> that as well so</font><font color="#E5E5E5"> just</font>

198
00:11:09,610 --> 00:11:17,350
<font color="#E5E5E5">illustrate how how much simpler Milosh</font>

199
00:11:13,870 --> 00:11:20,650
um thingy so a Midrash application

200
00:11:17,350 --> 00:11:23,800
actually<font color="#CCCCCC"> gets so on the left side you</font>

201
00:11:20,650 --> 00:11:26,620
you can see the the stack of the layers

202
00:11:23,800 --> 00:11:29,530
of an of a nowadays<font color="#CCCCCC"> of a contemporary</font>

203
00:11:26,620 --> 00:11:31,960
operating system which if you have some

204
00:11:29,530 --> 00:11:35,290
hardware usually use some hypervisor

205
00:11:31,960 --> 00:11:38,050
some<font color="#CCCCCC"> Zen work</font><font color="#E5E5E5"> a BM or whatever you like</font>

206
00:11:35,290 --> 00:11:41,469
then you have the operating system curl

207
00:11:38,050 --> 00:11:43,810
kernel which consists of scheduler and

208
00:11:41,470 --> 00:11:46,300
networks tags and file system

209
00:11:43,810 --> 00:11:50,380
implementation some process

210
00:11:46,300 --> 00:11:57,280
implementations some thread a<font color="#E5E5E5"> threats in</font>

211
00:11:50,380 --> 00:11:59,170
the kernel also user management you have

212
00:11:57,280 --> 00:12:01,750
the whole file system has user

213
00:11:59,170 --> 00:12:04,060
<font color="#E5E5E5">permissions and so on then on top</font><font color="#CCCCCC"> of the</font>

214
00:12:01,750 --> 00:12:07,540
operating<font color="#E5E5E5"> system kernel you have a</font>

215
00:12:04,060 --> 00:12:11,530
language runtime which is not only<font color="#CCCCCC"> the</font>

216
00:12:07,540 --> 00:12:14,079
<font color="#CCCCCC">lipsy you you have usually but also the</font>

217
00:12:11,530 --> 00:12:17,170
Python runtime if you for example bright

218
00:12:14,080 --> 00:12:20,080
Python or the JVM if you write Java code

219
00:12:17,170 --> 00:12:23,829
then you have the concrete application

220
00:12:20,080 --> 00:12:26,230
which the logic you're actually want you

221
00:12:23,830 --> 00:12:28,780
you<font color="#CCCCCC"> actually want to run and that</font><font color="#E5E5E5"> one</font>

222
00:12:26,230 --> 00:12:31,180
depends then usually on<font color="#E5E5E5"> configuration</font>

223
00:12:28,780 --> 00:12:33,880
files which are down in<font color="#CCCCCC"> the file system</font>

224
00:12:31,180 --> 00:12:36,939
so in order to execute the application

225
00:12:33,880 --> 00:12:39,370
properly you first need to have the

226
00:12:36,940 --> 00:12:41,860
configuration files around they need to

227
00:12:39,370 --> 00:12:48,490
have the right permissions and so on and

228
00:12:41,860 --> 00:12:51,250
in in the<font color="#E5E5E5"> Mirage approach we just get</font>

229
00:12:48,490 --> 00:12:53,710
get rid of the<font color="#CCCCCC"> sole operating system</font>

230
00:12:51,250 --> 00:12:56,890
kernel but we just<font color="#E5E5E5"> use a set of</font>

231
00:12:53,710 --> 00:13:00,820
libraries and you linked in only those

232
00:12:56,890 --> 00:13:02,920
libraries which we really need so if

233
00:13:00,820 --> 00:13:06,850
you're for example having your mail

234
00:13:02,920 --> 00:13:09,189
server or you have a mail server and you

235
00:13:06,850 --> 00:13:13,209
want to configure your mail server you

236
00:13:09,190 --> 00:13:15,550
likely will not<font color="#CCCCCC"> link in a scheduler and</font>

237
00:13:13,209 --> 00:13:17,439
maybe not even<font color="#CCCCCC"> to assistant storage</font>

238
00:13:15,550 --> 00:13:20,559
because you store it in a remote

239
00:13:17,439 --> 00:13:22,990
database anyways then you<font color="#E5E5E5"> suddenly don't</font>

240
00:13:20,559 --> 00:13:26,319
you don't don't<font color="#E5E5E5"> need a closer as a</font>

241
00:13:22,990 --> 00:13:30,550
management and users on the system

242
00:13:26,319 --> 00:13:32,589
because why would<font color="#CCCCCC"> you I mean you don't</font>

243
00:13:30,550 --> 00:13:35,979
really need access control on that

244
00:13:32,589 --> 00:13:38,920
<font color="#E5E5E5">system because some someone anyone can</font>

245
00:13:35,980 --> 00:13:42,519
just submit you males and you just save

246
00:13:38,920 --> 00:13:46,269
them for further<font color="#E5E5E5"> need obviously</font><font color="#CCCCCC"> those</font>

247
00:13:42,519 --> 00:13:48,309
people who pop mail from you so receive

248
00:13:46,269 --> 00:13:52,600
made from you will need<font color="#CCCCCC"> to be verified</font>

249
00:13:48,309 --> 00:13:55,540
<font color="#CCCCCC">at some point by using either TLS</font>

250
00:13:52,600 --> 00:13:57,579
certificates or something else<font color="#E5E5E5"> but you</font>

251
00:13:55,540 --> 00:14:01,029
don't need a file system inside of a

252
00:13:57,579 --> 00:14:03,008
mail server I don't think<font color="#CCCCCC"> you really</font>

253
00:14:01,029 --> 00:14:09,759
want<font color="#E5E5E5"> to have a file system in the mail</font>

254
00:14:03,009 --> 00:14:12,369
server so the approach is<font color="#E5E5E5"> to minimize</font>

255
00:14:09,759 --> 00:14:15,759
the runtime meant have to have just<font color="#E5E5E5"> a</font>

256
00:14:12,369 --> 00:14:18,189
runtime and application code you we move

257
00:14:15,759 --> 00:14:20,470
away from having<font color="#CCCCCC"> general purpose</font>

258
00:14:18,189 --> 00:14:23,649
operating systems here but we<font color="#E5E5E5"> have a</font>

259
00:14:20,470 --> 00:14:26,170
single<font color="#CCCCCC"> purpose application so for each</font>

260
00:14:23,649 --> 00:14:29,049
of<font color="#E5E5E5"> your different services you just run</font>

261
00:14:26,170 --> 00:14:32,229
a new virtual machine you just run a new

262
00:14:29,049 --> 00:14:35,079
application which you can start and stop

263
00:14:32,230 --> 00:14:37,540
<font color="#E5E5E5">and this application does exactly 11</font>

264
00:14:35,079 --> 00:14:40,689
service it also uses a single address

265
00:14:37,540 --> 00:14:45,069
space there's<font color="#CCCCCC"> no need for which a memory</font>

266
00:14:40,689 --> 00:14:49,389
in there anymore because o camel itself

267
00:14:45,069 --> 00:14:52,449
is has memory safety so you cannot

268
00:14:49,389 --> 00:14:55,420
access data outside of the bounce and

269
00:14:52,449 --> 00:14:58,508
you don't end up in problems like double

270
00:14:55,420 --> 00:15:02,290
fries or use after free so in spatial

271
00:14:58,509 --> 00:15:04,240
and temporal memory safety is done by

272
00:15:02,290 --> 00:15:06,610
<font color="#E5E5E5">the oak ml compile and run time already</font>

273
00:15:04,240 --> 00:15:10,660
so we don't<font color="#E5E5E5"> really need to duplicate</font>

274
00:15:06,610 --> 00:15:13,509
that effort and do it<font color="#E5E5E5"> in the do it via</font>

275
00:15:10,660 --> 00:15:15,368
virtual memory which memory is also not

276
00:15:13,509 --> 00:15:18,100
needed because we only have one<font color="#E5E5E5"> process</font>

277
00:15:15,369 --> 00:15:21,590
I mean there's not no such concept as of

278
00:15:18,100 --> 00:15:25,850
processes so I think<font color="#E5E5E5"> I've</font>

279
00:15:21,590 --> 00:15:28,190
told you that<font color="#E5E5E5"> why I think</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> getting</font>

280
00:15:25,850 --> 00:15:31,070
easier by just removing all the

281
00:15:28,190 --> 00:15:34,460
complexity all the stuff we don't<font color="#E5E5E5"> really</font>

282
00:15:31,070 --> 00:15:36,590
need um so another<font color="#CCCCCC"> example for the</font>

283
00:15:34,460 --> 00:15:39,290
complexity argument would<font color="#CCCCCC"> be a name</font>

284
00:15:36,590 --> 00:15:43,610
server and why should it need a file

285
00:15:39,290 --> 00:15:47,390
system or users or processes it just

286
00:15:43,610 --> 00:15:50,660
basically needs a remote data blob or a

287
00:15:47,390 --> 00:15:57,140
compiled in configuration for the entry

288
00:15:50,660 --> 00:16:01,699
<font color="#CCCCCC">search it's surf war or a link to a</font>

289
00:15:57,140 --> 00:16:06,020
remote maybe good database or some other

290
00:16:01,700 --> 00:16:08,900
remote data blob<font color="#E5E5E5"> maybe an HTTP URL where</font>

291
00:16:06,020 --> 00:16:13,010
it finds its configuration or startup

292
00:16:08,900 --> 00:16:15,170
information and then by having that by

293
00:16:13,010 --> 00:16:17,420
not having a file system for example<font color="#CCCCCC"> you</font>

294
00:16:15,170 --> 00:16:19,819
end up that it is<font color="#E5E5E5"> much easier to</font>

295
00:16:17,420 --> 00:16:23,630
<font color="#E5E5E5">configure because you don't have to care</font>

296
00:16:19,820 --> 00:16:26,780
about<font color="#E5E5E5"> files about permissions and user</font>

297
00:16:23,630 --> 00:16:29,900
IDs for specific files because you don't

298
00:16:26,780 --> 00:16:34,250
have any<font color="#E5E5E5"> files runtime control can be</font>

299
00:16:29,900 --> 00:16:38,000
done we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> anyway maybe we are in play</font>

300
00:16:34,250 --> 00:16:44,870
<font color="#E5E5E5">nine</font><font color="#CCCCCC"> file system channel or just no</font>

301
00:16:38,000 --> 00:16:47,360
remote runtime control you can secure

302
00:16:44,870 --> 00:16:50,270
<font color="#E5E5E5">your channels so if you want to</font>

303
00:16:47,360 --> 00:16:53,360
authenticate or if you want to expert

304
00:16:50,270 --> 00:16:56,270
rate data for the which may<font color="#CCCCCC"> be a logging</font>

305
00:16:53,360 --> 00:17:00,260
service so<font color="#E5E5E5"> you might want to log</font>

306
00:16:56,270 --> 00:17:04,069
<font color="#CCCCCC">whenever a specific host name is fetched</font>

307
00:17:00,260 --> 00:17:07,819
and that you can<font color="#E5E5E5"> just do using syslog or</font>

308
00:17:04,069 --> 00:17:13,280
some other protocol and you<font color="#CCCCCC"> can secure</font>

309
00:17:07,819 --> 00:17:17,929
those channels by just using arm TLS and

310
00:17:13,280 --> 00:17:20,869
your very<font color="#E5E5E5"> own certificate authority the</font>

311
00:17:17,930 --> 00:17:23,360
result in this name service name server

312
00:17:20,869 --> 00:17:27,800
which is basically a prototype we have

313
00:17:23,359 --> 00:17:31,820
developed the code size is smaller than

314
00:17:27,800 --> 00:17:33,530
five percent of a common LP<font color="#CCCCCC"> and</font><font color="#E5E5E5"> Linux</font>

315
00:17:31,820 --> 00:17:36,050
virtual machine thingy

316
00:17:33,530 --> 00:17:38,360
and the<font color="#E5E5E5"> virtual machine sighs here is</font>

317
00:17:36,050 --> 00:17:42,320
can be measured in kilobytes rather than

318
00:17:38,360 --> 00:17:45,409
an megabytes or gigabytes so it gets

319
00:17:42,320 --> 00:17:49,730
smaller and by getting smaller you you

320
00:17:45,410 --> 00:17:53,450
lose attack surface and by using some

321
00:17:49,730 --> 00:17:57,530
program language which has some memory

322
00:17:53,450 --> 00:17:59,480
safety you also<font color="#E5E5E5"> use you you lose attack</font>

323
00:17:57,530 --> 00:18:02,450
vectors and you get rid<font color="#E5E5E5"> of attack</font>

324
00:17:59,480 --> 00:18:04,610
vectors so you get in the end both in

325
00:18:02,450 --> 00:18:10,400
the code size and in the code complexity

326
00:18:04,610 --> 00:18:13,070
you have fewer potential problems what

327
00:18:10,400 --> 00:18:15,080
is the deployment story of mirages at

328
00:18:13,070 --> 00:18:19,010
the moment but it<font color="#E5E5E5"> was initially</font>

329
00:18:15,080 --> 00:18:21,530
developed as a<font color="#CCCCCC"> zen guess</font><font color="#E5E5E5"> I think a</font><font color="#CCCCCC"> PV</font>

330
00:18:19,010 --> 00:18:23,150
guess but don't incite me on that I'm

331
00:18:21,530 --> 00:18:26,750
always getting those different modes

332
00:18:23,150 --> 00:18:28,850
wrong but you can just<font color="#E5E5E5"> deploy it as eggs</font>

333
00:18:26,750 --> 00:18:31,190
and which machine basically so it's a

334
00:18:28,850 --> 00:18:33,709
statically linked UNIX binary you can

335
00:18:31,190 --> 00:18:37,220
also just execute it on on unix on a

336
00:18:33,710 --> 00:18:40,460
usual<font color="#CCCCCC"> unix system which then either uses</font>

337
00:18:37,220 --> 00:18:45,590
a socket API for the network<font color="#E5E5E5"> stack or</font>

338
00:18:40,460 --> 00:18:49,520
uses a tap interface you can also deploy

339
00:18:45,590 --> 00:18:53,780
it on other hypervisors like be high for

340
00:18:49,520 --> 00:18:58,340
<font color="#CCCCCC">X hive or QE mu or</font><font color="#E5E5E5"> whatever you want</font>

341
00:18:53,780 --> 00:19:00,920
using then the virtual<font color="#CCCCCC"> IO protocol to</font>

342
00:18:58,340 --> 00:19:03,320
map network devices and black<font color="#CCCCCC"> bloc</font>

343
00:19:00,920 --> 00:19:07,340
<font color="#E5E5E5">devices and console devices into it into</font>

344
00:19:03,320 --> 00:19:11,389
that then on<font color="#E5E5E5"> Linux you have this kvm</font>

345
00:19:07,340 --> 00:19:14,030
maybe it is a hypervisor maybe not and

346
00:19:11,390 --> 00:19:18,500
there you can also just deploy it and

347
00:19:14,030 --> 00:19:21,379
deploy me<font color="#E5E5E5"> Russia as their this</font><font color="#CCCCCC"> kbm back</font>

348
00:19:18,500 --> 00:19:24,620
end and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> beehive</font><font color="#E5E5E5"> xif back end has</font>

349
00:19:21,380 --> 00:19:28,460
been only recently developed it's pretty

350
00:19:24,620 --> 00:19:32,120
new and full<font color="#CCCCCC"> of bugs obviously but it</font>

351
00:19:28,460 --> 00:19:35,480
<font color="#E5E5E5">already works partially what is</font><font color="#CCCCCC"> the</font>

352
00:19:32,120 --> 00:19:38,270
current state<font color="#E5E5E5"> of Russia s as I mentioned</font>

353
00:19:35,480 --> 00:19:40,790
it was initially develop maybe seven

354
00:19:38,270 --> 00:19:44,000
years ago at the University in Cambridge

355
00:19:40,790 --> 00:19:47,210
and calmly it's on a state where<font color="#CCCCCC"> we at</font>

356
00:19:44,000 --> 00:19:51,620
least<font color="#E5E5E5"> doc feeder to our selves</font>

357
00:19:47,210 --> 00:19:56,899
so the<font color="#CCCCCC"> me raja websites is using</font><font color="#E5E5E5"> mirage</font>

358
00:19:51,620 --> 00:19:59,000
itself hosted on a machine<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> i</font>

359
00:19:56,899 --> 00:20:04,879
have two or three different websites

360
00:19:59,000 --> 00:20:08,870
what we have there are<font color="#CCCCCC"> some crypto</font>

361
00:20:04,880 --> 00:20:12,049
libraries like TLS including<font color="#CCCCCC"> x509</font>

362
00:20:08,870 --> 00:20:14,719
authentication and so on off the records

363
00:20:12,049 --> 00:20:18,710
currently what one guy is<font color="#E5E5E5"> also working</font>

364
00:20:14,720 --> 00:20:20,960
on and ssh implement implementation then

365
00:20:18,710 --> 00:20:23,779
also lower level network protocols is

366
00:20:20,960 --> 00:20:27,830
what we basically have so we have some

367
00:20:23,779 --> 00:20:32,059
sort of tcp/ip than HTTP some dns dhcp

368
00:20:27,830 --> 00:20:35,360
and IP implementing unfortunately not

369
00:20:32,059 --> 00:20:38,928
the<font color="#E5E5E5"> really mature ipv6 implementation</font>

370
00:20:35,360 --> 00:20:43,428
but one which<font color="#CCCCCC"> is very in its very early</font>

371
00:20:38,929 --> 00:20:47,029
beginning we have some user interface

372
00:20:43,429 --> 00:20:50,690
library which gives us the chance to do

373
00:20:47,029 --> 00:20:54,260
some terminal based rendering there's a

374
00:20:50,690 --> 00:20:57,470
telnet server implementation so you can

375
00:20:54,260 --> 00:21:00,320
<font color="#E5E5E5">actually run on your remote unicon a</font>

376
00:20:57,470 --> 00:21:02,330
lawyer remote<font color="#CCCCCC"> Mirage application a</font>

377
00:21:00,320 --> 00:21:05,990
telnet server and have the user

378
00:21:02,330 --> 00:21:10,939
interface so there's no shell we have a

379
00:21:05,990 --> 00:21:13,820
possess and store which is get like or

380
00:21:10,940 --> 00:21:18,110
based based on get it's called omen and

381
00:21:13,820 --> 00:21:21,470
that branch apple store which is

382
00:21:18,110 --> 00:21:24,320
persistent it also talks get server and

383
00:21:21,470 --> 00:21:29,299
<font color="#E5E5E5">get line so</font><font color="#CCCCCC"> you can just pull some</font>

384
00:21:24,320 --> 00:21:33,500
remote git repository into your memory

385
00:21:29,299 --> 00:21:36,200
and work on that then we have a plan 9

386
00:21:33,500 --> 00:21:39,289
implementation which arm we can use<font color="#CCCCCC"> to</font>

387
00:21:36,200 --> 00:21:43,279
expose control channels for example or

388
00:21:39,289 --> 00:21:45,830
everything else we have this log as an

389
00:21:43,279 --> 00:21:49,370
implementation so we can actually set<font color="#CCCCCC"> up</font>

390
00:21:45,830 --> 00:21:51,770
a lock host and redirect the locks of

391
00:21:49,370 --> 00:21:57,229
all the different applications to to a

392
00:21:51,770 --> 00:22:00,668
single thing then some advertisement

393
00:21:57,230 --> 00:22:03,909
next year<font color="#CCCCCC"> I will again organize a heck</font>

394
00:22:00,669 --> 00:22:07,539
treat<font color="#CCCCCC"> has done this year we were roughly</font>

395
00:22:03,909 --> 00:22:10,450
25 people in Morocco in the at the

396
00:22:07,539 --> 00:22:15,549
beginning of March to do some coding and

397
00:22:10,450 --> 00:22:20,139
get to know<font color="#E5E5E5"> more people so that will</font>

398
00:22:15,549 --> 00:22:23,320
happen I thought of will bring some some

399
00:22:20,139 --> 00:22:29,830
nice pictures of the user interfaces we

400
00:22:23,320 --> 00:22:32,769
have so so here's<font color="#E5E5E5"> some TLS sequence</font>

401
00:22:29,830 --> 00:22:35,439
diagram renderer which is all

402
00:22:32,769 --> 00:22:38,710
console-based but you can see we are

403
00:22:35,440 --> 00:22:49,029
full unicode compatible and we even have

404
00:22:38,710 --> 00:22:52,179
round corners around our boxes another

405
00:22:49,029 --> 00:22:54,940
one which is somehow used by more and

406
00:22:52,179 --> 00:22:58,989
more people is<font color="#E5E5E5"> example p client I'm</font>

407
00:22:54,940 --> 00:23:01,720
<font color="#E5E5E5">calmly writing but yeah the result just</font>

408
00:22:58,989 --> 00:23:05,379
to show<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it is possible and it also</font>

409
00:23:01,720 --> 00:23:08,049
uses the technology<font color="#E5E5E5"> arm we are working</font>

410
00:23:05,379 --> 00:23:12,549
on so it's also written<font color="#E5E5E5"> in o camel has</font>

411
00:23:08,049 --> 00:23:15,399
fully unicode support has uses the XMPP

412
00:23:12,549 --> 00:23:20,080
library and OTR library<font color="#E5E5E5"> I developed</font>

413
00:23:15,399 --> 00:23:23,799
before that and yeah also uses our TLS

414
00:23:20,080 --> 00:23:27,999
library about which I want to talk a bit

415
00:23:23,799 --> 00:23:31,658
more now which is<font color="#E5E5E5"> and here's btls which</font>

416
00:23:27,999 --> 00:23:36,369
is not quite so broke until s which<font color="#CCCCCC"> is a</font>

417
00:23:31,659 --> 00:23:39,489
TLS stack written from scratch with<font color="#E5E5E5"> the</font>

418
00:23:36,369 --> 00:23:41,830
two goals to have it as an executable

419
00:23:39,489 --> 00:23:46,149
specification and as a TLS

420
00:23:41,830 --> 00:23:49,090
implementation so by using different or

421
00:23:46,149 --> 00:23:53,168
<font color="#E5E5E5">specific coding style we want to be able</font>

422
00:23:49,090 --> 00:23:56,049
to abstract away from that<font color="#E5E5E5"> EDA or so</font>

423
00:23:53,169 --> 00:23:58,659
either it is<font color="#E5E5E5"> a test speed which tells</font>

424
00:23:56,049 --> 00:24:00,820
you how the specification looks like or

425
00:23:58,659 --> 00:24:05,109
it is a concrete implementation you can

426
00:24:00,820 --> 00:24:09,039
run we don't<font color="#CCCCCC"> really want to</font><font color="#E5E5E5"> have a model</font>

427
00:24:05,109 --> 00:24:11,409
of tcp/ip of<font color="#E5E5E5"> terrorism but we want to</font>

428
00:24:09,039 --> 00:24:16,120
have also be able<font color="#E5E5E5"> to run</font><font color="#CCCCCC"> it as</font>

429
00:24:11,410 --> 00:24:18,220
implementation which is then so

430
00:24:16,120 --> 00:24:20,379
certainly it's your less implementation

431
00:24:18,220 --> 00:24:22,210
is easy but<font color="#E5E5E5"> you need to get done the</font>

432
00:24:20,380 --> 00:24:24,880
interoperability right and once you have

433
00:24:22,210 --> 00:24:27,850
that right you might want<font color="#E5E5E5"> to think about</font>

434
00:24:24,880 --> 00:24:30,880
speed because I don't<font color="#E5E5E5"> believe that if</font>

435
00:24:27,850 --> 00:24:32,800
<font color="#CCCCCC">you are two orders of magnitudes slower</font>

436
00:24:30,880 --> 00:24:36,190
than everything else that<font color="#CCCCCC"> you have any</font>

437
00:24:32,800 --> 00:24:39,610
than you that that you can get any piece

438
00:24:36,190 --> 00:24:43,150
<font color="#CCCCCC">of the cake so what is</font><font color="#E5E5E5"> the structure of</font>

439
00:24:39,610 --> 00:24:46,060
taylorsville TLS as a family of protocol

440
00:24:43,150 --> 00:24:48,670
developed since what 20 years<font color="#E5E5E5"> is over 15</font>

441
00:24:46,060 --> 00:24:51,820
years at least currently they are

442
00:24:48,670 --> 00:24:56,020
working<font color="#E5E5E5"> on</font><font color="#CCCCCC"> teal as 1.3 which is a new</font>

443
00:24:51,820 --> 00:24:59,710
revision which might be adapted within

444
00:24:56,020 --> 00:25:03,790
time frame of<font color="#E5E5E5"> make five years or so so</font>

445
00:24:59,710 --> 00:25:07,120
in the center we<font color="#CCCCCC"> have some TLS library</font>

446
00:25:03,790 --> 00:25:10,810
or module which has<font color="#CCCCCC"> years some state</font>

447
00:25:07,120 --> 00:25:14,649
machine and some state logic and that

448
00:25:10,810 --> 00:25:17,260
itself depends on on some modules which

449
00:25:14,650 --> 00:25:20,890
are able to to pass in coming by

450
00:25:17,260 --> 00:25:25,960
directors or to serialize and to

451
00:25:20,890 --> 00:25:28,450
sterilize outgoing vine vectors so we

452
00:25:25,960 --> 00:25:30,550
need to do some packet processing and

453
00:25:28,450 --> 00:25:33,100
buffering and<font color="#E5E5E5"> so on there is somewhere</font>

454
00:25:30,550 --> 00:25:34,780
deep inside he lies we also<font color="#E5E5E5"> have some</font>

455
00:25:33,100 --> 00:25:37,810
trip to library which has a

456
00:25:34,780 --> 00:25:40,180
pseudo-random number generator which is

457
00:25:37,810 --> 00:25:44,379
used by both the TLS implementation<font color="#E5E5E5"> but</font>

458
00:25:40,180 --> 00:25:47,710
also by<font color="#E5E5E5"> the x.509 implementation the</font>

459
00:25:44,380 --> 00:25:50,290
x.509 implementation obviously needs<font color="#CCCCCC"> to</font>

460
00:25:47,710 --> 00:25:56,260
read and<font color="#E5E5E5"> write ace and one encoded</font>

461
00:25:50,290 --> 00:25:59,080
fragments and it needs to<font color="#E5E5E5"> get</font><font color="#CCCCCC"> its trust</font>

462
00:25:56,260 --> 00:26:01,930
anchors at a configuration time option

463
00:25:59,080 --> 00:26:05,949
so which are the CAE certificates which

464
00:26:01,930 --> 00:26:08,860
would actually trust and then<font color="#E5E5E5"> this whole</font>

465
00:26:05,950 --> 00:26:11,440
TLS library here or the salty last

466
00:26:08,860 --> 00:26:14,439
module year<font color="#CCCCCC"> gas as an external</font>

467
00:26:11,440 --> 00:26:17,380
dependency so it doesn't call into some

468
00:26:14,440 --> 00:26:22,780
something<font color="#E5E5E5"> which is called</font><font color="#CCCCCC"> a flow flow is</font>

469
00:26:17,380 --> 00:26:24,540
just<font color="#CCCCCC"> its structure which says sends and</font>

470
00:26:22,780 --> 00:26:27,780
receives data so it is

471
00:26:24,540 --> 00:26:29,850
doing something which might<font color="#CCCCCC"> be a</font>

472
00:26:27,780 --> 00:26:32,879
<font color="#E5E5E5">different computer which you are talking</font>

473
00:26:29,850 --> 00:26:35,280
to but in the test case it can also be

474
00:26:32,880 --> 00:26:38,310
some hard coded data so some bite

475
00:26:35,280 --> 00:26:41,610
vectors which you have on your disk or

476
00:26:38,310 --> 00:26:46,020
some piece of code which generates by

477
00:26:41,610 --> 00:26:49,949
directors and so this this flow module

478
00:26:46,020 --> 00:26:52,170
here down here<font color="#E5E5E5"> it is not part of the TLS</font>

479
00:26:49,950 --> 00:26:54,360
library but it's in front of that he

480
00:26:52,170 --> 00:26:56,520
lies libraries so we can plug in

481
00:26:54,360 --> 00:27:01,290
different flows and the TLS library

482
00:26:56,520 --> 00:27:05,280
itself doesn't um call in to send and

483
00:27:01,290 --> 00:27:08,970
receive on its own but it is it just

484
00:27:05,280 --> 00:27:14,910
gets a state transition well see the

485
00:27:08,970 --> 00:27:19,740
core of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> TLS library is here the</font><font color="#CCCCCC"> the</font>

486
00:27:14,910 --> 00:27:23,070
function handle TLS which receives some

487
00:27:19,740 --> 00:27:26,550
state and some buffer so buffers some

488
00:27:23,070 --> 00:27:30,720
received by vector or generated by

489
00:27:26,550 --> 00:27:34,440
vector and then it can<font color="#E5E5E5"> transform itself</font>

490
00:27:30,720 --> 00:27:39,270
either end into the ok state which is<font color="#CCCCCC"> a</font>

491
00:27:34,440 --> 00:27:42,600
<font color="#E5E5E5">ok and</font><font color="#CCCCCC"> then it has a new state then a</font>

492
00:27:39,270 --> 00:27:45,180
buffer which might be<font color="#E5E5E5"> well maybe a</font>

493
00:27:42,600 --> 00:27:48,030
buffer which is transferred to<font color="#CCCCCC"> the</font>

494
00:27:45,180 --> 00:27:50,670
higher layer so the encrypted

495
00:27:48,030 --> 00:27:54,360
<font color="#CCCCCC">implication data is getting decrypted</font>

496
00:27:50,670 --> 00:27:56,910
<font color="#CCCCCC">and</font><font color="#E5E5E5"> passed passed upwards and then</font>

497
00:27:54,360 --> 00:27:59,159
another buffer which is optional which

498
00:27:56,910 --> 00:28:01,800
is buffer to be sent to<font color="#CCCCCC"> the other</font>

499
00:27:59,160 --> 00:28:06,420
communication partner so something like

500
00:28:01,800 --> 00:28:10,470
output and the other potential result is

501
00:28:06,420 --> 00:28:13,380
a failure<font color="#E5E5E5"> and transition so whenever we</font>

502
00:28:10,470 --> 00:28:16,470
receive data or whenever we get some

503
00:28:13,380 --> 00:28:19,260
bite victorious and<font color="#E5E5E5"> buffer as input we</font>

504
00:28:16,470 --> 00:28:22,830
can also fail on that buffer because

505
00:28:19,260 --> 00:28:25,379
<font color="#E5E5E5">might concern might contain invalid data</font>

506
00:28:22,830 --> 00:28:29,550
which<font color="#CCCCCC"> we cannot parse and cannot handle</font>

507
00:28:25,380 --> 00:28:33,660
or would we cannot handle at this point

508
00:28:29,550 --> 00:28:36,270
so this this core fragment here is

509
00:28:33,660 --> 00:28:37,670
purely functional and you can see that

510
00:28:36,270 --> 00:28:39,710
<font color="#E5E5E5">because</font>

511
00:28:37,670 --> 00:28:43,760
error handling is done explicitly and

512
00:28:39,710 --> 00:28:46,400
goes from state to state so it receives

513
00:28:43,760 --> 00:28:48,680
an old state and instead of mutating

514
00:28:46,400 --> 00:28:51,950
some values in<font color="#CCCCCC"> that</font><font color="#E5E5E5"> old state it just</font>

515
00:28:48,680 --> 00:28:55,340
returns a new state so allocate some

516
00:28:51,950 --> 00:28:58,700
data and um yeah returns of their data

517
00:28:55,340 --> 00:29:05,899
instead of mutating<font color="#CCCCCC"> the heap at all</font>

518
00:28:58,700 --> 00:29:10,310
other things we can express an o camel

519
00:29:05,900 --> 00:29:13,580
which<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think are pretty powerful is how</font>

520
00:29:10,310 --> 00:29:16,879
we do the state transitions of our state

521
00:29:13,580 --> 00:29:19,760
machine serve so first of all when<font color="#CCCCCC"> we</font>

522
00:29:16,880 --> 00:29:22,850
receive a piece of data and<font color="#E5E5E5"> we are in</font>

523
00:29:19,760 --> 00:29:26,240
the handshake then the first thing<font color="#E5E5E5"> we do</font>

524
00:29:22,850 --> 00:29:31,280
is we we try to pass the buffer which we

525
00:29:26,240 --> 00:29:37,370
received here and<font color="#E5E5E5"> passing it may return</font>

526
00:29:31,280 --> 00:29:40,670
again either an error or<font color="#CCCCCC"> okay and the</font>

527
00:29:37,370 --> 00:29:43,040
value and if the power<font color="#E5E5E5"> fails well then</font>

528
00:29:40,670 --> 00:29:46,220
the entire handshake fails for us so

529
00:29:43,040 --> 00:29:48,170
then we just say oh we have a reader

530
00:29:46,220 --> 00:29:51,620
arrow and we just terminate the

531
00:29:48,170 --> 00:29:55,400
connection because this no reason we

532
00:29:51,620 --> 00:29:57,679
there's<font color="#CCCCCC"> no there's nothing we can do if</font>

533
00:29:55,400 --> 00:30:03,440
the incoming bite vector was not valid

534
00:29:57,680 --> 00:30:07,280
but in the positive case so if we have

535
00:30:03,440 --> 00:30:10,190
managed to decode the byte buffer or the

536
00:30:07,280 --> 00:30:14,480
bite vector we we got as input then we

537
00:30:10,190 --> 00:30:18,170
look what<font color="#E5E5E5"> is our current state so what</font>

538
00:30:14,480 --> 00:30:21,680
<font color="#CCCCCC">is our current what what is the message</font>

539
00:30:18,170 --> 00:30:24,440
we expect as the next message and if our

540
00:30:21,680 --> 00:30:27,560
current said this is a service state

541
00:30:24,440 --> 00:30:29,660
machine here is that we await a client

542
00:30:27,560 --> 00:30:32,360
hello so the<font color="#CCCCCC"> next one should be a client</font>

543
00:30:29,660 --> 00:30:35,990
hello and the<font color="#CCCCCC"> past handshake is actually</font>

544
00:30:32,360 --> 00:30:38,899
a client hello which value here is<font color="#CCCCCC"> ch</font>

545
00:30:35,990 --> 00:30:44,210
well<font color="#E5E5E5"> only then we process that and</font>

546
00:30:38,900 --> 00:30:48,140
return the potential return value so in

547
00:30:44,210 --> 00:30:50,000
new<font color="#E5E5E5"> states and maybe some some message</font>

548
00:30:48,140 --> 00:30:53,240
to be sent to the<font color="#E5E5E5"> other side</font>

549
00:30:50,000 --> 00:30:56,330
the same is true for<font color="#CCCCCC"> volley fee evade</font>

550
00:30:53,240 --> 00:31:00,020
<font color="#E5E5E5">Klein finished selfie</font><font color="#CCCCCC"> hear it towards</font>

551
00:30:56,330 --> 00:31:02,780
<font color="#CCCCCC">the</font><font color="#E5E5E5"> end of</font><font color="#CCCCCC"> the TLS handshake and we</font>

552
00:31:00,020 --> 00:31:05,360
already accumulated some session and

553
00:31:02,780 --> 00:31:07,850
lock which is just<font color="#E5E5E5"> a bite vector of</font>

554
00:31:05,360 --> 00:31:11,360
messages and we received a final

555
00:31:07,850 --> 00:31:13,939
finished message then we really process

556
00:31:11,360 --> 00:31:17,060
that one and verify that<font color="#CCCCCC"> is properly</font>

557
00:31:13,940 --> 00:31:21,860
signed or the contents of it is a proper

558
00:31:17,060 --> 00:31:25,460
<font color="#CCCCCC">Mac and return positive and in and there</font>

559
00:31:21,860 --> 00:31:29,330
are more things here which I get to get

560
00:31:25,460 --> 00:31:32,030
good to do do but by default here down

561
00:31:29,330 --> 00:31:34,760
here by default<font color="#E5E5E5"> we fail with an</font>

562
00:31:32,030 --> 00:31:37,129
unexpected handshake so in the default

563
00:31:34,760 --> 00:31:38,629
case if<font color="#CCCCCC"> we don't find a match or if we</font>

564
00:31:37,130 --> 00:31:41,390
are<font color="#CCCCCC"> not in the right state for the</font>

565
00:31:38,630 --> 00:31:45,140
incoming frame and then we<font color="#CCCCCC"> just fail and</font>

566
00:31:41,390 --> 00:31:51,170
say oh we expected some other message so

567
00:31:45,140 --> 00:31:55,040
we we use this<font color="#E5E5E5"> ochem l-type system to</font>

568
00:31:51,170 --> 00:31:59,660
enforce some state machine invariants I

569
00:31:55,040 --> 00:32:04,250
mean<font color="#E5E5E5"> suddenly it is not a foolproof here</font>

570
00:31:59,660 --> 00:32:08,780
but it is already in improvement over

571
00:32:04,250 --> 00:32:11,720
nowadays coats about over for example

572
00:32:08,780 --> 00:32:14,960
the openssl code that you do the state

573
00:32:11,720 --> 00:32:19,610
transitions by mutating some some data

574
00:32:14,960 --> 00:32:22,130
values and it turned out last year I

575
00:32:19,610 --> 00:32:26,540
think<font color="#CCCCCC"> that it was</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> always sufficient</font>

576
00:32:22,130 --> 00:32:30,560
or the<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> Steg was especially bad by</font>

577
00:32:26,540 --> 00:32:34,790
having done way too many or accepting

578
00:32:30,560 --> 00:32:36,860
way too many frames I told you a bit

579
00:32:34,790 --> 00:32:40,190
about s and one is and one is the

580
00:32:36,860 --> 00:32:44,719
abstract syntax notation version<font color="#CCCCCC"> one and</font>

581
00:32:40,190 --> 00:32:47,530
it does a grammar how you specify key

582
00:32:44,720 --> 00:32:47,530
value trees

583
00:32:49,280 --> 00:32:55,520
and then the specification of x 50 509

584
00:32:53,210 --> 00:32:57,950
there's the there's<font color="#E5E5E5"> one data structure</font>

585
00:32:55,520 --> 00:33:00,680
which is<font color="#E5E5E5"> called to be signed certificate</font>

586
00:32:57,950 --> 00:33:03,230
so that is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> inner part of an x.509</font>

587
00:33:00,680 --> 00:33:07,220
certificate without the signature and I

588
00:33:03,230 --> 00:33:09,770
guess algorithm and the to be signed

589
00:33:07,220 --> 00:33:14,660
certificate is just a sequence of

590
00:33:09,770 --> 00:33:17,750
version number serial number an

591
00:33:14,660 --> 00:33:22,460
algorithm identified to be used as a

592
00:33:17,750 --> 00:33:25,190
signature algorithm then an issuer which

593
00:33:22,460 --> 00:33:30,620
is addressed in next 500<font color="#E5E5E5"> name a validity</font>

594
00:33:25,190 --> 00:33:33,080
which is too well from and until then a

595
00:33:30,620 --> 00:33:35,899
subject which is also<font color="#CCCCCC"> a name and</font>

596
00:33:33,080 --> 00:33:38,720
subtract public key info which is the

597
00:33:35,900 --> 00:33:45,650
RSA public he or the elliptic curve

598
00:33:38,720 --> 00:33:48,980
public key then optionally unique ID for

599
00:33:45,650 --> 00:33:53,000
the issue and the subject and optionally

600
00:33:48,980 --> 00:33:56,570
extensions so this is<font color="#CCCCCC"> how you can find</font>

601
00:33:53,000 --> 00:33:59,060
it in the printed<font color="#E5E5E5"> are of CEO say and we</font>

602
00:33:56,570 --> 00:34:03,860
developed<font color="#E5E5E5"> a domain-specific language to</font>

603
00:33:59,060 --> 00:34:06,470
encode exactly that in 20 camel<font color="#E5E5E5"> and if</font>

604
00:34:03,860 --> 00:34:09,830
you look<font color="#CCCCCC"> now</font><font color="#E5E5E5"> on to the slides you will</font>

605
00:34:06,470 --> 00:34:13,010
see the small difference which we have I

606
00:34:09,830 --> 00:34:16,969
will do that transition again so you

607
00:34:13,010 --> 00:34:19,790
have to move<font color="#CCCCCC"> some</font><font color="#E5E5E5"> of the code if it's</font>

608
00:34:16,969 --> 00:34:21,799
required or optional into the front but

609
00:34:19,790 --> 00:34:27,409
basically<font color="#CCCCCC"> it is a very much the same</font>

610
00:34:21,800 --> 00:34:32,570
syntax and by developing that we are

611
00:34:27,409 --> 00:34:37,340
pretty sure that um yeah we we are able

612
00:34:32,570 --> 00:34:42,770
<font color="#E5E5E5">to encode the certificate as a sequence</font>

613
00:34:37,340 --> 00:34:47,090
of structures and this also generates or

614
00:34:42,770 --> 00:34:52,639
this also is then the father and encoder

615
00:34:47,090 --> 00:34:57,440
coat so instead<font color="#CCCCCC"> of manually trying to</font>

616
00:34:52,639 --> 00:34:59,690
parse<font color="#E5E5E5"> a sand one structures we</font><font color="#CCCCCC"> road</font>

617
00:34:57,440 --> 00:35:00,480
passes and generators for the primitives

618
00:34:59,690 --> 00:35:03,390
and

619
00:35:00,480 --> 00:35:08,430
<font color="#CCCCCC">Combinator's like sequence for the</font>

620
00:35:03,390 --> 00:35:10,890
combinatorial structures so we don't

621
00:35:08,430 --> 00:35:15,450
<font color="#CCCCCC">have to manually</font><font color="#E5E5E5"> write pausing coat</font>

622
00:35:10,890 --> 00:35:19,740
while when we want<font color="#E5E5E5"> to pass new ads and</font>

623
00:35:15,450 --> 00:35:22,169
one grammas but we<font color="#E5E5E5"> just have to write</font>

624
00:35:19,740 --> 00:35:26,970
the<font color="#CCCCCC"> pausing code for the primitives</font>

625
00:35:22,170 --> 00:35:30,750
<font color="#CCCCCC">where a primitive is validity or version</font>

626
00:35:26,970 --> 00:35:32,939
but or string and the different spring

627
00:35:30,750 --> 00:35:35,490
and coatings and sound but this<font color="#E5E5E5"> means</font>

628
00:35:32,940 --> 00:35:37,590
that develop of of the extra<font color="#CCCCCC"> night</font>

629
00:35:35,490 --> 00:35:39,868
library doesn't need to know too much of

630
00:35:37,590 --> 00:35:42,119
a sand one and especially don't<font color="#CCCCCC"> need to</font>

631
00:35:39,869 --> 00:35:45,600
keep track of the paths and in which

632
00:35:42,119 --> 00:35:47,880
state it is in order to get right and is

633
00:35:45,600 --> 00:35:51,779
and one passing is and one has been

634
00:35:47,880 --> 00:35:56,160
problematic and other t less

635
00:35:51,780 --> 00:36:00,840
implementations as well<font color="#CCCCCC"> x509 validation</font>

636
00:35:56,160 --> 00:36:04,230
well we do that also in a more or less

637
00:36:00,840 --> 00:36:09,869
<font color="#E5E5E5">stateless ways so we have a small</font>

638
00:36:04,230 --> 00:36:12,990
<font color="#E5E5E5">predicate switch can look whether a time</font>

639
00:36:09,869 --> 00:36:15,630
is valid which takes a time and

640
00:36:12,990 --> 00:36:21,569
certificate and just do the comparisons

641
00:36:15,630 --> 00:36:23,910
then validating the hostname were that

642
00:36:21,570 --> 00:36:27,180
the extensions and the server extensions

643
00:36:23,910 --> 00:36:31,319
and only<font color="#E5E5E5"> of if all of those predicates</font>

644
00:36:27,180 --> 00:36:37,080
are true we<font color="#E5E5E5"> return success so instead of</font>

645
00:36:31,320 --> 00:36:39,869
<font color="#CCCCCC">having to remember in some imperative</font>

646
00:36:37,080 --> 00:36:43,109
code what we already<font color="#E5E5E5"> have done or so we</font>

647
00:36:39,869 --> 00:36:47,250
try to express<font color="#CCCCCC"> us express that in a</font>

648
00:36:43,109 --> 00:36:50,880
single in a single statement which fits

649
00:36:47,250 --> 00:36:53,430
in within 10 lines and we can actually

650
00:36:50,880 --> 00:36:55,200
understand that we did the right thing

651
00:36:53,430 --> 00:36:56,520
so we at least check the<font color="#E5E5E5"> right</font>

652
00:36:55,200 --> 00:36:58,680
predicates and then we have<font color="#CCCCCC"> to</font>

653
00:36:56,520 --> 00:37:01,200
definitely look into each predicate

654
00:36:58,680 --> 00:37:05,250
definition in order to look whether we

655
00:37:01,200 --> 00:37:07,470
did sufficient test for that the

656
00:37:05,250 --> 00:37:11,280
cryptography which we implemented<font color="#CCCCCC"> well</font>

657
00:37:07,470 --> 00:37:14,939
the course are written in

658
00:37:11,280 --> 00:37:19,470
see but they don't use any advance see

659
00:37:14,940 --> 00:37:22,380
features like memory allocation or data

660
00:37:19,470 --> 00:37:27,060
dependent loops but they are<font color="#E5E5E5"> just the</font>

661
00:37:22,380 --> 00:37:29,070
<font color="#E5E5E5">textbooks examples of of those ciphers</font>

662
00:37:27,060 --> 00:37:31,560
and hashes and the reason<font color="#CCCCCC"> for writing</font>

663
00:37:29,070 --> 00:37:33,630
them and see is just<font color="#E5E5E5"> performance because</font>

664
00:37:31,560 --> 00:37:38,400
<font color="#CCCCCC">and okay</font><font color="#E5E5E5"> Mel we have a garbage collector</font>

665
00:37:33,630 --> 00:37:43,350
and we have only 31 bit integers by

666
00:37:38,400 --> 00:37:47,520
<font color="#CCCCCC">default so that is not sufficient to to</font>

667
00:37:43,350 --> 00:37:51,810
do those<font color="#E5E5E5"> 32 bit integer arithmetics on</font>

668
00:37:47,520 --> 00:37:54,690
but the<font color="#CCCCCC"> higher-level</font><font color="#E5E5E5"> modes so the cipher</font>

669
00:37:51,810 --> 00:37:57,390
modes like counter mode CBC mode ECM

670
00:37:54,690 --> 00:38:00,420
mode<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you shouldn't use that GCM and</font>

671
00:37:57,390 --> 00:38:03,000
CCM and on these are<font color="#E5E5E5"> written a no camel</font>

672
00:38:00,420 --> 00:38:05,640
which are then communicating with the

673
00:38:03,000 --> 00:38:10,800
core which is blocked decrypt and

674
00:38:05,640 --> 00:38:13,290
entered the public key crypto is written

675
00:38:10,800 --> 00:38:16,800
an o camel and we use a big number

676
00:38:13,290 --> 00:38:21,150
library which uses in the back and the

677
00:38:16,800 --> 00:38:25,470
new multi-position um binary library<font color="#CCCCCC"> Jim</font>

678
00:38:21,150 --> 00:38:29,160
<font color="#E5E5E5">key and the public key crypto itself</font>

679
00:38:25,470 --> 00:38:33,450
also uses blinding on the ok<font color="#CCCCCC"> Malaya so</font>

680
00:38:29,160 --> 00:38:36,930
we don't really need to have GMP doing

681
00:38:33,450 --> 00:38:39,839
some constant time operations you also

682
00:38:36,930 --> 00:38:42,450
have a random number generator which is

683
00:38:39,840 --> 00:38:47,490
for tuner which we also implemented<font color="#CCCCCC"> and</font>

684
00:38:42,450 --> 00:38:50,669
ochem once again using AES CTR from from

685
00:38:47,490 --> 00:38:55,379
C and we have some entropy collection

686
00:38:50,670 --> 00:38:59,040
which is basically based on either<font color="#E5E5E5"> CPU</font>

687
00:38:55,380 --> 00:39:02,430
features or non deterministic

688
00:38:59,040 --> 00:39:07,920
computations you can do with the CPU has

689
00:39:02,430 --> 00:39:11,580
explained in the world wine papers or we

690
00:39:07,920 --> 00:39:14,970
also feed from the main timing loop so

691
00:39:11,580 --> 00:39:19,799
from the main scheduler the feet and

692
00:39:14,970 --> 00:39:22,080
some bits and bytes what is what are<font color="#CCCCCC"> the</font>

693
00:39:19,800 --> 00:39:23,269
<font color="#E5E5E5">result of the salty less library will</font>

694
00:39:22,080 --> 00:39:26,239
leave

695
00:39:23,269 --> 00:39:33,919
<font color="#CCCCCC">interoperable with most of the Stags our</font>

696
00:39:26,239 --> 00:39:38,509
code size is um roughly well maybe four

697
00:39:33,919 --> 00:39:46,999
percent of other implementations we also

698
00:39:38,509 --> 00:39:52,069
had some fun and<font color="#E5E5E5"> developed service which</font>

699
00:39:46,999 --> 00:39:56,238
<font color="#CCCCCC">is the Bitcoin pinata where we would we</font>

700
00:39:52,069 --> 00:39:58,519
put basically beyond our arm TLS<font color="#CCCCCC"> tag so</font>

701
00:39:56,239 --> 00:40:00,469
we expose the client and<font color="#E5E5E5"> the server side</font>

702
00:39:58,519 --> 00:40:03,229
of our t less tag you can even<font color="#CCCCCC"> use</font>

703
00:40:00,469 --> 00:40:05,689
<font color="#E5E5E5">netcat to short-circuit them and if you</font>

704
00:40:03,229 --> 00:40:09,049
<font color="#E5E5E5">properly authenticate either as a client</font>

705
00:40:05,689 --> 00:40:11,569
<font color="#CCCCCC">or as a server towards that service that</font>

706
00:40:09,049 --> 00:40:14,689
you then you get the private key of<font color="#E5E5E5"> a</font>

707
00:40:11,569 --> 00:40:19,519
<font color="#E5E5E5">bitcoin wallet which is filled with</font><font color="#CCCCCC"> ten</font>

708
00:40:14,689 --> 00:40:21,979
bitcoins<font color="#CCCCCC"> and we have that I mean we he</font>

709
00:40:19,519 --> 00:40:27,919
also he have the long disclaimer that we

710
00:40:21,979 --> 00:40:33,078
a trace users and<font color="#CCCCCC"> B that</font><font color="#E5E5E5"> we cannot</font>

711
00:40:27,919 --> 00:40:36,169
derive any security out of it<font color="#E5E5E5"> but we</font>

712
00:40:33,079 --> 00:40:41,569
have<font color="#CCCCCC"> it online since one-half years and</font>

713
00:40:36,169 --> 00:40:44,239
it is also written in my rush as a<font color="#CCCCCC"> mere</font>

714
00:40:41,569 --> 00:40:46,788
<font color="#CCCCCC">RS application and it is a small virtual</font>

715
00:40:44,239 --> 00:40:50,630
machine<font color="#CCCCCC"> image running on Zen somewhere</font>

716
00:40:46,789 --> 00:40:54,199
on the internet this<font color="#CCCCCC"> is actually a</font>

717
00:40:50,630 --> 00:40:57,349
picture of the dependencies full of the

718
00:40:54,199 --> 00:41:00,079
libraries which are linked in here so

719
00:40:57,349 --> 00:41:03,109
you can see<font color="#E5E5E5"> actually you can actually</font>

720
00:41:00,079 --> 00:41:05,479
render a graph with all the libraries

721
00:41:03,109 --> 00:41:09,739
which are<font color="#CCCCCC"> involved and the graph is not</font>

722
00:41:05,479 --> 00:41:15,439
exploding so if I would try<font color="#CCCCCC"> to develop a</font>

723
00:41:09,739 --> 00:41:17,419
graph of the Linux<font color="#E5E5E5"> kernel and openssl</font>

724
00:41:15,439 --> 00:41:19,939
running on top<font color="#E5E5E5"> of it I think it would</font>

725
00:41:17,419 --> 00:41:24,589
explode I mean depends on the

726
00:41:19,939 --> 00:41:27,279
granularity but it's very likely that it

727
00:41:24,589 --> 00:41:27,279
would explode

728
00:41:30,490 --> 00:41:32,549
you

729
00:41:40,190 --> 00:41:42,250
you

730
00:42:00,380 --> 00:42:08,289
yeah<font color="#E5E5E5"> I need to somehow</font>

731
00:42:16,310 --> 00:42:23,259
where do I get my data<font color="#E5E5E5"> URI boots maybe</font>

732
00:43:02,720 --> 00:43:22,580
so now<font color="#E5E5E5"> I should be able to load that</font>

733
00:43:09,950 --> 00:43:24,830
again there we go this is a another

734
00:43:22,580 --> 00:43:28,040
visualization which takes into account

735
00:43:24,830 --> 00:43:32,210
the sizes of the different libraries

736
00:43:28,040 --> 00:43:34,970
they can see that lip DCC is here the

737
00:43:32,210 --> 00:43:37,940
biggest contributing factor to what the

738
00:43:34,970 --> 00:43:40,189
binary<font color="#E5E5E5"> size but that one also we we got</font>

739
00:43:37,940 --> 00:43:42,740
rid of that<font color="#E5E5E5"> basically just a helper</font>

740
00:43:40,190 --> 00:43:46,400
library but you need on some system

741
00:43:42,740 --> 00:43:50,899
which don't provide several some 128-bit

742
00:43:46,400 --> 00:43:53,119
primitives what is the results well it's

743
00:43:50,900 --> 00:43:55,520
up since more than<font color="#CCCCCC"> a year and still up</font>

744
00:43:53,119 --> 00:43:58,700
and nobody<font color="#E5E5E5"> has hecht it I found</font><font color="#CCCCCC"> actually</font>

745
00:43:55,520 --> 00:44:01,220
a back in our whole stack which allowed

746
00:43:58,700 --> 00:44:05,180
me to steal my own bitcoins whether it's

747
00:44:01,220 --> 00:44:08,209
a bit pointless and yeah we can we

748
00:44:05,180 --> 00:44:10,730
cannot in fear any security and why did

749
00:44:08,210 --> 00:44:12,859
we do that well<font color="#CCCCCC"> bitcoin has some sort</font><font color="#E5E5E5"> of</font>

750
00:44:10,730 --> 00:44:15,589
transparency so everybody can look

751
00:44:12,859 --> 00:44:19,339
whether the bitcoins are still there or

752
00:44:15,589 --> 00:44:23,390
not that<font color="#E5E5E5"> is what we thought would be</font>

753
00:44:19,339 --> 00:44:25,279
nice to have their a bit about the

754
00:44:23,390 --> 00:44:27,290
<font color="#E5E5E5">performance of our till I stag the</font>

755
00:44:25,280 --> 00:44:29,990
handshakes so the isometric tripped

756
00:44:27,290 --> 00:44:32,450
operations are roughly the same speed as

757
00:44:29,990 --> 00:44:37,430
other implementations and the throughput

758
00:44:32,450 --> 00:44:41,750
is interestingly better than for example

759
00:44:37,430 --> 00:44:46,069
polis as<font color="#E5E5E5"> L but up to</font><font color="#CCCCCC"> eighty five</font><font color="#E5E5E5"> percent</font>

760
00:44:41,750 --> 00:44:48,260
<font color="#E5E5E5">of the speed of openssl it surely</font>

761
00:44:46,070 --> 00:44:50,599
depends on the block size you use and

762
00:44:48,260 --> 00:44:53,540
then you can measure the throughput and

763
00:44:50,599 --> 00:44:57,859
megabytes but<font color="#CCCCCC"> eighty-five</font><font color="#E5E5E5"> percent of the</font>

764
00:44:53,540 --> 00:45:06,460
speed of openssl<font color="#CCCCCC"> I think this is a good</font>

765
00:44:57,859 --> 00:45:06,460
this is a high value what do I fear

766
00:45:09,100 --> 00:45:20,170
so to to rehearse we have a stateful

767
00:45:16,840 --> 00:45:22,990
protocol well how to implement stateful

768
00:45:20,170 --> 00:45:25,330
protocols and the ideas is to have a

769
00:45:22,990 --> 00:45:28,569
purely functional core which goes from

770
00:45:25,330 --> 00:45:31,390
state and input to state and output to

771
00:45:28,570 --> 00:45:34,900
have explicit error handling like

772
00:45:31,390 --> 00:45:39,040
aeromonas or result type and especially

773
00:45:34,900 --> 00:45:41,980
don't<font color="#CCCCCC"> use exceptions or so and the</font>

774
00:45:39,040 --> 00:45:45,670
behavior<font color="#CCCCCC"> of our core protocol logic is</font>

775
00:45:41,980 --> 00:45:49,780
only dependent on on its arguments each

776
00:45:45,670 --> 00:45:54,190
function but not an arbitrary<font color="#E5E5E5"> memory out</font>

777
00:45:49,780 --> 00:45:57,970
there so there's not<font color="#E5E5E5"> a class field which</font>

778
00:45:54,190 --> 00:46:01,300
you can mutate in some method and you

779
00:45:57,970 --> 00:46:04,839
read from and depending on the value of

780
00:46:01,300 --> 00:46:06,970
that class field we we have certain

781
00:46:04,840 --> 00:46:09,550
behavior and the sorting or whatever

782
00:46:06,970 --> 00:46:12,129
that that is not<font color="#E5E5E5"> the case so</font><font color="#CCCCCC"> we try to</font>

783
00:46:09,550 --> 00:46:14,260
<font color="#E5E5E5">have the the code very local and that</font>

784
00:46:12,130 --> 00:46:17,590
can actually locally understand<font color="#CCCCCC"> the code</font>

785
00:46:14,260 --> 00:46:21,490
but just looking at the input arguments

786
00:46:17,590 --> 00:46:25,690
and looking what this returned we

787
00:46:21,490 --> 00:46:29,319
isolate the side effects like timers

788
00:46:25,690 --> 00:46:34,600
<font color="#CCCCCC">input output mutable state which is then</font>

789
00:46:29,320 --> 00:46:39,910
giving an an effect full lay on on on

790
00:46:34,600 --> 00:46:47,170
top of the pure protocol logic for for

791
00:46:39,910 --> 00:46:50,859
the side effects<font color="#CCCCCC"> and now</font><font color="#E5E5E5"> I have to cheat</font>

792
00:46:47,170 --> 00:46:56,980
a bit because my presentation was

793
00:46:50,860 --> 00:46:59,020
somehow broken let me go to the end of

794
00:46:56,980 --> 00:47:02,470
the overall talk where I want<font color="#E5E5E5"> to</font>

795
00:46:59,020 --> 00:47:05,860
<font color="#E5E5E5">conclude that my main</font><font color="#CCCCCC"> goal is there to</font>

796
00:47:02,470 --> 00:47:09,100
enable people to<font color="#E5E5E5"> take control to take</font>

797
00:47:05,860 --> 00:47:12,160
back control over your own data or over

798
00:47:09,100 --> 00:47:15,819
their data and everybody should<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able</font>

799
00:47:12,160 --> 00:47:19,930
<font color="#E5E5E5">in my opinion to have full control over</font>

800
00:47:15,820 --> 00:47:22,400
their data I think it will<font color="#CCCCCC"> change the</font>

801
00:47:19,930 --> 00:47:24,770
future of<font color="#E5E5E5"> how we use our computer</font>

802
00:47:22,400 --> 00:47:26,839
is because nowadays a lot of<font color="#E5E5E5"> people go</font>

803
00:47:24,770 --> 00:47:30,859
to Google or Facebook or whatever

804
00:47:26,839 --> 00:47:34,880
because they provide nice interfaces but

805
00:47:30,859 --> 00:47:38,450
also people then give control away<font color="#E5E5E5"> over</font>

806
00:47:34,880 --> 00:47:41,990
their<font color="#CCCCCC"> own private data</font><font color="#E5E5E5"> me rajo as itself</font>

807
00:47:38,450 --> 00:47:45,049
<font color="#E5E5E5">is an active open source and research</font>

808
00:47:41,990 --> 00:47:47,598
project it is engineered a thing with a

809
00:47:45,049 --> 00:47:50,809
very radical approach at least in the

810
00:47:47,599 --> 00:47:53,900
<font color="#E5E5E5">systems community to just throw</font><font color="#CCCCCC"> away all</font>

811
00:47:50,809 --> 00:47:58,430
those layers of POSIX and all other or

812
00:47:53,900 --> 00:48:05,150
the other crap and it avoids several

813
00:47:58,430 --> 00:48:08,240
root causes of exploits and problems in

814
00:48:05,150 --> 00:48:12,200
computer security by just have a

815
00:48:08,240 --> 00:48:16,189
decision<font color="#E5E5E5"> on a memory</font><font color="#CCCCCC"> saved language and</font>

816
00:48:12,200 --> 00:48:18,288
composable libraries instead of having

817
00:48:16,190 --> 00:48:22,520
all the complexity and<font color="#CCCCCC"> a</font><font color="#E5E5E5"> general-purpose</font>

818
00:48:18,289 --> 00:48:25,099
operating system so we<font color="#CCCCCC"> have a pretty</font>

819
00:48:22,520 --> 00:48:27,170
small<font color="#CCCCCC"> trusted computing Bay trust code</font>

820
00:48:25,099 --> 00:48:30,470
bases maybe two orders of magnitude

821
00:48:27,170 --> 00:48:33,740
<font color="#CCCCCC">smaller than a Linux system or so and we</font>

822
00:48:30,470 --> 00:48:38,209
have I<font color="#E5E5E5"> think reasonable performance and</font>

823
00:48:33,740 --> 00:48:40,569
that's it from me I'm<font color="#E5E5E5"> happy to answer</font>

824
00:48:38,210 --> 00:48:40,569
questions

825
00:48:43,630 --> 00:49:23,110
yes maybe I mean I<font color="#CCCCCC"> think that is and one</font>

826
00:49:20,470 --> 00:49:25,930
has solved a lot of issues which people

827
00:49:23,110 --> 00:49:28,270
are now trying to resolve with XML and

828
00:49:25,930 --> 00:49:30,879
JSON and so on because it is just an

829
00:49:28,270 --> 00:49:32,950
encoding and you can send a sand one

830
00:49:30,880 --> 00:49:36,370
also as a packed encoding of the wire

831
00:49:32,950 --> 00:49:38,980
which then is very small<font color="#CCCCCC"> you save a lot</font>

832
00:49:36,370 --> 00:49:43,930
of bits doing that and<font color="#CCCCCC"> s and one is a</font>

833
00:49:38,980 --> 00:49:46,180
crucial to nowadays this x509 land and

834
00:49:43,930 --> 00:49:48,160
the TLS and what I see is in

835
00:49:46,180 --> 00:49:50,740
reimplemented<font color="#E5E5E5"> stuff I don't want</font><font color="#CCCCCC"> to</font>

836
00:49:48,160 --> 00:49:52,870
reimplement old crap but I still want<font color="#E5E5E5"> to</font>

837
00:49:50,740 --> 00:49:57,009
be able to<font color="#CCCCCC"> communicate to other parties</font>

838
00:49:52,870 --> 00:50:01,420
and I can I can get rid of things like

839
00:49:57,010 --> 00:50:06,630
well hopefully ipv4 soon but

840
00:50:01,420 --> 00:50:06,630
unfortunately not right now but on

841
00:50:12,430 --> 00:50:18,970
yeah maybe it's free<font color="#E5E5E5"> man CBC mode is</font>

842
00:50:15,580 --> 00:50:21,340
already deprecated but<font color="#E5E5E5"> the we did some</font>

843
00:50:18,970 --> 00:50:23,890
experiments and we don't<font color="#E5E5E5"> talk to maybe</font>

844
00:50:21,340 --> 00:50:25,660
five percent of the internet because<font color="#E5E5E5"> we</font>

845
00:50:23,890 --> 00:50:28,990
don't implement this is<font color="#CCCCCC"> a version two or</font>

846
00:50:25,660 --> 00:50:32,680
<font color="#CCCCCC">a zero</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> and we require to them</font>

847
00:50:28,990 --> 00:50:36,339
to have<font color="#E5E5E5"> some renegotiation features like</font>

848
00:50:32,680 --> 00:50:39,190
to<font color="#E5E5E5"> think you are in negotiation and we</font>

849
00:50:36,340 --> 00:50:42,280
can I mean<font color="#E5E5E5"> the question arises when will</font>

850
00:50:39,190 --> 00:50:45,220
be finally drops<font color="#E5E5E5"> aboard for stream and</font>

851
00:50:42,280 --> 00:50:48,700
<font color="#E5E5E5">CBC ciphers and the answer is so fully</font>

852
00:50:45,220 --> 00:51:04,930
once 1.3 is out and we<font color="#E5E5E5"> can just get</font><font color="#CCCCCC"> away</font>

853
00:50:48,700 --> 00:51:07,810
with that on on which layer so on the

854
00:51:04,930 --> 00:51:10,210
CBC mode there's this lucky<font color="#E5E5E5"> 13 attack</font>

855
00:51:07,810 --> 00:51:20,950
and we currently don't mitigate<font color="#E5E5E5"> against</font>

856
00:51:10,210 --> 00:51:23,440
it while you can hmm so what does a

857
00:51:20,950 --> 00:51:25,899
constant time mean it is basically<font color="#CCCCCC"> that</font>

858
00:51:23,440 --> 00:51:30,130
you don't do any data dependent branches

859
00:51:25,900 --> 00:51:31,990
and that you do in well if you don't<font color="#E5E5E5"> do</font>

860
00:51:30,130 --> 00:51:34,390
any data but dependent branches<font color="#CCCCCC"> you</font>

861
00:51:31,990 --> 00:51:36,549
should be fine maybe you also need to

862
00:51:34,390 --> 00:51:41,740
have the same memory access pattern in

863
00:51:36,550 --> 00:51:45,130
all branches and or your results well

864
00:51:41,740 --> 00:51:47,410
you resolve you just have some wear some

865
00:51:45,130 --> 00:51:51,310
bid to know which which piece of resold

866
00:51:47,410 --> 00:51:53,950
you you would use so in theory you<font color="#CCCCCC"> could</font>

867
00:51:51,310 --> 00:51:57,070
apply the very same counter measures as

868
00:51:53,950 --> 00:52:01,390
they have been<font color="#CCCCCC"> implemented in c4 lucky</font>

869
00:51:57,070 --> 00:52:04,300
13 but it was just<font color="#CCCCCC"> a big convolution of</font>

870
00:52:01,390 --> 00:52:06,580
our code and we decided<font color="#E5E5E5"> to not yet care</font>

871
00:52:04,300 --> 00:52:10,120
about that and there was even a student

872
00:52:06,580 --> 00:52:12,670
and<font color="#E5E5E5"> San Diego at University who tried to</font>

873
00:52:10,120 --> 00:52:15,700
implement the lucky 13 attack against

874
00:52:12,670 --> 00:52:18,040
our stack and his results<font color="#E5E5E5"> didn't really</font>

875
00:52:15,700 --> 00:52:24,220
look promising I mean he wasn't able<font color="#E5E5E5"> to</font>

876
00:52:18,040 --> 00:52:26,140
find any any bits in<font color="#E5E5E5"> the key so as soon</font>

877
00:52:24,220 --> 00:52:29,410
as someone successfully

878
00:52:26,140 --> 00:52:32,950
explore the lucky 13 on our<font color="#E5E5E5"> stake I will</font>

879
00:52:29,410 --> 00:52:37,058
go through the code and do it in

880
00:52:32,950 --> 00:52:43,960
constant time but it's hard I mean it's

881
00:52:37,059 --> 00:53:25,029
huh yeah<font color="#E5E5E5"> yep likely it will just disable</font>

882
00:52:43,960 --> 00:53:28,660
the<font color="#E5E5E5"> CBC crap and so at the moment we are</font>

883
00:53:25,029 --> 00:53:31,059
<font color="#E5E5E5">on the the host operating system is the</font>

884
00:53:28,660 --> 00:53:36,578
ether Linux or something else which

885
00:53:31,059 --> 00:53:39,940
provides a dumb 0 or B I've host which

886
00:53:36,579 --> 00:53:45,670
means it's free bc or Mac os10 soon with

887
00:53:39,940 --> 00:53:47,500
the<font color="#E5E5E5"> exact that is currently only an</font>

888
00:53:45,670 --> 00:53:49,210
intermediate step what do<font color="#E5E5E5"> I need from</font>

889
00:53:47,500 --> 00:53:52,450
the host system well<font color="#E5E5E5"> suddenly I don't</font>

890
00:53:49,210 --> 00:53:55,839
<font color="#CCCCCC">want to write device drivers or too many</font>

891
00:53:52,450 --> 00:53:59,109
<font color="#E5E5E5">device drivers because it's hard a lot</font>

892
00:53:55,839 --> 00:54:02,980
of<font color="#E5E5E5"> work and all the Linux people have</font>

893
00:53:59,109 --> 00:54:05,078
already done<font color="#CCCCCC"> that but</font><font color="#E5E5E5"> apart from device</font>

894
00:54:02,980 --> 00:54:06,940
drivers I don't<font color="#E5E5E5"> really need much Anita</font>

895
00:54:05,079 --> 00:54:08,710
scheduler which is scheduled to

896
00:54:06,940 --> 00:54:11,589
different virtual machines and then I

897
00:54:08,710 --> 00:54:15,430
<font color="#CCCCCC">need something which does the memory</font>

898
00:54:11,589 --> 00:54:17,950
allocation the host system or<font color="#E5E5E5"> those</font>

899
00:54:15,430 --> 00:54:19,930
updates to the page tables so it's not

900
00:54:17,950 --> 00:54:23,439
<font color="#CCCCCC">too much a need and the</font><font color="#E5E5E5"> host system</font>

901
00:54:19,930 --> 00:54:25,899
nevertheless currently it's still Linux

902
00:54:23,440 --> 00:54:28,089
a full<font color="#E5E5E5"> Linux at the moment what we</font>

903
00:54:25,900 --> 00:54:31,630
especially don't need in the host system

904
00:54:28,089 --> 00:54:34,058
is networking apart<font color="#E5E5E5"> from a bridge which</font>

905
00:54:31,630 --> 00:54:37,630
just bridges it to all the virtual

906
00:54:34,059 --> 00:54:39,119
machines and the idea to get rid of<font color="#CCCCCC"> that</font>

907
00:54:37,630 --> 00:54:42,180
is yeah maybe<font color="#CCCCCC"> into</font>

908
00:54:39,119 --> 00:54:44,249
years or so when there are enough device

909
00:54:42,180 --> 00:54:46,348
drivers so we also have one back end

910
00:54:44,249 --> 00:54:48,480
which runs o camel directly on the

911
00:54:46,349 --> 00:54:52,049
<font color="#E5E5E5">Raspberry Pi for example and then we</font>

912
00:54:48,480 --> 00:54:55,710
<font color="#E5E5E5">don't use any host systems it's just on</font>

913
00:54:52,049 --> 00:54:57,359
the bare metal but there we are in the

914
00:54:55,710 --> 00:55:01,049
need of drivers and we don't<font color="#E5E5E5"> have</font>

915
00:54:57,359 --> 00:55:04,769
drivers apart from a vga frame of the

916
00:55:01,049 --> 00:55:06,990
device so it's a<font color="#E5E5E5"> bit pointless at the</font>

917
00:55:04,769 --> 00:55:10,348
moment we are not enough people to

918
00:55:06,990 --> 00:55:14,058
actually do to<font color="#E5E5E5"> device drivers yet so we</font>

919
00:55:10,349 --> 00:55:14,059
just rely on<font color="#E5E5E5"> the Linux one</font>

920
00:55:24,339 --> 00:55:33,910
yes but I don't<font color="#E5E5E5"> really want to have so I</font>

921
00:55:31,299 --> 00:55:36,099
mean we have a small dependency on see

922
00:55:33,910 --> 00:55:38,859
because<font color="#CCCCCC"> o</font><font color="#E5E5E5"> camel runtime is partially</font>

923
00:55:36,099 --> 00:55:40,960
written and see itself but we don't have

924
00:55:38,859 --> 00:55:44,469
a dependency on rust at the moment sir

925
00:55:40,960 --> 00:55:48,819
only happy to<font color="#E5E5E5"> write it in rust or inline</font>

926
00:55:44,469 --> 00:55:50,979
assembly actually once we have the o

927
00:55:48,819 --> 00:55:54,609
camel runtime is in<font color="#CCCCCC"> london assembly or</font>

928
00:55:50,979 --> 00:55:57,999
as rust code because I mean we use<font color="#E5E5E5"> C not</font>

929
00:55:54,609 --> 00:56:00,430
as<font color="#E5E5E5"> C language but we basically just use</font>

930
00:55:57,999 --> 00:56:05,589
in<font color="#E5E5E5"> manama X for inline assembly for the</font>

931
00:56:00,430 --> 00:56:10,799
a s routines as well no no memory

932
00:56:05,589 --> 00:56:10,799
locations and see that's too<font color="#E5E5E5"> hard for us</font>

