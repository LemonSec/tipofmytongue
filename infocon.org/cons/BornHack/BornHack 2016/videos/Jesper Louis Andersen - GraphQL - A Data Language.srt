1
00:00:00,000 --> 00:00:04,140
to start today's program with the yes

2
00:00:02,760 --> 00:00:08,940
pelu you<font color="#E5E5E5"> honest and who's going to talk</font>

3
00:00:04,140 --> 00:00:12,450
about graph ql<font color="#CCCCCC"> okay thank</font><font color="#E5E5E5"> you Alex yeah</font>

4
00:00:08,940 --> 00:00:15,268
so<font color="#E5E5E5"> this talk is about this query</font>

5
00:00:12,450 --> 00:00:18,570
language called<font color="#CCCCCC"> breath ql that I've been</font>

6
00:00:15,269 --> 00:00:21,539
<font color="#E5E5E5">working on at work for the last like two</font>

7
00:00:18,570 --> 00:00:23,130
months I guess two and a half months so

8
00:00:21,539 --> 00:00:26,160
now I'm I feel I'm kind of ready to

9
00:00:23,130 --> 00:00:30,330
<font color="#E5E5E5">present what it is all about and know</font>

10
00:00:26,160 --> 00:00:31,980
what I mean I i I'm going to try<font color="#E5E5E5"> to give</font>

11
00:00:30,330 --> 00:00:34,530
<font color="#CCCCCC">you an</font><font color="#E5E5E5"> idea of what</font><font color="#CCCCCC"> it is and how it</font>

12
00:00:31,980 --> 00:00:38,790
works and all that stuff I hope you can

13
00:00:34,530 --> 00:00:39,989
reap the slides so my my my class is<font color="#E5E5E5"> not</font>

14
00:00:38,790 --> 00:00:41,940
really<font color="#CCCCCC"> good at reading from the long</font>

15
00:00:39,989 --> 00:00:47,038
distance but I hope your eyes are better

16
00:00:41,940 --> 00:00:49,468
than mine<font color="#E5E5E5"> so</font><font color="#CCCCCC"> um yes so what I'm going to</font>

17
00:00:47,039 --> 00:00:51,600
do is I'm<font color="#CCCCCC"> going to do a two-stage</font>

18
00:00:49,469 --> 00:00:53,340
process here<font color="#E5E5E5"> I'm going to give a know</font>

19
00:00:51,600 --> 00:00:56,010
your craft roll itself and then I'm

20
00:00:53,340 --> 00:00:59,309
<font color="#E5E5E5">going to dig into how you would you know</font>

21
00:00:56,010 --> 00:01:00,960
implement a graphical implementation on

22
00:00:59,309 --> 00:01:02,760
the server<font color="#E5E5E5"> and if you wanted to want to</font>

23
00:01:00,960 --> 00:01:06,390
do<font color="#E5E5E5"> that at some point and how you can</font>

24
00:01:02,760 --> 00:01:08,399
<font color="#E5E5E5">approach it my approach is a bit</font>

25
00:01:06,390 --> 00:01:11,820
different<font color="#E5E5E5"> from what they normally do but</font>

26
00:01:08,400 --> 00:01:16,619
I think<font color="#CCCCCC"> I have a better approach so yes</font>

27
00:01:11,820 --> 00:01:18,869
and there's a disclaimer here I'm only

28
00:01:16,619 --> 00:01:21,900
giving the introduction here does

29
00:01:18,869 --> 00:01:24,689
<font color="#E5E5E5">graphical is a pretty big language and I</font>

30
00:01:21,900 --> 00:01:27,270
cannot really cover everything so I have

31
00:01:24,689 --> 00:01:30,210
deliberately skip skipped a lot of the

32
00:01:27,270 --> 00:01:31,740
concepts in it and then what I want to

33
00:01:30,210 --> 00:01:34,169
try<font color="#CCCCCC"> to do is to give you a feel for how</font>

34
00:01:31,740 --> 00:01:36,210
it works and<font color="#E5E5E5"> how it operates and not</font>

35
00:01:34,170 --> 00:01:38,670
<font color="#E5E5E5">really go into details for some of the</font>

36
00:01:36,210 --> 00:01:41,939
more subtle things<font color="#CCCCCC"> and also</font><font color="#E5E5E5"> they are</font>

37
00:01:38,670 --> 00:01:44,250
continuously extending the the spec they

38
00:01:41,939 --> 00:01:47,100
have on the<font color="#CCCCCC"> language so it's a it's</font>

39
00:01:44,250 --> 00:01:49,439
evolving as we speak essentially so

40
00:01:47,100 --> 00:01:51,539
things are changing the things like work

41
00:01:49,439 --> 00:01:55,289
are kind<font color="#E5E5E5"> of set in stone but new things</font>

42
00:01:51,540 --> 00:01:57,630
are getting added all the time so what

43
00:01:55,290 --> 00:02:01,530
<font color="#CCCCCC">is this about well it's</font><font color="#E5E5E5"> created by</font>

44
00:01:57,630 --> 00:02:03,570
<font color="#E5E5E5">Facebook in 2012 internally and then</font>

45
00:02:01,530 --> 00:02:07,560
they release the public drafts pack of

46
00:02:03,570 --> 00:02:10,590
this last year internally they use it

47
00:02:07,560 --> 00:02:13,470
presumably<font color="#E5E5E5"> on Android iOS and on the web</font>

48
00:02:10,590 --> 00:02:13,740
in order to make<font color="#E5E5E5"> a way for clients to</font>

49
00:02:13,470 --> 00:02:18,359
queer

50
00:02:13,740 --> 00:02:20,190
the server side and they they have

51
00:02:18,360 --> 00:02:23,910
<font color="#E5E5E5">almost replaced their internal api's</font>

52
00:02:20,190 --> 00:02:27,510
with this graphical API for a lot of<font color="#CCCCCC"> the</font>

53
00:02:23,910 --> 00:02:30,120
<font color="#CCCCCC">things that they are doing the thing you</font>

54
00:02:27,510 --> 00:02:32,519
<font color="#E5E5E5">can use</font><font color="#CCCCCC"> it for</font><font color="#E5E5E5"> is basically to get rid</font>

55
00:02:30,120 --> 00:02:35,430
of rest in your in your application

56
00:02:32,520 --> 00:02:37,170
stack because it puts yourself right on

57
00:02:35,430 --> 00:02:39,390
top of rests and then kind<font color="#E5E5E5"> of takes over</font>

58
00:02:37,170 --> 00:02:43,109
<font color="#E5E5E5">the rest tech so you don't have you have</font>

59
00:02:39,390 --> 00:02:44,790
one rest endpoint in your system so your

60
00:02:43,110 --> 00:02:48,930
ruler has only one entry point

61
00:02:44,790 --> 00:02:50,519
essentially and that is enough the<font color="#CCCCCC"> way</font>

62
00:02:48,930 --> 00:02:52,410
it<font color="#CCCCCC"> works is that it is a client-server</font>

63
00:02:50,520 --> 00:02:53,520
query language so the client makes

64
00:02:52,410 --> 00:02:55,740
queries to the server the<font color="#CCCCCC"> server</font>

65
00:02:53,520 --> 00:02:59,760
responds with answers back to the<font color="#E5E5E5"> client</font>

66
00:02:55,740 --> 00:03:02,790
lady deb spend extensions where they're

67
00:02:59,760 --> 00:03:06,120
trying<font color="#E5E5E5"> to add say streaming capabilities</font>

68
00:03:02,790 --> 00:03:08,100
subscription capabilities bets requests

69
00:03:06,120 --> 00:03:10,320
and stuff like that<font color="#E5E5E5"> but i'm not going</font><font color="#CCCCCC"> to</font>

70
00:03:08,100 --> 00:03:11,760
carbide just know that they have a

71
00:03:10,320 --> 00:03:15,329
solution for<font color="#E5E5E5"> this if you need</font><font color="#CCCCCC"> a</font>

72
00:03:11,760 --> 00:03:19,290
streaming you know a streaming endpoint

73
00:03:15,330 --> 00:03:21,870
for something also it's<font color="#CCCCCC"> not really tied</font>

74
00:03:19,290 --> 00:03:24,299
to the web service in the sense that it

75
00:03:21,870 --> 00:03:26,250
is<font color="#E5E5E5"> not tied to http you could use</font><font color="#CCCCCC"> it for</font>

76
00:03:24,300 --> 00:03:29,730
web or web sockets you<font color="#E5E5E5"> would use it or</font>

77
00:03:26,250 --> 00:03:31,980
proto buffs in principle so the

78
00:03:29,730 --> 00:03:33,929
transport layer use is actually<font color="#CCCCCC"> up to</font>

79
00:03:31,980 --> 00:03:40,140
<font color="#E5E5E5">you this is just the thing you put on</font>

80
00:03:33,930 --> 00:03:41,670
top the way it<font color="#E5E5E5"> works is I mean it's a</font>

81
00:03:40,140 --> 00:03:43,559
wrong approximation but one

82
00:03:41,670 --> 00:03:45,929
approximation you could use is that is

83
00:03:43,560 --> 00:03:49,980
it<font color="#CCCCCC"> is sequel for the web in the sense</font>

84
00:03:45,930 --> 00:03:51,300
that the client declares a query and the

85
00:03:49,980 --> 00:03:54,209
career is sent to the<font color="#E5E5E5"> server the</font><font color="#CCCCCC"> server</font>

86
00:03:51,300 --> 00:03:56,880
tries to resolve that query and then

87
00:03:54,210 --> 00:03:58,590
give back its answer and there's a

88
00:03:56,880 --> 00:04:01,859
concept of<font color="#E5E5E5"> a schema and this which</font>

89
00:03:58,590 --> 00:04:03,810
defines what are the valid queries and

90
00:04:01,860 --> 00:04:06,420
the schema defines essentially what your

91
00:04:03,810 --> 00:04:08,520
service reports so this corresponds to

92
00:04:06,420 --> 00:04:11,220
the<font color="#E5E5E5"> endpoints in a restful web service</font>

93
00:04:08,520 --> 00:04:12,810
<font color="#CCCCCC">then oh there's</font><font color="#E5E5E5"> only one endpoint but</font>

94
00:04:11,220 --> 00:04:17,040
there's a schema definition inside it

95
00:04:12,810 --> 00:04:18,810
that defines what you can query for so

96
00:04:17,040 --> 00:04:21,540
essentially what you have is<font color="#E5E5E5"> kind of</font>

97
00:04:18,810 --> 00:04:23,610
like secret for the<font color="#E5E5E5"> web because the</font>

98
00:04:21,540 --> 00:04:25,500
client can now evolve and change its

99
00:04:23,610 --> 00:04:27,200
queries without the server changing and

100
00:04:25,500 --> 00:04:29,750
that<font color="#E5E5E5"> is the basic idea here</font>

101
00:04:27,200 --> 00:04:33,380
that we want to<font color="#E5E5E5"> have that capability and</font>

102
00:04:29,750 --> 00:04:36,380
here isn't the first example and I<font color="#E5E5E5"> hope</font>

103
00:04:33,380 --> 00:04:39,170
it's readable so what you see on<font color="#CCCCCC"> the</font>

104
00:04:36,380 --> 00:04:41,150
left side is what you actually input as

105
00:04:39,170 --> 00:04:42,740
a graph query query and what you see on

106
00:04:41,150 --> 00:04:45,469
<font color="#E5E5E5">the right side here is the output and</font>

107
00:04:42,740 --> 00:04:47,330
and it's not really tied to Jason but

108
00:04:45,470 --> 00:04:50,660
the folders<font color="#E5E5E5"> that you get Jason out and</font>

109
00:04:47,330 --> 00:04:54,530
what<font color="#E5E5E5"> you see is we have a query over</font>

110
00:04:50,660 --> 00:04:56,990
here<font color="#E5E5E5"> and the query is called</font><font color="#CCCCCC"> Q you can</font>

111
00:04:54,530 --> 00:04:59,000
name<font color="#E5E5E5"> queries su because if you have</font>

112
00:04:56,990 --> 00:05:01,670
multiple queries you might want to refer

113
00:04:59,000 --> 00:05:03,320
to<font color="#E5E5E5"> one query or the other and then we</font>

114
00:05:01,670 --> 00:05:06,500
have a query here where we say we want a

115
00:05:03,320 --> 00:05:09,290
field called<font color="#CCCCCC"> monster and we have an</font>

116
00:05:06,500 --> 00:05:11,810
<font color="#CCCCCC">argument an ID for</font><font color="#E5E5E5"> the particular months</font>

117
00:05:09,290 --> 00:05:13,700
that we want and<font color="#CCCCCC"> and then what we have</font>

118
00:05:11,810 --> 00:05:15,650
in the brackets are the fields inside

119
00:05:13,700 --> 00:05:18,289
the monster object we want in this case

120
00:05:15,650 --> 00:05:20,270
we want the identity of the monster

121
00:05:18,290 --> 00:05:24,170
object and we<font color="#E5E5E5"> want the name of it and</font>

122
00:05:20,270 --> 00:05:26,210
what we get out is an identity which is

123
00:05:24,170 --> 00:05:28,910
essentially base64 encoding of an

124
00:05:26,210 --> 00:05:31,070
<font color="#E5E5E5">internal structure in this case and a</font>

125
00:05:28,910 --> 00:05:34,160
name in this case the particular monster

126
00:05:31,070 --> 00:05:36,230
we're looking at is a coupling it's very

127
00:05:34,160 --> 00:05:37,880
<font color="#E5E5E5">important</font><font color="#CCCCCC"> that clients requests clients</font>

128
00:05:36,230 --> 00:05:40,340
are forced to say<font color="#E5E5E5"> exactly what feels</font>

129
00:05:37,880 --> 00:05:41,960
like want there's<font color="#E5E5E5"> no kind of like in</font>

130
00:05:40,340 --> 00:05:43,609
sequel where you have a star query where

131
00:05:41,960 --> 00:05:46,099
you can say give me everything in this

132
00:05:43,610 --> 00:05:48,470
object that is non-existent in graph

133
00:05:46,100 --> 00:05:52,040
cure for good reason because if you have

134
00:05:48,470 --> 00:05:54,620
that then it's it's hard to extend

135
00:05:52,040 --> 00:05:56,390
things in the future so we force every

136
00:05:54,620 --> 00:05:58,580
client to say<font color="#E5E5E5"> exactly what it wants and</font>

137
00:05:56,390 --> 00:06:00,440
also note that the output structure and

138
00:05:58,580 --> 00:06:02,810
the<font color="#CCCCCC"> input structure that is the query</font>

139
00:06:00,440 --> 00:06:05,690
structure and and the output matches

140
00:06:02,810 --> 00:06:07,670
each other and this this is a deliberate

141
00:06:05,690 --> 00:06:10,820
move and I think it's<font color="#E5E5E5"> really good so so</font>

142
00:06:07,670 --> 00:06:16,550
the<font color="#E5E5E5"> Jason will always reflect what the</font>

143
00:06:10,820 --> 00:06:18,469
query looks like here is the a bit more

144
00:06:16,550 --> 00:06:22,130
<font color="#E5E5E5">involve</font><font color="#CCCCCC"> examples so here we are asking</font>

145
00:06:18,470 --> 00:06:24,560
for a room it has an identity and now

146
00:06:22,130 --> 00:06:28,969
the room has exits which has

147
00:06:24,560 --> 00:06:32,060
multiplicity so what we get out is that

148
00:06:28,970 --> 00:06:33,980
for each exit we want its direction that

149
00:06:32,060 --> 00:06:36,500
is presumably in what direction that

150
00:06:33,980 --> 00:06:39,590
exit is moving and then we run the room

151
00:06:36,500 --> 00:06:40,409
behind that exit so now we are this is

152
00:06:39,590 --> 00:06:42,268
this<font color="#E5E5E5"> is where the knee</font>

153
00:06:40,409 --> 00:06:45,719
<font color="#CCCCCC">graft oil comes into play because it's</font>

154
00:06:42,269 --> 00:06:48,059
now a hierarchical query on on

155
00:06:45,719 --> 00:06:50,459
presumably a graph it doesn't have to be

156
00:06:48,059 --> 00:06:53,069
a graph but it looks a bit like it<font color="#E5E5E5"> and</font>

157
00:06:50,459 --> 00:06:55,050
so here we are<font color="#E5E5E5"> going say give</font><font color="#CCCCCC"> me the</font>

158
00:06:53,069 --> 00:06:56,279
exits in<font color="#CCCCCC"> the room and get for each exit</font>

159
00:06:55,050 --> 00:06:58,080
give me the direction that give me

160
00:06:56,279 --> 00:07:01,199
another room and<font color="#E5E5E5"> that room I want the</font>

161
00:06:58,080 --> 00:07:03,929
identity and its description right so

162
00:07:01,199 --> 00:07:08,729
what I get is<font color="#E5E5E5"> that the room I'm looking</font>

163
00:07:03,929 --> 00:07:13,258
at right now the top room and is I mean

164
00:07:08,729 --> 00:07:15,089
it has its dungeon in entrance and then

165
00:07:13,259 --> 00:07:18,329
<font color="#E5E5E5">you get all the exits and for each exit</font>

166
00:07:15,089 --> 00:07:20,069
you get the direction and<font color="#E5E5E5"> it's and the</font>

167
00:07:18,329 --> 00:07:22,289
inside there you get a room<font color="#E5E5E5"> and the room</font>

168
00:07:20,069 --> 00:07:23,939
has a description and identity and note

169
00:07:22,289 --> 00:07:26,068
<font color="#CCCCCC">that the the thing here is actually</font>

170
00:07:23,939 --> 00:07:30,089
<font color="#E5E5E5">wrong so that's a Miss copy by me</font>

171
00:07:26,069 --> 00:07:31,949
<font color="#E5E5E5">because over here I'm not asking</font><font color="#CCCCCC"> on the</font>

172
00:07:30,089 --> 00:07:34,319
topmost room I'm not<font color="#E5E5E5"> asking for</font><font color="#CCCCCC"> the</font>

173
00:07:31,949 --> 00:07:36,539
description so i made a mistake here in

174
00:07:34,319 --> 00:07:39,089
copying the thing so just<font color="#E5E5E5"> the thing I've</font>

175
00:07:36,539 --> 00:07:42,869
marked here expect<font color="#E5E5E5"> that to that be there</font>

176
00:07:39,089 --> 00:07:45,360
now there's some important concepts here

177
00:07:42,869 --> 00:07:48,990
a schema defines that a field<font color="#E5E5E5"> can be</font>

178
00:07:45,360 --> 00:07:50,969
either a scalar thing or an<font color="#CCCCCC"> object so if</font>

179
00:07:48,990 --> 00:07:54,240
it's an object is just a product of

180
00:07:50,969 --> 00:07:56,219
multiple objects or scalars if it's a

181
00:07:54,240 --> 00:07:58,319
scalar it's just you<font color="#CCCCCC"> know a thing by</font>

182
00:07:56,219 --> 00:08:01,709
itself like a date or a collar or a

183
00:07:58,319 --> 00:08:03,749
string or something like that the schema

184
00:08:01,709 --> 00:08:05,579
also defines where if a field is

185
00:08:03,749 --> 00:08:08,159
composite that is if it's an array of

186
00:08:05,579 --> 00:08:10,769
things this is the case for exits in

187
00:08:08,159 --> 00:08:14,039
this example and it defines if a thing

188
00:08:10,769 --> 00:08:15,899
is not null so you can have fuels that

189
00:08:14,039 --> 00:08:17,759
are supposed to be there and<font color="#E5E5E5"> you can</font>

190
00:08:15,899 --> 00:08:19,439
have feels that high up in solubility so

191
00:08:17,759 --> 00:08:24,360
they can be normal<font color="#E5E5E5"> if you ask for them</font>

192
00:08:19,439 --> 00:08:26,939
so the main points about this system<font color="#CCCCCC"> and</font>

193
00:08:24,360 --> 00:08:29,759
<font color="#E5E5E5">a mite schema or some of this because</font><font color="#CCCCCC"> I</font>

194
00:08:26,939 --> 00:08:32,459
might have said it and the thing<font color="#CCCCCC"> is that</font>

195
00:08:29,759 --> 00:08:35,279
that it's a hierarchy query so you are

196
00:08:32,458 --> 00:08:37,169
essentially querying an object inside

197
00:08:35,279 --> 00:08:38,338
the graph and then you are saying for

198
00:08:37,169 --> 00:08:40,379
that object I don't<font color="#E5E5E5"> want to walk over</font>

199
00:08:38,339 --> 00:08:42,240
here and for that I want to walk over

200
00:08:40,379 --> 00:08:44,399
<font color="#E5E5E5">here and so on and so forth you are</font>

201
00:08:42,240 --> 00:08:45,720
essentially building a your query is

202
00:08:44,399 --> 00:08:48,509
essentially<font color="#E5E5E5"> building a path in the graph</font>

203
00:08:45,720 --> 00:08:50,610
that you want<font color="#E5E5E5"> to kick</font><font color="#CCCCCC"> wrap so look at it</font>

204
00:08:48,509 --> 00:08:52,769
as if<font color="#E5E5E5"> you had a schema that defines a</font>

205
00:08:50,610 --> 00:08:54,329
virtual graph of your system<font color="#E5E5E5"> and then</font>

206
00:08:52,769 --> 00:08:56,459
you essentially do a

207
00:08:54,329 --> 00:08:58,290
querying a subset of that graph so

208
00:08:56,459 --> 00:08:59,998
you're kind of spreading out from it

209
00:08:58,290 --> 00:09:02,399
from an initial point in the graph and

210
00:08:59,999 --> 00:09:04,559
getting all the data back that<font color="#E5E5E5"> is</font>

211
00:09:02,399 --> 00:09:06,660
essentially how it works it's very

212
00:09:04,559 --> 00:09:08,549
important than in this system the front

213
00:09:06,660 --> 00:09:12,629
end is actually the driver of the query

214
00:09:08,549 --> 00:09:16,829
meaning that it enables products and

215
00:09:12,629 --> 00:09:18,749
trick applications the thing is<font color="#E5E5E5"> that if</font>

216
00:09:16,829 --> 00:09:20,670
you<font color="#CCCCCC"> have a client and the guy at the</font>

217
00:09:18,749 --> 00:09:22,949
client wants to say<font color="#E5E5E5"> change something or</font>

218
00:09:20,670 --> 00:09:24,540
want to<font color="#CCCCCC"> make a smaller chains chances</font>

219
00:09:22,949 --> 00:09:27,959
are that you don't have<font color="#E5E5E5"> to do any code</font>

220
00:09:24,540 --> 00:09:29,790
on the server side you if it's a new

221
00:09:27,959 --> 00:09:32,368
field you just at the field if you don't

222
00:09:29,790 --> 00:09:34,170
need a field you just remove it if you

223
00:09:32,369 --> 00:09:36,569
want to grab<font color="#E5E5E5"> some new data you just grab</font>

224
00:09:34,170 --> 00:09:40,860
<font color="#CCCCCC">it if it's possible</font><font color="#E5E5E5"> to grab inside the</font>

225
00:09:36,569 --> 00:09:42,238
inside the graph so so it allows you

226
00:09:40,860 --> 00:09:43,889
which are actually<font color="#CCCCCC"> in certain</font><font color="#E5E5E5"> say in a</font>

227
00:09:42,239 --> 00:09:45,839
certain sense build a front-end

228
00:09:43,889 --> 00:09:47,910
applicators much quicker because once

229
00:09:45,839 --> 00:09:50,369
the the back end things start you know

230
00:09:47,910 --> 00:09:52,769
falling into place then then the front

231
00:09:50,369 --> 00:09:56,429
<font color="#E5E5E5">ends I actually free</font><font color="#CCCCCC"> free dot to just do</font>

232
00:09:52,769 --> 00:09:58,290
the queries they want freely another

233
00:09:56,429 --> 00:10:01,589
important thing is that that<font color="#E5E5E5"> the input</font>

234
00:09:58,290 --> 00:10:03,509
language is completely<font color="#CCCCCC"> tied checked so</font>

235
00:10:01,589 --> 00:10:05,339
that means if you do a career that turns

236
00:10:03,509 --> 00:10:09,239
<font color="#E5E5E5">out</font><font color="#CCCCCC"> to be invalid then it will be</font>

237
00:10:05,339 --> 00:10:10,919
rejected<font color="#E5E5E5"> and and the response is tied</font>

238
00:10:09,239 --> 00:10:12,540
checked as well so if the server does

239
00:10:10,919 --> 00:10:14,160
the same thing and return something that

240
00:10:12,540 --> 00:10:16,829
is invalid<font color="#CCCCCC"> then the contract checker</font>

241
00:10:14,160 --> 00:10:18,269
will say that that's not a good thing so

242
00:10:16,829 --> 00:10:20,638
<font color="#E5E5E5">essentially what graph you'll also</font>

243
00:10:18,269 --> 00:10:23,189
provides is a contract between<font color="#E5E5E5"> the</font>

244
00:10:20,639 --> 00:10:25,709
client and the<font color="#CCCCCC"> server and you don't have</font>

245
00:10:23,189 --> 00:10:28,019
this in typical restful web services

246
00:10:25,709 --> 00:10:29,488
where you have Jason they are you just

247
00:10:28,019 --> 00:10:32,429
giving<font color="#CCCCCC"> blocks back but you don't know</font>

248
00:10:29,489 --> 00:10:35,309
what to<font color="#CCCCCC"> expect in principle</font><font color="#E5E5E5"> and there's</font>

249
00:10:32,429 --> 00:10:38,100
nothing<font color="#E5E5E5"> no place it's documented here</font>

250
00:10:35,309 --> 00:10:41,368
the type the type the types<font color="#CCCCCC"> in the</font>

251
00:10:38,100 --> 00:10:44,610
schema will actually document and what

252
00:10:41,369 --> 00:10:46,919
you can query inside the system so that

253
00:10:44,610 --> 00:10:51,389
in my experience<font color="#CCCCCC"> that</font><font color="#E5E5E5"> has turned out</font><font color="#CCCCCC"> to</font>

254
00:10:46,919 --> 00:10:55,319
be very<font color="#E5E5E5"> very</font><font color="#CCCCCC"> powerful then there's more</font>

255
00:10:51,389 --> 00:10:57,929
points the server will guard against bad

256
00:10:55,319 --> 00:10:59,790
queries<font color="#E5E5E5"> so it has certain validation</font>

257
00:10:57,929 --> 00:11:02,939
steps it'll do so if you do a query that

258
00:10:59,790 --> 00:11:05,129
is completely whacked it'll tell you

259
00:11:02,939 --> 00:11:07,679
that this is probably<font color="#E5E5E5"> a bad query to</font>

260
00:11:05,129 --> 00:11:07,980
make because<font color="#E5E5E5"> it's it's likely that it'll</font>

261
00:11:07,679 --> 00:11:10,470
<font color="#E5E5E5">be</font>

262
00:11:07,980 --> 00:11:12,180
very wrong and if you have very

263
00:11:10,470 --> 00:11:14,700
<font color="#E5E5E5">complicated queries that helps a lot</font>

264
00:11:12,180 --> 00:11:16,890
because now you are being guided on the

265
00:11:14,700 --> 00:11:19,260
way to<font color="#CCCCCC"> actually build your query the</font>

266
00:11:16,890 --> 00:11:21,120
right way it's also introspective in the

267
00:11:19,260 --> 00:11:23,550
sense that decline can actually request

268
00:11:21,120 --> 00:11:26,010
the schema from the server and request

269
00:11:23,550 --> 00:11:28,560
documentation as<font color="#CCCCCC"> well so if you have</font>

270
00:11:26,010 --> 00:11:30,870
restful services if you have used

271
00:11:28,560 --> 00:11:33,630
something like swagga or something like

272
00:11:30,870 --> 00:11:35,100
that to to embed documentation into your

273
00:11:33,630 --> 00:11:36,960
server endpoints well it's built into

274
00:11:35,100 --> 00:11:38,880
graphical you don't have to do that you

275
00:11:36,960 --> 00:11:41,670
<font color="#CCCCCC">just have to add the Edit to the schema</font>

276
00:11:38,880 --> 00:11:43,350
and then as I said one<font color="#CCCCCC"> of the main</font>

277
00:11:41,670 --> 00:11:45,000
points is that<font color="#CCCCCC"> you have backwards and</font>

278
00:11:43,350 --> 00:11:47,460
forwards compatibility in this system

279
00:11:45,000 --> 00:11:49,710
<font color="#E5E5E5">you can deprecated fields from the</font>

280
00:11:47,460 --> 00:11:51,660
schema you don't like anymore but

281
00:11:49,710 --> 00:11:53,040
clients can sale request them even

282
00:11:51,660 --> 00:11:54,689
though they are deprecated<font color="#E5E5E5"> and you can</font>

283
00:11:53,040 --> 00:11:56,339
add new fields to the schema add new

284
00:11:54,690 --> 00:11:58,380
objects to the ski map while you're

285
00:11:56,340 --> 00:12:00,240
working and extending your system<font color="#E5E5E5"> and</font>

286
00:11:58,380 --> 00:12:02,400
the clients<font color="#CCCCCC"> that don't know about that</font>

287
00:12:00,240 --> 00:12:05,460
well they will<font color="#E5E5E5"> not get that data because</font>

288
00:12:02,400 --> 00:12:06,900
<font color="#CCCCCC">they are not part of their queries this</font>

289
00:12:05,460 --> 00:12:09,720
allows you to kind<font color="#E5E5E5"> of like going to the</font>

290
00:12:06,900 --> 00:12:12,060
survey extend the server somewhere with

291
00:12:09,720 --> 00:12:14,370
new data deploy<font color="#E5E5E5"> that into production but</font>

292
00:12:12,060 --> 00:12:16,739
no client is using it yet so it's fine

293
00:12:14,370 --> 00:12:19,470
and then as clients start you know

294
00:12:16,740 --> 00:12:22,710
grabbing<font color="#E5E5E5"> these things well they well</font>

295
00:12:19,470 --> 00:12:28,290
then you can start using them as you<font color="#CCCCCC"> see</font>

296
00:12:22,710 --> 00:12:30,090
fit so there's something<font color="#E5E5E5"> where it's not</font>

297
00:12:28,290 --> 00:12:32,099
very restful for instance there's one

298
00:12:30,090 --> 00:12:34,860
query and then all<font color="#CCCCCC"> the operations you</font>

299
00:12:32,100 --> 00:12:36,480
want to do runs on the server side so

300
00:12:34,860 --> 00:12:38,730
imagine that you had a normal service

301
00:12:36,480 --> 00:12:40,110
where you you know you you have your

302
00:12:38,730 --> 00:12:41,640
client you do a request you get better

303
00:12:40,110 --> 00:12:43,740
response you do another request you get

304
00:12:41,640 --> 00:12:45,360
back a response and now the latency

305
00:12:43,740 --> 00:12:47,340
between your client and the server is

306
00:12:45,360 --> 00:12:49,380
summed up every time is<font color="#E5E5E5"> edited right</font>

307
00:12:47,340 --> 00:12:50,790
here what<font color="#CCCCCC"> you do is you make one</font><font color="#E5E5E5"> curry</font>

308
00:12:49,380 --> 00:12:53,580
to the<font color="#CCCCCC"> soil</font><font color="#E5E5E5"> the servitors a lot of</font>

309
00:12:50,790 --> 00:12:55,260
curious down here<font color="#E5E5E5"> presumably with very</font>

310
00:12:53,580 --> 00:12:58,500
low latency and then you get one

311
00:12:55,260 --> 00:13:00,569
response back and that usually means

312
00:12:58,500 --> 00:13:03,420
that that you get lower latency queries

313
00:13:00,570 --> 00:13:05,850
in this system because what normally you

314
00:13:03,420 --> 00:13:07,199
would say<font color="#CCCCCC"> okay give me a list of</font>

315
00:13:05,850 --> 00:13:09,900
products in<font color="#E5E5E5"> this system and then for</font>

316
00:13:07,200 --> 00:13:11,790
each product list that product that

317
00:13:09,900 --> 00:13:14,430
would be 1 plus<font color="#CCCCCC"> enquiries here you can</font>

318
00:13:11,790 --> 00:13:16,680
do it in one and then people<font color="#E5E5E5"> say</font><font color="#CCCCCC"> ok fine</font>

319
00:13:14,430 --> 00:13:18,300
so now I'm going<font color="#E5E5E5"> to add my special rest</font>

320
00:13:16,680 --> 00:13:20,910
endpoint<font color="#E5E5E5"> that does this on the server</font>

321
00:13:18,300 --> 00:13:21,870
side but that's fine a plate code you

322
00:13:20,910 --> 00:13:23,459
just<font color="#CCCCCC"> added more</font>

323
00:13:21,870 --> 00:13:25,860
the server side that you don't have<font color="#E5E5E5"> to</font>

324
00:13:23,460 --> 00:13:27,720
add and grab your the advantages that

325
00:13:25,860 --> 00:13:30,150
this looping you are writing when you're

326
00:13:27,720 --> 00:13:31,800
doing your kind of composite 1 plus n

327
00:13:30,150 --> 00:13:34,680
query on the server side is built into

328
00:13:31,800 --> 00:13:36,959
the execution engine of gradual so that

329
00:13:34,680 --> 00:13:40,620
means you only have to worry about how

330
00:13:36,960 --> 00:13:42,089
do<font color="#E5E5E5"> I dig out a single object so</font>

331
00:13:40,620 --> 00:13:43,800
essentially<font color="#E5E5E5"> the idea is that you have</font>

332
00:13:42,089 --> 00:13:46,260
you<font color="#CCCCCC"> have a story</font><font color="#E5E5E5"> for this and you also</font>

333
00:13:43,800 --> 00:13:48,270
<font color="#CCCCCC">have a story for how to use caching in</font>

334
00:13:46,260 --> 00:13:50,910
this and do batch operations on<font color="#CCCCCC"> the back</font>

335
00:13:48,270 --> 00:13:52,350
end so<font color="#E5E5E5"> you can go to one grab on the</font>

336
00:13:50,910 --> 00:13:55,890
database as well<font color="#E5E5E5"> in the back end and</font>

337
00:13:52,350 --> 00:14:02,279
this even further lowers the the query

338
00:13:55,890 --> 00:14:04,439
latency in the system I'm going<font color="#E5E5E5"> to talk</font>

339
00:14:02,279 --> 00:14:06,960
<font color="#E5E5E5">a bit about perhaps one of the most</font>

340
00:14:04,440 --> 00:14:10,770
powerful things of of graphical now

341
00:14:06,960 --> 00:14:13,050
which is<font color="#E5E5E5"> the concept of a fragment so if</font>

342
00:14:10,770 --> 00:14:17,490
you looked at if you<font color="#CCCCCC"> look at this query</font>

343
00:14:13,050 --> 00:14:19,859
I head<font color="#E5E5E5"> up here you can see</font><font color="#CCCCCC"> that there's</font>

344
00:14:17,490 --> 00:14:21,630
a lot of things<font color="#E5E5E5"> in it and it's it's it's</font>

345
00:14:19,860 --> 00:14:23,190
complicated and<font color="#E5E5E5"> what you often want to</font>

346
00:14:21,630 --> 00:14:26,790
do is you<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> kind of excise the</font>

347
00:14:23,190 --> 00:14:28,350
fields you want from a given object and

348
00:14:26,790 --> 00:14:30,270
the way you do that is by using these

349
00:14:28,350 --> 00:14:33,330
fragments so let<font color="#E5E5E5"> me move down to that</font>

350
00:14:30,270 --> 00:14:35,370
the concept here<font color="#CCCCCC"> is that we have this</font>

351
00:14:33,330 --> 00:14:37,589
monster fragment we have a declared here

352
00:14:35,370 --> 00:14:41,130
and it says the monster fragment is on

353
00:14:37,589 --> 00:14:43,890
the object type monster and it requires

354
00:14:41,130 --> 00:14:45,810
it requests the identity the name and

355
00:14:43,890 --> 00:14:49,890
<font color="#E5E5E5">the hit points of that given monster and</font>

356
00:14:45,810 --> 00:14:52,140
so<font color="#E5E5E5"> now when you have a query like this</font>

357
00:14:49,890 --> 00:14:55,050
one you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> just refer to</font><font color="#CCCCCC"> that monster</font>

358
00:14:52,140 --> 00:14:57,750
<font color="#E5E5E5">frac and it expands into the fields that</font>

359
00:14:55,050 --> 00:14:59,969
the months of right contains so this

360
00:14:57,750 --> 00:15:01,380
allows you to to<font color="#E5E5E5"> kind of like if you</font>

361
00:14:59,970 --> 00:15:03,000
have in this case where<font color="#CCCCCC"> you use the</font>

362
00:15:01,380 --> 00:15:05,040
monster frac in multiple places in the

363
00:15:03,000 --> 00:15:09,660
query you can now move that factor that

364
00:15:05,040 --> 00:15:11,069
out into a separate fragment and so<font color="#E5E5E5"> this</font>

365
00:15:09,660 --> 00:15:13,680
<font color="#CCCCCC">is one of</font><font color="#E5E5E5"> the important uses of</font>

366
00:15:11,070 --> 00:15:17,160
fragments but they use for more things

367
00:15:13,680 --> 00:15:19,680
in the system mess<font color="#CCCCCC"> we'll see and thing</font>

368
00:15:17,160 --> 00:15:22,020
is ice except it allows to do concise

369
00:15:19,680 --> 00:15:24,630
reference to feel so you avoid having to

370
00:15:22,020 --> 00:15:27,839
repeat yourself all the time but it also

371
00:15:24,630 --> 00:15:31,010
provides essentially down casting in the

372
00:15:27,839 --> 00:15:33,080
sense that in this room

373
00:15:31,010 --> 00:15:35,569
query here where we have<font color="#E5E5E5"> some contents</font>

374
00:15:33,080 --> 00:15:38,210
the contents are not necessarily<font color="#E5E5E5"> a</font>

375
00:15:35,570 --> 00:15:41,000
monster because the room might<font color="#CCCCCC"> contains</font>

376
00:15:38,210 --> 00:15:42,830
<font color="#CCCCCC">a treasure or it might contain other</font>

377
00:15:41,000 --> 00:15:45,710
things like players player characters

378
00:15:42,830 --> 00:15:47,810
and stuff but<font color="#E5E5E5"> this actually says that in</font>

379
00:15:45,710 --> 00:15:50,000
this room if<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is contents in there</font>

380
00:15:47,810 --> 00:15:54,500
and the contents happens to be a monster

381
00:15:50,000 --> 00:15:56,720
then output it otherwise gibbet so the

382
00:15:54,500 --> 00:15:59,030
fragment here also works as kind of a

383
00:15:56,720 --> 00:16:01,610
selector that<font color="#CCCCCC"> can select among multiple</font>

384
00:15:59,030 --> 00:16:03,980
types and say<font color="#E5E5E5"> I only I'm only interested</font>

385
00:16:01,610 --> 00:16:06,110
in this if it's in<font color="#E5E5E5"> particular a monster</font>

386
00:16:03,980 --> 00:16:08,990
and the reason that's powerful is

387
00:16:06,110 --> 00:16:10,520
because suppose that and suppose that<font color="#CCCCCC"> I</font>

388
00:16:08,990 --> 00:16:13,190
had a client<font color="#E5E5E5"> that didn't know about a</font>

389
00:16:10,520 --> 00:16:16,010
treasure in rooms yet but knew about

390
00:16:13,190 --> 00:16:17,840
monsters well if the if the if the

391
00:16:16,010 --> 00:16:20,510
client uses this particular query and we

392
00:16:17,840 --> 00:16:22,760
laid on air treasures into the room<font color="#E5E5E5"> and</font>

393
00:16:20,510 --> 00:16:24,500
the concept of treasures into the system

394
00:16:22,760 --> 00:16:27,770
well this particular client doesn't know

395
00:16:24,500 --> 00:16:30,170
about<font color="#CCCCCC"> it so</font><font color="#E5E5E5"> it won't get them so this is</font>

396
00:16:27,770 --> 00:16:34,370
<font color="#E5E5E5">where you begin to have this ability to</font>

397
00:16:30,170 --> 00:16:37,670
do you know backwards and forwards

398
00:16:34,370 --> 00:16:40,670
compatibility in your in your API

399
00:16:37,670 --> 00:16:43,969
without having to change to go back and

400
00:16:40,670 --> 00:16:45,709
<font color="#CCCCCC">change the existing clients and if you</font>

401
00:16:43,970 --> 00:16:49,100
have ever tried<font color="#E5E5E5"> to get you know</font>

402
00:16:45,710 --> 00:16:52,250
applications through on iOS and Android

403
00:16:49,100 --> 00:16:54,050
and see and if you know how how how long

404
00:16:52,250 --> 00:16:56,150
the uptake of upgrading for people

405
00:16:54,050 --> 00:16:57,560
happens to be then you know that<font color="#E5E5E5"> once</font>

406
00:16:56,150 --> 00:16:59,600
you have put something out there it'll

407
00:16:57,560 --> 00:17:01,699
never ever go away I mean there's always

408
00:16:59,600 --> 00:17:03,200
some clients somewhere that is using one

409
00:17:01,700 --> 00:17:06,020
of the older versions of your of your

410
00:17:03,200 --> 00:17:08,360
API right but but the idea here is that

411
00:17:06,020 --> 00:17:10,520
you can<font color="#E5E5E5"> build it into the system there's</font>

412
00:17:08,359 --> 00:17:13,129
an anecdote from facebook<font color="#E5E5E5"> where they did</font>

413
00:17:10,520 --> 00:17:15,949
this in 2012 and they<font color="#E5E5E5"> claim that they</font>

414
00:17:13,130 --> 00:17:18,199
haven't had to actually make a major

415
00:17:15,949 --> 00:17:22,850
change that is not backwards compatible

416
00:17:18,199 --> 00:17:25,579
yet which is<font color="#CCCCCC"> a pretty impressive claim</font>

417
00:17:22,849 --> 00:17:30,590
given that it's faceboook i mean the RF

418
00:17:25,579 --> 00:17:32,570
is big<font color="#E5E5E5"> i guess so so the idea</font><font color="#CCCCCC"> here is</font>

419
00:17:30,590 --> 00:17:33,800
that this<font color="#CCCCCC"> is also</font><font color="#E5E5E5"> used not only is</font><font color="#CCCCCC"> it</font>

420
00:17:32,570 --> 00:17:36,230
used in order<font color="#E5E5E5"> to factor out</font>

421
00:17:33,800 --> 00:17:38,210
commonalities in your queries but<font color="#E5E5E5"> it is</font>

422
00:17:36,230 --> 00:17:44,570
also used in<font color="#E5E5E5"> order to kind of pick out</font>

423
00:17:38,210 --> 00:17:44,970
stuff in the graph the way it<font color="#CCCCCC"> works is</font>

424
00:17:44,570 --> 00:17:48,389
that

425
00:17:44,970 --> 00:17:49,590
have so as I said graphs primarily

426
00:17:48,390 --> 00:17:53,309
contains two things that contain

427
00:17:49,590 --> 00:17:55,168
something called and you know objects

428
00:17:53,309 --> 00:17:56,970
and contains galas<font color="#CCCCCC"> and side objects so</font>

429
00:17:55,169 --> 00:17:59,070
objects either contains objects or other

430
00:17:56,970 --> 00:18:01,590
scalars but in the schema we have

431
00:17:59,070 --> 00:18:03,299
different things we can define in order

432
00:18:01,590 --> 00:18:06,240
to make<font color="#E5E5E5"> things easier for us and</font>

433
00:18:03,299 --> 00:18:08,429
specifically what we want to try<font color="#E5E5E5"> to have</font>

434
00:18:06,240 --> 00:18:11,730
is a way to hit a hitter<font color="#CCCCCC"> brokenness</font>

435
00:18:08,429 --> 00:18:14,039
queries in the system so<font color="#CCCCCC"> what if I have</font>

436
00:18:11,730 --> 00:18:16,890
<font color="#CCCCCC">this example here where I have my</font>

437
00:18:14,039 --> 00:18:19,950
contents and the problem<font color="#E5E5E5"> is that it can</font>

438
00:18:16,890 --> 00:18:22,169
be monsters<font color="#CCCCCC"> Tricia's or players or</font>

439
00:18:19,950 --> 00:18:23,669
different kind of things so this is<font color="#E5E5E5"> not</font>

440
00:18:22,169 --> 00:18:25,380
<font color="#E5E5E5">homogeneous and if you have a normal</font>

441
00:18:23,669 --> 00:18:27,450
<font color="#E5E5E5">type system the problem is the contents</font>

442
00:18:25,380 --> 00:18:28,919
would only be a single<font color="#E5E5E5"> thing so we need</font>

443
00:18:27,450 --> 00:18:30,840
some way in the type system to be able

444
00:18:28,919 --> 00:18:33,929
to say well this contents can be

445
00:18:30,840 --> 00:18:36,600
different kinds<font color="#E5E5E5"> of things at the same</font>

446
00:18:33,929 --> 00:18:38,549
time and this<font color="#E5E5E5"> is where the concept of</font>

447
00:18:36,600 --> 00:18:42,480
interfaces and unions in the<font color="#E5E5E5"> language</font>

448
00:18:38,549 --> 00:18:44,490
crops up so the<font color="#E5E5E5"> idea is that an</font>

449
00:18:42,480 --> 00:18:46,110
interface defines<font color="#CCCCCC"> this says okay so</font><font color="#E5E5E5"> I</font>

450
00:18:44,490 --> 00:18:47,760
<font color="#CCCCCC">have that object type and that object</font>

451
00:18:46,110 --> 00:18:50,370
type and<font color="#CCCCCC"> that object type but they all</font>

452
00:18:47,760 --> 00:18:52,710
have this these fuels in common so they

453
00:18:50,370 --> 00:18:54,689
all kind of implement this interface it

454
00:18:52,710 --> 00:18:56,730
<font color="#E5E5E5">is not a subtyping hierarchy so it's not</font>

455
00:18:54,690 --> 00:19:01,590
inheritance it's just interface

456
00:18:56,730 --> 00:19:05,400
implementation and what what you use it

457
00:19:01,590 --> 00:19:09,240
for is to kind of<font color="#E5E5E5"> like pick out</font>

458
00:19:05,400 --> 00:19:12,750
something<font color="#CCCCCC"> that is you know common to a</font>

459
00:19:09,240 --> 00:19:15,510
lot<font color="#E5E5E5"> of things so for instance both both</font>

460
00:19:12,750 --> 00:19:18,330
non-player characters player characters

461
00:19:15,510 --> 00:19:19,980
and monsters might have hit points in

462
00:19:18,330 --> 00:19:23,399
common say they might all have hit

463
00:19:19,980 --> 00:19:26,370
points and hence it might make sense to

464
00:19:23,400 --> 00:19:28,380
kind of extract that notion of something

465
00:19:26,370 --> 00:19:30,149
<font color="#CCCCCC">that can battle against each other into</font>

466
00:19:28,380 --> 00:19:32,909
an interface so you could<font color="#CCCCCC"> have an</font>

467
00:19:30,150 --> 00:19:35,909
interface called a competant say that

468
00:19:32,909 --> 00:19:37,950
that that you<font color="#CCCCCC"> induce when you have two</font>

469
00:19:35,909 --> 00:19:39,960
things competing against each other

470
00:19:37,950 --> 00:19:43,380
inside the this dungeon that<font color="#CCCCCC"> we are</font>

471
00:19:39,960 --> 00:19:45,480
building up here so this<font color="#E5E5E5"> is what you</font>

472
00:19:43,380 --> 00:19:47,880
<font color="#E5E5E5">would use interfaces for then there's</font>

473
00:19:45,480 --> 00:19:49,890
unions which are that<font color="#E5E5E5"> I just have a</font>

474
00:19:47,880 --> 00:19:53,340
bunch of<font color="#E5E5E5"> RPX and they have no feels in</font>

475
00:19:49,890 --> 00:19:57,910
common so if you're a type theorist this

476
00:19:53,340 --> 00:20:00,879
is kind of like 8a some type but not not

477
00:19:57,910 --> 00:20:03,640
precisely<font color="#CCCCCC"> it's on type bells attack but</font>

478
00:20:00,880 --> 00:20:05,440
it's kind of hidden so this allows you

479
00:20:03,640 --> 00:20:07,120
to do say you<font color="#E5E5E5"> have something that has</font>

480
00:20:05,440 --> 00:20:08,800
nothing<font color="#CCCCCC"> in common with everything else</font>

481
00:20:07,120 --> 00:20:11,709
which is<font color="#E5E5E5"> the case in the room I mean</font>

482
00:20:08,800 --> 00:20:13,720
when we're<font color="#CCCCCC"> looking at the constancy in</font>

483
00:20:11,710 --> 00:20:15,190
the room we might say well it's<font color="#E5E5E5"> okay</font>

484
00:20:13,720 --> 00:20:17,020
that there's monsters in there but

485
00:20:15,190 --> 00:20:19,570
monsters have nothing in common with a

486
00:20:17,020 --> 00:20:21,520
treasure so they have no fields in

487
00:20:19,570 --> 00:20:22,870
common perhaps they have<font color="#E5E5E5"> an identity in</font>

488
00:20:21,520 --> 00:20:24,670
common so there might be some kind of

489
00:20:22,870 --> 00:20:27,370
<font color="#E5E5E5">note object that they both implement but</font>

490
00:20:24,670 --> 00:20:29,080
otherwise they have<font color="#CCCCCC"> nothing in common so</font>

491
00:20:27,370 --> 00:20:30,790
we can<font color="#E5E5E5"> get away with that by saying well</font>

492
00:20:29,080 --> 00:20:33,370
the constancy are just a thing and

493
00:20:30,790 --> 00:20:35,800
things are union of say monsters and

494
00:20:33,370 --> 00:20:39,129
player characters and treasure and

495
00:20:35,800 --> 00:20:42,010
whatever<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can have in in your in your</font>

496
00:20:39,130 --> 00:20:46,270
room right so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the way you kind</font>

497
00:20:42,010 --> 00:20:49,120
of<font color="#E5E5E5"> like get to do hitter okay knows</font>

498
00:20:46,270 --> 00:20:51,010
things and in the query<font color="#CCCCCC"> an interestingly</font>

499
00:20:49,120 --> 00:20:53,590
sequel<font color="#CCCCCC"> hat doesn't</font><font color="#E5E5E5"> really have this</font>

500
00:20:51,010 --> 00:20:55,780
which is one of the reasons why it's

501
00:20:53,590 --> 00:20:58,120
hard to do these<font color="#E5E5E5"> kinds of things in</font>

502
00:20:55,780 --> 00:21:00,580
sequel if you ever tried doing

503
00:20:58,120 --> 00:21:03,310
essentially is some in sequel where

504
00:21:00,580 --> 00:21:05,290
things can be either that or that you

505
00:21:03,310 --> 00:21:07,750
get into<font color="#E5E5E5"> trouble and there are four ways</font>

506
00:21:05,290 --> 00:21:12,850
you can solve it and all of<font color="#E5E5E5"> them have</font>

507
00:21:07,750 --> 00:21:14,980
disadvantages that are really hurtful so

508
00:21:12,850 --> 00:21:16,780
one of the specifics that they try to

509
00:21:14,980 --> 00:21:19,390
solve when they built graph cure was

510
00:21:16,780 --> 00:21:21,160
that they needed a way<font color="#CCCCCC"> a story for</font>

511
00:21:19,390 --> 00:21:22,840
handling these kind of if<font color="#E5E5E5"> he saw he</font>

512
00:21:21,160 --> 00:21:25,420
knows queries because they're happening

513
00:21:22,840 --> 00:21:27,010
all the time in practice it's<font color="#E5E5E5"> very often</font>

514
00:21:25,420 --> 00:21:28,510
that you<font color="#E5E5E5"> have something</font><font color="#CCCCCC"> a one type and</font>

515
00:21:27,010 --> 00:21:32,110
something of another type and they can

516
00:21:28,510 --> 00:21:34,570
commingle inside the system yet our

517
00:21:32,110 --> 00:21:38,439
older systems have had no way to handle

518
00:21:34,570 --> 00:21:43,750
that which is<font color="#E5E5E5"> kind of weak so they have</font>

519
00:21:38,440 --> 00:21:46,150
built that in then you get<font color="#CCCCCC"> to wear it</font>

520
00:21:43,750 --> 00:21:48,820
because now we kind of like at another

521
00:21:46,150 --> 00:21:52,420
layer so when you have<font color="#CCCCCC"> a query q it can</font>

522
00:21:48,820 --> 00:21:55,689
take parameters so here<font color="#E5E5E5"> we have a query</font>

523
00:21:52,420 --> 00:21:59,620
like before on the monster we<font color="#CCCCCC"> ask for</font>

524
00:21:55,690 --> 00:22:02,470
its fragment and now this part here says

525
00:21:59,620 --> 00:22:03,820
wed well the particular ID that we are

526
00:22:02,470 --> 00:22:06,400
<font color="#E5E5E5">going to supply is coming from the</font>

527
00:22:03,820 --> 00:22:08,290
<font color="#E5E5E5">outside so now it's essentially a</font>

528
00:22:06,400 --> 00:22:11,360
function the<font color="#E5E5E5"> Valkyrie is now a function</font>

529
00:22:08,290 --> 00:22:13,250
or the identity which we provide and

530
00:22:11,360 --> 00:22:17,030
then with the query will run and down

531
00:22:13,250 --> 00:22:18,830
here when we<font color="#E5E5E5"> were before we had a string</font>

532
00:22:17,030 --> 00:22:23,120
here now we have the variable reference

533
00:22:18,830 --> 00:22:26,120
to to our parameter from<font color="#E5E5E5"> up here so now</font>

534
00:22:23,120 --> 00:22:27,469
we can reuse<font color="#CCCCCC"> q to query different kinds</font>

535
00:22:26,120 --> 00:22:28,969
<font color="#E5E5E5">of monsters and of course we can add</font>

536
00:22:27,470 --> 00:22:30,679
more and more it's like<font color="#CCCCCC"> a function we</font>

537
00:22:28,970 --> 00:22:35,360
just add more more parameters into it

538
00:22:30,679 --> 00:22:38,299
note that<font color="#CCCCCC"> the !</font><font color="#E5E5E5"> IAM says that this is an</font>

539
00:22:35,360 --> 00:22:40,760
unknowable value meaning that you have

540
00:22:38,299 --> 00:22:42,650
supplied it's not allowed to not supply

541
00:22:40,760 --> 00:22:46,820
monster ID to this query that would be a

542
00:22:42,650 --> 00:22:48,500
<font color="#E5E5E5">mistake so what you usually end up with</font>

543
00:22:46,820 --> 00:22:50,720
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you end up with a query document</font>

544
00:22:48,500 --> 00:22:54,049
for your whole application one query

545
00:22:50,720 --> 00:22:56,000
document and it<font color="#E5E5E5"> contains like 60</font><font color="#CCCCCC"> or 100</font>

546
00:22:54,049 --> 00:22:59,389
maybe 200 different queries and they are

547
00:22:56,000 --> 00:23:02,179
<font color="#E5E5E5">parameterize like this and then when you</font>

548
00:22:59,390 --> 00:23:03,950
actually do your query you say well I

549
00:23:02,179 --> 00:23:05,510
<font color="#CCCCCC">want that query document and you have a</font>

550
00:23:03,950 --> 00:23:08,150
unique reference for that query document

551
00:23:05,510 --> 00:23:09,950
I want that<font color="#E5E5E5"> query inside it and then I</font>

552
00:23:08,150 --> 00:23:11,840
want<font color="#E5E5E5"> these parameters going into that</font>

553
00:23:09,950 --> 00:23:14,540
Korean back you get the answer<font color="#CCCCCC"> right and</font>

554
00:23:11,840 --> 00:23:17,659
this is where you start seeing where the

555
00:23:14,540 --> 00:23:19,040
security<font color="#CCCCCC"> in the system is because what</font>

556
00:23:17,660 --> 00:23:20,960
you're<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> you're staging environment</font>

557
00:23:19,040 --> 00:23:22,970
is<font color="#CCCCCC"> that you build up this query document</font>

558
00:23:20,960 --> 00:23:24,710
and you take its checksum and now you

559
00:23:22,970 --> 00:23:27,860
say when it's in production you cannot

560
00:23:24,710 --> 00:23:32,120
<font color="#CCCCCC">change it because you lock it down by</font>

561
00:23:27,860 --> 00:23:33,559
that checksum so what happens is once

562
00:23:32,120 --> 00:23:36,290
you are in production you can<font color="#E5E5E5"> only do</font>

563
00:23:33,559 --> 00:23:38,240
the queries that you pre declared in

564
00:23:36,290 --> 00:23:40,940
your staging environment that are

565
00:23:38,240 --> 00:23:43,040
allowed so even though you have all this

566
00:23:40,940 --> 00:23:45,410
power when you're developing the system

567
00:23:43,040 --> 00:23:48,799
you have none of<font color="#CCCCCC"> this power when</font><font color="#E5E5E5"> you're</font>

568
00:23:45,410 --> 00:23:50,690
<font color="#E5E5E5">actually running and this is a security</font>

569
00:23:48,799 --> 00:23:52,220
trade-off we want right we want to have

570
00:23:50,690 --> 00:23:54,590
the<font color="#CCCCCC"> freedom to build new stuff quickly</font>

571
00:23:52,220 --> 00:23:57,770
but then we need<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lockdown</font><font color="#E5E5E5"> once we hit</font>

572
00:23:54,590 --> 00:24:01,189
production and there's also another very

573
00:23:57,770 --> 00:24:06,410
good argument here which is<font color="#E5E5E5"> that you can</font>

574
00:24:01,190 --> 00:24:08,390
use this in<font color="#E5E5E5"> order to you</font><font color="#CCCCCC"> know the attack</font>

575
00:24:06,410 --> 00:24:11,450
vector the system gets that much smaller

576
00:24:08,390 --> 00:24:14,360
when<font color="#CCCCCC"> you do this so it arguably</font><font color="#E5E5E5"> is more</font>

577
00:24:11,450 --> 00:24:17,960
safer and how do you change things well

578
00:24:14,360 --> 00:24:22,129
there's a concept called mutation so in

579
00:24:17,960 --> 00:24:24,770
this case we are mutating we are adding

580
00:24:22,130 --> 00:24:26,930
a new monster by calling

581
00:24:24,770 --> 00:24:28,940
helper here we essentially calling the

582
00:24:26,930 --> 00:24:30,950
function<font color="#E5E5E5"> introduced monster and it takes</font>

583
00:24:28,940 --> 00:24:32,780
an input object here which is then

584
00:24:30,950 --> 00:24:34,280
looking a bit like<font color="#CCCCCC"> adjacent thing so</font>

585
00:24:32,780 --> 00:24:38,840
here we<font color="#CCCCCC"> are actually adding a succubus</font>

586
00:24:34,280 --> 00:24:42,260
with 24 hit points and I<font color="#E5E5E5"> think it's</font>

587
00:24:38,840 --> 00:24:45,350
purple and what you get<font color="#E5E5E5"> back then is</font>

588
00:24:42,260 --> 00:24:47,090
that then we have a rule here that the

589
00:24:45,350 --> 00:24:49,159
client rotation idea is just reflected

590
00:24:47,090 --> 00:24:51,230
so we can see that it's this particular

591
00:24:49,160 --> 00:24:52,910
<font color="#E5E5E5">client from the way from or this</font>

592
00:24:51,230 --> 00:24:55,580
<font color="#E5E5E5">particular mutation from</font><font color="#CCCCCC"> the client</font><font color="#E5E5E5"> side</font>

593
00:24:52,910 --> 00:24:57,290
and then we<font color="#E5E5E5"> ask for the idea name and</font>

594
00:24:55,580 --> 00:25:00,470
out comes the monster here and it gets a

595
00:24:57,290 --> 00:25:02,629
new ID that was just generated for us so

596
00:25:00,470 --> 00:25:04,280
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> you do mutations and they</font>

597
00:25:02,630 --> 00:25:06,290
look a lot like queries internally they

598
00:25:04,280 --> 00:25:08,540
implemented exactly like queries except

599
00:25:06,290 --> 00:25:11,570
for<font color="#CCCCCC"> one thing they're not parallelizable</font>

600
00:25:08,540 --> 00:25:13,460
of course when you're doing multiple

601
00:25:11,570 --> 00:25:14,899
mutations which you could by adding yet

602
00:25:13,460 --> 00:25:17,090
another<font color="#CCCCCC"> introduced months to below this</font>

603
00:25:14,900 --> 00:25:19,280
one then they run in series in series

604
00:25:17,090 --> 00:25:21,649
because otherwise you would have race

605
00:25:19,280 --> 00:25:28,220
conditions but otherwise they are

606
00:25:21,650 --> 00:25:30,650
exactly like a you<font color="#CCCCCC"> know a query so what</font>

607
00:25:28,220 --> 00:25:32,060
you've seen on till now is that I'm kind

608
00:25:30,650 --> 00:25:34,850
of building up a dungeon scheme a year

609
00:25:32,060 --> 00:25:37,370
and as a s'more it's<font color="#E5E5E5"> actually one of my</font>

610
00:25:34,850 --> 00:25:39,230
test cases that I<font color="#E5E5E5"> just you know added</font>

611
00:25:37,370 --> 00:25:41,360
more stuff too so it's funnier<font color="#CCCCCC"> to work</font>

612
00:25:39,230 --> 00:25:42,650
with there's a graphical sort of<font color="#E5E5E5"> running</font>

613
00:25:41,360 --> 00:25:47,570
in<font color="#E5E5E5"> the bag and Britain another line for</font>

614
00:25:42,650 --> 00:25:49,790
this that I wrote from scratch because

615
00:25:47,570 --> 00:25:51,800
there were no thing and the dungeon

616
00:25:49,790 --> 00:25:54,320
itself is actually backed by the<font color="#CCCCCC"> Mesha</font>

617
00:25:51,800 --> 00:25:56,000
database in our<font color="#E5E5E5"> line just to make the</font>

618
00:25:54,320 --> 00:25:57,500
point that it doesn't necessarily<font color="#CCCCCC"> have</font>

619
00:25:56,000 --> 00:26:00,110
to be a graph database the back side

620
00:25:57,500 --> 00:26:02,030
this is<font color="#E5E5E5"> just a standard it's not a</font>

621
00:26:00,110 --> 00:26:04,550
sequel database but the schemas is into

622
00:26:02,030 --> 00:26:08,660
<font color="#E5E5E5">the sequel like so and so that that is</font>

623
00:26:04,550 --> 00:26:10,310
another way of doing<font color="#CCCCCC"> it and I have a</font>

624
00:26:08,660 --> 00:26:13,700
demo time and now<font color="#E5E5E5"> it's famous last words</font>

625
00:26:10,310 --> 00:26:16,159
because it might fail so this<font color="#E5E5E5"> is</font>

626
00:26:13,700 --> 00:26:19,250
actually the interface you have to graph

627
00:26:16,160 --> 00:26:21,560
girl if you if you start working with<font color="#CCCCCC"> it</font>

628
00:26:19,250 --> 00:26:23,030
so what happens is that in JavaScript

629
00:26:21,560 --> 00:26:24,919
they build a complete interface to this

630
00:26:23,030 --> 00:26:27,230
thing where<font color="#E5E5E5"> the use the introspection</font>

631
00:26:24,920 --> 00:26:28,820
features of the underlying graft your

632
00:26:27,230 --> 00:26:31,190
server instance<font color="#CCCCCC"> you're pointing to and</font>

633
00:26:28,820 --> 00:26:33,710
grabbing out all the data so this is

634
00:26:31,190 --> 00:26:35,990
interactive if you go over<font color="#E5E5E5"> here you can</font>

635
00:26:33,710 --> 00:26:37,820
get the documentation you can<font color="#E5E5E5"> look at</font>

636
00:26:35,990 --> 00:26:38,520
the schema you can<font color="#CCCCCC"> ask for what is the</font>

637
00:26:37,820 --> 00:26:41,280
possible queer

638
00:26:38,520 --> 00:26:43,620
<font color="#CCCCCC">is you can say well we can query for</font>

639
00:26:41,280 --> 00:26:46,530
monsters and rooms and its type right if

640
00:26:43,620 --> 00:26:48,659
we pick one here we get in we<font color="#E5E5E5"> can we can</font>

641
00:26:46,530 --> 00:26:51,540
look down<font color="#CCCCCC"> and see what monster ID to</font>

642
00:26:48,660 --> 00:26:53,880
retrieve we get back a monster and here

643
00:26:51,540 --> 00:26:55,740
I haven't<font color="#E5E5E5"> really documented them but</font>

644
00:26:53,880 --> 00:26:57,600
<font color="#E5E5E5">that's the idea so we're going here you</font>

645
00:26:55,740 --> 00:26:59,310
can see how many hit points does<font color="#E5E5E5"> this</font>

646
00:26:57,600 --> 00:27:01,560
monster ham and so on so<font color="#CCCCCC"> you have this</font>

647
00:26:59,310 --> 00:27:05,490
ability<font color="#E5E5E5"> to automatically detect get</font>

648
00:27:01,560 --> 00:27:07,200
documentation for your API but this

649
00:27:05,490 --> 00:27:09,600
query interface uses it for more things

650
00:27:07,200 --> 00:27:13,170
<font color="#CCCCCC">like just that because it will go here</font>

651
00:27:09,600 --> 00:27:15,750
and we start adding say a query it does

652
00:27:13,170 --> 00:27:18,030
out<font color="#E5E5E5"> auto completion so if I say I want a</font>

653
00:27:15,750 --> 00:27:19,860
query here and I<font color="#E5E5E5"> ask here what can i get</font>

654
00:27:18,030 --> 00:27:22,260
it's not also completing on the

655
00:27:19,860 --> 00:27:24,780
introspection thing right so if we<font color="#E5E5E5"> want</font>

656
00:27:22,260 --> 00:27:27,720
a say a monster here just to take an

657
00:27:24,780 --> 00:27:32,970
example and now I don't<font color="#E5E5E5"> have an ID but</font>

658
00:27:27,720 --> 00:27:34,620
who cares let me just add some ID so now

659
00:27:32,970 --> 00:27:38,760
we<font color="#E5E5E5"> are in one so we can ask what are the</font>

660
00:27:34,620 --> 00:27:40,709
possible types there right and so we

661
00:27:38,760 --> 00:27:43,170
might want it so<font color="#CCCCCC"> 8p here is</font><font color="#E5E5E5"> actually a</font>

662
00:27:40,710 --> 00:27:46,770
deprecated field for hit points so this

663
00:27:43,170 --> 00:27:49,320
<font color="#CCCCCC">is an example of moving ahead so we</font>

664
00:27:46,770 --> 00:27:52,379
wanted hit points we might want its

665
00:27:49,320 --> 00:27:54,899
inventory<font color="#E5E5E5"> okay so what</font><font color="#CCCCCC"> are the possible</font>

666
00:27:52,380 --> 00:27:56,580
things in here well now there's two ways

667
00:27:54,900 --> 00:27:58,170
you can define fragments one is that<font color="#E5E5E5"> you</font>

668
00:27:56,580 --> 00:27:59,639
can give<font color="#CCCCCC"> them a name but you can also do</font>

669
00:27:58,170 --> 00:28:01,710
fragments in line so you can say like

670
00:27:59,640 --> 00:28:05,790
this<font color="#E5E5E5"> okay so these things are possible</font>

671
00:28:01,710 --> 00:28:07,680
here right so the inventory can

672
00:28:05,790 --> 00:28:09,990
presumably contain rooms that might not

673
00:28:07,680 --> 00:28:12,030
<font color="#CCCCCC">be</font><font color="#E5E5E5"> what you want but in this case it can</font>

674
00:28:09,990 --> 00:28:13,560
so<font color="#E5E5E5"> it might be that you have an item in</font>

675
00:28:12,030 --> 00:28:15,930
there<font color="#E5E5E5"> okay so what are</font><font color="#CCCCCC"> the possibilities</font>

676
00:28:13,560 --> 00:28:19,649
of items well I want the name of that

677
00:28:15,930 --> 00:28:24,150
<font color="#E5E5E5">item and I want its weight right so this</font>

678
00:28:19,650 --> 00:28:26,850
is<font color="#CCCCCC"> how you build up curries and I</font>

679
00:28:24,150 --> 00:28:28,860
prepared a<font color="#CCCCCC"> couple of courtesy as you can</font>

680
00:28:26,850 --> 00:28:31,260
see examples of<font color="#CCCCCC"> father work this</font>

681
00:28:28,860 --> 00:28:33,179
introduces a new item right so I'm

682
00:28:31,260 --> 00:28:36,420
trying to add a sort here of some kind

683
00:28:33,180 --> 00:28:38,430
that<font color="#CCCCCC"> has a certain weight so if i go up</font>

684
00:28:36,420 --> 00:28:40,230
here you get all the possible things you

685
00:28:38,430 --> 00:28:42,570
can run in this query document right now

686
00:28:40,230 --> 00:28:46,020
so we can<font color="#E5E5E5"> say well run the introduced</font>

687
00:28:42,570 --> 00:28:48,659
item query and then it fails because

688
00:28:46,020 --> 00:28:50,080
something is wrong inside my system so

689
00:28:48,660 --> 00:28:52,840
let<font color="#E5E5E5"> me just</font>

690
00:28:50,080 --> 00:28:58,210
and restarted and see if I can get<font color="#E5E5E5"> it to</font>

691
00:28:52,840 --> 00:28:59,590
work so there's a this this this<font color="#CCCCCC"> thing</font>

692
00:28:58,210 --> 00:29:01,330
is running in the background let's see

693
00:28:59,590 --> 00:29:09,789
if it actually introduced now it doesn't

694
00:29:01,330 --> 00:29:11,320
funny what<font color="#CCCCCC"> did</font><font color="#E5E5E5"> I do wrong ah ah it</font>

695
00:29:09,789 --> 00:29:13,690
actually fails because one of my

696
00:29:11,320 --> 00:29:15,970
validators fails it it's saying to me

697
00:29:13,690 --> 00:29:18,130
<font color="#CCCCCC">that i have 2 q's to find this document</font>

698
00:29:15,970 --> 00:29:19,630
that that is not valid and it also puts

699
00:29:18,130 --> 00:29:21,700
a little s'mores quickly under that one

700
00:29:19,630 --> 00:29:24,789
that might be a hint something<font color="#CCCCCC"> is wrong</font>

701
00:29:21,700 --> 00:29:26,740
right and there's some some<font color="#E5E5E5"> of my</font>

702
00:29:24,789 --> 00:29:28,179
validators are not entirely done yet so

703
00:29:26,740 --> 00:29:31,120
<font color="#E5E5E5">I'm not really validating them and</font>

704
00:29:28,179 --> 00:29:32,740
putting them out yet I should put over

705
00:29:31,120 --> 00:29:35,889
here in the right hand column that you

706
00:29:32,740 --> 00:29:37,240
have 2 q's please fix that but I'm not

707
00:29:35,889 --> 00:29:38,469
right now so I<font color="#CCCCCC"> have to go into the</font>

708
00:29:37,240 --> 00:29:41,139
server to figure out what is wrong now

709
00:29:38,470 --> 00:29:45,039
<font color="#CCCCCC">we remove it and then we can introduce</font>

710
00:29:41,139 --> 00:29:48,340
<font color="#E5E5E5">an item right and note that this</font><font color="#CCCCCC"> is a</font>

711
00:29:45,039 --> 00:29:50,559
newly generated the ID here is a newly

712
00:29:48,340 --> 00:29:54,399
generated by the user database and

713
00:29:50,559 --> 00:29:57,279
giving back to us<font color="#E5E5E5"> and so this</font><font color="#CCCCCC"> is the</font>

714
00:29:54,399 --> 00:29:58,779
idea here is an example of invitation

715
00:29:57,279 --> 00:30:02,139
where we add that item into a room

716
00:29:58,779 --> 00:30:07,120
namely this target room here so if i do

717
00:30:02,139 --> 00:30:10,809
at room you can see that<font color="#CCCCCC"> i now link that</font>

718
00:30:07,120 --> 00:30:14,379
item into that room<font color="#CCCCCC"> and now if I query I</font>

719
00:30:10,809 --> 00:30:15,940
have a really if I can find it over here

720
00:30:14,380 --> 00:30:17,740
so here I'm asking<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> particular</font>

721
00:30:15,940 --> 00:30:21,669
room and I asked him for<font color="#E5E5E5"> the contents</font>

722
00:30:17,740 --> 00:30:23,500
inside that room so<font color="#E5E5E5"> hopefully if</font><font color="#CCCCCC"> we do</font>

723
00:30:21,669 --> 00:30:25,059
this will get the sort out which we do

724
00:30:23,500 --> 00:30:27,250
right so this is an example of me

725
00:30:25,059 --> 00:30:29,440
introducing a sword into the world

726
00:30:27,250 --> 00:30:32,559
linking that<font color="#E5E5E5"> sword into a particular</font>

727
00:30:29,440 --> 00:30:35,289
<font color="#E5E5E5">rooms contents and then querying for it</font>

728
00:30:32,559 --> 00:30:36,789
right so so normally when you are

729
00:30:35,289 --> 00:30:38,799
building up your your things you're

730
00:30:36,789 --> 00:30:41,559
using this interface<font color="#E5E5E5"> to it that's the</font>

731
00:30:38,799 --> 00:30:43,658
<font color="#CCCCCC">idea and</font><font color="#E5E5E5"> this is open source and comes</font>

732
00:30:41,559 --> 00:30:45,250
for free so it's good in JavaScript<font color="#E5E5E5"> you</font>

733
00:30:43,659 --> 00:30:48,549
just tag it on top of your<font color="#E5E5E5"> serving you</font>

734
00:30:45,250 --> 00:30:49,960
have this ability the only thing is<font color="#CCCCCC"> the</font>

735
00:30:48,549 --> 00:30:51,760
server needs<font color="#E5E5E5"> to implement the</font>

736
00:30:49,960 --> 00:30:56,710
introspection parts then this is

737
00:30:51,760 --> 00:31:01,899
automatic so that's pretty neat and then

738
00:30:56,710 --> 00:31:03,990
<font color="#CCCCCC">I'll</font><font color="#E5E5E5"> go further on by talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the</font>

739
00:31:01,899 --> 00:31:09,149
<font color="#E5E5E5">early implementation behind this</font>

740
00:31:03,990 --> 00:31:10,920
so I<font color="#E5E5E5"> I started looking at other</font>

741
00:31:09,150 --> 00:31:13,500
implementations and I thought they were

742
00:31:10,920 --> 00:31:17,040
<font color="#CCCCCC">all pretty bad so I decided</font><font color="#E5E5E5"> to do one</font>

743
00:31:13,500 --> 00:31:20,940
myself why not and that's usually what

744
00:31:17,040 --> 00:31:22,409
where<font color="#E5E5E5"> you end up you know spending two</font>

745
00:31:20,940 --> 00:31:24,000
months<font color="#E5E5E5"> or something that you shouldn't</font>

746
00:31:22,410 --> 00:31:25,740
be spending two months on<font color="#CCCCCC"> some stuff</font>

747
00:31:24,000 --> 00:31:29,880
<font color="#E5E5E5">like that but when it's part of work</font>

748
00:31:25,740 --> 00:31:33,720
it's<font color="#E5E5E5"> okay right and so</font><font color="#CCCCCC"> I started doing</font>

749
00:31:29,880 --> 00:31:35,880
this and the way if you look at it you

750
00:31:33,720 --> 00:31:37,980
can look at it as if it was is a

751
00:31:35,880 --> 00:31:40,830
programming language right you have<font color="#CCCCCC"> a</font>

752
00:31:37,980 --> 00:31:43,380
query language that gets turned into

753
00:31:40,830 --> 00:31:45,149
<font color="#E5E5E5">optimized query plants so the way</font><font color="#CCCCCC"> to</font>

754
00:31:43,380 --> 00:31:49,260
address this is to say well this is a

755
00:31:45,150 --> 00:31:54,809
compiler from graphical data into

756
00:31:49,260 --> 00:31:57,540
execution plans for a<font color="#CCCCCC"> back-end so this</font>

757
00:31:54,809 --> 00:32:00,178
is what I did you write a lexan a parson

758
00:31:57,540 --> 00:32:02,760
which you do by using the standard<font color="#E5E5E5"> lakes</font>

759
00:32:00,179 --> 00:32:04,890
to generate underling you could handle

760
00:32:02,760 --> 00:32:07,230
it but<font color="#E5E5E5"> because we have this thing where</font>

761
00:32:04,890 --> 00:32:10,050
we built a query document and then<font color="#E5E5E5"> only</font>

762
00:32:07,230 --> 00:32:11,370
reference it afterwards it's not on the

763
00:32:10,050 --> 00:32:13,590
critical path so the speed of this

764
00:32:11,370 --> 00:32:15,629
doesn't<font color="#E5E5E5"> matter so pick the thing that is</font>

765
00:32:13,590 --> 00:32:17,909
simply the simplest ax to write the<font color="#E5E5E5"> same</font>

766
00:32:15,630 --> 00:32:21,030
with the parson<font color="#CCCCCC"> I use yeah you yet for</font>

767
00:32:17,910 --> 00:32:25,140
that it's not<font color="#E5E5E5"> very fast but it's not on</font>

768
00:32:21,030 --> 00:32:27,510
the critical path so who who cares then

769
00:32:25,140 --> 00:32:29,370
I use a trick<font color="#E5E5E5"> from stand on the mill so</font>

770
00:32:27,510 --> 00:32:31,170
instead of in the middle you have no

771
00:32:29,370 --> 00:32:32,790
types when you start out and you're

772
00:32:31,170 --> 00:32:35,220
<font color="#E5E5E5">right half of the program so you do a</font>

773
00:32:32,790 --> 00:32:37,260
past that is called elaboration where

774
00:32:35,220 --> 00:32:39,510
you figure out infer what the types are

775
00:32:37,260 --> 00:32:41,790
and attach them into the into the

776
00:32:39,510 --> 00:32:44,010
structure as you're going on you can do

777
00:32:41,790 --> 00:32:45,210
the same<font color="#E5E5E5"> here</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> given a query I can</font>

778
00:32:44,010 --> 00:32:48,000
look up into the scheme and then

779
00:32:45,210 --> 00:32:49,559
annotate the types that things have so

780
00:32:48,000 --> 00:32:51,750
now I don't have<font color="#CCCCCC"> to go and look up into</font>

781
00:32:49,559 --> 00:32:53,550
the schema anymore because now they<font color="#E5E5E5"> add</font>

782
00:32:51,750 --> 00:32:55,260
<font color="#E5E5E5">test to the abstraction text tree of the</font>

783
00:32:53,550 --> 00:32:56,639
thing<font color="#CCCCCC"> I'm working with so essentially</font>

784
00:32:55,260 --> 00:32:58,440
<font color="#E5E5E5">i'm just pulling in the things from the</font>

785
00:32:56,640 --> 00:33:01,500
<font color="#E5E5E5">schema i need in order to satisfy the</font>

786
00:32:58,440 --> 00:33:03,090
query and that makes the later stages in

787
00:33:01,500 --> 00:33:05,460
the compiler much much easier because

788
00:33:03,090 --> 00:33:07,620
whenever i need data it's just in the

789
00:33:05,460 --> 00:33:09,390
structure I don't<font color="#E5E5E5"> have to have a civil</font>

790
00:33:07,620 --> 00:33:11,280
look up face in order to figure out what

791
00:33:09,390 --> 00:33:13,500
data I need here because it has been

792
00:33:11,280 --> 00:33:15,690
elaborated into the structure where and

793
00:33:13,500 --> 00:33:17,520
<font color="#CCCCCC">now the elaborate</font><font color="#E5E5E5"> I can also find the</font>

794
00:33:15,690 --> 00:33:19,170
first kind of errors like I have a

795
00:33:17,520 --> 00:33:21,840
that is not even<font color="#CCCCCC"> defined in the schema</font>

796
00:33:19,170 --> 00:33:25,530
that can be caught by the elaborate<font color="#CCCCCC"> er</font>

797
00:33:21,840 --> 00:33:29,220
it's<font color="#E5E5E5"> not on the critical path either so</font>

798
00:33:25,530 --> 00:33:31,680
the speed doesn't matter then you do a

799
00:33:29,220 --> 00:33:35,820
type checker it's fairly standard

800
00:33:31,680 --> 00:33:37,410
there's no magic in it just<font color="#E5E5E5"> right the</font>

801
00:33:35,820 --> 00:33:39,330
most advanced stuff is how you type

802
00:33:37,410 --> 00:33:42,210
chick interfaces<font color="#CCCCCC"> these unions but that's</font>

803
00:33:39,330 --> 00:33:43,889
it it's if you<font color="#CCCCCC"> have done programming</font>

804
00:33:42,210 --> 00:33:46,620
language theory and you<font color="#CCCCCC"> have done a</font>

805
00:33:43,890 --> 00:33:50,310
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of this it it kind of writes</font>

806
00:33:46,620 --> 00:33:52,679
itself you have a<font color="#E5E5E5"> valid data that then</font>

807
00:33:50,310 --> 00:33:55,350
further verifies the query document

808
00:33:52,680 --> 00:33:57,780
structure so this<font color="#E5E5E5"> is akin to a Linda for</font>

809
00:33:55,350 --> 00:34:00,840
a programming language I mean it's not

810
00:33:57,780 --> 00:34:02,670
errors per se but if you have them in

811
00:34:00,840 --> 00:34:05,220
the courage very often the case that you

812
00:34:02,670 --> 00:34:07,560
<font color="#E5E5E5">have a bug so for instance if you refer</font>

813
00:34:05,220 --> 00:34:10,320
<font color="#CCCCCC">to a fragment but there's no way to ever</font>

814
00:34:07,560 --> 00:34:13,710
expand that fragment in that context

815
00:34:10,320 --> 00:34:16,080
that should be an error<font color="#E5E5E5"> even though you</font>

816
00:34:13,710 --> 00:34:18,000
could still execute the curry but no

817
00:34:16,080 --> 00:34:19,469
data would come out<font color="#CCCCCC"> of it so have all</font>

818
00:34:18,000 --> 00:34:21,719
these kind<font color="#CCCCCC"> of corner cases where it's</font>

819
00:34:19,469 --> 00:34:25,109
actually wrong but in principle and

820
00:34:21,719 --> 00:34:26,639
theoretically it oughta work again the

821
00:34:25,110 --> 00:34:28,500
type check and validated steps are not

822
00:34:26,639 --> 00:34:30,989
on<font color="#CCCCCC"> the critical path so the speed</font>

823
00:34:28,500 --> 00:34:32,880
doesn't matter here as well the<font color="#E5E5E5"> only</font>

824
00:34:30,989 --> 00:34:34,799
place where the speed matters is in the

825
00:34:32,880 --> 00:34:38,100
execution path that actually runs the

826
00:34:34,800 --> 00:34:41,280
query and the way does that in on the

827
00:34:38,100 --> 00:34:43,860
server side is that you have these for

828
00:34:41,280 --> 00:34:45,810
each field in the graph that you request

829
00:34:43,860 --> 00:34:47,909
you have a resolver function that you

830
00:34:45,810 --> 00:34:50,969
attach to that field that says how do i

831
00:34:47,909 --> 00:34:53,610
render that particular<font color="#E5E5E5"> field and you</font>

832
00:34:50,969 --> 00:34:55,980
remember<font color="#CCCCCC"> do through the hierarchy of</font>

833
00:34:53,610 --> 00:34:57,450
things you have you know what where<font color="#CCCCCC"> your</font>

834
00:34:55,980 --> 00:34:59,190
curse are so to speak you know your

835
00:34:57,450 --> 00:35:01,710
current object and what field you are

836
00:34:59,190 --> 00:35:03,960
requesting inside the object and there's

837
00:35:01,710 --> 00:35:05,640
default result is that just picks things

838
00:35:03,960 --> 00:35:08,160
inside the objects that you're<font color="#E5E5E5"> currently</font>

839
00:35:05,640 --> 00:35:10,140
sitting with so you don't have to supply

840
00:35:08,160 --> 00:35:11,910
resolve us for all fields you only have

841
00:35:10,140 --> 00:35:16,379
to supply result<font color="#E5E5E5"> less of those fields</font>

842
00:35:11,910 --> 00:35:19,920
that are working by as the<font color="#E5E5E5"> default case</font>

843
00:35:16,380 --> 00:35:21,420
and that's<font color="#CCCCCC"> usually very few so of all</font>

844
00:35:19,920 --> 00:35:23,040
the fields<font color="#E5E5E5"> I showed you here there's</font>

845
00:35:21,420 --> 00:35:24,870
like two or three resolvers and

846
00:35:23,040 --> 00:35:28,500
everything else is happening

847
00:35:24,870 --> 00:35:30,960
automatically resolvers can be back<font color="#CCCCCC"> by</font>

848
00:35:28,500 --> 00:35:32,550
any coat your own that that is honest

849
00:35:30,960 --> 00:35:35,550
God standard<font color="#E5E5E5"> Ellen coat that is just</font>

850
00:35:32,550 --> 00:35:37,770
running so and you can do anything in a

851
00:35:35,550 --> 00:35:39,960
resolver you want and this is how you

852
00:35:37,770 --> 00:35:41,460
implement say mutations because now your

853
00:35:39,960 --> 00:35:45,660
resolve is just going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the database</font>

854
00:35:41,460 --> 00:35:47,910
<font color="#E5E5E5">and adding data there's a lot of things</font>

855
00:35:45,660 --> 00:35:51,569
<font color="#E5E5E5">that</font><font color="#CCCCCC"> can cover I didn't cover all of</font>

856
00:35:47,910 --> 00:35:53,609
this so just<font color="#E5E5E5"> know</font><font color="#CCCCCC"> that there's a</font><font color="#E5E5E5"> story</font>

857
00:35:51,570 --> 00:35:56,550
inside<font color="#CCCCCC"> craft</font><font color="#E5E5E5"> we're doing these things so</font>

858
00:35:53,609 --> 00:35:59,310
subscription streaming of events all of

859
00:35:56,550 --> 00:36:02,310
that kind of stuff<font color="#E5E5E5"> is inside there</font>

860
00:35:59,310 --> 00:36:07,680
there's a story for doing authentication

861
00:36:02,310 --> 00:36:09,599
authorization for this there's a lot<font color="#CCCCCC"> of</font>

862
00:36:07,680 --> 00:36:11,759
about error handling that I didn't show

863
00:36:09,599 --> 00:36:13,080
that<font color="#CCCCCC"> it's also part of this</font><font color="#E5E5E5"> system so</font>

864
00:36:11,760 --> 00:36:17,700
you can<font color="#E5E5E5"> actually get error handling</font>

865
00:36:13,080 --> 00:36:20,430
there's a<font color="#E5E5E5"> lot of things about how do you</font>

866
00:36:17,700 --> 00:36:23,040
so so gradual is very<font color="#E5E5E5"> broad but then</font>

867
00:36:20,430 --> 00:36:25,529
what they do and say relay and react is

868
00:36:23,040 --> 00:36:28,680
that they say let<font color="#CCCCCC"> us define certain</font>

869
00:36:25,530 --> 00:36:30,210
standard ways of doing certain things so

870
00:36:28,680 --> 00:36:32,848
let us define<font color="#CCCCCC"> a standard way of doing</font>

871
00:36:30,210 --> 00:36:35,130
say pagination let us define a standard

872
00:36:32,849 --> 00:36:39,030
way of introducing a new object names of

873
00:36:35,130 --> 00:36:41,339
the graph and then utilize this by by by

874
00:36:39,030 --> 00:36:43,260
doing it with through a standart then

875
00:36:41,339 --> 00:36:45,359
<font color="#CCCCCC">the these libraries gets much more</font>

876
00:36:43,260 --> 00:36:46,920
powerful because they can assume a<font color="#E5E5E5"> lot</font>

877
00:36:45,359 --> 00:36:50,220
of things<font color="#E5E5E5"> are present in the graph</font>

878
00:36:46,920 --> 00:36:52,650
there's an internal schema validator

879
00:36:50,220 --> 00:36:55,589
that verifies that the schemas actually

880
00:36:52,650 --> 00:36:58,260
type type type wise consistent<font color="#E5E5E5"> generally</font>

881
00:36:55,589 --> 00:37:01,560
there's a concept called directives and

882
00:36:58,260 --> 00:37:03,780
you can alias field names if you want

883
00:37:01,560 --> 00:37:06,299
which I didn't show and note that<font color="#CCCCCC"> the</font>

884
00:37:03,780 --> 00:37:08,040
standards is pretty fast evolving so I

885
00:37:06,300 --> 00:37:10,020
cannot really keep up with all the

886
00:37:08,040 --> 00:37:12,930
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that they are they're adding</font>

887
00:37:10,020 --> 00:37:15,300
right now so the last draft spec is from

888
00:37:12,930 --> 00:37:17,580
<font color="#E5E5E5">April this year and I think that we are</font>

889
00:37:15,300 --> 00:37:19,020
pretty close to the next one but the way

890
00:37:17,580 --> 00:37:20,880
it works is that internally they<font color="#E5E5E5"> toy</font>

891
00:37:19,020 --> 00:37:22,440
with new<font color="#CCCCCC"> things and if they like the</font>

892
00:37:20,880 --> 00:37:26,970
thing it gets it goes into<font color="#E5E5E5"> the draft</font>

893
00:37:22,440 --> 00:37:29,250
into the draft pick and then the early

894
00:37:26,970 --> 00:37:31,080
implementation i have is about 80% on

895
00:37:29,250 --> 00:37:33,720
something like that ninety<font color="#CCCCCC"> percent done</font>

896
00:37:31,080 --> 00:37:36,839
so i don't have say directives yet but

897
00:37:33,720 --> 00:37:39,750
we haven't really<font color="#E5E5E5"> had a need for them</font>

898
00:37:36,839 --> 00:37:41,520
yes that's<font color="#CCCCCC"> it's interviewed if you want</font>

899
00:37:39,750 --> 00:37:43,109
to try<font color="#E5E5E5"> it there are all those server</font>

900
00:37:41,520 --> 00:37:44,910
implementations

901
00:37:43,109 --> 00:37:50,069
at least I know about<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> lixian</font>

902
00:37:44,910 --> 00:37:51,899
Python so that's that's that part in the

903
00:37:50,069 --> 00:37:53,759
client implementations<font color="#E5E5E5"> I'm only familiar</font>

904
00:37:51,900 --> 00:37:56,549
with the react real a way of<font color="#E5E5E5"> doing</font>

905
00:37:53,759 --> 00:37:58,829
things but i'm pretty sure<font color="#CCCCCC"> that I mean</font>

906
00:37:56,549 --> 00:38:00,329
you can write them in any language you

907
00:37:58,829 --> 00:38:04,319
want it's pretty easy to make these

908
00:38:00,329 --> 00:38:06,359
queries<font color="#E5E5E5"> so essentially you can pick your</font>

909
00:38:04,319 --> 00:38:10,859
poison but I<font color="#CCCCCC"> don't know what you what</font>

910
00:38:06,359 --> 00:38:36,720
what you want to pick yes<font color="#E5E5E5"> and now we are</font>

911
00:38:10,859 --> 00:38:44,160
reaching questions sure I've

912
00:38:36,720 --> 00:38:53,399
unfortunately<font color="#E5E5E5"> not oh it's a microsoft</font>

913
00:38:44,160 --> 00:38:55,379
thing right yes so I kind<font color="#E5E5E5"> of grasp or Oh</font>

914
00:38:53,400 --> 00:38:56,880
data is but I don't I haven't<font color="#E5E5E5"> really</font>

915
00:38:55,380 --> 00:38:59,460
worked with it and that makes<font color="#CCCCCC"> it hard</font>

916
00:38:56,880 --> 00:39:03,989
because I cannot really say how it is in

917
00:38:59,460 --> 00:39:06,480
relation<font color="#CCCCCC"> to this my experiences in</font>

918
00:39:03,989 --> 00:39:08,549
comparison to standard restful

919
00:39:06,480 --> 00:39:12,509
frameworks this seems much more powerful

920
00:39:08,549 --> 00:39:14,489
does and/or and other alternative to

921
00:39:12,509 --> 00:39:16,950
this which is a kind of simpler which is

922
00:39:14,489 --> 00:39:19,230
the one<font color="#E5E5E5"> Netflix's writing which is</font>

923
00:39:16,950 --> 00:39:22,499
called<font color="#E5E5E5"> felcor so that is another</font>

924
00:39:19,230 --> 00:39:24,690
standard that works a bit like this the

925
00:39:22,499 --> 00:39:26,788
general trend looks like we are<font color="#CCCCCC"> going</font><font color="#E5E5E5"> in</font>

926
00:39:24,690 --> 00:39:28,079
this direction where the clients do

927
00:39:26,789 --> 00:39:31,079
encourage to the service and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> service</font>

928
00:39:28,079 --> 00:39:34,710
are trying their best to respond back<font color="#CCCCCC"> to</font>

929
00:39:31,079 --> 00:39:37,349
the clients so you see Oh data is

930
00:39:34,710 --> 00:39:41,099
perhaps it's a couple of years old so<font color="#E5E5E5"> I</font>

931
00:39:37,349 --> 00:39:43,980
guess that that was the first attempt it

932
00:39:41,099 --> 00:39:45,749
might<font color="#CCCCCC"> not be good enough so it might</font>

933
00:39:43,980 --> 00:39:48,299
kind of fall off but<font color="#E5E5E5"> then these things</font>

934
00:39:45,749 --> 00:39:51,238
<font color="#E5E5E5">are tried right and but definitely my</font>

935
00:39:48,299 --> 00:39:53,309
mind tuition is that the<font color="#E5E5E5"> trend is we're</font>

936
00:39:51,239 --> 00:39:55,410
moving in this direction and away from a

937
00:39:53,309 --> 00:39:56,430
restful back end at least on larger

938
00:39:55,410 --> 00:39:59,069
systems

939
00:39:56,430 --> 00:40:01,859
you also have the secret stuff going on

940
00:39:59,070 --> 00:40:03,600
and<font color="#E5E5E5"> this fits securus fits very well</font>

941
00:40:01,860 --> 00:40:04,800
into this graph language because the

942
00:40:03,600 --> 00:40:08,190
career is<font color="#CCCCCC"> the query part and the</font>

943
00:40:04,800 --> 00:40:10,020
rotation is the events<font color="#E5E5E5"> in</font><font color="#CCCCCC"> securus so</font>

944
00:40:08,190 --> 00:40:21,000
that that that that is one of<font color="#E5E5E5"> the things</font>

945
00:40:10,020 --> 00:40:29,250
<font color="#CCCCCC">you can you can say about</font><font color="#E5E5E5"> that yes yes I</font>

946
00:40:21,000 --> 00:40:34,170
don't<font color="#E5E5E5"> think that</font><font color="#CCCCCC"> they have</font><font color="#E5E5E5"> a story for</font>

947
00:40:29,250 --> 00:40:35,970
this yet but if this takes off they they

948
00:40:34,170 --> 00:40:38,970
need to have a story for this<font color="#E5E5E5"> they need</font>

949
00:40:35,970 --> 00:40:40,950
<font color="#CCCCCC">to have a way to handle it you don't</font>

950
00:40:38,970 --> 00:40:43,259
need a<font color="#E5E5E5"> lot I mean you can you can do</font>

951
00:40:40,950 --> 00:40:46,500
this yourself what what what relay in

952
00:40:43,260 --> 00:40:49,440
react ads on top of it is a way that

953
00:40:46,500 --> 00:40:51,180
makes it<font color="#E5E5E5"> easier to do to work to link</font>

954
00:40:49,440 --> 00:40:53,310
the objects you have inside your react

955
00:40:51,180 --> 00:40:58,020
system to these queries so<font color="#CCCCCC"> for</font><font color="#E5E5E5"> instance</font>

956
00:40:53,310 --> 00:41:00,930
suppose you change an object here so say

957
00:40:58,020 --> 00:41:03,810
your<font color="#CCCCCC"> Facebook and your liking a story</font>

958
00:41:00,930 --> 00:41:06,690
for something now there's a story count

959
00:41:03,810 --> 00:41:09,120
a light count on that right so how many

960
00:41:06,690 --> 00:41:10,770
lights does the story has so over<font color="#CCCCCC"> here</font>

961
00:41:09,120 --> 00:41:13,230
we have the<font color="#E5E5E5"> story and now we are adding</font>

962
00:41:10,770 --> 00:41:15,060
a light to it so what the interface

963
00:41:13,230 --> 00:41:17,820
wants is to pump the light counter by

964
00:41:15,060 --> 00:41:19,740
one right so that means when I do in

965
00:41:17,820 --> 00:41:24,810
like another object changes in the graph

966
00:41:19,740 --> 00:41:26,669
and what real and react has a ways to do

967
00:41:24,810 --> 00:41:29,520
this automatically so it knows that

968
00:41:26,670 --> 00:41:32,910
<font color="#CCCCCC">one's i do alike i should automatically</font>

969
00:41:29,520 --> 00:41:34,650
refresh the story and<font color="#CCCCCC"> the light count</font>

970
00:41:32,910 --> 00:41:37,259
there as well right<font color="#E5E5E5"> because now that</font>

971
00:41:34,650 --> 00:41:39,360
bumped and they actually you in clever

972
00:41:37,260 --> 00:41:40,440
because what they do is they do the like

973
00:41:39,360 --> 00:41:42,780
then they<font color="#E5E5E5"> bump the counter</font>

974
00:41:40,440 --> 00:41:45,330
optimistically in the client so it<font color="#CCCCCC"> looks</font>

975
00:41:42,780 --> 00:41:47,700
like it's like this right and then when

976
00:41:45,330 --> 00:41:50,009
the query action comes back from from

977
00:41:47,700 --> 00:41:52,020
facebook if it matches what they

978
00:41:50,010 --> 00:41:53,670
expected they can just continue as if

979
00:41:52,020 --> 00:41:55,830
nothing happened right if it doesn't

980
00:41:53,670 --> 00:41:57,810
match they'll just you know do a

981
00:41:55,830 --> 00:42:00,420
transition on the<font color="#E5E5E5"> client that shows you</font>

982
00:41:57,810 --> 00:42:02,549
that that light didn't went true right

983
00:42:00,420 --> 00:42:05,040
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> how they do it and there's a</font>

984
00:42:02,550 --> 00:42:08,160
<font color="#E5E5E5">lot of this build into an into reacting</font>

985
00:42:05,040 --> 00:42:09,200
relay so pagination is a really good

986
00:42:08,160 --> 00:42:11,569
example of that where

987
00:42:09,200 --> 00:42:14,000
they have these stories<font color="#E5E5E5"> for if I add a</font>

988
00:42:11,570 --> 00:42:16,670
new object into a<font color="#E5E5E5"> peck inated thing</font>

989
00:42:14,000 --> 00:42:18,350
where should it be added and how can<font color="#CCCCCC"> I</font>

990
00:42:16,670 --> 00:42:20,870
avoid re fetching the whole pack<font color="#CCCCCC"> a</font>

991
00:42:18,350 --> 00:42:22,610
<font color="#CCCCCC">nation thing right how can i how can</font><font color="#E5E5E5"> I</font>

992
00:42:20,870 --> 00:42:25,400
get away with just refreshing that

993
00:42:22,610 --> 00:42:27,890
particular object i just added right and

994
00:42:25,400 --> 00:42:30,530
those are some of<font color="#E5E5E5"> the things that react</font>

995
00:42:27,890 --> 00:42:31,850
has and you you could do that<font color="#E5E5E5"> in angular</font>

996
00:42:30,530 --> 00:42:34,250
as well but you would have to build it

997
00:42:31,850 --> 00:42:36,549
<font color="#E5E5E5">yourself or somebody else would</font><font color="#CCCCCC"> have to</font>

998
00:42:34,250 --> 00:42:36,550
build it

