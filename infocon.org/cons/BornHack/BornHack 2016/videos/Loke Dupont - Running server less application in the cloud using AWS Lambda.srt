1
00:00:00,000 --> 00:00:09,269
skiing<font color="#CCCCCC"> anither horror okay we're ready</font>

2
00:00:07,350 --> 00:00:11,670
for our next talk it's a logo depois

3
00:00:09,269 --> 00:00:15,000
who's going<font color="#E5E5E5"> to talk about surveillance</font>

4
00:00:11,670 --> 00:00:23,250
applications with the Amazons lambda

5
00:00:15,000 --> 00:00:26,939
system let's give a hand to Logan thanks

6
00:00:23,250 --> 00:00:30,090
so yeah I'm gonna just quick intro to

7
00:00:26,939 --> 00:00:32,700
<font color="#E5E5E5">Who I am work wanly with video streaming</font>

8
00:00:30,090 --> 00:00:34,590
for how many called extreme we decided

9
00:00:32,700 --> 00:00:37,020
to move pretty much all of our<font color="#E5E5E5"> services</font>

10
00:00:34,590 --> 00:00:41,309
into the Amazon Cloud about a year ago

11
00:00:37,020 --> 00:00:43,020
and and so I've been trying to preach to

12
00:00:41,309 --> 00:00:44,760
<font color="#CCCCCC">the rest of the organization why we</font>

13
00:00:43,020 --> 00:00:49,050
should use all the AWS technology we can

14
00:00:44,760 --> 00:00:52,019
so a<font color="#E5E5E5"> quick introduction to the AWS stack</font>

15
00:00:49,050 --> 00:00:55,709
most people are familiar with the three

16
00:00:52,020 --> 00:00:58,920
classic services of AWS meaning ec2 RDS

17
00:00:55,710 --> 00:01:01,170
and s3 which is respectively easy to

18
00:00:58,920 --> 00:01:03,059
sort of a standard virtual machine you

19
00:01:01,170 --> 00:01:04,830
put it up run the software on it you can

20
00:01:03,059 --> 00:01:07,350
<font color="#E5E5E5">install whatever OS you want on it and</font>

21
00:01:04,830 --> 00:01:10,560
it runs<font color="#E5E5E5"> just like if you had another VPS</font>

22
00:01:07,350 --> 00:01:12,960
at a random post somewhere RDS is

23
00:01:10,560 --> 00:01:15,119
basically<font color="#CCCCCC"> Amazon's way of running</font>

24
00:01:12,960 --> 00:01:17,820
database servers it allows you to<font color="#E5E5E5"> run</font>

25
00:01:15,119 --> 00:01:20,070
database<font color="#E5E5E5"> servers in a managed way so you</font>

26
00:01:17,820 --> 00:01:23,250
can of course<font color="#E5E5E5"> run them on ec2 yourself</font>

27
00:01:20,070 --> 00:01:24,750
but using RDS it has a bunch<font color="#E5E5E5"> of stuff on</font>

28
00:01:23,250 --> 00:01:28,259
<font color="#E5E5E5">top of it that handles failover</font>

29
00:01:24,750 --> 00:01:30,720
capability handles having replicas in

30
00:01:28,259 --> 00:01:32,340
another region and it supports the

31
00:01:30,720 --> 00:01:35,820
number of different database engines

32
00:01:32,340 --> 00:01:39,420
such as<font color="#CCCCCC"> Orgel my microsoft sequel my</font>

33
00:01:35,820 --> 00:01:41,189
sequel maria DB and their own a sort<font color="#E5E5E5"> of</font>

34
00:01:39,420 --> 00:01:45,329
modified version of my sequel called

35
00:01:41,189 --> 00:01:49,139
agua third component of the classic AWS

36
00:01:45,329 --> 00:01:51,240
services is s3 a very nice storage

37
00:01:49,140 --> 00:01:54,090
system for storing large amounts of data

38
00:01:51,240 --> 00:01:56,548
in fact<font color="#E5E5E5"> Dropbox use this initially I</font>

39
00:01:54,090 --> 00:01:59,040
think up<font color="#CCCCCC"> until about a year ago they</font>

40
00:01:56,549 --> 00:02:00,509
were using s3 as the<font color="#CCCCCC"> backend for</font><font color="#E5E5E5"> all the</font>

41
00:01:59,040 --> 00:02:02,399
dropbox storage because it was just

42
00:02:00,509 --> 00:02:05,940
<font color="#E5E5E5">easier and cheaper than trying to build</font>

43
00:02:02,399 --> 00:02:08,970
it from the tummy ground up basically

44
00:02:05,940 --> 00:02:10,949
AWS lambda is a relatively new<font color="#E5E5E5"> service</font>

45
00:02:08,970 --> 00:02:14,520
it was introduced i think approximately

46
00:02:10,949 --> 00:02:16,320
a year ago and and it's designed to sort

47
00:02:14,520 --> 00:02:18,360
of be the<font color="#E5E5E5"> glue between a lot of other</font>

48
00:02:16,320 --> 00:02:21,329
<font color="#E5E5E5">services so it has</font><font color="#CCCCCC"> a number of</font>

49
00:02:18,360 --> 00:02:24,360
integrations towards s3 something called

50
00:02:21,330 --> 00:02:25,500
<font color="#CCCCCC">Kinesis which processes stream data so</font>

51
00:02:24,360 --> 00:02:26,970
if you have a lot of events coming

52
00:02:25,500 --> 00:02:28,890
through you want to<font color="#CCCCCC"> process them in an</font>

53
00:02:26,970 --> 00:02:30,750
efficient<font color="#E5E5E5"> way</font><font color="#CCCCCC"> canisius has a lot of</font>

54
00:02:28,890 --> 00:02:32,670
functionality for that it also has

55
00:02:30,750 --> 00:02:34,440
integrations to an another new service

56
00:02:32,670 --> 00:02:37,200
called<font color="#CCCCCC"> API gateway as well as their</font>

57
00:02:34,440 --> 00:02:39,000
notification system so pretty pretty

58
00:02:37,200 --> 00:02:40,679
much everything in the 80 s system can

59
00:02:39,000 --> 00:02:42,450
send<font color="#E5E5E5"> out notifications when an action</font>

60
00:02:40,680 --> 00:02:45,840
happens so for<font color="#E5E5E5"> instance you can listen</font>

61
00:02:42,450 --> 00:02:48,149
for notifications on when a new machine

62
00:02:45,840 --> 00:02:51,390
starts if a machine gets terminated if a

63
00:02:48,150 --> 00:02:53,610
database has an error of car some kind

64
00:02:51,390 --> 00:02:55,859
and they're all pipe it into SNS and

65
00:02:53,610 --> 00:03:01,350
lambda can actually listen to SNS topics

66
00:02:55,860 --> 00:03:02,940
what could you<font color="#E5E5E5"> use it for we do have a</font>

67
00:03:01,350 --> 00:03:05,910
lambda function that basically reads

68
00:03:02,940 --> 00:03:07,320
<font color="#CCCCCC">Kinesis data so if you have a lock</font>

69
00:03:05,910 --> 00:03:09,690
events for instance<font color="#E5E5E5"> your streaming into</font>

70
00:03:07,320 --> 00:03:11,670
<font color="#CCCCCC">Kinesis that like</font><font color="#E5E5E5"> millions of lock</font>

71
00:03:09,690 --> 00:03:13,230
events per minute you can actually<font color="#CCCCCC"> have</font>

72
00:03:11,670 --> 00:03:16,950
a lambda function getting all<font color="#E5E5E5"> that data</font>

73
00:03:13,230 --> 00:03:19,769
fed in and ms on<font color="#E5E5E5"> we'll run that as</font><font color="#CCCCCC"> as</font>

74
00:03:16,950 --> 00:03:22,920
much<font color="#CCCCCC"> as you need to</font><font color="#E5E5E5"> and run every time</font>

75
00:03:19,770 --> 00:03:25,080
you were few<font color="#E5E5E5"> new events we also use it</font>

76
00:03:22,920 --> 00:03:28,079
for for instance you can listen to when

77
00:03:25,080 --> 00:03:30,120
file gets created in s3 so imagining you

78
00:03:28,080 --> 00:03:32,760
have a number of users<font color="#E5E5E5"> uploading images</font>

79
00:03:30,120 --> 00:03:34,709
to an s3 bucket you can listen for the

80
00:03:32,760 --> 00:03:36,870
object<font color="#E5E5E5"> created event and you can then</font>

81
00:03:34,709 --> 00:03:38,970
have a WS run<font color="#CCCCCC"> lampa every time that</font>

82
00:03:36,870 --> 00:03:42,090
happens I surely have a demo<font color="#CCCCCC"> that</font>

83
00:03:38,970 --> 00:03:43,920
demonstrates that particular thing<font color="#CCCCCC"> or it</font>

84
00:03:42,090 --> 00:03:45,300
can just be that<font color="#E5E5E5"> you're monitoring jobs</font>

85
00:03:43,920 --> 00:03:47,488
for one of the long-running<font color="#E5E5E5"> jobs you</font>

86
00:03:45,300 --> 00:03:49,260
have encoding video for instance and you

87
00:03:47,489 --> 00:03:51,989
can want<font color="#E5E5E5"> to check when it gets</font>

88
00:03:49,260 --> 00:03:54,600
terminated or when it's done and and

89
00:03:51,989 --> 00:03:56,489
then the one of the very nice features

90
00:03:54,600 --> 00:03:58,530
as well as you can run a classic web

91
00:03:56,489 --> 00:04:02,459
services usually using lanta by having

92
00:03:58,530 --> 00:04:04,170
<font color="#CCCCCC">API gateway in front of it so the first</font>

93
00:04:02,459 --> 00:04:06,630
<font color="#CCCCCC">time I have is an automated encoding</font>

94
00:04:04,170 --> 00:04:08,700
solution basically the flow of this is

95
00:04:06,630 --> 00:04:12,299
that<font color="#E5E5E5"> we have a video that goes into s3</font>

96
00:04:08,700 --> 00:04:14,010
<font color="#CCCCCC">and that triggers</font><font color="#E5E5E5"> lambda lambda sets up</font>

97
00:04:12,300 --> 00:04:16,440
a new<font color="#E5E5E5"> encoding transcoding job and</font>

98
00:04:14,010 --> 00:04:18,450
sensitive course to elastic transcoder

99
00:04:16,440 --> 00:04:19,380
why not use a<font color="#E5E5E5"> a loggia stack they all</font>

100
00:04:18,450 --> 00:04:22,110
the way through

101
00:04:19,380 --> 00:04:24,150
and elastic transcoder then sends

102
00:04:22,110 --> 00:04:26,460
notifications when it's done<font color="#E5E5E5"> encoding if</font>

103
00:04:24,150 --> 00:04:28,530
it's successful if it failed it'll also

104
00:04:26,460 --> 00:04:30,719
sent progress updates and each time

105
00:04:28,530 --> 00:04:32,489
lambda gets called again to update a

106
00:04:30,720 --> 00:04:34,980
database of what the status is of the

107
00:04:32,490 --> 00:04:36,390
encoded files and also to send a

108
00:04:34,980 --> 00:04:38,430
notification if encoding fails for

109
00:04:36,390 --> 00:04:40,950
instance in this sample it sends email

110
00:04:38,430 --> 00:04:44,760
to a designated address saying that the

111
00:04:40,950 --> 00:04:50,729
encoding field and if we<font color="#E5E5E5"> just tap out</font>

112
00:04:44,760 --> 00:04:54,030
here I can see there what yeah<font color="#CCCCCC"> it's</font>

113
00:04:50,730 --> 00:04:55,830
probably just zoom in a bit no it's

114
00:04:54,030 --> 00:04:59,190
going<font color="#E5E5E5"> to be tough to read so i have</font>

115
00:04:55,830 --> 00:05:00,719
<font color="#E5E5E5">three python files this this one is the</font>

116
00:04:59,190 --> 00:05:03,270
one that<font color="#E5E5E5"> actually creates the encode and</font>

117
00:05:00,720 --> 00:05:04,980
i'll show<font color="#E5E5E5"> you</font><font color="#CCCCCC"> how that</font><font color="#E5E5E5"> looks in the</font>

118
00:05:03,270 --> 00:05:07,590
<font color="#E5E5E5">amazon console afterwards but basically</font>

119
00:05:04,980 --> 00:05:08,910
just listens for the handler function is

120
00:05:07,590 --> 00:05:11,700
called<font color="#CCCCCC"> every time lambda calls the</font>

121
00:05:08,910 --> 00:05:21,360
function yeah<font color="#E5E5E5"> you can zoom in further</font>

122
00:05:11,700 --> 00:05:22,830
<font color="#CCCCCC">sure perfect</font><font color="#E5E5E5"> the lambda calls the</font>

123
00:05:21,360 --> 00:05:25,410
handler function each time a new event

124
00:05:22,830 --> 00:05:28,109
is triggered<font color="#E5E5E5"> and in the event it</font>

125
00:05:25,410 --> 00:05:31,530
basically<font color="#E5E5E5"> sends us the</font><font color="#CCCCCC"> the name of the</font>

126
00:05:28,110 --> 00:05:33,960
new s3 file so what we do is we create a

127
00:05:31,530 --> 00:05:35,849
transcoder job and we give it the the

128
00:05:33,960 --> 00:05:37,469
key input key which is<font color="#E5E5E5"> basically a file</font>

129
00:05:35,850 --> 00:05:40,080
<font color="#E5E5E5">name and we also choose an output name</font>

130
00:05:37,470 --> 00:05:43,020
says what profile we want to<font color="#CCCCCC"> transcoded</font>

131
00:05:40,080 --> 00:05:44,609
with using the<font color="#E5E5E5"> preset ID and and then we</font>

132
00:05:43,020 --> 00:05:46,620
add some metadata that's just initiated

133
00:05:44,610 --> 00:05:49,200
by lambda just so we can identify it if

134
00:05:46,620 --> 00:05:51,390
we're<font color="#CCCCCC"> looking in the</font><font color="#E5E5E5"> Amazon console it</font>

135
00:05:49,200 --> 00:05:53,520
also prints the<font color="#CCCCCC"> transcode ID which means</font>

136
00:05:51,390 --> 00:05:56,039
it gets put into the log file and then

137
00:05:53,520 --> 00:06:00,030
it puts a entry into the dynamo DB table

138
00:05:56,040 --> 00:06:03,210
saying this file is<font color="#E5E5E5"> encoding so if we</font>

139
00:06:00,030 --> 00:06:05,940
switch to<font color="#CCCCCC"> a upload</font><font color="#E5E5E5"> a file let's grab</font><font color="#CCCCCC"> a</font>

140
00:06:03,210 --> 00:06:08,039
video file here you probably can't see

141
00:06:05,940 --> 00:06:09,600
the file names but this is basically<font color="#E5E5E5"> me</font>

142
00:06:08,040 --> 00:06:12,960
dragging and dropping a file over to the

143
00:06:09,600 --> 00:06:14,760
s3 bucket and luckily we<font color="#CCCCCC"> are on a fairly</font>

144
00:06:12,960 --> 00:06:18,390
fast connection so this should be<font color="#E5E5E5"> about</font>

145
00:06:14,760 --> 00:06:22,110
a minute in the meantime I can take<font color="#CCCCCC"> you</font>

146
00:06:18,390 --> 00:06:26,700
into the lambda console and I should

147
00:06:22,110 --> 00:06:28,680
probably assume that as well<font color="#CCCCCC"> so we have</font>

148
00:06:26,700 --> 00:06:31,380
our three functions here this is<font color="#E5E5E5"> the</font>

149
00:06:28,680 --> 00:06:33,180
case<font color="#E5E5E5"> we have the auto encoder if we look</font>

150
00:06:31,380 --> 00:06:37,139
at this function we can<font color="#E5E5E5"> see</font>

151
00:06:33,180 --> 00:06:38,580
we'll just go into it here and we can

152
00:06:37,139 --> 00:06:41,370
see the triggers for<font color="#CCCCCC"> it and there's an</font>

153
00:06:38,580 --> 00:06:43,109
s3 trigger so each time this particular

154
00:06:41,370 --> 00:06:45,120
barking it has an object created this

155
00:06:43,110 --> 00:06:47,910
will trigger the lambda function and

156
00:06:45,120 --> 00:06:50,520
this should mean that when we files

157
00:06:47,910 --> 00:06:52,650
finished uploading<font color="#E5E5E5"> to the s3 we should</font>

158
00:06:50,520 --> 00:06:54,270
get a trigger of this function and the

159
00:06:52,650 --> 00:06:57,060
code you just saw will then create a

160
00:06:54,270 --> 00:06:59,008
trance code job so let's<font color="#E5E5E5"> just keep a</font>

161
00:06:57,060 --> 00:07:03,300
keep an eye on when we have<font color="#CCCCCC"> that</font>

162
00:06:59,009 --> 00:07:04,800
uploaded still half a minute yet we can

163
00:07:03,300 --> 00:07:07,349
also monitor your jobs so we<font color="#E5E5E5"> can see how</font>

164
00:07:04,800 --> 00:07:10,770
<font color="#CCCCCC">many</font><font color="#E5E5E5"> invitations lambda sent for this</font>

165
00:07:07,349 --> 00:07:14,219
job if there's any errors if there<font color="#E5E5E5"> is a</font>

166
00:07:10,770 --> 00:07:17,130
number<font color="#E5E5E5"> of issues</font><font color="#CCCCCC"> with throttling and how</font>

167
00:07:14,220 --> 00:07:19,560
long they were running<font color="#E5E5E5"> for one of the</font>

168
00:07:17,130 --> 00:07:21,630
caveat of using<font color="#CCCCCC"> lampas can only run jobs</font>

169
00:07:19,560 --> 00:07:24,599
that finish in less than five<font color="#CCCCCC"> minutes</font>

170
00:07:21,630 --> 00:07:25,979
which<font color="#CCCCCC"> is plenty for almost all functions</font>

171
00:07:24,599 --> 00:07:30,419
but it means you can have long running

172
00:07:25,979 --> 00:07:32,909
background processes see<font color="#E5E5E5"> our file is now</font>

173
00:07:30,419 --> 00:07:34,620
uploaded and what we can<font color="#E5E5E5"> then do if we</font>

174
00:07:32,910 --> 00:07:37,289
take<font color="#CCCCCC"> that</font><font color="#E5E5E5"> then I'm well actually let's</font>

175
00:07:34,620 --> 00:07:39,270
take the last week transcoder we should

176
00:07:37,289 --> 00:07:41,849
then show<font color="#CCCCCC"> that we have a job</font><font color="#E5E5E5"> running in</font>

177
00:07:39,270 --> 00:07:47,159
the pipeline let's<font color="#E5E5E5"> grab the land of</font>

178
00:07:41,849 --> 00:07:55,590
pipeline and we can<font color="#CCCCCC"> then search for</font><font color="#E5E5E5"> the</font>

179
00:07:47,159 --> 00:07:57,870
jobs pipeline drops and we haven't eat a

180
00:07:55,590 --> 00:08:00,330
new job<font color="#CCCCCC"> in</font><font color="#E5E5E5"> coding mark progressing and</font>

181
00:07:57,870 --> 00:08:04,110
we also should be able<font color="#E5E5E5"> to see in our</font>

182
00:08:00,330 --> 00:08:06,240
<font color="#CCCCCC">DynamoDB that if you go to</font><font color="#E5E5E5"> the correct</font>

183
00:08:04,110 --> 00:08:08,460
table that we have an entry there that

184
00:08:06,240 --> 00:08:10,979
<font color="#E5E5E5">basically says the same thing there goes</font>

185
00:08:08,460 --> 00:08:13,680
input key output key state is encoding

186
00:08:10,979 --> 00:08:15,000
and so when that completes<font color="#E5E5E5"> the elastic</font>

187
00:08:13,680 --> 00:08:17,580
transcoder will fire off a new and

188
00:08:15,000 --> 00:08:19,080
saying this job is now complete we can

189
00:08:17,580 --> 00:08:21,270
look<font color="#E5E5E5"> in our database saying okay this is</font>

190
00:08:19,080 --> 00:08:24,630
one hours and then we can trigger a

191
00:08:21,270 --> 00:08:25,740
function to remove the original<font color="#E5E5E5"> file</font>

192
00:08:24,630 --> 00:08:27,990
because of course we<font color="#CCCCCC"> don't need that</font>

193
00:08:25,740 --> 00:08:29,159
anymore if it fails we don't trigger

194
00:08:27,990 --> 00:08:33,270
that function instead we trigger the

195
00:08:29,159 --> 00:08:35,189
function that that sends<font color="#CCCCCC"> an email and</font>

196
00:08:33,270 --> 00:08:37,828
this will take a little while in the

197
00:08:35,190 --> 00:08:40,649
meantime I'll just drag over file I know

198
00:08:37,828 --> 00:08:43,890
it<font color="#E5E5E5"> can't transcode so we'll just move</font>

199
00:08:40,649 --> 00:08:46,050
that<font color="#CCCCCC"> over there and this</font><font color="#E5E5E5"> will trigger an</font>

200
00:08:43,890 --> 00:08:46,920
email to<font color="#CCCCCC"> me as soon as</font><font color="#E5E5E5"> the elastic let's</font>

201
00:08:46,050 --> 00:08:48,630
go to figure out

202
00:08:46,920 --> 00:08:52,439
this is<font color="#E5E5E5"> not something we can transcode</font>

203
00:08:48,630 --> 00:08:54,450
so let's see if we have any luck with

204
00:08:52,440 --> 00:08:57,269
that yep there goes triggered the email

205
00:08:54,450 --> 00:09:00,720
saying transfer failed error code four

206
00:08:57,269 --> 00:09:03,870
thousand this was the ID and he couldn't

207
00:09:00,720 --> 00:09:05,370
interpret<font color="#CCCCCC"> the media file so basically</font>

208
00:09:03,870 --> 00:09:07,500
<font color="#E5E5E5">all of these actions are triggered</font>

209
00:09:05,370 --> 00:09:09,779
automatically<font color="#CCCCCC"> there is no server running</font>

210
00:09:07,500 --> 00:09:13,620
monitoring all<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> is only triggered</font>

211
00:09:09,779 --> 00:09:17,430
when the notifications run if we jump

212
00:09:13,620 --> 00:09:19,380
back<font color="#CCCCCC"> to actually just refresh this we</font>

213
00:09:17,430 --> 00:09:21,089
can see Marcus fail the other job<font color="#E5E5E5"> that</font>

214
00:09:19,380 --> 00:09:23,970
<font color="#E5E5E5">failed and we can see</font><font color="#CCCCCC"> that elysium</font>

215
00:09:21,089 --> 00:09:26,070
trailer is now marked as completed if<font color="#E5E5E5"> I</font>

216
00:09:23,970 --> 00:09:27,660
go back<font color="#E5E5E5"> here and refresh we can see one</font>

217
00:09:26,070 --> 00:09:29,190
of the files disappeared that's one that

218
00:09:27,660 --> 00:09:31,589
successfully encoded because we cleaned

219
00:09:29,190 --> 00:09:33,690
up the job and we can see in the

220
00:09:31,589 --> 00:09:35,940
different pocket that<font color="#CCCCCC"> when you have a</font>

221
00:09:33,690 --> 00:09:38,550
new file that is it just go to file all

222
00:09:35,940 --> 00:09:45,120
of this triggered by lambda in a

223
00:09:38,550 --> 00:09:47,160
<font color="#E5E5E5">automated fashion so what if we don't</font>

224
00:09:45,120 --> 00:09:48,120
use AWS all of these<font color="#E5E5E5"> events are pretty</font>

225
00:09:47,160 --> 00:09:51,029
useless if we have our own

226
00:09:48,120 --> 00:09:54,180
infrastructure well not<font color="#CCCCCC"> really because</font>

227
00:09:51,029 --> 00:09:56,490
we can still have the<font color="#E5E5E5"> API gateway there</font>

228
00:09:54,180 --> 00:09:59,160
are two major frameworks that allows<font color="#CCCCCC"> us</font>

229
00:09:56,490 --> 00:10:01,680
to<font color="#CCCCCC"> use the API gateway in a much less</font>

230
00:09:59,160 --> 00:10:04,949
painful fashion using it raw can be a

231
00:10:01,680 --> 00:10:06,209
<font color="#E5E5E5">little bit of a tedious process there's</font>

232
00:10:04,949 --> 00:10:07,769
<font color="#E5E5E5">one called serverless which is based</font>

233
00:10:06,209 --> 00:10:10,109
around note and then there's a

234
00:10:07,769 --> 00:10:13,529
relatively new one called chalice which

235
00:10:10,110 --> 00:10:17,610
is based on<font color="#E5E5E5"> Python which I highly prefer</font>

236
00:10:13,529 --> 00:10:19,470
so of<font color="#E5E5E5"> course i went with chalice it's</font>

237
00:10:17,610 --> 00:10:21,510
basically it looks like flask if you're

238
00:10:19,470 --> 00:10:23,730
familiar with flash for<font color="#E5E5E5"> Python it has</font>

239
00:10:21,510 --> 00:10:25,380
pretty much the<font color="#E5E5E5"> same API it will create</font>

240
00:10:23,730 --> 00:10:27,269
all the<font color="#E5E5E5"> API gateway mapping functions</font>

241
00:10:25,380 --> 00:10:30,449
for you and it also generates what

242
00:10:27,269 --> 00:10:32,220
<font color="#E5E5E5">amazon calls an</font><font color="#CCCCCC"> IAM policy so the way</font>

243
00:10:30,449 --> 00:10:34,769
things work is if you're executing them

244
00:10:32,220 --> 00:10:37,529
in AWS you have to give them permissions

245
00:10:34,769 --> 00:10:39,120
to use other AWS resources you can't

246
00:10:37,529 --> 00:10:41,160
just<font color="#E5E5E5"> have lent that get permission</font><font color="#CCCCCC"> to</font>

247
00:10:39,120 --> 00:10:42,959
use everything in your AWS account so

248
00:10:41,160 --> 00:10:45,000
what you do is you generate an IM policy

249
00:10:42,959 --> 00:10:47,638
that says this function when it runs can

250
00:10:45,000 --> 00:10:49,260
access these resources and chalice will

251
00:10:47,639 --> 00:10:50,790
do that for you in<font color="#E5E5E5"> most cases there</font><font color="#CCCCCC"> is</font>

252
00:10:49,260 --> 00:10:53,459
also case where it doesn't<font color="#E5E5E5"> apply</font>

253
00:10:50,790 --> 00:10:55,230
unfortunately and can<font color="#CCCCCC"> you start</font><font color="#E5E5E5"> it with</font>

254
00:10:53,459 --> 00:10:57,719
a simple as saying tip install chalice

255
00:10:55,230 --> 00:11:00,110
you<font color="#CCCCCC"> project and then deploy the project</font>

256
00:10:57,720 --> 00:11:04,730
so i'll try and show you<font color="#CCCCCC"> how that works</font>

257
00:11:00,110 --> 00:11:07,310
we'll<font color="#E5E5E5"> just this yeah this zoom is</font>

258
00:11:04,730 --> 00:11:14,750
probably going to<font color="#E5E5E5"> be an issue here</font><font color="#CCCCCC"> we'll</font>

259
00:11:07,310 --> 00:11:17,149
<font color="#E5E5E5">just try</font><font color="#CCCCCC"> and do this as well so we have</font>

260
00:11:14,750 --> 00:11:21,320
a new gap<font color="#CCCCCC"> chat</font><font color="#E5E5E5"> install so we say</font>

261
00:11:17,149 --> 00:11:27,920
challenge new project let's see porn

262
00:11:21,320 --> 00:11:31,519
Hank demo<font color="#CCCCCC"> this is done right one this</font>

263
00:11:27,920 --> 00:11:32,899
one<font color="#E5E5E5"> of course need to be in the right</font>

264
00:11:31,519 --> 00:11:39,829
python environment otherwise it doesn't

265
00:11:32,899 --> 00:11:43,730
work chalice new project for an hack

266
00:11:39,829 --> 00:11:45,140
demo and it generates a new folder we

267
00:11:43,730 --> 00:11:47,600
can see the end<font color="#E5E5E5"> of that for neck demo</font>

268
00:11:45,140 --> 00:11:49,819
and then we can do shallots deploy and

269
00:11:47,600 --> 00:11:52,430
it will deploy a simple hello world

270
00:11:49,820 --> 00:11:53,930
function for us to start with as usually

271
00:11:52,430 --> 00:11:55,160
runs through all<font color="#E5E5E5"> the different actions</font>

272
00:11:53,930 --> 00:11:59,120
that we would<font color="#CCCCCC"> have to do manually but</font>

273
00:11:55,160 --> 00:12:00,620
this automates it a little bit and<font color="#E5E5E5"> of</font>

274
00:11:59,120 --> 00:12:02,300
<font color="#CCCCCC">course it's also slow now that I'm</font>

275
00:12:00,620 --> 00:12:06,860
demoing it because that<font color="#CCCCCC"> would be too</font>

276
00:12:02,300 --> 00:12:10,010
easy otherwise anytime I can<font color="#E5E5E5"> actually up</font>

277
00:12:06,860 --> 00:12:12,110
there<font color="#E5E5E5"> we go first time deployment a 2.2</font>

278
00:12:10,010 --> 00:12:13,640
dev and then gives us a nice URL which

279
00:12:12,110 --> 00:12:17,060
we can then of course call with curls

280
00:12:13,640 --> 00:12:19,430
see that actually is working notice also

281
00:12:17,060 --> 00:12:20,660
it sets up https by default which is

282
00:12:19,430 --> 00:12:23,300
very<font color="#E5E5E5"> nice you don't have to handle any</font>

283
00:12:20,660 --> 00:12:24,680
<font color="#E5E5E5">of the let's encrypt stuff yourself call</font>

284
00:12:23,300 --> 00:12:28,099
the api and it should give us a hello

285
00:12:24,680 --> 00:12:29,750
world Jason reply there<font color="#CCCCCC"> is now if we</font>

286
00:12:28,100 --> 00:12:34,250
want to<font color="#E5E5E5"> look at how the code actually</font>

287
00:12:29,750 --> 00:12:37,100
looks let's open an editor with this and

288
00:12:34,250 --> 00:12:39,199
you<font color="#E5E5E5"> can see we have a simple flask like</font>

289
00:12:37,100 --> 00:12:42,140
a brute<font color="#E5E5E5"> and it just returns hello world</font>

290
00:12:39,199 --> 00:12:46,880
now that is much fun so<font color="#E5E5E5"> I have a</font>

291
00:12:42,140 --> 00:12:53,949
pre-prepared a changed version I'll just

292
00:12:46,880 --> 00:12:53,949
grab that will just copy

293
00:12:58,510 --> 00:13:06,280
yeah that should give us a modified

294
00:13:03,460 --> 00:13:08,140
version yeah this now has two new

295
00:13:06,280 --> 00:13:10,300
functions it has a notify<font color="#CCCCCC"> that sends a</font>

296
00:13:08,140 --> 00:13:11,860
text message and because i don't<font color="#CCCCCC"> want</font>

297
00:13:10,300 --> 00:13:15,069
everybody just calling that I marked it

298
00:13:11,860 --> 00:13:16,570
as a beaky required that's a AP I get

299
00:13:15,070 --> 00:13:18,400
wave function that basically means it'll

300
00:13:16,570 --> 00:13:20,920
enforce authentication on this function

301
00:13:18,400 --> 00:13:24,340
so we don't have<font color="#E5E5E5"> people sending me texts</font>

302
00:13:20,920 --> 00:13:25,900
using this API just randomly and then<font color="#E5E5E5"> I</font>

303
00:13:24,340 --> 00:13:28,030
also created a function that looks at

304
00:13:25,900 --> 00:13:31,209
the encoding status of the files<font color="#CCCCCC"> that</font>

305
00:13:28,030 --> 00:13:34,150
the table we just saw<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> previous</font>

306
00:13:31,210 --> 00:13:36,550
demo so if<font color="#CCCCCC"> we now go back to jealous we</font>

307
00:13:34,150 --> 00:13:39,069
just need to do one<font color="#CCCCCC"> more thing because</font>

308
00:13:36,550 --> 00:13:41,290
as I mentioned jealous also do<font color="#CCCCCC"> thus the</font>

309
00:13:39,070 --> 00:13:43,780
<font color="#CCCCCC">IM policies in this case with this</font>

310
00:13:41,290 --> 00:13:45,579
<font color="#CCCCCC">project unfortunately it fails so</font>

311
00:13:43,780 --> 00:13:52,839
luckily also have a prepared version of

312
00:13:45,580 --> 00:13:58,030
that it's called<font color="#CCCCCC"> Paula</font><font color="#E5E5E5"> situation copy to</font>

313
00:13:52,840 --> 00:14:03,880
here and then i'll say<font color="#E5E5E5"> jealous deploy</font>

314
00:13:58,030 --> 00:14:05,980
<font color="#E5E5E5">know also jen policy this should update</font>

315
00:14:03,880 --> 00:14:10,630
the function in the development

316
00:14:05,980 --> 00:14:12,400
environment of our api gateway and this

317
00:14:10,630 --> 00:14:13,990
means that<font color="#E5E5E5"> if we now call encoding</font>

318
00:14:12,400 --> 00:14:15,910
status on this api we should be able to

319
00:14:13,990 --> 00:14:22,180
see the status of the failing code that

320
00:14:15,910 --> 00:14:24,339
we had just before so let's do curl copy

321
00:14:22,180 --> 00:14:27,099
paste this and then we<font color="#E5E5E5"> have encoding</font>

322
00:14:24,340 --> 00:14:29,860
status<font color="#E5E5E5"> what's the new function steering</font>

323
00:14:27,100 --> 00:14:32,620
<font color="#E5E5E5">MPD and it should list the encoding</font>

324
00:14:29,860 --> 00:14:34,210
status from the dynamo DB table and it

325
00:14:32,620 --> 00:14:35,680
us so everything is working it now

326
00:14:34,210 --> 00:14:37,930
<font color="#E5E5E5">actually talking to a database on the</font>

327
00:14:35,680 --> 00:14:41,500
back end<font color="#E5E5E5"> and it didn't take more than</font>

328
00:14:37,930 --> 00:14:43,750
just<font color="#CCCCCC"> a few left few lines of code to</font>

329
00:14:41,500 --> 00:14:45,700
<font color="#E5E5E5">check the database also note that</font>

330
00:14:43,750 --> 00:14:47,530
because<font color="#CCCCCC"> i'm running all of this in AWS</font><font color="#E5E5E5"> I</font>

331
00:14:45,700 --> 00:14:49,510
don't have<font color="#E5E5E5"> to have</font><font color="#CCCCCC"> any passwords for the</font>

332
00:14:47,530 --> 00:14:51,730
database in here I'm basically<font color="#CCCCCC"> just</font>

333
00:14:49,510 --> 00:14:53,980
asking for a dynamo<font color="#E5E5E5"> DB resource and it</font>

334
00:14:51,730 --> 00:14:56,080
just gives<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to me because</font><font color="#E5E5E5"> I have an IM</font>

335
00:14:53,980 --> 00:14:58,480
policy that says this lamp<font color="#CCCCCC"> I can ask</font>

336
00:14:56,080 --> 00:14:59,890
this table at<font color="#E5E5E5"> any time so I don't have</font>

337
00:14:58,480 --> 00:15:01,090
to have passwords in the code on a

338
00:14:59,890 --> 00:15:04,560
country file somewhere<font color="#E5E5E5"> I have it to</font>

339
00:15:01,090 --> 00:15:04,560
<font color="#CCCCCC">maintain which is a nice benefit</font>

340
00:15:06,050 --> 00:15:12,769
but that's all very nice but what if I

341
00:15:09,170 --> 00:15:14,750
have a whatever have an existing<font color="#E5E5E5"> aw</font>

342
00:15:12,769 --> 00:15:16,610
non-date obvious implementation and I

343
00:15:14,750 --> 00:15:19,220
don't want to start<font color="#E5E5E5"> building everything</font>

344
00:15:16,610 --> 00:15:21,800
from scratch with chalice well actually

345
00:15:19,220 --> 00:15:24,290
there's a way for that<font color="#E5E5E5"> as well as a</font>

346
00:15:21,800 --> 00:15:27,500
<font color="#E5E5E5">project called</font><font color="#CCCCCC"> sabbah and and of</font><font color="#E5E5E5"> course</font>

347
00:15:24,290 --> 00:15:29,300
this is this again I like Python it can

348
00:15:27,500 --> 00:15:31,910
actually<font color="#E5E5E5"> take pretty much any Python</font>

349
00:15:29,300 --> 00:15:34,490
application that has a via wsgi

350
00:15:31,910 --> 00:15:35,689
interface and run it on AWS lambda so

351
00:15:34,490 --> 00:15:37,790
that means you can take<font color="#E5E5E5"> something like</font>

352
00:15:35,690 --> 00:15:40,310
written in like a general framework

353
00:15:37,790 --> 00:15:42,920
flask it pretty<font color="#E5E5E5"> much any other framework</font>

354
00:15:40,310 --> 00:15:44,300
and you can have a sabot deployed for

355
00:15:42,920 --> 00:15:46,250
you in AWS lambda so you can have a

356
00:15:44,300 --> 00:15:49,699
Django application running completely

357
00:15:46,250 --> 00:15:51,320
without servers anywhere and just like

358
00:15:49,700 --> 00:15:53,690
jealous it's very simple you<font color="#CCCCCC"> installed</font>

359
00:15:51,320 --> 00:15:55,250
<font color="#CCCCCC">sabba you</font><font color="#E5E5E5"> se sepa in it and then you</font>

360
00:15:53,690 --> 00:16:00,620
basically deployed and it will run the

361
00:15:55,250 --> 00:16:02,660
application in AWS and<font color="#E5E5E5"> I have a demo of</font>

362
00:16:00,620 --> 00:16:12,079
that actually as well so let's grab the

363
00:16:02,660 --> 00:16:16,969
separation we have here a pre-prepared

364
00:16:12,079 --> 00:16:19,160
flask application if I can't the app<font color="#CCCCCC"> p</font>

365
00:16:16,970 --> 00:16:21,350
you can see<font color="#CCCCCC"> that there's completely</font>

366
00:16:19,160 --> 00:16:24,319
standard flask application nothing has

367
00:16:21,350 --> 00:16:28,520
really been changed we're just<font color="#E5E5E5"> gonna run</font>

368
00:16:24,320 --> 00:16:30,020
<font color="#CCCCCC">sabbah in it and it asks us a bunch</font><font color="#E5E5E5"> of</font>

369
00:16:28,520 --> 00:16:31,250
questions like which environment where

370
00:16:30,020 --> 00:16:33,620
you want to deploy it in let's say<font color="#E5E5E5"> we</font>

371
00:16:31,250 --> 00:16:35,660
want in development it also creates an

372
00:16:33,620 --> 00:16:38,779
s3 bucket to handle some of the data

373
00:16:35,660 --> 00:16:40,010
storage will ask the default name oh and

374
00:16:38,779 --> 00:16:41,899
then<font color="#E5E5E5"> I discovered that there's a flask</font>

375
00:16:40,010 --> 00:16:43,939
application here and do you just want to

376
00:16:41,899 --> 00:16:46,970
run the beautiful application yes we do

377
00:16:43,940 --> 00:16:50,060
good there is a settings file perfect

378
00:16:46,970 --> 00:16:51,680
that looks<font color="#CCCCCC"> ok to me one</font><font color="#E5E5E5"> thing in this</font>

379
00:16:50,060 --> 00:16:53,599
case is<font color="#CCCCCC"> I</font><font color="#E5E5E5"> want to</font><font color="#CCCCCC"> change the Amazon</font>

380
00:16:51,680 --> 00:16:56,959
region because I by<font color="#E5E5E5"> default it will try</font>

381
00:16:53,600 --> 00:16:59,630
to run it in the US and that sucks so

382
00:16:56,959 --> 00:17:04,309
I'll just modify this and say<font color="#CCCCCC"> ok we</font>

383
00:16:59,630 --> 00:17:11,740
actually want the region EU central one

384
00:17:04,309 --> 00:17:11,740
and then we asked Sarah to deploy it

385
00:17:12,630 --> 00:17:20,130
<font color="#CCCCCC">sabbah unfortunately has the slight</font>

386
00:17:17,640 --> 00:17:25,319
drawback that it will take a lot of<font color="#CCCCCC"> time</font>

387
00:17:20,130 --> 00:17:27,839
to create API gateway<font color="#CCCCCC"> roots and because</font>

388
00:17:25,319 --> 00:17:29,909
it has this sort of it doesn't yet

389
00:17:27,839 --> 00:17:32,760
understand the mapping of your url so<font color="#E5E5E5"> it</font>

390
00:17:29,910 --> 00:17:34,350
creates just<font color="#CCCCCC"> roots for everything and as</font>

391
00:17:32,760 --> 00:17:36,780
you see here it creates a thousand<font color="#E5E5E5"> and</font>

392
00:17:34,350 --> 00:17:38,610
seven roots of that it works but<font color="#CCCCCC"> it is a</font>

393
00:17:36,780 --> 00:17:40,350
little bit tedious to deploy it first

394
00:17:38,610 --> 00:17:42,959
time second time it happens

395
00:17:40,350 --> 00:17:44,340
automatically but once it's probably a

396
00:17:42,960 --> 00:17:46,290
bi gave way we can call it<font color="#CCCCCC"> the same as</font>

397
00:17:44,340 --> 00:17:56,159
<font color="#E5E5E5">we called the chalice application it</font>

398
00:17:46,290 --> 00:17:57,990
just works<font color="#E5E5E5"> out of the box so lambda</font>

399
00:17:56,160 --> 00:17:59,610
gives us the ability to completely

400
00:17:57,990 --> 00:18:01,710
automated scaling we don't<font color="#E5E5E5"> have to set</font>

401
00:17:59,610 --> 00:18:03,899
up how many lambda instances we run run

402
00:18:01,710 --> 00:18:05,820
on we don't<font color="#E5E5E5"> have to prepare a preheat</font>

403
00:18:03,900 --> 00:18:07,920
servers we<font color="#E5E5E5"> don't even have to care about</font>

404
00:18:05,820 --> 00:18:09,419
up installing the operating system all

405
00:18:07,920 --> 00:18:11,010
of that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> done automatically we don't</font>

406
00:18:09,420 --> 00:18:12,840
have to update the operating system we

407
00:18:11,010 --> 00:18:16,170
have<font color="#E5E5E5"> to only update the code that we put</font>

408
00:18:12,840 --> 00:18:18,179
into it we pay only for requests which

409
00:18:16,170 --> 00:18:19,740
means that<font color="#E5E5E5"> we can pretty much predict</font>

410
00:18:18,180 --> 00:18:23,250
out what our cost is based on how many

411
00:18:19,740 --> 00:18:25,110
<font color="#E5E5E5">times our api</font><font color="#CCCCCC"> api is called and twenty</font>

412
00:18:23,250 --> 00:18:28,590
cents per 1 million requests doesn't

413
00:18:25,110 --> 00:18:30,209
seem<font color="#E5E5E5"> like</font><font color="#CCCCCC"> a lot of money considering and</font>

414
00:18:28,590 --> 00:18:31,620
also that's by the way the first million

415
00:18:30,210 --> 00:18:33,630
is free for you to experiment with if

416
00:18:31,620 --> 00:18:35,969
you want to try<font color="#CCCCCC"> it</font><font color="#E5E5E5"> out and there is some</font>

417
00:18:33,630 --> 00:18:37,860
some issues with it you can<font color="#CCCCCC"> only have</font>

418
00:18:35,970 --> 00:18:40,380
code that's about 50<font color="#E5E5E5"> megabytes ships</font>

419
00:18:37,860 --> 00:18:42,479
because what happens is when you run the

420
00:18:40,380 --> 00:18:46,020
app when you run the lambda function

421
00:18:42,480 --> 00:18:47,700
amazon will take a pretty much an empty

422
00:18:46,020 --> 00:18:49,560
virtual<font color="#CCCCCC"> machine with just a mess on</font>

423
00:18:47,700 --> 00:18:51,630
linux on it it'll<font color="#CCCCCC"> take down the package</font>

424
00:18:49,560 --> 00:18:54,000
on<font color="#CCCCCC"> the machine unzip it and run it and</font>

425
00:18:51,630 --> 00:18:55,620
for<font color="#E5E5E5"> that process to be fast enough for</font>

426
00:18:54,000 --> 00:18:57,660
the first<font color="#E5E5E5"> start off of the new virtual</font>

427
00:18:55,620 --> 00:19:00,209
instance they have to keep it somewhat

428
00:18:57,660 --> 00:19:02,430
contained it<font color="#E5E5E5"> also has a that's actually</font>

429
00:19:00,210 --> 00:19:04,620
<font color="#CCCCCC">a typo that's the thousand concurrent</font>

430
00:19:02,430 --> 00:19:06,030
requests that's the default limit

431
00:19:04,620 --> 00:19:09,090
although<font color="#E5E5E5"> that can be raised if you ask</font>

432
00:19:06,030 --> 00:19:11,190
amazon for<font color="#CCCCCC"> it but it means that</font><font color="#E5E5E5"> you can</font>

433
00:19:09,090 --> 00:19:13,740
scale and pretty much<font color="#E5E5E5"> not worry about</font>

434
00:19:11,190 --> 00:19:15,300
<font color="#E5E5E5">having a virtual images you don't have</font>

435
00:19:13,740 --> 00:19:17,910
to worry about creating darker images or

436
00:19:15,300 --> 00:19:22,110
anything just<font color="#E5E5E5"> upload the code and it</font>

437
00:19:17,910 --> 00:19:24,120
runs with<font color="#CCCCCC"> Python Java note and since it</font>

438
00:19:22,110 --> 00:19:25,830
run on runs on a standard ms on<font color="#CCCCCC"> linux</font>

439
00:19:24,120 --> 00:19:26,389
<font color="#E5E5E5">box and there's no</font><font color="#CCCCCC"> sandboxing you can</font>

440
00:19:25,830 --> 00:19:28,879
actually<font color="#CCCCCC"> also</font>

441
00:19:26,390 --> 00:19:31,490
upload custom binaries that are compiled

442
00:19:28,880 --> 00:19:33,980
for<font color="#E5E5E5"> amazon linux and you can just run in</font>

443
00:19:31,490 --> 00:19:35,900
from<font color="#E5E5E5"> javascript run them from python and</font>

444
00:19:33,980 --> 00:19:38,930
<font color="#E5E5E5">it'll work as well you get access to the</font>

445
00:19:35,900 --> 00:19:42,770
whole box no weird sandboxing anywhere

446
00:19:38,930 --> 00:19:44,510
another nice feature is we have the API

447
00:19:42,770 --> 00:19:46,850
<font color="#CCCCCC">guide rate at</font><font color="#E5E5E5"> gateway that's in front of</font>

448
00:19:44,510 --> 00:19:48,440
it if we're calling the API it has a

449
00:19:46,850 --> 00:19:51,230
building authentication and it actually

450
00:19:48,440 --> 00:19:53,750
has a concept called usage plans so if

451
00:19:51,230 --> 00:19:55,790
you have third parties using your API

452
00:19:53,750 --> 00:19:58,040
you don't want one third party basically

453
00:19:55,790 --> 00:20:00,230
completely hammering it for no apparent

454
00:19:58,040 --> 00:20:01,580
reason<font color="#E5E5E5"> so you can set up and say</font><font color="#CCCCCC"> okay</font>

455
00:20:00,230 --> 00:20:04,850
these users fall into this category

456
00:20:01,580 --> 00:20:07,970
they'll be throttled to 100 requests per

457
00:20:04,850 --> 00:20:09,830
minute by default and and they only get

458
00:20:07,970 --> 00:20:11,990
one hundred thousand requests per month

459
00:20:09,830 --> 00:20:13,909
and<font color="#CCCCCC"> then you can actually have different</font>

460
00:20:11,990 --> 00:20:16,040
users<font color="#CCCCCC"> plans so you can put them into bug</font>

461
00:20:13,910 --> 00:20:18,740
and say okay this is it like small users

462
00:20:16,040 --> 00:20:20,120
<font color="#E5E5E5">of medium large and so on and also has</font>

463
00:20:18,740 --> 00:20:21,590
devastating production so you can

464
00:20:20,120 --> 00:20:36,350
maintain different versions of your API

465
00:20:21,590 --> 00:20:40,870
questions apparent<font color="#CCCCCC"> no.1 doesn't</font><font color="#E5E5E5"> seem</font>

466
00:20:36,350 --> 00:20:40,870
<font color="#E5E5E5">like it go let's give a look at hand</font>

467
00:20:41,810 --> 00:20:43,899
you

