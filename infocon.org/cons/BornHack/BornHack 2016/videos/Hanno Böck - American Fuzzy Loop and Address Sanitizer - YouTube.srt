1
00:00:00,000 --> 00:00:16,199
hello yeah so<font color="#E5E5E5"> I want to present a couple</font>

2
00:00:14,099 --> 00:00:19,380
of tools to you today that I find

3
00:00:16,199 --> 00:00:20,939
extremely valuable in finding<font color="#CCCCCC"> bucks and</font>

4
00:00:19,380 --> 00:00:24,810
reducing the<font color="#E5E5E5"> number of blacks in our</font>

5
00:00:20,939 --> 00:00:27,150
software and I feel that not enough

6
00:00:24,810 --> 00:00:30,509
people know about these tools so yeah

7
00:00:27,150 --> 00:00:33,480
I'm trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> change that first a quick</font>

8
00:00:30,510 --> 00:00:36,030
introduction about myself so um yeah I'm

9
00:00:33,480 --> 00:00:38,730
ha no I work one as a freelance

10
00:00:36,030 --> 00:00:41,160
journalist and as I say hecka because I

11
00:00:38,730 --> 00:00:43,199
don't like<font color="#CCCCCC"> to say</font><font color="#E5E5E5"> security researcher or</font>

12
00:00:41,160 --> 00:00:46,140
security expert because the other sounds

13
00:00:43,200 --> 00:00:49,469
a bit stupid so I say I'm a hacker I

14
00:00:46,140 --> 00:00:51,480
write for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> German online magazine</font>

15
00:00:49,469 --> 00:00:54,300
golem and also occasionally for other

16
00:00:51,480 --> 00:00:57,120
publications and I write a monthly

17
00:00:54,300 --> 00:00:59,608
newsletter about TLS and I'm currently

18
00:00:57,120 --> 00:01:03,390
also trying to<font color="#E5E5E5"> fix some things in TLS</font>

19
00:00:59,609 --> 00:01:05,580
but I talk about<font color="#CCCCCC"> that tomorrow and I</font>

20
00:01:03,390 --> 00:01:08,939
also run the<font color="#CCCCCC"> filing project which is an</font>

21
00:01:05,580 --> 00:01:09,929
initiative funded by the linux

22
00:01:08,939 --> 00:01:13,199
foundation's core infrastructure

23
00:01:09,930 --> 00:01:18,869
initiative so yeah<font color="#E5E5E5"> I get paid by them</font>

24
00:01:13,200 --> 00:01:21,479
for<font color="#CCCCCC"> doing this so here I want to show</font>

25
00:01:18,869 --> 00:01:24,390
you an example for a relatively

26
00:01:21,479 --> 00:01:28,100
straightforward<font color="#E5E5E5"> back can anyone already</font>

27
00:01:24,390 --> 00:01:28,100
see what the bug here is

28
00:01:33,840 --> 00:01:39,149
<font color="#E5E5E5">okay so what's happening here is</font>

29
00:01:35,969 --> 00:01:42,390
actually<font color="#CCCCCC"> there's a memory allocation for</font>

30
00:01:39,149 --> 00:01:46,950
a list of pointers or an area of

31
00:01:42,390 --> 00:01:51,149
pointers and it wants to allocate space

32
00:01:46,950 --> 00:01:54,149
for arc see number of<font color="#E5E5E5"> pointers plus two</font>

33
00:01:51,149 --> 00:01:57,119
more pointers plus a<font color="#E5E5E5"> zero Terminator and</font>

34
00:01:54,149 --> 00:01:59,399
<font color="#E5E5E5">then it multiplies that with the size of</font>

35
00:01:57,119 --> 00:02:01,590
the pointer but in order<font color="#E5E5E5"> to do this</font>

36
00:01:59,399 --> 00:02:04,890
correctly you need brackets around the

37
00:02:01,590 --> 00:02:07,200
addition because what you're doing<font color="#E5E5E5"> here</font>

38
00:02:04,890 --> 00:02:10,590
is<font color="#E5E5E5"> using three times the size of the</font>

39
00:02:07,200 --> 00:02:14,519
pointer + RZ and not arc c times<font color="#CCCCCC"> the</font>

40
00:02:10,590 --> 00:02:17,760
size of the pointer everyone got that so

41
00:02:14,519 --> 00:02:20,099
and what it ends up being<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that your</font>

42
00:02:17,760 --> 00:02:21,959
allocated<font color="#E5E5E5"> space is too small and it's</font>

43
00:02:20,099 --> 00:02:25,589
it's a pretty classic buffer overflow

44
00:02:21,959 --> 00:02:28,560
and this is a real bug it was inked

45
00:02:25,590 --> 00:02:30,510
gnome session and yeah the interesting

46
00:02:28,560 --> 00:02:33,540
thing is this back happens every time

47
00:02:30,510 --> 00:02:38,010
you start<font color="#CCCCCC"> know so one might wonder why</font>

48
00:02:33,540 --> 00:02:40,410
it hasn't been found before and I

49
00:02:38,010 --> 00:02:43,679
reported a couple of other box to<font color="#CCCCCC"> nome</font>

50
00:02:40,410 --> 00:02:45,989
components recently<font color="#CCCCCC"> too out</font><font color="#E5E5E5"> of bounds</font>

51
00:02:43,680 --> 00:02:48,959
<font color="#E5E5E5">reads in</font><font color="#CCCCCC"> g lib and one out of one treats</font>

52
00:02:45,989 --> 00:02:51,359
in<font color="#CCCCCC"> pango and and all of those were</font>

53
00:02:48,959 --> 00:02:53,549
triggered by their test suite so just

54
00:02:51,359 --> 00:02:57,450
running my check would trigger these

55
00:02:53,549 --> 00:03:00,810
bugs and to be fair<font color="#E5E5E5"> I also have to</font>

56
00:02:57,450 --> 00:03:03,388
<font color="#E5E5E5">mention KDE I found a use after free</font>

57
00:03:00,810 --> 00:03:07,139
back in cume equal just like the bill

58
00:03:03,389 --> 00:03:09,150
tool for<font color="#E5E5E5"> Cutie and I found several out</font>

59
00:03:07,139 --> 00:03:13,560
of Monster eats actually in QT itself

60
00:03:09,150 --> 00:03:15,630
and in k1 the reason there is there's a

61
00:03:13,560 --> 00:03:17,459
very strange behavior of the ex a p.i

62
00:03:15,630 --> 00:03:19,829
and<font color="#E5E5E5"> I'm not entirely sure whether I</font>

63
00:03:17,459 --> 00:03:24,180
should propose to change the IP I or

64
00:03:19,829 --> 00:03:29,459
proposed to fix those<font color="#E5E5E5"> bugs but anyway so</font>

65
00:03:24,180 --> 00:03:31,380
they were similar<font color="#E5E5E5"> bugs in KDE and the</font>

66
00:03:29,459 --> 00:03:33,359
bottom line<font color="#CCCCCC"> here's all</font><font color="#E5E5E5"> of these parks</font>

67
00:03:31,380 --> 00:03:37,290
can be basically trivially found with

68
00:03:33,359 --> 00:03:40,109
the tool called address sanitizer so by

69
00:03:37,290 --> 00:03:43,530
finding these parks I know for<font color="#CCCCCC"> sure that</font>

70
00:03:40,109 --> 00:03:45,730
both KDE and gnome never tried to test

71
00:03:43,530 --> 00:03:47,560
their software with address any ties

72
00:03:45,730 --> 00:03:49,780
because as I said these facts happen

73
00:03:47,560 --> 00:03:51,640
just by starting it so if they ever

74
00:03:49,780 --> 00:03:55,000
tested it with it they must have run

75
00:03:51,640 --> 00:03:58,089
into them so they I'm sure they don't do

76
00:03:55,000 --> 00:04:00,640
that at retina<font color="#CCCCCC"> Tyler's a</font><font color="#E5E5E5"> feature which</font>

77
00:03:58,090 --> 00:04:04,060
<font color="#E5E5E5">is</font><font color="#CCCCCC"> part of your standard compiler if</font>

78
00:04:00,640 --> 00:04:07,480
you're using a linux system so both GCC

79
00:04:04,060 --> 00:04:09,760
and si Lang contain it integrated and

80
00:04:07,480 --> 00:04:15,369
it's<font color="#E5E5E5"> your just enable it by adding a</font>

81
00:04:09,760 --> 00:04:19,358
compiler flag so and that's like how

82
00:04:15,370 --> 00:04:22,300
easy you can find these bugs for example

83
00:04:19,358 --> 00:04:24,940
the<font color="#CCCCCC"> jeely park you're just like</font>

84
00:04:22,300 --> 00:04:27,370
configure I mean you know this configure

85
00:04:24,940 --> 00:04:29,620
make in make install<font color="#E5E5E5"> when this you may</font>

86
00:04:27,370 --> 00:04:31,990
configure you add this<font color="#CCCCCC"> F sanitized</font>

87
00:04:29,620 --> 00:04:34,090
address you add a G because that adds

88
00:04:31,990 --> 00:04:36,639
more debugging information and then you

89
00:04:34,090 --> 00:04:39,310
get more useful error messages the same

90
00:04:36,639 --> 00:04:41,050
<font color="#E5E5E5">thing for c++ flags and same for the</font>

91
00:04:39,310 --> 00:04:43,449
link of legs because it needs to link

92
00:04:41,050 --> 00:04:45,070
some library and then you built the

93
00:04:43,449 --> 00:04:48,370
thing and then you run the test suite

94
00:04:45,070 --> 00:04:50,979
and then you may get these address any

95
00:04:48,370 --> 00:04:55,150
tighter error messages and can learn

96
00:04:50,979 --> 00:04:57,400
something<font color="#CCCCCC"> about box so I mean I hope we</font>

97
00:04:55,150 --> 00:05:04,510
can all<font color="#CCCCCC"> agree that running these three</font>

98
00:04:57,400 --> 00:05:06,880
commands is not<font color="#E5E5E5"> overly difficult so</font>

99
00:05:04,510 --> 00:05:09,760
technically what address sanitizer is

100
00:05:06,880 --> 00:05:12,039
doing is it keeps a shadow memory which

101
00:05:09,760 --> 00:05:15,639
kind<font color="#E5E5E5"> of records which parts of the</font>

102
00:05:12,039 --> 00:05:18,370
memory you're using are currently valid

103
00:05:15,639 --> 00:05:20,950
memory to use or not so if you're doing

104
00:05:18,370 --> 00:05:24,099
a memory allocation it<font color="#E5E5E5"> records okay from</font>

105
00:05:20,950 --> 00:05:26,440
<font color="#E5E5E5">here to there that's valid memory if you</font>

106
00:05:24,099 --> 00:05:28,840
call<font color="#CCCCCC"> a function the stack that's valid</font>

107
00:05:26,440 --> 00:05:31,360
memory but it puts all<font color="#E5E5E5"> those poison</font>

108
00:05:28,840 --> 00:05:34,869
bytes in between so if it does it stack

109
00:05:31,360 --> 00:05:37,120
allocation unlike in a<font color="#E5E5E5"> normal c program</font>

110
00:05:34,870 --> 00:05:39,250
the stack is<font color="#E5E5E5"> just one block but with</font>

111
00:05:37,120 --> 00:05:41,830
addressing it aside puts bytes between

112
00:05:39,250 --> 00:05:44,500
the variables so if you read out of the

113
00:05:41,830 --> 00:05:49,090
bounds of<font color="#CCCCCC"> a variable</font><font color="#E5E5E5"> it can detect that</font>

114
00:05:44,500 --> 00:05:52,090
and most<font color="#CCCCCC"> notably it finds all kinds of</font>

115
00:05:49,090 --> 00:05:54,340
out<font color="#CCCCCC"> of bounds</font><font color="#E5E5E5"> XS both read and write and</font>

116
00:05:52,090 --> 00:05:56,710
it finds use after three bugs and

117
00:05:54,340 --> 00:05:58,549
especially the<font color="#E5E5E5"> out of bounds read and</font>

118
00:05:56,710 --> 00:06:00,500
the user after free very

119
00:05:58,550 --> 00:06:02,060
they don't crash and it's often<font color="#CCCCCC"> very</font>

120
00:06:00,500 --> 00:06:05,150
hard to<font color="#E5E5E5"> D back when you have such a</font>

121
00:06:02,060 --> 00:06:07,580
problem because it may just be that most

122
00:06:05,150 --> 00:06:10,310
of the time nothing bad happens and in

123
00:06:07,580 --> 00:06:14,930
some rare corner cases something crashes

124
00:06:10,310 --> 00:06:17,240
or something behaves in a weird way just

125
00:06:14,930 --> 00:06:20,210
<font color="#CCCCCC">to so you get an idea what these bugs</font>

126
00:06:17,240 --> 00:06:22,850
<font color="#E5E5E5">actually mean this is a classic out of</font>

127
00:06:20,210 --> 00:06:28,099
bounds read<font color="#E5E5E5"> excess so what we have here</font>

128
00:06:22,850 --> 00:06:32,600
is a actuator that's not the latest

129
00:06:28,100 --> 00:06:47,630
version<font color="#CCCCCC"> of my slide sorry I have to fix</font>

130
00:06:32,600 --> 00:06:50,150
<font color="#E5E5E5">that well it's not</font><font color="#CCCCCC"> that important yeah</font>

131
00:06:47,630 --> 00:06:52,460
so what we're<font color="#CCCCCC"> doing here we have an</font>

132
00:06:50,150 --> 00:06:55,070
array with two elements and then we're

133
00:06:52,460 --> 00:06:57,380
trying<font color="#CCCCCC"> to access element 2 and the</font>

134
00:06:55,070 --> 00:07:01,610
counting starts with 0 therefore to is

135
00:06:57,380 --> 00:07:04,040
invalid only 0<font color="#E5E5E5"> and 1 are valid and yeah</font>

136
00:07:01,610 --> 00:07:07,340
<font color="#E5E5E5">I have this code here there's a small</font>

137
00:07:04,040 --> 00:07:09,530
change that i put the array index in a

138
00:07:07,340 --> 00:07:13,340
<font color="#CCCCCC">variable that</font><font color="#E5E5E5"> silence is a warning but</font>

139
00:07:09,530 --> 00:07:15,349
so if<font color="#E5E5E5"> we normally compile this then it</font>

140
00:07:13,340 --> 00:07:17,299
will<font color="#CCCCCC"> just print out some garbage because</font>

141
00:07:15,350 --> 00:07:19,970
we've tried to<font color="#CCCCCC"> access a value on the</font>

142
00:07:17,300 --> 00:07:22,010
stack but outside<font color="#CCCCCC"> the bounds of where we</font>

143
00:07:19,970 --> 00:07:26,870
wanted to where we have our array and

144
00:07:22,010 --> 00:07:31,969
now if<font color="#E5E5E5"> we add this f sanitized address</font>

145
00:07:26,870 --> 00:07:34,820
and debugging again then we get a very

146
00:07:31,970 --> 00:07:38,300
nice error message and it's extremely

147
00:07:34,820 --> 00:07:41,360
detailed so what we get here is the line

148
00:07:38,300 --> 00:07:44,300
where<font color="#CCCCCC"> ok there's a read of size 4 it's</font>

149
00:07:41,360 --> 00:07:50,450
in<font color="#E5E5E5"> the file 0 V dot C in line 5 and</font>

150
00:07:44,300 --> 00:07:52,010
column 17 and<font color="#E5E5E5"> the memory where we have</font>

151
00:07:50,450 --> 00:07:54,020
this out of<font color="#CCCCCC"> bones read as part of the</font>

152
00:07:52,010 --> 00:07:57,050
stack that's part of the main function

153
00:07:54,020 --> 00:07:59,419
so we have a very detailed error message

154
00:07:57,050 --> 00:08:01,190
here which tells us pretty well what's

155
00:07:59,420 --> 00:08:06,500
happening here and gives very good

156
00:08:01,190 --> 00:08:10,450
guidance on how to fix this issue this

157
00:08:06,500 --> 00:08:10,450
is a use after free bark so

158
00:08:11,240 --> 00:08:22,460
no this is not a<font color="#E5E5E5"> user feedback sorry I</font>

159
00:08:13,819 --> 00:08:24,470
<font color="#E5E5E5">blocked my slides can you read this so I</font>

160
00:08:22,460 --> 00:08:26,359
mean I hope<font color="#E5E5E5"> most people probably already</font>

161
00:08:24,470 --> 00:08:28,639
know what<font color="#CCCCCC"> they use after free bag is but</font>

162
00:08:26,360 --> 00:08:31,039
we're allocating some memory then we're

163
00:08:28,639 --> 00:08:32,839
accessing it which is fine and then we

164
00:08:31,039 --> 00:08:36,500
are freeing that<font color="#E5E5E5"> memory and then we're</font>

165
00:08:32,839 --> 00:08:37,849
accessing it again and these are like

166
00:08:36,500 --> 00:08:40,549
the backs that happen all the time

167
00:08:37,849 --> 00:08:43,820
especially in browsers and other complex

168
00:08:40,549 --> 00:08:45,680
applications so i think most of the

169
00:08:43,820 --> 00:08:47,450
memory corruption vulnerabilities in

170
00:08:45,680 --> 00:08:52,670
browsers these days are used after free

171
00:08:47,450 --> 00:08:57,680
and and we compile it and it prints 20

172
00:08:52,670 --> 00:09:02,689
and then if we compile it with a dress

173
00:08:57,680 --> 00:09:05,420
on each other then we get an error

174
00:09:02,690 --> 00:09:07,459
message again and for the user after

175
00:09:05,420 --> 00:09:09,079
free we get three important pieces of

176
00:09:07,459 --> 00:09:11,329
information one is where it's been

177
00:09:09,080 --> 00:09:18,860
allocated where it's been freed and

178
00:09:11,330 --> 00:09:21,079
where it's used so yeah so I've kind of

179
00:09:18,860 --> 00:09:24,260
made in my<font color="#E5E5E5"> mission to test everything</font>

180
00:09:21,079 --> 00:09:27,529
with address sanitizer or at least all

181
00:09:24,260 --> 00:09:31,100
the software<font color="#E5E5E5"> I use and yeah much</font><font color="#CCCCCC"> more</font>

182
00:09:27,529 --> 00:09:33,560
because i think really every project

183
00:09:31,100 --> 00:09:35,480
that's written with c code should test

184
00:09:33,560 --> 00:09:38,239
with<font color="#CCCCCC"> addressing attire and</font><font color="#E5E5E5"> i've seen so</font>

185
00:09:35,480 --> 00:09:41,029
<font color="#E5E5E5">many pieces of software where I just had</font>

186
00:09:38,240 --> 00:09:43,459
to run the executable and<font color="#E5E5E5"> it would read</font>

187
00:09:41,029 --> 00:09:47,060
some invalid memory and really for core

188
00:09:43,459 --> 00:09:52,010
tools that are part of the Linux system

189
00:09:47,060 --> 00:09:53,899
and what I then did was I said okay can

190
00:09:52,010 --> 00:09:55,520
I build a whole linux distribution where

191
00:09:53,899 --> 00:09:59,089
just everything is built with address

192
00:09:55,520 --> 00:10:00,890
sanitizer I used rental for this but

193
00:09:59,089 --> 00:10:03,200
this is mainly because i'm familiar with

194
00:10:00,890 --> 00:10:05,480
<font color="#CCCCCC">drain too so there's nothing dangerous</font>

195
00:10:03,200 --> 00:10:06,680
specific about it something<font color="#CCCCCC"> similar</font>

196
00:10:05,480 --> 00:10:11,000
could be done for<font color="#E5E5E5"> other linux</font>

197
00:10:06,680 --> 00:10:14,149
distributions it works<font color="#E5E5E5"> I can put it I</font>

198
00:10:11,000 --> 00:10:17,120
can run<font color="#E5E5E5"> it in a vm I even have a vm with</font>

199
00:10:14,149 --> 00:10:18,680
the server running on it if you're

200
00:10:17,120 --> 00:10:22,910
interested and want to try to hack it

201
00:10:18,680 --> 00:10:25,250
you<font color="#E5E5E5"> I could give you the IP</font>

202
00:10:22,910 --> 00:10:27,650
and just by doing this like trying to

203
00:10:25,250 --> 00:10:30,440
<font color="#E5E5E5">create a system</font><font color="#CCCCCC"> that has a</font><font color="#E5E5E5"> dress and it</font>

204
00:10:27,650 --> 00:10:34,880
has enabled I found bugs in all kinds of

205
00:10:30,440 --> 00:10:38,000
packages like from bosch power tools<font color="#CCCCCC"> man</font>

206
00:10:34,880 --> 00:10:40,189
<font color="#CCCCCC">DB</font><font color="#E5E5E5"> which the man page tool pitch in OTR</font>

207
00:10:38,000 --> 00:10:42,200
where it turned out that this buck was

208
00:10:40,190 --> 00:10:44,870
already reported half a year before

209
00:10:42,200 --> 00:10:47,150
which<font color="#CCCCCC"> is a bit bad</font><font color="#E5E5E5"> for a security tool</font>

210
00:10:44,870 --> 00:10:48,530
that like box keep lingering around in

211
00:10:47,150 --> 00:10:51,260
the back tracker and it was a use after

212
00:10:48,530 --> 00:10:55,640
free and<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> exploitable so not good</font>

213
00:10:51,260 --> 00:10:59,180
yeah and all kinds of other stuff so and

214
00:10:55,640 --> 00:11:01,730
the next thing<font color="#E5E5E5"> I'll try to do so I can</font>

215
00:10:59,180 --> 00:11:04,489
just<font color="#CCCCCC"> buy a script build all gentle</font>

216
00:11:01,730 --> 00:11:06,560
packages with this and record the arrows

217
00:11:04,490 --> 00:11:08,840
I just have to<font color="#E5E5E5"> get this into a somewhat</font>

218
00:11:06,560 --> 00:11:12,319
usable format and then<font color="#CCCCCC"> I will publish</font>

219
00:11:08,840 --> 00:11:15,260
that and then via some crowd working

220
00:11:12,320 --> 00:11:22,490
process we could try to track down<font color="#E5E5E5"> all</font>

221
00:11:15,260 --> 00:11:24,230
these bugs yeah and now I come to kind

222
00:11:22,490 --> 00:11:27,200
of the second topic of my talk which is

223
00:11:24,230 --> 00:11:29,330
fuzzing so on a very high level you

224
00:11:27,200 --> 00:11:32,930
could say fuzzing is throw garbage at

225
00:11:29,330 --> 00:11:35,810
software so what we're doing is actually

226
00:11:32,930 --> 00:11:40,069
just take a simple example we have an

227
00:11:35,810 --> 00:11:43,579
image<font color="#CCCCCC"> pazza like lip jpg or PNG and then</font>

228
00:11:40,070 --> 00:11:46,040
we take some valid image and then we

229
00:11:43,580 --> 00:11:48,950
just<font color="#CCCCCC"> randomly add arrows to it which</font>

230
00:11:46,040 --> 00:11:50,930
could be like some bit flips or swapping

231
00:11:48,950 --> 00:11:54,470
some things around or just adding some

232
00:11:50,930 --> 00:11:57,739
characters whatever and then we test

233
00:11:54,470 --> 00:11:59,990
whether that crashes or not and if we

234
00:11:57,740 --> 00:12:02,960
have a crash it's very likely to<font color="#CCCCCC"> be some</font>

235
00:11:59,990 --> 00:12:10,940
kind<font color="#E5E5E5"> of security vulnerability memory</font>

236
00:12:02,960 --> 00:12:13,310
corruption issue and<font color="#CCCCCC"> who of you has</font>

237
00:12:10,940 --> 00:12:19,370
heard<font color="#CCCCCC"> of the DARPA cyber Grand Challenge</font>

238
00:12:13,310 --> 00:12:22,369
so a couple of you so there were a

239
00:12:19,370 --> 00:12:25,160
couple of media reports like here watch

240
00:12:22,370 --> 00:12:28,250
AI hack into AI at DARPA cyber grand

241
00:12:25,160 --> 00:12:30,740
challenge or even Elon Musk's estaba a i

242
00:12:28,250 --> 00:12:33,830
hecka challenge will lead to Skynet so

243
00:12:30,740 --> 00:12:36,259
the<font color="#CCCCCC"> general theme of these</font><font color="#E5E5E5"> stories was</font>

244
00:12:33,830 --> 00:12:39,350
<font color="#CCCCCC">okay there are some active</font>

245
00:12:36,259 --> 00:12:42,139
intelligence computer bots that are in

246
00:12:39,350 --> 00:12:45,739
some shiny cases that you<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> on the</font>

247
00:12:42,139 --> 00:12:47,479
lower left and they are kind of fighting

248
00:12:45,739 --> 00:12:49,699
against each other and hacking each

249
00:12:47,479 --> 00:12:53,089
other and finding security<font color="#E5E5E5"> Runaways and</font>

250
00:12:49,699 --> 00:12:55,189
patching them so basically all people

251
00:12:53,089 --> 00:12:57,979
<font color="#CCCCCC">that do IT security will soon be</font>

252
00:12:55,189 --> 00:13:03,199
replaced by AI BOTS so<font color="#E5E5E5"> I will be</font>

253
00:12:57,979 --> 00:13:04,910
replaced by an<font color="#E5E5E5"> I airport and also these</font>

254
00:13:03,199 --> 00:13:08,689
computers will at some point create a

255
00:13:04,910 --> 00:13:12,769
Skynet and suppress humanity and we will

256
00:13:08,689 --> 00:13:14,779
<font color="#E5E5E5">have a matrix like scenario</font><font color="#CCCCCC"> okay so I</font>

257
00:13:12,769 --> 00:13:17,419
don't know how<font color="#CCCCCC"> you feel if I here</font>

258
00:13:14,779 --> 00:13:20,479
<font color="#E5E5E5">artificial intelligence these days I get</font>

259
00:13:17,419 --> 00:13:22,728
extremely skeptical I believe a lot of

260
00:13:20,479 --> 00:13:26,149
things<font color="#E5E5E5"> that are called a ir not really</font>

261
00:13:22,729 --> 00:13:28,729
AI and<font color="#CCCCCC"> i wanted to learn about</font><font color="#E5E5E5"> what's</font>

262
00:13:26,149 --> 00:13:31,279
going<font color="#E5E5E5"> on there and especially if</font><font color="#CCCCCC"> someone</font>

263
00:13:28,729 --> 00:13:33,739
wants<font color="#CCCCCC"> to replace me with an</font><font color="#E5E5E5"> iPod I mean</font>

264
00:13:31,279 --> 00:13:37,039
I'm fine with that then I don't know

265
00:13:33,739 --> 00:13:38,389
maybe we can have some fancy utopian

266
00:13:37,039 --> 00:13:40,519
future where we don't<font color="#E5E5E5"> have to work</font>

267
00:13:38,389 --> 00:13:43,730
anymore but I would<font color="#CCCCCC"> like to</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> how</font>

268
00:13:40,519 --> 00:13:45,410
that<font color="#E5E5E5"> works and i wanted to show a video</font>

269
00:13:43,730 --> 00:13:49,609
but we<font color="#E5E5E5"> had some problem with the audio</font>

270
00:13:45,410 --> 00:13:52,279
<font color="#CCCCCC">and it's not not that interesting so</font>

271
00:13:49,609 --> 00:13:55,369
what none of<font color="#E5E5E5"> these media reports told</font>

272
00:13:52,279 --> 00:13:57,679
was that all three winning teams of this

273
00:13:55,369 --> 00:14:00,559
competition<font color="#E5E5E5"> we're using American fuzzy</font>

274
00:13:57,679 --> 00:14:03,259
loop which is a phasing tool which I use

275
00:14:00,559 --> 00:14:05,509
all the time so suddenly this was about

276
00:14:03,259 --> 00:14:06,980
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that I know quite</font><font color="#E5E5E5"> well because</font>

277
00:14:05,509 --> 00:14:09,529
I don't<font color="#E5E5E5"> know a whole lot about</font>

278
00:14:06,980 --> 00:14:14,869
artificial intelligence but I know a lot

279
00:14:09,529 --> 00:14:16,579
about fuzzing and so<font color="#CCCCCC"> basically what all</font>

280
00:14:14,869 --> 00:14:19,579
of them did for the back finding process

281
00:14:16,579 --> 00:14:25,488
they used FL with some additional

282
00:14:19,579 --> 00:14:27,829
customizations themselves yeah I<font color="#E5E5E5"> don't</font>

283
00:14:25,489 --> 00:14:30,559
<font color="#E5E5E5">think</font><font color="#CCCCCC"> that AFL will suppress humanity</font>

284
00:14:27,829 --> 00:14:35,419
and put a scan it but it's pretty

285
00:14:30,559 --> 00:14:38,269
<font color="#E5E5E5">awesome so American fat elope is the</font>

286
00:14:35,419 --> 00:14:41,989
name of this rabbit breed here but it's

287
00:14:38,269 --> 00:14:43,820
also the name of a tool and to

288
00:14:41,989 --> 00:14:46,070
understand what it does

289
00:14:43,820 --> 00:14:48,650
I have to beat going<font color="#CCCCCC"> to historically how</font>

290
00:14:46,070 --> 00:14:50,930
far the ring was done so the very

291
00:14:48,650 --> 00:14:52,850
simplest idea to do fasting is just to

292
00:14:50,930 --> 00:14:55,280
do random filing like you add random

293
00:14:52,850 --> 00:14:57,860
errors to a file<font color="#E5E5E5"> and see what happens um</font>

294
00:14:55,280 --> 00:14:59,810
that's quite easy but it's not very

295
00:14:57,860 --> 00:15:01,850
effective so the more advanced more

296
00:14:59,810 --> 00:15:04,040
complicated box you won't find with that

297
00:15:01,850 --> 00:15:06,110
and<font color="#CCCCCC"> then there's something which i call</font>

298
00:15:04,040 --> 00:15:07,760
template-based fuzzing which means

299
00:15:06,110 --> 00:15:11,090
you're trying to write a father

300
00:15:07,760 --> 00:15:13,490
specifically<font color="#CCCCCC"> for some file format or</font>

301
00:15:11,090 --> 00:15:15,950
some data structure so you could do

302
00:15:13,490 --> 00:15:18,950
things like you have a<font color="#E5E5E5"> JPEG and you add</font>

303
00:15:15,950 --> 00:15:20,930
a minus 1 as the size and see if if

304
00:15:18,950 --> 00:15:25,040
something bad happens with that<font color="#E5E5E5"> or you</font>

305
00:15:20,930 --> 00:15:26,569
add the maximum size or or a<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> for</font>

306
00:15:25,040 --> 00:15:30,770
the size which doesn't make sense things

307
00:15:26,570 --> 00:15:32,750
like that but this is a lot<font color="#E5E5E5"> of work</font>

308
00:15:30,770 --> 00:15:34,880
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you need to</font><font color="#E5E5E5"> adapt your fuzzing</font>

309
00:15:32,750 --> 00:15:37,310
for each file format you test and

310
00:15:34,880 --> 00:15:39,439
therefore I say it<font color="#E5E5E5"> doesn't really scale</font>

311
00:15:37,310 --> 00:15:42,229
if I want<font color="#E5E5E5"> to test a lot of software with</font>

312
00:15:39,440 --> 00:15:46,880
fuzzing then this just<font color="#E5E5E5"> doesn't work at</font>

313
00:15:42,230 --> 00:15:50,090
<font color="#CCCCCC">least if if I'm doing it</font><font color="#E5E5E5"> alone and kind</font>

314
00:15:46,880 --> 00:15:53,930
<font color="#E5E5E5">of new idea that was popularized by AFL</font>

315
00:15:50,090 --> 00:15:55,400
is coverage based fuzzing and what's

316
00:15:53,930 --> 00:15:59,540
happening<font color="#E5E5E5"> there is that the tool</font>

317
00:15:55,400 --> 00:16:02,120
observes the code paths in<font color="#E5E5E5"> the program</font>

318
00:15:59,540 --> 00:16:04,250
that it's testing and if it<font color="#CCCCCC"> father's</font>

319
00:16:02,120 --> 00:16:06,890
something and it generates a new code

320
00:16:04,250 --> 00:16:09,200
<font color="#E5E5E5">path in the tool then we'll say</font><font color="#CCCCCC"> okay</font>

321
00:16:06,890 --> 00:16:12,140
this is an interesting input and it will

322
00:16:09,200 --> 00:16:17,210
save that input and use that input to

323
00:16:12,140 --> 00:16:19,850
further run the fuzzing process yeah so

324
00:16:17,210 --> 00:16:22,880
yeah<font color="#E5E5E5"> American father lab made this idea</font>

325
00:16:19,850 --> 00:16:25,850
popular there were some earlier tools

326
00:16:22,880 --> 00:16:28,130
that tried similar things but this<font color="#E5E5E5"> is</font>

327
00:16:25,850 --> 00:16:32,150
kind of<font color="#CCCCCC"> the one where it got successful</font>

328
00:16:28,130 --> 00:16:34,760
and how you do<font color="#E5E5E5"> this so practically what</font>

329
00:16:32,150 --> 00:16:37,250
you do is you compile your software with

330
00:16:34,760 --> 00:16:40,189
a specific compiler wrapper that adds

331
00:16:37,250 --> 00:16:42,140
additional code to it so the father can

332
00:16:40,190 --> 00:16:47,360
see you which code paths are triggered

333
00:16:42,140 --> 00:16:50,120
and then you run the father itself and

334
00:16:47,360 --> 00:16:53,150
as earlier<font color="#E5E5E5"> I want to try to convince you</font>

335
00:16:50,120 --> 00:16:55,340
<font color="#CCCCCC">that this is really</font><font color="#E5E5E5"> easy so you're</font>

336
00:16:53,150 --> 00:16:56,769
you're compiling your program you use

337
00:16:55,340 --> 00:17:00,279
configure and then

338
00:16:56,769 --> 00:17:03,100
some you use another compiler so you

339
00:17:00,279 --> 00:17:07,240
pass a<font color="#CCCCCC"> CC variable and a CSS is variable</font>

340
00:17:03,100 --> 00:17:09,640
so the sea and the<font color="#CCCCCC"> c++ compiler</font><font color="#E5E5E5"> and it</font>

341
00:17:07,240 --> 00:17:11,349
may usually make sense to use this<font color="#CCCCCC"> Abel</font>

342
00:17:09,640 --> 00:17:14,500
shared because<font color="#E5E5E5"> that means the</font>

343
00:17:11,349 --> 00:17:16,270
application will not use separate

344
00:17:14,500 --> 00:17:18,699
libraries but<font color="#E5E5E5"> will compile all the</font>

345
00:17:16,270 --> 00:17:20,168
libraries into the executable and then

346
00:17:18,699 --> 00:17:21,880
you don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to play around with a</font>

347
00:17:20,169 --> 00:17:24,850
deep read aude and stuff and makes

348
00:17:21,880 --> 00:17:27,100
<font color="#E5E5E5">things easier then you put your sample</font>

349
00:17:24,849 --> 00:17:29,620
input files into a directory which i

350
00:17:27,099 --> 00:17:33,399
call you re in but can be any name and

351
00:17:29,620 --> 00:17:36,459
then you run the father with passing the

352
00:17:33,399 --> 00:17:39,250
in directory some out directory and<font color="#CCCCCC"> then</font>

353
00:17:36,460 --> 00:17:42,460
the path to whatever executable you're

354
00:17:39,250 --> 00:17:46,630
testing and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> a tete is then replaced</font>

355
00:17:42,460 --> 00:17:48,940
with the input<font color="#E5E5E5"> files from the father and</font>

356
00:17:46,630 --> 00:17:53,020
<font color="#E5E5E5">then you get something</font><font color="#CCCCCC"> like this which</font>

357
00:17:48,940 --> 00:17:55,570
is a nice ascii art screen and there's a

358
00:17:53,020 --> 00:17:57,309
lot of information and at least if

359
00:17:55,570 --> 00:17:59,918
you're starting you can just ignore most

360
00:17:57,309 --> 00:18:01,570
of the information they actually only

361
00:17:59,919 --> 00:18:03,940
really interesting<font color="#CCCCCC"> things are in the</font>

362
00:18:01,570 --> 00:18:06,428
<font color="#E5E5E5">upper right which is the red number here</font>

363
00:18:03,940 --> 00:18:08,500
is the number of crashes and about<font color="#E5E5E5"> this</font>

364
00:18:06,429 --> 00:18:10,600
is<font color="#E5E5E5"> the number of paths so the number of</font>

365
00:18:08,500 --> 00:18:13,899
paths is interesting if that stays at

366
00:18:10,600 --> 00:18:15,309
one or it grows very slowly then usually

367
00:18:13,899 --> 00:18:17,469
something is wrong with<font color="#E5E5E5"> your filing</font>

368
00:18:15,309 --> 00:18:25,299
process maybe the file is not really

369
00:18:17,470 --> 00:18:27,760
<font color="#CCCCCC">passed yeah AFL found bugs in all kinds</font>

370
00:18:25,299 --> 00:18:32,289
of important software projects like

371
00:18:27,760 --> 00:18:33,549
openssl openssh lip<font color="#CCCCCC"> jpeg</font><font color="#E5E5E5"> lip eng all</font><font color="#CCCCCC"> the</font>

372
00:18:32,289 --> 00:18:36,220
kind of stuff that you're using in your

373
00:18:33,549 --> 00:18:39,370
browser to part web pages every day<font color="#CCCCCC"> go</font>

374
00:18:36,220 --> 00:18:41,230
PG bash some of the stage fright

375
00:18:39,370 --> 00:18:45,309
vulnerabilities they were breaking<font color="#CCCCCC"> the</font>

376
00:18:41,230 --> 00:18:47,980
news last year yeah so<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> inclined to</font>

377
00:18:45,309 --> 00:18:52,658
<font color="#E5E5E5">say there's basically no major piece of</font>

378
00:18:47,980 --> 00:18:55,840
<font color="#E5E5E5">C code where</font><font color="#CCCCCC"> al hasn't found any bugs so</font>

379
00:18:52,659 --> 00:18:59,320
it's extremely effective and also shows

380
00:18:55,840 --> 00:19:01,330
us how how problematic the<font color="#E5E5E5"> code base</font>

381
00:18:59,320 --> 00:19:04,330
that we're building<font color="#E5E5E5"> everything on is</font>

382
00:19:01,330 --> 00:19:06,250
because it with this such a<font color="#E5E5E5"> relatively</font>

383
00:19:04,330 --> 00:19:07,720
simple approach you can find<font color="#E5E5E5"> that many</font>

384
00:19:06,250 --> 00:19:10,870
bugs

385
00:19:07,720 --> 00:19:12,460
so I talked earlier about address

386
00:19:10,870 --> 00:19:15,158
sanitizer and now I talked about<font color="#E5E5E5"> phasing</font>

387
00:19:12,460 --> 00:19:17,200
and the very obvious confusion is to

388
00:19:15,159 --> 00:19:19,330
combine<font color="#E5E5E5"> the two because if you use a</font>

389
00:19:17,200 --> 00:19:21,549
father with a memory safety tool like

390
00:19:19,330 --> 00:19:25,178
address sanitizer it will just find many

391
00:19:21,549 --> 00:19:26,980
more bugs so that's what i usually do

392
00:19:25,179 --> 00:19:30,010
all the time when I'm fuzzing I also

393
00:19:26,980 --> 00:19:31,840
enable it rasanya<font color="#CCCCCC"> tiser</font><font color="#E5E5E5"> I'm a FL has a</font>

394
00:19:30,010 --> 00:19:34,870
function there that you just set an

395
00:19:31,840 --> 00:19:37,720
environment variable if you say son and

396
00:19:34,870 --> 00:19:39,939
you have to add this parameter m nan

397
00:19:37,720 --> 00:19:44,080
which is the memory limit because

398
00:19:39,940 --> 00:19:47,140
address sanitizer allocates a whole lot

399
00:19:44,080 --> 00:19:49,570
of virtual memory for its shadow memory

400
00:19:47,140 --> 00:19:51,280
now it's only virtual memory so it

401
00:19:49,570 --> 00:19:55,178
doesn't<font color="#E5E5E5"> really use it most of the time</font>

402
00:19:51,280 --> 00:19:58,658
but it's many terabytes<font color="#CCCCCC"> and so if you</font>

403
00:19:55,179 --> 00:20:01,510
<font color="#E5E5E5">set a memory limit it won't work and the</font>

404
00:19:58,659 --> 00:20:03,580
memory limit is there that not something

405
00:20:01,510 --> 00:20:05,260
cannot happen where like your

406
00:20:03,580 --> 00:20:07,870
application will use a lot of<font color="#E5E5E5"> memory and</font>

407
00:20:05,260 --> 00:20:09,789
everything crashes on your system but in

408
00:20:07,870 --> 00:20:11,469
practice this almost never happens so I

409
00:20:09,789 --> 00:20:17,919
just disable the memory limit and

410
00:20:11,470 --> 00:20:23,799
<font color="#E5E5E5">everything is fine so who remembers this</font>

411
00:20:17,919 --> 00:20:27,700
I hope everyone the hot plate back was

412
00:20:23,799 --> 00:20:33,070
probably the most I don't know back with

413
00:20:27,700 --> 00:20:36,730
<font color="#E5E5E5">the most media reception and and I</font>

414
00:20:33,070 --> 00:20:38,408
wondered at some point like would have

415
00:20:36,730 --> 00:20:40,270
have been<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> to find the</font>

416
00:20:38,409 --> 00:20:43,150
heartbleed back with fastening

417
00:20:40,270 --> 00:20:45,429
techniques and I thought it would be a

418
00:20:43,150 --> 00:20:47,230
cool thing if one year after<font color="#E5E5E5"> half bleed</font>

419
00:20:45,429 --> 00:20:51,909
I could say hey this<font color="#CCCCCC"> is how you could</font>

420
00:20:47,230 --> 00:20:55,419
find such box so I try<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and the</font>

421
00:20:51,909 --> 00:20:58,960
challenge<font color="#E5E5E5"> here is that it's a bug in the</font>

422
00:20:55,419 --> 00:21:01,360
networking<font color="#E5E5E5"> protocol so and AFL usually</font>

423
00:20:58,960 --> 00:21:03,730
works on files so you somehow need to

424
00:21:01,360 --> 00:21:07,209
translate that and what I essentially

425
00:21:03,730 --> 00:21:09,640
<font color="#E5E5E5">did was I wrote a bit of open SSL code</font>

426
00:21:07,210 --> 00:21:12,070
which did a handshake but not really

427
00:21:09,640 --> 00:21:15,460
over network but just by passing buffers

428
00:21:12,070 --> 00:21:18,309
back and forth this does not always work

429
00:21:15,460 --> 00:21:21,430
the openssl<font color="#CCCCCC"> api is very powerful and it</font>

430
00:21:18,309 --> 00:21:23,410
has such features in many other

431
00:21:21,430 --> 00:21:26,380
was this is not that easily possible

432
00:21:23,410 --> 00:21:27,910
because they don't have such an API and

433
00:21:26,380 --> 00:21:30,250
then<font color="#E5E5E5"> I added an option that</font><font color="#CCCCCC"> you could</font>

434
00:21:27,910 --> 00:21:31,840
just<font color="#E5E5E5"> swap out part of the handshake with</font>

435
00:21:30,250 --> 00:21:36,760
something<font color="#CCCCCC"> you passed on the command line</font>

436
00:21:31,840 --> 00:21:39,550
and so I could<font color="#CCCCCC"> use a bioshock dump or</font>

437
00:21:36,760 --> 00:21:43,570
just right out part of the handshake and

438
00:21:39,550 --> 00:21:46,270
use that for my fuzzing and after six

439
00:21:43,570 --> 00:21:50,200
<font color="#E5E5E5">hours AFL was able to find heartbleed</font>

440
00:21:46,270 --> 00:21:51,910
then<font color="#E5E5E5"> I published this and a couple of</font>

441
00:21:50,200 --> 00:21:53,530
days<font color="#E5E5E5"> later I got an email from someone</font>

442
00:21:51,910 --> 00:21:56,470
called Casa si vous kwani who is

443
00:21:53,530 --> 00:22:00,580
actually<font color="#E5E5E5"> the guy who developed address</font>

444
00:21:56,470 --> 00:22:02,380
sanitizer and he was able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use a tool</font>

445
00:22:00,580 --> 00:22:04,480
that I didn't know back then which<font color="#CCCCCC"> is</font>

446
00:22:02,380 --> 00:22:07,120
called lib<font color="#E5E5E5"> pfizer which found this back</font>

447
00:22:04,480 --> 00:22:09,340
in five minutes so he basically

448
00:22:07,120 --> 00:22:10,929
replicated my experiment but just with

449
00:22:09,340 --> 00:22:15,399
another fuzzing tool and it was much

450
00:22:10,930 --> 00:22:17,680
faster so what is<font color="#CCCCCC"> lib father lip</font><font color="#E5E5E5"> father</font>

451
00:22:15,400 --> 00:22:20,950
also uses coverage based fuzzing it's

452
00:22:17,680 --> 00:22:23,620
basically modeled after<font color="#CCCCCC"> a FL and also</font>

453
00:22:20,950 --> 00:22:26,830
the two people developing lip father and

454
00:22:23,620 --> 00:22:29,409
AFL both work at Google and I think they

455
00:22:26,830 --> 00:22:32,919
work in<font color="#CCCCCC"> the same building so they</font>

456
00:22:29,410 --> 00:22:35,620
closely cooperate and lip father is

457
00:22:32,920 --> 00:22:39,730
developed as part of<font color="#CCCCCC"> llvm and ceiling</font>

458
00:22:35,620 --> 00:22:42,639
and the important difference between<font color="#CCCCCC"> the</font>

459
00:22:39,730 --> 00:22:45,160
<font color="#E5E5E5">two is net AFL</font><font color="#CCCCCC"> father's executables and</font>

460
00:22:42,640 --> 00:22:47,710
<font color="#E5E5E5">lip father for those functions and that</font>

461
00:22:45,160 --> 00:22:50,680
makes is just much faster because<font color="#E5E5E5"> it's</font>

462
00:22:47,710 --> 00:22:55,750
faster to call a<font color="#E5E5E5"> function in c then to</font>

463
00:22:50,680 --> 00:22:58,720
run an executable in<font color="#CCCCCC"> linux but the</font>

464
00:22:55,750 --> 00:23:00,430
downside<font color="#E5E5E5"> of that is that it's more work</font>

465
00:22:58,720 --> 00:23:02,800
<font color="#E5E5E5">because like if you have a command line</font>

466
00:23:00,430 --> 00:23:04,870
tool you can just run this AFL command

467
00:23:02,800 --> 00:23:06,639
and there you have to<font color="#CCCCCC"> write at least a</font>

468
00:23:04,870 --> 00:23:10,300
little bit of code for every time you

469
00:23:06,640 --> 00:23:12,400
want<font color="#E5E5E5"> to fast something and here's an</font>

470
00:23:10,300 --> 00:23:14,409
example how this looks so you're

471
00:23:12,400 --> 00:23:16,360
basically it's not a lot<font color="#CCCCCC"> of code but</font>

472
00:23:14,410 --> 00:23:18,730
still you<font color="#E5E5E5"> need to get this right and</font>

473
00:23:16,360 --> 00:23:21,040
<font color="#E5E5E5">there are some pitfalls in it so this is</font>

474
00:23:18,730 --> 00:23:23,860
filing a function in openssl which is

475
00:23:21,040 --> 00:23:25,750
passing<font color="#E5E5E5"> some</font><font color="#CCCCCC"> asn.1 data ace and one</font>

476
00:23:23,860 --> 00:23:30,100
parcels are particularly prone for

477
00:23:25,750 --> 00:23:32,380
memory corruption vulnerabilities so

478
00:23:30,100 --> 00:23:34,600
what is<font color="#E5E5E5"> doing here it has a function</font>

479
00:23:32,380 --> 00:23:37,539
that gets passed<font color="#E5E5E5"> buffer and</font>

480
00:23:34,600 --> 00:23:39,969
eyes and then<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> passing this buffer</font>

481
00:23:37,539 --> 00:23:42,580
and the size to this<font color="#CCCCCC"> open SSL</font><font color="#E5E5E5"> function</font>

482
00:23:39,970 --> 00:23:44,350
the important part is that i'm tracking

483
00:23:42,580 --> 00:23:47,049
the return value and if it has

484
00:23:44,350 --> 00:23:49,928
successfully passed that I'm freeing the

485
00:23:47,049 --> 00:23:52,059
structure that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just created because if</font>

486
00:23:49,929 --> 00:23:54,520
I don't<font color="#CCCCCC"> do this then it will just</font><font color="#E5E5E5"> grow</font>

487
00:23:52,059 --> 00:23:56,049
to use more and more memory and at some

488
00:23:54,520 --> 00:23:59,200
point it will crash because it's out of

489
00:23:56,049 --> 00:24:02,860
memory so when you write this lip for

490
00:23:59,200 --> 00:24:04,630
the code you need to be careful<font color="#CCCCCC"> to not</font>

491
00:24:02,860 --> 00:24:06,219
have any memory leaks in the fighting

492
00:24:04,630 --> 00:24:13,330
code because then it will at some point

493
00:24:06,220 --> 00:24:15,940
crash okay<font color="#E5E5E5"> and one thing</font><font color="#CCCCCC"> which is maybe</font>

494
00:24:13,330 --> 00:24:18,158
a bit of<font color="#CCCCCC"> a more unusual use of a phasing</font>

495
00:24:15,940 --> 00:24:21,370
tool so the typical thing is that you're

496
00:24:18,159 --> 00:24:23,110
using fuzzing to find crashes and which

497
00:24:21,370 --> 00:24:27,100
mostly means memory corruption

498
00:24:23,110 --> 00:24:29,049
vulnerabilities and there's<font color="#E5E5E5"> something</font>

499
00:24:27,100 --> 00:24:31,510
which is called differential testing

500
00:24:29,049 --> 00:24:33,190
where the idea<font color="#E5E5E5"> is you have two</font><font color="#CCCCCC"> functions</font>

501
00:24:31,510 --> 00:24:36,850
that should do exactly<font color="#E5E5E5"> the same thing</font>

502
00:24:33,190 --> 00:24:38,440
and then you compare the output and if

503
00:24:36,850 --> 00:24:42,070
the output differs something is wrong

504
00:24:38,440 --> 00:24:44,169
and<font color="#CCCCCC"> the this</font><font color="#E5E5E5"> doesn't work in a lot of</font>

505
00:24:42,070 --> 00:24:46,510
<font color="#E5E5E5">situations because you need very clearly</font>

506
00:24:44,169 --> 00:24:50,110
defined functions that cannot have any

507
00:24:46,510 --> 00:24:54,010
differences in any kind but where it

508
00:24:50,110 --> 00:24:56,620
works<font color="#E5E5E5"> very well is mathematics so we all</font>

509
00:24:54,010 --> 00:24:58,840
use cryptography right so and it's kind

510
00:24:56,620 --> 00:25:02,530
of important and cryptography is

511
00:24:58,840 --> 00:25:04,840
essentially applied mathematics so we're

512
00:25:02,530 --> 00:25:07,510
<font color="#CCCCCC">doing calculations which are</font><font color="#E5E5E5"> often very</font>

513
00:25:04,840 --> 00:25:12,250
simple things like multiplying things

514
00:25:07,510 --> 00:25:14,860
exponentiation and the<font color="#CCCCCC"> question is here</font>

515
00:25:12,250 --> 00:25:17,169
is this mathematics correct is the

516
00:25:14,860 --> 00:25:21,309
software that we use for this producing

517
00:25:17,169 --> 00:25:26,440
correct results and there was a back in

518
00:25:21,309 --> 00:25:28,990
openssl was published earlier yes last

519
00:25:26,440 --> 00:25:31,960
year where the squaring function of

520
00:25:28,990 --> 00:25:34,870
openssl had the back that in on very

521
00:25:31,960 --> 00:25:37,690
rare inputs and only<font color="#E5E5E5"> one out of two to</font>

522
00:25:34,870 --> 00:25:40,658
the power of 128 cases it produced the

523
00:25:37,690 --> 00:25:43,270
wrong result and to understand this this

524
00:25:40,659 --> 00:25:45,970
is so rare that you will never hit this

525
00:25:43,270 --> 00:25:47,410
back by chance like<font color="#CCCCCC"> you can do squaring</font>

526
00:25:45,970 --> 00:25:49,030
until the end of<font color="#E5E5E5"> you</font>

527
00:25:47,410 --> 00:25:53,170
and you<font color="#E5E5E5"> will not hit this back by chance</font>

528
00:25:49,030 --> 00:25:55,690
but the surprising thing was that AFL

529
00:25:53,170 --> 00:25:57,490
was actually able to<font color="#E5E5E5"> find this buck this</font>

530
00:25:55,690 --> 00:25:59,860
<font color="#E5E5E5">was first shown by about the environment</font>

531
00:25:57,490 --> 00:26:02,200
in<font color="#E5E5E5"> a target black hat which I recommend</font>

532
00:25:59,860 --> 00:26:08,379
to what was generally about bignum

533
00:26:02,200 --> 00:26:10,900
vulnerabilities and it turns out that

534
00:26:08,380 --> 00:26:13,720
AFL is extremely good at finding big

535
00:26:10,900 --> 00:26:15,430
number owner abilities so I tried this

536
00:26:13,720 --> 00:26:17,650
on a whole number of things so others

537
00:26:15,430 --> 00:26:20,770
this strategy I take an input

538
00:26:17,650 --> 00:26:22,900
interpreted as a number or several

539
00:26:20,770 --> 00:26:25,240
numbers in some way and<font color="#E5E5E5"> then feed</font>

540
00:26:22,900 --> 00:26:28,060
different implementations like<font color="#CCCCCC"> do a</font>

541
00:26:25,240 --> 00:26:30,520
multiplication<font color="#E5E5E5"> with optimizes</font><font color="#CCCCCC"> L and with</font>

542
00:26:28,060 --> 00:26:33,909
<font color="#CCCCCC">lib decrypt and see if the result</font>

543
00:26:30,520 --> 00:26:36,700
mattress so there was a back in openssl

544
00:26:33,910 --> 00:26:39,370
and the modular exponentiation which is

545
00:26:36,700 --> 00:26:42,280
the RSA and diffie-hellman function so

546
00:26:39,370 --> 00:26:43,899
it's kind of important unfortunately

547
00:26:42,280 --> 00:26:46,960
nobody has really found out if this is

548
00:26:43,900 --> 00:26:49,870
exploitable or not but yeah then in

549
00:26:46,960 --> 00:26:52,810
nettle which is the new TLS underlying

550
00:26:49,870 --> 00:26:56,050
library there were several bugs in the

551
00:26:52,810 --> 00:26:57,460
elliptic curve multiplications in NSS

552
00:26:56,050 --> 00:26:59,860
there was also in the modular

553
00:26:57,460 --> 00:27:02,170
exponentiation and in the division so

554
00:26:59,860 --> 00:27:04,000
this was the same back because the

555
00:27:02,170 --> 00:27:08,650
modular exponentiation called the

556
00:27:04,000 --> 00:27:12,790
division function in the pulley 1305

557
00:27:08,650 --> 00:27:14,770
<font color="#CCCCCC">authenticator and open ssl this</font><font color="#E5E5E5"> was</font>

558
00:27:12,790 --> 00:27:20,230
fortunately found before it shipped in

559
00:27:14,770 --> 00:27:22,450
in a release code and recently I found a

560
00:27:20,230 --> 00:27:25,600
<font color="#CCCCCC">couple of issues in matrix SSL which is</font>

561
00:27:22,450 --> 00:27:30,940
a library often used in a marriage

562
00:27:25,600 --> 00:27:34,360
hardware so this was a bit of a surprise

563
00:27:30,940 --> 00:27:36,700
<font color="#CCCCCC">that you could use AFL to find packs</font>

564
00:27:34,360 --> 00:27:38,830
that are of a<font color="#E5E5E5"> completely different kind</font>

565
00:27:36,700 --> 00:27:45,850
than the<font color="#E5E5E5"> box you usually find with</font><font color="#CCCCCC"> it</font>

566
00:27:38,830 --> 00:27:48,070
yeah one thing<font color="#CCCCCC"> I end up having quite a</font>

567
00:27:45,850 --> 00:27:51,490
bit of discussions about which<font color="#E5E5E5"> I find a</font>

568
00:27:48,070 --> 00:27:54,520
bit annoying is that most of the bugs I

569
00:27:51,490 --> 00:27:57,970
find with<font color="#CCCCCC"> the father</font><font color="#E5E5E5"> are out of bounds</font>

570
00:27:54,520 --> 00:28:00,960
<font color="#E5E5E5">reads on the heap and usually they are</font>

571
00:27:57,970 --> 00:28:02,820
not very serious they can be serious we

572
00:28:00,960 --> 00:28:05,580
cause<font color="#E5E5E5"> heartbleed was a lot of won't read</font>

573
00:28:02,820 --> 00:28:07,620
on the<font color="#CCCCCC"> heap but very often it's that</font>

574
00:28:05,580 --> 00:28:09,779
it's reading some memory and it's not

575
00:28:07,620 --> 00:28:12,449
really doing anything with it so it's

576
00:28:09,779 --> 00:28:14,730
<font color="#CCCCCC">unclear</font><font color="#E5E5E5"> whether you call that a</font>

577
00:28:12,450 --> 00:28:17,159
vulnerability but there are<font color="#E5E5E5"> some</font>

578
00:28:14,730 --> 00:28:18,690
reasonable arguments to say why all<font color="#E5E5E5"> of</font>

579
00:28:17,159 --> 00:28:20,970
these instances<font color="#E5E5E5"> should be called a</font>

580
00:28:18,690 --> 00:28:22,950
vulnerability because essentially if

581
00:28:20,970 --> 00:28:24,899
you're reading out<font color="#CCCCCC"> of the bounds of a</font>

582
00:28:22,950 --> 00:28:29,520
buffer than the<font color="#CCCCCC"> C standard</font><font color="#E5E5E5"> says you</font>

583
00:28:24,899 --> 00:28:31,110
cannot expect<font color="#E5E5E5"> any deterministic behavior</font>

584
00:28:29,520 --> 00:28:33,510
from your software it can<font color="#E5E5E5"> just do</font>

585
00:28:31,110 --> 00:28:35,520
anything<font color="#E5E5E5"> so the compiler could optimize</font>

586
00:28:33,510 --> 00:28:37,470
it in a way that whenever you<font color="#E5E5E5"> read out</font>

587
00:28:35,520 --> 00:28:42,750
<font color="#CCCCCC">of one's of heap something very</font><font color="#E5E5E5"> strange</font>

588
00:28:37,470 --> 00:28:45,029
happens but I actually try<font color="#E5E5E5"> to avoid</font>

589
00:28:42,750 --> 00:28:47,429
these discussions when I can because my

590
00:28:45,029 --> 00:28:49,200
opinion on that is I<font color="#E5E5E5"> don't really care</font>

591
00:28:47,429 --> 00:28:51,000
whether<font color="#E5E5E5"> we call this a vulnerability or</font>

592
00:28:49,200 --> 00:28:53,580
not I think<font color="#CCCCCC"> it's clear</font><font color="#E5E5E5"> that these are</font>

593
00:28:51,000 --> 00:28:56,159
back<font color="#CCCCCC"> that should be fixed so it's</font>

594
00:28:53,580 --> 00:29:01,710
usually easier to just fix them then to

595
00:28:56,159 --> 00:29:04,740
debate whether it's a vulnerability yeah

596
00:29:01,710 --> 00:29:07,620
um then some more tools that I wanted<font color="#E5E5E5"> to</font>

597
00:29:04,740 --> 00:29:10,350
<font color="#E5E5E5">mention at least quickly so address any</font>

598
00:29:07,620 --> 00:29:14,729
Tyler is kind of part of a suite of

599
00:29:10,350 --> 00:29:16,289
different sanitizer features that have

600
00:29:14,730 --> 00:29:19,080
all been developed by<font color="#E5E5E5"> the same people</font>

601
00:29:16,289 --> 00:29:23,070
one other is undefined behavior

602
00:29:19,080 --> 00:29:25,529
sanitizer which finds also things where

603
00:29:23,070 --> 00:29:27,840
similar to the out of Mount reads where

604
00:29:25,529 --> 00:29:29,940
the sea specification says you cannot do

605
00:29:27,840 --> 00:29:31,559
<font color="#E5E5E5">this and whenever you do this you cannot</font>

606
00:29:29,940 --> 00:29:38,220
rely that your software does anything

607
00:29:31,559 --> 00:29:39,870
anything whatever<font color="#CCCCCC"> you expect the problem</font>

608
00:29:38,220 --> 00:29:42,149
with this is that you will find a whole

609
00:29:39,870 --> 00:29:44,340
lot of marks that are usually not<font color="#E5E5E5"> very</font>

610
00:29:42,149 --> 00:29:48,570
interesting most of them are invalid

611
00:29:44,340 --> 00:29:50,908
shift operations<font color="#CCCCCC"> actory then there's</font>

612
00:29:48,570 --> 00:29:53,549
memory sanitizer which finds

613
00:29:50,909 --> 00:29:55,470
uninitialized memory use problem with

614
00:29:53,549 --> 00:29:57,480
that is that it's a bit trickier to use

615
00:29:55,470 --> 00:29:59,309
because you not only need to compile

616
00:29:57,480 --> 00:30:02,159
your application with it but also all

617
00:29:59,309 --> 00:30:04,559
dependencies so if you want to compile

618
00:30:02,159 --> 00:30:06,270
something that uses a library you need

619
00:30:04,559 --> 00:30:08,940
to make<font color="#E5E5E5"> sure that the library is also</font>

620
00:30:06,270 --> 00:30:11,100
compiled with a memory sanitizer and if

621
00:30:08,940 --> 00:30:12,240
you're using<font color="#CCCCCC"> C++ code you even need</font><font color="#E5E5E5"> to</font>

622
00:30:11,100 --> 00:30:15,030
make sure<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font>

623
00:30:12,240 --> 00:30:18,090
that the part of the<font color="#CCCCCC"> C library</font><font color="#E5E5E5"> is</font>

624
00:30:15,030 --> 00:30:19,889
compiled with<font color="#CCCCCC"> Emory sanitizer and then</font>

625
00:30:18,090 --> 00:30:22,649
their threat sanitizer which finds

626
00:30:19,890 --> 00:30:24,510
concurrency issues I've never used that

627
00:30:22,650 --> 00:30:26,790
because these are usually<font color="#E5E5E5"> not happening</font>

628
00:30:24,510 --> 00:30:29,400
in the kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> software that</font><font color="#E5E5E5"> i'm mostly</font>

629
00:30:26,790 --> 00:30:32,399
testing this<font color="#E5E5E5"> is more interesting for</font>

630
00:30:29,400 --> 00:30:37,320
larger projects so this is<font color="#E5E5E5"> chrome has</font>

631
00:30:32,400 --> 00:30:39,780
used this a lot so this<font color="#E5E5E5"> is an example</font>

632
00:30:37,320 --> 00:30:44,189
<font color="#E5E5E5">what for the kind of box you can find</font>

633
00:30:39,780 --> 00:30:46,260
with UV sun so what we're doing<font color="#E5E5E5"> here</font>

634
00:30:44,190 --> 00:30:49,110
first is we have a shift and the shift

635
00:30:46,260 --> 00:30:51,900
is by the value<font color="#E5E5E5"> J and that's minus one</font>

636
00:30:49,110 --> 00:30:53,340
and that's undefined so C standard says

637
00:30:51,900 --> 00:30:57,450
you cannot do a shift by a negative

638
00:30:53,340 --> 00:30:59,820
value and the other<font color="#CCCCCC"> thing is the integer</font>

639
00:30:57,450 --> 00:31:01,620
overflow that's actually sometimes quite

640
00:30:59,820 --> 00:31:04,980
useful that it can detect integer

641
00:31:01,620 --> 00:31:07,260
overflows<font color="#E5E5E5"> and unlike</font><font color="#CCCCCC"> the other sanitizer</font>

642
00:31:04,980 --> 00:31:09,720
tools undefined behavior sanitizer does

643
00:31:07,260 --> 00:31:13,650
not terminate the execution of<font color="#CCCCCC"> your</font>

644
00:31:09,720 --> 00:31:17,340
programs you can find several bugs with

645
00:31:13,650 --> 00:31:22,350
it at once so<font color="#E5E5E5"> I have this code here as</font>

646
00:31:17,340 --> 00:31:27,990
well and I trust at<font color="#E5E5E5"> F sanitize undefined</font>

647
00:31:22,350 --> 00:31:30,360
and also G and you see we<font color="#E5E5E5"> get output</font>

648
00:31:27,990 --> 00:31:34,590
gear shift exponent minus 1 is negative

649
00:31:30,360 --> 00:31:39,389
signed integer overflow so also it very

650
00:31:34,590 --> 00:31:42,780
clear what's happening here until an

651
00:31:39,390 --> 00:31:46,050
example from memory sanitizers so we

652
00:31:42,780 --> 00:31:52,020
have an array here and we're setting<font color="#E5E5E5"> the</font>

653
00:31:46,050 --> 00:31:55,050
we're setting one element 21 and then

654
00:31:52,020 --> 00:31:57,960
we're trying<font color="#CCCCCC"> to access the element based</font>

655
00:31:55,050 --> 00:32:00,870
on the input variable<font color="#CCCCCC"> oxy which is</font><font color="#E5E5E5"> the</font>

656
00:31:57,960 --> 00:32:03,600
number<font color="#CCCCCC"> of parameters we pass on the</font>

657
00:32:00,870 --> 00:32:14,100
command line which includes the<font color="#E5E5E5"> name of</font>

658
00:32:03,600 --> 00:32:16,320
the executable so if we execute this

659
00:32:14,100 --> 00:32:18,870
normally<font color="#E5E5E5"> nothing happens because then it</font>

660
00:32:16,320 --> 00:32:22,590
will then<font color="#CCCCCC"> oxy will be one and it</font>

661
00:32:18,870 --> 00:32:25,389
accesses the index one which we<font color="#CCCCCC"> have set</font>

662
00:32:22,590 --> 00:32:27,908
to a value but if we set this

663
00:32:25,389 --> 00:32:31,539
if we pass some parameter we will see

664
00:32:27,909 --> 00:32:36,009
<font color="#E5E5E5">that we get an error here that yeah use</font>

665
00:32:31,539 --> 00:32:38,440
of uninitialized value again we we don't

666
00:32:36,009 --> 00:32:42,429
see a line number here I don't know why

667
00:32:38,440 --> 00:32:48,099
<font color="#E5E5E5">I below is the line number yeah okay so</font>

668
00:32:42,429 --> 00:32:50,169
yeah that's memory sanitizer and there

669
00:32:48,099 --> 00:32:53,439
has been<font color="#E5E5E5"> some effort to put these tools</font>

670
00:32:50,169 --> 00:32:55,419
to<font color="#E5E5E5"> the Linux kernel so there's a kernel</font>

671
00:32:53,440 --> 00:32:58,329
<font color="#E5E5E5">addressing it has a kind of undefined</font>

672
00:32:55,419 --> 00:33:00,909
behavior sanitizer and so on and these

673
00:32:58,329 --> 00:33:03,009
are<font color="#CCCCCC"> just two you can any if you</font><font color="#E5E5E5"> compile</font>

674
00:33:00,909 --> 00:33:04,629
the colonel on your own with make menu

675
00:33:03,009 --> 00:33:06,309
conflicts then under the debugging

676
00:33:04,629 --> 00:33:10,599
features number there's an option to

677
00:33:06,309 --> 00:33:12,999
dress enable those and there's also to a

678
00:33:10,599 --> 00:33:15,309
call to scholar which is trying<font color="#E5E5E5"> to adapt</font>

679
00:33:12,999 --> 00:33:17,829
this coverage based fuzzing to the

680
00:33:15,309 --> 00:33:20,168
<font color="#CCCCCC">colonel</font><font color="#E5E5E5"> and fastest cause and they have</font>

681
00:33:17,829 --> 00:33:23,200
<font color="#E5E5E5">been a couple of other similar efforts</font>

682
00:33:20,169 --> 00:33:25,690
may for example<font color="#CCCCCC"> Oracle did some filing</font>

683
00:33:23,200 --> 00:33:27,729
on file systems as far<font color="#E5E5E5"> as I know they</font>

684
00:33:25,690 --> 00:33:30,519
have not published their code yet which

685
00:33:27,729 --> 00:33:32,499
is<font color="#CCCCCC"> a bit set but yeah so but this</font><font color="#E5E5E5"> is</font>

686
00:33:30,519 --> 00:33:35,469
<font color="#CCCCCC">like ongoing work that</font><font color="#E5E5E5"> people are trying</font>

687
00:33:32,499 --> 00:33:40,209
to<font color="#CCCCCC"> adapt these ideas to to the Linux</font>

688
00:33:35,469 --> 00:33:42,759
<font color="#E5E5E5">kernel then what I often have a base</font>

689
00:33:40,209 --> 00:33:45,099
network fuzzing because these are

690
00:33:42,759 --> 00:33:48,729
<font color="#E5E5E5">usually the most interesting backs and</font>

691
00:33:45,099 --> 00:33:51,999
if you if you can kind of have a buffer

692
00:33:48,729 --> 00:33:55,239
overflow in your HTTP server or your TLS

693
00:33:51,999 --> 00:33:57,039
deck that's an interesting thing to have

694
00:33:55,239 --> 00:34:00,879
because then you can easily remotely

695
00:33:57,039 --> 00:34:02,829
exploit something but it<font color="#CCCCCC"> turns out that</font>

696
00:34:00,879 --> 00:34:04,928
that nobody has really found a very good

697
00:34:02,829 --> 00:34:07,719
solution for<font color="#CCCCCC"> that because it involves</font>

698
00:34:04,929 --> 00:34:10,960
some complexities that you need to

699
00:34:07,719 --> 00:34:13,000
fiddle with timeouts and how do you kind

700
00:34:10,960 --> 00:34:16,329
of get from a file to a network input

701
00:34:13,000 --> 00:34:18,309
one approach is to have a library<font color="#CCCCCC"> that</font>

702
00:34:16,329 --> 00:34:20,529
you can preload and that will basically

703
00:34:18,309 --> 00:34:24,819
intercept your network functions and

704
00:34:20,529 --> 00:34:28,389
simulate a network connection where it

705
00:34:24,819 --> 00:34:30,730
<font color="#E5E5E5">actually reads the file what we're doing</font>

706
00:34:28,389 --> 00:34:33,970
that is pre knee and there's been a

707
00:34:30,730 --> 00:34:37,329
patch to FL itself which try something

708
00:34:33,969 --> 00:34:38,770
similar but it was all turned out to be

709
00:34:37,329 --> 00:34:43,060
<font color="#E5E5E5">relatively fragile to you</font>

710
00:34:38,770 --> 00:34:45,040
and what usually works best is similar

711
00:34:43,060 --> 00:34:48,429
to what i<font color="#E5E5E5"> have done with openssl that</font>

712
00:34:45,040 --> 00:34:50,290
you have a rapper that just you have a

713
00:34:48,429 --> 00:34:52,750
command line tool that where you pass

714
00:34:50,290 --> 00:34:55,179
some input and it will be fitted into a

715
00:34:52,750 --> 00:34:57,250
function and this<font color="#E5E5E5"> is also a</font>

716
00:34:55,179 --> 00:34:59,230
recommendation if people develop

717
00:34:57,250 --> 00:35:01,300
something like a web server<font color="#E5E5E5"> I would say</font>

718
00:34:59,230 --> 00:35:04,510
this web server should<font color="#E5E5E5"> ship a test tool</font>

719
00:35:01,300 --> 00:35:06,970
which does pass HTTP<font color="#CCCCCC"> header or something</font>

720
00:35:04,510 --> 00:35:10,690
like that because HTTP server needs to

721
00:35:06,970 --> 00:35:12,879
<font color="#CCCCCC">need to process HTTP requests that's</font>

722
00:35:10,690 --> 00:35:15,040
<font color="#E5E5E5">obvious that's what it's doing and this</font>

723
00:35:12,880 --> 00:35:18,400
functionality should be<font color="#CCCCCC"> available in a</font>

724
00:35:15,040 --> 00:35:20,860
separate testing tool separated from the

725
00:35:18,400 --> 00:35:22,840
whole code base because if<font color="#CCCCCC"> that makes</font>

726
00:35:20,860 --> 00:35:28,210
much easier for<font color="#CCCCCC"> other people to test</font>

727
00:35:22,840 --> 00:35:30,280
this code with the fuzzing tool then one

728
00:35:28,210 --> 00:35:32,800
<font color="#CCCCCC">thing which is kind of ongoing research</font>

729
00:35:30,280 --> 00:35:35,290
work and where I am not really sure what

730
00:35:32,800 --> 00:35:37,180
I think about it yet is that people try

731
00:35:35,290 --> 00:35:40,540
to combine buzzing with symbolic

732
00:35:37,180 --> 00:35:43,899
execution so symbolic execution<font color="#E5E5E5"> comes</font>

733
00:35:40,540 --> 00:35:46,270
from the former software analysis world

734
00:35:43,900 --> 00:35:48,670
and the idea is essentially you're

735
00:35:46,270 --> 00:35:52,780
trying to find all the states that<font color="#CCCCCC"> a</font>

736
00:35:48,670 --> 00:35:55,930
program can get into by by giving<font color="#E5E5E5"> it an</font>

737
00:35:52,780 --> 00:35:57,730
input the problem<font color="#E5E5E5"> that that is as soon</font>

738
00:35:55,930 --> 00:36:00,100
as you try to do this on real software

739
00:35:57,730 --> 00:36:03,640
you will have so many states that it

740
00:36:00,100 --> 00:36:06,069
will just never finish and the<font color="#E5E5E5"> idea here</font>

741
00:36:03,640 --> 00:36:08,140
is that if you<font color="#CCCCCC"> use a father</font><font color="#E5E5E5"> and if this</font>

742
00:36:06,070 --> 00:36:10,750
father is stuck and<font color="#E5E5E5"> cannot get into</font>

743
00:36:08,140 --> 00:36:12,460
certain parts of the<font color="#E5E5E5"> code that then you</font>

744
00:36:10,750 --> 00:36:16,360
will try to add to use symbolic

745
00:36:12,460 --> 00:36:19,000
execution for it so some people in the

746
00:36:16,360 --> 00:36:20,800
departure lounge have tried this the

747
00:36:19,000 --> 00:36:23,740
problem with that is that they<font color="#E5E5E5"> used an</font>

748
00:36:20,800 --> 00:36:25,270
artificial operating system which and

749
00:36:23,740 --> 00:36:27,069
I'm not interested in artificial

750
00:36:25,270 --> 00:36:30,160
operating system I'm interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> real</font>

751
00:36:27,070 --> 00:36:32,740
operating systems and real code and I

752
00:36:30,160 --> 00:36:35,620
have<font color="#E5E5E5"> not seen anything in that regard</font>

753
00:36:32,740 --> 00:36:38,740
that I could use for normal software and

754
00:36:35,620 --> 00:36:44,410
I must say I'm a bit<font color="#E5E5E5"> skeptical about</font>

755
00:36:38,740 --> 00:36:46,720
that I feel that<font color="#E5E5E5"> maybe it's easier to to</font>

756
00:36:44,410 --> 00:36:49,600
to improve the fastening process itself

757
00:36:46,720 --> 00:36:51,160
and I would<font color="#E5E5E5"> like to see if there are</font>

758
00:36:49,600 --> 00:36:52,450
bugs that you can find with this

759
00:36:51,160 --> 00:36:55,750
approach that you cannot

760
00:36:52,450 --> 00:37:01,480
find is normalizing so that would be

761
00:36:55,750 --> 00:37:03,040
<font color="#E5E5E5">interesting to analyze yeah what's very</font>

762
00:37:01,480 --> 00:37:06,640
important to mention is that all the

763
00:37:03,040 --> 00:37:09,400
tools i mentioned are free so American

764
00:37:06,640 --> 00:37:11,440
fuzzy lop lip further address sanitizer

765
00:37:09,400 --> 00:37:14,349
all of<font color="#E5E5E5"> that it's all free and open</font>

766
00:37:11,440 --> 00:37:17,260
source software so there's basically no

767
00:37:14,349 --> 00:37:20,380
reason not to use<font color="#E5E5E5"> it you can have it you</font>

768
00:37:17,260 --> 00:37:24,940
can modify it play with it it's yeah

769
00:37:20,380 --> 00:37:28,570
it's yours and<font color="#E5E5E5"> this is something i want</font>

770
00:37:24,940 --> 00:37:31,030
<font color="#E5E5E5">to mention like I mean if you've been in</font>

771
00:37:28,570 --> 00:37:33,369
talk from<font color="#E5E5E5"> hannah's he's been saying</font>

772
00:37:31,030 --> 00:37:35,740
since 10 years<font color="#E5E5E5"> that you should we should</font>

773
00:37:33,369 --> 00:37:38,920
<font color="#E5E5E5">just get rid of C and write code in</font>

774
00:37:35,740 --> 00:37:40,899
safer languages and like 10 years<font color="#CCCCCC"> ago I</font>

775
00:37:38,920 --> 00:37:43,810
thought maybe he has a point but it's

776
00:37:40,900 --> 00:37:45,640
never going to happen and these days I'm

777
00:37:43,810 --> 00:37:48,250
taking this much more seriously because

778
00:37:45,640 --> 00:37:50,470
we have development like rust and the

779
00:37:48,250 --> 00:37:52,780
<font color="#E5E5E5">server engine by Mozilla is trying to</font>

780
00:37:50,470 --> 00:37:55,390
rebuild a browser in a safer programming

781
00:37:52,780 --> 00:37:57,369
language and this seems to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> really an</font>

782
00:37:55,390 --> 00:38:00,670
idea that's catching on these days and

783
00:37:57,369 --> 00:38:02,500
this makes me question actually if the

784
00:38:00,670 --> 00:38:05,440
things I'm doing are the right thing to

785
00:38:02,500 --> 00:38:09,160
do because most of the work I do is

786
00:38:05,440 --> 00:38:11,109
about the typical see kind of bugs so we

787
00:38:09,160 --> 00:38:12,910
have buffers that are accessed outside

788
00:38:11,109 --> 00:38:15,130
of the<font color="#E5E5E5"> boundaries we have used after</font>

789
00:38:12,910 --> 00:38:17,078
freeze and there are ways in the

790
00:38:15,130 --> 00:38:21,940
<font color="#E5E5E5">programming language to avoid these</font>

791
00:38:17,079 --> 00:38:23,770
kinds of marks so yeah so maybe we

792
00:38:21,940 --> 00:38:27,099
<font color="#CCCCCC">should just rewrite everything in rust</font>

793
00:38:23,770 --> 00:38:29,079
this is I mean<font color="#CCCCCC"> people are talking about</font>

794
00:38:27,099 --> 00:38:35,079
<font color="#E5E5E5">this but I think this</font><font color="#CCCCCC"> is a serious</font>

795
00:38:29,079 --> 00:38:37,319
discussion we should have what's the

796
00:38:35,079 --> 00:38:37,319
time

797
00:38:37,580 --> 00:38:46,910
<font color="#CCCCCC">ok so I wanted to</font><font color="#E5E5E5"> finish this business</font>

798
00:38:42,320 --> 00:38:52,580
more rent which is anyone here from

799
00:38:46,910 --> 00:38:56,569
redhead<font color="#CCCCCC"> ok you couldn't make</font><font color="#E5E5E5"> it yeah so</font>

800
00:38:52,580 --> 00:38:58,460
I decided to fast package managers and

801
00:38:56,570 --> 00:39:00,980
the most important ones are obviously

802
00:38:58,460 --> 00:39:03,290
dpkg which is used by debian and ubuntu

803
00:39:00,980 --> 00:39:05,630
and all the other derivatives from it

804
00:39:03,290 --> 00:39:09,500
and the other<font color="#E5E5E5"> one is</font><font color="#CCCCCC"> RPM which is used</font>

805
00:39:05,630 --> 00:39:13,910
by redhead<font color="#CCCCCC"> susan and yeah some others as</font>

806
00:39:09,500 --> 00:39:16,160
well so for duplicate<font color="#E5E5E5"> ree</font><font color="#CCCCCC"> i found two</font>

807
00:39:13,910 --> 00:39:19,790
boxes<font color="#CCCCCC"> i think it were to stack overflows</font>

808
00:39:16,160 --> 00:39:22,430
and<font color="#E5E5E5"> i reported them and eight days later</font>

809
00:39:19,790 --> 00:39:24,830
they published an update with fixes and

810
00:39:22,430 --> 00:39:27,710
the security advisory both debian and

811
00:39:24,830 --> 00:39:29,480
ubuntu I mean that's<font color="#E5E5E5"> pretty good right I</font>

812
00:39:27,710 --> 00:39:33,770
mean you cannot complain about this

813
00:39:29,480 --> 00:39:38,060
pretty fast was a very smooth process so

814
00:39:33,770 --> 00:39:43,220
yeah that's good then I also<font color="#E5E5E5"> first RPM</font>

815
00:39:38,060 --> 00:39:45,950
and I reported three bucks in the RPM

816
00:39:43,220 --> 00:39:48,770
<font color="#E5E5E5">puzzle and God as an answer yeah we just</font>

817
00:39:45,950 --> 00:39:51,710
got 30 crashes in<font color="#E5E5E5"> rpm it will take some</font>

818
00:39:48,770 --> 00:39:57,800
time till we have till we can work on

819
00:39:51,710 --> 00:40:00,380
this so I'm RPM RPM is actually

820
00:39:57,800 --> 00:40:02,660
originally it stood for redhead package

821
00:40:00,380 --> 00:40:04,910
from<font color="#CCCCCC"> Andrew but today</font><font color="#E5E5E5"> it stands for RPM</font>

822
00:40:02,660 --> 00:40:07,940
package manager and it has been declared

823
00:40:04,910 --> 00:40:10,190
an independent project in 2007 because

824
00:40:07,940 --> 00:40:13,460
it's not<font color="#CCCCCC"> only used by rated also used by</font>

825
00:40:10,190 --> 00:40:16,790
Souza and some others but actually the

826
00:40:13,460 --> 00:40:20,420
RPM website still belongs to redhead but

827
00:40:16,790 --> 00:40:22,610
their security team told me that we

828
00:40:20,420 --> 00:40:24,710
don't<font color="#E5E5E5"> own RPM dr. main it's an upstream</font>

829
00:40:22,610 --> 00:40:26,390
project so there's nothing<font color="#CCCCCC"> not much we</font>

830
00:40:24,710 --> 00:40:30,110
can do about it because I complained

831
00:40:26,390 --> 00:40:33,350
about their market reporting process so

832
00:40:30,110 --> 00:40:36,050
a PM darkest attract installation and

833
00:40:33,350 --> 00:40:37,910
track has integrated<font color="#CCCCCC"> back tracker so I</font>

834
00:40:36,050 --> 00:40:40,160
thought<font color="#CCCCCC"> okay I can report backs in that</font>

835
00:40:37,910 --> 00:40:41,569
pack tracker and then I wanted to

836
00:40:40,160 --> 00:40:43,220
register an account and<font color="#E5E5E5"> I got a</font>

837
00:40:41,570 --> 00:40:45,200
certificate error because<font color="#CCCCCC"> this dude</font>

838
00:40:43,220 --> 00:40:49,910
certificate didn't match the domain and

839
00:40:45,200 --> 00:40:51,279
was expired since 2012 and then I found

840
00:40:49,910 --> 00:40:53,019
even if I ignore the city

841
00:40:51,279 --> 00:40:56,169
good morning I could<font color="#E5E5E5"> create an account</font>

842
00:40:53,019 --> 00:40:59,499
the CSS was broken but I mean didn't

843
00:40:56,169 --> 00:41:01,299
matter but<font color="#E5E5E5"> then I found out</font><font color="#CCCCCC"> okay even</font>

844
00:40:59,499 --> 00:41:03,189
then I couldn't<font color="#E5E5E5"> create a back because it</font>

845
00:41:01,299 --> 00:41:05,169
says that I have<font color="#E5E5E5"> to ask on the mailing</font>

846
00:41:03,189 --> 00:41:07,479
list or in the IRC for permission to

847
00:41:05,169 --> 00:41:09,009
create a bug report and that's kind of

848
00:41:07,479 --> 00:41:12,489
<font color="#E5E5E5">the point when you get really annoyed if</font>

849
00:41:09,009 --> 00:41:16,900
you so and then I decided to report it

850
00:41:12,489 --> 00:41:19,119
to the redhead security team so our p.m.

851
00:41:16,900 --> 00:41:21,489
is developed on github these days but

852
00:41:19,119 --> 00:41:25,479
the web page doesn't mention that it's

853
00:41:21,489 --> 00:41:27,159
also interesting and if you actually

854
00:41:25,479 --> 00:41:29,529
want to<font color="#E5E5E5"> know which is the latest release</font>

855
00:41:27,159 --> 00:41:32,529
of it you get<font color="#E5E5E5"> a bit of confusing</font>

856
00:41:29,529 --> 00:41:36,699
information so the RPM dark web page has

857
00:41:32,529 --> 00:41:38,739
a version<font color="#CCCCCC"> for 1201 the github repository</font>

858
00:41:36,699 --> 00:41:42,549
says photo of<font color="#CCCCCC"> zero is the latest version</font>

859
00:41:38,739 --> 00:41:44,769
Fedora is actually using<font color="#E5E5E5"> for 13 0 which</font>

860
00:41:42,549 --> 00:41:47,949
is not really released anywhere except

861
00:41:44,769 --> 00:41:49,328
there's a release candidate but the

862
00:41:47,949 --> 00:41:51,069
Fedora package doesn't say it's a

863
00:41:49,329 --> 00:41:55,209
release candidate is release and even

864
00:41:51,069 --> 00:41:56,439
though yeah bit confusing so the status

865
00:41:55,209 --> 00:41:59,140
right now they are still<font color="#E5E5E5"> a stack</font>

866
00:41:56,439 --> 00:42:02,589
overflow that's unfixed<font color="#E5E5E5"> in</font><font color="#CCCCCC"> late latest</font>

867
00:41:59,140 --> 00:42:05,919
get code and all the things<font color="#CCCCCC"> I reported</font>

868
00:42:02,589 --> 00:42:07,449
around fixed this must be 2013 our

869
00:42:05,919 --> 00:42:09,879
<font color="#CCCCCC">unfixed because they haven't made a</font>

870
00:42:07,449 --> 00:42:11,769
release for quite a long time um and

871
00:42:09,880 --> 00:42:14,109
there are more marks and as I had this

872
00:42:11,769 --> 00:42:15,788
discussion<font color="#E5E5E5"> also in this case with people</font>

873
00:42:14,109 --> 00:42:18,519
who said this is not<font color="#E5E5E5"> really a serious if</font>

874
00:42:15,789 --> 00:42:21,159
you because it checks the signature and

875
00:42:18,519 --> 00:42:24,609
it will never<font color="#CCCCCC"> get</font><font color="#E5E5E5"> to your box I tried to</font>

876
00:42:21,159 --> 00:42:26,890
facet<font color="#CCCCCC"> first</font><font color="#E5E5E5"> the signature check itself</font>

877
00:42:24,609 --> 00:42:28,659
and i also found<font color="#E5E5E5"> box I'm not sure all</font>

878
00:42:26,890 --> 00:42:30,308
seriously<font color="#CCCCCC"> Albert</font><font color="#E5E5E5"> and I'm not really sure</font>

879
00:42:28,659 --> 00:42:32,469
what to do<font color="#CCCCCC"> about it right now because</font>

880
00:42:30,309 --> 00:42:34,900
<font color="#E5E5E5">I'm wondering I maybe i should say</font><font color="#CCCCCC"> i</font>

881
00:42:32,469 --> 00:42:37,390
<font color="#E5E5E5">will only report this to you when you</font>

882
00:42:34,900 --> 00:42:42,699
fix your development process I don't

883
00:42:37,390 --> 00:42:44,979
know yeah so yeah that was it thanks<font color="#E5E5E5"> for</font>

884
00:42:42,699 --> 00:42:46,419
<font color="#E5E5E5">listening please take away that</font><font color="#CCCCCC"> you</font>

885
00:42:44,979 --> 00:42:48,399
should test your software with address

886
00:42:46,419 --> 00:42:51,578
sanitizer and that you should fast your

887
00:42:48,400 --> 00:43:00,989
software and if you have<font color="#E5E5E5"> any questions</font>

888
00:42:51,579 --> 00:43:00,989
yeah please ask them now yep

889
00:43:12,210 --> 00:43:28,650
um so what would be Nick I mean you

890
00:43:25,619 --> 00:43:30,420
could<font color="#CCCCCC"> probably just delete your random</font>

891
00:43:28,650 --> 00:43:39,150
device and use that as an input that

892
00:43:30,420 --> 00:43:40,740
would probably somehow work so yeah I'm

893
00:43:39,150 --> 00:43:45,000
not sure do you have an example<font color="#CCCCCC"> for an</font>

894
00:43:40,740 --> 00:43:47,430
application<font color="#CCCCCC"> or it seems an interesting</font>

895
00:43:45,000 --> 00:43:48,960
idea to try<font color="#E5E5E5"> to pass the output of the</font>

896
00:43:47,430 --> 00:43:51,509
<font color="#E5E5E5">random</font><font color="#CCCCCC"> number generator because</font>

897
00:43:48,960 --> 00:43:53,580
<font color="#E5E5E5">occasionally you have software that that</font>

898
00:43:51,510 --> 00:43:56,609
has different code paths depending on

899
00:43:53,580 --> 00:43:59,250
random numbers like ours a encryptions

900
00:43:56,609 --> 00:44:00,690
and they are there are tools to disable

901
00:43:59,250 --> 00:44:05,820
the random or make it deterministic

902
00:44:00,690 --> 00:44:08,250
basically but yeah it seems like<font color="#E5E5E5"> an</font>

903
00:44:05,820 --> 00:44:22,980
interesting idea to explore to true life

904
00:44:08,250 --> 00:44:25,560
as a<font color="#CCCCCC"> random number input ya know because</font>

905
00:44:22,980 --> 00:44:29,670
it's an interesting so the question<font color="#CCCCCC"> was</font>

906
00:44:25,560 --> 00:44:32,730
if<font color="#E5E5E5"> I tried fighting Wi-Fi</font><font color="#CCCCCC"> stacks no I</font>

907
00:44:29,670 --> 00:44:35,580
haven't but I'm i think i<font color="#E5E5E5"> remember that</font>

908
00:44:32,730 --> 00:44:40,290
there were bugs found with AFL in wpa

909
00:44:35,580 --> 00:44:41,670
supplicant<font color="#CCCCCC"> i'm not entirely sure how i</font>

910
00:44:40,290 --> 00:44:43,200
would do<font color="#CCCCCC"> that I mean it would probably</font>

911
00:44:41,670 --> 00:44:44,970
take some work because you have this

912
00:44:43,200 --> 00:44:46,980
classic problem like how do you

913
00:44:44,970 --> 00:44:49,080
translate from your input to the

914
00:44:46,980 --> 00:44:50,910
networking functioning and that's lower

915
00:44:49,080 --> 00:44:54,720
level networking which may<font color="#CCCCCC"> be even more</font>

916
00:44:50,910 --> 00:44:56,609
complicated but I've been wondering

917
00:44:54,720 --> 00:44:58,649
about Wi-Fi security quite a bit and

918
00:44:56,609 --> 00:45:02,098
what I'd also be very interested is

919
00:44:58,650 --> 00:45:08,400
faster Wi-Fi stakes or from images but I

920
00:45:02,099 --> 00:45:11,060
have no idea<font color="#E5E5E5"> how to do that yeah maybe</font>

921
00:45:08,400 --> 00:45:11,060
with hardware

922
00:45:13,060 --> 00:45:24,910
I haven't really I have once booted my

923
00:45:22,810 --> 00:45:26,890
system with Colonel address sanitizer

924
00:45:24,910 --> 00:45:29,799
and it found a bunch of bugs in my

925
00:45:26,890 --> 00:45:32,140
graphics driver but<font color="#E5E5E5"> I haven't used any</font>

926
00:45:29,800 --> 00:45:34,540
of<font color="#E5E5E5"> the fuzzing tools because and the</font>

927
00:45:32,140 --> 00:45:38,319
<font color="#E5E5E5">impression was that this is kind of</font><font color="#CCCCCC"> the</font>

928
00:45:34,540 --> 00:45:39,880
more complicated stuff and also it felt

929
00:45:38,320 --> 00:45:43,890
<font color="#E5E5E5">like quite a number of</font><font color="#CCCCCC"> people are</font>

930
00:45:39,880 --> 00:45:43,890
already doing this so yeah

