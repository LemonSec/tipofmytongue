1
00:00:00,000 --> 00:00:04,470
<font color="#CCCCCC">come today</font><font color="#E5E5E5"> we have Mao knows who's going</font>

2
00:00:01,650 --> 00:00:07,289
<font color="#E5E5E5">to talk about testing threaded C and C++</font>

3
00:00:04,470 --> 00:00:13,610
code with his neat hook tool<font color="#E5E5E5"> let's give</font>

4
00:00:07,290 --> 00:00:17,730
a<font color="#E5E5E5"> round of applause for</font><font color="#CCCCCC"> Manos yes hello</font>

5
00:00:13,610 --> 00:00:20,240
<font color="#E5E5E5">my name is</font><font color="#CCCCCC"> - as I was introduced I'm a</font>

6
00:00:17,730 --> 00:00:24,269
PhD student at Uppsala University in

7
00:00:20,240 --> 00:00:26,459
Sweden where I research tools and

8
00:00:24,269 --> 00:00:28,939
techniques<font color="#E5E5E5"> for testing concurrent</font>

9
00:00:26,460 --> 00:00:31,199
software for example<font color="#CCCCCC"> when using threads</font>

10
00:00:28,939 --> 00:00:34,680
<font color="#E5E5E5">and I'm going to talk to you a bit today</font>

11
00:00:31,199 --> 00:00:38,070
about<font color="#E5E5E5"> one rituals we have worked on</font><font color="#CCCCCC"> for</font>

12
00:00:34,680 --> 00:00:41,219
a while<font color="#E5E5E5"> and in particular give you help</font>

13
00:00:38,070 --> 00:00:43,020
you to understand<font color="#E5E5E5"> how it works</font><font color="#CCCCCC"> well</font>

14
00:00:41,219 --> 00:00:48,989
<font color="#CCCCCC">enough so that you</font><font color="#E5E5E5"> can apply it yourself</font>

15
00:00:43,020 --> 00:00:51,360
<font color="#E5E5E5">because it isn't really that hard so the</font>

16
00:00:48,989 --> 00:00:53,129
target audience for<font color="#CCCCCC"> this</font><font color="#E5E5E5"> talk is the non</font>

17
00:00:51,360 --> 00:00:55,739
computer<font color="#E5E5E5"> scientist</font><font color="#CCCCCC"> so if you do computer</font>

18
00:00:53,129 --> 00:00:58,079
<font color="#E5E5E5">science</font><font color="#CCCCCC"> you might get slightly cringy</font>

19
00:00:55,739 --> 00:01:00,269
because I use imprecise language in some

20
00:00:58,079 --> 00:01:03,510
places and you'll have just<font color="#E5E5E5"> have to live</font>

21
00:01:00,270 --> 00:01:07,590
<font color="#CCCCCC">with it the point</font><font color="#E5E5E5"> of this talk is is to</font>

22
00:01:03,510 --> 00:01:09,979
<font color="#E5E5E5">make basically anyone who needs to to be</font>

23
00:01:07,590 --> 00:01:15,090
able<font color="#E5E5E5"> to use these kinds of tools and</font>

24
00:01:09,979 --> 00:01:17,549
<font color="#E5E5E5">really the things I'm going to teach</font><font color="#CCCCCC"> you</font>

25
00:01:15,090 --> 00:01:20,729
today are<font color="#E5E5E5"> things that are not specific</font>

26
00:01:17,549 --> 00:01:22,380
to this tool<font color="#E5E5E5"> really but things that</font><font color="#CCCCCC"> you</font>

27
00:01:20,729 --> 00:01:24,659
<font color="#CCCCCC">need</font><font color="#E5E5E5"> to know to use any tool in this</font>

28
00:01:22,380 --> 00:01:26,399
entire category so even if this

29
00:01:24,659 --> 00:01:28,020
<font color="#E5E5E5">particular tool isn't what you need</font>

30
00:01:26,400 --> 00:01:30,509
maybe you run a<font color="#E5E5E5"> different</font><font color="#CCCCCC"> programming</font>

31
00:01:28,020 --> 00:01:33,658
<font color="#E5E5E5">language you do a different</font><font color="#CCCCCC"> programming</font>

32
00:01:30,509 --> 00:01:35,759
model there are<font color="#E5E5E5"> probably similar tools</font>

33
00:01:33,659 --> 00:01:38,430
for those or there might be in<font color="#E5E5E5"> the</font>

34
00:01:35,759 --> 00:01:40,590
<font color="#E5E5E5">future and in that case</font><font color="#CCCCCC"> the skills</font>

35
00:01:38,430 --> 00:01:46,310
<font color="#CCCCCC">you'll in learn here will be perfectly</font>

36
00:01:40,590 --> 00:01:49,619
transferable to<font color="#E5E5E5"> that so the talk will be</font>

37
00:01:46,310 --> 00:01:52,619
<font color="#E5E5E5">mostly centered around me showing you a</font>

38
00:01:49,619 --> 00:01:55,229
<font color="#E5E5E5">bunch of examples</font><font color="#CCCCCC"> so I will show</font><font color="#E5E5E5"> you a</font>

39
00:01:52,619 --> 00:01:59,090
<font color="#E5E5E5">bunch of code with various bugs that I</font>

40
00:01:55,229 --> 00:02:02,700
<font color="#E5E5E5">either</font><font color="#CCCCCC"> introduced or or fix and show you</font>

41
00:01:59,090 --> 00:02:05,210
how<font color="#E5E5E5"> to apply these tools and and what</font>

42
00:02:02,700 --> 00:02:08,190
they can do<font color="#CCCCCC"> I will also talk a bit about</font>

43
00:02:05,210 --> 00:02:09,959
weak memory<font color="#CCCCCC"> moles</font><font color="#E5E5E5"> since that is</font>

44
00:02:08,190 --> 00:02:12,390
something<font color="#CCCCCC"> that comes</font><font color="#E5E5E5"> up a</font><font color="#CCCCCC"> lot when you</font>

45
00:02:09,959 --> 00:02:15,390
<font color="#E5E5E5">do threaded programming</font>

46
00:02:12,390 --> 00:02:17,510
and is one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the harder parts and how</font>

47
00:02:15,390 --> 00:02:22,440
these types of<font color="#CCCCCC"> tables</font><font color="#E5E5E5"> help with that and</font>

48
00:02:17,510 --> 00:02:26,130
finally I<font color="#E5E5E5"> will</font><font color="#CCCCCC"> show you an example</font><font color="#E5E5E5"> of us</font>

49
00:02:22,440 --> 00:02:29,609
testing some very non-trivial<font color="#CCCCCC"> real-world</font>

50
00:02:26,130 --> 00:02:31,500
code from the from the Linux kernel so

51
00:02:29,610 --> 00:02:33,540
that you can see that<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> a</font>

52
00:02:31,500 --> 00:02:34,920
<font color="#E5E5E5">tool</font><font color="#CCCCCC"> for try</font><font color="#E5E5E5"> examples even though most</font>

53
00:02:33,540 --> 00:02:37,380
<font color="#E5E5E5">of the examples</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we show our</font><font color="#CCCCCC"> toys</font>

54
00:02:34,920 --> 00:02:43,410
because that's the way we can fit them

55
00:02:37,380 --> 00:02:45,450
<font color="#E5E5E5">in a 45 minute presentation so this is a</font>

56
00:02:43,410 --> 00:02:47,340
very boring<font color="#E5E5E5"> introduction but parallel</font>

57
00:02:45,450 --> 00:02:49,049
problem is<font color="#E5E5E5"> hard right you've probably</font>

58
00:02:47,340 --> 00:02:52,230
seen this picture before it's from

59
00:02:49,050 --> 00:02:54,239
Mozilla headquarters and<font color="#E5E5E5"> the text on the</font>

60
00:02:52,230 --> 00:02:55,799
on the wall is probably not readable<font color="#E5E5E5"> but</font>

61
00:02:54,239 --> 00:02:58,140
it says must be<font color="#CCCCCC"> destroyed</font><font color="#E5E5E5"> right</font>

62
00:02:55,800 --> 00:03:03,690
<font color="#E5E5E5">multi-threaded code and here's a</font>

63
00:02:58,140 --> 00:03:05,458
standing desk so the point is everyone

64
00:03:03,690 --> 00:03:08,010
makes mistakes<font color="#E5E5E5"> when writing</font><font color="#CCCCCC"> mob threaded</font>

65
00:03:05,459 --> 00:03:11,160
code because it's it's<font color="#E5E5E5"> just so much to</font>

66
00:03:08,010 --> 00:03:16,019
think about<font color="#E5E5E5"> and the space of things can</font>

67
00:03:11,160 --> 00:03:18,260
happen just<font color="#E5E5E5"> explodes and another thing</font>

68
00:03:16,019 --> 00:03:20,760
<font color="#E5E5E5">that makes it very hard</font><font color="#CCCCCC"> is that at</font>

69
00:03:18,260 --> 00:03:23,459
testing which we usually<font color="#E5E5E5"> use to verify</font>

70
00:03:20,760 --> 00:03:26,399
<font color="#CCCCCC">that our software does approximately</font>

71
00:03:23,459 --> 00:03:28,950
what we want you to do at least doesn't

72
00:03:26,400 --> 00:03:31,380
<font color="#CCCCCC">apply as well to multi-threaded software</font>

73
00:03:28,950 --> 00:03:33,450
because if you run<font color="#E5E5E5"> it twice a</font>

74
00:03:31,380 --> 00:03:35,310
multi-threaded program it might do

75
00:03:33,450 --> 00:03:37,798
<font color="#E5E5E5">something different a second time so</font>

76
00:03:35,310 --> 00:03:40,680
your unit tests might run fine one<font color="#CCCCCC"> day</font>

77
00:03:37,799 --> 00:03:44,070
and then fail the next<font color="#CCCCCC"> day and and this</font>

78
00:03:40,680 --> 00:03:47,040
<font color="#E5E5E5">is undesirable and and the fact that</font>

79
00:03:44,070 --> 00:03:51,600
having passing tests<font color="#E5E5E5"> doesn't mean so</font>

80
00:03:47,040 --> 00:03:54,630
much in that<font color="#E5E5E5"> context</font><font color="#CCCCCC"> you might be aware</font>

81
00:03:51,600 --> 00:03:56,730
<font color="#CCCCCC">of tools</font><font color="#E5E5E5"> of race detection tools like</font>

82
00:03:54,630 --> 00:03:59,190
like well<font color="#E5E5E5"> grind and thread sanitizer</font>

83
00:03:56,730 --> 00:04:00,630
<font color="#CCCCCC">right and</font><font color="#E5E5E5"> also you have done</font><font color="#CCCCCC"> threaded</font>

84
00:03:59,190 --> 00:04:03,570
program<font color="#E5E5E5"> probably have at least heard of</font>

85
00:04:00,630 --> 00:04:08,519
<font color="#E5E5E5">this so these tools</font><font color="#CCCCCC"> instrument your</font>

86
00:04:03,570 --> 00:04:11,640
program<font color="#CCCCCC"> beforehand</font><font color="#E5E5E5"> and they will create</font>

87
00:04:08,519 --> 00:04:13,230
warnings<font color="#CCCCCC"> during runtime if your</font><font color="#E5E5E5"> program</font>

88
00:04:11,640 --> 00:04:16,168
does things that<font color="#E5E5E5"> apply</font><font color="#CCCCCC"> to some</font>

89
00:04:13,230 --> 00:04:18,089
heuristics they have for bad behavior

90
00:04:16,168 --> 00:04:21,750
for some definition<font color="#CCCCCC"> of bad but</font>

91
00:04:18,089 --> 00:04:23,280
<font color="#E5E5E5">unfortunately these things</font><font color="#CCCCCC"> - were not do</font>

92
00:04:21,750 --> 00:04:25,320
not give guarantees<font color="#E5E5E5"> even for the types</font>

93
00:04:23,280 --> 00:04:25,960
<font color="#E5E5E5">of problems they do look for they do not</font>

94
00:04:25,320 --> 00:04:30,849
<font color="#CCCCCC">currently</font>

95
00:04:25,960 --> 00:04:34,060
to find them but all hope is not lost

96
00:04:30,850 --> 00:04:36,310
<font color="#CCCCCC">because there</font><font color="#E5E5E5"> are tools that can</font><font color="#CCCCCC"> give</font>

97
00:04:34,060 --> 00:04:38,490
these types of<font color="#E5E5E5"> guarantees and this is</font>

98
00:04:36,310 --> 00:04:43,180
what I'm<font color="#E5E5E5"> going to teach</font><font color="#CCCCCC"> you today</font><font color="#E5E5E5"> so</font>

99
00:04:38,490 --> 00:04:46,780
<font color="#CCCCCC">nidhogg is a a tool it's a program you</font>

100
00:04:43,180 --> 00:04:49,990
you<font color="#CCCCCC"> compiled on your computer and you</font>

101
00:04:46,780 --> 00:04:52,590
run your<font color="#E5E5E5"> unit</font><font color="#CCCCCC"> tests</font><font color="#E5E5E5"> through them so so</font>

102
00:04:49,990 --> 00:04:55,180
you write your unit<font color="#CCCCCC"> test as normal and</font>

103
00:04:52,590 --> 00:05:00,388
they have to be unit tests<font color="#E5E5E5"> so that is</font>

104
00:04:55,180 --> 00:05:03,280
they have to to be programs that don't

105
00:05:00,389 --> 00:05:05,830
take any any additional input you cannot

106
00:05:03,280 --> 00:05:10,659
have<font color="#CCCCCC"> tests interactive programs it this</font>

107
00:05:05,830 --> 00:05:13,210
way for<font color="#CCCCCC"> example and and what network</font>

108
00:05:10,660 --> 00:05:15,039
does is that it<font color="#CCCCCC"> just runs your</font><font color="#E5E5E5"> test</font>

109
00:05:13,210 --> 00:05:17,789
several times and actually

110
00:05:15,039 --> 00:05:21,610
<font color="#E5E5E5">systematically</font><font color="#CCCCCC"> tries all the possible</font>

111
00:05:17,789 --> 00:05:24,520
<font color="#E5E5E5">things it can do due to the way multiple</font>

112
00:05:21,610 --> 00:05:26,770
threads interact and thus because it

113
00:05:24,520 --> 00:05:32,680
tries everything<font color="#E5E5E5"> at the end you have a</font>

114
00:05:26,770 --> 00:05:36,599
guarantee<font color="#CCCCCC"> that if it can crash you will</font>

115
00:05:32,680 --> 00:05:39,580
find it<font color="#CCCCCC"> but also</font><font color="#E5E5E5"> unlike things like</font>

116
00:05:36,599 --> 00:05:41,830
unlike<font color="#CCCCCC"> rays the textures there are</font>

117
00:05:39,580 --> 00:05:44,590
benign data<font color="#E5E5E5"> races but network is</font>

118
00:05:41,830 --> 00:05:46,650
designed<font color="#E5E5E5"> these types of tool doesn't</font>

119
00:05:44,590 --> 00:05:50,440
need to be<font color="#CCCCCC"> that</font><font color="#E5E5E5"> way but network is</font>

120
00:05:46,650 --> 00:05:52,840
designed to<font color="#E5E5E5"> not complain when you have</font>

121
00:05:50,440 --> 00:05:56,020
benign data races<font color="#CCCCCC"> so what it looks for</font>

122
00:05:52,840 --> 00:05:57,400
<font color="#E5E5E5">is is what you would look for when you</font>

123
00:05:56,020 --> 00:05:59,740
run<font color="#E5E5E5"> your unit</font><font color="#CCCCCC"> test you</font><font color="#E5E5E5"> look if it</font>

124
00:05:57,400 --> 00:06:07,570
crashes or or the output is wrong or

125
00:05:59,740 --> 00:06:10,060
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that so</font><font color="#E5E5E5"> I will</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> hook is</font>

126
00:06:07,570 --> 00:06:13,210
designed to work<font color="#E5E5E5"> on the level of</font><font color="#CCCCCC"> LLVM</font>

127
00:06:10,060 --> 00:06:16,240
bit code so what you do<font color="#CCCCCC"> with you take</font>

128
00:06:13,210 --> 00:06:19,870
<font color="#E5E5E5">your unit test and you compile it with</font>

129
00:06:16,240 --> 00:06:20,979
<font color="#CCCCCC">clang -</font><font color="#E5E5E5"> I will be</font><font color="#CCCCCC"> a bit code file you</font>

130
00:06:19,870 --> 00:06:23,050
can<font color="#E5E5E5"> link this together</font>

131
00:06:20,979 --> 00:06:25,180
this command<font color="#E5E5E5"> is not very commonly</font><font color="#CCCCCC"> used</font>

132
00:06:23,050 --> 00:06:26,830
but it exists you<font color="#CCCCCC"> can link them together</font>

133
00:06:25,180 --> 00:06:29,560
if you<font color="#E5E5E5"> have multiple source files and</font>

134
00:06:26,830 --> 00:06:32,109
then you give that<font color="#E5E5E5"> to</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> again it runs</font>

135
00:06:29,560 --> 00:06:33,490
it<font color="#CCCCCC"> for you there are</font><font color="#E5E5E5"> also other</font><font color="#CCCCCC"> ways for</font>

136
00:06:32,110 --> 00:06:35,529
<font color="#CCCCCC">example if you have a bit</font><font color="#E5E5E5"> of a bigger</font>

137
00:06:33,490 --> 00:06:37,420
program<font color="#E5E5E5"> if you have an entire build</font>

138
00:06:35,529 --> 00:06:40,810
system there's a rapid

139
00:06:37,420 --> 00:06:43,450
<font color="#CCCCCC">shift around clang called w LLVM which</font>

140
00:06:40,810 --> 00:06:45,490
is a bit of a mouthful but it is a

141
00:06:43,450 --> 00:06:49,690
drop-in replacement<font color="#CCCCCC"> for</font><font color="#E5E5E5"> CC and it will</font>

142
00:06:45,490 --> 00:06:50,950
<font color="#E5E5E5">generate a bit code in a even using a</font>

143
00:06:49,690 --> 00:06:53,410
build system<font color="#CCCCCC"> that</font><font color="#E5E5E5"> doesn't know this</font>

144
00:06:50,950 --> 00:06:55,510
thing and there's also<font color="#E5E5E5"> our convenience</font>

145
00:06:53,410 --> 00:06:57,370
<font color="#CCCCCC">front-end if you just have a single C</font>

146
00:06:55,510 --> 00:07:04,270
file which is what<font color="#CCCCCC"> we're going to use</font>

147
00:06:57,370 --> 00:07:07,620
for<font color="#E5E5E5"> most of the day yes so need hook is</font>

148
00:07:04,270 --> 00:07:10,810
open source<font color="#E5E5E5"> and available on github</font><font color="#CCCCCC"> so</font>

149
00:07:07,620 --> 00:07:13,150
<font color="#E5E5E5">if you really want to look at the source</font>

150
00:07:10,810 --> 00:07:15,790
<font color="#CCCCCC">code feel free</font><font color="#E5E5E5"> that's not really what</font>

151
00:07:13,150 --> 00:07:21,250
you<font color="#CCCCCC"> need to to be</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to use it but</font>

152
00:07:15,790 --> 00:07:24,840
it's it's freely<font color="#E5E5E5"> available so let me</font>

153
00:07:21,250 --> 00:07:28,410
show<font color="#E5E5E5"> you a very basic</font><font color="#CCCCCC"> example of</font><font color="#E5E5E5"> of</font>

154
00:07:24,840 --> 00:07:32,289
concurrent<font color="#E5E5E5"> program so this is a program</font>

155
00:07:28,410 --> 00:07:34,060
<font color="#CCCCCC">in C</font><font color="#E5E5E5"> as you might be able</font><font color="#CCCCCC"> to tell it's</font>

156
00:07:32,290 --> 00:07:38,770
<font color="#E5E5E5">large enough for you in the back</font><font color="#CCCCCC"> to read</font>

157
00:07:34,060 --> 00:07:41,320
yeah which we have a main<font color="#CCCCCC"> function which</font>

158
00:07:38,770 --> 00:07:45,340
spawns an additional thread T and then

159
00:07:41,320 --> 00:07:48,010
writes a variable and<font color="#E5E5E5"> that which is</font><font color="#CCCCCC"> a</font>

160
00:07:45,340 --> 00:07:50,619
parameter<font color="#CCCCCC"> to this thread T and thread</font><font color="#E5E5E5"> T</font>

161
00:07:48,010 --> 00:07:53,560
does something and assume<font color="#CCCCCC"> that</font><font color="#E5E5E5"> its</font>

162
00:07:50,620 --> 00:07:59,710
parameter is already set so<font color="#E5E5E5"> if</font><font color="#CCCCCC"> the</font>

163
00:07:53,560 --> 00:08:01,210
program<font color="#E5E5E5"> correct it's not right so let's</font>

164
00:07:59,710 --> 00:08:07,599
try<font color="#CCCCCC"> to run</font><font color="#E5E5E5"> it and see what happens</font>

165
00:08:01,210 --> 00:08:11,859
so clang example<font color="#CCCCCC"> 1 and we need to say P</font>

166
00:08:07,600 --> 00:08:14,290
thread<font color="#E5E5E5"> I believe then a dot out and it</font>

167
00:08:11,860 --> 00:08:20,820
doesn't<font color="#E5E5E5"> crash my assertion doesn't fail</font>

168
00:08:14,290 --> 00:08:24,580
maybe we were just unlucky seems fine

169
00:08:20,820 --> 00:08:29,380
well I've toyed with you enough of

170
00:08:24,580 --> 00:08:31,870
course<font color="#CCCCCC"> what can happen is is this</font><font color="#E5E5E5"> can</font>

171
00:08:29,380 --> 00:08:33,880
<font color="#CCCCCC">happen before that</font><font color="#E5E5E5"> let's see if we try</font>

172
00:08:31,870 --> 00:08:38,929
<font color="#E5E5E5">to run this thing with</font><font color="#CCCCCC"> knee-jerk if it</font>

173
00:08:33,880 --> 00:08:41,280
what it says<font color="#E5E5E5"> we say nidhogg and we say</font>

174
00:08:38,929 --> 00:08:43,829
<font color="#CCCCCC">legacy which is the</font><font color="#E5E5E5"> front end a Texaco</font>

175
00:08:41,280 --> 00:08:45,300
<font color="#CCCCCC">that's an input and we tell it which</font>

176
00:08:43,830 --> 00:08:47,190
memory<font color="#E5E5E5"> model we want if you don't know</font>

177
00:08:45,300 --> 00:08:49,740
about<font color="#E5E5E5"> a memory model is just ignore this</font>

178
00:08:47,190 --> 00:08:55,490
for now<font color="#E5E5E5"> I will get to that in in the</font>

179
00:08:49,740 --> 00:08:57,600
future<font color="#E5E5E5"> and we give it input file</font><font color="#CCCCCC"> and it</font>

180
00:08:55,490 --> 00:09:02,010
produces a bunch<font color="#E5E5E5"> of output but the</font>

181
00:08:57,600 --> 00:09:04,290
interesting part starts here so this

182
00:09:02,010 --> 00:09:10,230
means that<font color="#E5E5E5"> need</font><font color="#CCCCCC"> hook around</font><font color="#E5E5E5"> this program</font>

183
00:09:04,290 --> 00:09:12,630
twice and after<font color="#CCCCCC"> that it found a problem</font>

184
00:09:10,230 --> 00:09:17,100
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> assertion variation which is</font>

185
00:09:12,630 --> 00:09:19,290
<font color="#E5E5E5">this x equals</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> one we had and the</font>

186
00:09:17,100 --> 00:09:21,750
above the error message we<font color="#CCCCCC"> have a trace</font>

187
00:09:19,290 --> 00:09:27,630
<font color="#E5E5E5">of what the program actually did to come</font>

188
00:09:21,750 --> 00:09:30,960
to that<font color="#E5E5E5"> point so this thing this bracket</font>

189
00:09:27,630 --> 00:09:35,550
<font color="#CCCCCC">0 outer bracket means the main thread</font>

190
00:09:30,960 --> 00:09:37,980
and then<font color="#CCCCCC"> 0.0 is the first thread spawned</font>

191
00:09:35,550 --> 00:09:40,380
by<font color="#CCCCCC"> the main thread</font><font color="#E5E5E5"> and so on so these</font>

192
00:09:37,980 --> 00:09:43,200
are the thread identifiers<font color="#E5E5E5"> that that</font>

193
00:09:40,380 --> 00:09:44,939
need to create for<font color="#CCCCCC"> itself and the</font>

194
00:09:43,200 --> 00:09:47,700
execution of<font color="#E5E5E5"> this program went like this</font>

195
00:09:44,940 --> 00:09:49,770
first we spawn the thread<font color="#E5E5E5"> in this case</font>

196
00:09:47,700 --> 00:09:51,720
the<font color="#CCCCCC"> declaring debug info isn't</font><font color="#E5E5E5"> quite</font>

197
00:09:49,770 --> 00:09:53,280
precise enough<font color="#E5E5E5"> to give us there the</font>

198
00:09:51,720 --> 00:09:56,160
correct<font color="#E5E5E5"> message here but this is the</font>

199
00:09:53,280 --> 00:09:58,620
<font color="#E5E5E5">threads phone since afterwards we can</font>

200
00:09:56,160 --> 00:10:01,709
<font color="#E5E5E5">see the second thread running and then</font>

201
00:09:58,620 --> 00:10:05,190
<font color="#E5E5E5">the second thread runs performs the load</font>

202
00:10:01,710 --> 00:10:08,700
of<font color="#CCCCCC"> X upon which we run the main thread</font>

203
00:10:05,190 --> 00:10:11,040
<font color="#CCCCCC">again</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> 1 to X so</font><font color="#CCCCCC"> obviously we</font>

204
00:10:08,700 --> 00:10:13,590
<font color="#E5E5E5">have loaded whatever was in X before it</font>

205
00:10:11,040 --> 00:10:19,680
was<font color="#E5E5E5"> written which is probably</font><font color="#CCCCCC"> 0 since</font>

206
00:10:13,590 --> 00:10:21,540
this is a static variable and then

207
00:10:19,680 --> 00:10:24,329
finally the<font color="#E5E5E5"> program crashes because of</font>

208
00:10:21,540 --> 00:10:26,579
this<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so this is what need hook does</font>

209
00:10:24,330 --> 00:10:28,830
<font color="#E5E5E5">right it it runs the</font><font color="#CCCCCC"> program a couple of</font>

210
00:10:26,580 --> 00:10:31,860
times<font color="#E5E5E5"> to in this case because</font><font color="#CCCCCC"> there are</font>

211
00:10:28,830 --> 00:10:39,030
two<font color="#E5E5E5"> behaviors of this program and it</font>

212
00:10:31,860 --> 00:10:42,300
<font color="#CCCCCC">sees if it can make it fail so how does</font>

213
00:10:39,030 --> 00:10:45,290
it<font color="#CCCCCC"> do this</font><font color="#E5E5E5"> so it hook takes your program</font>

214
00:10:42,300 --> 00:10:48,510
and runs it instruction by instruction

215
00:10:45,290 --> 00:10:50,310
<font color="#E5E5E5">it doesn't actually create multiple</font>

216
00:10:48,510 --> 00:10:53,069
threads<font color="#E5E5E5"> but rather</font>

217
00:10:50,310 --> 00:10:55,829
whenever there is a there are multiple

218
00:10:53,069 --> 00:10:57,899
threads<font color="#E5E5E5"> that can run it arbitrarily</font>

219
00:10:55,829 --> 00:10:59,758
picks some of that one<font color="#E5E5E5"> of them to run at</font>

220
00:10:57,899 --> 00:11:03,449
the singles in<font color="#CCCCCC"> a single step</font>

221
00:10:59,759 --> 00:11:05,249
so this trace we saw was well<font color="#E5E5E5"> it</font>

222
00:11:03,449 --> 00:11:11,490
corresponds<font color="#CCCCCC"> very closely to what NIDA</font>

223
00:11:05,249 --> 00:11:12,870
actually did internally<font color="#E5E5E5"> but so it</font>

224
00:11:11,490 --> 00:11:16,559
executes<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> execution of the</font>

225
00:11:12,870 --> 00:11:19,829
program<font color="#E5E5E5"> which it just picks arbitrary</font>

226
00:11:16,559 --> 00:11:23,550
threads to run so in this case it didn't

227
00:11:19,829 --> 00:11:27,329
it pick the correct non crashing case

228
00:11:23,550 --> 00:11:30,508
<font color="#E5E5E5">that's the first execution and then it</font>

229
00:11:27,329 --> 00:11:35,910
finishes that and then it does analysis

230
00:11:30,509 --> 00:11:39,029
<font color="#E5E5E5">so who here can tell me the traditional</font>

231
00:11:35,910 --> 00:11:45,779
definition<font color="#CCCCCC"> of a data race in shared</font>

232
00:11:39,029 --> 00:11:48,059
memory programs you<font color="#E5E5E5"> have probably seen</font>

233
00:11:45,779 --> 00:11:50,040
this<font color="#CCCCCC"> before but</font><font color="#E5E5E5"> I'm sure</font><font color="#CCCCCC"> you're a bit</font>

234
00:11:48,059 --> 00:11:52,769
shy in<font color="#E5E5E5"> case it I'm going to</font><font color="#CCCCCC"> say</font>

235
00:11:50,040 --> 00:11:54,959
something<font color="#CCCCCC"> very academic but the</font>

236
00:11:52,769 --> 00:11:56,970
definition typically<font color="#CCCCCC"> reads something</font>

237
00:11:54,959 --> 00:11:58,888
like this<font color="#E5E5E5"> two threads accessing the same</font>

238
00:11:56,970 --> 00:12:02,639
variable and<font color="#E5E5E5"> at least one of them is</font>

239
00:11:58,889 --> 00:12:05,550
writing it and if you have this<font color="#E5E5E5"> then the</font>

240
00:12:02,639 --> 00:12:08,579
order of these two accesses<font color="#E5E5E5"> matter right</font>

241
00:12:05,550 --> 00:12:10,589
<font color="#E5E5E5">because the right changes what they read</font>

242
00:12:08,579 --> 00:12:15,508
will see or if you have<font color="#E5E5E5"> two rights to</font>

243
00:12:10,589 --> 00:12:19,230
change what the end result<font color="#E5E5E5"> will be so</font>

244
00:12:15,509 --> 00:12:22,319
<font color="#E5E5E5">need hook looks at this</font><font color="#CCCCCC"> racist it also</font>

245
00:12:19,230 --> 00:12:24,750
considers<font color="#E5E5E5"> other types of of races</font><font color="#CCCCCC"> then</font>

246
00:12:22,319 --> 00:12:28,079
<font color="#CCCCCC">later</font><font color="#E5E5E5"> races like like the order of of</font>

247
00:12:24,750 --> 00:12:31,050
which two threads<font color="#E5E5E5"> which gets first to</font>

248
00:12:28,079 --> 00:12:36,149
get a mutex<font color="#E5E5E5"> and so on but it</font><font color="#CCCCCC"> looks at</font>

249
00:12:31,050 --> 00:12:38,008
these types of<font color="#E5E5E5"> races</font><font color="#CCCCCC"> and it tries to see</font>

250
00:12:36,149 --> 00:12:40,860
if it can<font color="#CCCCCC"> change the schedule it just</font>

251
00:12:38,009 --> 00:12:43,829
executed so that they are wrong in the

252
00:12:40,860 --> 00:12:48,240
different order and then it puts puts

253
00:12:43,829 --> 00:12:51,229
<font color="#E5E5E5">all these executions in a queue and then</font>

254
00:12:48,240 --> 00:12:53,819
it just restarts<font color="#E5E5E5"> running your program</font>

255
00:12:51,230 --> 00:12:55,649
<font color="#E5E5E5">replaying up until the point where where</font>

256
00:12:53,819 --> 00:12:57,870
the race comes and then playing that in

257
00:12:55,649 --> 00:13:00,660
<font color="#CCCCCC">Reverse and then an arbitrary execution</font>

258
00:12:57,870 --> 00:13:02,309
afterward<font color="#CCCCCC"> and then you just repeat this</font>

259
00:13:00,660 --> 00:13:03,059
process until you're out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> new</font>

260
00:13:02,309 --> 00:13:06,329
<font color="#CCCCCC">behaviors</font>

261
00:13:03,059 --> 00:13:08,699
explore so this is the<font color="#E5E5E5"> conceptual let me</font>

262
00:13:06,329 --> 00:13:12,238
show you a figure<font color="#CCCCCC"> of what it what</font><font color="#E5E5E5"> it did</font>

263
00:13:08,699 --> 00:13:16,019
<font color="#CCCCCC">on this very trivial example we had that</font>

264
00:13:12,239 --> 00:13:18,299
I showed<font color="#CCCCCC"> you so we start by</font><font color="#E5E5E5"> running the</font>

265
00:13:16,019 --> 00:13:20,549
first thread twice creating another

266
00:13:18,299 --> 00:13:23,489
thread and then writing<font color="#CCCCCC"> 2x and then</font>

267
00:13:20,549 --> 00:13:28,468
right running<font color="#E5E5E5"> the second thread and then</font>

268
00:13:23,489 --> 00:13:31,289
it is done<font color="#E5E5E5"> so</font><font color="#CCCCCC"> need hook then since this</font>

269
00:13:28,469 --> 00:13:36,629
race between the read of<font color="#E5E5E5"> X and write to</font>

270
00:13:31,289 --> 00:13:43,348
<font color="#E5E5E5">X and put in the</font><font color="#CCCCCC"> Q that it wants to</font>

271
00:13:36,629 --> 00:13:45,779
<font color="#E5E5E5">execute</font><font color="#CCCCCC"> after spawning thread</font><font color="#E5E5E5"> T we want</font>

272
00:13:43,349 --> 00:13:49,409
to<font color="#CCCCCC"> immediately switch</font><font color="#E5E5E5"> and execute T so</font>

273
00:13:45,779 --> 00:13:51,679
it puts<font color="#E5E5E5"> this in the queue and then since</font>

274
00:13:49,409 --> 00:13:54,569
there are no more races in this program

275
00:13:51,679 --> 00:13:57,299
it restores execution picking one of

276
00:13:54,569 --> 00:14:00,539
these these executions<font color="#E5E5E5"> from the from the</font>

277
00:13:57,299 --> 00:14:02,909
queue<font color="#E5E5E5"> and it runs it to completion and</font>

278
00:14:00,539 --> 00:14:05,309
<font color="#E5E5E5">then it finds the assertion failure so</font>

279
00:14:02,909 --> 00:14:10,399
conceptually<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is this is what yoga</font>

280
00:14:05,309 --> 00:14:14,608
does<font color="#E5E5E5"> doesn't seem so hard</font><font color="#CCCCCC"> right so</font>

281
00:14:10,399 --> 00:14:16,589
that's<font color="#E5E5E5"> all fine and</font><font color="#CCCCCC"> dandy but</font><font color="#E5E5E5"> but what</font>

282
00:14:14,609 --> 00:14:19,019
are the limitations right<font color="#E5E5E5"> surely this is</font>

283
00:14:16,589 --> 00:14:21,509
just something that works fine<font color="#E5E5E5"> for for</font>

284
00:14:19,019 --> 00:14:23,939
examples for for tiny toy programs but

285
00:14:21,509 --> 00:14:26,279
that<font color="#E5E5E5"> breaks down when you run it on</font>

286
00:14:23,939 --> 00:14:28,169
larger code<font color="#E5E5E5"> so so what are the</font>

287
00:14:26,279 --> 00:14:30,749
<font color="#CCCCCC">limitations of</font><font color="#E5E5E5"> these techniques well</font>

288
00:14:28,169 --> 00:14:34,619
it's actually actually<font color="#E5E5E5"> quite simple</font>

289
00:14:30,749 --> 00:14:37,739
<font color="#E5E5E5">there are basically two hard limits on</font>

290
00:14:34,619 --> 00:14:40,499
<font color="#E5E5E5">these techniques the</font><font color="#CCCCCC"> first limit is that</font>

291
00:14:37,739 --> 00:14:44,719
<font color="#CCCCCC">a input program</font><font color="#E5E5E5"> the unit tests must be</font>

292
00:14:40,499 --> 00:14:47,519
deterministic<font color="#E5E5E5"> so what that means is that</font>

293
00:14:44,719 --> 00:14:49,739
every<font color="#CCCCCC"> time</font><font color="#E5E5E5"> to really runs your program</font>

294
00:14:47,519 --> 00:14:53,389
it must do the exact same<font color="#E5E5E5"> thing it did</font>

295
00:14:49,739 --> 00:14:56,219
the first time so you're not<font color="#CCCCCC"> allowed</font><font color="#E5E5E5"> to</font>

296
00:14:53,389 --> 00:14:58,589
to look at what the time is<font color="#E5E5E5"> and branch</font>

297
00:14:56,219 --> 00:15:02,879
on that like a random<font color="#CCCCCC"> number generator</font>

298
00:14:58,589 --> 00:15:07,199
<font color="#CCCCCC">which to do</font><font color="#E5E5E5"> and if you do file i/o you</font>

299
00:15:02,879 --> 00:15:10,379
have to be very careful some tools<font color="#CCCCCC"> could</font>

300
00:15:07,199 --> 00:15:12,419
<font color="#E5E5E5">conceptually intercept these things and</font>

301
00:15:10,379 --> 00:15:14,249
<font color="#E5E5E5">and make sure that that no funny</font>

302
00:15:12,419 --> 00:15:14,960
business is<font color="#E5E5E5"> going on but</font><font color="#CCCCCC"> needle</font><font color="#E5E5E5"> does not</font>

303
00:15:14,249 --> 00:15:18,980
<font color="#CCCCCC">do this</font>

304
00:15:14,960 --> 00:15:21,529
so so if you do<font color="#CCCCCC"> phyllo you should</font>

305
00:15:18,980 --> 00:15:24,170
probably make sure<font color="#E5E5E5"> you are only reading</font>

306
00:15:21,529 --> 00:15:26,270
<font color="#CCCCCC">and that that</font><font color="#E5E5E5"> you are closing all your</font>

307
00:15:24,170 --> 00:15:30,589
your file descriptors before you start

308
00:15:26,270 --> 00:15:33,920
your threaded<font color="#CCCCCC"> workload there</font><font color="#E5E5E5"> are also a</font>

309
00:15:30,589 --> 00:15:37,750
second<font color="#CCCCCC"> limitation is in that the</font><font color="#E5E5E5"> program</font>

310
00:15:33,920 --> 00:15:40,279
must not run<font color="#E5E5E5"> forever</font><font color="#CCCCCC"> and this is a bit</font>

311
00:15:37,750 --> 00:15:41,810
tricky to<font color="#E5E5E5"> explain so I will instead show</font>

312
00:15:40,279 --> 00:15:44,209
you what it means<font color="#E5E5E5"> because I think</font><font color="#CCCCCC"> that</font>

313
00:15:41,810 --> 00:15:46,250
will make<font color="#E5E5E5"> it a lot</font><font color="#CCCCCC"> easier to grasp</font><font color="#E5E5E5"> but</font>

314
00:15:44,209 --> 00:15:48,500
but<font color="#E5E5E5"> but the</font><font color="#CCCCCC"> problem with running</font><font color="#E5E5E5"> forever</font>

315
00:15:46,250 --> 00:15:49,880
<font color="#E5E5E5">is that that this implies that the</font>

316
00:15:48,500 --> 00:15:51,860
program has either infinitely<font color="#E5E5E5"> many</font>

317
00:15:49,880 --> 00:15:54,500
behaviors<font color="#E5E5E5"> or that it doesn't terminate</font>

318
00:15:51,860 --> 00:16:00,310
in which case<font color="#E5E5E5"> you just</font><font color="#CCCCCC"> get stuck right</font>

319
00:15:54,500 --> 00:16:03,440
<font color="#E5E5E5">because it actually runs your program so</font>

320
00:16:00,310 --> 00:16:04,910
let<font color="#E5E5E5"> me show you a second example so say</font>

321
00:16:03,440 --> 00:16:09,440
that we wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> fix this program but</font>

322
00:16:04,910 --> 00:16:12,020
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> doing the</font><font color="#CCCCCC"> obvious thing we</font>

323
00:16:09,440 --> 00:16:15,050
introduced a queue data structure<font color="#E5E5E5"> so</font>

324
00:16:12,020 --> 00:16:19,130
this is<font color="#E5E5E5"> this is not supposed</font><font color="#CCCCCC"> to be there</font>

325
00:16:15,050 --> 00:16:22,010
<font color="#E5E5E5">yet so this is the same program</font><font color="#CCCCCC"> but</font>

326
00:16:19,130 --> 00:16:25,880
<font color="#E5E5E5">instead of having a global variable X we</font>

327
00:16:22,010 --> 00:16:29,540
use<font color="#E5E5E5"> a library that provides</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> for Q</font>

328
00:16:25,880 --> 00:16:32,900
and this<font color="#E5E5E5"> Q we can put integers in and</font>

329
00:16:29,540 --> 00:16:35,449
taking<font color="#E5E5E5"> the result and we use this Q to</font>

330
00:16:32,900 --> 00:16:36,920
to shuffle<font color="#E5E5E5"> the integers between between</font>

331
00:16:35,450 --> 00:16:38,720
<font color="#E5E5E5">the main thread</font><font color="#CCCCCC"> and T because we hope</font>

332
00:16:36,920 --> 00:16:43,180
<font color="#E5E5E5">this will this will solve a race</font>

333
00:16:38,720 --> 00:16:45,620
condition<font color="#E5E5E5"> now our program will</font><font color="#CCCCCC"> work so</font>

334
00:16:43,180 --> 00:16:48,400
the<font color="#E5E5E5"> Q interface is a bit particular</font>

335
00:16:45,620 --> 00:16:51,170
peculiar in that<font color="#E5E5E5"> the in queue operations</font>

336
00:16:48,400 --> 00:16:53,660
<font color="#E5E5E5">always succeeds but the dequeue</font>

337
00:16:51,170 --> 00:16:55,160
operation might return either true or

338
00:16:53,660 --> 00:17:00,560
<font color="#CCCCCC">false depending</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> if the queue is</font><font color="#E5E5E5"> empty</font>

339
00:16:55,160 --> 00:17:02,600
or<font color="#E5E5E5"> not so so in order to make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that</font>

340
00:17:00,560 --> 00:17:04,819
we<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> get the the number we</font><font color="#CCCCCC"> want</font>

341
00:17:02,600 --> 00:17:09,199
out of<font color="#E5E5E5"> it we</font><font color="#CCCCCC"> just have to loop until</font><font color="#E5E5E5"> it</font>

342
00:17:04,819 --> 00:17:12,520
succeeds<font color="#CCCCCC"> so let's see what happens if we</font>

343
00:17:09,199 --> 00:17:12,520
<font color="#CCCCCC">try to</font><font color="#E5E5E5"> run it</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> on this program</font>

344
00:17:14,140 --> 00:17:19,209
<font color="#E5E5E5">sample</font><font color="#CCCCCC"> - OH</font>

345
00:17:16,930 --> 00:17:23,350
[Music]

346
00:17:19,209 --> 00:17:23,350
<font color="#E5E5E5">copy edge header files as well</font>

347
00:17:23,579 --> 00:17:31,480
and this is yes<font color="#CCCCCC"> so we're getting</font><font color="#E5E5E5"> into</font>

348
00:17:28,480 --> 00:17:33,070
the nitty-gritty<font color="#E5E5E5"> already so I told you</font>

349
00:17:31,480 --> 00:17:35,320
<font color="#E5E5E5">that needle you would only complain</font>

350
00:17:33,070 --> 00:17:38,470
about real errors but there isn't<font color="#CCCCCC"> some</font>

351
00:17:35,320 --> 00:17:40,510
exceptions to<font color="#CCCCCC"> that just through</font><font color="#E5E5E5"> this is</font>

352
00:17:38,470 --> 00:17:44,200
just some<font color="#E5E5E5"> mess in interface</font><font color="#CCCCCC"> really but</font>

353
00:17:40,510 --> 00:17:46,990
<font color="#E5E5E5">but here we have a sort</font><font color="#CCCCCC"> of a warning</font><font color="#E5E5E5"> of</font>

354
00:17:44,200 --> 00:17:50,290
strange behavior<font color="#CCCCCC"> that is that is opt-out</font>

355
00:17:46,990 --> 00:17:51,730
rather<font color="#CCCCCC"> no obtained and what it says</font><font color="#E5E5E5"> is</font>

356
00:17:50,290 --> 00:17:53,980
that is queue data structure uses

357
00:17:51,730 --> 00:17:56,380
mutexes but it doesn't call<font color="#CCCCCC"> init on them</font>

358
00:17:53,980 --> 00:17:59,740
<font color="#E5E5E5">because I was too lazy to I didn't want</font>

359
00:17:56,380 --> 00:18:04,720
to put an init function here so<font color="#E5E5E5"> instead</font>

360
00:17:59,740 --> 00:18:06,760
<font color="#E5E5E5">I use static initialization and so you</font>

361
00:18:04,720 --> 00:18:09,370
have to add a really<font color="#E5E5E5"> long command line</font>

362
00:18:06,760 --> 00:18:14,670
which is<font color="#E5E5E5"> in the help text so you don't</font>

363
00:18:09,370 --> 00:18:17,979
<font color="#E5E5E5">have to</font><font color="#CCCCCC"> memorize this</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then it works</font>

364
00:18:14,670 --> 00:18:19,990
<font color="#CCCCCC">well I say that but there doesn't</font><font color="#E5E5E5"> seem</font>

365
00:18:17,980 --> 00:18:23,560
<font color="#CCCCCC">to be much</font><font color="#E5E5E5"> happening right it's just</font>

366
00:18:19,990 --> 00:18:29,140
<font color="#E5E5E5">standing there and doing nothing let's</font>

367
00:18:23,560 --> 00:18:30,940
add another flag<font color="#E5E5E5"> print progress and it</font>

368
00:18:29,140 --> 00:18:34,150
will<font color="#E5E5E5"> print how many behaviors it has</font>

369
00:18:30,940 --> 00:18:36,610
explored already<font color="#E5E5E5"> 400 behaviors 500 and</font>

370
00:18:34,150 --> 00:18:38,320
Counting<font color="#E5E5E5"> so something is strange right</font>

371
00:18:36,610 --> 00:18:42,510
this program isn't very complicated<font color="#CCCCCC"> but</font>

372
00:18:38,320 --> 00:18:48,389
it just keeps<font color="#E5E5E5"> going so the problem here</font>

373
00:18:42,510 --> 00:18:51,700
what<font color="#CCCCCC"> lead hook does</font><font color="#E5E5E5"> is that that it will</font>

374
00:18:48,390 --> 00:18:53,710
<font color="#E5E5E5">first run an execution when</font><font color="#CCCCCC"> where this</font>

375
00:18:51,700 --> 00:18:57,370
the queue operation succeeds<font color="#E5E5E5"> on the</font>

376
00:18:53,710 --> 00:18:58,870
first try and then it will see that that

377
00:18:57,370 --> 00:19:00,939
<font color="#E5E5E5">it can change the</font><font color="#CCCCCC"> behavior of</font><font color="#E5E5E5"> this thing</font>

378
00:18:58,870 --> 00:19:03,850
by by switching it with this<font color="#E5E5E5"> thing</font>

379
00:19:00,940 --> 00:19:05,170
<font color="#E5E5E5">so it switches them</font><font color="#CCCCCC"> and now try the</font>

380
00:19:03,850 --> 00:19:07,899
queue fails the first<font color="#CCCCCC"> time and then</font>

381
00:19:05,170 --> 00:19:09,580
succeeds<font color="#E5E5E5"> and then in the second</font>

382
00:19:07,900 --> 00:19:11,920
execution it<font color="#E5E5E5"> says oh we can switch</font><font color="#CCCCCC"> it</font>

383
00:19:09,580 --> 00:19:14,409
with thank you again<font color="#CCCCCC"> to make it fail</font>

384
00:19:11,920 --> 00:19:16,450
<font color="#CCCCCC">twice so it switches when in queue</font><font color="#E5E5E5"> again</font>

385
00:19:14,410 --> 00:19:19,630
<font color="#E5E5E5">and</font><font color="#CCCCCC"> ok now we</font><font color="#E5E5E5"> have an execution where it</font>

386
00:19:16,450 --> 00:19:22,570
fails twice<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> and now we have it</font><font color="#CCCCCC"> every</font>

387
00:19:19,630 --> 00:19:25,000
yet<font color="#E5E5E5"> another call to the queue which we</font>

388
00:19:22,570 --> 00:19:27,100
can switch with on queue and then we can

389
00:19:25,000 --> 00:19:29,140
make it fail<font color="#E5E5E5"> four times and it will just</font>

390
00:19:27,100 --> 00:19:33,100
keep<font color="#E5E5E5"> going</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> forever</font><font color="#CCCCCC"> so this</font>

391
00:19:29,140 --> 00:19:36,760
this checking will never terminate<font color="#E5E5E5"> even</font>

392
00:19:33,100 --> 00:19:39,040
though it<font color="#E5E5E5"> is quite</font><font color="#CCCCCC"> obvious to you</font>

393
00:19:36,760 --> 00:19:41,320
that<font color="#CCCCCC"> his program must terminate at some</font>

394
00:19:39,040 --> 00:19:46,030
point because<font color="#E5E5E5"> eventually the main threat</font>

395
00:19:41,320 --> 00:19:54,149
will calling you so there<font color="#E5E5E5"> are a couple</font>

396
00:19:46,030 --> 00:19:57,550
<font color="#CCCCCC">of</font><font color="#E5E5E5"> things we can do about</font><font color="#CCCCCC"> this I will</font>

397
00:19:54,150 --> 00:20:00,690
<font color="#E5E5E5">because and those things are based on</font>

398
00:19:57,550 --> 00:20:03,040
the observation that this is basically

399
00:20:00,690 --> 00:20:05,680
<font color="#E5E5E5">the behavioral program doesn't really</font>

400
00:20:03,040 --> 00:20:09,570
change based on<font color="#E5E5E5"> how</font><font color="#CCCCCC"> many times</font><font color="#E5E5E5"> this loop</font>

401
00:20:05,680 --> 00:20:13,720
runs that that even if<font color="#CCCCCC"> this loop</font>

402
00:20:09,570 --> 00:20:15,669
succeeds on<font color="#E5E5E5"> the first call it try it</font>

403
00:20:13,720 --> 00:20:19,660
will do<font color="#CCCCCC"> exactly the same thing as if it</font>

404
00:20:15,670 --> 00:20:21,460
succeeds on the<font color="#CCCCCC"> tenth execution</font><font color="#E5E5E5"> so what</font>

405
00:20:19,660 --> 00:20:26,830
we would<font color="#E5E5E5"> like need to have to do is just</font>

406
00:20:21,460 --> 00:20:29,940
to<font color="#E5E5E5"> try to run the</font><font color="#CCCCCC"> program once</font><font color="#E5E5E5"> really</font>

407
00:20:26,830 --> 00:20:32,560
because<font color="#CCCCCC"> that is all that is actually</font>

408
00:20:29,940 --> 00:20:34,450
<font color="#E5E5E5">required to see to see all the</font>

409
00:20:32,560 --> 00:20:38,590
assertions and have them read all the

410
00:20:34,450 --> 00:20:42,370
<font color="#E5E5E5">things they can there are a couple of</font>

411
00:20:38,590 --> 00:20:45,129
<font color="#E5E5E5">ways to</font><font color="#CCCCCC"> do this</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of them</font><font color="#E5E5E5"> since we</font>

412
00:20:42,370 --> 00:20:47,649
have one<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> loops that that that</font>

413
00:20:45,130 --> 00:20:51,880
if it fails<font color="#CCCCCC"> and loops</font>

414
00:20:47,650 --> 00:20:56,620
it has<font color="#CCCCCC"> our side</font><font color="#E5E5E5"> effects we can replace</font>

415
00:20:51,880 --> 00:20:59,770
it with<font color="#E5E5E5"> with a special intrinsic that is</font>

416
00:20:56,620 --> 00:21:01,709
actually not<font color="#E5E5E5"> unique</font><font color="#CCCCCC"> to New York but has</font>

417
00:20:59,770 --> 00:21:07,690
a bit of<font color="#CCCCCC"> a complicated</font><font color="#E5E5E5"> name anyway</font>

418
00:21:01,710 --> 00:21:11,410
called verifier<font color="#E5E5E5"> assume so if we have</font>

419
00:21:07,690 --> 00:21:14,170
this intrinsic if we call this intrinsic

420
00:21:11,410 --> 00:21:18,190
with a<font color="#CCCCCC"> zero and let me just</font><font color="#E5E5E5"> show you</font>

421
00:21:14,170 --> 00:21:21,580
what happens this will<font color="#E5E5E5"> make the tool</font>

422
00:21:18,190 --> 00:21:24,390
abort execution of the part of<font color="#E5E5E5"> the</font>

423
00:21:21,580 --> 00:21:27,490
search<font color="#E5E5E5"> tree the tree I showed you before</font>

424
00:21:24,390 --> 00:21:30,160
where the verifier assumed<font color="#CCCCCC"> zero call is</font>

425
00:21:27,490 --> 00:21:32,170
<font color="#E5E5E5">placed so if you just place</font><font color="#CCCCCC"> it in main</font>

426
00:21:30,160 --> 00:21:33,370
we are just aborting execution<font color="#CCCCCC"> before</font>

427
00:21:32,170 --> 00:21:36,100
anything interesting happens

428
00:21:33,370 --> 00:21:37,780
and we are seeing nothing right<font color="#CCCCCC"> so</font><font color="#E5E5E5"> even</font>

429
00:21:36,100 --> 00:21:40,780
if you<font color="#E5E5E5"> change this assertion to say</font>

430
00:21:37,780 --> 00:21:44,050
<font color="#E5E5E5">local</font><font color="#CCCCCC"> is two it won't</font><font color="#E5E5E5"> even find it right</font>

431
00:21:40,780 --> 00:21:46,210
we are terminating immediately but we

432
00:21:44,050 --> 00:21:47,730
can use this to turn<font color="#E5E5E5"> a pure loop like</font>

433
00:21:46,210 --> 00:21:50,630
<font color="#CCCCCC">this</font>

434
00:21:47,730 --> 00:21:54,750
[Music]

435
00:21:50,630 --> 00:21:58,820
if we passed a success value from the

436
00:21:54,750 --> 00:22:01,580
<font color="#E5E5E5">queue to assume now we're suddenly</font>

437
00:21:58,820 --> 00:22:04,919
ignoring the case we're<font color="#CCCCCC"> assumed fails</font>

438
00:22:01,580 --> 00:22:07,679
<font color="#E5E5E5">where the queue fails</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> as we</font>

439
00:22:04,920 --> 00:22:11,000
argued<font color="#CCCCCC"> before this doesn't change</font><font color="#E5E5E5"> it</font>

440
00:22:07,680 --> 00:22:14,460
<font color="#E5E5E5">doesn't add actual actual behaviors just</font>

441
00:22:11,000 --> 00:22:15,090
just<font color="#CCCCCC"> behaviour as for us as</font><font color="#E5E5E5"> newbies</font>

442
00:22:14,460 --> 00:22:17,730
concerned

443
00:22:15,090 --> 00:22:21,980
so now I didn't change<font color="#E5E5E5"> the assertion</font>

444
00:22:17,730 --> 00:22:26,460
back so<font color="#E5E5E5"> obviously the local is not - but</font>

445
00:22:21,980 --> 00:22:28,980
if we change<font color="#E5E5E5"> the assertion back we can</font>

446
00:22:26,460 --> 00:22:30,690
see that they took after exploring<font color="#CCCCCC"> two</font>

447
00:22:28,980 --> 00:22:32,400
traces<font color="#E5E5E5"> in this case because it needs</font>

448
00:22:30,690 --> 00:22:35,220
<font color="#E5E5E5">actually around the second trace before</font>

449
00:22:32,400 --> 00:22:39,870
realizing it calls a zoom zero and and

450
00:22:35,220 --> 00:22:44,690
<font color="#E5E5E5">is uninteresting we are able to check</font>

451
00:22:39,870 --> 00:22:47,070
<font color="#E5E5E5">this program as well so fortunately in</font>

452
00:22:44,690 --> 00:22:50,130
<font color="#CCCCCC">real world code these things are not so</font>

453
00:22:47,070 --> 00:22:52,649
<font color="#CCCCCC">common</font><font color="#E5E5E5"> they're usually in like low-level</font>

454
00:22:50,130 --> 00:22:55,020
threading primitives<font color="#E5E5E5"> and above</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

455
00:22:52,650 --> 00:22:57,870
have blocking behavior or<font color="#E5E5E5"> other stuff</font>

456
00:22:55,020 --> 00:23:02,100
<font color="#E5E5E5">that that makes it so you don't have to</font>

457
00:22:57,870 --> 00:23:06,510
do these kinds of<font color="#CCCCCC"> things so</font><font color="#E5E5E5"> in need who</font>

458
00:23:02,100 --> 00:23:08,520
can actually<font color="#E5E5E5"> do this on its own for code</font>

459
00:23:06,510 --> 00:23:10,140
that<font color="#E5E5E5"> isn't so complicated so I had to</font>

460
00:23:08,520 --> 00:23:12,240
introduce this queue data structure<font color="#E5E5E5"> to</font>

461
00:23:10,140 --> 00:23:16,640
even be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> fool need</font><font color="#E5E5E5"> hook</font><font color="#CCCCCC"> to to do</font>

462
00:23:12,240 --> 00:23:18,780
this<font color="#E5E5E5"> evil thing to not terminate here</font>

463
00:23:16,640 --> 00:23:20,220
but there<font color="#E5E5E5"> is another thing</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do if</font>

464
00:23:18,780 --> 00:23:22,710
you<font color="#E5E5E5"> don't want to change your code right</font>

465
00:23:20,220 --> 00:23:24,600
<font color="#E5E5E5">because that</font><font color="#CCCCCC"> is sort</font><font color="#E5E5E5"> of sort of</font><font color="#CCCCCC"> icky if</font>

466
00:23:22,710 --> 00:23:26,820
you have to introduce<font color="#E5E5E5"> if</font><font color="#CCCCCC"> thefts and</font>

467
00:23:24,600 --> 00:23:35,010
stuff into<font color="#CCCCCC"> your your code</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

468
00:23:26,820 --> 00:23:37,770
able<font color="#E5E5E5"> to test it yoga also has this flag</font>

469
00:23:35,010 --> 00:23:40,860
called<font color="#CCCCCC"> unroll which is a bit more</font>

470
00:23:37,770 --> 00:23:42,810
<font color="#CCCCCC">heavy-handed</font><font color="#E5E5E5"> and will</font><font color="#CCCCCC"> basically force</font>

471
00:23:40,860 --> 00:23:48,419
any loop you have<font color="#E5E5E5"> in your program</font><font color="#CCCCCC"> so</font>

472
00:23:42,810 --> 00:23:50,399
<font color="#CCCCCC">this is don't loop here to never</font><font color="#E5E5E5"> be</font>

473
00:23:48,420 --> 00:23:52,650
<font color="#CCCCCC">executed more than</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> some number</font><font color="#E5E5E5"> of</font>

474
00:23:50,400 --> 00:23:55,890
times<font color="#CCCCCC"> so in other words it just</font><font color="#E5E5E5"> uses</font>

475
00:23:52,650 --> 00:23:59,790
this<font color="#E5E5E5"> this as you mechanism to stop it so</font>

476
00:23:55,890 --> 00:24:00,920
if we say<font color="#E5E5E5"> unroll equals</font><font color="#CCCCCC"> ten it will</font>

477
00:23:59,790 --> 00:24:03,840
<font color="#E5E5E5">execute the program</font>

478
00:24:00,920 --> 00:24:07,920
<font color="#E5E5E5">ten times and then the</font><font color="#CCCCCC"> eleventh it</font>

479
00:24:03,840 --> 00:24:09,540
realizes it has<font color="#E5E5E5"> gone too far</font><font color="#CCCCCC"> so this is</font>

480
00:24:07,920 --> 00:24:12,440
a way to do<font color="#CCCCCC"> it without actually</font><font color="#E5E5E5"> touching</font>

481
00:24:09,540 --> 00:24:16,680
your code but<font color="#E5E5E5"> obviously you will have to</font>

482
00:24:12,440 --> 00:24:18,590
to consider<font color="#E5E5E5"> all</font><font color="#CCCCCC"> your loops in your</font>

483
00:24:16,680 --> 00:24:21,990
<font color="#E5E5E5">program</font><font color="#CCCCCC"> that you are</font><font color="#E5E5E5"> not actually</font>

484
00:24:18,590 --> 00:24:25,080
preventing it from from<font color="#CCCCCC"> from doing</font><font color="#E5E5E5"> some</font>

485
00:24:21,990 --> 00:24:27,809
<font color="#E5E5E5">interesting behavior because using these</font>

486
00:24:25,080 --> 00:24:31,020
tools<font color="#E5E5E5"> you can very easily prevent</font>

487
00:24:27,809 --> 00:24:37,530
yourself from finding real bugs<font color="#E5E5E5"> if you</font>

488
00:24:31,020 --> 00:24:42,000
are not<font color="#E5E5E5"> careful so that</font><font color="#CCCCCC"> is the key part</font>

489
00:24:37,530 --> 00:24:44,100
<font color="#E5E5E5">you either use very for su and basically</font>

490
00:24:42,000 --> 00:24:47,550
you cut off a part of<font color="#E5E5E5"> this tree that</font>

491
00:24:44,100 --> 00:24:52,280
means<font color="#E5E5E5"> your builds of different orders</font>

492
00:24:47,550 --> 00:24:55,559
<font color="#CCCCCC">you can explore or you</font><font color="#E5E5E5"> use unroll flag</font>

493
00:24:52,280 --> 00:25:04,010
and prevent loops from going further

494
00:24:55,559 --> 00:25:06,510
than<font color="#E5E5E5"> a certain point so that's it</font><font color="#CCCCCC"> about</font>

495
00:25:04,010 --> 00:25:08,129
limitations<font color="#CCCCCC"> of these techniques so let</font>

496
00:25:06,510 --> 00:25:12,030
<font color="#E5E5E5">me show you some other</font><font color="#CCCCCC"> things that</font><font color="#E5E5E5"> you</font>

497
00:25:08,130 --> 00:25:13,860
might encounter<font color="#E5E5E5"> so say that you are have</font>

498
00:25:12,030 --> 00:25:15,780
a program<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is calling a library and</font>

499
00:25:13,860 --> 00:25:20,459
this library is<font color="#E5E5E5"> not part of all of the</font>

500
00:25:15,780 --> 00:25:26,370
files you<font color="#CCCCCC"> are feeding</font><font color="#E5E5E5"> to network in</font><font color="#CCCCCC"> this</font>

501
00:25:20,460 --> 00:25:28,980
case it will let you do this call

502
00:25:26,370 --> 00:25:31,830
functions<font color="#CCCCCC"> such so called external</font>

503
00:25:28,980 --> 00:25:33,480
<font color="#E5E5E5">functions but it will</font><font color="#CCCCCC"> vary</font>

504
00:25:31,830 --> 00:25:36,240
pessimistically<font color="#E5E5E5"> assume that these</font>

505
00:25:33,480 --> 00:25:38,910
functions<font color="#E5E5E5"> will go in and touch all the</font>

506
00:25:36,240 --> 00:25:40,830
memory you have justing<font color="#E5E5E5"> just to be safe</font>

507
00:25:38,910 --> 00:25:43,130
<font color="#E5E5E5">that it doesn't miss some some kind of</font>

508
00:25:40,830 --> 00:25:45,389
strange behavior<font color="#CCCCCC"> so it will definitely</font>

509
00:25:43,130 --> 00:25:48,960
<font color="#E5E5E5">reward this function with every other</font>

510
00:25:45,390 --> 00:25:51,660
memory access you have that it can and

511
00:25:48,960 --> 00:25:54,540
<font color="#E5E5E5">obviously if you</font><font color="#CCCCCC"> are using</font><font color="#E5E5E5"> external</font>

512
00:25:51,660 --> 00:25:56,429
functions<font color="#E5E5E5"> sometimes this is undesired</font>

513
00:25:54,540 --> 00:25:59,129
behavior because it makes<font color="#CCCCCC"> Reed needle</font>

514
00:25:56,429 --> 00:26:01,500
<font color="#CCCCCC">run really slow</font><font color="#E5E5E5"> because there are just</font>

515
00:25:59,130 --> 00:26:06,059
<font color="#CCCCCC">so many permutations of these things to</font>

516
00:26:01,500 --> 00:26:08,580
<font color="#E5E5E5">try so you can avoid it to do this by</font>

517
00:26:06,059 --> 00:26:10,950
promising<font color="#CCCCCC"> to need hook and of course if</font>

518
00:26:08,580 --> 00:26:13,810
you break your<font color="#CCCCCC"> promised and will not</font>

519
00:26:10,950 --> 00:26:15,550
<font color="#E5E5E5">will</font><font color="#CCCCCC"> not give you any guarantees anymore</font>

520
00:26:13,810 --> 00:26:18,490
<font color="#E5E5E5">you can promise to network that that</font><font color="#CCCCCC"> is</font>

521
00:26:15,550 --> 00:26:22,960
function<font color="#CCCCCC"> has no no side-effects</font><font color="#E5E5E5"> it will</font>

522
00:26:18,490 --> 00:26:24,580
not change<font color="#CCCCCC"> its behavior</font><font color="#E5E5E5"> if it's</font>

523
00:26:22,960 --> 00:26:29,140
reordered with something and will<font color="#E5E5E5"> not</font>

524
00:26:24,580 --> 00:26:32,490
touch any memory so an example of<font color="#E5E5E5"> this</font>

525
00:26:29,140 --> 00:26:38,110
is if we take the program<font color="#E5E5E5"> we had</font><font color="#CCCCCC"> before</font>

526
00:26:32,490 --> 00:26:40,930
<font color="#CCCCCC">right and we want to see what it</font>

527
00:26:38,110 --> 00:26:48,070
<font color="#CCCCCC">actually does so we add some some printf</font>

528
00:26:40,930 --> 00:26:50,860
statements here now if we run this

529
00:26:48,070 --> 00:26:55,659
example<font color="#E5E5E5"> so we use</font><font color="#CCCCCC"> the unroll flag here</font>

530
00:26:50,860 --> 00:26:58,209
as well<font color="#E5E5E5"> you can see that it runs it a</font>

531
00:26:55,660 --> 00:27:01,360
lot more<font color="#CCCCCC"> times than</font><font color="#E5E5E5"> then the 11 we saw</font>

532
00:26:58,210 --> 00:27:10,000
before<font color="#CCCCCC"> and what is actually</font><font color="#E5E5E5"> happening</font>

533
00:27:01,360 --> 00:27:13,510
<font color="#CCCCCC">here is that that that it is</font><font color="#E5E5E5"> relieving</font>

534
00:27:10,000 --> 00:27:15,490
this waiting call<font color="#E5E5E5"> into</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> q</font><font color="#CCCCCC"> in every</font>

535
00:27:13,510 --> 00:27:17,950
possible<font color="#CCCCCC"> location it can</font><font color="#E5E5E5"> find where it</font>

536
00:27:15,490 --> 00:27:20,170
<font color="#E5E5E5">might do something interesting</font><font color="#CCCCCC"> and and</font>

537
00:27:17,950 --> 00:27:22,690
this just explodes the state space<font color="#E5E5E5"> but</font>

538
00:27:20,170 --> 00:27:24,610
<font color="#E5E5E5">obviously the only side effect printf</font>

539
00:27:22,690 --> 00:27:27,040
has is that<font color="#CCCCCC"> I put stuff on screen in</font>

540
00:27:24,610 --> 00:27:30,280
<font color="#E5E5E5">this</font><font color="#CCCCCC"> case which is a side effect we</font>

541
00:27:27,040 --> 00:27:40,030
don't want it to look at<font color="#E5E5E5"> so if we use</font>

542
00:27:30,280 --> 00:27:42,670
this extra flag we get the<font color="#E5E5E5"> 11 traces and</font>

543
00:27:40,030 --> 00:27:47,830
if I<font color="#E5E5E5"> decrease the unroll country can can</font>

544
00:27:42,670 --> 00:27:49,540
use this to see a bit<font color="#CCCCCC"> bit the different</font>

545
00:27:47,830 --> 00:27:51,550
<font color="#E5E5E5">traces it was exploring</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> it first</font>

546
00:27:49,540 --> 00:27:52,270
it immediately<font color="#CCCCCC"> in cues right if we look</font>

547
00:27:51,550 --> 00:27:55,180
at the source

548
00:27:52,270 --> 00:28:00,610
I have starting message first in print<font color="#CCCCCC"> I</font>

549
00:27:55,180 --> 00:28:02,860
don't need to pack it this hard and<font color="#E5E5E5"> then</font>

550
00:28:00,610 --> 00:28:04,120
it<font color="#E5E5E5"> creates a thread and then it prints</font>

551
00:28:02,860 --> 00:28:06,820
just<font color="#CCCCCC"> before putting</font><font color="#E5E5E5"> something on the</font>

552
00:28:04,120 --> 00:28:10,120
<font color="#E5E5E5">queue and then we get awaiting message</font>

553
00:28:06,820 --> 00:28:13,689
for every time<font color="#E5E5E5"> the DQ function fails so</font>

554
00:28:10,120 --> 00:28:18,760
the first execution<font color="#CCCCCC"> take you immediately</font>

555
00:28:13,690 --> 00:28:20,860
<font color="#E5E5E5">succeeds the second one fails once and</font>

556
00:28:18,760 --> 00:28:22,120
this<font color="#CCCCCC"> message</font><font color="#E5E5E5"> is actually the other way</font>

557
00:28:20,860 --> 00:28:23,800
<font color="#E5E5E5">around</font><font color="#CCCCCC"> because obviously it's not</font>

558
00:28:22,120 --> 00:28:28,080
automatically executed together<font color="#E5E5E5"> with</font>

559
00:28:23,800 --> 00:28:28,080
them<font color="#E5E5E5"> we thank you function so</font>

560
00:28:28,200 --> 00:28:35,620
and in the<font color="#CCCCCC"> Siq</font><font color="#E5E5E5"> last execution executed</font>

561
00:28:31,600 --> 00:28:38,139
<font color="#E5E5E5">it fails it twice</font><font color="#CCCCCC"> just like like we saw</font>

562
00:28:35,620 --> 00:28:40,330
<font color="#CCCCCC">before</font><font color="#E5E5E5"> or well I told you before</font><font color="#CCCCCC"> that</font>

563
00:28:38,140 --> 00:28:46,720
<font color="#CCCCCC">now you can actually see</font><font color="#E5E5E5"> it that it does</font>

564
00:28:40,330 --> 00:28:51,760
this<font color="#CCCCCC"> alright so let's talk about this</font>

565
00:28:46,720 --> 00:28:54,220
<font color="#E5E5E5">thing called weak memory so just so I</font>

566
00:28:51,760 --> 00:28:56,560
have some perspective<font color="#CCCCCC"> can we do a show</font>

567
00:28:54,220 --> 00:29:00,580
<font color="#E5E5E5">of hands how many of you know of</font><font color="#CCCCCC"> weak</font>

568
00:28:56,560 --> 00:29:01,870
memory<font color="#E5E5E5"> metals already</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> not so many</font>

569
00:29:00,580 --> 00:29:07,169
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right good</font>

570
00:29:01,870 --> 00:29:10,989
so just to<font color="#E5E5E5"> add insult</font><font color="#CCCCCC"> to injury</font><font color="#E5E5E5"> to make</font>

571
00:29:07,170 --> 00:29:13,090
<font color="#CCCCCC">programming</font><font color="#E5E5E5"> even harder CPUs don't</font>

572
00:29:10,990 --> 00:29:15,220
actually<font color="#E5E5E5"> execute code like nidhogg does</font>

573
00:29:13,090 --> 00:29:16,480
just picking a thread and doing it and

574
00:29:15,220 --> 00:29:19,330
<font color="#E5E5E5">then picking some other thread and doing</font>

575
00:29:16,480 --> 00:29:22,420
it it<font color="#E5E5E5"> actually executes</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> in a way that</font>

576
00:29:19,330 --> 00:29:24,419
that<font color="#CCCCCC"> that makes it behave as if the</font>

577
00:29:22,420 --> 00:29:27,010
statements in your<font color="#E5E5E5"> program are somehow</font>

578
00:29:24,420 --> 00:29:28,600
<font color="#E5E5E5">changing order from the vendor they are</font>

579
00:29:27,010 --> 00:29:29,950
appear in the<font color="#E5E5E5"> source code</font><font color="#CCCCCC"> but this</font>

580
00:29:28,600 --> 00:29:33,639
behavior only<font color="#E5E5E5"> appears when</font><font color="#CCCCCC"> you write</font>

581
00:29:29,950 --> 00:29:36,940
multi-threaded code<font color="#E5E5E5"> so this is obviously</font>

582
00:29:33,640 --> 00:29:42,370
very painful<font color="#E5E5E5"> if you are writing</font><font color="#CCCCCC"> with a</font>

583
00:29:36,940 --> 00:29:45,310
threaded<font color="#E5E5E5"> code and on an internal machine</font>

584
00:29:42,370 --> 00:29:48,010
for an example<font color="#E5E5E5"> when you do a write to</font>

585
00:29:45,310 --> 00:29:50,169
<font color="#CCCCCC">memory</font><font color="#E5E5E5"> it will</font><font color="#CCCCCC"> not actually</font><font color="#E5E5E5"> take this</font>

586
00:29:48,010 --> 00:29:51,700
this right you are doing and put it

587
00:29:50,170 --> 00:29:53,860
immediately<font color="#CCCCCC"> into</font><font color="#E5E5E5"> memory but it</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> just</font>

588
00:29:51,700 --> 00:29:56,290
put it in a buffer<font color="#CCCCCC"> in a queue somewhere</font>

589
00:29:53,860 --> 00:29:58,510
in the<font color="#E5E5E5"> CPU and then it will keep on</font>

590
00:29:56,290 --> 00:30:00,940
executing<font color="#E5E5E5"> your program and then at some</font>

591
00:29:58,510 --> 00:30:03,879
<font color="#CCCCCC">later</font><font color="#E5E5E5"> point it will take this this data</font>

592
00:30:00,940 --> 00:30:09,010
and<font color="#E5E5E5"> and then put it into the</font><font color="#CCCCCC"> memory</font>

593
00:30:03,880 --> 00:30:17,100
system and this makes<font color="#E5E5E5"> your program do</font>

594
00:30:09,010 --> 00:30:22,750
you<font color="#E5E5E5"> have a question</font><font color="#CCCCCC"> well yes yes</font><font color="#E5E5E5"> indeed</font>

595
00:30:17,100 --> 00:30:27,520
so as I will tell you need who will

596
00:30:22,750 --> 00:30:29,220
<font color="#E5E5E5">allow you to to</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> that the way the CPU</font>

597
00:30:27,520 --> 00:30:31,389
<font color="#E5E5E5">does these things or can do these things</font>

598
00:30:29,220 --> 00:30:35,140
<font color="#E5E5E5">according to its specification at least</font>

599
00:30:31,390 --> 00:30:37,390
<font color="#E5E5E5">and and you can check if you insert</font>

600
00:30:35,140 --> 00:30:38,890
barriers<font color="#CCCCCC"> you can check that you have</font>

601
00:30:37,390 --> 00:30:44,020
done this correctly

602
00:30:38,890 --> 00:30:46,600
so yeah the this buffer effect<font color="#E5E5E5"> I talked</font>

603
00:30:44,020 --> 00:30:51,160
about<font color="#E5E5E5"> which is appears on the Intel but</font>

604
00:30:46,600 --> 00:30:52,928
also on most CPUs actually and most

605
00:30:51,160 --> 00:30:55,840
<font color="#E5E5E5">abuse actually have more</font><font color="#CCCCCC"> behaviour but</font>

606
00:30:52,929 --> 00:31:00,490
but<font color="#E5E5E5"> Intel</font><font color="#CCCCCC"> is relatively relatively nice</font>

607
00:30:55,840 --> 00:31:03,189
to you in this regard this<font color="#E5E5E5"> so the memory</font>

608
00:31:00,490 --> 00:31:05,530
model in which this is<font color="#E5E5E5"> the only kind of</font>

609
00:31:03,190 --> 00:31:07,440
<font color="#E5E5E5">behavior</font><font color="#CCCCCC"> strange</font><font color="#E5E5E5"> behavior you can see is</font>

610
00:31:05,530 --> 00:31:11,710
<font color="#E5E5E5">called the total store or remodel and</font>

611
00:31:07,440 --> 00:31:13,150
<font color="#E5E5E5">need who can can can test programs under</font>

612
00:31:11,710 --> 00:31:17,679
this<font color="#E5E5E5"> model with the same kind of</font>

613
00:31:13,150 --> 00:31:21,820
guarantees<font color="#CCCCCC"> that you get for well</font><font color="#E5E5E5"> without</font>

614
00:31:17,679 --> 00:31:24,490
<font color="#E5E5E5">that so you if the CPU is allowed to to</font>

615
00:31:21,820 --> 00:31:26,110
do these kinds of strange<font color="#E5E5E5"> things</font><font color="#CCCCCC"> it will</font>

616
00:31:24,490 --> 00:31:28,870
<font color="#E5E5E5">find it and tell you that your program</font>

617
00:31:26,110 --> 00:31:31,330
will fail<font color="#E5E5E5"> under these conditions however</font>

618
00:31:28,870 --> 00:31:33,189
<font color="#CCCCCC">there is</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> gotcha and that is that</font><font color="#E5E5E5"> it</font>

619
00:31:31,330 --> 00:31:35,110
does this by simulating<font color="#E5E5E5"> these behaviors</font>

620
00:31:33,190 --> 00:31:37,120
<font color="#E5E5E5">right it doesn't</font><font color="#CCCCCC"> actually create</font><font color="#E5E5E5"> more</font>

621
00:31:35,110 --> 00:31:39,219
threads<font color="#E5E5E5"> and if you call an external</font>

622
00:31:37,120 --> 00:31:40,928
<font color="#CCCCCC">function it</font><font color="#E5E5E5"> doesn't know what that</font>

623
00:31:39,220 --> 00:31:43,690
<font color="#E5E5E5">function</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> wrote so it will not</font>

624
00:31:40,929 --> 00:31:46,450
simulate these things so if<font color="#E5E5E5"> you are</font>

625
00:31:43,690 --> 00:31:48,400
using external<font color="#E5E5E5"> functions</font><font color="#CCCCCC"> please don't</font>

626
00:31:46,450 --> 00:31:50,559
please just compile them into<font color="#E5E5E5"> your input</font>

627
00:31:48,400 --> 00:31:55,150
<font color="#CCCCCC">too little because that that</font><font color="#E5E5E5"> way you can</font>

628
00:31:50,559 --> 00:31:57,340
keep your your<font color="#E5E5E5"> guarantees so let me show</font>

629
00:31:55,150 --> 00:31:59,320
<font color="#E5E5E5">you this because I'm sure it's a bit</font>

630
00:31:57,340 --> 00:32:02,590
hard to understand just<font color="#E5E5E5"> by me speaking</font>

631
00:31:59,320 --> 00:32:08,918
so here I have<font color="#CCCCCC"> a relatively simple</font>

632
00:32:02,590 --> 00:32:11,080
program<font color="#E5E5E5"> again I'm using using variables</font>

633
00:32:08,919 --> 00:32:12,970
directly<font color="#E5E5E5"> in this case I use volatile to</font>

634
00:32:11,080 --> 00:32:15,159
to trick the compiler<font color="#CCCCCC"> to do the right</font>

635
00:32:12,970 --> 00:32:17,860
thing but you should<font color="#E5E5E5"> probably use you</font>

636
00:32:15,160 --> 00:32:20,380
see<font color="#E5E5E5"> eleven Atomics I just didn't because</font>

637
00:32:17,860 --> 00:32:24,549
it<font color="#E5E5E5"> makes the example shorter but but</font>

638
00:32:20,380 --> 00:32:26,200
some tools in like need will scream at

639
00:32:24,549 --> 00:32:28,750
you if you<font color="#CCCCCC"> don't you see a lemon</font><font color="#E5E5E5"> Atomics</font>

640
00:32:26,200 --> 00:32:30,340
because this is well with volatile it

641
00:32:28,750 --> 00:32:34,000
<font color="#CCCCCC">isn't</font><font color="#E5E5E5"> what I showed you before</font><font color="#CCCCCC"> it's</font>

642
00:32:30,340 --> 00:32:36,070
<font color="#CCCCCC">actually undefined</font><font color="#E5E5E5"> behavior but but if</font>

643
00:32:34,000 --> 00:32:37,660
you were using<font color="#CCCCCC"> c11</font><font color="#E5E5E5"> Atomics you will get</font>

644
00:32:36,070 --> 00:32:41,439
the same behavior<font color="#E5E5E5"> that I've already show</font>

645
00:32:37,660 --> 00:32:43,450
you so let's take a look<font color="#CCCCCC"> at what</font><font color="#E5E5E5"> this</font>

646
00:32:41,440 --> 00:32:46,150
program does<font color="#E5E5E5"> so it has two threads in</font>

647
00:32:43,450 --> 00:32:48,940
<font color="#E5E5E5">this case the main thread only spawns</font>

648
00:32:46,150 --> 00:32:51,280
these threads and<font color="#E5E5E5"> then then then stops</font>

649
00:32:48,940 --> 00:32:52,030
<font color="#E5E5E5">so the interesting behavior is in these</font>

650
00:32:51,280 --> 00:32:55,360
two three

651
00:32:52,030 --> 00:32:59,770
and these two<font color="#E5E5E5"> threads have two variables</font>

652
00:32:55,360 --> 00:33:01,570
<font color="#CCCCCC">they</font><font color="#E5E5E5"> might communicate via so t1 first</font>

653
00:32:59,770 --> 00:33:02,260
<font color="#CCCCCC">writes to one of the variables and</font><font color="#E5E5E5"> then</font>

654
00:33:01,570 --> 00:33:06,760
reads the<font color="#E5E5E5"> other</font>

655
00:33:02,260 --> 00:33:08,860
and<font color="#CCCCCC"> whereas t2</font><font color="#E5E5E5"> does the mirror thing so</font>

656
00:33:06,760 --> 00:33:14,710
it writes<font color="#E5E5E5"> to the other variable and then</font>

657
00:33:08,860 --> 00:33:18,219
reads the<font color="#E5E5E5"> first and this is part of one</font>

658
00:33:14,710 --> 00:33:20,920
<font color="#E5E5E5">of an good old mutual exclusion protocol</font>

659
00:33:18,220 --> 00:33:24,160
<font color="#E5E5E5">that so it</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is supposed to guarantee</font>

660
00:33:20,920 --> 00:33:26,950
<font color="#CCCCCC">that that that these</font><font color="#E5E5E5"> printf which are</font>

661
00:33:24,160 --> 00:33:35,250
sort of the<font color="#E5E5E5"> critical section here will</font>

662
00:33:26,950 --> 00:33:38,350
not both be executed but so if this true

663
00:33:35,250 --> 00:33:40,570
<font color="#E5E5E5">is it possible for for this program</font><font color="#CCCCCC"> to</font>

664
00:33:38,350 --> 00:33:42,449
print<font color="#CCCCCC"> fizzbuzz or buzz face for that</font>

665
00:33:40,570 --> 00:33:47,649
<font color="#E5E5E5">matter</font>

666
00:33:42,450 --> 00:33:50,260
one person is<font color="#E5E5E5"> nodding someone else is</font>

667
00:33:47,650 --> 00:33:54,460
shaking their<font color="#E5E5E5"> head</font><font color="#CCCCCC"> okay so yeah</font><font color="#E5E5E5"> it's</font>

668
00:33:50,260 --> 00:33:58,360
sort<font color="#CCCCCC"> of a trick</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> because because</font>

669
00:33:54,460 --> 00:34:00,250
obviously if if if you just<font color="#E5E5E5"> look at this</font>

670
00:33:58,360 --> 00:34:04,629
<font color="#E5E5E5">model where one thread is</font><font color="#CCCCCC"> a qubit of</font>

671
00:34:00,250 --> 00:34:07,960
<font color="#E5E5E5">time either</font><font color="#CCCCCC"> t1 is writing first</font><font color="#E5E5E5"> and in</font>

672
00:34:04,630 --> 00:34:13,270
that<font color="#E5E5E5"> case it's</font><font color="#CCCCCC"> impossible for t2</font><font color="#E5E5E5"> to read</font>

673
00:34:07,960 --> 00:34:19,649
<font color="#CCCCCC">0 here or t2 is writing first which case</font>

674
00:34:13,270 --> 00:34:22,989
it<font color="#CCCCCC"> is possible</font><font color="#E5E5E5"> for t1 to to read 0 and</font>

675
00:34:19,649 --> 00:34:29,199
if we<font color="#CCCCCC"> run it on the nead hook it will</font>

676
00:34:22,989 --> 00:34:31,359
also<font color="#E5E5E5"> tell</font><font color="#CCCCCC"> us as much so it executed</font><font color="#E5E5E5"> the</font>

677
00:34:29,199 --> 00:34:32,049
program three times first time it

678
00:34:31,360 --> 00:34:34,120
friends<font color="#CCCCCC"> face</font>

679
00:34:32,050 --> 00:34:36,940
second time which means<font color="#E5E5E5"> nothing because</font>

680
00:34:34,120 --> 00:34:39,520
<font color="#E5E5E5">this was just</font><font color="#CCCCCC"> a section</font><font color="#E5E5E5"> of the of the</font>

681
00:34:36,940 --> 00:34:42,070
code<font color="#E5E5E5"> and the last time it prints buzz</font>

682
00:34:39,520 --> 00:34:44,739
but it never prints fizzbuzz<font color="#E5E5E5"> all right</font>

683
00:34:42,070 --> 00:34:46,120
but<font color="#CCCCCC"> remember</font><font color="#E5E5E5"> this thing</font><font color="#CCCCCC"> I put here</font><font color="#E5E5E5"> on</font>

684
00:34:44,739 --> 00:34:49,569
the command<font color="#CCCCCC"> line that</font><font color="#E5E5E5"> has now grown</font>

685
00:34:46,120 --> 00:34:53,710
quite long<font color="#E5E5E5"> I can delete some things to</font>

686
00:34:49,570 --> 00:34:56,110
make<font color="#E5E5E5"> it</font><font color="#CCCCCC"> easier to read this as seating</font>

687
00:34:53,710 --> 00:34:58,330
so SC C<font color="#E5E5E5"> stands for sequential</font>

688
00:34:56,110 --> 00:35:00,220
<font color="#CCCCCC">consistency</font><font color="#E5E5E5"> and it's just the technical</font>

689
00:34:58,330 --> 00:35:02,170
<font color="#E5E5E5">name for this this model where one</font>

690
00:35:00,220 --> 00:35:04,439
thread executes at a time<font color="#E5E5E5"> but let's see</font>

691
00:35:02,170 --> 00:35:06,480
<font color="#E5E5E5">what happens if you replace this with</font>

692
00:35:04,440 --> 00:35:09,990
yes<font color="#CCCCCC"> Oh which is what I talked about</font>

693
00:35:06,480 --> 00:35:12,660
before<font color="#E5E5E5"> suddenly need to execute your</font>

694
00:35:09,990 --> 00:35:14,578
program four times and the last<font color="#E5E5E5"> time</font><font color="#CCCCCC"> it</font>

695
00:35:12,660 --> 00:35:17,160
actually<font color="#E5E5E5"> prints this thing that we were</font>

696
00:35:14,579 --> 00:35:19,680
<font color="#E5E5E5">hoping it wouldn't</font><font color="#CCCCCC"> is this spooky</font>

697
00:35:17,160 --> 00:35:22,290
fizzbuzz<font color="#E5E5E5"> it's this thing that</font><font color="#CCCCCC"> shouldn't</font>

698
00:35:19,680 --> 00:35:24,569
<font color="#CCCCCC">be possible either X is written first of</font>

699
00:35:22,290 --> 00:35:27,720
<font color="#E5E5E5">Y is written first</font><font color="#CCCCCC"> and yet both</font><font color="#E5E5E5"> threads</font>

700
00:35:24,569 --> 00:35:29,609
will<font color="#E5E5E5"> well read</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> here and this is</font><font color="#CCCCCC"> a</font>

701
00:35:27,720 --> 00:35:31,589
<font color="#E5E5E5">natural behavior</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> if you if you</font>

702
00:35:29,609 --> 00:35:33,210
write this program<font color="#E5E5E5"> and run it trillion</font>

703
00:35:31,589 --> 00:35:36,390
times in<font color="#E5E5E5"> your Intel CPU eventually it</font>

704
00:35:33,210 --> 00:35:38,190
might do this and and for a bit larger

705
00:35:36,390 --> 00:35:41,160
programs it<font color="#E5E5E5"> is will appear frequently</font>

706
00:35:38,190 --> 00:35:48,900
but since it's so<font color="#E5E5E5"> small it's sort of</font>

707
00:35:41,160 --> 00:35:50,759
hard to<font color="#E5E5E5"> get a CPU to do this so how how</font>

708
00:35:48,900 --> 00:35:53,010
do<font color="#E5E5E5"> you fix this I mean if you have have</font>

709
00:35:50,760 --> 00:35:55,230
this<font color="#CCCCCC"> now we're not talking about</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> we</font>

710
00:35:53,010 --> 00:35:56,700
<font color="#E5E5E5">fix this</font><font color="#CCCCCC"> we do help me fix your program</font>

711
00:35:55,230 --> 00:36:00,030
I mean your program does something you

712
00:35:56,700 --> 00:36:02,040
don't want it to do right<font color="#E5E5E5"> so so a guy in</font>

713
00:36:00,030 --> 00:36:05,310
the<font color="#E5E5E5"> audience</font><font color="#CCCCCC"> talked</font><font color="#E5E5E5"> about fences so</font>

714
00:36:02,040 --> 00:36:10,230
there is the thing in on x86 for example

715
00:36:05,310 --> 00:36:14,549
you have this special<font color="#E5E5E5"> instruction called</font>

716
00:36:10,230 --> 00:36:16,710
<font color="#CCCCCC">m fence I believe and then I just</font><font color="#E5E5E5"> add</font>

717
00:36:14,550 --> 00:36:19,290
some<font color="#E5E5E5"> stuff so that the</font><font color="#CCCCCC"> compiler knows</font>

718
00:36:16,710 --> 00:36:21,540
<font color="#E5E5E5">what what this thing is so if we shove</font>

719
00:36:19,290 --> 00:36:27,210
this this<font color="#CCCCCC"> magical instruction in this</font>

720
00:36:21,540 --> 00:36:31,020
barrier instruction in now

721
00:36:27,210 --> 00:36:33,780
suddenly an x86 CPUs I mean<font color="#CCCCCC"> two CPU is</font>

722
00:36:31,020 --> 00:36:36,660
not<font color="#E5E5E5"> allowed to let let this instruction</font>

723
00:36:33,780 --> 00:36:39,930
go below<font color="#E5E5E5"> this instruction so the barrier</font>

724
00:36:36,660 --> 00:36:42,750
sort of prevents this kind of weak

725
00:36:39,930 --> 00:36:44,490
memory behavior<font color="#E5E5E5"> so let's see what</font>

726
00:36:42,750 --> 00:36:47,490
happens if<font color="#E5E5E5"> we run run into on this thing</font>

727
00:36:44,490 --> 00:36:51,000
again<font color="#CCCCCC"> so now we're back down</font><font color="#E5E5E5"> to three</font>

728
00:36:47,490 --> 00:36:54,959
<font color="#CCCCCC">behaviors and</font><font color="#E5E5E5"> of course you should</font>

729
00:36:51,000 --> 00:36:57,720
probably not use assembly<font color="#E5E5E5"> intrinsics and</font>

730
00:36:54,960 --> 00:36:59,520
unless you're doing<font color="#E5E5E5"> low-level</font><font color="#CCCCCC"> and like</font>

731
00:36:57,720 --> 00:37:02,098
embedded<font color="#E5E5E5"> programming or unless you</font>

732
00:36:59,520 --> 00:37:07,440
really<font color="#CCCCCC"> have to and of course you can</font>

733
00:37:02,099 --> 00:37:12,050
write<font color="#E5E5E5"> the c11</font><font color="#CCCCCC"> equivalence here which is</font>

734
00:37:07,440 --> 00:37:12,050
a bit longer<font color="#E5E5E5"> so I will show you</font><font color="#CCCCCC"> on</font>

735
00:37:12,990 --> 00:37:23,470
similar thing<font color="#E5E5E5"> so if you use c11 Atomics</font>

736
00:37:19,360 --> 00:37:28,570
instead<font color="#E5E5E5"> these by default unless you</font><font color="#CCCCCC"> use</font>

737
00:37:23,470 --> 00:37:31,299
a<font color="#E5E5E5"> really long form of local store and do</font>

738
00:37:28,570 --> 00:37:33,100
<font color="#E5E5E5">these kinds of fences for you so that it</font>

739
00:37:31,300 --> 00:37:36,130
will not<font color="#CCCCCC"> behave this way</font><font color="#E5E5E5"> so also if you</font>

740
00:37:33,100 --> 00:37:40,450
do it this way<font color="#E5E5E5"> you will not get fizzbuzz</font>

741
00:37:36,130 --> 00:37:43,060
and actually since<font color="#CCCCCC"> you</font><font color="#E5E5E5"> are using c11 you</font>

742
00:37:40,450 --> 00:37:46,930
will never get<font color="#CCCCCC"> face bars on any CPU if</font>

743
00:37:43,060 --> 00:37:48,640
you use these<font color="#CCCCCC"> things so and tools like</font>

744
00:37:46,930 --> 00:37:52,169
<font color="#CCCCCC">need who can help you verify that your</font>

745
00:37:48,640 --> 00:37:52,170
code doesn't<font color="#E5E5E5"> do</font><font color="#CCCCCC"> something strange</font>

746
00:37:54,000 --> 00:37:59,290
<font color="#E5E5E5">excellent</font>

747
00:37:55,210 --> 00:38:01,170
so<font color="#CCCCCC"> um over how are we for</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> I guess</font>

748
00:37:59,290 --> 00:38:08,410
we're good

749
00:38:01,170 --> 00:38:11,620
yeah<font color="#E5E5E5"> that's plenty</font><font color="#CCCCCC"> okay so I promised</font>

750
00:38:08,410 --> 00:38:13,720
you a larger<font color="#CCCCCC"> example</font><font color="#E5E5E5"> so there is this</font>

751
00:38:11,620 --> 00:38:17,200
<font color="#E5E5E5">synchronization algorithm in the</font><font color="#CCCCCC"> linux</font>

752
00:38:13,720 --> 00:38:20,950
kernel called<font color="#E5E5E5"> read copy update which</font>

753
00:38:17,200 --> 00:38:25,060
lets you do atomic updates on on

754
00:38:20,950 --> 00:38:27,910
arbitrarily large data structures by

755
00:38:25,060 --> 00:38:30,450
<font color="#E5E5E5">doing an a pointer exchange and then</font>

756
00:38:27,910 --> 00:38:30,450
then

757
00:38:30,599 --> 00:38:36,040
<font color="#E5E5E5">it has some mechanism</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> sure that</font>

758
00:38:33,880 --> 00:38:38,260
you are not<font color="#E5E5E5"> freeing this this old copy</font>

759
00:38:36,040 --> 00:38:41,859
of the<font color="#CCCCCC"> data structure until all readers</font>

760
00:38:38,260 --> 00:38:44,890
<font color="#E5E5E5">have disappeared and in order to make</font>

761
00:38:41,859 --> 00:38:46,540
this is really scalable<font color="#CCCCCC"> and it has grown</font>

762
00:38:44,890 --> 00:38:48,430
complicated over the years and is

763
00:38:46,540 --> 00:38:50,950
<font color="#CCCCCC">currently at over four thousand</font><font color="#E5E5E5"> five</font>

764
00:38:48,430 --> 00:38:54,339
hundred<font color="#E5E5E5"> lines of</font><font color="#CCCCCC"> very tricky</font>

765
00:38:50,950 --> 00:38:58,419
<font color="#E5E5E5">C code and it has historically been a</font>

766
00:38:54,339 --> 00:39:01,359
source of quite a<font color="#E5E5E5"> few long-lived bugs</font>

767
00:38:58,420 --> 00:39:06,660
that<font color="#E5E5E5"> have have only surfaced years after</font>

768
00:39:01,359 --> 00:39:11,500
they<font color="#E5E5E5"> were introduced so</font><font color="#CCCCCC"> in a case study</font>

769
00:39:06,660 --> 00:39:14,589
we<font color="#CCCCCC"> used did hook</font><font color="#E5E5E5"> we extracted a unit</font>

770
00:39:11,500 --> 00:39:20,560
test of this thing<font color="#E5E5E5"> and used in hope to</font>

771
00:39:14,589 --> 00:39:23,830
test this and and<font color="#E5E5E5"> by entry introducing</font>

772
00:39:20,560 --> 00:39:30,009
all these<font color="#E5E5E5"> these historical bugs</font><font color="#CCCCCC"> we were</font>

773
00:39:23,830 --> 00:39:31,660
able<font color="#E5E5E5"> to to discover them and also in the</font>

774
00:39:30,010 --> 00:39:33,940
case where<font color="#E5E5E5"> none are reintroduced you</font>

775
00:39:31,660 --> 00:39:37,000
were able<font color="#E5E5E5"> to verify under the conditions</font>

776
00:39:33,940 --> 00:39:40,510
that so for<font color="#E5E5E5"> this particular unit</font><font color="#CCCCCC"> test we</font>

777
00:39:37,000 --> 00:39:43,900
have and so<font color="#E5E5E5"> on and that</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are no</font>

778
00:39:40,510 --> 00:39:48,670
<font color="#E5E5E5">more</font><font color="#CCCCCC"> such bugs and so let me show you</font>

779
00:39:43,900 --> 00:39:52,650
some of<font color="#CCCCCC"> the stuff we had to</font><font color="#E5E5E5"> do to to</font>

780
00:39:48,670 --> 00:40:00,580
make need who eat<font color="#CCCCCC"> kernel code like that</font>

781
00:39:52,650 --> 00:40:10,180
so<font color="#E5E5E5"> actually there most of the the time</font>

782
00:40:00,580 --> 00:40:13,170
<font color="#E5E5E5">spent</font><font color="#CCCCCC"> not on making making the code</font>

783
00:40:10,180 --> 00:40:15,848
please need hook as much as it is<font color="#E5E5E5"> to to</font>

784
00:40:13,170 --> 00:40:17,670
<font color="#CCCCCC">detach</font><font color="#E5E5E5"> everything to mock</font><font color="#CCCCCC"> everything in</font>

785
00:40:15,849 --> 00:40:24,810
the<font color="#E5E5E5"> Linux kernel to make it a standalone</font>

786
00:40:17,670 --> 00:40:29,380
<font color="#CCCCCC">unit test so there is a lot of of of</font>

787
00:40:24,810 --> 00:40:30,940
<font color="#E5E5E5">shrimps here around the primitives of</font>

788
00:40:29,380 --> 00:40:36,720
the

789
00:40:30,940 --> 00:40:36,720
<font color="#E5E5E5">Linux kernel like hundreds of lines of</font>

790
00:40:39,329 --> 00:40:45,609
of mocking<font color="#E5E5E5"> that that basically it takes</font>

791
00:40:43,720 --> 00:40:47,890
this highly integrated part of<font color="#E5E5E5"> the Linux</font>

792
00:40:45,609 --> 00:40:50,140
<font color="#CCCCCC">kernel and makes it a standalone</font><font color="#E5E5E5"> thing</font>

793
00:40:47,890 --> 00:40:55,270
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you can just use to to write a unit</font>

794
00:40:50,140 --> 00:40:57,069
test around<font color="#E5E5E5"> so so these things are not</font>

795
00:40:55,270 --> 00:41:03,220
<font color="#CCCCCC">really you need</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be specific code</font>

796
00:40:57,069 --> 00:41:08,140
right it's<font color="#E5E5E5"> sort of it Maps like it Maps</font>

797
00:41:03,220 --> 00:41:13,058
the<font color="#E5E5E5"> thread functions of the Linux</font><font color="#CCCCCC"> kernel</font>

798
00:41:08,140 --> 00:41:16,779
<font color="#CCCCCC">onto P threads</font><font color="#E5E5E5"> so on</font><font color="#CCCCCC"> so let</font><font color="#E5E5E5"> me show you</font>

799
00:41:13,059 --> 00:41:19,119
actually<font color="#E5E5E5"> so these things everything's we</font>

800
00:41:16,780 --> 00:41:21,400
wrote but there is of<font color="#CCCCCC"> course the parts</font>

801
00:41:19,119 --> 00:41:24,640
of the Linux<font color="#CCCCCC"> kernel here</font><font color="#E5E5E5"> and these</font><font color="#CCCCCC"> are</font>

802
00:41:21,400 --> 00:41:28,109
mostly untouched<font color="#CCCCCC"> so they're</font><font color="#E5E5E5"> basically</font>

803
00:41:24,640 --> 00:41:30,788
the thing we touched was was things<font color="#E5E5E5"> like</font>

804
00:41:28,109 --> 00:41:34,180
entry introducing<font color="#E5E5E5"> these old bugs</font><font color="#CCCCCC"> so</font>

805
00:41:30,789 --> 00:41:37,809
there is there is<font color="#CCCCCC"> a lot of places</font><font color="#E5E5E5"> like</font>

806
00:41:34,180 --> 00:41:40,450
<font color="#E5E5E5">this where we have have reintroduce</font>

807
00:41:37,809 --> 00:41:48,250
things that that<font color="#E5E5E5"> that were bug fixed at</font>

808
00:41:40,450 --> 00:41:54,180
<font color="#E5E5E5">some point in the past so with this we</font>

809
00:41:48,250 --> 00:41:54,180
<font color="#E5E5E5">can actually run let's use this terminal</font>

810
00:42:02,070 --> 00:42:09,320
<font color="#E5E5E5">if I have the thing there is quite some</font>

811
00:42:06,450 --> 00:42:09,319
amount of

812
00:42:20,610 --> 00:42:26,070
so I will accidentally teach you a bit

813
00:42:24,540 --> 00:42:28,310
<font color="#CCCCCC">about the command lines into Xfinity</font>

814
00:42:26,070 --> 00:42:33,840
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so you can't ask</font><font color="#CCCCCC"> about compiler</font>

815
00:42:28,310 --> 00:42:43,770
flags here and then you have<font color="#CCCCCC"> a - - and</font>

816
00:42:33,840 --> 00:42:46,230
then you have<font color="#E5E5E5"> neat hook flag so all</font>

817
00:42:43,770 --> 00:42:51,180
these<font color="#CCCCCC"> things I taught</font><font color="#E5E5E5"> you before like</font>

818
00:42:46,230 --> 00:42:53,790
and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a bit scary because MEMC</font><font color="#E5E5E5"> CPI</font>

819
00:42:51,180 --> 00:42:56,640
could very easily be<font color="#E5E5E5"> used to do racy</font>

820
00:42:53,790 --> 00:42:58,920
things right it modifies memory but in

821
00:42:56,640 --> 00:43:00,960
this case we have manually checked<font color="#E5E5E5"> all</font>

822
00:42:58,920 --> 00:43:02,910
places<font color="#E5E5E5"> that called mem CPI and see that</font>

823
00:43:00,960 --> 00:43:05,160
it does nothing<font color="#E5E5E5"> scary so this is just</font>

824
00:43:02,910 --> 00:43:07,830
some function<font color="#E5E5E5"> that</font><font color="#CCCCCC"> that need who doesn't</font>

825
00:43:05,160 --> 00:43:11,250
implement<font color="#E5E5E5"> but it but it could it is a</font>

826
00:43:07,830 --> 00:43:13,440
bit<font color="#E5E5E5"> one of the things that</font><font color="#CCCCCC"> probably has</font>

827
00:43:11,250 --> 00:43:14,730
tools like need to<font color="#CCCCCC"> have</font><font color="#E5E5E5"> mature you</font>

828
00:43:13,440 --> 00:43:16,380
wouldn't need<font color="#E5E5E5"> to do any more</font><font color="#CCCCCC"> because</font>

829
00:43:14,730 --> 00:43:21,600
they already understand these things<font color="#E5E5E5"> and</font>

830
00:43:16,380 --> 00:43:27,210
<font color="#CCCCCC">will do</font><font color="#E5E5E5"> the right thing by default and</font>

831
00:43:21,600 --> 00:43:30,060
then we pass<font color="#E5E5E5"> the name of the file which</font>

832
00:43:27,210 --> 00:43:37,980
is<font color="#E5E5E5"> lit mustard</font><font color="#CCCCCC"> C and I forgot</font><font color="#E5E5E5"> the memory</font>

833
00:43:30,060 --> 00:43:42,270
model let's do<font color="#E5E5E5"> TSO and you know since</font>

834
00:43:37,980 --> 00:43:44,880
this this of<font color="#CCCCCC"> course takes a while since</font>

835
00:43:42,270 --> 00:43:48,960
<font color="#E5E5E5">it's so much code and in particular</font>

836
00:43:44,880 --> 00:43:51,450
<font color="#CCCCCC">there's about 40,000 behaviors I think</font>

837
00:43:48,960 --> 00:43:57,090
needle explores in this one unit test

838
00:43:51,450 --> 00:44:00,839
<font color="#CCCCCC">which is</font><font color="#E5E5E5"> actually quite simplistic how</font>

839
00:43:57,090 --> 00:44:03,540
<font color="#E5E5E5">long I forgot the unroll thing so here</font>

840
00:44:00,840 --> 00:44:06,360
we have also in this code there<font color="#CCCCCC"> is also</font>

841
00:44:03,540 --> 00:44:07,800
this kind<font color="#E5E5E5"> of a retry loop and</font><font color="#CCCCCC"> just so</font>

842
00:44:06,360 --> 00:44:11,250
that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't have to modify</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> code</font>

843
00:44:07,800 --> 00:44:12,330
because<font color="#CCCCCC"> that sort of</font><font color="#E5E5E5"> makes it less clear</font>

844
00:44:11,250 --> 00:44:14,250
that we write what<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are actually</font>

845
00:44:12,330 --> 00:44:18,000
verifying<font color="#E5E5E5"> if we have to change the code</font>

846
00:44:14,250 --> 00:44:20,520
to<font color="#E5E5E5"> check</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> we're using unroll and then</font>

847
00:44:18,000 --> 00:44:22,050
<font color="#E5E5E5">to change that because</font><font color="#CCCCCC"> we'll eat more</font>

848
00:44:20,520 --> 00:44:23,870
<font color="#E5E5E5">and more memory as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> executions become</font>

849
00:44:22,050 --> 00:44:26,310
longer

850
00:44:23,870 --> 00:44:28,350
<font color="#CCCCCC">it doesn't really</font><font color="#E5E5E5"> eat more memory has</font><font color="#CCCCCC"> to</font>

851
00:44:26,310 --> 00:44:31,940
become<font color="#E5E5E5"> more executions just as they</font>

852
00:44:28,350 --> 00:44:31,940
become ridiculously long

853
00:44:34,039 --> 00:44:39,900
so this will will take about well<font color="#E5E5E5"> 20</font>

854
00:44:38,670 --> 00:44:42,959
minutes on our<font color="#E5E5E5"> first computer</font><font color="#CCCCCC"> but</font>

855
00:44:39,900 --> 00:44:45,150
probably<font color="#E5E5E5"> 40 on this laptop</font><font color="#CCCCCC"> but let's try</font>

856
00:44:42,959 --> 00:44:47,910
<font color="#E5E5E5">one of these force failure flags right</font>

857
00:44:45,150 --> 00:44:51,690
let's try<font color="#E5E5E5"> to enable this thing and see</font>

858
00:44:47,910 --> 00:44:59,819
if we can<font color="#E5E5E5"> find this</font><font color="#CCCCCC"> bar on line 1890</font><font color="#E5E5E5"> in</font>

859
00:44:51,690 --> 00:45:04,529
in<font color="#CCCCCC"> our see you yep</font>

860
00:44:59,819 --> 00:45:07,079
found it<font color="#E5E5E5"> in two seconds and most of the</font>

861
00:45:04,529 --> 00:45:11,459
box<font color="#CCCCCC"> I can show you the other ones as</font>

862
00:45:07,079 --> 00:45:14,099
<font color="#CCCCCC">well</font><font color="#E5E5E5"> are found similarly fast right this</font>

863
00:45:11,459 --> 00:45:17,249
was found<font color="#E5E5E5"> in three seconds and so on</font>

864
00:45:14,099 --> 00:45:19,229
<font color="#E5E5E5">right so probably if you have a bug in</font>

865
00:45:17,249 --> 00:45:22,769
your code<font color="#E5E5E5"> and need you will find it</font>

866
00:45:19,229 --> 00:45:25,348
pretty<font color="#E5E5E5"> fast as well</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> and if it needle</font>

867
00:45:22,769 --> 00:45:27,988
takes<font color="#E5E5E5"> a while then either it's because</font>

868
00:45:25,349 --> 00:45:31,170
you have these these kinds of infinite

869
00:45:27,989 --> 00:45:32,940
behaviors or it's<font color="#E5E5E5"> because there are no</font>

870
00:45:31,170 --> 00:45:34,469
<font color="#E5E5E5">bugs and it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually trying to</font>

871
00:45:32,940 --> 00:45:37,859
exhaust the space of all possible

872
00:45:34,469 --> 00:45:41,099
behaviors of your code<font color="#E5E5E5"> which for this</font>

873
00:45:37,859 --> 00:45:47,308
particular<font color="#CCCCCC"> example takes about</font><font color="#E5E5E5"> 20</font>

874
00:45:41,099 --> 00:45:54,900
minutes<font color="#CCCCCC"> alright that was final example I</font>

875
00:45:47,309 --> 00:45:57,420
wanted to<font color="#CCCCCC"> show you so there are more</font><font color="#E5E5E5"> and</font>

876
00:45:54,900 --> 00:46:00,180
<font color="#CCCCCC">more research spent on tools</font><font color="#E5E5E5"> like needle</font>

877
00:45:57,420 --> 00:46:02,940
which are used to<font color="#E5E5E5"> test this real code</font>

878
00:46:00,180 --> 00:46:04,680
right you feel<font color="#E5E5E5"> this C or C++ not some</font>

879
00:46:02,940 --> 00:46:06,229
some modeling language that you need to

880
00:46:04,680 --> 00:46:11,399
really implement your program<font color="#E5E5E5"> in and</font>

881
00:46:06,229 --> 00:46:14,839
this lets you you test that<font color="#E5E5E5"> it's the</font>

882
00:46:11,400 --> 00:46:21,150
actual<font color="#E5E5E5"> code that you're actually running</font>

883
00:46:14,839 --> 00:46:23,670
behaves properly<font color="#E5E5E5"> a current part where a</font>

884
00:46:21,150 --> 00:46:25,499
lot of<font color="#E5E5E5"> work is</font><font color="#CCCCCC"> being spent is anjana</font>

885
00:46:23,670 --> 00:46:29,279
<font color="#E5E5E5">lysing these techniques to this 11</font>

886
00:46:25,499 --> 00:46:32,968
memory model which means that that<font color="#E5E5E5"> tools</font>

887
00:46:29,279 --> 00:46:34,049
that will come out somewhat soon and

888
00:46:32,969 --> 00:46:37,829
we'll see when they are<font color="#CCCCCC"> actually</font>

889
00:46:34,049 --> 00:46:41,609
available these<font color="#CCCCCC"> are academic</font><font color="#E5E5E5"> things so</font>

890
00:46:37,829 --> 00:46:44,880
so making battle-hardened tool is not

891
00:46:41,609 --> 00:46:48,089
what we<font color="#CCCCCC"> are sponsored</font><font color="#E5E5E5"> for unfortunately</font>

892
00:46:44,880 --> 00:46:51,509
but when they come out you<font color="#E5E5E5"> will be</font><font color="#CCCCCC"> able</font>

893
00:46:48,089 --> 00:46:53,609
<font color="#E5E5E5">to verify that your program not just</font>

894
00:46:51,509 --> 00:46:55,589
<font color="#E5E5E5">under under</font><font color="#CCCCCC"> mmm Rumble or some</font>

895
00:46:53,609 --> 00:46:57,299
particular<font color="#CCCCCC"> city</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> would like we did</font><font color="#E5E5E5"> we</font>

896
00:46:55,589 --> 00:47:00,569
need you here but but at your program

897
00:46:57,299 --> 00:47:06,240
<font color="#CCCCCC">assuming a correct compiler will behave</font>

898
00:47:00,569 --> 00:47:07,710
<font color="#CCCCCC">the correct way on any on</font><font color="#E5E5E5"> any CPU and of</font>

899
00:47:06,240 --> 00:47:09,479
course all the skills I taught<font color="#E5E5E5"> you here</font>

900
00:47:07,710 --> 00:47:12,150
will be perfectly<font color="#E5E5E5"> transferable to these</font>

901
00:47:09,480 --> 00:47:14,180
tools because they are they<font color="#E5E5E5"> take the</font>

902
00:47:12,150 --> 00:47:16,740
underlying principle is<font color="#E5E5E5"> the same and</font>

903
00:47:14,180 --> 00:47:19,618
also if you are<font color="#E5E5E5"> programming for some</font>

904
00:47:16,740 --> 00:47:22,319
Android foreign language and Java<font color="#CCCCCC"> or</font>

905
00:47:19,619 --> 00:47:30,799
<font color="#CCCCCC">London there</font><font color="#E5E5E5"> are more there are tools</font>

906
00:47:22,319 --> 00:47:33,720
<font color="#CCCCCC">for this</font><font color="#E5E5E5"> as well so</font><font color="#CCCCCC"> to conclude and</font>

907
00:47:30,799 --> 00:47:37,920
<font color="#E5E5E5">nidhogg lets you use unit testing to</font>

908
00:47:33,720 --> 00:47:42,089
test multi-threaded code which is has

909
00:47:37,920 --> 00:47:46,049
traditionally been<font color="#E5E5E5"> a hard thing</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> it</font>

910
00:47:42,089 --> 00:47:46,529
is<font color="#E5E5E5"> open source it's quite easy to</font>

911
00:47:46,049 --> 00:47:50,400
<font color="#CCCCCC">compile</font>

912
00:47:46,529 --> 00:47:53,490
you just need to link it to<font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> there</font>

913
00:47:50,400 --> 00:47:56,430
<font color="#E5E5E5">is just simple configure and make and</font>

914
00:47:53,490 --> 00:47:58,700
make<font color="#E5E5E5"> install sequence and then you have</font>

915
00:47:56,430 --> 00:48:04,680
it on your<font color="#E5E5E5"> command line just like</font><font color="#CCCCCC"> i do</font>

916
00:47:58,700 --> 00:48:05,160
and<font color="#CCCCCC"> you know please check it out</font><font color="#E5E5E5"> that's</font>

917
00:48:04,680 --> 00:48:08,660
<font color="#E5E5E5">it</font>

918
00:48:05,160 --> 00:48:08,660
do you have any questions

919
00:48:16,769 --> 00:48:21,129
hi

920
00:48:18,519 --> 00:48:22,019
what CPUs are currently supported by

921
00:48:21,130 --> 00:48:27,369
<font color="#CCCCCC">network</font>

922
00:48:22,019 --> 00:48:29,499
so aside from sequential<font color="#E5E5E5"> consistency and</font>

923
00:48:27,369 --> 00:48:34,479
<font color="#CCCCCC">total store order which is basically</font>

924
00:48:29,499 --> 00:48:38,488
trust Intel CPUs need hope implements

925
00:48:34,479 --> 00:48:41,078
for<font color="#CCCCCC"> one thing</font><font color="#E5E5E5"> I've member</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> called</font>

926
00:48:38,489 --> 00:48:42,429
well there is another CPU<font color="#CCCCCC"> that</font>

927
00:48:41,079 --> 00:48:44,949
implements to trust order and that<font color="#E5E5E5"> is</font>

928
00:48:42,429 --> 00:48:48,789
<font color="#E5E5E5">SPARC CPUs which you might</font><font color="#CCCCCC"> have I guess</font>

929
00:48:44,949 --> 00:48:50,859
and<font color="#E5E5E5"> Spock CPUs are also capable at least</font>

930
00:48:48,789 --> 00:48:53,609
older ones<font color="#E5E5E5"> of being configured</font><font color="#CCCCCC"> to run on</font>

931
00:48:50,859 --> 00:48:56,409
different<font color="#E5E5E5"> memory model called PSO and</font>

932
00:48:53,609 --> 00:48:59,229
<font color="#E5E5E5">since it is sufficiently similar to</font><font color="#CCCCCC"> you</font>

933
00:48:56,409 --> 00:49:02,979
<font color="#E5E5E5">so we</font><font color="#CCCCCC"> implemented</font><font color="#E5E5E5"> as well aside</font><font color="#CCCCCC"> from</font>

934
00:48:59,229 --> 00:49:06,209
that there is there is some support for

935
00:49:02,979 --> 00:49:09,129
for the power<font color="#E5E5E5"> memory model of</font><font color="#CCCCCC"> PowerPC</font>

936
00:49:06,209 --> 00:49:10,899
but some of the features I showed you

937
00:49:09,130 --> 00:49:14,169
today do not<font color="#E5E5E5"> work with this memory model</font>

938
00:49:10,900 --> 00:49:19,269
and and it is also<font color="#E5E5E5"> the implementation</font><font color="#CCCCCC"> is</font>

939
00:49:14,169 --> 00:49:23,439
also<font color="#CCCCCC"> a bit slow</font><font color="#E5E5E5"> so probably once tools</font>

940
00:49:19,269 --> 00:49:26,738
for c11 come out<font color="#E5E5E5"> this will be preferable</font>

941
00:49:23,439 --> 00:49:34,239
assuming they are<font color="#E5E5E5"> they get</font><font color="#CCCCCC"> a level</font><font color="#E5E5E5"> of</font>

942
00:49:26,739 --> 00:49:37,140
<font color="#CCCCCC">polished</font><font color="#E5E5E5"> indeed question</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't be</font>

943
00:49:34,239 --> 00:49:41,499
able<font color="#E5E5E5"> to warn you about having</font>

944
00:49:37,140 --> 00:49:49,419
deterministic behavior yes

945
00:49:41,499 --> 00:49:51,578
so<font color="#CCCCCC"> looks for four branches where you</font>

946
00:49:49,419 --> 00:49:54,098
have well<font color="#E5E5E5"> place it</font><font color="#CCCCCC"> in your code where</font>

947
00:49:51,579 --> 00:49:55,539
your<font color="#E5E5E5"> pro code goes one way the first</font>

948
00:49:54,099 --> 00:49:57,369
<font color="#E5E5E5">time it executes it and then the other</font>

949
00:49:55,539 --> 00:49:59,289
way the second time and will<font color="#E5E5E5"> produce a</font>

950
00:49:57,369 --> 00:50:01,959
warning and there are some edge cases

951
00:49:59,289 --> 00:50:04,419
that will make need hook just crash but

952
00:50:01,959 --> 00:50:07,808
these are relatively<font color="#E5E5E5"> this is something</font>

953
00:50:04,419 --> 00:50:11,368
we will be<font color="#CCCCCC"> fixing so so yes</font><font color="#E5E5E5"> the short</font>

954
00:50:07,809 --> 00:50:11,369
answer is yes it will warn you

955
00:50:16,280 --> 00:50:26,149
okay<font color="#E5E5E5"> all right thank you</font>

956
00:50:20,800 --> 00:50:26,149
[Applause]

