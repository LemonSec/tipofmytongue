1
00:04:54,840 --> 00:04:59,320
this

2
00:04:57,040 --> 00:05:04,639
hello

3
00:04:59,320 --> 00:05:07,759
[Music]

4
00:05:04,639 --> 00:05:09,120
hello um yeah my talk is going to be

5
00:05:07,759 --> 00:05:12,720
about star tls

6
00:05:09,120 --> 00:05:14,320
this is uh some research i've been doing

7
00:05:12,720 --> 00:05:17,039
with some people from the

8
00:05:14,320 --> 00:05:19,199
pharaoh schuler munster together with uh

9
00:05:17,039 --> 00:05:21,199
damian polivniak fabian izing and

10
00:05:19,199 --> 00:05:24,400
sebastian schinsel

11
00:05:21,199 --> 00:05:27,680
um yeah just to give them proper credit

12
00:05:24,400 --> 00:05:31,599
so we looked at star tls and there are

13
00:05:27,680 --> 00:05:36,080
few more people coming in maybe we'll

14
00:05:31,600 --> 00:05:38,240
yeah we looked at star tls and we

15
00:05:36,080 --> 00:05:40,240
figured out that this is not a very well

16
00:05:38,240 --> 00:05:42,960
researched topic that there are a number

17
00:05:40,240 --> 00:05:46,720
of issues that apparently nobody

18
00:05:42,960 --> 00:05:48,560
has looked at before so

19
00:05:46,720 --> 00:05:50,639
in general if you establish a tls

20
00:05:48,560 --> 00:05:53,520
connections which is

21
00:05:50,639 --> 00:05:55,440
as i guess you all know is kind of the

22
00:05:53,520 --> 00:05:56,639
common way to have encrypted and

23
00:05:55,440 --> 00:05:58,240
authenticated

24
00:05:56,639 --> 00:06:00,080
network connections on the internet

25
00:05:58,240 --> 00:06:02,400
these days there's

26
00:06:00,080 --> 00:06:03,520
usually two different ways to do this

27
00:06:02,400 --> 00:06:06,638
one is which

28
00:06:03,520 --> 00:06:08,080
we which we call implicit tls which is

29
00:06:06,639 --> 00:06:10,960
where you just have

30
00:06:08,080 --> 00:06:12,159
a separate port for the tls version of a

31
00:06:10,960 --> 00:06:15,840
protocol

32
00:06:12,160 --> 00:06:17,840
and then you just start directly with an

33
00:06:15,840 --> 00:06:19,679
encrypted tls connection so you write

34
00:06:17,840 --> 00:06:20,880
start with a handshake

35
00:06:19,680 --> 00:06:22,880
and then you have an encrypted

36
00:06:20,880 --> 00:06:25,199
connection and then there's this other

37
00:06:22,880 --> 00:06:28,000
way which is called start tls where

38
00:06:25,199 --> 00:06:28,960
you have a protocol that is plain text

39
00:06:28,000 --> 00:06:30,720
and then

40
00:06:28,960 --> 00:06:33,120
you have some mechanism where you can

41
00:06:30,720 --> 00:06:34,960
kind of upgrade this plaintext protocol

42
00:06:33,120 --> 00:06:37,440
into an encrypted and authenticated

43
00:06:34,960 --> 00:06:37,440
protocol

44
00:06:38,479 --> 00:06:44,719
and in the web we only use this normal

45
00:06:41,840 --> 00:06:45,599
implicit tls mode where we have https

46
00:06:44,720 --> 00:06:48,639
which is

47
00:06:45,600 --> 00:06:50,960
on a separate port which is port 443

48
00:06:48,639 --> 00:06:54,319
so in the web this start tls thing kind

49
00:06:50,960 --> 00:06:54,318
of it doesn't exist

50
00:06:54,960 --> 00:06:59,280
and the most common protocol where this

51
00:06:57,280 --> 00:07:02,318
is used is all the things that

52
00:06:59,280 --> 00:07:03,840
have to do with email although

53
00:07:02,319 --> 00:07:06,000
there are a few other things where it's

54
00:07:03,840 --> 00:07:06,719
used but email is kind of the most

55
00:07:06,000 --> 00:07:09,280
relevant

56
00:07:06,720 --> 00:07:11,919
and the research we've been doing we

57
00:07:09,280 --> 00:07:14,559
have mostly focused on the connection

58
00:07:11,919 --> 00:07:16,560
between a client and the server

59
00:07:14,560 --> 00:07:18,560
i will later discuss a bit server to

60
00:07:16,560 --> 00:07:20,880
server but it's kind of

61
00:07:18,560 --> 00:07:22,000
a different thing where different

62
00:07:20,880 --> 00:07:24,560
considerations

63
00:07:22,000 --> 00:07:25,120
come into play so what we're focusing on

64
00:07:24,560 --> 00:07:28,479
is

65
00:07:25,120 --> 00:07:30,880
we have a client software something like

66
00:07:28,479 --> 00:07:32,560
outlook or thunderbird so an email

67
00:07:30,880 --> 00:07:34,960
client and that is connecting to a

68
00:07:32,560 --> 00:07:34,960
server

69
00:07:35,440 --> 00:07:41,440
um so uh email

70
00:07:38,639 --> 00:07:42,400
basically there are three protocols that

71
00:07:41,440 --> 00:07:45,599
are involved with

72
00:07:42,400 --> 00:07:48,719
email connections that's smtp pop3

73
00:07:45,599 --> 00:07:52,159
and imap and all three of them

74
00:07:48,720 --> 00:07:53,919
support this star tls

75
00:07:52,160 --> 00:07:56,160
there's a bit of a complication that

76
00:07:53,919 --> 00:07:57,198
smtp is kind of used for two different

77
00:07:56,160 --> 00:07:59,840
things

78
00:07:57,199 --> 00:08:01,440
one is which is sometimes also called

79
00:07:59,840 --> 00:08:04,479
submission where you're

80
00:08:01,440 --> 00:08:06,800
as a client put

81
00:08:04,479 --> 00:08:08,719
send your email through your mail server

82
00:08:06,800 --> 00:08:11,039
and the same protocol is used for

83
00:08:08,720 --> 00:08:12,800
server suit to server communication but

84
00:08:11,039 --> 00:08:16,080
as i said server to server is not the

85
00:08:12,800 --> 00:08:18,240
focus of this research

86
00:08:16,080 --> 00:08:19,840
and also for the client to server part

87
00:08:18,240 --> 00:08:22,720
all three of these protocols

88
00:08:19,840 --> 00:08:24,638
support implicit tls so they all have a

89
00:08:22,720 --> 00:08:27,759
dedicated tls port

90
00:08:24,639 --> 00:08:30,800
so we kind of can choose whether we use

91
00:08:27,759 --> 00:08:32,479
implicit tls or start tls and if we can

92
00:08:30,800 --> 00:08:33,839
choose then there's the obvious question

93
00:08:32,479 --> 00:08:36,409
which one is better

94
00:08:33,839 --> 00:08:37,519
which one should we use um

95
00:08:36,409 --> 00:08:41,760
[Music]

96
00:08:37,519 --> 00:08:45,200
so how does the start tls thing work

97
00:08:41,760 --> 00:08:47,360
these these protocols they are uh

98
00:08:45,200 --> 00:08:50,000
all three of them are kind of line based

99
00:08:47,360 --> 00:08:52,080
text mode protocols so we have

100
00:08:50,000 --> 00:08:54,560
a client that sends commands to the

101
00:08:52,080 --> 00:08:56,720
server and then gets a reply

102
00:08:54,560 --> 00:08:59,359
it's a bit like a command line and it's

103
00:08:56,720 --> 00:09:01,519
also kind of built in a way that you can

104
00:08:59,360 --> 00:09:03,360
manually speak this protocol so maybe

105
00:09:01,519 --> 00:09:04,080
some of you have done that that you can

106
00:09:03,360 --> 00:09:06,399
also

107
00:09:04,080 --> 00:09:09,760
use a telnet command to send an email or

108
00:09:06,399 --> 00:09:11,600
something like that

109
00:09:09,760 --> 00:09:13,200
and here's an example with an smtp

110
00:09:11,600 --> 00:09:15,040
connection so

111
00:09:13,200 --> 00:09:16,640
uh the first thing that happens is that

112
00:09:15,040 --> 00:09:19,839
the server sends

113
00:09:16,640 --> 00:09:20,480
a message that contains this code 220

114
00:09:19,839 --> 00:09:23,040
that's just

115
00:09:20,480 --> 00:09:24,320
part of the specification and then it's

116
00:09:23,040 --> 00:09:26,160
host name

117
00:09:24,320 --> 00:09:27,839
and then the client answers with this

118
00:09:26,160 --> 00:09:29,839
elo command so there's

119
00:09:27,839 --> 00:09:31,920
kind of an older version where it's

120
00:09:29,839 --> 00:09:35,040
hello and then in

121
00:09:31,920 --> 00:09:37,279
the more modern version of smtp it's elo

122
00:09:35,040 --> 00:09:39,279
with its own host name or which also can

123
00:09:37,279 --> 00:09:41,680
be a bogus host name

124
00:09:39,279 --> 00:09:43,519
and then the server answers with a line

125
00:09:41,680 --> 00:09:46,640
of what the server supports

126
00:09:43,519 --> 00:09:48,320
basically a list of features and what

127
00:09:46,640 --> 00:09:51,199
you can see here that in this list of

128
00:09:48,320 --> 00:09:53,279
features there's this star tls

129
00:09:51,200 --> 00:09:56,399
which means okay the server just told us

130
00:09:53,279 --> 00:09:58,160
it supports this star tls command

131
00:09:56,399 --> 00:10:00,480
and then the client can send this star

132
00:09:58,160 --> 00:10:01,360
tls command then it gets back again a

133
00:10:00,480 --> 00:10:03,440
message that

134
00:10:01,360 --> 00:10:05,040
kind of confirms that the server

135
00:10:03,440 --> 00:10:06,880
received that message

136
00:10:05,040 --> 00:10:08,880
and then there's a handshake happening

137
00:10:06,880 --> 00:10:11,600
so after that

138
00:10:08,880 --> 00:10:14,160
the the connection is encrypted and then

139
00:10:11,600 --> 00:10:16,880
we basically start over again because

140
00:10:14,160 --> 00:10:18,079
the first of all the list of features

141
00:10:16,880 --> 00:10:21,360
from the server can change

142
00:10:18,079 --> 00:10:24,399
and second of all

143
00:10:21,360 --> 00:10:26,480
the we cannot really trust any data that

144
00:10:24,399 --> 00:10:28,079
we got before the tls handshake because

145
00:10:26,480 --> 00:10:31,279
that was plain text that can be

146
00:10:28,079 --> 00:10:34,560
manipulated by an attacker

147
00:10:31,279 --> 00:10:38,079
and then we can log in and send an email

148
00:10:34,560 --> 00:10:39,279
um yeah but the relevant part is

149
00:10:38,079 --> 00:10:41,120
basically

150
00:10:39,279 --> 00:10:42,880
it's the very simple idea we have one

151
00:10:41,120 --> 00:10:47,279
command that initiates the tls

152
00:10:42,880 --> 00:10:50,000
connection and then we do a handshake um

153
00:10:47,279 --> 00:10:52,399
so let there's first something obvious

154
00:10:50,000 --> 00:10:52,800
and that is that if we use the star tls

155
00:10:52,399 --> 00:10:55,760
in an

156
00:10:52,800 --> 00:10:58,160
opportunistic way then this is not

157
00:10:55,760 --> 00:11:02,079
secure against the network attacker

158
00:10:58,160 --> 00:11:03,680
so this this was sometimes done in the

159
00:11:02,079 --> 00:11:05,120
past where there were clients that

160
00:11:03,680 --> 00:11:07,199
implemented star tls

161
00:11:05,120 --> 00:11:08,800
but in a way where they said if the

162
00:11:07,200 --> 00:11:11,120
server supports star tls

163
00:11:08,800 --> 00:11:12,959
then i will do star tls and if the

164
00:11:11,120 --> 00:11:14,480
server doesn't support it we will do a

165
00:11:12,959 --> 00:11:16,319
plaintext connection

166
00:11:14,480 --> 00:11:17,600
which is sometimes called opportunistic

167
00:11:16,320 --> 00:11:21,920
tls

168
00:11:17,600 --> 00:11:24,240
and it is uh obvious that

169
00:11:21,920 --> 00:11:26,319
uh that this is that this does not

170
00:11:24,240 --> 00:11:28,000
provide any protection against an active

171
00:11:26,320 --> 00:11:31,120
attacker because the attacker can for

172
00:11:28,000 --> 00:11:33,440
example just strip out this star tls

173
00:11:31,120 --> 00:11:35,040
capability from the server answer and

174
00:11:33,440 --> 00:11:36,399
then the client thinks the server

175
00:11:35,040 --> 00:11:40,560
doesn't support it

176
00:11:36,399 --> 00:11:42,800
so but this is not very common in modern

177
00:11:40,560 --> 00:11:45,119
male clients so most modern male clients

178
00:11:42,800 --> 00:11:47,680
if you configure them to use star tls

179
00:11:45,120 --> 00:11:49,680
they will enforce it so they will use

180
00:11:47,680 --> 00:11:51,359
star tls and if it's not supported they

181
00:11:49,680 --> 00:11:55,279
will just not connect

182
00:11:51,360 --> 00:11:57,200
which is the reasonable thing to do so

183
00:11:55,279 --> 00:11:59,200
so attacking this has also sometimes

184
00:11:57,200 --> 00:12:01,760
been called star tls stripping

185
00:11:59,200 --> 00:12:03,680
but that is kind of not the focus of our

186
00:12:01,760 --> 00:12:04,560
research because we consider that as an

187
00:12:03,680 --> 00:12:06,399
obvious thing

188
00:12:04,560 --> 00:12:08,239
like if you have optional encryption

189
00:12:06,399 --> 00:12:11,440
that can be downgraded by an attacker

190
00:12:08,240 --> 00:12:13,360
that is not secure um

191
00:12:11,440 --> 00:12:15,200
but it turns out this is not the only

192
00:12:13,360 --> 00:12:16,160
security problem that you have to start

193
00:12:15,200 --> 00:12:19,360
yes

194
00:12:16,160 --> 00:12:22,079
so uh if you think about what station

195
00:12:19,360 --> 00:12:23,600
is is then it's kind of something like a

196
00:12:22,079 --> 00:12:24,560
state transition where you have a

197
00:12:23,600 --> 00:12:26,560
protocol

198
00:12:24,560 --> 00:12:27,760
that can have two different states it

199
00:12:26,560 --> 00:12:29,599
can be an

200
00:12:27,760 --> 00:12:31,200
in a non-encrypted state and in an

201
00:12:29,600 --> 00:12:33,519
encrypted state

202
00:12:31,200 --> 00:12:35,040
and we have this transition where we

203
00:12:33,519 --> 00:12:36,880
move from the

204
00:12:35,040 --> 00:12:38,319
the plaintext state to the encrypted

205
00:12:36,880 --> 00:12:40,399
state

206
00:12:38,320 --> 00:12:43,839
and this raises a number of questions

207
00:12:40,399 --> 00:12:46,880
which don't have very satisfying answers

208
00:12:43,839 --> 00:12:48,399
so first of all you can ask okay these

209
00:12:46,880 --> 00:12:49,439
email protocols they have a number of

210
00:12:48,399 --> 00:12:52,160
features

211
00:12:49,440 --> 00:12:52,880
which of them are allowed before we go

212
00:12:52,160 --> 00:12:54,959
into

213
00:12:52,880 --> 00:12:56,720
before we do this tls transition so

214
00:12:54,959 --> 00:12:57,760
which features can i use in the plain

215
00:12:56,720 --> 00:13:00,800
text

216
00:12:57,760 --> 00:13:03,040
version of the protocol then also how

217
00:13:00,800 --> 00:13:05,599
should i treat and the data that i got

218
00:13:03,040 --> 00:13:09,519
before the tls handshake what should i

219
00:13:05,600 --> 00:13:09,519
do with it should i trust it in any way

220
00:13:09,600 --> 00:13:14,639
and also it can there be situations

221
00:13:12,560 --> 00:13:17,839
where an implementation gets confused

222
00:13:14,639 --> 00:13:20,639
which data was part of the

223
00:13:17,839 --> 00:13:22,920
plaintext part or which was part of the

224
00:13:20,639 --> 00:13:24,480
encrypted part

225
00:13:22,920 --> 00:13:27,680
[Music]

226
00:13:24,480 --> 00:13:30,880
so one example of these issues is imap

227
00:13:27,680 --> 00:13:33,199
has a feature that's imap alerts

228
00:13:30,880 --> 00:13:34,240
which the protocol says they can be sent

229
00:13:33,200 --> 00:13:36,720
at any time

230
00:13:34,240 --> 00:13:37,920
so we can send them before the tls

231
00:13:36,720 --> 00:13:40,160
transition happened

232
00:13:37,920 --> 00:13:42,079
and what what is what does this mean an

233
00:13:40,160 --> 00:13:44,000
alert it's basically the server sends a

234
00:13:42,079 --> 00:13:46,079
message to the client

235
00:13:44,000 --> 00:13:49,760
and then the the client application

236
00:13:46,079 --> 00:13:51,519
shows this to the user so

237
00:13:49,760 --> 00:13:54,319
and what this means is if you use star

238
00:13:51,519 --> 00:13:55,440
tls then as an attacker we can insert

239
00:13:54,320 --> 00:13:57,120
such an alert

240
00:13:55,440 --> 00:13:58,720
and then a message will be shown to the

241
00:13:57,120 --> 00:13:59,839
user that looks like it comes from the

242
00:13:58,720 --> 00:14:02,480
mail server

243
00:13:59,839 --> 00:14:04,160
even though it's from the attacker so

244
00:14:02,480 --> 00:14:07,440
here's a screenshot of

245
00:14:04,160 --> 00:14:09,439
such a message in outlook where yeah the

246
00:14:07,440 --> 00:14:12,720
attacker has inserted this message

247
00:14:09,440 --> 00:14:14,240
and uh it says yeah your imap server

248
00:14:12,720 --> 00:14:16,880
wants to alert you to the following

249
00:14:14,240 --> 00:14:18,959
please download microsoft's attacker.com

250
00:14:16,880 --> 00:14:21,040
something something and the nice thing

251
00:14:18,959 --> 00:14:22,160
is it even highlights links and you can

252
00:14:21,040 --> 00:14:25,519
click on them

253
00:14:22,160 --> 00:14:27,760
so yeah so as an attacker you can

254
00:14:25,519 --> 00:14:29,360
send such a message to the client and it

255
00:14:27,760 --> 00:14:30,720
actually looks like this is something

256
00:14:29,360 --> 00:14:32,959
from my mail server

257
00:14:30,720 --> 00:14:36,079
even though it was plain text it was not

258
00:14:32,959 --> 00:14:36,079
protected in any way

259
00:14:38,720 --> 00:14:42,480
then there's an issue with a buffering

260
00:14:41,279 --> 00:14:45,199
box

261
00:14:42,480 --> 00:14:47,279
so this this has been known for a while

262
00:14:45,199 --> 00:14:50,399
uh the the basic question here is

263
00:14:47,279 --> 00:14:52,320
which data is is some data i get part of

264
00:14:50,399 --> 00:14:54,000
the tls session or not

265
00:14:52,320 --> 00:14:55,680
and there's some sometimes some

266
00:14:54,000 --> 00:14:59,440
confusion about that

267
00:14:55,680 --> 00:15:01,599
so there was a bug in postfix in 2011

268
00:14:59,440 --> 00:15:05,760
already

269
00:15:01,600 --> 00:15:08,720
where it turned out that you can

270
00:15:05,760 --> 00:15:11,120
send some commands in plain text where

271
00:15:08,720 --> 00:15:14,959
the server will actually think they will

272
00:15:11,120 --> 00:15:16,560
sent wire tls and how does this happen

273
00:15:14,959 --> 00:15:19,599
so this is how

274
00:15:16,560 --> 00:15:22,479
this is kind of just the part where the

275
00:15:19,600 --> 00:15:23,839
star tls happens highlighted so this is

276
00:15:22,480 --> 00:15:26,240
a normal version

277
00:15:23,839 --> 00:15:28,240
like without an attack so we the client

278
00:15:26,240 --> 00:15:30,480
sends the start.tls command

279
00:15:28,240 --> 00:15:32,560
gets this code as an answer does a

280
00:15:30,480 --> 00:15:36,000
handshake and sends

281
00:15:32,560 --> 00:15:38,160
some command now what we can do with

282
00:15:36,000 --> 00:15:40,880
some servers is that

283
00:15:38,160 --> 00:15:42,719
we send the start as command and we send

284
00:15:40,880 --> 00:15:45,920
another command together with it

285
00:15:42,720 --> 00:15:47,680
in a single tcp package and what some

286
00:15:45,920 --> 00:15:48,959
servers will do is then they will do a

287
00:15:47,680 --> 00:15:50,719
tls handshake

288
00:15:48,959 --> 00:15:54,079
and then they will answer to that second

289
00:15:50,720 --> 00:15:55,920
command in the tls session

290
00:15:54,079 --> 00:15:59,839
and the server will kind of think that

291
00:15:55,920 --> 00:15:59,839
this is already part of the tls session

292
00:16:00,959 --> 00:16:05,680
so so yeah we can send something in

293
00:16:03,759 --> 00:16:06,560
plain text together with the start tls

294
00:16:05,680 --> 00:16:08,319
command

295
00:16:06,560 --> 00:16:11,359
and the server will consider this as

296
00:16:08,320 --> 00:16:14,959
part of the tls connection

297
00:16:11,360 --> 00:16:15,759
so this was originally found in postfix

298
00:16:14,959 --> 00:16:18,000
as i said but

299
00:16:15,759 --> 00:16:19,759
it turned out it affected basically most

300
00:16:18,000 --> 00:16:22,079
email servers out there

301
00:16:19,759 --> 00:16:23,120
there were similar vulnerabilities in

302
00:16:22,079 --> 00:16:25,839
cyrus career

303
00:16:23,120 --> 00:16:27,040
qmail and various proprietary email

304
00:16:25,839 --> 00:16:28,959
stacks so there's a

305
00:16:27,040 --> 00:16:30,800
advisory from the us cert and it

306
00:16:28,959 --> 00:16:33,199
contains a very long list of vulnerable

307
00:16:30,800 --> 00:16:33,199
servers

308
00:16:33,759 --> 00:16:37,600
now how can we attack this so one one

309
00:16:36,480 --> 00:16:41,440
issue with this was

310
00:16:37,600 --> 00:16:43,600
that uh the postfix develops described

311
00:16:41,440 --> 00:16:45,519
this bug in 2011 but they didn't really

312
00:16:43,600 --> 00:16:47,839
describe how to attack it

313
00:16:45,519 --> 00:16:49,279
and there were for example some email

314
00:16:47,839 --> 00:16:51,759
threats where some

315
00:16:49,279 --> 00:16:53,439
mail server developers said yeah this is

316
00:16:51,759 --> 00:16:54,959
kind of strange behavior but it's not

317
00:16:53,440 --> 00:16:57,040
really a vulnerability they kind of

318
00:16:54,959 --> 00:17:00,319
denied that this is a bug

319
00:16:57,040 --> 00:17:02,079
because there was no exploit for it and

320
00:17:00,320 --> 00:17:05,120
but one way how you could imagine

321
00:17:02,079 --> 00:17:07,918
exploiting this is that you can send an

322
00:17:05,119 --> 00:17:09,438
email as an attacker to yourself which

323
00:17:07,919 --> 00:17:13,439
will then contain the

324
00:17:09,439 --> 00:17:15,280
login data from a user and this is a bit

325
00:17:13,439 --> 00:17:16,480
tricky to understand what's going on

326
00:17:15,280 --> 00:17:18,959
here but

327
00:17:16,480 --> 00:17:20,559
what is happening here is basically the

328
00:17:18,959 --> 00:17:21,600
interesting part starts with the star

329
00:17:20,559 --> 00:17:24,000
tls

330
00:17:21,599 --> 00:17:26,958
and then we have an attacker that

331
00:17:24,000 --> 00:17:29,520
injects some commands with the start tls

332
00:17:26,959 --> 00:17:30,720
it injects a command okay this elo

333
00:17:29,520 --> 00:17:32,559
command because that

334
00:17:30,720 --> 00:17:33,919
is just part of the protocol it always

335
00:17:32,559 --> 00:17:37,760
comes after the

336
00:17:33,919 --> 00:17:39,840
tls handshake then it sends

337
00:17:37,760 --> 00:17:42,000
an authentication command and that this

338
00:17:39,840 --> 00:17:43,840
is with login data from the attacker

339
00:17:42,000 --> 00:17:45,280
so what we are assuming here is the mail

340
00:17:43,840 --> 00:17:45,760
service where the attacker has an

341
00:17:45,280 --> 00:17:48,480
account

342
00:17:45,760 --> 00:17:50,640
something like a public free mail

343
00:17:48,480 --> 00:17:53,039
service

344
00:17:50,640 --> 00:17:55,120
and then the attacker sends a mail from

345
00:17:53,039 --> 00:17:57,440
himself to himself

346
00:17:55,120 --> 00:17:58,239
and then he he basically this data

347
00:17:57,440 --> 00:18:01,039
commence

348
00:17:58,240 --> 00:18:03,360
says means now here comes the mail

349
00:18:01,039 --> 00:18:06,640
content

350
00:18:03,360 --> 00:18:08,479
so and then okay the server will answer

351
00:18:06,640 --> 00:18:09,840
this star tls command and then the

352
00:18:08,480 --> 00:18:11,280
client and the server will do a

353
00:18:09,840 --> 00:18:13,678
handshake

354
00:18:11,280 --> 00:18:14,320
and then the server answers to all these

355
00:18:13,679 --> 00:18:16,880
commands

356
00:18:14,320 --> 00:18:18,559
that that the attacker injected and the

357
00:18:16,880 --> 00:18:19,919
client will read them line by line and

358
00:18:18,559 --> 00:18:23,520
process them

359
00:18:19,919 --> 00:18:24,640
so the client will send his own elo

360
00:18:23,520 --> 00:18:26,879
command and will get

361
00:18:24,640 --> 00:18:27,679
the answer from the server which is the

362
00:18:26,880 --> 00:18:31,600
answer to the

363
00:18:27,679 --> 00:18:34,799
command the attacker sent um

364
00:18:31,600 --> 00:18:36,159
and then the client will send his own

365
00:18:34,799 --> 00:18:38,799
authentication

366
00:18:36,160 --> 00:18:40,000
and the content of the email it wants to

367
00:18:38,799 --> 00:18:42,639
send

368
00:18:40,000 --> 00:18:44,640
but everything that comes after here

369
00:18:42,640 --> 00:18:46,320
goes into the email that the attacker

370
00:18:44,640 --> 00:18:48,880
sent to himself

371
00:18:46,320 --> 00:18:50,720
so basically the attacker gets an email

372
00:18:48,880 --> 00:18:51,200
and that contains the most interesting

373
00:18:50,720 --> 00:18:53,600
part

374
00:18:51,200 --> 00:18:55,840
the auth the login data which is

375
00:18:53,600 --> 00:18:58,320
basically just a base64 encoding of the

376
00:18:55,840 --> 00:19:00,480
username and the password

377
00:18:58,320 --> 00:19:02,480
so this is a pretty devastating attack

378
00:19:00,480 --> 00:19:04,000
if you have a server vulnerable to this

379
00:19:02,480 --> 00:19:08,080
it means you can steal

380
00:19:04,000 --> 00:19:08,080
login credentials from an email account

381
00:19:08,960 --> 00:19:12,799
you can do a similar attack with imap

382
00:19:11,360 --> 00:19:15,199
where the idea is that

383
00:19:12,799 --> 00:19:15,918
imap allows you to store a mail in a

384
00:19:15,200 --> 00:19:17,360
mailbox

385
00:19:15,919 --> 00:19:20,080
and then you can do something very

386
00:19:17,360 --> 00:19:22,000
similar it's a bit more tricky because

387
00:19:20,080 --> 00:19:22,559
you need to know the size of the stored

388
00:19:22,000 --> 00:19:25,760
message

389
00:19:22,559 --> 00:19:28,879
but uh it worked

390
00:19:25,760 --> 00:19:30,000
the idea is basically the same um

391
00:19:28,880 --> 00:19:33,440
[Music]

392
00:19:30,000 --> 00:19:35,600
so we did a scan and we found that 1.5

393
00:19:33,440 --> 00:19:38,240
percent of smtp servers that we could

394
00:19:35,600 --> 00:19:41,840
reach are vulnerable to this

395
00:19:38,240 --> 00:19:44,240
then 2.6 percent of pop3 servers and 2.4

396
00:19:41,840 --> 00:19:45,918
of imf servers so this is very still a

397
00:19:44,240 --> 00:19:48,400
very wide thread bug

398
00:19:45,919 --> 00:19:48,400
uh yeah

399
00:19:51,360 --> 00:19:55,199
uh we have so the question was if we

400
00:19:53,760 --> 00:19:57,440
have a tool to test servers

401
00:19:55,200 --> 00:19:58,880
uh yes but we haven't published it yet

402
00:19:57,440 --> 00:20:02,159
but we will

403
00:19:58,880 --> 00:20:04,320
um yeah uh

404
00:20:02,159 --> 00:20:06,080
i have to say for pop3 we don't have an

405
00:20:04,320 --> 00:20:07,120
exploit because we didn't really have an

406
00:20:06,080 --> 00:20:10,320
idea how to attack

407
00:20:07,120 --> 00:20:11,678
this because pop3 has no way to store or

408
00:20:10,320 --> 00:20:15,120
send an email it's just

409
00:20:11,679 --> 00:20:18,240
to fetch mails from the server but still

410
00:20:15,120 --> 00:20:22,000
we think it's a bug that should be fixed

411
00:20:18,240 --> 00:20:23,919
um now there's another question

412
00:20:22,000 --> 00:20:25,840
you could ask and this is can we do

413
00:20:23,919 --> 00:20:29,120
something similar the other way around

414
00:20:25,840 --> 00:20:31,039
so can we send from the server side some

415
00:20:29,120 --> 00:20:32,000
additional commands that the client will

416
00:20:31,039 --> 00:20:36,158
interpret

417
00:20:32,000 --> 00:20:39,440
and it turns out yes so uh

418
00:20:36,159 --> 00:20:41,679
looking at this this transition again if

419
00:20:39,440 --> 00:20:44,159
if the client sends the star tls command

420
00:20:41,679 --> 00:20:47,120
and the server answers with this 220

421
00:20:44,159 --> 00:20:48,960
okay and then with something else then

422
00:20:47,120 --> 00:20:51,918
the client will interpret

423
00:20:48,960 --> 00:20:53,440
this something else as part of the tls

424
00:20:51,919 --> 00:20:56,480
connection

425
00:20:53,440 --> 00:20:58,799
um so

426
00:20:56,480 --> 00:21:00,799
so yeah the client can be vulnerable to

427
00:20:58,799 --> 00:21:03,679
the same class of bug this is one of the

428
00:21:00,799 --> 00:21:07,120
major findings that we had

429
00:21:03,679 --> 00:21:09,520
during our research and we called this a

430
00:21:07,120 --> 00:21:11,600
response injection

431
00:21:09,520 --> 00:21:13,760
and this can be used for example to

432
00:21:11,600 --> 00:21:16,639
spoof mailbox content

433
00:21:13,760 --> 00:21:18,158
like you can show the client uh an inbox

434
00:21:16,640 --> 00:21:19,840
with different content than what's

435
00:21:18,159 --> 00:21:22,880
actually in the inbox

436
00:21:19,840 --> 00:21:24,959
uh it requires you to know which

437
00:21:22,880 --> 00:21:25,520
commands the client will send but if you

438
00:21:24,960 --> 00:21:27,200
know

439
00:21:25,520 --> 00:21:29,440
what software the client is then you

440
00:21:27,200 --> 00:21:32,640
kind of can know this

441
00:21:29,440 --> 00:21:34,320
um and here the thing was that

442
00:21:32,640 --> 00:21:36,159
more than half of the mail clients that

443
00:21:34,320 --> 00:21:37,600
we tested were vulnerable so this is a

444
00:21:36,159 --> 00:21:39,760
very widespread bug

445
00:21:37,600 --> 00:21:40,879
of wars i hope most of them are fixed by

446
00:21:39,760 --> 00:21:45,840
now but

447
00:21:40,880 --> 00:21:45,840
this turned out to be very very common

448
00:21:46,400 --> 00:21:51,600
so so kind of looking at this this star

449
00:21:49,840 --> 00:21:54,000
tls command injection

450
00:21:51,600 --> 00:21:55,840
was discovered in 2011 and affected

451
00:21:54,000 --> 00:21:58,320
multiple implementations

452
00:21:55,840 --> 00:21:59,520
and we can see even though it's nine

453
00:21:58,320 --> 00:22:02,000
years old

454
00:21:59,520 --> 00:22:03,039
we can still see quite a few vulnerable

455
00:22:02,000 --> 00:22:06,640
servers

456
00:22:03,039 --> 00:22:09,280
so it's not been fixed everywhere um

457
00:22:06,640 --> 00:22:09,919
and also we we saw that we can have the

458
00:22:09,280 --> 00:22:12,320
same

459
00:22:09,919 --> 00:22:15,200
type of bug on the client and that

460
00:22:12,320 --> 00:22:19,360
affects the majority of implementations

461
00:22:15,200 --> 00:22:21,440
so and also like if you think about

462
00:22:19,360 --> 00:22:22,479
if if you look at how you implement

463
00:22:21,440 --> 00:22:24,880
something like

464
00:22:22,480 --> 00:22:27,120
this is you usually have a buffer where

465
00:22:24,880 --> 00:22:28,720
you read commands line by line

466
00:22:27,120 --> 00:22:30,479
and it's basically very easy to

467
00:22:28,720 --> 00:22:32,240
implement this bug like if you do a

468
00:22:30,480 --> 00:22:33,600
straightforward implementation and don't

469
00:22:32,240 --> 00:22:36,240
think about this

470
00:22:33,600 --> 00:22:38,879
you will almost certainly have this bug

471
00:22:36,240 --> 00:22:38,880
in your code

472
00:22:39,360 --> 00:22:43,520
and this is also why i would argue that

473
00:22:41,360 --> 00:22:45,360
this is this should not be seen as a

474
00:22:43,520 --> 00:22:47,760
as bugs in the client i mean of course

475
00:22:45,360 --> 00:22:50,399
it is a bug in the implementation

476
00:22:47,760 --> 00:22:52,480
but this is a systemic problem with the

477
00:22:50,400 --> 00:22:56,320
standard this is a standard that makes

478
00:22:52,480 --> 00:22:59,360
it far too easy to get things wrong

479
00:22:56,320 --> 00:23:01,039
um yeah

480
00:22:59,360 --> 00:23:02,799
there are some other issues with star

481
00:23:01,039 --> 00:23:06,400
tls

482
00:23:02,799 --> 00:23:10,000
in imap there is something called pre-os

483
00:23:06,400 --> 00:23:12,080
so what this is a feature where a server

484
00:23:10,000 --> 00:23:13,520
directly after a client connects to it

485
00:23:12,080 --> 00:23:15,439
can say

486
00:23:13,520 --> 00:23:18,000
you are already logged in you don't have

487
00:23:15,440 --> 00:23:18,000
to log in

488
00:23:19,600 --> 00:23:24,639
so so this is for example used if you

489
00:23:22,559 --> 00:23:26,879
have an internal network and

490
00:23:24,640 --> 00:23:29,120
you can do ip based authentication where

491
00:23:26,880 --> 00:23:32,240
you say when this client connects

492
00:23:29,120 --> 00:23:33,918
uh this is we we know this ip we we know

493
00:23:32,240 --> 00:23:36,320
it cannot be spoofed then it's already

494
00:23:33,919 --> 00:23:36,320
logged in

495
00:23:36,799 --> 00:23:42,320
now star tls the the standard clearly

496
00:23:40,400 --> 00:23:46,799
says that you you must not

497
00:23:42,320 --> 00:23:48,879
do star tls in an authenticated state

498
00:23:46,799 --> 00:23:50,720
now if we take these two things to back

499
00:23:48,880 --> 00:23:51,840
together then we kind of get a

500
00:23:50,720 --> 00:23:53,760
contradiction here

501
00:23:51,840 --> 00:23:55,520
because what if if you have a client

502
00:23:53,760 --> 00:23:57,200
that wants to do start tls

503
00:23:55,520 --> 00:23:59,200
but the server answers with this

504
00:23:57,200 --> 00:24:01,120
pre-auth command

505
00:23:59,200 --> 00:24:02,960
so it means kind of we're already logged

506
00:24:01,120 --> 00:24:04,479
in we want to do star tls but we're not

507
00:24:02,960 --> 00:24:07,679
allowed to do star tls

508
00:24:04,480 --> 00:24:09,760
so we have a contradiction here

509
00:24:07,679 --> 00:24:12,080
so we think that this is a logical

510
00:24:09,760 --> 00:24:14,000
inconsistency in the standard

511
00:24:12,080 --> 00:24:15,279
and this is not really mentioned in the

512
00:24:14,000 --> 00:24:18,880
standard what to do there

513
00:24:15,279 --> 00:24:21,200
but the only reasonable

514
00:24:18,880 --> 00:24:22,159
way to react to this is for a client to

515
00:24:21,200 --> 00:24:24,320
just say stop

516
00:24:22,159 --> 00:24:25,840
we're not connecting here this doesn't

517
00:24:24,320 --> 00:24:28,879
make sense

518
00:24:25,840 --> 00:24:30,959
um but um as you imagine um

519
00:24:28,880 --> 00:24:32,720
this is not what all the clients do like

520
00:24:30,960 --> 00:24:35,120
some clients if you do a pre-auth

521
00:24:32,720 --> 00:24:37,440
connection this is basically a way

522
00:24:35,120 --> 00:24:38,639
to prevent the start tls transition from

523
00:24:37,440 --> 00:24:40,400
happening so

524
00:24:38,640 --> 00:24:41,919
as an attacker you can also send this

525
00:24:40,400 --> 00:24:43,520
pre-auth command and that basically

526
00:24:41,919 --> 00:24:46,280
means you prevent the client from

527
00:24:43,520 --> 00:24:47,520
starting the encryption

528
00:24:46,280 --> 00:24:49,918
[Music]

529
00:24:47,520 --> 00:24:51,760
so this obviously also leads to mailbox

530
00:24:49,919 --> 00:24:54,159
proofing because as an attacker we can

531
00:24:51,760 --> 00:24:56,000
just pretend to be the server

532
00:24:54,159 --> 00:24:57,840
as there's no tls there's no

533
00:24:56,000 --> 00:24:59,919
authentication happening

534
00:24:57,840 --> 00:25:02,559
but it may also lead to stealing mail

535
00:24:59,919 --> 00:25:04,880
content because for example

536
00:25:02,559 --> 00:25:06,158
some clients will start to synchronize

537
00:25:04,880 --> 00:25:07,760
the mailbox

538
00:25:06,159 --> 00:25:10,000
if they connect with the server and the

539
00:25:07,760 --> 00:25:12,840
server has different mailbox content

540
00:25:10,000 --> 00:25:14,000
so they may upload data from some

541
00:25:12,840 --> 00:25:17,199
folders

542
00:25:14,000 --> 00:25:19,919
so yeah this is also pretty bad bug

543
00:25:17,200 --> 00:25:22,480
um then there's another feature in imap

544
00:25:19,919 --> 00:25:24,000
which is called mailbox referrals

545
00:25:22,480 --> 00:25:25,520
and this is basically some kind of

546
00:25:24,000 --> 00:25:29,200
forwarding where

547
00:25:25,520 --> 00:25:31,840
a server can say hey dear client please

548
00:25:29,200 --> 00:25:34,080
log into this other mail server and get

549
00:25:31,840 --> 00:25:37,439
the mails from there

550
00:25:34,080 --> 00:25:39,678
um now if we compile

551
00:25:37,440 --> 00:25:41,039
bind these two things like this pre-auth

552
00:25:39,679 --> 00:25:43,279
thing where we

553
00:25:41,039 --> 00:25:44,480
as a server can tell the client you're

554
00:25:43,279 --> 00:25:47,919
already logged in

555
00:25:44,480 --> 00:25:50,000
so you cannot do encryption um and this

556
00:25:47,919 --> 00:25:52,000
mailbox referral so we say

557
00:25:50,000 --> 00:25:53,600
to the client yeah please log into this

558
00:25:52,000 --> 00:25:56,240
other server

559
00:25:53,600 --> 00:25:58,000
then we again have an attack where we

560
00:25:56,240 --> 00:25:58,960
can steal credentials we can tell the

561
00:25:58,000 --> 00:26:01,840
client here

562
00:25:58,960 --> 00:26:03,760
please log into my attacker server and

563
00:26:01,840 --> 00:26:05,120
then the attacker server can record the

564
00:26:03,760 --> 00:26:08,240
credentials

565
00:26:05,120 --> 00:26:09,439
um now i have to say that this feature

566
00:26:08,240 --> 00:26:12,000
is not very widely

567
00:26:09,440 --> 00:26:13,520
supported so most clients just don't

568
00:26:12,000 --> 00:26:15,200
support these referrals

569
00:26:13,520 --> 00:26:17,120
there's a similar feature called login

570
00:26:15,200 --> 00:26:19,679
referrals which

571
00:26:17,120 --> 00:26:21,520
something similar can happen and we only

572
00:26:19,679 --> 00:26:24,000
found one client where we could

573
00:26:21,520 --> 00:26:25,679
perform this attack which was alpine

574
00:26:24,000 --> 00:26:29,279
which is a

575
00:26:25,679 --> 00:26:30,799
text mode based email client but still i

576
00:26:29,279 --> 00:26:32,960
mean i think the interesting thing is

577
00:26:30,799 --> 00:26:35,200
that there are features in imap that

578
00:26:32,960 --> 00:26:36,799
don't play well with star tls and it

579
00:26:35,200 --> 00:26:41,279
seems this is not very well

580
00:26:36,799 --> 00:26:42,400
thought of yeah so to summarize what we

581
00:26:41,279 --> 00:26:44,400
had until now yeah

582
00:26:42,400 --> 00:26:46,240
start tls has a systemic problem with

583
00:26:44,400 --> 00:26:48,080
buffering bugs both on the server and

584
00:26:46,240 --> 00:26:49,200
the client sides and these are very very

585
00:26:48,080 --> 00:26:51,120
common

586
00:26:49,200 --> 00:26:52,880
we have several features in imap that

587
00:26:51,120 --> 00:26:54,959
are problematic or

588
00:26:52,880 --> 00:26:56,640
outright insecure if we combine them

589
00:26:54,960 --> 00:26:59,520
with star tls

590
00:26:56,640 --> 00:27:01,039
and also star tls doesn't really have

591
00:26:59,520 --> 00:27:04,080
any security advantage

592
00:27:01,039 --> 00:27:06,640
if we use normal implicit tls that is

593
00:27:04,080 --> 00:27:09,520
it has all the security benefits without

594
00:27:06,640 --> 00:27:09,520
these downsides

595
00:27:09,760 --> 00:27:14,080
so yeah our conclusion is is pretty

596
00:27:12,080 --> 00:27:15,279
clear here we we recommend just to not

597
00:27:14,080 --> 00:27:20,000
use start tls

598
00:27:15,279 --> 00:27:22,880
in mail client connections um

599
00:27:20,000 --> 00:27:23,919
so if you have a male client that

600
00:27:22,880 --> 00:27:26,960
supports both

601
00:27:23,919 --> 00:27:29,279
then you should configure it to not use

602
00:27:26,960 --> 00:27:31,440
star tls but to use the implicit tls

603
00:27:29,279 --> 00:27:33,279
port

604
00:27:31,440 --> 00:27:34,559
if you have a server of course you

605
00:27:33,279 --> 00:27:38,080
should support the

606
00:27:34,559 --> 00:27:40,480
implicit tls ports and if you can

607
00:27:38,080 --> 00:27:42,720
just disable the start tls support and

608
00:27:40,480 --> 00:27:44,399
they say if you can because i know

609
00:27:42,720 --> 00:27:45,760
if you have a mail server that has a lot

610
00:27:44,399 --> 00:27:46,959
of existing users

611
00:27:45,760 --> 00:27:49,440
and they may have different

612
00:27:46,960 --> 00:27:50,000
configurations then it may not be easy

613
00:27:49,440 --> 00:27:51,679
to

614
00:27:50,000 --> 00:27:53,279
switch something off which will break

615
00:27:51,679 --> 00:27:55,039
half of your user base

616
00:27:53,279 --> 00:27:57,120
but for example if you set up a new mail

617
00:27:55,039 --> 00:27:58,799
server this could be a good idea to just

618
00:27:57,120 --> 00:28:01,279
not support starttls right from the

619
00:27:58,799 --> 00:28:01,279
beginning

620
00:28:01,840 --> 00:28:06,399
then um we have this special case which

621
00:28:04,240 --> 00:28:10,080
is the server to server connections or

622
00:28:06,399 --> 00:28:12,879
mta to mta mta is just kind of a fancy

623
00:28:10,080 --> 00:28:15,199
acronym for for mail server it's good

624
00:28:12,880 --> 00:28:17,760
for mail transfer agent

625
00:28:15,200 --> 00:28:19,120
um the situation there is a bit

626
00:28:17,760 --> 00:28:21,760
different

627
00:28:19,120 --> 00:28:23,600
so for one there's just currently no

628
00:28:21,760 --> 00:28:26,399
specified way to use uh

629
00:28:23,600 --> 00:28:28,000
implicit tls connection for for server

630
00:28:26,399 --> 00:28:30,479
to server situation

631
00:28:28,000 --> 00:28:32,159
so we cannot just say don't use dls

632
00:28:30,480 --> 00:28:33,919
because we don't have an encrypted

633
00:28:32,159 --> 00:28:36,559
alternative

634
00:28:33,919 --> 00:28:38,240
and also traditionally the star tls in

635
00:28:36,559 --> 00:28:41,440
server to server connections

636
00:28:38,240 --> 00:28:43,919
was used in an opportunistic way so

637
00:28:41,440 --> 00:28:46,159
where so there you there's usually no

638
00:28:43,919 --> 00:28:48,159
certificate validation and it

639
00:28:46,159 --> 00:28:50,640
we don't have an expectation here that

640
00:28:48,159 --> 00:28:52,960
it protects against an active attacker

641
00:28:50,640 --> 00:28:55,200
it it was usually used as something yeah

642
00:28:52,960 --> 00:28:59,120
we will encrypt if we can but if not

643
00:28:55,200 --> 00:29:01,520
then we will send the email unencrypted

644
00:28:59,120 --> 00:29:03,760
however this is this is slowly changing

645
00:29:01,520 --> 00:29:05,360
so there are two mechanisms to try to

646
00:29:03,760 --> 00:29:07,200
secure these server to server

647
00:29:05,360 --> 00:29:08,959
connections in a better way

648
00:29:07,200 --> 00:29:11,279
one of them is called dane it's based on

649
00:29:08,960 --> 00:29:14,720
dns and the other is called mta

650
00:29:11,279 --> 00:29:15,120
sts which is kind of like a trust on

651
00:29:14,720 --> 00:29:18,480
first

652
00:29:15,120 --> 00:29:20,719
use kind of mechanism i'm not going to

653
00:29:18,480 --> 00:29:22,000
discuss these in detail that would be a

654
00:29:20,720 --> 00:29:25,600
separate talk

655
00:29:22,000 --> 00:29:26,080
but just there is effort on the way to

656
00:29:25,600 --> 00:29:27,678
to

657
00:29:26,080 --> 00:29:30,960
provide better security for these

658
00:29:27,679 --> 00:29:30,960
server-to-server connections

659
00:29:31,039 --> 00:29:34,399
um and then this this starts to matter

660
00:29:33,679 --> 00:29:37,679
now

661
00:29:34,399 --> 00:29:39,360
uh establishing an implicit tls mode for

662
00:29:37,679 --> 00:29:40,960
these server-to-server connections this

663
00:29:39,360 --> 00:29:42,799
would be challenging like we would have

664
00:29:40,960 --> 00:29:44,480
to change standards that are very well

665
00:29:42,799 --> 00:29:47,600
established and that

666
00:29:44,480 --> 00:29:50,320
have not been changed a lot at all

667
00:29:47,600 --> 00:29:51,199
uh so i don't see that happening anytime

668
00:29:50,320 --> 00:29:53,200
soon that we

669
00:29:51,200 --> 00:29:54,799
we will have a new way to do this server

670
00:29:53,200 --> 00:29:56,640
to server connections

671
00:29:54,799 --> 00:29:58,559
so we'll probably have to lift the star

672
00:29:56,640 --> 00:30:00,240
tls in this situation

673
00:29:58,559 --> 00:30:02,000
but this is something to keep in mind

674
00:30:00,240 --> 00:30:04,720
like if we want to secure

675
00:30:02,000 --> 00:30:05,760
these connections with mta sds or

676
00:30:04,720 --> 00:30:07,520
withdane

677
00:30:05,760 --> 00:30:09,279
then we need to make sure that that we

678
00:30:07,520 --> 00:30:11,039
don't have these buffering bugs

679
00:30:09,279 --> 00:30:13,120
like this because these buffering bugs

680
00:30:11,039 --> 00:30:13,520
could be used to undermine the efforts

681
00:30:13,120 --> 00:30:14,879
to

682
00:30:13,520 --> 00:30:18,559
secure these server to server

683
00:30:14,880 --> 00:30:18,559
connections and

684
00:30:20,880 --> 00:30:27,600
um then um star tls is

685
00:30:24,320 --> 00:30:30,720
also used in other protocols um like

686
00:30:27,600 --> 00:30:32,799
xmpp ftp managed cf which is some kind

687
00:30:30,720 --> 00:30:35,279
of male filtering thing

688
00:30:32,799 --> 00:30:37,520
ldap mysql has something which is not

689
00:30:35,279 --> 00:30:42,399
called star tls but it's the same idea

690
00:30:37,520 --> 00:30:45,039
or nntp and a lot of other protocols

691
00:30:42,399 --> 00:30:47,120
we have not looked at these but i think

692
00:30:45,039 --> 00:30:49,039
it's obvious that similar bugs to the

693
00:30:47,120 --> 00:30:52,158
ones we described can be found in other

694
00:30:49,039 --> 00:30:55,279
protocols we can imagine similar attacks

695
00:30:52,159 --> 00:30:56,960
so this is something that is

696
00:30:55,279 --> 00:30:58,559
there's a lot of potential for further

697
00:30:56,960 --> 00:31:01,200
research here like just

698
00:30:58,559 --> 00:31:04,080
looking at star tls in the context of

699
00:31:01,200 --> 00:31:04,080
other protocols

700
00:31:04,799 --> 00:31:09,120
but still our general recommendation if

701
00:31:07,039 --> 00:31:10,960
you can choose between star tls and an

702
00:31:09,120 --> 00:31:14,239
implicit tls connection which for

703
00:31:10,960 --> 00:31:16,840
example you can in xmpp

704
00:31:14,240 --> 00:31:18,480
then you should use the implicit tls

705
00:31:16,840 --> 00:31:20,399
connection

706
00:31:18,480 --> 00:31:21,919
but it's a very mixed situation like

707
00:31:20,399 --> 00:31:22,799
there are some protocols that have their

708
00:31:21,919 --> 00:31:26,159
own ports

709
00:31:22,799 --> 00:31:27,679
some don't um yeah if you don't have

710
00:31:26,159 --> 00:31:30,559
implicit port then of course you must

711
00:31:27,679 --> 00:31:30,559
use starters

712
00:31:30,880 --> 00:31:35,279
there's some bonus if you avoid star tls

713
00:31:33,919 --> 00:31:37,039
and this is if you look at at

714
00:31:35,279 --> 00:31:40,159
performance issues

715
00:31:37,039 --> 00:31:42,080
um like um

716
00:31:40,159 --> 00:31:43,919
if you have ever tried to send an email

717
00:31:42,080 --> 00:31:46,080
when you have a bad internet connection

718
00:31:43,919 --> 00:31:47,760
like you're on a mobile connection

719
00:31:46,080 --> 00:31:49,678
maybe in germany because mobile

720
00:31:47,760 --> 00:31:51,840
connections in germany are notoriously

721
00:31:49,679 --> 00:31:55,440
badly it's not like in denmark

722
00:31:51,840 --> 00:31:57,120
um then you would like to have that

723
00:31:55,440 --> 00:31:58,840
faster because then your chances are

724
00:31:57,120 --> 00:32:01,918
just higher that it works

725
00:31:58,840 --> 00:32:03,519
um so and i find this interesting

726
00:32:01,919 --> 00:32:06,080
because like a lot of effort has been

727
00:32:03,519 --> 00:32:06,640
put into reducing round trips in tls

728
00:32:06,080 --> 00:32:09,279
that you

729
00:32:06,640 --> 00:32:11,279
need fewer back and forth connections to

730
00:32:09,279 --> 00:32:13,440
establish a tls connection

731
00:32:11,279 --> 00:32:15,440
but it seems nobody has has looked at

732
00:32:13,440 --> 00:32:17,440
how we could improve email protocols to

733
00:32:15,440 --> 00:32:20,880
have fewer round trips

734
00:32:17,440 --> 00:32:22,640
and with star tls this is quite obvious

735
00:32:20,880 --> 00:32:25,360
all the information that we exchanged

736
00:32:22,640 --> 00:32:27,760
before the star tls transition

737
00:32:25,360 --> 00:32:28,719
we basically should ignore because we

738
00:32:27,760 --> 00:32:31,519
cannot trust it

739
00:32:28,720 --> 00:32:33,519
like for example in smtp after we

740
00:32:31,519 --> 00:32:35,919
connect we again send this elo command

741
00:32:33,519 --> 00:32:38,799
and get the server capabilities

742
00:32:35,919 --> 00:32:40,320
so basically everything that happens

743
00:32:38,799 --> 00:32:44,000
before the tls handshake is

744
00:32:40,320 --> 00:32:47,039
wasted data it's not very useful to us

745
00:32:44,000 --> 00:32:48,720
so uh this

746
00:32:47,039 --> 00:32:50,320
kind of leads to the obvious conclusion

747
00:32:48,720 --> 00:32:52,240
that we don't use start tls we have

748
00:32:50,320 --> 00:32:52,960
fewer round trips and that's usually two

749
00:32:52,240 --> 00:32:56,399
to four

750
00:32:52,960 --> 00:32:58,240
round trips less so it's a it's

751
00:32:56,399 --> 00:32:59,918
basically a performance improvement for

752
00:32:58,240 --> 00:33:03,279
free

753
00:32:59,919 --> 00:33:05,440
um so yeah if you avoid start tls it's

754
00:33:03,279 --> 00:33:08,720
just faster

755
00:33:05,440 --> 00:33:10,000
um and there are some more ways to

756
00:33:08,720 --> 00:33:13,360
improve the

757
00:33:10,000 --> 00:33:15,600
round trips in email protocols

758
00:33:13,360 --> 00:33:17,840
there's the authentication in email

759
00:33:15,600 --> 00:33:19,519
protocols uses something which is called

760
00:33:17,840 --> 00:33:21,918
zazzle

761
00:33:19,519 --> 00:33:23,039
like this is a generic authentication

762
00:33:21,919 --> 00:33:26,159
framework

763
00:33:23,039 --> 00:33:27,760
which yeah

764
00:33:26,159 --> 00:33:30,480
yeah which is used by all these three

765
00:33:27,760 --> 00:33:33,919
protocols and also by some others

766
00:33:30,480 --> 00:33:34,880
um and if you look at this this can look

767
00:33:33,919 --> 00:33:37,200
very differently

768
00:33:34,880 --> 00:33:39,200
like this this upper thing here we have

769
00:33:37,200 --> 00:33:41,760
this is now in imap but we have

770
00:33:39,200 --> 00:33:43,039
a authenticate plane and then we have

771
00:33:41,760 --> 00:33:45,279
something which is

772
00:33:43,039 --> 00:33:47,919
basically just a basic d4 encoding of

773
00:33:45,279 --> 00:33:49,840
the username and password

774
00:33:47,919 --> 00:33:51,679
with some zero bytes but it's just

775
00:33:49,840 --> 00:33:53,439
specified in the standard

776
00:33:51,679 --> 00:33:54,880
or we can have this other variation

777
00:33:53,440 --> 00:33:57,360
which is where

778
00:33:54,880 --> 00:33:59,039
we say authenticate login then we get a

779
00:33:57,360 --> 00:34:01,519
username prompt which is

780
00:33:59,039 --> 00:34:04,158
base64 encoded i'm not sure what the

781
00:34:01,519 --> 00:34:06,880
point of this is but that's how this

782
00:34:04,159 --> 00:34:09,280
how this is specified and then we send a

783
00:34:06,880 --> 00:34:11,280
username base64 encoded and then we get

784
00:34:09,280 --> 00:34:12,720
a password prompt basics before encoded

785
00:34:11,280 --> 00:34:14,399
and sent the password so this is three

786
00:34:12,719 --> 00:34:16,399
round trips versus one

787
00:34:14,399 --> 00:34:18,078
so there's quite a bit of potential to

788
00:34:16,399 --> 00:34:21,040
optimize here

789
00:34:18,079 --> 00:34:22,960
uh so one thing here is that imf has a

790
00:34:21,040 --> 00:34:25,520
feature which is called zazzle ir

791
00:34:22,960 --> 00:34:27,440
which basically means you can send this

792
00:34:25,520 --> 00:34:30,239
authenticate command and already send

793
00:34:27,440 --> 00:34:32,399
the authentication data in one line

794
00:34:30,239 --> 00:34:33,839
uh so this is what you have here like

795
00:34:32,399 --> 00:34:35,839
you have this authenticate then the

796
00:34:33,839 --> 00:34:38,159
mechanism and then already the the login

797
00:34:35,839 --> 00:34:42,799
data in one line

798
00:34:38,159 --> 00:34:44,720
um and also zazzle has for for basic

799
00:34:42,800 --> 00:34:46,960
authentication that means like username

800
00:34:44,719 --> 00:34:50,000
password authentication which is

801
00:34:46,960 --> 00:34:54,159
what almost everyone is using it has two

802
00:34:50,000 --> 00:34:56,800
authentication modes uh plane and login

803
00:34:54,159 --> 00:34:57,440
um to make it a bit more complicated

804
00:34:56,800 --> 00:34:59,760
even the

805
00:34:57,440 --> 00:35:01,680
pop3 and imap they both have their own

806
00:34:59,760 --> 00:35:02,160
built-in authentication method which is

807
00:35:01,680 --> 00:35:05,839
not

808
00:35:02,160 --> 00:35:06,799
part of zazzle in imap this works with

809
00:35:05,839 --> 00:35:09,920
one round trip

810
00:35:06,800 --> 00:35:13,200
in pop3 it takes two round trips

811
00:35:09,920 --> 00:35:15,440
um yeah um this

812
00:35:13,200 --> 00:35:16,399
zazzle login mechanism which is the one

813
00:35:15,440 --> 00:35:19,680
with the

814
00:35:16,400 --> 00:35:22,079
username password in separate lines

815
00:35:19,680 --> 00:35:24,319
this is not standardized and it it's

816
00:35:22,079 --> 00:35:28,320
declared as obsolete in the

817
00:35:24,320 --> 00:35:28,320
registry for zazzle by the iana

818
00:35:29,440 --> 00:35:34,320
and we have this plane method which is

819
00:35:31,599 --> 00:35:36,000
uh it's it's standardized in rfc

820
00:35:34,320 --> 00:35:38,800
and it says it sends username and

821
00:35:36,000 --> 00:35:40,160
password in in one line in one base64

822
00:35:38,800 --> 00:35:43,440
encoding

823
00:35:40,160 --> 00:35:45,118
so a plane is standardized and it's

824
00:35:43,440 --> 00:35:48,400
faster than login so

825
00:35:45,119 --> 00:35:50,320
it's this is two advantages

826
00:35:48,400 --> 00:35:52,400
there's not really a point in using this

827
00:35:50,320 --> 00:35:54,720
lock in mechanism

828
00:35:52,400 --> 00:35:56,720
if you look around like almost everyone

829
00:35:54,720 --> 00:35:59,359
supports both

830
00:35:56,720 --> 00:36:01,359
both servers and clients they usually

831
00:35:59,359 --> 00:36:03,200
support plain and login

832
00:36:01,359 --> 00:36:05,200
and there's not really an order to use

833
00:36:03,200 --> 00:36:07,759
them so i figured out okay my

834
00:36:05,200 --> 00:36:10,078
client seems to prefer this slower

835
00:36:07,760 --> 00:36:12,079
non-standardized version

836
00:36:10,079 --> 00:36:13,760
so if i disable it on the server it can

837
00:36:12,079 --> 00:36:15,520
no longer do that and then it becomes

838
00:36:13,760 --> 00:36:17,599
faster

839
00:36:15,520 --> 00:36:20,000
so if you want to have a bit faster

840
00:36:17,599 --> 00:36:22,079
email connections then yeah use implicit

841
00:36:20,000 --> 00:36:24,720
tls and not start tls

842
00:36:22,079 --> 00:36:25,359
i support this sassl ir mechanism in

843
00:36:24,720 --> 00:36:27,759
imap

844
00:36:25,359 --> 00:36:29,920
and disable these as login method and

845
00:36:27,760 --> 00:36:30,720
only support the plane method because

846
00:36:29,920 --> 00:36:35,200
that's

847
00:36:30,720 --> 00:36:38,560
fewer round trips yeah

848
00:36:35,200 --> 00:36:42,078
that was my talk um yeah

849
00:36:38,560 --> 00:36:42,078
i'm open for questions

850
00:36:42,460 --> 00:36:45,639
[Applause]

851
00:36:48,320 --> 00:36:55,839
yeah um

852
00:37:05,040 --> 00:37:09,839
yeah timing

853
00:37:17,119 --> 00:37:22,240
okay no no i mean i mean it's a man in

854
00:37:20,640 --> 00:37:23,920
the middle attack right so you're

855
00:37:22,240 --> 00:37:26,799
waiting for your

856
00:37:23,920 --> 00:37:28,160
for the client to you're doing maybe in

857
00:37:26,800 --> 00:37:30,640
like for example here you could do

858
00:37:28,160 --> 00:37:32,240
up spoofing to for the server that he

859
00:37:30,640 --> 00:37:34,960
connects to and then

860
00:37:32,240 --> 00:37:37,839
when he starts a connection then you're

861
00:37:34,960 --> 00:37:37,839
injecting this stuff

862
00:37:53,520 --> 00:37:58,720
so you're referring to the zero rtt

863
00:37:55,680 --> 00:37:58,720
thing right

864
00:38:00,000 --> 00:38:05,280
i don't really see the similarity but

865
00:38:03,359 --> 00:38:06,640
so his question was if if there's

866
00:38:05,280 --> 00:38:10,560
similar that

867
00:38:06,640 --> 00:38:11,118
he says it feels similar to the ts 1.30

868
00:38:10,560 --> 00:38:14,880
rtt

869
00:38:11,119 --> 00:38:14,880
things yeah

870
00:38:17,280 --> 00:38:21,440
i mean the zero rtt the problem there is

871
00:38:19,520 --> 00:38:24,880
that you can do replay attacks right

872
00:38:21,440 --> 00:38:33,839
where you send the same data again that

873
00:38:24,880 --> 00:38:33,839
has been sent before

874
00:38:40,839 --> 00:38:43,839
okay

