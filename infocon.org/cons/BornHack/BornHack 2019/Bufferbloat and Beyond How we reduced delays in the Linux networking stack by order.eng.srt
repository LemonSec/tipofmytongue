1
00:00:05,480 --> 00:00:08,480
Adam

2
00:06:01,419 --> 00:06:07,840
presenter is toga Highline Johnson and

3
00:06:05,439 --> 00:06:10,790
who's going to talk about buffaloed and

4
00:06:07,840 --> 00:06:13,948
beyond welcome to thank you very much

5
00:06:10,790 --> 00:06:16,389
[Applause]

6
00:06:13,949 --> 00:06:20,500
let's hello everyone thank you for

7
00:06:16,389 --> 00:06:22,389
coming so the title of the talk is

8
00:06:20,500 --> 00:06:25,319
buffer bloat and Beyond and that's

9
00:06:22,389 --> 00:06:28,530
actually also the title of my PhD thesis

10
00:06:25,319 --> 00:06:31,780
so I reused it so that I can reuse these

11
00:06:28,530 --> 00:06:34,059
the template for the slides as well so

12
00:06:31,780 --> 00:06:37,539
I'll talk a little bit about but this is

13
00:06:34,060 --> 00:06:40,330
sort of the the abridged version of the

14
00:06:37,539 --> 00:06:41,770
thesis itself if after this you feel

15
00:06:40,330 --> 00:06:45,188
like you want to know more

16
00:06:41,770 --> 00:06:47,560
I brought books this is the thesis

17
00:06:45,189 --> 00:06:52,599
itself so come and see me its first come

18
00:06:47,560 --> 00:06:55,029
first so if I have five but I'm going to

19
00:06:52,599 --> 00:06:57,009
talk a little bit about buffer bloat

20
00:06:55,029 --> 00:07:00,449
show of hands who have heard this before

21
00:06:57,009 --> 00:07:02,620
who knows what buffer bloat is all right

22
00:07:00,449 --> 00:07:04,930
I'm going to tell you what buffer bloat

23
00:07:02,620 --> 00:07:06,669
is you don't worry we'll get that and

24
00:07:04,930 --> 00:07:09,310
then I'm going to talk about the work

25
00:07:06,669 --> 00:07:12,609
we've done in the Linux kernel to

26
00:07:09,310 --> 00:07:14,080
mitigate this both on wired links and

27
00:07:12,610 --> 00:07:16,870
how you can fix your internet connection

28
00:07:14,080 --> 00:07:19,810
at home and then I'm going to talk about

29
00:07:16,870 --> 00:07:21,960
Wi-Fi as well because who here uses

30
00:07:19,810 --> 00:07:25,599
Wi-Fi and on the show of hands

31
00:07:21,960 --> 00:07:29,318
all right you all awake thank you great

32
00:07:25,599 --> 00:07:31,479
so buffaloed also affect Wi-Fi and we've

33
00:07:29,319 --> 00:07:34,300
done some work in Linux as well to

34
00:07:31,479 --> 00:07:37,000
address this and there's some policy

35
00:07:34,300 --> 00:07:38,589
work and some airtime steering work

36
00:07:37,000 --> 00:07:40,509
that's also gone into the Linux kernel

37
00:07:38,589 --> 00:07:42,819
and I'll give you an overview of where

38
00:07:40,509 --> 00:07:47,099
this work is today and so on and so

39
00:07:42,819 --> 00:07:51,000
forth but first how many of you have

40
00:07:47,099 --> 00:07:51,000
experienced this before

41
00:07:55,779 --> 00:08:06,439
and what do we mean when we say slow

42
00:08:04,009 --> 00:08:08,589
internet and what does this have to do

43
00:08:06,439 --> 00:08:12,979
with Buffalo and how does Buffalo cause

44
00:08:08,589 --> 00:08:15,409
slow internet so usually when we say the

45
00:08:12,979 --> 00:08:17,269
internet is slow today we is it's

46
00:08:15,409 --> 00:08:19,580
because we have to wait for something

47
00:08:17,269 --> 00:08:22,489
it's usually it's usually not because it

48
00:08:19,580 --> 00:08:25,339
takes 47 seconds to download the big

49
00:08:22,489 --> 00:08:27,529
file instead of 44 seconds it's more

50
00:08:25,339 --> 00:08:29,809
sort of I clicked like on Facebook and

51
00:08:27,529 --> 00:08:33,289
it took forever to light up with a

52
00:08:29,809 --> 00:08:34,939
little blue thingy or I'm chatting and I

53
00:08:33,289 --> 00:08:36,500
don't get responses I'm trying to have a

54
00:08:34,938 --> 00:08:38,568
video conversation and everything is

55
00:08:36,500 --> 00:08:40,188
laggy and I can't hear what the other

56
00:08:38,568 --> 00:08:43,789
person is saying so it's all the

57
00:08:40,188 --> 00:08:45,860
interactive work so so it's really not

58
00:08:43,789 --> 00:08:48,050
so much about capacity and bandwidth

59
00:08:45,860 --> 00:08:50,449
it's about latency it's about getting an

60
00:08:48,050 --> 00:08:56,389
immediate response and so buffer bloat

61
00:08:50,449 --> 00:08:59,029
is basically this this up here is a

62
00:08:56,389 --> 00:09:01,029
buffer where as you can see the bubble

63
00:08:59,029 --> 00:09:04,459
net down here is a little bit congested

64
00:09:01,029 --> 00:09:07,819
there's more demand for capacity than

65
00:09:04,459 --> 00:09:10,040
this bottleneck can provide at the

66
00:09:07,819 --> 00:09:12,979
moment so everyone just has to wait

67
00:09:10,040 --> 00:09:18,110
their turn and this happens in networks

68
00:09:12,980 --> 00:09:22,449
as well time the timescales a little bit

69
00:09:18,110 --> 00:09:25,310
different on in a in the network its

70
00:09:22,449 --> 00:09:28,758
milliseconds and seconds where's here I

71
00:09:25,310 --> 00:09:31,758
don't know but it's basically the same

72
00:09:28,759 --> 00:09:35,089
effect you have to queue to resolve this

73
00:09:31,759 --> 00:09:36,800
bottleneck and that turns into latency

74
00:09:35,089 --> 00:09:38,750
that you have to wait for and this

75
00:09:36,800 --> 00:09:43,008
happens wherever there's a bottleneck in

76
00:09:38,750 --> 00:09:45,050
the network most usually on when you

77
00:09:43,009 --> 00:09:47,300
have your home network at home the

78
00:09:45,050 --> 00:09:48,769
bottleneck is actually your router that

79
00:09:47,300 --> 00:09:52,099
connects you to the internet because the

80
00:09:48,769 --> 00:09:53,240
internet connection is slower than what

81
00:09:52,100 --> 00:09:54,529
you have inside the house so that

82
00:09:53,240 --> 00:09:58,220
becomes the bottleneck and then you get

83
00:09:54,529 --> 00:10:00,500
queuing to put it another way and this

84
00:09:58,220 --> 00:10:03,620
is why I have cute

85
00:10:00,500 --> 00:10:05,750
blocky 8-bit animals and it's under the

86
00:10:03,620 --> 00:10:09,040
title of this this is an elephant as you

87
00:10:05,750 --> 00:10:11,140
can all clearly see this this comes from

88
00:10:09,040 --> 00:10:13,329
the term we say we talk about elephant

89
00:10:11,140 --> 00:10:15,130
flows so an elephant elephant flows this

90
00:10:13,330 --> 00:10:18,010
big lumbering down load it's your

91
00:10:15,130 --> 00:10:19,810
BitTorrent connection oh it's your cloud

92
00:10:18,010 --> 00:10:22,150
backup that runs automatically in the

93
00:10:19,810 --> 00:10:24,790
background transverse a lot of data it's

94
00:10:22,150 --> 00:10:27,600
slow but it we get where it's going

95
00:10:24,790 --> 00:10:29,770
eventually it doesn't really matter

96
00:10:27,600 --> 00:10:32,110
latency is not too important for this so

97
00:10:29,770 --> 00:10:34,090
as I said like if it's a few seconds to

98
00:10:32,110 --> 00:10:35,980
download your file it's probably not

99
00:10:34,090 --> 00:10:38,950
such a big deal but we also have mice

100
00:10:35,980 --> 00:10:40,840
and the mice is all the interactive

101
00:10:38,950 --> 00:10:41,680
stuff that your DNS lookups its your

102
00:10:40,840 --> 00:10:44,770
ping packets

103
00:10:41,680 --> 00:10:46,569
it's your VoIP flow it's your SSH

104
00:10:44,770 --> 00:10:48,100
interactive connection it's all the

105
00:10:46,570 --> 00:10:51,400
stuff that you actually care about as a

106
00:10:48,100 --> 00:10:53,500
user when you are when you're using the

107
00:10:51,400 --> 00:10:56,770
Internet and as you can see here this is

108
00:10:53,500 --> 00:10:58,480
the information superhighway and then

109
00:10:56,770 --> 00:11:00,790
the elephant this is there's only a

110
00:10:58,480 --> 00:11:03,730
single lane so the elephant is blocking

111
00:11:00,790 --> 00:11:06,730
the path and the mice has to wait behind

112
00:11:03,730 --> 00:11:08,890
him and they get really annoyed so what

113
00:11:06,730 --> 00:11:11,200
can we do to this about this well

114
00:11:08,890 --> 00:11:13,630
fortunately we have our our friendly

115
00:11:11,200 --> 00:11:17,320
penguin probably seen him before it

116
00:11:13,630 --> 00:11:18,550
sucks the Linux mascot so as I said most

117
00:11:17,320 --> 00:11:22,480
of the work I've been doing I've been

118
00:11:18,550 --> 00:11:25,209
doing with Linux so what we can do is we

119
00:11:22,480 --> 00:11:27,610
can get Linux installed in the router

120
00:11:25,210 --> 00:11:31,390
that has the bottleneck and we can make

121
00:11:27,610 --> 00:11:33,280
sure that we apply we do something

122
00:11:31,390 --> 00:11:34,720
smaller than just having this single

123
00:11:33,280 --> 00:11:37,780
connection and then we get something

124
00:11:34,720 --> 00:11:39,610
like this where the penguin stands here

125
00:11:37,780 --> 00:11:41,290
at the bottleneck and guides the mice

126
00:11:39,610 --> 00:11:45,430
around the elephant so they don't have

127
00:11:41,290 --> 00:11:47,290
to wait I get back to what this actually

128
00:11:45,430 --> 00:11:49,989
means in terms of algorithms and so on I

129
00:11:47,290 --> 00:11:52,719
mean first this is the basic concept of

130
00:11:49,990 --> 00:11:55,150
buffer bloat and why it's bad and what

131
00:11:52,720 --> 00:11:58,560
we need to do about it to turn this into

132
00:11:55,150 --> 00:12:01,689
numbers this is a graph from a test tool

133
00:11:58,560 --> 00:12:05,979
that I wrote while I was trying to look

134
00:12:01,690 --> 00:12:09,040
at this what you see here is the latency

135
00:12:05,980 --> 00:12:10,900
of it's a pain flow basically between

136
00:12:09,040 --> 00:12:12,339
two endpoints that are like back-to-back

137
00:12:10,900 --> 00:12:14,110
Ethernet connected so the baseline

138
00:12:12,340 --> 00:12:16,000
latency is basically zero a few

139
00:12:14,110 --> 00:12:18,970
milliseconds or like point something

140
00:12:16,000 --> 00:12:21,610
milliseconds and then after five seconds

141
00:12:18,970 --> 00:12:22,480
we start up a big TCP download the

142
00:12:21,610 --> 00:12:24,579
elephant flow

143
00:12:22,480 --> 00:12:26,800
and then you can see what happens is

144
00:12:24,579 --> 00:12:28,209
that our ping flow and the different

145
00:12:26,800 --> 00:12:31,149
colors are different ping flows we have

146
00:12:28,209 --> 00:12:33,430
UDP ping close we have ICMP ping close

147
00:12:31,149 --> 00:12:38,110
all this and stuff the latency climbs up

148
00:12:33,430 --> 00:12:40,060
to 800 milliseconds so the these are the

149
00:12:38,110 --> 00:12:41,019
the default settings in Linux before we

150
00:12:40,060 --> 00:12:43,540
started fixing this

151
00:12:41,019 --> 00:12:46,930
so it's 5oq of a thousand packets and

152
00:12:43,540 --> 00:12:50,019
that translates to in this instance 800

153
00:12:46,930 --> 00:12:52,779
milliseconds of delay because I think

154
00:12:50,019 --> 00:12:54,519
it's like 20 megabit per second

155
00:12:52,779 --> 00:12:57,100
connection or something I forget the

156
00:12:54,519 --> 00:12:59,190
numbers and but this is a lot to wait

157
00:12:57,100 --> 00:13:03,430
for every packet that has to go through

158
00:12:59,190 --> 00:13:06,420
and that's really noticeable as delay

159
00:13:03,430 --> 00:13:09,790
and it completely kills your pipe

160
00:13:06,420 --> 00:13:12,399
so what can we do about this this is a

161
00:13:09,790 --> 00:13:16,510
figure from a paper written by van

162
00:13:12,399 --> 00:13:21,279
jacobson back in around year 2000 I

163
00:13:16,510 --> 00:13:23,709
think and he used this illustration to

164
00:13:21,279 --> 00:13:25,720
illustrate a servo system so the way the

165
00:13:23,709 --> 00:13:28,839
internet works a lot of the traffic is

166
00:13:25,720 --> 00:13:30,639
run over TCP or these days quick but

167
00:13:28,839 --> 00:13:33,480
that doesn't mean similar so for these

168
00:13:30,639 --> 00:13:38,560
purposes it's about the same so TCP is a

169
00:13:33,480 --> 00:13:40,449
feedback system where the sender will

170
00:13:38,560 --> 00:13:42,939
send that data listen for the response

171
00:13:40,449 --> 00:13:44,979
and it will do retransmits if something

172
00:13:42,940 --> 00:13:46,959
is lost and try to adjust its rate to

173
00:13:44,980 --> 00:13:48,550
the actual capacity of the Internet we

174
00:13:46,959 --> 00:13:49,660
do this because when we start sending

175
00:13:48,550 --> 00:13:51,069
packets over the internet we don't

176
00:13:49,660 --> 00:13:52,600
actually know anything about the

177
00:13:51,069 --> 00:13:59,199
available capacities we have to probe

178
00:13:52,600 --> 00:14:01,089
and so so a TCP flow becomes a servo

179
00:13:59,199 --> 00:14:03,870
system that tries to adjust itself to

180
00:14:01,089 --> 00:14:06,639
the available capacity and that sort of

181
00:14:03,870 --> 00:14:08,290
this was just an illustration and

182
00:14:06,639 --> 00:14:10,329
actually the paper was rejected because

183
00:14:08,290 --> 00:14:11,980
some of the reviewers got offended that

184
00:14:10,329 --> 00:14:15,729
someone would put a picture of a toilet

185
00:14:11,980 --> 00:14:18,970
into a scientific paper so never got

186
00:14:15,730 --> 00:14:21,220
published and that's part of the reason

187
00:14:18,970 --> 00:14:26,139
why we still have this problem well five

188
00:14:21,220 --> 00:14:29,649
years ago now but this servo system

189
00:14:26,139 --> 00:14:32,350
means that TCP reacts to true losses on

190
00:14:29,649 --> 00:14:34,449
the path and say ok a packet loss that's

191
00:14:32,350 --> 00:14:36,250
probably because I exceeded the

192
00:14:34,449 --> 00:14:39,209
available capacity so I have to slow

193
00:14:36,250 --> 00:14:42,130
down and if there's a lot a large buffer

194
00:14:39,210 --> 00:14:44,440
a cue and the in the internet of a

195
00:14:42,130 --> 00:14:45,760
thousand packets packets are learned to

196
00:14:44,440 --> 00:14:47,800
get delayed they're not going to get

197
00:14:45,760 --> 00:14:49,300
lost so TCP is going to keep sending and

198
00:14:47,800 --> 00:14:51,790
it's going to keep increasing its rate

199
00:14:49,300 --> 00:14:53,410
and exponentially until it does overflow

200
00:14:51,790 --> 00:14:54,640
at which point we're back to the 800

201
00:14:53,410 --> 00:14:56,890
milliseconds of delay we solved before

202
00:14:54,640 --> 00:15:00,790
so what we can do instead is we can do

203
00:14:56,890 --> 00:15:03,490
this thing that's called H um so h qm is

204
00:15:00,790 --> 00:15:04,839
short for active queue management which

205
00:15:03,490 --> 00:15:06,280
means instead of just having a tool as

206
00:15:04,840 --> 00:15:08,830
actively managed didn't do something

207
00:15:06,280 --> 00:15:10,600
about what happens so cuddle is a new

208
00:15:08,830 --> 00:15:13,090
algorithm that van jacobson also

209
00:15:10,600 --> 00:15:15,940
developed along with his wife Kathy

210
00:15:13,090 --> 00:15:19,030
Mitchell's and it's quite simple this is

211
00:15:15,940 --> 00:15:21,400
actually all of it this is the queue

212
00:15:19,030 --> 00:15:23,740
it's K packets long it can be as long as

213
00:15:21,400 --> 00:15:26,020
you like actually because as you'll see

214
00:15:23,740 --> 00:15:27,700
it will rarely get filled up so what

215
00:15:26,020 --> 00:15:29,500
what we do is a packet the blue things

216
00:15:27,700 --> 00:15:31,840
here packets when a packet comes in with

217
00:15:29,500 --> 00:15:34,210
time stamp it and then it goes into the

218
00:15:31,840 --> 00:15:35,920
queue and we just DQ packets at the rate

219
00:15:34,210 --> 00:15:38,470
that the link can service and every time

220
00:15:35,920 --> 00:15:40,870
we did you a packet we say the timestamp

221
00:15:38,470 --> 00:15:42,910
of the packet how long ago was that is

222
00:15:40,870 --> 00:15:45,250
that more than 5 milliseconds ago well

223
00:15:42,910 --> 00:15:48,160
then we started building a queue and we

224
00:15:45,250 --> 00:15:49,810
don't want that so after 5 milliseconds

225
00:15:48,160 --> 00:15:53,949
we say okay now we have a queue then we

226
00:15:49,810 --> 00:15:56,229
drop a packet so we don't do this

227
00:15:53,950 --> 00:15:57,970
immediately we wait for one RTG we wait

228
00:15:56,230 --> 00:15:59,470
at 100 milliseconds is it is it just

229
00:15:57,970 --> 00:16:01,120
like it was just a queue that arrived

230
00:15:59,470 --> 00:16:02,470
and then it immediately drained a gun

231
00:16:01,120 --> 00:16:04,690
because there was a transient spike

232
00:16:02,470 --> 00:16:08,140
that's fine this is what queues of four

233
00:16:04,690 --> 00:16:10,000
but if it stays there for too long then

234
00:16:08,140 --> 00:16:12,520
becomes a bad cute so standing here and

235
00:16:10,000 --> 00:16:14,200
it just adds delay so if after hundred

236
00:16:12,520 --> 00:16:16,300
milliseconds we still have more than 5

237
00:16:14,200 --> 00:16:19,900
milliseconds of delay we will drop one

238
00:16:16,300 --> 00:16:21,219
packet just a single one and then we

239
00:16:19,900 --> 00:16:24,910
wait another hundred milliseconds

240
00:16:21,220 --> 00:16:27,430
because the drop signal then has to has

241
00:16:24,910 --> 00:16:29,949
to travel all the way to the receiver of

242
00:16:27,430 --> 00:16:32,859
the TCP connection which then sends back

243
00:16:29,950 --> 00:16:34,240
due back to the TCP sender saying this

244
00:16:32,860 --> 00:16:35,680
packet is missing and then the sender

245
00:16:34,240 --> 00:16:38,470
slows down and then the queue will drain

246
00:16:35,680 --> 00:16:39,699
and this tapes around an RTT because the

247
00:16:38,470 --> 00:16:43,330
system has to go all the way around so

248
00:16:39,700 --> 00:16:44,890
hopefully this works after one RTT which

249
00:16:43,330 --> 00:16:47,050
would just pretend that's hundred

250
00:16:44,890 --> 00:16:49,510
milliseconds because we'll soon I'll get

251
00:16:47,050 --> 00:16:51,010
that then hop

252
00:16:49,510 --> 00:16:52,420
the true will drain and we're fine and

253
00:16:51,010 --> 00:16:55,660
we can keep the cheer a very low level

254
00:16:52,420 --> 00:16:57,219
but sometimes it's not enough so if

255
00:16:55,660 --> 00:16:58,569
after 100 milliseconds we drop the

256
00:16:57,220 --> 00:17:00,850
packet nothing happens we drop another

257
00:16:58,570 --> 00:17:02,740
one and we have a counter of how many

258
00:17:00,850 --> 00:17:04,449
packets we dropped and we keep

259
00:17:02,740 --> 00:17:06,069
increasing this and we so by the

260
00:17:04,449 --> 00:17:07,959
interval that would take between drops

261
00:17:06,069 --> 00:17:09,458
by lift counters and the more packets

262
00:17:07,959 --> 00:17:11,589
drop the more frequently we start

263
00:17:09,459 --> 00:17:14,560
dropping packets until eventually we

264
00:17:11,589 --> 00:17:17,198
find the reality and the real rate that

265
00:17:14,560 --> 00:17:18,609
we need to draw packets at to keep TCP

266
00:17:17,199 --> 00:17:21,100
sort of adjusting it will keep adjusting

267
00:17:18,609 --> 00:17:23,530
its rate up now and this turns the

268
00:17:21,099 --> 00:17:26,589
feedback loop that into a well-tuned

269
00:17:23,530 --> 00:17:29,379
machine that thou will oscillate around

270
00:17:26,589 --> 00:17:31,950
the bottleneck capacity which is good so

271
00:17:29,380 --> 00:17:36,220
now we can utilize our link and we can

272
00:17:31,950 --> 00:17:39,130
we can get low delay in the queue so

273
00:17:36,220 --> 00:17:42,070
this works fairly well kotl itself will

274
00:17:39,130 --> 00:17:45,190
get you down to stead of 800

275
00:17:42,070 --> 00:17:47,500
milliseconds you can get down to 10 20

276
00:17:45,190 --> 00:17:49,990
depending on how many flows you have and

277
00:17:47,500 --> 00:17:54,160
so on but we can do another thing as

278
00:17:49,990 --> 00:17:56,320
well we can do finish queuing so this is

279
00:17:54,160 --> 00:17:59,470
sfq that's been in linux fibre

280
00:17:56,320 --> 00:18:03,280
i think paul McKenney came up with this

281
00:17:59,470 --> 00:18:05,620
also back in the 90s at some point so

282
00:18:03,280 --> 00:18:07,090
the idea is we get in the packets here

283
00:18:05,620 --> 00:18:09,760
the different colors are different flows

284
00:18:07,090 --> 00:18:12,399
so a flow is like a hash and the 5 tuple

285
00:18:09,760 --> 00:18:14,860
so source and destination IP source and

286
00:18:12,400 --> 00:18:16,660
destination port and the IP protocol

287
00:18:14,860 --> 00:18:17,050
number so tcp and UDP are two different

288
00:18:16,660 --> 00:18:19,900
things

289
00:18:17,050 --> 00:18:21,580
we hash them and then we give each flow

290
00:18:19,900 --> 00:18:22,200
like the different colors now get that

291
00:18:21,580 --> 00:18:24,669
one cue

292
00:18:22,200 --> 00:18:26,950
so this and then we just do round-robin

293
00:18:24,670 --> 00:18:30,310
D queuing so we get one packet for each

294
00:18:26,950 --> 00:18:32,290
flow at a time and then we go on so this

295
00:18:30,310 --> 00:18:36,310
means even though this guy has a much

296
00:18:32,290 --> 00:18:38,889
longer queue than this guy over here if

297
00:18:36,310 --> 00:18:40,870
they were all in the same queue or these

298
00:18:38,890 --> 00:18:42,580
two packets will have to wait for all 5

299
00:18:40,870 --> 00:18:45,580
packets of this flow but now it only has

300
00:18:42,580 --> 00:18:47,860
to wait for one packet from each flow so

301
00:18:45,580 --> 00:18:49,510
that means each flow will get its fair

302
00:18:47,860 --> 00:18:53,139
share and if one builds are really long

303
00:18:49,510 --> 00:18:54,250
queue that only affects itself it

304
00:18:53,140 --> 00:18:55,810
doesn't affect the other flows so much

305
00:18:54,250 --> 00:18:58,390
and let me just do the the kernel thing

306
00:18:55,810 --> 00:19:00,909
we did before we then apply individually

307
00:18:58,390 --> 00:19:02,320
to each queue so if this this flow only

308
00:19:00,910 --> 00:19:04,960
has two packets and probably

309
00:19:02,320 --> 00:19:06,668
not be 5 milliseconds but this if this

310
00:19:04,960 --> 00:19:11,230
flow has a lot of packets it will hit

311
00:19:06,669 --> 00:19:13,389
the 5 millisecond target of cuddle and

312
00:19:11,230 --> 00:19:15,009
it will get a drop and then that would

313
00:19:13,389 --> 00:19:18,370
be the signal to Sheila Rams who can

314
00:19:15,009 --> 00:19:22,779
actually more accurately target the flow

315
00:19:18,370 --> 00:19:26,768
that we want that's the basic panic Jing

316
00:19:22,779 --> 00:19:29,409
and then the algorithm that we actually

317
00:19:26,769 --> 00:19:30,940
use now which is it's not the default in

318
00:19:29,409 --> 00:19:32,259
most Linux distributions so if you have

319
00:19:30,940 --> 00:19:32,679
a Linux server you're probably running

320
00:19:32,259 --> 00:19:35,740
it

321
00:19:32,679 --> 00:19:39,190
it's called FQ Karl it's a two-disc that

322
00:19:35,740 --> 00:19:42,009
you install in the Linux system it does

323
00:19:39,190 --> 00:19:44,529
the same thing as SF q but it adds an

324
00:19:42,009 --> 00:19:47,379
additional mechanism which is called the

325
00:19:44,529 --> 00:19:48,879
sparse flow optimization so we do the

326
00:19:47,379 --> 00:19:50,769
hashing from before we have all the

327
00:19:48,879 --> 00:19:55,740
different flows we hash into different

328
00:19:50,769 --> 00:20:00,039
hash buckets which each gets Q and then

329
00:19:55,740 --> 00:20:01,929
once a new flow comes in arrival here

330
00:20:00,039 --> 00:20:02,379
new packet comes in we hash we find it

331
00:20:01,929 --> 00:20:05,649
to you

332
00:20:02,379 --> 00:20:06,939
this becomes new so it's a new flow we

333
00:20:05,649 --> 00:20:10,000
don't have state for it we don't have a

334
00:20:06,940 --> 00:20:14,440
queue with packets in it then once it

335
00:20:10,000 --> 00:20:16,419
gets DQ'd once we DQ a packet from this

336
00:20:14,440 --> 00:20:19,450
either the pair was only this one packet

337
00:20:16,419 --> 00:20:21,970
and it gets exhausted all it uses are

338
00:20:19,450 --> 00:20:23,590
Polish credit so it goes want one time

339
00:20:21,970 --> 00:20:26,049
through the round-robin mechanism it

340
00:20:23,590 --> 00:20:28,559
goes out to old and then it just stays

341
00:20:26,049 --> 00:20:31,929
here until it empties out and comes back

342
00:20:28,559 --> 00:20:35,049
so that means we can keep track of flows

343
00:20:31,929 --> 00:20:39,370
that we've only recently seen that means

344
00:20:35,049 --> 00:20:41,470
flows that send a low rate and then what

345
00:20:39,370 --> 00:20:44,709
we do is we simply give the new flows

346
00:20:41,470 --> 00:20:46,000
priority over the old flows in the

347
00:20:44,710 --> 00:20:48,220
different like all the different queues

348
00:20:46,000 --> 00:20:50,289
so these queues or the new choose get

349
00:20:48,220 --> 00:20:52,659
DQ'd first so that means new packet

350
00:20:50,289 --> 00:20:56,019
comes in this could be for example your

351
00:20:52,659 --> 00:20:58,240
DNS request that you want to answer give

352
00:20:56,019 --> 00:20:59,350
a quick answer to because then you're

353
00:20:58,240 --> 00:21:01,059
going to do something else it can also

354
00:20:59,350 --> 00:21:03,250
be a void packet pictures that just not

355
00:21:01,059 --> 00:21:04,539
using a lot of bandwidth actually your

356
00:21:03,250 --> 00:21:06,759
gaming packet all these kinds of things

357
00:21:04,539 --> 00:21:08,740
it'll come in it'll get priority it

358
00:21:06,759 --> 00:21:12,159
would go out and we'll have zero latency

359
00:21:08,740 --> 00:21:15,789
and I'll show you graphs of this

360
00:21:12,159 --> 00:21:18,929
afterwards so this is it's actually like

361
00:21:15,789 --> 00:21:21,460
five ten lines of code to do this and

362
00:21:18,929 --> 00:21:23,559
this just means that you magically

363
00:21:21,460 --> 00:21:24,489
prioritize all the traffic that is

364
00:21:23,559 --> 00:21:26,440
latency-sensitive

365
00:21:24,489 --> 00:21:27,999
there's no QoS there's no diff server

366
00:21:26,440 --> 00:21:31,239
there's no markings there's no policy

367
00:21:27,999 --> 00:21:35,019
it's just ten lines of code in the

368
00:21:31,239 --> 00:21:39,039
purest and this gives amazing results so

369
00:21:35,019 --> 00:21:40,809
these are the results this is a bit of

370
00:21:39,039 --> 00:21:45,309
an unusual diagram so I'll explain a

371
00:21:40,809 --> 00:21:47,019
little bit this is the Grippit of that

372
00:21:45,309 --> 00:21:49,869
the flow gets in megabits per second

373
00:21:47,019 --> 00:21:52,359
this is a 10 megabit per second link so

374
00:21:49,869 --> 00:21:54,908
- headers and so on this is about the

375
00:21:52,359 --> 00:21:57,639
rate and then this is the induced

376
00:21:54,909 --> 00:22:01,840
latency so the additional latency over

377
00:21:57,639 --> 00:22:05,199
the baseline of this experiment and so

378
00:22:01,840 --> 00:22:07,359
each dot is the median value for the DIF

379
00:22:05,200 --> 00:22:09,429
all the different queuing algorithms

380
00:22:07,359 --> 00:22:12,428
that we used and on the size of the

381
00:22:09,429 --> 00:22:15,190
ellipse is a measure of the variance of

382
00:22:12,429 --> 00:22:17,200
the of the measurements and so FIFO

383
00:22:15,190 --> 00:22:19,960
faster yeah that's the FIFO queue the

384
00:22:17,200 --> 00:22:21,609
default linux period before we start

385
00:22:19,960 --> 00:22:23,710
doing this it's actually a limited

386
00:22:21,609 --> 00:22:25,658
version the default FIFO fast has a

387
00:22:23,710 --> 00:22:26,769
thousand packet queue we do have to

388
00:22:25,659 --> 00:22:30,220
limit it because otherwise it would be

389
00:22:26,769 --> 00:22:32,679
like out here or where I'm standing so

390
00:22:30,220 --> 00:22:34,720
this is like it'll be ten times worse if

391
00:22:32,679 --> 00:22:36,729
it was the default thousand Patrick cube

392
00:22:34,720 --> 00:22:38,979
but still it's quite bad it's like 100

393
00:22:36,729 --> 00:22:42,369
milliseconds of latency this is just

394
00:22:38,979 --> 00:22:45,669
Karl I explained before PI in a rate at

395
00:22:42,369 --> 00:22:47,228
two different ATMs that sort of similar

396
00:22:45,669 --> 00:22:49,059
to what cuddlers just a different

397
00:22:47,229 --> 00:22:52,229
mechanism and then up here we have all

398
00:22:49,059 --> 00:22:55,119
the queuing the F the fan is curing so

399
00:22:52,229 --> 00:22:56,950
sfq is out here so that that in itself

400
00:22:55,119 --> 00:22:59,738
just round robin gives quite a lot of

401
00:22:56,950 --> 00:23:01,210
benefit to the to the pink low and then

402
00:22:59,739 --> 00:23:03,070
F Q total has this power station

403
00:23:01,210 --> 00:23:05,080
optimization that I just explained and

404
00:23:03,070 --> 00:23:07,539
now we get down to it it's basically

405
00:23:05,080 --> 00:23:11,220
hitting the math units you cannot see

406
00:23:07,539 --> 00:23:11,220
that the danvers here

407
00:23:14,030 --> 00:23:23,350
and FQ Carl went into Linux

408
00:23:19,270 --> 00:23:26,420
3.12 so it's been left quite a while

409
00:23:23,350 --> 00:23:29,510
it's become the default system D change

410
00:23:26,420 --> 00:23:32,000
the defaults in there and the CTL space

411
00:23:29,510 --> 00:23:33,800
that they switch open wrt the router

412
00:23:32,000 --> 00:23:38,030
distribution has had it as a default for

413
00:23:33,800 --> 00:23:40,159
years now so when you turn this on it

414
00:23:38,030 --> 00:23:43,520
just sort of works and you will get no

415
00:23:40,160 --> 00:23:47,530
latency almost so there's a few caveats

416
00:23:43,520 --> 00:23:47,530
I'll get to those thank you

417
00:23:47,980 --> 00:23:54,680
we then did a piece of cake so we we did

418
00:23:51,560 --> 00:23:57,050
a another key risk that's called cake

419
00:23:54,680 --> 00:23:59,570
which does the same thing as fq coddle

420
00:23:57,050 --> 00:24:01,340
but then it adds a few other things one

421
00:23:59,570 --> 00:24:03,590
thing is traffic shaping I'll come back

422
00:24:01,340 --> 00:24:08,540
to why that is important when it does

423
00:24:03,590 --> 00:24:10,580
host-based Fanus so the F the F cube

424
00:24:08,540 --> 00:24:11,930
whole thing gives you an a different

425
00:24:10,580 --> 00:24:14,210
view for each flow which also means that

426
00:24:11,930 --> 00:24:15,770
all flows will get the same bandwidth so

427
00:24:14,210 --> 00:24:17,810
if you open up ten flows you'll get 10

428
00:24:15,770 --> 00:24:19,160
times as much bandwidth and depending on

429
00:24:17,810 --> 00:24:21,050
your network that may or may not be a

430
00:24:19,160 --> 00:24:22,430
great thing so if if at your home maybe

431
00:24:21,050 --> 00:24:24,860
you want to limit the different devices

432
00:24:22,430 --> 00:24:27,470
to get the same thing and with cake you

433
00:24:24,860 --> 00:24:30,080
can do this so this is just peripheral

434
00:24:27,470 --> 00:24:32,120
and you can say all the different

435
00:24:30,080 --> 00:24:37,790
destinations should get the same so the

436
00:24:32,120 --> 00:24:39,830
3 the 3 C flows gets gets the same share

437
00:24:37,790 --> 00:24:41,629
as each of these other flows and you can

438
00:24:39,830 --> 00:24:43,100
limit by source your limit by both and

439
00:24:41,630 --> 00:24:46,160
if you Carla's over here it's the same

440
00:24:43,100 --> 00:24:48,110
just venice flow then we added diffserv

441
00:24:46,160 --> 00:24:49,880
handling and cake as well so there's a

442
00:24:48,110 --> 00:24:51,949
reasonable implementation of

443
00:24:49,880 --> 00:24:54,740
privatization based on diffserv markings

444
00:24:51,950 --> 00:24:58,880
and there's act filtering because if you

445
00:24:54,740 --> 00:25:01,250
have a if you have a really asymmetrical

446
00:24:58,880 --> 00:25:02,810
link you can actually get to the point

447
00:25:01,250 --> 00:25:04,940
where you cannot use your downstream

448
00:25:02,810 --> 00:25:08,629
bandwidth because all the TCP acts that

449
00:25:04,940 --> 00:25:10,100
coming back in the other direction do

450
00:25:08,630 --> 00:25:13,070
not fit through Europe and I think this

451
00:25:10,100 --> 00:25:15,800
happens around the ratio of 20 to 1

452
00:25:13,070 --> 00:25:17,659
so if you have a point amount of it down

453
00:25:15,800 --> 00:25:19,730
one megabit up you cannot use 20

454
00:25:17,660 --> 00:25:21,740
megabits with a TCP flow at all it's

455
00:25:19,730 --> 00:25:24,080
impossible due to the way TCP works but

456
00:25:21,740 --> 00:25:26,340
we can filter these arcs and that means

457
00:25:24,080 --> 00:25:28,449
we can actually use this

458
00:25:26,340 --> 00:25:31,120
there's more details in the book if you

459
00:25:28,450 --> 00:25:33,490
want lease but the reason I said that

460
00:25:31,120 --> 00:25:34,959
traffic shaping is important is because

461
00:25:33,490 --> 00:25:39,550
we have this feature called byte queue

462
00:25:34,960 --> 00:25:42,130
limits so unfortunately the Linux kernel

463
00:25:39,550 --> 00:25:44,889
is a complex beast as our all systems

464
00:25:42,130 --> 00:25:48,820
and there will be queues at different

465
00:25:44,890 --> 00:25:50,350
layers so we have the cutest layer which

466
00:25:48,820 --> 00:25:51,520
is where we can install all the smart

467
00:25:50,350 --> 00:25:57,310
handling which is nice

468
00:25:51,520 --> 00:26:00,490
oh I love the weather here but there's

469
00:25:57,310 --> 00:26:02,409
also different shoes so we want the can

470
00:26:00,490 --> 00:26:03,490
you still hear me over the rain all

471
00:26:02,410 --> 00:26:05,980
right great

472
00:26:03,490 --> 00:26:08,050
so we want to have be able to install

473
00:26:05,980 --> 00:26:09,640
when we install a cue list we wanted to

474
00:26:08,050 --> 00:26:13,060
actually manage the real bottleneck

475
00:26:09,640 --> 00:26:15,760
queue so we want to limit the queuing in

476
00:26:13,060 --> 00:26:16,990
the lower layers and there's another

477
00:26:15,760 --> 00:26:22,870
layer there's another queue in the

478
00:26:16,990 --> 00:26:24,640
hardware as well so so for Ethernet we

479
00:26:22,870 --> 00:26:28,239
have this thing called byte queue limits

480
00:26:24,640 --> 00:26:29,950
which is enabled in most drivers so what

481
00:26:28,240 --> 00:26:33,880
that does is it sort of dynamically

482
00:26:29,950 --> 00:26:34,810
keeps the queue in the hardware as small

483
00:26:33,880 --> 00:26:37,150
as possible

484
00:26:34,810 --> 00:26:41,080
so that the hardware doesn't starve it's

485
00:26:37,150 --> 00:26:43,270
fairly simple the sort of increases or

486
00:26:41,080 --> 00:26:45,100
decreases until the hardware staffs and

487
00:26:43,270 --> 00:26:48,820
then increases a little bit and it would

488
00:26:45,100 --> 00:26:51,280
keep the the queues small so that we can

489
00:26:48,820 --> 00:26:55,600
control it and have the actual oh my

490
00:26:51,280 --> 00:26:56,770
goodness queue in the cutest player it's

491
00:26:55,600 --> 00:27:00,580
a pretty small patch if you have a

492
00:26:56,770 --> 00:27:03,310
driver do it but other technologies such

493
00:27:00,580 --> 00:27:05,980
as Piersall and so on do not have this

494
00:27:03,310 --> 00:27:08,550
generally so your DSL modem that you get

495
00:27:05,980 --> 00:27:11,350
from you is pee or if you are an ISP

496
00:27:08,550 --> 00:27:13,629
which I know some of you are you buy it

497
00:27:11,350 --> 00:27:15,280
you buy diesel luta and then the DSL

498
00:27:13,630 --> 00:27:17,460
connection doesn't have this so just

499
00:27:15,280 --> 00:27:20,379
turning on if to Kabul is not enough and

500
00:27:17,460 --> 00:27:22,150
so the real fixes to go and facia driver

501
00:27:20,380 --> 00:27:25,330
but this is not always possible because

502
00:27:22,150 --> 00:27:26,810
you can have propriety of my I've not

503
00:27:25,330 --> 00:27:31,010
provides you drivers

504
00:27:26,810 --> 00:27:35,240
I don't have a clue so what we do it

505
00:27:31,010 --> 00:27:39,440
with take is we can do a shaper a

506
00:27:35,240 --> 00:27:41,570
software shaper in the in the cutest

507
00:27:39,440 --> 00:27:43,460
where you just tell it what is the

508
00:27:41,570 --> 00:27:48,590
actual weight of the underlying link and

509
00:27:43,460 --> 00:27:50,330
then we shape the capacity of we paste

510
00:27:48,590 --> 00:27:51,919
our packets so that we never hit this

511
00:27:50,330 --> 00:27:53,960
rate and that means there will never be

512
00:27:51,920 --> 00:27:57,490
a queuing and where we can achieve it

513
00:27:53,960 --> 00:27:57,490
where we can control into that and

514
00:27:57,700 --> 00:28:02,810
having that inside cake means it's a lot

515
00:28:00,950 --> 00:28:07,910
simpler inside one line of conflict to

516
00:28:02,810 --> 00:28:16,010
turn it on right Wi-Fi how many remember

517
00:28:07,910 --> 00:28:17,600
these also so this was the first I'm not

518
00:28:16,010 --> 00:28:27,650
sure this is actually the first edition

519
00:28:17,600 --> 00:28:31,280
but this model the Linksys wrt54g and

520
00:28:27,650 --> 00:28:34,190
then there was when they did this they

521
00:28:31,280 --> 00:28:36,680
were not really aware of the GPL or

522
00:28:34,190 --> 00:28:40,280
maybe they were no no they didn't really

523
00:28:36,680 --> 00:28:42,470
source code but there was lawyers got

524
00:28:40,280 --> 00:28:46,129
involved there was a lot of legal action

525
00:28:42,470 --> 00:28:48,140
and eventually they were convinced to

526
00:28:46,130 --> 00:28:49,520
release the soft code

527
00:28:48,140 --> 00:28:51,410
it was just lot of a source code done

528
00:28:49,520 --> 00:28:53,420
there was no criminal thing but people

529
00:28:51,410 --> 00:28:54,830
ran with us and that's what we have now

530
00:28:53,420 --> 00:28:57,500
in open wrt

531
00:28:54,830 --> 00:28:58,970
and that has gotten so popular it's so

532
00:28:57,500 --> 00:29:00,530
good that probably all of your home

533
00:28:58,970 --> 00:29:04,190
routers are running Linux in one form or

534
00:29:00,530 --> 00:29:06,020
another so if you're not doing what

535
00:29:04,190 --> 00:29:07,370
we're doing at this conference as far as

536
00:29:06,020 --> 00:29:09,710
I can tell like running enterprise

537
00:29:07,370 --> 00:29:12,439
access points all the consumer stuff is

538
00:29:09,710 --> 00:29:15,950
probably running Linux so that means we

539
00:29:12,440 --> 00:29:17,840
can also go and poke at Wi-Fi and if we

540
00:29:15,950 --> 00:29:19,670
go back to the same graph I have before

541
00:29:17,840 --> 00:29:22,939
but this time it's over Wi-Fi bottleneck

542
00:29:19,670 --> 00:29:25,400
so once your internet connection gets

543
00:29:22,940 --> 00:29:27,440
above 50 100 megabits depending on

544
00:29:25,400 --> 00:29:29,900
conditions in your home the Wi-Fi link

545
00:29:27,440 --> 00:29:32,090
starts becoming the bottleneck and lo

546
00:29:29,900 --> 00:29:33,890
and behold Wi-Fi also has problems with

547
00:29:32,090 --> 00:29:35,510
queuing this is the same graph but with

548
00:29:33,890 --> 00:29:37,520
a Wi-Fi link is the bottleneck we

549
00:29:35,510 --> 00:29:39,629
install FQ kernel it still helps a lot

550
00:29:37,520 --> 00:29:41,309
but we are now at 100

551
00:29:39,630 --> 00:29:44,039
50 milliseconds instead of zero

552
00:29:41,309 --> 00:29:46,020
milliseconds of queuing and as you've

553
00:29:44,039 --> 00:29:47,309
probably guessed that's because there's

554
00:29:46,020 --> 00:29:49,470
another layer of queuing at a lower

555
00:29:47,309 --> 00:29:52,080
level and we don't have b-12 for Wi-Fi

556
00:29:49,470 --> 00:29:58,250
and we can't just use beach well because

557
00:29:52,080 --> 00:30:00,720
the Wi-Fi map is a bit weird so Wi-Fi

558
00:29:58,250 --> 00:30:02,340
has a lot of overhead to send the packet

559
00:30:00,720 --> 00:30:04,230
because it's unmanaged spectrum so you

560
00:30:02,340 --> 00:30:06,330
don't have a controller saying you can

561
00:30:04,230 --> 00:30:09,419
send Mary consume now so basically what

562
00:30:06,330 --> 00:30:11,250
a Wi-Fi device does is it goes back to

563
00:30:09,419 --> 00:30:13,380
the original Aloha protocols like

564
00:30:11,250 --> 00:30:15,539
listening is anyone transmitting no cool

565
00:30:13,380 --> 00:30:17,010
I can send something now so every time

566
00:30:15,539 --> 00:30:18,658
you can transmit a packet of Wi-Fi

567
00:30:17,010 --> 00:30:20,760
there's a lot of overhead where you have

568
00:30:18,659 --> 00:30:22,890
to wait and you have to figure out kind

569
00:30:20,760 --> 00:30:24,450
of transmit now and so on and you can

570
00:30:22,890 --> 00:30:25,500
only do it to one if you're an access

571
00:30:24,450 --> 00:30:27,059
point you have to do this individually

572
00:30:25,500 --> 00:30:30,150
for each station you're trying to

573
00:30:27,059 --> 00:30:32,190
transmit to and then we added because

574
00:30:30,150 --> 00:30:34,049
this is very inefficient the reason why

575
00:30:32,190 --> 00:30:37,380
it will have an N is more efficient I

576
00:30:34,049 --> 00:30:38,879
made it to 11 B and G and why ADA to 11

577
00:30:37,380 --> 00:30:41,100
AC is even more efficient because we

578
00:30:38,880 --> 00:30:42,270
added aggregation so instead of just

579
00:30:41,100 --> 00:30:44,459
sending one packet every time we've done

580
00:30:42,270 --> 00:30:45,809
this whole listen dance you can send a

581
00:30:44,460 --> 00:30:48,780
whole bunch of packets right it will

582
00:30:45,809 --> 00:30:50,370
have an N with 64k fighter to 11ac you

583
00:30:48,780 --> 00:30:52,610
allowed to send up to 4 megabytes of

584
00:30:50,370 --> 00:30:54,928
data any transmission opportunity and

585
00:30:52,610 --> 00:30:57,270
that means you need to have all this

586
00:30:54,929 --> 00:30:59,159
data ready to go when you get the chance

587
00:30:57,270 --> 00:31:01,350
to send and this happens on microsecond

588
00:30:59,159 --> 00:31:02,820
time scales so it's too late to go up

589
00:31:01,350 --> 00:31:04,439
and ask the operating system oh I'm

590
00:31:02,820 --> 00:31:06,059
ready to transmit now please send me 4

591
00:31:04,440 --> 00:31:09,360
megabytes of data within the next four

592
00:31:06,059 --> 00:31:10,799
microseconds that doesn't work so we

593
00:31:09,360 --> 00:31:12,928
need the queuing to be different we need

594
00:31:10,799 --> 00:31:17,940
to have packets queued up for each

595
00:31:12,929 --> 00:31:19,409
station ready to go and that is these

596
00:31:17,940 --> 00:31:21,150
hundred milliseconds the drivers did

597
00:31:19,409 --> 00:31:23,070
this some for some devices it was the

598
00:31:21,150 --> 00:31:24,390
firmware this is after mine case so

599
00:31:23,070 --> 00:31:27,629
everything is in software so the driver

600
00:31:24,390 --> 00:31:29,130
hat if Q per station ready to go so we

601
00:31:27,630 --> 00:31:34,620
have to change this we have to fix this

602
00:31:29,130 --> 00:31:37,380
so we did this this is the Wi-Fi queuing

603
00:31:34,620 --> 00:31:38,639
stack before we started changing it so

604
00:31:37,380 --> 00:31:40,559
this is the cutest layer I was talking

605
00:31:38,640 --> 00:31:42,419
about up here you can fall fq color yay

606
00:31:40,559 --> 00:31:44,129
and then you have all this stuff down

607
00:31:42,419 --> 00:31:46,950
here this is the driver you have a per

608
00:31:44,130 --> 00:31:48,390
station chewing and there's a retry at

609
00:31:46,950 --> 00:31:50,130
you and there's all this a round-robin

610
00:31:48,390 --> 00:31:51,059
and aggregates and all this stuff and

611
00:31:50,130 --> 00:31:52,770
that's the hundred and fifty

612
00:31:51,059 --> 00:31:54,600
milliseconds

613
00:31:52,770 --> 00:31:59,910
and so as you can see this is obviously

614
00:31:54,600 --> 00:32:05,280
way simpler right no but what we did was

615
00:31:59,910 --> 00:32:06,510
we moved fq cuddle down yeah so this is

616
00:32:05,280 --> 00:32:09,030
still there and there but that's a we

617
00:32:06,510 --> 00:32:13,140
try q but it's usually empty usually you

618
00:32:09,030 --> 00:32:15,300
don't get that many we twice so usually

619
00:32:13,140 --> 00:32:17,010
you just have this up here why we can do

620
00:32:15,300 --> 00:32:18,990
the FQ cuddle dance we can get all the

621
00:32:17,010 --> 00:32:20,540
power flow cueing and we just replicate

622
00:32:18,990 --> 00:32:22,890
this post station so there isn't like

623
00:32:20,540 --> 00:32:24,090
8,000 Q's and we just divide them out

624
00:32:22,890 --> 00:32:28,980
and so on and that's fine is your

625
00:32:24,090 --> 00:32:32,790
software and then the hardware just has

626
00:32:28,980 --> 00:32:38,460
to aggregates ready to go so this comes

627
00:32:32,790 --> 00:32:40,110
down to 10 milliseconds now and like

628
00:32:38,460 --> 00:32:41,520
it's always nice working with this stuff

629
00:32:40,110 --> 00:32:43,530
a lot of times you have to use a

630
00:32:41,520 --> 00:32:45,240
logarithmic scale as you can see here

631
00:32:43,530 --> 00:32:46,680
because otherwise before and after I

632
00:32:45,240 --> 00:32:47,340
won't fit in the same graph which is

633
00:32:46,680 --> 00:32:49,590
kind of cool

634
00:32:47,340 --> 00:32:54,419
so we went from 100 200 milliseconds

635
00:32:49,590 --> 00:32:58,770
down to 10 20 milliseconds of delay over

636
00:32:54,420 --> 00:33:01,190
Wi-Fi when we when we did this another

637
00:32:58,770 --> 00:33:03,870
thing this actually does is because

638
00:33:01,190 --> 00:33:06,360
before here this was actually a pretty

639
00:33:03,870 --> 00:33:10,379
small Q it's only 123 packets and so we

640
00:33:06,360 --> 00:33:11,639
took you down here so the total Q space

641
00:33:10,380 --> 00:33:13,050
actually increased

642
00:33:11,640 --> 00:33:14,850
but because we're managing it that

643
00:33:13,050 --> 00:33:16,470
doesn't be solved in big latency but it

644
00:33:14,850 --> 00:33:18,389
means that we can have more packets

645
00:33:16,470 --> 00:33:20,760
ready to go so if you look at the

646
00:33:18,390 --> 00:33:22,470
throughput here you will also see even

647
00:33:20,760 --> 00:33:25,710
if Q Caudill helps a little bit but FQ

648
00:33:22,470 --> 00:33:27,300
Mac that's just the fan eschewing the

649
00:33:25,710 --> 00:33:29,520
diagram before I get back to what

650
00:33:27,300 --> 00:33:31,379
airtime means but this just this

651
00:33:29,520 --> 00:33:34,710
increases throughput for fire stations

652
00:33:31,380 --> 00:33:35,880
because we can have we can build bigger

653
00:33:34,710 --> 00:33:36,390
aggregates because we have more

654
00:33:35,880 --> 00:33:39,420
changebase

655
00:33:36,390 --> 00:33:44,250
we have more packets ready to go and for

656
00:33:39,420 --> 00:33:45,510
slow stations that decreases throughput

657
00:33:44,250 --> 00:33:47,190
I'll come back to that but it's sort of

658
00:33:45,510 --> 00:33:48,570
it means that the accurate throughput of

659
00:33:47,190 --> 00:33:50,760
the whole network increases because the

660
00:33:48,570 --> 00:33:54,300
fast stations cannot go faster which is

661
00:33:50,760 --> 00:33:56,390
good but we have this thing in Wi-Fi

662
00:33:54,300 --> 00:33:59,430
where

663
00:33:56,390 --> 00:34:01,440
airtime users it's really the this pass

664
00:33:59,430 --> 00:34:04,110
resource it's not bandwidth it's the

665
00:34:01,440 --> 00:34:05,220
time you spent transmitting to different

666
00:34:04,110 --> 00:34:07,590
stations

667
00:34:05,220 --> 00:34:10,230
and how can we control that so there's

668
00:34:07,590 --> 00:34:12,270
this thing also back from 10-15 years

669
00:34:10,230 --> 00:34:15,449
ago called the ADA - another 11

670
00:34:12,270 --> 00:34:18,389
performance anomaly it was described the

671
00:34:15,449 --> 00:34:21,839
first time for ADA 211 B so this just

672
00:34:18,389 --> 00:34:23,099
says that if you fare in transmission

673
00:34:21,840 --> 00:34:24,629
time which is what we want to be

674
00:34:23,099 --> 00:34:26,550
everyone on the network should get the

675
00:34:24,629 --> 00:34:28,560
same amount of transmission time that

676
00:34:26,550 --> 00:34:29,879
means TI the time you spend transmitting

677
00:34:28,560 --> 00:34:32,790
should just be one over the number of

678
00:34:29,879 --> 00:34:34,230
stations but if you don't have fannish

679
00:34:32,790 --> 00:34:36,330
if you're just using the Wi-Fi mac

680
00:34:34,230 --> 00:34:37,770
because everyone every time you transmit

681
00:34:36,330 --> 00:34:39,389
you're listening and there's a random

682
00:34:37,770 --> 00:34:43,349
back off and then you get to send maybe

683
00:34:39,389 --> 00:34:46,050
so everyone gets the same probability of

684
00:34:43,349 --> 00:34:47,490
sending but not everyone spends at the

685
00:34:46,050 --> 00:34:50,510
same time so if you're sending it a very

686
00:34:47,489 --> 00:34:54,868
low rate that is like you're speaking

687
00:34:50,510 --> 00:34:56,550
really slow really so it takes a lot of

688
00:34:54,869 --> 00:34:58,410
time to say the same to sent the same

689
00:34:56,550 --> 00:35:00,150
amount of data so you will actually

690
00:34:58,410 --> 00:35:02,368
spend more time transmitting if you're

691
00:35:00,150 --> 00:35:05,040
transmitting a really low rate so that

692
00:35:02,369 --> 00:35:11,330
means that your term Sprint's

693
00:35:05,040 --> 00:35:13,740
transmitting is now the throughput

694
00:35:11,330 --> 00:35:18,089
Fama's you get throughput fana so it's

695
00:35:13,740 --> 00:35:21,359
sort of it's dependent on the weight of

696
00:35:18,089 --> 00:35:27,029
the other your rate depend the other

697
00:35:21,359 --> 00:35:28,859
stations in the in the network and this

698
00:35:27,030 --> 00:35:32,430
is bad because that means if you have

699
00:35:28,859 --> 00:35:33,869
your phone like if someone is sitting

700
00:35:32,430 --> 00:35:35,879
with their phone at the other end of the

701
00:35:33,869 --> 00:35:38,160
house far away from the AP in trying to

702
00:35:35,880 --> 00:35:39,660
watch your video they will have a very

703
00:35:38,160 --> 00:35:42,450
low rate and that will hurt everyone in

704
00:35:39,660 --> 00:35:43,830
the network so what we want to do is we

705
00:35:42,450 --> 00:35:46,980
want to change this into airtime

706
00:35:43,830 --> 00:35:50,730
fairness and it turns out that if you're

707
00:35:46,980 --> 00:35:53,280
the AP you can actually do this but by

708
00:35:50,730 --> 00:35:55,230
just keeping track of how long times

709
00:35:53,280 --> 00:35:58,080
descent did you spent transmitting to

710
00:35:55,230 --> 00:36:00,119
each station and then even that app by

711
00:35:58,080 --> 00:36:02,490
just scheduling them differently so if I

712
00:36:00,119 --> 00:36:04,500
sent to you and that takes me five

713
00:36:02,490 --> 00:36:07,770
seconds and listen to you and that only

714
00:36:04,500 --> 00:36:09,420
takes me one second millisecond then

715
00:36:07,770 --> 00:36:11,190
I'll send to you five times before I go

716
00:36:09,420 --> 00:36:12,900
back to him because it's the slow guy

717
00:36:11,190 --> 00:36:14,190
basically so we just it's just a

718
00:36:12,900 --> 00:36:15,990
round-robin schedule attack shield the

719
00:36:14,190 --> 00:36:19,090
same mechanism that fq coddled us for

720
00:36:15,990 --> 00:36:20,740
flows we just do it in the time

721
00:36:19,090 --> 00:36:21,910
and we already have the power station

722
00:36:20,740 --> 00:36:25,209
queuing so it's just a matter of

723
00:36:21,910 --> 00:36:26,799
scheduling which queue and we have to do

724
00:36:25,210 --> 00:36:28,150
some an angel might as well do our

725
00:36:26,800 --> 00:36:31,720
unwrapping chittering with this as well

726
00:36:28,150 --> 00:36:34,840
so we change the f9k driver to do this

727
00:36:31,720 --> 00:36:37,299
and before with the pfeiffer thing here

728
00:36:34,840 --> 00:36:40,120
you saw this is the slow station it

729
00:36:37,300 --> 00:36:43,990
takes that 90% of the airtime and these

730
00:36:40,120 --> 00:36:45,670
two get almost nothing through and then

731
00:36:43,990 --> 00:36:47,589
as I said this gets a little bit better

732
00:36:45,670 --> 00:36:49,090
actually with the when when we change

733
00:36:47,590 --> 00:36:52,570
the cheering already because we can make

734
00:36:49,090 --> 00:36:56,410
up for it a little bit by sending bigger

735
00:36:52,570 --> 00:36:57,790
aggregates to the far stations but if we

736
00:36:56,410 --> 00:36:59,230
do they actually stretch and we can get

737
00:36:57,790 --> 00:37:01,090
complete fairness between all three

738
00:36:59,230 --> 00:37:02,710
stations when the scales up to would

739
00:37:01,090 --> 00:37:06,100
attest up to relieve 30 stations in

740
00:37:02,710 --> 00:37:08,230
their single ap just scales and then we

741
00:37:06,100 --> 00:37:11,110
go back to the throughput reset before

742
00:37:08,230 --> 00:37:12,850
we're out of time now we get the fast

743
00:37:11,110 --> 00:37:14,680
stations get more data through because

744
00:37:12,850 --> 00:37:19,060
they now get their fair share it hurts

745
00:37:14,680 --> 00:37:20,290
the slow station a little bit and if you

746
00:37:19,060 --> 00:37:22,360
want to fix this I'll come back to that

747
00:37:20,290 --> 00:37:24,160
because that was when I first presented

748
00:37:22,360 --> 00:37:25,510
this the first question was what if I

749
00:37:24,160 --> 00:37:27,370
don't want fairness what if I want

750
00:37:25,510 --> 00:37:29,500
something else so we went back and we

751
00:37:27,370 --> 00:37:31,299
did policy as well but for just fairness

752
00:37:29,500 --> 00:37:33,010
this is the aggregate through but this

753
00:37:31,300 --> 00:37:34,030
is the average of all your stations in

754
00:37:33,010 --> 00:37:35,080
the network so this is sort of the

755
00:37:34,030 --> 00:37:36,880
aggregate throughput for your whole

756
00:37:35,080 --> 00:37:38,560
network you get a more efficient network

757
00:37:36,880 --> 00:37:43,780
you can transfer more data on your Wi-Fi

758
00:37:38,560 --> 00:37:45,670
network which is nice so policy someone

759
00:37:43,780 --> 00:37:47,620
the first reaction I get but what if my

760
00:37:45,670 --> 00:37:49,360
TV is the station that's far away from

761
00:37:47,620 --> 00:37:52,620
the API and I want to stream to that

762
00:37:49,360 --> 00:37:53,770
switch you get all the a time it needs

763
00:37:52,620 --> 00:37:55,690
okay

764
00:37:53,770 --> 00:37:57,880
let's try and do a prioritization thing

765
00:37:55,690 --> 00:37:59,680
where you can prioritize single devices

766
00:37:57,880 --> 00:38:02,380
maybe you want to balance device groups

767
00:37:59,680 --> 00:38:04,180
and 5g so all the hype there's this

768
00:38:02,380 --> 00:38:06,160
thing called network slicing where the

769
00:38:04,180 --> 00:38:08,740
operator wants to sell their resources

770
00:38:06,160 --> 00:38:10,600
as many times as possible and then if

771
00:38:08,740 --> 00:38:12,520
you're BMW and you have a fleet of cars

772
00:38:10,600 --> 00:38:14,710
and you pay extra then you can get

773
00:38:12,520 --> 00:38:16,690
priority and you can get a reserve a

774
00:38:14,710 --> 00:38:18,520
certain amount of the airtime and they

775
00:38:16,690 --> 00:38:20,950
can do that unlike LTE and all these

776
00:38:18,520 --> 00:38:22,420
technologies it's easy but on Wi-Fi we

777
00:38:20,950 --> 00:38:25,270
also wanted a bit so this is also a way

778
00:38:22,420 --> 00:38:28,020
you can do this with with the same thing

779
00:38:25,270 --> 00:38:30,850
it's not my favorite use case but it's a

780
00:38:28,020 --> 00:38:31,520
it's something that's possible with the

781
00:38:30,850 --> 00:38:33,380
same mechanism

782
00:38:31,520 --> 00:38:35,360
all you can do is this other thing which

783
00:38:33,380 --> 00:38:37,100
you think is way cooler if you have if

784
00:38:35,360 --> 00:38:40,250
you want a maximum capacity so you have

785
00:38:37,100 --> 00:38:42,440
an open guest network and you don't want

786
00:38:40,250 --> 00:38:44,780
our sort of set a set limit to someone

787
00:38:42,440 --> 00:38:47,150
like if no one is using your normal

788
00:38:44,780 --> 00:38:48,440
regular why find out why shouldn't the

789
00:38:47,150 --> 00:38:49,820
guest night would just be allowed to go

790
00:38:48,440 --> 00:38:52,790
but you can limit it to a maximum

791
00:38:49,820 --> 00:38:54,500
capacity so you say the guest network

792
00:38:52,790 --> 00:38:56,750
cannot take out more than half of the

793
00:38:54,500 --> 00:39:00,470
transmission time this ap is going

794
00:38:56,750 --> 00:39:03,650
through no matter how many stations are

795
00:39:00,470 --> 00:39:05,720
on it and so the way all this is

796
00:39:03,650 --> 00:39:10,070
implemented is we just have a demon it's

797
00:39:05,720 --> 00:39:11,720
actually in hostapd now that just polls

798
00:39:10,070 --> 00:39:15,320
the kernel and say how many stations are

799
00:39:11,720 --> 00:39:16,370
active do they have a queue ok if they

800
00:39:15,320 --> 00:39:18,200
have a queue that means that probably

801
00:39:16,370 --> 00:39:20,240
transmitting so there's these many

802
00:39:18,200 --> 00:39:22,310
stations and I want my group to have

803
00:39:20,240 --> 00:39:23,419
this share so I just divide that by the

804
00:39:22,310 --> 00:39:25,310
number of stations I'm going to put

805
00:39:23,420 --> 00:39:26,720
weights into the kernel and then the

806
00:39:25,310 --> 00:39:28,790
kernel just thought there's a weighted

807
00:39:26,720 --> 00:39:31,430
scheduler the same way as before and

808
00:39:28,790 --> 00:39:32,840
then you can get these different

809
00:39:31,430 --> 00:39:35,620
operating modes so you can say just

810
00:39:32,840 --> 00:39:38,060
static mode my TV needs priority or

811
00:39:35,620 --> 00:39:39,529
different groups meets the same weight

812
00:39:38,060 --> 00:39:41,900
or different groups needs to be limited

813
00:39:39,530 --> 00:39:43,850
so just configure the daemon to this and

814
00:39:41,900 --> 00:39:45,740
it'll just keep listening to one

815
00:39:43,850 --> 00:39:47,770
stations associate and go away and when

816
00:39:45,740 --> 00:39:49,790
they start transmitting and so on and

817
00:39:47,770 --> 00:39:53,270
this worked pretty well actually

818
00:39:49,790 --> 00:39:55,940
so here we have the the pebble station

819
00:39:53,270 --> 00:39:57,350
should get half is on one is on the

820
00:39:55,940 --> 00:39:59,270
guest network

821
00:39:57,350 --> 00:40:01,430
I like the home network you should get

822
00:39:59,270 --> 00:40:03,230
half this is one group and the three

823
00:40:01,430 --> 00:40:05,569
others is another group so this group

824
00:40:03,230 --> 00:40:07,550
should always get half so it in the

825
00:40:05,570 --> 00:40:09,320
beginning it has all the the times

826
00:40:07,550 --> 00:40:11,390
itself then one station comes on and now

827
00:40:09,320 --> 00:40:12,590
they're here but then another one comes

828
00:40:11,390 --> 00:40:15,980
on the guest network and the guest

829
00:40:12,590 --> 00:40:18,680
together get half but the purple one

830
00:40:15,980 --> 00:40:20,360
still gets is half and the zone or you

831
00:40:18,680 --> 00:40:22,490
can just say everyone shares equally and

832
00:40:20,360 --> 00:40:24,320
then they will immediately share equally

833
00:40:22,490 --> 00:40:29,450
as they they come on the different

834
00:40:24,320 --> 00:40:31,550
stations so Asif kernel 5.1 which is now

835
00:40:29,450 --> 00:40:33,710
already two releases old

836
00:40:31,550 --> 00:40:38,690
everything here is now up streaming

837
00:40:33,710 --> 00:40:40,490
Linux this is the history so I was

838
00:40:38,690 --> 00:40:41,630
actually wrong when I said 312 five to

839
00:40:40,490 --> 00:40:44,609
total it's all the way back to three

840
00:40:41,630 --> 00:40:46,500
five which is like

841
00:40:44,610 --> 00:40:49,020
two thousand twelve or something bitch

842
00:40:46,500 --> 00:40:51,210
you always even before that cake

843
00:40:49,020 --> 00:40:52,620
has been living out out of tree for a

844
00:40:51,210 --> 00:40:53,130
long time we finally up streamed it last

845
00:40:52,620 --> 00:40:55,440
year

846
00:40:53,130 --> 00:40:59,550
the Wi-Fi cheering stuff garden in 410

847
00:40:55,440 --> 00:41:01,050
411 is as I'm famous for f9k then we

848
00:40:59,550 --> 00:41:03,270
spend a lot of time doing the policy and

849
00:41:01,050 --> 00:41:05,820
we also poured it all the at time

850
00:41:03,270 --> 00:41:09,750
scheduling from the driver to the trauma

851
00:41:05,820 --> 00:41:11,910
meditator to 11th framework so by 5.1

852
00:41:09,750 --> 00:41:14,010
that is also upstream in the kernel I

853
00:41:11,910 --> 00:41:17,190
still have to post patches for open wrt

854
00:41:14,010 --> 00:41:19,650
to be able to configure it but that's a

855
00:41:17,190 --> 00:41:25,860
minor detail so while it's good right we

856
00:41:19,650 --> 00:41:27,690
fixed Wi-Fi yay except drivers so f9k is

857
00:41:25,860 --> 00:41:30,990
amazing earth man case this open-source

858
00:41:27,690 --> 00:41:33,810
driver from war trauma at Ferris 482 11

859
00:41:30,990 --> 00:41:36,810
and networks is completely open source

860
00:41:33,810 --> 00:41:41,850
it's written by originally by Felix feat

861
00:41:36,810 --> 00:41:43,259
cow it's an upstream developer and you

862
00:41:41,850 --> 00:41:43,890
can do anything with it like this the

863
00:41:43,260 --> 00:41:46,560
hardware's

864
00:41:43,890 --> 00:41:48,569
really dumb so just all the hands

865
00:41:46,560 --> 00:41:52,650
linguist and software so that's been the

866
00:41:48,570 --> 00:41:54,930
prototyping platform of choice if you go

867
00:41:52,650 --> 00:41:56,760
into Google Scholar and put in a spine K

868
00:41:54,930 --> 00:42:03,330
or a 5k that came before you get

869
00:41:56,760 --> 00:42:04,890
thousands of hits at 10k is then the the

870
00:42:03,330 --> 00:42:06,569
follow-on fade its will have an AC and

871
00:42:04,890 --> 00:42:08,009
unfortunately for 10k they decided to

872
00:42:06,570 --> 00:42:10,140
move a lot of the functionality into

873
00:42:08,010 --> 00:42:11,790
firmware and the firm was closed

874
00:42:10,140 --> 00:42:13,830
binary blow-up you just get it from

875
00:42:11,790 --> 00:42:14,870
Qualcomm it crashes all the time and

876
00:42:13,830 --> 00:42:17,610
it's really horrible

877
00:42:14,870 --> 00:42:20,220
so we do some of it there's some how to

878
00:42:17,610 --> 00:42:26,640
explain this in more detail MT 76 is

879
00:42:20,220 --> 00:42:32,399
better it's mediatek 802 11 AC but the

880
00:42:26,640 --> 00:42:35,819
hardware is not as prevalent iwl intel

881
00:42:32,400 --> 00:42:37,230
Wi-Fi just added this quite recently for

882
00:42:35,820 --> 00:42:38,730
the Wi-Fi queuing but doesn't have a

883
00:42:37,230 --> 00:42:40,980
time but it's not so important because

884
00:42:38,730 --> 00:42:44,220
it's mostly clients and so on but others

885
00:42:40,980 --> 00:42:47,670
most notably Broadcom is a lot of cpu at

886
00:42:44,220 --> 00:42:49,770
home but all the other vendors nothing

887
00:42:47,670 --> 00:42:51,420
some of them would get it into the

888
00:42:49,770 --> 00:42:54,660
driver but again we have this problem

889
00:42:51,420 --> 00:42:56,730
with a lot of the logic has moved into

890
00:42:54,660 --> 00:43:01,890
closed binary blobs firmware

891
00:42:56,730 --> 00:43:05,130
and that's really bad but we have some

892
00:43:01,890 --> 00:43:06,359
ongoing work to try to alleviate this a

893
00:43:05,130 --> 00:43:09,599
little bit there's the thing called a

894
00:43:06,359 --> 00:43:12,060
few limits remember I mentioned bql in

895
00:43:09,599 --> 00:43:13,770
the beginning byte cue limits well for

896
00:43:12,060 --> 00:43:16,290
Wi-Fi we can sort of do the same if we

897
00:43:13,770 --> 00:43:18,930
have a big dumb firmware blob that will

898
00:43:16,290 --> 00:43:21,210
cue a lot of packets at 10 K for example

899
00:43:18,930 --> 00:43:24,529
we'll do seconds of queueing thousands

900
00:43:21,210 --> 00:43:27,089
of packets but we can do the same thing

901
00:43:24,530 --> 00:43:29,400
that would do for bql except for Wi-Fi

902
00:43:27,089 --> 00:43:31,020
we have to account in time not bytes

903
00:43:29,400 --> 00:43:33,270
because the whole transmission time

904
00:43:31,020 --> 00:43:37,050
thing but we already know sort of

905
00:43:33,270 --> 00:43:40,200
usually roughly what time how much time

906
00:43:37,050 --> 00:43:42,119
or what rate the we're going to transmit

907
00:43:40,200 --> 00:43:43,470
to to each station so we can go back and

908
00:43:42,119 --> 00:43:45,329
calculate bytes on them which we put in

909
00:43:43,470 --> 00:43:46,549
limits and Google prototype this fast

910
00:43:45,329 --> 00:43:49,710
timetable is great effect but

911
00:43:46,550 --> 00:43:51,930
unfortunately it is open source it's in

912
00:43:49,710 --> 00:43:53,339
chromium but they implemented in the

913
00:43:51,930 --> 00:43:55,710
driver certain needs a bit of porting

914
00:43:53,339 --> 00:43:57,390
work to go into the to the framework but

915
00:43:55,710 --> 00:44:00,800
we did upstream but that will help a lot

916
00:43:57,390 --> 00:44:04,078
on the on the kingside airtime fairness

917
00:44:00,800 --> 00:44:05,819
might be possible loss as well it's

918
00:44:04,079 --> 00:44:07,470
actually in math 10k and it works very

919
00:44:05,819 --> 00:44:12,589
well but for the hardware Ides of

920
00:44:07,470 --> 00:44:20,939
depends on how it works and so on yeah

921
00:44:12,589 --> 00:44:23,130
so and then there's also the when we

922
00:44:20,940 --> 00:44:26,280
change the queuing stuff in my data to

923
00:44:23,130 --> 00:44:27,810
11 drivers have to opt into this so it's

924
00:44:26,280 --> 00:44:30,079
a different API between the driver and

925
00:44:27,810 --> 00:44:33,869
the rest of the tunnel and there's some

926
00:44:30,079 --> 00:44:35,730
johannes the Wi-Fi maintainer and then

927
00:44:33,869 --> 00:44:37,230
it has some idea to just emulate the old

928
00:44:35,730 --> 00:44:39,000
API and then we can just pull everything

929
00:44:37,230 --> 00:44:41,010
at once instead of having to port every

930
00:44:39,000 --> 00:44:45,810
individual driver and then there's the

931
00:44:41,010 --> 00:44:47,550
and then we just for getting the AQL

932
00:44:45,810 --> 00:44:49,619
support and forgetting our time fairness

933
00:44:47,550 --> 00:44:51,810
the hardware mate to be able to tell us

934
00:44:49,619 --> 00:44:54,180
how much time did I spent transmitting

935
00:44:51,810 --> 00:44:56,359
so that's why I say it's not necessarily

936
00:44:54,180 --> 00:44:58,819
all drivers wouldn't do this with um

937
00:44:56,359 --> 00:45:02,009
what you can do if you're someone who

938
00:44:58,819 --> 00:45:03,329
purchases a lot of devices from an OEM

939
00:45:02,010 --> 00:45:05,250
or some things you can go beat up yo

940
00:45:03,329 --> 00:45:06,930
Yemen they can go beat up their windows

941
00:45:05,250 --> 00:45:09,540
maybe we can actually get support for

942
00:45:06,930 --> 00:45:10,710
this I know it's an uphill battle it's

943
00:45:09,540 --> 00:45:12,000
really annoying but

944
00:45:10,710 --> 00:45:14,010
if you can actually get to board if you

945
00:45:12,000 --> 00:45:15,810
can pick Hardware that has support this

946
00:45:14,010 --> 00:45:21,930
really helps the Wi-Fi experience it

947
00:45:15,810 --> 00:45:25,200
gets a lot better this is not so

948
00:45:21,930 --> 00:45:27,210
important that's sort of another thing

949
00:45:25,200 --> 00:45:30,330
that's ongoing is this virtual time

950
00:45:27,210 --> 00:45:35,280
based scheduler so specifically when we

951
00:45:30,330 --> 00:45:37,290
try to do mu-mimo or because it are

952
00:45:35,280 --> 00:45:39,119
based we have to throttle like you do

953
00:45:37,290 --> 00:45:40,800
round-robin scheduling to achieve a time

954
00:45:39,119 --> 00:45:44,460
fairness you have to throttle stations

955
00:45:40,800 --> 00:45:48,000
quite a lot if they're slow which can be

956
00:45:44,460 --> 00:45:49,560
a bit difficult or like it it can get

957
00:45:48,000 --> 00:45:52,200
you some weird lace so we have this

958
00:45:49,560 --> 00:45:54,540
prototype a patch to use the different

959
00:45:52,200 --> 00:45:57,480
scheduling mechanism which I have to go

960
00:45:54,540 --> 00:45:59,009
back and brush off and send again which

961
00:45:57,480 --> 00:46:01,320
might improve this but it's sort of a

962
00:45:59,010 --> 00:46:05,310
more of an implementation detail than

963
00:46:01,320 --> 00:46:07,260
its functionality so summery possibly

964
00:46:05,310 --> 00:46:09,180
now you know what it is why it's

965
00:46:07,260 --> 00:46:12,810
important and how to get rid of it

966
00:46:09,180 --> 00:46:14,368
it's basically fixed in Linux for a lot

967
00:46:12,810 --> 00:46:16,950
of the technologies you can fix your own

968
00:46:14,369 --> 00:46:18,900
home networks the network is safe might

969
00:46:16,950 --> 00:46:20,580
be your own go do it especially if you

970
00:46:18,900 --> 00:46:22,349
happen to be at an ISP and you can do

971
00:46:20,580 --> 00:46:24,690
this for your customers we have the

972
00:46:22,349 --> 00:46:26,190
technology like cake is one line of

973
00:46:24,690 --> 00:46:28,830
conflict to turn it on and your router

974
00:46:26,190 --> 00:46:30,330
we have scripts it's an open wrt is a

975
00:46:28,830 --> 00:46:32,009
GUI you can just turn it on it really

976
00:46:30,330 --> 00:46:34,920
helps the internet work so then it's

977
00:46:32,010 --> 00:46:36,510
amazing you can have your whole video

978
00:46:34,920 --> 00:46:38,310
calls while you're running BitTorrent

979
00:46:36,510 --> 00:46:41,430
and downloading and everything and you

980
00:46:38,310 --> 00:46:43,890
don't notice it's amazing references

981
00:46:41,430 --> 00:46:45,240
these the blue stuff is links I don't

982
00:46:43,890 --> 00:46:46,890
know if the slides are going to appear

983
00:46:45,240 --> 00:46:48,540
somewhere hopefully so you can click on

984
00:46:46,890 --> 00:46:51,089
these if not you can come and get a book

985
00:46:48,540 --> 00:46:53,160
for me if you want to know more details

986
00:46:51,089 --> 00:46:55,140
of this this is also it's most of the

987
00:46:53,160 --> 00:46:56,580
research is open access you should be

988
00:46:55,140 --> 00:46:59,490
able to find it on the internet if you

989
00:46:56,580 --> 00:47:01,940
want to read the gory details so yeah

990
00:46:59,490 --> 00:47:07,729
thank you

991
00:47:01,940 --> 00:47:12,109
[Applause]

992
00:47:07,730 --> 00:47:12,109
so any questions for Thole

993
00:47:18,500 --> 00:47:22,829
Hey

994
00:47:19,950 --> 00:47:24,240
how does your work tie in with

995
00:47:22,829 --> 00:47:27,089
environments where you have lots of

996
00:47:24,240 --> 00:47:29,069
other ApS going around sort of taking up

997
00:47:27,089 --> 00:47:33,690
air time and so on do they respect these

998
00:47:29,069 --> 00:47:38,819
changes or yeah not really

999
00:47:33,690 --> 00:47:40,859
so the AAP only looks at the traffic

1000
00:47:38,819 --> 00:47:42,509
that it sees so if you have an

1001
00:47:40,859 --> 00:47:43,619
environment where you have a lot of

1002
00:47:42,510 --> 00:47:45,119
other APs

1003
00:47:43,619 --> 00:47:47,220
if they're on different channels it

1004
00:47:45,119 --> 00:47:48,630
doesn't matter they don't interfere but

1005
00:47:47,220 --> 00:47:51,359
if you have interference on your own

1006
00:47:48,630 --> 00:47:53,640
band whether it's another EP it's LTE

1007
00:47:51,359 --> 00:47:56,430
it's a microwave whatever this just

1008
00:47:53,640 --> 00:47:58,650
means that the amount of our time that

1009
00:47:56,430 --> 00:48:00,299
you get for your network decreases

1010
00:47:58,650 --> 00:48:02,849
you'll still be fair within your network

1011
00:48:00,299 --> 00:48:06,930
but the overall capacity will decrease

1012
00:48:02,849 --> 00:48:10,380
that is I mean I've seen someone trying

1013
00:48:06,930 --> 00:48:12,450
to do a coordination daemon if you

1014
00:48:10,380 --> 00:48:14,099
control all the access points you can

1015
00:48:12,450 --> 00:48:16,710
install software that will communicate

1016
00:48:14,099 --> 00:48:19,680
between them and try to sort of slice

1017
00:48:16,710 --> 00:48:22,170
out the airtime between the APS by sort

1018
00:48:19,680 --> 00:48:27,000
of so in to ensure fairness across the

1019
00:48:22,170 --> 00:48:29,069
whole network then Spain I like they had

1020
00:48:27,000 --> 00:48:30,480
a prototype that if that was using a

1021
00:48:29,069 --> 00:48:31,770
different mechanism for enforcement and

1022
00:48:30,480 --> 00:48:33,930
then they said maybe they would port it

1023
00:48:31,770 --> 00:48:35,400
to just use this and then so it's just a

1024
00:48:33,930 --> 00:48:37,740
coordination between access points and

1025
00:48:35,400 --> 00:48:39,630
that's like that's possible because you

1026
00:48:37,740 --> 00:48:41,328
can program hostapd to set the weight

1027
00:48:39,630 --> 00:48:46,859
differently to just slow everything down

1028
00:48:41,329 --> 00:48:48,359
kind of and also the schedulers they're

1029
00:48:46,859 --> 00:48:49,859
all work concerning sort of sort of

1030
00:48:48,359 --> 00:48:52,109
it'll divide out the our time you have

1031
00:48:49,859 --> 00:48:57,170
but if you don't have it and you don't

1032
00:48:52,109 --> 00:48:57,170
have it anyone else

1033
00:49:01,070 --> 00:49:07,290
so the cake scheduler is that only for

1034
00:49:04,560 --> 00:49:09,450
the Wi-Fi interface where you are

1035
00:49:07,290 --> 00:49:13,790
running as you're running as an access

1036
00:49:09,450 --> 00:49:15,779
point or is it for also your laptop so

1037
00:49:13,790 --> 00:49:17,550
actually cake doesn't work so well on

1038
00:49:15,780 --> 00:49:19,800
Wi-Fi because we needed the queuing per

1039
00:49:17,550 --> 00:49:22,350
device so all the what stuff we did on

1040
00:49:19,800 --> 00:49:23,850
Wi-Fi was try to get the Wi-Fi queues

1041
00:49:22,350 --> 00:49:25,950
themselves to work so we don't have to

1042
00:49:23,850 --> 00:49:29,279
do it at the beautiful area so the the

1043
00:49:25,950 --> 00:49:32,100
main use case for cake is your upstream

1044
00:49:29,280 --> 00:49:33,690
connection to the internet so it's like

1045
00:49:32,100 --> 00:49:35,100
where you have usually you have some

1046
00:49:33,690 --> 00:49:38,040
hardware that you can't control

1047
00:49:35,100 --> 00:49:40,529
either it's because you have an ADSL

1048
00:49:38,040 --> 00:49:43,080
modem or something from your ISP that's

1049
00:49:40,530 --> 00:49:46,110
just a black box and usually has a bit

1050
00:49:43,080 --> 00:49:48,180
queue so what you then do is you shake

1051
00:49:46,110 --> 00:49:50,070
to rate just over the just below the

1052
00:49:48,180 --> 00:49:51,330
bottleneck and then you can move the

1053
00:49:50,070 --> 00:49:53,400
queue to where you can control it and

1054
00:49:51,330 --> 00:49:57,930
cage is really optimized this also has

1055
00:49:53,400 --> 00:50:00,960
features to compensate for different

1056
00:49:57,930 --> 00:50:04,080
framings so DSL will split packets up to

1057
00:50:00,960 --> 00:50:05,490
small ATM cells and that has to be taken

1058
00:50:04,080 --> 00:50:07,590
into account when you're shaping and so

1059
00:50:05,490 --> 00:50:10,259
on and on the other direction on your

1060
00:50:07,590 --> 00:50:11,970
home network you can try to shape after

1061
00:50:10,260 --> 00:50:13,650
the bottleneck you have to shape a

1062
00:50:11,970 --> 00:50:15,959
little bit better a little bit lower but

1063
00:50:13,650 --> 00:50:17,460
because it's TCP you can sort of

1064
00:50:15,960 --> 00:50:20,010
influence it a lot as long as you're not

1065
00:50:17,460 --> 00:50:22,770
being DLS so you can sort of fix it in

1066
00:50:20,010 --> 00:50:26,820
both directions from your CP but Keg is

1067
00:50:22,770 --> 00:50:28,230
really sort of it's it's its target

1068
00:50:26,820 --> 00:50:31,020
audience is fixing your home network

1069
00:50:28,230 --> 00:50:32,490
maybe using it as an isp as well but

1070
00:50:31,020 --> 00:50:34,830
it's there's some features missing a

1071
00:50:32,490 --> 00:50:36,209
little bit for this but it could

1072
00:50:34,830 --> 00:50:38,759
presumably be used for this as well

1073
00:50:36,210 --> 00:50:40,320
alright so say you have a really fast

1074
00:50:38,760 --> 00:50:42,390
fiber connection and you just want to

1075
00:50:40,320 --> 00:50:44,940
optimize your Wi-Fi then if you cuddle

1076
00:50:42,390 --> 00:50:47,400
would be fine then you would if you just

1077
00:50:44,940 --> 00:50:49,080
want to fix your Wi-Fi then you find a

1078
00:50:47,400 --> 00:50:50,580
Wi-Fi device where that has driver

1079
00:50:49,080 --> 00:50:51,990
support for the Wi-Fi stuff and use that

1080
00:50:50,580 --> 00:50:56,340
then you don't need to do anything like

1081
00:50:51,990 --> 00:50:58,049
actually you will see if this is act the

1082
00:50:56,340 --> 00:50:59,400
hom stuff in the Wi-Fi driver is

1083
00:50:58,050 --> 00:51:01,350
activated we removed the curious

1084
00:50:59,400 --> 00:51:03,210
completely so you will get no queue on

1085
00:51:01,350 --> 00:51:08,670
your device and all the queuing happens

1086
00:51:03,210 --> 00:51:10,309
inside the Mac layer for Wi-Fi and what

1087
00:51:08,670 --> 00:51:14,579
else

1088
00:51:10,309 --> 00:51:16,409
No and also I'm sorry just because you

1089
00:51:14,579 --> 00:51:17,819
have a fight a fast fiber connection you

1090
00:51:16,409 --> 00:51:20,759
can still have Buffalo so you should

1091
00:51:17,819 --> 00:51:31,579
mess your intestine yeah so let's give

1092
00:51:20,759 --> 00:51:31,579
togepi came and if anyone wants a book

