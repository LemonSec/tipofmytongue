1
00:03:15,980 --> 00:03:22,280
who is going to tell us about whether we

2
00:03:19,849 --> 00:03:25,640
can trust our encrypted cloud services

3
00:03:22,280 --> 00:03:28,580
or not yes that's exactly what I'm going

4
00:03:25,640 --> 00:03:30,589
to talk about so this is something I did

5
00:03:28,580 --> 00:03:33,410
some some time ago and I did it with my

6
00:03:30,590 --> 00:03:36,110
current advisor so I work at almost

7
00:03:33,410 --> 00:03:40,970
University and I do the like

8
00:03:36,110 --> 00:03:42,950
cryptography daily so not so much

9
00:03:40,970 --> 00:03:44,359
security but like cryptography and this

10
00:03:42,950 --> 00:03:48,890
is like there's a lot of cryptography in

11
00:03:44,360 --> 00:03:50,299
this okay so can you entrust you or can

12
00:03:48,890 --> 00:03:52,510
you trust you encrypted cloud this is an

13
00:03:50,299 --> 00:03:55,610
assessment of like one of these

14
00:03:52,510 --> 00:03:57,140
applications than you can use so to put

15
00:03:55,610 --> 00:03:59,120
like this into some context that might

16
00:03:57,140 --> 00:04:00,589
make sense to like what do I think of as

17
00:03:59,120 --> 00:04:02,510
like a traditional cloud storage when I

18
00:04:00,590 --> 00:04:05,329
say traditional cloud storage I'm

19
00:04:02,510 --> 00:04:08,870
thinking something like Google Drive or

20
00:04:05,329 --> 00:04:11,420
Dropbox or or something like this and

21
00:04:08,870 --> 00:04:13,040
these applications like the traditional

22
00:04:11,420 --> 00:04:14,780
cloud storage you know the way you just

23
00:04:13,040 --> 00:04:16,728
put your file on some server and now

24
00:04:14,780 --> 00:04:18,738
it's there it's nice because now you can

25
00:04:16,728 --> 00:04:20,418
access it even if your computer gets

26
00:04:18,738 --> 00:04:21,888
stolen and so on but it still raises

27
00:04:20,418 --> 00:04:23,539
some concerns with regards to the

28
00:04:21,889 --> 00:04:26,360
privacy of your files so for example

29
00:04:23,539 --> 00:04:27,740
like decides myself

30
00:04:26,360 --> 00:04:29,270
who else can read this file and of

31
00:04:27,740 --> 00:04:31,490
course you know anyone with access to

32
00:04:29,270 --> 00:04:33,260
these servers will be able to read the

33
00:04:31,490 --> 00:04:36,139
files there are some more like subtle

34
00:04:33,260 --> 00:04:38,030
issues for example if we delete a file I

35
00:04:36,139 --> 00:04:40,430
store a file unlike Google servers now I

36
00:04:38,030 --> 00:04:42,138
delete it is it actually gone do I have

37
00:04:40,430 --> 00:04:44,750
like any insurance assurance that

38
00:04:42,139 --> 00:04:47,630
somebody who later comes along I don't

39
00:04:44,750 --> 00:04:49,820
know steals Google servers or the NSA I

40
00:04:47,630 --> 00:04:51,169
don't know sex you know takes control of

41
00:04:49,820 --> 00:04:52,250
these servers to actually have a

42
00:04:51,169 --> 00:04:54,680
currency that they can't you know

43
00:04:52,250 --> 00:04:56,750
recover my file and I don't really have

44
00:04:54,680 --> 00:04:59,419
this and the same applies of course with

45
00:04:56,750 --> 00:05:01,669
if I did like if I cancel my account or

46
00:04:59,419 --> 00:05:03,320
something there was an incident like a

47
00:05:01,669 --> 00:05:04,969
couple of years ago with Dropbox where

48
00:05:03,320 --> 00:05:08,000
they got into some some trouble because

49
00:05:04,970 --> 00:05:10,130
they suddenly started to basically

50
00:05:08,000 --> 00:05:12,560
recreate files that people had deleted

51
00:05:10,130 --> 00:05:14,599
up to like six years ago or so so that's

52
00:05:12,560 --> 00:05:16,130
not really like even if I delete this

53
00:05:14,599 --> 00:05:17,479
file and it's completely gone from my

54
00:05:16,130 --> 00:05:19,010
account suddenly it shows up again

55
00:05:17,479 --> 00:05:22,580
because it's actually not deleted from

56
00:05:19,010 --> 00:05:25,700
the servers right it's yeah and of

57
00:05:22,580 --> 00:05:28,430
course what what happens if you know

58
00:05:25,700 --> 00:05:29,169
this storage company sold I might trust

59
00:05:28,430 --> 00:05:31,659
Google or

60
00:05:29,169 --> 00:05:33,310
I trust Dropbox or whatever but what if

61
00:05:31,659 --> 00:05:37,090
it's suddenly sold to some you know I

62
00:05:33,310 --> 00:05:39,279
don't know Chinese company or company

63
00:05:37,090 --> 00:05:41,378
that I don't trust right it's the same

64
00:05:39,279 --> 00:05:43,930
same problem again it's because I don't

65
00:05:41,379 --> 00:05:45,669
have control over my files anymore

66
00:05:43,930 --> 00:05:47,289
these storage systems these encrypted

67
00:05:45,669 --> 00:05:49,090
storage systems they solve this and like

68
00:05:47,289 --> 00:05:51,039
the most simplest way you can think of

69
00:05:49,090 --> 00:05:52,869
like you have a password that you use in

70
00:05:51,039 --> 00:05:54,400
any event when you log in so now you

71
00:05:52,870 --> 00:05:55,960
just use this as well so some how to

72
00:05:54,400 --> 00:05:57,370
write a key and then you encrypt this

73
00:05:55,960 --> 00:06:00,400
password and then you upload it to the

74
00:05:57,370 --> 00:06:01,810
server there's a lot of like caveats

75
00:06:00,400 --> 00:06:03,609
here because now you can't use the

76
00:06:01,810 --> 00:06:05,050
proper authentication anymore and this

77
00:06:03,610 --> 00:06:07,330
is some of the things that we exploited

78
00:06:05,050 --> 00:06:09,189
in this thing but like this is basically

79
00:06:07,330 --> 00:06:10,870
the idea of all of these encrypted cloud

80
00:06:09,189 --> 00:06:14,979
storage applications they do basically

81
00:06:10,870 --> 00:06:18,789
this of course like in real life it's

82
00:06:14,979 --> 00:06:20,529
not just you know the it's not so simple

83
00:06:18,789 --> 00:06:22,150
that you just derive a key from your

84
00:06:20,529 --> 00:06:24,490
password and use it to you encrypt your

85
00:06:22,150 --> 00:06:26,589
files because you know an application

86
00:06:24,490 --> 00:06:28,120
should perhaps do a bit more than just

87
00:06:26,589 --> 00:06:29,620
you know encrypt the file and put it on

88
00:06:28,120 --> 00:06:31,810
a storage device you also wanted to be

89
00:06:29,620 --> 00:06:33,460
able to well authenticate first of all

90
00:06:31,810 --> 00:06:35,500
because some of these applications they

91
00:06:33,460 --> 00:06:37,000
might have like additional data there

92
00:06:35,500 --> 00:06:38,740
are some information assorted would you

93
00:06:37,000 --> 00:06:41,500
so they can contact you there might be

94
00:06:38,740 --> 00:06:43,389
some payment involved and so on you want

95
00:06:41,500 --> 00:06:45,099
to be able to say it like your files and

96
00:06:43,389 --> 00:06:46,389
both your laptop and your phones so

97
00:06:45,099 --> 00:06:48,460
there's some synchronization of files

98
00:06:46,389 --> 00:06:51,460
you want here you might want to be able

99
00:06:48,460 --> 00:06:53,289
to say I want to share this file and so

100
00:06:51,460 --> 00:06:55,930
on so there's like a lot of details here

101
00:06:53,289 --> 00:06:58,149
that act like complexity on top of this

102
00:06:55,930 --> 00:07:00,159
but in a nutshell this is basically what

103
00:06:58,149 --> 00:07:02,020
happens when you use these services they

104
00:07:00,159 --> 00:07:05,860
encrypt your file with the with your

105
00:07:02,020 --> 00:07:07,870
password so the idea of these is

106
00:07:05,860 --> 00:07:09,789
essentially to protect it so I think the

107
00:07:07,870 --> 00:07:11,259
the best way to see the security they

108
00:07:09,789 --> 00:07:13,719
want to achieve these services is they

109
00:07:11,259 --> 00:07:15,729
want to protect like your files against

110
00:07:13,719 --> 00:07:16,960
the server themselves right because

111
00:07:15,729 --> 00:07:18,219
you're storing the files on the server

112
00:07:16,960 --> 00:07:20,318
but you don't trust the servers to

113
00:07:18,219 --> 00:07:22,539
actually you know not read the files or

114
00:07:20,319 --> 00:07:25,270
not suddenly you know lose them or

115
00:07:22,539 --> 00:07:26,529
something like this so you essentially

116
00:07:25,270 --> 00:07:28,719
want to protect them against the servers

117
00:07:26,529 --> 00:07:30,189
and this is essentially what they claim

118
00:07:28,719 --> 00:07:32,620
all of these or I have some quotes from

119
00:07:30,189 --> 00:07:34,419
like these companies like you shouldn't

120
00:07:32,620 --> 00:07:36,999
have like you should never have to trust

121
00:07:34,419 --> 00:07:39,008
a cloud storage server or LastPass which

122
00:07:36,999 --> 00:07:40,599
is essentially also cloud encrypted

123
00:07:39,009 --> 00:07:42,190
cloud storage but now if like short

124
00:07:40,599 --> 00:07:44,440
strings which is the password

125
00:07:42,190 --> 00:07:46,420
I guess say the same thing sync is

126
00:07:44,440 --> 00:07:49,480
another program that does despite office

127
00:07:46,420 --> 00:07:50,860
also dislike no knowledge means we know

128
00:07:49,480 --> 00:07:53,290
nothing about the encrypted data you

129
00:07:50,860 --> 00:07:54,730
store on all servers so basically you

130
00:07:53,290 --> 00:07:58,600
want to like you want to protect your

131
00:07:54,730 --> 00:08:01,300
files against the server in some way and

132
00:07:58,600 --> 00:08:02,770
what we actually look at is like to what

133
00:08:01,300 --> 00:08:04,660
extent it's these claims actually true

134
00:08:02,770 --> 00:08:06,130
so all of these are of course you know

135
00:08:04,660 --> 00:08:08,800
taken from there when you go to the web

136
00:08:06,130 --> 00:08:11,110
page this is you know in big text on the

137
00:08:08,800 --> 00:08:13,120
front page so they can sell that product

138
00:08:11,110 --> 00:08:17,620
and so on but is it actually true like

139
00:08:13,120 --> 00:08:19,420
or to which extent is this true so the

140
00:08:17,620 --> 00:08:21,280
way we went about this is that we first

141
00:08:19,420 --> 00:08:23,320
was like defined some sort of like

142
00:08:21,280 --> 00:08:24,669
threat model for this so when they say

143
00:08:23,320 --> 00:08:26,290
you know you don't have to trust the

144
00:08:24,670 --> 00:08:28,810
server what do they actually mean by

145
00:08:26,290 --> 00:08:30,220
this because you can interpret this you

146
00:08:28,810 --> 00:08:32,830
know you shouldn't have to trust this

147
00:08:30,220 --> 00:08:34,440
cloud storage service you can interpret

148
00:08:32,830 --> 00:08:36,490
this in a lot of different ways and

149
00:08:34,440 --> 00:08:38,830
depending on how you interpret it some

150
00:08:36,490 --> 00:08:40,030
of them are secure like at least like

151
00:08:38,830 --> 00:08:41,620
the spy rope we looked at it might be

152
00:08:40,030 --> 00:08:43,990
secure it might not depending on how you

153
00:08:41,620 --> 00:08:48,730
interpret you know the can I trust the

154
00:08:43,990 --> 00:08:50,320
server for example then we did like a

155
00:08:48,730 --> 00:08:52,180
bunch of reverse engineering of this

156
00:08:50,320 --> 00:08:54,940
application in order to see if it

157
00:08:52,180 --> 00:08:57,430
actually worked and then we found out

158
00:08:54,940 --> 00:09:00,760
that it was not secure and then we like

159
00:08:57,430 --> 00:09:02,920
brought a bunch of proof of concept code

160
00:09:00,760 --> 00:09:04,390
and then we executed these attacks and

161
00:09:02,920 --> 00:09:07,150
then we you know sent them an email and

162
00:09:04,390 --> 00:09:10,030
they fix the stuff and so on so

163
00:09:07,150 --> 00:09:14,050
everything is like back to the status

164
00:09:10,030 --> 00:09:16,420
quo or whatever you might say yeah it's

165
00:09:14,050 --> 00:09:19,510
like a small like note here that of

166
00:09:16,420 --> 00:09:21,219
course cloud storage since I'm like

167
00:09:19,510 --> 00:09:23,110
doing research daily I don't know I have

168
00:09:21,220 --> 00:09:25,120
to plug some research that is you know

169
00:09:23,110 --> 00:09:27,339
been done on cloud storage of course

170
00:09:25,120 --> 00:09:28,810
it's it's not just like as was mentioned

171
00:09:27,339 --> 00:09:31,270
in the previous talk and it's the same

172
00:09:28,810 --> 00:09:32,469
here it's not just like homemade crypto

173
00:09:31,270 --> 00:09:36,910
everything there's also like some

174
00:09:32,470 --> 00:09:40,570
research involved in this but yeah okay

175
00:09:36,910 --> 00:09:41,680
so very informally we consider the

176
00:09:40,570 --> 00:09:42,910
setting where you have like a client and

177
00:09:41,680 --> 00:09:48,069
server so we don't really care about

178
00:09:42,910 --> 00:09:49,930
like it many clients and where or a

179
00:09:48,070 --> 00:09:51,339
setting where the client has like a lot

180
00:09:49,930 --> 00:09:53,140
of devices and so on we take like this

181
00:09:51,339 --> 00:09:55,680
simplest possible case where you say I

182
00:09:53,140 --> 00:09:57,059
have a client and I have a server

183
00:09:55,680 --> 00:09:59,099
the client basically wants to store

184
00:09:57,059 --> 00:10:01,439
stuff on the server and the server wants

185
00:09:59,100 --> 00:10:03,269
to I don't know give this stuff back to

186
00:10:01,439 --> 00:10:04,980
the client but we somehow you know

187
00:10:03,269 --> 00:10:06,480
cannot trust the server completely

188
00:10:04,980 --> 00:10:08,459
because if you could trust the server

189
00:10:06,480 --> 00:10:09,689
completely obviously what we will just

190
00:10:08,459 --> 00:10:11,998
do is that we will just send the files

191
00:10:09,689 --> 00:10:13,829
to the server right we might use TLS or

192
00:10:11,999 --> 00:10:15,480
something so everybody else cannot read

193
00:10:13,829 --> 00:10:16,649
what we're sending but if we trust the

194
00:10:15,480 --> 00:10:18,600
server then there's no point in

195
00:10:16,649 --> 00:10:22,499
encrypting our data right because we

196
00:10:18,600 --> 00:10:24,509
trust the server so we consider

197
00:10:22,499 --> 00:10:27,209
basically two cases so either we say

198
00:10:24,509 --> 00:10:28,800
that we are in select we asked like is

199
00:10:27,209 --> 00:10:31,589
it secure if the server is like only

200
00:10:28,800 --> 00:10:33,329
passively malicious which basically

201
00:10:31,589 --> 00:10:34,920
means we trust the server to do

202
00:10:33,329 --> 00:10:37,469
everything that it's supposed to do or

203
00:10:34,920 --> 00:10:42,660
we don't trust it to not try to read our

204
00:10:37,470 --> 00:10:44,999
files right so it's essentially says

205
00:10:42,660 --> 00:10:47,550
that you know if everything works

206
00:10:44,999 --> 00:10:48,839
normally then stuff shouldn't break like

207
00:10:47,550 --> 00:10:52,290
this should be like the minimal

208
00:10:48,839 --> 00:10:55,160
requirement right this this you might

209
00:10:52,290 --> 00:10:57,149
see that for example something like a

210
00:10:55,160 --> 00:10:58,589
gmail account for example would not be

211
00:10:57,149 --> 00:11:00,540
secured against this clearly right

212
00:10:58,589 --> 00:11:02,610
because everything of course works and

213
00:11:00,540 --> 00:11:04,349
so on but just because you're like

214
00:11:02,610 --> 00:11:05,999
storing your emails and like clear text

215
00:11:04,350 --> 00:11:08,579
on Google servers of course they can

216
00:11:05,999 --> 00:11:11,809
know the content of your emails but it's

217
00:11:08,579 --> 00:11:14,160
of course not really the you know the a

218
00:11:11,809 --> 00:11:15,569
goal of Google to to like hide the

219
00:11:14,160 --> 00:11:18,959
content of your emails because they use

220
00:11:15,569 --> 00:11:21,059
them for various things right so so this

221
00:11:18,959 --> 00:11:22,378
is like this is for something that where

222
00:11:21,059 --> 00:11:23,519
you cannot trust the server in some

223
00:11:22,379 --> 00:11:25,679
sense there should be like the minimum

224
00:11:23,519 --> 00:11:27,480
right the I cannot trust that like I

225
00:11:25,679 --> 00:11:29,009
trust the server to do everything

226
00:11:27,480 --> 00:11:32,009
correctly but I don't trust it to not

227
00:11:29,009 --> 00:11:33,540
read my files that's basically this is

228
00:11:32,009 --> 00:11:35,309
in some sense it also provides security

229
00:11:33,540 --> 00:11:36,629
in the case where you say ok I actually

230
00:11:35,309 --> 00:11:38,939
trust the server to do everything

231
00:11:36,629 --> 00:11:43,679
correctly but I don't trust them to you

232
00:11:38,939 --> 00:11:46,549
know not get hacked for example right so

233
00:11:43,679 --> 00:11:48,929
if your files are secure in this case

234
00:11:46,549 --> 00:11:50,970
then it's also secure if somebody breaks

235
00:11:48,929 --> 00:11:53,249
into the server and even learns all the

236
00:11:50,970 --> 00:11:55,379
server's you know database like

237
00:11:53,249 --> 00:11:58,860
encryption keys and so on it's like the

238
00:11:55,379 --> 00:12:00,509
the most you know the most a company can

239
00:11:58,860 --> 00:12:02,399
can lose the data right if it loses

240
00:12:00,509 --> 00:12:04,319
everything then it would still be fine

241
00:12:02,399 --> 00:12:05,699
in this case because the server cannot

242
00:12:04,319 --> 00:12:07,139
read the files obviously anybody who

243
00:12:05,699 --> 00:12:08,089
breaks into the server also cannot read

244
00:12:07,139 --> 00:12:10,130
the files

245
00:12:08,090 --> 00:12:11,750
so it's not just if you don't trust the

246
00:12:10,130 --> 00:12:14,689
server it all says like nice things

247
00:12:11,750 --> 00:12:17,450
outside of this the other thing is like

248
00:12:14,690 --> 00:12:18,440
what if like the server just does

249
00:12:17,450 --> 00:12:21,020
whatever it wants

250
00:12:18,440 --> 00:12:23,180
so like I say I want my files back and

251
00:12:21,020 --> 00:12:25,640
now the server just sends me whatever

252
00:12:23,180 --> 00:12:28,449
you know it can send me whatever it

253
00:12:25,640 --> 00:12:30,590
wants this is perhaps a bit less

254
00:12:28,450 --> 00:12:32,870
realistic because in practice you'd

255
00:12:30,590 --> 00:12:35,720
imagine you know this is you might you

256
00:12:32,870 --> 00:12:37,820
know see if this this happens right from

257
00:12:35,720 --> 00:12:39,260
the server it's a lot more fun to study

258
00:12:37,820 --> 00:12:41,240
of course but it's also worth like

259
00:12:39,260 --> 00:12:42,890
considering because it might be the case

260
00:12:41,240 --> 00:12:48,290
that I don't know you could probably

261
00:12:42,890 --> 00:12:50,600
come up with some I don't know strange

262
00:12:48,290 --> 00:12:53,719
scenario right where the server is like

263
00:12:50,600 --> 00:12:56,300
taken over by some hacker or an

264
00:12:53,720 --> 00:12:58,220
intelligence agency and they target a

265
00:12:56,300 --> 00:12:59,810
specific user and now against the

266
00:12:58,220 --> 00:13:01,310
specific use of the server sends like

267
00:12:59,810 --> 00:13:03,349
specific messages in order to try to

268
00:13:01,310 --> 00:13:05,479
break basically its own application

269
00:13:03,350 --> 00:13:08,530
right and this is essentially what we

270
00:13:05,480 --> 00:13:13,790
have here of course there's like a small

271
00:13:08,530 --> 00:13:14,959
note here that we test this we test

272
00:13:13,790 --> 00:13:16,579
these two threat models against like

273
00:13:14,960 --> 00:13:19,250
software we get from the server itself

274
00:13:16,580 --> 00:13:21,730
essentially so in particular like in the

275
00:13:19,250 --> 00:13:24,710
second case here you might argue

276
00:13:21,730 --> 00:13:26,180
obviously no cloud storage application

277
00:13:24,710 --> 00:13:28,970
where you get the application from the

278
00:13:26,180 --> 00:13:30,650
cloud storage service is this secure

279
00:13:28,970 --> 00:13:32,390
here right because what the server just

280
00:13:30,650 --> 00:13:34,850
does in this case is when you ask it for

281
00:13:32,390 --> 00:13:37,010
the software it just you know since you

282
00:13:34,850 --> 00:13:38,630
broke in software basically that just

283
00:13:37,010 --> 00:13:41,600
reveals your files as soon as you start

284
00:13:38,630 --> 00:13:43,939
using it so there's like a small Asterix

285
00:13:41,600 --> 00:13:45,440
here saying that we consider this in the

286
00:13:43,940 --> 00:13:47,390
case where you already have you know the

287
00:13:45,440 --> 00:13:50,270
right software so to speak so like the

288
00:13:47,390 --> 00:13:51,830
software you get from the server and the

289
00:13:50,270 --> 00:13:55,010
server does like its best with this

290
00:13:51,830 --> 00:13:57,650
software so this is basically saying you

291
00:13:55,010 --> 00:14:00,500
have the software before and now can

292
00:13:57,650 --> 00:14:03,170
deceive her somehow abuse box or

293
00:14:00,500 --> 00:14:05,870
protocol floors or something in its own

294
00:14:03,170 --> 00:14:08,050
software to somehow break the security

295
00:14:05,870 --> 00:14:10,130
of what you have

296
00:14:08,050 --> 00:14:12,260
whereas I guess the other one here you

297
00:14:10,130 --> 00:14:16,820
can say is like is it just broken from

298
00:14:12,260 --> 00:14:19,670
like without doing anything okay

299
00:14:16,820 --> 00:14:21,440
I know this is not really that

300
00:14:19,670 --> 00:14:23,810
interesting if you don't like cryptic

301
00:14:21,440 --> 00:14:27,230
I suppose we also provide like a simple

302
00:14:23,810 --> 00:14:28,790
formal modeling of what this means these

303
00:14:27,230 --> 00:14:30,430
two things and essentially what you do

304
00:14:28,790 --> 00:14:33,740
is that you sit it up that's like a game

305
00:14:30,430 --> 00:14:35,959
you make some assumptions about how the

306
00:14:33,740 --> 00:14:38,080
user picks his password in this case you

307
00:14:35,960 --> 00:14:41,540
assume that he picks his password as

308
00:14:38,080 --> 00:14:42,860
something which has CAPA bits and he

309
00:14:41,540 --> 00:14:45,589
picks it at random which is not of

310
00:14:42,860 --> 00:14:50,300
course true in real life but it's the

311
00:14:45,590 --> 00:14:53,480
physis for a formal modeling and then

312
00:14:50,300 --> 00:14:55,520
you play like a small game and it's the

313
00:14:53,480 --> 00:14:57,830
the rules are very simple like the

314
00:14:55,520 --> 00:15:01,340
adversary he just he can ask the user to

315
00:14:57,830 --> 00:15:03,380
upload two files one of these files are

316
00:15:01,340 --> 00:15:05,300
encrypted and the server like the air

317
00:15:03,380 --> 00:15:07,460
like the guy who attacking the system he

318
00:15:05,300 --> 00:15:09,469
wins if he knows which of these files

319
00:15:07,460 --> 00:15:14,120
was actually encrypted so this is like

320
00:15:09,470 --> 00:15:16,610
the most I guess his mystic situation

321
00:15:14,120 --> 00:15:18,820
where the guy who's attacking you knows

322
00:15:16,610 --> 00:15:21,200
everything about what you're storing

323
00:15:18,820 --> 00:15:22,670
except which files use like of these

324
00:15:21,200 --> 00:15:24,320
files restoring so basically he gives

325
00:15:22,670 --> 00:15:26,030
you two files it might just be file with

326
00:15:24,320 --> 00:15:28,150
like one of them there's like a one in

327
00:15:26,030 --> 00:15:30,470
one of them there's the zero and now you

328
00:15:28,150 --> 00:15:32,120
upload one of them you don't tell the

329
00:15:30,470 --> 00:15:33,920
guy which one you upload and you just

330
00:15:32,120 --> 00:15:35,180
upload one of them and now it's secure

331
00:15:33,920 --> 00:15:37,579
if he doesn't know which one of these

332
00:15:35,180 --> 00:15:38,780
you actually store it so even if he

333
00:15:37,580 --> 00:15:40,610
knows which files you're actually

334
00:15:38,780 --> 00:15:42,620
storing as long as there's little some

335
00:15:40,610 --> 00:15:43,580
like uncertainty that's basically what

336
00:15:42,620 --> 00:15:49,930
that says but it's not like super

337
00:15:43,580 --> 00:15:49,930
important I just drew it here okay so

338
00:15:49,990 --> 00:15:53,810
everything based on the passwords we

339
00:15:52,130 --> 00:15:55,760
make like three categorizations of what

340
00:15:53,810 --> 00:15:57,410
is what an attack can be in this case

341
00:15:55,760 --> 00:15:59,510
like one of them is like okay you you

342
00:15:57,410 --> 00:16:00,860
recover the user's password and remember

343
00:15:59,510 --> 00:16:02,300
that everything in the end is like

344
00:16:00,860 --> 00:16:04,490
encrypted with the users password in

345
00:16:02,300 --> 00:16:06,410
some way so you cover the users password

346
00:16:04,490 --> 00:16:08,930
like it's game over right now you can

347
00:16:06,410 --> 00:16:10,819
decrypt everything because the attacker

348
00:16:08,930 --> 00:16:12,500
here is still the server so he has all

349
00:16:10,820 --> 00:16:14,060
the encrypted information and so on so

350
00:16:12,500 --> 00:16:18,710
there's nothing else besides the

351
00:16:14,060 --> 00:16:20,449
password essentially all right it might

352
00:16:18,710 --> 00:16:22,070
be the case that he can recover like one

353
00:16:20,450 --> 00:16:25,010
file without actually knowing the

354
00:16:22,070 --> 00:16:27,290
password as you see like we'll see how

355
00:16:25,010 --> 00:16:29,089
this could be in this case because it's

356
00:16:27,290 --> 00:16:31,069
not clear from the simple situation

357
00:16:29,089 --> 00:16:32,529
before or it might actually be because

358
00:16:31,070 --> 00:16:34,689
you might leak the

359
00:16:32,529 --> 00:16:36,100
some duration of the password but not

360
00:16:34,689 --> 00:16:37,480
the password itself so this doesn't

361
00:16:36,100 --> 00:16:39,370
reveal the password but it does reveal

362
00:16:37,480 --> 00:16:43,569
enough information to actually recover

363
00:16:39,370 --> 00:16:46,300
the file a last thing it might be

364
00:16:43,569 --> 00:16:48,099
possible that you somehow run a protocol

365
00:16:46,300 --> 00:16:49,680
that just basically weakens whatever

366
00:16:48,100 --> 00:16:52,089
information you have about the password

367
00:16:49,680 --> 00:16:53,859
beforehand so typically the way these

368
00:16:52,089 --> 00:16:55,420
protocols are like sorry these

369
00:16:53,860 --> 00:16:57,309
applications perform authentication is

370
00:16:55,420 --> 00:16:59,498
they derive like the hash the password

371
00:16:57,309 --> 00:17:01,300
basically using a strong hash function

372
00:16:59,499 --> 00:17:02,559
or like a key deviation function and it

373
00:17:01,300 --> 00:17:04,178
might be the case that you can actually

374
00:17:02,559 --> 00:17:06,609
tweak this from the server's so now

375
00:17:04,179 --> 00:17:07,809
instead of getting a good deviation of

376
00:17:06,609 --> 00:17:09,280
your password you get like a weak

377
00:17:07,809 --> 00:17:10,990
liberation that can actually be brute

378
00:17:09,280 --> 00:17:12,760
forced that's essentially what you have

379
00:17:10,990 --> 00:17:16,390
down here you're like we can the

380
00:17:12,760 --> 00:17:21,970
security by some factor greek-letter

381
00:17:16,390 --> 00:17:25,209
yes okay so some information about this

382
00:17:21,970 --> 00:17:27,010
application so as mentioned again it's a

383
00:17:25,209 --> 00:17:28,840
bit more complex or what is essentially

384
00:17:27,010 --> 00:17:31,450
happens in Spy doc is that you have the

385
00:17:28,840 --> 00:17:33,399
password you use this somehow to encrypt

386
00:17:31,450 --> 00:17:35,640
like some long-term keys these long-term

387
00:17:33,400 --> 00:17:37,990
keys are used some how to encrypt

388
00:17:35,640 --> 00:17:39,610
directory keys so you get like a key for

389
00:17:37,990 --> 00:17:41,309
each directory and these are used to

390
00:17:39,610 --> 00:17:45,580
encrypt files so you get like this nice

391
00:17:41,309 --> 00:17:47,049
nice kind of like hierarchy of keys like

392
00:17:45,580 --> 00:17:51,220
in the end from the server's point of

393
00:17:47,049 --> 00:17:52,658
view only this guy up here is unknown he

394
00:17:51,220 --> 00:17:55,030
has everything else which is of course

395
00:17:52,659 --> 00:17:56,799
encrypted but in the end he only needs

396
00:17:55,030 --> 00:18:02,230
to know this guy in order to reveal

397
00:17:56,799 --> 00:18:04,539
everything down here communication is is

398
00:18:02,230 --> 00:18:07,990
fairly simple it's like some back and

399
00:18:04,539 --> 00:18:09,370
forth to do authentication and like this

400
00:18:07,990 --> 00:18:13,330
is actually the most interesting part

401
00:18:09,370 --> 00:18:15,789
the authentication because typical

402
00:18:13,330 --> 00:18:17,710
password over TLS authentication doesn't

403
00:18:15,789 --> 00:18:19,270
work anymore so when you log in to like

404
00:18:17,710 --> 00:18:20,530
any online service essentially what

405
00:18:19,270 --> 00:18:22,809
happens is that you send your password

406
00:18:20,530 --> 00:18:24,190
and you username to this server the

407
00:18:22,809 --> 00:18:26,020
server does something to check that this

408
00:18:24,190 --> 00:18:28,090
was the right combination of username

409
00:18:26,020 --> 00:18:30,760
password and now it lets you in based on

410
00:18:28,090 --> 00:18:32,168
this obviously this doesn't work anymore

411
00:18:30,760 --> 00:18:35,260
if you cannot give the password to the

412
00:18:32,169 --> 00:18:39,309
server right so what they do instead is

413
00:18:35,260 --> 00:18:41,590
instead of using any of the protocols

414
00:18:39,309 --> 00:18:45,280
that is has been developed within the

415
00:18:41,590 --> 00:18:46,780
last 25 years on unlike authentication

416
00:18:45,280 --> 00:18:48,310
that doesn't reveal the past

417
00:18:46,780 --> 00:18:52,480
they designed like a couple of their own

418
00:18:48,310 --> 00:18:54,159
which of course doesn't work so once you

419
00:18:52,480 --> 00:18:56,890
have authenticated to the servers then

420
00:18:54,160 --> 00:18:58,470
everything is basically our PC using

421
00:18:56,890 --> 00:19:01,690
[Music]

422
00:18:58,470 --> 00:19:03,760
something from the matrix library so

423
00:19:01,690 --> 00:19:07,690
this is like a Python framework for a

424
00:19:03,760 --> 00:19:10,450
network communication and like I know

425
00:19:07,690 --> 00:19:12,190
there's a bunch of extra stuff in a

426
00:19:10,450 --> 00:19:15,280
typical crowdsource application but this

427
00:19:12,190 --> 00:19:16,780
application had something like 95 I

428
00:19:15,280 --> 00:19:18,970
think different methods that the server

429
00:19:16,780 --> 00:19:22,330
can call on the client which is like a

430
00:19:18,970 --> 00:19:24,340
lot and we also found out that this can

431
00:19:22,330 --> 00:19:25,899
also be abused in like very ease very

432
00:19:24,340 --> 00:19:29,949
silly ways essentially to break the

433
00:19:25,900 --> 00:19:31,750
security totally ok so briefly about

434
00:19:29,950 --> 00:19:35,710
encryption so basically like how does

435
00:19:31,750 --> 00:19:38,290
this this this stick figure area to the

436
00:19:35,710 --> 00:19:39,220
right what does this what so when you

437
00:19:38,290 --> 00:19:42,389
want to encrypt something in this

438
00:19:39,220 --> 00:19:45,550
application you take the password an ID

439
00:19:42,390 --> 00:19:47,110
your file you generate some random keys

440
00:19:45,550 --> 00:19:50,200
in this case like one for the file one

441
00:19:47,110 --> 00:19:52,060
for the directory you derive a key based

442
00:19:50,200 --> 00:19:54,070
on the password so using a key duration

443
00:19:52,060 --> 00:20:00,520
function this is in practice this would

444
00:19:54,070 --> 00:20:02,950
be pbkdf2 with some fixed parameters so

445
00:20:00,520 --> 00:20:05,710
basically just hashing this 10,000 times

446
00:20:02,950 --> 00:20:08,980
that's essentially what happens here you

447
00:20:05,710 --> 00:20:13,150
encrypt the file using this KF which is

448
00:20:08,980 --> 00:20:15,070
a random key you encrypt this KF with

449
00:20:13,150 --> 00:20:17,140
this KD which is another random key and

450
00:20:15,070 --> 00:20:18,909
now you encrypt this KD with the key

451
00:20:17,140 --> 00:20:21,190
from your password so this is basically

452
00:20:18,910 --> 00:20:22,420
what happens here right you have the can

453
00:20:21,190 --> 00:20:23,620
imagine you have the file down here

454
00:20:22,420 --> 00:20:25,330
somewhere and now you have this key

455
00:20:23,620 --> 00:20:27,899
encrypted with this key encrypted with

456
00:20:25,330 --> 00:20:30,610
some key up here encrypted with this one

457
00:20:27,900 --> 00:20:34,180
so that's how like this this is how it

458
00:20:30,610 --> 00:20:36,129
works more or less the reason for doing

459
00:20:34,180 --> 00:20:37,780
this is that you can imagine this

460
00:20:36,130 --> 00:20:41,770
basically as putting the key in a header

461
00:20:37,780 --> 00:20:44,350
of the file in this way it gives some

462
00:20:41,770 --> 00:20:46,120
flexibility in particular if you want to

463
00:20:44,350 --> 00:20:47,980
share a file it's enough to just send

464
00:20:46,120 --> 00:20:49,540
this key to whoever plus of course the

465
00:20:47,980 --> 00:20:51,550
cipher text to whoever you want to share

466
00:20:49,540 --> 00:20:53,110
this with and if you want to share like

467
00:20:51,550 --> 00:20:55,540
an entire directory it's also just a

468
00:20:53,110 --> 00:20:57,909
matter of sending it like one key and we

469
00:20:55,540 --> 00:20:59,889
imagine that this is like this is at

470
00:20:57,910 --> 00:21:01,870
least some of the reason why they

471
00:20:59,890 --> 00:21:06,070
this particular scheme is because it

472
00:21:01,870 --> 00:21:09,159
makes file sharing very efficient

473
00:21:06,070 --> 00:21:15,580
of course note security is entirely

474
00:21:09,160 --> 00:21:17,370
dependent on the password ok the entire

475
00:21:15,580 --> 00:21:21,629
thing is written in Python this is great

476
00:21:17,370 --> 00:21:25,090
because python is very easy to decompile

477
00:21:21,630 --> 00:21:26,320
well you can apply obfuscation to this I

478
00:21:25,090 --> 00:21:26,860
know this is something that happens in

479
00:21:26,320 --> 00:21:30,149
Dropbox

480
00:21:26,860 --> 00:21:32,409
they obfuscate their applications but

481
00:21:30,150 --> 00:21:34,780
spider one doesn't so you can take like

482
00:21:32,410 --> 00:21:36,850
any off-the-shelf Python T compiler and

483
00:21:34,780 --> 00:21:38,290
you should be able to basically unpack

484
00:21:36,850 --> 00:21:39,340
the installer that you download from

485
00:21:38,290 --> 00:21:40,720
their web page and you can just

486
00:21:39,340 --> 00:21:42,689
decompile the whole application and then

487
00:21:40,720 --> 00:21:46,210
you have some very nice readable Python

488
00:21:42,690 --> 00:21:49,090
there's like a whole lot of files that

489
00:21:46,210 --> 00:21:52,450
you have to look at here a lot of these

490
00:21:49,090 --> 00:21:54,490
are not really needed for the core

491
00:21:52,450 --> 00:21:55,840
application but there's still like a lot

492
00:21:54,490 --> 00:21:59,440
of filtering about what is actually

493
00:21:55,840 --> 00:22:01,720
relevant what is not it communicates

494
00:21:59,440 --> 00:22:04,900
over a TLS which is of course like

495
00:22:01,720 --> 00:22:07,480
needed to not be like really broken I

496
00:22:04,900 --> 00:22:09,160
suppose it doesn't mean that of course

497
00:22:07,480 --> 00:22:11,890
like man in the middle cipher texts are

498
00:22:09,160 --> 00:22:13,690
not possible we don't really care about

499
00:22:11,890 --> 00:22:14,980
this because in the end we want to

500
00:22:13,690 --> 00:22:16,990
protect against the server and the

501
00:22:14,980 --> 00:22:19,720
server is like the intended recipient of

502
00:22:16,990 --> 00:22:21,790
your data in any event so TLS doesn't

503
00:22:19,720 --> 00:22:24,010
really factor into this whole like a

504
00:22:21,790 --> 00:22:25,299
tech scenario we envision here in

505
00:22:24,010 --> 00:22:28,179
practice of course you still want to

506
00:22:25,299 --> 00:22:31,030
have TLS because otherwise like

507
00:22:28,179 --> 00:22:33,429
everybody can just read what you have or

508
00:22:31,030 --> 00:22:35,320
I guess you could say that's like if the

509
00:22:33,429 --> 00:22:37,240
application is broken and you're not

510
00:22:35,320 --> 00:22:38,710
using TLS then it's not broken only

511
00:22:37,240 --> 00:22:41,400
towards the server it's basically broken

512
00:22:38,710 --> 00:22:44,559
towards the whole world which is like

513
00:22:41,400 --> 00:22:47,200
somewhat more bad I guess somewhat

514
00:22:44,559 --> 00:22:48,730
better it does makes experimenting a bit

515
00:22:47,200 --> 00:22:51,730
difficult because it has like hard-coded

516
00:22:48,730 --> 00:22:53,710
certificates and so on so and also like

517
00:22:51,730 --> 00:22:55,900
analyzing what traffic it sends back and

518
00:22:53,710 --> 00:22:58,630
forth also becomes a lot became like

519
00:22:55,900 --> 00:23:01,840
sort of difficult the approach we took

520
00:22:58,630 --> 00:23:06,160
is the I guess you could say like the

521
00:23:01,840 --> 00:23:07,418
tried and true tested of like debugging

522
00:23:06,160 --> 00:23:08,860
by printing you know when you write a

523
00:23:07,419 --> 00:23:10,240
program you put like print statements

524
00:23:08,860 --> 00:23:12,129
everywhere to see what's actually going

525
00:23:10,240 --> 00:23:13,330
on we do the same thing because now we

526
00:23:12,130 --> 00:23:15,159
could decompile the whole thing

527
00:23:13,330 --> 00:23:17,320
and then we made use of the locking

528
00:23:15,159 --> 00:23:18,669
framework that it already had to print

529
00:23:17,320 --> 00:23:21,369
stuff all over the place in the

530
00:23:18,669 --> 00:23:25,509
application and we did this for example

531
00:23:21,369 --> 00:23:28,449
to print the the connection keys that it

532
00:23:25,509 --> 00:23:31,029
uses in the TLS so it prints this and

533
00:23:28,450 --> 00:23:32,619
now we can capture all the traffic in

534
00:23:31,029 --> 00:23:34,269
Wireshark and then we can load these

535
00:23:32,619 --> 00:23:35,470
keys into Wireshark afterwards and now

536
00:23:34,269 --> 00:23:37,029
we can actually read what it's sending

537
00:23:35,470 --> 00:23:39,429
back and forth without actually touching

538
00:23:37,029 --> 00:23:45,100
the application except for like very

539
00:23:39,429 --> 00:23:46,119
minimally some places yeah okay so the

540
00:23:45,100 --> 00:23:49,928
attacks I guess

541
00:23:46,119 --> 00:23:53,320
the interesting part the fun part we

542
00:23:49,929 --> 00:23:55,749
found four different things so one of

543
00:23:53,320 --> 00:23:57,399
them is basically you could again this

544
00:23:55,749 --> 00:23:59,049
thing where you you compute some

545
00:23:57,399 --> 00:24:02,619
deviation of the users password in

546
00:23:59,049 --> 00:24:04,720
connection to someone's dedication like

547
00:24:02,619 --> 00:24:06,879
basically it's possible to weaken this

548
00:24:04,720 --> 00:24:08,769
to a point where it most likely doesn't

549
00:24:06,879 --> 00:24:11,139
provide awesome like a adequate security

550
00:24:08,769 --> 00:24:12,399
anymore like it doesn't pretty like it

551
00:24:11,139 --> 00:24:15,488
doesn't hide the password well enough

552
00:24:12,399 --> 00:24:18,399
essentially we found two attacks that

553
00:24:15,489 --> 00:24:21,129
can recover the user's password one

554
00:24:18,399 --> 00:24:23,758
somehow requires some interaction from

555
00:24:21,129 --> 00:24:28,359
the user that you might say okay this is

556
00:24:23,759 --> 00:24:30,009
not realistic or it is realistic and if

557
00:24:28,359 --> 00:24:32,049
so if you don't believe that one we also

558
00:24:30,009 --> 00:24:33,730
found one that does the same thing but

559
00:24:32,049 --> 00:24:35,440
like now it doesn't require any

560
00:24:33,730 --> 00:24:37,299
interaction from the user at all so like

561
00:24:35,440 --> 00:24:39,100
it it can just happen silently in the

562
00:24:37,299 --> 00:24:41,590
background while the user does

563
00:24:39,100 --> 00:24:42,908
absolutely nothing and then we found an

564
00:24:41,590 --> 00:24:46,299
interesting attack which actually

565
00:24:42,909 --> 00:24:50,320
reveals files also without the use of

566
00:24:46,299 --> 00:24:52,090
doing anything but this is actually also

567
00:24:50,320 --> 00:24:53,619
happens without the server doing

568
00:24:52,090 --> 00:24:56,408
anything so this is essentially like

569
00:24:53,619 --> 00:24:59,678
certain use patterns of this application

570
00:24:56,409 --> 00:25:01,509
or like you of this feature which is

571
00:24:59,679 --> 00:25:03,129
like file sharing in this case will

572
00:25:01,509 --> 00:25:03,789
actually reveal more than it's supposed

573
00:25:03,129 --> 00:25:06,519
to

574
00:25:03,789 --> 00:25:09,190
so essentially you say I share this file

575
00:25:06,519 --> 00:25:11,049
but now you inadvertently also share

576
00:25:09,190 --> 00:25:16,509
like two other files basically something

577
00:25:11,049 --> 00:25:18,999
like this sorry yes of course like the

578
00:25:16,509 --> 00:25:21,639
required statement I we contacted them

579
00:25:18,999 --> 00:25:23,529
and they fixed it and we did this before

580
00:25:21,639 --> 00:25:26,679
we made anything public and so on and so

581
00:25:23,529 --> 00:25:28,990
forth of course

582
00:25:26,680 --> 00:25:30,670
so the first one like the uninteresting

583
00:25:28,990 --> 00:25:31,960
one because it's basically just if you

584
00:25:30,670 --> 00:25:34,440
have a good password then this doesn't

585
00:25:31,960 --> 00:25:36,640
matter if you have a bad password and

586
00:25:34,440 --> 00:25:41,290
likely this doesn't matter either

587
00:25:36,640 --> 00:25:43,090
because like usually you have a very

588
00:25:41,290 --> 00:25:44,020
terrible password or you have a password

589
00:25:43,090 --> 00:25:45,790
that it's like good enough you don't

590
00:25:44,020 --> 00:25:47,080
have a password is just like only

591
00:25:45,790 --> 00:25:49,600
slightly good enough if you had it like

592
00:25:47,080 --> 00:25:51,659
twice more than its suddenly good or

593
00:25:49,600 --> 00:25:55,139
something like somehow passwords work

594
00:25:51,660 --> 00:25:57,690
but in any event one of these

595
00:25:55,140 --> 00:26:00,130
authentication protocols that it uses is

596
00:25:57,690 --> 00:26:02,230
basically password over TLS but now the

597
00:26:00,130 --> 00:26:03,340
hashing that you usually perform on the

598
00:26:02,230 --> 00:26:05,200
server side as part of this

599
00:26:03,340 --> 00:26:06,699
authentication protocol now it happens

600
00:26:05,200 --> 00:26:09,730
on the client side as well so like this

601
00:26:06,700 --> 00:26:11,770
is a the easiest way perhaps to avoid

602
00:26:09,730 --> 00:26:13,360
the problem of sending your password to

603
00:26:11,770 --> 00:26:15,340
the server so this is essentially what

604
00:26:13,360 --> 00:26:17,379
happens so the server will send some

605
00:26:15,340 --> 00:26:19,870
random number random string to the

606
00:26:17,380 --> 00:26:23,520
client the client computes a deviation

607
00:26:19,870 --> 00:26:25,659
using in this case B crypt which is a

608
00:26:23,520 --> 00:26:29,379
it's an iterated hash function

609
00:26:25,660 --> 00:26:30,910
essentially it's like a it's a hash

610
00:26:29,380 --> 00:26:33,370
function you apply and like the on

611
00:26:30,910 --> 00:26:35,260
itself and then just do this a lot of

612
00:26:33,370 --> 00:26:38,409
times so now it's expensive to compute

613
00:26:35,260 --> 00:26:40,600
and this provides a bit more security to

614
00:26:38,410 --> 00:26:42,040
the just doing it one for example it's

615
00:26:40,600 --> 00:26:44,469
essentially our voice uses a block

616
00:26:42,040 --> 00:26:46,420
cipher what is the same thing so you

617
00:26:44,470 --> 00:26:49,060
sent this back and the server will say

618
00:26:46,420 --> 00:26:51,730
oh you know you're the person you claim

619
00:26:49,060 --> 00:26:54,909
to be if this matches some hash that it

620
00:26:51,730 --> 00:26:58,960
already has on the server right the

621
00:26:54,910 --> 00:27:00,580
problem is that in bcrypt the the the

622
00:26:58,960 --> 00:27:03,070
salt contains essentially everything

623
00:27:00,580 --> 00:27:04,600
that the client needs in order to

624
00:27:03,070 --> 00:27:07,480
compute the function in particular it

625
00:27:04,600 --> 00:27:09,909
also includes the parameters for how

626
00:27:07,480 --> 00:27:12,070
expensive this function should be so

627
00:27:09,910 --> 00:27:14,350
instead of saying that this should be 12

628
00:27:12,070 --> 00:27:15,580
which is like the default on almost all

629
00:27:14,350 --> 00:27:17,439
libraries and machines and

630
00:27:15,580 --> 00:27:23,290
recommendations which is like two to the

631
00:27:17,440 --> 00:27:24,250
twelve iterations which is some power of

632
00:27:23,290 --> 00:27:26,680
two

633
00:27:24,250 --> 00:27:29,890
I can calculate in my head right now of

634
00:27:26,680 --> 00:27:31,870
course you can basically take in like

635
00:27:29,890 --> 00:27:33,730
just push this all the way down until

636
00:27:31,870 --> 00:27:35,399
the library start like the library

637
00:27:33,730 --> 00:27:37,900
they're using start complaining that

638
00:27:35,400 --> 00:27:40,360
this is you know below what it's

639
00:27:37,900 --> 00:27:44,830
supposed to do in practice you could put

640
00:27:40,360 --> 00:27:47,050
this down to four which is now 16 so 16

641
00:27:44,830 --> 00:27:48,760
iterations of this underlying function

642
00:27:47,050 --> 00:27:52,030
which is like very very fast this is of

643
00:27:48,760 --> 00:27:54,790
course not enough this is like like way

644
00:27:52,030 --> 00:27:58,840
way less than is recommended in the

645
00:27:54,790 --> 00:28:01,450
original bcrypt paper from 92 so of

646
00:27:58,840 --> 00:28:05,350
course it's also not enough in 2017 or

647
00:28:01,450 --> 00:28:08,020
18 or 19 it's a fact to rate downgrade

648
00:28:05,350 --> 00:28:10,179
in principle this is essentially getting

649
00:28:08,020 --> 00:28:11,830
like an md5 like in terms of computation

650
00:28:10,180 --> 00:28:13,570
required and so on it's essentially

651
00:28:11,830 --> 00:28:16,000
getting an empty 5 of the users password

652
00:28:13,570 --> 00:28:21,189
something like this which is not enough

653
00:28:16,000 --> 00:28:22,660
in practice but this of course doesn't

654
00:28:21,190 --> 00:28:24,880
reveal anything it just makes it easier

655
00:28:22,660 --> 00:28:28,630
for already weak passwords to be broken

656
00:28:24,880 --> 00:28:29,530
basically so the first password

657
00:28:28,630 --> 00:28:31,180
recoveries

658
00:28:29,530 --> 00:28:32,410
so again this is again an attack on one

659
00:28:31,180 --> 00:28:36,910
of these authentication protocols

660
00:28:32,410 --> 00:28:38,950
interestingly they had four

661
00:28:36,910 --> 00:28:41,350
authentication protocols that we

662
00:28:38,950 --> 00:28:42,880
discover in the application so the

663
00:28:41,350 --> 00:28:44,560
weight of indicates is or the weight

664
00:28:42,880 --> 00:28:46,450
runs these protocols is the server tells

665
00:28:44,560 --> 00:28:48,879
the client please run this protocol and

666
00:28:46,450 --> 00:28:51,640
now they run a protocol and stuff

667
00:28:48,880 --> 00:28:53,680
happens there's like four of these in

668
00:28:51,640 --> 00:28:55,360
the application and it only ever used

669
00:28:53,680 --> 00:28:56,800
two of them when we looked at how it

670
00:28:55,360 --> 00:28:59,830
operated when you just used it normally

671
00:28:56,800 --> 00:29:01,659
but of course if we assume the the

672
00:28:59,830 --> 00:29:03,189
server just does whatever it wants it

673
00:29:01,660 --> 00:29:05,620
can just tell the client to run you know

674
00:29:03,190 --> 00:29:07,300
one of these protocols that might be not

675
00:29:05,620 --> 00:29:08,560
used anymore for example or might be

676
00:29:07,300 --> 00:29:11,710
used for different things in this case

677
00:29:08,560 --> 00:29:13,690
it's not used in the client server

678
00:29:11,710 --> 00:29:17,020
setting it's used in most likely

679
00:29:13,690 --> 00:29:18,550
something else and like an and key

680
00:29:17,020 --> 00:29:20,680
escrow setting which is basically what

681
00:29:18,550 --> 00:29:23,590
this does anyways so what how this works

682
00:29:20,680 --> 00:29:26,080
is that the server can say run this

683
00:29:23,590 --> 00:29:30,040
protocol and here is a list of RSA keys

684
00:29:26,080 --> 00:29:32,290
and here is a random number okay so now

685
00:29:30,040 --> 00:29:35,139
the client first it does something it

686
00:29:32,290 --> 00:29:37,000
computes like a function of this list it

687
00:29:35,140 --> 00:29:37,659
computes a fingerprint using some RFC

688
00:29:37,000 --> 00:29:40,119
that is

689
00:29:37,659 --> 00:29:42,700
also from the late 90s it tells you how

690
00:29:40,119 --> 00:29:45,249
to take a binary string then chop it

691
00:29:42,700 --> 00:29:47,139
into pieces and then map these pieces to

692
00:29:45,249 --> 00:29:49,299
English words and then how to display

693
00:29:47,139 --> 00:29:52,059
this string as a as a list of English

694
00:29:49,299 --> 00:29:53,470
words basically so what it does so

695
00:29:52,059 --> 00:29:56,080
that's basically what it does it hashes

696
00:29:53,470 --> 00:29:58,029
the fingerprint or sorry it hashes this

697
00:29:56,080 --> 00:29:59,830
list of keys it uses this thing to

698
00:29:58,029 --> 00:30:02,289
convert it into a string of numbers it

699
00:29:59,830 --> 00:30:04,600
displaces to the user and the user is

700
00:30:02,289 --> 00:30:06,820
asked you know do I trust this random

701
00:30:04,600 --> 00:30:08,469
like the string of random numbers if yes

702
00:30:06,820 --> 00:30:14,139
click you know continue if no click

703
00:30:08,470 --> 00:30:16,539
cancel if the user clicks continue then

704
00:30:14,139 --> 00:30:19,059
you use these keys to basically encrypt

705
00:30:16,539 --> 00:30:21,309
a concatenation of the password and the

706
00:30:19,059 --> 00:30:22,570
challenge and then just like iterated

707
00:30:21,309 --> 00:30:26,499
and now he sent this back to the server

708
00:30:22,570 --> 00:30:28,418
of course the attacker is is clear if we

709
00:30:26,499 --> 00:30:30,279
ignored this fingerprint the thing for a

710
00:30:28,419 --> 00:30:32,889
moment is that the server just picks his

711
00:30:30,279 --> 00:30:35,979
own keys right so he picks some keys he

712
00:30:32,889 --> 00:30:37,539
asks the user to encrypt what is

713
00:30:35,979 --> 00:30:40,090
basically his password on this challenge

714
00:30:37,539 --> 00:30:43,149
under keys that he know how to decrypt

715
00:30:40,090 --> 00:30:45,488
and of course this learns like this

716
00:30:43,149 --> 00:30:47,469
reveals the password to the server as a

717
00:30:45,489 --> 00:30:49,720
small aside if this we also found that

718
00:30:47,470 --> 00:30:51,309
if this list is empty the user will just

719
00:30:49,720 --> 00:30:53,769
like the client will just send back this

720
00:30:51,309 --> 00:30:55,059
thing like unencrypted also so you don't

721
00:30:53,769 --> 00:30:57,489
actually even need to have the keys you

722
00:30:55,059 --> 00:30:59,649
can just send nothing and then you just

723
00:30:57,489 --> 00:31:03,460
get back the password so like it saves a

724
00:30:59,649 --> 00:31:07,570
bit of work on the server I guess yeah

725
00:31:03,460 --> 00:31:10,419
of course this is what's it so but when

726
00:31:07,570 --> 00:31:13,299
we change this list yeah so you get

727
00:31:10,419 --> 00:31:16,059
these this string of random words that

728
00:31:13,299 --> 00:31:19,749
the user have to accept so the question

729
00:31:16,059 --> 00:31:22,299
is like how realistic is it that a user

730
00:31:19,749 --> 00:31:23,470
will accept it and in this case we argue

731
00:31:22,299 --> 00:31:25,330
that it's very realistic because

732
00:31:23,470 --> 00:31:28,080
together with this list of words you

733
00:31:25,330 --> 00:31:30,189
also get this nice warning which it says

734
00:31:28,080 --> 00:31:31,599
something about this fingerprint phrase

735
00:31:30,190 --> 00:31:33,070
and it also says that if you have not

736
00:31:31,599 --> 00:31:36,580
been giving this fingerprint before then

737
00:31:33,070 --> 00:31:38,279
just click yes anyway which is you can

738
00:31:36,580 --> 00:31:40,539
sort of compare this to like a

739
00:31:38,279 --> 00:31:43,059
certificate you get on when you visit a

740
00:31:40,539 --> 00:31:44,499
webpage right and obviously if your

741
00:31:43,059 --> 00:31:46,119
browser says I don't trust the

742
00:31:44,499 --> 00:31:48,129
certificate it shouldn't be you know I

743
00:31:46,119 --> 00:31:50,649
have not seen this certificate before so

744
00:31:48,129 --> 00:31:51,309
just click yes which is probably what

745
00:31:50,649 --> 00:31:53,379
most users

746
00:31:51,309 --> 00:31:57,490
do anyway but it shouldn't be encouraged

747
00:31:53,379 --> 00:31:59,740
by the application at least they fixed

748
00:31:57,490 --> 00:32:01,419
this by well not really fixing this

749
00:31:59,740 --> 00:32:03,220
protocol because I we believe they use

750
00:32:01,419 --> 00:32:05,110
it for their enterprise products because

751
00:32:03,220 --> 00:32:08,019
it does provide a form of escrowing

752
00:32:05,110 --> 00:32:10,149
encryption keys and passwords but they

753
00:32:08,019 --> 00:32:11,799
fix this wedding so now it doesn't say

754
00:32:10,149 --> 00:32:14,289
that you should just ignore you know

755
00:32:11,799 --> 00:32:16,629
comment logic and just accept whatever

756
00:32:14,289 --> 00:32:18,549
it starts to do but it is it is a proper

757
00:32:16,629 --> 00:32:24,639
thing in like software right it's trust

758
00:32:18,549 --> 00:32:28,299
and first used in this case yes so file

759
00:32:24,639 --> 00:32:30,729
recovery I'll take this this is the one

760
00:32:28,299 --> 00:32:32,769
night mentioned where it's basically

761
00:32:30,730 --> 00:32:34,659
like a use pattern that ends up breaking

762
00:32:32,769 --> 00:32:36,549
the application or like the security of

763
00:32:34,659 --> 00:32:38,110
some of your files and paste in some

764
00:32:36,549 --> 00:32:42,789
sense the server actually doesn't have

765
00:32:38,110 --> 00:32:45,668
to do anything in this this case so it's

766
00:32:42,789 --> 00:32:49,119
based on how this encryption works so if

767
00:32:45,669 --> 00:32:50,889
you share a directory this happens by

768
00:32:49,119 --> 00:32:52,570
revealing this directory key so you had

769
00:32:50,889 --> 00:32:53,979
this you encrypt the file with like a

770
00:32:52,570 --> 00:32:56,168
directory key and these keys are

771
00:32:53,980 --> 00:32:57,879
encrypted with your password essentially

772
00:32:56,169 --> 00:32:59,799
but now if all the files in a specific

773
00:32:57,879 --> 00:33:01,299
directory is encrypted with like the

774
00:32:59,799 --> 00:33:03,369
same key if you just reveal this

775
00:33:01,299 --> 00:33:05,110
directory key the server can actually

776
00:33:03,369 --> 00:33:06,610
recover all the phone like individual

777
00:33:05,110 --> 00:33:09,050
file keys and now all the individual

778
00:33:06,610 --> 00:33:10,590
files so that's how it works

779
00:33:09,050 --> 00:33:13,059
[Music]

780
00:33:10,590 --> 00:33:14,980
the problem is that when you start

781
00:33:13,059 --> 00:33:19,210
moving files around in like a directory

782
00:33:14,980 --> 00:33:21,639
on your computer this is not really

783
00:33:19,210 --> 00:33:23,649
reflected in these keys so in like there

784
00:33:21,639 --> 00:33:25,799
doesn't there's no like rien krypton of

785
00:33:23,649 --> 00:33:27,969
these keys so somehow like there's a

786
00:33:25,799 --> 00:33:30,519
there's mismatch and like the view the

787
00:33:27,970 --> 00:33:32,230
application half of your directories and

788
00:33:30,519 --> 00:33:36,220
the view that you have of your

789
00:33:32,230 --> 00:33:37,899
directories and yeah these directory

790
00:33:36,220 --> 00:33:39,279
keys never rotate it so it's quite easy

791
00:33:37,899 --> 00:33:42,369
to come up with like scenarios where

792
00:33:39,279 --> 00:33:44,769
this is bad so for example if you have a

793
00:33:42,369 --> 00:33:46,269
directory with some files you move one

794
00:33:44,769 --> 00:33:48,369
of them to a different directory and

795
00:33:46,269 --> 00:33:52,710
then you share the old one now because

796
00:33:48,369 --> 00:33:55,149
of these things up here I mentioned here

797
00:33:52,710 --> 00:33:58,330
when you move this to a different

798
00:33:55,149 --> 00:34:00,459
directory the encryption of this guy is

799
00:33:58,330 --> 00:34:03,100
not updated so it's actually still

800
00:34:00,460 --> 00:34:04,630
secured under whatever key is associated

801
00:34:03,100 --> 00:34:06,820
with this old directory and now

802
00:34:04,630 --> 00:34:10,840
you share the old directory this also

803
00:34:06,820 --> 00:34:13,210
reveals the file you moved away right so

804
00:34:10,840 --> 00:34:14,649
like this is and it's quite easy to

805
00:34:13,210 --> 00:34:16,360
think of like scenarios in real life

806
00:34:14,649 --> 00:34:18,100
what this applies right it's like this

807
00:34:16,360 --> 00:34:20,860
is all your vacation photos and this is

808
00:34:18,100 --> 00:34:22,770
like a particularly not shareable

809
00:34:20,860 --> 00:34:24,879
vacation photo right you move it to a

810
00:34:22,770 --> 00:34:26,949
private folder and then you share your

811
00:34:24,879 --> 00:34:29,168
vacation photos but now the server has

812
00:34:26,949 --> 00:34:33,219
all your vacation photos right obviously

813
00:34:29,168 --> 00:34:35,739
you don't want this to happen the sort

814
00:34:33,219 --> 00:34:39,189
of like reverse also happens if you have

815
00:34:35,739 --> 00:34:41,080
a directory with like shared files say

816
00:34:39,190 --> 00:34:42,820
this from before you can like keep

817
00:34:41,080 --> 00:34:44,379
adding stuff to it it will be encrypted

818
00:34:42,820 --> 00:34:46,149
under a key that the server already know

819
00:34:44,379 --> 00:34:48,219
so now it's also like intuitively shared

820
00:34:46,149 --> 00:34:50,500
when you do this if you stop sharing

821
00:34:48,219 --> 00:34:52,359
this directory because these directory

822
00:34:50,500 --> 00:34:54,010
keys are not updated when you now add

823
00:34:52,360 --> 00:34:57,100
new files to a directory that is no

824
00:34:54,010 --> 00:34:59,620
longer supposed to be shared it's still

825
00:34:57,100 --> 00:35:01,779
going to be encrypted using a key that

826
00:34:59,620 --> 00:35:03,100
the server knows right so this also

827
00:35:01,780 --> 00:35:05,110
provides like this provides some sort of

828
00:35:03,100 --> 00:35:08,560
like false sense of security essentially

829
00:35:05,110 --> 00:35:09,910
for a directory that you're you know you

830
00:35:08,560 --> 00:35:12,400
don't think is shared but it's actually

831
00:35:09,910 --> 00:35:14,649
shared because it happened to be shared

832
00:35:12,400 --> 00:35:16,720
some somehow in the past and I guess

833
00:35:14,650 --> 00:35:22,150
like these two situations in particular

834
00:35:16,720 --> 00:35:23,560
are can be bad right in if you use this

835
00:35:22,150 --> 00:35:25,090
application for a long time you like

836
00:35:23,560 --> 00:35:26,950
keep adding directories you keep moving

837
00:35:25,090 --> 00:35:29,650
stuff around and so on like at some

838
00:35:26,950 --> 00:35:31,060
point I COO knows what is actually known

839
00:35:29,650 --> 00:35:33,270
by the server and which is not right

840
00:35:31,060 --> 00:35:33,270
okay

841
00:35:33,700 --> 00:35:45,009
so then yeah beause I guess this is

842
00:35:41,560 --> 00:35:47,680
worth stressing that in both of these

843
00:35:45,010 --> 00:35:49,780
cases you actually take specific actions

844
00:35:47,680 --> 00:35:53,140
right in this case in step two here in

845
00:35:49,780 --> 00:35:54,460
this case also step two like the the

846
00:35:53,140 --> 00:35:56,290
user actually takes like specific

847
00:35:54,460 --> 00:35:59,050
actions to avoid sharing files in this

848
00:35:56,290 --> 00:36:01,540
case but somehow like security like the

849
00:35:59,050 --> 00:36:08,410
privacy of his files are still like not

850
00:36:01,540 --> 00:36:11,410
there okay so finally the completely

851
00:36:08,410 --> 00:36:14,020
silent password recovery doesn't use

852
00:36:11,410 --> 00:36:16,230
that protocols are broken it just uses I

853
00:36:14,020 --> 00:36:16,230
guess

854
00:36:16,870 --> 00:36:23,900
dead code and bad programming I suppose

855
00:36:20,440 --> 00:36:25,910
anyways after installation in order to

856
00:36:23,900 --> 00:36:29,390
like authenticate automatically

857
00:36:25,910 --> 00:36:31,399
basically when you start up the your

858
00:36:29,390 --> 00:36:33,799
application after you put and so on this

859
00:36:31,400 --> 00:36:35,090
happens because the password is

860
00:36:33,800 --> 00:36:36,560
basically stored in plain text on your

861
00:36:35,090 --> 00:36:38,090
own computer it also means that if

862
00:36:36,560 --> 00:36:40,430
you're using Spyder most likely you

863
00:36:38,090 --> 00:36:41,780
shouldn't lose your computer because if

864
00:36:40,430 --> 00:36:43,069
somebody gets access to the files in

865
00:36:41,780 --> 00:36:44,570
this computer they actually also gets

866
00:36:43,070 --> 00:36:47,540
access to the password that you're using

867
00:36:44,570 --> 00:36:49,160
even if it was like turned off at least

868
00:36:47,540 --> 00:36:52,910
if they're still doing what they're

869
00:36:49,160 --> 00:36:54,440
doing here which I think there are but

870
00:36:52,910 --> 00:36:56,600
they stored the user's password in clear

871
00:36:54,440 --> 00:36:58,280
text plain text on the user's machine

872
00:36:56,600 --> 00:37:00,080
because this means you don't have to

873
00:36:58,280 --> 00:37:01,520
input it to the application every times

874
00:37:00,080 --> 00:37:03,319
it starts because now I can just run

875
00:37:01,520 --> 00:37:04,610
whatever authentication protocol it's

876
00:37:03,320 --> 00:37:07,100
supposed to run with the server just

877
00:37:04,610 --> 00:37:10,520
runs it normally like automatically

878
00:37:07,100 --> 00:37:12,020
right we found some like our similar

879
00:37:10,520 --> 00:37:13,400
methods that most likely have to do with

880
00:37:12,020 --> 00:37:14,960
like debugging and so on which is like

881
00:37:13,400 --> 00:37:17,600
you can give it a file path and then it

882
00:37:14,960 --> 00:37:19,220
returns the content of this file so now

883
00:37:17,600 --> 00:37:23,569
you might imagine like what they what

884
00:37:19,220 --> 00:37:26,270
the attack here might be right it's that

885
00:37:23,570 --> 00:37:28,040
we could like it accepted the file like

886
00:37:26,270 --> 00:37:31,100
the the path for the file containing the

887
00:37:28,040 --> 00:37:32,779
user's password as for this method so

888
00:37:31,100 --> 00:37:35,299
basically the server can can tell the

889
00:37:32,780 --> 00:37:37,010
user or the client can sell it please

890
00:37:35,300 --> 00:37:40,160
send me the content of this file I need

891
00:37:37,010 --> 00:37:41,510
it for debugging and now the client will

892
00:37:40,160 --> 00:37:42,859
just send back this file that already

893
00:37:41,510 --> 00:37:47,150
contains the user's password in clear

894
00:37:42,860 --> 00:37:51,980
text which is like yeah the check here

895
00:37:47,150 --> 00:37:53,900
is it's it's not sufficient to to guard

896
00:37:51,980 --> 00:37:55,970
against this attack so it's like there's

897
00:37:53,900 --> 00:37:57,590
all of these like interesting protocols

898
00:37:55,970 --> 00:38:00,410
they write and so on and then in the end

899
00:37:57,590 --> 00:38:02,720
like the most broken part of this is

900
00:38:00,410 --> 00:38:04,040
just like I don't know old code the fix

901
00:38:02,720 --> 00:38:05,270
they had for this one was just to remove

902
00:38:04,040 --> 00:38:10,790
these methods because they were not used

903
00:38:05,270 --> 00:38:14,090
according to them so yeah I guess yeah

904
00:38:10,790 --> 00:38:17,870
so some conclusions like I'm a bit ahead

905
00:38:14,090 --> 00:38:21,800
of time I think but okay yeah like I

906
00:38:17,870 --> 00:38:25,220
have one slight web so some takeaways I

907
00:38:21,800 --> 00:38:27,560
think so it's not just attacks the main

908
00:38:25,220 --> 00:38:29,509
interesting part is authentication like

909
00:38:27,560 --> 00:38:34,578
authentication in this case is the

910
00:38:29,510 --> 00:38:36,049
reason for all of the attacks except the

911
00:38:34,579 --> 00:38:38,660
one with the file-sharing and moving

912
00:38:36,049 --> 00:38:39,890
stuff around and so on but the fact that

913
00:38:38,660 --> 00:38:41,750
they have to come up with like their own

914
00:38:39,890 --> 00:38:42,980
authentication protocols in order to get

915
00:38:41,750 --> 00:38:44,809
around the fact that you have to send

916
00:38:42,980 --> 00:38:47,059
the password and so on just breaks

917
00:38:44,809 --> 00:38:48,740
everything and it's in particularly bad

918
00:38:47,059 --> 00:38:50,930
in this case because the password that

919
00:38:48,740 --> 00:38:53,180
you enter in order to say I'm whoever I

920
00:38:50,930 --> 00:38:55,759
claim to be is also the password that

921
00:38:53,180 --> 00:38:56,808
you use to encrypt your files so now if

922
00:38:55,760 --> 00:38:58,359
they've right like a broken

923
00:38:56,809 --> 00:39:02,720
authentication protocol which they did

924
00:38:58,359 --> 00:39:05,270
at least twice here you also break like

925
00:39:02,720 --> 00:39:10,250
the security of the confidentiality of

926
00:39:05,270 --> 00:39:12,530
your files basically the application is

927
00:39:10,250 --> 00:39:15,890
somewhat over permissive in these RPC

928
00:39:12,530 --> 00:39:18,829
methods and this also ties somehow into

929
00:39:15,890 --> 00:39:21,078
the threat model that we used it's like

930
00:39:18,829 --> 00:39:22,880
in the end it's not clear like how what

931
00:39:21,079 --> 00:39:24,380
exactly is the trust like the the threat

932
00:39:22,880 --> 00:39:25,970
model that they're using they claim to

933
00:39:24,380 --> 00:39:29,170
you know oh you shouldn't be able to

934
00:39:25,970 --> 00:39:31,430
trust us but of course this is somehow

935
00:39:29,170 --> 00:39:34,010
at least if you care about it it's not

936
00:39:31,430 --> 00:39:36,950
really that it doesn't tell you much

937
00:39:34,010 --> 00:39:38,540
about like the actual security so the

938
00:39:36,950 --> 00:39:40,609
application is somewhat overly

939
00:39:38,540 --> 00:39:44,299
permissive in the in how much the server

940
00:39:40,609 --> 00:39:47,589
is allowed to do is this an issue maybe

941
00:39:44,299 --> 00:39:49,910
depends on how much you trust the server

942
00:39:47,589 --> 00:39:52,160
trust this application if the

943
00:39:49,910 --> 00:39:53,868
application designers are like upfront

944
00:39:52,160 --> 00:39:55,490
at the beginning saying like this is the

945
00:39:53,869 --> 00:39:56,690
specific threat model that we use then

946
00:39:55,490 --> 00:39:58,759
it's easier to say that okay

947
00:39:56,690 --> 00:40:02,510
this matches my expectations of security

948
00:39:58,760 --> 00:40:03,890
from this product or if it doesn't then

949
00:40:02,510 --> 00:40:05,809
you just don't use it instead of this

950
00:40:03,890 --> 00:40:07,368
thing where you think that you know the

951
00:40:05,809 --> 00:40:08,510
claim they have on their front page it's

952
00:40:07,369 --> 00:40:10,670
like oh it means that you know

953
00:40:08,510 --> 00:40:12,970
regardless of what happens my files are

954
00:40:10,670 --> 00:40:15,710
still secure which is not the case here

955
00:40:12,970 --> 00:40:17,240
well the security provider should match

956
00:40:15,710 --> 00:40:21,040
the claims I think that's like an

957
00:40:17,240 --> 00:40:24,799
obvious one of course

958
00:40:21,040 --> 00:40:27,890
somehow formalizing the security

959
00:40:24,799 --> 00:40:30,200
provided in a way that makes it you know

960
00:40:27,890 --> 00:40:32,328
somehow equivalent to these nice claims

961
00:40:30,200 --> 00:40:34,939
they have on the front page is hardly a

962
00:40:32,329 --> 00:40:37,809
trivial thing to do it's like it's a

963
00:40:34,940 --> 00:40:39,829
very non trivial thing to do actually

964
00:40:37,809 --> 00:40:42,870
but there should be at least more than

965
00:40:39,829 --> 00:40:47,610
just this pitch sales pitch

966
00:40:42,870 --> 00:40:49,230
justbe I think and yeah if they use like

967
00:40:47,610 --> 00:40:51,780
custom-made protocols they should be

968
00:40:49,230 --> 00:40:54,840
possible to order these protocols in

969
00:40:51,780 --> 00:40:56,940
this case it's easy or an easy ish to

970
00:40:54,840 --> 00:40:58,260
audit the protocols because like in the

971
00:40:56,940 --> 00:41:01,260
end the application was written in

972
00:40:58,260 --> 00:41:03,030
Python so that it like took that removed

973
00:41:01,260 --> 00:41:05,160
like it's large requirement of having to

974
00:41:03,030 --> 00:41:06,950
debug its program but if you want to or

975
00:41:05,160 --> 00:41:10,290
like audit some of these other

976
00:41:06,950 --> 00:41:11,669
applications that also does encryption

977
00:41:10,290 --> 00:41:14,070
and so on and then the only thing you

978
00:41:11,670 --> 00:41:16,290
have to work with is like a compile C++

979
00:41:14,070 --> 00:41:17,910
program or something then it's like

980
00:41:16,290 --> 00:41:21,240
suddenly this is a lot harder to do of

981
00:41:17,910 --> 00:41:22,740
course right so it should be possible

982
00:41:21,240 --> 00:41:25,709
they should at least like describe how

983
00:41:22,740 --> 00:41:28,500
these protocol works I said I don't

984
00:41:25,710 --> 00:41:31,590
think there's any case of anything in

985
00:41:28,500 --> 00:41:35,070
the history of software where anybody

986
00:41:31,590 --> 00:41:36,810
has well I was going to be has gained

987
00:41:35,070 --> 00:41:38,790
anything by you like designing their own

988
00:41:36,810 --> 00:41:41,970
protocol and somehow pacing security

989
00:41:38,790 --> 00:41:44,610
partly or in total on this protocol

990
00:41:41,970 --> 00:41:46,589
somehow being hidden from everybody else

991
00:41:44,610 --> 00:41:50,100
like it doesn't work it doesn't work in

992
00:41:46,590 --> 00:41:54,060
cryptography and I doubt that it works

993
00:41:50,100 --> 00:42:00,860
in protocol design as well so that's it

994
00:41:54,060 --> 00:42:00,860
basically so questions yes

995
00:42:03,749 --> 00:42:08,468
um thank you for the talk I was

996
00:42:06,329 --> 00:42:11,559
interesting at home am i understanding

997
00:42:08,469 --> 00:42:14,559
correctly that the sharing feature

998
00:42:11,559 --> 00:42:16,660
actually isn't meant to be and and

999
00:42:14,559 --> 00:42:18,819
encrypted you normally just reveal the

1000
00:42:16,660 --> 00:42:20,680
content of the yep you just reveal in

1001
00:42:18,819 --> 00:42:24,069
this application you just revealed the

1002
00:42:20,680 --> 00:42:26,499
content to the server is that um I mean

1003
00:42:24,069 --> 00:42:29,140
obviously like there are things that

1004
00:42:26,499 --> 00:42:30,910
have end end file sharing where like for

1005
00:42:29,140 --> 00:42:32,618
all their talk about zero knowledge I'm

1006
00:42:30,910 --> 00:42:35,499
very surprised to learn that that's the

1007
00:42:32,619 --> 00:42:37,059
intended design of it I wonder do do you

1008
00:42:35,499 --> 00:42:39,218
think they make that clear to users at

1009
00:42:37,059 --> 00:42:40,719
all I've never actually used the

1010
00:42:39,219 --> 00:42:42,249
software but I've seen it advertised and

1011
00:42:40,719 --> 00:42:44,829
it this seems totally counter to their

1012
00:42:42,249 --> 00:42:47,919
yes so like it's very strange

1013
00:42:44,829 --> 00:42:51,999
the this file-sharing thingy where you

1014
00:42:47,920 --> 00:42:53,709
just reveal stuff partly one of the

1015
00:42:51,999 --> 00:42:55,538
reasons we wanted to look at this

1016
00:42:53,709 --> 00:42:57,848
particular piece of software in the

1017
00:42:55,539 --> 00:43:00,489
beginning is they have it here is that

1018
00:42:57,849 --> 00:43:02,529
this thing they call no knowledge yeah

1019
00:43:00,489 --> 00:43:03,880
which is totally used to be called

1020
00:43:02,529 --> 00:43:05,589
sterile knowledge at some point which

1021
00:43:03,880 --> 00:43:08,349
means a total different thing if you

1022
00:43:05,589 --> 00:43:09,969
study cryptography so it's that was like

1023
00:43:08,349 --> 00:43:11,829
a large red flag in the beginning it's

1024
00:43:09,969 --> 00:43:15,249
like oh they use this word and I don't

1025
00:43:11,829 --> 00:43:17,920
think they know what it means but yeah

1026
00:43:15,249 --> 00:43:21,218
they don't for the file-sharing no they

1027
00:43:17,920 --> 00:43:22,719
don't it's it's different from for

1028
00:43:21,219 --> 00:43:24,729
example something like megaupload where

1029
00:43:22,719 --> 00:43:26,079
the key is actually like the whole thing

1030
00:43:24,729 --> 00:43:27,759
happens in your browser so now it's

1031
00:43:26,079 --> 00:43:30,249
actually proper in to end encrypt it

1032
00:43:27,759 --> 00:43:32,289
also for like sharing of files it's not

1033
00:43:30,249 --> 00:43:33,759
revealed to the client but not in this

1034
00:43:32,289 --> 00:43:35,469
case known in this case it's just you

1035
00:43:33,759 --> 00:43:38,349
revealed this content to the server and

1036
00:43:35,469 --> 00:43:39,999
now the server access essentially like a

1037
00:43:38,349 --> 00:43:42,130
normal file sharing system but is that

1038
00:43:39,999 --> 00:43:43,448
like clear in the user interface like

1039
00:43:42,130 --> 00:43:46,449
when you install the software and use it

1040
00:43:43,449 --> 00:43:49,059
do do you think most users or paying for

1041
00:43:46,449 --> 00:43:50,680
SpiderOak or for finals yeah I think so

1042
00:43:49,059 --> 00:43:53,140
I seem to remember that this is like

1043
00:43:50,680 --> 00:43:55,149
they mentioned this they have like a

1044
00:43:53,140 --> 00:43:56,499
bunch of caveats also like if you log

1045
00:43:55,150 --> 00:43:58,900
into their whip-like

1046
00:43:56,499 --> 00:44:01,390
log into your account on their website

1047
00:43:58,900 --> 00:44:03,420
they also have like a small footnote

1048
00:44:01,390 --> 00:44:05,199
saying now it doesn't apply anymore this

1049
00:44:03,420 --> 00:44:06,519
file-sharing because you log in with

1050
00:44:05,199 --> 00:44:08,979
your password and this is normal

1051
00:44:06,519 --> 00:44:13,299
password over TLS when you log into the

1052
00:44:08,979 --> 00:44:15,189
website it's just like so yeah so when

1053
00:44:13,299 --> 00:44:18,670
when they fix this

1054
00:44:15,190 --> 00:44:20,080
bugged or RPC method for asking the

1055
00:44:18,670 --> 00:44:21,130
client for the password did they do an

1056
00:44:20,080 --> 00:44:24,640
advisory about that

1057
00:44:21,130 --> 00:44:27,490
no they wrote a blog post which i think

1058
00:44:24,640 --> 00:44:28,930
is now it might be lost now because they

1059
00:44:27,490 --> 00:44:30,310
redesigned their webpage so now

1060
00:44:28,930 --> 00:44:32,410
conveniently they lost a lot of stuff

1061
00:44:30,310 --> 00:44:34,360
was it written about in the media at all

1062
00:44:32,410 --> 00:44:37,359
like I was right it was like it wasn't

1063
00:44:34,360 --> 00:44:40,150
there like I was interviewed for an

1064
00:44:37,360 --> 00:44:43,990
article for version 2 like fishmoto like

1065
00:44:40,150 --> 00:44:50,950
a Danish thing so oh thank you for the

1066
00:44:43,990 --> 00:44:53,970
research and any other questions no then

1067
00:44:50,950 --> 00:44:58,000
let's give a spin

1068
00:44:53,970 --> 00:44:58,000
[Applause]

