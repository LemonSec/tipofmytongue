1
00:00:26,020 --> 00:00:31,759
please welcome all parts we'll be

2
00:00:29,210 --> 00:00:38,090
talking about EXO as a functional clue

3
00:00:31,760 --> 00:00:41,840
Linux distro thanks a lot

4
00:00:38,090 --> 00:00:44,870
so my name is Robert I'm very happy to

5
00:00:41,840 --> 00:00:48,230
be here just a quick show of hands

6
00:00:44,870 --> 00:00:52,610
anybody heard of Nick's OS before how

7
00:00:48,230 --> 00:00:55,099
anybody using it right now that's good

8
00:00:52,610 --> 00:00:58,309
if everybody had used it you would know

9
00:00:55,100 --> 00:00:59,780
everything I was about to say but I'm

10
00:00:58,309 --> 00:01:03,979
glad everybody has heard about it

11
00:00:59,780 --> 00:01:06,500
basically so yeah I'll be talking about

12
00:01:03,979 --> 00:01:10,880
Nick's OS and just to give you a

13
00:01:06,500 --> 00:01:13,010
background about Who I am and why I kind

14
00:01:10,880 --> 00:01:17,899
of got interested in Nick's and Nick's

15
00:01:13,010 --> 00:01:22,430
OS so I'm working my day job is as a

16
00:01:17,900 --> 00:01:24,229
programmer and me yes I think many other

17
00:01:22,430 --> 00:01:26,299
programmers run into the problem of

18
00:01:24,229 --> 00:01:29,300
working on several projects at the same

19
00:01:26,299 --> 00:01:32,780
time where the different projects of

20
00:01:29,300 --> 00:01:36,740
course depend on incompatible versions

21
00:01:32,780 --> 00:01:39,080
of some compiler or some library so you

22
00:01:36,740 --> 00:01:40,039
have to juggle these dependencies when

23
00:01:39,080 --> 00:01:44,120
you're working on your different

24
00:01:40,040 --> 00:01:47,110
projects and many people solve this by

25
00:01:44,120 --> 00:01:51,310
using some kind of darker solution or

26
00:01:47,110 --> 00:01:55,430
some programming languages have like

27
00:01:51,310 --> 00:01:57,980
language specific tooling like a Haskell

28
00:01:55,430 --> 00:01:59,600
world has this stack which is quite nice

29
00:01:57,980 --> 00:02:03,680
and it lets you work with several

30
00:01:59,600 --> 00:02:08,959
versions of Haskell compiler quite quite

31
00:02:03,680 --> 00:02:14,000
nicely but at this time in 2014 I was

32
00:02:08,959 --> 00:02:15,500
working in Perl which at least I didn't

33
00:02:14,000 --> 00:02:18,200
find a good way to work with different

34
00:02:15,500 --> 00:02:20,390
versions of Perl and different packages

35
00:02:18,200 --> 00:02:23,750
Perl packages at the same time so I was

36
00:02:20,390 --> 00:02:26,179
looking around for a nice solution and

37
00:02:23,750 --> 00:02:30,049
eventually I kind of ran into a package

38
00:02:26,180 --> 00:02:32,870
manager called Nicks and quite soon I

39
00:02:30,049 --> 00:02:35,870
became a contributor with different

40
00:02:32,870 --> 00:02:37,350
packages expect jizz and eventually I

41
00:02:35,870 --> 00:02:41,190
started using the

42
00:02:37,350 --> 00:02:48,329
OS Linux distribution builds on top of

43
00:02:41,190 --> 00:02:51,359
the nexus package manager' so so let's

44
00:02:48,330 --> 00:02:54,690
start from the end I hope to spend quite

45
00:02:51,360 --> 00:02:56,580
a lot of time doing a demo but to do a

46
00:02:54,690 --> 00:02:59,250
demo of Nyx OS I kind of have to

47
00:02:56,580 --> 00:03:01,290
describe what next OS is first and to do

48
00:02:59,250 --> 00:03:02,940
that I have to describe what the NYX

49
00:03:01,290 --> 00:03:08,280
package manager in the next expression

50
00:03:02,940 --> 00:03:11,579
language is in a very like overview kind

51
00:03:08,280 --> 00:03:14,850
of way so I won't go very much into

52
00:03:11,580 --> 00:03:17,120
depth in any particular area feel free

53
00:03:14,850 --> 00:03:22,920
to grab me afterwards and we can talk

54
00:03:17,120 --> 00:03:27,810
specifics so let's start with the NYX

55
00:03:22,920 --> 00:03:32,299
package manager so let's focus on these

56
00:03:27,810 --> 00:03:36,270
two final words here package manager and

57
00:03:32,300 --> 00:03:39,750
can get a common understanding of what

58
00:03:36,270 --> 00:03:42,720
the package is so for this talk I'll

59
00:03:39,750 --> 00:03:44,600
I'll have a quite simple definition of a

60
00:03:42,720 --> 00:03:48,660
package is basically a set of files

61
00:03:44,600 --> 00:03:50,609
inside a file hierarchy that you if you

62
00:03:48,660 --> 00:03:52,950
want you can package up in a tarball and

63
00:03:50,610 --> 00:03:55,980
send to somewhere else and typically you

64
00:03:52,950 --> 00:04:02,070
want to unpack this and run or use the

65
00:03:55,980 --> 00:04:04,230
files inside this package this set of

66
00:04:02,070 --> 00:04:06,510
files we build using some kind of

67
00:04:04,230 --> 00:04:09,780
instructions that are called like simply

68
00:04:06,510 --> 00:04:11,549
a build recipe and the build recipe

69
00:04:09,780 --> 00:04:13,710
basically tells you everything you need

70
00:04:11,550 --> 00:04:16,950
to know how to construct this set of

71
00:04:13,710 --> 00:04:19,829
files so it includes if you're building

72
00:04:16,950 --> 00:04:22,349
a program you might need to find the

73
00:04:19,829 --> 00:04:25,200
source code of this program so the build

74
00:04:22,350 --> 00:04:28,380
recipe will tell you that it will tell

75
00:04:25,200 --> 00:04:31,460
you which other packages that this

76
00:04:28,380 --> 00:04:34,200
program needs to be built or to run and

77
00:04:31,460 --> 00:04:36,060
it of course includes the actual like

78
00:04:34,200 --> 00:04:41,280
instructions you need to run to build

79
00:04:36,060 --> 00:04:43,320
the set of files so this is a very

80
00:04:41,280 --> 00:04:45,599
general definition I think this would

81
00:04:43,320 --> 00:04:49,340
hold for pretty much any package manager

82
00:04:45,600 --> 00:04:51,830
on any Linux distribution and the

83
00:04:49,340 --> 00:04:54,010
in this respect exists no different from

84
00:04:51,830 --> 00:04:56,859
from any of those other package managers

85
00:04:54,010 --> 00:05:02,389
but if I go back to the heading here

86
00:04:56,860 --> 00:05:05,030
this purely functional part is typically

87
00:05:02,389 --> 00:05:08,590
not something you see mentioned when

88
00:05:05,030 --> 00:05:11,840
you're talking about package managers

89
00:05:08,590 --> 00:05:15,349
and by prayer clearly functional

90
00:05:11,840 --> 00:05:16,849
I mainly think of two properties that

91
00:05:15,350 --> 00:05:18,850
you typically would have in a phone

92
00:05:16,850 --> 00:05:23,090
purely functional programming language

93
00:05:18,850 --> 00:05:27,470
and the first and simplest is the idea

94
00:05:23,090 --> 00:05:29,780
of immutability so the idea is a mix is

95
00:05:27,470 --> 00:05:32,210
once you've built a package the set of

96
00:05:29,780 --> 00:05:35,599
files you never ever change this set of

97
00:05:32,210 --> 00:05:37,840
files even if you've installed them on

98
00:05:35,600 --> 00:05:41,120
your computer and use them

99
00:05:37,840 --> 00:05:43,280
you never overwrite them when you update

100
00:05:41,120 --> 00:05:44,720
the package for example and this is

101
00:05:43,280 --> 00:05:47,000
quite different from many other package

102
00:05:44,720 --> 00:05:50,870
managers you run your app get install

103
00:05:47,000 --> 00:05:52,460
and if you already have a version of the

104
00:05:50,870 --> 00:05:54,740
package you were installing at some

105
00:05:52,460 --> 00:05:55,729
point during this installation project

106
00:05:54,740 --> 00:05:57,830
you're overwriting

107
00:05:55,729 --> 00:06:02,570
the files from the previous version of

108
00:05:57,830 --> 00:06:04,520
the package and of course this is a I

109
00:06:02,570 --> 00:06:06,620
don't know if I've used Debian for a

110
00:06:04,520 --> 00:06:08,719
long time and occasionally run into the

111
00:06:06,620 --> 00:06:11,240
problem where your installation fails in

112
00:06:08,720 --> 00:06:13,340
the middle and you always get this kind

113
00:06:11,240 --> 00:06:17,360
of lump in your stomach when that

114
00:06:13,340 --> 00:06:19,849
happens fortunately I really liked apt

115
00:06:17,360 --> 00:06:23,150
since it usually can rescue such

116
00:06:19,850 --> 00:06:26,210
situations but NYX is quite different

117
00:06:23,150 --> 00:06:27,710
because this overwriting of a previous

118
00:06:26,210 --> 00:06:30,979
version never happens

119
00:06:27,710 --> 00:06:33,140
you either have a package the files on

120
00:06:30,979 --> 00:06:40,159
your computer or you don't

121
00:06:33,140 --> 00:06:41,900
and you never are in between now so this

122
00:06:40,160 --> 00:06:44,060
might seem a bit mysterious how can you

123
00:06:41,900 --> 00:06:47,299
actually do this and I'll try to explain

124
00:06:44,060 --> 00:06:50,350
that a bit later I just want to explain

125
00:06:47,300 --> 00:06:54,289
the second property I would characterize

126
00:06:50,350 --> 00:06:56,810
from a functional programming that is

127
00:06:54,289 --> 00:06:59,570
applying to NYX and that is the idea of

128
00:06:56,810 --> 00:07:02,180
determinism

129
00:06:59,570 --> 00:07:07,070
so I was talking about this build

130
00:07:02,180 --> 00:07:10,760
recipes so NYX treats the building

131
00:07:07,070 --> 00:07:12,440
process when you build a package it

132
00:07:10,760 --> 00:07:14,719
treats this as sort of like a

133
00:07:12,440 --> 00:07:16,880
mathematical function it takes a build

134
00:07:14,720 --> 00:07:22,700
recipe and produces for you a package

135
00:07:16,880 --> 00:07:25,360
and like any other like in mathematics

136
00:07:22,700 --> 00:07:28,159
if you give a function the same

137
00:07:25,360 --> 00:07:33,440
parameters twice you get the same result

138
00:07:28,160 --> 00:07:38,690
twice and this is a property that NYX

139
00:07:33,440 --> 00:07:41,540
tries very hard to hold of course this

140
00:07:38,690 --> 00:07:44,570
property is also common with quite a lot

141
00:07:41,540 --> 00:07:50,110
of package managers Debian has spent a

142
00:07:44,570 --> 00:07:52,909
lot of time on this idea of binary

143
00:07:50,110 --> 00:07:55,730
reproducibility so the idea is that if

144
00:07:52,910 --> 00:07:58,790
you build a package twice using the

145
00:07:55,730 --> 00:08:01,700
exact same compiler version same with

146
00:07:58,790 --> 00:08:05,270
dependencies and all other things the

147
00:08:01,700 --> 00:08:13,849
same you will get a binary compatible

148
00:08:05,270 --> 00:08:16,130
Airy copy both times in this respect mix

149
00:08:13,850 --> 00:08:20,840
and other package managers are also not

150
00:08:16,130 --> 00:08:23,110
very different but mix performs a step

151
00:08:20,840 --> 00:08:26,960
here that is quite quite unique I think

152
00:08:23,110 --> 00:08:29,030
in the idea that most other package

153
00:08:26,960 --> 00:08:32,720
managers identify a package by the

154
00:08:29,030 --> 00:08:35,380
package name and the package version so

155
00:08:32,720 --> 00:08:39,140
for example you have on your computer

156
00:08:35,380 --> 00:08:44,210
Firefox version and now what is it up to

157
00:08:39,140 --> 00:08:46,280
58 or something NYX does not give a

158
00:08:44,210 --> 00:08:50,260
package this kind of identity instead it

159
00:08:46,280 --> 00:08:54,490
gives it an identity computed using a

160
00:08:50,260 --> 00:08:57,200
cryptographic hash of the build recipe

161
00:08:54,490 --> 00:09:01,760
so instead of getting a nice name like

162
00:08:57,200 --> 00:09:05,270
Firefox 58 you get a huge string which

163
00:09:01,760 --> 00:09:07,100
is the cryptographic hash which design

164
00:09:05,270 --> 00:09:09,380
might seem seem a bit cumbersome it

165
00:09:07,100 --> 00:09:11,250
might not seem very practical but it

166
00:09:09,380 --> 00:09:16,100
gives us quite quite

167
00:09:11,250 --> 00:09:16,100
powerful consequences

168
00:09:16,280 --> 00:09:26,040
so let's me go on to the next door so I

169
00:09:23,160 --> 00:09:29,790
was talking said that the Knicks never

170
00:09:26,040 --> 00:09:32,880
over writes a package it does this by

171
00:09:29,790 --> 00:09:37,890
simply putting packages somewhere else

172
00:09:32,880 --> 00:09:40,500
than in /user so it puts a package in

173
00:09:37,890 --> 00:09:42,300
something it calls the next door which

174
00:09:40,500 --> 00:09:46,050
you can think of sort of like a key

175
00:09:42,300 --> 00:09:48,270
value store where the key is the hashed

176
00:09:46,050 --> 00:09:49,859
recipe so the identity of the package

177
00:09:48,270 --> 00:09:53,069
that I mentioned in the previous slide

178
00:09:49,860 --> 00:09:56,940
and the value is that the built recipe

179
00:09:53,070 --> 00:09:59,010
like the actual set of files and of

180
00:09:56,940 --> 00:10:00,900
course if you change the recipe you'll

181
00:09:59,010 --> 00:10:02,640
get a completely different hash so it

182
00:10:00,900 --> 00:10:08,000
will be completely separate entry in

183
00:10:02,640 --> 00:10:10,439
your next door now this might seem a bit

184
00:10:08,000 --> 00:10:13,290
fancy like you are having some kind of

185
00:10:10,440 --> 00:10:16,200
super server running on your system to

186
00:10:13,290 --> 00:10:19,500
keep track of all these annex packages

187
00:10:16,200 --> 00:10:24,390
but it's actually just a directory on

188
00:10:19,500 --> 00:10:31,050
your hard drive and we can easily see

189
00:10:24,390 --> 00:10:38,520
this so let me just skip let me be a bit

190
00:10:31,050 --> 00:10:41,510
more interactive so I have let's look

191
00:10:38,520 --> 00:10:44,370
here so I have a folder on my drive

192
00:10:41,510 --> 00:10:46,830
start with the root folder and it's just

193
00:10:44,370 --> 00:10:50,390
a slash Nick slash store and that's my

194
00:10:46,830 --> 00:10:54,839
next door and then you have this huge

195
00:10:50,390 --> 00:10:57,870
gobbly gook which is the hash which we

196
00:10:54,839 --> 00:11:00,380
computed from the build recipe for for

197
00:10:57,870 --> 00:11:04,700
package called chow say

198
00:11:00,380 --> 00:11:08,460
in particular the version 3.0 three of

199
00:11:04,700 --> 00:11:11,700
calcium and inside this package we have

200
00:11:08,460 --> 00:11:13,680
a set of files and these are the files

201
00:11:11,700 --> 00:11:15,839
that just belong to this package so we

202
00:11:13,680 --> 00:11:22,540
don't we're never mixing files with

203
00:11:15,839 --> 00:11:28,130
other other packages in this way

204
00:11:22,540 --> 00:11:30,349
so I was showing this here so this is

205
00:11:28,130 --> 00:11:36,170
basically the same view I showed in the

206
00:11:30,350 --> 00:11:38,500
slide and of course if I go into the bin

207
00:11:36,170 --> 00:11:45,170
folder inside there and run cow say I

208
00:11:38,500 --> 00:11:48,350
can say hello horn hack with an @ sign

209
00:11:45,170 --> 00:11:52,160
there and it will run like that like a

210
00:11:48,350 --> 00:11:56,990
regular executable no nothing strange

211
00:11:52,160 --> 00:12:01,670
about that of course it's quite

212
00:11:56,990 --> 00:12:03,980
inconvenient to actually try to remember

213
00:12:01,670 --> 00:12:06,589
the hash of the the package you want to

214
00:12:03,980 --> 00:12:10,670
run so it's also possible to install

215
00:12:06,589 --> 00:12:14,060
packages into your user environment and

216
00:12:10,670 --> 00:12:18,229
that's quite different from the typical

217
00:12:14,060 --> 00:12:20,180
package managers as well since we're

218
00:12:18,230 --> 00:12:22,730
never over writing packages we're never

219
00:12:20,180 --> 00:12:26,000
having like a global set of packages

220
00:12:22,730 --> 00:12:31,670
installed NYX allows us to safely

221
00:12:26,000 --> 00:12:33,560
perform user level operations and on the

222
00:12:31,670 --> 00:12:36,890
packages for example we can install a

223
00:12:33,560 --> 00:12:40,760
package into our particular user

224
00:12:36,890 --> 00:12:44,810
environment so run oops

225
00:12:40,760 --> 00:12:48,200
and and let me just before I write let

226
00:12:44,810 --> 00:12:54,709
me excuse the user experience of this

227
00:12:48,200 --> 00:12:58,010
command-line argument as it's there's

228
00:12:54,710 --> 00:12:59,330
work underway to to improve the user

229
00:12:58,010 --> 00:13:05,300
experience of these command-line

230
00:12:59,330 --> 00:13:08,600
arguments but for now B's so first I

231
00:13:05,300 --> 00:13:12,260
have to tell mix where from where I want

232
00:13:08,600 --> 00:13:15,500
my packages to be or rather where my

233
00:13:12,260 --> 00:13:19,939
build expressions are build recipes are

234
00:13:15,500 --> 00:13:23,810
and this allows me to tell that I want

235
00:13:19,940 --> 00:13:27,650
to use the main repository of build

236
00:13:23,810 --> 00:13:29,359
expressions that NYX has so basically

237
00:13:27,650 --> 00:13:34,310
it's a huge repository somewhere on

238
00:13:29,360 --> 00:13:36,150
github that contains build recipes for

239
00:13:34,310 --> 00:13:39,449
different packages well I'm just

240
00:13:36,150 --> 00:13:44,120
that I want this package repository and

241
00:13:39,450 --> 00:13:46,710
then I can run and I can install and I

242
00:13:44,120 --> 00:13:50,300
have to say which package I want to

243
00:13:46,710 --> 00:13:52,860
install so I I want to install Cousy

244
00:13:50,300 --> 00:13:55,650
this attribute is basically the name of

245
00:13:52,860 --> 00:13:58,440
the package in a human human

246
00:13:55,650 --> 00:14:01,439
understandable way so now we actually

247
00:13:58,440 --> 00:14:06,480
installed the cow say and it should now

248
00:14:01,440 --> 00:14:13,310
be in my Israel user environment hello

249
00:14:06,480 --> 00:14:17,839
born hack cool now you'll notice that

250
00:14:13,310 --> 00:14:23,969
when I installed let me just say which

251
00:14:17,839 --> 00:14:26,700
cow say when I installed it actually

252
00:14:23,970 --> 00:14:30,900
placed the cows a executable inside my

253
00:14:26,700 --> 00:14:33,690
home directory so my username here is

254
00:14:30,900 --> 00:14:35,850
ricey so it placed inside my home

255
00:14:33,690 --> 00:14:38,700
directory a folder called NICs profile

256
00:14:35,850 --> 00:14:40,440
which is basically just a folder or

257
00:14:38,700 --> 00:14:43,130
directory containing the packages I've

258
00:14:40,440 --> 00:14:46,980
installed into my user environment and

259
00:14:43,130 --> 00:14:51,720
under here it's basically just like any

260
00:14:46,980 --> 00:14:54,089
other very similar to like the root

261
00:14:51,720 --> 00:14:57,959
directory of any other Linux

262
00:14:54,089 --> 00:15:00,450
distribution and under here I have like

263
00:14:57,959 --> 00:15:05,910
a ton of different different packages

264
00:15:00,450 --> 00:15:12,240
that I've installed for my user only so

265
00:15:05,910 --> 00:15:17,550
let's keep this so this point is then

266
00:15:12,240 --> 00:15:21,360
let me go back here so I have pin cows

267
00:15:17,550 --> 00:15:26,130
say in my home directory and I could run

268
00:15:21,360 --> 00:15:28,440
it let's see where that is so you can

269
00:15:26,130 --> 00:15:32,459
see it's a bit tricky here but basically

270
00:15:28,440 --> 00:15:38,490
it says that this is a link to a store

271
00:15:32,459 --> 00:15:41,689
path to the store path of the cows they

272
00:15:38,490 --> 00:15:46,950
packaged this particular cows a package

273
00:15:41,690 --> 00:15:48,540
and the executable inside there so

274
00:15:46,950 --> 00:15:49,580
you'll notice that this hash is

275
00:15:48,540 --> 00:15:53,060
different

276
00:15:49,580 --> 00:15:54,950
I showed earlier let's see if I still

277
00:15:53,060 --> 00:15:57,319
have that one in the history sorry

278
00:15:54,950 --> 00:16:00,350
so the previous version I had started

279
00:15:57,320 --> 00:16:03,530
with MK k v the version I installed in

280
00:16:00,350 --> 00:16:06,170
my user directories has the hash called

281
00:16:03,530 --> 00:16:09,500
mah fa so these are completely separate

282
00:16:06,170 --> 00:16:12,829
packages even though that the actual

283
00:16:09,500 --> 00:16:18,740
version number of the upstream version

284
00:16:12,830 --> 00:16:20,810
number is the same so there's nothing

285
00:16:18,740 --> 00:16:22,820
hindering us from having several

286
00:16:20,810 --> 00:16:25,189
different variants of the same package

287
00:16:22,820 --> 00:16:27,710
installed in the system at the same time

288
00:16:25,190 --> 00:16:30,290
it's only in my actual user environment

289
00:16:27,710 --> 00:16:31,670
I can only have one package when one

290
00:16:30,290 --> 00:16:33,709
different one version of Cal State

291
00:16:31,670 --> 00:16:36,589
installed in my user environment at the

292
00:16:33,710 --> 00:16:40,400
same time but I can always access the

293
00:16:36,590 --> 00:16:46,190
other versions by specifying the entire

294
00:16:40,400 --> 00:16:48,860
store path and that's basically what I

295
00:16:46,190 --> 00:16:50,840
wanted to show here that in this

296
00:16:48,860 --> 00:16:53,510
particular at this particular time I had

297
00:16:50,840 --> 00:16:56,000
four different variants of the same cows

298
00:16:53,510 --> 00:17:00,890
a package and the difference basically

299
00:16:56,000 --> 00:17:02,330
is what kind of dependencies so there

300
00:17:00,890 --> 00:17:03,949
there have been some kind of slight

301
00:17:02,330 --> 00:17:06,650
difference in the build recipe for these

302
00:17:03,950 --> 00:17:09,350
four different versions of Cal say for

303
00:17:06,650 --> 00:17:12,140
example that in one version one you had

304
00:17:09,349 --> 00:17:13,609
a pearl of was one specific version and

305
00:17:12,140 --> 00:17:15,920
then the other one you had pearline as a

306
00:17:13,609 --> 00:17:20,869
separate version I happen to know that

307
00:17:15,920 --> 00:17:23,650
causa is implemented in Perl does that

308
00:17:20,869 --> 00:17:23,649
make any sense

309
00:17:23,949 --> 00:17:30,800
these are bit strange notions from from

310
00:17:27,680 --> 00:17:35,930
a typical typical package manager

311
00:17:30,800 --> 00:17:39,080
perspective so and this is basically

312
00:17:35,930 --> 00:17:41,240
what is I showed so we have a user

313
00:17:39,080 --> 00:17:45,040
assignment that installs Cousy in his

314
00:17:41,240 --> 00:17:48,590
environment and can run it and access it

315
00:17:45,040 --> 00:17:50,720
but the different user gain tries to

316
00:17:48,590 --> 00:17:53,000
access Cousy in her environment and it's

317
00:17:50,720 --> 00:17:56,180
not there of course

318
00:17:53,000 --> 00:17:58,160
Jane can run the same command and she'll

319
00:17:56,180 --> 00:18:01,470
get a kalsi in her environment and that

320
00:17:58,160 --> 00:18:05,350
may or may not be the same one

321
00:18:01,470 --> 00:18:09,250
so if Simon tries to install a Cal State

322
00:18:05,350 --> 00:18:11,320
version with some kind of hack or some

323
00:18:09,250 --> 00:18:13,180
kind of vulnerability

324
00:18:11,320 --> 00:18:16,840
it will only install in his environment

325
00:18:13,180 --> 00:18:21,040
if Jane tries to install Cal say she'll

326
00:18:16,840 --> 00:18:28,270
get the vanilla vanilla cow's a version

327
00:18:21,040 --> 00:18:33,850
without the vulnerability and hence the

328
00:18:28,270 --> 00:18:35,800
safety of user operations yeah so I

329
00:18:33,850 --> 00:18:38,919
typically don't have Cal say installed

330
00:18:35,800 --> 00:18:42,580
so let me just run did it

331
00:18:38,920 --> 00:18:46,320
cows the e and you say it's uninstalling

332
00:18:42,580 --> 00:18:50,020
cows and I can no longer run the cow C

333
00:18:46,320 --> 00:18:55,889
so that's kind of Nick's the package

334
00:18:50,020 --> 00:18:55,889
manager in a nutshell or in a bash shell

335
00:18:57,630 --> 00:19:06,220
so let's talk about the way Nick's

336
00:19:02,640 --> 00:19:08,650
describes packages and other things it

337
00:19:06,220 --> 00:19:13,780
uses a language called the Nick's

338
00:19:08,650 --> 00:19:16,780
expression language and that's the

339
00:19:13,780 --> 00:19:22,810
language is a custom language developed

340
00:19:16,780 --> 00:19:25,629
just for Nick's which is yeah basically

341
00:19:22,810 --> 00:19:28,450
a pure pure lazy functional programming

342
00:19:25,630 --> 00:19:30,390
language it's not strictly typed or

343
00:19:28,450 --> 00:19:35,470
anything like that it's quite simple and

344
00:19:30,390 --> 00:19:40,920
it's basically a DSL for building

345
00:19:35,470 --> 00:19:46,930
packages with some extra goodies on top

346
00:19:40,920 --> 00:19:51,760
so let's just yeah so just some very

347
00:19:46,930 --> 00:19:54,730
simple basics the Nick's operating in

348
00:19:51,760 --> 00:19:57,220
the expression language allows you to do

349
00:19:54,730 --> 00:20:00,820
to operate with the different kind of

350
00:19:57,220 --> 00:20:02,580
data basically typically it's numbers

351
00:20:00,820 --> 00:20:06,159
whole numbers

352
00:20:02,580 --> 00:20:08,770
volians is also possible to describe

353
00:20:06,160 --> 00:20:10,540
decimal numbers but there are floating

354
00:20:08,770 --> 00:20:13,170
point numbers but there you can actually

355
00:20:10,540 --> 00:20:16,680
perform computations with them

356
00:20:13,170 --> 00:20:23,460
at least you couldn't before so it's

357
00:20:16,680 --> 00:20:26,690
very focused on simple operations it has

358
00:20:23,460 --> 00:20:29,280
quite a strong support for string string

359
00:20:26,690 --> 00:20:32,550
expressions so basically we have two

360
00:20:29,280 --> 00:20:36,899
different types of strings or two ways

361
00:20:32,550 --> 00:20:42,510
to express strings in language is this

362
00:20:36,900 --> 00:20:46,470
typical double quotes and it also has

363
00:20:42,510 --> 00:20:49,860
this string interpolation it also has

364
00:20:46,470 --> 00:20:52,680
these two single quotes you open a

365
00:20:49,860 --> 00:20:59,129
string that can be spent over multiple

366
00:20:52,680 --> 00:21:01,410
lines which I try to show here and

367
00:20:59,130 --> 00:21:03,780
that's basically it

368
00:21:01,410 --> 00:21:06,780
except it's also nice to know about

369
00:21:03,780 --> 00:21:11,399
lists and attributes yeah so like I said

370
00:21:06,780 --> 00:21:14,820
mixes nos Dix is not strictly typed so

371
00:21:11,400 --> 00:21:17,270
you are allowed to have lists of this

372
00:21:14,820 --> 00:21:23,429
form where hit Raj on heterogeneous

373
00:21:17,270 --> 00:21:26,960
lists these are quite useful and we'll

374
00:21:23,430 --> 00:21:28,380
see them in the future it also has

375
00:21:26,960 --> 00:21:30,420
something called

376
00:21:28,380 --> 00:21:35,270
attribute set you can think of them

377
00:21:30,420 --> 00:21:39,810
basically like maps very similar in

378
00:21:35,270 --> 00:21:42,240
formatting to JSON it just allows you to

379
00:21:39,810 --> 00:21:44,010
skip the quotes if you're having a

380
00:21:42,240 --> 00:21:46,020
simple key name

381
00:21:44,010 --> 00:21:49,200
that's not containing any strange

382
00:21:46,020 --> 00:21:51,590
characters like space and you can

383
00:21:49,200 --> 00:21:56,400
dereference a key by using this dot

384
00:21:51,590 --> 00:22:02,399
operator so I think this is not anything

385
00:21:56,400 --> 00:22:03,930
super strange since I said it's a

386
00:22:02,400 --> 00:22:05,610
functional programming language there's

387
00:22:03,930 --> 00:22:10,290
a strong focus on functions and that's

388
00:22:05,610 --> 00:22:12,419
very lightweight syntax for that so by

389
00:22:10,290 --> 00:22:14,280
default we have typically we're working

390
00:22:12,420 --> 00:22:16,710
with curried functions like in Haskell

391
00:22:14,280 --> 00:22:19,050
so typically with describe functions in

392
00:22:16,710 --> 00:22:22,350
with one argument which return a

393
00:22:19,050 --> 00:22:24,180
function which may return a function

394
00:22:22,350 --> 00:22:26,820
itself

395
00:22:24,180 --> 00:22:29,880
so in this case we have an ad that takes

396
00:22:26,820 --> 00:22:32,189
the argument returns the function that

397
00:22:29,880 --> 00:22:37,230
itself takes an argument Y and then adds

398
00:22:32,190 --> 00:22:39,750
the result that's the final result and

399
00:22:37,230 --> 00:22:41,460
we can apply the function add to two

400
00:22:39,750 --> 00:22:45,560
values simply by separating them with

401
00:22:41,460 --> 00:22:48,900
the space so nothing very strange here

402
00:22:45,560 --> 00:22:51,300
something that is very common in in Nix

403
00:22:48,900 --> 00:22:54,950
expressions is the idea of a function

404
00:22:51,300 --> 00:22:57,300
taking an attribute set as argument and

405
00:22:54,950 --> 00:23:00,420
for that there is a bit of special

406
00:22:57,300 --> 00:23:03,090
syntax that lets you deconstruct that

407
00:23:00,420 --> 00:23:12,050
rib you set as in your function

408
00:23:03,090 --> 00:23:17,370
definition so nothing super strange here

409
00:23:12,050 --> 00:23:19,800
cool so I think next one is a complete

410
00:23:17,370 --> 00:23:24,929
package description in the next package

411
00:23:19,800 --> 00:23:26,909
manager' and I think most of the things

412
00:23:24,930 --> 00:23:31,530
here we saw in the previous slide so

413
00:23:26,910 --> 00:23:33,570
basically this whole thing is a function

414
00:23:31,530 --> 00:23:34,950
it takes the standard environment like

415
00:23:33,570 --> 00:23:38,010
the standard build environment that

416
00:23:34,950 --> 00:23:42,060
contains your GCC and your typical build

417
00:23:38,010 --> 00:23:44,730
tools it also contains a an argument

418
00:23:42,060 --> 00:23:47,330
called fetch URL which allows us to

419
00:23:44,730 --> 00:23:50,880
specify where we want this package

420
00:23:47,330 --> 00:23:54,330
tarball to be fetched from and then we

421
00:23:50,880 --> 00:23:57,720
have three different dependencies that

422
00:23:54,330 --> 00:24:00,210
themselves are packages so a package is

423
00:23:57,720 --> 00:24:02,340
a value inside this language now so

424
00:24:00,210 --> 00:24:04,890
these things are three things are

425
00:24:02,340 --> 00:24:11,220
packages that are passed as an argument

426
00:24:04,890 --> 00:24:13,260
into this package description so I won't

427
00:24:11,220 --> 00:24:15,000
go into super detail but basically you

428
00:24:13,260 --> 00:24:16,800
have the typical things you would need

429
00:24:15,000 --> 00:24:18,630
when you're defining a package you have

430
00:24:16,800 --> 00:24:21,810
a package name like a human readable

431
00:24:18,630 --> 00:24:25,920
name which is still useful instead of

432
00:24:21,810 --> 00:24:27,960
these long hashes it says where you

433
00:24:25,920 --> 00:24:32,010
should get this package from the the

434
00:24:27,960 --> 00:24:34,110
tarball containing the source code it

435
00:24:32,010 --> 00:24:37,300
says

436
00:24:34,110 --> 00:24:42,580
which kind of build dependencies do you

437
00:24:37,300 --> 00:24:44,590
have in this case the package config is

438
00:24:42,580 --> 00:24:48,939
simply a build the dependency it's not

439
00:24:44,590 --> 00:24:52,649
used at runtime so where if we're doing

440
00:24:48,940 --> 00:24:55,930
across cross-platform build we'll

441
00:24:52,650 --> 00:24:59,980
actually use the build platforms version

442
00:24:55,930 --> 00:25:04,480
of package config while this Lib AVN Lib

443
00:24:59,980 --> 00:25:08,470
XSLT is built for the target platform in

444
00:25:04,480 --> 00:25:10,600
that case and then we have some typical

445
00:25:08,470 --> 00:25:14,620
meta information like where you the

446
00:25:10,600 --> 00:25:20,139
homepage of this package are and some

447
00:25:14,620 --> 00:25:24,840
descriptions so that's pretty much it

448
00:25:20,140 --> 00:25:29,070
from the for the mix expression language

449
00:25:24,840 --> 00:25:33,750
and now we can talk a bit about Nix OS

450
00:25:29,070 --> 00:25:37,270
and I'll do this very briefly here so so

451
00:25:33,750 --> 00:25:39,310
now we can perform now we can see that

452
00:25:37,270 --> 00:25:40,750
it's quite simple - on top of the next

453
00:25:39,310 --> 00:25:43,659
package manager and next expression

454
00:25:40,750 --> 00:25:46,000
language create a distribution Linux

455
00:25:43,660 --> 00:25:47,950
distribution so the first step is to

456
00:25:46,000 --> 00:25:53,550
describe your entire system as an

457
00:25:47,950 --> 00:25:58,000
expression so in this case I describe

458
00:25:53,550 --> 00:26:02,320
the amount point I have in my Linux

459
00:25:58,000 --> 00:26:04,840
distribution or Linux install and I say

460
00:26:02,320 --> 00:26:09,010
that okay I want my hosts file to

461
00:26:04,840 --> 00:26:11,470
include this extra entry and then I

462
00:26:09,010 --> 00:26:14,620
include a bunch of other things that it

463
00:26:11,470 --> 00:26:19,500
perfectly describes my system that I

464
00:26:14,620 --> 00:26:23,229
want to achieve and then step number two

465
00:26:19,500 --> 00:26:25,450
we create a build recipe using a similar

466
00:26:23,230 --> 00:26:30,040
to the package I description I showed

467
00:26:25,450 --> 00:26:33,580
earlier to take this system description

468
00:26:30,040 --> 00:26:36,790
expression and create the actual files

469
00:26:33,580 --> 00:26:39,310
that all the different tools expect so

470
00:26:36,790 --> 00:26:45,050
for example my file system description

471
00:26:39,310 --> 00:26:48,290
should be built into a typical FCFS tab

472
00:26:45,050 --> 00:26:52,250
file with with the formatting that mount

473
00:26:48,290 --> 00:26:56,330
tool for example expects and our hosts

474
00:26:52,250 --> 00:27:01,790
file should be formatted as as our

475
00:26:56,330 --> 00:27:08,000
resolving library expects and this built

476
00:27:01,790 --> 00:27:10,490
into the next or of course so if you

477
00:27:08,000 --> 00:27:12,260
just run mount with these files in the

478
00:27:10,490 --> 00:27:14,690
next door of course they won't see them

479
00:27:12,260 --> 00:27:18,890
because they are looking in a slash etc'

480
00:27:14,690 --> 00:27:24,230
slash fstab so step number three is to

481
00:27:18,890 --> 00:27:27,350
update our bootloader to include to run

482
00:27:24,230 --> 00:27:29,690
make sure it to update our bootloader to

483
00:27:27,350 --> 00:27:33,770
add an entry that when we select that

484
00:27:29,690 --> 00:27:36,650
entry it will start our Linux system and

485
00:27:33,770 --> 00:27:40,910
run a script that will populate our

486
00:27:36,650 --> 00:27:45,230
slash et Cie with links to the packages

487
00:27:40,910 --> 00:27:47,870
the package we just built so slash etc'

488
00:27:45,230 --> 00:27:52,910
slash fstab will point into the next

489
00:27:47,870 --> 00:27:55,010
door and now when I run mount it will

490
00:27:52,910 --> 00:27:59,870
actually find this file and be able to

491
00:27:55,010 --> 00:28:01,970
do something sensible with it and of

492
00:27:59,870 --> 00:28:05,659
course step number four is we reboot our

493
00:28:01,970 --> 00:28:09,140
computer and hope it works but the cool

494
00:28:05,660 --> 00:28:12,080
thing if it doesn't we tell our boot

495
00:28:09,140 --> 00:28:14,660
loader to reload our previous version of

496
00:28:12,080 --> 00:28:16,460
our configuration and that we're pretty

497
00:28:14,660 --> 00:28:21,500
certain it works because we used it to

498
00:28:16,460 --> 00:28:28,120
describe our next version that's kind of

499
00:28:21,500 --> 00:28:28,120
cool so let me try to do some demoing

500
00:28:31,400 --> 00:28:38,059
it's not okay so I have here a

501
00:28:34,580 --> 00:28:41,120
VirtualBox like a virtual machine

502
00:28:38,059 --> 00:28:43,129
I basically downloaded this from the

503
00:28:41,120 --> 00:28:45,770
Nikolas website they have a ready-made

504
00:28:43,130 --> 00:28:47,990
VirtualBox devices I think they're

505
00:28:45,770 --> 00:28:50,360
called and you can just download that

506
00:28:47,990 --> 00:28:57,230
and load it up and do some experiment

507
00:28:50,360 --> 00:29:00,830
and I have one demo user which is an

508
00:28:57,230 --> 00:29:07,280
unprivileged we can for example do the

509
00:29:00,830 --> 00:29:11,659
thing we did before expected is hey Dan

510
00:29:07,280 --> 00:29:16,270
I would say and it did basically the

511
00:29:11,660 --> 00:29:22,340
same thing I did before hello burn heck

512
00:29:16,270 --> 00:29:26,480
with yet right and then the second tab

513
00:29:22,340 --> 00:29:29,419
here I have a root user so the Knicks

514
00:29:26,480 --> 00:29:37,480
expression describing our system resides

515
00:29:29,420 --> 00:29:43,460
in /et see so that mix conf eager hm

516
00:29:37,480 --> 00:29:47,870
what makes us configuration and right

517
00:29:43,460 --> 00:29:49,970
now it's super minimal so the only thing

518
00:29:47,870 --> 00:29:52,969
it does is import already made

519
00:29:49,970 --> 00:29:55,460
configuration that is provided to

520
00:29:52,970 --> 00:30:00,220
actually define our VirtualBox machine

521
00:29:55,460 --> 00:30:00,220
so it includes everything we need to

522
00:30:00,309 --> 00:30:07,250
just create a basic VirtualBox instance

523
00:30:03,620 --> 00:30:17,510
of mix OS so I can add whatever I want

524
00:30:07,250 --> 00:30:21,500
here now so we can start mint let's

525
00:30:17,510 --> 00:30:23,840
install Cal say globally since it's a

526
00:30:21,500 --> 00:30:28,520
bit annoying to keep installing it in

527
00:30:23,840 --> 00:30:30,860
every users environment we can also

528
00:30:28,520 --> 00:30:34,150
install some the tree command since I

529
00:30:30,860 --> 00:30:36,830
might use that so now I will

530
00:30:34,150 --> 00:30:39,920
declaratively described which packages I

531
00:30:36,830 --> 00:30:41,810
want in my system for available for all

532
00:30:39,920 --> 00:30:44,830
users

533
00:30:41,810 --> 00:30:48,860
and then I exit here and then I have to

534
00:30:44,830 --> 00:30:51,889
if I go back here I'll uninstall cows a

535
00:30:48,860 --> 00:30:54,919
from this version a user and now I don't

536
00:30:51,890 --> 00:30:58,970
have it so it doesn't it's not enough to

537
00:30:54,920 --> 00:31:01,850
just write in this configuration file

538
00:30:58,970 --> 00:31:04,460
dot NYX we actually have to make this

539
00:31:01,850 --> 00:31:06,889
configuration active and we can do that

540
00:31:04,460 --> 00:31:11,600
without having to reboot by running the

541
00:31:06,890 --> 00:31:14,750
Nixons rebuild switch command so

542
00:31:11,600 --> 00:31:18,320
basically it will take the configuration

543
00:31:14,750 --> 00:31:20,770
I just worked on and build this

544
00:31:18,320 --> 00:31:24,580
directory I showed you in the slides

545
00:31:20,770 --> 00:31:29,660
with some extra fancy stuff since my

546
00:31:24,580 --> 00:31:34,820
description was very basic so you can

547
00:31:29,660 --> 00:31:36,470
see it scroll up so it basically says

548
00:31:34,820 --> 00:31:38,600
it's building your system configuration

549
00:31:36,470 --> 00:31:43,730
and then it's building at a bunch of

550
00:31:38,600 --> 00:31:46,219
different files so for example it's

551
00:31:43,730 --> 00:31:49,280
building us something called the etcd RV

552
00:31:46,220 --> 00:31:53,560
so it's building our et cetera directory

553
00:31:49,280 --> 00:31:58,820
and it's downloading a couple of things

554
00:31:53,560 --> 00:32:04,540
like do do can you make first for some

555
00:31:58,820 --> 00:32:07,970
reason fell under your patch elf and

556
00:32:04,540 --> 00:32:09,950
then it's updating the grub entry so our

557
00:32:07,970 --> 00:32:11,900
bootloader is updated so next time I

558
00:32:09,950 --> 00:32:14,770
reboot it will actually load this

559
00:32:11,900 --> 00:32:18,410
configuration I just activated it

560
00:32:14,770 --> 00:32:20,450
setting up /e TC which is the stuff I

561
00:32:18,410 --> 00:32:25,640
showed you where where they it creates

562
00:32:20,450 --> 00:32:28,310
the sim links into the next door and

563
00:32:25,640 --> 00:32:30,860
that's pretty much it for what I want to

564
00:32:28,310 --> 00:32:36,110
say so if I go in here I should have Cal

565
00:32:30,860 --> 00:32:39,439
say hello installed it's a bit annoying

566
00:32:36,110 --> 00:32:43,879
to have to say cow say hello barn hack

567
00:32:39,440 --> 00:32:47,210
every time so let let's create let's

568
00:32:43,880 --> 00:32:49,690
create a bash alias for that programs

569
00:32:47,210 --> 00:32:49,690
bad

570
00:32:49,880 --> 00:32:59,960
let's see shall a li SS I think it's

571
00:32:52,950 --> 00:32:59,960
called so oops

572
00:33:00,680 --> 00:33:08,430
so hello it's equal to I want to run cow

573
00:33:04,860 --> 00:33:15,060
say hello barn

574
00:33:08,430 --> 00:33:17,310
heck I don't I don't completely remember

575
00:33:15,060 --> 00:33:28,139
whether that option name is the correct

576
00:33:17,310 --> 00:33:34,320
one but Nexus will tell us it's doing

577
00:33:28,140 --> 00:33:37,350
something okay cool so hello it's not

578
00:33:34,320 --> 00:33:40,250
there of course we have to login so

579
00:33:37,350 --> 00:33:44,820
let's just open a new hello

580
00:33:40,250 --> 00:33:49,440
so we have our alias defined and if we

581
00:33:44,820 --> 00:33:52,909
do cat bash RC in the sly CTC it should

582
00:33:49,440 --> 00:33:56,580
include yeah and yes hello there

583
00:33:52,910 --> 00:34:03,350
including some other stuff that is by

584
00:33:56,580 --> 00:34:03,350
default so that's kind of cool

585
00:34:03,620 --> 00:34:10,049
now on the system you typically want to

586
00:34:07,350 --> 00:34:13,129
run some kind of services like when I'm

587
00:34:10,050 --> 00:34:18,810
developing I sometimes develop for Redis

588
00:34:13,129 --> 00:34:24,960
and then now variously add Redis let me

589
00:34:18,810 --> 00:34:31,980
do this like this I enable the Redis

590
00:34:24,960 --> 00:34:34,429
service save switch oops I wrote the

591
00:34:31,980 --> 00:34:34,429
wrong thing

592
00:34:48,239 --> 00:34:57,000
while it's building let me just prepare

593
00:34:51,060 --> 00:34:59,369
the command I'm planning to run so this

594
00:34:57,000 --> 00:35:02,280
one should have downloaded it it created

595
00:34:59,369 --> 00:35:08,460
the Redis configuration it's downloaded

596
00:35:02,280 --> 00:35:10,200
Redis I see here and if we see here it

597
00:35:08,460 --> 00:35:12,599
says the following new units were

598
00:35:10,200 --> 00:35:13,230
started ready start service so I didn't

599
00:35:12,599 --> 00:35:18,180
say that

600
00:35:13,230 --> 00:35:20,700
linear exhaust is based on system D so

601
00:35:18,180 --> 00:35:23,609
that's the init and the sister service

602
00:35:20,700 --> 00:35:30,210
manager so ready command-line interface

603
00:35:23,609 --> 00:35:34,020
is here now so that's cool and of course

604
00:35:30,210 --> 00:35:35,970
since this is a complete programming

605
00:35:34,020 --> 00:35:39,660
language I can do some other interesting

606
00:35:35,970 --> 00:35:46,098
things so I can say the Redis port I

607
00:35:39,660 --> 00:35:49,710
want to use a custom ready sport another

608
00:35:46,099 --> 00:35:52,460
port make a ready sport I made this a

609
00:35:49,710 --> 00:35:58,140
variable seems I also want to add the

610
00:35:52,460 --> 00:36:05,160
shell alias readies 8 for example radius

611
00:35:58,140 --> 00:36:09,060
I think that's the way you specify ready

612
00:36:05,160 --> 00:36:12,950
sport I think that's the other way the

613
00:36:09,060 --> 00:36:17,580
way you specify the port so this is a

614
00:36:12,950 --> 00:36:21,419
nice way to show that by having a single

615
00:36:17,580 --> 00:36:22,770
language which is fairly powerful you're

616
00:36:21,420 --> 00:36:25,380
able to try to kind of integrate

617
00:36:22,770 --> 00:36:29,280
differents configurations for different

618
00:36:25,380 --> 00:36:40,320
systems and programs in a relatively

619
00:36:29,280 --> 00:36:45,619
natural way can of course and integrator

620
00:36:40,320 --> 00:36:45,619
just strings I think that was here

621
00:37:04,610 --> 00:37:13,010
okay so let me see and then we need a

622
00:37:08,030 --> 00:37:15,140
Bosch again ready 808 and now I've

623
00:37:13,010 --> 00:37:20,270
connected to the right port so that's

624
00:37:15,140 --> 00:37:24,140
kind of nice of course like I said it's

625
00:37:20,270 --> 00:37:28,960
very easy to mess things up sometimes so

626
00:37:24,140 --> 00:37:41,589
let's make a bit of a mess files file

627
00:37:28,960 --> 00:37:51,070
systems I think it is device no such

628
00:37:41,590 --> 00:37:59,630
device let me just double check here

629
00:37:51,070 --> 00:38:02,140
thank God device my sisters yeah it

630
00:37:59,630 --> 00:38:02,140
should be right

631
00:38:07,990 --> 00:38:19,009
anybody know how I get back to my so

632
00:38:15,140 --> 00:38:22,180
this is a pretty bad situation and I

633
00:38:19,010 --> 00:38:26,230
wouldn't be feel very comfortable doing

634
00:38:22,180 --> 00:38:29,870
something like that on my regular ah

635
00:38:26,230 --> 00:38:32,840
okay so so this mount point is actually

636
00:38:29,870 --> 00:38:35,390
defined inside the this VirtualBox demo

637
00:38:32,840 --> 00:38:38,830
annex so we have to override it then we

638
00:38:35,390 --> 00:38:43,129
can do that by using a function from the

639
00:38:38,830 --> 00:38:46,850
library we can pull in that's a slip

640
00:38:43,130 --> 00:38:49,270
make force and then we forcibly set this

641
00:38:46,850 --> 00:38:49,270
value

642
00:39:11,070 --> 00:39:28,240
now I'm loading a bunch of stuff all

643
00:39:20,890 --> 00:39:30,190
right so this is not very good I don't

644
00:39:28,240 --> 00:39:31,750
know how many of you would be happy to

645
00:39:30,190 --> 00:39:34,960
do something like this on your typical

646
00:39:31,750 --> 00:39:42,280
Linux distro and of course running

647
00:39:34,960 --> 00:39:47,020
reboot afterwards so now you see the

648
00:39:42,280 --> 00:39:51,270
grub grub load screen so basically the

649
00:39:47,020 --> 00:39:56,050
default is the one I just built and

650
00:39:51,270 --> 00:40:01,150
we're kind of stuck here so what do we

651
00:39:56,050 --> 00:40:06,880
do then we reset our system did you do

652
00:40:01,150 --> 00:40:09,280
that or is it and when we are in grub we

653
00:40:06,880 --> 00:40:11,730
go back down to all configurations and

654
00:40:09,280 --> 00:40:14,310
they here are is the history of the

655
00:40:11,730 --> 00:40:17,230
configurations we've used so far today

656
00:40:14,310 --> 00:40:20,380
so the last one is kind of a poisonous

657
00:40:17,230 --> 00:40:23,770
let's let's keep that one the eighth one

658
00:40:20,380 --> 00:40:26,290
was the one I was running that when we

659
00:40:23,770 --> 00:40:33,490
were actually making the changes so that

660
00:40:26,290 --> 00:40:36,150
one should be safe and it's yeah it

661
00:40:33,490 --> 00:40:36,149
doesn't seem too bad

662
00:40:45,460 --> 00:40:54,349
all right so it's kind of booting and

663
00:40:49,190 --> 00:40:56,839
that's really reassuring when you're

664
00:40:54,349 --> 00:41:01,069
doing strange things to your system let

665
00:40:56,839 --> 00:41:09,529
me tell you so that's pretty much it for

666
00:41:01,069 --> 00:41:12,980
this demo that was the demo so just to

667
00:41:09,529 --> 00:41:14,839
finish with just some typical other

668
00:41:12,980 --> 00:41:18,980
projects that are in the wider ecosystem

669
00:41:14,839 --> 00:41:21,259
or surrounding NICs so these are all in

670
00:41:18,980 --> 00:41:24,890
one way or another using the NYX package

671
00:41:21,260 --> 00:41:31,849
manager some of them are using the NYX

672
00:41:24,890 --> 00:41:34,009
OS infrastructure as well so having a

673
00:41:31,849 --> 00:41:35,420
single description of your system ifs of

674
00:41:34,010 --> 00:41:37,520
course very nice when you're deploying

675
00:41:35,420 --> 00:41:40,609
to many different machines you can have

676
00:41:37,520 --> 00:41:41,869
this description in a git repo you can

677
00:41:40,609 --> 00:41:44,270
push it out to different machines and

678
00:41:41,869 --> 00:41:48,770
run the builds there and there are two

679
00:41:44,270 --> 00:41:51,680
nice tools for this the the oldest one

680
00:41:48,770 --> 00:41:53,960
and most mature is this NYX UPS and it

681
00:41:51,680 --> 00:41:56,089
also allows you to provision systems

682
00:41:53,960 --> 00:41:56,710
like an Amazon ec2 or something like

683
00:41:56,089 --> 00:42:02,990
that

684
00:41:56,710 --> 00:42:06,099
morph is a nice tool that people to take

685
00:42:02,990 --> 00:42:08,750
Center anybody from their here

686
00:42:06,099 --> 00:42:11,480
dance people Tech Center they developed

687
00:42:08,750 --> 00:42:13,430
this and it's similar to mix-ups but a

688
00:42:11,480 --> 00:42:16,819
bit simpler and more straightforward I

689
00:42:13,430 --> 00:42:20,210
think next Darwin is kind of bringing

690
00:42:16,819 --> 00:42:24,470
the kind of configurations to do for

691
00:42:20,210 --> 00:42:28,039
Nick sauce to the Mac OS ecosystem Home

692
00:42:24,470 --> 00:42:30,980
Manager is a project I initiated a few

693
00:42:28,039 --> 00:42:32,779
years ago that lets you do a

694
00:42:30,980 --> 00:42:35,029
configuration of your home directory

695
00:42:32,779 --> 00:42:38,089
basically your dot files and your user

696
00:42:35,029 --> 00:42:41,779
services in a similar way as Nix OS does

697
00:42:38,089 --> 00:42:44,799
for the system level and Hydra is the CI

698
00:42:41,779 --> 00:42:47,750
system that Nicholas uses and it

699
00:42:44,799 --> 00:42:52,369
describes it builds using the next

700
00:42:47,750 --> 00:42:54,440
expression language so just a very quick

701
00:42:52,369 --> 00:42:56,539
summary so the benefits of this is that

702
00:42:54,440 --> 00:42:57,930
you have a declarative configuration

703
00:42:56,539 --> 00:43:00,900
language

704
00:42:57,930 --> 00:43:03,180
which allows you to very simple simply

705
00:43:00,900 --> 00:43:07,050
keep it in like a git repo or something

706
00:43:03,180 --> 00:43:10,890
similar like to that it's your bills are

707
00:43:07,050 --> 00:43:13,110
reproducible which is very nice when

708
00:43:10,890 --> 00:43:15,120
you're trying to set up your new laptop

709
00:43:13,110 --> 00:43:17,990
to be have the same configuration as

710
00:43:15,120 --> 00:43:20,580
your own one you want to just run excise

711
00:43:17,990 --> 00:43:22,680
rebuild switch and you want it to run

712
00:43:20,580 --> 00:43:27,500
the way the same way you're all laptop

713
00:43:22,680 --> 00:43:30,210
did atomicity and that's this is

714
00:43:27,500 --> 00:43:35,640
relating to the idea that you don't have

715
00:43:30,210 --> 00:43:38,420
in place updates or at least avoid it to

716
00:43:35,640 --> 00:43:44,879
the fullest the largest extent possible

717
00:43:38,420 --> 00:43:46,590
and as we saw we can always have the

718
00:43:44,880 --> 00:43:51,300
possibility of rolling back our

719
00:43:46,590 --> 00:43:56,130
configurations so fearless upgrades very

720
00:43:51,300 --> 00:43:59,190
nice so the unfortunately there are some

721
00:43:56,130 --> 00:44:00,990
drawbacks so the learning curve I think

722
00:43:59,190 --> 00:44:04,410
most people would agree is quite steep

723
00:44:00,990 --> 00:44:08,569
and you have to kind of dive in the deep

724
00:44:04,410 --> 00:44:11,640
end first not entirely though the Nix

725
00:44:08,570 --> 00:44:13,950
package manager' can run on pretty much

726
00:44:11,640 --> 00:44:16,830
any Linux distribution and and Mac OS

727
00:44:13,950 --> 00:44:20,129
and I actually used it in that way for a

728
00:44:16,830 --> 00:44:22,200
long time before I used Nix OS so I

729
00:44:20,130 --> 00:44:25,610
recommend doing that if you're not

730
00:44:22,200 --> 00:44:28,620
wanting to change your whole system and

731
00:44:25,610 --> 00:44:31,890
it's tricky a bit to package this

732
00:44:28,620 --> 00:44:36,109
software that assumes the existence of

733
00:44:31,890 --> 00:44:38,879
like your typical file hierarchies and

734
00:44:36,110 --> 00:44:42,180
the final one is that there's still a

735
00:44:38,880 --> 00:44:44,220
relatively small user base but it's

736
00:44:42,180 --> 00:44:47,040
growing quite a lot I think and there

737
00:44:44,220 --> 00:44:49,890
are some people in this room so I'm I'm

738
00:44:47,040 --> 00:44:54,720
very happy about the way people receive

739
00:44:49,890 --> 00:44:56,730
the NICS OS and the ideas behind it so

740
00:44:54,720 --> 00:44:57,740
that's that's it for me thank you very

741
00:44:56,730 --> 00:45:02,480
much

742
00:44:57,740 --> 00:45:05,279
[Applause]

743
00:45:02,480 --> 00:45:10,410
yes thank you very much we do have time

744
00:45:05,280 --> 00:45:14,849
for a few questions so I think you were

745
00:45:10,410 --> 00:45:18,450
first hi so you were able to mess up

746
00:45:14,849 --> 00:45:20,670
your configuration mix and we get a

747
00:45:18,450 --> 00:45:22,980
unbootable system and then resew and all

748
00:45:20,670 --> 00:45:24,630
this method work but you still have your

749
00:45:22,980 --> 00:45:26,940
broken configurations up next so how do

750
00:45:24,630 --> 00:45:29,490
you recover that one what what I

751
00:45:26,940 --> 00:45:33,299
typically would do is go back to edit

752
00:45:29,490 --> 00:45:36,720
that and fix the problem the the the

753
00:45:33,299 --> 00:45:39,329
number nine there that was unbuttoned

754
00:45:36,720 --> 00:45:42,029
you can just go when you're in the

755
00:45:39,329 --> 00:45:44,490
working version of the configuration you

756
00:45:42,030 --> 00:45:46,440
can I just say remove that version of

757
00:45:44,490 --> 00:45:47,910
this configuration so you need to

758
00:45:46,440 --> 00:45:52,289
remember what the working one looked

759
00:45:47,910 --> 00:45:53,700
like or keep a backup yeah like you

760
00:45:52,289 --> 00:45:54,780
choose something complicated and the

761
00:45:53,700 --> 00:45:56,490
system doesn't do it anymore

762
00:45:54,780 --> 00:45:59,849
yeah the configuration thought Nix this

763
00:45:56,490 --> 00:46:02,368
is the same broken one yeah so you you

764
00:45:59,849 --> 00:46:05,160
have to either keep track of what change

765
00:46:02,369 --> 00:46:06,420
you made to break it and typically I

766
00:46:05,160 --> 00:46:08,308
think people have had their

767
00:46:06,420 --> 00:46:10,799
configuration in some kind of source

768
00:46:08,309 --> 00:46:13,440
repo like a git and then you can track

769
00:46:10,799 --> 00:46:16,020
which change you did and you could even

770
00:46:13,440 --> 00:46:18,029
like doing like bisection or something

771
00:46:16,020 --> 00:46:21,660
like that to find exactly what change

772
00:46:18,029 --> 00:46:26,609
broke the system I don't know if that

773
00:46:21,660 --> 00:46:28,859
answered your question in your

774
00:46:26,609 --> 00:46:31,109
configuration file you did not specify

775
00:46:28,859 --> 00:46:36,140
any version than this how does that work

776
00:46:31,109 --> 00:46:39,960
for a functional declaration a

777
00:46:36,140 --> 00:46:42,150
functional what like and how does it

778
00:46:39,960 --> 00:46:48,390
determine the version and this while

779
00:46:42,150 --> 00:46:49,920
still being functional well depends on

780
00:46:48,390 --> 00:46:52,470
which version number you mean like the

781
00:46:49,920 --> 00:46:56,069
upstream version number so in cow say I

782
00:46:52,470 --> 00:47:01,129
had 3.0 3 and that that that is

783
00:46:56,069 --> 00:47:04,710
described in in the package so you do

784
00:47:01,130 --> 00:47:07,109
say in our package description for in

785
00:47:04,710 --> 00:47:09,420
this package is called on paper and this

786
00:47:07,109 --> 00:47:12,170
is the version of this the upstream

787
00:47:09,420 --> 00:47:14,460
version number of this pack

788
00:47:12,170 --> 00:47:15,870
of course I can change this version

789
00:47:14,460 --> 00:47:18,570
number and then I'll get the completely

790
00:47:15,870 --> 00:47:22,069
different hash inside my next door so a

791
00:47:18,570 --> 00:47:24,570
different version of this package and

792
00:47:22,070 --> 00:47:29,970
when then then I have to actually

793
00:47:24,570 --> 00:47:31,890
install this build recipe to get this in

794
00:47:29,970 --> 00:47:35,370
my user environment the updated version

795
00:47:31,890 --> 00:47:39,330
so how would you update the package in

796
00:47:35,370 --> 00:47:42,240
your nexus configuration file yeah in my

797
00:47:39,330 --> 00:47:45,980
configuration file I basically let me

798
00:47:42,240 --> 00:47:45,979
just go back here

799
00:47:47,330 --> 00:48:01,049
where did my terminal i I just booted

800
00:47:51,560 --> 00:48:03,420
terminal figuration so here I actually

801
00:48:01,050 --> 00:48:08,190
didn't specify which version I wanted of

802
00:48:03,420 --> 00:48:10,500
cows a package right so the packages so

803
00:48:08,190 --> 00:48:12,720
this is an huge attribute set of

804
00:48:10,500 --> 00:48:17,850
different packages and the cows a

805
00:48:12,720 --> 00:48:22,620
attribute or value inside this is let's

806
00:48:17,850 --> 00:48:26,400
see dude is one of these things so it

807
00:48:22,620 --> 00:48:29,730
will say which version it is and when I

808
00:48:26,400 --> 00:48:32,430
update this huge package set which I do

809
00:48:29,730 --> 00:48:34,920
by basically pulling it from the for

810
00:48:32,430 --> 00:48:37,230
example from the github repo of all the

811
00:48:34,920 --> 00:48:39,930
packages then I'll get the new version

812
00:48:37,230 --> 00:48:42,810
by by definition basically and when the

813
00:48:39,930 --> 00:48:45,120
next rebuild my system it will go into

814
00:48:42,810 --> 00:48:47,900
this new version of our my package set

815
00:48:45,120 --> 00:48:55,520
and see that this oh this is 6.2 now and

816
00:48:47,900 --> 00:48:55,520
it will install that version so yeah

817
00:48:57,170 --> 00:49:03,690
so you said that the the hash in the

818
00:49:00,990 --> 00:49:07,078
path to the Knicks store is a hash of

819
00:49:03,690 --> 00:49:10,559
the recipe yeah right not actually a

820
00:49:07,079 --> 00:49:13,230
hash of the build no so so it's a hash

821
00:49:10,559 --> 00:49:15,030
of the recipe or the build instructions

822
00:49:13,230 --> 00:49:17,849
and all the dependencies but it's not

823
00:49:15,030 --> 00:49:22,079
the hash of the the files that you built

824
00:49:17,849 --> 00:49:27,030
so where are the hashes of the package

825
00:49:22,079 --> 00:49:28,799
itself then like if the reproducible

826
00:49:27,030 --> 00:49:31,380
builds failed and you add two different

827
00:49:28,799 --> 00:49:33,359
builds of the same recipe that actually

828
00:49:31,380 --> 00:49:37,650
had different content like where are you

829
00:49:33,359 --> 00:49:40,558
the idea is that if you have if you have

830
00:49:37,650 --> 00:49:42,390
a build then determinism will say that

831
00:49:40,559 --> 00:49:44,280
if you perform this build again you'll

832
00:49:42,390 --> 00:49:47,430
get the same package so so if you have

833
00:49:44,280 --> 00:49:50,640
the package if you have the half of the

834
00:49:47,430 --> 00:49:54,419
building puts and this hash is attached

835
00:49:50,640 --> 00:49:57,569
to the package then you know that if I

836
00:49:54,420 --> 00:49:59,190
get the build this bill this bill the

837
00:49:57,569 --> 00:50:01,650
input again I'll get the same package

838
00:49:59,190 --> 00:50:03,809
basically but what if you don't like

839
00:50:01,650 --> 00:50:06,030
what if there's a failure like I mean

840
00:50:03,809 --> 00:50:10,230
you you have hashes of the actual

841
00:50:06,030 --> 00:50:12,180
package content somewhere right to see

842
00:50:10,230 --> 00:50:15,450
that the reproducibility is at the

843
00:50:12,180 --> 00:50:18,450
moment makes does not there's a big push

844
00:50:15,450 --> 00:50:21,089
towards having a hash of the build the

845
00:50:18,450 --> 00:50:23,399
package content as well since that would

846
00:50:21,089 --> 00:50:25,920
allow content and dressing and a lot of

847
00:50:23,400 --> 00:50:28,380
nice properties from that but it doesn't

848
00:50:25,920 --> 00:50:32,369
actually work with this hash of the the

849
00:50:28,380 --> 00:50:34,710
content only the hash of the build

850
00:50:32,369 --> 00:50:36,839
recipe so you're but you're downloading

851
00:50:34,710 --> 00:50:41,880
binaries that somebody else has compiled

852
00:50:36,839 --> 00:50:46,859
and you're not

853
00:50:41,880 --> 00:50:48,480
sorry sorry I don't hear anything are

854
00:50:46,859 --> 00:50:50,369
there binaries of being distributed

855
00:50:48,480 --> 00:50:52,079
though like you're downloading binaries

856
00:50:50,369 --> 00:50:55,259
yeah everybody else has built yes you're

857
00:50:52,079 --> 00:50:58,980
loved you can download binaries and you

858
00:50:55,259 --> 00:51:01,680
use the hash of the build recipe as the

859
00:50:58,980 --> 00:51:04,170
key for the downloaded package and then

860
00:51:01,680 --> 00:51:07,200
you you're basically the package can be

861
00:51:04,170 --> 00:51:10,079
signed by whoever provides you the

862
00:51:07,200 --> 00:51:13,019
package okay so there they are actually

863
00:51:10,079 --> 00:51:15,329
signing their binaries yeah it's a

864
00:51:13,019 --> 00:51:18,689
signature placed on the package not the

865
00:51:15,329 --> 00:51:20,940
hash of the package content but starts

866
00:51:18,690 --> 00:51:23,700
at the same so you have to trust who

867
00:51:20,940 --> 00:51:27,029
you're getting the package from right

868
00:51:23,700 --> 00:51:29,819
and that's that's the thing that why why

869
00:51:27,029 --> 00:51:32,039
it would be nice to have the content of

870
00:51:29,819 --> 00:51:34,019
the package also hashed since then we

871
00:51:32,039 --> 00:51:35,849
can pull the package from anywhere and

872
00:51:34,019 --> 00:51:39,629
then we can just verify that it matches

873
00:51:35,849 --> 00:51:42,920
the hash yeah I mean it seems like

874
00:51:39,630 --> 00:51:47,249
identifying the things in the store

875
00:51:42,920 --> 00:51:48,779
using the package the output hash which

876
00:51:47,249 --> 00:51:55,249
of course would include the input house

877
00:51:48,779 --> 00:51:55,249
also would be ideal yeah

878
00:51:55,980 --> 00:52:06,660
I think this is the final question what

879
00:52:02,970 --> 00:52:10,160
if different built recipes they touched

880
00:52:06,660 --> 00:52:15,180
the same configuration file how can it

881
00:52:10,160 --> 00:52:18,259
can they can merge the changes in some

882
00:52:15,180 --> 00:52:22,410
way or way if I understood you correctly

883
00:52:18,260 --> 00:52:23,369
so for example instead of fstab sorry I

884
00:52:22,410 --> 00:52:33,569
don't hear anything

885
00:52:23,369 --> 00:52:35,220
oh maybe I'll run over there built

886
00:52:33,570 --> 00:52:36,599
recipes if they touch the same

887
00:52:35,220 --> 00:52:38,430
configuration file a global

888
00:52:36,599 --> 00:52:43,650
configuration file what happens then and

889
00:52:38,430 --> 00:52:45,839
they actually get merged well the build

890
00:52:43,650 --> 00:52:49,680
recipes are not allowed to have any

891
00:52:45,839 --> 00:52:52,020
global State or any side effects so so

892
00:52:49,680 --> 00:52:54,180
what about etcetera so if you have any

893
00:52:52,020 --> 00:52:56,970
any kind of global configuration you

894
00:52:54,180 --> 00:52:59,368
want to inject into the package build

895
00:52:56,970 --> 00:53:00,930
you actually have to provide that inside

896
00:52:59,369 --> 00:53:04,410
the recipe itself so it's like an

897
00:53:00,930 --> 00:53:06,270
argument so it's it will become like an

898
00:53:04,410 --> 00:53:10,140
argument into this build function so

899
00:53:06,270 --> 00:53:13,200
there's no like hidden variable injected

900
00:53:10,140 --> 00:53:14,640
into the build process and bills are

901
00:53:13,200 --> 00:53:16,200
typically done in like a sandbox

902
00:53:14,640 --> 00:53:18,509
environment where there's no network

903
00:53:16,200 --> 00:53:22,230
access there is no access outside the

904
00:53:18,510 --> 00:53:24,720
bill directly and like the time is set

905
00:53:22,230 --> 00:53:30,000
to the epoch

906
00:53:24,720 --> 00:53:32,129
zero like 1970 you answer precisely that

907
00:53:30,000 --> 00:53:34,800
question if to build recipes charts

908
00:53:32,130 --> 00:53:38,670
etcetera fstab can they do that in some

909
00:53:34,800 --> 00:53:43,319
way you had a build recipe that did some

910
00:53:38,670 --> 00:53:46,980
changes to F star right and that label

911
00:53:43,319 --> 00:53:49,319
inside the package hashed folder and

912
00:53:46,980 --> 00:53:52,339
they all live inside the next door but

913
00:53:49,319 --> 00:53:55,170
the hash will kind of keep them separate

914
00:53:52,339 --> 00:53:58,349
regardless even if they kind of contain

915
00:53:55,170 --> 00:54:00,150
the same paths and everything so I think

916
00:53:58,349 --> 00:54:01,670
you train here but please behave big

917
00:54:00,150 --> 00:54:10,130
applause

918
00:54:01,670 --> 00:54:10,130
[Applause]

