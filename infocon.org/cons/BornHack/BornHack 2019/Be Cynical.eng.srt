1
00:01:40,469 --> 00:01:49,958
hello everyone and thank you hello

2
00:01:47,170 --> 00:01:52,209
everyone my name is Jimmy I'm an

3
00:01:49,959 --> 00:01:55,479
engineering manager at tv2 Denmark

4
00:01:52,209 --> 00:01:57,219
that's a broadcasting station but I'm

5
00:01:55,479 --> 00:02:00,399
not working with TV because they also

6
00:01:57,219 --> 00:02:04,149
run a streaming service which is where I

7
00:02:00,399 --> 00:02:06,130
put my work and I'm here to talk to you

8
00:02:04,149 --> 00:02:08,229
about being cynical and I'm not talking

9
00:02:06,130 --> 00:02:11,260
about people being cynical but software

10
00:02:08,229 --> 00:02:13,930
being cynical and much of this talk is

11
00:02:11,260 --> 00:02:16,420
inspired by a guy called Michael Nygaard

12
00:02:13,930 --> 00:02:18,730
a book that he wrote called release it

13
00:02:16,420 --> 00:02:23,470
and there's one quote in his book that I

14
00:02:18,730 --> 00:02:25,540
would like to tell cynical soft wax Pat

15
00:02:23,470 --> 00:02:27,849
expects bad things to happen and is

16
00:02:25,540 --> 00:02:30,400
never surprised when they do cynical

17
00:02:27,849 --> 00:02:32,260
software doesn't even trust itself so it

18
00:02:30,400 --> 00:02:35,319
puts up internal barriers to protect

19
00:02:32,260 --> 00:02:37,630
itself from failures refuses to get too

20
00:02:35,319 --> 00:02:39,638
intimate with other systems because it

21
00:02:37,630 --> 00:02:44,230
could get hurt so that's what we're

22
00:02:39,639 --> 00:02:48,609
gonna talk about but let's first look at

23
00:02:44,230 --> 00:02:52,060
at the law of large systems because if

24
00:02:48,609 --> 00:02:54,130
you run a small system that you probably

25
00:02:52,060 --> 00:02:55,510
don't have that many problems with it

26
00:02:54,130 --> 00:02:58,120
and probably also don't have that many

27
00:02:55,510 --> 00:02:59,560
customers on it but the larger system

28
00:02:58,120 --> 00:03:03,340
becomes the more and more components

29
00:02:59,560 --> 00:03:06,030
that that the system is consisting of

30
00:03:03,340 --> 00:03:09,130
the more and more things can go wrong

31
00:03:06,030 --> 00:03:11,889
because when there's like hundreds or

32
00:03:09,130 --> 00:03:13,900
thousands sometimes of for example micro

33
00:03:11,889 --> 00:03:16,209
service is a good example running

34
00:03:13,900 --> 00:03:18,370
there's always some piece of the

35
00:03:16,209 --> 00:03:24,030
software that's get getting redeployed

36
00:03:18,370 --> 00:03:26,709
or reloading or actually have failed so

37
00:03:24,030 --> 00:03:28,690
everything is normal it's becoming

38
00:03:26,709 --> 00:03:30,730
everything is working is becoming the

39
00:03:28,690 --> 00:03:32,590
anomaly it's actually more often that

40
00:03:30,730 --> 00:03:34,690
something is wrong then something is not

41
00:03:32,590 --> 00:03:37,450
wrong because there's so many components

42
00:03:34,690 --> 00:03:40,660
involved so so everything is working is

43
00:03:37,450 --> 00:03:43,238
the weird state so what can we do to

44
00:03:40,660 --> 00:03:45,040
contain the blast radius of something

45
00:03:43,239 --> 00:03:47,980
when something goes wrong

46
00:03:45,040 --> 00:03:50,349
and how do we avoid these failures to

47
00:03:47,980 --> 00:03:56,768
propagate and crack through our our

48
00:03:50,349 --> 00:03:59,589
micro service architecture and one one

49
00:03:56,769 --> 00:04:01,329
thing is of course stability so let's

50
00:03:59,590 --> 00:04:05,709
talk about what stability is before we

51
00:04:01,329 --> 00:04:10,689
look into how things can go wrong it's

52
00:04:05,709 --> 00:04:12,790
an architectural trait that that tells

53
00:04:10,689 --> 00:04:16,149
if the system is available or not

54
00:04:12,790 --> 00:04:18,668
so observed availability is the system

55
00:04:16,149 --> 00:04:20,198
is responding to requests that's coming

56
00:04:18,668 --> 00:04:23,620
into the system tests you observed

57
00:04:20,199 --> 00:04:26,080
availability and a fault is when some

58
00:04:23,620 --> 00:04:28,690
incorrect state is introduced into the

59
00:04:26,080 --> 00:04:31,020
system a fault doesn't necessarily mean

60
00:04:28,690 --> 00:04:34,479
that it's that it's visible to customers

61
00:04:31,020 --> 00:04:36,280
it doesn't even mean that the system is

62
00:04:34,479 --> 00:04:38,289
not running normally a fault can happen

63
00:04:36,280 --> 00:04:41,349
if you have put up barriers without

64
00:04:38,289 --> 00:04:43,440
destroying your system when a fault

65
00:04:41,349 --> 00:04:46,120
becomes observable it's called a failure

66
00:04:43,440 --> 00:04:48,659
so that's the inability of the system to

67
00:04:46,120 --> 00:04:53,400
actually do what it's supposed to do and

68
00:04:48,659 --> 00:04:56,620
then becomes observable by the users and

69
00:04:53,400 --> 00:04:58,870
no matter what we do no matter how many

70
00:04:56,620 --> 00:05:01,840
safeguards we put up and how no matter

71
00:04:58,870 --> 00:05:05,380
how good we become systems will always

72
00:05:01,840 --> 00:05:07,539
fail at some point false will creep in

73
00:05:05,380 --> 00:05:09,490
especially around the edges of systems

74
00:05:07,539 --> 00:05:12,669
especially where you have integration

75
00:05:09,490 --> 00:05:15,159
points like especially in distributors

76
00:05:12,669 --> 00:05:17,320
software you have a lot of different

77
00:05:15,159 --> 00:05:20,199
integration points to other services to

78
00:05:17,320 --> 00:05:22,630
databases to yeah what have you caches

79
00:05:20,199 --> 00:05:25,380
and so on and especially around there

80
00:05:22,630 --> 00:05:29,199
that something usually goes wrong and

81
00:05:25,380 --> 00:05:31,240
you can have component level stability

82
00:05:29,199 --> 00:05:33,909
without having system level tube

83
00:05:31,240 --> 00:05:36,580
stability if you do a lot of tests on

84
00:05:33,909 --> 00:05:42,330
one service it doesn't really mean that

85
00:05:36,580 --> 00:05:46,300
your system is fail proof for example

86
00:05:42,330 --> 00:05:48,520
let's say we have two micro services one

87
00:05:46,300 --> 00:05:51,960
is dependent on the other one to serve

88
00:05:48,520 --> 00:05:54,190
its responses and in your dependent

89
00:05:51,960 --> 00:05:58,000
micro service something goes wrong a

90
00:05:54,190 --> 00:05:59,920
fault is triggered and eventually the

91
00:05:58,000 --> 00:06:02,200
threat pool of your dependency becomes

92
00:05:59,920 --> 00:06:03,910
full it can no longer serve requests

93
00:06:02,200 --> 00:06:06,460
because it tastes too long to to

94
00:06:03,910 --> 00:06:09,370
actually get responses ours the system

95
00:06:06,460 --> 00:06:12,599
again and at some point it probably

96
00:06:09,370 --> 00:06:16,030
starts responding at like entirely and

97
00:06:12,600 --> 00:06:18,160
in your service that's depending on the

98
00:06:16,030 --> 00:06:21,280
other one if you're not not put up

99
00:06:18,160 --> 00:06:24,280
barriers to prevent this these failures

100
00:06:21,280 --> 00:06:26,770
will start to crack through the system

101
00:06:24,280 --> 00:06:31,419
and the architecture actually amplifies

102
00:06:26,770 --> 00:06:34,599
this these faults and then you as a

103
00:06:31,419 --> 00:06:36,039
caller starts to have problems and at

104
00:06:34,600 --> 00:06:37,540
some point you probably starts

105
00:06:36,040 --> 00:06:40,900
responding as well and then you have

106
00:06:37,540 --> 00:06:42,910
loss of availability because you it's

107
00:06:40,900 --> 00:06:47,250
observable to the user and you're no

108
00:06:42,910 --> 00:06:51,940
longer serving requests at all so let's

109
00:06:47,250 --> 00:06:57,610
look at an example of this and for this

110
00:06:51,940 --> 00:06:59,650
I created a small demo of I work with

111
00:06:57,610 --> 00:07:01,780
video platform so I had to make a small

112
00:06:59,650 --> 00:07:04,179
demo of a video platform it's very tiny

113
00:07:01,780 --> 00:07:08,859
but it served the purpose in this

114
00:07:04,180 --> 00:07:13,540
example we have a user that talks to an

115
00:07:08,860 --> 00:07:16,180
API gateway and that API gateway it has

116
00:07:13,540 --> 00:07:18,700
two downstream services one is content

117
00:07:16,180 --> 00:07:20,880
that's regular video content that an

118
00:07:18,700 --> 00:07:23,800
editor put up so that's quite static

119
00:07:20,880 --> 00:07:25,570
another one is a it's a server

120
00:07:23,800 --> 00:07:27,340
recommendation engine that I created

121
00:07:25,570 --> 00:07:29,860
what it really does is just show you

122
00:07:27,340 --> 00:07:33,039
random data but just to have something

123
00:07:29,860 --> 00:07:35,470
dynamically now both these services are

124
00:07:33,040 --> 00:07:38,890
getting their data from a Redis cache in

125
00:07:35,470 --> 00:07:45,250
this in this demo so let's see what

126
00:07:38,890 --> 00:07:47,229
happens if if the content API stops

127
00:07:45,250 --> 00:07:52,810
responding and you have not put up any

128
00:07:47,229 --> 00:07:57,060
barriers this is an example of a request

129
00:07:52,810 --> 00:07:59,710
to that API gateway it's in in graph QL

130
00:07:57,060 --> 00:08:02,470
so I'm making a request to the its

131
00:07:59,710 --> 00:08:04,419
editorial content so that means that I'm

132
00:08:02,470 --> 00:08:09,370
making a request that's being forwarded

133
00:08:04,419 --> 00:08:11,930
to the to the content API and not right

134
00:08:09,370 --> 00:08:16,729
now it's working perfectly I'm getting a

135
00:08:11,930 --> 00:08:19,250
static response back but let's try to

136
00:08:16,729 --> 00:08:25,340
introduce some kind of failure in into

137
00:08:19,250 --> 00:08:28,910
this system simply by shutting down the

138
00:08:25,340 --> 00:08:30,349
content API so we're stopping the dark

139
00:08:28,910 --> 00:08:32,270
container that the content API is

140
00:08:30,350 --> 00:08:39,260
running in and at some point when it's

141
00:08:32,270 --> 00:08:41,779
shut down we'll see what happens yeah we

142
00:08:39,260 --> 00:08:43,640
get a slow response which means that our

143
00:08:41,779 --> 00:08:45,920
threats now take longer time to execute

144
00:08:43,640 --> 00:08:49,640
and when you have many like several

145
00:08:45,920 --> 00:08:52,640
hundred requests per seconds these these

146
00:08:49,640 --> 00:08:53,810
threats will start to to queue up and at

147
00:08:52,640 --> 00:08:55,670
some point your thread put your all

148
00:08:53,810 --> 00:08:58,279
thread pool will be become full and you

149
00:08:55,670 --> 00:09:01,849
will start stop responding and we see

150
00:08:58,279 --> 00:09:08,000
probably to no surprise that we get a

151
00:09:01,850 --> 00:09:17,029
connection error to that API just going

152
00:09:08,000 --> 00:09:18,650
to start up again so it's probably no

153
00:09:17,029 --> 00:09:22,010
surprise that when you not put anything

154
00:09:18,650 --> 00:09:24,620
to in to prevent this that and a fault

155
00:09:22,010 --> 00:09:28,910
or a failure will happen so we actually

156
00:09:24,620 --> 00:09:32,750
had system failure here so what can we

157
00:09:28,910 --> 00:09:34,550
do to prevent this you can design some

158
00:09:32,750 --> 00:09:37,160
something called shock absorbers and

159
00:09:34,550 --> 00:09:39,709
that can be directly new software in

160
00:09:37,160 --> 00:09:41,390
some kind of middleware or even in a web

161
00:09:39,709 --> 00:09:46,369
server or some other server you can

162
00:09:41,390 --> 00:09:48,589
build these shock absorbers and some of

163
00:09:46,370 --> 00:09:51,680
them these are from Michael Naga at the

164
00:09:48,589 --> 00:09:57,079
book some of them for example fail fast

165
00:09:51,680 --> 00:10:00,170
so the faster you can tell the faster

166
00:09:57,079 --> 00:10:02,870
dependence you can tell you that I'm not

167
00:10:00,170 --> 00:10:06,079
serving requests the faster you can you

168
00:10:02,870 --> 00:10:08,540
can release that the thread and carry on

169
00:10:06,079 --> 00:10:10,310
with your regular work instead of piling

170
00:10:08,540 --> 00:10:13,040
up and eventually having thread

171
00:10:10,310 --> 00:10:15,380
contention so fail fast is one shock

172
00:10:13,040 --> 00:10:17,540
absorber bulkheads

173
00:10:15,380 --> 00:10:21,140
is another one for example let's say you

174
00:10:17,540 --> 00:10:22,579
have two dependent on components so

175
00:10:21,140 --> 00:10:23,900
instead of having one thread pool that

176
00:10:22,579 --> 00:10:26,689
you used to

177
00:10:23,900 --> 00:10:28,640
crow or to call both of them and once

178
00:10:26,690 --> 00:10:30,410
that's being slow that means that all

179
00:10:28,640 --> 00:10:32,300
your threats will be busy waiting for

180
00:10:30,410 --> 00:10:33,980
that service and that means that you

181
00:10:32,300 --> 00:10:36,140
will also not have free threats to talk

182
00:10:33,980 --> 00:10:38,150
to the other service so one thing is

183
00:10:36,140 --> 00:10:41,449
bulkheads so that means that you could

184
00:10:38,150 --> 00:10:44,689
pop for example have to separate thread

185
00:10:41,450 --> 00:10:47,660
pools so bulkheads come from from ships

186
00:10:44,690 --> 00:10:49,610
that well if you look at the the ship it

187
00:10:47,660 --> 00:10:52,280
has different compartments so that if

188
00:10:49,610 --> 00:10:55,490
water flows into one part of the ship it

189
00:10:52,280 --> 00:10:59,120
doesn't sink always Titanic had these as

190
00:10:55,490 --> 00:11:01,940
well but it sank anyway so that that's

191
00:10:59,120 --> 00:11:03,830
the idea of pockets another one is

192
00:11:01,940 --> 00:11:05,710
circuit breakers which we'll come back

193
00:11:03,830 --> 00:11:09,140
to and of course

194
00:11:05,710 --> 00:11:12,950
loadshedding that means that you as a

195
00:11:09,140 --> 00:11:15,080
service tells the the caller that I'm

196
00:11:12,950 --> 00:11:17,480
not I'm busy I cannot handle any more

197
00:11:15,080 --> 00:11:19,400
requests so there you have a chance to

198
00:11:17,480 --> 00:11:23,360
redirect your requests somewhere else

199
00:11:19,400 --> 00:11:26,150
and of course caches because everything

200
00:11:23,360 --> 00:11:28,550
about availability is about giving a

201
00:11:26,150 --> 00:11:31,420
response as fast as possible and caches

202
00:11:28,550 --> 00:11:31,420
are quite good at that

203
00:11:32,860 --> 00:11:40,310
so we will try to stop propagating these

204
00:11:36,740 --> 00:11:45,350
these faults and errors and prevent them

205
00:11:40,310 --> 00:11:48,500
from spreading but if we look at another

206
00:11:45,350 --> 00:11:51,380
example where we actually build in shock

207
00:11:48,500 --> 00:11:53,210
absorbers the same scenario some

208
00:11:51,380 --> 00:11:56,560
dependency you are you are dependent on

209
00:11:53,210 --> 00:12:00,500
it starts a trigger some kind of fault

210
00:11:56,560 --> 00:12:05,420
its thread pool becomes full and it

211
00:12:00,500 --> 00:12:08,960
stops responding but now you as a caller

212
00:12:05,420 --> 00:12:11,270
tolerates this behavior the failures

213
00:12:08,960 --> 00:12:13,340
that the folder still happens in your

214
00:12:11,270 --> 00:12:16,790
dependency but you are all you're

215
00:12:13,340 --> 00:12:18,800
prepared for this so instead of having

216
00:12:16,790 --> 00:12:21,380
loss of availability you have loss of

217
00:12:18,800 --> 00:12:23,449
feature so that's that dependency that

218
00:12:21,380 --> 00:12:25,700
feature that dependency was responsible

219
00:12:23,450 --> 00:12:28,340
for you will of course not have that one

220
00:12:25,700 --> 00:12:30,980
but you still you can still carry on and

221
00:12:28,340 --> 00:12:33,230
serve requests and you can like continue

222
00:12:30,980 --> 00:12:34,850
in a decorated state instead so we have

223
00:12:33,230 --> 00:12:36,960
loss of feature instead of loss of

224
00:12:34,850 --> 00:12:40,800
availability

225
00:12:36,960 --> 00:12:43,110
and and circuit breakers is one of the

226
00:12:40,800 --> 00:12:46,620
patterns that we use to to handle this

227
00:12:43,110 --> 00:12:48,330
situation it works basically like an

228
00:12:46,620 --> 00:12:50,520
old-fashioned circuit breaker that you

229
00:12:48,330 --> 00:12:53,630
will find in a house or something like

230
00:12:50,520 --> 00:12:55,860
that that when the circuit is closed

231
00:12:53,630 --> 00:12:57,540
everything is just going happily you're

232
00:12:55,860 --> 00:13:01,190
sending requests out to a dependency

233
00:12:57,540 --> 00:13:05,099
without any problem whenever a failure

234
00:13:01,190 --> 00:13:08,820
in in a whenever a failure happens for

235
00:13:05,100 --> 00:13:12,990
example in an HTP world so that could

236
00:13:08,820 --> 00:13:16,290
say when when you don't get a 200 or 400

237
00:13:12,990 --> 00:13:18,660
range response code you take like how

238
00:13:16,290 --> 00:13:20,969
many failures do we get from your

239
00:13:18,660 --> 00:13:23,670
dependency and at some point when you

240
00:13:20,970 --> 00:13:26,220
reach the threshold you go into your

241
00:13:23,670 --> 00:13:28,349
transition from closed state to open

242
00:13:26,220 --> 00:13:31,350
states so it's basically a simple state

243
00:13:28,350 --> 00:13:34,010
machine and when the circuit opens you

244
00:13:31,350 --> 00:13:37,470
stop calling your dependency altogether

245
00:13:34,010 --> 00:13:39,870
because the last five times you called I

246
00:13:37,470 --> 00:13:41,370
got the slow response so it's hurting

247
00:13:39,870 --> 00:13:43,529
you and is probably also hurting your

248
00:13:41,370 --> 00:13:45,600
dependency because if your dependency is

249
00:13:43,529 --> 00:13:48,540
down because it gets too many requests

250
00:13:45,600 --> 00:13:50,070
it doesn't help that dependency if you

251
00:13:48,540 --> 00:13:51,750
start if you just continue firing

252
00:13:50,070 --> 00:13:56,100
requests at it it's like kicking a man

253
00:13:51,750 --> 00:13:58,920
already lying down so it helps both

254
00:13:56,100 --> 00:14:01,860
parties but what you can do instead of

255
00:13:58,920 --> 00:14:04,920
calling the dependency is that you go to

256
00:14:01,860 --> 00:14:07,920
some kind of implemented fallback which

257
00:14:04,920 --> 00:14:10,589
could be call another service or take

258
00:14:07,920 --> 00:14:13,439
still data from a cache or whatever your

259
00:14:10,589 --> 00:14:15,589
your situation might might might be

260
00:14:13,440 --> 00:14:19,350
fitting for your situation

261
00:14:15,589 --> 00:14:21,089
so you in this case you also get fast

262
00:14:19,350 --> 00:14:22,470
response because you're not going

263
00:14:21,089 --> 00:14:24,390
through your dependency and waiting for

264
00:14:22,470 --> 00:14:26,670
a timeout you actually take something

265
00:14:24,390 --> 00:14:29,329
that you know will be there or has a

266
00:14:26,670 --> 00:14:31,380
higher probability of being there

267
00:14:29,329 --> 00:14:35,819
sometimes you need to go back into

268
00:14:31,380 --> 00:14:38,820
closed state and through to self-heal in

269
00:14:35,820 --> 00:14:40,470
the system so once in a while when you

270
00:14:38,820 --> 00:14:43,399
have been sitting in open state for long

271
00:14:40,470 --> 00:14:46,230
enough you go into half open state is

272
00:14:43,399 --> 00:14:48,089
where sometimes you send a request out

273
00:14:46,230 --> 00:14:50,749
to a dependency to see if it's still not

274
00:14:48,089 --> 00:14:53,910
responding and if you still not respond

275
00:14:50,749 --> 00:14:57,329
you just transition back to open state

276
00:14:53,910 --> 00:15:00,299
but if the dependency is now starting to

277
00:14:57,329 --> 00:15:03,569
take requests again your transition into

278
00:15:00,299 --> 00:15:05,459
closed state so there you have your you

279
00:15:03,569 --> 00:15:07,679
have both self-healing you have fast

280
00:15:05,459 --> 00:15:10,349
responses and your helping you and your

281
00:15:07,679 --> 00:15:17,540
your dependency recovering from this

282
00:15:10,350 --> 00:15:20,970
from this fault so let's observe this

283
00:15:17,540 --> 00:15:24,149
behavior instead it's the same

284
00:15:20,970 --> 00:15:26,939
architecture except this time in the API

285
00:15:24,149 --> 00:15:28,589
gateway I have implant implemented

286
00:15:26,939 --> 00:15:30,779
circuit breakers and actually also

287
00:15:28,589 --> 00:15:32,999
bulkheads because I separated the two

288
00:15:30,779 --> 00:15:35,309
thread pools so one thread pool for

289
00:15:32,999 --> 00:15:38,399
constant API one thread pool for the

290
00:15:35,309 --> 00:15:43,290
recommendation API so there's a circuit

291
00:15:38,399 --> 00:15:49,739
breaker in both of these cases so let's

292
00:15:43,290 --> 00:15:52,469
see what happens now so in in in this

293
00:15:49,739 --> 00:15:56,100
API call we can see that I'm making a

294
00:15:52,470 --> 00:16:01,049
can you see it it's a bit blurry I can

295
00:15:56,100 --> 00:16:02,459
try making a pillar so in this case I'm

296
00:16:01,049 --> 00:16:05,429
making both a request to the

297
00:16:02,459 --> 00:16:08,790
recommendation KPI and the editorial API

298
00:16:05,429 --> 00:16:12,720
and I added a few extra fields to this

299
00:16:08,790 --> 00:16:19,429
one one is a circuit breaker open so

300
00:16:12,720 --> 00:16:22,769
that means RV in MC RV in the open state

301
00:16:19,429 --> 00:16:24,689
is response from fallback that means

302
00:16:22,769 --> 00:16:26,699
that I've been actually using the

303
00:16:24,689 --> 00:16:29,488
fallback method instead of the response

304
00:16:26,699 --> 00:16:32,660
we got from our dependency and the last

305
00:16:29,489 --> 00:16:35,129
one is is response short circuited

306
00:16:32,660 --> 00:16:40,639
because you can get a fallback without

307
00:16:35,129 --> 00:16:43,319
having a short circuited circuit breaker

308
00:16:40,639 --> 00:16:45,119
and we can see that now everything says

309
00:16:43,319 --> 00:16:48,149
false false false which means that we

310
00:16:45,119 --> 00:16:51,209
are actually in close state and we can

311
00:16:48,149 --> 00:16:55,079
see that we are getting random responses

312
00:16:51,209 --> 00:16:57,329
from our recommendation API by the

313
00:16:55,079 --> 00:17:03,229
description changing every time I make a

314
00:16:57,329 --> 00:17:03,229
request so let's

315
00:17:05,250 --> 00:17:10,809
let's introduce a failure into the

316
00:17:08,199 --> 00:17:15,910
recommendation API this time simply by

317
00:17:10,809 --> 00:17:22,420
stopping the dark container it's still

318
00:17:15,910 --> 00:17:25,839
running should be there now we get a

319
00:17:22,420 --> 00:17:27,670
slow response and we see that the

320
00:17:25,839 --> 00:17:30,340
circuit breaker is still not in open

321
00:17:27,670 --> 00:17:32,860
state pro-v actually got a response from

322
00:17:30,340 --> 00:17:35,980
the fallback and it's not

323
00:17:32,860 --> 00:17:37,899
short-circuited if you do a request

324
00:17:35,980 --> 00:17:41,440
again we can see that we again waiting

325
00:17:37,900 --> 00:17:43,840
for the timeout and we have the same

326
00:17:41,440 --> 00:17:46,360
situation we are still in open state we

327
00:17:43,840 --> 00:17:50,980
get a response from the fallback and the

328
00:17:46,360 --> 00:17:53,439
circuit is not open so what I've done in

329
00:17:50,980 --> 00:17:56,410
in this scenario so my fallback that I

330
00:17:53,440 --> 00:17:59,220
implemented was instead of when I'm

331
00:17:56,410 --> 00:18:03,640
requesting recommendation API if I get

332
00:17:59,220 --> 00:18:05,410
an error I will request the console API

333
00:18:03,640 --> 00:18:07,660
instead so therefore in this case we

334
00:18:05,410 --> 00:18:11,380
will actually see that the response from

335
00:18:07,660 --> 00:18:14,440
the editorial content API is exactly the

336
00:18:11,380 --> 00:18:16,150
same as in the recommendation API and it

337
00:18:14,440 --> 00:18:17,650
could be any implementation that you can

338
00:18:16,150 --> 00:18:21,940
imagine and that's fitting for your

339
00:18:17,650 --> 00:18:25,300
system as a fallback and the reason why

340
00:18:21,940 --> 00:18:27,160
I cannot trigger an an open state is

341
00:18:25,300 --> 00:18:29,710
because I'm not making requests fast

342
00:18:27,160 --> 00:18:31,630
enough because it has this window where

343
00:18:29,710 --> 00:18:33,580
it looks for it needs that many errors

344
00:18:31,630 --> 00:18:37,990
within a time window before it actually

345
00:18:33,580 --> 00:18:44,080
opens the circuit so we can put some

346
00:18:37,990 --> 00:18:50,410
load on it and making sure that I'm

347
00:18:44,080 --> 00:18:52,780
using the right port I am so I'm using a

348
00:18:50,410 --> 00:18:55,740
load testing tool so put some load on

349
00:18:52,780 --> 00:18:59,590
the system and that should force it into

350
00:18:55,740 --> 00:19:02,679
see it's already it's already now in an

351
00:18:59,590 --> 00:19:04,830
open state so this means that I got the

352
00:19:02,679 --> 00:19:08,530
circuit is now open I am receiving

353
00:19:04,830 --> 00:19:10,750
responses from my callback and we are

354
00:19:08,530 --> 00:19:12,160
short circuited but one thing that you

355
00:19:10,750 --> 00:19:14,650
will see now that you didn't see before

356
00:19:12,160 --> 00:19:15,430
is that we get extremely fast responses

357
00:19:14,650 --> 00:19:17,260
the

358
00:19:15,430 --> 00:19:20,470
because now the circuit is open so we're

359
00:19:17,260 --> 00:19:23,170
not even trying to get a response from

360
00:19:20,470 --> 00:19:25,030
the recommendation API we're not even

361
00:19:23,170 --> 00:19:29,410
calling it and we're going directly into

362
00:19:25,030 --> 00:19:32,910
our fallback and at some point if I kept

363
00:19:29,410 --> 00:19:36,220
refreshing I would see sometimes that

364
00:19:32,910 --> 00:19:38,410
this one will turn into false that's

365
00:19:36,220 --> 00:19:40,990
when it transitions to half-open State

366
00:19:38,410 --> 00:19:42,910
to try and send a request out to the

367
00:19:40,990 --> 00:19:48,480
dependency to find out if it's recovered

368
00:19:42,910 --> 00:19:54,160
or not and if we look at our load test

369
00:19:48,480 --> 00:19:56,020
that I've started this is the HTTP code

370
00:19:54,160 --> 00:19:59,620
that we wish that we receive we see a

371
00:19:56,020 --> 00:20:07,240
tan at no point you cannot see anything

372
00:19:59,620 --> 00:20:10,389
at all at no point are we getting

373
00:20:07,240 --> 00:20:14,410
anything else than 200 okay so even

374
00:20:10,390 --> 00:20:17,170
though we have a system that's down we

375
00:20:14,410 --> 00:20:19,150
have Dec related we any dig related

376
00:20:17,170 --> 00:20:24,000
State what we are still serving requests

377
00:20:19,150 --> 00:20:34,660
we're serving customers I'm just gonna

378
00:20:24,000 --> 00:20:43,120
recover my system yep now it should be

379
00:20:34,660 --> 00:20:44,920
back to normal yeah so type in this case

380
00:20:43,120 --> 00:20:48,419
we can see that our shock absorber

381
00:20:44,920 --> 00:20:48,420
actually does what it's supposed to do

382
00:20:51,210 --> 00:20:58,150
so how can we how can we test this we

383
00:20:55,330 --> 00:21:01,840
can of course we can do some some a bit

384
00:20:58,150 --> 00:21:03,580
more scientific approach by by creating

385
00:21:01,840 --> 00:21:06,790
some quality attributes and areas that

386
00:21:03,580 --> 00:21:08,949
tells you in these scenarios in this

387
00:21:06,790 --> 00:21:12,040
time frame when we need to have this

388
00:21:08,950 --> 00:21:14,320
thing happen we could do low tests like

389
00:21:12,040 --> 00:21:17,770
I did we could also do manual tests

390
00:21:14,320 --> 00:21:19,840
which I also did now but I really want

391
00:21:17,770 --> 00:21:23,530
this to be automated and I want this to

392
00:21:19,840 --> 00:21:26,649
run like a test scenario in my CI

393
00:21:23,530 --> 00:21:30,270
pipeline so I don't rely on people

394
00:21:26,650 --> 00:21:30,270
remembering to do these tests

395
00:21:31,710 --> 00:21:37,929
we could for example we could start up

396
00:21:35,169 --> 00:21:41,440
all our environment and run some

397
00:21:37,929 --> 00:21:43,570
integration tests or system tests on the

398
00:21:41,440 --> 00:21:47,559
API gateway and introduce some kind of

399
00:21:43,570 --> 00:21:49,809
errors into the systems and for example

400
00:21:47,559 --> 00:21:52,418
I like using dagger like I just did I'm

401
00:21:49,809 --> 00:21:54,129
running all of this system in dogger

402
00:21:52,419 --> 00:21:57,850
right now and it's not a big problem so

403
00:21:54,130 --> 00:21:59,320
that one thing that we could do but what

404
00:21:57,850 --> 00:22:02,908
if your micro service architecture looks

405
00:21:59,320 --> 00:22:05,260
like this you cannot spin up hundreds of

406
00:22:02,909 --> 00:22:07,929
thousands of micro services every time

407
00:22:05,260 --> 00:22:09,970
you want to to run some kind of test it

408
00:22:07,929 --> 00:22:14,140
will take hours and probably take a lot

409
00:22:09,970 --> 00:22:15,880
of lot of CPU and and resources so it's

410
00:22:14,140 --> 00:22:17,620
not really feasible to start up your

411
00:22:15,880 --> 00:22:23,919
entire environment every time you want

412
00:22:17,620 --> 00:22:26,350
to test the stability of it so let's

413
00:22:23,919 --> 00:22:31,299
let's look at some some approaches that

414
00:22:26,350 --> 00:22:34,840
we could do this is how I imagine or how

415
00:22:31,299 --> 00:22:37,510
I see most distributed software is layer

416
00:22:34,840 --> 00:22:39,610
it has some kind of resource that is

417
00:22:37,510 --> 00:22:43,658
some kind of some kind of endpoints that

418
00:22:39,610 --> 00:22:46,330
the service exposes and some kind of

419
00:22:43,659 --> 00:22:46,929
service layer it has some kind of domain

420
00:22:46,330 --> 00:22:49,539
logic

421
00:22:46,929 --> 00:22:52,480
it has repositories and data mappers

422
00:22:49,539 --> 00:22:56,549
through databases and so on and and it

423
00:22:52,480 --> 00:22:59,620
has some kind of HTTP implementation too

424
00:22:56,549 --> 00:23:02,529
dependent on component so in this case

425
00:22:59,620 --> 00:23:05,649
we we looked at before this one was our

426
00:23:02,529 --> 00:23:09,789
API gateway and this one was too

427
00:23:05,649 --> 00:23:11,860
dependent on either day what's he called

428
00:23:09,789 --> 00:23:16,750
the content API or the recommendation

429
00:23:11,860 --> 00:23:19,240
API so that's how it could look one

430
00:23:16,750 --> 00:23:23,260
thing that we could do to test it was to

431
00:23:19,240 --> 00:23:25,630
create test doubles instead so we could

432
00:23:23,260 --> 00:23:29,110
for example use an in-memory database if

433
00:23:25,630 --> 00:23:31,240
we have a database or we could stop we

434
00:23:29,110 --> 00:23:33,850
could create a test double can use yeah

435
00:23:31,240 --> 00:23:36,490
it's a bit this one highlighting is the

436
00:23:33,850 --> 00:23:38,830
HTTP client so the piece of your code

437
00:23:36,490 --> 00:23:41,590
that makes the HTTP calls from within

438
00:23:38,830 --> 00:23:42,610
your service we could create a test

439
00:23:41,590 --> 00:23:46,330
above that

440
00:23:42,610 --> 00:23:49,959
and simply just simulate that we are

441
00:23:46,330 --> 00:23:52,120
doing is TP request but it won't really

442
00:23:49,960 --> 00:23:55,049
happen you will never call out of your

443
00:23:52,120 --> 00:23:58,330
service in this case there are several

444
00:23:55,049 --> 00:24:00,100
we we have done this and still do to

445
00:23:58,330 --> 00:24:02,080
some extent but it's not really it's

446
00:24:00,100 --> 00:24:06,299
more a unit test thing in my opinion

447
00:24:02,080 --> 00:24:09,220
than an integration test because you are

448
00:24:06,299 --> 00:24:13,450
you it's more difficult for you to

449
00:24:09,220 --> 00:24:17,290
actually test the failure scenarios that

450
00:24:13,450 --> 00:24:19,090
could happen over a network or our

451
00:24:17,290 --> 00:24:23,980
responses that could come from a

452
00:24:19,090 --> 00:24:26,020
dependency another thing is that if code

453
00:24:23,980 --> 00:24:28,179
coverage is important to you you will

454
00:24:26,020 --> 00:24:34,240
have zero code coverage in your real

455
00:24:28,179 --> 00:24:36,280
implementation of DHCP client so what we

456
00:24:34,240 --> 00:24:38,650
are doing at tv2 and what I'm proposing

457
00:24:36,280 --> 00:24:41,290
that we do instead is that we move one

458
00:24:38,650 --> 00:24:43,809
step out so instead of creating a test

459
00:24:41,290 --> 00:24:47,350
double for the DHCP client we actually

460
00:24:43,809 --> 00:24:49,750
do a test double of the dependency so we

461
00:24:47,350 --> 00:24:52,600
create a test double of the constant API

462
00:24:49,750 --> 00:24:53,860
and a recommendation API instead or any

463
00:24:52,600 --> 00:24:56,559
implementation that you might have in

464
00:24:53,860 --> 00:24:58,840
your system in this way you will

465
00:24:56,559 --> 00:25:01,090
actually get to have code coverage in

466
00:24:58,840 --> 00:25:03,909
UHD PM compensation inside your micro

467
00:25:01,090 --> 00:25:05,549
service but you will also introduce all

468
00:25:03,910 --> 00:25:08,950
the different failures that can happen

469
00:25:05,549 --> 00:25:11,440
over the network like latency wrong

470
00:25:08,950 --> 00:25:16,240
responses and things like this that

471
00:25:11,440 --> 00:25:20,130
could happen from a dependency and to do

472
00:25:16,240 --> 00:25:27,010
this we we use a tool called montebank

473
00:25:20,130 --> 00:25:29,830
it's a it's a multi protocol test double

474
00:25:27,010 --> 00:25:33,400
over the wire so it's it's actually a

475
00:25:29,830 --> 00:25:36,100
system that's meant to replace real

476
00:25:33,400 --> 00:25:40,600
dependencies that you can manipulate and

477
00:25:36,100 --> 00:25:43,570
and really do to some different kinds of

478
00:25:40,600 --> 00:25:47,860
tests over over the network so one of

479
00:25:43,570 --> 00:25:50,850
the neat things that motor Bank can do

480
00:25:47,860 --> 00:25:55,590
is that it can it has this

481
00:25:50,850 --> 00:25:58,560
has an implementation of a proxy that

482
00:25:55,590 --> 00:26:02,820
says doubles are called Impostors so you

483
00:25:58,560 --> 00:26:05,340
can create a proxy imposter so let's say

484
00:26:02,820 --> 00:26:09,990
that the system under test is our API

485
00:26:05,340 --> 00:26:12,000
gateway and the dependencies our content

486
00:26:09,990 --> 00:26:15,120
API and recommendation the API so in

487
00:26:12,000 --> 00:26:17,610
between we put up a mountebank proxy

488
00:26:15,120 --> 00:26:19,350
imposter and what this will do is that

489
00:26:17,610 --> 00:26:21,990
instead of calling out to the dependency

490
00:26:19,350 --> 00:26:25,590
you actually call out to the monster

491
00:26:21,990 --> 00:26:28,800
bank in pasta instead or the test double

492
00:26:25,590 --> 00:26:30,720
instead and then it will forward the

493
00:26:28,800 --> 00:26:33,149
request to the real service and record

494
00:26:30,720 --> 00:26:35,340
the response so the next time you call

495
00:26:33,150 --> 00:26:37,140
the service you you won't get a response

496
00:26:35,340 --> 00:26:39,689
from the dependence you will just get

497
00:26:37,140 --> 00:26:42,530
the canned response from on to Bank so

498
00:26:39,690 --> 00:26:45,330
it's a it's a record and replay

499
00:26:42,530 --> 00:26:47,520
situation and Monta bang is just of

500
00:26:45,330 --> 00:26:49,800
course one of the frameworks that can do

501
00:26:47,520 --> 00:26:52,379
this the pact is a good one as well or

502
00:26:49,800 --> 00:26:57,330
Maki what's it called Mach server is

503
00:26:52,380 --> 00:27:00,300
another very used one but now you have

504
00:26:57,330 --> 00:27:03,379
an actual recording of how your

505
00:27:00,300 --> 00:27:07,200
dependency actually will behave or how

506
00:27:03,380 --> 00:27:11,390
it will be spawns multi-bank is

507
00:27:07,200 --> 00:27:16,830
configured using some configuration in

508
00:27:11,390 --> 00:27:19,830
json and this is how an imposter could

509
00:27:16,830 --> 00:27:21,600
look you specify some kind of port it

510
00:27:19,830 --> 00:27:24,480
actually starts off a web server on that

511
00:27:21,600 --> 00:27:26,429
port with that can't response you i'm

512
00:27:24,480 --> 00:27:30,450
telling that it should be HTTP protocol

513
00:27:26,430 --> 00:27:34,110
and then i'm defining an array of stops

514
00:27:30,450 --> 00:27:37,080
and we can see that I'm creating a proxy

515
00:27:34,110 --> 00:27:41,729
so whenever multi-bank receives a

516
00:27:37,080 --> 00:27:43,669
request I'm telling it to forward the

517
00:27:41,730 --> 00:27:46,890
request to the recommendation API and

518
00:27:43,670 --> 00:27:48,660
also record the method the path and the

519
00:27:46,890 --> 00:27:54,660
queries the crew for a message that I

520
00:27:48,660 --> 00:27:57,000
sent along with it so now that I have

521
00:27:54,660 --> 00:28:00,150
actually created test harness instead of

522
00:27:57,000 --> 00:28:04,350
having to spin up all my system to do

523
00:28:00,150 --> 00:28:06,000
this test I can I can start up my my

524
00:28:04,350 --> 00:28:11,158
system on the test on my unit under test

525
00:28:06,000 --> 00:28:14,220
and my immediate dependencies so I only

526
00:28:11,159 --> 00:28:17,399
have to create a test double and start

527
00:28:14,220 --> 00:28:19,440
up the content API test double and the

528
00:28:17,399 --> 00:28:20,908
recommendation API test double along

529
00:28:19,440 --> 00:28:25,830
with of course the system that I'm

530
00:28:20,909 --> 00:28:29,519
testing so now my implementation looks

531
00:28:25,830 --> 00:28:32,330
like this I have as I told you to thread

532
00:28:29,519 --> 00:28:36,179
pools so I have to have two different

533
00:28:32,330 --> 00:28:38,309
HCP clients and I have to test doubles

534
00:28:36,179 --> 00:28:39,600
amount to banks top off the constant API

535
00:28:38,309 --> 00:28:45,029
and a monte banks top off the

536
00:28:39,600 --> 00:28:48,928
recommendation API so let's take a look

537
00:28:45,029 --> 00:28:51,710
at how this could look have the last

538
00:28:48,929 --> 00:28:51,710
example here

539
00:28:53,269 --> 00:29:00,690
so right now I'm actually not talking to

540
00:28:57,600 --> 00:29:04,649
the two api's now I'm talking to monte

541
00:29:00,690 --> 00:29:06,570
banks tops instead and the behaviorist

542
00:29:04,649 --> 00:29:08,158
is like it is before we still have

543
00:29:06,570 --> 00:29:11,789
implemented circuit breakers and things

544
00:29:08,159 --> 00:29:16,860
like this but now we can actually start

545
00:29:11,789 --> 00:29:22,279
introducing different scenarios monster

546
00:29:16,860 --> 00:29:25,918
Bank as I told is configured using JSON

547
00:29:22,279 --> 00:29:30,019
this one I cannot enlarge doesn't really

548
00:29:25,919 --> 00:29:34,740
help a little bit

549
00:29:30,019 --> 00:29:40,340
so I created a test double for the

550
00:29:34,740 --> 00:29:45,389
recommendation API actually it I created

551
00:29:40,340 --> 00:29:48,240
five different responses so I'm

552
00:29:45,389 --> 00:29:51,809
requesting recommendation API with a

553
00:29:48,240 --> 00:29:54,360
limit of one so if we find this one it's

554
00:29:51,809 --> 00:29:57,379
a get request to path recommendations

555
00:29:54,360 --> 00:30:01,258
with limit one so that's the first

556
00:29:57,379 --> 00:30:03,330
predicate it had the way montebank works

557
00:30:01,259 --> 00:30:06,299
is that it has predicates and whenever

558
00:30:03,330 --> 00:30:09,120
that predicate is fulfilled you'll get

559
00:30:06,299 --> 00:30:14,090
the response from that recording from

560
00:30:09,120 --> 00:30:17,370
that that's belongs to this predicate so

561
00:30:14,090 --> 00:30:18,179
we can this is the response that we

562
00:30:17,370 --> 00:30:23,100
recorder and there

563
00:30:18,180 --> 00:30:26,430
we'll sent back and it says Danish

564
00:30:23,100 --> 00:30:30,209
comedy show and that's the response that

565
00:30:26,430 --> 00:30:34,080
we actually we can try changing the year

566
00:30:30,210 --> 00:30:36,960
to 19 instead and post that I'll put

567
00:30:34,080 --> 00:30:40,620
this it should change the response it

568
00:30:36,960 --> 00:30:43,440
does so we can see that now we get

569
00:30:40,620 --> 00:30:45,479
another description we can also

570
00:30:43,440 --> 00:30:49,890
introduce different kind of behaviors

571
00:30:45,480 --> 00:30:52,350
for example wait time or what they call

572
00:30:49,890 --> 00:30:54,690
wait time which is really just how long

573
00:30:52,350 --> 00:30:57,389
time do I wait before I give response as

574
00:30:54,690 --> 00:31:02,340
the mountebank stop so we can try

575
00:30:57,390 --> 00:31:04,800
setting this up to 2,300 milliseconds

576
00:31:02,340 --> 00:31:07,260
instead which should be enough to to

577
00:31:04,800 --> 00:31:10,950
trigger the the circuit breaker because

578
00:31:07,260 --> 00:31:14,280
I set a timeout of 1000 milliseconds and

579
00:31:10,950 --> 00:31:16,350
we can see that I'm actually it takes

580
00:31:14,280 --> 00:31:21,830
longer to do the request which means

581
00:31:16,350 --> 00:31:25,889
that I'm I'm I'm hitting a timeout and

582
00:31:21,830 --> 00:31:27,600
we can also see that circuit is not open

583
00:31:25,890 --> 00:31:29,340
again because I'm not doing requests

584
00:31:27,600 --> 00:31:31,530
fast enough but we are getting a

585
00:31:29,340 --> 00:31:34,290
fallback which is the same fault I guess

586
00:31:31,530 --> 00:31:36,750
before instead of getting a request from

587
00:31:34,290 --> 00:31:40,920
the recommendation API I get a request

588
00:31:36,750 --> 00:31:43,380
from the content API but now we have a

589
00:31:40,920 --> 00:31:45,180
way to actually control this in in a

590
00:31:43,380 --> 00:31:50,630
test harness so Navi in a controlled

591
00:31:45,180 --> 00:31:58,170
environment and we can try putting some

592
00:31:50,630 --> 00:32:00,620
if I just change the port on my low

593
00:31:58,170 --> 00:32:00,620
tests

594
00:32:04,590 --> 00:32:12,100
and do a load test again they should see

595
00:32:10,000 --> 00:32:16,200
and now we never get enough requests

596
00:32:12,100 --> 00:32:20,139
that we actually hitting the open state

597
00:32:16,200 --> 00:32:23,980
we're still getting only 200 okay so

598
00:32:20,140 --> 00:32:30,520
what happens if I put this one back at

599
00:32:23,980 --> 00:32:32,440
300 millisecond response it should yeah

600
00:32:30,520 --> 00:32:34,389
now we are back in closed state so we

601
00:32:32,440 --> 00:32:35,530
hit and we hit a window where the

602
00:32:34,390 --> 00:32:37,600
circuit breaker would go into a

603
00:32:35,530 --> 00:32:39,790
half-open State and found out that the

604
00:32:37,600 --> 00:32:44,770
service is actually responding now so it

605
00:32:39,790 --> 00:32:48,690
went in back into closed state and we

606
00:32:44,770 --> 00:32:50,918
can continue playing around with this

607
00:32:48,690 --> 00:32:56,110
now we're introducing some wait time

608
00:32:50,919 --> 00:32:58,929
again and we can see that we are now we

609
00:32:56,110 --> 00:33:02,500
went into open state again and if we

610
00:32:58,929 --> 00:33:04,900
look at our our test how it's running

611
00:33:02,500 --> 00:33:08,320
even though we are just failing a

612
00:33:04,900 --> 00:33:10,600
dependent on component we are still only

613
00:33:08,320 --> 00:33:12,370
getting 200 okay which means that our

614
00:33:10,600 --> 00:33:17,290
circuit breaker is working as it's

615
00:33:12,370 --> 00:33:19,209
expected it's not the system is not is

616
00:33:17,290 --> 00:33:21,070
still available it's not a loss of

617
00:33:19,210 --> 00:33:25,390
availability it's a loss of a feature

618
00:33:21,070 --> 00:33:37,918
that I'm failing but the system is

619
00:33:25,390 --> 00:33:37,919
running I'm gonna put this one back so

620
00:33:38,520 --> 00:33:43,330
now we created a test harness a control

621
00:33:41,679 --> 00:33:45,250
environment where we can introduce these

622
00:33:43,330 --> 00:33:46,980
experiments and see how our system

623
00:33:45,250 --> 00:33:51,220
behaves under these extreme

624
00:33:46,980 --> 00:33:53,980
circumstances and we are making calls

625
00:33:51,220 --> 00:33:56,049
over the wire now we can actually now we

626
00:33:53,980 --> 00:33:58,860
have an opportunity to automate this

627
00:33:56,049 --> 00:34:01,690
because we can configure mountebank

628
00:33:58,860 --> 00:34:03,850
which means that I can now run these I

629
00:34:01,690 --> 00:34:06,250
have an opportunity to run these in my

630
00:34:03,850 --> 00:34:14,350
CI pipeline just as you would add a

631
00:34:06,250 --> 00:34:16,070
regular unittest so before we go to the

632
00:34:14,350 --> 00:34:25,400
last part

633
00:34:16,070 --> 00:34:36,110
let's look at some team code just a

634
00:34:25,400 --> 00:34:49,370
moment it's already said enough now

635
00:34:36,110 --> 00:34:52,390
let's give it a bit more yeah so I I

636
00:34:49,370 --> 00:34:54,799
created I created some automated tests

637
00:34:52,389 --> 00:35:00,140
using a framework called

638
00:34:54,800 --> 00:35:02,750
called Spock and I'm using another

639
00:35:00,140 --> 00:35:05,299
project called test containers to start

640
00:35:02,750 --> 00:35:07,970
up want to bank the mountebank stops

641
00:35:05,300 --> 00:35:10,970
whenever my test us so whenever my tests

642
00:35:07,970 --> 00:35:12,649
start test containers would spin up my

643
00:35:10,970 --> 00:35:14,299
tests and also Magli when the tests are

644
00:35:12,650 --> 00:35:17,810
done it will clean out the dart

645
00:35:14,300 --> 00:35:20,300
containers again if you're in the jvm

646
00:35:17,810 --> 00:35:22,490
world and working on dark containers I

647
00:35:20,300 --> 00:35:25,310
highly recommend trying out test

648
00:35:22,490 --> 00:35:28,790
containers and Spock of course as a test

649
00:35:25,310 --> 00:35:32,900
framework and but anyway the first test

650
00:35:28,790 --> 00:35:36,680
I did is just a regular success test

651
00:35:32,900 --> 00:35:39,350
that that whenever we query for an ID

652
00:35:36,680 --> 00:35:41,600
with a limit of 1 we actually get one

653
00:35:39,350 --> 00:35:45,140
constant back so I have my my graph

654
00:35:41,600 --> 00:35:46,940
query here I'm calling a sending a query

655
00:35:45,140 --> 00:35:51,319
to the editorial content will limit one

656
00:35:46,940 --> 00:35:55,640
and I'm asking for ID I'm sending the

657
00:35:51,320 --> 00:35:57,740
post request to the mountebank stop I'm

658
00:35:55,640 --> 00:36:00,440
reading the content I'm making sure

659
00:35:57,740 --> 00:36:02,750
there is one in the return statement and

660
00:36:00,440 --> 00:36:07,640
I'm making sure that the ID field is

661
00:36:02,750 --> 00:36:11,780
there and it has a specific ID in the

662
00:36:07,640 --> 00:36:15,350
pattern I'm doing a bit more advanced

663
00:36:11,780 --> 00:36:16,760
test with with three different with a

664
00:36:15,350 --> 00:36:20,060
limit of three which means that I will

665
00:36:16,760 --> 00:36:24,830
get three results back looping through

666
00:36:20,060 --> 00:36:28,090
them but the most interesting ones are

667
00:36:24,830 --> 00:36:29,960
actually the two last test that I make

668
00:36:28,090 --> 00:36:32,660
when receiving a time

669
00:36:29,960 --> 00:36:36,740
history or the circuit breaker returns a

670
00:36:32,660 --> 00:36:40,970
fallback constant object instead so when

671
00:36:36,740 --> 00:36:44,569
I do a call to the to the editorial

672
00:36:40,970 --> 00:36:50,660
content will limiter for I asked for ID

673
00:36:44,570 --> 00:36:52,880
and is response from fallback and then

674
00:36:50,660 --> 00:36:56,420
my test is that give me the first

675
00:36:52,880 --> 00:36:59,060
element that is returned find out if the

676
00:36:56,420 --> 00:37:02,330
ID is this specific one two or three -

677
00:36:59,060 --> 00:37:05,900
four back and I'm also making sure that

678
00:37:02,330 --> 00:37:08,299
the flag is fallback is response from

679
00:37:05,900 --> 00:37:12,109
fallback true so that's the one we saw

680
00:37:08,300 --> 00:37:14,060
in the everything in fact my browser is

681
00:37:12,109 --> 00:37:15,890
response from fallback this is this one

682
00:37:14,060 --> 00:37:23,299
I'm I'm listening on from the return

683
00:37:15,890 --> 00:37:25,700
statement of the of the server and the

684
00:37:23,300 --> 00:37:27,880
last one I'm I'm introducing a test

685
00:37:25,700 --> 00:37:31,160
double that instead of returning

686
00:37:27,880 --> 00:37:33,680
application JSON it returns text that

687
00:37:31,160 --> 00:37:35,899
plane and that's that's what I meant

688
00:37:33,680 --> 00:37:38,210
about now you have the control because

689
00:37:35,900 --> 00:37:40,580
not only are able to test what happens

690
00:37:38,210 --> 00:37:42,950
if I get a slow response I can also test

691
00:37:40,580 --> 00:37:46,130
what happens if I get gibberish from my

692
00:37:42,950 --> 00:37:49,279
from my dependency and in this case

693
00:37:46,130 --> 00:37:56,050
TxDOT plane is gibberish because I'm

694
00:37:49,280 --> 00:37:56,050
expecting JSON we can try and run these

695
00:37:59,170 --> 00:38:08,020
you can see that montalban our that our

696
00:38:05,630 --> 00:38:10,910
tower containers are started up our

697
00:38:08,020 --> 00:38:16,070
tests are being run you can see those

698
00:38:10,910 --> 00:38:20,509
out here they all green and they all

699
00:38:16,070 --> 00:38:23,300
succeeded the reason why this this is

700
00:38:20,510 --> 00:38:26,390
possible is because I am using this test

701
00:38:23,300 --> 00:38:30,980
table mountebank as my test double and I

702
00:38:26,390 --> 00:38:33,339
can configure it so if I look at the

703
00:38:30,980 --> 00:38:37,550
configuration so this is the

704
00:38:33,339 --> 00:38:40,910
configuration file that I'm using to

705
00:38:37,550 --> 00:38:43,670
prepare my test doubles one is that

706
00:38:40,910 --> 00:38:47,569
whenever I basically use the limit

707
00:38:43,670 --> 00:38:49,880
- - as a predicate to decide what

708
00:38:47,569 --> 00:38:52,849
responses I should get from there from

709
00:38:49,880 --> 00:38:57,220
the testable and the ones that are

710
00:38:52,849 --> 00:39:00,680
introducing failures are the limit for

711
00:38:57,220 --> 00:39:03,520
you see unlimited for is I added a wait

712
00:39:00,680 --> 00:39:06,230
time of one or ten thousand milliseconds

713
00:39:03,520 --> 00:39:06,740
which means that whenever a request is

714
00:39:06,230 --> 00:39:09,799
sent

715
00:39:06,740 --> 00:39:12,500
I get request is sent to the / content

716
00:39:09,799 --> 00:39:14,720
with limit for I get a response but I

717
00:39:12,500 --> 00:39:16,940
also it also waits ten thousand

718
00:39:14,720 --> 00:39:18,859
milliseconds and if we go back to our

719
00:39:16,940 --> 00:39:21,470
tests this is exactly what we're doing

720
00:39:18,859 --> 00:39:28,339
here I'm calling content with a limit at

721
00:39:21,470 --> 00:39:30,740
four and I'm getting the fallback so now

722
00:39:28,339 --> 00:39:34,430
we actually able to to run this

723
00:39:30,740 --> 00:39:40,180
automatically and create our our tests

724
00:39:34,430 --> 00:39:40,180
just as we are used to using automation

725
00:39:41,020 --> 00:39:49,790
so now we have they have a way of

726
00:39:46,700 --> 00:39:52,549
actually getting confidence that we

727
00:39:49,790 --> 00:39:56,900
introduce some kind of cynical ISM into

728
00:39:52,549 --> 00:39:58,940
our software we can be sure that the

729
00:39:56,900 --> 00:40:00,890
software behaves or money tell what how

730
00:39:58,940 --> 00:40:05,780
the software behaves on those different

731
00:40:00,890 --> 00:40:07,848
controllable circumstances and if you

732
00:40:05,780 --> 00:40:11,299
are into distributed software and

733
00:40:07,849 --> 00:40:13,250
breaking things and testing I highly

734
00:40:11,299 --> 00:40:17,480
recommend reading the book by Michael

735
00:40:13,250 --> 00:40:21,710
Nygaard release it and then when they do

736
00:40:17,480 --> 00:40:23,990
software think destructive and be

737
00:40:21,710 --> 00:40:25,880
especially careful about integration

738
00:40:23,990 --> 00:40:32,319
points and think what can go wrong here

739
00:40:25,880 --> 00:40:34,849
and of course handle exceptions and

740
00:40:32,319 --> 00:40:36,980
really test your resilience of your

741
00:40:34,849 --> 00:40:39,970
software that's it

742
00:40:36,980 --> 00:40:39,970
any questions

743
00:40:40,890 --> 00:40:44,739
[Applause]

744
00:40:45,290 --> 00:41:00,930
are there any questions so I have a

745
00:40:58,410 --> 00:41:05,759
couple of questions so for example when

746
00:41:00,930 --> 00:41:10,980
you test your service where you exchange

747
00:41:05,760 --> 00:41:14,580
the dependency for a fake one do you

748
00:41:10,980 --> 00:41:19,850
then actually mutate the database with a

749
00:41:14,580 --> 00:41:27,900
so based on the request from the fake so

750
00:41:19,850 --> 00:41:29,850
let me just put up one of these so kind

751
00:41:27,900 --> 00:41:33,380
of when I'm not I'm not concerned about

752
00:41:29,850 --> 00:41:36,319
the database what I am if we look at the

753
00:41:33,380 --> 00:41:40,320
this is the system that I'm testing and

754
00:41:36,320 --> 00:41:43,230
in the wire here I put up this proxy

755
00:41:40,320 --> 00:41:46,170
imposter so instead of requesting the

756
00:41:43,230 --> 00:41:48,570
recommendation a guy I'm requesting the

757
00:41:46,170 --> 00:41:50,700
imposter or the test double which will

758
00:41:48,570 --> 00:41:53,220
make forward the request to the real

759
00:41:50,700 --> 00:41:55,680
service this service however that gets

760
00:41:53,220 --> 00:41:57,209
the its data I'm not concerned about in

761
00:41:55,680 --> 00:41:59,520
this case it actually gets its data from

762
00:41:57,210 --> 00:42:01,650
a database but it could be anywhere

763
00:41:59,520 --> 00:42:03,290
you're not concerned about that you're

764
00:42:01,650 --> 00:42:06,810
only concerned about your immediate

765
00:42:03,290 --> 00:42:09,630
dependency okay but couldn't you have a

766
00:42:06,810 --> 00:42:11,850
service that does something like write

767
00:42:09,630 --> 00:42:13,110
something to the database that is based

768
00:42:11,850 --> 00:42:15,410
on the cresst

769
00:42:13,110 --> 00:42:17,880
request gotten from the fake service so

770
00:42:15,410 --> 00:42:20,850
like well if that's kind of a taste

771
00:42:17,880 --> 00:42:23,490
dependency between those two I so you

772
00:42:20,850 --> 00:42:25,259
mean that left for example say you send

773
00:42:23,490 --> 00:42:27,930
a post request to a downstream to a

774
00:42:25,260 --> 00:42:31,260
dependency and you are you want to test

775
00:42:27,930 --> 00:42:33,470
if that if that mutation actually had an

776
00:42:31,260 --> 00:42:36,330
effect

777
00:42:33,470 --> 00:42:38,220
no more like if you like to some maybe

778
00:42:36,330 --> 00:42:40,620
some caching in your own service or

779
00:42:38,220 --> 00:42:42,240
something in the database and you like

780
00:42:40,620 --> 00:42:45,060
based on the cresst for your to your

781
00:42:42,240 --> 00:42:47,669
dependency and then you catch the

782
00:42:45,060 --> 00:42:50,210
response from the fake dependency or

783
00:42:47,670 --> 00:42:50,210
something like

784
00:42:52,800 --> 00:43:01,170
I don't think I've experienced that case

785
00:42:58,020 --> 00:43:06,270
and so what I'm thinking that you're

786
00:43:01,170 --> 00:43:09,750
saying is that the the mutation you did

787
00:43:06,270 --> 00:43:12,810
on your your dependency you want to have

788
00:43:09,750 --> 00:43:15,870
the result or somehow no the result of

789
00:43:12,810 --> 00:43:17,430
that mutation and use that in another

790
00:43:15,870 --> 00:43:22,950
place in your application or in another

791
00:43:17,430 --> 00:43:25,589
test it's not the case no it's more like

792
00:43:22,950 --> 00:43:27,330
okay you have you are the service that

793
00:43:25,590 --> 00:43:29,670
you test and you have the taste the pace

794
00:43:27,330 --> 00:43:33,299
and then you if the database you have

795
00:43:29,670 --> 00:43:39,030
actually the data in it is dependent on

796
00:43:33,300 --> 00:43:40,920
the response you get from your this

797
00:43:39,030 --> 00:43:44,730
other service should depend on which you

798
00:43:40,920 --> 00:43:48,030
can switch out so if you mean if the API

799
00:43:44,730 --> 00:43:49,650
gateway had a database yeah and you send

800
00:43:48,030 --> 00:43:52,830
some kind of request through a

801
00:43:49,650 --> 00:43:54,480
dependency and the response has some

802
00:43:52,830 --> 00:43:57,750
kind of dependency to the day say in

803
00:43:54,480 --> 00:44:00,690
that database or has some kind of

804
00:43:57,750 --> 00:44:02,580
relation or the database should have I

805
00:44:00,690 --> 00:44:09,210
mean the taste based depends on the

806
00:44:02,580 --> 00:44:12,360
response from the it's not a case that

807
00:44:09,210 --> 00:44:17,280
I've I'm sure you could find a way

808
00:44:12,360 --> 00:44:21,300
around it I think I could actually this

809
00:44:17,280 --> 00:44:25,710
may be a problem if you are in this case

810
00:44:21,300 --> 00:44:30,300
yeah because as montebank is good for

811
00:44:25,710 --> 00:44:33,480
stopping either TCP is DP or SMTP but

812
00:44:30,300 --> 00:44:35,010
databases it cannot really stop so there

813
00:44:33,480 --> 00:44:37,890
are other systems that can do this for

814
00:44:35,010 --> 00:44:39,240
example in memory database where you buy

815
00:44:37,890 --> 00:44:41,970
you bootstrap your database with

816
00:44:39,240 --> 00:44:44,819
predefined test data and there you can

817
00:44:41,970 --> 00:44:47,339
make sure that your test data is related

818
00:44:44,820 --> 00:44:50,430
or correlated to your the rest of your

819
00:44:47,340 --> 00:44:52,380
test harness yeah that I have tried to

820
00:44:50,430 --> 00:44:53,129
make it quick the the second question

821
00:44:52,380 --> 00:44:56,340
the last question

822
00:44:53,130 --> 00:44:58,440
when you have the circuit breaker don't

823
00:44:56,340 --> 00:45:00,609
you actually want to monitor it pretty

824
00:44:58,440 --> 00:45:03,729
much because it's like the

825
00:45:00,609 --> 00:45:05,650
the small like the fine-tuning of it

826
00:45:03,729 --> 00:45:08,948
must be also really important so let's

827
00:45:05,650 --> 00:45:12,279
say the the time between requests when

828
00:45:08,949 --> 00:45:14,229
you're half open you would need to allow

829
00:45:12,279 --> 00:45:18,099
want to really like fine-tune that

830
00:45:14,229 --> 00:45:20,439
because if I sample how when you're

831
00:45:18,099 --> 00:45:23,049
actually full let's say you have you can

832
00:45:20,439 --> 00:45:26,670
like send requests like five hundred at

833
00:45:23,049 --> 00:45:29,288
like a second in some service and that's

834
00:45:26,670 --> 00:45:31,119
service can only handle two in the

835
00:45:29,289 --> 00:45:33,729
second and then it's like all the time

836
00:45:31,119 --> 00:45:38,650
you sends five hundred and it a the

837
00:45:33,729 --> 00:45:40,359
circuit breaker yeah yeah ohms and it's

838
00:45:38,650 --> 00:45:42,249
like you have made a big queue of

839
00:45:40,359 --> 00:45:44,229
requests inside it and this kind of like

840
00:45:42,249 --> 00:45:47,049
it goes back and forth between these two

841
00:45:44,229 --> 00:45:51,459
states where it's like really holding

842
00:45:47,049 --> 00:45:52,989
the and that could happen when my

843
00:45:51,459 --> 00:45:55,269
experience with circuit breakers I've

844
00:45:52,989 --> 00:45:58,079
worst worked most with the history which

845
00:45:55,269 --> 00:45:59,468
is being replaced by by for example

846
00:45:58,079 --> 00:46:02,469
what's it called

847
00:45:59,469 --> 00:46:04,660
Vasili on for jails that but my

848
00:46:02,469 --> 00:46:06,429
experience is that you really need to do

849
00:46:04,660 --> 00:46:08,170
some different kinds of low test when

850
00:46:06,429 --> 00:46:10,269
you've implemented your circuit breaker

851
00:46:08,170 --> 00:46:12,219
to fines unit what's the what's the

852
00:46:10,269 --> 00:46:14,169
right time out what's the right cue

853
00:46:12,219 --> 00:46:16,420
sizes and things like this before you

854
00:46:14,170 --> 00:46:19,539
actually are ready to put in production

855
00:46:16,420 --> 00:46:22,390
and I know with histories and also a lot

856
00:46:19,539 --> 00:46:26,019
of other implementations with history it

857
00:46:22,390 --> 00:46:27,848
sends out a stream of data of how many

858
00:46:26,019 --> 00:46:31,089
requests am I getting at which state am

859
00:46:27,849 --> 00:46:33,099
i in in real time and history has it's

860
00:46:31,089 --> 00:46:35,199
the history dashboard so for every

861
00:46:33,099 --> 00:46:37,599
circuit breaker you implemented you get

862
00:46:35,199 --> 00:46:41,259
a small dashboard with how many requests

863
00:46:37,599 --> 00:46:43,209
how many cute active threats am I using

864
00:46:41,259 --> 00:46:45,969
out of my thread pool and things like I

865
00:46:43,209 --> 00:46:47,979
so you get real-time monitoring and that

866
00:46:45,969 --> 00:46:51,759
combined with doing some load tests or

867
00:46:47,979 --> 00:46:53,499
real-time load tests before I put in

868
00:46:51,759 --> 00:46:57,029
production this is really valuable and

869
00:46:53,499 --> 00:46:57,029
you need to do that to get it right

870
00:46:59,890 --> 00:47:11,370
anyone else okay then thank you again

871
00:47:04,930 --> 00:47:11,370
[Applause]

