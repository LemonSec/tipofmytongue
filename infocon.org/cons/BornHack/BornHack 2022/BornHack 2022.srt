1
00:08:31,339 --> 00:08:34,338
all right

2
00:09:12,180 --> 00:09:15,180
foreign

3
00:09:24,680 --> 00:09:28,500
welcome to the first talk for this

4
00:09:28,500 --> 00:09:31,680
year's Bon hack uh fluma is going to

5
00:09:31,680 --> 00:09:34,260
tell you about this year's batch so

6
00:09:34,260 --> 00:09:36,300
enjoy

7
00:09:36,300 --> 00:09:37,450
thank you

8
00:09:37,450 --> 00:09:40,539
[Applause]

9
00:09:43,620 --> 00:09:47,160
so yeah welcome to the uh batch talk of

10
00:09:47,160 --> 00:09:49,010
2022

11
00:09:49,010 --> 00:09:49,380
[Music]

12
00:09:49,380 --> 00:09:51,360
um

13
00:09:51,360 --> 00:09:53,760
most of you probably got your batch at

14
00:09:53,760 --> 00:09:55,560
the chicken

15
00:09:55,560 --> 00:09:57,839
and

16
00:09:57,839 --> 00:10:00,300
in this little presentation we'll go

17
00:10:00,300 --> 00:10:02,579
through some of the specs of the patch

18
00:10:02,579 --> 00:10:05,820
and the sort of little ideas on on what

19
00:10:05,820 --> 00:10:07,740
was sort of why stuff has been made as

20
00:10:07,740 --> 00:10:09,779
this and uh

21
00:10:09,779 --> 00:10:10,500
um

22
00:10:10,500 --> 00:10:13,680
also uh at the end answer questions and

23
00:10:13,680 --> 00:10:16,140
if you have sort of a

24
00:10:16,140 --> 00:10:17,150
what's what

25
00:10:17,150 --> 00:10:17,519
[Music]

26
00:10:17,519 --> 00:10:19,019
um

27
00:10:19,019 --> 00:10:21,779
the Cs patch is based on the RP 2040

28
00:10:21,779 --> 00:10:24,540
it's a dual core arm processor it's the

29
00:10:24,540 --> 00:10:26,519
one made by Raspberry Pi like a year and

30
00:10:26,519 --> 00:10:30,420
a half ago it has um 16 megabyte of spy

31
00:10:30,420 --> 00:10:32,640
Flash and a color screen so that so

32
00:10:32,640 --> 00:10:34,980
that's the software side is very easy to

33
00:10:34,980 --> 00:10:37,019
sort of keep going with

34
00:10:37,019 --> 00:10:39,300
um there are four buttons sort of to

35
00:10:39,300 --> 00:10:42,079
make easy sort of game navigation

36
00:10:42,079 --> 00:10:45,360
and it also has a quick connector for

37
00:10:45,360 --> 00:10:48,180
for adding other stuff to it in addition

38
00:10:48,180 --> 00:10:51,720
to the CD add-on

39
00:10:51,720 --> 00:10:55,040
and then a bunch of extra iOS

40
00:10:55,040 --> 00:10:57,839
on the edges and little prototyping

41
00:10:57,839 --> 00:10:59,940
areas

42
00:10:59,940 --> 00:11:04,380
so the the main processor is the RP 2040

43
00:11:04,380 --> 00:11:06,060
it's the cortex m0 plus it's actually

44
00:11:06,060 --> 00:11:10,680
dual core it runs on 133 megahertz and

45
00:11:10,680 --> 00:11:13,140
has quite a lot of SRAM actually

46
00:11:13,140 --> 00:11:14,880
compared to these smaller processor

47
00:11:14,880 --> 00:11:17,339
which makes them

48
00:11:17,339 --> 00:11:19,800
nice to use with stuff like circuit

49
00:11:19,800 --> 00:11:21,720
python or micropython

50
00:11:21,720 --> 00:11:23,339
um to have a little extra amp the chip

51
00:11:23,339 --> 00:11:26,339
itself doesn't have any built-in flash

52
00:11:26,339 --> 00:11:27,420
um so we have that in a little extra

53
00:11:27,420 --> 00:11:28,980
chip next to it

54
00:11:28,980 --> 00:11:32,040
um and we've added 16 megabytes

55
00:11:32,040 --> 00:11:35,360
um 16 megabytes is a lot of space for

56
00:11:35,360 --> 00:11:37,860
microprocessors in general

57
00:11:37,860 --> 00:11:40,260
um but as we're using the same flash for

58
00:11:40,260 --> 00:11:43,200
media files images and so on having

59
00:11:43,200 --> 00:11:44,519
extra

60
00:11:44,519 --> 00:11:47,160
yep space for extra things is pretty

61
00:11:47,160 --> 00:11:48,660
nice

62
00:11:48,660 --> 00:11:50,220
this chip

63
00:11:50,220 --> 00:11:53,160
um from Raspberry Pi uh it's a little

64
00:11:53,160 --> 00:11:57,779
special it is a dual core arm cortex m0

65
00:11:57,779 --> 00:12:00,540
um but it has these programmable i o so

66
00:12:00,540 --> 00:12:01,920
it's a

67
00:12:01,920 --> 00:12:06,120
um like normally you have a Serial URS

68
00:12:06,120 --> 00:12:08,279
and you have I Square C you have SPI

69
00:12:08,279 --> 00:12:12,240
these programmable uarts iOS are little

70
00:12:12,240 --> 00:12:14,279
extra registers and you can sort of

71
00:12:14,279 --> 00:12:16,920
program them to do sort of

72
00:12:16,920 --> 00:12:20,160
similar things to to these regular

73
00:12:20,160 --> 00:12:21,440
peripherals

74
00:12:21,440 --> 00:12:23,820
and that way you can actually achieve

75
00:12:23,820 --> 00:12:26,459
sort of some speeds in in some areas

76
00:12:26,459 --> 00:12:29,160
where writing regular code is is not

77
00:12:29,160 --> 00:12:31,320
really and use of offload tasks to these

78
00:12:31,320 --> 00:12:33,180
program bios

79
00:12:33,180 --> 00:12:35,100
um the batch Compass circuit Python and

80
00:12:35,100 --> 00:12:36,959
circuit python itself in some of these

81
00:12:36,959 --> 00:12:39,300
libraries utilize those so you don't

82
00:12:39,300 --> 00:12:42,240
need to directly into interface with

83
00:12:42,240 --> 00:12:44,700
them but circuit python will use some of

84
00:12:44,700 --> 00:12:46,459
these features

85
00:12:46,459 --> 00:12:50,760
the chip comes with a hard-coded

86
00:12:50,760 --> 00:12:53,639
bootloader so if you don't want to use

87
00:12:53,639 --> 00:12:55,560
the circuit python comes with it it's

88
00:12:55,560 --> 00:12:59,339
very easy to to go into this bootloader

89
00:12:59,339 --> 00:13:00,420
that you can't remove you can't delete

90
00:13:00,420 --> 00:13:02,880
it by accident or anything

91
00:13:02,880 --> 00:13:04,260
um and then you can put whatever you

92
00:13:04,260 --> 00:13:06,360
want on it either micro python or C or

93
00:13:06,360 --> 00:13:08,480
whatever

94
00:13:10,019 --> 00:13:12,300
we have um

95
00:13:12,300 --> 00:13:15,240
the quick or stema QT quick is the spark

96
00:13:15,240 --> 00:13:16,980
fund name for these little little

97
00:13:16,980 --> 00:13:20,160
connector stem acuti is the name that's

98
00:13:20,160 --> 00:13:22,680
Adafruit uses for a connect that is

99
00:13:22,680 --> 00:13:25,440
identical both electrically and sort of

100
00:13:25,440 --> 00:13:28,260
spec wise so it's a

101
00:13:28,260 --> 00:13:30,720
VCC and ground in the connectors four

102
00:13:30,720 --> 00:13:34,500
pins and then there's a SDA and scl

103
00:13:34,500 --> 00:13:37,019
it works with many modules many

104
00:13:37,019 --> 00:13:39,720
companies make this compatible modules

105
00:13:39,720 --> 00:13:41,339
to one of these systems and you can mix

106
00:13:41,339 --> 00:13:44,040
them as you see fit

107
00:13:44,040 --> 00:13:47,579
it also has the Shady add-on or

108
00:13:47,579 --> 00:13:48,300
um

109
00:13:48,300 --> 00:13:50,459
it's the six pin versions it has the key

110
00:13:50,459 --> 00:13:52,980
on the top so you can rotate if you use

111
00:13:52,980 --> 00:13:55,500
the correct connector on your CDN you

112
00:13:55,500 --> 00:13:57,300
can sort of put it on incorrectly and

113
00:13:57,300 --> 00:13:59,279
also has the mechanical strength of the

114
00:13:59,279 --> 00:14:03,360
slightly larger connector

115
00:14:03,360 --> 00:14:06,899
this connector also uses I Square C it's

116
00:14:06,899 --> 00:14:09,720
a very simple protocol uh it's easy to

117
00:14:09,720 --> 00:14:13,399
add it to your to your add-ons

118
00:14:14,040 --> 00:14:16,980
in the hardware hacking sense we have

119
00:14:16,980 --> 00:14:18,420
SparkFun has sponsored a bunch of these

120
00:14:18,420 --> 00:14:20,459
quick modules so if you want to play

121
00:14:20,459 --> 00:14:21,480
with

122
00:14:21,480 --> 00:14:24,420
reading from a sensor or

123
00:14:24,420 --> 00:14:25,199
um

124
00:14:25,199 --> 00:14:27,180
changing a relay or something and there

125
00:14:27,180 --> 00:14:29,300
are some modules that you can play with

126
00:14:29,300 --> 00:14:31,440
if you make something awesome you're

127
00:14:31,440 --> 00:14:33,000
welcome to keep the module if you're

128
00:14:33,000 --> 00:14:34,079
just playing with you can just put it

129
00:14:34,079 --> 00:14:35,339
back in the Box again and then others

130
00:14:35,339 --> 00:14:36,959
can play with that afterwards they

131
00:14:36,959 --> 00:14:38,760
aren't enough for everybody but to play

132
00:14:38,760 --> 00:14:39,560
with

133
00:14:39,560 --> 00:14:42,199
this that should be okay

134
00:14:42,199 --> 00:14:45,240
cams also brought a large box of various

135
00:14:45,240 --> 00:14:47,459
other bits and Bobs

136
00:14:47,459 --> 00:14:49,079
um and it you're welcome to just play

137
00:14:49,079 --> 00:14:50,579
with those and integrate them into your

138
00:14:50,579 --> 00:14:53,719
projects and make awesome things

139
00:14:54,139 --> 00:14:58,740
the patch has four holes in it those can

140
00:14:58,740 --> 00:15:00,660
be used as a lot of mechanical mounting

141
00:15:00,660 --> 00:15:03,420
you can if you make a case or if you

142
00:15:03,420 --> 00:15:06,420
want to add these Proto boards there's a

143
00:15:06,420 --> 00:15:07,980
whole bunch of protocols up in the

144
00:15:07,980 --> 00:15:09,180
hardware hacking also you're welcome to

145
00:15:09,180 --> 00:15:11,519
take those and add stuff to them sort of

146
00:15:11,519 --> 00:15:12,560
through them

147
00:15:12,560 --> 00:15:16,560
the screw mounting is actually used to

148
00:15:16,560 --> 00:15:20,339
carry VCC and ground from the batch up

149
00:15:20,339 --> 00:15:23,100
onto the board there are little spaces

150
00:15:23,100 --> 00:15:24,720
in the Box down there these little brass

151
00:15:24,720 --> 00:15:26,639
spaces and screws that are the shorter

152
00:15:26,639 --> 00:15:27,839
screw you find down there will actually

153
00:15:27,839 --> 00:15:30,240
work from both like one set from the

154
00:15:30,240 --> 00:15:32,399
front and one set from the back and they

155
00:15:32,399 --> 00:15:35,220
will hold on the board nicely

156
00:15:35,220 --> 00:15:37,800
um you can solve on the little uh quick

157
00:15:37,800 --> 00:15:39,000
connector and then you can break I

158
00:15:39,000 --> 00:15:41,339
Square C up to this via little cable if

159
00:15:41,339 --> 00:15:43,639
you want to

160
00:15:46,019 --> 00:15:48,720
if you use a lot of thing maybe these

161
00:15:48,720 --> 00:15:50,820
four buttons are a little too little for

162
00:15:50,820 --> 00:15:54,420
my game then they are extra add-on extra

163
00:15:54,420 --> 00:15:57,420
sort of iOS for the chip they're put on

164
00:15:57,420 --> 00:16:00,180
the edges of the board with these little

165
00:16:00,180 --> 00:16:02,880
round in one end and flat on the other

166
00:16:02,880 --> 00:16:04,920
um you can either use these alligator

167
00:16:04,920 --> 00:16:08,279
clips to um to grab onto these

168
00:16:08,279 --> 00:16:10,680
um or you can wrap some like a

169
00:16:10,680 --> 00:16:12,660
conductive thread around them and entire

170
00:16:12,660 --> 00:16:14,399
little knots because they're plated in

171
00:16:14,399 --> 00:16:16,440
there in in the hole so the connection

172
00:16:16,440 --> 00:16:18,720
should be fairly okay otherwise you can

173
00:16:18,720 --> 00:16:20,579
of course also solder a wire so that's

174
00:16:20,579 --> 00:16:21,779
um

175
00:16:21,779 --> 00:16:24,899
I think maybe one of these are these

176
00:16:24,899 --> 00:16:27,480
pios can maybe be used to do sort of

177
00:16:27,480 --> 00:16:30,240
capacity to touch sensing on these I

178
00:16:30,240 --> 00:16:32,699
haven't tried it but I think it's uh if

179
00:16:32,699 --> 00:16:34,500
somebody wants to play with that yeah it

180
00:16:34,500 --> 00:16:36,660
should be possible I think

181
00:16:36,660 --> 00:16:37,620
um

182
00:16:37,620 --> 00:16:39,779
the on the on the inside of the patch so

183
00:16:39,779 --> 00:16:40,860
if you were

184
00:16:40,860 --> 00:16:43,139
at the batch here these two

185
00:16:43,139 --> 00:16:45,360
um analog inputs

186
00:16:45,360 --> 00:16:46,920
um they could for instance be used for a

187
00:16:46,920 --> 00:16:49,860
little analog joystick on this side

188
00:16:49,860 --> 00:16:53,100
um Kuru has made a little add-on and so

189
00:16:53,100 --> 00:16:54,540
if you if you're interested in something

190
00:16:54,540 --> 00:16:58,259
like that go find him and I'm sure he

191
00:16:58,259 --> 00:17:00,480
can sort of a system in there I've heard

192
00:17:00,480 --> 00:17:02,339
something about a game that maybe used

193
00:17:02,339 --> 00:17:04,980
that uh that could run on the batch

194
00:17:04,980 --> 00:17:07,980
and the other ones are just regular iOS

195
00:17:07,980 --> 00:17:09,839
that the 10 and 11 they're called d10

196
00:17:09,839 --> 00:17:11,720
and d11 inside the code

197
00:17:11,720 --> 00:17:15,839
and then there's a tx2 and TX rx2 those

198
00:17:15,839 --> 00:17:17,760
are just serial uarts so you're not

199
00:17:17,760 --> 00:17:19,439
using it just regular pins but but they

200
00:17:19,439 --> 00:17:22,079
can be used as a URL also for serial

201
00:17:22,079 --> 00:17:23,339
communication maybe you can connect two

202
00:17:23,339 --> 00:17:25,380
patches together with the wires you

203
00:17:25,380 --> 00:17:27,419
might need the ground wire also to to

204
00:17:27,419 --> 00:17:30,140
have it fully working

205
00:17:31,020 --> 00:17:33,360
the patch comes with circuit python

206
00:17:33,360 --> 00:17:35,160
pre-loaded

207
00:17:35,160 --> 00:17:36,120
um

208
00:17:36,120 --> 00:17:38,600
it's very easy to get going there's a

209
00:17:38,600 --> 00:17:41,059
code.pi file in the root that one

210
00:17:41,059 --> 00:17:44,460
includes the menu that Isaac has has

211
00:17:44,460 --> 00:17:46,620
made in recent days

212
00:17:46,620 --> 00:17:49,980
um it lists all the apps that are inside

213
00:17:49,980 --> 00:17:53,280
the apps folder so if you copy one of

214
00:17:53,280 --> 00:17:55,140
these so there's a little about app that

215
00:17:55,140 --> 00:17:57,419
just sort of shows some text but if you

216
00:17:57,419 --> 00:18:01,020
copy that one name it's my cool game dot

217
00:18:01,020 --> 00:18:03,120
Pi it will be listed in the menu and

218
00:18:03,120 --> 00:18:04,559
then you when you click it in the menu

219
00:18:04,559 --> 00:18:07,919
uh either X or Y button it goes into to

220
00:18:07,919 --> 00:18:10,980
that Pi file loads it and it'll run your

221
00:18:10,980 --> 00:18:12,960
app and when it's done it'll return to

222
00:18:12,960 --> 00:18:13,740
the menu

223
00:18:13,740 --> 00:18:16,080
the lip folder is for circuit python

224
00:18:16,080 --> 00:18:20,220
libraries you can just copy in libraries

225
00:18:20,220 --> 00:18:21,900
and share them

226
00:18:21,900 --> 00:18:25,740
for your code on the line on the batch

227
00:18:25,740 --> 00:18:27,419
there are also some other folders right

228
00:18:27,419 --> 00:18:28,980
now there's an image folder that shows

229
00:18:28,980 --> 00:18:31,559
the splash image when the patch starts

230
00:18:31,559 --> 00:18:33,900
up and there's a sponsors folder that

231
00:18:33,900 --> 00:18:35,760
holds all this bundles logo that the

232
00:18:35,760 --> 00:18:38,160
sponsors app use

233
00:18:38,160 --> 00:18:40,559
it mounts as a match storage device but

234
00:18:40,559 --> 00:18:42,900
at the same time it also

235
00:18:42,900 --> 00:18:43,860
um

236
00:18:43,860 --> 00:18:46,020
presents a USB serial port on your

237
00:18:46,020 --> 00:18:47,520
computer so if you want to have like

238
00:18:47,520 --> 00:18:50,160
debug output while you're sort of coding

239
00:18:50,160 --> 00:18:52,080
the changing the files you can actually

240
00:18:52,080 --> 00:18:53,760
connect to that serial port and you will

241
00:18:53,760 --> 00:18:55,080
get a

242
00:18:55,080 --> 00:18:57,179
the output when the when it reboots you

243
00:18:57,179 --> 00:18:59,760
can also go into Rebel and and run the

244
00:18:59,760 --> 00:19:03,720
python commands directly on the batch

245
00:19:03,720 --> 00:19:06,360
for inspiration on doing all sorts of

246
00:19:06,360 --> 00:19:08,280
things maybe making your bets into a

247
00:19:08,280 --> 00:19:10,320
keyboard where you can use the buttons

248
00:19:10,320 --> 00:19:12,720
for up down right left or other things

249
00:19:12,720 --> 00:19:15,360
macro pads style things

250
00:19:15,360 --> 00:19:15,980
um

251
00:19:15,980 --> 00:19:18,840
learn.adaflute.com is a giant source of

252
00:19:18,840 --> 00:19:21,840
a lot of examples you can also make it

253
00:19:21,840 --> 00:19:24,419
into a midi device that sort of presents

254
00:19:24,419 --> 00:19:26,340
uh you can send midi commands to your

255
00:19:26,340 --> 00:19:28,260
computer and have a synthesizer software

256
00:19:28,260 --> 00:19:30,299
and the computer maybe do audio and so

257
00:19:30,299 --> 00:19:32,418
on

258
00:19:33,480 --> 00:19:35,640
if circuit python is uh maybe a little

259
00:19:35,640 --> 00:19:38,220
too slow for you is not the the fastest

260
00:19:38,220 --> 00:19:39,419
um but if you want to have more

261
00:19:39,419 --> 00:19:40,440
performance

262
00:19:40,440 --> 00:19:42,660
it's very easy to get into this uf2

263
00:19:42,660 --> 00:19:44,700
bootloader just hold down the boot

264
00:19:44,700 --> 00:19:46,320
Button while you click the reset or you

265
00:19:46,320 --> 00:19:48,780
can hold down when you Power It Up

266
00:19:48,780 --> 00:19:50,820
um then it goes into the uf2 Builder

267
00:19:50,820 --> 00:19:55,260
it'll show up uh as a RP to you have two

268
00:19:55,260 --> 00:19:56,940
device

269
00:19:56,940 --> 00:19:58,500
um when you just copy over a firmware

270
00:19:58,500 --> 00:20:01,559
uf2 file or whatever it named it will

271
00:20:01,559 --> 00:20:03,480
reprogram the batch with that firmware

272
00:20:03,480 --> 00:20:05,760
so whatever tool chain you're using

273
00:20:05,760 --> 00:20:08,900
could be C rust micropy or whatever

274
00:20:08,900 --> 00:20:11,340
copper cabin over that way and it will

275
00:20:11,340 --> 00:20:13,520
be up and running

276
00:20:13,520 --> 00:20:16,260
many examples that you can use for

277
00:20:16,260 --> 00:20:18,780
Raspberry Pi Pico will run more or less

278
00:20:18,780 --> 00:20:20,760
on chains than this you might have to

279
00:20:20,760 --> 00:20:22,440
change a lot of pain assignments and so

280
00:20:22,440 --> 00:20:24,960
on but otherwise it'll be pretty much

281
00:20:24,960 --> 00:20:27,480
exactly the same code so if you find an

282
00:20:27,480 --> 00:20:29,220
example that's okay this I can use my

283
00:20:29,220 --> 00:20:30,960
pigu for that you can not probably also

284
00:20:30,960 --> 00:20:32,640
use the patch here

285
00:20:32,640 --> 00:20:34,260
um if you want to use the screen and so

286
00:20:34,260 --> 00:20:36,020
on you have to load libraries for that

287
00:20:36,020 --> 00:20:40,460
the screen is connected via SPI

288
00:20:42,960 --> 00:20:45,659
this is actually the same as for

289
00:20:45,659 --> 00:20:47,880
previous batches

290
00:20:47,880 --> 00:20:48,659
um

291
00:20:48,659 --> 00:20:50,700
you don't have to put batteries in the

292
00:20:50,700 --> 00:20:52,380
batch you can simply just plug a USB

293
00:20:52,380 --> 00:20:54,740
cable in and it will be powered via USB

294
00:20:54,740 --> 00:20:57,120
you can also put two double a batteries

295
00:20:57,120 --> 00:20:59,820
in they have to be sort of with the plus

296
00:20:59,820 --> 00:21:02,159
going up in both sides I know many times

297
00:21:02,159 --> 00:21:03,960
it's a sort of one of them the other way

298
00:21:03,960 --> 00:21:06,299
but this year is a plus up in both of

299
00:21:06,299 --> 00:21:08,418
them

300
00:21:08,580 --> 00:21:11,520
if you have USB power on the batch and

301
00:21:11,520 --> 00:21:12,780
the batteries in it will always

302
00:21:12,780 --> 00:21:15,600
prioritize USB power and even the the

303
00:21:15,600 --> 00:21:17,880
power switch only affects the battery if

304
00:21:17,880 --> 00:21:19,679
you plug a USB in it'll turn on the

305
00:21:19,679 --> 00:21:21,980
patch

306
00:21:24,960 --> 00:21:28,380
this USBC connectors they usually have a

307
00:21:28,380 --> 00:21:30,059
little extra pins it is a low pin count

308
00:21:30,059 --> 00:21:32,220
USBC connector on this one so you don't

309
00:21:32,220 --> 00:21:34,740
have all the high speed uh differential

310
00:21:34,740 --> 00:21:36,179
Pairs and so on because that chip

311
00:21:36,179 --> 00:21:38,039
doesn't really have that

312
00:21:38,039 --> 00:21:40,080
um but there are two extra pins that

313
00:21:40,080 --> 00:21:41,460
sort of wasn't used for anything and

314
00:21:41,460 --> 00:21:44,520
they're called sbu for sideband use

315
00:21:44,520 --> 00:21:46,740
um and I have decided to connect the RX1

316
00:21:46,740 --> 00:21:51,360
and tx1 on the rp2040 so those pins

317
00:21:51,360 --> 00:21:53,760
the idea is that you could connect two

318
00:21:53,760 --> 00:21:55,860
patches together with the USBC cable

319
00:21:55,860 --> 00:21:58,679
though this USB cable has to be some of

320
00:21:58,679 --> 00:22:02,159
the slightly more fancy ones as these

321
00:22:02,159 --> 00:22:04,080
wires need to be inside the cable and it

322
00:22:04,080 --> 00:22:07,919
normal cheap cables might not have these

323
00:22:07,919 --> 00:22:09,960
um but it could be super fun so I have a

324
00:22:09,960 --> 00:22:12,840
little two-player game maybe shooting uh

325
00:22:12,840 --> 00:22:14,580
on one patch and shooting out of the top

326
00:22:14,580 --> 00:22:16,799
of the screen they're coming that shoots

327
00:22:16,799 --> 00:22:18,720
shots from the other player can come

328
00:22:18,720 --> 00:22:20,820
down on the top or something like that

329
00:22:20,820 --> 00:22:21,539
um

330
00:22:21,539 --> 00:22:25,140
the other thing is that the rp2040 can

331
00:22:25,140 --> 00:22:28,080
do host mode so you can also set one of

332
00:22:28,080 --> 00:22:29,820
the patches up for host and the other

333
00:22:29,820 --> 00:22:31,740
one for our device and that way you

334
00:22:31,740 --> 00:22:33,240
actually communicate via USB but that's

335
00:22:33,240 --> 00:22:34,679
a little more sort of advanced on the

336
00:22:34,679 --> 00:22:36,720
communication side but that might be

337
00:22:36,720 --> 00:22:41,059
libraries and sort of be found and used

338
00:22:44,820 --> 00:22:47,400
all the details are available on our

339
00:22:47,400 --> 00:22:48,980
GitHub repo

340
00:22:48,980 --> 00:22:51,240
the default branch that is shown on

341
00:22:51,240 --> 00:22:52,980
GitHub is the hardware branch that has

342
00:22:52,980 --> 00:22:55,020
all the design schematics uh Hardware

343
00:22:55,020 --> 00:22:57,780
Designs that should be a PDF file with a

344
00:22:57,780 --> 00:22:59,700
schematic so find yourself if you want

345
00:22:59,700 --> 00:23:01,799
to do Rust programming I see you can

346
00:23:01,799 --> 00:23:03,900
find the pin outs for each of the

347
00:23:03,900 --> 00:23:06,299
buttons and screens and so on

348
00:23:06,299 --> 00:23:08,820
um there are also other branches and it

349
00:23:08,820 --> 00:23:10,799
might be a slightly unorthodox way of

350
00:23:10,799 --> 00:23:13,380
doing it but the other branches are not

351
00:23:13,380 --> 00:23:15,179
sort of variants of the hardware they

352
00:23:15,179 --> 00:23:17,159
are like the software the firmware that

353
00:23:17,159 --> 00:23:19,140
goes on there so so these branches are

354
00:23:19,140 --> 00:23:21,960
just uh could be have been other repos

355
00:23:21,960 --> 00:23:24,000
but having one URL

356
00:23:24,000 --> 00:23:25,799
um we've decided that it's easier just

357
00:23:25,799 --> 00:23:27,720
to have that single URL to find

358
00:23:27,720 --> 00:23:28,620
everything

359
00:23:28,620 --> 00:23:30,539
and then switch between brains you can

360
00:23:30,539 --> 00:23:31,980
check out multiple Brands if you want in

361
00:23:31,980 --> 00:23:33,539
different photos if you want to have

362
00:23:33,539 --> 00:23:36,360
access to all of it at the same time

363
00:23:36,360 --> 00:23:38,340
some of them include their example code

364
00:23:38,340 --> 00:23:41,220
the the menu is there the um a little

365
00:23:41,220 --> 00:23:43,679
test apps and so on and if you guys make

366
00:23:43,679 --> 00:23:46,260
other uh little schemes or whatever

367
00:23:46,260 --> 00:23:48,539
you're very welcome to just do pull

368
00:23:48,539 --> 00:23:50,640
requests to that repo and we'll do our

369
00:23:50,640 --> 00:23:53,779
best to sort of get them in

370
00:23:53,820 --> 00:23:55,200
we dream of having like a whole

371
00:23:55,200 --> 00:23:57,840
collection of little games or apps or

372
00:23:57,840 --> 00:24:00,080
name tags or whatever

373
00:24:00,080 --> 00:24:02,760
there are also brands with the add-on

374
00:24:02,760 --> 00:24:06,320
the white add-on balls I showed earlier

375
00:24:07,380 --> 00:24:10,860
PCB way has sponsored the um the the

376
00:24:10,860 --> 00:24:12,960
pcbs on the match and also the add-ons

377
00:24:12,960 --> 00:24:16,200
and they also assembled these these

378
00:24:16,200 --> 00:24:17,279
ports

379
00:24:17,279 --> 00:24:20,220
I would say some Modern record time I

380
00:24:20,220 --> 00:24:22,880
submitted the files in June

381
00:24:22,880 --> 00:24:26,600
20th and July 20th I had them in my hand

382
00:24:26,600 --> 00:24:29,039
normally it takes five weeks and that's

383
00:24:29,039 --> 00:24:33,059
a normal year right now getting parts is

384
00:24:33,059 --> 00:24:35,220
somewhat tricky and that is one of the

385
00:24:35,220 --> 00:24:37,260
reasons we are using this RPG 2040

386
00:24:37,260 --> 00:24:39,120
because that's actually one of the chips

387
00:24:39,120 --> 00:24:40,500
that currently in the world are

388
00:24:40,500 --> 00:24:42,240
available

389
00:24:42,240 --> 00:24:44,220
um my guess is because the car industry

390
00:24:44,220 --> 00:24:46,080
doesn't use it and other sort of that

391
00:24:46,080 --> 00:24:49,100
that type of companies

392
00:24:49,200 --> 00:24:50,460
so

393
00:24:50,460 --> 00:24:52,620
most of the other parts except for the

394
00:24:52,620 --> 00:24:55,080
RP 2040 actually Chinese branded Parts

395
00:24:55,080 --> 00:24:57,659
sort of in the same so

396
00:24:57,659 --> 00:24:59,820
have it easier to Source the pad and not

397
00:24:59,820 --> 00:25:02,159
sort of run out and say we need this

398
00:25:02,159 --> 00:25:03,659
part we have to wait four weeks for that

399
00:25:03,659 --> 00:25:05,820
with the timelines we use for these

400
00:25:05,820 --> 00:25:08,700
patches uh waiting four weeks is uh

401
00:25:08,700 --> 00:25:10,500
sadly not an option

402
00:25:10,500 --> 00:25:12,120
so um

403
00:25:12,120 --> 00:25:14,400
but it actually worked very well very

404
00:25:14,400 --> 00:25:16,020
well uh spacfone has sponsored these

405
00:25:16,020 --> 00:25:17,279
modules then the box in the hardware

406
00:25:17,279 --> 00:25:19,559
hacking you just go have fun there's

407
00:25:19,559 --> 00:25:21,120
also a coupon code if you want to make

408
00:25:21,120 --> 00:25:23,460
your own little add-ons uh it's not a

409
00:25:23,460 --> 00:25:26,940
lot it's just a it pays for 10 volts of

410
00:25:26,940 --> 00:25:29,820
this size roughly uh but you have to pay

411
00:25:29,820 --> 00:25:31,020
shipping yourself

412
00:25:31,020 --> 00:25:33,720
um they also do other things like middle

413
00:25:33,720 --> 00:25:36,539
cutting and bending and 3D printing

414
00:25:36,539 --> 00:25:38,600
um

415
00:25:39,020 --> 00:25:44,340
on Sunday from 15 to 16 ish there'll be

416
00:25:44,340 --> 00:25:47,159
a batch life Meetup in the hardware

417
00:25:47,159 --> 00:25:48,779
hacking and in the new starting out

418
00:25:48,779 --> 00:25:50,100
science

419
00:25:50,100 --> 00:25:50,880
um

420
00:25:50,880 --> 00:25:54,179
come hang out bring your best hacks or

421
00:25:54,179 --> 00:25:55,440
whatever

422
00:25:55,440 --> 00:25:57,840
um the adhes to the tutoring informal

423
00:25:57,840 --> 00:25:59,900
hanging around chatting about patches

424
00:25:59,900 --> 00:26:03,120
Electronics hacking that sort of things

425
00:26:03,120 --> 00:26:04,980
but of course also use the hardware

426
00:26:04,980 --> 00:26:07,380
hanging on so then it's uh it's open 24

427
00:26:07,380 --> 00:26:09,299
7 there are soaring irons there are a

428
00:26:09,299 --> 00:26:11,159
bunch of parts all the parts that we had

429
00:26:11,159 --> 00:26:14,100
last year also there and a bunch more

430
00:26:14,100 --> 00:26:15,539
um so it's

431
00:26:15,539 --> 00:26:17,460
should be a nice place to hang out if

432
00:26:17,460 --> 00:26:18,720
you're sort of interested in electronics

433
00:26:18,720 --> 00:26:20,100
you can also do other stuff that doesn't

434
00:26:20,100 --> 00:26:22,679
have to be patch related so very welcome

435
00:26:22,679 --> 00:26:25,820
to just use the tools now

436
00:26:27,840 --> 00:26:30,860
any questions

437
00:26:35,100 --> 00:26:37,820
yes

438
00:26:40,200 --> 00:26:45,120
hello when you decided the names for the

439
00:26:45,120 --> 00:26:48,720
buttons buttons yes on the side

440
00:26:48,720 --> 00:26:50,520
how come you didn't go for either

441
00:26:50,520 --> 00:26:52,980
Nintendo or

442
00:26:52,980 --> 00:26:56,779
any of the known ones

443
00:26:57,480 --> 00:27:00,000
so the buttons are actually the same

444
00:27:00,000 --> 00:27:02,460
naming as has been on all the previous

445
00:27:02,460 --> 00:27:04,020
bonus pages

446
00:27:04,020 --> 00:27:06,919
so all the way back to I think 6 17

447
00:27:06,919 --> 00:27:09,600
which the first year we had four buttons

448
00:27:09,600 --> 00:27:13,080
in that way um so I I went with that and

449
00:27:13,080 --> 00:27:15,720
uh I'm maybe not enough of a gamer so

450
00:27:15,720 --> 00:27:18,779
know all these standard patterns so

451
00:27:18,779 --> 00:27:21,059
that's why they are like this one of the

452
00:27:21,059 --> 00:27:22,679
ideas is that some of the previous

453
00:27:22,679 --> 00:27:24,480
matches you could rotate them and use

454
00:27:24,480 --> 00:27:26,460
them in both in this way or in this way

455
00:27:26,460 --> 00:27:30,360
so having X and having them sort of you

456
00:27:30,360 --> 00:27:33,179
could flip them is one of the ideas

457
00:27:33,179 --> 00:27:33,899
um

458
00:27:33,899 --> 00:27:35,820
but yeah that's the reason their name is

459
00:27:35,820 --> 00:27:38,059
there

460
00:27:38,399 --> 00:27:41,178
other questions

461
00:27:43,799 --> 00:27:45,779
no

462
00:27:45,779 --> 00:27:46,799
well

463
00:27:46,799 --> 00:27:48,299
thank you from

464
00:27:48,299 --> 00:27:48,980
thank you

465
00:27:48,980 --> 00:27:57,630
[Applause]

466
00:28:12,360 --> 00:28:15,360
huh

467
00:28:19,440 --> 00:28:22,440
cool

468
00:28:25,440 --> 00:28:27,440
um

469
00:28:50,120 --> 00:28:52,039
me

470
00:28:52,039 --> 00:28:56,000
like the super sauce

471
00:29:13,140 --> 00:29:16,140
okay

472
00:29:18,179 --> 00:29:20,179
um

473
00:29:22,320 --> 00:29:25,320
foreign

474
00:35:18,960 --> 00:35:20,960
um

475
01:06:50,160 --> 01:06:53,160
something

476
01:06:54,839 --> 01:06:57,299
or you could use the handle our Moroni

477
01:06:57,299 --> 01:06:58,920
if that's easier

478
01:06:58,920 --> 01:07:00,780
yeah

479
01:07:00,780 --> 01:07:02,579
or you could say

480
01:07:02,579 --> 01:07:04,260
Brown lizard because that's what it

481
01:07:04,260 --> 01:07:07,799
means whatever you find easiest

482
01:07:07,799 --> 01:07:10,220
it's just

483
01:07:18,299 --> 01:07:20,480
foreign

484
01:07:54,960 --> 01:07:57,960
foreign

485
01:09:40,859 --> 01:09:43,198
let's get back

486
01:09:43,198 --> 01:09:46,859
okay we are now at 12 o'clock on the

487
01:09:46,859 --> 01:09:48,658
first day here at the in the speaker's

488
01:09:48,658 --> 01:09:49,439
tent

489
01:09:49,439 --> 01:09:51,779
it is very warm so please remember to

490
01:09:51,779 --> 01:09:54,000
drink a lot of water and wear a cap and

491
01:09:54,000 --> 01:09:56,580
drink even more water after that

492
01:09:56,580 --> 01:09:58,920
the next presentation we have is amarone

493
01:09:58,920 --> 01:10:00,600
who's going to talk a bit about the

494
01:10:00,600 --> 01:10:02,940
danger of client-side scanning let's

495
01:10:02,940 --> 01:10:05,750
give a round of applause for Ramadan

496
01:10:05,750 --> 01:10:09,189
[Applause]

497
01:10:09,300 --> 01:10:10,800
thank you

498
01:10:10,800 --> 01:10:13,320
the European Union uh European Union is

499
01:10:13,320 --> 01:10:15,840
proposing something very bad

500
01:10:15,840 --> 01:10:17,940
and I'm going to tell you about it and

501
01:10:17,940 --> 01:10:19,560
why it's bad

502
01:10:19,560 --> 01:10:21,659
I am the one person presenting this but

503
01:10:21,659 --> 01:10:22,920
we've actually been talking about it in

504
01:10:22,920 --> 01:10:25,500
crypto Hagen so it's not just I don't

505
01:10:25,500 --> 01:10:27,659
deserve all the credit

506
01:10:27,659 --> 01:10:30,179
so uh I will I don't really have slides

507
01:10:30,179 --> 01:10:32,580
but I will put the outline over here oh

508
01:10:32,580 --> 01:10:34,260
that didn't work so well

509
01:10:34,260 --> 01:10:36,480
uh let's try it

510
01:10:36,480 --> 01:10:38,640
first is I'm going to say

511
01:10:38,640 --> 01:10:42,719
proposal second Y and third

512
01:10:42,719 --> 01:10:43,620
um

513
01:10:43,620 --> 01:10:47,159
like things you could do

514
01:10:47,159 --> 01:10:50,820
so um in the last like three years there

515
01:10:50,820 --> 01:10:52,679
have been proposals that are effectively

516
01:10:52,679 --> 01:10:55,980
like we're going to surveil everyone

517
01:10:55,980 --> 01:10:58,440
more in order to

518
01:10:58,440 --> 01:11:00,600
um do something about child sexual abuse

519
01:11:00,600 --> 01:11:02,580
material and the solicitation of

520
01:11:02,580 --> 01:11:05,040
children on the internet for

521
01:11:05,040 --> 01:11:06,659
sexual abuse

522
01:11:06,659 --> 01:11:10,080
and um the first one is abbreviated csam

523
01:11:10,080 --> 01:11:12,960
and the latter is abbreviated grooming

524
01:11:12,960 --> 01:11:15,600
so these are like bad things and the

525
01:11:15,600 --> 01:11:16,679
proposal is we're going to surveil

526
01:11:16,679 --> 01:11:18,420
people more so we can find these things

527
01:11:18,420 --> 01:11:21,540
and stop these things and

528
01:11:21,540 --> 01:11:24,000
um bring the perpetrators to Justice

529
01:11:24,000 --> 01:11:26,520
there have been uh proposals in 2020 and

530
01:11:26,520 --> 01:11:27,900
2021

531
01:11:27,900 --> 01:11:29,880
and they were both um

532
01:11:29,880 --> 01:11:31,860
like people said they were bad and they

533
01:11:31,860 --> 01:11:33,360
didn't go anywhere

534
01:11:33,360 --> 01:11:36,000
um and then 22 there 2022 in May there

535
01:11:36,000 --> 01:11:37,560
was another proposal

536
01:11:37,560 --> 01:11:41,659
this proposal is number

537
01:11:41,699 --> 01:11:45,659
uh the the um I'll have notes on the

538
01:11:45,659 --> 01:11:48,600
on the page for this presentation so you

539
01:11:48,600 --> 01:11:50,699
can see everything that I'm saying with

540
01:11:50,699 --> 01:11:52,980
all these references and links to papers

541
01:11:52,980 --> 01:11:53,940
and stuff

542
01:11:53,940 --> 01:11:56,100
but I'll put the key stuff here so this

543
01:11:56,100 --> 01:11:59,100
number proposal will a wood it hasn't

544
01:11:59,100 --> 01:12:01,440
been passed would require that tech

545
01:12:01,440 --> 01:12:03,000
companies screen their platforms for

546
01:12:03,000 --> 01:12:05,040
child sexual abuse material and

547
01:12:05,040 --> 01:12:07,739
establish the EU Center on child sexual

548
01:12:07,739 --> 01:12:10,440
abuse to coordinate the screening

549
01:12:10,440 --> 01:12:12,300
and supposedly these rules are supposed

550
01:12:12,300 --> 01:12:14,159
to protect to rescue children from abuse

551
01:12:14,159 --> 01:12:16,739
prevent csam from reappearing online and

552
01:12:16,739 --> 01:12:19,400
to bring offenders to Justice

553
01:12:19,400 --> 01:12:21,659
the the

554
01:12:21,659 --> 01:12:24,120
um proposal is quite vague about how it

555
01:12:24,120 --> 01:12:25,380
would be implemented

556
01:12:25,380 --> 01:12:28,199
so I'll tell you some things that are

557
01:12:28,199 --> 01:12:32,460
could be related that already exist

558
01:12:32,460 --> 01:12:33,960
um

559
01:12:33,960 --> 01:12:36,239
there's

560
01:12:36,239 --> 01:12:38,520
so one technique that I suspect would be

561
01:12:38,520 --> 01:12:42,300
used but might not be adequate would be

562
01:12:42,300 --> 01:12:45,719
to effectively we create a database of

563
01:12:45,719 --> 01:12:48,060
sexual abuse material and we compare

564
01:12:48,060 --> 01:12:51,840
every message on like Facebook or signal

565
01:12:51,840 --> 01:12:53,360
or whatever

566
01:12:53,360 --> 01:12:56,219
to this database and it would probably

567
01:12:56,219 --> 01:12:57,600
only work

568
01:12:57,600 --> 01:13:00,780
for images so simply so a very simple

569
01:13:00,780 --> 01:13:02,820
way is you hash every known you have

570
01:13:02,820 --> 01:13:03,900
some

571
01:13:03,900 --> 01:13:06,360
like Central party that collects all the

572
01:13:06,360 --> 01:13:07,860
child sexual abuse material that's been

573
01:13:07,860 --> 01:13:10,260
reported and it takes a hash of each

574
01:13:10,260 --> 01:13:13,260
image it could be like an md5 hash

575
01:13:13,260 --> 01:13:16,020
and then on every client service you

576
01:13:16,020 --> 01:13:17,640
take an md5 hash of every image that's

577
01:13:17,640 --> 01:13:18,960
ever shared

578
01:13:18,960 --> 01:13:21,780
as it's shared and you compare them and

579
01:13:21,780 --> 01:13:24,120
if there's a match you send it to Big

580
01:13:24,120 --> 01:13:26,300
Brother

581
01:13:26,340 --> 01:13:30,420
um there there are I found I know two

582
01:13:30,420 --> 01:13:32,699
systems uh I found papers saying the two

583
01:13:32,699 --> 01:13:34,380
systems like this exist and I'm sure

584
01:13:34,380 --> 01:13:36,960
there are many more one I found is from

585
01:13:36,960 --> 01:13:38,580
the Canadian Center for Child Protection

586
01:13:38,580 --> 01:13:40,739
and another is from Apple and I'm sure

587
01:13:40,739 --> 01:13:43,140
there are others but these two I have uh

588
01:13:43,140 --> 01:13:44,820
linked to the

589
01:13:44,820 --> 01:13:46,320
some papers about them in case you want

590
01:13:46,320 --> 01:13:48,179
to read about them

591
01:13:48,179 --> 01:13:50,400
so one way you could do this is with

592
01:13:50,400 --> 01:13:53,280
like an md5 hash you can also use what

593
01:13:53,280 --> 01:13:55,980
is called a perceptual hash function so

594
01:13:55,980 --> 01:13:57,659
that if you have two images that are

595
01:13:57,659 --> 01:13:59,520
similar they will have similar hash

596
01:13:59,520 --> 01:14:01,500
values and that way

597
01:14:01,500 --> 01:14:03,840
I guess like if the image is resized or

598
01:14:03,840 --> 01:14:06,000
something you can um I mean the simple

599
01:14:06,000 --> 01:14:07,980
version if it's resized you can match it

600
01:14:07,980 --> 01:14:09,360
but also

601
01:14:09,360 --> 01:14:12,239
uh it can be a much more distant match

602
01:14:12,239 --> 01:14:14,219
and later I'll mention you can have

603
01:14:14,219 --> 01:14:17,219
really bad false positives

604
01:14:17,219 --> 01:14:19,199
so uh

605
01:14:19,199 --> 01:14:22,560
still so so uh like

606
01:14:22,560 --> 01:14:25,380
probably like hacker people

607
01:14:25,380 --> 01:14:27,120
don't like this already but you know the

608
01:14:27,120 --> 01:14:29,400
people who like this say that this is

609
01:14:29,400 --> 01:14:30,840
good but we need more because we're

610
01:14:30,840 --> 01:14:32,520
having more child sexual abuse material

611
01:14:32,520 --> 01:14:34,440
and we need more advanced methods than

612
01:14:34,440 --> 01:14:36,900
even perceptual hashing and this is

613
01:14:36,900 --> 01:14:38,940
where like artificial intelligence

614
01:14:38,940 --> 01:14:42,179
whatever that is will come about

615
01:14:42,179 --> 01:14:44,159
um but still a system an image based

616
01:14:44,159 --> 01:14:47,760
system only works for detection of known

617
01:14:47,760 --> 01:14:50,040
probably known child sexual abuse

618
01:14:50,040 --> 01:14:52,260
material

619
01:14:52,260 --> 01:14:54,120
um maybe with some more advanced system

620
01:14:54,120 --> 01:14:55,679
we could detect

621
01:14:55,679 --> 01:14:57,840
like child sexual abuse material that we

622
01:14:57,840 --> 01:15:00,239
didn't know about before

623
01:15:00,239 --> 01:15:03,060
um or maybe we could detect uh stuff

624
01:15:03,060 --> 01:15:04,920
that's happening by text such as

625
01:15:04,920 --> 01:15:07,140
solicitation for sexual activities

626
01:15:07,140 --> 01:15:10,140
grooming

627
01:15:10,679 --> 01:15:13,800
um and

628
01:15:14,100 --> 01:15:16,440
in practice

629
01:15:16,440 --> 01:15:18,719
like the

630
01:15:18,719 --> 01:15:21,719
I don't think the regulation says you

631
01:15:21,719 --> 01:15:23,699
need to have a human review this

632
01:15:23,699 --> 01:15:25,140
I guess it would be really scary to me

633
01:15:25,140 --> 01:15:26,040
if they implemented this and there was

634
01:15:26,040 --> 01:15:28,080
no human review but because there's

635
01:15:28,080 --> 01:15:30,300
human review at some point

636
01:15:30,300 --> 01:15:31,800
someone's going to read your private

637
01:15:31,800 --> 01:15:33,900
Communications if there's a false

638
01:15:33,900 --> 01:15:36,420
positive so if like you have an image

639
01:15:36,420 --> 01:15:38,760
of your dog that's marked as child

640
01:15:38,760 --> 01:15:42,179
sexual abuse material someone will

641
01:15:42,179 --> 01:15:43,800
someone will have to review this image

642
01:15:43,800 --> 01:15:45,540
and see that you took a picture of your

643
01:15:45,540 --> 01:15:46,260
dog

644
01:15:46,260 --> 01:15:48,060
and

645
01:15:48,060 --> 01:15:49,320
um

646
01:15:49,320 --> 01:15:52,199
that's I think even if we have

647
01:15:52,199 --> 01:15:54,659
like md5 as the hash function

648
01:15:54,659 --> 01:15:56,400
we will have false positives because you

649
01:15:56,400 --> 01:15:58,199
can have legitimate purposes like if

650
01:15:58,199 --> 01:16:00,960
you're two organizations that

651
01:16:00,960 --> 01:16:01,800
um

652
01:16:01,800 --> 01:16:05,100
are stop trying to detect and stop child

653
01:16:05,100 --> 01:16:06,600
sexual abuse material they might share

654
01:16:06,600 --> 01:16:10,320
images between each other so

655
01:16:10,320 --> 01:16:11,340
um

656
01:16:11,340 --> 01:16:12,840
even in that case you're going to have

657
01:16:12,840 --> 01:16:14,340
false positives but if we use some

658
01:16:14,340 --> 01:16:16,080
complex artificial intelligence surely

659
01:16:16,080 --> 01:16:17,040
there's going to be a lot of false

660
01:16:17,040 --> 01:16:18,659
positives

661
01:16:18,659 --> 01:16:19,400
um

662
01:16:19,400 --> 01:16:21,120
and

663
01:16:21,120 --> 01:16:23,460
one more point before

664
01:16:23,460 --> 01:16:25,199
actually no I have a fun story on this

665
01:16:25,199 --> 01:16:28,560
last point I um years ago I introduced

666
01:16:28,560 --> 01:16:30,840
two people who happened to work on

667
01:16:30,840 --> 01:16:35,340
um like stopping like detecting

668
01:16:35,340 --> 01:16:37,739
uh child sexual abuse material and other

669
01:16:37,739 --> 01:16:38,760
bad stuff

670
01:16:38,760 --> 01:16:41,580
and they were like one of them had some

671
01:16:41,580 --> 01:16:42,780
really cool idea that the other one

672
01:16:42,780 --> 01:16:44,340
really liked and they wanted to share

673
01:16:44,340 --> 01:16:46,140
the information so the one sent an email

674
01:16:46,140 --> 01:16:47,280
to the other

675
01:16:47,280 --> 01:16:49,199
and I was standing right like I was

676
01:16:49,199 --> 01:16:50,460
sitting right with them

677
01:16:50,460 --> 01:16:52,560
and he said okay I'll send you the email

678
01:16:52,560 --> 01:16:54,060
but I'm not going to say what we were

679
01:16:54,060 --> 01:16:55,260
talking about

680
01:16:55,260 --> 01:16:57,000
so like even two people who are employed

681
01:16:57,000 --> 01:16:58,620
in the business of um

682
01:16:58,620 --> 01:17:00,719
like stopping child sexual abuse can't

683
01:17:00,719 --> 01:17:03,120
say in their email that that's what

684
01:17:03,120 --> 01:17:05,159
they're doing

685
01:17:05,159 --> 01:17:06,060
um

686
01:17:06,060 --> 01:17:08,520
anyway uh so

687
01:17:08,520 --> 01:17:10,560
before I so I'm still on the topic of

688
01:17:10,560 --> 01:17:12,780
what is generally being proposed and how

689
01:17:12,780 --> 01:17:14,760
it might be implemented

690
01:17:14,760 --> 01:17:15,480
um

691
01:17:15,480 --> 01:17:18,060
one more point on this I called the talk

692
01:17:18,060 --> 01:17:20,940
client side scanning and

693
01:17:20,940 --> 01:17:22,920
um I don't really like the name Clyde's

694
01:17:22,920 --> 01:17:24,420
side scanning

695
01:17:24,420 --> 01:17:26,340
um

696
01:17:26,340 --> 01:17:29,520
means I'm going to scan uh before you

697
01:17:29,520 --> 01:17:31,679
send I send you a message

698
01:17:31,679 --> 01:17:34,140
and before you receive the message

699
01:17:34,140 --> 01:17:37,739
some third party is going to scan it

700
01:17:37,739 --> 01:17:40,380
uh against like compare it against the

701
01:17:40,380 --> 01:17:44,040
known bad images and that is one thing

702
01:17:44,040 --> 01:17:46,080
that would probably be part of this but

703
01:17:46,080 --> 01:17:48,179
there are many other things that would

704
01:17:48,179 --> 01:17:49,560
be

705
01:17:49,560 --> 01:17:50,219
um

706
01:17:50,219 --> 01:17:52,620
that could maybe accomplish this I think

707
01:17:52,620 --> 01:17:54,420
the client-side scanning is particularly

708
01:17:54,420 --> 01:17:55,920
relevant if we have end-to-end

709
01:17:55,920 --> 01:17:57,780
encryption because

710
01:17:57,780 --> 01:17:59,400
if there's end-to-end encryption we need

711
01:17:59,400 --> 01:18:01,560
some way to

712
01:18:01,560 --> 01:18:03,480
um

713
01:18:03,480 --> 01:18:06,120
like do the scanning while pretending to

714
01:18:06,120 --> 01:18:09,179
still maintain the end-to-end encryption

715
01:18:09,179 --> 01:18:10,440
um

716
01:18:10,440 --> 01:18:12,420
I I wonder did I like lose everyone

717
01:18:12,420 --> 01:18:13,920
because I don't have slides and pretty

718
01:18:13,920 --> 01:18:16,980
pictures and maybe that helps okay

719
01:18:16,980 --> 01:18:20,100
great thank you so so I said I would do

720
01:18:20,100 --> 01:18:21,300
uh

721
01:18:21,300 --> 01:18:23,520
let's do this again

722
01:18:23,520 --> 01:18:25,620
I said I would do the what the proposal

723
01:18:25,620 --> 01:18:27,840
is now I'm going to the Y uh the Y

724
01:18:27,840 --> 01:18:30,719
section of like uh

725
01:18:30,719 --> 01:18:32,760
actually

726
01:18:32,760 --> 01:18:34,739
oh I actually have two y sections I have

727
01:18:34,739 --> 01:18:37,020
why it's bad and then why

728
01:18:37,020 --> 01:18:38,640
people might have proposed such a bad

729
01:18:38,640 --> 01:18:40,260
thing and I'm going to start with why

730
01:18:40,260 --> 01:18:42,600
it's bad and I learned once that if you

731
01:18:42,600 --> 01:18:43,920
want to convince people of something you

732
01:18:43,920 --> 01:18:45,179
should do three things you should say

733
01:18:45,179 --> 01:18:47,100
they're called in Greek I mean I'm going

734
01:18:47,100 --> 01:18:50,159
to say it wrong like pathos

735
01:18:50,159 --> 01:18:52,080
uh

736
01:18:52,080 --> 01:18:55,800
uh Logos and Ethos maybe one of them is

737
01:18:55,800 --> 01:18:58,860
logical arguments one of them is some

738
01:18:58,860 --> 01:19:00,840
very emotional example and the other is

739
01:19:00,840 --> 01:19:02,940
some Authority and I think people here

740
01:19:02,940 --> 01:19:05,040
care moose about the first one but I I

741
01:19:05,040 --> 01:19:06,900
hope the I won't bore you too much with

742
01:19:06,900 --> 01:19:09,060
the other two so I first do the uh the

743
01:19:09,060 --> 01:19:11,100
logical reasons

744
01:19:11,100 --> 01:19:13,140
um I think the Privacy risk is kind of

745
01:19:13,140 --> 01:19:14,400
clear

746
01:19:14,400 --> 01:19:15,620
um

747
01:19:15,620 --> 01:19:18,420
and uh

748
01:19:18,420 --> 01:19:21,480
yes and at some point like

749
01:19:21,480 --> 01:19:23,520
well yeah I pretty much already said

750
01:19:23,520 --> 01:19:25,320
that there's going to be false positives

751
01:19:25,320 --> 01:19:26,880
someone's going to have to review it and

752
01:19:26,880 --> 01:19:29,340
like do you actually trust everyone in

753
01:19:29,340 --> 01:19:32,100
the whoever like it could be the EU

754
01:19:32,100 --> 01:19:33,960
Center for whatever they're calling it

755
01:19:33,960 --> 01:19:35,760
or it could be like any of these

756
01:19:35,760 --> 01:19:36,960
companies that have to implement this

757
01:19:36,960 --> 01:19:39,480
someone there will be reviewing it and

758
01:19:39,480 --> 01:19:42,300
it's probably not someone who like it's

759
01:19:42,300 --> 01:19:45,239
probably not a very uh

760
01:19:45,239 --> 01:19:46,500
you're going to need a lot of people

761
01:19:46,500 --> 01:19:48,239
reviewing it so I don't really trust

762
01:19:48,239 --> 01:19:49,980
that they're gonna

763
01:19:49,980 --> 01:19:52,020
do everything properly

764
01:19:52,020 --> 01:19:54,140
um

765
01:19:55,140 --> 01:19:57,960
and

766
01:19:57,960 --> 01:20:00,719
like if we have to scan if we have a

767
01:20:00,719 --> 01:20:02,460
communication between you uh me and you

768
01:20:02,460 --> 01:20:04,440
and we're doing end-to-end encryption

769
01:20:04,440 --> 01:20:06,659
we can't do this so there has to be some

770
01:20:06,659 --> 01:20:08,820
method of breaking the end to encryption

771
01:20:08,820 --> 01:20:10,800
like one way to do it is we scan the

772
01:20:10,800 --> 01:20:11,699
image

773
01:20:11,699 --> 01:20:15,780
on your laptop before you encrypt it

774
01:20:15,780 --> 01:20:18,239
another is there's some master key that

775
01:20:18,239 --> 01:20:20,100
can decrypt your encryption

776
01:20:20,100 --> 01:20:22,440
either way uh

777
01:20:22,440 --> 01:20:24,659
if you're going to follow the rule your

778
01:20:24,659 --> 01:20:26,040
engine encryption is broken because

779
01:20:26,040 --> 01:20:28,320
maybe there's a false positive

780
01:20:28,320 --> 01:20:30,840
I mean if you're actually of course if

781
01:20:30,840 --> 01:20:32,159
you're actually like sharing child

782
01:20:32,159 --> 01:20:33,960
sexual abuse material the encryption

783
01:20:33,960 --> 01:20:35,040
will be broken but if you're doing a

784
01:20:35,040 --> 01:20:36,239
false positive

785
01:20:36,239 --> 01:20:38,460
it will also be broken

786
01:20:38,460 --> 01:20:39,840
so

787
01:20:39,840 --> 01:20:40,980
um

788
01:20:40,980 --> 01:20:43,139
that's the like

789
01:20:43,139 --> 01:20:45,540
Freedom reasons but there are other

790
01:20:45,540 --> 01:20:49,260
reasons why it's bad first is

791
01:20:49,260 --> 01:20:51,120
um

792
01:20:51,120 --> 01:20:54,300
it's not known to be helpful for

793
01:20:54,300 --> 01:20:57,679
stopping child sexual abuse

794
01:20:58,699 --> 01:21:03,420
yes so um I two points related to this

795
01:21:03,420 --> 01:21:06,960
one is this newfangled technique is not

796
01:21:06,960 --> 01:21:09,000
shown to be effective

797
01:21:09,000 --> 01:21:10,500
um

798
01:21:10,500 --> 01:21:13,199
and a specific reason why it's not why

799
01:21:13,199 --> 01:21:15,960
uh okay and then there's

800
01:21:15,960 --> 01:21:17,639
okay first it's not known to be

801
01:21:17,639 --> 01:21:19,980
effective now we can speculate why it

802
01:21:19,980 --> 01:21:22,080
won't be effective one reason it might

803
01:21:22,080 --> 01:21:25,320
not be effective is that according to a

804
01:21:25,320 --> 01:21:27,060
board member at the Child Protection

805
01:21:27,060 --> 01:21:30,060
Association of Germany Joachim Turk

806
01:21:30,060 --> 01:21:32,639
most illegal online activities already

807
01:21:32,639 --> 01:21:34,920
occur via forums and the dark web

808
01:21:34,920 --> 01:21:36,780
and I do not think that the dark web

809
01:21:36,780 --> 01:21:40,519
will implement this

810
01:21:43,020 --> 01:21:45,239
and then even if you implement it

811
01:21:45,239 --> 01:21:47,580
um I mean even if if like I'm a criminal

812
01:21:47,580 --> 01:21:49,380
and I'm going to keep communicating by

813
01:21:49,380 --> 01:21:51,360
some place that's going to implement it

814
01:21:51,360 --> 01:21:53,820
maybe I can find a way to work around it

815
01:21:53,820 --> 01:21:55,380
especially if it's if it's like

816
01:21:55,380 --> 01:21:57,300
implemented something like on the client

817
01:21:57,300 --> 01:21:58,620
application

818
01:21:58,620 --> 01:22:01,500
I can find a way around it you know

819
01:22:01,500 --> 01:22:03,420
um so

820
01:22:03,420 --> 01:22:05,820
yes not shown to be effective good

821
01:22:05,820 --> 01:22:07,500
reason to think it won't be effective

822
01:22:07,500 --> 01:22:10,320
also there are already effective methods

823
01:22:10,320 --> 01:22:12,780
and maybe we should just use them more

824
01:22:12,780 --> 01:22:14,699
so like

825
01:22:14,699 --> 01:22:16,500
I found some

826
01:22:16,500 --> 01:22:19,739
um articles about like police say that

827
01:22:19,739 --> 01:22:22,380
they can't get content like child sexual

828
01:22:22,380 --> 01:22:24,360
abuse material removed but it's just

829
01:22:24,360 --> 01:22:26,219
some random guy emails the service

830
01:22:26,219 --> 01:22:28,980
provider and says this is illegal remove

831
01:22:28,980 --> 01:22:31,620
it the the um provider will remove it

832
01:22:31,620 --> 01:22:33,659
right away so

833
01:22:33,659 --> 01:22:36,000
I don't like I didn't really

834
01:22:36,000 --> 01:22:37,620
look that much into

835
01:22:37,620 --> 01:22:39,620
um

836
01:22:39,960 --> 01:22:42,420
so I saw what the what the guy wrote but

837
01:22:42,420 --> 01:22:44,639
I didn't check how correct it was but

838
01:22:44,639 --> 01:22:46,920
there's something about that

839
01:22:46,920 --> 01:22:47,580
um

840
01:22:47,580 --> 01:22:50,100
but also General some other guy was

841
01:22:50,100 --> 01:22:52,219
writing like just normal police work

842
01:22:52,219 --> 01:22:54,960
works you don't need this Mass

843
01:22:54,960 --> 01:22:57,000
surveillance

844
01:22:57,000 --> 01:22:59,120
um

845
01:22:59,340 --> 01:23:01,080
then

846
01:23:01,080 --> 01:23:04,199
so I said the reasons it's bad it's bad

847
01:23:04,199 --> 01:23:07,080
for Freedom it doesn't work

848
01:23:07,080 --> 01:23:09,120
it's also

849
01:23:09,120 --> 01:23:11,460
um I said it breaks into an encryption

850
01:23:11,460 --> 01:23:14,880
it also creates a bunch of new attacks

851
01:23:14,880 --> 01:23:16,500
because

852
01:23:16,500 --> 01:23:18,000
um

853
01:23:18,000 --> 01:23:19,980
I found a paper that does this you can

854
01:23:19,980 --> 01:23:22,199
read it in more detail and he went to

855
01:23:22,199 --> 01:23:23,040
like

856
01:23:23,040 --> 01:23:24,179
depending on how you implement there

857
01:23:24,179 --> 01:23:26,400
could be different new attacks

858
01:23:26,400 --> 01:23:29,760
I uh you can imagine like if you have

859
01:23:29,760 --> 01:23:30,600
some

860
01:23:30,600 --> 01:23:33,239
some master decryption key or if we have

861
01:23:33,239 --> 01:23:36,900
something running on the clients

862
01:23:36,900 --> 01:23:39,420
there could be new Intex

863
01:23:39,420 --> 01:23:42,000
well the thing is the legislative The

864
01:23:42,000 --> 01:23:44,040
Proposal is vague about what would be

865
01:23:44,040 --> 01:23:45,360
implemented so you need to have a bunch

866
01:23:45,360 --> 01:23:47,219
of different

867
01:23:47,219 --> 01:23:48,120
um

868
01:23:48,120 --> 01:23:49,440
possibilities of what might be

869
01:23:49,440 --> 01:23:50,940
implemented so that you can say why

870
01:23:50,940 --> 01:23:52,860
they're all bad

871
01:23:52,860 --> 01:23:55,440
okay and then the last reason why it's

872
01:23:55,440 --> 01:23:56,520
bad

873
01:23:56,520 --> 01:23:59,699
is that children also need privacy

874
01:23:59,699 --> 01:24:00,900
so

875
01:24:00,900 --> 01:24:04,020
you're monitoring I like the main thing

876
01:24:04,020 --> 01:24:05,699
is you're monitoring if like a child is

877
01:24:05,699 --> 01:24:08,340
is having a

878
01:24:08,340 --> 01:24:12,780
is being solicited for sex or something

879
01:24:12,780 --> 01:24:13,380
um

880
01:24:13,380 --> 01:24:15,480
and so you're scanning you're scanning

881
01:24:15,480 --> 01:24:16,380
everyone's message but you're also

882
01:24:16,380 --> 01:24:17,639
scanning the child's message to protect

883
01:24:17,639 --> 01:24:19,560
the child but in doing this you're

884
01:24:19,560 --> 01:24:23,060
reducing the privacy of the child

885
01:24:23,520 --> 01:24:25,620
so

886
01:24:25,620 --> 01:24:27,719
those are some reasons why it's bad now

887
01:24:27,719 --> 01:24:29,880
I'll give you a practical example that

888
01:24:29,880 --> 01:24:31,320
will make you feel so emotional to see

889
01:24:31,320 --> 01:24:32,460
why it's bad

890
01:24:32,460 --> 01:24:34,139
uh does anyone here use end-to-end

891
01:24:34,139 --> 01:24:36,500
encryption

892
01:24:38,040 --> 01:24:40,020
I I think a lot of you use entering

893
01:24:40,020 --> 01:24:41,520
encryption yeah

894
01:24:41,520 --> 01:24:42,780
um like

895
01:24:42,780 --> 01:24:45,360
I'll count signal or crypt pad for

896
01:24:45,360 --> 01:24:46,620
example

897
01:24:46,620 --> 01:24:47,820
um

898
01:24:47,820 --> 01:24:50,219
so

899
01:24:50,219 --> 01:24:53,280
these like if you use signal or pad

900
01:24:53,280 --> 01:24:55,139
or email with gpg

901
01:24:55,139 --> 01:24:57,659
I guess the encrypt would have to be

902
01:24:57,659 --> 01:25:00,060
broken in order for this to comply

903
01:25:00,060 --> 01:25:02,820
so suppose like you're using

904
01:25:02,820 --> 01:25:05,040
something like this to communicate with

905
01:25:05,040 --> 01:25:07,320
your spouse and one day you share a

906
01:25:07,320 --> 01:25:08,940
picture of your dog and that's marked as

907
01:25:08,940 --> 01:25:11,460
a known as a that that matches that's a

908
01:25:11,460 --> 01:25:14,040
false positive match with an image and

909
01:25:14,040 --> 01:25:16,440
there's a I found a paper that they like

910
01:25:16,440 --> 01:25:19,199
they were able to contrive the there

911
01:25:19,199 --> 01:25:20,699
were some like examples they found that

912
01:25:20,699 --> 01:25:22,920
were like in the wild

913
01:25:22,920 --> 01:25:24,719
collisions that didn't look anything

914
01:25:24,719 --> 01:25:26,040
like each other but then they also were

915
01:25:26,040 --> 01:25:27,719
able to find one that's like

916
01:25:27,719 --> 01:25:30,300
a child looked like a child looked like

917
01:25:30,300 --> 01:25:31,620
a dog

918
01:25:31,620 --> 01:25:33,480
so it's totally conceivable that a

919
01:25:33,480 --> 01:25:36,420
picture of a dog could match some known

920
01:25:36,420 --> 01:25:38,699
child sexual abuse material

921
01:25:38,699 --> 01:25:40,320
and

922
01:25:40,320 --> 01:25:44,400
so if you um you share that and then

923
01:25:44,400 --> 01:25:46,860
also maybe you say something about

924
01:25:46,860 --> 01:25:49,080
meeting somewhere

925
01:25:49,080 --> 01:25:51,480
um and maybe all all together this is

926
01:25:51,480 --> 01:25:54,000
going to be a false positive for

927
01:25:54,000 --> 01:25:55,380
um child sexual abuse material and

928
01:25:55,380 --> 01:25:58,199
Grooming then probably a lot of your

929
01:25:58,199 --> 01:26:00,540
correspondence gets shared and if you

930
01:26:00,540 --> 01:26:02,340
had like passwords in your

931
01:26:02,340 --> 01:26:04,380
correspondence that's bad if you

932
01:26:04,380 --> 01:26:06,120
mentioned something that's like the

933
01:26:06,120 --> 01:26:07,380
normal things if you mentioned something

934
01:26:07,380 --> 01:26:09,960
that's legal where you are but not

935
01:26:09,960 --> 01:26:13,380
somewhere else or it's illegal in the

936
01:26:13,380 --> 01:26:15,360
future or something so everyone has

937
01:26:15,360 --> 01:26:17,940
something to hide so

938
01:26:17,940 --> 01:26:20,940
you are uh now your privacy is gone and

939
01:26:20,940 --> 01:26:22,620
you didn't do anything wrong meanwhile

940
01:26:22,620 --> 01:26:24,060
the people who are abusing the children

941
01:26:24,060 --> 01:26:27,060
know to use illegal stuff that doesn't

942
01:26:27,060 --> 01:26:30,360
have this the surveillance implemented

943
01:26:30,360 --> 01:26:33,900
and then so that was the the sad feeling

944
01:26:33,900 --> 01:26:35,820
example why this is bad and now the last

945
01:26:35,820 --> 01:26:37,980
the last thing is bad is what some

946
01:26:37,980 --> 01:26:40,620
authorities say and I think usually

947
01:26:40,620 --> 01:26:42,780
hackers aren't so into this but I hope

948
01:26:42,780 --> 01:26:45,719
these are okay there was a similar uh

949
01:26:45,719 --> 01:26:48,719
there so these examples are not directly

950
01:26:48,719 --> 01:26:51,300
on the proposal but they're related

951
01:26:51,300 --> 01:26:53,639
enough I think there was an issue where

952
01:26:53,639 --> 01:26:57,060
German police was doing some general

953
01:26:57,060 --> 01:27:00,000
scanning for terrorists

954
01:27:00,000 --> 01:27:02,820
and this went to court in Germany and it

955
01:27:02,820 --> 01:27:04,500
was determined that data screening is

956
01:27:04,500 --> 01:27:06,239
legal only in the presence of concrete

957
01:27:06,239 --> 01:27:08,940
danger so a general threat of terrorism

958
01:27:08,940 --> 01:27:10,679
does not suffice and that was determined

959
01:27:10,679 --> 01:27:11,460
to be

960
01:27:11,460 --> 01:27:13,940
bad

961
01:27:14,040 --> 01:27:16,320
there was also from the 2020 proposal

962
01:27:16,320 --> 01:27:18,960
that was similar to the 2022 proposal to

963
01:27:18,960 --> 01:27:22,320
to surveil everyone in order to stop

964
01:27:22,320 --> 01:27:24,179
child sexual abuse

965
01:27:24,179 --> 01:27:24,840
um

966
01:27:24,840 --> 01:27:27,420
the European data protection supervisor

967
01:27:27,420 --> 01:27:29,400
had some report on this

968
01:27:29,400 --> 01:27:31,320
and it said a lot of great things and

969
01:27:31,320 --> 01:27:32,460
one of the things it said is that

970
01:27:32,460 --> 01:27:34,500
confidentiality of communications is a

971
01:27:34,500 --> 01:27:36,060
Cornerstone of the fundamental rights to

972
01:27:36,060 --> 01:27:38,100
respect for private and family life

973
01:27:38,100 --> 01:27:40,199
even voluntary measures by private

974
01:27:40,199 --> 01:27:41,880
companies and the proposal is a

975
01:27:41,880 --> 01:27:43,739
requirement not a voluntary investor but

976
01:27:43,739 --> 01:27:45,840
even voluntary measures would constitute

977
01:27:45,840 --> 01:27:47,100
an interference with these rights when

978
01:27:47,100 --> 01:27:48,540
the measures involve monitoring and

979
01:27:48,540 --> 01:27:49,920
Analysis of the content of

980
01:27:49,920 --> 01:27:51,420
communications and processing of

981
01:27:51,420 --> 01:27:53,699
personal data

982
01:27:53,699 --> 01:27:56,460
and then the last big Authority is the

983
01:27:56,460 --> 01:27:58,260
UN Human Rights Council which did not

984
01:27:58,260 --> 01:27:59,400
have I didn't find some report

985
01:27:59,400 --> 01:28:01,679
specifically on this but they had some

986
01:28:01,679 --> 01:28:04,080
report on freedom on maybe the internet

987
01:28:04,080 --> 01:28:05,100
or something

988
01:28:05,100 --> 01:28:07,199
and

989
01:28:07,199 --> 01:28:08,880
um I think like the German

990
01:28:08,880 --> 01:28:12,300
constitutional court is like kind of a

991
01:28:12,300 --> 01:28:14,820
maybe uh

992
01:28:14,820 --> 01:28:17,340
a normal normal kind of mainstream

993
01:28:17,340 --> 01:28:19,260
opinion that like we shouldn't we can't

994
01:28:19,260 --> 01:28:22,199
it's illegal to scan for terrorists

995
01:28:22,199 --> 01:28:25,620
um just general scanning the um

996
01:28:25,620 --> 01:28:27,840
European data protection supervisor I

997
01:28:27,840 --> 01:28:29,159
got to is a little bit closer to the

998
01:28:29,159 --> 01:28:31,020
hacker one but the UN Human Rights

999
01:28:31,020 --> 01:28:33,840
Council report I think is like

1000
01:28:33,840 --> 01:28:36,300
crazy hacker level because they say that

1001
01:28:36,300 --> 01:28:37,980
encryption and anonymity play a critical

1002
01:28:37,980 --> 01:28:39,840
role in securing the rights of freedom

1003
01:28:39,840 --> 01:28:41,880
and expression and they specifically

1004
01:28:41,880 --> 01:28:44,520
mentioned Tor that Tor should be

1005
01:28:44,520 --> 01:28:47,699
protected and promoted like instead of

1006
01:28:47,699 --> 01:28:49,800
saying we need to

1007
01:28:49,800 --> 01:28:51,420
um

1008
01:28:51,420 --> 01:28:53,400
scan all the children's Communications

1009
01:28:53,400 --> 01:28:56,100
so to protect them from sexual abuse we

1010
01:28:56,100 --> 01:28:59,940
say we need to give children tour

1011
01:28:59,940 --> 01:29:02,940
so I think the Human Rights Council

1012
01:29:02,940 --> 01:29:04,440
would would also say this is a bad

1013
01:29:04,440 --> 01:29:07,139
regulation

1014
01:29:07,139 --> 01:29:09,540
and this of course begs the question

1015
01:29:09,540 --> 01:29:11,159
why would people propose something so

1016
01:29:11,159 --> 01:29:12,540
bad

1017
01:29:12,540 --> 01:29:14,580
and I have two

1018
01:29:14,580 --> 01:29:15,360
um

1019
01:29:15,360 --> 01:29:17,960
ideas

1020
01:29:18,420 --> 01:29:20,940
one is that people don't realize it's

1021
01:29:20,940 --> 01:29:22,920
impossible to do what they want that

1022
01:29:22,920 --> 01:29:25,139
because all these proposals say that we

1023
01:29:25,139 --> 01:29:26,940
are going to protect the children and at

1024
01:29:26,940 --> 01:29:28,020
the same time we need to preserve

1025
01:29:28,020 --> 01:29:30,120
everyone's privacy including the privacy

1026
01:29:30,120 --> 01:29:32,540
of the children

1027
01:29:32,699 --> 01:29:35,580
I found one report by one Civil Society

1028
01:29:35,580 --> 01:29:38,760
group that I thought uh demonstrated

1029
01:29:38,760 --> 01:29:40,320
this

1030
01:29:40,320 --> 01:29:41,699
uh

1031
01:29:41,699 --> 01:29:43,199
if there's a lack of understanding it

1032
01:29:43,199 --> 01:29:44,880
demonstrated it well

1033
01:29:44,880 --> 01:29:46,440
I

1034
01:29:46,440 --> 01:29:47,580
um

1035
01:29:47,580 --> 01:29:49,739
I won't I don't want to call out this

1036
01:29:49,739 --> 01:29:50,940
particular group because I imagine it's

1037
01:29:50,940 --> 01:29:52,679
just the report that I happen to find I

1038
01:29:52,679 --> 01:29:54,360
suspect there's other that have the same

1039
01:29:54,360 --> 01:29:55,620
um

1040
01:29:55,620 --> 01:29:58,739
view but I did reference the report

1041
01:29:58,739 --> 01:30:01,260
um so it's some group that does some um

1042
01:30:01,260 --> 01:30:02,639
it's called five rights I guess I'll

1043
01:30:02,639 --> 01:30:05,580
call it out but I I said it you know

1044
01:30:05,580 --> 01:30:06,780
they're probably it's probably not just

1045
01:30:06,780 --> 01:30:09,000
them uh that do something related to

1046
01:30:09,000 --> 01:30:10,560
protecting children and they had this

1047
01:30:10,560 --> 01:30:12,900
very long report about very wonderful

1048
01:30:12,900 --> 01:30:14,219
things about all the rights that

1049
01:30:14,219 --> 01:30:15,840
children have and I think all humans

1050
01:30:15,840 --> 01:30:16,860
should have these rights not just

1051
01:30:16,860 --> 01:30:19,139
children but all these wonderful rights

1052
01:30:19,139 --> 01:30:21,420
that they need and then there was just

1053
01:30:21,420 --> 01:30:24,420
one paragraph in this very long report

1054
01:30:24,420 --> 01:30:25,920
saying that

1055
01:30:25,920 --> 01:30:27,960
the children need privacy but the

1056
01:30:27,960 --> 01:30:30,060
Privacy should not protect the child sex

1057
01:30:30,060 --> 01:30:33,179
abusers nor nor interfere with child

1058
01:30:33,179 --> 01:30:35,580
sexual abuse detection systems but

1059
01:30:35,580 --> 01:30:37,800
that's all they said on it like one or

1060
01:30:37,800 --> 01:30:40,020
two sentences so they didn't say how

1061
01:30:40,020 --> 01:30:42,360
you're supposed to

1062
01:30:42,360 --> 01:30:45,420
protect the privacy but not interfere

1063
01:30:45,420 --> 01:30:46,920
with the child's sexual abuse detection

1064
01:30:46,920 --> 01:30:49,380
systems

1065
01:30:49,380 --> 01:30:50,820
and

1066
01:30:50,820 --> 01:30:53,040
like maybe they

1067
01:30:53,040 --> 01:30:54,780
maybe they were hiding that they didn't

1068
01:30:54,780 --> 01:30:56,400
know or maybe they truly didn't know but

1069
01:30:56,400 --> 01:30:58,320
the point here is one theory is that

1070
01:30:58,320 --> 01:31:01,860
people actually think it's possible to

1071
01:31:01,860 --> 01:31:03,900
um scan all the messages for child

1072
01:31:03,900 --> 01:31:06,060
sexual abuse well not

1073
01:31:06,060 --> 01:31:09,540
destroying freedom

1074
01:31:09,540 --> 01:31:11,820
but uh the other theory is maybe more

1075
01:31:11,820 --> 01:31:13,920
fun it's a conspiracy theory there is

1076
01:31:13,920 --> 01:31:16,199
this group called Thorn that is like

1077
01:31:16,199 --> 01:31:17,880
started by this famous guy Ashton

1078
01:31:17,880 --> 01:31:21,540
Kutcher who uh it's they're like stop

1079
01:31:21,540 --> 01:31:23,460
child sexual abuse

1080
01:31:23,460 --> 01:31:26,400
on the internet thing and

1081
01:31:26,400 --> 01:31:28,080
so

1082
01:31:28,080 --> 01:31:30,000
Ashton Kutcher and other people from

1083
01:31:30,000 --> 01:31:32,340
Thorne have been lobbying the EU

1084
01:31:32,340 --> 01:31:36,260
to have proposals like this

1085
01:31:37,500 --> 01:31:38,340
um

1086
01:31:38,340 --> 01:31:41,820
so you could say like they're just

1087
01:31:41,820 --> 01:31:43,380
another people who who don't know better

1088
01:31:43,380 --> 01:31:45,780
like they think it's possible

1089
01:31:45,780 --> 01:31:46,980
um but actually they also have a

1090
01:31:46,980 --> 01:31:49,380
proprietary screening service that I it

1091
01:31:49,380 --> 01:31:50,699
seems to me like they sell it actually

1092
01:31:50,699 --> 01:31:52,320
even though they're Thorn is a

1093
01:31:52,320 --> 01:31:54,120
foundation they have this proprietary

1094
01:31:54,120 --> 01:31:56,699
scanning service called safer

1095
01:31:56,699 --> 01:31:59,639
that I think they sell

1096
01:31:59,639 --> 01:32:01,760
um

1097
01:32:02,100 --> 01:32:03,900
and

1098
01:32:03,900 --> 01:32:06,300
it could be that safer requires the

1099
01:32:06,300 --> 01:32:08,520
client side it requires

1100
01:32:08,520 --> 01:32:10,920
I mean they already have customers

1101
01:32:10,920 --> 01:32:13,139
maybe if it were required that we

1102
01:32:13,139 --> 01:32:14,880
surveil everyone they would have more

1103
01:32:14,880 --> 01:32:17,300
customers

1104
01:32:17,400 --> 01:32:19,560
um so they've been lobbying the EU

1105
01:32:19,560 --> 01:32:20,820
government

1106
01:32:20,820 --> 01:32:24,679
and the person

1107
01:32:25,020 --> 01:32:26,880
um someone who's been involved in this

1108
01:32:26,880 --> 01:32:29,400
uh I don't really know anything about

1109
01:32:29,400 --> 01:32:31,440
government so I don't I'm I'm not going

1110
01:32:31,440 --> 01:32:34,020
to say like a big word like a proposed

1111
01:32:34,020 --> 01:32:35,040
because I don't actually know what that

1112
01:32:35,040 --> 01:32:38,360
means but um

1113
01:32:38,360 --> 01:32:41,219
has been involved in quite involved in

1114
01:32:41,219 --> 01:32:42,600
this particular

1115
01:32:42,600 --> 01:32:43,560
um

1116
01:32:43,560 --> 01:32:45,239
proposal

1117
01:32:45,239 --> 01:32:47,820
so it could be like they talked to her

1118
01:32:47,820 --> 01:32:50,040
because like the lobbyist talked to her

1119
01:32:50,040 --> 01:32:51,320
because she's actually proposed

1120
01:32:51,320 --> 01:32:53,760
similarly similar style of thing like

1121
01:32:53,760 --> 01:32:55,679
surveil people to protect the children

1122
01:32:55,679 --> 01:32:58,699
before which gave her the the nickname

1123
01:32:58,699 --> 01:33:02,100
censusula in Germany apparently

1124
01:33:02,100 --> 01:33:04,739
uh when like 10 years ago

1125
01:33:04,739 --> 01:33:07,679
so uh

1126
01:33:07,679 --> 01:33:09,900
yes so we got to the

1127
01:33:09,900 --> 01:33:14,280
like that was why uh it's bad and why

1128
01:33:14,280 --> 01:33:17,100
people might want to do it anyway now

1129
01:33:17,100 --> 01:33:18,719
the last point

1130
01:33:18,719 --> 01:33:20,340
maybe there's something we can do about

1131
01:33:20,340 --> 01:33:22,500
it there's already like a bunch of

1132
01:33:22,500 --> 01:33:24,540
groups writing about how bad it is which

1133
01:33:24,540 --> 01:33:26,040
made it easy for me to tell you how bad

1134
01:33:26,040 --> 01:33:27,960
it is

1135
01:33:27,960 --> 01:33:30,540
um and I linked to some of those in

1136
01:33:30,540 --> 01:33:31,679
these notes that you will be able to

1137
01:33:31,679 --> 01:33:33,000
find in the program

1138
01:33:33,000 --> 01:33:37,440
but also this was proposed in May so

1139
01:33:37,440 --> 01:33:39,659
there hasn't been a big European

1140
01:33:39,659 --> 01:33:42,300
election since it's been proposed and

1141
01:33:42,300 --> 01:33:44,820
it's possible that this like whenever

1142
01:33:44,820 --> 01:33:47,219
the Danish election comes up it will be

1143
01:33:47,219 --> 01:33:49,679
the first big election that since this

1144
01:33:49,679 --> 01:33:51,120
has been proposed so it might be

1145
01:33:51,120 --> 01:33:53,699
something we should keep in mind and

1146
01:33:53,699 --> 01:33:55,260
like

1147
01:33:55,260 --> 01:33:57,300
yeah

1148
01:33:57,300 --> 01:34:01,400
so that's all thank you

1149
01:34:01,900 --> 01:34:05,070
[Applause]

1150
01:34:06,780 --> 01:34:09,980
any questions yeah

1151
01:34:14,880 --> 01:34:17,400
hello I'm here Mike there's at least two

1152
01:34:17,400 --> 01:34:19,520
problems with these things in general

1153
01:34:19,520 --> 01:34:22,920
one is about the very emotional that we

1154
01:34:22,920 --> 01:34:24,600
talk about child sex abuse and everybody

1155
01:34:24,600 --> 01:34:26,699
wants to protect against that but they

1156
01:34:26,699 --> 01:34:28,860
spend a lot of time

1157
01:34:28,860 --> 01:34:31,320
arguing about that before they get to

1158
01:34:31,320 --> 01:34:32,880
the second part where they say we must

1159
01:34:32,880 --> 01:34:34,860
protect the children which again is

1160
01:34:34,860 --> 01:34:37,199
something that you really can't do these

1161
01:34:37,199 --> 01:34:39,900
systems that detect it reliably and

1162
01:34:39,900 --> 01:34:41,880
we've seen it with antivirus systems and

1163
01:34:41,880 --> 01:34:43,739
we also have the same similar parallels

1164
01:34:43,739 --> 01:34:45,960
with terrorism where you cannot detect

1165
01:34:45,960 --> 01:34:47,940
terrorism because we we have like 200

1166
01:34:47,940 --> 01:34:51,480
definitions of what terror is so they

1167
01:34:51,480 --> 01:34:53,820
skip the part of what is possible and

1168
01:34:53,820 --> 01:34:55,139
then they use a lot of time on the

1169
01:34:55,139 --> 01:34:56,699
emotional part and I'm not sure how we

1170
01:34:56,699 --> 01:34:58,619
could combat that or how we can argue

1171
01:34:58,619 --> 01:35:00,840
against that I typically try to shut

1172
01:35:00,840 --> 01:35:02,820
down the first part saying that we all

1173
01:35:02,820 --> 01:35:04,980
want that so you don't have to talk more

1174
01:35:04,980 --> 01:35:07,139
about that but any ideas about how we

1175
01:35:07,139 --> 01:35:10,159
can fight it would be nice

1176
01:35:10,679 --> 01:35:12,780
well I've given you my ideas so far one

1177
01:35:12,780 --> 01:35:14,400
is to say it doesn't work

1178
01:35:14,400 --> 01:35:17,340
and the other is to oh it said doesn't

1179
01:35:17,340 --> 01:35:19,920
work I gave I did all three I did it

1180
01:35:19,920 --> 01:35:21,840
doesn't work I gave the emotional

1181
01:35:21,840 --> 01:35:24,239
argument and I gave the authorities what

1182
01:35:24,239 --> 01:35:25,679
they're saying

1183
01:35:25,679 --> 01:35:27,480
um another point is this is one of the

1184
01:35:27,480 --> 01:35:28,920
reasons I like the conspiracy theory

1185
01:35:28,920 --> 01:35:31,619
because I think it makes more sense than

1186
01:35:31,619 --> 01:35:33,000
like

1187
01:35:33,000 --> 01:35:34,800
people really don't know

1188
01:35:34,800 --> 01:35:37,199
but uh I mean it could be combined you

1189
01:35:37,199 --> 01:35:39,179
know like you hire people who who don't

1190
01:35:39,179 --> 01:35:42,500
know better to Lobby maybe that helps

1191
01:35:42,500 --> 01:35:46,400
but anyone else have ideas

1192
01:35:48,600 --> 01:35:51,420
not an idea but another question which

1193
01:35:51,420 --> 01:35:54,239
legislation is superior if I have an

1194
01:35:54,239 --> 01:35:56,699
Apple phone is it the American

1195
01:35:56,699 --> 01:35:59,340
legislation that needs to scan my phone

1196
01:35:59,340 --> 01:36:01,380
or is the European that has to scan my

1197
01:36:01,380 --> 01:36:03,060
phone or is the Australian that I

1198
01:36:03,060 --> 01:36:04,679
communicate with

1199
01:36:04,679 --> 01:36:07,320
I don't know no but that's also a

1200
01:36:07,320 --> 01:36:10,380
problem yeah wait which is do you say

1201
01:36:10,380 --> 01:36:13,260
which is better or which applies

1202
01:36:13,260 --> 01:36:17,900
which is so Superior oh I see

1203
01:36:18,540 --> 01:36:21,480
probably they all yeah I mean it's also

1204
01:36:21,480 --> 01:36:25,879
not defined as the internet is yeah

1205
01:36:26,639 --> 01:36:30,139
we have one any more questions yeah

1206
01:36:30,659 --> 01:36:32,219
but yeah that's a good point there's a

1207
01:36:32,219 --> 01:36:33,840
problem Oh wait actually no I do have

1208
01:36:33,840 --> 01:36:36,000
some I I can uh I can say something

1209
01:36:36,000 --> 01:36:37,800
vaguely related to that

1210
01:36:37,800 --> 01:36:39,480
um so this article that I read about

1211
01:36:39,480 --> 01:36:40,920
like it was some journalist who was

1212
01:36:40,920 --> 01:36:42,300
trying to

1213
01:36:42,300 --> 01:36:44,280
who is questioning this idea that the

1214
01:36:44,280 --> 01:36:46,739
police can't take down stuff

1215
01:36:46,739 --> 01:36:48,600
um he was saying

1216
01:36:48,600 --> 01:36:51,380
the police say there's like the the the

1217
01:36:51,380 --> 01:36:54,540
abuse material is in offshore servers so

1218
01:36:54,540 --> 01:36:56,699
we can't do anything about it well first

1219
01:36:56,699 --> 01:36:58,139
thing is if you just email them they'll

1220
01:36:58,139 --> 01:36:59,280
take it down

1221
01:36:59,280 --> 01:37:00,600
um regardless of where it is but usually

1222
01:37:00,600 --> 01:37:02,639
it's like

1223
01:37:02,639 --> 01:37:04,320
in some place with good internet like

1224
01:37:04,320 --> 01:37:07,020
Europe you know so

1225
01:37:07,020 --> 01:37:09,080
um

1226
01:37:09,659 --> 01:37:11,340
it might not even matter which one's

1227
01:37:11,340 --> 01:37:13,440
Superior like it might all just already

1228
01:37:13,440 --> 01:37:15,179
be covered

1229
01:37:15,179 --> 01:37:16,139
um

1230
01:37:16,139 --> 01:37:17,460
yeah

1231
01:37:17,460 --> 01:37:19,679
I am Karen

1232
01:37:19,679 --> 01:37:21,179
um thanks very much for the presentation

1233
01:37:21,179 --> 01:37:23,940
there has been some debate about the

1234
01:37:23,940 --> 01:37:25,739
proposal from the commission already but

1235
01:37:25,739 --> 01:37:27,900
mainly from I'm in the European

1236
01:37:27,900 --> 01:37:29,820
Parliament and mainly from colleagues

1237
01:37:29,820 --> 01:37:31,739
from Germany that have been aware of

1238
01:37:31,739 --> 01:37:33,659
this chat control

1239
01:37:33,659 --> 01:37:34,920
um proposal

1240
01:37:34,920 --> 01:37:39,780
how will we be able to unify sort of the

1241
01:37:39,780 --> 01:37:41,639
people the populations and the opinions

1242
01:37:41,639 --> 01:37:43,980
in other countries because I can do some

1243
01:37:43,980 --> 01:37:45,300
stuff in the European Parliament as a

1244
01:37:45,300 --> 01:37:47,880
Danish MEP but unless we put pressure on

1245
01:37:47,880 --> 01:37:50,520
the Danish government to stop it at the

1246
01:37:50,520 --> 01:37:53,219
European Council and in other European

1247
01:37:53,219 --> 01:37:56,760
countries do the same then how is there

1248
01:37:56,760 --> 01:37:59,520
a debate about this in other countries

1249
01:37:59,520 --> 01:38:02,340
than Germany and for the audience how do

1250
01:38:02,340 --> 01:38:03,239
we actually

1251
01:38:03,239 --> 01:38:05,520
and make this debate that's going on in

1252
01:38:05,520 --> 01:38:08,219
Denmark and some suggestions for that

1253
01:38:08,219 --> 01:38:09,659
and then also you were mentioning the

1254
01:38:09,659 --> 01:38:13,020
lobbying towards the EU institutions has

1255
01:38:13,020 --> 01:38:15,540
there been any proof of that has there

1256
01:38:15,540 --> 01:38:17,100
been any questions asked because

1257
01:38:17,100 --> 01:38:18,480
otherwise that is something that we

1258
01:38:18,480 --> 01:38:20,580
perhaps should look at asking questions

1259
01:38:20,580 --> 01:38:23,820
on yes so the first point

1260
01:38:23,820 --> 01:38:26,040
um how to unify people

1261
01:38:26,040 --> 01:38:28,320
I don't know maybe you can tell me if I

1262
01:38:28,320 --> 01:38:29,699
knew better maybe I would go into

1263
01:38:29,699 --> 01:38:32,178
politics

1264
01:38:32,400 --> 01:38:35,699
to the second Point yes there are a

1265
01:38:35,699 --> 01:38:36,840
bunch of people have made Freedom of

1266
01:38:36,840 --> 01:38:38,820
Information requests to competent

1267
01:38:38,820 --> 01:38:42,060
authorities to get these uh meetings

1268
01:38:42,060 --> 01:38:45,119
with Thorne and I

1269
01:38:45,119 --> 01:38:46,699
in the link

1270
01:38:46,699 --> 01:38:49,560
that you will see in the program you can

1271
01:38:49,560 --> 01:38:53,040
see all these uh

1272
01:38:53,040 --> 01:38:54,480
actually you know I can't open them

1273
01:38:54,480 --> 01:38:56,340
right now

1274
01:38:56,340 --> 01:38:58,520
um

1275
01:39:07,619 --> 01:39:10,619
okay

1276
01:39:12,360 --> 01:39:13,860
so

1277
01:39:13,860 --> 01:39:17,699
yes so like there are so many but

1278
01:39:17,699 --> 01:39:19,380
um here we go

1279
01:39:19,380 --> 01:39:21,300
like someone requested

1280
01:39:21,300 --> 01:39:24,960
a list of all the meetings with Thorne

1281
01:39:24,960 --> 01:39:27,719
from a Swedish government

1282
01:39:27,719 --> 01:39:31,080
and this has like the early meetings

1283
01:39:31,080 --> 01:39:32,699
um

1284
01:39:32,699 --> 01:39:35,540
there were a bunch

1285
01:39:36,119 --> 01:39:38,100
uh so I guess actually the list of

1286
01:39:38,100 --> 01:39:39,060
meetings itself isn't all that

1287
01:39:39,060 --> 01:39:40,560
interesting but the person who requested

1288
01:39:40,560 --> 01:39:44,179
maybe is quite interesting

1289
01:39:44,699 --> 01:39:50,540
does uh does that help more quite okay

1290
01:39:53,310 --> 01:39:56,300
[Laughter]

1291
01:39:56,300 --> 01:40:00,440
then we go on to the next question

1292
01:40:00,900 --> 01:40:03,179
yeah maybe it's also a comment I think

1293
01:40:03,179 --> 01:40:05,940
the last success we had was say 11 years

1294
01:40:05,940 --> 01:40:09,139
ago with actor and here it actually

1295
01:40:09,139 --> 01:40:11,940
managed to go into the public media and

1296
01:40:11,940 --> 01:40:13,800
we went to the streets and we did

1297
01:40:13,800 --> 01:40:16,800
everything I just don't know why it

1298
01:40:16,800 --> 01:40:19,500
happened but at some point we made it to

1299
01:40:19,500 --> 01:40:22,860
a critical mass and then it was actually

1300
01:40:22,860 --> 01:40:25,920
easier at least so we must mail the

1301
01:40:25,920 --> 01:40:27,659
politicians and we did a lot of things

1302
01:40:27,659 --> 01:40:29,219
so

1303
01:40:29,219 --> 01:40:32,100
I think that could at least teach us a

1304
01:40:32,100 --> 01:40:33,780
little bit about what is possible

1305
01:40:33,780 --> 01:40:36,360
instead of us saying okay nothing is

1306
01:40:36,360 --> 01:40:38,400
possible

1307
01:40:38,400 --> 01:40:42,119
do you agree the I don't really

1308
01:40:42,119 --> 01:40:44,159
understand how normal people work I mean

1309
01:40:44,159 --> 01:40:46,139
sometimes in various in very special

1310
01:40:46,139 --> 01:40:48,600
contexts with many years of study I can

1311
01:40:48,600 --> 01:40:53,699
learn I do happen to have like a uh

1312
01:40:53,699 --> 01:40:56,340
like a qualified source

1313
01:40:56,340 --> 01:40:58,800
had a theory on the active thing

1314
01:40:58,800 --> 01:41:00,480
uh

1315
01:41:00,480 --> 01:41:02,400
maybe I'll tell you later but her Theory

1316
01:41:02,400 --> 01:41:05,460
uh was um that

1317
01:41:05,460 --> 01:41:07,980
it was because of Polish soccer fans who

1318
01:41:07,980 --> 01:41:09,420
couldn't watch their

1319
01:41:09,420 --> 01:41:10,980
soccer

1320
01:41:10,980 --> 01:41:13,459
I think

1321
01:41:13,980 --> 01:41:15,900
that's that that's why

1322
01:41:15,900 --> 01:41:17,940
I might be remembering incorrectly the

1323
01:41:17,940 --> 01:41:19,320
whether it was actor or something else

1324
01:41:19,320 --> 01:41:21,000
uh

1325
01:41:21,000 --> 01:41:22,619
and whether but I definitely remember

1326
01:41:22,619 --> 01:41:24,600
there was it was polish soccer fans that

1327
01:41:24,600 --> 01:41:26,159
couldn't watch their soccer

1328
01:41:26,159 --> 01:41:27,420
uh

1329
01:41:27,420 --> 01:41:30,500
that yeah

1330
01:41:30,780 --> 01:41:33,179
any more questions

1331
01:41:33,179 --> 01:41:36,199
here yep

1332
01:41:40,139 --> 01:41:43,199
you mentioned that already but there is

1333
01:41:43,199 --> 01:41:46,860
uh definitely also an unwillingness of

1334
01:41:46,860 --> 01:41:49,980
of the police to to do what is necessary

1335
01:41:49,980 --> 01:41:52,920
to to get this these materials offline

1336
01:41:52,920 --> 01:41:54,119
there has been

1337
01:41:54,119 --> 01:41:56,639
a report on public German television

1338
01:41:56,639 --> 01:42:00,239
where the reporter sneaked himself into

1339
01:42:00,239 --> 01:42:03,300
several child porn forums where shell

1340
01:42:03,300 --> 01:42:06,060
there were share host links to such

1341
01:42:06,060 --> 01:42:11,040
material and he just just reported that

1342
01:42:11,040 --> 01:42:14,159
to the admencies of of the machines

1343
01:42:14,159 --> 01:42:16,500
where where the stuff or the staff was

1344
01:42:16,500 --> 01:42:20,040
and it disappeared within hours or

1345
01:42:20,040 --> 01:42:23,340
uh in in the worst case is days and like

1346
01:42:23,340 --> 01:42:26,460
80 were hosted in the US and Germany

1347
01:42:26,460 --> 01:42:30,600
so it it really works and that begs the

1348
01:42:30,600 --> 01:42:34,139
question if that was really the thing

1349
01:42:34,139 --> 01:42:37,800
it's it's all about why don't they just

1350
01:42:37,800 --> 01:42:41,219
do it because it's it's proven that it

1351
01:42:41,219 --> 01:42:45,119
works so there might be other

1352
01:42:45,119 --> 01:42:48,420
other other ideas behind constructing

1353
01:42:48,420 --> 01:42:50,280
such an infrastructure

1354
01:42:50,280 --> 01:42:54,780
to to do other things than going against

1355
01:42:54,780 --> 01:42:57,000
child porn

1356
01:42:57,000 --> 01:42:58,920
yes I suspect that's the exact same

1357
01:42:58,920 --> 01:43:02,040
article that I read it was

1358
01:43:02,040 --> 01:43:04,980
uh well

1359
01:43:04,980 --> 01:43:07,619
I messed with something

1360
01:43:07,619 --> 01:43:09,480
um

1361
01:43:09,480 --> 01:43:13,040
the uh the person would

1362
01:43:14,659 --> 01:43:18,960
uh it was either no it was a Robert

1363
01:43:18,960 --> 01:43:24,420
Robert bongan and Daniel mosbuca

1364
01:43:24,420 --> 01:43:26,100
is what I have

1365
01:43:26,100 --> 01:43:28,679
um but you know since I just want to

1366
01:43:28,679 --> 01:43:30,540
point out because you're

1367
01:43:30,540 --> 01:43:33,420
because you bring up the topic of uh

1368
01:43:33,420 --> 01:43:36,300
like reporting when you see the child

1369
01:43:36,300 --> 01:43:37,440
texture boost material on the website

1370
01:43:37,440 --> 01:43:40,560
reporting it that is just part of this

1371
01:43:40,560 --> 01:43:43,199
uh and that's like that's that's kind of

1372
01:43:43,199 --> 01:43:46,440
like the easy thing because if it's

1373
01:43:46,440 --> 01:43:47,940
if it's known to

1374
01:43:47,940 --> 01:43:50,340
if you've already established if it's

1375
01:43:50,340 --> 01:43:52,260
already in the database it's pretty easy

1376
01:43:52,260 --> 01:43:55,920
to do this and this regulation would The

1377
01:43:55,920 --> 01:43:57,900
Proposal would do much more than that I

1378
01:43:57,900 --> 01:44:00,960
mean maybe it wouldn't actually but like

1379
01:44:00,960 --> 01:44:02,699
the way it's written it would have to in

1380
01:44:02,699 --> 01:44:03,659
order to comply you would have to do

1381
01:44:03,659 --> 01:44:06,000
much more than that

1382
01:44:06,000 --> 01:44:09,739
than just taking down the material

1383
01:44:19,139 --> 01:44:22,320
I think 11 years ago with ACTA there was

1384
01:44:22,320 --> 01:44:25,020
the the luck that the digital rights

1385
01:44:25,020 --> 01:44:26,659
community and the sort of

1386
01:44:26,659 --> 01:44:29,280
anti-globalization and anti-capitalist

1387
01:44:29,280 --> 01:44:31,560
movements came together in a common

1388
01:44:31,560 --> 01:44:35,940
cause and therefore managed to to stop a

1389
01:44:35,940 --> 01:44:38,100
trade deal with the US and I think that

1390
01:44:38,100 --> 01:44:40,560
was perhaps why it succeeded uh 11 years

1391
01:44:40,560 --> 01:44:41,460
ago

1392
01:44:41,460 --> 01:44:44,880
I think in order to stop the proposal on

1393
01:44:44,880 --> 01:44:46,679
chat control I think we need to

1394
01:44:46,679 --> 01:44:48,360
emphasize on the fact that it doesn't

1395
01:44:48,360 --> 01:44:51,840
work that it will not make uh lives

1396
01:44:51,840 --> 01:44:54,540
safer for children because if we just

1397
01:44:54,540 --> 01:44:57,480
say it's bad for all of our privacy even

1398
01:44:57,480 --> 01:44:58,860
though that we feel that this is an

1399
01:44:58,860 --> 01:45:01,260
important enough argument others will

1400
01:45:01,260 --> 01:45:04,380
say well if the balance is saving

1401
01:45:04,380 --> 01:45:07,139
children on the internet and are giving

1402
01:45:07,139 --> 01:45:09,420
up a little bit of our privacy then we

1403
01:45:09,420 --> 01:45:11,340
will prefer saving the children on the

1404
01:45:11,340 --> 01:45:13,500
internet so we'll have to say that this

1405
01:45:13,500 --> 01:45:16,260
is not something that is going to work

1406
01:45:16,260 --> 01:45:19,260
and it is going to be cost too much

1407
01:45:19,260 --> 01:45:21,960
where the the lobbying from the company

1408
01:45:21,960 --> 01:45:24,360
that wants to perhaps sell their

1409
01:45:24,360 --> 01:45:26,000
filtering

1410
01:45:26,000 --> 01:45:29,340
mechanism might come in handy and then

1411
01:45:29,340 --> 01:45:30,840
also saying well I mean we need to use

1412
01:45:30,840 --> 01:45:33,420
police resources in an effective manner

1413
01:45:33,420 --> 01:45:36,900
to actually help children that are being

1414
01:45:36,900 --> 01:45:39,780
groomed or abused and I think those are

1415
01:45:39,780 --> 01:45:41,100
the sort of the arguments that we need

1416
01:45:41,100 --> 01:45:42,960
to play on because if we just say it's

1417
01:45:42,960 --> 01:45:46,199
bad for our privacy and it's not and it

1418
01:45:46,199 --> 01:45:48,420
in order to save children then I don't

1419
01:45:48,420 --> 01:45:49,920
think we'll we'll mobilize that many

1420
01:45:49,920 --> 01:45:51,420
people so I think we really need to

1421
01:45:51,420 --> 01:45:54,540
emphasize on what would work rather than

1422
01:45:54,540 --> 01:45:57,239
and and then we might be able to stop

1423
01:45:57,239 --> 01:46:00,000
this throwing Tech at a societal problem

1424
01:46:00,000 --> 01:46:03,179
which I think this is they they had the

1425
01:46:03,179 --> 01:46:06,480
original proposal from 2020 that didn't

1426
01:46:06,480 --> 01:46:08,400
um come forward and then they're now

1427
01:46:08,400 --> 01:46:10,500
trying again saying okay we have this

1428
01:46:10,500 --> 01:46:11,580
problem that we don't know how to deal

1429
01:46:11,580 --> 01:46:13,500
with and therefore let's just throw

1430
01:46:13,500 --> 01:46:15,540
throw some technology at it and see if

1431
01:46:15,540 --> 01:46:17,960
it's six

1432
01:46:18,719 --> 01:46:21,119
thank you

1433
01:46:21,119 --> 01:46:23,219
actually if I may just also bounce off

1434
01:46:23,219 --> 01:46:24,360
of that point there's there's another

1435
01:46:24,360 --> 01:46:25,739
aspect to it which I think is really

1436
01:46:25,739 --> 01:46:27,480
important it's not necessarily that it

1437
01:46:27,480 --> 01:46:29,340
doesn't help it can actually make the

1438
01:46:29,340 --> 01:46:32,340
situation much worse because as it

1439
01:46:32,340 --> 01:46:34,860
currently stands uh the people who are

1440
01:46:34,860 --> 01:46:36,239
Distributing this material feel

1441
01:46:36,239 --> 01:46:37,560
comfortable Distributing it over

1442
01:46:37,560 --> 01:46:39,540
WhatsApp catch one of them and you've

1443
01:46:39,540 --> 01:46:41,340
got the phone numbers of all the others

1444
01:46:41,340 --> 01:46:44,940
if we pass this law we will push them

1445
01:46:44,940 --> 01:46:47,400
onto the dark web or other other

1446
01:46:47,400 --> 01:46:49,199
distribution means which are more

1447
01:46:49,199 --> 01:46:51,300
difficult to trace so as a result

1448
01:46:51,300 --> 01:46:52,920
basically it will actually make the

1449
01:46:52,920 --> 01:46:55,380
lives of these people easier and it will

1450
01:46:55,380 --> 01:46:57,119
make it much harder to catch them so I

1451
01:46:57,119 --> 01:46:58,260
think that's also something that we

1452
01:46:58,260 --> 01:47:00,179
should push that not only will it not

1453
01:47:00,179 --> 01:47:01,500
work it might actually make the

1454
01:47:01,500 --> 01:47:03,560
situation worse

1455
01:47:03,560 --> 01:47:06,719
I have just me too so actually both of

1456
01:47:06,719 --> 01:47:09,719
the last two comes can be give me um one

1457
01:47:09,719 --> 01:47:12,360
of the thoughts is we don't have any any

1458
01:47:12,360 --> 01:47:14,820
evidence to say it will work

1459
01:47:14,820 --> 01:47:17,400
which is a reason not to do this but

1460
01:47:17,400 --> 01:47:18,900
unfortunately we don't we don't have any

1461
01:47:18,900 --> 01:47:21,239
evidence like where someone implemented

1462
01:47:21,239 --> 01:47:22,920
it and it didn't work so that we can

1463
01:47:22,920 --> 01:47:24,600
point to

1464
01:47:24,600 --> 01:47:25,440
um

1465
01:47:25,440 --> 01:47:27,719
it would kind of be nice if we did

1466
01:47:27,719 --> 01:47:30,119
it would be very easy argument

1467
01:47:30,119 --> 01:47:32,760
um and then to your the theory that

1468
01:47:32,760 --> 01:47:34,619
there are already comfortable using

1469
01:47:34,619 --> 01:47:36,420
WhatsApp so they would be pushed onto

1470
01:47:36,420 --> 01:47:37,800
another

1471
01:47:37,800 --> 01:47:41,040
um service there is a competing theory

1472
01:47:41,040 --> 01:47:43,320
that because you can

1473
01:47:43,320 --> 01:47:45,600
uh because you can share it on

1474
01:47:45,600 --> 01:47:47,639
like normal

1475
01:47:47,639 --> 01:47:49,199
um

1476
01:47:49,199 --> 01:47:51,000
protocols

1477
01:47:51,000 --> 01:47:53,520
then it becomes normalized to distribute

1478
01:47:53,520 --> 01:47:55,739
child sexual abuse material and so more

1479
01:47:55,739 --> 01:47:57,000
people will do it

1480
01:47:57,000 --> 01:48:00,239
so I think that argument itself like

1481
01:48:00,239 --> 01:48:02,340
with with an example like with a

1482
01:48:02,340 --> 01:48:04,260
experiment or something that would work

1483
01:48:04,260 --> 01:48:08,119
but on its own it I don't think it works

1484
01:48:08,699 --> 01:48:11,540
any more questions

1485
01:48:12,300 --> 01:48:13,619
nope

1486
01:48:13,619 --> 01:48:15,540
thank you very much for a very

1487
01:48:15,540 --> 01:48:17,159
interesting talk

1488
01:48:17,159 --> 01:48:18,150
thank you

1489
01:48:18,150 --> 01:48:22,170
[Applause]

1490
01:55:27,739 --> 01:55:32,119
can you hear me perfect

1491
02:00:40,460 --> 02:00:43,940
can you hear me

1492
02:08:44,060 --> 02:08:47,060
thank you

1493
02:08:48,360 --> 02:08:49,079
um

1494
02:08:49,079 --> 02:08:52,380
yeah does the camera follow because I

1495
02:08:52,380 --> 02:08:55,020
will later move on okay because I will

1496
02:08:55,020 --> 02:08:56,760
later stand there and explain things on

1497
02:08:56,760 --> 02:08:59,840
the Stream So be prepared

1498
02:09:03,060 --> 02:09:05,820
okay we are ready to start with the

1499
02:09:05,820 --> 02:09:08,699
presentation here in the speaker's tent

1500
02:09:08,699 --> 02:09:11,400
um a little information for please

1501
02:09:11,400 --> 02:09:13,380
remember to drink a lot of water during

1502
02:09:13,380 --> 02:09:15,480
the day and get some sunscreen if you

1503
02:09:15,480 --> 02:09:17,460
don't have any uh try to someone who's

1504
02:09:17,460 --> 02:09:19,619
willing to share it because it is

1505
02:09:19,619 --> 02:09:23,119
absolutely necessary in this heat

1506
02:09:23,280 --> 02:09:24,659
um

1507
02:09:24,659 --> 02:09:27,420
the next presentation we have is the one

1508
02:09:27,420 --> 02:09:29,520
with the braid or in Danish then we're

1509
02:09:29,520 --> 02:09:31,560
flattening who's going to give us a

1510
02:09:31,560 --> 02:09:33,860
presentation about

1511
02:09:33,860 --> 02:09:36,300
framework give a round of applause

1512
02:09:36,300 --> 02:09:37,950
please

1513
02:09:37,950 --> 02:09:44,039
[Applause]

1514
02:09:45,480 --> 02:09:47,940
the one with the braid or a set then

1515
02:09:47,940 --> 02:09:50,760
with flattening in uh Danish and yeah

1516
02:09:50,760 --> 02:09:54,540
I'm software developer uh using mostly

1517
02:09:54,540 --> 02:09:56,699
flutter and dart as the programming

1518
02:09:56,699 --> 02:09:59,040
language and framework

1519
02:09:59,040 --> 02:10:01,980
I'm interested in Linux Matrix and

1520
02:10:01,980 --> 02:10:04,320
flutter yeah and that's why

1521
02:10:04,320 --> 02:10:06,360
I thought well let's give a short

1522
02:10:06,360 --> 02:10:09,000
introduction into performant development

1523
02:10:09,000 --> 02:10:10,560
using flutter because you can do any

1524
02:10:10,560 --> 02:10:13,139
garbage with flutter 2 of course

1525
02:10:13,139 --> 02:10:15,199
um

1526
02:10:15,659 --> 02:10:18,138
so

1527
02:10:18,659 --> 02:10:21,540
yeah we will start with some basic

1528
02:10:21,540 --> 02:10:24,000
information on how to use flutter what

1529
02:10:24,000 --> 02:10:27,179
it is look at the basic concepts of

1530
02:10:27,179 --> 02:10:29,820
flutter because flutter are made some

1531
02:10:29,820 --> 02:10:33,300
some huge progress compared to

1532
02:10:33,300 --> 02:10:34,980
previous patterns in software

1533
02:10:34,980 --> 02:10:36,420
development especially in Mobile

1534
02:10:36,420 --> 02:10:39,900
development yeah later on

1535
02:10:39,900 --> 02:10:43,739
a short look on animations

1536
02:10:43,739 --> 02:10:46,560
and yeah how to be in particular

1537
02:10:46,560 --> 02:10:48,960
performant when doing animations and

1538
02:10:48,960 --> 02:10:50,880
optimizing animations because in my

1539
02:10:50,880 --> 02:10:53,400
opinion animation and motion is a huge

1540
02:10:53,400 --> 02:10:55,980
part of user experience and I know

1541
02:10:55,980 --> 02:10:57,719
software Developers

1542
02:10:57,719 --> 02:11:00,000
like Tech but we should always keep in

1543
02:11:00,000 --> 02:11:02,820
mind the users too and at the end we

1544
02:11:02,820 --> 02:11:05,400
will look a bit on how rendering is done

1545
02:11:05,400 --> 02:11:08,280
with flutter yeah and that's it so

1546
02:11:08,280 --> 02:11:10,260
that's how I'm going to amuse you the

1547
02:11:10,260 --> 02:11:10,980
next

1548
02:11:10,980 --> 02:11:12,659
a few minutes

1549
02:11:12,659 --> 02:11:15,540
yeah what is flutter uh flutter is a

1550
02:11:15,540 --> 02:11:18,239
software development kit it consists of

1551
02:11:18,239 --> 02:11:21,239
the diet programming language which is a

1552
02:11:21,239 --> 02:11:23,760
programming language which was started

1553
02:11:23,760 --> 02:11:27,360
in development I think between 2030 and

1554
02:11:27,360 --> 02:11:31,440
2015 by Google which was just built for

1555
02:11:31,440 --> 02:11:34,260
later use with flutter and yeah that's

1556
02:11:34,260 --> 02:11:36,179
why it's highly optimized for the

1557
02:11:36,179 --> 02:11:38,880
context of flutter flutter itself as

1558
02:11:38,880 --> 02:11:40,619
already mentioned is a software

1559
02:11:40,619 --> 02:11:43,679
development kit exposing Advanced

1560
02:11:43,679 --> 02:11:46,079
libraries for rendering

1561
02:11:46,079 --> 02:11:47,480
um

1562
02:11:47,480 --> 02:11:49,520
localization

1563
02:11:49,520 --> 02:11:52,639
animation interaction with Native

1564
02:11:52,639 --> 02:11:54,320
components

1565
02:11:54,320 --> 02:11:58,040
for many many platforms

1566
02:11:58,040 --> 02:12:00,020
flutter itself

1567
02:12:00,020 --> 02:12:04,199
runs or creates applications capable of

1568
02:12:04,199 --> 02:12:06,960
running as web page as mobile apps on

1569
02:12:06,960 --> 02:12:08,599
Android or iOS

1570
02:12:08,599 --> 02:12:11,820
running on Windows as a native Windows

1571
02:12:11,820 --> 02:12:14,040
app as universal windows platform app as

1572
02:12:14,040 --> 02:12:17,460
Linux app as Mac app uh running on

1573
02:12:17,460 --> 02:12:19,380
Google future or on Linux and better

1574
02:12:19,380 --> 02:12:20,880
devices so that it's pretty much

1575
02:12:20,880 --> 02:12:22,860
covering any

1576
02:12:22,860 --> 02:12:24,659
um yeah any platform you want to Target

1577
02:12:24,659 --> 02:12:29,040
with any code and it does not consist of

1578
02:12:29,040 --> 02:12:31,020
JavaScript because most cross-platform

1579
02:12:31,020 --> 02:12:33,420
development is done with Javascript app

1580
02:12:33,420 --> 02:12:36,360
that time and yeah and Google's aim was

1581
02:12:36,360 --> 02:12:39,000
in developing flutter was not using

1582
02:12:39,000 --> 02:12:39,960
JavaScript

1583
02:12:39,960 --> 02:12:41,880
yeah and

1584
02:12:41,880 --> 02:12:45,060
that's it at the glaze what's particular

1585
02:12:45,060 --> 02:12:46,440
typical

1586
02:12:46,440 --> 02:12:49,380
particularly typical for flatter

1587
02:12:49,380 --> 02:12:50,699
um yeah

1588
02:12:50,699 --> 02:12:52,679
flatter is very easy to use it's very

1589
02:12:52,679 --> 02:12:54,900
easy to to install you can even run

1590
02:12:54,900 --> 02:12:57,480
flutter live on the website called diet

1591
02:12:57,480 --> 02:12:59,639
pad so if you just want to have a quick

1592
02:12:59,639 --> 02:13:00,960
look at it you don't even have to

1593
02:13:00,960 --> 02:13:04,260
install it you can use live coding on

1594
02:13:04,260 --> 02:13:07,320
dotpad.net for example uh other major

1595
02:13:07,320 --> 02:13:09,239
part of flutter is something called

1596
02:13:09,239 --> 02:13:12,300
widgets widgets are the UI components of

1597
02:13:12,300 --> 02:13:15,540
flutter I will talk about them later and

1598
02:13:15,540 --> 02:13:18,239
flutter is highly extensible using uh

1599
02:13:18,239 --> 02:13:21,179
plug-ins and compared to Native

1600
02:13:21,179 --> 02:13:23,579
development for from for example Android

1601
02:13:23,579 --> 02:13:27,420
or if you look at HTML or whatsoever it

1602
02:13:27,420 --> 02:13:30,719
provides the design and the layout and

1603
02:13:30,719 --> 02:13:33,300
the UI as part of the code

1604
02:13:33,300 --> 02:13:36,199
um which makes you getting rid of

1605
02:13:36,199 --> 02:13:39,119
dedicated fights for layout design and

1606
02:13:39,119 --> 02:13:41,460
so on uh and the code itself as you know

1607
02:13:41,460 --> 02:13:43,560
for example from Android with XML files

1608
02:13:43,560 --> 02:13:45,420
for for the UI

1609
02:13:45,420 --> 02:13:47,159
um or from

1610
02:13:47,159 --> 02:13:50,099
HTML where you have dedicated HTML files

1611
02:13:50,099 --> 02:13:53,040
for layout uh JavaScript stuff for

1612
02:13:53,040 --> 02:13:56,159
everything which does something at CSS

1613
02:13:56,159 --> 02:13:57,659
for styling

1614
02:13:57,659 --> 02:14:00,000
yeah if you look for extensions on

1615
02:14:00,000 --> 02:14:03,679
flutter for packages libraries uh Native

1616
02:14:03,679 --> 02:14:07,800
Integrations uh may you be accessing a

1617
02:14:07,800 --> 02:14:11,420
camera or playing Fancy videos or

1618
02:14:11,420 --> 02:14:13,560
sharing stuff you have the website

1619
02:14:13,560 --> 02:14:16,619
pub.death listing many fancy and

1620
02:14:16,619 --> 02:14:19,679
interesting plugins uh and packages for

1621
02:14:19,679 --> 02:14:21,239
flutter

1622
02:14:21,239 --> 02:14:23,159
yeah for those of you who want to

1623
02:14:23,159 --> 02:14:25,079
install it it's pretty easy just clone

1624
02:14:25,079 --> 02:14:28,199
the git repository or install it however

1625
02:14:28,199 --> 02:14:29,699
you like you can also download the zip

1626
02:14:29,699 --> 02:14:31,380
but it's pretty much just download

1627
02:14:31,380 --> 02:14:35,340
loading this repository adjusting the

1628
02:14:35,340 --> 02:14:37,980
path and just executing uh flutter and

1629
02:14:37,980 --> 02:14:39,900
then you can enjoy it or as mentioned

1630
02:14:39,900 --> 02:14:44,040
just visit diet pad dot Dev where you

1631
02:14:44,040 --> 02:14:48,780
can use flutter just within your browser

1632
02:14:48,780 --> 02:14:51,540
so let's have a look on apart from what

1633
02:14:51,540 --> 02:14:54,239
I already told flutter is made of

1634
02:14:54,239 --> 02:14:55,860
um

1635
02:14:55,860 --> 02:14:58,980
yeah flutter itself is a framework

1636
02:14:58,980 --> 02:15:01,320
written in diet you have it up here

1637
02:15:01,320 --> 02:15:04,079
which consists of UI libraries like a

1638
02:15:04,079 --> 02:15:06,480
material Library the material library is

1639
02:15:06,480 --> 02:15:08,880
everything we know from Android like

1640
02:15:08,880 --> 02:15:12,780
design material design by Google or you

1641
02:15:12,780 --> 02:15:15,060
could also create Cupertino Style

1642
02:15:15,060 --> 02:15:19,139
IUS hands uh like uis whatsoever there

1643
02:15:19,139 --> 02:15:22,880
is also a library for Windows like

1644
02:15:23,340 --> 02:15:26,760
design if anyone likes that

1645
02:15:26,760 --> 02:15:28,860
um yeah and everything which is designed

1646
02:15:28,860 --> 02:15:31,560
everything you can see on the screen it

1647
02:15:31,560 --> 02:15:34,139
consists of widgets so widgets are being

1648
02:15:34,139 --> 02:15:36,599
the small UI elements you can Nest

1649
02:15:36,599 --> 02:15:38,579
within each other you can extend you can

1650
02:15:38,579 --> 02:15:40,199
build on they are called widgets and

1651
02:15:40,199 --> 02:15:42,960
flutter example would be a button the

1652
02:15:42,960 --> 02:15:45,239
entire app your text everything is

1653
02:15:45,239 --> 02:15:47,699
widgets it's all widgets yeah below the

1654
02:15:47,699 --> 02:15:49,679
widgets you have rendering of course

1655
02:15:49,679 --> 02:15:52,320
well it must know how to render stuff

1656
02:15:52,320 --> 02:15:54,060
and that's what we have the rendering

1657
02:15:54,060 --> 02:15:56,400
Library so which is basically extend

1658
02:15:56,400 --> 02:15:59,760
rendering objects and Below those there

1659
02:15:59,760 --> 02:16:01,920
are libraries written in diets being

1660
02:16:01,920 --> 02:16:03,480
responsible for painting painting

1661
02:16:03,480 --> 02:16:05,760
capturing gestures

1662
02:16:05,760 --> 02:16:08,460
um performing high quality animations

1663
02:16:08,460 --> 02:16:11,520
controlling uh their flow and Below you

1664
02:16:11,520 --> 02:16:12,840
have the foundation allowing the

1665
02:16:12,840 --> 02:16:15,360
interaction with the layer below the

1666
02:16:15,360 --> 02:16:18,599
foundation exposes libraries uh giving

1667
02:16:18,599 --> 02:16:20,520
information on which platform you run on

1668
02:16:20,520 --> 02:16:23,280
for example for detection of web there

1669
02:16:23,280 --> 02:16:25,320
is a fancy constant being provided in

1670
02:16:25,320 --> 02:16:26,639
the foundation library and everything

1671
02:16:26,639 --> 02:16:29,040
which is very low well low level

1672
02:16:29,040 --> 02:16:30,960
compared uh

1673
02:16:30,960 --> 02:16:33,840
for a high level framework it is part of

1674
02:16:33,840 --> 02:16:36,240
the foundation so that's the diet part

1675
02:16:36,240 --> 02:16:38,519
of flutter that's what the flutter tool

1676
02:16:38,519 --> 02:16:41,340
that's what flattered the SDK ships for

1677
02:16:41,340 --> 02:16:43,318
you below that you have the engine the

1678
02:16:43,318 --> 02:16:45,959
engine is uh what basically does the

1679
02:16:45,959 --> 02:16:49,799
rendering what runs uh the runtime it's

1680
02:16:49,799 --> 02:16:52,080
implemented for every platform on its

1681
02:16:52,080 --> 02:16:54,660
own so there's an implementation running

1682
02:16:54,660 --> 02:16:57,718
flatter applications uh on Android there

1683
02:16:57,718 --> 02:16:59,818
is an engine for web and so on so

1684
02:16:59,818 --> 02:17:02,099
dedicated implementation to in order to

1685
02:17:02,099 --> 02:17:05,160
run all those fancy high-level elements

1686
02:17:05,160 --> 02:17:08,519
on the platform it is supposed to run on

1687
02:17:08,519 --> 02:17:11,818
um that may be platform channels uh in

1688
02:17:11,818 --> 02:17:13,740
the yeah for example you have platform

1689
02:17:13,740 --> 02:17:16,200
channels in

1690
02:17:16,200 --> 02:17:19,439
in the engine exposing or

1691
02:17:19,439 --> 02:17:21,959
exposing developers the capability of

1692
02:17:21,959 --> 02:17:25,138
accessing native code for plugins I

1693
02:17:25,138 --> 02:17:26,398
already mentioned for example camera

1694
02:17:26,398 --> 02:17:28,740
access that's something which

1695
02:17:28,740 --> 02:17:30,840
framework doing rendering is not capable

1696
02:17:30,840 --> 02:17:33,439
of and that's which is basically done by

1697
02:17:33,439 --> 02:17:36,540
platform channels also rendering is done

1698
02:17:36,540 --> 02:17:38,580
by the engine of course well we now know

1699
02:17:38,580 --> 02:17:40,500
by diet how something should look like

1700
02:17:40,500 --> 02:17:43,080
but we still need the engine to perform

1701
02:17:43,080 --> 02:17:44,939
the actual rendering

1702
02:17:44,939 --> 02:17:48,299
um that's used that's done by skia on

1703
02:17:48,299 --> 02:17:51,240
most platforms uh skiers so more or less

1704
02:17:51,240 --> 02:17:53,939
fancy rendering Library

1705
02:17:53,939 --> 02:17:56,160
um yeah that's it also very important

1706
02:17:56,160 --> 02:17:59,519
part is accessibility accessibility is

1707
02:17:59,519 --> 02:18:01,040
also done on engine

1708
02:18:01,040 --> 02:18:04,500
layer so that the accessibility features

1709
02:18:04,500 --> 02:18:06,660
of the framework are exposed to the

1710
02:18:06,660 --> 02:18:08,879
native accessibility features of the

1711
02:18:08,879 --> 02:18:11,459
platform it runs on that may be for

1712
02:18:11,459 --> 02:18:14,099
example text to speech area attributes

1713
02:18:14,099 --> 02:18:16,920
on web or whatsoever

1714
02:18:16,920 --> 02:18:20,818
yeah and the embedded uh yeah

1715
02:18:20,818 --> 02:18:23,939
it that embeds all this stuff into the

1716
02:18:23,939 --> 02:18:25,978
native platform stuff

1717
02:18:25,978 --> 02:18:26,580
um

1718
02:18:26,580 --> 02:18:28,978
sets up the context where it renders on

1719
02:18:28,978 --> 02:18:32,099
and so on which is a highly different on

1720
02:18:32,099 --> 02:18:34,200
our platforms and there again you see

1721
02:18:34,200 --> 02:18:36,120
flutter runs on every platform it

1722
02:18:36,120 --> 02:18:39,478
includes future desktops mobile and web

1723
02:18:39,478 --> 02:18:40,859
that's pretty

1724
02:18:40,859 --> 02:18:43,318
everything I could imagine off to run on

1725
02:18:43,318 --> 02:18:46,439
even Linux embedded

1726
02:18:46,439 --> 02:18:49,260
um yeah I was mentioning widgets uh many

1727
02:18:49,260 --> 02:18:51,478
times uh widgets are the basic

1728
02:18:51,478 --> 02:18:54,299
components of flutter and they are

1729
02:18:54,299 --> 02:18:57,240
basically two different types of widgets

1730
02:18:57,240 --> 02:19:00,660
stateless and stateful widgets I mean

1731
02:19:00,660 --> 02:19:04,080
their name well you may assume stateless

1732
02:19:04,080 --> 02:19:06,898
widgets are are stateless they have no

1733
02:19:06,898 --> 02:19:09,000
State they are mutable they are once

1734
02:19:09,000 --> 02:19:12,000
created and in case anything is to be

1735
02:19:12,000 --> 02:19:14,359
changed they must be completely rebuilt

1736
02:19:14,359 --> 02:19:18,179
that could be for example a text widget

1737
02:19:18,179 --> 02:19:22,500
an image a button a list yeah

1738
02:19:22,500 --> 02:19:23,879
so

1739
02:19:23,879 --> 02:19:26,700
they can be constant so if you can't

1740
02:19:26,700 --> 02:19:29,879
just create a predefined widget which is

1741
02:19:29,879 --> 02:19:33,120
compiled as it is so it can cannot be

1742
02:19:33,120 --> 02:19:34,859
changed

1743
02:19:34,859 --> 02:19:37,799
yeah in any way stateful which it's an

1744
02:19:37,799 --> 02:19:38,760
opposite

1745
02:19:38,760 --> 02:19:39,959
um

1746
02:19:39,959 --> 02:19:43,138
provide methods to modify them at

1747
02:19:43,138 --> 02:19:46,019
runtime there's a very famous method

1748
02:19:46,019 --> 02:19:48,299
called set State well which sets the

1749
02:19:48,299 --> 02:19:50,280
state I would later provide code

1750
02:19:50,280 --> 02:19:53,700
examples but yeah that's the uh pretty

1751
02:19:53,700 --> 02:19:56,640
much uh the difference so State full

1752
02:19:56,640 --> 02:19:57,600
widget

1753
02:19:57,600 --> 02:19:59,460
can

1754
02:19:59,460 --> 02:20:03,120
can change their state they can interact

1755
02:20:03,120 --> 02:20:06,359
with the parents uh widgets state for so

1756
02:20:06,359 --> 02:20:09,300
for example widgets are nested as any UI

1757
02:20:09,300 --> 02:20:10,859
is nested for example if we have a list

1758
02:20:10,859 --> 02:20:14,100
and we have an item in a list which

1759
02:20:14,100 --> 02:20:16,380
should be given the first number or the

1760
02:20:16,380 --> 02:20:19,140
first index of an array and if the

1761
02:20:19,140 --> 02:20:22,200
parenting array changes a state less

1762
02:20:22,200 --> 02:20:25,140
widget would be just rebuild a stateful

1763
02:20:25,140 --> 02:20:28,319
widget could decide upon a method which

1764
02:20:28,319 --> 02:20:30,600
is called uh did update widget whether

1765
02:20:30,600 --> 02:20:32,939
it should rebuild the other way around a

1766
02:20:32,939 --> 02:20:35,819
state full widget could also say hey I

1767
02:20:35,819 --> 02:20:37,859
was just pressed let's change my color

1768
02:20:37,859 --> 02:20:41,220
so yeah and a stateful widget would need

1769
02:20:41,220 --> 02:20:43,080
to interact with the parenting widget

1770
02:20:43,080 --> 02:20:44,580
for this

1771
02:20:44,580 --> 02:20:45,240
um

1772
02:20:45,240 --> 02:20:49,819
yeah so let's have some code samples

1773
02:20:49,859 --> 02:20:53,160
that's a hello world or hello Bond hack

1774
02:20:53,160 --> 02:20:55,560
in flutter it's very easy you have a top

1775
02:20:55,560 --> 02:20:58,920
level uh function run app which takes

1776
02:20:58,920 --> 02:21:02,460
any widgets well that would be pretty

1777
02:21:02,460 --> 02:21:04,620
awful from design because it would be

1778
02:21:04,620 --> 02:21:06,899
just an application displaying text it's

1779
02:21:06,899 --> 02:21:08,880
not that useful

1780
02:21:08,880 --> 02:21:10,140
um

1781
02:21:10,140 --> 02:21:11,760
whoop

1782
02:21:11,760 --> 02:21:15,000
yeah a bit longer sample is this one

1783
02:21:15,000 --> 02:21:19,560
it's an example of a stateless widget

1784
02:21:19,560 --> 02:21:22,859
uh let's go through it

1785
02:21:22,859 --> 02:21:24,780
um

1786
02:21:24,780 --> 02:21:27,000
we give you the name it's uh just a

1787
02:21:27,000 --> 02:21:30,899
class extending a stateless widget so if

1788
02:21:30,899 --> 02:21:33,300
you want to compose a custom state in

1789
02:21:33,300 --> 02:21:36,000
this widget you always extend this class

1790
02:21:36,000 --> 02:21:38,939
um we take some parameters

1791
02:21:38,939 --> 02:21:41,880
help a class called identity provider in

1792
02:21:41,880 --> 02:21:45,439
this case and the function Handler

1793
02:21:45,439 --> 02:21:48,660
acting on well when it is pressed so

1794
02:21:48,660 --> 02:21:50,160
basically what you see here is an

1795
02:21:50,160 --> 02:21:51,720
implant implementation of a custom

1796
02:21:51,720 --> 02:21:53,040
button

1797
02:21:53,040 --> 02:21:55,680
um yeah you always have build methods

1798
02:21:55,680 --> 02:21:59,100
for flutter widgets they provide all the

1799
02:21:59,100 --> 02:22:01,200
data which is relevant for build which

1800
02:22:01,200 --> 02:22:03,780
is pretty much returning a widget so

1801
02:22:03,780 --> 02:22:06,080
that's why its signature is a widget

1802
02:22:06,080 --> 02:22:08,520
Yeah in our case we have an Inkwell

1803
02:22:08,520 --> 02:22:10,700
which is uh flat

1804
02:22:10,700 --> 02:22:14,040
equivalent of a gistro detector but a

1805
02:22:14,040 --> 02:22:16,680
bit more high level it has some fancy

1806
02:22:16,680 --> 02:22:19,319
effects if you press on that's why yeah

1807
02:22:19,319 --> 02:22:22,380
you can use this Inkwell we give it some

1808
02:22:22,380 --> 02:22:25,020
parameters and a child this child is a

1809
02:22:25,020 --> 02:22:27,660
padding in our case and it consists of a

1810
02:22:27,660 --> 02:22:30,240
column that way as you see it there it's

1811
02:22:30,240 --> 02:22:31,979
entirely static there's nothing which

1812
02:22:31,979 --> 02:22:35,100
can change but I left out the content of

1813
02:22:35,100 --> 02:22:38,220
the column let's have a look at it

1814
02:22:38,220 --> 02:22:38,939
um

1815
02:22:38,939 --> 02:22:41,460
yeah what could we could place in this

1816
02:22:41,460 --> 02:22:42,899
column is

1817
02:22:42,899 --> 02:22:46,140
Auto widgets of course it was a the

1818
02:22:46,140 --> 02:22:48,840
column exposes a parameter children

1819
02:22:48,840 --> 02:22:51,240
which is a list of widgets

1820
02:22:51,240 --> 02:22:53,460
um yeah there we have three and number

1821
02:22:53,460 --> 02:22:55,920
we have the material we have a size box

1822
02:22:55,920 --> 02:22:58,859
and we have text uh the text let's go

1823
02:22:58,859 --> 02:23:00,420
from bottom to top it's easy in this

1824
02:23:00,420 --> 02:23:02,939
case the text just exposes a localized

1825
02:23:02,939 --> 02:23:05,460
text so localization and flutter is very

1826
02:23:05,460 --> 02:23:08,100
easy there we have a constant widget

1827
02:23:08,100 --> 02:23:10,020
which is just a size box which is

1828
02:23:10,020 --> 02:23:12,240
constant and entirely and here we have

1829
02:23:12,240 --> 02:23:14,100
something more interesting we have a

1830
02:23:14,100 --> 02:23:16,319
widget in the state

1831
02:23:16,319 --> 02:23:18,960
as widget contained in a stateless

1832
02:23:18,960 --> 02:23:19,979
widget

1833
02:23:19,979 --> 02:23:21,960
deciding on

1834
02:23:21,960 --> 02:23:24,359
or checking some properties we have the

1835
02:23:24,359 --> 02:23:27,840
identity provider a helper data class we

1836
02:23:27,840 --> 02:23:30,359
defined uh somewhere else I don't know

1837
02:23:30,359 --> 02:23:33,960
and visibly it has a property icon and

1838
02:23:33,960 --> 02:23:36,600
we can check this icon with an inline if

1839
02:23:36,600 --> 02:23:40,140
statement and react on it and as the

1840
02:23:40,140 --> 02:23:42,120
widget is always rebuilt

1841
02:23:42,120 --> 02:23:44,100
as soon as the parenting widget so if

1842
02:23:44,100 --> 02:23:46,020
you created create it within some other

1843
02:23:46,020 --> 02:23:48,780
widget we provide a new identity

1844
02:23:48,780 --> 02:23:50,760
provider for example which has an icon

1845
02:23:50,760 --> 02:23:53,280
that would change because any stateless

1846
02:23:53,280 --> 02:23:55,500
widget is immediately rebuilt if the

1847
02:23:55,500 --> 02:23:58,380
parenting widget provides new data

1848
02:23:58,380 --> 02:24:00,960
um in case it there is no new data and

1849
02:24:00,960 --> 02:24:02,640
the parenting widget is provided a new

1850
02:24:02,640 --> 02:24:04,260
set say it is not rebuilt that's a

1851
02:24:04,260 --> 02:24:06,120
question of performance but on

1852
02:24:06,120 --> 02:24:08,160
performance and rendering we will have a

1853
02:24:08,160 --> 02:24:10,080
look later

1854
02:24:10,080 --> 02:24:10,740
um

1855
02:24:10,740 --> 02:24:14,040
yeah now in the opposite an example of a

1856
02:24:14,040 --> 02:24:16,620
state full widget

1857
02:24:16,620 --> 02:24:19,740
um it's a very easy one it this is uh

1858
02:24:19,740 --> 02:24:23,220
the widget itself which is one class and

1859
02:24:23,220 --> 02:24:25,260
this is the state of this widget which

1860
02:24:25,260 --> 02:24:27,180
is another class

1861
02:24:27,180 --> 02:24:29,240
um and as you see here it takes no

1862
02:24:29,240 --> 02:24:31,740
dedicated parameters we ignore this key

1863
02:24:31,740 --> 02:24:33,720
that's a flatter internal thing we don't

1864
02:24:33,720 --> 02:24:35,819
we can just ignore it and it creates a

1865
02:24:35,819 --> 02:24:38,700
state which results in this widget

1866
02:24:38,700 --> 02:24:42,479
um so what does the state consist of in

1867
02:24:42,479 --> 02:24:44,760
this case nothing but

1868
02:24:44,760 --> 02:24:47,520
a build method and

1869
02:24:47,520 --> 02:24:49,560
a tiny

1870
02:24:49,560 --> 02:24:52,920
property we Define a color which is pink

1871
02:24:52,920 --> 02:24:56,880
and we Define a build method exposing a

1872
02:24:56,880 --> 02:24:58,319
button

1873
02:24:58,319 --> 02:25:01,080
which changes the color once it is

1874
02:25:01,080 --> 02:25:03,359
pressed there we have the very famous

1875
02:25:03,359 --> 02:25:05,760
set State method which is uh used all

1876
02:25:05,760 --> 02:25:08,280
around flutter it changes the State of

1877
02:25:08,280 --> 02:25:09,420
the State

1878
02:25:09,420 --> 02:25:12,120
full widget or to be more precise

1879
02:25:12,120 --> 02:25:15,479
changes the state of a state of a

1880
02:25:15,479 --> 02:25:17,220
stateful widget because this is just the

1881
02:25:17,220 --> 02:25:20,340
state class yeah

1882
02:25:20,340 --> 02:25:23,460
so far uh what it does is playing

1883
02:25:23,460 --> 02:25:25,740
chameleon it just changes the color once

1884
02:25:25,740 --> 02:25:28,260
you press it now let's have a look on

1885
02:25:28,260 --> 02:25:31,200
what we can do in addition with it

1886
02:25:31,200 --> 02:25:33,960
I extended this class somehow now we

1887
02:25:33,960 --> 02:25:37,080
have if we look at uh the class itself

1888
02:25:37,080 --> 02:25:39,180
at the widget itself we now have a

1889
02:25:39,180 --> 02:25:41,760
property a required property the default

1890
02:25:41,760 --> 02:25:42,960
color

1891
02:25:42,960 --> 02:25:45,540
and that's created once

1892
02:25:45,540 --> 02:25:47,819
and in the init state which is a method

1893
02:25:47,819 --> 02:25:49,500
which is called before the the widget

1894
02:25:49,500 --> 02:25:52,920
renders the first time we just save

1895
02:25:52,920 --> 02:25:56,160
the parenting widgets default color

1896
02:25:56,160 --> 02:25:59,399
into our own property

1897
02:25:59,399 --> 02:26:00,479
color

1898
02:26:00,479 --> 02:26:04,260
later on it's exactly the same it

1899
02:26:04,260 --> 02:26:06,000
changes the color later just that I

1900
02:26:06,000 --> 02:26:10,200
changed the pink color to uh

1901
02:26:10,200 --> 02:26:12,300
no I did not change it I forgot it okay

1902
02:26:12,300 --> 02:26:15,240
think of yeah it does exactly the same

1903
02:26:15,240 --> 02:26:16,319
thing

1904
02:26:16,319 --> 02:26:17,160
um

1905
02:26:17,160 --> 02:26:21,060
and we added the did update we should uh

1906
02:26:21,060 --> 02:26:23,819
uh yeah the update widget method which

1907
02:26:23,819 --> 02:26:24,920
checks

1908
02:26:24,920 --> 02:26:28,800
uh the same of which does or prevents

1909
02:26:28,800 --> 02:26:31,800
from us from the same water State less

1910
02:26:31,800 --> 02:26:34,200
which it does a stateless widget if we

1911
02:26:34,200 --> 02:26:36,120
remember it is just being rebuilt if a

1912
02:26:36,120 --> 02:26:37,500
property of a change

1913
02:26:37,500 --> 02:26:40,020
this one is not immediately rebuilt it

1914
02:26:40,020 --> 02:26:42,180
can decide on its own whether it should

1915
02:26:42,180 --> 02:26:44,220
rebuild whether it should interact with

1916
02:26:44,220 --> 02:26:46,800
the change of uh the parenting widget so

1917
02:26:46,800 --> 02:26:50,700
if we are provide a new widget so if

1918
02:26:50,700 --> 02:26:52,439
this part is changed for example if we

1919
02:26:52,439 --> 02:26:54,780
provide a new default color because we

1920
02:26:54,780 --> 02:26:57,300
think pink is no longer fancy we use uh

1921
02:26:57,300 --> 02:27:00,660
green now then we can

1922
02:27:00,660 --> 02:27:03,600
um check here down here whether it is it

1923
02:27:03,600 --> 02:27:05,700
changed and in case it is changed well

1924
02:27:05,700 --> 02:27:08,220
we don't do much but rendering it again

1925
02:27:08,220 --> 02:27:09,300
so

1926
02:27:09,300 --> 02:27:12,540
it's not such a useful widget

1927
02:27:12,540 --> 02:27:14,540
um

1928
02:27:14,700 --> 02:27:16,560
yeah I think I think that was it with

1929
02:27:16,560 --> 02:27:18,300
code samples and quick introduction into

1930
02:27:18,300 --> 02:27:21,840
flutter now we will move on to

1931
02:27:21,840 --> 02:27:25,939
performance animations and motion

1932
02:27:29,220 --> 02:27:30,720
yeah

1933
02:27:30,720 --> 02:27:33,479
uh yeah I thought I'm not talking about

1934
02:27:33,479 --> 02:27:35,100
motion and animation and then I need to

1935
02:27:35,100 --> 02:27:37,020
animate it slides that's why that's why

1936
02:27:37,020 --> 02:27:39,180
I changed the slides

1937
02:27:39,180 --> 02:27:40,500
um

1938
02:27:40,500 --> 02:27:45,319
yeah why do we need animation

1939
02:27:46,200 --> 02:27:48,720
animation can be used in software

1940
02:27:48,720 --> 02:27:50,939
development for various different things

1941
02:27:50,939 --> 02:27:55,620
here you saw you saw it uh yeah it's uh

1942
02:27:55,620 --> 02:27:57,780
indicated some hierarchy let me check

1943
02:27:57,780 --> 02:27:59,700
whether I can

1944
02:27:59,700 --> 02:28:03,380
run it again the animation

1945
02:28:03,660 --> 02:28:06,660
yeah you saw it was this list tile which

1946
02:28:06,660 --> 02:28:09,540
expanded that highly indicated this

1947
02:28:09,540 --> 02:28:12,240
animation okay it's now part of this

1948
02:28:12,240 --> 02:28:14,460
list tile and it's containing some

1949
02:28:14,460 --> 02:28:18,000
hierarchical stuff of this this style uh

1950
02:28:18,000 --> 02:28:19,680
that could be an example for another

1951
02:28:19,680 --> 02:28:24,180
other space button here

1952
02:28:24,180 --> 02:28:26,640
the other one is status

1953
02:28:26,640 --> 02:28:28,500
um

1954
02:28:28,500 --> 02:28:30,720
there you see it a loading indicator

1955
02:28:30,720 --> 02:28:33,540
loading things later this animation

1956
02:28:33,540 --> 02:28:35,520
obviously indicates something is going

1957
02:28:35,520 --> 02:28:37,560
on if it was just a wide screen people

1958
02:28:37,560 --> 02:28:39,180
would think oh my God my app is broken

1959
02:28:39,180 --> 02:28:41,340
and we want to avoid it because we

1960
02:28:41,340 --> 02:28:43,939
should pay attention on user experience

1961
02:28:43,939 --> 02:28:46,680
another thing is feedback the animation

1962
02:28:46,680 --> 02:28:48,780
of the tires moving to the other place

1963
02:28:48,780 --> 02:28:51,600
indicates that the action would be

1964
02:28:51,600 --> 02:28:53,819
successful if it was ended as at that

1965
02:28:53,819 --> 02:28:56,060
point that's another point of Animation

1966
02:28:56,060 --> 02:28:58,680
or user education pressed there and it

1967
02:28:58,680 --> 02:29:01,020
didn't work at bump this way so people

1968
02:29:01,020 --> 02:29:03,540
know ah I need to slide up uh yeah

1969
02:29:03,540 --> 02:29:06,420
that's another way of Animation so let's

1970
02:29:06,420 --> 02:29:09,180
have a look on how we can achieve their

1971
02:29:09,180 --> 02:29:12,140
using flutter

1972
02:29:13,200 --> 02:29:15,780
yay a broken image okay

1973
02:29:15,780 --> 02:29:16,740
um

1974
02:29:16,740 --> 02:29:20,580
that's a bad way of ux design

1975
02:29:20,580 --> 02:29:21,359
um

1976
02:29:21,359 --> 02:29:25,340
one more broken image

1977
02:29:25,500 --> 02:29:28,319
okay broken images so yeah let's let's

1978
02:29:28,319 --> 02:29:30,899
skip to the types of animations flutter

1979
02:29:30,899 --> 02:29:32,880
uh provides several types of animations

1980
02:29:32,880 --> 02:29:35,160
uh the first one is an implicit

1981
02:29:35,160 --> 02:29:39,060
animation it's used for very easy tasks

1982
02:29:39,060 --> 02:29:41,280
simple animations it's a low effort of

1983
02:29:41,280 --> 02:29:42,780
creating them

1984
02:29:42,780 --> 02:29:46,500
um because they just take a a value it

1985
02:29:46,500 --> 02:29:48,180
current it's currently stock at a

1986
02:29:48,180 --> 02:29:51,780
duration and a curve

1987
02:29:51,780 --> 02:29:55,020
yeah course could be well any core if

1988
02:29:55,020 --> 02:29:56,640
you know if you ever did animations you

1989
02:29:56,640 --> 02:29:58,920
probably already touched because it's

1990
02:29:58,920 --> 02:30:01,800
just mathematical functions providing uh

1991
02:30:01,800 --> 02:30:04,260
a current uh state of the animation so

1992
02:30:04,260 --> 02:30:06,060
the current current value are based up

1993
02:30:06,060 --> 02:30:09,600
on the time frame or whatsoever

1994
02:30:09,600 --> 02:30:10,380
um

1995
02:30:10,380 --> 02:30:13,380
yeah that's an example of an uh

1996
02:30:13,380 --> 02:30:16,380
very easy implicit animation uh it's an

1997
02:30:16,380 --> 02:30:18,359
animated container an animated container

1998
02:30:18,359 --> 02:30:21,540
is a stateful widget provided by the

1999
02:30:21,540 --> 02:30:23,520
flutter framework which simplifies

2000
02:30:23,520 --> 02:30:27,180
animation by this implicit animation so

2001
02:30:27,180 --> 02:30:29,520
our container just checks whether the

2002
02:30:29,520 --> 02:30:32,640
variable selected is true in case it is

2003
02:30:32,640 --> 02:30:35,819
selected uh well it obviously changes

2004
02:30:35,819 --> 02:30:37,800
shape because the width and the height

2005
02:30:37,800 --> 02:30:41,340
change are color changes and so on

2006
02:30:41,340 --> 02:30:44,460
um yeah and it takes as mentioned the

2007
02:30:44,460 --> 02:30:46,680
duration two seconds so it's very easy

2008
02:30:46,680 --> 02:30:49,319
to just create a stateful widget and

2009
02:30:49,319 --> 02:30:51,899
once uh some things changed you just

2010
02:30:51,899 --> 02:30:54,540
change this variable it rebuilds and

2011
02:30:54,540 --> 02:30:57,300
it's exposes a awesome beautiful

2012
02:30:57,300 --> 02:31:00,540
animation taking two seconds uh changing

2013
02:31:00,540 --> 02:31:03,240
color from red to blue and so on so

2014
02:31:03,240 --> 02:31:04,859
that's a very easy and very performant

2015
02:31:04,859 --> 02:31:07,560
way for easy animations on Flander but

2016
02:31:07,560 --> 02:31:10,560
it's only a UI thing you can't do very

2017
02:31:10,560 --> 02:31:12,780
complicated things with with this kind

2018
02:31:12,780 --> 02:31:16,100
of animation but we got other

2019
02:31:16,100 --> 02:31:19,280
animation animation thing is too another

2020
02:31:19,280 --> 02:31:22,800
type of an implicit animation is a tween

2021
02:31:22,800 --> 02:31:24,720
animation Builder

2022
02:31:24,720 --> 02:31:28,439
um it takes a tween which is pretty much

2023
02:31:28,439 --> 02:31:29,640
a function

2024
02:31:29,640 --> 02:31:33,300
um and flatter providing an and and uh

2025
02:31:33,300 --> 02:31:36,359
start and it animates

2026
02:31:36,359 --> 02:31:38,460
from beginning to end and so on and so

2027
02:31:38,460 --> 02:31:42,380
on and it has a builder the Builder

2028
02:31:42,380 --> 02:31:46,319
exposes uh the interesting part is the

2029
02:31:46,319 --> 02:31:48,720
angle in our case the value of the tween

2030
02:31:48,720 --> 02:31:52,740
so I called it angle because of this um

2031
02:31:52,740 --> 02:31:54,960
in our case it just Returns the

2032
02:31:54,960 --> 02:31:58,140
transform k a transform rotation so we

2033
02:31:58,140 --> 02:32:00,780
will see a spinning Planet uh over there

2034
02:32:00,780 --> 02:32:03,060
it could be anything you build there you

2035
02:32:03,060 --> 02:32:05,280
could also make flying Rockets using a

2036
02:32:05,280 --> 02:32:07,380
train Builder which starts at the bottom

2037
02:32:07,380 --> 02:32:09,200
of the screens flies up and

2038
02:32:09,200 --> 02:32:11,280
very easy

2039
02:32:11,280 --> 02:32:13,200
um by using build it flattery consists

2040
02:32:13,200 --> 02:32:15,720
of of features many Builders and those

2041
02:32:15,720 --> 02:32:18,240
Builders just uh return a widget based

2042
02:32:18,240 --> 02:32:21,300
on the given parameters and yeah you

2043
02:32:21,300 --> 02:32:24,300
don't need a stateful widget in order to

2044
02:32:24,300 --> 02:32:26,340
use this one unlike an animated

2045
02:32:26,340 --> 02:32:29,040
container so it's um in some positions

2046
02:32:29,040 --> 02:32:31,439
are even easier to use in an animated

2047
02:32:31,439 --> 02:32:34,800
container and you can do more yeah more

2048
02:32:34,800 --> 02:32:36,600
complex things because you've really

2049
02:32:36,600 --> 02:32:40,020
built a widget or a Content based on

2050
02:32:40,020 --> 02:32:41,700
this

2051
02:32:41,700 --> 02:32:44,160
um yeah explicit animations well are the

2052
02:32:44,160 --> 02:32:46,260
opposite of uh implicit animation so

2053
02:32:46,260 --> 02:32:48,420
implemented animations have been easy

2054
02:32:48,420 --> 02:32:50,700
and low code efforts so explicit

2055
02:32:50,700 --> 02:32:53,100
animations are not easy and not local

2056
02:32:53,100 --> 02:32:55,380
code effort but uh that's reason enough

2057
02:32:55,380 --> 02:32:57,240
to have a look at them

2058
02:32:57,240 --> 02:32:57,960
um

2059
02:32:57,960 --> 02:32:59,700
they're used for

2060
02:32:59,700 --> 02:33:02,880
um yeah very high

2061
02:33:02,880 --> 02:33:05,580
you have a very complex animations which

2062
02:33:05,580 --> 02:33:07,920
cannot be handled by um

2063
02:33:07,920 --> 02:33:10,620
Yeah by implicit animations

2064
02:33:10,620 --> 02:33:13,020
um yeah

2065
02:33:13,020 --> 02:33:16,080
so what's our recipe uh there's someone

2066
02:33:16,080 --> 02:33:18,240
from a kitchen that's how you cook an

2067
02:33:18,240 --> 02:33:20,280
explicit animation

2068
02:33:20,280 --> 02:33:23,580
there's a flutter uh mix in mix-ins are

2069
02:33:23,580 --> 02:33:26,040
part of that it is pretty much an

2070
02:33:26,040 --> 02:33:28,979
abstract class exposing um

2071
02:33:28,979 --> 02:33:32,160
some thingies some some options some

2072
02:33:32,160 --> 02:33:35,220
methods some parameters you can mix in

2073
02:33:35,220 --> 02:33:38,399
into another class and there's a single

2074
02:33:38,399 --> 02:33:41,040
ticker provider State mix in that's a

2075
02:33:41,040 --> 02:33:44,760
mix in providing a ticket provider as it

2076
02:33:44,760 --> 02:33:47,399
says and a ticket provider is required

2077
02:33:47,399 --> 02:33:49,920
for any animation controller which is

2078
02:33:49,920 --> 02:33:52,920
the next thing we need in order to sync

2079
02:33:52,920 --> 02:33:55,800
with the freezing so the rendering of

2080
02:33:55,800 --> 02:33:58,500
our current application because well our

2081
02:33:58,500 --> 02:34:02,819
frames should reap repaint exactly as

2082
02:34:02,819 --> 02:34:06,060
our application repaints so that's why

2083
02:34:06,060 --> 02:34:08,460
you need to synchronize it with the

2084
02:34:08,460 --> 02:34:10,560
platform and

2085
02:34:10,560 --> 02:34:12,600
what you like to do with this animation

2086
02:34:12,600 --> 02:34:14,460
controller we created with the ticket

2087
02:34:14,460 --> 02:34:17,819
provider is you listen on it and every

2088
02:34:17,819 --> 02:34:20,160
single time it changes you set your

2089
02:34:20,160 --> 02:34:22,080
state so it's pretty much a stateful

2090
02:34:22,080 --> 02:34:25,380
widget but with some more stuff with a

2091
02:34:25,380 --> 02:34:27,060
mix in

2092
02:34:27,060 --> 02:34:28,260
um

2093
02:34:28,260 --> 02:34:30,359
yeah that's an example

2094
02:34:30,359 --> 02:34:32,819
um you have we Define an animation

2095
02:34:32,819 --> 02:34:36,840
controller that's by the way deprecated

2096
02:34:36,840 --> 02:34:39,899
Dart code it's just a start

2097
02:34:39,899 --> 02:34:44,460
prior Dart 2.12 that's if you have if

2098
02:34:44,460 --> 02:34:47,280
you wonder it's a bit older but yeah it

2099
02:34:47,280 --> 02:34:48,540
still works

2100
02:34:48,540 --> 02:34:49,260
um

2101
02:34:49,260 --> 02:34:51,240
we Define the controller

2102
02:34:51,240 --> 02:34:53,939
with uh assign something

2103
02:34:53,939 --> 02:34:56,580
you know we have this ticket provider

2104
02:34:56,580 --> 02:34:59,100
State mix in which we can expose via

2105
02:34:59,100 --> 02:35:01,620
this and that's what we synchronize it

2106
02:35:01,620 --> 02:35:04,080
with and later we listen on it and

2107
02:35:04,080 --> 02:35:05,819
perform the

2108
02:35:05,819 --> 02:35:08,760
or execute the method update and there

2109
02:35:08,760 --> 02:35:10,500
we could place anything in we could

2110
02:35:10,500 --> 02:35:13,319
always for example change to a random

2111
02:35:13,319 --> 02:35:16,560
new color if you want people to get very

2112
02:35:16,560 --> 02:35:18,660
tired eyes you could I don't know do

2113
02:35:18,660 --> 02:35:21,000
whatever there expose random colors and

2114
02:35:21,000 --> 02:35:22,979
then we build so it's just a stateful

2115
02:35:22,979 --> 02:35:24,960
widget we build but it is being animated

2116
02:35:24,960 --> 02:35:27,540
once the screen refreshes it's just

2117
02:35:27,540 --> 02:35:28,620
always

2118
02:35:28,620 --> 02:35:32,160
um yeah being rebuilt

2119
02:35:32,160 --> 02:35:35,460
uh that's a bit of a more complex sample

2120
02:35:35,460 --> 02:35:38,280
with some uh

2121
02:35:38,280 --> 02:35:41,700
yeah for the content uh that we also

2122
02:35:41,700 --> 02:35:44,640
tell how long the animation uh would

2123
02:35:44,640 --> 02:35:46,560
take

2124
02:35:46,560 --> 02:35:49,500
um the controller.forward method tells

2125
02:35:49,500 --> 02:35:52,800
it is it should re and again and again

2126
02:35:52,800 --> 02:35:55,380
it should just forward the animation uh

2127
02:35:55,380 --> 02:35:56,580
infinitely

2128
02:35:56,580 --> 02:35:58,920
and a thing which is very important if

2129
02:35:58,920 --> 02:36:01,380
you have an animation ticking because

2130
02:36:01,380 --> 02:36:03,060
the animation triggers is being

2131
02:36:03,060 --> 02:36:05,760
triggered on every single uh rebuild of

2132
02:36:05,760 --> 02:36:07,979
the frame we need to dispose it

2133
02:36:07,979 --> 02:36:09,780
otherwise it will continue retriggering

2134
02:36:09,780 --> 02:36:11,460
rebuilds and wasting our performance

2135
02:36:11,460 --> 02:36:13,979
once it's off the screen or if it's uh

2136
02:36:13,979 --> 02:36:16,740
no longer available that's why uh such

2137
02:36:16,740 --> 02:36:21,619
uh things must be disposed uh yeah

2138
02:36:22,500 --> 02:36:24,720
if this is if you're not interested in

2139
02:36:24,720 --> 02:36:26,700
doing such things and don't want to

2140
02:36:26,700 --> 02:36:28,380
optimize your performance with it you

2141
02:36:28,380 --> 02:36:32,100
can just take an animated Builder uh

2142
02:36:32,100 --> 02:36:34,140
which simplifies that this process you

2143
02:36:34,140 --> 02:36:35,700
just provide a builder for the animated

2144
02:36:35,700 --> 02:36:39,120
Builder and provides a metadata about

2145
02:36:39,120 --> 02:36:42,359
the animation how it should uh work and

2146
02:36:42,359 --> 02:36:44,399
yeah that's pretty easy

2147
02:36:44,399 --> 02:36:45,960
um

2148
02:36:45,960 --> 02:36:49,740
we Define a controller

2149
02:36:49,740 --> 02:36:52,040
we repeated in this case

2150
02:36:52,040 --> 02:36:55,560
and we Define later in the build method

2151
02:36:55,560 --> 02:36:57,660
we Define the animated Builder

2152
02:36:57,660 --> 02:36:58,380
um

2153
02:36:58,380 --> 02:37:00,240
Define a child and now it's becoming

2154
02:37:00,240 --> 02:37:02,640
interesting because and that's a

2155
02:37:02,640 --> 02:37:04,859
interesting thing for performance

2156
02:37:04,859 --> 02:37:07,920
um we statically Define this child it is

2157
02:37:07,920 --> 02:37:10,800
not being rebuilt the child is just

2158
02:37:10,800 --> 02:37:13,319
static it's a static widget it's a

2159
02:37:13,319 --> 02:37:15,300
container having some properties it does

2160
02:37:15,300 --> 02:37:18,180
not change but later on we have a

2161
02:37:18,180 --> 02:37:19,520
builder

2162
02:37:19,520 --> 02:37:22,920
consuming this child so we animate it we

2163
02:37:22,920 --> 02:37:25,080
have static content being animated by

2164
02:37:25,080 --> 02:37:27,840
the surrounding uh animated Builder and

2165
02:37:27,840 --> 02:37:29,520
that's a huge difference of performance

2166
02:37:29,520 --> 02:37:31,319
whether you rebuild the child every

2167
02:37:31,319 --> 02:37:33,000
single time or whether you define it

2168
02:37:33,000 --> 02:37:34,560
once and

2169
02:37:34,560 --> 02:37:37,560
just animate the surrounding and uh that

2170
02:37:37,560 --> 02:37:39,120
you should you should always keep in

2171
02:37:39,120 --> 02:37:41,700
mind this when you do animations keep

2172
02:37:41,700 --> 02:37:44,399
everything you can keep everything in

2173
02:37:44,399 --> 02:37:46,319
the child everything which must not be

2174
02:37:46,319 --> 02:37:48,600
animated in our case we just have the

2175
02:37:48,600 --> 02:37:50,100
transform around it because everything

2176
02:37:50,100 --> 02:37:51,899
apart from the transform is not

2177
02:37:51,899 --> 02:37:55,140
necessary uh to be rebuilt it is once

2178
02:37:55,140 --> 02:37:58,140
created it's uh yeah and we later just

2179
02:37:58,140 --> 02:38:00,000
reuse it down there

2180
02:38:00,000 --> 02:38:01,380
um

2181
02:38:01,380 --> 02:38:03,600
if you want to have easy animations take

2182
02:38:03,600 --> 02:38:06,420
hero animations they are mostly known in

2183
02:38:06,420 --> 02:38:08,520
flutter for from The Floating Action

2184
02:38:08,520 --> 02:38:10,200
button Floating Action button for those

2185
02:38:10,200 --> 02:38:11,520
who are not

2186
02:38:11,520 --> 02:38:14,760
um familiar with ux or UI design it's a

2187
02:38:14,760 --> 02:38:16,859
material design this uh prominent

2188
02:38:16,859 --> 02:38:18,840
pattern and any mail application you

2189
02:38:18,840 --> 02:38:22,260
know plus write an email it's the

2190
02:38:22,260 --> 02:38:24,540
principal action of an application

2191
02:38:24,540 --> 02:38:26,880
um and yeah they are very uh well

2192
02:38:26,880 --> 02:38:30,000
animated and flutter and that's based on

2193
02:38:30,000 --> 02:38:32,280
something called hero animations and

2194
02:38:32,280 --> 02:38:34,080
that's how they work

2195
02:38:34,080 --> 02:38:37,020
um you have flutter nose Okay this hero

2196
02:38:37,020 --> 02:38:39,479
is currently located on

2197
02:38:39,479 --> 02:38:45,600
pixel X pixel Y and yeah once we change

2198
02:38:45,600 --> 02:38:48,840
the route so navigate to a new page it

2199
02:38:48,840 --> 02:38:52,680
checks its side size its position and

2200
02:38:52,680 --> 02:38:56,460
has a curve keeping it on screen while

2201
02:38:56,460 --> 02:38:58,979
performing the transition to the new

2202
02:38:58,979 --> 02:39:01,080
page it

2203
02:39:01,080 --> 02:39:04,859
yeah magically transforms and animates

2204
02:39:04,859 --> 02:39:08,100
into the new widget that's very easy if

2205
02:39:08,100 --> 02:39:09,899
you have static elements on your screen

2206
02:39:09,899 --> 02:39:12,240
for example which should move around on

2207
02:39:12,240 --> 02:39:14,220
a patreon and you are not motivated to

2208
02:39:14,220 --> 02:39:16,920
implement some complicated stuff you can

2209
02:39:16,920 --> 02:39:19,080
use those hero transitions because they

2210
02:39:19,080 --> 02:39:22,800
simplify lots lots of work

2211
02:39:22,800 --> 02:39:24,960
um yeah that's how you easily Define

2212
02:39:24,960 --> 02:39:25,939
them

2213
02:39:25,939 --> 02:39:29,399
Heroes take a tag which can be any

2214
02:39:29,399 --> 02:39:33,000
anything which is comparable and once uh

2215
02:39:33,000 --> 02:39:34,859
yeah you never should you should never

2216
02:39:34,859 --> 02:39:38,040
have two hero attacks on the same route

2217
02:39:38,040 --> 02:39:39,420
because otherwise it does not know okay

2218
02:39:39,420 --> 02:39:41,819
which one of those is the hero route uh

2219
02:39:41,819 --> 02:39:44,420
the hero attack I want to animate

2220
02:39:44,420 --> 02:39:47,819
yeah you define it once and you navigate

2221
02:39:47,819 --> 02:39:50,040
to another page and you reuse this hero

2222
02:39:50,040 --> 02:39:53,040
tag and it's being moved to the new size

2223
02:39:53,040 --> 02:39:55,319
to the new position and so on

2224
02:39:55,319 --> 02:39:56,819
so in this case we would have a

2225
02:39:56,819 --> 02:39:58,560
container

2226
02:39:58,560 --> 02:40:00,899
which is contained somewhere on our

2227
02:40:00,899 --> 02:40:03,140
first page and on the second page it's

2228
02:40:03,140 --> 02:40:06,540
magically becoming part of a card which

2229
02:40:06,540 --> 02:40:09,660
is a widget displaying a

2230
02:40:09,660 --> 02:40:13,200
Friendly Card with a shadow and fancy

2231
02:40:13,200 --> 02:40:14,760
borders

2232
02:40:14,760 --> 02:40:17,580
um yeah and another way of animations is

2233
02:40:17,580 --> 02:40:20,160
the animations package

2234
02:40:20,160 --> 02:40:22,580
um the animation package contains

2235
02:40:22,580 --> 02:40:25,020
pre-built animations for common use

2236
02:40:25,020 --> 02:40:26,340
cases

2237
02:40:26,340 --> 02:40:27,180
um

2238
02:40:27,180 --> 02:40:29,840
features very high quality

2239
02:40:29,840 --> 02:40:33,300
implementations having low impact on the

2240
02:40:33,300 --> 02:40:35,760
performance of your applications

2241
02:40:35,760 --> 02:40:38,040
um yeah and also they cover use cases

2242
02:40:38,040 --> 02:40:40,859
which are usually very bad to implement

2243
02:40:40,859 --> 02:40:42,899
on your own

2244
02:40:42,899 --> 02:40:43,560
um

2245
02:40:43,560 --> 02:40:47,460
they're mostly available for huge and

2246
02:40:47,460 --> 02:40:51,420
complex UI Transitions and compared to

2247
02:40:51,420 --> 02:40:54,300
explicit animations for such edge cases

2248
02:40:54,300 --> 02:40:56,340
and complex things very easy to

2249
02:40:56,340 --> 02:40:57,240
implement

2250
02:40:57,240 --> 02:40:59,760
uh so what kind of animations do we have

2251
02:40:59,760 --> 02:41:02,520
built in there for example those

2252
02:41:02,520 --> 02:41:05,520
container Transformations so the

2253
02:41:05,520 --> 02:41:07,200
corresponding widget exposed by the

2254
02:41:07,200 --> 02:41:08,880
animations library is an open container

2255
02:41:08,880 --> 02:41:12,600
which takes a position

2256
02:41:12,600 --> 02:41:15,779
a close Builder and it's placed

2257
02:41:15,779 --> 02:41:17,040
somewhere on the screen and the close

2258
02:41:17,040 --> 02:41:19,500
Builder is being built once it's closed

2259
02:41:19,500 --> 02:41:22,380
it moreover takes an open Builder which

2260
02:41:22,380 --> 02:41:25,020
is Built Well when once it opens and you

2261
02:41:25,020 --> 02:41:27,840
can thereby create such fancy Floating

2262
02:41:27,840 --> 02:41:29,760
Action Button as you see in the third

2263
02:41:29,760 --> 02:41:31,260
sample

2264
02:41:31,260 --> 02:41:32,100
um

2265
02:41:32,100 --> 02:41:35,460
a growing plus button resulting in an in

2266
02:41:35,460 --> 02:41:37,620
a page creating a new calendar entry I

2267
02:41:37,620 --> 02:41:39,180
mean this is very common use case to

2268
02:41:39,180 --> 02:41:41,640
have things expanding uh

2269
02:41:41,640 --> 02:41:43,680
transforming into other pages and that's

2270
02:41:43,680 --> 02:41:45,600
how you can easily do this it also

2271
02:41:45,600 --> 02:41:47,880
integrates with uh with flattest routing

2272
02:41:47,880 --> 02:41:49,380
so really you would not like to

2273
02:41:49,380 --> 02:41:51,779
implement this on your own so that's a

2274
02:41:51,779 --> 02:41:53,880
typical animation

2275
02:41:53,880 --> 02:41:56,340
um yeah that's what I already mentioned

2276
02:41:56,340 --> 02:41:58,200
that's how you do it you define an open

2277
02:41:58,200 --> 02:42:00,960
and close Builder blah blah blah

2278
02:42:00,960 --> 02:42:03,019
um

2279
02:42:03,479 --> 02:42:06,779
access transitions I don't know if any

2280
02:42:06,779 --> 02:42:09,080
one of you uh

2281
02:42:09,080 --> 02:42:12,960
blatantly use Gmail but anyone who uses

2282
02:42:12,960 --> 02:42:15,540
Gmail usually knows the log inflow you

2283
02:42:15,540 --> 02:42:17,939
have the same page and there is such a

2284
02:42:17,939 --> 02:42:20,520
fluent scrolling transition to the next

2285
02:42:20,520 --> 02:42:22,319
page where you enter the password after

2286
02:42:22,319 --> 02:42:24,120
entering the email address and this is

2287
02:42:24,120 --> 02:42:26,220
something called access transition that

2288
02:42:26,220 --> 02:42:27,720
different type of types of access

2289
02:42:27,720 --> 02:42:30,720
transitions horizontal vertical and uh

2290
02:42:30,720 --> 02:42:33,180
yeah z-axis

2291
02:42:33,180 --> 02:42:34,920
um

2292
02:42:34,920 --> 02:42:37,680
yeah growing that access whatever page

2293
02:42:37,680 --> 02:42:41,040
transitions so it simply takes a widget

2294
02:42:41,040 --> 02:42:43,800
and once it changes it will build this

2295
02:42:43,800 --> 02:42:46,439
friendly animation to indicate that

2296
02:42:46,439 --> 02:42:48,180
there is a flow into a particular

2297
02:42:48,180 --> 02:42:51,180
direction of whatever we are doing

2298
02:42:51,180 --> 02:42:55,080
um here proceed next uh and back it's

2299
02:42:55,080 --> 02:42:57,660
it's a typical use case or here with a

2300
02:42:57,660 --> 02:42:59,700
stepper in example two where you step

2301
02:42:59,700 --> 02:43:03,899
down uh particular steps for example

2302
02:43:03,899 --> 02:43:06,380
instructions for some things for your

2303
02:43:06,380 --> 02:43:09,960
Ikea cupboard you could use it over

2304
02:43:09,960 --> 02:43:11,100
there

2305
02:43:11,100 --> 02:43:12,420
um

2306
02:43:12,420 --> 02:43:14,960
yeah

2307
02:43:15,420 --> 02:43:18,000
there are two types there's one type

2308
02:43:18,000 --> 02:43:20,760
meant for transitions of pages so really

2309
02:43:20,760 --> 02:43:22,680
transitioning from one page to another

2310
02:43:22,680 --> 02:43:25,560
so from a new route and for within a

2311
02:43:25,560 --> 02:43:28,439
route that's just to be known

2312
02:43:28,439 --> 02:43:29,100
um

2313
02:43:29,100 --> 02:43:31,500
yeah and I think that's the last

2314
02:43:31,500 --> 02:43:34,140
animation I I have got for you which is

2315
02:43:34,140 --> 02:43:35,399
also very good and you get of

2316
02:43:35,399 --> 02:43:37,800
performance is animated icons

2317
02:43:37,800 --> 02:43:38,460
um

2318
02:43:38,460 --> 02:43:41,160
you probably know or know any music

2319
02:43:41,160 --> 02:43:44,040
player which has an animated icon if you

2320
02:43:44,040 --> 02:43:45,960
play the play button it transforms into

2321
02:43:45,960 --> 02:43:48,240
a pause button and yeah they have some

2322
02:43:48,240 --> 02:43:50,520
pre-built uh things and they cover many

2323
02:43:50,520 --> 02:43:52,319
common use cases for example thumbs up

2324
02:43:52,319 --> 02:43:55,380
or things like that yeah

2325
02:43:55,380 --> 02:43:57,960
and they are you don't need to do

2326
02:43:57,960 --> 02:44:00,779
anything but

2327
02:44:00,779 --> 02:44:03,420
creating such an easy thing and

2328
02:44:03,420 --> 02:44:05,880
providing a controller that makes it

2329
02:44:05,880 --> 02:44:09,420
yeah very easy to implement them so uh

2330
02:44:09,420 --> 02:44:11,880
it's usually easier than creating uh

2331
02:44:11,880 --> 02:44:14,040
complex animations around static icons

2332
02:44:14,040 --> 02:44:16,560
if there's a predefined animated icon

2333
02:44:16,560 --> 02:44:18,779
um that's the easiest way to implement

2334
02:44:18,779 --> 02:44:19,560
them

2335
02:44:19,560 --> 02:44:22,080
so now

2336
02:44:22,080 --> 02:44:26,460
how does this fancy rendering work

2337
02:44:26,460 --> 02:44:27,899
under the hood

2338
02:44:27,899 --> 02:44:29,939
now we will have a look on how the

2339
02:44:29,939 --> 02:44:33,000
engine works its rendering works we will

2340
02:44:33,000 --> 02:44:36,420
have a look especially on the i o based

2341
02:44:36,420 --> 02:44:38,640
engine not on the web engine because the

2342
02:44:38,640 --> 02:44:40,020
web engine is in some point different

2343
02:44:40,020 --> 02:44:41,580
because there are two implementations so

2344
02:44:41,580 --> 02:44:46,020
I won't cover it as of now yeah

2345
02:44:46,020 --> 02:44:48,000
we remember that this is how it how

2346
02:44:48,000 --> 02:44:49,439
flutter looks like we have the framework

2347
02:44:49,439 --> 02:44:51,899
and the underlying engine

2348
02:44:51,899 --> 02:44:54,359
um so how does it render

2349
02:44:54,359 --> 02:44:56,580
I found a very

2350
02:44:56,580 --> 02:44:59,399
fancy graphic displaying base we have

2351
02:44:59,399 --> 02:45:01,920
the GPU of our device

2352
02:45:01,920 --> 02:45:03,779
um which does well

2353
02:45:03,779 --> 02:45:06,540
it renders and it renders with a

2354
02:45:06,540 --> 02:45:08,779
particular amount of frames per second

2355
02:45:08,779 --> 02:45:11,100
caused limited by the performance or

2356
02:45:11,100 --> 02:45:12,359
whatsoever

2357
02:45:12,359 --> 02:45:15,000
um yeah we have we get this those frames

2358
02:45:15,000 --> 02:45:16,560
per seconds

2359
02:45:16,560 --> 02:45:19,140
um transformed into a vsync telling

2360
02:45:19,140 --> 02:45:22,979
flutter okay now render now render new

2361
02:45:22,979 --> 02:45:25,200
frame new frame new frame and that's

2362
02:45:25,200 --> 02:45:27,960
what our vsync does and that's what we

2363
02:45:27,960 --> 02:45:30,420
already saw with this uh ticket provider

2364
02:45:30,420 --> 02:45:32,520
State mixed in

2365
02:45:32,520 --> 02:45:34,319
um because this sticker provider State

2366
02:45:34,319 --> 02:45:37,740
mixed in uses the vsync provided by the

2367
02:45:37,740 --> 02:45:40,979
GPU and triggers the next frame of our

2368
02:45:40,979 --> 02:45:43,740
animation and then it's up to you to

2369
02:45:43,740 --> 02:45:45,720
consume this uh

2370
02:45:45,720 --> 02:45:48,240
information that there's a new frame to

2371
02:45:48,240 --> 02:45:51,060
be rebuilt and then well we just built

2372
02:45:51,060 --> 02:45:53,640
the new widget flattery does the new

2373
02:45:53,640 --> 02:45:55,979
layout checks where the uh change

2374
02:45:55,979 --> 02:45:59,880
widgets come from and it paints and

2375
02:45:59,880 --> 02:46:02,880
it repeats up on the next uh recent

2376
02:46:02,880 --> 02:46:04,859
token and now there we have the

2377
02:46:04,859 --> 02:46:06,240
different uh difference between

2378
02:46:06,240 --> 02:46:08,580
stateless and stateful widgets again

2379
02:46:08,580 --> 02:46:13,819
because when have when looking at um

2380
02:46:13,939 --> 02:46:16,560
stateless widgets they just have the

2381
02:46:16,560 --> 02:46:19,220
Constructor and they're being built

2382
02:46:19,220 --> 02:46:22,380
uh and they may be used again with

2383
02:46:22,380 --> 02:46:23,939
another

2384
02:46:23,939 --> 02:46:24,960
um

2385
02:46:24,960 --> 02:46:26,880
build context so if our parenting

2386
02:46:26,880 --> 02:46:28,800
widgets let's stick at the example from

2387
02:46:28,800 --> 02:46:30,779
prayer if we have a list View and many

2388
02:46:30,779 --> 02:46:35,460
items and we decide uh to strike uh one

2389
02:46:35,460 --> 02:46:37,200
item of the list and build a new thing

2390
02:46:37,200 --> 02:46:40,439
uh they are if their content is being

2391
02:46:40,439 --> 02:46:42,779
constant they are not being rebuilt uh

2392
02:46:42,779 --> 02:46:45,180
yeah they're just and otherwise if the

2393
02:46:45,180 --> 02:46:47,279
content of this item is being changed

2394
02:46:47,279 --> 02:46:49,800
for example if uh if we have a nameless

2395
02:46:49,800 --> 02:46:52,380
and the first name is uh changed well

2396
02:46:52,380 --> 02:46:54,960
then this widget would obviously

2397
02:46:54,960 --> 02:46:58,380
um would obviously rebuild this is

2398
02:46:58,380 --> 02:47:01,200
different at State full widget they just

2399
02:47:01,200 --> 02:47:02,460
want

2400
02:47:02,460 --> 02:47:04,020
uh

2401
02:47:04,020 --> 02:47:06,240
being well they are created once and

2402
02:47:06,240 --> 02:47:07,800
being uh

2403
02:47:07,800 --> 02:47:10,380
you must Implement them handling changes

2404
02:47:10,380 --> 02:47:12,660
of the parenting data uh so if we stick

2405
02:47:12,660 --> 02:47:14,880
at the example with the name if we have

2406
02:47:14,880 --> 02:47:17,580
the first item in the list

2407
02:47:17,580 --> 02:47:20,460
and it's at the beginning it's name a

2408
02:47:20,460 --> 02:47:22,500
and this stateful widgets for example

2409
02:47:22,500 --> 02:47:24,600
just this place is the name and it would

2410
02:47:24,600 --> 02:47:27,060
later change this stateful widget would

2411
02:47:27,060 --> 02:47:29,760
not update so it would keep name a even

2412
02:47:29,760 --> 02:47:32,040
though it's already named B

2413
02:47:32,040 --> 02:47:34,560
um yeah and that has a huge performance

2414
02:47:34,560 --> 02:47:38,160
impact because uh stateful widgets can

2415
02:47:38,160 --> 02:47:40,979
filter data or changes of the parenting

2416
02:47:40,979 --> 02:47:43,740
widget whether they are relevant to be

2417
02:47:43,740 --> 02:47:45,720
rebuilt and in case they are not

2418
02:47:45,720 --> 02:47:47,580
relevant they can just skip the rebuild

2419
02:47:47,580 --> 02:47:49,859
and that's the default setting they are

2420
02:47:49,859 --> 02:47:51,359
not being rebuilt if the parenting

2421
02:47:51,359 --> 02:47:54,420
widget changes unless you explicitly

2422
02:47:54,420 --> 02:47:57,060
implement it we already had it here as a

2423
02:47:57,060 --> 02:47:59,760
flowchart again it is created then we

2424
02:47:59,760 --> 02:48:01,319
call the inner state where the state is

2425
02:48:01,319 --> 02:48:03,899
being initialized then

2426
02:48:03,899 --> 02:48:06,060
the widget is being built the first time

2427
02:48:06,060 --> 02:48:10,500
and yeah let's assume the parent changed

2428
02:48:10,500 --> 02:48:14,420
and then we have this did update con

2429
02:48:14,420 --> 02:48:18,180
config or uh did update widget where we

2430
02:48:18,180 --> 02:48:19,140
know

2431
02:48:19,140 --> 02:48:19,740
um

2432
02:48:19,740 --> 02:48:21,720
whether our parenting widget changes

2433
02:48:21,720 --> 02:48:24,060
change that we can check whether we want

2434
02:48:24,060 --> 02:48:26,580
to rebuild in case we want rebuild

2435
02:48:26,580 --> 02:48:28,319
we can trigger the set state which

2436
02:48:28,319 --> 02:48:31,380
causes a rebuilding otherwise a stateful

2437
02:48:31,380 --> 02:48:33,540
widget is not rebuilt which has as

2438
02:48:33,540 --> 02:48:35,700
mentioned many times before a huge

2439
02:48:35,700 --> 02:48:38,220
impact on on performance if you reduce

2440
02:48:38,220 --> 02:48:40,920
the amount of stuff being rebuilt to the

2441
02:48:40,920 --> 02:48:43,020
minimum you can have perfectly

2442
02:48:43,020 --> 02:48:45,779
performance applications and of course

2443
02:48:45,779 --> 02:48:49,319
well we Define stuff we probably listen

2444
02:48:49,319 --> 02:48:51,479
to streams or whatsoever then we all

2445
02:48:51,479 --> 02:48:54,240
obviously need to dip dispose stuff in

2446
02:48:54,240 --> 02:48:57,120
order to uh yeah don't keep garbage on

2447
02:48:57,120 --> 02:48:58,740
screen

2448
02:48:58,740 --> 02:48:59,819
um

2449
02:48:59,819 --> 02:49:01,080
yeah

2450
02:49:01,080 --> 02:49:03,420
um people made a fancy Benchmark I was

2451
02:49:03,420 --> 02:49:05,580
talking a lot about in animation so

2452
02:49:05,580 --> 02:49:08,819
let's compare animations uh between uh

2453
02:49:08,819 --> 02:49:11,399
flutter and I think I chose react native

2454
02:49:11,399 --> 02:49:13,740
to compare with because react native is

2455
02:49:13,740 --> 02:49:15,660
the framework of the software

2456
02:49:15,660 --> 02:49:18,420
development kit which is usually

2457
02:49:18,420 --> 02:49:20,580
compared to flutter because it covers

2458
02:49:20,580 --> 02:49:23,100
different similar use cases you have one

2459
02:49:23,100 --> 02:49:25,819
code base you have also this widget-like

2460
02:49:25,819 --> 02:49:30,920
structure and it runs on mobile devices

2461
02:49:30,920 --> 02:49:34,020
yeah there we see the first thing is

2462
02:49:34,020 --> 02:49:37,439
basic scrolling if you have a list view

2463
02:49:37,439 --> 02:49:38,040
um

2464
02:49:38,040 --> 02:49:40,979
and scroll down up programmatically

2465
02:49:40,979 --> 02:49:44,340
um flutter renders well it is it was

2466
02:49:44,340 --> 02:49:46,620
tested on the device having 60 frames

2467
02:49:46,620 --> 02:49:49,020
per second so maximum is 60 frames per

2468
02:49:49,020 --> 02:49:51,000
second and flatter reaches at uh

2469
02:49:51,000 --> 02:49:52,920
rendering at 60 frames per second

2470
02:49:52,920 --> 02:49:55,620
exactly the same thing and uh react

2471
02:49:55,620 --> 02:49:59,279
natives is almost uh also almost at 60

2472
02:49:59,279 --> 02:50:01,260
frames per second but it consumes more

2473
02:50:01,260 --> 02:50:03,660
RAM and has a much higher CPU load

2474
02:50:03,660 --> 02:50:06,840
because JavaScript is not that optimized

2475
02:50:06,840 --> 02:50:10,080
for uh Native execution

2476
02:50:10,080 --> 02:50:10,800
um

2477
02:50:10,800 --> 02:50:13,800
yeah another thing is many applications

2478
02:50:13,800 --> 02:50:16,439
contain external libraries for animation

2479
02:50:16,439 --> 02:50:19,740
for example to have complex animations

2480
02:50:19,740 --> 02:50:23,540
known uh created in external

2481
02:50:23,540 --> 02:50:27,180
proprietary professional software there

2482
02:50:27,180 --> 02:50:29,180
we have runtimes for example

2483
02:50:29,180 --> 02:50:32,100
and I was realizing flutter is very bad

2484
02:50:32,100 --> 02:50:35,340
at running proprietary animations where

2485
02:50:35,340 --> 02:50:37,100
we've reached at 9 frames per second

2486
02:50:37,100 --> 02:50:39,600
while react native with the

2487
02:50:39,600 --> 02:50:42,000
corresponding Library reaches at more

2488
02:50:42,000 --> 02:50:44,520
than three times the animation but if we

2489
02:50:44,520 --> 02:50:46,439
implementation implement the animation

2490
02:50:46,439 --> 02:50:50,060
which is it was a yeah complex animation

2491
02:50:50,060 --> 02:50:54,060
rotating I think 200 items and resizing

2492
02:50:54,060 --> 02:50:56,700
zooming retaining 200 items on on screen

2493
02:50:56,700 --> 02:51:00,120
which were gifs too so also

2494
02:51:00,120 --> 02:51:03,180
having a huge random impact uh Native uh

2495
02:51:03,180 --> 02:51:05,279
animations in flutter are reached at

2496
02:51:05,279 --> 02:51:09,540
almost 20 frames per second and a while

2497
02:51:09,540 --> 02:51:10,800
um

2498
02:51:10,800 --> 02:51:12,420
exactly the same implementation to

2499
02:51:12,420 --> 02:51:14,700
unreact Native just reached at seven

2500
02:51:14,700 --> 02:51:16,859
frames per second which shows to me that

2501
02:51:16,859 --> 02:51:20,700
flatter is very good at management of

2502
02:51:20,700 --> 02:51:23,040
the of at State Management and is very

2503
02:51:23,040 --> 02:51:26,279
very good and effective uh at rendering

2504
02:51:26,279 --> 02:51:28,319
and I can just recommend you have a look

2505
02:51:28,319 --> 02:51:29,220
at it

2506
02:51:29,220 --> 02:51:32,040
as mentioned dotpad.dev if you just want

2507
02:51:32,040 --> 02:51:34,740
to play around with it or feel free to

2508
02:51:34,740 --> 02:51:37,620
ask me for the question this is uh the

2509
02:51:37,620 --> 02:51:41,359
end of my talk as far as I know

2510
02:51:42,630 --> 02:51:45,990
[Applause]

2511
02:51:50,819 --> 02:51:54,319
does anyone have questions

2512
02:51:55,439 --> 02:51:57,979
yes

2513
02:52:02,040 --> 02:52:04,260
and thanks for the nice talk

2514
02:52:04,260 --> 02:52:06,240
um so flutter can be used on many

2515
02:52:06,240 --> 02:52:07,680
different platforms but of course

2516
02:52:07,680 --> 02:52:10,200
there's different form factors maybe

2517
02:52:10,200 --> 02:52:12,840
slightly different environments so where

2518
02:52:12,840 --> 02:52:16,500
do you see like the edge cases where you

2519
02:52:16,500 --> 02:52:19,319
can't just use a desktop app on the

2520
02:52:19,319 --> 02:52:20,880
mobile platform is there some things

2521
02:52:20,880 --> 02:52:23,160
where you say it's absolutely not

2522
02:52:23,160 --> 02:52:26,700
possible to do this on mobile and also

2523
02:52:26,700 --> 02:52:29,340
on desktop at the same time where are

2524
02:52:29,340 --> 02:52:31,560
the edge cases

2525
02:52:31,560 --> 02:52:32,580
um well

2526
02:52:32,580 --> 02:52:35,760
flutter itself first provides uh lots of

2527
02:52:35,760 --> 02:52:37,920
stuff to create responsive layout so I

2528
02:52:37,920 --> 02:52:39,600
think in real of the form factor it's

2529
02:52:39,600 --> 02:52:42,300
not the question but there are cases uh

2530
02:52:42,300 --> 02:52:44,040
which are which flutter is just not

2531
02:52:44,040 --> 02:52:45,960
meant for it's everything

2532
02:52:45,960 --> 02:52:48,779
which touches 3D stuff which touches

2533
02:52:48,779 --> 02:52:51,000
game development flutter is not meant

2534
02:52:51,000 --> 02:52:53,340
for this flutter is very performant at

2535
02:52:53,340 --> 02:52:56,700
layouting rendering stuff which is you

2536
02:52:56,700 --> 02:52:58,620
know a normal application but everything

2537
02:52:58,620 --> 02:53:02,160
which is about 3D rendering or um

2538
02:53:02,160 --> 02:53:04,740
Advanced Graphics stuff which is not

2539
02:53:04,740 --> 02:53:06,840
rendering animations flutter is just not

2540
02:53:06,840 --> 02:53:10,880
meant for did this answer your question

2541
02:53:11,939 --> 02:53:14,899
any other questions

2542
02:53:15,720 --> 02:53:19,960
no thank you for the talk about flutter

2543
02:53:19,960 --> 02:53:25,519
[Applause]

2544
03:04:00,120 --> 03:04:03,120
foreign

2545
03:04:03,779 --> 03:04:07,279
okay a little hard for my

2546
03:04:12,660 --> 03:04:14,660
um

2547
03:09:04,939 --> 03:09:07,800
let's give a welcome to question Clausen

2548
03:09:07,800 --> 03:09:11,260
with Tesla's software quality

2549
03:09:11,260 --> 03:09:14,430
[Applause]

2550
03:09:14,640 --> 03:09:16,500
thank you very much is that yeah

2551
03:09:16,500 --> 03:09:20,100
everything's on good uh hello uh just a

2552
03:09:20,100 --> 03:09:21,720
quick uh disclaimer this is going to be

2553
03:09:21,720 --> 03:09:23,460
a very code heavy talk but I guess here

2554
03:09:23,460 --> 03:09:25,920
it's not really really an issue

2555
03:09:25,920 --> 03:09:28,380
um I I sometimes do talk about more soft

2556
03:09:28,380 --> 03:09:30,239
things that teamwork and stuff like that

2557
03:09:30,239 --> 03:09:32,520
but today is going to be just very code

2558
03:09:32,520 --> 03:09:34,020
heavy

2559
03:09:34,020 --> 03:09:36,420
um my name is Christian I come from a

2560
03:09:36,420 --> 03:09:38,819
company called Africa and I work as a

2561
03:09:38,819 --> 03:09:41,220
technical technical agile coach and not

2562
03:09:41,220 --> 03:09:42,600
a lot of people know what that is so I

2563
03:09:42,600 --> 03:09:44,040
usually start by just breaking it down

2564
03:09:44,040 --> 03:09:46,020
also because it's very different from

2565
03:09:46,020 --> 03:09:47,880
from the title that's become pretty

2566
03:09:47,880 --> 03:09:50,640
widely used of just agile coach the

2567
03:09:50,640 --> 03:09:51,899
technical part is actually very

2568
03:09:51,899 --> 03:09:53,640
important so

2569
03:09:53,640 --> 03:09:55,260
um I'm called a coach because I like

2570
03:09:55,260 --> 03:09:57,120
working with people both individually

2571
03:09:57,120 --> 03:10:01,319
and as teams uh agile obviously this is

2572
03:10:01,319 --> 03:10:02,640
very hard to see but it's the picture

2573
03:10:02,640 --> 03:10:05,399
from the agile Manifesto website I like

2574
03:10:05,399 --> 03:10:07,260
the agile Manifesto and I especially

2575
03:10:07,260 --> 03:10:09,840
like the the principle that says we

2576
03:10:09,840 --> 03:10:11,160
should have continuous attention to

2577
03:10:11,160 --> 03:10:13,680
technical Excellence so I go and talk to

2578
03:10:13,680 --> 03:10:15,479
different organizations and teams about

2579
03:10:15,479 --> 03:10:17,580
how to do test automation clean code

2580
03:10:17,580 --> 03:10:19,260
pair programming software architecture

2581
03:10:19,260 --> 03:10:21,120
branding strategy all of these very

2582
03:10:21,120 --> 03:10:23,760
heavy technical practices and very close

2583
03:10:23,760 --> 03:10:26,220
to the code I'm very developer heavy

2584
03:10:26,220 --> 03:10:28,680
and now you might be thinking if I'm

2585
03:10:28,680 --> 03:10:30,420
teaching test automation why is the talk

2586
03:10:30,420 --> 03:10:34,020
called testless and the thing is

2587
03:10:34,020 --> 03:10:36,060
I started my testing Journey when I was

2588
03:10:36,060 --> 03:10:37,620
at University right I learned about

2589
03:10:37,620 --> 03:10:39,960
testing and I was like this is going to

2590
03:10:39,960 --> 03:10:42,300
be great right I loved it uh not only

2591
03:10:42,300 --> 03:10:44,220
because there are like hundreds of ways

2592
03:10:44,220 --> 03:10:46,500
to make CDD into like a drinking game

2593
03:10:46,500 --> 03:10:48,899
but also because I thought this is

2594
03:10:48,899 --> 03:10:51,600
awesome I'll never have another bug

2595
03:10:51,600 --> 03:10:53,819
which was like it's a huge deal right

2596
03:10:53,819 --> 03:10:55,200
I'd already been coding for a long time

2597
03:10:55,200 --> 03:10:56,819
and I've always been searching for this

2598
03:10:56,819 --> 03:10:59,580
aesthetically perfect code like a code

2599
03:10:59,580 --> 03:11:01,560
that doesn't have any errors at all

2600
03:11:01,560 --> 03:11:03,960
but spoiler alert um that's not quite

2601
03:11:03,960 --> 03:11:05,279
how it went

2602
03:11:05,279 --> 03:11:07,560
um in fact it very quickly became a

2603
03:11:07,560 --> 03:11:09,000
little bit difficult for me to work with

2604
03:11:09,000 --> 03:11:10,560
testing the first thing I ran into was

2605
03:11:10,560 --> 03:11:12,840
how do I actually test a GUI like that's

2606
03:11:12,840 --> 03:11:14,220
not obvious how you can do something

2607
03:11:14,220 --> 03:11:15,840
like that or something that's highly

2608
03:11:15,840 --> 03:11:17,399
integrated like how do we test complex

2609
03:11:17,399 --> 03:11:19,979
systems uh on top of the fact that it

2610
03:11:19,979 --> 03:11:21,479
was very hard to actually do it right

2611
03:11:21,479 --> 03:11:24,239
it's also very easy to get it wrong so

2612
03:11:24,239 --> 03:11:26,819
uh I I've there are three main

2613
03:11:26,819 --> 03:11:29,160
categories that I see tests get wrong

2614
03:11:29,160 --> 03:11:30,720
all the time like this one for instance

2615
03:11:30,720 --> 03:11:32,220
doesn't test anything because if the

2616
03:11:32,220 --> 03:11:33,779
inputs are equal obviously the output is

2617
03:11:33,779 --> 03:11:36,060
going to be equal so that's nothing here

2618
03:11:36,060 --> 03:11:37,920
we have some we have something testing

2619
03:11:37,920 --> 03:11:39,479
something that's actually not coded by

2620
03:11:39,479 --> 03:11:41,100
us there's a hash map or something like

2621
03:11:41,100 --> 03:11:42,840
we don't it's a third-party thing that

2622
03:11:42,840 --> 03:11:45,000
we go we don't have control over

2623
03:11:45,000 --> 03:11:46,560
um and the final category is when we

2624
03:11:46,560 --> 03:11:48,120
test something that's essentially random

2625
03:11:48,120 --> 03:11:50,040
whether it will pass or not in this case

2626
03:11:50,040 --> 03:11:51,779
inputting something into a database and

2627
03:11:51,779 --> 03:11:53,460
then seeing that the created on date is

2628
03:11:53,460 --> 03:11:55,920
today and I literally had this at in

2629
03:11:55,920 --> 03:11:57,540
production at one of one of the

2630
03:11:57,540 --> 03:11:59,880
customers I worked with where it started

2631
03:11:59,880 --> 03:12:02,520
failing at midnight and then it was

2632
03:12:02,520 --> 03:12:03,899
builts and alarms and everybody should

2633
03:12:03,899 --> 03:12:06,000
wake up and something was wrong and it

2634
03:12:06,000 --> 03:12:07,739
turned out it used to run a little bit

2635
03:12:07,739 --> 03:12:09,779
before midnight so that then it was

2636
03:12:09,779 --> 03:12:11,819
created on the same day but because we

2637
03:12:11,819 --> 03:12:14,160
just crossed midnight it failed that one

2638
03:12:14,160 --> 03:12:15,600
time so it was basically random whether

2639
03:12:15,600 --> 03:12:17,520
it would test or not or at least it was

2640
03:12:17,520 --> 03:12:19,979
very dependent on their surroundings

2641
03:12:19,979 --> 03:12:21,779
um the testing Foundation was further

2642
03:12:21,779 --> 03:12:23,700
shaken when I learned that jagster had

2643
03:12:23,700 --> 03:12:25,620
this wonderful quote where he says tests

2644
03:12:25,620 --> 03:12:27,420
can only prove the presence of bugs not

2645
03:12:27,420 --> 03:12:29,399
their absence and I wasn't looking to

2646
03:12:29,399 --> 03:12:30,840
find out if it had books I know my code

2647
03:12:30,840 --> 03:12:32,819
has bugs I wanted to know it didn't have

2648
03:12:32,819 --> 03:12:35,819
any bugs right that's what I'm going for

2649
03:12:35,819 --> 03:12:37,680
um sticking with it I I eventually hit

2650
03:12:37,680 --> 03:12:40,020
the industry uh and I was like okay here

2651
03:12:40,020 --> 03:12:42,600
must be where the the White Castle of

2652
03:12:42,600 --> 03:12:45,239
testing us but uh I was pretty much the

2653
03:12:45,239 --> 03:12:47,220
only person at that party like nobody

2654
03:12:47,220 --> 03:12:48,540
was doing testing and I couldn't

2655
03:12:48,540 --> 03:12:49,920
understand why

2656
03:12:49,920 --> 03:12:52,500
and so um now that I've worked a lot in

2657
03:12:52,500 --> 03:12:53,760
the industry and with a lot of different

2658
03:12:53,760 --> 03:12:55,319
companies I found out that the primary

2659
03:12:55,319 --> 03:12:57,060
reason I see for people not doing

2660
03:12:57,060 --> 03:12:59,640
testing is that it requires uh that we

2661
03:12:59,640 --> 03:13:01,680
have a clean code base but in order to

2662
03:13:01,680 --> 03:13:03,660
get a clean code base we need testing

2663
03:13:03,660 --> 03:13:05,700
and then we're sort of stuck right and

2664
03:13:05,700 --> 03:13:08,040
it's an infinite Loop

2665
03:13:08,040 --> 03:13:10,080
um one way to say all of this or to sum

2666
03:13:10,080 --> 03:13:12,000
it up is to say that testing is like an

2667
03:13:12,000 --> 03:13:14,040
approximative approach it can you can

2668
03:13:14,040 --> 03:13:15,600
get infinitely good at it it can get

2669
03:13:15,600 --> 03:13:17,160
closer and closer to telling you what

2670
03:13:17,160 --> 03:13:18,600
you want to know but you will never be

2671
03:13:18,600 --> 03:13:20,420
exact right it'll never be a photograph

2672
03:13:20,420 --> 03:13:23,760
and uh that some people like that I'm

2673
03:13:23,760 --> 03:13:25,739
more of an exact kind of person I like

2674
03:13:25,739 --> 03:13:27,899
having a real result with two lines

2675
03:13:27,899 --> 03:13:30,300
under it and then I'm done

2676
03:13:30,300 --> 03:13:32,460
um and so I started thinking well if

2677
03:13:32,460 --> 03:13:34,140
testing has all of these all of these

2678
03:13:34,140 --> 03:13:35,580
problems like it's difficult to master

2679
03:13:35,580 --> 03:13:37,500
it's not easy to get wrong we can't

2680
03:13:37,500 --> 03:13:38,819
prove that it's correct no one's doing

2681
03:13:38,819 --> 03:13:40,680
it and requires a clean code base why

2682
03:13:40,680 --> 03:13:42,600
are we talking about it at all why why

2683
03:13:42,600 --> 03:13:45,180
does everybody know what testing is and

2684
03:13:45,180 --> 03:13:46,620
it's it's primarily because it's

2685
03:13:46,620 --> 03:13:48,359
endorsed by some really really smart

2686
03:13:48,359 --> 03:13:50,220
people like Quebec and Robert C Martin

2687
03:13:50,220 --> 03:13:52,439
and Martin Fowler in fact where I work

2688
03:13:52,439 --> 03:13:54,000
we have a saying you don't want to

2689
03:13:54,000 --> 03:13:55,680
disagree with Martin Fowler because he's

2690
03:13:55,680 --> 03:13:57,720
unlikely to be wrong

2691
03:13:57,720 --> 03:13:59,819
um and so we generally follow that but

2692
03:13:59,819 --> 03:14:01,380
in this case I started thinking about it

2693
03:14:01,380 --> 03:14:03,600
and I was like well if a lot of smart

2694
03:14:03,600 --> 03:14:06,600
people succeed using some method we

2695
03:14:06,600 --> 03:14:08,100
can't actually really say anything about

2696
03:14:08,100 --> 03:14:09,600
that method they might just be smart

2697
03:14:09,600 --> 03:14:11,580
enough to make it work sort of it's in a

2698
03:14:11,580 --> 03:14:13,380
similar vein if a lot of novices get

2699
03:14:13,380 --> 03:14:15,300
something wrong it's like it could just

2700
03:14:15,300 --> 03:14:16,920
be because of inexperience we can't

2701
03:14:16,920 --> 03:14:18,779
really say anything where the

2702
03:14:18,779 --> 03:14:20,520
interesting thing happens is if smart

2703
03:14:20,520 --> 03:14:22,800
people tend to fail at something and if

2704
03:14:22,800 --> 03:14:24,720
novices tend to succeed at something

2705
03:14:24,720 --> 03:14:25,979
that's where we can actually say

2706
03:14:25,979 --> 03:14:28,080
something about the method and of course

2707
03:14:28,080 --> 03:14:29,520
we need to take into account like

2708
03:14:29,520 --> 03:14:31,560
statistical fluctuation we need a lot of

2709
03:14:31,560 --> 03:14:33,479
smart people and a lot of novices even a

2710
03:14:33,479 --> 03:14:35,100
broken clock is what is right twice a

2711
03:14:35,100 --> 03:14:36,720
day

2712
03:14:36,720 --> 03:14:39,239
um I've seen a lot of smart people not

2713
03:14:39,239 --> 03:14:41,220
be good at testing or not have testing

2714
03:14:41,220 --> 03:14:43,020
work for them and I've never seen a

2715
03:14:43,020 --> 03:14:44,819
novice just succeed out of the gate with

2716
03:14:44,819 --> 03:14:46,979
testing so that tells me there might be

2717
03:14:46,979 --> 03:14:49,319
something wrong with the method uh this

2718
03:14:49,319 --> 03:14:50,939
same argument also applies to scrum by

2719
03:14:50,939 --> 03:14:52,800
the way if any of you know that

2720
03:14:52,800 --> 03:14:55,260
so it's like okay so then maybe testing

2721
03:14:55,260 --> 03:14:56,460
isn't the thing

2722
03:14:56,460 --> 03:14:57,899
um so maybe we need something else

2723
03:14:57,899 --> 03:14:59,880
instead to do to do the job of it and

2724
03:14:59,880 --> 03:15:01,380
before we can start searching for it I

2725
03:15:01,380 --> 03:15:02,580
wanted to figure out what I'm actually

2726
03:15:02,580 --> 03:15:04,920
looking for I'm looking for quality and

2727
03:15:04,920 --> 03:15:06,720
quality typically comes in three

2728
03:15:06,720 --> 03:15:08,460
categories at least in the places that I

2729
03:15:08,460 --> 03:15:10,979
talk about it it can be fast it can be

2730
03:15:10,979 --> 03:15:13,080
secure and it can be correct and correct

2731
03:15:13,080 --> 03:15:14,700
here means doing what the programmer

2732
03:15:14,700 --> 03:15:17,939
intended and for me so first of all

2733
03:15:17,939 --> 03:15:20,819
security is also an approximative method

2734
03:15:20,819 --> 03:15:22,380
it's like you can get better and better

2735
03:15:22,380 --> 03:15:24,660
but then some the the attackers also get

2736
03:15:24,660 --> 03:15:26,399
better so it's kind of a race to to the

2737
03:15:26,399 --> 03:15:27,540
top

2738
03:15:27,540 --> 03:15:30,239
um also speed is typically not important

2739
03:15:30,239 --> 03:15:32,399
in the context that I that I talk about

2740
03:15:32,399 --> 03:15:34,260
it's not at least as important as

2741
03:15:34,260 --> 03:15:35,819
correctness because I don't care how

2742
03:15:35,819 --> 03:15:38,460
fast you can give me a wrong result I I

2743
03:15:38,460 --> 03:15:40,319
want the right result

2744
03:15:40,319 --> 03:15:42,479
um and there's also some research

2745
03:15:42,479 --> 03:15:44,220
showing that correct code or clean code

2746
03:15:44,220 --> 03:15:46,920
basis are generally more secure than

2747
03:15:46,920 --> 03:15:49,560
them than on unclean code bases so

2748
03:15:49,560 --> 03:15:51,000
correctness is the thing I'm going to

2749
03:15:51,000 --> 03:15:52,800
talk about and synonymize with quality

2750
03:15:52,800 --> 03:15:55,319
in this talk uh then if we want to

2751
03:15:55,319 --> 03:15:56,819
eliminate all the errors and do what the

2752
03:15:56,819 --> 03:15:58,500
program actually intended we also need

2753
03:15:58,500 --> 03:16:00,000
to categorize what are the types of

2754
03:16:00,000 --> 03:16:02,100
Errors we want to avoid and there are

2755
03:16:02,100 --> 03:16:03,239
also three

2756
03:16:03,239 --> 03:16:05,279
um there's the uh or three we could go

2757
03:16:05,279 --> 03:16:07,080
for the first one is programming errors

2758
03:16:07,080 --> 03:16:08,640
so when that's something like a null

2759
03:16:08,640 --> 03:16:10,319
pointer exception or array index out of

2760
03:16:10,319 --> 03:16:12,479
bound something like that it could also

2761
03:16:12,479 --> 03:16:14,819
be infrastructure errors where a file is

2762
03:16:14,819 --> 03:16:16,080
missing or something around the code

2763
03:16:16,080 --> 03:16:18,479
isn't good a database is replying slowly

2764
03:16:18,479 --> 03:16:19,920
or something like that and it can be

2765
03:16:19,920 --> 03:16:21,960
delivery errors those are like the

2766
03:16:21,960 --> 03:16:23,160
customer doesn't get what they actually

2767
03:16:23,160 --> 03:16:24,960
expected or what they wanted to get at

2768
03:16:24,960 --> 03:16:27,600
least uh typically the third category is

2769
03:16:27,600 --> 03:16:29,819
solved by in a static environment by

2770
03:16:29,819 --> 03:16:31,080
something like waterfall and in a

2771
03:16:31,080 --> 03:16:32,340
dynamic environment by something like

2772
03:16:32,340 --> 03:16:33,899
agile

2773
03:16:33,899 --> 03:16:36,540
um I know basically nothing about the

2774
03:16:36,540 --> 03:16:38,460
middle category so I'm not very good

2775
03:16:38,460 --> 03:16:40,620
with databases or with the connections

2776
03:16:40,620 --> 03:16:43,500
and all of that networking stuff but I'm

2777
03:16:43,500 --> 03:16:45,000
pretty good at programming so that's all

2778
03:16:45,000 --> 03:16:46,680
that's the subcategory of quality that

2779
03:16:46,680 --> 03:16:48,540
I'm going to focus on how we can

2780
03:16:48,540 --> 03:16:49,859
actually improve that

2781
03:16:49,859 --> 03:16:52,260
how's the speed am I talking quick slow

2782
03:16:52,260 --> 03:16:54,779
good good okay

2783
03:16:54,779 --> 03:16:57,239
cool before we get into the the real

2784
03:16:57,239 --> 03:16:58,800
weeds I just want to define a couple of

2785
03:16:58,800 --> 03:17:00,359
terms that I use a lot but it's not

2786
03:17:00,359 --> 03:17:02,640
necessarily common knowledge I guess

2787
03:17:02,640 --> 03:17:04,800
um so invariance is a word I use all the

2788
03:17:04,800 --> 03:17:06,779
time and it for me when I say it it

2789
03:17:06,779 --> 03:17:08,340
means something that we the developer

2790
03:17:08,340 --> 03:17:10,260
knows but the program the compiler

2791
03:17:10,260 --> 03:17:12,479
doesn't know right it isn't aware of it

2792
03:17:12,479 --> 03:17:14,220
um I'll get to a few examples in a

2793
03:17:14,220 --> 03:17:16,319
second here and then we have coupling

2794
03:17:16,319 --> 03:17:18,300
which is when code is shared between

2795
03:17:18,300 --> 03:17:21,180
multiple teams and if your team works as

2796
03:17:21,180 --> 03:17:22,979
a bunch of individuals then I would also

2797
03:17:22,979 --> 03:17:24,720
consider each of them their own team

2798
03:17:24,720 --> 03:17:26,520
like then you have single person teams

2799
03:17:26,520 --> 03:17:28,979
and the coupling will be between those

2800
03:17:28,979 --> 03:17:30,899
and then we have fragility of a code

2801
03:17:30,899 --> 03:17:33,420
base which which is when change in one

2802
03:17:33,420 --> 03:17:35,340
place breaks something seemingly

2803
03:17:35,340 --> 03:17:37,560
unrelated and that happens all the time

2804
03:17:37,560 --> 03:17:39,840
due to the the other two there so here's

2805
03:17:39,840 --> 03:17:41,819
a very very small example from here on

2806
03:17:41,819 --> 03:17:43,200
it's just going to be basically our code

2807
03:17:43,200 --> 03:17:45,660
uh almost all code

2808
03:17:45,660 --> 03:17:48,540
um and in this case we these two lines

2809
03:17:48,540 --> 03:17:50,520
both show in variance in coupling which

2810
03:17:50,520 --> 03:17:52,920
is super interesting uh there are a few

2811
03:17:52,920 --> 03:17:55,200
uh there are a few different invariants

2812
03:17:55,200 --> 03:17:57,359
the first one is that this addition down

2813
03:17:57,359 --> 03:17:59,880
here where we add two doesn't overflow

2814
03:17:59,880 --> 03:18:01,800
right that's something that probably we

2815
03:18:01,800 --> 03:18:03,660
know otherwise the code is broken at

2816
03:18:03,660 --> 03:18:05,700
least but the compiler isn't aware that

2817
03:18:05,700 --> 03:18:07,439
this won't overflow

2818
03:18:07,439 --> 03:18:09,479
um another invariant is that a is that

2819
03:18:09,479 --> 03:18:11,160
length is something that's meaningful

2820
03:18:11,160 --> 03:18:13,200
like from this from what we can see here

2821
03:18:13,200 --> 03:18:16,140
we can actually say that as.length isn't

2822
03:18:16,140 --> 03:18:18,120
infinite and if it is infinite then this

2823
03:18:18,120 --> 03:18:19,560
will be an infinite Loop which is also

2824
03:18:19,560 --> 03:18:21,720
probably not what we meant

2825
03:18:21,720 --> 03:18:23,700
um it also shows coupling because we can

2826
03:18:23,700 --> 03:18:25,680
actually say something about this code

2827
03:18:25,680 --> 03:18:28,800
about the code we can't see from what we

2828
03:18:28,800 --> 03:18:30,540
can see here for instance we can

2829
03:18:30,540 --> 03:18:32,340
probably say what the type of as is

2830
03:18:32,340 --> 03:18:34,680
which is interesting so in this case as

2831
03:18:34,680 --> 03:18:37,140
is probably an array I would guess it's

2832
03:18:37,140 --> 03:18:38,880
also probably an numerical array of some

2833
03:18:38,880 --> 03:18:42,120
sort and we can even say something about

2834
03:18:42,120 --> 03:18:44,279
the languages written in because it has

2835
03:18:44,279 --> 03:18:47,580
this uppercase L for length which is

2836
03:18:47,580 --> 03:18:50,100
quite uncommon it's probably I the only

2837
03:18:50,100 --> 03:18:52,680
one I know is is C Sharp so probably

2838
03:18:52,680 --> 03:18:55,319
this is some C sharp code

2839
03:18:55,319 --> 03:18:57,359
um to to contrast that to another way of

2840
03:18:57,359 --> 03:18:58,800
writing the same thing we could do

2841
03:18:58,800 --> 03:19:01,080
something like as.map and then have this

2842
03:19:01,080 --> 03:19:01,979
thing

2843
03:19:01,979 --> 03:19:04,080
this code down here has no coupling we

2844
03:19:04,080 --> 03:19:05,700
can't say anything about as except it's

2845
03:19:05,700 --> 03:19:07,560
probably a collection or something that

2846
03:19:07,560 --> 03:19:09,479
has a map method of some sort it still

2847
03:19:09,479 --> 03:19:10,800
has the invariant that it doesn't

2848
03:19:10,800 --> 03:19:13,739
overflow and that was there before but

2849
03:19:13,739 --> 03:19:16,500
it has lower coupling and one fewer

2850
03:19:16,500 --> 03:19:17,640
invariance

2851
03:19:17,640 --> 03:19:19,439
the reason coupling and invariants are

2852
03:19:19,439 --> 03:19:22,260
important is that we have to keep them

2853
03:19:22,260 --> 03:19:24,540
in our heads while we're coding right if

2854
03:19:24,540 --> 03:19:26,580
we forgot if we forget what sort of

2855
03:19:26,580 --> 03:19:28,140
assumed about the code or what the

2856
03:19:28,140 --> 03:19:30,300
previous developer knew then we make the

2857
03:19:30,300 --> 03:19:31,859
mistakes and then bugs get into the code

2858
03:19:31,859 --> 03:19:33,479
so we have to keep track of all of the

2859
03:19:33,479 --> 03:19:35,040
couplings all of the invariants and

2860
03:19:35,040 --> 03:19:37,439
that's just we have limited capacity for

2861
03:19:37,439 --> 03:19:40,319
that while also solving a problem so

2862
03:19:40,319 --> 03:19:42,060
that's why all of software architecture

2863
03:19:42,060 --> 03:19:44,279
is about reducing the cognitive load of

2864
03:19:44,279 --> 03:19:45,960
working with a code base

2865
03:19:45,960 --> 03:19:48,180
cool I'm going to use a running example

2866
03:19:48,180 --> 03:19:50,700
of code so that we can see the same

2867
03:19:50,700 --> 03:19:52,380
piece of code evolve over time or

2868
03:19:52,380 --> 03:19:55,140
throughout the talk

2869
03:19:55,140 --> 03:19:57,180
and I've chosen a simple stack

2870
03:19:57,180 --> 03:19:59,399
implementation because it's uh it's

2871
03:19:59,399 --> 03:20:01,620
Compact and it shows the things that I I

2872
03:20:01,620 --> 03:20:03,120
like to show I'm using a language that's

2873
03:20:03,120 --> 03:20:05,399
sort of like Java because Java is a very

2874
03:20:05,399 --> 03:20:07,739
common language but it's not uh exactly

2875
03:20:07,739 --> 03:20:09,720
Java I'm skipping the access modifiers

2876
03:20:09,720 --> 03:20:11,540
and stuff to just have

2877
03:20:11,540 --> 03:20:13,979
some space on the slide

2878
03:20:13,979 --> 03:20:16,260
I'm choosing to implement it using like

2879
03:20:16,260 --> 03:20:19,200
a node class so an internal node so that

2880
03:20:19,200 --> 03:20:20,939
it we don't have any bounds right we can

2881
03:20:20,939 --> 03:20:22,979
have an infinite number of these nodes

2882
03:20:22,979 --> 03:20:24,779
again except for the infrastructure

2883
03:20:24,779 --> 03:20:26,760
thing it might run out of memory all of

2884
03:20:26,760 --> 03:20:28,920
that stuff and then we have the simple

2885
03:20:28,920 --> 03:20:31,500
stack here where we have just a push a

2886
03:20:31,500 --> 03:20:33,840
peak and a pop which are implemented in

2887
03:20:33,840 --> 03:20:36,600
the in the way that we expect

2888
03:20:36,600 --> 03:20:38,520
um some interesting things about this

2889
03:20:38,520 --> 03:20:40,680
first of all pop only returns something

2890
03:20:40,680 --> 03:20:43,140
it or only modifies it doesn't also

2891
03:20:43,140 --> 03:20:44,819
return something and that makes it a lot

2892
03:20:44,819 --> 03:20:46,560
simpler to reason about it's generally

2893
03:20:46,560 --> 03:20:49,380
good advice to separate the mutators

2894
03:20:49,380 --> 03:20:51,359
from the accessors just so we have a

2895
03:20:51,359 --> 03:20:53,760
clean interface it's also generic so it

2896
03:20:53,760 --> 03:20:56,220
can have any type of element in it and

2897
03:20:56,220 --> 03:20:59,580
we can reuse it and we use null to

2898
03:20:59,580 --> 03:21:01,620
represent the empty stack

2899
03:21:01,620 --> 03:21:03,479
yeah so as you can see from the fact

2900
03:21:03,479 --> 03:21:05,399
that it can either be null or or a node

2901
03:21:05,399 --> 03:21:07,920
and a node has an element

2902
03:21:07,920 --> 03:21:09,600
cool so

2903
03:21:09,600 --> 03:21:11,399
um this example is interesting because

2904
03:21:11,399 --> 03:21:14,580
it has uh some of the it illustrates the

2905
03:21:14,580 --> 03:21:18,420
most common problems that I see in in or

2906
03:21:18,420 --> 03:21:20,819
object-oriented code bases normally the

2907
03:21:20,819 --> 03:21:22,620
first one is null pointer errors and

2908
03:21:22,620 --> 03:21:24,239
here we have two places where they can

2909
03:21:24,239 --> 03:21:27,060
happen they can happen at the peak and

2910
03:21:27,060 --> 03:21:29,460
at the pop so that means because we have

2911
03:21:29,460 --> 03:21:31,260
a possible error we also have an implied

2912
03:21:31,260 --> 03:21:33,300
invariant the invariant here is top

2913
03:21:33,300 --> 03:21:36,000
cannot be null when we call Peak and pop

2914
03:21:36,000 --> 03:21:37,260
uh

2915
03:21:37,260 --> 03:21:40,140
which also is a fairly simple invariant

2916
03:21:40,140 --> 03:21:41,340
for a stack implementation at least

2917
03:21:41,340 --> 03:21:43,080
that's very common another potential

2918
03:21:43,080 --> 03:21:44,700
issue comes from the fact that we have

2919
03:21:44,700 --> 03:21:47,580
side effects in this case we have uh two

2920
03:21:47,580 --> 03:21:49,800
two specific assignments here to the top

2921
03:21:49,800 --> 03:21:51,840
element and side effects are interesting

2922
03:21:51,840 --> 03:21:53,939
because they're not always undesirable

2923
03:21:53,939 --> 03:21:55,979
but they might be and at least they're

2924
03:21:55,979 --> 03:21:57,840
they can be dangerous to see why they

2925
03:21:57,840 --> 03:21:59,580
can be dangerous imagine we have this

2926
03:21:59,580 --> 03:22:01,800
this stack being used with two different

2927
03:22:01,800 --> 03:22:04,680
threads here T1 and T2 T1 just pushes to

2928
03:22:04,680 --> 03:22:06,359
limit element and then pops them again

2929
03:22:06,359 --> 03:22:08,760
but T2 at some point in the middle will

2930
03:22:08,760 --> 03:22:10,439
go in and then take one off and put a

2931
03:22:10,439 --> 03:22:13,560
five instead right which for the most

2932
03:22:13,560 --> 03:22:16,979
part this will succeed but sometimes T2

2933
03:22:16,979 --> 03:22:18,660
will jump in there while the stack is

2934
03:22:18,660 --> 03:22:21,000
actually empty and then it will the

2935
03:22:21,000 --> 03:22:22,500
program will it will crash because

2936
03:22:22,500 --> 03:22:24,359
they're sharing the same stack the same

2937
03:22:24,359 --> 03:22:25,620
memory

2938
03:22:25,620 --> 03:22:27,420
um it can this doesn't have to come from

2939
03:22:27,420 --> 03:22:29,279
from threats it can also come from two

2940
03:22:29,279 --> 03:22:31,620
separate systems that are far away from

2941
03:22:31,620 --> 03:22:33,720
each other in the in the code base where

2942
03:22:33,720 --> 03:22:35,939
one of them modifies a stack that's also

2943
03:22:35,939 --> 03:22:38,580
used somewhere else else in the code and

2944
03:22:38,580 --> 03:22:40,439
then if we if we make a bug over in the

2945
03:22:40,439 --> 03:22:43,020
UI system it might be reported or it

2946
03:22:43,020 --> 03:22:45,300
might be influenced in the finance

2947
03:22:45,300 --> 03:22:46,859
system and that makes it very difficult

2948
03:22:46,859 --> 03:22:48,899
to debug systems like this

2949
03:22:48,899 --> 03:22:51,660
so side effects the invariant caused by

2950
03:22:51,660 --> 03:22:54,180
side effects is that they they encourage

2951
03:22:54,180 --> 03:22:56,700
non-local effects we can have effects

2952
03:22:56,700 --> 03:22:58,319
that are arbitrarily far away from each

2953
03:22:58,319 --> 03:22:59,100
other

2954
03:22:59,100 --> 03:23:00,600
and if that's what we want of course

2955
03:23:00,600 --> 03:23:02,460
that's great if it's not what we want

2956
03:23:02,460 --> 03:23:04,020
that might make it dangerous we also

2957
03:23:04,020 --> 03:23:05,700
have another actually potential for this

2958
03:23:05,700 --> 03:23:07,680
which comes from the fact that the node

2959
03:23:07,680 --> 03:23:10,200
class is entirely mutable so anyone can

2960
03:23:10,200 --> 03:23:11,819
do anything to this so long as they have

2961
03:23:11,819 --> 03:23:14,880
access to it the the common solution in

2962
03:23:14,880 --> 03:23:16,439
this case at least would be to make note

2963
03:23:16,439 --> 03:23:19,620
an internal class to the stack so only

2964
03:23:19,620 --> 03:23:21,300
from inside the stack can you reach it

2965
03:23:21,300 --> 03:23:23,580
sort of encapsulating it and thereby

2966
03:23:23,580 --> 03:23:25,380
limiting the scope of of where you can

2967
03:23:25,380 --> 03:23:27,720
change it but that still means that six

2968
03:23:27,720 --> 03:23:29,220
months after I've implemented this stack

2969
03:23:29,220 --> 03:23:31,680
if I go back and make some changes and I

2970
03:23:31,680 --> 03:23:33,600
break the invariant of the node then

2971
03:23:33,600 --> 03:23:37,580
again we have box in the code

2972
03:23:37,920 --> 03:23:40,200
um we also have the the final potential

2973
03:23:40,200 --> 03:23:41,580
problem here is the fact that we have

2974
03:23:41,580 --> 03:23:44,279
class level generics in this case it's a

2975
03:23:44,279 --> 03:23:45,840
it's an instance of something called

2976
03:23:45,840 --> 03:23:47,460
early binding and I'll get back to that

2977
03:23:47,460 --> 03:23:49,380
a little bit later but the invariant at

2978
03:23:49,380 --> 03:23:51,359
least is that once we instantiate this

2979
03:23:51,359 --> 03:23:53,100
the type will never change right because

2980
03:23:53,100 --> 03:23:54,840
it can't change that's how generics work

2981
03:23:54,840 --> 03:23:56,279
in this case

2982
03:23:56,279 --> 03:23:58,080
um the reason that's a problem is we

2983
03:23:58,080 --> 03:23:59,399
might want to implement something like a

2984
03:23:59,399 --> 03:24:02,640
map method uh so for for example

2985
03:24:02,640 --> 03:24:04,200
consider we have a stack with these

2986
03:24:04,200 --> 03:24:05,580
elements then we might want to implement

2987
03:24:05,580 --> 03:24:07,439
a method that goes through and

2988
03:24:07,439 --> 03:24:09,479
multiplies each of them by two and then

2989
03:24:09,479 --> 03:24:12,300
we have this stack as an output if we

2990
03:24:12,300 --> 03:24:15,359
now try to go and call this same initial

2991
03:24:15,359 --> 03:24:18,060
stack with divide by two instead and

2992
03:24:18,060 --> 03:24:19,859
give me the number as a floating point

2993
03:24:19,859 --> 03:24:21,359
we'll have a type error that's not

2994
03:24:21,359 --> 03:24:23,640
possible because it can only store Ins

2995
03:24:23,640 --> 03:24:25,319
at the moment

2996
03:24:25,319 --> 03:24:26,819
um so that's the thing and the reason

2997
03:24:26,819 --> 03:24:28,140
that's a problem here I've implemented

2998
03:24:28,140 --> 03:24:30,680
it or at least written the the the

2999
03:24:30,680 --> 03:24:33,479
obvious way of writing math uh we have

3000
03:24:33,479 --> 03:24:35,279
this assignment down here at head the

3001
03:24:35,279 --> 03:24:37,319
one I've met red I hope red is visible

3002
03:24:37,319 --> 03:24:38,580
because I've tried to highlight the

3003
03:24:38,580 --> 03:24:40,620
important things with red

3004
03:24:40,620 --> 03:24:42,779
um so the assignment down there means

3005
03:24:42,779 --> 03:24:44,700
that the function the input function

3006
03:24:44,700 --> 03:24:46,739
here is forced to have the same input

3007
03:24:46,739 --> 03:24:49,859
type and output type so T and T at the

3008
03:24:49,859 --> 03:24:51,540
at the top and that's not what we want

3009
03:24:51,540 --> 03:24:52,979
we want something that can transform

3010
03:24:52,979 --> 03:24:54,779
these to anything like objects or

3011
03:24:54,779 --> 03:24:56,100
whatever we might want to do crazy

3012
03:24:56,100 --> 03:24:57,420
things

3013
03:24:57,420 --> 03:25:00,180
so uh I've come up with six principles

3014
03:25:00,180 --> 03:25:01,739
that are going to fix all of these

3015
03:25:01,739 --> 03:25:04,080
issues and improve the code a whole lot

3016
03:25:04,080 --> 03:25:06,239
and they're all driven by by the

3017
03:25:06,239 --> 03:25:08,279
compiler which is super cool the first

3018
03:25:08,279 --> 03:25:11,340
one is to use immutability in in a lot

3019
03:25:11,340 --> 03:25:13,020
of languages like Java and typescript

3020
03:25:13,020 --> 03:25:14,760
and other languages it's fairly

3021
03:25:14,760 --> 03:25:16,020
straightforward to make something

3022
03:25:16,020 --> 03:25:18,660
immutable because we can add the keyword

3023
03:25:18,660 --> 03:25:21,060
final this is very difficult to read if

3024
03:25:21,060 --> 03:25:22,439
it's not important it's grayed out so

3025
03:25:22,439 --> 03:25:24,000
just

3026
03:25:24,000 --> 03:25:25,680
although I guess it's a little bit

3027
03:25:25,680 --> 03:25:28,620
important so we add final to uh to all

3028
03:25:28,620 --> 03:25:31,319
of the fields uh in this case both in

3029
03:25:31,319 --> 03:25:34,020
the node and in the in the top or in the

3030
03:25:34,020 --> 03:25:36,300
stack and that means we now have a bunch

3031
03:25:36,300 --> 03:25:38,520
of errors in the code

3032
03:25:38,520 --> 03:25:41,720
is it sort of visible

3033
03:25:43,319 --> 03:25:45,000
yeah but

3034
03:25:45,000 --> 03:25:48,420
I can't go and change like 90 slides I'm

3035
03:25:48,420 --> 03:25:49,200
sorry

3036
03:25:49,200 --> 03:25:52,319
uh yeah well we have some issues because

3037
03:25:52,319 --> 03:25:54,000
we have two assignments now and these

3038
03:25:54,000 --> 03:25:55,739
variables are made final so we're not

3039
03:25:55,739 --> 03:25:57,960
allowed to assign to them anymore

3040
03:25:57,960 --> 03:26:01,020
um the the solution here is to go and so

3041
03:26:01,020 --> 03:26:02,399
the compiler will tell us these are

3042
03:26:02,399 --> 03:26:04,020
errors right we don't have to to look

3043
03:26:04,020 --> 03:26:05,520
for these ourselves once we've made them

3044
03:26:05,520 --> 03:26:07,140
finally compiler will be like here are

3045
03:26:07,140 --> 03:26:09,540
all the places you can't change then the

3046
03:26:09,540 --> 03:26:11,520
solution is to go and actually wrap them

3047
03:26:11,520 --> 03:26:14,220
in new Stacks every time we wanted to

3048
03:26:14,220 --> 03:26:15,899
make a modification and then return that

3049
03:26:15,899 --> 03:26:17,760
instead so we change all the work all

3050
03:26:17,760 --> 03:26:19,859
the void functions to be stack functions

3051
03:26:19,859 --> 03:26:21,359
instead and then

3052
03:26:21,359 --> 03:26:24,120
um then now this works again except we

3053
03:26:24,120 --> 03:26:26,640
still have an assignment in the in the

3054
03:26:26,640 --> 03:26:28,739
map function this assignment is now

3055
03:26:28,739 --> 03:26:31,020
illegal and if we try to fix that we're

3056
03:26:31,020 --> 03:26:32,880
going to have to juggle a lot with these

3057
03:26:32,880 --> 03:26:35,520
different values because we we are sort

3058
03:26:35,520 --> 03:26:37,620
of changing the type of the node and so

3059
03:26:37,620 --> 03:26:39,600
we need to move both all of the tail

3060
03:26:39,600 --> 03:26:41,520
elements and the current element at the

3061
03:26:41,520 --> 03:26:43,500
same time and there are sort of two ways

3062
03:26:43,500 --> 03:26:45,120
to do this there is the easy way and the

3063
03:26:45,120 --> 03:26:47,460
hard way the reason this can be hard is

3064
03:26:47,460 --> 03:26:49,560
that we have this definition of note

3065
03:26:49,560 --> 03:26:51,720
that is recursive it refers to itself

3066
03:26:51,720 --> 03:26:54,479
entail and so that means if we're trying

3067
03:26:54,479 --> 03:26:56,580
to to do all of this with loops we'll

3068
03:26:56,580 --> 03:26:58,560
have a really hard time trying to make

3069
03:26:58,560 --> 03:27:00,600
that sort of work but if we're trying to

3070
03:27:00,600 --> 03:27:02,939
to go through it with recursion that's a

3071
03:27:02,939 --> 03:27:04,620
lot easier because the data type is

3072
03:27:04,620 --> 03:27:06,420
recursive so when you have recursive

3073
03:27:06,420 --> 03:27:07,920
data it makes sense to go through it

3074
03:27:07,920 --> 03:27:09,120
with recursion and that's the second

3075
03:27:09,120 --> 03:27:12,540
principle use recursion and I just want

3076
03:27:12,540 --> 03:27:13,920
to share one of my pet peeves with you

3077
03:27:13,920 --> 03:27:16,739
guys uh I think a lot of people know

3078
03:27:16,739 --> 03:27:18,060
what recursion is and a lot of people

3079
03:27:18,060 --> 03:27:19,560
know this sort of meme over here in

3080
03:27:19,560 --> 03:27:20,880
order to understand recursion you must

3081
03:27:20,880 --> 03:27:22,500
first understand recursion but the thing

3082
03:27:22,500 --> 03:27:23,340
is

3083
03:27:23,340 --> 03:27:25,800
I have a different take on recursion uh

3084
03:27:25,800 --> 03:27:28,020
than I think most people present it and

3085
03:27:28,020 --> 03:27:30,000
so I hope I can still add a little bit

3086
03:27:30,000 --> 03:27:31,920
of new stuff by explaining how I see it

3087
03:27:31,920 --> 03:27:34,260
first of all recursion has two rules and

3088
03:27:34,260 --> 03:27:35,880
the first one is you have to handle all

3089
03:27:35,880 --> 03:27:39,120
of the cases as either a base case or a

3090
03:27:39,120 --> 03:27:41,220
recursive step and that sort of makes

3091
03:27:41,220 --> 03:27:43,620
sense but the second rule is it has to

3092
03:27:43,620 --> 03:27:46,560
have at least one base case otherwise

3093
03:27:46,560 --> 03:27:47,939
it's not recursion it's it's something

3094
03:27:47,939 --> 03:27:50,100
else it's called co-recursion it's it's

3095
03:27:50,100 --> 03:27:51,660
I'm not going to talk about it here but

3096
03:27:51,660 --> 03:27:53,340
the thing is that means this over here

3097
03:27:53,340 --> 03:27:55,020
is not a valid meme because it has no

3098
03:27:55,020 --> 03:27:57,540
base cases right so really it it doesn't

3099
03:27:57,540 --> 03:27:59,220
work at all

3100
03:27:59,220 --> 03:28:01,140
um but these two rules are actually

3101
03:28:01,140 --> 03:28:02,460
going to take us through if we want to

3102
03:28:02,460 --> 03:28:04,200
just make a function that does the

3103
03:28:04,200 --> 03:28:06,479
mapping like we had before as a

3104
03:28:06,479 --> 03:28:08,399
recursive function we can actually just

3105
03:28:08,399 --> 03:28:10,439
go through the rules and sort of

3106
03:28:10,439 --> 03:28:12,180
extrapolate how it should look without

3107
03:28:12,180 --> 03:28:13,739
thinking which is the important thing

3108
03:28:13,739 --> 03:28:15,779
right because we want to take stuff out

3109
03:28:15,779 --> 03:28:18,540
of our brains while we're coding uh the

3110
03:28:18,540 --> 03:28:19,739
first question oh the first thing we

3111
03:28:19,739 --> 03:28:21,120
need to consider is what should the type

3112
03:28:21,120 --> 03:28:22,260
be of the thing we're trying to

3113
03:28:22,260 --> 03:28:24,899
implement well it just take a function

3114
03:28:24,899 --> 03:28:26,880
that can take something from T to B and

3115
03:28:26,880 --> 03:28:28,500
then it should take the current stack

3116
03:28:28,500 --> 03:28:30,600
which is a node of type T and then to

3117
03:28:30,600 --> 03:28:32,040
return something that's a stack of type

3118
03:28:32,040 --> 03:28:33,000
B

3119
03:28:33,000 --> 03:28:35,640
so when we have that we can say what are

3120
03:28:35,640 --> 03:28:37,260
the cases we have well we have two cases

3121
03:28:37,260 --> 03:28:40,260
we have null and the node those are the

3122
03:28:40,260 --> 03:28:42,180
two possible values and notice the

3123
03:28:42,180 --> 03:28:44,899
recursive one so already there's a hint

3124
03:28:44,899 --> 03:28:47,700
that means null must be a base case and

3125
03:28:47,700 --> 03:28:50,160
we can just input the only value we have

3126
03:28:50,160 --> 03:28:53,040
which is return null once we know that

3127
03:28:53,040 --> 03:28:54,960
node is the recursive step we also know

3128
03:28:54,960 --> 03:28:57,180
that we need a recursive call in the

3129
03:28:57,180 --> 03:28:59,880
somewhere in the node code so that can

3130
03:28:59,880 --> 03:29:02,760
go just there to satisfy the types that

3131
03:29:02,760 --> 03:29:04,560
we've put in there's all we we have to

3132
03:29:04,560 --> 03:29:06,899
instantiate a new node otherwise we have

3133
03:29:06,899 --> 03:29:08,220
nothing and the only thing that can go

3134
03:29:08,220 --> 03:29:11,520
in that last spot is a f dot apply here

3135
03:29:11,520 --> 03:29:13,560
and so without thinking at all just

3136
03:29:13,560 --> 03:29:15,120
following what the compiler is asking us

3137
03:29:15,120 --> 03:29:17,399
to do we can actually only have this

3138
03:29:17,399 --> 03:29:19,800
correct implementation of how that looks

3139
03:29:19,800 --> 03:29:22,620
and the only thing we need to replace

3140
03:29:22,620 --> 03:29:25,620
this old function is to have a wrapper

3141
03:29:25,620 --> 03:29:27,359
function that just makes the interface a

3142
03:29:27,359 --> 03:29:28,739
little bit nicer and hides the fact that

3143
03:29:28,739 --> 03:29:30,660
we have an extra argument on our

3144
03:29:30,660 --> 03:29:32,640
recursive version the helper over there

3145
03:29:32,640 --> 03:29:35,700
has two arguments and we only want one

3146
03:29:35,700 --> 03:29:38,399
um so from doing that we have we've

3147
03:29:38,399 --> 03:29:40,680
actually fixed our typing issue uh now

3148
03:29:40,680 --> 03:29:42,660
it says b in all the right places and we

3149
03:29:42,660 --> 03:29:44,520
actually have the map function that we

3150
03:29:44,520 --> 03:29:45,960
wanted to have in the beginning

3151
03:29:45,960 --> 03:29:48,479
and I'll I just want to underline what

3152
03:29:48,479 --> 03:29:49,859
are the advantages we get from using

3153
03:29:49,859 --> 03:29:52,319
regression here the the thing is we

3154
03:29:52,319 --> 03:29:54,120
barely had to think while we were

3155
03:29:54,120 --> 03:29:56,160
implementing it because the types were

3156
03:29:56,160 --> 03:29:57,899
sort of motivating what we had to do at

3157
03:29:57,899 --> 03:29:59,220
each step it was like there's only

3158
03:29:59,220 --> 03:30:01,200
really one thing to do and so we just

3159
03:30:01,200 --> 03:30:03,779
follow what it's telling us to do the

3160
03:30:03,779 --> 03:30:05,460
second thing is that we can reason about

3161
03:30:05,460 --> 03:30:07,680
each of the cases separately from each

3162
03:30:07,680 --> 03:30:10,140
other so there's a lower coupling so to

3163
03:30:10,140 --> 03:30:11,880
say between the things if we're trying

3164
03:30:11,880 --> 03:30:13,800
to do the same thing with loops all of

3165
03:30:13,800 --> 03:30:15,300
the things would sort of interact with

3166
03:30:15,300 --> 03:30:17,279
each other all of the time but here we

3167
03:30:17,279 --> 03:30:18,899
could say well null has to do this and

3168
03:30:18,899 --> 03:30:20,460
the other case has to do this and forget

3169
03:30:20,460 --> 03:30:22,439
about everything around it which allows

3170
03:30:22,439 --> 03:30:24,300
us to sort of eat an elephant in small

3171
03:30:24,300 --> 03:30:25,620
bites so to speak

3172
03:30:25,620 --> 03:30:29,640
and uh I I it there's like a really this

3173
03:30:29,640 --> 03:30:31,020
is not a coincidence that these things

3174
03:30:31,020 --> 03:30:32,340
happen and we get these things out of

3175
03:30:32,340 --> 03:30:34,560
this and uh I really just want to want

3176
03:30:34,560 --> 03:30:36,420
to share with you some of my uh some of

3177
03:30:36,420 --> 03:30:38,340
my passions for this stuff and if the

3178
03:30:38,340 --> 03:30:40,260
theory uh stuff and like very

3179
03:30:40,260 --> 03:30:42,180
theoretical stuff isn't quite your cup

3180
03:30:42,180 --> 03:30:43,800
of tea feel free to check your email now

3181
03:30:43,800 --> 03:30:46,200
uh while the slides are blue it's gonna

3182
03:30:46,200 --> 03:30:48,960
be about a very theoretical stuff

3183
03:30:48,960 --> 03:30:52,260
um the thing is like a hundred years ago

3184
03:30:52,260 --> 03:30:53,939
um this guy invented something really

3185
03:30:53,939 --> 03:30:56,100
really useful right he invented numbers

3186
03:30:56,100 --> 03:30:59,399
and it was a total Game Changer uh of

3187
03:30:59,399 --> 03:31:00,660
course people have been using numbers

3188
03:31:00,660 --> 03:31:03,239
before then but the thing is this guy's

3189
03:31:03,239 --> 03:31:05,040
numbers were a little bit different in a

3190
03:31:05,040 --> 03:31:07,200
very important way because he called we

3191
03:31:07,200 --> 03:31:08,520
call them piano numbers I don't know if

3192
03:31:08,520 --> 03:31:09,600
he called them that that would have been

3193
03:31:09,600 --> 03:31:11,939
a little bit selfish uh but he defined

3194
03:31:11,939 --> 03:31:16,260
them as a number being either zero or it

3195
03:31:16,260 --> 03:31:18,000
can be the successor of another number

3196
03:31:18,000 --> 03:31:20,160
and the reason that's important is that

3197
03:31:20,160 --> 03:31:22,500
he also defined he also had a statement

3198
03:31:22,500 --> 03:31:24,180
to go with these things and he said if

3199
03:31:24,180 --> 03:31:26,220
you can prove that something is is true

3200
03:31:26,220 --> 03:31:28,080
for zero and you can prove that if it's

3201
03:31:28,080 --> 03:31:29,880
true for one number it's also true for

3202
03:31:29,880 --> 03:31:31,739
the next number then it's true for

3203
03:31:31,739 --> 03:31:33,540
everything right it's true for all the

3204
03:31:33,540 --> 03:31:35,100
even once you haven't checked and even

3205
03:31:35,100 --> 03:31:37,200
once nobody has ever checked or even

3206
03:31:37,200 --> 03:31:39,000
ever thought of like all of the numbers

3207
03:31:39,000 --> 03:31:41,279
are now under this property which is

3208
03:31:41,279 --> 03:31:43,620
amazing and it's so powerful it's a

3209
03:31:43,620 --> 03:31:45,000
Cornerstone of mathematics called

3210
03:31:45,000 --> 03:31:47,399
induction uh structural induction to be

3211
03:31:47,399 --> 03:31:50,220
precise and yeah and being

3212
03:31:50,220 --> 03:31:51,720
mathematicians of course they had to

3213
03:31:51,720 --> 03:31:53,279
find a very complicated way to write it

3214
03:31:53,279 --> 03:31:54,960
so they write it like this but really it

3215
03:31:54,960 --> 03:31:56,520
says the same thing

3216
03:31:56,520 --> 03:31:58,739
um and it's not important for what this

3217
03:31:58,739 --> 03:31:59,700
is

3218
03:31:59,700 --> 03:32:01,200
um the thing is if I as a programmer

3219
03:32:01,200 --> 03:32:03,479
want to implement a function to do

3220
03:32:03,479 --> 03:32:05,399
something a number of times and then

3221
03:32:05,399 --> 03:32:07,439
give me back the result I would need to

3222
03:32:07,439 --> 03:32:09,420
know three things right so here I just

3223
03:32:09,420 --> 03:32:11,160
want the result back some generic result

3224
03:32:11,160 --> 03:32:12,720
I don't know what it is but I need to

3225
03:32:12,720 --> 03:32:14,100
know three things what is the starting

3226
03:32:14,100 --> 03:32:16,439
point what to do at each step and how

3227
03:32:16,439 --> 03:32:17,819
many times do you want me to do it right

3228
03:32:17,819 --> 03:32:19,080
these are the three things I need to

3229
03:32:19,080 --> 03:32:20,520
know to do something

3230
03:32:20,520 --> 03:32:22,920
and this looks a little bit familiar at

3231
03:32:22,920 --> 03:32:25,920
least it does to me uh I can make it I

3232
03:32:25,920 --> 03:32:27,840
can make it even more visible what this

3233
03:32:27,840 --> 03:32:29,399
sort of represents right because we have

3234
03:32:29,399 --> 03:32:31,260
all of the same elements although not

3235
03:32:31,260 --> 03:32:33,359
quite in the same order the we write the

3236
03:32:33,359 --> 03:32:36,180
return value at the start in a lot of

3237
03:32:36,180 --> 03:32:37,620
languages but the return if the return

3238
03:32:37,620 --> 03:32:39,060
goes at the end then this is literally

3239
03:32:39,060 --> 03:32:41,460
the same thing so really

3240
03:32:41,460 --> 03:32:44,220
induction is the type that recursion

3241
03:32:44,220 --> 03:32:46,200
would have if we just wrote up the type

3242
03:32:46,200 --> 03:32:48,720
which is just an incredible fact that

3243
03:32:48,720 --> 03:32:50,279
means that while we are coding in a

3244
03:32:50,279 --> 03:32:51,600
recursive way

3245
03:32:51,600 --> 03:32:54,239
our compiler constructs the proof behind

3246
03:32:54,239 --> 03:32:56,100
our backs that all of the types work and

3247
03:32:56,100 --> 03:32:58,560
all of the things are correct and that's

3248
03:32:58,560 --> 03:33:01,020
immensely powerful we can still of

3249
03:33:01,020 --> 03:33:03,840
course we can still have mistakes but uh

3250
03:33:03,840 --> 03:33:05,340
we're trying to hit the bullseye of

3251
03:33:05,340 --> 03:33:07,380
correct code and where before we can

3252
03:33:07,380 --> 03:33:09,420
make both non-bake mistakes with the

3253
03:33:09,420 --> 03:33:12,180
compiler actually proving something

3254
03:33:12,180 --> 03:33:14,520
it's now a big green thing difficult

3255
03:33:14,520 --> 03:33:17,580
colors uh we can't make small mistakes

3256
03:33:17,580 --> 03:33:19,200
anymore because the compiler will will

3257
03:33:19,200 --> 03:33:21,239
detect them now so we can only make

3258
03:33:21,239 --> 03:33:23,040
really big mistakes or no mistakes at

3259
03:33:23,040 --> 03:33:24,660
all or get compile errors of course

3260
03:33:24,660 --> 03:33:27,600
until we we get it correct and luckily

3261
03:33:27,600 --> 03:33:29,040
it's less likely that we'll make big

3262
03:33:29,040 --> 03:33:30,540
mistakes because most people will be

3263
03:33:30,540 --> 03:33:32,399
like oh wait what am I doing at all and

3264
03:33:32,399 --> 03:33:34,200
then stop and reassess what direction

3265
03:33:34,200 --> 03:33:35,880
they're going so that means we already

3266
03:33:35,880 --> 03:33:37,620
have eliminated a bunch of Errors from

3267
03:33:37,620 --> 03:33:39,239
this

3268
03:33:39,239 --> 03:33:41,460
okay that was like a lot of the theory

3269
03:33:41,460 --> 03:33:42,840
part there's only a little bit more

3270
03:33:42,840 --> 03:33:45,000
Theory leader but let's get back to the

3271
03:33:45,000 --> 03:33:47,220
to the next principle uh prefer later

3272
03:33:47,220 --> 03:33:48,960
binding that's the thing I promised I I

3273
03:33:48,960 --> 03:33:51,239
would just reiterate um at the start of

3274
03:33:51,239 --> 03:33:53,279
the thing uh the thing is in in this

3275
03:33:53,279 --> 03:33:55,979
code we have this uh we we now have this

3276
03:33:55,979 --> 03:33:58,319
node element in this other variable that

3277
03:33:58,319 --> 03:33:59,640
keeps the node element but node is

3278
03:33:59,640 --> 03:34:02,100
entirely immutable uh so there's really

3279
03:34:02,100 --> 03:34:03,779
no point in encapsulating it anymore

3280
03:34:03,779 --> 03:34:05,640
there's no danger in exposing node

3281
03:34:05,640 --> 03:34:08,460
directly so we just remove the field and

3282
03:34:08,460 --> 03:34:11,460
then have the the regular note just be

3283
03:34:11,460 --> 03:34:13,260
what it what it wants to be all the time

3284
03:34:13,260 --> 03:34:16,500
and that also means that we can now uh

3285
03:34:16,500 --> 03:34:18,960
go and look at these different

3286
03:34:18,960 --> 03:34:21,420
um these different uh places where we

3287
03:34:21,420 --> 03:34:23,520
use stack we obviously don't have stack

3288
03:34:23,520 --> 03:34:25,620
anymore now they need to be node because

3289
03:34:25,620 --> 03:34:27,359
we're exposing the node and that also

3290
03:34:27,359 --> 03:34:28,859
means we need to add the argument

3291
03:34:28,859 --> 03:34:31,140
because before it was a field now it's a

3292
03:34:31,140 --> 03:34:33,479
parameter so we just moved something

3293
03:34:33,479 --> 03:34:36,420
from from the state to be a parameter

3294
03:34:36,420 --> 03:34:37,560
instead

3295
03:34:37,560 --> 03:34:39,840
everywhere and now that we've done that

3296
03:34:39,840 --> 03:34:42,720
this T that the stack has oh I can't go

3297
03:34:42,720 --> 03:34:44,460
away from the camera this teeth that the

3298
03:34:44,460 --> 03:34:46,680
stack has uh it isn't binding any data

3299
03:34:46,680 --> 03:34:48,540
it's not important so we can actually

3300
03:34:48,540 --> 03:34:50,640
just postpone it and put it on each of

3301
03:34:50,640 --> 03:34:52,739
the methods instead and now this is not

3302
03:34:52,739 --> 03:34:54,600
so much a stack as it is just a class of

3303
03:34:54,600 --> 03:34:56,640
utilities to work with a stack so we

3304
03:34:56,640 --> 03:34:58,859
also rename it because it's a little bit

3305
03:34:58,859 --> 03:35:00,720
nicer but this is really cool because

3306
03:35:00,720 --> 03:35:02,700
now where we before I had to make a

3307
03:35:02,700 --> 03:35:04,020
stack for integers and a stack for

3308
03:35:04,020 --> 03:35:05,520
floating point and a stack for objects

3309
03:35:05,520 --> 03:35:07,680
we can use this stack utils for any type

3310
03:35:07,680 --> 03:35:09,779
it doesn't care and all of the methods

3311
03:35:09,779 --> 03:35:12,060
just work they can even be static if you

3312
03:35:12,060 --> 03:35:14,399
want to save memory for some reason

3313
03:35:14,399 --> 03:35:15,359
um

3314
03:35:15,359 --> 03:35:18,300
yeah and it's it's a really powerful

3315
03:35:18,300 --> 03:35:20,520
technique the later we lock in our

3316
03:35:20,520 --> 03:35:22,680
decisions the more reusable the code

3317
03:35:22,680 --> 03:35:24,359
becomes and that's General that doesn't

3318
03:35:24,359 --> 03:35:26,700
only apply to uh to like generics it

3319
03:35:26,700 --> 03:35:28,020
also applies to other things in this

3320
03:35:28,020 --> 03:35:30,600
case we have like two versions of a

3321
03:35:30,600 --> 03:35:31,979
sorting algorithm and then we have a

3322
03:35:31,979 --> 03:35:34,680
master method to sort of Select which

3323
03:35:34,680 --> 03:35:36,300
algorithm you want to run for I don't

3324
03:35:36,300 --> 03:35:38,520
know testing purposes or whatever

3325
03:35:38,520 --> 03:35:40,739
um but in this case if I want to change

3326
03:35:40,739 --> 03:35:42,120
this I need to actually go and change

3327
03:35:42,120 --> 03:35:44,580
the code we can contrast it to using

3328
03:35:44,580 --> 03:35:46,800
instead something like an interface and

3329
03:35:46,800 --> 03:35:48,840
then have different classes implementing

3330
03:35:48,840 --> 03:35:51,479
a same interface that then call the same

3331
03:35:51,479 --> 03:35:53,340
code right it still calls quicksort it

3332
03:35:53,340 --> 03:35:55,200
still calls insertion sort but the thing

3333
03:35:55,200 --> 03:35:56,939
is if I want to change this code I need

3334
03:35:56,939 --> 03:35:58,520
to go into the code change the code

3335
03:35:58,520 --> 03:36:01,620
recompile it and redeploy it to make the

3336
03:36:01,620 --> 03:36:03,660
change whereas this code over here I can

3337
03:36:03,660 --> 03:36:05,399
go and add a new class compile it

3338
03:36:05,399 --> 03:36:07,140
separately from the other code and then

3339
03:36:07,140 --> 03:36:08,939
just as long as the code has a way of

3340
03:36:08,939 --> 03:36:11,040
loading in new code I can just plug it

3341
03:36:11,040 --> 03:36:12,600
in right while it's still running I

3342
03:36:12,600 --> 03:36:14,700
don't need to touch any of these things

3343
03:36:14,700 --> 03:36:16,560
so that means we can have we can have

3344
03:36:16,560 --> 03:36:18,420
like change by addition instead which is

3345
03:36:18,420 --> 03:36:19,800
also super nice

3346
03:36:19,800 --> 03:36:23,399
uh uh yeah cool getting back to the

3347
03:36:23,399 --> 03:36:25,819
stack uh we have a we have an issue now

3348
03:36:25,819 --> 03:36:28,439
uh we still can have no point or

3349
03:36:28,439 --> 03:36:30,060
exceptions because we still use null to

3350
03:36:30,060 --> 03:36:32,220
represent an empty stack and it's in

3351
03:36:32,220 --> 03:36:33,600
these cases

3352
03:36:33,600 --> 03:36:35,520
um in this case so there's a very simple

3353
03:36:35,520 --> 03:36:38,460
solution for this don't use null

3354
03:36:38,460 --> 03:36:40,739
um and unfortunately a lot of languages

3355
03:36:40,739 --> 03:36:42,420
don't support you disabling null

3356
03:36:42,420 --> 03:36:44,460
entirely but we can't there is a

3357
03:36:44,460 --> 03:36:46,140
solution that we can use and then just

3358
03:36:46,140 --> 03:36:48,420
if we're very Vigilant and if we're very

3359
03:36:48,420 --> 03:36:52,380
very good with our other code hygiene we

3360
03:36:52,380 --> 03:36:54,300
should be able to eliminate them uh

3361
03:36:54,300 --> 03:36:55,739
checking third-party things and stuff

3362
03:36:55,739 --> 03:36:57,300
the solution is to use something called

3363
03:36:57,300 --> 03:36:59,479
null object pattern where we instead

3364
03:36:59,479 --> 03:37:01,979
make a new class called empty to

3365
03:37:01,979 --> 03:37:03,899
represent an empty stack instead of null

3366
03:37:03,899 --> 03:37:05,880
and then we make an interface and then

3367
03:37:05,880 --> 03:37:08,160
we have both the node class and the Mt

3368
03:37:08,160 --> 03:37:10,260
representing class Implement that new

3369
03:37:10,260 --> 03:37:12,720
stack that also means of course that

3370
03:37:12,720 --> 03:37:14,520
node is no longer just pointing to a

3371
03:37:14,520 --> 03:37:15,840
node it's pointing to something that can

3372
03:37:15,840 --> 03:37:18,000
also be empty

3373
03:37:18,000 --> 03:37:21,060
um and and then now uh apart from the

3374
03:37:21,060 --> 03:37:22,859
fact that we we don't get these we can

3375
03:37:22,859 --> 03:37:25,620
also specify now at each place whether

3376
03:37:25,620 --> 03:37:28,140
we want a stack that's possibly null or

3377
03:37:28,140 --> 03:37:30,359
definitely not null because when we

3378
03:37:30,359 --> 03:37:32,399
whenever we say node we know that it is

3379
03:37:32,399 --> 03:37:34,859
not empty right it can only be something

3380
03:37:34,859 --> 03:37:36,420
so now we can't have null Point

3381
03:37:36,420 --> 03:37:38,460
exceptions we have so precise types that

3382
03:37:38,460 --> 03:37:40,140
we can say exactly what we want as our

3383
03:37:40,140 --> 03:37:42,000
input and then the compiler will help us

3384
03:37:42,000 --> 03:37:43,739
figure out if someone's calling it wrong

3385
03:37:43,739 --> 03:37:45,479
or prevent them from

3386
03:37:45,479 --> 03:37:47,220
so now there are no longer null pointer

3387
03:37:47,220 --> 03:37:48,540
exceptions

3388
03:37:48,540 --> 03:37:50,220
um we do have a new error that the

3389
03:37:50,220 --> 03:37:53,399
compiler is informing us at any point in

3390
03:37:53,399 --> 03:37:54,840
this the compiler is telling us what to

3391
03:37:54,840 --> 03:37:56,340
do next it's not like we have to do a

3392
03:37:56,340 --> 03:37:58,080
lot of thinking it's saying that one

3393
03:37:58,080 --> 03:37:59,580
over there doesn't really work because

3394
03:37:59,580 --> 03:38:01,020
we have a null check and we don't use

3395
03:38:01,020 --> 03:38:02,880
null anymore so obviously that's never

3396
03:38:02,880 --> 03:38:05,819
going to trigger and uh in fact we

3397
03:38:05,819 --> 03:38:07,680
wanted to check if something is an

3398
03:38:07,680 --> 03:38:10,439
instance of the empty class and Java

3399
03:38:10,439 --> 03:38:11,819
programmers will be quick to suggest

3400
03:38:11,819 --> 03:38:13,859
something like instance of but that

3401
03:38:13,859 --> 03:38:15,239
breaks the next principle we're going to

3402
03:38:15,239 --> 03:38:18,000
go into don't use runtime types

3403
03:38:18,000 --> 03:38:19,920
um the thing is runtime types are sort

3404
03:38:19,920 --> 03:38:22,020
of like uh they're not some part of the

3405
03:38:22,020 --> 03:38:23,160
compiler right it doesn't know anything

3406
03:38:23,160 --> 03:38:25,140
about them so it's sort of telling the

3407
03:38:25,140 --> 03:38:26,819
compiler to back off but it's a really

3408
03:38:26,819 --> 03:38:29,160
powerful tool I've been working on this

3409
03:38:29,160 --> 03:38:31,080
code to compiler dictionary to just

3410
03:38:31,080 --> 03:38:32,399
explain to people what they're actually

3411
03:38:32,399 --> 03:38:34,020
saying to the compiler when they put

3412
03:38:34,020 --> 03:38:35,819
these things in their code and the first

3413
03:38:35,819 --> 03:38:37,199
one is if you put a cast you're just

3414
03:38:37,199 --> 03:38:38,819
telling it I know what the type is you

3415
03:38:38,819 --> 03:38:40,439
don't like I know better than you and

3416
03:38:40,439 --> 03:38:42,060
it's literally a type Checker like

3417
03:38:42,060 --> 03:38:44,939
that's its job and it spent 40 years

3418
03:38:44,939 --> 03:38:46,979
becoming one or something

3419
03:38:46,979 --> 03:38:49,319
um you also have something like instant

3420
03:38:49,319 --> 03:38:51,060
software it's like I don't know we'll

3421
03:38:51,060 --> 03:38:52,560
just check it at runtime we'll just see

3422
03:38:52,560 --> 03:38:53,880
maybe it's an instance of this thing

3423
03:38:53,880 --> 03:38:56,699
yeah it again it's like it's not a very

3424
03:38:56,699 --> 03:38:59,520
very Cody thing to put in there uh we

3425
03:38:59,520 --> 03:39:00,840
have Dynamic types where it's like I

3426
03:39:00,840 --> 03:39:02,399
don't care so you shouldn't either just

3427
03:39:02,399 --> 03:39:05,040
let it be let me do whatever I want and

3428
03:39:05,040 --> 03:39:06,899
finally the worst one is like reflection

3429
03:39:06,899 --> 03:39:08,819
words like I can literally do your job

3430
03:39:08,819 --> 03:39:11,279
right all of these are very rude don't

3431
03:39:11,279 --> 03:39:12,960
take don't do this with your compiler

3432
03:39:12,960 --> 03:39:15,420
it's it's like you you're saying the

3433
03:39:15,420 --> 03:39:17,699
compiler stand back I got this and then

3434
03:39:17,699 --> 03:39:19,199
you know the compiler will stand back

3435
03:39:19,199 --> 03:39:21,000
and it'll happily watch you eat yourself

3436
03:39:21,000 --> 03:39:23,819
off of a cliff somehow which is super

3437
03:39:23,819 --> 03:39:25,439
uncomfortable

3438
03:39:25,439 --> 03:39:28,680
um so the the reason like this is super

3439
03:39:28,680 --> 03:39:30,720
important again a little bit of theory

3440
03:39:30,720 --> 03:39:32,640
um is that is that we have these very

3441
03:39:32,640 --> 03:39:34,439
strong type systems type systems have

3442
03:39:34,439 --> 03:39:36,060
two properties that we actually want of

3443
03:39:36,060 --> 03:39:38,340
them they can be sound which means if

3444
03:39:38,340 --> 03:39:39,779
there are no type errors on compile time

3445
03:39:39,779 --> 03:39:41,220
then there are not going to be any

3446
03:39:41,220 --> 03:39:43,979
runtime errors uh which is very nice

3447
03:39:43,979 --> 03:39:46,020
they can also be decidable meaning they

3448
03:39:46,020 --> 03:39:47,699
don't run forever that's cool of a

3449
03:39:47,699 --> 03:39:49,920
compiler to stop eventually

3450
03:39:49,920 --> 03:39:51,680
um at least it sucks when it doesn't

3451
03:39:51,680 --> 03:39:54,120
unfortunately all of the languages that

3452
03:39:54,120 --> 03:39:56,100
we tend to use are neither of these two

3453
03:39:56,100 --> 03:39:57,960
but they're close enough we can sort of

3454
03:39:57,960 --> 03:40:00,779
just pretend that they're that they are

3455
03:40:00,779 --> 03:40:02,520
um and that means we have this thing if

3456
03:40:02,520 --> 03:40:04,800
a type system is sound we don't need the

3457
03:40:04,800 --> 03:40:06,239
runtime types there's actually no reason

3458
03:40:06,239 --> 03:40:08,160
they're in there and in fact Java was

3459
03:40:08,160 --> 03:40:10,080
born without instance of because it is

3460
03:40:10,080 --> 03:40:13,199
not necessary for its type system at all

3461
03:40:13,199 --> 03:40:14,760
um and that means we can sort of

3462
03:40:14,760 --> 03:40:16,380
simulate that if we don't use the

3463
03:40:16,380 --> 03:40:18,120
runtime types we get what's called

3464
03:40:18,120 --> 03:40:19,739
theorems for free we get a lot of things

3465
03:40:19,739 --> 03:40:21,600
being true about our code and about

3466
03:40:21,600 --> 03:40:23,279
working with the code that we can sort

3467
03:40:23,279 --> 03:40:25,920
of rely on both in a very very Theory

3468
03:40:25,920 --> 03:40:27,779
medical way and there's a paper there

3469
03:40:27,779 --> 03:40:29,580
but I won't go into Reynolds abstraction

3470
03:40:29,580 --> 03:40:31,260
theorem for polymorphic Lambda calculus

3471
03:40:31,260 --> 03:40:33,779
right now but we also get in a very

3472
03:40:33,779 --> 03:40:36,359
practical way in like in rules like this

3473
03:40:36,359 --> 03:40:38,580
one if we delete a declaration and the

3474
03:40:38,580 --> 03:40:40,439
compiler doesn't complain about it then

3475
03:40:40,439 --> 03:40:42,660
that code was unused that's true if you

3476
03:40:42,660 --> 03:40:44,160
don't use runtime types of course if you

3477
03:40:44,160 --> 03:40:45,600
use runtime types you don't know like

3478
03:40:45,600 --> 03:40:47,580
anything might happen and in fact I was

3479
03:40:47,580 --> 03:40:49,439
with a customer once helping to refactor

3480
03:40:49,439 --> 03:40:51,660
the code base and I start Always by

3481
03:40:51,660 --> 03:40:53,640
asking to use cast to use instance of to

3482
03:40:53,640 --> 03:40:54,779
use these runtime types do you have

3483
03:40:54,779 --> 03:40:56,160
reflection and they say no no no no no

3484
03:40:56,160 --> 03:40:58,080
no we know from University that's bad

3485
03:40:58,080 --> 03:41:00,180
we're not going to do it I'm like okay

3486
03:41:00,180 --> 03:41:02,340
that's good so after a while of

3487
03:41:02,340 --> 03:41:04,319
refraction we got to this uh this nasty

3488
03:41:04,319 --> 03:41:05,760
code deep in their code base where we

3489
03:41:05,760 --> 03:41:07,680
had a bunch of declarations I'm like are

3490
03:41:07,680 --> 03:41:09,899
these even used and they're like ah we

3491
03:41:09,899 --> 03:41:11,100
don't know we don't remember this code

3492
03:41:11,100 --> 03:41:12,660
and I'm like try deleting them and see

3493
03:41:12,660 --> 03:41:14,100
if the compiler complaints and we

3494
03:41:14,100 --> 03:41:15,840
deleted them the compiler was fine and

3495
03:41:15,840 --> 03:41:17,939
we continued coding until we we reached

3496
03:41:17,939 --> 03:41:19,199
another part of the code where it turned

3497
03:41:19,199 --> 03:41:21,779
out they were using a tool uh something

3498
03:41:21,779 --> 03:41:23,640
with auto mapper or something where it

3499
03:41:23,640 --> 03:41:25,260
would go and actually fetch from the

3500
03:41:25,260 --> 03:41:27,300
Declaration what the type what the

3501
03:41:27,300 --> 03:41:28,920
variables were and I mean we couldn't

3502
03:41:28,920 --> 03:41:30,660
rely on anything we had to go back and

3503
03:41:30,660 --> 03:41:32,699
undo all of the delete delete we've been

3504
03:41:32,699 --> 03:41:34,680
doing because they use reflection in a

3505
03:41:34,680 --> 03:41:37,260
library so we get these things if we

3506
03:41:37,260 --> 03:41:39,359
don't rely on the on the runtime types

3507
03:41:39,359 --> 03:41:40,620
at all

3508
03:41:40,620 --> 03:41:42,420
um and also while we're talking about

3509
03:41:42,420 --> 03:41:45,300
runtime types and static types I also

3510
03:41:45,300 --> 03:41:46,620
need to mention the broccoli of

3511
03:41:46,620 --> 03:41:49,319
programming exceptions everybody hates

3512
03:41:49,319 --> 03:41:50,640
them everybody knows they're good for

3513
03:41:50,640 --> 03:41:53,399
you yeah what are we going to do my

3514
03:41:53,399 --> 03:41:54,899
advice is always use checked exceptions

3515
03:41:54,899 --> 03:41:56,760
instead of unchecked exceptions at least

3516
03:41:56,760 --> 03:41:58,800
of course for the same reason that I'm

3517
03:41:58,800 --> 03:42:00,120
saying that the types are important

3518
03:42:00,120 --> 03:42:03,859
everywhere else this is also

3519
03:42:10,979 --> 03:42:14,000
a runtime

3520
03:44:02,899 --> 03:44:06,080
so now

3521
03:44:15,720 --> 03:44:18,180
because we're using visitor pattern and

3522
03:44:18,180 --> 03:44:20,819
the thing is in doing so we actually

3523
03:44:20,819 --> 03:44:22,979
have this uh have this thing that this

3524
03:44:22,979 --> 03:44:25,080
St down here actually pointed to this

3525
03:44:25,080 --> 03:44:26,760
one which would have caused an infinite

3526
03:44:26,760 --> 03:44:28,380
recursion in fact all of the

3527
03:44:28,380 --> 03:44:30,060
implementations of map we've seen had

3528
03:44:30,060 --> 03:44:31,859
infinite Loops in them and I'm betting

3529
03:44:31,859 --> 03:44:33,600
nobody noticed which is super super

3530
03:44:33,600 --> 03:44:35,520
unfortunate that's also a very common

3531
03:44:35,520 --> 03:44:37,680
problem in code in object-oriented code

3532
03:44:37,680 --> 03:44:40,319
bases but this one over here Shadows the

3533
03:44:40,319 --> 03:44:42,960
outer St so it will actually work and so

3534
03:44:42,960 --> 03:44:44,220
this is the first version that actually

3535
03:44:44,220 --> 03:44:46,439
works of all of the code

3536
03:44:46,439 --> 03:44:48,660
and the thing is uh

3537
03:44:48,660 --> 03:44:51,600
we encountered a wild design pattern uh

3538
03:44:51,600 --> 03:44:53,340
in fact I'm talking about strategy

3539
03:44:53,340 --> 03:44:55,620
pattern in fact it has a tendency to pop

3540
03:44:55,620 --> 03:44:57,359
up in a lot of places and it's sort of

3541
03:44:57,359 --> 03:44:58,739
been lurking all throughout this

3542
03:44:58,739 --> 03:45:01,560
presentation uh in that uh in the in the

3543
03:45:01,560 --> 03:45:02,939
introduction that I did when I

3544
03:45:02,939 --> 03:45:04,680
introduced the example there was a there

3545
03:45:04,680 --> 03:45:06,120
was like Australia pattern hiding up

3546
03:45:06,120 --> 03:45:07,739
there when we talked about piano numbers

3547
03:45:07,739 --> 03:45:09,540
there was a strategy pattern there later

3548
03:45:09,540 --> 03:45:10,979
binding had one over there with the

3549
03:45:10,979 --> 03:45:12,899
algorithms we had one for null object

3550
03:45:12,899 --> 03:45:14,580
pattern it's literally a Australia

3551
03:45:14,580 --> 03:45:17,040
pattern visitor pattern also has one oh

3552
03:45:17,040 --> 03:45:19,140
this animated not good yeah but it's

3553
03:45:19,140 --> 03:45:20,399
down there

3554
03:45:20,399 --> 03:45:22,260
um and the reason that this Australia

3555
03:45:22,260 --> 03:45:23,520
pattern emerges everywhere is because

3556
03:45:23,520 --> 03:45:24,899
it's sort of fundamental for everything

3557
03:45:24,899 --> 03:45:26,640
we've been talking about and I'd like to

3558
03:45:26,640 --> 03:45:28,380
just show you how it emerges like

3559
03:45:28,380 --> 03:45:31,260
because in the in the original Blue Book

3560
03:45:31,260 --> 03:45:35,100
of uh handed To Us by by the gangafo

3561
03:45:35,100 --> 03:45:37,080
um it's sort of a here you have write up

3562
03:45:37,080 --> 03:45:39,239
draw your entire design as a uml diagram

3563
03:45:39,239 --> 03:45:40,800
and then spot where all of the variation

3564
03:45:40,800 --> 03:45:42,540
points are going to be and it's like

3565
03:45:42,540 --> 03:45:44,040
that's not what happens in the real

3566
03:45:44,040 --> 03:45:46,319
world at all instead I like to see

3567
03:45:46,319 --> 03:45:47,399
strategy pattern as something that

3568
03:45:47,399 --> 03:45:49,199
emerges when you actually unify AI two

3569
03:45:49,199 --> 03:45:51,060
pieces of coat that are similar in this

3570
03:45:51,060 --> 03:45:53,399
case I have a method for finding the

3571
03:45:53,399 --> 03:45:55,620
maximum number of a of an array and also

3572
03:45:55,620 --> 03:45:57,239
to sum all of the numbers in an array

3573
03:45:57,239 --> 03:45:59,220
and these are pretty similar so we might

3574
03:45:59,220 --> 03:46:01,260
want to unify them the first step is to

3575
03:46:01,260 --> 03:46:03,300
go and pick out all of the things that

3576
03:46:03,300 --> 03:46:06,600
are different right we no wait One Step

3577
03:46:06,600 --> 03:46:08,220
first first we make them a little bit

3578
03:46:08,220 --> 03:46:10,080
more similar by instead of having the

3579
03:46:10,080 --> 03:46:11,640
addition and the if we actually push it

3580
03:46:11,640 --> 03:46:14,340
into just say have one equals and then a

3581
03:46:14,340 --> 03:46:17,100
something in there and so now we can go

3582
03:46:17,100 --> 03:46:18,600
and pick out everything that's different

3583
03:46:18,600 --> 03:46:21,120
and so we'll end up with these pieces of

3584
03:46:21,120 --> 03:46:22,859
code all of that is the equal stuff and

3585
03:46:22,859 --> 03:46:25,140
these two are also equal so we only need

3586
03:46:25,140 --> 03:46:26,699
to continue with one of them we just

3587
03:46:26,699 --> 03:46:28,620
pick whatever now we just need to fill

3588
03:46:28,620 --> 03:46:30,000
all of these holes and then we have our

3589
03:46:30,000 --> 03:46:32,040
implementation the first thing is the

3590
03:46:32,040 --> 03:46:33,779
variable and that's very easy to fill we

3591
03:46:33,779 --> 03:46:35,640
just put something like result or some

3592
03:46:35,640 --> 03:46:37,979
variable name the second thing is we

3593
03:46:37,979 --> 03:46:39,180
need to know what the starting thing is

3594
03:46:39,180 --> 03:46:40,680
so we just add that as a parameter

3595
03:46:40,680 --> 03:46:42,060
whenever we don't know what to add we

3596
03:46:42,060 --> 03:46:44,520
can just put it as a perimeter and then

3597
03:46:44,520 --> 03:46:46,080
we have the the big hole in the middle

3598
03:46:46,080 --> 03:46:48,239
which is the hardest one to fill so we

3599
03:46:48,239 --> 03:46:50,220
can just go and add a new interface to

3600
03:46:50,220 --> 03:46:51,239
say I don't know what's going to run

3601
03:46:51,239 --> 03:46:53,040
here but you can just hand it to me and

3602
03:46:53,040 --> 03:46:54,479
then add a new parameter as we did

3603
03:46:54,479 --> 03:46:55,260
before

3604
03:46:55,260 --> 03:46:56,939
so here just something that takes two

3605
03:46:56,939 --> 03:46:59,160
numbers that does something with it

3606
03:46:59,160 --> 03:47:01,380
and now the only thing we need to to uh

3607
03:47:01,380 --> 03:47:03,120
to fill in is the name of the thing and

3608
03:47:03,120 --> 03:47:04,739
in a lot of languages this is called

3609
03:47:04,739 --> 03:47:06,600
reduce it is also called fold or

3610
03:47:06,600 --> 03:47:09,000
whatever has a lot of names naming is of

3611
03:47:09,000 --> 03:47:10,500
course notoriously difficult so I'm not

3612
03:47:10,500 --> 03:47:13,199
going to spend a lot of time on it

3613
03:47:13,199 --> 03:47:14,880
um now we can go and we can actually

3614
03:47:14,880 --> 03:47:16,620
take the maximum function that we had at

3615
03:47:16,620 --> 03:47:18,239
the beginning and implement it using

3616
03:47:18,239 --> 03:47:20,460
this new reduce thing so we just call

3617
03:47:20,460 --> 03:47:23,399
reduce with the red value from our input

3618
03:47:23,399 --> 03:47:24,899
and then the the function that we're

3619
03:47:24,899 --> 03:47:27,060
using down there as the maximum operator

3620
03:47:27,060 --> 03:47:29,460
and the same we can do with the sum we

3621
03:47:29,460 --> 03:47:31,500
just call reduce but with zero and then

3622
03:47:31,500 --> 03:47:33,540
the addition down there and here we have

3623
03:47:33,540 --> 03:47:36,000
it the operator thing that we made where

3624
03:47:36,000 --> 03:47:37,800
we didn't know what to put is a strategy

3625
03:47:37,800 --> 03:47:39,840
pattern it just appears from unifying

3626
03:47:39,840 --> 03:47:42,359
similar code and you can unify any code

3627
03:47:42,359 --> 03:47:44,880
by just doing these same things right

3628
03:47:44,880 --> 03:47:46,859
this one as soon as you have that

3629
03:47:46,859 --> 03:47:49,080
anywhere it's a it's a it's a strategy

3630
03:47:49,080 --> 03:47:49,859
pattern

3631
03:47:49,859 --> 03:47:52,020
and it's super powerful it's like that's

3632
03:47:52,020 --> 03:47:53,699
one of the things that make all of what

3633
03:47:53,699 --> 03:47:56,220
we talked about uh possible so if you

3634
03:47:56,220 --> 03:47:57,840
take just one thing away first of all

3635
03:47:57,840 --> 03:48:00,540
the talk has literally six things in the

3636
03:48:00,540 --> 03:48:02,100
description so it's unfortunate if you

3637
03:48:02,100 --> 03:48:04,319
can only remember one but if you can it

3638
03:48:04,319 --> 03:48:06,000
should be how powerful strategy pattern

3639
03:48:06,000 --> 03:48:08,340
is because it is amazingly powerful and

3640
03:48:08,340 --> 03:48:09,840
if you can have an extra thing it should

3641
03:48:09,840 --> 03:48:12,000
be how powerful the compiler is because

3642
03:48:12,000 --> 03:48:14,460
uh when you have the the strategy

3643
03:48:14,460 --> 03:48:16,859
pattern managing the coupling and you

3644
03:48:16,859 --> 03:48:19,439
have the compiler eliminating the the

3645
03:48:19,439 --> 03:48:22,260
invariants these two together can save

3646
03:48:22,260 --> 03:48:24,239
any code base like they can find almost

3647
03:48:24,239 --> 03:48:25,560
all of the issues that are going to be

3648
03:48:25,560 --> 03:48:27,720
in there even without any testing or

3649
03:48:27,720 --> 03:48:29,399
running the code at all at University

3650
03:48:29,399 --> 03:48:30,960
when we were studying programming

3651
03:48:30,960 --> 03:48:33,180
languages we had we had a we had sort of

3652
03:48:33,180 --> 03:48:35,460
a joke where we said well exceptions are

3653
03:48:35,460 --> 03:48:36,720
for people who actually run their code

3654
03:48:36,720 --> 03:48:38,640
we never do that we just type it and

3655
03:48:38,640 --> 03:48:40,560
then it's probably good deploy it ship

3656
03:48:40,560 --> 03:48:43,859
it these have been the sex the six

3657
03:48:43,859 --> 03:48:45,899
principles that we've been using to

3658
03:48:45,899 --> 03:48:47,520
actually unlock the power of strategy

3659
03:48:47,520 --> 03:48:49,800
pattern and of the of the compiler um

3660
03:48:49,800 --> 03:48:52,020
it's been use immutability field should

3661
03:48:52,020 --> 03:48:54,779
be a final or read-only use recursion to

3662
03:48:54,779 --> 03:48:56,520
match the data recursive data requires a

3663
03:48:56,520 --> 03:48:58,560
function uh prefer later binding later

3664
03:48:58,560 --> 03:49:00,779
decisions give us more reusability we

3665
03:49:00,779 --> 03:49:02,760
have don't use null and instead use null

3666
03:49:02,760 --> 03:49:05,100
object pattern and don't use runtime

3667
03:49:05,100 --> 03:49:06,899
types so no cast no instance of no

3668
03:49:06,899 --> 03:49:09,840
Dynamic no reflection and use algebraic

3669
03:49:09,840 --> 03:49:11,520
data types instead something like

3670
03:49:11,520 --> 03:49:13,500
visitor pattern and all of these have

3671
03:49:13,500 --> 03:49:15,600
been compiler driven like we never had

3672
03:49:15,600 --> 03:49:17,399
to make any of the decisions ourselves

3673
03:49:17,399 --> 03:49:19,199
basically the compiler tells us where

3674
03:49:19,199 --> 03:49:21,120
the errors are where we need to go and

3675
03:49:21,120 --> 03:49:22,979
fix these things and each of them have

3676
03:49:22,979 --> 03:49:24,960
literally you can look up the solution

3677
03:49:24,960 --> 03:49:27,420
so this is much more likely to succeed

3678
03:49:27,420 --> 03:49:29,399
for even for novices that are just

3679
03:49:29,399 --> 03:49:31,560
following blind rules without much

3680
03:49:31,560 --> 03:49:33,660
understanding this will work whereas

3681
03:49:33,660 --> 03:49:35,880
testing tend to not

3682
03:49:35,880 --> 03:49:39,800
thank you very much for your time

3683
03:49:45,000 --> 03:49:48,500
to anyone who got questions

3684
03:49:50,100 --> 03:49:52,880
we have two

3685
03:49:57,140 --> 03:50:01,500
so what's your take on the choice of the

3686
03:50:01,500 --> 03:50:03,000
use of functional programming languages

3687
03:50:03,000 --> 03:50:05,160
a little bit louder yeah that it seems

3688
03:50:05,160 --> 03:50:06,840
that a lot of these principles are kind

3689
03:50:06,840 --> 03:50:09,000
of like very much baked in into a

3690
03:50:09,000 --> 03:50:11,060
functional programming languages

3691
03:50:11,060 --> 03:50:14,040
so what's your take on that and what's

3692
03:50:14,040 --> 03:50:15,840
your take on discipline not because I

3693
03:50:15,840 --> 03:50:17,939
feel that you know if you can cheat one

3694
03:50:17,939 --> 03:50:20,160
will cheat eventually you know like if

3695
03:50:20,160 --> 03:50:21,420
like there's not like a strong

3696
03:50:21,420 --> 03:50:24,180
enforcement for following certain rules

3697
03:50:24,180 --> 03:50:27,120
like a dual cheat like one I will cheat

3698
03:50:27,120 --> 03:50:28,979
not like someone else will cheat no like

3699
03:50:28,979 --> 03:50:30,420
someone else will not follow this no

3700
03:50:30,420 --> 03:50:33,120
whereas like where where like there's

3701
03:50:33,120 --> 03:50:35,399
like uh other kind of like well there's

3702
03:50:35,399 --> 03:50:37,140
languages where these principles are

3703
03:50:37,140 --> 03:50:38,640
pretty much baked into the language

3704
03:50:38,640 --> 03:50:41,880
itself yeah yeah and like also kind of

3705
03:50:41,880 --> 03:50:43,800
like the the like would you consider

3706
03:50:43,800 --> 03:50:46,560
convenience to also learn would you

3707
03:50:46,560 --> 03:50:48,060
consider convenient to learn a

3708
03:50:48,060 --> 03:50:50,340
functional programming languages as an

3709
03:50:50,340 --> 03:50:52,500
object oriented I feel also that the use

3710
03:50:52,500 --> 03:50:54,180
of functional programming languages has

3711
03:50:54,180 --> 03:50:56,640
changed the way I think about the state

3712
03:50:56,640 --> 03:50:59,399
and mutability in object oriented

3713
03:50:59,399 --> 03:51:00,600
yes

3714
03:51:00,600 --> 03:51:03,779
yeah so I'll just recap what I what I

3715
03:51:03,779 --> 03:51:05,040
what I think the question is because

3716
03:51:05,040 --> 03:51:07,080
it's a little bit hard to hear uh so

3717
03:51:07,080 --> 03:51:08,640
you're asking whether how this relates

3718
03:51:08,640 --> 03:51:10,500
to functional languages and whether I

3719
03:51:10,500 --> 03:51:11,699
would recommend getting into functional

3720
03:51:11,699 --> 03:51:13,979
programming if you're already an oo is

3721
03:51:13,979 --> 03:51:16,580
that great yeah

3722
03:51:18,420 --> 03:51:19,500
yeah

3723
03:51:19,500 --> 03:51:20,460
okay

3724
03:51:20,460 --> 03:51:23,580
so um yeah so this is of course very

3725
03:51:23,580 --> 03:51:24,720
closely related to functional

3726
03:51:24,720 --> 03:51:26,040
programming and the principles are

3727
03:51:26,040 --> 03:51:27,720
strolling directly from functional

3728
03:51:27,720 --> 03:51:29,040
programming because functional programs

3729
03:51:29,040 --> 03:51:30,899
tend to have fewer bugs so that's sort

3730
03:51:30,899 --> 03:51:32,640
of the sort of the secret to this whole

3731
03:51:32,640 --> 03:51:35,220
thing uh but the the other thing that

3732
03:51:35,220 --> 03:51:37,859
once you've been in the industry or

3733
03:51:37,859 --> 03:51:39,239
you've met people and you've talked to a

3734
03:51:39,239 --> 03:51:40,500
lot of developers you'll notice that the

3735
03:51:40,500 --> 03:51:41,939
second you say functional programming

3736
03:51:41,939 --> 03:51:43,859
they stop listening unless they already

3737
03:51:43,859 --> 03:51:46,319
know everything you're gonna say so it's

3738
03:51:46,319 --> 03:51:48,779
very difficult to talk to other people

3739
03:51:48,779 --> 03:51:50,939
like it's very segregated right now with

3740
03:51:50,939 --> 03:51:52,859
the functional programmers and the oo so

3741
03:51:52,859 --> 03:51:55,800
my sort of life mission in in a way has

3742
03:51:55,800 --> 03:51:58,560
been to sort of help uh oo programmers

3743
03:51:58,560 --> 03:52:01,080
get all of the same advantages that FP

3744
03:52:01,080 --> 03:52:03,420
gives you but without ever scaring them

3745
03:52:03,420 --> 03:52:05,880
off and so all of these things apply

3746
03:52:05,880 --> 03:52:07,739
equally to both paradigms but as you say

3747
03:52:07,739 --> 03:52:09,720
it's more natural to do some of these

3748
03:52:09,720 --> 03:52:11,640
things in a functional setting

3749
03:52:11,640 --> 03:52:14,279
but it is very hard to go from oo

3750
03:52:14,279 --> 03:52:16,319
directly to FP if you don't understand

3751
03:52:16,319 --> 03:52:18,000
these principles you are going to have

3752
03:52:18,000 --> 03:52:21,120
to learn both the new paradigm the new

3753
03:52:21,120 --> 03:52:23,819
syntax the new standard library and like

3754
03:52:23,819 --> 03:52:25,500
change your entire way of thinking and

3755
03:52:25,500 --> 03:52:27,479
that does just isn't how humans are

3756
03:52:27,479 --> 03:52:29,640
built so what I'm trying to do is bridge

3757
03:52:29,640 --> 03:52:32,220
that Gap by making smaller smaller steps

3758
03:52:32,220 --> 03:52:33,899
so you can choose the appropriate tool

3759
03:52:33,899 --> 03:52:36,600
for for the appropriate task and being a

3760
03:52:36,600 --> 03:52:38,460
previous a former programming language

3761
03:52:38,460 --> 03:52:41,100
researcher I'm two I'm language agnostic

3762
03:52:41,100 --> 03:52:42,899
I just switch between them very fluently

3763
03:52:42,899 --> 03:52:45,300
where something makes more sense

3764
03:52:45,300 --> 03:52:47,239
um so I think if you are an

3765
03:52:47,239 --> 03:52:49,680
object-oriented programmer now

3766
03:52:49,680 --> 03:52:51,720
depending on how young you are if you're

3767
03:52:51,720 --> 03:52:53,699
in your early 20s I still think you

3768
03:52:53,699 --> 03:52:54,840
should learn a functional programming

3769
03:52:54,840 --> 03:52:55,920
language in fact I think you should

3770
03:52:55,920 --> 03:52:58,439
learn multiple different paradigms uh

3771
03:52:58,439 --> 03:53:00,600
and in the olden days people like to say

3772
03:53:00,600 --> 03:53:02,939
that you should learn one new language a

3773
03:53:02,939 --> 03:53:04,439
year I think it's a pragmatic program as

3774
03:53:04,439 --> 03:53:06,600
it's one language a year I think that's

3775
03:53:06,600 --> 03:53:08,399
uh not gonna help a lot of people

3776
03:53:08,399 --> 03:53:09,899
because there are so many Frameworks now

3777
03:53:09,899 --> 03:53:12,000
that we also need to learn that probably

3778
03:53:12,000 --> 03:53:13,859
learning a new technology is a better

3779
03:53:13,859 --> 03:53:16,859
piece of advice but also because a lot

3780
03:53:16,859 --> 03:53:18,479
of languages are very closely related

3781
03:53:18,479 --> 03:53:20,640
like if you're learning if you know Java

3782
03:53:20,640 --> 03:53:21,960
and then learn C sharp that will take

3783
03:53:21,960 --> 03:53:23,640
you two hours and it's like you're done

3784
03:53:23,640 --> 03:53:25,380
for the year it's sort of but it also

3785
03:53:25,380 --> 03:53:26,760
hasn't contributed anything to the way

3786
03:53:26,760 --> 03:53:28,199
that you think so learning a new

3787
03:53:28,199 --> 03:53:30,180
paradigm is much more helpful if you're

3788
03:53:30,180 --> 03:53:32,580
young if you're a sort of in an

3789
03:53:32,580 --> 03:53:35,040
established career I think still

3790
03:53:35,040 --> 03:53:37,140
sticking to the principles instead and

3791
03:53:37,140 --> 03:53:39,000
learning mastering your craft will

3792
03:53:39,000 --> 03:53:41,100
probably be better effort better spent

3793
03:53:41,100 --> 03:53:42,779
than learning a completely new paradigm

3794
03:53:42,779 --> 03:53:44,640
just because of the effort it is to go

3795
03:53:44,640 --> 03:53:48,439
up that steep learning curve

3796
03:53:48,660 --> 03:53:50,699
yeah

3797
03:53:50,699 --> 03:53:53,220
like in the role of discipline how would

3798
03:53:53,220 --> 03:53:54,779
you tackle that like a pull request

3799
03:53:54,779 --> 03:53:57,239
preview like reviews like uh you know

3800
03:53:57,239 --> 03:53:59,160
like how do you deal with you know like

3801
03:53:59,160 --> 03:54:01,260
this need of like enforcing a certain

3802
03:54:01,260 --> 03:54:03,660
discipline yeah uh I don't like pull

3803
03:54:03,660 --> 03:54:05,660
requests because they're they're

3804
03:54:05,660 --> 03:54:07,979
unrecommended by all of the research we

3805
03:54:07,979 --> 03:54:10,439
have on uh software practices uh because

3806
03:54:10,439 --> 03:54:12,779
they tend to put in a blocker into your

3807
03:54:12,779 --> 03:54:14,779
pipeline and you want code going as

3808
03:54:14,779 --> 03:54:16,620
streamlined through your pipeline as

3809
03:54:16,620 --> 03:54:18,239
possible so don't like pull requests at

3810
03:54:18,239 --> 03:54:20,460
least not when they are asynchronous I

3811
03:54:20,460 --> 03:54:21,960
love synchronous pull requests when you

3812
03:54:21,960 --> 03:54:23,399
have two people looking at the same code

3813
03:54:23,399 --> 03:54:25,439
at the same time right or even the whole

3814
03:54:25,439 --> 03:54:27,359
team when you're working as a team and

3815
03:54:27,359 --> 03:54:29,220
staying in Tech learning these things

3816
03:54:29,220 --> 03:54:31,500
becomes possible if you if you have one

3817
03:54:31,500 --> 03:54:33,420
programmer and you teach him here are

3818
03:54:33,420 --> 03:54:34,739
six new principles they're really cool

3819
03:54:34,739 --> 03:54:36,600
they're going to do amazing for you with

3820
03:54:36,600 --> 03:54:38,939
no work at all then immediately when

3821
03:54:38,939 --> 03:54:40,680
they see the first ticket of real work

3822
03:54:40,680 --> 03:54:42,060
they're going to work on they fill up

3823
03:54:42,060 --> 03:54:44,580
their capacity with that ticket and then

3824
03:54:44,580 --> 03:54:46,380
they continue so you can't build new

3825
03:54:46,380 --> 03:54:49,040
habits when you have someone already

3826
03:54:49,040 --> 03:54:52,739
doing work and so I always always when I

3827
03:54:52,739 --> 03:54:54,720
work with Team enforce pair programming

3828
03:54:54,720 --> 03:54:56,640
and MOB programming at least one day a

3829
03:54:56,640 --> 03:54:58,260
week because then they can actually

3830
03:54:58,260 --> 03:55:00,060
build new habits and they can start

3831
03:55:00,060 --> 03:55:02,279
doing things and something like teaching

3832
03:55:02,279 --> 03:55:04,380
people to commit more often or smaller

3833
03:55:04,380 --> 03:55:06,840
or new messages it's impossible if you

3834
03:55:06,840 --> 03:55:08,399
just tell them why it's impossible

3835
03:55:08,399 --> 03:55:10,680
important they will agree with you for

3836
03:55:10,680 --> 03:55:11,939
an hour and a half and then they'll go

3837
03:55:11,939 --> 03:55:13,920
and do the same thing they did yesterday

3838
03:55:13,920 --> 03:55:15,600
so it like it you're not going to change

3839
03:55:15,600 --> 03:55:17,040
anything so pair programming and more

3840
03:55:17,040 --> 03:55:18,720
programming that's that's how you build

3841
03:55:18,720 --> 03:55:21,319
new habits

3842
03:55:23,340 --> 03:55:25,979
uh thanks for all the very nice talk um

3843
03:55:25,979 --> 03:55:30,720
so this was a lot of java focused code

3844
03:55:30,720 --> 03:55:33,060
and I was wondering

3845
03:55:33,060 --> 03:55:35,279
do you also have criticisms for more

3846
03:55:35,279 --> 03:55:37,319
recent languages because especially

3847
03:55:37,319 --> 03:55:39,840
languages like rastev

3848
03:55:39,840 --> 03:55:42,060
addressed all of these concerns but

3849
03:55:42,060 --> 03:55:43,739
there's probably something that maybe

3850
03:55:43,739 --> 03:55:45,960
you say okay this is still not quite

3851
03:55:45,960 --> 03:55:47,720
right

3852
03:55:47,720 --> 03:55:50,399
what do you mean not recent Javas from

3853
03:55:50,399 --> 03:55:53,520
like the 90s or something I could have

3854
03:55:53,520 --> 03:55:57,000
done this in fortnum so so the question

3855
03:55:57,000 --> 03:55:59,880
just to recap it is whether newer

3856
03:55:59,880 --> 03:56:01,380
languages are better on some of these

3857
03:56:01,380 --> 03:56:04,080
things and certainly rust is like a a

3858
03:56:04,080 --> 03:56:05,939
prime example of that and typescript as

3859
03:56:05,939 --> 03:56:07,620
well they have amazingly cool type

3860
03:56:07,620 --> 03:56:09,239
systems that are new and revolutionary

3861
03:56:09,239 --> 03:56:10,979
and can do things that no other language

3862
03:56:10,979 --> 03:56:12,420
really can

3863
03:56:12,420 --> 03:56:14,699
um they were both included actually in

3864
03:56:14,699 --> 03:56:16,859
the no none of the new languages have it

3865
03:56:16,859 --> 03:56:18,899
either Unfortunately they are neither

3866
03:56:18,899 --> 03:56:21,840
sound nor decidable I think rust is the

3867
03:56:21,840 --> 03:56:23,939
should be the de facto standard for

3868
03:56:23,939 --> 03:56:26,640
embedded code because it is both faster

3869
03:56:26,640 --> 03:56:28,319
and it has the borrowing type system

3870
03:56:28,319 --> 03:56:29,880
which eliminates a whole bunch of

3871
03:56:29,880 --> 03:56:32,040
especially multi-threading issues and

3872
03:56:32,040 --> 03:56:34,080
stuff like that I think Russ is really

3873
03:56:34,080 --> 03:56:35,640
cool I tried implementing my own rust

3874
03:56:35,640 --> 03:56:37,319
because I thought it was an interesting

3875
03:56:37,319 --> 03:56:39,180
case study but I didn't get very far

3876
03:56:39,180 --> 03:56:41,040
it's very complicated

3877
03:56:41,040 --> 03:56:43,319
um I also think uh with the with

3878
03:56:43,319 --> 03:56:45,060
typescripts uh Union intersection types

3879
03:56:45,060 --> 03:56:46,620
you can also encode even more

3880
03:56:46,620 --> 03:56:48,180
information into your compiler the more

3881
03:56:48,180 --> 03:56:49,859
you can teach the compiler about your

3882
03:56:49,859 --> 03:56:52,920
code the better it can help you uh so I

3883
03:56:52,920 --> 03:56:54,180
think modern languages are getting

3884
03:56:54,180 --> 03:56:56,520
better at that especially also with the

3885
03:56:56,520 --> 03:56:59,220
more rise of functional code embedded

3886
03:56:59,220 --> 03:57:01,140
into it so you have Arrow functions in a

3887
03:57:01,140 --> 03:57:02,640
lot of languages and that's a

3888
03:57:02,640 --> 03:57:05,399
prerequisite to do most of this stuff in

3889
03:57:05,399 --> 03:57:08,100
some way and so as long as we have if

3890
03:57:08,100 --> 03:57:09,660
you have Legacy systems they're going to

3891
03:57:09,660 --> 03:57:10,979
have something like instance of or

3892
03:57:10,979 --> 03:57:12,300
reflection and everything's going to be

3893
03:57:12,300 --> 03:57:14,279
out the window newer languages I think

3894
03:57:14,279 --> 03:57:16,020
are better at not

3895
03:57:16,020 --> 03:57:18,899
making it so easy to break at least the

3896
03:57:18,899 --> 03:57:20,640
um the compiler

3897
03:57:20,640 --> 03:57:22,500
I'm hoping if we're moving to a better

3898
03:57:22,500 --> 03:57:25,080
place there's also a lot of rise in the

3899
03:57:25,080 --> 03:57:26,760
new languages that come out that I have

3900
03:57:26,760 --> 03:57:29,100
functional either course or entirely

3901
03:57:29,100 --> 03:57:30,960
functional so I think it is getting

3902
03:57:30,960 --> 03:57:32,580
better it but I still think we have

3903
03:57:32,580 --> 03:57:36,239
probably 15 20 years of oh

3904
03:57:36,239 --> 03:57:38,960
I'm guessing

3905
03:57:39,300 --> 03:57:42,479
right thank you to Christian for this

3906
03:57:42,479 --> 03:57:45,060
talk if you have more questions here is

3907
03:57:45,060 --> 03:57:48,060
uh probably available for some time

3908
03:57:48,060 --> 03:57:50,819
um thank you for talk about code quality

3909
03:57:50,819 --> 03:57:52,850
foreign

3910
03:57:52,850 --> 03:57:58,599
[Applause]

