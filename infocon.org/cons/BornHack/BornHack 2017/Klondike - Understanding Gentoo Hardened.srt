1
00:00:06,529 --> 00:00:10,590
let's go okay

2
00:00:08,309 --> 00:00:12,450
so whilst I<font color="#E5E5E5"> tried to get the network</font>

3
00:00:10,590 --> 00:00:14,910
access<font color="#CCCCCC"> I'm going to</font><font color="#E5E5E5"> explain what's the</font>

4
00:00:12,450 --> 00:00:16,439
<font color="#CCCCCC">end</font><font color="#E5E5E5"> to Harland</font><font color="#CCCCCC"> I mean I have</font><font color="#E5E5E5"> done it so</font>

5
00:00:14,910 --> 00:00:18,650
many times that I<font color="#CCCCCC"> don't ever need to</font>

6
00:00:16,440 --> 00:00:22,260
<font color="#CCCCCC">look at</font><font color="#E5E5E5"> anybody to be able to</font><font color="#CCCCCC"> do it</font>

7
00:00:18,650 --> 00:00:23,970
again<font color="#CCCCCC"> - is</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> Linux distribution that is</font>

8
00:00:22,260 --> 00:00:25,800
<font color="#E5E5E5">so spaced it that means that you</font>

9
00:00:23,970 --> 00:00:27,390
basically download<font color="#E5E5E5"> the sources using a</font>

10
00:00:25,800 --> 00:00:29,730
tool and that tool will compile

11
00:00:27,390 --> 00:00:31,349
everything<font color="#E5E5E5"> for you I mean it's not</font>

12
00:00:29,730 --> 00:00:33,270
likely news from scratch<font color="#E5E5E5"> what you have</font>

13
00:00:31,349 --> 00:00:35,489
to actually<font color="#E5E5E5"> do the compilation by hand</font>

14
00:00:33,270 --> 00:00:38,309
but it's quite close<font color="#CCCCCC"> in the sense</font><font color="#E5E5E5"> that</font>

15
00:00:35,489 --> 00:00:40,559
it will<font color="#E5E5E5"> actually it you usually don't</font>

16
00:00:38,309 --> 00:00:42,540
use binary<font color="#E5E5E5"> packages with it you can't</font>

17
00:00:40,559 --> 00:00:43,949
use<font color="#E5E5E5"> binary packages if you want you can</font>

18
00:00:42,540 --> 00:00:47,129
<font color="#CCCCCC">make your own binary</font><font color="#E5E5E5"> packages for your</font>

19
00:00:43,950 --> 00:00:49,920
<font color="#CCCCCC">own machines</font><font color="#E5E5E5"> but you usually will</font><font color="#CCCCCC"> not</font>

20
00:00:47,129 --> 00:00:54,629
find public binary packages<font color="#E5E5E5"> at least not</font>

21
00:00:49,920 --> 00:00:56,910
official ones<font color="#E5E5E5"> so one of the things that</font>

22
00:00:54,629 --> 00:00:59,430
<font color="#CCCCCC">this</font><font color="#E5E5E5"> gives us is that we can</font><font color="#CCCCCC"> actually</font>

23
00:00:56,910 --> 00:01:01,739
enable a lot of hardening features on

24
00:00:59,430 --> 00:01:03,870
the<font color="#E5E5E5"> compiler level when we are combining</font>

25
00:01:01,739 --> 00:01:07,048
two sources<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example things like</font><font color="#E5E5E5"> a</font>

26
00:01:03,870 --> 00:01:08,970
<font color="#E5E5E5">ESL air are really effective if your</font>

27
00:01:07,049 --> 00:01:11,430
binaries are compile it using position

28
00:01:08,970 --> 00:01:13,289
independent code so the binary<font color="#E5E5E5"> will be</font>

29
00:01:11,430 --> 00:01:15,150
at a random position every time<font color="#CCCCCC"> that is</font>

30
00:01:13,290 --> 00:01:17,549
executed so an attacker cannot try to

31
00:01:15,150 --> 00:01:20,009
figure<font color="#E5E5E5"> out</font><font color="#CCCCCC"> where the</font><font color="#E5E5E5"> little bits of</font><font color="#CCCCCC"> his</font>

32
00:01:17,549 --> 00:01:22,140
<font color="#E5E5E5">memory that he wants to use or the</font>

33
00:01:20,009 --> 00:01:26,000
little<font color="#E5E5E5"> snippets for the rhythm to</font><font color="#CCCCCC"> for</font>

34
00:01:22,140 --> 00:01:29,250
<font color="#CCCCCC">the</font><font color="#E5E5E5"> return based programming Hart found</font>

35
00:01:26,000 --> 00:01:31,170
in a<font color="#E5E5E5"> similar way</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> we can also</font>

36
00:01:29,250 --> 00:01:33,570
use things<font color="#E5E5E5"> like a</font><font color="#CCCCCC"> stockist machine</font>

37
00:01:31,170 --> 00:01:36,689
protector<font color="#E5E5E5"> that's how fully old I mean I</font>

38
00:01:33,570 --> 00:01:39,329
think<font color="#E5E5E5"> as tax machine protector was like</font>

39
00:01:36,689 --> 00:01:43,829
a<font color="#CCCCCC"> fad</font><font color="#E5E5E5"> five years before I started</font><font color="#CCCCCC"> using</font>

40
00:01:39,329 --> 00:01:46,229
<font color="#CCCCCC">n2 and I am a bit old I guess so</font>

41
00:01:43,829 --> 00:01:49,169
I despite that<font color="#E5E5E5"> it has only started being</font>

42
00:01:46,229 --> 00:01:53,250
<font color="#CCCCCC">used by distributions in</font><font color="#E5E5E5"> the last five</font>

43
00:01:49,170 --> 00:01:54,869
years<font color="#E5E5E5"> maybe four</font><font color="#CCCCCC"> and usually it's not</font>

44
00:01:53,250 --> 00:01:57,180
even applied everywhere it's<font color="#E5E5E5"> only</font>

45
00:01:54,869 --> 00:01:58,590
applied<font color="#E5E5E5"> using some</font><font color="#CCCCCC"> heuristic in order to</font>

46
00:01:57,180 --> 00:02:08,280
make the code as strong as possible

47
00:01:58,590 --> 00:02:10,699
without having<font color="#E5E5E5"> sight problems so give me</font>

48
00:02:08,280 --> 00:02:10,699
a sec<font color="#E5E5E5"> please</font>

49
00:02:14,390 --> 00:02:17,660
then it

50
00:02:25,200 --> 00:02:36,750
okay let's see if I<font color="#E5E5E5"> have I will</font><font color="#CCCCCC"> go</font>

51
00:02:28,810 --> 00:02:38,590
forward<font color="#CCCCCC"> sensor</font><font color="#E5E5E5"> okay so now that you</font>

52
00:02:36,750 --> 00:02:40,480
understand more<font color="#E5E5E5"> or</font><font color="#CCCCCC"> less what's</font><font color="#E5E5E5"> in to</font>

53
00:02:38,590 --> 00:02:43,900
Harland<font color="#E5E5E5"> and</font><font color="#CCCCCC"> watt East idea behind it</font>

54
00:02:40,480 --> 00:02:46,480
I contracted<font color="#CCCCCC"> to explain you why this</font><font color="#E5E5E5"> is</font>

55
00:02:43,900 --> 00:02:48,609
<font color="#CCCCCC">not part of you into itself I</font><font color="#E5E5E5"> mean you</font>

56
00:02:46,480 --> 00:02:50,349
can say<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> security is nice</font><font color="#CCCCCC"> why don't</font>

57
00:02:48,609 --> 00:02:52,659
we provide that to<font color="#E5E5E5"> everybody why do we</font>

58
00:02:50,349 --> 00:02:54,730
actually<font color="#E5E5E5"> require that you follow a few</font>

59
00:02:52,659 --> 00:02:58,328
<font color="#E5E5E5">complicated steps in order to be able to</font>

60
00:02:54,730 --> 00:03:03,518
<font color="#E5E5E5">use it and the reason is that well</font>

61
00:02:58,329 --> 00:03:05,139
the entries for risers<font color="#E5E5E5"> jokes aside</font><font color="#CCCCCC"> most</font>

62
00:03:03,519 --> 00:03:07,599
of the users<font color="#CCCCCC"> that use the end tool just</font>

63
00:03:05,139 --> 00:03:09,340
want to get like the last teeny bit of

64
00:03:07,599 --> 00:03:12,339
<font color="#E5E5E5">performance</font><font color="#CCCCCC"> that they can out of</font><font color="#E5E5E5"> their</font>

65
00:03:09,340 --> 00:03:15,310
<font color="#E5E5E5">computers so</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> measures are</font>

66
00:03:12,340 --> 00:03:19,120
kind of in the way for<font color="#CCCCCC"> it as a</font><font color="#E5E5E5"> matter of</font>

67
00:03:15,310 --> 00:03:23,500
fact<font color="#CCCCCC"> en2</font><font color="#E5E5E5"> hasn't provided SSP until I</font>

68
00:03:19,120 --> 00:03:26,799
<font color="#E5E5E5">think it was GCC 5.2 or 6.0 by default</font>

69
00:03:23,500 --> 00:03:28,209
<font color="#E5E5E5">so what that means is that most users</font>

70
00:03:26,799 --> 00:03:30,280
<font color="#CCCCCC">have been</font><font color="#E5E5E5"> running her really insecure</font>

71
00:03:28,209 --> 00:03:32,440
system<font color="#CCCCCC"> ever ever more insecure than</font>

72
00:03:30,280 --> 00:03:35,620
ubuntu debian or whatever else you can

73
00:03:32,440 --> 00:03:37,419
<font color="#E5E5E5">think that it was</font><font color="#CCCCCC"> take choice I mean</font>

74
00:03:35,620 --> 00:03:38,829
they could actually<font color="#E5E5E5"> use the</font><font color="#CCCCCC"> hardened</font>

75
00:03:37,419 --> 00:03:42,370
profile if they wanted to<font color="#E5E5E5"> care more</font>

76
00:03:38,829 --> 00:03:44,049
about<font color="#CCCCCC"> security at a</font><font color="#E5E5E5"> speed so that is the</font>

77
00:03:42,370 --> 00:03:47,470
main<font color="#CCCCCC"> reason</font><font color="#E5E5E5"> why it's not part of the</font>

78
00:03:44,049 --> 00:03:50,079
boolean to project I mean you<font color="#E5E5E5"> select a</font>

79
00:03:47,470 --> 00:03:52,120
user space hardening features work quite

80
00:03:50,079 --> 00:03:53,769
well<font color="#E5E5E5"> everywhere because they are really</font>

81
00:03:52,120 --> 00:03:55,930
well tested<font color="#E5E5E5"> they are released to test</font>

82
00:03:53,769 --> 00:03:57,970
but when<font color="#E5E5E5"> it comes with things like</font>

83
00:03:55,930 --> 00:04:00,579
integration with the<font color="#CCCCCC"> older sec patches</font>

84
00:03:57,970 --> 00:04:02,739
and stuff<font color="#CCCCCC"> like packs protection that</font>

85
00:04:00,579 --> 00:04:04,629
kind of stuff doesn't<font color="#E5E5E5"> work so well so</font>

86
00:04:02,739 --> 00:04:06,069
<font color="#CCCCCC">you actually</font><font color="#E5E5E5"> need to</font><font color="#CCCCCC"> have a little bit</font>

87
00:04:04,629 --> 00:04:10,629
of<font color="#E5E5E5"> knowledge to know how to troubleshoot</font>

88
00:04:06,069 --> 00:04:12,790
the problems by<font color="#CCCCCC"> yourself so well let's</font>

89
00:04:10,629 --> 00:04:15,459
speak<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> protection systems that</font>

90
00:04:12,790 --> 00:04:16,798
are offered<font color="#E5E5E5"> I'm going to focus</font><font color="#CCCCCC"> first on</font>

91
00:04:15,459 --> 00:04:19,418
yourself space protections

92
00:04:16,798 --> 00:04:21,548
then<font color="#E5E5E5"> depending on how much time we have</font>

93
00:04:19,418 --> 00:04:24,250
I<font color="#CCCCCC"> will focus on kernel space protections</font>

94
00:04:21,548 --> 00:04:25,810
it's very important<font color="#CCCCCC"> that if you have any</font>

95
00:04:24,250 --> 00:04:28,690
questions if you cannot understand what

96
00:04:25,810 --> 00:04:31,300
<font color="#E5E5E5">I am</font><font color="#CCCCCC"> saying or you don't make sense of</font>

97
00:04:28,690 --> 00:04:32,919
it<font color="#E5E5E5"> raise your</font><font color="#CCCCCC"> hand and tell me that I</font><font color="#E5E5E5"> am</font>

98
00:04:31,300 --> 00:04:34,000
having this problem<font color="#E5E5E5"> so I can try to</font>

99
00:04:32,919 --> 00:04:36,669
<font color="#E5E5E5">strain things in a way you can</font>

100
00:04:34,000 --> 00:04:38,330
understand okay my<font color="#E5E5E5"> objective here is not</font>

101
00:04:36,669 --> 00:04:40,520
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> guys decide Oh</font>

102
00:04:38,330 --> 00:04:42,409
<font color="#CCCCCC">studying</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> Harvin's everywhere</font><font color="#E5E5E5"> is that</font>

103
00:04:40,520 --> 00:04:44,210
<font color="#CCCCCC">you understand how the protections work</font>

104
00:04:42,409 --> 00:04:45,889
so you can use them even<font color="#E5E5E5"> if you want and</font>

105
00:04:44,210 --> 00:04:48,440
<font color="#E5E5E5">you</font><font color="#CCCCCC"> don't distress or whatever</font><font color="#E5E5E5"> is it</font>

106
00:04:45,889 --> 00:04:50,539
that you guys<font color="#CCCCCC"> are doing</font><font color="#E5E5E5"> I mean aside</font>

107
00:04:48,440 --> 00:04:53,629
from<font color="#CCCCCC"> Conover there is any of you a</font>

108
00:04:50,539 --> 00:04:58,310
<font color="#E5E5E5">developer for</font><font color="#CCCCCC"> a for any distro debian</font>

109
00:04:53,629 --> 00:05:02,720
<font color="#E5E5E5">one - okay so it's only two three quanta</font>

110
00:04:58,310 --> 00:05:05,180
<font color="#E5E5E5">me well Alex</font><font color="#CCCCCC"> lets you</font><font color="#E5E5E5"> hand you are kind</font>

111
00:05:02,720 --> 00:05:08,750
of<font color="#E5E5E5"> a developer you said - I know you are</font>

112
00:05:05,180 --> 00:05:10,669
<font color="#CCCCCC">not anymore but</font><font color="#E5E5E5"> okay</font>

113
00:05:08,750 --> 00:05:12,979
so let's talk first about<font color="#CCCCCC"> the</font>

114
00:05:10,669 --> 00:05:15,620
protections that are offered at<font color="#CCCCCC"> compile</font>

115
00:05:12,979 --> 00:05:18,110
at<font color="#E5E5E5"> compilation time so as you probably</font>

116
00:05:15,620 --> 00:05:20,539
know usually there is<font color="#CCCCCC"> sua</font><font color="#E5E5E5"> stages when</font>

117
00:05:18,110 --> 00:05:22,069
you are generating<font color="#CCCCCC"> a binary first you</font>

118
00:05:20,539 --> 00:05:24,229
have<font color="#CCCCCC"> to compile the source code into</font>

119
00:05:22,069 --> 00:05:26,150
binary<font color="#CCCCCC"> code and then you have to pick</font>

120
00:05:24,229 --> 00:05:28,190
<font color="#E5E5E5">Altair small bits of binary code</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> put</font>

121
00:05:26,150 --> 00:05:29,900
them all<font color="#E5E5E5"> together the first thing</font><font color="#CCCCCC"> is</font>

122
00:05:28,190 --> 00:05:32,539
<font color="#CCCCCC">called-- compilation</font><font color="#E5E5E5"> the second step is</font>

123
00:05:29,900 --> 00:05:34,940
<font color="#CCCCCC">Colette linking so a</font><font color="#E5E5E5"> compilation time</font>

124
00:05:32,539 --> 00:05:36,889
one of<font color="#E5E5E5"> the features that we have is as I</font>

125
00:05:34,940 --> 00:05:39,919
said<font color="#E5E5E5"> stack</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> mass in protection</font><font color="#CCCCCC"> as a</font>

126
00:05:36,889 --> 00:05:41,960
<font color="#CCCCCC">speed then</font><font color="#E5E5E5"> we have a hind</font><font color="#CCCCCC"> stack as</font>

127
00:05:39,919 --> 00:05:46,520
misplaced<font color="#CCCCCC"> massing protection</font><font color="#E5E5E5"> is that you</font>

128
00:05:41,960 --> 00:05:48,830
will place some value in your stack so

129
00:05:46,520 --> 00:05:55,250
<font color="#E5E5E5">you know actually think is it too late</font>

130
00:05:48,830 --> 00:05:58,900
<font color="#CCCCCC">to say can we use the screen because I</font>

131
00:05:55,250 --> 00:05:58,900
do have<font color="#E5E5E5"> a really good example</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this</font>

132
00:05:59,830 --> 00:06:04,779
<font color="#E5E5E5">no it's an</font><font color="#CCCCCC"> HDMI it's all I need</font>

133
00:06:07,400 --> 00:06:11,359
I don't mind if you<font color="#E5E5E5"> don't record the</font>

134
00:06:10,160 --> 00:06:13,700
slides because<font color="#E5E5E5"> they are publicly</font>

135
00:06:11,360 --> 00:06:24,820
<font color="#E5E5E5">available</font><font color="#CCCCCC"> most so they can see on the</font>

136
00:06:13,700 --> 00:06:24,820
screen<font color="#CCCCCC"> what I am trying to explain</font><font color="#E5E5E5"> okay</font>

137
00:06:28,240 --> 00:06:33,620
<font color="#CCCCCC">yeah it might be under steam but my my</font>

138
00:06:31,520 --> 00:06:43,390
laptop basically died when I connected

139
00:06:33,620 --> 00:06:43,390
it<font color="#CCCCCC"> okay let's see if</font><font color="#E5E5E5"> this works</font>

140
00:06:44,950 --> 00:06:48,039
[Music]

141
00:06:49,300 --> 00:06:58,150
<font color="#CCCCCC">mmm okay yeah this is so secure that</font>

142
00:07:02,620 --> 00:07:08,690
okay<font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't matter so I can explain</font>

143
00:07:07,910 --> 00:07:21,830
this by hand

144
00:07:08,690 --> 00:07:24,110
so basically Alex come here so now<font color="#E5E5E5"> no no</font>

145
00:07:21,830 --> 00:07:26,359
come here<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> be afraid it's okay if</font>

146
00:07:24,110 --> 00:07:29,450
they record<font color="#E5E5E5"> you you know you have to ask</font>

147
00:07:26,360 --> 00:07:32,420
first<font color="#E5E5E5"> so Alex here is going to be on a</font>

148
00:07:29,450 --> 00:07:34,789
<font color="#E5E5E5">stack so as you can see we</font><font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to</font>

149
00:07:32,420 --> 00:07:36,020
do our own plus<font color="#CCCCCC"> your cards so</font><font color="#E5E5E5"> the first</font>

150
00:07:34,790 --> 00:07:39,890
thing that<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to put here on</font>

151
00:07:36,020 --> 00:07:42,440
the Alex<font color="#CCCCCC"> Cup is going</font><font color="#E5E5E5"> to be the return</font>

152
00:07:39,890 --> 00:07:44,260
direction so we<font color="#CCCCCC"> can continue working on</font>

153
00:07:42,440 --> 00:07:47,020
the previous procedure afterwards<font color="#CCCCCC"> and</font>

154
00:07:44,260 --> 00:07:49,219
here we are going<font color="#E5E5E5"> to put our arguments</font>

155
00:07:47,020 --> 00:07:52,549
<font color="#E5E5E5">so the function knows what to do with</font>

156
00:07:49,220 --> 00:07:56,900
them<font color="#E5E5E5"> and afterwards we can put for</font>

157
00:07:52,550 --> 00:07:59,390
<font color="#CCCCCC">example to the variables</font><font color="#E5E5E5"> local variables</font>

158
00:07:56,900 --> 00:08:00,500
that the function is using there<font color="#E5E5E5"> is a</font>

159
00:07:59,390 --> 00:08:02,270
<font color="#E5E5E5">little bit different I mean you</font>

160
00:08:00,500 --> 00:08:04,070
<font color="#CCCCCC">hopefully put the first arguments then</font>

161
00:08:02,270 --> 00:08:06,469
this will be our return direction and

162
00:08:04,070 --> 00:08:08,300
this<font color="#E5E5E5"> will be our our different</font>

163
00:08:06,470 --> 00:08:09,740
parameters<font color="#CCCCCC"> and other kind of variables</font>

164
00:08:08,300 --> 00:08:12,470
that<font color="#E5E5E5"> we are using on our function so</font>

165
00:08:09,740 --> 00:08:15,230
<font color="#CCCCCC">what we do with SSP is</font><font color="#E5E5E5"> that we introduce</font>

166
00:08:12,470 --> 00:08:17,840
<font color="#CCCCCC">here a Bal a</font><font color="#E5E5E5"> value that will</font><font color="#CCCCCC"> we'll check</font>

167
00:08:15,230 --> 00:08:20,450
whenever<font color="#E5E5E5"> we return so today is the</font>

168
00:08:17,840 --> 00:08:22,520
<font color="#CCCCCC">following</font><font color="#E5E5E5"> if we want to return</font>

169
00:08:20,450 --> 00:08:24,490
we<font color="#E5E5E5"> check this value if the value doesn't</font>

170
00:08:22,520 --> 00:08:27,229
<font color="#E5E5E5">matches with the one that we put in here</font>

171
00:08:24,490 --> 00:08:28,550
then we will<font color="#E5E5E5"> kill the</font><font color="#CCCCCC"> program because we</font>

172
00:08:27,230 --> 00:08:30,980
know<font color="#CCCCCC"> that something</font><font color="#E5E5E5"> has gone awfully</font>

173
00:08:28,550 --> 00:08:33,890
wrong<font color="#E5E5E5"> and something</font><font color="#CCCCCC"> has actually tried</font>

174
00:08:30,980 --> 00:08:37,070
to<font color="#CCCCCC"> overwrite the return</font><font color="#E5E5E5"> address</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

175
00:08:33,890 --> 00:08:39,409
are going<font color="#CCCCCC"> to use here on well Alex</font><font color="#E5E5E5"> Cup</font>

176
00:08:37,070 --> 00:08:42,560
<font color="#E5E5E5">in order to return back to our normal</font>

177
00:08:39,409 --> 00:08:44,179
function does that make<font color="#CCCCCC"> sense to you</font>

178
00:08:42,559 --> 00:08:53,569
did you guys could you guys<font color="#E5E5E5"> specialize</font>

179
00:08:44,179 --> 00:08:55,430
<font color="#E5E5E5">it so that's basically as a speed so as</font>

180
00:08:53,570 --> 00:08:58,130
you<font color="#CCCCCC"> can figure out</font><font color="#E5E5E5"> you only want to</font><font color="#CCCCCC"> use</font>

181
00:08:55,430 --> 00:08:59,900
as a speed when you have functions<font color="#CCCCCC"> that</font>

182
00:08:58,130 --> 00:09:01,460
are working<font color="#E5E5E5"> with memory</font><font color="#CCCCCC"> directly as in</font>

183
00:08:59,900 --> 00:09:04,160
<font color="#E5E5E5">using</font><font color="#CCCCCC"> pointers not that kind of stuff</font>

184
00:09:01,460 --> 00:09:06,680
<font color="#E5E5E5">when you use safe programming like</font><font color="#CCCCCC"> they</font>

185
00:09:04,160 --> 00:09:11,510
<font color="#CCCCCC">paste programming you don't have any</font>

186
00:09:06,680 --> 00:09:13,579
need<font color="#CCCCCC"> for</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> or less</font>

187
00:09:11,510 --> 00:09:15,950
what<font color="#E5E5E5"> idealistic in the compiler try to</font>

188
00:09:13,580 --> 00:09:18,590
predict<font color="#E5E5E5"> the compiler tries to figure out</font>

189
00:09:15,950 --> 00:09:20,660
which functions are safer and safe and

190
00:09:18,590 --> 00:09:25,490
which functions are<font color="#CCCCCC"> a</font><font color="#E5E5E5"> risk to actually</font>

191
00:09:20,660 --> 00:09:28,880
cause an overflow Indian<font color="#CCCCCC"> to hardened</font><font color="#E5E5E5"> and</font>

192
00:09:25,490 --> 00:09:32,320
<font color="#E5E5E5">in GCC</font><font color="#CCCCCC"> four point eight we you said</font><font color="#E5E5E5"> to</font>

193
00:09:28,880 --> 00:09:35,120
<font color="#E5E5E5">put this value on every single</font><font color="#CCCCCC"> function</font>

194
00:09:32,320 --> 00:09:37,160
<font color="#CCCCCC">now</font><font color="#E5E5E5"> is this a little bit better so it</font>

195
00:09:35,120 --> 00:09:38,780
can<font color="#CCCCCC"> actually detect safe functions that</font>

196
00:09:37,160 --> 00:09:41,270
<font color="#CCCCCC">is</font><font color="#E5E5E5"> functions that are not doing</font><font color="#CCCCCC"> anything</font>

197
00:09:38,780 --> 00:09:42,829
with pointers or memory so this one's

198
00:09:41,270 --> 00:09:45,079
get a Skloot because we use the

199
00:09:42,830 --> 00:09:46,820
strongest<font color="#E5E5E5"> at protector but we will use</font>

200
00:09:45,080 --> 00:09:49,580
the usual stack protector<font color="#CCCCCC"> that use the</font>

201
00:09:46,820 --> 00:09:52,250
heuristics most<font color="#E5E5E5"> Easter's hotel then hand</font>

202
00:09:49,580 --> 00:09:55,370
will use the eristic<font color="#CCCCCC"> base that the stack</font>

203
00:09:52,250 --> 00:09:58,280
protector<font color="#CCCCCC"> that is quite okay but it</font>

204
00:09:55,370 --> 00:10:00,680
still has some<font color="#E5E5E5"> small risk that a</font>

205
00:09:58,280 --> 00:10:04,579
function<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> not handled by it it's</font>

206
00:10:00,680 --> 00:10:07,310
actually vulnerable<font color="#E5E5E5"> so well that is</font>

207
00:10:04,580 --> 00:10:12,220
about buffer overflows that's about<font color="#CCCCCC"> SSP</font>

208
00:10:07,310 --> 00:10:15,589
<font color="#CCCCCC">and so you can understand what we try</font><font color="#E5E5E5"> to</font>

209
00:10:12,220 --> 00:10:17,570
prevent with SSP<font color="#E5E5E5"> instability of the</font>

210
00:10:15,590 --> 00:10:20,660
attacker<font color="#E5E5E5"> to actually overwrite any data</font>

211
00:10:17,570 --> 00:10:22,040
on<font color="#E5E5E5"> the arguments and</font><font color="#CCCCCC"> the return value</font>

212
00:10:20,660 --> 00:10:23,600
that we are<font color="#CCCCCC"> going to use to know where</font>

213
00:10:22,040 --> 00:10:26,209
<font color="#E5E5E5">to continue</font><font color="#CCCCCC"> execution on the</font><font color="#E5E5E5"> previous</font>

214
00:10:23,600 --> 00:10:29,630
function perfect

215
00:10:26,210 --> 00:10:30,620
so now let's speak about<font color="#E5E5E5"> PI peak and are</font>

216
00:10:29,630 --> 00:10:33,110
this kind<font color="#E5E5E5"> of stuff</font>

217
00:10:30,620 --> 00:10:34,190
<font color="#CCCCCC">PI stands for position independent</font>

218
00:10:33,110 --> 00:10:36,440
executable

219
00:10:34,190 --> 00:10:38,959
and<font color="#E5E5E5"> pica stands for position independent</font>

220
00:10:36,440 --> 00:10:40,730
code<font color="#E5E5E5"> if you want to make a position</font>

221
00:10:38,959 --> 00:10:42,500
independent executable you<font color="#E5E5E5"> have to have</font>

222
00:10:40,730 --> 00:10:44,319
position independent code that you use

223
00:10:42,500 --> 00:10:48,019
<font color="#CCCCCC">at linked time</font>

224
00:10:44,319 --> 00:10:49,550
this is sounds quite trivial but it's

225
00:10:48,019 --> 00:10:53,269
actually a bit hard to do on some

226
00:10:49,550 --> 00:10:54,529
architectures I mean x86<font color="#E5E5E5"> is a real pain</font>

227
00:10:53,269 --> 00:10:56,660
in<font color="#E5E5E5"> test because you</font><font color="#CCCCCC"> have to</font><font color="#E5E5E5"> keep a</font>

228
00:10:54,529 --> 00:10:58,069
specific register out of the field<font color="#E5E5E5"> that</font>

229
00:10:56,660 --> 00:11:00,050
you<font color="#CCCCCC"> haven't the processor used to you</font>

230
00:10:58,069 --> 00:11:02,660
are<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to go</font><font color="#E5E5E5"> back and find in which</font>

231
00:11:00,050 --> 00:11:04,040
place<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other function see tell</font><font color="#E5E5E5"> the</font>

232
00:11:02,660 --> 00:11:08,329
functions that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> need to call are</font>

233
00:11:04,040 --> 00:11:10,160
found on AMD 64 that register is

234
00:11:08,329 --> 00:11:13,699
actually allocated by default<font color="#E5E5E5"> is part of</font>

235
00:11:10,160 --> 00:11:16,339
the<font color="#CCCCCC"> ABI</font><font color="#E5E5E5"> so you will find that you</font><font color="#CCCCCC"> might</font>

236
00:11:13,699 --> 00:11:18,229
<font color="#CCCCCC">find</font><font color="#E5E5E5"> field to bit code that won't work</font>

237
00:11:16,339 --> 00:11:20,420
well when you have used position

238
00:11:18,230 --> 00:11:23,420
independent code<font color="#E5E5E5"> but it will it will</font>

239
00:11:20,420 --> 00:11:26,360
work flawlessly on 64 bits<font color="#E5E5E5"> and that is</font>

240
00:11:23,420 --> 00:11:29,000
because the ABI is different<font color="#E5E5E5"> the 64 bit</font>

241
00:11:26,360 --> 00:11:33,529
ABI actually intense<font color="#E5E5E5"> title code has to</font>

242
00:11:29,000 --> 00:11:36,470
be relocatable<font color="#E5E5E5"> and what we will use that</font>

243
00:11:33,529 --> 00:11:38,209
for<font color="#E5E5E5"> well if you executable is</font>

244
00:11:36,470 --> 00:11:39,889
independent<font color="#E5E5E5"> it can be place it anywhere</font>

245
00:11:38,209 --> 00:11:42,410
<font color="#E5E5E5">and your libraries can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> placed at</font>

246
00:11:39,889 --> 00:11:43,880
<font color="#E5E5E5">anywhere you don't have the kernel</font>

247
00:11:42,410 --> 00:11:47,209
whenever you try to call one of<font color="#CCCCCC"> the</font>

248
00:11:43,880 --> 00:11:49,519
executables to place the executable<font color="#E5E5E5"> part</font>

249
00:11:47,209 --> 00:11:51,079
of the program randomly on the<font color="#E5E5E5"> memory so</font>

250
00:11:49,519 --> 00:11:54,319
the attacker cannot figure out<font color="#E5E5E5"> which is</font>

251
00:11:51,079 --> 00:11:56,569
<font color="#CCCCCC">the exact address on which the different</font>

252
00:11:54,319 --> 00:12:00,709
cut sets that<font color="#E5E5E5"> it wants to</font><font color="#CCCCCC"> use to the</font>

253
00:11:56,569 --> 00:12:01,310
return based programming<font color="#E5E5E5"> are found in a</font>

254
00:12:00,709 --> 00:12:03,439
<font color="#CCCCCC">similar way</font>

255
00:12:01,310 --> 00:12:06,500
another of the features that we have is

256
00:12:03,439 --> 00:12:08,719
<font color="#CCCCCC">Collette</font><font color="#E5E5E5"> for TV</font><font color="#CCCCCC"> sauce</font><font color="#E5E5E5"> and this is</font>

257
00:12:06,500 --> 00:12:12,889
<font color="#E5E5E5">basically a</font><font color="#CCCCCC"> G Lipsey</font><font color="#E5E5E5"> based set</font>

258
00:12:08,720 --> 00:12:16,370
protection<font color="#E5E5E5"> 45 sources or for</font><font color="#CCCCCC"> the Vsauce</font>

259
00:12:12,889 --> 00:12:20,389
we will try to<font color="#CCCCCC"> take</font><font color="#E5E5E5"> for some simple</font>

260
00:12:16,370 --> 00:12:21,350
cases of stack overflows<font color="#E5E5E5"> and some other</font>

261
00:12:20,389 --> 00:12:23,660
kind of memory corruption

262
00:12:21,350 --> 00:12:25,670
vulnerabilities and it will do so<font color="#CCCCCC"> at a</font>

263
00:12:23,660 --> 00:12:30,219
more or<font color="#E5E5E5"> less static time with a little</font>

264
00:12:25,670 --> 00:12:33,649
bit of dynamic overhead and that

265
00:12:30,220 --> 00:12:37,370
<font color="#E5E5E5">basically helps to protect around some</font>

266
00:12:33,649 --> 00:12:39,470
functions like memset or mem CPI<font color="#E5E5E5"> but not</font>

267
00:12:37,370 --> 00:12:43,519
in all cases<font color="#CCCCCC"> you actually need to have a</font>

268
00:12:39,470 --> 00:12:45,620
very well delimited<font color="#E5E5E5"> you need to pass as</font>

269
00:12:43,519 --> 00:12:47,720
a parameter delimited vector so<font color="#CCCCCC"> you</font>

270
00:12:45,620 --> 00:12:48,080
actually<font color="#E5E5E5"> explain to the</font><font color="#CCCCCC"> ellipse</font><font color="#E5E5E5"> e which</font>

271
00:12:47,720 --> 00:12:49,640
is<font color="#CCCCCC"> the</font>

272
00:12:48,080 --> 00:12:52,750
<font color="#CCCCCC">exercise that the Baker</font><font color="#E5E5E5"> is supposed to</font>

273
00:12:49,640 --> 00:12:55,130
<font color="#E5E5E5">have in</font><font color="#CCCCCC"> order to prevent the overflows</font>

274
00:12:52,750 --> 00:12:57,470
another<font color="#E5E5E5"> final</font><font color="#CCCCCC"> feature</font><font color="#E5E5E5"> that I want to</font>

275
00:12:55,130 --> 00:12:59,320
<font color="#CCCCCC">comment I mean raise</font><font color="#E5E5E5"> your hands if you</font>

276
00:12:57,470 --> 00:13:02,660
have<font color="#E5E5E5"> heard about the</font><font color="#CCCCCC"> stock</font><font color="#E5E5E5"> class</font>

277
00:12:59,320 --> 00:13:06,800
this is tagged by a overflow thingy that

278
00:13:02,660 --> 00:13:08,180
happened a few years<font color="#E5E5E5"> ago</font><font color="#CCCCCC"> yes it felt</font>

279
00:13:06,800 --> 00:13:10,160
like this<font color="#E5E5E5"> because I had to spend the</font>

280
00:13:08,180 --> 00:13:12,339
<font color="#E5E5E5">whole week</font><font color="#CCCCCC"> two little sets in order to</font>

281
00:13:10,160 --> 00:13:16,120
write<font color="#E5E5E5"> an article about how it work it</font>

282
00:13:12,340 --> 00:13:19,010
but it was actually 2 or 3 months<font color="#CCCCCC"> ago</font>

283
00:13:16,120 --> 00:13:20,720
<font color="#E5E5E5">well in the compiler</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have a</font><font color="#CCCCCC"> featured</font>

284
00:13:19,010 --> 00:13:22,640
<font color="#CCCCCC">Colette stock</font><font color="#E5E5E5"> shake I mean you probably</font>

285
00:13:20,720 --> 00:13:24,560
if you have read that be sorry they say

286
00:13:22,640 --> 00:13:27,610
they were like yeah if you use<font color="#E5E5E5"> it a</font>

287
00:13:24,560 --> 00:13:31,189
stock check you are secure<font color="#E5E5E5"> that's</font>

288
00:13:27,610 --> 00:13:33,880
technically<font color="#CCCCCC"> not totally true</font><font color="#E5E5E5"> stock shake</font>

289
00:13:31,190 --> 00:13:36,560
is intended<font color="#CCCCCC"> to</font><font color="#E5E5E5"> leave two pages of</font>

290
00:13:33,880 --> 00:13:39,439
security somewhere in the middle<font color="#E5E5E5"> so that</font>

291
00:13:36,560 --> 00:13:42,380
<font color="#CCCCCC">you can actually</font><font color="#E5E5E5"> run a signal handler in</font>

292
00:13:39,440 --> 00:13:45,790
case<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you have a stack overflow</font><font color="#E5E5E5"> and</font>

293
00:13:42,380 --> 00:13:48,950
you can handle that gracefully but

294
00:13:45,790 --> 00:13:51,860
internet systems that<font color="#E5E5E5"> actually did work</font>

295
00:13:48,950 --> 00:13:55,070
because unlike the original<font color="#E5E5E5"> kernel we</font>

296
00:13:51,860 --> 00:13:58,400
left 64 pages if I recall correctly or

297
00:13:55,070 --> 00:14:01,100
16<font color="#CCCCCC"> pages by default so the toothpaste</font>

298
00:13:58,400 --> 00:14:02,930
<font color="#CCCCCC">cup</font><font color="#E5E5E5"> that he was used by his tactic would</font>

299
00:14:01,100 --> 00:14:05,870
actually work as intended<font color="#E5E5E5"> and it will</font>

300
00:14:02,930 --> 00:14:09,099
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> be able to detect if</font><font color="#CCCCCC"> and stack</font>

301
00:14:05,870 --> 00:14:12,080
<font color="#CCCCCC">overflow</font><font color="#E5E5E5"> was happening happening and I</font>

302
00:14:09,100 --> 00:14:13,910
can probably say that well<font color="#E5E5E5"> again to her</font>

303
00:14:12,080 --> 00:14:16,160
aunt actually<font color="#CCCCCC"> was</font><font color="#E5E5E5"> securitized</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> stack</font>

304
00:14:13,910 --> 00:14:18,040
class because we<font color="#E5E5E5"> had been using a stack</font>

305
00:14:16,160 --> 00:14:22,010
stack for like two or<font color="#CCCCCC"> three</font><font color="#E5E5E5"> years</font><font color="#CCCCCC"> now</font>

306
00:14:18,040 --> 00:14:27,079
when we introduced it is<font color="#CCCCCC"> see 4.8 as</font><font color="#E5E5E5"> mine</font>

307
00:14:22,010 --> 00:14:29,210
<font color="#E5E5E5">stream so as main GCC compiler</font><font color="#CCCCCC"> if you</font>

308
00:14:27,080 --> 00:14:30,560
are<font color="#E5E5E5"> a destroy developer I strongly</font>

309
00:14:29,210 --> 00:14:34,100
<font color="#CCCCCC">recommend that you</font><font color="#E5E5E5"> enable is toxic</font>

310
00:14:30,560 --> 00:14:36,079
<font color="#E5E5E5">because I mean these kind</font><font color="#CCCCCC"> of</font>

311
00:14:34,100 --> 00:14:38,210
<font color="#E5E5E5">vulnerability is can</font><font color="#CCCCCC"> only be</font><font color="#E5E5E5"> fixed</font><font color="#CCCCCC"> at in</font>

312
00:14:36,080 --> 00:14:40,010
that<font color="#E5E5E5"> way you cannot fix on a stack</font>

313
00:14:38,210 --> 00:14:42,230
overflow<font color="#CCCCCC"> if you don't check that you are</font>

314
00:14:40,010 --> 00:14:45,050
<font color="#CCCCCC">not overflowing</font><font color="#E5E5E5"> the stack given the way</font>

315
00:14:42,230 --> 00:14:47,810
in which<font color="#CCCCCC"> the</font><font color="#E5E5E5"> stack has expanded</font><font color="#CCCCCC"> totally</font>

316
00:14:45,050 --> 00:14:49,310
<font color="#CCCCCC">waiting which</font><font color="#E5E5E5"> you could be doing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in</font>

317
00:14:47,810 --> 00:14:51,199
a more efficient way could<font color="#CCCCCC"> be if you</font>

318
00:14:49,310 --> 00:14:54,770
could tell<font color="#E5E5E5"> the colonel I want to</font><font color="#CCCCCC"> span</font>

319
00:14:51,200 --> 00:14:57,320
the<font color="#CCCCCC"> stack up to</font><font color="#E5E5E5"> this size so I need to</font>

320
00:14:54,770 --> 00:14:59,420
add maybe 20 bits or 100 bits or

321
00:14:57,320 --> 00:15:01,100
whatever and the colonel feel that if

322
00:14:59,420 --> 00:15:02,360
<font color="#E5E5E5">you don't do that correctly but that</font>

323
00:15:01,100 --> 00:15:05,889
will<font color="#CCCCCC"> require a</font><font color="#E5E5E5"> lot of</font>

324
00:15:02,360 --> 00:15:08,509
of performance in<font color="#E5E5E5"> order for it to work</font>

325
00:15:05,889 --> 00:15:10,040
correctly<font color="#CCCCCC"> because then you would need to</font>

326
00:15:08,509 --> 00:15:12,610
call<font color="#E5E5E5"> that function whenever you do a</font>

327
00:15:10,040 --> 00:15:15,049
function call and<font color="#E5E5E5"> that's awful</font><font color="#CCCCCC"> I mean I</font>

328
00:15:12,610 --> 00:15:19,160
went<font color="#E5E5E5"> this when a simple hello world</font>

329
00:15:15,049 --> 00:15:23,049
<font color="#E5E5E5">usually</font><font color="#CCCCCC"> makes around 20 or 50 function</font>

330
00:15:19,160 --> 00:15:25,999
calls used to show you<font color="#E5E5E5"> hello world so</font>

331
00:15:23,049 --> 00:15:28,699
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> now we also have some link time</font>

332
00:15:25,999 --> 00:15:33,049
protections<font color="#E5E5E5"> we basically mark all our</font>

333
00:15:28,699 --> 00:15:36,829
binary<font color="#E5E5E5"> so that relocations are placed on</font>

334
00:15:33,049 --> 00:15:38,360
ritalin memories<font color="#CCCCCC"> so basically the binary</font>

335
00:15:36,829 --> 00:15:40,449
will try to<font color="#E5E5E5"> find where</font><font color="#CCCCCC"> to find the</font>

336
00:15:38,360 --> 00:15:44,629
functions<font color="#CCCCCC"> from libraries and everything</font>

337
00:15:40,449 --> 00:15:48,049
<font color="#CCCCCC">at some point and</font><font color="#E5E5E5"> we set that direction</font>

338
00:15:44,629 --> 00:15:50,899
<font color="#E5E5E5">in ritalin memory so once this has</font><font color="#CCCCCC"> been</font>

339
00:15:48,049 --> 00:15:53,449
activated you have started executing

340
00:15:50,899 --> 00:15:57,410
your<font color="#CCCCCC"> binary</font><font color="#E5E5E5"> you will be completely</font>

341
00:15:53,449 --> 00:15:59,540
unable to<font color="#E5E5E5"> modify that direction unless</font>

342
00:15:57,410 --> 00:16:02,540
of course you<font color="#CCCCCC"> manage to state</font><font color="#E5E5E5"> protection</font>

343
00:15:59,540 --> 00:16:04,099
<font color="#E5E5E5">levels of the memory</font><font color="#CCCCCC"> I mean or your</font>

344
00:16:02,540 --> 00:16:06,399
architecture doesn't support<font color="#E5E5E5"> read-only</font>

345
00:16:04,100 --> 00:16:09,049
memory that that can also<font color="#E5E5E5"> happen I guess</font>

346
00:16:06,399 --> 00:16:11,839
but in most cases<font color="#E5E5E5"> you will</font><font color="#CCCCCC"> actually be</font>

347
00:16:09,049 --> 00:16:14,660
unable to for<font color="#CCCCCC"> example inject and if</font>

348
00:16:11,839 --> 00:16:17,989
function on the on the on<font color="#E5E5E5"> the binary</font><font color="#CCCCCC"> and</font>

349
00:16:14,660 --> 00:16:21,110
<font color="#CCCCCC">tell it</font><font color="#E5E5E5"> ok</font><font color="#CCCCCC"> I want that print</font><font color="#E5E5E5"> F function</font>

350
00:16:17,989 --> 00:16:22,669
that you<font color="#CCCCCC"> are using is actually</font><font color="#E5E5E5"> my own</font>

351
00:16:21,110 --> 00:16:26,360
function and then you have to<font color="#CCCCCC"> return</font>

352
00:16:22,669 --> 00:16:29,720
back to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> leaf</font><font color="#CCCCCC"> C function we also used</font>

353
00:16:26,360 --> 00:16:33,079
<font color="#E5E5E5">another feature of the linker</font><font color="#CCCCCC"> Colet</font><font color="#E5E5E5"> mint</font>

354
00:16:29,720 --> 00:16:35,600
now or<font color="#E5E5E5"> eerily binding and the whole idea</font>

355
00:16:33,079 --> 00:16:38,628
<font color="#CCCCCC">is that</font><font color="#E5E5E5"> in most cases you use lazy</font>

356
00:16:35,600 --> 00:16:40,639
binding<font color="#E5E5E5"> Tevye is that you only will link</font>

357
00:16:38,629 --> 00:16:42,649
a library when you need it in your<font color="#CCCCCC"> to</font>

358
00:16:40,639 --> 00:16:44,869
<font color="#CCCCCC">harden we configure the</font><font color="#E5E5E5"> linker so that</font>

359
00:16:42,649 --> 00:16:48,139
all the libraries get linked at as soon

360
00:16:44,869 --> 00:16:51,139
as you execute<font color="#E5E5E5"> the binary this makes the</font>

361
00:16:48,139 --> 00:16:52,790
program work a lot slower<font color="#E5E5E5"> because you</font>

362
00:16:51,139 --> 00:16:54,679
will<font color="#E5E5E5"> find that there is actually a lot</font>

363
00:16:52,790 --> 00:16:57,469
of binaries especially on desktop

364
00:16:54,679 --> 00:16:59,629
systems that link<font color="#CCCCCC"> arrives everything</font>

365
00:16:57,470 --> 00:17:01,910
<font color="#E5E5E5">they can even if they are don't are</font><font color="#CCCCCC"> not</font>

366
00:16:59,629 --> 00:17:02,629
going to use it they are going<font color="#CCCCCC"> to link</font>

367
00:17:01,910 --> 00:17:05,000
with

368
00:17:02,629 --> 00:17:06,709
alsa even if they are<font color="#E5E5E5"> not planning to</font>

369
00:17:05,000 --> 00:17:09,888
<font color="#E5E5E5">use own they are going to look</font><font color="#CCCCCC"> link</font>

370
00:17:06,709 --> 00:17:11,990
<font color="#CCCCCC">against every</font><font color="#E5E5E5"> single existing X library</font>

371
00:17:09,888 --> 00:17:16,040
and you guys<font color="#E5E5E5"> better don't get me started</font>

372
00:17:11,990 --> 00:17:19,339
<font color="#CCCCCC">on Mozilla Firefox ok so</font>

373
00:17:16,040 --> 00:17:21,109
yeah<font color="#CCCCCC"> if you have to do this linking</font>

374
00:17:19,339 --> 00:17:25,099
process<font color="#E5E5E5"> every time that you start the</font>

375
00:17:21,109 --> 00:17:27,379
<font color="#E5E5E5">binary it's a lot slower on the on the</font>

376
00:17:25,099 --> 00:17:31,309
bright<font color="#CCCCCC"> side</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> actually want to do</font>

377
00:17:27,380 --> 00:17:33,500
some<font color="#E5E5E5"> real-time</font><font color="#CCCCCC"> Basic programming</font><font color="#E5E5E5"> this is</font>

378
00:17:31,309 --> 00:17:35,928
<font color="#E5E5E5">also really efficient because that way</font>

379
00:17:33,500 --> 00:17:37,610
you know<font color="#CCCCCC"> that your binaries will not</font>

380
00:17:35,929 --> 00:17:39,590
start linking libraries<font color="#E5E5E5"> helpful during</font>

381
00:17:37,610 --> 00:17:44,209
takes the question and therefore<font color="#E5E5E5"> drawing</font>

382
00:17:39,590 --> 00:17:45,918
<font color="#E5E5E5">your expectations of real time</font><font color="#CCCCCC"> that</font>

383
00:17:44,210 --> 00:17:51,160
<font color="#E5E5E5">basically covers everything</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> on</font>

384
00:17:45,919 --> 00:17:53,600
user space<font color="#E5E5E5"> is there any questions no</font>

385
00:17:51,160 --> 00:17:56,059
have<font color="#E5E5E5"> you been able to follow my talk so</font>

386
00:17:53,600 --> 00:17:58,159
<font color="#CCCCCC">far I mean I know that my Spanish accent</font>

387
00:17:56,059 --> 00:18:01,910
is<font color="#CCCCCC"> really thick I can make</font><font color="#E5E5E5"> it even worse</font>

388
00:17:58,160 --> 00:18:03,200
but I'm trying<font color="#E5E5E5"> not to okay so let's talk</font>

389
00:18:01,910 --> 00:18:06,740
a little<font color="#CCCCCC"> bit about Carroll level</font>

390
00:18:03,200 --> 00:18:10,010
security<font color="#CCCCCC"> okay a most of what I am going</font>

391
00:18:06,740 --> 00:18:12,110
<font color="#CCCCCC">to tell you he applies to G R Seck as</font>

392
00:18:10,010 --> 00:18:16,879
you know<font color="#E5E5E5"> the air sac is no</font><font color="#CCCCCC"> longer open</font>

393
00:18:12,110 --> 00:18:18,889
<font color="#E5E5E5">source well I hope that if</font><font color="#CCCCCC"> Spinelli</font>

394
00:18:16,880 --> 00:18:22,100
<font color="#CCCCCC">seeing this he is not going</font><font color="#E5E5E5"> to kill me</font>

395
00:18:18,890 --> 00:18:24,140
okay spender<font color="#E5E5E5"> it's not open source</font><font color="#CCCCCC"> in the</font>

396
00:18:22,100 --> 00:18:26,149
sense that now the<font color="#E5E5E5"> sources are not open</font>

397
00:18:24,140 --> 00:18:27,620
to<font color="#CCCCCC"> everyone everybody not in</font><font color="#E5E5E5"> the sense</font>

398
00:18:26,150 --> 00:18:30,559
that they are<font color="#E5E5E5"> not following the GPL</font>

399
00:18:27,620 --> 00:18:34,610
version -<font color="#E5E5E5"> okay splendor please don't</font>

400
00:18:30,559 --> 00:18:35,840
kill me if you<font color="#E5E5E5"> see this so the</font><font color="#CCCCCC"> world the</font>

401
00:18:34,610 --> 00:18:38,629
whole<font color="#E5E5E5"> thing is that</font><font color="#CCCCCC"> sighs they have</font>

402
00:18:35,840 --> 00:18:41,120
decided<font color="#E5E5E5"> to convert</font><font color="#CCCCCC"> Gear SEC patches into</font>

403
00:18:38,630 --> 00:18:43,070
<font color="#E5E5E5">our commercial pads so you have to pay</font>

404
00:18:41,120 --> 00:18:45,350
in order to get<font color="#CCCCCC"> access to</font><font color="#E5E5E5"> them unless</font>

405
00:18:43,070 --> 00:18:47,510
<font color="#CCCCCC">you get some really nice person that has</font>

406
00:18:45,350 --> 00:18:49,129
already<font color="#E5E5E5"> access to them and</font><font color="#CCCCCC"> says well is</font>

407
00:18:47,510 --> 00:18:51,379
Cpl version<font color="#E5E5E5"> 2 so I'm going</font><font color="#CCCCCC"> to exercise</font>

408
00:18:49,130 --> 00:18:56,720
<font color="#E5E5E5">my right of giving you access to tape</font>

409
00:18:51,380 --> 00:18:58,640
<font color="#E5E5E5">access so here is a copy well most of</font>

410
00:18:56,720 --> 00:19:01,880
these<font color="#CCCCCC"> things</font><font color="#E5E5E5"> are going to be a little</font>

411
00:18:58,640 --> 00:19:03,830
bit<font color="#E5E5E5"> useless for now</font><font color="#CCCCCC"> I mean the current</font>

412
00:19:01,880 --> 00:19:06,860
kernels might not support most<font color="#E5E5E5"> of the</font>

413
00:19:03,830 --> 00:19:09,309
features<font color="#E5E5E5"> here and the main problem is</font>

414
00:19:06,860 --> 00:19:11,719
<font color="#CCCCCC">that most cars actually have a</font>

415
00:19:09,309 --> 00:19:14,389
<font color="#E5E5E5">watered-down version</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> features</font>

416
00:19:11,720 --> 00:19:16,490
<font color="#E5E5E5">because there is like a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> conflicts</font>

417
00:19:14,390 --> 00:19:18,679
<font color="#E5E5E5">and of course for me security is the</font>

418
00:19:16,490 --> 00:19:20,390
<font color="#E5E5E5">most important but maybe for the guy</font>

419
00:19:18,679 --> 00:19:23,990
<font color="#E5E5E5">that is developing to</font><font color="#CCCCCC"> Tanjung a bit</font>

420
00:19:20,390 --> 00:19:26,030
<font color="#CCCCCC">Ethernet network our driver from Intel</font>

421
00:19:23,990 --> 00:19:27,830
really<font color="#E5E5E5"> cares a lot more about the</font>

422
00:19:26,030 --> 00:19:29,379
stability and security<font color="#E5E5E5"> because</font><font color="#CCCCCC"> if the</font>

423
00:19:27,830 --> 00:19:33,730
server<font color="#CCCCCC"> goes down well</font>

424
00:19:29,380 --> 00:19:36,299
we are fucked up so that is what you

425
00:19:33,730 --> 00:19:39,610
will find<font color="#CCCCCC"> that most of</font><font color="#E5E5E5"> the features that</font>

426
00:19:36,299 --> 00:19:41,850
KSP is<font color="#E5E5E5"> introducing into the kernel are</font>

427
00:19:39,610 --> 00:19:44,769
not as strong as<font color="#E5E5E5"> they</font><font color="#CCCCCC"> are nonzero SEC</font>

428
00:19:41,850 --> 00:19:47,289
but it might be one<font color="#CCCCCC"> of the three options</font>

429
00:19:44,769 --> 00:19:50,710
<font color="#E5E5E5">that you have in</font><font color="#CCCCCC"> order to</font><font color="#E5E5E5"> to use a</font>

430
00:19:47,289 --> 00:19:52,419
<font color="#E5E5E5">harness system I will go back later on</font>

431
00:19:50,710 --> 00:19:54,730
to talk<font color="#CCCCCC"> about how</font><font color="#E5E5E5"> to install a</font><font color="#CCCCCC"> hydrant</font>

432
00:19:52,419 --> 00:19:57,279
system and what you can do if you<font color="#CCCCCC"> are</font>

433
00:19:54,730 --> 00:19:59,590
<font color="#CCCCCC">using into hardened and you don't have</font>

434
00:19:57,279 --> 00:20:01,779
well<font color="#E5E5E5"> access to the</font><font color="#CCCCCC"> gear</font><font color="#E5E5E5"> second patches</font>

435
00:19:59,590 --> 00:20:03,939
by the way I<font color="#CCCCCC"> don't have</font><font color="#E5E5E5"> access to the</font>

436
00:20:01,779 --> 00:20:06,549
gear<font color="#E5E5E5"> SEC patches</font><font color="#CCCCCC"> I want to make a note</font>

437
00:20:03,940 --> 00:20:09,309
here<font color="#E5E5E5"> and I think known of taeeun too</font>

438
00:20:06,549 --> 00:20:13,929
hard and developers have you see<font color="#E5E5E5"> you</font>

439
00:20:09,309 --> 00:20:15,399
know this staying here<font color="#CCCCCC"> okay so let's</font>

440
00:20:13,929 --> 00:20:18,460
talk first about<font color="#CCCCCC"> there is a</font><font color="#E5E5E5"> space layout</font>

441
00:20:15,399 --> 00:20:19,870
randomization<font color="#CCCCCC"> I have told</font><font color="#E5E5E5"> you shortly</font>

442
00:20:18,460 --> 00:20:22,659
<font color="#E5E5E5">about it when I was speaking about</font>

443
00:20:19,870 --> 00:20:24,549
position independent code<font color="#CCCCCC"> al space</font>

444
00:20:22,659 --> 00:20:27,220
layout randomization<font color="#CCCCCC"> basically means</font>

445
00:20:24,549 --> 00:20:29,168
that<font color="#E5E5E5"> you will place every single bit of</font>

446
00:20:27,220 --> 00:20:31,629
the program in a totally<font color="#CCCCCC"> different</font>

447
00:20:29,169 --> 00:20:33,490
address<font color="#E5E5E5"> every time you run it so for</font>

448
00:20:31,629 --> 00:20:36,668
that<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to have a program that</font><font color="#E5E5E5"> is</font>

449
00:20:33,490 --> 00:20:39,490
able<font color="#CCCCCC"> to run no matter in which place you</font>

450
00:20:36,669 --> 00:20:42,100
are placing every part of it that<font color="#E5E5E5"> is why</font>

451
00:20:39,490 --> 00:20:43,570
position independent code helps<font color="#CCCCCC"> strength</font>

452
00:20:42,100 --> 00:20:47,649
<font color="#CCCCCC">and a</font><font color="#E5E5E5"> lot other space layout</font>

453
00:20:43,570 --> 00:20:49,389
randomization<font color="#CCCCCC"> following with this</font><font color="#E5E5E5"> the</font>

454
00:20:47,649 --> 00:20:52,629
<font color="#E5E5E5">earth SEC had some really nice videos I</font>

455
00:20:49,389 --> 00:20:55,689
mean here sake<font color="#CCCCCC"> actually think that was</font>

456
00:20:52,629 --> 00:20:58,899
<font color="#CCCCCC">packs</font><font color="#E5E5E5"> that did it had a featured</font><font color="#CCCCCC"> Khalid</font>

457
00:20:55,690 --> 00:21:00,820
<font color="#E5E5E5">rant and map random map basically tries</font>

458
00:20:58,899 --> 00:21:03,699
<font color="#E5E5E5">to do the same whenever you try</font><font color="#CCCCCC"> to do a</font>

459
00:21:00,820 --> 00:21:06,009
call to map some file into memory<font color="#CCCCCC"> so it</font>

460
00:21:03,700 --> 00:21:08,830
will place it whenever<font color="#E5E5E5"> it wants unless</font>

461
00:21:06,009 --> 00:21:10,389
you<font color="#E5E5E5"> use the position</font><font color="#CCCCCC"> fix at flag which</font>

462
00:21:08,830 --> 00:21:14,769
means that you<font color="#E5E5E5"> are telling the kernel I</font>

463
00:21:10,389 --> 00:21:17,649
want it to be at exactly<font color="#CCCCCC"> this address in</font>

464
00:21:14,769 --> 00:21:20,620
a similar way they have another feature

465
00:21:17,649 --> 00:21:22,449
<font color="#CCCCCC">colette land</font><font color="#E5E5E5"> k stack that basically</font>

466
00:21:20,620 --> 00:21:24,100
<font color="#E5E5E5">means that the stack</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the kernel will</font>

467
00:21:22,450 --> 00:21:26,230
be placed randomly whenever you do a

468
00:21:24,100 --> 00:21:28,480
system call<font color="#E5E5E5"> so it will not be</font><font color="#CCCCCC"> on the</font>

469
00:21:26,230 --> 00:21:33,220
same place every<font color="#CCCCCC"> time you do today</font><font color="#E5E5E5"> the</font>

470
00:21:28,480 --> 00:21:35,860
system<font color="#CCCCCC"> calls and that may sit</font><font color="#E5E5E5"> sorry that</font>

471
00:21:33,220 --> 00:21:38,409
makes it a lot harder to try<font color="#E5E5E5"> to split an</font>

472
00:21:35,860 --> 00:21:41,529
overflow on a stack in order<font color="#E5E5E5"> to try to</font>

473
00:21:38,409 --> 00:21:42,300
<font color="#E5E5E5">get</font><font color="#CCCCCC"> code execution on</font><font color="#E5E5E5"> track on drink</font><font color="#CCCCCC"> 0</font>

474
00:21:41,529 --> 00:21:46,410
or

475
00:21:42,300 --> 00:21:48,810
<font color="#E5E5E5">level on</font><font color="#CCCCCC"> Colonel</font><font color="#E5E5E5"> level code another</font>

476
00:21:46,410 --> 00:21:51,120
<font color="#E5E5E5">feature that they have is</font><font color="#CCCCCC"> collect you</font>

477
00:21:48,810 --> 00:21:53,610
the ref<font color="#E5E5E5"> I think you are</font><font color="#CCCCCC"> F now well</font><font color="#E5E5E5"> this</font>

478
00:21:51,120 --> 00:21:56,250
is mostly done by a plugin<font color="#E5E5E5"> in the past</font>

479
00:21:53,610 --> 00:21:59,189
it was<font color="#E5E5E5"> done by</font><font color="#CCCCCC"> hand which was</font><font color="#E5E5E5"> a pain in</font>

480
00:21:56,250 --> 00:22:01,650
<font color="#CCCCCC">tears I mean you know how money</font>

481
00:21:59,190 --> 00:22:03,920
functions exist<font color="#E5E5E5"> on the kernel</font><font color="#CCCCCC"> that tried</font>

482
00:22:01,650 --> 00:22:06,720
to<font color="#CCCCCC"> send code to user space</font>

483
00:22:03,920 --> 00:22:08,040
it's an awful amount<font color="#E5E5E5"> of them I mean you</font>

484
00:22:06,720 --> 00:22:11,460
<font color="#CCCCCC">are probably</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have nightmares</font>

485
00:22:08,040 --> 00:22:14,129
and dream with kernel code<font color="#E5E5E5"> every single</font>

486
00:22:11,460 --> 00:22:16,200
<font color="#E5E5E5">night</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> next coming five months if</font>

487
00:22:14,130 --> 00:22:17,910
you have to go one<font color="#CCCCCC"> by one and try to</font>

488
00:22:16,200 --> 00:22:20,460
find where they are<font color="#E5E5E5"> place it and have to</font>

489
00:22:17,910 --> 00:22:22,080
replace everything so you actually<font color="#E5E5E5"> make</font>

490
00:22:20,460 --> 00:22:25,380
the<font color="#CCCCCC"> function say</font><font color="#E5E5E5"> okay I only want to</font>

491
00:22:22,080 --> 00:22:27,449
<font color="#E5E5E5">copy these</font><font color="#CCCCCC"> two bits or two bytes of</font>

492
00:22:25,380 --> 00:22:28,830
memory to user space and not<font color="#E5E5E5"> more and I</font>

493
00:22:27,450 --> 00:22:32,520
want you to<font color="#CCCCCC"> verify that that's actually</font>

494
00:22:28,830 --> 00:22:34,500
<font color="#E5E5E5">the case and now think that</font><font color="#CCCCCC"> dint an</font>

495
00:22:32,520 --> 00:22:37,650
expression<font color="#E5E5E5"> of the kernel comes out and</font>

496
00:22:34,500 --> 00:22:39,780
you have to invest<font color="#E5E5E5"> another two</font><font color="#CCCCCC"> or three</font>

497
00:22:37,650 --> 00:22:41,640
months<font color="#E5E5E5"> updating your patches so</font>

498
00:22:39,780 --> 00:22:43,910
everything<font color="#CCCCCC"> gets hot today</font><font color="#E5E5E5"> that's why</font>

499
00:22:41,640 --> 00:22:48,540
they move at everything into a into a

500
00:22:43,910 --> 00:22:50,340
GCC<font color="#E5E5E5"> plugin</font><font color="#CCCCCC"> another feature that</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> been</font>

501
00:22:48,540 --> 00:22:52,710
there for<font color="#CCCCCC"> some time</font><font color="#E5E5E5"> is collected mean</font>

502
00:22:50,340 --> 00:22:56,070
<font color="#E5E5E5">and map address basically it makes that</font>

503
00:22:52,710 --> 00:22:58,560
you cannot have map memory<font color="#CCCCCC"> regulars on</font>

504
00:22:56,070 --> 00:23:01,020
the first<font color="#E5E5E5"> sectors so for example you</font>

505
00:22:58,560 --> 00:23:04,460
cannot try to say<font color="#E5E5E5"> you cannot make a</font>

506
00:23:01,020 --> 00:23:07,379
program<font color="#E5E5E5"> map code on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> null pointer</font>

507
00:23:04,460 --> 00:23:11,520
<font color="#E5E5E5">because have you guys program it in C</font>

508
00:23:07,380 --> 00:23:13,980
raise your hands<font color="#CCCCCC"> C</font><font color="#E5E5E5"> C++</font><font color="#CCCCCC"> hey</font><font color="#E5E5E5"> I really like</font>

509
00:23:11,520 --> 00:23:17,070
this audience are nice<font color="#E5E5E5"> this is going to</font>

510
00:23:13,980 --> 00:23:20,490
be C so<font color="#CCCCCC"> a as you probably know the null</font>

511
00:23:17,070 --> 00:23:22,830
pointer is exactly<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> well not exactly</font>

512
00:23:20,490 --> 00:23:24,300
because it has a different<font color="#CCCCCC"> type but if</font>

513
00:23:22,830 --> 00:23:26,399
you come if you<font color="#E5E5E5"> cast it to an integer</font>

514
00:23:24,300 --> 00:23:29,430
<font color="#E5E5E5">it's 0 it's basically at the bottom of</font>

515
00:23:26,400 --> 00:23:34,860
the memory and you<font color="#CCCCCC"> can actually map</font>

516
00:23:29,430 --> 00:23:37,710
memory<font color="#E5E5E5"> on position 0 so you can use</font><font color="#CCCCCC"> an a</font>

517
00:23:34,860 --> 00:23:40,110
map call and tell and<font color="#E5E5E5"> tell the colonel</font>

518
00:23:37,710 --> 00:23:42,570
<font color="#CCCCCC">here I want to</font><font color="#E5E5E5"> map this file on position</font>

519
00:23:40,110 --> 00:23:44,399
0 so whenever<font color="#E5E5E5"> you access null instead</font><font color="#CCCCCC"> of</font>

520
00:23:42,570 --> 00:23:46,439
<font color="#E5E5E5">getting off getting</font><font color="#CCCCCC"> hot segmentation</font>

521
00:23:44,400 --> 00:23:51,690
fault you will actually get whatever you

522
00:23:46,440 --> 00:23:53,520
<font color="#E5E5E5">place it on address 0 a it year</font><font color="#CCCCCC"> SEC that</font>

523
00:23:51,690 --> 00:23:55,740
is prevented using<font color="#E5E5E5"> her</font><font color="#CCCCCC"> a specific</font>

524
00:23:53,520 --> 00:23:58,340
feature for it<font color="#CCCCCC"> I think on</font>

525
00:23:55,740 --> 00:24:01,140
<font color="#E5E5E5">internus that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> also prevented nowadays</font>

526
00:23:58,340 --> 00:24:03,570
but you can disable<font color="#E5E5E5"> that feature using</font>

527
00:24:01,140 --> 00:24:05,309
the proc file system if you<font color="#E5E5E5"> want to use</font>

528
00:24:03,570 --> 00:24:09,240
a specific<font color="#E5E5E5"> code or you think a specific</font>

529
00:24:05,309 --> 00:24:10,770
<font color="#CCCCCC">up abilities on the processor</font><font color="#E5E5E5"> then of</font>

530
00:24:09,240 --> 00:24:11,550
<font color="#E5E5E5">course we also have non-executable</font>

531
00:24:10,770 --> 00:24:16,110
memory

532
00:24:11,550 --> 00:24:18,059
<font color="#E5E5E5">I mean basically I have to give credit</font>

533
00:24:16,110 --> 00:24:20,309
to the<font color="#CCCCCC"> PAX</font><font color="#E5E5E5"> team here because they were</font>

534
00:24:18,059 --> 00:24:22,920
the<font color="#CCCCCC"> first group that introduced that</font>

535
00:24:20,309 --> 00:24:25,410
idea of non-executable memory<font color="#E5E5E5"> then</font>

536
00:24:22,920 --> 00:24:28,350
Microsoft<font color="#E5E5E5"> follow it and they</font><font color="#CCCCCC"> basically</font>

537
00:24:25,410 --> 00:24:30,000
made non-executable memory happen before

538
00:24:28,350 --> 00:24:32,219
it actually was a<font color="#E5E5E5"> reality</font><font color="#CCCCCC"> on the Linux</font>

539
00:24:30,000 --> 00:24:35,040
<font color="#E5E5E5">kernel</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> a round of applause</font><font color="#CCCCCC"> for the</font>

540
00:24:32,220 --> 00:24:38,880
Microsoft developers they were better

541
00:24:35,040 --> 00:24:41,820
<font color="#E5E5E5">than Linux for once and the thing is</font>

542
00:24:38,880 --> 00:24:44,640
<font color="#E5E5E5">that what idea is that if you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> that</font>

543
00:24:41,820 --> 00:24:47,909
<font color="#E5E5E5">you have some memory in</font><font color="#CCCCCC"> that it's only</font>

544
00:24:44,640 --> 00:24:51,150
going<font color="#E5E5E5"> to contain code that has not to be</font>

545
00:24:47,910 --> 00:24:55,770
wrote and by anybody you can make that

546
00:24:51,150 --> 00:24:57,170
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can mark that that sexiness</font><font color="#E5E5E5"> no sorry</font>

547
00:24:55,770 --> 00:25:00,210
<font color="#CCCCCC">that's a different feature</font>

548
00:24:57,170 --> 00:25:03,150
nevermind non-executable memory you have

549
00:25:00,210 --> 00:25:05,690
basically<font color="#E5E5E5"> this part of memory</font><font color="#CCCCCC"> that you</font>

550
00:25:03,150 --> 00:25:08,130
know is never going<font color="#CCCCCC"> to contain code</font><font color="#E5E5E5"> and</font>

551
00:25:05,690 --> 00:25:11,100
you<font color="#E5E5E5"> don't want the processor to run</font>

552
00:25:08,130 --> 00:25:14,160
anything<font color="#E5E5E5"> on it in that case you can mark</font>

553
00:25:11,100 --> 00:25:18,178
the specific pages using<font color="#E5E5E5"> the NX</font><font color="#CCCCCC"> block on</font>

554
00:25:14,160 --> 00:25:20,580
<font color="#E5E5E5">AMD 64 on</font><font color="#CCCCCC"> 52 bit architectures</font><font color="#E5E5E5"> you can</font>

555
00:25:18,179 --> 00:25:22,040
use<font color="#CCCCCC"> PI extensions if you have them in</font>

556
00:25:20,580 --> 00:25:24,689
order to<font color="#E5E5E5"> mark non-executable memory</font>

557
00:25:22,040 --> 00:25:27,659
<font color="#CCCCCC">otherwise you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to use segmentation</font>

558
00:25:24,690 --> 00:25:30,120
based approach<font color="#E5E5E5"> and by doing that</font>

559
00:25:27,660 --> 00:25:32,360
<font color="#E5E5E5">whenever take care whenever the</font>

560
00:25:30,120 --> 00:25:36,330
processor<font color="#E5E5E5"> tries to execute code in</font><font color="#CCCCCC"> that</font>

561
00:25:32,360 --> 00:25:38,219
memory region it will produce a

562
00:25:36,330 --> 00:25:39,689
segmentation fault<font color="#CCCCCC"> because it will</font><font color="#E5E5E5"> not</font>

563
00:25:38,220 --> 00:25:42,600
<font color="#E5E5E5">be able to access the memory for</font>

564
00:25:39,690 --> 00:25:45,170
execution<font color="#E5E5E5"> and hopefully that will kill</font>

565
00:25:42,600 --> 00:25:47,550
<font color="#E5E5E5">your process and you will prevent a well</font>

566
00:25:45,170 --> 00:25:51,570
<font color="#E5E5E5">privilege escalation or remote code</font>

567
00:25:47,550 --> 00:25:55,320
execution attack<font color="#CCCCCC"> we also have an</font><font color="#E5E5E5"> protect</font>

568
00:25:51,570 --> 00:25:57,510
restrictions<font color="#CCCCCC"> I think that is never going</font>

569
00:25:55,320 --> 00:25:59,460
<font color="#CCCCCC">to make it into the mainstream kernel</font>

570
00:25:57,510 --> 00:26:01,260
<font color="#E5E5E5">sadly</font><font color="#CCCCCC"> then we have a high temperature</font>

571
00:25:59,460 --> 00:26:02,570
<font color="#E5E5E5">restrictions is that you actually</font>

572
00:26:01,260 --> 00:26:05,910
<font color="#CCCCCC">enforced non-executable memory</font>

573
00:26:02,570 --> 00:26:09,178
everywhere except in binaries<font color="#CCCCCC"> that you</font>

574
00:26:05,910 --> 00:26:09,680
<font color="#CCCCCC">Marcos</font><font color="#E5E5E5"> don't enforce this because they</font>

575
00:26:09,179 --> 00:26:12,020
have to

576
00:26:09,680 --> 00:26:15,770
use just-in-time compilation like for

577
00:26:12,020 --> 00:26:18,110
example<font color="#E5E5E5"> some Java binaries</font><font color="#CCCCCC"> I think up</font>

578
00:26:15,770 --> 00:26:21,340
until<font color="#E5E5E5"> recent versions Python details of</font>

579
00:26:18,110 --> 00:26:24,649
that<font color="#E5E5E5"> because they it was using for a</font>

580
00:26:21,340 --> 00:26:27,649
interface like interface library<font color="#CCCCCC"> lip</font><font color="#E5E5E5"> FF</font>

581
00:26:24,650 --> 00:26:29,690
<font color="#E5E5E5">eye and lip</font><font color="#CCCCCC"> FF I you set trampolines and</font>

582
00:26:27,650 --> 00:26:34,120
<font color="#CCCCCC">we use trampolines in a really weird</font><font color="#E5E5E5"> way</font>

583
00:26:29,690 --> 00:26:37,190
<font color="#E5E5E5">so it couldn't be emulated and well</font>

584
00:26:34,120 --> 00:26:40,520
<font color="#E5E5E5">Firefox basically everything that</font><font color="#CCCCCC"> uses</font>

585
00:26:37,190 --> 00:26:42,350
OpenGL nowadays all that needs<font color="#E5E5E5"> to be</font>

586
00:26:40,520 --> 00:26:44,900
market so<font color="#E5E5E5"> you actually tell the colonel</font>

587
00:26:42,350 --> 00:26:47,179
that<font color="#E5E5E5"> they are allowed to</font><font color="#CCCCCC"> have memory</font>

588
00:26:44,900 --> 00:26:50,050
that is executable<font color="#E5E5E5"> and</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> table at</font>

589
00:26:47,180 --> 00:26:50,050
the<font color="#CCCCCC"> same point of</font><font color="#E5E5E5"> time</font>

590
00:26:52,690 --> 00:26:58,940
<font color="#CCCCCC">oh chromium yeah well chromium is</font>

591
00:26:55,820 --> 00:27:01,850
included actually on the<font color="#E5E5E5"> GL library</font>

592
00:26:58,940 --> 00:27:04,490
users so<font color="#CCCCCC"> fuck it</font><font color="#E5E5E5"> have any of you</font>

593
00:27:01,850 --> 00:27:08,060
<font color="#E5E5E5">actually disabled a</font><font color="#CCCCCC"> Firefox</font><font color="#E5E5E5"> actually</font>

594
00:27:04,490 --> 00:27:10,130
because of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> JavaScript engine</font><font color="#E5E5E5"> has a</font>

595
00:27:08,060 --> 00:27:12,139
similar problem<font color="#CCCCCC"> but I</font><font color="#E5E5E5"> think that that</font>

596
00:27:10,130 --> 00:27:14,300
<font color="#CCCCCC">could</font><font color="#E5E5E5"> be disabled at configuration time</font>

597
00:27:12,140 --> 00:27:18,550
so when you are compiling Firefox you

598
00:27:14,300 --> 00:27:21,290
can<font color="#CCCCCC"> tell Firefox no I don't want to have</font>

599
00:27:18,550 --> 00:27:23,570
just in<font color="#E5E5E5"> time compiler</font><font color="#CCCCCC"> I want to have</font>

600
00:27:21,290 --> 00:27:24,980
everything interpreted and not so if

601
00:27:23,570 --> 00:27:29,360
chromium has that<font color="#E5E5E5"> possibility and</font>

602
00:27:24,980 --> 00:27:35,990
nowadays<font color="#CCCCCC"> or not but it does fucking</font>

603
00:27:29,360 --> 00:27:38,080
Google<font color="#CCCCCC"> okay then another</font><font color="#E5E5E5"> feature that we</font>

604
00:27:35,990 --> 00:27:40,150
<font color="#CCCCCC">may or</font><font color="#E5E5E5"> may not see into the kernel was</font>

605
00:27:38,080 --> 00:27:42,620
reference<font color="#E5E5E5"> counter overflow protection</font>

606
00:27:40,150 --> 00:27:45,800
<font color="#E5E5E5">that is implemented using a</font><font color="#CCCCCC"> plugin that</font>

607
00:27:42,620 --> 00:27:48,439
<font color="#E5E5E5">will use a specific type in order to</font>

608
00:27:45,800 --> 00:27:52,580
mark what is considered<font color="#E5E5E5"> at a reference</font>

609
00:27:48,440 --> 00:27:54,560
<font color="#E5E5E5">counter so basically it will modify the</font>

610
00:27:52,580 --> 00:27:56,750
code so whenever you want<font color="#CCCCCC"> to increase</font>

611
00:27:54,560 --> 00:27:58,790
the<font color="#CCCCCC"> reference counter value it will</font>

612
00:27:56,750 --> 00:28:01,910
check if<font color="#CCCCCC"> you are already on</font><font color="#E5E5E5"> the max if</font>

613
00:27:58,790 --> 00:28:03,409
it's the max<font color="#E5E5E5"> value it will prevent you</font>

614
00:28:01,910 --> 00:28:06,530
from doing<font color="#E5E5E5"> anything helps to that</font>

615
00:28:03,410 --> 00:28:08,390
<font color="#E5E5E5">specific reference counter so that</font>

616
00:28:06,530 --> 00:28:11,389
basically<font color="#E5E5E5"> means that you convert what</font>

617
00:28:08,390 --> 00:28:18,410
could be a<font color="#CCCCCC"> doh-doh belfry or use of the</font>

618
00:28:11,390 --> 00:28:19,850
free attack<font color="#E5E5E5"> into</font><font color="#CCCCCC"> a memory leak so that</font>

619
00:28:18,410 --> 00:28:21,830
will mean<font color="#E5E5E5"> that if somebody starts</font>

620
00:28:19,850 --> 00:28:22,969
exploiting such an ECU in your server

621
00:28:21,830 --> 00:28:25,340
<font color="#E5E5E5">you will have to reboot</font>

622
00:28:22,970 --> 00:28:28,070
<font color="#CCCCCC">to serve a Bengali</font><font color="#E5E5E5"> because you were</font>

623
00:28:25,340 --> 00:28:29,928
<font color="#E5E5E5">going to run out</font><font color="#CCCCCC"> of memory</font><font color="#E5E5E5"> but at least</font>

624
00:28:28,070 --> 00:28:32,120
it<font color="#E5E5E5"> will be eventually and not</font><font color="#CCCCCC"> when the</font>

625
00:28:29,929 --> 00:28:37,520
attacker actually<font color="#E5E5E5"> takes full</font><font color="#CCCCCC"> control of</font>

626
00:28:32,120 --> 00:28:39,949
it<font color="#E5E5E5"> so it's a</font><font color="#CCCCCC"> little bit better</font><font color="#E5E5E5"> another</font>

627
00:28:37,520 --> 00:28:42,770
<font color="#E5E5E5">feature that we</font><font color="#CCCCCC"> have that</font><font color="#E5E5E5"> I hope that we</font>

628
00:28:39,950 --> 00:28:45,169
see on Toledo scanner soon is

629
00:28:42,770 --> 00:28:47,840
sanitization of free memory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> taken</font>

630
00:28:45,169 --> 00:28:49,970
<font color="#E5E5E5">elastic so today is that whenever you</font>

631
00:28:47,840 --> 00:28:52,668
<font color="#CCCCCC">hear me up it's</font><font color="#E5E5E5"> from memory that</font><font color="#CCCCCC"> page</font>

632
00:28:49,970 --> 00:28:54,770
will be clear it<font color="#E5E5E5"> out so you can be</font><font color="#CCCCCC"> sure</font>

633
00:28:52,669 --> 00:28:57,770
that<font color="#CCCCCC"> if you are freeing memory that</font>

634
00:28:54,770 --> 00:28:59,090
memory will not be kept on<font color="#E5E5E5"> your computer</font>

635
00:28:57,770 --> 00:29:01,520
<font color="#CCCCCC">for a really long amount of time</font>

636
00:28:59,090 --> 00:29:03,678
<font color="#E5E5E5">because otherwise if somebody comes</font>

637
00:29:01,520 --> 00:29:05,179
after was induced at a dump of memory

638
00:29:03,679 --> 00:29:06,830
and say for<font color="#CCCCCC"> example you have been</font>

639
00:29:05,179 --> 00:29:09,799
writing<font color="#E5E5E5"> your password on some random web</font>

640
00:29:06,830 --> 00:29:11,178
<font color="#E5E5E5">page</font><font color="#CCCCCC"> he might be able</font><font color="#E5E5E5"> to find your</font>

641
00:29:09,799 --> 00:29:12,889
passwords in<font color="#E5E5E5"> clear-text in memory</font>

642
00:29:11,179 --> 00:29:14,510
<font color="#E5E5E5">because that memory page hasn't been</font>

643
00:29:12,890 --> 00:29:16,130
reused and therefore has not been

644
00:29:14,510 --> 00:29:22,520
clearly<font color="#E5E5E5"> for allocating</font><font color="#CCCCCC"> it to</font><font color="#E5E5E5"> another</font>

645
00:29:16,130 --> 00:29:25,130
process thing<font color="#E5E5E5"> okay same with the kernel</font>

646
00:29:22,520 --> 00:29:27,350
stack we have<font color="#CCCCCC"> Carol stacks and need</font><font color="#E5E5E5"> to</font>

647
00:29:25,130 --> 00:29:29,570
<font color="#E5E5E5">say soon and that means that basically</font>

648
00:29:27,350 --> 00:29:32,240
<font color="#E5E5E5">before you</font><font color="#CCCCCC"> return from any system call</font>

649
00:29:29,570 --> 00:29:35,149
on<font color="#E5E5E5"> kernel space you are going to clear</font>

650
00:29:32,240 --> 00:29:37,700
the whole stack or a lot a part of<font color="#E5E5E5"> the</font>

651
00:29:35,150 --> 00:29:39,530
stack that<font color="#E5E5E5"> was used in order to prevent</font>

652
00:29:37,700 --> 00:29:41,840
<font color="#E5E5E5">that if you make another system call</font>

653
00:29:39,530 --> 00:29:43,250
there is no non immediate memory<font color="#E5E5E5"> that</font>

654
00:29:41,840 --> 00:29:44,780
<font color="#CCCCCC">contains information that</font><font color="#E5E5E5"> could be</font>

655
00:29:43,250 --> 00:29:50,470
interesting or<font color="#CCCCCC"> that could be extracted</font>

656
00:29:44,780 --> 00:29:54,740
<font color="#E5E5E5">by an attacker well then we also have</font>

657
00:29:50,470 --> 00:29:58,640
rights being<font color="#E5E5E5"> denied on the memory kernel</font>

658
00:29:54,740 --> 00:30:02,330
memory and port<font color="#E5E5E5"> devices this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> kind of</font>

659
00:29:58,640 --> 00:30:04,340
a mini mandatory access control<font color="#E5E5E5"> think I</font>

660
00:30:02,330 --> 00:30:06,789
am reasonably sure that<font color="#CCCCCC"> it can</font><font color="#E5E5E5"> be</font>

661
00:30:04,340 --> 00:30:11,030
implemented using for example<font color="#CCCCCC"> say Linux</font>

662
00:30:06,789 --> 00:30:13,490
and now it's<font color="#CCCCCC"> what</font><font color="#E5E5E5"> spanner will come back</font>

663
00:30:11,030 --> 00:30:15,020
<font color="#E5E5E5">and say no it cannot be implemented on</font>

664
00:30:13,490 --> 00:30:18,409
say Linux because<font color="#E5E5E5"> the Linux can be</font>

665
00:30:15,020 --> 00:30:20,870
disabled<font color="#E5E5E5"> once you have enabled it</font><font color="#CCCCCC"> that's</font>

666
00:30:18,409 --> 00:30:25,549
actually<font color="#CCCCCC"> true but me</font><font color="#E5E5E5"> whatever</font><font color="#CCCCCC"> at least</font>

667
00:30:20,870 --> 00:30:27,918
<font color="#CCCCCC">it's better</font><font color="#E5E5E5"> than nothing</font><font color="#CCCCCC"> they also have</font>

668
00:30:25,549 --> 00:30:30,350
some features that<font color="#E5E5E5"> internet attack known</font>

669
00:30:27,919 --> 00:30:32,899
vulnerabilities<font color="#E5E5E5"> or known really risky</font>

670
00:30:30,350 --> 00:30:35,750
areas of the kernel like the same link

671
00:30:32,899 --> 00:30:36,290
their old<font color="#E5E5E5"> PM 86 mode I think that can</font><font color="#CCCCCC"> be</font>

672
00:30:35,750 --> 00:30:39,470
<font color="#E5E5E5">done</font>

673
00:30:36,290 --> 00:30:43,460
listen<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> Canon nowadays they</font><font color="#E5E5E5"> are so</font>

674
00:30:39,470 --> 00:30:45,080
disabled<font color="#CCCCCC"> privileged at input/output</font><font color="#E5E5E5"> that</font>

675
00:30:43,460 --> 00:30:46,550
is<font color="#E5E5E5"> a really good way to mess up with</font>

676
00:30:45,080 --> 00:30:47,649
your ex or if you are not using

677
00:30:46,550 --> 00:30:52,129
<font color="#E5E5E5">kernel-space</font>

678
00:30:47,650 --> 00:30:54,110
<font color="#E5E5E5">drivers for your graphic art so if you</font>

679
00:30:52,130 --> 00:30:55,400
need<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> userspace</font><font color="#E5E5E5"> drivers make sure</font>

680
00:30:54,110 --> 00:30:58,879
that you actually<font color="#E5E5E5"> don't disable</font>

681
00:30:55,400 --> 00:31:01,570
privilege<font color="#CCCCCC"> add input on hood then they</font>

682
00:30:58,880 --> 00:31:04,670
also had some<font color="#E5E5E5"> features that intended</font><font color="#CCCCCC"> to</font>

683
00:31:01,570 --> 00:31:05,780
prevent if disclosure of information

684
00:31:04,670 --> 00:31:08,360
that could be used

685
00:31:05,780 --> 00:31:10,430
you set by an attacker<font color="#E5E5E5"> even if you use</font>

686
00:31:08,360 --> 00:31:15,139
<font color="#E5E5E5">her as a space layout randomization for</font>

687
00:31:10,430 --> 00:31:18,290
example<font color="#E5E5E5"> yeah I think I know which</font><font color="#CCCCCC"> is the</font>

688
00:31:15,140 --> 00:31:23,530
<font color="#E5E5E5">best way to explain this</font><font color="#CCCCCC"> who of you is</font>

689
00:31:18,290 --> 00:31:26,629
<font color="#E5E5E5">using the</font><font color="#CCCCCC"> SSH ient or the GP</font><font color="#E5E5E5"> agent</font><font color="#CCCCCC"> I am</font>

690
00:31:23,530 --> 00:31:29,540
yes<font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> you know that the SSH a</font>

691
00:31:26,630 --> 00:31:31,340
entered the<font color="#CCCCCC"> GPE alien keep a copy or</font>

692
00:31:29,540 --> 00:31:33,110
they a copy of the keys that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> had you</font>

693
00:31:31,340 --> 00:31:35,030
said the cliff that<font color="#CCCCCC"> of</font><font color="#E5E5E5"> memory so they</font>

694
00:31:33,110 --> 00:31:40,040
can use them whenever you<font color="#E5E5E5"> try to access</font>

695
00:31:35,030 --> 00:31:42,110
a host or<font color="#E5E5E5"> you try to sign a message</font><font color="#CCCCCC"> they</font>

696
00:31:40,040 --> 00:31:44,420
usually protect that memory<font color="#E5E5E5"> in</font><font color="#CCCCCC"> order to</font>

697
00:31:42,110 --> 00:31:46,070
make it hard for an attacker to<font color="#E5E5E5"> get</font>

698
00:31:44,420 --> 00:31:49,790
access<font color="#CCCCCC"> to it using for example at the</font>

699
00:31:46,070 --> 00:31:51,770
booger<font color="#E5E5E5"> but nothing that say for</font><font color="#CCCCCC"> example</font>

700
00:31:49,790 --> 00:31:55,490
10 states<font color="#CCCCCC"> ayan had a buffer overflow</font>

701
00:31:51,770 --> 00:31:58,240
vulnerability<font color="#E5E5E5"> and an attacker wants to</font>

702
00:31:55,490 --> 00:32:00,470
use once to<font color="#CCCCCC"> find information</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> a</font>

703
00:31:58,240 --> 00:32:04,310
<font color="#CCCCCC">other's layout view the</font><font color="#E5E5E5"> specific</font>

704
00:32:00,470 --> 00:32:06,380
instance<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> TP here again in order</font><font color="#E5E5E5"> to</font>

705
00:32:04,310 --> 00:32:08,720
<font color="#E5E5E5">extract your private keys and start</font>

706
00:32:06,380 --> 00:32:11,930
sending<font color="#CCCCCC"> messages on your health</font><font color="#E5E5E5"> so</font>

707
00:32:08,720 --> 00:32:13,940
basically they prevented<font color="#CCCCCC"> they made</font><font color="#E5E5E5"> it</font>

708
00:32:11,930 --> 00:32:16,970
impossible to get<font color="#E5E5E5"> that information from</font>

709
00:32:13,940 --> 00:32:18,620
<font color="#E5E5E5">the colonel unless you were the parent</font>

710
00:32:16,970 --> 00:32:22,370
<font color="#E5E5E5">of the process that you were trying</font><font color="#CCCCCC"> to</font>

711
00:32:18,620 --> 00:32:25,189
<font color="#E5E5E5">attack</font><font color="#CCCCCC"> they did that</font><font color="#E5E5E5"> for example</font>

712
00:32:22,370 --> 00:32:28,850
preventing access to a /proc<font color="#CCCCCC"> as last PID</font>

713
00:32:25,190 --> 00:32:30,830
<font color="#E5E5E5">maps that gave you the world listing of</font>

714
00:32:28,850 --> 00:32:31,250
the mappings<font color="#CCCCCC"> that a specific process had</font>

715
00:32:30,830 --> 00:32:34,270
made

716
00:32:31,250 --> 00:32:37,300
saying with the<font color="#CCCCCC"> S Maps</font><font color="#E5E5E5"> file that is a</font>

717
00:32:34,270 --> 00:32:40,280
slightly different<font color="#E5E5E5"> version of it and</font>

718
00:32:37,300 --> 00:32:42,379
they also<font color="#E5E5E5"> modifier some system calls so</font>

719
00:32:40,280 --> 00:32:45,050
they<font color="#E5E5E5"> could never return information of</font>

720
00:32:42,380 --> 00:32:47,120
that kind for another process and of

721
00:32:45,050 --> 00:32:49,680
course they had a feature<font color="#E5E5E5"> call it hard</font>

722
00:32:47,120 --> 00:32:53,610
<font color="#E5E5E5">and</font><font color="#CCCCCC"> petraeus that made it hard for</font><font color="#E5E5E5"> a</font>

723
00:32:49,680 --> 00:32:54,840
known non-parent process to run<font color="#E5E5E5"> the</font>

724
00:32:53,610 --> 00:32:56,820
<font color="#CCCCCC">Petraeus</font><font color="#E5E5E5"> comment that he's using</font><font color="#CCCCCC"> for</font>

725
00:32:54,840 --> 00:32:59,760
<font color="#CCCCCC">debugging</font><font color="#E5E5E5"> so they could not actually try</font>

726
00:32:56,820 --> 00:33:05,659
to make<font color="#CCCCCC"> peeks and pokes of memory</font><font color="#E5E5E5"> to</font>

727
00:32:59,760 --> 00:33:08,879
figure out which which was your key so

728
00:33:05,660 --> 00:33:11,310
<font color="#E5E5E5">that basically covers most of the</font><font color="#CCCCCC"> kernel</font>

729
00:33:08,880 --> 00:33:14,370
<font color="#E5E5E5">features I mean I could</font><font color="#CCCCCC"> die speaking for</font>

730
00:33:11,310 --> 00:33:18,600
this<font color="#CCCCCC"> like</font><font color="#E5E5E5"> on this like for</font><font color="#CCCCCC"> 2015 more</font>

731
00:33:14,370 --> 00:33:21,800
minutes<font color="#CCCCCC"> one a few more interesting</font>

732
00:33:18,600 --> 00:33:26,370
<font color="#CCCCCC">features was for example that year SEC</font>

733
00:33:21,800 --> 00:33:28,500
will stop brute-forcing<font color="#E5E5E5"> I mean if after</font>

734
00:33:26,370 --> 00:33:31,439
if it detects that<font color="#E5E5E5"> you are trying to do</font>

735
00:33:28,500 --> 00:33:35,150
a privilege escalation<font color="#E5E5E5"> because you have</font>

736
00:33:31,440 --> 00:33:35,150
basically provoked<font color="#CCCCCC"> had some kind of</font>

737
00:33:35,900 --> 00:33:41,460
<font color="#E5E5E5">buffer overflow attack on a root program</font>

738
00:33:38,940 --> 00:33:43,200
<font color="#E5E5E5">it will prevent that program for for</font>

739
00:33:41,460 --> 00:33:45,180
<font color="#E5E5E5">King</font><font color="#CCCCCC"> hints on it a parent program for</font>

740
00:33:43,200 --> 00:33:47,220
forking him<font color="#E5E5E5"> some time so you cannot</font>

741
00:33:45,180 --> 00:33:49,020
actually<font color="#E5E5E5"> try to brute force</font><font color="#CCCCCC"> the other</font>

742
00:33:47,220 --> 00:33:52,230
<font color="#E5E5E5">system that is using</font><font color="#CCCCCC"> because whenever</font>

743
00:33:49,020 --> 00:33:54,389
<font color="#E5E5E5">you run a fork you</font><font color="#CCCCCC"> will get a exit</font><font color="#E5E5E5"> copy</font>

744
00:33:52,230 --> 00:33:56,130
<font color="#E5E5E5">of the process so if you kill the kid</font>

745
00:33:54,390 --> 00:33:58,920
process but the parent process is still

746
00:33:56,130 --> 00:34:00,390
running<font color="#E5E5E5"> whenever it</font><font color="#CCCCCC"> use another Fork you</font>

747
00:33:58,920 --> 00:34:03,060
will be able<font color="#CCCCCC"> to actually figure</font><font color="#E5E5E5"> out</font>

748
00:34:00,390 --> 00:34:05,190
which is<font color="#CCCCCC"> the addresses that the process</font>

749
00:34:03,060 --> 00:34:07,409
is using<font color="#E5E5E5"> after doing her</font><font color="#CCCCCC"> seed lot of</font>

750
00:34:05,190 --> 00:34:11,760
attempts but knowing<font color="#CCCCCC"> that eventually you</font>

751
00:34:07,410 --> 00:34:14,400
are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> succeed at that</font><font color="#CCCCCC"> I could go</font>

752
00:34:11,760 --> 00:34:15,840
<font color="#E5E5E5">for really really long time so let's try</font>

753
00:34:14,400 --> 00:34:18,780
to make this a<font color="#E5E5E5"> little bit faster</font>

754
00:34:15,840 --> 00:34:20,070
they had a<font color="#CCCCCC"> seat load of videos</font><font color="#E5E5E5"> in order</font>

755
00:34:18,780 --> 00:34:21,450
to prevent this<font color="#CCCCCC"> close suit of</font>

756
00:34:20,070 --> 00:34:23,880
information that could<font color="#CCCCCC"> be useful to</font>

757
00:34:21,449 --> 00:34:26,639
attackers<font color="#E5E5E5"> if you want to see the</font><font color="#CCCCCC"> coder</font>

758
00:34:23,880 --> 00:34:29,670
on<font color="#CCCCCC"> that well you can</font><font color="#E5E5E5"> check how they hide</font>

759
00:34:26,639 --> 00:34:31,589
kernel symbols<font color="#E5E5E5"> general processes how</font>

760
00:34:29,670 --> 00:34:34,050
they apply<font color="#CCCCCC"> at</font><font color="#E5E5E5"> the specific</font><font color="#CCCCCC"> restrictions</font>

761
00:34:31,590 --> 00:34:36,960
to the<font color="#E5E5E5"> proc file system so that only</font>

762
00:34:34,050 --> 00:34:39,380
<font color="#E5E5E5">test a user that</font><font color="#CCCCCC"> Aneta process could</font>

763
00:34:36,960 --> 00:34:42,600
access the specific<font color="#E5E5E5"> process information</font>

764
00:34:39,380 --> 00:34:47,360
<font color="#E5E5E5">they also applied a lot of restrictions</font>

765
00:34:42,600 --> 00:34:50,159
on the system and demo FS file systems

766
00:34:47,360 --> 00:34:52,140
they have restrictions<font color="#CCCCCC"> that prevent</font>

767
00:34:50,159 --> 00:34:55,529
linking that was in<font color="#E5E5E5"> order to prevent</font>

768
00:34:52,139 --> 00:35:01,700
some apart<font color="#E5E5E5"> say</font><font color="#CCCCCC"> burner abilities that are</font>

769
00:34:55,530 --> 00:35:01,700
not<font color="#E5E5E5"> happening</font><font color="#CCCCCC"> so much</font><font color="#E5E5E5"> anymore they yes</font>

770
00:35:04,520 --> 00:35:08,940
can you speak<font color="#E5E5E5"> on it can you give him the</font>

771
00:35:06,990 --> 00:35:13,529
microphone<font color="#CCCCCC"> because</font><font color="#E5E5E5"> I am having a hard</font>

772
00:35:08,940 --> 00:35:15,180
time hearing him<font color="#E5E5E5"> thanks a</font><font color="#CCCCCC"> lot Alex</font><font color="#E5E5E5"> so</font>

773
00:35:13,530 --> 00:35:17,880
you just<font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> these Apache linking</font>

774
00:35:15,180 --> 00:35:19,830
attacks and kind of<font color="#CCCCCC"> indicated that they</font>

775
00:35:17,880 --> 00:35:23,609
are<font color="#E5E5E5"> not a big problem anymore but like</font>

776
00:35:19,830 --> 00:35:25,440
that<font color="#E5E5E5"> is well so this</font><font color="#CCCCCC"> is a like it was</font>

777
00:35:23,609 --> 00:35:27,299
<font color="#CCCCCC">reasonably the the heck of the freedom</font>

778
00:35:25,440 --> 00:35:29,580
<font color="#CCCCCC">hosting thing which was</font><font color="#E5E5E5"> exactly that</font>

779
00:35:27,300 --> 00:35:31,260
vulnerability<font color="#CCCCCC"> and like I've looked at</font>

780
00:35:29,580 --> 00:35:33,598
this<font color="#E5E5E5"> quite a lot because I have</font><font color="#CCCCCC"> a server</font>

781
00:35:31,260 --> 00:35:36,270
configuration with an<font color="#E5E5E5"> Apache and there</font>

782
00:35:33,599 --> 00:35:38,580
is no other<font color="#CCCCCC"> solution apart from the Geo</font>

783
00:35:36,270 --> 00:35:41,700
security patch right<font color="#CCCCCC"> now to solve that</font>

784
00:35:38,580 --> 00:35:42,380
<font color="#CCCCCC">vulnerability but we can discuss this</font>

785
00:35:41,700 --> 00:35:45,000
maybe later

786
00:35:42,380 --> 00:35:46,800
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> actually have a</font><font color="#E5E5E5"> point I mean</font>

787
00:35:45,000 --> 00:35:48,570
that<font color="#E5E5E5"> vulnerability can only be fixed</font>

788
00:35:46,800 --> 00:35:50,849
that<font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> level and that</font><font color="#E5E5E5"> was done by</font>

789
00:35:48,570 --> 00:35:53,720
<font color="#E5E5E5">year security and it was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> race</font>

790
00:35:50,849 --> 00:35:55,950
condition<font color="#CCCCCC"> on access to symlinks and</font>

791
00:35:53,720 --> 00:35:58,230
<font color="#E5E5E5">comparing that the restrictions actually</font>

792
00:35:55,950 --> 00:36:00,779
apply the way they should<font color="#E5E5E5"> but the way in</font>

793
00:35:58,230 --> 00:36:02,460
which<font color="#E5E5E5"> year</font><font color="#CCCCCC"> SEC fixed stable</font><font color="#E5E5E5"> and ability</font>

794
00:36:00,780 --> 00:36:04,740
<font color="#E5E5E5">is that</font><font color="#CCCCCC"> it prevents the same links from</font>

795
00:36:02,460 --> 00:36:09,089
being access it<font color="#E5E5E5"> if the owner doesn't</font>

796
00:36:04,740 --> 00:36:12,359
match the source<font color="#E5E5E5"> of the same link</font><font color="#CCCCCC"> so I</font>

797
00:36:09,089 --> 00:36:16,230
think<font color="#E5E5E5"> and I would like to</font><font color="#CCCCCC"> be corrected</font>

798
00:36:12,359 --> 00:36:18,630
there that<font color="#E5E5E5"> my we do able using</font><font color="#CCCCCC"> se</font><font color="#E5E5E5"> Linux</font>

799
00:36:16,230 --> 00:36:23,119
or any other mandatory<font color="#E5E5E5"> access control if</font>

800
00:36:18,630 --> 00:36:26,460
you define that process with a specific

801
00:36:23,119 --> 00:36:28,680
<font color="#CCCCCC">personality</font><font color="#E5E5E5"> with a specific role cannot</font>

802
00:36:26,460 --> 00:36:30,330
a dental<font color="#E5E5E5"> over to access same links</font><font color="#CCCCCC"> where</font>

803
00:36:28,680 --> 00:36:33,359
the<font color="#E5E5E5"> destination doesn't match the source</font>

804
00:36:30,330 --> 00:36:34,950
but I'm not sure if the semantics of<font color="#E5E5E5"> the</font>

805
00:36:33,359 --> 00:36:37,470
kernel are advanced<font color="#E5E5E5"> enough</font><font color="#CCCCCC"> to actually</font>

806
00:36:34,950 --> 00:36:42,359
allow you to<font color="#CCCCCC"> do that</font><font color="#E5E5E5"> do you know how no</font>

807
00:36:37,470 --> 00:36:44,098
no<font color="#E5E5E5"> no okay but</font><font color="#CCCCCC"> so I've researched this</font>

808
00:36:42,359 --> 00:36:46,020
<font color="#E5E5E5">problem quite a lot and what you're</font>

809
00:36:44,099 --> 00:36:49,530
seeing<font color="#E5E5E5"> is there seems to be a bunch of</font>

810
00:36:46,020 --> 00:36:51,240
commercial fixes<font color="#E5E5E5"> yeah but just like</font>

811
00:36:49,530 --> 00:36:54,180
<font color="#CCCCCC">nothing in mainstream a</font><font color="#E5E5E5"> pantry you can</font>

812
00:36:51,240 --> 00:36:55,470
<font color="#CCCCCC">do mmm and this like kind of level thing</font>

813
00:36:54,180 --> 00:36:57,629
from two years<font color="#CCCCCC"> ago and II I've actually</font>

814
00:36:55,470 --> 00:36:59,399
been<font color="#CCCCCC"> thinking</font><font color="#E5E5E5"> - now that</font><font color="#CCCCCC"> reice acuity is</font>

815
00:36:57,630 --> 00:37:01,500
no longer<font color="#E5E5E5"> available to try to split out</font>

816
00:36:59,400 --> 00:37:03,810
that feature and<font color="#E5E5E5"> make it available build</font>

817
00:37:01,500 --> 00:37:05,430
<font color="#E5E5E5">SSE</font><font color="#CCCCCC"> separate</font><font color="#E5E5E5"> if you do that I can tell</font>

818
00:37:03,810 --> 00:37:08,040
<font color="#E5E5E5">you that the spanner is going to be</font>

819
00:37:05,430 --> 00:37:11,368
really angry<font color="#E5E5E5"> and he's</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> try to do</font>

820
00:37:08,040 --> 00:37:13,930
everything<font color="#CCCCCC"> he can to stop you but</font>

821
00:37:11,369 --> 00:37:16,530
<font color="#CCCCCC">just don't</font><font color="#E5E5E5"> say that I'm living</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> you I</font>

822
00:37:13,930 --> 00:37:17,799
<font color="#E5E5E5">mean I'm giving</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> support here but</font>

823
00:37:16,530 --> 00:37:20,920
yeah

824
00:37:17,800 --> 00:37:23,859
okay let's talk<font color="#E5E5E5"> also</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> what I saw</font>

825
00:37:20,920 --> 00:37:28,390
restrictions<font color="#E5E5E5"> about the use of FIFO pipes</font>

826
00:37:23,859 --> 00:37:31,089
and they<font color="#E5E5E5"> also had a really cool</font><font color="#CCCCCC"> thing I</font>

827
00:37:28,390 --> 00:37:33,400
mean they had a feature<font color="#CCCCCC"> along which</font>

828
00:37:31,089 --> 00:37:36,790
whenever<font color="#E5E5E5"> after you wrote to a specific</font>

829
00:37:33,400 --> 00:37:38,980
entry on the proc file system you<font color="#E5E5E5"> would</font>

830
00:37:36,790 --> 00:37:41,770
no longer<font color="#E5E5E5"> be able to</font><font color="#CCCCCC"> mount any new file</font>

831
00:37:38,980 --> 00:37:42,819
systems in a<font color="#CCCCCC"> read/write</font><font color="#E5E5E5"> manner that</font>

832
00:37:41,770 --> 00:37:46,150
means that if you<font color="#E5E5E5"> mark</font>

833
00:37:42,819 --> 00:37:48,310
<font color="#CCCCCC">are you</font><font color="#E5E5E5"> read-only file systems</font><font color="#CCCCCC"> a suite</font>

834
00:37:46,150 --> 00:37:51,190
only at some point during the boot<font color="#E5E5E5"> and</font>

835
00:37:48,310 --> 00:37:52,869
then you cut that<font color="#E5E5E5"> function they will not</font>

836
00:37:51,190 --> 00:37:54,490
be able<font color="#CCCCCC"> to be mounted again as a</font>

837
00:37:52,869 --> 00:37:56,619
<font color="#CCCCCC">read/write and therefore the attacker</font>

838
00:37:54,490 --> 00:37:58,089
will have a harder time trying<font color="#E5E5E5"> to modify</font>

839
00:37:56,619 --> 00:38:02,079
<font color="#E5E5E5">the better that is hold on to</font><font color="#CCCCCC"> swell</font>

840
00:37:58,089 --> 00:38:03,880
systems I'm also quite positive<font color="#CCCCCC"> that</font>

841
00:38:02,079 --> 00:38:06,339
such a feature<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be implemented if you</font>

842
00:38:03,880 --> 00:38:08,500
<font color="#E5E5E5">seek a mandatory access control but I</font>

843
00:38:06,339 --> 00:38:10,328
don't<font color="#E5E5E5"> think anybody feels brave enough</font>

844
00:38:08,500 --> 00:38:11,800
to<font color="#E5E5E5"> write a policy for that because it's</font>

845
00:38:10,329 --> 00:38:13,990
going to<font color="#E5E5E5"> be a pain in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> ass as a</font>

846
00:38:11,800 --> 00:38:16,630
matter of fact because<font color="#CCCCCC"> most users will</font>

847
00:38:13,990 --> 00:38:18,970
come after was like yeah you know I<font color="#E5E5E5"> told</font>

848
00:38:16,630 --> 00:38:21,550
you<font color="#E5E5E5"> T's that was said</font><font color="#CCCCCC"> to me</font><font color="#E5E5E5"> on a random</font>

849
00:38:18,970 --> 00:38:24,939
forum on the<font color="#CCCCCC"> internet and now I can no</font>

850
00:38:21,550 --> 00:38:30,970
<font color="#CCCCCC">longer want</font><font color="#E5E5E5"> my USB pendrive and write my</font>

851
00:38:24,940 --> 00:38:32,500
own presentations on it yeah<font color="#E5E5E5"> okay one of</font>

852
00:38:30,970 --> 00:38:34,868
the really cool<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> we had and</font>

853
00:38:32,500 --> 00:38:37,270
that<font color="#CCCCCC"> could be</font><font color="#E5E5E5"> really nice to see on tell</font>

854
00:38:34,869 --> 00:38:38,950
you do<font color="#CCCCCC"> colonel I mean yeah raise</font><font color="#E5E5E5"> your</font>

855
00:38:37,270 --> 00:38:43,690
hands if you<font color="#E5E5E5"> if you have used that</font><font color="#CCCCCC"> VST</font>

856
00:38:38,950 --> 00:38:45,578
before yes<font color="#E5E5E5"> so I guess that you guys know</font>

857
00:38:43,690 --> 00:38:50,109
<font color="#CCCCCC">about jails</font><font color="#E5E5E5"> and the difference</font><font color="#CCCCCC"> between a</font>

858
00:38:45,579 --> 00:38:52,359
jail and a chroot<font color="#E5E5E5"> basically a chroot</font>

859
00:38:50,109 --> 00:38:55,089
means that you change<font color="#E5E5E5"> the root folder</font>

860
00:38:52,359 --> 00:38:57,009
for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> a specific</font><font color="#CCCCCC"> process was if you</font>

861
00:38:55,089 --> 00:38:58,930
do a jail<font color="#E5E5E5"> you prevent the process from</font>

862
00:38:57,010 --> 00:39:02,470
<font color="#E5E5E5">getting outside of the</font><font color="#CCCCCC"> route that you</font>

863
00:38:58,930 --> 00:39:05,609
have<font color="#CCCCCC"> set up or</font><font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> there is no such</font>

864
00:39:02,470 --> 00:39:08,770
feature I mean we don't have jails but

865
00:39:05,609 --> 00:39:11,440
<font color="#E5E5E5">geotech actually modified the chroot</font>

866
00:39:08,770 --> 00:39:15,220
<font color="#E5E5E5">call so you can actually make a jail</font><font color="#CCCCCC"> or</font>

867
00:39:11,440 --> 00:39:16,690
when you think chroot<font color="#E5E5E5"> so it could be</font>

868
00:39:15,220 --> 00:39:21,250
<font color="#E5E5E5">really nice to see proper games</font>

869
00:39:16,690 --> 00:39:23,950
implemented on<font color="#CCCCCC"> linux</font><font color="#E5E5E5"> maybe hopefully not</font>

870
00:39:21,250 --> 00:39:27,050
using namespace STD

871
00:39:23,950 --> 00:39:28,939
well namespaces have been known to have

872
00:39:27,050 --> 00:39:30,680
some vulnerabilities in the past so they

873
00:39:28,940 --> 00:39:36,190
are like not the most valuable<font color="#CCCCCC"> feature</font>

874
00:39:30,680 --> 00:39:39,710
nowadays<font color="#E5E5E5"> we also have things like</font>

875
00:39:36,190 --> 00:39:41,210
enforcing process limits on<font color="#E5E5E5"> X X and that</font>

876
00:39:39,710 --> 00:39:44,510
actually should<font color="#E5E5E5"> be integrated</font><font color="#CCCCCC"> into the</font>

877
00:39:41,210 --> 00:39:48,200
<font color="#E5E5E5">Linux kernel I mean you guys note</font><font color="#CCCCCC"> that</font>

878
00:39:44,510 --> 00:39:49,850
if you do a fork bomb<font color="#E5E5E5"> then the for bomb</font>

879
00:39:48,200 --> 00:39:51,410
at some point is going<font color="#CCCCCC"> to stop if you</font>

880
00:39:49,850 --> 00:39:54,140
have a limit of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> number of</font><font color="#E5E5E5"> processes</font>

881
00:39:51,410 --> 00:39:56,540
that<font color="#E5E5E5"> that</font><font color="#CCCCCC"> specific user can plan what</font>

882
00:39:54,140 --> 00:40:00,170
happens if you actually<font color="#E5E5E5"> make that when</font>

883
00:39:56,540 --> 00:40:03,800
<font color="#CCCCCC">you cannot fork</font><font color="#E5E5E5"> you run some set to IV</font>

884
00:40:00,170 --> 00:40:06,740
binary which is the limit of<font color="#CCCCCC"> process</font>

885
00:40:03,800 --> 00:40:08,150
<font color="#CCCCCC">that will be applied it will be a limit</font>

886
00:40:06,740 --> 00:40:11,540
of processes will<font color="#CCCCCC"> be the one</font><font color="#E5E5E5"> of the</font>

887
00:40:08,150 --> 00:40:12,380
users<font color="#CCCCCC"> for which you have</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> to ID</font>

888
00:40:11,540 --> 00:40:14,600
<font color="#E5E5E5">program</font>

889
00:40:12,380 --> 00:40:18,080
so for example<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> can sue when you</font>

890
00:40:14,600 --> 00:40:21,520
cannot<font color="#CCCCCC"> two more Forks you will have an</font>

891
00:40:18,080 --> 00:40:23,690
instance of still running there and

892
00:40:21,520 --> 00:40:25,640
since the process<font color="#E5E5E5"> will be</font><font color="#CCCCCC"> all net by</font>

893
00:40:23,690 --> 00:40:28,820
<font color="#CCCCCC">route</font><font color="#E5E5E5"> you will be able to do another</font>

894
00:40:25,640 --> 00:40:30,770
fork afterwards<font color="#E5E5E5"> that will then be able</font>

895
00:40:28,820 --> 00:40:33,230
<font color="#E5E5E5">to call</font><font color="#CCCCCC"> su again and keep doing</font><font color="#E5E5E5"> that</font>

896
00:40:30,770 --> 00:40:35,000
<font color="#E5E5E5">process iteratively so you will be able</font>

897
00:40:33,230 --> 00:40:37,460
to<font color="#E5E5E5"> filter more even if there is a limit</font>

898
00:40:35,000 --> 00:40:40,370
of processes because you will have say

899
00:40:37,460 --> 00:40:43,310
<font color="#E5E5E5">what 1,024 processes owned by the user</font>

900
00:40:40,370 --> 00:40:46,580
and<font color="#E5E5E5"> altogther processes will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> owned at</font>

901
00:40:43,310 --> 00:40:49,610
by the root account so what they did<font color="#CCCCCC"> is</font>

902
00:40:46,580 --> 00:40:51,110
<font color="#CCCCCC">that you were not able to</font><font color="#E5E5E5"> run</font><font color="#CCCCCC"> x'q when</font>

903
00:40:49,610 --> 00:40:54,590
you hit<font color="#E5E5E5"> the limit of processes that you</font>

904
00:40:51,110 --> 00:40:57,980
had but well I should say that<font color="#E5E5E5"> that is</font>

905
00:40:54,590 --> 00:41:00,440
<font color="#E5E5E5">not an totally effective</font><font color="#CCCCCC"> Monsieur</font>

906
00:40:57,980 --> 00:41:02,780
because if you make the four<font color="#CCCCCC"> poems</font>

907
00:41:00,440 --> 00:41:04,850
coordinate between themselves<font color="#CCCCCC"> so they</font>

908
00:41:02,780 --> 00:41:07,850
will stay away<font color="#E5E5E5"> stat one process below</font>

909
00:41:04,850 --> 00:41:09,380
the limit<font color="#CCCCCC"> before doing the exec then</font>

910
00:41:07,850 --> 00:41:12,049
they will be able to<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> carve it</font>

911
00:41:09,380 --> 00:41:14,860
attack even if<font color="#E5E5E5"> you enforce X if you have</font>

912
00:41:12,050 --> 00:41:17,660
<font color="#CCCCCC">or</font><font color="#E5E5E5"> touch the process limits on execution</font>

913
00:41:14,860 --> 00:41:19,700
they also had restrictions to prevent

914
00:41:17,660 --> 00:41:22,960
you from accessing<font color="#CCCCCC"> the</font><font color="#E5E5E5"> mask</font><font color="#CCCCCC"> I think that</font>

915
00:41:19,700 --> 00:41:26,660
is now implemented into the<font color="#E5E5E5"> Linux kernel</font>

916
00:41:22,960 --> 00:41:31,580
not<font color="#CCCCCC"> so</font><font color="#E5E5E5"> secure that</font><font color="#CCCCCC"> implementation is but</font>

917
00:41:26,660 --> 00:41:33,799
I think<font color="#CCCCCC"> it is and</font><font color="#E5E5E5"> well they had a mini</font>

918
00:41:31,580 --> 00:41:35,930
mandatory access control think I let<font color="#CCCCCC"> TP</font>

919
00:41:33,800 --> 00:41:37,250
<font color="#E5E5E5">a-- TP if you want to read more about it</font>

920
00:41:35,930 --> 00:41:41,359
<font color="#CCCCCC">I there is a really good</font>

921
00:41:37,250 --> 00:41:44,720
document that<font color="#E5E5E5"> I wrote a few</font><font color="#CCCCCC"> years ago on</font>

922
00:41:41,360 --> 00:41:48,260
network site they<font color="#CCCCCC"> also modified the TCP</font>

923
00:41:44,720 --> 00:41:51,859
stack<font color="#E5E5E5"> so that you would never sent a</font>

924
00:41:48,260 --> 00:41:55,760
reply back<font color="#E5E5E5"> if you didn't</font><font color="#CCCCCC"> had a state for</font>

925
00:41:51,860 --> 00:41:59,030
that packet so basically that makes it a

926
00:41:55,760 --> 00:42:00,820
lot<font color="#E5E5E5"> harder to run something</font><font color="#CCCCCC"> like and not</font>

927
00:41:59,030 --> 00:42:07,160
because you will not be<font color="#CCCCCC"> able to get a</font>

928
00:42:00,820 --> 00:42:08,780
receipt<font color="#E5E5E5"> or was it</font><font color="#CCCCCC"> colette and i yea</font>

929
00:42:07,160 --> 00:42:11,450
reset packet telling that the port is

930
00:42:08,780 --> 00:42:12,680
<font color="#CCCCCC">closed at or</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> EP response saying that</font>

931
00:42:11,450 --> 00:42:15,730
<font color="#E5E5E5">nobody's listening on that</font><font color="#CCCCCC"> a specific</font>

932
00:42:12,680 --> 00:42:18,799
<font color="#E5E5E5">port</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that also prevents you from</font>

933
00:42:15,730 --> 00:42:24,440
using<font color="#E5E5E5"> an attack that</font><font color="#CCCCCC"> is known as last</font>

934
00:42:18,800 --> 00:42:27,320
<font color="#E5E5E5">ack</font><font color="#CCCCCC"> the last xtk attack basically</font><font color="#E5E5E5"> is</font>

935
00:42:24,440 --> 00:42:28,490
that<font color="#E5E5E5"> you prevent sending the</font><font color="#CCCCCC"> ack after</font>

936
00:42:27,320 --> 00:42:30,650
you close the connection<font color="#E5E5E5"> so the</font>

937
00:42:28,490 --> 00:42:32,060
connection<font color="#E5E5E5"> looks as if it's closed but</font>

938
00:42:30,650 --> 00:42:34,490
it's not actually<font color="#CCCCCC"> closed</font><font color="#E5E5E5"> because you</font>

939
00:42:32,060 --> 00:42:37,160
have to keep<font color="#E5E5E5"> sending the fin packet on</font>

940
00:42:34,490 --> 00:42:39,140
the<font color="#CCCCCC"> tcp to the other side and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> you</font>

941
00:42:37,160 --> 00:42:40,640
<font color="#E5E5E5">get a confirmation that it has actually</font>

942
00:42:39,140 --> 00:42:45,799
<font color="#CCCCCC">f</font><font color="#E5E5E5"> no let's say that the connection is</font>

943
00:42:40,640 --> 00:42:47,420
closed<font color="#CCCCCC"> there were a</font><font color="#E5E5E5"> few things like</font>

944
00:42:45,800 --> 00:42:51,080
restrictions to the<font color="#E5E5E5"> socket that's a</font>

945
00:42:47,420 --> 00:42:52,430
mandatory<font color="#CCCCCC"> access control thing a really</font>

946
00:42:51,080 --> 00:42:53,840
cool thing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> the kernel is</font>

947
00:42:52,430 --> 00:42:55,730
working on is that<font color="#CCCCCC"> they move</font><font color="#E5E5E5"> a Delta</font>

948
00:42:53,840 --> 00:42:57,920
formation about the process and<font color="#E5E5E5"> the</font>

949
00:42:55,730 --> 00:43:00,740
<font color="#CCCCCC">threats outside of the stack of</font><font color="#E5E5E5"> the</font>

950
00:42:57,920 --> 00:43:03,020
process so<font color="#E5E5E5"> that meant that you</font><font color="#CCCCCC"> couldn't</font>

951
00:43:00,740 --> 00:43:04,729
<font color="#E5E5E5">use a stack overflow attack in order to</font>

952
00:43:03,020 --> 00:43:07,720
<font color="#CCCCCC">were right you said identifier of the</font>

953
00:43:04,730 --> 00:43:10,370
process that we<font color="#CCCCCC"> call an</font><font color="#E5E5E5"> become</font><font color="#CCCCCC"> root</font><font color="#E5E5E5"> and</font>

954
00:43:07,720 --> 00:43:13,430
they had a<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> collect active kernel</font>

955
00:43:10,370 --> 00:43:15,859
<font color="#E5E5E5">exploit response basically if if we hear</font>

956
00:43:13,430 --> 00:43:17,990
SEC detected some attempt at<font color="#CCCCCC"> exploiting</font>

957
00:43:15,860 --> 00:43:20,570
a vulnerability like a buffer overflow

958
00:43:17,990 --> 00:43:22,220
on the kernel it<font color="#CCCCCC"> would prevent the user</font>

959
00:43:20,570 --> 00:43:23,900
from doing honey further attempts

960
00:43:22,220 --> 00:43:27,319
basically it<font color="#CCCCCC"> could kill all processes of</font>

961
00:43:23,900 --> 00:43:29,660
the user and prevent any new<font color="#E5E5E5"> processes</font>

962
00:43:27,320 --> 00:43:31,670
from<font color="#E5E5E5"> the user being implemented this</font>

963
00:43:29,660 --> 00:43:35,210
could be done with a<font color="#E5E5E5"> mandatory access</font>

964
00:43:31,670 --> 00:43:36,860
control policy but<font color="#CCCCCC"> you we need</font><font color="#E5E5E5"> to update</font>

965
00:43:35,210 --> 00:43:40,130
the kernel in order to allow it<font color="#CCCCCC"> to</font>

966
00:43:36,860 --> 00:43:42,020
<font color="#E5E5E5">understand that kind of a situation and</font>

967
00:43:40,130 --> 00:43:43,700
well they had a shitload of kernel

968
00:43:42,020 --> 00:43:46,450
auditing informations<font color="#CCCCCC"> I mean you could</font>

969
00:43:43,700 --> 00:43:49,759
<font color="#CCCCCC">law</font><font color="#E5E5E5"> every single chroot everything else</font>

970
00:43:46,450 --> 00:43:50,549
directory change execution<font color="#E5E5E5"> you could</font>

971
00:43:49,760 --> 00:43:52,470
<font color="#CCCCCC">lock</font>

972
00:43:50,550 --> 00:43:54,510
if there was any change to<font color="#CCCCCC"> the system</font>

973
00:43:52,470 --> 00:43:58,230
<font color="#E5E5E5">clock so that</font><font color="#CCCCCC"> your logs would not be</font>

974
00:43:54,510 --> 00:44:00,120
skilled<font color="#E5E5E5"> and I study for me and I that is</font>

975
00:43:58,230 --> 00:44:03,690
something<font color="#CCCCCC"> that we should really consider</font>

976
00:44:00,120 --> 00:44:05,580
integrating back into Linux<font color="#E5E5E5"> and finally</font>

977
00:44:03,690 --> 00:44:08,160
and that's not<font color="#E5E5E5"> year SEC related we had</font>

978
00:44:05,580 --> 00:44:10,470
seat loads of mandatory<font color="#E5E5E5"> access controls</font>

979
00:44:08,160 --> 00:44:12,750
I mean if you use into hardened<font color="#E5E5E5"> you are</font>

980
00:44:10,470 --> 00:44:16,830
going to have an easy<font color="#CCCCCC"> time using silly</font>

981
00:44:12,750 --> 00:44:18,690
<font color="#E5E5E5">nukes</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> is here time I mean it's</font>

982
00:44:16,830 --> 00:44:21,240
still going to<font color="#CCCCCC"> be painful but a little</font>

983
00:44:18,690 --> 00:44:27,060
<font color="#E5E5E5">bit less</font><font color="#CCCCCC"> will have quite good policies</font>

984
00:44:21,240 --> 00:44:28,859
thanks to Swift and<font color="#CCCCCC"> / Fenian</font><font color="#E5E5E5"> so and they</font>

985
00:44:27,060 --> 00:44:30,509
<font color="#E5E5E5">also provide</font><font color="#CCCCCC"> will National Board on IRC</font>

986
00:44:28,860 --> 00:44:32,130
so if you guys want to<font color="#E5E5E5"> test</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Linux</font>

987
00:44:30,510 --> 00:44:34,200
and don't know where<font color="#E5E5E5"> to start</font>

988
00:44:32,130 --> 00:44:37,080
<font color="#E5E5E5">consider using and too hard and it might</font>

989
00:44:34,200 --> 00:44:41,850
actually work<font color="#CCCCCC"> for</font><font color="#E5E5E5"> you so I think we have</font>

990
00:44:37,080 --> 00:44:43,650
<font color="#E5E5E5">like 15 minutes left and so I'm going to</font>

991
00:44:41,850 --> 00:44:46,319
<font color="#E5E5E5">skip the part where I talk</font><font color="#CCCCCC"> about the</font><font color="#E5E5E5"> GCC</font>

992
00:44:43,650 --> 00:44:48,090
plugins<font color="#CCCCCC"> because doesn't make much sense</font>

993
00:44:46,320 --> 00:44:50,580
I<font color="#CCCCCC"> mean</font><font color="#E5E5E5"> till interesting one that</font><font color="#CCCCCC"> you</font>

994
00:44:48,090 --> 00:44:54,360
will see is the<font color="#E5E5E5"> constant</font><font color="#CCCCCC"> Phi one that</font>

995
00:44:50,580 --> 00:44:56,160
marks<font color="#CCCCCC"> data is constant</font><font color="#E5E5E5"> actively so that</font>

996
00:44:54,360 --> 00:44:57,330
it can be put<font color="#CCCCCC"> on</font><font color="#E5E5E5"> target</font><font color="#CCCCCC"> only memory and</font>

997
00:44:56,160 --> 00:45:00,540
you can<font color="#E5E5E5"> prevent an attacker from</font>

998
00:44:57,330 --> 00:45:02,759
actually<font color="#CCCCCC"> using it so I'm going to make</font>

999
00:45:00,540 --> 00:45:04,590
use<font color="#E5E5E5"> 10 minute introduction on how to</font>

1000
00:45:02,760 --> 00:45:10,400
install<font color="#E5E5E5"> into</font><font color="#CCCCCC"> hardened if you have never</font>

1001
00:45:04,590 --> 00:45:15,090
<font color="#E5E5E5">tried to do that there is a really nice</font>

1002
00:45:10,400 --> 00:45:16,920
<font color="#E5E5E5">manual collect taken 200 if you okay how</font>

1003
00:45:15,090 --> 00:45:20,640
do<font color="#E5E5E5"> you use it</font><font color="#CCCCCC"> in to</font><font color="#E5E5E5"> before or try to use</font>

1004
00:45:16,920 --> 00:45:22,470
and<font color="#E5E5E5"> to before yeah I was I was</font><font color="#CCCCCC"> looking</font>

1005
00:45:20,640 --> 00:45:23,850
at you because if you<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> thought</font>

1006
00:45:22,470 --> 00:45:25,709
<font color="#E5E5E5">were I get to develop and how</font><font color="#CCCCCC"> they just</font>

1007
00:45:23,850 --> 00:45:28,620
<font color="#CCCCCC">at the end to</font><font color="#E5E5E5"> be for</font><font color="#CCCCCC"> usually you could</font>

1008
00:45:25,710 --> 00:45:30,030
be lying to<font color="#E5E5E5"> me perfect okay so</font><font color="#CCCCCC"> two of</font>

1009
00:45:28,620 --> 00:45:31,859
<font color="#E5E5E5">you that have</font><font color="#CCCCCC"> you sat in two before note</font>

1010
00:45:30,030 --> 00:45:34,260
that there<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> document collection</font><font color="#CCCCCC"> to</font>

1011
00:45:31,860 --> 00:45:35,850
handbook<font color="#CCCCCC"> that explains step by step how</font>

1012
00:45:34,260 --> 00:45:38,700
do you install a<font color="#CCCCCC"> into system on your</font>

1013
00:45:35,850 --> 00:45:40,410
<font color="#E5E5E5">computer</font><font color="#CCCCCC"> it's a lot easier</font><font color="#E5E5E5"> than it seems</font>

1014
00:45:38,700 --> 00:45:41,939
<font color="#E5E5E5">I mean you</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> have to copy paste most</font>

1015
00:45:40,410 --> 00:45:45,839
of the comments<font color="#E5E5E5"> blindly and it will not</font>

1016
00:45:41,940 --> 00:45:48,240
<font color="#CCCCCC">prolly work I know I know</font><font color="#E5E5E5"> it's also</font>

1017
00:45:45,840 --> 00:45:51,000
stupid<font color="#E5E5E5"> but it actually works I mean it's</font>

1018
00:45:48,240 --> 00:45:52,799
amazing<font color="#CCCCCC"> so basically there is two</font>

1019
00:45:51,000 --> 00:45:55,740
differences on the handbook that<font color="#E5E5E5"> you</font>

1020
00:45:52,800 --> 00:45:57,240
need to apply if you want to if you<font color="#E5E5E5"> want</font>

1021
00:45:55,740 --> 00:45:59,129
to to make<font color="#CCCCCC"> onion too hard and</font>

1022
00:45:57,240 --> 00:46:01,890
installation you have<font color="#CCCCCC"> to use a hardened</font>

1023
00:45:59,130 --> 00:46:03,420
state<font color="#CCCCCC"> tree instead of the normal ones if</font>

1024
00:46:01,890 --> 00:46:04,410
you try to<font color="#E5E5E5"> download the stage 3 you will</font>

1025
00:46:03,420 --> 00:46:06,630
see that once

1026
00:46:04,410 --> 00:46:09,230
of them are<font color="#CCCCCC"> lava lettuce hardened pick</font>

1027
00:46:06,630 --> 00:46:11,970
one of them<font color="#CCCCCC"> the last</font><font color="#E5E5E5"> one if you can and</font>

1028
00:46:09,230 --> 00:46:13,770
you were super set to use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> hardened</font>

1029
00:46:11,970 --> 00:46:17,069
sauces but that is no<font color="#CCCCCC"> longer possible</font>

1030
00:46:13,770 --> 00:46:18,870
because well this Saturday<font color="#CCCCCC"> we are</font>

1031
00:46:17,070 --> 00:46:20,430
masking the hardened sources and we are

1032
00:46:18,870 --> 00:46:22,350
removing them by the end<font color="#CCCCCC"> of</font><font color="#E5E5E5"> September</font>

1033
00:46:20,430 --> 00:46:25,020
because<font color="#CCCCCC"> here sake</font><font color="#E5E5E5"> is no longer providing</font>

1034
00:46:22,350 --> 00:46:29,700
<font color="#CCCCCC">new patches</font><font color="#E5E5E5"> that we can use as the core</font>

1035
00:46:25,020 --> 00:46:32,160
of our hardened sources<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> so if you</font>

1036
00:46:29,700 --> 00:46:34,859
want<font color="#E5E5E5"> to use in too hard and I can give</font>

1037
00:46:32,160 --> 00:46:39,629
<font color="#E5E5E5">you three different</font><font color="#CCCCCC"> possibilities</font><font color="#E5E5E5"> you</font>

1038
00:46:34,860 --> 00:46:42,900
<font color="#E5E5E5">can use the normal Linux kernel so you</font>

1039
00:46:39,630 --> 00:46:46,260
will then be using healthiest<font color="#CCCCCC"> K SPP</font>

1040
00:46:42,900 --> 00:46:48,330
features and the<font color="#E5E5E5"> SCAF a scattered</font>

1041
00:46:46,260 --> 00:46:50,460
everywhere security features you will

1042
00:46:48,330 --> 00:46:53,270
find for example that the<font color="#CCCCCC"> mask</font>

1043
00:46:50,460 --> 00:46:56,250
restrictions are on<font color="#CCCCCC"> the booking</font><font color="#E5E5E5"> options</font>

1044
00:46:53,270 --> 00:47:00,540
you can<font color="#E5E5E5"> also use the mini ply sources</font>

1045
00:46:56,250 --> 00:47:03,020
mini ply is a user<font color="#E5E5E5"> or well X user of the</font>

1046
00:47:00,540 --> 00:47:05,910
<font color="#E5E5E5">air security that is basically</font>

1047
00:47:03,020 --> 00:47:07,800
backporting<font color="#CCCCCC"> Hult</font><font color="#E5E5E5"> a four point nine</font>

1048
00:47:05,910 --> 00:47:10,830
<font color="#CCCCCC">brands pads that are applied to</font><font color="#E5E5E5"> the</font>

1049
00:47:07,800 --> 00:47:13,590
kernel to the last probably set<font color="#CCCCCC"> here sec</font>

1050
00:47:10,830 --> 00:47:17,130
<font color="#CCCCCC">patches so you can use them but</font><font color="#E5E5E5"> you do</font>

1051
00:47:13,590 --> 00:47:20,520
so what you don't risk because well as

1052
00:47:17,130 --> 00:47:22,650
<font color="#E5E5E5">probably everybody</font><font color="#CCCCCC"> knows here not when</font>

1053
00:47:20,520 --> 00:47:24,450
you<font color="#E5E5E5"> are using a stable kernel brands you</font>

1054
00:47:22,650 --> 00:47:27,360
don't get<font color="#E5E5E5"> everything that the mothers</font>

1055
00:47:24,450 --> 00:47:29,129
<font color="#E5E5E5">backported only only</font><font color="#CCCCCC"> the patches that</font>

1056
00:47:27,360 --> 00:47:32,010
<font color="#CCCCCC">are</font><font color="#E5E5E5"> marketed security and not all</font>

1057
00:47:29,130 --> 00:47:33,600
security patches<font color="#E5E5E5"> are actually market for</font>

1058
00:47:32,010 --> 00:47:34,950
backporting<font color="#E5E5E5"> into the kernel</font><font color="#CCCCCC"> so there is</font>

1059
00:47:33,600 --> 00:47:37,770
a risk<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> will actually miss</font><font color="#E5E5E5"> some</font>

1060
00:47:34,950 --> 00:47:40,919
patches that are<font color="#E5E5E5"> on the latest newest</font>

1061
00:47:37,770 --> 00:47:44,280
official version of<font color="#CCCCCC"> linux finally</font><font color="#E5E5E5"> a</font>

1062
00:47:40,920 --> 00:47:47,720
steer cut from<font color="#E5E5E5"> Copperhead</font><font color="#CCCCCC"> OS is working</font>

1063
00:47:44,280 --> 00:47:51,570
on<font color="#E5E5E5"> a pre it collect</font><font color="#CCCCCC"> linux Carvin</font><font color="#E5E5E5"> that</font>

1064
00:47:47,720 --> 00:47:53,459
tries to<font color="#E5E5E5"> pick up some of</font><font color="#CCCCCC"> the of the</font>

1065
00:47:51,570 --> 00:47:55,800
<font color="#CCCCCC">features front year</font><font color="#E5E5E5"> ii from the</font>

1066
00:47:53,460 --> 00:47:58,620
mainstream kernel and keep them in his

1067
00:47:55,800 --> 00:48:03,360
own repository<font color="#E5E5E5"> and well it works more or</font>

1068
00:47:58,620 --> 00:48:05,310
less well<font color="#E5E5E5"> i mean i if you ask me what</font>

1069
00:48:03,360 --> 00:48:07,080
<font color="#CCCCCC">should</font><font color="#E5E5E5"> i use right here right now I will</font>

1070
00:48:05,310 --> 00:48:08,880
<font color="#CCCCCC">tell you that you should try mean apply</font>

1071
00:48:07,080 --> 00:48:11,130
<font color="#CCCCCC">miniclip</font><font color="#E5E5E5"> access because they are</font>

1072
00:48:08,880 --> 00:48:12,950
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> quite</font><font color="#CCCCCC"> good for now</font><font color="#E5E5E5"> but you</font>

1073
00:48:11,130 --> 00:48:17,130
should consider moving<font color="#CCCCCC"> to mainstream</font>

1074
00:48:12,950 --> 00:48:18,220
<font color="#E5E5E5">Linux on the future and I think that</font>

1075
00:48:17,130 --> 00:48:19,510
<font color="#CCCCCC">commissary</font>

1076
00:48:18,220 --> 00:48:24,009
to say I mean<font color="#E5E5E5"> do you guys have any</font>

1077
00:48:19,510 --> 00:48:26,430
questions<font color="#CCCCCC"> or anything yes please</font><font color="#E5E5E5"> ha no</font>

1078
00:48:24,010 --> 00:48:26,430
<font color="#E5E5E5">go ahead</font>

1079
00:48:27,990 --> 00:48:35,669
so with like<font color="#CCCCCC"> Gian security</font><font color="#E5E5E5"> probably not</font>

1080
00:48:32,619 --> 00:48:38,140
being available anymore<font color="#E5E5E5"> and soon and</font>

1081
00:48:35,670 --> 00:48:39,849
like<font color="#E5E5E5"> position independent executables</font>

1082
00:48:38,140 --> 00:48:42,400
are<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be default with</font><font color="#CCCCCC"> the next</font>

1083
00:48:39,849 --> 00:48:44,770
profile update and<font color="#CCCCCC"> trend true the</font>

1084
00:48:42,400 --> 00:48:48,340
question<font color="#CCCCCC"> is what's remaining that that</font>

1085
00:48:44,770 --> 00:48:50,920
<font color="#E5E5E5">general</font><font color="#CCCCCC"> Harden is doing and like I was</font>

1086
00:48:48,340 --> 00:48:52,720
considering<font color="#E5E5E5"> writing a kind of</font>

1087
00:48:50,920 --> 00:48:55,060
<font color="#E5E5E5">provocative mail to the mailing list to</font>

1088
00:48:52,720 --> 00:48:58,089
say hey maybe we<font color="#CCCCCC"> should just kind</font><font color="#E5E5E5"> of</font>

1089
00:48:55,060 --> 00:49:00,849
kill<font color="#CCCCCC"> gen to</font><font color="#E5E5E5"> hand and say our goal is to</font>

1090
00:48:58,090 --> 00:49:04,690
<font color="#CCCCCC">just</font><font color="#E5E5E5"> put all</font><font color="#CCCCCC"> the things that</font><font color="#E5E5E5"> hard once</font>

1091
00:49:00,849 --> 00:49:07,810
was<font color="#E5E5E5"> into I</font><font color="#CCCCCC"> mean into normal rental</font><font color="#E5E5E5"> the</font>

1092
00:49:04,690 --> 00:49:11,349
thing is that<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> alt a to harden</font>

1093
00:49:07,810 --> 00:49:13,540
goal is used it was or used to be<font color="#E5E5E5"> being</font>

1094
00:49:11,349 --> 00:49:15,730
some kind of playground where you could

1095
00:49:13,540 --> 00:49:17,380
<font color="#E5E5E5">actually test out these really cool have</font>

1096
00:49:15,730 --> 00:49:19,869
any features<font color="#CCCCCC"> that</font><font color="#E5E5E5"> will eventually be</font>

1097
00:49:17,380 --> 00:49:22,030
integrated into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> mainstream yen - but</font>

1098
00:49:19,869 --> 00:49:24,369
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> with P ie I think the</font>

1099
00:49:22,030 --> 00:49:27,250
problem was<font color="#E5E5E5"> that it was available in</font>

1100
00:49:24,369 --> 00:49:31,119
harden for like more than<font color="#CCCCCC"> ten years and</font>

1101
00:49:27,250 --> 00:49:33,310
it was basically applied to<font color="#CCCCCC"> maintain too</font>

1102
00:49:31,119 --> 00:49:36,160
far<font color="#E5E5E5"> too late</font><font color="#CCCCCC"> and yeah this</font><font color="#E5E5E5"> should have</font>

1103
00:49:33,310 --> 00:49:39,040
been<font color="#E5E5E5"> a default feature long ago and and</font>

1104
00:49:36,160 --> 00:49:41,830
so I'm kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> wondering if it shouldn't</font>

1105
00:49:39,040 --> 00:49:43,839
be morally goal to<font color="#CCCCCC"> just make gen true</font>

1106
00:49:41,830 --> 00:49:46,359
itself or or in general mainstream

1107
00:49:43,839 --> 00:49:47,680
distributions itself<font color="#E5E5E5"> more secure instead</font>

1108
00:49:46,359 --> 00:49:49,630
of having separate Hardenbrook<font color="#E5E5E5"> and</font>

1109
00:49:47,680 --> 00:49:51,790
having it as a kind<font color="#E5E5E5"> of playground for</font>

1110
00:49:49,630 --> 00:49:54,460
future features<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> that I</font><font color="#E5E5E5"> think a</font>

1111
00:49:51,790 --> 00:49:56,830
good approach but like right<font color="#E5E5E5"> now I don't</font>

1112
00:49:54,460 --> 00:49:59,349
<font color="#E5E5E5">see a whole lot left that's inherent and</font>

1113
00:49:56,830 --> 00:50:02,080
that if we take<font color="#CCCCCC"> -</font><font color="#E5E5E5"> your security</font><font color="#CCCCCC"> away is</font>

1114
00:49:59,349 --> 00:50:05,680
<font color="#E5E5E5">not a very big difference anymore it is</font>

1115
00:50:02,080 --> 00:50:07,660
two differences we are<font color="#E5E5E5"> using the strong</font>

1116
00:50:05,680 --> 00:50:12,609
<font color="#E5E5E5">stack protector instead of the default</font>

1117
00:50:07,660 --> 00:50:14,348
one<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we are using a stack tick and</font>

1118
00:50:12,609 --> 00:50:17,290
I'm not sure if it's tactic has been

1119
00:50:14,349 --> 00:50:19,710
<font color="#CCCCCC">enabled on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> n2 or</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> I think it</font>

1120
00:50:17,290 --> 00:50:19,710
<font color="#CCCCCC">hasn't</font>

1121
00:50:19,900 --> 00:50:24,760
the other thing was<font color="#E5E5E5"> this linker thing</font>

1122
00:50:22,030 --> 00:50:29,320
with fine<font color="#CCCCCC"> no I'm not</font><font color="#E5E5E5"> sure what the exact</font>

1123
00:50:24,760 --> 00:50:31,220
impact is but yeah but it's not a whole

1124
00:50:29,320 --> 00:50:33,950
lot yeah

1125
00:50:31,220 --> 00:50:36,799
actually<font color="#E5E5E5"> well</font><font color="#CCCCCC"> since</font><font color="#E5E5E5"> you have to get the</font>

1126
00:50:33,950 --> 00:50:38,598
microphone<font color="#CCCCCC"> I know that you were giving</font>

1127
00:50:36,800 --> 00:50:43,030
<font color="#CCCCCC">some really cool</font><font color="#E5E5E5"> talks that forced them</font>

1128
00:50:38,599 --> 00:50:45,470
about the control flow integrity<font color="#CCCCCC"> CFI</font>

1129
00:50:43,030 --> 00:50:47,450
that would actually make<font color="#E5E5E5"> for a really</font>

1130
00:50:45,470 --> 00:50:50,149
<font color="#E5E5E5">amazing featuring and to</font><font color="#CCCCCC"> Harlan</font><font color="#E5E5E5"> so if</font>

1131
00:50:47,450 --> 00:50:53,180
you feel like<font color="#E5E5E5"> integrating</font><font color="#CCCCCC"> it I could</font>

1132
00:50:50,150 --> 00:50:54,859
really<font color="#CCCCCC"> up support you on that</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> I</font>

1133
00:50:53,180 --> 00:50:56,540
told<font color="#CCCCCC"> you what forced them but well I</font>

1134
00:50:54,859 --> 00:50:59,750
want<font color="#E5E5E5"> to make it now public so you get a</font>

1135
00:50:56,540 --> 00:51:01,730
<font color="#E5E5E5">little bit more of present now but</font><font color="#CCCCCC"> jokes</font>

1136
00:50:59,750 --> 00:51:04,310
<font color="#CCCCCC">aside if</font><font color="#E5E5E5"> you want to get a CT</font><font color="#CCCCCC"> I</font>

1137
00:51:01,730 --> 00:51:06,349
integrated<font color="#CCCCCC"> Indian to harden it</font><font color="#E5E5E5"> is really</font>

1138
00:51:04,310 --> 00:51:09,349
a cool thing<font color="#E5E5E5"> and I hope that we can get</font>

1139
00:51:06,349 --> 00:51:11,960
that<font color="#CCCCCC"> working it would be</font><font color="#E5E5E5"> really cool if</font>

1140
00:51:09,349 --> 00:51:14,210
we could have<font color="#CCCCCC"> CFI states freeze</font><font color="#E5E5E5"> so</font>

1141
00:51:11,960 --> 00:51:17,420
<font color="#CCCCCC">people can use use the</font><font color="#E5E5E5"> stage</font><font color="#CCCCCC"> 3 instead</font>

1142
00:51:14,210 --> 00:51:20,990
<font color="#E5E5E5">of having to recompile everything so I</font>

1143
00:51:17,420 --> 00:51:22,340
tried<font color="#CCCCCC"> that</font><font color="#E5E5E5"> but it's you have to fix a</font>

1144
00:51:20,990 --> 00:51:27,759
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of things for that</font><font color="#E5E5E5"> to work</font>

1145
00:51:22,340 --> 00:51:34,670
<font color="#CCCCCC">mm-hmm okay well it's worth Opie anyways</font>

1146
00:51:27,760 --> 00:51:37,010
any other questions yes<font color="#E5E5E5"> yeah so a short</font>

1147
00:51:34,670 --> 00:51:38,390
while ago<font color="#CCCCCC"> I tried to oh I was just</font><font color="#E5E5E5"> in</font>

1148
00:51:37,010 --> 00:51:41,180
some informal discussions with<font color="#E5E5E5"> some</font>

1149
00:51:38,390 --> 00:51:42,890
other Debian developers about setting<font color="#E5E5E5"> F</font>

1150
00:51:41,180 --> 00:51:46,390
<font color="#E5E5E5">stat check by default on Debian and</font>

1151
00:51:42,890 --> 00:51:49,220
someone else<font color="#E5E5E5"> linked me an</font><font color="#CCCCCC"> email by</font><font color="#E5E5E5"> some</font>

1152
00:51:46,390 --> 00:51:51,890
someone on our<font color="#E5E5E5"> set security</font><font color="#CCCCCC"> he is</font>

1153
00:51:49,220 --> 00:51:53,180
actually I think separately<font color="#E5E5E5"> he is a GCC</font>

1154
00:51:51,890 --> 00:51:56,779
reviewer but he was<font color="#E5E5E5"> basically talking</font>

1155
00:51:53,180 --> 00:51:58,759
<font color="#E5E5E5">about how stack</font><font color="#CCCCCC"> Shaq</font><font color="#E5E5E5"> gave him some</font>

1156
00:51:56,780 --> 00:52:00,770
problems<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't understand all the</font>

1157
00:51:58,760 --> 00:52:02,810
<font color="#CCCCCC">details of</font><font color="#E5E5E5"> what he's saying but it seems</font>

1158
00:52:00,770 --> 00:52:04,220
like<font color="#E5E5E5"> that it sort of rather</font><font color="#CCCCCC"> than one big</font>

1159
00:52:02,810 --> 00:52:08,150
problem<font color="#E5E5E5"> it's a combination of several</font>

1160
00:52:04,220 --> 00:52:09,859
minor problems<font color="#E5E5E5"> yeah do you think that it</font>

1161
00:52:08,150 --> 00:52:12,710
would<font color="#CCCCCC"> be good</font><font color="#E5E5E5"> to the Debian or just</font>

1162
00:52:09,859 --> 00:52:14,900
other distributions to<font color="#CCCCCC"> main to enable</font>

1163
00:52:12,710 --> 00:52:18,260
this<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> should</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> a stack tech</font>

1164
00:52:14,900 --> 00:52:20,869
specific<font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> because at least onion</font>

1165
00:52:18,260 --> 00:52:23,390
to Harland<font color="#CCCCCC"> I have yet to see a back that</font>

1166
00:52:20,869 --> 00:52:25,670
is opened<font color="#E5E5E5"> saying</font><font color="#CCCCCC"> stack</font><font color="#E5E5E5"> sectors and works</font>

1167
00:52:23,390 --> 00:52:27,560
in<font color="#E5E5E5"> the case of Debian I strongly</font>

1168
00:52:25,670 --> 00:52:29,900
recommend that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> testing it</font>

1169
00:52:27,560 --> 00:52:31,640
<font color="#E5E5E5">first on</font><font color="#CCCCCC"> tone</font><font color="#E5E5E5"> stable branches and if it</font>

1170
00:52:29,900 --> 00:52:34,280
works there then you<font color="#E5E5E5"> bring back to the</font>

1171
00:52:31,640 --> 00:52:35,868
stable<font color="#E5E5E5"> ones as we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> into but you</font>

1172
00:52:34,280 --> 00:52:38,180
have used like major programs like

1173
00:52:35,869 --> 00:52:40,420
Firefox LibreOffice like all of the big

1174
00:52:38,180 --> 00:52:43,750
<font color="#E5E5E5">likes stuff fine with</font><font color="#CCCCCC"> after</font>

1175
00:52:40,420 --> 00:52:46,930
check your<font color="#CCCCCC"> increase computer here</font><font color="#E5E5E5"> it's</font>

1176
00:52:43,750 --> 00:52:49,500
actually<font color="#CCCCCC"> using static and it's a kd5</font>

1177
00:52:46,930 --> 00:52:52,000
system with five<font color="#CCCCCC"> folk standard by</font>

1178
00:52:49,500 --> 00:52:53,890
libreoffice and<font color="#E5E5E5"> at the other big</font>

1179
00:52:52,000 --> 00:52:56,380
programs it works<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> thanks</font>

1180
00:52:53,890 --> 00:52:58,859
so<font color="#E5E5E5"> just so you know it should work</font><font color="#CCCCCC"> out</font>

1181
00:52:56,380 --> 00:52:58,859
of the<font color="#E5E5E5"> box</font>

1182
00:52:59,109 --> 00:53:03,670
I think the GCC developers are

1183
00:53:01,660 --> 00:53:05,578
developing<font color="#CCCCCC"> hot pads</font><font color="#E5E5E5"> to make</font><font color="#CCCCCC"> a stack take</font>

1184
00:53:03,670 --> 00:53:08,380
<font color="#E5E5E5">a little bit better and more strong</font>

1185
00:53:05,579 --> 00:53:10,230
because it's<font color="#E5E5E5"> a bit messy they used</font><font color="#CCCCCC"> two</font>

1186
00:53:08,380 --> 00:53:13,240
pages<font color="#E5E5E5"> and they didn't do so correctly</font>

1187
00:53:10,230 --> 00:53:15,670
<font color="#CCCCCC">but as long as you have a kernel that</font>

1188
00:53:13,240 --> 00:53:19,180
<font color="#E5E5E5">ensures that the stack gap is at least</font>

1189
00:53:15,670 --> 00:53:21,970
two pages<font color="#E5E5E5"> long</font><font color="#CCCCCC"> stack sectors work and</font>

1190
00:53:19,180 --> 00:53:23,618
this<font color="#E5E5E5"> does what I could infer from while</font>

1191
00:53:21,970 --> 00:53:27,419
<font color="#E5E5E5">spending her seat load of time</font>

1192
00:53:23,619 --> 00:53:27,420
<font color="#E5E5E5">documenting myself on this vulnerability</font>

1193
00:53:29,970 --> 00:53:35,439
yeah<font color="#E5E5E5"> I think it's like</font><font color="#CCCCCC"> 1 megabyte or</font>

1194
00:53:33,460 --> 00:53:37,150
<font color="#E5E5E5">something like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> say on the latest</font>

1195
00:53:35,440 --> 00:53:39,700
<font color="#CCCCCC">scanners so it should work</font><font color="#E5E5E5"> without</font><font color="#CCCCCC"> any</font>

1196
00:53:37,150 --> 00:53:42,789
problem these<font color="#E5E5E5"> days</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> like 256 pages</font><font color="#CCCCCC"> I</font>

1197
00:53:39,700 --> 00:53:45,220
think<font color="#CCCCCC"> yeah thanks thanks a lot for</font><font color="#E5E5E5"> your</font>

1198
00:53:42,789 --> 00:53:47,799
input is there any other<font color="#E5E5E5"> questions or</font>

1199
00:53:45,220 --> 00:53:50,109
any other<font color="#E5E5E5"> comments that you want what so</font>

1200
00:53:47,799 --> 00:53:52,299
we'll have a big round<font color="#E5E5E5"> of applause</font>

1201
00:53:50,109 --> 00:53:54,220
please for<font color="#E5E5E5"> Alex for coming up here</font><font color="#CCCCCC"> and</font>

1202
00:53:52,299 --> 00:53:59,380
helping<font color="#E5E5E5"> me explain</font><font color="#CCCCCC"> how buffer overflow</font>

1203
00:53:54,220 --> 00:54:00,759
works and thanks a<font color="#E5E5E5"> lot everybody that</font>

1204
00:53:59,380 --> 00:54:03,269
has come here<font color="#E5E5E5"> it's been a pleasure</font>

1205
00:54:00,759 --> 00:54:03,269
<font color="#E5E5E5">talking to you</font>

1206
00:54:04,050 --> 00:54:08,099
[Applause]

