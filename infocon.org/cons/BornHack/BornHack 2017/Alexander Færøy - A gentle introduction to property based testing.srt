1
00:00:04,250 --> 00:00:08,879
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> please</font><font color="#E5E5E5"> welcome Alex to the stage</font>

2
00:00:07,109 --> 00:00:10,580
and Alex will<font color="#E5E5E5"> talk about a gentle</font>

3
00:00:08,880 --> 00:00:14,000
introduction to property based testing

4
00:00:10,580 --> 00:00:14,000
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> two beers</font>

5
00:00:14,900 --> 00:00:20,970
thank you<font color="#E5E5E5"> yes so this is</font><font color="#CCCCCC"> a presentation</font>

6
00:00:18,539 --> 00:00:23,460
<font color="#CCCCCC">I've done over the last</font><font color="#E5E5E5"> couple of months</font>

7
00:00:20,970 --> 00:00:25,198
<font color="#CCCCCC">I did it at</font><font color="#E5E5E5"> HACC on as well and in other</font>

8
00:00:23,460 --> 00:00:27,539
<font color="#CCCCCC">lines earlier</font>

9
00:00:25,199 --> 00:00:29,429
in July and I thought<font color="#E5E5E5"> it would be</font>

10
00:00:27,539 --> 00:00:31,050
<font color="#E5E5E5">interesting to repeat it here how many</font>

11
00:00:29,429 --> 00:00:34,610
<font color="#CCCCCC">people in the audience</font><font color="#E5E5E5"> are familiar</font><font color="#CCCCCC"> with</font>

12
00:00:31,050 --> 00:00:39,600
property based testing already<font color="#CCCCCC"> Hannah's</font>

13
00:00:34,610 --> 00:00:41,579
<font color="#E5E5E5">Peters</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> he's not raising his hand so</font>

14
00:00:39,600 --> 00:00:43,200
I'm using Erlang as an example<font color="#CCCCCC"> language</font>

15
00:00:41,579 --> 00:00:45,239
but you should be<font color="#CCCCCC"> able to completely</font>

16
00:00:43,200 --> 00:00:47,190
ignore<font color="#CCCCCC"> the Erlang pad it</font><font color="#E5E5E5"> is actually</font>

17
00:00:45,239 --> 00:00:51,000
<font color="#E5E5E5">nothing to do with what I'm trying to</font>

18
00:00:47,190 --> 00:00:53,519
<font color="#E5E5E5">teach here</font><font color="#CCCCCC"> the talk is also gonna</font><font color="#E5E5E5"> go</font>

19
00:00:51,000 --> 00:00:54,960
<font color="#E5E5E5">over a bit what unit testing is and and</font>

20
00:00:53,520 --> 00:00:57,140
how<font color="#E5E5E5"> we use it and how probably based</font>

21
00:00:54,960 --> 00:01:00,030
testing differs from from unit<font color="#E5E5E5"> test</font>

22
00:00:57,140 --> 00:01:03,449
we're then gonna try to<font color="#E5E5E5"> use a library</font>

23
00:01:00,030 --> 00:01:05,610
<font color="#CCCCCC">called proper</font><font color="#E5E5E5"> and Erlang library which</font>

24
00:01:03,449 --> 00:01:09,030
is developed by<font color="#E5E5E5"> various open source</font>

25
00:01:05,610 --> 00:01:11,100
contributors and is available<font color="#E5E5E5"> freely on</font>

26
00:01:09,030 --> 00:01:12,659
github<font color="#E5E5E5"> afterwards we can take some</font>

27
00:01:11,100 --> 00:01:16,679
<font color="#E5E5E5">questions if there is</font><font color="#CCCCCC"> anyone</font><font color="#E5E5E5"> I think the</font>

28
00:01:12,659 --> 00:01:18,119
talk is<font color="#E5E5E5"> gonna take</font><font color="#CCCCCC"> 20</font><font color="#E5E5E5"> minutes or so</font><font color="#CCCCCC"> so</font>

29
00:01:16,680 --> 00:01:22,409
there<font color="#E5E5E5"> are some concepts we need to be</font>

30
00:01:18,119 --> 00:01:24,240
familiar<font color="#E5E5E5"> with before we we begin</font><font color="#CCCCCC"> we have</font>

31
00:01:22,409 --> 00:01:25,290
<font color="#CCCCCC">this thing's</font><font color="#E5E5E5"> called a generator and we</font>

32
00:01:24,240 --> 00:01:27,960
have<font color="#E5E5E5"> something called shrinking</font>

33
00:01:25,290 --> 00:01:30,900
strategies and those two things<font color="#E5E5E5"> are tied</font>

34
00:01:27,960 --> 00:01:34,139
together<font color="#CCCCCC"> so a generator is basically a</font>

35
00:01:30,900 --> 00:01:37,680
way<font color="#CCCCCC"> of</font><font color="#E5E5E5"> generating random values of a</font>

36
00:01:34,140 --> 00:01:42,689
given type<font color="#E5E5E5"> it can be a string it can be</font>

37
00:01:37,680 --> 00:01:44,189
a list it<font color="#E5E5E5"> can be an integer and usually</font>

38
00:01:42,689 --> 00:01:46,289
these<font color="#CCCCCC"> generators should be able</font><font color="#E5E5E5"> to</font>

39
00:01:44,189 --> 00:01:48,869
<font color="#E5E5E5">compose so you should be able to say I</font>

40
00:01:46,290 --> 00:01:51,450
want<font color="#E5E5E5"> a generator of a list of integers</font><font color="#CCCCCC"> I</font>

41
00:01:48,869 --> 00:01:55,159
<font color="#CCCCCC">want a list of</font><font color="#E5E5E5"> integers or strings or</font><font color="#CCCCCC"> a</font>

42
00:01:51,450 --> 00:02:00,509
list of<font color="#E5E5E5"> lists of</font><font color="#CCCCCC"> integers and so on</font>

43
00:01:55,159 --> 00:02:01,920
because<font color="#E5E5E5"> we we use randomness in the</font><font color="#CCCCCC"> test</font>

44
00:02:00,509 --> 00:02:06,060
we want to have some kind<font color="#CCCCCC"> of way to</font>

45
00:02:01,920 --> 00:02:08,699
reduce the the<font color="#CCCCCC"> size of these generated</font>

46
00:02:06,060 --> 00:02:11,069
values and from<font color="#E5E5E5"> that we have the concept</font>

47
00:02:08,699 --> 00:02:13,380
of a shrinking strategy so when the

48
00:02:11,068 --> 00:02:16,530
system<font color="#E5E5E5"> encounters an error</font>

49
00:02:13,380 --> 00:02:20,340
it will try to shrink<font color="#E5E5E5"> the given</font>

50
00:02:16,530 --> 00:02:22,470
generators until there is a<font color="#E5E5E5"> base cave a</font>

51
00:02:20,340 --> 00:02:25,800
minimal test case where where it will

52
00:02:22,470 --> 00:02:27,750
still fail<font color="#E5E5E5"> and for example</font><font color="#CCCCCC"> for a list it</font>

53
00:02:25,800 --> 00:02:29,790
will<font color="#E5E5E5"> be that we shrink towards the empty</font>

54
00:02:27,750 --> 00:02:32,490
list<font color="#CCCCCC"> for integers we will</font><font color="#E5E5E5"> probably</font>

55
00:02:29,790 --> 00:02:35,090
shrink towards<font color="#E5E5E5"> zero for Strings we</font>

56
00:02:32,490 --> 00:02:38,490
shrink towards the<font color="#E5E5E5"> empty list and</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> on</font>

57
00:02:35,090 --> 00:02:40,920
this<font color="#E5E5E5"> is an important part</font><font color="#CCCCCC"> of sort of how</font>

58
00:02:38,490 --> 00:02:42,810
it<font color="#E5E5E5"> works and how it's</font><font color="#CCCCCC"> actually useful</font><font color="#E5E5E5"> to</font>

59
00:02:40,920 --> 00:02:44,970
read these<font color="#E5E5E5"> things afterwards</font><font color="#CCCCCC"> if we have</font>

60
00:02:42,810 --> 00:02:46,410
entirely<font color="#CCCCCC"> generate randomly</font><font color="#E5E5E5"> generated</font>

61
00:02:44,970 --> 00:02:50,820
<font color="#E5E5E5">data we will have very very big error</font>

62
00:02:46,410 --> 00:02:52,410
cases<font color="#E5E5E5"> when we actually find something</font><font color="#CCCCCC"> so</font>

63
00:02:50,820 --> 00:02:55,620
the canonical<font color="#CCCCCC"> example we're going to</font>

64
00:02:52,410 --> 00:02:59,220
<font color="#E5E5E5">look</font><font color="#CCCCCC"> at today is a very</font><font color="#E5E5E5"> simple API it's</font>

65
00:02:55,620 --> 00:03:01,560
a base64 encode<font color="#CCCCCC"> er</font><font color="#E5E5E5"> and a decoder we have</font>

66
00:02:59,220 --> 00:03:04,020
a function we're not really caring<font color="#E5E5E5"> about</font>

67
00:03:01,560 --> 00:03:07,650
how its<font color="#E5E5E5"> defined we're purely</font><font color="#CCCCCC"> looking at</font>

68
00:03:04,020 --> 00:03:10,290
the API<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have an encode function which</font>

69
00:03:07,650 --> 00:03:12,240
takes<font color="#E5E5E5"> a binary and returns a binary this</font>

70
00:03:10,290 --> 00:03:15,030
will always<font color="#CCCCCC"> be a successful</font><font color="#E5E5E5"> operation</font>

71
00:03:12,240 --> 00:03:17,250
there's no way it can fail we have a

72
00:03:15,030 --> 00:03:19,980
decode function<font color="#CCCCCC"> which takes one binary</font>

73
00:03:17,250 --> 00:03:21,630
<font color="#E5E5E5">and outputs another binary this might</font>

74
00:03:19,980 --> 00:03:23,340
fail there might be reasons where we get

75
00:03:21,630 --> 00:03:27,000
invalid data that are<font color="#E5E5E5"> not actually</font><font color="#CCCCCC"> base</font>

76
00:03:23,340 --> 00:03:30,330
64 characters<font color="#CCCCCC"> and thus we will</font><font color="#E5E5E5"> throw an</font>

77
00:03:27,000 --> 00:03:33,030
<font color="#CCCCCC">exception</font><font color="#E5E5E5"> this is not encoded in the</font>

78
00:03:30,330 --> 00:03:34,830
type signature as you can see so we<font color="#E5E5E5"> also</font>

79
00:03:33,030 --> 00:03:37,980
have a function<font color="#CCCCCC"> called is valid which</font>

80
00:03:34,830 --> 00:03:40,470
takes some encoded data<font color="#E5E5E5"> and returns a</font>

81
00:03:37,980 --> 00:03:43,380
boolean true or false<font color="#E5E5E5"> whether the data</font>

82
00:03:40,470 --> 00:03:45,390
<font color="#CCCCCC">is actually</font><font color="#E5E5E5"> valid or not</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is useful</font>

83
00:03:43,380 --> 00:03:47,310
<font color="#E5E5E5">usually in software when we want to</font>

84
00:03:45,390 --> 00:03:50,429
return an error<font color="#CCCCCC"> message</font><font color="#E5E5E5"> and not actually</font>

85
00:03:47,310 --> 00:03:52,230
take the<font color="#CCCCCC"> decode</font><font color="#E5E5E5"> before we start we can</font>

86
00:03:50,430 --> 00:03:54,330
also use<font color="#E5E5E5"> it in the decode</font><font color="#CCCCCC"> function to</font>

87
00:03:52,230 --> 00:03:59,810
actually test before<font color="#CCCCCC"> we start trying</font><font color="#E5E5E5"> to</font>

88
00:03:54,330 --> 00:04:03,120
decode so usually if we had written<font color="#E5E5E5"> this</font>

89
00:03:59,810 --> 00:04:04,650
encoder and decoder<font color="#CCCCCC"> our first thing we</font>

90
00:04:03,120 --> 00:04:08,340
<font color="#E5E5E5">would do would be</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> start writing some</font>

91
00:04:04,650 --> 00:04:11,970
unit tests we know that the encode

92
00:04:08,340 --> 00:04:15,150
function so this weird<font color="#CCCCCC"> there's weird</font>

93
00:04:11,970 --> 00:04:17,700
<font color="#CCCCCC">syntax</font><font color="#E5E5E5"> with the brackets here is an</font>

94
00:04:15,150 --> 00:04:19,829
<font color="#E5E5E5">Airline binary it's basically a string</font>

95
00:04:17,700 --> 00:04:24,539
<font color="#E5E5E5">which does have a very small memory</font>

96
00:04:19,829 --> 00:04:26,430
representation<font color="#E5E5E5"> like a</font><font color="#CCCCCC"> C string what we</font>

97
00:04:24,540 --> 00:04:29,820
will do<font color="#E5E5E5"> here is that</font><font color="#CCCCCC"> we will</font>

98
00:04:26,430 --> 00:04:31,289
check that<font color="#E5E5E5"> the function returns a given</font>

99
00:04:29,820 --> 00:04:34,050
value that we know<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> familiar</font><font color="#CCCCCC"> with</font>

100
00:04:31,289 --> 00:04:38,070
<font color="#E5E5E5">we can use another implementation</font><font color="#CCCCCC"> or we</font>

101
00:04:34,050 --> 00:04:39,930
can try<font color="#CCCCCC"> it out</font><font color="#E5E5E5"> and read various</font><font color="#CCCCCC"> RFC's</font>

102
00:04:38,070 --> 00:04:43,169
and so on to<font color="#E5E5E5"> figure out what what</font><font color="#CCCCCC"> the</font>

103
00:04:39,930 --> 00:04:45,810
<font color="#E5E5E5">values should be so here we test</font><font color="#CCCCCC"> at the</font>

104
00:04:43,169 --> 00:04:48,599
<font color="#CCCCCC">end if we encode</font><font color="#E5E5E5"> the empty string it</font>

105
00:04:45,810 --> 00:04:52,860
encodes<font color="#E5E5E5"> to the empty string if we encode</font>

106
00:04:48,600 --> 00:04:56,250
ABC it<font color="#E5E5E5"> encodes</font><font color="#CCCCCC"> to YW jha</font><font color="#E5E5E5"> this is sort of</font>

107
00:04:52,860 --> 00:04:59,190
the first<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> test so this test is</font>

108
00:04:56,250 --> 00:05:01,949
<font color="#CCCCCC">very familiar with is or is</font><font color="#E5E5E5"> very much</font>

109
00:04:59,190 --> 00:05:04,199
similar<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the decoding test which is</font>

110
00:05:01,949 --> 00:05:06,599
just doing<font color="#E5E5E5"> the opposite so we</font><font color="#CCCCCC"> know that</font>

111
00:05:04,199 --> 00:05:09,539
decoding the empty string<font color="#CCCCCC"> uses the empty</font>

112
00:05:06,599 --> 00:05:12,270
string decoding<font color="#E5E5E5"> why</font><font color="#CCCCCC"> wo CheY CheY</font>

113
00:05:09,539 --> 00:05:14,669
yields ABC so we are starting<font color="#CCCCCC"> to</font><font color="#E5E5E5"> see</font>

114
00:05:12,270 --> 00:05:16,770
some<font color="#CCCCCC"> kind of symmetry here between these</font>

115
00:05:14,669 --> 00:05:19,080
<font color="#E5E5E5">two</font><font color="#CCCCCC"> functions</font><font color="#E5E5E5"> there is something to it</font>

116
00:05:16,770 --> 00:05:21,090
<font color="#CCCCCC">that these two tests</font><font color="#E5E5E5"> look very</font><font color="#CCCCCC"> very</font>

117
00:05:19,080 --> 00:05:24,300
<font color="#E5E5E5">similar to each other and this is what</font>

118
00:05:21,090 --> 00:05:25,710
we want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> look at instead what we</font>

119
00:05:24,300 --> 00:05:28,259
do here is<font color="#E5E5E5"> that we want</font><font color="#CCCCCC"> to define</font><font color="#E5E5E5"> a</font>

120
00:05:25,710 --> 00:05:30,840
property which<font color="#E5E5E5"> tests</font><font color="#CCCCCC"> basically the same</font>

121
00:05:28,259 --> 00:05:34,080
thing but<font color="#CCCCCC"> with random data</font><font color="#E5E5E5"> so what we</font>

122
00:05:30,840 --> 00:05:37,500
say here is that we<font color="#CCCCCC"> have a data field</font>

123
00:05:34,080 --> 00:05:40,169
here which is a binary<font color="#E5E5E5"> the binary here</font>

124
00:05:37,500 --> 00:05:42,360
is a generator so this will<font color="#E5E5E5"> generate</font>

125
00:05:40,169 --> 00:05:45,690
random<font color="#E5E5E5"> data and the data variable will</font>

126
00:05:42,360 --> 00:05:47,940
then contain this random data we<font color="#E5E5E5"> then</font>

127
00:05:45,690 --> 00:05:51,780
say that<font color="#E5E5E5"> encoded data is equal to encode</font>

128
00:05:47,940 --> 00:05:54,900
data and<font color="#CCCCCC"> data should</font><font color="#E5E5E5"> be equal to decode</font>

129
00:05:51,780 --> 00:05:57,508
encoded data so this like the last line

130
00:05:54,900 --> 00:05:59,960
here is some<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> assertion and this</font>

131
00:05:57,509 --> 00:06:03,030
<font color="#E5E5E5">function will return true</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> false</font><font color="#CCCCCC"> and</font>

132
00:05:59,960 --> 00:06:04,469
<font color="#CCCCCC">it should return true for all inputs</font>

133
00:06:03,030 --> 00:06:11,070
that's basically what we say here<font color="#E5E5E5"> with</font>

134
00:06:04,470 --> 00:06:13,440
you for all macro this is this is a good

135
00:06:11,070 --> 00:06:16,320
property<font color="#E5E5E5"> test like this is a start for a</font>

136
00:06:13,440 --> 00:06:19,199
typical encode<font color="#CCCCCC"> decode example but it has</font>

137
00:06:16,320 --> 00:06:22,289
some problems<font color="#CCCCCC"> it shouldn't stand</font><font color="#E5E5E5"> alone</font>

138
00:06:19,199 --> 00:06:23,820
in this way if we<font color="#E5E5E5"> replace the encoder</font>

139
00:06:22,289 --> 00:06:26,400
<font color="#E5E5E5">and the decoder with the identity</font>

140
00:06:23,820 --> 00:06:28,860
function<font color="#E5E5E5"> we will see that this property</font>

141
00:06:26,400 --> 00:06:31,609
<font color="#CCCCCC">will still hold for for all inputs</font><font color="#E5E5E5"> and</font>

142
00:06:28,860 --> 00:06:34,469
thus it says absolutely<font color="#E5E5E5"> nothing about</font>

143
00:06:31,610 --> 00:06:36,240
<font color="#E5E5E5">base64 per se but more about the encoder</font>

144
00:06:34,469 --> 00:06:38,070
<font color="#E5E5E5">and the decoder operty that we're</font>

145
00:06:36,240 --> 00:06:40,080
testing<font color="#E5E5E5"> so this should of course go</font>

146
00:06:38,070 --> 00:06:43,770
<font color="#CCCCCC">together with some unit tests</font>

147
00:06:40,080 --> 00:06:47,539
<font color="#CCCCCC">to sort of lock down your API</font><font color="#E5E5E5"> until you</font>

148
00:06:43,770 --> 00:06:47,539
feel comfortable<font color="#E5E5E5"> with it being correct</font>

149
00:06:48,050 --> 00:06:58,169
so and property we<font color="#CCCCCC"> can test for in</font>

150
00:06:50,759 --> 00:07:01,889
<font color="#E5E5E5">base64</font><font color="#CCCCCC"> is when we we can calculate</font><font color="#E5E5E5"> the</font>

151
00:06:58,169 --> 00:07:04,139
output<font color="#E5E5E5"> length of things we encode and</font>

152
00:07:01,889 --> 00:07:08,099
that is a<font color="#E5E5E5"> property we can also include</font>

153
00:07:04,139 --> 00:07:12,419
<font color="#E5E5E5">we know that we know that</font><font color="#CCCCCC"> base 64 output</font>

154
00:07:08,099 --> 00:07:14,009
<font color="#E5E5E5">is equal</font><font color="#CCCCCC"> sign padded at the end so we</font>

155
00:07:12,419 --> 00:07:16,590
could extend our property to<font color="#E5E5E5"> lock it</font>

156
00:07:14,009 --> 00:07:19,560
further down<font color="#E5E5E5"> by saying that the</font><font color="#CCCCCC"> byte</font>

157
00:07:16,590 --> 00:07:23,190
size<font color="#E5E5E5"> of the encoded data should be this</font>

158
00:07:19,560 --> 00:07:25,319
<font color="#E5E5E5">formula based on the data input that we</font>

159
00:07:23,190 --> 00:07:27,060
gave to<font color="#E5E5E5"> the function and</font><font color="#CCCCCC"> now we have two</font>

160
00:07:25,319 --> 00:07:29,969
property tests that starts saying

161
00:07:27,060 --> 00:07:31,469
something about<font color="#E5E5E5"> base64 rather than just</font>

162
00:07:29,969 --> 00:07:35,669
saying<font color="#E5E5E5"> something about the encode and</font>

163
00:07:31,469 --> 00:07:40,550
decode property of the code this<font color="#E5E5E5"> is not</font>

164
00:07:35,669 --> 00:07:43,560
fully enough<font color="#E5E5E5"> we additionally wants to</font>

165
00:07:40,550 --> 00:07:47,550
test our is valid function<font color="#E5E5E5"> so this is</font>

166
00:07:43,560 --> 00:07:49,680
sort of a definition<font color="#CCCCCC"> of our validator so</font>

167
00:07:47,550 --> 00:07:52,650
we say we have a base64 alphabet here

168
00:07:49,680 --> 00:07:56,940
which is<font color="#CCCCCC"> 0 to 9 a to</font><font color="#E5E5E5"> C and capital A to</font>

169
00:07:52,650 --> 00:07:58,948
C + + + / we then include some<font color="#E5E5E5"> Erlang</font>

170
00:07:56,940 --> 00:08:00,569
code to actually<font color="#CCCCCC"> validate</font><font color="#E5E5E5"> it it's a</font>

171
00:07:58,949 --> 00:08:03,240
pretty<font color="#E5E5E5"> simple thing</font><font color="#CCCCCC"> it just checks that</font>

172
00:08:00,569 --> 00:08:06,569
all characters that are in<font color="#CCCCCC"> our input is</font>

173
00:08:03,240 --> 00:08:10,650
a member of<font color="#E5E5E5"> this larger set of</font><font color="#CCCCCC"> which is</font>

174
00:08:06,569 --> 00:08:13,650
our alphabet this<font color="#E5E5E5"> will further down lock</font>

175
00:08:10,650 --> 00:08:16,049
down<font color="#E5E5E5"> our</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> and our</font><font color="#CCCCCC"> attest this</font><font color="#E5E5E5"> and</font>

176
00:08:13,650 --> 00:08:19,258
give<font color="#E5E5E5"> us some some better</font><font color="#CCCCCC"> results</font><font color="#E5E5E5"> but it</font>

177
00:08:16,050 --> 00:08:21,449
has some problems<font color="#CCCCCC"> now we this property</font>

178
00:08:19,259 --> 00:08:24,210
test is simpler it's very<font color="#E5E5E5"> similar</font><font color="#CCCCCC"> to the</font>

179
00:08:21,449 --> 00:08:28,199
first<font color="#CCCCCC"> one</font><font color="#E5E5E5"> we had the only difference is</font>

180
00:08:24,210 --> 00:08:31,020
<font color="#CCCCCC">that we just check that our encode</font>

181
00:08:28,199 --> 00:08:32,669
function should always<font color="#E5E5E5"> yield valid data</font>

182
00:08:31,020 --> 00:08:36,689
<font color="#E5E5E5">it doesn't</font><font color="#CCCCCC"> make sense</font><font color="#E5E5E5"> to have an encoder</font>

183
00:08:32,669 --> 00:08:39,299
and a decoder<font color="#CCCCCC"> where we generate data we</font>

184
00:08:36,690 --> 00:08:40,709
won't be<font color="#E5E5E5"> able to accept</font><font color="#CCCCCC"> ourselves so</font>

185
00:08:39,299 --> 00:08:42,689
this property test is much<font color="#E5E5E5"> simpler</font>

186
00:08:40,708 --> 00:08:44,399
because<font color="#E5E5E5"> our function</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> basically a</font>

187
00:08:42,690 --> 00:08:46,140
boolean function that<font color="#E5E5E5"> just returns true</font>

188
00:08:44,399 --> 00:08:49,520
false so we<font color="#E5E5E5"> can use that as our actually</font>

189
00:08:46,140 --> 00:08:51,870
test vector or as a test not just vector

190
00:08:49,520 --> 00:08:53,460
<font color="#E5E5E5">this have a problem though with</font><font color="#CCCCCC"> what we</font>

191
00:08:51,870 --> 00:08:56,480
did so<font color="#CCCCCC"> the way when we</font>

192
00:08:53,460 --> 00:08:59,370
actually run the quick check<font color="#E5E5E5"> model here</font>

193
00:08:56,480 --> 00:09:01,500
<font color="#CCCCCC">so proper is the name</font><font color="#E5E5E5"> of the system we</font>

194
00:08:59,370 --> 00:09:04,740
use<font color="#CCCCCC"> to check it when we call a quick</font>

195
00:09:01,500 --> 00:09:07,710
check on the<font color="#E5E5E5"> b64 module on the encoding</font>

196
00:09:04,740 --> 00:09:10,020
alphabet<font color="#CCCCCC"> property says we will</font><font color="#E5E5E5"> see that</font>

197
00:09:07,710 --> 00:09:11,400
it failed it failed with<font color="#CCCCCC"> the input 4 so</font>

198
00:09:10,020 --> 00:09:14,850
there is some binary<font color="#E5E5E5"> here just</font>

199
00:09:11,400 --> 00:09:16,620
containing the<font color="#E5E5E5"> 4 byte which doesn't hold</font>

200
00:09:14,850 --> 00:09:19,410
<font color="#E5E5E5">this property</font><font color="#CCCCCC"> we can now see the</font>

201
00:09:16,620 --> 00:09:21,900
<font color="#E5E5E5">shrinking in action it used a shrinking</font>

202
00:09:19,410 --> 00:09:23,699
strategy one time<font color="#E5E5E5"> that ended up being</font>

203
00:09:21,900 --> 00:09:27,329
able to show us an error case which is

204
00:09:23,700 --> 00:09:31,200
just the<font color="#CCCCCC"> zero byte so a one byte string</font>

205
00:09:27,330 --> 00:09:32,940
containing<font color="#CCCCCC"> zero this</font><font color="#E5E5E5"> is of course</font>

206
00:09:31,200 --> 00:09:36,000
<font color="#E5E5E5">because we had forgot the</font><font color="#CCCCCC"> equal sign in</font>

207
00:09:32,940 --> 00:09:39,210
in the<font color="#E5E5E5"> base64 system so because of the</font>

208
00:09:36,000 --> 00:09:41,070
<font color="#CCCCCC">ads padding to the</font><font color="#E5E5E5"> string this was an</font>

209
00:09:39,210 --> 00:09:42,870
error case that we<font color="#E5E5E5"> need to handle this</font>

210
00:09:41,070 --> 00:09:44,670
is not fully correct<font color="#E5E5E5"> because of course</font>

211
00:09:42,870 --> 00:09:46,350
the equal sign should only be at the end

212
00:09:44,670 --> 00:09:49,650
when we padded this could we<font color="#E5E5E5"> could</font>

213
00:09:46,350 --> 00:09:53,220
extend the the the property<font color="#E5E5E5"> test just</font>

214
00:09:49,650 --> 00:09:55,140
for that so<font color="#E5E5E5"> now when</font><font color="#CCCCCC"> we ran it</font><font color="#E5E5E5"> we will</font>

215
00:09:53,220 --> 00:09:57,930
actually have<font color="#E5E5E5"> it will generate a hundred</font>

216
00:09:55,140 --> 00:09:59,580
<font color="#E5E5E5">different tests feed it through and we</font>

217
00:09:57,930 --> 00:10:03,300
can<font color="#E5E5E5"> see that</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> actually work very</font>

218
00:09:59,580 --> 00:10:07,770
<font color="#CCCCCC">well and it at least holds the</font>

219
00:10:03,300 --> 00:10:11,069
properties that<font color="#E5E5E5"> we have here the way it</font>

220
00:10:07,770 --> 00:10:14,970
works is usually when<font color="#E5E5E5"> your you can see</font>

221
00:10:11,070 --> 00:10:17,310
this yes<font color="#CCCCCC"> proper works where you can</font><font color="#E5E5E5"> run</font>

222
00:10:14,970 --> 00:10:20,010
it both on entire modules<font color="#CCCCCC"> where in this</font>

223
00:10:17,310 --> 00:10:23,250
<font color="#E5E5E5">case</font><font color="#CCCCCC"> we just</font><font color="#E5E5E5"> say we have the</font><font color="#CCCCCC"> b60 format</font>

224
00:10:20,010 --> 00:10:25,530
<font color="#CCCCCC">you'll run all the tests we can pass it</font>

225
00:10:23,250 --> 00:10:27,210
how<font color="#CCCCCC"> many tests it should generate</font><font color="#E5E5E5"> so</font>

226
00:10:25,530 --> 00:10:30,990
here generates a thousand tests and<font color="#CCCCCC"> runs</font>

227
00:10:27,210 --> 00:10:32,850
<font color="#E5E5E5">through and you can also have it run</font>

228
00:10:30,990 --> 00:10:36,410
where you<font color="#E5E5E5"> just say run for 12 hours</font>

229
00:10:32,850 --> 00:10:36,410
overnight<font color="#CCCCCC"> and see if you find</font><font color="#E5E5E5"> anything</font>

230
00:10:37,580 --> 00:10:41,910
so these things<font color="#E5E5E5"> that I've left out for</font>

231
00:10:39,840 --> 00:10:45,240
<font color="#E5E5E5">this presentation that I think should be</font>

232
00:10:41,910 --> 00:10:47,000
added<font color="#E5E5E5"> is there was a lightning</font><font color="#CCCCCC"> talk the</font>

233
00:10:45,240 --> 00:10:53,370
<font color="#E5E5E5">other day about concurrency testing in</font>

234
00:10:47,000 --> 00:10:56,580
<font color="#E5E5E5">NC</font><font color="#CCCCCC"> proper has some similar</font><font color="#E5E5E5"> tooling that</font>

235
00:10:53,370 --> 00:10:59,130
<font color="#E5E5E5">can be applied to Erlang programs which</font>

236
00:10:56,580 --> 00:11:01,020
is very nice<font color="#CCCCCC"> it fiddles with the</font><font color="#E5E5E5"> Erlang</font>

237
00:10:59,130 --> 00:11:01,800
scheduler so at various yield points

238
00:11:01,020 --> 00:11:04,470
when you're<font color="#E5E5E5"> sending and receiving</font>

239
00:11:01,800 --> 00:11:08,560
messages<font color="#E5E5E5"> it will add</font><font color="#CCCCCC"> some randomness to</font>

240
00:11:04,470 --> 00:11:11,509
<font color="#E5E5E5">how it things are scheduled in and out</font>

241
00:11:08,560 --> 00:11:14,180
at my former at the former<font color="#CCCCCC"> company I</font>

242
00:11:11,509 --> 00:11:17,680
<font color="#CCCCCC">used I was with we used stateful testing</font>

243
00:11:14,180 --> 00:11:19,758
quite a lot<font color="#E5E5E5"> to test our database client</font>

244
00:11:17,680 --> 00:11:23,300
<font color="#CCCCCC">another thing you can do that is</font><font color="#E5E5E5"> pretty</font>

245
00:11:19,759 --> 00:11:24,559
nice in Erlang is<font color="#E5E5E5"> it's this library</font>

246
00:11:23,300 --> 00:11:27,498
called<font color="#E5E5E5"> Nephi where you can basically</font>

247
00:11:24,559 --> 00:11:29,600
include C code and then use<font color="#CCCCCC"> property</font>

248
00:11:27,499 --> 00:11:32,079
<font color="#E5E5E5">based testing to test your C code which</font>

249
00:11:29,600 --> 00:11:36,249
is I<font color="#CCCCCC"> think it's a</font><font color="#E5E5E5"> very nice way to</font>

250
00:11:32,079 --> 00:11:38,809
reason<font color="#E5E5E5"> about C code and and get some</font>

251
00:11:36,249 --> 00:11:39,879
feel a bit<font color="#CCCCCC"> more</font><font color="#E5E5E5"> comfortable with with</font>

252
00:11:38,809 --> 00:11:41,749
with the C code that you're writing

253
00:11:39,879 --> 00:11:46,970
<font color="#E5E5E5">because we have a higher abstraction</font>

254
00:11:41,749 --> 00:11:49,819
layer so for this is focused<font color="#CCCCCC"> on</font><font color="#E5E5E5"> Erlang</font>

255
00:11:46,970 --> 00:11:52,459
is usually the language I prefer<font color="#E5E5E5"> there's</font>

256
00:11:49,819 --> 00:11:54,079
also a<font color="#E5E5E5"> library called hypothesis for</font>

257
00:11:52,459 --> 00:11:57,969
<font color="#E5E5E5">Python which is pretty nice I've been</font>

258
00:11:54,079 --> 00:12:00,319
playing a bit<font color="#CCCCCC"> around with it it uses</font><font color="#E5E5E5"> I</font>

259
00:11:57,970 --> 00:12:03,439
can't remember the name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> decorators</font>

260
00:12:00,319 --> 00:12:05,839
for functions in<font color="#CCCCCC"> Indi classes and feels</font>

261
00:12:03,439 --> 00:12:07,189
very<font color="#CCCCCC"> comfortable</font><font color="#E5E5E5"> like it goes very well</font>

262
00:12:05,839 --> 00:12:09,259
<font color="#E5E5E5">together with the normal units</font><font color="#CCCCCC"> as</font>

263
00:12:07,189 --> 00:12:12,439
frameworks that are<font color="#E5E5E5"> available in in</font>

264
00:12:09,259 --> 00:12:14,300
Python for<font color="#CCCCCC"> Haskell there is quick check</font>

265
00:12:12,439 --> 00:12:16,099
and rust also has a quick check library

266
00:12:14,300 --> 00:12:21,949
<font color="#E5E5E5">I think</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> kennel also has one but I</font>

267
00:12:16,100 --> 00:12:22,879
cannot remember<font color="#E5E5E5"> its</font><font color="#CCCCCC"> name Oh Q Tech okay</font>

268
00:12:21,949 --> 00:12:25,099
cool

269
00:12:22,879 --> 00:12:26,860
<font color="#E5E5E5">I know Joe has</font><font color="#CCCCCC"> been playing</font><font color="#E5E5E5"> a bit around</font>

270
00:12:25,100 --> 00:12:29,240
<font color="#E5E5E5">with it</font>

271
00:12:26,860 --> 00:12:30,230
Erlang there's also a proprietary one

272
00:12:29,240 --> 00:12:33,439
but I'm<font color="#E5E5E5"> not really</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> mention</font>

273
00:12:30,230 --> 00:12:36,860
<font color="#E5E5E5">anything about it it costs it cost a</font>

274
00:12:33,439 --> 00:12:37,849
fortune<font color="#CCCCCC"> and licenses and</font><font color="#E5E5E5"> there's not we</font>

275
00:12:36,860 --> 00:12:39,800
can't use<font color="#CCCCCC"> it in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> open-source</font>

276
00:12:37,850 --> 00:12:42,319
<font color="#CCCCCC">community because of that</font><font color="#E5E5E5"> because no one</font>

277
00:12:39,800 --> 00:12:45,709
had kind of<font color="#E5E5E5"> 40 licenses though proper</font>

278
00:12:42,319 --> 00:12:47,870
seems a bit more sensible<font color="#CCCCCC"> to me that was</font>

279
00:12:45,709 --> 00:12:53,359
pretty much it it was a very short<font color="#E5E5E5"> talk</font>

280
00:12:47,870 --> 00:12:56,350
does anyone have any questions<font color="#CCCCCC"> no and</font>

281
00:12:53,360 --> 00:12:56,350
give a big hand to me

282
00:12:56,890 --> 00:13:00,049
[Applause]

283
00:13:00,119 --> 00:13:04,709
next talk will<font color="#CCCCCC"> be the network</font><font color="#E5E5E5"> team talk</font>

