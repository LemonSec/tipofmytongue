1
00:00:00,030 --> 00:00:06,330
all right great this will be a talk

2
00:00:03,179 --> 00:00:10,559
about penetration testing I gave this

3
00:00:06,330 --> 00:00:15,299
talk at Lisa Linux system administration

4
00:00:10,559 --> 00:00:17,310
conference last fall and I had a

5
00:00:15,299 --> 00:00:20,910
follow-up last week actually at a

6
00:00:17,310 --> 00:00:26,159
conference called OpenStack in Vancouver

7
00:00:20,910 --> 00:00:28,820
so I updated these slides recently to

8
00:00:26,160 --> 00:00:33,570
incorporate what I did it in Vancouver

9
00:00:28,820 --> 00:00:35,579
basically to tap network as it goes

10
00:00:33,570 --> 00:00:39,300
through the cloud so I'll talk a little

11
00:00:35,579 --> 00:00:43,320
bit about that as well so I'm I'm Dan

12
00:00:39,300 --> 00:00:49,379
Lambright work at Red Hat in Westford

13
00:00:43,320 --> 00:00:51,890
Mass and I also teach at UMass Lowell as

14
00:00:49,379 --> 00:00:53,849
an adjunct professor where I do

15
00:00:51,890 --> 00:01:00,059
intrusion detection actually I do

16
00:00:53,850 --> 00:01:03,570
storage at the Red Hat so in this talk

17
00:01:00,059 --> 00:01:06,080
we'll be discussing how to do

18
00:01:03,570 --> 00:01:10,320
penetration testing on the cloud and

19
00:01:06,080 --> 00:01:12,960
because the cloud is sometimes seen by

20
00:01:10,320 --> 00:01:17,908
people who are not in the cloud day to

21
00:01:12,960 --> 00:01:19,710
day as a hazy subject I'll just defined

22
00:01:17,909 --> 00:01:23,460
what I mean by that what I mean by that

23
00:01:19,710 --> 00:01:25,589
is it's self-service things so you can

24
00:01:23,460 --> 00:01:28,889
on demand you can yourself go and

25
00:01:25,590 --> 00:01:30,540
provision instances there those

26
00:01:28,890 --> 00:01:33,869
instances are probably shared their

27
00:01:30,540 --> 00:01:35,930
virtual or their containers access is

28
00:01:33,869 --> 00:01:38,850
metered so you're paying by the hour

29
00:01:35,930 --> 00:01:40,380
potentially or by the resource and it's

30
00:01:38,850 --> 00:01:45,479
elastic it can use it because it's

31
00:01:40,380 --> 00:01:47,179
virtual it can easily grow and shrink so

32
00:01:45,479 --> 00:01:50,310
that's what I mean when I say the cloud

33
00:01:47,180 --> 00:01:52,470
will be the cloud is kind of a big area

34
00:01:50,310 --> 00:01:54,689
as well so there's different points of

35
00:01:52,470 --> 00:01:57,929
view when you talk about the cloud

36
00:01:54,689 --> 00:02:03,710
there's the public cloud this is the one

37
00:01:57,930 --> 00:02:06,210
that Amazon Azur Google sell access to

38
00:02:03,710 --> 00:02:08,600
that's one type of cloud and we'll spend

39
00:02:06,210 --> 00:02:11,609
part of the lecture discussing it

40
00:02:08,600 --> 00:02:16,070
there's the private cloud that's that's

41
00:02:11,610 --> 00:02:18,150
when you are the owner of a

42
00:02:16,070 --> 00:02:21,750
infrastructure like perhaps you own

43
00:02:18,150 --> 00:02:23,400
OpenStack servers and you manage them so

44
00:02:21,750 --> 00:02:25,440
you might want to do penetration testing

45
00:02:23,400 --> 00:02:30,660
in that environment and then a third is

46
00:02:25,440 --> 00:02:32,070
when you're a tenant in a private cloud

47
00:02:30,660 --> 00:02:34,170
where you've been given some special

48
00:02:32,070 --> 00:02:36,120
permission to do penetration testing so

49
00:02:34,170 --> 00:02:40,049
maybe above and beyond what the public

50
00:02:36,120 --> 00:02:41,760
positive so what is a penetration

51
00:02:40,050 --> 00:02:43,080
testing so this is as this is the

52
00:02:41,760 --> 00:02:45,000
security conference I'm sure you guys

53
00:02:43,080 --> 00:02:47,700
know this so I'll go through it

54
00:02:45,000 --> 00:02:49,530
relatively quickly but what basically

55
00:02:47,700 --> 00:02:50,970
you're doing in penetration testing is

56
00:02:49,530 --> 00:02:54,000
you're mimicking real attacks you're

57
00:02:50,970 --> 00:02:55,950
testing your security process and

58
00:02:54,000 --> 00:02:59,580
procedures and you're stressing your

59
00:02:55,950 --> 00:03:00,899
infrastructure looking for holes looking

60
00:02:59,580 --> 00:03:03,810
to see where it breaks and looking to

61
00:03:00,900 --> 00:03:06,720
see where your weak points are you

62
00:03:03,810 --> 00:03:08,370
should comet good practices are to have

63
00:03:06,720 --> 00:03:11,540
post mortems after you do penetration

64
00:03:08,370 --> 00:03:14,310
testing discuss you know what went wrong

65
00:03:11,540 --> 00:03:16,260
you shouldn't blame any one individual

66
00:03:14,310 --> 00:03:20,340
look at it as learning learning

67
00:03:16,260 --> 00:03:23,700
experience and you should also expect

68
00:03:20,340 --> 00:03:25,650
problems there's a there's a concept

69
00:03:23,700 --> 00:03:28,350
that you can that you'll never get to

70
00:03:25,650 --> 00:03:30,480
100% security that's a point that's a

71
00:03:28,350 --> 00:03:31,130
school of thought I agree with that

72
00:03:30,480 --> 00:03:36,269
school of thought

73
00:03:31,130 --> 00:03:37,739
you'll never get a 100% secure but you

74
00:03:36,270 --> 00:03:40,290
might get any question is the number of

75
00:03:37,739 --> 00:03:45,720
nine so you're going to be 99.999

76
00:03:40,290 --> 00:03:52,980
something secure you are unit tests you

77
00:03:45,720 --> 00:03:53,489
can unit test your IPS or your firewall

78
00:03:52,980 --> 00:03:56,220
rules

79
00:03:53,489 --> 00:03:58,110
those are intrusion detection systems

80
00:03:56,220 --> 00:04:00,330
are made up of lots and lots and lots of

81
00:03:58,110 --> 00:04:04,500
typically are made up of lots of very

82
00:04:00,330 --> 00:04:07,860
very particular rules that are can

83
00:04:04,500 --> 00:04:10,470
become very complicated and same with

84
00:04:07,860 --> 00:04:14,100
firewalls so you can look for holes in

85
00:04:10,470 --> 00:04:16,978
them and those are just some examples of

86
00:04:14,100 --> 00:04:19,228
some rule-based systems that you might

87
00:04:16,978 --> 00:04:19,760
want to run penetration testing against

88
00:04:19,228 --> 00:04:24,650
too

89
00:04:19,760 --> 00:04:26,390
for problems so tools for penetration

90
00:04:24,650 --> 00:04:27,500
testing again the security conference

91
00:04:26,390 --> 00:04:31,729
I'm sure you're all familiar with these

92
00:04:27,500 --> 00:04:33,470
nmap is good reconnaissance tool ether

93
00:04:31,730 --> 00:04:35,630
cap is good for men in the middle

94
00:04:33,470 --> 00:04:37,820
attacks each ping three is a good

95
00:04:35,630 --> 00:04:40,280
general purpose by the way these are all

96
00:04:37,820 --> 00:04:42,820
mostly for the most part in a Linux

97
00:04:40,280 --> 00:04:42,820
world here

98
00:04:43,870 --> 00:04:51,580
TCP replay can take pcap files and

99
00:04:48,280 --> 00:04:54,409
replay them so if you have a good attack

100
00:04:51,580 --> 00:04:55,640
that somebody captured or you that you

101
00:04:54,410 --> 00:04:58,490
found off the internet because they're

102
00:04:55,640 --> 00:05:02,450
available you can replay them against

103
00:04:58,490 --> 00:05:03,920
your against your systems it will t see

104
00:05:02,450 --> 00:05:05,330
replay also can change all the IP

105
00:05:03,920 --> 00:05:10,160
addresses so it'll go against your

106
00:05:05,330 --> 00:05:11,960
machines not the original ones so I'll

107
00:05:10,160 --> 00:05:13,760
just go through these quickly because I

108
00:05:11,960 --> 00:05:16,760
know sure you know these all but these

109
00:05:13,760 --> 00:05:20,150
are representative attacks that are sort

110
00:05:16,760 --> 00:05:23,210
of the canonical ones they're good

111
00:05:20,150 --> 00:05:26,690
they're good because they're in the core

112
00:05:23,210 --> 00:05:30,950
IP protocol we're stuck with them ipv4

113
00:05:26,690 --> 00:05:34,160
was not invented with security in mind

114
00:05:30,950 --> 00:05:35,840
so they had these built into the

115
00:05:34,160 --> 00:05:38,930
protocols and we live with them to this

116
00:05:35,840 --> 00:05:40,760
day spoofing is just changing your

117
00:05:38,930 --> 00:05:45,040
source IP address so it looks like the

118
00:05:40,760 --> 00:05:47,840
IP packet came from somewhere else the

119
00:05:45,040 --> 00:05:50,900
Internet provider or the router and the

120
00:05:47,840 --> 00:05:54,080
internet may or may not block a spoofing

121
00:05:50,900 --> 00:05:56,150
attack it's their choice there's no rule

122
00:05:54,080 --> 00:05:57,830
that says they must man-in-the-middle

123
00:05:56,150 --> 00:05:59,359
attack is just when you capture a router

124
00:05:57,830 --> 00:06:00,680
and you see packets as they go through

125
00:05:59,360 --> 00:06:02,630
and of course authentication and

126
00:06:00,680 --> 00:06:04,610
encryption can prevent that but not

127
00:06:02,630 --> 00:06:07,400
everybody uses authentication and

128
00:06:04,610 --> 00:06:10,580
encryption denial service is simply

129
00:06:07,400 --> 00:06:12,739
where you go after some resource on the

130
00:06:10,580 --> 00:06:16,849
target and that could be any resource

131
00:06:12,740 --> 00:06:18,680
GPU memory set at the time cetera port

132
00:06:16,850 --> 00:06:22,070
scans are looking for open ports on the

133
00:06:18,680 --> 00:06:23,600
target all right so public cloud

134
00:06:22,070 --> 00:06:26,050
security let's get to the heart of the

135
00:06:23,600 --> 00:06:26,050
talk

136
00:06:26,060 --> 00:06:31,830
so public cloud well basically public

137
00:06:29,190 --> 00:06:33,690
clouds are a huge data centers in

138
00:06:31,830 --> 00:06:37,409
different regions different regions

139
00:06:33,690 --> 00:06:41,039
geographical reasons as they're so big

140
00:06:37,410 --> 00:06:47,849
they have some resiliency to denial of

141
00:06:41,039 --> 00:06:50,870
service attacks and let's say so you

142
00:06:47,849 --> 00:06:52,979
cannot spoof your IP address from within

143
00:06:50,870 --> 00:06:56,520
look from within the cloud because

144
00:06:52,979 --> 00:06:59,389
typically they have a firewall over your

145
00:06:56,520 --> 00:07:03,710
instances or your tenant which stop that

146
00:06:59,389 --> 00:07:06,960
your you have no access to physical

147
00:07:03,710 --> 00:07:10,530
wires so you can't sniff other tenants

148
00:07:06,960 --> 00:07:14,039
traffic but the key so there are some

149
00:07:10,530 --> 00:07:15,929
things that the public cloud gives you

150
00:07:14,039 --> 00:07:17,759
but the provider will not take

151
00:07:15,930 --> 00:07:18,780
responsibility for protecting urine

152
00:07:17,759 --> 00:07:21,210
stance that's still your responsibility

153
00:07:18,780 --> 00:07:23,698
that you have to so as a tenant

154
00:07:21,210 --> 00:07:25,530
administrator in a cloud you in for the

155
00:07:23,699 --> 00:07:33,060
instances that you administrate that's

156
00:07:25,530 --> 00:07:35,789
your job to protect the main thing you

157
00:07:33,060 --> 00:07:38,820
need to know for the public cloud is if

158
00:07:35,789 --> 00:07:43,050
you do a penetration test you cannot

159
00:07:38,820 --> 00:07:45,360
affect other instances or tenants so any

160
00:07:43,050 --> 00:07:47,550
penetration test any simulation of a

161
00:07:45,360 --> 00:07:51,979
real attack that was to affect someone

162
00:07:47,550 --> 00:07:54,180
else is for the most part not allowed

163
00:07:51,979 --> 00:07:57,270
though there are some exceptions which

164
00:07:54,180 --> 00:08:00,750
I'll bring up in a moment they could be

165
00:07:57,270 --> 00:08:03,169
expensive to do as well if you for

166
00:08:00,750 --> 00:08:06,210
example have spent the money to get a

167
00:08:03,169 --> 00:08:08,340
cordoned off part of Amazon's Cloud and

168
00:08:06,210 --> 00:08:09,840
you decided to do a denial of service

169
00:08:08,340 --> 00:08:10,979
attack so let's say you won't affect

170
00:08:09,840 --> 00:08:15,900
anybody else because you spent the extra

171
00:08:10,979 --> 00:08:17,219
money for that that might still cost you

172
00:08:15,900 --> 00:08:19,940
a lot because you're generating a lot of

173
00:08:17,219 --> 00:08:22,110
network traffic potentially or CPU

174
00:08:19,940 --> 00:08:26,219
you're not going to be able to install a

175
00:08:22,110 --> 00:08:27,509
hardware appliance in in the cloud

176
00:08:26,219 --> 00:08:30,719
obviously and you don't have any

177
00:08:27,509 --> 00:08:33,240
low-level access or something like grub

178
00:08:30,719 --> 00:08:36,039
that doesn't it's not going to be

179
00:08:33,240 --> 00:08:38,289
available to IP addresses are

180
00:08:36,039 --> 00:08:41,198
a femoral and some other items in the

181
00:08:38,289 --> 00:08:42,848
collateral so ephemeral so that means if

182
00:08:41,198 --> 00:08:45,250
you stop the cloud start the gun you

183
00:08:42,849 --> 00:08:48,220
might end up with some changes that you

184
00:08:45,250 --> 00:08:50,860
have to revisit your firewall or IPS

185
00:08:48,220 --> 00:08:54,899
rules to change traditional

186
00:08:50,860 --> 00:08:57,910
considerations it is possible to go and

187
00:08:54,899 --> 00:09:01,509
go and get permission from cloud

188
00:08:57,910 --> 00:09:04,689
providers for the most part to do

189
00:09:01,509 --> 00:09:06,730
penetration tests they will give it to

190
00:09:04,690 --> 00:09:09,009
you if and they have different policies

191
00:09:06,730 --> 00:09:12,910
so depending on the provider they will

192
00:09:09,009 --> 00:09:14,769
have different rules Amazon for example

193
00:09:12,910 --> 00:09:19,360
we'll get back to you relatively quickly

194
00:09:14,769 --> 00:09:22,389
and they will depending on your level of

195
00:09:19,360 --> 00:09:23,860
service allow you to do certain things I

196
00:09:22,389 --> 00:09:26,649
don't think they let you do any denial

197
00:09:23,860 --> 00:09:27,970
of service attacks but they'll let you

198
00:09:26,649 --> 00:09:29,380
do other sorts of attacks you have to

199
00:09:27,970 --> 00:09:34,209
explain what you want to do and you have

200
00:09:29,380 --> 00:09:35,980
to say when you want to do it and some

201
00:09:34,209 --> 00:09:39,219
providers have developed a reputation

202
00:09:35,980 --> 00:09:41,560
for not responding to you quickly with

203
00:09:39,220 --> 00:09:42,940
penetration test it went with requests

204
00:09:41,560 --> 00:09:44,138
for penetration tests but they're

205
00:09:42,940 --> 00:09:47,589
getting better because they didn't see

206
00:09:44,139 --> 00:09:50,199
the importance of it there are

207
00:09:47,589 --> 00:09:51,850
commercial tools you can purchase to in

208
00:09:50,199 --> 00:09:54,670
the cloud some really interesting ones

209
00:09:51,850 --> 00:09:56,319
that I found are ones that will have

210
00:09:54,670 --> 00:09:57,729
already made the arrangement with the

211
00:09:56,319 --> 00:09:59,949
cloud providers so they'll just you just

212
00:09:57,730 --> 00:10:03,490
spend a little money and though they'll

213
00:09:59,949 --> 00:10:04,899
do the penetration test for you another

214
00:10:03,490 --> 00:10:07,000
one that's kind of interesting we said

215
00:10:04,899 --> 00:10:08,800
earlier there the cloud is elastic well

216
00:10:07,000 --> 00:10:11,350
it's very easy to add resources and what

217
00:10:08,800 --> 00:10:14,019
this Rolex sick I believe the name is

218
00:10:11,350 --> 00:10:15,880
they will if you have a denial of

219
00:10:14,019 --> 00:10:17,980
service attack they will automate on

220
00:10:15,880 --> 00:10:19,750
demand at the time of the attack

221
00:10:17,980 --> 00:10:26,470
give you more resources so you can

222
00:10:19,750 --> 00:10:31,089
swallow up all those DLS packets but and

223
00:10:26,470 --> 00:10:32,800
these these are costly options so that's

224
00:10:31,089 --> 00:10:35,410
that's pretty much the story with the

225
00:10:32,800 --> 00:10:37,540
public cloud so let's dig a little

226
00:10:35,410 --> 00:10:42,610
deeper and let's say you're an

227
00:10:37,540 --> 00:10:45,639
administrator of a private club so let's

228
00:10:42,610 --> 00:10:46,720
say you are you have OpenStack or cloud

229
00:10:45,639 --> 00:10:49,300
stack or

230
00:10:46,720 --> 00:10:51,670
you know one of those in your data

231
00:10:49,300 --> 00:10:54,790
center and you're setting it up and you

232
00:10:51,670 --> 00:10:56,680
want to do you want your tenants maybe

233
00:10:54,790 --> 00:11:00,490
to do a penetration testing or you want

234
00:10:56,680 --> 00:11:02,079
to do it yourself well here the

235
00:11:00,490 --> 00:11:03,639
situation is much different because you

236
00:11:02,079 --> 00:11:09,758
have access to all the guts and

237
00:11:03,639 --> 00:11:11,470
internals of the network but you still

238
00:11:09,759 --> 00:11:13,180
some considerations you don't want to

239
00:11:11,470 --> 00:11:15,009
affect other instances if you're doing

240
00:11:13,180 --> 00:11:16,180
penetration testing on one tenant you

241
00:11:15,009 --> 00:11:20,160
don't want to affect other tenants

242
00:11:16,180 --> 00:11:23,258
probably you will probably want to have

243
00:11:20,160 --> 00:11:27,819
the ability to observe instance traffic

244
00:11:23,259 --> 00:11:29,410
and that's been a key problem because

245
00:11:27,819 --> 00:11:34,750
how do you actually accomplish that is

246
00:11:29,410 --> 00:11:37,660
tricky and you might want to run IDs

247
00:11:34,750 --> 00:11:43,620
against instance or a tenant or maybe

248
00:11:37,660 --> 00:11:46,629
the entire cloud itself that is possible

249
00:11:43,620 --> 00:11:52,860
this is sometimes called IDs as a

250
00:11:46,629 --> 00:12:00,069
service I have not seen an open source

251
00:11:52,860 --> 00:12:04,240
an input it's coming soon we have the

252
00:12:00,069 --> 00:12:06,250
pieces in place to make it happen so

253
00:12:04,240 --> 00:12:10,149
here's what OpenStack looks like

254
00:12:06,250 --> 00:12:15,059
internally the green circles are

255
00:12:10,149 --> 00:12:17,439
instances the squares beneath them are

256
00:12:15,059 --> 00:12:21,279
firewalls notice there's a firewall for

257
00:12:17,439 --> 00:12:26,319
each instance those are actually Linux

258
00:12:21,279 --> 00:12:29,079
bridges they actually all these blue

259
00:12:26,319 --> 00:12:32,229
squares are bridges their software

260
00:12:29,079 --> 00:12:38,290
bridges and these lines are pipes

261
00:12:32,230 --> 00:12:40,149
between the bridges this one called BR -

262
00:12:38,290 --> 00:12:44,139
ant is it called the integration bridge

263
00:12:40,149 --> 00:12:46,089
and that's used that often uses

264
00:12:44,139 --> 00:12:49,480
something called OVS which which is a

265
00:12:46,089 --> 00:12:51,100
real cool technology so as you can see

266
00:12:49,480 --> 00:12:52,689
it I guess the takeaway here for a

267
00:12:51,100 --> 00:12:55,990
security audience would be that there is

268
00:12:52,689 --> 00:12:59,790
a firewall for each instance and that's

269
00:12:55,990 --> 00:13:01,920
not controlled by the insta

270
00:12:59,790 --> 00:13:04,319
owner or even the tenant owner although

271
00:13:01,920 --> 00:13:06,420
they can create security groups which

272
00:13:04,320 --> 00:13:08,790
are applied to that firewall they don't

273
00:13:06,420 --> 00:13:12,630
actually have kentucky l-- that linux

274
00:13:08,790 --> 00:13:14,480
bridge itself so ultimately the firewall

275
00:13:12,630 --> 00:13:20,820
for the instance is controlled by the

276
00:13:14,480 --> 00:13:27,500
provider not the tenant administrator so

277
00:13:20,820 --> 00:13:31,020
how would you go about sniffing a club

278
00:13:27,500 --> 00:13:37,260
here now well since it's our cloud we we

279
00:13:31,020 --> 00:13:39,540
have the ability to make modifications

280
00:13:37,260 --> 00:13:43,710
to the infrastructure it's something we

281
00:13:39,540 --> 00:13:47,490
can't do in amazon so what you want to

282
00:13:43,710 --> 00:13:48,780
do and for any services that amazon

283
00:13:47,490 --> 00:13:51,270
provides they would be doing something

284
00:13:48,780 --> 00:13:53,339
under the hood similar to this is create

285
00:13:51,270 --> 00:13:57,900
what's called it a tap and a tap is a

286
00:13:53,340 --> 00:14:00,780
sniffer a tap sniffs packets a good

287
00:13:57,900 --> 00:14:03,600
place to sniff for at the tenant level

288
00:14:00,780 --> 00:14:06,600
probably would be at the integration

289
00:14:03,600 --> 00:14:08,460
bridge you could also put a tap at the

290
00:14:06,600 --> 00:14:10,740
firewall but then you'd be sniffing just

291
00:14:08,460 --> 00:14:12,510
that instance which is might be an

292
00:14:10,740 --> 00:14:14,070
acceptable use case for you but if you

293
00:14:12,510 --> 00:14:16,680
do it at the integration bridge you can

294
00:14:14,070 --> 00:14:19,560
see all the traffic and if you look at

295
00:14:16,680 --> 00:14:23,130
the VLAN tag so each ten it has its own

296
00:14:19,560 --> 00:14:25,770
tag VLAN tag which will tell you what

297
00:14:23,130 --> 00:14:29,100
tenant it belongs to then you can look

298
00:14:25,770 --> 00:14:32,910
to see all the packets for that for that

299
00:14:29,100 --> 00:14:35,040
tenant so here in a high-level I've done

300
00:14:32,910 --> 00:14:36,689
a tap to the integration bridge and

301
00:14:35,040 --> 00:14:40,740
connected it to an intrusion detection

302
00:14:36,690 --> 00:14:43,410
system in practice here's how you can

303
00:14:40,740 --> 00:14:47,550
accomplish that now I'm gonna show you a

304
00:14:43,410 --> 00:14:49,439
hack but I'll tell you the right way to

305
00:14:47,550 --> 00:14:52,380
do that is probably something that's

306
00:14:49,440 --> 00:14:54,540
called tap as a service which for

307
00:14:52,380 --> 00:14:58,410
OpenStack which is something that just

308
00:14:54,540 --> 00:15:00,060
recently appeared from I think

309
00:14:58,410 --> 00:15:04,319
Erickson's designing it but some other

310
00:15:00,060 --> 00:15:06,449
people are very interested in this I'm

311
00:15:04,320 --> 00:15:07,740
going to show you a way to do it

312
00:15:06,450 --> 00:15:08,910
actually I'll just fly through this

313
00:15:07,740 --> 00:15:12,120
because actually I'm not

314
00:15:08,910 --> 00:15:14,040
at this level of details might be a

315
00:15:12,120 --> 00:15:18,960
little high too too much in the weeds

316
00:15:14,040 --> 00:15:24,030
but basically I'm going to the instance

317
00:15:18,960 --> 00:15:27,720
I'm attaching another interface to it

318
00:15:24,030 --> 00:15:30,150
that creates a firewall and that creates

319
00:15:27,720 --> 00:15:31,500
two interfaces one to connected the

320
00:15:30,150 --> 00:15:36,930
instance and one connected to the

321
00:15:31,500 --> 00:15:38,550
integration bridge then and what what

322
00:15:36,930 --> 00:15:42,510
the problem with that is it creates a

323
00:15:38,550 --> 00:15:45,510
firewall which I don't want so what I

324
00:15:42,510 --> 00:15:45,870
can do let me go back see if I can here

325
00:15:45,510 --> 00:15:48,630
we go

326
00:15:45,870 --> 00:15:52,430
so what I can do is I can destroy the

327
00:15:48,630 --> 00:15:55,890
firewall because I don't want it and

328
00:15:52,430 --> 00:15:57,180
attach the new interface which I just

329
00:15:55,890 --> 00:15:59,640
created a moment ago in a previous slide

330
00:15:57,180 --> 00:16:08,189
directly to the integration bridge using

331
00:15:59,640 --> 00:16:11,699
those commands now to do the tap I'm

332
00:16:08,190 --> 00:16:16,520
using OVS virtual switch that's that's

333
00:16:11,700 --> 00:16:19,170
the networking bridge technology which

334
00:16:16,520 --> 00:16:22,500
OpenStack uses and you can create a

335
00:16:19,170 --> 00:16:25,800
mirror using that long and ugly command

336
00:16:22,500 --> 00:16:29,490
typical Linux world you have long ugly

337
00:16:25,800 --> 00:16:32,189
commands I guess for for you folks it's

338
00:16:29,490 --> 00:16:36,470
probably not unnecessary to see this

339
00:16:32,190 --> 00:16:40,680
level of detail but here's how you do it

340
00:16:36,470 --> 00:16:42,120
all right so alright let's go back up to

341
00:16:40,680 --> 00:16:46,800
this go back up to the high level now

342
00:16:42,120 --> 00:16:50,580
and we can point out another factor our

343
00:16:46,800 --> 00:16:54,060
architectural level is your IDs what

344
00:16:50,580 --> 00:16:57,240
your sniffer could live on the same node

345
00:16:54,060 --> 00:16:59,760
but the problem is if you've spun up a

346
00:16:57,240 --> 00:17:02,340
virtual machine which is running a IDs

347
00:16:59,760 --> 00:17:06,780
instance then the virtual course which

348
00:17:02,340 --> 00:17:10,439
run that are come out of your budget so

349
00:17:06,780 --> 00:17:13,199
you're expending some of your virtual

350
00:17:10,439 --> 00:17:15,950
core budget to your burning some of that

351
00:17:13,199 --> 00:17:20,570
for your IDs and

352
00:17:15,950 --> 00:17:23,600
that can get takes that can take away

353
00:17:20,569 --> 00:17:28,569
from your normal instances and if you're

354
00:17:23,599 --> 00:17:34,280
Fanning in traffic to that IDs it can

355
00:17:28,569 --> 00:17:37,189
consume a lot of CPU and and remember

356
00:17:34,280 --> 00:17:39,050
when you when you when an IDs drops any

357
00:17:37,190 --> 00:17:42,200
packet that can be a false negative that

358
00:17:39,050 --> 00:17:44,540
can you might think the traffic is okay

359
00:17:42,200 --> 00:17:48,530
when it's really not how can you avoid

360
00:17:44,540 --> 00:17:51,080
that well you can grab a tunnel which

361
00:17:48,530 --> 00:17:52,580
goes to a monitor note and the

362
00:17:51,080 --> 00:17:53,689
characteristics of this node in the

363
00:17:52,580 --> 00:17:55,520
cloud can be different

364
00:17:53,690 --> 00:18:01,580
and that basically throw more hardware

365
00:17:55,520 --> 00:18:03,050
at the problem and I bunch of slides

366
00:18:01,580 --> 00:18:05,659
where I just described how to do this

367
00:18:03,050 --> 00:18:07,610
but that's way in the weeds just as a

368
00:18:05,660 --> 00:18:09,650
high level though in the cloud if you're

369
00:18:07,610 --> 00:18:13,240
going to do some pen testing that these

370
00:18:09,650 --> 00:18:16,220
are some options for you all right so

371
00:18:13,240 --> 00:18:18,380
that is if you are the administrator of

372
00:18:16,220 --> 00:18:20,090
their cloud let's say you're a tenant

373
00:18:18,380 --> 00:18:22,840
administrator I'm a tenant administrator

374
00:18:20,090 --> 00:18:25,159
and let's say that your cloud provider

375
00:18:22,840 --> 00:18:26,870
probably your private cloud provider but

376
00:18:25,160 --> 00:18:30,860
perhaps you have some arrangement with

377
00:18:26,870 --> 00:18:35,270
Amazon which is above and beyond what I

378
00:18:30,860 --> 00:18:37,520
believe they give you how would you go

379
00:18:35,270 --> 00:18:41,560
about penetration testing inside of an

380
00:18:37,520 --> 00:18:41,560
instance so this is the third use case

381
00:18:42,400 --> 00:18:49,580
so we if we're doing penetration testing

382
00:18:46,820 --> 00:18:53,899
a key thing is we don't want to affect

383
00:18:49,580 --> 00:19:00,590
other instances I don't want to put any

384
00:18:53,900 --> 00:19:02,510
of this hacker traffic on my network and

385
00:19:00,590 --> 00:19:03,889
then there's some penetration tests

386
00:19:02,510 --> 00:19:05,990
which you simply cannot do because

387
00:19:03,890 --> 00:19:07,280
remember you can't do spoofing from

388
00:19:05,990 --> 00:19:09,010
inside the instance so if I'm running

389
00:19:07,280 --> 00:19:13,730
inside of an instance how can I do

390
00:19:09,010 --> 00:19:16,250
penetration testing well what I've

391
00:19:13,730 --> 00:19:18,830
successfully done is spin up a container

392
00:19:16,250 --> 00:19:21,380
and do the penetration testing from the

393
00:19:18,830 --> 00:19:24,949
container now you can also run actually

394
00:19:21,380 --> 00:19:27,770
a virtual machine inside of a virtual

395
00:19:24,950 --> 00:19:28,460
machine but that's but containers are

396
00:19:27,770 --> 00:19:30,200
what

397
00:19:28,460 --> 00:19:32,420
about because they're so much easier to

398
00:19:30,200 --> 00:19:34,880
work with if you haven't worked with

399
00:19:32,420 --> 00:19:37,580
continuous before I strongly recommend

400
00:19:34,880 --> 00:19:39,590
it when you can create a container or a

401
00:19:37,580 --> 00:19:42,590
virtual machine you get your own IP

402
00:19:39,590 --> 00:19:44,629
address in fact you get your own subnet

403
00:19:42,590 --> 00:19:46,280
so you can create multiple containers

404
00:19:44,630 --> 00:19:49,310
and the walls speak to each other on the

405
00:19:46,280 --> 00:19:51,920
same subnet they have their own MTU

406
00:19:49,310 --> 00:19:55,570
which you can actually modify I think

407
00:19:51,920 --> 00:19:57,500
than send big packets if you want and

408
00:19:55,570 --> 00:20:01,250
now an interesting thing about

409
00:19:57,500 --> 00:20:03,650
containers is they give you a ceiling on

410
00:20:01,250 --> 00:20:05,630
how much resources a container can take

411
00:20:03,650 --> 00:20:07,280
they're actually on in the Linux world

412
00:20:05,630 --> 00:20:09,560
they're called a process group and you

413
00:20:07,280 --> 00:20:11,750
can say well you'll get only this much

414
00:20:09,560 --> 00:20:15,350
in that process group only this much

415
00:20:11,750 --> 00:20:18,740
horsepower memory etc but interestingly

416
00:20:15,350 --> 00:20:20,300
there's no floor on resources so there's

417
00:20:18,740 --> 00:20:22,580
no minimum amount of resources that

418
00:20:20,300 --> 00:20:28,280
they're guaranteed to get it's just

419
00:20:22,580 --> 00:20:30,260
something to be aware of and another if

420
00:20:28,280 --> 00:20:32,990
by going by taking this approach you're

421
00:20:30,260 --> 00:20:36,290
not going to test your external firewall

422
00:20:32,990 --> 00:20:41,600
you're only testing within the instance

423
00:20:36,290 --> 00:20:43,790
itself so if you're going to use

424
00:20:41,600 --> 00:20:46,250
containers and actually a lot of the

425
00:20:43,790 --> 00:20:50,540
supplies to nested virtualization as

426
00:20:46,250 --> 00:20:53,960
well what you're gonna get remember this

427
00:20:50,540 --> 00:20:56,540
picture this is our our virtual machine

428
00:20:53,960 --> 00:20:57,950
that's our instance this is the external

429
00:20:56,540 --> 00:20:59,240
firewall and that's the integration

430
00:20:57,950 --> 00:21:03,230
bridge that connects to the rest of the

431
00:20:59,240 --> 00:21:05,920
universe what you're going to do inside

432
00:21:03,230 --> 00:21:08,320
the instance is you're going to create a

433
00:21:05,920 --> 00:21:11,450
container up there that's the purple

434
00:21:08,320 --> 00:21:13,310
machine now I can run Kali

435
00:21:11,450 --> 00:21:15,080
that's a Linux distribution which does

436
00:21:13,310 --> 00:21:17,690
which is great for penetration testing

437
00:21:15,080 --> 00:21:20,270
it's pre-built Linux with all a lot of

438
00:21:17,690 --> 00:21:21,920
the tools and when you create the

439
00:21:20,270 --> 00:21:24,500
container you get actually a bridge

440
00:21:21,920 --> 00:21:28,570
another Linux bridge but it's a bridge

441
00:21:24,500 --> 00:21:28,570
inside of this instance

442
00:21:29,830 --> 00:21:36,918
so that that is that takes literally

443
00:21:33,590 --> 00:21:40,820
seconds to set up with very simple to

444
00:21:36,919 --> 00:21:43,669
create another nice thing now containers

445
00:21:40,820 --> 00:21:47,269
give you is well Kalle runs on Debian

446
00:21:43,669 --> 00:21:52,970
and I usually run on sent to us or rel

447
00:21:47,269 --> 00:21:58,070
and works fine you can import pcap files

448
00:21:52,970 --> 00:22:00,169
into your container now I would love to

449
00:21:58,070 --> 00:22:01,599
do a demo but I haven't set up for it so

450
00:22:00,169 --> 00:22:04,519
what I've got is a simulation here

451
00:22:01,599 --> 00:22:06,379
basically shows the same thing so I can

452
00:22:04,519 --> 00:22:11,809
I can easily run from inside that

453
00:22:06,379 --> 00:22:17,899
container and map against my instance

454
00:22:11,809 --> 00:22:21,049
and here I ran a snort

455
00:22:17,899 --> 00:22:24,109
I ran snort on my instance packet came

456
00:22:21,049 --> 00:22:29,679
in and you can see the Christmas scan

457
00:22:24,109 --> 00:22:32,629
was caught so nmap is pre-built in Kali

458
00:22:29,679 --> 00:22:35,720
I can so that was a reconnaissance

459
00:22:32,629 --> 00:22:37,070
attack which I did from the container I

460
00:22:35,720 --> 00:22:40,970
can do a spoofing attack from the

461
00:22:37,070 --> 00:22:42,678
container to I don't since I'm running

462
00:22:40,970 --> 00:22:44,179
inside the instance and I control the

463
00:22:42,679 --> 00:22:46,849
Linux bridge and I control the container

464
00:22:44,179 --> 00:22:50,629
there's nobody to stop me from doing a

465
00:22:46,849 --> 00:22:54,889
spoofing attack as there is from the

466
00:22:50,629 --> 00:22:57,619
external firewall so here I'm running HP

467
00:22:54,889 --> 00:23:01,369
that's a linux utility to simulate I

468
00:22:57,619 --> 00:23:04,070
think it runs on Windows to to say my

469
00:23:01,369 --> 00:23:10,129
source address is 22 222-2222

470
00:23:04,070 --> 00:23:13,039
I think yeah and I'm sending I don't

471
00:23:10,129 --> 00:23:16,129
forget what the - s does but you can see

472
00:23:13,039 --> 00:23:19,970
that the packet arrived and you can see

473
00:23:16,129 --> 00:23:22,099
the source address is 22 22 22 22 so I

474
00:23:19,970 --> 00:23:24,349
have X successfully executed the

475
00:23:22,099 --> 00:23:29,239
spoofing attack from the container and I

476
00:23:24,349 --> 00:23:30,499
can exercise my IPS rules that way man

477
00:23:29,239 --> 00:23:33,799
in the middle man in the middle is a

478
00:23:30,499 --> 00:23:37,249
little harder but still possible so a

479
00:23:33,799 --> 00:23:38,869
nice tool to do man in the middle

480
00:23:37,249 --> 00:23:41,669
attacks is called

481
00:23:38,869 --> 00:23:43,500
eater cap in the Linux world

482
00:23:41,669 --> 00:23:45,360
but you need to do you need to have the

483
00:23:43,500 --> 00:23:49,380
map you need to have three players now

484
00:23:45,360 --> 00:23:51,689
the target the attacker and the man in

485
00:23:49,380 --> 00:23:54,750
the middle person so you basically need

486
00:23:51,690 --> 00:23:58,230
two containers so I create a second

487
00:23:54,750 --> 00:24:00,900
container right here now what this is

488
00:23:58,230 --> 00:24:03,600
really kind of interesting because what

489
00:24:00,900 --> 00:24:09,480
ether cap does is it is it poisons the

490
00:24:03,600 --> 00:24:11,158
arc tables of the I guess the victim

491
00:24:09,480 --> 00:24:13,950
would be docker one in this case so the

492
00:24:11,159 --> 00:24:18,960
victims are tables are made to think

493
00:24:13,950 --> 00:24:22,590
that this instances IP addresses are

494
00:24:18,960 --> 00:24:26,730
real the arc the arc address for this

495
00:24:22,590 --> 00:24:28,320
guy is is this guy so therefore he's

496
00:24:26,730 --> 00:24:31,530
this is one way to do man-in-the-middle

497
00:24:28,320 --> 00:24:33,270
attacks is by are poisoning by changing

498
00:24:31,530 --> 00:24:36,960
the arc tables to mix up the IP

499
00:24:33,270 --> 00:24:40,408
addresses with the arc addresses so i do

500
00:24:36,960 --> 00:24:43,590
that with eater cap and in so doing

501
00:24:40,409 --> 00:24:46,200
packets intended for the green host

502
00:24:43,590 --> 00:24:48,000
instance actually end up first to hem

503
00:24:46,200 --> 00:24:51,260
and then they're forwarded to the open

504
00:24:48,000 --> 00:24:56,340
with destination when they arrive at

505
00:24:51,260 --> 00:24:58,770
docker to they can be changed they can

506
00:24:56,340 --> 00:25:02,340
be expected or modified so you can

507
00:24:58,770 --> 00:25:03,720
execute the man in the middle attack if

508
00:25:02,340 --> 00:25:06,720
you haven't seen either cap it's a great

509
00:25:03,720 --> 00:25:10,380
way to do penetration testing for

510
00:25:06,720 --> 00:25:13,909
man-in-the-middle attacks denial of

511
00:25:10,380 --> 00:25:17,730
service for denial of service attacks

512
00:25:13,909 --> 00:25:20,659
well that's an interesting subject

513
00:25:17,730 --> 00:25:23,429
because this is a resource attack and

514
00:25:20,659 --> 00:25:25,440
i've said a moment ago that there's a

515
00:25:23,429 --> 00:25:30,390
cap on the amount of resources docker

516
00:25:25,440 --> 00:25:32,130
has so you really can't do a true denial

517
00:25:30,390 --> 00:25:34,020
of service attack and in fact denial of

518
00:25:32,130 --> 00:25:35,460
service attacks inside the cloud are an

519
00:25:34,020 --> 00:25:40,740
interesting subject by themselves

520
00:25:35,460 --> 00:25:42,690
because how much how much spaced how

521
00:25:40,740 --> 00:25:44,669
many resources do you have in the cloud

522
00:25:42,690 --> 00:25:46,409
and can you affect other tenants and so

523
00:25:44,669 --> 00:25:49,830
on and so forth oh it's a interesting

524
00:25:46,409 --> 00:25:51,179
subject what I think so I'm not sure I

525
00:25:49,830 --> 00:25:52,460
don't think I can make a claim that you

526
00:25:51,179 --> 00:25:59,990
can actually execute a true

527
00:25:52,460 --> 00:26:02,300
service attack but you can you can you

528
00:25:59,990 --> 00:26:04,190
can simulate one and test your rules

529
00:26:02,300 --> 00:26:07,510
which is a very still a very useful

530
00:26:04,190 --> 00:26:12,070
thing so I'm using H pink 3 for that and

531
00:26:07,510 --> 00:26:14,930
I you know here I've executed a few

532
00:26:12,070 --> 00:26:16,790
different types of denial of service

533
00:26:14,930 --> 00:26:22,280
attacks and I've exercised my rules

534
00:26:16,790 --> 00:26:24,170
still very useful all right well you

535
00:26:22,280 --> 00:26:26,840
know this is just an example to show

536
00:26:24,170 --> 00:26:28,340
that you can do any attacks so here's a

537
00:26:26,840 --> 00:26:29,899
more recent one I'm doing the shell

538
00:26:28,340 --> 00:26:32,330
shock attack I don't know if you know

539
00:26:29,900 --> 00:26:41,180
shell shock but there's a there's a bug

540
00:26:32,330 --> 00:26:51,889
in the bash shell which has a hole

541
00:26:41,180 --> 00:26:54,170
basically so let's see here alright so

542
00:26:51,890 --> 00:26:55,670
in summary because that's that's

543
00:26:54,170 --> 00:26:58,930
basically brings an end to my talk and

544
00:26:55,670 --> 00:26:58,930
then I take questions if you have any

545
00:26:59,320 --> 00:27:04,850
you'd need to coordinate with your cloud

546
00:27:02,000 --> 00:27:06,890
service provider because in penetration

547
00:27:04,850 --> 00:27:11,149
testing ZAR a sensitive subject you're

548
00:27:06,890 --> 00:27:13,610
you're simulating a hacker but cloud

549
00:27:11,150 --> 00:27:16,790
providers do give you some level of

550
00:27:13,610 --> 00:27:19,909
access actually everything up to denial

551
00:27:16,790 --> 00:27:22,510
of service attacks and typically I think

552
00:27:19,910 --> 00:27:25,130
you can get it permission to do

553
00:27:22,510 --> 00:27:29,060
OpenStack is work in progress they do

554
00:27:25,130 --> 00:27:32,090
not have IDs as a service yet but it is

555
00:27:29,060 --> 00:27:37,190
possible if you're technically up to it

556
00:27:32,090 --> 00:27:41,480
willing to set up sniffers to sniff

557
00:27:37,190 --> 00:27:44,720
packets and for unit testing your rules

558
00:27:41,480 --> 00:27:47,600
for our penetration testing I would

559
00:27:44,720 --> 00:27:49,340
recommend docker it's not the only way

560
00:27:47,600 --> 00:27:51,889
to skin the cat but it's a good way to

561
00:27:49,340 --> 00:27:55,310
do it I found it to be very simple to

562
00:27:51,890 --> 00:27:57,850
use and gave me took me 90% of where I

563
00:27:55,310 --> 00:27:57,850
wanted to go

564
00:27:58,480 --> 00:28:03,600
all right all right thank you that's it

565
00:28:08,050 --> 00:28:11,720
[Applause]

566
00:28:24,870 --> 00:28:32,290
you're doing penetration tests in the

567
00:28:27,669 --> 00:28:35,580
first place so you're already going a

568
00:28:32,290 --> 00:28:41,460
little bit beyond the typical user I

569
00:28:35,580 --> 00:28:45,000
think it basically boils down to that if

570
00:28:41,460 --> 00:28:48,790
you are not route user you probably

571
00:28:45,000 --> 00:28:50,470
cannot do this but if you're the tenant

572
00:28:48,790 --> 00:28:52,030
administrator which is really my

573
00:28:50,470 --> 00:28:55,240
audience would be the administrator of

574
00:28:52,030 --> 00:29:01,090
the tenants you probably have root user

575
00:28:55,240 --> 00:29:03,540
to your yep you probably have root user

576
00:29:01,090 --> 00:29:06,280
if you're the tenant administrator so

577
00:29:03,540 --> 00:29:09,600
basically I didn't I didn't tackle the

578
00:29:06,280 --> 00:29:09,600
use case where you're not root user

579
00:29:30,520 --> 00:29:35,710
stand up on the deadline but the

580
00:29:33,330 --> 00:29:36,970
variegatedness you might not what they

581
00:29:35,710 --> 00:29:38,220
have

582
00:29:36,970 --> 00:29:43,710
[Applause]

583
00:29:38,220 --> 00:29:45,630
I haven't I mean I haven't really

584
00:29:43,710 --> 00:29:48,630
thought about it if you don't have root

585
00:29:45,630 --> 00:29:51,840
privileges then there's just so much you

586
00:29:48,630 --> 00:29:54,480
cannot do but let me go back to the

587
00:29:51,840 --> 00:29:57,320
darker case let's see so if you're not

588
00:29:54,480 --> 00:30:00,030
root user well you can create docker

589
00:29:57,320 --> 00:30:02,100
containers so if I'm a normal user I can

590
00:30:00,030 --> 00:30:04,740
create a docker container so that I can

591
00:30:02,100 --> 00:30:07,379
you load colleague into the docker

592
00:30:04,740 --> 00:30:11,850
container I believe is that true

593
00:30:07,380 --> 00:30:16,320
so I mean I will be able to send packets

594
00:30:11,850 --> 00:30:18,809
from the Kali Linux container to to

595
00:30:16,320 --> 00:30:21,689
myself now I when would you need

596
00:30:18,809 --> 00:30:24,629
privileged I remember right you need

597
00:30:21,690 --> 00:30:26,730
pretty privileged in the docker

598
00:30:24,630 --> 00:30:32,600
container for when you're monkeying with

599
00:30:26,730 --> 00:30:36,720
say /proc files are some such like that

600
00:30:32,600 --> 00:30:38,789
and I only needed to do that in my

601
00:30:36,720 --> 00:30:44,010
recollection when I did man in the

602
00:30:38,789 --> 00:30:46,530
middle attacks eater cap so I mean don't

603
00:30:44,010 --> 00:30:51,750
i'd have to rerun these tests as a non

604
00:30:46,530 --> 00:30:54,899
admitted root user but I suspect it's

605
00:30:51,750 --> 00:30:56,610
possible to do if you're you know maybe

606
00:30:54,900 --> 00:31:00,470
not all the tests but some subset of

607
00:30:56,610 --> 00:31:00,469
them yeah

608
00:31:24,250 --> 00:31:33,260
well inside of an instance I can Chuck

609
00:31:29,930 --> 00:31:36,140
IPS rules or IDs rules firewall rules

610
00:31:33,260 --> 00:31:45,379
you know I cannot send a packet to

611
00:31:36,140 --> 00:31:48,080
another instance that's true no no you

612
00:31:45,380 --> 00:31:49,550
would you you main so if you're if

613
00:31:48,080 --> 00:31:52,970
you're let's say let's say you're a

614
00:31:49,550 --> 00:31:55,280
tenant administrator and there's two

615
00:31:52,970 --> 00:31:58,370
instances if I'm a tenant administrator

616
00:31:55,280 --> 00:32:00,980
I assume a priori that I have access to

617
00:31:58,370 --> 00:32:03,080
like the PEM files for those users and I

618
00:32:00,980 --> 00:32:07,910
can sign into them and get in as root

619
00:32:03,080 --> 00:32:09,919
user so in that case I can send packets

620
00:32:07,910 --> 00:32:12,440
from one instance to another that that

621
00:32:09,920 --> 00:32:16,250
is possible but they might be blocked by

622
00:32:12,440 --> 00:32:18,260
that firewall but if I'm the tenant

623
00:32:16,250 --> 00:32:22,130
administrator I can modify that firewall

624
00:32:18,260 --> 00:32:23,810
- this is the OpenStack use case where

625
00:32:22,130 --> 00:32:30,890
you as a tenant administrator I might

626
00:32:23,810 --> 00:32:32,060
have some abilities yeah so I mean cloud

627
00:32:30,890 --> 00:32:33,410
is very hard because you got three

628
00:32:32,060 --> 00:32:35,780
situations you got the public cloud

629
00:32:33,410 --> 00:32:38,720
where you have almost no access to the

630
00:32:35,780 --> 00:32:41,090
guts of the networking you have the

631
00:32:38,720 --> 00:32:43,880
private cloud where you might have

632
00:32:41,090 --> 00:32:48,379
access to the guts or you might not and

633
00:32:43,880 --> 00:32:50,030
then you have the pure where your I've

634
00:32:48,380 --> 00:32:51,620
you're just an instance owner and you

635
00:32:50,030 --> 00:32:53,870
have no access to anything which is I

636
00:32:51,620 --> 00:32:55,219
think and not root user - which is I

637
00:32:53,870 --> 00:32:59,959
think the use case you're talking about

638
00:32:55,220 --> 00:33:02,780
and I haven't gone to that minimal level

639
00:32:59,960 --> 00:33:07,730
of privileges but I think I think you're

640
00:33:02,780 --> 00:33:12,039
probably limited any other questions

641
00:33:07,730 --> 00:33:12,039
alright then thanks

642
00:33:17,490 --> 00:33:20,619
[Applause]

643
00:33:25,380 --> 00:33:28,449
[Applause]

