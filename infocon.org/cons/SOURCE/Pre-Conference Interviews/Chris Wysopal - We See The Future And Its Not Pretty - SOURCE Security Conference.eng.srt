1
00:00:00,000 --> 00:00:03,629
sorry okay all right well why don't we

2
00:00:02,909 --> 00:00:07,529
get started

3
00:00:03,629 --> 00:00:10,920
hopefully everyone can hear me I'm Chris

4
00:00:07,529 --> 00:00:13,259
why so Pole I'm the CTO and co-founder

5
00:00:10,920 --> 00:00:17,609
of error code I've been doing

6
00:00:13,259 --> 00:00:21,448
application security now for probably 12

7
00:00:17,609 --> 00:00:23,580
13 years I think and Bera code has been

8
00:00:21,449 --> 00:00:26,490
around for about seven years for the

9
00:00:23,580 --> 00:00:28,619
last five years we've been collecting a

10
00:00:26,490 --> 00:00:31,409
lot of data from all the application

11
00:00:28,619 --> 00:00:34,800
security testing we're doing so my talk

12
00:00:31,410 --> 00:00:38,610
today we see the future and it's not

13
00:00:34,800 --> 00:00:41,819
pretty is is using that data and trying

14
00:00:38,610 --> 00:00:44,789
to use it to be predictive so we call it

15
00:00:41,820 --> 00:00:46,230
the state of software security data

16
00:00:44,789 --> 00:00:49,320
software security report we've come out

17
00:00:46,230 --> 00:00:53,849
with five volumes over roughly six years

18
00:00:49,320 --> 00:00:57,210
now and there's a lot of reports that

19
00:00:53,850 --> 00:01:00,390
have been out there for longer reports

20
00:00:57,210 --> 00:01:03,719
from Verizon data breach incident report

21
00:01:00,390 --> 00:01:06,990
and Trustwave has their things they call

22
00:01:03,719 --> 00:01:09,060
it the global security report and they

23
00:01:06,990 --> 00:01:11,850
report about incidents so it's like this

24
00:01:09,060 --> 00:01:14,939
is this is how the guys got in right so

25
00:01:11,850 --> 00:01:18,179
it can help you learn about maybe you

26
00:01:14,939 --> 00:01:21,449
have that same problem and the same

27
00:01:18,180 --> 00:01:25,350
tactics are gonna be used on you so

28
00:01:21,450 --> 00:01:27,330
these are very valuable reports and a

29
00:01:25,350 --> 00:01:29,490
lot of people a lot of security programs

30
00:01:27,330 --> 00:01:32,939
are built and a lot of things like that

31
00:01:29,490 --> 00:01:34,470
the top 20 critical security controls

32
00:01:32,939 --> 00:01:37,829
from sans things like that are built

33
00:01:34,470 --> 00:01:40,710
based on seeing what went wrong after

34
00:01:37,829 --> 00:01:43,380
the breach happened well the state of

35
00:01:40,710 --> 00:01:45,539
software security report is actually not

36
00:01:43,380 --> 00:01:47,369
looking at incidents it's looking at the

37
00:01:45,540 --> 00:01:50,670
owner abilities we're detecting in the

38
00:01:47,369 --> 00:01:53,850
applications so we look at this as more

39
00:01:50,670 --> 00:01:56,070
predictive than the incident reports

40
00:01:53,850 --> 00:01:57,750
because these vulnerabilities are going

41
00:01:56,070 --> 00:01:59,130
to be there for years right if they made

42
00:01:57,750 --> 00:01:59,680
it into the software they're gonna be an

43
00:01:59,130 --> 00:02:03,820
air-free

44
00:01:59,680 --> 00:02:06,910
and it's it's a good way to see what the

45
00:02:03,820 --> 00:02:11,410
long-term trends are going to be around

46
00:02:06,910 --> 00:02:14,740
application security so the data set we

47
00:02:11,410 --> 00:02:17,590
have is about 22,000 applications over

48
00:02:14,740 --> 00:02:20,400
an 18-month period and you probably

49
00:02:17,590 --> 00:02:22,960
can't see some of these numbers up there

50
00:02:20,400 --> 00:02:24,880
but these different parts of the pie

51
00:02:22,960 --> 00:02:27,700
chart are you know Greene's financial

52
00:02:24,880 --> 00:02:30,700
services at 27 percent nine percent is

53
00:02:27,700 --> 00:02:34,420
orange software industry six percent

54
00:02:30,700 --> 00:02:36,369
technology industry six percent Telecom

55
00:02:34,420 --> 00:02:37,899
four percent government three percent

56
00:02:36,370 --> 00:02:40,600
business services so you can see it's a

57
00:02:37,900 --> 00:02:42,280
pretty diverse set of saw it's not just

58
00:02:40,600 --> 00:02:45,940
financial services it's really kind of

59
00:02:42,280 --> 00:02:47,410
mapping to the software that enterprises

60
00:02:45,940 --> 00:02:51,250
used to run their to run their

61
00:02:47,410 --> 00:02:53,440
businesses and on the right here you can

62
00:02:51,250 --> 00:02:56,530
see the distribution of web apps versus

63
00:02:53,440 --> 00:02:58,630
in blue versus non web apps that are not

64
00:02:56,530 --> 00:03:00,910
mobile in green and mobile apps in

65
00:02:58,630 --> 00:03:02,740
orange you can see our customers are

66
00:03:00,910 --> 00:03:05,920
mostly concerned or our customers mostly

67
00:03:02,740 --> 00:03:07,330
have web applications that they want

68
00:03:05,920 --> 00:03:09,609
testing so that is the majority of our

69
00:03:07,330 --> 00:03:13,870
data set but since we have so many

70
00:03:09,610 --> 00:03:15,370
applications 22,000 even at you know 3%

71
00:03:13,870 --> 00:03:18,160
we're still talking about hundreds and

72
00:03:15,370 --> 00:03:21,190
hundreds of samples that the data

73
00:03:18,160 --> 00:03:23,230
made up this is the overall distribution

74
00:03:21,190 --> 00:03:25,329
of the different languages I'm gonna

75
00:03:23,230 --> 00:03:26,590
talk a lot about slicing this data by

76
00:03:25,330 --> 00:03:28,090
language because I think it's pretty

77
00:03:26,590 --> 00:03:31,840
interesting to see the differences by

78
00:03:28,090 --> 00:03:33,640
language and as we went from volume

79
00:03:31,840 --> 00:03:36,850
three of our four divine four in volume

80
00:03:33,640 --> 00:03:39,779
five we've seen Java and the green here

81
00:03:36,850 --> 00:03:43,359
shrink a little bit from 50 to 250

82
00:03:39,780 --> 00:03:46,390
dotnet is staying about the same we're

83
00:03:43,360 --> 00:03:49,810
seeing C and C++ actually go down from

84
00:03:46,390 --> 00:03:52,839
12% to 9% over three years and we're

85
00:03:49,810 --> 00:03:54,490
starting to see a ColdFusion state about

86
00:03:52,840 --> 00:03:56,950
the same at 2% but we're starting to see

87
00:03:54,490 --> 00:04:00,970
mobile apps take out more of this more

88
00:03:56,950 --> 00:04:04,600
of the slice of the pie going for a 6%

89
00:04:00,970 --> 00:04:06,730
date we're sort of seeing the mirror of

90
00:04:04,600 --> 00:04:11,109
what application development is at

91
00:04:06,730 --> 00:04:13,750
enterprises with with our data set and

92
00:04:11,110 --> 00:04:15,610
so this is this is the data we have we

93
00:04:13,750 --> 00:04:18,160
have our customers send us their

94
00:04:15,610 --> 00:04:20,560
executables their binaries and we have

95
00:04:18,160 --> 00:04:22,030
to fill out this metadata what industry

96
00:04:20,560 --> 00:04:23,680
well we know what industry vertical they

97
00:04:22,029 --> 00:04:25,479
are we can look that up by the customer

98
00:04:23,680 --> 00:04:28,650
but they tell us who supplied the

99
00:04:25,480 --> 00:04:32,110
application did I download open source

100
00:04:28,650 --> 00:04:33,940
did I buy it from a vendor did I have it

101
00:04:32,110 --> 00:04:35,230
outsourced or did I build it myself

102
00:04:33,940 --> 00:04:37,180
that's what we think consider the

103
00:04:35,230 --> 00:04:39,190
supplier so we can we can slice the data

104
00:04:37,180 --> 00:04:41,290
by who supplied the application start to

105
00:04:39,190 --> 00:04:43,620
seeing is open source better than vendor

106
00:04:41,290 --> 00:04:46,180
code or vice versa

107
00:04:43,620 --> 00:04:48,130
we know what the application type is we

108
00:04:46,180 --> 00:04:50,620
know basically rough categories of what

109
00:04:48,130 --> 00:04:53,230
it does is it a security app is an

110
00:04:50,620 --> 00:04:55,900
operation staff the customer support app

111
00:04:53,230 --> 00:04:58,710
and a marketing app we can start to see

112
00:04:55,900 --> 00:05:02,919
our different apps written you

113
00:04:58,710 --> 00:05:05,349
different levels of security rigor we

114
00:05:02,920 --> 00:05:07,000
have them give us an assurance level so

115
00:05:05,350 --> 00:05:08,800
we know how critical this is to their

116
00:05:07,000 --> 00:05:10,990
business is this you know financial

117
00:05:08,800 --> 00:05:12,880
transactions you know in the millions

118
00:05:10,990 --> 00:05:15,820
operating you know facing the internet a

119
00:05:12,880 --> 00:05:17,409
highly critical application or you know

120
00:05:15,820 --> 00:05:19,570
perhaps what just happened to American

121
00:05:17,410 --> 00:05:21,100
Airlines today their flight reservation

122
00:05:19,570 --> 00:05:23,170
Global flight reservation system went

123
00:05:21,100 --> 00:05:26,890
down kind of a critical app now they

124
00:05:23,170 --> 00:05:28,540
have not 800 planes around it to apps

125
00:05:26,890 --> 00:05:30,010
that you know they care of a little bit

126
00:05:28,540 --> 00:05:31,210
about maybe it's a marketing app they

127
00:05:30,010 --> 00:05:32,920
care about the brand

128
00:05:31,210 --> 00:05:34,390
so we can see if people are using

129
00:05:32,920 --> 00:05:35,680
different practices or holding their

130
00:05:34,390 --> 00:05:39,190
vendors accountable the different

131
00:05:35,680 --> 00:05:41,050
practices so we have some interesting

132
00:05:39,190 --> 00:05:43,150
data in the language in the platform we

133
00:05:41,050 --> 00:05:45,100
know and then what we do is we take that

134
00:05:43,150 --> 00:05:48,070
application and we we scan it with

135
00:05:45,100 --> 00:05:50,620
static or dynamic analysis and we're

136
00:05:48,070 --> 00:05:53,409
able to determine you know we look for

137
00:05:50,620 --> 00:05:55,120
different sets of ulnar abilities or

138
00:05:53,410 --> 00:05:57,940
security defects if you will in the

139
00:05:55,120 --> 00:06:00,340
application and for each one of those we

140
00:05:57,940 --> 00:06:01,960
know what line of code it was on we know

141
00:06:00,340 --> 00:06:03,429
when the scan was performed and we know

142
00:06:01,960 --> 00:06:05,109
what type of defect it is so this is

143
00:06:03,430 --> 00:06:09,280
what we generate we generate the scan

144
00:06:05,110 --> 00:06:10,870
data and then using using that we can

145
00:06:09,280 --> 00:06:13,659
come up with some metrics we can

146
00:06:10,870 --> 00:06:16,420
calculate some values so that says how

147
00:06:13,660 --> 00:06:19,240
many flaws this application have what

148
00:06:16,420 --> 00:06:21,060
percentage of flaws in our total data

149
00:06:19,240 --> 00:06:24,490
set is a particular vulnerability

150
00:06:21,060 --> 00:06:26,380
category so we calculate these things to

151
00:06:24,490 --> 00:06:28,540
try to figure out what's going on in the

152
00:06:26,380 --> 00:06:30,280
world of application security are people

153
00:06:28,540 --> 00:06:34,180
creating more or less sequel injection

154
00:06:30,280 --> 00:06:36,250
today rather than tomorrow so one of the

155
00:06:34,180 --> 00:06:41,460
things we in this volume we drove down

156
00:06:36,250 --> 00:06:44,740
deep in is slicing it by language type

157
00:06:41,460 --> 00:06:47,979
or platform type yeah because you might

158
00:06:44,740 --> 00:06:51,370
have Android it's a different platform

159
00:06:47,980 --> 00:06:54,100
for a job application versus a java web

160
00:06:51,370 --> 00:06:57,250
application so slice it by platform type

161
00:06:54,100 --> 00:06:59,620
and language and look at the other thing

162
00:06:57,250 --> 00:07:02,350
we looked at was what what did people

163
00:06:59,620 --> 00:07:03,639
remediated what how quickly do they

164
00:07:02,350 --> 00:07:05,349
remediate things

165
00:07:03,639 --> 00:07:07,270
and what what do they choose to

166
00:07:05,349 --> 00:07:11,520
remediate so that's a lot of what I'm

167
00:07:07,270 --> 00:07:11,520
gonna what I'm gonna talk about today so

168
00:07:11,550 --> 00:07:15,099
I'm mostly going to talk about the

169
00:07:13,659 --> 00:07:16,990
latent vulnerabilities what's sitting

170
00:07:15,099 --> 00:07:20,080
there in these applications that we've

171
00:07:16,990 --> 00:07:21,729
discovered and of course a lot of

172
00:07:20,080 --> 00:07:24,520
vulnerabilities will never be exploited

173
00:07:21,729 --> 00:07:27,330
right the app is reachable by attacker

174
00:07:24,520 --> 00:07:30,930
the attacker doesn't care about that

175
00:07:27,330 --> 00:07:33,840
application maybe that kind of

176
00:07:30,930 --> 00:07:37,060
vulnerability is really hard to exploit

177
00:07:33,840 --> 00:07:39,250
so those factors certainly go go into

178
00:07:37,060 --> 00:07:40,599
this so when you're talking about latent

179
00:07:39,250 --> 00:07:42,400
vulnerabilities you have to really kind

180
00:07:40,599 --> 00:07:44,919
of talk about the attack to some degree

181
00:07:42,400 --> 00:07:47,378
to try to try to understand what the

182
00:07:44,919 --> 00:07:49,870
weight is unfortunately we don't have a

183
00:07:47,379 --> 00:07:53,080
lot of attack data that goes all the way

184
00:07:49,870 --> 00:07:54,669
down to vulnerability type you see it a

185
00:07:53,080 --> 00:07:56,318
lot with sequel injection sequel

186
00:07:54,669 --> 00:07:59,198
injection attacks are pretty easy to

187
00:07:56,319 --> 00:08:01,810
know you see a database dump and those

188
00:07:59,199 --> 00:08:03,849
are kind of easy to figure out but a lot

189
00:08:01,810 --> 00:08:05,830
of these other vulnerability types you

190
00:08:03,849 --> 00:08:08,199
know what was the last time you heard

191
00:08:05,830 --> 00:08:09,969
like an app that was breached in the

192
00:08:08,199 --> 00:08:14,169
news was breached because of cross-site

193
00:08:09,969 --> 00:08:15,340
scripting I'm sure a lot do a lot of our

194
00:08:14,169 --> 00:08:16,990
customers care about cross-site

195
00:08:15,340 --> 00:08:19,900
scripting and they fix them so there

196
00:08:16,990 --> 00:08:23,469
must be some reason for it but it's it's

197
00:08:19,900 --> 00:08:26,198
more rare so if you if you look at this

198
00:08:23,469 --> 00:08:28,240
chart here I've compared the percent of

199
00:08:26,199 --> 00:08:30,639
web applications affected in the orange

200
00:08:28,240 --> 00:08:32,140
which is the verrico data so those are

201
00:08:30,639 --> 00:08:34,180
the latent vulnerabilities we're finding

202
00:08:32,140 --> 00:08:36,039
on an average how many applications are

203
00:08:34,179 --> 00:08:39,250
affected by a class of vulnerability and

204
00:08:36,039 --> 00:08:43,390
then in the in the sort of the bluish

205
00:08:39,250 --> 00:08:46,240
green there is percentage of hacks that

206
00:08:43,390 --> 00:08:48,850
we know were due to this attack this is

207
00:08:46,240 --> 00:08:50,320
uh attacking this vulnerability class so

208
00:08:48,850 --> 00:08:52,540
we get that from the web hacking into

209
00:08:50,320 --> 00:08:56,350
the database which is the best place we

210
00:08:52,540 --> 00:08:58,089
found for this data I think this is

211
00:08:56,350 --> 00:08:59,730
Andrew hey in the room here he was

212
00:08:58,089 --> 00:09:06,730
saying in the last presentation by

213
00:08:59,730 --> 00:09:08,410
Patrick Patrick Flores or Florian we

214
00:09:06,730 --> 00:09:09,850
don't have a lot of data in application

215
00:09:08,410 --> 00:09:11,920
security and that's that's the thing we

216
00:09:09,850 --> 00:09:14,140
constantly struggle with like we have

217
00:09:11,920 --> 00:09:15,939
really accurate data of you know of

218
00:09:14,140 --> 00:09:18,160
latent vulnerabilities but I need other

219
00:09:15,940 --> 00:09:23,949
data to make sense of that right I need

220
00:09:18,160 --> 00:09:25,990
the base rate to some degree and so you

221
00:09:23,949 --> 00:09:27,760
know this is the best I could find but I

222
00:09:25,990 --> 00:09:31,029
think it stacks up to show you

223
00:09:27,760 --> 00:09:32,560
relatively comparing layton

224
00:09:31,029 --> 00:09:35,380
vulnerabilities with sequel injection at

225
00:09:32,560 --> 00:09:37,810
32 percent and 22 percent of the attacks

226
00:09:35,380 --> 00:09:39,520
of web applications using sequel as yet

227
00:09:37,810 --> 00:09:41,500
sequel injection that kind of makes

228
00:09:39,520 --> 00:09:43,449
sense to me right it's pretty prevalent

229
00:09:41,500 --> 00:09:45,040
it's easy to find it's easy to exploit

230
00:09:43,449 --> 00:09:47,469
we're seeing it's being used 20% of the

231
00:09:45,040 --> 00:09:50,680
time that makes sense now cross-site

232
00:09:47,470 --> 00:09:52,779
scripting we find 68% of applications

233
00:09:50,680 --> 00:09:54,339
have cross-site scripting so if you're

234
00:09:52,779 --> 00:09:55,810
an attacker and you can come up with

235
00:09:54,339 --> 00:09:58,290
techniques for use across site scripting

236
00:09:55,810 --> 00:10:00,699
to compromised an app you could have you

237
00:09:58,290 --> 00:10:03,579
probably do better than you would in a

238
00:10:00,699 --> 00:10:06,370
sequel injection but we only find 10% of

239
00:10:03,579 --> 00:10:08,829
the hacks are actually do or have been

240
00:10:06,370 --> 00:10:11,020
detected and reported as due to

241
00:10:08,829 --> 00:10:12,819
cross-site scripting so we're getting a

242
00:10:11,020 --> 00:10:14,829
big discrepancy there and you know we

243
00:10:12,819 --> 00:10:16,360
try to explain it maybe it's this

244
00:10:14,829 --> 00:10:19,599
cross-site scripting is harder to

245
00:10:16,360 --> 00:10:23,020
exploit to the means to the ends that

246
00:10:19,600 --> 00:10:26,560
the attacker wants information leakage

247
00:10:23,020 --> 00:10:28,149
we see is affecting 66% of apps but it's

248
00:10:26,560 --> 00:10:32,319
only mentioned in three percent of the

249
00:10:28,149 --> 00:10:34,060
reports of breach so it's probably used

250
00:10:32,319 --> 00:10:36,430
a lot but we only know about it

251
00:10:34,060 --> 00:10:38,109
happening pretty rarely cryptographic

252
00:10:36,430 --> 00:10:39,219
issues really stands out as something

253
00:10:38,110 --> 00:10:42,100
that doesn't make sense to me we're

254
00:10:39,220 --> 00:10:45,399
seeing in 53 percent of the apps that we

255
00:10:42,100 --> 00:10:48,160
test yet it's only reported as as being

256
00:10:45,399 --> 00:10:49,690
used two percent of the time to me that

257
00:10:48,160 --> 00:10:52,899
just seems like a complete reporting

258
00:10:49,690 --> 00:10:55,180
error I think if an app has crypto

259
00:10:52,899 --> 00:10:56,690
issues that's probably being attacked

260
00:10:55,180 --> 00:10:59,060
more than two

261
00:10:56,690 --> 00:11:00,590
and they finally command injection we're

262
00:10:59,060 --> 00:11:03,050
finding it's in nine percent of

263
00:11:00,590 --> 00:11:04,850
applications command injection is pretty

264
00:11:03,050 --> 00:11:06,589
easy to exploit right you just kind of

265
00:11:04,850 --> 00:11:08,720
injects the command you want to execute

266
00:11:06,590 --> 00:11:10,550
and you figure out the way it's being

267
00:11:08,720 --> 00:11:14,900
parsed and you can code it the right way

268
00:11:10,550 --> 00:11:16,760
yeah we own least 1% of the time so I

269
00:11:14,900 --> 00:11:19,370
think this slide more than anything

270
00:11:16,760 --> 00:11:20,840
shows that we need better attack data so

271
00:11:19,370 --> 00:11:22,700
that we can understand which latent

272
00:11:20,840 --> 00:11:24,650
defects we should be prioritizing to fix

273
00:11:22,700 --> 00:11:26,060
from this really the only thing I can

274
00:11:24,650 --> 00:11:28,069
say is if you have sequel injection you

275
00:11:26,060 --> 00:11:30,109
probably should fix it these other ones

276
00:11:28,070 --> 00:11:34,000
it's a little harder to understand how

277
00:11:30,110 --> 00:11:34,000
to prioritize your question

278
00:12:01,890 --> 00:12:06,500
right it's a spazz a specialized skill

279
00:12:04,230 --> 00:12:06,500
set

280
00:12:10,370 --> 00:12:14,750
right

281
00:12:12,700 --> 00:12:16,280
that's a--that's a possibility even

282
00:12:14,750 --> 00:12:17,660
things like you know weak random number

283
00:12:16,280 --> 00:12:19,699
generation which we find all the time

284
00:12:17,660 --> 00:12:21,680
it's pretty sometimes it's difficult to

285
00:12:19,700 --> 00:12:24,070
exploit that you have to come up with a

286
00:12:21,680 --> 00:12:24,069
prediction

287
00:12:30,650 --> 00:12:41,860
right maybe that's the 2% that's the 2%

288
00:12:35,420 --> 00:12:41,860
right yep yep

289
00:12:54,220 --> 00:12:56,850
right

290
00:12:57,820 --> 00:13:00,450
sure

291
00:13:04,640 --> 00:13:09,640
right like a man-in-the-middle attack

292
00:13:10,300 --> 00:13:12,959
right

293
00:13:18,800 --> 00:13:21,800
right

294
00:13:28,190 --> 00:13:30,790
yeah

295
00:13:33,089 --> 00:13:38,300
right

296
00:13:35,420 --> 00:13:41,449
so you know this slide tonot isn't my

297
00:13:38,300 --> 00:13:44,359
call for better reporting what are the

298
00:13:41,450 --> 00:13:47,060
root causes of breeches because without

299
00:13:44,360 --> 00:13:48,860
that then I don't know how to wait some

300
00:13:47,060 --> 00:13:52,189
of these different issues as far as what

301
00:13:48,860 --> 00:13:54,320
are you gonna fix first so a lot of

302
00:13:52,190 --> 00:13:57,080
people will wait things based on you

303
00:13:54,320 --> 00:13:59,120
know what's the criticality what's the

304
00:13:57,080 --> 00:14:01,400
impact if that vulnerability is

305
00:13:59,120 --> 00:14:02,750
exploited but it doesn't take into

306
00:14:01,400 --> 00:14:04,100
account what are the what you know

307
00:14:02,750 --> 00:14:05,540
what's the chances it's going to be

308
00:14:04,100 --> 00:14:06,620
exploited and this is trying to get out

309
00:14:05,540 --> 00:14:08,990
what are the chicken that's gonna be

310
00:14:06,620 --> 00:14:10,490
exploited from here we can say yeah it

311
00:14:08,990 --> 00:14:12,350
looks like a lot of the sequel injection

312
00:14:10,490 --> 00:14:16,600
vulnerabilities are gonna end up being

313
00:14:12,350 --> 00:14:16,600
exploited I mean this is only the tough

314
00:14:16,990 --> 00:14:23,450
we know there's more than five defect

315
00:14:19,310 --> 00:14:25,520
categories that matter so if in your

316
00:14:23,450 --> 00:14:29,270
organization that you can push to have

317
00:14:25,520 --> 00:14:35,120
things more detailed reported that would

318
00:14:29,270 --> 00:14:38,270
be good so our you know big overall

319
00:14:35,120 --> 00:14:40,640
number we find is that 70% of the

320
00:14:38,270 --> 00:14:42,740
applications that our customers had us

321
00:14:40,640 --> 00:14:44,930
test failed to meet the test criteria

322
00:14:42,740 --> 00:14:46,520
that they specified or the security

323
00:14:44,930 --> 00:14:49,699
enterprise security policy is another

324
00:14:46,520 --> 00:14:51,530
way of putting it and so you know that's

325
00:14:49,700 --> 00:14:54,020
that's generally bad this is apps that

326
00:14:51,530 --> 00:14:56,060
you know are being tested before they

327
00:14:54,020 --> 00:14:58,189
get put into production or they might be

328
00:14:56,060 --> 00:15:00,260
apps that they're purchasing or they're

329
00:14:58,190 --> 00:15:03,230
having an outsourcer you know build for

330
00:15:00,260 --> 00:15:04,610
them so the majority of applications

331
00:15:03,230 --> 00:15:06,950
aren't meeting the policies that are

332
00:15:04,610 --> 00:15:09,260
that are put out there and this is sort

333
00:15:06,950 --> 00:15:11,840
of the detail of three different kinds

334
00:15:09,260 --> 00:15:15,290
of policies that our customers use some

335
00:15:11,840 --> 00:15:18,080
hold all their web facing at web apps to

336
00:15:15,290 --> 00:15:20,270
say the OWASP top 10 you know that PCI

337
00:15:18,080 --> 00:15:22,280
compliance uses it so they say hey

338
00:15:20,270 --> 00:15:24,680
that's that's what I will in my

339
00:15:22,280 --> 00:15:26,900
organization that doesn't really work

340
00:15:24,680 --> 00:15:29,060
with non web apps so people use the

341
00:15:26,900 --> 00:15:31,459
scene of movie scenes top 25 a lot of

342
00:15:29,060 --> 00:15:33,829
times for that and then people come up

343
00:15:31,460 --> 00:15:35,780
with custom enterprise policies they

344
00:15:33,830 --> 00:15:37,460
just say I just don't want any sequel

345
00:15:35,780 --> 00:15:38,930
injection of cross-site scripting you

346
00:15:37,460 --> 00:15:39,320
know that could be a custom policy or

347
00:15:38,930 --> 00:15:41,329
make it

348
00:15:39,320 --> 00:15:44,240
I don't want anything that has a high

349
00:15:41,329 --> 00:15:45,739
criticality impact I don't want to

350
00:15:44,240 --> 00:15:48,709
eradicate those so those would be custom

351
00:15:45,740 --> 00:15:50,420
policies so we basically looked at all

352
00:15:48,709 --> 00:15:52,040
the apps that we tested and we we

353
00:15:50,420 --> 00:15:53,839
basically took the set of

354
00:15:52,040 --> 00:15:55,759
vulnerabilities we found and we held it

355
00:15:53,839 --> 00:15:58,790
against the Las top ten so if it had one

356
00:15:55,759 --> 00:16:01,069
defect in the our top ten and fail seven

357
00:15:58,790 --> 00:16:03,170
percent we held it against if it was a

358
00:16:01,069 --> 00:16:06,199
non web app we held it against the CW

359
00:16:03,170 --> 00:16:09,439
top 25 and if it was an enterprise app

360
00:16:06,199 --> 00:16:11,359
and they had an enterprise policy you

361
00:16:09,440 --> 00:16:13,970
know we held it up against that so I

362
00:16:11,360 --> 00:16:15,290
think the one thing that you know I can

363
00:16:13,970 --> 00:16:19,089
take you know besides saying that the

364
00:16:15,290 --> 00:16:22,790
majority of apps out there cure is

365
00:16:19,089 --> 00:16:28,069
enterprises are more lenient than the

366
00:16:22,790 --> 00:16:29,839
OAuth stuff with their policies the top

367
00:16:28,069 --> 00:16:31,339
tended to be a more strict number

368
00:16:29,839 --> 00:16:33,050
because the majority of the apps were

369
00:16:31,339 --> 00:16:35,480
looking at our web applications when

370
00:16:33,050 --> 00:16:39,399
they're falling into them yeah they

371
00:16:35,480 --> 00:16:39,399
would fall into the off top ten buckets

372
00:16:40,330 --> 00:16:46,910
this is another overall of the

373
00:16:44,870 --> 00:16:48,709
applications we looked at this is the

374
00:16:46,910 --> 00:16:50,750
build over build improvement that we saw

375
00:16:48,709 --> 00:16:52,579
so we have a lot of customers who just

376
00:16:50,750 --> 00:16:54,200
test once and they say hey thanks for

377
00:16:52,580 --> 00:16:57,470
telling me about my vulnerabilities and

378
00:16:54,200 --> 00:16:59,690
they go away well we also have customers

379
00:16:57,470 --> 00:17:02,329
that say hey I'm gonna build this into

380
00:16:59,690 --> 00:17:07,010
my development lifecycle and I'm gonna

381
00:17:02,329 --> 00:17:09,649
test every build that I'm building and

382
00:17:07,010 --> 00:17:10,819
so this is the progression what we come

383
00:17:09,650 --> 00:17:12,770
up with something we call a security

384
00:17:10,819 --> 00:17:15,349
Quality Score which I know weighted

385
00:17:12,770 --> 00:17:17,770
based on the number and severity of the

386
00:17:15,349 --> 00:17:21,139
different vulnerabilities we find and

387
00:17:17,770 --> 00:17:22,819
this is how they improve over time you

388
00:17:21,140 --> 00:17:25,250
can see these whisker charts is once

389
00:17:22,819 --> 00:17:30,830
their deviation and a line in the middle

390
00:17:25,250 --> 00:17:35,630
is the median and the width I guess is

391
00:17:30,830 --> 00:17:38,449
the number of samples so you can see

392
00:17:35,630 --> 00:17:41,500
that we have less customers that have

393
00:17:38,450 --> 00:17:41,500
done nine zones with us

394
00:17:46,429 --> 00:17:54,960
right probably not probably so I'm not

395
00:17:49,740 --> 00:17:57,299
sure how that's calculated with that and

396
00:17:54,960 --> 00:17:59,700
so you can see that in general you know

397
00:17:57,299 --> 00:18:02,460
it slowly increases over time build over

398
00:17:59,700 --> 00:18:03,990
builds and it's kind of just you get to

399
00:18:02,460 --> 00:18:07,410
build nine to kind of dip it down a

400
00:18:03,990 --> 00:18:09,540
little bit and we sliced this on an

401
00:18:07,410 --> 00:18:11,360
earlier data set with just five and it

402
00:18:09,540 --> 00:18:15,059
kind of dipped down after the fifth one

403
00:18:11,360 --> 00:18:16,709
and so you know what would make it go

404
00:18:15,059 --> 00:18:18,330
down which would which would probably be

405
00:18:16,710 --> 00:18:20,340
there's a lot of new functionality there

406
00:18:18,330 --> 00:18:23,790
so there's a lot of new deep new

407
00:18:20,340 --> 00:18:25,590
security defects that were created say

408
00:18:23,790 --> 00:18:29,520
between on average between films and

409
00:18:25,590 --> 00:18:32,100
building that's where it seems like a

410
00:18:29,520 --> 00:18:36,059
lot of a lot of new vulnerabilities came

411
00:18:32,100 --> 00:18:45,120
about so what I would think is over time

412
00:18:36,059 --> 00:18:48,030
that's what kind of awesome so one of

413
00:18:45,120 --> 00:18:52,199
the big findings we found from looking

414
00:18:48,030 --> 00:18:54,149
at all our data was sequel injection has

415
00:18:52,200 --> 00:18:57,450
plateaued at thirty percent thirty two

416
00:18:54,150 --> 00:19:00,360
percent of all web apps are affected by

417
00:18:57,450 --> 00:19:05,190
sequel injection and when we did our

418
00:19:00,360 --> 00:19:07,139
earlier reports we we found that there

419
00:19:05,190 --> 00:19:08,850
was a slight trending down we saw our

420
00:19:07,140 --> 00:19:11,429
first couple reports it went from thirty

421
00:19:08,850 --> 00:19:15,059
to six percent at 34 percent to 32

422
00:19:11,429 --> 00:19:19,500
percent but our last three reports going

423
00:19:15,059 --> 00:19:21,928
back to beginning of 2011 stay

424
00:19:19,500 --> 00:19:25,020
remarkably constant you know over tens

425
00:19:21,929 --> 00:19:28,230
of thousands of web applications we're

426
00:19:25,020 --> 00:19:32,190
seeing this constant of 32 percent of

427
00:19:28,230 --> 00:19:34,320
sequel injection so the set of date of

428
00:19:32,190 --> 00:19:35,760
apps is changing right we're not testing

429
00:19:34,320 --> 00:19:37,200
the same apps over and over again that

430
00:19:35,760 --> 00:19:38,970
wouldn't make sense because you know who

431
00:19:37,200 --> 00:19:41,130
told someone about a vulnerability and

432
00:19:38,970 --> 00:19:42,360
they fixed it it wouldn't make sense to

433
00:19:41,130 --> 00:19:44,250
bring the since and this is only the

434
00:19:42,360 --> 00:19:45,928
first time we're looking at an

435
00:19:44,250 --> 00:19:49,500
application so this is a constantly

436
00:19:45,929 --> 00:19:51,929
changing set of applications so with

437
00:19:49,500 --> 00:19:53,210
this what this tells me is for every app

438
00:19:51,929 --> 00:19:55,279
that's getting fixed

439
00:19:53,210 --> 00:19:57,499
there's a new app that's being written

440
00:19:55,279 --> 00:19:59,869
that has a vulnerability in it so we're

441
00:19:57,499 --> 00:20:01,070
sort of seeing this sort of constant if

442
00:19:59,869 --> 00:20:02,928
you look at the whole set of web

443
00:20:01,070 --> 00:20:05,689
applications on the Internet of course

444
00:20:02,929 --> 00:20:07,519
some are brand-new some are old some

445
00:20:05,690 --> 00:20:10,549
have been secured over a long period of

446
00:20:07,519 --> 00:20:12,559
time but this is constant so if you're

447
00:20:10,549 --> 00:20:14,918
an attacker you're always gonna be able

448
00:20:12,559 --> 00:20:22,009
to find sort of one out of the three

449
00:20:14,919 --> 00:20:24,679
applications that you so I find this is

450
00:20:22,009 --> 00:20:26,029
pretty interesting because what this

451
00:20:24,679 --> 00:20:28,669
means that there has to be some major

452
00:20:26,029 --> 00:20:31,099
change to the way we're building

453
00:20:28,669 --> 00:20:32,929
applications the languages were using

454
00:20:31,099 --> 00:20:35,178
the techniques were using maybe this

455
00:20:32,929 --> 00:20:36,919
regulation maybe this liability

456
00:20:35,179 --> 00:20:39,109
something has to disrupt this ecosystem

457
00:20:36,919 --> 00:20:41,029
of software development or we're just

458
00:20:39,109 --> 00:20:43,239
sort of stuck with this 32 percent

459
00:20:41,029 --> 00:20:43,239
number

460
00:20:56,780 --> 00:21:01,290
and then so this is over all over the

461
00:20:59,460 --> 00:21:03,120
last three volumes of our report over

462
00:21:01,290 --> 00:21:06,809
three years how different

463
00:21:03,120 --> 00:21:09,090
vulnerabilities have changed in the

464
00:21:06,809 --> 00:21:11,428
percentage of web apps that are affected

465
00:21:09,090 --> 00:21:12,780
so you can see cross-site scripting is

466
00:21:11,429 --> 00:21:14,790
sort of gone from number two to number

467
00:21:12,780 --> 00:21:18,950
one but it's hovering around the same

468
00:21:14,790 --> 00:21:21,330
number information leakage has gone down

469
00:21:18,950 --> 00:21:23,730
how'd you turn a line feed injection has

470
00:21:21,330 --> 00:21:26,189
actually gone up cryptographic issues

471
00:21:23,730 --> 00:21:29,280
has gone down a little bit over the last

472
00:21:26,190 --> 00:21:32,670
three years directory traversal is

473
00:21:29,280 --> 00:21:41,639
staying pre steady this is another

474
00:21:32,670 --> 00:21:43,200
pretty common one right well we're

475
00:21:41,640 --> 00:21:44,790
finding it's in 49 for some of the

476
00:21:43,200 --> 00:21:47,010
applications out there so you get good

477
00:21:44,790 --> 00:21:49,159
at finding those and good at exploiting

478
00:21:47,010 --> 00:21:51,330
those you can't get out of feeling oh

479
00:21:49,160 --> 00:21:53,280
you're a sequel injection you can see

480
00:21:51,330 --> 00:21:57,110
that the three years of the DOE is at

481
00:21:53,280 --> 00:22:02,730
38% 15 you know two years ago and today

482
00:21:57,110 --> 00:22:05,100
staying pretty steady this is sufficient

483
00:22:02,730 --> 00:22:07,350
input validation kind of crept up and

484
00:22:05,100 --> 00:22:11,129
this is kind of a bias of our testing we

485
00:22:07,350 --> 00:22:14,809
added a lot of new tests in the last 18

486
00:22:11,130 --> 00:22:14,809
months to look for specifically

487
00:22:15,570 --> 00:22:20,470
now whenever we see a change a sharp

488
00:22:18,250 --> 00:22:24,130
change up or down we always go to look

489
00:22:20,470 --> 00:22:25,420
at our see if we have testing bias so

490
00:22:24,130 --> 00:22:26,950
we've investigated all those other

491
00:22:25,420 --> 00:22:35,170
changes and found that we didn't make

492
00:22:26,950 --> 00:22:37,170
any significant changes so now I want to

493
00:22:35,170 --> 00:22:39,280
dive in and slice the data by

494
00:22:37,170 --> 00:22:41,530
programming language this is something

495
00:22:39,280 --> 00:22:43,840
that I've presented you know volume four

496
00:22:41,530 --> 00:22:46,870
before we never yeah we looked at the

497
00:22:43,840 --> 00:22:48,970
data this way and people said you know I

498
00:22:46,870 --> 00:22:50,229
really want to understand you know it

499
00:22:48,970 --> 00:22:51,730
does the selection of programming

500
00:22:50,230 --> 00:22:55,510
language make a big difference to the

501
00:22:51,730 --> 00:22:57,400
number of vulnerabilities in yeah so you

502
00:22:55,510 --> 00:22:59,800
know this is to some degree you know

503
00:22:57,400 --> 00:23:02,320
grounding this a reality with these are

504
00:22:59,800 --> 00:23:04,690
the programming languages that people

505
00:23:02,320 --> 00:23:08,260
are using so this is called the tally OB

506
00:23:04,690 --> 00:23:10,050
index and this organization uses it's

507
00:23:08,260 --> 00:23:14,980
sort of like the you know the Billboard

508
00:23:10,050 --> 00:23:17,710
100 for computer programming languages

509
00:23:14,980 --> 00:23:19,480
they use numbers of Engineers

510
00:23:17,710 --> 00:23:22,420
programming languages over courses being

511
00:23:19,480 --> 00:23:24,060
taught third party vendor is using it to

512
00:23:22,420 --> 00:23:30,300
figure out what's one of the popularity

513
00:23:24,060 --> 00:23:34,600
these different languages use a proxy

514
00:23:30,300 --> 00:23:37,440
and so this is the popularity of

515
00:23:34,600 --> 00:23:40,209
languages from number one to number ten

516
00:23:37,440 --> 00:23:42,790
it's interesting C and C++ they break

517
00:23:40,210 --> 00:23:44,970
out separately where we we lump them in

518
00:23:42,790 --> 00:23:49,180
together because the same compiler can

519
00:23:44,970 --> 00:23:51,190
see phone and I'll put it so we lump

520
00:23:49,180 --> 00:23:53,320
them together but if you lump them

521
00:23:51,190 --> 00:23:57,390
together C and C++ would be the highest

522
00:23:53,320 --> 00:23:57,389
category 26%

523
00:23:57,660 --> 00:24:04,570
and then we get Java being really number

524
00:24:02,050 --> 00:24:07,210
two and then interestingly enough

525
00:24:04,570 --> 00:24:09,950
Objective C is number three and

526
00:24:07,210 --> 00:24:12,200
Objective C was nowhere on this chart

527
00:24:09,950 --> 00:24:16,130
five years ago say we know why Objective

528
00:24:12,200 --> 00:24:18,740
C is number three now iOS right so

529
00:24:16,130 --> 00:24:22,460
because a major platform standard and

530
00:24:18,740 --> 00:24:25,010
standardized on this it really grew to

531
00:24:22,460 --> 00:24:27,260
prominence and then we have C sharp

532
00:24:25,010 --> 00:24:29,629
which is actually the only one that's

533
00:24:27,260 --> 00:24:32,390
really trending down so probably isn't

534
00:24:29,630 --> 00:24:34,429
good for Microsoft and dotnet that's

535
00:24:32,390 --> 00:24:36,950
that's going down

536
00:24:34,429 --> 00:24:41,179
PHP staying about the same visual basic

537
00:24:36,950 --> 00:24:43,100
same and you see Python and Ruby on the

538
00:24:41,179 --> 00:24:50,299
rise so we we actually cover all of

539
00:24:43,100 --> 00:24:52,219
these except for pi Python and Perl and

540
00:24:50,299 --> 00:24:54,260
Verico but our Visual Basic and Ruby

541
00:24:52,220 --> 00:24:57,820
support is so new it's only about a year

542
00:24:54,260 --> 00:24:57,820
old that we don't have a good data set

543
00:24:59,980 --> 00:25:05,780
so this is this is what we see so that's

544
00:25:02,690 --> 00:25:08,870
the global sort of index what we see is

545
00:25:05,780 --> 00:25:13,010
for the web apps we see 56% her job

546
00:25:08,870 --> 00:25:15,229
about 28% dotnet 10% PHP 4% ColdFusion

547
00:25:13,010 --> 00:25:17,470
2% seen C++ seven others writing web

548
00:25:15,230 --> 00:25:17,470
apps

549
00:25:18,450 --> 00:25:25,150
find that I didn't write anything in it

550
00:25:20,880 --> 00:25:27,460
and then non webapps job is and fell

551
00:25:25,150 --> 00:25:30,460
number one followed by dotnet but then

552
00:25:27,460 --> 00:25:33,220
we see C and C++ take up here to 29%

553
00:25:30,460 --> 00:25:35,740
so I think if we had an is of the only

554
00:25:33,220 --> 00:25:38,080
data set C and C++ would be by far the

555
00:25:35,740 --> 00:25:39,670
biggest but it's our customer ISM have

556
00:25:38,080 --> 00:25:41,470
is V customers but we have more

557
00:25:39,670 --> 00:25:47,110
enterprise customers enterprise

558
00:25:41,470 --> 00:25:50,470
developers and then on the mobile

559
00:25:47,110 --> 00:25:53,350
platforms they break down 56 percent iOS

560
00:25:50,470 --> 00:25:55,720
34 percent Android and 10 percent

561
00:25:53,350 --> 00:25:58,860
I mean the people are actually still

562
00:25:55,720 --> 00:25:58,860
running apps for blackberry

563
00:26:02,730 --> 00:26:05,300
yep

564
00:26:11,650 --> 00:26:15,660
yes yep

565
00:26:22,680 --> 00:26:31,840
right so so we we so we we ought it

566
00:26:28,480 --> 00:26:35,050
mostly enterprise applications the large

567
00:26:31,840 --> 00:26:36,970
enterprises there's a whole bunch of C

568
00:26:35,050 --> 00:26:38,620
and C++ tadam and that's happening that

569
00:26:36,970 --> 00:26:41,470
we don't get to look at like embedded

570
00:26:38,620 --> 00:26:46,139
systems the huge amount of seen C++

571
00:26:41,470 --> 00:26:49,300
there you know is fees use do a lot of

572
00:26:46,140 --> 00:26:51,160
development in that and probably our is

573
00:26:49,300 --> 00:26:53,200
V dataset is probably around 20 percent

574
00:26:51,160 --> 00:26:55,300
of our data I think the fact that we

575
00:26:53,200 --> 00:27:00,640
don't look at embedded systems and is V

576
00:26:55,300 --> 00:27:02,169
is a smaller part is what's so here's

577
00:27:00,640 --> 00:27:04,450
the vulnerability present profit

578
00:27:02,170 --> 00:27:10,660
prevalence if we just slice all the apps

579
00:27:04,450 --> 00:27:11,980
we looked at with Java and so this is

580
00:27:10,660 --> 00:27:13,570
number of percentage of apps that are

581
00:27:11,980 --> 00:27:16,000
affected by a particular phone ability

582
00:27:13,570 --> 00:27:18,429
so code quality is things that can cause

583
00:27:16,000 --> 00:27:19,900
business logic problems typically using

584
00:27:18,430 --> 00:27:21,430
the wrong operator in a comparison

585
00:27:19,900 --> 00:27:23,680
people like to compare strings to

586
00:27:21,430 --> 00:27:26,110
objects things like that which is which

587
00:27:23,680 --> 00:27:28,180
is not not the right thing to do in Java

588
00:27:26,110 --> 00:27:29,830
I can end up with code quality issues so

589
00:27:28,180 --> 00:27:33,220
it's not surprise that we find that 80%

590
00:27:29,830 --> 00:27:35,110
of application but then some of these

591
00:27:33,220 --> 00:27:37,750
other categories we're finding really

592
00:27:35,110 --> 00:27:40,360
really endemic carriage return line feed

593
00:27:37,750 --> 00:27:43,720
injection cross-site scripting

594
00:27:40,360 --> 00:27:45,040
cryptographic issues these are some of

595
00:27:43,720 --> 00:27:46,930
the things that we find a lot of job out

596
00:27:45,040 --> 00:27:49,149
applications you can see sequel

597
00:27:46,930 --> 00:27:51,490
injection here is 31% with a little bit

598
00:27:49,150 --> 00:27:54,510
below the average by language so Java

599
00:27:51,490 --> 00:27:55,850
might in the range of error

600
00:27:54,510 --> 00:27:59,060
[Music]

601
00:27:55,850 --> 00:28:01,129
but if we find 32% total and job is the

602
00:27:59,060 --> 00:28:02,830
biggest slice

603
00:28:01,130 --> 00:28:05,060
[Music]

604
00:28:02,830 --> 00:28:08,870
so that's percentage of applications

605
00:28:05,060 --> 00:28:10,550
affected then I have data showing this

606
00:28:08,870 --> 00:28:12,409
is probably hard to read this is the

607
00:28:10,550 --> 00:28:14,060
share of total vulnerabilities found how

608
00:28:12,410 --> 00:28:15,800
that's trended over three years so we're

609
00:28:14,060 --> 00:28:17,899
seeing cross-site scripting stay pretty

610
00:28:15,800 --> 00:28:19,399
much the same gadget airline scene

611
00:28:17,900 --> 00:28:21,770
injections stay the same information

612
00:28:19,400 --> 00:28:24,770
leak and stay the same

613
00:28:21,770 --> 00:28:26,210
seeing capsulation stay the same we're

614
00:28:24,770 --> 00:28:28,850
actually seeing directory traversal go

615
00:28:26,210 --> 00:28:32,150
down slightly and cryptographic issues

616
00:28:28,850 --> 00:28:36,199
went down slightly over the three-year

617
00:28:32,150 --> 00:28:37,700
period five two and so I look at that

618
00:28:36,200 --> 00:28:40,640
and say well what why do those trends

619
00:28:37,700 --> 00:28:42,260
happening I think a lot of those could

620
00:28:40,640 --> 00:28:43,910
be education of the development

621
00:28:42,260 --> 00:28:46,190
community they could be educated on you

622
00:28:43,910 --> 00:28:47,870
need to do crypto better I think a lot

623
00:28:46,190 --> 00:28:50,300
of it though is frameworks that people

624
00:28:47,870 --> 00:28:51,979
use so if the new framework comes out

625
00:28:50,300 --> 00:28:54,050
that becomes popular that does crypto

626
00:28:51,980 --> 00:28:55,880
really well or protects people from

627
00:28:54,050 --> 00:29:00,290
doing crypto wrong that's gonna drive

628
00:28:55,880 --> 00:29:02,330
down the crypto error rate and another

629
00:29:00,290 --> 00:29:03,860
analysis I want to do is slice one

630
00:29:02,330 --> 00:29:10,399
language by frameworks and seeing a

631
00:29:03,860 --> 00:29:12,199
frameworks and can help here on this

632
00:29:10,400 --> 00:29:15,110
chart which you probably can't read very

633
00:29:12,200 --> 00:29:17,960
well is the percent improvement from

634
00:29:15,110 --> 00:29:20,500
build one to build two so what this is

635
00:29:17,960 --> 00:29:23,660
telling us is what defects our

636
00:29:20,500 --> 00:29:25,460
development teams determining of the

637
00:29:23,660 --> 00:29:26,870
most important defects for them to fix

638
00:29:25,460 --> 00:29:29,480
that they're getting on first what are

639
00:29:26,870 --> 00:29:32,270
the highest in their priority list

640
00:29:29,480 --> 00:29:34,910
and the ones in blue are the categories

641
00:29:32,270 --> 00:29:38,510
that have the highest vulnerability

642
00:29:34,910 --> 00:29:40,010
distribution and the ones in orange are

643
00:29:38,510 --> 00:29:43,190
the ones that don't arc high and you can

644
00:29:40,010 --> 00:29:44,450
see that the prevalence of it in the

645
00:29:43,190 --> 00:29:46,730
distribution of it on the scene

646
00:29:44,450 --> 00:29:48,850
come into factor because we have a high

647
00:29:46,730 --> 00:29:52,250
prevalence things being fixed so we have

648
00:29:48,850 --> 00:29:55,850
things nothing so the things that are

649
00:29:52,250 --> 00:29:57,350
not being fixed OS command injection at

650
00:29:55,850 --> 00:29:58,850
8 percent so we told them about a whole

651
00:29:57,350 --> 00:30:00,409
bunch of OS command injection issues

652
00:29:58,850 --> 00:30:03,139
they only six eight percent of them

653
00:30:00,410 --> 00:30:05,300
between build one and go to cross-site

654
00:30:03,140 --> 00:30:10,280
scripting they only fixed 14 percent

655
00:30:05,300 --> 00:30:12,770
second time is theta is only fix fifteen

656
00:30:10,280 --> 00:30:15,050
percent insufficient input validation 15

657
00:30:12,770 --> 00:30:16,670
percent sequel injection they only fixed

658
00:30:15,050 --> 00:30:18,080
16 percent of the sequel rejection

659
00:30:16,670 --> 00:30:20,570
issues so we told them a whole set of

660
00:30:18,080 --> 00:30:24,050
them on average they fix sixteen percent

661
00:30:20,570 --> 00:30:25,310
between build one so I don't have a good

662
00:30:24,050 --> 00:30:28,220
explanation for this

663
00:30:25,310 --> 00:30:31,929
only to say like there might be no rhyme

664
00:30:28,220 --> 00:30:34,580
or reason on how developers prioritize

665
00:30:31,930 --> 00:30:36,110
at least in general for Java

666
00:30:34,580 --> 00:30:38,149
applications you'll see for some

667
00:30:36,110 --> 00:30:40,209
languages they actually starts to make

668
00:30:38,150 --> 00:30:40,210
sense

669
00:30:45,920 --> 00:30:52,480
this is I believe this is all job

670
00:30:49,730 --> 00:30:52,480
application

671
00:30:57,010 --> 00:31:02,620
so I have the same data for for.net I

672
00:31:01,299 --> 00:31:04,090
don't want to go through every one of

673
00:31:02,620 --> 00:31:09,100
these because you'll be bored to death

674
00:31:04,090 --> 00:31:10,720
but I can post the slides out there Lisa

675
00:31:09,100 --> 00:31:11,830
say you know things like sequel

676
00:31:10,720 --> 00:31:15,340
injection like you're in the middle of

677
00:31:11,830 --> 00:31:20,470
30 percent about the same maybe a little

678
00:31:15,340 --> 00:31:22,209
bit so just think to compare the top the

679
00:31:20,470 --> 00:31:26,650
top loader abilities across languages

680
00:31:22,210 --> 00:31:28,299
all again code quality is his number one

681
00:31:26,650 --> 00:31:30,940
one of the interesting things though

682
00:31:28,299 --> 00:31:39,400
here is cryptographic issues is higher

683
00:31:30,940 --> 00:31:41,980
with dotnet at 62% 55% for Java that's a

684
00:31:39,400 --> 00:31:44,950
significant difference 62 versus 55 so

685
00:31:41,980 --> 00:31:47,230
there must be some reason the

686
00:31:44,950 --> 00:31:48,820
documentation is not as good maybe done

687
00:31:47,230 --> 00:31:51,309
that developers get better training in

688
00:31:48,820 --> 00:31:55,299
crypto but that seems like a significant

689
00:31:51,309 --> 00:31:56,590
enough difference to have some must be

690
00:31:55,299 --> 00:32:01,030
some reason in the development

691
00:31:56,590 --> 00:32:06,010
environment why that's happening now if

692
00:32:01,030 --> 00:32:08,530
we look at the things that John net

693
00:32:06,010 --> 00:32:10,210
developers fixed first is interesting

694
00:32:08,530 --> 00:32:13,330
the number one thing they fix first and

695
00:32:10,210 --> 00:32:15,220
buffer overflows actually fix 59% of the

696
00:32:13,330 --> 00:32:17,260
buffer overflows now we told them about

697
00:32:15,220 --> 00:32:22,510
if I go back and tell you how many apps

698
00:32:17,260 --> 00:32:24,730
are only 1% so because it's odd that you

699
00:32:22,510 --> 00:32:26,740
have to really use the unsafe code

700
00:32:24,730 --> 00:32:27,600
pragma and write native code to get a

701
00:32:26,740 --> 00:32:31,299
buffer overflow

702
00:32:27,600 --> 00:32:33,370
it's fairly rare so it's a fairly rare

703
00:32:31,299 --> 00:32:36,580
problem but it's interesting to see that

704
00:32:33,370 --> 00:32:38,918
developers took it really seriously it

705
00:32:36,580 --> 00:32:42,520
was rare but they they fix 60% of them

706
00:32:38,919 --> 00:32:44,270
59 percent the first time which you know

707
00:32:42,520 --> 00:32:47,150
which makes sense to me

708
00:32:44,270 --> 00:32:48,650
John net developers also fixed 25% of

709
00:32:47,150 --> 00:32:50,480
the sequel injection vulnerabilities

710
00:32:48,650 --> 00:32:53,360
that we told them about between build 1

711
00:32:50,480 --> 00:32:56,179
and O 2 versus Java developers only fix

712
00:32:53,360 --> 00:32:58,370
16% you know and these are sets of

713
00:32:56,179 --> 00:33:00,410
thousands of applications so this must

714
00:32:58,370 --> 00:33:02,570
be telling us something about the way

715
00:33:00,410 --> 00:33:04,880
Java developers think about fixing

716
00:33:02,570 --> 00:33:06,620
sequel injection versus dotnet and I

717
00:33:04,880 --> 00:33:09,010
don't have a good explanation I can't be

718
00:33:06,620 --> 00:33:09,010
random

719
00:33:10,990 --> 00:33:19,179
so let's go on to PHP so PHP the top

720
00:33:17,559 --> 00:33:20,980
issues cross-site scripting directory

721
00:33:19,179 --> 00:33:22,000
traversal information linking it

722
00:33:20,980 --> 00:33:25,360
actually does a little bit better on

723
00:33:22,000 --> 00:33:27,130
sequel injection and the other languages

724
00:33:25,360 --> 00:33:30,908
which actually kind of surprised me you

725
00:33:27,130 --> 00:33:33,100
can you hear about PHP applications

726
00:33:30,909 --> 00:33:37,690
being you know being so buggy and the

727
00:33:33,100 --> 00:33:40,029
developers are not most experienced in

728
00:33:37,690 --> 00:33:42,929
opera but for things like sequel

729
00:33:40,029 --> 00:33:42,929
injection actually did

730
00:33:48,400 --> 00:33:55,550
securing bug-free PHP so if we look at

731
00:33:53,630 --> 00:34:08,300
sequel injection it's actually it's

732
00:33:55,550 --> 00:34:12,620
falling down here what they fix between

733
00:34:08,300 --> 00:34:15,080
first time and the PHP developers are

734
00:34:12,620 --> 00:34:23,779
all about fixing sequel injection they

735
00:34:15,080 --> 00:34:26,480
fix 54 so there's something about PHP

736
00:34:23,780 --> 00:34:27,740
apps maybe there's more PHP after

737
00:34:26,480 --> 00:34:29,840
running internet-facing

738
00:34:27,739 --> 00:34:32,359
or maybe the PHP developers got the memo

739
00:34:29,840 --> 00:34:34,280
but they they are taking sequel

740
00:34:32,360 --> 00:34:38,600
injection seriously much more so than

741
00:34:34,280 --> 00:34:45,040
the job and maybe it's because more PHP

742
00:34:38,600 --> 00:34:45,040
apps are internet-facing they're doing

743
00:35:26,150 --> 00:35:31,249
perhaps I mean the ease of fixing is

744
00:35:28,549 --> 00:35:33,019
definitely a factor if something is

745
00:35:31,249 --> 00:35:36,529
easier to fix it'll be more likely fixed

746
00:35:33,019 --> 00:35:39,109
between the first iteration so maybe the

747
00:35:36,529 --> 00:35:43,390
Dinan Java apps in general are just more

748
00:35:39,109 --> 00:35:43,390
complex that's hard to fix

749
00:36:04,450 --> 00:36:09,700
so that would require two extra pieces

750
00:36:07,870 --> 00:36:11,620
of data which I'd love to have but

751
00:36:09,700 --> 00:36:13,240
they're really difficult one is I need

752
00:36:11,620 --> 00:36:17,259
to know what developer wrote the defect

753
00:36:13,240 --> 00:36:19,509
which is he really it's not that easy to

754
00:36:17,260 --> 00:36:22,060
do you can do it with new code if you're

755
00:36:19,510 --> 00:36:24,100
in the Czech film system but most apps

756
00:36:22,060 --> 00:36:26,910
have a lot of legacy code in them and so

757
00:36:24,100 --> 00:36:29,020
that's gonna and then you'd have to know

758
00:36:26,910 --> 00:36:32,859
what the developers training or

759
00:36:29,020 --> 00:36:34,210
awareness was so that would be good in

760
00:36:32,860 --> 00:36:36,400
predicting whether training and

761
00:36:34,210 --> 00:36:39,970
awareness actually helps or not I'm not

762
00:36:36,400 --> 00:36:43,390
sure whether training developers

763
00:36:39,970 --> 00:36:48,480
actually makes more secure applications

764
00:36:43,390 --> 00:36:48,480
makes sense but I haven't seen any data

765
00:37:16,240 --> 00:37:18,868
you're

766
00:37:22,440 --> 00:37:27,200
so I cops I kind of did I kind of did

767
00:37:25,050 --> 00:37:27,200
not

768
00:37:29,640 --> 00:37:34,769
so I kind of did that I'm not comparing

769
00:37:31,529 --> 00:37:36,329
any of these languages to C and C++ I'm

770
00:37:34,769 --> 00:37:37,799
keeping that separate because they're

771
00:37:36,329 --> 00:37:42,779
class of vulnerabilities are completely

772
00:37:37,799 --> 00:37:45,239
metric so right so maybe you're

773
00:37:42,779 --> 00:37:48,930
introducing the next slide well we have

774
00:37:45,239 --> 00:37:50,700
to do cold fusion first so cold fusion

775
00:37:48,930 --> 00:37:52,558
is interesting because it seems like

776
00:37:50,700 --> 00:37:54,749
it's really really bad around three

777
00:37:52,559 --> 00:37:56,160
three different issues they just happen

778
00:37:54,749 --> 00:38:01,439
to be cross-site scripting sequel

779
00:37:56,160 --> 00:38:09,450
injection so just interesting that you

780
00:38:01,440 --> 00:38:11,099
know if you look at you have a 95

781
00:38:09,450 --> 00:38:13,558
percent likelihood of finding an app and

782
00:38:11,099 --> 00:38:15,420
ask cross-site scripting 72 percent

783
00:38:13,559 --> 00:38:16,980
likelihood that a sequel injection and

784
00:38:15,420 --> 00:38:19,019
you're gonna get all kinds of help with

785
00:38:16,980 --> 00:38:20,999
attacking it because the 62 percent

786
00:38:19,019 --> 00:38:27,859
chance that it has information leakage

787
00:38:20,999 --> 00:38:27,859
so I can understand why we hear a lot

788
00:38:31,999 --> 00:38:36,499
unfortunately I didn't have the bill to

789
00:38:34,259 --> 00:38:36,499
build

790
00:38:42,770 --> 00:38:46,730
well you can see it's holding steady

791
00:38:45,020 --> 00:38:49,040
with cross-site scripting and sequel

792
00:38:46,730 --> 00:38:57,650
injection information Lincoln seems to

793
00:38:49,040 --> 00:39:01,279
be going up the categories so here's

794
00:38:57,650 --> 00:39:07,580
where I combine them together yeah I

795
00:39:01,280 --> 00:39:08,750
took the top five you know I kind of the

796
00:39:07,580 --> 00:39:14,920
things that we're showing up the most

797
00:39:08,750 --> 00:39:16,940
and at least a few to show how in Java

798
00:39:14,920 --> 00:39:19,430
compared to each other on these five

799
00:39:16,940 --> 00:39:23,390
categories it's really interesting the

800
00:39:19,430 --> 00:39:25,430
PHP the dotnet and the Java are almost

801
00:39:23,390 --> 00:39:27,650
exactly the same when you look across

802
00:39:25,430 --> 00:39:29,868
the sequel injection and cross-site

803
00:39:27,650 --> 00:39:36,920
scripting they're very they're very

804
00:39:29,869 --> 00:39:39,410
similar and it's it's radically

805
00:39:36,920 --> 00:39:41,840
different what just shows you know the

806
00:39:39,410 --> 00:39:43,399
way that these apps are constructed the

807
00:39:41,840 --> 00:39:45,430
way that they're developed is radically

808
00:39:43,400 --> 00:39:45,430
different

809
00:39:49,289 --> 00:40:00,329
on the other hand I think just because

810
00:40:00,660 --> 00:41:05,469
they're not bothering do that well once

811
00:41:04,029 --> 00:41:06,939
you've made that selection we can look

812
00:41:05,469 --> 00:41:09,339
at data like this and you can say hey

813
00:41:06,939 --> 00:41:10,538
I'm building a cold fusion app I'm gonna

814
00:41:09,339 --> 00:41:12,249
really be careful about cross-site

815
00:41:10,539 --> 00:41:13,839
scripting at sequel injection I got to

816
00:41:12,249 --> 00:41:15,759
test that early I can educate my

817
00:41:13,839 --> 00:41:20,099
developers and so you can use it that

818
00:41:15,759 --> 00:41:20,099
way to say sort of what am I inheriting

819
00:41:24,150 --> 00:41:41,519
so this is second language you can see

820
00:41:36,009 --> 00:41:41,519
that seriously

821
00:41:53,540 --> 00:41:59,379
[Music]

822
00:42:50,130 --> 00:42:53,209
[Music]

823
00:43:23,590 --> 00:43:26,719
[Music]

824
00:43:39,880 --> 00:44:03,400
it's way to extinction going away

825
00:44:24,660 --> 00:44:27,759
[Music]

826
00:44:29,170 --> 00:44:34,550
potential backdoor is you have to do a

827
00:44:31,100 --> 00:44:36,580
lot of investigation things like you

828
00:44:34,550 --> 00:44:36,580
know

829
00:44:38,090 --> 00:44:41,219
[Music]

830
00:44:46,900 --> 00:44:50,320
here on the

831
00:44:59,230 --> 00:45:02,329
[Music]

832
00:45:09,750 --> 00:45:12,849
[Music]

833
00:45:51,910 --> 00:46:01,540
and they're you know they're taking a

834
00:45:53,780 --> 00:46:04,640
lot of these things seriously reversal

835
00:46:01,540 --> 00:46:15,380
so I think in general I should have done

836
00:46:04,640 --> 00:46:17,890
something about the compared to some of

837
00:46:15,380 --> 00:46:17,890
the other ones

838
00:46:24,900 --> 00:46:30,460
these categories so we're finding more

839
00:46:27,880 --> 00:46:32,640
defects but they're also taking them

840
00:46:30,460 --> 00:46:32,640
seriously

841
00:46:43,080 --> 00:46:49,560
right so I should I should explain this

842
00:46:46,620 --> 00:46:53,870
and this is this is only first time we

843
00:46:49,560 --> 00:46:53,870
looked at it up first no they looked at

844
00:47:03,390 --> 00:47:06,600
[Music]

845
00:47:06,800 --> 00:47:10,220
we did the same thing

846
00:47:34,670 --> 00:47:42,300
I'm using the proper encryption

847
00:47:37,830 --> 00:47:44,610
algorithms and so this is clearly an

848
00:47:42,300 --> 00:47:52,560
education problem you know these people

849
00:47:44,610 --> 00:47:55,130
have been told you same thing with

850
00:47:52,560 --> 00:47:55,130
objective-c

851
00:48:16,280 --> 00:48:21,700
you can see in iOS management

852
00:48:29,819 --> 00:48:37,979
this is over

853
00:48:39,060 --> 00:48:42,150
[Music]

854
00:49:00,120 --> 00:49:03,210
[Music]

855
00:49:07,600 --> 00:49:10,739
[Music]

856
00:49:49,690 --> 00:49:54,740
what we did I just told you that the

857
00:49:53,390 --> 00:49:58,509
last two or three years of development

858
00:49:54,740 --> 00:49:58,509
is shipping 32%

859
00:50:28,880 --> 00:50:34,190
you know

860
00:50:31,020 --> 00:50:34,190
[Music]

861
00:51:36,090 --> 00:51:41,429
okay then

862
00:51:38,190 --> 00:51:41,429
[Music]

863
00:51:48,670 --> 00:51:51,749
[Music]

864
00:52:26,890 --> 00:52:30,450
that was all I had for slime

865
00:52:47,750 --> 00:52:52,030
John are you a seesaw or you an

866
00:52:49,849 --> 00:52:52,030
application

867
00:52:54,060 --> 00:52:59,730
oh yeah yeah our job right everyone's

868
00:52:56,940 --> 00:53:03,560
frustrated you know we know how to fix

869
00:52:59,730 --> 00:53:03,560
these things what the business

