1
00:00:06,800 --> 00:00:11,930
so thank you for joining me this morning

2
00:00:12,429 --> 00:00:20,720
well testing restful restful web

3
00:00:15,799 --> 00:00:22,820
applications I'll try to both keep it

4
00:00:20,720 --> 00:00:25,869
interactive so let you ask questions in

5
00:00:22,820 --> 00:00:29,059
the middle but do keep the pace of the

6
00:00:25,869 --> 00:00:30,680
presentation so if at one point I tell

7
00:00:29,059 --> 00:00:33,200
you you know we're running out of time

8
00:00:30,680 --> 00:00:35,329
sort of let me go through keep your

9
00:00:33,200 --> 00:00:39,260
questions I'll answer them either at the

10
00:00:35,329 --> 00:00:41,930
end or personally later on so a word

11
00:00:39,260 --> 00:00:44,120
about myself the picture is for the

12
00:00:41,930 --> 00:00:44,900
slides that are online later on you can

13
00:00:44,120 --> 00:00:46,160
see me here

14
00:00:44,900 --> 00:00:50,629
of course the picture would always be

15
00:00:46,160 --> 00:00:52,489
look better than I I I'm sort of a

16
00:00:50,630 --> 00:00:54,230
person that I'd never know what I am i I

17
00:00:52,489 --> 00:00:56,480
do product management today which means

18
00:00:54,230 --> 00:00:59,029
I'm a bit more on a business side but my

19
00:00:56,480 --> 00:01:01,910
heart and soul is research mostly around

20
00:00:59,030 --> 00:01:04,939
application security today I work at HP

21
00:01:01,910 --> 00:01:10,719
arcsight division until the year ago I

22
00:01:04,938 --> 00:01:13,969
ran research at 45 still HP so I'm I

23
00:01:10,719 --> 00:01:15,500
sort of come here my reason to come from

24
00:01:13,969 --> 00:01:19,759
coming here is keeping in touch with

25
00:01:15,500 --> 00:01:23,150
research with the community talking

26
00:01:19,760 --> 00:01:24,620
about community I I'm in or very active

27
00:01:23,150 --> 00:01:27,710
interest but I started is really chapter

28
00:01:24,620 --> 00:01:29,690
I ran a few open source projects they're

29
00:01:27,710 --> 00:01:32,720
all listed here a fun fact about myself

30
00:01:29,690 --> 00:01:38,860
is that the airport closes to where I

31
00:01:32,720 --> 00:01:41,090
live is Damascus I've never been there I

32
00:01:38,860 --> 00:01:43,460
mean you read in the papers what's going

33
00:01:41,090 --> 00:01:44,360
on there so did I read in the papers

34
00:01:43,460 --> 00:01:46,250
what's going on there

35
00:01:44,360 --> 00:01:49,250
I live on the other side of a steel

36
00:01:46,250 --> 00:01:52,130
border in the first world and 40 miles

37
00:01:49,250 --> 00:01:55,610
from me the third world starts and I

38
00:01:52,130 --> 00:01:57,380
Drive to tell him because it's a 80

39
00:01:55,610 --> 00:02:02,119
miles per hour freeway even though it's

40
00:01:57,380 --> 00:02:07,630
a 120 miles drive the second process by

41
00:02:02,119 --> 00:02:07,630
the way would be Beirut so

42
00:02:11,480 --> 00:02:17,310
no no I went out with work I never tried

43
00:02:15,150 --> 00:02:19,320
I write TLV which is our airport I never

44
00:02:17,310 --> 00:02:22,050
tried nearby the fun

45
00:02:19,320 --> 00:02:25,739
okay what about are we going to talk

46
00:02:22,050 --> 00:02:28,260
about it today so we're talking today

47
00:02:25,740 --> 00:02:32,300
restful web services are becoming a

48
00:02:28,260 --> 00:02:37,260
major part of web development and are

49
00:02:32,300 --> 00:02:39,450
very challenging for pen testing and I

50
00:02:37,260 --> 00:02:40,950
broke the presentation in two parts

51
00:02:39,450 --> 00:02:43,530
because I think many people don't know

52
00:02:40,950 --> 00:02:45,450
what web services are and if they know

53
00:02:43,530 --> 00:02:47,430
they know just about what they used is

54
00:02:45,450 --> 00:02:50,190
restful Web Services so I'll try to

55
00:02:47,430 --> 00:02:54,120
portray a picture of what really it is

56
00:02:50,190 --> 00:02:56,850
and what it isn't then I'll discuss us

57
00:02:54,120 --> 00:02:59,280
in a very small number of slides you

58
00:02:56,850 --> 00:03:01,709
know how widely they are used whether

59
00:02:59,280 --> 00:03:04,620
you stuff like that and then I'll get

60
00:03:01,709 --> 00:03:06,870
into pen testing I'll first discuss many

61
00:03:04,620 --> 00:03:10,530
open testing so challenges associated

62
00:03:06,870 --> 00:03:13,440
with is actually getting after restful

63
00:03:10,530 --> 00:03:17,430
web applications and then I'll move into

64
00:03:13,440 --> 00:03:19,579
what I did at 45 time which is trying to

65
00:03:17,430 --> 00:03:22,200
solve essentially the same issues but

66
00:03:19,580 --> 00:03:24,660
from an automated scanner point of view

67
00:03:22,200 --> 00:03:27,000
so this is interesting but it's a bit

68
00:03:24,660 --> 00:03:28,530
more for if you write tools rather than

69
00:03:27,000 --> 00:03:30,989
if you do pen testing yourself but all

70
00:03:28,530 --> 00:03:37,890
for script our way around so might be

71
00:03:30,989 --> 00:03:40,410
useful anyway okay so restful Web

72
00:03:37,890 --> 00:03:43,589
Services so what our web service is to

73
00:03:40,410 --> 00:03:45,600
start with we hear the terms so much

74
00:03:43,590 --> 00:03:48,900
it's worth spending a minute

75
00:03:45,600 --> 00:03:53,190
understanding what it is so we all use

76
00:03:48,900 --> 00:03:56,489
the web daily web service is usually a

77
00:03:53,190 --> 00:03:58,670
term which refers to interpretation

78
00:03:56,489 --> 00:04:01,590
communications so when you want to use

79
00:03:58,670 --> 00:04:05,030
the web technology to connect to

80
00:04:01,590 --> 00:04:07,170
applications so it's not any more

81
00:04:05,030 --> 00:04:09,209
interaction human interaction with the

82
00:04:07,170 --> 00:04:11,609
web with web servers which matters it's

83
00:04:09,209 --> 00:04:14,010
an application to application tracking

84
00:04:11,610 --> 00:04:16,500
which matters one thing to note of

85
00:04:14,010 --> 00:04:18,779
course when I'm using an application to

86
00:04:16,500 --> 00:04:21,298
control my presentation is today the

87
00:04:18,779 --> 00:04:22,048
client is also an application it's sure

88
00:04:21,298 --> 00:04:24,719
to throw

89
00:04:22,048 --> 00:04:27,650
but it's true also to reach real

90
00:04:24,720 --> 00:04:31,259
applications whether it's rich as in

91
00:04:27,650 --> 00:04:32,940
flash technologies or reaches in HTML

92
00:04:31,259 --> 00:04:35,430
moving to html5 essentially the

93
00:04:32,940 --> 00:04:39,629
difference is now so html5 applications

94
00:04:35,430 --> 00:04:41,400
are pretty complex application so those

95
00:04:39,629 --> 00:04:43,919
technologies even though they are

96
00:04:41,400 --> 00:04:46,440
client-side and I used by end-user

97
00:04:43,919 --> 00:04:49,469
are very pickett --iv and use web

98
00:04:46,440 --> 00:04:58,409
services to communicate with the web

99
00:04:49,470 --> 00:04:59,639
server example it's not the most common

100
00:04:58,409 --> 00:05:03,840
anymore I used to say it's the most

101
00:04:59,639 --> 00:05:07,560
common but it's not a flavor of web

102
00:05:03,840 --> 00:05:12,628
services is something called soap thinks

103
00:05:07,560 --> 00:05:14,580
s stands for simple however everything

104
00:05:12,629 --> 00:05:18,870
in these that is just getting a stock

105
00:05:14,580 --> 00:05:21,659
quote so a single stock code so soap is

106
00:05:18,870 --> 00:05:24,330
a very very highly document formalized

107
00:05:21,659 --> 00:05:26,880
way to use web services to interact

108
00:05:24,330 --> 00:05:32,490
between applications it's based on XML

109
00:05:26,880 --> 00:05:38,340
payload and XML results and there's tons

110
00:05:32,490 --> 00:05:39,930
of standards around that and on the

111
00:05:38,340 --> 00:05:43,258
other hand it makes it hard to use also

112
00:05:39,930 --> 00:05:45,479
it's not a very efficient because

113
00:05:43,259 --> 00:05:48,469
there's just a lot of XML there all I

114
00:05:45,479 --> 00:05:51,449
wanted to do here was I sent the IBM

115
00:05:48,469 --> 00:05:53,909
value and on top of that I write all

116
00:05:51,449 --> 00:05:58,259
there just to send essentially one free

117
00:05:53,909 --> 00:06:00,810
letter part meter so suburb web services

118
00:05:58,259 --> 00:06:07,889
are giving way sorry that's previous

119
00:06:00,810 --> 00:06:10,229
enough next application UI not so so

120
00:06:07,889 --> 00:06:12,300
we're web services are pretty common die

121
00:06:10,229 --> 00:06:14,460
usable inside organizations when they

122
00:06:12,300 --> 00:06:18,419
try to do their sort of messaging buzz

123
00:06:14,460 --> 00:06:20,460
between internal applications but

124
00:06:18,419 --> 00:06:23,039
they're hard to use one thing worth

125
00:06:20,460 --> 00:06:26,279
mentioning I won't go into details here

126
00:06:23,039 --> 00:06:29,490
is that they are considered by the

127
00:06:26,279 --> 00:06:31,860
industry as secure there's a tons of

128
00:06:29,490 --> 00:06:34,199
security standardization around them

129
00:06:31,860 --> 00:06:36,719
something usually called WS star because

130
00:06:34,199 --> 00:06:40,569
it stands for number of WS

131
00:06:36,719 --> 00:06:43,539
web-services standard around single

132
00:06:40,569 --> 00:06:46,000
sign-on and session management and

133
00:06:43,539 --> 00:06:49,860
authentication authorization and now to

134
00:06:46,000 --> 00:06:52,360
sign the traffic and all that stuff

135
00:06:49,860 --> 00:06:54,699
there is a good argument left to a

136
00:06:52,360 --> 00:06:57,430
different presentation that this does

137
00:06:54,699 --> 00:07:00,849
not really bring a lot of security to

138
00:06:57,430 --> 00:07:02,199
software services it's sort of it never

139
00:07:00,849 --> 00:07:04,479
gets to ask you an injection of course

140
00:07:02,199 --> 00:07:07,680
which can go through that just as it can

141
00:07:04,479 --> 00:07:13,360
go for any other input mechanism and

142
00:07:07,680 --> 00:07:19,810
it's so complex it's so complex that

143
00:07:13,360 --> 00:07:22,529
people are just not using that so off we

144
00:07:19,810 --> 00:07:26,039
go with soap here we go with rest so

145
00:07:22,529 --> 00:07:32,050
rest is an interesting concept because

146
00:07:26,039 --> 00:07:35,139
essentially restful is a design pattern

147
00:07:32,050 --> 00:07:36,310
it's a way to look at things when we get

148
00:07:35,139 --> 00:07:38,319
in the next slide to restful Web

149
00:07:36,310 --> 00:07:41,469
Services will try to understand what it

150
00:07:38,319 --> 00:07:42,610
means to the same use case of connecting

151
00:07:41,469 --> 00:07:45,219
applications to each other

152
00:07:42,610 --> 00:07:48,879
however restful design is essentially a

153
00:07:45,219 --> 00:07:52,389
design pattern is a philosophy of how to

154
00:07:48,879 --> 00:07:55,930
do things right around essentially the

155
00:07:52,389 --> 00:07:58,449
api's and essentially the restful design

156
00:07:55,930 --> 00:08:01,870
pattern is the basic building block or

157
00:07:58,449 --> 00:08:03,849
design pattern for the most pervasive

158
00:08:01,870 --> 00:08:08,159
technology out there which is just the

159
00:08:03,849 --> 00:08:10,839
web so web one so to speak is a restful

160
00:08:08,159 --> 00:08:12,339
implementation it's not a web service

161
00:08:10,839 --> 00:08:14,169
because it's not for interacting between

162
00:08:12,339 --> 00:08:17,319
two applications it's usually used for

163
00:08:14,169 --> 00:08:19,990
interacting between a user and an

164
00:08:17,319 --> 00:08:23,770
application now I won't go into details

165
00:08:19,990 --> 00:08:25,509
here they'll be very boring that's why I

166
00:08:23,770 --> 00:08:29,169
sort of I don't want you to look like

167
00:08:25,509 --> 00:08:31,539
the guys behind the slider but if you

168
00:08:29,169 --> 00:08:36,939
think about what you do in the web

169
00:08:31,539 --> 00:08:39,399
that's essentially our rest it's using

170
00:08:36,940 --> 00:08:42,370
URLs to access the functionality you are

171
00:08:39,399 --> 00:08:44,020
looking for its stateless no session

172
00:08:42,370 --> 00:08:46,690
which is one of the most horrible things

173
00:08:44,020 --> 00:08:48,160
about the web security wise but it's

174
00:08:46,690 --> 00:08:50,340
still part of the design problem because

175
00:08:48,160 --> 00:08:54,540
it makes everything much more simple

176
00:08:50,340 --> 00:08:57,250
and it's supposed to be uniform some way

177
00:08:54,540 --> 00:09:01,089
let's get into details which will be

178
00:08:57,250 --> 00:09:03,700
much more sort of easy to understand as

179
00:09:01,090 --> 00:09:05,820
to how this design pattern is actually

180
00:09:03,700 --> 00:09:11,100
used for interacting between

181
00:09:05,820 --> 00:09:11,100
applications so for restful Web Services

182
00:09:11,700 --> 00:09:18,670
so one thing that I need to mention is

183
00:09:16,630 --> 00:09:21,610
that restful Web Services are not a

184
00:09:18,670 --> 00:09:24,370
well-defined protocol there's unlike

185
00:09:21,610 --> 00:09:28,390
soap which is highly defined restful Web

186
00:09:24,370 --> 00:09:31,150
Services are different ways to use the

187
00:09:28,390 --> 00:09:33,160
design pattern that's called rest in

188
00:09:31,150 --> 00:09:35,290
order to do interrupt occasion

189
00:09:33,160 --> 00:09:37,240
communication so I can't really share

190
00:09:35,290 --> 00:09:39,699
with you the spec for restful Web

191
00:09:37,240 --> 00:09:41,830
Services what I can share with you is

192
00:09:39,700 --> 00:09:45,130
common practices for restful Web

193
00:09:41,830 --> 00:09:47,020
Services of course this makes it quite a

194
00:09:45,130 --> 00:09:49,090
challenge to test them because you don't

195
00:09:47,020 --> 00:09:52,710
even know they're there and we'll touch

196
00:09:49,090 --> 00:09:58,600
about on that in the following slides so

197
00:09:52,710 --> 00:10:00,730
essentially the simplest restful web

198
00:09:58,600 --> 00:10:03,010
service you can have is taking

199
00:10:00,730 --> 00:10:07,060
everything in this soap message and

200
00:10:03,010 --> 00:10:10,270
putting it in a URL so apart from

201
00:10:07,060 --> 00:10:11,829
changing IBM to HP which depending on

202
00:10:10,270 --> 00:10:17,520
the day is not a good idea if you own

203
00:10:11,830 --> 00:10:20,580
stocks you do save on character though

204
00:10:17,520 --> 00:10:23,230
you can see that this is a much simpler

205
00:10:20,580 --> 00:10:25,540
method for doing essentially the same

206
00:10:23,230 --> 00:10:27,310
thing and that's why it's very

207
00:10:25,540 --> 00:10:32,140
compelling that's why it's used a lot in

208
00:10:27,310 --> 00:10:34,449
mobile applications in in web 2

209
00:10:32,140 --> 00:10:36,819
applications it's just so much simpler I

210
00:10:34,450 --> 00:10:38,160
mean think about programmers they want

211
00:10:36,820 --> 00:10:41,110
this they don't want that

212
00:10:38,160 --> 00:10:43,300
however dart applications not all the

213
00:10:41,110 --> 00:10:45,670
information is as easily sent and we'll

214
00:10:43,300 --> 00:10:51,189
see it about both security pen testing

215
00:10:45,670 --> 00:10:55,060
in future so a few sort of con practices

216
00:10:51,190 --> 00:10:58,270
one thing which falls very very directly

217
00:10:55,060 --> 00:11:01,030
on the design pattern is using methods

218
00:10:58,270 --> 00:11:02,189
to determine the actual action you would

219
00:11:01,030 --> 00:11:06,029
want

220
00:11:02,190 --> 00:11:08,519
with regard to the URI so the or I

221
00:11:06,029 --> 00:11:10,980
specify sort of the resource you want to

222
00:11:08,519 --> 00:11:14,339
access the metal specify what you want

223
00:11:10,980 --> 00:11:17,129
to do with the resource a very commonly

224
00:11:14,339 --> 00:11:19,470
used term is crude which stands for CR

225
00:11:17,129 --> 00:11:21,889
UD create read update and delete which

226
00:11:19,470 --> 00:11:26,250
are for functions you want to do over

227
00:11:21,889 --> 00:11:27,899
essentially object so those translate is

228
00:11:26,250 --> 00:11:31,680
very well into file management and

229
00:11:27,899 --> 00:11:33,600
you'll see rest used very widely around

230
00:11:31,680 --> 00:11:38,969
anything that has to do with closing

231
00:11:33,600 --> 00:11:41,550
files so Amazon Web Services box.net all

232
00:11:38,970 --> 00:11:43,709
of them Dropbox all the views are

233
00:11:41,550 --> 00:11:46,439
restful Web Services that are very very

234
00:11:43,709 --> 00:11:49,290
focused on the crude design pattern

235
00:11:46,439 --> 00:11:52,170
providing access to their to the file

236
00:11:49,290 --> 00:11:56,189
system from the road however a lot of

237
00:11:52,170 --> 00:12:00,628
you want to do is a file access and many

238
00:11:56,189 --> 00:12:03,810
times delete for example is not

239
00:12:00,629 --> 00:12:06,740
meaningful there are other sort of

240
00:12:03,810 --> 00:12:10,099
practices that are used a lot around

241
00:12:06,740 --> 00:12:12,779
restful web services and one of them is

242
00:12:10,100 --> 00:12:14,970
where do I put the parameters so there's

243
00:12:12,779 --> 00:12:17,449
no standard around that that's probably

244
00:12:14,970 --> 00:12:19,579
the matter of the major pain point of

245
00:12:17,449 --> 00:12:22,229
understanding restful Web Services

246
00:12:19,579 --> 00:12:24,239
dealing with them quality wise and

247
00:12:22,230 --> 00:12:27,810
security wise you'll find that

248
00:12:24,240 --> 00:12:29,730
parameters are passed in many different

249
00:12:27,810 --> 00:12:31,319
ways so we've seen the example where

250
00:12:29,730 --> 00:12:34,529
parameters part of your L this is a

251
00:12:31,319 --> 00:12:37,500
pretty common one many times it's

252
00:12:34,529 --> 00:12:40,050
implemented in practice in web server by

253
00:12:37,500 --> 00:12:42,089
something called URL rewrite which means

254
00:12:40,050 --> 00:12:45,750
that the error looks to you like it's a

255
00:12:42,089 --> 00:12:48,209
file but essentially it actually is a

256
00:12:45,750 --> 00:12:50,370
set of parameters and Apache has all

257
00:12:48,209 --> 00:12:52,290
actually is as well these days every

258
00:12:50,370 --> 00:12:53,880
role model around actually actually take

259
00:12:52,290 --> 00:12:58,709
it before application gets it and

260
00:12:53,880 --> 00:13:00,319
translate it into normal parameters but

261
00:12:58,709 --> 00:13:04,399
it doesn't stop there

262
00:13:00,319 --> 00:13:07,378
headers are used a lot for as parameters

263
00:13:04,399 --> 00:13:09,540
so now the headers are also part meters

264
00:13:07,379 --> 00:13:12,149
and that leads us into pen testing

265
00:13:09,540 --> 00:13:14,870
because most of us will pass parameters

266
00:13:12,149 --> 00:13:17,750
if they look like request parameters or

267
00:13:14,870 --> 00:13:19,339
parameters but we rarely fuzz heather's

268
00:13:17,750 --> 00:13:21,020
I mean we read a lot didn't research

269
00:13:19,339 --> 00:13:22,580
about your abilities in headers but in

270
00:13:21,020 --> 00:13:25,220
practice that's not where we'll go first

271
00:13:22,580 --> 00:13:26,930
to search for a screen injection but

272
00:13:25,220 --> 00:13:32,089
those are just regular prot meters so

273
00:13:26,930 --> 00:13:35,870
why not another thing we want to look

274
00:13:32,089 --> 00:13:39,620
into our composite power meters so a lot

275
00:13:35,870 --> 00:13:42,529
of times usually Jason at times XML is

276
00:13:39,620 --> 00:13:45,560
used as a container for power meters in

277
00:13:42,529 --> 00:13:48,650
in restful Web Services of course XML

278
00:13:45,560 --> 00:13:50,959
getting asked back to the soap era just

279
00:13:48,650 --> 00:13:54,850
without the complexity and an overall

280
00:13:50,960 --> 00:13:58,760
structure Jason be much more sort of

281
00:13:54,850 --> 00:14:02,230
shorter and therefore loved by

282
00:13:58,760 --> 00:14:04,670
programmers the issue there is that now

283
00:14:02,230 --> 00:14:07,130
when the application gets it it treats

284
00:14:04,670 --> 00:14:09,709
each of the values separately so just

285
00:14:07,130 --> 00:14:12,200
injecting injecting the JSON itself

286
00:14:09,710 --> 00:14:14,990
would usually break the first minute

287
00:14:12,200 --> 00:14:15,589
because the json parser would just throw

288
00:14:14,990 --> 00:14:18,320
it away

289
00:14:15,589 --> 00:14:21,709
however if you inject and of the part or

290
00:14:18,320 --> 00:14:23,150
any of them better parameters the risk

291
00:14:21,709 --> 00:14:33,770
for vulnerability is to do very much

292
00:14:23,150 --> 00:14:40,339
there okay keep in mind that the result

293
00:14:33,770 --> 00:14:42,350
might also be a JSON payload the only

294
00:14:40,339 --> 00:14:48,320
thing I've seen around that which is

295
00:14:42,350 --> 00:14:52,240
security related is that in many cases

296
00:14:48,320 --> 00:14:54,650
Jason is Jason's actual JavaScript so

297
00:14:52,240 --> 00:14:57,470
this is just directly executed by the

298
00:14:54,650 --> 00:14:59,779
application to derived values and if

299
00:14:57,470 --> 00:15:03,170
it's not valid J's if it's not very data

300
00:14:59,779 --> 00:15:06,920
but valid JavaScript it might be run as

301
00:15:03,170 --> 00:15:08,300
code very own application which opens an

302
00:15:06,920 --> 00:15:14,270
opportunity for different types of

303
00:15:08,300 --> 00:15:17,060
cross-site scripting attacks lastly I

304
00:15:14,270 --> 00:15:20,600
think that there is a challenge which is

305
00:15:17,060 --> 00:15:23,109
always a challenge for web applications

306
00:15:20,600 --> 00:15:26,450
which is the relation session management

307
00:15:23,110 --> 00:15:28,460
there is no common way in the a web

308
00:15:26,450 --> 00:15:31,580
world to actually do that

309
00:15:28,460 --> 00:15:34,100
which by the way is major challenge for

310
00:15:31,580 --> 00:15:35,840
pentesting always it's a huge challenge

311
00:15:34,100 --> 00:15:39,310
for ultimate pentesting any of you

312
00:15:35,840 --> 00:15:43,150
you've tried anyone here using is using

313
00:15:39,310 --> 00:15:45,189
scanner I'll grab the kitchen scanner

314
00:15:43,150 --> 00:15:49,220
which one

315
00:15:45,190 --> 00:15:50,750
burp same any commercial one and burpees

316
00:15:49,220 --> 00:15:54,650
commercial actually with any commercial

317
00:15:50,750 --> 00:15:59,390
one apps can reming's back so many apps

318
00:15:54,650 --> 00:16:02,329
can okay so in all those and actually

319
00:15:59,390 --> 00:16:04,939
the way you can tell amateur we

320
00:16:02,330 --> 00:16:07,960
replicating scanner from just a an early

321
00:16:04,940 --> 00:16:12,200
stage one is how it does it handle login

322
00:16:07,960 --> 00:16:15,230
how do you go over the log interface and

323
00:16:12,200 --> 00:16:18,260
steal and scan all the activity that

324
00:16:15,230 --> 00:16:20,360
exists after logging because there is no

325
00:16:18,260 --> 00:16:26,830
standard way to do that it might be a

326
00:16:20,360 --> 00:16:29,840
complex application oriented process

327
00:16:26,830 --> 00:16:35,840
just think about the CAPTCHA and the

328
00:16:29,840 --> 00:16:38,330
scanner makes it hard so just like with

329
00:16:35,840 --> 00:16:42,980
interactive web usage restful web

330
00:16:38,330 --> 00:16:46,130
services are very very not standard

331
00:16:42,980 --> 00:16:48,740
around how they handle also education

332
00:16:46,130 --> 00:16:51,820
and session management few common

333
00:16:48,740 --> 00:16:54,290
practices to be aware of or the

334
00:16:51,820 --> 00:16:58,700
authentication is many times done using

335
00:16:54,290 --> 00:17:00,349
basic HTTP authentication so essentially

336
00:16:58,700 --> 00:17:04,640
it's sending a username and password in

337
00:17:00,350 --> 00:17:07,130
the header therefore many times HTTP it

338
00:17:04,640 --> 00:17:08,930
sorry restful web services rely on SSL

339
00:17:07,130 --> 00:17:11,240
for security because the only thing that

340
00:17:08,930 --> 00:17:13,190
actually protects these those

341
00:17:11,240 --> 00:17:16,579
credentials is as a cell you know many

342
00:17:13,190 --> 00:17:18,440
times find that restful web services

343
00:17:16,579 --> 00:17:23,839
security is nearly equated with SSL for

344
00:17:18,440 --> 00:17:26,600
that reason as we all know as a cell has

345
00:17:23,839 --> 00:17:27,889
its limitations not because I am afraid

346
00:17:26,599 --> 00:17:32,540
of somebody breaking into a server

347
00:17:27,890 --> 00:17:34,220
because of gateways proxies just bet

348
00:17:32,540 --> 00:17:36,139
implementation that leaves some of the

349
00:17:34,220 --> 00:17:39,220
site out of their cell range and some

350
00:17:36,140 --> 00:17:39,220
within the cell range

351
00:17:39,370 --> 00:17:44,370
the next phase

352
00:17:41,310 --> 00:17:48,929
how do we do in session management in

353
00:17:44,370 --> 00:17:51,179
most cases this nearly most restful api

354
00:17:48,930 --> 00:17:55,440
s would provide you with some kind of

355
00:17:51,180 --> 00:17:57,660
token that so you send your credentials

356
00:17:55,440 --> 00:18:00,120
get a token back it has a lifetime in

357
00:17:57,660 --> 00:18:02,640
essence this is an alternative to

358
00:18:00,120 --> 00:18:04,620
cookies it just a managed eternity

359
00:18:02,640 --> 00:18:06,150
cookie so it's not sorting because it's

360
00:18:04,620 --> 00:18:07,889
an application calling running the

361
00:18:06,150 --> 00:18:10,310
browser there's no need to use the

362
00:18:07,890 --> 00:18:12,570
cookies mechanism which is sort of a

363
00:18:10,310 --> 00:18:14,970
token automatically maintained by the

364
00:18:12,570 --> 00:18:17,820
browser for the user an application can

365
00:18:14,970 --> 00:18:19,800
receive the token and no word to use it

366
00:18:17,820 --> 00:18:21,389
so actually it's more secure than

367
00:18:19,800 --> 00:18:22,980
cookies because it's under the control

368
00:18:21,390 --> 00:18:25,890
of the application but it's not that

369
00:18:22,980 --> 00:18:29,160
different and it might have many of the

370
00:18:25,890 --> 00:18:32,970
challenges you are aware of with cookies

371
00:18:29,160 --> 00:18:35,340
I mean you could steal those tokens just

372
00:18:32,970 --> 00:18:39,480
the same an interesting point to note is

373
00:18:35,340 --> 00:18:42,540
that the design pattern itself due to

374
00:18:39,480 --> 00:18:48,030
purity reasons calls for including the

375
00:18:42,540 --> 00:18:51,570
session ID in the URL not in a million

376
00:18:48,030 --> 00:18:54,240
header some implementations do that it's

377
00:18:51,570 --> 00:18:58,439
very insecure because URLs are often

378
00:18:54,240 --> 00:19:02,660
logged that are easier to steal a most

379
00:18:58,440 --> 00:19:07,440
more major mature implementations of

380
00:19:02,660 --> 00:19:12,000
restful api would have this token in and

381
00:19:07,440 --> 00:19:14,090
header nearly 100% actually these days

382
00:19:12,000 --> 00:19:16,550
another thing to keep in mind is that

383
00:19:14,090 --> 00:19:20,159
since it's an application to application

384
00:19:16,550 --> 00:19:22,800
interface there's a major s is so aspect

385
00:19:20,160 --> 00:19:25,980
to it that's so being single sign-on so

386
00:19:22,800 --> 00:19:30,030
I have a client application it's got a

387
00:19:25,980 --> 00:19:33,270
token from a specific service when you

388
00:19:30,030 --> 00:19:36,000
start to build your entire sort of

389
00:19:33,270 --> 00:19:38,400
infrastructure education likewise you

390
00:19:36,000 --> 00:19:40,290
want this token to be valid also on a

391
00:19:38,400 --> 00:19:45,210
different service that's associated with

392
00:19:40,290 --> 00:19:46,889
it and this is very challenging there is

393
00:19:45,210 --> 00:19:49,530
no standard around that usually to

394
00:19:46,890 --> 00:19:51,330
evolve some back-end communication that

395
00:19:49,530 --> 00:19:54,030
the first server would tell the second

396
00:19:51,330 --> 00:19:54,590
server this is an OK token but I've seen

397
00:19:54,030 --> 00:19:58,190
areas

398
00:19:54,590 --> 00:20:00,770
sort of the client gets to get the

399
00:19:58,190 --> 00:20:02,419
information that allows you to get to

400
00:20:00,770 --> 00:20:03,889
the second server it might be well

401
00:20:02,419 --> 00:20:12,770
encrypted that's not a bad design

402
00:20:03,890 --> 00:20:14,950
pattern it might be our weakness now one

403
00:20:12,770 --> 00:20:17,029
last aspect I want to discuss about

404
00:20:14,950 --> 00:20:20,200
restful Web Services is their

405
00:20:17,029 --> 00:20:24,500
documentation restful Web Services so

406
00:20:20,200 --> 00:20:25,970
software's web services are often nearly

407
00:20:24,500 --> 00:20:30,230
universally actually described as

408
00:20:25,970 --> 00:20:32,809
something called a wisdom WSDL which is

409
00:20:30,230 --> 00:20:35,330
web services description language so and

410
00:20:32,809 --> 00:20:40,250
since it's very highly structured it's

411
00:20:35,330 --> 00:20:45,980
easy to define in a very OB fancy

412
00:20:40,250 --> 00:20:47,809
numbers in a very formal way with with

413
00:20:45,980 --> 00:20:49,760
restful web services since there's so

414
00:20:47,809 --> 00:20:53,200
many variants essentially no standard

415
00:20:49,760 --> 00:20:56,419
and the parameter can be in one of

416
00:20:53,200 --> 00:20:59,659
dozens of different ways it's hard to

417
00:20:56,419 --> 00:21:01,669
define there is something called waddle

418
00:20:59,659 --> 00:21:05,720
web application description language

419
00:21:01,669 --> 00:21:09,529
which is an attempt actually technically

420
00:21:05,720 --> 00:21:11,990
it can describe any variant of restful

421
00:21:09,529 --> 00:21:14,840
web services I've seen today it's not a

422
00:21:11,990 --> 00:21:17,059
standard it's just a proposal and it's

423
00:21:14,840 --> 00:21:20,418
not widely used the numbers you can see

424
00:21:17,059 --> 00:21:22,370
here are my Google searches for both for

425
00:21:20,419 --> 00:21:25,130
actually files available on the internet

426
00:21:22,370 --> 00:21:28,908
which have wisdom files or Waddle files

427
00:21:25,130 --> 00:21:31,789
and this is around I know two hundred

428
00:21:28,909 --> 00:21:35,299
thousand which by the way is a security

429
00:21:31,789 --> 00:21:37,039
issue if you think about it I mean we

430
00:21:35,299 --> 00:21:40,370
still exposed sometimes intentionally

431
00:21:37,039 --> 00:21:43,220
attacks is not intentional and for

432
00:21:40,370 --> 00:21:46,370
bridled around two thousand so one

433
00:21:43,220 --> 00:21:47,870
percent of those and my guess is that

434
00:21:46,370 --> 00:21:49,639
it's not because when you write the rest

435
00:21:47,870 --> 00:21:52,729
web service you know your security and

436
00:21:49,640 --> 00:21:55,130
you put the waddle out there it's just

437
00:21:52,730 --> 00:21:55,850
that it's not widely used and we will

438
00:21:55,130 --> 00:21:57,649
see you later

439
00:21:55,850 --> 00:21:59,600
it doesn't imply that restful web

440
00:21:57,649 --> 00:22:03,408
services are less widely used it just

441
00:21:59,600 --> 00:22:05,629
implies they're less well documented and

442
00:22:03,409 --> 00:22:08,360
that's a big challenge when we go to

443
00:22:05,630 --> 00:22:10,730
test something we need to know

444
00:22:08,360 --> 00:22:13,250
as much as we can about it and we'll see

445
00:22:10,730 --> 00:22:16,340
that even though normal applications are

446
00:22:13,250 --> 00:22:19,910
not documented well we have our ways to

447
00:22:16,340 --> 00:22:22,760
find the attack surface for Web Services

448
00:22:19,910 --> 00:22:24,530
there really isn't way to do the partial

449
00:22:22,760 --> 00:22:25,820
documentation and if there's no

450
00:22:24,530 --> 00:22:28,010
documentation we have a big big

451
00:22:25,820 --> 00:22:32,860
challenge okay

452
00:22:28,010 --> 00:22:35,480
so that was sort of an a prime primer to

453
00:22:32,860 --> 00:22:37,219
restful Web Services I hope you get out

454
00:22:35,480 --> 00:22:39,830
of here knowing a bit more about restful

455
00:22:37,220 --> 00:22:41,360
Web Services sort of getting it from a

456
00:22:39,830 --> 00:22:44,059
buzzword level to something which is

457
00:22:41,360 --> 00:22:47,360
tangible but the bottom line is that

458
00:22:44,059 --> 00:22:51,168
it's the web as you know it apply to be

459
00:22:47,360 --> 00:22:53,209
inter-app location communication so a

460
00:22:51,169 --> 00:22:55,940
few slides about work can you find in

461
00:22:53,210 --> 00:22:58,730
the world so I promised another Google

462
00:22:55,940 --> 00:23:00,169
search on the technologies so I needed

463
00:22:58,730 --> 00:23:02,030
the Google search on restful web

464
00:23:00,169 --> 00:23:05,270
services and software services and you

465
00:23:02,030 --> 00:23:07,760
see that soap is declining crust is on

466
00:23:05,270 --> 00:23:10,790
the rise and actually since I was

467
00:23:07,760 --> 00:23:13,910
stopped at Barcelona about this subject

468
00:23:10,790 --> 00:23:15,830
and I did update the slide we were even

469
00:23:13,910 --> 00:23:17,030
and now we see the Tres restful web

470
00:23:15,830 --> 00:23:21,080
services are actually gaining momentum

471
00:23:17,030 --> 00:23:23,960
over so probe services everybody is

472
00:23:21,080 --> 00:23:25,870
using that I did not update this like I

473
00:23:23,960 --> 00:23:31,720
didn't go out and look for additional

474
00:23:25,870 --> 00:23:37,399
logos to put here essentially every a

475
00:23:31,720 --> 00:23:39,799
major web site aggregator whatever you

476
00:23:37,400 --> 00:23:41,720
call it that expose an API today does it

477
00:23:39,799 --> 00:23:45,710
using restful web services it's becoming

478
00:23:41,720 --> 00:23:47,630
very common so it's sort of the factor

479
00:23:45,710 --> 00:23:49,549
that's the way things are done that's

480
00:23:47,630 --> 00:23:52,100
good that way one thing to keep in mind

481
00:23:49,549 --> 00:23:54,379
is that you will find especially in the

482
00:23:52,100 --> 00:23:56,178
mobile application world all restful web

483
00:23:54,380 --> 00:23:58,429
services that their program are never

484
00:23:56,179 --> 00:24:00,080
knew the name so the implement is

485
00:23:58,429 --> 00:24:03,650
something that's restful web services

486
00:24:00,080 --> 00:24:08,750
but they didn't call it this way it does

487
00:24:03,650 --> 00:24:11,690
exhibit a lot of the characteristics

488
00:24:08,750 --> 00:24:15,830
that we've seen before but it usually

489
00:24:11,690 --> 00:24:19,010
has a lot less security because if we

490
00:24:15,830 --> 00:24:21,710
talk I talked about having a header as

491
00:24:19,010 --> 00:24:25,029
the token used for session management

492
00:24:21,710 --> 00:24:27,559
if you write the RESTful API

493
00:24:25,029 --> 00:24:29,570
intentionally you work it out if it's

494
00:24:27,559 --> 00:24:31,668
just an app doing an API for itself

495
00:24:29,570 --> 00:24:36,500
there are many cases where it's not done

496
00:24:31,669 --> 00:24:38,570
the correct way so two slides about the

497
00:24:36,500 --> 00:24:42,110
security of restful web services because

498
00:24:38,570 --> 00:24:43,639
I said quite a bit about that but and I

499
00:24:42,110 --> 00:24:45,770
think that the security itself is no

500
00:24:43,640 --> 00:24:47,750
different it's the the testing which is

501
00:24:45,770 --> 00:24:50,720
different which is get to in the phones

502
00:24:47,750 --> 00:24:52,909
like so first of all rest is just the

503
00:24:50,720 --> 00:24:56,200
web so if you know rest security and if

504
00:24:52,909 --> 00:24:58,580
you are old and wisest this guy you know

505
00:24:56,200 --> 00:25:00,140
restful web security and a lot of things

506
00:24:58,580 --> 00:25:01,520
that you already know are there I mean

507
00:25:00,140 --> 00:25:06,919
it's a way to provide far Minister

508
00:25:01,520 --> 00:25:09,230
application and the same attacks work I

509
00:25:06,919 --> 00:25:11,200
don't think there's any major change me

510
00:25:09,230 --> 00:25:15,830
in the next I'll show a bit of sort of

511
00:25:11,200 --> 00:25:18,289
things to keep in mind one thing to keep

512
00:25:15,830 --> 00:25:22,029
in mind is that that there is a notion

513
00:25:18,289 --> 00:25:25,580
of security by obscurity that does not

514
00:25:22,029 --> 00:25:29,000
happen on web applications nobody really

515
00:25:25,580 --> 00:25:31,850
sees this this API because it's been to

516
00:25:29,000 --> 00:25:33,049
applications and therefore we test it

517
00:25:31,850 --> 00:25:38,480
class which is what we will talk about

518
00:25:33,049 --> 00:25:40,639
today and the programmers tend to give

519
00:25:38,480 --> 00:25:42,679
less you know those programmers that we

520
00:25:40,640 --> 00:25:44,600
all only protect and check

521
00:25:42,679 --> 00:25:46,130
well the login page because of the

522
00:25:44,600 --> 00:25:48,709
famous SQL injection around or one

523
00:25:46,130 --> 00:25:53,570
equals one so they will do nothing

524
00:25:48,710 --> 00:25:58,760
around restful web services few things

525
00:25:53,570 --> 00:26:01,250
to do keep in mind would be that there's

526
00:25:58,760 --> 00:26:04,640
no standard mechanism to do security and

527
00:26:01,250 --> 00:26:06,799
therefore I'm talking about penetration

528
00:26:04,640 --> 00:26:08,990
testing I do believe that you need to

529
00:26:06,799 --> 00:26:12,710
start and the rest test with an

530
00:26:08,990 --> 00:26:13,789
architecture overview there's a lot of

531
00:26:12,710 --> 00:26:15,679
four key issues there they have to build

532
00:26:13,789 --> 00:26:19,429
there is no standard you can't just

533
00:26:15,679 --> 00:26:21,590
expect you know login cookies as you

534
00:26:19,429 --> 00:26:23,330
would in a web application or W a star

535
00:26:21,590 --> 00:26:25,158
as you would expect in where in so for

536
00:26:23,330 --> 00:26:27,949
services worth looking rather people

537
00:26:25,159 --> 00:26:30,169
have done there it's sort of a black and

538
00:26:27,950 --> 00:26:33,260
white picture usually if somebody gave

539
00:26:30,169 --> 00:26:34,850
any thought to that it would be okay if

540
00:26:33,260 --> 00:26:38,420
not I hope you got earlier

541
00:26:34,850 --> 00:26:41,360
because I was it would go live without

542
00:26:38,420 --> 00:26:43,460
your without changing because it's hard

543
00:26:41,360 --> 00:26:44,810
to change architecture I measure

544
00:26:43,460 --> 00:26:49,040
proprietor of the education session

545
00:26:44,810 --> 00:26:51,560
management and lastly some smaller

546
00:26:49,040 --> 00:26:54,080
issues I mentioned that people usually

547
00:26:51,560 --> 00:26:59,899
say I have ssmi restful web services are

548
00:26:54,080 --> 00:27:02,480
ok the reason for that is because you

549
00:26:59,900 --> 00:27:05,210
need to protect the attend occasion key

550
00:27:02,480 --> 00:27:07,580
for sure and the username password if

551
00:27:05,210 --> 00:27:09,650
it's basic HTTP authentication it's

552
00:27:07,580 --> 00:27:13,040
certainly not enough but people will

553
00:27:09,650 --> 00:27:16,760
tell you that everything else are

554
00:27:13,040 --> 00:27:18,290
probably covered ok a bit of a long

555
00:27:16,760 --> 00:27:20,150
introduction but I think it's important

556
00:27:18,290 --> 00:27:22,520
because it's nearly half of the

557
00:27:20,150 --> 00:27:24,260
presentation or because restful web

558
00:27:22,520 --> 00:27:29,410
services are not well understood

559
00:27:24,260 --> 00:27:33,650
let's get into actual pen testing ok

560
00:27:29,410 --> 00:27:35,900
so I'll mention three or four challenges

561
00:27:33,650 --> 00:27:38,990
that are facing us regarding testing web

562
00:27:35,900 --> 00:27:43,190
application best web services then I'll

563
00:27:38,990 --> 00:27:45,410
I'll show a few solutions what you

564
00:27:43,190 --> 00:27:48,290
should do then we move to the automated

565
00:27:45,410 --> 00:27:51,160
part of it so the first one is the

566
00:27:48,290 --> 00:27:56,360
application surface keep in mind that

567
00:27:51,160 --> 00:27:58,700
now you don't the paradigm of you see a

568
00:27:56,360 --> 00:28:00,590
page you know the parameters you know

569
00:27:58,700 --> 00:28:01,910
the you that the links doesn't work

570
00:28:00,590 --> 00:28:04,070
anymore

571
00:28:01,910 --> 00:28:05,780
there are a few reasons for that first

572
00:28:04,070 --> 00:28:07,909
of all it's generally generated by an

573
00:28:05,780 --> 00:28:10,250
application so it that might not be easy

574
00:28:07,910 --> 00:28:12,350
to view HTML in the first place it might

575
00:28:10,250 --> 00:28:15,620
be still HTML but done by using a lot of

576
00:28:12,350 --> 00:28:18,790
JavaScript so only after tons of

577
00:28:15,620 --> 00:28:23,000
JavaScript execution the actual restful

578
00:28:18,790 --> 00:28:26,780
call is done and lastly but not less

579
00:28:23,000 --> 00:28:30,500
important once is there any PII there is

580
00:28:26,780 --> 00:28:32,510
no one to one correlation between what's

581
00:28:30,500 --> 00:28:36,350
implemented on the server and what's

582
00:28:32,510 --> 00:28:38,420
actually used by the coin so just look

583
00:28:36,350 --> 00:28:42,409
in the client would never give you a

584
00:28:38,420 --> 00:28:44,900
full insight in the API it might be 30

585
00:28:42,410 --> 00:28:46,340
percent it might be 70 percent because

586
00:28:44,900 --> 00:28:48,780
it's now two teams an application

587
00:28:46,340 --> 00:28:50,939
exposing an API client application using

588
00:28:48,780 --> 00:28:56,310
just by looking at the client you won't

589
00:28:50,940 --> 00:28:57,510
know what's the entire surface so those

590
00:28:56,310 --> 00:29:00,419
were sort of the URLs

591
00:28:57,510 --> 00:29:04,230
the second part is about the parameters

592
00:29:00,420 --> 00:29:06,570
so assuming you know at least resource

593
00:29:04,230 --> 00:29:08,580
wise URL wise what is the extent of the

594
00:29:06,570 --> 00:29:11,490
application it's pretty hard to know

595
00:29:08,580 --> 00:29:13,800
what the parameters are I've mentioned

596
00:29:11,490 --> 00:29:16,290
two aspects of that one of them wiii be

597
00:29:13,800 --> 00:29:19,620
to death before was about what is a

598
00:29:16,290 --> 00:29:23,220
parameter the second one is that

599
00:29:19,620 --> 00:29:25,639
especially for unused api's or those

600
00:29:23,220 --> 00:29:28,770
it's hard for you to see the real

601
00:29:25,640 --> 00:29:31,020
requests it's hard to know what's the

602
00:29:28,770 --> 00:29:32,879
base values if you think about it when

603
00:29:31,020 --> 00:29:36,030
you do fuzzing you do one of two things

604
00:29:32,880 --> 00:29:40,200
you either send sort of an own attack

605
00:29:36,030 --> 00:29:42,350
vectors or known vectors to solicit

606
00:29:40,200 --> 00:29:44,400
response that would indicate an attack

607
00:29:42,350 --> 00:29:46,949
single quote okay

608
00:29:44,400 --> 00:29:49,020
for that matter or you files over the

609
00:29:46,950 --> 00:29:51,780
existing values so you take the current

610
00:29:49,020 --> 00:29:54,990
values and and look for the red herring

611
00:29:51,780 --> 00:29:56,940
for the value which is out of range and

612
00:29:54,990 --> 00:29:58,590
the second one is very hard to do when

613
00:29:56,940 --> 00:30:00,900
you don't have a base value basically is

614
00:29:58,590 --> 00:30:02,909
critical for that part and it's hard

615
00:30:00,900 --> 00:30:07,620
when you don't have any example of the

616
00:30:02,910 --> 00:30:11,550
actual core the result of that is that

617
00:30:07,620 --> 00:30:13,500
you need a lot more requests or more

618
00:30:11,550 --> 00:30:17,100
attempts which is not scalable when you

619
00:30:13,500 --> 00:30:23,220
do many old testing and also pretty bird

620
00:30:17,100 --> 00:30:27,750
building some for automated testing okay

621
00:30:23,220 --> 00:30:30,090
as I mentioned the customer education is

622
00:30:27,750 --> 00:30:33,570
something that's a challenge relatively

623
00:30:30,090 --> 00:30:35,040
easy to solve one usually you can't

624
00:30:33,570 --> 00:30:36,570
analyze that but you should analyze that

625
00:30:35,040 --> 00:30:38,639
so you need in order to actually do

626
00:30:36,570 --> 00:30:40,740
testing you have to understand the

627
00:30:38,640 --> 00:30:43,650
authentication mechanism what is the

628
00:30:40,740 --> 00:30:46,020
actual session ID and B have a tool that

629
00:30:43,650 --> 00:30:49,470
knows how to help you with doing that so

630
00:30:46,020 --> 00:30:52,350
for example if you have a standard proxy

631
00:30:49,470 --> 00:30:53,640
which has a cookie jar that you can

632
00:30:52,350 --> 00:30:54,899
store a cookie there in order to

633
00:30:53,640 --> 00:30:56,760
preserve your session doesn't help

634
00:30:54,900 --> 00:31:00,740
anymore you either need to manually

635
00:30:56,760 --> 00:31:02,640
update the header for each request or

636
00:31:00,740 --> 00:31:05,100
you need to find a tool that

637
00:31:02,640 --> 00:31:07,860
to keep an header an ongoing basis which

638
00:31:05,100 --> 00:31:11,570
is less common so that's more of a

639
00:31:07,860 --> 00:31:13,830
practical issue in the first two and

640
00:31:11,570 --> 00:31:17,310
after I mentioned challenges let's look

641
00:31:13,830 --> 00:31:19,530
a bit at solutions so first and foremost

642
00:31:17,310 --> 00:31:21,510
probably the first thing to start with

643
00:31:19,530 --> 00:31:24,990
and be and I mentioned the for restful

644
00:31:21,510 --> 00:31:27,270
Web Services you may want to note dive

645
00:31:24,990 --> 00:31:30,510
directly into the application but

646
00:31:27,270 --> 00:31:34,160
looking at architecture before you may

647
00:31:30,510 --> 00:31:37,110
want to do gather as much documentation

648
00:31:34,160 --> 00:31:40,350
upfront as you can now when I send the

649
00:31:37,110 --> 00:31:43,050
commentation it might not be just a

650
00:31:40,350 --> 00:31:44,820
formal documentations waddle because

651
00:31:43,050 --> 00:31:47,310
there aren't that many of them there are

652
00:31:44,820 --> 00:31:49,889
few other places to look for that so I

653
00:31:47,310 --> 00:31:52,070
have here an example of a documentation

654
00:31:49,890 --> 00:31:54,840
program you guide an example of

655
00:31:52,070 --> 00:31:58,040
something interesting you may look into

656
00:31:54,840 --> 00:32:00,389
the configuration of the web server or

657
00:31:58,040 --> 00:32:03,840
whatever framework you are using because

658
00:32:00,390 --> 00:32:06,420
in some cases the the configuration

659
00:32:03,840 --> 00:32:07,980
let's call it the pirate code something

660
00:32:06,420 --> 00:32:11,520
comes before the code includes a lot of

661
00:32:07,980 --> 00:32:13,470
information about how the requests are

662
00:32:11,520 --> 00:32:14,730
translated into parameters what is used

663
00:32:13,470 --> 00:32:17,190
as a parameter because the programming

664
00:32:14,730 --> 00:32:20,010
language has a very concrete notion of a

665
00:32:17,190 --> 00:32:21,660
parameter the interface you're using

666
00:32:20,010 --> 00:32:25,760
doesn't have it so something in the

667
00:32:21,660 --> 00:32:28,770
middle would include this this

668
00:32:25,760 --> 00:32:31,020
translation one thing worth mention

669
00:32:28,770 --> 00:32:33,720
specifically would be configuration for

670
00:32:31,020 --> 00:32:37,590
your rewrite model on the web server as

671
00:32:33,720 --> 00:32:40,590
I mentioned in some cases of this the

672
00:32:37,590 --> 00:32:42,510
translation from one uniform URL to URL

673
00:32:40,590 --> 00:32:46,649
plus parameters is done on application

674
00:32:42,510 --> 00:32:49,410
on the web server level and then the mod

675
00:32:46,650 --> 00:32:52,380
rewrite configuration would disclose to

676
00:32:49,410 --> 00:33:00,590
you what is the actual parameter so in

677
00:32:52,380 --> 00:33:03,360
this example essentially anything

678
00:33:00,590 --> 00:33:05,520
anything which is you think of as a URL

679
00:33:03,360 --> 00:33:09,179
is essentially passed as a parameter to

680
00:33:05,520 --> 00:33:14,960
index dot PHP so the rewrite rule checks

681
00:33:09,180 --> 00:33:17,960
for any URL and put the parameter

682
00:33:14,960 --> 00:33:19,340
department of foreign expiry so that's a

683
00:33:17,960 --> 00:33:21,610
simple one can be much more accomplished

684
00:33:19,340 --> 00:33:21,610
than that

685
00:33:21,679 --> 00:33:25,659
let's do key there are two examples of

686
00:33:26,200 --> 00:33:32,690
potential sources I mentioned waddle of

687
00:33:29,210 --> 00:33:37,370
course lastly the application source is

688
00:33:32,690 --> 00:33:39,380
a good way to go and in many cases you

689
00:33:37,370 --> 00:33:44,570
don't get need to get into the sources

690
00:33:39,380 --> 00:33:46,909
in to dive into C code in both a dotnet

691
00:33:44,570 --> 00:33:50,330
and Java there are sort of frameworks to

692
00:33:46,909 --> 00:33:52,039
build restful Web Services which implies

693
00:33:50,330 --> 00:33:56,529
there is some configuration file this is

694
00:33:52,039 --> 00:34:01,158
the net example that an able to define

695
00:33:56,529 --> 00:34:03,559
for the code your restful Web API and

696
00:34:01,159 --> 00:34:08,230
essentially you have it pretty World

697
00:34:03,559 --> 00:34:11,659
Translation very similar to the rewrite

698
00:34:08,230 --> 00:34:18,230
example of how you translate the request

699
00:34:11,659 --> 00:34:19,849
into code for meters I won't get into

700
00:34:18,230 --> 00:34:23,000
the details here but essentially you see

701
00:34:19,849 --> 00:34:24,980
here the patterns for the URL and then

702
00:34:23,000 --> 00:34:27,109
how they translate into a method call

703
00:34:24,980 --> 00:34:29,300
with the Parmenter used as a parameter

704
00:34:27,109 --> 00:34:32,239
so you have names from parameters and

705
00:34:29,300 --> 00:34:34,730
how they are reflected in the URL all

706
00:34:32,239 --> 00:34:36,439
those examples are for URLs you will

707
00:34:34,730 --> 00:34:39,020
find especially in documentation I

708
00:34:36,440 --> 00:34:40,550
didn't see it in frameworks also of

709
00:34:39,020 --> 00:34:42,830
course documenting when headers are used

710
00:34:40,550 --> 00:34:45,500
as parameters or JSON is used for meters

711
00:34:42,830 --> 00:34:46,819
so go to the documentation I know it's

712
00:34:45,500 --> 00:34:48,739
harder it's usually something we don't

713
00:34:46,820 --> 00:34:50,899
do as pen testers then we just hit the

714
00:34:48,739 --> 00:34:52,668
application and it creates a problem

715
00:34:50,899 --> 00:34:53,929
with the reach the interaction with the

716
00:34:52,668 --> 00:35:01,609
customer because they're not used to

717
00:34:53,929 --> 00:35:06,440
providing that I think it's important so

718
00:35:01,609 --> 00:35:10,130
another another thing you should use you

719
00:35:06,440 --> 00:35:13,160
may use it today it's important since

720
00:35:10,130 --> 00:35:16,970
web to its are critical would be proxies

721
00:35:13,160 --> 00:35:18,200
of course I mentioned two things about

722
00:35:16,970 --> 00:35:20,540
that first of all you use a proxy

723
00:35:18,200 --> 00:35:22,368
because you can't get all the URLs today

724
00:35:20,540 --> 00:35:25,550
in the only request in the first place

725
00:35:22,369 --> 00:35:27,619
so once we start doing web to Ajax you

726
00:35:25,550 --> 00:35:28,280
don't see all requests on the page you

727
00:35:27,619 --> 00:35:29,570
use

728
00:35:28,280 --> 00:35:32,660
Prague's in order to get the request

729
00:35:29,570 --> 00:35:34,190
understand what to send yourself or

730
00:35:32,660 --> 00:35:37,279
store the cookie ready for that matter

731
00:35:34,190 --> 00:35:39,560
so that's for sure and for restful Web

732
00:35:37,280 --> 00:35:41,780
Services that's nearly a must one thing

733
00:35:39,560 --> 00:35:43,640
to remember it's also a source for

734
00:35:41,780 --> 00:35:45,350
understanding request that they request

735
00:35:43,640 --> 00:35:48,759
structure and we'll see later on to use

736
00:35:45,350 --> 00:35:52,040
that especially in automated tools so to

737
00:35:48,760 --> 00:35:54,680
sort of map the attack surface what your

738
00:35:52,040 --> 00:35:56,570
URLs are especially used a point in

739
00:35:54,680 --> 00:35:58,399
question will of course be that for

740
00:35:56,570 --> 00:36:00,200
application point to remember is for

741
00:35:58,400 --> 00:36:02,480
applications for mobile applications

742
00:36:00,200 --> 00:36:05,689
there's literally no other way you have

743
00:36:02,480 --> 00:36:08,080
to put that middle and files here rather

744
00:36:05,690 --> 00:36:16,640
than files on the client or on your own

745
00:36:08,080 --> 00:36:18,259
Python script okay the third one I want

746
00:36:16,640 --> 00:36:21,529
to share with you before we get to

747
00:36:18,260 --> 00:36:27,170
automation if April well would be how to

748
00:36:21,530 --> 00:36:30,560
identify in a request for meters by

749
00:36:27,170 --> 00:36:33,980
looking them so directly addressing

750
00:36:30,560 --> 00:36:35,240
manual pen testing so of course anything

751
00:36:33,980 --> 00:36:37,220
which is an understanding that none

752
00:36:35,240 --> 00:36:41,509
stunt header would be something you want

753
00:36:37,220 --> 00:36:46,390
to fast some you want to inject it so

754
00:36:41,510 --> 00:36:49,280
that's sort of easy luke into the URL

755
00:36:46,390 --> 00:36:51,290
try to assess whether anything there

756
00:36:49,280 --> 00:36:53,150
looks like a par meter know that easy to

757
00:36:51,290 --> 00:36:56,270
said why would it look like a power

758
00:36:53,150 --> 00:36:58,100
meter so one thing would be if it has a

759
00:36:56,270 --> 00:37:01,460
pattern of a par meter if it doesn't

760
00:36:58,100 --> 00:37:04,250
look like finally a directory name a

761
00:37:01,460 --> 00:37:08,030
date you have a date in the middle good

762
00:37:04,250 --> 00:37:09,980
chance it's a par meter a long term

763
00:37:08,030 --> 00:37:12,130
vertical value by itself directories are

764
00:37:09,980 --> 00:37:15,170
not often called by long numerical names

765
00:37:12,130 --> 00:37:17,240
or anything which is just garbage

766
00:37:15,170 --> 00:37:21,670
forever if it's just letters or numbers

767
00:37:17,240 --> 00:37:24,169
it's usually a session ID by the way so

768
00:37:21,670 --> 00:37:28,730
you can attack it as a session ID or as

769
00:37:24,170 --> 00:37:32,540
a parameter for that matter thirdly of

770
00:37:28,730 --> 00:37:34,670
course look for structured inputs they

771
00:37:32,540 --> 00:37:38,120
are visible you can see them if it's

772
00:37:34,670 --> 00:37:41,060
looks like Jason by the way it doesn't

773
00:37:38,120 --> 00:37:41,480
have to be JSON or XML if you have a

774
00:37:41,060 --> 00:37:44,650
power

775
00:37:41,480 --> 00:37:46,970
that has sort of the limiters inside

776
00:37:44,650 --> 00:37:51,260
keep in mind there's a good chance that

777
00:37:46,970 --> 00:37:54,618
each you want to inject or test fast

778
00:37:51,260 --> 00:37:59,510
each part between the delimiter so

779
00:37:54,619 --> 00:38:02,869
you'll have a value which is a semicolon

780
00:37:59,510 --> 00:38:06,470
offers semicolon ID number semicolon

781
00:38:02,869 --> 00:38:09,770
Dave that's a compound value you may

782
00:38:06,470 --> 00:38:11,509
find more abilities if you try to inject

783
00:38:09,770 --> 00:38:15,410
or fast each one of the parts and if you

784
00:38:11,510 --> 00:38:18,710
try to just replace everything by by an

785
00:38:15,410 --> 00:38:23,379
injection string because if you just try

786
00:38:18,710 --> 00:38:23,380
an injection string it will be sort of

787
00:38:24,369 --> 00:38:29,480
found a zero is an error by the parser

788
00:38:27,590 --> 00:38:31,550
itself that breaks it while if you try

789
00:38:29,480 --> 00:38:33,650
each value by itself you'll get the

790
00:38:31,550 --> 00:38:36,109
actual code that processes this value

791
00:38:33,650 --> 00:38:39,230
which will prove more efficient to find

792
00:38:36,109 --> 00:38:40,700
our abilities lastly somewhat

793
00:38:39,230 --> 00:38:44,720
interesting look for your role there is

794
00:38:40,700 --> 00:38:47,000
no extension usually it's not always but

795
00:38:44,720 --> 00:38:48,770
if there is no extension there's a good

796
00:38:47,000 --> 00:38:53,690
reason to think it might be part of in

797
00:38:48,770 --> 00:38:55,130
restful api because it's not the file it

798
00:38:53,690 --> 00:38:57,560
can be a file there's no reason wouldn't

799
00:38:55,130 --> 00:39:00,830
be a file but these are just heuristics

800
00:38:57,560 --> 00:39:08,779
nothing here is you know pure science

801
00:39:00,830 --> 00:39:10,790
forever so we've talked about testing

802
00:39:08,780 --> 00:39:14,690
restful Web Services I mentioned the tax

803
00:39:10,790 --> 00:39:17,060
surface is a major issue both finding

804
00:39:14,690 --> 00:39:19,609
the actual URLs and secondly knowing

805
00:39:17,060 --> 00:39:21,380
what a parameter is and the session

806
00:39:19,609 --> 00:39:23,660
management is somewhat challenging then

807
00:39:21,380 --> 00:39:26,000
I went into solutions and I mentioned

808
00:39:23,660 --> 00:39:29,060
that to find the attack surface you

809
00:39:26,000 --> 00:39:31,190
should really go into documentation it's

810
00:39:29,060 --> 00:39:35,150
now important sorry for not being a real

811
00:39:31,190 --> 00:39:37,910
native technical idea but it has to be

812
00:39:35,150 --> 00:39:39,350
done you need to use a proxy and then

813
00:39:37,910 --> 00:39:41,779
there are some heuristics that would

814
00:39:39,350 --> 00:39:43,759
allow you to test it to think about

815
00:39:41,780 --> 00:39:46,280
whether something is might be a

816
00:39:43,760 --> 00:39:48,320
parameter so you don't have to pass

817
00:39:46,280 --> 00:39:49,790
every aspect of the request but can

818
00:39:48,320 --> 00:39:53,240
focus on some things that might be more

819
00:39:49,790 --> 00:39:54,930
valuable now going from here let's spend

820
00:39:53,240 --> 00:40:02,729
the last few minutes of the

821
00:39:54,930 --> 00:40:04,770
talk about automated pen testing so what

822
00:40:02,730 --> 00:40:06,420
is automated pen testing about for in

823
00:40:04,770 --> 00:40:09,750
the first place not a lot of you are

824
00:40:06,420 --> 00:40:11,579
using that you should by the way it's

825
00:40:09,750 --> 00:40:12,960
not replacement for many old pen testing

826
00:40:11,579 --> 00:40:15,470
but it saves all of the hustling is

827
00:40:12,960 --> 00:40:20,250
going to start from manual pen testing

828
00:40:15,470 --> 00:40:22,290
and I want to share with you what

829
00:40:20,250 --> 00:40:25,470
actually automated weapon testing does

830
00:40:22,290 --> 00:40:28,079
because people run apps can run bear run

831
00:40:25,470 --> 00:40:30,598
this parrot and I want to get somewhat

832
00:40:28,079 --> 00:40:32,460
into the under the hood so ultimately

833
00:40:30,599 --> 00:40:34,530
pen testing has two parts the first part

834
00:40:32,460 --> 00:40:36,119
is usually called crawling crawling is

835
00:40:34,530 --> 00:40:39,690
detecting the essentially the touch

836
00:40:36,119 --> 00:40:41,880
surface and essentially historically it

837
00:40:39,690 --> 00:40:46,859
was based on links so you would follow

838
00:40:41,880 --> 00:40:49,050
the links open source early on scanners

839
00:40:46,859 --> 00:40:51,990
still do only that today it doesn't work

840
00:40:49,050 --> 00:40:54,000
anymore because there's so much web to

841
00:40:51,990 --> 00:40:57,808
an HX there the links are just not

842
00:40:54,000 --> 00:41:00,240
enough also just parsing JavaScript

843
00:40:57,809 --> 00:41:04,160
findings would not work either so a

844
00:41:00,240 --> 00:41:07,799
modern scanner has to run JavaScript

845
00:41:04,160 --> 00:41:10,078
internally and do break points on the

846
00:41:07,799 --> 00:41:12,780
actual Ajax call so essentially

847
00:41:10,079 --> 00:41:18,500
something like a smarter version of

848
00:41:12,780 --> 00:41:20,849
proxy in order to detect those calls and

849
00:41:18,500 --> 00:41:22,260
this is sort of the complexity that

850
00:41:20,849 --> 00:41:24,599
works kind of has two days it's a pretty

851
00:41:22,260 --> 00:41:26,220
new technology it's not easy to do not a

852
00:41:24,599 --> 00:41:28,290
lot of scanners out there do that I

853
00:41:26,220 --> 00:41:32,819
actually know just of two but maybe

854
00:41:28,290 --> 00:41:37,950
they're fearful the second phase will be

855
00:41:32,819 --> 00:41:40,710
attacking and attacking falls into sort

856
00:41:37,950 --> 00:41:43,558
of two different aspect it's much closer

857
00:41:40,710 --> 00:41:47,309
this time to what you do as a pen tester

858
00:41:43,559 --> 00:41:50,250
it just automated it has the fuzzy part

859
00:41:47,309 --> 00:41:53,339
which is trying to send abnormal values

860
00:41:50,250 --> 00:41:56,880
into parameters but this is a bit too

861
00:41:53,339 --> 00:41:58,650
simplistic there are a second group or

862
00:41:56,880 --> 00:42:01,980
family of tests I would call session

863
00:41:58,650 --> 00:42:05,280
based where you try to create a workflow

864
00:42:01,980 --> 00:42:06,930
that would cheat the application into

865
00:42:05,280 --> 00:42:08,260
something I'll give you a good example

866
00:42:06,930 --> 00:42:12,480
of that

867
00:42:08,260 --> 00:42:16,660
you'll login automatically as

868
00:42:12,480 --> 00:42:18,640
administrator you'll do you crawl and

869
00:42:16,660 --> 00:42:23,109
get the surface and then you'll try to

870
00:42:18,640 --> 00:42:24,220
go directly to everything as a user and

871
00:42:23,110 --> 00:42:25,770
if you get to everything the

872
00:42:24,220 --> 00:42:28,270
administrator you can get to as a user

873
00:42:25,770 --> 00:42:33,490
something might be wrong so that's a

874
00:42:28,270 --> 00:42:35,170
good example of that attempting to do

875
00:42:33,490 --> 00:42:38,680
testing for cross-site request forgery

876
00:42:35,170 --> 00:42:41,200
for example ok might be a session based

877
00:42:38,680 --> 00:42:44,580
thing so again a lot of comparing

878
00:42:41,200 --> 00:42:46,600
different credentials different users

879
00:42:44,580 --> 00:42:49,470
that's essentially what the ultimate

880
00:42:46,600 --> 00:42:52,299
pentesting machine does

881
00:42:49,470 --> 00:42:53,859
so essentially you need to understand

882
00:42:52,300 --> 00:42:55,800
request generation which was either

883
00:42:53,860 --> 00:42:58,300
links or past or running JavaScript

884
00:42:55,800 --> 00:43:01,720
understand what parameters are which is

885
00:42:58,300 --> 00:43:03,460
tough if there are no standard another

886
00:43:01,720 --> 00:43:04,959
session management again for an

887
00:43:03,460 --> 00:43:07,900
automated - it's pretty tough if it's

888
00:43:04,960 --> 00:43:10,060
not standard so all those are pretty big

889
00:43:07,900 --> 00:43:13,810
challenges for automated websites web

890
00:43:10,060 --> 00:43:15,220
testing of web applications I remove

891
00:43:13,810 --> 00:43:17,580
that from the table because as I

892
00:43:15,220 --> 00:43:20,859
mentioned before this is something that

893
00:43:17,580 --> 00:43:22,870
even if you have to tell it to the

894
00:43:20,860 --> 00:43:25,390
scanner is still worthwhile because you

895
00:43:22,870 --> 00:43:27,009
just have to teaching something you what

896
00:43:25,390 --> 00:43:33,810
you do have to make sure is that your

897
00:43:27,010 --> 00:43:36,370
scanner actually supports more well

898
00:43:33,810 --> 00:43:39,279
non-standard methods for session

899
00:43:36,370 --> 00:43:41,020
management so they know it knows I

900
00:43:39,280 --> 00:43:43,570
mentioned that the test about compared

901
00:43:41,020 --> 00:43:46,180
logging is a user as an administrator

902
00:43:43,570 --> 00:43:48,910
and keeping a session if you do it for

903
00:43:46,180 --> 00:43:51,339
normal web using session it would be a

904
00:43:48,910 --> 00:43:53,920
cookie if you do it for a restful api

905
00:43:51,340 --> 00:43:56,800
probably a header a different header so

906
00:43:53,920 --> 00:43:58,750
the scanner we are using has to know to

907
00:43:56,800 --> 00:44:00,460
keep a session in the header for a

908
00:43:58,750 --> 00:44:02,200
matter even if you need to teach him

909
00:44:00,460 --> 00:44:06,070
that the specific header is a specific

910
00:44:02,200 --> 00:44:08,379
name received by the login still it is

911
00:44:06,070 --> 00:44:12,850
the the technical capability the two

912
00:44:08,380 --> 00:44:14,980
other issues are way more complex so I

913
00:44:12,850 --> 00:44:18,009
think we beat the challenges for that I

914
00:44:14,980 --> 00:44:19,870
mentioned them more than once what can

915
00:44:18,010 --> 00:44:22,000
we do what would be the solution so so

916
00:44:19,870 --> 00:44:23,980
this is sort of the idea that actually

917
00:44:22,000 --> 00:44:26,650
came up with when we started looking

918
00:44:23,980 --> 00:44:29,230
into that for women's back the first

919
00:44:26,650 --> 00:44:32,980
thing you need to do is what I call

920
00:44:29,230 --> 00:44:38,530
defined rules so define how to explain

921
00:44:32,980 --> 00:44:40,900
to the scanner the RESTful API why not

922
00:44:38,530 --> 00:44:43,840
just waddle so it can be waddle but why

923
00:44:40,900 --> 00:44:45,280
do is very complex for the pen tester so

924
00:44:43,840 --> 00:44:47,590
the rules are usually more and that's

925
00:44:45,280 --> 00:44:50,020
very small and the trajectory is not

926
00:44:47,590 --> 00:44:51,340
very good so sorry for that it would be

927
00:44:50,020 --> 00:44:53,680
available online of course and if you

928
00:44:51,340 --> 00:44:57,820
want before that send me an email

929
00:44:53,680 --> 00:45:02,740
it's ofr at hp.com thats too short to

930
00:44:57,820 --> 00:45:04,090
forget I went to HP just to have the

931
00:45:02,740 --> 00:45:06,790
shortest you are in the world that's the

932
00:45:04,090 --> 00:45:13,150
only reason so essentially what we have

933
00:45:06,790 --> 00:45:15,279
here is a bit similar to the today what

934
00:45:13,150 --> 00:45:20,890
the rewrite rules I showed before it

935
00:45:15,280 --> 00:45:22,750
takes a URL and have a regular part way

936
00:45:20,890 --> 00:45:25,540
that breaks into one of the parameters

937
00:45:22,750 --> 00:45:27,940
here so this is the simple part where

938
00:45:25,540 --> 00:45:30,009
it's about URLs if you want to go into

939
00:45:27,940 --> 00:45:31,450
headers into actually breaking JSON and

940
00:45:30,010 --> 00:45:32,440
stuff like that you need something which

941
00:45:31,450 --> 00:45:34,419
is not a one-liner

942
00:45:32,440 --> 00:45:36,100
it's sort of our request territory in

943
00:45:34,420 --> 00:45:38,230
which you take a sample request and

944
00:45:36,100 --> 00:45:41,770
point to what would be the parameters in

945
00:45:38,230 --> 00:45:45,160
it so that's sort of a method that's

946
00:45:41,770 --> 00:45:48,070
sort of easier for pen testers then

947
00:45:45,160 --> 00:45:49,629
model to model how the application the

948
00:45:48,070 --> 00:45:51,700
RESTful API works now how would you

949
00:45:49,630 --> 00:45:55,080
populate that so you can define it

950
00:45:51,700 --> 00:45:57,759
manually you can import from

951
00:45:55,080 --> 00:46:00,520
Waddle or from a new crewman tation from

952
00:45:57,760 --> 00:46:02,320
actual source as I mentioned before the

953
00:46:00,520 --> 00:46:04,270
trick we tried to do was to do it in an

954
00:46:02,320 --> 00:46:07,030
automated manner so while it is easy

955
00:46:04,270 --> 00:46:09,100
because it's a standard from

956
00:46:07,030 --> 00:46:11,050
configuration we can support a certain

957
00:46:09,100 --> 00:46:14,830
number of known configuration I showed

958
00:46:11,050 --> 00:46:16,630
net1 mod rewrite stuff like that and the

959
00:46:14,830 --> 00:46:19,299
nice part and we are looking into that

960
00:46:16,630 --> 00:46:22,360
would be to take it to guess it from

961
00:46:19,300 --> 00:46:23,590
documentation from textual documentation

962
00:46:22,360 --> 00:46:26,710
because you know it's looks like a URL

963
00:46:23,590 --> 00:46:28,410
it is curly brackets and it's a

964
00:46:26,710 --> 00:46:31,750
parameter so and it actually works

965
00:46:28,410 --> 00:46:32,620
it's a you'll do it by examining the

966
00:46:31,750 --> 00:46:35,440
invitation

967
00:46:32,620 --> 00:46:35,770
a smart to can try to do it also and

968
00:46:35,440 --> 00:46:37,420
again

969
00:46:35,770 --> 00:46:41,140
only suggest the rules and then you can

970
00:46:37,420 --> 00:46:43,450
mark if it's included or not why what

971
00:46:41,140 --> 00:46:46,049
would you use those rule for so the

972
00:46:43,450 --> 00:46:49,149
first one would be of course fuzzing

973
00:46:46,050 --> 00:46:52,450
you'd fast using those rules so you have

974
00:46:49,150 --> 00:46:57,400
a much wider fastened the other thing is

975
00:46:52,450 --> 00:47:00,339
pretty interestingly pretty interesting

976
00:46:57,400 --> 00:47:01,900
would be to actually when you run the

977
00:47:00,340 --> 00:47:05,470
scanner not that tach part of both

978
00:47:01,900 --> 00:47:09,010
passing the scanner to actually detect

979
00:47:05,470 --> 00:47:11,230
you get a URL or a request in the

980
00:47:09,010 --> 00:47:13,660
scanning process and to understand that

981
00:47:11,230 --> 00:47:16,360
you will deploy those rules to it to

982
00:47:13,660 --> 00:47:18,310
understand if it's part of an API okay

983
00:47:16,360 --> 00:47:20,830
so the rules should be more generic than

984
00:47:18,310 --> 00:47:23,350
just to point to specific API entries

985
00:47:20,830 --> 00:47:26,200
they might point throughout when API

986
00:47:23,350 --> 00:47:29,470
looks in this specific design pattern so

987
00:47:26,200 --> 00:47:31,359
and then you catch the specific API call

988
00:47:29,470 --> 00:47:35,020
and you can facet once you find it in

989
00:47:31,360 --> 00:47:36,220
the crawling phase saying that I want to

990
00:47:35,020 --> 00:47:41,500
get smarter I don't want to stop here

991
00:47:36,220 --> 00:47:43,779
that's just a methodology the second

992
00:47:41,500 --> 00:47:46,980
thing we do and actually we do that is

993
00:47:43,780 --> 00:47:49,270
to ask the server when I said

994
00:47:46,980 --> 00:47:51,820
configuration when I said the

995
00:47:49,270 --> 00:47:54,670
application source if you think about

996
00:47:51,820 --> 00:47:57,760
files if it's actually file based so the

997
00:47:54,670 --> 00:47:59,770
file attack surface all these are known

998
00:47:57,760 --> 00:48:00,790
to the server that are just not known to

999
00:47:59,770 --> 00:48:03,820
this client

1000
00:48:00,790 --> 00:48:06,310
so what we have we have a piece running

1001
00:48:03,820 --> 00:48:09,070
on the application which can disclose to

1002
00:48:06,310 --> 00:48:10,390
the scanner all this information so this

1003
00:48:09,070 --> 00:48:13,270
kind of communicate through the runtime

1004
00:48:10,390 --> 00:48:14,920
piece on the application server and it

1005
00:48:13,270 --> 00:48:16,690
gets actually the application attack

1006
00:48:14,920 --> 00:48:19,390
surface by the way this technology is

1007
00:48:16,690 --> 00:48:22,030
good for many other things with dynamic

1008
00:48:19,390 --> 00:48:23,890
scanning with vacations coming because

1009
00:48:22,030 --> 00:48:26,080
for example it can tell you the dispatch

1010
00:48:23,890 --> 00:48:28,779
specific input actually gets to a sequel

1011
00:48:26,080 --> 00:48:30,369
call rather than just being an input so

1012
00:48:28,780 --> 00:48:33,250
it can actually validate the sequel call

1013
00:48:30,369 --> 00:48:34,570
or that something that cross-site

1014
00:48:33,250 --> 00:48:35,980
scripting is actually persistent because

1015
00:48:34,570 --> 00:48:38,770
it's get to the database stuff like that

1016
00:48:35,980 --> 00:48:41,220
so it's a pretty new technologies that

1017
00:48:38,770 --> 00:48:44,590
I've been coming to acknowledging a

1018
00:48:41,220 --> 00:48:46,899
application scanning we do that apps can

1019
00:48:44,590 --> 00:48:48,700
do this as well a few others do it it's

1020
00:48:46,900 --> 00:48:49,060
so again there's a mature scanner and

1021
00:48:48,700 --> 00:48:53,500
some

1022
00:48:49,060 --> 00:48:58,259
to look into lastly we want to actually

1023
00:48:53,500 --> 00:49:01,000
get smart about how we determine you

1024
00:48:58,260 --> 00:49:02,920
remember the slide about you trying to

1025
00:49:01,000 --> 00:49:06,130
assess if something is a parameter or

1026
00:49:02,920 --> 00:49:08,020
not we try to do it on an automated way

1027
00:49:06,130 --> 00:49:10,030
do you have something automated guess if

1028
00:49:08,020 --> 00:49:12,340
it's a parameter or not so some of the

1029
00:49:10,030 --> 00:49:15,790
things I showed before are can be done

1030
00:49:12,340 --> 00:49:18,280
by a machine as well so an OnStar header

1031
00:49:15,790 --> 00:49:20,470
would be a good example I can fast nice

1032
00:49:18,280 --> 00:49:24,540
alright non-starter headed by a scanner

1033
00:49:20,470 --> 00:49:27,339
as well other things are sort of less

1034
00:49:24,540 --> 00:49:30,520
straightforward so two things that are

1035
00:49:27,340 --> 00:49:33,070
really neat and sort of we like them one

1036
00:49:30,520 --> 00:49:38,500
of them is the four-four method so

1037
00:49:33,070 --> 00:49:42,670
essentially usually if you issue a

1038
00:49:38,500 --> 00:49:45,280
request for a folder you will get a you

1039
00:49:42,670 --> 00:49:46,780
get either a four-four if the folder for

1040
00:49:45,280 --> 00:49:48,460
four is they should be message for not

1041
00:49:46,780 --> 00:49:52,150
phone if there is not nothing like that

1042
00:49:48,460 --> 00:49:54,670
and you'll get a message saying you

1043
00:49:52,150 --> 00:49:58,270
can't browse it or you succeed in

1044
00:49:54,670 --> 00:50:00,460
browsing it if it's a real folder now

1045
00:49:58,270 --> 00:50:03,130
that's a good way to determine if

1046
00:50:00,460 --> 00:50:06,030
something is a folder or a parameter if

1047
00:50:03,130 --> 00:50:10,060
something so cut the URL short somewhere

1048
00:50:06,030 --> 00:50:13,300
anywhere call it and if you get the

1049
00:50:10,060 --> 00:50:15,670
phone for okay it's a middle thing of

1050
00:50:13,300 --> 00:50:20,260
something you know it means it was a

1051
00:50:15,670 --> 00:50:20,950
parameter one thing to keep in mind

1052
00:50:20,260 --> 00:50:23,230
though

1053
00:50:20,950 --> 00:50:25,720
just keep it might be a 4/4 it might be

1054
00:50:23,230 --> 00:50:27,520
your standard not found message both

1055
00:50:25,720 --> 00:50:30,310
sides today don't have a 4/4 message

1056
00:50:27,520 --> 00:50:32,290
anymore they have somewhat technique to

1057
00:50:30,310 --> 00:50:34,930
tell you that it wasn't found which is

1058
00:50:32,290 --> 00:50:38,259
not a lousy message it would usually be

1059
00:50:34,930 --> 00:50:39,700
a redirection to a specific URL but it's

1060
00:50:38,260 --> 00:50:42,090
still a method to tell you it's not

1061
00:50:39,700 --> 00:50:46,149
found so it still works the same here

1062
00:50:42,090 --> 00:50:47,800
the second way is to look for highly

1063
00:50:46,150 --> 00:50:49,720
varying Ural segments and I'll try to

1064
00:50:47,800 --> 00:50:54,790
explain that in the last two minutes I

1065
00:50:49,720 --> 00:50:56,859
have here a serial thing about the

1066
00:50:54,790 --> 00:50:59,830
session ID within the URL in the middle

1067
00:50:56,860 --> 00:51:03,090
of URL so you have X slash something

1068
00:50:59,830 --> 00:51:03,090
very long / y dot

1069
00:51:03,130 --> 00:51:07,729
aspx for that matter it's pretty obvious

1070
00:51:06,079 --> 00:51:11,359
to you that the very long thing in the

1071
00:51:07,729 --> 00:51:14,960
middle that there are fairly different

1072
00:51:11,359 --> 00:51:16,940
values for while the X and the Y's keep

1073
00:51:14,960 --> 00:51:22,279
the same there's a good chance they're a

1074
00:51:16,940 --> 00:51:24,319
parameter so if it might be also the

1075
00:51:22,279 --> 00:51:26,509
type of value because it's very long but

1076
00:51:24,319 --> 00:51:28,970
if it's just a word it might be hard to

1077
00:51:26,509 --> 00:51:30,499
understand oh that from the text so what

1078
00:51:28,970 --> 00:51:32,868
we can do is we can do statistical

1079
00:51:30,499 --> 00:51:35,209
analysis about the frequency in which a

1080
00:51:32,869 --> 00:51:38,839
middle section of a URL changes while

1081
00:51:35,210 --> 00:51:40,519
the rest does not change and if those if

1082
00:51:38,839 --> 00:51:42,890
there's something that changes a lot in

1083
00:51:40,519 --> 00:51:47,359
the middle there's a good chance that

1084
00:51:42,890 --> 00:51:48,950
there is a parameter luckily enough we

1085
00:51:47,359 --> 00:51:51,828
can verify it using this method for

1086
00:51:48,950 --> 00:51:54,499
formatting neither of them is foolproof

1087
00:51:51,829 --> 00:51:57,559
that's why both of them are suggested

1088
00:51:54,499 --> 00:52:00,738
keep in mind that we don't need the

1089
00:51:57,559 --> 00:52:02,660
higher percent success factor as pen

1090
00:52:00,739 --> 00:52:04,819
testers know we need to get to as much

1091
00:52:02,660 --> 00:52:07,489
as we can to see if there are

1092
00:52:04,819 --> 00:52:09,049
vulnerabilities and we when we create a

1093
00:52:07,489 --> 00:52:10,519
scanner I want to minimize the number of

1094
00:52:09,049 --> 00:52:12,799
requests we send for the matching my

1095
00:52:10,519 --> 00:52:23,839
maximum value we get because it takes

1096
00:52:12,799 --> 00:52:26,869
time so so give me me to sum up no

1097
00:52:23,839 --> 00:52:28,670
because we are in two questions so so

1098
00:52:26,869 --> 00:52:30,559
essentially I want to summarize in a

1099
00:52:28,670 --> 00:52:34,670
minute we talked today about restful web

1100
00:52:30,559 --> 00:52:36,440
services it might be for some the the

1101
00:52:34,670 --> 00:52:39,650
most important part you got out of today

1102
00:52:36,440 --> 00:52:42,049
because we really tend to talk about it

1103
00:52:39,650 --> 00:52:43,160
but it's hard to know what it is because

1104
00:52:42,049 --> 00:52:44,989
it's not something very specific

1105
00:52:43,160 --> 00:52:47,598
so the message it's not very specific

1106
00:52:44,989 --> 00:52:49,460
and refer to my presentation from a few

1107
00:52:47,599 --> 00:52:50,690
characteristics which are common to it

1108
00:52:49,460 --> 00:52:53,690
when you get to it

1109
00:52:50,690 --> 00:52:55,400
second we did try to discuss a bit about

1110
00:52:53,690 --> 00:52:57,380
it security which is just like web and

1111
00:52:55,400 --> 00:53:00,229
then the challenges and solutions for

1112
00:52:57,380 --> 00:53:02,329
how to pan test it which is mostly about

1113
00:53:00,229 --> 00:53:04,879
the attack surface how do we determine

1114
00:53:02,329 --> 00:53:06,380
the attack surface to solve that I send

1115
00:53:04,880 --> 00:53:08,420
it first and foremost to the

1116
00:53:06,380 --> 00:53:10,609
documentation but then offer a few more

1117
00:53:08,420 --> 00:53:13,400
practical solutions as to how to look

1118
00:53:10,609 --> 00:53:16,520
into the web application requests you

1119
00:53:13,400 --> 00:53:21,619
have and determine if something leads to

1120
00:53:16,520 --> 00:53:24,109
additional URLs is a parameter etc

1121
00:53:21,619 --> 00:53:26,630
lastly I talked a bit about automation

1122
00:53:24,109 --> 00:53:28,369
and point out if things can be also done

1123
00:53:26,630 --> 00:53:30,470
in an automated manner which is harder

1124
00:53:28,369 --> 00:53:35,900
in this case to detect the attack

1125
00:53:30,470 --> 00:53:37,549
surface for a restful api so now for

1126
00:53:35,900 --> 00:53:39,050
questions and I was asked just to give

1127
00:53:37,550 --> 00:53:45,500
you the microphone so that's the reason

1128
00:53:39,050 --> 00:53:47,330
I sort of how often do parameters show

1129
00:53:45,500 --> 00:53:49,550
up in the middle of a URL as opposed to

1130
00:53:47,330 --> 00:53:51,529
usually at least in my experience they

1131
00:53:49,550 --> 00:53:53,180
tend to be at the end at some point they

1132
00:53:51,530 --> 00:53:57,830
stop and it becomes file structure but

1133
00:53:53,180 --> 00:54:00,649
so it's not in both cases it's not as

1134
00:53:57,830 --> 00:54:02,000
something is just 99% and the rest is 1%

1135
00:54:00,650 --> 00:54:04,910
it's sort of in somewhere in the middle

1136
00:54:02,000 --> 00:54:08,570
my experience is the those at the end

1137
00:54:04,910 --> 00:54:11,868
are the mod rewrite stuff so Drupal

1138
00:54:08,570 --> 00:54:13,490
WordPress so those you see a lot while a

1139
00:54:11,869 --> 00:54:15,290
lot of enterprise applications which are

1140
00:54:13,490 --> 00:54:16,848
more of interest to us in many cases

1141
00:54:15,290 --> 00:54:19,099
because they've a lot more ability in

1142
00:54:16,849 --> 00:54:20,030
the first place and we are called in and

1143
00:54:19,099 --> 00:54:24,830
paid to test them

1144
00:54:20,030 --> 00:54:28,060
unlike open source in many cases do have

1145
00:54:24,830 --> 00:54:31,130
primaries in the middle as well

1146
00:54:28,060 --> 00:54:35,740
especially if you especially it's in

1147
00:54:31,130 --> 00:54:39,440
hebrews api there is a good chance that

1148
00:54:35,740 --> 00:54:42,709
the last part is deus ex parte is paging

1149
00:54:39,440 --> 00:54:48,170
the parameter stuck so last questions I

1150
00:54:42,710 --> 00:54:50,630
think I was so anyone thank you for

1151
00:54:48,170 --> 00:54:53,750
participation feel free to contact me

1152
00:54:50,630 --> 00:54:56,530
email now for more questions I hope you

1153
00:54:53,750 --> 00:54:56,530
enjoyed thank you

1154
00:54:58,540 --> 00:55:01,869
[Applause]

