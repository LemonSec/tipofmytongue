1
00:00:06,569 --> 00:00:11,960
thanks everyone for

2
00:00:09,650 --> 00:00:12,450
and with me is David Rees and we wrote

3
00:00:11,960 --> 00:00:16,070
the

4
00:00:12,450 --> 00:00:16,070
Adobe I'm a security researcher

5
00:00:16,100 --> 00:00:20,630
with the Adobe Acrobat team and we're

6
00:00:18,650 --> 00:00:22,430
going to speak today about why we thank

7
00:00:20,630 --> 00:00:24,680
developers and vulnerability researcher

8
00:00:22,430 --> 00:00:27,740
should collaborate so I actually wanted

9
00:00:24,680 --> 00:00:30,140
to start by doing a rough survey of this

10
00:00:27,740 --> 00:00:32,089
group here how many people work in the

11
00:00:30,140 --> 00:00:34,250
security capacity they're in research or

12
00:00:32,090 --> 00:00:39,830
a program management or some other

13
00:00:34,250 --> 00:00:41,210
capacity it's 100 percent people work

14
00:00:39,830 --> 00:00:44,540
it's a moot question but how many people

15
00:00:41,210 --> 00:00:46,190
are working developing so the idea

16
00:00:44,540 --> 00:00:47,000
behind this talk is to tell you

17
00:00:46,190 --> 00:00:48,260
something about some of the

18
00:00:47,000 --> 00:00:50,960
collaboration that David and I have done

19
00:00:48,260 --> 00:00:53,570
together and how that's helped make our

20
00:00:50,960 --> 00:00:54,920
security program better to dobby and so

21
00:00:53,570 --> 00:00:57,909
david and i will share the stage and

22
00:00:54,920 --> 00:01:00,800
tell you more about what we did together

23
00:00:57,909 --> 00:01:02,540
so here's the here's the motivation for

24
00:01:00,800 --> 00:01:04,580
this talk if you've been following the

25
00:01:02,540 --> 00:01:06,979
news over the past few years you know

26
00:01:04,580 --> 00:01:08,360
that the vulnerability counts in Adobe

27
00:01:06,979 --> 00:01:09,950
Reader and Flash Player our flagship

28
00:01:08,360 --> 00:01:12,110
products I've been going up pretty

29
00:01:09,950 --> 00:01:14,120
literally and this is a this is a graph

30
00:01:12,110 --> 00:01:19,130
to tell you how steep that increase has

31
00:01:14,120 --> 00:01:20,899
been of course when when people are

32
00:01:19,130 --> 00:01:24,079
talking about bugs and companies

33
00:01:20,899 --> 00:01:25,880
software it does become a big deal

34
00:01:24,079 --> 00:01:29,689
because the things that people say

35
00:01:25,880 --> 00:01:30,649
affect your products reputation these

36
00:01:29,689 --> 00:01:34,089
are some of the things that people were

37
00:01:30,649 --> 00:01:34,090
saying in the news about Adobe software

38
00:01:37,630 --> 00:01:45,380
and if a picture's worth a thousand

39
00:01:40,280 --> 00:01:47,960
words the picture probably best

40
00:01:45,380 --> 00:01:49,670
summarizes the state of security back

41
00:01:47,960 --> 00:01:52,479
then but things have gone a long way

42
00:01:49,670 --> 00:01:55,310
we've gotten a lot better at security

43
00:01:52,479 --> 00:01:57,979
the team that does security at Adobe is

44
00:01:55,310 --> 00:01:59,390
called asset a fiction we call assets

45
00:01:57,979 --> 00:02:02,719
the Adobe secure software engineering

46
00:01:59,390 --> 00:02:04,939
team and the function that I primarily

47
00:02:02,719 --> 00:02:07,428
worked on is called P cert the Adobe

48
00:02:04,939 --> 00:02:08,359
products P instant response team and so

49
00:02:07,429 --> 00:02:10,910
I'll tell you a little bit about what

50
00:02:08,360 --> 00:02:12,470
asset does so the mandate of asset is to

51
00:02:10,910 --> 00:02:14,720
Bill Adobe software as securely as

52
00:02:12,470 --> 00:02:16,340
possible and this is working through all

53
00:02:14,720 --> 00:02:18,770
the stages of the software development

54
00:02:16,340 --> 00:02:20,540
lifecycle and he served as part of asset

55
00:02:18,770 --> 00:02:23,090
but is focused on a more incident

56
00:02:20,540 --> 00:02:25,760
response so assets ambition or

57
00:02:23,090 --> 00:02:28,280
motivation is to create software as

58
00:02:25,760 --> 00:02:29,160
securely as possible but we know that no

59
00:02:28,280 --> 00:02:31,170
software is ever

60
00:02:29,160 --> 00:02:33,510
perfect and as far as we try there will

61
00:02:31,170 --> 00:02:35,700
be bugs in our software and so Pisa

62
00:02:33,510 --> 00:02:38,700
fills in that gap and the way we work as

63
00:02:35,700 --> 00:02:41,700
follows we monitor the internet for

64
00:02:38,700 --> 00:02:43,320
reports of bugs in our software and some

65
00:02:41,700 --> 00:02:45,810
of these are emailed to us directly by

66
00:02:43,320 --> 00:02:47,880
by customers or partners and we monitor

67
00:02:45,810 --> 00:02:51,360
an email alias where we receive these

68
00:02:47,880 --> 00:02:53,160
reports we work with product teams that

69
00:02:51,360 --> 00:02:55,230
are relevant so if it's a bug in a W

70
00:02:53,160 --> 00:02:57,090
reader for example we'll engage the

71
00:02:55,230 --> 00:02:59,040
Adobe Reader team send the bug report

72
00:02:57,090 --> 00:03:02,250
over to them collaborate with them on

73
00:02:59,040 --> 00:03:05,400
the analysis on the root cause and help

74
00:03:02,250 --> 00:03:06,840
them create fixes and verify fixes we do

75
00:03:05,400 --> 00:03:08,430
circle back with the researchers who

76
00:03:06,840 --> 00:03:10,920
submitted the bug so they get an

77
00:03:08,430 --> 00:03:12,180
opportunity to verify the fixes and if

78
00:03:10,920 --> 00:03:14,250
they're satisfied with the

79
00:03:12,180 --> 00:03:16,710
acknowledgement we add their name to our

80
00:03:14,250 --> 00:03:19,320
webpage to indicate the work they've

81
00:03:16,710 --> 00:03:21,720
done with us the collaboration and then

82
00:03:19,320 --> 00:03:23,400
finally we publish bulletins to inform

83
00:03:21,720 --> 00:03:26,390
the public about the bugs that are

84
00:03:23,400 --> 00:03:28,500
getting mitigated with each cycle

85
00:03:26,390 --> 00:03:30,600
another project we've been involved with

86
00:03:28,500 --> 00:03:32,160
is a project home map Microsoft accurate

87
00:03:30,600 --> 00:03:34,970
predictions program I am glad some

88
00:03:32,160 --> 00:03:37,380
representatives from Microsoft are here

89
00:03:34,970 --> 00:03:39,209
so I'm gonna hand it over to David and

90
00:03:37,380 --> 00:03:41,970
this is sort of how we'll pass the Mike

91
00:03:39,209 --> 00:03:45,680
helping each other and and proceed with

92
00:03:41,970 --> 00:03:47,940
the presentation we good thanks Cossack

93
00:03:45,680 --> 00:03:50,760
so I guess I'm an endangered species

94
00:03:47,940 --> 00:03:54,870
here be nice to me

95
00:03:50,760 --> 00:03:57,000
I'm part of the Acrobat 3d group that in

96
00:03:54,870 --> 00:03:59,010
turn is part of the Acrobat Adobe Reader

97
00:03:57,000 --> 00:04:01,800
groups so we're one of the teams that

98
00:03:59,010 --> 00:04:04,799
Karthik works with it's about a billion

99
00:04:01,800 --> 00:04:07,050
users the 3d group is more narrowly

100
00:04:04,800 --> 00:04:16,590
focused than that we're dealing with a

101
00:04:07,050 --> 00:04:18,239
sink our customers industries we work

102
00:04:16,589 --> 00:04:21,000
with asset and we work standalone her

103
00:04:18,238 --> 00:04:23,820
you saw from all the press clippings

104
00:04:21,000 --> 00:04:27,480
that Karthik gave earlier we've been

105
00:04:23,820 --> 00:04:30,060
taking a bit of a beating our customers

106
00:04:27,480 --> 00:04:31,620
are high value our data is complex and

107
00:04:30,060 --> 00:04:35,540
that means you know they're rich

108
00:04:31,620 --> 00:04:38,160
pickings and it's a large attack surface

109
00:04:35,540 --> 00:04:39,720
in Acrobat 9 we started the code Harding

110
00:04:38,160 --> 00:04:41,220
initiative now that was kind of in

111
00:04:39,720 --> 00:04:41,830
parallel with some of the clippings that

112
00:04:41,220 --> 00:04:45,130
Karthik we

113
00:04:41,830 --> 00:04:48,099
showing so we are kind of proactive and

114
00:04:45,130 --> 00:04:49,930
reactive at the same time that's morphed

115
00:04:48,100 --> 00:04:53,560
into the work the ongoing work with

116
00:04:49,930 --> 00:04:56,440
asset where we identify and exports

117
00:04:53,560 --> 00:04:58,270
exports internally yes and we also try

118
00:04:56,440 --> 00:05:00,640
and look for problematic Co patents

119
00:04:58,270 --> 00:05:03,280
we're leveraging develop a knowledge and

120
00:05:00,640 --> 00:05:05,050
asset knowledge here to address those

121
00:05:03,280 --> 00:05:07,960
and then of course the things you're

122
00:05:05,050 --> 00:05:10,900
probably more aware of the reactive work

123
00:05:07,960 --> 00:05:14,010
with asset the public zero days and also

124
00:05:10,900 --> 00:05:15,820
some non-public disclosed

125
00:05:14,010 --> 00:05:26,680
vulnerabilities where we work directly

126
00:05:15,820 --> 00:05:27,940
with high-value customers and Karthik so

127
00:05:26,680 --> 00:05:30,520
now you know a little bit about asset

128
00:05:27,940 --> 00:05:32,530
what acid does and about Acrobat 3d and

129
00:05:30,520 --> 00:05:34,719
the work that David does in that team I

130
00:05:32,530 --> 00:05:37,179
wanted to give you an outline of this

131
00:05:34,720 --> 00:05:39,130
talk what's to come we'll start by

132
00:05:37,180 --> 00:05:42,340
telling you about map in the work we

133
00:05:39,130 --> 00:05:45,700
doing that then ask the question and

134
00:05:42,340 --> 00:05:46,960
then give you some some guidance on what

135
00:05:45,700 --> 00:05:48,760
the difference between a vulnerability

136
00:05:46,960 --> 00:05:52,180
in the bug and really it is the person

137
00:05:48,760 --> 00:05:54,450
who answers the answer the answer those

138
00:05:52,180 --> 00:05:56,680
questions depends on who's answering it

139
00:05:54,450 --> 00:05:59,110
we'll talk about some collaboration

140
00:05:56,680 --> 00:06:02,350
between David and myself on some case

141
00:05:59,110 --> 00:06:04,600
studies one on what is a responsibly

142
00:06:02,350 --> 00:06:06,610
disclosed issue which happens to be in

143
00:06:04,600 --> 00:06:08,740
predictable timeline and a couple of 0

144
00:06:06,610 --> 00:06:13,630
days which we collaborated on in

145
00:06:08,740 --> 00:06:15,400
December 2011 and then we'll cap it by

146
00:06:13,630 --> 00:06:18,730
sharing some lessons from these case

147
00:06:15,400 --> 00:06:20,789
studies and hopefully help you answer

148
00:06:18,730 --> 00:06:24,570
the question why does the developers

149
00:06:20,790 --> 00:06:26,920
blarble researchers should collaborate

150
00:06:24,570 --> 00:06:29,140
all right so let's let's get right into

151
00:06:26,920 --> 00:06:30,520
it let's say a dhobi sufferer contains a

152
00:06:29,140 --> 00:06:33,490
bug now this could be any major software

153
00:06:30,520 --> 00:06:37,750
vendor and the bigger the vendor is the

154
00:06:33,490 --> 00:06:39,370
more impactful a software bug is and the

155
00:06:37,750 --> 00:06:42,460
vendor wants to fix is protect its

156
00:06:39,370 --> 00:06:44,710
customers and one way it does it is by

157
00:06:42,460 --> 00:06:46,419
issuing updates of course we all know

158
00:06:44,710 --> 00:06:49,039
that issuing updates creating patches

159
00:06:46,420 --> 00:06:51,350
testing patches or deployed patches

160
00:06:49,040 --> 00:06:53,390
represents possible to the vendor in the

161
00:06:51,350 --> 00:06:56,360
last two stages testing into point ashes

162
00:06:53,390 --> 00:06:59,630
also represents cost to enterprises or

163
00:06:56,360 --> 00:07:02,150
trying to protect themselves another

164
00:06:59,630 --> 00:07:04,210
related aspect of that is that not all

165
00:07:02,150 --> 00:07:06,799
customers can update at the same time

166
00:07:04,210 --> 00:07:09,500
and that's really the complexities and

167
00:07:06,800 --> 00:07:11,300
the nature of their environments and the

168
00:07:09,500 --> 00:07:14,930
time it takes their tests before

169
00:07:11,300 --> 00:07:16,850
deploying them but the bottom line still

170
00:07:14,930 --> 00:07:19,100
is that Adobe or whatever big software

171
00:07:16,850 --> 00:07:21,680
vendor I were discussing wants to

172
00:07:19,100 --> 00:07:27,650
protect his customers regardless of how

173
00:07:21,680 --> 00:07:29,780
quickly the customers competitive so map

174
00:07:27,650 --> 00:07:32,030
has map is a program that helps fill

175
00:07:29,780 --> 00:07:34,820
that gap and solve that problem it's the

176
00:07:32,030 --> 00:07:37,640
Microsoft active protection program and

177
00:07:34,820 --> 00:07:39,500
the way it works loosely is that Adobe

178
00:07:37,640 --> 00:07:41,330
generates vulnerability analysis and

179
00:07:39,500 --> 00:07:44,090
shares these details with trusted

180
00:07:41,330 --> 00:07:46,460
partners and some of these are big names

181
00:07:44,090 --> 00:07:49,700
in the AV or security industry actually

182
00:07:46,460 --> 00:07:52,070
Symantec and a vest and at last count

183
00:07:49,700 --> 00:07:55,390
there was something like 85 partners in

184
00:07:52,070 --> 00:07:55,390
this program receive this information

185
00:07:55,750 --> 00:08:00,170
upon receiving this content these

186
00:07:58,250 --> 00:08:02,810
partners turn the details into a

187
00:08:00,170 --> 00:08:04,760
security signature so the likes of Mac

188
00:08:02,810 --> 00:08:07,580
appear Symantec my turn

189
00:08:04,760 --> 00:08:10,789
details about vulnerability in reader

190
00:08:07,580 --> 00:08:12,950
into a generic and precise proactive

191
00:08:10,790 --> 00:08:18,020
signature so that when exports come out

192
00:08:12,950 --> 00:08:19,520
and the signatures are proactive and say

193
00:08:18,020 --> 00:08:21,560
it's immature like that kicked in for an

194
00:08:19,520 --> 00:08:24,799
exploit file in the future then via

195
00:08:21,560 --> 00:08:31,550
Symantec or the Immaculate Adobe just

196
00:08:24,800 --> 00:08:33,440
second-handed its customers all right so

197
00:08:31,550 --> 00:08:35,060
here's some more historical details

198
00:08:33,440 --> 00:08:37,340
about map and some other stuff that

199
00:08:35,059 --> 00:08:39,469
piece or does map was actually a program

200
00:08:37,340 --> 00:08:41,810
that Microsoft started back in 2008

201
00:08:39,470 --> 00:08:42,500
Langer continues today an Adobe actually

202
00:08:41,809 --> 00:08:46,369
joining

203
00:08:42,500 --> 00:08:47,810
2010 so at the time our prominence as a

204
00:08:46,370 --> 00:08:50,300
software vendor who is getting hit by

205
00:08:47,810 --> 00:08:52,579
security bugs was large and we

206
00:08:50,300 --> 00:08:55,189
contemplated creating a program of our

207
00:08:52,580 --> 00:08:56,930
own but then decided to join Microsoft's

208
00:08:55,190 --> 00:08:59,960
program because it was successful and

209
00:08:56,930 --> 00:09:01,760
we're still part of this program again

210
00:08:59,960 --> 00:09:02,540
it's driven by P cert the team that does

211
00:09:01,760 --> 00:09:04,790
Incident Response

212
00:09:02,540 --> 00:09:06,620
within Adobe and that team interacts

213
00:09:04,790 --> 00:09:09,110
with the security researchers the map

214
00:09:06,620 --> 00:09:14,360
team on Microsoft product teams at Adobe

215
00:09:09,110 --> 00:09:16,280
and customers yeah so I wanted to share

216
00:09:14,360 --> 00:09:18,820
some more details on what goes into this

217
00:09:16,280 --> 00:09:21,140
map content that is shared with partners

218
00:09:18,820 --> 00:09:24,110
the first is a detailed description of

219
00:09:21,140 --> 00:09:26,870
the vulnerability the second is a

220
00:09:24,110 --> 00:09:28,610
reduced proof of concept file and the

221
00:09:26,870 --> 00:09:30,560
third is in Microsoft terminology

222
00:09:28,610 --> 00:09:32,630
something called detection logic and

223
00:09:30,560 --> 00:09:34,130
I'll explain each of these in turn but

224
00:09:32,630 --> 00:09:35,210
the idea behind sharing these three

225
00:09:34,130 --> 00:09:38,150
pieces and this is something that

226
00:09:35,210 --> 00:09:40,580
Microsoft worked out is that an analyst

227
00:09:38,150 --> 00:09:43,610
at a security company when looking at

228
00:09:40,580 --> 00:09:46,670
these pieces in combination would be

229
00:09:43,610 --> 00:09:49,190
able to create security signatures

230
00:09:46,670 --> 00:09:51,860
because these describe what is needed

231
00:09:49,190 --> 00:09:57,440
precisely to write a signature for a

232
00:09:51,860 --> 00:09:59,510
security bug so vulnerable description

233
00:09:57,440 --> 00:10:01,670
is exactly that it's sections that

234
00:09:59,510 --> 00:10:04,090
describe the viability and aspects of

235
00:10:01,670 --> 00:10:06,589
the voluntary had a Reuben pieces so on

236
00:10:04,090 --> 00:10:10,040
there's a four four different sections

237
00:10:06,590 --> 00:10:13,460
in those documents share potential

238
00:10:10,040 --> 00:10:16,430
indicators of an exploit so say a file

239
00:10:13,460 --> 00:10:17,900
of Adobe Flash Player file and paid some

240
00:10:16,430 --> 00:10:19,550
data structures what might those data

241
00:10:17,900 --> 00:10:22,819
structures be that indicate that the

242
00:10:19,550 --> 00:10:24,439
file is an excellent reproduction now

243
00:10:22,820 --> 00:10:26,510
some of these bugs are actually

244
00:10:24,440 --> 00:10:28,250
difficult to set up an environment for

245
00:10:26,510 --> 00:10:30,110
and reproduce in and it's helpful for

246
00:10:28,250 --> 00:10:32,450
analysts to have this information

247
00:10:30,110 --> 00:10:34,490
beforehand so reproduction gets helped

248
00:10:32,450 --> 00:10:39,020
speed up the process of reproduction and

249
00:10:34,490 --> 00:10:41,390
vulnerability in detection guidance is a

250
00:10:39,020 --> 00:10:43,520
high level description of what an

251
00:10:41,390 --> 00:10:45,770
analyst should be thinking about when

252
00:10:43,520 --> 00:10:50,120
they write a signature for a security

253
00:10:45,770 --> 00:10:51,949
bug a sector is is vulnerability

254
00:10:50,120 --> 00:10:53,360
researchers will tell you is what's

255
00:10:51,950 --> 00:10:56,480
present on the stack at the time that

256
00:10:53,360 --> 00:10:58,970
program retention so say an export file

257
00:10:56,480 --> 00:11:00,770
or a proof of concept file crashes Adobe

258
00:10:58,970 --> 00:11:03,230
Reader or Flash Player what functions

259
00:11:00,770 --> 00:11:05,630
exist what the analysts look for when

260
00:11:03,230 --> 00:11:07,240
reproduce the same bug they might tell

261
00:11:05,630 --> 00:11:10,900
them that this is the very same

262
00:11:07,240 --> 00:11:10,900
vulnerability in action

263
00:11:11,760 --> 00:11:16,710
all right some more details about this

264
00:11:14,310 --> 00:11:19,589
content so when exploit files come into

265
00:11:16,710 --> 00:11:21,960
this program in the Feaster there

266
00:11:19,590 --> 00:11:24,240
there's sometimes a result of buzzing

267
00:11:21,960 --> 00:11:27,000
runs and so researchers might take files

268
00:11:24,240 --> 00:11:29,940
off the internet and flip its whatever

269
00:11:27,000 --> 00:11:31,470
their methodology is proposing and when

270
00:11:29,940 --> 00:11:36,090
they discover crash just send that same

271
00:11:31,470 --> 00:11:39,570
file Gogi in map we strive to reduce

272
00:11:36,090 --> 00:11:41,610
this file to as small size as possible

273
00:11:39,570 --> 00:11:43,470
make it as essential as possible so that

274
00:11:41,610 --> 00:11:45,600
the data structure is relevant to the

275
00:11:43,470 --> 00:11:47,250
crash are captured but other data

276
00:11:45,600 --> 00:11:49,260
structures are removed so that the

277
00:11:47,250 --> 00:11:52,650
analyst who's analyzing as vulnerability

278
00:11:49,260 --> 00:11:54,270
isn't distracted by irrelevant data so

279
00:11:52,650 --> 00:11:56,910
in this example the original file that

280
00:11:54,270 --> 00:11:58,920
came into WP stirred was 54 kilobytes in

281
00:11:56,910 --> 00:12:00,750
size and probably shared with partners

282
00:11:58,920 --> 00:12:05,120
with 24 kilobytes in size and there's

283
00:12:00,750 --> 00:12:05,120
ways to do this using automation as well

284
00:12:06,410 --> 00:12:14,579
detection logic is a programming

285
00:12:10,680 --> 00:12:17,640
language type description of being a

286
00:12:14,580 --> 00:12:19,500
potential exploit so it's a pseudo code

287
00:12:17,640 --> 00:12:21,540
if you will that an analyst could study

288
00:12:19,500 --> 00:12:24,390
and then translate into whatever

289
00:12:21,540 --> 00:12:25,829
proprietary programming languages they

290
00:12:24,390 --> 00:12:27,480
write in that if there's a security

291
00:12:25,830 --> 00:12:30,510
signatures and which would later be

292
00:12:27,480 --> 00:12:32,940
compiled into security content and of

293
00:12:30,510 --> 00:12:35,480
ours and our IDs or hips or

294
00:12:32,940 --> 00:12:35,480
what-have-you

295
00:12:37,130 --> 00:12:42,270
alright so houses how was all of this

296
00:12:39,720 --> 00:12:45,290
content generated from a process point

297
00:12:42,270 --> 00:12:47,730
of view there are two teams within map

298
00:12:45,290 --> 00:12:50,849
one called react and the other defense

299
00:12:47,730 --> 00:12:53,010
and obviously things start with react

300
00:12:50,850 --> 00:12:54,710
and Adobe PCA is on the side that we

301
00:12:53,010 --> 00:12:58,080
received these vulnerabilities reports

302
00:12:54,710 --> 00:13:01,170
actions them and filters information out

303
00:12:58,080 --> 00:13:02,810
there the defense in Microsoft soul

304
00:13:01,170 --> 00:13:07,740
remains the distribution channel for

305
00:13:02,810 --> 00:13:09,959
this content when it's completed the

306
00:13:07,740 --> 00:13:12,960
workflows as follows we start by

307
00:13:09,960 --> 00:13:15,480
processing crash reports sometimes the

308
00:13:12,960 --> 00:13:18,180
skankiest because only certain versions

309
00:13:15,480 --> 00:13:20,580
on certain platforms will reproduce the

310
00:13:18,180 --> 00:13:21,729
vulnerability and not others this is

311
00:13:20,580 --> 00:13:23,230
something we

312
00:13:21,730 --> 00:13:24,790
with product names on so they can also

313
00:13:23,230 --> 00:13:29,889
cut down the time and heat and that's

314
00:13:24,790 --> 00:13:32,019
needed to reproduce about and then

315
00:13:29,889 --> 00:13:36,129
something that's shared between reactant

316
00:13:32,019 --> 00:13:38,290
defense is analyzed network so we both

317
00:13:36,129 --> 00:13:40,480
the both teams start debugging and

318
00:13:38,290 --> 00:13:42,219
reverse engineering and there's an

319
00:13:40,480 --> 00:13:43,749
information point back and forth to

320
00:13:42,220 --> 00:13:48,040
arrive at the root cause of

321
00:13:43,749 --> 00:13:50,859
vulnerability the defense phase also

322
00:13:48,040 --> 00:13:52,868
includes the creation of disparate

323
00:13:50,859 --> 00:13:56,049
concept that we discussed in the

324
00:13:52,869 --> 00:14:01,419
chainsaw automation if it had been an

325
00:13:56,049 --> 00:14:03,549
accident the manual and creating

326
00:14:01,419 --> 00:14:07,569
detection logic which is a formulaic way

327
00:14:03,549 --> 00:14:10,689
of describing how to detect the

328
00:14:07,569 --> 00:14:13,209
vulnerability and that image also

329
00:14:10,689 --> 00:14:15,309
captures that idea and then all this

330
00:14:13,209 --> 00:14:17,199
information when it's and it's distilled

331
00:14:15,309 --> 00:14:20,259
when it's precise and when it's

332
00:14:17,199 --> 00:14:22,358
completed is checked over once and then

333
00:14:20,259 --> 00:14:23,709
we share this information for the whole

334
00:14:22,359 --> 00:14:25,899
slew of vulnerabilities that are getting

335
00:14:23,709 --> 00:14:27,669
patched one day before the release of

336
00:14:25,899 --> 00:14:29,230
the after practice so the calculation

337
00:14:27,669 --> 00:14:31,720
and that is that we want to give

338
00:14:29,230 --> 00:14:32,949
partners enough time to action on these

339
00:14:31,720 --> 00:14:36,449
but we don't want to share this

340
00:14:32,949 --> 00:14:36,449
information too far in advance

341
00:14:36,989 --> 00:14:41,709
so this slider here summarizes the

342
00:14:39,429 --> 00:14:43,629
entire process from going from a crash

343
00:14:41,709 --> 00:14:46,209
report in its raw state when it comes

344
00:14:43,629 --> 00:14:47,980
into WP stirs the final step which is

345
00:14:46,209 --> 00:14:50,169
sharing this information that's boil

346
00:14:47,980 --> 00:14:52,689
down and precise with partners a day

347
00:14:50,169 --> 00:14:53,879
before at least a practice you is this

348
00:14:52,689 --> 00:14:56,589
is supposed to be an interactive session

349
00:14:53,879 --> 00:14:58,899
will pause after each major section this

350
00:14:56,589 --> 00:15:07,869
is the first major section and you have

351
00:14:58,899 --> 00:15:11,019
any questions so the second part of it

352
00:15:07,869 --> 00:15:13,809
is giving you some of the lessons we've

353
00:15:11,019 --> 00:15:17,019
learned working on this stuff from from

354
00:15:13,809 --> 00:15:18,999
in the trenches and sort of tell you why

355
00:15:17,019 --> 00:15:21,309
it is that a bug isn't the same as

356
00:15:18,999 --> 00:15:25,660
vulnerability because of who's asking I

357
00:15:21,309 --> 00:15:27,339
was answering and the thesis is that

358
00:15:25,660 --> 00:15:29,499
security researchers and attackers on

359
00:15:27,339 --> 00:15:32,530
one hand and developers on the other

360
00:15:29,499 --> 00:15:34,570
hand use security bugs differently

361
00:15:32,530 --> 00:15:37,030
the image on the left here is a

362
00:15:34,570 --> 00:15:38,410
screenshot of a picture of the San

363
00:15:37,030 --> 00:15:40,209
Francisco Golden Gate Bridge one looked

364
00:15:38,410 --> 00:15:42,280
at from the south side only if you have

365
00:15:40,210 --> 00:15:46,450
actually seen this bridge all right

366
00:15:42,280 --> 00:15:48,010
interaction I like it so any any San

367
00:15:46,450 --> 00:15:50,500
Francisco native would tell you as I

368
00:15:48,010 --> 00:15:51,730
would that the two bridges were the same

369
00:15:50,500 --> 00:15:54,820
and the image on the right is the same

370
00:15:51,730 --> 00:15:57,070
bridge from looked at from the north

371
00:15:54,820 --> 00:15:59,470
side and now you've observer my state

372
00:15:57,070 --> 00:16:01,630
that these are two different different

373
00:15:59,470 --> 00:16:06,070
bridges but we know better because the

374
00:16:01,630 --> 00:16:08,890
same bridge so I hope the pilots analogy

375
00:16:06,070 --> 00:16:10,780
to have developers and researchers have

376
00:16:08,890 --> 00:16:13,510
them use it the same thing security bugs

377
00:16:10,780 --> 00:16:16,150
a piece art sits in the middle where the

378
00:16:13,510 --> 00:16:19,450
bridge between the two parties we have

379
00:16:16,150 --> 00:16:22,090
to translate between source code exploit

380
00:16:19,450 --> 00:16:24,220
species and even the terminology so it's

381
00:16:22,090 --> 00:16:26,800
like being interpreters between these

382
00:16:24,220 --> 00:16:28,360
two different languages and a lot of it

383
00:16:26,800 --> 00:16:34,689
is managing communications working to do

384
00:16:28,360 --> 00:16:36,340
parties all right so giving you some

385
00:16:34,690 --> 00:16:38,590
background about background about map

386
00:16:36,340 --> 00:16:40,360
and told you about some the work that

387
00:16:38,590 --> 00:16:43,090
goes into communication and the parties

388
00:16:40,360 --> 00:16:44,430
involved in in mapper e for the rest of

389
00:16:43,090 --> 00:16:47,170
this talk will focus on case studies

390
00:16:44,430 --> 00:16:48,849
stuff stuff the piece art has done and

391
00:16:47,170 --> 00:16:51,310
something we've collaborated on with

392
00:16:48,850 --> 00:16:53,590
David's team won't start by this

393
00:16:51,310 --> 00:16:55,300
incident CV twenty eleven twenty four

394
00:16:53,590 --> 00:16:57,520
thirty eight and for each of these will

395
00:16:55,300 --> 00:16:58,930
give you a similar format of description

396
00:16:57,520 --> 00:17:01,569
and we'll start with the timeline that's

397
00:16:58,930 --> 00:17:04,720
this this is a this is a vulnerability

398
00:17:01,570 --> 00:17:07,690
in Adobe Reader the original disclosure

399
00:17:04,720 --> 00:17:11,200
came into Easter on September 6th 2011

400
00:17:07,690 --> 00:17:13,720
and the the stages that are described in

401
00:17:11,200 --> 00:17:16,900
this timeline I are common to all the

402
00:17:13,720 --> 00:17:19,569
case studies will examine triage which

403
00:17:16,900 --> 00:17:21,490
is reproduce the bug and figure out what

404
00:17:19,569 --> 00:17:23,379
platforms and what versions the bug

405
00:17:21,490 --> 00:17:25,210
reproduces inserted immediately so

406
00:17:23,380 --> 00:17:27,330
pisser jumped on this and we shared

407
00:17:25,210 --> 00:17:30,460
someone's work with adobe reader team

408
00:17:27,329 --> 00:17:33,159
and once once we were satisfied with it

409
00:17:30,460 --> 00:17:34,780
other stages continued so in this case

410
00:17:33,160 --> 00:17:37,000
the email that came into P search

411
00:17:34,780 --> 00:17:38,350
reporting this stated and I quote we

412
00:17:37,000 --> 00:17:40,540
have received a vulnerability report

413
00:17:38,350 --> 00:17:42,399
from a third party researcher regarding

414
00:17:40,540 --> 00:17:44,870
vulnerabilities in Adobe Reader 9 and 10

415
00:17:42,400 --> 00:17:47,450
and contact you on his behalf to attend

416
00:17:44,870 --> 00:17:48,979
the coordinated display it's interesting

417
00:17:47,450 --> 00:17:50,990
to note the the language in some of

418
00:17:48,980 --> 00:17:52,509
these reports big data tells you what

419
00:17:50,990 --> 00:17:55,879
the researchers thank you

420
00:17:52,509 --> 00:18:00,049
so triage as I said started on the sixth

421
00:17:55,879 --> 00:18:02,600
of six to September and and then we had

422
00:18:00,049 --> 00:18:06,830
to work on other things so we returned

423
00:18:02,600 --> 00:18:08,209
to the bug on the 29th of September when

424
00:18:06,830 --> 00:18:09,830
went about her business and then we had

425
00:18:08,210 --> 00:18:11,389
a question for David on the 9th of

426
00:18:09,830 --> 00:18:13,730
November which he answered very quickly

427
00:18:11,389 --> 00:18:15,740
so with his help we were able to wrap up

428
00:18:13,730 --> 00:18:18,889
analysis vulnerability analysis for map

429
00:18:15,740 --> 00:18:22,909
the week after and then the release of

430
00:18:18,889 --> 00:18:25,789
the patch the patch was released in

431
00:18:22,909 --> 00:18:27,649
conjunction with other patches and it

432
00:18:25,789 --> 00:18:33,379
was for regularly scheduled hiddens

433
00:18:27,649 --> 00:18:34,610
release on the 10th of January 2012 so I

434
00:18:33,379 --> 00:18:37,009
want to cut into some of the work that

435
00:18:34,610 --> 00:18:40,908
the piece occurred in the triage was map

436
00:18:37,009 --> 00:18:42,799
analysis stages were in that timeline so

437
00:18:40,909 --> 00:18:44,869
we verified the press report on the

438
00:18:42,799 --> 00:18:46,490
latest product versions in for

439
00:18:44,869 --> 00:18:48,529
vulnerability management turns out

440
00:18:46,490 --> 00:18:50,840
they're obviously a lot of teams will

441
00:18:48,529 --> 00:18:52,399
have lab setup with older versions and

442
00:18:50,840 --> 00:18:53,779
later versions and one of the

443
00:18:52,399 --> 00:18:55,879
methodologies to verify that it

444
00:18:53,779 --> 00:18:58,759
submission is actually new vulnerability

445
00:18:55,879 --> 00:19:00,860
is to see if the the father shared

446
00:18:58,759 --> 00:19:03,409
crashes their product on the latest

447
00:19:00,860 --> 00:19:06,830
version of the product we did this and

448
00:19:03,409 --> 00:19:09,590
shared the POC with product and we then

449
00:19:06,830 --> 00:19:12,049
have a more tedious task of testing all

450
00:19:09,590 --> 00:19:14,570
the support versions of the product and

451
00:19:12,049 --> 00:19:17,090
when they're successful and reproducing

452
00:19:14,570 --> 00:19:20,720
about support versions they log the bugs

453
00:19:17,090 --> 00:19:23,149
and then assign developers now sometimes

454
00:19:20,720 --> 00:19:24,679
it isn't as smooth they wouldn't be

455
00:19:23,149 --> 00:19:26,059
reproduced able to reproduce the

456
00:19:24,679 --> 00:19:27,379
vulnerability on certain version and

457
00:19:26,059 --> 00:19:30,769
there's some back and forth between

458
00:19:27,379 --> 00:19:33,168
Easter the Kiwi team and researcher the

459
00:19:30,769 --> 00:19:35,450
precise to get down precisely what's

460
00:19:33,169 --> 00:19:37,009
needed to reproduce the bug but let's

461
00:19:35,450 --> 00:19:38,509
say let's that point smoothly and it did

462
00:19:37,009 --> 00:19:39,980
go smoothly in this case developers were

463
00:19:38,509 --> 00:19:41,679
assigned and actually it was David who

464
00:19:39,980 --> 00:19:45,440
work on this bug

465
00:19:41,679 --> 00:19:47,659
then from the PC point of view we have a

466
00:19:45,440 --> 00:19:50,360
slew of folks to get through so once

467
00:19:47,659 --> 00:19:52,759
this was triage we added it to a work

468
00:19:50,360 --> 00:19:53,809
list with the plan of returning it to it

469
00:19:52,759 --> 00:19:56,059
later when other items have been

470
00:19:53,809 --> 00:19:57,280
addressed so we did that exactly we

471
00:19:56,059 --> 00:20:02,410
worked on other stuff

472
00:19:57,280 --> 00:20:05,590
September and October what time came to

473
00:20:02,410 --> 00:20:08,590
continue working on this I think David

474
00:20:05,590 --> 00:20:10,780
on November 9th 2011 and with the

475
00:20:08,590 --> 00:20:12,639
feedback thank you I was able to

476
00:20:10,780 --> 00:20:16,990
complete the analysis of the bug that we

477
00:20:12,640 --> 00:20:19,600
have - and that effectively completed

478
00:20:16,990 --> 00:20:21,010
what was needed for this birth and we

479
00:20:19,600 --> 00:20:24,520
continued with map analysis for other

480
00:20:21,010 --> 00:20:27,580
bugs and the Patras scheduled for

481
00:20:24,520 --> 00:20:29,500
January 10th and because of the nature

482
00:20:27,580 --> 00:20:31,449
of the bug this was a responsibly the

483
00:20:29,500 --> 00:20:33,010
supposed Boehner ability and we had good

484
00:20:31,450 --> 00:20:34,990
communication is back and forth the

485
00:20:33,010 --> 00:20:37,540
research for the patch was indeed

486
00:20:34,990 --> 00:20:40,540
released as planned on the 10th of

487
00:20:37,540 --> 00:20:43,540
January 2012 so this was a steady and

488
00:20:40,540 --> 00:20:46,770
predictable timeline and that's usually

489
00:20:43,540 --> 00:20:49,720
the characterization of responsibility

490
00:20:46,770 --> 00:20:52,350
so before I give it over to David I

491
00:20:49,720 --> 00:20:55,030
wanted to bring up his phone again and

492
00:20:52,350 --> 00:20:56,530
tell you ask you to think about what

493
00:20:55,030 --> 00:20:59,230
happens on the developers and after the

494
00:20:56,530 --> 00:21:02,170
buzzer sign so there's the 6th of

495
00:20:59,230 --> 00:21:04,870
November hold of September was when he

496
00:21:02,170 --> 00:21:09,580
and he cert completed the triage of the

497
00:21:04,870 --> 00:21:11,679
bug and so what happens under on the

498
00:21:09,580 --> 00:21:13,449
developers and what what David did after

499
00:21:11,680 --> 00:21:16,360
that point in the time for him indicated

500
00:21:13,450 --> 00:21:18,670
by the arrow enable him to give feedback

501
00:21:16,360 --> 00:21:21,459
to the researcher so his response to me

502
00:21:18,670 --> 00:21:23,080
was immediate and incorrect because of

503
00:21:21,460 --> 00:21:25,000
the work had already done analyzing and

504
00:21:23,080 --> 00:21:27,480
thinking about but that said let me hand

505
00:21:25,000 --> 00:21:27,480
it over to David

506
00:21:45,350 --> 00:21:48,279
basically it

507
00:21:57,139 --> 00:22:03,688
yeah the the to zero days we'll discuss

508
00:22:00,799 --> 00:22:05,339
thank you so when head over to David and

509
00:22:03,689 --> 00:22:10,679
he'll tell you about the work he did in

510
00:22:05,339 --> 00:22:12,658
that red timeframe thanks Karthik okay

511
00:22:10,679 --> 00:22:15,839
so the first you know Karthik pings us

512
00:22:12,659 --> 00:22:18,209
someone else in asset we know it's not a

513
00:22:15,839 --> 00:22:20,609
zero day we have time to consider it and

514
00:22:18,209 --> 00:22:23,819
also there's a ton of information that

515
00:22:20,609 --> 00:22:25,918
assets really bad we have a stack the

516
00:22:23,819 --> 00:22:28,949
safe for the concept file bug

517
00:22:25,919 --> 00:22:31,199
descriptions what we have to do with

518
00:22:28,949 --> 00:22:33,689
that is there's still some layer of

519
00:22:31,199 --> 00:22:36,329
translation that's required

520
00:22:33,689 --> 00:22:37,049
partly because Acrobat is a work in

521
00:22:36,329 --> 00:22:39,269
progress

522
00:22:37,049 --> 00:22:41,579
we're always modifying the code fixing

523
00:22:39,269 --> 00:22:43,949
other bugs adding other features so we

524
00:22:41,579 --> 00:22:45,839
want to be able to map the vulnerability

525
00:22:43,949 --> 00:22:49,289
that's been discovered to the latest

526
00:22:45,839 --> 00:22:51,269
codebase is it already fixed or where

527
00:22:49,289 --> 00:22:54,899
does the vulnerability occur in an in

528
00:22:51,269 --> 00:22:56,939
the latest code so we narrowed down the

529
00:22:54,899 --> 00:22:58,438
issue you know one interactive bit you

530
00:22:56,939 --> 00:23:00,269
let me know if you need any more detail

531
00:22:58,439 --> 00:23:03,359
on the vulnerability yourself or

532
00:23:00,269 --> 00:23:06,049
anything else there were two related

533
00:23:03,359 --> 00:23:08,789
failures going on we fix both of them

534
00:23:06,049 --> 00:23:11,549
one was in an image file format BMP

535
00:23:08,789 --> 00:23:17,299
there was a negative width test that was

536
00:23:11,549 --> 00:23:20,449
nicely crafted basically right far over

537
00:23:17,299 --> 00:23:23,158
memory allocated for other structures

538
00:23:20,449 --> 00:23:25,349
you fixed that but even with that there

539
00:23:23,159 --> 00:23:27,959
was some failure handling and some of

540
00:23:25,349 --> 00:23:29,789
this BMP code it's not necessarily Adobe

541
00:23:27,959 --> 00:23:33,469
code we have to have interfaces between

542
00:23:29,789 --> 00:23:36,269
it and the other libraries so we had to

543
00:23:33,469 --> 00:23:38,129
have better reporting so that the

544
00:23:36,269 --> 00:23:39,599
parsing could be aborted and the user

545
00:23:38,129 --> 00:23:43,589
could be informed that there was some

546
00:23:39,599 --> 00:23:46,049
malicious content in there and we handed

547
00:23:43,589 --> 00:23:48,569
that off to asset a a lot of discussion

548
00:23:46,049 --> 00:23:52,619
was going on between acid and us we try

549
00:23:48,569 --> 00:23:55,678
and follow up on this part not just they

550
00:23:52,619 --> 00:23:58,019
considered instant fix but also what

551
00:23:55,679 --> 00:23:59,879
similar issues there might be in other

552
00:23:58,019 --> 00:24:01,769
areas of the code and we can leverage

553
00:23:59,879 --> 00:24:03,238
both groups for that because acid can

554
00:24:01,769 --> 00:24:06,179
dive their perspective I'm looking at it

555
00:24:03,239 --> 00:24:08,159
and we can have our perspective looking

556
00:24:06,179 --> 00:24:10,019
at both the assembler and C++ and of the

557
00:24:08,159 --> 00:24:13,019
architecture itself

558
00:24:10,019 --> 00:24:15,179
it's an image file format so that was

559
00:24:13,019 --> 00:24:18,059
easy a good place to look is there any

560
00:24:15,179 --> 00:24:19,710
file format in all of these four we

561
00:24:18,059 --> 00:24:23,730
found at least that there was an issue

562
00:24:19,710 --> 00:24:25,980
with reporting back the problem to

563
00:24:23,730 --> 00:24:29,220
Acrobat itself and then managing failure

564
00:24:25,980 --> 00:24:31,350
so we fixed all of those another aspect

565
00:24:29,220 --> 00:24:34,259
is the there was one particular

566
00:24:31,350 --> 00:24:38,639
parameter which was crafted to cause

567
00:24:34,259 --> 00:24:40,679
memory issues image formats have width

568
00:24:38,639 --> 00:24:42,899
they have depth all kinds of other

569
00:24:40,679 --> 00:24:44,789
parameters so we we did an analysis and

570
00:24:42,899 --> 00:24:46,229
all of those different things to figure

571
00:24:44,789 --> 00:24:48,419
out which ones could possibly cause

572
00:24:46,230 --> 00:24:52,379
exploits and in several of these formats

573
00:24:48,419 --> 00:24:55,350
we address those issues a lot of

574
00:24:52,379 --> 00:24:57,418
regression testing one of the things

575
00:24:55,350 --> 00:24:58,649
from a development viewpoint and also

576
00:24:57,419 --> 00:25:01,950
develop a customer relationship

577
00:24:58,649 --> 00:25:03,809
viewpoint you see is that sometimes

578
00:25:01,950 --> 00:25:06,539
customers can actually be relying on

579
00:25:03,809 --> 00:25:08,639
problems in files or they may not even

580
00:25:06,539 --> 00:25:10,289
be aware that they're there Acrobat

581
00:25:08,639 --> 00:25:12,689
because it's so widely and read it

582
00:25:10,289 --> 00:25:15,419
because it's so widely deployed it has

583
00:25:12,690 --> 00:25:17,220
to do far more testing and has to be far

584
00:25:15,419 --> 00:25:18,840
more code hardened say the application

585
00:25:17,220 --> 00:25:20,970
that generated the file in the first

586
00:25:18,840 --> 00:25:24,658
place especially if it's an image file

587
00:25:20,970 --> 00:25:26,340
format and customers may be may have

588
00:25:24,659 --> 00:25:28,559
created a wallet content already which

589
00:25:26,340 --> 00:25:30,629
has you know problematic values within

590
00:25:28,559 --> 00:25:32,730
it which just survived that happen to

591
00:25:30,629 --> 00:25:34,199
survive our code in the past so we have

592
00:25:32,730 --> 00:25:36,210
to do a ton of regression testing to

593
00:25:34,200 --> 00:25:40,019
make sure this doesn't break existing

594
00:25:36,210 --> 00:25:46,950
customer work was now to karthik to

595
00:25:40,019 --> 00:25:49,139
characterize drops question actually

596
00:25:46,950 --> 00:25:51,299
we'll talk about the timelines for two

597
00:25:49,139 --> 00:25:53,729
different zero days and that'll I'll

598
00:25:51,299 --> 00:25:55,918
tell you what was different between the

599
00:25:53,730 --> 00:25:58,440
zero days and this must be disclosed

600
00:25:55,919 --> 00:26:02,820
issues the first thing that we'll

601
00:25:58,440 --> 00:26:04,740
discuss was CV 2011 24 62 and the

602
00:26:02,820 --> 00:26:07,970
original submission came into P cert on

603
00:26:04,740 --> 00:26:10,710
December 1st and it was an ominous

604
00:26:07,970 --> 00:26:16,440
stroke message looks like a zero day

605
00:26:10,710 --> 00:26:18,809
exploits reader 9 4 6 and obviously we

606
00:26:16,440 --> 00:26:20,690
create 0 days with the highest urgency

607
00:26:18,809 --> 00:26:22,789
and priority we drop everything else and

608
00:26:20,690 --> 00:26:25,459
started triage started mapping

609
00:26:22,789 --> 00:26:27,049
and very over to the developer team who

610
00:26:25,459 --> 00:26:29,269
also started looking at it the very same

611
00:26:27,049 --> 00:26:31,399
day and so on the different parties

612
00:26:29,269 --> 00:26:33,079
continue working on it and the patch was

613
00:26:31,399 --> 00:26:36,109
actually scheduled for sooner than the

614
00:26:33,079 --> 00:26:38,479
16th but we actually hit with others

615
00:26:36,109 --> 00:26:40,579
Airedale so we after a lot of agonizing

616
00:26:38,479 --> 00:26:43,699
decision making we pull the patches

617
00:26:40,579 --> 00:26:47,539
together and together released a common

618
00:26:43,699 --> 00:26:49,129
patch on the 16th of December so let's

619
00:26:47,539 --> 00:26:50,570
review the steps in the triage and

620
00:26:49,129 --> 00:26:51,889
vulnerable analysis from the piece or

621
00:26:50,570 --> 00:26:55,639
point of view whereas the point of view

622
00:26:51,889 --> 00:26:57,889
of the 0d as what responsibly disclosed

623
00:26:55,639 --> 00:27:00,019
issue we had to verify the crash and

624
00:26:57,889 --> 00:27:03,319
once we were able to get a crash on the

625
00:27:00,019 --> 00:27:06,079
latest version of Adobe Reader we shared

626
00:27:03,319 --> 00:27:09,408
it with the product teams one aspect of

627
00:27:06,079 --> 00:27:11,569
this was we're able to craft an X file

628
00:27:09,409 --> 00:27:13,669
there was just a POC without any attack

629
00:27:11,569 --> 00:27:16,509
code without any JavaScript code so the

630
00:27:13,669 --> 00:27:18,949
developers in qyz who are set up with

631
00:27:16,509 --> 00:27:20,809
environments that are hardened for

632
00:27:18,949 --> 00:27:22,879
security testing will be able to work on

633
00:27:20,809 --> 00:27:25,279
it without infecting their computers and

634
00:27:22,879 --> 00:27:29,178
possibly spreading malware on the

635
00:27:25,279 --> 00:27:31,669
network you know I'll stop here and also

636
00:27:29,179 --> 00:27:33,199
add a word about the automation systems

637
00:27:31,669 --> 00:27:36,049
that helped us beat up our triage

638
00:27:33,199 --> 00:27:37,429
so in examining those exploit one of the

639
00:27:36,049 --> 00:27:40,209
things that was doing was throwing down

640
00:27:37,429 --> 00:27:43,909
a file on disk the name of the file was

641
00:27:40,209 --> 00:27:46,849
d39 cap stuff that and so when you're in

642
00:27:43,909 --> 00:27:48,709
the midst of triage there's all these

643
00:27:46,849 --> 00:27:51,198
competing tasks that need your attention

644
00:27:48,709 --> 00:27:53,359
so the question I have to ask myself was

645
00:27:51,199 --> 00:27:55,369
do I spend time telling this file apart

646
00:27:53,359 --> 00:27:56,718
or do I continue debugging and try to

647
00:27:55,369 --> 00:27:58,539
get to the root cause of this bug and

648
00:27:56,719 --> 00:28:01,819
this is where automation stepped in and

649
00:27:58,539 --> 00:28:04,279
helped us accelerate the working on

650
00:28:01,819 --> 00:28:06,168
important things so at in Pisa we

651
00:28:04,279 --> 00:28:09,499
actually built what you could call I

652
00:28:06,169 --> 00:28:12,559
guess an internal virustotal tool it's

653
00:28:09,499 --> 00:28:16,249
an array of parallel antivirus scanners

654
00:28:12,559 --> 00:28:18,649
so we email this tool the file that was

655
00:28:16,249 --> 00:28:20,389
dropped by this export file and the

656
00:28:18,649 --> 00:28:24,139
result we got back was that the export

657
00:28:20,389 --> 00:28:25,668
with the pista file was clean and you

658
00:28:24,139 --> 00:28:27,258
know we took that at face value for the

659
00:28:25,669 --> 00:28:30,049
time being and we did follow up with it

660
00:28:27,259 --> 00:28:32,019
later but there the analysis returned by

661
00:28:30,049 --> 00:28:34,009
the AV products was helpful in us

662
00:28:32,019 --> 00:28:36,500
ramping up and focusing on other things

663
00:28:34,009 --> 00:28:38,240
and later we did do the due diligence of

664
00:28:36,500 --> 00:28:40,220
to this file and then running my other

665
00:28:38,240 --> 00:28:43,220
files that had the same embedded file

666
00:28:40,220 --> 00:28:46,039
format you 3d and then noticing that any

667
00:28:43,220 --> 00:28:48,490
u3d file and it's a process of being

668
00:28:46,039 --> 00:28:51,350
opened up by reader would drop the same

669
00:28:48,490 --> 00:28:53,450
file and they're all obviously benign

670
00:28:51,350 --> 00:28:55,370
but when you're in the midst of picking

671
00:28:53,450 --> 00:28:57,169
apart a zero do things like this can be

672
00:28:55,370 --> 00:29:00,649
distracting automation helps you focus

673
00:28:57,169 --> 00:29:03,020
on the important things so I said a

674
00:29:00,650 --> 00:29:05,210
minute ago we also created a safe POC

675
00:29:03,020 --> 00:29:07,760
and it was essential to do this as

676
00:29:05,210 --> 00:29:10,490
quickly as possible and it's not always

677
00:29:07,760 --> 00:29:14,059
very easy because it was a complex

678
00:29:10,490 --> 00:29:15,620
attack there are many paths through the

679
00:29:14,059 --> 00:29:17,780
export file as it's running through a

680
00:29:15,620 --> 00:29:19,789
platform product and creating the safe

681
00:29:17,780 --> 00:29:23,360
do see if it's possible in QuickTime

682
00:29:19,789 --> 00:29:26,780
then we were able to throw it over to

683
00:29:23,360 --> 00:29:28,879
the product teams quickly another

684
00:29:26,780 --> 00:29:31,820
artifact that was very helpful in the

685
00:29:28,880 --> 00:29:34,370
security teams analysis of the bug was

686
00:29:31,820 --> 00:29:36,740
the notes that the developers were

687
00:29:34,370 --> 00:29:38,600
sharing with each other even the even

688
00:29:36,740 --> 00:29:40,039
extracts if their emails were passing

689
00:29:38,600 --> 00:29:41,809
with each other even to bcc'd on the

690
00:29:40,039 --> 00:29:44,929
emails and communications between the

691
00:29:41,809 --> 00:29:46,370
days was very helpful for us and let us

692
00:29:44,929 --> 00:29:49,880
gain insights into the root cause of the

693
00:29:46,370 --> 00:29:51,350
bug and this is a point that I made on

694
00:29:49,880 --> 00:29:52,760
the slide with the timelines but the

695
00:29:51,350 --> 00:29:55,820
patch was originally scheduled for

696
00:29:52,760 --> 00:29:57,470
sooner than the 16th but as luck would

697
00:29:55,820 --> 00:30:00,309
have it were hit with another zero day

698
00:29:57,470 --> 00:30:03,080
so we went to stop to work on this and

699
00:30:00,309 --> 00:30:05,418
pulled together both patches and did a

700
00:30:03,080 --> 00:30:06,590
combined patch on the 16th so I'm gonna

701
00:30:05,419 --> 00:30:08,210
hand it back to David and he's going to

702
00:30:06,590 --> 00:30:14,928
tell you his perspectives on working on

703
00:30:08,210 --> 00:30:16,760
this Ernie thanks Karthik so always it a

704
00:30:14,929 --> 00:30:19,100
tense time being a developer you get a

705
00:30:16,760 --> 00:30:21,730
note about a zero day there's no time

706
00:30:19,100 --> 00:30:23,110
they should have been fixed yesterday

707
00:30:21,730 --> 00:30:25,580
[Music]

708
00:30:23,110 --> 00:30:27,110
different from the prior bug what we're

709
00:30:25,580 --> 00:30:29,480
doing is we're discovering the nature of

710
00:30:27,110 --> 00:30:31,340
it empower with asset from our different

711
00:30:29,480 --> 00:30:33,230
viewpoints that means there's a lot of

712
00:30:31,340 --> 00:30:35,299
communication going back between the two

713
00:30:33,230 --> 00:30:37,760
teams on the nature of the bug from

714
00:30:35,299 --> 00:30:39,440
these different perspectives and we have

715
00:30:37,760 --> 00:30:42,620
an example file it may be potentially

716
00:30:39,440 --> 00:30:44,870
unsafe because as it hasn't sanitized it

717
00:30:42,620 --> 00:30:47,000
yet so from a developer's perspective

718
00:30:44,870 --> 00:30:48,750
that can be quite problematic

719
00:30:47,000 --> 00:30:51,240
our systems are usually pretty open

720
00:30:48,750 --> 00:30:53,640
we're grabbing source code because we

721
00:30:51,240 --> 00:30:57,990
want the latest code there's a lot of

722
00:30:53,640 --> 00:31:02,400
gateways open so this involves extremely

723
00:30:57,990 --> 00:31:04,410
careful handling of the bug and luckily

724
00:31:02,400 --> 00:31:07,440
we had a fix the day we were notified

725
00:31:04,410 --> 00:31:09,450
and I guess that was in part because we

726
00:31:07,440 --> 00:31:12,210
noted down to the using format or as I

727
00:31:09,450 --> 00:31:15,920
did before even got it that's one of the

728
00:31:12,210 --> 00:31:18,840
two 3d file formats the PDF supports

729
00:31:15,920 --> 00:31:20,580
because I happen to have drafty part of

730
00:31:18,840 --> 00:31:22,649
the spec for it I could pretty quickly

731
00:31:20,580 --> 00:31:24,500
get to the area of the file that was

732
00:31:22,650 --> 00:31:27,030
causing the problem

733
00:31:24,500 --> 00:31:30,000
3ds modular so one of the things we

734
00:31:27,030 --> 00:31:32,370
could do was build just the component

735
00:31:30,000 --> 00:31:35,490
where the failure occurred and passed

736
00:31:32,370 --> 00:31:37,889
that to asset they could drop it into an

737
00:31:35,490 --> 00:31:40,080
existing copy of Reader or Acrobat and

738
00:31:37,890 --> 00:31:42,480
verify it's fixed and because their

739
00:31:40,080 --> 00:31:44,550
systems you know they're much more used

740
00:31:42,480 --> 00:31:45,930
to dealing with unsanitized files they

741
00:31:44,550 --> 00:31:50,520
could do far more testing than we could

742
00:31:45,930 --> 00:31:52,170
on it and another complexity here was

743
00:31:50,520 --> 00:31:54,900
that there was a JavaScript issue

744
00:31:52,170 --> 00:31:57,270
basically JavaScript and the PDF was

745
00:31:54,900 --> 00:32:00,570
actually causing infinite infinite loops

746
00:31:57,270 --> 00:32:02,550
or other malicious behavior and we

747
00:32:00,570 --> 00:32:04,350
didn't know initially I mean is this an

748
00:32:02,550 --> 00:32:06,540
aspect of the same Barger's it's

749
00:32:04,350 --> 00:32:08,100
something different a lot of discussion

750
00:32:06,540 --> 00:32:09,149
with the asset team over this because

751
00:32:08,100 --> 00:32:12,510
they would be most of the working

752
00:32:09,150 --> 00:32:14,430
characterized in the JavaScript part by

753
00:32:12,510 --> 00:32:17,250
sharing all that information and also by

754
00:32:14,430 --> 00:32:19,380
passing the precompiled III library to

755
00:32:17,250 --> 00:32:21,210
them we could pretty quickly determine

756
00:32:19,380 --> 00:32:26,460
okay these are two separate issues going

757
00:32:21,210 --> 00:32:28,020
on here now in this case it's important

758
00:32:26,460 --> 00:32:32,430
to follow up we've come up with this

759
00:32:28,020 --> 00:32:34,230
picture really quickly it has an impact

760
00:32:32,430 --> 00:32:36,150
on the customer because that's it was a

761
00:32:34,230 --> 00:32:39,870
bug and materials usage and pretty much

762
00:32:36,150 --> 00:32:43,020
every 3d file uses materials I was just

763
00:32:39,870 --> 00:32:44,939
going to end up with a black screen what

764
00:32:43,020 --> 00:32:46,650
we have to do then because of this risk

765
00:32:44,940 --> 00:32:49,620
of customer impact again this thing of

766
00:32:46,650 --> 00:32:51,690
are they relying on files which may be a

767
00:32:49,620 --> 00:32:54,120
problem attic in the past we had to do a

768
00:32:51,690 --> 00:32:55,620
lot of testing and we also limited the

769
00:32:54,120 --> 00:32:57,389
deployment of the a 9 out of band

770
00:32:55,620 --> 00:32:59,669
installer I think that was in part

771
00:32:57,390 --> 00:33:01,900
because the vulnerability the actual

772
00:32:59,670 --> 00:33:04,309
attack in progress was in Acrobat

773
00:33:01,900 --> 00:33:07,070
that was the logical place to put it a

774
00:33:04,309 --> 00:33:10,700
10 also has some litigations already in

775
00:33:07,070 --> 00:33:13,280
place as I mentioned lots of regression

776
00:33:10,700 --> 00:33:15,530
testing on that not with their proof of

777
00:33:13,280 --> 00:33:19,129
concept file but with other files that

778
00:33:15,530 --> 00:33:21,678
we had available with similar content so

779
00:33:19,130 --> 00:33:24,380
we could try to ensure it didn't break

780
00:33:21,679 --> 00:33:25,760
any customer workflows unfortunately in

781
00:33:24,380 --> 00:33:27,590
this case it did break a customer

782
00:33:25,760 --> 00:33:31,309
workflow it was a really obscure case

783
00:33:27,590 --> 00:33:33,350
where just a few people had some files

784
00:33:31,309 --> 00:33:35,570
where there were no materials in them

785
00:33:33,350 --> 00:33:40,209
and we were now incorrectly reporting in

786
00:33:35,570 --> 00:33:42,710
Acrobat 9 that was a malicious file so

787
00:33:40,210 --> 00:33:43,970
one thing is because we deployed a nine

788
00:33:42,710 --> 00:33:46,100
early and we could get that feedback

789
00:33:43,970 --> 00:33:49,850
early from the customers we could

790
00:33:46,100 --> 00:33:52,449
release a more complex fix for the a

791
00:33:49,850 --> 00:33:57,500
nine regular dot release and also a ten

792
00:33:52,450 --> 00:34:03,350
which address that issue so to Karthik

793
00:33:57,500 --> 00:34:05,120
regarding zero day so we've seen an

794
00:34:03,350 --> 00:34:07,399
example of one responsibility supposed

795
00:34:05,120 --> 00:34:08,839
issue and another example of responding

796
00:34:07,400 --> 00:34:11,690
to a zero day and I thought it's

797
00:34:08,840 --> 00:34:14,540
appropriate to interject a slide about

798
00:34:11,690 --> 00:34:17,300
why zero days are different so with the

799
00:34:14,540 --> 00:34:19,159
regular bug we have more time and we can

800
00:34:17,300 --> 00:34:20,840
think more about how to make the fix as

801
00:34:19,159 --> 00:34:22,460
robust as possible within the

802
00:34:20,840 --> 00:34:24,800
constraints but with a zero day we don't

803
00:34:22,460 --> 00:34:28,100
have that luxury we have to make

804
00:34:24,800 --> 00:34:31,820
decisions with a lot of stress and under

805
00:34:28,100 --> 00:34:33,469
duress if you will one of the zero days

806
00:34:31,820 --> 00:34:36,470
the first day that David just mentioned

807
00:34:33,469 --> 00:34:40,009
require to follow up and because a few

808
00:34:36,469 --> 00:34:43,520
files are broken the subsequent fix was

809
00:34:40,010 --> 00:34:45,710
introduced in the next major release and

810
00:34:43,520 --> 00:34:48,770
zero days also make us think really hard

811
00:34:45,710 --> 00:34:51,350
about whether it's good to share PLC's

812
00:34:48,770 --> 00:34:53,030
or expose at a certain time so we're the

813
00:34:51,350 --> 00:34:55,069
responsibles code issue which has no

814
00:34:53,030 --> 00:34:56,780
attack code it's a no-brainer we share

815
00:34:55,070 --> 00:34:58,940
it with the developer team freely and we

816
00:34:56,780 --> 00:35:01,220
want the file to be available to any

817
00:34:58,940 --> 00:35:02,930
product team member or quality engineer

818
00:35:01,220 --> 00:35:05,779
who's doing any testing with that file

819
00:35:02,930 --> 00:35:08,629
though the zero day we have to have to

820
00:35:05,780 --> 00:35:11,210
draw a line and if it's not possible to

821
00:35:08,630 --> 00:35:13,130
reduce that exploit file into a safe POC

822
00:35:11,210 --> 00:35:15,050
which just crashes the platform and does

823
00:35:13,130 --> 00:35:15,740
nothing else when we do actually make

824
00:35:15,050 --> 00:35:18,080
the decision

825
00:35:15,740 --> 00:35:20,540
share that file with the developers with

826
00:35:18,080 --> 00:35:23,180
the strong caveat that this should be

827
00:35:20,540 --> 00:35:25,270
only debug on an isolated machine or in

828
00:35:23,180 --> 00:35:27,770
some cases if it's an exploit that

829
00:35:25,270 --> 00:35:30,380
targets Windows only then please debug

830
00:35:27,770 --> 00:35:33,050
on a Mac and will discover the this is

831
00:35:30,380 --> 00:35:35,450
what we instructed able to do on the

832
00:35:33,050 --> 00:35:42,230
second area we'll talk about animate any

833
00:35:35,450 --> 00:35:44,060
questions up to this point so the second

834
00:35:42,230 --> 00:35:48,470
zero day we had to contend with was CV

835
00:35:44,060 --> 00:35:51,650
2011 4639 the first one had come into P

836
00:35:48,470 --> 00:35:52,580
cert on December 1st and this one was on

837
00:35:51,650 --> 00:35:54,950
December 9th

838
00:35:52,580 --> 00:35:56,869
so picture us working furiously at

839
00:35:54,950 --> 00:35:58,700
fixing this and testing this and as

840
00:35:56,869 --> 00:36:00,880
we're just about getting ready to pat

841
00:35:58,700 --> 00:36:03,560
ourselves on the back boom

842
00:36:00,880 --> 00:36:06,790
so as in the first day or day we started

843
00:36:03,560 --> 00:36:08,900
analysis from every angle triage map

844
00:36:06,790 --> 00:36:11,330
developer response as soon as possible

845
00:36:08,900 --> 00:36:12,830
and we pull the patches together and

846
00:36:11,330 --> 00:36:16,270
released a common passion on the 16th of

847
00:36:12,830 --> 00:36:19,940
December as with the first zero day a

848
00:36:16,270 --> 00:36:21,859
submitter has an ominous extinct style

849
00:36:19,940 --> 00:36:23,839
and writing about this exploit this

850
00:36:21,859 --> 00:36:28,819
exploit reader nine four six but appears

851
00:36:23,839 --> 00:36:30,619
to be a different issue so we follow the

852
00:36:28,820 --> 00:36:34,700
same processing the vulnerability triage

853
00:36:30,619 --> 00:36:36,349
analysis stage we appreciated that

854
00:36:34,700 --> 00:36:37,669
creating a safety OC in this case would

855
00:36:36,349 --> 00:36:40,310
take very long because it was a more

856
00:36:37,670 --> 00:36:42,260
complex attack and we told David here

857
00:36:40,310 --> 00:36:44,270
look this is the best we can do with the

858
00:36:42,260 --> 00:36:46,760
time we have it will continue taking

859
00:36:44,270 --> 00:36:48,619
this file apart and reducing and making

860
00:36:46,760 --> 00:36:52,040
this it's possible but please debug on a

861
00:36:48,619 --> 00:36:54,020
Mac in the meantime as with the first

862
00:36:52,040 --> 00:36:55,820
year date and emails are flying between

863
00:36:54,020 --> 00:36:58,430
the developers helped in because

864
00:36:55,820 --> 00:37:00,220
analysis also because this is a very

865
00:36:58,430 --> 00:37:03,140
complex format we really needed his help

866
00:37:00,220 --> 00:37:05,569
and as David say he was one of the

867
00:37:03,140 --> 00:37:07,220
people who drafted the specs so his

868
00:37:05,570 --> 00:37:08,660
expertise and background in the spec is

869
00:37:07,220 --> 00:37:10,580
very helpful in us understanding the

870
00:37:08,660 --> 00:37:15,529
file format and how that led into the

871
00:37:10,580 --> 00:37:16,848
actual crash and is the point that

872
00:37:15,530 --> 00:37:19,420
you've heard me make before but both

873
00:37:16,849 --> 00:37:24,109
patches were pulled together for the 16

874
00:37:19,420 --> 00:37:26,960
now back to David for his be thanks

875
00:37:24,109 --> 00:37:28,170
kazakh so just like karthik we're

876
00:37:26,960 --> 00:37:29,609
exhausted

877
00:37:28,170 --> 00:37:31,380
like breathing a sigh of relief from the

878
00:37:29,609 --> 00:37:35,779
first vulnerability then along comes

879
00:37:31,380 --> 00:37:38,790
this one and it's obviously not related

880
00:37:35,780 --> 00:37:40,589
again we get this stack fall from asset

881
00:37:38,790 --> 00:37:43,650
proof-of-concept file also the

882
00:37:40,589 --> 00:37:48,390
invaluable information about it's safe

883
00:37:43,650 --> 00:37:50,819
to debug on the Mac that really helps

884
00:37:48,390 --> 00:37:52,259
because then we can go at the bug you

885
00:37:50,819 --> 00:37:55,440
know we can go debugging on really

886
00:37:52,260 --> 00:37:58,950
quickly on the Mac there's no caution

887
00:37:55,440 --> 00:38:00,839
required this case it was in the second

888
00:37:58,950 --> 00:38:03,419
of the two 3d file formats the PDF

889
00:38:00,839 --> 00:38:05,700
supports and that's PRC now one thing

890
00:38:03,420 --> 00:38:09,329
with PRC is that some of the maintenance

891
00:38:05,700 --> 00:38:13,109
for the code is ongoing with a

892
00:38:09,329 --> 00:38:14,099
third-party firm in France and so we

893
00:38:13,109 --> 00:38:16,049
have to basically launch an

894
00:38:14,099 --> 00:38:18,960
around-the-clock investigation on this

895
00:38:16,049 --> 00:38:21,210
we got the u.s. talking with India we

896
00:38:18,960 --> 00:38:22,980
haven't they're talking with France back

897
00:38:21,210 --> 00:38:25,170
to the US again all the while acid and

898
00:38:22,980 --> 00:38:27,210
Acrobat communicating sirs just this

899
00:38:25,170 --> 00:38:30,450
like huge deluge of emails and

900
00:38:27,210 --> 00:38:31,829
voicemails going on a lot of overlapping

901
00:38:30,450 --> 00:38:33,509
discussions we're trying to stay away

902
00:38:31,829 --> 00:38:34,950
for as long as possible so that we can

903
00:38:33,510 --> 00:38:37,230
have meaningful discussions it's not

904
00:38:34,950 --> 00:38:42,899
just a ping handoff to the next person

905
00:38:37,230 --> 00:38:45,420
that helped a lot by plus 24 hours we've

906
00:38:42,900 --> 00:38:47,520
got a proof of concept file from asset

907
00:38:45,420 --> 00:38:49,799
which has the Java Script stripped so

908
00:38:47,520 --> 00:38:51,690
you know that allows us to figure out

909
00:38:49,799 --> 00:38:53,609
okay if we make a fix is it really

910
00:38:51,690 --> 00:38:56,730
effective at isn't hanging or crashing

911
00:38:53,609 --> 00:38:59,160
any more and by 48 hours we've nailed it

912
00:38:56,730 --> 00:39:01,650
down to the point of origin where in the

913
00:38:59,160 --> 00:39:03,149
file format is the issue and actually

914
00:39:01,650 --> 00:39:04,650
directly address the book so you can see

915
00:39:03,150 --> 00:39:10,260
it's it's gone around a couple of times

916
00:39:04,650 --> 00:39:12,210
around the world again follow up by 96

917
00:39:10,260 --> 00:39:14,250
hours we've got a full safe proof of

918
00:39:12,210 --> 00:39:17,190
concept file that means we can start

919
00:39:14,250 --> 00:39:18,569
debugging it properly on Windows making

920
00:39:17,190 --> 00:39:21,750
sure the fix applies there what

921
00:39:18,569 --> 00:39:23,339
modifications are required to it yes so

922
00:39:21,750 --> 00:39:25,290
the much wider platform analysis it also

923
00:39:23,339 --> 00:39:27,240
means that we can start testing on other

924
00:39:25,290 --> 00:39:28,950
versions and we started with Acrobat 9

925
00:39:27,240 --> 00:39:32,058
then we spread out okay is this an

926
00:39:28,950 --> 00:39:34,950
acrobat 8 issue is it a 10 issue

927
00:39:32,059 --> 00:39:36,480
validate the fix again as before you

928
00:39:34,950 --> 00:39:40,078
know there could be some customer issues

929
00:39:36,480 --> 00:39:42,120
with this and some agonizing discussion

930
00:39:40,079 --> 00:39:45,030
because we'd already delayed the patch

931
00:39:42,120 --> 00:39:49,589
to deploy the u3 ethics do we delay it

932
00:39:45,030 --> 00:39:51,240
again to deploy this fix the other patch

933
00:39:49,590 --> 00:39:55,080
you know there other fixes in that patch

934
00:39:51,240 --> 00:39:56,520
as well so again it helps a lot of

935
00:39:55,080 --> 00:39:59,250
feedback from asset over what the

936
00:39:56,520 --> 00:40:01,350
severity of the bug is the conditions of

937
00:39:59,250 --> 00:40:05,040
the export that helped us decide yet it

938
00:40:01,350 --> 00:40:08,580
was worth delaying again a lot of

939
00:40:05,040 --> 00:40:10,500
regression testing this problem was in

940
00:40:08,580 --> 00:40:13,890
but was in geometry reference which is

941
00:40:10,500 --> 00:40:16,950
again another core piece 3d file formats

942
00:40:13,890 --> 00:40:19,470
so a ton of files had to be tested on

943
00:40:16,950 --> 00:40:21,870
various platforms unfortunately in this

944
00:40:19,470 --> 00:40:24,410
case there was no follow up customer and

945
00:40:21,870 --> 00:40:30,440
customer impact on their workplace and

946
00:40:24,410 --> 00:40:33,480
to Karthik lessons learnt thanks David

947
00:40:30,440 --> 00:40:36,390
so in the next few slides we'll sum it

948
00:40:33,480 --> 00:40:37,860
up sum up what we learned and tell you

949
00:40:36,390 --> 00:40:40,830
why they where we think it's great that

950
00:40:37,860 --> 00:40:43,610
we collaborated I think it's it's fairly

951
00:40:40,830 --> 00:40:45,960
clear that the the combined expertise of

952
00:40:43,610 --> 00:40:48,480
David and his team and the expertise in

953
00:40:45,960 --> 00:40:52,110
our team helped us get to the bottom of

954
00:40:48,480 --> 00:40:55,440
the zero days quickly so in both cases

955
00:40:52,110 --> 00:40:56,730
the attacks were complex and in the

956
00:40:55,440 --> 00:40:59,880
second zero day for example there was a

957
00:40:56,730 --> 00:41:01,740
JavaScript loop and the certain versions

958
00:40:59,880 --> 00:41:04,470
only were targeted and the security

959
00:41:01,740 --> 00:41:05,910
people really helped inform the actor

960
00:41:04,470 --> 00:41:08,970
about team as to how to go about dealing

961
00:41:05,910 --> 00:41:11,399
with with this complexity and the other

962
00:41:08,970 --> 00:41:13,560
side of it is that we relied on David

963
00:41:11,400 --> 00:41:18,720
and his team heavily for informing us

964
00:41:13,560 --> 00:41:21,060
about specifics of the file formats so

965
00:41:18,720 --> 00:41:23,189
from working together on on a few

966
00:41:21,060 --> 00:41:25,710
responsibilities is closed issues and I

967
00:41:23,190 --> 00:41:27,390
just give give you one case study the

968
00:41:25,710 --> 00:41:30,090
working relationship between David and

969
00:41:27,390 --> 00:41:32,549
myself and the two teams were in place

970
00:41:30,090 --> 00:41:36,840
already so our response to the 2-0 days

971
00:41:32,550 --> 00:41:39,360
was quicker and more streamlined and in

972
00:41:36,840 --> 00:41:41,130
parallel the work that David was doing a

973
00:41:39,360 --> 00:41:43,530
partially informed by asset in

974
00:41:41,130 --> 00:41:45,590
proactively fixing similar bugs

975
00:41:43,530 --> 00:41:48,960
variation analysis I think it's called

976
00:41:45,590 --> 00:41:51,270
helped us find in the interim another u3

977
00:41:48,960 --> 00:41:53,670
debug post the first err day today if

978
00:41:51,270 --> 00:41:55,480
it's down that and fixed that and this

979
00:41:53,670 --> 00:41:57,400
is only possible because of

980
00:41:55,480 --> 00:41:59,790
is back around in the format and was

981
00:41:57,400 --> 00:42:02,500
awareness of working on security issues

982
00:41:59,790 --> 00:42:03,759
so when I hand it back to David for one

983
00:42:02,500 --> 00:42:04,950
last time to tell you about best

984
00:42:03,760 --> 00:42:09,119
practices

985
00:42:04,950 --> 00:42:11,529
thanks Kasich okay so what do we learned

986
00:42:09,119 --> 00:42:13,480
it's always good to follow up on a tight

987
00:42:11,530 --> 00:42:15,400
deadline you're making a fix it's you

988
00:42:13,480 --> 00:42:17,050
know doing it in 24-48 hours

989
00:42:15,400 --> 00:42:19,240
it's never going to be perfect they're

990
00:42:17,050 --> 00:42:21,580
always going to be some customer issues

991
00:42:19,240 --> 00:42:23,589
to address at some point and the fix has

992
00:42:21,580 --> 00:42:25,270
to be so small so tight to get into

993
00:42:23,590 --> 00:42:27,580
something like a patch be a proof of

994
00:42:25,270 --> 00:42:29,350
hatch usually it requires some

995
00:42:27,580 --> 00:42:33,040
embellishment some expansion to make it

996
00:42:29,350 --> 00:42:34,900
itself more robust it's better to detect

997
00:42:33,040 --> 00:42:36,840
zero-day issues and it really as better

998
00:42:34,900 --> 00:42:40,780
detect zero-day issues before they occur

999
00:42:36,840 --> 00:42:45,760
boy after what we've been through so

1000
00:42:40,780 --> 00:42:48,300
toward that ends asset is this great

1001
00:42:45,760 --> 00:42:51,820
repository of techniques tips feedback

1002
00:42:48,300 --> 00:42:55,270
we can all draw on for future bugs and

1003
00:42:51,820 --> 00:42:57,730
from a product perspective when we're

1004
00:42:55,270 --> 00:42:59,380
trying to fix our own bugs even if

1005
00:42:57,730 --> 00:43:01,720
they're not vulnerability bug security

1006
00:42:59,380 --> 00:43:04,840
bugs that are you know non zero days

1007
00:43:01,720 --> 00:43:06,910
we're still looking for around in that

1008
00:43:04,840 --> 00:43:08,619
local area of the code is there some

1009
00:43:06,910 --> 00:43:12,759
problem nearby that we should be fixing

1010
00:43:08,619 --> 00:43:14,950
at the same time addressing zero day

1011
00:43:12,760 --> 00:43:17,500
starts long before the zero day itself

1012
00:43:14,950 --> 00:43:19,899
and there's a long tail afterwards so

1013
00:43:17,500 --> 00:43:22,570
prep beforehand things that Karthik

1014
00:43:19,900 --> 00:43:24,430
mentioned like the creation of the

1015
00:43:22,570 --> 00:43:28,540
automation that that was invaluable to

1016
00:43:24,430 --> 00:43:31,600
India like rule out that file other

1017
00:43:28,540 --> 00:43:34,359
aspects things like asset creates

1018
00:43:31,600 --> 00:43:35,680
training modules for developers I found

1019
00:43:34,359 --> 00:43:39,279
those invaluable myself and a lot of

1020
00:43:35,680 --> 00:43:41,859
other people have too and for as far as

1021
00:43:39,280 --> 00:43:44,140
the longtail know so first let's talk

1022
00:43:41,859 --> 00:43:45,609
about duplication so when you're in a

1023
00:43:44,140 --> 00:43:47,410
zero-day situation it's extremely

1024
00:43:45,609 --> 00:43:49,540
stressful there's a lot of communication

1025
00:43:47,410 --> 00:43:51,759
overhead there's a lot of discussion

1026
00:43:49,540 --> 00:43:54,009
about the same topics from different

1027
00:43:51,760 --> 00:43:57,070
perspectives different people some of

1028
00:43:54,010 --> 00:43:59,619
that's unavoidable I personally find a

1029
00:43:57,070 --> 00:44:02,020
lot of that very helpful because you're

1030
00:43:59,619 --> 00:44:03,190
getting someone else's perspective it's

1031
00:44:02,020 --> 00:44:05,290
almost like you know you're doing white

1032
00:44:03,190 --> 00:44:06,760
box and black box testing at the same

1033
00:44:05,290 --> 00:44:08,650
time and sharing the information in real

1034
00:44:06,760 --> 00:44:09,400
time with each other I think that's a

1035
00:44:08,650 --> 00:44:10,690
big help

1036
00:44:09,400 --> 00:44:13,030
especially with things like say that

1037
00:44:10,690 --> 00:44:14,170
javascript issue we didn't know we fixed

1038
00:44:13,030 --> 00:44:16,540
the thing it's still broken what the

1039
00:44:14,170 --> 00:44:18,100
heck's going on here so having you know

1040
00:44:16,540 --> 00:44:21,580
Karthik and other people's perspectives

1041
00:44:18,100 --> 00:44:23,799
on that really helped part of the

1042
00:44:21,580 --> 00:44:25,480
longtail we added a choke point to the

1043
00:44:23,800 --> 00:44:28,330
3d component and some other high risk

1044
00:44:25,480 --> 00:44:30,070
components so in Acrobat 9 now if you

1045
00:44:28,330 --> 00:44:32,380
have a file if you encounter a far which

1046
00:44:30,070 --> 00:44:35,080
has 3d you'll actually get a yellow bar

1047
00:44:32,380 --> 00:44:36,640
which will request do you trust this do

1048
00:44:35,080 --> 00:44:39,720
you want to really you know go and look

1049
00:44:36,640 --> 00:44:42,850
at the content of this file and some

1050
00:44:39,720 --> 00:44:44,770
enterprise level policies where they can

1051
00:44:42,850 --> 00:44:47,950
turn on or turn off this particular

1052
00:44:44,770 --> 00:44:49,480
content by default I mean for aerospace

1053
00:44:47,950 --> 00:44:51,100
companies that we really useful to have

1054
00:44:49,480 --> 00:44:54,100
it turned on and usually they don't

1055
00:44:51,100 --> 00:44:57,130
share files very often when externally

1056
00:44:54,100 --> 00:44:58,900
to the organization first and like an

1057
00:44:57,130 --> 00:45:04,210
accountancy firm I mean who needs to see

1058
00:44:58,900 --> 00:45:06,700
3d and finally finding similar bugs a

1059
00:45:04,210 --> 00:45:09,220
lot of variation analysis it's ongoing

1060
00:45:06,700 --> 00:45:10,930
work working with asset and standalone

1061
00:45:09,220 --> 00:45:12,819
to to just look at the overall

1062
00:45:10,930 --> 00:45:14,410
architecture look at existing

1063
00:45:12,820 --> 00:45:16,660
vulnerabilities you see if there any

1064
00:45:14,410 --> 00:45:18,870
patterns already they're all being

1065
00:45:16,660 --> 00:45:25,870
introduced that could be problematic and

1066
00:45:18,870 --> 00:45:28,600
to karthick to conclude so to sort of

1067
00:45:25,870 --> 00:45:31,330
sum it up once again through the process

1068
00:45:28,600 --> 00:45:33,910
in place with David Seaman in our team

1069
00:45:31,330 --> 00:45:36,880
we were able to generate vulnerability

1070
00:45:33,910 --> 00:45:38,290
analysis that were successful for map

1071
00:45:36,880 --> 00:45:41,020
partners to be able to generate security

1072
00:45:38,290 --> 00:45:43,000
signatures so users who were able to

1073
00:45:41,020 --> 00:45:45,820
patch the patches we put out or

1074
00:45:43,000 --> 00:45:48,760
protected obviously and other users who

1075
00:45:45,820 --> 00:45:50,260
whose environments were being tested if

1076
00:45:48,760 --> 00:45:51,580
they were able to deploy the signatures

1077
00:45:50,260 --> 00:45:53,530
that the park is created they were

1078
00:45:51,580 --> 00:45:55,330
protected because the signatures would

1079
00:45:53,530 --> 00:45:58,210
be in the middle between an exploit and

1080
00:45:55,330 --> 00:45:59,560
the vulnerable app so through the

1081
00:45:58,210 --> 00:46:01,870
collaboration between David and myself

1082
00:45:59,560 --> 00:46:06,370
and our teams we able to successfully

1083
00:46:01,870 --> 00:46:07,299
protect our users so with that I we hope

1084
00:46:06,370 --> 00:46:09,580
that we've made the point that

1085
00:46:07,300 --> 00:46:11,290
developers and vulnerability researcher

1086
00:46:09,580 --> 00:46:13,299
should collaborate thank you very much

1087
00:46:11,290 --> 00:46:17,220
for your attention and we'll take any

1088
00:46:13,300 --> 00:46:17,220
questions you have yes

1089
00:46:21,170 --> 00:46:41,890
okay so also this is that hierarchy so

1090
00:46:38,270 --> 00:46:44,210
as one of the one of the things that the

1091
00:46:41,890 --> 00:46:46,339
security team tries to do is spread its

1092
00:46:44,210 --> 00:46:48,380
net as wide as possible so they haven't

1093
00:46:46,339 --> 00:46:51,259
mentioned briefly the trainings were put

1094
00:46:48,380 --> 00:46:53,420
in place so we have been working with

1095
00:46:51,260 --> 00:46:55,040
our business units in management we've

1096
00:46:53,420 --> 00:46:56,540
mandated that every product team is a

1097
00:46:55,040 --> 00:46:58,460
certain percentage of engineers signed

1098
00:46:56,540 --> 00:47:00,950
off that they're trained to a certain

1099
00:46:58,460 --> 00:47:02,569
level so their security is already on

1100
00:47:00,950 --> 00:47:04,490
the radar and they're aware of it so

1101
00:47:02,569 --> 00:47:07,940
that's one way of us getting a foothold

1102
00:47:04,490 --> 00:47:11,118
in their teams and later when we engage

1103
00:47:07,940 --> 00:47:13,309
serve offers eat from the reactive side

1104
00:47:11,119 --> 00:47:15,020
it's mainly over emailed and I try to

1105
00:47:13,309 --> 00:47:18,079
follow up on meeting person in

1106
00:47:15,020 --> 00:47:19,369
establishing rapport with them and the

1107
00:47:18,079 --> 00:47:22,520
researchers at work on the proactive

1108
00:47:19,369 --> 00:47:24,440
side are part of developer meetings and

1109
00:47:22,520 --> 00:47:26,119
queueing meetings so they're effectively

1110
00:47:24,440 --> 00:47:28,760
consulting security team members are

1111
00:47:26,119 --> 00:47:31,430
these different teams so we try to

1112
00:47:28,760 --> 00:47:34,040
anticipate problems and communications

1113
00:47:31,430 --> 00:47:37,399
and we work hard on ironing them out any

1114
00:47:34,040 --> 00:47:38,869
thank you Thanks so yeah I mean

1115
00:47:37,400 --> 00:47:41,059
definitely getting a good working

1116
00:47:38,869 --> 00:47:43,339
relationship with a security team that's

1117
00:47:41,059 --> 00:47:44,720
critical like have a lot of exchanges

1118
00:47:43,339 --> 00:47:46,880
with Karthik before I knew who he was

1119
00:47:44,720 --> 00:47:49,790
and you okay this is important I should

1120
00:47:46,880 --> 00:47:51,920
deal with it immediately from like the

1121
00:47:49,790 --> 00:47:54,200
management perspective and one thing we

1122
00:47:51,920 --> 00:47:56,180
did with AK about nine you know we

1123
00:47:54,200 --> 00:47:58,549
wanted to harden the code internally

1124
00:47:56,180 --> 00:48:00,470
ourselves so we sold it our management

1125
00:47:58,549 --> 00:48:02,660
as this is a feature it's like you know

1126
00:48:00,470 --> 00:48:04,819
you deploy Acrobat 9 with y by Acrobat 9

1127
00:48:02,660 --> 00:48:09,339
because it's hardened it's like for a

1128
00:48:04,819 --> 00:48:09,339
lot of orgs that's an attractive feature

1129
00:48:17,160 --> 00:48:23,379
so dev group there about a hundred

1130
00:48:19,600 --> 00:48:26,529
developers and Acrobat and leader about

1131
00:48:23,380 --> 00:48:28,420
like maybe 70 of that is engineers and

1132
00:48:26,530 --> 00:48:29,770
maybe it's like 30 QE and plus like

1133
00:48:28,420 --> 00:48:34,119
various layers of management on top of

1134
00:48:29,770 --> 00:48:36,430
that so by proxy we have we have our

1135
00:48:34,119 --> 00:48:38,950
spies or not no we we have people

1136
00:48:36,430 --> 00:48:40,779
interested in security who we developed

1137
00:48:38,950 --> 00:48:43,000
through these training programs so by

1138
00:48:40,780 --> 00:48:46,630
proxy we have security interested and

1139
00:48:43,000 --> 00:48:48,340
trained engineers on every team but the

1140
00:48:46,630 --> 00:48:50,170
team will work on directly people whose

1141
00:48:48,340 --> 00:49:11,470
sole function is security teams about 20

1142
00:48:50,170 --> 00:49:15,760
people so we could define what is here

1143
00:49:11,470 --> 00:49:17,410
how we define is irritant 0 the way we

1144
00:49:15,760 --> 00:49:20,320
define it I guess when it feel free to

1145
00:49:17,410 --> 00:49:22,569
disagree its vulnerability for which

1146
00:49:20,320 --> 00:49:25,420
there's a working export in the latest

1147
00:49:22,570 --> 00:49:51,390
version of supported product so say the

1148
00:49:25,420 --> 00:49:51,390
latest version and also for 0

1149
00:49:52,329 --> 00:49:56,119
the compilation process to generate

1150
00:49:54,980 --> 00:50:01,039
something machine readable that

1151
00:49:56,119 --> 00:50:03,890
generates their results right so in most

1152
00:50:01,039 --> 00:50:06,559
cases we sometimes we do release it in

1153
00:50:03,890 --> 00:50:08,420
advance for responsible as closed issues

1154
00:50:06,559 --> 00:50:11,319
it's a more steady process you're right

1155
00:50:08,420 --> 00:50:13,880
yeah we if we can share exploits before

1156
00:50:11,319 --> 00:50:15,020
with present partners we do if we can

1157
00:50:13,880 --> 00:50:16,940
share analysis but with depression

1158
00:50:15,020 --> 00:50:18,589
brokers we do and sometimes it's a work

1159
00:50:16,940 --> 00:50:26,150
in progress and any information we can

1160
00:50:18,589 --> 00:50:27,799
stream out to them as helpful else well

1161
00:50:26,150 --> 00:50:30,099
thank you all very much enjoy the rest

1162
00:50:27,799 --> 00:50:30,099
of the conference

