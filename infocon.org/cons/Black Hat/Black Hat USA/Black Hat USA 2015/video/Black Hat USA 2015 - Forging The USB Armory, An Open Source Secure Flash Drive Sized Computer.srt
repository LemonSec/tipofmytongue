1
00:00:00,000 --> 00:00:04,620
hello thank you everybody for coming to
our session on Monday bodies and this is

2
00:00:04,620 --> 00:00:09,740
my college then you know bianco and
we're going to talk about our Open

3
00:00:09,740 --> 00:00:16,390
Source project called the USB armory so
we have a company which is going to be

4
00:00:16,390 --> 00:00:22,150
presented a few times a blackout first
our first thought was just to give you a

5
00:00:22,150 --> 00:00:27,229
little background about what do we do
about injecting traffic navigation

6
00:00:27,230 --> 00:00:34,450
messages into cars then we done in 2009
and talk about anything keystrokes off

7
00:00:34,450 --> 00:00:39,230
from power outlets in 2011 presented a
talk about credit cards and two years

8
00:00:39,230 --> 00:00:44,239
ago we didn't talk about package impact
fees just to show you that were heavily

9
00:00:44,239 --> 00:00:48,538
involved not only software security but
also hardware security we like to tackle

10
00:00:48,539 --> 00:00:54,879
you know kind of peculiar topics
concerning and every two years we tried

11
00:00:54,879 --> 00:01:00,750
to do a talk in a research and easier we
decided to build something from a change

12
00:01:00,750 --> 00:01:06,830
you know taking things apart and this is
and then the idea for the USB Memory

13
00:01:06,830 --> 00:01:15,200
Project came out so what does the USB
armory so the USB armory is an open

14
00:01:15,200 --> 00:01:20,500
source are compact device which
basically implements a secure computer

15
00:01:20,500 --> 00:01:28,009
that you can carry around it was
designed for personal security

16
00:01:28,009 --> 00:01:34,860
applications and the first idea . we we
had the reason why we had the idea of

17
00:01:34,860 --> 00:01:39,340
building such as device is that we
wanted something that we can carry her

18
00:01:39,340 --> 00:01:45,500
only does in our pockets that could be
as much trusted as we could possibly

19
00:01:45,500 --> 00:01:51,140
make it and he would allows us to have
included storage you know there are a

20
00:01:51,140 --> 00:01:53,770
lot of USB flash drives the day

21
00:01:53,770 --> 00:01:57,469
claim they provide military grade
encryption or whatever certified

22
00:01:57,469 --> 00:02:02,798
encryption and you have no idea about
what's going on in the hardware of the

23
00:02:02,799 --> 00:02:05,450
device or in the firmware

24
00:02:05,450 --> 00:02:09,598
and encryption which is actually
implemented in this class of devices has

25
00:02:09,598 --> 00:02:14,980
been known to to have very poor quality
and and you know implementations that

26
00:02:14,980 --> 00:02:21,959
are not secure at all so our our first
idea was to have first of all and has

27
00:02:21,959 --> 00:02:27,269
mass storage so something where if I
would just copy a file on on a device he

28
00:02:27,269 --> 00:02:32,769
would be you know option on the scan may
be for you know my world or whatever but

29
00:02:32,769 --> 00:02:37,730
encrypted with something that we know
whether it's you know GBG or or the

30
00:02:37,730 --> 00:02:44,000
means and then put on on on storage in a
way to control it so we fought of advice

31
00:02:44,000 --> 00:02:47,940
I would just emulate a mass storage
which is the protocol that is normally

32
00:02:47,940 --> 00:02:53,599
use for your USB drives but that would
allow us to be in control of the

33
00:02:53,599 --> 00:02:57,260
encryption process that's going on and
we want to do encryption process to

34
00:02:57,260 --> 00:03:03,548
happen on the device itself that was one
of our goals and then we fought you know

35
00:03:03,549 --> 00:03:08,400
but if we have something which she's not
single purpose but as a little more

36
00:03:08,400 --> 00:03:14,750
horsepower and that can do that I
execute more custom code then we can

37
00:03:14,750 --> 00:03:19,220
also have something that rather than
exposing a mass storage device we could

38
00:03:19,220 --> 00:03:22,350
just expose out whatever web application
that we want and have a convenient

39
00:03:22,350 --> 00:03:26,650
interface with just uploading files and
then downloading them again and then

40
00:03:26,650 --> 00:03:30,950
maybe sharing them in a secure way that
was that was the old west something that

41
00:03:30,950 --> 00:03:38,130
we can easily use for file encryption
and secure file sharing and you know

42
00:03:38,130 --> 00:03:43,579
quickly D requirements for such a device
went from having some dedicated single

43
00:03:43,579 --> 00:03:47,900
purpose hardware to try and have
something which is a little more generic

44
00:03:47,900 --> 00:03:54,420
an which became 22 to get the shape of
you know of a stunned are open source

45
00:03:54,420 --> 00:03:58,988
computer in in such a time for doctor
and then we fought you know if we have

46
00:03:58,989 --> 00:04:03,900
these custom functionality it and we all
kind of cool features such as you know

47
00:04:03,900 --> 00:04:10,030
we can have a failsafe actions where if
I do a specific action then we have data

48
00:04:10,030 --> 00:04:14,140
self-destruction for instance so if a
type of specific cost or if I copy a

49
00:04:14,140 --> 00:04:17,839
certain files so if I did not do a
certain action and I'm supposed to do

50
00:04:17,839 --> 00:04:22,919
then everything gets wired door locked
so things done right now we will propose

51
00:04:22,919 --> 00:04:28,719
USB devices meant for security secure
storage of files are are some key

52
00:04:28,720 --> 00:04:33,900
features that are not dare not possible
to do and then we fought but we have a

53
00:04:33,900 --> 00:04:37,549
standard computer on such a comfort
factor than we do other things we could

54
00:04:37,550 --> 00:04:43,760
use a proxy I go to computer which I
don't trust particularly I can logging

55
00:04:43,760 --> 00:04:49,250
into my device we'd throw a password and
then I can ssh out with my keys which

56
00:04:49,250 --> 00:04:53,820
are stored on the device and then to my
servers or or whatever that's one

57
00:04:53,820 --> 00:04:58,690
application we can have a password
manager if we have a device which I can

58
00:04:58,690 --> 00:05:03,880
easily connect and can expose a web
applications that I can control then you

59
00:05:03,880 --> 00:05:10,139
can have all kind of a pastor manager or
authentication token of you know

60
00:05:10,139 --> 00:05:17,780
whatever kind you want to and also one
of the other interesting things dots was

61
00:05:17,780 --> 00:05:23,099
a photo of while developing bees we can
also have the USB device we have

62
00:05:23,100 --> 00:05:27,310
something which is actually a full
active computer and no longer a passive

63
00:05:27,310 --> 00:05:32,360
device we could have the USB device
authentication to host so you can have

64
00:05:32,360 --> 00:05:37,889
it so that when you plug your device on
a computer device itself will try to

65
00:05:37,889 --> 00:05:43,370
probe your host and understand if it's
true or not and then take whatever

66
00:05:43,370 --> 00:05:49,530
action depending on how you configure
device and so and also other

67
00:05:49,530 --> 00:05:54,729
applications you know you can have a
tour router on its network computer

68
00:05:54,729 --> 00:05:59,490
connected in such a small form factor
you can have a Bitcoin wallet and GPS

69
00:05:59,490 --> 00:06:06,150
and so on so all of these ideas start
you know no we knew once we fought to

70
00:06:06,150 --> 00:06:10,810
have a generic computer in such a
compact USB device and so right from the

71
00:06:10,810 --> 00:06:15,639
beginning we set a few design goals so
it must be a USB power of course so not

72
00:06:15,639 --> 00:06:20,580
requiring external power supply because
that will be cranky and inconvenient

73
00:06:20,580 --> 00:06:23,630
must be very small amass

74
00:06:23,630 --> 00:06:28,569
must be a legal be a future-proof so
have a CPU and a generous amount of rum

75
00:06:28,569 --> 00:06:33,569
we were clogged with embedded systems on
a daily basis out of breaking them or

76
00:06:33,569 --> 00:06:40,599
analyzing them and most environments or
are are very for you know cost-saving

77
00:06:40,599 --> 00:06:45,459
are very constrained resources that they
give to you and this of course if you

78
00:06:45,459 --> 00:06:50,169
are developing one single purpose task
for these devices is fine it's it's good

79
00:06:50,169 --> 00:06:54,529
engineering but it was something which
is ordinary that we want to propose a

80
00:06:54,529 --> 00:06:59,729
blast from other people that we wanted
to be you know fast and and and you know

81
00:06:59,729 --> 00:07:04,748
good specifications we must have secure
boot of course we must be able to boot

82
00:07:04,749 --> 00:07:11,029
code that he signed with your keys not
our keys as manufacturer of course so

83
00:07:11,029 --> 00:07:14,729
I'm not the kind of secure boot that you
have on your laptop where you can also

84
00:07:14,729 --> 00:07:20,779
reset it if you want but something that
can permanently to use signing keys and

85
00:07:20,779 --> 00:07:26,659
then only your coat off of a specific
device must provide under convene

86
00:07:26,659 --> 00:07:31,709
including DVD over USB and very
important the developing an execution

87
00:07:31,709 --> 00:07:38,649
environment by Smith familiar we didn't
want to how really customize and and and

88
00:07:38,649 --> 00:07:43,419
and compact Linux distributions or
development environment he must be easy

89
00:07:43,419 --> 00:07:49,899
to develop this device ended as I must
be open a security device with the goal

90
00:07:49,899 --> 00:07:54,329
of handling very sensitive data on the
hardware and of course the software must

91
00:07:54,329 --> 00:08:02,919
be as open as you can get so when
developing heart were the first and most

92
00:08:02,919 --> 00:08:08,719
important phase is selecting the right
components for developing hardware and

93
00:08:08,719 --> 00:08:12,248
the complaining that we selected that
for the first version of this device is

94
00:08:12,249 --> 00:08:17,559
the Freescale I am X 53 it's an ARM
Cortex a eight which can be closed

95
00:08:17,559 --> 00:08:24,769
between 800 and on 14 majors in one
point so really fast for a USB device if

96
00:08:24,769 --> 00:08:28,599
you think of it all of this size I mean
we're talking about something which is

97
00:08:28,599 --> 00:08:34,250
very very tiny almost all data sheets
Emanuel Republic and does not require

98
00:08:34,250 --> 00:08:39,389
force features such as secure boot
sourcing that we really care about for

99
00:08:39,389 --> 00:08:40,690
security reasons

100
00:08:40,690 --> 00:08:45,720
the data sheets are okay or not you know
when you when you look at that she's

101
00:08:45,720 --> 00:08:49,210
four components there is always some
quirks and and some issues in

102
00:08:49,210 --> 00:08:53,160
comprehending them but I would say okay
far better than other vendors that was

103
00:08:53,160 --> 00:08:58,079
eased the development process and we
also have a good implementation of armed

104
00:08:58,080 --> 00:09:02,290
trust me on this device and secured with
secure storage and secure room for

105
00:09:02,290 --> 00:09:06,780
cryptographic purposes is a detail power
consumption guide available which was

106
00:09:06,780 --> 00:09:10,949
very important for us to ensure that the
device can be power from a USB port and

107
00:09:10,950 --> 00:09:13,350
is actually need support for Android

108
00:09:13,350 --> 00:09:20,050
previously for DISA professor so that
met our goal of providing a familiar

109
00:09:20,050 --> 00:09:22,910
development environment and is good
soccer production support guarantee you

110
00:09:22,910 --> 00:09:26,620
don't want to commit to a design and
then Freescale's how's your sorry apart

111
00:09:26,620 --> 00:09:30,860
is not available anymore because that's
sucks that's also an important part of

112
00:09:30,860 --> 00:09:36,170
the development process the system W was
as a lot of features that we are not

113
00:09:36,170 --> 00:09:42,839
using because we are making a USB device
were not connecting into display GPS to

114
00:09:42,840 --> 00:09:47,750
say that these can so on so it's a very
complex process during week power only

115
00:09:47,750 --> 00:09:53,300
the things that we need so concerning
trust soon so you might have heard and

116
00:09:53,300 --> 00:10:01,089
what Trustin proviso trust is
instruction set support for certain

117
00:10:01,090 --> 00:10:07,010
armed force extras which allows you to
have execution domain separation between

118
00:10:07,010 --> 00:10:11,850
what is called to be the non-secure
world and the secure ward in one of the

119
00:10:11,850 --> 00:10:16,160
eight long-term ideas for DS platform to
leverage on these kind of over feature

120
00:10:16,160 --> 00:10:22,630
for providing more separation between do
you ask the runs on the device and the

121
00:10:22,630 --> 00:10:27,339
more sensitive coat that maybe handle
cryptographic keys and and so on and the

122
00:10:27,339 --> 00:10:32,570
idea is that you have your own user mode
applications and application so your

123
00:10:32,570 --> 00:10:36,700
Linux environment running in non-secure
roared and then whatever you want to do

124
00:10:36,700 --> 00:10:43,820
some operations which somehow must be
executed on a more privileged context

125
00:10:43,820 --> 00:10:48,510
you can ask to switch to monitor mode
and then the code which is in the secure

126
00:10:48,510 --> 00:10:53,010
domain gets executed in these codes as
its own use or modification its own

127
00:10:53,010 --> 00:10:53,840
privilege

128
00:10:53,840 --> 00:10:58,490
and more importantly it can also have
its own device driver for a specific

129
00:10:58,490 --> 00:11:02,920
hardware subcomponents off the demise
Indies hardware subcomponents can meet

130
00:11:02,920 --> 00:11:08,199
only assigned to secure domain so for
instance you can decide to assign the

131
00:11:08,200 --> 00:11:12,910
micros the controller only to the secure
domain and the non-secure domain would

132
00:11:12,910 --> 00:11:18,650
never know of the existence of the
microSD controller so by hard work it is

133
00:11:18,650 --> 00:11:25,189
physically the x-axis it's physically
blocked an insult by defining an API

134
00:11:25,190 --> 00:11:30,810
between the non secure and unsecure word
you can you can have a separation which

135
00:11:30,810 --> 00:11:35,359
allows to expose the median serve face
to the non-secure warning and control

136
00:11:35,360 --> 00:11:40,620
exactly what you're doing a lot of the
applications is for instance that you

137
00:11:40,620 --> 00:11:44,510
might want to handle encryption and
decryption often microSD card completely

138
00:11:44,510 --> 00:11:49,530
secure domain and a secure domain holds
your passphrase which you do time for

139
00:11:49,530 --> 00:11:54,720
instance and that's holding this jury
convicts so a non-secure domain if its

140
00:11:54,720 --> 00:12:00,910
compromise for whatever reason cannot
physically goal in memory and see the

141
00:12:00,910 --> 00:12:05,969
past phrase that helped me to this
occurred to me because the context the

142
00:12:05,970 --> 00:12:09,900
execution context and memory are
completely separated and at the same

143
00:12:09,900 --> 00:12:14,720
time to non secure the main cannot
access the micro sdcard directly so this

144
00:12:14,720 --> 00:12:18,550
is just one example it is also one one
of the reasons of why we have chosen

145
00:12:18,550 --> 00:12:27,280
this specific system-on-a-chip because
we know good support for tyson and the

146
00:12:27,280 --> 00:12:31,540
harbor to can be a sign depending on the
specific system-on-a-chip you might be

147
00:12:31,540 --> 00:12:35,050
able to have a different kind of
granularity in what you can assigned to

148
00:12:35,050 --> 00:12:39,920
either to domains and we do specific
system-on-a-chip it's very flexible you

149
00:12:39,920 --> 00:12:46,530
can find the USB controller board with
the LED for instance GPA also on the

150
00:12:46,530 --> 00:12:51,329
board we have one led that we can decide
to assign to secure domain so easy led

151
00:12:51,330 --> 00:12:56,760
Eastern on you know by hard work that in
dot moment to secure code is being

152
00:12:56,760 --> 00:13:02,520
executed because the non-secure code has
no hardware means to access and turn on

153
00:13:02,520 --> 00:13:03,480
dots

154
00:13:03,480 --> 00:13:11,860
led and if the non-secure domain tries
to access device that is not supposed to

155
00:13:11,860 --> 00:13:15,760
you can have an exception which then can
be dropped so the idea is to have the

156
00:13:15,760 --> 00:13:21,870
reach all access into the non-secure
domains such as Linux and then more

157
00:13:21,870 --> 00:13:27,690
compact more tiny maybe a microkernel or
directly arm assembly code is running

158
00:13:27,690 --> 00:13:32,339
into the secure or handling a very
specific corporation that you might want

159
00:13:32,339 --> 00:13:41,000
to confine to a different execution
context so their hardware failure is our

160
00:13:41,000 --> 00:13:44,019
official mascot because we think it's
cool and matches the color of the board

161
00:13:44,019 --> 00:13:48,600
very well so the hardware is completely
open source on the stock is completely

162
00:13:48,600 --> 00:13:52,269
open source and this is the final
version of the device also after to talk

163
00:13:52,269 --> 00:13:57,139
if you wanna come in seed we we have two
samples here that you can come and take

164
00:13:57,139 --> 00:14:01,889
a look so that you have an idea of the
dimensions off the device define a

165
00:14:01,889 --> 00:14:08,000
specification so we put the IMAX 53 on
it on its USB horsepower

166
00:14:08,000 --> 00:14:13,779
power budget he's absolutely fine it's
very tiny we have a five min break up

167
00:14:13,779 --> 00:14:18,470
header and where we can break our GPAs
and serial console for debugging

168
00:14:18,470 --> 00:14:23,139
capabilities or for other purposes like
there are people adding buttons on the

169
00:14:23,139 --> 00:14:28,750
pin header which is here so they can and
will aid kind of you be key style

170
00:14:28,750 --> 00:14:34,649
press the button and menu trigger
specific action we have the LED which we

171
00:14:34,649 --> 00:14:39,680
can trigger on assigned to trust them
secure domain if we want to offer a

172
00:14:39,680 --> 00:14:43,620
secure moment it detection so that you
make sure that the normal worry is not

173
00:14:43,620 --> 00:14:48,350
fishing for your password and we have
excellent native support so now we have

174
00:14:48,350 --> 00:14:57,490
two GB on Archlinux we have Colleen
works we had the arch assault charges

175
00:14:57,490 --> 00:15:01,389
for Argentina's which provide also
penetration testing tools which can be

176
00:15:01,389 --> 00:15:08,779
easily installed on it just like you do
on a Raspberry Pi or are devices also

177
00:15:08,779 --> 00:15:13,370
good for penetration testing we could do
USB device simulation so we emulate CDC

178
00:15:13,370 --> 00:15:16,890
your friend and a thief also just shows
up as a server which you can connect to

179
00:15:16,890 --> 00:15:24,140
weaken and storage keyboard and so on so
we also use it for low-level penetration

180
00:15:24,140 --> 00:15:29,140
testing of the USB devices because with
the Linux USB gadget framework we can

181
00:15:29,140 --> 00:15:33,339
control and emulate everything which is
exposed on the USB site so it's also

182
00:15:33,339 --> 00:15:38,940
good for for those kind of offensive
capabilities it it's probably it you can

183
00:15:38,940 --> 00:15:42,839
consider it he says as the perfect me
know implementing bags will be here if

184
00:15:42,839 --> 00:15:46,270
you want because this device can be
whatever you want any active you can run

185
00:15:46,270 --> 00:15:49,760
your firmware and as soon as it's
plugged in you can execute you know

186
00:15:49,760 --> 00:15:56,770
whatever you like and is completely open
hardware and now interesting thing that

187
00:15:56,770 --> 00:16:02,160
we realized after developing the
hardware is that not only we can run in

188
00:16:02,160 --> 00:16:07,110
the vice moment which is our default
mode of operation but we can also run in

189
00:16:07,110 --> 00:16:13,550
DOS mode so you see here on the USB arm
reattached to so this was one of the

190
00:16:13,550 --> 00:16:18,439
first iterations now we have an adapter
for that but we can plug it directly to

191
00:16:18,440 --> 00:16:24,320
a keyboard and mouse and USB display but
just by just 13 the roll off the USB

192
00:16:24,320 --> 00:16:29,160
device from device becomes host and you
see it here so here we use my mo

193
00:16:29,160 --> 00:16:33,819
DisplayLink USB monitor browsing a
completely run the page on the internet

194
00:16:33,820 --> 00:16:40,839
for your benefit so and you you have a
USB power here on the right so the hob

195
00:16:40,839 --> 00:16:46,089
provides power to the armory itself and
then the army itself sees the hob and

196
00:16:46,089 --> 00:16:49,730
all that you any USB device which is
basically supported by Linux can be

197
00:16:49,730 --> 00:16:53,500
attached to it so now we made

198
00:16:53,500 --> 00:16:58,200
adapter for this purpose which basically
what did I Z bridges from female to

199
00:16:58,200 --> 00:17:04,640
female and then you can ceding power
from a micro USB plug so in this case we

200
00:17:04,640 --> 00:17:10,380
provide power we provide wifi usb wifi
dongle and here you have an access point

201
00:17:10,380 --> 00:17:14,809
where you can rent or or or whatever you
want and of course you've got such as

202
00:17:14,809 --> 00:17:18,859
USB powered hub you can feed the power
back in and then you can attach more

203
00:17:18,859 --> 00:17:26,800
than one device so it becomes you know I
completely standalone our computer if

204
00:17:26,800 --> 00:17:31,280
you want to end this is because the USB
controller allows as a great freedom in

205
00:17:31,280 --> 00:17:36,700
considering it so even if we drive the
USB I D pinned to the ground because we

206
00:17:36,700 --> 00:17:41,850
didn't think we could all we could use
the device we can override that by

207
00:17:41,850 --> 00:17:46,659
writing to certain registers and we can
just ask that the plot to be in host

208
00:17:46,660 --> 00:17:50,270
mode so we just need to change the
gender of the connection and then you

209
00:17:50,270 --> 00:17:57,500
just have a standard USB Host like so
what were the challenges in in

210
00:17:57,500 --> 00:18:01,410
developing these kind of hardware so
first of all it is not some Harvard you

211
00:18:01,410 --> 00:18:04,610
can easily prototype on your own and
soldiering on your own because there are

212
00:18:04,610 --> 00:18:08,919
two components which have up BGA form
factor which is called the ball grid

213
00:18:08,920 --> 00:18:12,990
array so this is this the
system-on-a-chip been down below the

214
00:18:12,990 --> 00:18:20,640
ddr2 RAM modules you have 529 beautiful
tiny balls that are soldered to the

215
00:18:20,640 --> 00:18:24,360
board and this is very difficult to do
by hand so this is one of the challenges

216
00:18:24,360 --> 00:18:30,050
and we tried to be smart into developing
this kind of bored and we said let's

217
00:18:30,050 --> 00:18:34,330
make a breakout board where we had a
very expensive

218
00:18:34,330 --> 00:18:38,310
Dr we can clamp the system-on-a-chip we
don't actually need so we don't risk

219
00:18:38,310 --> 00:18:42,060
losing the board and the
system-on-a-chip every time and then we

220
00:18:42,060 --> 00:18:47,418
break out every single connection for
debugging purposes so this board works

221
00:18:47,419 --> 00:18:51,970
fine it's great for accessing all the
balls without risking kerosene

222
00:18:51,970 --> 00:18:56,110
soldiering and so on so you just screw
everything with a precision Torx

223
00:18:56,110 --> 00:19:00,879
screwdriver and he works however the
issue why's that

224
00:19:00,880 --> 00:19:05,460
enabling the power components the
tolerances were so high that hadn't sold

225
00:19:05,460 --> 00:19:10,179
during the power regulator is we you
know it wasn't it was insufficient for

226
00:19:10,179 --> 00:19:15,160
having a stable power supply to the
device which meant that we had to create

227
00:19:15,160 --> 00:19:20,840
a PCB for to power components but if we
create a PCB power components that we

228
00:19:20,840 --> 00:19:24,790
might as well at the sock and the song
then we might as well go ahead

229
00:19:24,790 --> 00:19:29,170
with the first prototype so one of the
lessons learned and he's so the Darth

230
00:19:29,170 --> 00:19:33,260
Vader there it sits myself and and the
idea which is that is our colleague

231
00:19:33,260 --> 00:19:37,610
Andre rosanna which tried to do 72
rationed he's bored and at some point we

232
00:19:37,610 --> 00:19:42,830
went you fail me for the last time and
we just decided to to go with the first

233
00:19:42,830 --> 00:19:46,550
production because we weren't getting
nowhere and so this was an important

234
00:19:46,550 --> 00:19:50,100
lessons learned so this board which is
very nice turn out to be like a

235
00:19:50,100 --> 00:19:53,870
superstar disorder or something very
expensive you know big which is

236
00:19:53,870 --> 00:19:58,280
completely useless in falls apart onto
the ground but it's a cool thing to have

237
00:19:58,280 --> 00:20:02,340
in our office now so a lesson learned
just go for the first prototype you know

238
00:20:02,340 --> 00:20:05,840
when you making hardware there's a lot
of paranoia een you know there are

239
00:20:05,840 --> 00:20:10,620
things I am i kno worried about you know
it it's not as bad as always go for for

240
00:20:10,620 --> 00:20:15,399
the first version and you know you'll
get lucky at this this is what was our

241
00:20:15,400 --> 00:20:21,330
what happened we don't see the second
challenge was that since we want to do

242
00:20:21,330 --> 00:20:25,270
designed to be open source we also
wanted to tool that we use for the

243
00:20:25,270 --> 00:20:29,129
designed to be accessible because even
if we released the design if the tool to

244
00:20:29,130 --> 00:20:32,210
open and modify design cost 40,000 euros

245
00:20:32,210 --> 00:20:36,990
that's not gonna help a lot the open
source community so we decided to

246
00:20:36,990 --> 00:20:40,570
implement these using gchat dork i cud
which is an open-source design tool

247
00:20:40,570 --> 00:20:45,280
which is fine for most purposes but when
you tried to make high specification

248
00:20:45,280 --> 00:20:52,750
PCBs wheat manual routing off of the ROM
then things gets really ugly really

249
00:20:52,750 --> 00:20:58,680
quick so the issue here is that when you
connect around module two assists all of

250
00:20:58,680 --> 00:21:03,430
those traces that you cedar they need to
be exactly the same length and if you

251
00:21:03,430 --> 00:21:07,760
only have one direction to make the
connection that you cannot do dinner

252
00:21:07,760 --> 00:21:12,200
outing on on the size of the
system-on-a-chip you don't have much

253
00:21:12,200 --> 00:21:16,620
room for daddy gets really complicated
and also at the time he could was not

254
00:21:16,620 --> 00:21:21,050
offering any length trace matching
capabilities all of the word for

255
00:21:21,050 --> 00:21:26,370
connecting those traces was a manual
labor in in in making sure that they

256
00:21:26,370 --> 00:21:32,810
were you know exactly the same lamb
produce you know more probably do I have

257
00:21:32,810 --> 00:21:36,970
been working prototypes and this was the
most critical and most difficult part in

258
00:21:36,970 --> 00:21:42,909
the board with open source software but
other than that it was fine and I think

259
00:21:42,909 --> 00:21:47,270
it's really amazing dots in Fremont of
time you can be completely open source

260
00:21:47,270 --> 00:21:53,710
tool implement something like this we've
come a long way five years ago kinda

261
00:21:53,710 --> 00:21:59,549
thinkable on the other hand Afridi a
graphing capabilities of key code which

262
00:21:59,549 --> 00:22:02,730
are useless are are very very good so
you can see your boarding freidy if you

263
00:22:02,730 --> 00:22:08,490
want before having to manufacture which
is which is kinda off a prototype that

264
00:22:08,490 --> 00:22:12,669
we received I was a little bigger
because we had JTAG exposed to the week

265
00:22:12,669 --> 00:22:16,429
debug if the bar for some reason would
have booed up we could at least

266
00:22:16,429 --> 00:22:21,340
understand is the issue was whether I am
or if she was with democracy controller

267
00:22:21,340 --> 00:22:25,020
or some other components of course if
the issue was weird powering up the War

268
00:22:25,020 --> 00:22:30,610
II then it gets more difficult to debug
but we had tests pointed out so that the

269
00:22:30,610 --> 00:22:35,719
first version is it was a knock custom
off a prototype with a little more test

270
00:22:35,720 --> 00:22:41,190
points that are required production
version and you can attack a detailed

271
00:22:41,190 --> 00:22:44,820
connector on into and step into the cold
and so on but he wasn't actually

272
00:22:44,820 --> 00:22:50,320
required because again we got kind of
lucky so the first off a prototype

273
00:22:50,320 --> 00:22:54,990
worked right away to our surprise so
this is kind of inspiration to make open

274
00:22:54,990 --> 00:22:59,169
hardware it works and he's very
interesting to see that the power of

275
00:22:59,169 --> 00:23:03,059
these tiny device is comparable to paint
him to but we have everything

276
00:23:03,059 --> 00:23:09,780
stand-alone impacting such a compact
form factor so from the outside we did

277
00:23:09,780 --> 00:23:14,820
some better envisions where we fought
there were gonna be the final design by

278
00:23:14,820 --> 00:23:20,770
what we tried to do we tried to be less
conservative in the design and eliminate

279
00:23:20,770 --> 00:23:24,389
a few components that you know even if
you don't follow recommendations they

280
00:23:24,390 --> 00:23:28,360
can be treated as an option on Andy's to
lower the cost of the board as much as

281
00:23:28,360 --> 00:23:34,459
we can we also reduce the number of
layers from 8262 see if you work or not

282
00:23:34,460 --> 00:23:38,750
and so on and then eventually we did the
LED for secure remote detection and then

283
00:23:38,750 --> 00:23:43,950
eventually we ended up with a marked one
design so what lessons learned form

284
00:23:43,950 --> 00:23:48,970
action the first iteration had some tiny
doctors after two weeks would just fall

285
00:23:48,970 --> 00:23:50,020
off the boards

286
00:23:50,020 --> 00:23:55,470
Friday also make sure that you test for
done before making 2000 boards because

287
00:23:55,470 --> 00:24:00,890
it was just gonna sock if the component
gonna fall off after four weeks so it

288
00:24:00,890 --> 00:24:05,300
was that was one lesson learn and the
second lesson learned was really

289
00:24:05,300 --> 00:24:10,190
interesting in debate are versions when
we were plugging the board and we would

290
00:24:10,190 --> 00:24:13,350
see a five-second delay in to YouTube
sequence so now when you have five

291
00:24:13,350 --> 00:24:17,889
second delay that's a very precise time
what you do you go and searching all

292
00:24:17,890 --> 00:24:22,250
data sheets of all components for the
words five seconds because you need to

293
00:24:22,250 --> 00:24:25,730
understand why that's happening and you
turn out that the power regulator

294
00:24:25,730 --> 00:24:30,040
enforces a five-second delay if under
voltage is being protected so the

295
00:24:30,040 --> 00:24:34,490
question was why do we get an
undervoltage detection and the reason

296
00:24:34,490 --> 00:24:39,420
was that for doing the gold plating on
the USB connector the manufacturer added

297
00:24:39,420 --> 00:24:43,330
East races that were not on our design
that we're going outwards towards the

298
00:24:43,330 --> 00:24:49,010
blog for depositing the cult but the
problem is that by cutting then the

299
00:24:49,010 --> 00:24:54,430
board they would have they would create
for Lidl tiny conductive thought that

300
00:24:54,430 --> 00:24:58,660
would make a prima true connection with
the USB connectors and then the

301
00:24:58,660 --> 00:25:02,770
connection we lost for the space for the
transition between this little tiny

302
00:25:02,770 --> 00:25:07,960
contact here and the actual pad and then
you would have a connection back again

303
00:25:07,960 --> 00:25:11,410
with the power so this would create the
undervoltage connection is was kinda

304
00:25:11,410 --> 00:25:15,230
very interesting problem because it took
us a few days to figure out what was the

305
00:25:15,230 --> 00:25:19,570
issue and he was introducing our designs
one case where it's something that the

306
00:25:19,570 --> 00:25:24,159
manufacturers body was completely safe
to do but at the end it was in sao in

307
00:25:24,160 --> 00:25:29,000
the final version we had the gold
deposit connection done here in in a

308
00:25:29,000 --> 00:25:35,280
safe manner so this this was an
interesting issue that we had and this

309
00:25:35,280 --> 00:25:40,660
is the final design so we have the stock
here and the center we have the ROM we

310
00:25:40,660 --> 00:25:43,960
have the pin header and on the bottom
where the microSD card slot which

311
00:25:43,960 --> 00:25:49,700
provides the class there's no water
resistant stories on the device except

312
00:25:49,700 --> 00:25:54,730
for a few fuses in the system achieved
for the signing keys so there's no BIOS

313
00:25:54,730 --> 00:25:58,080
there's nothing that can be flashed
everything gets up from the microSD card

314
00:25:58,080 --> 00:26:03,480
which we think it's a it's a good
feature it's a good a property security

315
00:26:03,480 --> 00:26:10,030
and everything else is power related and
we have the smaller JTAG pins here for

316
00:26:10,030 --> 00:26:16,840
anybody that wants to access she took on
the board for it trust and support so we

317
00:26:16,840 --> 00:26:22,959
now have upstream support on Gina Gina
interesting last framework that allows

318
00:26:22,960 --> 00:26:28,340
you to have many more real-time
operating system in the secure war and

319
00:26:28,340 --> 00:26:33,679
then you can put them in the non-secure
word so we gino asked what we can do we

320
00:26:33,680 --> 00:26:38,340
can compile I immediately patch version
of Linux with just some fuel loading

321
00:26:38,340 --> 00:26:44,730
addresses redefine and we can put in a
word and Gina genotypes provides a

322
00:26:44,730 --> 00:26:53,240
platform where you can develop your own
module and your own board concerning

323
00:26:53,240 --> 00:26:57,300
support everything and now the leaders
saying that we require will push OPP

324
00:26:57,300 --> 00:27:03,649
same so the bootloader the Linux kernel
everything is doctor no specific patches

325
00:27:03,650 --> 00:27:08,790
or customizations require to run the
news on this port which was important

326
00:27:08,790 --> 00:27:16,760
for us and it is one example of how you
can use trust them directly without any

327
00:27:16,760 --> 00:27:24,690
support so this is one example of secure
remote monitor so this is the code which

328
00:27:24,690 --> 00:27:30,140
runs a boot so we have a modified
version of you boot which executes

329
00:27:30,140 --> 00:27:34,320
escora start and this is an example
would be led so what we do we assign the

330
00:27:34,320 --> 00:27:40,290
GPIO which is dedicated attached to the
led to the secure domain and by doing

331
00:27:40,290 --> 00:27:45,430
that the non-secure domain cannot acces
dots

332
00:27:45,430 --> 00:27:50,640
because there's a hardware firewall so
to speak that prevents doctors from

333
00:27:50,640 --> 00:27:52,120
taking place

334
00:27:52,120 --> 00:27:57,000
we also said internal drama to secure so
that we can execute our secure domain

335
00:27:57,000 --> 00:28:01,010
code into the secure on which is on the
system-on-a-chip otherwise we would have

336
00:28:01,010 --> 00:28:06,730
to split the areas in the external
memory module areas which are secure in

337
00:28:06,730 --> 00:28:10,830
areas which are known secured and that
we have a security code that which you

338
00:28:10,830 --> 00:28:16,029
it's a very trivial example so what he
does he checks is in the arse

339
00:28:16,029 --> 00:28:22,210
or register would put the ex traffic by
you and if we do that then we jump to

340
00:28:22,210 --> 00:28:27,700
our security code hendler otherwise we
go back to not secure word and this kind

341
00:28:27,700 --> 00:28:31,529
of switching can happen on the man so
the non-security can raise an exception

342
00:28:31,529 --> 00:28:36,469
and ask the secure work please do
something for me and DAPI is done in

343
00:28:36,469 --> 00:28:40,580
terms of what you put into the register
soon will be expectations are offered up

344
00:28:40,580 --> 00:28:48,699
and the handler what it does is
basically it's sets the GPIO 22 outputs

345
00:28:48,700 --> 00:28:55,299
and it has this is true that just goes
the led operation and mean war zone

346
00:28:55,299 --> 00:28:59,918
leanings we can have a kernel module we
just execute the SMC 0 operations so

347
00:28:59,919 --> 00:29:07,419
when we do SMC 0 instruction we jump to
secure Ward immediate so if we put the

348
00:29:07,419 --> 00:29:12,919
cafe value into the RD registered then
we would trigger the operation into non

349
00:29:12,919 --> 00:29:16,779
dled cities is a trivial example how you
can have the non-secure were

350
00:29:16,779 --> 00:29:21,379
communicating with a secure and asking
for you know in this case led to be

351
00:29:21,379 --> 00:29:24,689
turned on and off but of course you can
have more elaborate functionality such

352
00:29:24,690 --> 00:29:29,429
as asking for encryption decryption
instance on Android phones for instance

353
00:29:29,429 --> 00:29:36,339
the curing is implemented the norm award
asked for the secure work to do

354
00:29:36,339 --> 00:29:43,440
operations now so I mention a lot for
the file manager functionality and and

355
00:29:43,440 --> 00:29:50,549
so on and we propose this hardware as a
partner of course which is as open as

356
00:29:50,549 --> 00:29:55,349
you can get it running under Linux so
you can just use it as you know as a

357
00:29:55,349 --> 00:30:00,789
normal device I V he replied to my
laptop so as you can see I can just ssh

358
00:30:00,789 --> 00:30:07,809
to its so right passenger so here and
just you know connected to my USB device

359
00:30:07,809 --> 00:30:12,960
this is on Archlinux set up we can see
we have half a gig of RAM available you

360
00:30:12,960 --> 00:30:18,099
know and we can even so we can run
without obligation 12 we can even have a

361
00:30:18,099 --> 00:30:23,259
complete desktop session running on it
so I just executed the ANC server and

362
00:30:23,259 --> 00:30:26,150
here

363
00:30:26,150 --> 00:30:43,210
and have my session which is running on
my eyes so this is what is one example

364
00:30:43,210 --> 00:30:48,420
of the power of such a device but what
we've done within an application which

365
00:30:48,420 --> 00:30:53,310
is interlocked and we just made the
first non beta release today of this

366
00:30:53,310 --> 00:30:57,830
application is available now and this is
an open source file encryption fronted

367
00:30:57,830 --> 00:31:03,490
which is developed for the use of course
is not limited in 22 execution to the

368
00:31:03,490 --> 00:31:07,970
USB armory you can you can running on a
raspberry by or you know whatever server

369
00:31:07,970 --> 00:31:12,810
that one any any Linux based device and
the eight-year who provide a web

370
00:31:12,810 --> 00:31:17,429
accessible File Manager which is
directly tied to the Linux unified key

371
00:31:17,430 --> 00:31:21,720
system encrypted partition and that can
also perform additional symmetric and

372
00:31:21,720 --> 00:31:27,440
asymmetric encryption on the store files
so the idea is to have something which

373
00:31:27,440 --> 00:31:36,140
provides easy access to encryption so
i'm gona democrat if the demagogues have

374
00:31:36,140 --> 00:31:47,510
been kind to us now ongoing a demo this
application here so the first thing that

375
00:31:47,510 --> 00:31:52,200
we see when I connect to it is that it
violates my client's certificate so this

376
00:31:52,200 --> 00:31:56,390
application if you want to you can set
it up so that you will read them and

377
00:31:56,390 --> 00:32:01,500
volleyed sorties against form your own
CA to actually connect with so you don't

378
00:32:01,500 --> 00:32:05,660
have the browser then he's never going
to present you with anything and he's

379
00:32:05,660 --> 00:32:09,840
never going to unlock the predictions
this is one feature that we have this is

380
00:32:09,840 --> 00:32:16,639
a TES unprotected connection so the
authentication credentials of these

381
00:32:16,640 --> 00:32:20,600
applications are directly tied to the
encrypted partition so the user name so

382
00:32:20,600 --> 00:32:25,010
to speak is the volume name of the
encrypted partition and the password is

383
00:32:25,010 --> 00:32:30,400
one of D many passwords that you cannot
afford that storage and the reason why

384
00:32:30,400 --> 00:32:33,950
you can have more than one password is
that these passwords can be disposable

385
00:32:33,950 --> 00:32:37,210
so if you connect the device to a
computer which you don't trust

386
00:32:37,210 --> 00:32:38,190
particularly and you

387
00:32:38,190 --> 00:32:42,080
worry about keyloggers there you can
make sure that the pastor as soon as its

388
00:32:42,080 --> 00:32:42,889
use

389
00:32:42,889 --> 00:32:47,279
it's it's it's gone so it can never be
used again all for unlocking the

390
00:32:47,279 --> 00:32:48,139
specific

391
00:32:48,139 --> 00:32:52,709
petition if this is the last battle
available in your system than your

392
00:32:52,710 --> 00:33:02,269
encrypted partition you will not be able
to unlock it ever again I'm not gonna go

393
00:33:02,269 --> 00:33:07,659
not logging as soon as a blog Indian
crickter petition so everything that you

394
00:33:07,659 --> 00:33:12,929
see here this is kind of a Google Drive
kind of interface where you have a file

395
00:33:12,929 --> 00:33:19,679
manager and all of these files here our
store on the petition and uploading

396
00:33:19,679 --> 00:33:27,919
files is as easy as just taking off
taking a file and drag and drop the file

397
00:33:27,919 --> 00:33:33,320
here so now the file you can also drag
and drop directories so now the file has

398
00:33:33,320 --> 00:33:38,590
been uploaded here and once it's
uploaded so we have a final managing

399
00:33:38,590 --> 00:33:44,158
features such copy move on the trip to
storage delete my name is encrypted and

400
00:33:44,159 --> 00:33:51,590
we can I encrypt symmetrically so we'd
see Metairie password so here we have

401
00:33:51,590 --> 00:33:57,529
you heard that file or we can also
increase in with your peeps he's so here

402
00:33:57,529 --> 00:34:03,840
at two beauties and I can just decide to
encrypt a file with PGP

403
00:34:03,840 --> 00:34:11,560
I can generate encryption keys on the
device or I can import existing keys on

404
00:34:11,560 --> 00:34:16,119
the device and of course you can also
the crypt sign and verify you can also

405
00:34:16,119 --> 00:34:20,940
make seed finals if you want and you can
of course the files and you can take

406
00:34:20,940 --> 00:34:24,230
advantage of the fact that we have a
file manager that also allows multiple

407
00:34:24,230 --> 00:34:28,609
selection such as thought so I can
delete the file so the idea is that if

408
00:34:28,609 --> 00:34:32,540
you wanna share a file you can unlock
your encrypted partition you can have an

409
00:34:32,540 --> 00:34:37,480
encrypted under USB arm itself with your
private keys which are on the USB armory

410
00:34:37,480 --> 00:34:42,409
and then you can encrypt and filing
sherrit in this API does not allow to

411
00:34:42,409 --> 00:34:47,000
retrieve private key materials so once
you upload a private key when she

412
00:34:47,000 --> 00:34:50,429
generates a private key you can never
get it out

413
00:34:50,429 --> 00:34:57,440
you would have to use other means such
as SSH without a password and and and so

414
00:34:57,440 --> 00:34:58,250
on

415
00:34:58,250 --> 00:35:02,390
here you can add and remove all the
passwords that you want for the Linux

416
00:35:02,390 --> 00:35:08,210
unified key system is also a patch
called nuke looks where you can have a

417
00:35:08,210 --> 00:35:11,869
password which triggers destruction of
the competition

418
00:35:11,869 --> 00:35:16,970
surrounding and having your last boss
whereas the one that if pos- everything

419
00:35:16,970 --> 00:35:23,240
is is a usable you can have one specific
failsafe password that when you use the

420
00:35:23,240 --> 00:35:28,640
encrypted partition will be destroyed
and also one of the features that we

421
00:35:28,640 --> 00:35:32,990
implemented and we're announcing today
we also enable secure and signal

422
00:35:32,990 --> 00:35:39,399
functionality inside the store so right
now so we see here we had the audit logs

423
00:35:39,400 --> 00:35:44,099
of everything that's going on with their
also saved here on a fire which we can

424
00:35:44,099 --> 00:35:51,240
also view by the way from Sarai now
incidence of interlocked is connected to

425
00:35:51,240 --> 00:35:56,839
a register a phone number which is
register with this application using a

426
00:35:56,839 --> 00:36:01,220
tech secure signal protocol so we have a
direct route all the contacts here and

427
00:36:01,220 --> 00:36:05,609
if I ask daniella to send me a chat
message from its own USB armory also

428
00:36:05,609 --> 00:36:11,569
running internal also registered to a
phone number so if network on DVD works

429
00:36:11,569 --> 00:36:16,920
see so here we see the notification that
I received a message from his mobile

430
00:36:16,920 --> 00:36:20,490
phone number so his mobile phone number
is actually registered to the internal

431
00:36:20,490 --> 00:36:26,410
keys which is running on on his laptop
and here I see that I received a message

432
00:36:26,410 --> 00:36:31,190
from unknown because i dont have it in
my address book I can also rename this

433
00:36:31,190 --> 00:36:40,720
conduct and then I can Daniela

434
00:36:40,720 --> 00:36:45,140
and I can open a chat to anybody out
there

435
00:36:45,140 --> 00:36:52,470
hello work and I can send messages and
these works not only in terms of course

436
00:36:52,470 --> 00:36:56,740
but with any tech securing signal user
so you can upload your contacts here and

437
00:36:56,740 --> 00:37:01,868
you can send messages to any mobile
number that is register on on Dec secure

438
00:37:01,869 --> 00:37:05,770
and signals so you can receive messages
and send messages and you can also send

439
00:37:05,770 --> 00:37:11,200
and receive attachments so now he's
gonna send a file to me

440
00:37:11,200 --> 00:37:19,509
zoe has interlock instance here and he
just trigger action so here we see in

441
00:37:19,510 --> 00:37:24,530
the log . an attachment was saved from
the newly and if we see in the chat we

442
00:37:24,530 --> 00:37:26,190
see that I got a message

443
00:37:26,190 --> 00:37:32,200
ok I received this attachment so if I go
into the attachments section is a fire

444
00:37:32,200 --> 00:37:37,819
here so I know that is going to be any
mention so the tech secure protocol

445
00:37:37,820 --> 00:37:40,980
doesn't doesn't give you ran out this
library doesn't give you the content I

446
00:37:40,980 --> 00:37:45,020
but we're going to fix that soon so I
need to know what it is and then i can

447
00:37:45,020 --> 00:37:48,570
download a file oh and by the way these
are files that are handled by defining

448
00:37:48,570 --> 00:37:52,849
manager so of course all of the actions
that a show you you can also do on

449
00:37:52,849 --> 00:37:56,640
contacts and attachment you can encrypt
and decrypt you can compress them you

450
00:37:56,640 --> 00:38:01,629
can download new consignment you can do
all the fine manager 492 you can also do

451
00:38:01,630 --> 00:38:06,220
indeed have been so i can download these
attachment and then I can open it

452
00:38:06,220 --> 00:38:14,779
any such a lovely cat first time like it
so we just shared a file to each other

453
00:38:14,780 --> 00:38:21,040
so interlock not only allows you to do
encryption capabilities but by plugging

454
00:38:21,040 --> 00:38:26,490
into the tech Securency infrastructure
we can also easily share files we did

455
00:38:26,490 --> 00:38:32,410
you know or chat sweet we got our users
can you send me one more attachment so

456
00:38:32,410 --> 00:38:37,279
now I got another one and this is a text
file so I can also viewed a text by here

457
00:38:37,280 --> 00:38:42,280
and all of these has been executed on
the use the armory there is no this is

458
00:38:42,280 --> 00:38:48,349
just you know that the browser is just
acting as a as a climbed to all of these

459
00:38:48,349 --> 00:38:52,320
all the data remains on the USB armory
all the communication is done by the

460
00:38:52,320 --> 00:38:54,119
army all the tech security

461
00:38:54,119 --> 00:39:01,150
he's our store on the USB armory on the
encrypted partition and as soon as i log

462
00:39:01,150 --> 00:39:05,019
out so I can also power off the device
but as soon as i log out to the

463
00:39:05,019 --> 00:39:10,589
encrypted partition gets locked and all
the data is safely store there and of

464
00:39:10,589 --> 00:39:13,109
course you can add me from volumes if
you want you can also have a decoy

465
00:39:13,109 --> 00:39:17,529
volume if somebody ask you to a lockheed
you can present you know picture of

466
00:39:17,529 --> 00:39:23,170
kittens and then is safe to another
interpretation so you can do something

467
00:39:23,170 --> 00:39:31,920
like that so this application is
completely open source it's because that

468
00:39:31,920 --> 00:39:37,930
provides as nice as static binary that
we can easily deploy on such a device is

469
00:39:37,930 --> 00:39:43,410
clear separation between the
presentation layer and the service so

470
00:39:43,410 --> 00:39:49,609
all of the JavaScript HTML overruns
client's site and the server is a JSON

471
00:39:49,609 --> 00:39:53,549
server with a clearly defined API for
patients and you can take a look at the

472
00:39:53,549 --> 00:39:58,829
API and co2 protocol is implemented that
we would try to be as many Mullen as

473
00:39:58,829 --> 00:40:02,279
efficient as possible and we also have a
minimum amount of external dependencies

474
00:40:02,279 --> 00:40:07,499
so all of the features that you've seen
except executor integration hard on an

475
00:40:07,499 --> 00:40:11,779
ATV by application without using any
external library just undergone library

476
00:40:11,779 --> 00:40:20,829
and a texaco integration uses a scene we
support OpenPGP so we don't pipe to GPG

477
00:40:20,829 --> 00:40:25,269
binary this is old natively done in go
we a symmetric a yes

478
00:40:25,269 --> 00:40:33,848
ciphers we also have security tokens I
haven't shown these but we also we also

479
00:40:33,849 --> 00:40:39,170
you can also add your TOTP your your
one-time talkin here the we're talking

480
00:40:39,170 --> 00:40:43,380
about the Google authentication tokens
for instance so this is my get have

481
00:40:43,380 --> 00:40:47,569
token I can refresh and I can have my my
talking here so instead of having the

482
00:40:47,569 --> 00:40:51,369
Google route you can have a back up here
so you can also have one time tokens or

483
00:40:51,369 --> 00:40:57,500
being there and you can also use them
and we have now texted you are and

484
00:40:57,500 --> 00:41:03,350
signal support and yes you look at the
APR is very easy we have Jason request

485
00:41:03,350 --> 00:41:06,850
from the client from logging in an
organized and all these requests are

486
00:41:06,850 --> 00:41:12,170
tied to looks commands for opening my
own team or unlocking the creature

487
00:41:12,170 --> 00:41:16,430
petition and downloading the files it's
all been sourced

488
00:41:16,430 --> 00:41:20,910
been released today with security and
integration and we hope to be able to

489
00:41:20,910 --> 00:41:26,790
build up more functionality into these
devices that we can have easy sharing of

490
00:41:26,790 --> 00:41:32,190
files using on infrastructure which we
believe to be secure such as tech secure

491
00:41:32,190 --> 00:41:36,260
seen on framework and 12 direct
communication between these two devices

492
00:41:36,260 --> 00:41:44,840
or other clients that use these products
such as and so on so I think we have a

493
00:41:44,840 --> 00:41:49,080
few times for questions I thank you very
much for your attention and for your

494
00:41:49,080 --> 00:41:53,870
interest

495
00:41:53,870 --> 00:42:27,750
any questions

496
00:42:27,750 --> 00:42:36,349
yes

497
00:42:36,349 --> 00:42:38,000
heat

498
00:42:38,000 --> 00:42:44,450
not so far so the temperature is is
under control we compile colonels all

499
00:42:44,450 --> 00:42:50,879
the time on it and we have any issues or
so far so we tested of course before a

500
00:42:50,880 --> 00:42:55,230
manufacturing and yes we have no issues
and is also there are things that we can

501
00:42:55,230 --> 00:42:59,080
do we set the CPU frequency on the man
so the frequencies office office only

502
00:42:59,080 --> 00:43:10,400
set to maximum 20 is actually required a
device locked down

503
00:43:10,400 --> 00:43:34,710
the power is off when the shutdown
procedure is complete the LED turns on

504
00:43:34,710 --> 00:43:39,680
so I need on a boot it turns off when
the boot is completed and then he turns

505
00:43:39,680 --> 00:43:43,700
on again so that I can add visual
feedback that the shutdown procedures

506
00:43:43,700 --> 00:43:58,700
but it takes two seconds so you would is
plain text but he can be signed with

507
00:43:58,700 --> 00:44:02,720
encryption keys that you can't fuse on
the system so you can choose up to 4

508
00:44:02,720 --> 00:44:07,899
signature keys and then you can sign you
boots and and that's single device will

509
00:44:07,900 --> 00:44:08,869
only boot

510
00:44:08,869 --> 00:44:13,000
sign if you lose your privacy is and
you're not able to sign anything then

511
00:44:13,000 --> 00:44:17,500
this is a break that you can just throw
away so it's also interesting feature

512
00:44:17,500 --> 00:44:24,140
for the petition if you want you can
also use a run them citing keys and then

513
00:44:24,140 --> 00:44:30,700
make also the hardware device and usable
if you want to but we should be with our

514
00:44:30,700 --> 00:44:35,700
keys we plan in the future to have an
option and when you order you give us

515
00:44:35,700 --> 00:44:40,629
your public key hash and we use it for
you so that you know that he trying to

516
00:44:40,630 --> 00:44:44,630
see did the boys can only be hoped so
that's one thing but we gotta be careful

517
00:44:44,630 --> 00:44:48,440
we not because you know there's some
customer support issues there are some

518
00:44:48,440 --> 00:44:52,809
people might not have generated the key
properly or they might lose the key so

519
00:44:52,809 --> 00:44:56,160
it is something that is only for
advanced user but of course it's quite

520
00:44:56,160 --> 00:44:59,149
possible yeah

521
00:44:59,150 --> 00:45:07,910
for the interlock application that's
your web application for interfacing

522
00:45:07,910 --> 00:45:12,790
with this USB device are you doing
anything about the browser cache to make

523
00:45:12,790 --> 00:45:15,450
sure that you're not leaving all your
encrypted information that you're

524
00:45:15,450 --> 00:45:22,240
pulling out of the device so there's a
reset it certainly must be improving

525
00:45:22,240 --> 00:45:26,189
will be improves but I think we're
requiring the browser not to catch

526
00:45:26,190 --> 00:45:27,740
anything from it

527
00:45:27,740 --> 00:45:37,959
ok I think we said yes and we quest for
perfection as well I i so recently a

528
00:45:37,960 --> 00:45:42,950
very nice article about additional goal
modules that allow more protection I

529
00:45:42,950 --> 00:45:47,259
kinda don't want to use external
dependencies that caused more

530
00:45:47,260 --> 00:45:53,440
protections and if you have some always
welcome any other questions yes sir

531
00:45:53,440 --> 00:46:03,370
you're doing a lot of crypto work there
what is sure random bits source so we do

532
00:46:03,370 --> 00:46:11,160
not recommend crypto so we use days
undergo library which I would say it had

533
00:46:11,160 --> 00:46:15,060
issues in the very early stages but now
it's getting more and more audit and

534
00:46:15,060 --> 00:46:21,090
also going as far as implementing site's
content protection and so on and as we

535
00:46:21,090 --> 00:46:27,560
we paid directly to the library which
provides an adequate support for that

536
00:46:27,560 --> 00:46:32,460
and which also uses

537
00:46:32,460 --> 00:46:38,860
we also have and this is a true random
number generator and as a driver for

538
00:46:38,860 --> 00:46:43,010
that which works we haven't tested it
yet

539
00:46:43,010 --> 00:46:47,950
specifically but you can also use that
there are also several co-processor on

540
00:46:47,950 --> 00:46:49,419
the system-on-a-chip

541
00:46:49,420 --> 00:46:53,810
however some people they preferred to
have encryption done in software that I

542
00:46:53,810 --> 00:46:58,040
can control writing so so far we don't
never

543
00:46:58,040 --> 00:47:03,410
but using them is just a matter of
enabling the right options in the car so

544
00:47:03,410 --> 00:47:08,710
all of the drivers are our most of the
drivers are there so that's a layer

545
00:47:08,710 --> 00:47:15,220
which is a ball our number one of the
question is the specs are the

546
00:47:15,220 --> 00:47:21,419
specifications for the Terrapins he
opened them a little from the doctor

547
00:47:21,420 --> 00:47:27,110
tells you the registers and all the
eighty-eight you need to use for the

548
00:47:27,110 --> 00:47:31,160
random number generator in the driver is
open source improvised you know we works

549
00:47:31,160 --> 00:47:40,839
date i dont Freescale dozen you the
exact insight on how internal I don't

550
00:47:40,840 --> 00:47:44,200
think you will find any manufactured but
does that but at least you have the

551
00:47:44,200 --> 00:47:46,319
option of either feeding from other
sources

552
00:47:46,320 --> 00:47:52,110
overusing conversion on Linux kernel
random number generation think you and

553
00:47:52,110 --> 00:47:54,730
your question no

554
00:47:54,730 --> 00:47:56,620
okay thank you I got any you want to see
that

