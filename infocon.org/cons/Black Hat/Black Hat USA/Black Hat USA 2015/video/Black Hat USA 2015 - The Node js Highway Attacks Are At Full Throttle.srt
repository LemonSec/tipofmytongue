1
00:00:00,000 --> 00:00:06,819
hello and welcome to the last talked of
Wednesday why can't your end Jasmine

2
00:00:06,819 --> 00:00:11,980
room today and you're here to see
hopefully the NodeJS highway emit a

3
00:00:11,980 --> 00:00:16,900
spell and Monte Simmons there are a
couple quick announcements there's a

4
00:00:16,900 --> 00:00:20,709
reception tonight right now in the
business all but you're here which is

5
00:00:20,710 --> 00:00:26,769
probably much better choice than at 6:30
the pony awards happen in the mental

6
00:00:26,769 --> 00:00:32,829
abcd room earlier a couple of things we
said 6 o'clock it's actually 630 and if

7
00:00:32,829 --> 00:00:36,800
you have cell phones make sure that the
there on a vibrating motors income of

8
00:00:36,800 --> 00:00:40,370
silent mode so you don't have crazy
ringtones and dropping the talk that's

9
00:00:40,370 --> 00:00:48,670
it thank you and enjoy good good evening
everyone as we were presented a Madison

10
00:00:48,670 --> 00:00:54,320
man and together with the means I mean
to spell during the last year we did

11
00:00:54,320 --> 00:00:59,079
some research regarding no Gstaad no
Jess support to our product we both work

12
00:00:59,079 --> 00:01:04,030
for check marks and we found some
interesting stuff regarding node.js and

13
00:01:04,030 --> 00:01:08,670
we felt that many people don't know
these aspect of no Jess and we thought

14
00:01:08,670 --> 00:01:13,850
it would be nice to show these insider
these findings we the community so in

15
00:01:13,850 --> 00:01:17,640
the next 30 minutes or so we will show
you some interesting stuff actually

16
00:01:17,640 --> 00:01:22,250
there were some additional issues that
we wanted to show but because this is a

17
00:01:22,250 --> 00:01:26,030
fairly short presentation we didn't we
want to know everything if you're free

18
00:01:26,030 --> 00:01:34,850
to join us at our booth to see some
additional issues i mean everyone so as

19
00:01:34,850 --> 00:01:39,679
presented twice already my name is a
meet and will jump right to it because

20
00:01:39,680 --> 00:01:46,329
we are very limited in time in terms of
the agenda will quickly convert the

21
00:01:46,329 --> 00:01:50,990
node.js architecture and after the
architecture will go through some of the

22
00:01:50,990 --> 00:01:57,119
vulnerabilities or some of the wrong
programming techniques

23
00:01:57,120 --> 00:02:00,960
that might be mentioned a second ago
they'll include items like denial of

24
00:02:00,960 --> 00:02:10,180
service we crypto SQL injection with no
SQL and regulates denial of service so

25
00:02:10,180 --> 00:02:17,880
let's go ahead and talk about the
architecture so node.js as some of you

26
00:02:17,880 --> 00:02:24,690
may know is a single-threaded event
driven application framework the idea is

27
00:02:24,690 --> 00:02:29,530
that you have the event loop in the
center which you can see and the event

28
00:02:29,530 --> 00:02:35,700
queue which constantly delivers content
to the event loop to handle the event

29
00:02:35,700 --> 00:02:41,149
loop won't handle most of the content
itself will pass it on to the to the

30
00:02:41,150 --> 00:02:49,400
event to the to do the bio section in
the process which will then go ahead and

31
00:02:49,400 --> 00:02:53,660
perform the actions and pass it back and
he called back that's left over will

32
00:02:53,660 --> 00:02:57,540
pass back to the event queue so that in
this case what happens actually is the

33
00:02:57,540 --> 00:03:04,440
event loop is constantly available to
perform tasks in a quick manner if we

34
00:03:04,440 --> 00:03:08,270
look at it in a more human-readable way

35
00:03:08,270 --> 00:03:14,050
you have the the single thread at the
cash register at the fast-food

36
00:03:14,050 --> 00:03:18,420
restaurant and you have the event
handler now that you which we can see

37
00:03:18,420 --> 00:03:24,160
here is constantly handing over actions
for these single thread and at single

38
00:03:24,160 --> 00:03:30,420
thread is passing these actions on to
the event's handler ok that way the

39
00:03:30,420 --> 00:03:34,640
single thread the guy at the register is
constantly available to take more and

40
00:03:34,640 --> 00:03:41,609
more orders and there's no need for
multiple actions because he has these

41
00:03:41,610 --> 00:03:47,550
handlers doing the work for him now
what's good and bad about that there is

42
00:03:47,550 --> 00:03:54,430
a lot of advantages for node.js the fact
that it's very quick with IO its good

43
00:03:54,430 --> 00:03:59,280
with TV queries will see that in a
second and

44
00:03:59,280 --> 00:04:03,209
it's good for our for applications that
have high user interaction so web

45
00:04:03,209 --> 00:04:08,800
applications mainly however when we move
over to CPU intensive applications it's

46
00:04:08,800 --> 00:04:14,480
less of a recommended method to use
because in that case you'd actually be

47
00:04:14,480 --> 00:04:21,480
making the event loop working too hard
and it won't be available to go on and

48
00:04:21,480 --> 00:04:33,550
on and perform other actions with the
event handlers so denial of service

49
00:04:33,550 --> 00:04:38,880
well we see on the screen here is a few
lines of code that what it does actually

50
00:04:38,880 --> 00:04:44,159
is some up a number between one and P
where p can be any number that you

51
00:04:44,160 --> 00:04:50,440
choose and wanna see why this is
actually related to denial of service

52
00:04:50,440 --> 00:04:58,479
and this is actually our first demo so
you have two screens here each one of

53
00:04:58,479 --> 00:05:02,690
them is gonna run that script that we
just saw so in this case you have the

54
00:05:02,690 --> 00:05:09,900
number five people's five so it's gonna
someone threw five ok and if I click

55
00:05:09,900 --> 00:05:15,919
that do you see it

56
00:05:15,920 --> 00:05:32,260
know it's cut the left and Tidus cut
just ok let me put it on full screen

57
00:05:32,260 --> 00:05:40,969
ok so now this is actually running
through an event no gesture framework or

58
00:05:40,970 --> 00:05:46,660
no just code and apt once I click the
five it automatically does the action

59
00:05:46,660 --> 00:05:53,480
calculates one through five and it gets
a number fifteen very simple then I go

60
00:05:53,480 --> 00:05:58,480
to a higher number so in this case it's
one with a lot of zeros and I'll add

61
00:05:58,480 --> 00:06:04,640
another 0 just to make sure and it's
going to require more CPU activity and

62
00:06:04,640 --> 00:06:09,130
therefore it's going to take more time
at the same time I'm gonna run 25 again

63
00:06:09,130 --> 00:06:19,680
and we'll see if I get it fast enough
that it's gonna wait until this one

64
00:06:19,680 --> 00:06:26,380
complete the one with the large numbers
still running and 25 which previously

65
00:06:26,380 --> 00:06:30,600
took a second to complete is not
completed yet until the other one

66
00:06:30,600 --> 00:06:35,230
complete so let's give it a second and
you'll see that it happens one after the

67
00:06:35,230 --> 00:06:42,169
other in a second once it happens

68
00:06:42,169 --> 00:06:54,479
I think I had too many zeros ok it's
running in the background the idea is

69
00:06:54,479 --> 00:06:59,289
that currently not being able to process
anything else if we look at the task

70
00:06:59,289 --> 00:07:04,009
manager will see that the thread is
currently using 25% of the CBO which is

71
00:07:04,009 --> 00:07:11,560
a full pour out of the park or is that
this laptop runs so once it finishes and

72
00:07:11,560 --> 00:07:15,020
we had probably won't have a chance to
see it finishing the other one will

73
00:07:15,020 --> 00:07:19,998
immediately be processed and completed
within a second so that's a problem you

74
00:07:19,999 --> 00:07:26,800
can actually I think I've denied my self
service at the moment but the idea is

75
00:07:26,800 --> 00:07:32,009
that if you run a high CPU intensive
application node.js is not the right way

76
00:07:32,009 --> 00:07:37,099
to go and with that lasted over two
months thank you thanks to meet for

77
00:07:37,099 --> 00:07:40,500
breaking the left of justice for my part
of the presentation

78
00:07:40,500 --> 00:07:46,730
so we'll get back to another service
later on when he would describe their

79
00:07:46,730 --> 00:07:50,540
regular expression of service was
important to describe the architecture

80
00:07:50,540 --> 00:07:59,500
behind node.js and look at the OC the
next part will describe a little bit

81
00:07:59,500 --> 00:08:04,460
about week cryptography so as part of
the research we went through some open

82
00:08:04,460 --> 00:08:06,060
source projects

83
00:08:06,060 --> 00:08:13,410
and one piece of code that actually
caught a cold in here it was part of a

84
00:08:13,410 --> 00:08:18,690
system that authenticates users and
something but compete with allows you to

85
00:08:18,690 --> 00:08:25,330
integrate multiple services into same
mechanism obviously I we did some of the

86
00:08:25,330 --> 00:08:35,299
information but can anyone tell us what
wrong without coding here then defined

87
00:08:35,299 --> 00:08:42,890
as one of the problems no matter I know
exactly so basically did when a new user

88
00:08:42,890 --> 00:08:48,720
adjusters the system generates annual
Run do more to do random number and then

89
00:08:48,720 --> 00:08:54,830
generate the MDN 5 of that number and
returns it back at the user's password

90
00:08:54,830 --> 00:09:00,310
so there are two issues here the first
one is that math is not really run down

91
00:09:00,310 --> 00:09:05,099
that's set to run them obviously and
it's from the weekend will see that the

92
00:09:05,100 --> 00:09:11,710
other part is that MDN 5 although it is
a strong quarterly strong hashing

93
00:09:11,710 --> 00:09:16,700
algorithm it can be reversed fairly
easily so we'll see how we actually

94
00:09:16,700 --> 00:09:21,540
break that specific code ok so let's
talk a little bit tired that said the

95
00:09:21,540 --> 00:09:26,890
random number generator works for V
eight dat da engine that runs behind

96
00:09:26,890 --> 00:09:34,189
chrome and and also behind node.js that
the very same engine so basically we

97
00:09:34,190 --> 00:09:39,300
start with the seed number ok this CD is
usually based on the time are when the

98
00:09:39,300 --> 00:09:45,229
system started so that's usually based
on the time and then from the seed and

99
00:09:45,230 --> 00:09:49,620
we we get the state 0 which is a private
value

100
00:09:49,620 --> 00:09:55,360
very secret value and internal value to
the random generator with him and from

101
00:09:55,360 --> 00:10:00,370
state 0 we actually have two numbers are
to be teased around him that he's

102
00:10:00,370 --> 00:10:04,860
presented to the user or is given back
to the developer and then we also also

103
00:10:04,860 --> 00:10:10,200
and you write the next state in that
case state when value so we have

104
00:10:10,200 --> 00:10:14,900
deceived we have state 0 and then we're
only two state-run state-to-state three

105
00:10:14,900 --> 00:10:18,959
and each one of them we can derive its
Rundle number

106
00:10:18,960 --> 00:10:26,170
know this is one way with him so given
run 20 weekend computer back to 80 Y is

107
00:10:26,170 --> 00:10:33,849
that what would happen if you are able
to compute backstage 0 from 120 ok so

108
00:10:33,850 --> 00:10:39,779
once we are at once a hacker has access
to state 0 he can compute all subsequent

109
00:10:39,779 --> 00:10:45,189
States and all future under members ok
that's why these dates are very secret

110
00:10:45,190 --> 00:10:52,960
and this was discovered by Amit Klein
and a few years ago and Google which

111
00:10:52,960 --> 00:10:57,180
runs he ate action modifies the
algorithm every so often and there are

112
00:10:57,180 --> 00:11:04,060
some magic numbers behind this team and
I want to send it right now but the

113
00:11:04,060 --> 00:11:11,479
changes every few versions and so
basically if we take a look back at the

114
00:11:11,480 --> 00:11:17,640
code we need to do three things first of
all he ate and based on science research

115
00:11:17,640 --> 00:11:23,740
given three runs if we know what were
they run the values we can compute all

116
00:11:23,740 --> 00:11:30,860
future ones so first we need to reverse
the md5 of Austria passwords given to

117
00:11:30,860 --> 00:11:35,730
the md5 we need to computer back what
was the random number as the route and

118
00:11:35,730 --> 00:11:39,720
then given three such numbers we can
compute all subsequent values and

119
00:11:39,720 --> 00:11:41,600
compute all next

120
00:11:41,600 --> 00:11:48,949
next passwords ok there are many cases
where this can be helpful for example

121
00:11:48,949 --> 00:11:53,180
let's say that we have the system and
the user's a user clicks on forgot

122
00:11:53,180 --> 00:11:59,670
password and the system generates a new
password for him so I can do for three

123
00:11:59,670 --> 00:12:04,509
times for I forgot my password I will
get three Valley do passwords and then I

124
00:12:04,509 --> 00:12:07,550
can hit a different user

125
00:12:07,550 --> 00:12:13,160
reminding the other users mail and even
without having access to the milk we can

126
00:12:13,160 --> 00:12:16,819
tell what would be the what is the newly
run to number

127
00:12:16,819 --> 00:12:23,509
induct another demo we will do something
a bit different so given three

128
00:12:23,509 --> 00:12:24,709
consecutive number

129
00:12:24,709 --> 00:12:30,800
random values we can compute States
iran's state when Google knows about

130
00:12:30,800 --> 00:12:36,550
that but it is considered and no risk
and the reason is considered low risk is

131
00:12:36,550 --> 00:12:42,130
because in chrome and other brothers
each tab and has its own state to state

132
00:12:42,130 --> 00:12:48,180
0 in one of the perot in one of the tabs
is different than state 10 in other

133
00:12:48,180 --> 00:12:55,319
types so even if he's able to to know
what its own state 0 it means nothing

134
00:12:55,319 --> 00:13:01,759
for other Bros other types in the same
browser that being said while using he

135
00:13:01,759 --> 00:13:08,490
ate as part of node.js it means that all
users are using this same in node.js

136
00:13:08,490 --> 00:13:13,769
server should ensure that very same
state 0 so one user can compute its

137
00:13:13,769 --> 00:13:18,170
almost 80 and you truly hold true also
for other users

138
00:13:18,170 --> 00:13:24,490
let's see how it works user will
register as fate user one and he gets

139
00:13:24,490 --> 00:13:29,279
back as a result the fake user one
Password and then he will reduce its

140
00:13:29,279 --> 00:13:35,709
fake user to get fake user to password
reduces feature three and gate get fake

141
00:13:35,709 --> 00:13:45,250
user three password reminder you can see
here the code ok then we will send all

142
00:13:45,250 --> 00:13:51,670
three password which R and D five hashed
to our Rainbow table ok we created the

143
00:13:51,670 --> 00:13:52,860
rain boot tablespace

144
00:13:52,860 --> 00:13:58,580
specifically for that for these random
numbers ok so we will send it to a cloud

145
00:13:58,580 --> 00:14:06,450
service which computes Mac dmg 513 get
back as a result are the clean clean

146
00:14:06,450 --> 00:14:11,360
random numbers ok so we get back they
clear run-down of all three passports

147
00:14:11,360 --> 00:14:17,940
and then we'll send us some magic once
again on the cloud that computes the

148
00:14:17,940 --> 00:14:23,910
state 0 out of three consecutive numbers
will compute the fourth number then

149
00:14:23,910 --> 00:14:26,740
recreate the hash code of it and we all
know what would be the password to the

150
00:14:26,740 --> 00:14:39,160
first of the first user makes perfect
let you know that the screens are ready

151
00:14:39,160 --> 00:14:43,610
to cut because of resolution try to do
the best out of it

152
00:14:43,610 --> 00:14:48,660
yeah ok

153
00:14:48,660 --> 00:14:58,829
I guess you're laughing cause of that ya
later just a user one and an email

154
00:14:58,829 --> 00:15:03,628
whatever you one that's register

155
00:15:03,629 --> 00:15:14,899
Internet connectivity no good just a sec
and I mean you can have your lips yeah I

156
00:15:14,899 --> 00:16:01,350
owe you money

157
00:16:01,350 --> 00:16:38,870
on the plane

158
00:16:38,870 --> 00:16:46,819
and we got to this second

159
00:16:46,819 --> 00:16:49,779
back to hear

160
00:16:49,779 --> 00:17:01,300
that

161
00:17:01,300 --> 00:17:02,670
ok

162
00:17:02,670 --> 00:17:24,959
and love it now let's take third
password

163
00:17:24,959 --> 00:17:30,929
ok so far we have the 32 the values that
were used to compute the password and

164
00:17:30,929 --> 00:17:35,929
now I would run the algorithm that
actually computes the next so-called

165
00:17:35,929 --> 00:17:47,419
random number so let's run it well this
is running was quick ok so this is the

166
00:17:47,419 --> 00:17:55,309
next password that should be run is the
one that begins with the key to and ends

167
00:17:55,309 --> 00:18:00,470
with FCC oK so that's what the system
believes will be the next password so

168
00:18:00,470 --> 00:18:16,970
now let's register does register as a
user and sure enough and sec

169
00:18:16,970 --> 00:18:22,580
and the reason that we had to print the
rainbow tables that all of em publicly

170
00:18:22,580 --> 00:18:27,500
available rainbow tables are ones that
are used to decrypt passwords so they're

171
00:18:27,500 --> 00:18:36,630
usually limited to eight to 10
alphanumeric characters and ok eight to

172
00:18:36,630 --> 00:18:43,940
10 characters now the actual number of
the TV generated by ear unto him a much

173
00:18:43,940 --> 00:18:49,799
younger he's usually 16 digits long and
that case no publicly available under

174
00:18:49,799 --> 00:18:55,940
week we can find any any rainbow double
so we had to create our own yet invented

175
00:18:55,940 --> 00:19:13,490
the presentation at Chanel's laptops for
a second

176
00:19:13,490 --> 00:19:33,670
are not there are no records and then
there are no tables are collections ok

177
00:19:33,670 --> 00:19:39,580
so for example at the very same
collection table called products we can

178
00:19:39,580 --> 00:19:46,730
add one record one document where the
value item is card and the value of

179
00:19:46,730 --> 00:19:53,550
quantities 15 and then in diverse same
collection have another document with

180
00:19:53,550 --> 00:19:59,100
the name elephant incise 1700 you know
did you find funny is the Indian these

181
00:19:59,100 --> 00:20:05,290
collection we can use product find which
finds everything we can issue and

182
00:20:05,290 --> 00:20:10,100
filtering using JSON format for example
we can limit to all the ones that

183
00:20:10,100 --> 00:20:14,639
they're quantities 15 or it can you sub
expression and that's cool that's

184
00:20:14,640 --> 00:20:21,660
crucial we can you limit the quantity
that is greater than 25 ok so everything

185
00:20:21,660 --> 00:20:26,220
is Jason based filtering is Jason Bay
standard parameters for the field drink

186
00:20:26,220 --> 00:20:32,870
is also Jason based on OGS and there is
a one-to-one correlation between Jason

187
00:20:32,870 --> 00:20:38,580
structure and objects so every object is
ultimate automatically translated into

188
00:20:38,580 --> 00:20:43,870
Jason back-and-forth so we could have
done the same but using var object of

189
00:20:43,870 --> 00:20:48,080
jannat quantity points to fifteen or
twenty five and then do debe product

190
00:20:48,080 --> 00:20:48,790
find

191
00:20:48,790 --> 00:20:56,450
oK so it's important to note that
filtering Jason filtering MongoDB

192
00:20:56,450 --> 00:21:02,020
request or queries based on Jason and
you can do it either by sending the

193
00:21:02,020 --> 00:21:09,100
Jason itself or an object with the
relevant values let's see how it gets

194
00:21:09,100 --> 00:21:13,709
really interesting so that's obviously a
single injection most of your hopefully

195
00:21:13,710 --> 00:21:21,120
all of you know that so that's that's
fairly easy and MongoDB since it's there

196
00:21:21,120 --> 00:21:27,350
is no SQL so there is no SQL injection
as I mean so let's say that we get it we

197
00:21:27,350 --> 00:21:32,570
create an object called me that its
values taken directly from the crew

198
00:21:32,570 --> 00:21:37,700
stream and then an object code password
directly taken from the password and

199
00:21:37,700 --> 00:21:38,600
then we do

200
00:21:38,600 --> 00:21:45,168
DBA users find and then we find places
where username equals to name is a name

201
00:21:45,169 --> 00:21:49,010
and a password to password and then we
decide if exists

202
00:21:49,010 --> 00:21:54,760
do you think it's a good solution I've
seen that there is no otherwise wouldn't

203
00:21:54,760 --> 00:22:01,320
be here but why is this ok so the fun
part is that although in most cases name

204
00:22:01,320 --> 00:22:06,020
is actually stream we start earlier that
we can actually use

205
00:22:06,020 --> 00:22:13,530
sub Jason expression so if this was
actually a more complex objects with

206
00:22:13,530 --> 00:22:18,160
data members it would have been
automatically extended in here and we

207
00:22:18,160 --> 00:22:24,230
could have used some other operators
rather than just if well and let's see

208
00:22:24,230 --> 00:22:31,660
how it is done for example you can use
DPD find user name is greater than a and

209
00:22:31,660 --> 00:22:36,740
then use password greater than a knowing
any valid username and password assuming

210
00:22:36,740 --> 00:22:41,940
that the user name is greater than a and
then the path towards greater than a we

211
00:22:41,940 --> 00:22:50,840
would be able to log into the system so
as a reference you can see the full blog

212
00:22:50,840 --> 00:23:13,959
web security size site works so let's
start with something

213
00:23:13,960 --> 00:24:03,179
ok so if we get here that's bad and as
promised we can use dollar G teen

214
00:24:03,179 --> 00:24:05,020
greater than

215
00:24:05,020 --> 00:24:12,480
and then ecology team here

216
00:24:12,480 --> 00:24:19,059
automatically created a node.js complex
object and then she realized it when it

217
00:24:19,059 --> 00:24:24,690
is sent to the MongoDB and welcome back
at me okay so we don't do it using any

218
00:24:24,690 --> 00:24:32,559
legitimate but we were able to log in
and actually here and it's a different

219
00:24:32,559 --> 00:24:46,000
user ok so if you can just go through
the system and do that ok thank you

220
00:24:46,000 --> 00:24:52,280
and that's what we usually seen project
is to use the following we do it D be

221
00:24:52,280 --> 00:24:59,090
users find find the used get the user
object that has that name and then

222
00:24:59,090 --> 00:25:04,870
compare the password starting to
database password provided by the user

223
00:25:04,870 --> 00:25:10,250
ok so we don't let the MongoDB to to
validate both username and password you

224
00:25:10,250 --> 00:25:14,400
just retrieved the user name from the
database and then we compared to

225
00:25:14,400 --> 00:25:20,320
retrieve password with whatever the user
type in makes sense ok this is a good

226
00:25:20,320 --> 00:25:28,950
solution no not so much why is that so
we always used the dollar GTE to compare

227
00:25:28,950 --> 00:25:34,080
if values greater than there are about
30 different operators that can be used

228
00:25:34,080 --> 00:25:38,429
one of the operators some one that I
personally like very much is the regex

229
00:25:38,430 --> 00:25:43,470
operator ok it allows you to find
entities in the database that match a

230
00:25:43,470 --> 00:25:50,010
specific regular expression now back to
our part we know that no jesse is highly

231
00:25:50,010 --> 00:25:56,280
sensitive to CPU intensive tasks regular
expression is highly five minutes left

232
00:25:56,280 --> 00:26:02,610
perfect or not so battered that ok and
so knowing that no GST is very sensitive

233
00:26:02,610 --> 00:26:08,740
and regular expression it takes a lot of
CPU and we can use both to do some kind

234
00:26:08,740 --> 00:26:14,330
of really interesting and denial of
service like that just a second let me

235
00:26:14,330 --> 00:26:20,500
go beach front page from mice like it's
ok

236
00:26:20,500 --> 00:26:30,960
I hope it's ok

237
00:26:30,960 --> 00:26:50,630
here and let me open the CPU ok now I
hit enter and you can see that MongoDB

238
00:26:50,630 --> 00:26:56,309
near takes 25 percent CPU I have four
cores so a single request consumes a

239
00:26:56,309 --> 00:27:02,408
fluke or two to work on and it takes a
few seconds obviously the more aid being

240
00:27:02,409 --> 00:27:09,169
the longer it will take sending request
would take 100 percent of my laptop and

241
00:27:09,169 --> 00:27:14,690
obviously we can very easily and consume
all CPU cycles from December just by

242
00:27:14,690 --> 00:27:18,510
standing four or eight requests so we
can do it constantly

243
00:27:18,510 --> 00:27:52,470
actually blocked completely the MongoDB
that works behind the scenes ok ok thank

244
00:27:52,470 --> 00:27:52,840
you very much

