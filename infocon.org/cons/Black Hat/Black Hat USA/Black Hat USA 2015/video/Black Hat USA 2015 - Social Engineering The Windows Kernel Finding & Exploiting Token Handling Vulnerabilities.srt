1
00:00:00,000 --> 00:00:06,990
good afternoon black had explained here
yet but she background slide if you

2
00:00:06,990 --> 00:00:11,519
don't know me I work for Google on the
project zero research team specializing

3
00:00:11,519 --> 00:00:16,279
in Windows mainly privilege escalation
sort of vulnerabilities mainly because I

4
00:00:16,279 --> 00:00:22,198
like logical vulnerabilities and Robert
memory corruption so I find that quite

5
00:00:22,199 --> 00:00:27,990
often in these sort of types of things
so what exactly am I gonna talk about

6
00:00:27,990 --> 00:00:32,969
this week quite a technical talk it's a
talk for people who want to hunt for

7
00:00:32,969 --> 00:00:38,719
bugs in the Windows kernel and it
specifically related to the Windows

8
00:00:38,719 --> 00:00:43,739
security access security mechanisms and
how it relates to how kernel code and

9
00:00:43,739 --> 00:00:48,260
kernel drivers may actually interact
with Windows security mechanism to

10
00:00:48,260 --> 00:00:55,430
verify a user's identity and Windows
actually a really complicated security

11
00:00:55,430 --> 00:01:01,519
architecture but she's a break it down
to serve three main parts the first part

12
00:01:01,520 --> 00:01:06,100
is each resource say a fire or Laura
process has some sort of security

13
00:01:06,100 --> 00:01:10,390
associated with it which defines who is
allowed to access it and what they're

14
00:01:10,390 --> 00:01:15,020
allowed to do once they do at this is
stored in something called the security

15
00:01:15,020 --> 00:01:19,280
descriptor contains various bits of
information about these curable resource

16
00:01:19,280 --> 00:01:24,750
what you're allowed to do it the next
component is the process and

17
00:01:24,750 --> 00:01:31,130
specifically its associated access token
an access token is your user identity

18
00:01:31,130 --> 00:01:36,199
effectively provides the identity to the
operating system and these two combine

19
00:01:36,200 --> 00:01:40,850
when you do system calls or other curl
Dr account gets it gets involved and

20
00:01:40,850 --> 00:01:44,179
talks to something called the security
reference monitor scripture reference

21
00:01:44,180 --> 00:01:47,579
monitor is responsible for actually
enforcing the security of the system

22
00:01:47,579 --> 00:01:53,079
providing security decisions you can try
and documentation about the SRM

23
00:01:53,079 --> 00:01:58,729
scripture reference Martha basically
issued in kernel mode code if the

24
00:01:58,729 --> 00:02:03,450
function starts for the prefix Fe that
means it's something related to security

25
00:02:03,450 --> 00:02:10,060
now the real core of pretty much all
security decisions is the access check

26
00:02:10,060 --> 00:02:11,220
and this is done through

27
00:02:11,220 --> 00:02:15,040
usually for a function called St access
check and if it's just sort of taking

28
00:02:15,040 --> 00:02:20,980
your your token and applying it to a
security descriptor making a decision on

29
00:02:20,980 --> 00:02:26,700
whether I'm going to give you access or
not so there's a few different steps the

30
00:02:26,700 --> 00:02:31,269
first step being checking the integrity
level empty next level is something the

31
00:02:31,270 --> 00:02:36,860
added in this which determines is like a
mandatory access control mechanism is

32
00:02:36,860 --> 00:02:42,730
simply a number your access token as a
number there is also has a number and if

33
00:02:42,730 --> 00:02:47,579
you are above equal to the results
number you're allowed access otherwise I

34
00:02:47,580 --> 00:02:52,350
can tell you to go away then it goes
into things I only check then the doctor

35
00:02:52,350 --> 00:02:55,410
check is the most important part this is
where it determines what you can

36
00:02:55,410 --> 00:03:00,049
actually do with that resource if it
succeeds you've got access if it doesn't

37
00:03:00,050 --> 00:03:05,810
I'll tell you to go away now access
tokens actually pretty complicated

38
00:03:05,810 --> 00:03:10,950
structure so if you think of a sort of
traditional UNIX system you may have had

39
00:03:10,950 --> 00:03:16,459
user IDs or group IDs just sort of
simple simple numeric values the access

40
00:03:16,459 --> 00:03:21,260
token in in Windows users to security
identify which is actually sort of more

41
00:03:21,260 --> 00:03:26,239
complicated structure this is this and
and multiple sort of numbers after it

42
00:03:26,239 --> 00:03:29,239
now

43
00:03:29,239 --> 00:03:33,170
it also contains things like your group
so you have your user groups it has your

44
00:03:33,170 --> 00:03:37,109
manager label this is your integrity
level and also has privileges which are

45
00:03:37,110 --> 00:03:40,570
going to little bit briefly at the end
cuz it has important consequences

46
00:03:40,570 --> 00:03:48,470
elsewhere but fundamentally you access
tokens just another kernel object is

47
00:03:48,470 --> 00:03:52,870
just another allocated buffer in memory
allocated structure internal memory

48
00:03:52,870 --> 00:03:57,810
which has some berries in it and
obviously has then a similar association

49
00:03:57,810 --> 00:04:01,760
with all other sort of cut up to colonel
objects including a can actually be

50
00:04:01,760 --> 00:04:06,350
curable you can have its own security
descriptor and access control lists and

51
00:04:06,350 --> 00:04:10,460
which defines who can access that token
information

52
00:04:10,460 --> 00:04:16,600
it wouldn't be obviously it's just a
single type of total because obviously

53
00:04:16,600 --> 00:04:22,060
isn't any sort of scenarios which may
find yourself so I can have broken down

54
00:04:22,060 --> 00:04:25,700
into sort of four main types of tokens
this probably could probably argue for

55
00:04:25,700 --> 00:04:29,229
different sort of categorization but
this is the main one you would normally

56
00:04:29,230 --> 00:04:33,450
see the normal token is just the one you
would run as a normal user you had your

57
00:04:33,450 --> 00:04:36,120
normal basic token

58
00:04:36,120 --> 00:04:39,750
when you get your AC involved User
Account Control

59
00:04:39,750 --> 00:04:44,390
haven't come across the link token this
is just a test another token which is

60
00:04:44,390 --> 00:04:48,469
associated with the same token for
example your you can have an

61
00:04:48,470 --> 00:04:52,510
administrator token linked to your
normal use a token and potential you can

62
00:04:52,510 --> 00:04:57,880
switch between them they talk talking to
the appropriate service now underneath

63
00:04:57,880 --> 00:05:04,210
normal tokens you have to system calls
which allows you to create sort of new

64
00:05:04,210 --> 00:05:07,799
tokens with new security properties you
have

65
00:05:07,800 --> 00:05:12,870
first entry filter token this creates
what is called a filter token and you

66
00:05:12,870 --> 00:05:18,050
actually also see this as a restricted
token because of the winter to API calls

67
00:05:18,050 --> 00:05:24,240
it the great restricted token now in
Windows 8 to support @ containers and

68
00:05:24,240 --> 00:05:28,220
the sort of commercial applications

69
00:05:28,220 --> 00:05:31,610
a new type of tokens created the low box
token and then as an appropriate

70
00:05:31,610 --> 00:05:36,270
function to call the both of those
functions take an existing token and try

71
00:05:36,270 --> 00:05:40,060
to copy some of its security information
and imply new set of security at

72
00:05:40,060 --> 00:05:46,490
graduation was important fields you need
to bear in mind when thinking about

73
00:05:46,490 --> 00:05:50,930
token token security obviously got to
grips your user

74
00:05:50,930 --> 00:05:56,060
things like your token I D which is a
unique 64 bit number is basically an

75
00:05:56,060 --> 00:06:00,730
incrementing number which is assigned to
each token is only locally unique but

76
00:06:00,730 --> 00:06:03,100
that's all that matters

77
00:06:03,100 --> 00:06:06,750
counterparts that you had to Parenteau
Canadian this is you sometimes for

78
00:06:06,750 --> 00:06:11,270
security decisions and just reflects say
when you you're doing a filter token

79
00:06:11,270 --> 00:06:19,128
reflects which token you created that
total number of things in there

80
00:06:19,129 --> 00:06:26,469
now in common with all objects for
pretty much all objects you can actually

81
00:06:26,469 --> 00:06:31,998
access it from using their our system
calls to get hold of access tokens and

82
00:06:31,999 --> 00:06:37,399
manipulate them so when you do that you
get hold the handle that kind of object

83
00:06:37,399 --> 00:06:42,199
because obviously user mode can talk to
point directly and has certain access

84
00:06:42,199 --> 00:06:46,719
rights which you can get access to and
these are sort of the important ones to

85
00:06:46,719 --> 00:06:51,490
bear in mind when you're looking at
taken work things like can I do to get

86
00:06:51,490 --> 00:06:56,459
the token can I assign it as a new token
for a new process or can I in person at

87
00:06:56,459 --> 00:07:01,789
that token and if you don't have been
right then you can actually perform that

88
00:07:01,789 --> 00:07:09,849
action and that could become quite
important for certain set of events I

89
00:07:09,849 --> 00:07:15,688
categorized Ford sort of types of tokens
of course that's still not the end of

90
00:07:15,689 --> 00:07:22,759
the story actually two types of each
type of token they just simple values

91
00:07:22,759 --> 00:07:26,849
which are part of the token structure
itself and the first type is the primary

92
00:07:26,849 --> 00:07:34,029
token this is the token you assign to
process the main total that process

93
00:07:34,029 --> 00:07:39,019
token is impersonation tokens an
impersonation tokens are used to allow

94
00:07:39,019 --> 00:07:43,759
for impersonating another user and you
can think of impersonation in the sort

95
00:07:43,759 --> 00:07:48,839
of context of a secure service I provide
a service may want to do something on

96
00:07:48,839 --> 00:07:53,869
behalf of that User which is calling it
which is probably just a normal user now

97
00:07:53,869 --> 00:07:58,800
it could go free soon convoluted process
pulling out your username manually

98
00:07:58,800 --> 00:08:03,009
verifying with your allowed to access a
resource but it'd be far easier to just

99
00:08:03,009 --> 00:08:08,849
how she say I'm gonna pretend to be you
for a few minutes 3 seconds and I'm

100
00:08:08,849 --> 00:08:13,819
going to perform these actions as if I
was you this is where impersonation

101
00:08:13,819 --> 00:08:15,619
tokens come in their assigned to her

102
00:08:15,619 --> 00:08:18,659
a single thread so when you're running
in that thread it can potentially

103
00:08:18,659 --> 00:08:24,498
perform any action that you would
normally be well to do an impersonation

104
00:08:24,499 --> 00:08:29,749
taken when set actually takes primacy
over the primary taken so it will

105
00:08:29,749 --> 00:08:31,460
actually ignore your current token

106
00:08:31,460 --> 00:08:40,189
now impersonation tokens then have four
kind of categories of of tokens so we've

107
00:08:40,190 --> 00:08:44,740
got even water and this is related to
the impersonation level and this is

108
00:08:44,740 --> 00:08:49,270
something which basically sort of
determines what you're allowed to do

109
00:08:49,270 --> 00:08:56,220
that token to the top to delegate
delegation in person nation are from a

110
00:08:56,220 --> 00:08:59,850
local perspective exactly the same thing
there's no actual difference between two

111
00:08:59,850 --> 00:09:05,560
but what actually happens is if you've
got delegation impersonation level you

112
00:09:05,560 --> 00:09:12,140
can pretend to be a user from security
however is less than that if you got a

113
00:09:12,140 --> 00:09:17,630
identification level all you can do is
sort of read out the information about

114
00:09:17,630 --> 00:09:22,910
that that user and that token you can
actually use it for security work you

115
00:09:22,910 --> 00:09:28,339
can open a fire under that uses context
it just won't allow you to do that is

116
00:09:28,339 --> 00:09:31,149
the reason that there is a difference
between delegation impersonation but not

117
00:09:31,149 --> 00:09:35,180
locally delegation is used for allowing
delegating your credentials to remote

118
00:09:35,180 --> 00:09:42,620
systems we have to say that are usually
the domain so we don't care about it now

119
00:09:42,620 --> 00:09:46,800
when you want to convert between a
primary token an impersonation thing you

120
00:09:46,800 --> 00:09:51,599
can do is is duplicated token there's a
system quarter Davis for you you need

121
00:09:51,600 --> 00:09:56,740
the token duplicate access right but
what you can do if you have access to a

122
00:09:56,740 --> 00:10:00,640
primary taken you can always converted
to an equivalent impersonation token

123
00:10:00,640 --> 00:10:06,949
however for security reasons you can't
convert back unless the level is greater

124
00:10:06,950 --> 00:10:10,709
or equal to impersonate you can
understand why he could convert and

125
00:10:10,709 --> 00:10:16,489
identification taken back then you could
create new process as that user and

126
00:10:16,490 --> 00:10:22,279
pretend to be a user and you don't want
that to happen and also each new token

127
00:10:22,279 --> 00:10:26,790
you get gets creative with a new unique
identifier so it's worth keeping track

128
00:10:26,790 --> 00:10:31,910
of that you can set it in various ways
there's a direct setting mechanism sort

129
00:10:31,910 --> 00:10:35,770
of an implicit explicit setting where
you actually have a handle to a threat

130
00:10:35,770 --> 00:10:43,150
to a token and you say set this token on
this threat but also indirect mechanisms

131
00:10:43,150 --> 00:10:48,260
so this is where factory to colonel has
some sort of reference to a security

132
00:10:48,260 --> 00:10:54,240
context say a named pipe client or a RPC
client and you say I want to impersonate

133
00:10:54,240 --> 00:10:59,700
the person who called my service and so
this allows you to sort of transit

134
00:10:59,700 --> 00:11:03,480
security credentials between two
different processes and then it kinda

135
00:11:03,480 --> 00:11:11,290
has a few extra functions to do
basically gonna be a real problem if

136
00:11:11,290 --> 00:11:15,689
normally uses could impersonate any
other user if they just had a handle to

137
00:11:15,690 --> 00:11:20,370
token they pretend to be local system
that will be bad sorry that she's in

138
00:11:20,370 --> 00:11:24,970
security involved so prior to Windows
2000 this thing didn't really exist but

139
00:11:24,970 --> 00:11:29,970
after doubt a new privilege without it
and personal privilege and unless you

140
00:11:29,970 --> 00:11:34,720
have that you're very restricted on what
type of token you can impersonate

141
00:11:34,720 --> 00:11:39,870
specifically you can impersonate a token
which has a higher intensity level in

142
00:11:39,870 --> 00:11:44,540
newark is that would be a security
problem you also can only impersonate a

143
00:11:44,540 --> 00:11:52,870
token which has the same user IDs but
crucially is this is not a hard fail

144
00:11:52,870 --> 00:11:58,930
when you corset red token it doesn't
just say access tonight instead it will

145
00:11:58,930 --> 00:12:04,099
actually still set the token but it will
recreate it and set it to identification

146
00:12:04,100 --> 00:12:10,590
and this is actually quite important for
the sort of topic of my talk to use a

147
00:12:10,590 --> 00:12:14,420
few things you can do with that you can
do your normal access checks there is

148
00:12:14,420 --> 00:12:18,140
system cause to access check
identification tokens but in the kernel

149
00:12:18,140 --> 00:12:24,840
it should never ever treated
identification token as ballot this is

150
00:12:24,840 --> 00:12:29,220
why I call it social engineering if
actually you are taking it really easy

151
00:12:29,220 --> 00:12:35,120
to get a hold of this identification for
all intensive purposes and from a

152
00:12:35,120 --> 00:12:39,830
colonel perspective looks almost exactly
the same is like only two bits

153
00:12:39,830 --> 00:12:45,740
difference between a actual valid
impersonation token and identification

154
00:12:45,740 --> 00:12:50,860
so if you can get hold of these tokens
maybe you can actually pretend to be

155
00:12:50,860 --> 00:12:52,570
someone you're not

156
00:12:52,570 --> 00:12:56,910
and if the gatekeeper the guy the kernel
his actually like verifying your

157
00:12:56,910 --> 00:12:58,120
identity

158
00:12:58,120 --> 00:13:03,830
doesn't check correctly your token maybe
you can do something more serious

159
00:13:03,830 --> 00:13:08,470
ok so if you need to exploit
vulnerabilities the first thing you need

160
00:13:08,470 --> 00:13:12,660
to do is be able to capture him in the
first place and now might see marcia

161
00:13:12,660 --> 00:13:17,230
quite difficult thing to do but it turns
out it's actually pretty easy you can go

162
00:13:17,230 --> 00:13:21,820
for one user root that as a function to
land use that password you can have a

163
00:13:21,820 --> 00:13:28,270
lot of course if you do you already know
passivity led more serious if you're

164
00:13:28,270 --> 00:13:34,100
using uac and dependability find
requires administrator token system

165
00:13:34,100 --> 00:13:39,450
quarters get you back and identification
level in person nation token for the UAC

166
00:13:39,450 --> 00:13:43,730
years and I'll just return you can do
that from any privilege level even like

167
00:13:43,730 --> 00:13:49,040
sort of super sandbox chrome render you
can still call this system call and get

168
00:13:49,040 --> 00:13:49,490
back

169
00:13:49,490 --> 00:13:56,420
attack which represents the admin
classic attack is named pipes so if you

170
00:13:56,420 --> 00:14:02,490
read any of the work of things like
token kidnapping or access to free

171
00:14:02,490 --> 00:14:07,240
Windows 2000 . escalation named pipes
come up quite a lot because they're

172
00:14:07,240 --> 00:14:16,130
really easy and default by default will
always open like a impersonation if

173
00:14:16,130 --> 00:14:21,920
someone at a higher level or a different
user opens data named pipe in point so

174
00:14:21,920 --> 00:14:27,120
we get a Windows Defender to scan a pipe
name it doesn't know any better

175
00:14:27,120 --> 00:14:30,630
it causes local system and we've got our
local system identification taken

176
00:14:30,630 --> 00:14:36,380
similar with RPC Indicom become
especially cuz it has loads of callback

177
00:14:36,380 --> 00:14:42,010
mechanism and as a function to get in
person nation there another interesting

178
00:14:42,010 --> 00:14:47,710
one gentle and negotiation until it has
system calls on on the machine to

179
00:14:47,710 --> 00:14:53,650
negotiate a impersonation token if you
can get a local service to negotiate a

180
00:14:53,650 --> 00:14:58,780
WebDAV to you you can undo NTLM and you
can get a local system token outweigh

181
00:14:58,780 --> 00:15:04,449
and finally my sort of my favorite one
like just cause it seems so ridiculous

182
00:15:04,450 --> 00:15:05,570
is

183
00:15:05,570 --> 00:15:10,680
there's a system called services for
user and this is kind of full Kerberos

184
00:15:10,680 --> 00:15:16,380
support like services under certain user
accounts and it turns out at least on

185
00:15:16,380 --> 00:15:22,010
Windows 8.1 you can call a function to
greatness specify any local or even to

186
00:15:22,010 --> 00:15:28,280
maine use and it will hand you back and
identification token of that User kind

187
00:15:28,280 --> 00:15:34,050
of useful of course you can get a full
investigation could be could be

188
00:15:34,050 --> 00:15:40,359
sufficient so I'm gonna show you a
little demo of at all I've written which

189
00:15:40,360 --> 00:15:47,350
I hope to release after the conference
which has she just does she sort of like

190
00:15:47,350 --> 00:16:00,180
playing around tokens viewing token
information so we just

191
00:16:00,180 --> 00:16:05,819
so for example you can look at just like
processes has loads of like existing

192
00:16:05,820 --> 00:16:12,680
process you can open and it will show
you like you're using your token type

193
00:16:12,680 --> 00:16:21,630
your so in this case is not the primary
token cuz it's coming up the process but

194
00:16:21,630 --> 00:16:26,310
obviously we want to do sort of fun
stuff like this so we can have enabled

195
00:16:26,310 --> 00:16:28,670
the administrator account on the local
machine I don't know his password

196
00:16:28,670 --> 00:16:35,920
because I'm not the administrator
obviously so as long as I can type your

197
00:16:35,920 --> 00:16:41,300
name correctly I should have to create
that and I get the local administrator

198
00:16:41,300 --> 00:16:44,640
with an identification token it just
says here we go

199
00:16:44,640 --> 00:16:51,399
have you taken as well as a few others
for example if I want to get the local

200
00:16:51,399 --> 00:16:55,680
system taken I can use the comp
reflection tricks basically one of them

201
00:16:55,680 --> 00:17:01,560
I use is a bit service which is used for
his b transfers you click that you get

202
00:17:01,560 --> 00:17:10,369
local system identification taken out of
it and using complex answer okay so

203
00:17:10,369 --> 00:17:15,510
actually go into sort of examples of and
abilities I found other people found

204
00:17:15,510 --> 00:17:20,449
which you can actually if you if you can
find these types of bugs you can

205
00:17:20,449 --> 00:17:23,900
actually exploit them using this fake
aidid is this identification token

206
00:17:23,900 --> 00:17:30,730
tricks so the first thing before you can
actually look for these bugs is is

207
00:17:30,730 --> 00:17:36,530
understand how como code and the
catalyst Health interacts with tokens so

208
00:17:36,530 --> 00:17:39,360
that there is a process and thread
manager calls such as reference

209
00:17:39,360 --> 00:17:43,559
parameter competitive person nation
taken and they take like pointed to the

210
00:17:43,559 --> 00:17:48,809
process or pointed to a thread and
return you back that information is also

211
00:17:48,809 --> 00:17:51,879
system calls which are supposed to be
used from you tomorrow but can be used

212
00:17:51,880 --> 00:17:55,679
in kernel mode if you like and if you
look on itself obviously this isn't

213
00:17:55,679 --> 00:18:00,240
recommended if you're a driver you can
access the the token data directly

214
00:18:00,240 --> 00:18:07,580
phiri's redpoint or its expressive
finally the i/o manager will actually

215
00:18:07,580 --> 00:18:13,290
capture the security context in which is
being called when you try and open said

216
00:18:13,290 --> 00:18:24,230
device or file as part of the IOP great
cause this is the first probably most

217
00:18:24,230 --> 00:18:25,670
obvious bug you can think of

218
00:18:25,670 --> 00:18:30,350
we've got this identification mechanism
we got this this impersonation level

219
00:18:30,350 --> 00:18:37,580
what s the code forget to check the
impersonation level that would be an

220
00:18:37,580 --> 00:18:45,750
obvious buck ok so in this case when you
access check there's a special structure

221
00:18:45,750 --> 00:18:50,710
called a security subject context which
is normally used which contains both a

222
00:18:50,710 --> 00:18:54,950
reference to the the current thread
token if there is one or is no order

223
00:18:54,950 --> 00:19:02,470
primary token and protection should
always be there now as part of the end

224
00:19:02,470 --> 00:19:07,090
he driver development kit headers has
denied defined call data query such a

225
00:19:07,090 --> 00:19:13,340
context token was just does a simple
sort of statement it says if a client

226
00:19:13,340 --> 00:19:18,939
token return client token of western
primary talk show with this is it it

227
00:19:18,940 --> 00:19:22,540
really hides the sort of context of the

228
00:19:22,540 --> 00:19:28,430
the actual token operation which token
you're looking at so if code just does

229
00:19:28,430 --> 00:19:33,420
this plainly and it may forget that it
could actually be getting the

230
00:19:33,420 --> 00:19:37,510
impersonation token not the primary
token investment needs to check the

231
00:19:37,510 --> 00:19:42,660
impersonation level and she various this
using some of the other functions you

232
00:19:42,660 --> 00:19:50,590
can find but they're basically the same
book so real example was this this is in

233
00:19:50,590 --> 00:19:54,770
the application help cash it was
actually Windows 8.1 specific

234
00:19:54,770 --> 00:20:00,150
vulnerability or Windows 8 vulnerability
and it was doing a check to weather the

235
00:20:00,150 --> 00:20:05,290
current caller was an administrator or
it was local system and literally all it

236
00:20:05,290 --> 00:20:11,350
did was it got the impersonation token
and check the impersonation level so as

237
00:20:11,350 --> 00:20:15,750
long as I can get a local system token
at identification of which I've just

238
00:20:15,750 --> 00:20:18,610
demonstrated I can do very easily

239
00:20:18,610 --> 00:20:23,219
you could pretend to be an administrator
and that allows you to then fill up the

240
00:20:23,220 --> 00:20:28,980
application compatibility cash with some
delicious entries which allows you to do

241
00:20:28,980 --> 00:20:35,340
it a privilege escalation take that as a
second function that is S II token is

242
00:20:35,340 --> 00:20:40,709
admin and actually turns out that prior
to Windows 8 this also does not actually

243
00:20:40,710 --> 00:20:45,620
do any verification of the total deposit
so if you pass and identification token

244
00:20:45,620 --> 00:20:50,350
to this function and this isn't
documented mind it will actually say

245
00:20:50,350 --> 00:20:56,719
well as the admin group though it must
be administrator in Windows 8.1 possibly

246
00:20:56,720 --> 00:20:59,530
is something to do with the app
container sport it actually does a

247
00:20:59,530 --> 00:21:09,190
verification check on impersonation so
this would be another bug is related to

248
00:21:09,190 --> 00:21:13,920
that securities subject context in a
different way I showed at the start

249
00:21:13,920 --> 00:21:18,150
there was like a token class took a
structure which represented the the

250
00:21:18,150 --> 00:21:22,660
token colonel object about actually
obviously internal two windows internal

251
00:21:22,660 --> 00:21:26,440
to the colonel and is not exposed
through Madrid development kit at all

252
00:21:26,440 --> 00:21:29,500
instead it referred to it

253
00:21:29,500 --> 00:21:33,730
access token point and it's just an
opaque point at this point

254
00:21:33,730 --> 00:21:38,840
but security subject contact isn't an
opaque pointer and has to be defined

255
00:21:38,840 --> 00:21:44,409
structure you have to actually access
its members so if you're trying to call

256
00:21:44,410 --> 00:21:48,830
a function ISE access check and you need
this subject context but you've only got

257
00:21:48,830 --> 00:21:55,610
a handle to a token maybe you'll just go
well we can just money will be fine work

258
00:21:55,610 --> 00:22:04,070
so he said the primary taken here
basically screwed checks logic it can it

259
00:22:04,070 --> 00:22:07,460
doesn't it never checks impersonation
level because it never thinks you're

260
00:22:07,460 --> 00:22:11,310
actually impersonating and because the
two tokens almost exactly the same no

261
00:22:11,310 --> 00:22:15,429
one ever then verifies that you've not
passed in impersonation token

262
00:22:15,430 --> 00:22:21,310
incorrectly so you can buy passes this
is a simple example in winners a colonel

263
00:22:21,310 --> 00:22:26,790
is allowing access to and at'em if
you're it running on low box and it just

264
00:22:26,790 --> 00:22:31,070
crashes subject context and does a nasty
access check and potential you can buy

265
00:22:31,070 --> 00:22:35,310
passes and I see it I'm not really are
not reported it to myself because I

266
00:22:35,310 --> 00:22:39,050
don't think it's actually security
application this is something to bear in

267
00:22:39,050 --> 00:22:43,159
mind folks just because you can bypass
the check doesn't mean you can actually

268
00:22:43,160 --> 00:22:51,160
do something he's with so few others so
system Fred impersonation a showdown

269
00:22:51,160 --> 00:22:58,160
impersonation works if your have
impersonation privilege but if you if

270
00:22:58,160 --> 00:23:02,890
you work a friend in the system process
that includes Lee has a personal

271
00:23:02,890 --> 00:23:06,520
privilege you can impersonate tokens
that you should normally be able to

272
00:23:06,520 --> 00:23:11,550
access and potentially get a system work
afraid to do actions under a local

273
00:23:11,550 --> 00:23:16,090
system

274
00:23:16,090 --> 00:23:20,040
I think one of the Internet's
interesting bugs I found was why for

275
00:23:20,040 --> 00:23:24,629
virtually tokens to leak it so a token
as I said it's just another kernel

276
00:23:24,630 --> 00:23:29,650
object there's nothing stopping some
other kernel component getting a

277
00:23:29,650 --> 00:23:34,810
reference to the point that colonel
object and handing back don't understood

278
00:23:34,810 --> 00:23:41,600
which wouldn't normally happen but it's
obviously can and if you can find it you

279
00:23:41,600 --> 00:23:45,830
can potentially access to tokens you
really should not be able to access to

280
00:23:45,830 --> 00:23:51,860
an example I found in win32 k in Windows

281
00:23:51,860 --> 00:23:55,240
i think is Windows 8 p.m. on the
introduced its new system call and let's

282
00:23:55,240 --> 00:24:00,010
face it winter ATK needs or over more
vulnerable system causing you can get it

283
00:24:00,010 --> 00:24:03,510
doesn't have enough already

284
00:24:03,510 --> 00:24:09,960
clip water can call and what it does is
the last person the last process to

285
00:24:09,960 --> 00:24:13,850
write to the clipboard will capture its
subject context will capture the access

286
00:24:13,850 --> 00:24:20,610
token used in that scenario and then
another process can ask for it back and

287
00:24:20,610 --> 00:24:26,300
get handled and this has an interest
some interesting implications because

288
00:24:26,300 --> 00:24:33,060
the way in which the intensity level
mechanism works I can't open a process

289
00:24:33,060 --> 00:24:38,090
if I have a lower intensity level then
the process has so i cant read out its

290
00:24:38,090 --> 00:24:42,429
primary token and that's just a
by-product of processes you not allow

291
00:24:42,430 --> 00:24:48,930
read accesses processes however you can
get read access to tokens because no one

292
00:24:48,930 --> 00:24:52,300
is sure you can get access were taken
outside of opening the process in the

293
00:24:52,300 --> 00:24:57,530
first place so you can open to read
access and read access gives you total

294
00:24:57,530 --> 00:25:01,680
access right at which point you can
convert this into any other taken you

295
00:25:01,680 --> 00:25:06,070
like any other privileges if you lower
the IL you can then do some fun stuff

296
00:25:06,070 --> 00:25:09,129
impersonate that token and and indecent

297
00:25:09,130 --> 00:25:11,470
escalation

298
00:25:11,470 --> 00:25:23,510
modest so if I bring up to a notepad and
just type of stuff in and copy it so

299
00:25:23,510 --> 00:25:30,400
with ATK is now captured notepad primary
token and I can see that by going into

300
00:25:30,400 --> 00:25:36,220
here and I've kinda button to bring up
so that's that interests me that is no

301
00:25:36,220 --> 00:25:46,370
pads probably taken by itself useful
what if for example we had

302
00:25:46,370 --> 00:25:52,789
getting so close it down that's great

303
00:25:52,789 --> 00:26:01,070
notepad as administrator

304
00:26:01,070 --> 00:26:13,120
types of stuff and this again and we now
see we have the primary token of the

305
00:26:13,120 --> 00:26:16,629
administration because he is running
high intensity level and we actually we

306
00:26:16,630 --> 00:26:21,110
could see in the group that has got a
ministry ok and this is actually like

307
00:26:21,110 --> 00:26:25,600
the tokens we got a reference to
administrators primary taken which you

308
00:26:25,600 --> 00:26:31,330
shouldn't only be able to do we can't
obviously use that say for example we

309
00:26:31,330 --> 00:26:36,408
have this little sort of test that
impersonates the token tries to create

310
00:26:36,409 --> 00:26:42,280
file if I try that is going to tell me
access tonight or in this case you have

311
00:26:42,280 --> 00:26:47,220
the right quite impersonation level
because we failed that cannot assign its

312
00:26:47,220 --> 00:26:52,200
presentation to contest and so it's it's
dropped it back to an identification

313
00:26:52,200 --> 00:26:59,000
however we can duplicate it we have read
access we can actually change this token

314
00:26:59,000 --> 00:27:05,580
so we can create an impersonation token
but change the ILT medium and based on

315
00:27:05,580 --> 00:27:09,590
our security only thing we need to do is
by Pastor because the user still the

316
00:27:09,590 --> 00:27:14,379
same user because this is USC so we
duplicate that we've now we can see it

317
00:27:14,380 --> 00:27:22,269
as medium impersonation now if we go
into this operation so hello black hat

318
00:27:22,269 --> 00:27:32,139
trick great and we had success because
we've impersonated that token at medium

319
00:27:32,139 --> 00:27:39,908
which is which is fine and we got the
Administrators group so we should have a

320
00:27:39,909 --> 00:27:45,389
nicely they've not Microsoft did fix
this but only from issue grown from low

321
00:27:45,389 --> 00:27:50,928
integrity to meet him integrity not from
medium to high because it's a UAC bite

322
00:27:50,929 --> 00:27:58,680
her and therefore it's not gonna get
fixed that's why

323
00:27:58,680 --> 00:28:09,730
and this one was something related to
duplication in the kernel when you call

324
00:28:09,730 --> 00:28:16,610
NTG pocket token to two GB can you copy
the token it does a check to make sure

325
00:28:16,610 --> 00:28:22,860
that the passing is valid to convert
into that of the token type so this

326
00:28:22,860 --> 00:28:26,449
comes down to the you can take an
identification token converter prime

327
00:28:26,450 --> 00:28:34,290
token but if kernel code cause the
internal duplicate and triplicate token

328
00:28:34,290 --> 00:28:39,200
function as he pgp token that check his
bypass this is only in like this sort of

329
00:28:39,200 --> 00:28:43,640
user-level sort of like exposed
functionality but if the kernel does it

330
00:28:43,640 --> 00:28:50,410
it can convert it to any token you like
so real world examples this one it's

331
00:28:50,410 --> 00:28:55,590
abusing Creek processes user presses
user allows you to create new process

332
00:28:55,590 --> 00:28:59,540
with a different primary token and if
you read the documentation it explicitly

333
00:28:59,540 --> 00:29:04,440
promised says you need a handle to the
primary taken in order to create this

334
00:29:04,440 --> 00:29:09,910
new process so if you actually go
digging it turns out that when it opens

335
00:29:09,910 --> 00:29:13,940
the handle you just need to focus on
primary privilege and strangely enough

336
00:29:13,940 --> 00:29:19,080
even though you've got a name per se you
and identification token even though

337
00:29:19,080 --> 00:29:23,540
it's not a primary token you can still
get token assign primary privilege and

338
00:29:23,540 --> 00:29:31,840
your handle which so you can bypass this
check and then created it causes

339
00:29:31,840 --> 00:29:37,949
internal GPS function but no one ever
verified this token was compatible to

340
00:29:37,950 --> 00:29:42,630
convert back into a primary token so
we've got a problem we can potentially

341
00:29:42,630 --> 00:29:50,920
spawn processes using only
identification totems now the actual

342
00:29:50,920 --> 00:29:55,190
limited ability depends on who you are
if you're a system service you've

343
00:29:55,190 --> 00:30:00,560
probably got a sign primary token
privilege you can assign any token so

344
00:30:00,560 --> 00:30:02,050
you can use it now

345
00:30:02,050 --> 00:30:06,210
token kidnapping tricks you get an
identification token you can impersonate

346
00:30:06,210 --> 00:30:11,549
it to elevate user you can create new
processes local system

347
00:30:11,549 --> 00:30:19,350
you can also do it from low prices and
to understand why that's kinda see how

348
00:30:19,350 --> 00:30:24,469
it determines whether you're allowed to
sign a token ought not to a process and

349
00:30:24,470 --> 00:30:29,019
it's actually based on even a parent or
sibling relationship between the tokens

350
00:30:29,019 --> 00:30:36,100
when you create a filter token the the
token ideas copied into the new tokens

351
00:30:36,100 --> 00:30:40,269
parent OpenID and if you've got that
relationship between the current process

352
00:30:40,269 --> 00:30:45,539
token and the new token you're trying to
assign it will allow it otherwise it is

353
00:30:45,539 --> 00:30:50,950
a sibling token if it's both crafted
from the same token and within the same

354
00:30:50,950 --> 00:30:55,149
authentication ideas are the same login
session it will also about and this is

355
00:30:55,149 --> 00:31:00,748
the case for duplicate token or create
low box token token thing is quite

356
00:31:00,749 --> 00:31:04,600
important is what it means is you can
use it to effectively break out of

357
00:31:04,600 --> 00:31:13,019
enhanced protection mode because I use
the low box token to securities lending

358
00:31:13,019 --> 00:31:17,669
processes if you can do things like a
named pipe attack you can get the

359
00:31:17,669 --> 00:31:22,379
identification token for the normal user
and as far as the colonel is concerned

360
00:31:22,379 --> 00:31:31,090
the normal user is the normal user token
is a sibling of the IEP M Lowe boxed ok

361
00:31:31,090 --> 00:31:35,678
so even though you've only got
identification of oil you can create a

362
00:31:35,679 --> 00:31:40,210
new process and then if you gotta do is
drop the NXT level to your face you get

363
00:31:40,210 --> 00:31:44,879
a new process running that low and
outside of the p.m. and my trust again

364
00:31:44,879 --> 00:31:48,949
don't particular consider the equivalent
of I protected mode which isn't

365
00:31:48,950 --> 00:31:53,070
generally considered to be security
battery so that you can get out of a

366
00:31:53,070 --> 00:31:56,090
partial break of the sandbox and any
attention to something else about fully

367
00:31:56,090 --> 00:32:00,250
break up some books

368
00:32:00,250 --> 00:32:07,230
now one of the more surprising bugs is
relating to that of time I checked I'm

369
00:32:07,230 --> 00:32:12,110
here is because impersonation tokens are
assigned to friends but unless that Fred

370
00:32:12,110 --> 00:32:17,580
object is locked you can change the
token while the kernel is doing

371
00:32:17,580 --> 00:32:23,550
operations so you can get it to do one
check and then actually change the token

372
00:32:23,550 --> 00:32:27,450
in another thread and then get to do
another check and this can be while it's

373
00:32:27,450 --> 00:32:33,610
still raining inside kermit and it's
kind of a simple simple trick to do you

374
00:32:33,610 --> 00:32:38,889
can also do it in tomorrow such as dir
manager CIO manager only verifies the

375
00:32:38,890 --> 00:32:43,980
security of the caller when you open the
file not when you do things like device

376
00:32:43,980 --> 00:32:48,880
i/o control so you can actually opened
fire with one user context caused by

377
00:32:48,880 --> 00:32:54,170
side with a different context and you
get confused and example of that is this

378
00:32:54,170 --> 00:33:02,410
one in the webdriver which basically
allows you to access functionality which

379
00:33:02,410 --> 00:33:07,720
you shouldn't only be out to do and all
you need to do again is get a local

380
00:33:07,720 --> 00:33:11,300
system impersonation take an
identification and that's what we need

381
00:33:11,300 --> 00:33:19,260
to do you make it sound so simple so
yeah because WebDAV it's actually more

382
00:33:19,260 --> 00:33:23,510
implemented in user mode the kernel mode
component actually only acts as a bridge

383
00:33:23,510 --> 00:33:31,060
between UNC UNC shares and the user mode
service which is actually doing things

384
00:33:31,060 --> 00:33:35,580
on the web requests and things like that
so this is why you can actually abuses

385
00:33:35,580 --> 00:33:41,689
and pretend to be a web service and get
it to do things the Windows kernel

386
00:33:41,690 --> 00:33:48,830
doesn't actually expect to be able to do
and I think the financial Berg is

387
00:33:48,830 --> 00:33:55,889
be very mindful if you see any kernel
code opening trade tokens using the

388
00:33:55,890 --> 00:34:00,450
system call barons so there's two
versions of the system cause does the

389
00:34:00,450 --> 00:34:05,490
normal open thread token and then their
prophetic and I X and the extra thing

390
00:34:05,490 --> 00:34:09,790
was introduced in Windows 2000 because
it was actually a really fundamental bug

391
00:34:09,790 --> 00:34:15,119
from a kind of perspective in these
functions and i bug was basically didn't

392
00:34:15,119 --> 00:34:19,240
know where to pacify you want to open a
colonel handle instead of the user

393
00:34:19,239 --> 00:34:25,388
handle so if you find a driver which
opens a token you to one of these calls

394
00:34:25,389 --> 00:34:31,179
inside the context of your process it
will create a handle to that token which

395
00:34:31,179 --> 00:34:35,550
you may not normally be able to access
because they said W system calls

396
00:34:35,550 --> 00:34:43,450
effectively bypass security now you
shouldn't see them but I actually did a

397
00:34:43,449 --> 00:34:48,638
run for all of 2011 I did when I did my
my research it is actually went on

398
00:34:48,639 --> 00:34:52,859
virustotal I have an account on
virustotal which allows me to get to the

399
00:34:52,859 --> 00:34:56,949
top ten 2000 Windows drivers virustotal

400
00:34:56,949 --> 00:35:03,149
malicious and unwanted clearly malicious
code but mostly benign Windows Rovers

401
00:35:03,150 --> 00:35:07,710
and I wrote some static basic static
analysis tools to go hunting buddy

402
00:35:07,710 --> 00:35:13,290
function course these sort of Colonel
interactions with tokens and quiet

403
00:35:13,290 --> 00:35:20,279
driver still ended up with these tokens
being open tokens within the context you

404
00:35:20,280 --> 00:35:28,210
shouldn't be allowed to do it but
apparently people still do so coming

405
00:35:28,210 --> 00:35:33,750
toward the end I'm going to talk about
some changes so obviously I found these

406
00:35:33,750 --> 00:35:39,390
banks as part of Project Zero also at
the same time somehow coincidentally

407
00:35:39,390 --> 00:35:44,480
Alex had asked you start finding similar
books in token handling completely like

408
00:35:44,480 --> 00:35:47,010
not talking to each other about it at
all

409
00:35:47,010 --> 00:35:52,829
somehow came to the conclusion that was
probably problems with token handling

410
00:35:52,829 --> 00:35:56,660
so I think mike's after being doing some
various fixes various changes to

411
00:35:56,660 --> 00:36:01,459
different components of the operating
system the kernel to make it more robust

412
00:36:01,459 --> 00:36:07,049
in these sort of scenarios so I'm just
gonna go for a few things which changed

413
00:36:07,049 --> 00:36:11,249
the civilly mainly focusing on Windows
10 because there's some interesting

414
00:36:11,249 --> 00:36:14,808
changes in there which may affect some
of us are demonstrations have already

415
00:36:14,809 --> 00:36:23,569
already done is Jesse token is at has
been fixed in 2007 this is something I

416
00:36:23,569 --> 00:36:30,959
did not expect because it's kind of
porting like security fixes which have

417
00:36:30,959 --> 00:36:35,779
been in Windows I actually back ported
now I think it wasn't necessarily my

418
00:36:35,779 --> 00:36:41,920
bugs which I I sent them which actually
prompted them to fix it I actually found

419
00:36:41,920 --> 00:36:48,999
a bug in the Nvidia display driver like
that classic get the reference a person

420
00:36:48,999 --> 00:36:53,269
nation token if not reference the
primary token token is admin and

421
00:36:53,269 --> 00:36:56,959
basically was using it and access check
for with your attitude administrative

422
00:36:56,959 --> 00:37:03,629
functions in the driver now I'm probably
so that they may have influenced Mike

423
00:37:03,630 --> 00:37:05,319
sophomore to fix this

424
00:37:05,319 --> 00:37:08,729
down level of Windows seven then I
probably did but that of course is

425
00:37:08,729 --> 00:37:19,930
speculation 10 introduces some
interesting changes to the national

426
00:37:19,930 --> 00:37:23,999
security functions determines whether
you're allowed to impersonate token and

427
00:37:23,999 --> 00:37:28,488
strangely enough activity fees divided
one of them is actually sort of almost

428
00:37:28,489 --> 00:37:33,630
weakening impersonation they've added
new mechanism through determine whether

429
00:37:33,630 --> 00:37:37,859
you're a trooper Satoko not but on the
other hand is checking now which would

430
00:37:37,859 --> 00:37:45,839
actually mitigate that demonstration I
actually admitted she had a first one is

431
00:37:45,839 --> 00:37:52,449
they've added a new capability is even
through a user group or a low box token

432
00:37:52,449 --> 00:38:00,940
capability said which determines whether
you're allowed to impersonate tokens

433
00:38:00,940 --> 00:38:05,069
probably the most interesting one is is
the sort of the first one in that list

434
00:38:05,069 --> 00:38:10,520
basically says if you got this group and
crucially occur not likely set you can

435
00:38:10,520 --> 00:38:17,630
impersonate any person any token at the
same level in the same session as you

436
00:38:17,630 --> 00:38:25,490
and you can but this kind of other news
there in a different user end up on your

437
00:38:25,490 --> 00:38:30,250
session potential you can still in
person at that that use but fortunately

438
00:38:30,250 --> 00:38:33,829
is guarded behind the group and the only
way to get that group is have admin

439
00:38:33,829 --> 00:38:38,359
access to add you to the group which
allows you to admin access so is

440
00:38:38,359 --> 00:38:42,490
obviously it's not likely to be
exploited but I suppose you never know

441
00:38:42,490 --> 00:38:47,560
if it's something which is valuable to
enterprise administrator he may enable

442
00:38:47,560 --> 00:38:53,140
it for everyone in the domain because
why not sure if you find a few different

443
00:38:53,140 --> 00:38:59,000
than ones you can do sort of related to
low buck second solo box as I say is the

444
00:38:59,000 --> 00:39:04,099
app container model and it allows you to
effectively add capabilities to

445
00:39:04,099 --> 00:39:09,660
applications in the Windows Store which
says they can actually do impersonation

446
00:39:09,660 --> 00:39:15,200
of certain types of tokens that's kind
of interesting but I'm not used anywhere

447
00:39:15,200 --> 00:39:20,118
so actually really sure why there yet
I'm sure some point it will be

448
00:39:20,119 --> 00:39:24,349
documented or there'll be some sort of
demonstration of why we're actually

449
00:39:24,349 --> 00:39:30,500
using this but until that point I just
don't know of any other of the

450
00:39:30,500 --> 00:39:37,540
difference is elevated total protection
so my demonstration was as long as I can

451
00:39:37,540 --> 00:39:44,279
get access to the primary token from a
administer administrator level process I

452
00:39:44,280 --> 00:39:49,930
could Lower Dir level quite easily and
impersonate user and get admin rights

453
00:39:49,930 --> 00:39:57,270
now when you get a token there's a flag
which says I am the elevated token and

454
00:39:57,270 --> 00:40:01,050
there is a function in the kernel St
token is elevated to tell you whether an

455
00:40:01,050 --> 00:40:06,310
access token you've got happens to be
elevated or not so totally obvious check

456
00:40:06,310 --> 00:40:09,420
does is it says is

457
00:40:09,420 --> 00:40:14,220
is there a mismatch between the token
you're trying to impersonate and the

458
00:40:14,220 --> 00:40:19,279
primary token of your process and if
there is this mismatch is gonna return

459
00:40:19,280 --> 00:40:23,700
use provisional help he's gonna tell you
not allowed to access that which point

460
00:40:23,700 --> 00:40:27,410
it will downgrade to an identification
that's roughly equivalent in not

461
00:40:27,410 --> 00:40:33,558
allowing you impersonation strangely
enough actually guarded behind a

462
00:40:33,559 --> 00:40:38,339
compatibility flag unless you set the
Kurdish flag in the registry to enable

463
00:40:38,339 --> 00:40:41,089
this support it was she not attempt by
the fall

464
00:40:41,089 --> 00:40:44,640
that's obviously why I can still
demonstrate on Windows 10 that same

465
00:40:44,640 --> 00:40:49,629
attack because it's not actually on by
the fox but it's interesting thinking

466
00:40:49,630 --> 00:40:54,970
that obviously it's an interesting
attack that too but obviously not

467
00:40:54,970 --> 00:40:56,609
usually considered a problem

468
00:40:56,609 --> 00:41:03,180
security bounty hunting so I suppose it
may yet turn on eventually I don't know

469
00:41:03,180 --> 00:41:10,848
so this is just a basic conclusions

470
00:41:10,849 --> 00:41:15,180
the first thing to bear in mind is it it
is trivial to get identification token

471
00:41:15,180 --> 00:41:19,328
and if you use things like services for
user is almost trivial to get an

472
00:41:19,329 --> 00:41:20,630
impersonation

473
00:41:20,630 --> 00:41:25,329
information to any user on the entire
domain that you're you're connected to

474
00:41:25,329 --> 00:41:31,000
that's that's pretty pretty powerful
primitive if you can find bugs the

475
00:41:31,000 --> 00:41:37,829
appropriate books to actually exploits
if you're actually going hunting for

476
00:41:37,829 --> 00:41:43,829
stuff if you find a driver which it
which opens access tokens it calls

477
00:41:43,829 --> 00:41:48,460
capture subject context it calls
reference impersonation toca reference

478
00:41:48,460 --> 00:41:54,569
primary taken if you see those calls it
was he doing some sort of personal check

479
00:41:54,569 --> 00:42:00,109
security checks now she do not CSE
access check imported you would be right

480
00:42:00,109 --> 00:42:01,690
to be suspicious

481
00:42:01,690 --> 00:42:07,210
there may be something of it used that
sometimes you'll see this and is

482
00:42:07,210 --> 00:42:12,650
completely benign for example I think
process monitor driver does this but

483
00:42:12,650 --> 00:42:18,400
it's only doing it so it can record who
is supposedly opening that file

484
00:42:18,400 --> 00:42:22,789
to use this to basically extractor user
identity and determined that you are you

485
00:42:22,789 --> 00:42:28,619
are bob smith that's all it does it for
of course you could space that relying

486
00:42:28,619 --> 00:42:32,819
on Process Monitor is your security
security auditing solution for

487
00:42:32,819 --> 00:42:41,049
enterprise but it possible that there is
a much more serious and finally like

488
00:42:41,049 --> 00:42:45,980
never forget about time change how many
is even on the same threat because you

489
00:42:45,980 --> 00:42:50,700
can switch friends arbitrary and there's
a good sort of bug I think in the

490
00:42:50,700 --> 00:42:54,609
project zero tracker if you go hunt for
it we're basically I could change of a

491
00:42:54,609 --> 00:42:58,520
token during a registry open call and
get it to write to the wrong registry

492
00:42:58,520 --> 00:43:02,599
high because basically it's a redirected
it to a different uses hive and actually

493
00:43:02,599 --> 00:43:08,990
do protesters in that way so thanks very
much for listening for my talk and

494
00:43:08,990 --> 00:43:11,500
thanks so much

