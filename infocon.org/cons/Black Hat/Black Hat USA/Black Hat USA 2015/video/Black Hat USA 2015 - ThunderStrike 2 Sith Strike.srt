1
00:00:00,000 --> 00:00:03,919
you are currently in the Jasmine
ballroom for the session thunder strike

2
00:00:03,919 --> 00:00:20,830
26 right with drama Hudson and alcohol
so they were talking about thunderstruck

3
00:00:20,830 --> 00:00:27,080
to which is a former world for MacBooks
I'm travel Hudson I really like to take

4
00:00:27,080 --> 00:00:31,750
things apart and understand how they
work and most famous for some work done

5
00:00:31,750 --> 00:00:36,559
on reverse engineering camera firmware
specifically that magic lantern project

6
00:00:36,559 --> 00:00:42,110
for my Canon SLR is also enjoyed retro
computing and looking for Easter eggs

7
00:00:42,110 --> 00:00:47,690
and an order on my face like that this
project got started two years ago when I

8
00:00:47,690 --> 00:00:56,019
was looking into helping my firm
deployed MacBooks across the company and

9
00:00:56,020 --> 00:01:00,059
we've heard reports about Andrew kids so
I was asked to use my first and change

10
00:01:00,059 --> 00:01:05,149
clothes to look into that

11
00:01:05,150 --> 00:01:11,350
fortunately Corey couldn't be here today
we've been active in the firmware

12
00:01:11,350 --> 00:01:15,429
security area for the last couple of
years conceivably PC for where security

13
00:01:15,430 --> 00:01:20,490
Korean I just found it like record this
past January and we're basically the

14
00:01:20,490 --> 00:01:24,210
only company right now which focuses
exclusively on the PC freeware

15
00:01:24,210 --> 00:01:32,850
peripheral firmware associated with x86
systems and all of that so does talk as

16
00:01:32,850 --> 00:01:35,158
it started last year

17
00:01:35,159 --> 00:01:43,439
CCC I presented thunder strike strike
one which was the first for Marui case

18
00:01:43,439 --> 00:01:49,389
for MacBooks and the day before mine
talk profound and Corey presented

19
00:01:49,390 --> 00:01:56,939
attacks on security they included quite
a few really interesting but abilities

20
00:01:56,939 --> 00:02:05,869
in Windows and Linux systems after the
conference we got to discuss and could

21
00:02:05,869 --> 00:02:11,150
we team up and try some of those windows

22
00:02:11,150 --> 00:02:15,260
and responsibilities over to the
Macintosh and find out if they were

23
00:02:15,260 --> 00:02:20,899
actually vulnerable and it turns out
that they are and this sexual in the the

24
00:02:20,900 --> 00:02:27,939
main points of this talk is that if I
systems and UEFI systems share lots of

25
00:02:27,939 --> 00:02:33,620
common code and because of that they
have a lot of common vulnerabilities so

26
00:02:33,620 --> 00:02:41,970
let's jump straight to a quick demo of
this of our proof of concept to unlike

27
00:02:41,970 --> 00:02:49,930
counter-strike 12 has the ability to get
started from a pure software environment

28
00:02:49,930 --> 00:02:57,299
in this case we're using a root exploit
to elevate privilege from Sumter remote

29
00:02:57,299 --> 00:03:04,030
code execution 22 rude with an able to
install a whitelisted kernel module that

30
00:03:04,030 --> 00:03:10,650
gives us access to all of main memory we
can in memory map the SPI flash

31
00:03:10,650 --> 00:03:15,510
registers and on some of its own son
mcintosh's injury able to immediately

32
00:03:15,510 --> 00:03:20,530
unlock and right to the flash this
builds on the Thunder strike one

33
00:03:20,530 --> 00:03:26,049
research in which we reverse engineered
how Apple is protecting the integrity of

34
00:03:26,049 --> 00:03:30,819
Tehran should see our CDs as well as the
structure of their former volumes so

35
00:03:30,819 --> 00:03:36,589
here we have attended a are payload to
some empty space in the firmware update

36
00:03:36,590 --> 00:03:44,190
this year sees the other thing that the
concept as is it will search the PCI

37
00:03:44,190 --> 00:03:51,379
PCIe tree and look for removal devices
that contain some call option ROMs and

38
00:03:51,379 --> 00:03:57,108
then if they'd say it's proof of concept
to this option ARMs as well

39
00:03:57,109 --> 00:04:03,120
specifically we are looking at the
removable devices such as the Gigabit

40
00:04:03,120 --> 00:04:07,359
Ethernet adapter that plugs into
Thunderbolt port in this case the

41
00:04:07,359 --> 00:04:12,379
concept is now transitioned from that
software and the software running on the

42
00:04:12,379 --> 00:04:19,529
system into the wrong in that adapter we
are deliberately not being at all

43
00:04:19,529 --> 00:04:23,820
stealthy with thunder strike 22 in the
system reboots

44
00:04:23,820 --> 00:04:29,700
will see the logo come up and this is
being executed from the group / on the

45
00:04:29,700 --> 00:04:33,200
motherboard and its control in the
system from the very person instruction

46
00:04:33,200 --> 00:04:40,419
that executes spun boot up to one of the
exciting part about this report is that

47
00:04:40,419 --> 00:04:46,900
we can bring in a fresh clean laptop
that ensure that Thunderbolt adapter

48
00:04:46,900 --> 00:04:52,849
with it and when it boots it will lewd
and execute the option ROM contained in

49
00:04:52,849 --> 00:04:58,620
the payload out of that after this this
doesn't control system from the first

50
00:04:58,620 --> 00:05:03,650
instruction so the the firmware has
already had locked the BIOS so that we

51
00:05:03,650 --> 00:05:09,810
can write to the booth / but we can do
is leverage the attack that coriander

52
00:05:09,810 --> 00:05:17,389
fell as described by hooking the s3
resume script and the option that allows

53
00:05:17,389 --> 00:05:24,669
the system to to be normally and at some
point later when the system to sleep

54
00:05:24,669 --> 00:05:31,719
the CPU shuts off as part of the s3
suspend to ram what corner found

55
00:05:31,719 --> 00:05:34,469
identified is that in this state

56
00:05:34,469 --> 00:05:39,229
all of the flash protection bits are
unlocked and there's a window of

57
00:05:39,229 --> 00:05:46,680
opportunity on some systems before the
s3's for the opportunity that when the

58
00:05:46,680 --> 00:05:53,430
s3 script is executed that the you can
write to the flash in this case we're

59
00:05:53,430 --> 00:05:59,360
into the boot / and this is now
independent of the OS you can reinstall

60
00:05:59,360 --> 00:06:04,250
OS 10 in so that you can swap out the
hard drive it so there this is literally

61
00:06:04,250 --> 00:06:09,990
controls the system from that person
struction so again we're not trying to

62
00:06:09,990 --> 00:06:14,300
be stealthy so when the system reboots
will see the logo again

63
00:06:14,300 --> 00:06:20,919
weaponized version could use SMS or
virtualization such as The blue pill to

64
00:06:20,919 --> 00:06:24,419
hide running attempts to detect it

65
00:06:24,420 --> 00:06:35,730
to the serbs also watching the PCIe bus
for fresh devices to be plugged in to

66
00:06:35,730 --> 00:06:40,500
any clean Thunderbolt adapter is plugged
in it detects that event invites the

67
00:06:40,500 --> 00:06:46,860
proof of concept to it so this chapter
can now be removed and as it is shared

68
00:06:46,860 --> 00:06:50,770
between systems it can spread
essentially crossing air gap security

69
00:06:50,770 --> 00:06:58,760
measures so what we've shown here with
with his preferred concept is a unique

70
00:06:58,760 --> 00:07:03,090
life cycle it starts as a software
exploit its able to write into the boot

71
00:07:03,090 --> 00:07:09,270
/ some systems that can then right into
the option on removable devices that are

72
00:07:09,270 --> 00:07:16,039
able to infect the s3 resume script on a
new systems and right into the wrong one

73
00:07:16,040 --> 00:07:25,150
knows right so this is again the main
point of the talk is the fact that also

74
00:07:25,150 --> 00:07:29,159
potentially have vulnerabilities in
their shared amongst them because

75
00:07:29,160 --> 00:07:34,350
there's this come in you a fire if I
base so just a very brief history of EFI

76
00:07:34,350 --> 00:07:40,390
basically Intel Intel was trying to make
their non backwards compatible i-64

77
00:07:40,390 --> 00:07:44,409
architecture they said we don't want to
keep using this old legacy BIOS Croft we

78
00:07:44,410 --> 00:07:48,570
want to create something that's more
modular extensible and we're going to

79
00:07:48,570 --> 00:07:52,300
use that for a new architecture so they
started the extensible firmware

80
00:07:52,300 --> 00:07:58,640
interface that way Apple when they moved
over from car pc chips to x86 chips they

81
00:07:58,640 --> 00:08:03,520
adopted him tells you know preferred
implementation of the firmware so

82
00:08:03,520 --> 00:08:07,890
intelligent I bring more people into the
fold and create the unified extensible

83
00:08:07,890 --> 00:08:12,640
firmware interface for him and this was
sort of an industry consortium of many

84
00:08:12,640 --> 00:08:18,909
vendors that all sort of contributed to
unify and sort of oversaw its progress

85
00:08:18,910 --> 00:08:23,050
going forward so it still even though
you know how cold it for coffee here

86
00:08:23,050 --> 00:08:27,780
some point before you if I was even
formed there are still millions of lines

87
00:08:27,780 --> 00:08:30,640
of code right they didn't create you if
I am and just rewrite the whole thing

88
00:08:30,640 --> 00:08:31,770
from scratch

89
00:08:31,770 --> 00:08:35,079
it's just an evolution of you if I so

90
00:08:35,080 --> 00:08:39,520
the wave it forward typically works
today is that you have any open source

91
00:08:39,520 --> 00:08:45,140
unify reference implementation called
idk to it by developers get to and

92
00:08:45,140 --> 00:08:48,860
that's open that's public but then in a
pedophile offenders will typically for

93
00:08:48,860 --> 00:08:52,920
that add additional features and that
their value to it and then they'll sell

94
00:08:52,920 --> 00:09:00,459
it to order to you know make their
machines that they sell to you so

95
00:09:00,460 --> 00:09:03,990
basically because of this hierarchical
structure where there's the open source

96
00:09:03,990 --> 00:09:07,050
reference implementation and then
there's some vendors that add their own

97
00:09:07,050 --> 00:09:11,569
competing features and then there's all
of the OEM to buy from them or maybe

98
00:09:11,570 --> 00:09:15,410
off their own way that means that just
because of vulnerability gets fixed in

99
00:09:15,410 --> 00:09:20,730
the in the top of the tree doesn't mean
that gets fixed everywhere and doesn't

100
00:09:20,730 --> 00:09:25,160
mean that it trickles down to everyone
right so what's the point of this talk

101
00:09:25,160 --> 00:09:31,310
is to show you know no one special no
one's immune to this kind of thing when

102
00:09:31,310 --> 00:09:34,790
you go down and look at firmware done at
the lowest level throughout entire the

103
00:09:34,790 --> 00:09:39,630
way an attacker would you see that there
are dramatic similarity is that means

104
00:09:39,630 --> 00:09:43,890
from attackers perspective you know
consequently they don't really have to

105
00:09:43,890 --> 00:09:48,120
do that much different order to attack a
Mac vs PC if so this is just an example

106
00:09:48,120 --> 00:09:52,200
there is a random a suicide machine that
we used for cancer quest hard this year

107
00:09:52,200 --> 00:09:57,340
so we analyzed it we annotated it
there's comments on it but if you go

108
00:09:57,340 --> 00:10:00,850
ahead and look at the MacBook Air which
we through entire done without any

109
00:10:00,850 --> 00:10:05,380
special you know annotations everything
pretty much looks the same we've got the

110
00:10:05,380 --> 00:10:08,830
same control flow structures we've got
the same code being called in the same

111
00:10:08,830 --> 00:10:13,740
order the exact same potions same
register showing up in some places and

112
00:10:13,740 --> 00:10:18,370
so it's just over overwhelmingly there
are places of similarity that can be

113
00:10:18,370 --> 00:10:22,520
leveraged by attackers so there's the
shared vulnerability is there's the

114
00:10:22,520 --> 00:10:27,850
shared code and what we see are
situations where you know vendors are

115
00:10:27,850 --> 00:10:31,080
not necessarily using all the protection
mechanisms that are available to them

116
00:10:31,080 --> 00:10:35,540
and furthermore we've still got some
legacy decisions your own things like

117
00:10:35,540 --> 00:10:40,910
option roams that mean that there are
still these sort of avenues

118
00:10:40,910 --> 00:10:46,469
very old avenues for attack within
systems so we're going to consider sort

119
00:10:46,470 --> 00:10:50,790
of 44 vulnerabilities that are all sort
of old news these are all

120
00:10:50,790 --> 00:10:53,400
vulnerabilities that have been found

121
00:10:53,400 --> 00:10:58,870
responsibly disclosed publicly disclosed
and you know acted upon by other vendors

122
00:10:58,870 --> 00:11:04,680
but when we looked at these these all
still applied to max because you know

123
00:11:04,680 --> 00:11:08,410
Apple hadn't dealt with them when we
started this research so the first thing

124
00:11:08,410 --> 00:11:12,199
to consider is the Speed Racer
vulnerability this is a fundamental

125
00:11:12,200 --> 00:11:15,570
hardware vulnerability it's a race
condition in the hardware in the way the

126
00:11:15,570 --> 00:11:19,210
hardware behaves and consequently you
would expect that anyone using

127
00:11:19,210 --> 00:11:23,170
vulnerable Intel CPUs are going to
potentially be vulnerable to this bug

128
00:11:23,170 --> 00:11:26,589
you have to explain just a little bit
you know this is just going to be a very

129
00:11:26,590 --> 00:11:29,990
brief summary of each of these you know
for issues that have been previously

130
00:11:29,990 --> 00:11:35,900
fully publicly disclosed and should see
them the past talks for full details so

131
00:11:35,900 --> 00:11:41,439
the core oldest protection mechanism for
BIOS was the interaction between the

132
00:11:41,440 --> 00:11:45,560
BIOS write enable bit and the BIOS lock
enabled bit if you wanna write to the

133
00:11:45,560 --> 00:11:50,609
BIOS you need to set BIOS right enabled
equal to 1 if the system works to

134
00:11:50,610 --> 00:11:54,090
protect itself it wants the system to be
writable at the boot time but then they

135
00:11:54,090 --> 00:11:57,380
had some point want to lock it down and
say no more than one in the operating

136
00:11:57,380 --> 00:12:01,180
system should be able to write to the
BIOS so in that case they would set the

137
00:12:01,180 --> 00:12:05,439
BIOS lock enabled it and this is not a
hard Lock this is not a forevermore no

138
00:12:05,440 --> 00:12:10,300
one else is allowed to write to the BIOS
until we reboot this is a soft like

139
00:12:10,300 --> 00:12:14,729
where once that bit is set anyone who
comes along and tries to said buyers

140
00:12:14,730 --> 00:12:19,580
right enable equal to one they will
cause a system major interrupt any code

141
00:12:19,580 --> 00:12:23,680
that firmware is set up to catch his
sister management interrupt will get to

142
00:12:23,680 --> 00:12:27,310
make the access control decision and
decide should I love this person who's

143
00:12:27,310 --> 00:12:31,760
trying to write to the BIOS to actually
write to the BIOS and so this previous

144
00:12:31,760 --> 00:12:35,140
mechanism this all this mechanism this
works great when you have you know

145
00:12:35,140 --> 00:12:38,660
single-threaded you know single core
CPUs which is where it was originally

146
00:12:38,660 --> 00:12:45,060
introduced but what we found was that
once you move over two systems even if

147
00:12:45,060 --> 00:12:50,170
it's not multicore we found that even a
system that's just hyper threaded this

148
00:12:50,170 --> 00:12:54,219
core race condition can actually happen
so the race condition is

149
00:12:54,220 --> 00:12:59,150
is we have a situation where one the
thread of the hard work and continuously

150
00:12:59,150 --> 00:13:03,180
say I want to set BIOS right naval equal
to one so that a writable said a

151
00:13:03,180 --> 00:13:07,270
writable set of writable the other
thread will continuously say write to

152
00:13:07,270 --> 00:13:10,300
this address in the BIOS write to this
address in the BIOS write to this

153
00:13:10,300 --> 00:13:14,219
address in the BIOS Yvette these two
threads just hammering on these bids

154
00:13:14,220 --> 00:13:17,620
every time the first thread said the
BIOS write enable equal to one then the

155
00:13:17,620 --> 00:13:22,000
system and rain interrupted fire all the
CPUs have to get into system and remote

156
00:13:22,000 --> 00:13:26,140
system editor remote needs to run some
code decide whether or not I wants to

157
00:13:26,140 --> 00:13:29,939
allow the system to right there and
while all of that other activities

158
00:13:29,940 --> 00:13:33,630
happening sometimes you have a situation
where bias roundtable is equal to one

159
00:13:33,630 --> 00:13:38,100
and then the other thread slips through
right to the BIOS so that's the core

160
00:13:38,100 --> 00:13:43,520
race condition this was disclosed in
telling me of 2014 and it was publicly

161
00:13:43,520 --> 00:13:50,890
talked about by Corey CCC in December
2014 so we told him tell about this and

162
00:13:50,890 --> 00:13:55,130
Intel said yeah we know that can
potentially be an issue but that's why

163
00:13:55,130 --> 00:14:00,840
we introduced this additional bit this
as amendment BWP bet that was introduced

164
00:14:00,840 --> 00:14:06,000
around 2004 so when Intel moved over to
the platform controller hub so any

165
00:14:06,000 --> 00:14:10,220
hardware that's older than 2004 @ she's
gonna be vulnerable forever pretty much

166
00:14:10,220 --> 00:14:15,750
and any newer hardware that's going to
have the option to set this bit but it's

167
00:14:15,750 --> 00:14:22,630
a company incumbent upon the BIOS makers
to actually said that so the SMB WP made

168
00:14:22,630 --> 00:14:26,380
says I'm going to layer additional
protection on top of that even if

169
00:14:26,380 --> 00:14:30,620
someone successfully set the BIOS right
nipple equal to 1 I still want to

170
00:14:30,620 --> 00:14:35,340
disallow them access to the BIOS unless
the processor is currently in the system

171
00:14:35,340 --> 00:14:38,830
manager mode that means our attacker
just hammering on the bed behind the

172
00:14:38,830 --> 00:14:42,100
scenes there occurred a level attacker
they haven't necessarily found a way to

173
00:14:42,100 --> 00:14:45,900
break into the box and break into system
entry mode and so they would be

174
00:14:45,900 --> 00:14:51,189
prevented from being able to write to
the flagship by this bit so this is the

175
00:14:51,190 --> 00:14:54,120
way that Intel's recommends the
protection bits beset you've got this

176
00:14:54,120 --> 00:14:58,930
layering where you know the first morse
forest green sort of access control

177
00:14:58,930 --> 00:15:03,699
decisions are if the BIOS lock enabled
it is set if someone tries to set BIOS

178
00:15:03,700 --> 00:15:05,230
rabin able then

179
00:15:05,230 --> 00:15:09,200
s mmm can decide where they're going to
allow it then there's the other big

180
00:15:09,200 --> 00:15:14,920
assignment BWP that says okay only the
BIOS when are sorry only the CPU wallet

181
00:15:14,920 --> 00:15:18,390
in System Manager Mode will be allowed
to ride to the BIOS and then there's

182
00:15:18,390 --> 00:15:22,830
these further beds be protected range
registers which offender can use to

183
00:15:22,830 --> 00:15:29,080
create non-contiguous places where the
firmware is actually protected even from

184
00:15:29,080 --> 00:15:33,550
system and remote so even if someone
were to break into system manual mode on

185
00:15:33,550 --> 00:15:37,589
properly configured systems they're not
going to actually be able to write into

186
00:15:37,590 --> 00:15:43,590
the flash chip so that's why Intel
recommends it so far over previous

187
00:15:43,590 --> 00:15:47,050
vulnerabilities we disclose them through
certain that you if I Security Response

188
00:15:47,050 --> 00:15:51,469
Team ones they were stood up we like to
use third rather than see these because

189
00:15:51,470 --> 00:15:56,190
you know CBS just says okay here's some
you know bender advisory something like

190
00:15:56,190 --> 00:15:56,790
that

191
00:15:56,790 --> 00:16:00,449
the nice thing about certain disclosure
is is it shows here's the people who

192
00:16:00,450 --> 00:16:04,170
said they yes we were affected and you
know hopefully there's a link there to

193
00:16:04,170 --> 00:16:07,569
the fixes for it is the vendors that
said we are not affected and here's the

194
00:16:07,570 --> 00:16:11,990
vendors who just didn't say anything so
Apple said they are not affected by this

195
00:16:11,990 --> 00:16:18,770
and you know there's no penalty for
being wrong right vendor can say no no

196
00:16:18,770 --> 00:16:21,810
my problem you know prove it right

197
00:16:21,810 --> 00:16:26,430
show me show me the money so I can say
I'm not vulnerable in that may or may

198
00:16:26,430 --> 00:16:27,390
not be true

199
00:16:27,390 --> 00:16:31,290
handed you know becomes incumbent upon
researchers to actually go and find out

200
00:16:31,290 --> 00:16:35,050
is that actually the case or not but of
course there's all these sort of vendors

201
00:16:35,050 --> 00:16:38,130
down here which you know they don't say
anything and you can pretty much

202
00:16:38,130 --> 00:16:41,570
guarantee that the vendors which don't
care enough to even respond to

203
00:16:41,570 --> 00:16:47,130
vulnerability disclosure there probably
vulnerable so great

204
00:16:47,130 --> 00:16:51,780
incumbent upon us is Apple vulnerable to
speed racer well if you check the bits

205
00:16:51,780 --> 00:16:58,720
you see that bias control this Sat 28
which means that the BIOS lock enabled

206
00:16:58,720 --> 00:17:02,740
it is not set the maximum BWP is not set

207
00:17:02,740 --> 00:17:07,750
Sony technically correct sense of the
word they are not vulnerable to speed

208
00:17:07,750 --> 00:17:11,839
racer because you don't need to use an
exploit to get her out of protection

209
00:17:11,839 --> 00:17:14,208
that was never there in the first place

210
00:17:14,209 --> 00:17:21,850
so this is what the protection looks
like on a brand new Mac Mini which I

211
00:17:21,849 --> 00:17:26,619
purchased and so we've got no those
first two layers are simply not there in

212
00:17:26,619 --> 00:17:30,959
terms of protection they've got this
protected range registers which is good

213
00:17:30,960 --> 00:17:34,710
because it stops unless I'm attacker but
you've got these two gaps so colonel

214
00:17:34,710 --> 00:17:38,419
attacker can go ahead and just right
into these gaps there's the EFI

215
00:17:38,419 --> 00:17:41,580
variables these are the things which
would normally at it from the command

216
00:17:41,580 --> 00:17:45,809
line with the NVRAM command on a Mac OS
X system but there are even some

217
00:17:45,809 --> 00:17:50,139
variables which Andy RAM will not allow
you to access but because you know the

218
00:17:50,140 --> 00:17:54,159
way this protection is set up but I
could just go in here and said anything

219
00:17:54,159 --> 00:17:59,590
they want right but then there's this
very interesting other region which we

220
00:17:59,590 --> 00:18:03,860
don't know what's even in there and we
just said ok well im gonna smash the

221
00:18:03,860 --> 00:18:08,449
variables I'm gonna smash the batting

222
00:18:08,450 --> 00:18:16,330
must take it down magic clear the screen
alright so basically there is a gap with

223
00:18:16,330 --> 00:18:19,928
there's a gap for the variables right
because they essentially that's what

224
00:18:19,929 --> 00:18:23,399
that implies as they want runtime
accessibility of those variables and

225
00:18:23,399 --> 00:18:26,809
then there's some other gap with some
other stuff which we don't even know

226
00:18:26,809 --> 00:18:30,100
what it is you apply to all just says
its patting it doesn't know what it is

227
00:18:30,100 --> 00:18:36,770
and what we ultimately phone was that if
you right into that first gap then the

228
00:18:36,770 --> 00:18:40,860
system will become corrupted and the
system will never do it again so that's

229
00:18:40,860 --> 00:18:45,299
a trivial way to break a brand new
system with all that's pretty you know

230
00:18:45,299 --> 00:18:50,620
with all of the default protection set
and so Apple systems out of the box

231
00:18:50,620 --> 00:18:54,459
vulnerable to being bricked so we show
you a demo video for this there is a

232
00:18:54,460 --> 00:18:58,270
demo video for this you can go watch it
later but you know demo videos

233
00:18:58,270 --> 00:19:01,929
screenshots are very interesting the
computer just doesn't do it anymore

234
00:19:01,929 --> 00:19:08,380
right so hard to make that exciting
sorry so they're still these protected

235
00:19:08,380 --> 00:19:11,220
range registers that is that accurate
have to get around if they wanted to do

236
00:19:11,220 --> 00:19:15,309
something useful right breaking the
system is all well and good and that can

237
00:19:15,309 --> 00:19:19,889
be a very severe attack to recover from
but you know to tackle usually like to

238
00:19:19,890 --> 00:19:24,600
take stealthy control of the system
rather than just turn it off

239
00:19:24,600 --> 00:19:30,139
much here attack Saudi Aramco so there's
the North enormous vulnerability

240
00:19:30,140 --> 00:19:34,950
sometimes referred to the Dark Jedi
attack this was named waterfall because

241
00:19:34,950 --> 00:19:40,450
the Star Wars universe North Vegas
defeated his nemesis north of anonymous

242
00:19:40,450 --> 00:19:45,100
he killed him and then he kept
resurrecting him putting him back to

243
00:19:45,100 --> 00:19:45,730
sleep

244
00:19:45,730 --> 00:19:49,770
killing again resurrecting importing
back to sleep so through this continuous

245
00:19:49,770 --> 00:19:56,540
process of killing and resuming killing
and resuming he learned the science of

246
00:19:56,540 --> 00:20:02,500
medical reasons right so use killing
people to learn about science so this is

247
00:20:02,500 --> 00:20:08,560
exactly what the door for Thomas does it
is uses this built-in capability called

248
00:20:08,560 --> 00:20:13,310
s3 sleep ACPI s3 sleep whatever you
close the lid on your laptop and it goes

249
00:20:13,310 --> 00:20:16,830
to sleep and then you have this ability
to quickly wake up again that's an s3

250
00:20:16,830 --> 00:20:22,270
sleep you're going into a low power mode
on the processor and that leads to

251
00:20:22,270 --> 00:20:27,600
unfortunately some access control bits
coming on set so this poor visibility

252
00:20:27,600 --> 00:20:31,320
was disclosed to choose certain the
unified Security Response Team in

253
00:20:31,320 --> 00:20:35,760
September 2014 also independently
discovered by the Intelligencer threat

254
00:20:35,760 --> 00:20:41,550
research team and this was publicly
disclosed by Rafal at CCC in December

255
00:20:41,550 --> 00:20:46,879
this past year so just a very brief sort
of overview of what they covered in that

256
00:20:46,880 --> 00:20:52,850
our talk which I recommend you watch the
basic process you boot up your system

257
00:20:52,850 --> 00:20:57,770
and as your booting the system you have
the full code which is going to you know

258
00:20:57,770 --> 00:21:01,540
the whole point of our code is to
configure the systems that the hardware

259
00:21:01,540 --> 00:21:07,280
into same configuration so that you can
run a full-fledged operating system so

260
00:21:07,280 --> 00:21:11,570
that that's a relatively long process
and what you want with this s3 sleep as

261
00:21:11,570 --> 00:21:14,970
you want the ability to close the lid
and then open it up and have it resumed

262
00:21:14,970 --> 00:21:19,620
extremely quickly so as the proud as the
boot is going through a normal boot it's

263
00:21:19,620 --> 00:21:23,070
going to save off this little cheat
sheet of like what is the minimal

264
00:21:23,070 --> 00:21:26,870
configuration that I need to do to get
the system back into a basic

265
00:21:26,870 --> 00:21:30,110
configuration where it's fully
functional and the cheat sheet is

266
00:21:30,110 --> 00:21:37,000
reboot resume script or boot resume
script and so on the top color on the

267
00:21:37,000 --> 00:21:42,150
top row that's the normal boot process
where you save off your scripts to of

268
00:21:42,150 --> 00:21:45,700
what you're going to execute when you
wake back up and on the bottom row upon

269
00:21:45,700 --> 00:21:51,000
resume you basically just walk through
and you execute each of these discs each

270
00:21:51,000 --> 00:21:56,059
of these opcodes within a script and the
opcodes do basic activities like your

271
00:21:56,059 --> 00:21:58,139
writing to memory reading from memory

272
00:21:58,140 --> 00:22:03,860
writing by port i/o reading by port i/o
but there is a a big kicker in here and

273
00:22:03,860 --> 00:22:07,668
that is the dispatch opcode so amongst
this little script of do this then do

274
00:22:07,669 --> 00:22:12,150
that didn't do that didn't do that there
is a little caveat there's a there's a

275
00:22:12,150 --> 00:22:16,660
catch all which is the dispatch job code
that says whatever I need to do to

276
00:22:16,660 --> 00:22:19,530
reconfigure the hardware it's too
complicated for me to do with just

277
00:22:19,530 --> 00:22:23,928
simple reads and writes a memory just
jump to some arbitrary code and that

278
00:22:23,929 --> 00:22:29,130
code will execute and do whatever needs
to do so what the court finding of North

279
00:22:29,130 --> 00:22:32,740
enormous attack was if you find those
sort of dispatch job codes you can

280
00:22:32,740 --> 00:22:38,090
override them and force the system to
jump to attack a controlled code what

281
00:22:38,090 --> 00:22:42,850
that means is that ultimately with our
thelonious all the projected range

282
00:22:42,850 --> 00:22:47,570
registers can be made to go away you go
down into a low-power state all of the

283
00:22:47,570 --> 00:22:51,990
hardware loses all of its configuration
bits you a crack up and now the system

284
00:22:51,990 --> 00:22:57,100
is completely open and vulnerable to
writing so an attacker can go after the

285
00:22:57,100 --> 00:23:03,340
code and stuff so I don't wanna miss
this was interesting sort of situation

286
00:23:03,340 --> 00:23:05,889
where when we looked back to see you
know did Apple say they were vulnerable

287
00:23:05,890 --> 00:23:09,750
to that will say they are not vulnerable
you look at the certain disclosure for

288
00:23:09,750 --> 00:23:14,120
this and where is normally served with
say who didn't say anything or who said

289
00:23:14,120 --> 00:23:17,629
they were not vulnerable in this case
all it said was vendors that said they

290
00:23:17,630 --> 00:23:23,330
were affected and that she had patches
so with a little bit of digging we found

291
00:23:23,330 --> 00:23:25,949
that it turned out that certain actually
dropped the ball on this one search

292
00:23:25,950 --> 00:23:30,830
didn't disclose this to Apple explicitly
but as I said we you know disclose this

293
00:23:30,830 --> 00:23:35,010
also through the newly-formed UEFI
Security Response Team which was do that

294
00:23:35,010 --> 00:23:37,770
because of all the various attacks that
have been happening over the past couple

295
00:23:37,770 --> 00:23:42,160
of years they said we need a good way to
get out this information to all of the

296
00:23:42,160 --> 00:23:43,490
members of the UEFI

297
00:23:43,490 --> 00:23:48,120
form and given the fact that Apple is a
board-level member of the unified forum

298
00:23:48,120 --> 00:23:54,669
you would expect them to listen to their
own Security Response Team so troubles

299
00:23:54,670 --> 00:23:58,640
previous more abilities with thunder
strike it was the first time anyone had

300
00:23:58,640 --> 00:24:02,150
actually showed the ability to reflash
the Mac previously from sneers work

301
00:24:02,150 --> 00:24:05,809
there was a question about whether or
not there was some special protection

302
00:24:05,809 --> 00:24:10,600
that Apple is doing with hardware to
prevent writing 25 trouble showed no I

303
00:24:10,600 --> 00:24:13,939
was not doing anything special you can
just go ahead and write to the flagship

304
00:24:13,940 --> 00:24:18,190
if you know the right way to fix up this
year sees everything furthermore once

305
00:24:18,190 --> 00:24:21,980
you combined orthodontist with this
there's no longer any sort of

306
00:24:21,980 --> 00:24:25,480
requirement for physical access to
attack for were right so thunder strike

307
00:24:25,480 --> 00:24:29,740
one physical access you had you know
little Thunderbolt Ethernet adapter

308
00:24:29,740 --> 00:24:35,270
darth enormous now an attacker can put
the system's sleep-wake get out and ride

309
00:24:35,270 --> 00:24:40,679
to the right to the fashion show the way
that that generally works is that if you

310
00:24:40,679 --> 00:24:45,020
look at the system you look at a system
as it's just normally running and yes

311
00:24:45,020 --> 00:24:48,370
you'll see the protected range registers
properly stopping an attacker for

312
00:24:48,370 --> 00:24:53,530
writing into the flash chip but because
of this reason resume resume script

313
00:24:53,530 --> 00:24:57,260
issue they resumed script is stored in
unprotected memory forgot to say that

314
00:24:57,260 --> 00:25:01,690
right to resume script is just sitting
around in RAM somewhere so an attacker

315
00:25:01,690 --> 00:25:05,190
can come in modify their resumes script
and that dispatch opcode that place

316
00:25:05,190 --> 00:25:09,040
where jumpstart perjury code they
rewrite that they pointed out some

317
00:25:09,040 --> 00:25:13,460
temporary space they insert some code to
the temporary space in this case the

318
00:25:13,460 --> 00:25:19,020
proof of concept just set a lock bit in
the flesh lockdown register so literally

319
00:25:19,020 --> 00:25:23,480
just a couple instructions right the
lock bit and this means we went down

320
00:25:23,480 --> 00:25:29,980
into it when we go down into sleep and
when we come back up the system will be

321
00:25:29,980 --> 00:25:34,440
prematurely locked and the normal boot
script will not be able to write and

322
00:25:34,440 --> 00:25:39,300
turn on those protected range registers
because it was locked to be for the rest

323
00:25:39,300 --> 00:25:44,889
of the code a chance to try to set it so
go to sleep just use our storage room

324
00:25:44,890 --> 00:25:49,520
and go to sleep wake back up and now the
system completely unprotected and

325
00:25:49,520 --> 00:25:55,620
consequently we just got disabled
detected range registers doesn't use

326
00:25:55,620 --> 00:25:56,889
BIOS lock enabled

327
00:25:56,890 --> 00:26:02,630
doesn't use a SIM BWP so that means it's
game over and anyone can write anything

328
00:26:02,630 --> 00:26:03,820
anywhere

329
00:26:03,820 --> 00:26:07,870
into the flash we just rode hello world
into the flash because we knew we could

330
00:26:07,870 --> 00:26:12,379
do that it wouldn't work the system so
you may have heard of a related or

331
00:26:12,380 --> 00:26:16,600
durability called prince armie we've
phone actually this same sort of

332
00:26:16,600 --> 00:26:20,959
vulnerability a while back in our
research in 2013 we found this

333
00:26:20,960 --> 00:26:26,370
vulnerability we disclosed it and it got
fixed and seen took certain inordinate

334
00:26:26,370 --> 00:26:30,020
amount of time to actually post to this
vulnerability posting because they said

335
00:26:30,020 --> 00:26:34,210
well it's already fixed we don't need to
coordinate it so we had to wait for this

336
00:26:34,210 --> 00:26:38,760
vulnerability to come along and say okay
well no it's not fixed yet another

337
00:26:38,760 --> 00:26:43,810
vendor has had this problem so then they
decided they would coordinate this and

338
00:26:43,810 --> 00:26:47,320
poster thing we give them back in 2013

339
00:26:47,320 --> 00:26:50,780
prince charming vulnerability was found
by Peter lacA and he didn't want to give

340
00:26:50,780 --> 00:26:55,160
it any particular name but but chemo
came along and said you know what to

341
00:26:55,160 --> 00:26:55,630
call it

342
00:26:55,630 --> 00:26:59,580
prince charming because you know prince
charming weeks you up with the poison

343
00:26:59,580 --> 00:27:04,230
kiss and it's all very sketchy you've
got this vulnerability thanks to the

344
00:27:04,230 --> 00:27:05,690
poison kiss of prince charming

345
00:27:05,690 --> 00:27:13,890
so back in May Pedro posted a blog post
and in a post he talked about how he had

346
00:27:13,890 --> 00:27:18,960
you know seen the title of this talk
incorrectly inferred from the city's

347
00:27:18,960 --> 00:27:22,110
strike that this talk will have
something to do with north of anonymous

348
00:27:22,110 --> 00:27:25,919
and he said he had been looking into
darth anonymous and its potential

349
00:27:25,920 --> 00:27:31,600
applicability to apples but he said that
while he was doing his research he found

350
00:27:31,600 --> 00:27:36,300
a much more severe vulnerability and
that he didn't have to manipulate the

351
00:27:36,300 --> 00:27:41,070
boot script whatsoever he just put the
system to sleep well get back up and it

352
00:27:41,070 --> 00:27:45,300
was for whatever reason not actually
setting the protection but so they were

353
00:27:45,300 --> 00:27:49,030
forgetting to set the production bets
when it will back up and as you can see

354
00:27:49,030 --> 00:27:54,370
this was a cause for concern and tread
left much to be desired

355
00:27:54,370 --> 00:27:59,280
so the prince charming portability was
publicly disclosed back in

356
00:27:59,280 --> 00:28:03,940
you know in his blog post in May he
assumed incorrectly that we had already

357
00:28:03,940 --> 00:28:10,410
seen Prince Charming and disclosed it to
Apple he assumed that so we had

358
00:28:10,410 --> 00:28:14,690
previously been testing our systems and
testing for vulnerabilities of

359
00:28:14,690 --> 00:28:19,590
previously disclosed vulnerabilities on
macbook pro 11 Tues so these are newer

360
00:28:19,590 --> 00:28:24,709
systems and these do not exhibit prince
charming so you put it to sleep you will

361
00:28:24,710 --> 00:28:28,630
get back up and it is not actually
vulnerable it's still correctly set

362
00:28:28,630 --> 00:28:33,050
Pedro had actually been testing on
macbook pro 10 one and on that system

363
00:28:33,050 --> 00:28:37,510
you put it to sleep wake up so our
systems were vulnerable to vote Obama so

364
00:28:37,510 --> 00:28:39,960
you could manipulate the boot script and
things like that but they are not

365
00:28:39,960 --> 00:28:41,530
vulnerable to prince charming

366
00:28:41,530 --> 00:28:46,850
so basically Apple either you know
silently or accidentally fixed the

367
00:28:46,850 --> 00:28:51,689
problem in the newer machines and then
they didn't back toward it to previous

368
00:28:51,690 --> 00:28:56,800
systems and so consequently Pedro
basically accidentally put out a former

369
00:28:56,800 --> 00:29:01,060
level 0 day like deer everybody put you
back to sleep wake it up and you can go

370
00:29:01,060 --> 00:29:06,740
ahead and right into the flash chip in
back toward the system so hoops but

371
00:29:06,740 --> 00:29:11,610
after that have 20 after that firmware 0
day was out there I Apple turned around

372
00:29:11,610 --> 00:29:18,939
up at relatively quickly and this if I
security update 2015 2016 to prince

373
00:29:18,940 --> 00:29:24,390
charming and it partially fixed it
partially fixed then imma star Thomas

374
00:29:24,390 --> 00:29:28,600
attack if you look at the update will
see that it basically applies to

375
00:29:28,600 --> 00:29:35,070
everything from 2011 and forward so 24
different models were actually fixed but

376
00:29:35,070 --> 00:29:39,560
when trouble take a look at the patch
heat that there were some potential

377
00:29:39,560 --> 00:29:44,770
issues with it still so it proved to the
locking on the system both what does

378
00:29:44,770 --> 00:29:53,210
that actually mean so I put down the
firmware update and kiss between the

379
00:29:53,210 --> 00:29:58,560
different versions and found that Apple
is now sending the expected range

380
00:29:58,560 --> 00:30:04,520
registers and locking them in PCI before
of yesteryear good script is executed

381
00:30:04,520 --> 00:30:08,950
and this is this is the right place to
do it and it does prevent

382
00:30:08,950 --> 00:30:14,610
trading to the boot flash as we showed
our demo however the bias control bits

383
00:30:14,610 --> 00:30:18,928
are still unlocked so it's impossible to
break the system ps3 boot script is

384
00:30:18,929 --> 00:30:24,289
still unprotected so you can do all
sorts of interesting stuff in there and

385
00:30:24,289 --> 00:30:27,360
the T Sagan be register is unlocked

386
00:30:27,360 --> 00:30:32,779
this is yet another legacy feature a
potentially allows a device to DNA into

387
00:30:32,779 --> 00:30:38,860
a spin RAM which allows it could
execution and send them the other hand

388
00:30:38,860 --> 00:30:44,158
is it there appears to be another silent
fix that the latest MacBook the USBC One

389
00:30:44,159 --> 00:30:49,500
protects the s3 boot script via some
mechanism so it's not subject to the

390
00:30:49,500 --> 00:30:57,889
orthodontist attack but all of these
previous models still are so another

391
00:30:57,889 --> 00:31:02,178
legacy features that finish right to use
his is option ARMs thunderstruck one

392
00:31:02,179 --> 00:31:06,740
also took advantage of this goes back to
the earliest days at the idea IBMPC

393
00:31:06,740 --> 00:31:13,029
where the highest Italy socketed and
there were spare sockets on the

394
00:31:13,029 --> 00:31:16,820
motherboard for optional features like
the basic interpreter or hard drive

395
00:31:16,820 --> 00:31:23,320
controller expansion cards that video
cars were also allowed to have expansion

396
00:31:23,320 --> 00:31:27,689
roms on them so the bias couldn't write
the early boo messages out to this

397
00:31:27,690 --> 00:31:33,919
displays using this as an attack vectors
not really new idea john he's been

398
00:31:33,919 --> 00:31:40,230
presented my head 2007 with the proof of
concept that executed from PCIe cards

399
00:31:40,230 --> 00:31:47,710
and desktop and server systems in 2012
snare streamlined pat and showed how to

400
00:31:47,710 --> 00:31:50,450
implement age

401
00:31:50,450 --> 00:31:55,010
option ROM in a Gigabit Ethernet adapter
that could back toward the US 10 colonel

402
00:31:55,010 --> 00:31:59,470
his talk was the one that actually
started me on this project two years ago

403
00:31:59,470 --> 00:32:09,460
Intel realize that pose a problem for
secure boot and as part of the shower

404
00:32:09,460 --> 00:32:14,780
boo project required that expansion
cards had to you contained correctly

405
00:32:14,780 --> 00:32:19,120
signed option wrongs this was merged
into

406
00:32:19,120 --> 00:32:27,679
2.3 and are distributed as we mentioned
though Apple is basically frozen and the

407
00:32:27,680 --> 00:32:32,350
order if I one point 10 and they're
still unconditionally alluding to

408
00:32:32,350 --> 00:32:38,050
execute an option wrongs from both
internal and external devices on the bus

409
00:32:38,050 --> 00:32:45,129
and this is a spate was talking 2007
shares demo in 2012 and then might under

410
00:32:45,130 --> 00:32:50,500
short demo in 2014 in if he needs an
architectural fix that there needs to be

411
00:32:50,500 --> 00:32:55,970
a way to buy their wait list roms to
disabled rooms if they're not necessary

412
00:32:55,970 --> 00:33:01,700
in many ways to be able to trust the
contents of them

413
00:33:01,700 --> 00:33:11,060
201 talk also hypothesized that a tease
removal Thunderbolt devices could be

414
00:33:11,060 --> 00:33:18,149
used to virally spread this sort of
attack at the time the only ways to

415
00:33:18,150 --> 00:33:23,420
upgrade to the Proms was to reboot to
Dawson have to school control of the

416
00:33:23,420 --> 00:33:31,310
adapters and that's kind of messy and
not very streamlined so what we figured

417
00:33:31,310 --> 00:33:37,740
out there is that the Linux Broadcom be
57 tutsi curl driver has support for

418
00:33:37,740 --> 00:33:42,380
reading and writing the auction rooms so
we were able to put that over to us 10

419
00:33:42,380 --> 00:33:48,030
and now you only need root access to be
able to map the PCIe space in order to

420
00:33:48,030 --> 00:33:57,510
write to them this also works from TX
ERP I'm since they have access to this

421
00:33:57,510 --> 00:34:00,590
means that now an attacker who can get a

422
00:34:00,590 --> 00:34:07,100
a root shell on a machine using whatever
attack is currently is able to install a

423
00:34:07,100 --> 00:34:12,810
whitelisted trash hardware kernel
extension nafta PCIe space and then

424
00:34:12,810 --> 00:34:20,089
right there there could into the option
on those devices we must have these

425
00:34:20,089 --> 00:34:23,210
demos are using the Thunderbolt devices
because they're very convenient to their

426
00:34:23,210 --> 00:34:27,839
removal and fairly inexpensive but there
are lots of devices in the system that

427
00:34:27,839 --> 00:34:32,040
potentially could contain option ARMs
there's some models from wifi cards some

428
00:34:32,040 --> 00:34:37,270
some GPUs and some say two controllers
in the internal SSD is that have option

429
00:34:37,270 --> 00:34:42,629
ARMs as well so even if you can't get
persistence into the boot flash you can

430
00:34:42,629 --> 00:34:47,040
still get sometimes get persistence into
the peripherals which is almost as good

431
00:34:47,040 --> 00:34:51,210
as this does run before the end the
kernel starts and gives you the ability

432
00:34:51,210 --> 00:35:00,210
to back door and alright so one last
time for good measure right

433
00:35:00,210 --> 00:35:05,030
favorability shared amongst many systems
just because a researcher doesn't see it

434
00:35:05,030 --> 00:35:09,330
applies to one particular model or your
particular model your particular machine

435
00:35:09,330 --> 00:35:13,759
does not mean that it does not apply to
your particular machine but it's really

436
00:35:13,760 --> 00:35:17,660
just a question of motivation and have
hurt in terms of looking into these kind

437
00:35:17,660 --> 00:35:22,790
of things so ultimately you know we
basically did this survey of multiple

438
00:35:22,790 --> 00:35:26,540
public or abilities that we'd already
disclosed and you know here's the net

439
00:35:26,540 --> 00:35:32,680
result of it for Prince Charming that
was fully patched by the June 2013 so no

440
00:35:32,680 --> 00:35:36,669
longer you'll go up and apply the BIOS
updates which we always hard boner go

441
00:35:36,670 --> 00:35:41,859
player BIOS updates if you go to apply
the update then if you put it to sleep

442
00:35:41,859 --> 00:35:45,529
away get back up he will not just be
able enabled by default

443
00:35:45,530 --> 00:35:49,000
it'll still be partially vulnerable to
Darfur Thomas the attacker could use

444
00:35:49,000 --> 00:35:53,440
that to break into S&M and leaving the
RAM that your memory forensics can never

445
00:35:53,440 --> 00:35:58,710
take a look at but you know the other
things that travel mention there's also

446
00:35:58,710 --> 00:36:03,550
the Speed Racer issue which as I said
it's kind of you know they're not

447
00:36:03,550 --> 00:36:06,930
vulnerable to the hard work i mean their
hardware is vulnerable to the hardware

448
00:36:06,930 --> 00:36:10,700
race condition there is supposed to be
sending SMS

449
00:36:10,700 --> 00:36:15,540
WP in order to have the system properly
protected but they're simply not even

450
00:36:15,540 --> 00:36:20,460
using that protection bit and then
interestingly King's gambit Corazon

451
00:36:20,460 --> 00:36:25,000
ability which you just want to pony up
for yesterday and which I talked about

452
00:36:25,000 --> 00:36:30,589
we both talked about here at DEFCON
black hat last year that same

453
00:36:30,589 --> 00:36:35,099
vulnerability is actually still in
patched so although Apple patched the

454
00:36:35,099 --> 00:36:39,660
vulnerability which Souderton almost as
the proof of concept video is will not

455
00:36:39,660 --> 00:36:44,078
work directly by King's gambit is gives
us the exact same capability without the

456
00:36:44,079 --> 00:36:48,640
need for a sleeping resume gives us the
ability to write into the flash chip and

457
00:36:48,640 --> 00:36:53,210
and fully take control of the system so
that's still unpatched hubbell's working

458
00:36:53,210 --> 00:36:56,859
on a patch for that but you can hear
Corey talk a little bit about that

459
00:36:56,859 --> 00:37:00,160
little bit more about that at the
upcoming how can the box cheese

460
00:37:00,160 --> 00:37:05,520
circumference is this alien was another
one of Corey's vulnerabilities disclosed

461
00:37:05,520 --> 00:37:10,640
that ego party in 2013 that was a
situation where we were trying to make

462
00:37:10,640 --> 00:37:14,290
the point that invisible things lives in
the past said just because you break it

463
00:37:14,290 --> 00:37:19,180
does mean you can break into BIOS were
trying to show yes in some cases if you

464
00:37:19,180 --> 00:37:23,250
break into BIOS you can break into if
you break in testimony can break into

465
00:37:23,250 --> 00:37:27,160
the six thing that we did consider which
is not at all applicable to Apple

466
00:37:27,160 --> 00:37:31,299
systems is the set of all abilities
which had been found by in telling

467
00:37:31,300 --> 00:37:32,460
ourselves

468
00:37:32,460 --> 00:37:37,540
there's a variable which is very common
on many you fi systems a lot of PCs have

469
00:37:37,540 --> 00:37:44,500
it set a variable if corrupted will need
to bring your system and if manipulated

470
00:37:44,500 --> 00:37:49,170
will lead to breaking secure boot so
this has been a widespread vulnerability

471
00:37:49,170 --> 00:37:53,329
but does not apply doubt was because
they just simply don't use this because

472
00:37:53,329 --> 00:37:57,319
they just simply don't through security
and there's no equivalent sort of thing

473
00:37:57,319 --> 00:37:59,589
so

474
00:37:59,589 --> 00:38:02,549
you know what can vendors you'd actually
improve things because you know I know

475
00:38:02,549 --> 00:38:07,009
you're all BIOS lenders out there so let
me lay some truth on you you know

476
00:38:07,009 --> 00:38:11,940
testing vulnerabilities from other
systems if they're in the BIOS and

477
00:38:11,940 --> 00:38:15,809
firmware world whatsoever you need to
check whether those actually apply to

478
00:38:15,809 --> 00:38:21,670
you highly fixing vulnerabilities you
know bad karma they're using all the

479
00:38:21,670 --> 00:38:25,630
lock mechanisms that the vendors provide
you with intel says here's all these

480
00:38:25,630 --> 00:38:30,140
lock mechanisms that you can use it
probably behooves you to use them you

481
00:38:30,140 --> 00:38:34,400
can maybe get away with using less
protection mechanisms and then you know

482
00:38:34,400 --> 00:38:39,799
that much less work for attacker to
eventually break into the BIOS chips I

483
00:38:39,799 --> 00:38:44,519
can tell us tool for checking by a small
abilities can be used to just sort of

484
00:38:44,519 --> 00:38:49,038
automatically determine whether a given
system is Patrick not for using Windows

485
00:38:49,039 --> 00:38:54,640
or Linux you can just go use chipset
chipset doesn't support Mac OS so if you

486
00:38:54,640 --> 00:38:58,410
install Windows on your Mac and then you
go run chipset there you will see a

487
00:38:58,410 --> 00:39:01,960
telling you all right this system is not
this system is vulnerable because it's

488
00:39:01,960 --> 00:39:06,460
not using all the protection mechanism
there other things like S&M walks which

489
00:39:06,460 --> 00:39:07,960
helps lock away

490
00:39:07,960 --> 00:39:12,130
s3 boot script that it can't be just
sitting around in Rampur attacker

491
00:39:12,130 --> 00:39:16,749
manipulate that's actually used in the
EFI open source reference implementation

492
00:39:16,749 --> 00:39:20,718
but we actually see very few vendors
which actually use the lockbox and

493
00:39:20,719 --> 00:39:24,759
beyond that the lockbox is not a panacea
in and of itself as they showed in the

494
00:39:24,759 --> 00:39:30,059
dark anonymous attack that in some cases
vendors miss implement the lockbox and

495
00:39:30,059 --> 00:39:36,410
then it's still doable newer systems
intel has a technology called Blue Card

496
00:39:36,410 --> 00:39:40,410
and blue card provides a much stronger
root of trust for the system so that you

497
00:39:40,410 --> 00:39:45,979
know that the system does not execute
the very first instruction of this flash

498
00:39:45,979 --> 00:39:50,930
chip which can potentially reprogram and
take control of it executed out of some

499
00:39:50,930 --> 00:39:55,470
signed code that Intel provides that the
signature

500
00:39:55,470 --> 00:40:00,480
the public is built into the CPU itself
and so the CBO actually validates the

501
00:40:00,480 --> 00:40:05,060
digital signature on that code and of
course offer on this has been sort of a

502
00:40:05,060 --> 00:40:10,670
long-running problem this ability to you
know back toward the system to

503
00:40:10,670 --> 00:40:14,820
compromise the kernel is obviously we're
not at the end of it a lot of things the

504
00:40:14,820 --> 00:40:18,619
attack Iran to do you know maybe get
into the kernel just been a long running

505
00:40:18,619 --> 00:40:22,910
problem and there needs to be additional
security around that right so for the

506
00:40:22,910 --> 00:40:28,089
rest of you who are not bias vendors
what can you do well you need to start

507
00:40:28,090 --> 00:40:32,160
doing forward forensics right it's not
just about hard drive forensics anymore

508
00:40:32,160 --> 00:40:36,339
not just about memory forensics your
firmware and all of those little

509
00:40:36,340 --> 00:40:41,670
firmware is scattered about your system
they need actual checking that's part of

510
00:40:41,670 --> 00:40:45,450
the reason why we started our company is
because we didn't see people actually

511
00:40:45,450 --> 00:40:49,629
checking their firmware so we work with
vendors in order to remove

512
00:40:49,630 --> 00:40:53,869
vulnerabilities from firmware but if
their vulnerabilities out there in one

513
00:40:53,869 --> 00:40:58,140
patch things you could still get
infected and you need a way to actually

514
00:40:58,140 --> 00:41:04,670
check that so we are putting out a basic
tool you know basic band-aid what can

515
00:41:04,670 --> 00:41:10,380
you do in order to check whether or not
you got under under strike two for worms

516
00:41:10,380 --> 00:41:15,320
running around in your network troubles
going to be releasing the source for his

517
00:41:15,320 --> 00:41:21,330
option while dumping tool sort of ported
over from Linux 214 over from Linux to

518
00:41:21,330 --> 00:41:25,598
match that Mac users can just natively
don't the option off their vulnerable to

519
00:41:25,599 --> 00:41:31,790
doctors and consequently take a look at
it and we're releasing a script it's

520
00:41:31,790 --> 00:41:36,099
already posted which you can use to go
integrity shop the firmware in order to

521
00:41:36,099 --> 00:41:39,750
see you know is there anything modified
about this from or is there any code

522
00:41:39,750 --> 00:41:43,310
injected into it actually you know
pretty easy to integrity check the

523
00:41:43,310 --> 00:41:48,799
firmware so consequently just simple
script BAM 01 has it been manipulated or

524
00:41:48,800 --> 00:41:49,160
not

525
00:41:49,160 --> 00:41:52,220
now there might be some false positives
'cause we've only checked it on you are

526
00:41:52,220 --> 00:41:57,330
a few thunder Thunderbolt devices so if
you've often run it and it says there's

527
00:41:57,330 --> 00:42:01,880
an unexpected change two years wonderful
internet adapter well it may be a false

528
00:42:01,880 --> 00:42:02,480
positive

529
00:42:02,480 --> 00:42:09,610
or it may be true positive let us know
in either case also you know what can

530
00:42:09,610 --> 00:42:14,290
you do you can go get smart on security
for free from open security training to

531
00:42:14,290 --> 00:42:18,990
learn more about root kids what they can
do to you so thanks sure it in their

532
00:42:18,990 --> 00:42:22,939
talk we will have some further
information as well as they get a

533
00:42:22,940 --> 00:42:29,980
transcript on our different websites see
how to contact us and please be sure to

534
00:42:29,980 --> 00:42:31,960
fill out your evaluation forms

