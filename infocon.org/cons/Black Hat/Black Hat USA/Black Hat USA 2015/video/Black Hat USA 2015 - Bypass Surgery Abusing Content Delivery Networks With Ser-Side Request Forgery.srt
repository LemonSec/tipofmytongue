1
00:00:00,000 --> 00:00:07,000
you are currently in rooms topside South
Seas gah for sex and bypass surgery

2
00:00:07,000 --> 00:00:13,299
abusing content delivery networks with
server-side flash and DNS these are your

3
00:00:13,299 --> 00:00:22,289
speakers my perks and Matthew by
everyone and welcome goddesses bypass

4
00:00:22,289 --> 00:00:27,189
surgery and we're your hosts Brien

5
00:00:27,189 --> 00:00:30,779
securing song that the ship fox like to
do a lot of web hacking stuff more

6
00:00:30,779 --> 00:00:37,110
specifically a cease-fire to keep your
public is public so I have my signal up

7
00:00:37,110 --> 00:00:43,690
there and if anybody else wants two days
they don't have that key it's not me and

8
00:00:43,690 --> 00:00:50,019
my books I go by rock which is my last
name without the BS an avid participate

9
00:00:50,020 --> 00:00:53,800
in stock overflowing security that Stock
Exchange I like these communities and I

10
00:00:53,800 --> 00:01:00,949
encourage other security professionals
participate so the modern web today you

11
00:01:00,949 --> 00:01:04,559
really have the situation where you have
a company that hosts all of their own

12
00:01:04,559 --> 00:01:08,000
content on their web pages you know they
make you saw a lot of third-party

13
00:01:08,000 --> 00:01:13,049
services to deliver their product and
all these things work in a visibly in

14
00:01:13,049 --> 00:01:15,570
the background kind of without your
knowledge when you visit these web pages

15
00:01:15,570 --> 00:01:22,880
and of course we're talking about
content delivery networks so these are

16
00:01:22,880 --> 00:01:26,149
networks that will serve content for
other pages you got to take advantage of

17
00:01:26,150 --> 00:01:30,869
their very fast distributed you know
what services and when you visit a lot

18
00:01:30,869 --> 00:01:35,060
of your sites that you use every day you
trust all of these networks kind of

19
00:01:35,060 --> 00:01:40,950
implicitly because these companies used
you actually spend your trust to them so

20
00:01:40,950 --> 00:01:43,890
many people kinda think the web like
this they think you know I type in

21
00:01:43,890 --> 00:01:47,680
foxnews.com and my web browser should
render they think their request goes to

22
00:01:47,680 --> 00:01:52,430
Fox they returned a web page and that's
the whole transaction but of course as

23
00:01:52,430 --> 00:01:54,180
we know this is not the case

24
00:01:54,180 --> 00:01:57,740
boxes take advantage of many third-party
services to deliver this final product

25
00:01:57,740 --> 00:02:02,179
you their webpage these things like
Adobe analytics maybe to take to take ya

26
00:02:02,180 --> 00:02:04,320
statistics of their customer base

27
00:02:04,320 --> 00:02:08,079
other browsing the sites maybe their
actual web content itself is served by

28
00:02:08,080 --> 00:02:13,900
Akamai a big CDN and even stuff like DNS
can be used with 19 I said they actually

29
00:02:13,900 --> 00:02:17,930
provide that for you so you have all
these things coming together to deliver

30
00:02:17,930 --> 00:02:25,420
the final product today it's not just
all the facts as on service

31
00:02:25,420 --> 00:02:29,929
so weird and interesting position now so
we have all of these big websites on the

32
00:02:29,930 --> 00:02:34,510
internet and we're trusting just a few
CD ends with all of this so we kind of

33
00:02:34,510 --> 00:02:38,940
take it over X we put them in only a few
baskets so what happens when we have a

34
00:02:38,940 --> 00:02:43,590
vulnerability and one of these city ends
as it turns out the impact is severe and

35
00:02:43,590 --> 00:02:51,920
its far-reaching we have an example of
this is the author and websites we have

36
00:02:51,920 --> 00:02:56,140
a user navigating the site as usual and
of course probably unlike any other

37
00:02:56,140 --> 00:02:59,649
website makes use of third-party
services and we noticed that the user

38
00:02:59,650 --> 00:03:04,350
browses to a third-party page after they
visited this website and this is this is

39
00:03:04,350 --> 00:03:07,950
our attacker payload and after they
visit this payload they noticed

40
00:03:07,950 --> 00:03:11,890
something odd happened with the roughly
insight and I can they continue

41
00:03:11,890 --> 00:03:17,540
navigating the nicest things been added
to their shopping bag when they go to

42
00:03:17,540 --> 00:03:21,679
view that they noticed at AOS $30,000
handbag has been added to your cart

43
00:03:21,680 --> 00:03:27,380
without their knowledge this is an
alligator drawstring bag that's one

44
00:03:27,380 --> 00:03:31,430
expensive alligator

45
00:03:31,430 --> 00:03:36,829
concept I just like to give a shout out
we had Microsoft which ought to us ahead

46
00:03:36,829 --> 00:03:41,870
of time they start talking to us and
said hey are we thought we would help

47
00:03:41,870 --> 00:03:44,989
them get things patched up for this so
we're about to see no longer works

48
00:03:44,989 --> 00:03:49,579
because they were proactive actually
with their you know it's a response so

49
00:03:49,579 --> 00:03:56,209
this proof of concept here we have a
user going to end a Euro at live.com

50
00:03:56,209 --> 00:04:01,260
this is Microsoft's official website and
they see pages says protect your PC

51
00:04:01,260 --> 00:04:05,840
which appears to serve Microsoft
Security Essentials which it is expected

52
00:04:05,840 --> 00:04:09,769
from Microsoft would actually go down to
actually install that software they get

53
00:04:09,769 --> 00:04:14,650
command i txt instead now how is this
possible why is Microsoft serving this

54
00:04:14,650 --> 00:04:20,649
random file and the answer is nobody
that we found

55
00:04:20,649 --> 00:04:26,080
so what happened here reusing attacked
and using server-side request forgery

56
00:04:26,080 --> 00:04:30,909
and promotes with include now why is it
actually useful doctrine is useful

57
00:04:30,910 --> 00:04:35,410
because it allows us to expand the
impact and effect more people as a

58
00:04:35,410 --> 00:04:40,460
real-world example let's say you want to
break into a house first you go and you

59
00:04:40,460 --> 00:04:45,810
the gate to their backyard is open and
in the backyard you find a lighter and

60
00:04:45,810 --> 00:04:50,220
lighter you get to the second floor
balcony and then the windows open that

61
00:04:50,220 --> 00:04:54,000
is a stacked team to break into a house
now how do you break into an ivory tower

62
00:04:54,000 --> 00:05:01,120
when using my real ladder for elephants
so the first step in our attack

63
00:05:01,120 --> 00:05:05,620
Reconnaissance no DNS holds all the keys
shows us important trust relationships

64
00:05:05,620 --> 00:05:13,080
for our target and and and i was the
first step in this attack so this

65
00:05:13,080 --> 00:05:16,349
particular vulnerability that we're
talking about it's been around for a

66
00:05:16,349 --> 00:05:20,650
while and when one of the reasons why I
think it is gone undiscovered this long

67
00:05:20,650 --> 00:05:25,520
is because of scoping problems and
penetration tests usually in a

68
00:05:25,520 --> 00:05:28,430
penetration test were concerned about
the internal infrastructure worried

69
00:05:28,430 --> 00:05:32,870
about their load balancer internal HP
servers databases and this rate of

70
00:05:32,870 --> 00:05:37,110
interfaces but external supporting
services are often let it left out of

71
00:05:37,110 --> 00:05:44,970
scope this concludes Gmail web services
ICDs and cloud services so really this

72
00:05:44,970 --> 00:05:49,740
hole mobility affects the supporting
infrastructure and the system

73
00:05:49,740 --> 00:05:53,169
so how do we find how do we know about
the supporting infrastructure for our

74
00:05:53,169 --> 00:05:58,639
target their number of DNS tools out
there a good one is dns dumpster however

75
00:05:58,639 --> 00:06:02,960
Dennis done through has an artificial
limitation of only 256 DNS records

76
00:06:02,960 --> 00:06:07,039
turned 56 records it's very small now
that my work just fine from out of

77
00:06:07,039 --> 00:06:11,110
public sight but it's not going to help
for the Alexa top thousand they're also

78
00:06:11,110 --> 00:06:15,520
brute force of tools such as fierce or
DNS recon now these are more all these

79
00:06:15,520 --> 00:06:21,139
are older tools and I i think there's a
lot so I wrote it to a separate and

80
00:06:21,139 --> 00:06:25,409
we'll talk about that time the project
intended for separate and we have about

81
00:06:25,409 --> 00:06:27,659
80 forks on get help

82
00:06:27,659 --> 00:06:33,870
GPO very seriously so I go through my
project and I see how they have modified

83
00:06:33,870 --> 00:06:38,819
my tool and I tried to add these cool
features into the main line uses just

84
00:06:38,819 --> 00:06:43,039
simple the most thorough scan will be
running some fruit in this case against

85
00:06:43,039 --> 00:06:48,539
google.com / piece which gives you more
information about the records are

86
00:06:48,539 --> 00:06:51,599
actually print out all of the records
and said just the sub domains and

87
00:06:51,599 --> 00:06:57,389
Duchess is the the subdomain less to use
there's also a very fast option if you

88
00:06:57,389 --> 00:07:03,380
used a char uses open resolvers as a
kind of proxy to access the server /

89
00:07:03,380 --> 00:07:08,900
artist 0 anonymous in that none of your
traffic from your system goes directly

90
00:07:08,900 --> 00:07:11,989
to your target it all goes through
intermediaries helps protect your

91
00:07:11,990 --> 00:07:19,639
identity so separatism a decree spider
so what isn't it great so far it is

92
00:07:19,639 --> 00:07:25,270
another great type and it is a transfer
chance resounds if experts are supported

93
00:07:25,270 --> 00:07:30,740
by your target and it's easy but you get
every DNS record but as you may expect

94
00:07:30,740 --> 00:07:35,710
it's disabled on the vast majority of
websites something like 99% so after

95
00:07:35,710 --> 00:07:36,620
exit for sale

96
00:07:36,620 --> 00:07:40,599
against every authoritative server it
will fall back on the NE medic retype

97
00:07:40,599 --> 00:07:45,020
any medicare has returned all records
for that given name if you're going

98
00:07:45,020 --> 00:07:50,198
through a open resolver and open result
doesn't have any records for for that

99
00:07:50,199 --> 00:07:50,719
name

100
00:07:50,719 --> 00:07:55,460
the records passed on to the
authoritative so it isn't any cream will

101
00:07:55,460 --> 00:07:58,909
you can run a query with dick on the
command line so this is an example of

102
00:07:58,909 --> 00:08:04,190
running any google.com against da da da
da da da da this referring to 24 records

103
00:08:04,190 --> 00:08:08,430
all different types of you doing a
record a query you'll just get a records

104
00:08:08,430 --> 00:08:12,940
in response categories return a variety
of records in response to this case we

105
00:08:12,940 --> 00:08:17,580
get a quadruple a and ice and even
stranger records like take 257 what does

106
00:08:17,580 --> 00:08:26,139
it take to 57 now what support does is
it takes the this response and uses a

107
00:08:26,139 --> 00:08:31,289
regular expression to match all
subdomains now separate is it doesn't

108
00:08:31,289 --> 00:08:34,740
care what the record types are its
future proof it just carries with the

109
00:08:34,740 --> 00:08:39,659
data is it matches up to matts after
matches these demands it recursively

110
00:08:39,659 --> 00:08:44,750
calls them to find new records and what
does this give us when we run against

111
00:08:44,750 --> 00:08:49,029
google.com we get over three thousand
records in response now as far as I know

112
00:08:49,029 --> 00:08:52,339
if there is no other open source tool
that can get anywhere near this number

113
00:08:52,339 --> 00:08:56,709
of records on Google and I think that
side we need better DNS tools we need

114
00:08:56,709 --> 00:09:00,750
improvements to separate and we need
more records from Google and because

115
00:09:00,750 --> 00:09:03,740
we're able to get this kind of incident
or targets that's how we found this

116
00:09:03,740 --> 00:09:07,100
vulnerability to be kind of it if we
have better DNS tools I think we'll find

117
00:09:07,100 --> 00:09:13,839
more vulnerabilities like this so
interesting so Google overwhelmingly has

118
00:09:13,839 --> 00:09:18,279
a records now that's not true for all
targets Google is is specific their

119
00:09:18,279 --> 00:09:21,720
number one website in the world and they
don't use any other supporting

120
00:09:21,720 --> 00:09:24,730
infrastructure to use their own content
delivery systems use their own email

121
00:09:24,730 --> 00:09:28,829
infrastructure don't wait infrastructure
now there are other architects returned

122
00:09:28,829 --> 00:09:36,510
here as a review records no error what
is this so 257 is a shower one

123
00:09:36,510 --> 00:09:42,630
fingerprint of the issuing CA SERT it is
a way to prevent malicious EA's from

124
00:09:42,630 --> 00:09:45,200
issuing certificates for Google services

125
00:09:45,200 --> 00:09:52,870
and it is an emerging standard now take
257 the reason why Google has a 25 cent

126
00:09:52,870 --> 00:09:57,480
record is running into trouble with
malicious governments are issuing

127
00:09:57,480 --> 00:10:04,230
certificates should not be so not only
does DNS show its trust relationships it

128
00:10:04,230 --> 00:10:07,350
shows that our target doesn't trust
people and that's important

129
00:10:07,350 --> 00:10:13,210
now there's another emerging standard
dan DNS appeased identification of named

130
00:10:13,210 --> 00:10:19,790
entities this is a system of public key
distribution based on DNS SEC all

131
00:10:19,790 --> 00:10:24,110
browsers have Dane Cook's built into
them to switch over today and at a time

132
00:10:24,110 --> 00:10:28,420
but it's currently disabled od Anosike
has not been widely deployed in the

133
00:10:28,420 --> 00:10:32,469
future I hope that this problem of
malicious EA's will go away entirely I

134
00:10:32,470 --> 00:10:36,640
think they may be the answer to that but
we're not in the future

135
00:10:36,640 --> 00:10:41,199
SRV records there about 22 SRV records
returned on Google which is an SRV

136
00:10:41,200 --> 00:10:46,760
record records follow economy in the
first subdomain in this case underscored

137
00:10:46,760 --> 00:10:51,450
TCP is the transport layer as you might
imagine other transport layers defined

138
00:10:51,450 --> 00:10:57,480
underscored stils underscored UDP and
then underneath and this case Calif is

139
00:10:57,480 --> 00:11:02,130
the actual service being run SoCal doubt
is running on port 80 and is pointing to

140
00:11:02,130 --> 00:11:08,070
the next service is a Jabber client and
this is running on port 5222 and is

141
00:11:08,070 --> 00:11:12,460
pointing to the Google to Google service
was also held up here now in a Windows

142
00:11:12,460 --> 00:11:15,310
environment the LDAP server is the
domain controller they're one in the

143
00:11:15,310 --> 00:11:22,319
same room 221 port 389 and it can be
found at all that talk google.com now

144
00:11:22,320 --> 00:11:27,210
we're running the service against our
target we enumerate did CNAME records

145
00:11:27,210 --> 00:11:33,300
and the CNAME records showed that some
of our targets subdomains were planning

146
00:11:33,300 --> 00:11:41,370
to edge sweet sweet then pointed to an
Akamai service and then finally named my

147
00:11:41,370 --> 00:11:45,670
service in the final and a record to
enact my server so in this case one of

148
00:11:45,670 --> 00:11:51,849
these subdomains our target and in this
case Facebook ultimately 2004 mobile

149
00:11:51,850 --> 00:11:56,040
service now when we saw that both our
target were affected and Facebook was

150
00:11:56,040 --> 00:11:56,910
affected

151
00:11:56,910 --> 00:12:03,670
we realize that this issue affected
everyone so so brutal also can be run on

152
00:12:03,670 --> 00:12:09,030
internal network assessments or by post
exploitation so and that's why I built

153
00:12:09,030 --> 00:12:14,079
the dot exe as if you're on a Windows
environment so if you run it against the

154
00:12:14,080 --> 00:12:17,660
internal network you'll get different
results

155
00:12:17,660 --> 00:12:22,130
internal services such as a result that
will be found

156
00:12:22,130 --> 00:12:27,130
how does a Windows system identified its
domain controller uses service records I

157
00:12:27,130 --> 00:12:31,160
do VoIP phones no words white gateway
our service records so in this case we

158
00:12:31,160 --> 00:12:35,050
ran this on a real internal assessment
and we found 19 domain controllers for

159
00:12:35,050 --> 00:12:38,550
the system that's a big network each
domain controller was named after a

160
00:12:38,550 --> 00:12:46,339
hockey team Rangers sharks sharks and
how much do you want a bad one of their

161
00:12:46,340 --> 00:12:51,340
passwords who is a hockey player name
followed by the uniform number the

162
00:12:51,340 --> 00:12:53,649
chances were good

163
00:12:53,649 --> 00:12:59,749
now there's also a communist
configurations Indian us so CWA in 2003

164
00:12:59,749 --> 00:13:02,389
is information disclosure through
discrepancy

165
00:13:02,389 --> 00:13:07,009
this is the common weakness the catch
all foresight side channel attacks so

166
00:13:07,009 --> 00:13:10,550
yes DNS can also suffer from side
channel attacks what does that look like

167
00:13:10,550 --> 00:13:15,248
so what's a brutal do is first two tries
to look up to me and it doesn't exist

168
00:13:15,249 --> 00:13:21,300
some new ideas a subdomain and record
the real the response so far most

169
00:13:21,300 --> 00:13:25,459
servers will be an extra man which is
effectively no record found but it could

170
00:13:25,459 --> 00:13:28,819
be anything that could be no era could
be refused

171
00:13:28,819 --> 00:13:33,240
now as it's going through the process of
enumerated other records he keeps track

172
00:13:33,240 --> 00:13:37,040
of the response received and it receives
a different spots then there's something

173
00:13:37,040 --> 00:13:41,639
going on here it's like when I'm going
to the to me when I'm going to the DNS

174
00:13:41,639 --> 00:13:42,670
server and say hey

175
00:13:42,670 --> 00:13:47,868
underscored immediately Japan Thaicom
exist and as a server I would say you

176
00:13:47,869 --> 00:13:51,550
know I can't confirm or deny the
existence of any of these records but

177
00:13:51,550 --> 00:13:56,740
you didn't throw an error when he did
that query so something suspicious here

178
00:13:56,740 --> 00:14:02,689
ok to underscore domain key internal
does these may be interesting targets

179
00:14:02,689 --> 00:14:08,939
let's not them out so supreme takes its
output files as input files and it also

180
00:14:08,939 --> 00:14:14,300
it's a great label format so we can cut
out the results are up for no error for

181
00:14:14,300 --> 00:14:18,569
these strange records and then run some
fruit on these strange records so what

182
00:14:18,569 --> 00:14:24,699
did we fight I see I is its own demand
underneath the jetpack dot com nao sei

183
00:14:24,699 --> 00:14:27,050
has its own domain controller found it
out

184
00:14:27,050 --> 00:14:34,059
dicey I dot dot com and when we resolve
this name change we get down to an IP

185
00:14:34,059 --> 00:14:39,509
address its own internal network this is
from the external attacker we can find

186
00:14:39,509 --> 00:14:43,720
the IP address at the internal domain
controller that should not happen that

187
00:14:43,720 --> 00:14:46,870
is an information disclosure
vulnerability but what else can we fight

188
00:14:46,870 --> 00:14:53,069
so internal internal knowledge impact
dot com this has this definitely sounds

189
00:14:53,069 --> 00:14:54,049
interesting

190
00:14:54,049 --> 00:14:57,910
accounting . internal knowledge of Bank
dot com that would be something we want

191
00:14:57,910 --> 00:15:00,790
to access so how do we access the
service

192
00:15:00,790 --> 00:15:09,490
Sarah site request forgery CSRF is about
trust your server your target legit bank

193
00:15:09,490 --> 00:15:15,990
dot com needs to trust a variety of
services trust it may be a virtual

194
00:15:15,990 --> 00:15:19,990
private cloud environment where there
are various cloud services that it

195
00:15:19,990 --> 00:15:24,250
depends upon there may be internal web
services internal API's or internal

196
00:15:24,250 --> 00:15:29,220
databases and internal administrative
interfaces which Trust Bank dot com and

197
00:15:29,220 --> 00:15:34,970
would not be normally accessible know
what is necessary if exists so one of

198
00:15:34,970 --> 00:15:37,840
the reasons one of the ways that our
society is introduced into an

199
00:15:37,840 --> 00:15:43,670
application is by across the main proxy
so the same origin policy may prevent a

200
00:15:43,670 --> 00:15:48,110
developer from loading and loading and
resources needed to render the page and

201
00:15:48,110 --> 00:15:52,940
they rely on a cross-domain proxy to
fulfill that to bypass the same origin

202
00:15:52,940 --> 00:15:57,250
policy intentionally so when i search
for cross-domain proxy on Google the

203
00:15:57,250 --> 00:16:03,300
pursuit hits RSS RSS now an intentional
by passing through security system can

204
00:16:03,300 --> 00:16:08,790
turn into a valuable thing can attack
change so what tools to use for us as

205
00:16:08,790 --> 00:16:13,270
Sarah so there's a cat which is the
latest version of netcat and I recommend

206
00:16:13,270 --> 00:16:17,910
updating many people are still using the
old that kind there's also a free

207
00:16:17,910 --> 00:16:18,390
service

208
00:16:18,390 --> 00:16:23,260
HP been dot org but personally I don't
use HDB been for my pen to us and the

209
00:16:23,260 --> 00:16:25,150
reason why is because I want to keep my
old days

210
00:16:25,150 --> 00:16:29,860
private I don't want a third party to
have this information so I prefer

211
00:16:29,860 --> 00:16:35,250
collaborator collaborator is a new
feature of purp in which you're running

212
00:16:35,250 --> 00:16:39,700
a server on your own infrastructure and
this server can accept callbacks from

213
00:16:39,700 --> 00:16:44,120
their target this is very useful in not
only side channel attacks but also as a

214
00:16:44,120 --> 00:16:50,360
sort of exploitation so let's go back to
one of the results from Google was PHP

215
00:16:50,360 --> 00:16:55,710
cross-domain proxy now this came up on a
penthouse where he was running on our

216
00:16:55,710 --> 00:17:00,430
target and the except when parameters
CSIRO know when we pass es raro

217
00:17:00,430 --> 00:17:04,510
localhost 631 we gained access to the
cup statement

218
00:17:04,510 --> 00:17:09,170
now the Cubs game and runs as root and
is only accessible on localhost what

219
00:17:09,170 --> 00:17:13,250
this shows is that SRF was allowed us to
break a trust boundary and access a

220
00:17:13,250 --> 00:17:17,410
local who system now other versions of
cops more vulnerable to shell shocked

221
00:17:17,410 --> 00:17:20,780
and was exploitable using SSRS which met
you

222
00:17:20,780 --> 00:17:24,709
remote root on the system unfortunately
cups 1530 was not been able to shell

223
00:17:24,709 --> 00:17:29,820
shocked and that did not give us a shell
on this assessment so what I did was I

224
00:17:29,820 --> 00:17:35,700
used burp intruder and cluster bomb mode
cluster bomb what it does is this case

225
00:17:35,700 --> 00:17:39,480
we have to insertion points and we give
it two lists and it tries every

226
00:17:39,480 --> 00:17:43,110
combination of those two lists so this
is useful for brute forcing usernames

227
00:17:43,110 --> 00:17:47,729
and passwords for a login form or in
this case turning SRF into a local port

228
00:17:47,730 --> 00:17:53,340
scanner for the local network so we
scanned the internal network and we

229
00:17:53,340 --> 00:18:00,899
found that 192 168 2012 at 180 research
to 200 ok when we visit the site we

230
00:18:00,900 --> 00:18:04,750
found that it was a Cisco switch and a
default username and password and all

231
00:18:04,750 --> 00:18:09,280
too common finding on an internal
network assessment and what else can we

232
00:18:09,280 --> 00:18:16,920
do to calm is running a load balancer
now this load balancer specifically with

233
00:18:16,920 --> 00:18:21,860
an engine X passed through proxy and it
was routing based on host name and path

234
00:18:21,860 --> 00:18:28,909
to internal services so when you gave it
www.jetblue.com you access a one of the

235
00:18:28,910 --> 00:18:33,510
ECB servers hosting this application so
what about accounting internal

236
00:18:33,510 --> 00:18:40,870
legit bank dot com while using repeater
we established an HTTPS connection to

237
00:18:40,870 --> 00:18:46,219
Egypt bank dot com publicly resolvable
IP address that we changed the host to

238
00:18:46,220 --> 00:18:47,790
accounting internal

239
00:18:47,790 --> 00:18:51,909
legit bank dot com and lo and behold
they give us access to this particular

240
00:18:51,910 --> 00:18:57,910
endpoint was a restful webservice with a
trivial username and password on its

241
00:18:57,910 --> 00:19:03,230
internal network it was segregated from
the other systems and they were not

242
00:19:03,230 --> 00:19:08,210
expecting it to be exposed to remotely
literally this service allowed us to

243
00:19:08,210 --> 00:19:08,600
move

244
00:19:08,600 --> 00:19:14,000
of funds between accounts and allowed us
to rob the bank lined so yes how many

245
00:19:14,000 --> 00:19:19,850
people are looking for SRF and load
balancers well you should start to some

246
00:19:19,850 --> 00:19:23,510
questions I ask yourself in a society
exploitation the root of the route

247
00:19:23,510 --> 00:19:27,800
questions can I access a protected
resource another question can you turn

248
00:19:27,800 --> 00:19:34,879
another vulnerability into asahara for
example XXII or XML entity external

249
00:19:34,880 --> 00:19:39,760
entities can be turned into a sorrow by
defining a DTD system to make HTTP

250
00:19:39,760 --> 00:19:43,100
requests you may be able to make a
change request to the internal network

251
00:19:43,100 --> 00:19:49,629
map out the system or access protected
resources can you identify internal

252
00:19:49,630 --> 00:19:53,660
hosts internal IP addresses using
separate and can you access those using

253
00:19:53,660 --> 00:19:58,040
this vulnerability can you access for a
virtual private cloud can you access s3

254
00:19:58,040 --> 00:20:03,810
or MongoDB by default MongoDB doesn't
have a password and you may be able to

255
00:20:03,810 --> 00:20:06,220
access collections that are not intended

256
00:20:06,220 --> 00:20:12,230
can you also also can you access a host
that you control can you have a connect

257
00:20:12,230 --> 00:20:20,200
back to net cash or the HEB client may
be setting an authorization bearer token

258
00:20:20,200 --> 00:20:24,310
in the header for that client may be
vulnerable to something like heart bleed

259
00:20:24,310 --> 00:20:28,280
you're connecting to an HTTP client and
now that claim could be exploited

260
00:20:28,280 --> 00:20:33,220
potentially another question can I load
arbitrate content such as a malicious

261
00:20:33,220 --> 00:20:37,120
swift a remote to make

262
00:20:37,120 --> 00:20:41,809
so with a handoff we're gonna move from
there after we're going to talk about

263
00:20:41,809 --> 00:20:47,450
swift include vulnerabilities so flash
is an interesting bad for exploitation

264
00:20:47,450 --> 00:20:52,330
and because of the way that when i flash
application executes its origin is

265
00:20:52,330 --> 00:20:56,139
actually in the site deficit which is
different from things like JavaScript

266
00:20:56,140 --> 00:21:01,270
before we go into this doe gonna give
you guys a few tools so you want to go

267
00:21:01,270 --> 00:21:05,710
out and do this you can use these to you
know find more abilities may cripple

268
00:21:05,710 --> 00:21:09,850
concepts one of them is the cost of a
nice smile perfect concept to all this

269
00:21:09,850 --> 00:21:14,909
is a flash application which allows you
to do cross origin requests in flash you

270
00:21:14,910 --> 00:21:18,320
can type in the URL parameters and it
will tell you to that request work with

271
00:21:18,320 --> 00:21:21,580
their security error and so you can
debug this cross site request with flash

272
00:21:21,580 --> 00:21:26,389
if you don't want to write ActionScript
in year proof of concept which I never

273
00:21:26,390 --> 00:21:30,840
want to do you can use flash is sleepy
request which is a bridge with flash we

274
00:21:30,840 --> 00:21:34,370
take a call from JavaScript you can make
all of your PC's and JavaScript without

275
00:21:34,370 --> 00:21:37,969
touching any action scripting all
another good tool that was recommended

276
00:21:37,970 --> 00:21:43,429
to me by Mike was J packs and jetpacks
is great when it comes to D compiling

277
00:21:43,429 --> 00:21:47,929
sweats and he's like applications it
gives you the full source code and in

278
00:21:47,929 --> 00:21:54,120
addition you can also modify the source
code and compile on the fly so it's very

279
00:21:54,120 --> 00:21:58,030
useful for finding / exploits another
great tool is that was made by some of

280
00:21:58,030 --> 00:22:01,809
our colleagues is such dignity so if you
have a vulnerable swift you can

281
00:22:01,809 --> 00:22:05,800
enumerate the end points on different
surfaces using search engines and so you

282
00:22:05,800 --> 00:22:11,020
can kind of take this route was affected
by this vulnerable swift in 2015 search

283
00:22:11,020 --> 00:22:14,250
engine hacking is still alive and well
with such dignity I recommend checking

284
00:22:14,250 --> 00:22:17,350
it out

285
00:22:17,350 --> 00:22:22,370
so we're gonna in order to kind of give
you an idea of why flashes weird with

286
00:22:22,370 --> 00:22:26,570
how it works we're going to compare to
JavaScript in when you include it on a

287
00:22:26,570 --> 00:22:33,299
webpage so before you go into that let's
touch on what's in origin so organs out

288
00:22:33,299 --> 00:22:37,039
of core actually quite simple there just
a combination of Port scheme into a man

289
00:22:37,039 --> 00:22:40,030
and you know why do we have these things
on the web

290
00:22:40,030 --> 00:22:44,350
the reason is if you had my my blog
opened up in a tap and you open a new

291
00:22:44,350 --> 00:22:48,510
tab and you go and you check your Gmail
should my blog be able to reach into

292
00:22:48,510 --> 00:22:52,020
that and start reading your emails its
shares of course no and the web doesn't

293
00:22:52,020 --> 00:22:55,700
like me to do this in the reason why is
they both have separate origins you

294
00:22:55,700 --> 00:22:59,490
can't do cross origin requests on the
web because that's the same origin

295
00:22:59,490 --> 00:23:04,900
policy violation so these are kind of
the critical it's kind of a critical

296
00:23:04,900 --> 00:23:06,669
component of web security today

297
00:23:06,669 --> 00:23:12,429
same origin policy protects us from all
of these web attacks so the differences

298
00:23:12,429 --> 00:23:15,470
between a Javascript and Flash they're
actually pretty much the opposite way

299
00:23:15,470 --> 00:23:19,840
they execute so when you have a for
example external script tag on your page

300
00:23:19,840 --> 00:23:20,720
and you

301
00:23:20,720 --> 00:23:24,690
source a piece of jobs from a
third-party domain without Javascript

302
00:23:24,690 --> 00:23:25,909
runs on your page

303
00:23:25,909 --> 00:23:30,520
excuse in the context of that page not
the site that hosts a javascript but on

304
00:23:30,520 --> 00:23:34,879
the pitch on the domain uploaded it and
flash complete turns us on its head is

305
00:23:34,880 --> 00:23:39,220
completely the opposite so it flash I'm
a badass with my own page

306
00:23:39,220 --> 00:23:43,429
execute to stop executing in the context
of that page is actually two in the

307
00:23:43,429 --> 00:23:47,289
context of that third party domain so
drive the point home we have some

308
00:23:47,289 --> 00:23:52,740
examples here is a example of shit all
page and its sources JavaScript from

309
00:23:52,740 --> 00:23:57,370
third-party dot coms is on the homepage
legit bank dot com and all this

310
00:23:57,370 --> 00:24:02,020
javascript has in it is a simple step it
that simply prints the current executing

311
00:24:02,020 --> 00:24:07,350
origin so it shows you know what it was
like really executing us and so we we of

312
00:24:07,350 --> 00:24:11,899
course open this web browser what we see
it in the context of legit bank dot com

313
00:24:11,900 --> 00:24:15,220
not the third party hosted it

314
00:24:15,220 --> 00:24:20,270
washington's the Senate and now we have
a swift embedding from surprise dot com

315
00:24:20,270 --> 00:24:25,139
on legit bank dot com now in order to
show that this is executing in the

316
00:24:25,140 --> 00:24:29,669
context of third-party we have a secret
that text file that we've hosted on the

317
00:24:29,669 --> 00:24:33,950
site so now we've got a short little
video here and we used across the main

318
00:24:33,950 --> 00:24:38,390
concept we talked about earlier and we
enter in the euro for this secret stuff

319
00:24:38,390 --> 00:24:41,919
text file that is hosted on a
third-party and of course we actually go

320
00:24:41,919 --> 00:24:46,960
to make this request this is perfectly
because this application is in the

321
00:24:46,960 --> 00:24:53,309
context of third-party not have legit
bank so that succeeds just fine now we

322
00:24:53,309 --> 00:24:57,530
got to do this request to legit bank dot
com despite it being embedded in that

323
00:24:57,530 --> 00:25:01,510
page it doesn't work because this was
not loaded in the context of the bank

324
00:25:01,510 --> 00:25:05,980
dot com it so the third party so this is
the difference between the two and this

325
00:25:05,980 --> 00:25:09,070
is why flashes so interesting for
exportation when you do a hijacking of

326
00:25:09,070 --> 00:25:15,928
sweats so also has if you want to allow
cross origin requests flashes a way for

327
00:25:15,929 --> 00:25:20,309
you to do that they have something
called crossed amended XML and this is a

328
00:25:20,309 --> 00:25:24,299
simple XML document that you put in your
web roots and you specify a list of

329
00:25:24,299 --> 00:25:27,820
sites that are allowed to do a crossword
request to your site it's kind of like a

330
00:25:27,820 --> 00:25:31,030
bouncer lest you know I trust these
sites they can grab stuff for my website

331
00:25:31,030 --> 00:25:35,399
you know they're all good and
unfortunately wild card usage is

332
00:25:35,400 --> 00:25:38,860
incredibly commonplace in this space and
I'm not sure this is due to

333
00:25:38,860 --> 00:25:42,520
misunderstanding of how these policies
work or just you know an effort to get

334
00:25:42,520 --> 00:25:47,330
things to work correctly so we have an
example across the main policy on which

335
00:25:47,330 --> 00:25:51,020
it bank dot com now you look at this
initially and you say oh well there's

336
00:25:51,020 --> 00:25:54,860
only two entries so there's no other
surface area for us to attack as hackers

337
00:25:54,860 --> 00:26:00,189
and that's not the case this is a very
very wide open across the maximal policy

338
00:26:00,190 --> 00:26:07,260
any subdomain either legit packed a calm
or third-party dot com if if a swift

339
00:26:07,260 --> 00:26:10,440
that attackers created on it we can
compromise the security of the main web

340
00:26:10,440 --> 00:26:11,370
sites

341
00:26:11,370 --> 00:26:14,879
so this could be potentially thousands
of subdomains and we only have to

342
00:26:14,880 --> 00:26:19,130
compromise just 12 compromise the
security of the base legit bank dot com

343
00:26:19,130 --> 00:26:23,360
and many people make up statistics but
we've actually looked into this we

344
00:26:23,360 --> 00:26:27,270
pulled the Alexa top ten thousand and we
pulled all of their cost them in files

345
00:26:27,270 --> 00:26:31,860
and the ones that had it we checked do
they do this subdomain while carding and

346
00:26:31,860 --> 00:26:37,729
we found after taking all of this data
that 75% of them do and that's scary to

347
00:26:37,730 --> 00:26:42,700
think about 75% of the Alexa top ten
thousand light-years across domains are

348
00:26:42,700 --> 00:26:46,790
exploiting this massive surface area and
we'll see how this comes back to bite us

349
00:26:46,790 --> 00:26:50,639
we combine it with other exploits

350
00:26:50,640 --> 00:26:53,900
attacker and you're looking at that cost
today and you said you know I want to be

351
00:26:53,900 --> 00:26:58,000
in this in this light lest I wanted
perform attack air so how would you do

352
00:26:58,000 --> 00:27:01,950
that the answer is with of course
separate so you can you separate to

353
00:27:01,950 --> 00:27:06,600
enumerate the subdomains up a third
party . commonly jabong.com you can find

354
00:27:06,600 --> 00:27:10,959
all of these endpoints and tried to get
your stuff on them and see if you have a

355
00:27:10,960 --> 00:27:14,290
malicious without any sub-domains
compromise the security of legit bank

356
00:27:14,290 --> 00:27:17,040
dot com

357
00:27:17,040 --> 00:27:21,879
so I talked to a hijacking Swiss what
does that mean so one example of a flash

358
00:27:21,880 --> 00:27:26,470
application that we found is a product
called flow player what is slow player

359
00:27:26,470 --> 00:27:30,480
it's a flash application that place
videos and it's got some unique

360
00:27:30,480 --> 00:27:34,500
functionality to it which allows you to
load plugins to kind of customized

361
00:27:34,500 --> 00:27:38,230
functionality the feeling of the player
so if you want to you know blend in with

362
00:27:38,230 --> 00:27:41,920
the rest of your site layout you can do
that by making flash plugins for the

363
00:27:41,920 --> 00:27:43,140
player

364
00:27:43,140 --> 00:27:49,780
unfortunately versions of Flash Player
blow this three part 2 date 16 version

365
00:27:49,780 --> 00:27:53,830
allows the loading of arbitrators with
from any domain and this incredibly

366
00:27:53,830 --> 00:27:57,179
problematic because what this allows us
to do his attackers embed this with our

367
00:27:57,180 --> 00:28:02,130
page specified arbitrate plugin and we
can load that into this within hijacked

368
00:28:02,130 --> 00:28:05,780
all the functionality of the player now
this is a bad deal because I talked

369
00:28:05,780 --> 00:28:08,899
about before this with his loading in
the context of whatever party that's

370
00:28:08,900 --> 00:28:13,440
hosting it so if the if the domain has
to sign their site they can go very very

371
00:28:13,440 --> 00:28:17,550
wrong she's just an example you embed
this with any page and you have to clear

372
00:28:17,550 --> 00:28:21,379
it with JavaScript like this he say I
have a plugin simple hello world I want

373
00:28:21,380 --> 00:28:27,220
to load this arbitration with from this
domain so close there at one point

374
00:28:27,220 --> 00:28:31,350
realize this is a really bad deal we to
fix this so they reached a new version 3

375
00:28:31,350 --> 00:28:35,449
that too that 18 and they added a bunch
of functionality to check all of these

376
00:28:35,450 --> 00:28:39,850
help plug in your own people providing
this player and the idea was to make

377
00:28:39,850 --> 00:28:43,530
sure they were either the same domain as
the player whether they were trusted so

378
00:28:43,530 --> 00:28:48,580
attackers can just willy-nilly hi jacket
so this code what it does is it parses

379
00:28:48,580 --> 00:28:54,060
the Euro of the parking and the problem
with that is when you party or else it's

380
00:28:54,060 --> 00:28:55,480
actually quite a hard thing to do

381
00:28:55,480 --> 00:28:58,980
many people think of it is trivial but
in fact that's not the case and we

382
00:28:58,980 --> 00:29:04,320
actually an interesting story that goes
with us

383
00:29:04,320 --> 00:29:10,750
so we're hiking this flute player I
found the code that was checking the

384
00:29:10,750 --> 00:29:22,700
origin of the plugin and tangled shaking
the code and I had dreamed I'd read this

385
00:29:22,700 --> 00:29:23,179
book

386
00:29:23,179 --> 00:29:29,750
tangled web and to live has a chapter
devoted to just how URLs are parsed and

387
00:29:29,750 --> 00:29:34,630
I'm like there is likely about care and
turn up on that one but multiple bucks

388
00:29:34,630 --> 00:29:38,980
so I thought no one issue and I was like
yeah this is this is a great bypass and

389
00:29:38,980 --> 00:29:43,889
so I send a link to the code over to my
friend here and I'm like a kid you find

390
00:29:43,889 --> 00:29:49,019
the bypassed and is he came back with
him like maybe 15 minutes and said like

391
00:29:49,019 --> 00:29:53,610
I found the bypass I'm like no that's
that's a new bypass that I did not find

392
00:29:53,610 --> 00:30:01,519
that one is different so the first
bypass right so I thought maybe bypasses

393
00:30:01,519 --> 00:30:05,220
how we're going to talk about three
today so this first bypassing if you

394
00:30:05,220 --> 00:30:08,559
look at this code you can probably see a
few issues with its this is the code

395
00:30:08,559 --> 00:30:12,649
that checks the plug in your all and
says you know is this a local to this

396
00:30:12,649 --> 00:30:17,209
user system if it is we can assume
that's trusted download it now there's a

397
00:30:17,210 --> 00:30:20,919
price if you here but we're going to
highlight this one and what this check

398
00:30:20,919 --> 00:30:25,990
does it says if the plugin euro if the
first character is a forward slash then

399
00:30:25,990 --> 00:30:30,309
we have a trusted its local this is of
course problematic because on the web

400
00:30:30,309 --> 00:30:34,500
you can do this you can do a double for
it / to denote this is a special type of

401
00:30:34,500 --> 00:30:39,600
your own how this works is whatever you
know it was it a hasty this place is to

402
00:30:39,600 --> 00:30:44,908
BS so kind of the pages you know
protocols using so we will just 24 it

403
00:30:44,909 --> 00:30:48,029
slashes we bypassed all the security
that they've added in this new version

404
00:30:48,029 --> 00:30:53,639
every load any arbitrary plugin that we
want to hijack this with the second

405
00:30:53,639 --> 00:30:55,429
check and this is one of some by my

406
00:30:55,430 --> 00:30:59,950
so this check here is it's trying to
find the beginning of the scheme and

407
00:30:59,950 --> 00:31:04,050
where the demand starts so the
vulnerabilities in this line here

408
00:31:04,050 --> 00:31:09,210
believes the beginning of the scheme is
34 it slashes so we can for this check

409
00:31:09,210 --> 00:31:14,510
by having our attacker dot-com domain
and then three-fourths lashes and then

410
00:31:14,510 --> 00:31:18,300
the target that we like to attack in
this case legit bank dot com dot dot /

411
00:31:18,300 --> 00:31:23,020
remove it in this case the code thinks
that attacker dot com is a part of the

412
00:31:23,020 --> 00:31:27,690
scheme and it doesn't take into
consideration that maybe maybe it's not

413
00:31:27,690 --> 00:31:35,370
so another bypass is more general
purpose so if there's an open redirect

414
00:31:35,370 --> 00:31:40,919
on the pit on your target then you could
use a nap in redirect to fool the origin

415
00:31:40,920 --> 00:31:45,420
check and to load in your sweat from a
remote host now open redirects are

416
00:31:45,420 --> 00:31:48,490
typically a low risk vulnerability and
in this case we're taking it slow

417
00:31:48,490 --> 00:31:56,500
risking their ability to something i
risk a fall by fast as we said before

418
00:31:56,500 --> 00:31:59,900
there are many more bypasses i'm sure if
you took some time and what's the code

419
00:31:59,900 --> 00:32:04,010
you can find some of your own while ago
talked about three today because there

420
00:32:04,010 --> 00:32:07,030
is a good number one other thing I'd
like to add we talked to flow player

421
00:32:07,030 --> 00:32:10,820
about this issue and they basically told
us well flashes dad and we're not fixing

422
00:32:10,820 --> 00:32:19,409
these issues have you ever see a fellow
players on engagement it's a problem

423
00:32:19,410 --> 00:32:23,230
so what does this mean for us as
attackers what this means is if anybody

424
00:32:23,230 --> 00:32:27,780
has any version of this post player on
this website we can hijack thats with

425
00:32:27,780 --> 00:32:32,710
him perform some very interesting attack
scenarios so what does that look like we

426
00:32:32,710 --> 00:32:36,270
have an example flow here as if we are
attacked or trying to attack are backed

427
00:32:36,270 --> 00:32:40,389
up and we have them looking into legit
back dot com so they're going to ensure

428
00:32:40,390 --> 00:32:45,080
finances go about their day and sometime
after they've locked in they navigate to

429
00:32:45,080 --> 00:32:49,830
our attacker page and once they do this
are Tiger page loads this with

430
00:32:49,830 --> 00:32:55,280
disponible flowplayer from legit bank
dot com and once we load this with we

431
00:32:55,280 --> 00:32:58,850
will then have it on our page and we use
that JavaScript to declare arbitrate

432
00:32:58,850 --> 00:33:02,639
plugin now what's great about this is
we've now hijacked all the functionality

433
00:33:02,640 --> 00:33:07,380
of the swim it's still executing in the
context of legit bank dot com so what

434
00:33:07,380 --> 00:33:11,860
can we do now we can go right back to
legit bank and you know users banking

435
00:33:11,860 --> 00:33:16,350
information we can send money to my
friend in Nigeria's in their account and

436
00:33:16,350 --> 00:33:20,919
we can do all this perfectly fine and
policy violation because this with still

437
00:33:20,920 --> 00:33:24,800
executing as if it was from the gym and
dot com and these are the kind of

438
00:33:24,800 --> 00:33:30,600
exploits that come about when you do
this with hijacking so we're going to

439
00:33:30,600 --> 00:33:38,260
have to hacking websites with Akamai's
edge tweets but what is it sweets so it

440
00:33:38,260 --> 00:33:42,760
is a server used in Akamai's content
delivery service and just part of the

441
00:33:42,760 --> 00:33:48,150
free flow system so the setup process
for this involves you'll take a

442
00:33:48,150 --> 00:33:51,720
subdomain are your domain and you'll
make a CNAME record in to Akamai's

443
00:33:51,720 --> 00:33:55,340
network so now when people had to stem
and i dont have your website you know

444
00:33:55,340 --> 00:34:00,100
they hit Akamai's network and their
network search the content and it

445
00:34:00,100 --> 00:34:03,469
supports you some nice things you know
he's your site loads faster to take

446
00:34:03,470 --> 00:34:06,730
their diverse network you know
geographically distributed across the

447
00:34:06,730 --> 00:34:11,990
world and so it looks like this in DNS
so we have a combined example.com that

448
00:34:11,989 --> 00:34:16,810
is seen him to example.com the edge
without that which is another scene a

449
00:34:16,810 --> 00:34:21,340
man to Akamai net and we have the IP
address of an active I server

450
00:34:21,340 --> 00:34:26,940
so why do people do this so we have an
example flow here which is a user who

451
00:34:26,940 --> 00:34:31,570
wants to HDMI jack at which is kinda my
view of Internet traffic at large

452
00:34:31,570 --> 00:34:36,550
you know they go off they go to
apple.com and asked them like this

453
00:34:36,550 --> 00:34:42,340
invention disabled go on to example.com
serving once a user is looking for a

454
00:34:42,340 --> 00:34:48,080
mature cacti have it overturned feline
Takamine and that will be returned back

455
00:34:48,080 --> 00:34:52,270
to the end-user you noticed this is kind
of what do they do this and the reason

456
00:34:52,270 --> 00:34:56,219
is next time if anybody comes along and
looking for the same image of a cat able

457
00:34:56,219 --> 00:35:00,419
to serve it back without asking so you
save all of these extra hits to your own

458
00:35:00,420 --> 00:35:04,400
service and save bandwidth and you know
you you get the speed that comes along

459
00:35:04,400 --> 00:35:10,640
with Akamai's network so I can i has a
unique piece of functionality

460
00:35:10,640 --> 00:35:14,759
Akamai resource locators they're often
abbreviated and documentation as air

461
00:35:14,760 --> 00:35:20,110
else and what are these are special
you're also Akamai used his way back in

462
00:35:20,110 --> 00:35:24,680
the day and how these work is there I
would like to mention first there is

463
00:35:24,680 --> 00:35:28,730
deprecated system they're not widely
used today but what they did is you can

464
00:35:28,730 --> 00:35:32,270
construct the special you are out at one
of Akamai's endpoints and you would

465
00:35:32,270 --> 00:35:36,840
specify a resource in it and then that
would go off grab that file and hosted

466
00:35:36,840 --> 00:35:41,240
on their network but despite this being
you know deprecated it's actually enable

467
00:35:41,240 --> 00:35:47,169
that many end points today as you were
going to show so how does this work we

468
00:35:47,170 --> 00:35:50,830
have an example swift here and we want
to load it onto Akamai's network they

469
00:35:50,830 --> 00:35:56,020
want to do this plz once so we construct
this year and you can see here we have

470
00:35:56,020 --> 00:36:00,640
an input of Akamai and we have a few for
it / is kinda Russell thing and we we

471
00:36:00,640 --> 00:36:04,830
pass different options to Akamai we say
you know what my client i defragment my

472
00:36:04,830 --> 00:36:08,630
Holland you should the thing bestowing
the content hasta should check back to

473
00:36:08,630 --> 00:36:12,480
see if anything's changed and you'll
notice we have this year oh and as well

474
00:36:12,480 --> 00:36:16,010
so remember mike mentioned in necessary
at this is kind of what you would see

475
00:36:16,010 --> 00:36:20,830
you would see an arbitrator all being
specified to a web page and you know

476
00:36:20,830 --> 00:36:23,759
they would go off and grab that content
and returned to you so this is kind of

477
00:36:23,760 --> 00:36:25,359
the same flow is necessary

478
00:36:25,359 --> 00:36:31,470
neighborhoods here so this process is
known as a conversation and it works as

479
00:36:31,470 --> 00:36:37,189
I described to you before you know he's
related to grab that from this from a

480
00:36:37,190 --> 00:36:41,839
server and returned to you on the web
page with visibly without you know I so

481
00:36:41,839 --> 00:36:47,558
if you point to example.com using free
flow to this track my service we get

482
00:36:47,559 --> 00:36:52,589
home storage tray files on your server
well not quite so we went about doing

483
00:36:52,589 --> 00:36:56,369
this we encourage some initial problems
one of these things is we have an

484
00:36:56,369 --> 00:37:00,269
example I can I am quite right here and
we talked about Google's robot that text

485
00:37:00,269 --> 00:37:04,519
file and kind of load it through this
site in a certain way and we do this we

486
00:37:04,519 --> 00:37:09,618
can access denied message so why are we
getting that is there some sort of white

487
00:37:09,619 --> 00:37:12,950
list that we have to be in you know how
can we get around this we want our

488
00:37:12,950 --> 00:37:16,930
content to be loved it and so the way we
went about this is we took to enumerate

489
00:37:16,930 --> 00:37:20,470
adding you know what sites are in this
white list of course how do we do this

490
00:37:20,470 --> 00:37:24,180
we took actually done that and we
started using separate to find all of

491
00:37:24,180 --> 00:37:28,569
the sudden things we can do with it and
we came up with this we came up with an

492
00:37:28,569 --> 00:37:36,058
actual site that was in this white list
this is a site that we found out

493
00:37:36,059 --> 00:37:41,619
I'm kind of feeling a realization of
what about to come so this is this a

494
00:37:41,619 --> 00:37:45,579
server and it hosts all the versions of
Flash Player for backwards compatibility

495
00:37:45,579 --> 00:37:50,739
including that three dot to dot 16
version which allows you to load any

496
00:37:50,739 --> 00:37:56,959
plugin you know from any arbitrary and
points so what does this mean for us so

497
00:37:56,959 --> 00:38:00,890
not only did they host all the versions
of Flash Player but now we can you use

498
00:38:00,890 --> 00:38:05,199
these errol's to force a swift to be
loaded on somebody's website and not

499
00:38:05,199 --> 00:38:08,439
just with a vulnerable switch so we can
you know

500
00:38:08,439 --> 00:38:14,219
checked attack aimed at acting together
here so here's an example arrow the one

501
00:38:14,219 --> 00:38:18,519
we have i dont legit bank dot com which
is mapped this free phone service and

502
00:38:18,519 --> 00:38:22,839
yeah we specify these for its size
prayers and we specify this with the

503
00:38:22,839 --> 00:38:28,089
street at 2216 fallible version of up
there and visit your web browser you

504
00:38:28,089 --> 00:38:31,170
just see this marvelous with being
hosted on this person's you know

505
00:38:31,170 --> 00:38:37,180
websites so what this means for us is if
they have any in endpoint that is using

506
00:38:37,180 --> 00:38:40,749
this free full service with easier also
enabled we can make them vulnerable

507
00:38:40,749 --> 00:38:45,589
we can actually introduced this way that
we can hijack into their environment so

508
00:38:45,589 --> 00:38:48,499
this is kind of a long slow we're gonna
bring it all together here and show you

509
00:38:48,499 --> 00:38:51,738
guys one example attacks near looks like
we have these are looking into legit

510
00:38:51,739 --> 00:38:56,239
dank dot com and after they do this to
navigate to our attacker page

511
00:38:56,239 --> 00:39:01,130
attacker page do they use the arrow that
I should you before to vote this with

512
00:39:01,130 --> 00:39:04,359
onto their page and a combined the
background it sees the special you're

513
00:39:04,359 --> 00:39:08,598
out how it goes out to mediate p.m. grab
the swift and returns it is at the site

514
00:39:08,599 --> 00:39:14,349
was hosting itself so once we've loaded
this with onto a page we can of course

515
00:39:14,349 --> 00:39:19,239
hi jackets and now this with his
executing in the context of this legit

516
00:39:19,239 --> 00:39:23,529
banks up demand in this case I can I dot
dot com and remember I told you guys

517
00:39:23,529 --> 00:39:28,439
about before with often do this you know
all subdomains mine are trusted get well

518
00:39:28,439 --> 00:39:34,170
cards with this turns into is we can use
this hijack swift as a bridge to talk to

519
00:39:34,170 --> 00:39:38,559
the chip and dot com and compromise
their security so now he's reluctant

520
00:39:38,559 --> 00:39:41,240
hero we can double their financial
information

521
00:39:41,240 --> 00:39:45,430
you know send money do whatever we want
unrestricted because we are trusted by

522
00:39:45,430 --> 00:39:49,080
this cost them in file

523
00:39:49,080 --> 00:39:52,910
talk a bit more about this I talked
about cost of my policies before let's

524
00:39:52,910 --> 00:39:57,040
see how this turns out so member I
talked before we had two entries but it

525
00:39:57,040 --> 00:40:02,910
exposes a massive attack surface so what
this means for us now is if any

526
00:40:02,910 --> 00:40:10,250
subdomain of these two domains points 21
vulnerable and points what this means is

527
00:40:10,250 --> 00:40:14,560
their entire security is compromised and
this brings in another something else

528
00:40:14,560 --> 00:40:21,230
that's quite interesting you don't even
have to be using this point you have

529
00:40:21,230 --> 00:40:27,340
never even heard about but she might be
trusting them pile policy and because of

530
00:40:27,340 --> 00:40:31,610
this all of your security is not
compromised so we see what happens when

531
00:40:31,610 --> 00:40:35,350
we do this wild wild card of trust we
expand our tax or so greatly we open

532
00:40:35,350 --> 00:40:41,660
ourselves up to attacks like this so you
know who made this mistake with this

533
00:40:41,660 --> 00:40:46,740
widespread that a lot of people you know
have these cross the main policies so

534
00:40:46,740 --> 00:40:49,729
one example they were gonna show and I
wouldn't want to point out to all the

535
00:40:49,730 --> 00:40:53,500
videos that show here have been patched
so you can go out and exploit them this

536
00:40:53,500 --> 00:40:58,810
is for Verizon Wireless so you know this
is the specifically the Verizon Wireless

537
00:40:58,810 --> 00:41:02,740
business site and what this has years we
have you know catherine is there perhaps

538
00:41:02,740 --> 00:41:06,459
a business owner who want to check on
his employees he said he goes and he

539
00:41:06,460 --> 00:41:10,430
logged into this for us and business
websites and you know he's kind of

540
00:41:10,430 --> 00:41:13,850
underwear that in the background what
rises doing as they have one of these

541
00:41:13,850 --> 00:41:17,509
costs may policies and what do they do
in that cost the main policy to do a

542
00:41:17,510 --> 00:41:22,100
wildcard of all such demands of Verizon
Verizon Business and so they have this

543
00:41:22,100 --> 00:41:27,049
massive surface area exposed so how
could that be problematic as it turns

544
00:41:27,050 --> 00:41:30,880
out one of those imports of course was
mapped to this photo black and I am

545
00:41:30,880 --> 00:41:36,180
points and now when they navigate to a
third party sites you can see that we

546
00:41:36,180 --> 00:41:39,950
can of course load that's where the end
points we can use that Swift to make

547
00:41:39,950 --> 00:41:43,689
requests to the Verizon website and its
example we're going to dump all the

548
00:41:43,690 --> 00:41:46,400
phone numbers of this person's account
we're gonna do about all this

549
00:41:46,400 --> 00:41:49,859
information for each device that they
have on their accounts and we can do any

550
00:41:49,859 --> 00:41:53,299
action as the currently logged in user
so they're completely under our control

551
00:41:53,300 --> 00:41:57,380
now and this is all because they did
made this mistake of doing this wild

552
00:41:57,380 --> 00:42:03,609
card of Christ do we have any no script
users in the crowd and don't lie to me

553
00:42:03,609 --> 00:42:10,750
because this is black cat alright so one
of the things that people don't realize

554
00:42:10,750 --> 00:42:14,130
but no script is it actually ships with
a very wide white lists are actually

555
00:42:14,130 --> 00:42:18,800
many entries that are automatically
allowed to bypass no script and it's not

556
00:42:18,800 --> 00:42:22,810
that many in its the same way as custom
index my policies so they have things

557
00:42:22,810 --> 00:42:27,460
like google.com and what that really
means is all subdomains google.com as

558
00:42:27,460 --> 00:42:28,350
well

559
00:42:28,350 --> 00:42:33,730
this comes back to bite us now we have
an example provide concept here which

560
00:42:33,730 --> 00:42:37,000
said the cat reservist trying out
NoScript you know they get it from the

561
00:42:37,000 --> 00:42:42,210
official website we're not going to make
any modifications and changes is a self

562
00:42:42,210 --> 00:42:46,570
install and of course when they do so
you can see now goes to work

563
00:42:46,570 --> 00:42:51,020
blocks of content as it should you know
we try to navigate to the Adobe Flash

564
00:42:51,020 --> 00:42:55,250
Player test site and it box no flash is
expected in all of this active content

565
00:42:55,250 --> 00:42:59,880
is forbidden from running this is
perfect this is what the is why it's so

566
00:42:59,880 --> 00:43:05,050
useful to people who want to be safe
from what exploits but we navigate to an

567
00:43:05,050 --> 00:43:08,920
end point that's not to Akamai that's
also on the waitlist we bypass all of no

568
00:43:08,920 --> 00:43:13,680
script so all the protection that you
recently had is completely gone so even

569
00:43:13,680 --> 00:43:16,520
if you had no script and you try to
prevent these exactly what you're

570
00:43:16,520 --> 00:43:19,609
talking about it doesn't matter because
we're actually already in your wireless

571
00:43:19,609 --> 00:43:25,740
and you already trust us if you haven't
done to whitelist when you plug in there

572
00:43:25,740 --> 00:43:30,490
are some other interesting bypasses the
supports us so its security policy is

573
00:43:30,490 --> 00:43:34,419
kind of a distinct this awesome way to
prevent you know inline script injection

574
00:43:34,420 --> 00:43:36,980
has been preached as you know what we
had this is going to solve a lot of

575
00:43:36,980 --> 00:43:38,700
security problems successfully

576
00:43:38,700 --> 00:43:43,368
hard to do but you know it's a taxing
health workforce by injecting anything

577
00:43:43,369 --> 00:43:46,859
to their page we're loading this with
onto our own page and then hijacked net

578
00:43:46,859 --> 00:43:52,080
there's no cspi my own page we're just
letting the resource into it so does not

579
00:43:52,080 --> 00:43:55,000
apply to us in this case we go
completely around all of that protection

580
00:43:55,000 --> 00:43:59,160
and additionally many people may say to
make the mistake of the white list in

581
00:43:59,160 --> 00:44:03,370
their CSP they say okay sources from you
know the CDN or this your Google API

582
00:44:03,370 --> 00:44:08,120
service are used they're all trusted we
can do that and of course that's

583
00:44:08,120 --> 00:44:11,060
problematic because we have a
vulnerability in the city and we can

584
00:44:11,060 --> 00:44:17,310
actually bypass all the protection so
I'm sure I hope I can have made a good

585
00:44:17,310 --> 00:44:20,990
impact on you guys you if you are using
I can kind of wanting to yourself and i

586
00:44:20,990 --> 00:44:24,100
can text you know this is very worrying
to be held on to make sure that I'm

587
00:44:24,100 --> 00:44:28,370
protected so in order to address is
fallibility they've actually worked with

588
00:44:28,370 --> 00:44:31,970
them and they've been very helpful I'm
sure all of you know what it's like to

589
00:44:31,970 --> 00:44:36,620
have the night help you but this is not
the case here they came out they want to

590
00:44:36,620 --> 00:44:37,560
know everything about it

591
00:44:37,560 --> 00:44:41,290
get things fixed as quickly as possible
so in fact you may actually already

592
00:44:41,290 --> 00:44:45,890
patched has been ruling out these
matches that have affected by it was

593
00:44:45,890 --> 00:44:49,980
ruled out this morning kind of so many
people are already fixed but not

594
00:44:49,980 --> 00:44:53,660
everyone not everyone can be fixed
because if they were to roll out a patch

595
00:44:53,660 --> 00:44:59,600
it may cause disruptions yes what mike
is referring to this if you actually do

596
00:44:59,600 --> 00:45:03,839
make use of their also kind of older
style you may have to have this

597
00:45:03,840 --> 00:45:07,500
functionality running and I can I does
have you know stuff in place to help you

598
00:45:07,500 --> 00:45:11,430
in that situation as well so if you if
you're incredibly worried you still want

599
00:45:11,430 --> 00:45:15,029
to go back to my their support agents
actually have a playbook that they can

600
00:45:15,030 --> 00:45:18,170
read through and so you know they've
actually going to reach out to you

601
00:45:18,170 --> 00:45:21,470
practically but if you want to wait so
you can call them at the support number

602
00:45:21,470 --> 00:45:27,890
they have on the site here or you can
email them at this sec carid.com Nokia

603
00:45:27,890 --> 00:45:31,940
public inquiries about this possibility
I say you know what I pack my ok explain

604
00:45:31,940 --> 00:45:36,510
more about this should have a statement
out today two guys and a public queries

605
00:45:36,510 --> 00:45:40,849
can be directed to rob morning and
that's his number and his email

606
00:45:40,849 --> 00:45:46,099
I can I would also like to make note
that if your security researcher like us

607
00:45:46,099 --> 00:45:50,539
on our ability in their platform or any
part of their service they do once you

608
00:45:50,539 --> 00:45:52,950
reach out they really want people to
help them out there I could turn you

609
00:45:52,950 --> 00:45:55,989
away if you want to go to there actually
want to work with you and get this fixed

610
00:45:55,989 --> 00:46:00,690
so if you do get them up that security
Akamai dot com they have a PGP key and

611
00:46:00,690 --> 00:46:03,569
their website if you want to make sure
that you're talking to the people in

612
00:46:03,569 --> 00:46:07,680
your kitchen is secure and they would
also let you guys know if they're hiring

613
00:46:07,680 --> 00:46:12,739
folks in security as well and you can
see that link right there for that so

614
00:46:12,739 --> 00:46:16,979
thank you all so much you know about
penetration tester my case

