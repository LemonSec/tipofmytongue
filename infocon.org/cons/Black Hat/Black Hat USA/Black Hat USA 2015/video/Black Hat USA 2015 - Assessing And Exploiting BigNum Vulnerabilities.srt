1
00:00:00,000 --> 00:00:06,810
hello everyone I'm sorry I might be
somewhat sleepy as corrupt so if there

2
00:00:06,810 --> 00:00:14,759
are any mistakes I make well I'm
speaking please excuse them so I have to

3
00:00:14,759 --> 00:00:20,630
give a parental advisory because I don't
want people to spend on trying to find

4
00:00:20,630 --> 00:00:30,720
that this is a very sparse closing costs
of bugs they will take a very long time

5
00:00:30,720 --> 00:00:38,309
finding exploitable Berberian sylvie's
my current impression however this is

6
00:00:38,309 --> 00:00:42,870
also researching progress so it might be
that some of you have beautiful ideas

7
00:00:42,870 --> 00:00:47,828
for how do these things better and then
this may change I don't think however

8
00:00:47,829 --> 00:00:53,329
that the number of bugs you will
increase dramatically not use after

9
00:00:53,329 --> 00:00:58,670
freezing air and I were talking about it
so let me give you an outline of the

10
00:00:58,670 --> 00:01:04,869
talk I'll start with a moderation then
I'll talk about historical books

11
00:01:04,869 --> 00:01:12,780
decrypt champion openness in the
abstract of the talk I mentioned that I

12
00:01:12,780 --> 00:01:17,890
would talk about with Tom Cruise Tom at
as well I looked into that for a brew on

13
00:01:17,890 --> 00:01:23,600
time there is one known bug in the last
ten years and haven't been able to find

14
00:01:23,600 --> 00:01:29,939
any other bugs in there that are
exploitable so I have dropped out from

15
00:01:29,939 --> 00:01:36,979
here and instead replaces it with the
report was not in the abstract but which

16
00:01:36,979 --> 00:01:45,158
is also why I will talk about a recent
patch in January of this year

17
00:01:45,159 --> 00:01:51,409
fuckin openness as well as a case study
to motivate the General Counsel bugs and

18
00:01:51,409 --> 00:01:57,009
to also give an example of a very common
but pattern I have chosen this

19
00:01:57,009 --> 00:02:02,490
particular book because its recent but
also because it is easier to understand

20
00:02:02,490 --> 00:02:05,580
than others

21
00:02:05,580 --> 00:02:10,440
I will talk about Facebook hunting this
expression of myself

22
00:02:10,440 --> 00:02:16,050
you'll see what is later I wish there
was a better expression for it and I

23
00:02:16,050 --> 00:02:20,320
will talk about design verification
tools to find bugs and that will come to

24
00:02:20,320 --> 00:02:26,989
the conclusions so the motivation
obviously is over maybe to break trip to

25
00:02:26,990 --> 00:02:31,500
the other motivation could be that you
want to make a trip to libraries better

26
00:02:31,500 --> 00:02:41,290
and proof that they're cracked at the
moment my motivations so what motivated

27
00:02:41,290 --> 00:02:49,420
me to look into this was there was a
paper by a couple of years ago that

28
00:02:49,420 --> 00:03:00,290
looked into bug attacks this basically
problems in particular that need to

29
00:03:00,290 --> 00:03:08,320
miscalculations and so this is a very
very similar issue but the problem with

30
00:03:08,320 --> 00:03:16,320
this paper was that all the examples are
given him the paper hypothetical so the

31
00:03:16,320 --> 00:03:22,100
only bug that is mention there's not
hypothetical but that doesn't apply to

32
00:03:22,100 --> 00:03:32,780
the examples that they give so bug
attacks are related to 242 tax which are

33
00:03:32,780 --> 00:03:37,480
basically we have like a hundred
implementation cryptography you can try

34
00:03:37,480 --> 00:03:44,109
to reduce false in the competition by
for use outside sources for instance

35
00:03:44,110 --> 00:03:49,590
using cheat by using spikes voltage but

36
00:03:49,590 --> 00:03:57,370
bug attacks use for his input triggers
to trigger faulty computations so what

37
00:03:57,370 --> 00:04:04,440
that means is there are certain inputs
400 implementation is incorrect and

38
00:04:04,440 --> 00:04:15,400
gives incorrect output so I decided to
work around and look at the bugs that

39
00:04:15,400 --> 00:04:24,220
has been found and patched in the last
decade and see to see what you can do

40
00:04:24,220 --> 00:04:30,550
with them and whether they were
exploited and as I mentioned before the

41
00:04:30,550 --> 00:04:38,979
i mean about this for a while but like
the square but that was basically in the

42
00:04:38,979 --> 00:04:43,780
advisory in January this year was a
trigger for me to look into that again

43
00:04:43,780 --> 00:04:45,900
and look into it more seriously

44
00:04:45,900 --> 00:04:53,729
the other thing is this is like an open
problem at the moment but attacks have

45
00:04:53,729 --> 00:04:58,729
also been investigated for the
literature of private keys however you

46
00:04:58,729 --> 00:05:06,700
can use both bug attacks and also to
create signature verification bypasses

47
00:05:06,700 --> 00:05:19,590
and an easy homered for you an easy
example for you look at this and think

48
00:05:19,590 --> 00:05:23,880
about what happens if the model inverse
routine is incorrect

49
00:05:23,880 --> 00:05:33,260
magically returns 0 for one of the two
inputs as one in that case I'm breezy

50
00:05:33,260 --> 00:05:40,110
signature verification bypass and
actually given the limitations it's not

51
00:05:40,110 --> 00:05:45,470
unlikely that these fucks exists I tried
looking for them but as you'll see later

52
00:05:45,470 --> 00:05:50,750
that rules clearly are not in shape to
prove that the taxes

53
00:05:50,750 --> 00:05:56,330
Alyssa for the widely used
implementations

54
00:05:56,330 --> 00:06:01,409
what is a big maybe just came in here
and you don't even know what the guy in

55
00:06:01,410 --> 00:06:05,230
front he was talking about but now
implementations are fundamental

56
00:06:05,230 --> 00:06:10,230
ingredients for real-world isometric rip
them I'm trying to be specific here

57
00:06:10,230 --> 00:06:20,000
because I mean there are a lot of space
programs as well there are two

58
00:06:20,000 --> 00:06:24,600
liberation has shrunk since they don't
they are asymmetric algorithms that

59
00:06:24,600 --> 00:06:33,540
dinner juice but most of the white lines
crypto so are they did most of it is

60
00:06:33,540 --> 00:06:46,230
that there is based on computing with
large numbers so what

61
00:06:46,230 --> 00:06:50,730
and implementation for computing with
large numbers has to provide is

62
00:06:50,730 --> 00:06:58,930
operations on the introduced or reduce
marginal introduced in prime fields for

63
00:06:58,930 --> 00:07:06,040
addition multiplication subtraction
division and exponentiation and things

64
00:07:06,040 --> 00:07:17,440
like the city and others so he once
challenged the bus usually prime field

65
00:07:17,440 --> 00:07:22,480
or the residue clustering so sometimes

66
00:07:22,480 --> 00:07:27,550
you have specialized implementations for
instance big numbers of the fixed size

67
00:07:27,550 --> 00:07:34,780
so they can specialize in plantations
4024 bills or 2048 bit sometimes 512

68
00:07:34,780 --> 00:07:38,179
like this it's common than you have

69
00:07:38,180 --> 00:07:43,610
assembly implementations highly
specialized and people like they try to

70
00:07:43,610 --> 00:07:52,140
squeeze the last one percent out of this
process that now supports ATX to and

71
00:07:52,140 --> 00:07:57,979
guarding against side channel attacks
you also need constant I'm implantations

72
00:07:57,980 --> 00:08:04,850
so this introduce additional complexity
so usually like that he now if we

73
00:08:04,850 --> 00:08:10,820
implement things will lead to
complications that not constant time so

74
00:08:10,820 --> 00:08:16,320
that means that conditions in the code
that will cause your coach to run for

75
00:08:16,320 --> 00:08:22,650
instance with a different timing for a
regime that can channel or more recently

76
00:08:22,650 --> 00:08:27,049
people have been using cash time your
side channels or have tried to evict

77
00:08:27,050 --> 00:08:34,110
cache lines and now been recent attacks
against the predominant implementations

78
00:08:34,110 --> 00:08:38,710
for that but these like this

79
00:08:38,710 --> 00:08:46,480
medications that you put in there make
the code more complex and they were more

80
00:08:46,480 --> 00:08:53,050
opportunities for an attacker to make
use of bugs in the basic functionality

81
00:08:53,050 --> 00:08:56,550
and also like in the in the in the

82
00:08:56,550 --> 00:09:06,459
more complex algorithms so what are
widely so obviously open else is

83
00:09:06,459 --> 00:09:11,579
probably the most widely used one then
decrypt which is a fork of gym he

84
00:09:11,580 --> 00:09:22,170
appeared only for two but then we have
GMP which most people don't realize that

85
00:09:22,170 --> 00:09:29,819
it's a problem if it has box but that is
exposed in a lot of there are a lot of

86
00:09:29,820 --> 00:09:35,470
scripting languages findings for
champion people actually writes like

87
00:09:35,470 --> 00:09:42,870
home-grown though using those bindings
and there's

88
00:09:42,870 --> 00:09:53,209
which is just because of its very
permissive license so it's in the public

89
00:09:53,209 --> 00:10:02,140
domain so it is used by a drop there for
instance which the US which has a lot of

90
00:10:02,140 --> 00:10:10,819
stuff and it's wpasupplicant then we
have a Mets tell us which wasn't really

91
00:10:10,820 --> 00:10:15,940
until I realized that it's actually pull
us also what happened there is that

92
00:10:15,940 --> 00:10:25,550
whole asl was bought by armed recently
and since then more optimized

93
00:10:25,550 --> 00:10:31,510
implementations for ARM chip sets are
going into that library as well then we

94
00:10:31,510 --> 00:10:32,300
have

95
00:10:32,300 --> 00:10:38,530
the jammer the canonical job between to
implementation that has changed a couple

96
00:10:38,530 --> 00:10:47,209
of times in the last decade but it's
it's pretty stable now usually when Java

97
00:10:47,210 --> 00:10:53,240
was written this was like native code as
well that was exposed through JNI and

98
00:10:53,240 --> 00:11:03,400
then they transform that into a few job
implementation so part of that is that

99
00:11:03,400 --> 00:11:11,040
we have closed source implementation of
those that deal ever tried to figure out

100
00:11:11,040 --> 00:11:21,939
what the hell that competition for your
four years I S handshake is going on

101
00:11:21,940 --> 00:11:26,830
that's we have to look there are
actually keeps of other ones like other

102
00:11:26,830 --> 00:11:43,400
related to those that I care about on
Thurs lip court ripped up for it this is

103
00:11:43,400 --> 00:11:58,329
both an antivirus and those look at as
well very easy to read

104
00:11:58,330 --> 00:12:05,560
assembly so it's not really that
optimize and embedded devices many many

105
00:12:05,560 --> 00:12:11,920
others that are homegrown and they are
great and they recruit on ground for

106
00:12:11,920 --> 00:12:24,829
finding bugs because I mention that
there exists bindings for Jim P so

107
00:12:24,830 --> 00:12:32,160
you'll have the roomie big guns are
physically

108
00:12:32,160 --> 00:12:38,319
Jeff from the Pike River package which
is one of the more popular ones that

109
00:12:38,319 --> 00:12:48,099
binds gym and then like many people like
to home rule in Haskell the integer type

110
00:12:48,100 --> 00:12:54,860
is the standard injured hype is
introduced jean-pierre verges so you can

111
00:12:54,860 --> 00:13:03,050
swap out the position has almost
everyone is as simple as well which is

112
00:13:03,050 --> 00:13:08,500
sure high school from what I remember
but this is the default one and your

113
00:13:08,500 --> 00:13:20,019
counsel the earth package is the default
were admitted he stays

114
00:13:20,019 --> 00:13:27,790
ok so let's have a look at the CVS for
that we need to understand how how to

115
00:13:27,790 --> 00:13:31,349
square numbers to go back to high school

116
00:13:31,350 --> 00:13:39,860
to to see what's going on there so why
do politicians have dedicated or Tues or

117
00:13:39,860 --> 00:13:47,579
Wed of just using the multiplication
because they can do that slightly more

118
00:13:47,579 --> 00:13:55,019
efficient depending on the number of
solipsism number of return this year

119
00:13:55,019 --> 00:14:04,740
it's the terminology libraries for the
individual words so let's say we have a

120
00:14:04,740 --> 00:14:15,329
BB gun that just consists of two limbs a
and B so is the easiest to lower and the

121
00:14:15,329 --> 00:14:17,199
word with undersea

122
00:14:17,199 --> 00:14:31,160
so if we go back to high school and we
just split this into to look at or

123
00:14:31,160 --> 00:14:37,630
depart early then returned one of the
terms

124
00:14:37,630 --> 00:14:41,070
Rican square

125
00:14:41,070 --> 00:14:49,990
higher individual returns square the
Lowell individually and then returned

126
00:14:49,990 --> 00:15:01,230
just eight homes being shipped that one
upwards and so we have three occasions I

127
00:15:01,230 --> 00:15:05,230
mean the ship for free basically
compared to the most location for free

128
00:15:05,230 --> 00:15:13,190
applications here instead of work and I
mean do many other optimizations that

129
00:15:13,190 --> 00:15:17,140
you can do for your big guns but this is
just like we're just trying to get to

130
00:15:17,140 --> 00:15:23,640
the basics here and that's why this is a
very nice blog as well so when you look

131
00:15:23,640 --> 00:15:29,439
at the diff like where this where they
were the baggage that particular bug in

132
00:15:29,440 --> 00:15:37,620
being square happened this is the
happens in the assembly implementations

133
00:15:37,620 --> 00:15:42,680
but before they wrote the assembly they
had seen implementation and is

134
00:15:42,680 --> 00:15:47,410
equivalent and I probably easier to to
show this with the first implementation

135
00:15:47,410 --> 00:15:55,959
here it's the same bike so what happens
is like to see here in the high and the

136
00:15:55,960 --> 00:16:04,390
low limp and this this macro as opposed
to basically come shoot two times the

137
00:16:04,390 --> 00:16:09,830
middle term of what we saw on the last
slide right in this two times to the end

138
00:16:09,830 --> 00:16:16,720
times eight times we have a macro for
that that does the multiplication and

139
00:16:16,720 --> 00:16:26,880
addition to a three-year low import you
can tell me rather bogus bogus here so

140
00:16:26,880 --> 00:16:36,650
what happens is that when they tried to
to do the propagation they do the carry

141
00:16:36,650 --> 00:16:48,870
propagation the wrong way and they drop
the cherry Jul before here so they have

142
00:16:48,870 --> 00:16:54,610
this temporary variable that they that
they double but they just ignore that

143
00:16:54,610 --> 00:17:07,579
the temporary variable might be larger
than mine is one and this is a bug that

144
00:17:07,579 --> 00:17:15,069
was present in the opener for ten years
and it's the same mistake that was made

145
00:17:15,069 --> 00:17:24,859
both in the midst and in the x86 64
assembly implementation however the

146
00:17:24,859 --> 00:17:30,379
trigger probably for this so the the
fact the probability that you will get

147
00:17:30,380 --> 00:17:36,780
this with a random include the slow so
he will only hit this with my 64 to the

148
00:17:36,780 --> 00:17:46,610
maze 128 right so that's the main you
might also try to fit in and depending

149
00:17:46,610 --> 00:17:50,379
on the algorithm you can do that

150
00:17:50,380 --> 00:17:58,970
of this bug was the probability of this
is low and most most platforms are as if

151
00:17:58,970 --> 00:18:10,090
all the different compounds for
platforms for you build up muscle

152
00:18:10,090 --> 00:18:21,550
without medicine without so so you can
also get the bug if you turn off

153
00:18:21,550 --> 00:18:30,879
assembly support and and are on a 64 bit
platform and in that case the argument

154
00:18:30,880 --> 00:18:36,410
is that they have in the crib is what
the attacks or is it because they have a

155
00:18:36,410 --> 00:18:43,780
blinding and ours a blinding means that
you really have like basically a random

156
00:18:43,780 --> 00:18:49,180
number because if you can guess the the
blinding factor already in a different

157
00:18:49,180 --> 00:18:57,150
problem or you cannot make the
Associated triggers the park with high

158
00:18:57,150 --> 00:19:11,290
probability that is broken or the budget
is not available for you so the three

159
00:19:11,290 --> 00:19:18,430
different packwood path sent to help
nope I did the same thing unfortunately

160
00:19:18,430 --> 00:19:30,740
they are right in this is a fact that so
in the current version that was fixed at

161
00:19:30,740 --> 00:19:38,890
one point 2016 and changes the version
the previous that had the bug still so

162
00:19:38,890 --> 00:19:46,130
the argument is that it's only

163
00:19:46,130 --> 00:19:52,300
the only effective this would be in the
point validation routine so the point

164
00:19:52,300 --> 00:20:02,879
foundation routine uses the be squared
three and struck to prove a point that

165
00:20:02,880 --> 00:20:06,120
is not under curve and that's a bad
because you might be able to

166
00:20:06,120 --> 00:20:11,360
constructive proof that is of low order
and then you can do all kinds of attacks

167
00:20:11,360 --> 00:20:19,379
but it's not known how to construct this
off . curve that the moment and all of

168
00:20:19,380 --> 00:20:29,810
those things however the coming toward
him into this is that the impact

169
00:20:29,810 --> 00:20:37,149
assessment is only correct as long as
you open the routines with openness and

170
00:20:37,150 --> 00:20:40,230
moreover it's all a crack for 101 J

171
00:20:40,230 --> 00:20:45,640
but incorrect for instance 4101 he was
listed 10 2013 because they didn't have

172
00:20:45,640 --> 00:20:52,820
the optimized implementations at the
point so they they now have optimized

173
00:20:52,820 --> 00:20:57,710
implementations for elliptic curve
cryptography that do not use the beans

174
00:20:57,710 --> 00:21:09,960
and back then they still use that answer
have a different path and in that case

175
00:21:09,960 --> 00:21:17,230
I'm pretty sure tried to take part of
the talk because I was told that might

176
00:21:17,230 --> 00:21:23,190
be too technical for years but this will
be in the white paper there is related

177
00:21:23,190 --> 00:21:28,790
tack that most likely jurors over to
this

178
00:21:28,790 --> 00:21:35,389
and damage before it's not correct for
the use of Albion returns with

179
00:21:35,390 --> 00:21:44,200
third-party crypto for instance if you
look at and they use open and they have

180
00:21:44,200 --> 00:21:54,530
a spa Newcastle on top of that and in
that case the arguments your

181
00:21:54,530 --> 00:22:00,180
that was open as well trying to gather
I'm trying to go through the invitations

182
00:22:00,180 --> 00:22:04,650
first to gather some bucks so that we
can see what the company would have to

183
00:22:04,650 --> 00:22:16,750
look at the case so the sacrament
implementation will look at his gym P

184
00:22:16,750 --> 00:22:24,370
and the older ones from 2012 that has
the interesting bugs fixes so there are

185
00:22:24,370 --> 00:22:28,219
three different Chinese here I don't
care too much about the power pc's

186
00:22:28,220 --> 00:22:41,370
interesting moments like these days the
first bike is again something like it

187
00:22:41,370 --> 00:22:47,919
just says two bucks in that caused in
competition with extremely low

188
00:22:47,920 --> 00:22:56,810
probability assessment and two bucks
into CD which will likely that which is

189
00:22:56,810 --> 00:23:03,610
a very interesting wording for something
where are you

190
00:23:03,610 --> 00:23:12,850
numbers so as I mentioned before they're
not just optimizations that you can do

191
00:23:12,850 --> 00:23:19,899
in terms of like like targeting hardware
features but you can also be like out

192
00:23:19,900 --> 00:23:24,290
with rich improvements

193
00:23:24,290 --> 00:23:33,220
so different for different become sizes
and the reason for that is that for

194
00:23:33,220 --> 00:23:37,770
larger numbers there are other reasons
that are asymptotically faster so that

195
00:23:37,770 --> 00:23:54,000
means that when square I really have
time to log in and share is in one of

196
00:23:54,000 --> 00:24:06,480
the the middle ones in this is open to
the one point for 65 in terms of

197
00:24:06,480 --> 00:24:10,330
complexity to the constant here is much
larger that's why they have like a

198
00:24:10,330 --> 00:24:19,490
cut-off point only after only a few big
engine that are bigger than 1,400

199
00:24:19,490 --> 00:24:30,540
something bits we then this will be this
will be used and slightly more

200
00:24:30,540 --> 00:24:38,649
complicated than the one that we saw in
the opener and slightly more complicated

201
00:24:38,650 --> 00:24:52,000
and interpolation and the bugs in the
interpolation fades face and the trigger

202
00:24:52,000 --> 00:25:02,820
basically happens to the interpolation
algorithm and repair patch

203
00:25:02,820 --> 00:25:09,639
the provides just like all things is
this

204
00:25:09,639 --> 00:25:18,620
in both cases these things that are
catching the interpolation and when you

205
00:25:18,620 --> 00:25:23,719
look at the genius here so this

206
00:25:23,720 --> 00:25:30,309
decrement markers action assembly
instruction x86 and we're busy just does

207
00:25:30,309 --> 00:25:40,440
is it it does a subtraction without any
carrier board without any moral and the

208
00:25:40,440 --> 00:25:49,470
fixes to not use this area less the
proper become routine the champion some

209
00:25:49,470 --> 00:25:55,259
and Soyoung received at Scopus
propagation

210
00:25:55,259 --> 00:26:01,879
be operated on the scene limits set of a
hole big enough and it turns out that

211
00:26:01,879 --> 00:26:10,620
this is a very very common pattern so
it's not just in June people is also

212
00:26:10,620 --> 00:26:19,918
also been observed in in 225 519
implications of this is like a group

213
00:26:19,919 --> 00:26:29,730
that was proposed by Dan Bernstein and
there's like Nicholas not just like the

214
00:26:29,730 --> 00:26:38,580
same thing differently that's equipped
library which uses the skirt and this

215
00:26:38,580 --> 00:26:47,639
had at some point also a person and the
same one street back on their blog posts

216
00:26:47,639 --> 00:26:55,959
about both of these and I mentioned
before the square in the old OpenSSL

217
00:26:55,960 --> 00:27:20,690
implementations that's one example of an
exploit that i've been talking about big

218
00:27:20,690 --> 00:27:26,620
numbers like the other types of
derivatives in principle would you do in

219
00:27:26,620 --> 00:27:33,168
their group of operations that some
people talk about arithmetic there is so

220
00:27:33,169 --> 00:27:50,139
and this is something that was open as a
972 fixed I think it was why so this was

221
00:27:50,139 --> 00:28:00,649
in 2011 the bug bug report a couple of
years prior by someone from avoidance

222
00:28:00,649 --> 00:28:04,719
watts and nobody had expected that this
would be exploitable and then there were

223
00:28:04,720 --> 00:28:15,730
people from academia in 2011 and found a
way to exploit that this basic is the

224
00:28:15,730 --> 00:28:24,570
first instance of office after a bug in
arithmetic implementation and that I'm

225
00:28:24,570 --> 00:28:30,320
aware of that was turned into an actual
exploit that was in this case able to

226
00:28:30,320 --> 00:28:40,220
recover the the private key foreign
exchange so this is somewhat limited

227
00:28:40,220 --> 00:28:47,289
because like the same she over and over
with different participants or

228
00:28:47,289 --> 00:28:49,230
indifferent runs of the protocol

229
00:28:49,230 --> 00:28:54,360
like for instance do something very much
cure Buckner

230
00:28:54,360 --> 00:29:02,668
one of the reasons why looked at these
bugs is open open a salon and that was

231
00:29:02,669 --> 00:29:04,220
disinvited haitian

232
00:29:04,220 --> 00:29:09,190
want to see between scenes like this
would not be exploitable

233
00:29:09,190 --> 00:29:17,000
open as is because they use a different
you generally do different point point

234
00:29:17,000 --> 00:29:17,650
each time

235
00:29:17,650 --> 00:29:25,419
ok so now we've talked about the
carapace propagation bugs now we want to

236
00:29:25,419 --> 00:29:32,340
talk about another I think this is
unique slope snowflake haven't seen

237
00:29:32,340 --> 00:29:39,010
propagation but is like it but class
like many of these but this is like this

238
00:29:39,010 --> 00:29:42,370
got me scratching my head for a while

239
00:29:42,370 --> 00:29:52,330
this committee in May 2014 by then
across the author of sleep and we'd like

240
00:29:52,330 --> 00:29:59,780
to fix the cellmark sitting spruce boots
with NPR said bit and this is also a bug

241
00:29:59,780 --> 00:30:09,000
that was for the library for a long time
and apparently they had to trigger a

242
00:30:09,000 --> 00:30:14,140
number of times and it was not realized
that this was the underlying bug so this

243
00:30:14,140 --> 00:30:26,159
bugs so there were some things that were
not able to deduct and the reason for

244
00:30:26,159 --> 00:30:34,419
that is that it is only triggered in
1622 different memory allocation which

245
00:30:34,419 --> 00:30:41,059
does not make sense to me because our
system allocated so it is more likely

246
00:30:41,059 --> 00:30:48,559
that they may be a different breed of
gypsy or two different architecture

247
00:30:48,559 --> 00:30:59,830
there and so the the clock and you look
at the code it's hard to believe what's

248
00:30:59,830 --> 00:31:08,290
going on there so they they have a
routine for sending bits

249
00:31:08,290 --> 00:31:17,330
become worried and the allergy the
bigger but they don't know certain

250
00:31:17,330 --> 00:31:28,350
circumstances what that means is that
you can data from regions of memory

251
00:31:28,350 --> 00:31:35,159
using them but you can also force its
true values

252
00:31:35,160 --> 00:31:48,560
somebody used to patch with mutual ass
then like if somebody that's fine but

253
00:31:48,560 --> 00:31:55,710
the exact impact their depends on the
alligator and this is not completely

254
00:31:55,710 --> 00:32:01,240
understood by me because they claim this
budget has an effect on the library and

255
00:32:01,240 --> 00:32:06,730
I the only way I see how this could have
an effect on the only where we're seeing

256
00:32:06,730 --> 00:32:15,840
this regime being used is a generation
for the valujet which is a very very

257
00:32:15,840 --> 00:32:22,290
sensitive area this is something you
don't like screw up and the the the the

258
00:32:22,290 --> 00:32:27,000
commentaries even more interesting make
sure that we have the requisite number

259
00:32:27,000 --> 00:32:31,450
of bits this code looks a bit funny but
it's easy to understand if you consider

260
00:32:31,450 --> 00:32:35,260
that MPI said hi move clears all hybrids
which is not the case

261
00:32:35,260 --> 00:32:41,350
like to put that in there and then
individuals like this said it included

262
00:32:41,350 --> 00:32:48,740
engines make sure it has the right size
but an exploitable because it has the

263
00:32:48,740 --> 00:32:55,560
right size because they would come to
the right size already I don't see how

264
00:32:55,560 --> 00:33:02,010
this can happen so more eyes are needed
here I don't like the claim is that this

265
00:33:02,010 --> 00:33:06,370
has been observed in practice in this
this blog has been triggered that but

266
00:33:06,370 --> 00:33:07,639
besides this is all

267
00:33:07,640 --> 00:33:11,120
brother prime generation routine and in
periods it's it's not I don't see how

268
00:33:11,120 --> 00:33:17,570
that would happen this is the only place
I could have an impact

269
00:33:17,570 --> 00:33:29,510
ok units not seen that kind of thing in
other nations but if you have that

270
00:33:29,510 --> 00:33:36,200
that's very interesting but now from the
app makes up the order of slide it's

271
00:33:36,200 --> 00:33:49,320
with talk about these bugs and how they
have been randomly found by other people

272
00:33:49,320 --> 00:33:54,600
now we'll talk about whether they're
million worth systematic approaches to

273
00:33:54,600 --> 00:34:00,320
finding them and one approach that
constrained symbolic execution so that's

274
00:34:00,320 --> 00:34:03,929
something that was proposed by promised
an angler

275
00:34:03,930 --> 00:34:14,090
Dawson is one of the more well-known
think the the most well-known people for

276
00:34:14,090 --> 00:34:22,110
this type of work in the academic
community and basically what they

277
00:34:22,110 --> 00:34:29,669
proposed in this paper from 2011 was
that you can use symbolic execution so

278
00:34:29,668 --> 00:34:38,279
given that you have different
implementations of the same routine you

279
00:34:38,280 --> 00:34:50,149
can use symbolic execution to prove that
they or their all tracked

280
00:34:50,149 --> 00:35:00,390
and on the other hand if you're symbolic
execution engine shows that you have you

281
00:35:00,390 --> 00:35:05,270
automatically get a test case for
triggering the behavior such figure out

282
00:35:05,270 --> 00:35:11,420
which ones the correct implementation
but I mean that's that's that's easy I

283
00:35:11,420 --> 00:35:15,430
know how to calculate that we've been
doing that for a couple thousand numbers

284
00:35:15,430 --> 00:35:23,609
went along but I can figure out which
one is the right so the the true that

285
00:35:23,609 --> 00:35:29,130
they built is not publicly available but
for our needs the approaches easily

286
00:35:29,130 --> 00:35:35,869
reproduce so please open source and
execution engine that can be used for

287
00:35:35,869 --> 00:35:42,200
this obviously not gonna like to not do
not compile all of OpenSSL men just

288
00:35:42,200 --> 00:35:50,419
dunno run against that my tax so you
will have to need like individual

289
00:35:50,420 --> 00:36:01,059
functions that you write and to take
their foreign victims as a national

290
00:36:01,059 --> 00:36:04,349
budget can also take different
implementations just have to make sure

291
00:36:04,349 --> 00:36:11,329
that you writes basically routines thats
canonical representations in memory

292
00:36:11,329 --> 00:36:20,579
otherwise you can obviously but there
are some challenges as I said like a lot

293
00:36:20,579 --> 00:36:27,910
of widely used and Conditions of Use
Somebody code and that assembly could

294
00:36:27,910 --> 00:36:33,029
you want to do that needs to be accurate
lifted because likely is based on the

295
00:36:33,029 --> 00:36:41,829
symbolically executing code so in other
projects we just such a tool selected

296
00:36:41,829 --> 00:36:46,940
company based out of San Francisco's
both something for that drill bits out

297
00:36:46,940 --> 00:36:55,230
of new york also build something for the
462 that public and

298
00:36:55,230 --> 00:37:01,810
elected a multi-part lifted upwards from
four different architectures but one

299
00:37:01,810 --> 00:37:06,640
thing that you have to be reminders that
the lifting will need to support for

300
00:37:06,640 --> 00:37:11,970
instruction extensions well and this has
to be like has to be accurate supports I

301
00:37:11,970 --> 00:37:18,350
mean if you screw up there then find
bugs not exist there was a lot of books

302
00:37:18,350 --> 00:37:31,029
and because I miss mixed up here the
other option that appeared while I was

303
00:37:31,030 --> 00:37:42,330
like to have submitted my talk is
there's a company out of which part of

304
00:37:42,330 --> 00:37:47,910
the chicago is basically a company that
has been doing contract research and

305
00:37:47,910 --> 00:37:54,600
development for the NSA and they develop
the specific language crippled couple of

306
00:37:54,600 --> 00:38:02,839
years ago for specifying cryptographic
algorithms and then practice and

307
00:38:02,840 --> 00:38:09,270
software analysis workers very
interesting thing that that appeared

308
00:38:09,270 --> 00:38:14,200
think like three months or so and this
is a tool that allows program analysis

309
00:38:14,200 --> 00:38:24,750
an album and Java bytecode and it allows
cross language across implementations in

310
00:38:24,750 --> 00:38:27,750
C or C++ compiler LVM

311
00:38:27,750 --> 00:38:31,500
you can have like Jabba

312
00:38:31,500 --> 00:38:35,850
should try to show that they planned
this also leverages symbolic execution

313
00:38:35,850 --> 00:38:41,368
and they use something called

314
00:38:41,369 --> 00:38:45,960
based verification which is the high
school package that took different SMT

315
00:38:45,960 --> 00:38:50,050
solvers can figure out which one is best
for this

316
00:38:50,050 --> 00:39:02,050
my chest it looked like these three was
44 magnum opus is somewhat so for

317
00:39:02,050 --> 00:39:02,760
instance

318
00:39:02,760 --> 00:39:08,180
arguments and the album functions but I
mean just means that you have to treat

319
00:39:08,180 --> 00:39:14,649
record before he tried to to to prove
correctness or find bugs and the code is

320
00:39:14,650 --> 00:39:24,790
available for non-commercial use to
contact them and i cant interesting it

321
00:39:24,790 --> 00:39:29,620
it looks to me that there are people who
are also very interested in correcting

322
00:39:29,620 --> 00:39:40,009
fruition of crypto the more surprising
thing to me he said something something

323
00:39:40,010 --> 00:39:55,530
else works namely property base bug
hunting its its original fussing so that

324
00:39:55,530 --> 00:40:04,090
she wants to to find bugs with a father
and a little devil work pressure tried

325
00:40:04,090 --> 00:40:10,710
so you have actions actions for
retrieving operations that you can check

326
00:40:10,710 --> 00:40:17,880
for example you have a prime field
that's if you take the universe of a

327
00:40:17,880 --> 00:40:21,990
number and then take the universe again
if it's not then this should be the same

328
00:40:21,990 --> 00:40:26,020
numbers or have two functions

329
00:40:26,020 --> 00:40:34,400
that's the case that we're talking about
for the issue and if you take the square

330
00:40:34,400 --> 00:40:52,360
this page to the function g to giving
the argument to the function f company

331
00:40:52,360 --> 00:40:53,930
screwed up sorry about that

332
00:40:53,930 --> 00:41:01,710
how do you check for many inputs fast or
just visit and will reduce crashes and

333
00:41:01,710 --> 00:41:10,670
burns and its shares up an FLV files is
able to find the bug with this little

334
00:41:10,670 --> 00:41:21,220
bit of code in like less than an hour on
10 and as I said like I only talked

335
00:41:21,220 --> 00:41:25,689
about all their spots you can try this
was different other properties and other

336
00:41:25,690 --> 00:41:34,170
other become libraries and maybe funds
as well so conclusions become vulnerable

337
00:41:34,170 --> 00:41:39,130
these are real and they can bite you in
the medium term goal that we should have

338
00:41:39,130 --> 00:41:44,089
is that we won't have formal
verification for the arithmetic

339
00:41:44,089 --> 00:41:51,040
underlying premise and that optimizes
assembly is like a real

340
00:41:51,040 --> 00:42:00,400
without me if you want to fully verify
something I just could also mean that

341
00:42:00,400 --> 00:42:06,180
they are like these great instructions
for accessing an arm and you can do that

342
00:42:06,180 --> 00:42:15,348
i mean percentage is also the problem
like if you have countermeasures tax

343
00:42:15,349 --> 00:42:35,660
that so then the question becomes like
that maybe a call and I take away from

344
00:42:35,660 --> 00:42:42,299
all this is that looked on Krypton are
very very nice read through the only the

345
00:42:42,299 --> 00:42:47,259
only bug that was found that out last 10
years there that's publicly documented

346
00:42:47,260 --> 00:42:53,720
the prime generation routine so they
they screwed up incentives like dunno

347
00:42:53,720 --> 00:42:55,290
Arabian

348
00:42:55,290 --> 00:43:00,580
a number of times the only good ones and
the committee looked so this bug was

349
00:43:00,580 --> 00:43:09,400
found by mark accomplice the box so yeah
that's it

350
00:43:09,400 --> 00:43:17,230
this is the bibliography I hope nobody
fell asleep during the talk and if there

351
00:43:17,230 --> 00:43:55,630
any questions feel free to ask

352
00:43:55,630 --> 00:44:01,290
I I tried to like i I want to look at
the ones that are really widely spread

353
00:44:01,290 --> 00:44:07,110
like that and then and there have been
around for a long period of time and in

354
00:44:07,110 --> 00:44:15,520
my experience like so like when I was in
university I also roads like now

355
00:44:15,520 --> 00:44:24,420
completion and add students road beyond
implications intercourse that it was and

356
00:44:24,420 --> 00:44:29,110
i chair propagation is played every
second student would make that mistake

357
00:44:29,110 --> 00:44:35,370
and I would not be surprised at all if
every second job creation how did some

358
00:44:35,370 --> 00:44:42,700
some some variation of that

359
00:44:42,700 --> 00:44:53,328
know so I mean I may need JavaScript
provisions like a blinding and in her

360
00:44:53,329 --> 00:44:59,480
second questions like what's the what's
the word with for JavaScript really hard

361
00:44:59,480 --> 00:45:10,380
to hit because you have I didn't go into
the field research there's a lot of

362
00:45:10,380 --> 00:45:13,970
field research for this as well I'm like
how to exploit this and what did not

363
00:45:13,970 --> 00:45:19,270
break but that was mostly failed
research because I concentrated on this

364
00:45:19,270 --> 00:45:25,720
particular and it's much more likely to
succeed and in other cases and this is

365
00:45:25,720 --> 00:45:31,890
also the document in the white paper I
can't do that in this talk will be

366
00:45:31,890 --> 00:45:42,629
multiple hours then maybe we'll talk
about that but maybe was not to field

367
00:45:42,630 --> 00:46:01,740
research there as well that's not my
paper you there

368
00:46:01,740 --> 00:46:13,180
related to the stock are okay yeah just
yes that's great no but that would mean

369
00:46:13,180 --> 00:46:18,649
that I would that would require the
alligators well and have not done that

370
00:46:18,650 --> 00:46:29,970
no I was using this money to compare
different implementations and that only

371
00:46:29,970 --> 00:46:34,330
did not work so well since only works
well if you retains a really small so if

372
00:46:34,330 --> 00:46:40,400
you tried to basically compared to being
square against a Libyan

373
00:46:40,400 --> 00:46:48,100
open the low number of China with three
limps it did not work for me so that was

374
00:46:48,100 --> 00:46:57,700
a wise person worked with straight up
fuzzy yes I know I would be much more I

375
00:46:57,700 --> 00:47:01,779
could do the memory Mali as well but I
think we're not quite there yet but the

376
00:47:01,780 --> 00:47:08,170
AL East for the tools that we have
publicly available at the moment just

377
00:47:08,170 --> 00:47:12,869
answered my question a question was the
symbolic execution wouldn't that litter

378
00:47:12,869 --> 00:47:19,310
estate explosion that because my what I
think I know about symbolic execution is

379
00:47:19,310 --> 00:47:23,520
that it really works in practice or
river software so they are so many

380
00:47:23,520 --> 00:47:30,030
states and but you just said it didn't
work for square yeah but it's like

381
00:47:30,030 --> 00:47:38,150
father like it did show that other
things work travel agents but did you

382
00:47:38,150 --> 00:47:50,540
find parks within oh so that's the sad
part

383
00:47:50,540 --> 00:48:03,259
yeah yeah

384
00:48:03,260 --> 00:48:26,260
small number of axons but a large number
of properties are just examples so wild

385
00:48:26,260 --> 00:48:32,550
I mean she just like you want to have
some kind of

