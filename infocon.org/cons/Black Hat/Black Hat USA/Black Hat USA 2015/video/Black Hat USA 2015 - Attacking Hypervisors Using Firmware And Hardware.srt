1
00:00:00,000 --> 00:00:07,430
thanks everyone for joining us to listen
to our presentation we are my name is

2
00:00:07,430 --> 00:00:12,219
urea from Dell services to install
security and these are my colleagues

3
00:00:12,219 --> 00:00:21,289
make sure I would imagine you can trust
and who could make it will be supporting

4
00:00:21,289 --> 00:00:29,990
us from from remotely so someone you
might know that we have been exploring

5
00:00:29,990 --> 00:00:37,449
vulnerabilities in the system former and
biases and the vibe is former for a

6
00:00:37,450 --> 00:00:43,960
while now in fact the the regime
together with luck or probably most

7
00:00:43,960 --> 00:00:48,850
active in public disclosures of the
vulnerabilities in that space so today

8
00:00:48,850 --> 00:00:54,649
we decided to take a slightly different
approach and talk about former

9
00:00:54,649 --> 00:00:58,829
vulnerabilities but not just her
vulnerabilities but how they impact

10
00:00:58,829 --> 00:01:05,080
hypervisor send security virtualization
a scary so it's gonna be fun though

11
00:01:05,080 --> 00:01:14,890
hypervisors attacking its gonna be fun
anyway so they are the presentation the

12
00:01:14,890 --> 00:01:16,680
title is you can see it

13
00:01:16,680 --> 00:01:23,450
attacking her proposals from former and
hard work and we will explore new attack

14
00:01:23,450 --> 00:01:32,900
vectors so is a brief agenda so lol a
little old described hypervisor based on

15
00:01:32,900 --> 00:01:35,909
his leash and mechanisms and protections

16
00:01:35,909 --> 00:01:41,609
the the MM's offer will talk about and
introduce a year from a rootkit and

17
00:01:41,609 --> 00:01:45,318
demonstrate former Red Cat and how that
affects the secrets within the virtual

18
00:01:45,319 --> 00:01:52,020
machines will spend some time on known
attack vectors against hypervisors to

19
00:01:52,020 --> 00:01:57,439
through the year through the hardware
emulation and we'll also talk about it

20
00:01:57,439 --> 00:02:05,699
attack vectors which our opinion or less
explored to date through the former

21
00:02:05,700 --> 00:02:10,890
interfaces and then will conclude with
some of the available medications as

22
00:02:10,889 --> 00:02:20,720
well as tools so based isolation and how
the MM's elite member within the virtual

23
00:02:20,720 --> 00:02:25,099
machines as well as the emotions devices
welded the summer of the slide is that

24
00:02:25,099 --> 00:02:32,730
it's good when it's finished when it's
complete so you can see the the relative

25
00:02:32,730 --> 00:02:40,130
high-level stack on the sufferer stack
including hardware the bottom the the

26
00:02:40,130 --> 00:02:43,489
system firmware running on its
initializing harbor which is either

27
00:02:43,489 --> 00:02:49,530
legacy BIOS or you find this former were
as my handlers to other types of firmer

28
00:02:49,530 --> 00:02:54,280
than this picture represents more mostly
bare metal had revised model no

29
00:02:54,280 --> 00:02:59,889
virtualization mobile but there's a
there's a hypervisor putting on on top

30
00:02:59,889 --> 00:03:06,720
of the system former and with the the
virtual machines managed by this

31
00:03:06,720 --> 00:03:10,959
hypervisor with the guests to Wes's
isolated from each other and you can see

32
00:03:10,959 --> 00:03:17,209
that the privilege level increases from
top to bottom basically if you have a

33
00:03:17,209 --> 00:03:21,120
compromise in the virtual machine you
have certain impact but he'll have a

34
00:03:21,120 --> 00:03:25,970
compromise of inside burma than the
provisions that they exploit has

35
00:03:25,970 --> 00:03:28,669
obviously grows with

36
00:03:28,669 --> 00:03:31,590
so

37
00:03:31,590 --> 00:03:36,970
how the the isolation of hypervisors are
getting isolate at providing isolation

38
00:03:36,970 --> 00:03:44,390
between the virtual machines and so then
the way it's provided on a generically

39
00:03:44,390 --> 00:03:48,869
is if you have certain attacking one
gets to west and the attack my

40
00:03:48,870 --> 00:03:52,549
propagates and in fact the entire guess
to Wales including the operating system

41
00:03:52,549 --> 00:03:58,590
itself then the the hypervisor intends
to block that they have the propagation

42
00:03:58,590 --> 00:04:02,390
of the attacks you either virtual
machines as well as blog the the attempt

43
00:04:02,390 --> 00:04:06,679
to attack the hypervisor itself which
could be from directly from the user

44
00:04:06,680 --> 00:04:10,930
mode applications or from the operating
system so those are theirs are blocked

45
00:04:10,930 --> 00:04:16,160
attacks from the offer from malicious
software as well

46
00:04:16,160 --> 00:04:24,530
hypervisors aim at providing protection
from the compromise devices in case you

47
00:04:24,530 --> 00:04:28,669
have a card compromised with the
company's former and the network card

48
00:04:28,669 --> 00:04:35,580
keep can access memory is a mechanism
that hypervisors employee 222 blog the

49
00:04:35,580 --> 00:04:44,440
inbuilt memory access the attacks from
the devices so yeah and and and

50
00:04:44,440 --> 00:04:49,010
therefore provide the same protection
from the investment tax to the virtual

51
00:04:49,010 --> 00:04:56,620
machines some reason it it's it's
clicking every other time so the summary

52
00:04:56,620 --> 00:05:02,720
of the protections that that that two
days hypervisors use and some of them

53
00:05:02,720 --> 00:05:06,660
are softer protection some of them have
protections that we can we can we can

54
00:05:06,660 --> 00:05:10,400
break them down into into two big
glasses

55
00:05:10,400 --> 00:05:14,989
protections that provides offer
isolation specifically the hypervisor

56
00:05:14,990 --> 00:05:17,150
strap on certain events on it

57
00:05:17,150 --> 00:05:22,570
instructions executed in two guests on
West as well as hypervisors use

58
00:05:22,570 --> 00:05:28,030
permissions that define whether a guest
to West can

59
00:05:28,030 --> 00:05:33,409
access certain model specific
breakthrough Cindy CPUs or i/o ports or

60
00:05:33,410 --> 00:05:38,340
if it's our virtualization gates guests
then the traditional ring architecture

61
00:05:38,340 --> 00:05:42,630
ring protections are used by the
hypervisors to isolate different levels

62
00:05:42,630 --> 00:05:47,520
layers the memory protection is
guaranteed by their software based based

63
00:05:47,520 --> 00:05:52,859
evils which typically works we have if
the underlying hardware doesn't support

64
00:05:52,860 --> 00:05:58,000
the harbour assisted paging worry if it
does support hard resisted paying agent

65
00:05:58,000 --> 00:06:05,440
then the this mechanism is also used to
isolate memory from from from of each

66
00:06:05,440 --> 00:06:11,540
guest so if those could be accepted
based on Intel platform sort asset base

67
00:06:11,540 --> 00:06:17,490
tables then the second group is the
device isolation so the the isolation

68
00:06:17,490 --> 00:06:23,290
hypervisors provide 404 potentially
compromised devices and those

69
00:06:23,290 --> 00:06:26,810
protections including interrupt
remapping so that the the the devices

70
00:06:26,810 --> 00:06:32,490
can just send your message thing holding
dropped

71
00:06:32,490 --> 00:06:39,819
to do when you too many guests or the
protection of memories guaranteed by a

72
00:06:39,819 --> 00:06:47,840
Euro memory management units were even
though there are some hardware ranges

73
00:06:47,840 --> 00:06:51,909
available that just local all inbound
access to those religious so there is

74
00:06:51,910 --> 00:06:56,380
there a number of protections that the
hypervisors today you will not be able

75
00:06:56,380 --> 00:07:02,430
to you described below them in my
clicker broke finally so but some of

76
00:07:02,430 --> 00:07:09,770
them so the way the way I providers trap
on certain events happened during the

77
00:07:09,770 --> 00:07:17,289
within the virtual machine there is a
DMM host which is basically were were

78
00:07:17,289 --> 00:07:21,979
theirs and theirs abiam guess which is
controlled by the this structure cold

79
00:07:21,979 --> 00:07:27,770
weather control structure will be in
control block just governs behavior of

80
00:07:27,770 --> 00:07:33,620
the beam guests so there's there's a
piece of code that handles event from

81
00:07:33,620 --> 00:07:39,270
within the virtual machine or the
leading to do this doesn't enter

82
00:07:39,270 --> 00:07:42,448
Colombia max it's so the BMX as can be

83
00:07:42,449 --> 00:07:47,240
can be in occur as a result of execution
of specific instructions either

84
00:07:47,240 --> 00:07:50,889
unconditionally or conditionally
depending on the specific settings

85
00:07:50,889 --> 00:07:58,009
within the structure the BMX this can
occur when guests tries to access

86
00:07:58,009 --> 00:08:06,569
specific registers in the CPU like those
I'm source hypervisor is this

87
00:08:06,569 --> 00:08:13,130
those emissary bitmaps that basically
provide that either tell that the guests

88
00:08:13,130 --> 00:08:17,130
can directly access and a rich source or
so that they sell the hardware that it

89
00:08:17,130 --> 00:08:20,870
needs to drop into the hypervisor

90
00:08:20,870 --> 00:08:26,930
the hypervisor also manages those peach
tables hardware assisted page tables to

91
00:08:26,930 --> 00:08:28,020
provide

92
00:08:28,020 --> 00:08:34,740
protections of the memory pages that you
the actual real physical pages also

93
00:08:34,740 --> 00:08:39,630
hypervisors use those IObit up
structures that either provide access

94
00:08:39,630 --> 00:08:45,430
direct access to all ports to the
virtual machines or tell her to drop

95
00:08:45,430 --> 00:08:54,189
access to a specific reports so 110 111
example the those protections is

96
00:08:54,190 --> 00:09:00,970
extended page tables or hardware system
so the the guests are you can see guest

97
00:09:00,970 --> 00:09:08,630
on the left of this light now doesn't
really have access doesn't doesn't

98
00:09:08,630 --> 00:09:15,529
really see the actual real physical
memory is it after translating its own

99
00:09:15,529 --> 00:09:19,510
virtual addresses to the physical
addresses using the guest base tables

100
00:09:19,510 --> 00:09:23,439
there was physical addresses are not
really a real physical address of the

101
00:09:23,440 --> 00:09:31,730
host physical address and gas physical
address there they're being translated

102
00:09:31,730 --> 00:09:39,160
by another structure which is basically
marrying the the regular base tables

103
00:09:39,160 --> 00:09:43,890
which is maintained by the hypervisor
and that structural translates the the

104
00:09:43,890 --> 00:09:48,060
guest is it alleges as to the actual
whose physical addresses so this way

105
00:09:48,060 --> 00:09:53,290
hypervisors can guarantee you that
specific gas can only access specific

106
00:09:53,290 --> 00:09:58,399
physical physical pagers and the other
guests cannot do that as well as

107
00:09:58,399 --> 00:10:04,390
providing some access attributes so for
example the page may not be writable

108
00:10:04,390 --> 00:10:12,490
readable or executable in case in case
the the guest violates the the the the

109
00:10:12,490 --> 00:10:17,550
attributes access after this then that
causes a trap to the hypervisor

110
00:10:17,550 --> 00:10:21,449
hypervisor can handle those events so

111
00:10:21,450 --> 00:10:28,940
we've talked about isolating suffer with
talked about isolating devices but we

112
00:10:28,940 --> 00:10:35,350
don't have any protections that provide
isolation to the system firmer and that

113
00:10:35,350 --> 00:10:42,560
brings the entire system former into the
GCB able to hypervisors so first before

114
00:10:42,560 --> 00:10:49,310
continuing exploring the attack surface
through the former let's just let's just

115
00:10:49,310 --> 00:10:55,180
elope described the the the the the
impact of those attacks on the

116
00:10:55,180 --> 00:11:00,180
hypervisor through the former by way of
showing how the the rootkit in the

117
00:11:00,180 --> 00:11:04,880
former would affect secrets within the
hypervisor were the word within the

118
00:11:04,880 --> 00:11:09,980
virtual machines so I assume there is a
system former somehow got compromised

119
00:11:09,980 --> 00:11:13,400
and we'll talk about how can be
compromised but somehow compromised and

120
00:11:13,400 --> 00:11:18,640
there is a rootkit in in in the primer
for example dicks a driver if you

121
00:11:18,640 --> 00:11:25,199
remember having to you that's that's
been installing the kids and you find

122
00:11:25,200 --> 00:11:31,170
this former driver in the Premier so
that a driver because because it runs

123
00:11:31,170 --> 00:11:36,870
underneath the hypervisor no control
over that I can modify it and come back

124
00:11:36,870 --> 00:11:43,240
door which basically compromise sorry
compromises all the virtual machines on

125
00:11:43,240 --> 00:11:51,890
top of a controlled by this hypervisor
however it is easier in this is what

126
00:11:51,890 --> 00:11:56,860
we've actually what we've actually did
in our preferred route yet it is easier

127
00:11:56,860 --> 00:12:03,620
to install a specific brand or rather
than just modifying hypervisor code and

128
00:12:03,620 --> 00:12:09,410
installing our own malicious code in the
modification to the hypervisor might be

129
00:12:09,410 --> 00:12:10,660
visible to somehow

130
00:12:10,660 --> 00:12:16,939
mechanisms and so on but the the the the
back door would be healthier and easier

131
00:12:16,940 --> 00:12:25,670
to do and so on so that that's how we
that that's how we've we've decided to

132
00:12:25,670 --> 00:12:32,399
implement a former Ricketts assume there
is a attacker p.m. fully controlled by

133
00:12:32,399 --> 00:12:37,889
by attacker and there are co-located
victim DMC on the same physical system

134
00:12:37,889 --> 00:12:45,230
we want to we want our former akin to
provide access for this attack IBM to

135
00:12:45,230 --> 00:12:51,550
all of the other victim yums on on the
physical system so at some point at some

136
00:12:51,550 --> 00:12:57,079
point the physical different physical
system got infected then every boot that

137
00:12:57,079 --> 00:13:05,258
that kid within the firmware installs a
back door so they are now using that big

138
00:13:05,259 --> 00:13:11,959
door this specific p.m. on the system
has full control over an unjust only all

139
00:13:11,959 --> 00:13:16,290
of the VMC all of the other young but
also the hypervisor itself so we're not

140
00:13:16,290 --> 00:13:21,509
really doing anything from the rootkit
itself we are providing all the

141
00:13:21,509 --> 00:13:29,279
capabilities to one specific attacker
beyond to do whatever once so before you

142
00:13:29,279 --> 00:13:34,680
for explaining a little bit more details
about that so how that record could be

143
00:13:34,680 --> 00:13:41,329
installed first obviously you can
install it using hardware programmer

144
00:13:41,329 --> 00:13:46,550
specialized equipment we flash the
firmware on on on a spy flash chip I

145
00:13:46,550 --> 00:13:54,680
believe you know from Lubbock were calls
this border guard attack or if they

146
00:13:54,680 --> 00:14:01,239
affirm our is using week protections so
basically doesn't correct protect itself

147
00:14:01,240 --> 00:14:04,310
from overriding then you can you can

148
00:14:04,310 --> 00:14:09,869
the the attacker to just plug into USB
into the server and just use be an

149
00:14:09,870 --> 00:14:16,279
effective firmer that that's that's how
I can do you guys are doing that that

150
00:14:16,279 --> 00:14:26,290
infection at least we saw or there could
be potential installed using a softer

151
00:14:26,290 --> 00:14:30,930
mechanism so exploiting some
vulnerability in the former is their

152
00:14:30,930 --> 00:14:31,520
problem

153
00:14:31,520 --> 00:14:35,270
a you some sort of administrative gas or
privileged gas like 20

154
00:14:35,270 --> 00:14:40,480
petition which might require either a
privilege escalation from a regular gas

155
00:14:40,480 --> 00:14:45,770
to the root partition or remote attack
could be installed from the host OS if

156
00:14:45,770 --> 00:14:50,779
this is a hosted virtualization solution
or potentially even promised

157
00:14:50,779 --> 00:14:56,560
unprivileged guest keys hypervisor
provides access to certain former

158
00:14:56,560 --> 00:15:01,760
interfaces that could be abused to the
to the unprovoked guests so as an

159
00:15:01,760 --> 00:15:05,390
example as an example of such
vulnerabilities a week

160
00:15:05,390 --> 00:15:15,160
protection of the former so now she
worried about the back door so what's

161
00:15:15,160 --> 00:15:20,480
the what's the mechanism to install the
back door we've explored a few of those

162
00:15:20,480 --> 00:15:25,520
hand in fact we have came down to it
being able to completely to install a

163
00:15:25,520 --> 00:15:30,290
back door which requires on the one bit
manipulation which completely opens up a

164
00:15:30,290 --> 00:15:36,110
whole memory to one specific guests so
one specific guests with this one bit

165
00:15:36,110 --> 00:15:40,500
back door can I can I can access all the
other virtual machines this one is a

166
00:15:40,500 --> 00:15:45,470
difference of this one is a little bit
more reliable so we're actually easier

167
00:15:45,470 --> 00:15:50,839
to use so this this this back door is
not one bit manipulation but it only

168
00:15:50,839 --> 00:15:52,209
many police structures

169
00:15:52,209 --> 00:15:58,959
00 impact on the code it doesn't doesn't
change any codes and hypervisor or any

170
00:15:58,959 --> 00:16:06,540
other so the bed or just basically adds
a assume there is a racket so they're

171
00:16:06,540 --> 00:16:13,110
rude kid installs that door by searching
the memory of physical memory for a

172
00:16:13,110 --> 00:16:18,140
p.m. control structure or control block
for a specific guessed that the attacker

173
00:16:18,140 --> 00:16:25,640
relator control and then from that from
that point on the the retired also can

174
00:16:25,640 --> 00:16:29,699
find the page tables that protects me
that that the hypervisor using to

175
00:16:29,700 --> 00:16:36,510
protect memory so as soon as the retired
fires deals page tables it ends and

176
00:16:36,510 --> 00:16:41,459
trees to those patients evils for that
specific guessed that open up all of the

177
00:16:41,459 --> 00:16:45,979
memory to that specific guests from that
point on that specific gas to the

178
00:16:45,980 --> 00:16:54,329
attacker guests at a Caribbean Alexis
2420 loving memory of the year and the

179
00:16:54,329 --> 00:17:02,519
hypervisor itself so now let's let's
show I'll show you the double the Redcat

180
00:17:02,519 --> 00:17:15,099
compromising while exposing secrets know
what was happening so the demo split

181
00:17:15,099 --> 00:17:15,829
into parts

182
00:17:15,829 --> 00:17:21,369
this is the first part it can be done
offline it's just installing a route

183
00:17:21,369 --> 00:17:24,979
into the primer we're just refreshing
deferment because the former doesn't

184
00:17:24,980 --> 00:17:28,980
really protect itself will protects but
we can bypass those protections like

185
00:17:28,980 --> 00:17:35,480
this could be done by us-based acquire a
hardware programmer or whatever other

186
00:17:35,480 --> 00:17:39,309
mechanism we're using software from the
softer attack from the root partition

187
00:17:39,309 --> 00:17:49,110
then the system shutdown and at some
point after reboot the system boots with

188
00:17:49,110 --> 00:18:03,309
the hypervisor with the VMA am with all
of the virtual machines on it

189
00:18:03,309 --> 00:18:08,928
so you can see we have multiple mediums
to victims and running Ubuntu and

190
00:18:08,929 --> 00:18:17,110
Windows and attacker be running Windows
so we're running Ubuntu Ubuntu has

191
00:18:17,110 --> 00:18:27,809
Apache web server with no setup and
we're actually generating will show you

192
00:18:27,809 --> 00:19:03,840
that we're generating private keys or as
a protease for RSA key pair for without

193
00:19:03,840 --> 00:19:15,750
the private portion of the key is going
is going into this world and the sort of

194
00:19:15,750 --> 00:19:21,760
a good the public certificate for the
public key given to us all serbs

195
00:19:21,760 --> 00:20:26,980
snake-oil . while now that's generating
a certificate request

196
00:20:26,980 --> 00:20:38,240
now we're watching it another victim
a.m. which runs Windows and Windows were

197
00:20:38,240 --> 00:20:42,440
not doing much other than opening couple
documents one of the one of the

198
00:20:42,440 --> 00:20:57,770
documents is confidential the other one
is super top secret documents

199
00:20:57,770 --> 00:21:09,879
so earnings confidential document of
some corporation and product schedule

200
00:21:09,880 --> 00:21:20,170
which is a super top secret document to
the same corporation so now at some

201
00:21:20,170 --> 00:21:24,090
point attacker gets access to Zambia

202
00:21:24,090 --> 00:21:32,820
controls that virtual machine and
remember on that system we at some point

203
00:21:32,820 --> 00:21:38,050
we installed a retreat in the former so
the kids right now is executing its

204
00:21:38,050 --> 00:21:41,040
getting every time the system boots and
then it's actually getting periodically

205
00:21:41,040 --> 00:21:43,620
that's the way we've implemented

206
00:21:43,620 --> 00:21:49,399
seconds just checked the memory and
still the attacker just launches the

207
00:21:49,400 --> 00:21:55,270
regular script that searches all the all
of the physical memory for some secret

208
00:21:55,270 --> 00:22:01,800
artifacts and we're specifically looking
for her safe private keys and PGP keys

209
00:22:01,800 --> 00:22:11,190
and RTF documents and so you can see
that the script found someone bunch of

210
00:22:11,190 --> 00:22:21,610
RT of documents in certain locations and
memory and I'm 22 files then if Mrs a

211
00:22:21,610 --> 00:22:34,590
private kisi ki blob other artifacts

212
00:22:34,590 --> 00:22:41,129
all those secrets were dumped into that
their trade secrets so let's let's see

213
00:22:41,130 --> 00:22:57,679
if we got proper secrets searching for a
confidential document and that's the one

214
00:22:57,679 --> 00:23:17,820
that was open in Windows Virtual Machine
will find out one so here's the document

215
00:23:17,820 --> 00:23:35,090
that we've opened in need as well for
RSA private key now we've generated in

216
00:23:35,090 --> 00:23:41,029
in the Kubuntu virtual machine you can
see one of their one of the filesystem

217
00:23:41,029 --> 00:23:53,890
really double the memory of the private
key

218
00:23:53,890 --> 00:24:02,840
later but it's the same key so we
extracted from this from this attacker

219
00:24:02,840 --> 00:24:09,620
virtual machine with the help of
back-door which modifies only structures

220
00:24:09,620 --> 00:24:21,270
not not a single bit of code in the big
door installed by the former we've been

221
00:24:21,270 --> 00:24:24,879
able to pretty much control of the
contents of memory for all of the

222
00:24:24,880 --> 00:24:29,140
virtual machines including the
hypervisor we've only showed you know

223
00:24:29,140 --> 00:24:34,180
dumping the extracting secrets but we
could have modified anything we want to

224
00:24:34,180 --> 00:24:35,290
as well

225
00:24:35,290 --> 00:24:40,670
from this virtual machine so that that
goes basically again again through the

226
00:24:40,670 --> 00:24:46,540
process that you described a little I'll
skip through those two slides so we we

227
00:24:46,540 --> 00:24:52,129
flashed they routed part of the premier
image from within the writ petition to

228
00:24:52,130 --> 00:24:57,170
stall the Ricketts and we've used in
fact that that system that we've been so

229
00:24:57,170 --> 00:25:03,520
that wasn't properly protecting the the
former on the clash so it was it was you

230
00:25:03,520 --> 00:25:06,760
know in properly configuring it so we
can we can we can bypass the right

231
00:25:06,760 --> 00:25:11,960
protection they've finally more systems
actually do protect their former on the

232
00:25:11,960 --> 00:25:16,970
flash and you can actually even go and
use chips framework and this module to

233
00:25:16,970 --> 00:25:22,010
verify that and so would the attacker
dunno systems

234
00:25:22,010 --> 00:25:26,200
well you know there there are
vulnerabilities that would allow an

235
00:25:26,200 --> 00:25:29,730
attacker to install that from a rich
kids even if the system former

236
00:25:29,730 --> 00:25:34,310
protecting itself on the flesh and we
have a little bit more

237
00:25:34,310 --> 00:25:39,090
lot more details India presentation we
gave every contact I can defend him bias

238
00:25:39,090 --> 00:25:46,270
will explain two of those
vulnerabilities here so additionally as

239
00:25:46,270 --> 00:25:51,670
you saw we have full control over the
memory beds we we we we we have we have

240
00:25:51,670 --> 00:25:57,110
not just were able not just expose
secrets we can fully debugging

241
00:25:57,110 --> 00:26:01,199
and how the hypervisor works without any
debugging mechanism with this former

242
00:26:01,200 --> 00:26:07,260
kids and you know which gives specific
access to full memory we can deconstruct

243
00:26:07,260 --> 00:26:12,290
all of the critical structures that the
hypervisor is using all the PMCs

244
00:26:12,290 --> 00:26:17,240
structures all the bitmaps protecting
him a source and I O for each guest all

245
00:26:17,240 --> 00:26:21,520
of the year extended page tables for
each guest the regular hosts and guests

246
00:26:21,520 --> 00:26:27,049
a stable for each of the hypervisor and
virtual machine we can also reconstruct

247
00:26:27,049 --> 00:26:32,580
all of the basic cable for iPhone I'm
you tables hypervisor mmmm including the

248
00:26:32,580 --> 00:26:36,899
the exit handler and even the only
configuration registers for all the

249
00:26:36,900 --> 00:26:41,940
physical devices for all the real
hardware so using that gets it

250
00:26:41,940 --> 00:26:47,000
it provides to any guest who provides a
full capability to

251
00:26:47,000 --> 00:26:51,470
and and and and visibility into the
hypervisor this is an example so on the

252
00:26:51,470 --> 00:26:53,220
left side you can see you

253
00:26:53,220 --> 00:27:00,190
virtual machine control structure which
is you can see it's using bitmap and on

254
00:27:00,190 --> 00:27:04,080
the right side of the slide you can see
the obit nap and MSR bitmaps that we've

255
00:27:04,080 --> 00:27:07,970
recovered from from the guest for the
hypervisor

256
00:27:07,970 --> 00:27:12,380
the net this slide shows the extended
page tables with fully deconstructing

257
00:27:12,380 --> 00:27:16,110
extended page tables we know which pages
are protected by the hypervisor which

258
00:27:16,110 --> 00:27:22,889
pages belong to which gassed and so on
so it is a full visibility into into the

259
00:27:22,890 --> 00:27:29,419
so now before we continue with it
actually explaining what are the

260
00:27:29,419 --> 00:27:33,400
possibilities that could be used by the
guests in the former two-time

261
00:27:33,400 --> 00:27:38,940
hypervisors we want to focus a little
bit on the vulnerabilities that are

262
00:27:38,940 --> 00:27:47,840
relatively relatively familiar to
everyone in the the vulnerabilities in

263
00:27:47,840 --> 00:27:56,399
the way of the MM's emulate physical
devices so without am switching to Alex

264
00:27:56,400 --> 00:28:03,130
my name is Alex and I will continue this
presentation so basically assume novia

265
00:28:03,130 --> 00:28:11,080
mama immolate resources to the guests so
let me describe a little bit what

266
00:28:11,080 --> 00:28:17,080
exactly being late and first of all of
EMM allayed instructions so specific

267
00:28:17,080 --> 00:28:23,639
assertions awesome and sit down and say
good this specifically the sanctions for

268
00:28:23,640 --> 00:28:34,180
example CPU ADM also there are specific
registered name us are also played this

269
00:28:34,180 --> 00:28:43,250
register soon so it's a good thing I'm
sorry the Messiah right commands it

270
00:28:43,250 --> 00:28:50,100
happen and I'm glad to be here all of
these registers another interface

271
00:28:50,100 --> 00:28:56,750
between unknown guests and hypervisor is
hyper it's like Cisco for operation

272
00:28:56,750 --> 00:29:05,250
system but similarly for the amount and
also future area

273
00:29:05,250 --> 00:29:11,430
visit Dubai simulation of this type of
device simulation i/o device and your

274
00:29:11,430 --> 00:29:14,740
device so basically I need to immolate

275
00:29:14,740 --> 00:29:22,120
configuration reviews and all we're told
devices to the specific guests and as we

276
00:29:22,120 --> 00:29:28,340
know there is my new devices in Santa
guess so this is that and we have an

277
00:29:28,340 --> 00:29:35,490
example for issue of this so important
which really want to mention that

278
00:29:35,490 --> 00:29:45,900
cloudburst was founded in 2009 by
prosecution's key this bike in SVG

279
00:29:45,900 --> 00:29:53,700
device simulation talk a bit about this
so this device customer offers the full

280
00:29:53,700 --> 00:29:59,770
baths her frame by frame buffer
surrendered her mother for graphical and

281
00:29:59,770 --> 00:30:05,670
see some offers a buffer when the guests
on the call month to the 224

282
00:30:05,670 --> 00:30:11,150
manipulation from ana belén this frame
before so basically just like c'mon

283
00:30:11,150 --> 00:30:20,190
c'mon buffer and in this bathroom there
was just thinkin maybe we can find this

284
00:30:20,190 --> 00:30:29,940
device users and walks and for
compatibility they use you can enable

285
00:30:29,940 --> 00:30:36,940
these devices in this this and this
totally deeply how they implemented in

286
00:30:36,940 --> 00:30:37,870
2000

287
00:30:37,870 --> 00:30:45,379
50014 similar Macarena have memory
corruption in 2004 which lost memory

288
00:30:45,380 --> 00:30:53,040
corruption to exploit the Skype arises
so basically you can potentially escaped

289
00:30:53,040 --> 00:31:06,000
from the and also an area described
instruction in Malaysia issues so we

290
00:31:06,000 --> 00:31:15,610
have found that little box 3.2 and 4.04%
to doesn't properly laid us our

291
00:31:15,610 --> 00:31:22,330
registers MS Access so basically if you
write to us are in one being in the

292
00:31:22,330 --> 00:31:29,928
summer sorry I just hope everybody's up
her throat had to be a son Daniel value

293
00:31:29,929 --> 00:31:38,200
you get the threshold host system also
interested in buying was in

294
00:31:38,200 --> 00:31:45,170
international relations from basically
someone this time

295
00:31:45,170 --> 00:31:50,910
defaulting in a bare metal but if you in
securing them inside the guest room

296
00:31:50,910 --> 00:31:57,450
three of them basically this type of
bike and crashed now cloud which

297
00:31:57,450 --> 00:32:04,500
analyzed my lover three mile or so this
is kind of a deal what kind of like how

298
00:32:04,500 --> 00:32:09,500
many of after so you have to do our time
there be a mile from the software how

299
00:32:09,500 --> 00:32:16,440
many different like device and so on
which we have to this like huge soft US

300
00:32:16,440 --> 00:32:22,670
so now you're I will continue their
supervisors are to apply for firmware

301
00:32:22,670 --> 00:32:29,480
hello can you hear me OK

302
00:32:29,480 --> 00:32:34,870
there's just this just puts into
perspective the amount of Directors

303
00:32:34,870 --> 00:32:39,929
hypervisors have and the veterans
through the unrelated to voice their

304
00:32:39,930 --> 00:32:45,380
relatively well understood and from
Miller there are many bugs including the

305
00:32:45,380 --> 00:32:50,900
ones that we found you through each of
those you know each of those demolition

306
00:32:50,900 --> 00:32:55,540
mechanisms as well as described what
however would hasn't been explored to

307
00:32:55,540 --> 00:33:00,210
significantly today in our opinion is
the attacking hypervisors through the

308
00:33:00,210 --> 00:33:04,650
interfaces in the firmware and hardware
not through the undulation but through

309
00:33:04,650 --> 00:33:08,030
the eight layers underneath the
hypervisor and this is what will will

310
00:33:08,030 --> 00:33:14,780
focus on so one of one of the two issues
that we're using in in should to show

311
00:33:14,780 --> 00:33:19,050
those attacked the actress is the
so-called SMI pointer vulnerabilities

312
00:33:19,050 --> 00:33:24,169
basically without going into gory
details in some way Henderson runtime

313
00:33:24,170 --> 00:33:29,110
part of the the the system firmer
executing in parallel with the sulfurous

314
00:33:29,110 --> 00:33:34,389
that with the hypervisor and they need
to communicate with external world with

315
00:33:34,390 --> 00:33:40,590
the with the operating system so the
vulnerability was that some of the many

316
00:33:40,590 --> 00:33:46,949
systems were passing arguments while all
of them are passing arguments through

317
00:33:46,950 --> 00:33:51,400
the general-purpose races but we're
passing pointers and addresses to those

318
00:33:51,400 --> 00:33:56,300
general purpose registers and if the SMI
heller doesn't validate those pointers

319
00:33:56,300 --> 00:34:02,020
and then either write something to that
pointer like for example a result of the

320
00:34:02,020 --> 00:34:07,610
execution of the reminder or status I
couldn't handle that requests albright

321
00:34:07,610 --> 00:34:12,109
02 that address so if they ask my
handlers write anything to those

322
00:34:12,110 --> 00:34:16,230
pointers without validation then they
can override the their own memory

323
00:34:16,230 --> 00:34:21,000
because the the West could just point
that I just inside the house around and

324
00:34:21,000 --> 00:34:26,960
that gets us koonig suggestion in the in
the US so for details on this specific

325
00:34:26,960 --> 00:34:33,850
attack I'm referring other prior
presentation so this is how that would

326
00:34:33,850 --> 00:34:40,339
work with hypervisors assumed that there
is a specific virtual machine that that

327
00:34:40,340 --> 00:34:45,370
has direct access to the interface and
hypervisor basically providing direct

328
00:34:45,370 --> 00:34:50,699
access to the to that specific to that
specific virtual machine in and in this

329
00:34:50,699 --> 00:34:55,810
case this is a privilege guess this is
root partition so in in the in the in

330
00:34:55,810 --> 00:35:02,370
the hypervisor here basically allows the
root partition to trigger an SMI through

331
00:35:02,370 --> 00:35:07,779
the port be too Lisle reporter be too so
in that case the the the the compromise

332
00:35:07,780 --> 00:35:08,740
guests can

333
00:35:08,740 --> 00:35:13,859
can trigger that vulnerability in the
Indians my hammering in in the firmer

334
00:35:13,860 --> 00:35:19,190
supply that point to first infects the
SMI heller the compromises my handler

335
00:35:19,190 --> 00:35:22,780
and then because that's my handlers
running essentially underneath the

336
00:35:22,780 --> 00:35:28,730
hypervisor and is not brutalized by the
hypervisor in the default treatment

337
00:35:28,730 --> 00:35:35,970
without the it as my transfer minder
then this is my homework and then extend

338
00:35:35,970 --> 00:35:42,160
the attack on the hypervisor and and and
and and and compromises it so will will

339
00:35:42,160 --> 00:35:55,779
will show that demo using this specific
vulnerability just

340
00:35:55,780 --> 00:36:01,190
petition and we're launching

341
00:36:01,190 --> 00:36:05,950
hyper-v it allows our petition to
directly address in my hand there's so

342
00:36:05,950 --> 00:36:12,680
we're launching this exploit exploit
called it provides a pointer within the

343
00:36:12,680 --> 00:36:18,279
US around then through the pointer the
SMI hello writes itself and this way we

344
00:36:18,280 --> 00:36:28,240
get coated in the US so now we have code
execution in Assam and then we're

345
00:36:28,240 --> 00:36:32,390
launching another script that basically
you know submits a payload in the in the

346
00:36:32,390 --> 00:36:40,740
in the payload would basically open up
all all of memory 222 lost so including

347
00:36:40,740 --> 00:36:48,330
the hypervisor memory so now we've
launched that second stage which open up

348
00:36:48,330 --> 00:36:51,940
all the member including the hypervisor
member to also you can see that there

349
00:36:51,940 --> 00:36:53,410
there were all f's and then

350
00:36:53,410 --> 00:37:00,120
you can see some data so launching the
third stage of the exploit its just too

351
00:37:00,120 --> 00:37:03,350
is it is just a script the dumps all the
critical structure from the hypervisor

352
00:37:03,350 --> 00:37:07,850
it dumps

353
00:37:07,850 --> 00:37:16,299
last year so it extracted RNA extracted
all of the year

354
00:37:16,300 --> 00:37:21,500
structures for all of the virtual
machines including where they are in the

355
00:37:21,500 --> 00:37:24,600
physical memory of their you know their
properties like

356
00:37:24,600 --> 00:37:28,790
instruction pointer tax and so on
extracted all of the patient evils

357
00:37:28,790 --> 00:37:32,950
extended page tables that the hypervisor
protects normally even given the

358
00:37:32,950 --> 00:37:38,049
privilege guess would never have access
to that information but because of the

359
00:37:38,050 --> 00:37:42,760
exploit we got full control over the
hypervisor here so we will extracted

360
00:37:42,760 --> 00:37:49,050
information about the IMU engines used
by the hypervisors to protect itself

361
00:37:49,050 --> 00:37:54,490
from militias devices have extracted the
hypervisor host these tables at the

362
00:37:54,490 --> 00:38:00,930
bottom you can see even the mood of the
piece of code that actually handles all

363
00:38:00,930 --> 00:38:05,410
of those magnets from the virtual
machine and a stack of the hypervisor so

364
00:38:05,410 --> 00:38:14,690
we have full we have no control over the
hypervisor itself and obviously the the

365
00:38:14,690 --> 00:38:19,990
the the attack works on also both ways
so can you can modify any of those

366
00:38:19,990 --> 00:38:29,339
structures so this is just a screenshot
of what I just described so what is the

367
00:38:29,340 --> 00:38:33,100
root cause of that the root causes you
you can see their virtual machines

368
00:38:33,100 --> 00:38:39,580
virtual machines structure control
structure for our petition it uses the

369
00:38:39,580 --> 00:38:46,319
obit lap and you can see the obit the
overtime basically has a handful of i/o

370
00:38:46,320 --> 00:38:51,440
ports that caused trucks to the
hypervisor therefore there any later by

371
00:38:51,440 --> 00:38:55,150
can be emulated by the hypervisor all of
the other i/o ports including the part

372
00:38:55,150 --> 00:38:59,930
that we have used to exploit a smile
through are directly accessible to use

373
00:38:59,930 --> 00:39:05,759
you as you a virtual machines to their
to the repetition so that's that's the

374
00:39:05,760 --> 00:39:11,510
real cost now this fact was using well
we've actually been exploiting my

375
00:39:11,510 --> 00:39:15,660
handler first so the firm or component
and then through this former component

376
00:39:15,660 --> 00:39:21,540
women exploiting a hypervisor but what
if they buy and did lead to a lot of

377
00:39:21,540 --> 00:39:24,440
vendors started fixing those
vulnerabilities and bias

378
00:39:24,440 --> 00:39:28,349
in the biases in the last saw him in the
last few months and they will continue

379
00:39:28,349 --> 00:39:33,700
fixing those for the next few months but
you know what if there is a system that

380
00:39:33,700 --> 00:39:39,060
actually has an updated by us in this
vulnerability was fixed where the hell

381
00:39:39,060 --> 00:39:42,670
are actually validates that winter
before writing anything to win so it

382
00:39:42,670 --> 00:39:47,520
doesn't really allow you to compromise
my hammering as you can see this path is

383
00:39:47,520 --> 00:39:52,869
blocked we cannot compromise my hunger
even in that case this is a pretty bad

384
00:39:52,869 --> 00:39:58,089
situation because there is a hypervisor
that protects its own pages using Apache

385
00:39:58,089 --> 00:40:04,130
and if the attacker instead of instead
of upgrading its my handler points that

386
00:40:04,130 --> 00:40:09,829
address into one of those protected
pages page is protected by the amount it

387
00:40:09,829 --> 00:40:15,609
can still over at those patients were
actually it can ask my hamburger the

388
00:40:15,609 --> 00:40:22,250
former component to a brighter picture
so this attack is slightly different it

389
00:40:22,250 --> 00:40:27,859
were expelled by basically proxy but you
know by proxy through the firmer to the

390
00:40:27,859 --> 00:40:33,230
hypervisor without actually exploiting
the former so the you can see that the

391
00:40:33,230 --> 00:40:37,710
virtual machine invokes with a direct
access to to be able to focus on my

392
00:40:37,710 --> 00:40:41,960
handler is invoked that vulnerability in
supplies pointer to one of the DMM

393
00:40:41,960 --> 00:40:47,079
protected pages and then asked system i
hella to write something to that page

394
00:40:47,079 --> 00:40:51,890
basically giving this virtual machine
ability to override any page in the

395
00:40:51,890 --> 00:40:56,470
hypervisor and keep in mind the firmer
here is fixed and that's that's an

396
00:40:56,470 --> 00:40:59,439
important point even if you have a fixed

397
00:40:59,440 --> 00:41:04,339
firmer with the fix vulnerabilities if
hypervisor provides you direct access to

398
00:41:04,339 --> 00:41:06,339
that to the interfaces of that former

399
00:41:06,339 --> 00:41:10,720
then the Jew to any of the virtual
machines then that virtual machine can

400
00:41:10,720 --> 00:41:16,328
potentially use it as those interfaces
to attack hypervisor by leveraging that

401
00:41:16,329 --> 00:41:22,720
that interfaces a kind of confused
deputy as a proxy right so there's a

402
00:41:22,720 --> 00:41:26,950
really nice taxonomy of those kind of
hardware and software attacks including

403
00:41:26,950 --> 00:41:27,569
those

404
00:41:27,569 --> 00:41:31,209
you know confuse deputy attacks through
the firmer described by Jeff were still

405
00:41:31,209 --> 00:41:38,440
in the presentation that you can you can
you can read offline so the next issue I

406
00:41:38,440 --> 00:41:43,499
told about to vulnerabilities in the
next little bit we're using to attack

407
00:41:43,499 --> 00:41:47,968
another hypervisor we're using we're
using this form the vulnerabilities is

408
00:41:47,969 --> 00:41:51,729
called a three-year resembles crippled
mobility independently discovered by our

409
00:41:51,729 --> 00:41:58,069
team as well as recalled from Braun and
Corey in the Dena from Redbook or right

410
00:41:58,069 --> 00:42:02,369
it's all so we believe based on the
democrats also used will be used by

411
00:42:02,369 --> 00:42:09,049
travel on my book or and the strike two
tomorrow it's the it's the vulnerability

412
00:42:09,049 --> 00:42:11,130
because of you know because of the way

413
00:42:11,130 --> 00:42:16,209
former protects itself when assistant
resume from sleep so this is how this

414
00:42:16,209 --> 00:42:22,269
mechanism works so there's a there's a
there's a you know the permits to boot

415
00:42:22,269 --> 00:42:27,279
faster when it when the system resume
from sleep in normal bit it executes all

416
00:42:27,279 --> 00:42:32,650
of the Dixie code and performs all the
configuration of the harbor but in

417
00:42:32,650 --> 00:42:37,900
addition to configuring hardware all of
that code is recording information into

418
00:42:37,900 --> 00:42:42,009
the table call this reboot script table
and when the system couldn't sleep and

419
00:42:42,009 --> 00:42:47,119
then resume from sleep then all of the
primers not educating so that it saves

420
00:42:47,119 --> 00:42:52,650
you time a lot of time when you are a
system presumes so instead of getting

421
00:42:52,650 --> 00:42:58,229
all that former the bronze just one
script interpreter engine which takes

422
00:42:58,229 --> 00:43:03,058
the script table and interprets and
restores all of the hardware

423
00:43:03,059 --> 00:43:08,279
configuration per that table so this is
what this table contains it's just a

424
00:43:08,279 --> 00:43:10,029
setup sequence of opcodes

425
00:43:10,029 --> 00:43:14,269
restore configuration some of the
opcodes restore memory mapped i/o

426
00:43:14,269 --> 00:43:18,499
registers like the the the the
screenshot some of them restore PCI

427
00:43:18,499 --> 00:43:21,649
configuration register some of them
restore i/o ports

428
00:43:21,650 --> 00:43:25,660
restore those some of them are needed to
do more complex action so they just

429
00:43:25,660 --> 00:43:27,089
jumped arbitrary code

430
00:43:27,089 --> 00:43:30,420
dispatcher pills so this is how this
mechanism

431
00:43:30,420 --> 00:43:38,670
can can can be abused because if the
hypervisor provides access to that table

432
00:43:38,670 --> 00:43:44,130
to the virtual machine let's say the
privileges to guests in this case we're

433
00:43:44,130 --> 00:43:49,040
using them to your own zone if that
table is available to that guests and

434
00:43:49,040 --> 00:43:53,250
this is just a structure in memory so
it's just a access to memory in that

435
00:43:53,250 --> 00:43:58,390
case the exploit within that guests can
modify the opcodes within that group

436
00:43:58,390 --> 00:44:03,970
table put the system and sleep in a pond
sleep upon resume from sleep the firmer

437
00:44:03,970 --> 00:44:09,299
would interpret a completely malicious
s3 but script table and the opcodes and

438
00:44:09,299 --> 00:44:13,690
will execute arbitrary code or or
override or between memory and therefore

439
00:44:13,690 --> 00:44:16,240
basically compromising anything on the
system

440
00:44:16,240 --> 00:44:25,970
above its including the hypervisor and
and and so on so this is then this is

441
00:44:25,970 --> 00:44:31,250
the diamonds and you know using this
attack from Dom Dom 0 this just a

442
00:44:31,250 --> 00:44:37,040
screenshot I'll show you a demo and at
the end of a at the end of exploits

443
00:44:37,040 --> 00:44:42,690
again our virtual machine privilege
guest in this case has full control over

444
00:44:42,690 --> 00:44:45,349
the memory and structures of the
hypervisor

445
00:44:45,349 --> 00:44:54,720
I'll switch 223 exploit against

446
00:44:54,720 --> 00:45:01,680
provider

447
00:45:01,680 --> 00:45:11,359
so

448
00:45:11,360 --> 00:45:31,280
well first we're launching a tool that
tries to find the critical structures of

449
00:45:31,280 --> 00:45:36,040
the hypervisor and it cannot find them
but then after that we're launching the

450
00:45:36,040 --> 00:45:41,640
the exploit the exploit modifies one of
the opcodes in the s3 but script able to

451
00:45:41,640 --> 00:45:46,129
dispatch of codes which will then get
cold when the system the former resume

452
00:45:46,130 --> 00:45:53,860
from sleep so our code will get executed
on resume from sleep then we're

453
00:45:53,860 --> 00:46:06,250
basically just putting the system into a
three-state into sleep using RTC weekend

454
00:46:06,250 --> 00:46:20,940
from resume from s3 state from sleep or
suspend to ram all this data only

455
00:46:20,940 --> 00:46:26,450
contents of memory are preserved in its
free state so now we're launching the

456
00:46:26,450 --> 00:46:30,529
same script that we've launched before
the exploit and now we can see all of

457
00:46:30,530 --> 00:46:35,590
the all of the structure so we thought
all of the following the virtual machine

458
00:46:35,590 --> 00:46:44,850
control structures right therefore let
let's say for root partition sorry so

459
00:46:44,850 --> 00:46:53,160
that just basically demonstrates that we
have access to all of the structures

460
00:46:53,160 --> 00:46:56,629
protected by the by the harbor but
regardless of which guessed it is

461
00:46:56,630 --> 00:47:01,640
published or unpublished none of the
guests should have access to many of

462
00:47:01,640 --> 00:47:05,450
those structures because those are those
are essential structures providing

463
00:47:05,450 --> 00:47:09,490
protection of the hypervisor and
isolation between the guests so now

464
00:47:09,490 --> 00:47:17,620
using that exploit we can fully modify
it we're done this structures so that

465
00:47:17,620 --> 00:47:25,850
that wasn't so that the if we go back to
to win and this is all things like have

466
00:47:25,850 --> 00:47:32,180
explored and they've already explored
those kind of you know mechanisms to use

467
00:47:32,180 --> 00:47:38,460
to use firmer in this case legacy bus
rammed you are to either compromise a

468
00:47:38,460 --> 00:47:42,300
hypervisor or install -y you know
hypervisor underneath it

469
00:47:42,300 --> 00:47:49,700
global hypervisor so this is basically
the same idea so all of those

470
00:47:49,700 --> 00:47:59,000
vulnerabilities are exploitable from a
privileged guests 0 weird position so

471
00:47:59,000 --> 00:48:04,080
that requires he privilege escalation
from a normal yes to partition or a

472
00:48:04,080 --> 00:48:06,619
remote exploit in the root partition

473
00:48:06,619 --> 00:48:13,059
so well which sort of have a limit the
impact however what about the use cases

474
00:48:13,059 --> 00:48:19,650
where the guests must be strongly
isolated from the root partition so

475
00:48:19,650 --> 00:48:25,450
we've we've heard a presentation by self
from microsoft today by the windows 10

476
00:48:25,450 --> 00:48:32,930
new a West bit you know virtualization
basic mobile so we are working with

477
00:48:32,930 --> 00:48:39,308
Microsoft on making sure that those
attacks are not applicable and don't

478
00:48:39,309 --> 00:48:46,660
affect this new virtualization a
security model windows so now with all

479
00:48:46,660 --> 00:48:51,960
of those attacks one of the medications
available today or tools first of all

480
00:48:51,960 --> 00:48:56,130
the first things first if your former
husband abilities they need to be fixed

481
00:48:56,130 --> 00:49:01,329
because if we as we saw vulnerabilities
in the Premier are pretty pretty pretty

482
00:49:01,329 --> 00:49:06,900
bad for hypervisors so there are tools
available to test for all of those

483
00:49:06,900 --> 00:49:13,890
vulnerabilities that I described in the
India trip there also told the test you

484
00:49:13,890 --> 00:49:18,788
free allow you to tell if you're a
former is write protected all the

485
00:49:18,789 --> 00:49:21,710
protections are in place then
hypervisors

486
00:49:21,710 --> 00:49:28,170
obviously the you know the kid
hypervisors needs to be tested for

487
00:49:28,170 --> 00:49:32,589
vulnerabilities Cindy emulating devices
and we're releasing a number of simple

488
00:49:32,589 --> 00:49:37,769
test the test all of those factors
simulation vectors that Alex described

489
00:49:37,769 --> 00:49:41,368
in this presentation so and also we are
releasing some of the tools that can

490
00:49:41,369 --> 00:49:46,900
allow you to explore the internals of
the hypervisor know how do we deal with

491
00:49:46,900 --> 00:49:52,940
the former attacks there is that there
are a number of interfaces to reach

492
00:49:52,940 --> 00:49:56,569
former can be exploited you five
variables as my handlers must reboot

493
00:49:56,569 --> 00:50:03,579
create this by flash memory and so on so
the the the the

494
00:50:03,579 --> 00:50:08,309
in certain cases the former doesn't do
the page is protected by the hypervisor

495
00:50:08,309 --> 00:50:13,410
sodium lamps need to be very careful
with which interfaces and expose us to

496
00:50:13,410 --> 00:50:18,980
guests including the privilege guests
and conclusions so compromised former is

497
00:50:18,980 --> 00:50:19,840
bad news for

498
00:50:19,840 --> 00:50:25,400
virtualization for the MME can expose
anything in every guest windows down

499
00:50:25,400 --> 00:50:29,100
with windows tinted enable spell
performance deployment by the windows

500
00:50:29,100 --> 00:50:34,830
update which is a very big step forward
toward the security of the former secure

501
00:50:34,830 --> 00:50:42,170
privilege or administrative guests make
sure that you don't know they are very

502
00:50:42,170 --> 00:50:46,220
tight in because attacks from those
matter they can compromise everything in

503
00:50:46,220 --> 00:50:51,580
the hypervisor the vulnerability of you
emulation are very common so we need to

504
00:50:51,580 --> 00:50:56,110
pause for every year the immolation
interfaces and the firmer interfaces and

505
00:50:56,110 --> 00:51:01,430
pictures may affect hypervisor security
if exposed to the guests so both need to

506
00:51:01,430 --> 00:51:07,180
be designed both hypervisors and to be
aware of each other even if the former

507
00:51:07,180 --> 00:51:13,080
is free of vulnerabilities the former
can be used as a proxy is a confused

508
00:51:13,080 --> 00:51:18,720
deputy to attack hypervisor from within
the virtual machine and without a

509
00:51:18,720 --> 00:51:21,310
concluding this presentation thank you

