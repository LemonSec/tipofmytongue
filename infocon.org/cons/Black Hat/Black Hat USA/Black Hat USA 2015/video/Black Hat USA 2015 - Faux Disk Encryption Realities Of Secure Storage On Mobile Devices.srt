1
00:00:00,000 --> 00:00:06,089
hi everyone thank you for coming to
black hat 2015 couple quick

2
00:00:06,089 --> 00:00:10,750
announcements there will be a reception
tonight in the business hole at 5:30

3
00:00:10,750 --> 00:00:15,450
p.m. the Business Hall is located in
Shoreline a room

4
00:00:15,450 --> 00:00:20,740
second item is the pony awards will take
place tonight and the Mandalay Bay bees

5
00:00:20,740 --> 00:00:27,220
D&D now at 6:30 so if you heard earlier
that it was six that has changed to 630

6
00:00:27,220 --> 00:00:36,960
ish and that you are in lagoon for the
session vote just encryption realities

7
00:00:36,960 --> 00:00:43,820
of secure storage on mobile devices with
Daniel Meyer Andrews whereas if everyone

8
00:00:43,820 --> 00:00:52,070
could please make sure you silence your
cell phone and enjoy the session

9
00:00:52,070 --> 00:00:55,559
good afternoon thank you everybody for
coming to our talk about for description

10
00:00:55,559 --> 00:01:00,339
and the realities secure storage mobile
devices I'm Daniel principal security

11
00:01:00,340 --> 00:01:06,490
consulting with NCC group security we
are a concern security consultants even

12
00:01:06,490 --> 00:01:11,740
be able to do software escrow and demand
services among a number of other

13
00:01:11,740 --> 00:01:17,970
services headquarters are in the UK but
we have about 20 visits around tus I'm

14
00:01:17,970 --> 00:01:21,939
kind of guy so the sections will be I
will be talking about will be more and

15
00:01:21,939 --> 00:01:29,449
iOS developers panting cool but IDB
maybe you've heard of it where is also a

16
00:01:29,450 --> 00:01:33,720
security consultant with the SEC group
I'm also a member of the open-source

17
00:01:33,720 --> 00:01:38,780
wing of the CyanogenMod project helping
bring up new devices and also writing

18
00:01:38,780 --> 00:01:44,899
the building and export documentation
for the wiki for them to get started a

19
00:01:44,899 --> 00:01:46,740
brief outline here

20
00:01:46,740 --> 00:01:49,170
introduction will be I'm giving some
background on what are the challenges

21
00:01:49,170 --> 00:01:52,390
and mobile devices compared to like
traditional client-server settings to

22
00:01:52,390 --> 00:01:56,950
secure data talking about which
mechanisms IRS provides for that and

23
00:01:56,950 --> 00:01:59,960
then do a similar thing for Android and
talk about the challenges there which

24
00:01:59,960 --> 00:02:04,579
are more particular and chile also
attacked in a way we have come up with

25
00:02:04,579 --> 00:02:06,100
the best political corruption

26
00:02:06,100 --> 00:02:10,788
on some Android devices and then we will
summarize this and try to give an

27
00:02:10,788 --> 00:02:13,230
outlook will be seen by the challenges
are in the industry and what he would

28
00:02:13,230 --> 00:02:18,269
like like to happen in the future so
what makes mobile special so he have a

29
00:02:18,270 --> 00:02:21,260
traditional client service I think all
the data stored on the server and you

30
00:02:21,260 --> 00:02:25,109
can enforce tighter controls on it you
can have your views as logging in and

31
00:02:25,110 --> 00:02:28,470
you have indication that things like
that but if you have a mobile device it

32
00:02:28,470 --> 00:02:33,380
turns out that most users are not using
the device or accessing data the Safari

33
00:02:33,380 --> 00:02:37,470
or any kind of embedded browser but they
actually do is to use mostly apps on the

34
00:02:37,470 --> 00:02:41,440
device and those abs are storing data
locally on the device and it's much

35
00:02:41,440 --> 00:02:46,720
harder to access our to secure that data
rather than a problem well if you look

36
00:02:46,720 --> 00:02:51,280
at the statistics here and the USA in
2013 alone there were 1.4 million homes

37
00:02:51,280 --> 00:02:55,739
lost and 3.1 million phone stolen so
there is definitely a need to secure the

38
00:02:55,739 --> 00:02:58,660
state over to stored on the device to
protected in these kind of circumstances

39
00:02:58,660 --> 00:03:04,950
but at the same time we need data on the
device you can I just prevent users from

40
00:03:04,950 --> 00:03:08,890
storing something there so we have the
flexibility accessibility problem of

41
00:03:08,890 --> 00:03:12,488
having data on the device and needing to
protected and this can be data can be

42
00:03:12,489 --> 00:03:17,019
you the names and passwords or any kind
of other credentials on the device and

43
00:03:17,019 --> 00:03:21,230
then on top of all that we have to
reconcile those two concepts while still

44
00:03:21,230 --> 00:03:25,179
making a usable Sophie building secure
system where nobody can get to the data

45
00:03:25,180 --> 00:03:29,090
are used as I headed by a deadly don't
use it or try to bypass all the controls

46
00:03:29,090 --> 00:03:34,140
and they will never be imposing on them
just as random as what I'm coming here

47
00:03:34,140 --> 00:03:41,268
thinks so it goes without saying there's
no such thing as absolute security but

48
00:03:41,269 --> 00:03:45,300
it helps to look at who you're concerned
about with the data on your device

49
00:03:45,300 --> 00:03:50,600
and what you want to protect so there's
things like remote attackers somebody

50
00:03:50,600 --> 00:03:56,030
who is trying to remotely access your
device the coffee shop attacker which is

51
00:03:56,030 --> 00:04:00,640
somebody who sets up a rogue AP it a
public place trying to get connections

52
00:04:00,640 --> 00:04:04,859
or perhaps they've had to the public
wifi there is your casual thief who

53
00:04:04,860 --> 00:04:08,030
really doesn't care too much about the
data on your device they just want to

54
00:04:08,030 --> 00:04:12,590
put the hardware and make a quick buck
then there's more targeted attacks

55
00:04:12,590 --> 00:04:16,410
somebody who specifically coming
directly for you for what a particular

56
00:04:16,410 --> 00:04:21,739
reason and then we have nation states
who have a lot more time money and

57
00:04:21,738 --> 00:04:26,440
resources to dedicate something like
that so if we put those out on a graph

58
00:04:26,440 --> 00:04:31,800
of the sophistication of the attack and
the effort involved in kind of place

59
00:04:31,800 --> 00:04:36,130
things we just talked about with you
know the casualty of being very

60
00:04:36,130 --> 00:04:39,520
unsophisticated and and requiring very
little effort to snatch something from

61
00:04:39,520 --> 00:04:43,530
you all the way up to the nation state
which would require more sophistication

62
00:04:43,530 --> 00:04:49,400
more effort on their part so they are
going to talk a little bit about mobile

63
00:04:49,400 --> 00:04:58,390
data security actually I'm going to bed
so the security one word first because

64
00:04:58,390 --> 00:05:01,770
this is kind of a call comes out when
people think about mobile devices for

65
00:05:01,770 --> 00:05:05,750
this encryption everybody knows how has
the description I S has so our data is

66
00:05:05,750 --> 00:05:08,720
secure on their own thing to keep in
mind

67
00:05:08,720 --> 00:05:12,680
encrypt and decrypt data transparently
for you many other devices turned on so

68
00:05:12,680 --> 00:05:16,650
you don't get any protection when the
device is actually running so the only

69
00:05:16,650 --> 00:05:19,789
way to protect it would be to have the
device turned off all the times and

70
00:05:19,790 --> 00:05:22,610
while there may be some areas where you
purposely turn your device off to

71
00:05:22,610 --> 00:05:26,430
protect it at that point this may not be
sufficient you need more fine-grained

72
00:05:26,430 --> 00:05:30,440
control in the way that we wanted to
have already faces on and still be able

73
00:05:30,440 --> 00:05:33,250
to protect data so we need some more
fine-grained control to control access

74
00:05:33,250 --> 00:05:38,850
better than device on a device off and
we need to look at what kind of

75
00:05:38,850 --> 00:05:46,260
facilities I saw the first distinct
advantage it has over Android as well as

76
00:05:46,260 --> 00:05:50,750
to some extent Microsoft is that they
produce the hardware and the software so

77
00:05:50,750 --> 00:05:54,600
they can build our procedures and office
support for them and they can build

78
00:05:54,600 --> 00:05:56,340
support for certain something catches

79
00:05:56,340 --> 00:05:59,909
and that allows them to start

80
00:05:59,910 --> 00:06:03,580
security on the device really from the
mood so we have a rhombus has died in

81
00:06:03,580 --> 00:06:07,650
there and they can verify that the
bootloader the cardinal and everything

82
00:06:07,650 --> 00:06:12,570
following there is actually signed by
that but I T A and we know that it's

83
00:06:12,570 --> 00:06:15,880
just that has been modified by an
attacker and moreover want to look at

84
00:06:15,880 --> 00:06:19,639
the operating system itself all updates
as unbearable as well so if you're

85
00:06:19,639 --> 00:06:25,690
installing you I S you have to guarantee
that it's an authentic product and it

86
00:06:25,690 --> 00:06:30,100
would not run otherwise on the DeVos
family there is no downgrade to load

87
00:06:30,100 --> 00:06:34,830
this whatever reason it may have why
this is implemented but the good thing

88
00:06:34,830 --> 00:06:38,469
is that if you have a security patches
to an update you cannot revert from that

89
00:06:38,470 --> 00:06:43,010
you cannot get less protected basically
under latest release and lastly we have

90
00:06:43,010 --> 00:06:46,229
up signing which is dealing with
anything running on the on the operating

91
00:06:46,229 --> 00:06:50,620
system and all apps have to be signed by
by Apple when you don't have from the

92
00:06:50,620 --> 00:06:54,940
App Store decisive some significant to
some people and that actually goes all

93
00:06:54,940 --> 00:06:58,789
the way down to the code levels if you
run code every code pieces checked

94
00:06:58,789 --> 00:07:04,200
minutes being executed and finally if
you do bring your device which is the

95
00:07:04,200 --> 00:07:08,650
research community at least you lose a
lot of these protections from securing

96
00:07:08,650 --> 00:07:11,388
yourself standpoint it's not very
recommendable to get a break your device

97
00:07:11,389 --> 00:07:15,970
and we'll talk about that in a bit let's
talk about how we implement encryption

98
00:07:15,970 --> 00:07:20,620
using using this platform the first
thing is in order to protect something

99
00:07:20,620 --> 00:07:23,789
on the device if somebody steals it from
you we have to have something which is

100
00:07:23,789 --> 00:07:27,289
not on the device because somebody gets
that kind of read anything off the

101
00:07:27,289 --> 00:07:30,200
device and if there would be an
encryption key to be using that could be

102
00:07:30,200 --> 00:07:34,539
dangerous when he and decrypt any data
so that the device passcode comes in so

103
00:07:34,539 --> 00:07:38,919
whenever you type in your passcode on an
iOS device it will use PDF to derive

104
00:07:38,919 --> 00:07:43,200
from that and use that to read data but
you choose to protect under this class

105
00:07:43,200 --> 00:07:47,450
and then you accuse me about every time
you lock the device to device locked

106
00:07:47,450 --> 00:07:50,729
this data is not accessible by the
problem is that a lot of studies have

107
00:07:50,729 --> 00:07:53,880
shown you this i really bad at choosing
strong Cusco it's because it has a

108
00:07:53,880 --> 00:07:58,820
usability and just copy the data off the
device and then performing off a plan

109
00:07:58,820 --> 00:08:03,570
could force attacked so for that to
pretend that we have some sort of tie

110
00:08:03,570 --> 00:08:05,729
into the hardware some hardwood of trust

111
00:08:05,729 --> 00:08:10,628
and iOS devices we have the player
reaches holding the encryption keys

112
00:08:10,629 --> 00:08:13,629
inside of it and we can only ask
attitude

113
00:08:13,629 --> 00:08:18,169
operation for us giving additional
information but they cannot read that

114
00:08:18,169 --> 00:08:21,680
key off the device so somebody better
mood for something they will never get

115
00:08:21,680 --> 00:08:25,150
that piece of the key so then would need
to undertake on the device which is much

116
00:08:25,150 --> 00:08:29,248
slower so we can enforce brute force
controls and we can also be made up on

117
00:08:29,249 --> 00:08:35,320
the device if there is too many held
towns so let's see how this operates

118
00:08:35,320 --> 00:08:39,719
into the general structure and how data
or files are encrypted and iOS four this

119
00:08:39,719 --> 00:08:43,099
graph starts out here in the lower right
to see the file which is protected and

120
00:08:43,099 --> 00:08:47,089
every file has a file he reaches an
associate over there is just on the file

121
00:08:47,089 --> 00:08:51,240
system and then we take this into the
hardware by having the hard Ricky from a

122
00:08:51,240 --> 00:08:55,170
tree but the to protect us about
filesystem keep it protects the file he

123
00:08:55,170 --> 00:09:00,810
so that we basically type this file to
the device operation with that fire has

124
00:09:00,810 --> 00:09:04,079
to happen on the device but the problem
is that he steal the device to get

125
00:09:04,079 --> 00:09:09,250
access to it you can still simply
perform that operation on the device and

126
00:09:09,250 --> 00:09:12,529
led to pretend that we don't have to
pass code has already mentioned and the

127
00:09:12,529 --> 00:09:16,589
passcode is used to derive another key
and then that he is combined with a hard

128
00:09:16,589 --> 00:09:19,760
dick in some manner should be writes
about class Keys official talked about

129
00:09:19,760 --> 00:09:23,089
in a second and then those together with
the file system here used to represent

130
00:09:23,089 --> 00:09:27,569
pilot he did you see in the lower right
you may wonder why the hell to sink in

131
00:09:27,569 --> 00:09:31,910
that case the good thing about this is
if you want to remotely by beauty advice

132
00:09:31,910 --> 00:09:36,620
or you want to delete the data on it you
can just delete that key and not on the

133
00:09:36,620 --> 00:09:41,569
file single be accessible anymore so
they look at the glass cases the goal

134
00:09:41,569 --> 00:09:47,019
for the whole mechanism was to have more
fine-grained control over here at slip

135
00:09:47,019 --> 00:09:53,300
these up we have an asset protection on
which is only tied into the car tricky

136
00:09:53,300 --> 00:09:57,649
and then we have the other two which
also tied into the passcode so if you

137
00:09:57,649 --> 00:10:03,389
use the one which is called protection
complete until indication files will be

138
00:10:03,389 --> 00:10:07,389
protected until from the time you turn
on your device until the first the first

139
00:10:07,389 --> 00:10:10,870
time do you unlock the device and that
it will be accessible from then on 4th

140
00:10:10,870 --> 00:10:15,500
very similar to a full disk encryption
and the other one

141
00:10:15,500 --> 00:10:19,770
the protection just complete tyson fully
with a passcode and the key will be by

142
00:10:19,770 --> 00:10:24,740
Penn Ave you lock the device that kind
of sums up the brief overview of the

143
00:10:24,740 --> 00:10:29,100
different functionality available to
protect files and iOS the other facility

144
00:10:29,100 --> 00:10:33,670
because there is i rest the IRS keychain
and thats internally it's just a single

145
00:10:33,670 --> 00:10:38,099
database blitz on the file system and in
there we have different countries which

146
00:10:38,100 --> 00:10:42,850
are protected using different he's so
you have each entry in the industry is

147
00:10:42,850 --> 00:10:46,440
protected using a keyboard give you the
different guarantees we talked about the

148
00:10:46,440 --> 00:10:50,380
three some other mechanism I have for
this is that if you uninstall an

149
00:10:50,380 --> 00:10:54,230
application and will not delete the data
that's not even a way to put the

150
00:10:54,230 --> 00:10:58,310
uninstall process and delete data so you
make an application would start

151
00:10:58,310 --> 00:11:01,180
something sensitive in there and a year
later somebody can get your phone and

152
00:11:01,180 --> 00:11:08,370
data will still be in the key chain
keychain protections are very similar to

153
00:11:08,370 --> 00:11:12,530
the ones we talked about for the file
system we have the 99 class which is

154
00:11:12,530 --> 00:11:16,750
equivalent to get an accessible always
gave up the first unlock which is the

155
00:11:16,750 --> 00:11:21,250
same as I talked about before and then
when i unlock it the only thing which is

156
00:11:21,250 --> 00:11:26,710
different is a beer is a new option here
but it's called been set and a common

157
00:11:26,710 --> 00:11:29,410
problem that came up is that if you
don't control your devices like you have

158
00:11:29,410 --> 00:11:33,459
an MDM solution cooperation you cannot
afford that you have passcode said on

159
00:11:33,460 --> 00:11:37,280
the device so historic data indicates
there may actually not be protected

160
00:11:37,280 --> 00:11:41,520
probably because you didn't choose to
have a passcode so this if you started

161
00:11:41,520 --> 00:11:45,199
with men test could set it was actually
only store the data if there's a

162
00:11:45,200 --> 00:11:49,300
passcode on the device and remove the
data using the passcode protects that

163
00:11:49,300 --> 00:11:54,800
you may wonder why we need all these
different classes and this comes back to

164
00:11:54,800 --> 00:11:58,630
having this granular control over your
data and protecting it for the right

165
00:11:58,630 --> 00:12:03,430
circumstances so there's some data to be
accessible always you want to turn your

166
00:12:03,430 --> 00:12:06,089
phone on and you've got to be able to
reef phone calls you want to be able to

167
00:12:06,089 --> 00:12:09,490
receive messages to all he's and data
related to that needs to be always

168
00:12:09,490 --> 00:12:13,880
accessible to the device but there are
other things take a while if potentials

169
00:12:13,880 --> 00:12:17,550
evoked potentials and it's acceptable
for you to first undergo device at least

170
00:12:17,550 --> 00:12:21,410
once before you can use those services
so we can protect those more

171
00:12:21,410 --> 00:12:24,939
have to use at least type in the
password once in order to use them and

172
00:12:24,940 --> 00:12:28,949
then finally things like Safari password
to backup potentials you will not need

173
00:12:28,949 --> 00:12:32,889
when the devices luck because you are
even the devices so you can protect them

174
00:12:32,889 --> 00:12:36,709
but there's even stronger protection
class and have only just leaving the

175
00:12:36,709 --> 00:12:43,319
device unlocked so following this line
about usability one important thing is

176
00:12:43,319 --> 00:12:46,839
that if you always need to unlock the
device in order to to use it you have to

177
00:12:46,839 --> 00:12:51,089
type in the passcode for the tragedy if
you choose to use my voice and I think

178
00:12:51,089 --> 00:12:54,120
it has been in the beginning pretty much
misunderstood or misinterpreted because

179
00:12:54,120 --> 00:12:59,230
the big news about how it can be
bypassed that's true but how many of you

180
00:12:59,230 --> 00:13:02,310
are actually concerned somebody going to
a bar lifting your fingerprint access

181
00:13:02,310 --> 00:13:06,660
your particular data versus somebody
being able to mess compromise people so

182
00:13:06,660 --> 00:13:09,879
there's a tradeoff between detective
you're trying trying to protect against

183
00:13:09,879 --> 00:13:15,699
any protects against protects the
passcode basically see time in the past

184
00:13:15,699 --> 00:13:19,560
but very first time you start the device
and stored in the kinder securing cliff

185
00:13:19,560 --> 00:13:21,209
and then it will only be released

186
00:13:21,209 --> 00:13:25,959
whenever the potentially receive
developing event and then the encryption

187
00:13:25,959 --> 00:13:31,790
is still based on the pass code itself
and besides device unlocked it also is

188
00:13:31,790 --> 00:13:37,029
tied into two mechanisms which are
exposed to the present with the keychain

189
00:13:37,029 --> 00:13:40,740
and that basically takes the granular
control one step further it's not only

190
00:13:40,740 --> 00:13:44,370
when the device is unlocked if the data
accessible but it's accessible when ever

191
00:13:44,370 --> 00:13:47,790
you it's protected until you actually
try to read it so you try to read a

192
00:13:47,790 --> 00:13:51,680
keychain I don't dial are popping up
safely slide your finger into your

193
00:13:51,680 --> 00:13:56,729
passcode very similarly local
authentication but this is a test level

194
00:13:56,730 --> 00:14:01,029
API it's not tied into encryption for
the keychain and it basically does your

195
00:14:01,029 --> 00:14:04,600
application to ask the operating system
to say hey is the right person there and

196
00:14:04,600 --> 00:14:11,709
if so it will allow you to allow the
user to well it will prompt the user and

197
00:14:11,709 --> 00:14:16,000
give your fingerprint on it and it will
tell the application yes they were you

198
00:14:16,000 --> 00:14:19,389
there was there but he did bring the
device and you get control over the

199
00:14:19,389 --> 00:14:22,899
operating system you can just modify
this API calls and can just tell any

200
00:14:22,899 --> 00:14:26,550
application that was there so the
control over the keychain is

201
00:14:26,550 --> 00:14:27,900
significantly stronger

202
00:14:27,900 --> 00:14:33,170
than just having a noise level API for
that so with that but that leave us with

203
00:14:33,170 --> 00:14:38,199
security threats 45 s good thing as too
since the stock is pretty pretty

204
00:14:38,200 --> 00:14:43,120
protected overall you need to bypass
some of the existing controls in order

205
00:14:43,120 --> 00:14:47,170
to gain significant access to the device
so if you jailbreak your device and you

206
00:14:47,170 --> 00:14:51,500
find a flawed logic allows you to buy
personal checking and jailbreak it you

207
00:14:51,500 --> 00:14:54,610
can get access to everything but just
not protected under the passcode because

208
00:14:54,610 --> 00:14:57,900
if you the passcode you don't know that
you cannot derive the encryption key for

209
00:14:57,900 --> 00:15:02,810
that and you cannot get access to that
data other things which may be a threat

210
00:15:02,810 --> 00:15:05,939
or just malicious applications which are
asking for a lot of permissions and

211
00:15:05,940 --> 00:15:11,240
trying to access more later than they
should be and then sell attacks were

212
00:15:11,240 --> 00:15:15,150
truly talking about a bit more detail
and they're tying into jailbreaking and

213
00:15:15,150 --> 00:15:18,360
modifying some parts of the operating
system and we will talk about that in

214
00:15:18,360 --> 00:15:23,470
more detail after the introduction i
mean that ended up to do to talk about a

215
00:15:23,470 --> 00:15:27,780
hundred compares to this thanks to know
so let's look at how and raided two

216
00:15:27,780 --> 00:15:33,939
approaches the same challenges that we
just saw us so this is a helpful graph

217
00:15:33,940 --> 00:15:37,800
to see the evolution of the introduction
of new security features into Android

218
00:15:37,800 --> 00:15:41,180
and we can see as time has gone on we've
gotten more and more advanced things

219
00:15:41,180 --> 00:15:44,839
I've highlighted the ones and blue that
potentially difficult to secure storage

220
00:15:44,840 --> 00:15:50,960
but left the other story free to look at
later as well so the ones specific to

221
00:15:50,960 --> 00:15:57,050
the security data stories that I find
interesting are p.m. parity which is

222
00:15:57,050 --> 00:16:01,849
relatively new was introduced in an
Android 404 and this protects the system

223
00:16:01,850 --> 00:16:06,700
partition by taking a sharp one block
and then building a tree I'm at such

224
00:16:06,700 --> 00:16:10,360
that if you need to modify the system
partition such that you want like a

225
00:16:10,360 --> 00:16:14,590
persistent rude it's going to realize
that it's broken at that point and give

226
00:16:14,590 --> 00:16:18,830
you a nasty warning when you boot
there's also the trusted execution

227
00:16:18,830 --> 00:16:21,980
environment signing of the King
corruption key which I will talk about

228
00:16:21,980 --> 00:16:26,870
in more detail later as well as forcing
crips so for some trip was launched with

229
00:16:26,870 --> 00:16:31,810
Android 5.0 in the attempt to enable
full disk encryption out of the box

230
00:16:31,810 --> 00:16:36,550
because up until that point this was a
user-selectable feature so you had to go

231
00:16:36,550 --> 00:16:39,099
through a bunch of settings menus and
say yes I want to

232
00:16:39,100 --> 00:16:44,410
Tobias and go to really like a half hour
painful review process to enable that

233
00:16:44,410 --> 00:16:50,079
unfortunately one could speculate that
Google's OEM partners weren't quite

234
00:16:50,080 --> 00:16:54,990
ready for that so they quietly removed a
requirement for a lollipop so really the

235
00:16:54,990 --> 00:16:59,200
only devices that launched with force
encryption were Google's own Nexus line

236
00:16:59,200 --> 00:17:06,890
simply look at the adoption of Andreas a
platform it's pretty easy to see and you

237
00:17:06,890 --> 00:17:10,010
know everyone's heard of the
fragmentation problem in and read a lot

238
00:17:10,010 --> 00:17:13,579
of users are on an older version of the
platform at this point the majority of

239
00:17:13,579 --> 00:17:18,849
the users are not using the latest
possible version so it's interesting to

240
00:17:18,849 --> 00:17:24,209
compare that back to iOS and see that
the majority of users are on the latest

241
00:17:24,210 --> 00:17:29,770
version and thus the latest security
features available to them so why is

242
00:17:29,770 --> 00:17:34,840
this so important to the ecosystem it
was a very large facts on application

243
00:17:34,840 --> 00:17:38,860
developers who want to make their up
kitchen run on all versions of the

244
00:17:38,860 --> 00:17:43,260
platform but can't guarantee that they
have access to the security API is in

245
00:17:43,260 --> 00:17:46,930
the features that the newer versions
have provided so there's a there's a

246
00:17:46,930 --> 00:17:50,760
code complexity problem in that you need
to make decisions based on what version

247
00:17:50,760 --> 00:17:55,260
here applications running on and as we
mentioned access to the most secure

248
00:17:55,260 --> 00:18:00,010
features is not always available for
everyone and that brings us to like the

249
00:18:00,010 --> 00:18:04,510
interesting problem of the OTA process
for Android and this is a very complex

250
00:18:04,510 --> 00:18:08,710
problem that I'm summarizing very
quickly for you but Google tends to

251
00:18:08,710 --> 00:18:13,970
provide these things pretty quickly and
iOS and Android Open Source project but

252
00:18:13,970 --> 00:18:18,940
it takes a while for those actually to
get out to the end user because OEMs

253
00:18:18,940 --> 00:18:22,600
like to customize and right and have
their own brand and so they had on all

254
00:18:22,600 --> 00:18:26,639
these new features so when these things
come out it goes to the OEM level of

255
00:18:26,640 --> 00:18:30,530
them make their changes and then another
layer of complexity is that the carriers

256
00:18:30,530 --> 00:18:34,250
are involved in this as well so the
carriers need to certify the bills they

257
00:18:34,250 --> 00:18:39,070
want to add and you know the cool mask
our appt I guess or whatever to to the

258
00:18:39,070 --> 00:18:43,220
wrong so this this makes things slower
in terms of like users actually

259
00:18:43,220 --> 00:18:44,060
receiving

260
00:18:44,060 --> 00:18:48,899
timely updates to their device so we're
going to briefly talk about how the

261
00:18:48,900 --> 00:18:53,080
Android encryption system works this is
a simplified version and also of note

262
00:18:53,080 --> 00:18:57,649
this is the Google specific version OEM
stand to make modifications to this but

263
00:18:57,650 --> 00:19:02,430
that's sort of outside the scope of what
we're going to talk about here so device

264
00:19:02,430 --> 00:19:07,760
encryption key is generated randomly
when you elect to enable for full

265
00:19:07,760 --> 00:19:13,310
description is this is based on p.m.
crips the device mapper portion of the

266
00:19:13,310 --> 00:19:20,179
Linux kernel it uses a S 128th and CBC
mode along with Amir sign me Shot 256

267
00:19:20,180 --> 00:19:26,740
for each of these sectors and then you
encrypt the volume in this fashion but

268
00:19:26,740 --> 00:19:31,060
since this is not drive from the user
pass code we need some way to have a

269
00:19:31,060 --> 00:19:34,830
passcode on top of that such that if you
want to change your passcode you don't

270
00:19:34,830 --> 00:19:38,090
have to recoup your volume so this
problem is solved with what's called the

271
00:19:38,090 --> 00:19:43,459
key encryption key and an initialization
vector and so the key encryption key is

272
00:19:43,460 --> 00:19:48,300
derived from a user-supplied passcode
this wraps the device encryption key and

273
00:19:48,300 --> 00:19:51,570
then that is stored encrypted in the
crypt of water which I'll get more into

274
00:19:51,570 --> 00:19:56,639
later so we can see here at the lock
screen this can be a pin pattern of

275
00:19:56,640 --> 00:20:03,470
Pasco and in Android for top three in
below this was handled by PK tf2 after

276
00:20:03,470 --> 00:20:08,440
including the KitKat release and red
Ford up for Google switch to a script in

277
00:20:08,440 --> 00:20:14,490
an attempt to reduce the the brute force
attacks on the pin codes and then

278
00:20:14,490 --> 00:20:20,070
finally in lollipop Google introduced a
new feature that allows you to find the

279
00:20:20,070 --> 00:20:23,770
password key with something from the
trusted execution environment that

280
00:20:23,770 --> 00:20:28,530
cannot be removed such that if you wanna
do some sort of attack on this you're

281
00:20:28,530 --> 00:20:35,050
going to need to use the device now and
this is this was brand-new 44 5.0 so

282
00:20:35,050 --> 00:20:39,389
referring back to the Christopher it's
it's worth noting that entrance full

283
00:20:39,390 --> 00:20:43,600
disk encryption actually only protects
one partition of the entire flash device

284
00:20:43,600 --> 00:20:47,139
and that's the user data partition this
is where all user settings are stored

285
00:20:47,140 --> 00:20:51,670
and he think you download is is is
stored there

286
00:20:51,670 --> 00:20:55,060
the christopher which I referred to
earlier is usually carved out of this

287
00:20:55,060 --> 00:20:56,269
user data partition

288
00:20:56,269 --> 00:21:01,249
its sixteen kilobytes at the very end of
it more modern devices we're starting to

289
00:21:01,249 --> 00:21:06,279
see that there's a dedicated partition
for metadata and as I mentioned the

290
00:21:06,279 --> 00:21:10,830
master key or the device key is stored
as encrypted by the key encryption key

291
00:21:10,830 --> 00:21:15,269
here if you're familiar with locks at
all it's it's a very similar idea except

292
00:21:15,269 --> 00:21:20,889
as one significant difference in that it
only has one key slot so you're only

293
00:21:20,889 --> 00:21:27,320
able to have one key store and there's a
lot of projects that require you know

294
00:21:27,320 --> 00:21:30,799
having customization of of the wrong
you're running but that allow you to

295
00:21:30,799 --> 00:21:34,969
have a very strong boot decryption
password and then also have like a

296
00:21:34,969 --> 00:21:38,589
passcode that's a little bit more
reasonable so that you can have the very

297
00:21:38,589 --> 00:21:42,619
complex one in the in the more
user-friendly one as well but again this

298
00:21:42,619 --> 00:21:48,478
is not standard and requires
modification to perform so word on how

299
00:21:48,479 --> 00:21:53,029
it handles credential storage the system
credential store will hold things like

300
00:21:53,029 --> 00:21:59,129
DPN keys wifi is symmetric keys either
from applications or your own case if

301
00:21:59,129 --> 00:22:05,759
you want these are encrypted by keith is
derived from the user's passcode and

302
00:22:05,759 --> 00:22:10,719
this can be hardware backs which is a
new security feature that a lot of

303
00:22:10,719 --> 00:22:14,429
devices are shipping with these days
that actually lets you store the key is

304
00:22:14,429 --> 00:22:18,570
an and hardware backing such that they
can be removed from the device so this

305
00:22:18,570 --> 00:22:23,779
this adds additional security for
obvious reasons there but there are some

306
00:22:23,779 --> 00:22:27,869
issues with the keystore namely the fact
that you developers can really rely on

307
00:22:27,869 --> 00:22:32,509
the fact that somebody has a hardware
back east or so there are apts available

308
00:22:32,509 --> 00:22:36,499
that you can test to see if the system
running on one but again it's

309
00:22:36,499 --> 00:22:40,659
inconsistent and there have been a
number of issues that have actually been

310
00:22:40,659 --> 00:22:45,700
fixed in lollipop and 5.0 relating to
changing the user's password will

311
00:22:45,700 --> 00:22:49,469
actually obliterate keys from the
keystore and sort of erratic behavior so

312
00:22:49,469 --> 00:22:54,149
this is actually luckily improving with
its its well-documented now there's

313
00:22:54,149 --> 00:22:59,859
there's different conditions and you
know we don't have the bugs changing

314
00:22:59,859 --> 00:23:04,849
passcode below a key so it's insane
effort to make things more developer

315
00:23:04,849 --> 00:23:06,679
friendly

316
00:23:06,680 --> 00:23:12,510
so let's talk about Google and their OEM
partners here the biggest issue here is

317
00:23:12,510 --> 00:23:16,370
the wild inconsistency and how many
people make Android devices

318
00:23:16,370 --> 00:23:20,669
one of the great things about andrea is
that you can run on a very budget device

319
00:23:20,670 --> 00:23:24,880
or the current flagship and everything
in between so it's a very accessible

320
00:23:24,880 --> 00:23:29,870
platform but with it comes the downsides
of that you don't have all the security

321
00:23:29,870 --> 00:23:35,260
guarantees across the devices so there's
things like bootloader securities is

322
00:23:35,260 --> 00:23:40,320
wildly different hardware back Curtis
stories we just talked about the

323
00:23:40,320 --> 00:23:44,770
availability of a trusted execution
environment or a trust so potent and

324
00:23:44,770 --> 00:23:49,090
even the boot image type various by
device so it is a very complex system

325
00:23:49,090 --> 00:23:54,419
and with different OEM says I said
incomes different security precautions

326
00:23:54,420 --> 00:23:58,750
are protections I should say so a lot of
devices have an MMC right protection

327
00:23:58,750 --> 00:24:03,700
layer so even if you are able to route
the main system you're not able to

328
00:24:03,700 --> 00:24:08,430
override certain partitions because all
just discard them at that level also

329
00:24:08,430 --> 00:24:13,520
have things like the boot image
signature verification so a lot of

330
00:24:13,520 --> 00:24:17,860
devices will verify that the the Buddha
images sign properly but a lot of them

331
00:24:17,860 --> 00:24:22,090
also one as well see coming up and then
there's also the different types of

332
00:24:22,090 --> 00:24:26,840
bootloader so there's locked such that
that's it you're not able to modify that

333
00:24:26,840 --> 00:24:31,270
in any way there is locked but
unlockable which is becoming more more

334
00:24:31,270 --> 00:24:36,480
common from things like Sony HTC Nexus
line obviously and this will allow you

335
00:24:36,480 --> 00:24:41,830
to get a token either from the developer
program or in the case of Nexus just

336
00:24:41,830 --> 00:24:45,820
enable the option and then use fastboot
to unlock your device and these will

337
00:24:45,820 --> 00:24:51,030
responsibly erase the user data
partition like you expect so it's a

338
00:24:51,030 --> 00:24:54,960
difficult problem to solve because it's
challenging for Google to enforce

339
00:24:54,960 --> 00:24:59,680
standards on their OEM partners because
they want to have their own devices they

340
00:24:59,680 --> 00:25:04,650
want to do things their own way and as I
mentioned earlier Apple has a distinct

341
00:25:04,650 --> 00:25:08,140
advantage here because they control the
entire stock from the harbor to the

342
00:25:08,140 --> 00:25:15,820
software so they can make this work a
lot more cohesively then then Google can

343
00:25:15,820 --> 00:25:20,490
so let's talk about the importance of
boots security which is central point of

344
00:25:20,490 --> 00:25:25,040
our discussion here so I'm the top left
there we have the bootloader which we've

345
00:25:25,040 --> 00:25:28,800
marked in green is being secure because
there's multiple layers of signing that

346
00:25:28,800 --> 00:25:32,530
happened as the different bootloaders
handoff to each other if the signing is

347
00:25:32,530 --> 00:25:33,129
broken

348
00:25:33,130 --> 00:25:37,800
you're pretty much not gonna get a boot
so we consider that to be well rounded

349
00:25:37,800 --> 00:25:41,120
and then all the way at the bottom we
have the user data partition as

350
00:25:41,120 --> 00:25:46,250
illustrated the user has elected to turn
on full disk encryption their protective

351
00:25:46,250 --> 00:25:51,160
of the slur but in the middle we have
two possible vulnerable places one with

352
00:25:51,160 --> 00:25:55,990
the kernel itself as I mentioned if
there's a lot of signing verification

353
00:25:55,990 --> 00:26:00,990
you cannot overwrite this was something
that you control and similarly the

354
00:26:00,990 --> 00:26:05,180
system partition which is where the main
operating system lives is not encrypted

355
00:26:05,180 --> 00:26:09,890
so in in cases where there's no diem
parody which is really not shipping on

356
00:26:09,890 --> 00:26:14,120
any devices at this moment you can
modify the system and make changes at

357
00:26:14,120 --> 00:26:19,459
that level so I want to show you
examples of that let's talk first about

358
00:26:19,460 --> 00:26:24,820
download mode or Odin mode this is a
Samsung specific but water interface

359
00:26:24,820 --> 00:26:31,750
that ships on all of their devices its
internally Samsung uses a tool called

360
00:26:31,750 --> 00:26:36,320
Odin to interact with this and it allows
you to arbitrarily right images to the

361
00:26:36,320 --> 00:26:40,470
different partitions on the flash and if
you're interested in this I would I

362
00:26:40,470 --> 00:26:44,870
would definitely recommend heimdal this
is a written by a guy called dental from

363
00:26:44,870 --> 00:26:48,590
Australia and he's sort of reverse how
it worked and made a cross-platform

364
00:26:48,590 --> 00:26:53,679
open-source version of this tool that
you can use but based on what I said

365
00:26:53,680 --> 00:26:56,820
it's clear that this is overly
permissive user should not be able to

366
00:26:56,820 --> 00:27:00,929
arbitrarily overwrite certain parts of
their device with with user control

367
00:27:00,930 --> 00:27:06,960
content and most of the devices that
ship our have this issue so outside of a

368
00:27:06,960 --> 00:27:13,010
few very select few s carrier models
most notably on the horizon or now on

369
00:27:13,010 --> 00:27:18,000
AT&T as well which do you check the
image signatures all of the

370
00:27:18,000 --> 00:27:20,140
International devices and all the other
ones

371
00:27:20,140 --> 00:27:27,800
have the ability to be interfaced with
in download mode little kernel is

372
00:27:27,800 --> 00:27:32,129
bootloader found on many Qualcomm
devices but even something that has open

373
00:27:32,130 --> 00:27:36,690
auditing has issues so there's a couple
CBAs related to this that would allow us

374
00:27:36,690 --> 00:27:42,390
to bypass image verification this first
one they forgot to actually check the

375
00:27:42,390 --> 00:27:46,080
signature in a bill that came out so
there's quite a few devices that let you

376
00:27:46,080 --> 00:27:47,300
just fast food

377
00:27:47,300 --> 00:27:50,940
boot your own image directly and then
from there you can do all sorts of fun

378
00:27:50,940 --> 00:27:55,530
things the next one is a little bit more
complex but you can afford signatures

379
00:27:55,530 --> 00:28:00,610
and the seizes our sake hubert attack I
would definitely recommend reading that

380
00:28:00,610 --> 00:28:05,110
CD for the details on that one it's a
little complex and the last one is is

381
00:28:05,110 --> 00:28:09,419
relatively new update your Flash will
pass before system it's typically a

382
00:28:09,420 --> 00:28:14,190
sparse bundle they did not check the end
of the bounds of where that sparkling

383
00:28:14,190 --> 00:28:17,680
landed so people figure it out as
possible for right past that boundary

384
00:28:17,680 --> 00:28:24,170
and potentially over a different parts
of the internal memory and lastly last

385
00:28:24,170 --> 00:28:28,800
which is properly title because this is
a hilarious back door let stand on a lot

386
00:28:28,800 --> 00:28:35,159
of LG devices you put into a special
mode similar to Samsung's download mode

387
00:28:35,160 --> 00:28:39,760
and then using a binary called send
command and it takes one argument and

388
00:28:39,760 --> 00:28:45,180
that is the COM port of the what your
devices plugged into and once you issue

389
00:28:45,180 --> 00:28:49,160
that command your dropped into ritual
and from there you can do all sorts of

390
00:28:49,160 --> 00:28:51,700
interesting things as well

391
00:28:51,700 --> 00:28:55,220
the unfortunate thing is that LG realize
that this is probably not a great idea

392
00:28:55,220 --> 00:29:00,010
and they tried to fix it but they're
fixes rather incomplete and so they

393
00:29:00,010 --> 00:29:06,680
decided to protect individual partitions
like block p1 p2 P three but blocks 0

394
00:29:06,680 --> 00:29:12,160
the root of that is not protected so you
can use DVD and seek and some clever

395
00:29:12,160 --> 00:29:16,910
offsets and actually over at the same
partitions you were able to before so

396
00:29:16,910 --> 00:29:22,800
users are able to impact the boot image
as well and this is actually ship on the

397
00:29:22,800 --> 00:29:28,970
Nexus 5 as well so let's revisit the
idea that Daniel brought up earlier that

398
00:29:28,970 --> 00:29:32,190
full disk encryption protects when the
device is turned off

399
00:29:32,190 --> 00:29:39,080
we are going to demonstrate that that's
not always true and and typical InfoSec

400
00:29:39,080 --> 00:29:44,250
fashioning the last few years there's
needs to be a cutie logo and titles for

401
00:29:44,250 --> 00:29:51,480
this so we're calling RPSC rosy the evil
Android even made and in the scenario we

402
00:29:51,480 --> 00:29:56,940
are exporting permissible orders so we
flash a custom do damage that we've back

403
00:29:56,940 --> 00:30:02,880
toward and this can happen in under two
minutes including multiple reboots we

404
00:30:02,880 --> 00:30:09,530
give this device back to the user login
with her encryption code and this

405
00:30:09,530 --> 00:30:13,700
becomes active we have profit here so
you can do things like colonel

406
00:30:13,700 --> 00:30:17,610
cryptographic functions and grab the
encryption key that way you can export

407
00:30:17,610 --> 00:30:22,939
trade data straight off the device which
we chose to do and you know shows

408
00:30:22,940 --> 00:30:27,250
anything he won you have a level access
at this point so we're gonna talk a

409
00:30:27,250 --> 00:30:31,950
little bit about how we tested and
devised this this ideal so the first

410
00:30:31,950 --> 00:30:37,559
step is to put your device into it's
permissible under state then we use the

411
00:30:37,559 --> 00:30:43,309
tools we referenced earlier to flash our
own custom recovery image and that sort

412
00:30:43,309 --> 00:30:46,970
of outside the scope of this but I've
done a lot of prior research recovery

413
00:30:46,970 --> 00:30:49,820
site I recommend if you're interested in
and what that is

414
00:30:49,820 --> 00:30:54,250
you can reference ID and learn on your
own but basically a custom recovery

415
00:30:54,250 --> 00:30:59,450
provides a nice test harness its
original you have access to all the

416
00:30:59,450 --> 00:31:02,690
unencrypted partitions as root so you
can mount file systems and make changes

417
00:31:02,690 --> 00:31:06,900
that way but it also is a very handy
platform for backing up essential

418
00:31:06,900 --> 00:31:11,409
firmware and also for flashing your own
firmware and getting to a place where if

419
00:31:11,409 --> 00:31:15,960
you write something that doesn't boot
you can come back to recovery fix it and

420
00:31:15,960 --> 00:31:22,510
then you're good to go so I'm gonna talk
a little bit about the next section we

421
00:31:22,510 --> 00:31:27,870
made our own first of all to get it back
toward likely O'Connell's which you get

422
00:31:27,870 --> 00:31:31,860
four hundred devices I'm sorry open
source because the license required them

423
00:31:31,860 --> 00:31:36,049
to make them open source so you can go
to any way I'm done with this kind of

424
00:31:36,049 --> 00:31:40,780
source code and then headed to court on
Monday old bridge was our back door just

425
00:31:40,780 --> 00:31:42,190
as opening up

426
00:31:42,190 --> 00:31:47,250
into its control and actual data files
on the device and obviously he added

427
00:31:47,250 --> 00:31:52,289
this to my contacts so that you can
conveniently a door back door here and

428
00:31:52,289 --> 00:31:56,929
there for testing purposes all you need
to do is create a Buddha mantra just

429
00:31:56,929 --> 00:32:01,980
takes a second or so and then we can
boot into recovery and flash the damage

430
00:32:01,980 --> 00:32:05,500
on the device reboot and try it out and
if it doesn't work or just you know

431
00:32:05,500 --> 00:32:09,980
rinse and repeat until we had our final
version which was damaged bridges back

432
00:32:09,980 --> 00:32:13,330
toward and we know but working properly
and then we don't need all these types

433
00:32:13,330 --> 00:32:17,449
of us talked about I meet you in the
next video what it takes to actually

434
00:32:17,450 --> 00:32:24,080
done doesn't take advice and how much or
how little access you need right here

435
00:32:24,080 --> 00:32:29,960
we're starting with the let's play now
you're starting with the device on this

436
00:32:29,960 --> 00:32:34,620
is not a requirement as you'll see
coming up but just for demonstration

437
00:32:34,620 --> 00:32:38,709
safe return the device off at this point
we're gonna start to counter for when

438
00:32:38,710 --> 00:32:42,379
the devices off because the interesting
scenarios that you think you're

439
00:32:42,379 --> 00:32:46,309
protected when this is off so we're
going to boot into are permissible order

440
00:32:46,309 --> 00:32:50,710
except the warning that custom operating
systems can cause problems obviously

441
00:32:50,710 --> 00:32:55,789
we're going to connect the device via
USB and then Daniels going to flash our

442
00:32:55,789 --> 00:32:59,629
backyard colonel to the device and
you'll notice very very quickly how

443
00:32:59,629 --> 00:33:04,699
hospice runs and in just about under 23
seconds that's it

444
00:33:04,700 --> 00:33:10,429
the back towards active now the phone is
booting its active and Daniel talk about

445
00:33:10,429 --> 00:33:16,409
what happens next when this boots up
here in our scenario here basically was

446
00:33:16,409 --> 00:33:20,169
off and we just put it back where it was
and use it just picks it up again and

447
00:33:20,169 --> 00:33:23,600
started using it to the next time do the
setup they will just get the regular

448
00:33:23,600 --> 00:33:28,899
password screen with any time to their
postcode so this website right now and

449
00:33:28,899 --> 00:33:32,239
in the meantime on the right side of the
console we have opened running on our

450
00:33:32,240 --> 00:33:36,610
server just a random thought and
droplets on the Internet

451
00:33:36,610 --> 00:33:41,729
listening not count as keeping it simple
and once the user unlock said and the

452
00:33:41,730 --> 00:33:44,679
device takes a while to process you will
see that began receives the data there

453
00:33:44,679 --> 00:33:52,240
when you use your own kernel you lose a
lot of the hardware acceleration so it

454
00:33:52,240 --> 00:33:53,030
takes a little while

455
00:33:53,030 --> 00:34:07,250
for the auction process to happen so
soon as it happens over there

456
00:34:07,250 --> 00:34:10,880
very actually got the right file it to
be but the accounts equal a database

457
00:34:10,880 --> 00:34:14,010
from the device because it has at least
some sensitive data and I don't it's

458
00:34:14,010 --> 00:34:19,440
actually not readable by the regular
user it's protected so we can open and

459
00:34:19,440 --> 00:34:24,030
we can make some carries and there and
see what we have and then the last part

460
00:34:24,030 --> 00:34:27,080
here to stay TB's into the enemy shell
on the device

461
00:34:27,080 --> 00:34:32,100
I'm trying to access that file directly
and you can see that the exit tonight so

462
00:34:32,100 --> 00:34:35,150
a regular user even on the device
couldn't get it kind of proves to be

463
00:34:35,150 --> 00:34:45,929
running with something which is kinda
level access

464
00:34:45,929 --> 00:34:54,000
giving the three examples of the
examples of the different would not have

465
00:34:54,000 --> 00:34:58,500
happened in the past this is part of a
number of devices and its but it's not a

466
00:34:58,500 --> 00:35:01,369
revenue problem this is known that you
can do this for a while and people use

467
00:35:01,369 --> 00:35:05,640
it for all kind of purposes and also
note that you can do a back door handles

468
00:35:05,640 --> 00:35:08,940
and homemade attacks and things like
that but we feel like it's important to

469
00:35:08,940 --> 00:35:12,329
point out that there is actually a huge
implications of having promise of food

470
00:35:12,329 --> 00:35:17,740
orders and that if your description you
don't fully protect the stacked along

471
00:35:17,740 --> 00:35:20,808
the way then you basically lose that
guarantee what you're hoping full

472
00:35:20,809 --> 00:35:24,059
description can give you granted it's a
great physical access but it is still

473
00:35:24,059 --> 00:35:29,510
flawed because people assume minutes off
its secure and then lastly we should

474
00:35:29,510 --> 00:35:34,859
talk about that also actually has
provided mechanisms to prevent this so

475
00:35:34,859 --> 00:35:39,098
if there's facilities there how to get
everything along the way there is very

476
00:35:39,099 --> 00:35:42,750
to support in principle so we can
protect those things properly it's just

477
00:35:42,750 --> 00:35:49,859
not implemented yet and hopefully this
will give people some ideas that they

478
00:35:49,859 --> 00:35:54,098
may be actually need for doing so in the
future so for iOS that I spent here as

479
00:35:54,099 --> 00:35:58,869
this exploit it and boot loader v2
specified default if you're able to

480
00:35:58,869 --> 00:36:01,930
jailbreak on iOS device you can do
similar things you can bet on

481
00:36:01,930 --> 00:36:05,029
application thank you Candice obtain any
data or you can just backed with a

482
00:36:05,030 --> 00:36:08,730
condom and you can export trade data
that way so this is not particularly an

483
00:36:08,730 --> 00:36:17,190
Android thing but this is just a sample
of devices are things going on so this

484
00:36:17,190 --> 00:36:23,490
is the slide we've dubbed Russo box so
I'm gonna get into serious I've been

485
00:36:23,490 --> 00:36:28,959
doing custom Android for a while thanks
we're done a lot of devices and

486
00:36:28,960 --> 00:36:33,730
platforms grave in its open and you can
create custom things that are useful for

487
00:36:33,730 --> 00:36:38,640
you but this should be secured by the
fall out of the box he should have

488
00:36:38,640 --> 00:36:43,940
security guarantees and so it would be
really helpful if picked up on that and

489
00:36:43,940 --> 00:36:47,710
started to secure these things by the
fall and in the example we just showed

490
00:36:47,710 --> 00:36:51,520
just verifying the Buddha images not not
going to solve the problem because

491
00:36:51,520 --> 00:36:55,119
you're just locking somebody out of the
device that they purchased and want to

492
00:36:55,119 --> 00:36:55,369
do

493
00:36:55,369 --> 00:37:00,509
do legitimate modifications to and so we
get into a scenario where more dangerous

494
00:37:00,509 --> 00:37:03,999
exploits have to be designed an origin
game that access back if you're just

495
00:37:03,999 --> 00:37:06,049
going to lock the door behind you

496
00:37:06,049 --> 00:37:10,640
which brings us into you responsible
bidder on likes this is already

497
00:37:10,640 --> 00:37:15,450
happening on a lot of unfortunately some
carriers block this entirely like

498
00:37:15,450 --> 00:37:20,990
Verizon and you know this will
responsibly erased the user data so if

499
00:37:20,990 --> 00:37:24,689
somebody comes across your device and
wants to unlock it they're gonna blow

500
00:37:24,690 --> 00:37:29,930
away what they're after right there if
they're having him on side so having

501
00:37:29,930 --> 00:37:34,980
thus responsible unlike is this a good
solution make the user 32 some

502
00:37:34,980 --> 00:37:39,619
conditions and then the data and I think
we also want to see some very clearly

503
00:37:39,619 --> 00:37:43,279
documented guidelines on what's
protected because every device seems to

504
00:37:43,279 --> 00:37:47,019
have likes totally different random
things that they're protecting there's

505
00:37:47,019 --> 00:37:52,419
no consistency and lastly consistency
among Google's OEM partners would really

506
00:37:52,420 --> 00:37:57,420
help the ecosystem here let's decide on
one cohesive bootloader solution that

507
00:37:57,420 --> 00:38:01,599
started by all parties that isn't
private and clothes off and only looked

508
00:38:01,599 --> 00:38:05,279
at by a few people and I think we can
solve a lot of these issues that we just

509
00:38:05,279 --> 00:38:10,710
showed our demo here and headed back to
talk about some alternatives to the

510
00:38:10,710 --> 00:38:15,589
platform security yet this kind of
wrapped up the device specific

511
00:38:15,589 --> 00:38:20,880
discussion but what do you do if you
don't have a has gotten on base when you

512
00:38:20,880 --> 00:38:24,470
can be enforced and you probably heard
there's a lot of containers solutions

513
00:38:24,470 --> 00:38:29,930
out there that is good MobileIron things
like that they basically implement the

514
00:38:29,930 --> 00:38:32,879
same thing we already discussed this
targeted us do it on a level so they're

515
00:38:32,880 --> 00:38:36,980
going to have a lock screen that looks
creating those used to derive a passcode

516
00:38:36,980 --> 00:38:41,749
and then told a lie in the UPS container
will be encrypted data and then you can

517
00:38:41,749 --> 00:38:44,950
about the key venue background and you
basically build the same mechanism as

518
00:38:44,950 --> 00:38:49,910
we've seen before the one downside here
whether to downside is that hard and a

519
00:38:49,910 --> 00:38:53,078
lot of things can go wrong and probably
most developers should not try to

520
00:38:53,079 --> 00:38:56,470
implement things like this basic
parameters and crypto but use libraries

521
00:38:56,470 --> 00:39:00,759
for that and try to keep it on a level
and then the second thing is that these

522
00:39:00,759 --> 00:39:03,810
these kind of mechanisms are not have
her back to see a shoe

523
00:39:03,810 --> 00:39:06,390
get somebody's absent parks and they
don't have a strong pass code or

524
00:39:06,390 --> 00:39:10,890
something that is easy to guess you can
still run crude for us are getting a tax

525
00:39:10,890 --> 00:39:16,790
offline compared to the the system
protections and then something else to

526
00:39:16,790 --> 00:39:22,070
think about it is do we need to have
data on the device and it kind of goes

527
00:39:22,070 --> 00:39:25,680
into the usability discussion here just
a tiny to be on the device can be

528
00:39:25,680 --> 00:39:30,609
delivered on its over and get access to
on demand but then what do we do it

529
00:39:30,610 --> 00:39:35,560
again and again the user every time you
need to access the data or do we have to

530
00:39:35,560 --> 00:39:38,670
store along left open to access the data
and every kind of circling back to

531
00:39:38,670 --> 00:39:42,020
having to store that's open somewhere so
this this may or may not solve the

532
00:39:42,020 --> 00:39:45,240
problem depending on what you use
ability requirements are for your

533
00:39:45,240 --> 00:39:48,229
particular application and whole
paranoid you are but the data trying to

534
00:39:48,230 --> 00:39:54,590
protect so where does this leave us with
all of what we have talked about welfare

535
00:39:54,590 --> 00:39:58,630
users are you saying that the passcode
is actually central and all the secure

536
00:39:58,630 --> 00:40:02,340
storage techniques so sending us your
passcode is really something which would

537
00:40:02,340 --> 00:40:06,280
be encouraged and using something I
touch it or anything that makes it

538
00:40:06,280 --> 00:40:09,840
easier for users to have a strong
passcode but maintained his abilities to

539
00:40:09,840 --> 00:40:15,700
find something which would like to see
also iOS and Android both at a new

540
00:40:15,700 --> 00:40:18,589
security features and pension security
vulnerabilities released so it would be

541
00:40:18,590 --> 00:40:23,730
good to update to a new operation as
much as possible at the scene that this

542
00:40:23,730 --> 00:40:28,340
is challenging in particular for Android
devices and even those who support after

543
00:40:28,340 --> 00:40:33,040
a while and I follow us at least there
is a remote vibe vibe support to hear

544
00:40:33,040 --> 00:40:36,020
type and the passcode number of times
wrong or you lose your phone you can buy

545
00:40:36,020 --> 00:40:39,570
a bias so that would be something I'm
securities you security-conscious user

546
00:40:39,570 --> 00:40:46,060
could enable and for the Android side I
think we've seen there is the need to

547
00:40:46,060 --> 00:40:49,100
choose your device wisely I think you
need to do a little better research and

548
00:40:49,100 --> 00:40:53,630
what you're buying to see what security
precautions exist and how timely the

549
00:40:53,630 --> 00:40:56,460
updates are like if you're going to get
something that doesn't get up to 40

550
00:40:56,460 --> 00:41:01,740
years you're gonna have problems and
also encrypt your user data partition

551
00:41:01,740 --> 00:41:06,229
this is still an electable thing that
you have to have to do and even though

552
00:41:06,230 --> 00:41:09,470
we just sort of showdown haha that's not
always going to help you it is at least

553
00:41:09,470 --> 00:41:10,689
another barrier

554
00:41:10,690 --> 00:41:16,710
34 someone who's after your data and in
terms of best practices for developers

555
00:41:16,710 --> 00:41:21,510
you know as to not mention determine if
you actually have to store the state

556
00:41:21,510 --> 00:41:26,150
locally if it's convenient and to cash
it but there's security tradeoffs like

557
00:41:26,150 --> 00:41:28,030
maybe think about that before

558
00:41:28,030 --> 00:41:33,450
for making those decisions and it's
particularly hard to rely on the

559
00:41:33,450 --> 00:41:37,078
platform security and a lot of cases
because I mention you don't always have

560
00:41:37,079 --> 00:41:41,150
access to all the latest option in the
in the version you're running and some

561
00:41:41,150 --> 00:41:44,829
of something of a discussion point that
any application developers want to chat

562
00:41:44,829 --> 00:41:49,329
with us afterwards is like how do you
guys handle supporting older versions of

563
00:41:49,329 --> 00:41:53,810
Android from a usability and security
platform so we'd love to hear how people

564
00:41:53,810 --> 00:41:57,990
are doing this out there

565
00:41:57,990 --> 00:42:01,180
USA if you want to definitely use some
of the production classes which

566
00:42:01,180 --> 00:42:04,710
involving the pass code which is seen
for file system and for academic

567
00:42:04,710 --> 00:42:08,680
probation and then if there is a user
doesn't have a pesticide which you can

568
00:42:08,680 --> 00:42:13,230
test using the key chain operations and
things like that either you can refuse

569
00:42:13,230 --> 00:42:18,089
to store the passcode or another pass
code by the store their sensitive data

570
00:42:18,089 --> 00:42:22,078
on the device and just haven't you log
in every time we can wonder that it's

571
00:42:22,079 --> 00:42:27,440
less secure so there's there's all types
there so there's a brief outlook after

572
00:42:27,440 --> 00:42:39,450
talking about this the the main thing we
see here is usability and user as

573
00:42:39,450 --> 00:42:44,379
something that goes beyond passcodes we
cannot really expect them to have a very

574
00:42:44,380 --> 00:42:47,290
long pass code and tapered leg a hundred
times every day into the device that's

575
00:42:47,290 --> 00:42:51,170
not another solution which is only
acceptable and biometrics go somewhere

576
00:42:51,170 --> 00:42:53,680
in the right direction with a
fingerprint and things like that but

577
00:42:53,680 --> 00:42:59,470
there's a lot of room to grow in that
space and to develop those and I for

578
00:42:59,470 --> 00:43:03,410
developers we would like to see
consistency in the platform they don't

579
00:43:03,410 --> 00:43:07,690
have so many different versions and
everything is not likely documented and

580
00:43:07,690 --> 00:43:11,640
we need to figure out any files that we
don't have to guess on what is happening

581
00:43:11,640 --> 00:43:12,770
in the background

582
00:43:12,770 --> 00:43:15,770
and accidentally something gets deleted
like you seen the key store in the past

583
00:43:15,770 --> 00:43:21,990
so the the takeaway is that would like
if nothing else for you to remember from

584
00:43:21,990 --> 00:43:26,459
our discussion here is that security
controls should be balanced with the

585
00:43:26,460 --> 00:43:31,880
sensitivity of the data and the threat
model in question so protecting your

586
00:43:31,880 --> 00:43:35,260
candy her score vs your company's
financial records are two different

587
00:43:35,260 --> 00:43:38,220
problems and required different
solutions

588
00:43:38,220 --> 00:43:43,819
secondly protect data until accesses
actually needed this is something we'd

589
00:43:43,820 --> 00:43:48,380
like to see you have to keep things
locked until you absolutely need it so

590
00:43:48,380 --> 00:43:52,260
that it's just not fully open once you
can see but the device and lastly I

591
00:43:52,260 --> 00:43:57,120
think are demonstrated that secure
storage relies on the entire stopping

592
00:43:57,120 --> 00:43:59,609
security and if that is not true

593
00:43:59,610 --> 00:44:05,760
things like crazy or possible so some
references for you to look out later

594
00:44:05,760 --> 00:44:10,020
this week to get information out there
and thanks very much and any questions

595
00:44:10,020 --> 00:44:10,600
would like to feel

