1
00:00:00,000 --> 00:00:04,730
you are in Mandalay Kiev right now
getting ready to listen to Matthew

2
00:00:04,730 --> 00:00:08,580
Graber speak about abusing Windows
Management Instrumentation to build a

3
00:00:08,580 --> 00:00:13,580
persistent asynchronous and finalists
back door as usual please make sure that

4
00:00:13,580 --> 00:00:19,250
your phones are silenced we don't want
to hear your ringtones this is Matthew

5
00:00:19,250 --> 00:00:31,679
show so acting like you alright alright
so I'm sure many of you are already

6
00:00:31,679 --> 00:00:37,239
familiar with WMI otherwise you probably
wouldn't be here W my is really an

7
00:00:37,239 --> 00:00:41,849
amazing technology super old school at
around four of her really powerful for

8
00:00:41,850 --> 00:00:46,640
administrators and consequently it's
really powerful for attackers and also

9
00:00:46,640 --> 00:00:50,860
defenders and I'll touch on on the
defensive side briefly at the end

10
00:00:50,860 --> 00:00:57,140
alright but we're here to talk primarily
about all things are so some things you

11
00:00:57,140 --> 00:01:02,829
may not be aware of attackers are
abusing W my in the wild attacks go back

12
00:01:02,829 --> 00:01:09,650
as far as 2010 at least as far as I'm
aware of those of the going back to 2010

13
00:01:09,650 --> 00:01:16,250
is like the first publicly documented
case of motion stopped him I use some of

14
00:01:16,250 --> 00:01:20,880
you may not be familiar with W mine in
that case I'll be going over some of the

15
00:01:20,880 --> 00:01:27,298
basics right and you may not know how to
prevent and detect such attacks later on

16
00:01:27,299 --> 00:01:33,930
get into some pretty cool techniques how
you can use WMI against W my taxes so as

17
00:01:33,930 --> 00:01:39,600
well as an additional medications now
you may only be aware of its most

18
00:01:39,600 --> 00:01:45,439
capabilities as described in public
reports so how did this because you know

19
00:01:45,439 --> 00:01:51,089
you only know what what you know so I
plan on describing some theoretical

20
00:01:51,090 --> 00:01:58,759
attack vectors as well as some
additional W my tax that we may end in

21
00:01:58,759 --> 00:02:02,079
fire I have seen in the wild that you
may not be aware of yet

22
00:02:02,079 --> 00:02:04,350
alright

23
00:02:04,350 --> 00:02:10,669
with that said our reverse engineer Fri
I'm on our lives events for reverse

24
00:02:10,669 --> 00:02:15,420
engineering team we've got a really
bright group of guys that we work with

25
00:02:15,420 --> 00:02:20,880
and we also just released our second
floor on challenge so check that out on

26
00:02:20,880 --> 00:02:28,480
a throne dot com alright so can have
various conferences and as you may or

27
00:02:28,480 --> 00:02:37,420
may not be aware I am a huge PowerShell
fanboy alright okay so sophisticated

28
00:02:37,420 --> 00:02:42,299
attackers are living off the land and i
wanna give a shout out to my buddy Chris

29
00:02:42,300 --> 00:02:48,580
Campbell who kinda cohen that phrase in
this context alright so basically any

30
00:02:48,580 --> 00:02:51,940
told that's useful to a sysadmin is
going to be extremely useful to an

31
00:02:51,940 --> 00:02:58,310
attacker as well so I would like to
think that you know that this is

32
00:02:58,310 --> 00:03:04,569
probably like a huge security gap for
those security vendors out there who are

33
00:03:04,569 --> 00:03:09,328
focusing really heavily on you know
scripts or binary is being dropped at

34
00:03:09,329 --> 00:03:14,250
this this is entirely unnecessary as
you'll see W my is just one means to

35
00:03:14,250 --> 00:03:18,209
execute your power without dropping a
think that this of course there's

36
00:03:18,209 --> 00:03:23,329
PowerShell as well which enables you to
execute really any conceivable all halo

37
00:03:23,329 --> 00:03:28,690
that you'll be able to write in C in
user mode entirely in memory using

38
00:03:28,690 --> 00:03:39,220
powershell now I like to say this a lot
alright if you can dream it from like an

39
00:03:39,220 --> 00:03:43,600
offensive researchers perspective is
probably already been done right so I

40
00:03:43,600 --> 00:03:48,760
said that the public reports of they'll
be my tax go back to 2010

41
00:03:48,760 --> 00:03:53,959
well W my has been around since the dawn
of time like since our windows 98 right

42
00:03:53,959 --> 00:03:59,549
so who's to say that that is the first
instance of my attacks are so there's

43
00:03:59,549 --> 00:04:06,100
probably people in this audience people
not present here who you know are

44
00:04:06,100 --> 00:04:10,829
already experts on W my but they're
probably not the ones who are speaking

45
00:04:10,829 --> 00:04:12,480
at conferences

46
00:04:12,480 --> 00:04:19,370
so well I'm here gonna cover the basics
of the W my utilities how you go about

47
00:04:19,370 --> 00:04:24,760
actually interfacing with this
technology one of those ways as using

48
00:04:24,760 --> 00:04:30,979
WMI query language WL it's very simple
SQL like syntax for working with this

49
00:04:30,979 --> 00:04:37,940
stuff and then covered W my venting and
remote W my these are like what I

50
00:04:37,940 --> 00:04:45,800
consider to be the the killer features
of WMI really go into hell W my has been

51
00:04:45,800 --> 00:04:51,169
used by attackers in the past as well as
all cover some like theoretical attack

52
00:04:51,169 --> 00:04:55,889
vectors that I personally haven't seen
used in the wild also touch upon

53
00:04:55,889 --> 00:05:01,300
providers providers are pillow pillows
or device drivers that really provide W

54
00:05:01,300 --> 00:05:08,710
my all of its functionality under the
hood I'll wrap this up with like pure

55
00:05:08,710 --> 00:05:14,409
concept W my back door that I developed
it is a powershell script it's just an

56
00:05:14,410 --> 00:05:20,570
installer but it doesn't require that
the that the target system have

57
00:05:20,570 --> 00:05:25,419
PowerShell installed on it so radically
could install this on a Windows 98

58
00:05:25,419 --> 00:05:32,590
machine and then I'll cover detection
mechanisms and attack medications basis

59
00:05:32,590 --> 00:05:38,789
so my Windows Windows Management
Instrumentation it's been around forever

60
00:05:38,789 --> 00:05:44,880
life literally since Windows 98 and
Auntie four or so from your Windows 10

61
00:05:44,880 --> 00:05:50,130
machine with PowerShell on it you could
easily run payloads on Windows 98 or

62
00:05:50,130 --> 00:05:56,610
entity for system the technology
fundamentally has not changed system

63
00:05:56,610 --> 00:06:01,280
administrators have been aware of this
technology forever I I think it was like

64
00:06:01,280 --> 00:06:06,729
just recently that this is really come
to the attention of security researchers

65
00:06:06,729 --> 00:06:12,050
and doctors and then read teams are used
to do some really useful things ok we

66
00:06:12,050 --> 00:06:17,930
can read from the registry right to the
registry examine the filesystem drop

67
00:06:17,930 --> 00:06:19,979
files read files

68
00:06:19,979 --> 00:06:23,650
all right you can also execute commands
alright

69
00:06:23,650 --> 00:06:26,669
this this is used pretty heavily

70
00:06:26,669 --> 00:06:31,820
reminds used as a technique to perform
lateral movement and code execution

71
00:06:31,820 --> 00:06:38,210
primarily using the win32 process create
method and you can also subscribe to

72
00:06:38,210 --> 00:06:46,000
events and these events persist across
reboots and don't drop any files to disc

73
00:06:46,000 --> 00:06:51,410
other than a single file which AV would
never touch and what is that file

74
00:06:51,410 --> 00:06:57,490
objects that data in system32 WBEM
repository right this is the HW my

75
00:06:57,490 --> 00:07:02,380
repository overall persistent W my
objects as well as namespace definitions

76
00:07:02,380 --> 00:07:07,669
class definitions everything is stored
in here this is a completely

77
00:07:07,669 --> 00:07:14,440
undocumented format until tomorrow when
we're gonna be so myself and my

78
00:07:14,440 --> 00:07:19,199
colleagues claudio and Willie are gonna
be releasing a white paper that's going

79
00:07:19,199 --> 00:07:25,110
to come out on the far I blog that
covers how how to parse all those allen

80
00:07:25,110 --> 00:07:30,479
also reduce peak at DEFCON about using
WMI for defense and performing forensics

81
00:07:30,479 --> 00:07:35,550
on this objects that data file alright
so when Claudio did some really amazing

82
00:07:35,550 --> 00:07:41,190
work reversing this stuff and that their
forensic our stores are available online

83
00:07:41,190 --> 00:07:47,080
right now so please check those out the
W my settings just general knowledge

84
00:07:47,080 --> 00:07:54,930
these are stored in the Microsoft WBU
registry key you can also access them

85
00:07:54,930 --> 00:08:01,789
via the win32 underscored W my setting
class instance alright so this is one of

86
00:08:01,789 --> 00:08:07,620
the things of interest in here is the
auto recover lost entry so one

87
00:08:07,620 --> 00:08:15,289
previously popular persistence technique
was to drop them off I'll on two victims

88
00:08:15,289 --> 00:08:20,680
system run amok comp died at sea and
then that would be consumed and then you

89
00:08:20,680 --> 00:08:26,110
would have your persistence mechanism so
also are kinda cool they're not

90
00:08:26,110 --> 00:08:31,400
necessary in my opinion but you can drop
them off if you want to persist your W

91
00:08:31,400 --> 00:08:36,650
my payloads beyond W my repository
corruption so I don't know why you'd

92
00:08:36,650 --> 00:08:40,520
want to do that necessarily it does
create additional forensic artifacts but

93
00:08:40,520 --> 00:08:44,150
it's something to be aware of that you
as a defender should be looking at

94
00:08:44,150 --> 00:08:48,130
alright so how do we interact with this
stuff

95
00:08:48,130 --> 00:08:55,660
a powershell shows like the best utility
out there for interacting with WMI this

96
00:08:55,660 --> 00:09:00,439
is a partial version 3 window that
you're looking at and what you see here

97
00:09:00,440 --> 00:09:06,880
is a grouping of both W my commandments
and symptom and it's not really too much

98
00:09:06,880 --> 00:09:09,870
of a difference between the two

99
00:09:09,870 --> 00:09:13,589
only the W my commitments are like the
the legacy ones so these are present

100
00:09:13,589 --> 00:09:18,380
going all the way back to our show won
the same commitments were introduced in

101
00:09:18,380 --> 00:09:23,970
version 3 and above and they do so they
do the same exact thing as the W my

102
00:09:23,970 --> 00:09:28,640
commandments only they talked both
protocols which I'll get into briefly so

103
00:09:28,640 --> 00:09:34,150
they're both decom and when R M which is
going to be present on more modern

104
00:09:34,150 --> 00:09:39,670
Windows OS's are some of the show
utilities you should be aware of I'm

105
00:09:39,670 --> 00:09:44,770
sure many of you are familiar with winik
ok there's a really powerful utility it

106
00:09:44,770 --> 00:09:49,350
does have some limitations PowerShell in
my opinion is always going to be the

107
00:09:49,350 --> 00:09:55,829
best way to work with the stuff there's
winner am so if the winner am or so I'm

108
00:09:55,829 --> 00:09:59,050
going to use like the terms went around
the PowerShell remoting interchangeably

109
00:09:59,050 --> 00:10:02,979
if thats services listening and say
light application whitelisting for

110
00:10:02,980 --> 00:10:09,140
whatever reason like box PowerShell you
could run around to enumerate W my

111
00:10:09,140 --> 00:10:15,650
object instances you could execute W my
methods it's pretty powerful utility if

112
00:10:15,650 --> 00:10:20,050
that's what you have to fall back to
WBEM test is really cool it's like a

113
00:10:20,050 --> 00:10:27,969
really crappy like GUI interface its IT
services like like like a test utility

114
00:10:27,970 --> 00:10:33,009
I've running like in various assessments
in the past I run into cases where like

115
00:10:33,009 --> 00:10:36,800
I couldn't run when they see your
PowerShell databse so this was a good

116
00:10:36,800 --> 00:10:42,079
fallback you pretty much nothing that
you can't do with regards to tell me in

117
00:10:42,079 --> 00:10:46,500
my view this tool you just have to get
over the crappy interface there's a

118
00:10:46,500 --> 00:10:48,550
bunch of Linux utilities as well

119
00:10:48,550 --> 00:10:56,810
W my seat will accept any like any W my
query W W mis is basically like a

120
00:10:56,810 --> 00:11:02,599
wrapper for the win32 process create
method for like lateral movement and

121
00:11:02,600 --> 00:11:07,759
code execution and then good buddy of
mine stepped out call patch W my guess

122
00:11:07,759 --> 00:11:14,139
is that it will accept and beyond is
there's an additional interfaces as well

123
00:11:14,139 --> 00:11:19,000
script JScript if you're going to
incorporate this into your code you have

124
00:11:19,000 --> 00:11:26,500
in common is also pretty full featured
dotnet classes alright so you're gonna

125
00:11:26,500 --> 00:11:30,399
interact with the stuff over the network
which is pretty amazing that we can do

126
00:11:30,399 --> 00:11:36,730
this because on every system this the W
my service is already listening alright

127
00:11:36,730 --> 00:11:42,259
so critical it's been around forever
that is still likely listening on every

128
00:11:42,259 --> 00:11:49,220
single one of your systems as decom
alright TCP port 135 so port 135 is used

129
00:11:49,220 --> 00:11:55,069
to establish an initial connection and
all subsequent data is passed via

130
00:11:55,069 --> 00:12:00,620
secondary TCP port number specified in
the range that you see here in this

131
00:12:00,620 --> 00:12:05,000
registry key you can actually use the
comp configure just modify the registry

132
00:12:05,000 --> 00:12:09,889
entry directly to have it only uses a
single port so that you can maybe make

133
00:12:09,889 --> 00:12:17,459
it like a little more firewall friendly
so here's an example of using

134
00:12:17,459 --> 00:12:24,680
W my object and I want to enumerate
processes on this remote system so it's

135
00:12:24,680 --> 00:12:30,589
really simple you just provide the
hostname or IP address the credential

136
00:12:30,589 --> 00:12:33,570
like you provide like the domain or the
host name and

137
00:12:33,570 --> 00:12:36,690
the username it'll prompt for
credentials and then you get a nice

138
00:12:36,690 --> 00:12:45,860
process listing the other protocol the
slick modern protocol for PowerShell

139
00:12:45,860 --> 00:12:50,340
remoting or went around it is a SOAP
based protocol that encrypted by the

140
00:12:50,340 --> 00:12:56,240
false so like if you're to install like
Server 2012 are too I believe I can

141
00:12:56,240 --> 00:13:02,300
server core mode this would be the only
port listening so you have poor 5985

142
00:13:02,300 --> 00:13:08,859
listening that there's a really handy
PowerShell command contest / WS man it's

143
00:13:08,860 --> 00:13:13,290
like a really convenient port scanner
that doesn't require authentication so

144
00:13:13,290 --> 00:13:16,990
they like you could sweep the enterprise
to see what machines are listening on on

145
00:13:16,990 --> 00:13:23,820
this any protocol also you can configure
all the settings within PowerShell using

146
00:13:23,820 --> 00:13:29,970
the W's man P S Drive so another reason
powers was really cool is because of the

147
00:13:29,970 --> 00:13:33,380
concept of Peace Prize alright so like
you could do an Ellis on the file system

148
00:13:33,380 --> 00:13:38,140
right and you get what you expect
directory and file listing well you can

149
00:13:38,140 --> 00:13:44,210
also do NLS on the registry rights OLS
HKLM colon backslash that's really cool

150
00:13:44,210 --> 00:13:51,700
you can also use a to look through like
certificate store so just one of many

151
00:13:51,700 --> 00:13:57,900
reasons PowerShell is is really really
handy right about saying this is a

152
00:13:57,900 --> 00:14:04,480
killer feature that attackers love to
take advantage of all right so using WMI

153
00:14:04,480 --> 00:14:08,690
we can trigger off nearly any
conceivable event in the operating

154
00:14:08,690 --> 00:14:14,860
system and the way that's achieved is in
order to read the story W my event you

155
00:14:14,860 --> 00:14:20,940
need three things right and event filter
so this is the action that would you

156
00:14:20,940 --> 00:14:28,930
want to trigger all so this will take
the form of a W QL query the consumers

157
00:14:28,930 --> 00:14:34,719
so upon firing that event what are you
gonna do right so microsoft provides

158
00:14:34,720 --> 00:14:41,460
five standard event consumers two of
which are very useful for attackers and

159
00:14:41,460 --> 00:14:44,570
then you just buying the two of those
together the trigger and

160
00:14:44,570 --> 00:14:49,390
then the payload by using a filter to
consumer binding

161
00:14:49,390 --> 00:14:55,660
there's two ways in which these events
can be executed you can run them locally

162
00:14:55,660 --> 00:15:01,130
in just a host process for example you
can call like registered as W my event

163
00:15:01,130 --> 00:15:05,210
or running locally on the PowerShell
process the real power out of this is

164
00:15:05,210 --> 00:15:10,130
when you register permanent W my event
consumer so persist across reboots and

165
00:15:10,130 --> 00:15:16,210
it also excuse us system there's two
types of event classes intrinsic and

166
00:15:16,210 --> 00:15:22,940
extrinsic events so I'm missing out all
of the intrinsic events here so W my

167
00:15:22,940 --> 00:15:30,180
classes are organized hierarchically by
namespaces so one of the most popular

168
00:15:30,180 --> 00:15:35,599
namespaces our roots and b2 and when
you're scripting with W my this this is

169
00:15:35,600 --> 00:15:40,260
the default namespace that's used as
some really useful classes in there for

170
00:15:40,260 --> 00:15:44,770
both offense and defense so within every
one of those classes you have these

171
00:15:44,770 --> 00:15:51,770
special system classes the events these
intrinsic events and you can you really

172
00:15:51,770 --> 00:15:58,180
flexible with how you create your event
filters so for example if you wanted to

173
00:15:58,180 --> 00:16:03,229
in a running process sees every time a
new process is created it creates an

174
00:16:03,230 --> 00:16:07,540
instance of a win32 underscore process
object so you might tap into the

175
00:16:07,540 --> 00:16:14,630
instance creation event and just filter
out instances of those win32 process

176
00:16:14,630 --> 00:16:20,760
objects there is some hour I'll be
discussing shortly that both creates and

177
00:16:20,760 --> 00:16:26,120
modifies namespaces that it uses a sassy
to channel there's another attacker is

178
00:16:26,120 --> 00:16:31,790
creating and modifying W my classes and
using that as a pretty cool

179
00:16:31,790 --> 00:16:38,000
command-and-control channel as well so
in that case you would have the class

180
00:16:38,000 --> 00:16:42,180
creation event fire so if you are
registered to to these types of events

181
00:16:42,180 --> 00:16:47,920
then you could gain some insights so as
a defender you might be able to detect

182
00:16:47,920 --> 00:16:50,349
these things as an attacker

183
00:16:50,350 --> 00:16:56,700
you should be mindful that these events
are going to trigger upon performing

184
00:16:56,700 --> 00:17:01,920
your malicious action right now there is
these are specialized events called

185
00:17:01,920 --> 00:17:05,780
extrinsic events there aren't that many
of them but they're highly performance

186
00:17:05,780 --> 00:17:09,970
and you don't have to specify the
polling interval so these events fire

187
00:17:09,970 --> 00:17:14,370
immediately upon each one of them
occurring so there's some pretty

188
00:17:14,369 --> 00:17:19,689
interesting events that have listed here
both for attackers and defenders so

189
00:17:19,690 --> 00:17:25,180
win32 process start raise this fires
immediately upon any process starting so

190
00:17:25,180 --> 00:17:30,480
imagine there was a process like X
people named that you were targeting I

191
00:17:30,480 --> 00:17:36,390
don't know like rocky XP diags Ian upon
triggering that like you just go and

192
00:17:36,390 --> 00:17:41,440
then killed that process do you really
get creative with these hear from a

193
00:17:41,440 --> 00:17:47,030
defense perspective imagine using
triggering off the win32 module autres

194
00:17:47,030 --> 00:17:51,220
alright this is fired upon any deal

195
00:17:51,220 --> 00:17:58,810
device driver being loaded ok registry
key change of any registry value change

196
00:17:58,810 --> 00:18:05,080
of and these should be pretty self
explanatory very powerful alright so

197
00:18:05,080 --> 00:18:11,210
event filters again I said the events
that you want to trigger off Okies all

198
00:18:11,210 --> 00:18:19,870
take the form of a Wal W my query
language and so here are two examples of

199
00:18:19,870 --> 00:18:28,199
using these events so using an intrinsic
and extrinsic query alright so let's all

200
00:18:28,200 --> 00:18:33,940
get his first one here this intrinsic
we're so at a high level what this is

201
00:18:33,940 --> 00:18:41,220
going to trigger off of is the creation
or modification of a any file as a doc

202
00:18:41,220 --> 00:18:49,920
or docx extension alright and the way we
kind of interpret this is we're

203
00:18:49,920 --> 00:18:53,760
interested in any event that fires that
is an instance creation

204
00:18:53,760 --> 00:19:00,430
for instance modification event of type
of class types in data file are so

205
00:19:00,430 --> 00:19:05,140
whenever any directory or file is
created or modified if fires off these

206
00:19:05,140 --> 00:19:09,360
events now we have to be a little more
abstract informing your query since we

207
00:19:09,360 --> 00:19:13,340
want to capture both creation and
modification events and both of those

208
00:19:13,340 --> 00:19:19,149
classes derived from the instance
operation event so that that ultimately

209
00:19:19,150 --> 00:19:24,040
is what we want to trigger off of and
then once I triggers you can look at the

210
00:19:24,040 --> 00:19:28,399
target instance property and those
target instance properties are gonna

211
00:19:28,400 --> 00:19:33,430
take the form of that same data files so
you can just inspect the extension field

212
00:19:33,430 --> 00:19:39,330
and match it against the file extensions
are you interested in targeting and here

213
00:19:39,330 --> 00:19:45,500
we have to specify a polling interval
right so one copy out with this is so

214
00:19:45,500 --> 00:19:48,960
you a file that's created and deleted
within that thirty second interval

215
00:19:48,960 --> 00:19:53,080
you're not going to catch it
unfortunately alright so and extrinsic

216
00:19:53,080 --> 00:19:58,260
query this is a pretty interesting one
missile fired immediately upon a volume

217
00:19:58,260 --> 00:20:04,420
change event so if you're looking up
this object in MSDN you see that event

218
00:20:04,420 --> 00:20:10,260
type 2 is a removable drive so this
would fire upon insertion of removable

219
00:20:10,260 --> 00:20:20,960
media so once you have the WTO query
that you formed to target the event that

220
00:20:20,960 --> 00:20:24,500
you're interested in triggering you want
to do something upon that triggering

221
00:20:24,500 --> 00:20:30,790
right so the two event consumers that
attackers are you know very fond of our

222
00:20:30,790 --> 00:20:37,280
active script event consumer or you can
embed any Windows Script Host language

223
00:20:37,280 --> 00:20:43,110
as a payload in this consumer so Windows
Script Host language of BBB script or

224
00:20:43,110 --> 00:20:48,760
JScript are so you can have those
payloads in line and nothing would be

225
00:20:48,760 --> 00:20:53,840
present on disk aside from being present
in objects that data file the W my

226
00:20:53,840 --> 00:20:58,179
repository you can also execute anything
at the command line is the command line

227
00:20:58,180 --> 00:21:00,720
and then consumer so imagine

228
00:21:00,720 --> 00:21:06,500
someone inserts removable media and you
want to execute some payload it so

229
00:21:06,500 --> 00:21:12,110
imagine you could excuse a partial desi
deshi encoded command and then you'd

230
00:21:12,110 --> 00:21:18,030
have maybe like a Dr infection payload
that would drop something of interest on

231
00:21:18,030 --> 00:21:25,049
to that wanted a USB stick or the other
Standard Bank consumers are gonna be of

232
00:21:25,049 --> 00:21:29,679
particular interest to defenders are so
we can append a log file create an event

233
00:21:29,679 --> 00:21:36,179
log entry send an email for it and both
of these are present in the same v2 and

234
00:21:36,179 --> 00:21:45,049
default names basis so let's turn to
some previous malware that has become

235
00:21:45,049 --> 00:21:50,850
public so the first time I ever heard of
the BMI like I'm not an unassisted men

236
00:21:50,850 --> 00:21:58,158
by trade so I really had no idea what
the BMI was until around 2010 when I was

237
00:21:58,159 --> 00:22:02,789
reading up on all the articles about
Stuxnet and this wasn't really mentioned

238
00:22:02,789 --> 00:22:07,760
too much but one of the exploits that
Stuxnet took advantage of

239
00:22:07,760 --> 00:22:12,210
vulnerabilities that Stuxnet took
advantage of was a mess 10060 on the

240
00:22:12,210 --> 00:22:18,100
principle of vulnerability which
basically enable the attacker to write

241
00:22:18,100 --> 00:22:22,850
an arbitrary files in the file system so
just imagine like if you could drop any

242
00:22:22,850 --> 00:22:27,830
files to the file system in order to
gain code execution how might you go

243
00:22:27,830 --> 00:22:31,820
about doing that so what the attacker
did was they dropped one of those moth

244
00:22:31,820 --> 00:22:38,559
files which had embedded within within
it a permanent W my event subscription

245
00:22:38,559 --> 00:22:43,490
so they dropped it into a very specific
directory and then there is basically

246
00:22:43,490 --> 00:22:47,190
like a watchdog process that would
monitor that directory and if it

247
00:22:47,190 --> 00:22:51,130
detected that there was a new president
there it would go ahead and consumers

248
00:22:51,130 --> 00:22:56,280
and you would automatically persist and
gain code execution in the system

249
00:22:56,280 --> 00:23:00,970
context so Microsoft fix this exploit
primitive so that like that watchdog

250
00:23:00,970 --> 00:23:04,310
process will no longer just happily go
consumed

251
00:23:04,310 --> 00:23:10,970
and moths our present in that directory
then there's ghosts this was a commodity

252
00:23:10,970 --> 00:23:14,770
malware there's a really good writeup on
this that trend Micro did a while back

253
00:23:14,770 --> 00:23:22,840
so what this mower did was it used a wk
will query to the one that you saw

254
00:23:22,840 --> 00:23:27,909
previously that monitored for the
creation or modification of any files

255
00:23:27,910 --> 00:23:32,960
only rather instead of targeting a
specific extension it targeted a

256
00:23:32,960 --> 00:23:37,990
specific directory facilitate the the
recent photos so any new like recent

257
00:23:37,990 --> 00:23:43,780
documents it would just kill those being
an ActiveX control like it basically

258
00:23:43,780 --> 00:23:49,170
you'd like to ie com object to upload
the contents of those documents to some

259
00:23:49,170 --> 00:23:54,660
command-and-control server ID so that
the payload itself like that ActiveX

260
00:23:54,660 --> 00:23:58,790
control was embedded within the script
payload

261
00:23:58,790 --> 00:24:07,230
one of those active script event
consumer then consumers and released not

262
00:24:07,230 --> 00:24:13,140
too long ago was a really cool tool
called W my shell so this was the first

263
00:24:13,140 --> 00:24:19,130
case where i SAWW my used as a pure see
to channel alright so the mechanism by

264
00:24:19,130 --> 00:24:23,660
which is used it as a seat to channel
was it created W my namespaces

265
00:24:23,660 --> 00:24:29,940
dynamically or modified them so what
that would allow you to do is like you

266
00:24:29,940 --> 00:24:31,900
could just stuff a payload

267
00:24:31,900 --> 00:24:37,520
as the name of a WMI namespace and then
you could do something like call the

268
00:24:37,520 --> 00:24:43,780
create method in the win32 process class
to consume that data likes a basic

269
00:24:43,780 --> 00:24:48,399
support decoded and execute like some
PowerShell command that was embedded

270
00:24:48,400 --> 00:24:53,270
with it right and then we could also do
is take the result of that delicious

271
00:24:53,270 --> 00:24:58,230
PowerShell command write the output to
say like another W my namespace and then

272
00:24:58,230 --> 00:25:02,880
read that back remotely like using the
get W my object

273
00:25:02,880 --> 00:25:16,390
alright so you're using WMI as a pure si
tu chal is pretty cool so they're mine

274
00:25:16,390 --> 00:25:22,910
is extremely powerful right so but from
an attacker's perspective there's really

275
00:25:22,910 --> 00:25:27,160
nothing you can't do from like a post
exploitation perspective so look at

276
00:25:27,160 --> 00:25:32,980
every phase of of an attack it and you
can accomplish that with WMI given that

277
00:25:32,980 --> 00:25:35,770
you have proper credentials to do so

278
00:25:35,770 --> 00:25:44,940
alright so if you were to get a
reconnaissance briefly so benefits to an

279
00:25:44,940 --> 00:25:51,140
attacker is so the service is running on
every single system again going back to

280
00:25:51,140 --> 00:25:57,020
like winners 9894 all rights running a
system every machine has a list is

281
00:25:57,020 --> 00:26:00,420
listening on like this D comp order like
when R M

282
00:26:00,420 --> 00:26:07,720
unless you explicitly disable this
service it is relatively esoteric at

283
00:26:07,720 --> 00:26:13,800
this point hopefully after this talk it
won't be so defenders like still are

284
00:26:13,800 --> 00:26:20,000
really aware of the repercussions of
attackers leveraging W my alright

285
00:26:20,000 --> 00:26:26,730
nothing touches disc unless you wanted
to be the only exception being when you

286
00:26:26,730 --> 00:26:31,080
register like a permanent W my event
subscription and it's only going to be

287
00:26:31,080 --> 00:26:36,330
that payload will only be present in
objects that data and AV will not touch

288
00:26:36,330 --> 00:26:42,860
that I mean for the same reason that AV
would never flag on like and TDS dot did

289
00:26:42,860 --> 00:26:48,120
write if you store like some payload and
some like like Active Directory property

290
00:26:48,120 --> 00:26:56,739
if he's not going to touch this file now
if you were to go about forming some

291
00:26:56,740 --> 00:27:00,660
reconnaissance as an attacker is a some
the W my objects that you might be

292
00:27:00,660 --> 00:27:06,760
interested in reality I did a scan of
this Windows 7 machine that I'm

293
00:27:06,760 --> 00:27:13,110
presenting from and there's actually
just under 8000 w my classes available

294
00:27:13,110 --> 00:27:13,899
to you

295
00:27:13,900 --> 00:27:18,360
these these are just some of the
highlights that I'm presenting here so

296
00:27:18,360 --> 00:27:24,360
you can get detailed host OS information
using these objects to conform registry

297
00:27:24,360 --> 00:27:29,590
operations read from and write to the
registry so like you could use that sed

298
00:27:29,590 --> 00:27:34,320
read prov W my provider say as a
persistence mechanism right like you

299
00:27:34,320 --> 00:27:39,060
could write personal data is a dashing
Cody command and have like your your

300
00:27:39,060 --> 00:27:42,520
PowerShell stager you can write that
into the run key right

301
00:27:42,520 --> 00:27:45,870
automatic persistence using WMI

302
00:27:45,870 --> 00:27:51,919
process these services you can start
stop services read the event logs

303
00:27:51,920 --> 00:27:58,480
enumerates all of the patches on a
system that shares create shares delete

304
00:27:58,480 --> 00:28:05,160
shares there's very little that you
can't do here so this is extremely

305
00:28:05,160 --> 00:28:10,450
powerful and attackers are already kind
of aware of this i've seen

306
00:28:10,450 --> 00:28:17,130
using women databse pretty often so here
is like the PowerShell variants of women

307
00:28:17,130 --> 00:28:23,020
Datuk Seri 44 lateral movement so I'm
just calling invoke W my method and

308
00:28:23,020 --> 00:28:27,450
within the win32 process class there's
the static create method alright and

309
00:28:27,450 --> 00:28:32,070
this will just go execute any any
command-line program that you provide it

310
00:28:32,070 --> 00:28:38,189
and I'm doing so remotely alright so
just imagine replacing notepad with

311
00:28:38,190 --> 00:28:48,230
PowerShell databse dashing Cody command
insert malicious payload here

312
00:28:48,230 --> 00:28:53,910
here's an example of W my persistence so
recall what I said the three

313
00:28:53,910 --> 00:28:59,160
requirements were in order to process
one of those event filters event

314
00:28:59,160 --> 00:29:04,410
consumers and the filter to consumer
binding so this is a that this I found

315
00:29:04,410 --> 00:29:10,760
in the wild in the CD our family which
is our internal family name I I think

316
00:29:10,760 --> 00:29:14,760
like the the public name is see do so
there's there's a pretty good writeup

317
00:29:14,760 --> 00:29:20,309
song on this this is pretty basic it's
broken down as follows

318
00:29:20,309 --> 00:29:27,290
so you have this long query which
basically states fire this shortly after

319
00:29:27,290 --> 00:29:33,649
system startup so it's just gonna wait
between 200 and 300 20 seconds and then

320
00:29:33,650 --> 00:29:38,799
it's gonna it's going to fire the event
consumer which is just that kind of

321
00:29:38,799 --> 00:29:43,990
commitment of command line of in
consumer which just execute in in this

322
00:29:43,990 --> 00:29:50,299
fictitious case evil Datuk sieh alright
so not very sophisticated so that this

323
00:29:50,299 --> 00:29:55,460
assumes that another binary was dropped
a disk so this isn't super stealthy in

324
00:29:55,460 --> 00:30:04,049
my mind but it's illustrative of how you
might go about like practically using

325
00:30:04,049 --> 00:30:11,889
WMI as a persistence mechanism is very
few lines of code

326
00:30:11,890 --> 00:30:20,700
so I didn't realize this until recently
when I was pulled into this one case

327
00:30:20,700 --> 00:30:25,510
that we are investigating and when we
got some awesome in San responders who

328
00:30:25,510 --> 00:30:32,060
had been investigating apt 29 so you may
be aware that far released a report on

329
00:30:32,060 --> 00:30:37,120
our family called hammer toss and we
attributed this to apt 29

330
00:30:37,120 --> 00:30:43,360
what that paper did not discuss was the
W my attack factor that they used so

331
00:30:43,360 --> 00:30:49,439
here's a small example of what apt 29
was doing alright they were creating

332
00:30:49,440 --> 00:30:56,550
custom W my classes dynamically and
adding properties to those classes and

333
00:30:56,550 --> 00:31:01,940
stuffing payloads in them so really this
was very similar to like what the W my

334
00:31:01,940 --> 00:31:06,960
shell told does only instead of creating
and modifying namespaces the attacker

335
00:31:06,960 --> 00:31:13,000
was just creating and modifying classes
on the fly so I didn't even realize that

336
00:31:13,000 --> 00:31:16,830
you could do this I thought that you
would have to drop them off I'll to

337
00:31:16,830 --> 00:31:20,810
create these classes dynamically when it
turns out you can just use some of these

338
00:31:20,810 --> 00:31:26,929
really handy dotnet classes to achieve
that for you so this is an example of me

339
00:31:26,930 --> 00:31:32,400
doing that locally now the attacker was
doing this remotely so you can just

340
00:31:32,400 --> 00:31:37,510
extend this a little bit to create and
modify classes remotely so imagine just

341
00:31:37,510 --> 00:31:41,980
stuffing your payload and they're
executing emotions PowerShell command

342
00:31:41,980 --> 00:31:46,000
saving the output to another class
property and then reading that back

343
00:31:46,000 --> 00:31:54,320
using WMI as a Piercy to channel and
with that so

344
00:31:54,320 --> 00:31:59,120
as I said before I myself was using
those names basis

345
00:31:59,120 --> 00:32:06,889
apt 29 were using dynamically created
classes you could also conceivably is

346
00:32:06,889 --> 00:32:13,139
the registry as a means of like staging
your ex fill so using that STD reg prob

347
00:32:13,139 --> 00:32:20,330
provider you could just write arbitrary
data to any registry keys key and value

348
00:32:20,330 --> 00:32:26,460
that you create and then you can execute
that embedded payload say right the

349
00:32:26,460 --> 00:32:30,120
result of that command to another
registry value and then read it back

350
00:32:30,120 --> 00:32:37,758
remotely so these were the attackers and
researchers had already demonstrated the

351
00:32:37,759 --> 00:32:43,320
namespace in class creation I just kind
of thought of like maybe using the

352
00:32:43,320 --> 00:32:48,250
registry I'm sure there's other means of
like pushing and pulling arbitrary data

353
00:32:48,250 --> 00:32:54,070
using WMI as well if you think of any
clever uses of W my eyes I see two

354
00:32:54,070 --> 00:32:55,580
channel let me know

355
00:32:55,580 --> 00:33:02,850
curious to know alright so I'm going to
demonstrate an example here

356
00:33:02,850 --> 00:33:11,100
of using WMI to push up a load onto onto
a victim system in this case we're going

357
00:33:11,100 --> 00:33:17,840
to plant some some sensitive evidence on
on a victim here so in the first block I

358
00:33:17,840 --> 00:33:22,129
just specifying the file named locally
on my system that I want to drop onto

359
00:33:22,129 --> 00:33:27,399
the remote machine ok I'm gonna read it
as byte array converted to a base 64

360
00:33:27,399 --> 00:33:33,239
string and then I'm going to set up my
remote W my connection and what I'm

361
00:33:33,240 --> 00:33:40,700
gonna do after that is creates a win32
underscore evil class clouds and create

362
00:33:40,700 --> 00:33:47,230
an evil property that is attached to
that class and then I'm gonna stuff the

363
00:33:47,230 --> 00:33:50,769
base 64 encoded content of the evidence
that I want to play on the victim

364
00:33:50,769 --> 00:33:57,210
machine into that property ok so
technically the contents of the file are

365
00:33:57,210 --> 00:34:03,350
present on that system but they're only
present in the only president base 64

366
00:34:03,350 --> 00:34:04,269
encoded

367
00:34:04,269 --> 00:34:11,469
objects . data W my repository so we
want to actually do something with that

368
00:34:11,469 --> 00:34:16,859
data that stuffed in there we might do
something like this so we're going to

369
00:34:16,859 --> 00:34:21,808
execute some PowerShell on the remote
system and we're going to read directly

370
00:34:21,809 --> 00:34:28,389
from the win32 evil class . evil
property property which has the base 64

371
00:34:28,389 --> 00:34:36,029
encoded evidence and then we'll drop it
to C fighter jets backstop PNG you know

372
00:34:36,029 --> 00:34:42,520
whatever so the way we go about
executing that is by calling the win32

373
00:34:42,520 --> 00:34:50,149
process create method that you should be
familiar with by now and then you can

374
00:34:50,149 --> 00:34:55,609
also remotely confirmed that the file
was dropped by calling get W my object

375
00:34:55,609 --> 00:35:02,839
to see if there's an instance of the
send data file present on that system

376
00:35:02,839 --> 00:35:09,029
that has that exact filename alright

377
00:35:09,030 --> 00:35:15,720
so in the previous example we just
dropped a file to this so I called out

378
00:35:15,720 --> 00:35:20,730
like the the push attack now in this
case this is very similar to like what

379
00:35:20,730 --> 00:35:25,110
apt 29 was doing only they were using
custom classes like I used in the

380
00:35:25,110 --> 00:35:30,130
previous example here I'm just going to
use the registry as a means of State

381
00:35:30,130 --> 00:35:31,200
staging

382
00:35:31,200 --> 00:35:36,390
pushing up a load and then reading the
results of that payload back using the

383
00:35:36,390 --> 00:35:45,350
registry so I provide the credentials to
the target system and I create the NHK

384
00:35:45,350 --> 00:35:51,569
I'm softer and evil key that registry
key and then the I'm going to delete the

385
00:35:51,570 --> 00:35:58,950
value of the present in result cuz I'm
going to populate that in a second it's

386
00:35:58,950 --> 00:36:06,970
just my fictitious payload here is I'm
just gonna get a process listing 44 else

387
00:36:06,970 --> 00:36:11,569
s alright kind of a silly payload but
just as good a demonstration of the

388
00:36:11,570 --> 00:36:17,090
point here so when you called get
process or anything for that matter in

389
00:36:17,090 --> 00:36:23,330
PowerShell it returns objects I really
like working with objects so I chose to

390
00:36:23,330 --> 00:36:30,810
preserve my objects here by serializing
them using the PSC réaliser class so

391
00:36:30,810 --> 00:36:35,710
that just takes the contents of the
object converts XML and then I'll base

392
00:36:35,710 --> 00:36:42,950
64 encoded it save it in that registry
key pull back a 64 decode it so I pulled

393
00:36:42,950 --> 00:36:49,299
back using that has to be reg prob
provider and then so yeah basics for

394
00:36:49,300 --> 00:36:52,790
Dakota and then called deserialize on it
and then I have this nice beautiful

395
00:36:52,790 --> 00:36:59,520
PowerShell object that looks as if it
had been executed locally only it was

396
00:36:59,520 --> 00:37:06,590
only it was the result of that payload
running on a remote system that

397
00:37:06,590 --> 00:37:14,910
ultimately like I managed to return the
site proper PowerShell objects

398
00:37:14,910 --> 00:37:26,020
alright so one other theoretical attack
that you might be able to perform is so

399
00:37:26,020 --> 00:37:31,099
you want to avoid calling the win32
process create method which is

400
00:37:31,099 --> 00:37:36,500
susceptible to like process and
command-line auditing right cuz if

401
00:37:36,500 --> 00:37:40,650
you're executing like PowerShell desi
dashing Cody command this might be

402
00:37:40,650 --> 00:37:47,660
logged and reported so if you wanted to
be like extra stealthy conceivably what

403
00:37:47,660 --> 00:37:52,700
you could do is create a temp a
temporary permanent W my event

404
00:37:52,700 --> 00:38:00,339
subscription so the way you do that is
you would create ActiveX script then

405
00:38:00,339 --> 00:38:05,460
consumer consisting of your payload and
so normally this would like process

406
00:38:05,460 --> 00:38:09,750
across reboots but then part of your
payload would be like the trigger for it

407
00:38:09,750 --> 00:38:14,180
would be say like an interval time with
timer instruction so you push the

408
00:38:14,180 --> 00:38:19,808
payload down this time instruction fires
after say one minute and then part of

409
00:38:19,809 --> 00:38:24,140
your payload is so that excuse all the
malicious stuff first and then it

410
00:38:24,140 --> 00:38:28,129
deletes itself so it deletes its
corresponding event filter event

411
00:38:28,130 --> 00:38:33,210
consumer and filter to consumer binding
so it's kind of a clean like more

412
00:38:33,210 --> 00:38:39,670
stealthy method in my opinion of getting
code execution on a remote system if you

413
00:38:39,670 --> 00:38:44,740
know that say khmer light auditing may
be present so the only thing that a

414
00:38:44,740 --> 00:38:53,770
defender might see will be the execution
of a Sara Khan's dash embedding so from

415
00:38:53,770 --> 00:38:56,730
an attacker's perspective it's a little
bit more stealthy cuz you wouldn't see

416
00:38:56,730 --> 00:39:00,380
something like in the previous cases
where I was calling PowerShell databse

417
00:39:00,380 --> 00:39:07,549
and executing some like plain text
command you wouldn't see any others and

418
00:39:07,549 --> 00:39:12,288
that if you were to perform offline W my
forensics later on this payload when be

419
00:39:12,289 --> 00:39:13,080
present

420
00:39:13,080 --> 00:39:22,730
objects that data so I've talked about
my files a little bit but the reason I

421
00:39:22,730 --> 00:39:28,470
don't expand upon them really is that I
don't feel that they're necessary from

422
00:39:28,470 --> 00:39:33,850
an attacker's perspective I think they
just add unnecessary artifacts that

423
00:39:33,850 --> 00:39:40,290
would end up getting you caught really
the only advantage in my opinion and

424
00:39:40,290 --> 00:39:43,700
please tell me if I'm wrong later on the
only advantage from an attacker's

425
00:39:43,700 --> 00:39:49,990
perspective is that these things will
persist if you specify pragma auto

426
00:39:49,990 --> 00:39:56,250
recovery and your mom file though be
consumed again like after W my

427
00:39:56,250 --> 00:40:01,860
corruption which probably isn't gonna
happen anyway so moving on

428
00:40:01,860 --> 00:40:08,120
alright briefly W my providers these are
kind of like the back end to WMI so

429
00:40:08,120 --> 00:40:12,680
these provide the W myself system with
everything they need to provide the

430
00:40:12,680 --> 00:40:16,470
objects that you're interested in
writing so take when they get to

431
00:40:16,470 --> 00:40:20,209
underscore process if you're in new
rating all process these there's some

432
00:40:20,210 --> 00:40:25,790
code on the system that has to enumerate
running process ease and then parse them

433
00:40:25,790 --> 00:40:32,170
parcel parcel that data and presented to
you in such a manner that that you can

434
00:40:32,170 --> 00:40:36,690
read it say like in PowerShell or women
Datuk see properly so that's what these

435
00:40:36,690 --> 00:40:44,590
providers do most of them are registered
in the registry using so each each

436
00:40:44,590 --> 00:40:49,310
provider has a respectively win32
provider classes and one of the

437
00:40:49,310 --> 00:40:52,950
properties is a coup it so if you just
take that do it and then look it up in

438
00:40:52,950 --> 00:40:57,990
the registry there be a deal and that's
the actual code that backs up provider

439
00:40:57,990 --> 00:41:02,600
you can also have kernel drivers act as
providers as well and those are all

440
00:41:02,600 --> 00:41:05,420
stored in the root of your mind in space

441
00:41:05,420 --> 00:41:10,720
alright so what might one of these
providers look like well there are some

442
00:41:10,720 --> 00:41:18,569
legitimate providers from third parties
one of them being well legitimate is you

443
00:41:18,570 --> 00:41:18,779
know

444
00:41:18,779 --> 00:41:25,609
kind of a subjective term here on on my
Lenovo ThinkPad laptop I have installed

445
00:41:25,609 --> 00:41:34,109
this this device driver W my provider
that so you can use it to remotely get

446
00:41:34,109 --> 00:41:41,140
like BIOS settings remotely set BIOS
settings sure there may be legitimate

447
00:41:41,140 --> 00:41:49,859
now so I was talking with with my
colleagues will include audio and Willie

448
00:41:49,859 --> 00:41:55,808
brought up a while ago just that you
know theoretically like 10 just create a

449
00:41:55,809 --> 00:42:00,799
malicious W my provider right then you
could maybe create some like interesting

450
00:42:00,799 --> 00:42:07,239
custom like W my objects it will make
your own methods so that when 32 process

451
00:42:07,239 --> 00:42:10,909
create method is really nice for
attackers why don't why why can't we

452
00:42:10,909 --> 00:42:16,769
extend that right so I reached out to
somebody's on Twitter and Casey Smith

453
00:42:16,769 --> 00:42:21,899
and Jared a kansan these guys guys are
awesome so they banged out some proof of

454
00:42:21,900 --> 00:42:26,439
concept actually get legitimate
malicious W my providers like that very

455
00:42:26,439 --> 00:42:32,019
night when when I gave them all of these
these these requirements so the first

456
00:42:32,019 --> 00:42:37,158
thing that Casey did was he created a
shell coroner implemented as aww my

457
00:42:37,159 --> 00:42:42,949
provider so if you were to take this w
my provider DLL drop it onto the victim

458
00:42:42,949 --> 00:42:48,269
system installer with install you till
da desi then you've got a means of

459
00:42:48,269 --> 00:42:56,169
executive shellcode either locally or
remotely onto that victim machine and

460
00:42:56,169 --> 00:43:00,479
that she'll code runs in the system
context pretty cool

461
00:43:00,479 --> 00:43:09,390
Jared what he what he wanted to do was
all active network connections because

462
00:43:09,390 --> 00:43:14,509
in windows 7 and below you don't get any
built-in classes that allow you to this

463
00:43:14,509 --> 00:43:20,650
stuff so he did that and he also allowed
you to execute arbitrary power shown the

464
00:43:20,650 --> 00:43:23,040
system contacts

465
00:43:23,040 --> 00:43:27,370
so I wanted to take some of these
theoretical attacks and extend them a

466
00:43:27,370 --> 00:43:32,089
little bit into the form of a pure W my
back door so you get this online now

467
00:43:32,090 --> 00:43:36,830
requires a powershell installer doesn't
require the power shall be present on

468
00:43:36,830 --> 00:43:38,160
the system

469
00:43:38,160 --> 00:43:44,410
alright so again partial is not required
and installs several prominent events

470
00:43:44,410 --> 00:43:49,250
are so there's a few things you can
implement your triggers so you might

471
00:43:49,250 --> 00:43:53,930
want to fire off at a regular interval
at a certain date time you might want to

472
00:43:53,930 --> 00:44:00,129
target a certain process name new or
modified files interactive logo on

473
00:44:00,130 --> 00:44:05,670
overdrive insertion and then you bind
that together with a respective action

474
00:44:05,670 --> 00:44:13,360
so you could say combine the file
creation trigger with the file upload

475
00:44:13,360 --> 00:44:21,240
action ok or drive insertion trigger
with infect drive action and then you

476
00:44:21,240 --> 00:44:26,359
register those together with the
register W my back door command alright

477
00:44:26,360 --> 00:44:32,100
so here is a brief example of the
generic back door that I implemented in

478
00:44:32,100 --> 00:44:37,360
this code so what I'm doing here is
queuing up a few commands are at this is

479
00:44:37,360 --> 00:44:44,270
just a VBScript like filedropper so I
cue that up in my back door next I'm

480
00:44:44,270 --> 00:44:51,080
gonna cue up a powershell filedropper
and instead of just executing script

481
00:44:51,080 --> 00:44:57,029
directly I'm going to save that into aww
my class property alright and then I'll

482
00:44:57,030 --> 00:45:01,750
create a cue up another command to
execute something out the command line

483
00:45:01,750 --> 00:45:07,940
in this case being partial databse dash
command and then what the payload is

484
00:45:07,940 --> 00:45:13,560
going to do is pull that down from the W
my class basic support decoded and

485
00:45:13,560 --> 00:45:21,220
execute it was a bit more in this video
but in the interest of time I want to

486
00:45:21,220 --> 00:45:25,959
move on to the next example these file
uploader so I have my c2 server

487
00:45:25,960 --> 00:45:31,170
listening alright on the right side and
on the left side I will

488
00:45:31,170 --> 00:45:38,230
install my file uploader and so whenever
any file is created or modified its

489
00:45:38,230 --> 00:45:43,520
going to upload those contents to the
command-and-control server so I provide

490
00:45:43,520 --> 00:45:49,640
all the code for this w my back door
really online not providing the c2

491
00:45:49,640 --> 00:45:57,490
server itself though alright I don't
have much time left so I want to maybe

492
00:45:57,490 --> 00:46:03,618
try to get away with this live demo here
the the drive infection payload take

493
00:46:03,619 --> 00:46:05,130
this year

494
00:46:05,130 --> 00:46:13,490
copy it into my victim and just to prove
to you that nothing is on this USB stick

495
00:46:13,490 --> 00:46:33,549
it pops up here

496
00:46:33,550 --> 00:46:42,600
not going to deal with this now I guess
that's what I would have done if it

497
00:46:42,600 --> 00:46:46,680
maybe I'm did recognize it is
immediately upon insertion they would

498
00:46:46,680 --> 00:46:50,890
have dropped my file in this case as
you'll see in the code it just drops

499
00:46:50,890 --> 00:46:55,770
that you like our signature which is
supposed to fly in a virus immediately

500
00:46:55,770 --> 00:46:59,830
I'm not really doing anything to
subversive again that this is just a

501
00:46:59,830 --> 00:47:03,870
proof of concept that I wanted to
demonstrate another thing that I was

502
00:47:03,870 --> 00:47:10,290
gonna show process killer where I would
be targeting Process Explorer and then

503
00:47:10,290 --> 00:47:16,370
anytime that opens the payload would
which is automatically killed that right

504
00:47:16,370 --> 00:47:21,620
so real real briefly some some
medications you can enumerate W my

505
00:47:21,620 --> 00:47:27,220
persistence remotely alright using
powershell as a great example there are

506
00:47:27,220 --> 00:47:30,879
some existing utilities out there are
two runs and cons of our grade for

507
00:47:30,880 --> 00:47:36,720
detecting the stuff after the fact and
I'm gonna be discussing this and much

508
00:47:36,720 --> 00:47:42,859
more depth at DEFCON on Saturday with my
colleagues so they'll be my is actually

509
00:47:42,860 --> 00:47:45,640
a really awesome agentless host ideas

510
00:47:45,640 --> 00:47:50,779
alright so there's a ton of attacker
actions that would take place that would

511
00:47:50,780 --> 00:47:58,480
fire off these W my events and so if you
just subscribe to those events then

512
00:47:58,480 --> 00:48:03,430
there's all kinds of things that you
might be able to detect for example if

513
00:48:03,430 --> 00:48:10,299
an attacker creates like persistence in
the registry or the Start menu

514
00:48:10,300 --> 00:48:16,700
there's a really handy W my object win32
underscore start-up command an instance

515
00:48:16,700 --> 00:48:21,819
of that is created so you could tap into
that and detect attacker persistence

516
00:48:21,820 --> 00:48:26,050
registry or start menu persistence using
just that mechanism you could also use

517
00:48:26,050 --> 00:48:28,060
this to detect

518
00:48:28,060 --> 00:48:32,450
whenever permanent W my event
subscriptions are created right so you

519
00:48:32,450 --> 00:48:36,560
have a permanent W my event subscription
that detects permanent W my event

520
00:48:36,560 --> 00:48:39,600
subscriptions you get really creative
here

521
00:48:39,600 --> 00:48:43,890
alright finally some some medications
are you can just outright disable the

522
00:48:43,890 --> 00:48:46,390
service if you don't need to access it
remotely

523
00:48:46,390 --> 00:48:51,359
you can apply firewall rules to say
block those decom ports there are some

524
00:48:51,359 --> 00:48:56,450
great pretty detailed event log entries
and then as i said you can have

525
00:48:56,450 --> 00:49:04,029
prevented a permanent W my subscriptions
lastly you can also apply Ackles to all

526
00:49:04,029 --> 00:49:11,869
of the W my name spaces to prevent like
for example the win32 process create

527
00:49:11,869 --> 00:49:18,569
method from being executed by applying
Ackles properly just quick shout out to

528
00:49:18,569 --> 00:49:22,950
my body is will shorten Justyn Warner
who helped me out and came up with some

529
00:49:22,950 --> 00:49:27,669
pretty creative event filters to my
awesome co-workers who reversed the

530
00:49:27,670 --> 00:49:33,349
entire format and really opened up the
field of W my friends ex because there

531
00:49:33,349 --> 00:49:39,579
was no forensics capability prior to
today at bsides when we presented the

532
00:49:39,579 --> 00:49:45,319
defensive and forensic side alright and
lastly to all defenders who are taking W

533
00:49:45,319 --> 00:49:52,519
my seriously hope to take W my seriously
after after this talk I don't have time

534
00:49:52,519 --> 00:49:59,529
for questions but thank you very much
just outside the door if you have any

535
00:49:59,529 --> 00:49:59,950
questions

