1
00:00:00,000 --> 00:00:05,460
you are currently in judgment and the
session you're in his battle of the SKM

2
00:00:05,460 --> 00:00:10,110
and you are you em how Windows 10
rewrites OS architecture and your

3
00:00:10,110 --> 00:00:14,829
speaker is Alex Knost you think you've
put your phone on vibrate in advance

4
00:00:14,830 --> 00:00:19,340
this session will probably take the four
occasions so I don't know if they'll be

5
00:00:19,340 --> 00:00:24,189
Q&A time here to stay around if anyone
wants to approach him during coffee

6
00:00:24,189 --> 00:00:31,700
break please do thank you very much

7
00:00:31,700 --> 00:00:42,180
thank you my talk about a scam and I you
I'm what those words mean and what

8
00:00:42,180 --> 00:00:47,050
changes are in witness stand regarding
that briefly by myself

9
00:00:47,050 --> 00:00:52,839
currently chief architect across just to
start up but most of my experience comes

10
00:00:52,840 --> 00:00:57,440
from having worked at Apple escort team
as well as having reverse engineered

11
00:00:57,440 --> 00:01:01,970
windows for pretty much the last fifteen
years which led me to be a co-author of

12
00:01:01,970 --> 00:01:05,400
the windows internals books which are
really great seating material here at

13
00:01:05,400 --> 00:01:06,030
halftime

14
00:01:06,030 --> 00:01:12,350
problems going to bed so I like to focus
a lot on design issues design flaws but

15
00:01:12,350 --> 00:01:15,320
also sometimes things that are really
well implemented and I don't actually

16
00:01:15,320 --> 00:01:19,630
have any of the above which is with us
talking about so I'm not gonna be

17
00:01:19,630 --> 00:01:22,940
dropping any other days of all abilities
rather I'm gonna talk about some

18
00:01:22,940 --> 00:01:28,550
dramatic I find changes the architecture
and can open up some questions and some

19
00:01:28,550 --> 00:01:34,700
thoughts about what that means for the
future of platform security so Microsoft

20
00:01:34,700 --> 00:01:37,890
is basically investing a lot of
resources into what they call

21
00:01:37,890 --> 00:01:43,770
virtualization based security or DBS and
witnessed an answer 2016 are

22
00:01:43,770 --> 00:01:48,869
implementing three features to cover
that which are I'm device guard

23
00:01:48,869 --> 00:01:55,080
prudential guard virtual TPM which they
take part of future called guarded

24
00:01:55,080 --> 00:02:00,490
fabric or shielded now there's very
little documentation so far on a lot of

25
00:02:00,490 --> 00:02:05,179
these features it is slowly starting to
come up like this here blog posts there

26
00:02:05,179 --> 00:02:08,759
are few presentations from Microsoft and
there was a talk yesterday actually a

27
00:02:08,758 --> 00:02:11,470
credential car so those of you attended
out talk

28
00:02:11,470 --> 00:02:15,950
National Guard does use basically what
I'm gonna be talking about this talk now

29
00:02:15,950 --> 00:02:21,089
I'm not gonna be talking about devices
are credentialed our door guard those

30
00:02:21,090 --> 00:02:24,200
are things that makes up the market
themselves I'm gonna talk and go deep

31
00:02:24,200 --> 00:02:29,429
into the actual architecture that makes
all those features work which is called

32
00:02:29,430 --> 00:02:34,740
virtual secure mode or VSM acid last
night is also really good talk on

33
00:02:34,740 --> 00:02:39,599
channel 9 I'm going deep series that
also covers some of what are we talking

34
00:02:39,599 --> 00:02:40,190
about

35
00:02:40,190 --> 00:02:43,780
here so I have a few references
throughout the presentation for those of

36
00:02:43,780 --> 00:02:48,100
you that want to go deeper into that so
what are the very brief recap of what

37
00:02:48,100 --> 00:02:50,970
those guard features are and they're
going to take a look at how the SMS

38
00:02:50,970 --> 00:02:57,500
architected how it starts up and then
how a scam and i Function both being the

39
00:02:57,500 --> 00:03:02,430
kind of the privilege side of the VSM
and the using outside they will talk

40
00:03:02,430 --> 00:03:08,800
about something called trust let's Iran
executes and also show you a demo of you

41
00:03:08,800 --> 00:03:11,960
know a third-party trust that which is
not supported by the architecture but

42
00:03:11,960 --> 00:03:15,120
just to kind of show you what that would
look like and how trust that's are

43
00:03:15,120 --> 00:03:18,810
developed and then we'll wrap up with
some kind of thoughts about what this

44
00:03:18,810 --> 00:03:22,630
really means and potential avenues of
attack or things that could be a little

45
00:03:22,630 --> 00:03:27,510
bit better improved in here so let's
talk about some of these things are

46
00:03:27,510 --> 00:03:31,739
coming up which you may hear about one
of them is the vice guard and does a

47
00:03:31,740 --> 00:03:35,200
presentation are say about that so what
divides guard essentially as an

48
00:03:35,200 --> 00:03:40,109
enterprise you can now decide what's
gonna running machines using code

49
00:03:40,110 --> 00:03:44,100
signing policies and create your own
certificates and sign your own binaries

50
00:03:44,100 --> 00:03:47,040
and determine what's gonna run and
what's not gonna run now this sounds

51
00:03:47,040 --> 00:03:50,560
similar to a blocker but what's
different is that the signing checks are

52
00:03:50,560 --> 00:03:55,010
actually done by component that's
supported through virtualization so it's

53
00:03:55,010 --> 00:03:58,519
not the kernel that's doing the
signature checks anymore it's actually

54
00:03:58,520 --> 00:04:03,820
component to the hypervisor they'll talk
about green card which was presented

55
00:04:03,820 --> 00:04:08,530
yesterday here black hat uses the same
virtualization technology but in this

56
00:04:08,530 --> 00:04:14,660
case to actually guard cryptographic
secrets so like your alsace secrets for

57
00:04:14,660 --> 00:04:18,988
example or NTLM hasher Kerberos TGT
ticket those things cannot be hidden

58
00:04:18,988 --> 00:04:24,409
away and guarded fabric and virtual TPM
is a future doubts talk about it ignite

59
00:04:24,410 --> 00:04:28,370
conference in Chicago in May and that
has to do with the ability to protect

60
00:04:28,370 --> 00:04:33,940
the BMW running and fabric provider for
example the cloud provider from the

61
00:04:33,940 --> 00:04:38,830
actual host signal have a VMS encrypted
that he's BitLocker running on as you're

62
00:04:38,830 --> 00:04:42,650
let's say and who ever actually owns de
virtualization infrastructure cat attack

63
00:04:42,650 --> 00:04:46,700
you so you can read about all these
features and official Mike some

64
00:04:46,700 --> 00:04:50,680
publications but I'll talk about kind of
what powers all these things working

65
00:04:50,680 --> 00:04:52,630
together and you can turn

66
00:04:52,630 --> 00:04:56,820
all of these on today and witnessed an
to registry there's a few dread she

67
00:04:56,820 --> 00:05:01,000
kissed you that there's witness features
that you can be able to try to sign in

68
00:05:01,000 --> 00:05:04,320
his group policy as well so there's
different ways to kind of enable this

69
00:05:04,320 --> 00:05:10,099
functionality or to talk about via some
specifically virtual secure mode which

70
00:05:10,100 --> 00:05:17,270
is what provides all of this
functionality that is all work well as a

71
00:05:17,270 --> 00:05:22,340
hypervisor that's in Windows tennis 2012
a virtual processor now has an attribute

72
00:05:22,340 --> 00:05:27,710
called a BTL or virtual trust level now
today there's two details there can be

73
00:05:27,710 --> 00:05:31,260
more in the future and the higher the
beach here Liz the more privileged

74
00:05:31,260 --> 00:05:36,060
you're going to be a nice thing here is
going up I could end up with those who

75
00:05:36,060 --> 00:05:39,500
bring minus one ring minus two problems
you can just keep creating higher and

76
00:05:39,500 --> 00:05:45,380
higher details so VDL 0 is where you can
call normal world or normal vote this is

77
00:05:45,380 --> 00:05:50,110
we're kind of standard code can execute
and detail one is where you can call

78
00:05:50,110 --> 00:05:54,760
secure world more secure remote and is a
more privilege level above each L zero

79
00:05:54,760 --> 00:05:59,940
provided by the hypervisor now these et
elles there are thought to know the rain

80
00:05:59,940 --> 00:06:06,350
levels so you can be ring 0844 note in
detail 0 that doesn't give you access

81
00:06:06,350 --> 00:06:11,360
overview till 1 LSU 30 mpg 001 as well
so you got your ring levels they're kind

82
00:06:11,360 --> 00:06:14,550
of a traditional uses and Carl
boundaries but those R A levels are

83
00:06:14,550 --> 00:06:19,810
within a Tcl and then horizontally you
scale to other details that provide

84
00:06:19,810 --> 00:06:23,780
their own ring levels within themselves
as well so I can think of security as

85
00:06:23,780 --> 00:06:28,190
kind of local PTL which is your
reasonable and the spreading across any

86
00:06:28,190 --> 00:06:34,719
details as well now this is actually is
what you probably know / apt rent btw

87
00:06:34,720 --> 00:06:38,670
asset base tables extended page tables
or second level address translation

88
00:06:38,670 --> 00:06:43,890
which is what CPU that support harder
virtualization allow hypervisors to have

89
00:06:43,890 --> 00:06:49,599
their own view of what physical pages
correspond what virtual agent correspond

90
00:06:49,600 --> 00:06:53,410
to what physical pages and you by four
million people entries which is where

91
00:06:53,410 --> 00:06:57,280
the LSD finds this road riders is
readable or writable and watch this

92
00:06:57,280 --> 00:07:00,919
physical address both the hypervisor
even though the OS things that have page

93
00:07:00,919 --> 00:07:01,770
exists

94
00:07:01,770 --> 00:07:06,318
is executable for example the hypervisor
can say well actually no it doesn't

95
00:07:06,319 --> 00:07:09,220
exist or yes it exists but it's not
executable

96
00:07:09,220 --> 00:07:13,430
hypervisor can basically for light is on
additional layer translation that

97
00:07:13,430 --> 00:07:17,210
overrides with ALS things tonight
introducing things like for example

98
00:07:17,210 --> 00:07:23,878
blocking read to a page that even the OS
camp touch now argues that I still your

99
00:07:23,879 --> 00:07:27,740
secrets in a page and only that's a
hypervisor can read or something a

100
00:07:27,740 --> 00:07:31,560
detailed one can read then nothing can
read those secrets even if they're

101
00:07:31,560 --> 00:07:38,039
running in 30 because there in 10 and
detail 0 not in detail what I saw this

102
00:07:38,039 --> 00:07:44,139
lets you guard and protect data you can
block execution permissions which is

103
00:07:44,139 --> 00:07:47,810
what device card uses you can say sure
the OS kernel things at this page is

104
00:07:47,810 --> 00:07:51,610
executable but when we verify the code
integrity through the hypervisor

105
00:07:51,610 --> 00:07:56,740
functionality it did not match the
signature that enterprise wanted so I'm

106
00:07:56,740 --> 00:08:00,080
not actually gonna make the page
executable and the extended page tables

107
00:08:00,080 --> 00:08:04,080
so the CPU actually want to execute that
code even though the ALS thinks its

108
00:08:04,080 --> 00:08:08,469
executable or exploit flips a bit to
mark the page executable that doesn't

109
00:08:08,469 --> 00:08:09,210
matter

110
00:08:09,210 --> 00:08:13,680
EBT still say the pages and you can
block rights as well as critical data

111
00:08:13,680 --> 00:08:18,259
that even the kernel can't touch because
the kernel running in detail 0 which is

112
00:08:18,259 --> 00:08:22,259
normal world and so basically the by
segregating memory access we cannot

113
00:08:22,259 --> 00:08:27,669
provide two separate privilege levels
through the hypervisor now the

114
00:08:27,669 --> 00:08:32,218
hypervisor doesn't actually implement
all of this logic to provide device

115
00:08:32,219 --> 00:08:37,520
guard and credential guard and and
cardiac this would make the hypervisor

116
00:08:37,520 --> 00:08:41,490
too complex and we want to keep the
complexity high prices are low so that

117
00:08:41,490 --> 00:08:46,529
doesn't have too much kind of service
attack now within hyper-v there's

118
00:08:46,529 --> 00:08:49,820
something that's called the partition
and typically when you enable hyper-v

119
00:08:49,820 --> 00:08:53,880
your host OS boot in what's called the
root partition and then you guess we

120
00:08:53,880 --> 00:08:59,180
have filed petitions unless you actually
could boot up other PM's on you have

121
00:08:59,180 --> 00:09:03,689
those are repetition now before hyper-v
fully trust the repetition and through

122
00:09:03,690 --> 00:09:07,709
petitioning to do everything it wanted
to the hypervisor and everything else

123
00:09:07,709 --> 00:09:12,469
via sambo now your root partition first
three starts out and detailed one so you

124
00:09:12,470 --> 00:09:14,430
start out in the more privileged note

125
00:09:14,430 --> 00:09:18,430
and to secure amount now code is running
their can then set up the appt entries

126
00:09:18,430 --> 00:09:23,410
as needed and then we drop down to PTL 0
and everything now runs in detail 0

127
00:09:23,410 --> 00:09:27,490
which is less privileged like your
machine starts up in 20 and then you

128
00:09:27,490 --> 00:09:32,070
lower down to ring 3 same thing happens
at a high price so with the SML the

129
00:09:32,070 --> 00:09:36,690
hypervisor no longer implicitly trust
this is Vishal attribute that tells us

130
00:09:36,690 --> 00:09:43,060
how privileged you are within my world
so instead of loading your normal

131
00:09:43,060 --> 00:09:47,260
colonel and all his drivers and with
their kids out cysts and all the mess

132
00:09:47,260 --> 00:09:50,860
that comes in your visual rings our
environment we don't actually load all

133
00:09:50,860 --> 00:09:56,290
of empty inside of detail one now so
it's not going to happen in Crete two

134
00:09:56,290 --> 00:10:02,899
environments of execution secure carmine
environment which runs 30 indeed show

135
00:10:02,899 --> 00:10:09,339
one and the isolated using my department
which runs at three in detail so a scam

136
00:10:09,339 --> 00:10:18,029
is basically the kernel 2011 environment
at retail 10 mode includes a little girl

137
00:10:18,029 --> 00:10:23,410
which is called Esqueda secure KARNAL or
sometimes just called the smart card on

138
00:10:23,410 --> 00:10:28,319
the secure a loan application runtime
and only has two models as KCI which by

139
00:10:28,320 --> 00:10:31,980
its code integrity and CNG which
provides cryptography there's nothing

140
00:10:31,980 --> 00:10:36,980
else there's no how thick it out says
there's no drivers and a colonel itself

141
00:10:36,980 --> 00:10:41,180
is only about 300 kilobytes it's not
your standard eight megabytes aunty

142
00:10:41,180 --> 00:10:46,219
colonel in isolated using moat around
what are called trust let's trust let's

143
00:10:46,220 --> 00:10:49,279
we're going to see a little processes
that run if you still want their eyes

144
00:10:49,279 --> 00:10:52,760
lit from each others and their limited
in what they can do when they do system

145
00:10:52,760 --> 00:10:57,350
calls their system calls first go
through SKM secure colonel and then

146
00:10:57,350 --> 00:11:00,200
decides which the system cost to
implement and I'll see there's a real

147
00:11:00,200 --> 00:11:04,579
limited numbers cause they're allowed
for trust let's they don't talk to CSR

148
00:11:04,579 --> 00:11:08,589
says for example there's no shaming
there's no compassion and they can only

149
00:11:08,589 --> 00:11:11,880
Lodi allows that are approved for
execution in this environment are going

150
00:11:11,880 --> 00:11:17,660
to see how the process works everything
else in video 0 remains the same got

151
00:11:17,660 --> 00:11:21,540
cranky colonel and toss and it runs
through it he can sometimes called the

152
00:11:21,540 --> 00:11:26,010
high level of less hrs now it's
important to note that the user

153
00:11:26,010 --> 00:11:31,189
is essentially identical across me till
10 so the same authority by Andrade the

154
00:11:31,190 --> 00:11:36,070
same about 2:30 binary but you are
limiting what deals you can load but you

155
00:11:36,070 --> 00:11:39,060
don't get a separate using on
environment in the current although you

156
00:11:39,060 --> 00:11:42,619
do have a separate kernel which which
runs which is different from the IndyCar

157
00:11:42,620 --> 00:11:47,020
so this is basically looks like you've
got your bTW else they're kind of

158
00:11:47,020 --> 00:11:51,780
horizontal and ring levels they're
basically vertical and you have your

159
00:11:51,780 --> 00:11:56,050
binary that's running as a trust live
here and it's importing the standard

160
00:11:56,050 --> 00:12:00,689
Windows DLL else which talked to the
standard Windows 32 which talks a

161
00:12:00,690 --> 00:12:05,490
standard and Sheila but now the system
calls go through security and we're

162
00:12:05,490 --> 00:12:08,610
gonna see doesn't implement the system
calls the ones that it does allow you to

163
00:12:08,610 --> 00:12:14,550
use a proxy them to and toss to do them
there on the other hand you in this

164
00:12:14,550 --> 00:12:18,260
environment also will have access to
more gonna see are called secure system

165
00:12:18,260 --> 00:12:22,980
calls we go through a separate dll which
goes through another DLL thing goes to

166
00:12:22,980 --> 00:12:28,100
the S cam and these are additional
facilities are provided if your trust

167
00:12:28,100 --> 00:12:33,490
and gonna see what's more this was
Phillies are now for this actually be

168
00:12:33,490 --> 00:12:37,910
secure the bootloader which is setting
all this up Nissa trust the firmware the

169
00:12:37,910 --> 00:12:41,730
platform is otherwise if I boot up when
I'm setting all this up the thing that

170
00:12:41,730 --> 00:12:45,240
runs a video on his malicious well then
it's running like it's like running

171
00:12:45,240 --> 00:12:49,770
lucia scattering 0 but only works to
secure but provides a guarantee that the

172
00:12:49,770 --> 00:12:53,620
hybridized also used to trust that you
can't use the AMA to attack the jail one

173
00:12:53,620 --> 00:12:58,780
pagers because the AMA's direct memory
access to physical pages and it bypasses

174
00:12:58,780 --> 00:13:04,160
whatever apt protectionism and put into
place so we rely on them and you are bTW

175
00:13:04,160 --> 00:13:08,719
to provide this guarantee that the AMA
cannot attack US Airways LCC make sure

176
00:13:08,720 --> 00:13:13,100
that storing credentials and secrets it
can store them in a safe place and

177
00:13:13,100 --> 00:13:17,430
Ceylon measure a TPM provides a
guarantee that with all these three

178
00:13:17,430 --> 00:13:23,599
functionality secure boot immun TPM you
have a massive security of chancers as

179
00:13:23,600 --> 00:13:28,560
you can and DBS kind of requires all
these to be there to provide and

180
00:13:28,560 --> 00:13:33,449
guarantee security now vs I won't work
if these are not all there you can run

181
00:13:33,450 --> 00:13:35,670
without security you can run with a time

182
00:13:35,670 --> 00:13:40,260
GPS but I can guarantee those things
anymore and I you see Chris have to be

183
00:13:40,260 --> 00:13:44,800
on desk now do you make an attack me now
bootloader go to be malicious so really

184
00:13:44,800 --> 00:13:47,630
if these things are not all on you don't
have the same kind of layer of

185
00:13:47,630 --> 00:13:53,010
protection so part of what's running in
the secure Kermode is that secure

186
00:13:53,010 --> 00:13:57,230
colonel but also this SEC I library and
that's your hypervisor basecoat

187
00:13:57,230 --> 00:14:04,110
integrity Ridge BC I this is kind of a
identical ish version of CIL which runs

188
00:14:04,110 --> 00:14:09,890
in detail 0 was part of the normal
colonel and it's what basically checks

189
00:14:09,890 --> 00:14:13,680
for certificates checks for digital
signing and when you enable what are

190
00:14:13,680 --> 00:14:17,030
called strong strong could guarantee so
you vice guard it's gonna be the thing

191
00:14:17,030 --> 00:14:22,110
that checks is a biennial outlook battle
even sure colonels exploit it it's not

192
00:14:22,110 --> 00:14:25,550
the exploited colonels gonna say yeah
yeah this is allowed to load you have to

193
00:14:25,550 --> 00:14:30,010
exploit SKM which is a different ppl
level and I need a hypervisor bypass or

194
00:14:30,010 --> 00:14:34,920
something like that and so with devise a
guard or with strong code guarantees if

195
00:14:34,920 --> 00:14:40,469
you wanna run code a scam has to say yes
maybe pages double and it's only gonna

196
00:14:40,470 --> 00:14:46,140
do that if a GCI valid signatures being
valid and you can also turn over a cold

197
00:14:46,140 --> 00:14:50,130
heart could guarantees because the
strong guarantees I come with a Visa

198
00:14:50,130 --> 00:14:55,260
card they only apply to drivers and the
kernels with particle guarantee you can

199
00:14:55,260 --> 00:14:56,230
use them out

200
00:14:56,230 --> 00:15:01,090
behave this way as well and you can have
an enterprise that says any executable a

201
00:15:01,090 --> 00:15:05,070
DLL and even any powershell script
that's ever gonna run on this machine

202
00:15:05,070 --> 00:15:10,930
has to be signed and s Campbell validate
if the signature is there or not and so

203
00:15:10,930 --> 00:15:15,420
someone were to try to sign a almost
nothing would run anymore but you have

204
00:15:15,420 --> 00:15:19,040
the most secure Windows environment you
could ever dream because everything

205
00:15:19,040 --> 00:15:23,640
including even economists executive
memory would have to be site and to be

206
00:15:23,640 --> 00:15:28,000
impossible to get any kind of unsigned
code here other than a DMA vulnerability

207
00:15:28,000 --> 00:15:33,880
were attacking secure boot or going 2-1
or something like that so a lot of

208
00:15:33,880 --> 00:15:38,370
information such as a little review
normal world secure world normal mode

209
00:15:38,370 --> 00:15:42,890
secure mode is a kind of two
environments ves Mr smart that's

210
00:15:42,890 --> 00:15:46,420
basically the runtime the architecture
that provides isolation

211
00:15:46,420 --> 00:15:50,579
and the smartcard o2 secure colonel is
the current around the side detail one a

212
00:15:50,579 --> 00:15:51,069
scam

213
00:15:51,070 --> 00:15:56,990
H loss of the high-level OS the normal
world and and tosses the kernel that

214
00:15:56,990 --> 00:16:02,910
runs and animal world ium user isolated
user mode which is a golden ring 3 a

215
00:16:02,910 --> 00:16:08,209
scam is your secure and 10 both of these
in detail what individuals again they're

216
00:16:08,209 --> 00:16:14,000
your virtual trust level 0 your normal
mode till one is our secure and DBS is

217
00:16:14,000 --> 00:16:18,070
the set of technologies of features that
are going to leverage what's there and

218
00:16:18,070 --> 00:16:24,370
so how does this thing start up well
it's all done through the bootloader and

219
00:16:24,370 --> 00:16:28,589
so the hypervisor has the assembled into
it and when you launch the hypervisor

220
00:16:28,589 --> 00:16:32,560
with the BCD option hypervisor launch
type this will start of the hypervisor

221
00:16:32,560 --> 00:16:36,399
which will kind of initializing via some
functionality but nothing will be

222
00:16:36,399 --> 00:16:40,760
running a detailed one yet when
hypervisors radio launched as a function

223
00:16:40,760 --> 00:16:44,750
that's gonna basically low to high by
the loader the hypervisor loader then

224
00:16:44,750 --> 00:16:48,410
initialize the hypervisor and we drop
back down the bootloader and other

225
00:16:48,410 --> 00:16:53,260
bootloader runs hypervisor as well now
the hypervisor bootloader checks if the

226
00:16:53,260 --> 00:16:58,410
SMS trend if the SMS turned on and
enabled for I M functionality which is

227
00:16:58,410 --> 00:17:03,279
another BCD variable called DSM
lunchtime if it is where then unloaded

228
00:17:03,279 --> 00:17:09,099
secure kernel which is secure karnal .
XE SecureCRT a lot XE imports ask ECIL

229
00:17:09,099 --> 00:17:14,299
and CNG tutsis we load those boundaries
up we verify the signatures and we also

230
00:17:14,299 --> 00:17:18,869
basically set up everything else news
for us then we call this week so the

231
00:17:18,869 --> 00:17:21,589
first thing I'm gonna load in this
environment is a secure card is the

232
00:17:21,589 --> 00:17:26,069
bootloader and then a secure colonel had
fell one and this is why secure buddhist

233
00:17:26,069 --> 00:17:29,659
critical because if the bootloader is
compromised in some way and this whole

234
00:17:29,660 --> 00:17:34,669
process can be compromised and I think
it runs abt 01 is no longer trusted but

235
00:17:34,669 --> 00:17:38,900
barring security vulnerabilities or wood
turning off secure boot this whole

236
00:17:38,900 --> 00:17:41,650
process is validated through the
signature checking that secure boot

237
00:17:41,650 --> 00:17:46,350
provides now a smarter than they're
gonna check your VSM policy and that

238
00:17:46,350 --> 00:17:49,719
comes from your Group Policy settings
it's going to come from the registry

239
00:17:49,720 --> 00:17:53,500
essentially there's address again got a
slider device guard and that's gonna be

240
00:17:53,500 --> 00:17:54,290
fine

241
00:17:54,290 --> 00:17:55,830
should enable

242
00:17:55,830 --> 00:18:02,010
CBS should we require secure we should
require entire menu and should we use

243
00:18:02,010 --> 00:18:05,960
hypervisor basecoat integrity and based
on whatever features are set this is

244
00:18:05,960 --> 00:18:09,789
gonna be passed on to the hypervisor
through the Assam and secured kernel

245
00:18:09,789 --> 00:18:14,690
which are going to decide what
mechanisms to adapt and so does a bunch

246
00:18:14,690 --> 00:18:21,200
of options are gonna be set this policy
is happening now too interesting options

247
00:18:21,200 --> 00:18:26,179
that were not very well documented in my
research is Ms are filtering an nxn mio

248
00:18:26,179 --> 00:18:30,230
and these are kind of two attacks you
could do if you have the hypervisor

249
00:18:30,230 --> 00:18:35,309
couldn't agree turned on the first one
is device map memory until Windows stand

250
00:18:35,309 --> 00:18:40,320
there was no API to basically get non
executive device map memory so when you

251
00:18:40,320 --> 00:18:44,110
called mmm a bio space you got
executable memory and when to stand the

252
00:18:44,110 --> 00:18:48,639
added a feature to basically have the
drivers requested me not executable

253
00:18:48,639 --> 00:18:52,769
in Windows 8.1 for example chances are
your video card frame buffer is actually

254
00:18:52,769 --> 00:18:58,029
executable so if you put code in their
own right now with the hypervisor and

255
00:18:58,029 --> 00:19:02,510
via sam turned on even if the drivers
request those pages to be executable

256
00:19:02,510 --> 00:19:06,658
because that was a default the apt page
will not be executable so I frame buffer

257
00:19:06,659 --> 00:19:11,000
will be executable even though your
drivers not updated the second type of

258
00:19:11,000 --> 00:19:15,500
attack is using a massage for model
specific register is on a CPU and these

259
00:19:15,500 --> 00:19:19,460
lets you mess with a TLB and do things
like he'll be splitting and other kinds

260
00:19:19,460 --> 00:19:22,190
of cash of pollution attacks and
poisoning

261
00:19:22,190 --> 00:19:26,070
well my site has a list of MS are they
considered dangerous and if you try to

262
00:19:26,070 --> 00:19:29,029
either read or write them just policies
are going to prevent you from doing that

263
00:19:29,029 --> 00:19:32,559
even from the house based unless so they
actually did a really good job of

264
00:19:32,559 --> 00:19:35,789
figuring out what all the attacks that
you can implement and try to mitigate

265
00:19:35,789 --> 00:19:40,529
against most of this so take a look at a
little bit of the internals of the S cam

266
00:19:40,529 --> 00:19:48,529
so first homer to and toss BC got de
TWAR tal DVDSCR usual kind of suspects

267
00:19:48,529 --> 00:19:52,950
but it's also got some specific
functions what are called normal calls

268
00:19:52,950 --> 00:19:57,639
and cays and it's got its own kind of
object matters on Mary manager its own

269
00:19:57,639 --> 00:20:01,110
process management functions but these
are actually mad resources

270
00:20:01,110 --> 00:20:06,649
a bit later these are basically just
kind of micro components to provide

271
00:20:06,649 --> 00:20:08,649
basic functionality

272
00:20:08,650 --> 00:20:13,490
there's actually have a lot of doesn't
have any resource management and doesn't

273
00:20:13,490 --> 00:20:17,880
have a lot of functionality it's very
very small it also exports and functions

274
00:20:17,880 --> 00:20:22,570
such as CNG . system load so things like
allocating from the pool are now managed

275
00:20:22,570 --> 00:20:28,830
to ask a.m. some locking position as
provided by the secure colonels well and

276
00:20:28,830 --> 00:20:34,060
key you know there's a PCR at geserum
well colonel has a structure there as

277
00:20:34,060 --> 00:20:38,700
well which you know we can call it a ski
PCR in and he has a key threat structure

278
00:20:38,700 --> 00:20:42,260
well here we have an esky threat
structure so for every threat it's

279
00:20:42,260 --> 00:20:45,330
raining secure mode there's a structure
for that and every time there's a

280
00:20:45,330 --> 00:20:49,040
process running in secure mode there's a
structure for that as well and will call

281
00:20:49,040 --> 00:20:52,610
ask a process unfortunately like the
kernel we have symbols for these

282
00:20:52,610 --> 00:20:55,740
structures there are no simple so
there's some offset I put here

283
00:20:55,740 --> 00:20:59,340
three-person engineering but he might
change and obviously nothing is going to

284
00:20:59,340 --> 00:21:03,070
be watching anyway but just to point out
there are similar structures that mirror

285
00:21:03,070 --> 00:21:08,780
when you have a normal anti-crime now as
game does provide a few things that are

286
00:21:08,780 --> 00:21:13,370
not their own McArdle one of his card
mailboxes and mailboxes allowed to be

287
00:21:13,370 --> 00:21:18,469
easily communicate between ium and code
of writing inside a pentose every

288
00:21:18,470 --> 00:21:22,990
process has each mailbox slots you can
fill a slot with up to a page of data

289
00:21:22,990 --> 00:21:28,910
then on the normal side there's a kernel
API DSL retrive mailbox and you can read

290
00:21:28,910 --> 00:21:31,870
one piece of metal boxes so allows a
trust let

291
00:21:31,870 --> 00:21:36,919
component to be physically for something
that can be read from the other side I'm

292
00:21:36,920 --> 00:21:41,300
gonna see what uses this now there's
also something called capabilities that

293
00:21:41,300 --> 00:21:46,600
can provide its capabilities determine
which ium system calls that I am

294
00:21:46,600 --> 00:21:51,379
complaining like all are allowed by law
doesn't allow all policy a check trust

295
00:21:51,380 --> 00:21:56,740
literati policy or check trusted
instance good policy every time you want

296
00:21:56,740 --> 00:22:00,660
something in a UN has a unique and the
capabilities are going to determine

297
00:22:00,660 --> 00:22:04,900
which ideas are allowed to make which
calls so basically can further logged on

298
00:22:04,900 --> 00:22:09,370
and say this trust late can't do that
thing now today the only thing that uses

299
00:22:09,370 --> 00:22:14,120
that are two epi Scott secure storage
get a secure storage put and get can

300
00:22:14,120 --> 00:22:19,409
only call by trusted 82 and to put can
only be called by trusted id3 mention

301
00:22:19,410 --> 00:22:21,280
what those trust that's actually are

302
00:22:21,280 --> 00:22:24,970
so there is some knowledge in a scam
about what trust that should exist and

303
00:22:24,970 --> 00:22:29,090
what are the things they should be doing
those storage get on the store's put

304
00:22:29,090 --> 00:22:32,780
functions their social intercourse
towards blobs and stories blogs

305
00:22:32,780 --> 00:22:38,800
essential to trust let's not sure
different I D but a scene instance to be

306
00:22:38,800 --> 00:22:42,300
easily communicate between each other's
and we're gonna see what stories blogs

307
00:22:42,300 --> 00:22:46,950
are actually just 40 mailboxes like to
communicate from security normal stores

308
00:22:46,950 --> 00:22:53,040
wolves live to trust us to basically put
and get there on the security now

309
00:22:53,040 --> 00:22:58,550
provides are secure mode calls and
secure phone calls are things that are

310
00:22:58,550 --> 00:23:04,050
insecure kernel that end he may need to
call so those 85 on operation go into

311
00:23:04,050 --> 00:23:08,860
service code and its operations possible
resuming the thread doing secure service

312
00:23:08,860 --> 00:23:14,290
call or flushing it will be banned from
and toss from normal world you perform

313
00:23:14,290 --> 00:23:15,399
secure call

314
00:23:15,400 --> 00:23:20,240
p.m. call instruction so basic easily
hypervisor the harder extension to

315
00:23:20,240 --> 00:23:21,490
basically do this

316
00:23:21,490 --> 00:23:26,070
11 into RCX and is now takes upto one
and you can do one of those operations

317
00:23:26,070 --> 00:23:32,200
those service calls are basically things
that and tossed needs to query for and

318
00:23:32,200 --> 00:23:37,170
toss knees asking him to do or entities
to tell us can about something so you

319
00:23:37,170 --> 00:23:43,160
can't allocating school memory with AGC
I turned on so anti US has to ask a scam

320
00:23:43,160 --> 00:23:47,410
can you please allocating memory and SK
will decide to do that based on the

321
00:23:47,410 --> 00:23:51,630
signatures if you want to load an image
and I you a mode that has to be done by

322
00:23:51,630 --> 00:23:55,930
a scam if you want to flush it he'll be
without that has to go through this game

323
00:23:55,930 --> 00:24:00,100
as well because it will be a sexy
beauties as well finishing crash dump

324
00:24:00,100 --> 00:24:02,870
has to go through this game as well
because now we want encrypt their

325
00:24:02,870 --> 00:24:07,459
speeches so anytime you need something
from SKM the secure mode service calls

326
00:24:07,460 --> 00:24:11,890
gonna let us do that now there's some
specializes while they're coming

327
00:24:11,890 --> 00:24:16,580
interesting so there is a special call
for doing HW retrace from and I am

328
00:24:16,580 --> 00:24:20,439
component and you can turn tracing on in
normal mode and Shi'ite races that are

329
00:24:20,440 --> 00:24:24,780
coming from secure about their way to
actually buy things and there's also

330
00:24:24,780 --> 00:24:28,889
fear the failure log pages that you can
turn on which gives you some limited

331
00:24:28,890 --> 00:24:32,190
information about what could have gone
wrong and I scan mode when I try to load

332
00:24:32,190 --> 00:24:33,650
image sick and then later

333
00:24:33,650 --> 00:24:38,570
on analyzed that's the kind of debugging
features that exists now there's also no

334
00:24:38,570 --> 00:24:42,800
moment calls normal cars are the
opposite of secure mode calls the user

335
00:24:42,800 --> 00:24:48,090
when the secure colonel need something
from and toss us for possible operations

336
00:24:48,090 --> 00:24:52,659
there there's no more service calls and
normal system costs and normal system

337
00:24:52,660 --> 00:24:56,440
calls or when are you an application's
need to do a system call and we want to

338
00:24:56,440 --> 00:25:00,420
implement a system call in a normal
colonel not secure and normal service

339
00:25:00,420 --> 00:25:04,970
calls or when a scam itself need
something from us and again these are

340
00:25:04,970 --> 00:25:10,060
done through avium construction and
these take you from PTO one now 20 you

341
00:25:10,060 --> 00:25:14,220
drop down and privilege and you do the
operation is being asked here and

342
00:25:14,220 --> 00:25:17,630
there's a number of operations like
allocating physical pages to marry

343
00:25:17,630 --> 00:25:21,660
management is still owned by little
kernel so when a scam need some physical

344
00:25:21,660 --> 00:25:26,330
pages can ask him or chrome to do that
to terminate a threat or process process

345
00:25:26,330 --> 00:25:31,929
management threat scheduling US alone so
a scam has to ask and toss to do that

346
00:25:31,930 --> 00:25:36,580
waiting cries Asian copying virtual
memory card allocating virtual memory

347
00:25:36,580 --> 00:25:40,629
and use remote debugging tracing all
those things still have to be a normal

348
00:25:40,630 --> 00:25:46,400
mode and SGM does a normal mode call to
perform and if those actions the last

349
00:25:46,400 --> 00:25:52,030
kind of call that's needed here or if I
run time calls now when you have an EFI

350
00:25:52,030 --> 00:25:57,990
bias are certain runtime calls that can
be called by the less so for example

351
00:25:57,990 --> 00:26:04,620
your valuables on a set or get it if I
variable this has to go through if I now

352
00:26:04,620 --> 00:26:10,320
from user mode there are API to do this
there's a get more memorable and asset

353
00:26:10,320 --> 00:26:14,490
former verifiable those calls from user
mode eventually go into how eventually

354
00:26:14,490 --> 00:26:18,970
cause if I but what about a trust let
what about something of the running in

355
00:26:18,970 --> 00:26:25,180
isolated user mode and it wants to touch
if I well yes I'm can also basically in

356
00:26:25,180 --> 00:26:30,010
virtualized the if I run time calls now
this means that when you do if I run

357
00:26:30,010 --> 00:26:35,610
time call with this turn on the if I run
time code will run a detail one and this

358
00:26:35,610 --> 00:26:39,719
is again we're watching so important
because you don't trust the firmware now

359
00:26:39,720 --> 00:26:43,740
in trying to get a variable variable
code runs of each 01

360
00:26:43,740 --> 00:26:47,679
now has access to all the pages that
normally would be invisible to be chill

361
00:26:47,679 --> 00:26:52,030
0 so framework could attack this but
secure boot provides guarantees against

362
00:26:52,030 --> 00:26:58,059
that if it's turned on if it's not like
I know how the kernel site works to get

363
00:26:58,059 --> 00:27:03,428
the user side a little bit which is a UN
so a scam provides three basic services

364
00:27:03,429 --> 00:27:07,559
to trust lets that are not available
when you're not a trust let secured

365
00:27:07,559 --> 00:27:11,580
identification secured communication and
secure cryptography these are all

366
00:27:11,580 --> 00:27:15,510
provided a system calls to do them
through normal Cisco instruction well

367
00:27:15,510 --> 00:27:19,790
they'll have the hybrid set so probably
no thanks he calls you know their index

368
00:27:19,790 --> 00:27:25,050
0 index one index to these calls are
eighty million 180 million to a million

369
00:27:25,050 --> 00:27:30,750
three and the trust would basically
doesn't do the system calls directly to

370
00:27:30,750 --> 00:27:34,130
like it when there's a position doesn't
the system calls directly there is a

371
00:27:34,130 --> 00:27:39,440
base library that implements MAPI those
API's then called it low-level library

372
00:27:39,440 --> 00:27:44,600
and then it does a system calls just
like a normal position as Colonel 32

373
00:27:44,600 --> 00:27:49,469
calls lol which then does the system
call the trust that's working the same

374
00:27:49,470 --> 00:27:55,010
way and so they're sick system calls
that are provided these are the indices

375
00:27:55,010 --> 00:28:00,129
for them so there's some call to get the
education he and two separate incidents

376
00:28:00,130 --> 00:28:03,200
those are basic to identify yourself or
the machine there's a cryptographic

377
00:28:03,200 --> 00:28:09,530
system call crypto and then there is
this is the mailbox and storage which

378
00:28:09,530 --> 00:28:14,070
are part of the communications back now
the crypto API itself has five different

379
00:28:14,070 --> 00:28:17,540
sub calls so there's five different
things you can do the other EPA's you

380
00:28:17,540 --> 00:28:21,940
call them and they just do their action
to look into crypto API do it can

381
00:28:21,940 --> 00:28:26,920
encrypt decrypt data it can decrypt data
has been bound specifically the machine

382
00:28:26,920 --> 00:28:31,920
vision key it can generate a seat and
you can check tips motor not since all

383
00:28:31,920 --> 00:28:36,510
this is compliant but you never have to
call these EBI directly if you i mean

384
00:28:36,510 --> 00:28:40,900
you're writing a trust which you can now
anyway there's another base EPA that

385
00:28:40,900 --> 00:28:45,410
provides that and so these are the guys
that are kinda provided to trust let's

386
00:28:45,410 --> 00:28:50,690
today which match those system calls to
the crypt the crypt bound data encrypted

387
00:28:50,690 --> 00:28:53,210
get tips mode

388
00:28:53,210 --> 00:28:58,149
get the seatpost the mailbox secure
storage get put and said for instance so

389
00:28:58,149 --> 00:29:01,070
basically they're kind of the I wanna
see document about the high-level

390
00:29:01,070 --> 00:29:05,639
interface that trust let's are going to
be able to call now outside of those

391
00:29:05,640 --> 00:29:10,730
specific SKM system calls you have
obviously trust that our normal Windows

392
00:29:10,730 --> 00:29:15,159
codes recalling things like read even
create file the standard GPS in my house

393
00:29:15,159 --> 00:29:20,179
the study P eyes that are converts
system calls but SKM only allows you to

394
00:29:20,179 --> 00:29:25,590
48 of the 2000 system calls at the
courthouse there some synchronization

395
00:29:25,590 --> 00:29:30,010
API's they're allowed some unforeseen
events and alerts which allow critical

396
00:29:30,010 --> 00:29:32,649
sections to working you so much for
example there's no new taxes

397
00:29:32,649 --> 00:29:37,168
workers factory scrapie I we completion
pockets which are all used by the thread

398
00:29:37,169 --> 00:29:41,770
pool which in turn allows RBC do work
and LPC functions are allowed as well

399
00:29:41,770 --> 00:29:46,889
which is required by RBC work as well
maybe ice to look a virtual memory

400
00:29:46,890 --> 00:29:50,730
section object of just how you get mad
yellow and Alka from the heap

401
00:29:50,730 --> 00:29:54,960
obviously need to do that and there's
some random little API for exception

402
00:29:54,960 --> 00:29:59,720
handling and for sharing a few things
but note for example there's no registry

403
00:29:59,720 --> 00:30:04,580
pianist list there's no files on this
list you can't do anything else thinks

404
00:30:04,580 --> 00:30:07,760
you can register here from a trust that
you can do file i/o from a trust that

405
00:30:07,760 --> 00:30:11,370
you can do any of the things that are
not exposed through a system called

406
00:30:11,370 --> 00:30:15,489
that's accessible at the 2012 if you
want to do any of those things you need

407
00:30:15,490 --> 00:30:19,640
an agent needs something in normal mode
that's gonna do those things for you and

408
00:30:19,640 --> 00:30:25,799
for example and the else and the alsace
case there's LSD ISO which is the isley

409
00:30:25,799 --> 00:30:29,990
trust let and video one and they're
still alsace which is a standard process

410
00:30:29,990 --> 00:30:34,840
in detail 0 and how they communicate
through our PC that's why the thread

411
00:30:34,840 --> 00:30:39,870
pool and ABC's implemented a loud so you
can communicate Crosby chels by using

412
00:30:39,870 --> 00:30:45,729
RPC so they lack of functionality my
kind of see there and that's because

413
00:30:45,730 --> 00:30:50,000
trusts are really designed for the needs
credentials are devised a guard and

414
00:30:50,000 --> 00:30:54,640
brutal 2 p.m. now whenever you do a
system called might have risk because

415
00:30:54,640 --> 00:30:58,480
yes I'm gonna be chill one calling
normal whatever normal is being

416
00:30:58,480 --> 00:31:01,549
compromised and wants to lie to you
about the data I want to scrap the

417
00:31:01,549 --> 00:31:02,889
structures you get back

418
00:31:02,889 --> 00:31:06,178
give you a fake handle give you a big
buffer so every time

419
00:31:06,179 --> 00:31:10,499
I'm you can you call into normal mode
again a sanitized

420
00:31:10,499 --> 00:31:14,529
that you get back when you call into it
though you have another problem which is

421
00:31:14,529 --> 00:31:19,820
that all your pages now Rd 201 pages
they can be read the details you up for

422
00:31:19,820 --> 00:31:23,600
some shared buffers that are used so I
can actually allocates memory that

423
00:31:23,600 --> 00:31:28,350
details you're going to see Marshall
structures and those before safely get

424
00:31:28,350 --> 00:31:31,389
rid of any pointers to pointers to
pointers and some generic marshalling

425
00:31:31,389 --> 00:31:35,549
lets you do that then the normal mode
season Marshall buffers does the action

426
00:31:35,549 --> 00:31:39,869
returns from data back to the data
sanitized and then copy back into a

427
00:31:39,869 --> 00:31:44,639
buffer that can be accessed by children
can access it anyway so there's some

428
00:31:44,639 --> 00:31:48,590
marshalling and some sensitization to
that has to happen and so there's a

429
00:31:48,590 --> 00:31:52,139
diagram I stole from exile from
presentation is it is a copyright

430
00:31:52,139 --> 00:31:56,199
automake nice diagrams like this but it
shows you the whole process we have a

431
00:31:56,200 --> 00:32:00,200
secure colonel trying to do a system
call going through martial ur going

432
00:32:00,200 --> 00:32:04,749
through VTL 0 which goes on a normal
kernel which then runs a normal kernel

433
00:32:04,749 --> 00:32:09,529
function so all this is not running in
isolating and normal mode and details

434
00:32:09,529 --> 00:32:15,830
and then it all goes back on now on
Marshall everything sanitizer hardened

435
00:32:15,830 --> 00:32:19,820
it and return the data back so this girl
doesn't have a lot of functionality

436
00:32:19,820 --> 00:32:26,649
almost acting like a proxy just sending
things through your site so how does the

437
00:32:26,649 --> 00:32:32,149
trust would use all the functionality
well how do you first launch something

438
00:32:32,149 --> 00:32:35,850
else that Russell and Windows Vista
later they added something called

439
00:32:35,850 --> 00:32:39,240
process attributes when you start the
process you can you find some attributes

440
00:32:39,240 --> 00:32:43,049
that are associated with it so one of
the attributes you can now set is I want

441
00:32:43,049 --> 00:32:47,668
this thing to launch asset trust and
fortunate that actually does not exposed

442
00:32:47,669 --> 00:32:52,149
a standard document when his API it's
only expose it and need a baby I need to

443
00:32:52,149 --> 00:32:57,039
build an undocumented application access
launcher to pass that undocumented

444
00:32:57,039 --> 00:33:01,899
feature through the undocking and dpi
and the attribute to specify the trust I

445
00:33:01,899 --> 00:33:07,799
D S cam recognizes that only something
should be trust let's pass and I D what

446
00:33:07,799 --> 00:33:12,399
trust that are you trying to execute
when the trust execute its where they're

447
00:33:12,399 --> 00:33:17,268
going to check is this binary actually
allowed to launch asset trust because

448
00:33:17,269 --> 00:33:19,530
you don't want to random stuff launches
trust

449
00:33:19,530 --> 00:33:23,210
as there are some strong signing
guarantees here they're going to make

450
00:33:23,210 --> 00:33:27,010
sure that this has what's called a
signature level of 12 you can read my

451
00:33:27,010 --> 00:33:30,920
blog know more about signature levels
but their basic cryptographic levels

452
00:33:30,920 --> 00:33:36,730
associated with ek use enhance keys ages
that a certain happy and so an image

453
00:33:36,730 --> 00:33:40,090
that's allowed to run as a trusted has
to have a special certificate with some

454
00:33:40,090 --> 00:33:44,949
special keys ages and they're one of the
best says this is a Windows binary and

455
00:33:44,950 --> 00:33:48,640
one of them out says this is an IU em
winery has to come from the wind esteem

456
00:33:48,640 --> 00:33:52,860
and Microsoft and has to be something
special starts saying this is allowed to

457
00:33:52,860 --> 00:33:58,719
launch in asset ruslan now even if you
believe Mike mode or in testing mode and

458
00:33:58,720 --> 00:34:03,330
you make your own fix search and you add
those you can use in custom motor and

459
00:34:03,330 --> 00:34:05,090
debug mode they won't be recognized

460
00:34:05,090 --> 00:34:09,299
so it has to be from Microsoft
certificate not attested to good and has

461
00:34:09,300 --> 00:34:12,810
to have those you can use this
practically no way other than corrupting

462
00:34:12,810 --> 00:34:17,139
the system and some way which requires
an export requires bypassing secure boot

463
00:34:17,139 --> 00:34:21,560
to actually change function I saw only
things that are signed a Stressless can

464
00:34:21,560 --> 00:34:26,210
run a stress let's say here's an example
of what that would look like here the

465
00:34:26,210 --> 00:34:29,980
digital certificate properties of a
trust let and here it says i deleted

466
00:34:29,980 --> 00:34:33,810
user mode and window system component
verification and you need these two

467
00:34:33,810 --> 00:34:37,750
things there if you want to protect the
process is another UK you there but

468
00:34:37,750 --> 00:34:42,969
without the studio keys in a search from
Microsoft united to be able to lunch now

469
00:34:42,969 --> 00:34:47,649
when a trusted launches has that what's
called the trust that policy associated

470
00:34:47,649 --> 00:34:52,149
with it you have to have a special
exported viable that special export a

471
00:34:52,149 --> 00:34:56,159
viable has to have a special name in a
special sections a special set of flags

472
00:34:56,159 --> 00:35:00,770
obviously has to be signed as part of
the binary and that policy has the trust

473
00:35:00,770 --> 00:35:06,550
that I D you can launch trust that idea
for a social binary acts of binary

474
00:35:06,550 --> 00:35:11,810
exercise saying I'm trust that I D 80 to
buy any kind of signs its own identity

475
00:35:11,810 --> 00:35:15,980
and the long-term the by attorney says
I'm watching this binder with this

476
00:35:15,980 --> 00:35:17,780
identity and they have to match

477
00:35:17,780 --> 00:35:22,930
arbitrarily transferred to run a trust a
different identity to all this is

478
00:35:22,930 --> 00:35:27,620
checked by security kernel to make sure
this is a legitimate valid trust let the

479
00:35:27,620 --> 00:35:31,950
policy also says what can the trust
would do or what it what will allow

480
00:35:31,950 --> 00:35:32,919
itself to do

481
00:35:32,920 --> 00:35:38,230
bTW tracing the tragic and say I don't
want my tracing messages to be seen

482
00:35:38,230 --> 00:35:44,200
dumps the tragic and say when I crash
and don't want to crash down or when I

483
00:35:44,200 --> 00:35:48,500
crash I want to crash dump but encrypted
with this public key certainly Microsoft

484
00:35:48,500 --> 00:35:52,120
which has a private in the crib the
crash down so certain policy yet there

485
00:35:52,120 --> 00:35:56,150
was a tragic and say another one is
allow myself to be debugger not so

486
00:35:56,150 --> 00:36:00,380
tragic and say I do want to be available
to normal mode or no I don't want normal

487
00:36:00,380 --> 00:36:03,960
mode to debug and depending on what to
trust it is doing some of these options

488
00:36:03,960 --> 00:36:04,780
can be set

489
00:36:04,780 --> 00:36:08,370
else asked for example the eyes it
alsace won't allow itself to be bought

490
00:36:08,370 --> 00:36:12,660
it will allow itself to crash crashed on
the crash and will be encrypted with a

491
00:36:12,660 --> 00:36:18,440
public key that is specified I trust you
can also for instance that something

492
00:36:18,440 --> 00:36:23,600
you'd buy hyper-v because with virtual
TPM you can I have hyper-v virtual

493
00:36:23,600 --> 00:36:28,470
machines that essentially are protected
from the host and that's using trusts as

494
00:36:28,470 --> 00:36:32,279
well and the instance of bisbee tells
you what VMI's the stress associated

495
00:36:32,280 --> 00:36:36,250
with so what r us that exists today

496
00:36:36,250 --> 00:36:40,520
well trust 0 scan of the secure colonel
process itself which host device cart

497
00:36:40,520 --> 00:36:42,960
and when you have these features turned
on

498
00:36:42,960 --> 00:36:45,990
you'll see if you look at task manager
there's going to be an entry they're

499
00:36:45,990 --> 00:36:53,890
called switch this around secure system
so that is an indication that a scam as

500
00:36:53,890 --> 00:36:58,540
their house have credential guard turned
on so I'm going to have an LSA ISO

501
00:36:58,540 --> 00:37:04,190
process this is trust that I D number
one and trusted IP number two in three

502
00:37:04,190 --> 00:37:10,510
RFU's guarded fabric for VD p.m. so
trusted Tues VMs speech which lets you

503
00:37:10,510 --> 00:37:14,570
read what's in a TPM and trust III is
the provisioning tool which you would

504
00:37:14,570 --> 00:37:19,500
use to put secrets steal things I never
told TPM photos of a kind of the floor

505
00:37:19,500 --> 00:37:25,170
trusses that exists today lol saic
provides a credential our future you may

506
00:37:25,170 --> 00:37:27,720
have heard about yesterday it only does
two things

507
00:37:27,720 --> 00:37:32,459
decrypt encrypted data that's all it
needs the cryptographic API the other

508
00:37:32,460 --> 00:37:37,090
trust let the MSP is rehearsal TPM and
hurtful TPM you need a bit more

509
00:37:37,090 --> 00:37:42,130
complexity because I need to use the
mailboxes to be easily identify yourself

510
00:37:42,130 --> 00:37:46,200
and pass across normal mode as secure
mode using our PC or buy

511
00:37:46,200 --> 00:37:51,160
adding another layer of security on top
of our PC and BTW p.m. dats all the

512
00:37:51,160 --> 00:37:55,149
secrets and 2 p.m. or used with that
secure storage facility so those EPS

513
00:37:55,150 --> 00:38:00,010
specifically designed for the TPM only
the other APS to encrypt and decrypt

514
00:38:00,010 --> 00:38:05,619
data those are used by the National
Guard feature now in a trust loads it

515
00:38:05,619 --> 00:38:08,550
gets loaded like any other application
and use them out there's a same and

516
00:38:08,550 --> 00:38:12,980
video that you have on the other normal
side the difference this video is gonna

517
00:38:12,980 --> 00:38:18,070
check a few things to basically prevent
normal mode for messing with it to

518
00:38:18,070 --> 00:38:21,849
profit from the ship engine which allows
you to put a petition compatibility

519
00:38:21,849 --> 00:38:26,369
flags will we don't elysee I should have
a shame that says you know and go do

520
00:38:26,369 --> 00:38:31,690
this we want to talk to you now have to
be non influenced not influenced by

521
00:38:31,690 --> 00:38:36,000
normal mode so something or disabling
image 5 solution options are ignored

522
00:38:36,000 --> 00:38:40,190
deal every direction is ignored there's
no communication to CSR says there's no

523
00:38:40,190 --> 00:38:44,030
shame engine to make sure I trust led
does what it's supposed to do and can be

524
00:38:44,030 --> 00:38:48,900
affected by the admin some way because
you don't talk to CSR says there's no

525
00:38:48,900 --> 00:38:52,849
structures that are missing as well so
we need a little busy faked out with CSR

526
00:38:52,849 --> 00:38:57,750
says we'll only do you can talk the CSRs
though the key detail here is you can't

527
00:38:57,750 --> 00:39:01,460
have you I and you can't even have a
console so you don't have access to the

528
00:39:01,460 --> 00:39:05,450
command prompt interfaces there's no
standard in our standard out you can't

529
00:39:05,450 --> 00:39:09,868
link a trust us a cost or obligation is
going to try talking to a console driver

530
00:39:09,869 --> 00:39:13,010
of the console subsystem and that's not
there so they have to delete this

531
00:39:13,010 --> 00:39:19,109
Windows images not as counsel and if so
how to trust talk while they can trace

532
00:39:19,109 --> 00:39:25,720
three WH I mentioned there's a debug
print API and there's local RPC API is

533
00:39:25,720 --> 00:39:29,750
actually not enabled in retail bildt's
and BTW tracing can be able to trust

534
00:39:29,750 --> 00:39:33,440
that can say I don't want to trace
myself so one thing I trust can always

535
00:39:33,440 --> 00:39:36,900
do it's always permitted is our PC and
so this

536
00:39:36,900 --> 00:39:43,180
bilities here if they're gonna be in our
PC or LBC or based interface allows it

537
00:39:43,180 --> 00:39:47,879
is a talk to each other see if your
trust lid is accidentally badly parsing

538
00:39:47,880 --> 00:39:51,970
an RPC message the traffic and crashed a
trusted me run code that is not supposed

539
00:39:51,970 --> 00:39:55,950
to again though you have to work on the
signing issues and all the other kind of

540
00:39:55,950 --> 00:39:58,580
hardening features that the
virtualization brings on top

541
00:39:58,580 --> 00:40:02,049
that but this RPC Lingus probably you
know where people are going to be

542
00:40:02,050 --> 00:40:07,870
looking at now there also is on top of
any are BCE kind of service that trust

543
00:40:07,870 --> 00:40:12,920
like introduced there's a special RBC
service there on normal mode called aum

544
00:40:12,920 --> 00:40:18,980
trust led dump server and when I trusted
crashes if crashing his crash dumps are

545
00:40:18,980 --> 00:40:23,390
allowed this function is secure current
to talk to a trusted I'm server and to

546
00:40:23,390 --> 00:40:27,750
write a dump out to disk so this is the
one he shall truck trusts always have

547
00:40:27,750 --> 00:40:31,480
the initial crash dumps they can just
shove encrypted data to server and a

548
00:40:31,480 --> 00:40:36,610
service gonna write it to disk write to
disk with this interface that's

549
00:40:36,610 --> 00:40:40,580
something that's not a damn if you
somehow got into a trust let but it will

550
00:40:40,580 --> 00:40:45,930
be limited pathname and limited location
with limited extension so the question

551
00:40:45,930 --> 00:40:52,509
is this really cool technology but it
also allows me to basically hi my data

552
00:40:52,510 --> 00:40:57,300
if I malicious can I have a malware let
well there's a number of things that

553
00:40:57,300 --> 00:41:01,840
prevent you from doing this the first
one is you have a travel right policy

554
00:41:01,840 --> 00:41:05,460
with the right Russell lady with a right
naming rights section has to be signed

555
00:41:05,460 --> 00:41:09,460
correctly and those signature checks are
not things you can bypass without some

556
00:41:09,460 --> 00:41:13,390
sort of ring minus one exploit yes be
compiled and linked correctly you have

557
00:41:13,390 --> 00:41:17,420
to be careful with Delos use not all
deals are signer that's a good not all

558
00:41:17,420 --> 00:41:21,920
the US can be used inside the isolated
environment and ultimately even if you

559
00:41:21,920 --> 00:41:25,760
wrote your own delicious trust let your
trusted doesn't have access to stuff a

560
00:41:25,760 --> 00:41:29,380
normal amount everything it has access
to has to be one of those system calls

561
00:41:29,380 --> 00:41:33,320
and a trust that is protected from other
trust let's say melissa is trust that

562
00:41:33,320 --> 00:41:37,170
can suddenly attacked the National Guard
trust so you still have to kind of break

563
00:41:37,170 --> 00:41:42,070
out from IU em and we're pretty
complicated tax to do she got there and

564
00:41:42,070 --> 00:41:46,340
you have to read for us in the first
place anyway but there are ways to do

565
00:41:46,340 --> 00:41:50,290
that if there's exports of all abilities
as I'm gonna do a demo of an actual

566
00:41:50,290 --> 00:41:53,960
trust let sure how that looks like and
this is my own trust lands so it's not

567
00:41:53,960 --> 00:41:59,160
one that comes from Microsoft now it is
a very simple trust let it essentially

568
00:41:59,160 --> 00:42:04,680
only does two things that initializes
bTW tracing it principle 0 secure World

569
00:42:04,680 --> 00:42:09,049
Trade Center events called Emily active
to show you that it actually ran

570
00:42:09,050 --> 00:42:13,880
and then it basically set up our PC and
creates an RPC endpoint called them

571
00:42:13,880 --> 00:42:19,970
elect port so I've signed as correctly
and everything and I'm going try running

572
00:42:19,970 --> 00:42:21,669
it

573
00:42:21,670 --> 00:42:29,410
shirts on a radioactive from earlier
know about my other society so that my

574
00:42:29,410 --> 00:42:33,830
launcher and I've called us trust the 85
it's got a policy that claims it's Heidi

575
00:42:33,830 --> 00:42:39,180
5 I'm launching it is I D five so it
says it launched successfully let's see

576
00:42:39,180 --> 00:42:46,770
if it's actually in the process listed
7200 so there's a trust thing how do you

577
00:42:46,770 --> 00:42:51,220
know this is actually a trust that I'm
not lying to you so let's double click

578
00:42:51,220 --> 00:42:56,899
on it and you can see that it has
created the tamil import there is an

579
00:42:56,900 --> 00:43:07,170
even called them all the active so if I
go inside and sessions one basic objects

580
00:43:07,170 --> 00:43:11,720
there should be an even here the more
active so the translator was able to

581
00:43:11,720 --> 00:43:18,839
create this event and if I go inside of
RBC control there is the democrat ports

582
00:43:18,840 --> 00:43:23,430
I have an RPC endpoint I can talk to my
trust late now but is it actually

583
00:43:23,430 --> 00:43:29,620
protected so let's look at the memory
well I can see all of its memory when I

584
00:43:29,620 --> 00:43:33,859
can see the memory allocations I can see
the VATS because the car loans and I

585
00:43:33,860 --> 00:43:38,050
imagine so I can see what allocations
exist but if I try to look at any of

586
00:43:38,050 --> 00:43:48,220
these rights reserved committed region
invalid access to memory location even

587
00:43:48,220 --> 00:43:53,240
if I is the kernel debugger which
normally should have all the powers bank

588
00:43:53,240 --> 00:44:01,799
process 00 trust let XE and attached to
it from the current all which is 30 so

589
00:44:01,800 --> 00:44:06,550
she'll do anything I want to it let
saddam the VAD will see the memory

590
00:44:06,550 --> 00:44:12,390
allocations so they're they're these are
all this is all trust their memory but I

591
00:44:12,390 --> 00:44:17,808
take one of these allocations try to
look at it

592
00:44:17,809 --> 00:44:22,410
that one worked

593
00:44:22,410 --> 00:44:26,819
some of these can be shares what are
probably picked is the show with a

594
00:44:26,819 --> 00:44:35,579
federal bank bed now is that you can see
the environment variables there and

595
00:44:35,579 --> 00:44:39,460
that's because part of the PEP is
readable and the variables are able

596
00:44:39,460 --> 00:44:43,299
otherwise things would just break if you
don't like that so I probably picked the

597
00:44:43,299 --> 00:44:47,930
memory that contains an unlucky let me
pick a different address let's say I'll

598
00:44:47,930 --> 00:45:00,308
take this one question marks the code
itself the trust led by taxi see that

599
00:45:00,309 --> 00:45:07,450
one is mapped to Ed 123 the code is
there and that's not something that's

600
00:45:07,450 --> 00:45:11,368
really hit it so i'm just still be
shared things can still be readable all

601
00:45:11,369 --> 00:45:14,359
the things are not going to show that
the heap in the stack so it's not that

602
00:45:14,359 --> 00:45:17,880
everything is isolated some things can
be shown andrea but that code is not

603
00:45:17,880 --> 00:45:22,270
modifiable for example so I try to
modify the Trust's code from the

604
00:45:22,270 --> 00:45:26,509
high-level OS I won't actually be able
to do that so you know pick out one last

605
00:45:26,510 --> 00:45:30,700
another thing is let's don't want to
dump the modules so normally when I do a

606
00:45:30,700 --> 00:45:36,049
bank peb I should see the loaded the
else but notice here that it says not

607
00:45:36,049 --> 00:45:41,460
this isn't really know and the beach
fill one side but in this kind of faked

608
00:45:41,460 --> 00:45:45,119
evidence and the real bed on the other
side that loaded the laws are here but

609
00:45:45,119 --> 00:45:49,450
it actually see that so i cant kind of
investigating this environment and if I

610
00:45:49,450 --> 00:45:53,270
try to debug this or make it dumped out
of it is just not going to work so this

611
00:45:53,270 --> 00:45:57,220
process are basically I lived in
protected from New Trier read it secret

612
00:45:57,220 --> 00:46:01,910
for its heap or modify its cold outside
I want to be clear this is not something

613
00:46:01,910 --> 00:46:02,740
supported

614
00:46:02,740 --> 00:46:07,430
to do a lot of contacts in a system to
allow Microsoft to launch just to kind

615
00:46:07,430 --> 00:46:11,430
of show what what prevents I can kill it
is not protected make it protected so I

616
00:46:11,430 --> 00:46:16,520
guess I'll kill the trust and now the
signature or are gone now so it's not a

617
00:46:16,520 --> 00:46:19,980
little bit of a kind of what all this
means and what are some things that I

618
00:46:19,980 --> 00:46:25,990
found out so well is I am secure VSM
secure far as I can see yes there are

619
00:46:25,990 --> 00:46:30,399
not any design flaws I was able to find
there's no haha didn't think of that

620
00:46:30,400 --> 00:46:34,190
they really did an extremely good job at
thinking all these

621
00:46:34,190 --> 00:46:38,740
attack now could there be RPC parsing
vulnerabilities are marshalling bugs

622
00:46:38,740 --> 00:46:42,790
sure it's a very small amount of CO two
chances are they are really good look at

623
00:46:42,790 --> 00:46:46,930
the attack surface is tiny the
hypervisors re very small piece of code

624
00:46:46,930 --> 00:46:51,390
adding details as complexity but it
still manageable

625
00:46:51,390 --> 00:46:57,279
colonel itself is only 32 kilobytes and
yes SKC I does do is on parsing of

626
00:46:57,280 --> 00:47:01,330
signatures but that could have been a
Microsoft for more than a decade it's

627
00:47:01,330 --> 00:47:04,799
been very well tested inside a full lace
and one part so it's very limited and

628
00:47:04,800 --> 00:47:09,490
one which actually is a static state
machine so this is all probably almost

629
00:47:09,490 --> 00:47:14,160
correct code that should have very very
little tax service on the flip side

630
00:47:14,160 --> 00:47:17,319
though this does rely on property
features to work and to be well

631
00:47:17,320 --> 00:47:23,290
implemented now it's important to point
out a few times as well as a colonel is

632
00:47:23,290 --> 00:47:27,120
very simple it doesn't do scheduling it
doesn't america management all the

633
00:47:27,120 --> 00:47:30,549
resource management is still down by a
normal car there's no harder drivers

634
00:47:30,550 --> 00:47:34,670
there's no devices and system calls or
proxy through normal mode just know

635
00:47:34,670 --> 00:47:39,670
implementation for system calls and a
scam itself so it's cam doesn't trust

636
00:47:39,670 --> 00:47:43,870
and toss it does depend on it though so
could you the side note I'm not gonna

637
00:47:43,870 --> 00:47:47,410
give you that visible page sure and you
could have came this way you could

638
00:47:47,410 --> 00:47:51,730
denial of service attacks but it doesn't
give you access to the secrets and the

639
00:47:51,730 --> 00:47:55,770
information at this site the secure
World you also can't snap out cause you

640
00:47:55,770 --> 00:47:58,840
know something or someone asking will
the device guard what if I just don't

641
00:47:58,840 --> 00:48:03,380
ask secure mode to is the sign or not
what if I just like nightline task as a

642
00:48:03,380 --> 00:48:07,950
society you could light I thought and
say yes the society but then DVDs are

643
00:48:07,950 --> 00:48:12,160
the executive know so and also gonna
think this is actual memory but no one

644
00:48:12,160 --> 00:48:15,410
made them executable is you knocked out
the call that's going to make an

645
00:48:15,410 --> 00:48:19,460
executable if you don't know about the
call then we also verify the signatures

646
00:48:19,460 --> 00:48:23,870
so there's no way to get you can bypass
communicating a scam but then you don't

647
00:48:23,870 --> 00:48:28,859
get any of the features or it needs that
the house so how would you compromise

648
00:48:28,860 --> 00:48:32,720
this well again the reliance one of the
weakest is the reliance on secure boot

649
00:48:32,720 --> 00:48:38,810
and also the fact that not everyone has
an IMU and so a black eye and other lots

650
00:48:38,810 --> 00:48:44,740
of talks about vendor bugs design box
flashbulbs option Iran bugs and other

651
00:48:44,740 --> 00:48:46,649
vulnerabilities and firmware

652
00:48:46,650 --> 00:48:50,730
this is kind of the weak spot today and
my son is doing a lot of you know vendor

653
00:48:50,730 --> 00:48:56,110
and punching to make sure people get
their bugs fixed Windows Update can also

654
00:48:56,110 --> 00:48:59,900
now the liver BIOS updates as well but
this is the week and the other one is

655
00:48:59,900 --> 00:49:04,530
GMA attacks not everyone has an IM you
on everyone turns it on and so with

656
00:49:04,530 --> 00:49:09,710
those attacks venues the SMK me
compromise now kind of scary as a

657
00:49:09,710 --> 00:49:14,770
compromise VSM can then be used against
the user itself you now can you give you

658
00:49:14,770 --> 00:49:19,730
some facilities to hide malicious data
but this is kind of a very limited risk

659
00:49:19,730 --> 00:49:22,740
because memories still have access to
the file system you don't have access to

660
00:49:22,740 --> 00:49:26,870
drivers on the registry so she really
wanted to run a malware let you have to

661
00:49:26,870 --> 00:49:30,540
have an agent at some our agent too and
that's something wrong and all know that

662
00:49:30,540 --> 00:49:34,450
I can detect so yes you could use this
you can use a compromise yes I'm to hide

663
00:49:34,450 --> 00:49:39,439
data but you could have built a
hypervisor anyway if it's not there so

664
00:49:39,440 --> 00:49:43,950
it's obvious I'm mobility it's just
something I BSM might make it easier for

665
00:49:43,950 --> 00:49:48,029
gets compromised budget compromise its
game over anyway so you know these are

666
00:49:48,030 --> 00:49:54,080
kind of very French types of attacks so
the real issues you don't execute you

667
00:49:54,080 --> 00:49:58,400
don't have secure food then you can
bypass all reasonable my laptop has a

668
00:49:58,400 --> 00:50:03,440
special version of SKC I want me to one
bite patch without one by patch I'm able

669
00:50:03,440 --> 00:50:09,390
to load any trust a lot and so there's a
DMA attack attack you pass the one line

670
00:50:09,390 --> 00:50:14,060
or that one bite then I can run your own
crustless again that doesn't mean it's

671
00:50:14,060 --> 00:50:16,090
game over because trust is still need a
way to do

672
00:50:16,090 --> 00:50:19,250
malicious thinks it's really important
to make sure that all these features are

673
00:50:19,250 --> 00:50:23,440
turned on a given that there are few
things Microsoft could probably to make

674
00:50:23,440 --> 00:50:29,490
it harder to do what i dint example if a
sec I valid itself if the hypervisor had

675
00:50:29,490 --> 00:50:33,040
some code to make sure that I didn't you
know patches something like pass card

676
00:50:33,040 --> 00:50:37,930
basically but in the hypervisor that
could allow you to detect some things

677
00:50:37,930 --> 00:50:40,810
that are going on all these are the
defense in depth though right because of

678
00:50:40,810 --> 00:50:44,940
secure but is not working right you
can't really protect the system in in a

679
00:50:44,940 --> 00:50:48,390
secure unit to secure way but there
could be a little things that they do to

680
00:50:48,390 --> 00:50:51,490
make it harder to make the attack less
than just less lethal bite

681
00:50:51,490 --> 00:50:56,169
July can curl Motorsports guard will
provide live action crash the system so

682
00:50:56,170 --> 00:50:59,620
these are lightweight or combinations
they're not really major thing

683
00:50:59,620 --> 00:51:03,529
secure system it is designed to be
secure but your platform has to be

684
00:51:03,530 --> 00:51:11,500
secure as well so that time for
questions like I mentioned I will be

685
00:51:11,500 --> 00:51:15,250
available at the coffee break and also
want to thank a few people from exiled

686
00:51:15,250 --> 00:51:19,590
that helped a lot of this presentation
shows accurate so kudos to all those

687
00:51:19,590 --> 00:51:21,000
people so thank you

