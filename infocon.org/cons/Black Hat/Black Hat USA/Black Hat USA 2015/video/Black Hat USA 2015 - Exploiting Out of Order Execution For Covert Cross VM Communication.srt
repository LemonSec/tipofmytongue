1
00:00:00,000 --> 00:00:05,620
higher so I'm so feared Anton and this
past year at RPI my master's research

2
00:00:05,620 --> 00:00:08,109
focused on using it

3
00:00:08,109 --> 00:00:12,750
process optimization as a side channel
attacks so that's what we're talking

4
00:00:12,750 --> 00:00:19,800
about so weekends in the cloud and
everyone here probably knows what the

5
00:00:19,800 --> 00:00:24,130
cloud is and how it works but you can
kind of see this diagram the basic

6
00:00:24,130 --> 00:00:28,890
concepts you have virtual instances all
resting on top of shared hardware

7
00:00:28,890 --> 00:00:34,969
hardware is allocated to the virtual
instance says by the hypervisor so the

8
00:00:34,969 --> 00:00:39,340
resources resources are allocated by the
hypervisor goes up to be given to the

9
00:00:39,340 --> 00:00:44,809
operating systems and this is the
dynamic allocation which causes everyone

10
00:00:44,809 --> 00:00:51,030
to save money which is why the cause
create and everyone's happy so there are

11
00:00:51,030 --> 00:00:54,420
some problems with this setup though and
a lot of your probably familiar with

12
00:00:54,420 --> 00:01:00,250
basic ones your sensitive data stored
remotely so you don't have control over

13
00:01:00,250 --> 00:01:06,860
the physical box of trusting us also the
host the year you know sharing her data

14
00:01:06,860 --> 00:01:12,049
with my people my book so you're in
trouble and these are all issues but the

15
00:01:12,049 --> 00:01:16,460
one focusing on is the fact that you are
co-located on the same machine with

16
00:01:16,460 --> 00:01:21,179
virtual machines which you don't control
and you really have no idea what they're

17
00:01:21,180 --> 00:01:27,520
doing kind of the depiction of the right
obviously the black p.m. was delicious

18
00:01:27,520 --> 00:01:34,329
situation but they're sharing the
hardware as you can see I'm so if this

19
00:01:34,329 --> 00:01:42,169
physical colocation which I'm using to
criticize channel are going to have the

20
00:01:42,170 --> 00:01:44,630
car hardware and you can see it

21
00:01:44,630 --> 00:01:49,780
the hypervisor is giving the physical
resources on the bottom up to the

22
00:01:49,780 --> 00:01:53,320
operating systems but an operating
system actually just seems that its

23
00:01:53,320 --> 00:01:58,779
allocated about that one moment in time
so these virtual allocations might

24
00:01:58,780 --> 00:02:01,020
actually be different

25
00:02:01,020 --> 00:02:07,030
period of time and the operating system
can see those changes so it's this

26
00:02:07,030 --> 00:02:11,560
translation between the physical to
virtual based on need which is what

27
00:02:11,560 --> 00:02:12,360
we're talking

28
00:02:12,360 --> 00:02:17,830
here and its application which causes
contention between machines so if

29
00:02:17,830 --> 00:02:22,380
there's only a finite amount of physical
resource

30
00:02:22,380 --> 00:02:27,140
operating systems can only receive a
finite amount of virtual location of

31
00:02:27,140 --> 00:02:33,700
these physical resources so this also
means that your programs activities are

32
00:02:33,700 --> 00:02:39,859
no pic other p.m. so if your demands

33
00:02:39,860 --> 00:02:46,040
physical resources available in a very
poorly set up a system where the

34
00:02:46,040 --> 00:02:50,660
hypervisor or just give it to other
mediums would see that they don't have

35
00:02:50,660 --> 00:02:58,600
anything left to use right so this is no
review of my talk today and right now

36
00:02:58,600 --> 00:03:05,100
I'm just gonna go into account basic
generic ways you can use this contention

37
00:03:05,100 --> 00:03:11,400
to criticize channels so one of her
tight channel tax in reference to

38
00:03:11,400 --> 00:03:17,040
cryptography and in cryptography the
first thing or any information you can

39
00:03:17,040 --> 00:03:21,720
gain from the system by recording the
environment in which the cryptosystem is

40
00:03:21,720 --> 00:03:28,070
implemented so in the cloud it's kind of
similar because it's a herbicide channel

41
00:03:28,070 --> 00:03:32,430
to treat the vietnam like a black box
almost rights you can't really see into

42
00:03:32,430 --> 00:03:35,190
someone else's see what they're doing

43
00:03:35,190 --> 00:03:41,190
side but you can see how they interact
with the surrounding environment but

44
00:03:41,190 --> 00:03:48,579
you're both sharing so it's so obviously
you have to have your p.m. has to be

45
00:03:48,580 --> 00:03:53,190
sharing the same resources in order to
record the environmental changes which

46
00:03:53,190 --> 00:03:58,940
that black box you're targeting is
called and his changes that you're

47
00:03:58,940 --> 00:04:07,630
recording have to be reliable and also
horrible right so you have to be able to

48
00:04:07,630 --> 00:04:12,030
reliably recording studio time and know
that you're gonna get certain averages

49
00:04:12,030 --> 00:04:18,149
are certain patterns in the system so it
does require a good data and statistical

50
00:04:18,149 --> 00:04:24,909
analysis on generic model of how this
side channel attacks

51
00:04:24,910 --> 00:04:29,200
or her side still intact look in the
cloud your having that shirt hardware

52
00:04:29,200 --> 00:04:34,539
being used as that medium which you're
recording things from the transmitter or

53
00:04:34,540 --> 00:04:40,330
the victim in most cases is just causing
artifacts and system to be to be there

54
00:04:40,330 --> 00:04:44,150
right so its operating normally and
doing whatever things that need to do

55
00:04:44,150 --> 00:04:49,250
and that's leaving changes in that
shared hardware and those changes are

56
00:04:49,250 --> 00:04:55,970
reported to the receiver that you see to
the right would just be a generic model

57
00:04:55,970 --> 00:05:00,750
host work in this can be kind of applied
to any hardware unit that you're

58
00:05:00,750 --> 00:05:08,210
attacking me that the cash or the
pipeline for the system buses and so

59
00:05:08,210 --> 00:05:12,090
using this system we can break it up
into three different categories of

60
00:05:12,090 --> 00:05:16,940
possible exploitation of news right so
if we're just receiving information from

61
00:05:16,940 --> 00:05:22,440
the system just recording we can do such
things as crypto key theft which is a

62
00:05:22,440 --> 00:05:27,969
very common one in academic literature
used to prove that a site works but in

63
00:05:27,970 --> 00:05:32,290
this situation the transmitter is the
victim doesn't know that is translating

64
00:05:32,290 --> 00:05:37,620
into the system so the only at the story
here is the receiver so someone who just

65
00:05:37,620 --> 00:05:44,850
reading information from the system you
can do things like environmental Kings

66
00:05:44,850 --> 00:05:49,750
also very strong however it's not
actually a research fellow at dinner

67
00:05:49,750 --> 00:05:56,120
right so if you're able to reliably get
specific patterns attached to one

68
00:05:56,120 --> 00:06:00,850
machine one physical device you can do
things like how they roll their only be

69
00:06:00,850 --> 00:06:07,200
deployed on certain hardware or other
things like that helps the side of the

70
00:06:07,200 --> 00:06:13,030
spectrum you have just the transmitters
so someone who doesn't know but it just

71
00:06:13,030 --> 00:06:17,690
transmitting information or artifacts on
to the church hardware and so a common

72
00:06:17,690 --> 00:06:21,030
one that can be applied here it is
something like a denial of service

73
00:06:21,030 --> 00:06:26,619
attack so if you're using all of the
cash or if you're repeatedly using the

74
00:06:26,620 --> 00:06:32,950
processor or higher for large
competitions then you're causing denial

75
00:06:32,950 --> 00:06:36,180
of service or a decrease in performance
to the other

76
00:06:36,180 --> 00:06:44,110
you and that's come just a generic not
very finite one but it does cover a lot

77
00:06:44,110 --> 00:06:48,930
and finally what most people think of
when they think side channel Texas

78
00:06:48,930 --> 00:06:53,110
something like communication network of
both the transmitter and the receiver

79
00:06:53,110 --> 00:06:59,759
know that their co-located and that
they're both transmitting and receiving

80
00:06:59,759 --> 00:07:04,990
cross the same hardware and you can
create a channel so what most people

81
00:07:04,990 --> 00:07:11,699
think of as a communication channel
Channel and that could be used to trade

82
00:07:11,699 --> 00:07:15,940
data for one box into another or
communicate over there was anyone else

83
00:07:15,940 --> 00:07:23,479
and this is how it would look just a
simple diagram you have your medium

84
00:07:23,479 --> 00:07:29,130
being the hardware so that's that's
shared physical resource and the virtual

85
00:07:29,130 --> 00:07:34,900
machines above are just repeatedly using
that to force artifacts into that share

86
00:07:34,900 --> 00:07:39,429
hardware in receiving them and most of
the times has to be done in time friends

87
00:07:39,430 --> 00:07:44,460
or in time intervals because the
allegations from the hardware to change

88
00:07:44,460 --> 00:07:45,510
over time

89
00:07:45,510 --> 00:08:02,539
up to virtual applications and the cloud
is the cash it's actually the most

90
00:08:02,539 --> 00:08:07,830
popular because it is the easiest to
employ mostly because the cash its

91
00:08:07,830 --> 00:08:12,810
memory so it's easier to store value in
memory and recorded later you don't have

92
00:08:12,810 --> 00:08:14,780
to worry about that

93
00:08:14,780 --> 00:08:20,799
replaced or just being removed
immediately what you doing the pipeline

94
00:08:20,800 --> 00:08:25,710
were instructions are continuously
moving so this example question reload

95
00:08:25,710 --> 00:08:30,270
attack targeting the whole tree crushed
here but you've got to do similar things

96
00:08:30,270 --> 00:08:36,439
were different cast you as well the
receiver or the adversary is actually

97
00:08:36,440 --> 00:08:41,329
simply flushing the couch and clearing
it a specific lines so predetermine

98
00:08:41,328 --> 00:08:46,229
lines but declines and in between that
flushing the query

99
00:08:46,230 --> 00:08:50,990
the transmitter or the victim is
unknowingly transmitting artifacts into

100
00:08:50,990 --> 00:08:58,970
the cash is accessing that same shared
line of 03 cash and because of this they

101
00:08:58,970 --> 00:09:04,580
were able to link can you keep private
came up from the system so they prove

102
00:09:04,580 --> 00:09:10,120
that their sideshows effective by june
11 example talked about earlier being

103
00:09:10,120 --> 00:09:19,130
the crypto key theft more about that
attack on my website that euro with this

104
00:09:19,130 --> 00:09:23,790
is just an example of a more common a
memory-based

105
00:09:23,790 --> 00:09:28,990
challenge hack but like I was saying
earlier the pipeline is actually a hard

106
00:09:28,990 --> 00:09:32,430
to attack him the cash or than the
memory units because of the fact that

107
00:09:32,430 --> 00:09:36,630
there is no ability to really create
into the pipeline

108
00:09:36,630 --> 00:09:40,200
like a black box right you can create
the pipeline and say what instructions

109
00:09:40,200 --> 00:09:45,450
are you executed not right because if
you did that you'd alter the pipe and

110
00:09:45,450 --> 00:09:50,870
see you all you really have with brian
is even though it is harder to attack

111
00:09:50,870 --> 00:09:55,880
its a quieter covert channel mostly
because it's harder to detect when

112
00:09:55,880 --> 00:10:00,060
someone's misusing it i'm for the same
reasons that it's hard to use it to

113
00:10:00,060 --> 00:10:05,459
communicate over and it's also not
affected by cache misses and other such

114
00:10:05,460 --> 00:10:13,750
things which affect which affect other
side channels and memory too large

115
00:10:13,750 --> 00:10:21,600
frequency of traffic in the cloud and
the noise and the environment in the

116
00:10:21,600 --> 00:10:22,200
cloud

117
00:10:22,200 --> 00:10:25,690
there's tons of processes going on all
the time actually implies this channel

118
00:10:25,690 --> 00:10:29,990
instead of decreases in decreasing it
which is what happens in cap space I

119
00:10:29,990 --> 00:10:32,430
channels

120
00:10:32,430 --> 00:10:38,270
targeting the pipeline in this order
this is what we wanna do you want to

121
00:10:38,270 --> 00:10:42,410
criticize channel to exploit the
inherent properties of short hardware

122
00:10:42,410 --> 00:10:46,790
with the fact that we know we're on a
closed system so we have to use

123
00:10:46,790 --> 00:10:49,270
properties of both of these things

124
00:10:49,270 --> 00:10:52,449
the hardware and software for sharing

125
00:10:52,450 --> 00:10:56,860
so we know that for sure hardware ok
great but the cloud we have that

126
00:10:56,860 --> 00:11:03,010
dynamically allocated resources are
right we have to but we also have to

127
00:11:03,010 --> 00:11:07,610
know where co-located with our victim or
are colluding be up and that's one

128
00:11:07,610 --> 00:11:11,200
that's a little harder to prove there
has been littered run this I'm not going

129
00:11:11,200 --> 00:11:18,040
to go into that today but we're still
moving forward right so we chose to

130
00:11:18,040 --> 00:11:23,310
target the processor and specifically
the pipeline for this attack and we know

131
00:11:23,310 --> 00:11:26,420
what we have to have some sort of new
way to create artifacts from this

132
00:11:26,420 --> 00:11:30,910
hardware dynamically so we can't just
clear your line in cash right we can't

133
00:11:30,910 --> 00:11:36,829
just say hey what value is here so we
all we know is we can get the pipeline

134
00:11:36,830 --> 00:11:41,850
instruction set or so our processes
instruction set in a certain order and

135
00:11:41,850 --> 00:11:47,390
feed it to the pipeline and we know that
we can get the results you instructions

136
00:11:47,390 --> 00:11:52,150
at the end of the execution so when the
process of finishing executing it

137
00:11:52,150 --> 00:11:58,000
aspect the results and we have a lot of
the only two things we know so the only

138
00:11:58,000 --> 00:12:04,230
thing that we we thought we could do the
easiest way to determine the state of

139
00:12:04,230 --> 00:12:09,600
the pipeline even though it is like the
black box right is we have to know that

140
00:12:09,600 --> 00:12:15,060
the pipeline reorder instructions based
on the results of the returning values

141
00:12:15,060 --> 00:12:23,400
of these instructions it's your turn out
of order execution and this is how we

142
00:12:23,400 --> 00:12:27,449
set up this is what we wanted we want to
some jams appear in the running

143
00:12:27,450 --> 00:12:33,500
processes those processes are sharing
pipelines down here so simultaneous

144
00:12:33,500 --> 00:12:37,810
multithreading is turned on this case
both processes are sharing the pipeline

145
00:12:37,810 --> 00:12:44,180
at the same time and i was just curious
thing that we did note is that europe

146
00:12:44,180 --> 00:12:48,280
your processes private instructions are
being executed in the same pool as

147
00:12:48,280 --> 00:12:53,120
everyone else's in the same pipeline and
the pipeline has no clue where the

148
00:12:53,120 --> 00:12:56,270
answer

149
00:12:56,270 --> 00:13:01,750
so it to receive information or to
receive artifacts from the pipeline we

150
00:13:01,750 --> 00:13:05,300
want to be able to record or to order
executions so you want to be able to

151
00:13:05,300 --> 00:13:09,430
know when the processor reorder our
instructions toughly gave it based on

152
00:13:09,430 --> 00:13:17,310
returning values like any good
presentation until manual and basically

153
00:13:17,310 --> 00:13:22,030
this is just telling us that the out of
order execution case as possible by

154
00:13:22,030 --> 00:13:29,209
giving the simple example and an easier
way to visualize it is this you have to

155
00:13:29,210 --> 00:13:34,780
throw the running and there's storing
food in the stores loads are dependent

156
00:13:34,780 --> 00:13:38,910
on each other inside the throat but in
between threads they are so you're

157
00:13:38,910 --> 00:13:44,250
storing one's memory here and loading it
in the opposite throat until road where

158
00:13:44,250 --> 00:13:50,640
the threads in simultaneous are too and
are one or both can be one in this case

159
00:13:50,640 --> 00:13:56,850
needed a single example which is the one
that's most common one thread goes a bit

160
00:13:56,850 --> 00:14:01,160
faster than the other and you end up
with one variable being one and one

161
00:14:01,160 --> 00:14:06,020
variable 30 but now in the final case
the one that the Intel many was talking

162
00:14:06,020 --> 00:14:10,710
about the underwater case the process to
determine that the loads in the stories

163
00:14:10,710 --> 00:14:15,910
are dependent on each other and puts the
loads are for the stories in this case

164
00:14:15,910 --> 00:14:18,010
are one or two or 0

165
00:14:18,010 --> 00:14:23,069
and that's the case that were recording
and this is just the pseudocode for what

166
00:14:23,070 --> 00:14:27,530
our receiver looks like we just have a
hugely two threads running in that loop

167
00:14:27,530 --> 00:14:33,130
and every time we come across a case in
a specific time frame we know that there

168
00:14:33,130 --> 00:14:39,590
was no water excretion and so we end up
with averages and certain time frames

169
00:14:39,590 --> 00:14:43,980
and those ever does I'll tell us if the
out of order execution frequency was

170
00:14:43,980 --> 00:14:50,450
higher or lower in that time frame and
that represents a bit of information now

171
00:14:50,450 --> 00:14:54,030
this is a really mean anything unless we
could affect the way the out of order

172
00:14:54,030 --> 00:14:59,939
execution averages occur right so we can
expect it and we don't know how this

173
00:14:59,940 --> 00:15:04,580
changes then there's no reason that many
of us but we know we can actually

174
00:15:04,580 --> 00:15:08,279
effects processor reordering
optimization

175
00:15:08,279 --> 00:15:13,350
by using memory fences and everyone here
is probably pretty familiar with the x86

176
00:15:13,350 --> 00:15:17,509
instruction on funds but that's only is
you know it's pretty expensive operation

177
00:15:17,509 --> 00:15:22,810
hundred cycles per operation it does
what you want and it basically tells a

178
00:15:22,810 --> 00:15:28,859
processor or the pipeline to keep the
stories in front of loads and this will

179
00:15:28,860 --> 00:15:36,329
when injected in the same pipeline as
our processes threads will decrease the

180
00:15:36,329 --> 00:15:41,689
recorded average of outdoor executions
for that time frame so the stores will

181
00:15:41,689 --> 00:15:46,160
happen before the loads everything
looked normal and are out of order

182
00:15:46,160 --> 00:15:51,790
account will decrease for that time
frame I'm not going to talk a little bit

183
00:15:51,790 --> 00:15:57,329
about memory models here there's two
types of memory or during compile time

184
00:15:57,329 --> 00:16:04,089
and one time and obviously here we're
talking about runtime optimization in

185
00:16:04,089 --> 00:16:10,889
the pipeline so your child they're being
executed and optimized were also

186
00:16:10,889 --> 00:16:17,180
targeting the x86 systems so that means
it's usually strong this basically means

187
00:16:17,180 --> 00:16:22,959
that for the most part the CPU is right
and its optimization and on the most per

188
00:16:22,959 --> 00:16:28,339
codes good execute fine but in certain
cases there will be reordering and

189
00:16:28,339 --> 00:16:32,910
that's that's great for us we're
targeting no indifference systems when

190
00:16:32,910 --> 00:16:35,149
there is even weaker

191
00:16:35,149 --> 00:16:39,970
even weaker memory models are out of
order execution channel actually

192
00:16:39,970 --> 00:16:45,910
increases in output too so it's
amplified but in systems like this when

193
00:16:45,910 --> 00:16:50,639
there is absolutely no reordering the
low would obviously our channel is

194
00:16:50,639 --> 00:16:58,360
medicated so there's four different
types of memory reordering barriers and

195
00:16:58,360 --> 00:17:01,830
I just thought I'd go for the four
options you have

196
00:17:01,830 --> 00:17:07,420
you can stop loads and loads from being
reorder of those stores and obviously

197
00:17:07,420 --> 00:17:13,330
based what I was saying earlier I'm just
preventing the store load from

198
00:17:13,329 --> 00:17:24,119
optimization from occurring so
maintaining the store is closed so we're

199
00:17:24,119 --> 00:17:29,770
forcing out water and those patterns to
decrease on simultaneous multithreaded

200
00:17:29,770 --> 00:17:35,480
systems by preventing her execution case
by using the store load memory barrier

201
00:17:35,480 --> 00:17:42,050
using construction and this is just
going over what we're doing to transmit

202
00:17:42,050 --> 00:17:48,240
these patterns and these patterns or
what will give us meaning from the

203
00:17:48,240 --> 00:17:52,900
system so these patterns but or
executions in time friends we can then

204
00:17:52,900 --> 00:17:59,490
mapped to different activities and
system but the movie I might be doing on

205
00:17:59,490 --> 00:18:05,750
the opposite side of the spectrum if we
could force other processes execution

206
00:18:05,750 --> 00:18:10,110
path to be changed because were
inserting different instructions which

207
00:18:10,110 --> 00:18:19,919
affect optimization that could be good
to write so how we actually designing

208
00:18:19,920 --> 00:18:25,470
our Joe well in our lab setup we had
some hypervisor because that is the most

209
00:18:25,470 --> 00:18:32,490
popular commercial platform Xeon
processors shared her and for chorus and

210
00:18:32,490 --> 00:18:40,940
Assam tea was turned on like I said the
attack does not work actually turned on

211
00:18:40,940 --> 00:18:48,670
specifically running six windows 7 p.m.
so with just noisy process is going on

212
00:18:48,670 --> 00:18:58,120
to the cloud environment and we are
using as a sender and receiver or just

213
00:18:58,120 --> 00:19:02,750
operating different processes at the
same time and they were sharing the same

214
00:19:02,750 --> 00:19:04,270
here

215
00:19:04,270 --> 00:19:10,060
alright so the demonstration

216
00:19:10,060 --> 00:19:15,409
I think you'll be able to access these
two files if you actually just coming to

217
00:19:15,410 --> 00:19:23,390
be afterwards and i cant you could ask
myself this is Justin Sumner

218
00:19:23,390 --> 00:19:34,110
easiest way to get on his own server but
this is the same setup as well but there

219
00:19:34,110 --> 00:19:40,760
are 6 p.m. and you can see that they're
all pretty much the same their clones of

220
00:19:40,760 --> 00:19:48,040
each other so they're sharing sharing
the same senders and receivers that we

221
00:19:48,040 --> 00:19:54,159
talked about earlier so the first p.m.
Minnesota receiver and just take a

222
00:19:54,160 --> 00:20:03,200
baseline count of the system and so we
had a simple algorithm to map the

223
00:20:03,200 --> 00:20:08,390
patterns that we received a bit and in
this case nothing's being transmitted so

224
00:20:08,390 --> 00:20:15,700
all zeros and which is fine but nothing
is being forced just too noisy

225
00:20:15,700 --> 00:20:20,510
operations are going on and that's kind
of cool because it shows that when we do

226
00:20:20,510 --> 00:20:26,530
recording of information from a system
we can actually we can actually averaged

227
00:20:26,530 --> 00:20:31,960
out the noise from the system and I i
grafted here and so you can see it even

228
00:20:31,960 --> 00:20:35,380
though it each time frame the average is
real bit different for the most part

229
00:20:35,380 --> 00:20:45,930
they were all pretty low part of
virtually wrote for this which is

230
00:20:45,930 --> 00:20:50,980
available on the website as well into a
file if you want to actually see the

231
00:20:50,980 --> 00:20:56,660
number of out of order execution is your
recording from the pipeline so I

232
00:20:56,660 --> 00:21:02,750
transmitter and just entering the binary
string I want to send and in this

233
00:21:02,750 --> 00:21:10,310
example I'm just going to sound too bets
and that's listening I want to be able

234
00:21:10,310 --> 00:21:16,810
to you but sale in this example I have
doing nothing for two boats and then

235
00:21:16,810 --> 00:21:22,820
when it receives three it will it will
launch took so

236
00:21:22,820 --> 00:21:33,230
in this example the idea was that there
be some repair a row Berardi on that

237
00:21:33,230 --> 00:21:37,919
that system and when it received the
trigger signal in this case it would

238
00:21:37,919 --> 00:21:42,220
screen Windows Windows box but you know
you could do something a bit more cover

239
00:21:42,220 --> 00:21:50,169
right so when we gonna good research
paper we should mention mitigation

240
00:21:50,169 --> 00:21:56,669
techniques so you could isolate your
becomes turn up hyper-threading and I

241
00:21:56,669 --> 00:22:03,330
also do a first-year pretty you they're
pretty invasive right so that's probably

242
00:22:03,330 --> 00:22:07,960
something you don't want to do if you're
running a lot of a lot of young but you

243
00:22:07,960 --> 00:22:11,950
could do things like black list resource
sharing between

244
00:22:11,950 --> 00:22:17,950
threats from different PM's things like
that but like I said the downside to

245
00:22:17,950 --> 00:22:21,899
using any of these mitigation techniques
are that a lot of benefit from using the

246
00:22:21,899 --> 00:22:30,899
cloud would be mitigated so they would
be also saw research week our country

247
00:22:30,899 --> 00:22:34,939
should we demonstrated an awful lot of
works

248
00:22:34,940 --> 00:22:40,470
channel and we showed how even though
most side channels target or so memory

249
00:22:40,470 --> 00:22:45,700
models it is possible to create five
channels over more dynamic systems by

250
00:22:45,700 --> 00:22:54,259
dynamically clearing them like i showed
earlier with underwater sort of like to

251
00:22:54,259 --> 00:22:57,820
thank you my black friend from Lincoln
labs for introducing me to this topic

252
00:22:57,820 --> 00:23:04,480
my CTF team RPI sick and i truly bits so
there's any questions I can take them

253
00:23:04,480 --> 00:23:10,409
out or you can contact me at any of
these places with work and also my

254
00:23:10,409 --> 00:23:14,690
thesis on the subject where I
demonstrate not just the one attack but

255
00:23:14,690 --> 00:23:20,580
the ones I listed before it was my
pieces if you want to read my results

256
00:23:20,580 --> 00:23:25,810
from that you can go go there

257
00:23:25,810 --> 00:24:01,460
the receiving side that actually would
be receiving the process but just like

258
00:24:01,460 --> 00:24:16,480
in cars like em nosso so obviously
nothing is being transferred because it

259
00:24:16,480 --> 00:24:21,250
just happens normally but the averages
will be different so you can take those

260
00:24:21,250 --> 00:24:35,230
into account when you create your
mutations or something

261
00:24:35,230 --> 00:25:11,559
for the most part because we felt
different but it's probably an area for

262
00:25:11,559 --> 00:25:21,790
further research should be there
countermeasures against these types of

263
00:25:21,790 --> 00:25:31,600
attacks not sure about that she slides
ago but yeah so the obvious ones are the

264
00:25:31,600 --> 00:25:37,360
ones that you probably don't want to
humans because they would be the game or

265
00:25:37,360 --> 00:25:41,110
they would remove any benefits you get
from using the cloud but there are

266
00:25:41,110 --> 00:25:46,418
things you can do it the hypervisor
level so very little sore but those are

267
00:25:46,419 --> 00:25:50,510
ones I haven't fully I'm working on
those right now so annoyed about them

268
00:25:50,510 --> 00:25:59,760
but we can talk after their questions
and just come up soon afterwards

