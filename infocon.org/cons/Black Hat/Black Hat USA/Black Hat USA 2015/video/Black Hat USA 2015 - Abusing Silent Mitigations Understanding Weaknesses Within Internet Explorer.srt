1
00:00:00,000 --> 00:00:04,420
this is using salim indications
understanding weaknesses with Internet

2
00:00:04,420 --> 00:00:08,809
Explorer is isolated and memory
protection to stop originates around a

3
00:00:08,809 --> 00:00:15,690
set of research we did in mid 2014 and
completed in February 2015 and it really

4
00:00:15,690 --> 00:00:19,230
is an in-depth look at the new
medications that are being introduced

5
00:00:19,230 --> 00:00:23,289
into Internet Explorer Pacific we were
talking about the isolated heap and

6
00:00:23,289 --> 00:00:29,080
memory protection mitigations covering
not only how these medications work who

7
00:00:29,080 --> 00:00:33,760
also be covering how to attack these
medications will also be talking about

8
00:00:33,760 --> 00:00:38,000
how you can use one of these medications
to break another mitigation in this case

9
00:00:38,000 --> 00:00:43,739
using memory protection as a way to
bypass a hassle are also covered all of

10
00:00:43,739 --> 00:00:49,910
the defense's that we suggested to
Microsoft effect this research $125,000

11
00:00:49,910 --> 00:00:55,629
from Microsoft's mitigation bypass and
blue had bonus for defense program which

12
00:00:55,629 --> 00:01:00,280
we in turn donated to stamp charities
that support and education has also

13
00:01:00,280 --> 00:01:05,680
nominated for this year's award for most
innovative research he had a lot to

14
00:01:05,680 --> 00:01:10,270
cover some gonna get started diving in
the quick overview of who we are

15
00:01:10,270 --> 00:01:14,039
appear on the stage and several ppl here
in different directions members of the

16
00:01:14,040 --> 00:01:18,330
zero day initiative program celebrating
its 10th year as the world's largest

17
00:01:18,330 --> 00:01:24,189
vendor agnostic program we focus on
vulnerability research and remediation

18
00:01:24,189 --> 00:01:28,258
along with advanced exploitation
techniques working temperature those

19
00:01:28,259 --> 00:01:31,590
from researchers around the world and
working with the vendors to get them

20
00:01:31,590 --> 00:01:37,810
fixed I got to work to bring Lawrence I
actually run this year a Danish the

21
00:01:37,810 --> 00:01:41,400
program and I work again with
researchers around the world

22
00:01:41,400 --> 00:01:45,340
trying to get bugs fixed in purchasing
research on individuals out there in the

23
00:01:45,340 --> 00:01:45,890
world

24
00:01:45,890 --> 00:01:50,090
also organize the ever popular prom
don't happen competition and i got to

25
00:01:50,090 --> 00:01:54,200
work with Simon and do it here on this
research project and have them introduce

26
00:01:54,200 --> 00:01:58,110
themselves real quick

27
00:01:58,110 --> 00:02:17,850
past two years I am Simons occur Brian
on Twitter X kitchen I've been working

28
00:02:17,850 --> 00:02:21,480
with edi for a little over a year and
I've done a lot of work was Internet

29
00:02:21,480 --> 00:02:28,739
Explorer so it should come as no
surprise to people in this room they use

30
00:02:28,740 --> 00:02:33,000
after free vulnerabilities where we're
very very popular with ex clears out

31
00:02:33,000 --> 00:02:38,370
there and you can see on the slide the
list of movies that were under active

32
00:02:38,370 --> 00:02:43,709
exploitation in the years of 2013 and
2014 and really something had to be done

33
00:02:43,709 --> 00:02:47,650
about this pretty much was every month
every other month and to use after free

34
00:02:47,650 --> 00:02:51,489
vulnerability would show up in the world
being used in a targeted attack against

35
00:02:51,489 --> 00:02:56,310
corporations are being used against
governments really like you said

36
00:02:56,310 --> 00:03:00,200
something had to be done in Microsoft
decided to do something about it in in

37
00:03:00,200 --> 00:03:05,839
the middle of 2014 and introduced a
couple new medications in there to make

38
00:03:05,840 --> 00:03:09,890
exploitation harder and this really have
the results of shifting the attacks are

39
00:03:09,890 --> 00:03:14,130
shifting attackers away from Internet
Explorer and now that as most of you

40
00:03:14,130 --> 00:03:18,079
know they're focusing on freshman
abilities to breaking the corporations

41
00:03:18,080 --> 00:03:23,970
so what exactly did they introduced in
the middle of 2014

42
00:03:23,970 --> 00:03:27,580
that that made exploitation harder well
first was the isolated heat which was

43
00:03:27,580 --> 00:03:32,170
introduced in June followed by memory
protection in July and these medications

44
00:03:32,170 --> 00:03:36,190
were intended to make use after free
exploitation harder and we'll talk about

45
00:03:36,190 --> 00:03:40,640
how all of these works in the attack so
we identified that that word against

46
00:03:40,640 --> 00:03:44,708
these medications in the second but when
they were introduced really the side

47
00:03:44,709 --> 00:03:49,190
effect for us in the Danish a program
was actually made Internet Explorer fun

48
00:03:49,190 --> 00:03:52,690
to research again right it's been
spending a lot of time doing root cause

49
00:03:52,690 --> 00:03:55,030
analysis on use after free
vulnerabilities and other

50
00:03:55,030 --> 00:03:58,260
vulnerabilities that existed in their
product and it pretty much every time

51
00:03:58,260 --> 00:04:03,429
one came in at almost guaranteed was
going to work and result in direct code

52
00:04:03,430 --> 00:04:06,580
execution so it really made it fun

53
00:04:06,580 --> 00:04:10,750
again which was kind of nice here on the
site you consent to see the

54
00:04:10,750 --> 00:04:14,790
vulnerability transit we had in our
program this emission trends over the

55
00:04:14,790 --> 00:04:18,640
last several years and you can see
increasingly more and more Internet

56
00:04:18,640 --> 00:04:22,250
Explorer vulnerability is coming into
our program and then all of a sudden in

57
00:04:22,250 --> 00:04:28,380
2014 we had a significant spike with a
max of 44 own abilities in Internet

58
00:04:28,380 --> 00:04:31,770
Explorer in one month notice a lot of
work to actually do all those

59
00:04:31,770 --> 00:04:35,060
vulnerabilities and make sure that
they're valid but it really kind of

60
00:04:35,060 --> 00:04:39,970
stayed up there for several months forty
40 + 20 days in Internet Explorer coming

61
00:04:39,970 --> 00:04:45,730
into our program and so you know when
Microsoft introduced the the medications

62
00:04:45,730 --> 00:04:47,250
and we're gonna talk about it really

63
00:04:47,250 --> 00:04:50,540
for myself is the one who runs the
budget for the program I cannot think

64
00:04:50,540 --> 00:04:55,700
Microsoft for saving me a bunch of money
and so you can see the the drop in

65
00:04:55,700 --> 00:05:00,640
submissions that happened in the middle
of 2014 were averaging around 25 new

66
00:05:00,640 --> 00:05:10,460
days and I know we're gonna go through
the isolated heap and we'll go over how

67
00:05:10,460 --> 00:05:17,008
it works in the attacks that you can use
against them

68
00:05:17,009 --> 00:05:22,409
so I was introduced in June 24

69
00:05:22,409 --> 00:05:26,270
notice baghdad that there's a separate
HP preaching create with a pretty PPI

70
00:05:26,270 --> 00:05:32,770
and the main purpose for this region was
to provide some kind of isolation

71
00:05:32,770 --> 00:05:38,279
between the medications and other types
of allegations so basically this was a

72
00:05:38,279 --> 00:05:42,680
game changer for these out of its
location because the classical ways of

73
00:05:42,680 --> 00:05:48,879
writing that reads objects with strings
and and a little Asians reside inside

74
00:05:48,879 --> 00:05:51,309
the process he president isolated

75
00:05:51,309 --> 00:05:57,610
provided some kind of isolation which
which which was a prequel so just like

76
00:05:57,610 --> 00:05:59,680
any other medication

77
00:05:59,680 --> 00:06:08,439
contain contain some weaknesses because
it doesn't keep track of the objects

78
00:06:08,439 --> 00:06:12,249
being allocated a type of objects being
allocated in the sizes so an attacker

79
00:06:12,249 --> 00:06:17,319
can can basically just over eight and
isolated object with another object or

80
00:06:17,319 --> 00:06:30,839
whatever type chooses he can just
allocate anything on the bike itself

81
00:06:30,839 --> 00:06:39,940
specifically referenced object

82
00:06:39,940 --> 00:06:47,140
so I'll be covering is aligned
allocations a technique so basically

83
00:06:47,140 --> 00:06:53,360
it's simply is allocating an object
right at the same exact address of

84
00:06:53,360 --> 00:07:02,090
subject so this is very useful when you
have a genetic condition where the bug

85
00:07:02,090 --> 00:07:08,159
is direction saying hi so the only
challenge here just to something to

86
00:07:08,160 --> 00:07:12,230
replace the freedom act weird but
something that contains specific values

87
00:07:12,230 --> 00:07:18,480
and high acid attack can control
directly or indirectly via sparingly in

88
00:07:18,480 --> 00:07:29,420
order to have a successful online attack
during meditation heap so that the

89
00:07:29,420 --> 00:07:32,490
reason for that is that we're probably
gonna be looking under two different

90
00:07:32,490 --> 00:07:47,430
sizes 410 bucket so basically step one
is to condition then we probably have to

91
00:07:47,430 --> 00:07:54,520
massage deep in a way to trigger
multiple heaps and multiple trees then

92
00:07:54,520 --> 00:08:02,919
we have two colossal these features
together in one chunk objects inside

93
00:08:02,919 --> 00:08:16,010
that generated and finally added sugar
they use using the DICOM so in this

94
00:08:16,010 --> 00:08:23,969
graph I have to CK Monroe object we have
the CD and a specific example we were

95
00:08:23,970 --> 00:08:31,340
freeing the seat a row and we were
riding it was basically this specific

96
00:08:31,340 --> 00:08:34,968
example reed Lake rituals that he don't
text me because it has specific offset

97
00:08:34,969 --> 00:08:41,820
it contains a value that we can
potentially control or partially control

98
00:08:41,820 --> 00:08:53,510
so basically before you guys can see the
Teterboro object and after you guys can

99
00:08:53,510 --> 00:08:58,210
see that it has been over at MIT student
highlighted in yellow is the half said

100
00:08:58,210 --> 00:09:04,500
that we're targeting its and basically
they don't actually contains the value

101
00:09:04,500 --> 00:09:12,800
40000 that specific offset and that's
gotta be sprayed and have some polish

102
00:09:12,800 --> 00:09:22,510
them so this is as crashed I'm have
everything was successful

103
00:09:22,510 --> 00:09:26,340
we're going to have we're going to have
the budget balancing that's missing

104
00:09:26,340 --> 00:09:35,890
value and then that technique and go
from there and controversial so the next

105
00:09:35,890 --> 00:09:40,910
attack techniques that are discussing is
misaligned allegations basically they

106
00:09:40,910 --> 00:09:46,030
are lined allegations are technically
correct really well we have a higher but

107
00:09:46,030 --> 00:09:49,579
if we have a bug that the references lol
said that that can be kind of

108
00:09:49,580 --> 00:09:53,740
problematic from an attacker's
prospective specifically because it's

109
00:09:53,740 --> 00:10:01,600
really hard to find an object with a low
after the weekend has values that we can

110
00:10:01,600 --> 00:10:06,370
control that that its assets so in order
to have too hard to solve this problem

111
00:10:06,370 --> 00:10:11,940
we have we have to probably allocate
something in a misaligned basically if

112
00:10:11,940 --> 00:10:16,070
the original object is a line at address
accident will probably have to start

113
00:10:16,070 --> 00:10:21,510
over allegations that explains in order
to have some object misaligned against

114
00:10:21,510 --> 00:10:28,750
the region 10 the simple steps are we we
have to trigger multiple we have to come

115
00:10:28,750 --> 00:10:38,010
together in order to producer one next
to speed this big tree trunk with random

116
00:10:38,010 --> 00:10:39,490
objects

117
00:10:39,490 --> 00:10:44,310
and later on we have to reduce their use
in order to dereference specific value

118
00:10:44,310 --> 00:10:54,670
from the misaligned undergo we spread so
again this is irritating the C team will

119
00:10:54,670 --> 00:11:01,459
object and its you guys can see we have
big big trunk and we sprayed the C

120
00:11:01,459 --> 00:11:06,660
button objects inside it basically we
have one but an object that's kind of

121
00:11:06,660 --> 00:11:10,540
misaligned against the reader one and
then we're gonna have a difference from

122
00:11:10,540 --> 00:11:18,279
there see but mr Lansley more than under
so in order to have a successful attack

123
00:11:18,279 --> 00:11:23,700
attack we have to symbolize the heap in
a way to produce the same reaching the

124
00:11:23,700 --> 00:11:28,810
same the same size basically this is a
quote that we've used in this specific

125
00:11:28,810 --> 00:11:36,739
example it's a way of doing it but this
was good enough to reproduce the same

126
00:11:36,740 --> 00:11:46,610
exact featuring again which is a size
eight hundred so this is the one that

127
00:11:46,610 --> 00:11:59,440
shows that it is high points 3 trunk is
always a hundred ten days so assuming

128
00:11:59,440 --> 00:12:04,649
you're able to stabilize the heap in a
way to producer same then we have to

129
00:12:04,649 --> 00:12:09,660
spray this big tree trunk with random
objects basically ritual is the button

130
00:12:09,660 --> 00:12:17,010
we were getting this with a modern
object we spread the track objects to to

131
00:12:17,010 --> 00:12:23,189
clear up just to cover some old and
basically this can be done in multiple

132
00:12:23,190 --> 00:12:28,370
ways some some some guys actually did it
with the text area you can do with an

133
00:12:28,370 --> 00:12:36,010
anchor depends what are you guys but the
button works in this example

134
00:12:36,010 --> 00:12:42,000
alright so this is a crash time I
crashed I we had we had to be a plus one

135
00:12:42,000 --> 00:12:47,630
C pointing to an asset from the
misaligned basically this site contains

136
00:12:47,630 --> 00:12:53,080
a value want to see 0:03 00 and that
value can be sprayed by a tax and then

137
00:12:53,080 --> 00:13:02,300
he can control of their so to recap all
this he does a good job

138
00:13:02,300 --> 00:13:07,250
isolating the allegations against
allegations it's not perfect it still

139
00:13:07,250 --> 00:13:11,620
contains some weaknesses like I
countries inches attacking or exploiting

140
00:13:11,620 --> 00:13:18,790
as it depends on several factors like
the nature of the bug acids and so now

141
00:13:18,790 --> 00:13:25,719
I'm going to turn it to Brian so we can
discuss production stuff

142
00:13:25,720 --> 00:13:31,110
memory protection to go remember to
production really have to look back to

143
00:13:31,110 --> 00:13:34,470
around July of 2004 teeming with when
they first release memory protection

144
00:13:34,470 --> 00:13:37,440
inside of the zero day initiative
program we had purchased a bunch of

145
00:13:37,440 --> 00:13:43,890
after Freeman abilities and that one day
they worked a resulting in direct are

146
00:13:43,890 --> 00:13:47,460
very good execution in the next day when
the patch will apply to all turned into

147
00:13:47,460 --> 00:13:50,510
a pointer dereference is right so this
is kind of concerning to us we're

148
00:13:50,510 --> 00:13:55,140
interested in how this how this work we
start taking a deeper look we noticed

149
00:13:55,140 --> 00:13:59,140
that Microsoft had implemented memory
protection so what exactly is memory

150
00:13:59,140 --> 00:14:03,840
protection of memory protection is a
delayed free mechanism that prevents

151
00:14:03,840 --> 00:14:08,710
blocks from being d allocated while
they're being referenced on the stack it

152
00:14:08,710 --> 00:14:13,080
keeps his box in a unusable been
allocated condition and add them to a

153
00:14:13,080 --> 00:14:17,260
wait-list and every so often a
reclamation process will occur which

154
00:14:17,260 --> 00:14:21,220
would reverse the wait list and see if
the blocks have reference vectors

155
00:14:21,220 --> 00:14:24,930
references to the box and then if there
were no references it will free the

156
00:14:24,930 --> 00:14:28,770
block at the heat manager level at a
Microsoft to implement this will be

157
00:14:28,770 --> 00:14:33,050
implemented a new function called
protected free which is called instead

158
00:14:33,050 --> 00:14:35,540
of sheep R E

159
00:14:35,540 --> 00:14:40,380
understand how this works what you see
on the slide is a flowchart of the steps

160
00:14:40,380 --> 00:14:44,189
that are taken by protected free and
it's actually pretty simple

161
00:14:44,190 --> 00:14:47,269
the first thing that decides to do is
whether it's going to do a

162
00:14:47,269 --> 00:14:50,990
recommendation sweeper not and then
after that it adds that block to the

163
00:14:50,990 --> 00:14:55,430
weightless it will perform reclamation
sleep if the wait list contains more

164
00:14:55,430 --> 00:14:59,319
than a hundred thousand bucks worth of
new blocks on the waitlist since the

165
00:14:59,319 --> 00:15:04,240
last reclamation sweep another key point
about protected free is to understand is

166
00:15:04,240 --> 00:15:08,810
when protected free is called an object
is guaranteed that object will not be

167
00:15:08,810 --> 00:15:12,839
reclaimed in that in that running a
protected free but it will be added to

168
00:15:12,839 --> 00:15:16,430
the waitlist and so these two things the
decision on whether to do reclamation

169
00:15:16,430 --> 00:15:20,560
sweep in the fact that the the block is
added to the wait list at the end of

170
00:15:20,560 --> 00:15:27,199
protected free we can be used to
generate an attack so how does the

171
00:15:27,199 --> 00:15:32,000
reclamation process work it reverses
every entry on the waitlist determine if

172
00:15:32,000 --> 00:15:37,100
it's still being russians so here we
have an entry referring to keep a block

173
00:15:37,100 --> 00:15:41,600
on the heap and the first thing it does
is check to see if there's a reference

174
00:15:41,600 --> 00:15:46,980
on the stack to this block any checks
the process registers to see if there's

175
00:15:46,980 --> 00:15:51,500
a rare reference this block in the
registers if there is a reference

176
00:15:51,500 --> 00:15:56,050
debacle be weightless and continue to be
waitlisted after protected free is

177
00:15:56,050 --> 00:15:59,769
complete but if there are no references
it will free the block at the heat

178
00:15:59,769 --> 00:16:03,779
manager level so for use after Sri
vulnerabilities where there is a

179
00:16:03,779 --> 00:16:07,079
reference on the stack when the
processor registers memory protection is

180
00:16:07,079 --> 00:16:13,849
highly effective against those use after
trees but there are cases where we're

181
00:16:13,850 --> 00:16:18,040
references do not exist the objects and
so what kind of challenges does memory

182
00:16:18,040 --> 00:16:22,469
protection presented the attacker the
first lady allocation delay due to the

183
00:16:22,470 --> 00:16:26,949
reclamation process that occurs then
there's not determinism in that

184
00:16:26,949 --> 00:16:30,849
reclamation process due to school we
call stack junk and stacked junk to

185
00:16:30,850 --> 00:16:35,850
asses basically non pointers or still
pointers that are left over on the stack

186
00:16:35,850 --> 00:16:39,480
in buffers in a not been clear to their
former contents says the reclamation

187
00:16:39,480 --> 00:16:41,290
process occurs

188
00:16:41,290 --> 00:16:44,819
think that these are pointers into the
block and as a result they will not read

189
00:16:44,820 --> 00:16:49,920
those books is also complexity in
determining that the allocation time due

190
00:16:49,920 --> 00:16:53,240
to the large number of blocks that could
be on the weightless and is also

191
00:16:53,240 --> 00:16:56,660
complexity in the heat manager behavior
due to the reordering of the waitlist

192
00:16:56,660 --> 00:17:00,529
that occurs making it harder to predict
harder to predict the order in which the

193
00:17:00,529 --> 00:17:06,400
D allocations are going to occur so what
kind of attack techniques can we come up

194
00:17:06,400 --> 00:17:10,069
with to defeat all of those challenges
for the cases of user trees with the

195
00:17:10,069 --> 00:17:15,280
references don't exist you can use
generic memory pressuring techniques

196
00:17:15,280 --> 00:17:19,220
like this when you see on the screen
that will make sure that there are over

197
00:17:19,220 --> 00:17:24,949
a hundred thousand bites of new books on
the waitlist so that the regulations we

198
00:17:24,949 --> 00:17:28,079
can be reformed the next time protected
three quarters but it doesn't really saw

199
00:17:28,079 --> 00:17:34,659
all the challenges to take a more
surgical approach trying to make sure

200
00:17:34,660 --> 00:17:38,630
that I use after free that we want to
use is d allocated when we wanted to be

201
00:17:38,630 --> 00:17:42,110
allocated and overcome all of the
challenges that exist due to memory

202
00:17:42,110 --> 00:17:45,490
protection so the first thing they were
gonna do is we're gonna prep for the

203
00:17:45,490 --> 00:17:50,770
waitlist to ensure that the next time
the reclamation process occurs it will

204
00:17:50,770 --> 00:17:55,610
occur when protected free to run so
we're going to do is to find a way to

205
00:17:55,610 --> 00:18:00,629
allocate a hundred thousand bite block
and they were gonna Sri that blocked

206
00:18:00,630 --> 00:18:05,350
using protected free and as we know
protected free only had two blocks the

207
00:18:05,350 --> 00:18:07,040
weightless after its done

208
00:18:07,040 --> 00:18:13,070
results in the waitlist here having
blockade on it so this time next time

209
00:18:13,070 --> 00:18:18,700
protected freeze called the reclamation
process worker and now we're going to

210
00:18:18,700 --> 00:18:22,090
prep the waiting list and try to bring
it to a noon size so that we know

211
00:18:22,090 --> 00:18:25,459
exactly when the allegations are going
to her so we're going to force the

212
00:18:25,460 --> 00:18:29,500
reclamation sleep and bring them we
listened to an approximate size so first

213
00:18:29,500 --> 00:18:34,059
we're going to allocate a block of an
arbitrary size will call it be then

214
00:18:34,059 --> 00:18:34,860
we're gonna

215
00:18:34,860 --> 00:18:39,010
protected free on that object because
we've we're at the point where the

216
00:18:39,010 --> 00:18:44,640
reclamation process will trigger the
reclamation process it will free block a

217
00:18:44,640 --> 00:18:48,309
free any other boxes don't have
references on there and after that it

218
00:18:48,309 --> 00:18:52,629
will add me to the weightless said this
time we have a wait list in an

219
00:18:52,630 --> 00:18:53,740
approximate size

220
00:18:53,740 --> 00:18:59,840
an approximate known state clearing
everything out next launcher attack

221
00:18:59,840 --> 00:19:03,470
against in this case we're going to call
block see which is the book that we want

222
00:19:03,470 --> 00:19:08,160
to use in the use after free attack
first we're gonna have bought Black Sea

223
00:19:08,160 --> 00:19:12,670
to the waitlist by calling protected
free on it at this point blank CDs on

224
00:19:12,670 --> 00:19:15,780
the waitlist then we're going to
allocate a book of a hundred thousand

225
00:19:15,780 --> 00:19:20,910
bites will call this block D embryonic
are protected free on that book which

226
00:19:20,910 --> 00:19:25,480
will add the blocks of the waitlist then
we're going to force reclamation of

227
00:19:25,480 --> 00:19:30,350
blocks C&D by allocating another book
and calling protected free on its hand

228
00:19:30,350 --> 00:19:34,980
at this point we've hit the reclamation
threshold which will free Black Sea and

229
00:19:34,980 --> 00:19:39,800
Lochte and and and now we can move on
and use the isolated attack techniques

230
00:19:39,800 --> 00:19:44,850
to go to try to reclaim the appropriate
assets that we need to continue on

231
00:19:44,850 --> 00:19:50,059
exploiting this years after treatment
ability so what do we need

232
00:19:50,059 --> 00:19:53,820
well we need a way of arbitrarily
allocating Andy allocating using

233
00:19:53,820 --> 00:19:59,750
protected tree and arbitrary size block
so we can't use extreme her sister E

234
00:19:59,750 --> 00:20:03,120
string bass strings because they don't
call protected free when they destroyed

235
00:20:03,120 --> 00:20:08,178
in this case we need to use Easter his
sister will call protected free and the

236
00:20:08,179 --> 00:20:12,440
way we get to see stuart is because get
elements my class name you know that's

237
00:20:12,440 --> 00:20:14,160
my question has decided to give up

238
00:20:14,160 --> 00:20:18,559
allocating a block and D allocating a
block in the same code the same method

239
00:20:18,559 --> 00:20:22,440
to give us an excellent opportunity to
do some real surgical stuff with the

240
00:20:22,440 --> 00:20:28,280
with the wait list in India allocating
blocks and so the code that we have here

241
00:20:28,280 --> 00:20:32,309
it shows how we'd use this get elements
like last name first we need to do a

242
00:20:32,309 --> 00:20:35,920
little priming procedure which you see
in the first two lines which would

243
00:20:35,920 --> 00:20:39,610
explain in detail on the paper and then
after that every time we go get elements

244
00:20:39,610 --> 00:20:40,469
like last name

245
00:20:40,470 --> 00:20:46,170
case Easter an incall protecting free on
that arbitrarily sized object we can

246
00:20:46,170 --> 00:20:51,450
manipulate the waitlist and what we're
gonna show you as a demo video of a user

247
00:20:51,450 --> 00:20:57,340
for free money bility that we had that
we use the techniques we just talked

248
00:20:57,340 --> 00:21:01,809
about with memory protection along with
the isolated heap techniques to gain

249
00:21:01,809 --> 00:21:03,870
control of the eap register

250
00:21:03,870 --> 00:21:09,280
clearing a baller challenges that exist
existed from memory protection so you

251
00:21:09,280 --> 00:21:25,430
see here there 41 41 41 41 in the in the
good register now we're going to turn it

252
00:21:25,430 --> 00:21:28,830
over to Simon and he's gonna go over how
we use memory protection to break a

253
00:21:28,830 --> 00:21:41,080
similar action we're gonna talk about
how we were able to use memory

254
00:21:41,080 --> 00:21:47,280
protection to get a bypass after I got
comfortable with making precision

255
00:21:47,280 --> 00:21:51,879
modifications to the memory protection
state and went back and started seeking

256
00:21:51,880 --> 00:21:58,400
some more about the something I'd read a
blog from Fortinet back in july of 2014

257
00:21:58,400 --> 00:22:07,710
to paraphrase from that post 2013 Dion
showed how conservative garbage

258
00:22:07,710 --> 00:22:23,100
collectors used by script engines to
leak information about addresses

259
00:22:23,100 --> 00:22:30,559
memory protection provide a new attack
surface for a similar attack that's an

260
00:22:30,559 --> 00:22:34,220
interesting idea in a sense of
protection acts like a conservative

261
00:22:34,220 --> 00:22:40,520
garbage collector freeing allocated
memory only if no references are found

262
00:22:40,520 --> 00:22:44,840
on the stack that means that it might be
susceptible to an attack similar to the

263
00:22:44,840 --> 00:22:50,309
garbage collection attack done by Dion
the key idea here is that when memory

264
00:22:50,309 --> 00:22:54,440
protection examines values on the stack
it doesn't understand anything about the

265
00:22:54,440 --> 00:22:59,390
semantics of those values it treats each
DWORD as if it is potentially a pointer

266
00:22:59,390 --> 00:23:05,370
so if we like we can plant a chosen
integer value on the stack and memory

267
00:23:05,370 --> 00:23:09,879
protection will interpret it as a
pointer memory protection will exhibit

268
00:23:09,880 --> 00:23:14,110
different behavior depending on whether
or not the integer reach shows

269
00:23:14,110 --> 00:23:22,059
corresponds to an address listed memory
so here we see a block on the waitlist

270
00:23:22,059 --> 00:23:27,210
let's say we plant an integer value on
the stack and then trigger a memory

271
00:23:27,210 --> 00:23:32,929
protections reclamation routine if the
integer replanted corresponds to an

272
00:23:32,929 --> 00:23:37,640
address anywhere within the block then
memory protection respond in one way

273
00:23:37,640 --> 00:23:44,260
keeping the block on the waitlist but if
the integral planted is not within the

274
00:23:44,260 --> 00:23:48,720
waitlist blocks address memory
protection will behave in a different

275
00:23:48,720 --> 00:23:54,659
way and deallocate the block so it's
starting to sound like we may have a way

276
00:23:54,659 --> 00:23:59,590
to reveal information about the layout
of the address space we can repeatedly

277
00:23:59,590 --> 00:24:01,709
guests and address

278
00:24:01,710 --> 00:24:06,520
planted as integer on the stack and get
memory protection to behave in a way

279
00:24:06,520 --> 00:24:12,000
that reveals whether or not we have
correctly guessed the address of a

280
00:24:12,000 --> 00:24:17,580
certain allocated block in memory in
other words we have an article or doing

281
00:24:17,580 --> 00:24:23,428
because at this point there is still a
very big problem let's look at the

282
00:24:23,429 --> 00:24:29,779
programmatic contract exposed by memory
protection

283
00:24:29,779 --> 00:24:35,950
notification which is not something that
gets cold during normal program

284
00:24:35,950 --> 00:24:41,149
operation memory protection does not
return even a single piece of data from

285
00:24:41,149 --> 00:24:47,619
any of its methods that's a problem we
can influence memory protection based on

286
00:24:47,619 --> 00:24:52,499
whether Reid guess the correct address
or not but to have an Oracle we need to

287
00:24:52,499 --> 00:24:56,649
have the ability to read some kind of
response back and memory protections API

288
00:24:56,649 --> 00:25:03,689
gives us absolutely nothing what this
means is that we need a side channel so

289
00:25:03,690 --> 00:25:08,369
when I was thinking about this the first
thing that came to mind was the timing

290
00:25:08,369 --> 00:25:15,668
attack but then it was in the summer of
2014 and some cases starting started

291
00:25:15,669 --> 00:25:21,210
coming in 20 day initiative that were
kind of unusual we were seeing proof of

292
00:25:21,210 --> 00:25:27,129
concept code that would expose bad could
patsy naive by subjecting the browser to

293
00:25:27,129 --> 00:25:33,859
memory pressure the code would do some
lengthy loop performing repeated on

294
00:25:33,859 --> 00:25:38,589
manipulations and also consuming memory
at some point when virtual address space

295
00:25:38,589 --> 00:25:43,070
was nearly exhausted and memory
allocations were starting to fail

296
00:25:43,070 --> 00:25:47,589
code path would be triggered that was
vulnerable is striking how he reasonably

297
00:25:47,589 --> 00:25:51,979
reliable trigger could be constructed in
this way even though the browser was

298
00:25:51,979 --> 00:25:59,169
under such a high level of stress about
the idea of operating the browser in a

299
00:25:59,169 --> 00:26:06,109
regime of high memory pressure it's
relatively unexplored territory what

300
00:26:06,109 --> 00:26:07,889
kinds of things can make happen

301
00:26:07,889 --> 00:26:14,728
struck me as interesting something else
I noticed was that one script requested

302
00:26:14,729 --> 00:26:19,940
operation that requires a heap
allocation and the allocation fails due

303
00:26:19,940 --> 00:26:26,999
to a lack of available memory the script
received an out of memory exception

304
00:26:26,999 --> 00:26:33,299
way for attackers script to detect
whether an allocation was a success or a

305
00:26:33,299 --> 00:26:37,340
failure all it needs to do is check for
the exception and

306
00:26:37,340 --> 00:26:43,350
here's the crucial insight that can
detect whether an allocation succeeds or

307
00:26:43,350 --> 00:26:49,490
fails and whether it succeeds or fails
is a function of the existing state of

308
00:26:49,490 --> 00:26:57,300
the heap in other words the script out
of memory exceptions or a sci-fi channel

309
00:26:57,300 --> 00:27:01,750
that reveals information about the state
of the heap and that's exactly the site

310
00:27:01,750 --> 00:27:05,570
channel that we need in order to get
information back from memory protection

311
00:27:05,570 --> 00:27:13,439
high-level view of how we're going to
consult the memory protection Oracle

312
00:27:13,440 --> 00:27:18,870
don't be concerned about the exact
details I'm gonna fill those in just a

313
00:27:18,870 --> 00:27:22,929
little bit later for now let's just
appreciate the high-level structure of

314
00:27:22,930 --> 00:27:27,460
what we're going to do say we have a
block of memory on the memory protection

315
00:27:27,460 --> 00:27:32,850
wait-list on we want to consult the
Oracle to determine whether certain

316
00:27:32,850 --> 00:27:38,709
address X is an address that falls
within that block replant X on the stack

317
00:27:38,710 --> 00:27:42,820
as an integer and then we do something
that triggers memories protections

318
00:27:42,820 --> 00:27:47,810
reclamation in response memory
protection modifies the heat in a way

319
00:27:47,810 --> 00:27:52,490
that's dependent on whether X points
within the targeted block how do we find

320
00:27:52,490 --> 00:27:58,500
out how memory protection has responded
we attempt a new heap allocation that is

321
00:27:58,500 --> 00:28:04,890
designed to succeed or fail depending
upon what memory protection has done to

322
00:28:04,890 --> 00:28:09,670
the heap then by checking for the
presence or absence of an out of memory

323
00:28:09,670 --> 00:28:14,560
exception we can make a deduction about
how memory protection has behaved and

324
00:28:14,560 --> 00:28:21,230
this the answer to whether X falls
within the targeted block of memory

325
00:28:21,230 --> 00:28:26,190
here's the whole chain of deductions
they make the presence or absence of an

326
00:28:26,190 --> 00:28:29,600
out of memory exception tells us
something about the state of the heat

327
00:28:29,600 --> 00:28:34,449
the state of the heap tells us something
about how memory protection has behaved

328
00:28:34,450 --> 00:28:39,580
and how memory protection has behaved
tells us whether X files within the

329
00:28:39,580 --> 00:28:42,178
targeted lock thats

330
00:28:42,179 --> 00:28:47,220
high-level view really to actualize it's
going to take some pretty careful set up

331
00:28:47,220 --> 00:28:51,950
but here's the thing going back to
something get mentioned earlier once you

332
00:28:51,950 --> 00:28:57,840
start thinking about what you can do in
a regime of high memory pressure some

333
00:28:57,840 --> 00:29:02,928
really interesting possibilities open up
before going any further though I'd like

334
00:29:02,929 --> 00:29:07,629
to reach fine what we mean by high
memory pressure it's more subtle than

335
00:29:07,629 --> 00:29:13,178
just piling on lots of pressure until
there's no free memory last first of all

336
00:29:13,179 --> 00:29:18,379
it's not really availability of their
ability of memory were talking its

337
00:29:18,379 --> 00:29:24,668
ability of Madras base in a 32 bit
process the limiting factor that causes

338
00:29:24,669 --> 00:29:30,700
allocation failures is not memories lost
in its address space exhausting the next

339
00:29:30,700 --> 00:29:34,669
thing to note it's possible for
allocations to fail even if there's

340
00:29:34,669 --> 00:29:39,759
plenty of address space left it depends
on how large of an allocation you're

341
00:29:39,759 --> 00:29:44,669
asking also you know it's not the
aggregate amount of remaining address

342
00:29:44,669 --> 00:29:50,330
space that matters is whether importance
of contiguous region can be found so

343
00:29:50,330 --> 00:29:57,860
let's refine our ideas follows operating
the browser in a regime of limited

344
00:29:57,860 --> 00:30:05,240
availability of large contiguous regions
of free address this play with this

345
00:30:05,240 --> 00:30:11,559
let's see what we can do raise the sheep
with one megabyte allocations until

346
00:30:11,559 --> 00:30:17,350
address pieces or concealment and then
we free one of those one megabyte locks

347
00:30:17,350 --> 00:30:23,668
what's left is a one megabyte whole and
that whole is the one and only

348
00:30:23,669 --> 00:30:29,190
contiguous region of one megabytes of
free addresses we can actually leave

349
00:30:29,190 --> 00:30:32,499
lots of smaller holes also and it
doesn't change the fact that we have

350
00:30:32,499 --> 00:30:37,710
exactly one hole that's one megabyte
dick if we go back and make another one

351
00:30:37,710 --> 00:30:43,659
megabyte allocation we know that
replaced because that's the only place

352
00:30:43,659 --> 00:30:47,450
accounts it can actually keep doing this
over and over

353
00:30:47,450 --> 00:30:51,279
allocating one mic megabyte block and
freeing it allocating one megabyte block

354
00:30:51,279 --> 00:30:54,980
in free every time the one megabyte
block will be allocated in

355
00:30:54,980 --> 00:31:01,280
exactly the same place now happen if one
time he tried to make that allocation

356
00:31:01,280 --> 00:31:09,049
but it failed that tell us they could
make that happen is if some other

357
00:31:09,049 --> 00:31:15,809
allocation came along and occupied the
whole but that possibility because we

358
00:31:15,809 --> 00:31:20,470
know there are no other lawrence's
allocations going on and we might be

359
00:31:20,470 --> 00:31:25,919
able to conclude that what happened was
the last time around the one megabyte

360
00:31:25,919 --> 00:31:31,880
black never really got freed because
memory protection was holding onto it in

361
00:31:31,880 --> 00:31:36,660
other words we have a way of telling
whether memory protection still has the

362
00:31:36,660 --> 00:31:41,429
block waitlisted by trying to make a new
one megabyte allocation in checking to

363
00:31:41,429 --> 00:31:47,570
see if an out of memory exception is
thrown all right now we have all the

364
00:31:47,570 --> 00:31:53,139
main pieces we need in order to make an
attack possible for us we prepare memory

365
00:31:53,140 --> 00:31:59,340
so there's just one large contiguous 3
region let's say one megabyte insights

366
00:31:59,340 --> 00:32:04,030
but it could be any size we like we're
gonna call that the whole or the region

367
00:32:04,030 --> 00:32:08,770
we're going to use memory protection as
an Oracle to determine where that whole

368
00:32:08,770 --> 00:32:11,700
is in memory

369
00:32:11,700 --> 00:32:17,840
guess an address we want to consult the
Oracle to determine if ax falls within

370
00:32:17,840 --> 00:32:23,309
the whole we make a one megabyte
allocations now the whole is occupied

371
00:32:23,309 --> 00:32:28,960
free the allocation we made meaning that
it gets passed to protected free

372
00:32:28,960 --> 00:32:33,860
protected free puts the allocation on
the waitlist as far as the heat managers

373
00:32:33,860 --> 00:32:40,668
concerned the memory still allergy now
we plant acts as an integer on the stack

374
00:32:40,669 --> 00:32:44,740
and wall access there on the stack we do
something that triggers memory

375
00:32:44,740 --> 00:32:50,760
reclamation what happens next depends on
whether X files within the one megabyte

376
00:32:50,760 --> 00:32:52,890
address regional not

377
00:32:52,890 --> 00:32:57,360
X falls within the address region then
when memory protection performs

378
00:32:57,360 --> 00:33:01,870
reclamation it will keep this allocation
on the waitlist and it will treat it

379
00:33:01,870 --> 00:33:07,350
managed level otherwise if X doesn't
fall within the region then memory

380
00:33:07,350 --> 00:33:07,980
protection

381
00:33:07,980 --> 00:33:16,400
will remove this allocation from the
waitlist and invoke keep free this shows

382
00:33:16,400 --> 00:33:22,100
the two possible states we can end up in
falls within the region the whole stays

383
00:33:22,100 --> 00:33:26,360
occupied that affects does not fall
within the region then the whole gets

384
00:33:26,360 --> 00:33:32,969
opened up the last step to tell which of
these two states we just ended up all we

385
00:33:32,970 --> 00:33:38,730
need to do is try another one megabyte
allocation if it succeeds we know that

386
00:33:38,730 --> 00:33:43,190
the whole opened and this means that
text wasn't within the region but if we

387
00:33:43,190 --> 00:33:47,150
get an out of memory exception that name
we know that the whole state occupied

388
00:33:47,150 --> 00:33:51,669
which tells us that X falls within the
region now we have an answer from the

389
00:33:51,669 --> 00:33:56,799
Oracle and by repeating this process
with different values of x we can use

390
00:33:56,799 --> 00:34:04,080
the article to find out exactly where
that one megabyte hole is in memory to

391
00:34:04,080 --> 00:34:09,529
go back to this idea just one more time
when we operate the browser in a resume

392
00:34:09,530 --> 00:34:14,190
of limited availability of large
contiguous regions of free address space

393
00:34:14,190 --> 00:34:19,889
the new possibilities that arise can be
quite interesting it leads us to what we

394
00:34:19,889 --> 00:34:25,060
can do next what we had is a way to
prepare the address space of that there

395
00:34:25,060 --> 00:34:29,980
is just one large hole of available
addresses of a size are choosing and

396
00:34:29,980 --> 00:34:35,139
then to use the memory protection Oracle
to determine the exact addresses that

397
00:34:35,139 --> 00:34:39,320
whole how can we make good use of this
ability what could have been an attacker

398
00:34:39,320 --> 00:34:47,240
to gain from knowing the address of a
hole in the address space module into it

399
00:34:47,239 --> 00:34:53,609
we can start by creating a whole that's
exactly the right size for loading a

400
00:34:53,609 --> 00:34:58,500
particular model then using the memory
protection Oracle

401
00:34:58,500 --> 00:35:04,609
the address of the whole finally we
caused the loading of the module it gets

402
00:35:04,609 --> 00:35:09,569
loaded exactly at the beginning of the
whole because that's exactly the only

403
00:35:09,570 --> 00:35:16,280
available place in the address space
where that module is going to fit

404
00:35:16,280 --> 00:35:21,810
so it's actually an SLR bypass and runs
quite efficient efficiently and reliably

405
00:35:21,810 --> 00:36:06,599
we're gonna show a demo video care what
it looks like

406
00:36:06,599 --> 00:36:21,279
on exhaustion of the 32 bit Madras a
great deal of confusion about how this

407
00:36:21,279 --> 00:36:28,109
affects 64 bit systems on this slide
reduce going to dispel some myths issue

408
00:36:28,109 --> 00:36:33,910
effects every default desktop of I
either out there except for Metro I'm

409
00:36:33,910 --> 00:36:45,019
not sure about Eaton under default
settings Windows I'm not sure about this

410
00:36:45,019 --> 00:36:52,288
is because under default settings
classic desktop IE users a 32 bit

411
00:36:52,289 --> 00:36:57,989
rendering process even if the broker
processes 64 bit so even if you've got

412
00:36:57,989 --> 00:37:04,339
the 64 bit processor and 64 bit Windows
and you're running 64 bit IE with

413
00:37:04,339 --> 00:37:11,359
default settings this by pistol works so
this has been a lot of fun what started

414
00:37:11,359 --> 00:37:14,630
out looking like it was something that
was not exploitable turned out in the

415
00:37:14,630 --> 00:37:18,890
end to be reliable Chancellor bypass the
key insight that made it possible that

416
00:37:18,890 --> 00:37:23,049
JavaScript out of memory exception sorry
side channel that reveals critical

417
00:37:23,049 --> 00:37:26,660
information about the state of the heap
I don't think this has been recognized

418
00:37:26,660 --> 00:37:29,569
before and they were interesting
possibilities that open up when you

419
00:37:29,569 --> 00:37:34,440
operate the browser under memory
pressure we've made several

420
00:37:34,440 --> 00:37:38,930
recommendations to Microsoft for ways
they can improve isolated and memory

421
00:37:38,930 --> 00:37:43,509
protection to harden them against the
attacks we've discovered in regard to

422
00:37:43,509 --> 00:37:47,519
memory protection we make the
recommendation to remove memory

423
00:37:47,519 --> 00:37:51,430
protection from array and Buster
allocations this means that memory

424
00:37:51,430 --> 00:37:56,509
protection would apply only to scalar
allocations a rationale is that one

425
00:37:56,509 --> 00:38:01,859
almost never finds an exploitable UAF
condition in Internet Explorer where the

426
00:38:01,859 --> 00:38:06,749
free to object is an array or buffer for
the benefit of applying memory

427
00:38:06,749 --> 00:38:10,979
protection to these types is doubtful on
the other hand we've demonstrated how it

428
00:38:10,979 --> 00:38:16,229
can be a very significant benefit to an
attacker we therefore feel that memory

429
00:38:16,229 --> 00:38:18,319
protection will be a stronger defense

430
00:38:18,319 --> 00:38:24,038
if applied to scale allocations only our
next suggestion pertains to

431
00:38:24,039 --> 00:38:29,380
strengthening ASLR i'm taking a look at
how we got excellent to fail

432
00:38:29,380 --> 00:38:34,039
notices that the attacker was able to
violate one of the Chancellor's

433
00:38:34,039 --> 00:38:38,489
assumptions by preparing the address
space in a particular way you see

434
00:38:38,489 --> 00:38:44,190
particular assumption that SLR mix when
it chooses a loaded dress for a module

435
00:38:44,190 --> 00:38:52,009
from among the set of possible load
addresses that this choice entropy but

436
00:38:52,009 --> 00:38:56,699
an attacker can break this assumption by
radically narrowing the set of possible

437
00:38:56,699 --> 00:39:01,380
load addresses before the module loads
our recommendation is to enhance

438
00:39:01,380 --> 00:39:06,489
Cancelar by adding an additional check
before loading module this check is to

439
00:39:06,489 --> 00:39:12,130
ensure that there really do exist a
multiplicity of addresses which

440
00:39:12,130 --> 00:39:16,529
requested module could load before
actually performing the random selection

441
00:39:16,529 --> 00:39:21,410
of a load address the number of possible
addresses is below a certain threshold

442
00:39:21,410 --> 00:39:26,199
the module load should fail since
loading module under this circumstance

443
00:39:26,199 --> 00:39:32,430
could significantly weaken the security
of the process this next recommendation

444
00:39:32,430 --> 00:39:37,109
is it required to out of memory
exceptions we've shown the JavaScript

445
00:39:37,109 --> 00:39:41,380
out of memory exception Zara side
channel that reveals information about

446
00:39:41,380 --> 00:39:46,039
the state of the heap although this
leaked bit of information might seem

447
00:39:46,039 --> 00:39:49,769
insignificant at first we have shown
that have how it can actually be

448
00:39:49,769 --> 00:39:54,069
leveraged to great effect should also be
mentioned that out of memory exceptions

449
00:39:54,069 --> 00:39:58,288
are very useful in to the attacker in
setting up conditions of memory pressure

450
00:39:58,289 --> 00:40:03,999
that are needed for our SLR bypass
attacked as well as triggering various

451
00:40:03,999 --> 00:40:08,198
other vulnerabilities that are dependent
on memory pressure we therefore

452
00:40:08,199 --> 00:40:13,690
recommend considering eliminating out of
memory exception since script when an

453
00:40:13,690 --> 00:40:19,109
allocation fails due to memory or
address space exhaustion instead of

454
00:40:19,109 --> 00:40:23,410
passing an exception up to script code
where it can be handled the condition

455
00:40:23,410 --> 00:40:28,469
should be considered as fatal to the
process or at least fatal to script

456
00:40:28,469 --> 00:40:29,950
execution within the process

457
00:40:29,950 --> 00:40:35,049
yes this seems unlikely to have a
significant negative impact upon

458
00:40:35,050 --> 00:40:37,880
legitimate web pages

459
00:40:37,880 --> 00:40:42,700
finally we recommend taking I so heed to
the next logical step by creating

460
00:40:42,700 --> 00:40:47,328
additional separate sheets ideally one
could have a separate sheet for each

461
00:40:47,329 --> 00:40:53,000
scalar type this would bring two great
benefits trust a UF condition could

462
00:40:53,000 --> 00:40:57,540
never lead to type confusion since every
type is confined to its own sheep

463
00:40:57,540 --> 00:41:02,660
secondly since each team consists
entirely of objects of homogeneous size

464
00:41:02,660 --> 00:41:05,410
misalignments not arise

465
00:41:05,410 --> 00:41:11,440
actually this last point is Matrix
Storage of C++ arrays C++ array storage

466
00:41:11,440 --> 00:41:15,540
has a metadata footprint that differs
from the storage of individual skiller

467
00:41:15,540 --> 00:41:21,050
so it's possible to use C++ a raise to
introduce this alignment however as

468
00:41:21,050 --> 00:41:27,859
we've mentioned exploitable UAS raised
in foster allocations are extremely rare

469
00:41:27,859 --> 00:41:32,410
so we recommend just leaving all array
and other allocations on the defaults

470
00:41:32,410 --> 00:41:36,690
instead and if we do that it should
become impossible for an attacker to

471
00:41:36,690 --> 00:41:42,970
produce misalignments keeps actually
there's another completely separate

472
00:41:42,970 --> 00:41:48,270
reason why it's best to leave raised and
buffers on the main process and I'd like

473
00:41:48,270 --> 00:41:52,490
to digress moment to explain why
something it doesn't get much attention

474
00:41:52,490 --> 00:41:57,750
when I still keep is discussed and
that's what could be called an address

475
00:41:57,750 --> 00:42:04,500
attack what's that consider how I still
he is supposed to ensure that when a DOM

476
00:42:04,500 --> 00:42:05,849
object is freed

477
00:42:05,849 --> 00:42:10,630
attacker would be able to allocate some
other non doms type object in its place

478
00:42:10,630 --> 00:42:15,890
such as string I still he tries to
ensure this by making sure the Dhamma

479
00:42:15,890 --> 00:42:22,029
locations and string allocations don't
happen on the same sheet but the

480
00:42:22,030 --> 00:42:27,869
attacker doesn't care about ships the
attacker only cares about addresses is

481
00:42:27,869 --> 00:42:33,660
it possible for the address of the freed
DOM object to later on TV address of the

482
00:42:33,660 --> 00:42:39,720
string allocation this would become
possible if I saw which is the heap on

483
00:42:39,720 --> 00:42:42,029
which dominates are stored

484
00:42:42,030 --> 00:42:46,360
sometimes relinquishes control of
virtual address space it no longer needs

485
00:42:46,360 --> 00:42:50,330
this would create the opportunity for
those same address is to later become

486
00:42:50,330 --> 00:42:53,569
part of a difference he touched the
process heat then a string of the

487
00:42:53,570 --> 00:43:00,750
allocated there is this attack actually
possible currently this attack is not

488
00:43:00,750 --> 00:43:06,710
possible and here's why the way the
Windows he'd managed works allocations

489
00:43:06,710 --> 00:43:10,750
reside within regions of virtual memory
call sheets segments and once a

490
00:43:10,750 --> 00:43:14,620
particular he preserves a segment it
never relinquished his control of those

491
00:43:14,620 --> 00:43:18,680
virtual addresses for as long as they
keep lives that will never allow those

492
00:43:18,680 --> 00:43:24,109
addresses to be completed any others and
today I so he is used only for small

493
00:43:24,110 --> 00:43:30,270
scale or allegations but instead I Z try
to protect large buffer allocations by

494
00:43:30,270 --> 00:43:35,550
placing them on ice and then isolation
wouldn't be guaranteed for large

495
00:43:35,550 --> 00:43:39,710
allocations the heat manager doesn't use
heap segments when the heat manager

496
00:43:39,710 --> 00:43:44,200
freed the buffer to relinquish control
over the actual virtual address is

497
00:43:44,200 --> 00:43:47,980
involved and later on those virtual
addresses could be put come part of a

498
00:43:47,980 --> 00:43:51,940
different team breaking the isolation
with this means for us is it pointless

499
00:43:51,940 --> 00:43:57,070
to try to protect buffers in a raised by
placing them on an isolated isolation

500
00:43:57,070 --> 00:44:02,670
could easily broken by an address reused
tech bottom line is the best ways to

501
00:44:02,670 --> 00:44:07,450
keep array and buffer allocations on the
defaults heap and have a separate

502
00:44:07,450 --> 00:44:12,109
isolated for every type of scalar
allocation than those isolated heaps

503
00:44:12,110 --> 00:44:17,870
will be completely immune to type
confusion and misalignment issues so

504
00:44:17,870 --> 00:44:21,130
having a separate fee for every skill
atype is highly beneficial but the

505
00:44:21,130 --> 00:44:25,060
drawback is that it may be too wasteful
of address space in a third to the

506
00:44:25,060 --> 00:44:29,690
process address space is a scarce
resource we're faced with a tradeoff

507
00:44:29,690 --> 00:44:34,640
between security and address space usage
what can we do to make the best of this

508
00:44:34,640 --> 00:44:38,220
tradeoff we're only going to be able to
create a limited number of ships and in

509
00:44:38,220 --> 00:44:41,790
whatever way we make assignments of
types to heaps an attacker who has

510
00:44:41,790 --> 00:44:45,680
discovered a UFO given he portrayed
constructed exploit fights hype

511
00:44:45,680 --> 00:44:49,600
confusion and were misalignment by
making use of the various types we have

512
00:44:49,600 --> 00:44:51,799
assigned to that same here

513
00:44:51,800 --> 00:44:57,750
unless we randomized the assignments
between types and heats we can break the

514
00:44:57,750 --> 00:45:02,020
monoculture of partitioning and instead
choose a random partitioning addresses

515
00:45:02,020 --> 00:45:08,490
start-up time process denies to the
attacker the ability to write a reliable

516
00:45:08,490 --> 00:45:14,250
exploit that relies on knowledge of
which types are co-located on this

517
00:45:14,250 --> 00:45:19,240
optimizes the defenders advantage when
we make the trade off between security

518
00:45:19,240 --> 00:45:27,399
and the number of seats were willing to
create its own conclusion you wanna do

519
00:45:27,400 --> 00:45:33,830
also show the exploit that we had
generated for them in my passport but

520
00:45:33,830 --> 00:45:37,410
we're going to see all of the attack
techniques put into one exploit the

521
00:45:37,410 --> 00:45:41,180
first thing you're gonna see Internet
Explorer I'm going to use the air slur

522
00:45:41,180 --> 00:45:48,180
bypassed 22 break detection to bring it
to you just had a poverty-stricken make

523
00:45:48,180 --> 00:45:57,990
sure was the most current browser you
will see a castle are right there and

524
00:45:57,990 --> 00:46:02,689
then it will pass that on the leaders
out after the export world then use the

525
00:46:02,690 --> 00:46:07,390
memory protection techniques along with
the isolated he techniques code

526
00:46:07,390 --> 00:46:15,600
execution version of Internet Explorer
Microsoft and all of the details and all

527
00:46:15,600 --> 00:46:22,339
the recommendations they get $125,000
they sat on it for several months and

528
00:46:22,340 --> 00:46:28,080
decided not to implement any of the
recommendations that we had talked about

529
00:46:28,080 --> 00:46:36,170
so we really saw the code so it's if you
want to go play with the break in the

530
00:46:36,170 --> 00:46:40,330
isolated he attacks like these in the
mirror protection techniques all of the

531
00:46:40,330 --> 00:46:41,660
code is out on get home

532
00:46:41,660 --> 00:46:47,680
it works on every default version of
desktop version and I hope you enjoy the

533
00:46:47,680 --> 00:46:54,259
presentation we have been asked a
question we have him challenge coin up

534
00:46:54,260 --> 00:46:59,930
here tend to use technology it's a
challenge coming and it's also by 11 and

535
00:46:59,930 --> 00:47:01,710
said get it before the Wassenaar takes
away

