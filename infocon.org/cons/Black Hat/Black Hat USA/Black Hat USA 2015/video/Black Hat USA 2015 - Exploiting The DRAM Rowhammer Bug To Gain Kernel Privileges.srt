1
00:00:00,000 --> 00:00:07,359
iPhone is a talk basically about it in
other words single bit errors in memory

2
00:00:07,359 --> 00:00:13,400
and it's about how to coach them and how
to explain them and specifically it's

3
00:00:13,400 --> 00:00:18,420
about exploiting bit flips caused by a
particular hardware known as the row

4
00:00:18,420 --> 00:00:24,010
have a park so this is a photo with many
DRAM modules manufactured from around

5
00:00:24,010 --> 00:00:29,449
2010 onwards and the bug is that
repeatedly leading from one page in

6
00:00:29,449 --> 00:00:34,570
memory can cause corruption and other
pages potentially those pages can be as

7
00:00:34,570 --> 00:00:40,250
bad a processes by the kernel to this
bag is dangerous because it these errors

8
00:00:40,250 --> 00:00:45,539
by memory protection and all of the
three largest TV manufacturers have

9
00:00:45,539 --> 00:00:49,840
shaved even with this forward so there's
a whole generation machines out there

10
00:00:49,840 --> 00:00:57,250
that are prone to this problem but this
this talk isn't just about one bug is

11
00:00:57,250 --> 00:01:03,670
also the connection between reliability
and security so in the past memory for

12
00:01:03,670 --> 00:01:07,740
example memory corruption bugs and
crashes are often treated as being just

13
00:01:07,740 --> 00:01:13,039
reliability issues but people started
coming up with increasingly clever ways

14
00:01:13,040 --> 00:01:18,080
to exploit those bugs in the software
industry has gradually been realizing

15
00:01:18,080 --> 00:01:23,840
that these bugs on just for liability
issues more dangerous than that so the

16
00:01:23,840 --> 00:01:27,520
software industry has been running this
lesson but I think a lot of the hardware

17
00:01:27,520 --> 00:01:34,350
industry hasn't caught up yeah based on
how they responded so I'm gonna talk a

18
00:01:34,350 --> 00:01:40,329
bit about how software can cause blips
and I'll talk about the two proof of

19
00:01:40,329 --> 00:01:45,070
concept privilege escalation explains
that I rose that can use these veterans

20
00:01:45,070 --> 00:01:50,970
to escalate privileges than talk about
medications and happy industry responded

21
00:01:50,970 --> 00:01:56,340
to the road and a lot of this was caught
was covered in the blog post that we

22
00:01:56,340 --> 00:02:00,689
publish on the Google protect their own
blog this year but I also talked about

23
00:02:00,689 --> 00:02:04,029
one more topic that would learn more
about since then which is about the

24
00:02:04,030 --> 00:02:06,120
possibility of doing right hammering

25
00:02:06,120 --> 00:02:13,590
JavaScript so a little bit about us so I
usually work on building some books is

26
00:02:13,590 --> 00:02:18,800
breaking them and I work in a few
different systems including some like

27
00:02:18,800 --> 00:02:25,640
some books is a native plants and blogs
and lately when I found bugs I try to

28
00:02:25,640 --> 00:02:30,989
exploit them and I found it to be quite
educational thing to do and that's

29
00:02:30,990 --> 00:02:36,360
that's kind of what I did hear why I've
also found that writing X place helps

30
00:02:36,360 --> 00:02:42,620
together people to take security
seriously so I really want this AM boxes

31
00:02:42,620 --> 00:02:44,300
like bill would too

32
00:02:44,300 --> 00:02:48,760
to work and actually be secure and
social life and I had to axe place for

33
00:02:48,760 --> 00:02:52,649
Rotherham in order to get people say
came less seriously and actually fix it

34
00:02:52,650 --> 00:03:00,320
tomorrow I'm going to be co-presented
here and enjoying a quotation for a long

35
00:03:00,320 --> 00:03:06,329
while and I really quite like to work on
tricky to exploit laws and this was a

36
00:03:06,330 --> 00:03:12,320
rather tricky to exploit one we
announced that we are going to talk a

37
00:03:12,320 --> 00:03:19,079
little bit body around us and how to
cause these to remember us and before we

38
00:03:19,080 --> 00:03:24,570
knew that we should have a look at pops
completely random but slips that I'm not

39
00:03:24,570 --> 00:03:28,590
induced by an attacker who just happen
randomly and there's a fairly

40
00:03:28,590 --> 00:03:32,959
interesting paper from 2003 where few
academic stripes to examine exactly the

41
00:03:32,959 --> 00:03:36,680
scenario what they did there is the hook
up a heating lamp to the remote machine

42
00:03:36,680 --> 00:03:43,830
in order to use heat and use it flips in
Tehran and then they showed how they can

43
00:03:43,830 --> 00:03:47,630
use this to break out of the drama
sandbox and the way they did this is the

44
00:03:47,630 --> 00:03:51,970
job application would fill all of the
memory of the job of them with

45
00:03:51,970 --> 00:03:55,330
references to objects when a bit would
flip and while these references the

46
00:03:55,330 --> 00:03:58,430
russians 1.2 different object of a
different type which was done violate

47
00:03:58,430 --> 00:04:03,180
the security assumptions of the job some
folks so it's not an entirely new thing

48
00:04:03,180 --> 00:04:05,980
to look at random bit flips

49
00:04:05,980 --> 00:04:10,040
exploitation has been something that has
been on my mind for long

50
00:04:10,040 --> 00:04:14,400
for a long while there was a paper in
2009 published by Google actually that

51
00:04:14,400 --> 00:04:19,228
examines the prevalence of truly random
but flips in the big service that Google

52
00:04:19,228 --> 00:04:20,139
has

53
00:04:20,139 --> 00:04:23,860
monitoring these things and was really
quite interesting 'cause you had

54
00:04:23,860 --> 00:04:29,610
quantitative numbers in terms of how
often does a bit just randomly indir and

55
00:04:29,610 --> 00:04:32,940
without any interaction and that leaves
tour of Philly interesting thought

56
00:04:32,940 --> 00:04:36,830
experiment because these days you can
buy it and impressions on these on

57
00:04:36,830 --> 00:04:40,740
impressions allow you to run JavaScript
and/or Flash inside of somebody else's

58
00:04:40,740 --> 00:04:44,199
computer so this leads to a fairly
obvious thought experiment in terms of

59
00:04:44,199 --> 00:04:51,830
well run a bit flips happened so often
and if I can exploit them to to gain

60
00:04:51,830 --> 00:04:55,979
privileges outside like from a
javascript some books or from a national

61
00:04:55,979 --> 00:05:00,889
box how many ad impressions the money to
buy before I would compromise the

62
00:05:00,889 --> 00:05:06,300
machine just randomly buying by Durham
slipping up its turns out that's not

63
00:05:06,300 --> 00:05:09,389
quite cost-effective yet it was an
interesting thing to have to look into

64
00:05:09,389 --> 00:05:16,940
in fact though the sort of memory ever
we're dealing with here is very very

65
00:05:16,940 --> 00:05:21,610
different from the truly random model is
the thing that makes the attack really

66
00:05:21,610 --> 00:05:25,760
quite remarkable is the fact that we're
not randomly flipping bits we're

67
00:05:25,760 --> 00:05:29,780
slipping one bits deterministically we
can choose the but yes I know that but

68
00:05:29,780 --> 00:05:33,590
it's fairly random but once we see that
but flip we can make it flip repeatedly

69
00:05:33,590 --> 00:05:34,739
and it is that

70
00:05:34,740 --> 00:05:42,990
repeatability off a bit flip it makes
the exploit so so reliable ok I'll talk

71
00:05:42,990 --> 00:05:48,310
about write him a specifically but first
I'll give an inch or how to do I'm work

72
00:05:48,310 --> 00:05:54,080
so I missed my memory of computer actual
dynamic RAM and a bank of the UN

73
00:05:54,080 --> 00:06:00,490
basically consists of a big array of
cells so those one bed I'm is quite high

74
00:06:00,490 --> 00:06:04,460
capacity and the reason for that is the
secretary for cell is very simple and

75
00:06:04,460 --> 00:06:09,419
compact so cell consists of basically
just a capacity and transistor and the

76
00:06:09,419 --> 00:06:14,030
presence or absence of charge in that
capacity indicates whether it's during a

77
00:06:14,030 --> 00:06:19,700
zero or one because this arrangement is
so simple cells can be accessed

78
00:06:19,700 --> 00:06:20,590
individually

79
00:06:20,590 --> 00:06:28,340
instead team is divided into rows so you
can only access when the time so if the

80
00:06:28,340 --> 00:06:32,810
system wants access a particular row has
to first tell the bank to activate that

81
00:06:32,810 --> 00:06:37,820
row now basically connects the supposed
cells to something called the robust and

82
00:06:37,820 --> 00:06:41,719
that drains this the charge from the
cells and in doing so copies the road

83
00:06:41,720 --> 00:06:45,690
later into the bank's robust and in the
system can read or write the contents

84
00:06:45,690 --> 00:06:52,450
and at the system access a different row
their first CD rom bank has to write the

85
00:06:52,450 --> 00:06:53,930
data that's in the rover

86
00:06:53,930 --> 00:06:58,210
back into it came from and that involves
getting charged back into the road self

87
00:06:58,210 --> 00:07:03,890
paced cleared en banc around has a
notion of a currently activated write

88
00:07:03,890 --> 00:07:09,669
and act like a cash to accessing the
current row is fast and accessing a

89
00:07:09,670 --> 00:07:15,070
different route is somewhat slow that's
basically how rose one and the other

90
00:07:15,070 --> 00:07:19,370
thing to note about the AM is that
because the cells are capacitors guys

91
00:07:19,370 --> 00:07:23,500
tend to leak out of them so they contest
their cells have to be periodically

92
00:07:23,500 --> 00:07:28,490
refreshed and that's why it's called a
democrat and refresh our row the same

93
00:07:28,490 --> 00:07:34,220
way taxes so the system rose read a row
row into the robust and then I sit back

94
00:07:34,220 --> 00:07:39,430
and the current standard is that a given
road should be refreshed at least every

95
00:07:39,430 --> 00:07:43,530
64 minutes seconds is about 16 times a
second

96
00:07:43,530 --> 00:07:47,479
so in other words I still has to hold
its contents or at least 64 minutes

97
00:07:47,480 --> 00:07:56,050
seconds but that's that's so how
different works but now talk about one

98
00:07:56,050 --> 00:08:00,920
way in which goes wrong so I explain
themselves have to hold their contents

99
00:08:00,920 --> 00:08:06,750
464 milliseconds but they are
manufacturers that is crying out by

100
00:08:06,750 --> 00:08:12,080
making dealing with the cells are always
hold their contents that long and the

101
00:08:12,080 --> 00:08:18,210
particular problem is that if you put in
the activate a row many many times and

102
00:08:18,210 --> 00:08:21,859
on some DRAM modules some of the cells
in neighboring

103
00:08:21,860 --> 00:08:26,870
those can do their values in a time
shorter than the 64 my second service

104
00:08:26,870 --> 00:08:31,090
response to keep them for and this is
known as the royal family problem

105
00:08:31,090 --> 00:08:38,140
because repeatedly activating a row is
referred to as hammering and the reason

106
00:08:38,140 --> 00:08:43,120
this happened is that over time do you
have manufacturers have been squeezing

107
00:08:43,120 --> 00:08:48,899
more and more cells onto it and they've
done that they put this house closer

108
00:08:48,899 --> 00:08:53,760
together and the result is that the
cells aren't as well isolated on each

109
00:08:53,760 --> 00:08:59,360
other they used to be so maybe child can
link between them already and as they

110
00:08:59,360 --> 00:09:04,910
still charge then more vulnerable to
being disturbed so I don't know the

111
00:09:04,910 --> 00:09:09,959
exact electrical explanation but the end
result is that these disturbances are

112
00:09:09,959 --> 00:09:18,290
observable observable from software and
software can cause them to and so

113
00:09:18,290 --> 00:09:23,750
basically this this problem tends to be
associated particularly bad cells and

114
00:09:23,750 --> 00:09:28,880
Andy RAM module and those tend to be
randomly distributed throughout my job

115
00:09:28,880 --> 00:09:34,560
and I love those bad cells were
consistently gets better as when the

116
00:09:34,560 --> 00:09:39,359
neighboring louisiana's they do tend to
have a preferred direction forfeiting so

117
00:09:39,360 --> 00:09:45,920
some bad cells were 10 to 15 10 2010
others from 120 that direction can

118
00:09:45,920 --> 00:09:51,069
change though across reboots because
many controllers tend to do this thing

119
00:09:51,070 --> 00:09:55,829
called data scrambling and the stage for
that scrambling is is change and reboot

120
00:09:55,829 --> 00:10:01,709
so this amount of this disproportion
about cells can vary quite a bit between

121
00:10:01,709 --> 00:10:08,589
modules so for example the percentage of
rows contain fat cells can vary from

122
00:10:08,589 --> 00:10:16,230
anything from 30% to 99.9% and also the
number of activations are you need to

123
00:10:16,230 --> 00:10:25,260
cause one of these errors can vary among
shirley was low as 98,000 row

124
00:10:25,260 --> 00:10:30,450
activations which was about 8 percent of
what ddr3 said that module

125
00:10:30,450 --> 00:10:38,720
was supposed to be able to take the main
reason we know about this so there was a

126
00:10:38,720 --> 00:10:45,200
paper published about it last year by a
group of CMU as entitlement cuts in

127
00:10:45,200 --> 00:10:50,140
memory with accessing them there are
actually three other papers published

128
00:10:50,140 --> 00:10:56,390
about it too but they weren't quite well
publicized and then I details and the

129
00:10:56,390 --> 00:11:01,620
city's any papers published in June last
year and I came across it later and

130
00:11:01,620 --> 00:11:07,660
September and the reason I mention this
is that it didn't take me very large

131
00:11:07,660 --> 00:11:12,980
actually to work out how to explain this
compared with how long the industry has

132
00:11:12,980 --> 00:11:18,360
known about this problem so about four
days after reading the paper I found I

133
00:11:18,360 --> 00:11:24,370
could repay the problem but I had and
then about four weeks after reading the

134
00:11:24,370 --> 00:11:31,380
paper and a call and explain a tackle
and working at about 12 exactly as I

135
00:11:31,380 --> 00:11:37,840
kinda like swype working so in contrast
that timeline the origins of the problem

136
00:11:37,840 --> 00:11:43,810
go back to about four years since the
earliest laptops and email that I know

137
00:11:43,810 --> 00:11:49,900
of bad the problem at home bout 2010 and
there's a paper and some patent

138
00:11:49,900 --> 00:11:55,870
applications about the problem from 2012
so the industry knew about this for a

139
00:11:55,870 --> 00:12:01,040
while generally keeping quiet quiet
about the problem until splashed made by

140
00:12:01,040 --> 00:12:03,610
this paper last summer

141
00:12:03,610 --> 00:12:10,790
ok so I talked about the basic program
and I now talk a bit about how you can

142
00:12:10,790 --> 00:12:16,110
cause I have learned from software and
that's one thing the CMU paper explained

143
00:12:16,110 --> 00:12:21,830
they had a fragment of Cody showed 83
software so that the basic the basic

144
00:12:21,830 --> 00:12:27,340
problem here is how can you cause
repeated activations and there are

145
00:12:27,340 --> 00:12:33,520
basically two requirements for that the
first one is do you have to call of

146
00:12:33,520 --> 00:12:39,050
to the underlying around so you can just
do you know more memory access is

147
00:12:39,050 --> 00:12:44,479
because to do the same memory location
bitterly opposed that war those will go

148
00:12:44,480 --> 00:12:52,510
so the cash to you have to find a way to
bypass the cash and an x86 machine the

149
00:12:52,510 --> 00:12:57,620
simplest way to do that is to use
selfish instruction which is like a

150
00:12:57,620 --> 00:13:03,850
shrine interesting Lee shellfish is an
unfinished construction so any process

151
00:13:03,850 --> 00:13:10,310
can user and actually can't be disabled
at least surprising because other

152
00:13:10,310 --> 00:13:15,260
architectures like the equivalent cash /
instruction is actually privilege

153
00:13:15,260 --> 00:13:23,170
however SEL slashed access to a single
address that by itself is not gonna do

154
00:13:23,170 --> 00:13:28,520
because those access to these will all
go to the same row so the second

155
00:13:28,520 --> 00:13:34,290
requirement is to do what you have to
take more than two addresses and links

156
00:13:34,290 --> 00:13:38,780
are at least two addresses in different
rows and access them alternately and now

157
00:13:38,780 --> 00:13:45,839
forces changes to the current row and
there is another requirement to so the

158
00:13:45,840 --> 00:13:51,930
Tudor City pic have to be in the same
bank so that's because the modules are

159
00:13:51,930 --> 00:13:58,959
divided into banks and each bank has its
own independent current low so if you

160
00:13:58,960 --> 00:14:04,940
want a pic to addresses in the same bank
then that would activate the the

161
00:14:04,940 --> 00:14:09,440
different the rose and those banks just
once and it wouldn't be causing repeated

162
00:14:09,440 --> 00:14:13,150
activations so

163
00:14:13,150 --> 00:14:19,130
this question how can we find a pair of
addresses that doom at two different

164
00:14:19,130 --> 00:14:25,360
rows back and initially that seems like
it'd be difficult for a normal process

165
00:14:25,360 --> 00:14:30,320
to do 'cause there's this two levels of
indirection they can weigh the process

166
00:14:30,320 --> 00:14:34,570
in which these dresses and those in that
to physical addresses by the OS right

167
00:14:34,570 --> 00:14:39,300
page tables and then the memory
controller maps those physical addresses

168
00:14:39,300 --> 00:14:46,079
two locations in the day on which
includes the bank and the run in the

169
00:14:46,080 --> 00:14:50,340
first parking is generated and the
second mapping isn't documented are you

170
00:14:50,340 --> 00:14:58,220
can you can search engine areas that can
be a bit complicated sometimes be inside

171
00:14:58,220 --> 00:15:03,320
that I had was actually needs to know
about this team at pains to doooo

172
00:15:03,320 --> 00:15:07,550
hammering from a normal process because
we can just pick a dress players

173
00:15:07,550 --> 00:15:12,150
randomly so typically the bank has
gradually price

174
00:15:12,150 --> 00:15:18,140
well something like eight or 16 so that
means we've got an 81 in eight or one in

175
00:15:18,140 --> 00:15:23,330
sixteen chance of getting to address is
the same bank and there's actually a

176
00:15:23,330 --> 00:15:28,730
pretty good chance because we can try
many address pass in turn as we search

177
00:15:28,730 --> 00:15:36,170
for that can cause a bit and there is
also the best is my drug test program

178
00:15:36,170 --> 00:15:42,459
which is on get tired and his repo'd
tips on quite a few different machines

179
00:15:42,460 --> 00:15:48,290
and so it's fairly simple allocate
gigabyte memory and and it tries to have

180
00:15:48,290 --> 00:15:54,189
that memory and it looked at it yet in
that memory and it's kind of risky to

181
00:15:54,190 --> 00:15:57,220
run in principle they could corrupt
other processes or it could cost the

182
00:15:57,220 --> 00:16:03,340
council although it doesn't often do
that in practice I think so we tested a

183
00:16:03,340 --> 00:16:07,480
selection of laptops for this first and
we got there that's in about half of

184
00:16:07,480 --> 00:16:11,240
them although that proportion is a
necessary very meaningful because of

185
00:16:11,240 --> 00:16:18,280
selection bias in the sample be tested
and the results on a blog post and also

186
00:16:18,280 --> 00:16:21,800
this test hasn't been fined June

187
00:16:21,800 --> 00:16:29,050
so there are cases where system could be
vulnerable and it has spawned attack

188
00:16:29,050 --> 00:16:35,979
that so there there are a number of
refinements you can do to the basic

189
00:16:35,980 --> 00:16:39,410
programming testing and I think one of
the important requirements we want to

190
00:16:39,410 --> 00:16:44,469
talk about here something that we called
double sided hammering and talking

191
00:16:44,470 --> 00:16:49,450
started with patient zero the first lap
top that mark reproduce the best looks

192
00:16:49,450 --> 00:16:54,550
on and we were lucky in the sense that
that laptop was really bad in terms of

193
00:16:54,550 --> 00:16:58,620
RAM and because it was so bad because
most data from the laptop then allowed

194
00:16:58,620 --> 00:17:02,700
us to refine our approach to him right
now cause normally when you have a

195
00:17:02,700 --> 00:17:07,100
laptop you make it one bit flip every
like any given time frame

196
00:17:07,099 --> 00:17:11,000
very frustrating to draw inferences I'm
experiments when the laptop doesn't

197
00:17:11,000 --> 00:17:16,869
consistently flip it's a troubling sign
you are lucky to have flippy flippy the

198
00:17:16,869 --> 00:17:22,609
laptop is still only bad and when I say
still on the ballot is now that we know

199
00:17:22,609 --> 00:17:26,540
how to how much sleepy we can cause
fifty bits to flip and more in an area

200
00:17:26,540 --> 00:17:31,710
of eight kilobytes so that's a little
bit splitting and other nice thing

201
00:17:31,710 --> 00:17:36,820
really is the flippy being so prone to
to causing having but Phillips was great

202
00:17:36,820 --> 00:17:40,720
for the research that we did what we did
is we run this road Manchester couple

203
00:17:40,720 --> 00:17:44,960
days and Roman chestno was searching for
physical addresses trying to find out

204
00:17:44,960 --> 00:17:49,370
the source that will cause but Phillips
when how much and after we had run it

205
00:17:49,370 --> 00:17:53,229
for a couple days which will call these
addresses that we had seen caused floods

206
00:17:53,230 --> 00:17:56,710
and then we have them again this time
not run the most but seriously just

207
00:17:56,710 --> 00:18:03,100
these addresses we collect the data from
its and then start looking at it and we

208
00:18:03,100 --> 00:18:07,159
ended up with this interesting plots
where the x-axis is number of bits that

209
00:18:07,160 --> 00:18:10,669
ended up flipping when we have to
understand and then on the y axis you

210
00:18:10,669 --> 00:18:15,910
see them over to the Delta between the
benefits of curd and the others

211
00:18:15,910 --> 00:18:19,510
especially how much and you see on the
far left side when you have one or two

212
00:18:19,510 --> 00:18:24,179
but flips the the dough to where you
have pretty much all over the place

213
00:18:24,179 --> 00:18:29,160
there's a little variation that but to
the right hand side you see fairly

214
00:18:29,160 --> 00:18:32,590
consistently this is just an explosive
ICC

215
00:18:32,590 --> 00:18:37,500
hammering a blue triangle means this is
above one of us is that we are targeting

216
00:18:37,500 --> 00:18:42,650
red triangle is the other targets were
hammering and what we saw a very quickly

217
00:18:42,650 --> 00:18:47,140
is that any time we got two more than a
few but flips like many but flips

218
00:18:47,140 --> 00:18:52,870
twenty-plus and so forth we had fixed
distance that we are hammering from the

219
00:18:52,870 --> 00:18:55,080
target area with a curling

220
00:18:55,080 --> 00:19:00,820
roughly 256 K above and below meaning
that's well if you picture us correctly

221
00:19:00,820 --> 00:19:06,389
then all of a sudden on top of the same
model would be much better at hammering

222
00:19:06,390 --> 00:19:11,149
and we we thought about what's going on
here then we understood what was

223
00:19:11,149 --> 00:19:14,580
happening and what's happening as the
following on the left-hand side here you

224
00:19:14,580 --> 00:19:18,750
see a diagram that explains to you or
that the Straits what happens when you

225
00:19:18,750 --> 00:19:22,480
have so on the left hand side when
activating two roads that are quite far

226
00:19:22,480 --> 00:19:26,649
from each other and every time you
talked about one of those inferences its

227
00:19:26,649 --> 00:19:31,178
neighboring rose somehow that to make
them more prone to bed flipping on this

228
00:19:31,179 --> 00:19:34,070
list ready by of them being an orange
but now on the right hand side with

229
00:19:34,070 --> 00:19:38,220
picking through rows in a way that is
exactly one row in the middle which

230
00:19:38,220 --> 00:19:41,640
means the middle road will get hit on
every activation not only on one

231
00:19:41,640 --> 00:19:46,710
activation every time and this morning
from to size up one's turned a lot of

232
00:19:46,710 --> 00:19:50,110
machines that we previously thought
we're not gonna double into wonderful so

233
00:19:50,110 --> 00:19:53,850
my work laptop at the time when I was
writing the code that I was running on

234
00:19:53,850 --> 00:19:59,879
440 billion not honorable and then I
wrote the code and accidentally at one

235
00:19:59,880 --> 00:20:03,679
point launched on my laptop laptop
instead of empathy and all of a sudden

236
00:20:03,679 --> 00:20:07,690
start producing but first there so that
was a big realization false that's if

237
00:20:07,690 --> 00:20:12,470
you figure out how to to hammer for a
particular laptop model you get much

238
00:20:12,470 --> 00:20:16,730
better and hammering for that model the
difficulty though is that you need to

239
00:20:16,730 --> 00:20:21,020
pick aggressive roads that are exactly
two apart and because the mapping

240
00:20:21,020 --> 00:20:23,080
between virtual memory and physical
memory

241
00:20:23,080 --> 00:20:29,460
and then nothing between physical
addresses and the actual banks is

242
00:20:29,460 --> 00:20:36,299
different between different laptops that
means that you really do you really want

243
00:20:36,299 --> 00:20:39,440
to be effective at hammering a
particular that took you probably want

244
00:20:39,440 --> 00:20:43,190
other experiments on the laptop of the
same type just to make sure that you're

245
00:20:43,190 --> 00:20:49,360
taking the rides distance between us and
we were lucky in the sense that we had a

246
00:20:49,360 --> 00:20:53,080
very vulnerable laptop to provide us
with enough data that we could infer the

247
00:20:53,080 --> 00:20:56,668
proper distances and then use those
proper distance as to how other laptops

248
00:20:56,669 --> 00:20:59,480
which then turned out to be vulnerable
but we thought were not gonna literally

249
00:20:59,480 --> 00:21:04,159
and it's almost a pattern that occurred
during this this research that the

250
00:21:04,159 --> 00:21:13,490
hammering better over time as we figured
out more about it right in fact or in in

251
00:21:13,490 --> 00:21:17,029
practice there's there's of course the
problem that you need to a thing called

252
00:21:17,029 --> 00:21:20,130
something for the particular laptop
model and then you also need to be able

253
00:21:20,130 --> 00:21:25,260
to go from virtual memory to of at least
physical memory relative addressing

254
00:21:25,260 --> 00:21:29,350
meaning you need to be able to pick to
physical addresses that are particularly

255
00:21:29,350 --> 00:21:34,029
distance apart and under Linux this
fairly easy to provide you are used to

256
00:21:34,029 --> 00:21:38,789
provide you with a trap which tells your
virtual to physical mapping doesn't

257
00:21:38,789 --> 00:21:44,510
anymore I think but long story short if
you don't have the ability to address

258
00:21:44,510 --> 00:21:49,029
physical memory in that sense the run to
my stammering approach of the Rachel Roy

259
00:21:49,029 --> 00:21:57,340
contest may be more more appropriate at
the cost of causing a bit flips

260
00:21:57,340 --> 00:22:01,870
ok so we we talked about how he can
cause but for now I'm going to talk

261
00:22:01,870 --> 00:22:09,250
about how you can explain it out so we
will pose the question that how you

262
00:22:09,250 --> 00:22:14,640
would explain a bit about a completely
random place in physical memory and

263
00:22:14,640 --> 00:22:21,110
generic strategy you could use that and
the JVM explains how mentioned here is

264
00:22:21,110 --> 00:22:25,889
an example that strategy so firstly we
would want to find a data structure to

265
00:22:25,890 --> 00:22:31,490
attack and that should be one where I
think about era and a random location

266
00:22:31,490 --> 00:22:36,310
has a good chance of increasing
opportunities and then we would try and

267
00:22:36,310 --> 00:22:41,350
fill as much money as possible without
data structure and then trying cause but

268
00:22:41,350 --> 00:22:47,419
let's wait for them and then somehow we
need to figure out whether useful better

269
00:22:47,420 --> 00:22:53,160
has occurred and then if it did try make
use of it so I basically built to

270
00:22:53,160 --> 00:23:01,360
escalation exploits and they both use
generic strategy so the first one

271
00:23:01,360 --> 00:23:06,379
escapes from the native client some
books so natural so in a decline as an

272
00:23:06,380 --> 00:23:11,050
in-process and books this using the
Chrome Web browser and breaking out some

273
00:23:11,050 --> 00:23:17,040
books means an attack on line arbitrary
code inside the host process and the

274
00:23:17,040 --> 00:23:22,050
second X place is a root exploit which
starts out wanting a normal process on

275
00:23:22,050 --> 00:23:27,090
Linux can break out of that process and
getting unemployment is in control of

276
00:23:27,090 --> 00:23:33,590
the whole machine in principle those to
exploit could be chained together we

277
00:23:33,590 --> 00:23:37,679
tried that so you could start tougher
than that eliminated by application

278
00:23:37,680 --> 00:23:42,620
running in chrome and it could escalate
to gain control over the whole machine

279
00:23:42,620 --> 00:23:47,040
and interesting using the same
underlying hardware bout for both of

280
00:23:47,040 --> 00:23:50,580
those X-ray steps so I think that's
that's significant because it is

281
00:23:50,580 --> 00:23:55,299
significant because it shows that these
bit flip side exploitable

282
00:23:55,299 --> 00:24:00,350
and multiple contacts so he checks play
is not a one off so even if the system

283
00:24:00,350 --> 00:24:05,759
users multiple their security it's
possible that multiple layers can be

284
00:24:05,759 --> 00:24:12,809
vulnerable to Roma so I talk about the
native client exploit first so I native

285
00:24:12,809 --> 00:24:18,119
pride is known as nickel shoulders and
his ex-wife like working first as it was

286
00:24:18,119 --> 00:24:24,340
easy I want to do and the polls I'm more
familiar with natural so they scare some

287
00:24:24,340 --> 00:24:30,549
boxing system running native code such
as C and C++ programs and it's used in

288
00:24:30,549 --> 00:24:36,539
crime and crime allows one variant and a
coke or portable native client to be

289
00:24:36,539 --> 00:24:41,549
used by any web page though I should
point out that my exploit any targets

290
00:24:41,549 --> 00:24:48,879
addition parrot and a clock that's only
usable by at in Chrome Web Store and is

291
00:24:48,879 --> 00:24:55,519
basically to make C and C++ C and C++
code as safe as JavaScript and its kinda

292
00:24:55,519 --> 00:25:01,230
similar in that respect to ASM but yes
and like I asked him to digest its an

293
00:25:01,230 --> 00:25:07,470
employee so some books so its memory
memory access to the program inside that

294
00:25:07,470 --> 00:25:13,179
some books limited to a range of the
processes address space so he had a

295
00:25:13,179 --> 00:25:18,230
sandbox like that there's a generic
strategy that you can use for escaping

296
00:25:18,230 --> 00:25:24,440
in process and box so firstly you were
trying to get your shellcode your tax

297
00:25:24,440 --> 00:25:30,379
goes much as executable and that's
actually fairly easy and in the second

298
00:25:30,379 --> 00:25:34,949
the second step will be to try and
caused a jump to that show code and

299
00:25:34,950 --> 00:25:42,190
that's the main challenge in this case
the way we got the shellcode marks

300
00:25:42,190 --> 00:25:43,320
executable

301
00:25:43,320 --> 00:25:48,019
actually kinda similar to how it's
playing techniques I use for exploiting

302
00:25:48,019 --> 00:25:54,749
JavaScript Jets basically we had hired
the code inside the x86 instructions and

303
00:25:54,749 --> 00:26:00,669
that's kind of easy to do a natural
because that allows loading any chance

304
00:26:00,669 --> 00:26:01,980
x86

305
00:26:01,980 --> 00:26:08,030
road as long as it passes by that 800
the validated is this thing that checks

306
00:26:08,030 --> 00:26:13,030
that code uses as a starter x86
instructions and that the coach purses

307
00:26:13,030 --> 00:26:18,129
and other safety features and that'll
safety basically works by ensuring you

308
00:26:18,130 --> 00:26:23,750
can only do indirect charms to 32 byte
aligned addresses and I can make sure

309
00:26:23,750 --> 00:26:27,580
those addresses only contain
instructions but if you can find a way

310
00:26:27,580 --> 00:26:33,580
to jump to a non 32 byline address you
can escape the sandbox because you can't

311
00:26:33,580 --> 00:26:37,449
hide other instructions at those
addresses like an example in the slide

312
00:26:37,450 --> 00:26:42,179
you can hide and unsafe Cisco
construction inside a safe mode adds

313
00:26:42,179 --> 00:26:49,600
instruction so you may not go in for his
estate property by saying indirect rooms

314
00:26:49,600 --> 00:26:54,719
can only use can only be done by this
instruction sequence shown in the slide

315
00:26:54,720 --> 00:27:03,230
which destination to be aligned with the
coast Nicholas James after exploded in

316
00:27:03,230 --> 00:27:09,960
violated this code it doesn't change if
but if we got row hammer bits inside

317
00:27:09,960 --> 00:27:15,220
this code and it can easily come on say
it so that's basically the approach I

318
00:27:15,220 --> 00:27:20,350
use and sex place we will load many
copies of this code into memory and then

319
00:27:20,350 --> 00:27:24,659
we try and cause bit threats and the
code and I explained can actually use

320
00:27:24,660 --> 00:27:30,130
actually exploits that place in any of
the register numbers in this code

321
00:27:30,130 --> 00:27:37,660
fragment and then many would use those
to jump to the NHL code if he explains

322
00:27:37,660 --> 00:27:43,270
a bit flip and another part of the code
that's not my number when you actually

323
00:27:43,270 --> 00:27:48,480
can you can't explain those but it's not
gonna crash or just detect that and

324
00:27:48,480 --> 00:27:53,149
carry on and to find another Metro so
it's fairly low risk strategy

325
00:27:53,149 --> 00:27:57,689
and actually get tested the exploit to
make sure that handles a possible that

326
00:27:57,690 --> 00:28:03,239
fits correctly so this means that about
13 percent of the possible veterans and

327
00:28:03,239 --> 00:28:09,399
co sequence are exploitable by my
concept code those a Quaker dogs because

328
00:28:09,399 --> 00:28:19,908
we can keep trying to get one that is
exploitable two aspects of course I'm

329
00:28:19,909 --> 00:28:24,549
books that make this attack of the
easier so that allows dynamic loading up

330
00:28:24,549 --> 00:28:29,700
code so we can learn lots of copies of
this at this sequence and also natural

331
00:28:29,700 --> 00:28:33,869
more potent in a call and I was a
program to read a time code segment so

332
00:28:33,869 --> 00:28:38,908
we can read that code segment to see if
we've got any tips to the code and

333
00:28:38,909 --> 00:28:45,739
that's in contrast to JavaScript GM's
where to put the code is here I think if

334
00:28:45,739 --> 00:28:49,940
knucklehead the codes it would make
exploitation harder by think you'll

335
00:28:49,940 --> 00:29:01,649
still be possible he could probably
figure out a way to do it we can also

336
00:29:01,649 --> 00:29:09,549
access to it does been known to the next
time which although not collect

337
00:29:09,549 --> 00:29:19,168
can can enforce any subset instructions
used that subset did include else I

338
00:29:19,169 --> 00:29:22,700
think the reason it was allowed with
because someone was asking the question

339
00:29:22,700 --> 00:29:25,479
is there any reason they shouldn't be
disallowed and according to experts

340
00:29:25,479 --> 00:29:32,889
expect it safe but until she asked the
right questions are asked because it

341
00:29:32,889 --> 00:29:39,488
wasn't any good reasons behind it and
we've we also since changed validated to

342
00:29:39,489 --> 00:29:43,420
disallow CEO /

343
00:29:43,420 --> 00:29:50,230
ok so I describe how awesome box when
she done that what can you do while

344
00:29:50,230 --> 00:29:55,170
there's an awful lot you can do it was
still inside a process that will sign

345
00:29:55,170 --> 00:29:59,120
books at space tricks and went inside
evander process you can steal cookies

346
00:29:59,120 --> 00:30:04,729
but we could try escaping from the
process of the same books too and that's

347
00:30:04,730 --> 00:30:16,270
what the next takes place twice due to
escaping from a natural process that can

348
00:30:16,270 --> 00:30:20,950
explain now and this case the data
structure that we attack is page tables

349
00:30:20,950 --> 00:30:27,540
so just a little bit of background about
pay Sables computer science recap so

350
00:30:27,540 --> 00:30:31,639
that the data structure of the hard way
is a mapping of processes virtually

351
00:30:31,640 --> 00:30:37,340
dresses to the Hyatt to the machines
physical addresses and they set up by

352
00:30:37,340 --> 00:30:42,110
the car so for example if you take a two
page of memory using a mouse in the

353
00:30:42,110 --> 00:30:46,479
kinda like a statistical page and also
set up a page table two points that

354
00:30:46,480 --> 00:30:53,080
physical page now has also tend to have
features for shared-memory that as much

355
00:30:53,080 --> 00:30:54,490
the same page

356
00:30:54,490 --> 00:30:59,930
multiple times so if we do that we
create shared memory segment and a map

357
00:30:59,930 --> 00:31:04,200
it multiple times and we cannot see page
tables pointing to the same physical

358
00:31:04,200 --> 00:31:10,020
pages and suppose we create a teenager
by a second a shared memory and a map it

359
00:31:10,020 --> 00:31:16,670
10,000 times each mapping is going to
result in creating 14 Cape a stable so

360
00:31:16,670 --> 00:31:21,940
we would get about 40 we will get a
table was paying forty megabytes of

361
00:31:21,940 --> 00:31:28,400
physical memory and if we scale and we
can actually use this to fill most of

362
00:31:28,400 --> 00:31:33,310
physical memory page tables and actually
like let's do this because it doesn't

363
00:31:33,310 --> 00:31:34,870
have any bound on them

364
00:31:34,870 --> 00:31:39,559
page tables but you can create it does
kind of bound on the number of mappings

365
00:31:39,559 --> 00:31:43,690
oppose this can create about actually
not a problem for us because we can just

366
00:31:43,690 --> 00:31:50,320
make things because still felt as if
they say was so once we done that what

367
00:31:50,320 --> 00:31:57,300
happens if we got around and single bit
era some land mines pace able as well if

368
00:31:57,300 --> 00:32:02,480
we're lucky that it would change the
physical patient a page number and a

369
00:32:02,480 --> 00:32:07,870
page David entry so now points to a
different physical page and since we

370
00:32:07,870 --> 00:32:13,270
filled most of physical memory would pay
Stables is quite likely that the you

371
00:32:13,270 --> 00:32:17,429
physical page number is going to be one
of the page table as it describes a

372
00:32:17,429 --> 00:32:24,330
process address space so that happens we
just broken the safety of system we got

373
00:32:24,330 --> 00:32:27,840
access to a physical page that we
weren't supposed to have access to

374
00:32:27,840 --> 00:32:34,159
particular one of our inpatient and if
that happens then we can modify that

375
00:32:34,160 --> 00:32:38,850
patient able to point any physical
address that we like to mean for now I

376
00:32:38,850 --> 00:32:44,559
have read like access to all physical
memory and we have to work out which

377
00:32:44,559 --> 00:32:50,990
address the page table is corresponds to
buy that actually fairly straightforward

378
00:32:50,990 --> 00:32:57,080
because we can address space to find it
we'll just have to scan to find a page

379
00:32:57,080 --> 00:33:02,980
and now points to something that wasn't
the shared-memory suddenly maps so we

380
00:33:02,980 --> 00:33:09,220
can't unlike that collects place we can
look at the bit to directly because we

381
00:33:09,220 --> 00:33:15,480
can't be that they say was directing we
can better assist and so once we have

382
00:33:15,480 --> 00:33:19,950
access to a physical memory it's
actually the there's a lot of options

383
00:33:19,950 --> 00:33:28,710
for how you would use that practical X
plate so in my first concert can liner

384
00:33:28,710 --> 00:33:33,420
commanders route so the way I did that
was to find a physical the physical page

385
00:33:33,420 --> 00:33:38,290
number of some code that belongs to stay
young lady executable then we can

386
00:33:38,290 --> 00:33:42,409
overwrite over right that code and then
run the executable

387
00:33:42,410 --> 00:33:47,280
potentially we could do other things
like what I find the Colonels code or we

388
00:33:47,280 --> 00:33:54,040
could search your memory to find some
other interesting pages to modify it so

389
00:33:54,040 --> 00:34:01,270
I said that if we're lucky we change the
page number in the face a venturi

390
00:34:01,270 --> 00:34:05,580
actually we don't need to be slaves
randomness here we can actually make our

391
00:34:05,580 --> 00:34:11,850
own like the idea is that we can take
advantage of the fact that I'ma bit fix

392
00:34:11,850 --> 00:34:19,730
often repeatable so we can find a victim
page that's got a bad memory cell at a

393
00:34:19,730 --> 00:34:26,010
knife set this useful to us and then we
can dedicate a page with Mr man and then

394
00:34:26,010 --> 00:34:31,830
back to the kernel while keeping our
aggressive pages map allocated in the

395
00:34:31,830 --> 00:34:37,159
kernel to use our pages of page table
and then closed at memory self-defense

396
00:34:37,159 --> 00:34:43,350
again this is kind of similar to how you
might exploit you start to Freiburg

397
00:34:43,350 --> 00:34:48,870
basically we can make a modification to
a page even though the kernel things we

398
00:34:48,870 --> 00:34:53,989
haven't got access that page and we can
also check in advance that the biggest

399
00:34:53,989 --> 00:34:59,629
benefit is going to be one this useful
to explain to Ike's place so we know

400
00:34:59,630 --> 00:35:05,390
what the format of patience for this we
can check that the bit is going to hit a

401
00:35:05,390 --> 00:35:06,680
bit

402
00:35:06,680 --> 00:35:11,009
in the physical page numbers can be
useful so we don't want to hit one of

403
00:35:11,010 --> 00:35:15,970
the high bits because words get a
physical page number that happen range

404
00:35:15,970 --> 00:35:20,950
and that might cause a kernel panic we
were basically so on a fog machine for

405
00:35:20,950 --> 00:35:26,020
example we do want to make sure before
the curtain on the bottom 20 this page

406
00:35:26,020 --> 00:35:36,980
number so this means that about 20 of 64
possible steps which is pretty good so

407
00:35:36,980 --> 00:35:48,000
that's like a a third so that's a
speedup exploit as we know in advance

408
00:35:48,000 --> 00:35:51,890
which is the entries in a patient was
gonna change so when we're spraying

409
00:35:51,890 --> 00:35:56,430
physical memory page tables we don't
have to get all of the entries and it

410
00:35:56,430 --> 00:36:00,649
pays table populated only have to go one
of the five hundred and twelve inches

411
00:36:00,650 --> 00:36:05,300
populated and that just begun spraying
pay process a lot and the result is we

412
00:36:05,300 --> 00:36:12,390
can Spain memory and about monkeys
gigabyte second and was wondering if I

413
00:36:12,390 --> 00:36:17,060
should mention so when allocating the
shared memory segment but we repeated

414
00:36:17,060 --> 00:36:22,790
the line extends does tend to allocate
back continuously and we need to avoid

415
00:36:22,790 --> 00:36:27,820
that otherwise if a bit flips and one of
the low numbers at the physical physical

416
00:36:27,820 --> 00:36:33,820
pages is probably still going to point
into the same shared memory segment so I

417
00:36:33,820 --> 00:36:39,260
came up with a simple way to deal with
that we just to force physical memory to

418
00:36:39,260 --> 00:36:44,490
be fragmented by allocating a lot of
memory and then by dedicating one page

419
00:36:44,490 --> 00:36:49,089
at a time in a random order

420
00:36:49,090 --> 00:36:55,830
so that's basically they're kind of
explains our talk about it about

421
00:36:55,830 --> 00:36:57,819
medications now

422
00:36:57,820 --> 00:37:05,850
problem they're basically three
medications there's a sec but you

423
00:37:05,850 --> 00:37:10,520
probably heard of that is to target
drone refresh which you probably haven't

424
00:37:10,520 --> 00:37:15,300
heard of and doubling the refresh rate
which is fairly self explanatory

425
00:37:15,300 --> 00:37:22,040
so so the first mitigation is to use ECC
memory CCC is a pretty good mitigation

426
00:37:22,040 --> 00:37:28,420
and most service to use it though and
that machines like laptops don't tend to

427
00:37:28,420 --> 00:37:34,040
have it so easy seek incorrect some
errors but not all of them usually

428
00:37:34,040 --> 00:37:39,860
depends on how many better as you go
right over 60 forward so he got one

429
00:37:39,860 --> 00:37:46,050
error ECC can correct that if you get to
BCC can detect it but it can't correct

430
00:37:46,050 --> 00:37:51,660
and that usually leads to a reboot but
if you get three errors CCC can even

431
00:37:51,660 --> 00:37:57,830
detect I know there will be visible to
software so a number of areas is done

432
00:37:57,830 --> 00:38:03,319
you can depend on how bad daddy matters
if you've got really bad you could get

433
00:38:03,320 --> 00:38:08,360
three ventura but I think it's more
likely that an attacker would cause I T

434
00:38:08,360 --> 00:38:14,880
Viera first and trigger a reboot reboot
before this would be exploitable so

435
00:38:14,880 --> 00:38:18,810
basically see reduces the problem to
being a service problem rather than

436
00:38:18,810 --> 00:38:25,340
private escalation problem so that is
better but it's not ideal but he says he

437
00:38:25,340 --> 00:38:29,930
doesn't really deal with the root of the
problem is it's not really well suited

438
00:38:29,930 --> 00:38:38,609
to deal with systematic errors so the
second mitigation is called target

439
00:38:38,610 --> 00:38:46,430
refresh and this is this is considered
does it require hardware changes does

440
00:38:46,430 --> 00:38:51,040
kind of get to the root of the problem
more

441
00:38:51,040 --> 00:38:57,759
the idea behind target growing fresh is
to count the number of times each row is

442
00:38:57,760 --> 00:39:03,310
activated and if the count for a row
which is a particular threshold then the

443
00:39:03,310 --> 00:39:07,850
system would refresh the Rose
neighboring rose and there's two levels

444
00:39:07,850 --> 00:39:12,140
I would you could implement that he
could implement in the CPU memory

445
00:39:12,140 --> 00:39:18,540
controller or you could implement and
around itself and it appears that

446
00:39:18,540 --> 00:39:24,770
vendors are using both approaches so
when do I makers data she's indicated

447
00:39:24,770 --> 00:39:44,850
they are implementing Dr and then you
did Dr for ear which CPU temperament

448
00:39:44,850 --> 00:39:51,290
that so there is one PDF of an entire
presentation from a conference that says

449
00:39:51,290 --> 00:39:57,050
that some Xeon CPU support something
called COTR I have not found any more

450
00:39:57,050 --> 00:40:03,600
public documentation about that okay so
that's that's tower and if it does

451
00:40:03,600 --> 00:40:09,020
require you are away so is anything we
can do to mitigate Mahama on existing

452
00:40:09,020 --> 00:40:16,460
machines so there is one existing
litigation and that's to increase the

453
00:40:16,460 --> 00:40:20,110
memory refresh rate and that's it then
indication and you can do that with the

454
00:40:20,110 --> 00:40:25,490
BIOS update and some vendors have been
doing that they usually do with the

455
00:40:25,490 --> 00:40:29,910
refresh rate so basically I need to have
as many activations as they could before

456
00:40:29,910 --> 00:40:35,810
between refreshes there is a question
about whether that's enough though the

457
00:40:35,810 --> 00:40:41,880
CMU paper shows even when you're doing
one-sided hammering aw isn't always

458
00:40:41,880 --> 00:40:45,630
enough to eliminate all the errands so
maybe I'm technologies have to take

459
00:40:45,630 --> 00:40:57,490
longer before they can trigger out and
this doesn't even take a counter to side

460
00:40:57,490 --> 00:41:03,520
so medications i think is going to
become more interesting to see whether

461
00:41:03,520 --> 00:41:08,540
they're getting a place because it's
becoming more apparent as possible to do

462
00:41:08,540 --> 00:41:13,940
JavaScript which is the next section
last talked about so if anything like

463
00:41:13,940 --> 00:41:17,960
this would be difficult to do because
you can't UCL flash JavaScript

464
00:41:17,960 --> 00:41:24,670
telescoping many do no more cache memory
accesses to you would need to find a

465
00:41:24,670 --> 00:41:30,150
pattern of accesses that can generate a
high rate of cache misses and initially

466
00:41:30,150 --> 00:41:32,850
as things like you would have to figure
out how to get cash missus all of the

467
00:41:32,850 --> 00:41:38,790
cash levels salman al 2003 however it
turns out that easier

468
00:41:38,790 --> 00:41:45,009
initially seems because on content LCD
is addicting a cache line from the

469
00:41:45,010 --> 00:41:57,610
outreach cash or 30 2012 so we all went
out to cash used I actually matter so if

470
00:41:57,610 --> 00:42:02,400
you want to get a whole three caches the
trick will be to find many addresses the

471
00:42:02,400 --> 00:42:08,800
matter the same cache set so for example
a typical system I have a 12 way set

472
00:42:08,800 --> 00:42:14,670
associative cache if you can find
thirteen addresses map cache says that

473
00:42:14,670 --> 00:42:19,859
accessing them are generated at least
one kashmiris and it turns out there's

474
00:42:19,859 --> 00:42:24,380
already an algorithm for finding
addresses that have a property and it

475
00:42:24,380 --> 00:42:31,359
already works and JavaScript and works
by timing memory accesses this plant and

476
00:42:31,359 --> 00:42:36,420
marks so that gives us a way to earn a
cache misses the next question is

477
00:42:36,420 --> 00:42:41,580
whether we can generate cash missus that
are optimal for honoring so ideally

478
00:42:41,580 --> 00:42:46,460
would use the word want to cut the Mrs
to be for just two addresses in the last

479
00:42:46,460 --> 00:42:48,030
two weeks

480
00:42:48,030 --> 00:42:54,090
a group has from Austrian fans have
published a draft paper about this and

481
00:42:54,090 --> 00:42:58,920
they are finding the right ordering a
memory accesses and even much

482
00:42:58,920 --> 00:43:04,049
new CPUs like has a lot of cash
injection is quite cash injection

483
00:43:04,049 --> 00:43:10,750
policies quite complex and it can
generate an optimal set of cache misses

484
00:43:10,750 --> 00:43:18,490
the remaining saying don't be
interesting to see is also calls for it

485
00:43:18,490 --> 00:43:22,609
so I'm devices which I don't think
anyone has really tried hard to do yet

486
00:43:22,609 --> 00:43:29,710
given that the average quality of the
RAM and super cell phone just likely to

487
00:43:29,710 --> 00:43:38,160
be worse than the tops of that may be
interesting so that's that's the

488
00:43:38,160 --> 00:43:45,250
JavaScript side of things so I think
there are software bugs to conclude

489
00:43:45,250 --> 00:43:51,160
there are some suffer bugs and easier to
explain but as social level some boxes

490
00:43:51,160 --> 00:43:57,058
are getting better I think it might be
the case that attackers turned

491
00:43:57,059 --> 00:44:03,240
exploiting to explain more research area
parks like and we have seen multiple

492
00:44:03,240 --> 00:44:09,979
times that row hammer can actually be
easier to explain initially scenes so

493
00:44:09,980 --> 00:44:14,530
became how we pick addresses one example
that Android coming from drivers but was

494
00:44:14,530 --> 00:44:19,730
another example fast and this is kind of
unusual for being a hardware vote so

495
00:44:19,730 --> 00:44:25,410
normally the hardware can hide physical
issues I'm like charged eating but

496
00:44:25,410 --> 00:44:30,180
occasionally hardware manufacturers to
screw up and they push things too far so

497
00:44:30,180 --> 00:44:32,669
maybe we will say issues like this again

498
00:44:32,670 --> 00:44:37,619
future and in general it's it's quite
difficult to verify that the hardware

499
00:44:37,619 --> 00:44:42,440
does what it's supposed to do and then
does haven't been terribly open about

500
00:44:42,440 --> 00:44:47,210
in particular I would like to see me as
being more open and

501
00:44:47,210 --> 00:44:51,640
and darker security mindset thinking
about these issues that appear to be

502
00:44:51,640 --> 00:44:56,740
just reliability issues because we've
shown that they can actually break most

503
00:44:56,740 --> 00:45:05,299
poor last security so nice to see more
information about this we have some test

504
00:45:05,300 --> 00:45:11,589
code on line get her and making this for
discussing the problem and exploits for

505
00:45:11,589 --> 00:45:16,150
it and you can also see there to protect
their approach to be posted any

506
00:45:16,150 --> 00:45:33,770
questions

507
00:45:33,770 --> 00:45:44,450
so the first question is whether it
would be possible to export from

508
00:45:44,450 --> 00:45:50,980
JavaScript welcome to the hypervisor at
least in theory there is nothing that

509
00:45:50,980 --> 00:45:55,160
would stop him from being useful for the
visor but the same principle should

510
00:45:55,160 --> 00:45:59,620
apply that we mentioned earlier we would
need to be able to pack memory full of a

511
00:45:59,620 --> 00:46:05,609
data structure them when it flips so
what some would depend on what data

512
00:46:05,610 --> 00:46:09,750
structures the hypervisor laws the
virtualized environments to allocate and

513
00:46:09,750 --> 00:46:14,090
we haven't looked into that as to the
second question causing the kernel

514
00:46:14,090 --> 00:46:19,390
exploit from JavaScript I think it may
be easier for the attacker to first

515
00:46:19,390 --> 00:46:26,400
cause regular code execution it was in
that process from JavaScript by the just

516
00:46:26,400 --> 00:46:30,620
committed these days so it's quite
possible that the attackers capable of

517
00:46:30,620 --> 00:46:35,310
escaping the JavaScript code and one
native code and then from the nature of

518
00:46:35,310 --> 00:46:40,200
codes used the kernel escalation yeah
you did you test that thing like it is

519
00:46:40,200 --> 00:46:55,899
here

520
00:46:55,900 --> 00:47:01,450
I think that's going to be much harder
if you find a way to the data structure

521
00:47:01,450 --> 00:47:07,399
that the kernel that it has potential
from JavaScript then it should be

522
00:47:07,400 --> 00:47:10,809
possible but I don't know I don't have a
good idea on how to do it off the top of

523
00:47:10,809 --> 00:47:19,789
my head and I memory scrambling as a
mitigation matter that I contacted my

524
00:47:19,789 --> 00:47:23,910
cell provider of in this happen then
they said kind of this can be enabled in

525
00:47:23,910 --> 00:47:29,770
BIOS and as far as I understand it would
change the memory mapping in a way that

526
00:47:29,770 --> 00:47:32,839
the operating system CISS

527
00:47:32,839 --> 00:47:36,990
addresses are not really the heart of
addresses in memory so it wouldn't just

528
00:47:36,990 --> 00:47:41,339
scrambling like a probably help mitigate
double-sided hammering but not the one

529
00:47:41,339 --> 00:47:45,558
side so that there's a distinction
between data scrambling and address

530
00:47:45,559 --> 00:47:49,380
gambling so I think I think you're
talking about a dress which would

531
00:47:49,380 --> 00:47:53,579
probably help wouldn't happen in the
service in our you're probably better

532
00:47:53,579 --> 00:47:57,400
off with ECC like the old soviet I can
be able to escalate privileges without

533
00:47:57,400 --> 00:48:02,849
rebooting the machine when you have a
sec unduly sensually

534
00:48:02,849 --> 00:48:07,960
that answer the question

535
00:48:07,960 --> 00:48:19,340
the questions this one subject

536
00:48:19,340 --> 00:48:20,770
any other questions

537
00:48:20,770 --> 00:48:31,910
this

538
00:48:31,910 --> 00:48:37,319
we do not know we just did some very
superficial research into trying to call

539
00:48:37,319 --> 00:48:40,288
an arm but we didn't try very hard so we
have no idea

540
00:48:40,289 --> 00:48:56,900
your questions

541
00:48:56,900 --> 00:49:08,760
i think is going to generate code which
then has to have the proper access

542
00:49:08,760 --> 00:49:14,540
button so I don't think it matters much
I think we're out of time

543
00:49:14,540 --> 00:49:16,720
any other questions right outside thanks
a lot

