1
00:00:00,000 --> 00:00:04,660
I every line I think so much for coming
to this late last presentation of the

2
00:00:04,660 --> 00:00:09,980
day today and in a talk about
redefinition atmosphere it is a short

3
00:00:09,980 --> 00:00:14,299
talk about a specific class of bugs that
I've been finding a lot of lately and I

4
00:00:14,299 --> 00:00:19,080
think it's a little bit under documented
today ending explain what I mean by read

5
00:00:19,080 --> 00:00:25,339
a script and the sort of problems it can
cause I found that involve redefinition

6
00:00:25,340 --> 00:00:30,150
explain how they work and how to reach
them before and again I should introduce

7
00:00:30,150 --> 00:00:34,530
myself i'm natalie sold out of it and
I'm a security researcher on Google's

8
00:00:34,530 --> 00:00:39,390
Project Zero and I'm a flash enthusiasts
and I'm in a script enthusiasts and I

9
00:00:39,390 --> 00:00:45,930
love making this hard puzzle piece of
here to give a quick example of what I

10
00:00:45,930 --> 00:00:53,789
need by definition and JavaScript for
your browser and has two functions when

11
00:00:53,789 --> 00:00:58,329
you document . rate which is wrapped by
this function f and the function that

12
00:00:58,329 --> 00:01:03,550
put on your screen in the browser and
then there's a second function here

13
00:01:03,550 --> 00:01:07,179
alert and that's the one that finds the
modal dialog with the dismissed bunton

14
00:01:07,180 --> 00:01:11,790
I'm doing a vertical Zeph already closed
document dot right and then calling

15
00:01:11,790 --> 00:01:18,710
Alert three things that can happen here
behind door number one is that the

16
00:01:18,710 --> 00:01:19,779
original function

17
00:01:19,780 --> 00:01:26,360
fires behind door number two is that the
second function document dot right fires

18
00:01:26,360 --> 00:01:33,960
and then the third possibility is that
the browser just kind of script at least

19
00:01:33,960 --> 00:01:39,669
most of the time is this case usually
when you do have to in a browser and

20
00:01:39,670 --> 00:01:43,659
then call f1 it actually executed
execute and that's what I'm gonna talk

21
00:01:43,659 --> 00:01:49,210
about although sometimes sometimes these
other guys happen and it depends on your

22
00:01:49,210 --> 00:01:53,408
browser and implementation and also
specifically what you're trying to

23
00:01:53,409 --> 00:01:58,240
overwrite so there's just a fight with
the middle case of those bugs and also

24
00:01:58,240 --> 00:02:02,649
it happening to get the two side cases
how you can get your software is this

25
00:02:02,649 --> 00:02:09,489
case and reach an issue that is
happening due to redefinition talk about

26
00:02:09,489 --> 00:02:10,950
more specifically

27
00:02:10,949 --> 00:02:15,619
is what happens if a function get
redefined that the virtual machine

28
00:02:15,620 --> 00:02:21,670
relies on what if machine is executing a
command script and it's a native

29
00:02:21,670 --> 00:02:25,450
function and then it needs to call into
a script again for a different reason

30
00:02:25,450 --> 00:02:30,109
for example that say there's a call back
or some function that only described in

31
00:02:30,110 --> 00:02:35,510
a script that sometimes virtual machine
makes assumptions about what will happen

32
00:02:35,510 --> 00:02:40,149
sometimes it assumes that dysfunction
has not been overridden even though it

33
00:02:40,150 --> 00:02:44,660
has and this can lead to all sorts of
interesting issues I see news after

34
00:02:44,660 --> 00:02:50,280
three years I've seen overflows a scene
tape confusions all sorts of bugs the

35
00:02:50,280 --> 00:02:54,239
bugs called reentrant vulnerabilities
they don't really like that term because

36
00:02:54,239 --> 00:02:59,090
I'm entrance isn't always required all
that's required is redefining a method

37
00:02:59,090 --> 00:03:03,560
and then calling something else and
thats it especially susceptible to these

38
00:03:03,560 --> 00:03:09,040
types of issues on projects we found 24
of them in the past six months

39
00:03:09,040 --> 00:03:13,730
ActionScript 2 because that's the
implementation allows the most to be

40
00:03:13,730 --> 00:03:19,500
redefined although there's also been a
few bags and s3 and I definitely not the

41
00:03:19,500 --> 00:03:22,980
first person to think of this is the
first time I heard of such a thing

42
00:03:22,980 --> 00:03:29,138
legend in 2009 and there is this talk
where basically the authors were able to

43
00:03:29,139 --> 00:03:33,850
bypass same origin policy by using
redefinition they need one function

44
00:03:33,850 --> 00:03:38,670
equal to a function they define and then
it was called in a different context in

45
00:03:38,670 --> 00:03:42,850
the script was actually executed in that
context and that sort of thing still

46
00:03:42,850 --> 00:03:46,870
happens there's actually a similar issue
this chance privilege escalation in

47
00:03:46,870 --> 00:03:52,560
Firefox and 2014 that involves
functionary definition there's also this

48
00:03:52,560 --> 00:03:57,989
memory corruption issues that can happen
due to assumptions and there's been two

49
00:03:57,989 --> 00:04:02,109
of them that I know there's probably
more in the past two years there was an

50
00:04:02,109 --> 00:04:07,040
overflowing chrome and there is a use
after free and Firefox recently there

51
00:04:07,040 --> 00:04:11,548
was the hacking team and there were five
issues in flash discovered in this dumb

52
00:04:11,549 --> 00:04:15,519
and actually four of them involve
functionary definition which shows that

53
00:04:15,519 --> 00:04:21,970
this is really a tape of attack that is
used by attackers in the wild you

54
00:04:21,970 --> 00:04:23,240
actually redefining

55
00:04:23,240 --> 00:04:30,180
the most simple way is using the
equality operator in ActionScript 2 in

56
00:04:30,180 --> 00:04:34,259
ActionScript to everything can be
redefined is everything there's no

57
00:04:34,259 --> 00:04:38,169
guarantee this will compile sometimes
you have to write the bank owned by hand

58
00:04:38,169 --> 00:04:42,539
and sometimes there's readonly
properties to fix them using this method

59
00:04:42,539 --> 00:04:48,568
called a step drops but actually get to
anything with anything I JavaScript is

60
00:04:48,569 --> 00:04:53,590
basically the same I javaScript can find
anything is anything with one exception

61
00:04:53,590 --> 00:04:59,020
if you try to redefine when needed
method is another native method it will

62
00:04:59,020 --> 00:05:03,930
not work so you need to put around
forever and the second needed and that's

63
00:05:03,930 --> 00:05:07,680
why I had the rapper in the example
shown at the beginning but this is a

64
00:05:07,680 --> 00:05:11,000
really actually stop you from doing
anything it's just need to make sure you

65
00:05:11,000 --> 00:05:15,539
remember to put the wraps around the
function before you redefine it three

66
00:05:15,539 --> 00:05:20,770
years much more restricted classes need
to be defined with the dynamic keyword

67
00:05:20,770 --> 00:05:25,750
for sanctions to redefine be redefined
the quality but fortunately there's a

68
00:05:25,750 --> 00:05:29,180
lot of other ways you could redefine
stuff in ActionScript 3 will talk about

69
00:05:29,180 --> 00:05:36,280
later example of this type of gonna go
through this blog and filter processing

70
00:05:36,280 --> 00:05:40,609
and just start going through the bugs I
want to mention that he's rolled

71
00:05:40,610 --> 00:05:44,360
reported to Adobe and they've all been
fixed and i really appreciate that they

72
00:05:44,360 --> 00:05:48,240
fix these issues quickly and I don't go
through these three of every bag but

73
00:05:48,240 --> 00:05:54,409
don't worry they've all been fixed so
this issue is in this filter center for

74
00:05:54,409 --> 00:05:58,370
about an object and when this code does
is it starts off by creating a blur

75
00:05:58,370 --> 00:06:03,090
filter and then it calls the filter
center on the button object and sent it

76
00:06:03,090 --> 00:06:09,520
to the filter and what this does is it
in the butt in object create to rate in

77
00:06:09,520 --> 00:06:14,609
a raid on hold these filter objects in a
coffee filter and that's what I do is a

78
00:06:14,610 --> 00:06:18,560
redefined the blur filter constructor as
the convolution filter constructor using

79
00:06:18,560 --> 00:06:24,599
a quality and then this code calls the
gutter and what that does is that copies

80
00:06:24,599 --> 00:06:30,180
the filter out of the way back into a
temporary array and then it tries to

81
00:06:30,180 --> 00:06:34,960
create an ActionScript objects 2.2 it
happens here is because

82
00:06:34,960 --> 00:06:38,560
does the constructor for that action
script object has been redefined it

83
00:06:38,560 --> 00:06:42,949
actually cause the wrong constructor and
this is take confusing because you have

84
00:06:42,949 --> 00:06:47,580
competition filter and ActionScript
pointing to a blur filter backing object

85
00:06:47,580 --> 00:06:51,258
and just give a feeling of what's
happening here at the pseudocode

86
00:06:51,259 --> 00:06:57,449
basically it's taking a player filtering
casting it to accomplish in filter so

87
00:06:57,449 --> 00:07:01,479
disgusting mean that integers argues
with pointers pointers are confused with

88
00:07:01,479 --> 00:07:07,090
integers it's actually a fairly bad to
give a second example this is another

89
00:07:07,090 --> 00:07:11,869
flash issue and this is when right how
to do a bit more massaging actually make

90
00:07:11,870 --> 00:07:16,699
it compiled so you can see I have this
barbie girl / dot net and then beat up

91
00:07:16,699 --> 00:07:22,759
file reference Eagles Q&A Q is actually
a record around the constructor but this

92
00:07:22,759 --> 00:07:26,440
is actually doing is once again just
redefining the file reference

93
00:07:26,440 --> 00:07:31,520
constructor as the data constructor and
then what this by guys I create the file

94
00:07:31,520 --> 00:07:34,930
reference list and then I called browse
on it and that's the function that

95
00:07:34,930 --> 00:07:38,780
brings all the files up on the screen
she can select one but then when you

96
00:07:38,780 --> 00:07:43,380
select one it tries to create this file
reference object to the name of the file

97
00:07:43,380 --> 00:07:47,690
you selected but since the constructors
when overridden it actually creates a

98
00:07:47,690 --> 00:07:52,599
bitmap data object and once again that
state confusion the code starts assuming

99
00:07:52,599 --> 00:07:56,590
that the object was created was it not
data was a file reference object when it

100
00:07:56,590 --> 00:08:03,090
was not so and not every expert
implementation supports equality and not

101
00:08:03,090 --> 00:08:06,359
every method supports equality still
another option you have is to use a

102
00:08:06,360 --> 00:08:11,639
proxy object and these are in javascript
and ActionScript 3 and they basically

103
00:08:11,639 --> 00:08:16,620
allow that handle variable access to be
defined and you can basically define

104
00:08:16,620 --> 00:08:20,599
everything in divine what happens if you
get a good call center gets called what

105
00:08:20,599 --> 00:08:24,479
happened to the notes field gets access
what happens if you enumerate whatever

106
00:08:24,479 --> 00:08:31,280
and it doesn't cost a few bugs and
Firefox I'm second example of flash here

107
00:08:31,280 --> 00:08:34,620
at this was found by Ian here and this
is actually in the open source

108
00:08:34,620 --> 00:08:41,560
components of flash so I have the code
so starting with BBM code district if i

109
00:08:41,559 --> 00:08:45,479
Function what it does is it takes an
object in actionscript

110
00:08:45,480 --> 00:08:49,120
and it enumerates over it to figure out
how many fields it has how many

111
00:08:49,120 --> 00:08:54,310
properties it has and then it allocates
her a bit on that number of properties

112
00:08:54,310 --> 00:08:55,680
and Andy Murray again

113
00:08:55,680 --> 00:09:00,050
copies them into the array but it
doesn't account for is what if this is a

114
00:09:00,050 --> 00:09:05,269
proxy object so it's easy enough to
proxy object with the first time you

115
00:09:05,269 --> 00:09:06,170
enumerated

116
00:09:06,170 --> 00:09:10,979
really small and in the second time
really large so basically a numerate

117
00:09:10,980 --> 00:09:14,910
Alex and then the second time to rate
its way too big and you get an overflow

118
00:09:14,910 --> 00:09:20,670
another interesting way you can redefine
stuff if you can't use equality is using

119
00:09:20,670 --> 00:09:27,880
conversion operators and it's a pretty
interesting and ActionScript 2 and also

120
00:09:27,880 --> 00:09:31,230
to some extent in javascript and
basically they're used them for

121
00:09:31,230 --> 00:09:36,050
conversion to the two most common of
them is value in this is called when you

122
00:09:36,050 --> 00:09:40,899
need to convert an object to an integer
and there's to stream which is used to

123
00:09:40,899 --> 00:09:45,230
convert an object to a string and this
is used very frequently for logging out

124
00:09:45,230 --> 00:09:48,560
what's really interesting in
ActionScript is if you call a function

125
00:09:48,560 --> 00:09:54,029
for example when there is a number and
then the other parameter is a string a

126
00:09:54,029 --> 00:09:57,600
lot of the time if you provide something
that's not a number is the first

127
00:09:57,600 --> 00:10:01,240
parameter it will call value on it and
you can provide something that's not a

128
00:10:01,240 --> 00:10:05,709
string is the second parameter it will
call to string on it can cause a lot of

129
00:10:05,709 --> 00:10:11,420
interesting bugs get the compilation
filter bug and just kind of an

130
00:10:11,420 --> 00:10:16,019
interesting history I had it in February
and then a very similar bug was used to

131
00:10:16,019 --> 00:10:20,529
going to open in March and then it
turned up in the house so at least three

132
00:10:20,529 --> 00:10:27,380
people independently discovered this way
this works is it involves using value

133
00:10:27,380 --> 00:10:33,029
with the filter me take center and what
the center does is it basically takes an

134
00:10:33,029 --> 00:10:37,260
array from ActionScript and copies it
into ne devrait and the actual order of

135
00:10:37,260 --> 00:10:42,019
operations is he called the satyr it
deletes the original matrix and then it

136
00:10:42,019 --> 00:10:45,620
reality the new matrix and then it
copies the numbers into the meat makes

137
00:10:45,620 --> 00:10:50,570
this bike is called The Matrix center
and

138
00:10:50,570 --> 00:10:55,280
get delete the old matrix III Alex the
new matrix it copies the numbers except

139
00:10:55,280 --> 00:10:58,890
the numbers aren't actually number's
called in to bail you out and it caused

140
00:10:58,890 --> 00:11:02,770
me to take center again and then this
delete fear a reality

141
00:11:02,770 --> 00:11:08,640
copies in this parameter and then it
returns but we currently looking into is

142
00:11:08,640 --> 00:11:13,110
already been deleted and that's to use
after free I'm so this is an example of

143
00:11:13,110 --> 00:11:17,090
what you call early entrants will
durability it's one where if you go into

144
00:11:17,090 --> 00:11:21,820
a function twice when it's not expecting
that you can change properties and I

145
00:11:21,820 --> 00:11:27,630
expected way and it leads to a bug
another example of a bug that involves

146
00:11:27,630 --> 00:11:32,689
value in this was found in the hockey
team dumb and it was also part of the

147
00:11:32,690 --> 00:11:38,290
open source / component so there's code
for it and defended ActionScript 3 and

148
00:11:38,290 --> 00:11:43,160
it involves redefining value although
you'll notice in this case you actually

149
00:11:43,160 --> 00:11:47,329
have to extend the class create a
subclass to redefine value but that's

150
00:11:47,330 --> 00:11:53,400
easy enough to do in this case and if
this is in the index array of the

151
00:11:53,400 --> 00:11:59,170
battery a class so you called be
sub-zero equals and and and is an object

152
00:11:59,170 --> 00:12:03,089
has value every to find it gets
converted to an integer so it can be

153
00:12:03,090 --> 00:12:09,480
converted to a bed I'm so it's easy to
see what's happening here from GVM code

154
00:12:09,480 --> 00:12:12,680
the first thing that happens if there's
a spider object which is the need of

155
00:12:12,680 --> 00:12:17,750
better raid at that second script object
and it is indexed on the index you

156
00:12:17,750 --> 00:12:22,000
provide in the next two points and then
the right side gets evaluated and it

157
00:12:22,000 --> 00:12:26,530
calls into this integer function which
calls value of and then that can do some

158
00:12:26,530 --> 00:12:30,370
things that just changing the railing
causes it to be reality and then it

159
00:12:30,370 --> 00:12:34,040
right just one bite back to the rate
it's been freed which is a pretty small

160
00:12:34,040 --> 00:12:41,860
use after free but it was enough for a
working extremely interesting function

161
00:12:41,860 --> 00:12:46,800
that can cause redefinition issues is
watches and these are things that can be

162
00:12:46,800 --> 00:12:51,140
used to interfere specially when a
property is especially in such a

163
00:12:51,140 --> 00:12:57,460
function to watch does and you can see
the call to watch in this example and

164
00:12:57,460 --> 00:13:01,860
basically you specify the property of
non-object in expressive

165
00:13:01,860 --> 00:13:06,769
shin and every time that object and get
set this function get called and you

166
00:13:06,769 --> 00:13:11,839
have the opportunity to either return
when it was set to change the property

167
00:13:11,839 --> 00:13:16,810
where you have the option of returning
something different and then that will

168
00:13:16,810 --> 00:13:21,649
change with the property got set 2 I'm
so this specific bug is once again in

169
00:13:21,649 --> 00:13:26,149
this file reference list and one
subtleties year is that you can watch on

170
00:13:26,149 --> 00:13:29,450
something that doesn't exist so I have
to create the property file list first

171
00:13:29,450 --> 00:13:33,029
men to watch on it and then I called
browse was once again the thing that

172
00:13:33,029 --> 00:13:37,439
makes all the files appear on the screen
and then when you select the file it

173
00:13:37,440 --> 00:13:41,570
tries to create this file this
acceptance of targeting created and has

174
00:13:41,570 --> 00:13:45,839
a watch on it the watch gets called and
then but what can return something

175
00:13:45,839 --> 00:13:51,550
different which is of the wrong tape to
function and then this is taken fuses in

176
00:13:51,550 --> 00:13:55,290
specifically this integer will get
interpreted as a pointer because it

177
00:13:55,290 --> 00:13:59,339
stinks and it's an object it's being
returned but it's not

178
00:13:59,339 --> 00:14:04,209
example of this is a connection bug in
this is an interesting one because this

179
00:14:04,209 --> 00:14:10,719
is kind of a time of check time if you
start off by creating property so that I

180
00:14:10,720 --> 00:14:14,180
can set the water on it and then I
created a net connection and then send

181
00:14:14,180 --> 00:14:18,099
it to the proto and this is just to pass
an unrelated check in the Kinect

182
00:14:18,100 --> 00:14:21,850
function and then I called the Kinect
function and the first thing the CAC

183
00:14:21,850 --> 00:14:25,620
function does it make sure that the
thing that's coming in is of the right

184
00:14:25,620 --> 00:14:32,790
type of this net connection type and and
then it cuts the URI the URI disaster

185
00:14:32,790 --> 00:14:36,060
watch on it calls into this function
which is once again just a rack for

186
00:14:36,060 --> 00:14:40,849
around the bitmap data constructor which
then read it basically redefined as

187
00:14:40,850 --> 00:14:42,699
objects so that it's now

188
00:14:42,699 --> 00:14:51,649
data object so then when you return to
the main function data object except the

189
00:14:51,649 --> 00:14:56,420
function assumes internet connection
object and that causes problems so

190
00:14:56,420 --> 00:14:59,630
basically this is bypassing the check
the check out and when you call in to

191
00:14:59,630 --> 00:15:06,070
URI and it changes the situation so that
I check now is violated and then it

192
00:15:06,070 --> 00:15:14,329
makes other calls with that assumption
to go through a couple of other methods

193
00:15:14,329 --> 00:15:15,500
they think are possible

194
00:15:15,500 --> 00:15:19,110
used to cause these types of issues
these are ones either where I haven't

195
00:15:19,110 --> 00:15:25,200
found it yet but I think it's possible
he's passed on that bike yet the first

196
00:15:25,200 --> 00:15:30,590
one is subclassing in fact the issue I
showed you did you subclassing but I

197
00:15:30,590 --> 00:15:34,650
think there is more product more things
that can be used in some class Singh to

198
00:15:34,650 --> 00:15:38,689
be defined message other than just value
in particular I think there could be

199
00:15:38,690 --> 00:15:42,760
situations in virtual machines where
they check that something is up tape

200
00:15:42,760 --> 00:15:48,780
expert really it might be a sub acts and
then and then that could be used to

201
00:15:48,780 --> 00:15:53,060
define methods in ways that are
unexpected basically an ActionScript 3

202
00:15:53,060 --> 00:15:58,969
any 99 final properties can be placed
with their methods are getting their

203
00:15:58,970 --> 00:16:04,080
centers I think this is a possible way
to cause bugs by redefining functions

204
00:16:04,080 --> 00:16:12,850
possibility is understandable resolve
which is a result in ActionScript 2 and

205
00:16:12,850 --> 00:16:16,240
underscore underscore look up in
javascript and these are what are called

206
00:16:16,240 --> 00:16:20,880
last resort functions these are if
something is undefined they will get

207
00:16:20,880 --> 00:16:27,100
called so for example if you define
resolve it and then you call on that

208
00:16:27,100 --> 00:16:29,170
object to feel that doesn't exist

209
00:16:29,170 --> 00:16:34,660
resolve will get called useful in two
different ways to find this type of

210
00:16:34,660 --> 00:16:39,459
issue because if you don't get any
properties in an object in the new set

211
00:16:39,460 --> 00:16:42,350
resolve and then you put logging in
there you can actually use it to figure

212
00:16:42,350 --> 00:16:47,860
out in a need of call what is actually
getting access by the virtual machine so

213
00:16:47,860 --> 00:16:50,450
that can be an interesting experiment
just to see everything that getting

214
00:16:50,450 --> 00:16:56,740
called but also this could be used to
redefine message as well maybe if the

215
00:16:56,740 --> 00:17:00,630
virtual machine calls into them and
exercise a proper either doesn't exist

216
00:17:00,630 --> 00:17:04,890
maybe it's not expecting that is defined
with resolves and unexpected behavior

217
00:17:04,890 --> 00:17:10,870
will occur the last one is getters and
setters and functions that can be

218
00:17:10,869 --> 00:17:13,958
defined that execute script when they're
called by nato

219
00:17:13,959 --> 00:17:19,089
when they're called in general meaning
of functions they can be done in

220
00:17:19,089 --> 00:17:23,119
ActionScript to ActionScript 3 and
JavaScript are using different functions

221
00:17:23,119 --> 00:17:24,609
and they're actually was an issue

222
00:17:24,609 --> 00:17:30,520
shoo-in JavaScript in chrome that was
caused by this situation it was an issue

223
00:17:30,520 --> 00:17:37,179
where for a certain object I get her and
a center for language defined when the

224
00:17:37,179 --> 00:17:42,120
code assume that link was just a
property and what that meant was that in

225
00:17:42,120 --> 00:17:46,459
center could return a different value
for length each time I want to get this

226
00:17:46,460 --> 00:17:49,640
was an overflow or the first time I
return the value is small in the second

227
00:17:49,640 --> 00:17:54,179
time it returned the value it was large
I think there's a lot of possibilities

228
00:17:54,179 --> 00:18:00,299
for these types of not just by returning
different time for fields but there's

229
00:18:00,299 --> 00:18:04,059
also the possibility that they can
execute script when it's unexpected and

230
00:18:04,059 --> 00:18:08,250
change properties in objects and maybe
bypassed checks and other things that

231
00:18:08,250 --> 00:18:12,470
are unexpected and I think this is
mostly something that will impact

232
00:18:12,470 --> 00:18:19,220
JavaScript in Flash and this is actually
well documented the abuse is fairly

233
00:18:19,220 --> 00:18:25,530
common optimization so usually if native
call is expecting something to be a

234
00:18:25,530 --> 00:18:31,668
field it won't call again if it's not
supposed to be there so I think I'm

235
00:18:31,669 --> 00:18:37,080
going to go through is how you actually
find these types of issues and there's a

236
00:18:37,080 --> 00:18:42,129
few different ways by a good way it
could review if you have the code if you

237
00:18:42,130 --> 00:18:46,860
can find functions that called that
cause calls into script or call fields

238
00:18:46,860 --> 00:18:50,760
or actions fields of an object that sort
of thing it's easy enough to figure out

239
00:18:50,760 --> 00:18:55,580
where the calls into the use of things
because get execution are and then use

240
00:18:55,580 --> 00:19:00,149
that to find areas to look for these
types of vulnerabilities another

241
00:19:00,150 --> 00:19:03,429
possibility is using reverse engineering
I actually think the majority of these

242
00:19:03,429 --> 00:19:08,919
types of bugs are found using data and
this is the same concept basically if

243
00:19:08,919 --> 00:19:14,600
you can find the function in Idaho where
there's calls into script object

244
00:19:14,600 --> 00:19:20,889
properties or access you can use that to
find where places where it's a good idea

245
00:19:20,890 --> 00:19:26,140
to look for these types of bugs and
other possibility is the API docs 20

246
00:19:26,140 --> 00:19:30,520
seen a few of these types of bugs just
might be the API can be evident and

247
00:19:30,520 --> 00:19:30,820
where

248
00:19:30,820 --> 00:19:36,320
good areas to target in particular
function takes an object or an array of

249
00:19:36,320 --> 00:19:41,100
parameters not usually a concern because
you know that the object is going to

250
00:19:41,100 --> 00:19:44,620
need to be converted into some of their
tape or if it's in a raid and the things

251
00:19:44,620 --> 00:19:48,149
we're gonna need to be converted to
another type and that could lead to

252
00:19:48,149 --> 00:19:52,518
calls the value of reaching string which
can cause a lot of problems and finally

253
00:19:52,519 --> 00:19:56,980
specialized pfizer is it's funny I
actually met anyone who's done this

254
00:19:56,980 --> 00:20:01,200
using a specialized Pfizer but when I
talk to people everyone always knows a

255
00:20:01,200 --> 00:20:05,600
guy who has a Pfizer that does this sort
of thing so I never personally done this

256
00:20:05,600 --> 00:20:09,570
I think that it's actually a strong
possibility could find bugs using fuzzy

257
00:20:09,570 --> 00:20:13,480
if you had a 50 that had a strong
understanding about how you can redefine

258
00:20:13,480 --> 00:20:23,710
and methods support so that fit in
conclusion

259
00:20:23,710 --> 00:20:29,049
script is largely to dynamic for its own
good condition is a useful feature in a

260
00:20:29,049 --> 00:20:31,879
lot of different situations it's
important to be careful when

261
00:20:31,879 --> 00:20:36,080
implementing it to make sure that it
doesn't cause a lot of security problems

262
00:20:36,080 --> 00:20:40,529
of this research is specific to
ActionScript time there's nothing I

263
00:20:40,529 --> 00:20:45,690
think in here that's actually specific
to flash a script engines can and have

264
00:20:45,690 --> 00:20:51,590
in the past had similar issues and I
don't think they're all gone to go for

265
00:20:51,590 --> 00:20:55,759
it and find whether you're a developer
who is responsible for maintaining an

266
00:20:55,759 --> 00:20:59,419
Xmas gift or whether you're a security
researcher who's responsible for

267
00:20:59,419 --> 00:21:03,840
reviewing one important to understand
how redefinition can affect your

268
00:21:03,840 --> 00:21:10,289
security model doing so I think can help
you find and fix a lot of bugs I'm so

269
00:21:10,289 --> 00:21:20,710
that's it I'd like to open the floor for
questions no contact info there so if

270
00:21:20,710 --> 00:21:24,710
you're a shot I feel free to contact me
if you have any questions and answering

271
00:21:24,710 --> 00:21:34,600
them

272
00:21:34,600 --> 00:21:55,789
yes to any money in JavaScript engine
such as angularjs have these types of

273
00:21:55,789 --> 00:22:01,100
issues or if I'm just focused on flash
personally I just focused on flash and I

274
00:22:01,100 --> 00:22:04,139
went through similar back to see if I
can find similar bugs and other

275
00:22:04,140 --> 00:22:11,919
frameworks and I've seen a few in
browsers but like the quantity in a nice

276
00:22:11,919 --> 00:22:28,690
flash

277
00:22:28,690 --> 00:22:34,430
results are as as that is that mostly
protected against just turned on in the

278
00:22:34,430 --> 00:22:39,920
middle of the question so sorry I did
you do any research into into like

279
00:22:39,920 --> 00:22:42,620
manipulating sort of the pseudo
variables that are provided by the V in

280
00:22:42,620 --> 00:22:47,850
like the the arguments suit or a
periodic functions and manipulating

281
00:22:47,850 --> 00:22:50,870
mostly protected against now

282
00:22:50,870 --> 00:22:57,010
yeah yeah I did try playing with that a
bit and it's fairly easy because I don't

283
00:22:57,010 --> 00:23:00,370
apply that supported by love the actual
script engines to play with that sort of

284
00:23:00,370 --> 00:23:06,540
thing and you know when I played with it
I haven't found any bugs recently in

285
00:23:06,540 --> 00:23:23,460
that

286
00:23:23,460 --> 00:23:50,950
another questioner sorry

287
00:23:50,950 --> 00:23:54,690
he asked if I'd tried using the function
key word for later reading that

288
00:23:54,690 --> 00:24:06,029
definition and no I haven't

289
00:24:06,029 --> 00:24:21,180
any more questions

290
00:24:21,180 --> 00:24:29,940
I understand correctly you asked it
looks like in Chico they actually

291
00:24:29,940 --> 00:24:36,670
implement the function yeah examples in
there but typically basically what it

292
00:24:36,670 --> 00:24:40,300
looks like in the code is that there is
some sort of functional get called that

293
00:24:40,300 --> 00:24:45,940
can cause in some situations are calling
script typically there are some

294
00:24:45,940 --> 00:24:48,890
functions you can look for in the code
that are kind of indicated that this

295
00:24:48,890 --> 00:24:58,900
sort of problem can occur

296
00:24:58,900 --> 00:25:01,830
here I think everyone

