1
00:00:00,000 --> 00:00:07,470
alright so we are in Mandalay the stock
is writing badass an hour for OSX got a

2
00:00:07,470 --> 00:00:11,790
lot of content so I'm going to jump
right in so good morning and thank you

3
00:00:11,790 --> 00:00:16,009
so much for attending my presentation
let's talk about writing about a half

4
00:00:16,010 --> 00:00:18,619
hour for OSX

5
00:00:18,619 --> 00:00:23,660
name is Patrick mortal I worked at a
bunch of acronyms places including the

6
00:00:23,660 --> 00:00:29,060
NSA which I always joke is the only us'
government agency that actually listens

7
00:00:29,060 --> 00:00:36,550
currently I'm the director of R&D and so
does crowdsourced under Billy discovery

8
00:00:36,550 --> 00:00:41,399
with global contingent of that its
security researchers check out tonight

9
00:00:41,399 --> 00:00:44,730
dot com or stop by our booth to learn
about how we can help you protect its

10
00:00:44,730 --> 00:00:51,860
enterprise Rd does all sorts of cool
cybersecurity research and we mother Mac

11
00:00:51,860 --> 00:00:58,840
computers so recently I've been doing a
lot of OSX research some of that so the

12
00:00:58,840 --> 00:01:01,250
talk today can be divided into three
parts

13
00:01:01,250 --> 00:01:04,720
we're going to start with a brief
overview of OSX malware

14
00:01:04,720 --> 00:01:10,220
allows us to get a baseline of what it
what is out there and the main part of

15
00:01:10,220 --> 00:01:15,350
the talk will probably provide some
novel ideas about how we can improve the

16
00:01:15,350 --> 00:01:16,580
status quo

17
00:01:16,580 --> 00:01:21,000
so basically we'll talk about how to
improve infection vectors persistence

18
00:01:21,000 --> 00:01:26,080
self-defense features and then bypassing
security products and then finally land

19
00:01:26,080 --> 00:01:30,220
with some tree security tools that can
help us protect our Macs and ensure that

20
00:01:30,220 --> 00:01:36,640
we remain secure how do I know this talk
does not cover former based kernel based

21
00:01:36,640 --> 00:01:41,470
OS X now we're gonna talk later this
week maybe tomorrow that looks really

22
00:01:41,470 --> 00:01:45,158
interesting I'm gonna be attending it so
if you're interested in lower-level

23
00:01:45,159 --> 00:01:50,180
Mauer I would recommend checking that
out alright so briefly when I look at

24
00:01:50,180 --> 00:01:55,619
several recess recent OS X now where's
this will give us a good idea as to the

25
00:01:55,619 --> 00:02:00,240
status quo kind of the current state of
affairs in OSX malware and and then this

26
00:02:00,240 --> 00:02:03,990
will provide us as I mentioned with a
baseline and show us areas where power

27
00:02:03,990 --> 00:02:10,369
could improve now you might be thinking
why do we care about Max and and now

28
00:02:10,369 --> 00:02:14,670
we're aware that kinda stuff well this
is kind of an obvious statement but Max

29
00:02:14,670 --> 00:02:19,649
are pretty much everywhere especially
yet security conferences colleges R&D

30
00:02:19,650 --> 00:02:24,209
centers board meetings pretty much
everywhere and Apple is now the number

31
00:02:24,209 --> 00:02:28,590
three you s computer vendor number five
worldwide now we all know anytime a

32
00:02:28,590 --> 00:02:31,510
technology becomes more prevalent
naturally there's going to be more

33
00:02:31,510 --> 00:02:38,060
attacks and one hour later Apple tells
us that Max don't really get an hour

34
00:02:38,060 --> 00:02:42,819
while I've learned to doubt believe
everything everyone especially when it

35
00:02:42,819 --> 00:02:46,980
comes from Apple's marketing departments
I think they hire more marketing

36
00:02:46,980 --> 00:02:52,450
security people but that's just actually
the first computer virus that was

37
00:02:52,450 --> 00:02:55,980
discovered propagating spreading in
awhile was called out corner and that

38
00:02:55,980 --> 00:03:01,109
actually infected computers says that
Mac malware has flourished in the last

39
00:03:01,110 --> 00:03:05,970
three or four years we've seen about
fifty new OS X now where families can be

40
00:03:05,970 --> 00:03:09,620
just released a report that last year
actually there was a significant surge

41
00:03:09,620 --> 00:03:14,220
in OS X Mountain our tax base about a
thousand unique attacks that they could

42
00:03:14,220 --> 00:03:20,040
classify it to 25 or so new in our
family has also been scenarios where

43
00:03:20,040 --> 00:03:24,579
more advanced adversaries maybe nation
states have been able to go after OS X

44
00:03:24,580 --> 00:03:30,989
users specifically and create new OS X
Mauer and then review in fact those

45
00:03:30,989 --> 00:03:35,780
those users so to me this also is that
OS X mauer is definitely a problem and

46
00:03:35,780 --> 00:03:43,239
an unfortunate reality show the first
OSX I want to talk about is called this

47
00:03:43,239 --> 00:03:47,940
was found last year by fire I just
really basic standard back to our

48
00:03:47,940 --> 00:03:53,629
provide some decent features key login
screen capture her shell in terms of its

49
00:03:53,629 --> 00:03:58,329
persistence though it persists as a lot
agent now watch agents are nearly

50
00:03:58,330 --> 00:04:03,540
synonymous to window services so yes
they will give you persistence but the

51
00:04:03,540 --> 00:04:05,049
loss of shoppers new process

52
00:04:05,050 --> 00:04:08,900
so if the user looks it say activity
monitor doesn't ps3 gonna see a new

53
00:04:08,900 --> 00:04:14,530
malicious processes running so this is
very amateur now we're really again not

54
00:04:14,530 --> 00:04:20,570
that sophisticated another recent OSX
malware specimen is I want to talk about

55
00:04:20,570 --> 00:04:24,599
this long warned actually using it in a
demo was discovered to get at the end of

56
00:04:24,600 --> 00:04:28,510
last year and contrary to its name it's
really not a one at all it has no

57
00:04:28,510 --> 00:04:33,420
autonomous spreading capabilities no
virus spreading capabilities is just a

58
00:04:33,420 --> 00:04:34,350
Trojan

59
00:04:34,350 --> 00:04:39,430
it spread via infected applications tell
everyone wants a free copy of Photoshop

60
00:04:39,430 --> 00:04:43,520
again you download you would get
photoshop but you also get some our

61
00:04:43,520 --> 00:04:50,890
family to again a very basic fact or
provided some you know basic

62
00:04:50,890 --> 00:04:55,919
functionality download execute survey
and again in terms of persistence it

63
00:04:55,920 --> 00:04:59,090
persists as a large diamond which is
similar to launch agent which again

64
00:04:59,090 --> 00:05:05,380
means that user will see a new process
running so really not that stuff yet

65
00:05:05,380 --> 00:05:09,460
another recent release of OS X mauer is
why earlier now this is a little more

66
00:05:09,460 --> 00:05:14,070
advanced but only from a feature point
you should have the ability to infect

67
00:05:14,070 --> 00:05:19,630
iPhones if the user agreed to install an
enterprise certificate the Mac opponent

68
00:05:19,630 --> 00:05:23,260
against super basic persists as a large
diamond so again

69
00:05:23,260 --> 00:05:27,780
gonna show up its new process had very
basic functionality now the media got

70
00:05:27,780 --> 00:05:32,340
all excited about this now we're like oh
my god this is so advanced but there's

71
00:05:32,340 --> 00:05:35,609
this quote that I really like from one
of my favorite OSX security researchers

72
00:05:35,610 --> 00:05:38,669
which pretty much sums it up that says
you know it's kinda just a collection of

73
00:05:38,669 --> 00:05:42,969
scripts and binaries old duct tape
together almost surprising that it

74
00:05:42,970 --> 00:05:47,790
worked so again a very basic piece of
nowhere and finally we've got hacked

75
00:05:47,790 --> 00:05:52,790
into his persistent OSX in fact it was
cool because we actually got source code

76
00:05:52,790 --> 00:05:56,080
thanks to delete this allowed us to
really dive in and figure out exactly

77
00:05:56,080 --> 00:06:00,830
what the mouth is doing and also look at
its level of sophistication now yes it

78
00:06:00,830 --> 00:06:04,390
does have a myriad of features because
it was designed to collect intelligence

79
00:06:04,390 --> 00:06:08,900
but other than that as the quote says
again there's really nothing technically

80
00:06:08,900 --> 00:06:13,169
impressive about this now or even though
it was being sold and used by

81
00:06:13,169 --> 00:06:17,210
nation states are dictatorships around
the world so after looking at these

82
00:06:17,210 --> 00:06:21,219
cutting-edge are these most recent LSX
malware samples we can draw some

83
00:06:21,219 --> 00:06:24,889
conclusions and make some
generalizations so in terms of

84
00:06:24,889 --> 00:06:29,520
inspection we can see that most use
Trojans they require user interaction

85
00:06:29,520 --> 00:06:35,460
to use fishing but the exploits a
deliver kind of older or so

86
00:06:35,460 --> 00:06:39,638
security-conscious users people who keep
their updated don't click on random

87
00:06:39,639 --> 00:06:41,379
emails probably gonna be fine

88
00:06:41,379 --> 00:06:46,400
terms of persistent all use very
well-known techniques majority being

89
00:06:46,400 --> 00:06:52,068
watched items this makes an hour really
easy to uncover detect and prevent terms

90
00:06:52,069 --> 00:06:55,919
of self-defense we see minimal
obfuscation and there's no act of

91
00:06:55,919 --> 00:07:00,628
self-defense somewhat similarly in terms
of stuff pretty much all just hide in

92
00:07:00,629 --> 00:07:06,009
plain sight they basically will show up
in activity monitor or a process but

93
00:07:06,009 --> 00:07:10,770
they named themselves something rather
and that's how they try to hide also

94
00:07:10,770 --> 00:07:15,150
there are stand-alone executable so
again in a shelf in a process terms of

95
00:07:15,150 --> 00:07:19,710
features this is the one area where I
would say current OS X mauer is ditions

96
00:07:19,710 --> 00:07:23,669
gets the job done but if you look a
little closer how these features are

97
00:07:23,669 --> 00:07:28,740
implemented a lot of times it's done in
a very amateur and elegant way so they

98
00:07:28,740 --> 00:07:32,939
want to oversell to actually find
shelter remote port instead of doing it

99
00:07:32,939 --> 00:07:34,180
in Proc

100
00:07:34,180 --> 00:07:37,550
so if you listen he opened ports on your
computer you'll see it listening port

101
00:07:37,550 --> 00:07:41,520
bound to shop which again really not
that stuff terms of personal security

102
00:07:41,520 --> 00:07:45,479
bypasses of bypassing firewalls and
antivirus products dont see any of this

103
00:07:45,479 --> 00:07:50,438
malware have any antivirus or personal
security product awareness or shine

104
00:07:50,439 --> 00:07:55,240
actively bypass a kinky implant did have
some stops for injecting some random

105
00:07:55,240 --> 00:08:00,330
garbage by to bypass et basic features
but again that's pretty much it so the

106
00:08:00,330 --> 00:08:05,818
great I like to give current Mac now
there is a C-plus so it is sufficient

107
00:08:05,819 --> 00:08:12,110
but it's an elegant amateur and trivial
to both detect and prevent cervical and

108
00:08:12,110 --> 00:08:16,740
today is how can we improve the status
quo and learn how to write from better

109
00:08:16,740 --> 00:08:17,750
OS X now

110
00:08:17,750 --> 00:08:22,120
you might be thinking why would we talk
about this we're just get a table the

111
00:08:22,120 --> 00:08:23,020
bad guys

112
00:08:23,020 --> 00:08:27,870
well first to be totally honest writing
proof of concept power to me is pretty

113
00:08:27,870 --> 00:08:31,840
much the most entertaining software
development so I just think it's one

114
00:08:31,840 --> 00:08:36,890
more seriously though Apple and
third-party security products of the

115
00:08:36,890 --> 00:08:42,490
eighty company's firewall products like
that uses existing iOS and OS 10 Mauer

116
00:08:42,490 --> 00:08:47,290
which I just showed you kinda sucks to
validate their efforts and that their

117
00:08:47,290 --> 00:08:51,910
tools so they still use that as a litmus
test and when they detect these known

118
00:08:51,910 --> 00:08:57,530
samples there like air tools are awesome
they work how trivial it is to write

119
00:08:57,530 --> 00:09:02,280
something better that to generically
bypass everything and obviously if I can

120
00:09:02,280 --> 00:09:02,839
do it

121
00:09:02,840 --> 00:09:08,050
nation states adversaries can and
probably are already doing that so my

122
00:09:08,050 --> 00:09:12,670
goal is to spur discussions to make
better security tools so that we can

123
00:09:12,670 --> 00:09:17,620
ultimately secure IMAX and prevent them
from getting at its first start by

124
00:09:17,620 --> 00:09:21,750
talking about infection so how does a
less active get on an end user's

125
00:09:21,750 --> 00:09:26,630
computer as I mentioned most are spread
by Trojans require user interaction so

126
00:09:26,630 --> 00:09:31,720
these are some of the common infection
mechanisms so website will be hacked or

127
00:09:31,720 --> 00:09:32,820
infected

128
00:09:32,820 --> 00:09:36,540
unwitting user we'll go there and it
says hey here's a flash installer you

129
00:09:36,540 --> 00:09:40,740
need to update obviously not flash it's
now where they download and execute it

130
00:09:40,740 --> 00:09:46,100
they'll be infected similarly adult
websites you go there you know observed

131
00:09:46,100 --> 00:09:51,610
this contact you have to install disk
HDD contact HP co-director plugin so

132
00:09:51,610 --> 00:09:58,210
I've been told for research purposes
only and then of course infected tired

133
00:09:58,210 --> 00:10:01,870
and applications everyone wants
Photoshop free copy of Photoshop so the

134
00:10:01,870 --> 00:10:06,910
download photoshop they get it but it's
infected an hour now she's going to

135
00:10:06,910 --> 00:10:09,680
prevent this from actually really
successful first there's a built-in

136
00:10:09,680 --> 00:10:14,270
technology called gatekeeper which
blocks unsigned binary talk about that a

137
00:10:14,270 --> 00:10:17,910
little so there's definitely protect
some users also smart security-conscious

138
00:10:17,910 --> 00:10:22,250
users are not going to fall for this so
they're gonna be okay so what the way

139
00:10:22,250 --> 00:10:23,820
for us to target such users

140
00:10:23,820 --> 00:10:27,950
well if you think about it we all do
download software and the Mac App Store

141
00:10:27,950 --> 00:10:32,140
is very constructive in my opinion so
most companies still distribute their

142
00:10:32,140 --> 00:10:35,819
software directly from their website see
what Photoshop probably go to adobe.com

143
00:10:35,820 --> 00:10:40,570
and get their promise that the software
is distributed to you over HTTP a

144
00:10:40,570 --> 00:10:44,150
network level adversary can man in the
middle of connection and inject

145
00:10:44,150 --> 00:10:49,000
malicious code that you might be
thinking 2015 how much shoppers really

146
00:10:49,000 --> 00:10:54,650
downloaded over HTTP I looked at all the
software that was installed on my dog we

147
00:10:54,650 --> 00:11:01,870
can see that about two-thirds of it was
distributed over HTTP now I don't think

148
00:11:01,870 --> 00:11:05,420
it's because the companies are
necessarily stupid they understand as

149
00:11:05,420 --> 00:11:09,060
you either the difference between
securing a download and validating that

150
00:11:09,060 --> 00:11:12,689
outlet and they all require on this PC
software that's built into the operating

151
00:11:12,690 --> 00:11:17,310
system called gatekeeper to verify that
the download has not been tampered with

152
00:11:17,310 --> 00:11:21,680
and trans the problem is that we find
the gatekeeper bypass which I'll talk

153
00:11:21,680 --> 00:11:25,060
about this breaks this whole scheme and
again allow the network level adversary

154
00:11:25,060 --> 00:11:32,369
the ability to manage metal detector you
think a Patrick you are right now our

155
00:11:32,370 --> 00:11:36,260
analysts are probably downloading the
random software from down random sites

156
00:11:36,260 --> 00:11:40,480
you know sure a lot of its gonna be over
HTTP I said right there what about

157
00:11:40,480 --> 00:11:44,740
security so you guys are both supposed
to be the shining examples of how to do

158
00:11:44,740 --> 00:11:45,900
things right

159
00:11:45,900 --> 00:11:50,079
earlier this year when I went and
downloaded the software I try to find

160
00:11:50,080 --> 00:11:54,360
every piece of security software that I
can find all of them were downloaded

161
00:11:54,360 --> 00:12:01,050
over HTTP kind of blew my mind was like
really I see the problem is he's all

162
00:12:01,050 --> 00:12:05,050
need route to install so I'm a network
level adversary I'm just gonna wait till

163
00:12:05,050 --> 00:12:09,479
user goes and gets an antivirus product
injection malicious code into it and

164
00:12:09,480 --> 00:12:13,530
then I'm gonna check the box that way I
want to talk a little bit about

165
00:12:13,530 --> 00:12:18,870
persistence which is something that
basically all now airstrikes persistence

166
00:12:18,870 --> 00:12:22,880
in the context of the stock just means
gaining automatic code execution every

167
00:12:22,880 --> 00:12:28,020
time the box restarts obviously this is
something that malware likes to do that

168
00:12:28,020 --> 00:12:31,100
in the current methods are pretty much
all large items which are similar to

169
00:12:31,100 --> 00:12:33,520
Windows services and also login ID

170
00:12:33,520 --> 00:12:38,610
these are really lame first and foremost
they're really not stuffy so for example

171
00:12:38,610 --> 00:12:43,220
you can see me back protector that's
another OS X malware samples like a

172
00:12:43,220 --> 00:12:48,360
rogue AV product it registers itself as
a log-in items share this means that

173
00:12:48,360 --> 00:12:51,790
every time the computer is restarted
it'll get automatic code execution so

174
00:12:51,790 --> 00:12:55,650
the malware can re-run it also means if
the user goes and looks at their login

175
00:12:55,650 --> 00:13:00,090
items they will see the now where they
can delete it from there as well as an

176
00:13:00,090 --> 00:13:04,220
hour off her if your mouth we're showing
up in some UI you're you're doing

177
00:13:04,220 --> 00:13:04,910
something wrong

178
00:13:04,910 --> 00:13:08,930
similarly watch Damon Sperry easy to
detect as well

179
00:13:08,930 --> 00:13:13,099
wire lurker them our sample that the
media was all hyped up on how advanced

180
00:13:13,100 --> 00:13:18,310
that was it installs or news large dance
this means to me for new processes but

181
00:13:18,310 --> 00:13:22,589
also if you don't watch them as you can
see for new entries here so i got really

182
00:13:22,590 --> 00:13:28,510
really not stealthy super easy to detect
the methods that are currently use and a

183
00:13:28,510 --> 00:13:33,240
sock so let's talk about some better
race now I'm a big fan of minor

184
00:13:33,240 --> 00:13:37,420
infection kind of a more old-school
technique it's really very powerful

185
00:13:37,420 --> 00:13:42,500
first it's really stealthy you inject
all your viral code into the binary

186
00:13:42,500 --> 00:13:46,010
infecting there's not going to be any
new processes running there's not gonna

187
00:13:46,010 --> 00:13:50,410
be any other files on the file system
also difficult to disinfect most current

188
00:13:50,410 --> 00:13:54,459
OS X now are you can simply delete an
executable and delete for example there

189
00:13:54,460 --> 00:13:58,920
autorun keyless entry and your boxes is
clean the malware is gonna be gone in

190
00:13:58,920 --> 00:14:03,150
our heads embedded itself inspected of
legitimate buyer it's probably gonna be

191
00:14:03,150 --> 00:14:07,920
hard to automatically disinfected and
then finally you get load time process

192
00:14:07,920 --> 00:14:13,020
injection for example you target the
user's browser every time the browser is

193
00:14:13,020 --> 00:14:17,550
executed your malicious viral code will
get executed as well within the trust

194
00:14:17,550 --> 00:14:21,229
that context of the browser so this
means if there's a personal firewall

195
00:14:21,230 --> 00:14:24,600
thats monitoring for entrusting
connection it's obviously going to trust

196
00:14:24,600 --> 00:14:28,580
the browser which means your viral code
is also gonna be trusted as well now

197
00:14:28,580 --> 00:14:32,540
there's a problem at least from my point
of view of the shower and that is Els

198
00:14:32,540 --> 00:14:36,290
exploder validates the digital signature
so if we just try to infected by a hurry

199
00:14:36,290 --> 00:14:42,010
its gonna tell us you know get out of
here so how secure is this mechanism at

200
00:14:42,010 --> 00:14:45,840
validating these digital signatures well
look at how it works basically what the

201
00:14:45,840 --> 00:14:46,640
loader does

202
00:14:46,640 --> 00:14:50,770
looks for a signature block within the
binary signature block its dared

203
00:14:50,770 --> 00:14:56,780
validated work although unlike iOS OSX
allows unsigned applications to execute

204
00:14:56,780 --> 00:15:01,430
so we can do is we can simply pull out
that signature block and then in fact

205
00:15:01,430 --> 00:15:05,880
way the letter has no concept of state
doesn't say hey designer used to be

206
00:15:05,880 --> 00:15:06,720
signed in it

207
00:15:06,720 --> 00:15:10,760
not anymore so something weird going on
doesn't say hey this is an apple binary

208
00:15:10,760 --> 00:15:14,939
that should be signed but is now just a
little outside I can't say anything

209
00:15:14,940 --> 00:15:20,060
about it I'm gonna let you run today we
have Safari there's the original hash we

210
00:15:20,060 --> 00:15:25,530
remove the signature block in Jackson
viral code obviously changes but then it

211
00:15:25,530 --> 00:15:30,540
no problems last night we can infect
away now there's a myriad of ways that

212
00:15:30,540 --> 00:15:34,969
you couldn't back to Moscow by re
talking to itself but some basic ideas

213
00:15:34,970 --> 00:15:39,380
you get obviously hijacking entry point
you could add a new dependency and get

214
00:15:39,380 --> 00:15:44,270
the benefits of this self-contained
somewhat difficult to detect and also

215
00:15:44,270 --> 00:15:50,410
difficult to disinfect my favorite OSX
persistence mechanism though is dilated

216
00:15:50,410 --> 00:15:54,620
hijacking and this is very conceptually
similar to DLL load hijacking on Windows

217
00:15:54,620 --> 00:15:59,010
basically if application all you have to
do is a piece of malware or malicious

218
00:15:59,010 --> 00:16:04,620
adversary is plant a militia style about
the files and then anytime that Apple

219
00:16:04,620 --> 00:16:08,250
application is started either
automatically by the operating system or

220
00:16:08,250 --> 00:16:12,550
manually by the user or malicious
tileable get automatically loaded and

221
00:16:12,550 --> 00:16:16,540
executed so pretty cool so here for this
is conceptually how it all works there's

222
00:16:16,540 --> 00:16:20,689
an application that says hey I have a
dependency on some die lib now there

223
00:16:20,690 --> 00:16:24,790
exists in areas where the loader will
basically look in multiple locations for

224
00:16:24,790 --> 00:16:29,459
that diet so the legitimate daily Blic
lives are exists in a secondary search

225
00:16:29,460 --> 00:16:33,760
directory is a malicious adversary
complaint heard I live in the primary

226
00:16:33,760 --> 00:16:37,370
search path that search directory and
from then on to load it will then

227
00:16:37,370 --> 00:16:44,620
blindly naively find loading executor
must talk about this at DEFCON so if

228
00:16:44,620 --> 00:16:45,779
you're interested in that

229
00:16:45,779 --> 00:16:51,079
I would love to talk so how do we use
this for persistence so on my computer

230
00:16:51,079 --> 00:16:55,620
there is this apple pie and recalled the
iCloud photostream agent it's

231
00:16:55,620 --> 00:16:58,970
automatically started by the operating
system every time the computer reboots

232
00:16:58,970 --> 00:17:03,920
and is unable to dilate hijack so we can
do is we can figure malicious died lib

233
00:17:03,920 --> 00:17:06,549
and then save it to distract me on the
false

234
00:17:06,549 --> 00:17:11,579
this is all we have to do now every time
the boxes restarted our dialogue will

235
00:17:11,579 --> 00:17:16,250
get automatically loaded and executed
benefits again it's a novel a time easy

236
00:17:16,250 --> 00:17:18,760
a novel technique probably not to be
detected

237
00:17:18,760 --> 00:17:22,400
there's also no new processes I really
like the user looks at the process

238
00:17:22,400 --> 00:17:26,909
listing Activity Monitor not gonna see
anything this also requires no by

239
00:17:26,909 --> 00:17:30,750
narrowest modifications not breaking any
digital signatures are doing anything

240
00:17:30,750 --> 00:17:35,880
that weird and finally abuses legitimate
functionality of the operators talk to

241
00:17:35,880 --> 00:17:40,570
Apple about this technique several
months ago and their beta software that

242
00:17:40,570 --> 00:17:46,010
they're still releasing is still
vulnerable to this attack right here

243
00:17:46,010 --> 00:17:50,559
you're interested in more actually read
a white paper from Virus Bulletin about

244
00:17:50,559 --> 00:17:54,899
twenty plus techniques that now we're
could use to persist what about

245
00:17:54,899 --> 00:18:00,129
self-defense now I've always wondered
why and how far does not employ more

246
00:18:00,130 --> 00:18:05,039
self defense mechanisms to prevent
analysis for detection window side of

247
00:18:05,039 --> 00:18:09,830
the house we see a lot of Maui that has
anti analysis and i bugging those kind

248
00:18:09,830 --> 00:18:14,070
of things built in but the Mallory
seemed really doesn't have that sure

249
00:18:14,070 --> 00:18:18,830
some samples are packed with UPS so you
can just run you know you get stash D

250
00:18:18,830 --> 00:18:24,850
and you know you get the attack battery
so this is problematic I think because

251
00:18:24,850 --> 00:18:28,120
it makes it way too easy for the
antivirus companies makes it really easy

252
00:18:28,120 --> 00:18:29,570
to find them our

253
00:18:29,570 --> 00:18:33,740
trivial analyzing power and it's a
tribute to disinfect so I talked about

254
00:18:33,740 --> 00:18:38,549
some self defense techniques I think
we're could or should be using let's

255
00:18:38,549 --> 00:18:43,350
start with talking about protecting our
I think encrypting one's mouth is

256
00:18:43,350 --> 00:18:46,770
generally a good idea makes detection
harder and also makes it more difficult

257
00:18:46,770 --> 00:18:51,950
to analyze so let's start with a simple
method that leverages the fact that the

258
00:18:51,950 --> 00:18:57,010
OS X loader natively support encrypted
binaries is a cool feature Apple

259
00:18:57,010 --> 00:18:58,620
actually makes use of this

260
00:18:58,620 --> 00:19:03,770
to protect them of their applications
and finder the doc maybe I teachings but

261
00:19:03,770 --> 00:19:08,389
it's a static encryption key which you
can see on the screen and it's also a

262
00:19:08,390 --> 00:19:11,830
symmetric encryption algorithms that
means we can write our own custom

263
00:19:11,830 --> 00:19:17,600
crypter and then encrypt custom minors
so that's exactly what I did a role in

264
00:19:17,600 --> 00:19:21,389
the crypt where they can take any
compiled Marco binary malicious lawn or

265
00:19:21,390 --> 00:19:22,000
not

266
00:19:22,000 --> 00:19:25,930
top you see what I run strains on the
unencrypted binary we can see exactly

267
00:19:25,930 --> 00:19:30,360
what it's doing it then encrypt it with
this customer gripped her cane uses

268
00:19:30,360 --> 00:19:34,649
blowfish and that static encryption key
and then get we run strings on it we can

269
00:19:34,650 --> 00:19:38,400
see that everything can I test it is
also on some known malware and got about

270
00:19:38,400 --> 00:19:44,690
50 percent drop in detection technique
is great it's free and easy it's free

271
00:19:44,690 --> 00:19:48,270
and the sense that OS X understands that
you don't have to write custom loader

272
00:19:48,270 --> 00:19:52,440
but since it's a symmetric encryption
scheme with a staticy this also means

273
00:19:52,440 --> 00:19:56,990
analysis tools can decrypt it as well
this is why we only got a 50% detection

274
00:19:56,990 --> 00:20:01,970
drop not so it's not a little bit now
about a compression scheme that's a

275
00:20:01,970 --> 00:20:06,040
little stronger and that will
cryptographically tied a malware to the

276
00:20:06,040 --> 00:20:10,210
target that infected this is in my
opinion really good idea because the way

277
00:20:10,210 --> 00:20:14,030
most mauer is detected these days is not
initially by the antivirus products you

278
00:20:14,030 --> 00:20:18,590
see the reports that like user uploaded
an unknown file to virustotal and then

279
00:20:18,590 --> 00:20:23,500
two months later the AV guy did some
more intense analysis on it and figured

280
00:20:23,500 --> 00:20:29,380
out now if we've tighter encrypted or
malware directly to that target this

281
00:20:29,380 --> 00:20:33,870
would prevent that kind of attack we can
ensure that the bindery cannot be

282
00:20:33,870 --> 00:20:38,919
decrypted are executed on a secondary
system so how does one go about doing

283
00:20:38,920 --> 00:20:41,200
this while there's a public research
paper that was published in the

284
00:20:41,200 --> 00:20:44,570
mid-nineties that describes a
mathematical constructs about how to do

285
00:20:44,570 --> 00:20:48,860
this not go through all of them that
they just described the way it works so

286
00:20:48,860 --> 00:20:52,820
when it gets this to a system that once
were in fact it has a custom installer

287
00:20:52,820 --> 00:20:56,840
and uninstaller basically queries the
environment to get some environmental

288
00:20:56,840 --> 00:21:02,409
observation if you like the UUID of them
a computer that it's on

289
00:21:02,410 --> 00:21:06,870
venues as the encryption key and
encrypts the persistent opponent of the

290
00:21:06,870 --> 00:21:11,159
battery and then hashes that encryption
key and jams that into the mouth and

291
00:21:11,160 --> 00:21:17,030
then the installer now every time an
hour is run its main component is

292
00:21:17,030 --> 00:21:21,930
encrypted with that UUID and has that
embedded Hash House a little older stuff

293
00:21:21,930 --> 00:21:26,970
that will require a thats environment
and says hey what's the UUID it gets the

294
00:21:26,970 --> 00:21:32,020
UUID of the system is executing on Ash's
that compares that to its embedded hash

295
00:21:32,020 --> 00:21:37,840
embedded hash matches it knows that it
has the correct UUID I think about this

296
00:21:37,840 --> 00:21:42,520
if there's an hour as ever executed on a
different system the UUID it gets is not

297
00:21:42,520 --> 00:21:47,629
gonna hashes that match the embedded
this is why the now is called clueless

298
00:21:47,630 --> 00:21:51,180
because the Mallard of actually know
what its encryption keys that knows how

299
00:21:51,180 --> 00:21:55,770
to find it and and detect when it's the
correct one but if an analyst can't

300
00:21:55,770 --> 00:22:01,040
predict what the original UUID was they
can't do that in our sample that's not

301
00:22:01,040 --> 00:22:03,960
necessarily a novel concept we see this
used on the Windows side of the house

302
00:22:03,960 --> 00:22:10,110
and again in my mind that this is a very
powerful technique right now you have

303
00:22:10,110 --> 00:22:13,379
this custom environmentally encrypted
blob that you're either and story on the

304
00:22:13,380 --> 00:22:17,100
filesystem encrypted or your downloading
just in time for my commanding officer

305
00:22:17,100 --> 00:22:21,760
either way you're gonna have to write a
custom loader because OS X is obviously

306
00:22:21,760 --> 00:22:25,790
not going to be able to automatically
execute this by now normally if you have

307
00:22:25,790 --> 00:22:29,379
to write a custom order you've got your
work cut out for you so so much probably

308
00:22:29,380 --> 00:22:33,000
written PU loaders for Windows
PowerShell code

309
00:22:33,000 --> 00:22:38,130
bunch of things like mapping the image
loading dependencies linking stuff and

310
00:22:38,130 --> 00:22:42,280
this is a pain in the butt turns out
though that OS X supports loading of an

311
00:22:42,280 --> 00:22:47,399
in-memory following which is great so
basically what the Maori can do is have

312
00:22:47,400 --> 00:22:50,290
lost uploader that require ease the
environment and the correct

313
00:22:50,290 --> 00:22:54,370
environmental decrypt itself just had
this flat file image that's a memory

314
00:22:54,370 --> 00:23:01,040
that needs to be mapped linked loaded OS
X can handle such as a flat file image

315
00:23:01,040 --> 00:23:06,840
even if its memory so we just basically
call some LSX API's on this and OSX full

316
00:23:06,840 --> 00:23:11,050
load and execute it just as it had
loaded off the filesystem Apple used to

317
00:23:11,050 --> 00:23:15,090
host some sample code shown the state
don't anymore but if you google

318
00:23:15,090 --> 00:23:20,770
memory-based bundle you can find a
source code for self-defense technique

319
00:23:20,770 --> 00:23:25,510
is hiding silence I've seen Windows now
where do this but I haven't seen it done

320
00:23:25,510 --> 00:23:28,730
on OSX and when I googled this I didn't
find any public research discussing this

321
00:23:28,730 --> 00:23:34,050
technique turns out actually pretty easy
to achieve basic hiding in short there's

322
00:23:34,050 --> 00:23:38,780
in process structures that describes all
the dialogues that are loaded with in a

323
00:23:38,780 --> 00:23:43,580
process so tools such as the buggers
worry these in process data structures

324
00:23:43,580 --> 00:23:50,250
to get a list of a dialogue can do or an
external processes simply modify these

325
00:23:50,250 --> 00:23:54,530
structures and basically unlike the
dialogue from the list this is exactly

326
00:23:54,530 --> 00:23:58,250
what we do we have a little unlinked I
libtool that we execute and it will

327
00:23:58,250 --> 00:24:02,070
basically just remove the dialogue from
the array of loaded the eyelids and then

328
00:24:02,070 --> 00:24:06,929
when we use it to bugger such as Ltd
Shukri that and say hey what are loaded

329
00:24:06,930 --> 00:24:08,860
I think there's something malicious may
be here

330
00:24:08,860 --> 00:24:13,189
LBB won't see the dilated and won't
return it so again just increases the

331
00:24:13,190 --> 00:24:18,450
stuff that there's definitely a myriad
of other ideas that now it could use to

332
00:24:18,450 --> 00:24:23,580
protect or defend itself I just want to
briefly mentioned first thing we want to

333
00:24:23,580 --> 00:24:28,120
do is make them out are harder to delete
mention most OS X now we're standing

334
00:24:28,120 --> 00:24:31,790
alone and if a user or an antivirus
product detects it they can just delete

335
00:24:31,790 --> 00:24:32,320
it

336
00:24:32,320 --> 00:24:37,220
type are a popular console no delete it
really really trivial to disinfect all

337
00:24:37,220 --> 00:24:41,070
turns out there's this command to change
flag command that you can actually make

338
00:24:41,070 --> 00:24:46,850
file unbelievable unless the user manual
boot into single user mode an excuse so

339
00:24:46,850 --> 00:24:51,070
this is what we do you can see we first
execute a command on our militia style

340
00:24:51,070 --> 00:24:55,250
and then we're still in the same session
we just set the side but we can now run

341
00:24:55,250 --> 00:24:59,240
set a flag or delete that binary so this
again

342
00:24:59,240 --> 00:25:04,080
complicates the lesion probably prevents
an antivirus products from automatically

343
00:25:04,080 --> 00:25:09,639
deleting the malware self-defense
mechanism is self monitoring the worst

344
00:25:09,640 --> 00:25:13,330
thing that can happen two piece of
malware is compromised so now where

345
00:25:13,330 --> 00:25:17,850
should know if it's been detected as I
mentioned the way most mauer is found as

346
00:25:17,850 --> 00:25:23,760
a user find some weird and upload it to
virustotal copies it to a USB stick

347
00:25:23,760 --> 00:25:28,420
and passes it off to announce now where
should know if this has happened rights

348
00:25:28,420 --> 00:25:30,130
running on the system where that
happened

349
00:25:30,130 --> 00:25:36,000
usually so you can use DTrace RFS tends
to monitor file system access so you can

350
00:25:36,000 --> 00:25:39,970
see if someone's making a copy of you to
a USB stick or even poking around in the

351
00:25:39,970 --> 00:25:44,880
directory where you left off the monitor
the network and see hey I am I being

352
00:25:44,880 --> 00:25:49,010
uploaded to virustotal and if you detect
any of these events like blow up the

353
00:25:49,010 --> 00:25:57,150
computer or at least this will basically
prevent you from being bored I think

354
00:25:57,150 --> 00:26:01,510
would be really cool is too soon as I'm
our author register a hash of your bike

355
00:26:01,510 --> 00:26:06,350
with Google as an Edward probably also
register a whole bunch of by night

356
00:26:06,350 --> 00:26:10,590
hashes well to kind of planned an
analyst the first thing I do whatever I

357
00:26:10,590 --> 00:26:14,459
get a militia sample is a Google the
hash because i wana C virus told about

358
00:26:14,460 --> 00:26:18,940
this someone written analysis support is
now our analysts use dashes as a way to

359
00:26:18,940 --> 00:26:25,540
identify them our author had registered
the hash of his or her mouth where as a

360
00:26:25,540 --> 00:26:30,580
google adword they would get over that I
just googled that this be a great early

361
00:26:30,580 --> 00:26:34,179
warning system for that make it then you
know maybe start building a new piece of

362
00:26:34,180 --> 00:26:40,420
malware disinfect their targets are
sensing a second doctor writes what

363
00:26:40,420 --> 00:26:43,880
about some specific features our
capabilities as I mentioned current

364
00:26:43,880 --> 00:26:48,110
malware has sufficient features to get
the job done but i wanna talk about one

365
00:26:48,110 --> 00:26:52,510
feature that's pretty powerful that I
feel is underutilized and thats process

366
00:26:52,510 --> 00:26:57,879
injection so we start with looking at
runtime basically we want to be able to

367
00:26:57,880 --> 00:27:03,510
inject code a dilated into an arbitrary
remote process now there is talk about

368
00:27:03,510 --> 00:27:07,330
this is the public samples that are out
there there is a little outdated or

369
00:27:07,330 --> 00:27:12,080
they're intentionally broken so let's
talk about exactly how we can do

370
00:27:12,080 --> 00:27:15,820
runtime processing checks so the first
thing is you have to know the

371
00:27:15,820 --> 00:27:20,540
architecture of the target process this
is operationally very important if you

372
00:27:20,540 --> 00:27:25,080
try to inject 64 bit code into a 32 bit
processor vice herself is gonna and

373
00:27:25,080 --> 00:27:26,199
horribly

374
00:27:26,200 --> 00:27:29,920
little talk about this but practically
this is a very important step

375
00:27:29,920 --> 00:27:32,380
turns out actually pretty easy to figure
out

376
00:27:32,380 --> 00:27:36,420
what the remote architecture is you call
the proc pit info function in this will

377
00:27:36,420 --> 00:27:42,980
return a structure that has a flag set
to 64 bit or 32 that now you know what

378
00:27:42,980 --> 00:27:47,700
the architecture of the target in the
process is you can start crafting some

379
00:27:47,700 --> 00:27:51,250
shellcode I shall go could do pretty
much anything this is some simple

380
00:27:51,250 --> 00:27:56,540
shellcode from the Mac OSX internal
website does three things first and

381
00:27:56,540 --> 00:28:00,820
calls P thread set self and this
promotes the injected thread which is

382
00:28:00,820 --> 00:28:05,460
going to be an injected mock thread to a
fully compliant Pete read the reason you

383
00:28:05,460 --> 00:28:09,170
do this is API's within the remote
processor can expect just tried to be

384
00:28:09,170 --> 00:28:12,610
happy threat not just democracy have to
do this otherwise your gonna

385
00:28:12,610 --> 00:28:19,360
mysteriously crash at any calls at DL
open to plan and attackers died 11 to

386
00:28:19,360 --> 00:28:23,449
the context of the term profits this is
actually like long load library on

387
00:28:23,450 --> 00:28:27,770
Windows and she'll go just sleeps that
assumes that the militias dialogue which

388
00:28:27,770 --> 00:28:32,540
is now in the remote process will do
whatever needs to do so to actually

389
00:28:32,540 --> 00:28:36,340
injected execute shell code you five
things the first thing you have to do is

390
00:28:36,340 --> 00:28:40,800
call task for paired this gives you
access rights to the remote process now

391
00:28:40,800 --> 00:28:44,110
you have to be route to do that so it's
not really too much of a security issue

392
00:28:44,110 --> 00:28:46,959
we can get root talk about that in a sec

393
00:28:46,960 --> 00:28:51,780
what you have root and you call task for
you can now start injecting code

394
00:28:51,780 --> 00:28:54,820
allocating memory so the first thing you
do is you allocate to chunks of memory

395
00:28:54,820 --> 00:28:59,850
one for the stack of the remote unit
rate and then one for the actual

396
00:28:59,850 --> 00:29:04,560
shellcode you don't call him right to
copy in the shellcode you set it to be

397
00:29:04,560 --> 00:29:09,040
executable and you simply call thread
create running which is synonymous to

398
00:29:09,040 --> 00:29:15,490
create a thread on Windows and will
start a new thread to run time code

399
00:29:15,490 --> 00:29:18,700
injection is nice because it allows you
to target arbitrary process but it does

400
00:29:18,700 --> 00:29:22,520
have some down sides so first you need
an external monitoring component that's

401
00:29:22,520 --> 00:29:26,600
ready running to say you inject into the
user's browser you have to have some

402
00:29:26,600 --> 00:29:29,149
piece of our that's already running on
the system that's waiting for the

403
00:29:29,150 --> 00:29:32,800
browser and then triggers the injection
this means more things that you can

404
00:29:32,800 --> 00:29:38,480
detect also a touch complex shellcode
like that and finally it's easy in my

405
00:29:38,480 --> 00:29:42,340
opinion to detect you know process Asian
generally be creating

406
00:29:42,340 --> 00:29:48,178
threads and process so let's look at a
low time injection so we can use dial-up

407
00:29:48,179 --> 00:29:51,500
hijacked and to gain low time code
execution whenever of honorable

408
00:29:51,500 --> 00:29:57,230
application starts by simply dropping
malicious pilot those look at tax code

409
00:29:57,230 --> 00:30:02,600
tax code which is Apple's IDE would make
an attractive target from our home our

410
00:30:02,600 --> 00:30:06,580
could use this as an autonomous
propagation vector right it's chilling

411
00:30:06,580 --> 00:30:10,779
in Xcode and it's easy developer
building a release version of the binary

412
00:30:10,779 --> 00:30:14,150
to ship out the Mallorcan just injection
moshus code at the source code or

413
00:30:14,150 --> 00:30:18,110
compiler level that's a really super
salty way for it to automatically

414
00:30:18,110 --> 00:30:22,279
property without the tax code is
vulnerable to a dialogue hijack attacks

415
00:30:22,279 --> 00:30:26,529
so we can simply drop a malicious
dialect the file system and now every

416
00:30:26,529 --> 00:30:27,029
time

417
00:30:27,029 --> 00:30:31,720
Expo starts our malicious tileable get
automatically loaded and executed by the

418
00:30:31,720 --> 00:30:39,070
loader within the context of Xcode now
you can have the most sophisticated an

419
00:30:39,070 --> 00:30:43,220
hour in the world but as I get Scott
came over like the worst thing that can

420
00:30:43,220 --> 00:30:48,080
happen for us I wanna talk about
bypassing some security conditions that

421
00:30:48,080 --> 00:30:53,770
either detect or prevent now and then
talk about how we can bypass the OS X

422
00:30:53,770 --> 00:30:58,240
mauer is detected or blocked by he's
security mechanisms can start by talking

423
00:30:58,240 --> 00:31:03,380
about apples I think this is really late
Apple love this though they love to tout

424
00:31:03,380 --> 00:31:07,240
you know hey there are security
mechanisms are awesome to protect you

425
00:31:07,240 --> 00:31:11,409
but also you can bypass all of them so I
think this exudes a false sense of

426
00:31:11,409 --> 00:31:16,720
security so let's start with talking
about gatekeeper member I mention that

427
00:31:16,720 --> 00:31:21,020
pretty much a lot of software is
downloaded over HTTP they all count on

428
00:31:21,020 --> 00:31:24,690
gatekeeper to verify that the software
has not been modified in transit the

429
00:31:24,690 --> 00:31:27,039
digital signature is still valid

430
00:31:27,039 --> 00:31:32,640
gatekeeper also blocks sunshine dial
download so it does protect user who's

431
00:31:32,640 --> 00:31:37,220
gonna think the flash installer is
really flash installer how to keep your

432
00:31:37,220 --> 00:31:40,649
work well basically anything anytime you
download something from the Internet it

433
00:31:40,649 --> 00:31:45,059
gets tagged with this quarantine action
and then when the application that was

434
00:31:45,059 --> 00:31:50,730
downloaded as run either automatically
by the operating system or the user

435
00:31:50,730 --> 00:31:53,910
double clicks gatekeeper kind of jumps
in the way and says hey wait a minute

436
00:31:53,910 --> 00:31:58,500
this was out I gotta verify it and make
sure that it's sign it hasn't been

437
00:31:58,500 --> 00:32:03,680
modified in transit and actually does a
decent job turns out though the

438
00:32:03,680 --> 00:32:08,370
gatekeeper only verified the download an
application does not verify external

439
00:32:08,370 --> 00:32:13,939
content which is normally not a problem
unless the application that was

440
00:32:13,940 --> 00:32:19,210
downloaded has an external relative
reference to some content that loads so

441
00:32:19,210 --> 00:32:23,710
we can do to bypass gatekeeper is while
three easy steps first we find an apple

442
00:32:23,710 --> 00:32:28,830
cider or Mac App Store app that contains
an external relative reference to hijack

443
00:32:28,830 --> 00:32:33,300
will dial it now we create a dmg or zip
file and ensure we can also inject this

444
00:32:33,300 --> 00:32:38,460
into a legitimate software download if
we have network level access and then

445
00:32:38,460 --> 00:32:40,460
flashed

446
00:32:40,460 --> 00:32:44,320
so this is how it all kinda works again
we have gatekeeper sets of the match

447
00:32:44,320 --> 00:32:49,370
setting saying only allowed code from
the Mac App Store build this malicious

448
00:32:49,370 --> 00:32:55,370
dmg file we control the icon the name
and the background so we can make it

449
00:32:55,370 --> 00:33:00,159
look however alright so hidden behind
this is an apple signed application that

450
00:33:00,160 --> 00:33:06,440
has an external reference to some code
that we can actually load so if a user

451
00:33:06,440 --> 00:33:09,840
double clicks they will still get a
standard pop up because the content was

452
00:33:09,840 --> 00:33:13,770
downloaded from the Internet now this is
a generic pop up that will occur for any

453
00:33:13,770 --> 00:33:16,050
software you'd you download from the
Internet

454
00:33:16,050 --> 00:33:19,960
so even if it's a sign version of same
Google Chrome get the same pop-up note

455
00:33:19,960 --> 00:33:24,430
that we have it saying only allow code
from the Mac App Store we have fun side

456
00:33:24,430 --> 00:33:27,810
malicious dilated here that should not
get loaded next year but because of his

457
00:33:27,810 --> 00:33:33,679
ability they do I reported the Apple
they actually but as we'll see at the

458
00:33:33,680 --> 00:33:39,330
end we can build around Apple's patches
well I'll talk about sex protect expert

459
00:33:39,330 --> 00:33:42,790
X is Apple's built-in antivirus product
yet know that there's actually a

460
00:33:42,790 --> 00:33:48,610
built-in antivirus into Mac decent job
detecting or protect blocking known

461
00:33:48,610 --> 00:33:52,600
power so here we can see when a user
tries to download an application that

462
00:33:52,600 --> 00:33:53,169
has

463
00:33:53,170 --> 00:34:00,270
it'll pop up and say hey how this one
turns out it's a very very basic

464
00:34:00,270 --> 00:34:04,070
antivirus tool that's based on
signatures such as files

465
00:34:04,070 --> 00:34:08,580
ashes so here we can see this is the
actual signature for I was based on a

466
00:34:08,580 --> 00:34:13,739
hash this is really lame because this
means we can simply reading pile them

467
00:34:13,739 --> 00:34:19,229
our which will give it a new hash or for
writing new mouse about this at all or

468
00:34:19,230 --> 00:34:22,600
in this case of reaction just rename
them out there so I can get checked it

469
00:34:22,600 --> 00:34:29,139
anymore so trivial to bypass will have a
sandbox that sand box code from the Mac

470
00:34:29,139 --> 00:34:32,120
App Store in some of its needed at this
is again as a good idea because of these

471
00:34:32,120 --> 00:34:36,279
absurd malicious or get exploited the
attacker that has to break out of the

472
00:34:36,280 --> 00:34:40,570
sand box in order to do anything useful
turns out though that while conceptually

473
00:34:40,570 --> 00:34:46,470
this is pretty strong our friends at
Google or finding tons of OSX bob's as

474
00:34:46,469 --> 00:34:50,529
are some of the researchers that can
escape sent so I really don't think this

475
00:34:50,530 --> 00:34:55,360
is an obstacle for any advanced at
sears.com

476
00:34:55,360 --> 00:35:00,460
code signing requirements so to protect
the colonel from malicious code for

477
00:35:00,460 --> 00:35:03,320
example rootkits or modified kernel
extensions that have been infected

478
00:35:03,320 --> 00:35:08,660
starting with maverick's all kernel
extensions to bside try to load unsigned

479
00:35:08,660 --> 00:35:13,299
kernel extension or infected existing
kernel extension it's gonna fail this is

480
00:35:13,300 --> 00:35:17,020
not actually a novel security idea
Windows has been doing this for years

481
00:35:17,020 --> 00:35:22,250
and is actually in my opinion a decent
idea turns out though that the signature

482
00:35:22,250 --> 00:35:27,280
validation is done in user mode this is
a total fail because we have a local

483
00:35:27,280 --> 00:35:31,810
attacker or some local now that's trying
to load the kernel extension enduring 0

484
00:35:31,810 --> 00:35:37,220
so it's at the same level as wise as the
kernel extension signature checks so

485
00:35:37,220 --> 00:35:41,689
obviously an attacker to interpret these
checks and load on psycho radio ways to

486
00:35:41,690 --> 00:35:46,120
do this I think the easiest ways there's
this utility called caps load max load

487
00:35:46,120 --> 00:35:51,560
basically talks to this Damon and loads
after the daemon verify the signature we

488
00:35:51,560 --> 00:35:55,770
just unloaded that colonel Damon tax
load will try to load the extension

489
00:35:55,770 --> 00:36:00,770
directly itself as an open source tool
we can download at download that tool

490
00:36:00,770 --> 00:36:05,250
just comment out the signature check and
now we have this custom kernel extension

491
00:36:05,250 --> 00:36:09,350
ladder that will load on cyclic sessions
obviously you can also directly talk to

492
00:36:09,350 --> 00:36:11,690
the syscall interfaces in the kernel

493
00:36:11,690 --> 00:36:13,890
those aren't doing any checks either but

494
00:36:13,890 --> 00:36:17,770
apple provides a nice chilly that we can
use so again failed to load unsigned

495
00:36:17,770 --> 00:36:22,920
extensions now for some of these
bypasses for example the extension you

496
00:36:22,920 --> 00:36:27,670
need grouped all turned out really not
that hard to get root on OSX there is

497
00:36:27,670 --> 00:36:31,680
this great book called root pipe that
was I believe introduced in the

498
00:36:31,680 --> 00:36:36,129
inception of the west and all the back
in 2001 was recently found by this guy

499
00:36:36,130 --> 00:36:41,340
named Emil Apple patched it and took me
like 10 minutes to bypass Apple's patch

500
00:36:41,340 --> 00:36:45,270
and that's not saying like I'm all
skills just like apples passion really

501
00:36:45,270 --> 00:36:50,400
really back again this provide a trivial
a for any local attacker to get root

502
00:36:50,400 --> 00:36:54,890
Xbox getting another DEFCON talk about
the details of this vulnerability how is

503
00:36:54,890 --> 00:36:59,009
able to bypass the patch so this is
interests interesting you check out the

504
00:36:59,010 --> 00:37:01,970
Stockwell turned out about a week ago

505
00:37:01,970 --> 00:37:07,669
Stefan released another bug that is
fully untaxed again provides local

506
00:37:07,670 --> 00:37:10,960
adversaries or malware the ability to
get root and yesterday we actually

507
00:37:10,960 --> 00:37:14,280
started using this in the wild

508
00:37:14,280 --> 00:37:18,500
getting a root really not that
complicated so in my opinion Apple's

509
00:37:18,500 --> 00:37:23,320
built-in power medications have a joke
about third party ones these are the

510
00:37:23,320 --> 00:37:27,080
guys that charge you money and have one
job to protect you so let's see how they

511
00:37:27,080 --> 00:37:31,230
do well chance posts it turns out that
most of them are based on static

512
00:37:31,230 --> 00:37:35,890
signature so again you recompile just
right you Mallard then I can detect you

513
00:37:35,890 --> 00:37:36,420
at all

514
00:37:36,420 --> 00:37:41,600
combo are more behavior-based so they're
more agnostic towards an hour for

515
00:37:41,600 --> 00:37:45,460
example little snatch blocks and trusted
connection so we have to look at these a

516
00:37:45,460 --> 00:37:49,730
little closer and see how they work so
little stitches the de facto personal

517
00:37:49,730 --> 00:37:54,260
firewall and seeks to block and trusted
connection from our this is problematic

518
00:37:54,260 --> 00:37:57,980
because as i cn be entrusted so many
tries to connect to its commanding

519
00:37:57,980 --> 00:38:03,480
control server Little Snitch will pop up
the block it so we wanna turns out

520
00:38:03,480 --> 00:38:08,020
Little Snitch takes a binary approach it
trusts known processes and also allows

521
00:38:08,020 --> 00:38:12,810
users to create blanket rules so on my
box GPG key chain is trust it and it's

522
00:38:12,810 --> 00:38:16,430
allowed to talk to the internet this
make sense it's a sign application to

523
00:38:16,430 --> 00:38:18,680
talk to key servers check for updates

524
00:38:18,680 --> 00:38:21,828
turns out though the GPG key chain is
vulnerable to a dialogue hijacked

525
00:38:21,829 --> 00:38:24,930
back so we can do is simply plant
malicious style and then

526
00:38:24,930 --> 00:38:28,868
programmatically execute GPG key chain
or wait for the user to execute it and

527
00:38:28,869 --> 00:38:33,440
then are malicious tileable get executed
and loaded within the context of GPG key

528
00:38:33,440 --> 00:38:37,079
chain can talk to the internet as far as
little stitches concerned it says this

529
00:38:37,079 --> 00:38:41,029
is coming from GPG key chain I trust
that no problem

530
00:38:41,029 --> 00:38:45,349
more generic bypass though we see little
snatch has an unbelievable system rule

531
00:38:45,349 --> 00:38:50,549
that says anybody can talk to iCloud if
you're inside you have your entrusted

532
00:38:50,549 --> 00:38:54,450
even if your mouth where you talk to
that end I guess I thought computers are

533
00:38:54,450 --> 00:38:58,779
normally only think so I reverse
engineer the iCloud protocol and set up

534
00:38:58,779 --> 00:39:03,150
a command control server on another
iCloud account and wrote an hour that

535
00:39:03,150 --> 00:39:07,089
was able to talk to that little snatch
you know sees it so your talking to

536
00:39:07,089 --> 00:39:13,619
iCloud no problem lets you out no popup
to test apple and third-party security

537
00:39:13,619 --> 00:39:17,680
products I created some proof of concept
now it's not the most sophisticated

538
00:39:17,680 --> 00:39:23,219
malware but pretty simple and I think it
represents what most now are generally

539
00:39:23,219 --> 00:39:24,650
does which is persist

540
00:39:24,650 --> 00:39:29,170
still valid excuse so it's distributed
as emotions dmg years that file this

541
00:39:29,170 --> 00:39:33,390
could also be injected into a legitimate
dial-up download uses the gatekeeper

542
00:39:33,390 --> 00:39:38,618
bypass I described to buy past keeper
and avoid the pop ups to execute

543
00:39:38,619 --> 00:39:42,380
unsigned code that persists as a
dialogue hijacks every time the computer

544
00:39:42,380 --> 00:39:47,130
is restarted the code gets automatically
execute some users files and then

545
00:39:47,130 --> 00:39:52,349
download and execute command you also
don't need route to our low as showed

546
00:39:52,349 --> 00:39:56,940
pretty easy to a trip to the test in my
opinion was fairly realistic i download

547
00:39:56,940 --> 00:40:00,920
all the original OS X security tools I
could find to make sure they were all up

548
00:40:00,920 --> 00:40:04,630
to date again they're all downloaded
over HTTP so I guess I could've been

549
00:40:04,630 --> 00:40:09,519
opening myself up to infection at the
same time I then ran the downloaded and

550
00:40:09,519 --> 00:40:10,618
safety Jim

551
00:40:10,619 --> 00:40:15,019
dmg file and basically said do these any
of these eighty products detect any

552
00:40:15,019 --> 00:40:19,799
component of the attack so I try to skew
the attack detest towards these

553
00:40:19,799 --> 00:40:25,680
antivirus products which you have to pay
for a detective persistence the

554
00:40:25,680 --> 00:40:30,549
exploration the download the execute any
component of this this was a fail for

555
00:40:30,549 --> 00:40:31,480
the now

556
00:40:31,480 --> 00:40:35,000
the antivirus product really not too
surprising here for me though none of

557
00:40:35,000 --> 00:40:39,920
them detected any of this so this is my
opinion kind of shows the ineptitude of

558
00:40:39,920 --> 00:40:46,180
this industry are excellent talk about
some of the shots I'm convinced that OS

559
00:40:46,180 --> 00:40:50,609
X security is lacking and hopefully I've
conveyed that you as well as public

560
00:40:50,609 --> 00:40:55,290
holidays as we speak now or medications
and it's trivial to write new or

561
00:40:55,290 --> 00:41:00,859
improved OS X now that can pretty much
bypass everything generically so these

562
00:41:00,859 --> 00:41:03,660
things scare me because I love my Mac
computer and i dont wanna get fucked

563
00:41:03,660 --> 00:41:10,339
yeah I definitely drank the apple juice
I love my Apple products I love Apple I

564
00:41:10,340 --> 00:41:14,380
don't think they love me but I can I can
handle that someone to be part of the

565
00:41:14,380 --> 00:41:19,160
solution and help fellow Mac user so I
decided I should write some security

566
00:41:19,160 --> 00:41:23,879
tools selfishly to protect my Mac but
then give them away for free now

567
00:41:23,880 --> 00:41:29,230
apparently this is a novel content
companies but don't listen to them I

568
00:41:29,230 --> 00:41:33,960
think they just want your money and as
we see they're pretty easy to get around

569
00:41:33,960 --> 00:41:38,550
as well as my side hobby lol sex
security website with some street rules

570
00:41:38,550 --> 00:41:42,680
also about our collection that has all
the samples that I talked about in this

571
00:41:42,680 --> 00:41:46,910
presentation bTW I don't really like to
share so I tried to collect these

572
00:41:46,910 --> 00:41:50,509
together said you guys wanna play at
home feel free and also I wrote some

573
00:41:50,510 --> 00:41:54,190
tools that can protect your Mac again
all totally free so I really just wanna

574
00:41:54,190 --> 00:41:58,840
talk about this so the first tool is
knock knock at the simple goal and I

575
00:41:58,840 --> 00:42:03,850
think I want to tell me who's there
basically what's persistence on my Mac

576
00:42:03,850 --> 00:42:08,319
so you can see listings like launch I
don't curl extensions Login Items

577
00:42:08,320 --> 00:42:12,300
conceptually very similar to auto runs
on Windows although in my opinion this

578
00:42:12,300 --> 00:42:17,310
looks way better my favorite feature
though is the virus total integration

579
00:42:17,310 --> 00:42:21,470
since knock-knock doesn't have a concept
of marriage now we're just shows you

580
00:42:21,470 --> 00:42:25,580
what is persistent it's really nice to
have something that can detect an hour

581
00:42:25,580 --> 00:42:29,029
so with the virus whole integration can
do exactly that can tell you something

582
00:42:29,030 --> 00:42:34,000
is known malware can tell you if a file
is appears to be clean can also tell you

583
00:42:34,000 --> 00:42:38,520
never been seen before which may be
suspicious are interesting besides

584
00:42:38,520 --> 00:42:42,630
thinking about where you can also submit
an unknown files rescan

585
00:42:42,630 --> 00:42:46,240
and you the Report now the only
limitation or perhaps downside

586
00:42:46,240 --> 00:42:49,689
knock-knock its reactive you have to
manually run it doesn't provide

587
00:42:49,690 --> 00:42:53,509
real-time protection so I wanted to
write something that provided real-time

588
00:42:53,509 --> 00:42:57,940
protection so I wrote block block block
block tells you who's there block block

589
00:42:57,940 --> 00:43:03,259
tells you and someone who's basically
provides continual runtime protection

590
00:43:03,259 --> 00:43:07,329
monitoring known persistence locations
that almost like a firewall for autorun

591
00:43:07,329 --> 00:43:11,369
locations you really get a lot of alerts
like a firewall because there's not that

592
00:43:11,369 --> 00:43:16,269
much offer that's resistant so here we
can see it generically blocking schemes

593
00:43:16,269 --> 00:43:21,410
implant so this implant was leaked after
i'd written store so it's kind of cool

594
00:43:21,410 --> 00:43:25,410
to see that it generically detect it
yesterday there was a security report

595
00:43:25,410 --> 00:43:28,109
that came out a few days ago that talked
about some new malware that was

596
00:43:28,109 --> 00:43:31,819
exploiting an unpatched today to gain
privilege escalations a backlight

597
00:43:31,819 --> 00:43:35,279
doesn't detect the exploit block
exploits but when the power goes to

598
00:43:35,279 --> 00:43:39,539
persist even on the malware is running
as root and exploit its root block block

599
00:43:39,539 --> 00:43:45,880
against generically kept us so not bad
for free tools today is called task

600
00:43:45,880 --> 00:43:50,009
explore my opinion it's a better
Activity Monitor released for security

601
00:43:50,009 --> 00:43:57,160
conscious users so features you can run
filters like show me all the non Apple

602
00:43:57,160 --> 00:44:00,740
applications that are running or short
show me all the unsigned code that's

603
00:44:00,740 --> 00:44:06,189
running up my box also can quickly show
you the sighting status of a file if

604
00:44:06,190 --> 00:44:11,269
it's signed by Apple their party inside
hole in duration and then the bottom

605
00:44:11,269 --> 00:44:16,419
pane whatever you select a task can show
you what I lives are loaded with files

606
00:44:16,420 --> 00:44:20,549
are open what network connections
similar again too I guess Process

607
00:44:20,549 --> 00:44:26,150
Explorer on Windows erector briefly one
end with a quick demo that hopefully

608
00:44:26,150 --> 00:44:31,759
drives home the point that you shouldn't
believe Apple's version of OSX called El

609
00:44:31,759 --> 00:44:33,530
Capitan and

610
00:44:33,530 --> 00:44:37,250
there's this quote on their website

611
00:44:37,250 --> 00:44:41,170
sounds like it's going to be released I
don't fully understand at all but I

612
00:44:41,170 --> 00:44:45,380
thought a good test would be to see if
an attacker can take an existing known

613
00:44:45,380 --> 00:44:50,560
piece of malware and successfully target
users running even if Apple's latest

614
00:44:50,560 --> 00:44:56,170
greatest operates so brief demo before
we get started to talk about a few

615
00:44:56,170 --> 00:45:00,470
things first we have deeper enabled
default thing only allowed sign code

616
00:45:00,470 --> 00:45:05,799
code from the Mac App Store not clock is
running down six launch items and we

617
00:45:05,800 --> 00:45:10,750
have two instances of the top of the
current version which will see expert

618
00:45:10,750 --> 00:45:14,780
act and gatekeeper blocking as it's
known now our we don't have a second

619
00:45:14,780 --> 00:45:18,040
version which I have slightly modified I
don't have source code for this now

620
00:45:18,040 --> 00:45:22,210
we're basically just tweaked it so that
it can bypass gatekeeper again and

621
00:45:22,210 --> 00:45:26,980
execute them our even though its on-site
an hour is going to try to pass persist

622
00:45:26,980 --> 00:45:29,250
as a launch agent and run of the process

623
00:45:29,250 --> 00:45:36,560
named job aw come on the video showed
gatekeeper

624
00:45:36,560 --> 00:45:40,160
items and add up the quarantine
attributes for both downloads show that

625
00:45:40,160 --> 00:45:41,940
yes they were downloaded from the
Internet

626
00:45:41,940 --> 00:45:45,630
they have this point he attributes that
there's no process is called jobs that

627
00:45:45,630 --> 00:45:50,580
are running in the first instance and
you can see that says hey Photoshop will

628
00:45:50,580 --> 00:45:54,190
damage your computer it contains I want
this is expert at blocking protecting

629
00:45:54,190 --> 00:45:59,320
user is really easy to bypass that we're
just going to concatenate a string at

630
00:45:59,320 --> 00:46:03,340
the end which changes the hash try to
rerun the current version which has been

631
00:46:03,340 --> 00:46:08,610
modified to get another pop up this is
deeper saying this is inside you can

632
00:46:08,610 --> 00:46:14,640
just say okay doesn't actually execute
the modified version is again has the

633
00:46:14,640 --> 00:46:19,770
unsigned version of gatekeepers gotta
pop up and verify it still because it's

634
00:46:19,770 --> 00:46:21,140
downloaded from the Internet

635
00:46:21,140 --> 00:46:25,680
Adobe installer Photoshop the big file
so it takes awhile when it's done we'll

636
00:46:25,680 --> 00:46:29,830
still see that generic pop up but this
time it allows us to actually run the

637
00:46:29,830 --> 00:46:34,779
code and the users just downloaded this
so they're probably gonna open its gonna

638
00:46:34,780 --> 00:46:37,800
finish installing Photoshop gonna kick
it off

639
00:46:37,800 --> 00:46:46,540
start not talk again to remunerate the
launch items there's this new process

640
00:46:46,540 --> 00:46:49,009
running all job W

641
00:46:49,010 --> 00:47:00,200
we dump its coaching sure we can see
that it is but objects is not find it

642
00:47:00,200 --> 00:47:04,919
all and that also knock knock has
detected a new launch item that the snow

643
00:47:04,920 --> 00:47:11,660
now where'd virustotal has said hey I
know about this I'm gonna fly into

644
00:47:11,660 --> 00:47:15,430
details come talk now about try to get
them to patch this I didn't just like by

645
00:47:15,430 --> 00:47:19,649
a developer certificate do something
like this

646
00:47:19,650 --> 00:47:25,220
bypassing the next version of OSX
supposed to be all secure using known

647
00:47:25,220 --> 00:47:30,700
OSX malware so that bothers me so if you
include a show that current OS X Maler

648
00:47:30,700 --> 00:47:35,859
cutaway I'm kinda amateur but in my
opinion that has led to complacent

649
00:47:35,860 --> 00:47:40,330
security products but Apple's and third
parties so my goal was to illustrate how

650
00:47:40,330 --> 00:47:45,770
simple it is to vastly improved OS X
malware that they can power that can

651
00:47:45,770 --> 00:47:49,940
bypass all these third party at a bar
stools firewalls and Apple's built-in

652
00:47:49,940 --> 00:47:54,650
security medication so hopefully this
can commit as Apple to up their game and

653
00:47:54,650 --> 00:47:57,860
its third party third party companies to
improve their products and in the

654
00:47:57,860 --> 00:48:01,120
meantime check out some free security
tools

655
00:48:01,120 --> 00:48:05,529
thank you for your time I know I got a
few minutes here for Q&A I want to thank

656
00:48:05,530 --> 00:48:06,840
my company snack

657
00:48:06,840 --> 00:48:12,130
a lot of awesome work we have booths so
come by say hi I'll be at the boost you

658
00:48:12,130 --> 00:48:18,110
guys want to chat about us so i can
download the slides Twitter Email I

659
00:48:18,110 --> 00:48:24,880
guess we have two minutes for questions
and answers

660
00:48:24,880 --> 00:48:28,370
any questions

661
00:48:28,370 --> 00:48:37,960
pictures

662
00:48:37,960 --> 00:48:50,320
themselves because what it does is that
queries that in process structure of the

663
00:48:50,320 --> 00:48:54,480
question was just the tool show loaded
modules to have been loaded VNS link

664
00:48:54,480 --> 00:49:00,010
module which is like dynamic dynamically
so I will test that if not that should

665
00:49:00,010 --> 00:49:08,400
be a fairly easy to that very question
yes great question there are open source

666
00:49:08,400 --> 00:49:11,550
versions of them that I have released
again sorry question are these tools

667
00:49:11,550 --> 00:49:16,570
open-source there's an open source
version of knock knock and in their toll

668
00:49:16,570 --> 00:49:20,390
call dial-in hijack scanner which will
and numerate hijacked eyelids are show

669
00:49:20,390 --> 00:49:26,190
you what applications are vulnerable the
UI versions are not open source but he

670
00:49:26,190 --> 00:49:30,520
come talk to me I'm gonna actually be a
black at Arsenal tomorrow Demi's I can

671
00:49:30,520 --> 00:49:41,050
show the source guidebook around any
questions yesterday

672
00:49:41,050 --> 00:50:01,910
I can't hear sorry there is a great talk
later look like something that requires

673
00:50:01,910 --> 00:50:08,069
initial access or you know web based
upon our ability to deliver the firmware

674
00:50:08,070 --> 00:50:11,190
update so again if they infect you at
that level

675
00:50:11,190 --> 00:50:16,700
E Street so hopefully you don't allow
anyone have physical access to your Mac

676
00:50:16,700 --> 00:50:21,359
computer and hopefully there's a web
based attack you know your updated

677
00:50:21,360 --> 00:50:27,290
running software but these tools all run
at the ALS level so they won't be able

678
00:50:27,290 --> 00:50:35,020
to stack that one more question of the
grad time that's a great question

679
00:50:35,020 --> 00:50:40,490
however you know how to respond actually
really good I started talking to the

680
00:50:40,490 --> 00:50:45,299
security team really smart guys he did
get security my opinion it seems that

681
00:50:45,300 --> 00:50:49,760
security in the past was part of their
culture their almost so they're kind of

682
00:50:49,760 --> 00:50:53,350
fighting an uphill battle talking to
them now it seems that security is

683
00:50:53,350 --> 00:50:56,360
becoming paramount and very very
important

684
00:50:56,360 --> 00:51:00,310
still seems though that when the address
security for example implement a new

685
00:51:00,310 --> 00:51:06,140
patch they they understand it but maybe
not from malicious absurd that desk on

686
00:51:06,140 --> 00:51:08,920
talk on getting a patched the
vulnerability but was trivial to

687
00:51:08,920 --> 00:51:11,980
sidestep the vulnerability the code of
honor code was there so I just took a

688
00:51:11,980 --> 00:51:16,110
different path so to me it seems like
there was a little misunderstanding

689
00:51:16,110 --> 00:51:21,950
there but overall they seem to really be
onboard now they're very positive I'm

690
00:51:21,950 --> 00:51:25,520
hoping in the future I'm accidents and
you get more secure even if we have to

691
00:51:25,520 --> 00:51:30,240
give talk like that to push him in that
direction are excited about time I'll be

692
00:51:30,240 --> 00:51:32,529
around here I'll be at the bush

693
00:51:32,530 --> 00:51:37,510
a black at Arsenal giving you talk to
DEFCON so thanks yeah

