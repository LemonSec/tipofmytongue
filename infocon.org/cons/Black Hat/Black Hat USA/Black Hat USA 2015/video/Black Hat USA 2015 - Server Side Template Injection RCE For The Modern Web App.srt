1
00:00:00,000 --> 00:00:04,759
welcome blackout 2015 I got a couple of
quick announcements here there's gonna

2
00:00:04,759 --> 00:00:08,670
be a reception tonight in the business
call at 5:30 p.m. that's located in

3
00:00:08,670 --> 00:00:13,049
Shoreline a there's maps right around if
you need to find out where that's at the

4
00:00:13,049 --> 00:00:20,330
Tony Awards also will take place tonight
mandell abcd room at 6 p.m. if you have

5
00:00:20,330 --> 00:00:23,349
already turned your phone off please do
that now nobody else wants to hear your

6
00:00:23,350 --> 00:00:28,250
ringtone no matter how cool you think it
is and you're in Jasmine ballroom so

7
00:00:28,250 --> 00:00:30,448
that's not really intended to be that's
where you are

8
00:00:30,449 --> 00:00:35,079
this is the session server-side template
injection RCE for the modern web app

9
00:00:35,079 --> 00:00:53,559
with James cattle and make you welcome
can you hear me tell me ok great so I

10
00:00:53,559 --> 00:00:55,280
welcome

11
00:00:55,280 --> 00:01:02,359
good morning this is this is my attempt
by injection and you may be familiar

12
00:01:02,359 --> 00:01:10,330
with being so focused on exploiting a
particular vulnerability you missed

13
00:01:10,330 --> 00:01:15,789
something that was staring you in the
face with feeling tired of seeing pool

14
00:01:15,790 --> 00:01:19,670
off to a pool of the report with nothing
better than cross-site scripting and it

15
00:01:19,670 --> 00:01:28,689
or simply really wanting to get a show
on a box in the session I'll introduce

16
00:01:28,689 --> 00:01:32,789
to you availability that can easily be
mistaken for cross-site scripting but

17
00:01:32,790 --> 00:01:38,900
isn't and share with you a six-step
process for hijacking simply engines and

18
00:01:38,900 --> 00:01:43,050
getting show was on boxes

19
00:01:43,050 --> 00:01:48,399
my first encounter with him play
injection was around eighteen months ago

20
00:01:48,400 --> 00:01:54,480
decline in get an acclaimed arrangement
and stressful environment we will crowd

21
00:01:54,480 --> 00:01:59,440
into this tiny room and there was a
whiteboard up with Italian the number of

22
00:01:59,440 --> 00:02:03,170
shows that each person had got within
the last few weeks so you can imagine

23
00:02:03,170 --> 00:02:09,720
how that felt the application I was
testing hadn't quite strange behavior

24
00:02:09,720 --> 00:02:15,290
will let you customize emails that will
be sent out to uses and these emails

25
00:02:15,290 --> 00:02:21,370
contained some dynamic content so where
the template that I could edit said use

26
00:02:21,370 --> 00:02:23,630
it at first name

27
00:02:23,630 --> 00:02:30,450
the email abuses would contain that
tonight and I thought well that's

28
00:02:30,450 --> 00:02:36,649
interesting I wonder how I could have
used this I know what to do I'll change

29
00:02:36,650 --> 00:02:42,310
it from using first names to use that
password I don't tell me everybody's

30
00:02:42,310 --> 00:02:50,180
past let's put it so I tried that and it
failed completely but what it did do was

31
00:02:50,180 --> 00:02:55,360
tell me that this input was being
processed by the server as a free market

32
00:02:55,360 --> 00:03:00,980
template so I looked up the free market
template documentation and in the

33
00:03:00,980 --> 00:03:05,910
Frequently Asked Questions section is
that something like is it safe is it

34
00:03:05,910 --> 00:03:12,790
safe to allow users to submit template
if the untrusted and also games not and

35
00:03:12,790 --> 00:03:17,060
it went on to list all the terrible
things that as someone can do to your

36
00:03:17,060 --> 00:03:22,660
server with a malicious template and
this led me on a trail of breadcrumbs

37
00:03:22,660 --> 00:03:29,549
through the documentation and exploit
the full show on the server and access

38
00:03:29,550 --> 00:03:36,530
to healthy amount of sensitive financial
information which is great

39
00:03:36,530 --> 00:03:42,620
it was really just a one-off event that
it was quite lucky that the survey made

40
00:03:42,620 --> 00:03:47,450
it really obvious that this input was
being processed as a template but it was

41
00:03:47,450 --> 00:03:49,470
also lucky that the flea market

42
00:03:49,470 --> 00:03:56,180
documentation was so forthcoming to
Hawkins about how dangerous it was nine

43
00:03:56,180 --> 00:04:03,069
months ago we received a report the book
sweet was failing to find a blatant

44
00:04:03,069 --> 00:04:06,519
cross-site scripting vulnerability which
isn't something which happens every day

45
00:04:06,520 --> 00:04:13,350
so I investigated manually and around
once again the server was behaving quite

46
00:04:13,350 --> 00:04:18,600
an odd way that's why we'd miss the site
scripting and thanks to my poor

47
00:04:18,600 --> 00:04:23,900
encounter with template injection I saw
the issue for what it really was which

48
00:04:23,900 --> 00:04:30,179
was simply injection so the client
thought they had maybe medium severity

49
00:04:30,180 --> 00:04:34,260
cross-site scripting issue on this site
but they had something was potentially

50
00:04:34,260 --> 00:04:41,500
more serious this left me with a couple
of questions

51
00:04:41,500 --> 00:04:46,810
exactly how common is template injection
how many times someone sound cross-site

52
00:04:46,810 --> 00:04:51,080
scripting I'm not realize that it's
actually a symptom of a much more

53
00:04:51,080 --> 00:05:00,900
serious issue and secondly how serious
is simply injection is it only free

54
00:05:00,900 --> 00:05:06,159
market that can be used to get show on a
server quite easily or other template

55
00:05:06,160 --> 00:05:15,340
engines also quite exploitable so I
decided to investigate and go some way

56
00:05:15,340 --> 00:05:19,128
Justin results social with you know

57
00:05:19,129 --> 00:05:27,519
just introduced him play injection talk
about what is how it happens and then a

58
00:05:27,519 --> 00:05:31,929
walk through this process for
identifying and building i working

59
00:05:31,929 --> 00:05:36,498
exploit for whatever template engine jet
engine you found in whatever environment

60
00:05:36,499 --> 00:05:43,029
it is and then go show this process
being applied to fight the most popular

61
00:05:43,029 --> 00:05:48,289
template engines to see how they hold up
and these engines have been selected

62
00:05:48,289 --> 00:05:53,229
because they show the different things
that happened when you when you apply

63
00:05:53,229 --> 00:06:00,628
the exploit development process to them
then demonstrate remote code execution 0

64
00:06:00,629 --> 00:06:05,939
days in a couple of real applications
that you may have heard of but hopefully

65
00:06:05,939 --> 00:06:10,219
don't have installed on your networks
and then take five minutes of questions

66
00:06:10,219 --> 00:06:18,058
and wrap up Wednesday by injection is
simply when using employees on the

67
00:06:18,059 --> 00:06:23,929
safely embed it into a template like
this example here if you look at the

68
00:06:23,929 --> 00:06:29,119
first argument to this they went to
function so you don't use in Burbank

69
00:06:29,119 --> 00:06:35,159
encapsulated into this template and that
means that if the user input contains a

70
00:06:35,159 --> 00:06:40,529
template expression that will be
evaluated by the server that's the core

71
00:06:40,529 --> 00:06:46,369
of this vulnerability just to be
absolutely clear this second example

72
00:06:46,369 --> 00:06:50,599
here is not vulnerable to simply
injection you still have used in both

73
00:06:50,599 --> 00:06:55,369
within the first name variable being
passed into a template but it isn't

74
00:06:55,369 --> 00:07:00,839
being put into the template itself is
just being passed in as an argument if I

75
00:07:00,839 --> 00:07:06,019
use water embedded template expression
inside that variable it would just be

76
00:07:06,019 --> 00:07:13,519
ignored and as with all vulnerabilities
this can happen by accident however I've

77
00:07:13,519 --> 00:07:14,919
also seen it happen

78
00:07:14,919 --> 00:07:20,959
food developers intentionally letting
users edit template in quite a few

79
00:07:20,959 --> 00:07:24,579
different circumstances because they
want to offer this functionality to

80
00:07:24,579 --> 00:07:29,750
users and they may be don't realize how
dangerous it is

81
00:07:29,750 --> 00:07:39,060
to this issue is serious first you need
to find that there's some kind of

82
00:07:39,060 --> 00:07:43,270
temporary injection happening then you
need to figure out you need to identify

83
00:07:43,270 --> 00:07:49,799
what the template engine and use is
exactly then simply build an expert for

84
00:07:49,800 --> 00:07:56,670
it which is where things get really
involved so how do you recognize

85
00:07:56,670 --> 00:08:01,590
template injection given that there were
scores of different engines out there

86
00:08:01,590 --> 00:08:10,609
and they will slightly different way to
do it is to embed a template expression

87
00:08:10,610 --> 00:08:18,940
and if you something really simple like
seven times seven then you got a piece

88
00:08:18,940 --> 00:08:25,530
of syntax there will be supported by
almost all engines so if you send that

89
00:08:25,530 --> 00:08:31,000
payload highlighted in green and look at
the output you can tell whether it's

90
00:08:31,000 --> 00:08:36,909
been evaluated by the civil and you
could just repeat this for the for the

91
00:08:36,909 --> 00:08:43,950
various different common types of
Sendak's the template engines which are

92
00:08:43,950 --> 00:08:50,610
listed on the bottom of this light is
actually a second way in which simply

93
00:08:50,610 --> 00:08:55,220
injection can happen using palm oil
being in import directly into the

94
00:08:55,220 --> 00:09:02,620
template Amobi being placed inside a
template expression and this this is

95
00:09:02,620 --> 00:09:07,160
even harder to spot it often won't
result in cross-site scripting because

96
00:09:07,160 --> 00:09:12,790
the user input is just like a very
boring and if you make any change to

97
00:09:12,790 --> 00:09:18,910
this or any change line not realizing
what's going on on the server then you

98
00:09:18,910 --> 00:09:24,650
get an error message back or you just
get the empty string so in order to

99
00:09:24,650 --> 00:09:30,650
recognize this we need to we need to
safely close the temporal expression and

100
00:09:30,650 --> 00:09:34,819
then in bed something often if you get
input

101
00:09:34,819 --> 00:09:39,899
if you don't get input selection
straight off but you do when you try to

102
00:09:39,899 --> 00:09:45,519
close a template then that suggests that
some kind of temporary injection and

103
00:09:45,519 --> 00:09:49,189
then you can follow up by trying by
trying to embed simple mathematical

104
00:09:49,189 --> 00:09:50,910
expressions and the like

105
00:09:50,910 --> 00:10:02,868
so this template injection happening how
you build an exploit fully you can start

106
00:10:02,869 --> 00:10:08,939
off with a really simple payload like
this just confirms that there is some

107
00:10:08,939 --> 00:10:16,049
kind of valuation happening and then you
can build a decision tree based on the

108
00:10:16,049 --> 00:10:21,309
behavior of different template engines
so if that seven times seven syntax

109
00:10:21,309 --> 00:10:25,569
works we know that the server must be
using one of those specific set of

110
00:10:25,569 --> 00:10:32,799
template engines which support that
syntax one of which is Marty so if we

111
00:10:32,799 --> 00:10:36,939
send smarty comment syntax and that
payload works as well we've confirmed

112
00:10:36,939 --> 00:10:41,319
that the service running smarty and if
that fails and we can try some different

113
00:10:41,319 --> 00:10:47,618
syntax which is a tuned to a different
engine and so on so using this strategy

114
00:10:47,619 --> 00:10:52,959
without relying on something like
pausing and the messages them I have any

115
00:10:52,959 --> 00:10:58,569
kind of format we can easily automate
how to figure out exactly which template

116
00:10:58,569 --> 00:11:06,199
engine is in use this is a subtree of
the strategy used by sweet identify

117
00:11:06,199 --> 00:11:11,839
service identify injection so if you are
about to use it then at the end of this

118
00:11:11,839 --> 00:11:16,959
presentation you'll find an update
waiting for you that will automate these

119
00:11:16,959 --> 00:11:21,189
two steps it will detect them by
injection and will try to identify which

120
00:11:21,189 --> 00:11:26,360
template engine is in use

121
00:11:26,360 --> 00:11:36,790
things get a bit more interesting you
need so what you found so far is not

122
00:11:36,790 --> 00:11:41,260
necessarily a security issue or not
necessarily more serious than cross-site

123
00:11:41,260 --> 00:11:46,300
scripting what you need to prove is that
you can do something uniquely evil on

124
00:11:46,300 --> 00:11:52,939
the server with the template and the
first key step to that is simply to win

125
00:11:52,940 --> 00:11:59,670
the documentation that myself really
quite late but often if you mean the

126
00:11:59,670 --> 00:12:04,430
documentation you will find everything
you need to build a fully working

127
00:12:04,430 --> 00:12:12,319
exploit and get show on the server as we
surely the key areas of interest within

128
00:12:12,320 --> 00:12:18,240
the documentation before 10:30 author
section will tell you what the basic

129
00:12:18,240 --> 00:12:23,720
syntax of the template is so how to do
things like which is gonna be really

130
00:12:23,720 --> 00:12:27,450
useful when you're allowed to the
password that you stolen from the server

131
00:12:27,450 --> 00:12:33,600
or whatever if you're lucky the template
engine also have a security

132
00:12:33,600 --> 00:12:40,699
considerations section on this list of
the most dangerous functions which are

133
00:12:40,699 --> 00:12:43,439
clearly the ones that you need to pay
attention to

134
00:12:43,440 --> 00:12:47,860
if there isn't such a list well there's
pretty much guaranteed to be a list of

135
00:12:47,860 --> 00:12:51,740
built-in functions built-in variables in
extensions and plugins that might be

136
00:12:51,740 --> 00:13:00,959
enabled by default so those make up the
core attacks us next step is to find out

137
00:13:00,959 --> 00:13:07,160
exactly what you have access to within
the template execution environment

138
00:13:07,160 --> 00:13:13,699
most template engines have some kind of
object and this will contain everything

139
00:13:13,699 --> 00:13:19,490
that's in Scott see if you can find out
what the name of this is and find a way

140
00:13:19,490 --> 00:13:25,390
to loop around that attributes and
methods the subject then you can

141
00:13:25,390 --> 00:13:32,000
it would simply identify everything you
got access to some template engines

142
00:13:32,000 --> 00:13:36,910
don't have a self objective or they
don't have a document itself objects but

143
00:13:36,910 --> 00:13:42,530
they may still have one for internal use
for this use case bill would list by

144
00:13:42,530 --> 00:13:48,780
calling get help of the most popular of
a variable names so you can run the one

145
00:13:48,780 --> 00:13:54,550
that would have any more names to
brute-force potential variables I live

146
00:13:54,550 --> 00:14:03,209
in this wordlist in the insured and it's
also being added to be shirley is now

147
00:14:03,210 --> 00:14:08,470
once you know exactly what you have
access to is just a case of trying to

148
00:14:08,470 --> 00:14:16,740
exploit it which is your standard web
application attack like you might be

149
00:14:16,740 --> 00:14:21,350
able to explain one of any number of
common vulnerabilities it's just the way

150
00:14:21,350 --> 00:14:25,390
you calling in to them is slightly
different it's a possibility it's a bit

151
00:14:25,390 --> 00:14:30,439
like building an exploit for PHD's on
serialize function so you may be able to

152
00:14:30,440 --> 00:14:34,670
call some you may have access to some
methods but not be able to call them

153
00:14:34,670 --> 00:14:43,900
unless you use other methods get the
object references and so on

154
00:14:43,900 --> 00:14:49,670
this presentation is focused on getting
code execution however I should mention

155
00:14:49,670 --> 00:14:54,910
that information the template engines
are brilliant vectors for information

156
00:14:54,910 --> 00:15:00,079
disclosure because they're being
executed right in the heart of the

157
00:15:00,080 --> 00:15:04,580
application they often have access to
things like environment variables which

158
00:15:04,580 --> 00:15:12,680
may contain really sensitive stuff like
a good case for example and to get

159
00:15:12,680 --> 00:15:17,130
access to those you don't have to do
anything fancy just use a loop and print

160
00:15:17,130 --> 00:15:24,960
out the value of the variable it's
really really easy okay so that's the

161
00:15:24,960 --> 00:15:30,760
theory of this exploit for us now let's
see how to play engines actually hold up

162
00:15:30,760 --> 00:15:31,850
in real life

163
00:15:31,850 --> 00:15:37,760
firstly free market so this is the one
that I already mentioned and the

164
00:15:37,760 --> 00:15:42,200
documentation says it lists the most
dangerous functions are one of these

165
00:15:42,200 --> 00:15:46,890
functions is the new function and the
documentation for it contains some

166
00:15:46,890 --> 00:15:54,490
useful stuff but the key point is that
this new function can be used to create

167
00:15:54,490 --> 00:15:59,980
arbitrary objects provided that they
implement the template template model

168
00:15:59,980 --> 00:16:10,990
interface so let's have a look at them
and see what classes now that's only

169
00:16:10,990 --> 00:16:18,350
maybe a third of the classes there were
quite a few and you might find no one of

170
00:16:18,350 --> 00:16:24,570
these classes jumps out at you slightly
sounds quite promising any ideas

171
00:16:24,570 --> 00:16:34,110
yes exactly execute execute does excuse
to show command on the server and gives

172
00:16:34,110 --> 00:16:41,790
us the perfect exactly what we need so
here the joke Mondes highlighted in blue

173
00:16:41,790 --> 00:16:47,420
and it's really really simple to just
execute a shell command with free market

174
00:16:47,420 --> 00:16:53,900
on the server and get the app now the
brilliant thing about it is it's clearly

175
00:16:53,900 --> 00:16:56,740
intended functionality is never

176
00:16:56,740 --> 00:17:02,740
to get patched it's just city is just
sitting there as a kind of a trap for

177
00:17:02,740 --> 00:17:06,120
developers you don't read the
documentation and find out how dangerous

178
00:17:06,119 --> 00:17:20,790
free market it's dangerous I'm not
saying this is their fault in this light

179
00:17:20,790 --> 00:17:30,010
ok next up the nasty which is another
popular Java template engine and I from

180
00:17:30,010 --> 00:17:35,550
the documentation here to be a lot less
forthcoming it didn't list any any

181
00:17:35,550 --> 00:17:40,800
exploitable sounding methods and I
couldn't even find a self objected so I

182
00:17:40,800 --> 00:17:47,300
ran a brute-force with variable names
with my word list and I found something

183
00:17:47,300 --> 00:17:53,600
quite interesting if you say that the
class variable

184
00:17:53,600 --> 00:17:58,659
then the album from the server looks
like a generic Java object so i thought

185
00:17:58,660 --> 00:18:01,990
well that's cool lets Google this in
stride I was going on

186
00:18:01,990 --> 00:18:08,620
it turns out there is an extension for
velocity which i think is not part

187
00:18:08,620 --> 00:18:14,189
Corbella steven is enabled by default
and bundle with it so that's why I

188
00:18:14,190 --> 00:18:19,630
didn't find it immediately and the
purpose of this extension is for the use

189
00:18:19,630 --> 00:18:28,010
of job the flexion in template now so
using a couple of methods of the

190
00:18:28,010 --> 00:18:33,879
subjects we can easily get an arbitrary
job object and it's just a matter of

191
00:18:33,880 --> 00:18:39,590
taking standard run of the mill Java
code to execute arbitrary commands and

192
00:18:39,590 --> 00:18:43,949
wrapping it with these with this class
methods to get references to the objects

193
00:18:43,950 --> 00:18:50,650
so we can call them so this command here
will simply make the server sleep for

194
00:18:50,650 --> 00:18:55,940
five seconds using that show and we can
verify that it's executed by seeing how

195
00:18:55,940 --> 00:19:01,820
long it takes a server to a spot but
what we need is the output of the show

196
00:19:01,820 --> 00:19:07,950
quite unfortunate because this is Java
it takes 10 to get there

197
00:19:07,950 --> 00:19:14,059
this isn't exactly job this is nasty

198
00:19:14,059 --> 00:19:18,059
you have to use the syntax of whatever
the tempeh engineering find out why

199
00:19:18,059 --> 00:19:24,019
would the velocity of looping around
something it's but anyway once again

200
00:19:24,019 --> 00:19:29,200
there's no exploits and that the one on
the last flight is just a way of getting

201
00:19:29,200 --> 00:19:36,760
out but in a nice easy way and once
again we have an exploit that he's

202
00:19:36,760 --> 00:19:44,480
pretty much using intended functionality
it is not really an ability within the

203
00:19:44,480 --> 00:19:54,120
nasty although it could perhaps be
better document this one's a bit

204
00:19:54,120 --> 00:19:55,189
different

205
00:19:55,190 --> 00:20:00,710
third one marty is a popular PHP
template engine and by default it so

206
00:20:00,710 --> 00:20:05,940
tribute to execute arbitrary code within
the hour long talk about it but it

207
00:20:05,940 --> 00:20:13,980
offers a secure and the purpose of this
moment is to let on trusted users edit

208
00:20:13,980 --> 00:20:19,590
template I thought intentionally making
you application vulnerable to template

209
00:20:19,590 --> 00:20:24,049
in her injection and then it uses it's
kind of a sandbox you think to try and

210
00:20:24,049 --> 00:20:29,230
stop the template from doing anything
bad to serve this is implemented using a

211
00:20:29,230 --> 00:20:37,350
whitelist of PHP functions so I can't
for example just cool PHD's exactly or

212
00:20:37,350 --> 00:20:43,740
system function to execute arbitrary
show however Marty has a sofa objective

213
00:20:43,740 --> 00:20:50,269
and subjective as a method called get
stream variable which i think is for

214
00:20:50,269 --> 00:20:54,549
internal use but we can easily use it to
read in Ann Arbor to file some stuff

215
00:20:54,549 --> 00:21:03,059
which is a nice start so I command just
reads in your idea to find out the idea

216
00:21:03,059 --> 00:21:10,960
of the commonplace even better lets us
in the secure mode invoke all between

217
00:21:10,960 --> 00:21:18,010
methods on static losses so provided
they've been imported and Marty by

218
00:21:18,010 --> 00:21:20,269
default imports this class

219
00:21:20,269 --> 00:21:27,679
schooled smarty internal wifi oil with a
method called right file it does is

220
00:21:27,679 --> 00:21:33,769
right what are between contents to all
between locations you can also be used

221
00:21:33,769 --> 00:21:39,070
to over life I was the only catch here
is that the third argument to this

222
00:21:39,070 --> 00:21:44,359
method has to be of type smarty
fortunately we can get a handle on an

223
00:21:44,359 --> 00:21:51,658
object of type smarty using the method
of the self object so by chaining these

224
00:21:51,659 --> 00:21:58,619
two together we can do this this script
name variable is available by default

225
00:21:58,619 --> 00:22:05,399
and contains the location on the file
system of the current php file so what

226
00:22:05,399 --> 00:22:12,049
this does is it the current php file
with about 200 leading us execute

227
00:22:12,049 --> 00:22:19,329
arbitrary commands on the server so this
one is pretty clearly a vulnerability

228
00:22:19,329 --> 00:22:28,928
with smart and I i have I have aborted
it and it has been fixed but you might

229
00:22:28,929 --> 00:22:35,440
be thinking well that was a very
difficult to do and I would agree I get

230
00:22:35,440 --> 00:22:39,389
the impression that with a lot of these
kind of sandbox mode see secure boats

231
00:22:39,389 --> 00:22:47,359
they haven't been audited by anybody
ever this is something like clothes and

232
00:22:47,359 --> 00:22:55,109
books right so if you are going to use
the secure mode of a template language

233
00:22:55,109 --> 00:23:04,100
is worth doing is going to make his life
harder but don't rely on it

234
00:23:04,100 --> 00:23:09,270
is another popular PHP template engine
and it's used by the simply by Mark I

235
00:23:09,270 --> 00:23:15,179
think and it's actually by default more
secure than smarty secure mode so in

236
00:23:15,179 --> 00:23:20,450
addition to there being a whitelisted
PHP functions we can invoke any static

237
00:23:20,450 --> 00:23:25,940
methods and we also can be object
references out of functions because they

238
00:23:25,940 --> 00:23:31,330
just get however as ever

239
00:23:31,330 --> 00:23:36,399
object I think this one is not
documented anywhere but you can find it

240
00:23:36,400 --> 00:23:41,549
with a variable named resourcing and
this doesn't have any directly

241
00:23:41,549 --> 00:23:46,620
exploitable methods but it does have an
attribute cold and which is an instance

242
00:23:46,620 --> 00:23:53,959
of twig environment and to avoid it
hasn't quite comments such as one of

243
00:23:53,960 --> 00:23:57,260
them which contains a colder PHD's

244
00:23:57,260 --> 00:24:03,600
which is built in PHP function where if
you control the arguments to it you can

245
00:24:03,600 --> 00:24:10,399
invoke arbitrary functions with
arbitrary arguments and hear the name

246
00:24:10,400 --> 00:24:13,970
variable which is the argument to the
function is being passed as a parameter

247
00:24:13,970 --> 00:24:19,830
to that function so we we we have
control of it up the callback variable

248
00:24:19,830 --> 00:24:25,789
comes from the show to go back Sat
review of this object which we can set

249
00:24:25,789 --> 00:24:32,220
using the register undefined callback
method so once again by combining two

250
00:24:32,220 --> 00:24:36,850
methods chain them onto each other we
can call a method to set that attribute

251
00:24:36,850 --> 00:24:42,990
and they call this method can then call
the other method to invoke the coal use

252
00:24:42,990 --> 00:24:51,039
a funk with with exec and I D an extra
all British okinawans on the server and

253
00:24:51,039 --> 00:24:58,720
once again this isn't this one is not
really intended functionality or it

254
00:24:58,720 --> 00:25:07,020
doesn't look like it but I wouldn't say
this is a vulnerability into it is too

255
00:25:07,020 --> 00:25:12,080
much for the sole purpose of letting
users

256
00:25:12,080 --> 00:25:16,980
beyond just the template and this is
where things get really quite tricky so

257
00:25:16,980 --> 00:25:22,409
in addition to all the previous
restrictions we also got we also call

258
00:25:22,409 --> 00:25:28,010
which read attributes so I can I can no
longer get hold of cellco end and is

259
00:25:28,010 --> 00:25:34,360
whitelisted medical so even if I
developer partners in an object with a

260
00:25:34,360 --> 00:25:40,029
vulnerable method we can invoke the
method on that object unless it's been

261
00:25:40,029 --> 00:25:46,409
waitlisted that might sound like you
can't get anywhere that's why I thought

262
00:25:46,409 --> 00:25:51,740
first however whenever the code that
implements the whitelist I found a bit

263
00:25:51,740 --> 00:25:59,399
of a floor right this target so I
actually we can call on any object that

264
00:25:59,399 --> 00:26:05,459
implements one of these two interfaces
and guess what implement one of these

265
00:26:05,460 --> 00:26:10,789
doing traces the subject so we can go
all but she met is on the sofa on the

266
00:26:10,789 --> 00:26:18,019
subject which is quite nice and as I
said the self object doesn't have any

267
00:26:18,019 --> 00:26:24,260
directly exploit wet but it does have
this one method for internal use only

268
00:26:24,260 --> 00:26:31,429
which contains a line which which
contains this cool whatever the block

269
00:26:31,429 --> 00:26:37,169
variable method is on whatever the
template object is safely control these

270
00:26:37,169 --> 00:26:42,059
variables which we do because they all
come from the argument we can use this

271
00:26:42,059 --> 00:26:50,370
method as a proxy or gadget of sorts to
invoke are between methods on any object

272
00:26:50,370 --> 00:26:54,570
that we can get a reference to so

273
00:26:54,570 --> 00:27:00,649
here the user has passed in the
developer has passed an object object

274
00:27:00,649 --> 00:27:05,620
with a method called reliable method and
we can't call it directly but using this

275
00:27:05,620 --> 00:27:16,840
method is a proxy we can invoke that
argue about that met which is now you

276
00:27:16,840 --> 00:27:21,559
might notice that I haven't got a show
him actually that's because by default

277
00:27:21,559 --> 00:27:30,509
tweak doesn't offer any references to
exploit objects however developers can

278
00:27:30,509 --> 00:27:35,759
Policy Objects and will cost in objects
to the template and they may have

279
00:27:35,759 --> 00:27:43,379
methods which are vulnerable to all your
standard attacks something worth noting

280
00:27:43,379 --> 00:27:47,879
here is the different instances of
template injection within a single

281
00:27:47,879 --> 00:27:55,149
application may have different objects
passed in so it's worth auditing all of

282
00:27:55,149 --> 00:28:09,590
them until you get code execution this
is a publicly accessible website which

283
00:28:09,590 --> 00:28:15,100
by design lets users in a variety of
different languages

284
00:28:15,100 --> 00:28:22,809
now those in the Jade language because
why not and you can see the input of the

285
00:28:22,809 --> 00:28:29,799
top and in the output from the survey in
white on the bottom and you can easily

286
00:28:29,799 --> 00:28:34,809
see you might skip saying but they've
actually litigated that using a sandbox

287
00:28:34,809 --> 00:28:39,480
domains are you can't do anything bad
with that you can also confirm you can

288
00:28:39,480 --> 00:28:46,470
execute commands on mathematical
expressions on server pretty easily so

289
00:28:46,470 --> 00:28:53,040
now it's just a matter of following the
export process but in this case it's

290
00:28:53,040 --> 00:28:58,620
completely black box day so Jade's a
node.js template engine and I didn't

291
00:28:58,620 --> 00:29:04,159
really know I don't no no no jesse is
just this is how you do it with have no

292
00:29:04,160 --> 00:29:10,560
idea what's going on so first off you
find the self objective in this case is

293
00:29:10,560 --> 00:29:15,270
going to root and then you find a way to
move around the subject and find out all

294
00:29:15,270 --> 00:29:19,500
of the attributes and methods and you
just kind of go hunting for interesting

295
00:29:19,500 --> 00:29:27,840
sounding things and eventually I wanted
to this which is quite promising really

296
00:29:27,840 --> 00:29:32,730
so code pin is recognized I'm trying to
do something then why do bad things to

297
00:29:32,730 --> 00:29:40,460
their service to ok but however if you
look carefully at the phrasing of this

298
00:29:40,460 --> 00:29:46,850
warning you might have a suspicion that
this defense is implemented with the

299
00:29:46,850 --> 00:29:53,919
regular expression and actually is so we
have to do is take that top line which

300
00:29:53,920 --> 00:30:01,110
is what which is why this method and
split into two statements

301
00:30:01,110 --> 00:30:05,120
so this excuse exactly the same command
on the server

302
00:30:05,120 --> 00:30:12,809
wonderful so now I've got access to
require so I can import external module

303
00:30:12,809 --> 00:30:19,210
things which can be used to excuse
oakmont on the server so I couldn't get

304
00:30:19,210 --> 00:30:23,260
the album of the show cause notice
asynchronous not understand I think

305
00:30:23,260 --> 00:30:27,879
those things but so what this does is it
executes

306
00:30:27,880 --> 00:30:37,000
idea and it points out of that to myself
so you can see on the bottom

307
00:30:37,000 --> 00:30:47,040
ok I think I've answered the question
how serious is template injection but it

308
00:30:47,040 --> 00:30:53,190
can often be used to get on the server
not always but within pretty much any

309
00:30:53,190 --> 00:30:57,740
template engine depending on what
developer objects are passed in you

310
00:30:57,740 --> 00:31:05,480
might find that they've introduced code
execution vulnerability so now that

311
00:31:05,480 --> 00:31:11,419
leaves the question of exactly how
common template injection it's why I

312
00:31:11,419 --> 00:31:16,840
don't know for certain but what I do
know is I've run into quite a few and

313
00:31:16,840 --> 00:31:22,370
it's quite easy to miss and I had no
trouble finding a couple of applications

314
00:31:22,370 --> 00:31:36,668
to demonstrate for you

315
00:31:36,669 --> 00:31:44,200
which is a content management system and
great thing about this content

316
00:31:44,200 --> 00:31:50,539
management system is that implement some
of the pages using free market templates

317
00:31:50,539 --> 00:31:58,499
which you can see here however as I know
producer here you might as well start

318
00:31:58,499 --> 00:32:04,809
from as low as possible I'm going out to
edit the template so this template makes

319
00:32:04,809 --> 00:32:14,200
this page but I can't edit it however
administrators Canada and in alfresco

320
00:32:14,200 --> 00:32:20,929
there is I found a series called stored
Russell scripting vulnerability in the

321
00:32:20,929 --> 00:32:27,509
comment system that's the bottom is
skipping payload

322
00:32:27,509 --> 00:32:36,559
views there isn't but so good choice to
allow say face tomorrow and they allow

323
00:32:36,559 --> 00:32:41,190
the image tag and they think that this
is an attribute with a name of the empty

324
00:32:41,190 --> 00:32:46,590
string like but what about the Seas is
an image to add some random crap closing

325
00:32:46,590 --> 00:32:52,139
time and then an SVG thing with an event
handler and excludes it and this is the

326
00:32:52,139 --> 00:33:01,238
free market back door I want the
administrator to inject for me so please

327
00:33:01,239 --> 00:33:09,809
try some javascript that request forgery
to over like that file with the with the

328
00:33:09,809 --> 00:33:13,908
back door so he looks kinda message all
it does is grab the user's request for

329
00:33:13,909 --> 00:33:21,239
you talkin and use it to make the same
origin request to inject the doc what

330
00:33:21,239 --> 00:33:27,960
and when encoded it looks like that so
let's look at what happens when an

331
00:33:27,960 --> 00:33:33,740
administrator

332
00:33:33,740 --> 00:33:41,360
views page with a comment on it with
this payload in so this just does one

333
00:33:41,360 --> 00:33:47,990
and this has now we shouldn't see
anything out of the ordinary

334
00:33:47,990 --> 00:33:51,990
blank document there's like around
imprinted on them what's wrong with that

335
00:33:51,990 --> 00:33:59,400
but nothing but now if only do so I look
at what the contents of this file ah I

336
00:33:59,400 --> 00:34:12,100
see all look so I gotta do is put like a
nice showing 1 2012 it's worth

337
00:34:12,100 --> 00:34:13,139
mentioning

338
00:34:13,139 --> 00:34:18,020
thank you

339
00:34:18,020 --> 00:34:25,340
documentation when I was trying to get
the server working actually is says the

340
00:34:25,340 --> 00:34:31,040
Linux installer may decide to disable
SELinux systemwide permanently when you

341
00:34:31,040 --> 00:34:38,168
want it so that's not a bonus I guess I
should also mention alfresco is an

342
00:34:38,168 --> 00:34:45,589
application like WordPress where any old
reason can easily XQ object code why

343
00:34:45,590 --> 00:34:50,280
they couldn't find any other ways to
execute arbitrary code from being an

344
00:34:50,280 --> 00:35:01,690
illustrator and alfresco is available as
a cloud service which suggests I think

345
00:35:01,690 --> 00:35:19,260
countermeasure

346
00:35:19,260 --> 00:35:28,040
this is actually it's one of the most
popular media is one of the most popular

347
00:35:28,040 --> 00:35:34,640
weekly applications often MediaWiki I
think and it's quite heavy great thing

348
00:35:34,640 --> 00:35:39,270
about expert he is anyone who encounters
like by default anyone can just run up

349
00:35:39,270 --> 00:35:44,009
and register their own account on it all
you need is access to it and you can

350
00:35:44,010 --> 00:35:48,830
register an account obviously it was
very many many many privileges so I'm

351
00:35:48,830 --> 00:35:54,400
doing everything here with the self
registered and if we add any page we

352
00:35:54,400 --> 00:36:00,700
could you see that in my support will
not stay I we've got a payload for the

353
00:36:00,700 --> 00:36:07,460
last day so let's see what happens

354
00:36:07,460 --> 00:36:16,160
okay so it's failed and that's because
the class variable has been quite wisely

355
00:36:16,160 --> 00:36:23,049
removed by the extra key benefits so
there's no job reflection of a little

356
00:36:23,050 --> 00:36:31,410
unfortunate so I was left to do but to
win the documentation well key things

357
00:36:31,410 --> 00:36:38,299
about lost a it doesn't require special
privileges anyone can run it but it's

358
00:36:38,300 --> 00:36:44,410
one-sided sandbox with only access to
safe objects to sound promising and also

359
00:36:44,410 --> 00:36:49,339
there was some other scripting languages
but you need programming whites to

360
00:36:49,340 --> 00:36:55,160
execute them but they're not sandboxed
so let me show you why me so this is a

361
00:36:55,160 --> 00:37:04,520
nice place and I don't and I can try to
inject this but because i dont have

362
00:37:04,520 --> 00:37:11,940
privileges if I might cause I'm
programming so let's have a look at

363
00:37:11,940 --> 00:37:16,030
these safe API so we've got existed

364
00:37:16,030 --> 00:37:20,520
first thing you notice is that really
enormous

365
00:37:20,520 --> 00:37:26,220
tons and tons of stuff and the first
thing I found his days this

366
00:37:26,220 --> 00:37:30,680
document class which refers to the
current document so using a method of

367
00:37:30,680 --> 00:37:38,930
this document you can make a wiki page
making it to himself and in safe and

368
00:37:38,930 --> 00:37:43,899
there's something quite interesting here
I noted it yourself there's a method

369
00:37:43,900 --> 00:37:49,050
called safe and there's another method
to save as author bear in mind that the

370
00:37:49,050 --> 00:37:55,830
author of a wiki page is the last person
to get edited it in other words me so

371
00:37:55,830 --> 00:37:59,790
the presence of a sailor's automatic
makes me wonder who the same method

372
00:37:59,790 --> 00:38:05,920
might say that perhaps it's the user who
is currently reviewing the document in

373
00:38:05,920 --> 00:38:12,340
fact perhaps he gets the privileges of
the user is covering the document so

374
00:38:12,340 --> 00:38:20,349
I've done here is taken mine and wraps
it in some velocity which says does the

375
00:38:20,349 --> 00:38:26,910
user viewing this page have programming
white if they don't ok now get them to

376
00:38:26,910 --> 00:38:43,310
inject the back door and say let's just
try and see what happens

377
00:38:43,310 --> 00:38:54,820
ok so nothing's happening there because
I'm Union I don't have to but if a user

378
00:38:54,820 --> 00:39:00,690
if an admin happens to view this page
which because I've added the homepage is

379
00:39:00,690 --> 00:39:05,530
gonna happen pretty probably I think
they both do anything out of the

380
00:39:05,530 --> 00:39:12,589
ordinary either but now my back door has
been injected by then unknowingly

381
00:39:12,589 --> 00:39:21,140
happened to put a show come on here and
wait for a bit

382
00:39:21,140 --> 00:39:42,950
ya gotta show on the seven

383
00:39:42,950 --> 00:39:51,339
kind of a little bit focused on the
defense side let's have a look at what

384
00:39:51,339 --> 00:39:56,549
to do if your application has to let
users edit template say it's a business

385
00:39:56,550 --> 00:40:02,520
requirement by core defense is
simplicity is using a really simple

386
00:40:02,520 --> 00:40:09,570
template engine something like like
moustache or Python's built-in template

387
00:40:09,570 --> 00:40:15,119
something they basically just as
variable substitution is literally tax

388
00:40:15,119 --> 00:40:23,190
office you'll be really hard to happen
ok if you have to offer something a bit

389
00:40:23,190 --> 00:40:24,650
more advanced than that

390
00:40:24,650 --> 00:40:35,290
well you can minimize that you can
minimize the attack surface boy using a

391
00:40:35,290 --> 00:40:39,770
sandbox mode if one is available only
reading the documentation to find out if

392
00:40:39,770 --> 00:40:47,009
there's any like secret third-party
plugins the execution really easy and

393
00:40:47,010 --> 00:40:53,810
only part in the minimum number of
attributes the minimum objects like just

394
00:40:53,810 --> 00:40:59,799
passing the exact they do you need the
template to have one method I've seen

395
00:40:59,800 --> 00:41:05,950
used effectively as far as I can tell is
that by MediaWiki and Wikipedia

396
00:41:05,950 --> 00:41:12,939
Wikipedia actually lets you embed in
wiki pages which is online no idea of

397
00:41:12,940 --> 00:41:21,030
celebration from now but actually this
lure is executed in so I don't really

398
00:41:21,030 --> 00:41:29,500
heavily sandbox environment so like on
the APR 11 V all the methods and modules

399
00:41:29,500 --> 00:41:33,550
that can be used to do anything
dangerous have just been removed so it's

400
00:41:33,550 --> 00:41:39,000
actually really hard to do something bad
with media with these sandbox lou even

401
00:41:39,000 --> 00:41:46,740
though you can do I say they're not just
because I felt happy about because as

402
00:41:46,740 --> 00:41:52,669
far as I know no one else has got show
on Wikipedia recently

403
00:41:52,670 --> 00:42:03,309
allow quite a few different Empire
engines and normally be feasible to

404
00:42:03,309 --> 00:42:09,869
manually sandbox each individual one so
you can fall back to which is what

405
00:42:09,869 --> 00:42:16,369
they've done is using is your inbox and
operating system environment using

406
00:42:16,369 --> 00:42:20,960
something like doctor and then heavily
locking it down so using things like

407
00:42:20,960 --> 00:42:27,670
colonel capabilities to prevent the
template from doing things like any file

408
00:42:27,670 --> 00:42:34,290
handles or accessing the network or and
like turning off set your idea making

409
00:42:34,290 --> 00:42:40,400
the file system we'd we'd only and so on
so combining loads of measures like that

410
00:42:40,400 --> 00:42:47,910
you can make a sandbox it's maybe not
impossible to break out but it's only a

411
00:42:47,910 --> 00:42:54,259
huge amount of work please don't think
so i'm saying you should just put

412
00:42:54,260 --> 00:42:57,240
something in doctor and then forget
about it without too many configurations

413
00:42:57,240 --> 00:42:58,270
I won't get you very far

414
00:42:58,270 --> 00:43:09,020
ok now I've got four minutes for
questions

415
00:43:09,020 --> 00:43:34,200
which is available that would it is very
much is it is it is very much available

416
00:43:34,200 --> 00:43:42,029
question ok I'm going to lap up in
several minutes after these questions

417
00:43:42,030 --> 00:44:09,040
questions

418
00:44:09,040 --> 00:44:10,330
great

419
00:44:10,330 --> 00:44:16,240
so the key things to a member of our
team play engines are so besides and

420
00:44:16,240 --> 00:44:20,740
boxes if you view them as that you
realize how challenging it is to make a

421
00:44:20,740 --> 00:44:25,779
template engine that she holds up to
injection is there if you look for it

422
00:44:25,780 --> 00:44:35,620
and we explore finally on the backs more
questions or you can send me an email

423
00:44:35,620 --> 00:44:38,450
don't forget to follow want to thank you
for listening

