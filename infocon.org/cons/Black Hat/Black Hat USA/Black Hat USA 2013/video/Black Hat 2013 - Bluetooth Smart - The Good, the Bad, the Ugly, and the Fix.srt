1
00:00:00,049 --> 00:00:04,230
my name is Mike Ryan I'm a security
consultant with I sec partners

2
00:00:04,230 --> 00:00:08,340
and I'm here to talk to you about
Bluetooth smart the good

3
00:00:08,340 --> 00:00:11,530
the bad the ugly and the fix

4
00:00:11,530 --> 00:00:16,840
so before we get into the technical
aspects to the top why even bother

5
00:00:16,840 --> 00:00:18,520
talking about though it is smart

6
00:00:18,520 --> 00:00:22,448
my research this well in case you
haven't been paying attention

7
00:00:22,449 --> 00:00:25,519
its showing up everywhere

8
00:00:25,519 --> 00:00:29,070
here's a small sampling of devices I
found on the internet

9
00:00:29,070 --> 00:00:32,500
their use Bluetooth smart as you can see

10
00:00:32,500 --> 00:00:36,200
lots of devices use Bluetooth smart some
of them

11
00:00:36,200 --> 00:00:39,980
you probably use every day some of them

12
00:00:39,980 --> 00:00:44,079
might even surprise you love it and in
case you've been living under a rock

13
00:00:44,079 --> 00:00:47,230
the last couple weeks its appearing

14
00:00:47,230 --> 00:00:51,620
everywhere but I love my anecdote
commence you

15
00:00:51,620 --> 00:00:55,079
let's go by the numbers from

16
00:00:55,079 --> 00:00:58,530
a press release by the Bluetooth special
interest group

17
00:00:58,530 --> 00:01:04,140
first half of 2013 there was one hundred
eighty-six percent year-over-year growth

18
00:01:04,140 --> 00:01:07,409
in shipping consumer devices seven
million

19
00:01:07,409 --> 00:01:12,200
devices in the first half of the year
this technology has huge market

20
00:01:12,200 --> 00:01:12,979
penetration

21
00:01:12,979 --> 00:01:16,659
another press release note forecasts

22
00:01:16,659 --> 00:01:20,450
that Bluetooth smart will lead market
share in wireless

23
00:01:20,450 --> 00:01:23,780
medical devices wireless medical devices

24
00:01:23,780 --> 00:01:29,700
what could possibly go wrong actually I
got I was a little curious so I looked

25
00:01:29,700 --> 00:01:31,799
up the officially supported device list

26
00:01:31,799 --> 00:01:35,960
from the Bluetooth SIG and I found a
blood glucose monitor

27
00:01:35,960 --> 00:01:39,409
and makes me a little nervous so

28
00:01:39,409 --> 00:01:44,110
Lu two smarts here now is probably in
your pocket

29
00:01:44,110 --> 00:01:48,479
its big is the next big thing in no
power consumer wireless

30
00:01:48,479 --> 00:01:53,740
so it's definitely worth taking a look
so without further ado now for properly

31
00:01:53,740 --> 00:01:55,420
motivated let's get right into it

32
00:01:55,420 --> 00:02:00,369
the good Bluetooth smart and I start
with this because

33
00:02:00,369 --> 00:02:04,979
it's actually a pretty good protocol for
what it is for low-power consumer

34
00:02:04,979 --> 00:02:08,399
wireless devices it does the job a

35
00:02:08,399 --> 00:02:11,680
it could be a lot worse so what exactly

36
00:02:11,680 --> 00:02:17,010
is Bluetooth smart anyway this or start
to get technical so buckle up

37
00:02:17,010 --> 00:02:20,160
Bluetooth smart is a new modulation

38
00:02:20,160 --> 00:02:23,329
and declare mode for low-power devices

39
00:02:23,330 --> 00:02:27,670
as compared to classic Bluetooth its
incompatible classic Bluetooth devices

40
00:02:27,670 --> 00:02:31,470
cannot communicate with Bluetooth smart
devices and vice versa

41
00:02:31,470 --> 00:02:35,410
this is because at the filer physical
air and the link layer

42
00:02:35,410 --> 00:02:39,970
they're almost completely different
however higher-level protocols were used

43
00:02:39,970 --> 00:02:43,330
this is both really good from a design
perspective and really good from an

44
00:02:43,330 --> 00:02:45,849
analysis perspective because we can take
advantage

45
00:02:45,849 --> 00:02:52,429
existing tools are studying the protocol
it was introduced in 2010

46
00:02:52,430 --> 00:02:56,810
as a part of the Bluetooth for 4.0 spec
that's why sometimes you hear Bluetooth

47
00:02:56,810 --> 00:02:57,290
smart

48
00:02:57,290 --> 00:03:01,390
incorrectly referred to as Bluetooth for
does not technically accurate

49
00:03:01,390 --> 00:03:05,019
Bluetooth or is just the latest version
of the spec a

50
00:03:05,019 --> 00:03:09,629
encompasses all existing Bluetooth
technology classic Bluetooth Bluetooth

51
00:03:09,629 --> 00:03:10,149
all

52
00:03:10,150 --> 00:03:13,530
Bluetooth alternate Mac 5 and of course
Bluetooth smart

53
00:03:13,530 --> 00:03:17,590
are so Bluetooth smart is actually a
subset a bluetooth for

54
00:03:17,590 --> 00:03:23,860
also know that it used to be referred to
as Bluetooth Low Energy RBT Ellie

55
00:03:23,860 --> 00:03:27,180
that's still how are usually refer to it
but for the sake of the talk gonna try

56
00:03:27,180 --> 00:03:28,540
to stick to Bluetooth smart

57
00:03:28,540 --> 00:03:32,019
if you hear me say Bluetooth Low Energy
RBT Ellie

58
00:03:32,019 --> 00:03:35,450
it's all the same thing cell I apologize
in advance

59
00:03:35,450 --> 00:03:38,580
this is what the protocol stack looks
like

60
00:03:38,580 --> 00:03:42,319
starting at the bottom you got the file
a writ the link layer l2 cap

61
00:03:42,319 --> 00:03:47,000
the attribute protocol and gap and I'll
go into these one by one

62
00:03:47,000 --> 00:03:51,230
to just give you a complete breakdown a
protocol so at the bottom

63
00:03:51,230 --> 00:03:54,819
the file air wanna Bluetooth smart
device transmits

64
00:03:54,819 --> 00:03:57,849
what does it look like what what does
that even mean

65
00:03:57,849 --> 00:04:03,180
so when a device transmits a radio chip
on the device generates a small amount

66
00:04:03,180 --> 00:04:04,470
of modulated RF

67
00:04:04,470 --> 00:04:08,620
the modulation used his gf is K gushing
frequency shift keying

68
00:04:08,620 --> 00:04:11,980
this is the same modulation using
classic Bluetooth but its use a little

69
00:04:11,980 --> 00:04:12,950
bit differently here

70
00:04:12,950 --> 00:04:16,509
the is 250 killers of said and the data
rate

71
00:04:16,509 --> 00:04:19,900
is one megabit per second so that's part
of why it's incompatible

72
00:04:19,900 --> 00:04:24,220
with classic Bluetooth are by the main
reason that it's incompatible

73
00:04:24,220 --> 00:04:27,380
was classic Bluetooth is how it breaks
up the spectrum into

74
00:04:27,380 --> 00:04:32,159
individual channels Bluetooth smart
takes the eighty megahertz wide 2.4

75
00:04:32,160 --> 00:04:33,229
gigahertz

76
00:04:33,229 --> 00:04:36,849
our wireless spectrum the same spectrum
use for you know too that 11

77
00:04:36,850 --> 00:04:42,040
wifi and classic Bluetooth and it breaks
it up into forty channels

78
00:04:42,040 --> 00:04:45,610
these channels were megahertz wide but
the center carriers have each channel

79
00:04:45,610 --> 00:04:47,330
our space to make a Hertz apart

80
00:04:47,330 --> 00:04:50,699
so you'll get a channel one megahertz
wide lawmaker herds

81
00:04:50,699 --> 00:04:53,979
nothing another channel so on and so
forth

82
00:04:53,979 --> 00:04:57,050
classic Bluetooth actually breaks up in
80 channels without

83
00:04:57,050 --> 00:05:00,539
any gaps during connections

84
00:05:00,539 --> 00:05:04,830
the master and slave pop along these
channels according to a predefined

85
00:05:04,830 --> 00:05:06,139
hopping pattern

86
00:05:06,139 --> 00:05:10,350
so this hopping pattern is way simpler
the classic Bluetooth

87
00:05:10,350 --> 00:05:14,139
so this these aspects alone make it
physically incompatible

88
00:05:14,139 --> 00:05:17,300
with classic Bluetooth

89
00:05:17,300 --> 00:05:20,360
the hopping sequence is pretty simple

90
00:05:20,360 --> 00:05:25,770
other forty data channels 37 her sorry
the 40s Bluetooth smart channels 37 are

91
00:05:25,770 --> 00:05:27,680
devoted to data

92
00:05:27,680 --> 00:05:30,949
and the master and the slave each hop
along

93
00:05:30,949 --> 00:05:34,770
the all the data channels when they
reach a channel the each transmit

94
00:05:34,770 --> 00:05:39,099
one package first the master transmits
the slave transmits

95
00:05:39,100 --> 00:05:42,820
then they hop to another channel the
master transmits and the slave transmits

96
00:05:42,820 --> 00:05:46,860
so on and so forth the way you determine
the next channel

97
00:05:46,860 --> 00:05:50,160
is you take your current and I'll and
you at a value to it called the hop

98
00:05:50,160 --> 00:05:53,160
increment this is a value shared between
the master and slave

99
00:05:53,160 --> 00:05:56,930
when the connection is set up the hot so
you take the current channel

100
00:05:56,930 --> 00:06:00,120
at the hop increment and modular 37

101
00:06:00,120 --> 00:06:03,490
so you'll see the hot the hop sequence
at the bottom of the slide you start on

102
00:06:03,490 --> 00:06:04,289
channel three

103
00:06:04,289 --> 00:06:07,710
master transmits slave transmits they
wait a second

104
00:06:07,710 --> 00:06:10,849
after the next channel channel 10 master
transmits

105
00:06:10,850 --> 00:06:14,780
say transmits so on and so forth every
channel 31

106
00:06:14,780 --> 00:06:18,759
you pop down the channel one because 31
plus seven

107
00:06:18,759 --> 00:06:22,110
is stock sorry and imagine hopping
minutes 7 in this

108
00:06:22,110 --> 00:06:25,370
so 31 plus seven is 38 mod 37

109
00:06:25,370 --> 00:06:29,050
is one because 37 is prime

110
00:06:29,050 --> 00:06:33,270
every connection what is it all 37 data
channels

111
00:06:33,270 --> 00:06:37,030
so it sounds kinda complicated but it's
a lot simpler

112
00:06:37,030 --> 00:06:41,270
then some other wireless hopping
protocols

113
00:06:41,270 --> 00:06:45,318
that's pretty much the filer in a
nutshell moving up to the link where

114
00:06:45,319 --> 00:06:48,819
this is what packets actually look like
over-the-air

115
00:06:48,819 --> 00:06:52,919
Thursday and 8-bit preamble which is
just an alternating sequence and 0's and

116
00:06:52,919 --> 00:06:53,680
1's

117
00:06:53,680 --> 00:06:56,860
this allows the receiving radio to
synchronize to

118
00:06:56,860 --> 00:07:00,770
the transmission following that is a
32-bit value

119
00:07:00,770 --> 00:07:04,799
four octets four bytes long that's
called the access address

120
00:07:04,800 --> 00:07:07,780
this value is shared between the master
and the slave when they start a

121
00:07:07,780 --> 00:07:09,110
connection

122
00:07:09,110 --> 00:07:13,979
the 32-bit access address allows the
receiver to identify packets that are a

123
00:07:13,979 --> 00:07:16,318
part of the current connection as
interested in

124
00:07:16,319 --> 00:07:19,930
it helps build a lot of false positives
and less receiver say okay there's

125
00:07:19,930 --> 00:07:21,910
probably a packet coming right now

126
00:07:21,910 --> 00:07:25,910
after the access address is the PD you
the protocol data unit

127
00:07:25,910 --> 00:07:29,539
that's the actual data this being
transmitted wirelessly

128
00:07:29,539 --> 00:07:33,830
by Bluetooth smart it has a minimum
length up two octets because there's

129
00:07:33,830 --> 00:07:34,609
always

130
00:07:34,610 --> 00:07:38,669
e2 by Petr at the beginning the header
includes a logical link ID you which

131
00:07:38,669 --> 00:07:40,250
helps differentiate between

132
00:07:40,250 --> 00:07:43,949
control and data packets and a length
field

133
00:07:43,949 --> 00:07:47,750
because the PT you his variable-length

134
00:07:47,750 --> 00:07:51,610
at the into the packing is a CRC it's a
little bit different from a typical CRC

135
00:07:51,610 --> 00:07:53,020
but in principle is the same

136
00:07:53,020 --> 00:07:58,270
it allows you to verify whether any bets
have been flipped in the data

137
00:07:58,270 --> 00:08:02,049
right above the link layer is l2 cap l2
cap is borrowed from

138
00:08:02,050 --> 00:08:06,199
older blue to standards in this case its
pretty much just float

139
00:08:06,199 --> 00:08:10,349
because a you see there's a 16-bit
channel ID there

140
00:08:10,349 --> 00:08:14,419
that's used in classic Bluetooth headset
differentiate which service is actually

141
00:08:14,419 --> 00:08:15,440
being used

142
00:08:15,440 --> 00:08:20,580
you've got rs.com and st PE for audio
headsets and things like that

143
00:08:20,580 --> 00:08:24,520
the channel ID is how you identify which
one is being transmitted

144
00:08:24,520 --> 00:08:28,349
in Bluetooth smart there's only one
value it's legal for the channel ID

145
00:08:28,349 --> 00:08:32,049
has the attribute protocol and there's a
redundant Lakefield

146
00:08:32,049 --> 00:08:35,218
so in this case explode

147
00:08:35,219 --> 00:08:38,959
but for the sake of building a a
Bluetooth chip

148
00:08:38,959 --> 00:08:44,000
and Jessica analyzing stuff it's not
that big a deal only four bytes

149
00:08:44,000 --> 00:08:47,500
and the following message actual
information payload

150
00:08:47,500 --> 00:08:51,620
so right on top l2 cap is the attribute
protocol

151
00:08:51,620 --> 00:08:55,120
and on top of that his cap so I spent a
lot of time with my nose

152
00:08:55,120 --> 00:08:59,060
in the spec I can't really tell you
we're at ends and got me again so many

153
00:08:59,060 --> 00:09:02,100
talk about them at the same time

154
00:09:02,100 --> 00:09:07,110
missing here

155
00:09:07,110 --> 00:09:10,450
so gap is the protocol bad

156
00:09:10,450 --> 00:09:13,649
is basically the application layer this
is where we finally get to the point

157
00:09:13,649 --> 00:09:16,200
where we exchange meaningful data values
that

158
00:09:16,200 --> 00:09:20,670
in end-user cares about everything is
defined in terms of services and

159
00:09:20,670 --> 00:09:21,649
characteristics

160
00:09:21,649 --> 00:09:24,709
a device has one or more services that
run on it

161
00:09:24,709 --> 00:09:28,190
and each service is made up by a group a
characteristic

162
00:09:28,190 --> 00:09:32,890
characteristics and he's characteristic
has simple operations on it such as

163
00:09:32,890 --> 00:09:37,170
perhaps it's able to be read or written
to are there other operations and I'll

164
00:09:37,170 --> 00:09:38,769
describe a little bit

165
00:09:38,769 --> 00:09:42,209
everything here's the fun identified by
UUID

166
00:09:42,209 --> 00:09:45,310
128 bit value that's unique to each
service

167
00:09:45,310 --> 00:09:48,570
in characteristic in some circumstances
you can shorten it

168
00:09:48,570 --> 00:09:51,580
to 16 bits but they're always expandable

169
00:09:51,580 --> 00:09:55,500
to 128 its so here's an example

170
00:09:55,500 --> 00:09:59,120
%uh a gas service that's implemented in
production devices right now

171
00:09:59,120 --> 00:10:02,430
the heart rate service implemented by
heart rate monitors in certain respects

172
00:10:02,430 --> 00:10:05,040
that have heart rate monitors bolted

173
00:10:05,040 --> 00:10:08,529
the service you you ID sixteen-bit a yes
16 bits

174
00:10:08,529 --> 00:10:12,730
18 OD and there are two characteristics
of interest

175
00:10:12,730 --> 00:10:17,279
the first characteristic to a 30-7 is
the Hartree

176
00:10:17,279 --> 00:10:20,820
you can't read or write this you think
you might be able to read it but

177
00:10:20,820 --> 00:10:24,420
actually just don't they don't support
that and said they support notify

178
00:10:24,420 --> 00:10:28,380
for you subscribe to updates when you
connect to the device to tell it

179
00:10:28,380 --> 00:10:31,399
hey let me know anytime there are
updates to

180
00:10:31,399 --> 00:10:34,920
the heart rate and the they slave device

181
00:10:34,920 --> 00:10:38,560
your heart rate sensor will get back to
periodically with all heart rate is 60

182
00:10:38,560 --> 00:10:40,890
beats per minute hurried 62 beats per
minute

183
00:10:40,890 --> 00:10:45,319
pretty decent from a design perspective
the second characteristic

184
00:10:45,320 --> 00:10:48,570
is a central location to a 38

185
00:10:48,570 --> 00:10:52,370
and this is a readable value it's just
an 8-bit integer the nurse a

186
00:10:52,370 --> 00:10:53,959
standardized list of

187
00:10:53,959 --> 00:10:57,600
center locations on the body got chest
%uh rest

188
00:10:57,600 --> 00:11:01,240
your local a new and their couple other
characteristics that are used for

189
00:11:01,240 --> 00:11:03,329
bookkeeping

190
00:11:03,329 --> 00:11:07,170
%uh its %uh gaddis a self-described
protocol so

191
00:11:07,170 --> 00:11:10,510
its actually pretty pretty handy so if
you connect to a device

192
00:11:10,510 --> 00:11:13,790
and it's a friendly device you can
actually give you a description %uh

193
00:11:13,790 --> 00:11:17,910
every characteristic cell you might
connect to it unknown device and see a

194
00:11:17,910 --> 00:11:20,529
characteristic you can identify by UUID

195
00:11:20,529 --> 00:11:24,160
well if you read another characteristic
ill tell you this is a temperature

196
00:11:24,160 --> 00:11:30,170
this is humidity so its got is a pretty
cool protocol

197
00:11:30,170 --> 00:11:33,399
so to recap that's the whole Bluetooth
smart staff

198
00:11:33,399 --> 00:11:37,420
starting at the filer where you got a
simple channels and hopping

199
00:11:37,420 --> 00:11:41,610
moving up to the link layer where you
got a CRC ana PD you

200
00:11:41,610 --> 00:11:45,420
some access address basically radio
stuff for remote devices to be able to

201
00:11:45,420 --> 00:11:47,329
pick out signals and the noise

202
00:11:47,329 --> 00:11:50,850
about that you've got mail to cap which
is kind of a waste and then

203
00:11:50,850 --> 00:11:54,589
finally the actually protocol and gas
which are

204
00:11:54,589 --> 00:11:59,389
user data but I don't know about you
guys

205
00:11:59,389 --> 00:12:02,540
is pretty boring just a hero description
of a protocol

206
00:12:02,540 --> 00:12:07,269
I'd much rather err look at it as its
flying over the air

207
00:12:07,269 --> 00:12:11,660
I wanna sniff it but sniffing glue to
this hard

208
00:12:11,660 --> 00:12:14,959
Mike Aspen has been telling us this for
many years

209
00:12:14,959 --> 00:12:18,660
part of the reason is conventional
Bluetooth dongles don't have

210
00:12:18,660 --> 00:12:23,170
a monitor mode like 802 11 wifi dongles
do

211
00:12:23,170 --> 00:12:27,729
you can't just say give me every pack in
this flying through the air so I can

212
00:12:27,730 --> 00:12:28,720
analyze it

213
00:12:28,720 --> 00:12:32,519
instead you have to build custom
hardware

214
00:12:32,519 --> 00:12:36,779
%uh so sitting Bluetooth is hard but
mike was talking about classic Bluetooth

215
00:12:36,779 --> 00:12:39,290
when he made the slide

216
00:12:39,290 --> 00:12:42,310
luckily stepping Bluetooth Ellie or
Bluetooth smart

217
00:12:42,310 --> 00:12:47,160
is a lot simpler so I'll tell you how I
did that

218
00:12:47,160 --> 00:12:51,420
pretty simple you start at the bottom
and you work your way up

219
00:12:51,420 --> 00:12:55,329
he started the filer and the link layer
these are unique to Bluetooth smart

220
00:12:55,329 --> 00:12:59,380
and iPod these view this is when you
actually need custom hardware

221
00:12:59,380 --> 00:13:03,040
to sniff so I used in Hooper tooth to

222
00:13:03,040 --> 00:13:07,230
get these layers and finally after I've
got the

223
00:13:07,230 --> 00:13:10,480
the link layered packet I headed up to
the PC

224
00:13:10,480 --> 00:13:13,839
where we've already got tools for
dealing with Al to cap attribute

225
00:13:13,839 --> 00:13:14,490
protocol

226
00:13:14,490 --> 00:13:18,420
and gas so if you haven't seen before

227
00:13:18,420 --> 00:13:21,870
this is an uber tooth I'm sure it's hard
to see from the back

228
00:13:21,870 --> 00:13:25,000
I've got a simple block diagram on the
side I

229
00:13:25,000 --> 00:13:28,980
on the left you got an RF amplifier
connected to an antenna

230
00:13:28,980 --> 00:13:33,660
and that's connected to SEC 2400
reconfigurable radio chip

231
00:13:33,660 --> 00:13:37,160
that they the amplifier the radio chip
just %uh

232
00:13:37,160 --> 00:13:43,050
communicate via Rs we can figure the
radio chip to use modulation parameters

233
00:13:43,050 --> 00:13:47,250
same as a the same modulation parameters
as Bluetooth smart

234
00:13:47,250 --> 00:13:51,130
that handles the fire there for us that
converts the RS which is just

235
00:13:51,130 --> 00:13:54,139
analog signals into bits

236
00:13:54,139 --> 00:13:57,519
its we can deal with then connected to
the 2400

237
00:13:57,519 --> 00:14:01,570
is LPC 1750 series arm microcontroller

238
00:14:01,570 --> 00:14:06,110
that's where we handle the link layer
that converts the bits into packets

239
00:14:06,110 --> 00:14:09,220
finally that's connected to the USB on
the PC

240
00:14:09,220 --> 00:14:14,459
and that's to ship the packets up to the
PC for later analysis

241
00:14:14,459 --> 00:14:17,560
so at the file air the way we capture
packets is

242
00:14:17,560 --> 00:14:21,329
reconfigure the CC 2400 to BNG FSK modem

243
00:14:21,329 --> 00:14:24,949
to under fifty killers of said 1 megabit
per second

244
00:14:24,949 --> 00:14:28,269
and we do need to the proper channels we
know the proper channel because our

245
00:14:28,269 --> 00:14:33,630
are told about the link layer and
hopping LPC tells us that

246
00:14:33,630 --> 00:14:37,149
which followed connections according to
the hop pattern this depends on two

247
00:14:37,149 --> 00:14:39,940
values the hopping comment and hop
interval

248
00:14:39,940 --> 00:14:43,100
we get these either by witnessing the
connect packet or we got a promiscuous

249
00:14:43,100 --> 00:14:44,130
mode

250
00:14:44,130 --> 00:14:47,519
that can recover them after the fact

251
00:14:47,519 --> 00:14:50,899
and that's it that just gives decades as
base

252
00:14:50,899 --> 00:14:54,899
and the arm microcontroller deals with
the bits

253
00:14:54,899 --> 00:14:59,389
that brings up the link layer but we've
got a small problem

254
00:14:59,389 --> 00:15:02,529
everything in the link layer is defined
in terms of octets

255
00:15:02,529 --> 00:15:05,610
but we don't have our tests we have bits
we don't know where one

256
00:15:05,610 --> 00:15:09,709
octet when by begins and the next ends

257
00:15:09,709 --> 00:15:13,170
so we have a/c Abetz we want the start
of the PT you

258
00:15:13,170 --> 00:15:16,519
we want to know where the octet boundary
asmara abstractly

259
00:15:16,519 --> 00:15:19,880
however we do know the access addressed
suppose we got it from the connect

260
00:15:19,880 --> 00:15:21,149
packet

261
00:15:21,149 --> 00:15:25,079
so what we do is we've got to see a bit
slowing in

262
00:15:25,079 --> 00:15:28,230
and we start searching for the 32-bit
access address

263
00:15:28,230 --> 00:15:31,889
and when we see it a there's the
endeavor access address

264
00:15:31,889 --> 00:15:35,730
and immediately following that is RPD
okay

265
00:15:35,730 --> 00:15:39,190
and its that simple that's how we go
from bits to the

266
00:15:39,190 --> 00:15:42,399
BTU boundary and we can

267
00:15:42,399 --> 00:15:46,079
deal with the octet data according to
the spec

268
00:15:46,079 --> 00:15:49,370
this is actually the old way of doing it
the new way of doing it

269
00:15:49,370 --> 00:15:52,959
is we can figure the CC 2400 to look for
that

270
00:15:52,959 --> 00:15:56,630
32-bit access address and just give us
data when it sees that

271
00:15:56,630 --> 00:15:59,660
that's a real that's a big win for us
because

272
00:15:59,660 --> 00:16:03,240
we don't have to constantly what a bit
stream as is flowing in

273
00:16:03,240 --> 00:16:06,959
and the CC 2400 does a lot of fancy
stuff to detect

274
00:16:06,959 --> 00:16:11,449
that 32-bit value way smarter stuff then
we can do in the arm microcontroller

275
00:16:11,449 --> 00:16:15,350
so this brings our packing for separate
up from sixty percent or so

276
00:16:15,350 --> 00:16:20,310
to like ninety-nine percent so thats as
a major improvement that we've seen

277
00:16:20,310 --> 00:16:23,649
in recent weeks

278
00:16:23,649 --> 00:16:26,880
so we've got the filer we've got the
link layer these are the parts that are

279
00:16:26,880 --> 00:16:29,470
unique to Bluetooth smart

280
00:16:29,470 --> 00:16:33,930
now we can pass up the packets to the PC
where we've already got tools

281
00:16:33,930 --> 00:16:36,970
for dealing with L to cap the attribute
protocol

282
00:16:36,970 --> 00:16:40,399
and cats in fact Wireshark

283
00:16:40,399 --> 00:16:43,649
as they sectors for these protocols at
the top of the list BC

284
00:16:43,649 --> 00:16:46,870
BT at the Bluetooth attribute protocol
and at the bottom

285
00:16:46,870 --> 00:16:50,610
we've got l2 cap I don't wanna rape our
search for these

286
00:16:50,610 --> 00:16:54,740
I wanted but somebody else handle that
so I'll pass a lot to Wireshark

287
00:16:54,740 --> 00:16:57,779
so Wireshark speak speak out

288
00:16:57,779 --> 00:17:01,680
over tooth detailee the command-line
utility that we use to communicate with

289
00:17:01,680 --> 00:17:02,459
you over to them

290
00:17:02,459 --> 00:17:06,439
speaks packets so all we do is we take
the P cap

291
00:17:06,439 --> 00:17:10,689
and weed out the Rob packet data into
packets we slap a PPI header on it the

292
00:17:10,689 --> 00:17:11,449
way a road on

293
00:17:11,449 --> 00:17:15,260
Angie in kismet do for not even at
packets

294
00:17:15,260 --> 00:17:20,539
and that's it we don't about we actually
recently just got the LT for Bluetooth

295
00:17:20,539 --> 00:17:22,829
smart that's unique identifiers for the
protocol

296
00:17:22,829 --> 00:17:26,010
every protocol that the peak ap sports
has a DLT

297
00:17:26,010 --> 00:17:30,429
so this means that we can finally make a
public release are Wireshark plugins

298
00:17:30,429 --> 00:17:31,250
very soon

299
00:17:31,250 --> 00:17:35,400
we also have one for classic Bluetooth
cell pretty Sumar sharks and have great

300
00:17:35,400 --> 00:17:37,200
support for Bluetooth native

301
00:17:37,200 --> 00:17:41,190
Bluetooth smart and classic Bluetooth
sniffed with Cooper TX

302
00:17:41,190 --> 00:17:44,730
here's a couple screenshot of it in
action on the left

303
00:17:44,730 --> 00:17:48,110
I'm making a request to a device asking
for hits device name

304
00:17:48,110 --> 00:17:51,559
is probably pretty hard to see but it's
that highlighted fields at the bottom of

305
00:17:51,559 --> 00:17:53,520
the Wireshark breakdown

306
00:17:53,520 --> 00:17:57,460
in on the right there's the response
coming from the device

307
00:17:57,460 --> 00:18:00,990
telling us its name and these packets
were snuffed over-the-air

308
00:18:00,990 --> 00:18:05,200
using who were two using the the
firmware I design and the Wireshark

309
00:18:05,200 --> 00:18:06,950
plugins that I've built

310
00:18:06,950 --> 00:18:13,030
and of course this is all open source
but I'll get to that at the end

311
00:18:13,030 --> 00:18:16,600
and alas no before we move on there is
encrypted and provided

312
00:18:16,600 --> 00:18:20,140
by the link layer and it only covers

313
00:18:20,140 --> 00:18:23,929
protocol data unit you have to have the
access address in clear text so the

314
00:18:23,929 --> 00:18:24,590
radio can

315
00:18:24,590 --> 00:18:28,530
identify the start in the packet and it
incurred said

316
00:18:28,530 --> 00:18:31,730
and it also authenticated using a SCCM

317
00:18:31,730 --> 00:18:35,500
there's really not a whole lot to say
about this encryption because

318
00:18:35,500 --> 00:18:40,460
it's pretty good ASEC and doesn't have
any known weaknesses

319
00:18:40,460 --> 00:18:44,669
unfortunately that brings us to the bad

320
00:18:44,669 --> 00:18:51,669
the key exchange

321
00:18:54,620 --> 00:18:58,060
Bluetooth smart uses a custom key
exchange protocol

322
00:18:58,060 --> 00:19:01,149
seems like a poor choice given that
their some

323
00:19:01,150 --> 00:19:05,340
thoroughly well vetted key exchange
protocols that don't have any weaknesses

324
00:19:05,340 --> 00:19:08,919
solo it's a three-stage process

325
00:19:08,920 --> 00:19:13,800
the first stage you steam you out
there's a temporary key

326
00:19:13,800 --> 00:19:17,970
that's used to encrypt a the few first
few messages that go over the wire

327
00:19:17,970 --> 00:19:22,030
in the first stage you calculated
confirm value to make sure that you're

328
00:19:22,030 --> 00:19:23,690
using the same temporary key

329
00:19:23,690 --> 00:19:27,120
and you've established the same random
numbers that I use later in the process

330
00:19:27,120 --> 00:19:30,410
the second and third stages are just
exchanging a short term in a long-term

331
00:19:30,410 --> 00:19:31,030
key

332
00:19:31,030 --> 00:19:34,860
the first stage is where the problem is

333
00:19:34,860 --> 00:19:38,630
the first age is the temperature is
determined by the pairing method

334
00:19:38,630 --> 00:19:43,740
there are three parry methods just works
that just sounds like a bad idea

335
00:19:43,740 --> 00:19:50,720
six digit PIN and out a band parent
here's a quote from the spec

336
00:19:50,720 --> 00:19:54,430
none of the Parry methods provide
protection against a passive

337
00:19:54,430 --> 00:19:55,180
eavesdropper

338
00:19:55,180 --> 00:19:59,420
say what

339
00:19:59,420 --> 00:20:03,320
that's right none other fairy methods
provide protection against a passive

340
00:20:03,320 --> 00:20:04,080
eavesdropper

341
00:20:04,080 --> 00:20:08,580
the spec does go on to say a future
version of the specification will

342
00:20:08,580 --> 00:20:10,620
include elliptic curve cryptography

343
00:20:10,620 --> 00:20:16,070
but the current version doesn't solo

344
00:20:16,070 --> 00:20:19,149
they knew it was broken when they
release that

345
00:20:19,150 --> 00:20:23,510
%uh I'm gonna go and demonstrate how
broken it is

346
00:20:23,510 --> 00:20:27,650
so the my love when the device is begin
paring

347
00:20:27,650 --> 00:20:32,190
they exchanged a few values over-the-air
in plain text these values are

348
00:20:32,190 --> 00:20:33,360
highlighted in green here

349
00:20:33,360 --> 00:20:36,980
the confirm a random value that has
randomness from both devices

350
00:20:36,980 --> 00:20:40,280
p1 and p2 pretty unimportant we have
these

351
00:20:40,280 --> 00:20:43,670
if we said by passively intercepting
packets

352
00:20:43,670 --> 00:20:48,110
we can collect all love this information
the only thing we don't have

353
00:20:48,110 --> 00:20:54,090
is the TK the temporary key we know
something about the temporary key

354
00:20:54,090 --> 00:20:57,870
if you're using just works or a six
digit PIN

355
00:20:57,870 --> 00:21:00,980
isn't integer between zero and 909

356
00:21:00,980 --> 00:21:05,000
909 ensure using just works it's always

357
00:21:05,000 --> 00:21:08,280
0 yeah

358
00:21:08,280 --> 00:21:14,430
so it's vulnerable to a simple brute
force you just try all

359
00:21:14,430 --> 00:21:18,210
mmm all 1 million values and eventually
you will crack the key

360
00:21:18,210 --> 00:21:21,250
anyone want to hazard a guess how long
it takes to crack

361
00:21:21,250 --> 00:21:26,880
less than a second there's your
Bluetooth smart key exchange

362
00:21:26,880 --> 00:21:30,270
that said when you have that every key

363
00:21:30,270 --> 00:21:34,139
you can recover the short term key using
the short term key you can be cryptic

364
00:21:34,140 --> 00:21:37,040
communications used to exchange the
long-term key

365
00:21:37,040 --> 00:21:40,920
and finally the long-term key issues
during every connection

366
00:21:40,920 --> 00:21:45,200
to encrypt session keys your key
exchange is broken

367
00:21:45,200 --> 00:21:50,760
right from the start and this is 100
percent passive attack

368
00:21:50,760 --> 00:21:54,600
you have you cannot know that this is
occurring the only way you can tell

369
00:21:54,600 --> 00:21:55,430
you're getting hacked

370
00:21:55,430 --> 00:21:58,830
is if you sit around at the coffee shop
you look around and you see this guy

371
00:21:58,830 --> 00:22:04,929
the and that Rosas right into the ugly

372
00:22:04,930 --> 00:22:11,930
the long-term kiryas now face value

373
00:22:13,640 --> 00:22:17,560
the sounds like a good idea if you care
to fared a cage

374
00:22:17,560 --> 00:22:21,040
nobody can possibly observe your I

375
00:22:21,040 --> 00:22:25,430
you observe your key exchange and before
you left I have fared in a fairly Kate

376
00:22:25,430 --> 00:22:30,050
however there's a medication for this

377
00:22:30,050 --> 00:22:33,379
are sorry I forgot to mention though
every time

378
00:22:33,380 --> 00:22:37,540
the you after you paired every time you
want to establish an encrypted session

379
00:22:37,540 --> 00:22:41,070
all you do is use a pre-established
long-term key

380
00:22:41,070 --> 00:22:45,090
the master tells the slave page but the
crib is using a long-term Kiwi Rd

381
00:22:45,090 --> 00:22:49,070
exchanged so if an attacker doesn't
witness the long-term key exchange

382
00:22:49,070 --> 00:22:52,139
UK decried the connection that's part of
what makes

383
00:22:52,140 --> 00:22:56,710
a SCCM pretty good but we do have a
medication for that

384
00:22:56,710 --> 00:23:00,490
there's a simple active attack that we
can do

385
00:23:00,490 --> 00:23:04,240
to force the master and slave to repair
if really is simple

386
00:23:04,240 --> 00:23:07,670
you just need to know the mac Address up
the sleeve device

387
00:23:07,670 --> 00:23:12,590
are funny feature Bluetooth smart chips
is that every chip can be

388
00:23:12,590 --> 00:23:15,699
use as a master or a slave so

389
00:23:15,700 --> 00:23:20,310
random device here can act as a master
my laptop can act as a slave

390
00:23:20,310 --> 00:23:24,860
so what you do is you change the mac
address of your Bluetooth adapter on

391
00:23:24,860 --> 00:23:26,450
your laptop to match that %uh

392
00:23:26,450 --> 00:23:29,550
your slave you start a gas ever on your
laptop

393
00:23:29,550 --> 00:23:32,950
blues on Linux and only has one and

394
00:23:32,950 --> 00:23:37,290
when the master goes to pare you just
make sure your laptop is louder

395
00:23:37,290 --> 00:23:41,370
than the device you wish to the pair
from the master

396
00:23:41,370 --> 00:23:45,620
the master says a let's use that
long-term purt established

397
00:23:45,620 --> 00:23:48,690
the your laptop says yo I don't know

398
00:23:48,690 --> 00:23:52,500
anything about that key totally
according to protocol and the masses as

399
00:23:52,500 --> 00:23:54,010
okay let's reestablish a key

400
00:23:54,010 --> 00:23:57,110
at that point you just turn off
Bluetooth on your laptop

401
00:23:57,110 --> 00:24:01,010
massacres little bit confused reconnect
to the slave and says hey

402
00:24:01,010 --> 00:24:04,200
let's reestablish the connection the
saying goes sure whatever

403
00:24:04,200 --> 00:24:07,920
and then you passively can intercept the
communications again

404
00:24:07,920 --> 00:24:11,880
so

405
00:24:11,880 --> 00:24:16,950
a in either situation

406
00:24:16,950 --> 00:24:19,980
either you Rd know the long-term key or

407
00:24:19,980 --> 00:24:25,070
you can force the master and slave to
repair you will have the long-term key

408
00:24:25,070 --> 00:24:29,510
every single connection used after that
the master candy crypt

409
00:24:29,510 --> 00:24:33,910
it's very simple procedure the attacker
just passively listens to the packets

410
00:24:33,910 --> 00:24:35,410
that you exchange

411
00:24:35,410 --> 00:24:38,130
he waits for you to establish a
connection the first thing you're going

412
00:24:38,130 --> 00:24:40,170
to do is start encryption

413
00:24:40,170 --> 00:24:43,960
and then the attacker passively
listening to your connection

414
00:24:43,960 --> 00:24:48,100
collect this information and has every
piece of information he needs to

415
00:24:48,100 --> 00:24:49,660
decrease your connection

416
00:24:49,660 --> 00:24:53,860
every subsequent connection you make

417
00:24:53,860 --> 00:24:57,300
not only is it theoretically possible
it's practically possible

418
00:24:57,300 --> 00:25:00,650
my tool crackle will do that as well

419
00:25:00,650 --> 00:25:04,440
if you give it up P cap filed as the
entire pairing setup

420
00:25:04,440 --> 00:25:08,000
it will crack the TK out but the
long-term key

421
00:25:08,000 --> 00:25:11,780
and Eclipse RS at the peak ap file if
you give it a peak ap file

422
00:25:11,780 --> 00:25:15,840
and you provide it with the long-term
key scissors someone the party

423
00:25:15,840 --> 00:25:21,060
observed in the past he will the crypt
at as well

424
00:25:21,060 --> 00:25:25,429
so to recap the key exchange is broken
and because they were used the long-term

425
00:25:25,430 --> 00:25:26,160
key

426
00:25:26,160 --> 00:25:31,290
all future communication is affectively
compromised

427
00:25:31,290 --> 00:25:34,970
and this is ninety nine percent passive
in the worst case scenario

428
00:25:34,970 --> 00:25:38,190
you do one active attack with completely
official Harbor

429
00:25:38,190 --> 00:25:42,150
that Mosab you probably already have

430
00:25:42,150 --> 00:25:46,160
all is not lost there's a simple fix to
this problem

431
00:25:46,160 --> 00:25:50,390
secure simple pairing

432
00:25:50,390 --> 00:25:54,830
before I get into that secure simple
pairing is the pairing mechanism used in

433
00:25:54,830 --> 00:25:56,990
classic Bluetooth

434
00:25:56,990 --> 00:26:01,630
I'm really not sure why they didn't just
define it for Bluetooth smart

435
00:26:01,630 --> 00:26:04,940
possibly because is computationally
intensive but it doesn't matter you only

436
00:26:04,940 --> 00:26:08,520
have to pare once and you can securely
establish a key is reused many many

437
00:26:08,520 --> 00:26:12,060
times

438
00:26:12,060 --> 00:26:16,950
a word about my qualifications I mean if
a sec researcher

439
00:26:16,950 --> 00:26:20,800
I'm in InfoSec consultant with I sex
partners

440
00:26:20,800 --> 00:26:24,310
I said partners and information security
consulting firm that specializes in the

441
00:26:24,310 --> 00:26:26,360
web and mobile application heads

442
00:26:26,360 --> 00:26:30,230
and testing I make he's no programmer

443
00:26:30,230 --> 00:26:33,630
a husband and I can grow a mean steak

444
00:26:33,630 --> 00:26:37,510
I'm not a photographer

445
00:26:37,510 --> 00:26:41,110
that's why I suggested using secure
simple pairing

446
00:26:41,110 --> 00:26:46,350
if you're not a good talker for don't
build a cryptosystem

447
00:26:46,350 --> 00:26:49,850
I'm going to repeat that if you get
nothing from the stock remember this

448
00:26:49,850 --> 00:26:54,130
if you're not a creep togher for don't
build a cryptosystem

449
00:26:54,130 --> 00:26:57,160
you will get it wrong and people laugh
at you

450
00:26:57,160 --> 00:27:01,300
at Black Cat next year when they break
your device

451
00:27:01,300 --> 00:27:04,690
so thats part of the reason I chose
secure simple pairing

452
00:27:04,690 --> 00:27:08,340
is Rd a thoroughly well vetted
cryptosystem

453
00:27:08,340 --> 00:27:12,780
it's been in production since Bluetooth
2.1 stats 2007

454
00:27:12,780 --> 00:27:19,780
and there's only one known weakness and
that weakness we can just work around

455
00:27:20,220 --> 00:27:24,390
my mom likes to call the worst times so
there is passive eavesdropping

456
00:27:24,390 --> 00:27:25,200
protection

457
00:27:25,200 --> 00:27:29,480
through the use %uh elliptic curve
diffie-hellman the downside is that

458
00:27:29,480 --> 00:27:32,620
is that EC the age is pretty expensive

459
00:27:32,620 --> 00:27:38,440
I secure simple pairing is defined
around the newest curve sec P 192 r1

460
00:27:38,440 --> 00:27:42,240
that means you gotta do 192 bit
multiplies a couple um

461
00:27:42,240 --> 00:27:46,140
is pretty slow takes about five seconds
on a bit CPO

462
00:27:46,140 --> 00:27:49,960
and up until recently there was no open
source implementation

463
00:27:49,960 --> 00:27:53,910
for a pity beers that is

464
00:27:53,910 --> 00:27:58,500
so there's five stages to SSP the first
stage public exchange the master and

465
00:27:58,500 --> 00:28:00,170
slave just exchange their

466
00:28:00,170 --> 00:28:03,750
public key points the second stage
authentication

467
00:28:03,750 --> 00:28:08,410
the master and slave actually do the CDH
calculation to verify

468
00:28:08,410 --> 00:28:12,550
that they are both using the same Matt
there there's has not been a man in the

469
00:28:12,550 --> 00:28:13,909
middle attacker

470
00:28:13,910 --> 00:28:17,340
the third stage authentication is used
to calculate a confirm

471
00:28:17,340 --> 00:28:21,110
that allows them to verify the using the
same random numbers

472
00:28:21,110 --> 00:28:24,230
lanky calculation for determining a
linky and finally

473
00:28:24,230 --> 00:28:29,710
authentication and encryption so last
age is not relevant to us because we've

474
00:28:29,710 --> 00:28:33,050
already got our own encryption built in
Bluetooth smart

475
00:28:33,050 --> 00:28:36,520
and in the second phase that's where
they define pair

476
00:28:36,520 --> 00:28:40,570
the one vulnerability in Bluetooth a.m.
SSP is that

477
00:28:40,570 --> 00:28:43,990
if you use PIN entry it's vulnerable

478
00:28:43,990 --> 00:28:48,210
to having your PIN being completely
leaked so modern Bluetooth devices don't

479
00:28:48,210 --> 00:28:48,890
support it

480
00:28:48,890 --> 00:28:53,930
we'll support you we only want to use
the numeric comparison Mon

481
00:28:53,930 --> 00:28:58,580
and is backward compatible this the spec
actually in correctly notes that none

482
00:28:58,580 --> 00:28:59,350
other

483
00:28:59,350 --> 00:29:02,420
pairing mechanisms and Bluetooth smart
provide

484
00:29:02,420 --> 00:29:05,810
a passive you stopping protection that's
not actually to

485
00:29:05,810 --> 00:29:10,250
true out a van carrying is not broken

486
00:29:10,250 --> 00:29:14,340
wanna be I actually know that if you if
you can actually exchange a 128 bit

487
00:29:14,340 --> 00:29:16,180
value our band

488
00:29:16,180 --> 00:29:19,750
you should do that because as a lot
simpler than implementing SSP

489
00:29:19,750 --> 00:29:24,210
however if you can't do that you'll use
the calculated linky

490
00:29:24,210 --> 00:29:28,190
from step 4 as 128 bits about Avandia

491
00:29:28,190 --> 00:29:31,330
and most ships actually have support for
this it's part of the spec you tell the

492
00:29:31,330 --> 00:29:32,129
chip

493
00:29:32,130 --> 00:29:35,200
pay use this 128 bit value for out a
band parent

494
00:29:35,200 --> 00:29:38,590
the master and slave both have the same
128 bit value because they both went

495
00:29:38,590 --> 00:29:40,440
RSSP together

496
00:29:40,440 --> 00:29:44,560
and then you go through pairing as usual
you get the full benefits a Bluetooth

497
00:29:44,560 --> 00:29:45,580
smart encryption

498
00:29:45,580 --> 00:29:48,800
including having get support for
characteristics

499
00:29:48,800 --> 00:29:52,800
that can be read are only read when
they're crafted

500
00:29:52,800 --> 00:29:57,340
and you get the benefits SSP with
eavesdropping protection

501
00:29:57,340 --> 00:30:01,600
so other couple demos right now

502
00:30:01,600 --> 00:30:06,520
let's see we've begun here so I'm using
a development version a Wireshark

503
00:30:06,520 --> 00:30:11,190
that has X caps apart this is something
that drag aren't my curse I

504
00:30:11,190 --> 00:30:15,100
we're working on so you can actually see
the Bluetooth over to the vices

505
00:30:15,100 --> 00:30:18,980
in Wireshark here and I can configure it
to be on the particular channel

506
00:30:18,980 --> 00:30:22,090
so I'm gonna fire up Meyer start
listening on my two

507
00:30:22,090 --> 00:30:28,350
over to youth mmm somebody's out there

508
00:30:28,350 --> 00:30:31,910
Bluetooth smart capable smartphone I'm
currently wearing

509
00:30:31,910 --> 00:30:35,550
a heart rate monitor them filter these

510
00:30:35,550 --> 00:30:40,889
I'll with others in the second and I'm
gonna go ahead a fire out

511
00:30:40,890 --> 00:30:45,080
be heart rate monitor application a my
phone

512
00:30:45,080 --> 00:30:49,139
we've got a connection

513
00:30:49,140 --> 00:30:52,970
and this data is being

514
00:30:52,970 --> 00:30:57,570
written from my phone captured
over-the-air using over tooth

515
00:30:57,570 --> 00:31:00,679
and being displayed on the PC here

516
00:31:00,680 --> 00:31:04,270
this is a handle value notification from
the heart rate

517
00:31:04,270 --> 00:31:08,990
service I'll fire up X maxi can actually
see a

518
00:31:08,990 --> 00:31:12,000
that 70 ray there

519
00:31:12,000 --> 00:31:16,370
that's my heart rate from my smartphone

520
00:31:16,370 --> 00:31:20,290
to heart rate monitor the over tooth

521
00:31:20,290 --> 00:31:23,860
I'm so as you can see we have a very
rich very capable

522
00:31:23,860 --> 00:31:28,290
stiffing platform I will try

523
00:31:28,290 --> 00:31:32,870
one other thing now I'll show you the
encryption

524
00:31:32,870 --> 00:31:38,750
restart Wireshark here

525
00:31:38,750 --> 00:31:42,050
so I before transition that was my first
demo

526
00:31:42,050 --> 00:31:47,649
you we can sniff passively connections
between Bluetooth smart devices

527
00:31:47,650 --> 00:31:51,180
and as hell no my smartphone does not
use encryption when it touched my heart

528
00:31:51,180 --> 00:31:51,960
rate monitor

529
00:31:51,960 --> 00:31:58,210
anyone close enough kin recover that
data

530
00:31:58,210 --> 00:32:02,050
moving on to the second lol start
capturing again

531
00:32:02,050 --> 00:32:05,620
this I'm going to connect to the heart
reminder from my laptop

532
00:32:05,620 --> 00:32:09,150
so I can actually show you the
encryption setup so

533
00:32:09,150 --> 00:32:13,200
these packets over here that actual pack
is going by in a bottom rate

534
00:32:13,200 --> 00:32:16,360
I'm connecting to it using a a blues
tool

535
00:32:16,360 --> 00:32:19,830
so connects this is this is the part
where

536
00:32:19,830 --> 00:32:24,760
it doesn't work because I'm on stage I
have a couple tries

537
00:32:24,760 --> 00:32:29,080
lemme

538
00:32:29,080 --> 00:32:36,080
I thought this might happen so abroad a
rubber chicken

539
00:32:36,920 --> 00:32:40,970
old emo God's been good to me

540
00:32:40,970 --> 00:32:47,320
long I'll give it a couple more tries

541
00:32:47,320 --> 00:32:54,320
them

542
00:32:55,310 --> 00:32:58,190
ok well it doesn't appear to be working
that's okay

543
00:32:58,190 --> 00:33:01,860
I actually did collect a sample a

544
00:33:01,860 --> 00:33:06,710
our little earlier when I wasn't saying
on stage a whole bunch of wireless nice

545
00:33:06,710 --> 00:33:09,810
here is

546
00:33:09,810 --> 00:33:16,810
some group

547
00:33:29,070 --> 00:33:32,950
area is AV come on

548
00:33:32,950 --> 00:33:39,170
years here's so okay

549
00:33:39,170 --> 00:33:42,400
well that's not displaying properly
Wireshark but I have

550
00:33:42,400 --> 00:33:46,640
eighty complete pairing setup in this
pic outfile

551
00:33:46,640 --> 00:33:50,280
a is just the bullet is far pairing

552
00:33:50,280 --> 00:33:54,120
where the master and slave exchanged a
temporary key a long-term keep the short

553
00:33:54,120 --> 00:33:55,340
term in the long term key

554
00:33:55,340 --> 00:34:01,040
and I'm wanna go and

555
00:34:01,040 --> 00:34:05,120
the crib this for us. I've included a
timeout but

556
00:34:05,120 --> 00:34:10,149
temporary he found 0000

557
00:34:10,149 --> 00:34:13,899
and here's the long-term key

558
00:34:13,899 --> 00:34:17,149
that's used to encrypt this
communication and all future

559
00:34:17,149 --> 00:34:19,089
communications between the master

560
00:34:19,090 --> 00:34:22,740
my laptop and the slave the heart
monitor that I'm wearing right now

561
00:34:22,740 --> 00:34:26,030
and actually a few fire this one up the
shit actually

562
00:34:26,030 --> 00:34:31,100
potentially work them

563
00:34:31,100 --> 00:34:36,069
our don't have too many virgins a
Wireshark install kits

564
00:34:36,070 --> 00:34:40,109
this is not shown up

565
00:34:40,109 --> 00:34:43,918
year ago so you can see the data

566
00:34:43,918 --> 00:34:48,060
in here and

567
00:34:48,060 --> 00:34:51,279
others nothing actually in that well
anyway

568
00:34:51,280 --> 00:34:55,990
the temporary key cracked and I was
actually a worst-case scenario

569
00:34:55,990 --> 00:35:00,400
Iran the brute force algorithm in
reverse it took 1.5 seconds because my

570
00:35:00,400 --> 00:35:02,460
battery in my lap tops are running at
full speed

571
00:35:02,460 --> 00:35:05,970
I can cause the demo for snow the talk

572
00:35:05,970 --> 00:35:10,420
the question that you all should be
asking right now

573
00:35:10,420 --> 00:35:14,490
am i affected by this vulnerability the
short answer is

574
00:35:14,490 --> 00:35:19,250
probably this is a protocol air I didn't
mention any vendor names because

575
00:35:19,250 --> 00:35:23,090
their Hall boulder opal any Bluetooth
smart device

576
00:35:23,090 --> 00:35:26,470
that implements encryption and key
exchange according to the spec

577
00:35:26,470 --> 00:35:31,710
is vulnerable to this issue there is one
exception

578
00:35:31,710 --> 00:35:35,270
I found the some vendors implemented
their own security layer

579
00:35:35,270 --> 00:35:38,530
on top of gas remember what I said
earlier

580
00:35:38,530 --> 00:35:41,859
if you're not a cartographer dole

581
00:35:41,859 --> 00:35:45,250
build a cryptosystem I know there was a
major weakness

582
00:35:45,250 --> 00:35:48,450
in one of these that I've identified but
I don't have permission to talk about

583
00:35:48,450 --> 00:35:49,000
right now

584
00:35:49,000 --> 00:35:53,950
sold really if you want to improve your
security

585
00:35:53,950 --> 00:35:58,319
use out a van carrying if you can if you
can't used SSP

586
00:35:58,320 --> 00:36:01,530
so to summarize

587
00:36:01,530 --> 00:36:05,640
Bluetooth smart is pretty good its key
exchange is broken

588
00:36:05,640 --> 00:36:09,720
and the reviews are the long-term key
fundamentally dams

589
00:36:09,720 --> 00:36:14,109
the security of the protocol however if
you implement a simple fix

590
00:36:14,109 --> 00:36:18,730
using SSP you'll be invulnerable to this
type of problem

591
00:36:18,730 --> 00:36:23,270
and I'll wrap up with the discussion of
some other capabilities that I've

592
00:36:23,270 --> 00:36:24,810
developed as part of this project

593
00:36:24,810 --> 00:36:28,140
on the humor tooth we can possibly
intercept Bluetooth smart

594
00:36:28,140 --> 00:36:32,750
as I demonstrated up here on stage we
also support promiscuous mode and

595
00:36:32,750 --> 00:36:33,440
injection

596
00:36:33,440 --> 00:36:36,460
I didn't discuss those but I can go into
them if anyone's interested

597
00:36:36,460 --> 00:36:40,720
offline probably I developed some wires
are plugins for dealing with the

598
00:36:40,720 --> 00:36:42,220
Bluetooth smart link layer

599
00:36:42,220 --> 00:36:47,090
and I developed a tool called crackle
crackle will crack the temporary he

600
00:36:47,090 --> 00:36:50,510
that you slept with over 23 and will
decrease any pick-up file

601
00:36:50,510 --> 00:36:54,720
if you submit it if you provide it with
the long-term key finally

602
00:36:54,720 --> 00:36:59,090
I released a piece of software called
nano ECC this is an a bit implementation

603
00:36:59,090 --> 00:37:02,609
up to curve diffie-hellman around a bit
processors

604
00:37:02,609 --> 00:37:05,509
it's pretty it's not super well
optimized but it's pretty speedy will

605
00:37:05,510 --> 00:37:07,260
take about five seconds to

606
00:37:07,260 --> 00:37:11,660
do the CDH calculation I plan to have a
demo

607
00:37:11,660 --> 00:37:15,250
version love the whole SSP running on

608
00:37:15,250 --> 00:37:18,250
this little Bluetooth smart now bored
but

609
00:37:18,250 --> 00:37:23,800
it died a cautionary tale of the dangers
of doing 192 bit multiplies on an 8-bit

610
00:37:23,800 --> 00:37:25,200
microprocessor

611
00:37:25,200 --> 00:37:28,590
so here's some links to some other
software

612
00:37:28,590 --> 00:37:33,030
if your interest income talk to me later
but who were to them Libby TVB

613
00:37:33,030 --> 00:37:37,390
now ACC's up on high sex get have and
crackles up on my personal website

614
00:37:37,390 --> 00:37:42,000
like to wish a very special happy
birthday to my wife was sitting here in

615
00:37:42,000 --> 00:37:42,840
the audience

616
00:37:42,840 --> 00:37:45,950
and that's it our pride

617
00:37:45,950 --> 00:37:49,170
special thanks to my casa da Nextel were
here

618
00:37:49,170 --> 00:37:52,300
not in this room but they're super
awesome because they bill

619
00:37:52,300 --> 00:37:57,020
and support the over to the project also
like to give thanks to my Kershaw

620
00:37:57,020 --> 00:38:01,420
other SAT over to steam blues on lanix
which is some other finest Bluetooth

621
00:38:01,420 --> 00:38:03,840
smart support available right now

622
00:38:03,840 --> 00:38:07,620
and the Bluetooth special interest group
for publishing a really readable spec

623
00:38:07,620 --> 00:38:11,589
last but not least I'd like to thank
black cap for allowing me to speak here

624
00:38:11,590 --> 00:38:16,730
and I sex partners my employer for
finding a partial this research

625
00:38:16,730 --> 00:38:23,730
that's me thank you very much

626
00:38:24,050 --> 00:38:28,320
also please can you imagine you leave
the room so i win that are there any

627
00:38:28,320 --> 00:38:29,300
questions

628
00:38:29,300 --> 00:38:36,300
appear question is can you do SSP on
Android Ohio s

629
00:38:40,110 --> 00:38:44,760
the answer is you this is implemented at
the application layer on top of GAD

630
00:38:44,760 --> 00:38:47,960
so you would have to implement it in
your application

631
00:38:47,960 --> 00:38:52,240
for support there's no actual Bluetooth
device picker for Bluetooth smart the

632
00:38:52,240 --> 00:38:54,410
way there is the classic Bluetooth
because

633
00:38:54,410 --> 00:38:58,480
communicating with the device is so
device specific soviet future you build

634
00:38:58,480 --> 00:39:00,330
any rap I plan to do

635
00:39:00,330 --> 00:39:03,460
I do plan to release a Java and i OS
version

636
00:39:03,460 --> 00:39:10,460
so people can build that into their abs
question up here

637
00:39:18,829 --> 00:39:21,309
the question was was the fly

638
00:39:21,309 --> 00:39:24,779
due to laziness 422 compliance or

639
00:39:24,779 --> 00:39:27,930
really why why did they i why they have
this fly

640
00:39:27,930 --> 00:39:32,640
in the protocol I think the real reason
is because the CDH is expensive to

641
00:39:32,640 --> 00:39:33,288
implement

642
00:39:33,289 --> 00:39:37,319
a lot of people probably wouldn't want
to implement it and there are some

643
00:39:37,319 --> 00:39:38,469
questionable

644
00:39:38,469 --> 00:39:41,599
patents involved there arm

645
00:39:41,599 --> 00:39:45,380
I've heard some inside scoop that it was
mainly due to resource constraints

646
00:39:45,380 --> 00:39:50,269
sorry

647
00:39:50,269 --> 00:39:54,019
with slides I'll answer

648
00:39:54,019 --> 00:40:01,019
yeah

649
00:40:03,049 --> 00:40:05,788
so the question was how does this work
with audio can you

650
00:40:05,789 --> 00:40:10,119
interceptor inject audio issue God
transmitting ID over Bluetooth

651
00:40:10,119 --> 00:40:13,200
Bluetooth smart does not have any audio
capabilities

652
00:40:13,200 --> 00:40:19,230
if using audio using classic Bluetooth
other other questions

653
00:40:19,230 --> 00:40:23,609
anyone Euler

654
00:40:23,609 --> 00:40:27,140
okay thank you very much for sticking it
out with me

655
00:40:27,140 --> 00:40:29,799
I'm i crying for my sex partners

