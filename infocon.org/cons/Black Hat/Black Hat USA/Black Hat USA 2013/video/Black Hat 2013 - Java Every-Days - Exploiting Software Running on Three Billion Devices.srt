1
00:00:00,149 --> 00:00:04,589
government examine this is a job every
day is exploiting software running on

2
00:00:04,589 --> 00:00:05,799
three million devices

3
00:00:05,799 --> 00:00:12,059
they together with I desire your honor
to be speaking at a GD on the track at

4
00:00:12,059 --> 00:00:13,330
this year's %uh black and

5
00:00:13,330 --> 00:00:17,609
however you enjoy it is said to have a
job as a tack surface and walk away with

6
00:00:17,609 --> 00:00:20,910
a greater understanding and appreciation
for the vulnerabilities exist

7
00:00:20,910 --> 00:00:24,510
in the framework you know we can use
this information to find your next year

8
00:00:24,510 --> 00:00:25,050
and a half

9
00:00:25,050 --> 00:00:28,700
the

10
00:00:28,700 --> 00:00:29,580
I so

11
00:00:29,580 --> 00:00:33,800
first thing I do is register with a
solution this solution was provided to

12
00:00:33,800 --> 00:00:35,280
us by US Senator

13
00:00:35,280 --> 00:00:38,380
unless it's absolutely unless it is
absolutely necessary to run Java in a

14
00:00:38,380 --> 00:00:39,210
web browser

15
00:00:39,210 --> 00:00:42,130
the same weight as described below the
even after updating to the latest

16
00:00:42,130 --> 00:00:44,559
version of the software

17
00:00:44,559 --> 00:00:47,919
this will help mitigate other Java
vulnerabilities that may be discovered

18
00:00:47,920 --> 00:00:49,269
in the future and

19
00:00:49,269 --> 00:00:54,350
know its a bad year for PC software when
the US government is saying he don't use

20
00:00:54,350 --> 00:00:57,379
and Stephen what's the latest version of
the software

21
00:00:57,379 --> 00:01:01,070
I'm so there has been a rough year
earlier this year them

22
00:01:01,070 --> 00:01:04,150
we know that nobody in this room
actually his intention was going to

23
00:01:04,150 --> 00:01:05,870
follow the US government has to say

24
00:01:05,870 --> 00:01:09,260
so where forcing you this reason tation
so we hope you enjoy it

25
00:01:09,260 --> 00:01:12,290
there

26
00:01:12,290 --> 00:01:15,430
starting with the agenda we're gonna
take a tour in jobs attack surface and

27
00:01:15,430 --> 00:01:18,090
describe the type someone abilities that
exist in the framework

28
00:01:18,090 --> 00:01:22,370
around look at it as a set of five case
studies for the top donor body types

29
00:01:22,370 --> 00:01:26,790
and and provide you with a senate
crucial concepts and it never published

30
00:01:26,790 --> 00:01:31,540
muscle which have never been publicly
shown before the moment action

31
00:01:31,540 --> 00:01:35,210
mind and then there are many publicly
released we're gonna talk about what

32
00:01:35,210 --> 00:01:37,100
type 1 earlier action being

33
00:01:37,100 --> 00:01:40,760
leveraged in the landscape and then
we're taking independent look at how

34
00:01:40,760 --> 00:01:44,940
40 is handling the Securities and issues
exist in the job training or

35
00:01:44,940 --> 00:01:49,990
there for suicide quick introduction for
days on myself

36
00:01:49,990 --> 00:01:53,590
a if you don't know who I my name is
Brian going so I worked for Hewlett

37
00:01:53,590 --> 00:01:54,250
Packard

38
00:01:54,250 --> 00:01:58,200
and I worked on the manager Ron Emily
research in HP security research

39
00:01:58,200 --> 00:01:59,040
organization

40
00:01:59,040 --> 00:02:03,520
my primary responsibility is running the
zero day initiative which is aimed

41
00:02:03,520 --> 00:02:06,630
the world's largest vendor agnostic but
bounty program

42
00:02:06,630 --> 00:02:09,990
am also responsible for organizing the
countdown competitions

43
00:02:09,990 --> 00:02:14,770
they happen and now twice a year I also
knew root cause analysis on the CS

44
00:02:14,770 --> 00:02:15,470
emissions

45
00:02:15,470 --> 00:02:19,020
from there are researcher may say come
in every day and verify excellent

46
00:02:19,020 --> 00:02:20,700
ability though in my free time

47
00:02:20,700 --> 00:02:24,400
I'm a family man I have two kids and a
wife and it when I'm not spending time

48
00:02:24,400 --> 00:02:24,930
with them

49
00:02:24,930 --> 00:02:28,450
i'm looking for Cody are looking for my
own abilities in code and

50
00:02:28,450 --> 00:02:31,840
closest close source software I'm

51
00:02:31,840 --> 00:02:35,950
you can find me on twitter I militias in
front where and now surrounds me a hand

52
00:02:35,950 --> 00:02:37,220
on

53
00:02:37,220 --> 00:02:42,489
day I'm just gonna most part he is your
name is your team and i actually were to

54
00:02:42,489 --> 00:02:46,540
brand I'm when the guys that analyzes
cases submitted to you our program

55
00:02:46,540 --> 00:02:49,910
as a result I spent a lot of time and i
dont hands

56
00:02:49,910 --> 00:02:53,590
as a rule or that I often incurs an idea
I actually submitted

57
00:02:53,590 --> 00:02:58,180
one survivor reports just three than two
weeks ago and have another marksmen

58
00:02:58,180 --> 00:03:03,470
among you reach me on Twitter are see as
wondering which animals in mind he the

59
00:03:03,470 --> 00:03:04,660
CDI a Twitter account

60
00:03:04,660 --> 00:03:10,370
like so I really want to take a look at
Java

61
00:03:10,370 --> 00:03:14,299
well who want to get a more granular
insight into the attack surface and US

62
00:03:14,299 --> 00:03:15,640
Surgeon submissions

63
00:03:15,640 --> 00:03:20,049
I had to zero day initiative in May 2012
in early 2013

64
00:03:20,049 --> 00:03:22,970
and the things we really want to
understand was what the most common

65
00:03:22,970 --> 00:03:24,250
vulnerability types

66
00:03:24,250 --> 00:03:28,500
in the framework we want to also
understand which hardly architecture

67
00:03:28,500 --> 00:03:32,750
produces the most owner release night
because this would be a good target for

68
00:03:32,750 --> 00:03:33,380
auditing

69
00:03:33,380 --> 00:03:36,440
we also wanted to understand which part
of the architecture

70
00:03:36,440 --> 00:03:39,639
produces the most severe gonna release a

71
00:03:39,639 --> 00:03:43,470
the and how those were actually being
leveraged in the landscape

72
00:03:43,470 --> 00:03:47,260
and again looking at have an independent
look at how work was handling these

73
00:03:47,260 --> 00:03:51,130
I'm the the industry had been

74
00:03:51,130 --> 00:03:54,299
higher in early 2012 focus on the
sandbox bypass issue

75
00:03:54,299 --> 00:03:57,380
which will talk about where in the
presentation and it was also model

76
00:03:57,380 --> 00:03:58,650
zero-day vulnerabilities

77
00:03:58,650 --> 00:04:02,200
they were being demonstrated how known
and then used against

78
00:04:02,200 --> 00:04:06,130
major suffer mentors like Facebook and
Apple kinda Peter interest to make

79
00:04:06,130 --> 00:04:11,150
do further analysis lie so let's talk
about the sample said that we used

80
00:04:11,150 --> 00:04:15,980
we scoped our sample said to the modern
day but we can see our modern-day

81
00:04:15,980 --> 00:04:20,560
vulnerabilities in Java and this coveted
2011 through 2013

82
00:04:20,560 --> 00:04:25,010
in our sample set was a over 120 you
need to Java bugs

83
00:04:25,010 --> 00:04:27,880
and this is probably the moon the
largest collection of Java

84
00:04:27,880 --> 00:04:28,940
vulnerabilities

85
00:04:28,940 --> 00:04:32,350
in one place outside a moral or outside
the NSA

86
00:04:32,350 --> 00:04:36,350
or some other nations day I'm so we we
had a large collection a look and

87
00:04:36,350 --> 00:04:40,199
we have the entire zero day initiative
database we had numerous on in relief

88
00:04:40,199 --> 00:04:41,240
used to look at

89
00:04:41,240 --> 00:04:45,840
penetration testing tools actually cares
and we included in this analysis 60 they

90
00:04:45,840 --> 00:04:48,400
want to believe that have yet to be
matched by Oracle

91
00:04:48,400 --> 00:04:51,669
I which should hopefully be coming out
in the next patch release

92
00:04:51,669 --> 00:04:55,240
did you leave threat landscape
statistics special see you later and in

93
00:04:55,240 --> 00:04:55,740
the size

94
00:04:55,740 --> 00:04:59,889
we worked with reversing labs and got a
sample a 52,000 unique

95
00:04:59,889 --> 00:05:04,100
Mauer samples analyzed and look at and
draw conclusions from

96
00:05:04,100 --> 00:05:08,720
when we take a look at Javas footprint

97
00:05:08,720 --> 00:05:12,360
it has a huge installation Mason that's
what makes it such an interesting target

98
00:05:12,360 --> 00:05:13,180
for attackers

99
00:05:13,180 --> 00:05:17,639
Courtney okay the Nanaimo so this
installation base during translation

100
00:05:17,639 --> 00:05:21,440
have process with in a safe three
million devices run Java

101
00:05:21,440 --> 00:05:26,710
it according to Oracle 1.1 million yes
options Allah and His 1.4 million job

102
00:05:26,710 --> 00:05:29,989
cards produced every year have no idea
what a job with heart is

103
00:05:29,990 --> 00:05:34,930
but it runs Java and I'm sure runs a
subset I don't know how to get updated

104
00:05:34,930 --> 00:05:38,729
so if there's a chance to somebody's
house may be useful in that case

105
00:05:38,729 --> 00:05:42,409
the other interesting thing is that and
mostly users in Java

106
00:05:42,410 --> 00:05:46,250
are running outdated software there was
a there's a report released earlier this

107
00:05:46,250 --> 00:05:47,410
year from Websense

108
00:05:47,410 --> 00:05:51,570
it said ninety-three percent a job for
users are not running the latest patch a

109
00:05:51,570 --> 00:05:52,960
month after its release

110
00:05:52,960 --> 00:05:56,640
and sometimes up to a year the other
interesting thing about Joe is that

111
00:05:56,640 --> 00:05:57,390
schools

112
00:05:57,390 --> 00:06:01,219
are using it as a base language for
teaching computer science this

113
00:06:01,220 --> 00:06:04,850
to students I know that you know geez I
went to University of Texas daytime

114
00:06:04,850 --> 00:06:06,270
drama there's a baseline which

115
00:06:06,270 --> 00:06:10,180
I went to Texas A&M University and they
also use that as a sign to show every

116
00:06:10,180 --> 00:06:10,850
year there's

117
00:06:10,850 --> 00:06:14,130
hundreds of snow there were thousands of
students coming out

118
00:06:14,130 --> 00:06:18,090
who that is their primary language in
and so as a result has been a widespread

119
00:06:18,090 --> 00:06:19,120
adoption have

120
00:06:19,120 --> 00:06:22,690
job in the marketplace including in the
financial services sector

121
00:06:22,690 --> 00:06:27,010
and now into the mobile device space
like

122
00:06:27,010 --> 00:06:30,270
if we look at the software architecture
stuff is on the screen here

123
00:06:30,270 --> 00:06:35,150
there's over 50 subcomponents they're
responsible for specific tasks

124
00:06:35,150 --> 00:06:38,330
in the framework itself and you see this

125
00:06:38,330 --> 00:06:42,659
if we look at them and that's where our
initial research focused on was

126
00:06:42,660 --> 00:06:46,040
trying to understand the subcomponents
and $100 million affecting some

127
00:06:46,040 --> 00:06:48,660
components and we'll talk about a couple
in real quick

128
00:06:48,660 --> 00:06:52,580
the deployment is somehow knits a
consist in the Java Web Start

129
00:06:52,580 --> 00:06:55,700
capabilities and the job applicator
abilities and there's

130
00:06:55,700 --> 00:06:59,390
you'll see a couple seconds a large
there's a Larson a buzz in a component

131
00:06:59,390 --> 00:07:03,800
the job FX component apply the same
API's for delivery in creating rich

132
00:07:03,800 --> 00:07:05,360
internet applications

133
00:07:05,360 --> 00:07:10,660
the Java 2d components as a set of APIs
for drying two-dimensional graphics

134
00:07:10,660 --> 00:07:14,450
and the library some components provides
a basic functionality that is used by

135
00:07:14,450 --> 00:07:16,390
most applications

136
00:07:16,390 --> 00:07:18,979
really does provide a wide range of
capabilities and that's why it is so

137
00:07:18,980 --> 00:07:20,760
popular with the developers

138
00:07:20,760 --> 00:07:25,390
there's the ability to you consumed on a
Web Services work with databases

139
00:07:25,390 --> 00:07:30,620
is the reason why people actually like
to use the software itself

140
00:07:30,620 --> 00:07:33,940
so let's start looking at the actual
gonna really trans and the attack

141
00:07:33,940 --> 00:07:34,860
surface

142
00:07:34,860 --> 00:07:39,140
a job so we're looking at here is

143
00:07:39,140 --> 00:07:43,340
patch statistics from 2011 2003-2013

144
00:07:43,340 --> 00:07:46,430
and we see if you look at the match
statistics there's increase catching

145
00:07:46,430 --> 00:07:46,930
which

146
00:07:46,930 --> 00:07:51,010
you know as we all know is a due to the
increased my really have

147
00:07:51,010 --> 00:07:54,520
research going on there 50 issues were
matched

148
00:07:54,520 --> 00:07:57,870
50 remotely exploitable issues were
passed in 2011

149
00:07:57,870 --> 00:08:01,180
and just in the first half for 2013 130

150
00:08:01,180 --> 00:08:05,370
remotely exploitable issues were matched
to the increase in the in research in

151
00:08:05,370 --> 00:08:07,740
Marion increase in patching

152
00:08:07,740 --> 00:08:10,840
or black she provides a lot of meta-data
when they release a patch

153
00:08:10,840 --> 00:08:14,210
and the release along with the patch
itself ASE

154
00:08:14,210 --> 00:08:17,580
risk matrix which is shown on the screen
and it provides you additional

155
00:08:17,580 --> 00:08:19,719
information about the vulnerability that
is

156
00:08:19,720 --> 00:08:24,260
that is being fixed and needs and we use
this as for initial analysis

157
00:08:24,260 --> 00:08:28,080
and you can see this is CV 2013 23

158
00:08:28,080 --> 00:08:31,609
83 is a boner million into the
components

159
00:08:31,610 --> 00:08:34,930
and it is remotely exploitable without
authentication

160
00:08:34,930 --> 00:08:39,279
it's it's CBS s forces hand so it's a
very severe gonna really and truly

161
00:08:39,279 --> 00:08:40,880
component

162
00:08:40,880 --> 00:08:44,820
according to the risk matrix but the
interesting thing about how job backers

163
00:08:44,820 --> 00:08:48,209
are York black shoe stores the CBS %uh
stories they actually assume

164
00:08:48,209 --> 00:08:52,000
that the user is running the app with or
the Webster application as and using

165
00:08:52,000 --> 00:08:53,250
administrative privileges

166
00:08:53,250 --> 00:08:56,500
but really is probably the best way to
go for judging

167
00:08:56,500 --> 00:09:00,860
CSS course I'm but in reality most
vendors are not going to do that and as

168
00:09:00,860 --> 00:09:04,760
a result for QoS giving themselves a
more senior harsh penalty

169
00:09:04,760 --> 00:09:08,490
on the vulnerabilities are there better
being fixed dammit I just depends on

170
00:09:08,490 --> 00:09:09,860
your perspective if you like

171
00:09:09,860 --> 00:09:16,269
he and the fact that they're using that
approach for judging CSS force

172
00:09:16,269 --> 00:09:19,329
if we just look at the information that
oracle provides

173
00:09:19,329 --> 00:09:24,300
with their patches we can see the
component rankings there on on the slide

174
00:09:24,300 --> 00:09:27,470
those components listed on the screen
account for for the remotely exploitable

175
00:09:27,470 --> 00:09:29,029
vulnerabilities

176
00:09:29,029 --> 00:09:32,889
in job itself according to their
according to the match information

177
00:09:32,889 --> 00:09:36,139
with unemployment being the number one
most vulnerable components

178
00:09:36,139 --> 00:09:40,970
followed by the to you component a
libraries Jonah Hex nawt

179
00:09:40,970 --> 00:09:43,779
some interesting statistics they came
from this analysis is that there's

180
00:09:43,779 --> 00:09:46,149
actually two subcomponents in the
architecture

181
00:09:46,149 --> 00:09:49,750
their work have had bugs in them every
single patch release

182
00:09:49,750 --> 00:09:53,450
and that was the deployment and truly
components have been fixed in every

183
00:09:53,450 --> 00:09:54,810
single release

184
00:09:54,810 --> 00:09:58,300
there's actually a point in time where
there was a to some components in the

185
00:09:58,300 --> 00:09:59,860
architecture that had

186
00:09:59,860 --> 00:10:03,819
double digit CVV counts in a single
action that will happen to those in

187
00:10:03,819 --> 00:10:07,759
February 3rd 2013 which i think was the
largest Java patch ever

188
00:10:07,759 --> 00:10:13,249
I the deployment and John affects other
components had 10 and 12 respectively

189
00:10:13,249 --> 00:10:16,559
on average the CSS course 7.6

190
00:10:16,559 --> 00:10:20,480
7 have been if you look at the table
itself you to make an argument that the

191
00:10:20,480 --> 00:10:21,720
to the component

192
00:10:21,720 --> 00:10:25,149
is actually the worst company in the
architecture base of those

193
00:10:25,149 --> 00:10:30,420
its ranking an average season average
CSS for

194
00:10:30,420 --> 00:10:33,378
but these are looking at the zero day
initiative submission trends over the

195
00:10:33,379 --> 00:10:34,290
years

196
00:10:34,290 --> 00:10:39,309
I'm here in the ZF program we're getting
about five jobs 0 days every quarter

197
00:10:39,309 --> 00:10:42,439
when you can see there the huge like I
was talking about in the fourth quarter

198
00:10:42,439 --> 00:10:43,680
2012

199
00:10:43,680 --> 00:10:48,470
and the first quarter 2013 with a high
of 33

200
00:10:48,470 --> 00:10:51,759
0 days coming into our program in one
corner and that's how the reason for the

201
00:10:51,759 --> 00:10:55,269
name for the talk is a basically felt
like every day we're getting a new job

202
00:10:55,269 --> 00:10:59,529
zero-day into the system which we had a
quick return it or called

203
00:10:59,529 --> 00:11:03,009
I if you look at the components that are
researchers are actually focusing on

204
00:11:03,009 --> 00:11:06,959
they're focusing on the to the component
the library component Java FX and the

205
00:11:06,959 --> 00:11:07,490
deployment

206
00:11:07,490 --> 00:11:11,149
component and sound and if you look at
it

207
00:11:11,149 --> 00:11:14,499
the overall stats for how many the

208
00:11:14,499 --> 00:11:18,939
bugsy after I was actually responsible
for damage the actual account for 36

209
00:11:18,939 --> 00:11:21,059
percent in Java vulnerabilities

210
00:11:21,059 --> 00:11:24,329
but the CSS for 9.20 or higher

211
00:11:24,329 --> 00:11:28,120
that's a lot of bugs now with an average
score 9.28

212
00:11:28,120 --> 00:11:31,199
I'm so when you look at it into a scene
in the senior researchers are focusing

213
00:11:31,199 --> 00:11:33,860
on companies to produce the most loans

214
00:11:33,860 --> 00:11:37,670
court components and end up on the most
vulnerable list when his EI researchers

215
00:11:37,670 --> 00:11:38,740
are looking at them

216
00:11:38,740 --> 00:11:41,800
it just depends on your perspective

217
00:11:41,800 --> 00:11:46,389
so we did agree to let a 100 to 120 plus
his own abilities and we had in our

218
00:11:46,389 --> 00:11:47,490
dataset

219
00:11:47,490 --> 00:11:51,869
and we we categorize them by
vulnerability class RCW even

220
00:11:51,869 --> 00:11:56,600
million for started off with the blue
boxes with privileges and what issues

221
00:11:56,600 --> 00:12:00,300
buffer overflows improper restriction on
my for operations

222
00:12:00,300 --> 00:12:05,410
122 untrusted for your fans is integer
overflows in a couple other bugs

223
00:12:05,410 --> 00:12:08,569
I'm always size you-know-who ensure that

224
00:12:08,569 --> 00:12:12,618
the previous Mr tissue had the most
number vulnerabilities

225
00:12:12,619 --> 00:12:17,199
in the city and in Java and but column
by buffer overflows

226
00:12:17,199 --> 00:12:20,300
followed by the caravans rights the

227
00:12:20,300 --> 00:12:24,579
what we wanted to take a more granular
look at the 1i really classism cells and

228
00:12:24,579 --> 00:12:26,129
so he said categorized

229
00:12:26,129 --> 00:12:30,910
the underbelly classes even sure they're
we labeled and

230
00:12:30,910 --> 00:12:34,009
gonna believe that have used the
reflection API's

231
00:12:34,009 --> 00:12:38,259
in Java to recharge the code they were
restricted I and II

232
00:12:38,259 --> 00:12:42,050
sense to allow them to return I'm
disable the same box

233
00:12:42,050 --> 00:12:46,079
as unsafe reflections on a release the
Musa I'm

234
00:12:46,079 --> 00:12:51,110
a job as deep religious blocs we labeled
as the reason for alleged violations

235
00:12:51,110 --> 00:12:54,149
and then and vulnerabilities in that ad
I'm used to

236
00:12:54,149 --> 00:12:58,850
more goals type system and going to be
using techniques like the serialization

237
00:12:58,850 --> 00:13:00,209
interesting data

238
00:13:00,209 --> 00:13:03,420
when they will this type confusion we
also some categorize the buffer

239
00:13:03,420 --> 00:13:06,249
overflows into the classic even sadder
face variance

240
00:13:06,249 --> 00:13:09,550
and how to bounce right now to boundary
for buffer operations

241
00:13:09,550 --> 00:13:12,579
I'm so and with the key takeaway here
for job is

242
00:13:12,579 --> 00:13:17,329
its it's a classic case study in almost
every single major my class

243
00:13:17,329 --> 00:13:21,490
that exists that we have enough we've
known about for a long time

244
00:13:21,490 --> 00:13:25,110
so a its though if you look even deeper
at

245
00:13:25,110 --> 00:13:29,819
specifically the sandbox bypass issues

246
00:13:29,819 --> 00:13:33,309
itself seems silly 62 a 265

247
00:13:33,309 --> 00:13:36,540
account for over half a boner billy's in
our datasets

248
00:13:36,540 --> 00:13:39,660
I'm if you look at the pie chart there
you can see that's

249
00:13:39,660 --> 00:13:44,509
the unsafe reflection has match 50
percent over fifty percent of those and

250
00:13:44,509 --> 00:13:46,759
I we scrimmage violations work order

251
00:13:46,759 --> 00:13:51,350
and followed by the type confusion bags
ABC there there's a charge on the screen

252
00:13:51,350 --> 00:13:51,869
and

253
00:13:51,869 --> 00:13:57,389
shows zeeye submissions and then CEC
he's in the wild they are actively being

254
00:13:57,389 --> 00:13:59,509
exploited so we can really say that

255
00:13:59,509 --> 00:14:02,959
or who has known about this issue for a
long time and

256
00:14:02,959 --> 00:14:07,459
as early as early 2011 2010 and these
are actually quite popular will talk

257
00:14:07,459 --> 00:14:09,499
about this in the leveraging section

258
00:14:09,499 --> 00:14:13,339
a with a with exporters saddam because
you know how to bypass OS level

259
00:14:13,339 --> 00:14:15,100
medications like Devin Sr

260
00:14:15,100 --> 00:14:19,259
they just work every time well if we
look a memory

261
00:14:19,259 --> 00:14:22,399
corruption issues go see the movie 787

262
00:14:22,399 --> 00:14:27,040
out around rates in 122 he may suffer
flows is really to root causes for this

263
00:14:27,040 --> 00:14:28,199
is gonna release

264
00:14:28,199 --> 00:14:33,540
in question the first is an integer
overflow that houses an allocation

265
00:14:33,540 --> 00:14:37,748
smaller than the intended by for an
issue right past and then also incorrect

266
00:14:37,749 --> 00:14:39,160
arithmetic operations

267
00:14:39,160 --> 00:14:43,290
but if you look at the those two classes
major classes a-1 ability tax

268
00:14:43,290 --> 00:14:46,969
we see that one-third of those issues
are resulted in order overflow which

269
00:14:46,970 --> 00:14:49,490
will actually go over an example
menninger overflow

270
00:14:49,490 --> 00:14:54,540
in a in the case study section I so that
it's an interesting 26

271
00:14:54,540 --> 00:14:57,579
interesting look at the one abilities
themselves

272
00:14:57,579 --> 00:15:01,029
and the fact that they are two different
types I

273
00:15:01,029 --> 00:15:04,579
intricately rhythmic operations is a
majority of those a memory corruptions

274
00:15:04,579 --> 00:15:06,589
be

275
00:15:06,589 --> 00:15:10,459
to taking that information MMA ring with
CZ I information in all the data sources

276
00:15:10,459 --> 00:15:11,259
that we had

277
00:15:11,259 --> 00:15:14,850
we can determine the top seven
dollar-million classes for Java

278
00:15:14,850 --> 00:15:18,399
number one being behind safe reflections
Stylophone about us

279
00:15:18,399 --> 00:15:23,439
sandbox bypass and their most popular
actually in the library some components

280
00:15:23,439 --> 00:15:27,118
the next easily scrimmage violation
again most popular in the library

281
00:15:27,119 --> 00:15:28,239
subcomponents

282
00:15:28,239 --> 00:15:31,829
followed by two classic memory
corruption issues we have the

283
00:15:31,829 --> 00:15:35,220
he may see for overflow and the outer
bound right

284
00:15:35,220 --> 00:15:39,279
followed by and trusted clearly
referencing a image on the FX company

285
00:15:39,279 --> 00:15:41,489
which is actually my favorite some bug
in Java

286
00:15:41,489 --> 00:15:45,579
I don't know why they exist but they do
and then there's any future overflow

287
00:15:45,579 --> 00:15:46,420
bugs

288
00:15:46,420 --> 00:15:50,989
in here their resulting he basically for
flows and type confusion

289
00:15:50,989 --> 00:15:54,399
interesting thing to note here is that
the and safer functionally scrimmage

290
00:15:54,399 --> 00:15:57,220
violations are the most popular him but
Russia

291
00:15:57,220 --> 00:16:02,290
type confusion as number seven in the
West Mercia switch in that way around

292
00:16:02,290 --> 00:16:06,559
when we talk about leveraging so the
next thing we did was

293
00:16:06,559 --> 00:16:09,899
we said okay we know what the most
notable subcomponents are

294
00:16:09,899 --> 00:16:13,350
we have a set of 120 you need jobs on
abilities

295
00:16:13,350 --> 00:16:17,420
let's create a roadmap I'm the type who
gonna releasing each component and which

296
00:16:17,420 --> 00:16:20,610
packages those vulnerabilities actually
existed in

297
00:16:20,610 --> 00:16:23,779
so if we look at here and this is only
the one the first time this is this

298
00:16:23,779 --> 00:16:26,569
mapping out the attack surface is
actually existed

299
00:16:26,569 --> 00:16:29,759
I'm so if we look outside your home I'm

300
00:16:29,759 --> 00:16:33,759
if we look at the 2d Judy components we
can see which packages

301
00:16:33,759 --> 00:16:37,269
gonna really is actually existed in the
title own abilities which have any

302
00:16:37,269 --> 00:16:40,170
memory corruption issues that exist in
their

303
00:16:40,170 --> 00:16:43,339
if we look at the deployment
subcomponent

304
00:16:43,339 --> 00:16:47,029
they suffered from a set and injection
and process control issues

305
00:16:47,029 --> 00:16:51,899
the the hand and the rest in the
components in this list are actually

306
00:16:51,899 --> 00:16:55,249
sandbox related issues

307
00:16:55,249 --> 00:16:58,730
this is the and other celebs comparison
with you now son

308
00:16:58,730 --> 00:17:01,739
you can see their job FX suffered from a
lot of interesting

309
00:17:01,739 --> 00:17:06,679
under the reference style gonna release
I the library said that subcomponent

310
00:17:06,679 --> 00:17:11,020
I'm mercy well pretty much excludes we
had sandbox issues

311
00:17:11,020 --> 00:17:14,030
made money interesting component is
actually the sound company has had the

312
00:17:14,030 --> 00:17:14,699
same box

313
00:17:14,699 --> 00:17:18,740
and memory corruption issues in it the
interesting thing here in NY this

314
00:17:18,740 --> 00:17:21,679
mapping is valuable as as a bug hunter

315
00:17:21,679 --> 00:17:26,000
who wants to responsibly disclosed to
our program Vali was 32

316
00:17:26,000 --> 00:17:30,860
I'm pinpoint which subcomponents to look
at and how to give your road map for

317
00:17:30,860 --> 00:17:31,980
what to look for

318
00:17:31,980 --> 00:17:35,840
especially when you do in one day
hashing you can take a subcomponent you

319
00:17:35,840 --> 00:17:39,149
getting my stuff about the risk a major
dork provides

320
00:17:39,150 --> 00:17:42,830
you look at this mapping and determined
went on a really tight Cinco changes you

321
00:17:42,830 --> 00:17:46,178
should be looking for

322
00:17:46,179 --> 00:17:50,570
now we're going to I take a look at
except que se the most popular on a

323
00:17:50,570 --> 00:17:51,450
really tight

324
00:17:51,450 --> 00:17:54,500
in the most popular components we're
gonna go over Essendon

325
00:17:54,500 --> 00:17:58,660
to sandbox issues in the library
subcomponent to memory corruption issues

326
00:17:58,660 --> 00:17:59,929
in this unique components

327
00:17:59,929 --> 00:18:04,540
an untrusted pointer dereference 200
million the job at six components

328
00:18:04,540 --> 00:18:07,200
something like I said before so many
spots and never been seen before

329
00:18:07,200 --> 00:18:08,120
publicly here

330
00:18:08,120 --> 00:18:14,210
and so but the moment hash like

331
00:18:14,210 --> 00:18:17,830
aren't so the first leg is in the
library is a component and as a hatter

332
00:18:17,830 --> 00:18:20,600
would say much as you do to you and say
for flexion

333
00:18:20,600 --> 00:18:24,970
first what is unsafe reflection and
imagine you have AAA are actually in for

334
00:18:24,970 --> 00:18:26,320
sports reflection

335
00:18:26,320 --> 00:18:30,270
medea dispatch method that takes a
string and the summit's ring you then

336
00:18:30,270 --> 00:18:32,110
execute method amply

337
00:18:32,110 --> 00:18:35,290
in so you have to say they the string
had a and

338
00:18:35,290 --> 00:18:38,440
it all and I am we look up and invoke
the admin

339
00:18:38,440 --> 00:18:42,150
unsafe reflection would be where you do
not have proper validation on that

340
00:18:42,150 --> 00:18:44,850
string8 and you allow a malicious user
German

341
00:18:44,850 --> 00:18:49,270
run need to leave everything that
they've as CV joint 1325

342
00:18:49,270 --> 00:18:53,580
436 is an example above unsafe
reflection as reported to us by Ben

343
00:18:53,580 --> 00:18:56,470
Murphy on March 23rd 2013

344
00:18:56,470 --> 00:18:59,790
it starts off by using security
explorations issue 54

345
00:18:59,790 --> 00:19:02,879
which or or did decided is not a boner
million

346
00:19:02,880 --> 00:19:07,640
I'm issue 54 makes use of the invoke
dynamic GM of good

347
00:19:07,640 --> 00:19:10,910
to you get access to protected methods
so

348
00:19:10,910 --> 00:19:14,500
in this particular case we can get
access to define class project into the

349
00:19:14,500 --> 00:19:15,820
class letters last

350
00:19:15,820 --> 00:19:19,050
and we we end up with him at the panel
to it

351
00:19:19,050 --> 00:19:22,340
with on the also mentioned that they had
another way

352
00:19:22,340 --> 00:19:26,310
a actually turning into a force play in
the corner issue 55

353
00:19:26,310 --> 00:19:29,340
and bass on issue 55 and the same CV

354
00:19:29,340 --> 00:19:33,100
as I'm with Ben Murphy is a minute to us
we can only assume that they're the same

355
00:19:33,100 --> 00:19:34,070
phone

356
00:19:34,070 --> 00:19:37,889
a in Murphy is found that you can use
method hand was buying two method

357
00:19:37,890 --> 00:19:41,020
to bind the class to bind a.m. at that
handle

358
00:19:41,020 --> 00:19:45,770
where a classloader to aim at the handle
and it will allow the class interviews

359
00:19:45,770 --> 00:19:46,250
as a

360
00:19:46,250 --> 00:19:50,420
valid argument so once you've done that
you can actually invoke it and

361
00:19:50,420 --> 00:19:54,070
continue on once you've done that all
you have to do is create a permission to

362
00:19:54,070 --> 00:19:56,379
mean that contains all permission and
then lose it

363
00:19:56,380 --> 00:19:59,760
a class using that permission to manage
once you've done that you can execute

364
00:19:59,760 --> 00:20:01,970
method from the lowly class to you all

365
00:20:01,970 --> 00:20:05,990
invoke a system that security manager
know and you know if I the security

366
00:20:05,990 --> 00:20:06,730
manager

367
00:20:06,730 --> 00:20:10,930
or you could have a static initializer
within the load in class do the same

368
00:20:10,930 --> 00:20:15,650
and he really is a sample the park and
we start off with

369
00:20:15,650 --> 00:20:19,440
as de uso a custom class so

370
00:20:19,440 --> 00:20:23,460
prevention I'm see make use of the no
dynamic opcode to you

371
00:20:23,460 --> 00:20:27,990
get access to a protected class you have
to handcraft the classes you can I use

372
00:20:27,990 --> 00:20:29,140
the Java compiler

373
00:20:29,140 --> 00:20:33,020
you can do it with rocks fights but an
easier way is to use a framework such as

374
00:20:33,020 --> 00:20:34,750
a SMT framework

375
00:20:34,750 --> 00:20:37,910
so you invoke yearly class and

376
00:20:37,910 --> 00:20:42,110
and recommended that you defined within
it in the whole point that is to invoke

377
00:20:42,110 --> 00:20:46,390
this method here said define class
and/or and when are you in the past year

378
00:20:46,390 --> 00:20:47,650
it is a method hanoi

379
00:20:47,650 --> 00:20:51,320
and we use that method hand which will
be about the panel to you our

380
00:20:51,320 --> 00:20:54,480
glasser define class protection method

381
00:20:54,480 --> 00:20:58,570
and we just save it to a static variable
so we can access it later on

382
00:20:58,570 --> 00:21:02,590
went to even vote our custom class with
an krier Commission object and encrypt

383
00:21:02,590 --> 00:21:04,159
create a protection to maintain

384
00:21:04,160 --> 00:21:07,990
using that permission object we can get
access to our class later

385
00:21:07,990 --> 00:21:11,400
and create a minute handle and bind the

386
00:21:11,400 --> 00:21:15,190
class order to that meant to handle and
then we invoke a class at this point all

387
00:21:15,190 --> 00:21:16,730
we have to do is

388
00:21:16,730 --> 00:21:20,900
notify the prison recommended within the
lower class to notify the security

389
00:21:20,900 --> 00:21:21,720
manager

390
00:21:21,720 --> 00:21:25,120
for as I said before make use as a
sacrificial wiser

391
00:21:25,120 --> 00:21:29,250
so the way or decided to pass this way
is by modifying the

392
00:21:29,250 --> 00:21:32,280
I'm where the methods that implicitly
called the

393
00:21:32,280 --> 00:21:35,850
the convert methane with ensign invoke
you till rapper

394
00:21:35,850 --> 00:21:39,910
and it was patched in JDK 7 update 21

395
00:21:39,910 --> 00:21:44,480
and they did that by adding this a
search and this is Jack where

396
00:21:44,480 --> 00:21:48,100
if the prior to class is not an
interface well cast are

397
00:21:48,100 --> 00:21:53,290
object to the gym in class here we can
see the original version where you can

398
00:21:53,290 --> 00:21:55,590
clearly see that there is no its check

399
00:21:55,590 --> 00:21:59,570
I'm as a result to the hatchery if you
were to try to run the affirmation Park

400
00:21:59,570 --> 00:22:04,669
you end up in a your will result in a
class cast exception

401
00:22:04,670 --> 00:22:08,310
Arts in the next Mon ability is also a
libraries about

402
00:22:08,310 --> 00:22:12,470
some component and as a pro in sandbox
issue due to his privilege violation

403
00:22:12,470 --> 00:22:17,980
Java provides a way to you execute code
in a higher context in your

404
00:22:17,980 --> 00:22:22,430
Creek given as an actress a nap with and
this is done through access controllers

405
00:22:22,430 --> 00:22:26,180
do privilege block do for Lynch method
takes

406
00:22:26,180 --> 00:22:30,010
two arguments one that's required when
that's optional the required argument is

407
00:22:30,010 --> 00:22:31,940
a class anonymous or otherwise

408
00:22:31,940 --> 00:22:35,520
that has a run method and this run
method will get Ryan

409
00:22:35,520 --> 00:22:39,200
when more within the bloc in the higher
lower context

410
00:22:39,200 --> 00:22:42,960
the second argument is an access control
contacts object and that's basically

411
00:22:42,960 --> 00:22:46,170
assays see how the security context that

412
00:22:46,170 --> 00:22:49,390
existed when the access control contacts
with is created

413
00:22:49,390 --> 00:22:52,700
so if you created with a I'm interested
applicant and

414
00:22:52,700 --> 00:22:56,380
when library code runs in with your
access control context it on trial

415
00:22:56,380 --> 00:23:00,150
bill basically dropped religious for
executing your code if you're into it

416
00:23:00,150 --> 00:23:01,520
with naam

417
00:23:01,520 --> 00:23:04,840
within library code any would have a
higher context and you go to you do

418
00:23:04,840 --> 00:23:10,020
wall more powerful things I'm on
November 17th 2012 in review found that

419
00:23:10,020 --> 00:23:12,430
proxy doubt proxy proxy instance

420
00:23:12,430 --> 00:23:16,640
does not see the callers access control
context unfortunately it requires an

421
00:23:16,640 --> 00:23:20,360
indication hammer that they would
execute our retreat statements so

422
00:23:20,360 --> 00:23:23,460
prior to GT his own this was not all
that useful

423
00:23:23,460 --> 00:23:27,300
but he found that middle name method
handle proxies as a method as interface

424
00:23:27,300 --> 00:23:28,010
and since

425
00:23:28,010 --> 00:23:31,080
that allows creation of an invocation
handler incense

426
00:23:31,080 --> 00:23:36,220
and you can use this to get access to a
protected methods such as chrysler is

427
00:23:36,220 --> 00:23:37,690
defined class Nathan

428
00:23:37,690 --> 00:23:41,120
the only issue with this is once you've
created the bound method and we even

429
00:23:41,120 --> 00:23:45,590
have to find a way to execute without
putting your frames on the stack

430
00:23:45,590 --> 00:23:50,149
and here's a will several pockets even
start off with some class that

431
00:23:50,150 --> 00:23:54,970
you control and has an instance method
you want to execute at a higher context

432
00:23:54,970 --> 00:23:59,130
me just instantiated you then I'm
describe the method type

433
00:23:59,130 --> 00:24:02,440
oh the instance method you want to
execute and this is

434
00:24:02,440 --> 00:24:08,130
just the the return value the diverter
class and then primer classes

435
00:24:08,130 --> 00:24:11,350
you then look up the method using the
fine virtual method

436
00:24:11,350 --> 00:24:14,610
and passage the desired class the

437
00:24:14,610 --> 00:24:19,570
instance methods name and the met the
type instance

438
00:24:19,570 --> 00:24:23,070
now you find it to your desired class
and sense

439
00:24:23,070 --> 00:24:27,540
dry and run dry arguments drop arguments
as the name implies this drops arguments

440
00:24:27,540 --> 00:24:31,740
before invocation of the method and also
in this particular instance because

441
00:24:31,740 --> 00:24:35,620
the offset is your way on dropped the
first three arguments and object

442
00:24:35,620 --> 00:24:39,040
argument a method are you in an object
array argument

443
00:24:39,040 --> 00:24:41,860
once we done that we can create our
invitation here using that the panel

444
00:24:41,860 --> 00:24:43,250
prices as interface

445
00:24:43,250 --> 00:24:47,730
instance and at this point we so have to
invoke proxy new proxy instance

446
00:24:47,730 --> 00:24:51,190
we have to do it on an interface that so

447
00:24:51,190 --> 00:24:54,890
once we found into it we will be able to
execute code without suffering user

448
00:24:54,890 --> 00:24:57,370
frames on stack

449
00:24:57,370 --> 00:25:02,100
and this was passed in three different
places first in the method handles

450
00:25:02,100 --> 00:25:05,100
function using I'm modifying the

451
00:25:05,100 --> 00:25:08,560
fine virtual function which was modified
to make you something new

452
00:25:08,560 --> 00:25:12,970
fine balance caller class method and the
main takeaway from this is that the

453
00:25:12,970 --> 00:25:17,180
class return here will be it could
potentially be no and as a result when

454
00:25:17,180 --> 00:25:21,500
we call access virtual here we could
potentially be sending mail to it

455
00:25:21,500 --> 00:25:25,110
method handle proxies was modified in
the azeris instance method

456
00:25:25,110 --> 00:25:28,300
and specifically the may be mine caller
a

457
00:25:28,300 --> 00:25:33,100
call was added and within their the main
takeaway is that

458
00:25:33,100 --> 00:25:36,900
if the prior a class is no or the prior
to class has a no class letter which

459
00:25:36,900 --> 00:25:37,620
means it was

460
00:25:37,620 --> 00:25:41,980
is like basically my break loaded pair
its my Rico that was loaded

461
00:25:41,980 --> 00:25:45,430
then we will just return the meant that
handle without

462
00:25:45,430 --> 00:25:49,640
any modification whatsoever and we'll
never make it to the spine caller

463
00:25:49,640 --> 00:25:53,060
or you're buying caller function a

464
00:25:53,060 --> 00:25:56,450
meant that handle implementation was
also modified and its fine caller

465
00:25:56,450 --> 00:25:59,840
method just in case you make it this far
as the preferred

466
00:25:59,840 --> 00:26:03,490
classes known then we will just throw an
internal error

467
00:26:03,490 --> 00:26:08,740
I prior to this you would try to carry
on using a C trampoline and now it will

468
00:26:08,740 --> 00:26:12,760
end up with a I'm no corner exception

469
00:26:12,760 --> 00:26:17,330
art so the next vulnerability is in the
2d subcomponent and it's a he base

470
00:26:17,330 --> 00:26:19,699
buffer overflow due to injure overflow

471
00:26:19,700 --> 00:26:24,980
is reported to us by aids txt on
September 13th 2012

472
00:26:24,980 --> 00:26:29,840
and exists in native code using I'm into
you have to access it using Java his

473
00:26:29,840 --> 00:26:30,910
native interface

474
00:26:30,910 --> 00:26:34,890
exists and sign a treaty media live it
and leave the image created

475
00:26:34,890 --> 00:26:38,810
and the overflow occurs based on the
values for high

476
00:26:38,810 --> 00:26:41,850
with and channels times for so

477
00:26:41,850 --> 00:26:44,900
it takes four arguments the first which
is a type

478
00:26:44,900 --> 00:26:48,500
that specifies full what a good daddy
you're looking at

479
00:26:48,500 --> 00:26:52,120
if you specify the type is and wouldn't
then you'll be ordered

480
00:26:52,120 --> 00:26:57,790
achiever the integer overflow I'm mins
32 which is the type four channels

481
00:26:57,790 --> 00:27:02,139
with and hides is just a typedef around
the signed 32-bit integer

482
00:27:02,140 --> 00:27:06,300
there are some restrictions placed on
the values here in that within height

483
00:27:06,300 --> 00:27:09,720
both have to be greater than 0 and
channels has to be a greater than one in

484
00:27:09,720 --> 00:27:10,790
less than four

485
00:27:10,790 --> 00:27:14,050
but after that there are no checks
restrictions place whatsoever

486
00:27:14,050 --> 00:27:17,659
so here we can see that if the type is
in with and because we're in the switch

487
00:27:17,660 --> 00:27:18,580
statement

488
00:27:18,580 --> 00:27:21,710
I am were multiplying within channels by
four

489
00:27:21,710 --> 00:27:26,460
for modelling all those and then saying
it to WB and then later on where most

490
00:27:26,460 --> 00:27:27,950
playing time you be in height

491
00:27:27,950 --> 00:27:31,720
and using that to allocate memory so if
the value

492
00:27:31,720 --> 00:27:35,880
Heights times with times channels times
for is greater than two 30-second power

493
00:27:35,880 --> 00:27:39,740
it over Afghan war and the balloting a
buffer that is much smaller than we

494
00:27:39,740 --> 00:27:41,820
actually require so when we write to it
all

495
00:27:41,820 --> 00:27:47,189
overflow it was passed in JDK 7 update
17 through the use

496
00:27:47,190 --> 00:27:51,160
the safe to Malta macro and this was
actually interesting because this was

497
00:27:51,160 --> 00:27:51,820
patched

498
00:27:51,820 --> 00:27:54,909
heard if you're looking at the open GK
source code

499
00:27:54,910 --> 00:27:58,020
you can see this patch prior to you dad
that

500
00:27:58,020 --> 00:28:02,120
JDK 7 update 17 been released

501
00:28:02,120 --> 00:28:05,310
and here's a update is have been and we
can see that

502
00:28:05,310 --> 00:28:10,090
there using the system of macro and only
fit sexy is will they said the levy to

503
00:28:10,090 --> 00:28:10,710
the value

504
00:28:10,710 --> 00:28:14,140
with an channels and then once again
they're using safety

505
00:28:14,140 --> 00:28:17,840
mort on WB in four and only if it
succeeds will they said the BB

506
00:28:17,840 --> 00:28:21,010
to you Davey times for and then once
again

507
00:28:21,010 --> 00:28:25,150
to the before the call malek there and
multiplying WB in height before passing

508
00:28:25,150 --> 00:28:28,130
it to my work

509
00:28:28,130 --> 00:28:32,890
from ne the last 37.0 weaknesses in
outer bounds rate due to integer

510
00:28:32,890 --> 00:28:33,640
overflow

511
00:28:33,640 --> 00:28:37,120
as reported to us five tell it or both
on December 2nd

512
00:28:37,120 --> 00:28:41,620
2012 c 2013 2420 was

513
00:28:41,620 --> 00:28:44,660
the exists in been a decoded well

514
00:28:44,660 --> 00:28:47,760
and its in San advt image

515
00:28:47,760 --> 00:28:53,000
amet image rather is accessible via sign
a treaty image image representation

516
00:28:53,000 --> 00:28:56,740
and the more normal function is set i cm
pixels

517
00:28:56,740 --> 00:29:00,610
the issue lies and integer component
raster which is alas object

518
00:29:00,610 --> 00:29:03,620
an intercompany a raster has a scanline
straight field

519
00:29:03,620 --> 00:29:07,390
which is used without any validation
whatsoever

520
00:29:07,390 --> 00:29:11,100
so here we can see a sniff it out there
said ICN pixels function and we can see

521
00:29:11,100 --> 00:29:12,140
that the last

522
00:29:12,140 --> 00:29:16,210
are you into it is a.j object in this
case it's definitely a major component

523
00:29:16,210 --> 00:29:16,930
raster

524
00:29:16,930 --> 00:29:20,420
I we then see a scan lines right field
being said

525
00:29:20,420 --> 00:29:24,090
I'm as an offset from the good image
combining raster

526
00:29:24,090 --> 00:29:28,040
and then here we see does nation's worst
players being said and you can see the

527
00:29:28,040 --> 00:29:29,399
destination corner is

528
00:29:29,400 --> 00:29:33,360
said base of some man to using the scan
lines right fielder and

529
00:29:33,360 --> 00:29:37,520
that X&Y coordinates here we have the
outer loop where

530
00:29:37,520 --> 00:29:41,139
both the source corner and as an Asian
porner are incremented without any sort

531
00:29:41,140 --> 00:29:42,010
of validation

532
00:29:42,010 --> 00:29:46,540
to prevents integer overflow and here
we're just updating the

533
00:29:46,540 --> 00:29:50,060
destinations responders and in the inner
loop where once again

534
00:29:50,060 --> 00:29:53,120
incrementing the destination for without
any validation

535
00:29:53,120 --> 00:29:58,830
finally we're making our rights and
incoming source partner at the same time

536
00:29:58,830 --> 00:30:02,689
so this was passin JDK 7 update 21
through the use of three new members

537
00:30:02,690 --> 00:30:06,980
checks tragic source in check test and
in addition Oracle fully patched this

538
00:30:06,980 --> 00:30:07,700
fire

539
00:30:07,700 --> 00:30:12,170
I'm checking all in but are arguments
and not just the ones that were specific

540
00:30:12,170 --> 00:30:13,240
to this vulnerability

541
00:30:13,240 --> 00:30:17,130
so here's the check stray function and
we can see that they're doing division

542
00:30:17,130 --> 00:30:18,340
to make sure that

543
00:30:18,340 --> 00:30:21,890
if integer overflow occurs will return
false

544
00:30:21,890 --> 00:30:25,650
same goes for check stores and check
test and then here is the updated

545
00:30:25,650 --> 00:30:27,530
version is set I see in pixels

546
00:30:27,530 --> 00:30:31,430
where we can see that and now they're
rallying accident

547
00:30:31,430 --> 00:30:36,250
WNN here there validating XY H

548
00:30:36,250 --> 00:30:39,840
you can see here that the rallying that
the de dos its array within the rafters

549
00:30:39,840 --> 00:30:41,120
object is actually

550
00:30:41,120 --> 00:30:44,120
valid and then here we can see the user
the

551
00:30:44,120 --> 00:30:47,380
makers and they just introduced

552
00:30:47,380 --> 00:30:52,070
arts the last war really is in the Java
FX subcomponent and

553
00:30:52,070 --> 00:30:57,500
it's an interesting point the reference
the c 2013 24 train was reported to us

554
00:30:57,500 --> 00:30:59,180
by italians or both

555
00:30:59,180 --> 00:31:05,200
on December 9th 2012 it exists and calm
sign with pain platform to web page

556
00:31:05,200 --> 00:31:10,310
and the issue is when page has punch in
a to functions in a call using jeanine

557
00:31:10,310 --> 00:31:14,860
some 1 a.m. with allocate a buffer in C
Landon returns a pointer which then gets

558
00:31:14,860 --> 00:31:15,530
sorted

559
00:31:15,530 --> 00:31:19,700
and shovel and as an instance variable
and known as PPH

560
00:31:19,700 --> 00:31:22,760
there's also an accessor method for

561
00:31:22,760 --> 00:31:27,270
P page variable called get page and some
the instance methods within the function

562
00:31:27,270 --> 00:31:29,129
will directly use P page

563
00:31:29,130 --> 00:31:33,200
whereas others will make you so the get
page accessor method

564
00:31:33,200 --> 00:31:36,300
since web page is public and the

565
00:31:36,300 --> 00:31:40,660
get page classes also public were able
to it and it's our final were able to

566
00:31:40,660 --> 00:31:41,630
use a placid

567
00:31:41,630 --> 00:31:45,700
and modified and if and as a result were
rewarded to you

568
00:31:45,700 --> 00:31:50,350
craft memory so here we can see a
snippet the webpage class and you can

569
00:31:50,350 --> 00:31:51,770
see here that the

570
00:31:51,770 --> 00:31:55,360
class itself is public we can see that
the get page class is definitely

571
00:31:55,360 --> 00:31:56,050
following

572
00:31:56,050 --> 00:31:59,139
and here's one in the native functions
Truk said Edenwald

573
00:31:59,140 --> 00:32:04,140
and although it's private we can see
above it that says your boy is public

574
00:32:04,140 --> 00:32:08,420
and here's the call to GW case edible
and within it you can see the get

575
00:32:08,420 --> 00:32:13,420
the call to get page the way the hash
this was interesting in that we had a

576
00:32:13,420 --> 00:32:17,810
slew of these come in all the same time
and I think that may be why its brands

577
00:32:17,810 --> 00:32:23,480
favorite ever bug in Java and in JDK 7
update 13 as kind as a

578
00:32:23,480 --> 00:32:26,950
make the hurting stop reaction or or
just banned

579
00:32:26,950 --> 00:32:30,160
the a large number patches in this case

580
00:32:30,160 --> 00:32:34,120
the con son with pain baggage such that
any attempt to access it

581
00:32:34,120 --> 00:32:38,240
JDK 13 or up war zones and a package
access

582
00:32:38,240 --> 00:32:42,110
exception there's also a package
definition research in less and for

583
00:32:42,110 --> 00:32:44,400
every JK we looked at the exact same

584
00:32:44,400 --> 00:32:47,430
but all that means is that you can't
strands I

585
00:32:47,430 --> 00:32:51,540
tree the JVM by defining a package of
your own with in

586
00:32:51,540 --> 00:32:55,430
con someone paid comes and with him %uh

587
00:32:55,430 --> 00:32:58,940
he was also properly patch in JDK 7 UPI
21

588
00:32:58,940 --> 00:33:01,940
by making the get page mended package
private

589
00:33:01,940 --> 00:33:05,250
and fine also the net you can no longer
subclasses and

590
00:33:05,250 --> 00:33:10,240
cool Carter me this parameter back over
drains so that he can go over

591
00:33:10,240 --> 00:33:16,059
undertone and how these weaknesses are
utilizing the thread Wednesday

592
00:33:16,059 --> 00:33:19,139
and so the first place around look like
to a jail cell was at

593
00:33:19,140 --> 00:33:22,870
that calm down this year this at this
year's hunt down we decided to broaden

594
00:33:22,870 --> 00:33:26,500
the scope from the competition itself
beyond just the browser but to actual

595
00:33:26,500 --> 00:33:27,580
browser plug-ins

596
00:33:27,580 --> 00:33:30,670
and the reason we do that is because
they the brother plans are actually

597
00:33:30,670 --> 00:33:34,410
targeted by Mauer and used in targeted
attacks in 2001 the crash highlights

598
00:33:34,410 --> 00:33:35,660
their own abilities eg

599
00:33:35,660 --> 00:33:38,970
met existed in those plugins themselves

600
00:33:38,970 --> 00:33:42,720
to include a flash rear and a forced
Java into the mix

601
00:33:42,720 --> 00:33:46,750
at this year's countdown and and some
other people in the area in the industry

602
00:33:46,750 --> 00:33:48,430
thought they were making it too in this

603
00:33:48,430 --> 00:33:52,010
it too easy NEC coast is clear there's
my favorite quotes from when we launched

604
00:33:52,010 --> 00:33:52,850
the rules

605
00:33:52,850 --> 00:33:56,090
busy I was giving away 20,000 dollars
for free

606
00:33:56,090 --> 00:33:59,670
which it actually feel like an idiot
time because there was so many 0 days

607
00:33:59,670 --> 00:34:02,530
they were being discovered and the
mammoths emissions we were getting when

608
00:34:02,530 --> 00:34:03,670
we launched the rules

609
00:34:03,670 --> 00:34:07,090
a made me feel like we were giving away
20,000 hours for free

610
00:34:07,090 --> 00:34:11,069
but that we did in any way we put that
twenty thousand dollar bounty on our job

611
00:34:11,069 --> 00:34:14,480
and our expectation was that the same
box issue

612
00:34:14,480 --> 00:34:17,809
due to unsafe reflection was going to be
we're just going to basically get a

613
00:34:17,809 --> 00:34:20,919
bunch of those types of bugs because
that's when everybody was looking at a

614
00:34:20,918 --> 00:34:22,759
CG expirations Enrique

615
00:34:22,760 --> 00:34:25,690
release their paper in a lot of people
are looking at those have a bug since

616
00:34:25,690 --> 00:34:28,190
our expectation was just to get a slew
of them

617
00:34:28,190 --> 00:34:33,010
but in reality what we got from our
researchers who pre-register dish over

618
00:34:33,010 --> 00:34:34,119
the competition

619
00:34:34,119 --> 00:34:37,770
I was actually a top-four vulnerability
types that affect the Java

620
00:34:37,770 --> 00:34:41,250
and I was kinda kinda interesting that
you know we would get it every type that

621
00:34:41,250 --> 00:34:41,619
was

622
00:34:41,619 --> 00:34:45,500
the biggest problem in Java James
four-shot brought in at least privilege

623
00:34:45,500 --> 00:34:46,969
violation vulnerability

624
00:34:46,970 --> 00:34:50,309
that he actually wrote up in a blog post
that's quite get if you leave your

625
00:34:50,309 --> 00:34:51,639
search for it on the web

626
00:34:51,639 --> 00:34:56,109
Joshua Drake run in a outta bounds right
now demands reminder million

627
00:34:56,109 --> 00:34:59,420
they've been secure identity-based
buffer overflow issue and then murphy

628
00:34:59,420 --> 00:35:01,430
brown and unsafe reflection lime

629
00:35:01,430 --> 00:35:04,669
Leah and 40 for Java

630
00:35:04,670 --> 00:35:08,180
it was the most targeted application at
this year's countdown

631
00:35:08,180 --> 00:35:11,779
I'm because we decided to purchase
everybody that for pre-registered

632
00:35:11,780 --> 00:35:13,359
contestants if they work

633
00:35:13,359 --> 00:35:17,470
and so it ended up having 40 days disco
I'm demonstrated nm

634
00:35:17,470 --> 00:35:21,410
from it was interesting theory to see
the different types of bugs that are

635
00:35:21,410 --> 00:35:22,660
researchers would bring in

636
00:35:22,660 --> 00:35:25,848
and I think our favorite photos when we
asked to move in if they had brought an

637
00:35:25,849 --> 00:35:27,089
unsafe reflection by

638
00:35:27,089 --> 00:35:30,339
job he said we have unsafe reflection
bugs

639
00:35:30,339 --> 00:35:33,099
but we want to bring you something
interesting and so he brought a few

640
00:35:33,099 --> 00:35:36,680
baseball for a flood

641
00:35:36,680 --> 00:35:39,879
if they actually look at the limit the
landscape is off base after their racing

642
00:35:39,880 --> 00:35:41,170
when I was there that we had

643
00:35:41,170 --> 00:35:45,580
we've seen a huge week you see a huge
increase in Java in malware that is

644
00:35:45,580 --> 00:35:46,950
actually leverage in Java

645
00:35:46,950 --> 00:35:50,640
every day and actually interestingly
enough amir's the

646
00:35:50,640 --> 00:35:54,310
Mona million discoveries that were going
on you see 'em at a huge uptake

647
00:35:54,310 --> 00:35:58,840
in the unique in our samples out on the
gate in the sample said that we had

648
00:35:58,840 --> 00:36:01,880
around the same time that there was a
large number of the issues being

649
00:36:01,880 --> 00:36:03,530
discovered

650
00:36:03,530 --> 00:36:06,990
we have up you know if you look at the
exploit your market and all the

651
00:36:06,990 --> 00:36:08,680
different acts like if they're out there

652
00:36:08,680 --> 00:36:13,290
on average you know and exploited to be
competitive in the market space has to

653
00:36:13,290 --> 00:36:15,270
have to close job earn a release

654
00:36:15,270 --> 00:36:18,710
in it just to be a viable for for
purchase

655
00:36:18,710 --> 00:36:21,970
I say who you lookin like South
something to do. did

656
00:36:21,970 --> 00:36:27,010
this shows visitors expected to have six
or seven Java vulnerabilities in them

657
00:36:27,010 --> 00:36:31,160
a the other interesting thing is if you
look at the chart and the CD's that are

658
00:36:31,160 --> 00:36:32,890
under active exploitation

659
00:36:32,890 --> 00:36:37,210
you see an own abilities are still being
mona is they were discovered in 2011 are

660
00:36:37,210 --> 00:36:39,040
still actively being used

661
00:36:39,040 --> 00:36:42,640
in the landscape and that's due to the
fact that the install base for job is

662
00:36:42,640 --> 00:36:44,049
not routinely updated

663
00:36:44,050 --> 00:36:48,100
we have no we talked about the Websense
report were 93 percent of it Java

664
00:36:48,100 --> 00:36:49,650
installations were being patched

665
00:36:49,650 --> 00:36:54,090
after month in the release in the patch
and there's also the man I'm reports

666
00:36:54,090 --> 00:36:54,810
show that

667
00:36:54,810 --> 00:36:59,500
you know when you install Java it's not
on is selling the all major versions

668
00:36:59,500 --> 00:37:00,220
that leaves them

669
00:37:00,220 --> 00:37:03,950
you know users vulnerable to you
exploitation of these older bugs in

670
00:37:03,950 --> 00:37:04,680
service still

671
00:37:04,680 --> 00:37:08,430
you know gonna release from 2011
actively being targeted

672
00:37:08,430 --> 00:37:12,640
in our sample said the peach was four
thousand examples in one month

673
00:37:12,640 --> 00:37:15,650
attorney just nine gonna release and you
know them

674
00:37:15,650 --> 00:37:18,920
the attackers are upping their game in
trying to get more Java vulnerabilities

675
00:37:18,920 --> 00:37:19,640
into their

676
00:37:19,640 --> 00:37:23,720
exploit kit in your tool sets because
they and innovation and give them a more

677
00:37:23,720 --> 00:37:25,940
machines

678
00:37:25,940 --> 00:37:29,790
but we want to look at is what what type
is on our bodies are available for

679
00:37:29,790 --> 00:37:30,610
ex-players

680
00:37:30,610 --> 00:37:34,400
out there so we we took them samples
with me took a look at it

681
00:37:34,400 --> 00:37:37,920
penetration testing tools an exploit
kits they were out there

682
00:37:37,920 --> 00:37:41,869
and came up with this table on on the
screen the GC right now

683
00:37:41,869 --> 00:37:44,170
and and look at the type who own
abilities that they were actually

684
00:37:44,170 --> 00:37:45,130
including

685
00:37:45,130 --> 00:37:48,980
in the toolkits for use by people and
you see that the unsafe reflection

686
00:37:48,980 --> 00:37:52,590
vulnerability is the most popular type a
boner billion the tool sets

687
00:37:52,590 --> 00:37:56,030
available to exporters are and
penetration testers

688
00:37:56,030 --> 00:37:59,450
a but an interesting tournaments is that
the Saturday

689
00:37:59,450 --> 00:38:02,690
least privilege violation is actually
the bottom in less than anti diffusion

690
00:38:02,690 --> 00:38:04,570
is moved up to rank number two

691
00:38:04,570 --> 00:38:08,820
and available vulnerability types in 20
kids there is memory corruption

692
00:38:08,820 --> 00:38:13,150
in the toolkit said he based buffer
overflows a being the most popular in

693
00:38:13,150 --> 00:38:15,550
the talk at some cells

694
00:38:15,550 --> 00:38:19,110
but but what what's really important is
what is actually being leveraged in the

695
00:38:19,110 --> 00:38:20,050
landscape

696
00:38:20,050 --> 00:38:24,020
and in surprisingly tight confusion in
our sample set was the most troubling

697
00:38:24,020 --> 00:38:26,250
issue under active exploitation with all

698
00:38:26,250 --> 00:38:29,350
with over two-thirds in the actual

699
00:38:29,350 --> 00:38:34,730
a uni samples taking a manager type if
you can follow and safe reflection

700
00:38:34,730 --> 00:38:39,230
followed by the the scrimmage violations
but if you look at it as Sam box bypass

701
00:38:39,230 --> 00:38:41,110
issue may 7 ninety percent

702
00:38:41,110 --> 00:38:44,720
about 90 percent and that under the
bonnet actually being used in a

703
00:38:44,720 --> 00:38:45,360
landscape

704
00:38:45,360 --> 00:38:49,010
I'm and another interesting thing is a
memory corruption issue I'm really

705
00:38:49,010 --> 00:38:50,060
visible on the map

706
00:38:50,060 --> 00:38:54,029
they are being used but they're just not
as popular and the reason for that is

707
00:38:54,030 --> 00:38:59,310
the the same much bypass again the OS me
to have to bypass OS level medications

708
00:38:59,310 --> 00:38:59,970
like deficit

709
00:38:59,970 --> 00:39:03,670
in a so are they just work so that was
being included in the kids for use in

710
00:39:03,670 --> 00:39:06,150
actually being used

711
00:39:06,150 --> 00:39:11,280
a pass it on to jail now he's gonna go
over some exploitation techniques

712
00:39:11,280 --> 00:39:15,470
art so I'm going over some at some the
angles for Juve exploitation and then

713
00:39:15,470 --> 00:39:17,260
onto a useful technique for

714
00:39:17,260 --> 00:39:20,550
memory corruption wonderfully is and
then all finally over

715
00:39:20,550 --> 00:39:23,550
the server an hour that shows a sandbox
bypass

716
00:39:23,550 --> 00:39:28,550
so essentially there to maintain its on
there is a must buy passes where you

717
00:39:28,550 --> 00:39:30,330
essentially just need a ride and sis and
I

718
00:39:30,330 --> 00:39:34,540
said security manager know I know find
security manager means once

719
00:39:34,540 --> 00:39:37,779
you can run anything you wanted down
where you want to ever

720
00:39:37,780 --> 00:39:41,820
the prom with that is any higher context
in your giving using a huntress a nap

721
00:39:41,820 --> 00:39:43,260
with and you also

722
00:39:43,260 --> 00:39:47,190
have to have no use a sec I know users
Akram's for memory corruption

723
00:39:47,190 --> 00:39:50,920
you have your usual techniques so when
which could be a writer

724
00:39:50,920 --> 00:39:54,730
function plan the problem with that is
then you have to deal with death and

725
00:39:54,730 --> 00:39:59,060
esler if you have a an inbounds rate and
you also have an outer boundary then you

726
00:39:59,060 --> 00:40:00,170
may be okay

727
00:40:00,170 --> 00:40:03,920
in that you can't use that computer all
said & potentially do something

728
00:40:03,920 --> 00:40:05,090
interesting with that

729
00:40:05,090 --> 00:40:10,250
something that guys sometimes easier is
the you so the JavaBeans state in class

730
00:40:10,250 --> 00:40:14,710
which was given to us by our tally turbo
so

731
00:40:14,710 --> 00:40:19,300
John mean cement represents a single
dollar same into the form instance very

732
00:40:19,300 --> 00:40:19,820
broad

733
00:40:19,820 --> 00:40:23,850
instance method and then arguments so
what you can do is

734
00:40:23,850 --> 00:40:27,880
allocate your buffer whatever where on a
really you control

735
00:40:27,880 --> 00:40:32,040
and Emily after Chris statement I'm and
replace

736
00:40:32,040 --> 00:40:35,840
the statements implicitly created access
control contacts with one that's far

737
00:40:35,840 --> 00:40:36,820
more powerful

738
00:40:36,820 --> 00:40:40,520
I'm you do that just by creating a
permission object to adding all

739
00:40:40,520 --> 00:40:41,630
permission to it

740
00:40:41,630 --> 00:40:45,450
cream protection domainhire a base of
that and then creating an ex access

741
00:40:45,450 --> 00:40:50,090
control context using that once you've
done that all you have to do is use are

742
00:40:50,090 --> 00:40:51,440
gonna really to you

743
00:40:51,440 --> 00:40:56,070
basically swapper replace the as create
statements access control context with

744
00:40:56,070 --> 00:40:57,110
your controlled one

745
00:40:57,110 --> 00:41:02,020
and executed and you execute at a higher
context

746
00:41:02,020 --> 00:41:06,430
so on our over a I'm case study over is
an hour that was given to us and it was

747
00:41:06,430 --> 00:41:09,419
me more as he be- 2012 17:23

748
00:41:09,420 --> 00:41:13,160
which is a vulnerability and the hot
spots like a verifier that leads to type

749
00:41:13,160 --> 00:41:13,750
infusion

750
00:41:13,750 --> 00:41:16,990
como characters except are that you have
to have a hundred

751
00:41:16,990 --> 00:41:20,040
at least a hundred instance variables a
some class class

752
00:41:20,040 --> 00:41:23,770
a and you have a static variable have
another class class B

753
00:41:23,770 --> 00:41:27,580
you then have to have a method within
the class the takes classes these type

754
00:41:27,580 --> 00:41:31,869
and returns class is tight and other
characters ago this is that you'll see

755
00:41:31,869 --> 00:41:37,190
repeated calls to this function with no
as the sole argument

756
00:41:37,190 --> 00:41:41,020
when we took a bar we saw six class
files three of which were completely

757
00:41:41,020 --> 00:41:44,859
useless and that her unused in that's
they had no side initializer

758
00:41:44,859 --> 00:41:48,290
and in reference and anything not even
themselves three from

759
00:41:48,290 --> 00:41:53,020
were very very weird clearly a useful in
that where the extended Apple it and had

760
00:41:53,020 --> 00:41:54,390
it and it meant that

761
00:41:54,390 --> 00:41:57,690
admit method I'm so that was definitely
our entry point

762
00:41:57,690 --> 00:42:02,410
another had a.m. and implementation of
projects such an action and made users

763
00:42:02,410 --> 00:42:05,129
is not set security managers that's
clearly useful

764
00:42:05,130 --> 00:42:08,869
and then another one way is referenced
by a and I think the

765
00:42:08,869 --> 00:42:12,900
one that extended ap lit and had three
sacks methods that work all

766
00:42:12,900 --> 00:42:16,390
that use for in and of themselves but
because they were used be sought

767
00:42:16,390 --> 00:42:18,210
including

768
00:42:18,210 --> 00:42:22,740
but we saw that their new
characteristics as CVD 2012 17:23

769
00:42:22,740 --> 00:42:25,869
so we had to do. he skated to find the
actual CPE

770
00:42:25,869 --> 00:42:29,770
interesting thing about this is that we
were told that Allah Tories Jul obvious

771
00:42:29,770 --> 00:42:30,670
care issues

772
00:42:30,670 --> 00:42:34,920
but they did not make use the advance
options such as code for office cation

773
00:42:34,920 --> 00:42:39,060
as a result we were a wedge issues there
commonly available jodie compared to you

774
00:42:39,060 --> 00:42:40,420
get the source code

775
00:42:40,420 --> 00:42:44,070
I'm once we did that we were already off
the skate by just using basic compiler

776
00:42:44,070 --> 00:42:45,070
optimizations

777
00:42:45,070 --> 00:42:48,340
such as constant propagation to cut
elimination function inlining

778
00:42:48,340 --> 00:42:52,450
and constant function evaluation so
here's a snippet love

779
00:42:52,450 --> 00:42:56,240
the the the Dr he's getting the compound
version

780
00:42:56,240 --> 00:43:00,430
and not just walk you through what it's
doing the first thing it does is checked

781
00:43:00,430 --> 00:43:01,970
to see the shower running

782
00:43:01,970 --> 00:43:05,930
Java version that's being run and if
it's not one point seven so it's on JDK

783
00:43:05,930 --> 00:43:06,669
7

784
00:43:06,670 --> 00:43:11,369
it will bail out and do nothing if it is
though it'll continue on and it all

785
00:43:11,369 --> 00:43:12,080
taken the

786
00:43:12,080 --> 00:43:15,319
class that X implements the privilege
exception action

787
00:43:15,320 --> 00:43:18,450
turn into an array of bytes

788
00:43:18,450 --> 00:43:23,330
here we we see the user the generic
constructor class to instantiate the

789
00:43:23,330 --> 00:43:28,900
anonymous classloader and then we use
manage object major factory to get

790
00:43:28,900 --> 00:43:29,490
access

791
00:43:29,490 --> 00:43:33,150
low class protected method with NC

792
00:43:33,150 --> 00:43:36,890
the method being in votes so that we
lower our privilege accepting

793
00:43:36,890 --> 00:43:41,240
action class and then we invoke have met
in within that class and we send it to

794
00:43:41,240 --> 00:43:42,330
pray owners are

795
00:43:42,330 --> 00:43:45,850
the last parameter is the class we just
loaded and the first priority is a

796
00:43:45,850 --> 00:43:47,250
strain that served

797
00:43:47,250 --> 00:43:52,950
that's given a base of the aging of our
there was serving the star file

798
00:43:52,950 --> 00:43:57,240
within the EU action classism the one
that extends pillager implements village

799
00:43:57,240 --> 00:43:58,320
exception action

800
00:43:58,320 --> 00:44:02,150
we start off in the trigger do prove
walk and the names are clearly not where

801
00:44:02,150 --> 00:44:03,440
he was originally named by

802
00:44:03,440 --> 00:44:06,720
just read named to make it easier to
understand

803
00:44:06,720 --> 00:44:10,550
we take this ring that we've been given
and split it by letters HJ

804
00:44:10,550 --> 00:44:13,740
and turn it into a URL

805
00:44:13,740 --> 00:44:17,070
we then take the class were given and
get access to its constructor

806
00:44:17,070 --> 00:44:20,520
and instantiate the object using the
euro we were

807
00:44:20,520 --> 00:44:24,330
give her the string we were given so now
we re end up in the constructor in the

808
00:44:24,330 --> 00:44:26,840
first thing we do is run axis controller

809
00:44:26,840 --> 00:44:30,080
do privilege on herself since this
implements

810
00:44:30,080 --> 00:44:34,049
privilege exception action this as the
result of executing the are run method

811
00:44:34,050 --> 00:44:38,420
I'm the run method consists solely of
person that sits can you imagine also at

812
00:44:38,420 --> 00:44:40,609
this point we know if I the security
manager

813
00:44:40,609 --> 00:44:43,779
the bar really is already taken place in
everything that happens after here is

814
00:44:43,780 --> 00:44:45,810
stage two

815
00:44:45,810 --> 00:44:50,220
all happens hours/week going runner sage
tonight that from within this we

816
00:44:50,220 --> 00:44:54,780
over your old to the string we were
given and we create a file in our apt

817
00:44:54,780 --> 00:44:55,660
data directory

818
00:44:55,660 --> 00:44:58,950
and it's called JobsOhio tempter

819
00:44:58,950 --> 00:45:03,720
we then read from the euro and write to
the file and once that's done we then

820
00:45:03,720 --> 00:45:08,119
trade executed feeling that we will try
to load as a DLL

821
00:45:08,119 --> 00:45:11,980
so now we can see that this now the idea
of his gay we can see that

822
00:45:11,980 --> 00:45:15,830
its actually very different from the
series I was actually see the 2012

823
00:45:15,830 --> 00:45:20,000
thirty-sevens fifties only six and we
use generic unstructured to instantiate

824
00:45:20,000 --> 00:45:22,810
a restricted class in this case in arms
classloader

825
00:45:22,810 --> 00:45:26,890
with NU's manjaca commander factory to
get access to low class

826
00:45:26,890 --> 00:45:31,100
protection method and we den use that to
load a

827
00:45:31,100 --> 00:45:35,300
much a subclass a privilege exception
action what we've done that we know if I

828
00:45:35,300 --> 00:45:36,250
these three major

829
00:45:36,250 --> 00:45:39,680
and grammar siege to an executed

830
00:45:39,680 --> 00:45:42,859
and that's when i turn it back over to
Brian's they can go over how or who has

831
00:45:42,859 --> 00:45:48,640
been dealing with all the malware and
your abilities in Java

832
00:45:48,640 --> 00:45:52,680
alright so we have a unique perspective
inside a busier day initiative because

833
00:45:52,680 --> 00:45:54,140
we deal with a lot of vendors

834
00:45:54,140 --> 00:45:58,700
time we deal with disclosing a lot of
own abilities aroma said 200

835
00:45:58,700 --> 00:46:03,490
bedbugs patch just this year I'm so we
get a Julia Gillard an interesting look

836
00:46:03,490 --> 00:46:03,960
at how

837
00:46:03,960 --> 00:46:06,910
vendors are actually responding to the
disclosures that were actually sending

838
00:46:06,910 --> 00:46:07,440
to them

839
00:46:07,440 --> 00:46:12,050
so if we look at work or the recently
made it very public customer commitments

840
00:46:12,050 --> 00:46:15,750
about how fast they're gonna turn around
zero their days are actually under

841
00:46:15,750 --> 00:46:16,609
attack

842
00:46:16,609 --> 00:46:20,190
they are give up their releases 24
releases a year though this is not

843
00:46:20,190 --> 00:46:24,070
you know Mike Microsoft's Patch Tuesday
how they have helped him

844
00:46:24,070 --> 00:46:27,180
I'm the other interesting thing that's
something that's not really known

845
00:46:27,180 --> 00:46:29,950
and not report it very often is that
they're actually improving their own

846
00:46:29,950 --> 00:46:31,190
ability time I'm

847
00:46:31,190 --> 00:46:36,460
a year-over-year I so on average ZS
emission every cent or or or

848
00:46:36,460 --> 00:46:40,220
in a in Java takes about three months to
pass rate this puts him right in the

849
00:46:40,220 --> 00:46:41,510
middle of the pack

850
00:46:41,510 --> 00:46:44,770
for for vendors caching software that we
work with

851
00:46:44,770 --> 00:46:48,619
I'm but the interesting thing is that
they Maxime decrease that I mind over

852
00:46:48,619 --> 00:46:49,609
the last three years

853
00:46:49,609 --> 00:46:53,340
while donor release emissions have been
going up in their product

854
00:46:53,340 --> 00:46:56,660
so it's actually quite a feat you know
the it from an external perspective it

855
00:46:56,660 --> 00:46:57,540
looks like they're

856
00:46:57,540 --> 00:47:00,560
a trevino working to a decrease the time
I'm

857
00:47:00,560 --> 00:47:03,609
staffing up their response organization
to

858
00:47:03,609 --> 00:47:06,890
I'm to deal with the incoming gonna
really disclosures as they've increased

859
00:47:06,890 --> 00:47:08,819
over the years

860
00:47:08,820 --> 00:47:12,340
a the other interesting thing is not
commonly reported is how aggressively

861
00:47:12,340 --> 00:47:14,980
they are adjusting the attack surface um
jammer

862
00:47:14,980 --> 00:47:18,740
at to deal with the vulnerability
disclosures are going on he saw this

863
00:47:18,740 --> 00:47:22,330
jail mission you know we had a whole
slew a pointer dereference cases they

864
00:47:22,330 --> 00:47:24,240
came in and they patched our

865
00:47:24,240 --> 00:47:28,590
damn the by Justin putting the package
in the restriction list

866
00:47:28,590 --> 00:47:32,560
I'm but over the last ten to fifteen
hear it sorry i three years we've been

867
00:47:32,560 --> 00:47:35,450
actually killed 15 zero day initiative
cases

868
00:47:35,450 --> 00:47:39,250
I do to patching and in this perspective
kill means

869
00:47:39,250 --> 00:47:42,680
we've got the Queen's we purchased the
vulnerability from a researcher

870
00:47:42,680 --> 00:47:47,190
the I'm we've done who has announced
this we know to be exploitable but a

871
00:47:47,190 --> 00:47:48,290
patch comes out

872
00:47:48,290 --> 00:47:51,330
and it fixes the bug that we just
purchased

873
00:47:51,330 --> 00:47:55,580
rights over the Maxi killed several as
cases they had no idea that those cases

874
00:47:55,580 --> 00:47:57,440
exist in Wheaton they may have been

875
00:47:57,440 --> 00:48:01,410
the but they did actually pass them out
and and

876
00:48:01,410 --> 00:48:04,790
by did by the techniques that they were
using to every detail

877
00:48:04,790 --> 00:48:09,310
reduce the attack surface if you look in
detail using the u13

878
00:48:09,310 --> 00:48:12,740
her seven you thirteen they chose three
fun trust upon any reference case is

879
00:48:12,740 --> 00:48:13,359
that we had

880
00:48:13,359 --> 00:48:17,500
and a new 15 they killed two these
privilege violation cases that we had

881
00:48:17,500 --> 00:48:20,520
they're doing this like I said my by
increasing the after package

882
00:48:20,520 --> 00:48:22,119
restrictions which will go over next

883
00:48:22,119 --> 00:48:26,310
and also tightening up in an looks like
auditing the least privilege violations

884
00:48:26,310 --> 00:48:29,890
what you see on the screen here he is
the package restriction this

885
00:48:29,890 --> 00:48:31,330
modifications

886
00:48:31,330 --> 00:48:35,790
over the last several nieces we may sign
this n u-9

887
00:48:35,790 --> 00:48:39,000
with a bow and at that point there was
twelve packages there have been

888
00:48:39,000 --> 00:48:40,010
restricted

889
00:48:40,010 --> 00:48:45,480
tablets and u10 2011 they didn't make
any changes made in New 13

890
00:48:45,480 --> 00:48:49,240
they added another dozen packages to
that restriction lest

891
00:48:49,240 --> 00:48:52,340
and you see you know you're in the
example the interest appointed a

892
00:48:52,340 --> 00:48:54,280
reference as com sign

893
00:48:54,280 --> 00:48:58,599
when pain at the bottom there they added
that in there effectively am

894
00:48:58,599 --> 00:49:01,920
million in their own ability in in the

895
00:49:01,920 --> 00:49:05,660
in the jam affects component if you look
in you fifty know it's interesting

896
00:49:05,660 --> 00:49:08,140
because they actually remove a setup
packages

897
00:49:08,140 --> 00:49:11,348
and add another centre-back it is the
weather actually doing is they're

898
00:49:11,349 --> 00:49:13,260
removing a lower level package

899
00:49:13,260 --> 00:49:17,390
and a adding a higher level packaging to
further reduce the

900
00:49:17,390 --> 00:49:22,029
attack surface on the application in u21
they made a lot of modifications

901
00:49:22,030 --> 00:49:25,450
and in and you twenty-five add a couple
more

902
00:49:25,450 --> 00:49:28,770
so you can see in in u21 we on the ad

903
00:49:28,770 --> 00:49:32,690
the remove GlassFish to external and
added the GlassFish package so further

904
00:49:32,690 --> 00:49:34,320
reducing the attack surface

905
00:49:34,320 --> 00:49:37,369
on the air interesting thing about
watching the modifications to the

906
00:49:37,369 --> 00:49:38,380
restriction lists

907
00:49:38,380 --> 00:49:41,920
is dead as as a person you doing one and
a passion houses

908
00:49:41,920 --> 00:49:44,400
you know that there was a problem there
are probably gonna release in their

909
00:49:44,400 --> 00:49:46,119
seizure you look at those as a bee

910
00:49:46,119 --> 00:49:49,460
as they're at it I'm you can also use
the mapping that we showed earlier to

911
00:49:49,460 --> 00:49:52,109
come to get an idea of the type governor
bill you're gonna find

912
00:49:52,109 --> 00:49:55,470
in those specific packages that are
being restricted

913
00:49:55,470 --> 00:49:58,970
a.m. so you can see here in this is the

914
00:49:58,970 --> 00:50:02,170
JDK 7 you twenty-five there there was

915
00:50:02,170 --> 00:50:05,480
forty-three packages that have been
added to this restriction list

916
00:50:05,480 --> 00:50:08,720
and a new nine there was tosses been
quite a bit movement

917
00:50:08,720 --> 00:50:12,369
in the restriction miss the see a lot of
com son or your patchy

918
00:50:12,369 --> 00:50:16,330
packages sold it's almost an expectation
that in a future release the hold up for

919
00:50:16,330 --> 00:50:17,940
a higher happened in there and for their

920
00:50:17,940 --> 00:50:21,890
reduce the attack surface same
conclusion

921
00:50:21,890 --> 00:50:25,379
four goals whether quite a storm over
the last three years especially within

922
00:50:25,380 --> 00:50:26,349
the last year

923
00:50:26,349 --> 00:50:30,109
they've seen a large number gonna
release closures occur fifty-plus

924
00:50:30,109 --> 00:50:33,450
nuvid DDS emissions have happened the
last reporter that have been submitted

925
00:50:33,450 --> 00:50:34,550
to them

926
00:50:34,550 --> 00:50:37,700
to adversaries are leveraging the
zero-day vulnerabilities

927
00:50:37,700 --> 00:50:41,210
increasing the largest patches from
Oracle for Java

928
00:50:41,210 --> 00:50:44,859
there is a focus in the research
community on the sandbox bypass issue

929
00:50:44,859 --> 00:50:48,400
with and safe reflection being the most
prolific but I to Division being the

930
00:50:48,400 --> 00:50:48,970
most

931
00:50:48,970 --> 00:50:52,070
utilized in landscape band

932
00:50:52,070 --> 00:50:55,670
the chief component being the one that
produces the most severe motor abilities

933
00:50:55,670 --> 00:50:59,950
according to the CSS but he is not
utilized very often in the landscape so

934
00:50:59,950 --> 00:51:03,640
whether that is a how you wanna
correctly scoring the CSS i think is

935
00:51:03,640 --> 00:51:05,540
gonna talk to this conference about how

936
00:51:05,540 --> 00:51:10,070
cs4 ng is used by the it's just
interesting observation

937
00:51:10,070 --> 00:51:12,920
process improvements by or will they
have made quite a few process

938
00:51:12,920 --> 00:51:16,000
improvements they're making commitments
and changing their attack surface in

939
00:51:16,000 --> 00:51:16,660
Java

940
00:51:16,660 --> 00:51:20,330
face tougher the restriction less that
you just saw and and we hope to see more

941
00:51:20,330 --> 00:51:21,950
on that

942
00:51:21,950 --> 00:51:26,140
we like to thank you for company's
presentation we like to think is easier

943
00:51:26,140 --> 00:51:29,690
researchers who summit in Java
vulnerabilities every last three years

944
00:51:29,690 --> 00:51:33,359
we can add on this presentation without
you guys if you have a job

945
00:51:33,359 --> 00:51:37,160
0 day that you're sitting on an you want
to give maybe extra legal money

946
00:51:37,160 --> 00:51:40,319
a WHOIS you can submit it to the zero
day initiative

947
00:51:40,320 --> 00:51:44,260
we will pay you handsomely and and all
the response was voted for you

948
00:51:44,260 --> 00:51:48,180
zero day initiative dot com we also want
to thank you ever sing labs

949
00:51:48,180 --> 00:51:52,190
and as securely expirations for helping
us with their supporting material about

950
00:51:52,190 --> 00:51:54,540
this validates so many assumptions we
had

951
00:51:54,540 --> 00:51:58,009
in the product I early in their research

952
00:51:58,010 --> 00:51:59,700
to pass thanks in your mind hunting

