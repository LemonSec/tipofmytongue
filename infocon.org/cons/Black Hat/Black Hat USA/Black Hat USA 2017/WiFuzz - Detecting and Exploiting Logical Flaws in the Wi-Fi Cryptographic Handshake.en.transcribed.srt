1
00:00:00,030 --> 00:00:05,549
it's an<font color="#E5E5E5"> honor again to be at</font><font color="#CCCCCC"> blackhat so</font>

2
00:00:03,120 --> 00:00:07,710
today I'm going to<font color="#E5E5E5"> talk about work where</font>

3
00:00:05,549 --> 00:00:09,480
we<font color="#E5E5E5"> tested implementations of the Wi-Fi</font>

4
00:00:07,710 --> 00:00:11,490
handshake<font color="#CCCCCC"> and this work</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> done in</font>

5
00:00:09,480 --> 00:00:13,950
<font color="#CCCCCC">collaboration with domains Quebec</font><font color="#E5E5E5"> and</font>

6
00:00:11,490 --> 00:00:18,050
<font color="#E5E5E5">Frank pissants</font><font color="#CCCCCC"> and they were both also</font>

7
00:00:13,950 --> 00:00:22,890
working at<font color="#CCCCCC"> university K 11 at the time</font>

8
00:00:18,050 --> 00:00:24,900
so first<font color="#E5E5E5"> a quick</font><font color="#CCCCCC"> background</font><font color="#E5E5E5"> we see that</font>

9
00:00:22,890 --> 00:00:27,119
<font color="#E5E5E5">lately more and more Wi-Fi networks are</font>

10
00:00:24,900 --> 00:00:29,369
employing encryption for example in the

11
00:00:27,119 --> 00:00:32,369
graph here<font color="#CCCCCC"> you can see that in 2010</font>

12
00:00:29,369 --> 00:00:34,829
<font color="#E5E5E5">nearly half of all networks were using</font>

13
00:00:32,369 --> 00:00:36,600
wireless encryption<font color="#E5E5E5"> so you can see the</font>

14
00:00:34,829 --> 00:00:38,579
<font color="#CCCCCC">green line at the top</font><font color="#E5E5E5"> that's the amount</font>

15
00:00:36,600 --> 00:00:42,570
of<font color="#CCCCCC"> network that employ some form</font><font color="#E5E5E5"> of</font>

16
00:00:38,579 --> 00:00:44,489
encryption<font color="#E5E5E5"> if we then look at the</font>

17
00:00:42,570 --> 00:00:46,739
<font color="#E5E5E5">beginning of this year we can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> that</font>

18
00:00:44,489 --> 00:00:49,169
around<font color="#CCCCCC"> 75 percent of all wireless</font>

19
00:00:46,739 --> 00:00:52,530
network<font color="#E5E5E5"> we're using some form of</font>

20
00:00:49,170 --> 00:00:54,629
<font color="#E5E5E5">encryption</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> most important part</font>

21
00:00:52,530 --> 00:00:57,180
here<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> all these networks</font><font color="#CCCCCC"> rely on</font>

22
00:00:54,629 --> 00:01:00,718
the<font color="#E5E5E5"> 4-way Wi-Fi handshake to generate</font>

23
00:00:57,180 --> 00:01:04,110
fresh session keys so even networks that

24
00:01:00,719 --> 00:01:06,390
for example<font color="#E5E5E5"> use appreciate key or you</font>

25
00:01:04,110 --> 00:01:08,220
have an<font color="#CCCCCC"> enterprise network</font><font color="#E5E5E5"> they all rely</font>

26
00:01:06,390 --> 00:01:11,460
on the Wi-Fi handshake<font color="#CCCCCC"> anton in</font>

27
00:01:08,220 --> 00:01:13,560
particular on the<font color="#CCCCCC"> 4-way handshake</font><font color="#E5E5E5"> so</font>

28
00:01:11,460 --> 00:01:15,479
it's<font color="#E5E5E5"> absolutely</font><font color="#CCCCCC"> critical that</font><font color="#E5E5E5"> this Wi-Fi</font>

29
00:01:13,560 --> 00:01:18,180
handshake is securely implemented

30
00:01:15,479 --> 00:01:20,700
otherwise your network or<font color="#E5E5E5"> your clients</font>

31
00:01:18,180 --> 00:01:23,100
might be vulnerable<font color="#E5E5E5"> so if you look at</font>

32
00:01:20,700 --> 00:01:25,170
the related<font color="#CCCCCC"> work in this area</font><font color="#E5E5E5"> we can see</font>

33
00:01:23,100 --> 00:01:28,740
<font color="#E5E5E5">that the</font><font color="#CCCCCC"> design of</font><font color="#E5E5E5"> the handshake</font><font color="#CCCCCC"> has</font>

34
00:01:25,170 --> 00:01:31,710
<font color="#CCCCCC">already been formally verified as secure</font>

35
00:01:28,740 --> 00:01:34,199
so<font color="#E5E5E5"> we are quite</font><font color="#CCCCCC"> sure that that</font><font color="#E5E5E5"> should be</font>

36
00:01:31,710 --> 00:01:36,750
<font color="#E5E5E5">good</font><font color="#CCCCCC"> so I do want to</font><font color="#E5E5E5"> remind you here</font>

37
00:01:34,200 --> 00:01:39,119
<font color="#CCCCCC">that just because this design was proven</font>

38
00:01:36,750 --> 00:01:41,280
secure<font color="#E5E5E5"> it could also be that there are</font>

39
00:01:39,119 --> 00:01:44,520
some flaws<font color="#E5E5E5"> and their proofs but for now</font>

40
00:01:41,280 --> 00:01:46,320
we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to assume that the design</font><font color="#E5E5E5"> is</font>

41
00:01:44,520 --> 00:01:47,759
secure and on<font color="#E5E5E5"> stead and this</font>

42
00:01:46,320 --> 00:01:50,729
presentation we're<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to look at</font>

43
00:01:47,759 --> 00:01:53,009
implementation flaws so there has been<font color="#E5E5E5"> a</font>

44
00:01:50,729 --> 00:01:55,770
very limited amount<font color="#CCCCCC"> of related work in</font>

45
00:01:53,009 --> 00:01:58,079
this area<font color="#E5E5E5"> so there has been one paper</font>

46
00:01:55,770 --> 00:02:00,840
which faces<font color="#E5E5E5"> the initial stage of the</font>

47
00:01:58,079 --> 00:02:04,169
<font color="#E5E5E5">Wi-Fi handshake where beacons on prop</font>

48
00:02:00,840 --> 00:02:07,680
requests are used but<font color="#E5E5E5"> limitation is that</font>

49
00:02:04,170 --> 00:02:09,720
<font color="#E5E5E5">this work only looks for common</font>

50
00:02:07,680 --> 00:02:12,390
programming<font color="#E5E5E5"> mistakes such</font><font color="#CCCCCC"> as buffer</font>

51
00:02:09,720 --> 00:02:13,810
overflows or double freeze or no pointer

52
00:02:12,390 --> 00:02:16,390
dereferences which

53
00:02:13,810 --> 00:02:17,950
<font color="#E5E5E5">crash the implementation</font><font color="#CCCCCC"> initially they</font>

54
00:02:16,390 --> 00:02:20,079
only check<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> stage of the</font>

55
00:02:17,950 --> 00:02:21,970
<font color="#E5E5E5">handshake so we are not</font><font color="#CCCCCC"> looking for</font>

56
00:02:20,080 --> 00:02:24,220
logical vulnerabilities<font color="#E5E5E5"> and we are also</font>

57
00:02:21,970 --> 00:02:27,700
not investigating the full Wi-Fi

58
00:02:24,220 --> 00:02:29,950
handshake<font color="#E5E5E5"> um that will exactly be the</font>

59
00:02:27,700 --> 00:02:32,500
<font color="#E5E5E5">goal of</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> we're going to study</font>

60
00:02:29,950 --> 00:02:35,410
the Wi-Fi handshake in detail<font color="#CCCCCC"> on try to</font>

61
00:02:32,500 --> 00:02:36,610
detect logical vulnerabilities so<font color="#CCCCCC"> magis</font>

62
00:02:35,410 --> 00:02:38,650
vulnerabilities that<font color="#E5E5E5"> crash the</font>

63
00:02:36,610 --> 00:02:40,569
implementations but cases where an

64
00:02:38,650 --> 00:02:44,920
implementation deviates from the

65
00:02:40,569 --> 00:02:47,290
<font color="#E5E5E5">specification so in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> explain</font>

66
00:02:44,920 --> 00:02:49,149
this<font color="#E5E5E5"> I'm first going to introduce the</font>

67
00:02:47,290 --> 00:02:51,760
Wi-Fi handshake and how it works

68
00:02:49,150 --> 00:02:54,940
so as I mentioned<font color="#CCCCCC"> the Wi-Fi handshake is</font>

69
00:02:51,760 --> 00:02:56,980
used mainly to negotiate fresh session

70
00:02:54,940 --> 00:02:58,930
keys which are then<font color="#CCCCCC"> used to encrypt</font>

71
00:02:56,980 --> 00:03:02,799
actual data traffic<font color="#E5E5E5"> which has</font>

72
00:02:58,930 --> 00:03:04,569
transmitted<font color="#E5E5E5"> at a later point in time</font><font color="#CCCCCC"> the</font>

73
00:03:02,800 --> 00:03:06,370
way<font color="#E5E5E5"> the Wi-Fi handshake is of course</font>

74
00:03:04,569 --> 00:03:09,399
<font color="#E5E5E5">also used to discover networks using</font>

75
00:03:06,370 --> 00:03:11,890
beacons on ProQuest's and additionally

76
00:03:09,400 --> 00:03:15,400
<font color="#E5E5E5">it has also used to select the cipher</font>

77
00:03:11,890 --> 00:03:18,160
<font color="#CCCCCC">that you want to use</font><font color="#E5E5E5"> um it prevents</font>

78
00:03:15,400 --> 00:03:21,000
against downgrade attacks as well so

79
00:03:18,160 --> 00:03:23,650
like<font color="#CCCCCC"> I mentioned after this handshake</font>

80
00:03:21,000 --> 00:03:26,680
<font color="#E5E5E5">actual Wi-Fi traffic is encrypted using</font>

81
00:03:23,650 --> 00:03:30,459
a specific<font color="#E5E5E5"> algorithm and these days this</font>

82
00:03:26,680 --> 00:03:34,810
algorithm is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> derp</font><font color="#E5E5E5"> WPA tkip or</font><font color="#CCCCCC"> AES ccmp</font>

83
00:03:30,459 --> 00:03:36,820
now<font color="#E5E5E5"> WPA tkip is rather insecure</font>

84
00:03:34,810 --> 00:03:39,760
algorithm<font color="#E5E5E5"> and that was because it was</font>

85
00:03:36,820 --> 00:03:41,769
<font color="#CCCCCC">designed to</font><font color="#E5E5E5"> run</font><font color="#CCCCCC"> on old web hardware so</font>

86
00:03:39,760 --> 00:03:44,220
at the time<font color="#E5E5E5"> that web was designed it was</font>

87
00:03:41,769 --> 00:03:46,690
found<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be completely broken</font><font color="#E5E5E5"> and</font>

88
00:03:44,220 --> 00:03:48,910
companies and<font color="#CCCCCC"> vendors wanted something</font>

89
00:03:46,690 --> 00:03:51,190
<font color="#CCCCCC">more</font><font color="#E5E5E5"> secure</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run on this old hardware</font>

90
00:03:48,910 --> 00:03:53,320
<font color="#E5E5E5">however this hardware was not very</font>

91
00:03:51,190 --> 00:03:55,260
efficient so they<font color="#E5E5E5"> came</font><font color="#CCCCCC"> up with a new</font>

92
00:03:53,320 --> 00:03:58,630
standard but he had had to sacrifice

93
00:03:55,260 --> 00:04:00,310
<font color="#E5E5E5">some security in order to be able to run</font>

94
00:03:58,630 --> 00:04:03,609
on<font color="#E5E5E5"> this old hardware and that's where</font>

95
00:04:00,310 --> 00:04:06,730
<font color="#E5E5E5">WPA</font><font color="#CCCCCC"> T</font><font color="#E5E5E5"> comes into play however</font><font color="#CCCCCC"> these days</font>

96
00:04:03,609 --> 00:04:09,940
we have modern hardware<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can run</font>

97
00:04:06,730 --> 00:04:12,130
proper encryption algorithms<font color="#E5E5E5"> and in the</font>

98
00:04:09,940 --> 00:04:16,539
case<font color="#E5E5E5"> of a Wi-Fi you should only be</font><font color="#CCCCCC"> using</font>

99
00:04:12,130 --> 00:04:19,120
AES<font color="#CCCCCC"> ccmp okay so how does the Wi-Fi</font>

100
00:04:16,539 --> 00:04:22,349
handshake actually work<font color="#E5E5E5"> so the first</font>

101
00:04:19,120 --> 00:04:24,430
<font color="#E5E5E5">stage</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> handshake we are basically</font>

102
00:04:22,349 --> 00:04:27,070
<font color="#E5E5E5">basically going to discover nearby</font>

103
00:04:24,430 --> 00:04:27,580
networks<font color="#E5E5E5"> and this is traditionally done</font>

104
00:04:27,070 --> 00:04:30,219
<font color="#CCCCCC">by</font>

105
00:04:27,580 --> 00:04:32,258
access points which constantly transmit

106
00:04:30,220 --> 00:04:34,599
beacons which announce the<font color="#E5E5E5"> presence of a</font>

107
00:04:32,259 --> 00:04:36,400
network the<font color="#E5E5E5"> client monitors for these</font>

108
00:04:34,599 --> 00:04:38,650
beacons<font color="#E5E5E5"> armed when it has found a</font>

109
00:04:36,400 --> 00:04:41,679
<font color="#E5E5E5">network</font><font color="#CCCCCC"> it wants to join</font><font color="#E5E5E5"> it will decide</font>

110
00:04:38,650 --> 00:04:44,198
which<font color="#CCCCCC"> cipher it wants to</font><font color="#E5E5E5"> use and then it</font>

111
00:04:41,680 --> 00:04:46,870
will send<font color="#E5E5E5"> an association request to the</font>

112
00:04:44,199 --> 00:04:49,210
access<font color="#CCCCCC"> point that is basically</font><font color="#E5E5E5"> saying</font>

113
00:04:46,870 --> 00:04:56,530
hey I want<font color="#CCCCCC"> to connect to this access</font>

114
00:04:49,210 --> 00:04:58,930
<font color="#E5E5E5">point</font><font color="#CCCCCC"> so once the client has sent this</font>

115
00:04:56,530 --> 00:05:00,849
<font color="#E5E5E5">association request which again informs</font>

116
00:04:58,930 --> 00:05:03,099
the access point hey I'm a<font color="#CCCCCC"> client and I</font>

117
00:05:00,849 --> 00:05:05,289
want to connect<font color="#CCCCCC"> if the access point</font>

118
00:05:03,099 --> 00:05:08,378
accepts<font color="#E5E5E5"> this client then it will send</font>

119
00:05:05,289 --> 00:05:10,690
the<font color="#E5E5E5"> first message of the handshake</font><font color="#CCCCCC"> Anton</font>

120
00:05:08,379 --> 00:05:12,520
<font color="#E5E5E5">the client will reply now essentially</font>

121
00:05:10,690 --> 00:05:14,979
these two<font color="#E5E5E5"> first messages and the</font>

122
00:05:12,520 --> 00:05:17,139
handshake are used to transport random

123
00:05:14,979 --> 00:05:20,020
nonsense<font color="#CCCCCC"> and these random nonsense</font><font color="#E5E5E5"> are</font>

124
00:05:17,139 --> 00:05:21,909
used to generate a fresh session key

125
00:05:20,020 --> 00:05:24,818
<font color="#CCCCCC">which has never been</font><font color="#E5E5E5"> used before</font><font color="#CCCCCC"> so we</font>

126
00:05:21,909 --> 00:05:27,009
don't get<font color="#E5E5E5"> kiri</font><font color="#CCCCCC"> use so</font><font color="#E5E5E5"> as you can</font><font color="#CCCCCC"> see</font>

127
00:05:24,819 --> 00:05:29,050
here the client<font color="#E5E5E5"> generates a session keys</font>

128
00:05:27,009 --> 00:05:30,669
once it received message<font color="#E5E5E5"> one on the</font>

129
00:05:29,050 --> 00:05:33,060
access point will generate the session

130
00:05:30,669 --> 00:05:35,770
keys<font color="#E5E5E5"> once it has received message</font><font color="#CCCCCC"> two</font>

131
00:05:33,060 --> 00:05:38,469
then in the second stage of the four way

132
00:05:35,770 --> 00:05:40,690
handshake<font color="#E5E5E5"> there are two more</font><font color="#CCCCCC"> messages</font>

133
00:05:38,469 --> 00:05:42,550
that are exchanged<font color="#CCCCCC"> and a bit simplified</font>

134
00:05:40,690 --> 00:05:45,699
<font color="#E5E5E5">this message essentially tried to</font>

135
00:05:42,550 --> 00:05:48,520
protect against downgrade attacks<font color="#E5E5E5"> so in</font>

136
00:05:45,699 --> 00:05:50,770
<font color="#E5E5E5">particular and message three the access</font>

137
00:05:48,520 --> 00:05:53,169
point<font color="#E5E5E5"> will send its supported list of</font>

138
00:05:50,770 --> 00:05:56,169
ciphers<font color="#E5E5E5"> in a secure and authenticated</font>

139
00:05:53,169 --> 00:05:58,270
<font color="#E5E5E5">manner so by now the access point has a</font>

140
00:05:56,169 --> 00:06:01,270
session key on this<font color="#CCCCCC"> message</font><font color="#E5E5E5"> Tree is</font>

141
00:05:58,270 --> 00:06:03,159
protected<font color="#CCCCCC"> using the</font><font color="#E5E5E5"> session key</font><font color="#CCCCCC"> um the</font>

142
00:06:01,270 --> 00:06:06,128
idea<font color="#E5E5E5"> here is</font><font color="#CCCCCC"> that when a client receives</font>

143
00:06:03,159 --> 00:06:08,199
this message it can verify the<font color="#CCCCCC"> cypher</font>

144
00:06:06,129 --> 00:06:10,120
list<font color="#E5E5E5"> that is a message</font><font color="#CCCCCC"> tree which is</font>

145
00:06:08,199 --> 00:06:12,699
authenticated<font color="#CCCCCC"> on an attacker cannot</font>

146
00:06:10,120 --> 00:06:14,169
Forge this<font color="#E5E5E5"> list and it will</font><font color="#CCCCCC"> compare it</font>

147
00:06:12,699 --> 00:06:16,090
to the<font color="#CCCCCC"> cypher list that was in the</font>

148
00:06:14,169 --> 00:06:17,859
beacon<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the beacon contains no</font>

149
00:06:16,090 --> 00:06:20,020
crypto and can be<font color="#E5E5E5"> forged by an attacker</font>

150
00:06:17,860 --> 00:06:21,580
<font color="#CCCCCC">and if there is a mismatch</font><font color="#E5E5E5"> between these</font>

151
00:06:20,020 --> 00:06:24,190
lists then a downgrade attack was

152
00:06:21,580 --> 00:06:26,289
detected and<font color="#E5E5E5"> finally</font><font color="#CCCCCC"> at the last</font><font color="#E5E5E5"> stage</font>

153
00:06:24,190 --> 00:06:28,629
of the handshake<font color="#CCCCCC"> the client sends</font>

154
00:06:26,289 --> 00:06:30,430
message for to the access points which

155
00:06:28,629 --> 00:06:32,139
basically informs the<font color="#CCCCCC"> act</font><font color="#E5E5E5"> access point</font>

156
00:06:30,430 --> 00:06:35,379
<font color="#E5E5E5">hey I didn't attack a downgrade attack</font>

157
00:06:32,139 --> 00:06:38,529
<font color="#CCCCCC">we're good let's start exchanging</font><font color="#E5E5E5"> normal</font>

158
00:06:35,379 --> 00:06:40,860
data traffic<font color="#E5E5E5"> now one</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> I didn't</font>

159
00:06:38,529 --> 00:06:44,020
mention<font color="#E5E5E5"> yet is in message</font><font color="#CCCCCC"> two</font>

160
00:06:40,860 --> 00:06:47,350
the client<font color="#CCCCCC"> also transports</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cipher</font>

161
00:06:44,020 --> 00:06:48,940
that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> chose in a secure manner</font><font color="#E5E5E5"> but</font>

162
00:06:47,350 --> 00:06:51,490
<font color="#E5E5E5">this is just to make the handshake more</font>

163
00:06:48,940 --> 00:06:54,520
robust<font color="#E5E5E5"> so you can see at the access</font>

164
00:06:51,490 --> 00:06:57,280
point<font color="#CCCCCC"> right there</font><font color="#E5E5E5"> there is it will also</font>

165
00:06:54,520 --> 00:06:58,719
<font color="#E5E5E5">verify the chosen cipher of the</font><font color="#CCCCCC"> client</font>

166
00:06:57,280 --> 00:07:00,760
<font color="#E5E5E5">but this is just to make</font><font color="#CCCCCC"> the access</font>

167
00:06:58,720 --> 00:07:02,920
<font color="#E5E5E5">point more to him to make the handshake</font>

168
00:07:00,760 --> 00:07:04,690
more robust<font color="#CCCCCC"> at the end hand if the</font>

169
00:07:02,920 --> 00:07:06,670
access<font color="#E5E5E5"> point sorry missus this check</font>

170
00:07:04,690 --> 00:07:08,590
that doesn't mean there's a downgrade

171
00:07:06,670 --> 00:07:13,420
attack yet because we still<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the</font>

172
00:07:08,590 --> 00:07:14,919
second check<font color="#CCCCCC"> okay so the next</font><font color="#E5E5E5"> thing you</font>

173
00:07:13,420 --> 00:07:17,230
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to know is how are these messages</font>

174
00:07:14,920 --> 00:07:20,230
<font color="#E5E5E5">defines well they are defined</font><font color="#CCCCCC"> using ei</font>

175
00:07:17,230 --> 00:07:21,820
<font color="#CCCCCC">poll frames</font><font color="#E5E5E5"> and simplified this is the</font>

176
00:07:20,230 --> 00:07:23,530
layout<font color="#E5E5E5"> here of an ear poll frame</font>

177
00:07:21,820 --> 00:07:25,630
<font color="#E5E5E5">basically you have a header with a</font>

178
00:07:23,530 --> 00:07:27,789
destination<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the source address you</font>

179
00:07:25,630 --> 00:07:29,350
have some flag<font color="#E5E5E5"> which identify the</font>

180
00:07:27,790 --> 00:07:31,210
message that we are<font color="#E5E5E5"> dealing with for</font>

181
00:07:29,350 --> 00:07:34,000
<font color="#CCCCCC">example is it message one</font><font color="#E5E5E5"> two three or</font>

182
00:07:31,210 --> 00:07:36,580
four<font color="#E5E5E5"> you also have a make the Meg here</font>

183
00:07:34,000 --> 00:07:39,400
stands<font color="#CCCCCC"> for message</font><font color="#E5E5E5"> integrity</font><font color="#CCCCCC"> code and</font>

184
00:07:36,580 --> 00:07:42,370
this<font color="#E5E5E5"> is used to</font><font color="#CCCCCC"> verify</font><font color="#E5E5E5"> the authenticity</font>

185
00:07:39,400 --> 00:07:44,979
of a frame<font color="#E5E5E5"> in other words so that</font><font color="#CCCCCC"> an</font>

186
00:07:42,370 --> 00:07:47,800
attacker<font color="#E5E5E5"> cannot decide to flip bits in</font>

187
00:07:44,980 --> 00:07:51,220
this frame or decide to forge a message

188
00:07:47,800 --> 00:07:53,950
and finally there's a field<font color="#E5E5E5"> called key</font>

189
00:07:51,220 --> 00:07:55,930
data<font color="#CCCCCC"> field</font><font color="#E5E5E5"> and that's encrypted and it</font>

190
00:07:53,950 --> 00:07:57,820
is used to transport for example this

191
00:07:55,930 --> 00:07:59,980
list of cipher<font color="#CCCCCC"> Suites in a</font><font color="#E5E5E5"> secure and</font>

192
00:07:57,820 --> 00:08:02,680
authenticated manner<font color="#E5E5E5"> and it can also</font>

193
00:07:59,980 --> 00:08:06,240
transport the group key which is used<font color="#CCCCCC"> to</font>

194
00:08:02,680 --> 00:08:08,950
encrypt broadcast on multicast traffic

195
00:08:06,240 --> 00:08:10,690
<font color="#E5E5E5">so we're almost done</font><font color="#CCCCCC"> with the background</font>

196
00:08:08,950 --> 00:08:13,780
<font color="#CCCCCC">here there is</font><font color="#E5E5E5"> one more thing I need</font><font color="#CCCCCC"> to</font>

197
00:08:10,690 --> 00:08:16,000
explain and that's<font color="#E5E5E5"> how a WPA ticket</font>

198
00:08:13,780 --> 00:08:20,200
frame looks like<font color="#E5E5E5"> because we are going to</font>

199
00:08:16,000 --> 00:08:22,210
use<font color="#E5E5E5"> parts of this in our attack so you</font>

200
00:08:20,200 --> 00:08:24,280
can see a very simplified layout here<font color="#CCCCCC"> on</font>

201
00:08:22,210 --> 00:08:26,799
<font color="#E5E5E5">to the ideas basically</font><font color="#CCCCCC"> we have some data</font>

202
00:08:24,280 --> 00:08:29,320
that<font color="#E5E5E5"> we want to transmit we calculate a</font>

203
00:08:26,800 --> 00:08:31,420
<font color="#E5E5E5">Mik over this data so make again stands</font>

204
00:08:29,320 --> 00:08:33,309
for message<font color="#E5E5E5"> integrity check so it</font>

205
00:08:31,420 --> 00:08:36,130
assures the authenticity of<font color="#E5E5E5"> the frame</font>

206
00:08:33,309 --> 00:08:38,468
<font color="#E5E5E5">that no bits have been flipped and this</font>

207
00:08:36,130 --> 00:08:41,830
whole frame<font color="#CCCCCC"> will be encrypted using</font><font color="#E5E5E5"> our</font>

208
00:08:38,469 --> 00:08:43,840
<font color="#E5E5E5">c4 so you should know by now</font><font color="#CCCCCC"> that our c4</font>

209
00:08:41,830 --> 00:08:45,520
is an<font color="#CCCCCC"> insecure</font><font color="#E5E5E5"> algorithm you should not</font>

210
00:08:43,840 --> 00:08:48,360
be<font color="#CCCCCC"> using it and this is one of the</font>

211
00:08:45,520 --> 00:08:51,069
reasons why<font color="#E5E5E5"> WPA tkip is not as secure</font>

212
00:08:48,360 --> 00:08:52,900
<font color="#E5E5E5">there's another</font><font color="#CCCCCC"> reason</font><font color="#E5E5E5"> why WPA tkip is</font>

213
00:08:51,070 --> 00:08:54,160
not secure<font color="#E5E5E5"> and that's because this Mik</font>

214
00:08:52,900 --> 00:08:58,660
check here it's

215
00:08:54,160 --> 00:09:02,439
calculated using<font color="#E5E5E5"> a Mickey</font><font color="#CCCCCC"> so it's using</font>

216
00:08:58,660 --> 00:09:04,810
<font color="#E5E5E5">a hash algorithm essentially but the</font>

217
00:09:02,440 --> 00:09:07,420
problem<font color="#E5E5E5"> here is that if an attacker is</font>

218
00:09:04,810 --> 00:09:09,819
able<font color="#CCCCCC"> to gain access to the data</font><font color="#E5E5E5"> on to</font>

219
00:09:07,420 --> 00:09:12,089
<font color="#E5E5E5">make fields in a decrypted form so if</font>

220
00:09:09,819 --> 00:09:15,279
you can somehow<font color="#E5E5E5"> undo the rc4 encryption</font>

221
00:09:12,089 --> 00:09:17,589
<font color="#E5E5E5">then if not occur simply has access</font><font color="#CCCCCC"> to</font>

222
00:09:15,279 --> 00:09:20,199
this data field on<font color="#CCCCCC"> to make fields</font><font color="#E5E5E5"> he can</font>

223
00:09:17,589 --> 00:09:23,050
derive the Mickey<font color="#E5E5E5"> normally</font><font color="#CCCCCC"> that is not</font>

224
00:09:20,199 --> 00:09:25,120
possible<font color="#CCCCCC"> in a cryptographic protocol and</font>

225
00:09:23,050 --> 00:09:29,050
we're going<font color="#CCCCCC"> to come</font><font color="#E5E5E5"> back to this issue</font>

226
00:09:25,120 --> 00:09:30,879
<font color="#E5E5E5">later during the presentation for now we</font>

227
00:09:29,050 --> 00:09:33,969
<font color="#E5E5E5">have covered the backgrounds and we can</font>

228
00:09:30,879 --> 00:09:37,509
finally<font color="#CCCCCC"> start explaining</font><font color="#E5E5E5"> how our testing</font>

229
00:09:33,970 --> 00:09:39,579
methodology actually works<font color="#CCCCCC"> so the way we</font>

230
00:09:37,509 --> 00:09:41,769
are<font color="#CCCCCC"> going to test implementations</font><font color="#E5E5E5"> of the</font>

231
00:09:39,579 --> 00:09:44,410
Wi-Fi handshake<font color="#E5E5E5"> is using model-based</font>

232
00:09:41,769 --> 00:09:47,050
testing so model-based testing is

233
00:09:44,410 --> 00:09:50,379
already fairly<font color="#CCCCCC"> well known especially in</font>

234
00:09:47,050 --> 00:09:53,349
the academic<font color="#CCCCCC"> world lately it has also</font>

235
00:09:50,379 --> 00:09:56,740
been applied<font color="#CCCCCC"> to test the implementations</font>

236
00:09:53,350 --> 00:09:58,470
<font color="#CCCCCC">of</font><font color="#E5E5E5"> network protocols</font><font color="#CCCCCC"> so just a</font><font color="#E5E5E5"> reminder</font>

237
00:09:56,740 --> 00:10:01,720
what do I mean with model-based testing

238
00:09:58,470 --> 00:10:03,939
basically<font color="#E5E5E5"> you have an implementation a</font>

239
00:10:01,720 --> 00:10:06,459
program that you<font color="#E5E5E5"> want to test on to us</font>

240
00:10:03,939 --> 00:10:08,199
also<font color="#E5E5E5"> have a formal</font><font color="#CCCCCC"> specification that</font>

241
00:10:06,459 --> 00:10:10,508
<font color="#E5E5E5">describes how the</font><font color="#CCCCCC"> implementation should</font>

242
00:10:08,199 --> 00:10:12,819
<font color="#CCCCCC">be behaving</font><font color="#E5E5E5"> and then you're basically</font>

243
00:10:10,509 --> 00:10:14,860
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to check is the implementation</font>

244
00:10:12,819 --> 00:10:17,469
<font color="#E5E5E5">indeed behaving according</font><font color="#CCCCCC"> to the</font>

245
00:10:14,860 --> 00:10:22,180
specification<font color="#E5E5E5"> according</font><font color="#CCCCCC"> to this abstract</font>

246
00:10:17,470 --> 00:10:24,730
formal model<font color="#E5E5E5"> um a few years ago</font><font color="#CCCCCC"> this</font>

247
00:10:22,180 --> 00:10:27,430
<font color="#E5E5E5">technique was applied against SSL on TLS</font>

248
00:10:24,730 --> 00:10:30,850
<font color="#CCCCCC">for example on the paper the messy State</font>

249
00:10:27,430 --> 00:10:34,089
of the Union and the researchers there

250
00:10:30,850 --> 00:10:35,589
discovered a lot<font color="#E5E5E5"> of issues</font><font color="#CCCCCC"> and the worst</font>

251
00:10:34,089 --> 00:10:41,620
of<font color="#E5E5E5"> these issues could be used to</font>

252
00:10:35,589 --> 00:10:45,309
completely decrypt any TLS traffic on

253
00:10:41,620 --> 00:10:46,930
the idea in our work now<font color="#E5E5E5"> is to come up</font>

254
00:10:45,309 --> 00:10:48,750
<font color="#E5E5E5">with a variation of this approach which</font>

255
00:10:46,930 --> 00:10:51,279
we can<font color="#E5E5E5"> apply to the Wi-Fi handshake</font>

256
00:10:48,750 --> 00:10:55,449
again with us<font color="#E5E5E5"> goal to detect logical</font>

257
00:10:51,279 --> 00:10:58,480
vulnerabilities in the handshake so how

258
00:10:55,449 --> 00:11:00,969
does our approach work<font color="#E5E5E5"> well we basically</font>

259
00:10:58,480 --> 00:11:04,120
<font color="#E5E5E5">first start with</font><font color="#CCCCCC"> a normal</font><font color="#E5E5E5"> execution of</font>

260
00:11:00,970 --> 00:11:05,589
the<font color="#E5E5E5"> handshake so in an execution where</font>

261
00:11:04,120 --> 00:11:06,920
we can successfully connect to the

262
00:11:05,589 --> 00:11:09,200
<font color="#CCCCCC">access point</font><font color="#E5E5E5"> every</font>

263
00:11:06,920 --> 00:11:11,540
Tango's<font color="#CCCCCC"> okay we take</font><font color="#E5E5E5"> that basically as</font>

264
00:11:09,200 --> 00:11:14,510
our base point and then we modify this

265
00:11:11,540 --> 00:11:16,250
normal execution<font color="#CCCCCC"> of the handshake</font><font color="#E5E5E5"> for</font>

266
00:11:14,510 --> 00:11:18,260
example what we can do is we<font color="#E5E5E5"> can decide</font>

267
00:11:16,250 --> 00:11:20,240
to drop random messages<font color="#E5E5E5"> from the</font>

268
00:11:18,260 --> 00:11:22,880
handshake<font color="#CCCCCC"> and if we do that the</font>

269
00:11:20,240 --> 00:11:24,829
<font color="#E5E5E5">handshake should no longer be successful</font>

270
00:11:22,880 --> 00:11:28,430
<font color="#E5E5E5">because we didn't send all the required</font>

271
00:11:24,829 --> 00:11:32,359
messages another thing<font color="#E5E5E5"> that we can</font><font color="#CCCCCC"> do is</font>

272
00:11:28,430 --> 00:11:34,040
we can try<font color="#E5E5E5"> to retransmit messages and in</font>

273
00:11:32,360 --> 00:11:36,589
that case the handshake<font color="#CCCCCC"> should still be</font>

274
00:11:34,040 --> 00:11:38,300
executed<font color="#E5E5E5"> perfectly fine because it's</font>

275
00:11:36,589 --> 00:11:40,670
<font color="#E5E5E5">very normal in the Wi-Fi network that</font>

276
00:11:38,300 --> 00:11:44,779
<font color="#E5E5E5">frames are retransmitted because for</font>

277
00:11:40,670 --> 00:11:46,910
<font color="#CCCCCC">example the acknowledgement was lost and</font>

278
00:11:44,779 --> 00:11:48,680
these modifications<font color="#E5E5E5"> to the Wi-Fi</font>

279
00:11:46,910 --> 00:11:50,600
handshake<font color="#CCCCCC"> to this normal execution of</font>

280
00:11:48,680 --> 00:11:53,510
the<font color="#E5E5E5"> handshake we call these test</font>

281
00:11:50,600 --> 00:11:55,820
generation<font color="#E5E5E5"> rules so a test generation</font>

282
00:11:53,510 --> 00:11:57,410
rule is for example<font color="#CCCCCC"> a rule which has try</font>

283
00:11:55,820 --> 00:11:59,870
to drop every message of the handshake

284
00:11:57,410 --> 00:12:04,399
<font color="#E5E5E5">or try to inject random messages between</font>

285
00:11:59,870 --> 00:12:06,560
<font color="#E5E5E5">a normal handshake so what we need to do</font>

286
00:12:04,399 --> 00:12:09,019
here<font color="#E5E5E5"> then is define</font><font color="#CCCCCC"> appropriate test</font>

287
00:12:06,560 --> 00:12:11,989
generation rules<font color="#E5E5E5"> so we can test the</font>

288
00:12:09,019 --> 00:12:13,820
<font color="#E5E5E5">necessarily functionality of a Wi-Fi</font>

289
00:12:11,990 --> 00:12:16,600
handshake now I will give<font color="#CCCCCC"> some more</font>

290
00:12:13,820 --> 00:12:18,860
<font color="#E5E5E5">example of these test generation rules</font>

291
00:12:16,600 --> 00:12:20,959
<font color="#CCCCCC">but one important thing</font><font color="#E5E5E5"> I do want to</font>

292
00:12:18,860 --> 00:12:24,110
mention now is that we assume that<font color="#E5E5E5"> all</font>

293
00:12:20,959 --> 00:12:26,359
these modifications<font color="#CCCCCC"> to this base</font>

294
00:12:24,110 --> 00:12:28,190
execution of the<font color="#E5E5E5"> handshake are applied</font>

295
00:12:26,360 --> 00:12:30,050
independently so we're not<font color="#E5E5E5"> going to</font>

296
00:12:28,190 --> 00:12:33,070
<font color="#E5E5E5">combine two different test generation</font>

297
00:12:30,050 --> 00:12:35,449
rules<font color="#E5E5E5"> because otherwise we would</font><font color="#CCCCCC"> be in</font><font color="#E5E5E5"> a</font>

298
00:12:33,070 --> 00:12:37,160
<font color="#CCCCCC">explosion</font><font color="#E5E5E5"> of the number of options it</font>

299
00:12:35,449 --> 00:12:38,779
would be an exponential options that we

300
00:12:37,160 --> 00:12:41,120
get which would be<font color="#CCCCCC"> basically impossible</font>

301
00:12:38,779 --> 00:12:44,149
<font color="#E5E5E5">to execute them all so we're going to</font>

302
00:12:41,120 --> 00:12:45,800
<font color="#E5E5E5">assume their independence</font><font color="#CCCCCC"> this this is</font>

303
00:12:44,149 --> 00:12:48,620
<font color="#CCCCCC">alimentation of the approach and we are</font>

304
00:12:45,800 --> 00:12:52,089
<font color="#CCCCCC">working on it to remove this limitation</font>

305
00:12:48,620 --> 00:12:54,500
<font color="#E5E5E5">but currently that's what we're doing so</font>

306
00:12:52,089 --> 00:12:56,930
once we have<font color="#CCCCCC"> our test generation rules</font>

307
00:12:54,500 --> 00:12:59,510
we basically apply all these test

308
00:12:56,930 --> 00:13:01,760
<font color="#E5E5E5">generation rules to our model to our</font>

309
00:12:59,510 --> 00:13:04,579
<font color="#E5E5E5">normal</font><font color="#CCCCCC"> execution of the handshake and we</font>

310
00:13:01,760 --> 00:13:06,410
end<font color="#E5E5E5"> up with a test case so what an</font><font color="#CCCCCC"> hour</font>

311
00:13:04,579 --> 00:13:09,050
work what is<font color="#E5E5E5"> the definition of a test</font>

312
00:13:06,410 --> 00:13:11,060
<font color="#E5E5E5">case a test case essentially specifies</font>

313
00:13:09,050 --> 00:13:13,279
the messages that<font color="#E5E5E5"> you want to send to</font>

314
00:13:11,060 --> 00:13:15,890
<font color="#E5E5E5">the</font><font color="#CCCCCC"> amplitude implementation under</font><font color="#E5E5E5"> test</font>

315
00:13:13,279 --> 00:13:19,130
<font color="#CCCCCC">on the replies</font><font color="#E5E5E5"> that you expect and</font>

316
00:13:15,890 --> 00:13:20,899
return but that's not<font color="#CCCCCC"> everything that</font>

317
00:13:19,130 --> 00:13:23,029
<font color="#E5E5E5">the test case defines it also</font>

318
00:13:20,899 --> 00:13:25,639
<font color="#E5E5E5">where this should result in a</font><font color="#CCCCCC"> successful</font>

319
00:13:23,029 --> 00:13:27,800
connection<font color="#E5E5E5"> with the access point for</font>

320
00:13:25,639 --> 00:13:29,449
<font color="#CCCCCC">example because</font><font color="#E5E5E5"> you might have a case</font>

321
00:13:27,800 --> 00:13:31,790
<font color="#E5E5E5">where you always get the expected</font>

322
00:13:29,449 --> 00:13:34,248
replies but<font color="#E5E5E5"> it should not result in a</font>

323
00:13:31,790 --> 00:13:35,809
successful connection<font color="#E5E5E5"> for example if you</font>

324
00:13:34,249 --> 00:13:37,579
drop the last two messages<font color="#CCCCCC"> of the</font>

325
00:13:35,809 --> 00:13:39,649
handshake<font color="#CCCCCC"> well you will always get the</font>

326
00:13:37,579 --> 00:13:41,628
expected replies but the handshake

327
00:13:39,649 --> 00:13:42,679
hasn't finished yet<font color="#CCCCCC"> so you're not</font>

328
00:13:41,629 --> 00:13:45,319
allowed<font color="#CCCCCC"> to connect yet you're not</font>

329
00:13:42,679 --> 00:13:47,269
<font color="#E5E5E5">allowed</font><font color="#CCCCCC"> to send</font><font color="#E5E5E5"> data yet so to recap</font>

330
00:13:45,319 --> 00:13:49,219
<font color="#CCCCCC">test case defines the messages that you</font>

331
00:13:47,269 --> 00:13:51,699
<font color="#CCCCCC">sent</font><font color="#E5E5E5"> that you expect</font><font color="#CCCCCC"> on Twitter</font><font color="#E5E5E5"> this</font>

332
00:13:49,220 --> 00:13:56,059
should<font color="#E5E5E5"> result in a</font><font color="#CCCCCC"> successful connection</font>

333
00:13:51,699 --> 00:13:58,579
<font color="#CCCCCC">okay so we now have our test generation</font>

334
00:13:56,059 --> 00:14:01,249
rules<font color="#E5E5E5"> we have our test cases</font><font color="#CCCCCC"> how are</font><font color="#E5E5E5"> we</font>

335
00:13:58,579 --> 00:14:02,679
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> execute the test</font><font color="#E5E5E5"> cases well the</font>

336
00:14:01,249 --> 00:14:05,720
idea is<font color="#CCCCCC"> actually very straightforward</font>

337
00:14:02,679 --> 00:14:08,089
form<font color="#CCCCCC"> straightforward it's like normal</font>

338
00:14:05,720 --> 00:14:10,970
<font color="#E5E5E5">test cases you basically execute the</font>

339
00:14:08,089 --> 00:14:13,309
<font color="#E5E5E5">test case if during this execution you</font>

340
00:14:10,970 --> 00:14:16,009
get an unexpected reply you<font color="#E5E5E5"> immediately</font>

341
00:14:13,309 --> 00:14:17,779
know that<font color="#E5E5E5"> something is wrong here you</font>

342
00:14:16,009 --> 00:14:20,089
don't<font color="#CCCCCC"> that you don't yet know whether</font>

343
00:14:17,779 --> 00:14:22,100
it's a vulnerability<font color="#CCCCCC"> but it's definitely</font>

344
00:14:20,089 --> 00:14:24,350
<font color="#E5E5E5">a bug because</font><font color="#CCCCCC"> there is deviation from</font>

345
00:14:22,100 --> 00:14:27,139
the standard<font color="#E5E5E5"> and you're going</font><font color="#CCCCCC"> to track</font>

346
00:14:24,350 --> 00:14:30,290
<font color="#CCCCCC">these in a sense</font><font color="#E5E5E5"> failed test cases</font>

347
00:14:27,139 --> 00:14:32,149
<font color="#E5E5E5">you're going to save those and after the</font>

348
00:14:30,290 --> 00:14:33,920
test case has<font color="#E5E5E5"> been executed you're going</font>

349
00:14:32,149 --> 00:14:35,689
to reset the<font color="#CCCCCC"> implementation under test</font>

350
00:14:33,920 --> 00:14:38,179
by sending it the authentication frame

351
00:14:35,689 --> 00:14:41,360
<font color="#E5E5E5">to for example</font><font color="#CCCCCC"> the access</font><font color="#E5E5E5"> points or the</font>

352
00:14:38,179 --> 00:14:42,920
client<font color="#E5E5E5"> if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> always got the expected</font>

353
00:14:41,360 --> 00:14:44,870
replies then<font color="#E5E5E5"> we're going to check if it</font>

354
00:14:42,920 --> 00:14:48,709
was<font color="#CCCCCC"> a successful connection or not and</font>

355
00:14:44,870 --> 00:14:52,399
if we get the expected<font color="#E5E5E5"> result then again</font>

356
00:14:48,709 --> 00:14:55,219
<font color="#E5E5E5">everything is fine and we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> ignore</font>

357
00:14:52,399 --> 00:14:57,350
this<font color="#E5E5E5"> test case because implementation</font>

358
00:14:55,220 --> 00:14:59,029
reacted in<font color="#CCCCCC"> the way it's supposed to so</font>

359
00:14:57,350 --> 00:15:02,420
we<font color="#E5E5E5"> don't need to investigate</font><font color="#CCCCCC"> anything</font>

360
00:14:59,029 --> 00:15:04,759
<font color="#E5E5E5">but if we get an unexpected result here</font>

361
00:15:02,420 --> 00:15:06,709
for<font color="#E5E5E5"> example if the test case says that</font>

362
00:15:04,759 --> 00:15:09,620
<font color="#CCCCCC">we should</font><font color="#E5E5E5"> not end up with a successful</font>

363
00:15:06,709 --> 00:15:12,979
<font color="#E5E5E5">connection</font><font color="#CCCCCC"> however we</font><font color="#E5E5E5"> are able to send</font>

364
00:15:09,620 --> 00:15:14,870
data<font color="#E5E5E5"> frames then something is</font><font color="#CCCCCC"> wrong so</font>

365
00:15:12,980 --> 00:15:17,179
to clarify here the way we<font color="#CCCCCC"> test whether</font>

366
00:15:14,870 --> 00:15:19,639
<font color="#E5E5E5">a connection is successful or not</font><font color="#CCCCCC"> is by</font>

367
00:15:17,179 --> 00:15:21,860
sending<font color="#CCCCCC"> our frames to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> implementation</font>

368
00:15:19,639 --> 00:15:25,519
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> test and if we get a reply back</font>

369
00:15:21,860 --> 00:15:28,189
we know that the handshake succeeded so

370
00:15:25,519 --> 00:15:30,679
the idea is here<font color="#CCCCCC"> that we now end up with</font>

371
00:15:28,189 --> 00:15:32,579
a set of<font color="#E5E5E5"> failed test cases and</font><font color="#CCCCCC"> we're</font>

372
00:15:30,679 --> 00:15:36,180
<font color="#E5E5E5">going to inspect this test case</font>

373
00:15:32,580 --> 00:15:38,310
so the way we<font color="#E5E5E5"> can do this is that if we</font>

374
00:15:36,180 --> 00:15:40,349
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> have access</font><font color="#E5E5E5"> to the source code</font><font color="#CCCCCC"> of</font>

375
00:15:38,310 --> 00:15:43,229
<font color="#E5E5E5">the implementation we can run additional</font>

376
00:15:40,350 --> 00:15:46,080
<font color="#E5E5E5">blackbox tests</font><font color="#CCCCCC"> and try to</font><font color="#E5E5E5"> determine what</font>

377
00:15:43,230 --> 00:15:48,000
<font color="#CCCCCC">exactly went wrong if</font><font color="#E5E5E5"> we have the source</font>

378
00:15:46,080 --> 00:15:51,630
code<font color="#CCCCCC"> then we</font><font color="#E5E5E5"> can try to inspect the</font>

379
00:15:48,000 --> 00:15:55,020
source code<font color="#E5E5E5"> and see what</font><font color="#CCCCCC"> the cause</font><font color="#E5E5E5"> of</font>

380
00:15:51,630 --> 00:15:56,850
the problem is and once we know<font color="#CCCCCC"> what</font><font color="#E5E5E5"> the</font>

381
00:15:55,020 --> 00:16:01,370
<font color="#CCCCCC">bug</font><font color="#E5E5E5"> is an expert can then determine</font>

382
00:15:56,850 --> 00:16:01,370
where<font color="#CCCCCC"> this Burke is exploitable</font><font color="#E5E5E5"> or not</font>

383
00:16:02,270 --> 00:16:08,310
so to come back<font color="#CCCCCC"> to the test generation</font>

384
00:16:05,280 --> 00:16:10,770
rules that we have used<font color="#E5E5E5"> we basically</font>

385
00:16:08,310 --> 00:16:13,199
have two broad<font color="#CCCCCC"> categories of test</font>

386
00:16:10,770 --> 00:16:15,810
generation rules the first<font color="#CCCCCC"> one they</font>

387
00:16:13,200 --> 00:16:17,700
manipulate messages as a whole<font color="#E5E5E5"> there are</font>

388
00:16:15,810 --> 00:16:19,589
<font color="#E5E5E5">the examples that</font><font color="#CCCCCC"> I already</font><font color="#E5E5E5"> mentioned</font>

389
00:16:17,700 --> 00:16:22,490
that<font color="#E5E5E5"> you can drop a message or that you</font>

390
00:16:19,590 --> 00:16:25,790
can repeat messages and you<font color="#E5E5E5"> can then see</font>

391
00:16:22,490 --> 00:16:28,470
how the implementation<font color="#E5E5E5"> reacts to this</font>

392
00:16:25,790 --> 00:16:30,270
the second set<font color="#CCCCCC"> of test generation rules</font>

393
00:16:28,470 --> 00:16:32,940
they don't manipulate messages as a

394
00:16:30,270 --> 00:16:35,460
whole<font color="#E5E5E5"> but they manipulate certain fields</font>

395
00:16:32,940 --> 00:16:39,750
or properties of a message that is being

396
00:16:35,460 --> 00:16:42,120
sent for example we can use<font color="#CCCCCC"> an invalid</font>

397
00:16:39,750 --> 00:16:44,550
replay counter<font color="#E5E5E5"> we can modify the header</font>

398
00:16:42,120 --> 00:16:47,640
<font color="#E5E5E5">for example we can modify the header</font><font color="#CCCCCC"> on</font>

399
00:16:44,550 --> 00:16:51,150
<font color="#CCCCCC">say that this is message 3 while it's</font>

400
00:16:47,640 --> 00:16:52,260
<font color="#E5E5E5">actually message</font><font color="#CCCCCC"> 2 or we can send</font><font color="#E5E5E5"> an</font>

401
00:16:51,150 --> 00:16:55,050
invalid<font color="#E5E5E5"> Micke</font>

402
00:16:52,260 --> 00:16:57,480
so<font color="#CCCCCC"> in uninvolved message integrity codes</font>

403
00:16:55,050 --> 00:17:00,060
<font color="#E5E5E5">and we can do other</font><font color="#CCCCCC"> stuff as well we can</font>

404
00:16:57,480 --> 00:17:01,980
also mess with the list of<font color="#E5E5E5"> supported</font>

405
00:17:00,060 --> 00:17:04,319
cipher<font color="#CCCCCC"> Suites</font><font color="#E5E5E5"> or the selected cipher</font>

406
00:17:01,980 --> 00:17:09,690
suite which is normally authenticated<font color="#E5E5E5"> in</font>

407
00:17:04,319 --> 00:17:11,929
the handshake so that summarizes<font color="#E5E5E5"> our</font>

408
00:17:09,690 --> 00:17:15,030
testing technique<font color="#E5E5E5"> on the high</font><font color="#CCCCCC"> level and</font>

409
00:17:11,930 --> 00:17:19,350
we apply this technique<font color="#CCCCCC"> to</font><font color="#E5E5E5"> 12 access</font>

410
00:17:15,030 --> 00:17:21,540
points in total<font color="#E5E5E5"> and we try to get a good</font>

411
00:17:19,349 --> 00:17:23,609
variation<font color="#E5E5E5"> in the type of access</font><font color="#CCCCCC"> points</font>

412
00:17:21,540 --> 00:17:26,730
that<font color="#CCCCCC"> we tested so for example we have</font>

413
00:17:23,609 --> 00:17:29,129
open<font color="#CCCCCC"> source ones like</font><font color="#E5E5E5"> open BSD like</font>

414
00:17:26,730 --> 00:17:31,320
Linux implementations we also have a

415
00:17:29,130 --> 00:17:34,530
<font color="#CCCCCC">code of</font><font color="#E5E5E5"> home routers where the source</font>

416
00:17:31,320 --> 00:17:37,169
code was leaked<font color="#E5E5E5"> so there's old code of</font>

417
00:17:34,530 --> 00:17:38,760
<font color="#CCCCCC">Broadcom</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> mediatek and there's</font><font color="#E5E5E5"> also</font>

418
00:17:37,170 --> 00:17:41,190
the<font color="#CCCCCC"> traditional closed source</font>

419
00:17:38,760 --> 00:17:44,790
implementations<font color="#CCCCCC"> like Microsoft Apple and</font>

420
00:17:41,190 --> 00:17:46,230
so on and we also try to test<font color="#CCCCCC"> two more</font>

421
00:17:44,790 --> 00:17:49,080
professional access points

422
00:17:46,230 --> 00:17:52,440
namely the<font color="#E5E5E5"> arrow have implemented and</font>

423
00:17:49,080 --> 00:17:56,460
also an arrow net which I<font color="#E5E5E5"> think was from</font>

424
00:17:52,440 --> 00:17:59,460
Cisco<font color="#E5E5E5"> um</font><font color="#CCCCCC"> the results here were very</font>

425
00:17:56,460 --> 00:18:02,010
surprising in my opinion<font color="#E5E5E5"> because the</font>

426
00:17:59,460 --> 00:18:03,690
Wi-Fi handshake is fairly<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> I mean</font>

427
00:18:02,010 --> 00:18:05,700
you have this stage where you discover a

428
00:18:03,690 --> 00:18:07,590
network<font color="#E5E5E5"> and then you just have four</font>

429
00:18:05,700 --> 00:18:10,260
<font color="#CCCCCC">messages which are exchanged</font>

430
00:18:07,590 --> 00:18:13,530
so I expected that we<font color="#CCCCCC"> weren't going to</font>

431
00:18:10,260 --> 00:18:16,879
<font color="#E5E5E5">find much but we</font><font color="#CCCCCC"> discovered several</font>

432
00:18:13,530 --> 00:18:21,899
<font color="#E5E5E5">issues so that</font><font color="#CCCCCC"> was a</font><font color="#E5E5E5"> very nice success</font>

433
00:18:16,880 --> 00:18:26,549
and I'm going to<font color="#E5E5E5"> briefly discuss some</font><font color="#CCCCCC"> of</font>

434
00:18:21,900 --> 00:18:28,410
<font color="#E5E5E5">the more interesting issues we found and</font>

435
00:18:26,549 --> 00:18:32,160
these issues are also the exploitable

436
00:18:28,410 --> 00:18:35,250
one so generally<font color="#E5E5E5"> an every access point</font>

437
00:18:32,160 --> 00:18:37,230
we found<font color="#E5E5E5"> some small deviations from the</font>

438
00:18:35,250 --> 00:18:40,799
<font color="#CCCCCC">standards but some of these Divini</font>

439
00:18:37,230 --> 00:18:42,780
deviations were just very benign on you

440
00:18:40,799 --> 00:18:44,400
you can't even<font color="#E5E5E5"> consider them really bugs</font>

441
00:18:42,780 --> 00:18:46,889
but there were deviations but yet

442
00:18:44,400 --> 00:18:48,150
<font color="#CCCCCC">somewhere</font><font color="#E5E5E5"> bugs but non exploitable but</font>

443
00:18:46,890 --> 00:18:51,570
we're going<font color="#E5E5E5"> to focus on the most</font>

444
00:18:48,150 --> 00:18:54,809
<font color="#E5E5E5">interesting ones so the first one is</font>

445
00:18:51,570 --> 00:18:56,970
<font color="#CCCCCC">that the media</font><font color="#E5E5E5"> attack and</font><font color="#CCCCCC"> telenet</font>

446
00:18:54,809 --> 00:18:59,730
implementations<font color="#E5E5E5"> they don't properly</font>

447
00:18:56,970 --> 00:19:01,410
<font color="#E5E5E5">defend against downgrade attacks so what</font>

448
00:18:59,730 --> 00:19:04,230
is still not<font color="#E5E5E5"> here telling that it's it's</font>

449
00:19:01,410 --> 00:19:06,540
a Belgium ISP and they hand out their

450
00:19:04,230 --> 00:19:09,750
own home routers<font color="#E5E5E5"> with an</font><font color="#CCCCCC"> implementation</font>

451
00:19:06,540 --> 00:19:12,270
of the Wi-Fi access point and here we

452
00:19:09,750 --> 00:19:14,460
found<font color="#E5E5E5"> that they could do not check the</font>

453
00:19:12,270 --> 00:19:17,790
chosen cipher that<font color="#E5E5E5"> the client sends a</font>

454
00:19:14,460 --> 00:19:20,130
message to so as I mentioned in<font color="#E5E5E5"> the</font>

455
00:19:17,790 --> 00:19:23,610
introduction<font color="#E5E5E5"> this check here is only to</font>

456
00:19:20,130 --> 00:19:25,590
<font color="#CCCCCC">make the handshake more robust</font><font color="#E5E5E5"> or to put</font>

457
00:19:23,610 --> 00:19:27,870
it differently<font color="#CCCCCC"> although this check is</font>

458
00:19:25,590 --> 00:19:30,949
mission missing<font color="#E5E5E5"> I'm not able</font><font color="#CCCCCC"> to come up</font>

459
00:19:27,870 --> 00:19:34,639
<font color="#E5E5E5">with an actual attack which abuses this</font>

460
00:19:30,950 --> 00:19:37,020
however<font color="#E5E5E5"> inspired by this result</font><font color="#CCCCCC"> I</font>

461
00:19:34,640 --> 00:19:40,530
noticed<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> media tech also has a</font>

462
00:19:37,020 --> 00:19:43,350
<font color="#E5E5E5">client-side implementation of the Wi-Fi</font>

463
00:19:40,530 --> 00:19:45,690
handshake<font color="#E5E5E5"> and then I manually inspected</font>

464
00:19:43,350 --> 00:19:48,168
the source code<font color="#E5E5E5"> and found that</font><font color="#CCCCCC"> mediatek</font>

465
00:19:45,690 --> 00:19:51,360
was also<font color="#CCCCCC"> missing</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> client-side</font>

466
00:19:48,169 --> 00:19:54,210
<font color="#E5E5E5">downgrade check so it was missing both</font>

467
00:19:51,360 --> 00:19:57,510
checks on in this case<font color="#E5E5E5"> you can't really</font>

468
00:19:54,210 --> 00:19:59,220
downgrade a<font color="#CCCCCC"> mediatek client so the way</font>

469
00:19:57,510 --> 00:19:59,850
this works is an attacker would<font color="#E5E5E5"> pull</font><font color="#CCCCCC"> up</font>

470
00:19:59,220 --> 00:20:02,549
<font color="#E5E5E5">a rogue</font>

471
00:19:59,850 --> 00:20:05,250
this point it would clone<font color="#E5E5E5"> the real</font>

472
00:20:02,549 --> 00:20:08,429
<font color="#CCCCCC">Network</font><font color="#E5E5E5"> and it would</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> advertise</font>

473
00:20:05,250 --> 00:20:10,470
support for<font color="#E5E5E5"> WPA tkip which means the</font>

474
00:20:08,429 --> 00:20:12,410
client<font color="#E5E5E5"> is forced to select the cipher</font>

475
00:20:10,470 --> 00:20:14,340
because<font color="#E5E5E5"> it's the only option</font>

476
00:20:12,410 --> 00:20:16,260
normally this attack would have<font color="#CCCCCC"> been</font>

477
00:20:14,340 --> 00:20:18,000
detected<font color="#CCCCCC"> at this stage</font><font color="#E5E5E5"> because an</font>

478
00:20:16,260 --> 00:20:19,710
attacker cannot<font color="#E5E5E5"> modify message</font><font color="#CCCCCC"> tweet</font>

479
00:20:18,000 --> 00:20:22,559
because<font color="#E5E5E5"> it is authenticated</font>

480
00:20:19,710 --> 00:20:23,820
however<font color="#CCCCCC"> mediatek doesn't</font><font color="#E5E5E5"> check it so it</font>

481
00:20:22,559 --> 00:20:28,770
doesn't notice that anything<font color="#E5E5E5"> is going</font>

482
00:20:23,820 --> 00:20:30,659
wrong so for the second attack that we

483
00:20:28,770 --> 00:20:34,020
found it is a denial<font color="#CCCCCC"> of service attack</font>

484
00:20:30,660 --> 00:20:36,210
against Windows<font color="#E5E5E5"> 7 so</font><font color="#CCCCCC"> in Windows 7</font><font color="#E5E5E5"> and</font>

485
00:20:34,020 --> 00:20:40,740
<font color="#CCCCCC">also in Windows 8 and Windows</font><font color="#E5E5E5"> 10 you</font><font color="#CCCCCC"> are</font>

486
00:20:36,210 --> 00:20:45,030
able<font color="#CCCCCC"> to set up a hotspot</font><font color="#E5E5E5"> so a normal in</font>

487
00:20:40,740 --> 00:20:48,530
infrastructure<font color="#CCCCCC"> access point</font><font color="#E5E5E5"> you can set</font>

488
00:20:45,030 --> 00:20:52,230
<font color="#E5E5E5">that up on Windows 7 and here we found a</font>

489
00:20:48,530 --> 00:20:54,240
denial of<font color="#E5E5E5"> service</font><font color="#CCCCCC"> attack which it's very</font>

490
00:20:52,230 --> 00:20:56,429
<font color="#E5E5E5">interesting because we can target a</font>

491
00:20:54,240 --> 00:20:59,490
specific<font color="#CCCCCC"> client using</font><font color="#E5E5E5"> this denial of</font>

492
00:20:56,429 --> 00:21:01,950
service attack so the way this

493
00:20:59,490 --> 00:21:04,230
vulnerability works is if<font color="#E5E5E5"> the client</font>

494
00:21:01,950 --> 00:21:06,960
<font color="#CCCCCC">sends an association request to the</font>

495
00:21:04,230 --> 00:21:09,600
access points then everything is fine

496
00:21:06,960 --> 00:21:11,340
because sending one<font color="#CCCCCC"> Association request</font>

497
00:21:09,600 --> 00:21:13,590
is normal<font color="#E5E5E5"> it is used to inform the</font>

498
00:21:11,340 --> 00:21:15,809
access point hey I want<font color="#E5E5E5"> to connect but</font>

499
00:21:13,590 --> 00:21:17,520
<font color="#E5E5E5">if you attend send too rapidly after one</font>

500
00:21:15,809 --> 00:21:21,299
another<font color="#E5E5E5"> something</font><font color="#CCCCCC"> goes wrong on the</font>

501
00:21:17,520 --> 00:21:23,220
<font color="#E5E5E5">access point because normally it should</font>

502
00:21:21,299 --> 00:21:25,139
<font color="#E5E5E5">now start the</font><font color="#CCCCCC"> four-way handshake because</font>

503
00:21:23,220 --> 00:21:27,630
it received<font color="#E5E5E5"> the</font><font color="#CCCCCC"> association</font><font color="#E5E5E5"> you request</font>

504
00:21:25,140 --> 00:21:29,520
<font color="#E5E5E5">it should either deny this connection or</font>

505
00:21:27,630 --> 00:21:33,720
<font color="#E5E5E5">it should start the fourth way handshake</font>

506
00:21:29,520 --> 00:21:35,970
but nothing happens<font color="#E5E5E5"> and if we now some</font>

507
00:21:33,720 --> 00:21:38,460
seconds later<font color="#E5E5E5"> try to reconnect so we</font>

508
00:21:35,970 --> 00:21:41,840
again send an association request<font color="#E5E5E5"> then</font>

509
00:21:38,460 --> 00:21:45,090
we get an association rejected response

510
00:21:41,840 --> 00:21:46,649
in other words we cannot connect the

511
00:21:45,090 --> 00:21:48,658
<font color="#E5E5E5">interesting part here is</font><font color="#CCCCCC"> that if a</font>

512
00:21:46,650 --> 00:21:50,370
<font color="#E5E5E5">different client tries to connect then</font>

513
00:21:48,659 --> 00:21:52,710
everything<font color="#E5E5E5"> goes just fine it sends the</font>

514
00:21:50,370 --> 00:21:55,199
<font color="#CCCCCC">association request on the access point</font>

515
00:21:52,710 --> 00:21:56,520
will<font color="#CCCCCC"> start the four-way handshake so</font>

516
00:21:55,200 --> 00:21:59,640
although<font color="#E5E5E5"> we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have access to</font><font color="#CCCCCC"> the</font>

517
00:21:56,520 --> 00:22:01,889
source<font color="#CCCCCC"> code here</font><font color="#E5E5E5"> what we conjecture</font><font color="#CCCCCC"> that</font>

518
00:21:59,640 --> 00:22:04,919
goes wrong here is that the<font color="#CCCCCC"> access point</font>

519
00:22:01,890 --> 00:22:07,409
<font color="#E5E5E5">is keeping state associated</font><font color="#CCCCCC"> two clients</font>

520
00:22:04,919 --> 00:22:09,540
<font color="#CCCCCC">one here on this state somehow gets</font>

521
00:22:07,409 --> 00:22:13,120
corrupted<font color="#E5E5E5"> because we</font><font color="#CCCCCC"> send</font><font color="#E5E5E5"> to Association</font>

522
00:22:09,540 --> 00:22:15,970
requests<font color="#E5E5E5"> right after one another</font><font color="#CCCCCC"> and</font>

523
00:22:13,120 --> 00:22:18,479
<font color="#E5E5E5">then this state associated to the client</font>

524
00:22:15,970 --> 00:22:21,790
is corrupted it can no longer connect

525
00:22:18,480 --> 00:22:24,640
and of course an attacker can abuse this

526
00:22:21,790 --> 00:22:26,590
<font color="#CCCCCC">he can spoof the</font><font color="#E5E5E5"> MAC</font><font color="#CCCCCC"> address of the</font>

527
00:22:24,640 --> 00:22:29,190
victim and then send to<font color="#CCCCCC"> Association</font>

528
00:22:26,590 --> 00:22:31,870
requests<font color="#E5E5E5"> in name of</font><font color="#CCCCCC"> the victim</font>

529
00:22:29,190 --> 00:22:35,830
so the<font color="#E5E5E5"> proof-of-concept code of this</font>

530
00:22:31,870 --> 00:22:37,600
attack is online<font color="#CCCCCC"> I also have a recorded</font>

531
00:22:35,830 --> 00:22:39,879
demonstration of this<font color="#E5E5E5"> attack if there is</font>

532
00:22:37,600 --> 00:22:42,159
time at the<font color="#E5E5E5"> end of the talk</font><font color="#CCCCCC"> I will show</font>

533
00:22:39,880 --> 00:22:44,020
it but<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> sure we don't run out of</font>

534
00:22:42,160 --> 00:22:46,720
<font color="#E5E5E5">time I'm going to show it at the</font><font color="#CCCCCC"> end of</font>

535
00:22:44,020 --> 00:22:48,700
the presentation<font color="#CCCCCC"> so if you</font><font color="#E5E5E5"> follow this</font>

536
00:22:46,720 --> 00:22:51,220
<font color="#E5E5E5">get up link you will see the proof of</font>

537
00:22:48,700 --> 00:22:53,650
concept<font color="#CCCCCC"> code</font><font color="#E5E5E5"> of several other attacks</font>

538
00:22:51,220 --> 00:22:58,030
including some attacks against<font color="#CCCCCC"> open BSD</font>

539
00:22:53,650 --> 00:23:00,970
<font color="#E5E5E5">implementation as well</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so let's go</font>

540
00:22:58,030 --> 00:23:06,780
on<font color="#CCCCCC"> to the next attack</font><font color="#E5E5E5"> the next attack</font><font color="#CCCCCC"> is</font>

541
00:23:00,970 --> 00:23:09,520
a downgrade attack against<font color="#CCCCCC"> Broadcom</font><font color="#E5E5E5"> and</font>

542
00:23:06,780 --> 00:23:12,220
the vulnerability that we exploit here

543
00:23:09,520 --> 00:23:15,580
<font color="#E5E5E5">is that the</font><font color="#CCCCCC"> implementation of Broadcom</font>

544
00:23:12,220 --> 00:23:18,730
cannot differentiate basically message

545
00:23:15,580 --> 00:23:20,830
two and four of the handshake<font color="#E5E5E5"> so what do</font>

546
00:23:18,730 --> 00:23:23,470
I mean<font color="#CCCCCC"> with this well if the</font><font color="#E5E5E5"> access</font>

547
00:23:20,830 --> 00:23:25,720
point<font color="#E5E5E5"> is expecting message for but it's</font>

548
00:23:23,470 --> 00:23:27,670
actually receiving message<font color="#E5E5E5"> two then we</font>

549
00:23:25,720 --> 00:23:29,530
will<font color="#E5E5E5"> simply</font><font color="#CCCCCC"> treat</font><font color="#E5E5E5"> message to as if it</font>

550
00:23:27,670 --> 00:23:32,740
<font color="#CCCCCC">where message for and it</font><font color="#E5E5E5"> will</font>

551
00:23:29,530 --> 00:23:35,290
successfully<font color="#CCCCCC"> complete the handshake now</font>

552
00:23:32,740 --> 00:23:37,660
<font color="#CCCCCC">I'm not going to go</font><font color="#E5E5E5"> into detail about</font>

553
00:23:35,290 --> 00:23:41,500
<font color="#E5E5E5">how</font><font color="#CCCCCC"> this attack works</font><font color="#E5E5E5"> you need a few</font>

554
00:23:37,660 --> 00:23:43,390
tricks in order<font color="#CCCCCC"> to carry it out but the</font>

555
00:23:41,500 --> 00:23:45,880
core message here is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can abuse</font>

556
00:23:43,390 --> 00:23:50,140
<font color="#E5E5E5">this to downgrade the access point into</font>

557
00:23:45,880 --> 00:23:53,110
<font color="#E5E5E5">using WPA tkip so we cannot we cannot</font>

558
00:23:50,140 --> 00:23:54,610
down<font color="#E5E5E5"> great the</font><font color="#CCCCCC"> client we can</font><font color="#E5E5E5"> only down</font>

559
00:23:53,110 --> 00:23:58,959
<font color="#E5E5E5">rate the access point into using a</font>

560
00:23:54,610 --> 00:24:00,969
weaker cipher<font color="#E5E5E5"> and this is of course bad</font>

561
00:23:58,960 --> 00:24:03,370
because the access point will then start

562
00:24:00,970 --> 00:24:06,730
transmitting data frames encrypted using

563
00:24:03,370 --> 00:24:08,969
WPA TCAP which uses rc4<font color="#CCCCCC"> on an it's not</font>

564
00:24:06,730 --> 00:24:12,280
<font color="#CCCCCC">that secure</font>

565
00:24:08,970 --> 00:24:14,290
now the reason why I find<font color="#E5E5E5"> as a</font><font color="#CCCCCC"> tech very</font>

566
00:24:12,280 --> 00:24:16,090
interesting is because<font color="#E5E5E5"> if you read</font><font color="#CCCCCC"> the</font>

567
00:24:14,290 --> 00:24:18,690
Wi-Fi standard<font color="#E5E5E5"> the official</font>

568
00:24:16,090 --> 00:24:22,179
specification<font color="#CCCCCC"> it says that message for</font>

569
00:24:18,690 --> 00:24:24,940
serves no real<font color="#E5E5E5"> security purposes</font>

570
00:24:22,180 --> 00:24:27,670
it says message<font color="#E5E5E5"> for is only there</font><font color="#CCCCCC"> to</font>

571
00:24:24,940 --> 00:24:29,050
ensure reliability in other words if you

572
00:24:27,670 --> 00:24:29,620
would drop<font color="#E5E5E5"> message for you would still</font>

573
00:24:29,050 --> 00:24:32,500
be<font color="#CCCCCC"> fine</font>

574
00:24:29,620 --> 00:24:34,600
however our tech clearly shows that<font color="#E5E5E5"> if</font>

575
00:24:32,500 --> 00:24:37,420
you<font color="#E5E5E5"> don't handle message for properly</font>

576
00:24:34,600 --> 00:24:39,429
you can downgrade the access point<font color="#CCCCCC"> so we</font>

577
00:24:37,420 --> 00:24:41,680
are essentially not only that we found

578
00:24:39,430 --> 00:24:44,020
an implementation flaw<font color="#CCCCCC"> this</font><font color="#E5E5E5"> also</font>

579
00:24:41,680 --> 00:24:49,990
uncovered an incorrect claim in the

580
00:24:44,020 --> 00:24:53,440
Wi-Fi specification so now to the more

581
00:24:49,990 --> 00:24:57,150
<font color="#CCCCCC">interesting parts of our examples we're</font>

582
00:24:53,440 --> 00:24:59,140
going we have also tested<font color="#E5E5E5"> the OpenBSD</font>

583
00:24:57,150 --> 00:25:03,270
implementation of the Wi-Fi handshake

584
00:24:59,140 --> 00:25:06,010
and here we<font color="#E5E5E5"> found several issues as well</font>

585
00:25:03,270 --> 00:25:08,050
found in the<font color="#E5E5E5"> first issue we are able to</font>

586
00:25:06,010 --> 00:25:11,230
perform<font color="#E5E5E5"> a denial of service</font><font color="#CCCCCC"> attack</font>

587
00:25:08,050 --> 00:25:13,600
against the access point<font color="#E5E5E5"> and this is</font>

588
00:25:11,230 --> 00:25:17,350
based on two vulnerabilities and the

589
00:25:13,600 --> 00:25:20,830
implementation of<font color="#CCCCCC"> open BSD</font><font color="#E5E5E5"> the first</font>

590
00:25:17,350 --> 00:25:24,219
phone<font color="#CCCCCC"> gulnur ability is</font><font color="#E5E5E5"> that open</font><font color="#CCCCCC"> BSD</font>

591
00:25:20,830 --> 00:25:26,949
<font color="#E5E5E5">never stops the</font><font color="#CCCCCC"> tkip countermeasures</font><font color="#E5E5E5"> now</font>

592
00:25:24,220 --> 00:25:30,520
what are these<font color="#CCCCCC"> two</font><font color="#E5E5E5"> countermeasures so</font>

593
00:25:26,950 --> 00:25:33,550
like I<font color="#CCCCCC"> mentioned WPA tkip is</font><font color="#E5E5E5"> not that</font>

594
00:25:30,520 --> 00:25:37,030
secure<font color="#E5E5E5"> and in particular if you can</font>

595
00:25:33,550 --> 00:25:40,210
obtain a<font color="#CCCCCC"> decrypt at WPA tick packet</font><font color="#E5E5E5"> you</font>

596
00:25:37,030 --> 00:25:42,970
could derive<font color="#E5E5E5"> the</font><font color="#CCCCCC"> micki onto the</font>

597
00:25:40,210 --> 00:25:45,580
designers of WPA I realize this they

598
00:25:42,970 --> 00:25:48,550
realized hey the protocol<font color="#E5E5E5"> that we have</font>

599
00:25:45,580 --> 00:25:51,070
here is not<font color="#CCCCCC"> that secure on what they</font>

600
00:25:48,550 --> 00:25:53,740
<font color="#E5E5E5">decided to do is they decided to detect</font>

601
00:25:51,070 --> 00:25:56,260
active attacks against this protocol<font color="#E5E5E5"> and</font>

602
00:25:53,740 --> 00:25:59,500
if they<font color="#CCCCCC"> noticed</font><font color="#E5E5E5"> that an active attack is</font>

603
00:25:56,260 --> 00:26:03,129
<font color="#CCCCCC">going on it will the access point will</font>

604
00:25:59,500 --> 00:26:04,840
stop all traffic for<font color="#E5E5E5"> one minute so this</font>

605
00:26:03,130 --> 00:26:07,030
<font color="#E5E5E5">is of course very interesting</font><font color="#CCCCCC"> behavior</font>

606
00:26:04,840 --> 00:26:09,040
because the official specification says

607
00:26:07,030 --> 00:26:10,420
that if there's something strange going

608
00:26:09,040 --> 00:26:12,520
around going<font color="#E5E5E5"> on</font>

609
00:26:10,420 --> 00:26:15,250
you should halt all traffic<font color="#E5E5E5"> for one</font>

610
00:26:12,520 --> 00:26:17,290
minute<font color="#E5E5E5"> on another work we have shown</font>

611
00:26:15,250 --> 00:26:18,840
that<font color="#E5E5E5"> this connection</font><font color="#CCCCCC"> can actually be</font>

612
00:26:17,290 --> 00:26:23,760
<font color="#CCCCCC">triggers by</font>

613
00:26:18,840 --> 00:26:27,120
<font color="#CCCCCC">a third party</font><font color="#E5E5E5"> attacker so this on on its</font>

614
00:26:23,760 --> 00:26:29,970
own it's already<font color="#CCCCCC"> basically a well a flaw</font>

615
00:26:27,120 --> 00:26:32,159
in<font color="#E5E5E5"> the standard but for</font><font color="#CCCCCC"> OpenBSD this</font>

616
00:26:29,970 --> 00:26:33,900
flaw is much worse<font color="#E5E5E5"> because it doesn't</font>

617
00:26:32,160 --> 00:26:39,900
<font color="#CCCCCC">just stop the traffic for</font><font color="#E5E5E5"> one minute it</font>

618
00:26:33,900 --> 00:26:42,030
stops the traffic forever<font color="#E5E5E5"> so all that we</font>

619
00:26:39,900 --> 00:26:45,330
need to do now is we need<font color="#E5E5E5"> to find a way</font>

620
00:26:42,030 --> 00:26:50,700
to trigger these make failures<font color="#CCCCCC"> so these</font>

621
00:26:45,330 --> 00:26:53,159
make failures happen<font color="#E5E5E5"> when for example</font>

622
00:26:50,700 --> 00:26:55,350
<font color="#E5E5E5">the client receives a</font><font color="#CCCCCC"> WP a ticket</font>

623
00:26:53,160 --> 00:26:58,080
message where the message integrity code

624
00:26:55,350 --> 00:26:59,730
is invalid<font color="#CCCCCC"> and if that happens the</font>

625
00:26:58,080 --> 00:27:01,889
client will send a<font color="#CCCCCC"> so called make</font>

626
00:26:59,730 --> 00:27:04,170
failure report<font color="#E5E5E5"> towards the access point</font>

627
00:27:01,890 --> 00:27:05,730
to inform the access point<font color="#CCCCCC"> hey I got a</font>

628
00:27:04,170 --> 00:27:08,250
strange corrupted message here

629
00:27:05,730 --> 00:27:09,950
maybe I'm under<font color="#CCCCCC"> attack</font><font color="#E5E5E5"> and if the access</font>

630
00:27:08,250 --> 00:27:12,900
point receives two of these<font color="#CCCCCC"> messages</font>

631
00:27:09,950 --> 00:27:16,730
<font color="#E5E5E5">then it must stop all traffic on encase</font>

632
00:27:12,900 --> 00:27:19,350
for<font color="#CCCCCC"> OpenBSD I will stop it forever</font><font color="#E5E5E5"> um</font>

633
00:27:16,730 --> 00:27:22,860
here the<font color="#E5E5E5"> second for</font><font color="#CCCCCC"> nobility</font><font color="#E5E5E5"> comes into</font>

634
00:27:19,350 --> 00:27:26,010
play namely the implementation of<font color="#CCCCCC"> open</font>

635
00:27:22,860 --> 00:27:28,860
<font color="#CCCCCC">BSD</font><font color="#E5E5E5"> accepts these make failure reports</font>

636
00:27:26,010 --> 00:27:32,040
<font color="#E5E5E5">even before the 4 Way handshake has been</font>

637
00:27:28,860 --> 00:27:34,649
executed<font color="#CCCCCC"> in particular even before</font><font color="#E5E5E5"> these</font>

638
00:27:32,040 --> 00:27:36,540
fresh session<font color="#E5E5E5"> keys have been negotiated</font>

639
00:27:34,650 --> 00:27:38,660
<font color="#E5E5E5">and we can</font><font color="#CCCCCC"> combine these</font><font color="#E5E5E5"> two</font>

640
00:27:36,540 --> 00:27:42,000
<font color="#E5E5E5">vulnerabilities and an unauthenticated</font>

641
00:27:38,660 --> 00:27:44,610
<font color="#E5E5E5">terminal denial of service attack so how</font>

642
00:27:42,000 --> 00:27:47,010
does that attack work well we have our

643
00:27:44,610 --> 00:27:48,929
<font color="#E5E5E5">first stage of the</font><font color="#CCCCCC"> tech where everything</font>

644
00:27:47,010 --> 00:27:51,410
happens<font color="#CCCCCC"> normally so we have our attacker</font>

645
00:27:48,930 --> 00:27:55,290
here which acts as a client<font color="#E5E5E5"> we have the</font>

646
00:27:51,410 --> 00:27:57,030
access point of<font color="#E5E5E5"> open BSD the client</font>

647
00:27:55,290 --> 00:27:59,190
simply<font color="#E5E5E5"> search</font><font color="#CCCCCC"> for the network</font><font color="#E5E5E5"> it sends</font>

648
00:27:57,030 --> 00:28:01,830
an association request saying hey I<font color="#E5E5E5"> want</font>

649
00:27:59,190 --> 00:28:04,320
to connect to the<font color="#CCCCCC"> network and then the</font>

650
00:28:01,830 --> 00:28:08,610
access point will send message one<font color="#E5E5E5"> of</font>

651
00:28:04,320 --> 00:28:10,350
<font color="#E5E5E5">the four way handshake but normally the</font>

652
00:28:08,610 --> 00:28:12,270
client<font color="#E5E5E5"> would now send message to of the</font>

653
00:28:10,350 --> 00:28:14,189
<font color="#E5E5E5">handshake however when we were going to</font>

654
00:28:12,270 --> 00:28:17,850
execute<font color="#E5E5E5"> our attack we're going to send</font>

655
00:28:14,190 --> 00:28:20,370
this make failure report on this<font color="#CCCCCC"> mick</font>

656
00:28:17,850 --> 00:28:23,699
failure report<font color="#CCCCCC"> is also</font><font color="#E5E5E5"> authenticated</font>

657
00:28:20,370 --> 00:28:25,379
using<font color="#CCCCCC"> a Mac value however</font><font color="#E5E5E5"> the key that</font>

658
00:28:23,700 --> 00:28:27,930
<font color="#E5E5E5">we're going to use here is</font><font color="#CCCCCC"> just an</font>

659
00:28:25,380 --> 00:28:30,480
all-zero<font color="#CCCCCC"> key</font><font color="#E5E5E5"> so an array of all zeros</font><font color="#CCCCCC"> on</font>

660
00:28:27,930 --> 00:28:32,340
why are we<font color="#E5E5E5"> going to use that well</font>

661
00:28:30,480 --> 00:28:34,799
because the access point

662
00:28:32,340 --> 00:28:36,570
generated the session key yet because it

663
00:28:34,799 --> 00:28:38,580
hasn't received<font color="#E5E5E5"> the real message</font><font color="#CCCCCC"> - of</font>

664
00:28:36,570 --> 00:28:40,740
the handshake<font color="#E5E5E5"> meaning currently</font><font color="#CCCCCC"> at</font>

665
00:28:38,580 --> 00:28:43,918
session key is<font color="#E5E5E5"> memory and memory is</font><font color="#CCCCCC"> just</font>

666
00:28:40,740 --> 00:28:46,110
an<font color="#E5E5E5"> array of all zeros so of course we</font>

667
00:28:43,919 --> 00:28:50,909
<font color="#E5E5E5">can then</font><font color="#CCCCCC"> forge this message it will</font><font color="#E5E5E5"> be</font>

668
00:28:46,110 --> 00:28:52,918
accepted by the access points<font color="#E5E5E5"> on the</font>

669
00:28:50,909 --> 00:28:54,630
<font color="#E5E5E5">freedom</font><font color="#CCCCCC"> send that</font><font color="#E5E5E5"> message again the</font>

670
00:28:52,919 --> 00:28:57,080
access point will have received<font color="#E5E5E5"> to make</font>

671
00:28:54,630 --> 00:29:00,059
failure reports and it will start<font color="#CCCCCC"> the</font>

672
00:28:57,080 --> 00:29:04,080
<font color="#E5E5E5">countermeasures</font><font color="#CCCCCC"> and in case of OpenBSD</font>

673
00:29:00,059 --> 00:29:05,639
these<font color="#E5E5E5"> countermeasures last forever the</font>

674
00:29:04,080 --> 00:29:08,129
<font color="#CCCCCC">only way to stop it is to reboot the</font>

675
00:29:05,640 --> 00:29:11,909
access point<font color="#CCCCCC"> so</font><font color="#E5E5E5"> to be clear this</font><font color="#CCCCCC"> has</font>

676
00:29:08,130 --> 00:29:15,360
<font color="#E5E5E5">already</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> patched by</font><font color="#CCCCCC"> OpenBSD</font><font color="#E5E5E5"> I'm now</font>

677
00:29:11,909 --> 00:29:18,270
going to try to give a demo of<font color="#E5E5E5"> this</font>

678
00:29:15,360 --> 00:29:25,709
attack so let's hope you can first<font color="#E5E5E5"> get</font>

679
00:29:18,270 --> 00:29:28,950
<font color="#CCCCCC">the screen online so we had some trouble</font>

680
00:29:25,710 --> 00:29:31,250
with<font color="#E5E5E5"> this I hope they can now show my</font>

681
00:29:28,950 --> 00:29:31,250
screen

682
00:29:43,809 --> 00:29:47,340
let's give them a<font color="#CCCCCC"> minute</font>

683
00:30:01,560 --> 00:30:07,720
<font color="#E5E5E5">okay does this not seem to work</font><font color="#CCCCCC"> so I</font>

684
00:30:05,740 --> 00:30:10,240
will<font color="#E5E5E5"> try</font><font color="#CCCCCC"> again at the end of the</font>

685
00:30:07,720 --> 00:30:12,160
presentation and try to use some

686
00:30:10,240 --> 00:30:22,210
<font color="#E5E5E5">different settings</font><font color="#CCCCCC"> for now let's just</font>

687
00:30:12,160 --> 00:30:25,090
<font color="#E5E5E5">continue with presentation okay</font><font color="#CCCCCC"> so you</font>

688
00:30:22,210 --> 00:30:27,520
can download the proof concept<font color="#CCCCCC"> code</font>

689
00:30:25,090 --> 00:30:30,879
online<font color="#E5E5E5"> and I will also put a video of</font>

690
00:30:27,520 --> 00:30:33,250
this online<font color="#E5E5E5"> as well okay so let's</font>

691
00:30:30,880 --> 00:30:35,500
continue<font color="#E5E5E5"> with the second attack on this</font>

692
00:30:33,250 --> 00:30:38,230
<font color="#E5E5E5">attack in my opinion is</font><font color="#CCCCCC"> really the most</font>

693
00:30:35,500 --> 00:30:40,150
interesting<font color="#CCCCCC"> one namely we found a</font>

694
00:30:38,230 --> 00:30:43,120
<font color="#E5E5E5">man-in-the-middle attack against an open</font>

695
00:30:40,150 --> 00:30:47,620
BSD client so after observing this issue

696
00:30:43,120 --> 00:30:50,260
in the open BSD access point we

697
00:30:47,620 --> 00:30:53,489
inspected<font color="#E5E5E5"> the source code</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> found</font>

698
00:30:50,260 --> 00:30:55,870
that the client has a much worse issue

699
00:30:53,490 --> 00:30:58,810
namely it's simply missing this complete

700
00:30:55,870 --> 00:31:02,020
state machine of the protocol<font color="#E5E5E5"> so what do</font>

701
00:30:58,810 --> 00:31:05,110
I<font color="#CCCCCC"> mean</font><font color="#E5E5E5"> with this what I mean is</font><font color="#CCCCCC"> that the</font>

702
00:31:02,020 --> 00:31:08,440
client will process<font color="#E5E5E5"> any message you send</font>

703
00:31:05,110 --> 00:31:09,909
to it<font color="#E5E5E5"> even though it's not even</font><font color="#CCCCCC"> though</font>

704
00:31:08,440 --> 00:31:12,490
it shouldn't<font color="#E5E5E5"> be accepting this message</font>

705
00:31:09,910 --> 00:31:13,900
<font color="#E5E5E5">so for example if you</font><font color="#CCCCCC"> just send any</font>

706
00:31:12,490 --> 00:31:16,360
message in<font color="#E5E5E5"> the handshake</font><font color="#CCCCCC"> that will</font>

707
00:31:13,900 --> 00:31:20,260
handle<font color="#CCCCCC"> it now</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> surprising</font>

708
00:31:16,360 --> 00:31:23,260
because<font color="#CCCCCC"> the code of open BSD</font><font color="#E5E5E5"> is actually</font>

709
00:31:20,260 --> 00:31:25,360
of high<font color="#E5E5E5"> quality it doesn't have any</font>

710
00:31:23,260 --> 00:31:27,580
buffer overflows it doesn't have any

711
00:31:25,360 --> 00:31:30,370
double<font color="#E5E5E5"> freeze a listen the Wi-Fi code to</font>

712
00:31:27,580 --> 00:31:32,260
<font color="#CCCCCC">that I looked it's well</font><font color="#E5E5E5"> written</font><font color="#CCCCCC"> however</font>

713
00:31:30,370 --> 00:31:35,560
the state machine is missing so even

714
00:31:32,260 --> 00:31:37,629
though your code is very good this still

715
00:31:35,560 --> 00:31:39,159
voids<font color="#E5E5E5"> and throws away</font><font color="#CCCCCC"> all security that</font>

716
00:31:37,630 --> 00:31:42,340
the Wi-Fi handshake is supposed<font color="#E5E5E5"> to</font>

717
00:31:39,160 --> 00:31:46,750
provide so how does this man in the

718
00:31:42,340 --> 00:31:49,090
<font color="#E5E5E5">middle attack work we again have our</font>

719
00:31:46,750 --> 00:31:50,950
client here and now we are targeting the

720
00:31:49,090 --> 00:31:53,590
client so it's the<font color="#CCCCCC"> OpenBSD</font><font color="#E5E5E5"> client that</font>

721
00:31:50,950 --> 00:31:58,150
<font color="#E5E5E5">we are targeting</font><font color="#CCCCCC"> and we are setting up a</font>

722
00:31:53,590 --> 00:32:00,250
rogue access point the<font color="#E5E5E5"> idea here is</font><font color="#CCCCCC"> that</font>

723
00:31:58,150 --> 00:32:02,470
this rogue access point just advertises

724
00:32:00,250 --> 00:32:04,630
it basically clones the real network

725
00:32:02,470 --> 00:32:06,850
that we want<font color="#E5E5E5"> to connect we want to</font>

726
00:32:04,630 --> 00:32:08,620
attack the client will then connect<font color="#CCCCCC"> to</font>

727
00:32:06,850 --> 00:32:11,050
our rogue access points<font color="#CCCCCC"> it</font><font color="#E5E5E5"> will send an</font>

728
00:32:08,620 --> 00:32:13,000
association request informing our rogue

729
00:32:11,050 --> 00:32:15,010
access point<font color="#CCCCCC"> hey I want to</font><font color="#E5E5E5"> connect</font><font color="#CCCCCC"> cyma</font>

730
00:32:13,000 --> 00:32:16,990
<font color="#E5E5E5">clients on</font>

731
00:32:15,010 --> 00:32:19,510
normally a real access point would now

732
00:32:16,990 --> 00:32:21,520
start<font color="#CCCCCC"> the four-way handshake but what</font>

733
00:32:19,510 --> 00:32:23,790
we're going<font color="#CCCCCC"> to do is we're</font><font color="#E5E5E5"> going to send</font>

734
00:32:21,520 --> 00:32:26,139
message one of<font color="#CCCCCC"> the group key handshake</font>

735
00:32:23,790 --> 00:32:27,730
<font color="#E5E5E5">so what's the group key handshake</font><font color="#CCCCCC"> the</font>

736
00:32:26,140 --> 00:32:30,160
group key handshake<font color="#E5E5E5"> is in a sense</font>

737
00:32:27,730 --> 00:32:31,780
<font color="#CCCCCC">similar to the four-way handshake except</font>

738
00:32:30,160 --> 00:32:33,580
that<font color="#E5E5E5"> it's used to transport the group</font>

739
00:32:31,780 --> 00:32:36,639
key which is used<font color="#CCCCCC"> to encrypt broadcast</font>

740
00:32:33,580 --> 00:32:38,770
on multicast traffic so the<font color="#CCCCCC"> interesting</font>

741
00:32:36,640 --> 00:32:41,890
part here<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> very similar</font>

742
00:32:38,770 --> 00:32:45,550
vulnerability to<font color="#E5E5E5"> the previous case where</font>

743
00:32:41,890 --> 00:32:47,980
because the client hasn't generated<font color="#CCCCCC"> the</font>

744
00:32:45,550 --> 00:32:49,600
session key yet<font color="#E5E5E5"> it will use again an</font>

745
00:32:47,980 --> 00:32:52,240
<font color="#E5E5E5">all-zero key to verify the authenticity</font>

746
00:32:49,600 --> 00:32:54,189
of this frame<font color="#CCCCCC"> so as an attacker we can</font>

747
00:32:52,240 --> 00:32:56,830
easily<font color="#CCCCCC"> Forge this group message one</font>

748
00:32:54,190 --> 00:33:00,760
frame on the open<font color="#CCCCCC"> bl2 OpenBSD client</font>

749
00:32:56,830 --> 00:33:03,730
will accept it once it accepted this

750
00:33:00,760 --> 00:33:06,760
message it will<font color="#CCCCCC"> reply using</font><font color="#E5E5E5"> message two</font>

751
00:33:03,730 --> 00:33:08,770
of the group key and an interesting side

752
00:33:06,760 --> 00:33:10,990
effect of<font color="#E5E5E5"> sending group message one is</font>

753
00:33:08,770 --> 00:33:13,210
that it will also<font color="#CCCCCC"> open</font><font color="#E5E5E5"> the data port</font>

754
00:33:10,990 --> 00:33:15,520
essentially so at<font color="#E5E5E5"> this point the client</font>

755
00:33:13,210 --> 00:33:20,230
<font color="#E5E5E5">will accept normal data traffic and it</font>

756
00:33:15,520 --> 00:33:25,180
will<font color="#CCCCCC"> also send normal data</font><font color="#E5E5E5"> traffic now</font>

757
00:33:20,230 --> 00:33:29,230
it's also quite bad<font color="#E5E5E5"> about this situation</font>

758
00:33:25,180 --> 00:33:31,330
<font color="#E5E5E5">is that not only are we now able to man</font>

759
00:33:29,230 --> 00:33:34,270
in the middle<font color="#CCCCCC"> of this Wi-Fi client</font>

760
00:33:31,330 --> 00:33:36,580
because just just to recap normally the

761
00:33:34,270 --> 00:33:39,550
client<font color="#E5E5E5"> also verifies the authenticity of</font>

762
00:33:36,580 --> 00:33:41,020
the access point<font color="#CCCCCC"> but in this case it</font>

763
00:33:39,550 --> 00:33:42,520
<font color="#E5E5E5">doesn't the attacker doesn't need to</font>

764
00:33:41,020 --> 00:33:45,129
<font color="#CCCCCC">know</font><font color="#E5E5E5"> the password yet still the client</font>

765
00:33:42,520 --> 00:33:46,810
will successfully connect with what goes

766
00:33:45,130 --> 00:33:48,670
wrong here not<font color="#E5E5E5"> only does it accept data</font>

767
00:33:46,810 --> 00:33:51,100
<font color="#E5E5E5">frames it never installed the key</font>

768
00:33:48,670 --> 00:33:55,620
meaning it accepts<font color="#CCCCCC"> plaintext data</font><font color="#E5E5E5"> frames</font>

769
00:33:51,100 --> 00:33:55,620
<font color="#E5E5E5">and it also</font><font color="#CCCCCC"> sends plaintext data frames</font>

770
00:33:56,520 --> 00:34:04,810
so at this point<font color="#E5E5E5"> yeah your security of</font>

771
00:34:01,080 --> 00:34:08,139
the Wi-Fi is broken again<font color="#CCCCCC"> there is a</font>

772
00:34:04,810 --> 00:34:09,730
demo<font color="#CCCCCC"> of this online</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I hope</font><font color="#E5E5E5"> that at</font>

773
00:34:08,139 --> 00:34:12,100
the<font color="#CCCCCC"> end of the presentation maybe the</font>

774
00:34:09,730 --> 00:34:15,699
demos will work and then<font color="#CCCCCC"> I can try to do</font>

775
00:34:12,100 --> 00:34:18,549
a live<font color="#CCCCCC"> demo</font><font color="#E5E5E5"> otherwise unfortunately that</font>

776
00:34:15,699 --> 00:34:21,638
won't<font color="#E5E5E5"> be the case so as I mentioned I</font>

777
00:34:18,550 --> 00:34:23,500
only<font color="#E5E5E5"> discussed the most interesting</font>

778
00:34:21,639 --> 00:34:25,120
vulnerabilities that<font color="#CCCCCC"> I found we also</font>

779
00:34:23,500 --> 00:34:27,639
found some other ones<font color="#E5E5E5"> and you can see</font>

780
00:34:25,120 --> 00:34:28,480
them in<font color="#E5E5E5"> our</font><font color="#CCCCCC"> whitehead paper and also in</font>

781
00:34:27,639 --> 00:34:32,080
the academic

782
00:34:28,480 --> 00:34:34,469
<font color="#E5E5E5">that's preceded this research so we</font>

783
00:34:32,080 --> 00:34:37,060
found things like basically benign

784
00:34:34,469 --> 00:34:39,250
<font color="#E5E5E5">irregularities</font><font color="#CCCCCC"> where an implementation</font>

785
00:34:37,060 --> 00:34:41,440
deviates from the<font color="#E5E5E5"> specification but</font><font color="#CCCCCC"> no</font>

786
00:34:39,250 --> 00:34:42,969
this does<font color="#E5E5E5"> not result in an attack but</font>

787
00:34:41,440 --> 00:34:44,260
<font color="#CCCCCC">you can use this to fingerprint an</font>

788
00:34:42,969 --> 00:34:46,449
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> of course you can</font>

789
00:34:44,260 --> 00:34:48,970
determine is this<font color="#CCCCCC"> a</font><font color="#E5E5E5"> Cisco</font><font color="#CCCCCC"> access point</font>

790
00:34:46,449 --> 00:34:50,040
is<font color="#E5E5E5"> this</font><font color="#CCCCCC"> a Microsoft Access Point or</font>

791
00:34:48,969 --> 00:34:52,569
whatever

792
00:34:50,040 --> 00:34:55,600
we also found<font color="#CCCCCC"> other denial of service</font>

793
00:34:52,570 --> 00:34:57,550
attacks<font color="#E5E5E5"> so those whom to be quite common</font>

794
00:34:55,600 --> 00:35:00,009
<font color="#CCCCCC">for example a permanent denial of</font>

795
00:34:57,550 --> 00:35:04,930
service attack against<font color="#CCCCCC"> Broadcom</font><font color="#E5E5E5"> but you</font>

796
00:35:00,010 --> 00:35:07,030
do need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> the password</font><font color="#CCCCCC"> of the</font>

797
00:35:04,930 --> 00:35:08,500
<font color="#E5E5E5">network to carry out that</font><font color="#CCCCCC"> dinero service</font>

798
00:35:07,030 --> 00:35:12,310
attack so you<font color="#E5E5E5"> need to have an insider</font>

799
00:35:08,500 --> 00:35:14,920
threat<font color="#CCCCCC"> and against Windows 10 on</font><font color="#E5E5E5"> arrow -</font>

800
00:35:12,310 --> 00:35:17,230
we also<font color="#E5E5E5"> found</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> insider a denial</font>

801
00:35:14,920 --> 00:35:18,790
<font color="#E5E5E5">of service attack so these attacks are</font>

802
00:35:17,230 --> 00:35:22,150
for example problematic if you have a

803
00:35:18,790 --> 00:35:23,680
<font color="#CCCCCC">network like interim</font><font color="#E5E5E5"> or a network for</font>

804
00:35:22,150 --> 00:35:25,450
<font color="#CCCCCC">example here like blackheads</font><font color="#E5E5E5"> where</font>

805
00:35:23,680 --> 00:35:29,020
everyone knows the password<font color="#CCCCCC"> you could</font>

806
00:35:25,450 --> 00:35:31,629
<font color="#E5E5E5">take that</font><font color="#CCCCCC"> network down until also some</font>

807
00:35:29,020 --> 00:35:36,520
other issues that<font color="#E5E5E5"> we found that are</font><font color="#CCCCCC"> a</font>

808
00:35:31,630 --> 00:35:40,869
bit<font color="#E5E5E5"> less interesting so our approach is</font>

809
00:35:36,520 --> 00:35:42,730
still<font color="#E5E5E5"> quite limited in a sense because</font>

810
00:35:40,869 --> 00:35:44,410
<font color="#CCCCCC">our tactic testing technique is</font><font color="#E5E5E5"> quite</font>

811
00:35:42,730 --> 00:35:47,530
basic<font color="#E5E5E5"> in other words there are a few</font>

812
00:35:44,410 --> 00:35:51,009
improvements<font color="#CCCCCC"> that still can</font><font color="#E5E5E5"> be made to</font>

813
00:35:47,530 --> 00:35:52,900
<font color="#CCCCCC">our work for example we don't</font><font color="#E5E5E5"> know how</font>

814
00:35:51,010 --> 00:35:54,490
much code we<font color="#CCCCCC"> actually tested I mean we</font>

815
00:35:52,900 --> 00:35:56,650
are sending<font color="#E5E5E5"> these messages</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are</font>

816
00:35:54,490 --> 00:35:58,089
sending modified messages but we don't

817
00:35:56,650 --> 00:36:00,960
know how<font color="#E5E5E5"> much code actually</font><font color="#CCCCCC"> is being</font>

818
00:35:58,090 --> 00:36:03,550
covered<font color="#E5E5E5"> additionally we're only sending</font>

819
00:36:00,960 --> 00:36:06,520
<font color="#E5E5E5">well-formed messages on what I mean with</font>

820
00:36:03,550 --> 00:36:08,950
<font color="#CCCCCC">that is that messages are for example</font>

821
00:36:06,520 --> 00:36:11,109
never truncated they always have the

822
00:36:08,950 --> 00:36:15,250
fields they should have but those fields

823
00:36:11,109 --> 00:36:16,660
<font color="#CCCCCC">simply have n values values</font><font color="#E5E5E5"> another</font>

824
00:36:15,250 --> 00:36:19,869
thing is that<font color="#E5E5E5"> these test generation</font>

825
00:36:16,660 --> 00:36:21,759
rules were applied<font color="#CCCCCC"> independently</font><font color="#E5E5E5"> and we</font>

826
00:36:19,869 --> 00:36:25,210
mainly tested<font color="#E5E5E5"> access points we also</font>

827
00:36:21,760 --> 00:36:27,100
<font color="#E5E5E5">tested some clients if we thought that</font>

828
00:36:25,210 --> 00:36:28,540
they were interesting<font color="#CCCCCC"> to test as well</font>

829
00:36:27,100 --> 00:36:31,029
for example<font color="#E5E5E5"> we found it back in the</font>

830
00:36:28,540 --> 00:36:34,029
access point of limitation then we saw

831
00:36:31,030 --> 00:36:35,470
<font color="#E5E5E5">all this product also has</font><font color="#CCCCCC"> a client</font>

832
00:36:34,030 --> 00:36:39,270
implementation maybe it has a similar

833
00:36:35,470 --> 00:36:41,980
bug<font color="#E5E5E5"> but we mainly tested access points</font>

834
00:36:39,270 --> 00:36:43,540
now the reason why I think<font color="#E5E5E5"> that</font>

835
00:36:41,980 --> 00:36:46,420
this is a promising technique though<font color="#CCCCCC"> is</font>

836
00:36:43,540 --> 00:36:49,150
because the<font color="#E5E5E5"> current method is a black</font>

837
00:36:46,420 --> 00:36:50,950
<font color="#E5E5E5">box</font><font color="#CCCCCC"> testing methodology so you don't</font>

838
00:36:49,150 --> 00:36:52,840
need access<font color="#E5E5E5"> to the source code</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font>

839
00:36:50,950 --> 00:36:56,319
can test any<font color="#CCCCCC"> implementation that you</font>

840
00:36:52,840 --> 00:36:59,050
want<font color="#CCCCCC"> and another thing that is that</font><font color="#E5E5E5"> this</font>

841
00:36:56,320 --> 00:37:00,790
work shows is<font color="#E5E5E5"> that searching for logical</font>

842
00:36:59,050 --> 00:37:03,670
vulnerabilities<font color="#E5E5E5"> is quite important</font>

843
00:37:00,790 --> 00:37:05,590
<font color="#E5E5E5">because</font><font color="#CCCCCC"> like I mentioned the Wi-Fi</font>

844
00:37:03,670 --> 00:37:07,090
handshake is fairly simple<font color="#CCCCCC"> it still we</font>

845
00:37:05,590 --> 00:37:09,820
discovered quite<font color="#CCCCCC"> some issues</font><font color="#E5E5E5"> and that</font>

846
00:37:07,090 --> 00:37:12,850
<font color="#E5E5E5">was surprising</font><font color="#CCCCCC"> so that leads</font><font color="#E5E5E5"> me to the</font>

847
00:37:09,820 --> 00:37:14,590
<font color="#CCCCCC">conclusion of this</font><font color="#E5E5E5"> talk this Wi-Fi</font>

848
00:37:12,850 --> 00:37:17,950
implementations are less<font color="#E5E5E5"> secure</font><font color="#CCCCCC"> than</font>

849
00:37:14,590 --> 00:37:19,900
<font color="#E5E5E5">expected and I will believe that</font><font color="#CCCCCC"> if we</font>

850
00:37:17,950 --> 00:37:23,100
come up<font color="#E5E5E5"> with more advanced testing</font>

851
00:37:19,900 --> 00:37:25,660
<font color="#E5E5E5">techniques we will</font><font color="#CCCCCC"> uncover more issues</font>

852
00:37:23,100 --> 00:37:27,700
<font color="#E5E5E5">not only</font><font color="#CCCCCC"> in the Wi-Fi protocol but also</font>

853
00:37:25,660 --> 00:37:30,339
<font color="#CCCCCC">in</font><font color="#E5E5E5"> other protocols for example in</font>

854
00:37:27,700 --> 00:37:32,230
related work similar methods have been

855
00:37:30,340 --> 00:37:34,930
<font color="#E5E5E5">used against TLS and for example</font><font color="#CCCCCC"> open</font>

856
00:37:32,230 --> 00:37:38,470
<font color="#E5E5E5">SSL</font><font color="#CCCCCC"> and all the other libraries</font><font color="#E5E5E5"> and they</font>

857
00:37:34,930 --> 00:37:44,230
all found perks<font color="#CCCCCC"> which</font><font color="#E5E5E5"> sometimes leads to</font>

858
00:37:38,470 --> 00:37:48,399
exploitable vulnerabilities so that's

859
00:37:44,230 --> 00:37:50,080
that<font color="#E5E5E5"> point finally</font><font color="#CCCCCC"> I have a short</font>

860
00:37:48,400 --> 00:37:54,340
announcement<font color="#E5E5E5"> which is basically about</font>

861
00:37:50,080 --> 00:37:56,109
<font color="#E5E5E5">follow-up work of this work if you have</font>

862
00:37:54,340 --> 00:37:59,800
a product which uses a<font color="#CCCCCC"> client-side</font>

863
00:37:56,109 --> 00:38:02,230
implementation of WPA<font color="#CCCCCC"> 1 or 2 or another</font>

864
00:37:59,800 --> 00:38:04,060
Wi-Fi handshake you should talk to me

865
00:38:02,230 --> 00:38:08,859
<font color="#E5E5E5">because there's a good chance that it</font>

866
00:38:04,060 --> 00:38:13,380
contains some flaw so I'm going to try

867
00:38:08,859 --> 00:38:15,970
to do a demo<font color="#E5E5E5"> again maybe it works now</font>

868
00:38:13,380 --> 00:38:19,710
let me see if<font color="#CCCCCC"> I can change the</font><font color="#E5E5E5"> screen</font>

869
00:38:15,970 --> 00:38:19,709
resolution<font color="#E5E5E5"> if that helps</font>

870
00:38:25,300 --> 00:38:32,300
there we go excellent<font color="#E5E5E5"> so I'm going to</font>

871
00:38:29,600 --> 00:38:34,040
<font color="#E5E5E5">show the</font><font color="#CCCCCC"> men on the middle attack</font>

872
00:38:32,300 --> 00:38:36,860
against<font color="#CCCCCC"> OpenBSD because that's the</font><font color="#E5E5E5"> most</font>

873
00:38:34,040 --> 00:38:39,410
<font color="#CCCCCC">interesting one so let</font><font color="#E5E5E5"> me first check</font>

874
00:38:36,860 --> 00:38:43,190
that<font color="#CCCCCC"> my wireless</font><font color="#E5E5E5"> interfaces are still</font>

875
00:38:39,410 --> 00:38:45,640
working<font color="#E5E5E5"> that seems good let's go to the</font>

876
00:38:43,190 --> 00:38:45,640
other VM

877
00:38:54,230 --> 00:38:56,980
<font color="#E5E5E5">okay</font>

878
00:38:58,930 --> 00:39:04,850
<font color="#E5E5E5">okay so let's get started we have our</font>

879
00:39:02,780 --> 00:39:08,000
attacker<font color="#E5E5E5"> here which is represented by</font>

880
00:39:04,850 --> 00:39:09,618
this<font color="#CCCCCC"> Cali virtual image</font><font color="#E5E5E5"> and what we're</font>

881
00:39:08,000 --> 00:39:12,650
going<font color="#E5E5E5"> to do is we're going</font><font color="#CCCCCC"> to start up</font>

882
00:39:09,619 --> 00:39:14,780
<font color="#E5E5E5">the rogue access point so</font><font color="#CCCCCC"> you can see</font>

883
00:39:12,650 --> 00:39:18,170
the<font color="#CCCCCC"> configuration of</font><font color="#E5E5E5"> this access point</font>

884
00:39:14,780 --> 00:39:20,450
here<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> the SSID</font><font color="#E5E5E5"> is demo network</font>

885
00:39:18,170 --> 00:39:22,820
and by the way if you don't<font color="#E5E5E5"> want</font><font color="#CCCCCC"> your</font>

886
00:39:20,450 --> 00:39:25,279
MAC address to accidentally show up here

887
00:39:22,820 --> 00:39:28,190
<font color="#CCCCCC">in some of the debug</font><font color="#E5E5E5"> output</font><font color="#CCCCCC"> disable your</font>

888
00:39:25,280 --> 00:39:30,140
Wi-Fi so just to be clear<font color="#E5E5E5"> there might be</font>

889
00:39:28,190 --> 00:39:33,560
some information<font color="#E5E5E5"> otherwise on this</font>

890
00:39:30,140 --> 00:39:35,089
presentation<font color="#E5E5E5"> so disable it now anyway</font>

891
00:39:33,560 --> 00:39:37,220
the network that<font color="#E5E5E5"> we are going</font><font color="#CCCCCC"> to clone</font>

892
00:39:35,090 --> 00:39:38,690
is called demo<font color="#E5E5E5"> network and as you can</font>

893
00:39:37,220 --> 00:39:41,359
<font color="#CCCCCC">see the attacker does not know the</font>

894
00:39:38,690 --> 00:39:45,020
<font color="#CCCCCC">password of</font><font color="#E5E5E5"> this network</font><font color="#CCCCCC"> so let's start</font>

895
00:39:41,359 --> 00:39:46,970
this<font color="#E5E5E5"> access</font><font color="#CCCCCC"> point and</font><font color="#E5E5E5"> I am currently</font>

896
00:39:45,020 --> 00:39:51,040
using<font color="#E5E5E5"> a modified version of the Linux</font>

897
00:39:46,970 --> 00:39:51,040
<font color="#E5E5E5">access points to carry out my attacks</font>

898
00:39:52,600 --> 00:39:58,279
<font color="#E5E5E5">okay so that access point has started</font>

899
00:39:55,359 --> 00:40:00,710
let's<font color="#E5E5E5"> now try to connect using here the</font>

900
00:39:58,280 --> 00:40:06,410
<font color="#E5E5E5">OpenBSD client so this is running an</font>

901
00:40:00,710 --> 00:40:11,390
unpatched version of<font color="#E5E5E5"> open BSD</font><font color="#CCCCCC"> and we are</font>

902
00:40:06,410 --> 00:40:14,060
<font color="#E5E5E5">going to connect to the SSID demo</font>

903
00:40:11,390 --> 00:40:18,670
<font color="#CCCCCC">network and the client is</font><font color="#E5E5E5"> going to use</font>

904
00:40:14,060 --> 00:40:21,790
the passwords<font color="#E5E5E5"> such secret</font><font color="#CCCCCC"> wow</font><font color="#E5E5E5"> and</font>

905
00:40:18,670 --> 00:40:24,020
normally the client should not

906
00:40:21,790 --> 00:40:26,779
successfully connect to the access<font color="#CCCCCC"> point</font>

907
00:40:24,020 --> 00:40:32,060
<font color="#E5E5E5">because these passwords passwords are</font>

908
00:40:26,780 --> 00:40:37,609
different<font color="#E5E5E5"> but let's see what works we</font>

909
00:40:32,060 --> 00:40:40,009
<font color="#E5E5E5">don't need that so the client is now</font>

910
00:40:37,609 --> 00:40:43,369
normally searching for<font color="#E5E5E5"> network it's</font>

911
00:40:40,010 --> 00:40:46,280
sending prop<font color="#E5E5E5"> requests and it has</font>

912
00:40:43,369 --> 00:40:48,380
connected<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you can see here our open</font>

913
00:40:46,280 --> 00:40:50,510
<font color="#CCCCCC">BSD</font><font color="#E5E5E5"> client</font><font color="#CCCCCC"> has sent the association</font>

914
00:40:48,380 --> 00:40:52,760
request<font color="#CCCCCC"> and normally it should</font><font color="#E5E5E5"> now</font>

915
00:40:50,510 --> 00:40:55,310
<font color="#E5E5E5">accept message one on the four way</font>

916
00:40:52,760 --> 00:40:57,320
handshake however it receives message

917
00:40:55,310 --> 00:40:59,570
two of the group key handshake<font color="#CCCCCC"> and it</font>

918
00:40:57,320 --> 00:41:01,340
will happily accept<font color="#CCCCCC"> it</font><font color="#E5E5E5"> on send message</font>

919
00:40:59,570 --> 00:41:03,470
<font color="#CCCCCC">to of the</font><font color="#E5E5E5"> group key handshake so first</font>

920
00:41:01,340 --> 00:41:06,109
receives message<font color="#E5E5E5"> one</font><font color="#CCCCCC"> on a replies using</font>

921
00:41:03,470 --> 00:41:10,640
message<font color="#CCCCCC"> to on here we can also see this</font>

922
00:41:06,109 --> 00:41:12,130
at the attacker screen<font color="#E5E5E5"> some other people</font>

923
00:41:10,640 --> 00:41:14,790
are<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to connect</font>

924
00:41:12,130 --> 00:41:17,320
maybe I should<font color="#CCCCCC"> show some MAC addresses</font>

925
00:41:14,790 --> 00:41:19,540
<font color="#E5E5E5">anyway we can see here that the client</font>

926
00:41:17,320 --> 00:41:21,670
is<font color="#CCCCCC"> trying to connect the access point is</font>

927
00:41:19,540 --> 00:41:23,890
skipping the<font color="#CCCCCC"> four-way handshake</font><font color="#E5E5E5"> it's not</font>

928
00:41:21,670 --> 00:41:28,240
installing<font color="#E5E5E5"> the pair way pairwise keys</font>

929
00:41:23,890 --> 00:41:30,129
and then it's since then it receives

930
00:41:28,240 --> 00:41:33,160
message<font color="#E5E5E5"> two of the group key handshake</font>

931
00:41:30,130 --> 00:41:34,690
meaning<font color="#E5E5E5"> that the attack worked so by the</font>

932
00:41:33,160 --> 00:41:36,250
way whoever<font color="#E5E5E5"> is trying to connect it</font>

933
00:41:34,690 --> 00:41:40,450
won't work because this<font color="#E5E5E5"> is a modified</font>

934
00:41:36,250 --> 00:41:43,000
access point<font color="#CCCCCC"> so let's confirm that we</font>

935
00:41:40,450 --> 00:41:54,970
<font color="#CCCCCC">are able</font><font color="#E5E5E5"> to now intercept traffic right</font>

936
00:41:43,000 --> 00:41:57,250
so let's start Wireshark here<font color="#E5E5E5"> let's</font>

937
00:41:54,970 --> 00:41:59,200
actually enable monitor mode<font color="#E5E5E5"> so we don't</font>

938
00:41:57,250 --> 00:42:15,270
just<font color="#E5E5E5"> see</font><font color="#CCCCCC"> Internet traffic but</font><font color="#E5E5E5"> we see the</font>

939
00:41:59,200 --> 00:42:15,270
full Wi-Fi traffic<font color="#E5E5E5"> okay</font>

940
00:42:17,180 --> 00:42:28,910
let's<font color="#E5E5E5"> filter for traffic from our device</font>

941
00:42:20,680 --> 00:42:31,520
<font color="#E5E5E5">let's now try to go to a website so</font>

942
00:42:28,910 --> 00:42:33,879
let's<font color="#E5E5E5"> go for example</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> CNN CNN still</font>

943
00:42:31,520 --> 00:42:36,740
uses an unencrypted<font color="#CCCCCC"> website even</font><font color="#E5E5E5"> today</font>

944
00:42:33,880 --> 00:42:38,900
this<font color="#E5E5E5"> is a cached version from online</font><font color="#CCCCCC"> so</font>

945
00:42:36,740 --> 00:42:42,828
we can see the clients as connected now

946
00:42:38,900 --> 00:42:46,160
if you then<font color="#CCCCCC"> go to the attacker we can</font>

947
00:42:42,829 --> 00:42:48,710
see here an HTTP GET<font color="#E5E5E5"> request and this is</font>

948
00:42:46,160 --> 00:42:50,808
indeed the<font color="#E5E5E5"> one it is</font><font color="#CCCCCC"> - cnn.com and we</font>

949
00:42:48,710 --> 00:42:52,880
can for example see the cookies<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are</font>

950
00:42:50,809 --> 00:42:56,799
transmitted meaning<font color="#E5E5E5"> our attack indeed</font>

951
00:42:52,880 --> 00:43:00,589
was successful<font color="#CCCCCC"> so like I mentioned</font>

952
00:42:56,799 --> 00:43:04,339
<font color="#CCCCCC">OpenBSD hasn't installed</font><font color="#E5E5E5"> hasn't</font>

953
00:43:00,589 --> 00:43:06,619
installed<font color="#CCCCCC"> a session key yet meaning it</font>

954
00:43:04,339 --> 00:43:09,529
sends unencrypted Wi-Fi traffic<font color="#E5E5E5"> and we</font>

955
00:43:06,619 --> 00:43:11,809
can confirm<font color="#CCCCCC"> that here this frame is not</font>

956
00:43:09,529 --> 00:43:14,299
using any encryption<font color="#E5E5E5"> at all</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> even you</font>

957
00:43:11,809 --> 00:43:15,920
<font color="#E5E5E5">guys could see this request</font><font color="#CCCCCC"> even if you</font>

958
00:43:14,299 --> 00:43:18,680
are not<font color="#E5E5E5"> an attacker you can still see</font>

959
00:43:15,920 --> 00:43:21,859
all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> plaintext</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> on area</font><font color="#E5E5E5"> we can</font>

960
00:43:18,680 --> 00:43:24,910
confirm the protected flag is not set<font color="#CCCCCC"> so</font>

961
00:43:21,859 --> 00:43:24,910
<font color="#CCCCCC">that concludes</font><font color="#E5E5E5"> the demo</font>

962
00:43:28,540 --> 00:43:36,610
[Applause]

