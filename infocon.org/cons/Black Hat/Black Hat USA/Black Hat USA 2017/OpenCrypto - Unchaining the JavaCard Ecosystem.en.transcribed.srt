1
00:00:00,030 --> 00:00:04,950
so today we're<font color="#E5E5E5"> releasing the open crypto</font>

2
00:00:02,340 --> 00:00:06,810
project which<font color="#E5E5E5"> basically aims to enable</font>

3
00:00:04,950 --> 00:00:08,280
<font color="#E5E5E5">Java</font><font color="#CCCCCC"> card developers and smart</font><font color="#E5E5E5"> card</font>

4
00:00:06,810 --> 00:00:12,360
developers to use<font color="#CCCCCC"> a full part</font><font color="#E5E5E5"> of the</font>

5
00:00:08,280 --> 00:00:14,340
card<font color="#CCCCCC"> so my presentation at first I will</font>

6
00:00:12,360 --> 00:00:15,750
<font color="#CCCCCC">introduce briefly</font><font color="#E5E5E5"> smart cards in Java</font>

7
00:00:14,340 --> 00:00:18,150
cards<font color="#E5E5E5"> what these are so if you're not</font>

8
00:00:15,750 --> 00:00:19,560
<font color="#E5E5E5">experts in smart cards it doesn't matter</font>

9
00:00:18,150 --> 00:00:22,109
you will<font color="#E5E5E5"> be able to follow everything</font>

10
00:00:19,560 --> 00:00:24,750
<font color="#E5E5E5">then we'll explain what's a problem with</font>

11
00:00:22,109 --> 00:00:27,390
those<font color="#E5E5E5"> ecosystems and our proposed</font>

12
00:00:24,750 --> 00:00:28,859
solution<font color="#CCCCCC"> and then we release certain</font>

13
00:00:27,390 --> 00:00:30,869
<font color="#CCCCCC">tools that you can start</font><font color="#E5E5E5"> using from now</font>

14
00:00:28,859 --> 00:00:33,300
<font color="#E5E5E5">on we released this morning basically</font>

15
00:00:30,869 --> 00:00:34,850
<font color="#CCCCCC">and then we'll discuss</font><font color="#E5E5E5"> future work if</font>

16
00:00:33,300 --> 00:00:38,040
you want to get involved as well

17
00:00:34,850 --> 00:00:40,469
so to begin with<font color="#E5E5E5"> smart cards why smart</font>

18
00:00:38,040 --> 00:00:43,920
cards with mean<font color="#E5E5E5"> pocket-sized card with</font>

19
00:00:40,469 --> 00:00:46,469
features<font color="#CCCCCC"> and embedded</font><font color="#E5E5E5"> integrated circuit</font>

20
00:00:43,920 --> 00:00:48,660
usually smart<font color="#E5E5E5"> cards they</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> CPU and</font>

21
00:00:46,469 --> 00:00:51,480
a cryptographic<font color="#E5E5E5"> a processor which is</font>

22
00:00:48,660 --> 00:00:53,760
aimed to do specific operations very

23
00:00:51,480 --> 00:00:56,669
fast<font color="#E5E5E5"> the CPU can do any operation but</font>

24
00:00:53,760 --> 00:00:58,230
<font color="#CCCCCC">use it slow they usually have</font><font color="#E5E5E5"> two types</font>

25
00:00:56,670 --> 00:01:00,930
of<font color="#E5E5E5"> memory one is the persistent memory</font>

26
00:00:58,230 --> 00:01:03,538
<font color="#E5E5E5">which we have more</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> it like</font><font color="#CCCCCC"> 150</font>

27
00:01:00,930 --> 00:01:05,129
kilobytes usually there are<font color="#CCCCCC"> some cards</font>

28
00:01:03,539 --> 00:01:08,280
offering up<font color="#CCCCCC"> to one megabyte but these</font>

29
00:01:05,129 --> 00:01:10,320
are rare<font color="#CCCCCC"> cases and then there is a</font>

30
00:01:08,280 --> 00:01:12,930
volatile<font color="#CCCCCC"> Ram which is very fast</font><font color="#E5E5E5"> but we</font>

31
00:01:10,320 --> 00:01:15,000
have<font color="#E5E5E5"> limited the amount of it usually</font>

32
00:01:12,930 --> 00:01:16,470
less than<font color="#CCCCCC"> 10 kilobytes and of course</font>

33
00:01:15,000 --> 00:01:18,720
they have the secure<font color="#E5E5E5"> random</font><font color="#CCCCCC"> number</font>

34
00:01:16,470 --> 00:01:21,150
<font color="#E5E5E5">generator</font><font color="#CCCCCC"> it generates us fresh</font>

35
00:01:18,720 --> 00:01:23,429
randomness for keys and<font color="#CCCCCC"> everything so</font>

36
00:01:21,150 --> 00:01:25,619
the smart<font color="#CCCCCC"> cards are</font><font color="#E5E5E5"> very nice because</font>

37
00:01:23,430 --> 00:01:27,750
<font color="#E5E5E5">they are intended to be physic to</font>

38
00:01:25,619 --> 00:01:29,909
<font color="#E5E5E5">operating physically and protected</font>

39
00:01:27,750 --> 00:01:32,700
environments so on<font color="#CCCCCC"> the other on</font><font color="#E5E5E5"> the</font>

40
00:01:29,909 --> 00:01:33,890
adversarial control and this means<font color="#CCCCCC"> that</font>

41
00:01:32,700 --> 00:01:36,840
they need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> provide</font><font color="#CCCCCC"> tamper protection</font>

42
00:01:33,890 --> 00:01:40,200
<font color="#CCCCCC">so</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> temporal protection you mean</font>

43
00:01:36,840 --> 00:01:41,960
tamper evidence<font color="#CCCCCC"> so if you manipulate the</font>

44
00:01:40,200 --> 00:01:44,340
card physically this will be visible

45
00:01:41,960 --> 00:01:47,339
tamper resistance<font color="#E5E5E5"> so it can withstand</font>

46
00:01:44,340 --> 00:01:49,110
physical attacks<font color="#E5E5E5"> and</font><font color="#CCCCCC"> tamper response in</font>

47
00:01:47,340 --> 00:01:51,570
case<font color="#CCCCCC"> the card detects that</font><font color="#E5E5E5"> is being</font>

48
00:01:49,110 --> 00:01:53,840
manipulated<font color="#CCCCCC"> it can erase Keys lock</font>

49
00:01:51,570 --> 00:01:57,048
itself down<font color="#CCCCCC"> and do other</font><font color="#E5E5E5"> things</font>

50
00:01:53,840 --> 00:01:58,860
additionally they<font color="#CCCCCC"> also provide</font>

51
00:01:57,049 --> 00:02:02,100
protection against side-channel attacks

52
00:01:58,860 --> 00:02:04,200
like<font color="#E5E5E5"> pair analysis and then there are</font>

53
00:02:02,100 --> 00:02:05,179
some periodic tests that<font color="#E5E5E5"> run and check</font>

54
00:02:04,200 --> 00:02:08,098
the random number generator

55
00:02:05,180 --> 00:02:10,739
functionality so there are many<font color="#E5E5E5"> huge</font>

56
00:02:08,098 --> 00:02:13,619
<font color="#CCCCCC">cases they are being</font><font color="#E5E5E5"> used a</font><font color="#CCCCCC"> lot in</font>

57
00:02:10,739 --> 00:02:16,500
payments like Apple pay<font color="#E5E5E5"> credit cards</font>

58
00:02:13,620 --> 00:02:19,500
things like<font color="#E5E5E5"> this government</font><font color="#CCCCCC"> cards for ID</font>

59
00:02:16,500 --> 00:02:21,720
passports and signing cryptocurrencies

60
00:02:19,500 --> 00:02:24,930
for<font color="#CCCCCC"> a wallet protection this sake one of</font>

61
00:02:21,720 --> 00:02:26,819
the newest<font color="#E5E5E5"> use cases for Java cut smart</font>

62
00:02:24,930 --> 00:02:28,950
<font color="#E5E5E5">cuts in general and the Internet of</font>

63
00:02:26,819 --> 00:02:30,929
Things is becoming<font color="#CCCCCC"> industry din it</font><font color="#E5E5E5"> in</font>

64
00:02:28,950 --> 00:02:34,768
them and they try to<font color="#E5E5E5"> use them as and</font>

65
00:02:30,930 --> 00:02:36,989
secure endpoints<font color="#CCCCCC"> so why</font><font color="#E5E5E5"> we like smart</font>

66
00:02:34,769 --> 00:02:40,829
<font color="#CCCCCC">cards</font><font color="#E5E5E5"> so first of all they have a very</font>

67
00:02:36,989 --> 00:02:41,879
<font color="#E5E5E5">small attack surface so the it makes it</font>

68
00:02:40,829 --> 00:02:45,090
hard for<font color="#E5E5E5"> the adversary</font>

69
00:02:41,879 --> 00:02:47,429
<font color="#E5E5E5">to actually tamper with hardware</font><font color="#CCCCCC"> and</font>

70
00:02:45,090 --> 00:02:49,620
extract the secrets<font color="#E5E5E5"> that are stored</font>

71
00:02:47,430 --> 00:02:51,090
there<font color="#CCCCCC"> they are certified to very high</font>

72
00:02:49,620 --> 00:02:53,549
<font color="#E5E5E5">levels of</font><font color="#CCCCCC"> security even</font><font color="#E5E5E5"> though they are</font>

73
00:02:51,090 --> 00:02:55,379
<font color="#E5E5E5">very inexpensive they are programmable</font>

74
00:02:53,549 --> 00:02:57,810
<font color="#E5E5E5">so you</font><font color="#CCCCCC"> can build</font><font color="#E5E5E5"> your own applications</font>

75
00:02:55,379 --> 00:02:59,310
and then we run them in there and then

76
00:02:57,810 --> 00:03:01,680
they are<font color="#CCCCCC"> suitable for very complicated</font>

77
00:02:59,310 --> 00:03:03,840
<font color="#E5E5E5">business security transactions like</font>

78
00:03:01,680 --> 00:03:06,269
those used<font color="#CCCCCC"> by banks</font><font color="#E5E5E5"> and other entities</font>

79
00:03:03,840 --> 00:03:09,150
<font color="#E5E5E5">and buy an expensive we also mean that</font>

80
00:03:06,269 --> 00:03:13,680
<font color="#E5E5E5">by having like</font><font color="#CCCCCC"> few hundreds of them</font><font color="#E5E5E5"> you</font>

81
00:03:09,150 --> 00:03:15,359
can essentially emulate<font color="#CCCCCC"> low end</font><font color="#E5E5E5"> HSM so</font>

82
00:03:13,680 --> 00:03:19,290
for smart cards currently there are

83
00:03:15,359 --> 00:03:24,060
three main operating<font color="#E5E5E5"> systems one of</font><font color="#CCCCCC"> them</font>

84
00:03:19,290 --> 00:03:27,120
is maltose<font color="#E5E5E5"> so</font><font color="#CCCCCC"> buy maltose is</font><font color="#E5E5E5"> geared</font>

85
00:03:24,060 --> 00:03:30,930
towards<font color="#E5E5E5"> being certified for high level</font>

86
00:03:27,120 --> 00:03:34,590
applications<font color="#E5E5E5"> and is usually</font><font color="#CCCCCC"> used by</font><font color="#E5E5E5"> Bank</font>

87
00:03:30,930 --> 00:03:37,260
<font color="#CCCCCC">Hearts and this kind of entities</font><font color="#E5E5E5"> so</font>

88
00:03:34,590 --> 00:03:38,579
there is also dotnet I wasn't sure if I

89
00:03:37,260 --> 00:03:40,768
should include<font color="#CCCCCC"> that</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> because</font>

90
00:03:38,579 --> 00:03:42,500
essentially the operating system is dead

91
00:03:40,769 --> 00:03:45,419
he has very<font color="#E5E5E5"> limited market penetration</font>

92
00:03:42,500 --> 00:03:46,980
<font color="#CCCCCC">very few people are using it</font><font color="#E5E5E5"> honestly</font>

93
00:03:45,419 --> 00:03:50,310
I'm<font color="#E5E5E5"> not aware of anyone using</font><font color="#CCCCCC"> it but</font>

94
00:03:46,980 --> 00:03:51,418
there should<font color="#E5E5E5"> be someone and then there</font>

95
00:03:50,310 --> 00:03:53,370
is<font color="#E5E5E5"> Java card which is</font><font color="#CCCCCC"> the operating</font>

96
00:03:51,419 --> 00:03:56,940
<font color="#CCCCCC">system we are interested in</font><font color="#E5E5E5"> currently</font>

97
00:03:53,370 --> 00:04:01,430
it's run by Oracle in the past<font color="#E5E5E5"> view</font><font color="#CCCCCC"> sun</font>

98
00:03:56,940 --> 00:04:03,810
<font color="#E5E5E5">and its main benefit</font><font color="#CCCCCC"> is that you can</font>

99
00:04:01,430 --> 00:04:05,280
<font color="#E5E5E5">develop an applet for a specific card</font>

100
00:04:03,810 --> 00:04:07,260
and then just take your<font color="#E5E5E5"> applet and run</font>

101
00:04:05,280 --> 00:04:09,000
it on<font color="#CCCCCC"> another card</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> another</font>

102
00:04:07,260 --> 00:04:13,948
manufacturer<font color="#E5E5E5"> and it's gonna</font><font color="#CCCCCC"> work out of</font>

103
00:04:09,000 --> 00:04:15,889
the<font color="#CCCCCC"> box so what</font><font color="#E5E5E5"> about Java card so Java</font>

104
00:04:13,949 --> 00:04:18,389
card started in<font color="#E5E5E5"> 96</font>

105
00:04:15,889 --> 00:04:20,250
<font color="#CCCCCC">until then every manufacturer had its</font>

106
00:04:18,389 --> 00:04:22,919
own operating system<font color="#E5E5E5"> so if you wanted to</font>

107
00:04:20,250 --> 00:04:24,719
develop an<font color="#CCCCCC"> application for a specific</font>

108
00:04:22,919 --> 00:04:27,010
<font color="#E5E5E5">card you had to use the operating system</font>

109
00:04:24,719 --> 00:04:28,780
of that manufacturer<font color="#E5E5E5"> but then</font>

110
00:04:27,010 --> 00:04:30,849
card issuer started to complain<font color="#E5E5E5"> and they</font>

111
00:04:28,780 --> 00:04:32,919
demand<font color="#E5E5E5"> interoperability which means that</font>

112
00:04:30,850 --> 00:04:34,690
you can run<font color="#CCCCCC"> your</font><font color="#E5E5E5"> application on cards</font>

113
00:04:32,920 --> 00:04:37,870
from different manufacturers<font color="#E5E5E5"> regardless</font>

114
00:04:34,690 --> 00:04:41,290
of the underlying<font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> and then</font>

115
00:04:37,870 --> 00:04:44,410
<font color="#CCCCCC">indeed</font><font color="#E5E5E5"> this happened on 97</font><font color="#CCCCCC"> so they</font>

116
00:04:41,290 --> 00:04:46,660
founded the<font color="#CCCCCC"> Java card forum</font><font color="#E5E5E5"> and they</font>

117
00:04:44,410 --> 00:04:48,430
invited<font color="#E5E5E5"> the Sun Microsystems at the time</font>

118
00:04:46,660 --> 00:04:51,580
<font color="#E5E5E5">and they did that because Sun</font>

119
00:04:48,430 --> 00:04:54,220
Microsystems<font color="#CCCCCC"> was the owner of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Java</font>

120
00:04:51,580 --> 00:04:57,010
<font color="#CCCCCC">technology and they wanted</font><font color="#E5E5E5"> to build to</font>

121
00:04:54,220 --> 00:04:58,660
run Java and Java<font color="#CCCCCC"> upon smart</font><font color="#E5E5E5"> cuts so</font>

122
00:04:57,010 --> 00:05:00,340
they<font color="#E5E5E5"> invited Sun Microsystems even</font>

123
00:04:58,660 --> 00:05:02,170
though they had no<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> about smart cuts</font>

124
00:05:00,340 --> 00:05:03,570
<font color="#E5E5E5">and this was a problem</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the first few</font>

125
00:05:02,170 --> 00:05:05,650
meetings but<font color="#E5E5E5"> then they sorted this out</font>

126
00:05:03,570 --> 00:05:07,659
<font color="#E5E5E5">one thing</font><font color="#CCCCCC"> that happened out of this</font>

127
00:05:05,650 --> 00:05:09,789
<font color="#CCCCCC">meeting</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that the manufacturers became</font>

128
00:05:07,660 --> 00:05:12,520
<font color="#E5E5E5">essentially the avocado licensees and</font>

129
00:05:09,790 --> 00:05:15,370
then the<font color="#CCCCCC"> most important</font><font color="#E5E5E5"> thing was</font><font color="#CCCCCC"> son</font>

130
00:05:12,520 --> 00:05:17,680
committed<font color="#E5E5E5"> to periodically release the</font>

131
00:05:15,370 --> 00:05:19,780
<font color="#E5E5E5">Java card specifications</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> reference</font>

132
00:05:17,680 --> 00:05:23,080
implementation and the compliance<font color="#E5E5E5"> kit</font>

133
00:05:19,780 --> 00:05:24,909
and actually<font color="#CCCCCC"> 20 years after</font><font color="#E5E5E5"> Oracle now</font>

134
00:05:23,080 --> 00:05:27,039
keeps doing<font color="#CCCCCC"> that so they released the</font>

135
00:05:24,910 --> 00:05:29,530
Java code specifications these

136
00:05:27,040 --> 00:05:32,260
specifications are<font color="#CCCCCC"> three virtual machine</font>

137
00:05:29,530 --> 00:05:34,690
runtime environment and the<font color="#E5E5E5"> API which is</font>

138
00:05:32,260 --> 00:05:36,340
what we're interested<font color="#E5E5E5"> in and also they</font>

139
00:05:34,690 --> 00:05:39,280
release an<font color="#E5E5E5"> SDK for application</font>

140
00:05:36,340 --> 00:05:41,530
development<font color="#CCCCCC"> applied development and it</font>

141
00:05:39,280 --> 00:05:46,090
did it worked<font color="#E5E5E5"> so currently we</font><font color="#CCCCCC"> have</font>

142
00:05:41,530 --> 00:05:48,849
around 20 billion Java cards sold<font color="#E5E5E5"> the</font>

143
00:05:46,090 --> 00:05:51,640
current rate of cards being sold per

144
00:05:48,850 --> 00:05:53,800
year is<font color="#CCCCCC"> about 2 billion and we</font><font color="#E5E5E5"> 1 billion</font>

145
00:05:51,640 --> 00:05:56,469
of them were sold as contactless cards

146
00:05:53,800 --> 00:05:59,200
in 2016<font color="#CCCCCC"> community use cases are</font>

147
00:05:56,470 --> 00:06:01,030
telecommunications which is when<font color="#E5E5E5"> we set</font>

148
00:05:59,200 --> 00:06:04,780
up<font color="#CCCCCC"> communications will</font><font color="#E5E5E5"> usually we refer</font>

149
00:06:01,030 --> 00:06:07,929
<font color="#CCCCCC">to SIM cards payment cards and length</font>

150
00:06:04,780 --> 00:06:09,609
and loyalty cards<font color="#E5E5E5"> the API specification</font>

151
00:06:07,930 --> 00:06:12,850
is what we are interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> in</font>

152
00:06:09,610 --> 00:06:14,650
today<font color="#E5E5E5"> so what it</font><font color="#CCCCCC"> does is</font><font color="#E5E5E5"> basically it</font>

153
00:06:12,850 --> 00:06:16,840
<font color="#CCCCCC">provides a list of all supported crypto</font>

154
00:06:14,650 --> 00:06:19,330
algorithms and the relevant methods and

155
00:06:16,840 --> 00:06:21,039
then the manufacturers take<font color="#E5E5E5"> this list</font>

156
00:06:19,330 --> 00:06:23,109
and implement this on<font color="#E5E5E5"> their</font><font color="#CCCCCC"> hardware</font>

157
00:06:21,040 --> 00:06:24,310
<font color="#E5E5E5">this makes it very straightforward for</font>

158
00:06:23,110 --> 00:06:27,580
developers to<font color="#E5E5E5"> know what's in the</font>

159
00:06:24,310 --> 00:06:29,680
hardware how they can use it<font color="#E5E5E5"> it also</font>

160
00:06:27,580 --> 00:06:31,330
ensures interoperability because that

161
00:06:29,680 --> 00:06:33,070
list is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same for every manufacturer</font>

162
00:06:31,330 --> 00:06:35,340
so your applet is going to work

163
00:06:33,070 --> 00:06:37,540
everywhere<font color="#E5E5E5"> and then it allows</font>

164
00:06:35,340 --> 00:06:39,250
implementations of<font color="#E5E5E5"> the API to be</font>

165
00:06:37,540 --> 00:06:40,330
<font color="#E5E5E5">certified both for functionality</font><font color="#CCCCCC"> in</font>

166
00:06:39,250 --> 00:06:42,310
<font color="#E5E5E5">security</font>

167
00:06:40,330 --> 00:06:45,039
and because of that<font color="#E5E5E5"> a full ecosystem has</font>

168
00:06:42,310 --> 00:06:48,220
emerged and matured<font color="#CCCCCC"> over</font><font color="#E5E5E5"> the last 20</font>

169
00:06:45,039 --> 00:06:50,650
years to include<font color="#E5E5E5"> Laborde laboratories</font>

170
00:06:48,220 --> 00:06:53,740
<font color="#E5E5E5">and certification authorities to perform</font>

171
00:06:50,650 --> 00:06:57,489
all<font color="#CCCCCC"> these operations</font><font color="#E5E5E5"> so here is a list</font>

172
00:06:53,740 --> 00:06:59,530
<font color="#E5E5E5">of not not an exhaustive list</font><font color="#CCCCCC"> but a very</font>

173
00:06:57,490 --> 00:07:02,560
short list<font color="#E5E5E5"> of the specifications</font>

174
00:06:59,530 --> 00:07:05,679
released throughout the years as<font color="#CCCCCC"> you can</font>

175
00:07:02,560 --> 00:07:07,469
see it with its release new algorithms

176
00:07:05,680 --> 00:07:09,819
and new methods are being<font color="#CCCCCC"> added</font><font color="#E5E5E5"> a</font>

177
00:07:07,469 --> 00:07:11,349
specification is in principle released

178
00:07:09,819 --> 00:07:12,699
every three<font color="#CCCCCC"> years sometimes</font><font color="#E5E5E5"> it's like a</font>

179
00:07:11,349 --> 00:07:14,469
bit faster like two years

180
00:07:12,699 --> 00:07:16,659
sometimes it<font color="#E5E5E5"> takes like an extra years</font>

181
00:07:14,469 --> 00:07:17,949
or four years<font color="#E5E5E5"> but in principle it's</font>

182
00:07:16,659 --> 00:07:22,330
every three years<font color="#CCCCCC"> a new specification</font>

183
00:07:17,949 --> 00:07:25,150
<font color="#CCCCCC">has been released so what happened all</font>

184
00:07:22,330 --> 00:07:27,099
<font color="#E5E5E5">those things are very</font><font color="#CCCCCC"> nice</font><font color="#E5E5E5"> in theory but</font>

185
00:07:25,150 --> 00:07:29,739
in<font color="#CCCCCC"> practice this</font><font color="#E5E5E5"> is no not what's</font>

186
00:07:27,099 --> 00:07:31,750
<font color="#CCCCCC">happening</font><font color="#E5E5E5"> so the problem is that vendors</font>

187
00:07:29,740 --> 00:07:33,759
don't necessarily<font color="#E5E5E5"> implement the full</font>

188
00:07:31,750 --> 00:07:36,159
specification what they do instead<font color="#E5E5E5"> is</font>

189
00:07:33,759 --> 00:07:38,080
<font color="#E5E5E5">they pick</font><font color="#CCCCCC"> a subset of the functions</font>

190
00:07:36,159 --> 00:07:41,409
listed there and<font color="#CCCCCC"> the algorithms and they</font>

191
00:07:38,080 --> 00:07:44,198
implement<font color="#E5E5E5"> that instead this means that</font>

192
00:07:41,409 --> 00:07:46,389
there is no list of algorithms supported

193
00:07:44,199 --> 00:07:49,569
by<font color="#E5E5E5"> its card so it's</font><font color="#CCCCCC"> card says I comply</font>

194
00:07:46,389 --> 00:07:51,219
with specification<font color="#E5E5E5"> 301 and then you</font>

195
00:07:49,569 --> 00:07:53,319
don't really<font color="#CCCCCC"> know which</font><font color="#E5E5E5"> subset the 301</font>

196
00:07:51,219 --> 00:07:54,789
it's in there<font color="#E5E5E5"> so what you have to do as</font>

197
00:07:53,319 --> 00:07:57,039
<font color="#CCCCCC">a</font><font color="#E5E5E5"> developers do you have to actually buy</font>

198
00:07:54,789 --> 00:07:59,500
the card<font color="#E5E5E5"> and check for years by yourself</font>

199
00:07:57,039 --> 00:08:02,409
<font color="#CCCCCC">with card with algorithms and functions</font>

200
00:07:59,500 --> 00:08:04,810
and constants are there<font color="#CCCCCC"> this</font><font color="#E5E5E5"> actually</font>

201
00:08:02,409 --> 00:08:07,089
lead leads to compliance problems<font color="#CCCCCC"> and</font>

202
00:08:04,810 --> 00:08:08,620
here are<font color="#E5E5E5"> some examples of manufacture</font>

203
00:08:07,089 --> 00:08:10,659
<font color="#E5E5E5">and not really following the</font>

204
00:08:08,620 --> 00:08:12,879
specification sometimes even

205
00:08:10,659 --> 00:08:16,060
collectively all of<font color="#CCCCCC"> them don't comply</font><font color="#E5E5E5"> so</font>

206
00:08:12,879 --> 00:08:19,419
they try<font color="#E5E5E5"> to introduce our minds that of</font>

207
00:08:16,060 --> 00:08:21,580
what<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are currently</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> in 2003</font><font color="#E5E5E5"> it</font>

208
00:08:19,419 --> 00:08:23,589
<font color="#E5E5E5">was never adopted this position there</font>

209
00:08:21,580 --> 00:08:25,330
<font color="#CCCCCC">was another specification for Java code</font>

210
00:08:23,589 --> 00:08:29,349
<font color="#CCCCCC">3</font><font color="#E5E5E5"> connected which was very nice because</font>

211
00:08:25,330 --> 00:08:31,419
you could run servlets<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> card</font><font color="#CCCCCC"> but</font>

212
00:08:29,349 --> 00:08:32,890
<font color="#E5E5E5">the hardware never lived up to it so</font>

213
00:08:31,419 --> 00:08:35,110
they<font color="#E5E5E5"> never implemented that and</font><font color="#CCCCCC"> this</font>

214
00:08:32,890 --> 00:08:36,490
shows<font color="#CCCCCC"> the disconnect between the people</font>

215
00:08:35,110 --> 00:08:37,899
who<font color="#CCCCCC"> release the specification and the</font>

216
00:08:36,490 --> 00:08:40,870
actual manufacturers and what's actually

217
00:08:37,899 --> 00:08:42,370
possible<font color="#CCCCCC"> on</font><font color="#E5E5E5"> hardware and</font><font color="#CCCCCC"> then there was</font>

218
00:08:40,870 --> 00:08:45,699
<font color="#CCCCCC">a some</font><font color="#E5E5E5"> discussion about an annotation</font>

219
00:08:42,370 --> 00:08:49,480
framework<font color="#CCCCCC"> it was never adopted let's</font>

220
00:08:45,699 --> 00:08:51,160
just dropped so all those things lead to

221
00:08:49,480 --> 00:08:53,680
interoperability problems<font color="#E5E5E5"> and you can</font>

222
00:08:51,160 --> 00:08:56,139
see<font color="#E5E5E5"> can see that</font>

223
00:08:53,680 --> 00:08:58,180
since most cards<font color="#E5E5E5"> run a single applet</font><font color="#CCCCCC"> and</font>

224
00:08:56,139 --> 00:08:59,980
this was not the intention of<font color="#E5E5E5"> the Java</font>

225
00:08:58,180 --> 00:09:03,279
card<font color="#E5E5E5"> ecosystem this was not the</font><font color="#CCCCCC"> Java</font>

226
00:08:59,980 --> 00:09:05,649
<font color="#CCCCCC">code vision most applets are is written</font>

227
00:09:03,279 --> 00:09:08,170
and tested<font color="#E5E5E5"> for a single card from a</font>

228
00:09:05,649 --> 00:09:09,639
single vendor<font color="#E5E5E5"> and usually if you try to</font>

229
00:09:08,170 --> 00:09:11,498
run them somewhere else<font color="#E5E5E5"> there's gonna be</font>

230
00:09:09,639 --> 00:09:13,179
<font color="#CCCCCC">a problem</font><font color="#E5E5E5"> some algorithm is not going to</font>

231
00:09:11,499 --> 00:09:15,879
be supported and usually<font color="#E5E5E5"> these problems</font>

232
00:09:13,179 --> 00:09:18,850
are like you cannot recover from<font color="#CCCCCC"> them</font>

233
00:09:15,879 --> 00:09:20,170
so usually vendors stick with a card

234
00:09:18,850 --> 00:09:22,480
they know it works and<font color="#E5E5E5"> they don't move</font>

235
00:09:20,170 --> 00:09:23,589
around<font color="#E5E5E5"> and then there is another problem</font>

236
00:09:22,480 --> 00:09:25,449
<font color="#E5E5E5">that has to do with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> way the</font>

237
00:09:23,589 --> 00:09:28,929
<font color="#CCCCCC">ecosystem work</font><font color="#E5E5E5"> and it's not the</font>

238
00:09:25,449 --> 00:09:30,790
manufacturers mistake so from the<font color="#E5E5E5"> point</font>

239
00:09:28,929 --> 00:09:32,649
that<font color="#E5E5E5"> the time that the specification has</font>

240
00:09:30,790 --> 00:09:34,569
been released<font color="#CCCCCC"> it takes three years until</font>

241
00:09:32,649 --> 00:09:37,600
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> start to see cards on the market</font>

242
00:09:34,569 --> 00:09:39,550
supporting that the new algorithms added

243
00:09:37,600 --> 00:09:41,709
by the specification<font color="#E5E5E5"> so it takes one</font>

244
00:09:39,550 --> 00:09:44,769
year<font color="#CCCCCC"> to develop a new platform for</font><font color="#E5E5E5"> the</font>

245
00:09:41,709 --> 00:09:47,498
<font color="#E5E5E5">specification another year to test for</font>

246
00:09:44,769 --> 00:09:50,619
functionality<font color="#E5E5E5"> and security and then</font>

247
00:09:47,499 --> 00:09:52,809
another year<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually deploy</font><font color="#E5E5E5"> and make</font>

248
00:09:50,619 --> 00:09:57,759
the cards available<font color="#E5E5E5"> and market so three</font>

249
00:09:52,809 --> 00:09:59,230
years<font color="#E5E5E5"> delay and the last peculiarity of</font>

250
00:09:57,759 --> 00:10:00,790
this<font color="#CCCCCC"> ecosystem is that we have walled</font>

251
00:09:59,230 --> 00:10:03,129
garden so there are all those

252
00:10:00,790 --> 00:10:09,569
<font color="#E5E5E5">restrictions on what</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do and all</font>

253
00:10:03,129 --> 00:10:11,949
those<font color="#CCCCCC"> API let's say deficiencies or</font>

254
00:10:09,569 --> 00:10:13,809
incompatibilities<font color="#E5E5E5"> but there are also</font>

255
00:10:11,949 --> 00:10:16,300
proprietary<font color="#CCCCCC"> api so what they do with</font>

256
00:10:13,809 --> 00:10:17,920
proprietary api's vendors are<font color="#E5E5E5"> releasing</font>

257
00:10:16,300 --> 00:10:21,099
them and they provide additional<font color="#E5E5E5"> classes</font>

258
00:10:17,920 --> 00:10:23,649
not listed<font color="#E5E5E5"> on the official</font><font color="#CCCCCC"> API</font>

259
00:10:21,100 --> 00:10:25,779
specification and<font color="#E5E5E5"> there they provide</font>

260
00:10:23,649 --> 00:10:27,339
newer algorithms<font color="#E5E5E5"> mathematical operations</font>

261
00:10:25,779 --> 00:10:29,649
<font color="#E5E5E5">that are not available</font><font color="#CCCCCC"> elliptic arrow</font>

262
00:10:27,339 --> 00:10:31,749
operation<font color="#CCCCCC"> sometimes</font><font color="#E5E5E5"> and the all these</font>

263
00:10:29,649 --> 00:10:33,759
are vendor specific so if you try to

264
00:10:31,749 --> 00:10:38,139
<font color="#E5E5E5">move from one manufacturer to the other</font>

265
00:10:33,759 --> 00:10:40,660
this API<font color="#E5E5E5"> will totally make your applet</font>

266
00:10:38,139 --> 00:10:42,459
not<font color="#CCCCCC"> run on the other</font><font color="#E5E5E5"> manufacturer plus</font>

267
00:10:40,660 --> 00:10:44,139
you also<font color="#E5E5E5"> provide these two large</font>

268
00:10:42,459 --> 00:10:47,679
customers that can make a<font color="#E5E5E5"> very good case</font>

269
00:10:44,139 --> 00:10:49,540
they need thousands of cards<font color="#CCCCCC"> so small</font>

270
00:10:47,679 --> 00:10:51,069
development houses don't really gain

271
00:10:49,540 --> 00:10:52,569
access to<font color="#E5E5E5"> these and there of course</font>

272
00:10:51,069 --> 00:10:54,399
<font color="#CCCCCC">they're very</font><font color="#E5E5E5"> protective we have</font><font color="#CCCCCC"> to sign</font>

273
00:10:52,569 --> 00:10:57,998
<font color="#E5E5E5">NDA's there is no</font><font color="#CCCCCC"> information the</font>

274
00:10:54,399 --> 00:10:59,889
internet<font color="#E5E5E5"> about them so all these</font>

275
00:10:57,999 --> 00:11:03,939
motivated us<font color="#CCCCCC"> to build</font>

276
00:10:59,889 --> 00:11:06,699
start the open crypto project<font color="#CCCCCC"> the open</font>

277
00:11:03,939 --> 00:11:08,170
crypto project aims to<font color="#E5E5E5"> reduce the time</font>

278
00:11:06,699 --> 00:11:11,390
to market

279
00:11:08,170 --> 00:11:13,250
<font color="#CCCCCC">delay</font><font color="#E5E5E5"> as fast as possible so instead of</font>

280
00:11:11,390 --> 00:11:16,040
<font color="#E5E5E5">having this three</font><font color="#CCCCCC"> three-year lag</font>

281
00:11:13,250 --> 00:11:18,350
we aim to speed up<font color="#CCCCCC"> these two us as</font><font color="#E5E5E5"> long</font>

282
00:11:16,040 --> 00:11:21,290
<font color="#E5E5E5">as it takes for someone to implement the</font>

283
00:11:18,350 --> 00:11:24,050
algorithms<font color="#E5E5E5"> and software</font><font color="#CCCCCC"> then we also aim</font>

284
00:11:21,290 --> 00:11:26,000
to improve the situation<font color="#CCCCCC"> with</font>

285
00:11:24,050 --> 00:11:29,599
interoperability between cards<font color="#E5E5E5"> so a</font>

286
00:11:26,000 --> 00:11:31,160
project should be<font color="#E5E5E5"> able to provide a</font>

287
00:11:29,600 --> 00:11:33,589
consistent library<font color="#E5E5E5"> between different</font>

288
00:11:31,160 --> 00:11:35,990
Java<font color="#CCCCCC"> cloud platforms</font><font color="#E5E5E5"> and we also want</font><font color="#CCCCCC"> to</font>

289
00:11:33,589 --> 00:11:40,520
make<font color="#E5E5E5"> it easy for Java developers to move</font>

290
00:11:35,990 --> 00:11:43,220
to Java card<font color="#CCCCCC"> because even though Java</font>

291
00:11:40,520 --> 00:11:44,660
cart in Java<font color="#E5E5E5"> are similar in name in</font>

292
00:11:43,220 --> 00:11:48,650
practice they are completely<font color="#CCCCCC"> different</font>

293
00:11:44,660 --> 00:11:51,140
<font color="#E5E5E5">and this this change and this need is</font>

294
00:11:48,650 --> 00:11:53,420
being made more prevalent<font color="#E5E5E5"> because of IOT</font>

295
00:11:51,140 --> 00:11:55,550
<font color="#E5E5E5">so I ot actually needs an annoying</font>

296
00:11:53,420 --> 00:12:00,050
platform with those characteristics<font color="#CCCCCC"> that</font>

297
00:11:55,550 --> 00:12:01,760
<font color="#CCCCCC">Sava card have and but this platform is</font>

298
00:12:00,050 --> 00:12:05,120
not there yet and<font color="#CCCCCC"> it's not usable by</font>

299
00:12:01,760 --> 00:12:06,290
them<font color="#E5E5E5"> so the IOT situation is the</font>

300
00:12:05,120 --> 00:12:08,180
<font color="#E5E5E5">following you</font><font color="#CCCCCC"> have lots of</font><font color="#E5E5E5"> small</font>

301
00:12:06,290 --> 00:12:09,949
development houses<font color="#E5E5E5"> which means that they</font>

302
00:12:08,180 --> 00:12:12,140
don't<font color="#E5E5E5"> get</font><font color="#CCCCCC"> access to</font><font color="#E5E5E5"> proprietary api's</font>

303
00:12:09,950 --> 00:12:13,310
they want to build<font color="#E5E5E5"> virus new things and</font>

304
00:12:12,140 --> 00:12:15,439
<font color="#E5E5E5">this means that they don't have</font>

305
00:12:13,310 --> 00:12:17,780
consistent needs so even if you add one

306
00:12:15,440 --> 00:12:21,050
new algorithm on the specification<font color="#CCCCCC"> it's</font>

307
00:12:17,780 --> 00:12:22,760
it won't cover all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> them probably</font><font color="#CCCCCC"> it</font>

308
00:12:21,050 --> 00:12:25,010
<font color="#E5E5E5">won't cover the majority of them are</font>

309
00:12:22,760 --> 00:12:26,960
also and most of them are<font color="#E5E5E5"> not smart card</font>

310
00:12:25,010 --> 00:12:28,670
experts<font color="#E5E5E5"> so when you try to move from</font>

311
00:12:26,960 --> 00:12:30,800
java to java card and you realize that

312
00:12:28,670 --> 00:12:33,650
<font color="#E5E5E5">there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> no strings no integers no</font>

313
00:12:30,800 --> 00:12:36,740
garbage collection<font color="#E5E5E5"> this is a shock so we</font>

314
00:12:33,650 --> 00:12:38,990
try<font color="#E5E5E5"> to fix that and despite</font><font color="#CCCCCC"> all those</font>

315
00:12:36,740 --> 00:12:41,540
<font color="#E5E5E5">difficulties people</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> actually built</font>

316
00:12:38,990 --> 00:12:44,210
lots of stuff already<font color="#CCCCCC"> some</font><font color="#E5E5E5"> applications</font>

317
00:12:41,540 --> 00:12:45,829
are like<font color="#CCCCCC"> big Bitcoin wallets</font><font color="#E5E5E5"> two-factor</font>

318
00:12:44,210 --> 00:12:48,770
authentication on one time password

319
00:12:45,830 --> 00:12:51,410
generators secure storage<font color="#E5E5E5"> we were</font>

320
00:12:48,770 --> 00:12:53,180
actually wondering<font color="#E5E5E5"> what if these</font><font color="#CCCCCC"> people</font>

321
00:12:51,410 --> 00:12:54,380
had access<font color="#E5E5E5"> to a full power of the cards</font>

322
00:12:53,180 --> 00:12:55,060
<font color="#E5E5E5">and they could do whatever they want</font>

323
00:12:54,380 --> 00:12:58,970
<font color="#E5E5E5">with it</font>

324
00:12:55,060 --> 00:13:01,420
so the people who were that who built

325
00:12:58,970 --> 00:13:03,980
<font color="#E5E5E5">that project is me myself</font><font color="#CCCCCC"> Vasilis</font>

326
00:13:01,420 --> 00:13:07,490
<font color="#CCCCCC">painter's van</font><font color="#E5E5E5"> de</font><font color="#CCCCCC"> doors</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> edges</font><font color="#E5E5E5"> and</font>

327
00:13:03,980 --> 00:13:09,890
Dunsford<font color="#CCCCCC"> tech and here's the open crypto</font>

328
00:13:07,490 --> 00:13:12,320
project so as part<font color="#E5E5E5"> of this project</font><font color="#CCCCCC"> we</font>

329
00:13:09,890 --> 00:13:14,990
provide a math library and development

330
00:13:12,320 --> 00:13:17,510
tools so the math<font color="#CCCCCC"> library as you can see</font>

331
00:13:14,990 --> 00:13:19,610
on<font color="#E5E5E5"> this part of it it sits on top</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

332
00:13:17,510 --> 00:13:21,050
current<font color="#E5E5E5"> of a card API and provides</font>

333
00:13:19,610 --> 00:13:22,490
integers

334
00:13:21,050 --> 00:13:24,979
big numbers and<font color="#CCCCCC"> elliptic curve</font>

335
00:13:22,490 --> 00:13:27,920
arithmetic<font color="#E5E5E5"> bit more on it now</font>

336
00:13:24,980 --> 00:13:31,130
<font color="#E5E5E5">so all those classes are provided by</font>

337
00:13:27,920 --> 00:13:33,199
Java<font color="#E5E5E5"> some of them the integers and the</font>

338
00:13:31,130 --> 00:13:35,689
beguine umbers<font color="#E5E5E5"> are available</font><font color="#CCCCCC"> on the java</font>

339
00:13:33,200 --> 00:13:37,580
code specification<font color="#E5E5E5"> but in the java</font><font color="#CCCCCC"> card</font>

340
00:13:35,690 --> 00:13:40,130
reality they don't<font color="#E5E5E5"> appear in any cards</font>

341
00:13:37,580 --> 00:13:43,220
<font color="#E5E5E5">they were simply not implemented by</font>

342
00:13:40,130 --> 00:13:44,360
manufacturers<font color="#CCCCCC"> and we actually</font><font color="#E5E5E5"> implement</font>

343
00:13:43,220 --> 00:13:47,630
all<font color="#CCCCCC"> of them and we make them available</font>

344
00:13:44,360 --> 00:13:49,100
through our library<font color="#CCCCCC"> and here is a link</font>

345
00:13:47,630 --> 00:13:50,410
for<font color="#E5E5E5"> the library</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you want to go and</font>

346
00:13:49,100 --> 00:13:53,570
<font color="#CCCCCC">download and play with</font><font color="#E5E5E5"> it</font>

347
00:13:50,410 --> 00:13:55,520
<font color="#E5E5E5">so the integer class provides what you</font>

348
00:13:53,570 --> 00:13:58,040
would expect<font color="#E5E5E5"> from an integer class so</font>

349
00:13:55,520 --> 00:14:00,410
<font color="#E5E5E5">all the regular operations</font><font color="#CCCCCC"> at an integer</font>

350
00:13:58,040 --> 00:14:03,319
that doesn't Java we have them the big

351
00:14:00,410 --> 00:14:05,060
number is geared<font color="#E5E5E5"> more towards big</font>

352
00:14:03,320 --> 00:14:06,910
numbers for<font color="#E5E5E5"> crypto so we do all the</font>

353
00:14:05,060 --> 00:14:09,349
operations<font color="#CCCCCC"> and they're modular</font>

354
00:14:06,910 --> 00:14:11,000
extensions so that you can build your

355
00:14:09,350 --> 00:14:12,680
own clipper crypto algorithms and the

356
00:14:11,000 --> 00:14:16,760
elliptic curve arithmetic is what we are

357
00:14:12,680 --> 00:14:18,079
most proud<font color="#CCCCCC"> of because</font><font color="#E5E5E5"> we provide all the</font>

358
00:14:16,760 --> 00:14:19,550
functions that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> would need when you</font>

359
00:14:18,080 --> 00:14:22,820
build a crypto algorithm for elliptic

360
00:14:19,550 --> 00:14:26,510
<font color="#E5E5E5">curves and I would say that we provide</font>

361
00:14:22,820 --> 00:14:29,930
<font color="#E5E5E5">more algorithms more methods for from</font>

362
00:14:26,510 --> 00:14:31,700
<font color="#E5E5E5">all the proprietary API</font><font color="#CCCCCC"> sub scene so</font>

363
00:14:29,930 --> 00:14:33,439
here's how<font color="#CCCCCC"> use</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> we try</font><font color="#E5E5E5"> to make it as</font>

364
00:14:31,700 --> 00:14:36,320
simple<font color="#E5E5E5"> as possible</font><font color="#CCCCCC"> so when you want to</font>

365
00:14:33,440 --> 00:14:37,850
define<font color="#E5E5E5"> elliptic curve simply creating</font>

366
00:14:36,320 --> 00:14:39,110
your object and<font color="#E5E5E5"> you pass the parameters</font>

367
00:14:37,850 --> 00:14:40,580
for the elliptic curve and then that's

368
00:14:39,110 --> 00:14:43,220
it<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have the curve and you start</font>

369
00:14:40,580 --> 00:14:46,430
generating<font color="#E5E5E5"> points on the two lines</font><font color="#CCCCCC"> below</font>

370
00:14:43,220 --> 00:14:48,230
the<font color="#E5E5E5"> highlighted one and then if you want</font>

371
00:14:46,430 --> 00:14:51,650
<font color="#E5E5E5">to do operations with those points you</font>

372
00:14:48,230 --> 00:14:55,280
<font color="#CCCCCC">can randomize them</font><font color="#E5E5E5"> you can set them from</font>

373
00:14:51,650 --> 00:14:56,810
a specific<font color="#CCCCCC"> set the byte array or he can</font>

374
00:14:55,280 --> 00:15:00,860
add the two points or multiply with his

375
00:14:56,810 --> 00:15:02,329
color so in order<font color="#E5E5E5"> to implement all those</font>

376
00:15:00,860 --> 00:15:04,250
things we had to handle all the

377
00:15:02,330 --> 00:15:06,110
low-level dirty stuff and abstract them

378
00:15:04,250 --> 00:15:08,780
<font color="#E5E5E5">away so</font><font color="#CCCCCC"> that the actual user doesn't see</font>

379
00:15:06,110 --> 00:15:11,300
<font color="#E5E5E5">all the ugliness going on there from the</font>

380
00:15:08,780 --> 00:15:13,370
<font color="#CCCCCC">Java code side</font><font color="#E5E5E5"> so we developed a memory</font>

381
00:15:11,300 --> 00:15:15,140
<font color="#E5E5E5">management that unified and we had to</font>

382
00:15:13,370 --> 00:15:18,950
use<font color="#E5E5E5"> safe free use of pre-allocated</font>

383
00:15:15,140 --> 00:15:21,170
arrays and also develop an adaptive data

384
00:15:18,950 --> 00:15:23,390
placement<font color="#CCCCCC"> strategy</font><font color="#E5E5E5"> which can be either</font>

385
00:15:21,170 --> 00:15:25,790
adjusted for performance<font color="#E5E5E5"> or memory users</font>

386
00:15:23,390 --> 00:15:27,770
so depending on<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> want speed you</font>

387
00:15:25,790 --> 00:15:30,949
you get to use more<font color="#CCCCCC"> ram which will you</font>

388
00:15:27,770 --> 00:15:33,020
have limit a limited<font color="#CCCCCC"> amount of or if you</font>

389
00:15:30,950 --> 00:15:33,800
if you don't want to use lots<font color="#E5E5E5"> of ram</font>

390
00:15:33,020 --> 00:15:35,329
then you

391
00:15:33,800 --> 00:15:38,569
use the EPROM<font color="#E5E5E5"> and it's going to be a</font>

392
00:15:35,330 --> 00:15:39,950
little bit slower<font color="#CCCCCC"> so however what's</font>

393
00:15:38,570 --> 00:15:42,980
interesting is how you actually build

394
00:15:39,950 --> 00:15:45,080
<font color="#E5E5E5">such a library because as we've</font><font color="#CCCCCC"> seen the</font>

395
00:15:42,980 --> 00:15:47,570
<font color="#CCCCCC">CPU is very slow he it's programmable</font>

396
00:15:45,080 --> 00:15:49,220
<font color="#CCCCCC">it's very slow the</font><font color="#E5E5E5"> core processor is</font>

397
00:15:47,570 --> 00:15:51,829
very fast<font color="#E5E5E5"> for crypto which were in this</font>

398
00:15:49,220 --> 00:15:53,839
<font color="#CCCCCC">thing but you</font><font color="#E5E5E5"> have no direct access</font><font color="#CCCCCC"> to</font>

399
00:15:51,829 --> 00:15:56,229
it<font color="#E5E5E5"> so how</font><font color="#CCCCCC"> would you do it</font><font color="#E5E5E5"> so what we</font><font color="#CCCCCC"> did</font>

400
00:15:53,839 --> 00:15:58,760
is basically<font color="#E5E5E5"> we appeals to API calls</font>

401
00:15:56,230 --> 00:16:01,160
<font color="#CCCCCC">that use the code that are known</font><font color="#E5E5E5"> to use</font>

402
00:15:58,760 --> 00:16:03,920
the<font color="#E5E5E5"> core processor and then we use the</font>

403
00:16:01,160 --> 00:16:05,300
CPU<font color="#E5E5E5"> to</font><font color="#CCCCCC"> block them all together so here</font>

404
00:16:03,920 --> 00:16:06,740
<font color="#E5E5E5">is a very</font><font color="#CCCCCC"> simple example if you</font><font color="#E5E5E5"> want to</font>

405
00:16:05,300 --> 00:16:09,170
do modular<font color="#CCCCCC"> exponentiation</font><font color="#E5E5E5"> with big</font>

406
00:16:06,740 --> 00:16:11,899
numbers<font color="#E5E5E5"> what you do is basically you go</font>

407
00:16:09,170 --> 00:16:14,510
to the API and<font color="#CCCCCC"> you realize that all RSA</font>

408
00:16:11,899 --> 00:16:17,180
encryption is actually actually modular

409
00:16:14,510 --> 00:16:18,890
to initiation<font color="#E5E5E5"> so I can use</font><font color="#CCCCCC"> that and then</font>

410
00:16:17,180 --> 00:16:21,019
you use the<font color="#E5E5E5"> compressor which is very</font>

411
00:16:18,890 --> 00:16:24,350
fast<font color="#E5E5E5"> but there are some limitations</font>

412
00:16:21,019 --> 00:16:26,510
<font color="#CCCCCC">these are technical problems</font><font color="#E5E5E5"> about</font>

413
00:16:24,350 --> 00:16:28,550
regarding the<font color="#CCCCCC"> modulo size and that</font><font color="#E5E5E5"> here</font>

414
00:16:26,510 --> 00:16:30,950
<font color="#E5E5E5">is where you use the CPU to make it all</font>

415
00:16:28,550 --> 00:16:32,899
<font color="#E5E5E5">work regardless of the modulo that the</font>

416
00:16:30,950 --> 00:16:34,190
user provides<font color="#E5E5E5"> so and this</font><font color="#CCCCCC"> is a very</font>

417
00:16:32,899 --> 00:16:35,120
simple<font color="#E5E5E5"> example here is a more</font>

418
00:16:34,190 --> 00:16:36,920
complicated one

419
00:16:35,120 --> 00:16:39,620
so the elliptic curve<font color="#CCCCCC"> points color</font>

420
00:16:36,920 --> 00:16:42,010
multiplication which you definitely<font color="#CCCCCC"> need</font>

421
00:16:39,620 --> 00:16:44,570
if you want<font color="#E5E5E5"> to build a crypto algorithm</font>

422
00:16:42,010 --> 00:16:45,890
it's more complicated<font color="#CCCCCC"> so as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see</font>

423
00:16:44,570 --> 00:16:47,060
we start with a coprocessor

424
00:16:45,890 --> 00:16:48,649
<font color="#CCCCCC">we</font><font color="#E5E5E5"> will do the elliptic curve</font>

425
00:16:47,060 --> 00:16:50,540
diffie-hellman there we get<font color="#E5E5E5"> an</font>

426
00:16:48,649 --> 00:16:52,250
intermediate<font color="#E5E5E5"> result which we feed to the</font>

427
00:16:50,540 --> 00:16:54,560
CPU<font color="#E5E5E5"> would do some processing which</font>

428
00:16:52,250 --> 00:16:56,380
thankfully<font color="#E5E5E5"> it's lightweight and then the</font>

429
00:16:54,560 --> 00:16:58,670
result of<font color="#CCCCCC"> that we give it back to the</font>

430
00:16:56,380 --> 00:17:01,730
<font color="#CCCCCC">processor and then we get the final</font>

431
00:16:58,670 --> 00:17:03,410
result<font color="#E5E5E5"> so there is a bit of back</font><font color="#CCCCCC"> and</font>

432
00:17:01,730 --> 00:17:06,790
<font color="#CCCCCC">forth</font><font color="#E5E5E5"> between the compressor and the CPU</font>

433
00:17:03,410 --> 00:17:10,449
<font color="#E5E5E5">and of course you may be wondering how</font>

434
00:17:06,790 --> 00:17:13,750
<font color="#E5E5E5">fast this is so</font><font color="#CCCCCC"> here is our timings for</font>

435
00:17:10,449 --> 00:17:15,890
elliptic<font color="#E5E5E5"> curve operations we are</font><font color="#CCCCCC"> all</font>

436
00:17:13,750 --> 00:17:17,449
depends on<font color="#E5E5E5"> as you can see it depends</font><font color="#CCCCCC"> on</font>

437
00:17:15,890 --> 00:17:20,419
the card<font color="#CCCCCC"> some of them are faster some of</font>

438
00:17:17,449 --> 00:17:22,329
them are slower<font color="#CCCCCC"> usually it's the</font><font color="#E5E5E5"> slowest</font>

439
00:17:20,419 --> 00:17:24,829
operation is a<font color="#E5E5E5"> multiplication which</font><font color="#CCCCCC"> this</font>

440
00:17:22,329 --> 00:17:27,770
rounds up<font color="#CCCCCC"> to four seconds I haven't seen</font>

441
00:17:24,829 --> 00:17:29,870
anything slower than<font color="#CCCCCC"> that and then we</font>

442
00:17:27,770 --> 00:17:31,820
<font color="#E5E5E5">also have these operations which are for</font>

443
00:17:29,870 --> 00:17:33,860
big numbers<font color="#CCCCCC"> these are all less than a</font>

444
00:17:31,820 --> 00:17:36,080
second<font color="#CCCCCC"> and they happen very fast because</font>

445
00:17:33,860 --> 00:17:40,520
<font color="#CCCCCC">they are simpler and</font><font color="#E5E5E5"> of course some cars</font>

446
00:17:36,080 --> 00:17:41,928
do better than others<font color="#CCCCCC"> this</font><font color="#E5E5E5"> was one</font><font color="#CCCCCC"> of</font>

447
00:17:40,520 --> 00:17:44,030
the tools we<font color="#CCCCCC"> are releasing</font><font color="#E5E5E5"> the library</font>

448
00:17:41,929 --> 00:17:45,520
where Russell is<font color="#CCCCCC"> the profiler</font><font color="#E5E5E5"> so the</font>

449
00:17:44,030 --> 00:17:49,639
profiler

450
00:17:45,520 --> 00:17:51,650
it's basically aims to<font color="#E5E5E5"> fill sec to fill</font>

451
00:17:49,640 --> 00:17:53,360
in a gap that<font color="#E5E5E5"> exists right now the echo</font>

452
00:17:51,650 --> 00:17:55,790
system<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do speed</font>

453
00:17:53,360 --> 00:17:59,179
optimizations<font color="#E5E5E5"> it's not really</font><font color="#CCCCCC"> difficult</font>

454
00:17:55,790 --> 00:18:01,550
in<font color="#CCCCCC"> javacard</font><font color="#E5E5E5"> and there is no free profile</font>

455
00:17:59,180 --> 00:18:03,170
available simply simple as that<font color="#E5E5E5"> so we</font>

456
00:18:01,550 --> 00:18:04,820
realize the profiler here's the<font color="#CCCCCC"> URL we</font>

457
00:18:03,170 --> 00:18:07,220
can go<font color="#CCCCCC"> in there and</font><font color="#E5E5E5"> download it if you</font>

458
00:18:04,820 --> 00:18:09,800
want to<font color="#CCCCCC"> use it here are the</font><font color="#E5E5E5"> steps first</font>

459
00:18:07,220 --> 00:18:11,780
<font color="#E5E5E5">you</font><font color="#CCCCCC"> need to insert some performance trap</font>

460
00:18:09,800 --> 00:18:13,850
on<font color="#E5E5E5"> your source code just a single line</font>

461
00:18:11,780 --> 00:18:17,180
that<font color="#CCCCCC"> it tells</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> profile this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

462
00:18:13,850 --> 00:18:19,310
function<font color="#E5E5E5"> I want to or the</font><font color="#CCCCCC"> API call I</font>

463
00:18:17,180 --> 00:18:21,020
want to profile and<font color="#E5E5E5"> then we run the</font>

464
00:18:19,310 --> 00:18:23,060
<font color="#CCCCCC">automatic processor</font><font color="#E5E5E5"> and the result we</font>

465
00:18:21,020 --> 00:18:25,520
feed it into<font color="#E5E5E5"> the profiler which executes</font>

466
00:18:23,060 --> 00:18:27,379
your applet multiple times and<font color="#E5E5E5"> then</font>

467
00:18:25,520 --> 00:18:28,879
<font color="#E5E5E5">annotate the code with a measure timings</font>

468
00:18:27,380 --> 00:18:32,780
for<font color="#E5E5E5"> each one of the lines we're in the</font>

469
00:18:28,880 --> 00:18:36,380
<font color="#CCCCCC">city so on top of that we also have this</font>

470
00:18:32,780 --> 00:18:39,889
<font color="#E5E5E5">other project and this</font><font color="#CCCCCC"> is the third</font>

471
00:18:36,380 --> 00:18:41,840
<font color="#E5E5E5">thing we</font><font color="#CCCCCC"> probably</font><font color="#E5E5E5"> release today</font><font color="#CCCCCC"> so what</font>

472
00:18:39,890 --> 00:18:43,490
we did as<font color="#CCCCCC"> you said</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that if you buy a</font>

473
00:18:41,840 --> 00:18:45,709
card<font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't really know what's in</font>

474
00:18:43,490 --> 00:18:47,360
<font color="#E5E5E5">there we have to</font><font color="#CCCCCC"> test by yourself so we</font>

475
00:18:45,710 --> 00:18:49,460
bought a bunch of<font color="#E5E5E5"> cards more than 60</font>

476
00:18:47,360 --> 00:18:51,590
actually and we tested them for<font color="#CCCCCC"> 230</font>

477
00:18:49,460 --> 00:18:54,980
algorithms and we released a huge table

478
00:18:51,590 --> 00:18:57,139
<font color="#E5E5E5">which which basically says would</font><font color="#CCCCCC"> huggers</font>

479
00:18:54,980 --> 00:18:59,720
<font color="#CCCCCC">are supported supported by which cards</font>

480
00:18:57,140 --> 00:19:01,550
and also discusses the performance of

481
00:18:59,720 --> 00:19:04,670
its card<font color="#E5E5E5"> because as we've seen the</font>

482
00:19:01,550 --> 00:19:06,590
performance differs differs<font color="#E5E5E5"> and here's</font>

483
00:19:04,670 --> 00:19:08,720
the development cycle<font color="#CCCCCC"> so how would you</font>

484
00:19:06,590 --> 00:19:10,250
develop Java card applet<font color="#E5E5E5"> if you're</font>

485
00:19:08,720 --> 00:19:12,830
interested<font color="#E5E5E5"> in to jumping into the</font>

486
00:19:10,250 --> 00:19:15,140
<font color="#CCCCCC">ecosystem so first we find</font><font color="#E5E5E5"> a suitable</font>

487
00:19:12,830 --> 00:19:17,720
<font color="#E5E5E5">card this was not</font><font color="#CCCCCC"> possible until now you</font>

488
00:19:15,140 --> 00:19:20,750
can go<font color="#E5E5E5"> to our table</font><font color="#CCCCCC"> and find the</font>

489
00:19:17,720 --> 00:19:22,430
coverage<font color="#E5E5E5"> that that satisfies your</font>

490
00:19:20,750 --> 00:19:25,220
application and then<font color="#E5E5E5"> you can use your</font>

491
00:19:22,430 --> 00:19:28,790
favorite ID<font color="#E5E5E5"> anything that</font><font color="#CCCCCC"> supports Java</font>

492
00:19:25,220 --> 00:19:31,580
<font color="#E5E5E5">should work</font><font color="#CCCCCC"> then you use</font><font color="#E5E5E5"> the Java card</font>

493
00:19:28,790 --> 00:19:33,710
team for as a simulator<font color="#CCCCCC"> I I wouldn't</font>

494
00:19:31,580 --> 00:19:34,970
<font color="#E5E5E5">advise anyone to debug on the card it's</font>

495
00:19:33,710 --> 00:19:37,190
very time consuming

496
00:19:34,970 --> 00:19:39,560
counterproductive<font color="#E5E5E5"> so first of all the</font>

497
00:19:37,190 --> 00:19:41,030
part on the jacket simulator and then

498
00:19:39,560 --> 00:19:45,940
you can<font color="#E5E5E5"> build your applet using maven</font>

499
00:19:41,030 --> 00:19:48,379
<font color="#E5E5E5">and anti javacard</font><font color="#CCCCCC"> scripts</font><font color="#E5E5E5"> and plug</font>

500
00:19:45,940 --> 00:19:50,330
<font color="#E5E5E5">global platform</font><font color="#CCCCCC"> Pro will allow you to</font>

501
00:19:48,380 --> 00:19:52,550
<font color="#E5E5E5">upload this to the card and then we do</font>

502
00:19:50,330 --> 00:19:56,210
your profiling if you want to enhance

503
00:19:52,550 --> 00:19:58,550
your<font color="#E5E5E5"> performance so apart from these</font>

504
00:19:56,210 --> 00:19:59,270
we're working on some other<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> first</font>

505
00:19:58,550 --> 00:20:02,090
<font color="#E5E5E5">one is</font><font color="#CCCCCC"> bay</font>

506
00:19:59,270 --> 00:20:06,020
sickly<font color="#E5E5E5"> semi-automatic automated porting</font>

507
00:20:02,090 --> 00:20:07,370
<font color="#CCCCCC">Java card</font><font color="#E5E5E5"> so what we want to do is to</font>

508
00:20:06,020 --> 00:20:10,340
make<font color="#E5E5E5"> it</font><font color="#CCCCCC"> tougher can</font><font color="#E5E5E5"> even more accessible</font>

509
00:20:07,370 --> 00:20:13,370
<font color="#CCCCCC">to Java developers</font><font color="#E5E5E5"> and this is further</font>

510
00:20:10,340 --> 00:20:14,990
<font color="#CCCCCC">amplified</font><font color="#E5E5E5"> this need by</font><font color="#CCCCCC"> the need for</font>

511
00:20:13,370 --> 00:20:18,979
important<font color="#CCCCCC"> security so it would be very</font>

512
00:20:14,990 --> 00:20:20,720
nice when we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a Java crypto code if</font>

513
00:20:18,980 --> 00:20:23,390
we were if<font color="#E5E5E5"> to have</font><font color="#CCCCCC"> a developers were</font>

514
00:20:20,720 --> 00:20:26,000
able<font color="#CCCCCC"> to easily</font><font color="#E5E5E5"> move it to the avocado as</font>

515
00:20:23,390 --> 00:20:27,650
a secure element<font color="#E5E5E5"> and run it there so we</font>

516
00:20:26,000 --> 00:20:30,830
have this port<font color="#E5E5E5"> we're building this</font>

517
00:20:27,650 --> 00:20:33,230
porting app that will<font color="#CCCCCC"> allow you to</font><font color="#E5E5E5"> do</font>

518
00:20:30,830 --> 00:20:35,060
that same<font color="#CCCCCC"> in a</font><font color="#E5E5E5"> semi automated manner and</font>

519
00:20:33,230 --> 00:20:37,340
then we have the Java card crypto<font color="#E5E5E5"> Lib</font>

520
00:20:35,060 --> 00:20:38,649
which is essentially a collection of

521
00:20:37,340 --> 00:20:43,510
crypto algorithm<font color="#E5E5E5"> in</font><font color="#CCCCCC"> plenty'</font>

522
00:20:38,650 --> 00:20:47,660
implementations<font color="#E5E5E5"> and what we aim to do is</font>

523
00:20:43,510 --> 00:20:49,700
we aim to minimize<font color="#CCCCCC"> that</font><font color="#E5E5E5"> three-year gap</font>

524
00:20:47,660 --> 00:20:52,130
that exists between<font color="#E5E5E5"> the specification</font>

525
00:20:49,700 --> 00:20:53,660
and<font color="#E5E5E5"> the actual world so people</font><font color="#CCCCCC"> can</font>

526
00:20:52,130 --> 00:20:55,220
develop<font color="#E5E5E5"> their own algorithms as it</font>

527
00:20:53,660 --> 00:20:56,870
happens with larger libraries like

528
00:20:55,220 --> 00:20:59,030
bouncy castle and other libraries and

529
00:20:56,870 --> 00:21:02,120
then put it there<font color="#CCCCCC"> for everyone</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> use or</font>

530
00:20:59,030 --> 00:21:03,860
audit<font color="#CCCCCC"> and if you are</font><font color="#E5E5E5"> interested we</font><font color="#CCCCCC"> would</font>

531
00:21:02,120 --> 00:21:05,419
be<font color="#E5E5E5"> very happy if you</font><font color="#CCCCCC"> if you would like</font>

532
00:21:03,860 --> 00:21:07,520
<font color="#CCCCCC">to contribute with the algorithms that</font>

533
00:21:05,420 --> 00:21:09,590
you're interested<font color="#E5E5E5"> in so if you have a</font>

534
00:21:07,520 --> 00:21:11,540
use case<font color="#E5E5E5"> and you build an algorithm</font><font color="#CCCCCC"> for</font>

535
00:21:09,590 --> 00:21:12,679
your specific use case you<font color="#E5E5E5"> can put it in</font>

536
00:21:11,540 --> 00:21:15,680
the library<font color="#E5E5E5"> and it's going to be there</font>

537
00:21:12,680 --> 00:21:17,510
for everyone<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> an audit and</font><font color="#CCCCCC"> here is</font>

538
00:21:15,680 --> 00:21:19,640
here are<font color="#CCCCCC"> the takeaways</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> our</font>

539
00:21:17,510 --> 00:21:22,460
<font color="#E5E5E5">presentation so first we</font><font color="#CCCCCC"> released the</font>

540
00:21:19,640 --> 00:21:24,170
<font color="#E5E5E5">Java code</font><font color="#CCCCCC"> mathlab</font><font color="#E5E5E5"> developers are not</font>

541
00:21:22,460 --> 00:21:26,770
free to<font color="#CCCCCC"> build their own up applications</font>

542
00:21:24,170 --> 00:21:28,730
they don't have to<font color="#E5E5E5"> rely on the</font>

543
00:21:26,770 --> 00:21:30,490
specification<font color="#E5E5E5"> anymore or the</font>

544
00:21:28,730 --> 00:21:34,760
manufacturers implement the algorithms

545
00:21:30,490 --> 00:21:36,140
and<font color="#E5E5E5"> also we have unlike everything else</font>

546
00:21:34,760 --> 00:21:37,850
in<font color="#E5E5E5"> Java card we have examples and</font>

547
00:21:36,140 --> 00:21:40,430
documentation<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we try to make it super</font>

548
00:21:37,850 --> 00:21:43,879
<font color="#CCCCCC">easy for</font><font color="#E5E5E5"> people to use then we also have</font>

549
00:21:40,430 --> 00:21:46,010
the performance<font color="#E5E5E5"> profiler which also</font>

550
00:21:43,880 --> 00:21:47,390
<font color="#E5E5E5">would hopefully help people to profile</font>

551
00:21:46,010 --> 00:21:50,690
the and increase the performance of

552
00:21:47,390 --> 00:21:52,580
their applications applets and then

553
00:21:50,690 --> 00:21:55,340
finally we have the<font color="#CCCCCC"> coverage in</font>

554
00:21:52,580 --> 00:21:58,480
performance<font color="#CCCCCC"> survey table which features</font>

555
00:21:55,340 --> 00:22:01,790
<font color="#E5E5E5">more</font><font color="#CCCCCC"> than 60 cards</font><font color="#E5E5E5"> and tests for</font><font color="#CCCCCC"> about</font>

556
00:21:58,480 --> 00:22:05,420
<font color="#E5E5E5">230 algorithms you can find all these on</font>

557
00:22:01,790 --> 00:22:08,889
that<font color="#E5E5E5"> URL</font><font color="#CCCCCC"> so we would be</font><font color="#E5E5E5"> very happy</font><font color="#CCCCCC"> and</font>

558
00:22:05,420 --> 00:22:16,450
yeah that<font color="#CCCCCC"> was it thank you</font>

559
00:22:08,890 --> 00:22:20,260
[Applause]

560
00:22:16,450 --> 00:22:20,260
okay we have a<font color="#E5E5E5"> question</font>

561
00:22:29,260 --> 00:22:34,500
could you use the microphone because<font color="#CCCCCC"> I</font>

562
00:22:31,150 --> 00:22:34,500
cannot hear very<font color="#CCCCCC"> well I'm</font><font color="#E5E5E5"> sorry</font>

563
00:22:36,670 --> 00:22:39,720
so in a lot of cases

564
00:22:39,730 --> 00:22:43,780
in a lot of cases in banking and

565
00:22:41,700 --> 00:22:45,780
<font color="#E5E5E5">authentication use cases</font><font color="#CCCCCC"> you need</font><font color="#E5E5E5"> FIPS</font>

566
00:22:43,780 --> 00:22:49,030
<font color="#CCCCCC">140-2 validation on some of these cards</font>

567
00:22:45,780 --> 00:22:50,230
are you planning to either submit

568
00:22:49,030 --> 00:22:52,270
<font color="#E5E5E5">because</font><font color="#CCCCCC"> that's what bouncy castle does</font>

569
00:22:50,230 --> 00:22:54,190
right they submit for 142 and they<font color="#E5E5E5"> get a</font>

570
00:22:52,270 --> 00:22:56,350
<font color="#E5E5E5">level 1 certification on their library</font>

571
00:22:54,190 --> 00:22:57,400
would you do<font color="#E5E5E5"> that with this</font><font color="#CCCCCC"> library or</font>

572
00:22:56,350 --> 00:22:59,530
how does that<font color="#E5E5E5"> interplay with the</font>

573
00:22:57,400 --> 00:23:00,760
security validations on<font color="#E5E5E5"> the cards</font><font color="#CCCCCC"> ok</font>

574
00:22:59,530 --> 00:23:03,430
that's a<font color="#E5E5E5"> very good question</font>

575
00:23:00,760 --> 00:23:05,560
I think first<font color="#E5E5E5"> we'll start building a</font>

576
00:23:03,430 --> 00:23:06,970
<font color="#E5E5E5">collection of algorithms and then we'll</font>

577
00:23:05,560 --> 00:23:07,990
start<font color="#E5E5E5"> to think more seriously about</font>

578
00:23:06,970 --> 00:23:09,730
moving that way

579
00:23:07,990 --> 00:23:11,740
so I think it's a bit further down<font color="#CCCCCC"> the</font>

580
00:23:09,730 --> 00:23:14,740
further down the line so first we<font color="#CCCCCC"> need</font>

581
00:23:11,740 --> 00:23:17,710
to<font color="#E5E5E5"> have the actual algorithms</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> now</font>

582
00:23:14,740 --> 00:23:20,350
we're<font color="#CCCCCC"> not there yet we have all</font><font color="#E5E5E5"> the math</font>

583
00:23:17,710 --> 00:23:22,030
operations and that we can<font color="#E5E5E5"> possibly move</font>

584
00:23:20,350 --> 00:23:24,550
on that way but right now<font color="#E5E5E5"> we're not</font>

585
00:23:22,030 --> 00:23:27,910
certified<font color="#E5E5E5"> that would be</font><font color="#CCCCCC"> very interesting</font>

586
00:23:24,550 --> 00:23:29,470
actually<font color="#E5E5E5"> to do yes and if there are</font>

587
00:23:27,910 --> 00:23:32,380
<font color="#E5E5E5">other libraries doing that which of</font>

588
00:23:29,470 --> 00:23:35,550
<font color="#CCCCCC">course there</font><font color="#E5E5E5"> are we can basically follow</font>

589
00:23:32,380 --> 00:23:38,260
follow them in the<font color="#E5E5E5"> actual process</font><font color="#CCCCCC"> of it</font>

590
00:23:35,550 --> 00:23:41,230
another question yeah then you go<font color="#E5E5E5"> back</font>

591
00:23:38,260 --> 00:23:43,960
<font color="#CCCCCC">to slides to the</font><font color="#E5E5E5"> workflow please</font><font color="#CCCCCC"> the one</font>

592
00:23:41,230 --> 00:23:45,790
<font color="#E5E5E5">question is if number three here</font>

593
00:23:43,960 --> 00:23:47,620
debugging using<font color="#CCCCCC"> J card simulator would</font>

594
00:23:45,790 --> 00:23:50,050
be practical as a first step<font color="#E5E5E5"> for</font><font color="#CCCCCC"> those</font>

595
00:23:47,620 --> 00:23:52,239
<font color="#E5E5E5">new new users that don't know how to</font>

596
00:23:50,050 --> 00:23:54,250
find a suitable card<font color="#E5E5E5"> would it be good</font>

597
00:23:52,240 --> 00:23:56,820
<font color="#CCCCCC">for that</font><font color="#E5E5E5"> you know without buying one and</font>

598
00:23:54,250 --> 00:23:58,990
<font color="#E5E5E5">realizing it's the wrong one mm-hm</font><font color="#CCCCCC"> so</font>

599
00:23:56,820 --> 00:24:02,470
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> definitely that's a very good</font>

600
00:23:58,990 --> 00:24:05,140
question<font color="#CCCCCC"> so what I would suggest is use</font>

601
00:24:02,470 --> 00:24:07,540
<font color="#E5E5E5">you don't buy a card before</font><font color="#CCCCCC"> you reach</font>

602
00:24:05,140 --> 00:24:07,750
step<font color="#CCCCCC"> three and</font><font color="#E5E5E5"> you can definitely do</font>

603
00:24:07,540 --> 00:24:09,760
that

604
00:24:07,750 --> 00:24:13,120
so you build your application<font color="#CCCCCC"> and then</font>

605
00:24:09,760 --> 00:24:14,620
<font color="#E5E5E5">you check</font><font color="#CCCCCC"> okay which algorithms have</font>

606
00:24:13,120 --> 00:24:16,750
used if you know from the beginning

607
00:24:14,620 --> 00:24:18,790
<font color="#CCCCCC">which what we are going</font><font color="#E5E5E5"> to use</font><font color="#CCCCCC"> fine we</font>

608
00:24:16,750 --> 00:24:20,290
can use<font color="#CCCCCC"> our table on step</font><font color="#E5E5E5"> one but in</font>

609
00:24:18,790 --> 00:24:21,520
some<font color="#E5E5E5"> cases where you start building and</font>

610
00:24:20,290 --> 00:24:24,700
you're not<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> how you're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to do</font>

611
00:24:21,520 --> 00:24:26,470
it then<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can use our table and find</font>

612
00:24:24,700 --> 00:24:29,320
which cards<font color="#E5E5E5"> fully supports what you</font><font color="#CCCCCC"> want</font>

613
00:24:26,470 --> 00:24:33,580
to do and then you<font color="#E5E5E5"> go out</font><font color="#CCCCCC"> and you find a</font>

614
00:24:29,320 --> 00:24:36,280
card that<font color="#E5E5E5"> fits your purposes or on top</font>

615
00:24:33,580 --> 00:24:39,840
<font color="#E5E5E5">of that if it's very likely that</font><font color="#CCCCCC"> our</font>

616
00:24:36,280 --> 00:24:42,220
library covers you need so you<font color="#CCCCCC"> find a</font>

617
00:24:39,840 --> 00:24:42,709
card that<font color="#E5E5E5"> works very nice with</font><font color="#CCCCCC"> your</font>

618
00:24:42,220 --> 00:24:44,510
librarian

619
00:24:42,710 --> 00:24:45,799
it's fast on what you want to<font color="#E5E5E5"> do and you</font>

620
00:24:44,510 --> 00:24:47,029
do that instead<font color="#E5E5E5"> so you have two</font>

621
00:24:45,799 --> 00:24:48,320
alternatives either you<font color="#E5E5E5"> can find the</font>

622
00:24:47,029 --> 00:24:50,330
<font color="#E5E5E5">card</font><font color="#CCCCCC"> that out of the book supports</font>

623
00:24:48,320 --> 00:24:52,279
<font color="#E5E5E5">everything you want to do or you find</font>

624
00:24:50,330 --> 00:24:53,990
the card<font color="#CCCCCC"> that doesn't support</font><font color="#E5E5E5"> everything</font>

625
00:24:52,279 --> 00:24:56,179
but it<font color="#E5E5E5"> runs very</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> with a library</font>

626
00:24:53,990 --> 00:25:00,590
which supports<font color="#CCCCCC"> your application thank</font>

627
00:24:56,179 --> 00:25:02,539
you have you worked<font color="#E5E5E5"> with any of the</font>

628
00:25:00,590 --> 00:25:05,480
<font color="#CCCCCC">vendors or with</font><font color="#E5E5E5"> Oracle on any of this</font>

629
00:25:02,539 --> 00:25:09,140
like any of this<font color="#CCCCCC"> Java cart vendors to</font>

630
00:25:05,480 --> 00:25:11,390
<font color="#E5E5E5">Malta or any of the others so not really</font>

631
00:25:09,140 --> 00:25:12,950
we're<font color="#CCCCCC"> not cooperating with any of them I</font>

632
00:25:11,390 --> 00:25:16,340
know that some<font color="#CCCCCC"> of them they have</font>

633
00:25:12,950 --> 00:25:18,440
<font color="#E5E5E5">proprietary api's and it would be very</font>

634
00:25:16,340 --> 00:25:22,039
nice<font color="#E5E5E5"> if they decided to</font><font color="#CCCCCC"> open those api's</font>

635
00:25:18,440 --> 00:25:23,419
may be<font color="#E5E5E5"> motivated by a library</font><font color="#CCCCCC"> but that's</font>

636
00:25:22,039 --> 00:25:26,299
left to<font color="#E5E5E5"> see and I think</font><font color="#CCCCCC"> this ecosystem</font>

637
00:25:23,419 --> 00:25:28,880
music<font color="#E5E5E5"> is notoriously slow into changes</font>

638
00:25:26,299 --> 00:25:32,418
so<font color="#E5E5E5"> let's see in</font><font color="#CCCCCC"> the next few years how</font>

639
00:25:28,880 --> 00:25:35,179
it's going to go<font color="#E5E5E5"> okay</font>

640
00:25:32,419 --> 00:25:38,049
thank<font color="#E5E5E5"> you I'll do a wrap-up session so</font>

641
00:25:35,179 --> 00:25:38,049
<font color="#E5E5E5">we have more</font><font color="#CCCCCC"> Christmas</font>

642
00:25:43,560 --> 00:25:48,169
[Applause]

