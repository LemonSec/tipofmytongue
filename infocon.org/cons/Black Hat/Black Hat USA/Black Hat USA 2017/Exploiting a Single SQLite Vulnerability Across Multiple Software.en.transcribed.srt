1
00:00:00,000 --> 00:00:09,330
hello everyone my name is<font color="#E5E5E5"> Quinn</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

2
00:00:03,090 --> 00:00:11,429
<font color="#E5E5E5">G our topic today is many birds one</font>

3
00:00:09,330 --> 00:00:15,799
stone<font color="#E5E5E5"> exploiting a single cycle I'd</font>

4
00:00:11,429 --> 00:00:15,799
Varner ability across<font color="#CCCCCC"> multiple software</font>

5
00:00:21,560 --> 00:00:28,470
it's the first time<font color="#CCCCCC"> for us</font><font color="#E5E5E5"> to be</font>

6
00:00:24,150 --> 00:00:30,689
presenting at playhead so let me do some

7
00:00:28,470 --> 00:00:33,960
self introduction we are security

8
00:00:30,689 --> 00:00:37,100
researchers from<font color="#CCCCCC"> Shaitan</font><font color="#E5E5E5"> security shade</font>

9
00:00:33,960 --> 00:00:39,530
<font color="#CCCCCC">and Tech it's a company from China</font>

10
00:00:37,100 --> 00:00:42,600
<font color="#E5E5E5">providing pen testing service and</font>

11
00:00:39,530 --> 00:00:44,930
enterprise products we are in the

12
00:00:42,600 --> 00:00:48,270
security research team in the company

13
00:00:44,930 --> 00:00:52,829
the team name<font color="#CCCCCC"> is trading security</font>

14
00:00:48,270 --> 00:00:56,370
research lab we<font color="#E5E5E5"> pawned</font><font color="#CCCCCC"> four targets in</font>

15
00:00:52,829 --> 00:01:00,000
this year's<font color="#E5E5E5"> Pantone contest and the bugs</font>

16
00:00:56,370 --> 00:01:05,630
we will talk today are used in the

17
00:01:00,000 --> 00:01:09,539
contest<font color="#E5E5E5"> we also did ps4 jailbreak</font>

18
00:01:05,630 --> 00:01:13,880
<font color="#CCCCCC">Android rooting</font><font color="#E5E5E5"> in keep on a smart</font>

19
00:01:09,540 --> 00:01:18,240
device<font color="#E5E5E5"> opponent contest from China</font>

20
00:01:13,880 --> 00:01:21,060
we<font color="#E5E5E5"> are city of players we were in the</font>

21
00:01:18,240 --> 00:01:26,820
team blue last year and won<font color="#E5E5E5"> the second</font>

22
00:01:21,060 --> 00:01:28,619
place at<font color="#E5E5E5"> DEFCON CTF 2016 next satirist</font>

23
00:01:26,820 --> 00:01:31,490
are the main topic by introducing

24
00:01:28,619 --> 00:01:31,490
<font color="#E5E5E5">circulate</font>

25
00:01:39,700 --> 00:01:46,490
<font color="#CCCCCC">how everyone</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> CG I think most of you</font>

26
00:01:43,850 --> 00:01:50,229
<font color="#E5E5E5">have heard or used the</font><font color="#CCCCCC"> sicko light</font><font color="#E5E5E5"> it's</font>

27
00:01:46,490 --> 00:01:53,419
an in process library that implements

28
00:01:50,230 --> 00:01:55,640
<font color="#E5E5E5">self content high reliability zero</font>

29
00:01:53,420 --> 00:01:59,330
configuration and transactional secure

30
00:01:55,640 --> 00:02:02,840
database engine<font color="#E5E5E5"> it is widely used as a</font>

31
00:01:59,330 --> 00:02:06,170
embedded database software for local or

32
00:02:02,840 --> 00:02:07,869
<font color="#CCCCCC">a client</font><font color="#E5E5E5"> storage in the applications</font>

33
00:02:06,170 --> 00:02:14,209
like the browsers<font color="#CCCCCC"> and mobile</font>

34
00:02:07,869 --> 00:02:17,989
applications this project starts in 2000

35
00:02:14,209 --> 00:02:21,620
<font color="#E5E5E5">is 17</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> old and it's too old to be</font>

36
00:02:17,989 --> 00:02:23,840
<font color="#E5E5E5">secure</font><font color="#CCCCCC"> if we find any new attack surface</font>

37
00:02:21,620 --> 00:02:26,480
or new vulnerability in psycho<font color="#E5E5E5"> lights</font>

38
00:02:23,840 --> 00:02:32,230
many projects built on<font color="#E5E5E5"> security will be</font>

39
00:02:26,480 --> 00:02:34,690
<font color="#E5E5E5">affected there are some previously</font>

40
00:02:32,230 --> 00:02:38,179
<font color="#CCCCCC">researched about</font><font color="#E5E5E5"> attacking psycho light</font>

41
00:02:34,690 --> 00:02:41,930
the database engine<font color="#CCCCCC"> it suffers from</font>

42
00:02:38,180 --> 00:02:44,450
<font color="#CCCCCC">psycho injection here are</font><font color="#E5E5E5"> some extreme</font>

43
00:02:41,930 --> 00:02:46,730
examples<font color="#CCCCCC"> of the psycho light tricks</font>

44
00:02:44,450 --> 00:02:49,869
<font color="#E5E5E5">taken</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the psycho light injection</font>

45
00:02:46,730 --> 00:02:52,730
cheat sheet if you<font color="#E5E5E5"> are familiar with</font>

46
00:02:49,870 --> 00:02:56,840
<font color="#CCCCCC">suku injection you will understand these</font>

47
00:02:52,730 --> 00:02:59,149
attacks immediately<font color="#CCCCCC"> basically circulate</font>

48
00:02:56,840 --> 00:03:03,799
reads and writes directly to ordinary

49
00:02:59,150 --> 00:03:06,680
files<font color="#E5E5E5"> if you can attach any file and as</font>

50
00:03:03,799 --> 00:03:10,400
a new database<font color="#E5E5E5"> and write your web show</font>

51
00:03:06,680 --> 00:03:13,340
<font color="#CCCCCC">and there's also</font><font color="#E5E5E5"> a special function a</font>

52
00:03:10,400 --> 00:03:17,570
lot extension<font color="#E5E5E5"> it can be used to allowed</font>

53
00:03:13,340 --> 00:03:20,600
shared libraries these two methods<font color="#E5E5E5"> give</font>

54
00:03:17,570 --> 00:03:25,160
you<font color="#E5E5E5"> a shell or your remote shared</font>

55
00:03:20,600 --> 00:03:30,079
<font color="#E5E5E5">directory however they are usually if</font>

56
00:03:25,160 --> 00:03:32,600
restricted in<font color="#E5E5E5"> real-world cases so we are</font>

57
00:03:30,080 --> 00:03:36,260
more<font color="#E5E5E5"> interested in memory corruption</font>

58
00:03:32,600 --> 00:03:39,049
bugs<font color="#CCCCCC"> in psycho</font><font color="#E5E5E5"> light now we are going to</font>

59
00:03:36,260 --> 00:03:45,100
<font color="#E5E5E5">reveal some public circulatory abilities</font>

60
00:03:39,049 --> 00:03:49,280
in history as we know<font color="#CCCCCC"> security database</font>

61
00:03:45,100 --> 00:03:50,750
has some tables indexes<font color="#E5E5E5"> triggers or</font>

62
00:03:49,280 --> 00:03:53,650
wheels

63
00:03:50,750 --> 00:03:58,190
and they are all contained<font color="#E5E5E5"> in a single</font>

64
00:03:53,650 --> 00:04:02,590
<font color="#E5E5E5">disk file the database file</font><font color="#CCCCCC"> format</font><font color="#E5E5E5"> is</font>

65
00:03:58,190 --> 00:04:06,950
cross-platform<font color="#CCCCCC"> that means you can copy</font>

66
00:04:02,590 --> 00:04:13,520
the same database<font color="#E5E5E5"> file between 32 bits</font>

67
00:04:06,950 --> 00:04:15,940
<font color="#E5E5E5">and 46 a 64 piece system</font><font color="#CCCCCC"> or move between</font>

68
00:04:13,520 --> 00:04:19,850
the big-endian little-endian

69
00:04:15,940 --> 00:04:21,950
<font color="#E5E5E5">architectures these features</font><font color="#CCCCCC"> makes it</font>

70
00:04:19,850 --> 00:04:26,180
<font color="#CCCCCC">quite a popular choice for</font><font color="#E5E5E5"> the</font>

71
00:04:21,950 --> 00:04:28,550
application application format<font color="#CCCCCC"> but they</font>

72
00:04:26,180 --> 00:04:32,720
also bring a<font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of troubles into</font><font color="#CCCCCC"> a</font>

73
00:04:28,550 --> 00:04:35,660
psycho light as we know it's<font color="#E5E5E5"> very</font><font color="#CCCCCC"> hard</font>

74
00:04:32,720 --> 00:04:41,890
to write a perfect parser for most<font color="#CCCCCC"> five</font>

75
00:04:35,660 --> 00:04:45,800
<font color="#CCCCCC">four months</font><font color="#E5E5E5"> hmm it's same for</font><font color="#CCCCCC"> SiC light</font>

76
00:04:41,890 --> 00:04:49,070
as you see these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> 2cv in recent years</font>

77
00:04:45,800 --> 00:04:51,220
they<font color="#E5E5E5"> are describing some issues when</font>

78
00:04:49,070 --> 00:04:55,730
<font color="#E5E5E5">passing</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> malformed database file and</font>

79
00:04:51,220 --> 00:04:58,250
they can cause some<font color="#E5E5E5"> hip issues</font><font color="#CCCCCC"> well in</font>

80
00:04:55,730 --> 00:05:00,440
the real<font color="#E5E5E5"> world</font><font color="#CCCCCC"> I think the risk of hip</font>

81
00:04:58,250 --> 00:05:06,320
overflow during parsing the static

82
00:05:00,440 --> 00:05:09,080
database file is<font color="#E5E5E5"> really low</font><font color="#CCCCCC"> I think</font>

83
00:05:06,320 --> 00:05:14,480
<font color="#CCCCCC">these</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> are not very likely</font>

84
00:05:09,080 --> 00:05:17,570
exploitable<font color="#E5E5E5"> in the real world</font><font color="#CCCCCC"> but</font>

85
00:05:14,480 --> 00:05:18,890
<font color="#E5E5E5">luckily in most cases single light works</font>

86
00:05:17,570 --> 00:05:22,340
as an interpreter

87
00:05:18,890 --> 00:05:26,030
it runs security<font color="#E5E5E5"> statements from the</font>

88
00:05:22,340 --> 00:05:29,090
user interactively this provides a more

89
00:05:26,030 --> 00:05:33,950
flexible way for the hackers to trigger

90
00:05:29,090 --> 00:05:36,169
an explosion or ability for<font color="#CCCCCC"> example you</font>

91
00:05:33,950 --> 00:05:40,270
can you can set<font color="#CCCCCC"> up a control</font><font color="#E5E5E5"> environment</font>

92
00:05:36,169 --> 00:05:46,370
<font color="#E5E5E5">before</font><font color="#CCCCCC"> triggering any hip overflow this</font>

93
00:05:40,270 --> 00:05:49,340
these two<font color="#E5E5E5"> box is triggered in normal</font>

94
00:05:46,370 --> 00:05:52,040
statement of<font color="#CCCCCC"> sicklied there</font><font color="#E5E5E5"> the first</font>

95
00:05:49,340 --> 00:05:56,710
<font color="#CCCCCC">one is using select statement the second</font>

96
00:05:52,040 --> 00:06:00,169
is happening in<font color="#E5E5E5"> create a table statement</font>

97
00:05:56,710 --> 00:06:03,919
but these two are using some weird

98
00:06:00,169 --> 00:06:04,520
grammar<font color="#E5E5E5"> to trigger the bug that gives us</font>

99
00:06:03,919 --> 00:06:06,500
the<font color="#E5E5E5"> idea</font>

100
00:06:04,520 --> 00:06:08,539
how to find this bug you<font color="#CCCCCC"> if you have</font>

101
00:06:06,500 --> 00:06:13,340
enough<font color="#E5E5E5"> weird</font><font color="#CCCCCC"> gramma</font>

102
00:06:08,539 --> 00:06:19,430
we can easily fast the cigarette<font color="#CCCCCC"> and get</font>

103
00:06:13,340 --> 00:06:21,830
some<font color="#E5E5E5"> bucks actually a</font><font color="#CCCCCC"> fr</font><font color="#E5E5E5"> FL works where</font>

104
00:06:19,430 --> 00:06:24,440
we are on<font color="#CCCCCC"> cig light these pages</font>

105
00:06:21,830 --> 00:06:28,300
<font color="#E5E5E5">scrapping the previous work of another</font>

106
00:06:24,440 --> 00:06:34,960
hacker the the<font color="#E5E5E5"> author of AFL uses</font>

107
00:06:28,300 --> 00:06:38,720
cigarette<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the his</font><font color="#CCCCCC"> experiment</font><font color="#E5E5E5"> target</font>

108
00:06:34,960 --> 00:06:40,989
<font color="#CCCCCC">it was two years ago he ran FL for 30</font>

109
00:06:38,720 --> 00:06:45,169
minutes<font color="#E5E5E5"> and found 22 unique crashes</font>

110
00:06:40,990 --> 00:06:48,889
including<font color="#CCCCCC"> some usage of</font><font color="#E5E5E5"> only initialized</font>

111
00:06:45,169 --> 00:06:52,669
pointers invite the<font color="#CCCCCC"> freeze or heap or</font>

112
00:06:48,889 --> 00:06:57,500
stack buffer overflows now the

113
00:06:52,669 --> 00:07:00,440
developers of FL are also using<font color="#E5E5E5"> FL in</font>

114
00:06:57,500 --> 00:07:05,389
the testing strategy the following

115
00:07:00,440 --> 00:07:07,879
example is<font color="#CCCCCC"> CV in last page is very</font>

116
00:07:05,389 --> 00:07:11,840
simple and needs<font color="#E5E5E5"> finished in three lines</font>

117
00:07:07,879 --> 00:07:18,469
of<font color="#E5E5E5"> secure statements it cost invalid</font>

118
00:07:11,840 --> 00:07:21,020
<font color="#E5E5E5">free but I think if you want some random</font>

119
00:07:18,469 --> 00:07:24,949
<font color="#CCCCCC">bucks and report them for silly numbers</font>

120
00:07:21,020 --> 00:07:28,008
you can just run<font color="#E5E5E5"> FL use</font><font color="#CCCCCC"> about fun many</font>

121
00:07:24,949 --> 00:07:31,099
random<font color="#CCCCCC"> crushes well if you want to</font>

122
00:07:28,009 --> 00:07:34,069
exploit some<font color="#E5E5E5"> real word software you will</font>

123
00:07:31,099 --> 00:07:37,789
need deeper vulnerability and<font color="#CCCCCC"> better</font>

124
00:07:34,069 --> 00:07:44,090
<font color="#CCCCCC">knowledge of</font><font color="#E5E5E5"> your target this</font><font color="#CCCCCC"> is the</font>

125
00:07:37,789 --> 00:07:46,130
main<font color="#CCCCCC"> topic of our our presentation</font><font color="#E5E5E5"> now</font>

126
00:07:44,090 --> 00:07:51,529
we are going<font color="#E5E5E5"> to learn some basics about</font>

127
00:07:46,130 --> 00:07:54,740
<font color="#CCCCCC">the secret</font><font color="#E5E5E5"> implementation details every</font>

128
00:07:51,529 --> 00:07:57,229
<font color="#E5E5E5">value in</font><font color="#CCCCCC"> chico light has one of the five</font>

129
00:07:54,740 --> 00:08:01,460
fundamental data types they are in

130
00:07:57,229 --> 00:08:05,029
integers floating point number<font color="#E5E5E5"> string</font>

131
00:08:01,460 --> 00:08:08,630
probe and<font color="#E5E5E5"> newer they are very simple and</font>

132
00:08:05,029 --> 00:08:12,770
there's also we<font color="#E5E5E5"> should table</font><font color="#CCCCCC"> McKenzie</font><font color="#E5E5E5"> in</font>

133
00:08:08,630 --> 00:08:17,089
<font color="#CCCCCC">circle</font><font color="#E5E5E5"> I'd a vegetable is an object that</font>

134
00:08:12,770 --> 00:08:19,210
<font color="#CCCCCC">is registered with any</font><font color="#E5E5E5"> open secure</font><font color="#CCCCCC"> ID</font>

135
00:08:17,089 --> 00:08:21,800
<font color="#E5E5E5">database connection</font>

136
00:08:19,210 --> 00:08:24,229
there are<font color="#CCCCCC"> Quebec methods for the witch</font>

137
00:08:21,800 --> 00:08:30,110
table they<font color="#E5E5E5"> are invoked on the object</font>

138
00:08:24,229 --> 00:08:32,598
when you<font color="#CCCCCC"> operate the own vegetable</font><font color="#E5E5E5"> this</font>

139
00:08:30,110 --> 00:08:35,659
mechanism can<font color="#CCCCCC"> be used for representing</font>

140
00:08:32,599 --> 00:08:37,909
<font color="#CCCCCC">the in memory death structures or they</font>

141
00:08:35,659 --> 00:08:40,458
provide a view of the data<font color="#E5E5E5"> that is not</font>

142
00:08:37,909 --> 00:08:43,299
<font color="#CCCCCC">to collide format</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> they</font>

143
00:08:40,458 --> 00:08:49,339
provide the view of Jason or<font color="#CCCCCC"> C erased</font>

144
00:08:43,299 --> 00:08:51,920
<font color="#E5E5E5">and they are they are more dynamic</font><font color="#CCCCCC"> they</font>

145
00:08:49,339 --> 00:08:57,200
can be used<font color="#E5E5E5"> for</font><font color="#CCCCCC"> computing the content of</font>

146
00:08:51,920 --> 00:09:00,050
the application<font color="#E5E5E5"> on demand there are many</font>

147
00:08:57,200 --> 00:09:02,829
features<font color="#E5E5E5"> in</font><font color="#CCCCCC"> secure right</font>

148
00:09:00,050 --> 00:09:05,719
the features are introduced extensions

149
00:09:02,829 --> 00:09:08,930
<font color="#E5E5E5">most of them are</font><font color="#CCCCCC"> just implemented as</font>

150
00:09:05,720 --> 00:09:13,279
<font color="#CCCCCC">version table there are</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> interesting</font>

151
00:09:08,930 --> 00:09:17,870
<font color="#CCCCCC">buddha tables</font><font color="#E5E5E5"> FCS</font><font color="#CCCCCC"> 5</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> is for full</font>

152
00:09:13,279 --> 00:09:21,680
<font color="#E5E5E5">text search indexing and art</font><font color="#CCCCCC"> free module</font>

153
00:09:17,870 --> 00:09:25,790
<font color="#E5E5E5">archery is special index is designed for</font>

154
00:09:21,680 --> 00:09:30,739
<font color="#E5E5E5">doing range Curie's we will discuss them</font>

155
00:09:25,790 --> 00:09:34,520
later<font color="#CCCCCC"> now you might find the problem of</font>

156
00:09:30,740 --> 00:09:36,589
<font color="#CCCCCC">select some extensions like</font><font color="#E5E5E5"> FES 3 or</font><font color="#CCCCCC"> our</font>

157
00:09:34,520 --> 00:09:39,529
three modules require complex data

158
00:09:36,589 --> 00:09:44,589
structure<font color="#E5E5E5"> they have some internal data</font>

159
00:09:39,529 --> 00:09:48,170
is there are stored in the same<font color="#CCCCCC"> database</font>

160
00:09:44,589 --> 00:09:51,890
<font color="#CCCCCC">as we know there are only five types of</font>

161
00:09:48,170 --> 00:09:55,540
the fundamental data so the internal

162
00:09:51,890 --> 00:09:59,270
<font color="#CCCCCC">data</font><font color="#E5E5E5"> can only be stored as</font><font color="#CCCCCC"> The Blob type</font>

163
00:09:55,540 --> 00:10:01,279
now here's the questions how<font color="#CCCCCC"> can we how</font>

164
00:09:59,270 --> 00:10:04,430
can<font color="#E5E5E5"> we know</font><font color="#CCCCCC"> the original</font><font color="#E5E5E5"> type of the</font>

165
00:10:01,279 --> 00:10:08,899
blob data and should we trust the short

166
00:10:04,430 --> 00:10:11,270
<font color="#CCCCCC">probe data in the database actually we</font>

167
00:10:08,899 --> 00:10:16,040
can find the answers<font color="#CCCCCC"> by reading the</font>

168
00:10:11,270 --> 00:10:17,959
source code from reading<font color="#E5E5E5"> the source code</font>

169
00:10:16,040 --> 00:10:21,490
we<font color="#CCCCCC"> learned that the developers of</font>

170
00:10:17,959 --> 00:10:25,189
<font color="#CCCCCC">circulat don't like checking the types</font>

171
00:10:21,490 --> 00:10:29,149
in comments or<font color="#E5E5E5"> the</font><font color="#CCCCCC"> documents</font><font color="#E5E5E5"> they just</font>

172
00:10:25,190 --> 00:10:32,330
<font color="#E5E5E5">assume a variable with special names is</font>

173
00:10:29,149 --> 00:10:35,580
always associated<font color="#CCCCCC"> with special types</font>

174
00:10:32,330 --> 00:10:38,310
they just<font color="#E5E5E5"> trust the</font><font color="#CCCCCC"> Colin name or the</font>

175
00:10:35,580 --> 00:10:43,260
function argument name and everything

176
00:10:38,310 --> 00:10:47,310
else<font color="#E5E5E5"> from the database now we are going</font>

177
00:10:43,260 --> 00:10:50,760
to review<font color="#CCCCCC"> fds three</font><font color="#E5E5E5"> related</font><font color="#CCCCCC"> bug in</font>

178
00:10:47,310 --> 00:10:54,510
psycho light<font color="#CCCCCC"> it's reported two years ago</font>

179
00:10:50,760 --> 00:10:56,790
and but<font color="#E5E5E5"> not so many people researching</font>

180
00:10:54,510 --> 00:11:01,710
on it

181
00:10:56,790 --> 00:11:04,620
it's a bug in<font color="#E5E5E5"> FPS</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> actually I don't</font>

182
00:11:01,710 --> 00:11:09,000
<font color="#E5E5E5">think most people using secure I will</font>

183
00:11:04,620 --> 00:11:11,490
use the extension they are modules<font color="#E5E5E5"> not</font>

184
00:11:09,000 --> 00:11:18,210
<font color="#E5E5E5">that allow user to perform full-text</font>

185
00:11:11,490 --> 00:11:20,370
searches on<font color="#CCCCCC"> setup</font><font color="#E5E5E5"> documents from my</font>

186
00:11:18,210 --> 00:11:23,100
<font color="#CCCCCC">understanding they just provide the</font>

187
00:11:20,370 --> 00:11:26,760
algorithm framework and<font color="#E5E5E5"> you have to use</font>

188
00:11:23,100 --> 00:11:28,500
your your own tokenizer to process the

189
00:11:26,760 --> 00:11:31,620
documents or you can just<font color="#E5E5E5"> use the</font>

190
00:11:28,500 --> 00:11:35,310
default organizer is called simple they

191
00:11:31,620 --> 00:11:38,010
also provide audit organizers<font color="#CCCCCC"> FGS</font>

192
00:11:35,310 --> 00:11:41,939
provides an interface for<font color="#E5E5E5"> the developers</font>

193
00:11:38,010 --> 00:11:48,090
<font color="#E5E5E5">to implement their custom</font><font color="#CCCCCC"> colonisers</font>

194
00:11:41,940 --> 00:11:51,900
<font color="#E5E5E5">which is written in</font><font color="#CCCCCC"> c the FDS does not</font>

195
00:11:48,090 --> 00:11:56,880
provide a c function to allow user<font color="#CCCCCC"> to</font>

196
00:11:51,900 --> 00:12:00,870
register<font color="#E5E5E5"> the colonisers instead you have</font>

197
00:11:56,880 --> 00:12:05,189
<font color="#CCCCCC">to encode</font><font color="#E5E5E5"> your pointer to your</font><font color="#CCCCCC"> own</font>

198
00:12:00,870 --> 00:12:13,080
<font color="#CCCCCC">organizer in globe</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is just a raw</font>

199
00:12:05,190 --> 00:12:16,230
data then you<font color="#CCCCCC"> can pass the globe</font><font color="#E5E5E5"> to the</font>

200
00:12:13,080 --> 00:12:18,840
engines through the secure<font color="#E5E5E5"> statement you</font>

201
00:12:16,230 --> 00:12:23,490
need to use a<font color="#E5E5E5"> special scars function</font>

202
00:12:18,840 --> 00:12:25,620
that is<font color="#CCCCCC"> fds straight organizer</font><font color="#E5E5E5"> after</font>

203
00:12:23,490 --> 00:12:29,370
<font color="#CCCCCC">street organizer</font><font color="#E5E5E5"> except one or two</font>

204
00:12:25,620 --> 00:12:32,310
arguments<font color="#E5E5E5"> the first one is the</font><font color="#CCCCCC"> string of</font>

205
00:12:29,370 --> 00:12:35,580
your<font color="#E5E5E5"> tag natives name the second one is</font>

206
00:12:32,310 --> 00:12:39,420
a<font color="#CCCCCC"> bloap which is used as a pointer to</font>

207
00:12:35,580 --> 00:12:42,570
<font color="#E5E5E5">organize a module if there's only one</font>

208
00:12:39,420 --> 00:12:45,060
<font color="#E5E5E5">argument the</font><font color="#CCCCCC"> curie returns the address</font>

209
00:12:42,570 --> 00:12:49,410
<font color="#E5E5E5">of the registered</font>

210
00:12:45,060 --> 00:12:53,550
<font color="#CCCCCC">tokenizer which is in blob</font><font color="#E5E5E5"> if there are</font>

211
00:12:49,410 --> 00:12:56,510
two arguments<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Curie registers a new</font>

212
00:12:53,550 --> 00:12:59,819
<font color="#CCCCCC">kite organizer with given parameters</font>

213
00:12:56,510 --> 00:13:02,910
actually<font color="#E5E5E5"> there's no guarantee for the</font>

214
00:12:59,820 --> 00:13:05,520
type of<font color="#E5E5E5"> the blob in the</font><font color="#CCCCCC"> circle</font><font color="#E5E5E5"> statement</font>

215
00:13:02,910 --> 00:13:07,740
<font color="#E5E5E5">so it could be</font><font color="#CCCCCC"> very dangerous if you</font>

216
00:13:05,520 --> 00:13:13,920
just pass and dereference a pointer in

217
00:13:07,740 --> 00:13:18,030
<font color="#E5E5E5">circle</font><font color="#CCCCCC"> Curie's here's the POC</font><font color="#E5E5E5"> of the out</font>

218
00:13:13,920 --> 00:13:21,319
bug<font color="#E5E5E5"> it's very simple and elegant</font><font color="#CCCCCC"> the</font>

219
00:13:18,030 --> 00:13:22,980
first<font color="#CCCCCC"> security leaks a pointer to</font>

220
00:13:21,320 --> 00:13:28,230
<font color="#E5E5E5">internal structure</font>

221
00:13:22,980 --> 00:13:31,470
it's the tokenizer<font color="#E5E5E5"> simple the second</font>

222
00:13:28,230 --> 00:13:34,410
<font color="#E5E5E5">curate registers a newt organizer with</font>

223
00:13:31,470 --> 00:13:39,930
some render address neutral neither is

224
00:13:34,410 --> 00:13:43,319
my tokenizer<font color="#E5E5E5"> later we can create a</font>

225
00:13:39,930 --> 00:13:46,349
<font color="#CCCCCC">Witcher table using a ps3</font><font color="#E5E5E5"> might</font>

226
00:13:43,320 --> 00:13:48,150
organizer and they<font color="#E5E5E5"> were</font><font color="#CCCCCC"> used the email</font>

227
00:13:46,350 --> 00:13:51,990
<font color="#E5E5E5">address to look for some invalid</font>

228
00:13:48,150 --> 00:13:54,930
callbacks<font color="#E5E5E5"> that's memory corruption the</font>

229
00:13:51,990 --> 00:13:57,240
<font color="#CCCCCC">third curate shows that we have</font>

230
00:13:54,930 --> 00:14:04,589
<font color="#CCCCCC">successfully registered</font><font color="#E5E5E5"> mute organizer</font>

231
00:13:57,240 --> 00:14:07,170
<font color="#E5E5E5">and it's a stored in the database</font><font color="#CCCCCC"> to</font>

232
00:14:04,590 --> 00:14:11,220
summary the<font color="#E5E5E5"> back</font><font color="#CCCCCC"> its back it's a very</font>

233
00:14:07,170 --> 00:14:14,810
powerful bug and first it gives us

234
00:14:11,220 --> 00:14:22,170
ability to<font color="#E5E5E5"> leaks the address information</font>

235
00:14:14,810 --> 00:14:24,479
<font color="#E5E5E5">it returns the</font><font color="#CCCCCC"> buting tokenizer and it</font>

236
00:14:22,170 --> 00:14:29,099
leaks the base<font color="#E5E5E5"> address of the</font><font color="#CCCCCC"> sicklied</font>

237
00:14:24,480 --> 00:14:31,950
module it also and do you reference any

238
00:14:29,100 --> 00:14:35,820
<font color="#E5E5E5">untrusted pointer it's a very powerful</font>

239
00:14:31,950 --> 00:14:39,090
<font color="#E5E5E5">memory corruption the misuse of FPS rate</font>

240
00:14:35,820 --> 00:14:42,780
organizer can help us to bypass<font color="#CCCCCC"> SAR</font><font color="#E5E5E5"> and</font>

241
00:14:39,090 --> 00:14:47,400
<font color="#E5E5E5">the reference</font><font color="#CCCCCC"> untrusted ponder that's</font>

242
00:14:42,780 --> 00:14:50,160
enough for most exploitation<font color="#CCCCCC"> as I said</font>

243
00:14:47,400 --> 00:14:52,500
no one<font color="#CCCCCC"> will</font><font color="#E5E5E5"> hear</font><font color="#CCCCCC"> a Spectre has better</font>

244
00:14:50,160 --> 00:14:54,630
<font color="#CCCCCC">quality than any other previous secret</font>

245
00:14:52,500 --> 00:14:57,260
<font color="#E5E5E5">box and it can be exploited through</font>

246
00:14:54,630 --> 00:14:57,260
browsers

247
00:14:58,889 --> 00:15:05,740
before<font color="#E5E5E5"> putting the</font><font color="#CCCCCC"> bug two brothers we</font>

248
00:15:02,110 --> 00:15:12,040
<font color="#E5E5E5">have to know how to use it in the</font>

249
00:15:05,740 --> 00:15:14,800
browsers<font color="#E5E5E5"> basically there's a API web</font>

250
00:15:12,040 --> 00:15:20,399
<font color="#E5E5E5">secure database it's a web page API for</font>

251
00:15:14,800 --> 00:15:24,839
storing<font color="#E5E5E5"> the data in database that can be</font>

252
00:15:20,399 --> 00:15:29,769
pureed<font color="#CCCCCC"> through the secret language</font>

253
00:15:24,839 --> 00:15:33,610
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> the specification has been</font>

254
00:15:29,769 --> 00:15:37,720
stopped maintaining<font color="#E5E5E5"> since seven</font><font color="#CCCCCC"> years</font>

255
00:15:33,610 --> 00:15:40,420
ago but many modern browsers like<font color="#E5E5E5"> Google</font>

256
00:15:37,720 --> 00:15:42,790
Chrome Safari Opera have<font color="#E5E5E5"> an</font>

257
00:15:40,420 --> 00:15:47,860
implementation based on secure light<font color="#E5E5E5"> as</font>

258
00:15:42,790 --> 00:15:51,069
<font color="#CCCCCC">a</font><font color="#E5E5E5"> back-end of web</font><font color="#CCCCCC"> cycle tell base here's</font>

259
00:15:47,860 --> 00:15:54,899
an example of<font color="#E5E5E5"> using secure in the</font>

260
00:15:51,069 --> 00:16:01,779
browser<font color="#E5E5E5"> so you are just writing circle</font>

261
00:15:54,899 --> 00:16:05,939
in JavaScript from the the colored text

262
00:16:01,779 --> 00:16:09,309
you can<font color="#E5E5E5"> learn how to use the web circle</font>

263
00:16:05,939 --> 00:16:12,549
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> open</font><font color="#E5E5E5"> a database with your</font>

264
00:16:09,309 --> 00:16:16,269
name and version<font color="#E5E5E5"> and memory limit and</font>

265
00:16:12,549 --> 00:16:17,889
you start a transaction and doing a put

266
00:16:16,269 --> 00:16:21,819
a<font color="#CCCCCC"> callback in the transaction and</font>

267
00:16:17,889 --> 00:16:25,509
<font color="#CCCCCC">execute your secure</font><font color="#E5E5E5"> statements then you</font>

268
00:16:21,819 --> 00:16:28,089
also have another callback<font color="#E5E5E5"> handles the</font>

269
00:16:25,509 --> 00:16:34,480
result of the secure light<font color="#E5E5E5"> a secure</font><font color="#CCCCCC"> cool</font>

270
00:16:28,089 --> 00:16:37,749
<font color="#E5E5E5">wrist but the obstacle statements can be</font>

271
00:16:34,480 --> 00:16:40,240
<font color="#CCCCCC">exit</font><font color="#E5E5E5"> in the browser</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example this is</font>

272
00:16:37,749 --> 00:16:43,389
a code from the WebKit web<font color="#CCCCCC"> kid has a</font>

273
00:16:40,240 --> 00:16:45,730
secure database<font color="#E5E5E5"> authorized to check if</font>

274
00:16:43,389 --> 00:16:53,829
you are<font color="#CCCCCC"> you</font><font color="#E5E5E5"> are allowed</font><font color="#CCCCCC"> to perform</font>

275
00:16:45,730 --> 00:16:56,980
certain circle statements for example if

276
00:16:53,829 --> 00:16:58,859
you want to<font color="#E5E5E5"> create a virtual table</font><font color="#CCCCCC"> they</font>

277
00:16:56,980 --> 00:17:02,740
will check<font color="#E5E5E5"> the module name of your</font>

278
00:16:58,860 --> 00:17:08,439
statement owning<font color="#CCCCCC"> FTS s3</font><font color="#E5E5E5"> is allowed which</font>

279
00:17:02,740 --> 00:17:09,819
a table in WebKit and there are more

280
00:17:08,439 --> 00:17:11,470
restrictions

281
00:17:09,819 --> 00:17:15,040
for<font color="#E5E5E5"> functions they are so widely</font>

282
00:17:11,470 --> 00:17:17,680
<font color="#E5E5E5">supporter of the functions every time</font>

283
00:17:15,040 --> 00:17:21,310
you invoke a function<font color="#E5E5E5"> they will check if</font>

284
00:17:17,680 --> 00:17:24,610
you are<font color="#E5E5E5"> if it's a</font><font color="#CCCCCC"> whitelist</font><font color="#E5E5E5"> function for</font>

285
00:17:21,310 --> 00:17:29,110
example<font color="#E5E5E5"> FPS rate organizer the target</font>

286
00:17:24,609 --> 00:17:33,600
function<font color="#CCCCCC"> is not on the white list but we</font>

287
00:17:29,110 --> 00:17:38,590
have another<font color="#CCCCCC"> bug to bypass the</font>

288
00:17:33,600 --> 00:17:42,219
restriction actually this CV is reported

289
00:17:38,590 --> 00:17:49,810
with<font color="#CCCCCC"> the previous one to Xillia at the</font>

290
00:17:42,220 --> 00:17:52,180
same time<font color="#CCCCCC"> the idea is very</font><font color="#E5E5E5"> simple for</font>

291
00:17:49,810 --> 00:17:54,210
<font color="#CCCCCC">the world</font><font color="#E5E5E5"> well circulate it does not</font>

292
00:17:52,180 --> 00:17:58,240
check<font color="#CCCCCC"> the</font><font color="#E5E5E5"> default value</font><font color="#CCCCCC"> of an</font>

293
00:17:54,210 --> 00:18:02,380
initialized<font color="#CCCCCC"> oh : we could create a table</font>

294
00:17:58,240 --> 00:18:05,740
<font color="#E5E5E5">with expressions like</font><font color="#CCCCCC"> f guess</font><font color="#E5E5E5"> recognize</font>

295
00:18:02,380 --> 00:18:07,960
a simple<font color="#E5E5E5"> they</font><font color="#CCCCCC"> caused the privilege of</font>

296
00:18:05,740 --> 00:18:10,810
<font color="#E5E5E5">the functions the expression is</font>

297
00:18:07,960 --> 00:18:14,620
evaluated<font color="#E5E5E5"> when we insert a new</font><font color="#CCCCCC"> record</font>

298
00:18:10,810 --> 00:18:20,470
into the table then we<font color="#CCCCCC"> can read the</font>

299
00:18:14,620 --> 00:18:25,810
result back from<font color="#CCCCCC"> the database so in this</font>

300
00:18:20,470 --> 00:18:29,580
example the<font color="#E5E5E5"> read read</font><font color="#CCCCCC"> texts are where we</font>

301
00:18:25,810 --> 00:18:34,750
could insert the privileged call to the

302
00:18:29,580 --> 00:18:38,590
dangerous functions from this code we

303
00:18:34,750 --> 00:18:44,620
can<font color="#E5E5E5"> lick the base address of circulate</font>

304
00:18:38,590 --> 00:18:48,429
module in browsers now<font color="#E5E5E5"> exporting the bug</font>

305
00:18:44,620 --> 00:18:51,010
in the browser is kind of trivial<font color="#CCCCCC"> ASR is</font>

306
00:18:48,430 --> 00:18:54,190
or it's<font color="#E5E5E5"> already bypassed you need just</font>

307
00:18:51,010 --> 00:18:57,270
<font color="#E5E5E5">you just need to spray a lot memory and</font>

308
00:18:54,190 --> 00:19:01,510
dereference<font color="#E5E5E5"> and jump to your option</font>

309
00:18:57,270 --> 00:19:04,060
actually<font color="#E5E5E5"> we use the bug in our private</font>

310
00:19:01,510 --> 00:19:10,140
ps4 jailbreak<font color="#CCCCCC"> because they are using</font>

311
00:19:04,060 --> 00:19:10,139
WebKit and we<font color="#CCCCCC"> exploit</font><font color="#E5E5E5"> it blindly</font>

312
00:19:10,330 --> 00:19:15,419
now we are going<font color="#E5E5E5"> to discuss exploring</font>

313
00:19:12,550 --> 00:19:15,419
the bug in PHP

314
00:19:16,240 --> 00:19:23,490
for<font color="#E5E5E5"> many</font><font color="#CCCCCC"> case if you</font><font color="#E5E5E5"> have a website on</font>

315
00:19:18,820 --> 00:19:29,950
web<font color="#CCCCCC"> shell on some website you want to</font>

316
00:19:23,490 --> 00:19:32,080
get you<font color="#CCCCCC"> but you may</font><font color="#E5E5E5"> find the</font><font color="#CCCCCC"> admin set</font>

317
00:19:29,950 --> 00:19:37,270
the<font color="#CCCCCC"> disable functions</font><font color="#E5E5E5"> to restrict your</font>

318
00:19:32,080 --> 00:19:40,570
ability for future<font color="#CCCCCC"> pentesting this</font>

319
00:19:37,270 --> 00:19:43,300
<font color="#E5E5E5">decimal functions are restrictions in</font>

320
00:19:40,570 --> 00:19:48,669
PHP if you have the native code

321
00:19:43,300 --> 00:19:51,879
execution the then you are not in a real

322
00:19:48,670 --> 00:19:55,540
<font color="#E5E5E5">sandbox you can get a share by exporting</font>

323
00:19:51,880 --> 00:19:58,570
<font color="#CCCCCC">the back in circulate there are more</font>

324
00:19:55,540 --> 00:20:01,690
details<font color="#CCCCCC"> exploding in the</font><font color="#E5E5E5"> back because</font>

325
00:19:58,570 --> 00:20:04,860
<font color="#CCCCCC">Lee Phe and</font><font color="#E5E5E5"> live</font><font color="#CCCCCC"> circulatory is not</font><font color="#E5E5E5"> the</font>

326
00:20:01,690 --> 00:20:08,890
<font color="#E5E5E5">same library you might need to</font>

327
00:20:04,860 --> 00:20:12,850
reconstruct same the same environment

328
00:20:08,890 --> 00:20:15,400
from with the remote server you can use

329
00:20:12,850 --> 00:20:19,389
the leaked<font color="#E5E5E5"> information from PHP info and</font>

330
00:20:15,400 --> 00:20:25,180
<font color="#E5E5E5">build same same environment and test</font>

331
00:20:19,390 --> 00:20:29,020
your exploit<font color="#CCCCCC"> there are more details</font>

332
00:20:25,180 --> 00:20:31,080
about<font color="#E5E5E5"> exploiting PHP basically you will</font>

333
00:20:29,020 --> 00:20:35,500
trigger some callbacks<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the faked</font>

334
00:20:31,080 --> 00:20:40,300
structure we found as a callback<font color="#CCCCCC"> X open</font>

335
00:20:35,500 --> 00:20:44,110
<font color="#E5E5E5">that takes one</font><font color="#CCCCCC"> argument</font><font color="#E5E5E5"> from the sucrose</font>

336
00:20:40,300 --> 00:20:47,830
statements then you can find a gadget

337
00:20:44,110 --> 00:20:50,590
that points to<font color="#E5E5E5"> P open</font><font color="#CCCCCC"> or a system that</font>

338
00:20:47,830 --> 00:20:53,350
can directly jump<font color="#E5E5E5"> a return a</font><font color="#CCCCCC"> share for</font>

339
00:20:50,590 --> 00:20:58,629
<font color="#E5E5E5">you or there are</font><font color="#CCCCCC"> many other</font><font color="#E5E5E5"> tricks you</font>

340
00:20:53,350 --> 00:21:01,870
<font color="#CCCCCC">can see we know cigarette is processing</font>

341
00:20:58,630 --> 00:21:03,340
a database<font color="#E5E5E5"> file if you open the pass</font>

342
00:21:01,870 --> 00:21:06,129
with<font color="#CCCCCC"> : memory :</font>

343
00:21:03,340 --> 00:21:09,780
<font color="#E5E5E5">then all operations are done in the same</font>

344
00:21:06,130 --> 00:21:17,710
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> you can use that to spray your</font>

345
00:21:09,780 --> 00:21:22,020
structure<font color="#CCCCCC"> now we are talking about</font><font color="#E5E5E5"> the</font>

346
00:21:17,710 --> 00:21:26,500
reactions of<font color="#CCCCCC"> the other vendors actually</font>

347
00:21:22,020 --> 00:21:29,690
<font color="#E5E5E5">Android has a custom branch of</font><font color="#CCCCCC"> sicklied</font>

348
00:21:26,500 --> 00:21:33,320
and the<font color="#E5E5E5"> Android team has noticed the</font>

349
00:21:29,690 --> 00:21:36,769
of<font color="#CCCCCC"> FDS</font><font color="#E5E5E5"> recognizer</font><font color="#CCCCCC"> and they disable it</font>

350
00:21:33,320 --> 00:21:38,870
<font color="#CCCCCC">three years ago it's happening it's</font>

351
00:21:36,769 --> 00:21:44,000
happened<font color="#E5E5E5"> before the report</font><font color="#CCCCCC"> of the</font>

352
00:21:38,870 --> 00:21:46,840
previous bug and the the developers

353
00:21:44,000 --> 00:21:51,259
obstacle<font color="#E5E5E5"> I'd also</font><font color="#CCCCCC"> noticed</font><font color="#E5E5E5"> the risk of</font>

354
00:21:46,840 --> 00:21:54,789
the circular the tokenizer you have to

355
00:21:51,259 --> 00:22:00,590
compile<font color="#E5E5E5"> cigarette with a special option</font>

356
00:21:54,789 --> 00:22:05,230
<font color="#E5E5E5">before using it this</font><font color="#CCCCCC"> Web kid Ian</font><font color="#E5E5E5"> also</font>

357
00:22:00,590 --> 00:22:08,750
has its own patch<font color="#CCCCCC"> fallback they have a</font>

358
00:22:05,230 --> 00:22:12,289
black<font color="#CCCCCC"> tee</font><font color="#E5E5E5"> a blacklister of the dangerous</font>

359
00:22:08,750 --> 00:22:15,470
functions the blacklist prevents hackers

360
00:22:12,289 --> 00:22:19,879
<font color="#E5E5E5">from calling the</font><font color="#CCCCCC"> pad functions</font><font color="#E5E5E5"> even if</font>

361
00:22:15,470 --> 00:22:21,620
they have bypass of the<font color="#E5E5E5"> whitelist the</font>

362
00:22:19,879 --> 00:22:26,539
patch will be us more interesting

363
00:22:21,620 --> 00:22:29,870
functions there<font color="#CCCCCC"> are functions our tree</font>

364
00:22:26,539 --> 00:22:32,870
node and the<font color="#E5E5E5"> archery depth that is even</font>

365
00:22:29,870 --> 00:22:35,299
uncommon than the FDS recognizer<font color="#E5E5E5"> it</font>

366
00:22:32,870 --> 00:22:39,309
tells us where to find<font color="#E5E5E5"> interesting</font>

367
00:22:35,299 --> 00:22:42,399
functions in<font color="#E5E5E5"> secret source so this is</font>

368
00:22:39,309 --> 00:22:46,519
the source<font color="#E5E5E5"> of the our tree node function</font>

369
00:22:42,399 --> 00:22:49,370
it<font color="#CCCCCC"> takes two arguments</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> date</font>

370
00:22:46,519 --> 00:22:52,639
describes the dimension of the<font color="#E5E5E5"> our tree</font>

371
00:22:49,370 --> 00:22:57,229
<font color="#E5E5E5">node the second argument is just</font><font color="#CCCCCC"> the our</font>

372
00:22:52,639 --> 00:22:58,850
tree node value there's no check in the

373
00:22:57,230 --> 00:23:02,179
function and<font color="#E5E5E5"> it can be used for</font>

374
00:22:58,850 --> 00:23:05,769
<font color="#E5E5E5">out-of-bounds access and it's not as</font>

375
00:23:02,179 --> 00:23:08,809
dangerous as the<font color="#E5E5E5"> FPS recognizer</font>

376
00:23:05,769 --> 00:23:09,830
<font color="#E5E5E5">but now we know we should find more bugs</font>

377
00:23:08,809 --> 00:23:15,970
in archery

378
00:23:09,830 --> 00:23:18,939
module so here's the freezer day for you

379
00:23:15,970 --> 00:23:25,610
<font color="#CCCCCC">in the function deserialized</font>

380
00:23:18,940 --> 00:23:27,740
geometry<font color="#CCCCCC"> a bloap</font><font color="#E5E5E5"> in a special structure</font>

381
00:23:25,610 --> 00:23:31,789
<font color="#E5E5E5">is used as operand of the match</font>

382
00:23:27,740 --> 00:23:36,070
expression the developers knows that the

383
00:23:31,789 --> 00:23:38,119
<font color="#E5E5E5">OP if you operate on invalid probes</font>

384
00:23:36,070 --> 00:23:42,260
<font color="#E5E5E5">could cause a segfault</font>

385
00:23:38,119 --> 00:23:44,510
and then he<font color="#CCCCCC"> wrote</font><font color="#E5E5E5"> the idea in the code</font>

386
00:23:42,260 --> 00:23:47,120
to solve the<font color="#CCCCCC"> problem he used a mask</font>

387
00:23:44,510 --> 00:23:50,720
value in the beginning of the<font color="#E5E5E5"> block if</font>

388
00:23:47,120 --> 00:23:53,120
all the sanity checks<font color="#CCCCCC"> passed a function</font>

389
00:23:50,720 --> 00:23:56,720
of the point function pointer will<font color="#E5E5E5"> be</font>

390
00:23:53,120 --> 00:24:01,280
<font color="#E5E5E5">locked from</font><font color="#CCCCCC"> the block</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is the P</font>

391
00:23:56,720 --> 00:24:09,230
<font color="#CCCCCC">bloap the the text is</font><font color="#E5E5E5"> in yellow</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> pre</font>

392
00:24:01,280 --> 00:24:11,510
<font color="#E5E5E5">people CB x geometry you</font><font color="#CCCCCC"> can have piece</font>

393
00:24:09,230 --> 00:24:14,060
<font color="#CCCCCC">of control in three lines</font><font color="#E5E5E5"> first you</font>

394
00:24:11,510 --> 00:24:16,750
create a widget table in our tree and

395
00:24:14,060 --> 00:24:19,879
<font color="#E5E5E5">these are some values into it then</font>

396
00:24:16,750 --> 00:24:24,200
<font color="#CCCCCC">perform must select statements and using</font>

397
00:24:19,880 --> 00:24:29,300
the match expression the the line starts

398
00:24:24,200 --> 00:24:31,730
<font color="#CCCCCC">with X is means it's a probe now a p45</font>

399
00:24:29,300 --> 00:24:36,169
one two eight nine is just a match

400
00:24:31,730 --> 00:24:37,850
number in source code<font color="#E5E5E5"> and if you run</font>

401
00:24:36,170 --> 00:24:44,390
<font color="#CCCCCC">those three lines you will get directly</font>

402
00:24:37,850 --> 00:24:46,340
<font color="#CCCCCC">PC control and RDI control did you take</font>

403
00:24:44,390 --> 00:24:50,960
<font color="#CCCCCC">the</font><font color="#E5E5E5"> picture this page is not available</font>

404
00:24:46,340 --> 00:24:54,409
<font color="#CCCCCC">in the public</font><font color="#E5E5E5"> sites okay</font>

405
00:24:50,960 --> 00:24:57,700
you should remember the the artery which

406
00:24:54,410 --> 00:25:00,770
your table is not available in browser

407
00:24:57,700 --> 00:25:03,860
the<font color="#E5E5E5"> only one is allowed in browser</font><font color="#CCCCCC"> it's</font>

408
00:25:00,770 --> 00:25:06,860
<font color="#CCCCCC">ft s3 which table we prefer</font><font color="#E5E5E5"> the</font>

409
00:25:03,860 --> 00:25:12,740
<font color="#E5E5E5">explosion box in browser so we start</font>

410
00:25:06,860 --> 00:25:15,290
looking<font color="#CCCCCC"> for</font><font color="#E5E5E5"> bugs in</font><font color="#CCCCCC"> FDS 3 if we</font><font color="#E5E5E5"> check</font>

411
00:25:12,740 --> 00:25:19,010
<font color="#CCCCCC">the function</font><font color="#E5E5E5"> whitelist we can find some</font>

412
00:25:15,290 --> 00:25:23,510
functions<font color="#CCCCCC"> that is rarely used but it's</font>

413
00:25:19,010 --> 00:25:27,710
still in in a<font color="#E5E5E5"> whitelist for example the</font>

414
00:25:23,510 --> 00:25:30,950
<font color="#E5E5E5">optimize is a function that is for</font>

415
00:25:27,710 --> 00:25:33,980
<font color="#CCCCCC">special FPS 3 operation I don't</font><font color="#E5E5E5"> think</font>

416
00:25:30,950 --> 00:25:39,650
any<font color="#E5E5E5"> of you knowledge about how to use</font>

417
00:25:33,980 --> 00:25:43,370
the function in the code<font color="#CCCCCC"> it extracts the</font>

418
00:25:39,650 --> 00:25:47,840
FD a--'s<font color="#CCCCCC"> 3</font><font color="#E5E5E5"> cursor</font><font color="#CCCCCC"> barbra from the first</font>

419
00:25:43,370 --> 00:25:52,750
argument<font color="#CCCCCC"> it costs the FG s3 function</font>

420
00:25:47,840 --> 00:25:52,750
<font color="#CCCCCC">Agha</font><font color="#E5E5E5"> in its code in black</font>

421
00:25:53,150 --> 00:26:02,750
the code<font color="#CCCCCC"> F ds3 function</font><font color="#E5E5E5"> argh</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> very</font>

422
00:25:57,170 --> 00:26:05,480
simple<font color="#E5E5E5"> job secret</font><font color="#CCCCCC"> value type and returns</font>

423
00:26:02,750 --> 00:26:08,870
the type of the value<font color="#E5E5E5"> it has to be a</font>

424
00:26:05,480 --> 00:26:13,280
blob<font color="#CCCCCC"> Siculus revalue bytes returns the</font>

425
00:26:08,870 --> 00:26:18,260
length<font color="#E5E5E5"> of the value is not the size of a</font>

426
00:26:13,280 --> 00:26:23,740
pointer if these checks are passed<font color="#E5E5E5"> then</font>

427
00:26:18,260 --> 00:26:27,170
the blob will be parsed as<font color="#E5E5E5"> ft s3 cursor</font>

428
00:26:23,740 --> 00:26:30,440
now let's have a quick<font color="#E5E5E5"> review of which</font>

429
00:26:27,170 --> 00:26:34,520
table mechanism the widget a work<font color="#E5E5E5"> I have</font>

430
00:26:30,440 --> 00:26:40,330
a custom method<font color="#E5E5E5"> X</font><font color="#CCCCCC"> column</font><font color="#E5E5E5"> to find</font><font color="#CCCCCC"> the</font>

431
00:26:34,520 --> 00:26:44,020
value of the<font color="#E5E5E5"> nth column of Karen roe</font>

432
00:26:40,330 --> 00:26:47,679
<font color="#CCCCCC">insecure in ft s3 which a table</font><font color="#E5E5E5"> it</font>

433
00:26:44,020 --> 00:26:50,930
accepts<font color="#E5E5E5"> the table name as a color name</font>

434
00:26:47,680 --> 00:26:53,770
some functions like<font color="#CCCCCC"> optimize</font><font color="#E5E5E5"> take the</font>

435
00:26:50,930 --> 00:26:57,170
table name as the first argument

436
00:26:53,770 --> 00:27:02,629
basically<font color="#E5E5E5"> what you should do is</font><font color="#CCCCCC"> just</font>

437
00:26:57,170 --> 00:27:06,280
select<font color="#CCCCCC"> optimize T from T where T</font><font color="#E5E5E5"> is T or</font>

438
00:27:02,630 --> 00:27:10,490
F ps3 version table during<font color="#CCCCCC"> the x-ray</font>

439
00:27:06,280 --> 00:27:15,980
exclusion<font color="#E5E5E5"> : T stores the current FPS</font>

440
00:27:10,490 --> 00:27:18,680
with cursor in execution of<font color="#CCCCCC"> circulate</font>

441
00:27:15,980 --> 00:27:22,300
the secret statement<font color="#E5E5E5"> is prepared and</font>

442
00:27:18,680 --> 00:27:26,540
compiled into<font color="#CCCCCC"> bytecode</font><font color="#E5E5E5"> and then evaluate</font>

443
00:27:22,300 --> 00:27:29,060
<font color="#CCCCCC">bicycle and engine for this case the</font>

444
00:27:26,540 --> 00:27:31,430
type information of the colon is already

445
00:27:29,060 --> 00:27:35,780
lost<font color="#E5E5E5"> and the interpreter can never know</font>

446
00:27:31,430 --> 00:27:41,210
the<font color="#E5E5E5"> required type of this column now</font>

447
00:27:35,780 --> 00:27:45,710
this is a<font color="#CCCCCC"> nother POC trader which a</font>

448
00:27:41,210 --> 00:27:51,530
table in a and it<font color="#E5E5E5"> has only one column</font><font color="#CCCCCC"> F</font>

449
00:27:45,710 --> 00:27:56,870
<font color="#CCCCCC">ds3</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> owning column is P then if we</font>

450
00:27:51,530 --> 00:27:59,320
select hex<font color="#E5E5E5"> a from a using the take the</font>

451
00:27:56,870 --> 00:28:05,060
table name as a column it leaks<font color="#E5E5E5"> the</font>

452
00:27:59,320 --> 00:28:07,239
address of a of a heap structure that is

453
00:28:05,060 --> 00:28:12,529
<font color="#E5E5E5">the original</font><font color="#CCCCCC"> FG s recourse</font>

454
00:28:07,239 --> 00:28:19,070
if you<font color="#E5E5E5"> optimize be from a then B is used</font>

455
00:28:12,529 --> 00:28:26,090
as the<font color="#CCCCCC"> FT 3/4 which costs the</font><font color="#E5E5E5"> type of</font>

456
00:28:19,070 --> 00:28:30,980
<font color="#E5E5E5">confusion and</font><font color="#CCCCCC"> okay now we are thinking</font>

457
00:28:26,090 --> 00:28:33,799
<font color="#CCCCCC">about how to exploit</font><font color="#E5E5E5"> in the back now</font><font color="#CCCCCC"> now</font>

458
00:28:30,980 --> 00:28:35,980
when we all<font color="#E5E5E5"> teach us how to explore the</font>

459
00:28:33,799 --> 00:28:35,980
<font color="#E5E5E5">back</font>

460
00:28:42,970 --> 00:28:50,230
with the exciting bugs<font color="#CCCCCC"> in hand</font><font color="#E5E5E5"> it's time</font>

461
00:28:46,750 --> 00:28:53,590
to think<font color="#E5E5E5"> about how</font><font color="#CCCCCC"> to exploit them let's</font>

462
00:28:50,230 --> 00:28:55,870
take<font color="#CCCCCC"> optimize function as an example the</font>

463
00:28:53,590 --> 00:29:02,800
source code<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the function is on the</font>

464
00:28:55,870 --> 00:29:06,219
<font color="#E5E5E5">Left P cursor is a pointer of struct</font><font color="#CCCCCC"> FTS</font>

465
00:29:02,800 --> 00:29:08,620
precursor<font color="#CCCCCC"> the function f ds3 functioning</font>

466
00:29:06,220 --> 00:29:11,590
Ark will resolve the first argument<font color="#E5E5E5"> of</font>

467
00:29:08,620 --> 00:29:16,659
<font color="#CCCCCC">optimize and fill the result into P</font>

468
00:29:11,590 --> 00:29:18,760
cursor with the type confusion bug in

469
00:29:16,660 --> 00:29:23,200
FPS<font color="#CCCCCC"> re functioning Ark we can specify</font>

470
00:29:18,760 --> 00:29:25,360
<font color="#E5E5E5">absolute value for P cursor so that we</font>

471
00:29:23,200 --> 00:29:31,600
can dereference the struct FPS rate

472
00:29:25,360 --> 00:29:35,439
cursor in<font color="#E5E5E5"> sum up</font><font color="#CCCCCC"> 3 address like in the</font>

473
00:29:31,600 --> 00:29:38,980
pew see in this slide the<font color="#CCCCCC"> P cursor will</font>

474
00:29:35,440 --> 00:29:43,480
be<font color="#E5E5E5"> T referenced at 4 1 4 1 4 1 4 2 4 2</font><font color="#CCCCCC"> 4</font>

475
00:29:38,980 --> 00:29:46,810
2 so that<font color="#CCCCCC"> is to say if we can control</font>

476
00:29:43,480 --> 00:29:52,990
<font color="#E5E5E5">memory in some known address we</font><font color="#CCCCCC"> can fake</font>

477
00:29:46,810 --> 00:29:56,169
<font color="#CCCCCC">a ft s3 cursor there from the code lines</font>

478
00:29:52,990 --> 00:30:00,420
color with blue<font color="#E5E5E5"> P is derived from P</font>

479
00:29:56,170 --> 00:30:04,240
cursor and points to struct<font color="#CCCCCC"> FTS 3 table</font>

480
00:30:00,420 --> 00:30:09,700
<font color="#E5E5E5">so this F at T s3 table can also be</font>

481
00:30:04,240 --> 00:30:12,130
constructed<font color="#CCCCCC"> in</font><font color="#E5E5E5"> controlled memory the</font>

482
00:30:09,700 --> 00:30:15,430
following function<font color="#E5E5E5"> Siculus 3fg s3</font>

483
00:30:12,130 --> 00:30:21,610
<font color="#E5E5E5">optimized to handle the fake instance of</font>

484
00:30:15,430 --> 00:30:24,490
ft s3 table<font color="#E5E5E5"> ft f3 table is a complex</font>

485
00:30:21,610 --> 00:30:28,659
tract<font color="#E5E5E5"> with members of pointers and</font>

486
00:30:24,490 --> 00:30:31,360
substructures<font color="#E5E5E5"> so we started to do more</font>

487
00:30:28,660 --> 00:30:34,120
code review to see<font color="#E5E5E5"> if we can</font><font color="#CCCCCC"> achieve</font>

488
00:30:31,360 --> 00:30:38,040
memory<font color="#E5E5E5"> read/write primitive or</font><font color="#CCCCCC"> pc</font>

489
00:30:34,120 --> 00:30:38,040
<font color="#CCCCCC">control through some code path</font>

490
00:30:43,230 --> 00:30:48,570
so here is the summary<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our</font>

491
00:30:45,380 --> 00:30:50,940
exploitation strategy in most of the

492
00:30:48,570 --> 00:30:54,539
<font color="#E5E5E5">modern browsers and operating systems we</font>

493
00:30:50,940 --> 00:30:58,320
can still<font color="#E5E5E5"> use</font><font color="#CCCCCC"> Papes rate to have memory</font>

494
00:30:54,539 --> 00:31:01,200
control in some<font color="#CCCCCC"> hard-coded address for</font>

495
00:30:58,320 --> 00:31:04,799
example<font color="#CCCCCC"> by allocating a lot of array</font>

496
00:31:01,200 --> 00:31:07,950
buffer objects we can fake FPS<font color="#CCCCCC"> re cursor</font>

497
00:31:04,799 --> 00:31:14,340
<font color="#E5E5E5">FPS rate table and other related stuff</font>

498
00:31:07,950 --> 00:31:16,919
structures those vulnerable virtual

499
00:31:14,340 --> 00:31:21,600
table helper functions like<font color="#E5E5E5"> optimize</font>

500
00:31:16,919 --> 00:31:24,330
offsets match info will handle our

501
00:31:21,600 --> 00:31:27,689
<font color="#CCCCCC">construct taste drugs through some</font>

502
00:31:24,330 --> 00:31:30,928
specific<font color="#E5E5E5"> code</font><font color="#CCCCCC"> paths we</font><font color="#E5E5E5"> have memory</font>

503
00:31:27,690 --> 00:31:33,110
rewrite and<font color="#E5E5E5"> PC control so in the</font>

504
00:31:30,929 --> 00:31:36,899
following<font color="#E5E5E5"> slides</font><font color="#CCCCCC"> we will show some</font>

505
00:31:33,110 --> 00:31:39,389
exploitation<font color="#CCCCCC"> paths that we used but it's</font>

506
00:31:36,899 --> 00:31:44,129
also possible to<font color="#E5E5E5"> find other code paths</font>

507
00:31:39,389 --> 00:31:47,219
to achieve the<font color="#E5E5E5"> same results so on this</font>

508
00:31:44,130 --> 00:31:51,120
diagram<font color="#CCCCCC"> in a</font><font color="#E5E5E5"> demonstrate one path for</font>

509
00:31:47,220 --> 00:31:54,870
<font color="#E5E5E5">actually rewrite primitive in the last</font>

510
00:31:51,120 --> 00:31:58,139
function it is<font color="#CCCCCC"> siculus</font><font color="#E5E5E5"> for VDB mem share</font>

511
00:31:54,870 --> 00:31:59,908
<font color="#E5E5E5">screen this function is basically just</font>

512
00:31:58,139 --> 00:32:03,418
doing<font color="#E5E5E5"> string copy which control</font><font color="#CCCCCC"> the</font>

513
00:31:59,909 --> 00:32:07,740
source<font color="#E5E5E5"> and destination but using this</font>

514
00:32:03,419 --> 00:32:10,860
function if<font color="#E5E5E5"> we just do copy data from</font>

515
00:32:07,740 --> 00:32:14,120
<font color="#E5E5E5">some control location to any other</font>

516
00:32:10,860 --> 00:32:17,490
address<font color="#CCCCCC"> that is just doing memory write</font>

517
00:32:14,120 --> 00:32:21,059
on the other hand if we use this

518
00:32:17,490 --> 00:32:23,399
function<font color="#E5E5E5"> to copy data from some any</font>

519
00:32:21,059 --> 00:32:26,668
other address to some controlled

520
00:32:23,399 --> 00:32:29,899
location<font color="#E5E5E5"> that we can read back and it's</font>

521
00:32:26,669 --> 00:32:29,899
<font color="#E5E5E5">just doing memory read</font>

522
00:32:32,630 --> 00:32:38,990
so since<font color="#E5E5E5"> is a long path in the previous</font>

523
00:32:36,110 --> 00:32:41,479
<font color="#CCCCCC">diagram</font><font color="#E5E5E5"> we're gonna to take you go</font>

524
00:32:38,990 --> 00:32:44,750
through it to<font color="#CCCCCC"> show how we constructed</font>

525
00:32:41,480 --> 00:32:46,970
odd structures on the right<font color="#E5E5E5"> side there</font>

526
00:32:44,750 --> 00:32:50,230
is<font color="#CCCCCC"> a diagram</font><font color="#E5E5E5"> showing how we construct</font>

527
00:32:46,970 --> 00:32:53,210
the structures and their members

528
00:32:50,230 --> 00:32:58,630
currently we have constructed<font color="#E5E5E5"> a</font><font color="#CCCCCC"> FDS</font>

529
00:32:53,210 --> 00:33:00,980
<font color="#E5E5E5">three cursor and added a</font><font color="#CCCCCC"> ft3</font><font color="#E5E5E5"> table in it</font>

530
00:32:58,630 --> 00:33:03,500
<font color="#E5E5E5">the next step is to see what the</font>

531
00:33:00,980 --> 00:33:06,890
<font color="#CCCCCC">highlighted function</font><font color="#E5E5E5"> cyclized</font><font color="#CCCCCC"> three FDS</font>

532
00:33:03,500 --> 00:33:12,490
reoptimize<font color="#E5E5E5"> does and how we continue to</font>

533
00:33:06,890 --> 00:33:12,490
build the<font color="#CCCCCC"> FPS rate table in</font><font color="#E5E5E5"> the diagram</font>

534
00:33:13,240 --> 00:33:22,820
inside sicklied<font color="#E5E5E5"> 3 FPS</font><font color="#CCCCCC"> 3 optimized it</font>

535
00:33:18,440 --> 00:33:26,750
will invoke<font color="#E5E5E5"> sicklied exact if</font><font color="#CCCCCC"> psycho</font>

536
00:33:22,820 --> 00:33:29,179
light<font color="#E5E5E5"> ok is returned then it will take</font>

537
00:33:26,750 --> 00:33:33,920
the if<font color="#E5E5E5"> the end branch and execute a lot</font>

538
00:33:29,180 --> 00:33:37,310
of code<font color="#E5E5E5"> but our interested function is</font>

539
00:33:33,920 --> 00:33:40,310
the highlighted one<font color="#CCCCCC"> cycle i</font><font color="#E5E5E5"> 3</font><font color="#CCCCCC"> FPS three</font>

540
00:33:37,310 --> 00:33:45,860
segments<font color="#CCCCCC"> closed so there is nothing to</font>

541
00:33:40,310 --> 00:33:50,240
do with the<font color="#CCCCCC"> if-then branch</font><font color="#E5E5E5"> so it's so we</font>

542
00:33:45,860 --> 00:33:53,840
want to try something<font color="#CCCCCC"> to make sick like</font>

543
00:33:50,240 --> 00:33:56,810
exact not<font color="#CCCCCC"> returns to collide okay by</font>

544
00:33:53,840 --> 00:34:00,770
looking<font color="#E5E5E5"> at the code of</font><font color="#CCCCCC"> siculus react</font><font color="#E5E5E5"> we</font>

545
00:33:56,810 --> 00:34:03,409
can see that if DB equals to<font color="#CCCCCC"> zero the</font>

546
00:34:00,770 --> 00:34:06,370
<font color="#E5E5E5">function on the</font><font color="#CCCCCC"> right side cyclize three</font>

547
00:34:03,410 --> 00:34:09,170
<font color="#E5E5E5">safety check</font><font color="#CCCCCC"> okay would return</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> and</font>

548
00:34:06,370 --> 00:34:12,199
their circulatory exact will return

549
00:34:09,170 --> 00:34:15,130
<font color="#CCCCCC">sequel I miss you speak apt it's not</font>

550
00:34:12,199 --> 00:34:18,290
sick like<font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> our goal is achieved</font>

551
00:34:15,130 --> 00:34:20,210
so in the in this diagram<font color="#E5E5E5"> we are showing</font>

552
00:34:18,290 --> 00:34:23,630
the construction<font color="#E5E5E5"> procedure for</font>

553
00:34:20,210 --> 00:34:29,300
structures we<font color="#CCCCCC"> stat DB in mgs3 table to</font>

554
00:34:23,630 --> 00:34:31,640
<font color="#CCCCCC">zero in this step now let's move on to</font>

555
00:34:29,300 --> 00:34:35,390
the function supplies<font color="#CCCCCC"> three FDA three</font>

556
00:34:31,639 --> 00:34:40,239
segments<font color="#CCCCCC"> close it's calling</font><font color="#E5E5E5"> sick</font><font color="#CCCCCC"> life</font>

557
00:34:35,389 --> 00:34:43,250
<font color="#E5E5E5">three blob close and passing PP segments</font>

558
00:34:40,239 --> 00:34:45,080
<font color="#CCCCCC">PV stack meds point to a</font><font color="#E5E5E5"> strap incra</font>

559
00:34:43,250 --> 00:34:48,800
blob

560
00:34:45,080 --> 00:34:52,340
so we also<font color="#E5E5E5"> added this</font><font color="#CCCCCC"> drug to</font><font color="#E5E5E5"> F at</font><font color="#CCCCCC"> ts3</font>

561
00:34:48,800 --> 00:34:56,120
<font color="#E5E5E5">table in the function circulatory</font><font color="#CCCCCC"> blog</font>

562
00:34:52,340 --> 00:34:59,990
close to most drugs are referenced look

563
00:34:56,120 --> 00:35:05,240
at the first one<font color="#E5E5E5"> the variable DB color</font>

564
00:34:59,990 --> 00:35:08,259
is purple it's a struct<font color="#E5E5E5"> of</font><font color="#CCCCCC"> siculus</font>

565
00:35:05,240 --> 00:35:12,500
rhee-soo<font color="#CCCCCC"> Claire is a type for describing</font>

566
00:35:08,260 --> 00:35:15,580
database connections so we<font color="#CCCCCC"> add a</font>

567
00:35:12,500 --> 00:35:18,920
<font color="#CCCCCC">synchronized read to inquiry blob and</font>

568
00:35:15,580 --> 00:35:24,470
<font color="#CCCCCC">there's the</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> cyclist remote X</font>

569
00:35:18,920 --> 00:35:26,810
enter for synchronization<font color="#E5E5E5"> by</font><font color="#CCCCCC"> steady</font><font color="#E5E5E5"> mode</font>

570
00:35:24,470 --> 00:35:32,120
X to<font color="#CCCCCC"> zero we can survive all those no</font>

571
00:35:26,810 --> 00:35:36,140
<font color="#E5E5E5">text related functions the second news</font>

572
00:35:32,120 --> 00:35:41,870
truck<font color="#E5E5E5"> added here is</font><font color="#CCCCCC"> pp statement</font><font color="#E5E5E5"> color</font>

573
00:35:36,140 --> 00:35:46,850
<font color="#CCCCCC">is</font><font color="#E5E5E5"> green it's a</font><font color="#CCCCCC"> struct of</font><font color="#E5E5E5"> V</font><font color="#CCCCCC"> DB</font><font color="#E5E5E5"> e</font><font color="#CCCCCC"> really</font>

574
00:35:41,870 --> 00:35:52,009
<font color="#CCCCCC">is a type for describing SQL virtual</font>

575
00:35:46,850 --> 00:35:54,110
machine so we also<font color="#E5E5E5"> add it here because</font>

576
00:35:52,010 --> 00:35:58,840
<font color="#E5E5E5">the sicklied finalized function will</font>

577
00:35:54,110 --> 00:35:58,840
handle our constructed<font color="#CCCCCC"> V DB</font><font color="#E5E5E5"> e</font>

578
00:36:05,930 --> 00:36:11,419
the left side is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> source of</font>

579
00:36:08,570 --> 00:36:14,390
circulatory finalized the interesting

580
00:36:11,420 --> 00:36:19,610
function here is synchronized<font color="#E5E5E5"> through</font>

581
00:36:14,390 --> 00:36:22,879
<font color="#CCCCCC">VDB finalized to reach the function we</font>

582
00:36:19,610 --> 00:36:27,610
have to survive the other function calls

583
00:36:22,880 --> 00:36:30,380
like<font color="#CCCCCC"> VD be safety</font><font color="#E5E5E5"> check profile callback</font>

584
00:36:27,610 --> 00:36:34,730
I'm omitting<font color="#E5E5E5"> some details here because</font>

585
00:36:30,380 --> 00:36:39,080
<font color="#E5E5E5">it's not very</font><font color="#CCCCCC"> hard you can just set some</font>

586
00:36:34,730 --> 00:36:41,540
members of<font color="#E5E5E5"> V</font><font color="#CCCCCC"> DB</font><font color="#E5E5E5"> and then you can survive</font>

587
00:36:39,080 --> 00:36:43,040
all these functions<font color="#CCCCCC"> so let's move on to</font>

588
00:36:41,540 --> 00:36:47,029
<font color="#E5E5E5">the function on the</font><font color="#CCCCCC"> right side</font>

589
00:36:43,040 --> 00:36:50,090
<font color="#E5E5E5">synchronize 3</font><font color="#CCCCCC"> V DB finalized by just by</font>

590
00:36:47,030 --> 00:36:52,730
setting<font color="#E5E5E5"> P magic to really be magic hot</font>

591
00:36:50,090 --> 00:36:57,280
<font color="#CCCCCC">now</font><font color="#E5E5E5"> we can reach the interesting</font>

592
00:36:52,730 --> 00:36:59,750
functions<font color="#CCCCCC"> equalize 3 really be reset so</font>

593
00:36:57,280 --> 00:37:02,720
for the moment<font color="#E5E5E5"> we have built five</font>

594
00:36:59,750 --> 00:37:05,600
structures and they are connected<font color="#CCCCCC"> as the</font>

595
00:37:02,720 --> 00:37:08,270
way showing<font color="#E5E5E5"> in the picture the condition</font>

596
00:37:05,600 --> 00:37:14,870
highlighted with green is added in<font color="#E5E5E5"> the</font>

597
00:37:08,270 --> 00:37:17,450
last<font color="#E5E5E5"> step</font><font color="#CCCCCC"> let's move further in</font>

598
00:37:14,870 --> 00:37:20,330
circulatory<font color="#E5E5E5"> VDB reset the very base</font>

599
00:37:17,450 --> 00:37:23,509
member<font color="#CCCCCC"> PC is examined</font><font color="#E5E5E5"> for different</font>

600
00:37:20,330 --> 00:37:27,470
branches we<font color="#E5E5E5"> set PC to</font><font color="#CCCCCC"> zero so that</font><font color="#E5E5E5"> we</font>

601
00:37:23,510 --> 00:37:29,630
can take the<font color="#E5E5E5"> first branch and go into</font>

602
00:37:27,470 --> 00:37:34,399
the functioning circulatory<font color="#CCCCCC"> VDB transfer</font>

603
00:37:29,630 --> 00:37:40,570
<font color="#CCCCCC">error</font><font color="#E5E5E5"> so in the diagram we added</font><font color="#CCCCCC"> the new</font>

604
00:37:34,400 --> 00:37:40,570
<font color="#E5E5E5">condition PC</font><font color="#CCCCCC"> greater or</font><font color="#E5E5E5"> equal to zero</font>

605
00:37:41,200 --> 00:37:46,819
<font color="#E5E5E5">now in this slide the functioning</font>

606
00:37:44,510 --> 00:37:49,790
circulatory<font color="#E5E5E5"> VDB transfer error will call</font>

607
00:37:46,820 --> 00:37:51,740
secure line<font color="#E5E5E5"> three value of set string</font>

608
00:37:49,790 --> 00:37:55,420
and then<font color="#E5E5E5"> call</font><font color="#CCCCCC"> synchronized through</font><font color="#E5E5E5"> video</font>

609
00:37:51,740 --> 00:37:59,419
<font color="#CCCCCC">mmm set string this function is the</font>

610
00:37:55,420 --> 00:38:02,120
aforementioned<font color="#CCCCCC"> string copy</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> are</font>

611
00:37:59,420 --> 00:38:04,730
close<font color="#E5E5E5"> to winning looking at the function</font>

612
00:38:02,120 --> 00:38:07,100
<font color="#CCCCCC">called synchronized three Veloz a</font><font color="#E5E5E5"> string</font>

613
00:38:04,730 --> 00:38:13,360
<font color="#E5E5E5">there are two important argument the red</font>

614
00:38:07,100 --> 00:38:13,360
<font color="#CCCCCC">tbp error and the green PD error message</font>

615
00:38:13,750 --> 00:38:20,290
<font color="#CCCCCC">DB p error</font><font color="#E5E5E5"> is a new struct so we create</font>

616
00:38:19,190 --> 00:38:23,060
created

617
00:38:20,290 --> 00:38:25,670
<font color="#CCCCCC">PD error message is simply</font><font color="#E5E5E5"> a safe</font>

618
00:38:23,060 --> 00:38:28,850
<font color="#CCCCCC">stealth</font><font color="#E5E5E5"> stream pop say style stream</font>

619
00:38:25,670 --> 00:38:32,330
pointer according<font color="#E5E5E5"> to the check in the if</font>

620
00:38:28,850 --> 00:38:36,020
statement<font color="#CCCCCC"> we should specify a</font><font color="#E5E5E5"> nonzero</font>

621
00:38:32,330 --> 00:38:38,630
value<font color="#E5E5E5"> here so in the last line of the</font>

622
00:38:36,020 --> 00:38:41,600
<font color="#E5E5E5">code we can tell</font><font color="#CCCCCC"> that both DBP error and</font>

623
00:38:38,630 --> 00:38:43,850
<font color="#CCCCCC">P the error message will be handled in</font>

624
00:38:41,600 --> 00:38:47,750
the function<font color="#CCCCCC"> cyclist really be</font><font color="#E5E5E5"> master</font>

625
00:38:43,850 --> 00:38:51,130
<font color="#E5E5E5">string this function exposes all the</font>

626
00:38:47,750 --> 00:38:54,760
secrets of<font color="#CCCCCC"> upstream</font><font color="#E5E5E5"> read/write primitive</font>

627
00:38:51,130 --> 00:39:01,040
the key function<font color="#E5E5E5"> of doing string copy is</font>

628
00:38:54,760 --> 00:39:05,650
<font color="#E5E5E5">mem copy let's pay attention</font><font color="#CCCCCC"> to the mem</font>

629
00:39:01,040 --> 00:39:08,600
copy the<font color="#E5E5E5"> source of mem copy is</font><font color="#CCCCCC"> they</font>

630
00:39:05,650 --> 00:39:12,700
which is highlighted<font color="#E5E5E5"> with green they</font>

631
00:39:08,600 --> 00:39:21,140
come from the VD bees the error message

632
00:39:12,700 --> 00:39:24,319
the green the error message the is just

633
00:39:21,140 --> 00:39:26,839
a safe style<font color="#CCCCCC"> stream pointer so we could</font>

634
00:39:24,320 --> 00:39:34,970
specify any address to be the source of

635
00:39:26,840 --> 00:39:39,530
mem copy for mem copy destination is<font color="#CCCCCC"> P</font>

636
00:39:34,970 --> 00:39:43,939
<font color="#CCCCCC">mm day PM m is</font><font color="#E5E5E5"> a struct</font><font color="#CCCCCC"> of man which</font>

637
00:39:39,530 --> 00:39:47,140
comes from<font color="#CCCCCC"> DB s-- member piero</font><font color="#E5E5E5"> we also</font>

638
00:39:43,940 --> 00:39:52,810
mentioned this in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> previous slide the</font>

639
00:39:47,140 --> 00:39:55,420
<font color="#CCCCCC">red one the struct man also</font><font color="#E5E5E5"> can be</font>

640
00:39:52,810 --> 00:40:01,820
constructed so<font color="#CCCCCC"> that we could control</font>

641
00:39:55,420 --> 00:40:03,530
destination pointer P mem day but pay

642
00:40:01,820 --> 00:40:08,440
attention<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the function circulatory</font>

643
00:40:03,530 --> 00:40:14,780
VDB mem clear and resize this function

644
00:40:08,440 --> 00:40:20,360
will assign P mem<font color="#E5E5E5"> date to the value of</font><font color="#CCCCCC"> P</font>

645
00:40:14,780 --> 00:40:23,570
mm<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Malik so in the final man cup</font>

646
00:40:20,360 --> 00:40:29,260
copies destination is controlled by<font color="#CCCCCC"> P</font><font color="#E5E5E5"> mm</font>

647
00:40:23,570 --> 00:40:29,260
<font color="#CCCCCC">dialog in orange</font>

648
00:40:29,819 --> 00:40:39,729
the copy lens is analog analog<font color="#E5E5E5"> equals</font><font color="#CCCCCC"> 2n</font>

649
00:40:35,079 --> 00:40:43,029
<font color="#CCCCCC">bite and M</font><font color="#E5E5E5"> bite equals to the</font><font color="#CCCCCC"> length of</font>

650
00:40:39,729 --> 00:40:45,399
day which is<font color="#E5E5E5"> the soft string so that's</font>

651
00:40:43,029 --> 00:40:50,819
<font color="#E5E5E5">why we say</font><font color="#CCCCCC"> siculus reveal EB MEMS</font>

652
00:40:45,400 --> 00:40:50,819
<font color="#CCCCCC">gesturing</font><font color="#E5E5E5"> is basically doing string copy</font>

653
00:40:50,849 --> 00:40:56,829
to conclude by<font color="#E5E5E5"> constructing the six</font>

654
00:40:54,369 --> 00:40:59,979
structures with proper members we could

655
00:40:56,829 --> 00:41:02,289
achieve<font color="#E5E5E5"> up three string copy primitive</font>

656
00:40:59,979 --> 00:41:05,319
which is equivalent<font color="#E5E5E5"> to read/write</font>

657
00:41:02,289 --> 00:41:10,119
primitive the source of string copy

658
00:41:05,319 --> 00:41:12,038
could be<font color="#E5E5E5"> specified in the malloc and the</font>

659
00:41:10,119 --> 00:41:17,699
destination<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be specified</font><font color="#E5E5E5"> in the</font>

660
00:41:12,039 --> 00:41:20,619
error<font color="#E5E5E5"> message so arriving at this point</font>

661
00:41:17,699 --> 00:41:23,890
<font color="#E5E5E5">we with up three rewrites</font>

662
00:41:20,619 --> 00:41:26,259
we almost can say we<font color="#CCCCCC"> are done</font><font color="#E5E5E5"> because</font>

663
00:41:23,890 --> 00:41:28,930
<font color="#E5E5E5">it's being well studied to play with</font>

664
00:41:26,259 --> 00:41:33,369
<font color="#E5E5E5">JavaScript objects with</font><font color="#CCCCCC"> read/write</font>

665
00:41:28,930 --> 00:41:37,198
primitive but if we want<font color="#E5E5E5"> to remove</font>

666
00:41:33,369 --> 00:41:41,170
platform dependency as much as<font color="#CCCCCC"> possible</font>

667
00:41:37,199 --> 00:41:44,849
we better find some way to<font color="#E5E5E5"> execute code</font>

668
00:41:41,170 --> 00:41:47,529
<font color="#CCCCCC">we seek light because the</font>

669
00:41:44,849 --> 00:41:52,599
implementations of<font color="#CCCCCC"> JavaScript in</font>

670
00:41:47,529 --> 00:41:54,849
different browsers are different luckily

671
00:41:52,599 --> 00:41:57,609
it's not<font color="#E5E5E5"> very hard if you dig into</font>

672
00:41:54,849 --> 00:42:00,400
structures in the source code<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Saku</font>

673
00:41:57,609 --> 00:42:02,380
<font color="#CCCCCC">light you could find many callbacks</font><font color="#E5E5E5"> the</font>

674
00:42:00,400 --> 00:42:04,989
remaining code<font color="#E5E5E5"> paths from vulnerable</font>

675
00:42:02,380 --> 00:42:10,239
function that ends with callbacks

676
00:42:04,989 --> 00:42:13,059
<font color="#E5E5E5">invoking we used this</font><font color="#CCCCCC"> pass in the</font>

677
00:42:10,239 --> 00:42:15,569
diagram to<font color="#E5E5E5"> have PC control the last</font>

678
00:42:13,059 --> 00:42:17,920
<font color="#CCCCCC">function is invoked profile callback</font>

679
00:42:15,569 --> 00:42:21,279
<font color="#E5E5E5">this function will invoke many callbacks</font>

680
00:42:17,920 --> 00:42:24,759
like X profile<font color="#CCCCCC"> X</font><font color="#E5E5E5"> trace X current time X</font>

681
00:42:21,279 --> 00:42:27,789
current time<font color="#E5E5E5"> in 64 this car</font><font color="#CCCCCC"> pass can all</font>

682
00:42:24,759 --> 00:42:34,900
be controlled<font color="#E5E5E5"> in the structures that we</font>

683
00:42:27,789 --> 00:42:38,009
built in sprite memory so in this invoke

684
00:42:34,900 --> 00:42:41,980
profile callback function it will<font color="#E5E5E5"> first</font>

685
00:42:38,009 --> 00:42:45,940
call<font color="#CCCCCC"> siculus Rio s current time in 64</font>

686
00:42:41,980 --> 00:42:50,350
this function will<font color="#CCCCCC"> invoke</font><font color="#E5E5E5"> X current time</font>

687
00:42:45,940 --> 00:42:56,980
callbacks<font color="#E5E5E5"> and then X profile and M X</font>

688
00:42:50,350 --> 00:43:00,549
trace will be invoked<font color="#E5E5E5"> we prefer to use</font>

689
00:42:56,980 --> 00:43:04,480
<font color="#CCCCCC">the callback of</font><font color="#E5E5E5"> X profile here because</font>

690
00:43:00,550 --> 00:43:09,820
we can also control two arguments here

691
00:43:04,480 --> 00:43:16,359
by controlling DB p profile art and<font color="#CCCCCC"> the</font>

692
00:43:09,820 --> 00:43:19,330
sequel<font color="#E5E5E5"> but</font><font color="#CCCCCC"> to reach</font><font color="#E5E5E5"> X profile we should</font>

693
00:43:16,359 --> 00:43:23,259
survive<font color="#E5E5E5"> the functions</font><font color="#CCCCCC"> equalizer</font><font color="#E5E5E5"> EOS</font>

694
00:43:19,330 --> 00:43:26,369
current time in 64 but<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> easy just</font>

695
00:43:23,260 --> 00:43:29,640
<font color="#CCCCCC">kept</font><font color="#E5E5E5"> this just can be done by simply</font>

696
00:43:26,369 --> 00:43:34,390
<font color="#E5E5E5">notify the X current time callbacks in</font>

697
00:43:29,640 --> 00:43:36,270
<font color="#E5E5E5">DB p VF s structure so this diagram is</font>

698
00:43:34,390 --> 00:43:40,839
showing how we create the structures to

699
00:43:36,270 --> 00:43:43,600
achieve up<font color="#CCCCCC"> three function call</font><font color="#E5E5E5"> PC is</font>

700
00:43:40,840 --> 00:43:46,720
controlling<font color="#E5E5E5"> X profile and the two</font>

701
00:43:43,600 --> 00:43:53,020
<font color="#E5E5E5">arguments are controlled in P profile</font>

702
00:43:46,720 --> 00:43:56,470
arc and de Cicco so it's time for<font color="#CCCCCC"> us to</font>

703
00:43:53,020 --> 00:44:01,800
<font color="#E5E5E5">defeat a SLR</font><font color="#CCCCCC"> SRS everywhere in modern</font>

704
00:43:56,470 --> 00:44:05,950
targets let's reveal the information

705
00:44:01,800 --> 00:44:09,910
<font color="#E5E5E5">disclosure but we could use it here</font>

706
00:44:05,950 --> 00:44:14,609
<font color="#E5E5E5">because by</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> bug we can leak the</font>

707
00:44:09,910 --> 00:44:18,250
address of some FPS rate cursor struct

708
00:44:14,609 --> 00:44:21,119
by digging<font color="#E5E5E5"> into the details of the</font>

709
00:44:18,250 --> 00:44:23,800
struct<font color="#E5E5E5"> we find that the first member is</font>

710
00:44:21,119 --> 00:44:27,190
pointing to a global variable<font color="#E5E5E5"> in CQ</font>

711
00:44:23,800 --> 00:44:29,830
light is called<font color="#E5E5E5"> FPS</font><font color="#CCCCCC"> ray module so by</font>

712
00:44:27,190 --> 00:44:32,320
<font color="#CCCCCC">Reed primitive</font><font color="#E5E5E5"> we could read the address</font>

713
00:44:29,830 --> 00:44:35,020
of<font color="#CCCCCC"> apt</font><font color="#E5E5E5"> III module and leaked address of</font>

714
00:44:32,320 --> 00:44:36,670
<font color="#CCCCCC">Sakhalin library in some</font><font color="#E5E5E5"> targets you</font>

715
00:44:35,020 --> 00:44:39,310
<font color="#E5E5E5">collide is statically linked together</font>

716
00:44:36,670 --> 00:44:44,650
<font color="#E5E5E5">with other libraries so</font><font color="#CCCCCC"> that we could</font>

717
00:44:39,310 --> 00:44:46,930
<font color="#CCCCCC">use more gadgets and functions as with</font>

718
00:44:44,650 --> 00:44:48,880
<font color="#CCCCCC">Shou code execution</font><font color="#E5E5E5"> we could use</font>

719
00:44:46,930 --> 00:44:51,419
function called primitive<font color="#E5E5E5"> to invoke</font>

720
00:44:48,880 --> 00:44:55,569
method like and protect to have

721
00:44:51,420 --> 00:44:58,779
executable memory<font color="#E5E5E5"> you can also use</font>

722
00:44:55,569 --> 00:45:02,109
long jump<font color="#E5E5E5"> to turn function call</font>

723
00:44:58,779 --> 00:45:10,809
primitive<font color="#CCCCCC"> into rub because we can change</font>

724
00:45:02,109 --> 00:45:14,489
<font color="#CCCCCC">the RSP</font><font color="#E5E5E5"> and long jump gadget so in in</font>

725
00:45:10,809 --> 00:45:18,249
this<font color="#E5E5E5"> slide these are some</font><font color="#CCCCCC"> numbers that</font>

726
00:45:14,489 --> 00:45:22,289
<font color="#E5E5E5">we could hit by using the stone of</font><font color="#CCCCCC"> Seco</font>

727
00:45:18,249 --> 00:45:22,288
light<font color="#E5E5E5"> bugs</font>

728
00:45:29,220 --> 00:45:34,009
so it brings<font color="#E5E5E5"> some demo here</font>

729
00:46:15,120 --> 00:46:18,230
he's<font color="#CCCCCC"> Imperia me</font>

730
00:46:21,740 --> 00:46:24,430
Jeremy

731
00:46:29,390 --> 00:46:36,830
so this is demonstration of bypassing

732
00:46:32,690 --> 00:46:41,330
<font color="#CCCCCC">PHP security restrictions</font><font color="#E5E5E5"> by using the</font>

733
00:46:36,830 --> 00:46:45,799
bug of tokenizer<font color="#E5E5E5"> with remote PHP code</font>

734
00:46:41,330 --> 00:46:49,610
execution<font color="#CCCCCC"> we can use the vulnerability</font>

735
00:46:45,800 --> 00:46:51,910
<font color="#CCCCCC">to execute arbitrary</font><font color="#E5E5E5"> code and get a</font>

736
00:46:49,610 --> 00:46:51,910
reverse shell

737
00:47:00,320 --> 00:47:09,560
the second demo is a pond<font color="#CCCCCC"> to own style</font>

738
00:47:03,410 --> 00:47:12,950
exploitation targeting<font color="#E5E5E5"> suffrage by using</font>

739
00:47:09,560 --> 00:47:15,410
the new bugs of<font color="#CCCCCC"> sick light can get</font>

740
00:47:12,950 --> 00:47:17,950
remote<font color="#E5E5E5"> route by visiting some malicious</font>

741
00:47:15,410 --> 00:47:17,950
<font color="#E5E5E5">website</font>

742
00:47:29,010 --> 00:47:38,460
and now we have<font color="#E5E5E5"> root so due to some</font>

743
00:47:34,609 --> 00:47:41,340
<font color="#E5E5E5">timing problem we will escape the two</font>

744
00:47:38,460 --> 00:47:44,250
demos<font color="#E5E5E5"> targeting WeChat and Alipay</font>

745
00:47:41,340 --> 00:47:49,970
because they are just<font color="#CCCCCC"> similar with the</font>

746
00:47:44,250 --> 00:47:49,970
browser<font color="#E5E5E5"> attack so it's time</font><font color="#CCCCCC"> for QA</font>

747
00:47:59,910 --> 00:48:05,000
sorry I cannot<font color="#CCCCCC"> hear</font><font color="#E5E5E5"> click really are you</font>

748
00:48:06,710 --> 00:48:11,279
<font color="#E5E5E5">because we use another</font><font color="#CCCCCC"> sandbox bypass</font><font color="#E5E5E5"> to</font>

749
00:48:09,630 --> 00:48:13,079
<font color="#E5E5E5">get a root yes</font>

750
00:48:11,279 --> 00:48:16,250
<font color="#CCCCCC">they say</font><font color="#E5E5E5"> exploitation is combined with</font>

751
00:48:13,079 --> 00:48:16,250
<font color="#E5E5E5">another bug</font>

752
00:48:27,650 --> 00:48:32,990
so no questions<font color="#E5E5E5"> thank</font><font color="#CCCCCC"> you guys</font>

753
00:48:31,080 --> 00:48:35,940
[Applause]

754
00:48:32,990 --> 00:48:35,939
[Music]

