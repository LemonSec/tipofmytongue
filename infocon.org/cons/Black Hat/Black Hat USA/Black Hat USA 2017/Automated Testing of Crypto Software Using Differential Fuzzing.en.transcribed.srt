1
00:00:00,030 --> 00:00:04,230
<font color="#E5E5E5">okay good afternoon</font><font color="#CCCCCC"> but thank you for</font>

2
00:00:01,800 --> 00:00:05,970
coming to our<font color="#CCCCCC"> talk we talk about crypto</font>

3
00:00:04,230 --> 00:00:09,450
but<font color="#E5E5E5"> that don't be scared there's not you</font>

4
00:00:05,970 --> 00:00:10,980
know<font color="#CCCCCC"> no questions no not scary stuff so</font>

5
00:00:09,450 --> 00:00:14,340
I'm<font color="#CCCCCC"> super happy to be here</font><font color="#E5E5E5"> in black</font>

6
00:00:10,980 --> 00:00:17,520
again it's very quickly about<font color="#E5E5E5"> us he done</font>

7
00:00:14,340 --> 00:00:19,020
us<font color="#E5E5E5"> we come from Sweden</font><font color="#CCCCCC"> gopher company</font>

8
00:00:17,520 --> 00:00:21,000
called<font color="#CCCCCC"> schoolís key security and we do</font>

9
00:00:19,020 --> 00:00:23,189
control<font color="#E5E5E5"> stuff with research consulting</font>

10
00:00:21,000 --> 00:00:25,890
code review<font color="#E5E5E5"> so you might know me for</font>

11
00:00:23,189 --> 00:00:27,990
some<font color="#E5E5E5"> quit up crypto stuff I did I talked</font>

12
00:00:25,890 --> 00:00:30,029
at blackhat last year and<font color="#CCCCCC"> they've been</font>

13
00:00:27,990 --> 00:00:31,709
<font color="#E5E5E5">infiltrated and I'm here with yo lon I</font>

14
00:00:30,029 --> 00:00:34,230
would<font color="#CCCCCC"> heed his master status</font><font color="#E5E5E5"> with me and</font>

15
00:00:31,710 --> 00:00:35,489
it's his<font color="#E5E5E5"> very first conference talk so</font>

16
00:00:34,230 --> 00:00:37,290
he's<font color="#E5E5E5"> been doing</font><font color="#CCCCCC"> a good job in his</font>

17
00:00:35,489 --> 00:00:40,919
<font color="#CCCCCC">master's days I'm sure he could do a</font>

18
00:00:37,290 --> 00:00:43,530
good job today again so it's very small

19
00:00:40,920 --> 00:00:45,510
<font color="#CCCCCC">commercial plug here is a book recently</font>

20
00:00:43,530 --> 00:00:48,780
<font color="#CCCCCC">it's the paper</font><font color="#E5E5E5"> cup is not out</font><font color="#CCCCCC"> yet but</font>

21
00:00:45,510 --> 00:00:52,559
<font color="#E5E5E5">you can order</font><font color="#CCCCCC"> it on no starch just an</font>

22
00:00:48,780 --> 00:00:55,559
<font color="#E5E5E5">amazing editor by the way okay so today</font>

23
00:00:52,559 --> 00:00:59,120
we've<font color="#CCCCCC"> start about you know saying what</font>

24
00:00:55,559 --> 00:01:01,230
what does<font color="#E5E5E5"> it mean to test cryptography</font>

25
00:00:59,120 --> 00:01:02,309
cryptographic software select software

26
00:01:01,230 --> 00:01:04,438
<font color="#E5E5E5">but there are some you know</font>

27
00:01:02,309 --> 00:01:06,479
<font color="#E5E5E5">particularities specific to</font><font color="#CCCCCC"> the crypto</font>

28
00:01:04,438 --> 00:01:07,710
<font color="#E5E5E5">and with personally what we call</font>

29
00:01:06,479 --> 00:01:09,270
differential for<font color="#CCCCCC"> things so that's a</font>

30
00:01:07,710 --> 00:01:11,520
terms<font color="#E5E5E5"> I introduced like maybe a year ago</font>

31
00:01:09,270 --> 00:01:13,048
<font color="#E5E5E5">I turned</font><font color="#CCCCCC"> out a bit differently than</font><font color="#E5E5E5"> what</font>

32
00:01:11,520 --> 00:01:15,630
I<font color="#CCCCCC"> expected but I will give</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> all the</font>

33
00:01:13,049 --> 00:01:17,189
<font color="#CCCCCC">details</font><font color="#E5E5E5"> and then we'll present</font><font color="#CCCCCC"> a tour</font>

34
00:01:15,630 --> 00:01:18,869
the tool that<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> going to release</font>

35
00:01:17,189 --> 00:01:20,908
<font color="#CCCCCC">today that which</font><font color="#E5E5E5"> you just already</font><font color="#CCCCCC"> radius</font>

36
00:01:18,869 --> 00:01:24,270
<font color="#E5E5E5">car was a bit lazy</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> we didn't get</font>

37
00:01:20,909 --> 00:01:26,280
up like one hour<font color="#CCCCCC"> ago ice</font><font color="#E5E5E5"> called CDF for</font>

38
00:01:24,270 --> 00:01:26,970
crypto<font color="#E5E5E5"> a differential</font><font color="#CCCCCC"> fuzzing will tell</font>

39
00:01:26,280 --> 00:01:28,710
you how<font color="#E5E5E5"> it works</font>

40
00:01:26,970 --> 00:01:30,750
that kind<font color="#E5E5E5"> of tested doors and</font><font color="#CCCCCC"> will do a</font>

41
00:01:28,710 --> 00:01:33,389
small<font color="#CCCCCC"> demo</font><font color="#E5E5E5"> before talking about</font><font color="#CCCCCC"> the</font>

42
00:01:30,750 --> 00:01:35,579
issues we<font color="#E5E5E5"> found so</font><font color="#CCCCCC"> well what</font><font color="#E5E5E5"> does it</font>

43
00:01:33,390 --> 00:01:36,990
<font color="#E5E5E5">mean to test cryptography so like any</font>

44
00:01:35,579 --> 00:01:38,389
<font color="#E5E5E5">piece of</font><font color="#CCCCCC"> software you</font><font color="#E5E5E5"> want to test two</font>

45
00:01:36,990 --> 00:01:41,130
things you<font color="#E5E5E5"> want to test functionality</font>

46
00:01:38,390 --> 00:01:44,009
<font color="#CCCCCC">meaning that when you send</font><font color="#E5E5E5"> a valid input</font>

47
00:01:41,130 --> 00:01:46,770
<font color="#E5E5E5">to your cipher or hash function or</font><font color="#CCCCCC"> are</font>

48
00:01:44,009 --> 00:01:48,320
say whatever you want<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> D valid</font>

49
00:01:46,770 --> 00:01:50,509
output<font color="#E5E5E5"> survived means</font>

50
00:01:48,320 --> 00:01:53,070
conformant with<font color="#E5E5E5"> the specification and</font>

51
00:01:50,509 --> 00:01:55,290
you want<font color="#CCCCCC"> invalid inputs to be rejected</font>

52
00:01:53,070 --> 00:01:56,880
<font color="#E5E5E5">so you want your function to give you to</font>

53
00:01:55,290 --> 00:01:58,649
send you an exception<font color="#E5E5E5"> or an error code</font>

54
00:01:56,880 --> 00:02:00,240
so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the color the user can</font>

55
00:01:58,649 --> 00:02:03,149
understand that<font color="#E5E5E5"> something is going wrong</font>

56
00:02:00,240 --> 00:02:04,530
<font color="#CCCCCC">with</font><font color="#E5E5E5"> that there's an invalid input so</font>

57
00:02:03,149 --> 00:02:06,540
you<font color="#E5E5E5"> also</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> test the</font><font color="#CCCCCC"> security of</font>

58
00:02:04,530 --> 00:02:09,030
the software obviously so the program

59
00:02:06,540 --> 00:02:11,520
should<font color="#CCCCCC"> not</font><font color="#E5E5E5"> be abused by attackers</font><font color="#CCCCCC"> you</font>

60
00:02:09,030 --> 00:02:12,819
should not have<font color="#CCCCCC"> any you know</font><font color="#E5E5E5"> memory</font>

61
00:02:11,520 --> 00:02:15,640
corruption or them

62
00:02:12,819 --> 00:02:17,170
your stuff and what specific<font color="#CCCCCC"> decrypter</font>

63
00:02:15,640 --> 00:02:19,208
is that you want to<font color="#CCCCCC"> avoid a leakage of</font>

64
00:02:17,170 --> 00:02:22,719
secrets<font color="#CCCCCC"> are rough private keys of plain</font>

65
00:02:19,209 --> 00:02:25,060
<font color="#CCCCCC">text is saying it</font><font color="#E5E5E5"> means not only leaks</font>

66
00:02:22,719 --> 00:02:27,249
for example memory terms but also leaks

67
00:02:25,060 --> 00:02:31,329
in terms of side channels typically in

68
00:02:27,249 --> 00:02:33,219
terms<font color="#E5E5E5"> of timing leaks okay so what do</font>

69
00:02:31,329 --> 00:02:35,379
you<font color="#E5E5E5"> test against</font><font color="#CCCCCC"> well there's two basic</font>

70
00:02:33,219 --> 00:02:37,480
cases the<font color="#E5E5E5"> first one you test</font><font color="#CCCCCC"> code</font>

71
00:02:35,379 --> 00:02:39,668
against code<font color="#E5E5E5"> so let's say you have a</font>

72
00:02:37,480 --> 00:02:41,980
baseline<font color="#CCCCCC"> reference implementation of</font>

73
00:02:39,669 --> 00:02:43,780
your cipher and you want to<font color="#E5E5E5"> create a new</font>

74
00:02:41,980 --> 00:02:46,119
one<font color="#CCCCCC"> it may be in a new language</font><font color="#E5E5E5"> or with</font>

75
00:02:43,780 --> 00:02:47,889
a different<font color="#CCCCCC"> optimization target</font><font color="#E5E5E5"> so this</font>

76
00:02:46,120 --> 00:02:49,840
is the ideal<font color="#CCCCCC"> case because you can have</font>

77
00:02:47,889 --> 00:02:52,120
as many debug values as<font color="#E5E5E5"> you want has</font>

78
00:02:49,840 --> 00:02:54,609
many test vectors<font color="#CCCCCC"> as you want and it's</font>

79
00:02:52,120 --> 00:02:56,980
<font color="#E5E5E5">pretty</font><font color="#CCCCCC"> easy to find the bugs in your new</font>

80
00:02:54,609 --> 00:02:59,139
implementation and<font color="#E5E5E5"> to in to fix them the</font>

81
00:02:56,980 --> 00:03:02,349
second case is much harder<font color="#CCCCCC"> is when you</font>

82
00:02:59,139 --> 00:03:06,129
only have<font color="#E5E5E5"> like a specification</font><font color="#CCCCCC"> a bunch</font>

83
00:03:02,349 --> 00:03:09,129
of<font color="#CCCCCC"> a4 documents which tells you how it</font>

84
00:03:06,129 --> 00:03:11,530
<font color="#E5E5E5">works but many time it will not tell you</font>

85
00:03:09,129 --> 00:03:12,909
like the internal intermediate values it

86
00:03:11,530 --> 00:03:15,489
will only give you a bunch of test

87
00:03:12,909 --> 00:03:17,108
vectors<font color="#E5E5E5"> and you have to fix and debug</font>

88
00:03:15,489 --> 00:03:18,639
<font color="#E5E5E5">your own code until you match the test</font>

89
00:03:17,109 --> 00:03:21,009
vectors<font color="#E5E5E5"> what's even harder is that</font>

90
00:03:18,639 --> 00:03:22,959
<font color="#E5E5E5">sometimes the specs is not complete it's</font>

91
00:03:21,009 --> 00:03:25,869
not you know comprehensive that

92
00:03:22,959 --> 00:03:26,470
sometimes happen in in pay TV<font color="#CCCCCC"> it's very</font>

93
00:03:25,870 --> 00:03:28,329
annoying

94
00:03:26,470 --> 00:03:30,879
<font color="#E5E5E5">so today we're going to talk</font><font color="#CCCCCC"> about the</font>

95
00:03:28,329 --> 00:03:33,030
first<font color="#E5E5E5"> case</font><font color="#CCCCCC"> course against code know</font>

96
00:03:30,879 --> 00:03:37,120
about automation automated testing

97
00:03:33,030 --> 00:03:39,129
<font color="#CCCCCC">there's many types</font><font color="#E5E5E5"> of tools the simplest</font>

98
00:03:37,120 --> 00:03:42,729
one<font color="#CCCCCC"> is static analyzers for example the</font>

99
00:03:39,129 --> 00:03:45,518
analyzers<font color="#CCCCCC"> int long which will report</font>

100
00:03:42,729 --> 00:03:47,319
issues<font color="#E5E5E5"> about you software security but</font>

101
00:03:45,519 --> 00:03:49,509
<font color="#E5E5E5">not about the corrective correctness of</font>

102
00:03:47,319 --> 00:03:51,220
the crypto obviously<font color="#E5E5E5"> the test vectors on</font>

103
00:03:49,509 --> 00:03:53,649
the<font color="#E5E5E5"> other end they will tell you whether</font>

104
00:03:51,220 --> 00:03:56,259
or<font color="#CCCCCC"> not your code is is correct in terms</font>

105
00:03:53,650 --> 00:03:58,599
<font color="#E5E5E5">of functionality</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it will not tell</font>

106
00:03:56,259 --> 00:04:00,298
you if the software is secure if there's

107
00:03:58,599 --> 00:04:03,310
any<font color="#CCCCCC"> Burgaw</font><font color="#E5E5E5"> undefined behavior</font>

108
00:04:00,299 --> 00:04:05,469
<font color="#E5E5E5">now here may be more advanced tools like</font>

109
00:04:03,310 --> 00:04:07,209
<font color="#E5E5E5">you know what we call dumb fuzzing</font>

110
00:04:05,469 --> 00:04:08,680
<font color="#E5E5E5">frightened by a face pretty smart but</font>

111
00:04:07,209 --> 00:04:10,629
<font color="#E5E5E5">it's still in the gutter</font><font color="#CCCCCC"> grab them</font>

112
00:04:08,680 --> 00:04:12,069
<font color="#CCCCCC">professors it doesn't know what it's</font>

113
00:04:10,629 --> 00:04:14,018
testing is<font color="#CCCCCC"> just trying to be as small as</font>

114
00:04:12,069 --> 00:04:16,029
<font color="#E5E5E5">possible in order to maximize the code</font>

115
00:04:14,019 --> 00:04:18,039
<font color="#E5E5E5">coverage and you will typically look for</font>

116
00:04:16,029 --> 00:04:19,719
crashes so most<font color="#CCCCCC"> people use a file to</font>

117
00:04:18,039 --> 00:04:21,849
<font color="#E5E5E5">look for crashes you can look for all</font>

118
00:04:19,719 --> 00:04:23,500
the kind of programs<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that's useful</font>

119
00:04:21,849 --> 00:04:25,729
for crypto<font color="#CCCCCC"> but that will</font><font color="#E5E5E5"> not you know</font>

120
00:04:23,500 --> 00:04:28,160
<font color="#E5E5E5">help you in finding</font><font color="#CCCCCC"> the decrypted pure</font>

121
00:04:25,730 --> 00:04:30,200
krypter bugs<font color="#E5E5E5"> now you have the smart</font>

122
00:04:28,160 --> 00:04:32,120
<font color="#CCCCCC">phrasing</font><font color="#E5E5E5"> so typically the kind of</font>

123
00:04:30,200 --> 00:04:33,530
further that is aware<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the API is</font>

124
00:04:32,120 --> 00:04:34,820
testing<font color="#CCCCCC"> for example your first</font><font color="#E5E5E5"> and we</font>

125
00:04:33,530 --> 00:04:38,719
know that it's testing for<font color="#CCCCCC"> example</font>

126
00:04:34,820 --> 00:04:41,300
<font color="#CCCCCC">Piggy's pkcs 11 parser or is testing RSA</font>

127
00:04:38,720 --> 00:04:43,010
or IP so then they will know which<font color="#E5E5E5"> kind</font>

128
00:04:41,300 --> 00:04:45,320
<font color="#CCCCCC">of input to send to maximize the code</font>

129
00:04:43,010 --> 00:04:48,650
<font color="#CCCCCC">coverage and to maximize</font><font color="#E5E5E5"> the number</font>

130
00:04:45,320 --> 00:04:50,150
<font color="#CCCCCC">number</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> bugs found and now the more</font>

131
00:04:48,650 --> 00:04:52,370
powerful approach is verification<font color="#E5E5E5"> form</font>

132
00:04:50,150 --> 00:04:54,500
of verification which can for example

133
00:04:52,370 --> 00:04:55,550
<font color="#E5E5E5">prove mathematically that</font><font color="#CCCCCC"> when</font>

134
00:04:54,500 --> 00:04:58,010
<font color="#E5E5E5">implementation is functionally</font>

135
00:04:55,550 --> 00:05:00,980
equivalent<font color="#CCCCCC"> to one another</font><font color="#E5E5E5"> or it can also</font>

136
00:04:58,010 --> 00:05:03,200
prove some security properties of your

137
00:05:00,980 --> 00:05:05,240
<font color="#E5E5E5">protocol for example it's been used to</font>

138
00:05:03,200 --> 00:05:07,659
prove<font color="#E5E5E5"> them for secrecy and other</font>

139
00:05:05,240 --> 00:05:10,550
properties of<font color="#E5E5E5"> the weather guard VPN</font>

140
00:05:07,660 --> 00:05:12,710
software<font color="#E5E5E5"> so the question is you</font><font color="#CCCCCC"> know how</font>

141
00:05:10,550 --> 00:05:14,840
<font color="#CCCCCC">to</font><font color="#E5E5E5"> maximize efficiency static</font><font color="#CCCCCC"> lies are</font>

142
00:05:12,710 --> 00:05:16,520
pretty easy<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use but</font><font color="#E5E5E5"> not super fluid</font>

143
00:05:14,840 --> 00:05:19,039
from formal verification very powerful

144
00:05:16,520 --> 00:05:21,080
but very<font color="#E5E5E5"> hard to use so</font><font color="#CCCCCC"> in terms of</font>

145
00:05:19,040 --> 00:05:22,910
<font color="#E5E5E5">perdition</font><font color="#CCCCCC"> see you have the</font><font color="#E5E5E5"> the red area</font>

146
00:05:21,080 --> 00:05:25,099
here<font color="#E5E5E5"> where you have smart fitting and</font>

147
00:05:22,910 --> 00:05:28,070
formal verification the test<font color="#E5E5E5"> vectors is</font>

148
00:05:25,100 --> 00:05:29,570
much<font color="#E5E5E5"> you know lower on the curve so we'd</font>

149
00:05:28,070 --> 00:05:31,820
like to be<font color="#E5E5E5"> you know at the level of the</font>

150
00:05:29,570 --> 00:05:34,510
other question mark<font color="#E5E5E5"> get a good return on</font>

151
00:05:31,820 --> 00:05:37,400
an investment

152
00:05:34,510 --> 00:05:40,580
<font color="#CCCCCC">moreover the method I mentioned they're</font>

153
00:05:37,400 --> 00:05:43,250
<font color="#CCCCCC">not they're not perfect they will most</font>

154
00:05:40,580 --> 00:05:44,900
<font color="#E5E5E5">of the time not check the quality of the</font>

155
00:05:43,250 --> 00:05:46,310
<font color="#E5E5E5">randomness so randomness is very</font>

156
00:05:44,900 --> 00:05:48,489
important<font color="#CCCCCC"> in crypto cat</font><font color="#E5E5E5"> it's if it's</font>

157
00:05:46,310 --> 00:05:51,110
incorrect and everything is insecure

158
00:05:48,490 --> 00:05:53,900
<font color="#E5E5E5">they will most of</font><font color="#CCCCCC"> the time not check for</font>

159
00:05:51,110 --> 00:05:56,240
<font color="#E5E5E5">techniques you have some variant plugins</font>

160
00:05:53,900 --> 00:05:58,820
<font color="#E5E5E5">that try to do this but</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> special</font>

161
00:05:56,240 --> 00:06:00,230
case<font color="#E5E5E5"> and like I said it is</font><font color="#CCCCCC"> backed off</font>

162
00:05:58,820 --> 00:06:01,730
<font color="#CCCCCC">most of the time you get</font><font color="#E5E5E5"> this vectors</font>

163
00:06:00,230 --> 00:06:04,940
<font color="#E5E5E5">for</font><font color="#CCCCCC"> the valid inputs not for the invalid</font>

164
00:06:01,730 --> 00:06:06,110
ones<font color="#CCCCCC"> okay and they will only look at for</font>

165
00:06:04,940 --> 00:06:09,080
example<font color="#CCCCCC"> a default</font><font color="#E5E5E5"> version for example</font>

166
00:06:06,110 --> 00:06:14,360
<font color="#E5E5E5">RSA</font><font color="#CCCCCC"> 2k but not all the possible</font><font color="#E5E5E5"> versions</font>

167
00:06:09,080 --> 00:06:16,760
of<font color="#E5E5E5"> a pharisee right so how to actually</font>

168
00:06:14,360 --> 00:06:18,890
better with a new tool specifically

169
00:06:16,760 --> 00:06:20,510
<font color="#CCCCCC">decrypted demolitions</font><font color="#E5E5E5"> so what we call</font>

170
00:06:18,890 --> 00:06:22,219
differential fighting is not very new

171
00:06:20,510 --> 00:06:24,500
it's just<font color="#E5E5E5"> the idea of you</font><font color="#CCCCCC"> know comparing</font>

172
00:06:22,220 --> 00:06:27,590
two implementations<font color="#CCCCCC"> but</font><font color="#E5E5E5"> in a kind of</font>

173
00:06:24,500 --> 00:06:30,100
automatic way<font color="#CCCCCC"> so people done this before</font>

174
00:06:27,590 --> 00:06:33,099
for<font color="#CCCCCC"> example a designer</font>

175
00:06:30,100 --> 00:06:35,900
<font color="#E5E5E5">try to test his new</font><font color="#CCCCCC"> information 24 by</font>

176
00:06:33,100 --> 00:06:38,800
comparing it to<font color="#E5E5E5"> I think the open cell</font>

177
00:06:35,900 --> 00:06:42,340
version frog from<font color="#E5E5E5"> leap sodium</font>

178
00:06:38,800 --> 00:06:43,900
did something<font color="#CCCCCC"> similar but in</font><font color="#E5E5E5"> these two</font>

179
00:06:42,340 --> 00:06:45,400
cases there were only specific<font color="#CCCCCC"> to</font><font color="#E5E5E5"> their</font>

180
00:06:43,900 --> 00:06:46,989
to<font color="#E5E5E5"> their own</font><font color="#CCCCCC"> due to their own</font><font color="#E5E5E5"> software</font>

181
00:06:45,400 --> 00:06:48,849
<font color="#CCCCCC">so</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> went some to make</font><font color="#E5E5E5"> something that's</font>

182
00:06:46,990 --> 00:06:49,990
<font color="#E5E5E5">generic that not only</font><font color="#CCCCCC"> asked</font><font color="#E5E5E5"> and used but</font>

183
00:06:48,850 --> 00:06:52,000
<font color="#CCCCCC">that anyone can use</font><font color="#E5E5E5"> in their own</font>

184
00:06:49,990 --> 00:06:55,180
<font color="#E5E5E5">software something that is agnostic of</font>

185
00:06:52,000 --> 00:06:58,150
the language of the API and of the<font color="#E5E5E5"> the</font>

186
00:06:55,180 --> 00:07:00,280
<font color="#E5E5E5">platform</font><font color="#CCCCCC"> so to give you a concrete</font><font color="#E5E5E5"> idea</font>

187
00:06:58,150 --> 00:07:01,929
<font color="#E5E5E5">of what it does is pretty stupid let's</font>

188
00:07:00,280 --> 00:07:05,229
say you you want<font color="#CCCCCC"> to test hash function</font>

189
00:07:01,930 --> 00:07:06,870
so hash function<font color="#CCCCCC"> is crypto it's a black</font>

190
00:07:05,229 --> 00:07:09,190
box something<font color="#E5E5E5"> that takes an input of</font>

191
00:07:06,870 --> 00:07:11,440
arbitrary<font color="#CCCCCC"> size can be</font><font color="#E5E5E5"> one bit it can be</font>

192
00:07:09,190 --> 00:07:15,070
one gigabyte and<font color="#E5E5E5"> it will get you a small</font>

193
00:07:11,440 --> 00:07:17,500
output of let's say 256 bits which

194
00:07:15,070 --> 00:07:19,270
should look random to be<font color="#CCCCCC"> six euro so now</font>

195
00:07:17,500 --> 00:07:21,340
you have frostburn p1 which is a hash

196
00:07:19,270 --> 00:07:23,139
<font color="#CCCCCC">function for</font><font color="#E5E5E5"> example now a2 and you have</font>

197
00:07:21,340 --> 00:07:27,099
<font color="#E5E5E5">p2 which is another</font><font color="#CCCCCC"> information of satu</font>

198
00:07:23,139 --> 00:07:29,500
so your program<font color="#E5E5E5"> your footer will try to</font>

199
00:07:27,099 --> 00:07:30,969
<font color="#E5E5E5">generate as many input as possible that</font>

200
00:07:29,500 --> 00:07:34,000
maximize the<font color="#CCCCCC"> gut</font><font color="#E5E5E5"> coverage for your hash</font>

201
00:07:30,970 --> 00:07:36,009
<font color="#CCCCCC">function and they will</font><font color="#E5E5E5"> check that p1 of</font>

202
00:07:34,000 --> 00:07:38,349
X is equal of p2 of X<font color="#CCCCCC"> that for some</font>

203
00:07:36,009 --> 00:07:41,440
input<font color="#CCCCCC"> you get the same the same outputs</font>

204
00:07:38,349 --> 00:07:43,330
that's pretty stupid<font color="#CCCCCC"> it's a bit less</font>

205
00:07:41,440 --> 00:07:45,669
stupid<font color="#E5E5E5"> for encryption so here the input</font>

206
00:07:43,330 --> 00:07:47,590
generation is not<font color="#E5E5E5"> just a message it's a</font>

207
00:07:45,669 --> 00:07:50,530
message<font color="#E5E5E5"> plus a public key plus a private</font>

208
00:07:47,590 --> 00:07:52,270
<font color="#E5E5E5">key that</font><font color="#CCCCCC"> matches the public key so p1</font>

209
00:07:50,530 --> 00:07:55,570
<font color="#E5E5E5">and p2 in this case are not doing the</font>

210
00:07:52,270 --> 00:07:58,630
same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> p1 is encrypting the input X</font>

211
00:07:55,570 --> 00:08:00,190
and P<font color="#E5E5E5"> 2 will decrypt so you encrypt</font>

212
00:07:58,630 --> 00:08:02,949
using the public key and you<font color="#E5E5E5"> decrypt</font>

213
00:08:00,190 --> 00:08:04,570
using the private key<font color="#CCCCCC"> and at the end you</font>

214
00:08:02,949 --> 00:08:06,430
want to<font color="#E5E5E5"> check that after decrypting the</font>

215
00:08:04,570 --> 00:08:07,560
<font color="#CCCCCC">ciphertext you get the same input that</font>

216
00:08:06,430 --> 00:08:09,789
you started with

217
00:08:07,560 --> 00:08:12,220
so find signature<font color="#E5E5E5"> it's pretty much</font>

218
00:08:09,789 --> 00:08:14,020
similar you get a message<font color="#CCCCCC"> an idea and</font>

219
00:08:12,220 --> 00:08:17,830
you want<font color="#E5E5E5"> to check that your signature on</font>

220
00:08:14,020 --> 00:08:20,669
these messages<font color="#E5E5E5"> is valid</font><font color="#CCCCCC"> ok now</font><font color="#E5E5E5"> let's</font>

221
00:08:17,830 --> 00:08:24,789
talk about on<font color="#E5E5E5"> YouTube</font>

222
00:08:20,669 --> 00:08:27,849
<font color="#CCCCCC">all right so CDF is a</font><font color="#E5E5E5"> tool we developed</font>

223
00:08:24,789 --> 00:08:30,909
to use<font color="#E5E5E5"> that approach of testing so we</font>

224
00:08:27,849 --> 00:08:34,510
<font color="#E5E5E5">wanted</font><font color="#CCCCCC"> to do cryptic crypto differential</font>

225
00:08:30,909 --> 00:08:38,880
<font color="#E5E5E5">phasing so we decided</font><font color="#CCCCCC"> to implement</font><font color="#E5E5E5"> it in</font>

226
00:08:34,510 --> 00:08:41,319
a way<font color="#E5E5E5"> which was completely able to test</font>

227
00:08:38,880 --> 00:08:46,300
executable in a black box<font color="#CCCCCC"> patient</font><font color="#E5E5E5"> so</font>

228
00:08:41,320 --> 00:08:48,790
know instrumenting<font color="#CCCCCC"> no compiling</font><font color="#E5E5E5"> no</font>

229
00:08:46,300 --> 00:08:51,780
nothing you<font color="#E5E5E5"> just get an exact table so</font>

230
00:08:48,790 --> 00:08:54,599
we did it<font color="#E5E5E5"> in go so we got</font>

231
00:08:51,780 --> 00:08:57,839
<font color="#E5E5E5">cdf executable which can support many</font>

232
00:08:54,600 --> 00:09:00,810
tests at once<font color="#E5E5E5"> concurrently which is</font>

233
00:08:57,840 --> 00:09:06,000
completely language agnostic as<font color="#CCCCCC"> GPS a</font>

234
00:09:00,810 --> 00:09:09,750
and we can test<font color="#E5E5E5"> go code</font><font color="#CCCCCC"> C code</font><font color="#E5E5E5"> Python</font>

235
00:09:06,000 --> 00:09:12,870
code<font color="#E5E5E5"> Java code whatever with it</font><font color="#CCCCCC"> so the</font>

236
00:09:09,750 --> 00:09:15,300
bottleneck won't be our tool it will

237
00:09:12,870 --> 00:09:16,860
always<font color="#CCCCCC"> be the tested implementation</font>

238
00:09:15,300 --> 00:09:21,270
because those are the<font color="#E5E5E5"> one doing</font><font color="#CCCCCC"> the</font>

239
00:09:16,860 --> 00:09:24,870
actual complete computations<font color="#E5E5E5"> we well GP</font>

240
00:09:21,270 --> 00:09:28,439
started working on CDF in May and I

241
00:09:24,870 --> 00:09:33,330
arrived in September<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> mostly</font>

242
00:09:28,440 --> 00:09:37,250
finished<font color="#E5E5E5"> the software in March so why</font>

243
00:09:33,330 --> 00:09:40,770
would<font color="#CCCCCC"> you</font><font color="#E5E5E5"> use CDF</font><font color="#CCCCCC"> well CDF will do</font>

244
00:09:37,250 --> 00:09:43,950
differential phasing and implementation

245
00:09:40,770 --> 00:09:45,930
you<font color="#CCCCCC"> get</font><font color="#E5E5E5"> but it won't test just</font>

246
00:09:43,950 --> 00:09:48,390
functionality it will test functionality

247
00:09:45,930 --> 00:09:50,640
through the differential<font color="#E5E5E5"> fitting</font>

248
00:09:48,390 --> 00:09:54,030
approach<font color="#E5E5E5"> but it will also do a bit</font><font color="#CCCCCC"> more</font>

249
00:09:50,640 --> 00:09:56,100
<font color="#E5E5E5">so we decided</font><font color="#CCCCCC"> to also</font><font color="#E5E5E5"> test correctness</font>

250
00:09:54,030 --> 00:09:59,790
and security of the<font color="#CCCCCC"> implementation</font>

251
00:09:56,100 --> 00:10:02,040
through unit tests<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> got a bunch</font><font color="#E5E5E5"> of</font>

252
00:09:59,790 --> 00:10:04,319
unit tests which will be run against

253
00:10:02,040 --> 00:10:08,270
both implementation and you can compare

254
00:10:04,320 --> 00:10:11,850
the outcome for both so we check for

255
00:10:08,270 --> 00:10:15,750
<font color="#CCCCCC">insecure parameters non-compliance with</font>

256
00:10:11,850 --> 00:10:19,860
standards<font color="#E5E5E5"> and other edge cases which are</font>

257
00:10:15,750 --> 00:10:22,530
interesting so we won't replace formal

258
00:10:19,860 --> 00:10:25,530
verification at all it's not really not

259
00:10:22,530 --> 00:10:27,930
the goals or the goal is to<font color="#E5E5E5"> replace unit</font>

260
00:10:25,530 --> 00:10:31,230
<font color="#E5E5E5">tests and do a bit more</font><font color="#CCCCCC"> than unit tests</font>

261
00:10:27,930 --> 00:10:33,900
and it will<font color="#E5E5E5"> also test interoperability</font>

262
00:10:31,230 --> 00:10:36,180
science<font color="#E5E5E5"> its differential so you</font>

263
00:10:33,900 --> 00:10:38,400
certainly<font color="#E5E5E5"> heard of another</font><font color="#CCCCCC"> project which</font>

264
00:10:36,180 --> 00:10:41,790
is<font color="#CCCCCC"> about unit testing it's which proof</font>

265
00:10:38,400 --> 00:10:45,750
<font color="#E5E5E5">by a team of researcher at Google they</font>

266
00:10:41,790 --> 00:10:49,650
<font color="#E5E5E5">got really nice unit</font><font color="#CCCCCC"> tests</font><font color="#E5E5E5"> for the Java</font>

267
00:10:45,750 --> 00:10:51,600
<font color="#E5E5E5">common crypto interface and they found a</font>

268
00:10:49,650 --> 00:10:54,120
lot of<font color="#E5E5E5"> bags</font><font color="#CCCCCC"> so that's a really</font>

269
00:10:51,600 --> 00:10:56,910
<font color="#CCCCCC">interesting approach in</font><font color="#E5E5E5"> its completely</font>

270
00:10:54,120 --> 00:11:00,089
complimentary to ours<font color="#CCCCCC"> so we could</font>

271
00:10:56,910 --> 00:11:02,100
typically take the<font color="#E5E5E5"> unit test and run</font>

272
00:11:00,089 --> 00:11:04,400
<font color="#E5E5E5">them in a differential way against</font>

273
00:11:02,100 --> 00:11:07,550
<font color="#E5E5E5">implementation we test we do</font>

274
00:11:04,400 --> 00:11:11,810
yet but we typically<font color="#E5E5E5"> plan to do that</font>

275
00:11:07,550 --> 00:11:16,400
later<font color="#E5E5E5"> so really interesting</font><font color="#CCCCCC"> projects so</font>

276
00:11:11,810 --> 00:11:20,689
Oh does CDF work<font color="#E5E5E5"> so say you want to</font><font color="#CCCCCC"> test</font>

277
00:11:16,400 --> 00:11:22,939
<font color="#E5E5E5">ECDSA</font><font color="#CCCCCC"> you've got open</font><font color="#E5E5E5"> SSL and TLS</font><font color="#CCCCCC"> boochi</font>

278
00:11:20,690 --> 00:11:27,020
<font color="#CCCCCC">castle a lot of</font><font color="#E5E5E5"> libraries implementing</font>

279
00:11:22,940 --> 00:11:29,180
ECDSA<font color="#CCCCCC"> and</font><font color="#E5E5E5"> what you want to be to do is</font>

280
00:11:27,020 --> 00:11:32,060
testing your implementation against one

281
00:11:29,180 --> 00:11:35,329
<font color="#CCCCCC">of those but those won't have the same</font>

282
00:11:32,060 --> 00:11:38,449
<font color="#E5E5E5">API we don't have a common crypto API</font>

283
00:11:35,330 --> 00:11:41,660
<font color="#E5E5E5">for all libraries</font><font color="#CCCCCC"> it's not standardized</font>

284
00:11:38,450 --> 00:11:43,700
yet it's a shame but that's<font color="#CCCCCC"> the case so</font>

285
00:11:41,660 --> 00:11:45,160
how do you deal with<font color="#E5E5E5"> that we decided</font><font color="#CCCCCC"> to</font>

286
00:11:43,700 --> 00:11:48,830
deal with that through what we call

287
00:11:45,160 --> 00:11:52,579
interfaces so for example if you want to

288
00:11:48,830 --> 00:11:54,950
<font color="#CCCCCC">test an ECDSA</font><font color="#E5E5E5"> program you will have to</font>

289
00:11:52,580 --> 00:11:57,980
well it's just a implementation you will

290
00:11:54,950 --> 00:12:01,070
have to code a little<font color="#E5E5E5"> program which will</font>

291
00:11:57,980 --> 00:12:04,850
work as a proxy between<font color="#E5E5E5"> your API and our</font>

292
00:12:01,070 --> 00:12:07,670
API so<font color="#CCCCCC"> currently or API is only on</font>

293
00:12:04,850 --> 00:12:11,330
<font color="#E5E5E5">common line arguments so CDF will</font>

294
00:12:07,670 --> 00:12:14,510
basically<font color="#CCCCCC"> doing be doing exact</font><font color="#E5E5E5"> calls on</font>

295
00:12:11,330 --> 00:12:19,580
the implementation at hand<font color="#E5E5E5"> with the</font>

296
00:12:14,510 --> 00:12:21,770
arguments in yeah come<font color="#CCCCCC"> online so for</font>

297
00:12:19,580 --> 00:12:24,230
example for<font color="#E5E5E5"> ECDSA if you want to sign</font>

298
00:12:21,770 --> 00:12:27,710
something you will just need<font color="#CCCCCC"> to get the</font>

299
00:12:24,230 --> 00:12:32,000
public<font color="#E5E5E5"> key</font><font color="#CCCCCC"> coordinates</font><font color="#E5E5E5"> x and y the</font>

300
00:12:27,710 --> 00:12:35,150
private key<font color="#E5E5E5"> D and the message and your</font>

301
00:12:32,000 --> 00:12:38,450
program should<font color="#CCCCCC"> output the signature</font><font color="#E5E5E5"> or</font>

302
00:12:35,150 --> 00:12:41,270
an S if your<font color="#E5E5E5"> program does just that then</font>

303
00:12:38,450 --> 00:12:44,330
you can use CDF<font color="#CCCCCC"> to test it which is</font>

304
00:12:41,270 --> 00:12:47,689
really<font color="#CCCCCC"> easy to code so for example in</font>

305
00:12:44,330 --> 00:12:51,020
Python<font color="#E5E5E5"> it's like 35 line of code to</font><font color="#CCCCCC"> do a</font>

306
00:12:47,690 --> 00:12:53,150
proxy between<font color="#E5E5E5"> a cryptography that</font><font color="#CCCCCC"> I only</font>

307
00:12:51,020 --> 00:12:55,689
<font color="#CCCCCC">worry here you might ask</font><font color="#E5E5E5"> a question why</font>

308
00:12:53,150 --> 00:12:58,040
do<font color="#CCCCCC"> you with the</font><font color="#E5E5E5"> public key for signing</font>

309
00:12:55,690 --> 00:13:00,200
<font color="#E5E5E5">because in some implementations they</font>

310
00:12:58,040 --> 00:13:02,480
need<font color="#E5E5E5"> only private key but they need more</font>

311
00:13:00,200 --> 00:13:05,990
stuff than what<font color="#CCCCCC"> you actually need</font><font color="#E5E5E5"> so we</font>

312
00:13:02,480 --> 00:13:07,280
need to to<font color="#CCCCCC"> be as flexible as possible</font><font color="#E5E5E5"> to</font>

313
00:13:05,990 --> 00:13:09,800
<font color="#E5E5E5">support as many inflammation as as</font>

314
00:13:07,280 --> 00:13:13,400
possible<font color="#CCCCCC"> yeah exactly so</font><font color="#E5E5E5"> some time to</font>

315
00:13:09,800 --> 00:13:15,290
<font color="#E5E5E5">implement</font><font color="#CCCCCC"> yeah to get a private key you</font>

316
00:13:13,400 --> 00:13:16,740
<font color="#E5E5E5">need the public key into private key a</font>

317
00:13:15,290 --> 00:13:20,130
<font color="#E5E5E5">dependent</font>

318
00:13:16,740 --> 00:13:23,730
yeah<font color="#E5E5E5"> so the CDF interface or really</font>

319
00:13:20,130 --> 00:13:26,610
generic<font color="#E5E5E5"> api's in</font><font color="#CCCCCC"> common</font><font color="#E5E5E5"> line we will do</font>

320
00:13:23,730 --> 00:13:30,120
something<font color="#E5E5E5"> more AFL like later with file</font>

321
00:13:26,610 --> 00:13:32,340
<font color="#E5E5E5">based</font><font color="#CCCCCC"> API but it's not</font><font color="#E5E5E5"> Zura yet it's</font>

322
00:13:30,120 --> 00:13:35,180
<font color="#E5E5E5">completely black box so you don't need</font>

323
00:13:32,340 --> 00:13:39,450
to instrument your execute tables and

324
00:13:35,180 --> 00:13:41,040
yeah it's<font color="#E5E5E5"> really it's</font><font color="#CCCCCC"> really silly the</font>

325
00:13:39,450 --> 00:13:45,210
<font color="#E5E5E5">interfaces</font><font color="#CCCCCC"> they you won't do anything</font>

326
00:13:41,040 --> 00:13:49,949
fancy so for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> there you've got</font>

327
00:13:45,210 --> 00:13:52,590
CDF<font color="#CCCCCC"> on tap that's a binary or program</font>

328
00:13:49,950 --> 00:13:55,560
and it will try to communicate with<font color="#E5E5E5"> your</font>

329
00:13:52,590 --> 00:13:59,700
library and the button through the proxy

330
00:13:55,560 --> 00:14:02,790
interface programs<font color="#E5E5E5"> so if you get I don't</font>

331
00:13:59,700 --> 00:14:06,450
<font color="#CCCCCC">know</font><font color="#E5E5E5"> an open SSL implementation you make</font>

332
00:14:02,790 --> 00:14:11,339
a little program to just<font color="#E5E5E5"> proxies open</font>

333
00:14:06,450 --> 00:14:13,170
SSL API calls to<font color="#E5E5E5"> our API and</font><font color="#CCCCCC"> you do the</font>

334
00:14:11,340 --> 00:14:16,260
<font color="#E5E5E5">same</font><font color="#CCCCCC"> for yours</font><font color="#E5E5E5"> and you can compare them</font>

335
00:14:13,170 --> 00:14:20,030
<font color="#E5E5E5">it's really easy</font><font color="#CCCCCC"> so there is an example</font>

336
00:14:16,260 --> 00:14:24,840
<font color="#E5E5E5">that's a full code of proxy program for</font>

337
00:14:20,030 --> 00:14:27,510
ECDSA<font color="#E5E5E5"> in</font><font color="#CCCCCC"> python 35 lines of code it's</font>

338
00:14:24,840 --> 00:14:30,660
really quick<font color="#E5E5E5"> but you can test a lot of</font>

339
00:14:27,510 --> 00:14:32,819
<font color="#E5E5E5">features with just that</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the same</font>

340
00:14:30,660 --> 00:14:35,180
<font color="#E5E5E5">for go</font><font color="#CCCCCC"> so it's a bit longer because</font>

341
00:14:32,820 --> 00:14:38,370
actually<font color="#CCCCCC"> xur</font><font color="#E5E5E5"> we support one more</font>

342
00:14:35,180 --> 00:14:41,489
additional flag<font color="#E5E5E5"> it's a detail</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

343
00:14:38,370 --> 00:14:44,550
read you can<font color="#E5E5E5"> read it on the github page</font>

344
00:14:41,490 --> 00:14:46,410
later if you want<font color="#E5E5E5"> but yeah and in open</font>

345
00:14:44,550 --> 00:14:48,870
<font color="#CCCCCC">ssl you've got all the pointers</font><font color="#E5E5E5"> you need</font>

346
00:14:46,410 --> 00:14:52,010
to clear stuff so it's a bit more<font color="#E5E5E5"> line</font>

347
00:14:48,870 --> 00:14:56,220
of<font color="#CCCCCC"> code but it's still fairly easy so</font>

348
00:14:52,010 --> 00:14:58,830
<font color="#CCCCCC">now</font><font color="#E5E5E5"> very few</font><font color="#CCCCCC"> examples of that again</font>

349
00:14:56,220 --> 00:15:01,050
there's nothing<font color="#E5E5E5"> complicated we try to be</font>

350
00:14:58,830 --> 00:15:03,450
as simple<font color="#E5E5E5"> as possible here you can take</font>

351
00:15:01,050 --> 00:15:05,670
all these days<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> in your code</font><font color="#CCCCCC"> so</font>

352
00:15:03,450 --> 00:15:07,950
<font color="#CCCCCC">very again the</font><font color="#E5E5E5"> simplest case</font><font color="#CCCCCC"> is that of</font>

353
00:15:05,670 --> 00:15:09,479
a hash function or<font color="#CCCCCC"> a keyed hash function</font>

354
00:15:07,950 --> 00:15:11,040
so keyed hash function is<font color="#E5E5E5"> like hash</font>

355
00:15:09,480 --> 00:15:13,380
function but<font color="#E5E5E5"> you have a secret key a</font>

356
00:15:11,040 --> 00:15:15,510
secret parameter so you can only compute

357
00:15:13,380 --> 00:15:17,250
the<font color="#CCCCCC"> output if you know a secret key so</font>

358
00:15:15,510 --> 00:15:19,170
PRF<font color="#E5E5E5"> of</font><font color="#CCCCCC"> silly random hash function</font>

359
00:15:17,250 --> 00:15:21,540
<font color="#E5E5E5">children function or Mac they're</font>

360
00:15:19,170 --> 00:15:23,430
essentially keyed hash function so we a

361
00:15:21,540 --> 00:15:25,079
p1 and p2 they do exactly<font color="#E5E5E5"> the same thing</font>

362
00:15:23,430 --> 00:15:27,599
<font color="#E5E5E5">so you're supposed to get</font><font color="#CCCCCC"> the same</font>

363
00:15:25,080 --> 00:15:29,680
output<font color="#CCCCCC"> on a some input so what we'll</font><font color="#E5E5E5"> try</font>

364
00:15:27,600 --> 00:15:31,330
<font color="#E5E5E5">to do is in very simple</font>

365
00:15:29,680 --> 00:15:33,189
<font color="#CCCCCC">send</font><font color="#E5E5E5"> different inputs with different</font>

366
00:15:31,330 --> 00:15:35,560
values<font color="#CCCCCC"> but with different sizes for</font>

367
00:15:33,190 --> 00:15:38,080
<font color="#CCCCCC">example the</font><font color="#E5E5E5"> DMT input or input for</font><font color="#CCCCCC"> your</font>

368
00:15:35,560 --> 00:15:39,489
very long or some input<font color="#E5E5E5"> aligned with the</font>

369
00:15:38,080 --> 00:15:41,920
block size or it's not aligned<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font>

370
00:15:39,490 --> 00:15:44,350
block size<font color="#E5E5E5"> it's kind of thing and</font>

371
00:15:41,920 --> 00:15:45,880
sometimes you will find there are some

372
00:15:44,350 --> 00:15:48,310
specific<font color="#E5E5E5"> behavior for example</font><font color="#CCCCCC"> if you</font>

373
00:15:45,880 --> 00:15:50,920
<font color="#E5E5E5">look at the H mark H mark it supports</font>

374
00:15:48,310 --> 00:15:54,760
different<font color="#E5E5E5"> sizes of keys so let's say you</font>

375
00:15:50,920 --> 00:15:57,610
have the key 1 2 3<font color="#CCCCCC"> with the bite 1 by 20</font>

376
00:15:54,760 --> 00:15:59,529
by<font color="#CCCCCC"> 3 and you have</font><font color="#E5E5E5"> the key 1 2 3 0 then</font>

377
00:15:57,610 --> 00:16:01,540
these two keys will<font color="#CCCCCC"> be here we have</font>

378
00:15:59,529 --> 00:16:04,000
identically you will get the<font color="#E5E5E5"> same output</font>

379
00:16:01,540 --> 00:16:06,279
for the same input<font color="#E5E5E5"> even</font><font color="#CCCCCC"> though the keys</font>

380
00:16:04,000 --> 00:16:08,770
have different sizes<font color="#E5E5E5"> it's not the</font><font color="#CCCCCC"> burgh</font>

381
00:16:06,279 --> 00:16:11,080
as a feature<font color="#E5E5E5"> but you should know that</font>

382
00:16:08,770 --> 00:16:13,120
<font color="#E5E5E5">it's works like this now it's not ideal</font>

383
00:16:11,080 --> 00:16:15,130
<font color="#E5E5E5">it's not insecure but if I were to</font>

384
00:16:13,120 --> 00:16:16,540
<font color="#CCCCCC">design a new</font><font color="#E5E5E5"> mark I will not do it like</font>

385
00:16:15,130 --> 00:16:19,990
<font color="#CCCCCC">this</font>

386
00:16:16,540 --> 00:16:22,420
for ECDSA<font color="#E5E5E5"> again</font><font color="#CCCCCC"> without all the details</font>

387
00:16:19,990 --> 00:16:24,160
<font color="#CCCCCC">so</font><font color="#E5E5E5"> here ascription is different the</font>

388
00:16:22,420 --> 00:16:25,899
first<font color="#E5E5E5"> program</font><font color="#CCCCCC"> would sign will issue</font>

389
00:16:24,160 --> 00:16:28,630
signature and Sigyn<font color="#CCCCCC"> one will verify in</font>

390
00:16:25,899 --> 00:16:29,950
the signature<font color="#E5E5E5"> so if you create a legit</font>

391
00:16:28,630 --> 00:16:32,800
signature and it should be<font color="#CCCCCC"> verified</font>

392
00:16:29,950 --> 00:16:36,310
successfully by the verifier so now we

393
00:16:32,800 --> 00:16:37,630
will in some some libraries<font color="#E5E5E5"> sometimes</font>

394
00:16:36,310 --> 00:16:41,079
you will give them they<font color="#E5E5E5"> will accept the</font>

395
00:16:37,630 --> 00:16:42,760
<font color="#E5E5E5">message and the function ECDSA sign</font>

396
00:16:41,080 --> 00:16:45,010
whatever<font color="#E5E5E5"> they will take this message of</font>

397
00:16:42,760 --> 00:16:46,420
<font color="#CCCCCC">inside they will</font><font color="#E5E5E5"> hash it they will get</font>

398
00:16:45,010 --> 00:16:49,060
the hash value and they will sign<font color="#E5E5E5"> this</font>

399
00:16:46,420 --> 00:16:51,579
hash value<font color="#E5E5E5"> in some other libraries do it</font>

400
00:16:49,060 --> 00:16:54,609
a bit differently<font color="#CCCCCC"> they accept a hash</font><font color="#E5E5E5"> and</font>

401
00:16:51,580 --> 00:16:56,529
assigned<font color="#E5E5E5"> a hash so they will not they</font>

402
00:16:54,610 --> 00:16:58,480
will<font color="#E5E5E5"> not touch the message for you but</font>

403
00:16:56,529 --> 00:17:00,550
sometimes<font color="#E5E5E5"> if you give them something you</font>

404
00:16:58,480 --> 00:17:03,459
know larger than the hash they would

405
00:17:00,550 --> 00:17:06,069
just you know just truncate<font color="#CCCCCC"> it and take</font>

406
00:17:03,459 --> 00:17:09,188
the<font color="#E5E5E5"> first 32 bytes or so and sign this</font>

407
00:17:06,069 --> 00:17:10,540
<font color="#E5E5E5">in knowing the rest so I did it would be</font>

408
00:17:09,189 --> 00:17:11,589
nice<font color="#E5E5E5"> if they tell you oh you sent me</font>

409
00:17:10,540 --> 00:17:13,720
something that's too long I need<font color="#E5E5E5"> to</font>

410
00:17:11,589 --> 00:17:16,688
<font color="#E5E5E5">ignore</font><font color="#CCCCCC"> the last bytes</font><font color="#E5E5E5"> but not all</font>

411
00:17:13,720 --> 00:17:17,530
<font color="#CCCCCC">libraries do we do this we also check</font>

412
00:17:16,689 --> 00:17:19,300
you know<font color="#CCCCCC"> for the</font>

413
00:17:17,530 --> 00:17:21,490
<font color="#CCCCCC">your very um</font><font color="#E5E5E5"> normal</font><font color="#CCCCCC"> the generate test</font>

414
00:17:19,300 --> 00:17:23,678
cases things that should not happen<font color="#E5E5E5"> and</font>

415
00:17:21,490 --> 00:17:26,559
that are insecure<font color="#E5E5E5"> for example if the</font>

416
00:17:23,679 --> 00:17:28,240
public key is 0 so if<font color="#CCCCCC"> your</font><font color="#E5E5E5"> public key if</font>

417
00:17:26,559 --> 00:17:29,530
<font color="#CCCCCC">your a particular point</font><font color="#E5E5E5"> is 0 then you</font>

418
00:17:28,240 --> 00:17:31,630
know bad<font color="#CCCCCC"> things can happen</font><font color="#E5E5E5"> if the</font>

419
00:17:29,530 --> 00:17:33,910
private<font color="#E5E5E5"> key 0 as well or if the hash</font>

420
00:17:31,630 --> 00:17:36,940
function or the<font color="#CCCCCC"> hash value our message</font>

421
00:17:33,910 --> 00:17:39,100
<font color="#E5E5E5">that you send is 0 and then what happens</font>

422
00:17:36,940 --> 00:17:41,679
<font color="#CCCCCC">I'm not going to</font><font color="#E5E5E5"> digitize but you can</font>

423
00:17:39,100 --> 00:17:43,510
guess what<font color="#E5E5E5"> what can</font><font color="#CCCCCC"> go wrong here</font>

424
00:17:41,679 --> 00:17:45,400
so here you

425
00:17:43,510 --> 00:17:47,790
<font color="#CCCCCC">- to the gutter guard letter</font><font color="#E5E5E5"> understand</font>

426
00:17:45,400 --> 00:17:51,700
it but it just<font color="#CCCCCC"> gives you an</font><font color="#E5E5E5"> example of</font>

427
00:17:47,790 --> 00:17:54,220
<font color="#E5E5E5">test</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we do for a</font><font color="#CCCCCC"> CD essay</font><font color="#E5E5E5"> so here</font>

428
00:17:51,700 --> 00:17:57,570
the<font color="#E5E5E5"> name of the function is yeah that's</font>

429
00:17:54,220 --> 00:18:01,450
infinite loop here<font color="#CCCCCC"> so it tests whether</font>

430
00:17:57,570 --> 00:18:02,530
you SDS a<font color="#CCCCCC"> sine function will enter an</font>

431
00:18:01,450 --> 00:18:07,450
infinite infinite loop

432
00:18:02,530 --> 00:18:10,060
if you send special<font color="#E5E5E5"> web parameters okay</font>

433
00:18:07,450 --> 00:18:12,850
now for<font color="#E5E5E5"> RSA so we've been talking about</font>

434
00:18:10,060 --> 00:18:15,639
<font color="#E5E5E5">ECDSA which is sinusoid or ism</font><font color="#CCCCCC"> when RSA</font>

435
00:18:12,850 --> 00:18:17,560
encryption will encrypt obviously so

436
00:18:15,640 --> 00:18:20,460
again here p1 encrypts and B to decrypt

437
00:18:17,560 --> 00:18:23,320
<font color="#E5E5E5">will try different size of messages and</font>

438
00:18:20,460 --> 00:18:25,240
actually<font color="#E5E5E5"> in RSA</font><font color="#CCCCCC"> you can have you know</font>

439
00:18:23,320 --> 00:18:27,310
different<font color="#E5E5E5"> size of modulus which is</font>

440
00:18:25,240 --> 00:18:31,660
essentially proportional to the size on

441
00:18:27,310 --> 00:18:35,169
<font color="#E5E5E5">a message use</font><font color="#CCCCCC"> to sign you write a</font><font color="#E5E5E5"> number</font>

442
00:18:31,660 --> 00:18:36,520
to the power of the public exponent so

443
00:18:35,170 --> 00:18:40,570
the public exponent it should normally

444
00:18:36,520 --> 00:18:43,360
<font color="#CCCCCC">be small start you</font><font color="#E5E5E5"> know the encryption</font>

445
00:18:40,570 --> 00:18:45,970
is faster but the decryption<font color="#E5E5E5"> exponent</font>

446
00:18:43,360 --> 00:18:47,679
which is usually denoted D it should<font color="#CCCCCC"> be</font>

447
00:18:45,970 --> 00:18:50,650
<font color="#CCCCCC">very large because it should be value</font>

448
00:18:47,680 --> 00:18:53,170
totally<font color="#CCCCCC"> and predictable</font><font color="#E5E5E5"> so normally you</font>

449
00:18:50,650 --> 00:18:54,640
should not<font color="#E5E5E5"> have a big e</font><font color="#CCCCCC"> you should</font><font color="#E5E5E5"> not</font>

450
00:18:53,170 --> 00:18:57,280
<font color="#CCCCCC">have</font><font color="#E5E5E5"> a big public exponent actually you</font>

451
00:18:54,640 --> 00:18:58,540
should not have a small<font color="#CCCCCC"> D if your D is</font>

452
00:18:57,280 --> 00:19:01,810
very<font color="#CCCCCC"> small</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> something's</font><font color="#E5E5E5"> definitely</font>

453
00:18:58,540 --> 00:19:03,850
wrong so you can test if whether or not

454
00:19:01,810 --> 00:19:06,460
your library will will do<font color="#E5E5E5"> this check or</font>

455
00:19:03,850 --> 00:19:09,189
not<font color="#CCCCCC"> and you can also see</font><font color="#E5E5E5"> what happens</font>

456
00:19:06,460 --> 00:19:11,950
if you send a<font color="#E5E5E5"> message bigger than what</font>

457
00:19:09,190 --> 00:19:13,030
<font color="#CCCCCC">the function expects okay</font><font color="#E5E5E5"> what rules</font><font color="#CCCCCC"> are</font>

458
00:19:11,950 --> 00:19:14,470
trying to do<font color="#CCCCCC"> is</font><font color="#E5E5E5"> are trying to detect</font>

459
00:19:13,030 --> 00:19:17,649
timing leaks but we're<font color="#E5E5E5"> talking about</font>

460
00:19:14,470 --> 00:19:19,720
this yeah in this<font color="#E5E5E5"> slide</font><font color="#CCCCCC"> stemming leaks</font>

461
00:19:17,650 --> 00:19:23,050
it's very hard<font color="#E5E5E5"> to detect because it's</font>

462
00:19:19,720 --> 00:19:26,110
usually no hazama<font color="#CCCCCC"> Hammond how much power</font>

463
00:19:23,050 --> 00:19:29,110
you how much time<font color="#CCCCCC"> you allowed to test to</font>

464
00:19:26,110 --> 00:19:30,310
<font color="#E5E5E5">find a signal so we</font><font color="#CCCCCC"> do not reinvent the</font>

465
00:19:29,110 --> 00:19:32,860
<font color="#E5E5E5">wheel there's very nice piece</font><font color="#CCCCCC"> of</font>

466
00:19:30,310 --> 00:19:33,790
<font color="#CCCCCC">software software called direct</font><font color="#E5E5E5"> by</font>

467
00:19:32,860 --> 00:19:35,439
óscar tabárez

468
00:19:33,790 --> 00:19:37,930
and these colleagues<font color="#E5E5E5"> I think it's</font>

469
00:19:35,440 --> 00:19:41,860
written in C right and we<font color="#E5E5E5"> just spotted</font>

470
00:19:37,930 --> 00:19:43,960
<font color="#CCCCCC">it in go</font><font color="#E5E5E5"> to integrate it in CDF it's</font>

471
00:19:41,860 --> 00:19:47,040
very powerful<font color="#CCCCCC"> we were able to use</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to</font>

472
00:19:43,960 --> 00:19:49,570
<font color="#CCCCCC">find no leaks of two nanoseconds and</font>

473
00:19:47,040 --> 00:19:51,010
well<font color="#CCCCCC"> episode there was</font><font color="#E5E5E5"> at all we have</font>

474
00:19:49,570 --> 00:19:54,010
Dominic<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> that's great</font>

475
00:19:51,010 --> 00:19:55,870
then try to exploit it and we found<font color="#E5E5E5"> out</font>

476
00:19:54,010 --> 00:19:57,190
to exploit it we need to<font color="#CCCCCC"> wait too many</font>

477
00:19:55,870 --> 00:19:59,199
samples

478
00:19:57,190 --> 00:20:03,220
<font color="#CCCCCC">but still we</font><font color="#E5E5E5"> found that there was some</font>

479
00:19:59,200 --> 00:20:05,980
actual<font color="#CCCCCC"> dynamic demo time</font><font color="#E5E5E5"> so first time</font>

480
00:20:03,220 --> 00:20:10,779
we<font color="#E5E5E5"> do the demo hope it works</font><font color="#CCCCCC"> okay that's</font>

481
00:20:05,980 --> 00:20:14,139
it<font color="#E5E5E5"> I</font><font color="#CCCCCC"> just tried to</font><font color="#E5E5E5"> hide this</font><font color="#CCCCCC"> thing okay</font>

482
00:20:10,779 --> 00:20:15,970
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right so zero okay you can comment</font>

483
00:20:14,139 --> 00:20:18,189
on this<font color="#E5E5E5"> yeah what happen what happens</font>

484
00:20:15,970 --> 00:20:22,539
there<font color="#CCCCCC"> is that we in the first part we</font>

485
00:20:18,190 --> 00:20:26,950
<font color="#E5E5E5">tested the ECDSA interface so we</font>

486
00:20:22,539 --> 00:20:29,470
specified<font color="#CCCCCC"> its</font><font color="#E5E5E5"> its ECDSA so CDF is aware</font>

487
00:20:26,950 --> 00:20:32,740
of<font color="#E5E5E5"> what it's testing so it can't use and</font>

488
00:20:29,470 --> 00:20:36,309
define interface<font color="#E5E5E5"> so there</font><font color="#CCCCCC"> are we tested</font>

489
00:20:32,740 --> 00:20:39,700
it against crypto<font color="#E5E5E5"> PP and</font><font color="#CCCCCC"> imbed tell us</font>

490
00:20:36,309 --> 00:20:42,629
and as you can see nothing wrong<font color="#CCCCCC"> if you</font>

491
00:20:39,700 --> 00:20:45,700
send a<font color="#E5E5E5"> zero private key</font><font color="#CCCCCC"> both or</font>

492
00:20:42,629 --> 00:20:47,799
rejecting it with an hour and<font color="#E5E5E5"> if hey it</font>

493
00:20:45,700 --> 00:20:49,480
was fast in<font color="#E5E5E5"> this case I</font><font color="#CCCCCC"> Italy it went</font>

494
00:20:47,799 --> 00:20:51,399
<font color="#E5E5E5">really fast</font><font color="#CCCCCC"> actually we're gonna set it</font>

495
00:20:49,480 --> 00:20:51,970
amid the next<font color="#E5E5E5"> really fast let me hit</font>

496
00:20:51,399 --> 00:20:54,729
<font color="#CCCCCC">play tower</font>

497
00:20:51,970 --> 00:20:58,389
well now if<font color="#E5E5E5"> you if you try</font><font color="#CCCCCC"> again with oh</font>

498
00:20:54,730 --> 00:21:00,759
no<font color="#CCCCCC"> less</font><font color="#E5E5E5"> now yeah there you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see</font>

499
00:20:58,389 --> 00:21:03,219
something<font color="#E5E5E5"> fishy is going on</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so</font>

500
00:21:00,759 --> 00:21:05,799
what happened is that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ended</font><font color="#E5E5E5"> TLS</font>

501
00:21:03,220 --> 00:21:09,360
implementation accepted<font color="#CCCCCC"> zero gravity key</font>

502
00:21:05,799 --> 00:21:12,429
as a valid key and signed the message

503
00:21:09,360 --> 00:21:17,100
<font color="#E5E5E5">without any error so that's really bad</font>

504
00:21:12,429 --> 00:21:18,490
<font color="#CCCCCC">because the resulting signature won't be</font>

505
00:21:17,100 --> 00:21:22,750
<font color="#CCCCCC">secure at all</font>

506
00:21:18,490 --> 00:21:26,529
<font color="#CCCCCC">so we are continuing so if we if we</font><font color="#E5E5E5"> go</font>

507
00:21:22,750 --> 00:21:30,070
on we can test<font color="#E5E5E5"> something else</font><font color="#CCCCCC"> so it's</font>

508
00:21:26,529 --> 00:21:32,830
really interesting<font color="#E5E5E5"> if you try the</font><font color="#CCCCCC"> open</font>

509
00:21:30,070 --> 00:21:35,259
<font color="#CCCCCC">SSL</font><font color="#E5E5E5"> an MPLS easy</font><font color="#CCCCCC"> des implementation and</font>

510
00:21:32,830 --> 00:21:37,360
you try<font color="#E5E5E5"> to provide the hashes directly</font>

511
00:21:35,259 --> 00:21:39,850
so it's not<font color="#E5E5E5"> a message anymore they won't</font>

512
00:21:37,360 --> 00:21:42,969
<font color="#E5E5E5">do the hashing they will directly take</font>

513
00:21:39,850 --> 00:21:46,120
the hashes you're providing what happens

514
00:21:42,970 --> 00:21:49,389
is that<font color="#CCCCCC"> if you get a</font><font color="#E5E5E5"> zero valued hash</font><font color="#CCCCCC"> a</font>

515
00:21:46,120 --> 00:21:54,059
<font color="#CCCCCC">media embed TLS won't sign it may cause</font>

516
00:21:49,389 --> 00:21:58,389
it to the zero value so it's completely

517
00:21:54,059 --> 00:22:00,759
screwing the multiplication but open SSL

518
00:21:58,389 --> 00:22:03,758
<font color="#CCCCCC">Widow</font><font color="#E5E5E5"> except to signatory to do</font><font color="#CCCCCC"> opposite</font>

519
00:22:00,759 --> 00:22:06,940
bashing here at<font color="#CCCCCC"> onea so that's an</font>

520
00:22:03,759 --> 00:22:09,090
interesting<font color="#E5E5E5"> are say</font><font color="#CCCCCC"> and also there are</font>

521
00:22:06,940 --> 00:22:12,269
what<font color="#E5E5E5"> we can see is that embed</font>

522
00:22:09,090 --> 00:22:14,549
<font color="#E5E5E5">didn't run</font><font color="#CCCCCC"> into an infinite loop but</font>

523
00:22:12,269 --> 00:22:17,159
<font color="#CCCCCC">OpenSSL actually did run into</font><font color="#E5E5E5"> an</font>

524
00:22:14,549 --> 00:22:21,779
infinite<font color="#CCCCCC"> loop and malformed</font><font color="#E5E5E5"> parameters</font>

525
00:22:17,159 --> 00:22:24,570
so<font color="#E5E5E5"> that means you can do as</font><font color="#CCCCCC"> OpenSSL</font><font color="#E5E5E5"> if</font>

526
00:22:21,779 --> 00:22:26,340
you can provide the parameter<font color="#E5E5E5"> so that's</font>

527
00:22:24,570 --> 00:22:28,939
not something<font color="#CCCCCC"> which should happen</font><font color="#E5E5E5"> but</font>

528
00:22:26,340 --> 00:22:28,939
who knows

529
00:22:29,179 --> 00:22:39,029
no yeah<font color="#E5E5E5"> if we try again against RSA</font><font color="#CCCCCC"> Oh a</font>

530
00:22:34,080 --> 00:22:41,249
<font color="#CCCCCC">EP</font><font color="#E5E5E5"> nothing wrong there if we try with</font><font color="#CCCCCC"> a</font>

531
00:22:39,029 --> 00:22:44,549
<font color="#CCCCCC">go one what you can see there is that</font>

532
00:22:41,249 --> 00:22:49,289
<font color="#E5E5E5">the</font><font color="#CCCCCC"> go implementation won't accept a</font>

533
00:22:44,549 --> 00:22:51,629
larger expand than<font color="#CCCCCC"> 32-bit so</font><font color="#E5E5E5"> that means</font>

534
00:22:49,289 --> 00:22:54,299
it's an integer<font color="#E5E5E5"> but that's actually</font><font color="#CCCCCC"> not</font>

535
00:22:51,629 --> 00:22:58,309
a bag it's a feature because<font color="#E5E5E5"> your team</font>

536
00:22:54,299 --> 00:23:00,749
<font color="#E5E5E5">decided I didn't want it to have</font><font color="#CCCCCC"> two big</font>

537
00:22:58,309 --> 00:23:02,879
public integrity cuz it's bad for

538
00:23:00,749 --> 00:23:05,629
preferences it's not really good<font color="#CCCCCC"> for</font>

539
00:23:02,879 --> 00:23:08,668
security<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so on so they explicitly</font>

540
00:23:05,629 --> 00:23:12,539
made it an integer<font color="#E5E5E5"> so you can't use big</font>

541
00:23:08,669 --> 00:23:15,600
hints and exponents there<font color="#E5E5E5"> she wants in</font>

542
00:23:12,539 --> 00:23:16,889
here that many<font color="#E5E5E5"> ApS don't behave</font>

543
00:23:15,600 --> 00:23:18,869
<font color="#E5E5E5">consistently sometimes they would be</font>

544
00:23:16,889 --> 00:23:20,399
<font color="#CCCCCC">very conservative and sometimes it</font><font color="#E5E5E5"> would</font>

545
00:23:18,869 --> 00:23:24,570
<font color="#CCCCCC">be very lacks in what kind of input</font><font color="#E5E5E5"> they</font>

546
00:23:20,399 --> 00:23:27,479
accept yes so both<font color="#E5E5E5"> the libraries are not</font>

547
00:23:24,570 --> 00:23:29,610
<font color="#CCCCCC">interoperable in that regards by the way</font>

548
00:23:27,480 --> 00:23:31,980
so if<font color="#CCCCCC"> you have a big int exponent you</font>

549
00:23:29,610 --> 00:23:34,320
won't be<font color="#E5E5E5"> able to use a go implementation</font>

550
00:23:31,980 --> 00:23:36,419
to do whatsoever you<font color="#E5E5E5"> want to do and now</font>

551
00:23:34,320 --> 00:23:40,950
we are<font color="#E5E5E5"> testing your timing</font><font color="#CCCCCC"> link</font><font color="#E5E5E5"> sir</font>

552
00:23:36,419 --> 00:23:43,019
so I mean<font color="#CCCCCC"> right it takes 10</font><font color="#E5E5E5"> minutes yeah</font>

553
00:23:40,950 --> 00:23:46,110
timing leaks are really expensive to

554
00:23:43,019 --> 00:23:49,409
test<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you need to do thousands of</font>

555
00:23:46,110 --> 00:23:55,740
<font color="#E5E5E5">tracy's to get reliable statistics so</font>

556
00:23:49,409 --> 00:23:58,490
that's really slow but<font color="#E5E5E5"> you get results</font>

557
00:23:55,740 --> 00:24:01,649
<font color="#E5E5E5">and you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see that's not really</font>

558
00:23:58,490 --> 00:24:04,710
meaningful to<font color="#E5E5E5"> you I guess but those are</font>

559
00:24:01,649 --> 00:24:08,789
metrics and if we get past<font color="#E5E5E5"> a</font><font color="#CCCCCC"> certain</font>

560
00:24:04,710 --> 00:24:11,309
point<font color="#E5E5E5"> like</font><font color="#CCCCCC"> 5 for the</font><font color="#E5E5E5"> max tau value for</font>

561
00:24:08,789 --> 00:24:14,490
the max T value then<font color="#E5E5E5"> that means you</font>

562
00:24:11,309 --> 00:24:17,580
really<font color="#E5E5E5"> go to timing leak if you get 1.8</font>

563
00:24:14,490 --> 00:24:20,640
<font color="#E5E5E5">like you get there maybe not maybe yes</font>

564
00:24:17,580 --> 00:24:23,970
so you have<font color="#CCCCCC"> to run it for</font><font color="#E5E5E5"> way longer too</font>

565
00:24:20,640 --> 00:24:27,150
actually get anything<font color="#E5E5E5"> meaningful okay</font>

566
00:24:23,970 --> 00:24:31,380
she's<font color="#CCCCCC"> found so yeah what kind</font><font color="#E5E5E5"> of issues</font>

567
00:24:27,150 --> 00:24:34,740
did we found so here you can see we

568
00:24:31,380 --> 00:24:40,440
tested<font color="#CCCCCC"> OAP ECDSA and</font><font color="#E5E5E5"> yesterday and</font>

569
00:24:34,740 --> 00:24:45,390
multiple largely used liberalism<font color="#E5E5E5"> and for</font>

570
00:24:40,440 --> 00:24:47,460
DSA it's really bad<font color="#E5E5E5"> both libras are not</font>

571
00:24:45,390 --> 00:24:49,620
testing<font color="#CCCCCC"> the main parameters</font><font color="#E5E5E5"> they are not</font>

572
00:24:47,460 --> 00:24:51,660
testing<font color="#CCCCCC"> the boundaries</font><font color="#E5E5E5"> or not testing a</font>

573
00:24:49,620 --> 00:24:55,080
lot<font color="#E5E5E5"> of stuff so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can provide invalid</font>

574
00:24:51,660 --> 00:24:59,130
parameters and<font color="#E5E5E5"> do yeah crazy stuff like</font>

575
00:24:55,080 --> 00:25:02,879
<font color="#E5E5E5">remote us signer at an invalid</font>

576
00:24:59,130 --> 00:25:05,970
parameters crypto<font color="#CCCCCC"> P P was really good in</font>

577
00:25:02,880 --> 00:25:08,700
<font color="#CCCCCC">that regard we weren't able to fold</font><font color="#E5E5E5"> it</font>

578
00:25:05,970 --> 00:25:10,740
it doesn't<font color="#E5E5E5"> mean it's better or worse</font>

579
00:25:08,700 --> 00:25:11,730
than the other<font color="#CCCCCC"> it just yeah thank</font><font color="#E5E5E5"> you a</font>

580
00:25:10,740 --> 00:25:14,310
small warning

581
00:25:11,730 --> 00:25:16,260
<font color="#CCCCCC">it</font><font color="#E5E5E5"> doesn't mean</font><font color="#CCCCCC"> that Goa crypto sucks it</font>

582
00:25:14,310 --> 00:25:21,360
<font color="#CCCCCC">so yeah they true they made some design</font>

583
00:25:16,260 --> 00:25:24,240
<font color="#E5E5E5">choices</font><font color="#CCCCCC"> well what the consequence</font><font color="#E5E5E5"> is</font>

584
00:25:21,360 --> 00:25:27,510
that<font color="#CCCCCC"> they did try to</font><font color="#E5E5E5"> accept parameters</font>

585
00:25:24,240 --> 00:25:29,370
that they do<font color="#E5E5E5"> not accept I mean krypter</font>

586
00:25:27,510 --> 00:25:33,480
krypter plus plus first pretty well here

587
00:25:29,370 --> 00:25:35,159
because<font color="#E5E5E5"> they know paranoid yeah but you</font>

588
00:25:33,480 --> 00:25:37,530
<font color="#CCCCCC">ask you see good good if</font><font color="#E5E5E5"> you fix some</font>

589
00:25:35,160 --> 00:25:39,690
stuff<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we'd</font><font color="#E5E5E5"> yeah so we reported some</font>

590
00:25:37,530 --> 00:25:43,560
<font color="#E5E5E5">of the problems for so for example for a</font>

591
00:25:39,690 --> 00:25:47,070
DSA as you can see here if<font color="#E5E5E5"> you provide</font>

592
00:25:43,560 --> 00:25:49,860
invalid parameters to<font color="#E5E5E5"> the signer it can</font>

593
00:25:47,070 --> 00:25:51,840
fall in infinite loops or it can provide

594
00:25:49,860 --> 00:25:54,270
always valid signatures which is

595
00:25:51,840 --> 00:25:56,610
something<font color="#E5E5E5"> completely silly I mean if the</font>

596
00:25:54,270 --> 00:25:58,740
senator is<font color="#E5E5E5"> it for any message</font><font color="#CCCCCC"> why will</font>

597
00:25:56,610 --> 00:26:04,949
you<font color="#E5E5E5"> sign it yeah</font><font color="#CCCCCC"> why would you want it</font>

598
00:25:58,740 --> 00:26:07,710
<font color="#E5E5E5">so so here is a picture from</font><font color="#CCCCCC"> the</font>

599
00:26:04,950 --> 00:26:10,050
<font color="#CCCCCC">standard ESS so digital signature</font>

600
00:26:07,710 --> 00:26:12,630
standard which is<font color="#E5E5E5"> saying the decree</font><font color="#CCCCCC"> that</font>

601
00:26:10,050 --> 00:26:15,480
prior to<font color="#CCCCCC"> signing</font><font color="#E5E5E5"> you should obtain</font>

602
00:26:12,630 --> 00:26:18,120
<font color="#E5E5E5">assurance of domain parameter validity</font>

603
00:26:15,480 --> 00:26:20,430
<font color="#E5E5E5">so that's clearly clearly stated in the</font>

604
00:26:18,120 --> 00:26:24,090
standard<font color="#E5E5E5"> and that's also</font><font color="#CCCCCC"> true upon</font>

605
00:26:20,430 --> 00:26:25,560
verification<font color="#E5E5E5"> prior to verifying anything</font>

606
00:26:24,090 --> 00:26:27,720
you should obtain a sphere<font color="#CCCCCC"> runs of</font>

607
00:26:25,560 --> 00:26:30,000
domain parameter validity otherwise you

608
00:26:27,720 --> 00:26:33,480
can't<font color="#CCCCCC"> answer anything you can validate</font>

609
00:26:30,000 --> 00:26:36,540
<font color="#E5E5E5">the signatures so</font>

610
00:26:33,480 --> 00:26:41,280
<font color="#E5E5E5">that all liberals are doing that for</font>

611
00:26:36,540 --> 00:26:44,760
example<font color="#E5E5E5"> heard this is a</font><font color="#CCCCCC"> signing process</font>

612
00:26:41,280 --> 00:26:47,070
<font color="#CCCCCC">Rodya</font><font color="#E5E5E5"> say it's somewhat</font><font color="#CCCCCC"> summarized but</font>

613
00:26:44,760 --> 00:26:50,820
basically you<font color="#E5E5E5"> will generate a random</font><font color="#CCCCCC"> k</font>

614
00:26:47,070 --> 00:26:53,760
value between 1<font color="#E5E5E5"> and Q</font><font color="#CCCCCC"> you will</font><font color="#E5E5E5"> generate</font>

615
00:26:50,820 --> 00:26:57,928
you will compute R which is<font color="#E5E5E5"> a generator</font>

616
00:26:53,760 --> 00:27:02,700
of<font color="#E5E5E5"> K to the K</font><font color="#CCCCCC"> G to the</font><font color="#E5E5E5"> K mod P mod Q and</font>

617
00:26:57,929 --> 00:27:05,190
if R is<font color="#CCCCCC"> 0 then no lag you get a</font><font color="#E5E5E5"> K which</font>

618
00:27:02,700 --> 00:27:08,669
<font color="#CCCCCC">is a multiple of Q</font><font color="#E5E5E5"> for example so you</font>

619
00:27:05,190 --> 00:27:10,590
you<font color="#E5E5E5"> just pick another K and the</font>

620
00:27:08,669 --> 00:27:13,080
probability of getting<font color="#CCCCCC"> another one which</font>

621
00:27:10,590 --> 00:27:16,110
<font color="#CCCCCC">is again a multiple of Q is very low so</font>

622
00:27:13,080 --> 00:27:19,260
<font color="#CCCCCC">it shouldn't</font><font color="#E5E5E5"> be 0 again but if it's here</font>

623
00:27:16,110 --> 00:27:22,080
again<font color="#E5E5E5"> you retry but that's a problem if</font>

624
00:27:19,260 --> 00:27:24,990
<font color="#E5E5E5">G is 0 for</font><font color="#CCCCCC"> example if G</font><font color="#E5E5E5"> is 0</font><font color="#CCCCCC"> you can</font>

625
00:27:22,080 --> 00:27:28,139
make<font color="#E5E5E5"> 0 to whatever you want it will get</font>

626
00:27:24,990 --> 00:27:31,530
<font color="#E5E5E5">0 most of</font><font color="#CCCCCC"> the time</font><font color="#E5E5E5"> always so you get an</font>

627
00:27:28,140 --> 00:27:33,059
infinite loop sir<font color="#CCCCCC"> so it's explicitly</font>

628
00:27:31,530 --> 00:27:35,790
stated in the standard<font color="#E5E5E5"> that the</font>

629
00:27:33,059 --> 00:27:38,460
generator shouldn't be 0 but what if it

630
00:27:35,790 --> 00:27:41,549
is well some<font color="#E5E5E5"> liberals go and</font><font color="#CCCCCC"> open SSL</font>

631
00:27:38,460 --> 00:27:44,540
for<font color="#CCCCCC"> instance won't check</font><font color="#E5E5E5"> that so we</font>

632
00:27:41,549 --> 00:27:47,850
report<font color="#CCCCCC"> into problem tables</font>

633
00:27:44,540 --> 00:27:50,370
this is a GUI implementation it's a for

634
00:27:47,850 --> 00:27:54,449
loop which will<font color="#E5E5E5"> always generate a new K</font>

635
00:27:50,370 --> 00:27:57,449
as long as R is<font color="#E5E5E5"> 0 so they fix the</font>

636
00:27:54,450 --> 00:28:00,120
problem by<font color="#E5E5E5"> limiting the number of</font>

637
00:27:57,450 --> 00:28:04,200
attempts<font color="#E5E5E5"> so if you make more than</font><font color="#CCCCCC"> 10</font>

638
00:28:00,120 --> 00:28:06,209
attempt then it's not valid parameter

639
00:28:04,200 --> 00:28:08,429
<font color="#E5E5E5">that's a good</font><font color="#CCCCCC"> direction but that's not</font>

640
00:28:06,210 --> 00:28:10,740
<font color="#E5E5E5">best fixed because you don't you are</font><font color="#CCCCCC"> not</font>

641
00:28:08,429 --> 00:28:15,720
<font color="#CCCCCC">checking the domain parameters you</font><font color="#E5E5E5"> are</font>

642
00:28:10,740 --> 00:28:20,730
just mitigating the problem so we also

643
00:28:15,720 --> 00:28:23,210
were able<font color="#E5E5E5"> to confirm timing leak in</font><font color="#CCCCCC"> RSA</font>

644
00:28:20,730 --> 00:28:27,840
<font color="#CCCCCC">oep thanks to the direct implementation</font>

645
00:28:23,210 --> 00:28:30,630
but and that's<font color="#CCCCCC"> a bad thing</font><font color="#E5E5E5"> because every</font>

646
00:28:27,840 --> 00:28:32,540
CoAP<font color="#E5E5E5"> if you get timing leaks you can get</font>

647
00:28:30,630 --> 00:28:37,260
timing attacks and<font color="#CCCCCC"> you can basically</font>

648
00:28:32,540 --> 00:28:38,760
decrypt the message<font color="#E5E5E5"> using a rake rake</font>

649
00:28:37,260 --> 00:28:40,890
<font color="#CCCCCC">hell decrypt timing</font><font color="#E5E5E5"> Oracle's</font>

650
00:28:38,760 --> 00:28:42,480
but immediate luck it's not not as well

651
00:28:40,890 --> 00:28:46,350
known as<font color="#CCCCCC"> the blush</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> Bihar attack on</font>

652
00:28:42,480 --> 00:28:47,160
<font color="#E5E5E5">because a 1.5 mm ciphertext attack but</font>

653
00:28:46,350 --> 00:28:49,230
<font color="#CCCCCC">so</font><font color="#E5E5E5"> actually power</font>

654
00:28:47,160 --> 00:28:52,050
for instance that<font color="#E5E5E5"> just by using time in</font>

655
00:28:49,230 --> 00:28:53,790
Mexican yeah exactly so<font color="#CCCCCC"> mongers</font><font color="#E5E5E5"> attack</font>

656
00:28:52,050 --> 00:28:55,860
it's cold it's<font color="#CCCCCC"> really powerful</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we</font>

657
00:28:53,790 --> 00:28:57,480
actually<font color="#E5E5E5"> implemented it in goes among</font>

658
00:28:55,860 --> 00:29:01,139
<font color="#E5E5E5">girls</font><font color="#CCCCCC"> attack</font><font color="#E5E5E5"> so if you want to play with</font>

659
00:28:57,480 --> 00:29:03,360
<font color="#E5E5E5">it you can</font><font color="#CCCCCC"> too and we were we were not</font>

660
00:29:01,140 --> 00:29:05,610
able to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it against the</font><font color="#E5E5E5"> everything</font>

661
00:29:03,360 --> 00:29:07,679
implementation because the noise of the

662
00:29:05,610 --> 00:29:10,199
<font color="#E5E5E5">operating system is so big and the</font>

663
00:29:07,680 --> 00:29:13,140
<font color="#E5E5E5">signer the signal is so slow that you</font>

664
00:29:10,200 --> 00:29:18,660
<font color="#E5E5E5">need really too many traces to do any</font>

665
00:29:13,140 --> 00:29:20,610
<font color="#E5E5E5">attack</font><font color="#CCCCCC"> Euler so generally we observe</font>

666
00:29:18,660 --> 00:29:23,370
<font color="#CCCCCC">that</font><font color="#E5E5E5"> most</font><font color="#CCCCCC"> critically breweries are</font>

667
00:29:20,610 --> 00:29:26,399
really concerned about practical attacks

668
00:29:23,370 --> 00:29:29,479
practical problems<font color="#E5E5E5"> but they won't really</font>

669
00:29:26,400 --> 00:29:33,690
care about no domain parameters

670
00:29:29,480 --> 00:29:35,850
<font color="#E5E5E5">boundaries and such details</font><font color="#CCCCCC"> so if you</font>

671
00:29:33,690 --> 00:29:38,310
can't prove that<font color="#E5E5E5"> it's a practical attack</font>

672
00:29:35,850 --> 00:29:41,699
they might not fix it<font color="#E5E5E5"> on my</font><font color="#CCCCCC"> b-roll</font>

673
00:29:38,310 --> 00:29:43,470
reluctant to do it<font color="#E5E5E5"> but it's it's sad</font>

674
00:29:41,700 --> 00:29:46,830
because it's not a good difference in

675
00:29:43,470 --> 00:29:49,050
depth<font color="#E5E5E5"> so</font><font color="#CCCCCC"> they most of</font><font color="#E5E5E5"> them support with</font>

676
00:29:46,830 --> 00:29:54,090
parameters they won't really conform

677
00:29:49,050 --> 00:29:55,919
<font color="#CCCCCC">yeah not a good state okay</font><font color="#E5E5E5"> now it's very</font>

678
00:29:54,090 --> 00:29:57,090
time to conclude<font color="#CCCCCC"> we have time</font><font color="#E5E5E5"> for</font>

679
00:29:55,920 --> 00:30:00,090
questions

680
00:29:57,090 --> 00:30:01,649
<font color="#CCCCCC">simmers we have this neutral CDF it</font><font color="#E5E5E5"> has</font>

681
00:30:00,090 --> 00:30:05,280
correctness and<font color="#E5E5E5"> security of crypto</font>

682
00:30:01,650 --> 00:30:08,490
software it's only for crypto stuff<font color="#CCCCCC"> it's</font>

683
00:30:05,280 --> 00:30:10,980
<font color="#CCCCCC">an</font><font color="#E5E5E5"> in go because go</font><font color="#CCCCCC"> it's yeah what nice</font>

684
00:30:08,490 --> 00:30:14,100
language<font color="#E5E5E5"> straight</font><font color="#CCCCCC"> for our to cross</font>

685
00:30:10,980 --> 00:30:15,360
<font color="#CCCCCC">compiler and portable</font><font color="#E5E5E5"> and we rely on</font>

686
00:30:14,100 --> 00:30:17,040
<font color="#E5E5E5">this approach of comparing the behavior</font>

687
00:30:15,360 --> 00:30:18,959
<font color="#E5E5E5">of different implementations so you have</font>

688
00:30:17,040 --> 00:30:21,090
<font color="#CCCCCC">you need to have an inflammation</font><font color="#E5E5E5"> you</font>

689
00:30:18,960 --> 00:30:22,620
trust in the first place<font color="#E5E5E5"> on with to</font>

690
00:30:21,090 --> 00:30:24,330
implement that<font color="#E5E5E5"> you don't trust a well</font>

691
00:30:22,620 --> 00:30:26,610
but<font color="#E5E5E5"> you just</font><font color="#CCCCCC"> want to see you know how</font>

692
00:30:24,330 --> 00:30:28,889
differently they behave or just see if

693
00:30:26,610 --> 00:30:32,280
they can<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know work together and we</font>

694
00:30:28,890 --> 00:30:36,630
<font color="#E5E5E5">found couple</font><font color="#CCCCCC"> issues not so many but</font><font color="#E5E5E5"> we</font>

695
00:30:32,280 --> 00:30:39,870
we focused on on what we believe<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

696
00:30:36,630 --> 00:30:41,670
the<font color="#CCCCCC"> most secure libraries and the most</font>

697
00:30:39,870 --> 00:30:43,260
widely<font color="#CCCCCC"> use features so</font><font color="#E5E5E5"> we're not look</font>

698
00:30:41,670 --> 00:30:46,710
for the low-hanging fruits but instead

699
00:30:43,260 --> 00:30:48,150
<font color="#CCCCCC">for the hottest ones</font><font color="#E5E5E5"> there's still a lot</font>

700
00:30:46,710 --> 00:30:50,550
of<font color="#E5E5E5"> a lot more work</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> done</font>

701
00:30:48,150 --> 00:30:52,020
<font color="#CCCCCC">we need more interfaces</font><font color="#E5E5E5"> in other word we</font>

702
00:30:50,550 --> 00:30:54,480
<font color="#E5E5E5">need to test to be able to test more</font>

703
00:30:52,020 --> 00:30:57,360
stuff because<font color="#E5E5E5"> we don't even test the</font>

704
00:30:54,480 --> 00:30:58,509
<font color="#CCCCCC">here man or SDH</font><font color="#E5E5E5"> which is like use</font>

705
00:30:57,360 --> 00:31:00,248
<font color="#E5E5E5">everywhere</font>

706
00:30:58,509 --> 00:31:02,619
we need to do more tests<font color="#CCCCCC"> so if you look</font>

707
00:31:00,249 --> 00:31:05,049
at Google's Tuesday in do you<font color="#E5E5E5"> know many</font>

708
00:31:02,619 --> 00:31:07,208
<font color="#E5E5E5">more tests</font><font color="#CCCCCC"> and than we do but</font><font color="#E5E5E5"> they don't</font>

709
00:31:05,049 --> 00:31:10,179
<font color="#E5E5E5">do this you know you know different sure</font>

710
00:31:07,209 --> 00:31:11,979
why<font color="#E5E5E5"> and</font><font color="#CCCCCC"> again you will need to test</font><font color="#E5E5E5"> more</font>

711
00:31:10,179 --> 00:31:14,279
<font color="#CCCCCC">libraries you will</font><font color="#E5E5E5"> just look at</font><font color="#CCCCCC"> maybe</font>

712
00:31:11,979 --> 00:31:16,929
four<font color="#CCCCCC"> or five different ones the one that</font>

713
00:31:14,279 --> 00:31:18,159
<font color="#E5E5E5">are</font><font color="#CCCCCC"> actually the most used ones but</font>

714
00:31:16,929 --> 00:31:21,549
maybe you<font color="#E5E5E5"> want to test your own stuff</font>

715
00:31:18,159 --> 00:31:23,589
<font color="#CCCCCC">okay and</font><font color="#E5E5E5"> also we want to</font><font color="#CCCCCC"> well test on</font>

716
00:31:21,549 --> 00:31:26,949
<font color="#E5E5E5">software because that's probably a lot</font>

717
00:31:23,589 --> 00:31:28,690
<font color="#E5E5E5">of bugs that crept in so yeah so you can</font>

718
00:31:26,949 --> 00:31:32,409
find<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> f at this address on github</font>

719
00:31:28,690 --> 00:31:35,349
<font color="#E5E5E5">get up quickly security</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> DF and if you</font>

720
00:31:32,409 --> 00:31:38,249
have any question<font color="#CCCCCC"> you can possibly in</font>

721
00:31:35,349 --> 00:31:41,049
the issue tracker<font color="#CCCCCC"> we happy to take</font>

722
00:31:38,249 --> 00:31:53,049
<font color="#CCCCCC">requests and come</font><font color="#E5E5E5"> to us if you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> any</font>

723
00:31:41,049 --> 00:31:55,440
any<font color="#E5E5E5"> comment yeah thank you so questions</font>

724
00:31:53,049 --> 00:31:55,440
<font color="#CCCCCC">maybe</font>

725
00:31:57,380 --> 00:32:01,330
yeah<font color="#E5E5E5"> yeah go to the</font><font color="#CCCCCC"> meat</font>

726
00:32:04,900 --> 00:32:12,590
so is this designed just to test<font color="#E5E5E5"> crypto</font>

727
00:32:08,780 --> 00:32:15,970
primitives<font color="#E5E5E5"> like</font><font color="#CCCCCC"> would you use this to</font>

728
00:32:12,590 --> 00:32:18,799
test an arbitrary protocol that you know

729
00:32:15,970 --> 00:32:20,960
<font color="#E5E5E5">you might make up yourself</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> your</font>

730
00:32:18,799 --> 00:32:23,418
particular application<font color="#CCCCCC"> we don't support</font>

731
00:32:20,960 --> 00:32:26,000
<font color="#CCCCCC">you this one does 3 yet</font><font color="#E5E5E5"> and it could be</font>

732
00:32:23,419 --> 00:32:28,730
way more complicated<font color="#CCCCCC"> one of the reasons</font>

733
00:32:26,000 --> 00:32:30,260
is that<font color="#E5E5E5"> we're completely stateless for</font>

734
00:32:28,730 --> 00:32:32,600
example if you want to<font color="#E5E5E5"> test hash</font>

735
00:32:30,260 --> 00:32:34,340
function<font color="#E5E5E5"> you will call the function once</font>

736
00:32:32,600 --> 00:32:37,668
you're<font color="#E5E5E5"> gonna do the update update finish</font>

737
00:32:34,340 --> 00:32:39,289
and for testing<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example a</font><font color="#E5E5E5"> more</font>

738
00:32:37,669 --> 00:32:42,770
complex product but like like TLS<font color="#CCCCCC"> for</font>

739
00:32:39,289 --> 00:32:45,620
instance you will<font color="#E5E5E5"> need something more</font>

740
00:32:42,770 --> 00:32:47,929
<font color="#E5E5E5">complex to to do some useful</font><font color="#CCCCCC"> tests</font><font color="#E5E5E5"> and</font>

741
00:32:45,620 --> 00:32:49,699
while being state to stateless<font color="#E5E5E5"> we can</font>

742
00:32:47,929 --> 00:32:54,200
only do stateful system but it would be

743
00:32:49,700 --> 00:32:57,350
<font color="#CCCCCC">a</font><font color="#E5E5E5"> more warning so as we we should</font>

744
00:32:54,200 --> 00:32:58,970
<font color="#CCCCCC">basically use your</font><font color="#E5E5E5"> results rather than</font>

745
00:32:57,350 --> 00:33:03,049
<font color="#E5E5E5">your software in particular right</font>

746
00:32:58,970 --> 00:33:05,690
<font color="#CCCCCC">because like you wouldn't I would I</font>

747
00:33:03,049 --> 00:33:09,260
would<font color="#E5E5E5"> never actually implement my my own</font>

748
00:33:05,690 --> 00:33:11,690
<font color="#E5E5E5">ECD s-e-c BSA from scratch yeah yeah I</font>

749
00:33:09,260 --> 00:33:14,210
<font color="#E5E5E5">should I</font><font color="#CCCCCC"> should only see your results to</font>

750
00:33:11,690 --> 00:33:16,520
see which one implements it better yeah

751
00:33:14,210 --> 00:33:18,650
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> you observe that if you don't</font>

752
00:33:16,520 --> 00:33:20,240
<font color="#E5E5E5">implement your own crypto which I don't</font>

753
00:33:18,650 --> 00:33:22,940
<font color="#E5E5E5">recommend</font><font color="#CCCCCC"> that you do if you don't</font><font color="#E5E5E5"> have</font>

754
00:33:20,240 --> 00:33:26,030
to then there is a offer to of<font color="#E5E5E5"> getting</font>

755
00:33:22,940 --> 00:33:27,950
<font color="#E5E5E5">it be</font><font color="#CCCCCC"> useful to to get an idea of how</font>

756
00:33:26,030 --> 00:33:29,899
these are<font color="#CCCCCC"> persons how these libraries</font>

757
00:33:27,950 --> 00:33:33,100
behave and what security<font color="#E5E5E5"> they did you</font>

758
00:33:29,900 --> 00:33:33,100
provide it thank you

759
00:33:34,660 --> 00:33:41,720
yeah you mentioned that<font color="#CCCCCC"> DSA standard</font>

760
00:33:38,540 --> 00:33:44,928
says you should test the<font color="#E5E5E5"> parameters of</font>

761
00:33:41,720 --> 00:33:47,990
<font color="#E5E5E5">DSA is</font><font color="#CCCCCC"> it specific about what</font><font color="#E5E5E5"> to test</font>

762
00:33:44,929 --> 00:33:50,450
because<font color="#CCCCCC"> like this parameter testing is</font>

763
00:33:47,990 --> 00:33:52,370
kind of a tricky issue<font color="#E5E5E5"> like for example</font>

764
00:33:50,450 --> 00:33:54,559
<font color="#E5E5E5">I know one of the numbers in the DSA</font>

765
00:33:52,370 --> 00:33:56,270
parameters is a prime and you can test

766
00:33:54,559 --> 00:33:58,070
whether<font color="#CCCCCC"> it's prime but</font><font color="#E5E5E5"> that's pretty</font>

767
00:33:56,270 --> 00:34:00,379
expensive<font color="#E5E5E5"> to do during a signature</font>

768
00:33:58,070 --> 00:34:02,030
operation<font color="#E5E5E5"> like it's similar with</font>

769
00:34:00,380 --> 00:34:03,890
diffie-hellman<font color="#CCCCCC"> indie-film and you have</font>

770
00:34:02,030 --> 00:34:06,710
you have<font color="#E5E5E5"> these parameters from the</font>

771
00:34:03,890 --> 00:34:08,450
<font color="#E5E5E5">server and</font><font color="#CCCCCC"> TLS and you could in theory</font>

772
00:34:06,710 --> 00:34:10,699
test them but it would be really<font color="#E5E5E5"> slow to</font>

773
00:34:08,449 --> 00:34:11,388
do that so yeah like this<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> if it's</font>

774
00:34:10,699 --> 00:34:14,330
a primer

775
00:34:11,389 --> 00:34:16,310
well that's<font color="#E5E5E5"> true that some tests can be</font>

776
00:34:14,330 --> 00:34:19,520
<font color="#E5E5E5">expensive</font><font color="#CCCCCC"> but what you need to</font><font color="#E5E5E5"> do is</font>

777
00:34:16,310 --> 00:34:22,100
obtain as<font color="#E5E5E5"> two runs once that the key is</font>

778
00:34:19,520 --> 00:34:23,719
secure once you've got it you<font color="#E5E5E5"> can sign</font>

779
00:34:22,100 --> 00:34:26,659
as<font color="#CCCCCC"> many messages</font><font color="#E5E5E5"> as you want so you can</font>

780
00:34:23,719 --> 00:34:28,399
<font color="#E5E5E5">just if you are maintaining a</font><font color="#CCCCCC"> liberal</font>

781
00:34:26,659 --> 00:34:31,100
<font color="#CCCCCC">redoing</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just imagine for</font><font color="#CCCCCC"> a</font>

782
00:34:28,399 --> 00:34:34,129
global<font color="#CCCCCC"> heading a function to test so</font>

783
00:34:31,100 --> 00:34:37,040
validity of key and once you've got the

784
00:34:34,129 --> 00:34:38,960
function<font color="#E5E5E5"> the user must call it when you</font>

785
00:34:37,040 --> 00:34:41,989
<font color="#E5E5E5">need</font><font color="#CCCCCC"> it but</font><font color="#E5E5E5"> it doesn't need</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> at</font>

786
00:34:38,960 --> 00:34:43,940
each signature<font color="#CCCCCC"> yeah but I can</font><font color="#E5E5E5"> tell you</font>

787
00:34:41,989 --> 00:34:45,949
that<font color="#E5E5E5"> a for example</font><font color="#CCCCCC"> browser would never</font>

788
00:34:43,940 --> 00:34:47,859
implement a test<font color="#CCCCCC"> that would take one</font>

789
00:34:45,949 --> 00:34:50,600
second before you can make connection

790
00:34:47,859 --> 00:34:53,449
<font color="#E5E5E5">yes let's go trade off here yes that's</font>

791
00:34:50,600 --> 00:34:56,118
<font color="#E5E5E5">true that DSA is hopefully known no</font>

792
00:34:53,449 --> 00:35:01,069
longer in browsers<font color="#E5E5E5"> so but if you have</font><font color="#CCCCCC"> an</font>

793
00:34:56,119 --> 00:35:03,619
<font color="#CCCCCC">S and it's very sure I was</font><font color="#E5E5E5"> just I</font><font color="#CCCCCC"> mean</font>

794
00:35:01,070 --> 00:35:08,990
my<font color="#E5E5E5"> questions sort of a I'm in the middle</font>

795
00:35:03,619 --> 00:35:12,260
<font color="#E5E5E5">here yeah</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> it it's sort of</font><font color="#E5E5E5"> like</font>

796
00:35:08,990 --> 00:35:14,419
<font color="#E5E5E5">that first question but I unfortunately</font>

797
00:35:12,260 --> 00:35:17,300
am in a position<font color="#E5E5E5"> where I need to</font>

798
00:35:14,420 --> 00:35:19,670
implement<font color="#CCCCCC"> some of my own crypto for</font><font color="#E5E5E5"> SRP</font>

799
00:35:17,300 --> 00:35:22,040
and while I understand you're not<font color="#E5E5E5"> doing</font>

800
00:35:19,670 --> 00:35:24,170
<font color="#CCCCCC">the</font><font color="#E5E5E5"> whole protocol keeping state the</font>

801
00:35:22,040 --> 00:35:27,920
individual components<font color="#E5E5E5"> of it and I'm</font><font color="#CCCCCC"> just</font>

802
00:35:24,170 --> 00:35:30,470
wondering<font color="#E5E5E5"> well I'm hoping you already</font>

803
00:35:27,920 --> 00:35:36,410
have<font color="#E5E5E5"> that in there but I'm</font><font color="#CCCCCC"> guessing you</font>

804
00:35:30,470 --> 00:35:37,480
don't and in a sense how easy is it to

805
00:35:36,410 --> 00:35:40,540
add

806
00:35:37,480 --> 00:35:42,730
new things to test yeah that's a good

807
00:35:40,540 --> 00:35:45,609
<font color="#E5E5E5">question actually</font><font color="#CCCCCC"> we build</font><font color="#E5E5E5"> CDF in a</font>

808
00:35:42,730 --> 00:35:48,730
completely<font color="#E5E5E5"> modular way so you really can</font>

809
00:35:45,609 --> 00:35:51,009
<font color="#CCCCCC">had new interfaces</font><font color="#E5E5E5"> new tests really</font>

810
00:35:48,730 --> 00:35:54,040
easily<font color="#CCCCCC"> so here's</font><font color="#E5E5E5"> a good question</font>

811
00:35:51,010 --> 00:35:56,560
great thank you I need this<font color="#E5E5E5"> iterate some</font>

812
00:35:54,040 --> 00:35:59,020
go<font color="#E5E5E5"> god</font><font color="#CCCCCC"> yeah it's in go but that's one</font>

813
00:35:56,560 --> 00:36:00,400
reason we<font color="#E5E5E5"> can go and not</font><font color="#CCCCCC"> see PP or us</font>

814
00:35:59,020 --> 00:36:03,310
because it's generally<font color="#CCCCCC"> parsley that's</font>

815
00:36:00,400 --> 00:36:04,990
<font color="#E5E5E5">easier to</font><font color="#CCCCCC"> do code for</font><font color="#E5E5E5"> no crypt of our</font>

816
00:36:03,310 --> 00:36:09,250
first so not<font color="#CCCCCC"> very good developers</font>

817
00:36:04,990 --> 00:36:12,098
usually yes if there's no more<font color="#CCCCCC"> questions</font>

818
00:36:09,250 --> 00:36:14,200
then<font color="#E5E5E5"> thank you guys and</font><font color="#CCCCCC"> uh yeah</font><font color="#E5E5E5"> we'll be</font>

819
00:36:12,099 --> 00:36:18,250
at<font color="#E5E5E5"> this</font><font color="#CCCCCC"> dog again besides in one hour</font><font color="#E5E5E5"> so</font>

820
00:36:14,200 --> 00:36:22,308
if you<font color="#CCCCCC"> like this ok thank you</font>

821
00:36:18,250 --> 00:36:22,309
[Applause]

