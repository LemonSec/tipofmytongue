1
00:00:00,000 --> 00:00:04,770
you're in hacking<font color="#CCCCCC"> serverless</font><font color="#E5E5E5"> runtimes</font>

2
00:00:01,439 --> 00:00:06,540
profiling<font color="#E5E5E5"> lambda asher</font><font color="#CCCCCC"> and more</font><font color="#E5E5E5"> if this</font>

3
00:00:04,770 --> 00:00:07,428
<font color="#E5E5E5">is</font><font color="#CCCCCC"> not the talk you intended to see</font>

4
00:00:06,540 --> 00:00:10,080
please leave

5
00:00:07,429 --> 00:00:13,500
<font color="#E5E5E5">I'm Andrew Krug I'm a security engineer</font>

6
00:00:10,080 --> 00:00:15,000
<font color="#E5E5E5">for Mozilla</font><font color="#CCCCCC"> I primarily do cloud</font>

7
00:00:13,500 --> 00:00:17,130
<font color="#CCCCCC">security and Identity and Access</font>

8
00:00:15,000 --> 00:00:19,710
<font color="#CCCCCC">Management and I am presenting today</font>

9
00:00:17,130 --> 00:00:22,859
<font color="#E5E5E5">from Firefox nightly the best browser in</font>

10
00:00:19,710 --> 00:00:24,689
the<font color="#E5E5E5"> world</font><font color="#CCCCCC"> I also started an</font><font color="#E5E5E5"> open-source</font>

11
00:00:22,859 --> 00:00:27,210
<font color="#CCCCCC">project here at blackhat last year</font>

12
00:00:24,689 --> 00:00:29,310
called threat<font color="#CCCCCC"> response</font><font color="#E5E5E5"> that is doing an</font>

13
00:00:27,210 --> 00:00:31,679
arsenal talk<font color="#E5E5E5"> tomorrow so if you want to</font>

14
00:00:29,310 --> 00:00:33,960
come and see me talk about<font color="#E5E5E5"> less</font><font color="#CCCCCC"> read or</font>

15
00:00:31,679 --> 00:00:37,410
less purple things<font color="#E5E5E5"> don't miss that I'm</font>

16
00:00:33,960 --> 00:00:39,120
in the the main theater<font color="#E5E5E5"> over there my</font>

17
00:00:37,410 --> 00:00:40,739
name is<font color="#E5E5E5"> Graham Jones I'm a software</font>

18
00:00:39,120 --> 00:00:43,320
<font color="#CCCCCC">developer up at legit script in Portland</font>

19
00:00:40,739 --> 00:00:44,760
and<font color="#CCCCCC"> I mostly do data warehousing and</font>

20
00:00:43,320 --> 00:00:46,320
analytics and<font color="#E5E5E5"> also I've got</font><font color="#CCCCCC"> some</font>

21
00:00:44,760 --> 00:00:49,680
<font color="#CCCCCC">background in lamda which we use some</font>

22
00:00:46,320 --> 00:00:51,629
for some of<font color="#E5E5E5"> our internal applications so</font>

23
00:00:49,680 --> 00:00:53,940
you may<font color="#E5E5E5"> be here wondering what exactly</font>

24
00:00:51,629 --> 00:00:55,649
<font color="#CCCCCC">is a server --less</font><font color="#E5E5E5"> as a good friend</font><font color="#CCCCCC"> of</font>

25
00:00:53,940 --> 00:00:58,140
mine says when he often<font color="#E5E5E5"> doesn't know</font>

26
00:00:55,649 --> 00:01:00,120
what something<font color="#E5E5E5"> is in a</font><font color="#CCCCCC"> nutshell</font>

27
00:00:58,140 --> 00:01:02,100
serverless<font color="#E5E5E5"> is your</font><font color="#CCCCCC"> ability as a</font>

28
00:01:00,120 --> 00:01:04,709
developer to<font color="#E5E5E5"> write code hand that to a</font>

29
00:01:02,100 --> 00:01:06,659
vendor<font color="#E5E5E5"> there's some sort of sandbox</font>

30
00:01:04,709 --> 00:01:08,250
<font color="#E5E5E5">execution environment and then you</font>

31
00:01:06,659 --> 00:01:10,650
<font color="#CCCCCC">basically only have</font><font color="#E5E5E5"> to worry about</font>

32
00:01:08,250 --> 00:01:15,030
consuming the net result of<font color="#E5E5E5"> that</font>

33
00:01:10,650 --> 00:01:16,500
<font color="#E5E5E5">operation so these</font><font color="#CCCCCC"> run times</font><font color="#E5E5E5"> that are at</font>

34
00:01:15,030 --> 00:01:18,570
the heart<font color="#E5E5E5"> of</font><font color="#CCCCCC"> serverless functions are</font>

35
00:01:16,500 --> 00:01:21,930
largely what we<font color="#E5E5E5"> would consider</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

36
00:01:18,570 --> 00:01:23,309
ephemeral<font color="#E5E5E5"> we hope that the environment</font>

37
00:01:21,930 --> 00:01:25,439
<font color="#E5E5E5">kind of goes away at the</font><font color="#CCCCCC"> end of</font><font color="#E5E5E5"> the</font>

38
00:01:23,310 --> 00:01:29,280
compute and that all<font color="#E5E5E5"> that's left is the</font>

39
00:01:25,439 --> 00:01:31,740
output<font color="#CCCCCC"> data</font><font color="#E5E5E5"> at the end so why would you</font>

40
00:01:29,280 --> 00:01:34,259
consider using service saw at all over

41
00:01:31,740 --> 00:01:37,320
your regular<font color="#CCCCCC"> brick-and-mortar</font><font color="#E5E5E5"> systems in</font>

42
00:01:34,259 --> 00:01:40,020
<font color="#E5E5E5">your data center or ec2</font><font color="#CCCCCC"> the advantages</font>

43
00:01:37,320 --> 00:01:43,408
are pretty broad<font color="#CCCCCC"> the first and foremost</font>

44
00:01:40,020 --> 00:01:46,710
of<font color="#CCCCCC"> which is parallel parallelism</font><font color="#E5E5E5"> just</font>

45
00:01:43,409 --> 00:01:49,020
basically infinite<font color="#E5E5E5"> scale-out ish</font><font color="#CCCCCC"> one of</font>

46
00:01:46,710 --> 00:01:50,699
the the more<font color="#E5E5E5"> compelling features doing</font>

47
00:01:49,020 --> 00:01:53,009
patterns like fan-out pattern is easy

48
00:01:50,700 --> 00:01:55,140
but there's some other tangibles like

49
00:01:53,009 --> 00:01:56,460
automatic event based triggers for other

50
00:01:55,140 --> 00:01:58,320
things<font color="#CCCCCC"> that might happen in the cloud</font>

51
00:01:56,460 --> 00:02:01,469
<font color="#E5E5E5">there's a number</font><font color="#CCCCCC"> of great security</font>

52
00:01:58,320 --> 00:02:03,240
<font color="#E5E5E5">features</font><font color="#CCCCCC"> h.a by default enforced</font>

53
00:02:01,469 --> 00:02:05,939
architecture and<font color="#E5E5E5"> little to</font><font color="#CCCCCC"> no management</font>

54
00:02:03,240 --> 00:02:07,289
<font color="#CCCCCC">so if you're a startup</font><font color="#E5E5E5"> or you're a big</font>

55
00:02:05,939 --> 00:02:11,129
<font color="#E5E5E5">company you get to collapse all your</font>

56
00:02:07,290 --> 00:02:12,900
<font color="#E5E5E5">operations in theory so another way that</font>

57
00:02:11,129 --> 00:02:17,069
<font color="#E5E5E5">I like to</font><font color="#CCCCCC"> put</font><font color="#E5E5E5"> that is that</font>

58
00:02:12,900 --> 00:02:18,629
<font color="#CCCCCC">servus compute</font><font color="#E5E5E5"> is hope right we hope so</font>

59
00:02:17,069 --> 00:02:21,510
many things about<font color="#E5E5E5"> circle</font><font color="#CCCCCC"> sena</font><font color="#E5E5E5"> and don't</font>

60
00:02:18,629 --> 00:02:23,209
<font color="#E5E5E5">get me wrong</font><font color="#CCCCCC"> I love</font><font color="#E5E5E5"> service compute I</font>

61
00:02:21,510 --> 00:02:26,190
use it for<font color="#E5E5E5"> a ton of stuff in my</font><font color="#CCCCCC"> day job</font>

62
00:02:23,209 --> 00:02:28,860
<font color="#E5E5E5">but as a consumer of this I have all</font>

63
00:02:26,190 --> 00:02:31,349
these<font color="#E5E5E5"> hopes</font><font color="#CCCCCC"> I hope that my code executes</font>

64
00:02:28,860 --> 00:02:33,299
securely<font color="#CCCCCC"> I hope that other</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> can't</font>

65
00:02:31,349 --> 00:02:35,518
tamper with the execution of<font color="#E5E5E5"> that code</font><font color="#CCCCCC"> I</font>

66
00:02:33,299 --> 00:02:37,319
hope that the vendor<font color="#E5E5E5"> is patching the</font>

67
00:02:35,519 --> 00:02:39,690
operating system running those

68
00:02:37,319 --> 00:02:42,569
environments<font color="#CCCCCC"> and I hope that that code</font>

69
00:02:39,690 --> 00:02:45,720
hasn't been<font color="#CCCCCC"> somehow modified</font><font color="#E5E5E5"> in transit</font>

70
00:02:42,569 --> 00:02:48,328
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> sandbox bottom line</font><font color="#CCCCCC"> I hope that</font>

71
00:02:45,720 --> 00:02:50,549
this is somehow more secure than

72
00:02:48,329 --> 00:02:51,989
actually running my own servers<font color="#E5E5E5"> because</font>

73
00:02:50,549 --> 00:02:56,579
I'm pretty<font color="#E5E5E5"> good at running</font><font color="#CCCCCC"> my own</font>

74
00:02:51,989 --> 00:02:58,680
servers right<font color="#E5E5E5"> I hope what will you learn</font>

75
00:02:56,579 --> 00:03:00,840
in this<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> today the three</font><font color="#E5E5E5"> takeaways</font>

76
00:02:58,680 --> 00:03:02,430
that<font color="#CCCCCC"> blackhat asks us</font><font color="#E5E5E5"> to give</font><font color="#CCCCCC"> to you</font>

77
00:03:00,840 --> 00:03:04,049
<font color="#CCCCCC">hopefully you will take</font><font color="#E5E5E5"> away how</font>

78
00:03:02,430 --> 00:03:05,730
different vendors<font color="#E5E5E5"> implement their</font>

79
00:03:04,049 --> 00:03:08,069
<font color="#CCCCCC">sandbox at a very high</font><font color="#E5E5E5"> level we're going</font>

80
00:03:05,730 --> 00:03:09,510
<font color="#CCCCCC">to talk</font><font color="#E5E5E5"> about the isolation technology</font>

81
00:03:08,069 --> 00:03:11,369
<font color="#E5E5E5">or lack thereof</font>

82
00:03:09,510 --> 00:03:13,620
we're to talk<font color="#E5E5E5"> about attack patterns and</font>

83
00:03:11,370 --> 00:03:15,180
techniques<font color="#E5E5E5"> for light persistence in</font>

84
00:03:13,620 --> 00:03:17,040
these environments<font color="#CCCCCC"> and we're going to</font>

85
00:03:15,180 --> 00:03:19,139
talk<font color="#CCCCCC"> about how</font><font color="#E5E5E5"> to build your own test</font>

86
00:03:17,040 --> 00:03:21,090
tools to hack the sandbox how do you do

87
00:03:19,139 --> 00:03:22,440
a little<font color="#E5E5E5"> bit of digging around and</font>

88
00:03:21,090 --> 00:03:24,930
figure out<font color="#E5E5E5"> how these things really work</font>

89
00:03:22,440 --> 00:03:27,720
<font color="#CCCCCC">on the inside this is the quote</font><font color="#E5E5E5"> unquote</font>

90
00:03:24,930 --> 00:03:31,290
hacking part hacker spirit of this talk

91
00:03:27,720 --> 00:03:34,139
<font color="#CCCCCC">I also like it I would like you to</font><font color="#E5E5E5"> take</font>

92
00:03:31,290 --> 00:03:36,418
<font color="#CCCCCC">away whether you should</font><font color="#E5E5E5"> embrace this</font>

93
00:03:34,139 --> 00:03:39,290
<font color="#CCCCCC">technology or avoid</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> altogether as a</font>

94
00:03:36,419 --> 00:03:41,819
consumer as like<font color="#CCCCCC"> kind of the bottom line</font>

95
00:03:39,290 --> 00:03:43,590
what you<font color="#E5E5E5"> won't learn in this talk I love</font>

96
00:03:41,819 --> 00:03:45,569
it<font color="#E5E5E5"> when people do this you won't learn</font>

97
00:03:43,590 --> 00:03:46,709
kernel level exploits because I didn't

98
00:03:45,569 --> 00:03:50,720
make any<font color="#E5E5E5"> of those if I did I'd probably</font>

99
00:03:46,709 --> 00:03:53,340
<font color="#CCCCCC">be rich</font><font color="#E5E5E5"> and not talking at blackhat</font>

100
00:03:50,720 --> 00:03:55,980
<font color="#E5E5E5">container escape to the hypervisor</font><font color="#CCCCCC"> I</font>

101
00:03:53,340 --> 00:03:58,530
won't do this<font color="#CCCCCC"> if I had a hypervisor</font>

102
00:03:55,980 --> 00:04:02,190
escape<font color="#CCCCCC"> again I do own an island or</font>

103
00:03:58,530 --> 00:04:03,989
<font color="#CCCCCC">something</font><font color="#E5E5E5"> you're gonna see some</font><font color="#CCCCCC"> Python</font>

104
00:04:02,190 --> 00:04:05,489
in this talk<font color="#E5E5E5"> that's important</font><font color="#CCCCCC"> I love</font>

105
00:04:03,989 --> 00:04:07,500
Python you're gonna also<font color="#E5E5E5"> see some</font>

106
00:04:05,489 --> 00:04:11,040
node.js I love that less and you're

107
00:04:07,500 --> 00:04:13,319
gonna see some<font color="#CCCCCC"> i.m policy Docs a quick</font>

108
00:04:11,040 --> 00:04:16,620
favor though<font color="#E5E5E5"> most of the things that</font><font color="#CCCCCC"> I'm</font>

109
00:04:13,319 --> 00:04:18,449
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to talk about</font><font color="#E5E5E5"> are related to some</font>

110
00:04:16,620 --> 00:04:19,620
initial vulnerability that was

111
00:04:18,449 --> 00:04:21,539
introduced either through<font color="#CCCCCC"> Mis</font>

112
00:04:19,620 --> 00:04:23,520
configuration or a little piece<font color="#CCCCCC"> of</font><font color="#E5E5E5"> bad</font>

113
00:04:21,539 --> 00:04:25,050
code and we really want<font color="#E5E5E5"> to look at when</font>

114
00:04:23,520 --> 00:04:26,340
somebody kind of like gives<font color="#E5E5E5"> you that</font>

115
00:04:25,050 --> 00:04:28,380
<font color="#CCCCCC">foothold in the dough</font>

116
00:04:26,340 --> 00:04:29,820
or what happens next and how bad does

117
00:04:28,380 --> 00:04:32,070
that get in different<font color="#CCCCCC"> vendors</font>

118
00:04:29,820 --> 00:04:33,000
environments because bad code is bad

119
00:04:32,070 --> 00:04:35,849
code it<font color="#CCCCCC"> doesn't mean it's necessarily</font>

120
00:04:33,000 --> 00:04:37,979
<font color="#E5E5E5">the vendors fault it's just that we want</font>

121
00:04:35,850 --> 00:04:40,889
<font color="#E5E5E5">to know what the pivoting potential is</font>

122
00:04:37,979 --> 00:04:42,750
and lateral movement potential with

123
00:04:40,889 --> 00:04:44,610
memes like<font color="#E5E5E5"> this cycling</font><font color="#CCCCCC"> around the</font>

124
00:04:42,750 --> 00:04:46,110
<font color="#CCCCCC">internet we all know</font><font color="#E5E5E5"> that bad code does</font>

125
00:04:44,610 --> 00:04:47,490
like make<font color="#CCCCCC"> it into production</font><font color="#E5E5E5"> and it</font>

126
00:04:46,110 --> 00:04:50,580
makes all<font color="#CCCCCC"> our lives hard which is why</font>

127
00:04:47,490 --> 00:04:52,860
we're here so this<font color="#E5E5E5"> is where service can</font>

128
00:04:50,580 --> 00:04:57,090
be dangerous<font color="#E5E5E5"> right in some sets of</font>

129
00:04:52,860 --> 00:04:58,680
circumstances<font color="#CCCCCC"> I</font><font color="#E5E5E5"> love that one so who</font>

130
00:04:57,090 --> 00:05:01,049
<font color="#CCCCCC">even sells the server</font><font color="#E5E5E5"> list thing almost</font>

131
00:04:58,680 --> 00:05:03,590
everybody<font color="#CCCCCC"> Amazon was kind of</font><font color="#E5E5E5"> the first</font>

132
00:05:01,050 --> 00:05:06,810
player to<font color="#E5E5E5"> bring it to market</font><font color="#CCCCCC"> but GCP</font>

133
00:05:03,590 --> 00:05:08,609
<font color="#E5E5E5">Microsoft Azure</font><font color="#CCCCCC"> they have offerings in</font>

134
00:05:06,810 --> 00:05:11,430
the space there's a great open project

135
00:05:08,610 --> 00:05:14,160
in IBM bluemix called open<font color="#CCCCCC"> Wisc that I</font>

136
00:05:11,430 --> 00:05:16,020
have great hope for<font color="#E5E5E5"> and we looked at a</font>

137
00:05:14,160 --> 00:05:19,500
little<font color="#E5E5E5"> sandbox as well called off</font><font color="#CCCCCC"> Serie</font>

138
00:05:16,020 --> 00:05:21,090
<font color="#CCCCCC">Web tasks</font><font color="#E5E5E5"> so what do people even use a</font>

139
00:05:19,500 --> 00:05:24,690
service thing for it's relatively<font color="#E5E5E5"> new</font>

140
00:05:21,090 --> 00:05:26,190
<font color="#E5E5E5">probably nothing critical right so the</font>

141
00:05:24,690 --> 00:05:28,050
<font color="#E5E5E5">answer is is</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> have this whole</font>

142
00:05:26,190 --> 00:05:30,210
<font color="#CCCCCC">show</font><font color="#E5E5E5"> morges board of apps and</font><font color="#CCCCCC"> they</font>

143
00:05:28,050 --> 00:05:31,889
really range from<font color="#CCCCCC"> low risk</font><font color="#E5E5E5"> to high risk</font>

144
00:05:30,210 --> 00:05:34,500
apps you have<font color="#E5E5E5"> people using servlets for</font>

145
00:05:31,889 --> 00:05:36,600
<font color="#CCCCCC">chatbots and on the more high risk in</font>

146
00:05:34,500 --> 00:05:38,970
you have them using them for<font color="#E5E5E5"> identity</font>

147
00:05:36,600 --> 00:05:41,340
providers and things at the very<font color="#CCCCCC"> heart</font>

148
00:05:38,970 --> 00:05:44,729
of our infrastructure<font color="#E5E5E5"> so it's really</font>

149
00:05:41,340 --> 00:05:46,229
<font color="#E5E5E5">anything and everything my boss sent</font><font color="#CCCCCC"> me</font>

150
00:05:44,729 --> 00:05:48,150
this tweet while I was making<font color="#CCCCCC"> this slide</font>

151
00:05:46,229 --> 00:05:50,430
deck that apparently somebody has made

152
00:05:48,150 --> 00:05:52,859
an engine<font color="#CCCCCC"> even that you can use to run</font>

153
00:05:50,430 --> 00:06:00,050
docker containers inside of Amazon

154
00:05:52,860 --> 00:06:00,050
lambda functions this<font color="#E5E5E5"> was my reaction</font>

155
00:06:00,240 --> 00:06:04,360
why would you want to<font color="#E5E5E5"> do this it seems</font>

156
00:06:02,289 --> 00:06:06,759
<font color="#E5E5E5">like a really great way</font><font color="#CCCCCC"> to totally</font>

157
00:06:04,360 --> 00:06:08,289
<font color="#CCCCCC">giveaway every feature</font><font color="#E5E5E5"> that's afforded</font>

158
00:06:06,759 --> 00:06:11,229
<font color="#CCCCCC">to you from</font><font color="#E5E5E5"> a security perspective by</font>

159
00:06:08,289 --> 00:06:13,120
<font color="#E5E5E5">lambda right so let's</font><font color="#CCCCCC"> just count</font><font color="#E5E5E5"> the</font>

160
00:06:11,229 --> 00:06:15,729
layers of abstraction there<font color="#E5E5E5"> it's a</font>

161
00:06:13,120 --> 00:06:17,770
container<font color="#E5E5E5"> running in a sandbox</font><font color="#CCCCCC"> running</font>

162
00:06:15,729 --> 00:06:20,440
in a sandbox container<font color="#E5E5E5"> running in a</font>

163
00:06:17,770 --> 00:06:21,789
virtual<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> on a computer in the</font>

164
00:06:20,440 --> 00:06:23,199
cloud<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> count them that's one two</font>

165
00:06:21,789 --> 00:06:25,060
three<font color="#CCCCCC"> four five six layers</font><font color="#E5E5E5"> of</font>

166
00:06:23,199 --> 00:06:29,349
abstraction<font color="#CCCCCC"> between you and the thing</font>

167
00:06:25,060 --> 00:06:31,030
you<font color="#E5E5E5"> actually have to protect that is so</font>

168
00:06:29,349 --> 00:06:33,069
different<font color="#E5E5E5"> from when I first started this</font>

169
00:06:31,030 --> 00:06:35,318
when I had a fleet of<font color="#CCCCCC"> NetWare servers</font>

170
00:06:33,069 --> 00:06:38,349
that<font color="#E5E5E5"> look like that sometimes they</font>

171
00:06:35,319 --> 00:06:39,550
turned off and<font color="#E5E5E5"> on</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> it was great</font><font color="#CCCCCC"> the</font>

172
00:06:38,349 --> 00:06:41,050
point is though that<font color="#CCCCCC"> people will really</font>

173
00:06:39,550 --> 00:06:43,389
do anything<font color="#E5E5E5"> and everything</font><font color="#CCCCCC"> with</font>

174
00:06:41,050 --> 00:06:45,009
technology if they can if they want<font color="#CCCCCC"> to</font>

175
00:06:43,389 --> 00:06:48,969
do it they'll<font color="#CCCCCC"> find a way</font><font color="#E5E5E5"> and so we need</font>

176
00:06:45,009 --> 00:06:51,039
<font color="#E5E5E5">to learn more</font><font color="#CCCCCC"> so for these sandbox</font>

177
00:06:48,969 --> 00:06:52,659
providers<font color="#E5E5E5"> now we're going to talk</font><font color="#CCCCCC"> about</font>

178
00:06:51,039 --> 00:06:54,729
what are<font color="#CCCCCC"> some</font><font color="#E5E5E5"> of the attack surfaces</font>

179
00:06:52,659 --> 00:06:56,500
that we're gonna cover in this talk<font color="#E5E5E5"> and</font>

180
00:06:54,729 --> 00:06:59,139
<font color="#E5E5E5">the main systems that we're gonna cover</font>

181
00:06:56,500 --> 00:07:01,210
is at<font color="#E5E5E5"> code so when the code</font><font color="#CCCCCC"> is at rest</font>

182
00:06:59,139 --> 00:07:04,270
<font color="#E5E5E5">and at the execution time of that code</font>

183
00:07:01,210 --> 00:07:05,859
<font color="#CCCCCC">so this first one at code</font><font color="#E5E5E5"> this can be if</font>

184
00:07:04,270 --> 00:07:07,900
you have<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to the github repo you</font>

185
00:07:05,860 --> 00:07:09,460
<font color="#E5E5E5">gain some of this sort of source access</font>

186
00:07:07,900 --> 00:07:11,650
or it could be something like<font color="#E5E5E5"> a</font>

187
00:07:09,460 --> 00:07:13,568
<font color="#E5E5E5">subdomain takeover that lets you hijack</font>

188
00:07:11,650 --> 00:07:15,099
the deployment<font color="#CCCCCC"> pipeline just some point</font>

189
00:07:13,569 --> 00:07:17,229
at which you can change<font color="#E5E5E5"> the actual code</font>

190
00:07:15,099 --> 00:07:19,810
<font color="#E5E5E5">before it even gets deployed if you have</font>

191
00:07:17,229 --> 00:07:21,190
this level<font color="#CCCCCC"> of</font><font color="#E5E5E5"> access the second step is</font>

192
00:07:19,810 --> 00:07:22,539
<font color="#CCCCCC">probably</font><font color="#E5E5E5"> not as important to you because</font>

193
00:07:21,190 --> 00:07:24,130
you<font color="#E5E5E5"> don't need to worry about an exploit</font>

194
00:07:22,539 --> 00:07:25,990
<font color="#E5E5E5">you can just put</font><font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> want right</font>

195
00:07:24,130 --> 00:07:27,750
<font color="#E5E5E5">in there but we'll come</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to this so</font>

196
00:07:25,990 --> 00:07:29,889
<font color="#E5E5E5">keep this one in the back of your head</font>

197
00:07:27,750 --> 00:07:32,680
the second method<font color="#E5E5E5"> and the one we're</font>

198
00:07:29,889 --> 00:07:34,180
going to talk<font color="#CCCCCC"> about most is exploits</font>

199
00:07:32,680 --> 00:07:35,740
<font color="#E5E5E5">that are at the run timer at</font><font color="#CCCCCC"> the</font>

200
00:07:34,180 --> 00:07:38,560
execution<font color="#CCCCCC"> this</font><font color="#E5E5E5"> can be these</font><font color="#CCCCCC"> are all</font>

201
00:07:35,740 --> 00:07:41,469
sorts of classic things things like<font color="#E5E5E5"> SQL</font>

202
00:07:38,560 --> 00:07:43,930
injection<font color="#E5E5E5"> getting able to run arbitrary</font>

203
00:07:41,469 --> 00:07:46,449
<font color="#E5E5E5">code or string concatenation exploits</font>

204
00:07:43,930 --> 00:07:48,069
<font color="#CCCCCC">and then once this happens within</font><font color="#E5E5E5"> the</font>

205
00:07:46,449 --> 00:07:49,569
<font color="#E5E5E5">run time what are some of the pivots</font>

206
00:07:48,069 --> 00:07:51,779
that<font color="#E5E5E5"> you're able</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> based on the</font>

207
00:07:49,569 --> 00:07:55,000
permissions<font color="#E5E5E5"> of that serverless function</font>

208
00:07:51,779 --> 00:07:57,520
so<font color="#E5E5E5"> now you're saying so what right we've</font>

209
00:07:55,000 --> 00:08:00,819
all heard<font color="#E5E5E5"> of these attack types but the</font>

210
00:07:57,520 --> 00:08:02,500
difference is that the pivoting

211
00:08:00,819 --> 00:08:04,360
potentials from<font color="#E5E5E5"> these within your</font>

212
00:08:02,500 --> 00:08:05,800
<font color="#CCCCCC">service system architecture can be</font>

213
00:08:04,360 --> 00:08:07,899
different<font color="#E5E5E5"> than what</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was on your</font>

214
00:08:05,800 --> 00:08:09,729
traditional<font color="#CCCCCC"> server and we're primarily</font>

215
00:08:07,899 --> 00:08:11,320
concerned with persistence<font color="#E5E5E5"> and data</font>

216
00:08:09,729 --> 00:08:12,770
exfiltration because<font color="#E5E5E5"> these things are</font>

217
00:08:11,320 --> 00:08:16,310
really<font color="#E5E5E5"> different in the sir</font>

218
00:08:12,770 --> 00:08:17,810
architecture<font color="#E5E5E5"> so to do this we're gonna</font>

219
00:08:16,310 --> 00:08:19,160
come<font color="#CCCCCC"> back to some of</font><font color="#E5E5E5"> those things</font><font color="#CCCCCC"> that</font>

220
00:08:17,810 --> 00:08:22,400
Andrew touched on<font color="#CCCCCC"> about what we</font><font color="#E5E5E5"> believe</font>

221
00:08:19,160 --> 00:08:24,050
is<font color="#CCCCCC"> true about serverless first sandbox</font>

222
00:08:22,400 --> 00:08:27,049
<font color="#E5E5E5">should be thrown away at the end of</font>

223
00:08:24,050 --> 00:08:29,270
execution<font color="#E5E5E5"> and this comes back</font><font color="#CCCCCC"> to it</font>

224
00:08:27,050 --> 00:08:30,770
ideally if this happened every<font color="#CCCCCC"> time</font><font color="#E5E5E5"> it</font>

225
00:08:29,270 --> 00:08:32,598
make persistence really hard<font color="#E5E5E5"> because</font>

226
00:08:30,770 --> 00:08:34,579
<font color="#E5E5E5">there would be no persistence from</font>

227
00:08:32,599 --> 00:08:36,229
<font color="#E5E5E5">execution to execution this is not</font>

228
00:08:34,580 --> 00:08:38,209
always<font color="#E5E5E5"> true and we're going to go into</font>

229
00:08:36,229 --> 00:08:39,830
some<font color="#CCCCCC"> of the ways that</font><font color="#E5E5E5"> sandbox is not</font>

230
00:08:38,208 --> 00:08:43,338
<font color="#E5E5E5">being thrown away can lead to further</font>

231
00:08:39,830 --> 00:08:45,200
exploits secondarily<font color="#E5E5E5"> sandbox it should</font>

232
00:08:43,339 --> 00:08:47,690
have minimum execution times<font color="#E5E5E5"> and</font>

233
00:08:45,200 --> 00:08:49,190
although you can set these yourself<font color="#CCCCCC"> down</font>

234
00:08:47,690 --> 00:08:51,620
<font color="#E5E5E5">to whatever default you feel is</font>

235
00:08:49,190 --> 00:08:54,440
reasonable<font color="#CCCCCC"> if you don't set these</font>

236
00:08:51,620 --> 00:08:57,110
correctly<font color="#E5E5E5"> your sandbox</font><font color="#CCCCCC"> if it starts</font>

237
00:08:54,440 --> 00:08:59,329
running someone else's<font color="#E5E5E5"> code can run far</font>

238
00:08:57,110 --> 00:09:00,829
<font color="#E5E5E5">over up to perhaps even five</font><font color="#CCCCCC"> minutes</font>

239
00:08:59,329 --> 00:09:03,170
<font color="#CCCCCC">which is the</font><font color="#E5E5E5"> default in some of the</font>

240
00:09:00,829 --> 00:09:05,120
cloud providers and five<font color="#E5E5E5"> minutes it</font>

241
00:09:03,170 --> 00:09:06,439
turns<font color="#E5E5E5"> out when someone else's code is</font>

242
00:09:05,120 --> 00:09:10,540
<font color="#E5E5E5">running on your system for five minutes</font>

243
00:09:06,440 --> 00:09:12,680
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> do a lot in five minutes so</font>

244
00:09:10,540 --> 00:09:13,939
<font color="#CCCCCC">we're gonna cover a couple</font><font color="#E5E5E5"> pieces of</font>

245
00:09:12,680 --> 00:09:15,439
terminology for<font color="#E5E5E5"> those of you who are</font>

246
00:09:13,940 --> 00:09:17,990
less<font color="#CCCCCC"> familiar with server</font><font color="#E5E5E5"> lists let us</font>

247
00:09:15,440 --> 00:09:20,570
touch on persistence<font color="#E5E5E5"> so the first term</font>

248
00:09:17,990 --> 00:09:22,640
<font color="#E5E5E5">is</font><font color="#CCCCCC"> a cold</font><font color="#E5E5E5"> start and this is after I've</font>

249
00:09:20,570 --> 00:09:25,010
set up my<font color="#E5E5E5"> cyrillus function and I call</font>

250
00:09:22,640 --> 00:09:27,050
it for the<font color="#E5E5E5"> first time this is loading</font>

251
00:09:25,010 --> 00:09:28,939
all the<font color="#CCCCCC"> code off disk instantiating</font><font color="#E5E5E5"> in</font>

252
00:09:27,050 --> 00:09:30,620
the container<font color="#CCCCCC"> setting the environment up</font>

253
00:09:28,940 --> 00:09:32,870
loading<font color="#E5E5E5"> any background code that only</font>

254
00:09:30,620 --> 00:09:34,490
gets loaded once all those startup costs

255
00:09:32,870 --> 00:09:35,839
that<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to go the first</font><font color="#E5E5E5"> time and there</font>

256
00:09:34,490 --> 00:09:38,480
is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> performance</font><font color="#CCCCCC"> penalty that's paid for</font>

257
00:09:35,839 --> 00:09:41,300
<font color="#CCCCCC">this so this</font><font color="#E5E5E5"> is a cold</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> as opposed</font>

258
00:09:38,480 --> 00:09:43,220
to a warm start<font color="#E5E5E5"> so to get</font><font color="#CCCCCC"> around these</font>

259
00:09:41,300 --> 00:09:44,779
performance issues most service

260
00:09:43,220 --> 00:09:47,180
providers allow a function that<font color="#E5E5E5"> has</font>

261
00:09:44,779 --> 00:09:49,010
<font color="#E5E5E5">recently been</font><font color="#CCCCCC"> called when called again</font>

262
00:09:47,180 --> 00:09:50,689
<font color="#E5E5E5">to reuse much of that initial</font>

263
00:09:49,010 --> 00:09:52,850
infrastructure potentially you<font color="#E5E5E5"> could</font>

264
00:09:50,690 --> 00:09:54,380
wind up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the same container</font><font color="#E5E5E5"> there</font>

265
00:09:52,850 --> 00:09:55,790
could be coding your runtime that's

266
00:09:54,380 --> 00:09:57,589
still loaded<font color="#E5E5E5"> and there could even be</font>

267
00:09:55,790 --> 00:09:58,849
files on your<font color="#CCCCCC"> ram disk</font><font color="#E5E5E5"> that are still</font>

268
00:09:57,589 --> 00:10:01,220
<font color="#CCCCCC">there</font><font color="#E5E5E5"> from an entirely previous</font>

269
00:09:58,850 --> 00:10:05,690
execution which opens the door for<font color="#E5E5E5"> many</font>

270
00:10:01,220 --> 00:10:07,640
of the persistence attacks so the first

271
00:10:05,690 --> 00:10:10,520
person<font color="#CCCCCC"> to discuss these type of attacks</font>

272
00:10:07,640 --> 00:10:12,260
was rich<font color="#E5E5E5"> Jones</font><font color="#CCCCCC"> he's also the</font><font color="#E5E5E5"> creator of</font>

273
00:10:10,520 --> 00:10:15,230
<font color="#E5E5E5">a serverless framework called the Zappa</font>

274
00:10:12,260 --> 00:10:17,270
framework he<font color="#CCCCCC"> presented at CCC last</font>

275
00:10:15,230 --> 00:10:19,520
winter this<font color="#E5E5E5"> talk called gone in 60</font>

276
00:10:17,270 --> 00:10:22,160
milliseconds we cannot dive as deep as

277
00:10:19,520 --> 00:10:24,470
he did<font color="#E5E5E5"> into AWS but</font><font color="#CCCCCC"> if you want to go</font>

278
00:10:22,160 --> 00:10:25,959
and see kind<font color="#CCCCCC"> of in</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> worst-case scenario</font>

279
00:10:24,470 --> 00:10:27,610
if<font color="#E5E5E5"> you blow</font><font color="#CCCCCC"> I am</font>

280
00:10:25,960 --> 00:10:29,950
missions<font color="#E5E5E5"> a little more open than the</font>

281
00:10:27,610 --> 00:10:33,070
defaults what can<font color="#CCCCCC"> theoretically happen</font>

282
00:10:29,950 --> 00:10:35,170
<font color="#E5E5E5">this is a really great talk so these</font>

283
00:10:33,070 --> 00:10:38,110
environments have outer and inner attack

284
00:10:35,170 --> 00:10:40,479
surfaces right<font color="#E5E5E5"> so they have ideally the</font>

285
00:10:38,110 --> 00:10:43,150
hardened hardened<font color="#E5E5E5"> outside and the</font>

286
00:10:40,480 --> 00:10:47,260
<font color="#E5E5E5">chocolaty Center so to speak and the</font>

287
00:10:43,150 --> 00:10:50,490
outside is<font color="#E5E5E5"> API gateway in Amazon as your</font>

288
00:10:47,260 --> 00:10:53,170
functions and other vendors<font color="#E5E5E5"> have similar</font>

289
00:10:50,490 --> 00:10:56,440
<font color="#CCCCCC">analogs to that</font><font color="#E5E5E5"> where it's a mapping of</font>

290
00:10:53,170 --> 00:10:59,349
rest methods to<font color="#E5E5E5"> service execution so</font>

291
00:10:56,440 --> 00:11:01,030
that inner surface is really in the AWS

292
00:10:59,350 --> 00:11:04,630
case the lambda function or an azure<font color="#CCCCCC"> 'z</font>

293
00:11:01,030 --> 00:11:06,970
case<font color="#E5E5E5"> the web function and that's where</font>

294
00:11:04,630 --> 00:11:08,560
our<font color="#E5E5E5"> code</font><font color="#CCCCCC"> actually executes and if</font>

295
00:11:06,970 --> 00:11:10,480
there's some human error or<font color="#CCCCCC"> a lack of</font>

296
00:11:08,560 --> 00:11:11,949
skills in auditing I am that's where you

297
00:11:10,480 --> 00:11:14,050
have<font color="#E5E5E5"> these potential pivots to other</font>

298
00:11:11,950 --> 00:11:15,550
services<font color="#E5E5E5"> because you do</font><font color="#CCCCCC"> have the same</font>

299
00:11:14,050 --> 00:11:18,490
lateral movement ability that you<font color="#E5E5E5"> have</font>

300
00:11:15,550 --> 00:11:20,079
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> of any cloud so if you're</font>

301
00:11:18,490 --> 00:11:21,610
<font color="#E5E5E5">scanning for this from the outside there</font>

302
00:11:20,080 --> 00:11:23,320
are some<font color="#E5E5E5"> indicators that you might be</font>

303
00:11:21,610 --> 00:11:24,610
hitting<font color="#E5E5E5"> service functions and I'm</font>

304
00:11:23,320 --> 00:11:28,260
borrowing a little bit from rich here

305
00:11:24,610 --> 00:11:31,660
<font color="#CCCCCC">this is directly</font><font color="#E5E5E5"> from his talk almost</font>

306
00:11:28,260 --> 00:11:33,520
<font color="#CCCCCC">there are some headers that Amazon</font><font color="#E5E5E5"> sends</font>

307
00:11:31,660 --> 00:11:34,990
out like cloud front cache headers<font color="#E5E5E5"> and</font>

308
00:11:33,520 --> 00:11:37,360
things that<font color="#CCCCCC"> aren't a smoking gun really</font>

309
00:11:34,990 --> 00:11:39,070
<font color="#E5E5E5">that you are talking to a lambda</font>

310
00:11:37,360 --> 00:11:40,960
<font color="#E5E5E5">function but</font><font color="#CCCCCC"> they're a good</font><font color="#E5E5E5"> indicator</font>

311
00:11:39,070 --> 00:11:44,110
that<font color="#E5E5E5"> you might be in the case of web</font>

312
00:11:40,960 --> 00:11:45,700
<font color="#E5E5E5">tasks web tasks</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> is that right</font>

313
00:11:44,110 --> 00:11:48,760
<font color="#CCCCCC">out in the</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> you definitely know that</font>

314
00:11:45,700 --> 00:11:51,040
<font color="#E5E5E5">it's web tasks and</font><font color="#CCCCCC"> azure azor</font><font color="#E5E5E5"> just says</font>

315
00:11:48,760 --> 00:11:52,810
it's is because it's Microsoft<font color="#E5E5E5"> and</font>

316
00:11:51,040 --> 00:11:55,060
everything is<font color="#CCCCCC"> just I asked</font><font color="#E5E5E5"> probably</font>

317
00:11:52,810 --> 00:11:57,150
somewhere so<font color="#E5E5E5"> you really don't know</font><font color="#CCCCCC"> that</font>

318
00:11:55,060 --> 00:11:59,709
that's<font color="#E5E5E5"> an azure function from the header</font>

319
00:11:57,150 --> 00:12:01,270
<font color="#CCCCCC">you could also just search github</font><font color="#E5E5E5"> like</font>

320
00:11:59,710 --> 00:12:03,490
anything really<font color="#CCCCCC"> and there is a lot of</font>

321
00:12:01,270 --> 00:12:06,130
<font color="#E5E5E5">framework frameworks that are becoming</font>

322
00:12:03,490 --> 00:12:08,260
<font color="#CCCCCC">increasingly</font><font color="#E5E5E5"> popular</font><font color="#CCCCCC"> the aptly-named</font>

323
00:12:06,130 --> 00:12:09,730
<font color="#E5E5E5">serverless framework has a config file</font>

324
00:12:08,260 --> 00:12:11,130
called serverless dot yml and you can

325
00:12:09,730 --> 00:12:15,940
see it has a very<font color="#E5E5E5"> high number</font><font color="#CCCCCC"> of hits</font>

326
00:12:11,130 --> 00:12:18,900
<font color="#E5E5E5">over 13,000 so we have serverless</font><font color="#CCCCCC"> apps</font>

327
00:12:15,940 --> 00:12:21,880
<font color="#CCCCCC">lok located what do we do</font><font color="#E5E5E5"> with them</font><font color="#CCCCCC"> now</font>

328
00:12:18,900 --> 00:12:23,709
<font color="#E5E5E5">in order to attack these environments we</font>

329
00:12:21,880 --> 00:12:26,050
really have to understand what's

330
00:12:23,710 --> 00:12:28,840
possible<font color="#CCCCCC"> inside the containers</font>

331
00:12:26,050 --> 00:12:31,240
<font color="#CCCCCC">themselves so our</font><font color="#E5E5E5"> starting point</font>

332
00:12:28,840 --> 00:12:33,640
like any good attackers was to go to the

333
00:12:31,240 --> 00:12:35,340
vendors documentation and this is what

334
00:12:33,640 --> 00:12:37,750
we found

335
00:12:35,340 --> 00:12:39,700
nobody really writes about how they

336
00:12:37,750 --> 00:12:41,980
construct these things

337
00:12:39,700 --> 00:12:44,050
the most transparent vendor is<font color="#CCCCCC"> Ozzy ro</font>

338
00:12:41,980 --> 00:12:46,570
they actually have an<font color="#E5E5E5"> open reference</font>

339
00:12:44,050 --> 00:12:49,510
guide but nobody's<font color="#E5E5E5"> really good about</font>

340
00:12:46,570 --> 00:12:51,040
saying how they build security<font color="#E5E5E5"> and</font>

341
00:12:49,510 --> 00:12:52,899
<font color="#E5E5E5">allocation around these environments</font>

342
00:12:51,040 --> 00:12:54,640
<font color="#E5E5E5">inside of their cloud largely because</font>

343
00:12:52,899 --> 00:12:57,250
it's it's probably<font color="#E5E5E5"> proprietary trade</font>

344
00:12:54,640 --> 00:12:59,560
secret<font color="#E5E5E5"> kind of information but it's</font><font color="#CCCCCC"> just</font>

345
00:12:57,250 --> 00:13:02,829
<font color="#E5E5E5">not super public and if it is it's very</font>

346
00:12:59,560 --> 00:13:04,989
<font color="#E5E5E5">obscure so I'll ask you if you have a</font>

347
00:13:02,829 --> 00:13:07,390
problem<font color="#E5E5E5"> with</font><font color="#CCCCCC"> using a tech stack</font><font color="#E5E5E5"> that you</font>

348
00:13:04,990 --> 00:13:10,209
can't audit really how it works<font color="#CCCCCC"> on the</font>

349
00:13:07,390 --> 00:13:13,569
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> so we did a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of digging</font><font color="#E5E5E5"> around</font>

350
00:13:10,209 --> 00:13:15,399
<font color="#CCCCCC">we were inspired by this project by a</font>

351
00:13:13,570 --> 00:13:17,589
researcher by the name of<font color="#E5E5E5"> Eric Hammond</font>

352
00:13:15,399 --> 00:13:19,839
he wrote a tool called<font color="#CCCCCC"> lam - several</font>

353
00:13:17,589 --> 00:13:23,019
years ago<font color="#E5E5E5"> that</font><font color="#CCCCCC"> was more of a web shell</font>

354
00:13:19,839 --> 00:13:24,640
wrapper that<font color="#E5E5E5"> just ran os-level shell out</font>

355
00:13:23,019 --> 00:13:25,899
commands to kind of dig around<font color="#E5E5E5"> the lam</font><font color="#CCCCCC"> -</font>

356
00:13:24,640 --> 00:13:28,779
<font color="#CCCCCC">runtime he published</font><font color="#E5E5E5"> some of the very</font>

357
00:13:25,899 --> 00:13:31,209
very early work<font color="#E5E5E5"> around figuring out what</font>

358
00:13:28,779 --> 00:13:33,130
goes on inside<font color="#CCCCCC"> of a lambda</font><font color="#E5E5E5"> function so</font>

359
00:13:31,209 --> 00:13:37,469
we did like<font color="#E5E5E5"> some very similar stuff and</font>

360
00:13:33,130 --> 00:13:40,630
we evolved<font color="#E5E5E5"> that until we had 14 or so</font>

361
00:13:37,470 --> 00:13:43,269
<font color="#E5E5E5">core tests that we would do with these</font>

362
00:13:40,630 --> 00:13:45,070
<font color="#CCCCCC">os shell out commands to figure out what</font>

363
00:13:43,269 --> 00:13:46,720
<font color="#E5E5E5">hardware was it running what was the</font>

364
00:13:45,070 --> 00:13:48,670
kernel what Python<font color="#E5E5E5"> packages were</font>

365
00:13:46,720 --> 00:13:50,740
<font color="#CCCCCC">available etc etc where could we</font><font color="#E5E5E5"> write</font>

366
00:13:48,670 --> 00:13:53,349
and we'll talk<font color="#E5E5E5"> more about this towards</font>

367
00:13:50,740 --> 00:13:55,899
<font color="#E5E5E5">the end but we have this great big rich</font>

368
00:13:53,350 --> 00:13:58,360
profile now of information on these

369
00:13:55,899 --> 00:14:00,310
environments<font color="#E5E5E5"> and we looked for common</font>

370
00:13:58,360 --> 00:14:02,440
things<font color="#E5E5E5"> like is this an operating system</font>

371
00:14:00,310 --> 00:14:05,500
<font color="#E5E5E5">or is this something totally proprietary</font>

372
00:14:02,440 --> 00:14:07,990
that just implements a custom<font color="#E5E5E5"> version of</font>

373
00:14:05,500 --> 00:14:09,910
<font color="#E5E5E5">the language runtime can we read and</font>

374
00:14:07,990 --> 00:14:11,680
write everywhere can we poison<font color="#E5E5E5"> the code</font>

375
00:14:09,910 --> 00:14:14,079
once it's in the environment<font color="#CCCCCC"> can we get</font>

376
00:14:11,680 --> 00:14:16,180
in set environment variables are the

377
00:14:14,079 --> 00:14:17,769
cloud permissions<font color="#E5E5E5"> too permissive</font><font color="#CCCCCC"> too</font>

378
00:14:16,180 --> 00:14:20,380
<font color="#CCCCCC">tight or just right</font>

379
00:14:17,769 --> 00:14:22,930
what about<font color="#CCCCCC"> internet access do I</font><font color="#E5E5E5"> have</font>

380
00:14:20,380 --> 00:14:25,149
<font color="#CCCCCC">aggressed</font><font color="#E5E5E5"> versus egress and ingress can</font>

381
00:14:22,930 --> 00:14:27,519
I pop a shell<font color="#CCCCCC"> on these</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> what even</font>

382
00:14:25,149 --> 00:14:29,170
are they so this is a<font color="#E5E5E5"> little bit like</font>

383
00:14:27,519 --> 00:14:31,180
playing<font color="#E5E5E5"> operation right because you want</font>

384
00:14:29,170 --> 00:14:32,800
<font color="#E5E5E5">to do this without the cloud provider</font>

385
00:14:31,180 --> 00:14:34,329
revoking access to your<font color="#CCCCCC"> accounts so we</font>

386
00:14:32,800 --> 00:14:35,620
<font color="#CCCCCC">definitely got in touch with all the</font>

387
00:14:34,329 --> 00:14:36,880
cloud providers and join their bug

388
00:14:35,620 --> 00:14:38,620
bounty programs and all that good stuff

389
00:14:36,880 --> 00:14:40,439
<font color="#E5E5E5">so we didn't touch the sides but if</font>

390
00:14:38,620 --> 00:14:44,649
you're going to<font color="#CCCCCC"> do this</font><font color="#E5E5E5"> do notify</font>

391
00:14:40,440 --> 00:14:46,690
providers we explored<font color="#E5E5E5"> lambda</font><font color="#CCCCCC"> Azure</font>

392
00:14:44,649 --> 00:14:48,790
functions<font color="#E5E5E5"> and</font><font color="#CCCCCC"> osteo web tasks like I</font>

393
00:14:46,690 --> 00:14:52,420
mentioned so<font color="#CCCCCC"> two</font><font color="#E5E5E5"> big</font><font color="#CCCCCC"> box vendors one</font>

394
00:14:48,790 --> 00:14:53,319
small very purpose-built sandbox<font color="#E5E5E5"> so</font>

395
00:14:52,420 --> 00:14:55,120
let's talk about<font color="#CCCCCC"> Lamb</font>

396
00:14:53,320 --> 00:14:58,150
first<font color="#E5E5E5"> lambda was kind of</font><font color="#CCCCCC"> first-to-market</font>

397
00:14:55,120 --> 00:15:00,250
<font color="#CCCCCC">with</font><font color="#E5E5E5"> this it's been around a while so we</font>

398
00:14:58,150 --> 00:15:01,630
know quite<font color="#E5E5E5"> a bit about it</font><font color="#CCCCCC"> from work</font><font color="#E5E5E5"> that</font>

399
00:15:00,250 --> 00:15:03,700
other<font color="#CCCCCC"> people have</font><font color="#E5E5E5"> done we know it's some</font>

400
00:15:01,630 --> 00:15:05,080
kind of containers nobody says it's

401
00:15:03,700 --> 00:15:07,870
necessarily docker but we know<font color="#CCCCCC"> it's</font>

402
00:15:05,080 --> 00:15:10,960
containers<font color="#CCCCCC"> at least that it runs on a</font>

403
00:15:07,870 --> 00:15:13,570
Red Hat<font color="#CCCCCC"> six</font><font color="#E5E5E5"> derivative Amazon</font><font color="#CCCCCC"> Linux it's</font>

404
00:15:10,960 --> 00:15:16,750
a read-only file system code gets

405
00:15:13,570 --> 00:15:19,630
injected into<font color="#CCCCCC"> /var run</font><font color="#E5E5E5"> tasks</font><font color="#CCCCCC"> it runs as</font>

406
00:15:16,750 --> 00:15:21,850
<font color="#CCCCCC">a non root user all great things</font><font color="#E5E5E5"> single</font>

407
00:15:19,630 --> 00:15:23,950
I<font color="#E5E5E5"> am</font><font color="#CCCCCC"> role accessible to the</font><font color="#E5E5E5"> sandbox in</font>

408
00:15:21,850 --> 00:15:25,720
terms of pivoting in the cloud<font color="#E5E5E5"> reverse</font>

409
00:15:23,950 --> 00:15:27,640
<font color="#E5E5E5">shell is probably not</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> at least</font>

410
00:15:25,720 --> 00:15:30,220
<font color="#E5E5E5">nobody's done it yet</font><font color="#CCCCCC"> that I've seen and</font>

411
00:15:27,640 --> 00:15:32,500
we do have<font color="#CCCCCC"> Internet egress and I put in</font>

412
00:15:30,220 --> 00:15:34,720
parens<font color="#CCCCCC"> in some cases</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> you can</font>

413
00:15:32,500 --> 00:15:38,740
<font color="#E5E5E5">deploy these without any access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

414
00:15:34,720 --> 00:15:39,760
<font color="#CCCCCC">Internet so</font><font color="#E5E5E5"> we wanted to know if we can</font>

415
00:15:38,740 --> 00:15:41,980
steal<font color="#E5E5E5"> credentials from these</font>

416
00:15:39,760 --> 00:15:42,280
<font color="#E5E5E5">environments and when we do how bad is</font>

417
00:15:41,980 --> 00:15:44,470
it

418
00:15:42,280 --> 00:15:46,810
where can we persist code if we do

419
00:15:44,470 --> 00:15:48,280
<font color="#E5E5E5">manage to get remote code execution how</font>

420
00:15:46,810 --> 00:15:50,140
long<font color="#E5E5E5"> can we do that for is it really</font>

421
00:15:48,280 --> 00:15:52,449
persistence or is it like ephemeral

422
00:15:50,140 --> 00:15:54,520
persistence<font color="#E5E5E5"> can</font><font color="#CCCCCC"> we get lambda</font><font color="#E5E5E5"> to do</font>

423
00:15:52,450 --> 00:15:56,260
things other than<font color="#E5E5E5"> execute code in the</font>

424
00:15:54,520 --> 00:15:59,860
<font color="#CCCCCC">language that</font><font color="#E5E5E5"> we prefer to use</font><font color="#CCCCCC"> so if I</font>

425
00:15:56,260 --> 00:16:02,740
say I am running<font color="#E5E5E5"> Java can I execute node</font>

426
00:15:59,860 --> 00:16:05,350
or Python or Perl<font color="#CCCCCC"> and how frequently</font>

427
00:16:02,740 --> 00:16:08,710
<font color="#CCCCCC">does the OS and runtime get patch Python</font>

428
00:16:05,350 --> 00:16:10,660
modules node modules<font color="#CCCCCC"> etc so I have some</font>

429
00:16:08,710 --> 00:16:13,120
sample output<font color="#E5E5E5"> here</font><font color="#CCCCCC"> that I'll show</font><font color="#E5E5E5"> you</font>

430
00:16:10,660 --> 00:16:15,610
<font color="#E5E5E5">from our profiler this is more just to</font>

431
00:16:13,120 --> 00:16:20,200
<font color="#CCCCCC">illustrate for your brain what the</font>

432
00:16:15,610 --> 00:16:23,680
output is<font color="#E5E5E5"> so it's it's JSON structure of</font>

433
00:16:20,200 --> 00:16:25,060
all of these checks<font color="#CCCCCC"> you can run this in</font>

434
00:16:23,680 --> 00:16:26,260
your own environment<font color="#CCCCCC"> will</font><font color="#E5E5E5"> open source</font>

435
00:16:25,060 --> 00:16:27,579
the code for this<font color="#E5E5E5"> at the end of the day</font>

436
00:16:26,260 --> 00:16:30,040
but<font color="#E5E5E5"> you can see we</font><font color="#CCCCCC"> really collect quite</font>

437
00:16:27,580 --> 00:16:37,540
<font color="#E5E5E5">a lot of information</font><font color="#CCCCCC"> about each</font><font color="#E5E5E5"> runtime</font>

438
00:16:30,040 --> 00:16:39,010
<font color="#CCCCCC">and we log and store that so from this</font>

439
00:16:37,540 --> 00:16:40,540
profile we know that lambdas container

440
00:16:39,010 --> 00:16:42,730
structure looks a lot<font color="#E5E5E5"> like this</font>

441
00:16:40,540 --> 00:16:46,180
it's got<font color="#E5E5E5"> API gateway which has an</font><font color="#CCCCCC"> event</font>

442
00:16:42,730 --> 00:16:47,800
trigger<font color="#CCCCCC"> to a copy of the code that gets</font>

443
00:16:46,180 --> 00:16:50,050
<font color="#CCCCCC">loaded</font><font color="#E5E5E5"> into the container on that cold</font>

444
00:16:47,800 --> 00:16:51,609
start from the bootstrap<font color="#E5E5E5"> and from there</font>

445
00:16:50,050 --> 00:16:53,469
<font color="#E5E5E5">pretty</font><font color="#CCCCCC"> much everything in</font><font color="#E5E5E5"> the file</font>

446
00:16:51,610 --> 00:16:56,290
systems read-only except for slash temp

447
00:16:53,470 --> 00:16:57,430
<font color="#CCCCCC">which is mapped</font><font color="#E5E5E5"> to a ram disk and slash</font>

448
00:16:56,290 --> 00:16:58,810
temp is going to be different size

449
00:16:57,430 --> 00:17:00,489
depending<font color="#E5E5E5"> on how much memory you've</font>

450
00:16:58,810 --> 00:17:02,770
<font color="#CCCCCC">allocated to</font><font color="#E5E5E5"> your lambda function in</font>

451
00:17:00,490 --> 00:17:04,839
addition to that you have<font color="#CCCCCC"> a few</font>

452
00:17:02,770 --> 00:17:06,910
credentials you have<font color="#E5E5E5"> basically session</font>

453
00:17:04,839 --> 00:17:11,290
<font color="#CCCCCC">token' style credentials for the I am</font>

454
00:17:06,910 --> 00:17:12,730
nothing super groundbreaking there so

455
00:17:11,290 --> 00:17:15,190
what's<font color="#E5E5E5"> your strategy given these limits</font>

456
00:17:12,730 --> 00:17:18,700
you have<font color="#E5E5E5"> very very small attack surface</font>

457
00:17:15,190 --> 00:17:20,020
right so<font color="#E5E5E5"> as a malware author a pen</font>

458
00:17:18,700 --> 00:17:22,360
tester you can kind of be laser-focused

459
00:17:20,020 --> 00:17:23,379
<font color="#CCCCCC">on</font><font color="#E5E5E5"> how you're going</font><font color="#CCCCCC"> to attack this</font>

460
00:17:22,359 --> 00:17:25,449
environment cuz you can really only

461
00:17:23,380 --> 00:17:26,920
<font color="#E5E5E5">attack it one way right</font>

462
00:17:25,450 --> 00:17:28,360
your initial payload probably needs to

463
00:17:26,920 --> 00:17:30,220
<font color="#E5E5E5">be as small</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> because it needs</font>

464
00:17:28,359 --> 00:17:31,780
to pass<font color="#E5E5E5"> API gateway you need a</font>

465
00:17:30,220 --> 00:17:34,000
persistent slash temp which could be

466
00:17:31,780 --> 00:17:36,550
<font color="#CCCCCC">very small</font><font color="#E5E5E5"> and then you need to assess</font>

467
00:17:34,000 --> 00:17:38,830
lateral movement very fast and<font color="#E5E5E5"> exfil</font>

468
00:17:36,550 --> 00:17:41,590
your results to somewhere else<font color="#CCCCCC"> in other</font>

469
00:17:38,830 --> 00:17:45,189
words your attack needs to be bigger<font color="#CCCCCC"> on</font>

470
00:17:41,590 --> 00:17:46,860
the inside<font color="#E5E5E5"> there's some Doctor Who fans</font>

471
00:17:45,190 --> 00:17:50,110
in the audience

472
00:17:46,860 --> 00:17:51,760
<font color="#E5E5E5">Python minification</font><font color="#CCCCCC"> helps with this so</font>

473
00:17:50,110 --> 00:17:54,610
there's a great project called<font color="#CCCCCC"> pieman</font>

474
00:17:51,760 --> 00:17:55,990
<font color="#E5E5E5">afire</font><font color="#CCCCCC"> that you can use to</font><font color="#E5E5E5"> take any set</font>

475
00:17:54,610 --> 00:17:59,020
<font color="#CCCCCC">of Python code and I like to write most</font>

476
00:17:55,990 --> 00:18:01,300
<font color="#E5E5E5">things in Python and you can shrink it</font>

477
00:17:59,020 --> 00:18:04,870
<font color="#E5E5E5">down and even compress it so that it's</font>

478
00:18:01,300 --> 00:18:07,270
this<font color="#E5E5E5"> really tiny paste able blob so I</font>

479
00:18:04,870 --> 00:18:09,399
wrote some reconnaissance code that I

480
00:18:07,270 --> 00:18:11,350
<font color="#E5E5E5">used in some some of the research that I</font>

481
00:18:09,400 --> 00:18:13,030
did which<font color="#CCCCCC"> is linked to in our</font><font color="#E5E5E5"> white</font>

482
00:18:11,350 --> 00:18:15,370
paper<font color="#E5E5E5"> where we just try and figure out</font>

483
00:18:13,030 --> 00:18:17,230
what can<font color="#E5E5E5"> we do in the I am role that</font>

484
00:18:15,370 --> 00:18:20,050
we're in can we create<font color="#E5E5E5"> cloud watch log</font>

485
00:18:17,230 --> 00:18:22,030
groups can we attach<font color="#CCCCCC"> en eyes</font><font color="#E5E5E5"> can we do a</font>

486
00:18:20,050 --> 00:18:23,260
B and<font color="#E5E5E5"> C in the Amazon environment so</font>

487
00:18:22,030 --> 00:18:26,020
really it's kind of like brooding out

488
00:18:23,260 --> 00:18:28,240
permissions by simply attempting<font color="#CCCCCC"> boedo</font>

489
00:18:26,020 --> 00:18:30,490
calls<font color="#E5E5E5"> and then returning exceptions if</font>

490
00:18:28,240 --> 00:18:32,320
we can't<font color="#E5E5E5"> so what that looks</font><font color="#CCCCCC"> like if you</font>

491
00:18:30,490 --> 00:18:35,950
<font color="#CCCCCC">take</font><font color="#E5E5E5"> a bunch of them and you minify them</font>

492
00:18:32,320 --> 00:18:37,750
is this so<font color="#E5E5E5"> there's another great script</font>

493
00:18:35,950 --> 00:18:39,700
called one-liner<font color="#CCCCCC"> Iser that will turn</font>

494
00:18:37,750 --> 00:18:42,730
anything into Python one-liner which is

495
00:18:39,700 --> 00:18:44,530
also super<font color="#E5E5E5"> great for making malware for</font>

496
00:18:42,730 --> 00:18:46,240
<font color="#CCCCCC">serverless</font><font color="#E5E5E5"> environments because you can</font>

497
00:18:44,530 --> 00:18:49,090
<font color="#CCCCCC">just squash</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> down in the most complex</font>

498
00:18:46,240 --> 00:18:53,490
set of Python lambdas that you've<font color="#E5E5E5"> ever</font>

499
00:18:49,090 --> 00:18:57,129
<font color="#CCCCCC">seen so we</font><font color="#E5E5E5"> decided to be a great idea</font><font color="#CCCCCC"> to</font>

500
00:18:53,490 --> 00:18:59,080
<font color="#CCCCCC">take</font><font color="#E5E5E5"> these techniques and then create</font>

501
00:18:57,130 --> 00:19:00,850
for you some demo apps that have some

502
00:18:59,080 --> 00:19:03,820
vulnerabilities in them so you can

503
00:19:00,850 --> 00:19:06,429
<font color="#E5E5E5">really see what an attack like this</font>

504
00:19:03,820 --> 00:19:09,399
looks<font color="#E5E5E5"> like from both the ir perspective</font>

505
00:19:06,430 --> 00:19:12,010
and the<font color="#E5E5E5"> red team perspective so</font><font color="#CCCCCC"> i built</font>

506
00:19:09,400 --> 00:19:14,440
<font color="#E5E5E5">a slack bot</font><font color="#CCCCCC"> built-in service</font><font color="#E5E5E5"> framework</font>

507
00:19:12,010 --> 00:19:16,720
<font color="#E5E5E5">for lambda it takes a github webhook</font><font color="#CCCCCC"> on</font>

508
00:19:14,440 --> 00:19:19,270
<font color="#E5E5E5">commit it notifies a slack channel that</font>

509
00:19:16,720 --> 00:19:20,290
there was a commit<font color="#E5E5E5"> and it has a code</font>

510
00:19:19,270 --> 00:19:22,720
injection<font color="#E5E5E5"> in it</font>

511
00:19:20,290 --> 00:19:23,980
through a basic<font color="#E5E5E5"> string escape so the</font>

512
00:19:22,720 --> 00:19:26,170
normal behavior of<font color="#CCCCCC"> it looks something</font>

513
00:19:23,980 --> 00:19:27,970
like this<font color="#E5E5E5"> the bad behavior looks</font>

514
00:19:26,170 --> 00:19:31,090
something like this<font color="#E5E5E5"> and I have a little</font>

515
00:19:27,970 --> 00:19:33,160
video demo<font color="#CCCCCC"> I'm not gonna do it live</font>

516
00:19:31,090 --> 00:19:35,110
because<font color="#E5E5E5"> you would</font><font color="#CCCCCC"> be waiting</font><font color="#E5E5E5"> forever for</font>

517
00:19:33,160 --> 00:19:37,120
me to paste all the<font color="#E5E5E5"> tokens I need out of</font>

518
00:19:35,110 --> 00:19:38,530
slack<font color="#E5E5E5"> but I promise I recorded this</font>

519
00:19:37,120 --> 00:19:42,219
right<font color="#E5E5E5"> before the stock so it totally</font>

520
00:19:38,530 --> 00:19:43,389
<font color="#E5E5E5">works right</font><font color="#CCCCCC"> now so you can</font><font color="#E5E5E5"> escalate out</font>

521
00:19:42,220 --> 00:19:44,740
of<font color="#E5E5E5"> that and you'll see</font><font color="#CCCCCC"> that in the video</font>

522
00:19:43,390 --> 00:19:47,650
and I'll kind of speak<font color="#CCCCCC"> to it here in</font>

523
00:19:44,740 --> 00:19:50,440
<font color="#CCCCCC">just a second so the attack surface</font>

524
00:19:47,650 --> 00:19:52,750
<font color="#E5E5E5">though notably becomes very large with</font>

525
00:19:50,440 --> 00:19:56,200
bad I<font color="#E5E5E5"> am permissions and the issue is</font>

526
00:19:52,750 --> 00:19:57,640
here in<font color="#E5E5E5"> lambda</font><font color="#CCCCCC"> are not lambdas defaults</font>

527
00:19:56,200 --> 00:19:59,710
because lambdas defaults are very good

528
00:19:57,640 --> 00:20:01,810
the issues here are the defaults that

529
00:19:59,710 --> 00:20:03,970
<font color="#CCCCCC">are being introduced by popular service</font>

530
00:20:01,810 --> 00:20:05,530
frameworks<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> these frameworks are</font>

531
00:20:03,970 --> 00:20:07,780
brand new and<font color="#CCCCCC"> they're just coming</font><font color="#E5E5E5"> to</font>

532
00:20:05,530 --> 00:20:09,790
maturity<font color="#E5E5E5"> and they tend to blow the</font><font color="#CCCCCC"> IM</font>

533
00:20:07,780 --> 00:20:11,649
permissions<font color="#E5E5E5"> wide open to start and</font>

534
00:20:09,790 --> 00:20:13,300
there's a footnote somewhere in a guide

535
00:20:11,650 --> 00:20:15,580
that says go back<font color="#E5E5E5"> and harden this</font>

536
00:20:13,300 --> 00:20:17,649
yourself because we don't do<font color="#CCCCCC"> I am</font>

537
00:20:15,580 --> 00:20:20,080
permissions<font color="#E5E5E5"> super well yet</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

538
00:20:17,650 --> 00:20:22,630
snippet<font color="#E5E5E5"> out of the default</font><font color="#CCCCCC"> i.m policy</font>

539
00:20:20,080 --> 00:20:24,790
for Zappa<font color="#CCCCCC"> you see it has a lot of star</font>

540
00:20:22,630 --> 00:20:27,190
stars in there which if you do<font color="#E5E5E5"> AWS stuff</font>

541
00:20:24,790 --> 00:20:30,010
you know is bad<font color="#E5E5E5"> because you can interact</font>

542
00:20:27,190 --> 00:20:32,980
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a ton of resources so the</font><font color="#E5E5E5"> IM</font>

543
00:20:30,010 --> 00:20:34,900
struggle here is very very<font color="#CCCCCC"> real my boss</font>

544
00:20:32,980 --> 00:20:39,610
likes to say<font color="#CCCCCC"> i am is the killer feature</font>

545
00:20:34,900 --> 00:20:41,650
<font color="#E5E5E5">and the killer feature so detection can</font>

546
00:20:39,610 --> 00:20:43,600
also be hard here<font color="#E5E5E5"> so we have a lot of</font>

547
00:20:41,650 --> 00:20:45,490
mature stuff<font color="#E5E5E5"> for detecting attacks like</font>

548
00:20:43,600 --> 00:20:47,139
<font color="#E5E5E5">this on</font><font color="#CCCCCC"> prem</font><font color="#E5E5E5"> we don't necessarily</font><font color="#CCCCCC"> have</font>

549
00:20:45,490 --> 00:20:49,150
as many<font color="#E5E5E5"> of the same kind of facilities</font>

550
00:20:47,140 --> 00:20:51,370
in the cloud with regard to service you

551
00:20:49,150 --> 00:20:53,380
really only<font color="#CCCCCC"> have cloud watch logs</font><font color="#E5E5E5"> so one</font>

552
00:20:51,370 --> 00:20:55,449
of<font color="#E5E5E5"> the pieces of</font><font color="#CCCCCC"> advice that the AWS</font>

553
00:20:53,380 --> 00:20:57,610
security team likes to give out is don't

554
00:20:55,450 --> 00:20:58,990
<font color="#E5E5E5">leave your DeLorean in the garage if you</font>

555
00:20:57,610 --> 00:21:00,939
want to go back in<font color="#E5E5E5"> time so if</font><font color="#CCCCCC"> you're</font>

556
00:20:58,990 --> 00:21:02,320
authoring these apps build mature<font color="#CCCCCC"> log</font>

557
00:21:00,940 --> 00:21:04,060
pipelines into<font color="#E5E5E5"> them because that's</font>

558
00:21:02,320 --> 00:21:06,820
<font color="#CCCCCC">really the only way</font><font color="#E5E5E5"> you're going to get</font>

559
00:21:04,060 --> 00:21:10,629
anomaly detection and cloud watch logs

560
00:21:06,820 --> 00:21:13,060
in the case of AWS<font color="#E5E5E5"> is that so</font><font color="#CCCCCC"> I have</font>

561
00:21:10,630 --> 00:21:17,710
this bad slack bot demo which I'll<font color="#CCCCCC"> just</font>

562
00:21:13,060 --> 00:21:20,710
go ahead and kick off here and so we're

563
00:21:17,710 --> 00:21:24,520
<font color="#CCCCCC">just</font><font color="#E5E5E5"> having a casual chat here in the</font>

564
00:21:20,710 --> 00:21:26,710
threat response<font color="#E5E5E5"> slack</font><font color="#CCCCCC"> channel and</font><font color="#E5E5E5"> I'm</font>

565
00:21:24,520 --> 00:21:28,420
<font color="#E5E5E5">working on a Austin scible feature for a</font>

566
00:21:26,710 --> 00:21:31,360
feature<font color="#CCCCCC"> that I call bad repo that</font>

567
00:21:28,420 --> 00:21:32,740
creates this initial web hook out<font color="#E5E5E5"> that</font>

568
00:21:31,360 --> 00:21:33,510
notifies slack that there's been a

569
00:21:32,740 --> 00:21:36,870
commit

570
00:21:33,510 --> 00:21:38,700
and people are lazy<font color="#CCCCCC"> so you can ask it</font>

571
00:21:36,870 --> 00:21:40,409
for<font color="#CCCCCC"> changelog so</font><font color="#E5E5E5"> you can ask it for</font>

572
00:21:38,700 --> 00:21:41,669
readme files and it'll just<font color="#E5E5E5"> return those</font>

573
00:21:40,410 --> 00:21:43,260
to<font color="#CCCCCC"> the slack</font><font color="#E5E5E5"> channels so you don't have</font>

574
00:21:41,669 --> 00:21:45,960
to go to github to look at those and so

575
00:21:43,260 --> 00:21:48,090
there's a code injection<font color="#E5E5E5"> here and where</font>

576
00:21:45,960 --> 00:21:50,549
you put the file name<font color="#CCCCCC"> where if you just</font>

577
00:21:48,090 --> 00:21:52,260
<font color="#CCCCCC">take a semicolon in there</font><font color="#E5E5E5"> because of a</font>

578
00:21:50,549 --> 00:21:54,240
string concatenation vulnerability you

579
00:21:52,260 --> 00:21:55,980
<font color="#CCCCCC">can get arbitrary code injection into</font>

580
00:21:54,240 --> 00:21:58,950
<font color="#E5E5E5">this container and it will</font><font color="#CCCCCC"> return you</font>

581
00:21:55,980 --> 00:22:00,990
<font color="#E5E5E5">the output so here it is returning the</font>

582
00:21:58,950 --> 00:22:03,900
actual<font color="#E5E5E5"> change log which I put in Star</font>

583
00:22:00,990 --> 00:22:06,750
Wars<font color="#CCCCCC"> ASCII content</font><font color="#E5E5E5"> you know for</font>

584
00:22:03,900 --> 00:22:08,070
amusement<font color="#CCCCCC"> and that's gonna go round</font><font color="#E5E5E5"> and</font>

585
00:22:06,750 --> 00:22:10,140
round<font color="#E5E5E5"> in there for a little</font><font color="#CCCCCC"> while</font>

586
00:22:08,070 --> 00:22:12,240
I'm just validating here that the change

587
00:22:10,140 --> 00:22:15,690
<font color="#CCCCCC">log is actually as it's</font><font color="#E5E5E5"> supposed to be</font>

588
00:22:12,240 --> 00:22:19,020
so this<font color="#E5E5E5"> is normal behavior for</font><font color="#CCCCCC"> the app</font>

589
00:22:15,690 --> 00:22:21,299
there's the Star Wars<font color="#CCCCCC"> ASCII text</font>

590
00:22:19,020 --> 00:22:24,530
there's the vulnerability itself<font color="#E5E5E5"> it's an</font>

591
00:22:21,299 --> 00:22:27,120
OSP<font color="#CCCCCC"> open instead</font><font color="#E5E5E5"> of a</font><font color="#CCCCCC"> python file read</font>

592
00:22:24,530 --> 00:22:29,910
which we all know<font color="#E5E5E5"> is bad but somehow</font>

593
00:22:27,120 --> 00:22:32,219
they still<font color="#E5E5E5"> make it in sometimes code</font>

594
00:22:29,910 --> 00:22:33,179
reviews are important so there it is<font color="#CCCCCC"> a</font>

595
00:22:32,220 --> 00:22:36,600
nice and<font color="#CCCCCC"> large</font>

596
00:22:33,179 --> 00:22:38,100
<font color="#E5E5E5">awesomesauce string escape so now we</font>

597
00:22:36,600 --> 00:22:40,080
come<font color="#E5E5E5"> in here and we play replace our</font>

598
00:22:38,100 --> 00:22:44,250
change log with just an LS to make sure

599
00:22:40,080 --> 00:22:48,240
everything's working<font color="#E5E5E5"> great</font><font color="#CCCCCC"> I get back</font>

600
00:22:44,250 --> 00:22:50,850
<font color="#E5E5E5">like LS output so I can do a more cool</font>

601
00:22:48,240 --> 00:22:53,010
stuff<font color="#CCCCCC"> now</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> you can do</font><font color="#E5E5E5"> ID</font><font color="#CCCCCC"> am i</font>

602
00:22:50,850 --> 00:22:55,770
running<font color="#CCCCCC"> as root no</font><font color="#E5E5E5"> I'm running in lambda</font>

603
00:22:53,010 --> 00:23:00,059
<font color="#CCCCCC">which runs this sbx user</font><font color="#E5E5E5"> super</font><font color="#CCCCCC"> cool</font><font color="#E5E5E5"> it's</font>

604
00:22:55,770 --> 00:23:02,160
<font color="#CCCCCC">great so now I'm gonna</font><font color="#E5E5E5"> get the</font>

605
00:23:00,059 --> 00:23:04,559
<font color="#E5E5E5">environment back which contains all the</font>

606
00:23:02,160 --> 00:23:06,630
juicy stuff<font color="#CCCCCC"> in terms</font><font color="#E5E5E5"> of session token'</font>

607
00:23:04,559 --> 00:23:10,129
security tokens and<font color="#E5E5E5"> stuff before</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> get</font>

608
00:23:06,630 --> 00:23:10,130
super<font color="#CCCCCC"> excited these</font><font color="#E5E5E5"> are already dead</font>

609
00:23:10,340 --> 00:23:14,730
<font color="#CCCCCC">here they are in my boat Oh Pro file</font><font color="#E5E5E5"> and</font>

610
00:23:12,840 --> 00:23:16,649
so now<font color="#CCCCCC"> that I have it in my boat Oh</font>

611
00:23:14,730 --> 00:23:21,090
profile I'm interested<font color="#E5E5E5"> you know can I do</font>

612
00:23:16,650 --> 00:23:23,610
s3 stuff<font color="#E5E5E5"> not with this profile so</font>

613
00:23:21,090 --> 00:23:26,850
because<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the default Amazon</font>

614
00:23:23,610 --> 00:23:29,850
lambda sandbox<font color="#E5E5E5"> so Who am I get</font><font color="#CCCCCC"> caller</font>

615
00:23:26,850 --> 00:23:32,850
identity<font color="#E5E5E5"> and you can see it returns that</font>

616
00:23:29,850 --> 00:23:36,209
it's the poor<font color="#E5E5E5"> webhook lambda</font><font color="#CCCCCC"> role</font><font color="#E5E5E5"> so</font>

617
00:23:32,850 --> 00:23:37,379
there's a great script<font color="#E5E5E5"> in the AWS poem</font>

618
00:23:36,210 --> 00:23:39,390
repository<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we'll just go through</font>

619
00:23:37,380 --> 00:23:41,429
<font color="#CCCCCC">and it will</font><font color="#E5E5E5"> brood out what you can do in</font>

620
00:23:39,390 --> 00:23:43,710
Amazon using<font color="#E5E5E5"> describe statements and</font>

621
00:23:41,429 --> 00:23:45,179
this is like one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the really</font><font color="#CCCCCC"> the only</font>

622
00:23:43,710 --> 00:23:47,210
way is to<font color="#E5E5E5"> figure out what permissions</font>

623
00:23:45,179 --> 00:23:49,520
<font color="#E5E5E5">you have from the outside as an</font>

624
00:23:47,210 --> 00:23:51,409
the downside<font color="#CCCCCC"> is</font><font color="#E5E5E5"> this super super noisy</font>

625
00:23:49,520 --> 00:23:54,350
<font color="#CCCCCC">right and it takes kind of a long time</font>

626
00:23:51,409 --> 00:23:56,620
to<font color="#CCCCCC"> run but I managed to make it</font><font color="#E5E5E5"> through</font>

627
00:23:54,350 --> 00:23:58,850
a whole<font color="#E5E5E5"> run with this</font><font color="#CCCCCC"> session token'</font>

628
00:23:56,620 --> 00:24:00,408
<font color="#E5E5E5">again this particular role that I'm</font>

629
00:23:58,850 --> 00:24:04,100
<font color="#CCCCCC">working with a super lockdown but</font><font color="#E5E5E5"> this</font>

630
00:24:00,409 --> 00:24:05,330
is where<font color="#CCCCCC"> all the goodies would be and</font><font color="#E5E5E5"> so</font>

631
00:24:04,100 --> 00:24:06,678
<font color="#CCCCCC">the last</font><font color="#E5E5E5"> thing I'm going to do</font><font color="#CCCCCC"> before I</font>

632
00:24:05,330 --> 00:24:09,350
go and try something<font color="#E5E5E5"> else is I'm gonna</font>

633
00:24:06,679 --> 00:24:11,899
run<font color="#E5E5E5"> get session token' to see if I can</font>

634
00:24:09,350 --> 00:24:13,279
shred more tokens<font color="#E5E5E5"> so I can keep not</font>

635
00:24:11,899 --> 00:24:16,639
working in<font color="#E5E5E5"> lambda for longer and the</font>

636
00:24:13,279 --> 00:24:19,130
answer is<font color="#E5E5E5"> no so now I'm gonna</font><font color="#CCCCCC"> try</font>

637
00:24:16,640 --> 00:24:20,720
running<font color="#CCCCCC"> an another arbitrary Python</font>

638
00:24:19,130 --> 00:24:23,570
command because<font color="#E5E5E5"> if I have one Python</font>

639
00:24:20,720 --> 00:24:26,330
process<font color="#CCCCCC"> why not have two and apparently</font>

640
00:24:23,570 --> 00:24:30,230
I can so that's<font color="#E5E5E5"> also awesome and</font>

641
00:24:26,330 --> 00:24:33,918
interesting<font color="#CCCCCC"> and so we know from</font><font color="#E5E5E5"> our</font>

642
00:24:30,230 --> 00:24:35,779
profile<font color="#E5E5E5"> output that lambda has boto by</font>

643
00:24:33,919 --> 00:24:37,760
default so<font color="#E5E5E5"> we can really do any</font>

644
00:24:35,779 --> 00:24:40,130
exploration of the AWS account that we

645
00:24:37,760 --> 00:24:43,640
want using boto calls and<font color="#E5E5E5"> this is where</font>

646
00:24:40,130 --> 00:24:46,070
that one line<font color="#CCCCCC"> Python stuff really comes</font>

647
00:24:43,640 --> 00:24:49,549
<font color="#E5E5E5">into</font><font color="#CCCCCC"> play you see here I ran</font><font color="#E5E5E5"> get caller</font>

648
00:24:46,070 --> 00:24:52,100
identity<font color="#CCCCCC"> inside the sandbox using only</font><font color="#E5E5E5"> a</font>

649
00:24:49,549 --> 00:24:55,549
<font color="#CCCCCC">one-line boto call</font><font color="#E5E5E5"> so you can explore</font>

650
00:24:52,100 --> 00:25:01,250
<font color="#E5E5E5">inside and outside the lambda sandbox</font>

651
00:24:55,549 --> 00:25:03,020
<font color="#E5E5E5">using these one-liners so what does that</font>

652
00:25:01,250 --> 00:25:05,630
<font color="#E5E5E5">look like from an</font><font color="#CCCCCC"> ir defender</font>

653
00:25:03,020 --> 00:25:07,580
perspective<font color="#CCCCCC"> it looks really really weird</font>

654
00:25:05,630 --> 00:25:09,380
right so if we look<font color="#CCCCCC"> at the cloud watch</font>

655
00:25:07,580 --> 00:25:12,889
logs there's some things in here that

656
00:25:09,380 --> 00:25:15,289
<font color="#CCCCCC">you will</font><font color="#E5E5E5"> see that are are totally stand</font>

657
00:25:12,890 --> 00:25:17,270
out as far<font color="#E5E5E5"> as this is non normal</font>

658
00:25:15,289 --> 00:25:19,970
behavior it's about as non normal as

659
00:25:17,270 --> 00:25:22,490
this right<font color="#E5E5E5"> we have anomalous execution</font>

660
00:25:19,970 --> 00:25:25,880
times high error rates<font color="#E5E5E5"> cloud trail high</font>

661
00:25:22,490 --> 00:25:27,740
denials for<font color="#E5E5E5"> the lambda role so it's as</font>

662
00:25:25,880 --> 00:25:32,299
detectable as this moon balloon from

663
00:25:27,740 --> 00:25:33,649
last year<font color="#CCCCCC"> cloud trail also outputs</font>

664
00:25:32,299 --> 00:25:36,168
denials a lot of people<font color="#E5E5E5"> don't actually</font>

665
00:25:33,649 --> 00:25:38,479
<font color="#E5E5E5">know this about cloud trail that it logs</font>

666
00:25:36,169 --> 00:25:40,340
successes and denies and you can

667
00:25:38,480 --> 00:25:41,990
<font color="#CCCCCC">actually consume</font><font color="#E5E5E5"> those denies in a cloud</font>

668
00:25:40,340 --> 00:25:44,360
watch event pipeline and you<font color="#CCCCCC"> can</font>

669
00:25:41,990 --> 00:25:46,640
programmatically take access on those so

670
00:25:44,360 --> 00:25:48,678
kind<font color="#E5E5E5"> of the TLDR here is that it's only</font>

671
00:25:46,640 --> 00:25:52,970
really as bad<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the IAM policy that's</font>

672
00:25:48,679 --> 00:25:55,549
<font color="#E5E5E5">attached</font><font color="#CCCCCC"> to the function</font><font color="#E5E5E5"> and your you</font>

673
00:25:52,970 --> 00:25:57,799
can<font color="#E5E5E5"> auto IR this so your</font><font color="#CCCCCC"> mean time</font><font color="#E5E5E5"> to</font>

674
00:25:55,549 --> 00:26:00,260
respond<font color="#E5E5E5"> is about</font><font color="#CCCCCC"> 7 to 10 minutes because</font>

675
00:25:57,799 --> 00:26:01,668
<font color="#E5E5E5">you can only IR it when they</font><font color="#CCCCCC"> Cloud trail</font>

676
00:26:00,260 --> 00:26:04,070
log rolls over

677
00:26:01,669 --> 00:26:06,549
<font color="#CCCCCC">- cloud watch events</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> 7 to 10 minutes</font>

678
00:26:04,070 --> 00:26:09,620
is still<font color="#E5E5E5"> probably better than a human</font>

679
00:26:06,549 --> 00:26:13,490
so now<font color="#E5E5E5"> Graham's gonna dive into Azure</font>

680
00:26:09,620 --> 00:26:15,768
functions<font color="#E5E5E5"> so when Andrew and</font><font color="#CCCCCC"> I started</font>

681
00:26:13,490 --> 00:26:17,779
looking<font color="#CCCCCC"> into these we are</font><font color="#E5E5E5"> both very</font><font color="#CCCCCC"> much</font>

682
00:26:15,769 --> 00:26:20,539
familiar<font color="#E5E5E5"> with the AWS ecosystem and not</font>

683
00:26:17,779 --> 00:26:22,279
as much<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the Azure ecosystem and</font><font color="#E5E5E5"> as</font>

684
00:26:20,539 --> 00:26:24,110
that<font color="#E5E5E5"> may be the case for</font><font color="#CCCCCC"> many of you a</font>

685
00:26:22,279 --> 00:26:25,399
lot of<font color="#E5E5E5"> what</font><font color="#CCCCCC"> we wanted to</font><font color="#E5E5E5"> dig into here</font>

686
00:26:24,110 --> 00:26:27,379
was the differences in the<font color="#E5E5E5"> Azure</font>

687
00:26:25,399 --> 00:26:30,830
ecosystem and how<font color="#E5E5E5"> the permission models</font>

688
00:26:27,380 --> 00:26:33,590
are<font color="#CCCCCC"> different so for Azure</font><font color="#E5E5E5"> shockingly it</font>

689
00:26:30,830 --> 00:26:34,789
<font color="#E5E5E5">runs on</font><font color="#CCCCCC"> Windows and</font><font color="#E5E5E5"> then the big</font>

690
00:26:33,590 --> 00:26:37,070
difference is that<font color="#E5E5E5"> it has sets of</font>

691
00:26:34,789 --> 00:26:38,960
functions<font color="#E5E5E5"> group within apps and so</font>

692
00:26:37,070 --> 00:26:40,850
unlike<font color="#E5E5E5"> lambda where a function is</font>

693
00:26:38,960 --> 00:26:42,200
<font color="#CCCCCC">basically just</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know a little</font>

694
00:26:40,850 --> 00:26:45,129
container<font color="#E5E5E5"> that gets spun up and then</font>

695
00:26:42,200 --> 00:26:48,139
spun down<font color="#E5E5E5"> an app is basically a whole</font>

696
00:26:45,129 --> 00:26:50,299
deployed Windows server somewhere that's

697
00:26:48,139 --> 00:26:51,668
<font color="#E5E5E5">going to be running iis</font><font color="#CCCCCC"> and has all your</font>

698
00:26:50,299 --> 00:26:54,769
functions sitting on the<font color="#CCCCCC"> file system</font>

699
00:26:51,669 --> 00:26:56,809
<font color="#E5E5E5">this file system</font><font color="#CCCCCC"> is largely writable</font><font color="#E5E5E5"> it</font>

700
00:26:54,769 --> 00:26:59,450
does have<font color="#CCCCCC"> Internet egress it doesn't</font>

701
00:26:56,809 --> 00:27:01,549
have a root user and<font color="#E5E5E5"> then like I said</font>

702
00:26:59,450 --> 00:27:03,980
<font color="#E5E5E5">earlier all</font><font color="#CCCCCC"> the functions within</font><font color="#E5E5E5"> the app</font>

703
00:27:01,549 --> 00:27:06,918
do share the<font color="#E5E5E5"> same system and the same</font>

704
00:27:03,980 --> 00:27:09,169
permissions<font color="#E5E5E5"> the app root is on the D</font>

705
00:27:06,919 --> 00:27:11,210
Drive<font color="#E5E5E5"> and D home</font><font color="#CCCCCC"> the C Drive</font><font color="#E5E5E5"> where all</font>

706
00:27:09,169 --> 00:27:14,240
the system<font color="#E5E5E5"> components live is immutable</font>

707
00:27:11,210 --> 00:27:16,789
<font color="#E5E5E5">but the D is writable and then the code</font>

708
00:27:14,240 --> 00:27:19,100
is injected into the<font color="#E5E5E5"> site dub-dub-dub</font>

709
00:27:16,789 --> 00:27:20,570
<font color="#E5E5E5">root and then the function name and we</font>

710
00:27:19,100 --> 00:27:22,009
also<font color="#E5E5E5"> have some secrets stored on the</font>

711
00:27:20,570 --> 00:27:25,000
drive that<font color="#E5E5E5"> we'll get to later and they</font>

712
00:27:22,009 --> 00:27:26,840
are encrypted but with some shared keys

713
00:27:25,000 --> 00:27:28,519
<font color="#E5E5E5">so the reason that you would group</font>

714
00:27:26,840 --> 00:27:30,678
functions within an<font color="#E5E5E5"> app before I go into</font>

715
00:27:28,519 --> 00:27:32,299
<font color="#E5E5E5">the problems with that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that in terms</font>

716
00:27:30,679 --> 00:27:35,899
of a metrics or resource management

717
00:27:32,299 --> 00:27:39,500
perspective<font color="#E5E5E5"> apps and APIs is one group</font>

718
00:27:35,899 --> 00:27:41,989
of resources<font color="#E5E5E5"> so if you want to manage a</font>

719
00:27:39,500 --> 00:27:43,190
set of<font color="#E5E5E5"> things as one group a lot of</font>

720
00:27:41,990 --> 00:27:46,309
<font color="#E5E5E5">times it can make sense from</font><font color="#CCCCCC"> that</font>

721
00:27:43,190 --> 00:27:47,299
perspective<font color="#CCCCCC"> to put it in an app so we</font>

722
00:27:46,309 --> 00:27:49,340
wanted to<font color="#E5E5E5"> know</font><font color="#CCCCCC"> the same general</font>

723
00:27:47,299 --> 00:27:52,850
questions<font color="#E5E5E5"> as lambda but instead of</font>

724
00:27:49,340 --> 00:27:55,129
pivots<font color="#E5E5E5"> through I am we wanted to know</font>

725
00:27:52,850 --> 00:27:57,949
what one function can do to another that

726
00:27:55,129 --> 00:27:59,418
<font color="#CCCCCC">are within the same app and so before</font><font color="#E5E5E5"> we</font>

727
00:27:57,950 --> 00:28:02,840
<font color="#E5E5E5">dive into that just a</font><font color="#CCCCCC"> couple</font><font color="#E5E5E5"> other</font>

728
00:27:59,419 --> 00:28:04,940
<font color="#E5E5E5">tidbits we didn't have</font><font color="#CCCCCC"> WMI access and if</font>

729
00:28:02,840 --> 00:28:06,769
you call get event log list<font color="#CCCCCC"> you can see</font>

730
00:28:04,940 --> 00:28:08,090
the list<font color="#E5E5E5"> of logs but it's very</font>

731
00:28:06,769 --> 00:28:09,919
<font color="#E5E5E5">tantalizing because you can't actually</font>

732
00:28:08,090 --> 00:28:11,059
<font color="#E5E5E5">get any of the events so it is</font>

733
00:28:09,919 --> 00:28:14,279
moderately locked<font color="#E5E5E5"> down from these</font>

734
00:28:11,059 --> 00:28:16,408
functions for<font color="#E5E5E5"> digging around</font><font color="#CCCCCC"> we start</font>

735
00:28:14,279 --> 00:28:17,909
the same profiler system but many of the

736
00:28:16,409 --> 00:28:19,580
same profiler components didn't work

737
00:28:17,909 --> 00:28:21,570
because<font color="#E5E5E5"> they were</font><font color="#CCCCCC"> POSIX specific</font>

738
00:28:19,580 --> 00:28:23,039
fortunately<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's a less</font>

739
00:28:21,570 --> 00:28:25,439
ephemeral system there's actually just

740
00:28:23,039 --> 00:28:27,059
<font color="#E5E5E5">this Windows machine running it means</font>

741
00:28:25,440 --> 00:28:28,710
that it's easier<font color="#E5E5E5"> to work with</font><font color="#CCCCCC"> for</font>

742
00:28:27,059 --> 00:28:31,019
digging around<font color="#E5E5E5"> you don't have to go in</font>

743
00:28:28,710 --> 00:28:33,899
and script all these Python shell calls

744
00:28:31,019 --> 00:28:36,179
<font color="#CCCCCC">there's a project kudo UI</font><font color="#E5E5E5"> that actually</font>

745
00:28:33,899 --> 00:28:37,408
gives you command access<font color="#CCCCCC"> you can also</font>

746
00:28:36,179 --> 00:28:39,629
use<font color="#E5E5E5"> powershell</font><font color="#CCCCCC"> for anyone who is a</font>

747
00:28:37,409 --> 00:28:40,619
<font color="#E5E5E5">PowerShell fan and you can just wander</font>

748
00:28:39,629 --> 00:28:42,178
<font color="#E5E5E5">around the system</font>

749
00:28:40,619 --> 00:28:43,978
poke around see<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you can write to</font>

750
00:28:42,179 --> 00:28:45,659
see what you can't and it did make

751
00:28:43,979 --> 00:28:50,759
investigating around<font color="#E5E5E5"> initially much</font>

752
00:28:45,659 --> 00:28:52,679
easier so for the<font color="#CCCCCC"> vulnerable app here</font>

753
00:28:50,759 --> 00:28:55,139
I'm going<font color="#E5E5E5"> to show you what's really</font>

754
00:28:52,679 --> 00:28:56,909
<font color="#CCCCCC">possible if you manage to break</font><font color="#E5E5E5"> open one</font>

755
00:28:55,139 --> 00:28:59,369
function within an app and what it can

756
00:28:56,909 --> 00:29:00,869
do for<font color="#CCCCCC"> the other function so the concept</font>

757
00:28:59,369 --> 00:29:03,178
is going<font color="#E5E5E5"> to be that we have a credit</font>

758
00:29:00,869 --> 00:29:05,070
card batcher<font color="#CCCCCC"> the idea being that you</font><font color="#E5E5E5"> use</font>

759
00:29:03,179 --> 00:29:06,450
<font color="#E5E5E5">your credit card multiple times it sums</font>

760
00:29:05,070 --> 00:29:08,039
it<font color="#E5E5E5"> up and then it bills you once at the</font>

761
00:29:06,450 --> 00:29:10,649
<font color="#E5E5E5">end of the month to save on credit card</font>

762
00:29:08,039 --> 00:29:12,359
charges all these functions for this

763
00:29:10,649 --> 00:29:13,439
whole app ecosystem<font color="#CCCCCC"> are going to be in</font>

764
00:29:12,359 --> 00:29:16,799
one application

765
00:29:13,440 --> 00:29:19,559
so the exploit that<font color="#E5E5E5"> we're going to use</font>

766
00:29:16,799 --> 00:29:22,139
is it's all in<font color="#E5E5E5"> node and so we pass some</font>

767
00:29:19,559 --> 00:29:25,168
JSON to it that gets eval and we're

768
00:29:22,139 --> 00:29:27,178
going<font color="#E5E5E5"> to use the fact that in node you</font>

769
00:29:25,169 --> 00:29:28,889
get<font color="#E5E5E5"> passed a context object originally</font>

770
00:29:27,179 --> 00:29:31,429
with a callback<font color="#CCCCCC"> to say when you're done</font>

771
00:29:28,889 --> 00:29:35,099
<font color="#CCCCCC">because of</font><font color="#E5E5E5"> the node callback structure</font>

772
00:29:31,429 --> 00:29:36,869
<font color="#E5E5E5">what happens</font><font color="#CCCCCC"> instead in this</font><font color="#E5E5E5"> arbitrary</font>

773
00:29:35,099 --> 00:29:41,399
code execution<font color="#E5E5E5"> is that you can trigger</font>

774
00:29:36,869 --> 00:29:43,049
<font color="#CCCCCC">that done early</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> thus</font><font color="#E5E5E5"> return whatever</font>

775
00:29:41,399 --> 00:29:44,609
<font color="#E5E5E5">data you</font><font color="#CCCCCC"> want and not have to worry</font>

776
00:29:43,049 --> 00:29:45,989
about<font color="#E5E5E5"> exfiltrating your data all the way</font>

777
00:29:44,609 --> 00:29:49,559
<font color="#E5E5E5">through the rest of the control flow of</font>

778
00:29:45,989 --> 00:29:51,269
the<font color="#E5E5E5"> program this is a indicator of</font>

779
00:29:49,559 --> 00:29:53,609
<font color="#CCCCCC">compromise in the logging though</font><font color="#E5E5E5"> logs</font>

780
00:29:51,269 --> 00:29:55,950
are<font color="#CCCCCC"> still important as you can see that</font>

781
00:29:53,609 --> 00:29:58,609
you have<font color="#CCCCCC"> this error here we're done has</font>

782
00:29:55,950 --> 00:30:02,099
already been<font color="#E5E5E5"> called and this means that</font>

783
00:29:58,609 --> 00:30:03,539
<font color="#E5E5E5">you called done as part of your exploit</font>

784
00:30:02,099 --> 00:30:04,799
the program kept running<font color="#E5E5E5"> in the</font>

785
00:30:03,539 --> 00:30:07,289
background<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then it reached its</font>

786
00:30:04,799 --> 00:30:09,029
intended<font color="#CCCCCC"> end and called done again so</font>

787
00:30:07,289 --> 00:30:10,859
this is a sign<font color="#CCCCCC"> that something's wrong</font>

788
00:30:09,029 --> 00:30:14,549
with<font color="#E5E5E5"> your control flow whether by your</font>

789
00:30:10,859 --> 00:30:15,658
doing or maybe someone else<font color="#E5E5E5"> is</font><font color="#CCCCCC"> doing so</font>

790
00:30:14,549 --> 00:30:17,369
this<font color="#E5E5E5"> is the basic layout</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

791
00:30:15,659 --> 00:30:19,619
<font color="#CCCCCC">application first</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> show</font>

792
00:30:17,369 --> 00:30:20,639
the intended<font color="#E5E5E5"> use of</font><font color="#CCCCCC"> the API then we're</font>

793
00:30:19,619 --> 00:30:23,789
going<font color="#E5E5E5"> to demonstrate how</font><font color="#CCCCCC"> the</font>

794
00:30:20,639 --> 00:30:26,070
vulnerability of<font color="#E5E5E5"> one function we can</font>

795
00:30:23,789 --> 00:30:27,450
change the<font color="#CCCCCC"> API keys for other functions</font>

796
00:30:26,070 --> 00:30:29,250
<font color="#E5E5E5">giving us</font><font color="#CCCCCC"> access to</font>

797
00:30:27,450 --> 00:30:31,440
we can change the ways that other

798
00:30:29,250 --> 00:30:32,430
functions are triggered<font color="#E5E5E5"> bringing</font>

799
00:30:31,440 --> 00:30:35,940
functions that were not previously

800
00:30:32,430 --> 00:30:37,920
accessible via<font color="#E5E5E5"> API to then being able to</font>

801
00:30:35,940 --> 00:30:39,870
be<font color="#E5E5E5"> called through API endpoints and we</font>

802
00:30:37,920 --> 00:30:43,440
can<font color="#E5E5E5"> even change</font><font color="#CCCCCC"> the source code of other</font>

803
00:30:39,870 --> 00:30:51,060
functions<font color="#E5E5E5"> within the same app so I have</font>

804
00:30:43,440 --> 00:30:54,450
a series of a schema<font color="#E5E5E5"> demos here so this</font>

805
00:30:51,060 --> 00:30:56,909
<font color="#E5E5E5">first one is just going to be the basic</font>

806
00:30:54,450 --> 00:30:58,950
use of the app<font color="#E5E5E5"> so it's going to be</font>

807
00:30:56,910 --> 00:31:01,170
through curl<font color="#E5E5E5"> basically in everything I'm</font>

808
00:30:58,950 --> 00:31:04,770
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a JSON file which is going</font>

809
00:31:01,170 --> 00:31:07,380
to<font color="#CCCCCC"> be the code the contents</font><font color="#E5E5E5"> of my post</font><font color="#CCCCCC"> I</font>

810
00:31:04,770 --> 00:31:09,420
have<font color="#CCCCCC"> a config file</font><font color="#E5E5E5"> which is just there</font>

811
00:31:07,380 --> 00:31:13,320
so that we don't spam up with the URL

812
00:31:09,420 --> 00:31:15,870
<font color="#E5E5E5">and my API</font><font color="#CCCCCC"> key and</font><font color="#E5E5E5"> has some headers so</font>

813
00:31:13,320 --> 00:31:18,929
you can see with this initial one<font color="#CCCCCC"> I do</font>

814
00:31:15,870 --> 00:31:21,300
my curl<font color="#CCCCCC"> I send in the right data I use</font>

815
00:31:18,930 --> 00:31:22,680
my credentials<font color="#E5E5E5"> and then I get</font><font color="#CCCCCC"> back the</font>

816
00:31:21,300 --> 00:31:27,540
charges that<font color="#E5E5E5"> I've made on</font><font color="#CCCCCC"> my credit card</font>

817
00:31:22,680 --> 00:31:32,130
<font color="#CCCCCC">pretty straightforward for the second</font>

818
00:31:27,540 --> 00:31:34,860
piece I'm<font color="#CCCCCC"> gonna show how with this print</font>

819
00:31:32,130 --> 00:31:36,570
return<font color="#E5E5E5"> JSON so this is this is not some</font>

820
00:31:34,860 --> 00:31:38,850
JSON<font color="#E5E5E5"> but this is actually JavaScript</font>

821
00:31:36,570 --> 00:31:41,129
<font color="#CCCCCC">that then gets evaluated</font><font color="#E5E5E5"> so this is a</font>

822
00:31:38,850 --> 00:31:43,770
pretty contrived vulnerability but

823
00:31:41,130 --> 00:31:45,060
sometimes the node vulner drun time has

824
00:31:43,770 --> 00:31:47,550
vulnerabilities<font color="#E5E5E5"> that just happened</font>

825
00:31:45,060 --> 00:31:49,320
recently<font color="#CCCCCC"> there's a talk on JSON</font><font color="#E5E5E5"> parser</font>

826
00:31:47,550 --> 00:31:49,740
vulnerabilities here could<font color="#E5E5E5"> be all</font><font color="#CCCCCC"> sorts</font>

827
00:31:49,320 --> 00:31:52,620
of<font color="#E5E5E5"> things</font>

828
00:31:49,740 --> 00:31:54,210
so with this<font color="#E5E5E5"> arbitrary JavaScript that</font>

829
00:31:52,620 --> 00:31:55,709
<font color="#CCCCCC">we have at the beginning</font><font color="#E5E5E5"> you can see</font>

830
00:31:54,210 --> 00:31:58,020
we're<font color="#CCCCCC"> able to populate the context</font>

831
00:31:55,710 --> 00:32:01,500
<font color="#CCCCCC">object with</font><font color="#E5E5E5"> whatever we want to return</font>

832
00:31:58,020 --> 00:32:03,000
and call context done and then the rest

833
00:32:01,500 --> 00:32:08,990
<font color="#E5E5E5">of the program</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> gets ignored and we</font>

834
00:32:03,000 --> 00:32:11,190
<font color="#CCCCCC">get our custom text returned here</font><font color="#E5E5E5"> and</font>

835
00:32:08,990 --> 00:32:12,540
then this<font color="#E5E5E5"> is also going to be generating</font>

836
00:32:11,190 --> 00:32:15,060
one of those warning log statements<font color="#CCCCCC"> that</font>

837
00:32:12,540 --> 00:32:17,220
<font color="#E5E5E5">I touched on earlier so after that we've</font>

838
00:32:15,060 --> 00:32:19,740
shown<font color="#CCCCCC"> that our vulnerability works</font><font color="#E5E5E5"> we</font>

839
00:32:17,220 --> 00:32:22,140
can<font color="#E5E5E5"> proceed</font><font color="#CCCCCC"> to list functions</font><font color="#E5E5E5"> and list</font>

840
00:32:19,740 --> 00:32:24,210
functions<font color="#E5E5E5"> is a very similar thing it</font>

841
00:32:22,140 --> 00:32:27,000
turns out that these files here are all

842
00:32:24,210 --> 00:32:28,620
metadata<font color="#E5E5E5"> for the functions showing how</font>

843
00:32:27,000 --> 00:32:30,390
they're<font color="#E5E5E5"> going to be called what some</font>

844
00:32:28,620 --> 00:32:32,580
<font color="#E5E5E5">other attributes are and so</font><font color="#CCCCCC"> if we're</font>

845
00:32:30,390 --> 00:32:34,470
basically just<font color="#E5E5E5"> doing an LS on the file</font>

846
00:32:32,580 --> 00:32:36,870
system<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we can see all sorts</font><font color="#CCCCCC"> of</font>

847
00:32:34,470 --> 00:32:38,730
<font color="#E5E5E5">things here so public</font><font color="#CCCCCC"> vol</font><font color="#E5E5E5"> here is what</font>

848
00:32:36,870 --> 00:32:39,989
we're calling<font color="#CCCCCC"> into but there are some</font>

849
00:32:38,730 --> 00:32:40,559
other<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> might be interesting</font>

850
00:32:39,990 --> 00:32:42,480
<font color="#CCCCCC">told</font>

851
00:32:40,559 --> 00:32:45,049
<font color="#E5E5E5">you probably</font><font color="#CCCCCC"> has a lot of information</font>

852
00:32:42,480 --> 00:32:46,759
that's<font color="#E5E5E5"> interesting and then building</font>

853
00:32:45,049 --> 00:32:48,960
<font color="#E5E5E5">sounds promising</font>

854
00:32:46,759 --> 00:32:51,090
so we'll<font color="#E5E5E5"> get to</font><font color="#CCCCCC"> that eventually</font><font color="#E5E5E5"> we'll</font>

855
00:32:48,960 --> 00:32:53,850
try total<font color="#CCCCCC"> no auth first so we do our</font>

856
00:32:51,090 --> 00:32:55,620
curl send in no data and we try<font color="#E5E5E5"> to hit</font>

857
00:32:53,850 --> 00:32:58,289
<font color="#CCCCCC">that endpoint and we get nothing</font><font color="#E5E5E5"> back</font>

858
00:32:55,620 --> 00:33:00,748
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is empty this is because total no</font>

859
00:32:58,289 --> 00:33:02,879
auth uses a different<font color="#CCCCCC"> API key because</font>

860
00:33:00,749 --> 00:33:04,740
even within the same<font color="#E5E5E5"> app you can set</font>

861
00:33:02,879 --> 00:33:07,709
different API keys required<font color="#E5E5E5"> for each</font>

862
00:33:04,740 --> 00:33:10,230
function<font color="#E5E5E5"> however that doesn't need to</font>

863
00:33:07,710 --> 00:33:12,509
stop us<font color="#E5E5E5"> because these keys are all</font>

864
00:33:10,230 --> 00:33:14,100
stored encrypted on disk<font color="#CCCCCC"> but they're all</font>

865
00:33:12,509 --> 00:33:15,929
<font color="#E5E5E5">encrypted against the same key from</font>

866
00:33:14,100 --> 00:33:19,759
function to<font color="#E5E5E5"> function</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I can actually</font>

867
00:33:15,929 --> 00:33:23,369
<font color="#E5E5E5">in this snippet of JavaScript</font><font color="#CCCCCC"> just take</font>

868
00:33:19,759 --> 00:33:24,779
my<font color="#E5E5E5"> key and copy it the key that I have</font>

869
00:33:23,369 --> 00:33:27,749
for the function I've already accessed

870
00:33:24,779 --> 00:33:30,690
and copy it<font color="#CCCCCC"> over the file for</font><font color="#E5E5E5"> the one</font>

871
00:33:27,749 --> 00:33:34,200
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> don't have access to so we call</font>

872
00:33:30,690 --> 00:33:36,179
this curl that works successfully and

873
00:33:34,200 --> 00:33:39,389
then<font color="#E5E5E5"> using the exact</font><font color="#CCCCCC"> same curl statement</font>

874
00:33:36,179 --> 00:33:41,820
as before<font color="#E5E5E5"> I'm able to call it and then I</font>

875
00:33:39,389 --> 00:33:48,619
see<font color="#E5E5E5"> all these card IDs for</font><font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> I</font>

876
00:33:41,820 --> 00:33:51,330
now have access<font color="#E5E5E5"> to this function</font><font color="#CCCCCC"> so</font>

877
00:33:48,619 --> 00:33:53,129
that's<font color="#E5E5E5"> great getting to</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> all sorts of</font>

878
00:33:51,330 --> 00:33:55,230
things<font color="#CCCCCC"> but now we want to get at some</font>

879
00:33:53,129 --> 00:33:58,590
stuff<font color="#E5E5E5"> that really wasn't accessible via</font>

880
00:33:55,230 --> 00:34:00,179
the API at all not<font color="#CCCCCC"> for anyone so we're</font>

881
00:33:58,590 --> 00:34:02,879
gonna see how we go about digging<font color="#E5E5E5"> into</font>

882
00:34:00,179 --> 00:34:05,460
billing so the billing info here at this

883
00:34:02,879 --> 00:34:09,739
first<font color="#E5E5E5"> snippet you</font><font color="#CCCCCC"> can see we're just</font>

884
00:34:05,460 --> 00:34:11,849
reading<font color="#E5E5E5"> the file this function JSON file</font>

885
00:34:09,739 --> 00:34:13,290
<font color="#CCCCCC">which is similar to</font><font color="#E5E5E5"> what we listed</font>

886
00:34:11,849 --> 00:34:15,329
<font color="#CCCCCC">earlier when we said what are</font><font color="#E5E5E5"> the list</font>

887
00:34:13,290 --> 00:34:17,339
of functions<font color="#CCCCCC"> within this application and</font>

888
00:34:15,329 --> 00:34:20,159
for those<font color="#CCCCCC"> of you who are familiar</font><font color="#E5E5E5"> with</font>

889
00:34:17,339 --> 00:34:22,469
cron<font color="#CCCCCC"> you can see that this JSON contains</font>

890
00:34:20,159 --> 00:34:25,349
a cron line<font color="#CCCCCC"> here's our monthly schedule</font>

891
00:34:22,469 --> 00:34:27,178
and so that's it's a monthly<font color="#E5E5E5"> billing</font>

892
00:34:25,349 --> 00:34:28,710
function<font color="#E5E5E5"> it'll</font><font color="#CCCCCC"> just run at the beginning</font>

893
00:34:27,179 --> 00:34:30,290
of<font color="#E5E5E5"> every</font><font color="#CCCCCC"> month</font><font color="#E5E5E5"> which is pretty</font>

894
00:34:28,710 --> 00:34:32,819
reasonable<font color="#CCCCCC"> it's like what we'd expect</font>

895
00:34:30,290 --> 00:34:34,109
but since we want<font color="#CCCCCC"> to change billing</font><font color="#E5E5E5"> and</font>

896
00:34:32,819 --> 00:34:35,460
we don't want to wait<font color="#E5E5E5"> till the end</font><font color="#CCCCCC"> of</font>

897
00:34:34,109 --> 00:34:37,469
<font color="#E5E5E5">the month to see if our exploit worked</font>

898
00:34:35,460 --> 00:34:39,720
or see if they've deployed<font color="#CCCCCC"> sense</font><font color="#E5E5E5"> or any</font>

899
00:34:37,469 --> 00:34:40,709
number<font color="#CCCCCC"> of things that could happen we</font>

900
00:34:39,719 --> 00:34:43,259
want<font color="#CCCCCC"> to change it to be able</font><font color="#E5E5E5"> to be</font>

901
00:34:40,710 --> 00:34:45,569
<font color="#E5E5E5">called through the API and so just like</font>

902
00:34:43,260 --> 00:34:51,800
we could<font color="#E5E5E5"> change the permissions we can</font>

903
00:34:45,569 --> 00:34:55,389
actually<font color="#E5E5E5"> with this next snippet right</font>

904
00:34:51,800 --> 00:34:57,620
take our configuration<font color="#CCCCCC"> file for our</font>

905
00:34:55,389 --> 00:34:59,900
vulnerable<font color="#E5E5E5"> endpoint that we're writing</font>

906
00:34:57,620 --> 00:35:01,910
<font color="#E5E5E5">to that says hook this up to the HTTP</font>

907
00:34:59,900 --> 00:35:04,310
endpoint<font color="#CCCCCC"> take a post</font><font color="#E5E5E5"> request so on and</font>

908
00:35:01,910 --> 00:35:06,259
so forth and<font color="#CCCCCC"> just copy that over the</font>

909
00:35:04,310 --> 00:35:07,940
billing<font color="#E5E5E5"> thus changing the billing for</font>

910
00:35:06,260 --> 00:35:09,710
being<font color="#E5E5E5"> activated by a cron monthly to</font>

911
00:35:07,940 --> 00:35:12,230
being activated<font color="#E5E5E5"> whenever we decide to</font>

912
00:35:09,710 --> 00:35:14,420
hit the API endpoint so you can see in

913
00:35:12,230 --> 00:35:16,490
this next snippet<font color="#E5E5E5"> we change the billing</font>

914
00:35:14,420 --> 00:35:18,200
to be an API<font color="#E5E5E5"> endpoint then we do the</font>

915
00:35:16,490 --> 00:35:21,350
same operation we did earlier where<font color="#CCCCCC"> we</font>

916
00:35:18,200 --> 00:35:24,049
give it our known API key and then you

917
00:35:21,350 --> 00:35:26,000
can see we can post a billing and so

918
00:35:24,050 --> 00:35:28,760
this gives<font color="#E5E5E5"> us the</font><font color="#CCCCCC"> summed up prices</font><font color="#E5E5E5"> for</font>

919
00:35:26,000 --> 00:35:33,140
<font color="#CCCCCC">our card will be billed</font><font color="#E5E5E5"> 30 dollars and</font>

920
00:35:28,760 --> 00:35:35,030
98 cents<font color="#E5E5E5"> and then someone else's card so</font>

921
00:35:33,140 --> 00:35:38,299
that's great<font color="#CCCCCC"> now we know how much we're</font>

922
00:35:35,030 --> 00:35:41,870
gonna be billed but we don't really<font color="#CCCCCC"> want</font>

923
00:35:38,300 --> 00:35:44,480
<font color="#E5E5E5">to be billed at all and so we can even</font>

924
00:35:41,870 --> 00:35:47,240
<font color="#CCCCCC">look at the source of</font><font color="#E5E5E5"> other files we can</font>

925
00:35:44,480 --> 00:35:49,880
<font color="#E5E5E5">start by</font><font color="#CCCCCC"> just traversing filesystem</font>

926
00:35:47,240 --> 00:35:53,029
going<font color="#E5E5E5"> into that directory and dumping</font>

927
00:35:49,880 --> 00:35:56,000
that source out<font color="#E5E5E5"> and so at this point not</font>

928
00:35:53,030 --> 00:35:58,400
<font color="#CCCCCC">only can we go on</font><font color="#E5E5E5"> to our next exploit</font>

929
00:35:56,000 --> 00:36:01,160
but<font color="#E5E5E5"> also you can</font><font color="#CCCCCC"> see that in here there</font>

930
00:35:58,400 --> 00:36:02,540
are<font color="#CCCCCC"> some database</font><font color="#E5E5E5"> credentials because</font>

931
00:36:01,160 --> 00:36:04,279
<font color="#E5E5E5">they didn't use an environment for</font>

932
00:36:02,540 --> 00:36:06,680
there's a server<font color="#CCCCCC"> endpoint</font>

933
00:36:04,280 --> 00:36:08,000
it wasn't parameterised<font color="#E5E5E5"> out all sorts of</font>

934
00:36:06,680 --> 00:36:09,950
juicy things that are in source code

935
00:36:08,000 --> 00:36:13,070
that<font color="#E5E5E5"> you might think was never intended</font>

936
00:36:09,950 --> 00:36:15,980
to be publicly accessed so after we see

937
00:36:13,070 --> 00:36:19,270
the source we can find the portion in it

938
00:36:15,980 --> 00:36:23,000
where the<font color="#CCCCCC"> charges are summed up and then</font>

939
00:36:19,270 --> 00:36:25,910
<font color="#E5E5E5">actually with this next snippet we're</font>

940
00:36:23,000 --> 00:36:28,100
just gonna do a regex replace and say go

941
00:36:25,910 --> 00:36:32,779
through<font color="#CCCCCC"> this file</font><font color="#E5E5E5"> whenever</font><font color="#CCCCCC"> we sum up</font><font color="#E5E5E5"> the</font>

942
00:36:28,100 --> 00:36:36,170
all the credit-card<font color="#CCCCCC"> numbers instead take</font>

943
00:36:32,780 --> 00:36:38,690
our charge<font color="#E5E5E5"> our number and just set it</font><font color="#CCCCCC"> to</font>

944
00:36:36,170 --> 00:36:40,310
<font color="#CCCCCC">one and</font><font color="#E5E5E5"> so we have full</font><font color="#CCCCCC"> access to</font><font color="#E5E5E5"> the</font>

945
00:36:38,690 --> 00:36:43,160
<font color="#CCCCCC">filesystem</font><font color="#E5E5E5"> we can just write</font><font color="#CCCCCC"> this file</font>

946
00:36:40,310 --> 00:36:46,160
in so we curl this<font color="#E5E5E5"> in to patch the</font>

947
00:36:43,160 --> 00:36:47,270
billing code and that's done and then

948
00:36:46,160 --> 00:36:50,210
you can<font color="#CCCCCC"> see when we call the billing</font>

949
00:36:47,270 --> 00:36:52,460
code again we only have one dollar<font color="#E5E5E5"> on</font>

950
00:36:50,210 --> 00:36:54,950
<font color="#E5E5E5">our credit card so just the</font>

951
00:36:52,460 --> 00:36:56,660
vulnerability in this one function<font color="#E5E5E5"> let</font>

952
00:36:54,950 --> 00:36:58,910
<font color="#E5E5E5">us change the source code the access</font>

953
00:36:56,660 --> 00:37:02,109
type and access key<font color="#E5E5E5"> of all the other</font>

954
00:36:58,910 --> 00:37:02,109
functions<font color="#CCCCCC"> within</font><font color="#E5E5E5"> this app</font>

955
00:37:03,730 --> 00:37:09,010
so having<font color="#E5E5E5"> separate API keys is great but</font>

956
00:37:07,630 --> 00:37:10,869
<font color="#E5E5E5">it clearly didn't prevent</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> kind of</font>

957
00:37:09,010 --> 00:37:12,970
scenario<font color="#CCCCCC"> you need to be aware that if</font>

958
00:37:10,869 --> 00:37:14,950
someone does gain access to<font color="#CCCCCC"> one function</font>

959
00:37:12,970 --> 00:37:16,868
<font color="#E5E5E5">within your application you have access</font>

960
00:37:14,950 --> 00:37:18,430
to<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> the functions essentially and</font>

961
00:37:16,869 --> 00:37:20,140
be aware<font color="#CCCCCC"> the</font><font color="#E5E5E5"> choices that you're making</font>

962
00:37:18,430 --> 00:37:28,450
<font color="#E5E5E5">by putting these functions within the</font>

963
00:37:20,140 --> 00:37:31,328
<font color="#E5E5E5">same application next we're gonna talk</font>

964
00:37:28,450 --> 00:37:34,299
on web<font color="#E5E5E5"> tasks provides auth0</font><font color="#CCCCCC"> the smallest</font>

965
00:37:31,329 --> 00:37:36,640
provider that we covered web<font color="#CCCCCC"> tasks is</font>

966
00:37:34,300 --> 00:37:38,530
open source<font color="#E5E5E5"> we love open source this</font><font color="#CCCCCC"> is</font>

967
00:37:36,640 --> 00:37:41,339
great<font color="#E5E5E5"> they've even got their github here</font>

968
00:37:38,530 --> 00:37:45,430
<font color="#E5E5E5">they run docker containers on core OS</font>

969
00:37:41,339 --> 00:37:47,320
they allegedly run<font color="#E5E5E5"> nodejs only which is</font>

970
00:37:45,430 --> 00:37:49,690
unlike many of the other providers<font color="#E5E5E5"> where</font>

971
00:37:47,320 --> 00:37:51,940
you have Python<font color="#E5E5E5"> or</font><font color="#CCCCCC"> PowerShell or Java or</font>

972
00:37:49,690 --> 00:37:54,520
<font color="#CCCCCC">all sorts of other things</font><font color="#E5E5E5"> they have no</font>

973
00:37:51,940 --> 00:37:56,200
restriction on egress<font color="#E5E5E5"> and</font><font color="#CCCCCC"> people use</font>

974
00:37:54,520 --> 00:37:59,619
them for<font color="#CCCCCC"> all sorts of things including</font>

975
00:37:56,200 --> 00:38:01,480
the<font color="#CCCCCC"> osteo rule engine and you can have a</font>

976
00:37:59,619 --> 00:38:03,640
public<font color="#E5E5E5"> tenant out in the cloud or</font>

977
00:38:01,480 --> 00:38:05,260
depending on<font color="#E5E5E5"> your plan with them you can</font>

978
00:38:03,640 --> 00:38:06,819
have a private tenancy - so there are

979
00:38:05,260 --> 00:38:09,880
different<font color="#E5E5E5"> options for how this can be</font>

980
00:38:06,820 --> 00:38:12,280
hosted so at first when<font color="#CCCCCC"> we discovered</font>

981
00:38:09,880 --> 00:38:15,160
this we thought well it's no js' only

982
00:38:12,280 --> 00:38:16,119
<font color="#E5E5E5">all our profilers written in Python we</font>

983
00:38:15,160 --> 00:38:20,529
don't want to have to do the whole thing

984
00:38:16,119 --> 00:38:22,690
<font color="#E5E5E5">again</font><font color="#CCCCCC"> so we were sad right it was sad</font>

985
00:38:20,530 --> 00:38:24,760
but<font color="#CCCCCC"> we dug around a little</font><font color="#E5E5E5"> and we found</font>

986
00:38:22,690 --> 00:38:27,490
<font color="#E5E5E5">that by requiring child process and</font>

987
00:38:24,760 --> 00:38:31,599
calling exec you can basically shell out

988
00:38:27,490 --> 00:38:33,209
and run shell<font color="#E5E5E5"> commands so a friend of</font>

989
00:38:31,599 --> 00:38:35,500
ours wrote this cool little<font color="#E5E5E5"> web shell</font>

990
00:38:33,210 --> 00:38:37,390
which might<font color="#E5E5E5"> be hard</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> but basically</font>

991
00:38:35,500 --> 00:38:39,780
it just<font color="#E5E5E5"> lets you put in arbitrary</font>

992
00:38:37,390 --> 00:38:42,220
commands you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> here's</font><font color="#E5E5E5"> an LS and</font>

993
00:38:39,780 --> 00:38:44,589
you get the<font color="#CCCCCC"> output of the LS you get</font>

994
00:38:42,220 --> 00:38:46,180
some file system dumps right<font color="#E5E5E5"> here so</font>

995
00:38:44,589 --> 00:38:48,569
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> great</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> because we didn't</font>

996
00:38:46,180 --> 00:38:52,029
have<font color="#E5E5E5"> to write any node</font><font color="#CCCCCC"> J s anymore</font>

997
00:38:48,569 --> 00:38:55,300
<font color="#E5E5E5">because if you shell out and call Python</font>

998
00:38:52,030 --> 00:38:59,440
you can<font color="#E5E5E5"> see that Python</font><font color="#CCCCCC"> 279 is</font><font color="#E5E5E5"> also on</font>

999
00:38:55,300 --> 00:39:02,560
those boxes<font color="#E5E5E5"> so we got to explore</font><font color="#CCCCCC"> around</font>

1000
00:38:59,440 --> 00:39:03,970
a little<font color="#E5E5E5"> run our profiler and we even</font>

1001
00:39:02,560 --> 00:39:05,740
<font color="#E5E5E5">found some other cool stuff like</font>

1002
00:39:03,970 --> 00:39:09,790
<font color="#E5E5E5">back-channel dot sock which</font><font color="#CCCCCC"> we'll touch</font>

1003
00:39:05,740 --> 00:39:12,430
on<font color="#E5E5E5"> a little later so we have this forked</font>

1004
00:39:09,790 --> 00:39:15,869
process demo which<font color="#E5E5E5"> is going to be live</font>

1005
00:39:12,430 --> 00:39:15,868
and<font color="#E5E5E5"> it's worked two times out of three</font>

1006
00:39:16,820 --> 00:39:22,280
so basically what we're<font color="#E5E5E5"> gonna do is</font>

1007
00:39:20,160 --> 00:39:25,710
we're gonna open this first link<font color="#E5E5E5"> and</font>

1008
00:39:22,280 --> 00:39:27,390
this is going<font color="#E5E5E5"> to have we're so we're</font>

1009
00:39:25,710 --> 00:39:29,040
<font color="#E5E5E5">running Python we shelled out and just</font>

1010
00:39:27,390 --> 00:39:30,569
called<font color="#CCCCCC"> Python</font><font color="#E5E5E5"> with no arguments so it's</font>

1011
00:39:29,040 --> 00:39:33,390
waiting<font color="#CCCCCC"> for input from standard in and</font>

1012
00:39:30,570 --> 00:39:36,329
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> running now and what we're going</font>

1013
00:39:33,390 --> 00:39:39,660
<font color="#E5E5E5">to</font><font color="#CCCCCC"> demonstrate is by opening up another</font>

1014
00:39:36,329 --> 00:39:41,550
link<font color="#E5E5E5"> and running PS aux we can actually</font>

1015
00:39:39,660 --> 00:39:47,970
<font color="#E5E5E5">demonstrate</font><font color="#CCCCCC"> that we hit the same</font>

1016
00:39:41,550 --> 00:39:50,250
container and you can<font color="#CCCCCC"> see here</font><font color="#E5E5E5"> our</font>

1017
00:39:47,970 --> 00:39:53,368
<font color="#CCCCCC">Python is running so with these two</font>

1018
00:39:50,250 --> 00:39:54,510
<font color="#E5E5E5">entirely separate ephemeral containers</font>

1019
00:39:53,369 --> 00:39:56,430
we're actually<font color="#E5E5E5"> hitting the same</font>

1020
00:39:54,510 --> 00:40:02,820
container and<font color="#E5E5E5"> have overlap between the</font>

1021
00:39:56,430 --> 00:40:04,290
functionality so in off cero<font color="#E5E5E5"> we learned</font>

1022
00:40:02,820 --> 00:40:06,180
that fork processes do hang the

1023
00:40:04,290 --> 00:40:07,680
container which<font color="#E5E5E5"> is what's allowing us to</font>

1024
00:40:06,180 --> 00:40:09,839
do<font color="#E5E5E5"> this demonstration and hit the same</font>

1025
00:40:07,680 --> 00:40:12,299
container multiple times<font color="#E5E5E5"> back channel</font>

1026
00:40:09,839 --> 00:40:13,920
dot sock<font color="#E5E5E5"> is not anything too crazy it's</font>

1027
00:40:12,300 --> 00:40:16,290
<font color="#CCCCCC">a socket that</font><font color="#E5E5E5"> hits a rest endpoint which</font>

1028
00:40:13,920 --> 00:40:18,150
<font color="#CCCCCC">is probably</font><font color="#E5E5E5"> for credential exchanges you</font>

1029
00:40:16,290 --> 00:40:19,920
can't<font color="#E5E5E5"> escape the sandbox</font><font color="#CCCCCC"> to the</font>

1030
00:40:18,150 --> 00:40:22,619
container as demonstrated by all our

1031
00:40:19,920 --> 00:40:24,000
ability<font color="#E5E5E5"> to call Python or shell commands</font>

1032
00:40:22,619 --> 00:40:26,069
or whatever else is on<font color="#CCCCCC"> that Linux</font>

1033
00:40:24,000 --> 00:40:27,930
<font color="#E5E5E5">installation and the sandbox system is</font>

1034
00:40:26,069 --> 00:40:29,400
<font color="#CCCCCC">Debian based with a little</font><font color="#E5E5E5"> anomaly</font>

1035
00:40:27,930 --> 00:40:33,990
detection and some extra monitoring

1036
00:40:29,400 --> 00:40:35,640
thrown in so the last thing<font color="#E5E5E5"> that I want</font>

1037
00:40:33,990 --> 00:40:37,348
to<font color="#E5E5E5"> talk about is something that's not</font>

1038
00:40:35,640 --> 00:40:39,720
quite<font color="#E5E5E5"> done so we have three</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> to</font>

1039
00:40:37,349 --> 00:40:41,220
give you<font color="#E5E5E5"> today two things that are open</font>

1040
00:40:39,720 --> 00:40:42,480
<font color="#CCCCCC">source available at the end of this talk</font>

1041
00:40:41,220 --> 00:40:44,939
the first<font color="#E5E5E5"> of which is the serverless</font>

1042
00:40:42,480 --> 00:40:48,140
profiling engine that we wrote to do

1043
00:40:44,940 --> 00:40:50,190
this<font color="#E5E5E5"> it works in any POSIX environment</font>

1044
00:40:48,140 --> 00:40:51,720
those vulnerable apps are gonna be

1045
00:40:50,190 --> 00:40:53,609
<font color="#E5E5E5">available today so if you want</font><font color="#CCCCCC"> to take</font>

1046
00:40:51,720 --> 00:40:55,589
those<font color="#E5E5E5"> home and deploy those in Azure AWS</font>

1047
00:40:53,609 --> 00:41:00,540
and poke at them you totally can for

1048
00:40:55,589 --> 00:41:04,109
anomaly detection<font color="#CCCCCC"> the the serverless</font>

1049
00:41:00,540 --> 00:41:06,150
sandbox profiler serverless<font color="#CCCCCC"> showdown</font>

1050
00:41:04,109 --> 00:41:08,940
does everything<font color="#CCCCCC"> that our profiler does</font>

1051
00:41:06,150 --> 00:41:10,920
it just gathers that<font color="#E5E5E5"> for you in the form</font>

1052
00:41:08,940 --> 00:41:13,050
of<font color="#E5E5E5"> an</font><font color="#CCCCCC"> api that</font><font color="#E5E5E5"> collects that</font><font color="#CCCCCC"> data in</font>

1053
00:41:10,920 --> 00:41:15,900
<font color="#E5E5E5">dynamo database and then allows you to</font>

1054
00:41:13,050 --> 00:41:18,329
score<font color="#CCCCCC"> that on a security scorecard</font><font color="#E5E5E5"> using</font>

1055
00:41:15,900 --> 00:41:19,890
a rule engine<font color="#E5E5E5"> so this is really</font>

1056
00:41:18,329 --> 00:41:23,540
important because<font color="#E5E5E5"> it</font><font color="#CCCCCC"> allows us as</font>

1057
00:41:19,890 --> 00:41:26,460
<font color="#E5E5E5">consumers to</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> any vendor and stick a</font>

1058
00:41:23,540 --> 00:41:28,859
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of code in their code sandbox</font>

1059
00:41:26,460 --> 00:41:30,690
<font color="#E5E5E5">and say let</font><font color="#CCCCCC"> it tell you</font><font color="#E5E5E5"> when the</font>

1060
00:41:28,859 --> 00:41:33,480
environment changes let it tell you how

1061
00:41:30,690 --> 00:41:35,609
<font color="#E5E5E5">often they patch it</font><font color="#CCCCCC"> and it</font><font color="#E5E5E5"> really allows</font>

1062
00:41:33,480 --> 00:41:37,859
us<font color="#CCCCCC"> to keep</font><font color="#E5E5E5"> the vendors honest</font><font color="#CCCCCC"> about</font>

1063
00:41:35,609 --> 00:41:40,799
what's going on<font color="#E5E5E5"> inside these sand boxes</font>

1064
00:41:37,859 --> 00:41:42,569
and so this is an example<font color="#E5E5E5"> of what a</font>

1065
00:41:40,799 --> 00:41:44,069
scorecard would look like<font color="#E5E5E5"> at Mozilla we</font>

1066
00:41:42,569 --> 00:41:46,650
love observatories we have the<font color="#CCCCCC"> tls</font>

1067
00:41:44,069 --> 00:41:48,450
<font color="#CCCCCC">observatory</font><font color="#E5E5E5"> web observatory</font><font color="#CCCCCC"> and so I</font>

1068
00:41:46,650 --> 00:41:50,430
made this in<font color="#E5E5E5"> this period of that</font><font color="#CCCCCC"> I'm</font>

1069
00:41:48,450 --> 00:41:52,410
calling<font color="#CCCCCC"> it</font><font color="#E5E5E5"> serverless observatory</font><font color="#CCCCCC"> the</font>

1070
00:41:50,430 --> 00:41:53,879
code for<font color="#E5E5E5"> it is available today and it</font>

1071
00:41:52,410 --> 00:41:56,848
will be<font color="#E5E5E5"> available later</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> year as a</font>

1072
00:41:53,880 --> 00:41:59,339
SAS offering<font color="#E5E5E5"> totally free you</font><font color="#CCCCCC"> can sign</font>

1073
00:41:56,849 --> 00:42:02,910
up for<font color="#E5E5E5"> it</font><font color="#CCCCCC"> on our mailing</font><font color="#E5E5E5"> list at threat</font>

1074
00:41:59,339 --> 00:42:05,339
response cloud<font color="#CCCCCC"> this is the final slide</font>

1075
00:42:02,910 --> 00:42:07,859
<font color="#CCCCCC">that</font><font color="#E5E5E5"> really tells this story about</font><font color="#CCCCCC"> how</font>

1076
00:42:05,339 --> 00:42:09,509
all these security<font color="#E5E5E5"> features stack up you</font>

1077
00:42:07,859 --> 00:42:11,578
can see that a lot of<font color="#E5E5E5"> the vendors have</font>

1078
00:42:09,509 --> 00:42:14,329
really similar<font color="#CCCCCC"> security features none</font><font color="#E5E5E5"> of</font>

1079
00:42:11,579 --> 00:42:16,589
them restrict language that's executing

1080
00:42:14,329 --> 00:42:18,450
<font color="#CCCCCC">most of them do have read-only file</font>

1081
00:42:16,589 --> 00:42:20,910
systems to some degree in some places

1082
00:42:18,450 --> 00:42:22,078
all<font color="#CCCCCC"> of them patch frequently none</font><font color="#E5E5E5"> of</font>

1083
00:42:20,910 --> 00:42:23,910
them have<font color="#CCCCCC"> immutable environment</font>

1084
00:42:22,079 --> 00:42:25,980
variables etc<font color="#CCCCCC"> you can read more about</font>

1085
00:42:23,910 --> 00:42:27,420
this<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the white paper if we could ask</font>

1086
00:42:25,980 --> 00:42:30,869
the vendors for something what would it

1087
00:42:27,420 --> 00:42:32,700
be<font color="#CCCCCC"> out of all this what would we ask the</font>

1088
00:42:30,869 --> 00:42:34,650
vendor space<font color="#E5E5E5"> we would ask them for any</font>

1089
00:42:32,700 --> 00:42:37,078
control that requires<font color="#E5E5E5"> out of sandbox</font>

1090
00:42:34,650 --> 00:42:38,849
levels of access<font color="#E5E5E5"> right so we can all</font>

1091
00:42:37,079 --> 00:42:41,099
think<font color="#CCCCCC"> of</font><font color="#E5E5E5"> some additional controls that</font>

1092
00:42:38,849 --> 00:42:43,140
we might like so we might like the

1093
00:42:41,099 --> 00:42:45,809
<font color="#E5E5E5">ability</font><font color="#CCCCCC"> to do native code signing</font><font color="#E5E5E5"> and</font>

1094
00:42:43,140 --> 00:42:47,788
code signing validation<font color="#CCCCCC"> I want something</font>

1095
00:42:45,809 --> 00:42:50,009
killed if it's not<font color="#E5E5E5"> in - in</font><font color="#CCCCCC"> signed</font><font color="#E5E5E5"> right</font>

1096
00:42:47,789 --> 00:42:51,599
I want a<font color="#E5E5E5"> mutable environment VARs or a</font>

1097
00:42:50,009 --> 00:42:53,910
config store<font color="#E5E5E5"> that guarantees</font>

1098
00:42:51,599 --> 00:42:56,789
immutability<font color="#CCCCCC"> I want the</font><font color="#E5E5E5"> ability to</font>

1099
00:42:53,910 --> 00:42:59,069
choose<font color="#CCCCCC"> cold-start</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> favor</font><font color="#E5E5E5"> of security</font>

1100
00:42:56,789 --> 00:43:01,200
instead of performance<font color="#CCCCCC"> I want the</font>

1101
00:42:59,069 --> 00:43:03,660
ability<font color="#E5E5E5"> to kill any process that's not</font>

1102
00:43:01,200 --> 00:43:05,939
in the language<font color="#CCCCCC"> the runtime specifies</font>

1103
00:43:03,660 --> 00:43:07,710
<font color="#E5E5E5">wouldn't that be cool and I want more</font>

1104
00:43:05,940 --> 00:43:09,660
transparency<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the patch cycle and the</font>

1105
00:43:07,710 --> 00:43:11,880
<font color="#E5E5E5">so-called trade secrets because we all</font>

1106
00:43:09,660 --> 00:43:14,788
know that<font color="#E5E5E5"> transparency is almost always</font>

1107
00:43:11,880 --> 00:43:17,910
<font color="#CCCCCC">better for security so should you use</font>

1108
00:43:14,789 --> 00:43:19,950
service probably<font color="#E5E5E5"> it's still</font><font color="#CCCCCC"> probably</font>

1109
00:43:17,910 --> 00:43:22,499
better than<font color="#E5E5E5"> most of the stuff that</font>

1110
00:43:19,950 --> 00:43:23,848
<font color="#E5E5E5">people will do</font><font color="#CCCCCC"> on-premise but really you</font>

1111
00:43:22,499 --> 00:43:26,038
have<font color="#CCCCCC"> to put that against the risk</font>

1112
00:43:23,849 --> 00:43:28,440
profiles for<font color="#CCCCCC"> your application the</font>

1113
00:43:26,039 --> 00:43:29,999
security advantages are actually quite

1114
00:43:28,440 --> 00:43:32,640
<font color="#E5E5E5">good and there's not a much attack</font>

1115
00:43:29,999 --> 00:43:34,230
surface<font color="#CCCCCC"> they're event-driven security</font>

1116
00:43:32,640 --> 00:43:36,328
gives you a lot of<font color="#E5E5E5"> additional anomaly</font>

1117
00:43:34,230 --> 00:43:37,829
detection and auto<font color="#CCCCCC"> IR capability</font>

1118
00:43:36,329 --> 00:43:39,749
specifically<font color="#E5E5E5"> with some of these</font>

1119
00:43:37,829 --> 00:43:42,720
<font color="#CCCCCC">facilities in</font><font color="#E5E5E5"> Amazon that I absolutely</font>

1120
00:43:39,749 --> 00:43:44,339
<font color="#E5E5E5">love and I'll leave</font><font color="#CCCCCC"> you with</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> quote</font>

1121
00:43:42,720 --> 00:43:46,348
then I'll take questions<font color="#E5E5E5"> and this quote</font>

1122
00:43:44,340 --> 00:43:48,630
<font color="#E5E5E5">I stole</font><font color="#CCCCCC"> from a Microsoft presentation</font>

1123
00:43:46,349 --> 00:43:51,480
modern security<font color="#CCCCCC"> does not resemble</font><font color="#E5E5E5"> high</font>

1124
00:43:48,630 --> 00:43:53,609
walls or strong doors<font color="#E5E5E5"> but rather bells</font>

1125
00:43:51,480 --> 00:43:55,230
on strings that ring each time an

1126
00:43:53,609 --> 00:43:57,840
attacker moves forward<font color="#E5E5E5"> and I think</font>

1127
00:43:55,230 --> 00:44:02,130
<font color="#CCCCCC">that's a really great</font><font color="#E5E5E5"> quote</font><font color="#CCCCCC"> that</font>

1128
00:43:57,840 --> 00:44:03,869
represents modern<font color="#E5E5E5"> OPSEC so thanks</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> all</font>

1129
00:44:02,130 --> 00:44:06,690
these people who<font color="#E5E5E5"> contribute to</font><font color="#CCCCCC"> our</font>

1130
00:44:03,869 --> 00:44:08,340
<font color="#CCCCCC">awesome project last year we had</font><font color="#E5E5E5"> four</font>

1131
00:44:06,690 --> 00:44:09,660
contributors and now we have<font color="#CCCCCC"> 16 so</font>

1132
00:44:08,340 --> 00:44:11,790
that's<font color="#E5E5E5"> our shout out to those folks</font>

1133
00:44:09,660 --> 00:44:13,618
thanks to the vendors for being<font color="#E5E5E5"> super</font>

1134
00:44:11,790 --> 00:44:16,619
awesome<font color="#E5E5E5"> in working with us and giving us</font>

1135
00:44:13,619 --> 00:44:19,080
access<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> team's</font><font color="#E5E5E5"> without you know a</font>

1136
00:44:16,619 --> 00:44:21,450
pile of paperwork and I'll take

1137
00:44:19,080 --> 00:44:31,400
questions<font color="#E5E5E5"> now</font>

1138
00:44:21,450 --> 00:44:33,470
[Applause]

1139
00:44:31,400 --> 00:44:39,540
any questions

1140
00:44:33,470 --> 00:44:44,370
<font color="#E5E5E5">lovely thanks for coming</font>

1141
00:44:39,540 --> 00:44:49,380
oh there is a question<font color="#CCCCCC"> was this long yes</font>

1142
00:44:44,370 --> 00:44:53,540
<font color="#E5E5E5">on did you do any</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> with pre-compiled</font>

1143
00:44:49,380 --> 00:44:57,420
code in Azure functions<font color="#E5E5E5"> all this was all</font>

1144
00:44:53,540 --> 00:45:00,420
<font color="#E5E5E5">script we didn't do anything that wasn't</font>

1145
00:44:57,420 --> 00:45:03,690
Python or PowerShell<font color="#CCCCCC"> we had hopes to do</font>

1146
00:45:00,420 --> 00:45:06,560
c-sharp<font color="#E5E5E5"> at the outset of the</font><font color="#CCCCCC"> project but</font>

1147
00:45:03,690 --> 00:45:09,900
our expert c-sharp developer dropped off

1148
00:45:06,560 --> 00:45:11,490
we'd still like<font color="#E5E5E5"> to we did also do that</font>

1149
00:45:09,900 --> 00:45:14,700
<font color="#CCCCCC">in</font><font color="#E5E5E5"> lambda we showed that you</font><font color="#CCCCCC"> could</font>

1150
00:45:11,490 --> 00:45:16,379
<font color="#E5E5E5">upload a binary</font><font color="#CCCCCC"> persist that in</font><font color="#E5E5E5"> temp and</font>

1151
00:45:14,700 --> 00:45:20,970
<font color="#E5E5E5">then call</font><font color="#CCCCCC"> that from your interpreter</font>

1152
00:45:16,380 --> 00:45:25,860
were you able to write<font color="#CCCCCC"> to</font><font color="#E5E5E5"> host JSON or</font>

1153
00:45:20,970 --> 00:45:27,689
<font color="#CCCCCC">function JSON and yeah</font><font color="#E5E5E5"> you were so</font>

1154
00:45:25,860 --> 00:45:31,080
arbitrary code execution at that point

1155
00:45:27,690 --> 00:45:34,670
yes<font color="#CCCCCC"> thanks yeah we're also available</font>

1156
00:45:31,080 --> 00:45:36,870
after this<font color="#CCCCCC"> if anybody</font><font color="#E5E5E5"> wants to chat</font>

1157
00:45:34,670 --> 00:45:40,890
quick one<font color="#E5E5E5"> when you were talking</font><font color="#CCCCCC"> about</font>

1158
00:45:36,870 --> 00:45:42,150
visibility<font color="#CCCCCC"> with lambda</font><font color="#E5E5E5"> it occurred</font><font color="#CCCCCC"> to me</font>

1159
00:45:40,890 --> 00:45:44,160
I don't<font color="#CCCCCC"> know if this</font><font color="#E5E5E5"> is possible but I</font>

1160
00:45:42,150 --> 00:45:45,960
wonder<font color="#E5E5E5"> if you looked understanding is</font>

1161
00:45:44,160 --> 00:45:48,180
<font color="#CCCCCC">that lambda functions run on a V PC by</font>

1162
00:45:45,960 --> 00:45:50,340
<font color="#CCCCCC">default and I'm wondering</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you can</font>

1163
00:45:48,180 --> 00:45:53,129
enable<font color="#E5E5E5"> net flows within that V PC to get</font>

1164
00:45:50,340 --> 00:45:55,500
more visibility<font color="#CCCCCC"> to</font><font color="#E5E5E5"> what's happening so</font>

1165
00:45:53,130 --> 00:45:57,750
the question was can<font color="#CCCCCC"> you get V PC flow</font>

1166
00:45:55,500 --> 00:46:00,030
logs from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> default V PC that lambda</font>

1167
00:45:57,750 --> 00:46:01,710
functions are associated<font color="#CCCCCC"> with the answer</font>

1168
00:46:00,030 --> 00:46:03,360
is no<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> default one that only</font>

1169
00:46:01,710 --> 00:46:05,250
allows<font color="#E5E5E5"> Internet egress but if you do</font>

1170
00:46:03,360 --> 00:46:07,950
custom V PC and you deploy an Internet

1171
00:46:05,250 --> 00:46:09,510
gateway yes you can get V PC flow logs

1172
00:46:07,950 --> 00:46:14,279
<font color="#E5E5E5">and you can use your standard anomaly</font>

1173
00:46:09,510 --> 00:46:16,470
detection<font color="#CCCCCC"> grow pipeline have you seen</font>

1174
00:46:14,280 --> 00:46:18,210
these exploits in<font color="#CCCCCC"> the wild</font><font color="#E5E5E5"> or is this</font>

1175
00:46:16,470 --> 00:46:22,379
all stuff you've dreamed up<font color="#E5E5E5"> in your evil</font>

1176
00:46:18,210 --> 00:46:25,020
genius laboratory<font color="#CCCCCC"> so I can't really</font>

1177
00:46:22,380 --> 00:46:27,840
<font color="#E5E5E5">speak to incidents that I work on but I</font>

1178
00:46:25,020 --> 00:46:30,420
can tell you that<font color="#E5E5E5"> people are exploiting</font>

1179
00:46:27,840 --> 00:46:32,520
<font color="#E5E5E5">serverless functions in the wild</font>

1180
00:46:30,420 --> 00:46:35,190
<font color="#E5E5E5">especially in the open source space</font>

1181
00:46:32,520 --> 00:46:38,009
where it's<font color="#E5E5E5"> really easy</font><font color="#CCCCCC"> to see where the</font>

1182
00:46:35,190 --> 00:46:40,380
<font color="#CCCCCC">vulnerabilities are in the code so yeah</font>

1183
00:46:38,010 --> 00:46:43,790
it definitely does happen<font color="#CCCCCC"> I don't have</font>

1184
00:46:40,380 --> 00:46:43,790
any data on<font color="#CCCCCC"> how frequent</font>

1185
00:46:44,330 --> 00:46:48,210
with all the work<font color="#CCCCCC"> hello can you hear me</font>

1186
00:46:46,440 --> 00:46:50,880
with all the work<font color="#CCCCCC"> that you did with AWS</font>

1187
00:46:48,210 --> 00:46:53,340
to get all the<font color="#CCCCCC"> start up cold starts warm</font>

1188
00:46:50,880 --> 00:46:54,210
starts all the<font color="#E5E5E5"> event data and the lack</font>

1189
00:46:53,340 --> 00:46:55,830
<font color="#CCCCCC">of data that you</font><font color="#E5E5E5"> would get in</font>

1190
00:46:54,210 --> 00:46:57,630
transparency<font color="#CCCCCC"> from the other</font><font color="#E5E5E5"> vendors</font>

1191
00:46:55,830 --> 00:46:59,460
<font color="#E5E5E5">would</font><font color="#CCCCCC"> you be able</font><font color="#E5E5E5"> to give them feedback</font>

1192
00:46:57,630 --> 00:47:02,310
loops<font color="#E5E5E5"> to help strengthen some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

1193
00:46:59,460 --> 00:47:05,310
visibility<font color="#CCCCCC"> on those the question if I</font>

1194
00:47:02,310 --> 00:47:08,009
had to summarize was was the net result

1195
00:47:05,310 --> 00:47:09,600
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> project</font><font color="#E5E5E5"> a better</font><font color="#CCCCCC"> conversation</font>

1196
00:47:08,010 --> 00:47:12,720
with<font color="#E5E5E5"> these vendors about</font><font color="#CCCCCC"> transparency</font>

1197
00:47:09,600 --> 00:47:14,940
does<font color="#E5E5E5"> that summarize it yeah</font><font color="#CCCCCC"> they're</font>

1198
00:47:12,720 --> 00:47:17,040
they're definitely asking us at this

1199
00:47:14,940 --> 00:47:18,720
<font color="#E5E5E5">point</font><font color="#CCCCCC"> what we as consumers would like</font>

1200
00:47:17,040 --> 00:47:19,920
them to add to their products and so

1201
00:47:18,720 --> 00:47:23,399
we're<font color="#CCCCCC"> talking about patch management</font>

1202
00:47:19,920 --> 00:47:25,920
feeds or risk scores for warmness<font color="#CCCCCC"> on</font>

1203
00:47:23,400 --> 00:47:27,990
several levels<font color="#E5E5E5"> right</font><font color="#CCCCCC"> now with all the</font>

1204
00:47:25,920 --> 00:47:32,210
<font color="#E5E5E5">vendors that</font><font color="#CCCCCC"> we worked with so</font><font color="#E5E5E5"> great</font>

1205
00:47:27,990 --> 00:47:32,209
<font color="#CCCCCC">thanks we were thank</font><font color="#E5E5E5"> you</font>

1206
00:47:34,260 --> 00:47:40,119
[Applause]

