1
00:00:00,030 --> 00:00:06,000
so we're going to<font color="#E5E5E5"> be talking</font><font color="#CCCCCC"> about how</font>

2
00:00:03,210 --> 00:00:09,059
to remotely exploit<font color="#CCCCCC"> ios and android</font>

3
00:00:06,000 --> 00:00:11,670
devices<font color="#E5E5E5"> via</font><font color="#CCCCCC"> bug that we have named</font>

4
00:00:09,059 --> 00:00:15,389
<font color="#CCCCCC">broadband there's been</font><font color="#E5E5E5"> quite a lot</font><font color="#CCCCCC"> of</font>

5
00:00:11,670 --> 00:00:17,730
buzz about broadband recently<font color="#E5E5E5"> so we want</font>

6
00:00:15,389 --> 00:00:22,080
to tell<font color="#E5E5E5"> you why we</font><font color="#CCCCCC"> think it's a very</font>

7
00:00:17,730 --> 00:00:23,789
<font color="#CCCCCC">special</font><font color="#E5E5E5"> interesting and powerful bug and</font>

8
00:00:22,080 --> 00:00:30,419
<font color="#E5E5E5">also tell you a bit about the process</font>

9
00:00:23,789 --> 00:00:33,899
<font color="#E5E5E5">that led us to</font><font color="#CCCCCC"> this barber</font><font color="#E5E5E5"> but first of</font>

10
00:00:30,420 --> 00:00:36,570
all let me<font color="#E5E5E5"> just</font><font color="#CCCCCC"> introduce myself my name</font>

11
00:00:33,899 --> 00:00:38,910
<font color="#CCCCCC">is Nita Orenstein I've been doing</font>

12
00:00:36,570 --> 00:00:40,879
reverse engineering and vulnerability

13
00:00:38,910 --> 00:00:45,599
research for about<font color="#E5E5E5"> as</font><font color="#CCCCCC"> long</font><font color="#E5E5E5"> as I remember</font>

14
00:00:40,879 --> 00:00:47,989
<font color="#CCCCCC">I'm mostly interested in Android</font><font color="#E5E5E5"> and</font>

15
00:00:45,600 --> 00:00:51,840
some<font color="#E5E5E5"> low level systems such as baseband</font>

16
00:00:47,989 --> 00:00:54,239
Wi-Fi chips<font color="#CCCCCC"> boot loaders</font><font color="#E5E5E5"> and I've been</font>

17
00:00:51,840 --> 00:00:58,770
<font color="#E5E5E5">doing that for approximately the last</font>

18
00:00:54,239 --> 00:01:02,730
<font color="#E5E5E5">five years so</font><font color="#CCCCCC"> we're going</font><font color="#E5E5E5"> to be talking</font>

19
00:00:58,770 --> 00:01:05,070
<font color="#E5E5E5">about broad bonus our remote exploit the</font>

20
00:01:02,730 --> 00:01:08,490
for the first<font color="#E5E5E5"> remote exploit in quite</font>

21
00:01:05,069 --> 00:01:10,679
some<font color="#E5E5E5"> time to</font><font color="#CCCCCC"> be public and first of all</font>

22
00:01:08,490 --> 00:01:15,149
we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be defining what a remote</font>

23
00:01:10,680 --> 00:01:20,040
exploit actually is so in<font color="#E5E5E5"> our opinion a</font>

24
00:01:15,150 --> 00:01:22,200
remote exploit is not a browser exploit

25
00:01:20,040 --> 00:01:29,939
<font color="#E5E5E5">and we're going to</font><font color="#CCCCCC"> be explaining</font><font color="#E5E5E5"> exactly</font>

26
00:01:22,200 --> 00:01:34,710
<font color="#CCCCCC">why and we're going to be discussing how</font>

27
00:01:29,939 --> 00:01:36,829
<font color="#CCCCCC">we</font><font color="#E5E5E5"> found</font><font color="#CCCCCC"> this particular exploit</font><font color="#E5E5E5"> in in a</font>

28
00:01:34,710 --> 00:01:40,880
specific<font color="#CCCCCC"> and interesting attack surface</font>

29
00:01:36,829 --> 00:01:46,229
that was almost unexplored until<font color="#E5E5E5"> now and</font>

30
00:01:40,880 --> 00:01:48,329
we'll<font color="#E5E5E5"> be concluding with how we</font><font color="#CCCCCC"> leverage</font>

31
00:01:46,229 --> 00:01:51,270
this bug that we found<font color="#CCCCCC"> into the first</font>

32
00:01:48,329 --> 00:01:57,630
fully functional remote exploit<font color="#E5E5E5"> to be</font>

33
00:01:51,270 --> 00:02:00,539
public and in recent<font color="#E5E5E5"> years so first of</font>

34
00:01:57,630 --> 00:02:04,860
<font color="#E5E5E5">all what a remote exploit isn't we've</font>

35
00:02:00,540 --> 00:02:08,310
all been hearing<font color="#E5E5E5"> the news</font><font color="#CCCCCC"> about various</font>

36
00:02:04,860 --> 00:02:10,619
government<font color="#CCCCCC"> agencies in some countries</font>

37
00:02:08,310 --> 00:02:14,670
attacking dissidents

38
00:02:10,619 --> 00:02:16,680
and other<font color="#E5E5E5"> people with browser bugs</font>

39
00:02:14,670 --> 00:02:20,488
sending the message messes with

40
00:02:16,680 --> 00:02:24,260
malicious links now we believe<font color="#E5E5E5"> that if</font>

41
00:02:20,489 --> 00:02:30,269
<font color="#E5E5E5">you need the victim to click a link</font><font color="#CCCCCC"> and</font>

42
00:02:24,260 --> 00:02:33,420
to<font color="#CCCCCC"> actually interact</font><font color="#E5E5E5"> with with any</font>

43
00:02:30,269 --> 00:02:37,709
particular link or<font color="#CCCCCC"> whatever you</font><font color="#E5E5E5"> sending</font>

44
00:02:33,420 --> 00:02:39,929
him then<font color="#E5E5E5"> that's not a remote a remote is</font>

45
00:02:37,709 --> 00:02:42,989
something totally<font color="#E5E5E5"> different</font><font color="#CCCCCC"> it does not</font>

46
00:02:39,930 --> 00:02:46,890
require social<font color="#E5E5E5"> engineering so let's</font>

47
00:02:42,989 --> 00:02:49,049
define<font color="#E5E5E5"> what</font><font color="#CCCCCC"> the remote actually is so</font>

48
00:02:46,890 --> 00:02:52,078
these are the three<font color="#CCCCCC"> laws</font><font color="#E5E5E5"> three laws of</font>

49
00:02:49,049 --> 00:02:53,549
<font color="#E5E5E5">remote exploits</font><font color="#CCCCCC"> I suggest you take a</font>

50
00:02:52,079 --> 00:03:03,780
picture<font color="#E5E5E5"> because there's going to be a</font>

51
00:02:53,549 --> 00:03:06,450
quiz later<font color="#E5E5E5"> on sorry yeah so memorize</font>

52
00:03:03,780 --> 00:03:08,700
these three this<font color="#CCCCCC"> wee laws</font><font color="#E5E5E5"> first of all a</font>

53
00:03:06,450 --> 00:03:11,040
remote may not require<font color="#E5E5E5"> any human</font>

54
00:03:08,700 --> 00:03:14,010
interaction to trigger<font color="#E5E5E5"> that means you</font>

55
00:03:11,040 --> 00:03:17,630
can't click<font color="#E5E5E5"> on an SMS a link you can't</font>

56
00:03:14,010 --> 00:03:21,030
open an email<font color="#E5E5E5"> that's not a remote that's</font>

57
00:03:17,630 --> 00:03:26,510
actually we consider it<font color="#E5E5E5"> to be a local</font>

58
00:03:21,030 --> 00:03:29,760
exploit then<font color="#E5E5E5"> a remote may not make</font>

59
00:03:26,510 --> 00:03:32,880
<font color="#E5E5E5">assumptions about the system that it's</font>

60
00:03:29,760 --> 00:03:37,349
attacking<font color="#E5E5E5"> and there's a very simple</font>

61
00:03:32,880 --> 00:03:40,680
<font color="#CCCCCC">reason for</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> when you attack a target</font>

62
00:03:37,349 --> 00:03:42,149
remotely<font color="#E5E5E5"> your attack surface is much</font>

63
00:03:40,680 --> 00:03:44,760
more limited you have<font color="#CCCCCC"> a much</font><font color="#E5E5E5"> more</font>

64
00:03:42,150 --> 00:03:47,220
limited interaction with the target<font color="#E5E5E5"> so</font>

65
00:03:44,760 --> 00:03:49,048
supposing you're attacking a kernel or a

66
00:03:47,220 --> 00:03:51,060
<font color="#E5E5E5">browser you normally have some kind of</font>

67
00:03:49,049 --> 00:03:52,620
interface to<font color="#E5E5E5"> get feedback</font><font color="#CCCCCC"> to get some</font>

68
00:03:51,060 --> 00:03:54,720
kind<font color="#E5E5E5"> of data about the state of</font><font color="#CCCCCC"> the</font>

69
00:03:52,620 --> 00:03:56,669
<font color="#CCCCCC">system it helps you with</font><font color="#E5E5E5"> assumptions you</font>

70
00:03:54,720 --> 00:03:58,620
need to make<font color="#E5E5E5"> about the exploit you can't</font>

71
00:03:56,669 --> 00:04:03,000
make these kinds of assumptions<font color="#E5E5E5"> in a</font>

72
00:03:58,620 --> 00:04:06,120
remote<font color="#E5E5E5"> and the third important rule is a</font>

73
00:04:03,000 --> 00:04:09,480
remote<font color="#CCCCCC"> must leave the system</font><font color="#E5E5E5"> in a stable</font>

74
00:04:06,120 --> 00:04:11,069
<font color="#CCCCCC">state that's because you want to</font><font color="#E5E5E5"> be</font>

75
00:04:09,480 --> 00:04:14,010
persistent<font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> keep a stable</font>

76
00:04:11,069 --> 00:04:18,599
presence and you don't want<font color="#E5E5E5"> to alert the</font>

77
00:04:14,010 --> 00:04:21,440
target that you're<font color="#E5E5E5"> attacking so this</font>

78
00:04:18,599 --> 00:04:22,700
class of bugs<font color="#E5E5E5"> have been very very</font>

79
00:04:21,440 --> 00:04:26,200
prominent

80
00:04:22,700 --> 00:04:30,640
early<font color="#CCCCCC"> two-thousands we all remember</font>

81
00:04:26,200 --> 00:04:33,229
<font color="#E5E5E5">various worms and malware in</font><font color="#CCCCCC"> Windows</font>

82
00:04:30,640 --> 00:04:34,760
<font color="#E5E5E5">during those</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> you really didn't</font>

83
00:04:33,230 --> 00:04:35,960
need<font color="#CCCCCC"> to do much other than connect to</font>

84
00:04:34,760 --> 00:04:39,230
the internet and<font color="#E5E5E5"> your computer was</font>

85
00:04:35,960 --> 00:04:42,799
<font color="#E5E5E5">already owned and you didn't know</font>

86
00:04:39,230 --> 00:04:43,910
anything<font color="#E5E5E5"> about that</font><font color="#CCCCCC"> happening and these</font>

87
00:04:42,800 --> 00:04:50,140
days are long<font color="#CCCCCC"> gone</font>

88
00:04:43,910 --> 00:04:53,510
so why well there's been<font color="#CCCCCC"> a lot of</font>

89
00:04:50,140 --> 00:04:58,969
mitigations and awareness<font color="#CCCCCC"> about remotes</font>

90
00:04:53,510 --> 00:05:03,550
<font color="#CCCCCC">and if we look</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> Three Laws</font><font color="#E5E5E5"> they're</font>

91
00:04:58,970 --> 00:05:06,260
difficult<font color="#E5E5E5"> to</font><font color="#CCCCCC"> keep up because</font><font color="#E5E5E5"> to find</font>

92
00:05:03,550 --> 00:05:09,520
remotely exploitable bug<font color="#CCCCCC"> that doesn't</font>

93
00:05:06,260 --> 00:05:12,050
require<font color="#E5E5E5"> any interaction</font><font color="#CCCCCC"> from the user is</font>

94
00:05:09,520 --> 00:05:14,359
almost impossible<font color="#CCCCCC"> because the attack</font>

95
00:05:12,050 --> 00:05:16,880
surface is much more limited when you're

96
00:05:14,360 --> 00:05:20,570
attacking a target remotely<font color="#E5E5E5"> it's also</font>

97
00:05:16,880 --> 00:05:23,000
difficult because you need to make

98
00:05:20,570 --> 00:05:25,400
<font color="#E5E5E5">assumptions about the system because you</font>

99
00:05:23,000 --> 00:05:28,910
have a<font color="#E5E5E5"> SLR SLR randomizes</font><font color="#CCCCCC"> the address</font>

100
00:05:25,400 --> 00:05:31,580
space<font color="#CCCCCC"> so you never actually know for</font>

101
00:05:28,910 --> 00:05:33,050
certain where any addresses<font color="#E5E5E5"> are you need</font>

102
00:05:31,580 --> 00:05:34,370
some<font color="#E5E5E5"> kind of a leak to know that and</font>

103
00:05:33,050 --> 00:05:36,370
that's<font color="#E5E5E5"> a problem</font><font color="#CCCCCC"> because you have a</font>

104
00:05:34,370 --> 00:05:42,080
limited<font color="#E5E5E5"> interaction with a remote target</font>

105
00:05:36,370 --> 00:05:44,840
<font color="#E5E5E5">and another issue is that you cannot</font>

106
00:05:42,080 --> 00:05:47,659
<font color="#E5E5E5">make</font><font color="#CCCCCC"> any mistakes against remote targets</font>

107
00:05:44,840 --> 00:05:50,090
because normally if suppose you're

108
00:05:47,660 --> 00:05:53,890
attacking a<font color="#E5E5E5"> kernel if you crash it</font>

109
00:05:50,090 --> 00:05:56,030
<font color="#E5E5E5">there's a panic</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you're done so so</font>

110
00:05:53,890 --> 00:05:58,460
you're in a difficult<font color="#CCCCCC"> position where you</font>

111
00:05:56,030 --> 00:06:03,650
cannot make any<font color="#E5E5E5"> assumptions and yet you</font>

112
00:05:58,460 --> 00:06:08,090
cannot<font color="#E5E5E5"> crush the system so obviously</font>

113
00:06:03,650 --> 00:06:10,370
this is a very<font color="#CCCCCC"> difficult goal and</font><font color="#E5E5E5"> late</font>

114
00:06:08,090 --> 00:06:12,229
<font color="#CCCCCC">last year Google project zero have</font>

115
00:06:10,370 --> 00:06:15,470
announced a special bounty for remote

116
00:06:12,230 --> 00:06:17,360
exploits for Android<font color="#CCCCCC"> whose $350,000 if I</font>

117
00:06:15,470 --> 00:06:20,600
remember correctly there<font color="#E5E5E5"> was not a</font>

118
00:06:17,360 --> 00:06:23,540
single submission<font color="#E5E5E5"> so</font><font color="#CCCCCC"> apparently either</font>

119
00:06:20,600 --> 00:06:26,420
this<font color="#CCCCCC"> is too low</font><font color="#E5E5E5"> for that kind of for</font>

120
00:06:23,540 --> 00:06:31,940
<font color="#E5E5E5">that kind of exploit or it really is as</font>

121
00:06:26,420 --> 00:06:35,480
hard as we think so in attempting<font color="#CCCCCC"> to</font>

122
00:06:31,940 --> 00:06:36,560
resolve<font color="#E5E5E5"> this</font><font color="#CCCCCC"> problem about</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> can we</font>

123
00:06:35,480 --> 00:06:39,830
<font color="#CCCCCC">get a remote</font>

124
00:06:36,560 --> 00:06:42,680
exploit against<font color="#E5E5E5"> fully hardened mobile</font>

125
00:06:39,830 --> 00:06:44,240
phones such as<font color="#E5E5E5"> Android and iOS we</font>

126
00:06:42,680 --> 00:06:47,389
started looking at<font color="#E5E5E5"> the system from</font><font color="#CCCCCC"> a</font>

127
00:06:44,240 --> 00:06:49,400
higher<font color="#CCCCCC"> level so we have the main</font>

128
00:06:47,389 --> 00:06:52,370
application processor both in Android

129
00:06:49,400 --> 00:06:55,849
and<font color="#CCCCCC"> iOS</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> as a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> mitigations</font><font color="#E5E5E5"> going</font>

130
00:06:52,370 --> 00:07:00,410
on<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of hardening first we</font>

131
00:06:55,850 --> 00:07:03,410
have<font color="#CCCCCC"> d'Epinay SLR which prevent which</font>

132
00:07:00,410 --> 00:07:05,630
both prevent<font color="#E5E5E5"> code running from arbitrary</font>

133
00:07:03,410 --> 00:07:06,950
places in memory<font color="#E5E5E5"> and prevent us from</font>

134
00:07:05,630 --> 00:07:09,740
making assumptions<font color="#E5E5E5"> about the memory</font>

135
00:07:06,950 --> 00:07:12,200
space<font color="#CCCCCC"> and there's various new</font>

136
00:07:09,740 --> 00:07:13,820
<font color="#E5E5E5">medications such as span in pxn which</font>

137
00:07:12,200 --> 00:07:16,909
prevent us<font color="#E5E5E5"> from jumping to user and from</font>

138
00:07:13,820 --> 00:07:19,849
the kernel<font color="#E5E5E5"> or accessing data that we're</font>

139
00:07:16,910 --> 00:07:22,910
<font color="#CCCCCC">not</font><font color="#E5E5E5"> supposed to from</font><font color="#CCCCCC"> userland</font><font color="#E5E5E5"> or from</font>

140
00:07:19,850 --> 00:07:25,729
the kernel<font color="#E5E5E5"> so that's really hard work</font>

141
00:07:22,910 --> 00:07:28,340
<font color="#E5E5E5">for</font><font color="#CCCCCC"> us to develop</font><font color="#E5E5E5"> an expert in such</font>

142
00:07:25,729 --> 00:07:30,889
conditions especially<font color="#CCCCCC"> a remote one so</font>

143
00:07:28,340 --> 00:07:32,330
we've started<font color="#CCCCCC"> looking around</font><font color="#E5E5E5"> the</font>

144
00:07:30,889 --> 00:07:34,700
neighborhood<font color="#E5E5E5"> looking at a</font><font color="#CCCCCC"> mobile phone</font>

145
00:07:32,330 --> 00:07:40,250
but<font color="#CCCCCC"> not at the main application</font>

146
00:07:34,700 --> 00:07:42,320
processor and we've come up<font color="#CCCCCC"> with kind</font><font color="#E5E5E5"> of</font>

147
00:07:40,250 --> 00:07:45,350
two alternatives<font color="#E5E5E5"> to other chips that</font>

148
00:07:42,320 --> 00:07:48,440
<font color="#CCCCCC">exist</font><font color="#E5E5E5"> both on iOS and Android that</font><font color="#CCCCCC"> have</font>

149
00:07:45,350 --> 00:07:52,100
a very very<font color="#E5E5E5"> extensive</font><font color="#CCCCCC"> interaction with</font>

150
00:07:48,440 --> 00:07:53,870
the application processor so one of<font color="#E5E5E5"> them</font>

151
00:07:52,100 --> 00:07:55,880
is<font color="#E5E5E5"> the baseband which handles 3G and 4G</font>

152
00:07:53,870 --> 00:08:00,500
communication along<font color="#E5E5E5"> with many other</font>

153
00:07:55,880 --> 00:08:05,240
tasks and another is the Wi-Fi chip<font color="#E5E5E5"> both</font>

154
00:08:00,500 --> 00:08:07,220
of them have connection via<font color="#E5E5E5"> various</font>

155
00:08:05,240 --> 00:08:10,490
<font color="#E5E5E5">interfaces such as PCIe to the</font>

156
00:08:07,220 --> 00:08:13,210
application processor so they're in a

157
00:08:10,490 --> 00:08:17,270
<font color="#E5E5E5">much more convenient position to</font><font color="#CCCCCC"> attack</font>

158
00:08:13,210 --> 00:08:20,260
the kernel<font color="#E5E5E5"> the main system so we started</font>

159
00:08:17,270 --> 00:08:24,469
having a<font color="#E5E5E5"> look at those two subsystems</font>

160
00:08:20,260 --> 00:08:27,830
<font color="#CCCCCC">and first of all</font><font color="#E5E5E5"> we've considered</font><font color="#CCCCCC"> based</font>

161
00:08:24,470 --> 00:08:30,410
<font color="#E5E5E5">bands briefly now basements are a</font>

162
00:08:27,830 --> 00:08:32,150
fascinating attack surface very

163
00:08:30,410 --> 00:08:34,729
interesting<font color="#E5E5E5"> very fruitful ground for</font>

164
00:08:32,150 --> 00:08:37,848
bugs but there's a problem of

165
00:08:34,729 --> 00:08:39,560
fragmentation<font color="#CCCCCC"> especially</font><font color="#E5E5E5"> recently</font><font color="#CCCCCC"> up</font>

166
00:08:37,849 --> 00:08:40,849
<font color="#CCCCCC">until a few</font><font color="#E5E5E5"> years ago Qualcomm or the</font>

167
00:08:39,559 --> 00:08:44,329
market leader they were dominate

168
00:08:40,849 --> 00:08:46,959
dominate in this field but recently

169
00:08:44,330 --> 00:08:49,690
there's been<font color="#E5E5E5"> quite a few new competitors</font>

170
00:08:46,959 --> 00:08:55,349
grabbing popular<font color="#E5E5E5"> devices</font>

171
00:08:49,690 --> 00:08:57,490
have moved to to<font color="#E5E5E5"> enter</font><font color="#CCCCCC"> into Intel chips</font>

172
00:08:55,350 --> 00:09:01,030
<font color="#CCCCCC">Samsung have moved to the Shanon</font><font color="#E5E5E5"> based</font>

173
00:08:57,490 --> 00:09:05,680
<font color="#E5E5E5">bands though the Nexus of still with</font>

174
00:09:01,030 --> 00:09:10,089
Qualcomm<font color="#E5E5E5"> but other lower end LG and HTC</font>

175
00:09:05,680 --> 00:09:12,760
have moved to<font color="#CCCCCC"> mediatek so really if you</font>

176
00:09:10,090 --> 00:09:15,040
develop any sort<font color="#E5E5E5"> of exploit</font><font color="#CCCCCC"> or find a</font>

177
00:09:12,760 --> 00:09:17,920
bug in a<font color="#E5E5E5"> base band that would not get</font>

178
00:09:15,040 --> 00:09:20,189
<font color="#E5E5E5">you very far in terms of the percentage</font>

179
00:09:17,920 --> 00:09:22,719
of devices you<font color="#E5E5E5"> would be able to attack</font>

180
00:09:20,190 --> 00:09:26,310
so we've looked at the Wi-Fi chip and

181
00:09:22,720 --> 00:09:30,730
<font color="#E5E5E5">there the picture</font><font color="#CCCCCC"> was very</font><font color="#E5E5E5"> different</font>

182
00:09:26,310 --> 00:09:33,430
<font color="#E5E5E5">Broadcom are</font><font color="#CCCCCC"> a clear market leader</font><font color="#E5E5E5"> there</font>

183
00:09:30,730 --> 00:09:37,510
<font color="#E5E5E5">have been in all the iPhones since the</font>

184
00:09:33,430 --> 00:09:40,030
iPhone<font color="#E5E5E5"> 5 almost all Samsung galaxys and</font>

185
00:09:37,510 --> 00:09:43,060
notes all<font color="#E5E5E5"> of them that we've checked</font>

186
00:09:40,030 --> 00:09:46,930
<font color="#E5E5E5">that's the s3 all the way through s8 and</font>

187
00:09:43,060 --> 00:09:50,199
all the notes most<font color="#CCCCCC"> Google Nexus S</font><font color="#E5E5E5"> since</font>

188
00:09:46,930 --> 00:09:52,780
Google Nexus 5<font color="#E5E5E5"> and there's been some</font>

189
00:09:50,200 --> 00:09:56,590
various ages and<font color="#E5E5E5"> HTC's that use them</font>

190
00:09:52,780 --> 00:10:01,240
<font color="#E5E5E5">although not universally so obviously</font>

191
00:09:56,590 --> 00:10:04,600
this<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> much more interesting attack</font>

192
00:10:01,240 --> 00:10:07,480
surface because<font color="#E5E5E5"> you don't have to repeat</font>

193
00:10:04,600 --> 00:10:11,890
your work if you find one bug<font color="#E5E5E5"> you can</font>

194
00:10:07,480 --> 00:10:14,650
use<font color="#E5E5E5"> it in plenty</font><font color="#CCCCCC"> of places so and</font>

195
00:10:11,890 --> 00:10:17,439
there's a bonus<font color="#E5E5E5"> here we've discussed how</font>

196
00:10:14,650 --> 00:10:19,720
a<font color="#E5E5E5"> seller makes remote exploits almost</font>

197
00:10:17,440 --> 00:10:23,200
experiments are impossible without some

198
00:10:19,720 --> 00:10:24,850
kind of an info leak or an ability to to

199
00:10:23,200 --> 00:10:28,300
brute<font color="#CCCCCC"> force the</font><font color="#E5E5E5"> address space to find</font>

200
00:10:24,850 --> 00:10:30,400
addresses and in this case that's not<font color="#E5E5E5"> a</font>

201
00:10:28,300 --> 00:10:32,260
problem because on the Wi-Fi chip or

202
00:10:30,400 --> 00:10:36,459
memory is read/write/execute

203
00:10:32,260 --> 00:10:39,810
there is no depth<font color="#E5E5E5"> and</font><font color="#CCCCCC"> nor SLR it's</font>

204
00:10:36,460 --> 00:10:39,810
basically a<font color="#CCCCCC"> 90s</font><font color="#E5E5E5"> party</font>

205
00:10:43,509 --> 00:10:50,779
so let's start diving<font color="#E5E5E5"> into the Wi-Fi</font>

206
00:10:47,149 --> 00:10:54,860
<font color="#E5E5E5">system and chip and see what makes it</font>

207
00:10:50,779 --> 00:10:57,649
interesting<font color="#CCCCCC"> so first of all there's been</font>

208
00:10:54,860 --> 00:11:00,920
a lot of<font color="#E5E5E5"> work</font><font color="#CCCCCC"> about this particular</font>

209
00:10:57,649 --> 00:11:03,079
<font color="#E5E5E5">system in the past and we've learned a</font>

210
00:11:00,920 --> 00:11:06,229
<font color="#CCCCCC">lot from what other security researchers</font>

211
00:11:03,079 --> 00:11:08,899
have done so<font color="#E5E5E5"> the most recent work is</font>

212
00:11:06,230 --> 00:11:11,139
<font color="#E5E5E5">gardenia meaning of project zero always</font>

213
00:11:08,899 --> 00:11:14,689
done some<font color="#CCCCCC"> amazing research about this</font>

214
00:11:11,139 --> 00:11:18,230
particular<font color="#E5E5E5"> Broadcom chipset his office</font>

215
00:11:14,689 --> 00:11:20,599
also<font color="#E5E5E5"> found some few very nice but then</font>

216
00:11:18,230 --> 00:11:22,639
there was the next<font color="#E5E5E5"> month project</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the</font>

217
00:11:20,600 --> 00:11:25,790
semo group<font color="#E5E5E5"> if I'm</font><font color="#CCCCCC"> pronouncing correctly</font>

218
00:11:22,639 --> 00:11:29,629
<font color="#E5E5E5">and they've developed a very nice tool</font>

219
00:11:25,790 --> 00:11:32,420
set for hooking and<font color="#E5E5E5"> debugging</font><font color="#CCCCCC"> Broadcom</font>

220
00:11:29,629 --> 00:11:36,319
chipsets<font color="#E5E5E5"> and that's also been extremely</font>

221
00:11:32,420 --> 00:11:40,399
<font color="#E5E5E5">helpful for</font><font color="#CCCCCC"> us to</font><font color="#E5E5E5"> debug and to develop</font>

222
00:11:36,319 --> 00:11:43,099
the exploit<font color="#CCCCCC"> there was a bunch of Israeli</font>

223
00:11:40,399 --> 00:11:46,120
researchers in recon so we're kind of

224
00:11:43,100 --> 00:11:48,139
<font color="#E5E5E5">the pioneers in this field</font><font color="#CCCCCC"> they've</font>

225
00:11:46,120 --> 00:11:50,300
<font color="#CCCCCC">believed the first tranche together with</font>

226
00:11:48,139 --> 00:11:53,199
<font color="#E5E5E5">Andres Blanco to actually work on</font>

227
00:11:50,300 --> 00:11:56,300
patching<font color="#E5E5E5"> the quality the basement</font>

228
00:11:53,199 --> 00:11:58,000
<font color="#E5E5E5">Broadcom chipset and making it do</font>

229
00:11:56,300 --> 00:12:01,310
various things<font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> not supposed to</font>

230
00:11:58,000 --> 00:12:02,810
so<font color="#CCCCCC"> I'd like</font><font color="#E5E5E5"> to say thank you to</font><font color="#CCCCCC"> all</font>

231
00:12:01,310 --> 00:12:06,410
these<font color="#E5E5E5"> researchers and this is an example</font>

232
00:12:02,810 --> 00:12:10,250
<font color="#E5E5E5">of how we all help each other with this</font>

233
00:12:06,410 --> 00:12:12,589
with<font color="#E5E5E5"> the research we do so another</font>

234
00:12:10,250 --> 00:12:16,069
helpful thing about about those<font color="#CCCCCC"> Broadcom</font>

235
00:12:12,589 --> 00:12:18,649
chips is that broad<font color="#CCCCCC"> comms Wi-Fi division</font>

236
00:12:16,069 --> 00:12:21,860
was recently purchased by<font color="#CCCCCC"> Cyprus who</font>

237
00:12:18,649 --> 00:12:24,680
open sourced a lot of<font color="#E5E5E5"> the specs this is</font>

238
00:12:21,860 --> 00:12:26,389
<font color="#CCCCCC">uh this is</font><font color="#E5E5E5"> the diagram</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Broadcom</font>

239
00:12:24,680 --> 00:12:30,519
<font color="#CCCCCC">four three five four which powers the</font>

240
00:12:26,389 --> 00:12:35,240
<font color="#E5E5E5">iPhone 6 and I've simplified it for you</font>

241
00:12:30,519 --> 00:12:39,350
so<font color="#E5E5E5"> our basic architecture of a bit of</font>

242
00:12:35,240 --> 00:12:42,319
<font color="#CCCCCC">Broadcom chip is so we have an X I</font>

243
00:12:39,350 --> 00:12:46,360
backplane which connects the<font color="#CCCCCC"> various</font>

244
00:12:42,319 --> 00:12:48,139
parts then we have the main the main

245
00:12:46,360 --> 00:12:49,709
microcontroller which is an ARM Cortex

246
00:12:48,139 --> 00:12:54,279
<font color="#CCCCCC">of</font><font color="#E5E5E5"> four</font>

247
00:12:49,709 --> 00:12:58,300
then we have<font color="#CCCCCC"> d11</font><font color="#E5E5E5"> fight</font><font color="#CCCCCC"> ship which</font>

248
00:12:54,279 --> 00:13:00,810
handles which handles<font color="#E5E5E5"> RF and actually</font>

249
00:12:58,300 --> 00:13:06,040
processing packets from<font color="#CCCCCC"> over-the-air</font>

250
00:13:00,810 --> 00:13:10,420
<font color="#E5E5E5">then we have PCIe or SDIO which connect</font>

251
00:13:06,040 --> 00:13:14,620
this whole<font color="#E5E5E5"> system to the main to the</font>

252
00:13:10,420 --> 00:13:17,380
main ship to the<font color="#E5E5E5"> main processor via PCIe</font>

253
00:13:14,620 --> 00:13:20,079
works by a DMA<font color="#CCCCCC"> stas the arrow is a</font>

254
00:13:17,380 --> 00:13:23,079
proprietary<font color="#CCCCCC"> Broadcom interface which is</font>

255
00:13:20,079 --> 00:13:27,579
I believe slowly being phased out and

256
00:13:23,079 --> 00:13:31,000
then we have about<font color="#E5E5E5"> 900 care from in ROM</font>

257
00:13:27,579 --> 00:13:36,099
<font color="#CCCCCC">or neuro chips ROM actually holds most</font>

258
00:13:31,000 --> 00:13:38,970
of the instructions<font color="#CCCCCC"> most of the code</font><font color="#E5E5E5"> rom</font>

259
00:13:36,100 --> 00:13:44,440
was most of<font color="#E5E5E5"> the code rom is mainly for</font>

260
00:13:38,970 --> 00:13:46,569
patches for for bug fixes so basically

261
00:13:44,440 --> 00:13:48,339
every once in a while<font color="#E5E5E5"> there's a jump to</font>

262
00:13:46,569 --> 00:13:50,259
a function table<font color="#CCCCCC"> and there it</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> and</font>

263
00:13:48,339 --> 00:13:51,819
that's<font color="#CCCCCC"> where they</font><font color="#E5E5E5"> brought the function</font>

264
00:13:50,259 --> 00:13:53,769
table<font color="#E5E5E5"> is in ROM and that's where the</font><font color="#CCCCCC"> rod</font>

265
00:13:51,819 --> 00:14:03,189
<font color="#CCCCCC">come</font><font color="#E5E5E5"> people can put any jumps to</font><font color="#CCCCCC"> newark</font>

266
00:13:53,769 --> 00:14:07,420
<font color="#E5E5E5">code that they want to do patch so to</font>

267
00:14:03,190 --> 00:14:12,750
reverse this firmware was pretty

268
00:14:07,420 --> 00:14:15,969
<font color="#E5E5E5">extensive project it uses a proprietary</font>

269
00:14:12,750 --> 00:14:20,769
real-time operating system known as a

270
00:14:15,970 --> 00:14:23,470
<font color="#E5E5E5">gen DRTV</font><font color="#CCCCCC"> it was kind of a pain</font><font color="#E5E5E5"> to</font>

271
00:14:20,769 --> 00:14:25,660
reverse it the<font color="#E5E5E5"> code is pretty</font>

272
00:14:23,470 --> 00:14:27,760
complicated and there's a lot<font color="#E5E5E5"> of</font>

273
00:14:25,660 --> 00:14:32,709
<font color="#CCCCCC">functionality which you need to reverse</font>

274
00:14:27,760 --> 00:14:36,519
<font color="#E5E5E5">from scratch but fortunately the source</font>

275
00:14:32,709 --> 00:14:39,849
is leaked<font color="#E5E5E5"> at a very at about five</font><font color="#CCCCCC"> years</font>

276
00:14:36,519 --> 00:14:42,040
<font color="#CCCCCC">ago</font><font color="#E5E5E5"> and digging through Google with</font>

277
00:14:39,850 --> 00:14:45,759
various function names<font color="#E5E5E5"> led</font><font color="#CCCCCC"> us to these</font>

278
00:14:42,040 --> 00:14:48,579
proprietary<font color="#CCCCCC"> Broadcom sources which were</font>

279
00:14:45,759 --> 00:14:50,160
<font color="#CCCCCC">included with a project known as vm g</font>

280
00:14:48,579 --> 00:14:52,540
<font color="#E5E5E5">once we want to</font>

281
00:14:50,160 --> 00:14:54,819
apparently the<font color="#CCCCCC"> Broadcom drivers were</font>

282
00:14:52,540 --> 00:14:57,219
compiled rather than supply this<font color="#E5E5E5"> in</font>

283
00:14:54,819 --> 00:14:59,469
binary form which means<font color="#E5E5E5"> that a lot of</font>

284
00:14:57,220 --> 00:15:01,180
<font color="#E5E5E5">the source code is available so this</font>

285
00:14:59,470 --> 00:15:05,670
really helped us

286
00:15:01,180 --> 00:15:05,670
<font color="#CCCCCC">gain some perspective into</font><font color="#E5E5E5"> the system</font><font color="#CCCCCC"> so</font>

287
00:15:07,620 --> 00:15:14,050
<font color="#CCCCCC">after</font><font color="#E5E5E5"> getting a perspective about the</font>

288
00:15:12,070 --> 00:15:17,230
basic functionality of<font color="#E5E5E5"> the system</font><font color="#CCCCCC"> and</font>

289
00:15:14,050 --> 00:15:20,979
what it does we wanted<font color="#E5E5E5"> to dig in</font><font color="#CCCCCC"> and</font>

290
00:15:17,230 --> 00:15:22,779
look at the right attack surface<font color="#E5E5E5"> to</font>

291
00:15:20,980 --> 00:15:26,140
actually find a place that<font color="#E5E5E5"> could give us</font>

292
00:15:22,779 --> 00:15:27,640
<font color="#E5E5E5">a remote bug</font><font color="#CCCCCC"> a remote a remotely</font>

293
00:15:26,140 --> 00:15:31,120
exploitable bug because<font color="#E5E5E5"> this was the</font>

294
00:15:27,640 --> 00:15:32,920
purpose<font color="#CCCCCC"> of the whole project so now's</font>

295
00:15:31,120 --> 00:15:36,760
the time<font color="#CCCCCC"> for a first quiz who remembers</font>

296
00:15:32,920 --> 00:15:40,449
the first law of remotes<font color="#E5E5E5"> you can just</font>

297
00:15:36,760 --> 00:15:46,180
<font color="#E5E5E5">shut it out yeah</font>

298
00:15:40,450 --> 00:15:52,000
you can't interact<font color="#E5E5E5"> with humans so what</font>

299
00:15:46,180 --> 00:15:54,609
we needed<font color="#E5E5E5"> in in security terms is an</font>

300
00:15:52,000 --> 00:15:58,240
exploit<font color="#CCCCCC"> a</font><font color="#E5E5E5"> bug</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> doesn't require</font>

301
00:15:54,610 --> 00:16:01,000
authentication<font color="#E5E5E5"> in order to trigger which</font>

302
00:15:58,240 --> 00:16:06,070
means that the<font color="#E5E5E5"> user actually doesn't</font>

303
00:16:01,000 --> 00:16:09,850
need to actively connect<font color="#E5E5E5"> or log</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> to</font>

304
00:16:06,070 --> 00:16:13,600
any specific<font color="#E5E5E5"> place</font><font color="#CCCCCC"> or connect to an</font>

305
00:16:09,850 --> 00:16:18,810
access point<font color="#CCCCCC"> so that's a rather tall</font>

306
00:16:13,600 --> 00:16:24,300
order<font color="#E5E5E5"> and let's see how we approached it</font>

307
00:16:18,810 --> 00:16:28,420
so here's some basics<font color="#E5E5E5"> about the Wi-Fi</font>

308
00:16:24,300 --> 00:16:32,620
<font color="#E5E5E5">Association process before</font><font color="#CCCCCC"> you actually</font>

309
00:16:28,420 --> 00:16:34,599
reach wpa2 and any of these encryption

310
00:16:32,620 --> 00:16:38,170
<font color="#E5E5E5">matters which are supposed to to protect</font>

311
00:16:34,600 --> 00:16:41,380
you traffic there's a very simple packet

312
00:16:38,170 --> 00:16:44,680
<font color="#CCCCCC">exchange between the station between</font><font color="#E5E5E5"> the</font>

313
00:16:41,380 --> 00:16:48,580
client and<font color="#E5E5E5"> the access point and</font><font color="#CCCCCC"> that's</font>

314
00:16:44,680 --> 00:16:50,920
the<font color="#CCCCCC"> association</font><font color="#E5E5E5"> process</font><font color="#CCCCCC"> it begins with</font>

315
00:16:48,580 --> 00:16:55,120
our probe<font color="#E5E5E5"> request on behalf of the</font>

316
00:16:50,920 --> 00:16:56,770
station<font color="#CCCCCC"> the client the client basically</font>

317
00:16:55,120 --> 00:17:02,260
<font color="#E5E5E5">is looking for access points</font><font color="#CCCCCC"> to connect</font>

318
00:16:56,770 --> 00:17:05,349
to if an access point is nearby and<font color="#CCCCCC"> it's</font>

319
00:17:02,260 --> 00:17:07,470
configured to<font color="#E5E5E5"> allow anybody to if it's</font>

320
00:17:05,349 --> 00:17:11,520
configured to advertise its presence

321
00:17:07,470 --> 00:17:14,050
then it sends<font color="#CCCCCC"> out</font><font color="#E5E5E5"> a probe response then</font>

322
00:17:11,520 --> 00:17:18,129
there's an<font color="#E5E5E5"> exchange of</font>

323
00:17:14,050 --> 00:17:22,480
the an obsolete<font color="#CCCCCC"> set of packets known as</font>

324
00:17:18,130 --> 00:17:27,370
<font color="#CCCCCC">open sequence which is to be there to</font>

325
00:17:22,480 --> 00:17:31,390
implement WEP which is now obsolete<font color="#CCCCCC"> and</font>

326
00:17:27,369 --> 00:17:33,909
then if the client actually wants to

327
00:17:31,390 --> 00:17:37,660
<font color="#E5E5E5">connect to this access point it issues</font>

328
00:17:33,910 --> 00:17:39,010
an association<font color="#E5E5E5"> Association request</font><font color="#CCCCCC"> then</font>

329
00:17:37,660 --> 00:17:41,620
the access point if it<font color="#CCCCCC"> wants read the</font>

330
00:17:39,010 --> 00:17:44,920
can't connect<font color="#E5E5E5"> issues a response and then</font>

331
00:17:41,620 --> 00:17:49,300
<font color="#E5E5E5">they start to exchange data now the</font>

332
00:17:44,920 --> 00:17:52,150
authentication<font color="#CCCCCC"> process is only inside</font>

333
00:17:49,300 --> 00:17:54,220
this last phase within<font color="#E5E5E5"> data</font><font color="#CCCCCC"> wpa2 is</font>

334
00:17:52,150 --> 00:17:56,380
implemented on<font color="#CCCCCC"> top of</font><font color="#E5E5E5"> this association</font>

335
00:17:54,220 --> 00:17:59,700
<font color="#E5E5E5">process it's not</font><font color="#CCCCCC"> a part</font><font color="#E5E5E5"> of it which</font>

336
00:17:56,380 --> 00:18:03,310
means<font color="#E5E5E5"> that there is no authentication</font><font color="#CCCCCC"> in</font>

337
00:17:59,700 --> 00:18:07,510
all of<font color="#E5E5E5"> these phases</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> phases that we've</font>

338
00:18:03,310 --> 00:18:11,970
described now I know you're asking<font color="#E5E5E5"> a</font>

339
00:18:07,510 --> 00:18:15,430
<font color="#E5E5E5">question there's a catch here right</font>

340
00:18:11,970 --> 00:18:17,530
<font color="#E5E5E5">anybody</font><font color="#CCCCCC"> wants to like</font><font color="#E5E5E5"> shout out what's</font>

341
00:18:15,430 --> 00:18:23,700
the catch because<font color="#CCCCCC"> probably somebody must</font>

342
00:18:17,530 --> 00:18:23,700
<font color="#CCCCCC">be thinking about it sorry</font>

343
00:18:23,940 --> 00:18:30,100
yeah<font color="#CCCCCC"> okay</font>

344
00:18:25,570 --> 00:18:33,149
one issue here is that<font color="#E5E5E5"> you must be</font>

345
00:18:30,100 --> 00:18:35,649
thinking<font color="#E5E5E5"> the client actually</font><font color="#CCCCCC"> needs to</font>

346
00:18:33,150 --> 00:18:39,600
choose to connect to an access point<font color="#E5E5E5"> to</font>

347
00:18:35,650 --> 00:18:42,780
<font color="#E5E5E5">in to initiate this process of</font>

348
00:18:39,600 --> 00:18:46,240
<font color="#CCCCCC">association and that's basically true</font>

349
00:18:42,780 --> 00:18:50,710
except<font color="#CCCCCC"> for a mechanism built into</font><font color="#E5E5E5"> probe</font>

350
00:18:46,240 --> 00:18:54,790
probe requests in Wi-Fi which is that a

351
00:18:50,710 --> 00:18:56,530
client<font color="#E5E5E5"> actually advertises the SSID is</font>

352
00:18:54,790 --> 00:18:59,680
the access point names that it's looking

353
00:18:56,530 --> 00:19:01,260
<font color="#E5E5E5">for so for instance if you are Bob and</font>

354
00:18:59,680 --> 00:19:04,600
<font color="#E5E5E5">you've</font><font color="#CCCCCC"> connected</font><font color="#E5E5E5"> to an access point</font>

355
00:19:01,260 --> 00:19:07,870
<font color="#E5E5E5">called Bob home every once in a</font><font color="#CCCCCC"> while</font>

356
00:19:04,600 --> 00:19:12,250
<font color="#CCCCCC">you send out</font><font color="#E5E5E5"> probe</font><font color="#CCCCCC"> requests</font><font color="#E5E5E5"> if you're</font>

357
00:19:07,870 --> 00:19:16,689
not associated with<font color="#CCCCCC"> this name of that</font>

358
00:19:12,250 --> 00:19:18,490
<font color="#E5E5E5">particular access point so so</font><font color="#CCCCCC"> let's</font>

359
00:19:16,690 --> 00:19:22,360
let's see an example<font color="#CCCCCC"> from their real</font>

360
00:19:18,490 --> 00:19:25,929
world<font color="#CCCCCC"> I was sitting in one of the</font><font color="#E5E5E5"> halls</font>

361
00:19:22,360 --> 00:19:27,850
just<font color="#E5E5E5"> now with arrow dump</font>

362
00:19:25,929 --> 00:19:30,580
look at unassociated<font color="#CCCCCC"> glands looking for</font>

363
00:19:27,850 --> 00:19:40,059
for their home access points<font color="#E5E5E5"> let's have</font>

364
00:19:30,580 --> 00:19:42,129
a look at what I saw yeah so the<font color="#CCCCCC"> hole</font>

365
00:19:40,059 --> 00:19:43,629
was actually almost<font color="#E5E5E5"> empty</font><font color="#CCCCCC"> but look at</font>

366
00:19:42,129 --> 00:19:46,689
<font color="#CCCCCC">all these names I'm seeing look at all</font>

367
00:19:43,629 --> 00:19:49,869
these<font color="#CCCCCC"> on Associated clients sending out</font>

368
00:19:46,690 --> 00:19:53,019
names of<font color="#E5E5E5"> SS IDs</font><font color="#CCCCCC"> of access points that</font>

369
00:19:49,869 --> 00:19:54,340
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> by the way there's</font>

370
00:19:53,019 --> 00:19:55,899
quite a few<font color="#CCCCCC"> interesting names here if</font>

371
00:19:54,340 --> 00:19:58,269
you look carefully you'll<font color="#CCCCCC"> see an access</font>

372
00:19:55,899 --> 00:19:59,889
point<font color="#E5E5E5"> and you think it was</font><font color="#CCCCCC"> just here</font>

373
00:19:58,269 --> 00:20:04,450
a query for<font color="#E5E5E5"> an access point called</font>

374
00:19:59,889 --> 00:20:05,740
Stuxnet<font color="#CCCCCC"> and</font><font color="#E5E5E5"> every once in a while</font><font color="#CCCCCC"> it's</font>

375
00:20:04,450 --> 00:20:07,389
<font color="#CCCCCC">pretty interesting</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> just open</font><font color="#E5E5E5"> air</font><font color="#CCCCCC"> a</font>

376
00:20:05,740 --> 00:20:09,190
dump and look at what<font color="#E5E5E5"> people around you</font>

377
00:20:07,389 --> 00:20:12,629
are looking for it might tell<font color="#E5E5E5"> you a lot</font>

378
00:20:09,190 --> 00:20:12,629
<font color="#E5E5E5">more about them than</font><font color="#CCCCCC"> you think</font><font color="#E5E5E5"> so</font>

379
00:20:14,070 --> 00:20:26,019
so this thing actually lets you treat

380
00:20:21,700 --> 00:20:29,499
the<font color="#CCCCCC"> association</font><font color="#E5E5E5"> process as if it doesn't</font>

381
00:20:26,019 --> 00:20:31,450
require any interaction<font color="#E5E5E5"> so long as as a</font>

382
00:20:29,499 --> 00:20:35,080
victim has connected to an access point

383
00:20:31,450 --> 00:20:37,269
in the<font color="#CCCCCC"> past</font><font color="#E5E5E5"> and if you stay</font><font color="#CCCCCC"> around them</font>

384
00:20:35,080 --> 00:20:40,449
for let's say a minute or two<font color="#CCCCCC"> you should</font>

385
00:20:37,269 --> 00:20:44,830
<font color="#CCCCCC">be seeing</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of these and the beauty of</font>

386
00:20:40,450 --> 00:20:46,299
this thing is<font color="#E5E5E5"> that there's no</font>

387
00:20:44,830 --> 00:20:48,730
authentication involved in<font color="#E5E5E5"> this process</font>

388
00:20:46,299 --> 00:20:52,230
<font color="#CCCCCC">so even if it's a wpa2 or a radius</font>

389
00:20:48,730 --> 00:20:54,100
access point with the maximum<font color="#E5E5E5"> possible</font>

390
00:20:52,230 --> 00:20:56,559
<font color="#E5E5E5">provisions for authentication and</font>

391
00:20:54,100 --> 00:20:58,539
<font color="#CCCCCC">security you still don't</font><font color="#E5E5E5"> reach that</font>

392
00:20:56,559 --> 00:21:01,600
<font color="#CCCCCC">phase so long as you find</font><font color="#E5E5E5"> a bug in this</font>

393
00:20:58,539 --> 00:21:03,730
particular protocol<font color="#E5E5E5"> because</font><font color="#CCCCCC"> any</font>

394
00:21:01,600 --> 00:21:10,529
authentication<font color="#E5E5E5"> is done only after this</font>

395
00:21:03,730 --> 00:21:12,399
initial<font color="#E5E5E5"> exchange of packets so we've</font>

396
00:21:10,529 --> 00:21:17,559
convinced ourselves<font color="#E5E5E5"> so this is an</font>

397
00:21:12,399 --> 00:21:19,799
interesting attack surface<font color="#E5E5E5"> sorry yeah so</font>

398
00:21:17,559 --> 00:21:22,940
this<font color="#CCCCCC"> is an interesting attack surface</font>

399
00:21:19,799 --> 00:21:24,450
and now we'd like<font color="#CCCCCC"> to begin</font><font color="#E5E5E5"> to examine</font>

400
00:21:22,940 --> 00:21:26,769
[Music]

401
00:21:24,450 --> 00:21:35,249
how<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually attack it what do we</font>

402
00:21:26,769 --> 00:21:35,249
<font color="#E5E5E5">look for so basic Wi-Fi 8:02</font>

403
00:21:36,119 --> 00:21:40,429
<font color="#CCCCCC">basic header</font>

404
00:21:38,750 --> 00:21:43,310
it's pretty small it only includes

405
00:21:40,430 --> 00:21:47,600
<font color="#E5E5E5">addresses and some bits denoting the</font>

406
00:21:43,310 --> 00:21:51,470
frame type and other info there's not

407
00:21:47,600 --> 00:21:53,540
much potential for<font color="#E5E5E5"> bugs there but the</font>

408
00:21:51,470 --> 00:21:55,010
real info the real meat<font color="#E5E5E5"> carried in the</font>

409
00:21:53,540 --> 00:21:57,320
packet<font color="#E5E5E5"> and we're talking about packets</font>

410
00:21:55,010 --> 00:22:02,030
for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> association</font><font color="#E5E5E5"> process the real</font>

411
00:21:57,320 --> 00:22:03,649
meat comes in<font color="#E5E5E5"> a variable length addition</font>

412
00:22:02,030 --> 00:22:04,639
to the packet<font color="#E5E5E5"> it's known as an</font>

413
00:22:03,650 --> 00:22:06,830
information element

414
00:22:04,640 --> 00:22:09,230
it's<font color="#CCCCCC"> appended to</font><font color="#E5E5E5"> the end</font><font color="#CCCCCC"> of the packet</font>

415
00:22:06,830 --> 00:22:10,850
<font color="#E5E5E5">and you can have as many information you</font>

416
00:22:09,230 --> 00:22:12,410
want in a packet<font color="#E5E5E5"> that's the way that</font>

417
00:22:10,850 --> 00:22:13,580
access points and<font color="#E5E5E5"> clients exchange</font>

418
00:22:12,410 --> 00:22:17,360
information<font color="#CCCCCC"> between them</font>

419
00:22:13,580 --> 00:22:20,270
and the way that<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> are constructed</font>

420
00:22:17,360 --> 00:22:22,610
is that it's<font color="#E5E5E5"> basically just a simple</font><font color="#CCCCCC"> TLV</font>

421
00:22:20,270 --> 00:22:29,800
<font color="#E5E5E5">one byte for type one byte for length</font>

422
00:22:22,610 --> 00:22:34,550
<font color="#E5E5E5">and then a variable length data area and</font>

423
00:22:29,800 --> 00:22:37,550
you can have<font color="#E5E5E5"> five</font><font color="#CCCCCC"> ten even more of these</font>

424
00:22:34,550 --> 00:22:39,470
<font color="#CCCCCC">II's</font><font color="#E5E5E5"> in a packet depending on the</font>

425
00:22:37,550 --> 00:22:42,070
capabilities of<font color="#E5E5E5"> the access point and the</font>

426
00:22:39,470 --> 00:22:46,520
client what<font color="#CCCCCC"> they want to tell</font><font color="#E5E5E5"> each other</font>

427
00:22:42,070 --> 00:22:50,600
so this is an interesting place to<font color="#E5E5E5"> look</font>

428
00:22:46,520 --> 00:22:54,550
for bugs because in<font color="#E5E5E5"> old and</font><font color="#CCCCCC"> insecure</font>

429
00:22:50,600 --> 00:22:56,990
software<font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> known minefield that</font>

430
00:22:54,550 --> 00:22:59,480
sometimes programmers don't<font color="#E5E5E5"> particularly</font>

431
00:22:56,990 --> 00:23:01,520
<font color="#E5E5E5">look at the length field they don't they</font>

432
00:22:59,480 --> 00:23:02,480
don't remember<font color="#E5E5E5"> to check whether the</font><font color="#CCCCCC"> I</font>

433
00:23:01,520 --> 00:23:05,300
look<font color="#CCCCCC"> at the buffers they've allocated</font>

434
00:23:02,480 --> 00:23:06,650
are big enough<font color="#E5E5E5"> to hold the info</font><font color="#CCCCCC"> that</font>

435
00:23:05,300 --> 00:23:09,590
they're copying from the<font color="#E5E5E5"> packet so</font>

436
00:23:06,650 --> 00:23:15,760
naturally<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was an interesting place</font>

437
00:23:09,590 --> 00:23:18,860
<font color="#CCCCCC">to look</font><font color="#E5E5E5"> for bugs so we wanted to to</font>

438
00:23:15,760 --> 00:23:22,760
narrow down our reverse engineering

439
00:23:18,860 --> 00:23:26,570
process to those<font color="#CCCCCC"> specific places where</font>

440
00:23:22,760 --> 00:23:30,140
we<font color="#E5E5E5"> think that such bubs could be found</font>

441
00:23:26,570 --> 00:23:35,600
<font color="#CCCCCC">to</font><font color="#E5E5E5"> places that actually handle that</font>

442
00:23:30,140 --> 00:23:40,490
parsing<font color="#CCCCCC"> of those particular information</font>

443
00:23:35,600 --> 00:23:44,570
<font color="#CCCCCC">elements</font><font color="#E5E5E5"> so that that was made easy by</font>

444
00:23:40,490 --> 00:23:47,780
<font color="#E5E5E5">the</font><font color="#CCCCCC"> art</font><font color="#E5E5E5"> byte by the design</font><font color="#CCCCCC"> of the femur</font>

445
00:23:44,570 --> 00:23:49,159
of the<font color="#E5E5E5"> code it's very</font><font color="#CCCCCC"> modular</font><font color="#E5E5E5"> you can</font>

446
00:23:47,780 --> 00:23:50,550
see that it's<font color="#E5E5E5"> divided into particular</font>

447
00:23:49,160 --> 00:23:54,450
modules which are being loaded

448
00:23:50,550 --> 00:23:56,970
attached<font color="#E5E5E5"> when when the chip boots up so</font>

449
00:23:54,450 --> 00:23:58,650
that made it<font color="#CCCCCC"> very easy to</font><font color="#E5E5E5"> start having a</font>

450
00:23:56,970 --> 00:24:03,720
look and pinpoint particular protocols

451
00:23:58,650 --> 00:24:08,130
that were interested in<font color="#E5E5E5"> and we found</font>

452
00:24:03,720 --> 00:24:11,790
this function which helped<font color="#E5E5E5"> us a lot</font><font color="#CCCCCC"> this</font>

453
00:24:08,130 --> 00:24:17,090
<font color="#CCCCCC">is a function which it's called</font><font color="#E5E5E5"> I am at</font>

454
00:24:11,790 --> 00:24:19,860
<font color="#CCCCCC">powers</font><font color="#E5E5E5"> function and this handles this</font>

455
00:24:17,090 --> 00:24:24,810
basically registers a<font color="#E5E5E5"> callback</font><font color="#CCCCCC"> to handle</font>

456
00:24:19,860 --> 00:24:27,030
<font color="#E5E5E5">i'ii teii ease of specific type and you</font>

457
00:24:24,810 --> 00:24:29,700
can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> there's a field</font><font color="#E5E5E5"> I am type which</font>

458
00:24:27,030 --> 00:24:32,160
denotes the<font color="#CCCCCC"> ie that the function</font><font color="#E5E5E5"> is</font>

459
00:24:29,700 --> 00:24:34,830
supposed<font color="#E5E5E5"> to handle the callback</font><font color="#CCCCCC"> and then</font>

460
00:24:32,160 --> 00:24:36,720
there<font color="#E5E5E5"> is the subtype field which tells</font>

461
00:24:34,830 --> 00:24:39,710
you which<font color="#E5E5E5"> kind of a packet it is which</font>

462
00:24:36,720 --> 00:24:42,570
which means<font color="#E5E5E5"> whether it's an association</font>

463
00:24:39,710 --> 00:24:45,150
<font color="#E5E5E5">response a request or probe request</font>

464
00:24:42,570 --> 00:24:47,460
<font color="#E5E5E5">which packet is it in the</font><font color="#CCCCCC"> association</font>

465
00:24:45,150 --> 00:24:50,520
<font color="#E5E5E5">process so it was very convenient to</font>

466
00:24:47,460 --> 00:24:52,400
narrow down the protocols which we

467
00:24:50,520 --> 00:24:55,410
thought would be<font color="#E5E5E5"> particularly</font>

468
00:24:52,400 --> 00:25:00,600
<font color="#E5E5E5">complicated or difficult to handle</font>

469
00:24:55,410 --> 00:25:04,880
correctly<font color="#E5E5E5"> the data being transferred in</font>

470
00:25:00,600 --> 00:25:11,879
the packets of<font color="#CCCCCC"> the Association</font><font color="#E5E5E5"> process</font>

471
00:25:04,880 --> 00:25:14,390
and<font color="#E5E5E5"> we've mapped xrefs for four</font>

472
00:25:11,880 --> 00:25:17,370
particular modules handling protocols

473
00:25:14,390 --> 00:25:21,620
<font color="#E5E5E5">which seemed interesting now this was</font>

474
00:25:17,370 --> 00:25:21,620
also<font color="#CCCCCC"> a tricky part because for instance</font>

475
00:25:21,740 --> 00:25:28,890
you can<font color="#CCCCCC"> see some references here to c c</font>

476
00:25:24,690 --> 00:25:32,610
<font color="#CCCCCC">xt d LS which are protocols</font><font color="#E5E5E5"> which which</font>

477
00:25:28,890 --> 00:25:34,440
are not handled before authentication so

478
00:25:32,610 --> 00:25:37,250
that was not really<font color="#CCCCCC"> relevant</font><font color="#E5E5E5"> for us we</font>

479
00:25:34,440 --> 00:25:40,530
<font color="#E5E5E5">are looking for that small specific</font>

480
00:25:37,250 --> 00:25:43,460
subset of protocols<font color="#E5E5E5"> which are handled</font>

481
00:25:40,530 --> 00:25:47,780
during<font color="#E5E5E5"> your association process and</font>

482
00:25:43,460 --> 00:25:50,780
that's<font color="#E5E5E5"> how we reached our</font><font color="#CCCCCC"> barb</font>

483
00:25:47,780 --> 00:25:50,780
<font color="#E5E5E5">eventually</font>

484
00:25:53,830 --> 00:26:02,289
so there's a protocol<font color="#E5E5E5"> in in Wi-Fi known</font>

485
00:25:58,450 --> 00:26:03,639
<font color="#E5E5E5">as the wireless media extensions</font><font color="#CCCCCC"> we</font>

486
00:26:02,289 --> 00:26:06,158
don't<font color="#E5E5E5"> need to really go into too much</font>

487
00:26:03,639 --> 00:26:08,758
depth about what<font color="#CCCCCC"> this protocol does</font><font color="#E5E5E5"> it's</font>

488
00:26:06,159 --> 00:26:12,570
designed to let<font color="#E5E5E5"> the access point know</font>

489
00:26:08,759 --> 00:26:14,980
about<font color="#CCCCCC"> our</font><font color="#E5E5E5"> quality of service</font>

490
00:26:12,570 --> 00:26:18,070
requirements<font color="#E5E5E5"> for instance if the client</font>

491
00:26:14,980 --> 00:26:20,080
is<font color="#E5E5E5"> our handling video or a voice over IP</font>

492
00:26:18,070 --> 00:26:25,418
then the access point<font color="#CCCCCC"> can give priority</font>

493
00:26:20,080 --> 00:26:27,428
to the packets which are<font color="#E5E5E5"> handle which</font>

494
00:26:25,419 --> 00:26:30,369
handle traffic<font color="#E5E5E5"> which requires good</font>

495
00:26:27,429 --> 00:26:34,710
performance<font color="#CCCCCC"> so there's a field which in</font>

496
00:26:30,369 --> 00:26:37,090
<font color="#E5E5E5">which the client specifies what are the</font>

497
00:26:34,710 --> 00:26:40,179
what<font color="#CCCCCC"> are its requirements whether it</font>

498
00:26:37,090 --> 00:26:41,769
supports<font color="#CCCCCC"> WME or not</font><font color="#E5E5E5"> and this is being</font>

499
00:26:40,179 --> 00:26:46,989
parsed as part<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> association</font>

500
00:26:41,769 --> 00:26:51,220
<font color="#E5E5E5">process and we've come across this</font>

501
00:26:46,989 --> 00:26:55,869
function if you<font color="#CCCCCC"> look at it</font><font color="#E5E5E5"> for a second</font>

502
00:26:51,220 --> 00:26:57,549
it basically shouts out<font color="#E5E5E5"> Bob and again</font>

503
00:26:55,869 --> 00:27:00,249
<font color="#E5E5E5">this happens a lot when</font><font color="#CCCCCC"> you deal with</font>

504
00:26:57,549 --> 00:27:01,418
embedded systems you find<font color="#E5E5E5"> bugs just like</font>

505
00:27:00,249 --> 00:27:04,720
they<font color="#E5E5E5"> used to look in the good old days</font>

506
00:27:01,419 --> 00:27:07,119
so when I was<font color="#E5E5E5"> starting</font><font color="#CCCCCC"> out you basically</font>

507
00:27:04,720 --> 00:27:08,919
<font color="#E5E5E5">just</font><font color="#CCCCCC"> had to grab 4mm</font><font color="#E5E5E5"> copy in</font><font color="#CCCCCC"> a source</font>

508
00:27:07,119 --> 00:27:12,279
code<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> how you found most of</font>

509
00:27:08,919 --> 00:27:14,470
<font color="#CCCCCC">your bugs</font><font color="#E5E5E5"> in this case we couldn't</font>

510
00:27:12,279 --> 00:27:15,999
couldn't use this technique<font color="#CCCCCC"> because we</font>

511
00:27:14,470 --> 00:27:20,559
were<font color="#CCCCCC"> looking for bugs</font><font color="#E5E5E5"> in a very specific</font>

512
00:27:15,999 --> 00:27:25,690
attack surface but once we<font color="#CCCCCC"> narrowed down</font>

513
00:27:20,559 --> 00:27:27,850
<font color="#E5E5E5">the attack surface</font><font color="#CCCCCC"> to two to a</font><font color="#E5E5E5"> place</font>

514
00:27:25,690 --> 00:27:31,299
which can be code which can be reached

515
00:27:27,850 --> 00:27:36,369
without any prior authentication that's

516
00:27:31,299 --> 00:27:39,129
when we found<font color="#E5E5E5"> this bar this this bar but</font>

517
00:27:36,369 --> 00:27:42,070
before we<font color="#CCCCCC"> actually could confirm that</font>

518
00:27:39,129 --> 00:27:46,830
<font color="#E5E5E5">it's a bug we wanted to check</font><font color="#CCCCCC"> that the</font>

519
00:27:42,070 --> 00:27:49,928
buffer being copied into was actually

520
00:27:46,830 --> 00:27:51,879
too<font color="#CCCCCC"> small to hold</font><font color="#E5E5E5"> the data if we look at</font>

521
00:27:49,929 --> 00:27:54,249
the bug you<font color="#CCCCCC"> can see that there's a mem</font>

522
00:27:51,879 --> 00:27:58,269
copy here<font color="#E5E5E5"> and we don't see any size</font>

523
00:27:54,249 --> 00:28:01,210
check at all anywhere and that<font color="#CCCCCC"> means</font>

524
00:27:58,269 --> 00:28:06,220
that we can specify an<font color="#E5E5E5"> iln as big as we</font>

525
00:28:01,210 --> 00:28:07,210
want and when<font color="#E5E5E5"> we look at the</font><font color="#CCCCCC"> function</font>

526
00:28:06,220 --> 00:28:11,740
which allocates this

527
00:28:07,210 --> 00:28:16,149
buffer we see that<font color="#CCCCCC"> it's size is only</font><font color="#E5E5E5"> 44</font>

528
00:28:11,740 --> 00:28:17,860
<font color="#E5E5E5">bytes while we have one bytes</font><font color="#CCCCCC"> to in the</font>

529
00:28:16,149 --> 00:28:19,989
in the length field which means<font color="#E5E5E5"> we can</font>

530
00:28:17,860 --> 00:28:26,168
<font color="#E5E5E5">make a maximum</font><font color="#CCCCCC"> of a maximum length of</font>

531
00:28:19,990 --> 00:28:31,210
255 so 255 minus 44<font color="#E5E5E5"> gives us 211 bytes</font>

532
00:28:26,169 --> 00:28:33,549
of<font color="#CCCCCC"> overflow</font><font color="#E5E5E5"> which is actually</font><font color="#CCCCCC"> very nice</font>

533
00:28:31,210 --> 00:28:36,520
<font color="#CCCCCC">because it gives us</font><font color="#E5E5E5"> a lot a lot of</font>

534
00:28:33,549 --> 00:28:39,279
leeway<font color="#E5E5E5"> often</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> flows are small they</font>

535
00:28:36,520 --> 00:28:42,100
can be<font color="#CCCCCC"> 8 bytes 4 bytes and then they're</font>

536
00:28:39,279 --> 00:28:50,559
much harder<font color="#E5E5E5"> to exploit this actually</font>

537
00:28:42,100 --> 00:28:52,840
gave us a lot more flexibility and we

538
00:28:50,559 --> 00:28:55,690
started triggering this bug on various

539
00:28:52,840 --> 00:29:02,860
devices<font color="#CCCCCC"> so this is how it looked</font><font color="#E5E5E5"> on my</font>

540
00:28:55,690 --> 00:29:05,620
<font color="#CCCCCC">samsung this is an s7 now this is pretty</font>

541
00:29:02,860 --> 00:29:08,189
interesting<font color="#E5E5E5"> look at what happens when I</font>

542
00:29:05,620 --> 00:29:08,189
trigger the bug

543
00:29:15,820 --> 00:29:23,070
so we see<font color="#E5E5E5"> that the Wi-Fi system turns</font>

544
00:29:19,779 --> 00:29:25,239
off there is some indication to the user

545
00:29:23,070 --> 00:29:30,580
<font color="#E5E5E5">but</font><font color="#CCCCCC"> you should</font><font color="#E5E5E5"> probably keep in mind</font>

546
00:29:25,239 --> 00:29:33,070
that given<font color="#CCCCCC"> that</font><font color="#E5E5E5"> probe request is</font><font color="#CCCCCC"> being</font>

547
00:29:30,580 --> 00:29:35,019
sent out without<font color="#E5E5E5"> the users interaction</font>

548
00:29:33,070 --> 00:29:36,820
<font color="#CCCCCC">it's enough for the phone</font><font color="#E5E5E5"> to be in your</font>

549
00:29:35,019 --> 00:29:40,119
<font color="#E5E5E5">pocket and not touch then still it with</font>

550
00:29:36,820 --> 00:29:43,509
some<font color="#CCCCCC"> aerobic quest</font><font color="#E5E5E5"> and it will associate</font>

551
00:29:40,119 --> 00:29:46,570
with an access point<font color="#E5E5E5"> if it's if it</font>

552
00:29:43,509 --> 00:29:50,999
already recognizes<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and just the way</font>

553
00:29:46,570 --> 00:29:53,139
you know<font color="#CCCCCC"> like you walk you walk home</font><font color="#E5E5E5"> and</font>

554
00:29:50,999 --> 00:29:54,700
you take the phone out from your pocket

555
00:29:53,139 --> 00:29:57,849
<font color="#E5E5E5">and it's already</font><font color="#CCCCCC"> connected and that's</font>

556
00:29:54,700 --> 00:30:00,039
<font color="#E5E5E5">because of this this provision that's</font>

557
00:29:57,849 --> 00:30:02,830
because it looks for access points

558
00:30:00,039 --> 00:30:04,749
<font color="#E5E5E5">without any interaction</font><font color="#CCCCCC"> from you so in</font>

559
00:30:02,830 --> 00:30:05,918
case you do trigger<font color="#E5E5E5"> a crash when</font><font color="#CCCCCC"> the</font>

560
00:30:04,749 --> 00:30:07,509
phone is<font color="#CCCCCC"> doing that when it's</font>

561
00:30:05,919 --> 00:30:12,070
automatically looking for<font color="#CCCCCC"> access points</font>

562
00:30:07,509 --> 00:30:14,169
<font color="#E5E5E5">you will not see any user we will not</font>

563
00:30:12,070 --> 00:30:17,349
see<font color="#E5E5E5"> any indication to the</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> at all</font>

564
00:30:14,169 --> 00:30:21,460
<font color="#E5E5E5">and after about</font><font color="#CCCCCC"> 5 seconds</font><font color="#E5E5E5"> if you press</font>

565
00:30:17,349 --> 00:30:24,820
the chip it comes back<font color="#E5E5E5"> up</font><font color="#CCCCCC"> so rather</font><font color="#E5E5E5"> than</font>

566
00:30:21,460 --> 00:30:28,479
a disruption<font color="#E5E5E5"> of a few seconds for Wi-Fi</font>

567
00:30:24,820 --> 00:30:31,570
connectivity<font color="#E5E5E5"> there's no indication the</font>

568
00:30:28,479 --> 00:30:33,190
story was different<font color="#CCCCCC"> on my Mac which was</font>

569
00:30:31,570 --> 00:30:39,399
also<font color="#E5E5E5"> vulnerable it also had a broad term</font>

570
00:30:33,190 --> 00:30:43,119
chip let's look at what happens so I'm

571
00:30:39,399 --> 00:30:45,988
connecting<font color="#CCCCCC"> to to an access point</font><font color="#E5E5E5"> which</font>

572
00:30:43,119 --> 00:30:45,988
sends out<font color="#E5E5E5"> the exploit</font>

573
00:30:50,660 --> 00:30:57,410
and boom<font color="#CCCCCC"> kernel panic so this is a good</font>

574
00:30:55,250 --> 00:30:59,480
time to<font color="#CCCCCC"> mention that there's a</font>

575
00:30:57,410 --> 00:31:03,260
difference in implementation between

576
00:30:59,480 --> 00:31:08,330
mobile devices and laptops<font color="#CCCCCC"> so in mobile</font>

577
00:31:03,260 --> 00:31:12,500
devices<font color="#CCCCCC"> Wi-Fi chip sets are used in a</font>

578
00:31:08,330 --> 00:31:15,470
setting known as<font color="#CCCCCC"> half-full Mac which</font>

579
00:31:12,500 --> 00:31:20,720
means that they handle a<font color="#E5E5E5"> lot of the work</font>

580
00:31:15,470 --> 00:31:22,520
and<font color="#CCCCCC"> an</font><font color="#E5E5E5"> association and processing it's</font>

581
00:31:20,720 --> 00:31:27,830
basically<font color="#CCCCCC"> in layer three</font><font color="#E5E5E5"> stuff it's</font>

582
00:31:22,520 --> 00:31:29,120
known as MLM<font color="#CCCCCC"> II and in laptops in</font>

583
00:31:27,830 --> 00:31:32,090
desktops and laptops

584
00:31:29,120 --> 00:31:34,250
<font color="#E5E5E5">it's the kernel which handles it so what</font>

585
00:31:32,090 --> 00:31:35,929
we're seeing<font color="#CCCCCC"> here is that the</font>

586
00:31:34,250 --> 00:31:38,660
<font color="#E5E5E5">Association process is being handled by</font>

587
00:31:35,930 --> 00:31:42,920
the kernel<font color="#CCCCCC"> and it's</font><font color="#E5E5E5"> choking on our bug</font>

588
00:31:38,660 --> 00:31:44,240
<font color="#CCCCCC">in</font><font color="#E5E5E5"> crashing now this is not that good</font>

589
00:31:42,920 --> 00:31:46,610
for<font color="#E5E5E5"> exploitation and we can talk about</font>

590
00:31:44,240 --> 00:31:48,230
<font color="#CCCCCC">it later in</font><font color="#E5E5E5"> the meantime we stay with</font>

591
00:31:46,610 --> 00:31:55,969
mobile phones because that was our focus

592
00:31:48,230 --> 00:31:59,120
for<font color="#CCCCCC"> this research so now let's continue</font>

593
00:31:55,970 --> 00:32:01,300
<font color="#E5E5E5">it's time for another quiz</font><font color="#CCCCCC"> who remembers</font>

594
00:31:59,120 --> 00:32:04,000
<font color="#E5E5E5">the second law of</font><font color="#CCCCCC"> remotes</font>

595
00:32:01,300 --> 00:32:09,200
[Music]

596
00:32:04,000 --> 00:32:12,500
no assumptions you cannot make any

597
00:32:09,200 --> 00:32:14,150
<font color="#E5E5E5">assumptions about the system and again</font>

598
00:32:12,500 --> 00:32:16,010
the<font color="#E5E5E5"> reason is that when</font><font color="#CCCCCC"> you're attacking</font>

599
00:32:14,150 --> 00:32:19,250
<font color="#E5E5E5">a remote target</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have very little</font>

600
00:32:16,010 --> 00:32:20,960
<font color="#E5E5E5">indication of the state it's currently</font>

601
00:32:19,250 --> 00:32:23,840
<font color="#CCCCCC">in you don't</font><font color="#E5E5E5"> know about its heap you</font>

602
00:32:20,960 --> 00:32:27,200
don't know<font color="#CCCCCC"> about which files are open</font>

603
00:32:23,840 --> 00:32:29,270
you have a much smaller<font color="#E5E5E5"> interface than</font>

604
00:32:27,200 --> 00:32:32,690
you do for<font color="#E5E5E5"> instance when you're</font>

605
00:32:29,270 --> 00:32:34,070
attacking<font color="#E5E5E5"> a browser and you have</font>

606
00:32:32,690 --> 00:32:37,040
JavaScript<font color="#E5E5E5"> or you're attacking the</font>

607
00:32:34,070 --> 00:32:38,450
<font color="#CCCCCC">kernel and you have</font><font color="#E5E5E5"> Cisco's remotes are</font>

608
00:32:37,040 --> 00:32:40,580
completely<font color="#E5E5E5"> different you normally have</font>

609
00:32:38,450 --> 00:32:42,110
very limited protocols such as<font color="#E5E5E5"> the</font>

610
00:32:40,580 --> 00:32:44,540
<font color="#CCCCCC">association</font><font color="#E5E5E5"> process which is what we</font>

611
00:32:42,110 --> 00:32:46,189
have<font color="#E5E5E5"> in this case and that's the only</font>

612
00:32:44,540 --> 00:32:51,170
<font color="#E5E5E5">thing you have you cannot make any</font>

613
00:32:46,190 --> 00:32:53,150
assumptions so many remote bugs met an

614
00:32:51,170 --> 00:32:55,220
untimely death<font color="#CCCCCC"> because they couldn't</font>

615
00:32:53,150 --> 00:32:58,550
meet this rule because<font color="#CCCCCC"> they had to make</font>

616
00:32:55,220 --> 00:33:01,130
<font color="#E5E5E5">assumptions who can tell me one word the</font>

617
00:32:58,550 --> 00:33:04,930
main<font color="#E5E5E5"> killer of remote bugs that requires</font>

618
00:33:01,130 --> 00:33:08,750
you to make assumptions<font color="#E5E5E5"> start with name</font>

619
00:33:04,930 --> 00:33:10,400
<font color="#CCCCCC">ASLR right</font><font color="#E5E5E5"> so with a said are you have</font>

620
00:33:08,750 --> 00:33:12,260
<font color="#E5E5E5">to make assumptions about the system and</font>

621
00:33:10,400 --> 00:33:14,360
in this case we don't have<font color="#CCCCCC"> a cell</font><font color="#E5E5E5"> R so</font>

622
00:33:12,260 --> 00:33:17,150
that's<font color="#E5E5E5"> already one advantage so let's</font>

623
00:33:14,360 --> 00:33:24,379
see if this bug lets us meet the second

624
00:33:17,150 --> 00:33:27,280
law so we don't want something very

625
00:33:24,380 --> 00:33:31,550
<font color="#E5E5E5">simple we want to avoid a situation</font>

626
00:33:27,280 --> 00:33:35,690
where our overflows<font color="#E5E5E5"> are overflow puts us</font>

627
00:33:31,550 --> 00:33:37,460
on inside dynamic memory<font color="#E5E5E5"> memory that</font>

628
00:33:35,690 --> 00:33:39,500
means<font color="#E5E5E5"> we are in the heap</font><font color="#CCCCCC"> and the</font>

629
00:33:37,460 --> 00:33:43,130
locations are changing around us<font color="#E5E5E5"> and we</font>

630
00:33:39,500 --> 00:33:44,480
have no clear<font color="#E5E5E5"> indication</font><font color="#CCCCCC"> of what what we</font>

631
00:33:43,130 --> 00:33:48,830
are<font color="#CCCCCC"> referring</font><font color="#E5E5E5"> into because it could</font>

632
00:33:44,480 --> 00:33:54,890
<font color="#CCCCCC">change from one one from one execution</font>

633
00:33:48,830 --> 00:33:57,080
<font color="#E5E5E5">to the other what we do want is to be</font>

634
00:33:54,890 --> 00:33:59,750
able to<font color="#E5E5E5"> flow into</font><font color="#CCCCCC"> our consistent address</font>

635
00:33:57,080 --> 00:34:02,000
and others we<font color="#E5E5E5"> can predict we want to be</font>

636
00:33:59,750 --> 00:34:04,520
able<font color="#E5E5E5"> to predict what's in</font><font color="#CCCCCC"> that address</font>

637
00:34:02,000 --> 00:34:07,100
<font color="#CCCCCC">we want it</font><font color="#E5E5E5"> to be as static as consistent</font>

638
00:34:04,520 --> 00:34:10,040
<font color="#CCCCCC">with memory as possible</font><font color="#E5E5E5"> we wanted</font><font color="#CCCCCC"> to</font>

639
00:34:07,100 --> 00:34:15,500
just sit down<font color="#E5E5E5"> and behave nicely</font><font color="#CCCCCC"> not move</font>

640
00:34:10,040 --> 00:34:19,250
<font color="#E5E5E5">it must not move</font><font color="#CCCCCC"> so and the third the</font>

641
00:34:15,500 --> 00:34:21,440
third thing we want is that<font color="#E5E5E5"> data that</font>

642
00:34:19,250 --> 00:34:23,300
we're overflowing<font color="#E5E5E5"> into needs to</font><font color="#CCCCCC"> be doing</font>

643
00:34:21,440 --> 00:34:26,179
something interesting<font color="#E5E5E5"> it needs to have</font>

644
00:34:23,300 --> 00:34:28,900
pointers which then<font color="#CCCCCC"> are triggered in an</font>

645
00:34:26,179 --> 00:34:37,279
interesting way<font color="#CCCCCC"> so let's see if</font><font color="#E5E5E5"> this bug</font>

646
00:34:28,900 --> 00:34:42,590
actually<font color="#E5E5E5"> meets what we need so the</font>

647
00:34:37,280 --> 00:34:44,210
overflow is into a structure<font color="#CCCCCC"> known as PS</font>

648
00:34:42,590 --> 00:34:47,870
it's a structure<font color="#E5E5E5"> for a structure for</font>

649
00:34:44,210 --> 00:34:51,500
handling power saving mode our<font color="#E5E5E5"> structure</font>

650
00:34:47,870 --> 00:34:54,409
is<font color="#CCCCCC"> tight is noise described as current</font><font color="#E5E5E5"> W</font>

651
00:34:51,500 --> 00:34:57,680
a memory and the sources<font color="#E5E5E5"> that's the name</font>

652
00:34:54,409 --> 00:34:59,509
<font color="#CCCCCC">and</font><font color="#E5E5E5"> both</font><font color="#CCCCCC"> of them are static in terms of</font>

653
00:34:57,680 --> 00:35:03,910
<font color="#CCCCCC">fabric space</font><font color="#E5E5E5"> they are allocated</font><font color="#CCCCCC"> on</font>

654
00:34:59,510 --> 00:35:07,730
startup on boot<font color="#E5E5E5"> and given the</font>

655
00:35:03,910 --> 00:35:11,089
<font color="#E5E5E5">deterministic allocations</font><font color="#CCCCCC"> that the agent</font>

656
00:35:07,730 --> 00:35:13,190
agent<font color="#CCCCCC"> DRTV</font><font color="#E5E5E5"> allocator makes we can</font>

657
00:35:11,090 --> 00:35:16,700
predict we can consistently predict

658
00:35:13,190 --> 00:35:19,350
their locations on

659
00:35:16,700 --> 00:35:22,140
on a given system on a given<font color="#E5E5E5"> firmware</font>

660
00:35:19,350 --> 00:35:23,790
<font color="#E5E5E5">and it it stays</font><font color="#CCCCCC"> consistent across</font>

661
00:35:22,140 --> 00:35:25,830
reboots<font color="#E5E5E5"> even if you put the phone a</font>

662
00:35:23,790 --> 00:35:33,810
hundred<font color="#CCCCCC"> times</font><font color="#E5E5E5"> of the addresses remain</font>

663
00:35:25,830 --> 00:35:36,600
the same and once we confirm<font color="#CCCCCC"> that</font><font color="#E5E5E5"> there</font>

664
00:35:33,810 --> 00:35:40,049
was a good lucky point we wanted<font color="#CCCCCC"> to</font>

665
00:35:36,600 --> 00:35:44,100
<font color="#E5E5E5">check maybe with we want to check if our</font>

666
00:35:40,050 --> 00:35:48,450
<font color="#CCCCCC">lock remains consistent</font><font color="#E5E5E5"> so we had to</font>

667
00:35:44,100 --> 00:35:51,930
look at<font color="#E5E5E5"> the PS struct and</font><font color="#CCCCCC"> we looked for</font>

668
00:35:48,450 --> 00:35:53,460
interesting pointers<font color="#E5E5E5"> data which is</font>

669
00:35:51,930 --> 00:35:55,950
<font color="#CCCCCC">handle in an interesting way which helps</font>

670
00:35:53,460 --> 00:35:58,890
us in<font color="#CCCCCC"> an exploit</font><font color="#E5E5E5"> and what we found are</font>

671
00:35:55,950 --> 00:36:00,720
all these timers<font color="#E5E5E5"> and timers are very</font>

672
00:35:58,890 --> 00:36:03,450
good news when you're preparing an

673
00:36:00,720 --> 00:36:07,049
exploit because timers are called

674
00:36:03,450 --> 00:36:09,750
regularly they do<font color="#E5E5E5"> something every once</font>

675
00:36:07,050 --> 00:36:11,730
<font color="#E5E5E5">in a while</font><font color="#CCCCCC"> and they not only trigger</font>

676
00:36:09,750 --> 00:36:14,460
<font color="#E5E5E5">other call other code for instances</font>

677
00:36:11,730 --> 00:36:17,100
callbacks so of course that that

678
00:36:14,460 --> 00:36:19,020
<font color="#E5E5E5">immediately seemed interesting and we</font>

679
00:36:17,100 --> 00:36:23,370
started digging around at what these

680
00:36:19,020 --> 00:36:25,560
timers do and when they're called and we

681
00:36:23,370 --> 00:36:26,940
reach this function as you can see

682
00:36:25,560 --> 00:36:29,670
throughout this process<font color="#E5E5E5"> we were</font>

683
00:36:26,940 --> 00:36:32,040
extremely<font color="#E5E5E5"> lucky first in finding a bug</font>

684
00:36:29,670 --> 00:36:33,270
in an association<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> association</font>

685
00:36:32,040 --> 00:36:36,540
<font color="#E5E5E5">process which doesn't</font><font color="#CCCCCC"> require any</font>

686
00:36:33,270 --> 00:36:39,380
<font color="#E5E5E5">authentication then in finding a bug</font>

687
00:36:36,540 --> 00:36:44,060
which overflows into static<font color="#E5E5E5"> memory and</font>

688
00:36:39,380 --> 00:36:49,280
now in this so if you look at this code

689
00:36:44,060 --> 00:36:54,330
towards the<font color="#E5E5E5"> end you</font><font color="#CCCCCC"> can see a very clear</font>

690
00:36:49,280 --> 00:36:57,570
<font color="#CCCCCC">write primitive it takes an address from</font>

691
00:36:54,330 --> 00:36:59,730
the<font color="#CCCCCC"> overflowed object it takes a</font>

692
00:36:57,570 --> 00:37:04,790
specific<font color="#E5E5E5"> offset from this address of 14</font>

693
00:36:59,730 --> 00:37:10,700
in hex<font color="#CCCCCC"> and it tries to that</font><font color="#E5E5E5"> offset so</font>

694
00:37:04,790 --> 00:37:10,700
again this is very<font color="#E5E5E5"> simple</font>

695
00:37:11,180 --> 00:37:19,549
very clear and we<font color="#CCCCCC"> just you know it</font><font color="#E5E5E5"> was</font>

696
00:37:15,020 --> 00:37:25,670
our lucky day now we have a right<font color="#CCCCCC"> time</font>

697
00:37:19,550 --> 00:37:28,310
<font color="#CCCCCC">ative where do we write to so as we</font>

698
00:37:25,670 --> 00:37:31,400
briefly mentioned<font color="#CCCCCC"> there's a table</font><font color="#E5E5E5"> of</font>

699
00:37:28,310 --> 00:37:35,770
functions in RAM which<font color="#CCCCCC"> is used as a way</font>

700
00:37:31,400 --> 00:37:40,820
to patch functionality and add security

701
00:37:35,770 --> 00:37:42,890
security fixes what<font color="#CCCCCC"> Broadcom do is</font>

702
00:37:40,820 --> 00:37:44,900
whenever<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a fix whenever there</font>

703
00:37:42,890 --> 00:37:48,350
<font color="#E5E5E5">is a patch they change this function</font>

704
00:37:44,900 --> 00:37:51,200
table<font color="#E5E5E5"> to point to the patch and the code</font>

705
00:37:48,350 --> 00:37:52,880
in the ROM<font color="#E5E5E5"> at specific intervals</font><font color="#CCCCCC"> at</font>

706
00:37:51,200 --> 00:37:55,759
specific points<font color="#CCCCCC"> in the code</font><font color="#E5E5E5"> jumps to</font>

707
00:37:52,880 --> 00:37:57,470
this<font color="#E5E5E5"> table and you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> there's</font>

708
00:37:55,760 --> 00:37:59,420
<font color="#E5E5E5">basically hooks which we direct the code</font>

709
00:37:57,470 --> 00:38:01,970
the code<font color="#CCCCCC"> can check</font><font color="#E5E5E5"> whether there's a</font>

710
00:37:59,420 --> 00:38:05,120
there's any change<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then it comes</font>

711
00:38:01,970 --> 00:38:09,970
back<font color="#E5E5E5"> to the ROM so this was a good place</font>

712
00:38:05,120 --> 00:38:13,460
to<font color="#CCCCCC"> overwrite because because this</font><font color="#E5E5E5"> table</font>

713
00:38:09,970 --> 00:38:17,750
can stay relatively consistent across

714
00:38:13,460 --> 00:38:20,180
<font color="#CCCCCC">different ephemeral versions and</font><font color="#E5E5E5"> it's</font>

715
00:38:17,750 --> 00:38:22,100
<font color="#E5E5E5">possible to predict what</font><font color="#CCCCCC"> the particular</font>

716
00:38:20,180 --> 00:38:26,120
<font color="#E5E5E5">offset will which function</font><font color="#CCCCCC"> will be in a</font>

717
00:38:22,100 --> 00:38:32,960
particular<font color="#E5E5E5"> offset so we decided to write</font>

718
00:38:26,120 --> 00:38:36,410
<font color="#E5E5E5">to</font><font color="#CCCCCC"> that table and then we had another</font>

719
00:38:32,960 --> 00:38:41,720
problem<font color="#E5E5E5"> in the exploit which is that we</font>

720
00:38:36,410 --> 00:38:44,509
only<font color="#E5E5E5"> had 24 bytes for</font><font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> so you</font>

721
00:38:41,720 --> 00:38:47,359
can't do much with 24 bytes<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> not a</font>

722
00:38:44,510 --> 00:38:52,130
place<font color="#E5E5E5"> where you can put a a payload</font>

723
00:38:47,360 --> 00:38:55,520
which does<font color="#E5E5E5"> anything useful and that led</font>

724
00:38:52,130 --> 00:38:58,130
us<font color="#CCCCCC"> to</font><font color="#E5E5E5"> consider where's a good place we</font>

725
00:38:55,520 --> 00:39:00,950
can<font color="#E5E5E5"> put our payload now the way you</font>

726
00:38:58,130 --> 00:39:03,320
normally solve these problems in<font color="#E5E5E5"> expert</font>

727
00:39:00,950 --> 00:39:05,779
development is that you look for some

728
00:39:03,320 --> 00:39:08,150
<font color="#E5E5E5">kind of a stray primitive a way to write</font>

729
00:39:05,780 --> 00:39:10,280
<font color="#E5E5E5">to large areas</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the heap with your</font>

730
00:39:08,150 --> 00:39:14,470
code<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> can predict where this code</font>

731
00:39:10,280 --> 00:39:17,810
is we didn't really see<font color="#CCCCCC"> this option in</font>

732
00:39:14,470 --> 00:39:19,399
in the broad<font color="#E5E5E5"> confirmer there's</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> we</font>

733
00:39:17,810 --> 00:39:21,170
didn't<font color="#E5E5E5"> find any good location primitives</font>

734
00:39:19,400 --> 00:39:25,410
in the limited protocols we had access

735
00:39:21,170 --> 00:39:28,290
<font color="#CCCCCC">to</font><font color="#E5E5E5"> as part of the Association</font><font color="#CCCCCC"> process so</font>

736
00:39:25,410 --> 00:39:30,029
be given<font color="#E5E5E5"> that this is a Wi-Fi</font><font color="#CCCCCC"> chipset</font>

737
00:39:28,290 --> 00:39:32,490
<font color="#CCCCCC">that this is a code which handles packet</font>

738
00:39:30,030 --> 00:39:37,170
can anybody make<font color="#E5E5E5"> a guess about where we</font>

739
00:39:32,490 --> 00:39:40,200
could write large large quantities of

740
00:39:37,170 --> 00:39:47,790
<font color="#E5E5E5">data pretty freely</font><font color="#CCCCCC"> can you like make a</font>

741
00:39:40,200 --> 00:39:49,819
guess so there's a concept known as<font color="#E5E5E5"> a</font>

742
00:39:47,790 --> 00:39:52,680
ring<font color="#CCCCCC"> buffer</font><font color="#E5E5E5"> in network implementations</font>

743
00:39:49,820 --> 00:39:55,650
which is a<font color="#E5E5E5"> circular buffer which holds</font>

744
00:39:52,680 --> 00:39:57,240
packets as<font color="#CCCCCC"> they come in and then it</font>

745
00:39:55,650 --> 00:39:59,220
overrides<font color="#CCCCCC"> the beginning of the buffer as</font>

746
00:39:57,240 --> 00:40:04,080
the buffer gets filled<font color="#CCCCCC"> up and this</font><font color="#E5E5E5"> is</font>

747
00:39:59,220 --> 00:40:08,540
<font color="#E5E5E5">where</font><font color="#CCCCCC"> packets are are copied into after</font>

748
00:40:04,080 --> 00:40:10,890
they're handled by the layer<font color="#CCCCCC"> 1 chip</font><font color="#E5E5E5"> and</font>

749
00:40:08,540 --> 00:40:17,630
this looked like<font color="#E5E5E5"> a perfect place for us</font>

750
00:40:10,890 --> 00:40:22,620
<font color="#CCCCCC">to</font><font color="#E5E5E5"> put to put our to put our payload now</font>

751
00:40:17,630 --> 00:40:24,720
the only<font color="#E5E5E5"> thing we needed to do now is to</font>

752
00:40:22,620 --> 00:40:28,410
<font color="#E5E5E5">write some</font><font color="#CCCCCC"> egg hunting code</font><font color="#E5E5E5"> again just</font>

753
00:40:24,720 --> 00:40:30,870
like in the good days which 24 bytes was

754
00:40:28,410 --> 00:40:33,690
just enough<font color="#CCCCCC"> for that it runs</font><font color="#E5E5E5"> through the</font>

755
00:40:30,870 --> 00:40:35,790
<font color="#E5E5E5">fluid memory looks for a particular</font>

756
00:40:33,690 --> 00:40:38,700
header and when it finds it it<font color="#E5E5E5"> jumps to</font>

757
00:40:35,790 --> 00:40:40,740
<font color="#E5E5E5">it and in this case our header was in</font>

758
00:40:38,700 --> 00:40:42,750
the ring buffer<font color="#E5E5E5"> now a nice thing about</font>

759
00:40:40,740 --> 00:40:44,549
<font color="#E5E5E5">the ring buffer is that it's all RW</font><font color="#CCCCCC"> eeks</font>

760
00:40:42,750 --> 00:40:47,340
<font color="#E5E5E5">so you can basically run code from</font>

761
00:40:44,550 --> 00:40:50,820
anywhere you want<font color="#E5E5E5"> also</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> ring</font>

762
00:40:47,340 --> 00:40:57,240
<font color="#CCCCCC">buffer so we jump to the ring buffer</font>

763
00:40:50,820 --> 00:40:59,670
<font color="#E5E5E5">after finding our code and and this is</font>

764
00:40:57,240 --> 00:41:04,979
<font color="#E5E5E5">the layout</font><font color="#CCCCCC"> of the exploit buffer that</font>

765
00:40:59,670 --> 00:41:07,490
we've eventually ended up<font color="#E5E5E5"> with you can</font>

766
00:41:04,980 --> 00:41:11,520
<font color="#E5E5E5">see we were able to use the overflow to</font>

767
00:41:07,490 --> 00:41:14,060
to put our fake<font color="#E5E5E5"> timer object</font><font color="#CCCCCC"> at the</font>

768
00:41:11,520 --> 00:41:20,130
beginning it jumps<font color="#E5E5E5"> to a shell code stub</font>

769
00:41:14,060 --> 00:41:25,140
then it jumps to<font color="#CCCCCC"> the to the egg hunting</font>

770
00:41:20,130 --> 00:41:32,430
code and eventually it jumps to<font color="#CCCCCC"> the to</font>

771
00:41:25,140 --> 00:41:35,690
the ring buffer now do you remember<font color="#E5E5E5"> the</font>

772
00:41:32,430 --> 00:41:35,690
third law of remotes

773
00:41:35,890 --> 00:41:45,980
you must leave the<font color="#CCCCCC"> system in a</font>

774
00:41:37,880 --> 00:41:46,550
consistent<font color="#CCCCCC"> state oh so we had to clean</font>

775
00:41:45,980 --> 00:41:48,500
<font color="#CCCCCC">up a bit</font>

776
00:41:46,550 --> 00:41:53,930
we had to restore the buffer<font color="#E5E5E5"> that we've</font>

777
00:41:48,500 --> 00:41:57,080
overflowed<font color="#E5E5E5"> and we had to restore the</font>

778
00:41:53,930 --> 00:41:58,970
pointers<font color="#E5E5E5"> and make sure that we left the</font>

779
00:41:57,080 --> 00:42:01,279
<font color="#CCCCCC">system in our consistent state just the</font>

780
00:41:58,970 --> 00:42:03,980
way we found<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and with broad porn</font>

781
00:42:01,280 --> 00:42:07,430
<font color="#E5E5E5">right now there is no</font><font color="#CCCCCC"> indication or any</font>

782
00:42:03,980 --> 00:42:09,580
crash<font color="#E5E5E5"> after you run the code so</font><font color="#CCCCCC"> you just</font>

783
00:42:07,430 --> 00:42:11,960
<font color="#E5E5E5">run your payload you</font><font color="#CCCCCC"> install your hooks</font>

784
00:42:09,580 --> 00:42:23,150
when the system stays stable and

785
00:42:11,960 --> 00:42:29,690
consistent and this brought us to<font color="#CCCCCC"> their</font>

786
00:42:23,150 --> 00:42:33,680
really interesting<font color="#E5E5E5"> phase so when I was</font>

787
00:42:29,690 --> 00:42:37,990
starting work in<font color="#E5E5E5"> this field we had we</font>

788
00:42:33,680 --> 00:42:41,029
had worms we had this self-propagating

789
00:42:37,990 --> 00:42:42,740
<font color="#E5E5E5">propagating malware which could</font>

790
00:42:41,030 --> 00:42:44,630
basically<font color="#E5E5E5"> run wild over the network</font>

791
00:42:42,740 --> 00:42:47,569
<font color="#CCCCCC">could anybody like remember any</font>

792
00:42:44,630 --> 00:42:53,890
particular worms which were famous<font color="#CCCCCC"> like</font>

793
00:42:47,570 --> 00:43:00,170
just toss out<font color="#E5E5E5"> some names yeah yeah and</font>

794
00:42:53,890 --> 00:43:04,720
Stuxnet<font color="#E5E5E5"> - yep so there are quite a few</font>

795
00:43:00,170 --> 00:43:07,790
in the good days<font color="#CCCCCC"> and they died out</font>

796
00:43:04,720 --> 00:43:12,129
<font color="#E5E5E5">together with remote exploits remote</font>

797
00:43:07,790 --> 00:43:13,310
exploits became no<font color="#CCCCCC"> longer possible</font><font color="#E5E5E5"> so</font>

798
00:43:12,130 --> 00:43:16,820
worms

799
00:43:13,310 --> 00:43:22,580
<font color="#E5E5E5">pretty much needed them to propagate but</font>

800
00:43:16,820 --> 00:43:26,420
broadband is<font color="#CCCCCC"> a perfect bug for that kind</font>

801
00:43:22,580 --> 00:43:28,700
of thing<font color="#E5E5E5"> so we thought this</font><font color="#CCCCCC"> is a pretty</font>

802
00:43:26,420 --> 00:43:31,609
good occasion<font color="#E5E5E5"> to make the first Wi-Fi</font>

803
00:43:28,700 --> 00:43:35,868
warm and the first network<font color="#E5E5E5"> home in a few</font>

804
00:43:31,609 --> 00:43:38,600
<font color="#E5E5E5">years</font><font color="#CCCCCC"> so what the way</font><font color="#E5E5E5"> this is</font>

805
00:43:35,869 --> 00:43:43,550
<font color="#CCCCCC">implemented is after you after</font><font color="#E5E5E5"> you run</font>

806
00:43:38,600 --> 00:43:47,069
your payload in the chip you put some

807
00:43:43,550 --> 00:43:49,469
hoops<font color="#E5E5E5"> yeah you put some hooks</font>

808
00:43:47,069 --> 00:43:51,538
in<font color="#CCCCCC"> functions which handle packets and</font>

809
00:43:49,469 --> 00:43:54,630
<font color="#E5E5E5">you basically we implement the code</font>

810
00:43:51,539 --> 00:43:59,969
which triggers<font color="#CCCCCC"> the bug</font><font color="#E5E5E5"> but from within</font>

811
00:43:54,630 --> 00:44:02,489
<font color="#E5E5E5">the chip so luckily the bug is pretty</font>

812
00:43:59,969 --> 00:44:07,199
simple to<font color="#CCCCCC"> implement so the limitations</font>

813
00:44:02,489 --> 00:44:11,279
are not that<font color="#E5E5E5"> big a deal</font><font color="#CCCCCC"> and we were able</font>

814
00:44:07,199 --> 00:44:17,579
<font color="#E5E5E5">to to implement some basic infecting</font>

815
00:44:11,279 --> 00:44:20,249
code from<font color="#E5E5E5"> within the femur you and still</font>

816
00:44:17,579 --> 00:44:21,989
kind of were<font color="#E5E5E5"> able to work within the</font>

817
00:44:20,249 --> 00:44:25,558
space requirements<font color="#E5E5E5"> like the space</font>

818
00:44:21,989 --> 00:44:27,569
limitations and that's it what the way

819
00:44:25,559 --> 00:44:31,140
the<font color="#CCCCCC"> way this works now is a phone gets</font>

820
00:44:27,569 --> 00:44:34,499
infected<font color="#E5E5E5"> it starts looking for probe</font>

821
00:44:31,140 --> 00:44:36,859
<font color="#E5E5E5">requests it sends out whenever it sees a</font>

822
00:44:34,499 --> 00:44:39,808
name<font color="#CCCCCC"> an SSID it sends</font><font color="#E5E5E5"> out a response</font>

823
00:44:36,859 --> 00:44:43,499
<font color="#E5E5E5">starts the initiation</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> and starts</font>

824
00:44:39,809 --> 00:44:47,249
infection now<font color="#E5E5E5"> the way it works now is</font><font color="#CCCCCC"> we</font>

825
00:44:43,499 --> 00:44:49,799
<font color="#E5E5E5">don't do much other than send out send</font>

826
00:44:47,249 --> 00:44:53,129
out a probe request from an infected

827
00:44:49,799 --> 00:44:55,349
system saying I am owned that's the only

828
00:44:53,130 --> 00:44:57,059
indication we give out so what we're

829
00:44:55,349 --> 00:45:03,180
going to do is we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> show a</font>

830
00:44:57,059 --> 00:45:05,009
demo<font color="#CCCCCC"> of initial infection and then we're</font>

831
00:45:03,180 --> 00:45:12,479
going<font color="#CCCCCC"> to show how it skips from phone to</font>

832
00:45:05,009 --> 00:45:14,459
phone and oops<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> and then we will</font>

833
00:45:12,479 --> 00:45:21,769
<font color="#CCCCCC">actually see the packets being sent over</font>

834
00:45:14,459 --> 00:45:21,769
the earth so now I'll switch laptops

835
00:45:25,260 --> 00:45:28,379
[Music]

836
00:45:35,950 --> 00:45:45,990
<font color="#E5E5E5">okay I hope there's nothing</font><font color="#CCCCCC"> embarrassing</font>

837
00:45:37,720 --> 00:45:52,390
on my laptop yeah is this good<font color="#E5E5E5"> enough</font>

838
00:45:45,990 --> 00:45:54,180
<font color="#E5E5E5">okay so I'm going</font><font color="#CCCCCC"> to turn</font><font color="#E5E5E5"> on broadband</font>

839
00:45:52,390 --> 00:45:59,710
wait let's see everything is connected

840
00:45:54,180 --> 00:46:01,919
<font color="#E5E5E5">yeah my phone's let's start with this</font>

841
00:45:59,710 --> 00:46:01,920
one

842
00:46:03,270 --> 00:46:09,580
so I've not offered any given any

843
00:46:06,370 --> 00:46:14,950
offering to the demo gods and this demo

844
00:46:09,580 --> 00:46:16,840
is kind of complicated<font color="#CCCCCC"> because well it</font>

845
00:46:14,950 --> 00:46:20,049
<font color="#E5E5E5">requires us to spray a large number of</font>

846
00:46:16,840 --> 00:46:21,160
packets<font color="#E5E5E5"> into the ring</font><font color="#CCCCCC"> buffer and given</font>

847
00:46:20,050 --> 00:46:23,890
that there's all these guys<font color="#E5E5E5"> here with</font>

848
00:46:21,160 --> 00:46:25,299
<font color="#E5E5E5">them their mobile phones it might be a</font>

849
00:46:23,890 --> 00:46:28,080
bit tough you might need to do a few

850
00:46:25,300 --> 00:46:30,760
retries but we'll give it a shot

851
00:46:28,080 --> 00:46:33,400
so first of all we're going<font color="#E5E5E5"> to run broad</font>

852
00:46:30,760 --> 00:46:35,830
broad<font color="#E5E5E5"> pond there's going to be an access</font>

853
00:46:33,400 --> 00:46:38,950
point now it's going<font color="#E5E5E5"> to be the name is</font>

854
00:46:35,830 --> 00:46:42,450
broad pond<font color="#E5E5E5"> test you're welcome to</font>

855
00:46:38,950 --> 00:46:42,450
connect and try to crush your<font color="#CCCCCC"> phone's</font>

856
00:46:46,800 --> 00:46:57,790
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> okay fine</font><font color="#CCCCCC"> what we're going to</font><font color="#E5E5E5"> do</font>

857
00:46:51,730 --> 00:47:00,490
now is<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to run</font><font color="#CCCCCC"> a spray of</font>

858
00:46:57,790 --> 00:47:05,170
beacons you're going to see an<font color="#E5E5E5"> access</font>

859
00:47:00,490 --> 00:47:08,049
<font color="#E5E5E5">point ap 0 to 4 using using</font><font color="#CCCCCC"> something</font>

860
00:47:05,170 --> 00:47:10,000
we're using a tool called<font color="#E5E5E5"> take</font><font color="#CCCCCC"> ap the</font>

861
00:47:08,050 --> 00:47:13,060
only thing is it does is send out as our

862
00:47:10,000 --> 00:47:14,650
payload<font color="#E5E5E5"> in a spray</font><font color="#CCCCCC"> over the air so</font><font color="#E5E5E5"> it</font>

863
00:47:13,060 --> 00:47:20,680
fills up<font color="#E5E5E5"> the ring</font><font color="#CCCCCC"> buffer the ring buffer</font>

864
00:47:14,650 --> 00:47:27,880
<font color="#E5E5E5">of the first phone right so we're going</font>

865
00:47:20,680 --> 00:47:29,379
to<font color="#E5E5E5"> run it now</font><font color="#CCCCCC"> ok it's running</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> now</font>

866
00:47:27,880 --> 00:47:33,850
actually my phone might be<font color="#CCCCCC"> infected</font>

867
00:47:29,380 --> 00:47:36,820
<font color="#CCCCCC">because it's supposed</font><font color="#E5E5E5"> to send out set</font>

868
00:47:33,850 --> 00:47:46,440
out a probe request let's look at the

869
00:47:36,820 --> 00:47:46,440
log<font color="#CCCCCC"> I hope it's not infected yet</font><font color="#E5E5E5"> yeah</font>

870
00:47:53,330 --> 00:47:57,470
we need to parse the<font color="#CCCCCC"> lobs because we're</font>

871
00:47:55,550 --> 00:47:59,090
using a special<font color="#E5E5E5"> tool called</font><font color="#CCCCCC"> the HD util</font>

872
00:47:57,470 --> 00:48:00,410
which extracts them from the chip

873
00:47:59,090 --> 00:48:08,090
they're not on the kernel they're on the

874
00:48:00,410 --> 00:48:17,569
chip<font color="#E5E5E5"> okay has it been infected yet not</font>

875
00:48:08,090 --> 00:48:27,440
yet<font color="#E5E5E5"> okay I'm just like give it a rub to</font>

876
00:48:17,570 --> 00:48:33,890
<font color="#E5E5E5">start scanning okay yeah sorry it wasn't</font>

877
00:48:27,440 --> 00:48:38,510
now so you can see<font color="#E5E5E5"> that it's it's okay</font>

878
00:48:33,890 --> 00:48:43,940
<font color="#E5E5E5">yeah can you see</font><font color="#CCCCCC"> payload triggered</font><font color="#E5E5E5"> so</font>

879
00:48:38,510 --> 00:48:47,180
what it does<font color="#E5E5E5"> here is it it starts the so</font>

880
00:48:43,940 --> 00:48:49,670
it's so<font color="#E5E5E5"> the payload needs to restore the</font>

881
00:48:47,180 --> 00:48:51,859
<font color="#E5E5E5">CPA star because you know an</font><font color="#CCCCCC"> armed</font><font color="#E5E5E5"> CPS</font><font color="#CCCCCC"> R</font>

882
00:48:49,670 --> 00:48:54,140
holds<font color="#E5E5E5"> the state for interrupts and</font>

883
00:48:51,860 --> 00:48:56,750
everything and the code which basically

884
00:48:54,140 --> 00:48:59,540
there's a reason we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> restore it</font>

885
00:48:56,750 --> 00:49:03,740
otherwise the chip crashes then we

886
00:48:59,540 --> 00:49:07,370
restore destruct<font color="#CCCCCC"> the power saving</font><font color="#E5E5E5"> struct</font>

887
00:49:03,740 --> 00:49:09,319
it's called<font color="#CCCCCC"> WL CPM st and then what</font>

888
00:49:07,370 --> 00:49:14,770
we're doing<font color="#CCCCCC"> is we're</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> sending probes</font>

889
00:49:09,320 --> 00:49:20,150
which say I am on and waiting for<font color="#E5E5E5"> probe</font>

890
00:49:14,770 --> 00:49:22,490
requests so now let's look at<font color="#CCCCCC"> the other</font>

891
00:49:20,150 --> 00:49:27,410
<font color="#CCCCCC">phone which might also</font><font color="#E5E5E5"> already be</font>

892
00:49:22,490 --> 00:49:30,620
<font color="#CCCCCC">infected so about s probe requests get</font>

893
00:49:27,410 --> 00:49:33,290
<font color="#E5E5E5">sent out</font><font color="#CCCCCC"> about once a minute now the</font>

894
00:49:30,620 --> 00:49:35,900
infection is a tricky<font color="#E5E5E5"> part it might not</font>

895
00:49:33,290 --> 00:49:38,690
work it didn't consistently work but I'm

896
00:49:35,900 --> 00:49:40,190
hoping I'm gonna get lucky<font color="#E5E5E5"> because you</font>

897
00:49:38,690 --> 00:49:44,600
<font color="#CCCCCC">notice that on</font><font color="#E5E5E5"> this project we got</font>

898
00:49:40,190 --> 00:49:46,250
pretty<font color="#E5E5E5"> lucky a lot of the time right</font><font color="#CCCCCC"> so</font>

899
00:49:44,600 --> 00:49:47,990
let's hope<font color="#E5E5E5"> this lock stays all the way</font>

900
00:49:46,250 --> 00:49:52,520
through I'm going to check the<font color="#E5E5E5"> log it</font>

901
00:49:47,990 --> 00:49:54,290
might be already<font color="#E5E5E5"> infected</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> think</font>

902
00:49:52,520 --> 00:50:02,150
it's infected<font color="#CCCCCC"> now you can see the hooks</font>

903
00:49:54,290 --> 00:50:03,830
<font color="#E5E5E5">but if</font><font color="#CCCCCC"> yeah okay so as you can see</font><font color="#E5E5E5"> the</font>

904
00:50:02,150 --> 00:50:07,100
infection process<font color="#E5E5E5"> is pretty fast it's</font>

905
00:50:03,830 --> 00:50:12,750
<font color="#CCCCCC">just an exchange of four</font><font color="#E5E5E5"> packets</font>

906
00:50:07,100 --> 00:50:14,100
and it's already<font color="#E5E5E5"> sending probes</font><font color="#CCCCCC"> yeah and</font>

907
00:50:12,750 --> 00:50:18,150
here the same<font color="#E5E5E5"> thing brought pound</font>

908
00:50:14,100 --> 00:50:22,230
payload figured and all that stuff now

909
00:50:18,150 --> 00:50:25,230
what we're<font color="#E5E5E5"> going to do is to have</font><font color="#CCCCCC"> a look</font>

910
00:50:22,230 --> 00:50:27,830
<font color="#E5E5E5">at to see if we can see these just to</font>

911
00:50:25,230 --> 00:50:31,830
<font color="#E5E5E5">prove</font><font color="#CCCCCC"> that these phones have</font><font color="#E5E5E5"> been owned</font>

912
00:50:27,830 --> 00:50:33,870
<font color="#E5E5E5">we're going to snap using arrow dump to</font>

913
00:50:31,830 --> 00:50:36,540
see the I am owned packets to see if

914
00:50:33,870 --> 00:50:41,180
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> on the air</font><font color="#E5E5E5"> now I'll first try to</font>

915
00:50:36,540 --> 00:50:43,259
work with<font color="#E5E5E5"> arrow dump just like that</font>

916
00:50:41,180 --> 00:50:44,580
<font color="#E5E5E5">although there's no chance we're going</font>

917
00:50:43,260 --> 00:50:45,960
<font color="#CCCCCC">to see anything</font><font color="#E5E5E5"> because there's all</font><font color="#CCCCCC"> a</font>

918
00:50:44,580 --> 00:50:47,160
few guys here<font color="#E5E5E5"> and it's just going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

919
00:50:45,960 --> 00:50:51,600
swamped so<font color="#E5E5E5"> we're going to run</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> code</font>

920
00:50:47,160 --> 00:50:53,250
<font color="#CCCCCC">to</font><font color="#E5E5E5"> filter particular MAC addresses which</font>

921
00:50:51,600 --> 00:50:55,110
I know are<font color="#CCCCCC"> the MAC addresses of</font><font color="#E5E5E5"> these</font>

922
00:50:53,250 --> 00:50:56,670
phones<font color="#E5E5E5"> but first you know</font><font color="#CCCCCC"> just for</font>

923
00:50:55,110 --> 00:51:00,300
<font color="#E5E5E5">entertainment entertainment let's have a</font>

924
00:50:56,670 --> 00:51:02,430
look at what's<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on here</font><font color="#CCCCCC"> oh so these</font>

925
00:51:00,300 --> 00:51:04,700
<font color="#E5E5E5">are these</font><font color="#CCCCCC"> are it's pretty interesting</font>

926
00:51:02,430 --> 00:51:06,899
just<font color="#E5E5E5"> to see</font><font color="#CCCCCC"> like who's here these are</font>

927
00:51:04,700 --> 00:51:09,240
these are access points but if we<font color="#E5E5E5"> move</font>

928
00:51:06,900 --> 00:51:11,490
to like<font color="#CCCCCC"> different channel you'll</font><font color="#E5E5E5"> see</font>

929
00:51:09,240 --> 00:51:13,080
that MGM<font color="#CCCCCC"> Resorts</font><font color="#E5E5E5"> which is like the open</font>

930
00:51:11,490 --> 00:51:16,709
Wi-Fi<font color="#E5E5E5"> that they would have put in here</font>

931
00:51:13,080 --> 00:51:20,029
<font color="#E5E5E5">is on channel 11 so if we switch</font><font color="#CCCCCC"> to some</font>

932
00:51:16,710 --> 00:51:22,410
channel<font color="#E5E5E5"> 2 and put like encryption open</font>

933
00:51:20,030 --> 00:51:24,480
<font color="#E5E5E5">it's a way to try to trick arrow dump</font>

934
00:51:22,410 --> 00:51:30,600
into showing us just<font color="#CCCCCC"> clients so let's</font>

935
00:51:24,480 --> 00:51:33,060
just look at clients which are here and

936
00:51:30,600 --> 00:51:35,250
unassociated<font color="#CCCCCC"> just repeat like</font><font color="#E5E5E5"> that</font>

937
00:51:33,060 --> 00:51:38,630
entertainment<font color="#CCCCCC"> we had before let's</font><font color="#E5E5E5"> look</font>

938
00:51:35,250 --> 00:51:38,630
at like the names<font color="#E5E5E5"> being sent out here</font>

939
00:51:39,050 --> 00:51:49,950
let's look yeah so here is<font color="#CCCCCC"> Alisa is</font>

940
00:51:45,780 --> 00:51:54,360
anybody named ELISA here somebody's been

941
00:51:49,950 --> 00:51:57,390
to<font color="#CCCCCC"> Bissell did</font><font color="#E5E5E5"> you see it</font><font color="#CCCCCC"> y5b so here's</font>

942
00:51:54,360 --> 00:52:02,850
a<font color="#CCCCCC"> laser</font><font color="#E5E5E5"> again this is very</font><font color="#CCCCCC"> interesting</font>

943
00:51:57,390 --> 00:52:10,129
right<font color="#CCCCCC"> okay somebody from China cool</font><font color="#E5E5E5"> so</font>

944
00:52:02,850 --> 00:52:13,560
now<font color="#CCCCCC"> I'm just</font><font color="#E5E5E5"> going to run</font>

945
00:52:10,130 --> 00:52:17,220
TCP dump from<font color="#E5E5E5"> this script looking</font>

946
00:52:13,560 --> 00:52:21,420
specifically for<font color="#E5E5E5"> probe</font><font color="#CCCCCC"> requests coming</font>

947
00:52:17,220 --> 00:52:25,049
<font color="#E5E5E5">out from these two</font><font color="#CCCCCC"> MAC</font><font color="#E5E5E5"> addresses so I'm</font>

948
00:52:21,420 --> 00:52:27,720
just running it letting it capture now

949
00:52:25,050 --> 00:52:30,360
<font color="#E5E5E5">the hooks I put are in the function</font>

950
00:52:27,720 --> 00:52:32,490
which handles are receiving packets<font color="#E5E5E5"> so</font>

951
00:52:30,360 --> 00:52:34,260
whenever it receives a packet it sends

952
00:52:32,490 --> 00:52:35,490
out<font color="#E5E5E5"> a</font><font color="#CCCCCC"> public</font><font color="#E5E5E5"> quest</font><font color="#CCCCCC"> so that's what I need</font>

953
00:52:34,260 --> 00:52:37,800
<font color="#E5E5E5">to like to play with the phone a bit</font>

954
00:52:35,490 --> 00:52:41,069
that<font color="#CCCCCC"> it scans so it receives</font><font color="#E5E5E5"> lots of</font>

955
00:52:37,800 --> 00:52:42,600
packets<font color="#E5E5E5"> to make sure that that we catch</font>

956
00:52:41,070 --> 00:52:46,440
the probe requests on the<font color="#E5E5E5"> right channel</font>

957
00:52:42,600 --> 00:52:51,080
<font color="#CCCCCC">so I'm playing with</font><font color="#E5E5E5"> it a bit yeah I</font>

958
00:52:46,440 --> 00:52:56,250
<font color="#CCCCCC">think that</font><font color="#E5E5E5"> should do</font><font color="#CCCCCC"> the trick ok and</font>

959
00:52:51,080 --> 00:53:02,130
show probe<font color="#CCCCCC"> ok yeah so you see we have</font>

960
00:52:56,250 --> 00:53:07,000
two stations<font color="#E5E5E5"> sending out requests I am</font>

961
00:53:02,130 --> 00:53:08,100
on and that's it basically<font color="#CCCCCC"> game over</font>

962
00:53:07,000 --> 00:53:13,710
[Applause]

963
00:53:08,100 --> 00:53:17,389
[Music]

964
00:53:13,710 --> 00:53:17,389
[Applause]

