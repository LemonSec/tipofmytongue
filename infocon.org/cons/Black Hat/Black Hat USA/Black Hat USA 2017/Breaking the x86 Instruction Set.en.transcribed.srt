1
00:00:00,000 --> 00:00:04,319
<font color="#E5E5E5">all right good</font><font color="#CCCCCC"> evening everyone I'm here</font>

2
00:00:02,669 --> 00:00:06,540
<font color="#E5E5E5">to talk to you about breaking the x86</font>

3
00:00:04,319 --> 00:00:08,969
<font color="#E5E5E5">instruction</font><font color="#CCCCCC"> set architecture I think it</font>

4
00:00:06,540 --> 00:00:11,309
should<font color="#CCCCCC"> be a pretty</font><font color="#E5E5E5"> fun</font><font color="#CCCCCC"> conclusion to a</font>

5
00:00:08,970 --> 00:00:13,110
really cool<font color="#E5E5E5"> black hat</font><font color="#CCCCCC"> first off my name</font>

6
00:00:11,309 --> 00:00:14,759
<font color="#CCCCCC">is Christopher Domus I'm a cybersecurity</font>

7
00:00:13,110 --> 00:00:17,310
<font color="#E5E5E5">researcher at a place called</font><font color="#CCCCCC"> the</font>

8
00:00:14,759 --> 00:00:19,080
Battelle Memorial Institute<font color="#E5E5E5"> I really</font>

9
00:00:17,310 --> 00:00:20,820
really like working<font color="#E5E5E5"> here</font><font color="#CCCCCC"> I get a chance</font>

10
00:00:19,080 --> 00:00:22,619
<font color="#E5E5E5">to encounter a lot</font><font color="#CCCCCC"> of really</font><font color="#E5E5E5"> difficult</font>

11
00:00:20,820 --> 00:00:25,230
problems but what I<font color="#E5E5E5"> think I like the</font>

12
00:00:22,619 --> 00:00:27,180
most is<font color="#CCCCCC"> that with the problems and</font>

13
00:00:25,230 --> 00:00:28,439
<font color="#E5E5E5">people</font><font color="#CCCCCC"> I work with on a day</font><font color="#E5E5E5"> to day basis</font>

14
00:00:27,180 --> 00:00:31,289
I actually get a<font color="#E5E5E5"> lot of really neat</font>

15
00:00:28,439 --> 00:00:32,969
ideas on fringe areas of<font color="#E5E5E5"> cybersecurity</font>

16
00:00:31,289 --> 00:00:34,680
that I can sort<font color="#E5E5E5"> of explore in my free</font>

17
00:00:32,969 --> 00:00:36,120
time<font color="#CCCCCC"> so that's what I want to talk</font><font color="#E5E5E5"> to</font>

18
00:00:34,680 --> 00:00:37,829
you about today<font color="#CCCCCC"> is</font><font color="#E5E5E5"> a little side project</font>

19
00:00:36,120 --> 00:00:41,070
I've been<font color="#CCCCCC"> working on on and off</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

20
00:00:37,829 --> 00:00:42,870
<font color="#CCCCCC">last few months</font><font color="#E5E5E5"> called sand sifter so</font>

21
00:00:41,070 --> 00:00:44,219
this whole thing<font color="#CCCCCC"> comes down to an</font><font color="#E5E5E5"> issue</font>

22
00:00:42,870 --> 00:00:46,829
<font color="#E5E5E5">of trust and I'm going to start out with</font>

23
00:00:44,219 --> 00:00:49,530
<font color="#E5E5E5">a really obvious observation we don't</font>

24
00:00:46,829 --> 00:00:51,180
trust<font color="#E5E5E5"> software and that's a really good</font>

25
00:00:49,530 --> 00:00:54,420
thing software's horrible

26
00:00:51,180 --> 00:00:56,129
so we audit software<font color="#CCCCCC"> to make sure that</font>

27
00:00:54,420 --> 00:00:58,530
it's working the way<font color="#CCCCCC"> we expect it to</font>

28
00:00:56,129 --> 00:00:59,608
work<font color="#CCCCCC"> we reverse engineer software to</font>

29
00:00:58,530 --> 00:01:00,989
make<font color="#E5E5E5"> sure there's no secret</font>

30
00:00:59,609 --> 00:01:02,730
functionality in<font color="#E5E5E5"> it we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make sure</font>

31
00:01:00,989 --> 00:01:05,429
minesweeper<font color="#E5E5E5"> is not dialing out some</font>

32
00:01:02,730 --> 00:01:06,929
Russian<font color="#E5E5E5"> website right we break software</font>

33
00:01:05,430 --> 00:01:08,340
we try to find vulnerabilities<font color="#CCCCCC"> and we</font>

34
00:01:06,930 --> 00:01:10,799
exploit software for the sake of

35
00:01:08,340 --> 00:01:13,409
hardening hardening it to make it<font color="#E5E5E5"> more</font>

36
00:01:10,799 --> 00:01:15,420
trustworthy<font color="#CCCCCC"> and then we still after</font><font color="#E5E5E5"> all</font>

37
00:01:13,409 --> 00:01:17,549
<font color="#E5E5E5">this we still don't trust software so we</font>

38
00:01:15,420 --> 00:01:21,060
just stand box it to try<font color="#E5E5E5"> to minimize</font><font color="#CCCCCC"> the</font>

39
00:01:17,549 --> 00:01:23,159
damage<font color="#E5E5E5"> when something goes rogue so but</font>

40
00:01:21,060 --> 00:01:25,590
what about the processor itself<font color="#CCCCCC"> you know</font>

41
00:01:23,159 --> 00:01:27,119
the thing responsible for running all

42
00:01:25,590 --> 00:01:28,680
this<font color="#E5E5E5"> software the thing responsible for</font>

43
00:01:27,119 --> 00:01:30,420
enforcing all the security boundaries on

44
00:01:28,680 --> 00:01:33,180
<font color="#E5E5E5">the system even though we don't trust</font>

45
00:01:30,420 --> 00:01:36,210
software the processor we just<font color="#E5E5E5"> blindly</font>

46
00:01:33,180 --> 00:01:37,770
trust<font color="#E5E5E5"> and there's a reason</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font>

47
00:01:36,210 --> 00:01:39,990
don't have reverse engineering and

48
00:01:37,770 --> 00:01:42,240
introspection<font color="#E5E5E5"> auditing tools for</font>

49
00:01:39,990 --> 00:01:44,250
<font color="#CCCCCC">hardware the way that we have them for</font>

50
00:01:42,240 --> 00:01:46,770
software<font color="#E5E5E5"> we don't really have a way</font><font color="#CCCCCC"> to</font>

51
00:01:44,250 --> 00:01:48,720
establish<font color="#E5E5E5"> trust in the processor the</font>

52
00:01:46,770 --> 00:01:50,250
best thing we have<font color="#CCCCCC"> are</font><font color="#E5E5E5"> reference manuals</font>

53
00:01:48,720 --> 00:01:52,229
<font color="#E5E5E5">and specifications</font><font color="#CCCCCC"> that describe what</font>

54
00:01:50,250 --> 00:01:54,299
<font color="#CCCCCC">this processor does we have to read</font>

55
00:01:52,229 --> 00:01:56,340
these<font color="#CCCCCC"> documents and just assume on faith</font>

56
00:01:54,299 --> 00:01:58,140
<font color="#E5E5E5">that</font><font color="#CCCCCC"> this is how the processor actually</font>

57
00:01:56,340 --> 00:02:00,030
operates<font color="#E5E5E5"> and I think that's absolutely</font>

58
00:01:58,140 --> 00:02:01,649
<font color="#E5E5E5">crazy because we would never do that in</font>

59
00:02:00,030 --> 00:02:03,299
software<font color="#E5E5E5"> right you would never download</font>

60
00:02:01,649 --> 00:02:05,939
some random executable<font color="#E5E5E5"> from a website</font>

61
00:02:03,299 --> 00:02:07,920
<font color="#E5E5E5">read the readme see the readme says</font>

62
00:02:05,939 --> 00:02:09,598
totally not a virus<font color="#E5E5E5"> and think yeah this</font>

63
00:02:07,920 --> 00:02:11,310
is totally<font color="#CCCCCC"> not a virus I'll go ahead and</font>

64
00:02:09,598 --> 00:02:12,470
run it<font color="#E5E5E5"> but that's exactly what</font><font color="#CCCCCC"> we're</font>

65
00:02:11,310 --> 00:02:14,210
<font color="#CCCCCC">doing with our</font><font color="#E5E5E5"> process</font>

66
00:02:12,470 --> 00:02:15,980
all we have to<font color="#CCCCCC"> go on is the</font>

67
00:02:14,210 --> 00:02:18,440
<font color="#E5E5E5">documentation that says this is</font><font color="#CCCCCC"> how the</font>

68
00:02:15,980 --> 00:02:21,170
processor operates<font color="#E5E5E5"> so why is that why do</font>

69
00:02:18,440 --> 00:02:24,109
we blindly trust the processor<font color="#E5E5E5"> even when</font>

70
00:02:21,170 --> 00:02:26,540
we're so untrusting<font color="#E5E5E5"> of software</font><font color="#CCCCCC"> because</font>

71
00:02:24,110 --> 00:02:29,300
<font color="#CCCCCC">hardware has all the exact same</font><font color="#E5E5E5"> problems</font>

72
00:02:26,540 --> 00:02:30,950
<font color="#CCCCCC">that software</font><font color="#E5E5E5"> has so in software we</font>

73
00:02:29,300 --> 00:02:32,870
worry about<font color="#E5E5E5"> secret functionality right</font>

74
00:02:30,950 --> 00:02:35,299
well<font color="#E5E5E5"> hardware has secret functionality</font>

75
00:02:32,870 --> 00:02:37,100
for example<font color="#CCCCCC"> intel infamously had what</font>

76
00:02:35,300 --> 00:02:38,960
were called<font color="#E5E5E5"> the appendix</font><font color="#CCCCCC"> h documents</font>

77
00:02:37,100 --> 00:02:40,640
with the<font color="#CCCCCC"> pentium processor this was like</font>

78
00:02:38,960 --> 00:02:42,200
a secret set of documentation<font color="#CCCCCC"> that</font>

79
00:02:40,640 --> 00:02:43,970
<font color="#E5E5E5">described proprietary parts of the</font>

80
00:02:42,200 --> 00:02:45,380
architecture<font color="#CCCCCC"> that they didn't want the</font>

81
00:02:43,970 --> 00:02:47,480
regular<font color="#CCCCCC"> public to know</font><font color="#E5E5E5"> about you can</font>

82
00:02:45,380 --> 00:02:50,060
only<font color="#E5E5E5"> get access</font><font color="#CCCCCC"> to appendix H if you</font><font color="#E5E5E5"> are</font>

83
00:02:47,480 --> 00:02:52,010
<font color="#E5E5E5">a trusted Intel partner what</font><font color="#CCCCCC"> about bugs</font>

84
00:02:50,060 --> 00:02:54,620
we worry<font color="#CCCCCC"> about bugs and</font><font color="#E5E5E5"> software right</font>

85
00:02:52,010 --> 00:02:56,630
does<font color="#E5E5E5"> hardware have bugs absolutely the</font>

86
00:02:54,620 --> 00:02:58,040
Pentium had the food bug where you<font color="#E5E5E5"> could</font>

87
00:02:56,630 --> 00:02:59,780
give<font color="#E5E5E5"> it what was called a lock cop</font>

88
00:02:58,040 --> 00:03:01,670
<font color="#E5E5E5">exchange instruction the processor</font>

89
00:02:59,780 --> 00:03:03,200
<font color="#E5E5E5">itself would lock up the serious</font>

90
00:03:01,670 --> 00:03:05,510
<font color="#E5E5E5">security vulnerability the Pentium had</font>

91
00:03:03,200 --> 00:03:06,679
the F did bugs<font color="#CCCCCC"> where</font><font color="#E5E5E5"> in one in a couple</font>

92
00:03:05,510 --> 00:03:08,420
billion floating-point instructions

93
00:03:06,680 --> 00:03:10,400
<font color="#E5E5E5">would be off by a fraction of a percent</font>

94
00:03:08,420 --> 00:03:13,670
<font color="#E5E5E5">cost until about five</font><font color="#CCCCCC"> hundred million</font>

95
00:03:10,400 --> 00:03:14,870
<font color="#E5E5E5">dollars</font><font color="#CCCCCC"> has well has T</font><font color="#E5E5E5"> effects bugs you</font>

96
00:03:13,670 --> 00:03:16,429
<font color="#E5E5E5">may have heard that they had to</font>

97
00:03:14,870 --> 00:03:18,400
completely<font color="#E5E5E5"> disable transactional memory</font>

98
00:03:16,430 --> 00:03:20,959
<font color="#E5E5E5">support and has well because of bugs</font>

99
00:03:18,400 --> 00:03:22,459
<font color="#E5E5E5">skylake has hyper-threading bugs</font><font color="#CCCCCC"> things</font>

100
00:03:20,959 --> 00:03:24,230
that<font color="#E5E5E5"> look pretty</font><font color="#CCCCCC"> serious and could cause</font>

101
00:03:22,459 --> 00:03:26,090
data corruption<font color="#E5E5E5"> you may have heard about</font>

102
00:03:24,230 --> 00:03:28,700
the<font color="#CCCCCC"> risen bugs</font><font color="#E5E5E5"> where in risen processors</font>

103
00:03:26,090 --> 00:03:30,910
will lock up or crash<font color="#E5E5E5"> under heavy</font><font color="#CCCCCC"> SMA</font>

104
00:03:28,700 --> 00:03:32,929
<font color="#CCCCCC">three instruction</font><font color="#E5E5E5"> modes</font>

105
00:03:30,910 --> 00:03:34,730
we're<font color="#E5E5E5"> just riddled with bugs in our</font>

106
00:03:32,930 --> 00:03:35,630
<font color="#E5E5E5">modern processors what about</font>

107
00:03:34,730 --> 00:03:37,700
vulnerabilities<font color="#E5E5E5"> and</font><font color="#CCCCCC"> worried</font><font color="#E5E5E5"> about</font>

108
00:03:35,630 --> 00:03:39,799
vulnerabilities<font color="#E5E5E5"> and software processors</font>

109
00:03:37,700 --> 00:03:43,369
have vulnerabilities<font color="#E5E5E5"> to assist</font><font color="#CCCCCC"> read</font>

110
00:03:39,800 --> 00:03:44,959
vulnerability on x86<font color="#E5E5E5"> allowed kernel</font>

111
00:03:43,370 --> 00:03:47,060
privilege escalation on<font color="#E5E5E5"> a wide variety</font>

112
00:03:44,959 --> 00:03:49,070
<font color="#E5E5E5">of operating systems</font><font color="#CCCCCC"> to cache poisoning</font>

113
00:03:47,060 --> 00:03:50,900
<font color="#E5E5E5">and memory sinkhole attacks allowed</font>

114
00:03:49,070 --> 00:03:53,060
privilege escalation into<font color="#E5E5E5"> system</font>

115
00:03:50,900 --> 00:03:54,769
<font color="#CCCCCC">management mode on</font><font color="#E5E5E5"> x86 processors we</font>

116
00:03:53,060 --> 00:03:58,459
have vulnerability to the<font color="#E5E5E5"> lore on these</font>

117
00:03:54,769 --> 00:04:01,040
processors as well<font color="#E5E5E5"> so if if processors</font>

118
00:03:58,459 --> 00:04:03,530
have all the same issues<font color="#E5E5E5"> as software we</font>

119
00:04:01,040 --> 00:04:07,100
should<font color="#E5E5E5"> really stop just blindly trusting</font>

120
00:04:03,530 --> 00:04:08,330
the hardware so what kind of<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that</font>

121
00:04:07,100 --> 00:04:10,010
we need<font color="#CCCCCC"> to worry about when I say we</font>

122
00:04:08,330 --> 00:04:11,750
<font color="#E5E5E5">should stop trusting the hardware so</font>

123
00:04:10,010 --> 00:04:13,340
much well<font color="#CCCCCC"> the the main</font><font color="#E5E5E5"> thing I was</font>

124
00:04:11,750 --> 00:04:15,500
interested<font color="#E5E5E5"> in for the purposes of this</font>

125
00:04:13,340 --> 00:04:17,750
research<font color="#E5E5E5"> where hidden instructions built</font>

126
00:04:15,500 --> 00:04:18,890
into the processor basically secret

127
00:04:17,750 --> 00:04:20,750
<font color="#CCCCCC">functionality that</font><font color="#E5E5E5"> could give you</font>

128
00:04:18,890 --> 00:04:22,729
backdoor or powerful access to some sort

129
00:04:20,750 --> 00:04:24,590
<font color="#CCCCCC">of processor internals</font><font color="#E5E5E5"> this sounds</font>

130
00:04:22,729 --> 00:04:26,120
almost conspiracy theory<font color="#CCCCCC"> astray</font><font color="#E5E5E5"> like</font>

131
00:04:24,590 --> 00:04:27,979
this is<font color="#E5E5E5"> crazy but it's not all</font>

132
00:04:26,120 --> 00:04:29,510
far removed<font color="#CCCCCC"> from</font><font color="#E5E5E5"> reality</font><font color="#CCCCCC"> we actually</font>

133
00:04:27,979 --> 00:04:30,979
have some pretty<font color="#E5E5E5"> good historical</font>

134
00:04:29,510 --> 00:04:34,310
<font color="#E5E5E5">examples of this kind of thing built</font>

135
00:04:30,979 --> 00:04:35,840
into x86<font color="#E5E5E5"> so for example at</font><font color="#CCCCCC"> 56 used to</font>

136
00:04:34,310 --> 00:04:37,550
have what<font color="#E5E5E5"> was called the ice</font><font color="#CCCCCC"> breakpoint</font>

137
00:04:35,840 --> 00:04:39,138
instruction<font color="#E5E5E5"> this was an undocumented</font>

138
00:04:37,550 --> 00:04:40,610
instruction not acknowledged by<font color="#E5E5E5"> the</font>

139
00:04:39,139 --> 00:04:42,530
manufacturer<font color="#CCCCCC"> that would put the</font>

140
00:04:40,610 --> 00:04:44,810
<font color="#CCCCCC">processor into a special privileged</font><font color="#E5E5E5"> ice</font>

141
00:04:42,530 --> 00:04:46,520
mode used to have the load all

142
00:04:44,810 --> 00:04:48,680
instruction another undocumented

143
00:04:46,520 --> 00:04:50,510
<font color="#E5E5E5">unacknowledged instruction that would</font>

144
00:04:48,680 --> 00:04:52,550
<font color="#E5E5E5">allow you to load secret processor</font>

145
00:04:50,510 --> 00:04:54,919
registers with values<font color="#CCCCCC"> that you couldn't</font>

146
00:04:52,550 --> 00:04:56,600
normally<font color="#E5E5E5"> get into those registers even</font>

147
00:04:54,919 --> 00:04:58,690
looking at<font color="#E5E5E5"> more</font><font color="#CCCCCC"> recent examples you may</font>

148
00:04:56,600 --> 00:05:01,190
have heard about<font color="#E5E5E5"> the API call</font>

149
00:04:58,690 --> 00:05:02,690
vulnerabilities<font color="#E5E5E5"> and the Microsoft x86</font>

150
00:05:01,190 --> 00:05:06,800
emulator is essentially Microsoft

151
00:05:02,690 --> 00:05:07,940
<font color="#E5E5E5">backdoored</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> ud0 instruction in x86 to</font>

152
00:05:06,800 --> 00:05:09,800
redefine<font color="#CCCCCC"> that instruction to me</font>

153
00:05:07,940 --> 00:05:11,360
something entirely different<font color="#CCCCCC"> and then</font>

154
00:05:09,800 --> 00:05:13,639
didn't really acknowledge<font color="#CCCCCC"> that that</font>

155
00:05:11,360 --> 00:05:15,380
instruction existed so this is not all

156
00:05:13,639 --> 00:05:17,330
<font color="#CCCCCC">that</font><font color="#E5E5E5"> far removed from reality</font><font color="#CCCCCC"> the</font>

157
00:05:15,380 --> 00:05:19,580
possibility of powerful hidden

158
00:05:17,330 --> 00:05:22,370
instructions is very real<font color="#CCCCCC"> and sort of</font>

159
00:05:19,580 --> 00:05:25,130
hit<font color="#CCCCCC"> that home if you open up x86</font>

160
00:05:22,370 --> 00:05:27,169
software developer manual guides<font color="#E5E5E5"> you</font>

161
00:05:25,130 --> 00:05:29,240
look towards the back of<font color="#CCCCCC"> Intel SDM vol</font><font color="#E5E5E5"> 2</font>

162
00:05:27,169 --> 00:05:31,609
you'll see page<font color="#CCCCCC"> after page of tables</font>

163
00:05:29,240 --> 00:05:33,650
<font color="#E5E5E5">that</font><font color="#CCCCCC"> look like this these</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> the</font>

164
00:05:31,610 --> 00:05:35,060
processor opcode<font color="#CCCCCC"> Maps</font><font color="#E5E5E5"> they basically are</font>

165
00:05:33,650 --> 00:05:36,950
supposed<font color="#E5E5E5"> to tell you every instruction</font>

166
00:05:35,060 --> 00:05:38,510
<font color="#CCCCCC">that exists in your processor</font><font color="#E5E5E5"> they tell</font>

167
00:05:36,950 --> 00:05:40,400
you when your processor sees this<font color="#E5E5E5"> byte</font>

168
00:05:38,510 --> 00:05:42,800
it<font color="#E5E5E5"> executed this instruction when it see</font>

169
00:05:40,400 --> 00:05:44,330
this<font color="#E5E5E5"> bite it executes this instruction</font>

170
00:05:42,800 --> 00:05:46,160
but you may notice<font color="#CCCCCC"> something if you look</font>

171
00:05:44,330 --> 00:05:47,359
really closely at<font color="#CCCCCC"> these opcode maps</font>

172
00:05:46,160 --> 00:05:49,460
there's something a little<font color="#CCCCCC"> unusual here</font>

173
00:05:47,360 --> 00:05:51,590
there's a gap down on the<font color="#CCCCCC"> bottom here</font>

174
00:05:49,460 --> 00:05:54,109
<font color="#E5E5E5">now this</font><font color="#CCCCCC"> is the document</font><font color="#E5E5E5"> that's supposed</font>

175
00:05:51,590 --> 00:05:56,060
<font color="#CCCCCC">to tell us exactly what</font><font color="#E5E5E5"> this processor</font>

176
00:05:54,110 --> 00:05:59,870
does<font color="#E5E5E5"> this is a document we're basing all</font>

177
00:05:56,060 --> 00:06:01,370
of our trust on but it's intentionally

178
00:05:59,870 --> 00:06:03,590
<font color="#E5E5E5">leaving things out now we don't have</font>

179
00:06:01,370 --> 00:06:05,930
<font color="#E5E5E5">reverse engineering or auditing tools</font>

180
00:06:03,590 --> 00:06:07,940
for x86 we really just have<font color="#E5E5E5"> this</font>

181
00:06:05,930 --> 00:06:10,490
document and it's intentionally not

182
00:06:07,940 --> 00:06:11,900
giving us all<font color="#CCCCCC"> of the information</font><font color="#E5E5E5"> so</font>

183
00:06:10,490 --> 00:06:14,930
<font color="#E5E5E5">that's not a really good start towards</font>

184
00:06:11,900 --> 00:06:16,638
trusting these processors right so my

185
00:06:14,930 --> 00:06:17,900
goal when<font color="#E5E5E5"> I set out on this project was</font>

186
00:06:16,639 --> 00:06:19,760
<font color="#CCCCCC">to find a way to</font><font color="#E5E5E5"> sort of audit the</font>

187
00:06:17,900 --> 00:06:22,909
processor<font color="#E5E5E5"> figure out what instructions</font>

188
00:06:19,760 --> 00:06:24,889
are<font color="#E5E5E5"> really on this thing so how do we</font>

189
00:06:22,910 --> 00:06:27,320
find<font color="#E5E5E5"> hidden instructions</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the x86</font>

190
00:06:24,889 --> 00:06:29,449
architecture<font color="#E5E5E5"> and whether there's a</font>

191
00:06:27,320 --> 00:06:31,699
unique challenge<font color="#E5E5E5"> in x86 maybe that</font>

192
00:06:29,449 --> 00:06:33,560
instructions and x86 are very complex

193
00:06:31,699 --> 00:06:35,510
<font color="#CCCCCC">they can be</font><font color="#E5E5E5"> either 1 byte long so for</font>

194
00:06:33,560 --> 00:06:37,969
example increment<font color="#CCCCCC"> EAX is a 1 byte</font>

195
00:06:35,510 --> 00:06:38,940
instruction just<font color="#E5E5E5"> hex 40 or they can be</font>

196
00:06:37,969 --> 00:06:42,300
up to 15

197
00:06:38,940 --> 00:06:44,160
long so<font color="#CCCCCC"> la CAD</font><font color="#E5E5E5"> Huard</font><font color="#CCCCCC"> TS override some</font>

198
00:06:42,300 --> 00:06:47,070
complicated address some complicated

199
00:06:44,160 --> 00:06:49,650
immediate value is a 15 byte instruction

200
00:06:47,070 --> 00:06:51,210
in the x86<font color="#CCCCCC"> architecture so if you look</font>

201
00:06:49,650 --> 00:06:52,859
at a<font color="#E5E5E5"> worst case scenario how many</font>

202
00:06:51,210 --> 00:06:54,750
<font color="#E5E5E5">instructions could there possibly be in</font>

203
00:06:52,860 --> 00:06:56,430
x86<font color="#CCCCCC"> if we just say what if all</font>

204
00:06:54,750 --> 00:06:58,260
instructions are 15<font color="#E5E5E5"> bytes long the</font>

205
00:06:56,430 --> 00:07:00,780
maximum length it's somewhere in the

206
00:06:58,260 --> 00:07:02,909
<font color="#E5E5E5">order of 1.3 undecillion possible</font>

207
00:07:00,780 --> 00:07:05,849
instructions<font color="#E5E5E5"> that's that's a really</font>

208
00:07:02,910 --> 00:07:08,130
<font color="#E5E5E5">really unfathomably large search space</font>

209
00:07:05,850 --> 00:07:09,450
right<font color="#E5E5E5"> which means that the obvious</font>

210
00:07:08,130 --> 00:07:12,570
approaches to trying<font color="#CCCCCC"> to search through</font>

211
00:07:09,450 --> 00:07:14,729
<font color="#CCCCCC">this instruction set don't really work</font>

212
00:07:12,570 --> 00:07:16,290
you can't just try all<font color="#CCCCCC"> the instructions</font>

213
00:07:14,730 --> 00:07:17,610
that<font color="#CCCCCC"> might</font><font color="#E5E5E5"> work on our RISC processor</font>

214
00:07:16,290 --> 00:07:20,130
that's<font color="#E5E5E5"> not going</font><font color="#CCCCCC"> to work on an x86</font>

215
00:07:17,610 --> 00:07:21,690
processor<font color="#E5E5E5"> you can't really just try</font>

216
00:07:20,130 --> 00:07:23,490
random instructions it's going<font color="#CCCCCC"> to give</font>

217
00:07:21,690 --> 00:07:25,590
you really really poor coverage<font color="#E5E5E5"> if you</font>

218
00:07:23,490 --> 00:07:28,290
just generate random instructions<font color="#E5E5E5"> to see</font>

219
00:07:25,590 --> 00:07:29,940
how they execute on the processor so<font color="#E5E5E5"> you</font>

220
00:07:28,290 --> 00:07:32,130
might think<font color="#CCCCCC"> well could we could we</font><font color="#E5E5E5"> guide</font>

221
00:07:29,940 --> 00:07:34,530
our fuzzing based on the processor

222
00:07:32,130 --> 00:07:35,850
documentation<font color="#CCCCCC"> whether there's two big</font>

223
00:07:34,530 --> 00:07:36,750
problems<font color="#CCCCCC"> with</font><font color="#E5E5E5"> that one I think we've</font>

224
00:07:35,850 --> 00:07:38,070
already<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> established the</font>

225
00:07:36,750 --> 00:07:39,540
documentation isn't<font color="#CCCCCC"> telling</font><font color="#E5E5E5"> us</font>

226
00:07:38,070 --> 00:07:40,170
<font color="#E5E5E5">everything the documentation can't be</font>

227
00:07:39,540 --> 00:07:42,720
trusted

228
00:07:40,170 --> 00:07:46,020
if you guide your analysis based<font color="#E5E5E5"> on the</font>

229
00:07:42,720 --> 00:07:48,300
documentation<font color="#E5E5E5"> you're sort of going</font><font color="#CCCCCC"> to</font>

230
00:07:46,020 --> 00:07:49,859
<font color="#E5E5E5">lose right from the start another big</font>

231
00:07:48,300 --> 00:07:51,900
issue with<font color="#CCCCCC"> that you might think well</font><font color="#E5E5E5"> we</font>

232
00:07:49,860 --> 00:07:53,640
saw those gaps<font color="#E5E5E5"> in the opcode</font><font color="#CCCCCC"> maps right</font>

233
00:07:51,900 --> 00:07:55,710
why<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> we just like buzz</font><font color="#CCCCCC"> around those</font>

234
00:07:53,640 --> 00:07:58,229
gaps<font color="#CCCCCC"> those gaps really</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> tell</font><font color="#E5E5E5"> you the</font>

235
00:07:55,710 --> 00:07:59,340
first byte of the instruction<font color="#E5E5E5"> so if</font>

236
00:07:58,230 --> 00:08:00,990
you're dealing<font color="#E5E5E5"> with a</font><font color="#CCCCCC"> complex</font>

237
00:07:59,340 --> 00:08:02,820
instruction that exists within one of

238
00:08:00,990 --> 00:08:04,260
<font color="#E5E5E5">those gaps</font><font color="#CCCCCC"> you're still not going to be</font>

239
00:08:02,820 --> 00:08:06,360
able<font color="#E5E5E5"> to find it with any naive approach</font>

240
00:08:04,260 --> 00:08:07,890
trying to focus<font color="#CCCCCC"> just on my gapped area</font>

241
00:08:06,360 --> 00:08:09,780
we need something a lot more<font color="#E5E5E5"> intelligent</font>

242
00:08:07,890 --> 00:08:13,710
<font color="#E5E5E5">to search through the x86 instruction</font>

243
00:08:09,780 --> 00:08:15,809
space so our goal<font color="#E5E5E5"> here since we've got</font>

244
00:08:13,710 --> 00:08:17,430
so many<font color="#E5E5E5"> possible bytes in an instruction</font>

245
00:08:15,810 --> 00:08:19,980
is to<font color="#E5E5E5"> quickly skip over the bytes that</font>

246
00:08:17,430 --> 00:08:22,500
don't matter<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that we can focus on the</font>

247
00:08:19,980 --> 00:08:23,640
bytes that<font color="#E5E5E5"> actually do matter so I start</font>

248
00:08:22,500 --> 00:08:25,950
out<font color="#E5E5E5"> with an</font><font color="#CCCCCC"> observation here the</font>

249
00:08:23,640 --> 00:08:27,900
meaningful bytes<font color="#E5E5E5"> in an x86 instruction</font>

250
00:08:25,950 --> 00:08:30,599
impact either that instructions length

251
00:08:27,900 --> 00:08:32,039
<font color="#E5E5E5">or</font><font color="#CCCCCC"> its exception behavior in other words</font>

252
00:08:30,600 --> 00:08:33,630
the bytes that really matter<font color="#E5E5E5"> are</font>

253
00:08:32,039 --> 00:08:35,218
changing<font color="#E5E5E5"> something fundamental about</font>

254
00:08:33,630 --> 00:08:38,520
<font color="#CCCCCC">that instruction and the bytes that</font>

255
00:08:35,219 --> 00:08:39,930
don't matter tend to just be register or

256
00:08:38,520 --> 00:08:41,549
immediate values<font color="#E5E5E5"> that don't really</font>

257
00:08:39,929 --> 00:08:43,199
<font color="#E5E5E5">change anything fundamental about that</font>

258
00:08:41,549 --> 00:08:44,910
instruction so I want<font color="#E5E5E5"> to find a way to</font>

259
00:08:43,200 --> 00:08:46,560
<font color="#CCCCCC">focus on those meaningful bytes and I</font>

260
00:08:44,910 --> 00:08:48,209
kind of<font color="#E5E5E5"> came up</font><font color="#CCCCCC"> with an approach that</font>

261
00:08:46,560 --> 00:08:50,699
would use a depth first search algorithm

262
00:08:48,210 --> 00:08:52,380
to quickly enumerate the<font color="#CCCCCC"> x86 instruction</font>

263
00:08:50,700 --> 00:08:54,720
set<font color="#E5E5E5"> and it works something like this</font>

264
00:08:52,380 --> 00:08:56,640
we're going to guess<font color="#E5E5E5"> in arbitrary x86</font>

265
00:08:54,720 --> 00:08:58,680
instruction<font color="#E5E5E5"> I'm going to basically guess</font>

266
00:08:56,640 --> 00:09:00,480
15 bytes<font color="#CCCCCC"> let's start out with just 15</font>

267
00:08:58,680 --> 00:09:01,770
bytes<font color="#E5E5E5"> of</font><font color="#CCCCCC"> zeros then we're going to</font>

268
00:09:00,480 --> 00:09:03,060
<font color="#E5E5E5">execute this instruction on the</font>

269
00:09:01,770 --> 00:09:04,770
processor<font color="#E5E5E5"> and through that execution</font>

270
00:09:03,060 --> 00:09:07,500
we're going to<font color="#E5E5E5"> look at how</font><font color="#CCCCCC"> long that</font>

271
00:09:04,770 --> 00:09:09,510
instruction<font color="#CCCCCC"> actually is in</font><font color="#E5E5E5"> this</font>

272
00:09:07,500 --> 00:09:10,800
<font color="#E5E5E5">situation when we</font><font color="#CCCCCC"> actually shoot that</font>

273
00:09:09,510 --> 00:09:13,110
<font color="#E5E5E5">instruction we'll see that it's a 2-byte</font>

274
00:09:10,800 --> 00:09:14,699
instruction<font color="#CCCCCC"> so then I'm going to</font><font color="#E5E5E5"> move to</font>

275
00:09:13,110 --> 00:09:16,740
the<font color="#E5E5E5"> last byte of that instruction and</font>

276
00:09:14,700 --> 00:09:17,880
I'm going to<font color="#CCCCCC"> increment that</font><font color="#E5E5E5"> last byte</font><font color="#CCCCCC"> of</font>

277
00:09:16,740 --> 00:09:19,920
the instruction<font color="#E5E5E5"> and then I'm going to</font>

278
00:09:17,880 --> 00:09:21,750
<font color="#E5E5E5">rerun the instruction to</font><font color="#CCCCCC"> see how long</font><font color="#E5E5E5"> it</font>

279
00:09:19,920 --> 00:09:23,219
is again again we'll see that this

280
00:09:21,750 --> 00:09:25,110
<font color="#CCCCCC">instruction is</font><font color="#E5E5E5"> 2 bytes long we'll</font>

281
00:09:23,220 --> 00:09:26,760
increment the last byte we execute it

282
00:09:25,110 --> 00:09:28,860
observe its length<font color="#E5E5E5"> increment the last</font>

283
00:09:26,760 --> 00:09:30,930
byte executed observe its length<font color="#E5E5E5"> and</font>

284
00:09:28,860 --> 00:09:33,420
eventually when you increment<font color="#E5E5E5"> that last</font>

285
00:09:30,930 --> 00:09:34,650
byte<font color="#CCCCCC"> you're going to find something</font><font color="#E5E5E5"> when</font>

286
00:09:33,420 --> 00:09:35,880
you<font color="#E5E5E5"> have to do the instruction</font><font color="#CCCCCC"> the</font>

287
00:09:34,650 --> 00:09:38,100
length of that<font color="#CCCCCC"> instruction is</font><font color="#E5E5E5"> going to</font>

288
00:09:35,880 --> 00:09:39,300
<font color="#E5E5E5">change it just became</font><font color="#CCCCCC"> 3 bytes now</font><font color="#E5E5E5"> so</font>

289
00:09:38,100 --> 00:09:40,980
when you observe<font color="#E5E5E5"> that the length of</font><font color="#CCCCCC"> an</font>

290
00:09:39,300 --> 00:09:42,569
instruction changes we're going to move

291
00:09:40,980 --> 00:09:44,190
<font color="#E5E5E5">to the last byte of</font><font color="#CCCCCC"> the instruction and</font>

292
00:09:42,570 --> 00:09:46,440
increment it again and begin<font color="#E5E5E5"> the process</font>

293
00:09:44,190 --> 00:09:48,570
<font color="#CCCCCC">all over</font><font color="#E5E5E5"> execute the instruction observe</font>

294
00:09:46,440 --> 00:09:49,680
its length<font color="#E5E5E5"> increment when you start</font>

295
00:09:48,570 --> 00:09:51,480
doing this to search through<font color="#E5E5E5"> the</font>

296
00:09:49,680 --> 00:09:53,160
instruction set these are<font color="#CCCCCC"> the kinds of</font>

297
00:09:51,480 --> 00:09:55,440
<font color="#E5E5E5">patterns you're going to find</font><font color="#CCCCCC"> we'll</font>

298
00:09:53,160 --> 00:09:57,240
start at<font color="#CCCCCC"> 0 0</font><font color="#E5E5E5"> become 0 1 and when we</font>

299
00:09:55,440 --> 00:09:58,770
start incrementing<font color="#E5E5E5"> eventually our</font>

300
00:09:57,240 --> 00:10:00,720
instruction grows in length

301
00:09:58,770 --> 00:10:03,329
<font color="#E5E5E5">we'll keep incrementing and eventually</font>

302
00:10:00,720 --> 00:10:05,250
<font color="#CCCCCC">we'll observe</font><font color="#E5E5E5"> another length change so</font>

303
00:10:03,330 --> 00:10:07,260
<font color="#E5E5E5">as you can sort of see here we end up</font>

304
00:10:05,250 --> 00:10:09,030
with more more complex instructions as

305
00:10:07,260 --> 00:10:11,880
we drill deeper and deeper into the

306
00:10:09,030 --> 00:10:13,050
instruction set with this approach now

307
00:10:11,880 --> 00:10:14,610
eventually you're going<font color="#E5E5E5"> to go through</font>

308
00:10:13,050 --> 00:10:15,990
all<font color="#E5E5E5"> possibilities of that last byte of</font>

309
00:10:14,610 --> 00:10:17,670
<font color="#CCCCCC">the instruction</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the length</font><font color="#E5E5E5"> isn't</font>

310
00:10:15,990 --> 00:10:20,160
going to change<font color="#E5E5E5"> any more so when that</font>

311
00:10:17,670 --> 00:10:22,650
happens when you've tried all<font color="#E5E5E5"> 256</font>

312
00:10:20,160 --> 00:10:24,449
possibilities for that last byte when

313
00:10:22,650 --> 00:10:26,189
that last<font color="#E5E5E5"> bite is FF you're going to</font>

314
00:10:24,450 --> 00:10:27,450
increment it to let<font color="#E5E5E5"> it roll over and</font>

315
00:10:26,190 --> 00:10:29,010
you're going to move<font color="#CCCCCC"> back up to</font><font color="#E5E5E5"> the</font>

316
00:10:27,450 --> 00:10:30,690
previous<font color="#E5E5E5"> byte that</font><font color="#CCCCCC"> way it's going</font><font color="#E5E5E5"> to</font>

317
00:10:29,010 --> 00:10:32,430
<font color="#CCCCCC">become your</font><font color="#E5E5E5"> new marker that's what we're</font>

318
00:10:30,690 --> 00:10:33,450
going to<font color="#CCCCCC"> increment from from now on</font><font color="#E5E5E5"> so</font>

319
00:10:32,430 --> 00:10:35,370
we're going<font color="#E5E5E5"> to increment the marker</font>

320
00:10:33,450 --> 00:10:37,560
execute the instruction observe its

321
00:10:35,370 --> 00:10:39,210
length<font color="#E5E5E5"> if the length didn't change just</font>

322
00:10:37,560 --> 00:10:41,130
repeat that<font color="#CCCCCC"> process</font><font color="#E5E5E5"> increment the marker</font>

323
00:10:39,210 --> 00:10:42,450
execute the<font color="#E5E5E5"> instructions observe its</font>

324
00:10:41,130 --> 00:10:44,160
length<font color="#CCCCCC"> and we'll keep doing it</font>

325
00:10:42,450 --> 00:10:45,840
<font color="#CCCCCC">eventually in this situation that marker</font>

326
00:10:44,160 --> 00:10:47,459
will roll over<font color="#E5E5E5"> again so we'll move</font><font color="#CCCCCC"> back</font>

327
00:10:45,840 --> 00:10:49,620
another byte the marker will<font color="#E5E5E5"> roll over</font>

328
00:10:47,460 --> 00:10:51,420
<font color="#E5E5E5">we'll keep moving</font><font color="#CCCCCC"> back and we</font><font color="#E5E5E5"> keep doing</font>

329
00:10:49,620 --> 00:10:54,900
this<font color="#E5E5E5"> continuously</font><font color="#CCCCCC"> incrementing and</font>

330
00:10:51,420 --> 00:10:57,089
moving back now until eventually<font color="#E5E5E5"> when we</font>

331
00:10:54,900 --> 00:10:58,590
increment one of these bytes and execute

332
00:10:57,090 --> 00:11:00,330
the instruction the length of that

333
00:10:58,590 --> 00:11:01,530
<font color="#CCCCCC">instruction is going to</font><font color="#E5E5E5"> change again</font><font color="#CCCCCC"> so</font>

334
00:11:00,330 --> 00:11:03,870
we know<font color="#CCCCCC"> that we changed</font><font color="#E5E5E5"> another</font>

335
00:11:01,530 --> 00:11:04,920
fundamental piece of<font color="#CCCCCC"> this instruction so</font>

336
00:11:03,870 --> 00:11:05,830
now we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to move to the end</font><font color="#E5E5E5"> of</font>

337
00:11:04,920 --> 00:11:09,219
the instruction

338
00:11:05,830 --> 00:11:12,540
the process all over again<font color="#CCCCCC"> so what this</font>

339
00:11:09,220 --> 00:11:15,610
approach<font color="#E5E5E5"> does is essentially lets you</font>

340
00:11:12,540 --> 00:11:17,140
tunnel through this instruction space<font color="#CCCCCC"> to</font>

341
00:11:15,610 --> 00:11:18,940
quickly skip over<font color="#E5E5E5"> these bytes that don't</font>

342
00:11:17,140 --> 00:11:20,680
matter and really focus<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the bytes</font>

343
00:11:18,940 --> 00:11:22,990
that<font color="#E5E5E5"> do matter it lets you exhaustively</font>

344
00:11:20,680 --> 00:11:24,790
search the bytes that<font color="#E5E5E5"> actually impact</font>

345
00:11:22,990 --> 00:11:26,350
the instruction execution<font color="#CCCCCC"> and</font>

346
00:11:24,790 --> 00:11:28,060
effectively<font color="#CCCCCC"> that reduces</font><font color="#E5E5E5"> your search</font>

347
00:11:26,350 --> 00:11:30,130
space from one<font color="#E5E5E5"> point</font><font color="#CCCCCC"> three times</font><font color="#E5E5E5"> ten to</font>

348
00:11:28,060 --> 00:11:32,500
the<font color="#CCCCCC"> thirty-six</font><font color="#E5E5E5"> impossible 15 bytes</font>

349
00:11:30,130 --> 00:11:33,670
instructions<font color="#E5E5E5"> down to about a hundred</font>

350
00:11:32,500 --> 00:11:35,440
million instructions<font color="#CCCCCC"> which you can</font>

351
00:11:33,670 --> 00:11:37,660
search<font color="#CCCCCC"> through</font><font color="#E5E5E5"> and about</font><font color="#CCCCCC"> a day</font><font color="#E5E5E5"> of</font>

352
00:11:35,440 --> 00:11:39,130
scanning<font color="#E5E5E5"> the system but there's a big</font>

353
00:11:37,660 --> 00:11:40,900
catch here<font color="#CCCCCC"> that I kind of glossed</font><font color="#E5E5E5"> over</font>

354
00:11:39,130 --> 00:11:42,189
in order<font color="#E5E5E5"> for this to</font><font color="#CCCCCC"> work you need to</font>

355
00:11:40,900 --> 00:11:44,500
know what the length of<font color="#E5E5E5"> an x86</font>

356
00:11:42,190 --> 00:11:45,970
<font color="#E5E5E5">instruction is now that seems like it</font>

357
00:11:44,500 --> 00:11:47,020
should<font color="#E5E5E5"> be easy it shouldn't be too hard</font>

358
00:11:45,970 --> 00:11:48,520
<font color="#E5E5E5">to figure out what the length of an</font>

359
00:11:47,020 --> 00:11:49,960
instruction is but you can't just

360
00:11:48,520 --> 00:11:51,790
disassemble it because we're<font color="#E5E5E5"> possibly</font>

361
00:11:49,960 --> 00:11:55,060
dealing<font color="#E5E5E5"> with undocumented instructions</font>

362
00:11:51,790 --> 00:11:57,160
right<font color="#CCCCCC"> an obvious</font><font color="#E5E5E5"> approach if you know</font>

363
00:11:55,060 --> 00:11:58,719
x86 pretty well<font color="#E5E5E5"> might be to try to use</font>

364
00:11:57,160 --> 00:12:00,819
the trap flag so the way<font color="#CCCCCC"> the trap slide</font>

365
00:11:58,720 --> 00:12:02,770
works in<font color="#CCCCCC"> x86 is you set</font><font color="#E5E5E5"> the trap flag</font>

366
00:12:00,820 --> 00:12:04,870
you execute an instruction<font color="#E5E5E5"> that</font>

367
00:12:02,770 --> 00:12:07,060
<font color="#CCCCCC">instruction runs and then the trap</font>

368
00:12:04,870 --> 00:12:08,590
signal is<font color="#CCCCCC"> generated your trap handler</font>

369
00:12:07,060 --> 00:12:10,479
gets<font color="#CCCCCC"> controlled now what your trap</font>

370
00:12:08,590 --> 00:12:12,520
<font color="#CCCCCC">handler could do is it could look at the</font>

371
00:12:10,480 --> 00:12:14,380
new instruction pointer<font color="#E5E5E5"> and compare that</font>

372
00:12:12,520 --> 00:12:16,030
<font color="#E5E5E5">to the</font><font color="#CCCCCC"> old</font><font color="#E5E5E5"> instruction pointer the</font>

373
00:12:14,380 --> 00:12:17,380
difference<font color="#CCCCCC"> between those two</font><font color="#E5E5E5"> would be</font>

374
00:12:16,030 --> 00:12:19,780
<font color="#CCCCCC">the length</font><font color="#E5E5E5"> of your instruction</font><font color="#CCCCCC"> it's</font>

375
00:12:17,380 --> 00:12:22,300
seems easy enough<font color="#CCCCCC"> but this fails to find</font>

376
00:12:19,780 --> 00:12:24,189
the length of faulting instructions

377
00:12:22,300 --> 00:12:26,260
because faulting instructions in x86

378
00:12:24,190 --> 00:12:28,090
don't<font color="#E5E5E5"> actually execute there's no change</font>

379
00:12:26,260 --> 00:12:29,650
<font color="#E5E5E5">in the instruction pointer so there's no</font>

380
00:12:28,090 --> 00:12:31,180
what to resolve the length of a faulting

381
00:12:29,650 --> 00:12:33,459
instruction why do we hear about

382
00:12:31,180 --> 00:12:35,229
faulting instructions well trying to

383
00:12:33,460 --> 00:12:37,210
<font color="#E5E5E5">execute a privileged</font><font color="#CCCCCC"> instruction in a</font>

384
00:12:35,230 --> 00:12:40,000
non privileged mode will generate a

385
00:12:37,210 --> 00:12:42,160
fault<font color="#CCCCCC"> I want to find all instructions in</font>

386
00:12:40,000 --> 00:12:45,000
the x86<font color="#CCCCCC"> is a not</font><font color="#E5E5E5"> just the one if that</font>

387
00:12:42,160 --> 00:12:47,199
<font color="#E5E5E5">exists in my current mode so for example</font>

388
00:12:45,000 --> 00:12:49,320
<font color="#E5E5E5">loading up control register</font><font color="#CCCCCC"> is an</font>

389
00:12:47,200 --> 00:12:51,580
instruction<font color="#CCCCCC"> that only exists in ring 0</font>

390
00:12:49,320 --> 00:12:52,720
<font color="#E5E5E5">the</font><font color="#CCCCCC"> VM enter instruction is an</font>

391
00:12:51,580 --> 00:12:54,820
instruction that<font color="#E5E5E5"> only exists in the</font>

392
00:12:52,720 --> 00:12:56,170
hypervisor<font color="#CCCCCC"> the resume instruction is</font>

393
00:12:54,820 --> 00:12:57,880
something that only exists in system

394
00:12:56,170 --> 00:12:59,500
management<font color="#CCCCCC"> mode I want to find all of</font>

395
00:12:57,880 --> 00:13:01,300
these<font color="#E5E5E5"> instructions regardless of where</font>

396
00:12:59,500 --> 00:13:02,500
I'm<font color="#E5E5E5"> scanning from so I need to be able</font>

397
00:13:01,300 --> 00:13:04,030
to<font color="#E5E5E5"> find the length of faulting</font>

398
00:13:02,500 --> 00:13:06,220
instructions as well as executing

399
00:13:04,030 --> 00:13:07,959
instructions so this resolution<font color="#E5E5E5"> I came</font>

400
00:13:06,220 --> 00:13:10,060
up for<font color="#E5E5E5"> with this was a sort of a page</font>

401
00:13:07,960 --> 00:13:11,620
fault analysis so here's how<font color="#E5E5E5"> this would</font>

402
00:13:10,060 --> 00:13:13,180
work to figure<font color="#CCCCCC"> out an instruction length</font>

403
00:13:11,620 --> 00:13:14,620
<font color="#CCCCCC">basically we're going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> start with a</font>

404
00:13:13,180 --> 00:13:16,449
candidate instruction we don't know how

405
00:13:14,620 --> 00:13:18,130
long<font color="#CCCCCC"> this instruction actually</font><font color="#E5E5E5"> is we're</font>

406
00:13:16,450 --> 00:13:19,390
in a set of<font color="#E5E5E5"> two pages in memory the</font>

407
00:13:18,130 --> 00:13:21,220
first page<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to have</font>

408
00:13:19,390 --> 00:13:23,140
rewrite and execute permissions<font color="#E5E5E5"> the</font>

409
00:13:21,220 --> 00:13:24,790
second page is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to have only read</font>

410
00:13:23,140 --> 00:13:26,530
<font color="#E5E5E5">and write permissions</font><font color="#CCCCCC"> we're going to put</font>

411
00:13:24,790 --> 00:13:28,480
our instruction into these pages<font color="#E5E5E5"> so the</font>

412
00:13:26,530 --> 00:13:30,339
first byte of<font color="#CCCCCC"> the instruction it's on</font>

413
00:13:28,480 --> 00:13:31,990
the last<font color="#E5E5E5"> byte of</font><font color="#CCCCCC"> the executable page and</font>

414
00:13:30,340 --> 00:13:34,240
the rest<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the instruction is on the</font>

415
00:13:31,990 --> 00:13:35,380
non-executable page then we're going<font color="#CCCCCC"> to</font>

416
00:13:34,240 --> 00:13:37,240
jump to the instruction<font color="#E5E5E5"> to try to</font>

417
00:13:35,380 --> 00:13:39,370
<font color="#E5E5E5">execute it</font><font color="#CCCCCC"> so here's what happens</font>

418
00:13:37,240 --> 00:13:41,860
<font color="#E5E5E5">internally in</font><font color="#CCCCCC"> the processor</font><font color="#E5E5E5"> when we do</font>

419
00:13:39,370 --> 00:13:44,050
<font color="#E5E5E5">it when we</font><font color="#CCCCCC"> do this</font><font color="#E5E5E5"> the process referred</font>

420
00:13:41,860 --> 00:13:46,150
fetches that first byte that

421
00:13:44,050 --> 00:13:47,920
OS bite out of the executable page and

422
00:13:46,150 --> 00:13:49,870
it sees<font color="#CCCCCC"> Oh F is not instruction by</font>

423
00:13:47,920 --> 00:13:51,910
itself it<font color="#E5E5E5"> needs more bytes for this</font>

424
00:13:49,870 --> 00:13:53,410
instruction<font color="#E5E5E5"> so then it's going to try to</font>

425
00:13:51,910 --> 00:13:55,810
<font color="#E5E5E5">fetch the next byte it tries to fetch</font>

426
00:13:53,410 --> 00:13:57,760
that<font color="#CCCCCC"> six a that</font><font color="#E5E5E5"> six a is sitting in a</font>

427
00:13:55,810 --> 00:13:59,589
non executable page that means<font color="#E5E5E5"> we're</font>

428
00:13:57,760 --> 00:14:01,900
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get a page fault exception when</font>

429
00:13:59,590 --> 00:14:04,030
<font color="#E5E5E5">it tries to hit</font><font color="#CCCCCC"> six a specifically</font><font color="#E5E5E5"> we</font>

430
00:14:01,900 --> 00:14:06,340
get a page fault exception with the<font color="#E5E5E5"> CR</font>

431
00:14:04,030 --> 00:14:08,650
to register loaded with the address<font color="#CCCCCC"> of</font>

432
00:14:06,340 --> 00:14:10,570
<font color="#CCCCCC">the page fault so C r2 is going to point</font>

433
00:14:08,650 --> 00:14:12,970
to<font color="#E5E5E5"> the address of that second page in</font>

434
00:14:10,570 --> 00:14:14,980
memory<font color="#E5E5E5"> when we get this fault</font><font color="#CCCCCC"> so if we</font>

435
00:14:12,970 --> 00:14:17,830
receive<font color="#E5E5E5"> that page fault exception with</font><font color="#CCCCCC"> c</font>

436
00:14:14,980 --> 00:14:20,140
<font color="#CCCCCC">r2</font><font color="#E5E5E5"> pointing to the second page in</font><font color="#CCCCCC"> memory</font>

437
00:14:17,830 --> 00:14:22,210
<font color="#CCCCCC">we know that</font><font color="#E5E5E5"> our instruction is longer</font>

438
00:14:20,140 --> 00:14:24,130
than<font color="#CCCCCC"> just that</font><font color="#E5E5E5"> Oh F so we move the</font><font color="#CCCCCC"> whole</font>

439
00:14:22,210 --> 00:14:26,170
instruction back a byte and repeat the

440
00:14:24,130 --> 00:14:27,820
process<font color="#CCCCCC"> execute the instruction the</font>

441
00:14:26,170 --> 00:14:29,680
decoder is<font color="#E5E5E5"> going to look at that</font><font color="#CCCCCC"> Oh F</font>

442
00:14:27,820 --> 00:14:31,420
say I need another bite<font color="#E5E5E5"> now can</font>

443
00:14:29,680 --> 00:14:33,790
successfully fetch the<font color="#E5E5E5"> six a since</font><font color="#CCCCCC"> it's</font>

444
00:14:31,420 --> 00:14:35,290
ending in an executable page<font color="#E5E5E5"> it's going</font>

445
00:14:33,790 --> 00:14:37,510
to realize I still need more<font color="#E5E5E5"> bytes for</font>

446
00:14:35,290 --> 00:14:39,250
<font color="#E5E5E5">this instruction</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be complete so it's</font>

447
00:14:37,510 --> 00:14:40,720
going<font color="#E5E5E5"> to try to fetch that six zero now</font>

448
00:14:39,250 --> 00:14:42,640
we get the page fault exception again

449
00:14:40,720 --> 00:14:44,290
move the<font color="#E5E5E5"> instruction back up byte and</font>

450
00:14:42,640 --> 00:14:46,390
just continue this process<font color="#E5E5E5"> as</font><font color="#CCCCCC"> long as</font>

451
00:14:44,290 --> 00:14:47,620
we're getting page faults with CR<font color="#E5E5E5"> to set</font>

452
00:14:46,390 --> 00:14:49,840
to the address<font color="#CCCCCC"> of the second</font><font color="#E5E5E5"> page</font>

453
00:14:47,620 --> 00:14:51,580
continue this process<font color="#E5E5E5"> and eventually</font>

454
00:14:49,840 --> 00:14:54,160
<font color="#E5E5E5">what you'll find is your entire</font>

455
00:14:51,580 --> 00:14:56,290
instruction<font color="#E5E5E5"> sits in the executable</font>

456
00:14:54,160 --> 00:14:58,089
<font color="#CCCCCC">memory and when</font><font color="#E5E5E5"> that happens a lot</font><font color="#CCCCCC"> of</font>

457
00:14:56,290 --> 00:15:00,099
different<font color="#E5E5E5"> things can occur either the</font>

458
00:14:58,090 --> 00:15:01,270
instruction<font color="#CCCCCC"> could successfully run the</font>

459
00:15:00,100 --> 00:15:03,010
instruction<font color="#E5E5E5"> could throw an entirely</font>

460
00:15:01,270 --> 00:15:04,329
different<font color="#E5E5E5"> faults or the instruction</font>

461
00:15:03,010 --> 00:15:06,010
could<font color="#E5E5E5"> throw a page fault just with a</font>

462
00:15:04,330 --> 00:15:08,230
<font color="#CCCCCC">different</font><font color="#E5E5E5"> value</font><font color="#CCCCCC"> in C r2 but regardless</font>

463
00:15:06,010 --> 00:15:09,550
<font color="#CCCCCC">of what happens here in all cases we</font>

464
00:15:08,230 --> 00:15:11,920
know that the instruction has now been

465
00:15:09,550 --> 00:15:14,020
successfully<font color="#CCCCCC"> decoded</font><font color="#E5E5E5"> so it must reside</font>

466
00:15:11,920 --> 00:15:15,339
entirely<font color="#E5E5E5"> the executable page meaning</font>

467
00:15:14,020 --> 00:15:18,130
<font color="#E5E5E5">that we know the instructions lengths at</font>

468
00:15:15,340 --> 00:15:20,650
this point so we figured out how many

469
00:15:18,130 --> 00:15:22,210
<font color="#E5E5E5">bytes the instruction decoder consumed</font>

470
00:15:20,650 --> 00:15:24,040
<font color="#E5E5E5">but that doesn't actually mean that this</font>

471
00:15:22,210 --> 00:15:25,300
instruction exists yet<font color="#E5E5E5"> just</font><font color="#CCCCCC"> because the</font>

472
00:15:24,040 --> 00:15:27,520
bytes are decoded it doesn't mean<font color="#E5E5E5"> this</font>

473
00:15:25,300 --> 00:15:29,620
instruction is real<font color="#E5E5E5"> even non-existing</font>

474
00:15:27,520 --> 00:15:30,670
instructions have to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> decoded so how</font>

475
00:15:29,620 --> 00:15:32,150
do<font color="#CCCCCC"> we figure out</font><font color="#E5E5E5"> if an instruction</font>

476
00:15:30,670 --> 00:15:34,010
<font color="#E5E5E5">actually exists</font>

477
00:15:32,150 --> 00:15:35,900
in the architecture well if the

478
00:15:34,010 --> 00:15:37,700
instruction does not exist<font color="#CCCCCC"> the</font><font color="#E5E5E5"> processor</font>

479
00:15:35,900 --> 00:15:39,439
<font color="#E5E5E5">is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> generate an undefined opcode</font>

480
00:15:37,700 --> 00:15:43,040
exception after the<font color="#E5E5E5"> instruction decode</font>

481
00:15:39,440 --> 00:15:44,630
phase<font color="#E5E5E5"> so if we don't receive that UD</font>

482
00:15:43,040 --> 00:15:46,550
exception<font color="#E5E5E5"> that means that this</font>

483
00:15:44,630 --> 00:15:47,779
instruction exists so the neat thing

484
00:15:46,550 --> 00:15:49,339
<font color="#CCCCCC">about this approach is it gives</font><font color="#E5E5E5"> us a way</font>

485
00:15:47,779 --> 00:15:50,870
<font color="#CCCCCC">to find the lengths of successfully</font>

486
00:15:49,339 --> 00:15:52,550
executing instructions faulting

487
00:15:50,870 --> 00:15:54,350
instructions even privileged

488
00:15:52,550 --> 00:15:56,150
instructions so even sitting in ring<font color="#CCCCCC"> 3</font>

489
00:15:54,350 --> 00:15:57,980
on the processor I can find<font color="#E5E5E5"> out whether</font>

490
00:15:56,150 --> 00:16:01,040
certain<font color="#E5E5E5"> instructions exist in ring 0 or</font>

491
00:15:57,980 --> 00:16:03,490
ring<font color="#E5E5E5"> -1 a ring -</font><font color="#CCCCCC"> - using this approach</font>

492
00:16:01,040 --> 00:16:05,839
<font color="#E5E5E5">so I threw all this functionality into a</font>

493
00:16:03,490 --> 00:16:07,700
process<font color="#CCCCCC"> that I called</font><font color="#E5E5E5"> the injector it</font>

494
00:16:05,839 --> 00:16:09,800
basically does<font color="#E5E5E5"> this page fault analysis</font>

495
00:16:07,700 --> 00:16:12,110
and this instruction tunneling to search

496
00:16:09,800 --> 00:16:14,540
through<font color="#E5E5E5"> the x86 instruction</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> very</font>

497
00:16:12,110 --> 00:16:16,850
quickly but the injector has a really

498
00:16:14,540 --> 00:16:19,040
big<font color="#CCCCCC"> problem it's buzzing the device that</font>

499
00:16:16,850 --> 00:16:21,410
<font color="#E5E5E5">it's running on so how does the injector</font>

500
00:16:19,040 --> 00:16:22,430
<font color="#E5E5E5">keep itself from crashing well</font><font color="#CCCCCC"> it takes</font>

501
00:16:21,410 --> 00:16:24,110
<font color="#E5E5E5">a little bit of work to make this happen</font>

502
00:16:22,430 --> 00:16:25,609
<font color="#CCCCCC">so very first</font><font color="#E5E5E5"> thing we're going to do to</font>

503
00:16:24,110 --> 00:16:27,920
keep the injector from crashing itself

504
00:16:25,610 --> 00:16:29,930
<font color="#E5E5E5">we are</font><font color="#CCCCCC"> going to limit ourselves to ring</font>

505
00:16:27,920 --> 00:16:31,400
<font color="#CCCCCC">3</font><font color="#E5E5E5"> now that's not such a big</font><font color="#CCCCCC"> limitation</font>

506
00:16:29,930 --> 00:16:32,900
the injector can still resolve the

507
00:16:31,400 --> 00:16:35,360
lengths and existence of instructions

508
00:16:32,900 --> 00:16:36,709
inside<font color="#E5E5E5"> of other more privileged rings so</font>

509
00:16:35,360 --> 00:16:38,360
that's<font color="#CCCCCC"> actually ok</font>

510
00:16:36,709 --> 00:16:40,579
but basically limiting ourselves<font color="#E5E5E5"> to ring</font>

511
00:16:38,360 --> 00:16:43,160
<font color="#E5E5E5">3 prevent catastrophic system failure</font>

512
00:16:40,580 --> 00:16:46,160
for<font color="#E5E5E5"> bad instructions with the exception</font>

513
00:16:43,160 --> 00:16:47,810
of very<font color="#E5E5E5"> serious processor bugs so that's</font>

514
00:16:46,160 --> 00:16:49,790
nice that's<font color="#E5E5E5"> a good first step toward</font>

515
00:16:47,810 --> 00:16:51,079
<font color="#CCCCCC">keeping ourselves</font><font color="#E5E5E5"> running the next thing</font>

516
00:16:49,790 --> 00:16:53,240
we're going to<font color="#E5E5E5"> do is we're going</font><font color="#CCCCCC"> to hook</font>

517
00:16:51,080 --> 00:16:55,010
all of the exceptions<font color="#E5E5E5"> that</font><font color="#CCCCCC"> these</font>

518
00:16:53,240 --> 00:16:56,600
<font color="#E5E5E5">instructions that we're generating could</font>

519
00:16:55,010 --> 00:16:58,850
create so for example in<font color="#CCCCCC"> Linux we're</font>

520
00:16:56,600 --> 00:17:00,200
going to hook segmentation faults we're

521
00:16:58,850 --> 00:17:01,400
going to hook<font color="#E5E5E5"> illegal instruction</font>

522
00:17:00,200 --> 00:17:03,860
exceptions hook floating-point

523
00:17:01,400 --> 00:17:06,260
exceptions<font color="#E5E5E5"> hook bus errors and</font><font color="#CCCCCC"> hope trap</font>

524
00:17:03,860 --> 00:17:08,059
exceptions<font color="#E5E5E5"> and by hooking all of these</font>

525
00:17:06,260 --> 00:17:10,040
things whenever an instruction throws

526
00:17:08,059 --> 00:17:12,050
one of these exceptions<font color="#CCCCCC"> our process will</font>

527
00:17:10,040 --> 00:17:14,149
get controlled<font color="#E5E5E5"> and it can</font><font color="#CCCCCC"> correct the</font>

528
00:17:12,050 --> 00:17:15,349
system<font color="#E5E5E5"> state and by correct assistant</font>

529
00:17:14,150 --> 00:17:17,689
state I mean<font color="#CCCCCC"> our process is basically</font>

530
00:17:15,349 --> 00:17:19,609
<font color="#E5E5E5">going to reload the processes registers</font>

531
00:17:17,689 --> 00:17:22,429
with known good values<font color="#E5E5E5"> to allow</font>

532
00:17:19,609 --> 00:17:23,419
execution<font color="#E5E5E5"> to to continue so we're</font>

533
00:17:22,429 --> 00:17:25,280
<font color="#E5E5E5">getting further but we're not there</font><font color="#CCCCCC"> yet</font>

534
00:17:23,420 --> 00:17:26,900
<font color="#E5E5E5">the next step is we're going to</font>

535
00:17:25,280 --> 00:17:29,720
<font color="#CCCCCC">initialize all</font><font color="#E5E5E5"> general-purpose registers</font>

536
00:17:26,900 --> 00:17:31,880
to<font color="#CCCCCC"> 0 right</font><font color="#E5E5E5"> before we execute these</font>

537
00:17:29,720 --> 00:17:33,650
candidate instructions with that lets us

538
00:17:31,880 --> 00:17:35,750
<font color="#E5E5E5">do</font><font color="#CCCCCC"> is it lets us find or generate an</font>

539
00:17:33,650 --> 00:17:37,790
arbitrary instruction like this<font color="#CCCCCC"> which</font>

540
00:17:35,750 --> 00:17:39,740
writes a value to some<font color="#E5E5E5"> arbitrary</font>

541
00:17:37,790 --> 00:17:42,740
location in memory<font color="#CCCCCC"> and it ensures</font><font color="#E5E5E5"> that</font>

542
00:17:39,740 --> 00:17:45,380
<font color="#CCCCCC">that address</font><font color="#E5E5E5"> calculation resolves to 0</font>

543
00:17:42,740 --> 00:17:47,990
so<font color="#CCCCCC"> EAX x + 4</font><font color="#E5E5E5"> times ETA</font>

544
00:17:45,380 --> 00:17:50,330
is zero<font color="#E5E5E5"> as long as our registers</font><font color="#CCCCCC"> roll</font>

545
00:17:47,990 --> 00:17:52,280
<font color="#CCCCCC">initialize to</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> that ensures that</font>

546
00:17:50,330 --> 00:17:53,990
memory accesses don't accidentally hit

547
00:17:52,280 --> 00:17:55,790
the<font color="#E5E5E5"> processes address space you</font><font color="#CCCCCC"> don't</font>

548
00:17:53,990 --> 00:17:58,700
accidentally corrupt your process data

549
00:17:55,790 --> 00:18:00,230
<font color="#CCCCCC">in</font><font color="#E5E5E5"> this process so it gets us a little</font>

550
00:17:58,700 --> 00:18:02,600
<font color="#CCCCCC">closer but x86</font><font color="#E5E5E5"> has some really</font>

551
00:18:00,230 --> 00:18:05,240
complicated addressing forms<font color="#E5E5E5"> so for</font>

552
00:18:02,600 --> 00:18:07,399
<font color="#E5E5E5">example we can do</font><font color="#CCCCCC"> EA X</font><font color="#E5E5E5"> + 4 x EA x + some</font>

553
00:18:05,240 --> 00:18:08,990
big 32-bit value now even though those

554
00:18:07,400 --> 00:18:11,630
registers are initialized to<font color="#E5E5E5"> 0 on the</font>

555
00:18:08,990 --> 00:18:13,160
<font color="#E5E5E5">left test that calculation will be</font><font color="#CCCCCC"> 0 is</font>

556
00:18:11,630 --> 00:18:15,470
that<font color="#E5E5E5"> if that offset part of the</font>

557
00:18:13,160 --> 00:18:18,200
calculation<font color="#E5E5E5"> hits the instructor hits the</font>

558
00:18:15,470 --> 00:18:20,150
<font color="#E5E5E5">processes address space we could still</font>

559
00:18:18,200 --> 00:18:23,630
corrupt<font color="#E5E5E5"> our process and not be able to</font>

560
00:18:20,150 --> 00:18:25,580
<font color="#E5E5E5">recover</font><font color="#CCCCCC"> fortunately we're in good shape</font>

561
00:18:23,630 --> 00:18:28,010
here<font color="#E5E5E5"> because of the tunneling approach</font>

562
00:18:25,580 --> 00:18:30,350
to how<font color="#E5E5E5"> we generate these instructions</font>

563
00:18:28,010 --> 00:18:32,810
so basically tunneling is fuzzing one

564
00:18:30,350 --> 00:18:36,500
byte of<font color="#CCCCCC"> the instruction at a</font><font color="#E5E5E5"> time so</font>

565
00:18:32,810 --> 00:18:39,020
that<font color="#E5E5E5"> offset in the memory access has to</font>

566
00:18:36,500 --> 00:18:41,360
have three bytes of<font color="#E5E5E5"> zeros inside of it</font>

567
00:18:39,020 --> 00:18:43,160
and one byte of<font color="#E5E5E5"> non zeros so it just so</font>

568
00:18:41,360 --> 00:18:45,050
happens that all<font color="#CCCCCC"> the possible offsets we</font>

569
00:18:43,160 --> 00:18:47,210
can generate through<font color="#E5E5E5"> tunneling don't hit</font>

570
00:18:45,050 --> 00:18:49,790
the<font color="#CCCCCC"> processors address space so we don't</font>

571
00:18:47,210 --> 00:18:51,560
<font color="#E5E5E5">corrupt our system state now any of</font>

572
00:18:49,790 --> 00:18:53,540
<font color="#E5E5E5">those other offsets do generate</font><font color="#CCCCCC"> a</font>

573
00:18:51,560 --> 00:18:55,429
segfault<font color="#E5E5E5"> exception but that's fine</font><font color="#CCCCCC"> we</font>

574
00:18:53,540 --> 00:18:58,430
catch<font color="#E5E5E5"> saved faults and recover from them</font>

575
00:18:55,430 --> 00:19:00,350
inside<font color="#E5E5E5"> of our process so you can throw</font>

576
00:18:58,430 --> 00:19:03,170
faulting instructions now<font color="#E5E5E5"> anything about</font>

577
00:19:00,350 --> 00:19:04,850
non faulting instructions<font color="#E5E5E5"> basically the</font>

578
00:19:03,170 --> 00:19:06,560
analysis needs to continue<font color="#CCCCCC"> after the</font>

579
00:19:04,850 --> 00:19:08,990
instruction<font color="#E5E5E5"> successfully execute so</font>

580
00:19:06,560 --> 00:19:11,030
<font color="#E5E5E5">imagine that you randomly generate an</font>

581
00:19:08,990 --> 00:19:12,650
instruction<font color="#CCCCCC"> that</font><font color="#E5E5E5"> says jump back 40 bytes</font>

582
00:19:11,030 --> 00:19:14,389
<font color="#CCCCCC">well now you're going to be executing</font>

583
00:19:12,650 --> 00:19:16,730
random code and that's<font color="#E5E5E5"> going to</font>

584
00:19:14,390 --> 00:19:17,990
irrevocably corrupt your process state

585
00:19:16,730 --> 00:19:19,340
and the injector is<font color="#E5E5E5"> going to come</font>

586
00:19:17,990 --> 00:19:21,290
crashing down<font color="#E5E5E5"> we don't want that to</font>

587
00:19:19,340 --> 00:19:22,970
occur we need to systematically<font color="#CCCCCC"> get</font>

588
00:19:21,290 --> 00:19:24,649
control back<font color="#E5E5E5"> after these instructions</font>

589
00:19:22,970 --> 00:19:26,840
execute so here's where<font color="#E5E5E5"> the traps I can</font>

590
00:19:24,650 --> 00:19:28,610
actually<font color="#CCCCCC"> help us will set the trap flag</font>

591
00:19:26,840 --> 00:19:30,350
<font color="#E5E5E5">right before we execute one of these</font>

592
00:19:28,610 --> 00:19:32,240
candidate instructions and in our trap

593
00:19:30,350 --> 00:19:34,250
<font color="#E5E5E5">handler</font><font color="#CCCCCC"> we'll reload</font><font color="#E5E5E5"> the registers to</font>

594
00:19:32,240 --> 00:19:35,270
some known good<font color="#E5E5E5"> state so regardless of</font>

595
00:19:34,250 --> 00:19:36,950
what<font color="#CCCCCC"> that instruction did to the</font>

596
00:19:35,270 --> 00:19:39,770
registers<font color="#CCCCCC"> were</font><font color="#E5E5E5"> restore them to good</font>

597
00:19:36,950 --> 00:19:42,380
value<font color="#E5E5E5"> so with all these approaches by</font>

598
00:19:39,770 --> 00:19:43,760
limiting ourselves to<font color="#E5E5E5"> rank</font><font color="#CCCCCC"> 3 by handling</font>

599
00:19:42,380 --> 00:19:45,410
all the possible exceptions by

600
00:19:43,760 --> 00:19:46,879
initializing registers and maintaining

601
00:19:45,410 --> 00:19:49,580
registers<font color="#E5E5E5"> in a known good</font><font color="#CCCCCC"> state and</font>

602
00:19:46,880 --> 00:19:50,900
trapping these<font color="#CCCCCC"> executions of these</font>

603
00:19:49,580 --> 00:19:53,419
<font color="#E5E5E5">instructions the injector</font><font color="#CCCCCC"> is actually</font>

604
00:19:50,900 --> 00:19:56,210
able to survive now so at this point

605
00:19:53,420 --> 00:19:58,890
<font color="#CCCCCC">we've got</font><font color="#E5E5E5"> a way to search the x86</font>

606
00:19:56,210 --> 00:20:00,750
instruction space but now how do we<font color="#E5E5E5"> make</font>

607
00:19:58,890 --> 00:20:03,660
<font color="#E5E5E5">sense of the instructions that were</font>

608
00:20:00,750 --> 00:20:05,550
actually<font color="#E5E5E5"> executing</font><font color="#CCCCCC"> so I designed what I</font>

609
00:20:03,660 --> 00:20:07,770
called the<font color="#E5E5E5"> sifter for this sifter is</font>

610
00:20:05,550 --> 00:20:10,139
basically a wrapper<font color="#CCCCCC"> around the injector</font>

611
00:20:07,770 --> 00:20:12,720
<font color="#E5E5E5">and the sifters job is to parse and</font>

612
00:20:10,140 --> 00:20:15,930
process<font color="#E5E5E5"> the results of the injector and</font>

613
00:20:12,720 --> 00:20:17,520
<font color="#E5E5E5">look for</font><font color="#CCCCCC"> anomalies in the</font><font color="#E5E5E5"> execution now</font>

614
00:20:15,930 --> 00:20:20,280
what do I mean<font color="#CCCCCC"> when I say an execution</font>

615
00:20:17,520 --> 00:20:21,660
anomaly<font color="#E5E5E5"> basically what I want to find is</font>

616
00:20:20,280 --> 00:20:23,970
anywhere<font color="#E5E5E5"> where what the processor</font>

617
00:20:21,660 --> 00:20:26,310
<font color="#E5E5E5">actually does deviate from what the</font>

618
00:20:23,970 --> 00:20:28,320
processor manuals<font color="#E5E5E5"> say the processor</font>

619
00:20:26,310 --> 00:20:29,820
<font color="#E5E5E5">should do now the easiest way</font><font color="#CCCCCC"> to</font>

620
00:20:28,320 --> 00:20:31,379
accomplish<font color="#CCCCCC"> that is to</font><font color="#E5E5E5"> find some sort of</font>

621
00:20:29,820 --> 00:20:33,240
ground truth that represents the

622
00:20:31,380 --> 00:20:35,400
processor manuals so what I did<font color="#CCCCCC"> for this</font>

623
00:20:33,240 --> 00:20:37,920
is that<font color="#CCCCCC"> it's used a disassembler</font><font color="#E5E5E5"> as my</font>

624
00:20:35,400 --> 00:20:39,540
<font color="#E5E5E5">ground truth</font><font color="#CCCCCC"> capstone in this situation</font>

625
00:20:37,920 --> 00:20:41,940
<font color="#E5E5E5">the idea here being that the</font>

626
00:20:39,540 --> 00:20:44,070
disassembler is written based off of<font color="#E5E5E5"> the</font>

627
00:20:41,940 --> 00:20:45,930
processor documentation so if<font color="#CCCCCC"> I find</font>

628
00:20:44,070 --> 00:20:48,810
some difference between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> actual</font>

629
00:20:45,930 --> 00:20:50,490
<font color="#E5E5E5">execution and capstone that indicates a</font>

630
00:20:48,810 --> 00:20:53,970
difference<font color="#E5E5E5"> between actual execution and</font>

631
00:20:50,490 --> 00:20:55,470
documentation<font color="#E5E5E5"> so how do</font><font color="#CCCCCC"> we actually pull</font>

632
00:20:53,970 --> 00:20:57,570
out<font color="#E5E5E5"> interesting anomalies</font><font color="#CCCCCC"> then now</font><font color="#E5E5E5"> that</font>

633
00:20:55,470 --> 00:20:59,730
we've got this disassembler as our

634
00:20:57,570 --> 00:21:01,530
ground truth<font color="#E5E5E5"> well we can pull and pull</font>

635
00:20:59,730 --> 00:21:03,810
out undocumented instructions this way

636
00:21:01,530 --> 00:21:06,300
if the disassembler doesn't recognize a

637
00:21:03,810 --> 00:21:07,950
byte sequence but the instruction

638
00:21:06,300 --> 00:21:09,330
generates anything other than an

639
00:21:07,950 --> 00:21:11,280
undefined opcode exception that

640
00:21:09,330 --> 00:21:14,030
indicates<font color="#E5E5E5"> that this instruction exists</font>

641
00:21:11,280 --> 00:21:16,710
<font color="#E5E5E5">on the processor but it's not documented</font>

642
00:21:14,030 --> 00:21:17,700
<font color="#CCCCCC">we can also pull out software bugs using</font>

643
00:21:16,710 --> 00:21:19,590
this approach basically<font color="#E5E5E5"> if the</font>

644
00:21:17,700 --> 00:21:21,330
disassembler recognizes an instruction

645
00:21:19,590 --> 00:21:22,740
but it thinks it's one length<font color="#E5E5E5"> and the</font>

646
00:21:21,330 --> 00:21:24,540
processor says it's a different length

647
00:21:22,740 --> 00:21:26,820
that usually<font color="#CCCCCC"> indicates that there's some</font>

648
00:21:24,540 --> 00:21:29,010
sort<font color="#CCCCCC"> of bug in our disassembler</font><font color="#E5E5E5"> okay</font>

649
00:21:26,820 --> 00:21:30,780
<font color="#E5E5E5">also by</font><font color="#CCCCCC"> hardware bugs with this approach</font>

650
00:21:29,010 --> 00:21:32,370
now there's no really<font color="#E5E5E5"> good heuristic for</font>

651
00:21:30,780 --> 00:21:33,750
pulling out Hardware bugs basically

652
00:21:32,370 --> 00:21:35,219
everything just goes haywire<font color="#E5E5E5"> when</font>

653
00:21:33,750 --> 00:21:37,260
there's<font color="#CCCCCC"> hardware bugs and I'll show what</font>

654
00:21:35,220 --> 00:21:38,910
that<font color="#CCCCCC"> looks like</font><font color="#E5E5E5"> a little bit later on it</font>

655
00:21:37,260 --> 00:21:41,220
requires a<font color="#CCCCCC"> little bit</font><font color="#E5E5E5"> of manual analysis</font>

656
00:21:38,910 --> 00:21:44,460
to<font color="#CCCCCC"> us to identify so I'm going to</font><font color="#E5E5E5"> try to</font>

657
00:21:41,220 --> 00:21:46,650
demonstrate<font color="#E5E5E5"> this and sift or tool for</font>

658
00:21:44,460 --> 00:21:51,510
you here what I'm going<font color="#CCCCCC"> to do is I'm</font>

659
00:21:46,650 --> 00:21:56,730
<font color="#E5E5E5">going to fire up a</font><font color="#CCCCCC"> sand sifter and see</font>

660
00:21:51,510 --> 00:21:58,950
if we can<font color="#CCCCCC"> adjust this so what we see</font>

661
00:21:56,730 --> 00:22:01,620
<font color="#E5E5E5">here is</font><font color="#CCCCCC"> Stan's if</font><font color="#E5E5E5"> you're</font><font color="#CCCCCC"> scanning</font>

662
00:21:58,950 --> 00:22:04,230
through the<font color="#E5E5E5"> x86 instruction</font><font color="#CCCCCC"> set</font>

663
00:22:01,620 --> 00:22:05,520
architecture<font color="#E5E5E5"> on the top here are the</font>

664
00:22:04,230 --> 00:22:07,680
<font color="#E5E5E5">instructions that</font><font color="#CCCCCC"> can scepter is</font>

665
00:22:05,520 --> 00:22:10,320
currently injecting<font color="#E5E5E5"> into the processor</font>

666
00:22:07,680 --> 00:22:11,730
<font color="#E5E5E5">on the</font><font color="#CCCCCC"> right is the raw</font><font color="#E5E5E5"> bite sequence</font>

667
00:22:10,320 --> 00:22:12,760
<font color="#E5E5E5">that it's generating and if you watch</font>

668
00:22:11,730 --> 00:22:14,440
that<font color="#CCCCCC"> byte sequence</font>

669
00:22:12,760 --> 00:22:16,540
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can actually sort of see</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> this</font>

670
00:22:14,440 --> 00:22:18,010
tunneling process<font color="#E5E5E5"> is</font><font color="#CCCCCC"> working how it's</font>

671
00:22:16,540 --> 00:22:20,500
incrementally building more<font color="#CCCCCC"> and</font><font color="#E5E5E5"> more</font>

672
00:22:18,010 --> 00:22:23,230
complex instructions<font color="#E5E5E5"> by modifying the</font>

673
00:22:20,500 --> 00:22:24,730
last byte of<font color="#CCCCCC"> the instruction this</font>

674
00:22:23,230 --> 00:22:26,070
highlighted<font color="#E5E5E5"> part in white here is</font>

675
00:22:24,730 --> 00:22:28,180
indicating<font color="#E5E5E5"> the actual observed</font>

676
00:22:26,070 --> 00:22:30,010
<font color="#E5E5E5">instruction length as seen on the</font>

677
00:22:28,180 --> 00:22:31,300
processor<font color="#E5E5E5"> itself whereas this part on</font>

678
00:22:30,010 --> 00:22:33,520
the<font color="#E5E5E5"> left here is showing me what</font>

679
00:22:31,300 --> 00:22:34,659
<font color="#E5E5E5">capstone thinks the instruction looks</font>

680
00:22:33,520 --> 00:22:36,460
like<font color="#E5E5E5"> in other words what the</font>

681
00:22:34,660 --> 00:22:38,350
documentation says this instruction is

682
00:22:36,460 --> 00:22:40,480
if we let<font color="#E5E5E5"> this run</font><font color="#CCCCCC"> for a while it will</font>

683
00:22:38,350 --> 00:22:43,480
actually<font color="#E5E5E5"> start seeing</font><font color="#CCCCCC"> it dumping out a</font>

684
00:22:40,480 --> 00:22:45,670
<font color="#E5E5E5">couple of anomalies in</font><font color="#CCCCCC"> the window down</font>

685
00:22:43,480 --> 00:22:47,590
here<font color="#CCCCCC"> essentially it's looking for</font><font color="#E5E5E5"> places</font>

686
00:22:45,670 --> 00:22:50,560
where<font color="#E5E5E5"> the documentation and the actual</font>

687
00:22:47,590 --> 00:22:52,510
execution<font color="#CCCCCC"> differ</font><font color="#E5E5E5"> now tunneling is a</font>

688
00:22:50,560 --> 00:22:55,530
really good way to very thoroughly go

689
00:22:52,510 --> 00:22:58,960
through every instruction<font color="#E5E5E5"> in the x86</font>

690
00:22:55,530 --> 00:23:01,090
instruction in the x86<font color="#E5E5E5"> architecture but</font>

691
00:22:58,960 --> 00:23:03,790
tunneling is not the fastest thing<font color="#E5E5E5"> in</font>

692
00:23:01,090 --> 00:23:05,230
<font color="#E5E5E5">the world so if I really want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> fast</font>

693
00:23:03,790 --> 00:23:08,200
<font color="#E5E5E5">results I can</font><font color="#CCCCCC"> actually switch this</font><font color="#E5E5E5"> thing</font>

694
00:23:05,230 --> 00:23:10,630
<font color="#CCCCCC">over to totally random</font><font color="#E5E5E5"> buzzing by us</font>

695
00:23:08,200 --> 00:23:12,370
changing modes here just generating

696
00:23:10,630 --> 00:23:13,810
completely arbitrary instructions we

697
00:23:12,370 --> 00:23:15,370
won't<font color="#E5E5E5"> get as good coverage of the</font>

698
00:23:13,810 --> 00:23:17,350
instruction space but we'll get some

699
00:23:15,370 --> 00:23:19,379
<font color="#E5E5E5">really quick results so what you see</font>

700
00:23:17,350 --> 00:23:21,639
dumping out in the red on the<font color="#E5E5E5"> bottom is</font>

701
00:23:19,380 --> 00:23:23,560
undocumented instruction secret

702
00:23:21,640 --> 00:23:25,630
<font color="#CCCCCC">instructions that</font><font color="#E5E5E5"> are sitting in my CPU</font>

703
00:23:23,560 --> 00:23:27,850
right now and I find this<font color="#E5E5E5"> really</font>

704
00:23:25,630 --> 00:23:30,580
<font color="#E5E5E5">unsettling because we're basing all of</font>

705
00:23:27,850 --> 00:23:33,129
our<font color="#CCCCCC"> trust</font><font color="#E5E5E5"> off of these documentation for</font>

706
00:23:30,580 --> 00:23:35,050
the processor and there are a<font color="#E5E5E5"> lot of</font>

707
00:23:33,130 --> 00:23:37,240
things in that processor that they're

708
00:23:35,050 --> 00:23:39,610
not<font color="#E5E5E5"> telling us about now if you let this</font>

709
00:23:37,240 --> 00:23:41,350
<font color="#CCCCCC">thing run overnight</font><font color="#E5E5E5"> it'll basically</font>

710
00:23:39,610 --> 00:23:43,540
complete the actual tunneling approach

711
00:23:41,350 --> 00:23:45,610
complete<font color="#CCCCCC"> its total scan and at the end</font>

712
00:23:43,540 --> 00:23:47,620
it will<font color="#E5E5E5"> dump out everything is found so</font>

713
00:23:45,610 --> 00:23:49,330
on most modern x86<font color="#E5E5E5"> processors it'll find</font>

714
00:23:47,620 --> 00:23:51,489
a couple million<font color="#E5E5E5"> of interesting things</font>

715
00:23:49,330 --> 00:23:54,040
<font color="#E5E5E5">now that's a lot to sift through by hand</font>

716
00:23:51,490 --> 00:23:57,010
we<font color="#E5E5E5"> need some way to quickly make sense</font>

717
00:23:54,040 --> 00:23:58,659
of this<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> information so I build</font>

718
00:23:57,010 --> 00:24:00,490
what I call the summarizer it will take

719
00:23:58,660 --> 00:24:03,520
all the results of sand sifter and<font color="#E5E5E5"> try</font>

720
00:24:00,490 --> 00:24:06,220
to summarize<font color="#E5E5E5"> it in a</font><font color="#CCCCCC"> digestible form so</font>

721
00:24:03,520 --> 00:24:07,930
this<font color="#E5E5E5"> is a breakdown of the key</font>

722
00:24:06,220 --> 00:24:10,960
instructions that<font color="#E5E5E5"> I found in a scan</font><font color="#CCCCCC"> of a</font>

723
00:24:07,930 --> 00:24:12,160
via nano processor<font color="#E5E5E5"> so I can scan through</font>

724
00:24:10,960 --> 00:24:14,200
here<font color="#CCCCCC"> and basically</font><font color="#E5E5E5"> he different</font>

725
00:24:12,160 --> 00:24:16,120
categories of instructions so for

726
00:24:14,200 --> 00:24:17,440
example<font color="#E5E5E5"> it's telling me honest by a nano</font>

727
00:24:16,120 --> 00:24:19,300
processor<font color="#E5E5E5"> there was a set of</font>

728
00:24:17,440 --> 00:24:21,790
instructions<font color="#CCCCCC"> that started with</font><font color="#E5E5E5"> Oh F</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> B</font>

729
00:24:19,300 --> 00:24:24,250
that weren't documented<font color="#CCCCCC"> it found 64</font>

730
00:24:21,790 --> 00:24:26,110
instructions in this<font color="#E5E5E5"> category and then I</font>

731
00:24:24,250 --> 00:24:27,429
can<font color="#E5E5E5"> start drilling down</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> these</font>

732
00:24:26,110 --> 00:24:29,379
the sets<font color="#E5E5E5"> of instructions</font><font color="#CCCCCC"> and a little</font>

733
00:24:27,429 --> 00:24:31,149
bit more<font color="#E5E5E5"> depth</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example here I'm</font>

734
00:24:29,380 --> 00:24:35,019
<font color="#E5E5E5">examining one of the undocumented</font>

735
00:24:31,149 --> 00:24:35,949
instructions that<font color="#CCCCCC"> found OS</font><font color="#E5E5E5"> a 7 C 3</font><font color="#CCCCCC"> it's</font>

736
00:24:35,019 --> 00:24:38,200
<font color="#E5E5E5">telling me that when this instruction</font>

737
00:24:35,950 --> 00:24:40,240
ran it generated a trap exception<font color="#E5E5E5"> and</font>

738
00:24:38,200 --> 00:24:42,159
then it<font color="#E5E5E5"> gives this instruction is three</font>

739
00:24:40,240 --> 00:24:43,750
different disassemblers<font color="#E5E5E5"> none of these</font>

740
00:24:42,159 --> 00:24:45,370
<font color="#CCCCCC">it's assemblers recognize what this</font>

741
00:24:43,750 --> 00:24:47,169
<font color="#CCCCCC">instruction is which is a very very</font>

742
00:24:45,370 --> 00:24:49,418
<font color="#E5E5E5">strong indicator that this</font><font color="#CCCCCC"> instruction</font>

743
00:24:47,169 --> 00:24:51,279
is<font color="#CCCCCC"> not</font><font color="#E5E5E5"> documented</font><font color="#CCCCCC"> and is not known by</font>

744
00:24:49,419 --> 00:24:55,029
<font color="#E5E5E5">anybody</font><font color="#CCCCCC"> even though it's</font><font color="#E5E5E5"> running on our</font>

745
00:24:51,279 --> 00:24:57,640
processor so at this point<font color="#E5E5E5"> we have a way</font>

746
00:24:55,029 --> 00:24:59,860
to<font color="#E5E5E5"> systematically scan our processor for</font>

747
00:24:57,640 --> 00:25:02,380
secrets<font color="#CCCCCC"> in bugs</font><font color="#E5E5E5"> and I think that's</font>

748
00:24:59,860 --> 00:25:04,209
that's<font color="#CCCCCC"> really cool so I stand eight of</font>

749
00:25:02,380 --> 00:25:05,740
the test<font color="#CCCCCC"> systems that I had in my</font>

750
00:25:04,210 --> 00:25:07,990
<font color="#CCCCCC">library and I want to share with you</font>

751
00:25:05,740 --> 00:25:09,610
what I found on<font color="#E5E5E5"> these systems</font><font color="#CCCCCC"> because I</font>

752
00:25:07,990 --> 00:25:11,289
came up<font color="#CCCCCC"> with a</font><font color="#E5E5E5"> lot of really interesting</font>

753
00:25:09,610 --> 00:25:13,649
<font color="#E5E5E5">results first I found hidden</font>

754
00:25:11,289 --> 00:25:17,889
instructions on every single<font color="#E5E5E5"> X ad chips</font>

755
00:25:13,649 --> 00:25:19,750
x86 chip<font color="#CCCCCC"> I scanned</font><font color="#E5E5E5"> I found ubiquitous</font>

756
00:25:17,889 --> 00:25:21,820
software bugs in all sorts of<font color="#E5E5E5"> different</font>

757
00:25:19,750 --> 00:25:23,799
programs<font color="#E5E5E5"> I found flaws and</font><font color="#CCCCCC"> enterprise</font>

758
00:25:21,820 --> 00:25:26,408
hypervisors and I found some very

759
00:25:23,799 --> 00:25:28,629
security<font color="#CCCCCC"> critical</font><font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> bugs on x86</font>

760
00:25:26,409 --> 00:25:30,340
processors so let's start<font color="#E5E5E5"> with the one I</font>

761
00:25:28,630 --> 00:25:33,070
set out to<font color="#CCCCCC"> find I set out to find these</font>

762
00:25:30,340 --> 00:25:34,720
<font color="#E5E5E5">hidden instructions on x86</font><font color="#CCCCCC"> chips so I</font>

763
00:25:33,070 --> 00:25:36,250
<font color="#E5E5E5">started with scanning an Intel Core i7</font>

764
00:25:34,720 --> 00:25:38,889
<font color="#CCCCCC">processor this processor was</font>

765
00:25:36,250 --> 00:25:40,840
manufactured around<font color="#E5E5E5"> 2012 the first set</font>

766
00:25:38,889 --> 00:25:43,899
<font color="#CCCCCC">of instructions I found on the processor</font>

767
00:25:40,840 --> 00:25:46,870
aren't terribly interesting<font color="#CCCCCC"> ofö do</font><font color="#E5E5E5"> f-18</font>

768
00:25:43,899 --> 00:25:48,969
<font color="#CCCCCC">Oh F 1a both</font><font color="#E5E5E5"> AE all of these</font>

769
00:25:46,870 --> 00:25:51,129
instructions<font color="#CCCCCC"> are undocumented for</font>

770
00:25:48,970 --> 00:25:53,080
certain combinations<font color="#E5E5E5"> of bits inside of</font>

771
00:25:51,130 --> 00:25:55,600
that<font color="#CCCCCC"> instruction but those combinations</font>

772
00:25:53,080 --> 00:25:57,549
<font color="#E5E5E5">of bits still execute on the processor</font>

773
00:25:55,600 --> 00:25:59,529
now some of these instructions<font color="#CCCCCC"> intel is</font>

774
00:25:57,549 --> 00:26:02,350
very recently updated<font color="#CCCCCC"> their their</font>

775
00:25:59,529 --> 00:26:05,320
manuals<font color="#CCCCCC"> to actually include</font><font color="#E5E5E5"> so for</font>

776
00:26:02,350 --> 00:26:07,449
<font color="#E5E5E5">example</font><font color="#CCCCCC"> o f1 eight in</font><font color="#E5E5E5"> o f1 a became</font>

777
00:26:05,320 --> 00:26:09,610
documented by Intel<font color="#CCCCCC"> and their December</font>

778
00:26:07,450 --> 00:26:11,590
2016 edition of the reference manuals

779
00:26:09,610 --> 00:26:13,959
<font color="#E5E5E5">but</font><font color="#CCCCCC"> I ran this test</font><font color="#E5E5E5"> on a processor</font>

780
00:26:11,590 --> 00:26:15,370
manufactured in 2012<font color="#E5E5E5"> these instructions</font>

781
00:26:13,960 --> 00:26:17,830
were sitting<font color="#E5E5E5"> around in my processor</font>

782
00:26:15,370 --> 00:26:20,289
undocumented secret for a very<font color="#E5E5E5"> very long</font>

783
00:26:17,830 --> 00:26:23,049
<font color="#CCCCCC">time</font><font color="#E5E5E5"> other instructions found on the</font>

784
00:26:20,289 --> 00:26:26,740
processor on the<font color="#E5E5E5"> other hand vbe 0 d FF 1</font>

785
00:26:23,049 --> 00:26:28,960
<font color="#CCCCCC">c 0 d 0 d to f6</font><font color="#E5E5E5"> f7</font><font color="#CCCCCC"> an entire classes of</font>

786
00:26:26,740 --> 00:26:31,389
instructions still don't appear anywhere

787
00:26:28,960 --> 00:26:34,299
in the reference manuals<font color="#E5E5E5"> we have no idea</font>

788
00:26:31,389 --> 00:26:35,770
what<font color="#CCCCCC"> these instructions actually</font><font color="#E5E5E5"> do so</font><font color="#CCCCCC"> I</font>

789
00:26:34,299 --> 00:26:37,100
started<font color="#CCCCCC"> scanning other systems</font><font color="#E5E5E5"> I scan an</font>

790
00:26:35,770 --> 00:26:40,400
AMD

791
00:26:37,100 --> 00:26:43,129
<font color="#CCCCCC">geode system these are the undocumented</font>

792
00:26:40,400 --> 00:26:45,650
instructions I found on Andy<font color="#CCCCCC"> now when I</font>

793
00:26:43,130 --> 00:26:47,630
started<font color="#CCCCCC"> scanning systems</font><font color="#E5E5E5"> for processors</font>

794
00:26:45,650 --> 00:26:49,130
from different<font color="#CCCCCC"> manufacturers</font><font color="#E5E5E5"> I noticed</font>

795
00:26:47,630 --> 00:26:50,960
some interesting<font color="#CCCCCC"> patterns</font><font color="#E5E5E5"> there are a</font>

796
00:26:49,130 --> 00:26:52,340
lot of overlaps<font color="#E5E5E5"> in the undocumented</font>

797
00:26:50,960 --> 00:26:54,260
instructions across different

798
00:26:52,340 --> 00:26:55,550
manufacturers which means<font color="#CCCCCC"> even though</font>

799
00:26:54,260 --> 00:26:56,900
that we don't<font color="#E5E5E5"> know what these</font>

800
00:26:55,550 --> 00:26:58,669
instructions do because they're not in

801
00:26:56,900 --> 00:27:00,740
the<font color="#E5E5E5"> documentation the manufacturers are</font>

802
00:26:58,670 --> 00:27:03,170
coordinating on what these instructions

803
00:27:00,740 --> 00:27:05,900
actually<font color="#E5E5E5"> do so for</font><font color="#CCCCCC"> example on an</font><font color="#E5E5E5"> AMD</font>

804
00:27:03,170 --> 00:27:08,390
system<font color="#CCCCCC"> I found the same</font><font color="#E5E5E5"> vbe gyro</font><font color="#CCCCCC"> DBE one</font>

805
00:27:05,900 --> 00:27:09,980
in DF instructions that<font color="#E5E5E5"> I found on Intel</font>

806
00:27:08,390 --> 00:27:12,470
<font color="#E5E5E5">systems but the really interesting</font>

807
00:27:09,980 --> 00:27:14,330
<font color="#E5E5E5">places that came up where the</font><font color="#CCCCCC"> place that</font>

808
00:27:12,470 --> 00:27:16,940
didn't overlap<font color="#CCCCCC"> where there is some</font>

809
00:27:14,330 --> 00:27:19,310
unique<font color="#E5E5E5"> instruction only on this version</font>

810
00:27:16,940 --> 00:27:20,960
<font color="#E5E5E5">of the architecture so in this AMD chip</font>

811
00:27:19,310 --> 00:27:24,919
I found a set<font color="#E5E5E5"> of unique instructions at</font>

812
00:27:20,960 --> 00:27:26,720
OS OS<font color="#CCCCCC"> 40 80</font><font color="#E5E5E5"> followed by some final bytes</font>

813
00:27:24,920 --> 00:27:28,370
now some versions<font color="#E5E5E5"> of these instructions</font>

814
00:27:26,720 --> 00:27:30,350
for<font color="#CCCCCC"> that final</font><font color="#E5E5E5"> byte were documented but</font>

815
00:27:28,370 --> 00:27:32,209
<font color="#E5E5E5">the vast majority of them that actually</font>

816
00:27:30,350 --> 00:27:36,020
executed on the processor were not

817
00:27:32,210 --> 00:27:37,520
<font color="#E5E5E5">documented by AMD I</font><font color="#CCCCCC"> scanned a via system</font>

818
00:27:36,020 --> 00:27:39,889
and we found sort of<font color="#E5E5E5"> the same things a</font>

819
00:27:37,520 --> 00:27:41,660
lot of overlap<font color="#CCCCCC"> with other</font><font color="#E5E5E5"> undocumented</font>

820
00:27:39,890 --> 00:27:43,730
instructions from other<font color="#E5E5E5"> manufacturers</font>

821
00:27:41,660 --> 00:27:46,040
but then unique sets of instructions

822
00:27:43,730 --> 00:27:48,650
<font color="#CCCCCC">that</font><font color="#E5E5E5"> only appeared on via so</font>

823
00:27:46,040 --> 00:27:50,600
specifically<font color="#CCCCCC"> the OFA 7 group</font><font color="#E5E5E5"> on via is</font>

824
00:27:48,650 --> 00:27:52,130
actually<font color="#CCCCCC"> bios proprietary padlock</font>

825
00:27:50,600 --> 00:27:54,740
instructions it's a set of cryptographic

826
00:27:52,130 --> 00:27:56,450
instructions that only<font color="#CCCCCC"> exist on</font><font color="#E5E5E5"> biochips</font>

827
00:27:54,740 --> 00:27:58,940
<font color="#E5E5E5">and by a</font><font color="#CCCCCC"> documents the padlock</font>

828
00:27:56,450 --> 00:28:02,150
instructions but they don't document<font color="#CCCCCC"> ofa</font>

829
00:27:58,940 --> 00:28:03,680
<font color="#E5E5E5">7 c1 through c7 so that is a set of</font>

830
00:28:02,150 --> 00:28:05,120
cryptographic instructions on<font color="#E5E5E5"> this</font>

831
00:28:03,680 --> 00:28:07,220
processor for which there<font color="#E5E5E5"> is no</font>

832
00:28:05,120 --> 00:28:11,149
<font color="#CCCCCC">documentation</font><font color="#E5E5E5"> we have no idea what they</font>

833
00:28:07,220 --> 00:28:12,680
actually do<font color="#E5E5E5"> so as far as like trying</font><font color="#CCCCCC"> to</font>

834
00:28:11,150 --> 00:28:15,200
<font color="#CCCCCC">figure out what do</font><font color="#E5E5E5"> these things really</font>

835
00:28:12,680 --> 00:28:17,330
do some of these have been

836
00:28:15,200 --> 00:28:18,650
reverse-engineered<font color="#CCCCCC"> if you if you dig</font>

837
00:28:17,330 --> 00:28:20,000
<font color="#CCCCCC">around enough online you can actually</font>

838
00:28:18,650 --> 00:28:21,950
find<font color="#E5E5E5"> people who</font><font color="#CCCCCC"> have stumbled</font><font color="#E5E5E5"> across</font>

839
00:28:20,000 --> 00:28:23,570
some of<font color="#E5E5E5"> these instructions before</font><font color="#CCCCCC"> looked</font>

840
00:28:21,950 --> 00:28:25,100
at how the register values are changing

841
00:28:23,570 --> 00:28:27,320
<font color="#E5E5E5">on these instructions and inferred what</font>

842
00:28:25,100 --> 00:28:28,939
that instruction behavior is but some of

843
00:28:27,320 --> 00:28:30,710
these instructions<font color="#CCCCCC"> have</font><font color="#E5E5E5"> absolutely no</font>

844
00:28:28,940 --> 00:28:32,900
record<font color="#CCCCCC"> at all no record</font><font color="#E5E5E5"> in any of the</font>

845
00:28:30,710 --> 00:28:34,790
<font color="#E5E5E5">reference manuals from the manufacturer</font>

846
00:28:32,900 --> 00:28:36,260
<font color="#E5E5E5">and no other record anywhere else online</font>

847
00:28:34,790 --> 00:28:38,990
<font color="#E5E5E5">so there's no way to tell what these</font>

848
00:28:36,260 --> 00:28:41,030
things<font color="#E5E5E5"> really do and I find that pretty</font>

849
00:28:38,990 --> 00:28:45,050
unsettling<font color="#E5E5E5"> in terms of trusting our</font>

850
00:28:41,030 --> 00:28:46,730
processors right so let's let's<font color="#E5E5E5"> look at</font>

851
00:28:45,050 --> 00:28:48,680
a totally different thing<font color="#CCCCCC"> I didn't set</font>

852
00:28:46,730 --> 00:28:49,890
out<font color="#E5E5E5"> to find software bugs</font><font color="#CCCCCC"> but I</font><font color="#E5E5E5"> ended</font><font color="#CCCCCC"> up</font>

853
00:28:48,680 --> 00:28:52,470
<font color="#E5E5E5">finding a lot of really</font>

854
00:28:49,890 --> 00:28:55,200
interesting ones<font color="#CCCCCC"> so there is an issue I</font>

855
00:28:52,470 --> 00:28:57,630
<font color="#E5E5E5">faced my sand sifter is forced to use</font><font color="#CCCCCC"> a</font>

856
00:28:55,200 --> 00:28:59,490
disassembler as a ground truth and I

857
00:28:57,630 --> 00:29:01,560
tried a lot<font color="#CCCCCC"> of different disassemblers</font>

858
00:28:59,490 --> 00:29:03,870
as<font color="#E5E5E5"> brown truths and all of them were</font>

859
00:29:01,560 --> 00:29:06,350
absolutely<font color="#E5E5E5"> littered with bugs so for the</font>

860
00:29:03,870 --> 00:29:08,250
most part<font color="#E5E5E5"> the bugs and disassemblers</font>

861
00:29:06,350 --> 00:29:09,990
<font color="#E5E5E5">only appeared in</font><font color="#CCCCCC"> a couple of the</font>

862
00:29:08,250 --> 00:29:11,910
disassemblers that<font color="#CCCCCC"> i tried so it wasn't</font>

863
00:29:09,990 --> 00:29:13,440
especially<font color="#E5E5E5"> interesting when only one</font>

864
00:29:11,910 --> 00:29:15,360
disassembler has its own class of bugs

865
00:29:13,440 --> 00:29:17,610
<font color="#CCCCCC">we</font><font color="#E5E5E5"> should fix those bugs but that's not</font>

866
00:29:15,360 --> 00:29:19,350
like a security<font color="#E5E5E5"> critical thing but we</font>

867
00:29:17,610 --> 00:29:21,000
did<font color="#E5E5E5"> find some interesting bugs we found</font>

868
00:29:19,350 --> 00:29:23,010
some bugs that appeared<font color="#E5E5E5"> in literally</font>

869
00:29:21,000 --> 00:29:24,870
<font color="#E5E5E5">every tool that</font><font color="#CCCCCC"> we threw this thing</font>

870
00:29:23,010 --> 00:29:26,700
<font color="#E5E5E5">against and you can actually use these</font>

871
00:29:24,870 --> 00:29:28,139
bugs<font color="#E5E5E5"> to</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> advantage if you're an</font>

872
00:29:26,700 --> 00:29:30,510
attacker so two of the<font color="#E5E5E5"> more</font><font color="#CCCCCC"> interesting</font>

873
00:29:28,140 --> 00:29:33,840
<font color="#CCCCCC">ones I found</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> the jump and call</font>

874
00:29:30,510 --> 00:29:36,540
<font color="#E5E5E5">instruction so in the 64-bit version</font><font color="#CCCCCC"> of</font>

875
00:29:33,840 --> 00:29:38,520
<font color="#E5E5E5">the x86 architecture theoretically</font><font color="#CCCCCC"> ye9</font>

876
00:29:36,540 --> 00:29:40,830
is<font color="#CCCCCC"> a jump instruction v8 is a call</font>

877
00:29:38,520 --> 00:29:44,070
<font color="#E5E5E5">instruction and 66 is what's called a</font>

878
00:29:40,830 --> 00:29:46,020
data size override prefix and what 66 is

879
00:29:44,070 --> 00:29:48,270
supposed to do which<font color="#CCCCCC"> is supposed</font><font color="#E5E5E5"> to</font>

880
00:29:46,020 --> 00:29:51,389
change the default operand size of that

881
00:29:48,270 --> 00:29:54,210
<font color="#E5E5E5">instruction so normally</font><font color="#CCCCCC"> 9</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> EI</font><font color="#E5E5E5"> take a</font>

882
00:29:51,390 --> 00:29:56,070
32-bit operand so 66 is supposed<font color="#E5E5E5"> to</font>

883
00:29:54,210 --> 00:29:58,890
<font color="#E5E5E5">change that either to a 16-bit operand</font>

884
00:29:56,070 --> 00:30:00,659
or to a 64-bit<font color="#E5E5E5"> operand turns out on x86</font>

885
00:29:58,890 --> 00:30:03,540
it does neither<font color="#E5E5E5"> or on Intel processors</font>

886
00:30:00,660 --> 00:30:05,910
it does neither<font color="#E5E5E5"> 66 is just ignored by</font>

887
00:30:03,540 --> 00:30:08,270
the processor but nobody expected<font color="#CCCCCC"> that</font>

888
00:30:05,910 --> 00:30:11,910
<font color="#E5E5E5">everyone parses the instructions wrong</font>

889
00:30:08,270 --> 00:30:14,250
<font color="#E5E5E5">so what does that mean well all these</font>

890
00:30:11,910 --> 00:30:16,440
tools have this exact same bug in them I

891
00:30:14,250 --> 00:30:18,960
tried this with<font color="#CCCCCC"> Ida valgrind gdb object</font>

892
00:30:16,440 --> 00:30:21,330
on<font color="#E5E5E5"> visual studio capstone qmu and about</font>

893
00:30:18,960 --> 00:30:23,070
a dozen others and<font color="#CCCCCC"> they all had this bug</font>

894
00:30:21,330 --> 00:30:25,830
so let's<font color="#E5E5E5"> look at this instruction in Ida</font>

895
00:30:23,070 --> 00:30:27,320
<font color="#CCCCCC">for example you'll see that Ida is</font>

896
00:30:25,830 --> 00:30:29,939
parsing this as a<font color="#E5E5E5"> four byte instruction</font>

897
00:30:27,320 --> 00:30:32,730
<font color="#E5E5E5">because it thinks</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this 66</font><font color="#CCCCCC"> / ID</font>

898
00:30:29,940 --> 00:30:34,350
prefix changes this to a<font color="#E5E5E5"> 16-bit operand</font>

899
00:30:32,730 --> 00:30:35,460
<font color="#E5E5E5">that's not the correct</font><font color="#CCCCCC"> behavior this</font>

900
00:30:34,350 --> 00:30:37,860
instruction<font color="#E5E5E5"> is not being parsed</font>

901
00:30:35,460 --> 00:30:39,420
correctly<font color="#E5E5E5"> by Ida our reverse engineering</font>

902
00:30:37,860 --> 00:30:41,219
tool let's look at it<font color="#E5E5E5"> in Visual Studio</font>

903
00:30:39,420 --> 00:30:43,350
Visual Studio has<font color="#CCCCCC"> a different version</font><font color="#E5E5E5"> of</font>

904
00:30:41,220 --> 00:30:45,630
<font color="#E5E5E5">the same bug</font><font color="#CCCCCC"> you'll see</font><font color="#E5E5E5"> that it actually</font>

905
00:30:43,350 --> 00:30:48,240
does recognize even with the 66<font color="#CCCCCC"> over I</font>

906
00:30:45,630 --> 00:30:52,590
prefix this is a<font color="#CCCCCC"> 32-bit operand but he</font>

907
00:30:48,240 --> 00:30:55,140
thinks<font color="#CCCCCC"> the 60-66 override prefix causes</font>

908
00:30:52,590 --> 00:30:57,060
the jump target<font color="#CCCCCC"> to be truncated</font><font color="#E5E5E5"> to 16</font>

909
00:30:55,140 --> 00:30:58,800
bits that's also not the correct

910
00:30:57,060 --> 00:31:00,750
behavior Visual Studio is<font color="#E5E5E5"> not correctly</font>

911
00:30:58,800 --> 00:31:03,120
resolving the target of this jump

912
00:31:00,750 --> 00:31:03,600
instruction<font color="#E5E5E5"> an attacker can actually use</font>

913
00:31:03,120 --> 00:31:05,610
this<font color="#CCCCCC"> too</font>

914
00:31:03,600 --> 00:31:07,139
<font color="#CCCCCC">that's malicious behavior in</font><font color="#E5E5E5"> software</font>

915
00:31:05,610 --> 00:31:09,689
<font color="#E5E5E5">you can basically use</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> to throw off</font>

916
00:31:07,140 --> 00:31:11,490
the disassembly<font color="#CCCCCC"> so that our analysis</font>

917
00:31:09,690 --> 00:31:13,500
tools don't see malicious instructions

918
00:31:11,490 --> 00:31:16,950
<font color="#E5E5E5">as an example of that this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> looking at</font>

919
00:31:13,500 --> 00:31:18,980
<font color="#E5E5E5">the 66 jump instruction</font><font color="#CCCCCC"> and observe so</font>

920
00:31:16,950 --> 00:31:20,760
what I have here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> 66 jump and</font>

921
00:31:18,980 --> 00:31:22,110
obstinate is<font color="#CCCCCC"> miss parsing that</font>

922
00:31:20,760 --> 00:31:23,610
instruction it thinks it's a<font color="#CCCCCC"> four byte</font>

923
00:31:22,110 --> 00:31:25,139
instruction when it's really<font color="#CCCCCC"> a six</font><font color="#E5E5E5"> byte</font>

924
00:31:23,610 --> 00:31:27,360
instruction<font color="#E5E5E5"> what that means is that</font>

925
00:31:25,140 --> 00:31:29,130
obstinate is also miss parsed<font color="#CCCCCC"> all the</font>

926
00:31:27,360 --> 00:31:31,709
<font color="#E5E5E5">subsequent instructions since it's now</font>

927
00:31:29,130 --> 00:31:33,780
off by two bytes so even though<font color="#CCCCCC"> ox jump</font>

928
00:31:31,710 --> 00:31:35,789
and gdb in the situation<font color="#CCCCCC"> will see a jump</font>

929
00:31:33,780 --> 00:31:38,250
instruction<font color="#E5E5E5"> followed by an</font><font color="#CCCCCC"> ADD followed</font>

930
00:31:35,789 --> 00:31:40,020
by an<font color="#E5E5E5"> ADD followed by a move</font><font color="#CCCCCC"> ABS</font><font color="#E5E5E5"> that's</font>

931
00:31:38,250 --> 00:31:41,700
not the real instructions<font color="#E5E5E5"> that are there</font>

932
00:31:40,020 --> 00:31:43,470
what's really going<font color="#E5E5E5"> to happen here is</font>

933
00:31:41,700 --> 00:31:45,179
this<font color="#E5E5E5"> is going to be a 32-bit operand</font>

934
00:31:43,470 --> 00:31:46,770
<font color="#E5E5E5">that's going to jump into the</font><font color="#CCCCCC"> middle of</font>

935
00:31:45,179 --> 00:31:49,350
one<font color="#E5E5E5"> of these move ABS instructions and</font>

936
00:31:46,770 --> 00:31:52,280
execute a malicious instruction embedded

937
00:31:49,350 --> 00:31:55,289
in<font color="#E5E5E5"> this immediate value</font><font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of a</font>

938
00:31:52,280 --> 00:31:57,210
highlight<font color="#CCCCCC"> the implications of</font><font color="#E5E5E5"> this in</font>

939
00:31:55,289 --> 00:31:59,158
terms<font color="#E5E5E5"> of our analysis tools</font><font color="#CCCCCC"> I wrote a</font>

940
00:31:57,210 --> 00:32:01,919
little malicious program that's going<font color="#E5E5E5"> to</font>

941
00:31:59,159 --> 00:32:04,799
<font color="#E5E5E5">operate</font><font color="#CCCCCC"> differently inside of qmu</font><font color="#E5E5E5"> versus</font>

942
00:32:01,919 --> 00:32:06,059
running<font color="#CCCCCC"> on a bare metal processor so</font>

943
00:32:04,799 --> 00:32:08,700
what I'm going<font color="#CCCCCC"> to do is I'm going to</font><font color="#E5E5E5"> SSH</font>

944
00:32:06,059 --> 00:32:10,770
into<font color="#E5E5E5"> my</font><font color="#CCCCCC"> Q mu</font><font color="#E5E5E5"> VM and I'm going to run</font>

945
00:32:08,700 --> 00:32:12,510
this<font color="#E5E5E5"> program this program is very very</font>

946
00:32:10,770 --> 00:32:15,000
<font color="#E5E5E5">simple but it starts out</font><font color="#CCCCCC"> with one</font><font color="#E5E5E5"> of</font>

947
00:32:12,510 --> 00:32:17,190
these<font color="#E5E5E5"> 66 jump instructions</font><font color="#CCCCCC"> q mu miss</font>

948
00:32:15,000 --> 00:32:19,080
emulates<font color="#CCCCCC"> that instruction and it thinks</font>

949
00:32:17,190 --> 00:32:21,059
<font color="#E5E5E5">that this program</font><font color="#CCCCCC"> is totally</font><font color="#E5E5E5"> benign</font>

950
00:32:19,080 --> 00:32:23,309
<font color="#E5E5E5">because</font><font color="#CCCCCC"> that's the execution that Q mu</font>

951
00:32:21,059 --> 00:32:25,559
sees but<font color="#E5E5E5"> now when I exit out of my VM</font>

952
00:32:23,309 --> 00:32:27,178
and<font color="#E5E5E5"> I run this exact same thing on bare</font>

953
00:32:25,559 --> 00:32:29,399
<font color="#CCCCCC">metal that instruction executes</font>

954
00:32:27,179 --> 00:32:31,650
differently we now get malicious

955
00:32:29,400 --> 00:32:33,299
behavior<font color="#E5E5E5"> from our program and I think</font>

956
00:32:31,650 --> 00:32:35,549
<font color="#CCCCCC">the neat thing about this</font><font color="#E5E5E5"> is there</font><font color="#CCCCCC"> is no</font>

957
00:32:33,299 --> 00:32:37,500
<font color="#E5E5E5">Q mu detection logic inside of this</font>

958
00:32:35,549 --> 00:32:39,960
program it just<font color="#E5E5E5"> started out with that</font>

959
00:32:37,500 --> 00:32:41,880
one malformed<font color="#E5E5E5"> jump instruction that</font>

960
00:32:39,960 --> 00:32:44,760
<font color="#E5E5E5">caused everything else in the emulation</font>

961
00:32:41,880 --> 00:32:45,840
<font color="#E5E5E5">to go haywire so so this is an</font>

962
00:32:44,760 --> 00:32:47,700
interesting bug and I was<font color="#E5E5E5"> curious about</font>

963
00:32:45,840 --> 00:32:49,908
why<font color="#E5E5E5"> does everybody screw this</font>

964
00:32:47,700 --> 00:32:52,530
instruction up and I think the answer is

965
00:32:49,909 --> 00:32:55,470
AMD processors actually<font color="#E5E5E5"> obey that</font>

966
00:32:52,530 --> 00:32:57,990
instruction that 66 override change of

967
00:32:55,470 --> 00:33:00,059
the operand size to 16<font color="#E5E5E5"> bits on an AMD</font>

968
00:32:57,990 --> 00:33:03,690
processor<font color="#CCCCCC"> where Intel processors are</font>

969
00:33:00,059 --> 00:33:05,490
actually ignoring that that prefix<font color="#E5E5E5"> so</font>

970
00:33:03,690 --> 00:33:06,900
it's a really<font color="#E5E5E5"> interesting difference in</font>

971
00:33:05,490 --> 00:33:09,030
the architecture<font color="#E5E5E5"> and whenever we can't</font>

972
00:33:06,900 --> 00:33:10,200
agree on<font color="#CCCCCC"> a standard for our architecture</font>

973
00:33:09,030 --> 00:33:13,080
bad things start to happen

974
00:33:10,200 --> 00:33:15,150
so<font color="#E5E5E5"> last major time to happen when Intel</font>

975
00:33:13,080 --> 00:33:16,590
deviated from<font color="#E5E5E5"> AMD specifications they</font>

976
00:33:15,150 --> 00:33:19,500
<font color="#E5E5E5">result in what was called</font><font color="#CCCCCC"> the sister</font>

977
00:33:16,590 --> 00:33:20,970
bug it caused a<font color="#E5E5E5"> kernel privilege</font>

978
00:33:19,500 --> 00:33:22,860
escalation vulnerability and nearly

979
00:33:20,970 --> 00:33:25,200
every major operating<font color="#E5E5E5"> system because</font><font color="#CCCCCC"> of</font>

980
00:33:22,860 --> 00:33:27,570
a very small<font color="#E5E5E5"> change between the way</font>

981
00:33:25,200 --> 00:33:28,950
these<font color="#E5E5E5"> two processors operated so you</font>

982
00:33:27,570 --> 00:33:30,779
think well why don't<font color="#E5E5E5"> we just update all</font>

983
00:33:28,950 --> 00:33:32,549
of<font color="#E5E5E5"> our tools to</font><font color="#CCCCCC"> support the correct or</font>

984
00:33:30,779 --> 00:33:34,110
the more common<font color="#E5E5E5"> Intel behavior since</font>

985
00:33:32,549 --> 00:33:36,539
<font color="#CCCCCC">Intel is 95</font><font color="#E5E5E5"> percent</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the market share</font>

986
00:33:34,110 --> 00:33:39,029
<font color="#CCCCCC">let's</font><font color="#E5E5E5"> just go with what Intel does well</font>

987
00:33:36,539 --> 00:33:40,830
the problem is either<font color="#E5E5E5"> Intel or AMD are</font>

988
00:33:39,029 --> 00:33:44,400
going to be vulnerable<font color="#CCCCCC"> because</font><font color="#E5E5E5"> of this</font>

989
00:33:40,830 --> 00:33:45,779
difference there's no winning<font color="#CCCCCC"> here and I</font>

990
00:33:44,400 --> 00:33:47,640
think<font color="#CCCCCC"> it</font><font color="#E5E5E5"> really just</font><font color="#CCCCCC"> shows how</font>

991
00:33:45,779 --> 00:33:49,710
<font color="#CCCCCC">impractically complex</font><font color="#E5E5E5"> this architecture</font>

992
00:33:47,640 --> 00:33:52,159
<font color="#CCCCCC">is when tools can't just process or</font>

993
00:33:49,710 --> 00:33:54,419
parse simple jump instructions correctly

994
00:33:52,159 --> 00:33:55,890
<font color="#CCCCCC">suppose</font><font color="#E5E5E5"> some of the interesting software</font>

995
00:33:54,419 --> 00:33:57,659
<font color="#CCCCCC">about there are a lot more net</font><font color="#E5E5E5"> that I</font>

996
00:33:55,890 --> 00:34:00,149
<font color="#CCCCCC">don't have time</font><font color="#E5E5E5"> to cover I also found</font>

997
00:33:57,659 --> 00:34:01,799
some really cool hypervisor bugs<font color="#E5E5E5"> so when</font>

998
00:34:00,149 --> 00:34:03,209
I<font color="#E5E5E5"> was in the early</font><font color="#CCCCCC"> stages of this</font>

999
00:34:01,799 --> 00:34:05,158
research<font color="#E5E5E5"> and trying to find interesting</font>

1000
00:34:03,210 --> 00:34:06,840
<font color="#E5E5E5">things in the instruction</font><font color="#CCCCCC"> set I got</font>

1001
00:34:05,159 --> 00:34:08,520
tired of waiting<font color="#CCCCCC"> a day for</font><font color="#E5E5E5"> these</font>

1002
00:34:06,840 --> 00:34:11,009
instruction scans to complete so I added

1003
00:34:08,520 --> 00:34:12,089
<font color="#E5E5E5">multi-core support</font><font color="#CCCCCC"> to the scanner</font><font color="#E5E5E5"> and I</font>

1004
00:34:11,010 --> 00:34:14,280
thought well wouldn't<font color="#E5E5E5"> it be neat if I</font>

1005
00:34:12,089 --> 00:34:15,960
could<font color="#CCCCCC"> just have</font><font color="#E5E5E5"> 20 course</font><font color="#CCCCCC"> turning away</font>

1006
00:34:14,280 --> 00:34:17,820
on the instruction set at once<font color="#E5E5E5"> then I</font>

1007
00:34:15,960 --> 00:34:20,190
could scan in an hour<font color="#CCCCCC"> what</font><font color="#E5E5E5"> used to take</font>

1008
00:34:17,820 --> 00:34:22,679
<font color="#E5E5E5">me a day</font><font color="#CCCCCC"> so I rented</font><font color="#E5E5E5"> in Azure instance</font>

1009
00:34:20,190 --> 00:34:24,418
with 24 so I could run<font color="#E5E5E5"> these instruction</font>

1010
00:34:22,679 --> 00:34:26,490
searches but really<font color="#E5E5E5"> quickly I found out</font>

1011
00:34:24,418 --> 00:34:26,940
that these scans weren't working inside

1012
00:34:26,489 --> 00:34:29,520
a badger

1013
00:34:26,940 --> 00:34:32,070
so basically<font color="#CCCCCC"> azure had this really</font>

1014
00:34:29,520 --> 00:34:33,989
interesting bug where the trap flag is

1015
00:34:32,070 --> 00:34:36,179
missed when you execute<font color="#E5E5E5"> a CPUID</font>

1016
00:34:33,989 --> 00:34:37,949
instruction<font color="#E5E5E5"> so if you have a CPUID</font>

1017
00:34:36,179 --> 00:34:39,960
instruction and<font color="#E5E5E5"> you execute it with the</font>

1018
00:34:37,949 --> 00:34:43,799
trap flag set<font color="#E5E5E5"> what's supposed to happen</font>

1019
00:34:39,960 --> 00:34:47,280
is the<font color="#CCCCCC"> cpu ID caused the</font><font color="#E5E5E5"> vm exit the</font><font color="#CCCCCC"> vm</font>

1020
00:34:43,800 --> 00:34:49,290
is then responsible<font color="#E5E5E5"> for emulating that</font>

1021
00:34:47,280 --> 00:34:50,700
CPUID instruction<font color="#E5E5E5"> and the last thing it</font>

1022
00:34:49,290 --> 00:34:52,800
to do last<font color="#CCCCCC"> thing the hypervisor should</font>

1023
00:34:50,699 --> 00:34:54,540
do is<font color="#CCCCCC"> check is the trap flag set and if</font>

1024
00:34:52,800 --> 00:34:57,570
it is it should inject the trap

1025
00:34:54,540 --> 00:34:59,490
exception<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the into the guest</font><font color="#E5E5E5"> now as</font>

1026
00:34:57,570 --> 00:35:01,470
you're forgetting that<font color="#E5E5E5"> last step of</font>

1027
00:34:59,490 --> 00:35:03,629
checking that trap<font color="#CCCCCC"> like in injecting</font>

1028
00:35:01,470 --> 00:35:06,660
<font color="#CCCCCC">that exception so sort of</font><font color="#E5E5E5"> as a demo of</font>

1029
00:35:03,630 --> 00:35:08,220
this of this bug in<font color="#CCCCCC"> Azure</font><font color="#E5E5E5"> I've got a</font>

1030
00:35:06,660 --> 00:35:11,009
little<font color="#E5E5E5"> test program here and when I run</font>

1031
00:35:08,220 --> 00:35:13,770
this<font color="#E5E5E5"> thing on bare metal here's what</font>

1032
00:35:11,010 --> 00:35:15,330
it's<font color="#CCCCCC"> going to do it's going to execute a</font>

1033
00:35:13,770 --> 00:35:17,369
<font color="#E5E5E5">series</font><font color="#CCCCCC"> of instructions</font><font color="#E5E5E5"> going to execute</font>

1034
00:35:15,330 --> 00:35:19,230
a<font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> ID followed by not followed by</font><font color="#CCCCCC"> an</font>

1035
00:35:17,369 --> 00:35:21,660
<font color="#CCCCCC">up</font><font color="#E5E5E5"> and the trap flag is going to be set</font>

1036
00:35:19,230 --> 00:35:23,130
<font color="#CCCCCC">during that cpuid</font><font color="#E5E5E5"> executions now what we</font>

1037
00:35:21,660 --> 00:35:25,259
expect<font color="#E5E5E5"> to happen is we</font><font color="#CCCCCC"> expect to get a</font>

1038
00:35:23,130 --> 00:35:27,150
trap on<font color="#E5E5E5"> that first</font><font color="#CCCCCC"> knob</font><font color="#E5E5E5"> instruction and</font>

1039
00:35:25,260 --> 00:35:29,580
what we really get is a trap on that

1040
00:35:27,150 --> 00:35:30,260
<font color="#E5E5E5">first not the construction but if I ask</font>

1041
00:35:29,580 --> 00:35:33,110
the station<font color="#CCCCCC"> to my</font>

1042
00:35:30,260 --> 00:35:35,780
<font color="#E5E5E5">as your</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> and run that exact same</font>

1043
00:35:33,110 --> 00:35:36,740
program<font color="#CCCCCC"> we're now going</font><font color="#E5E5E5"> to get entirely</font>

1044
00:35:35,780 --> 00:35:39,410
different results

1045
00:35:36,740 --> 00:35:41,479
we<font color="#E5E5E5"> executed</font><font color="#CCCCCC"> cpuid knob knob and we</font>

1046
00:35:39,410 --> 00:35:43,609
<font color="#E5E5E5">expected a trap on that first</font><font color="#CCCCCC"> map what</font>

1047
00:35:41,480 --> 00:35:46,160
we got was a<font color="#E5E5E5"> trap on the second knob the</font>

1048
00:35:43,610 --> 00:35:48,230
hypervisor<font color="#E5E5E5"> forgot to emulate the trap</font>

1049
00:35:46,160 --> 00:35:50,660
exception<font color="#E5E5E5"> now this is not a security</font>

1050
00:35:48,230 --> 00:35:52,280
critical<font color="#E5E5E5"> bug this is a very very minor</font>

1051
00:35:50,660 --> 00:35:54,080
thing<font color="#CCCCCC"> but it's always a</font><font color="#E5E5E5"> little</font>

1052
00:35:52,280 --> 00:35:55,520
unsettling<font color="#CCCCCC"> when the hypervisor</font><font color="#E5E5E5"> is not</font>

1053
00:35:54,080 --> 00:35:58,100
properly emulating some of the very

1054
00:35:55,520 --> 00:36:01,070
basic functionality<font color="#CCCCCC"> of the underlying</font>

1055
00:35:58,100 --> 00:36:02,839
architecture<font color="#E5E5E5"> so that takes us the</font>

1056
00:36:01,070 --> 00:36:05,090
hardware<font color="#CCCCCC"> bugs I</font><font color="#E5E5E5"> think the most entries</font>

1057
00:36:02,840 --> 00:36:06,860
interesting results of<font color="#E5E5E5"> this little</font>

1058
00:36:05,090 --> 00:36:09,170
research effort<font color="#CCCCCC"> hardware bugs are</font>

1059
00:36:06,860 --> 00:36:10,970
troubling because<font color="#E5E5E5"> if you have a hardware</font>

1060
00:36:09,170 --> 00:36:13,520
bug it<font color="#E5E5E5"> basically means you have that</font>

1061
00:36:10,970 --> 00:36:15,290
exact<font color="#E5E5E5"> same bug in all of your software</font>

1062
00:36:13,520 --> 00:36:17,570
<font color="#CCCCCC">and hardware bugs are very difficult</font><font color="#E5E5E5"> to</font>

1063
00:36:15,290 --> 00:36:19,580
<font color="#E5E5E5">find they</font><font color="#CCCCCC"> are very difficult</font><font color="#E5E5E5"> to fix</font>

1064
00:36:17,570 --> 00:36:21,290
so<font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> even when they're small</font>

1065
00:36:19,580 --> 00:36:23,810
<font color="#E5E5E5">are never a good</font><font color="#CCCCCC"> thing</font>

1066
00:36:21,290 --> 00:36:26,390
<font color="#E5E5E5">so I started out scanning several Intel</font>

1067
00:36:23,810 --> 00:36:27,980
processors and<font color="#E5E5E5"> unfortunately I didn't</font>

1068
00:36:26,390 --> 00:36:30,500
find<font color="#E5E5E5"> anything terribly interesting here</font>

1069
00:36:27,980 --> 00:36:32,930
I found<font color="#E5E5E5"> the</font><font color="#CCCCCC"> foof bug on a Pentium</font>

1070
00:36:30,500 --> 00:36:34,580
processor<font color="#E5E5E5"> so</font><font color="#CCCCCC"> foof was a</font><font color="#E5E5E5"> lock</font><font color="#CCCCCC"> cop</font>

1071
00:36:32,930 --> 00:36:36,529
<font color="#E5E5E5">exchange instruction that would lock up</font>

1072
00:36:34,580 --> 00:36:40,490
a<font color="#E5E5E5"> Pentium processor this</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> well known</font>

1073
00:36:36,530 --> 00:36:42,620
bug from very old processors so this was

1074
00:36:40,490 --> 00:36:44,600
a little<font color="#CCCCCC"> anticlimactic</font><font color="#E5E5E5"> but it did</font><font color="#CCCCCC"> show</font>

1075
00:36:42,620 --> 00:36:46,220
that<font color="#E5E5E5"> this technique is able to find</font>

1076
00:36:44,600 --> 00:36:48,560
these malformed instructions<font color="#E5E5E5"> that cause</font>

1077
00:36:46,220 --> 00:36:50,899
bad<font color="#CCCCCC"> things to happen so it was good</font>

1078
00:36:48,560 --> 00:36:52,880
validation<font color="#E5E5E5"> so the next thing I scan were</font>

1079
00:36:50,900 --> 00:36:54,890
some AMD processors<font color="#CCCCCC"> I noticed an</font>

1080
00:36:52,880 --> 00:36:56,390
interesting<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> on AMD namely on</font>

1081
00:36:54,890 --> 00:36:58,460
several<font color="#E5E5E5"> of these processors they can</font>

1082
00:36:56,390 --> 00:37:00,710
generate an undefined opcode exception

1083
00:36:58,460 --> 00:37:02,930
<font color="#E5E5E5">prior</font><font color="#CCCCCC"> to completing</font><font color="#E5E5E5"> the instruction</font>

1084
00:37:00,710 --> 00:37:05,150
fetch<font color="#E5E5E5"> so I</font><font color="#CCCCCC"> don't mean to aim these</font>

1085
00:37:02,930 --> 00:37:06,649
reference manuals<font color="#E5E5E5"> and found that this</font><font color="#CCCCCC"> is</font>

1086
00:37:05,150 --> 00:37:09,260
not the<font color="#CCCCCC"> correct behavior</font><font color="#E5E5E5"> for this</font>

1087
00:37:06,650 --> 00:37:11,510
processor<font color="#E5E5E5"> a page fault exception during</font>

1088
00:37:09,260 --> 00:37:13,760
<font color="#E5E5E5">the instruction fetch should take</font>

1089
00:37:11,510 --> 00:37:16,610
priority over an undefined opcode

1090
00:37:13,760 --> 00:37:18,170
exception so in our instruction search

1091
00:37:16,610 --> 00:37:20,360
where<font color="#E5E5E5"> we have the last few bytes of an</font>

1092
00:37:18,170 --> 00:37:22,310
instruction sitting on a non executable

1093
00:37:20,360 --> 00:37:24,920
page<font color="#E5E5E5"> we should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> getting a page fault</font>

1094
00:37:22,310 --> 00:37:27,020
exception not undefined opcode exception

1095
00:37:24,920 --> 00:37:28,730
so that's not the<font color="#E5E5E5"> correct behavior it's</font>

1096
00:37:27,020 --> 00:37:30,920
a minor<font color="#E5E5E5"> thing but that is a processor</font>

1097
00:37:28,730 --> 00:37:32,510
<font color="#E5E5E5">errata until when I was making</font><font color="#CCCCCC"> this</font>

1098
00:37:30,920 --> 00:37:35,570
<font color="#CCCCCC">presentation I looked at newest version</font>

1099
00:37:32,510 --> 00:37:37,550
of<font color="#E5E5E5"> the AMD documentation and in March</font>

1100
00:37:35,570 --> 00:37:39,110
<font color="#E5E5E5">2017 just</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple</font><font color="#CCCCCC"> months ago somebody</font>

1101
00:37:37,550 --> 00:37:41,339
<font color="#E5E5E5">at AMD must have stumbled across this</font>

1102
00:37:39,110 --> 00:37:43,799
and they added<font color="#E5E5E5"> this little footnote to</font>

1103
00:37:41,339 --> 00:37:45,808
processor<font color="#E5E5E5"> interrupt exception priority</font>

1104
00:37:43,799 --> 00:37:47,579
<font color="#E5E5E5">tables that basically allows for this</font>

1105
00:37:45,809 --> 00:37:49,710
situation<font color="#CCCCCC"> now I think</font><font color="#E5E5E5"> this was a little</font>

1106
00:37:47,579 --> 00:37:52,019
<font color="#CCCCCC">bit of a</font><font color="#E5E5E5"> cop-out if your processor has</font>

1107
00:37:49,710 --> 00:37:54,809
an errata<font color="#E5E5E5"> in it and then you</font><font color="#CCCCCC"> update the</font>

1108
00:37:52,019 --> 00:37:57,180
documentation<font color="#CCCCCC"> to allow that errata is it</font>

1109
00:37:54,809 --> 00:37:58,829
still an errata<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think it is but I'm</font>

1110
00:37:57,180 --> 00:38:01,440
apparently this is allowed in the newest

1111
00:37:58,829 --> 00:38:03,869
version<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the AMD manuals I scanned a</font>

1112
00:38:01,440 --> 00:38:06,299
<font color="#CCCCCC">transmeta</font><font color="#E5E5E5"> processor transmeta is not</font>

1113
00:38:03,869 --> 00:38:08,400
especially<font color="#E5E5E5"> popular anymore but they were</font>

1114
00:38:06,299 --> 00:38:11,130
kind<font color="#CCCCCC"> of interesting a couple of years</font>

1115
00:38:08,400 --> 00:38:12,839
back<font color="#CCCCCC"> I found some interesting result</font>

1116
00:38:11,130 --> 00:38:16,259
from the transmeta<font color="#E5E5E5"> where this series</font><font color="#CCCCCC"> of</font>

1117
00:38:12,839 --> 00:38:17,849
instructions<font color="#E5E5E5"> OS 71 72 or 73 could</font>

1118
00:38:16,259 --> 00:38:19,619
generate a floating-point exception

1119
00:38:17,849 --> 00:38:20,819
<font color="#E5E5E5">during the instruction such</font><font color="#CCCCCC"> days so if</font>

1120
00:38:19,619 --> 00:38:22,259
you had a floating-point exception

1121
00:38:20,819 --> 00:38:23,880
pending and<font color="#E5E5E5"> you try to execute one of</font>

1122
00:38:22,259 --> 00:38:26,130
<font color="#E5E5E5">these instructions</font><font color="#CCCCCC"> you would</font><font color="#E5E5E5"> get a</font>

1123
00:38:23,880 --> 00:38:27,630
floating-point exception<font color="#E5E5E5"> before the</font>

1124
00:38:26,130 --> 00:38:29,519
instruction was completely fetched

1125
00:38:27,630 --> 00:38:31,380
that's also not<font color="#E5E5E5"> the correct behavior the</font>

1126
00:38:29,519 --> 00:38:32,488
correct<font color="#CCCCCC"> behavior here is to get a page</font>

1127
00:38:31,380 --> 00:38:35,039
full of instruction during the

1128
00:38:32,489 --> 00:38:37,829
instruction<font color="#CCCCCC"> fetch so again</font><font color="#E5E5E5"> very very</font>

1129
00:38:35,039 --> 00:38:40,529
minor<font color="#E5E5E5"> errata that you would never see</font><font color="#CCCCCC"> in</font>

1130
00:38:37,829 --> 00:38:43,739
<font color="#E5E5E5">any normal situation but it's all bling</font>

1131
00:38:40,529 --> 00:38:46,079
<font color="#CCCCCC">when when there's a bug and hardware so</font>

1132
00:38:43,739 --> 00:38:48,390
that<font color="#CCCCCC"> brings me to</font><font color="#E5E5E5"> the last</font><font color="#CCCCCC"> hardware bug</font>

1133
00:38:46,079 --> 00:38:50,819
<font color="#E5E5E5">that I found in this research and this</font>

1134
00:38:48,390 --> 00:38:53,430
<font color="#E5E5E5">is</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> the most interesting one so I</font>

1135
00:38:50,819 --> 00:38:56,339
found this on one<font color="#E5E5E5"> processor</font><font color="#CCCCCC"> essentially</font>

1136
00:38:53,430 --> 00:38:58,828
a halt<font color="#E5E5E5"> and catch fire instruction what I</font>

1137
00:38:56,339 --> 00:39:01,259
mean<font color="#E5E5E5"> by</font><font color="#CCCCCC"> that is it is a single malformed</font>

1138
00:38:58,829 --> 00:39:03,119
instruction<font color="#E5E5E5"> and if we run this inside of</font>

1139
00:39:01,259 --> 00:39:05,279
ring<font color="#CCCCCC"> three the least privileged ring on</font>

1140
00:39:03,119 --> 00:39:08,190
the processor it will<font color="#E5E5E5"> lock the processor</font>

1141
00:39:05,279 --> 00:39:10,349
entirely<font color="#CCCCCC"> I want to be really really sure</font>

1142
00:39:08,190 --> 00:39:11,640
<font color="#CCCCCC">that this</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> in a kernel bug that I was</font>

1143
00:39:10,349 --> 00:39:13,289
seeing so I tried this on three

1144
00:39:11,640 --> 00:39:14,848
different Linux kernels two different

1145
00:39:13,289 --> 00:39:17,579
<font color="#E5E5E5">Windows kernels and always got the same</font>

1146
00:39:14,849 --> 00:39:20,430
results<font color="#E5E5E5"> a complete processor lock when</font>

1147
00:39:17,579 --> 00:39:22,170
we<font color="#E5E5E5"> execute this one bad instruction to</font>

1148
00:39:20,430 --> 00:39:23,279
be really sure that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> wasn't a kernel</font>

1149
00:39:22,170 --> 00:39:26,069
bug I developed the loadable kernel

1150
00:39:23,279 --> 00:39:28,170
module in<font color="#E5E5E5"> Linux that would hook the</font>

1151
00:39:26,069 --> 00:39:29,700
<font color="#E5E5E5">interrupt</font><font color="#CCCCCC"> scripture cable hook all the</font>

1152
00:39:28,170 --> 00:39:31,229
<font color="#E5E5E5">exceptions that can possibly occur on</font>

1153
00:39:29,700 --> 00:39:32,910
the processor and dump exception

1154
00:39:31,229 --> 00:39:34,468
information to serial whenever an

1155
00:39:32,910 --> 00:39:35,969
interrupt on the processor occurred I

1156
00:39:34,469 --> 00:39:37,259
was<font color="#CCCCCC"> a little bit worried that</font><font color="#E5E5E5"> maybe is</font>

1157
00:39:35,969 --> 00:39:38,759
just<font color="#E5E5E5"> an</font><font color="#CCCCCC"> inner elf storm that</font><font color="#E5E5E5"> was making</font>

1158
00:39:37,259 --> 00:39:41,039
<font color="#CCCCCC">it</font><font color="#E5E5E5"> look like</font><font color="#CCCCCC"> the processor was locked</font>

1159
00:39:38,759 --> 00:39:42,960
based on this debugging it sort of

1160
00:39:41,039 --> 00:39:45,119
validated<font color="#E5E5E5"> that this is in fact</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> total</font>

1161
00:39:42,960 --> 00:39:48,150
processor<font color="#CCCCCC"> lock on an unprivileged</font>

1162
00:39:45,119 --> 00:39:49,920
<font color="#E5E5E5">malformed bring</font><font color="#CCCCCC"> through exception now</font>

1163
00:39:48,150 --> 00:39:51,660
unfortunately I found<font color="#E5E5E5"> this two weeks</font>

1164
00:39:49,920 --> 00:39:53,219
before<font color="#CCCCCC"> this presentation which means the</font>

1165
00:39:51,660 --> 00:39:54,540
vendor has not had time to<font color="#E5E5E5"> respond to</font>

1166
00:39:53,219 --> 00:39:55,650
<font color="#CCCCCC">this issue</font><font color="#E5E5E5"> on</font>

1167
00:39:54,540 --> 00:39:57,990
<font color="#E5E5E5">I'm not going to shoot them</font><font color="#CCCCCC"> in the foot</font>

1168
00:39:55,650 --> 00:39:59,970
here<font color="#CCCCCC"> there's really no details available</font>

1169
00:39:57,990 --> 00:40:02,089
on what chips or vendors or actual

1170
00:39:59,970 --> 00:40:03,959
instruction<font color="#E5E5E5"> cause this issue right</font><font color="#CCCCCC"> now</font>

1171
00:40:02,090 --> 00:40:06,570
<font color="#CCCCCC">but I do want to give you a quick</font>

1172
00:40:03,960 --> 00:40:08,820
demonstration of this ring<font color="#CCCCCC"> 3 processor</font>

1173
00:40:06,570 --> 00:40:12,030
<font color="#E5E5E5">Doss on the system so what I've</font><font color="#CCCCCC"> got</font><font color="#E5E5E5"> here</font>

1174
00:40:08,820 --> 00:40:13,860
is<font color="#E5E5E5"> I've got Debian booted you can see it</font>

1175
00:40:12,030 --> 00:40:16,650
can<font color="#E5E5E5"> run any normal program but if I run</font>

1176
00:40:13,860 --> 00:40:18,210
my a dot out program it out<font color="#E5E5E5"> only</font>

1177
00:40:16,650 --> 00:40:20,640
contains<font color="#CCCCCC"> one instruction it contains</font>

1178
00:40:18,210 --> 00:40:23,310
this<font color="#E5E5E5"> one malformed ring</font><font color="#CCCCCC"> 3 instruction</font>

1179
00:40:20,640 --> 00:40:25,560
now when I run a dot out the processor

1180
00:40:23,310 --> 00:40:28,380
entirely locks<font color="#CCCCCC"> I don't mean the</font><font color="#E5E5E5"> process</font>

1181
00:40:25,560 --> 00:40:30,390
locks<font color="#CCCCCC"> I mean the processor</font><font color="#E5E5E5"> locks we can</font>

1182
00:40:28,380 --> 00:40:32,400
try to kill the process<font color="#E5E5E5"> with</font><font color="#CCCCCC"> ctrl C it</font>

1183
00:40:30,390 --> 00:40:35,190
won't respond we can try to<font color="#E5E5E5"> change</font><font color="#CCCCCC"> run</font>

1184
00:40:32,400 --> 00:40:37,890
<font color="#CCCCCC">levels to a get get</font><font color="#E5E5E5"> into some more</font>

1185
00:40:35,190 --> 00:40:39,900
simple state the system<font color="#E5E5E5"> won't respond we</font>

1186
00:40:37,890 --> 00:40:43,200
can try<font color="#E5E5E5"> to use the Linux magic</font><font color="#CCCCCC"> ciserek</font>

1187
00:40:39,900 --> 00:40:44,970
<font color="#CCCCCC">keys the system</font><font color="#E5E5E5"> won't respond that</font>

1188
00:40:43,200 --> 00:40:48,240
processor is completely done executing

1189
00:40:44,970 --> 00:40:51,689
<font color="#E5E5E5">instructions and is hard</font><font color="#CCCCCC"> locked at this</font>

1190
00:40:48,240 --> 00:40:53,279
point so I<font color="#CCCCCC"> think</font><font color="#E5E5E5"> this is a really</font>

1191
00:40:51,690 --> 00:40:55,320
<font color="#E5E5E5">interesting sign because this is the</font>

1192
00:40:53,280 --> 00:40:57,030
first such<font color="#CCCCCC"> attack sound in 20 years</font><font color="#E5E5E5"> so</font>

1193
00:40:55,320 --> 00:40:59,100
<font color="#E5E5E5">last time this</font><font color="#CCCCCC"> happened with on the</font>

1194
00:40:57,030 --> 00:41:00,570
original<font color="#E5E5E5"> Pentium processors with that</font>

1195
00:40:59,100 --> 00:41:02,549
<font color="#CCCCCC">foof instruction that could lock the</font>

1196
00:41:00,570 --> 00:41:04,410
<font color="#E5E5E5">processor I don't think anything like</font>

1197
00:41:02,550 --> 00:41:06,360
<font color="#E5E5E5">this has</font><font color="#CCCCCC"> been seen</font><font color="#E5E5E5"> in the 20 years</font><font color="#CCCCCC"> since</font>

1198
00:41:04,410 --> 00:41:08,220
<font color="#CCCCCC">but I also don't want to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> it sound</font>

1199
00:41:06,360 --> 00:41:11,730
like<font color="#E5E5E5"> the sky is falling</font><font color="#CCCCCC"> this was found</font>

1200
00:41:08,220 --> 00:41:14,339
on<font color="#E5E5E5"> one very esoteric processor that</font><font color="#CCCCCC"> is</font>

1201
00:41:11,730 --> 00:41:16,290
not used in widespread<font color="#CCCCCC"> production I</font>

1202
00:41:14,340 --> 00:41:18,360
think it's mostly interesting from an

1203
00:41:16,290 --> 00:41:20,610
academic<font color="#E5E5E5"> perspective that we</font><font color="#CCCCCC"> have a tool</font>

1204
00:41:18,360 --> 00:41:23,070
that<font color="#E5E5E5"> is able to find these kinds of</font>

1205
00:41:20,610 --> 00:41:24,540
<font color="#E5E5E5">things now and this should</font><font color="#CCCCCC"> be I</font><font color="#E5E5E5"> think</font>

1206
00:41:23,070 --> 00:41:26,580
obvious this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a significant security</font>

1207
00:41:24,540 --> 00:41:29,070
concern right if an unprivileged user

1208
00:41:26,580 --> 00:41:32,370
can mount a<font color="#CCCCCC"> Doss attack against the</font>

1209
00:41:29,070 --> 00:41:33,840
processor<font color="#E5E5E5"> itself a real problem so</font><font color="#CCCCCC"> I'm</font>

1210
00:41:32,370 --> 00:41:36,509
hoping I can<font color="#E5E5E5"> release details for this</font>

1211
00:41:33,840 --> 00:41:38,850
within the<font color="#CCCCCC"> next month</font><font color="#E5E5E5"> or so stay tuned</font>

1212
00:41:36,510 --> 00:41:40,910
I'll be<font color="#CCCCCC"> posting information</font><font color="#E5E5E5"> about this</font>

1213
00:41:38,850 --> 00:41:43,080
<font color="#E5E5E5">if the responsible disclosure goes</font><font color="#CCCCCC"> ok</font>

1214
00:41:40,910 --> 00:41:44,520
like I<font color="#E5E5E5"> said I wanted this to</font><font color="#CCCCCC"> be a tool</font>

1215
00:41:43,080 --> 00:41:46,200
<font color="#E5E5E5">that everybody could actually use that</font>

1216
00:41:44,520 --> 00:41:48,540
<font color="#E5E5E5">people could use</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> check their own</font>

1217
00:41:46,200 --> 00:41:51,000
<font color="#E5E5E5">systems for problems so I open force</font>

1218
00:41:48,540 --> 00:41:54,600
this as the<font color="#E5E5E5"> sand sifter scanning tool</font>

1219
00:41:51,000 --> 00:41:58,110
<font color="#CCCCCC">it's on github now github.com slash</font><font color="#E5E5E5"> X or</font>

1220
00:41:54,600 --> 00:41:59,370
<font color="#E5E5E5">e ax e ax ax slash sand sifter I'm just</font>

1221
00:41:58,110 --> 00:42:00,810
<font color="#E5E5E5">remembering right now I actually forgot</font>

1222
00:41:59,370 --> 00:42:02,940
to<font color="#E5E5E5"> click the public button before</font><font color="#CCCCCC"> this</font>

1223
00:42:00,810 --> 00:42:06,180
talk<font color="#E5E5E5"> so</font><font color="#CCCCCC"> in about</font><font color="#E5E5E5"> five minutes</font><font color="#CCCCCC"> after the</font>

1224
00:42:02,940 --> 00:42:08,069
talk this<font color="#E5E5E5"> will be available to you</font><font color="#CCCCCC"> so I</font>

1225
00:42:06,180 --> 00:42:10,469
encourage<font color="#E5E5E5"> you to go check</font><font color="#CCCCCC"> this thing out</font>

1226
00:42:08,069 --> 00:42:11,999
<font color="#E5E5E5">audit your processor figure out what are</font>

1227
00:42:10,469 --> 00:42:15,059
the secret<font color="#CCCCCC"> instructions sitting in your</font>

1228
00:42:11,999 --> 00:42:18,209
system right<font color="#E5E5E5"> now break disassemblers</font>

1229
00:42:15,059 --> 00:42:19,859
break emulators break hypervisors<font color="#E5E5E5"> find</font>

1230
00:42:18,209 --> 00:42:21,719
these halt and catch fire instructions

1231
00:42:19,859 --> 00:42:23,880
now<font color="#E5E5E5"> you know the system I</font><font color="#CCCCCC"> found that on</font>

1232
00:42:21,719 --> 00:42:25,440
didn't literally halt and catch fire<font color="#CCCCCC"> but</font>

1233
00:42:23,880 --> 00:42:27,449
who<font color="#E5E5E5"> knows maybe yours</font><font color="#CCCCCC"> will I think that</font>

1234
00:42:25,440 --> 00:42:29,099
would<font color="#CCCCCC"> be awesome so hopefully you'll be</font>

1235
00:42:27,449 --> 00:42:30,930
<font color="#E5E5E5">able to find something interesting</font><font color="#CCCCCC"> if</font>

1236
00:42:29,099 --> 00:42:32,640
you try<font color="#E5E5E5"> this tool</font><font color="#CCCCCC"> out and I really want</font>

1237
00:42:30,930 --> 00:42:34,348
<font color="#E5E5E5">to</font><font color="#CCCCCC"> emphasize I've only scanned a few of</font>

1238
00:42:32,640 --> 00:42:36,598
the systems that<font color="#CCCCCC"> I have right now</font><font color="#E5E5E5"> and</font>

1239
00:42:34,349 --> 00:42:38,249
<font color="#CCCCCC">this is just a tiny fraction of</font><font color="#E5E5E5"> what I</font>

1240
00:42:36,599 --> 00:42:39,719
found on those<font color="#E5E5E5"> systems it's just what I</font>

1241
00:42:38,249 --> 00:42:43,259
could cram into a 45 minute<font color="#CCCCCC"> presentation</font>

1242
00:42:39,719 --> 00:42:45,059
so who knows what exists on<font color="#CCCCCC"> your system</font>

1243
00:42:43,259 --> 00:42:46,650
so<font color="#CCCCCC"> I encourage</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> to check your system</font>

1244
00:42:45,059 --> 00:42:48,029
<font color="#E5E5E5">if you're not sure about the results</font>

1245
00:42:46,650 --> 00:42:49,890
that<font color="#CCCCCC"> you're seeing feel free to reach</font>

1246
00:42:48,029 --> 00:42:51,839
out<font color="#E5E5E5"> to me I can help you interpret those</font>

1247
00:42:49,890 --> 00:42:53,999
but the real point here<font color="#E5E5E5"> even if you</font>

1248
00:42:51,839 --> 00:42:56,549
<font color="#E5E5E5">don't use a tool don't blind me trust</font>

1249
00:42:53,999 --> 00:42:58,649
the specifications<font color="#E5E5E5"> anymore</font>

1250
00:42:56,549 --> 00:43:00,329
<font color="#CCCCCC">you know up until now we've been</font><font color="#E5E5E5"> forced</font>

1251
00:42:58,650 --> 00:43:02,579
to blindly trust specifications<font color="#CCCCCC"> because</font>

1252
00:43:00,329 --> 00:43:04,650
we had no<font color="#E5E5E5"> way</font><font color="#CCCCCC"> to look into what the</font>

1253
00:43:02,579 --> 00:43:06,359
<font color="#E5E5E5">processor was actually doing and I think</font>

1254
00:43:04,650 --> 00:43:08,579
<font color="#CCCCCC">now that's what sand sifter gives us</font>

1255
00:43:06,359 --> 00:43:11,190
it's a primitive first step<font color="#E5E5E5"> that</font><font color="#CCCCCC"> allows</font>

1256
00:43:08,579 --> 00:43:13,319
us to introspect this black box<font color="#E5E5E5"> that is</font>

1257
00:43:11,190 --> 00:43:14,759
at the heart<font color="#CCCCCC"> of all of our</font><font color="#E5E5E5"> systems</font><font color="#CCCCCC"> and I</font>

1258
00:43:13,319 --> 00:43:16,859
<font color="#E5E5E5">think that's a really important first</font>

1259
00:43:14,759 --> 00:43:20,819
step in terms<font color="#E5E5E5"> of establishing</font><font color="#CCCCCC"> trust</font><font color="#E5E5E5"> on</font>

1260
00:43:16,859 --> 00:43:21,959
these processors so with<font color="#E5E5E5"> that sort of</font>

1261
00:43:20,819 --> 00:43:24,959
wrapping everything up one more time

1262
00:43:21,959 --> 00:43:27,149
<font color="#E5E5E5">that length is github.com</font><font color="#CCCCCC"> slash x or IX</font>

1263
00:43:24,959 --> 00:43:29,549
II IX II IX that's the sand sifter

1264
00:43:27,150 --> 00:43:30,690
project you can also<font color="#E5E5E5"> find</font><font color="#CCCCCC"> some other fun</font>

1265
00:43:29,549 --> 00:43:33,269
things<font color="#CCCCCC"> that I've worked</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> the last</font>

1266
00:43:30,690 --> 00:43:35,430
few<font color="#CCCCCC"> years</font><font color="#E5E5E5"> for no reason at all I wrote a</font>

1267
00:43:33,269 --> 00:43:36,508
single<font color="#E5E5E5"> instruction C compiler that's on</font>

1268
00:43:35,430 --> 00:43:38,549
there so if you're curious about<font color="#E5E5E5"> how</font>

1269
00:43:36,509 --> 00:43:40,229
<font color="#CCCCCC">that works you can check it</font><font color="#E5E5E5"> out I've got</font>

1270
00:43:38,549 --> 00:43:42,569
some fun<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> for manipulating program</font>

1271
00:43:40,229 --> 00:43:44,910
control flow<font color="#E5E5E5"> to mess with people in Ida</font>

1272
00:43:42,569 --> 00:43:46,199
<font color="#CCCCCC">a couple years ago</font><font color="#E5E5E5"> I released an</font>

1273
00:43:44,910 --> 00:43:48,690
architectural privileged escalation

1274
00:43:46,199 --> 00:43:49,650
vulnerability on x86 you can find that

1275
00:43:48,690 --> 00:43:50,849
code there as well

1276
00:43:49,650 --> 00:43:53,339
<font color="#E5E5E5">there's lots of other miscellaneous</font>

1277
00:43:50,849 --> 00:43:55,739
<font color="#E5E5E5">projects I've tinkered with recently so</font>

1278
00:43:53,339 --> 00:43:57,239
I hope you'll<font color="#CCCCCC"> check that</font><font color="#E5E5E5"> out I'd really</font>

1279
00:43:55,739 --> 00:43:59,160
really like to get feedback<font color="#E5E5E5"> and</font><font color="#CCCCCC"> ideas</font>

1280
00:43:57,239 --> 00:44:01,319
from<font color="#E5E5E5"> people on this work so that</font><font color="#CCCCCC"> I can</font>

1281
00:43:59,160 --> 00:44:04,440
update<font color="#E5E5E5"> this and make this more useful</font>

1282
00:44:01,319 --> 00:44:05,759
for everyone<font color="#CCCCCC"> if you've got any</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> that</font>

1283
00:44:04,440 --> 00:44:07,469
I'd love to<font color="#CCCCCC"> talk</font><font color="#E5E5E5"> to you after my</font>

1284
00:44:05,759 --> 00:44:10,739
presentation<font color="#E5E5E5"> or you can reach out</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> me</font>

1285
00:44:07,469 --> 00:44:12,449
<font color="#CCCCCC">on twitter x or e ax c ax</font><font color="#E5E5E5"> e ax</font><font color="#CCCCCC"> i'll be</font>

1286
00:44:10,739 --> 00:44:15,269
posting<font color="#CCCCCC"> more information about that</font><font color="#E5E5E5"> ring</font>

1287
00:44:12,449 --> 00:44:19,019
<font color="#E5E5E5">3</font><font color="#CCCCCC"> daus instruction in the near future or</font>

1288
00:44:15,269 --> 00:44:20,519
<font color="#CCCCCC">you can reach out</font><font color="#E5E5E5"> to me on</font><font color="#CCCCCC"> email</font><font color="#E5E5E5"> so</font>

1289
00:44:19,019 --> 00:44:21,629
that's all I've got<font color="#E5E5E5"> I'd love to talk</font>

1290
00:44:20,519 --> 00:44:23,519
with<font color="#E5E5E5"> you</font>

1291
00:44:21,630 --> 00:44:25,090
stage as soon<font color="#E5E5E5"> as this</font><font color="#CCCCCC"> is over</font><font color="#E5E5E5"> thank you</font>

1292
00:44:23,519 --> 00:44:30,669
<font color="#E5E5E5">everyone for attending</font>

1293
00:44:25,090 --> 00:44:30,670
[Applause]

