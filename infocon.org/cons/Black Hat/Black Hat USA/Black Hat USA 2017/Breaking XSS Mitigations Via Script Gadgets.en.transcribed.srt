1
00:00:00,030 --> 00:00:04,910
so hello<font color="#CCCCCC"> thank you very</font><font color="#E5E5E5"> much for</font><font color="#CCCCCC"> coming</font>

2
00:00:01,500 --> 00:00:08,429
<font color="#CCCCCC">here we are</font><font color="#E5E5E5"> presenting</font><font color="#CCCCCC"> three budgets as</font>

3
00:00:04,910 --> 00:00:12,960
he explained<font color="#E5E5E5"> I'm presenting together</font>

4
00:00:08,429 --> 00:00:14,400
with<font color="#CCCCCC"> koto and Sebastian and yeah</font><font color="#E5E5E5"> so what</font>

5
00:00:12,960 --> 00:00:16,440
we want to<font color="#E5E5E5"> show you today is how</font><font color="#CCCCCC"> we</font>

6
00:00:14,400 --> 00:00:19,380
bypassed<font color="#E5E5E5"> every exercise mitigation we</font>

7
00:00:16,440 --> 00:00:21,210
tested which essentially means<font color="#E5E5E5"> we tested</font>

8
00:00:19,380 --> 00:00:24,538
<font color="#CCCCCC">excesses</font><font color="#E5E5E5"> filters</font><font color="#CCCCCC"> were application</font>

9
00:00:21,210 --> 00:00:26,090
<font color="#E5E5E5">firewalls</font><font color="#CCCCCC"> the and several versions of</font>

10
00:00:24,539 --> 00:00:29,070
<font color="#E5E5E5">content security policy as well</font><font color="#CCCCCC"> a couple</font>

11
00:00:26,090 --> 00:00:30,929
<font color="#CCCCCC">sanitizers and</font><font color="#E5E5E5"> the objective of this</font>

12
00:00:29,070 --> 00:00:33,300
research<font color="#E5E5E5"> originally was yes to bypass</font>

13
00:00:30,929 --> 00:00:36,660
ESP but<font color="#E5E5E5"> then it evolved</font><font color="#CCCCCC"> into something</font><font color="#E5E5E5"> a</font>

14
00:00:33,300 --> 00:00:39,510
bit<font color="#CCCCCC"> more</font><font color="#E5E5E5"> generic and we hope you</font><font color="#CCCCCC"> like it</font>

15
00:00:36,660 --> 00:00:40,828
the website will post a copy<font color="#E5E5E5"> of the</font>

16
00:00:39,510 --> 00:00:42,329
repository but there's another version

17
00:00:40,829 --> 00:00:46,500
online<font color="#E5E5E5"> if you want to see the proof</font><font color="#CCCCCC"> of</font>

18
00:00:42,329 --> 00:00:47,940
concepts so<font color="#CCCCCC"> agree</font><font color="#E5E5E5"> a quick agenda of what</font>

19
00:00:46,500 --> 00:00:49,469
<font color="#CCCCCC">we're going</font><font color="#E5E5E5"> to do so I'm going to give</font>

20
00:00:47,940 --> 00:00:51,930
you a very<font color="#E5E5E5"> quick introduction for around</font>

21
00:00:49,469 --> 00:00:53,489
<font color="#CCCCCC">10 minutes then Cotto is going to</font>

22
00:00:51,930 --> 00:00:55,340
present the gadgets in libraries which

23
00:00:53,489 --> 00:00:57,930
is the research<font color="#E5E5E5"> done manually by us</font>

24
00:00:55,340 --> 00:00:59,910
against the most popular libraries we we

25
00:00:57,930 --> 00:01:01,800
came up with and then<font color="#E5E5E5"> Sebastian will</font>

26
00:00:59,910 --> 00:01:04,649
talk about gadgets<font color="#E5E5E5"> in websites so we run</font>

27
00:01:01,800 --> 00:01:07,140
a<font color="#E5E5E5"> study or an Alexa top 5,000 and then</font>

28
00:01:04,650 --> 00:01:09,119
try<font color="#E5E5E5"> to find gadgets automatically and</font>

29
00:01:07,140 --> 00:01:10,260
generate exploits automatically<font color="#E5E5E5"> and at</font>

30
00:01:09,119 --> 00:01:13,200
the end we're going<font color="#E5E5E5"> to just have a very</font>

31
00:01:10,260 --> 00:01:16,170
brief<font color="#CCCCCC"> summary and conclusions</font><font color="#E5E5E5"> all right</font>

32
00:01:13,200 --> 00:01:18,450
so most of<font color="#E5E5E5"> you I hope are familiar with</font>

33
00:01:16,170 --> 00:01:20,490
the term XSS but I'm going<font color="#E5E5E5"> to just give</font>

34
00:01:18,450 --> 00:01:21,840
you<font color="#CCCCCC"> a 30-second summary</font><font color="#E5E5E5"> so what you do</font>

35
00:01:20,490 --> 00:01:22,259
in Nexus S is you have something like

36
00:01:21,840 --> 00:01:26,369
<font color="#CCCCCC">that</font>

37
00:01:22,259 --> 00:01:27,659
and the attacker does something

38
00:01:26,369 --> 00:01:30,420
<font color="#CCCCCC">interesting if</font><font color="#E5E5E5"> you are just</font><font color="#CCCCCC"> pen</font><font color="#E5E5E5"> testing</font>

39
00:01:27,659 --> 00:01:33,659
<font color="#E5E5E5">you get alert</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> and or alert something</font>

40
00:01:30,420 --> 00:01:35,549
else so the right way<font color="#CCCCCC"> to fix XSS</font><font color="#E5E5E5"> is to</font>

41
00:01:33,659 --> 00:01:37,740
do the right<font color="#CCCCCC"> type of</font><font color="#E5E5E5"> escaping in</font><font color="#CCCCCC"> the</font>

42
00:01:35,549 --> 00:01:39,930
right context<font color="#E5E5E5"> so in the previous example</font>

43
00:01:37,740 --> 00:01:41,548
<font color="#CCCCCC">it</font><font color="#E5E5E5"> will be</font><font color="#CCCCCC"> HTML entities what it depends</font>

44
00:01:39,930 --> 00:01:44,759
<font color="#CCCCCC">on</font><font color="#E5E5E5"> what type of</font><font color="#CCCCCC"> vulnerability you</font><font color="#E5E5E5"> have</font>

45
00:01:41,549 --> 00:01:46,500
and doing<font color="#E5E5E5"> this by humans is very</font>

46
00:01:44,759 --> 00:01:49,079
<font color="#E5E5E5">difficult so the right way to do it</font><font color="#CCCCCC"> is</font>

47
00:01:46,500 --> 00:01:52,290
to do have your templating system do it

48
00:01:49,079 --> 00:01:54,029
for you<font color="#CCCCCC"> and this has been this is</font>

49
00:01:52,290 --> 00:01:56,310
proving to be<font color="#CCCCCC"> very difficult for</font><font color="#E5E5E5"> the</font>

50
00:01:54,030 --> 00:01:59,009
industry and in our case<font color="#CCCCCC"> we work in</font>

51
00:01:56,310 --> 00:02:01,110
Google<font color="#CCCCCC"> and we also have had troubles</font><font color="#E5E5E5"> the</font>

52
00:01:59,009 --> 00:02:02,969
this is an<font color="#E5E5E5"> this is a graph representing</font>

53
00:02:01,110 --> 00:02:04,350
<font color="#E5E5E5">the amount of money with paid as part</font><font color="#CCCCCC"> of</font>

54
00:02:02,969 --> 00:02:06,719
the Google vulnerability reward program

55
00:02:04,350 --> 00:02:09,239
and it represents how<font color="#E5E5E5"> much we paid for</font>

56
00:02:06,719 --> 00:02:11,068
XSS and for<font color="#E5E5E5"> everything else combined and</font>

57
00:02:09,239 --> 00:02:13,620
as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see the</font><font color="#E5E5E5"> vast majority of box</font>

58
00:02:11,068 --> 00:02:18,149
<font color="#E5E5E5">is his XSS like 2/3</font>

59
00:02:13,620 --> 00:02:19,950
or so so fixing<font color="#CCCCCC"> it says discard or at</font>

60
00:02:18,150 --> 00:02:21,269
least has been<font color="#E5E5E5"> hard for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> so let's stay</font>

61
00:02:19,950 --> 00:02:22,530
focused<font color="#CCCCCC"> on mitigating the</font><font color="#E5E5E5"> tax so</font><font color="#CCCCCC"> that</font>

62
00:02:21,269 --> 00:02:24,659
what that<font color="#E5E5E5"> means is that there there are</font>

63
00:02:22,530 --> 00:02:26,430
mitigations<font color="#CCCCCC"> and that's what we're</font><font color="#E5E5E5"> going</font>

64
00:02:24,659 --> 00:02:28,950
to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about in this presentation but</font>

65
00:02:26,430 --> 00:02:30,629
rather than fixing the<font color="#E5E5E5"> book try to</font>

66
00:02:28,950 --> 00:02:33,238
mitigate<font color="#CCCCCC"> it or try to make the attack</font>

67
00:02:30,629 --> 00:02:35,489
harder or impossible in<font color="#E5E5E5"> some cases this</font>

68
00:02:33,239 --> 00:02:37,500
<font color="#CCCCCC">is very common for binary bucks where</font>

69
00:02:35,489 --> 00:02:39,030
you have a<font color="#E5E5E5"> SLR and</font><font color="#CCCCCC"> Depp and etc</font><font color="#E5E5E5"> and from</font>

70
00:02:37,500 --> 00:02:40,590
<font color="#E5E5E5">the web we</font><font color="#CCCCCC"> have other mitigations</font><font color="#E5E5E5"> like</font>

71
00:02:39,030 --> 00:02:43,019
<font color="#E5E5E5">CSP</font><font color="#CCCCCC"> exist as filters</font><font color="#E5E5E5"> while halves</font>

72
00:02:40,590 --> 00:02:44,129
etcetera so one important thing<font color="#CCCCCC"> that we</font>

73
00:02:43,019 --> 00:02:45,870
want<font color="#E5E5E5"> to make sure it's clear is that</font>

74
00:02:44,129 --> 00:02:48,720
these mitigations do not fix<font color="#E5E5E5"> the bug</font>

75
00:02:45,870 --> 00:02:50,310
they<font color="#E5E5E5"> leave the lack</font><font color="#CCCCCC"> of escaping</font><font color="#E5E5E5"> there</font>

76
00:02:48,720 --> 00:02:52,379
<font color="#E5E5E5">but they make the attack either</font>

77
00:02:50,310 --> 00:02:56,400
<font color="#E5E5E5">impossible or really really difficult</font><font color="#CCCCCC"> or</font>

78
00:02:52,379 --> 00:02:57,629
that's<font color="#E5E5E5"> what they attempt so in the</font>

79
00:02:56,400 --> 00:02:59,579
context<font color="#E5E5E5"> of this presentation we're not</font>

80
00:02:57,629 --> 00:03:01,470
going to<font color="#E5E5E5"> teach you how</font><font color="#CCCCCC"> to find XSS we</font>

81
00:02:59,579 --> 00:03:04,709
assume<font color="#CCCCCC"> that they are everywhere</font><font color="#E5E5E5"> and easy</font>

82
00:03:01,470 --> 00:03:07,650
to find as we have an obscene in our

83
00:03:04,709 --> 00:03:08,909
past decade or<font color="#E5E5E5"> so</font><font color="#CCCCCC"> so we want to bypass</font>

84
00:03:07,650 --> 00:03:11,220
the mitigations that<font color="#E5E5E5"> make the</font>

85
00:03:08,909 --> 00:03:12,780
exploitation of those works harder<font color="#E5E5E5"> so</font>

86
00:03:11,220 --> 00:03:14,370
<font color="#E5E5E5">during this presentation you</font><font color="#CCCCCC"> should</font>

87
00:03:12,780 --> 00:03:16,170
assume<font color="#E5E5E5"> that you have an XSS and you are</font>

88
00:03:14,370 --> 00:03:19,139
<font color="#E5E5E5">stopped</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the XSS filter or by</font>

89
00:03:16,170 --> 00:03:20,940
something<font color="#E5E5E5"> else in the middle you want to</font>

90
00:03:19,139 --> 00:03:22,230
bypass<font color="#CCCCCC"> it to show a better park or - I</font>

91
00:03:20,940 --> 00:03:25,919
don't<font color="#CCCCCC"> know steal some cookies or</font>

92
00:03:22,230 --> 00:03:27,988
<font color="#CCCCCC">something so all these mitigations work</font>

93
00:03:25,919 --> 00:03:30,450
very similarly<font color="#CCCCCC"> they all look at the near</font>

94
00:03:27,989 --> 00:03:33,180
stack or attributes like Watson<font color="#CCCCCC"> access</font>

95
00:03:30,450 --> 00:03:36,950
filters blob<font color="#CCCCCC"> to request HTML sanitizers</font>

96
00:03:33,180 --> 00:03:38,220
<font color="#E5E5E5">clean them up from from HTML and CSS</font>

97
00:03:36,950 --> 00:03:39,690
acute it

98
00:03:38,220 --> 00:03:41,579
they look if it's something that<font color="#CCCCCC"> is</font>

99
00:03:39,690 --> 00:03:44,430
trusted<font color="#E5E5E5"> in some way like whether they</font>

100
00:03:41,579 --> 00:03:46,199
have a hash that<font color="#CCCCCC"> is trusted</font><font color="#E5E5E5"> or comes</font>

101
00:03:44,430 --> 00:03:48,209
<font color="#E5E5E5">from a</font><font color="#CCCCCC"> legitimate place or they have a</font>

102
00:03:46,199 --> 00:03:52,530
secret nuns or they were injected

103
00:03:48,209 --> 00:03:54,209
dynamically correctly etc and so this is

104
00:03:52,530 --> 00:03:55,349
an example of<font color="#E5E5E5"> just to give you a brief</font>

105
00:03:54,209 --> 00:03:56,910
introduction<font color="#CCCCCC"> about how they</font><font color="#E5E5E5"> are</font>

106
00:03:55,349 --> 00:03:58,440
different<font color="#CCCCCC"> and how they are</font><font color="#E5E5E5"> the same so</font>

107
00:03:56,910 --> 00:03:59,430
it's<font color="#CCCCCC"> a website</font><font color="#E5E5E5"> you go to the happy cloud</font>

108
00:03:58,440 --> 00:04:03,419
they have a cloud<font color="#E5E5E5"> responds with an</font>

109
00:03:59,430 --> 00:04:06,690
exercise so if you have<font color="#CCCCCC"> mod</font><font color="#E5E5E5"> security or</font>

110
00:04:03,419 --> 00:04:09,329
<font color="#CCCCCC">replication for well then it stops it at</font>

111
00:04:06,690 --> 00:04:11,879
the<font color="#E5E5E5"> request level in the cloud then if</font>

112
00:04:09,329 --> 00:04:13,530
you have no script and in<font color="#E5E5E5"> Firefox then</font>

113
00:04:11,879 --> 00:04:16,108
<font color="#E5E5E5">what happens is that it gets blocked</font>

114
00:04:13,530 --> 00:04:17,430
before<font color="#E5E5E5"> the request is made so no script</font>

115
00:04:16,108 --> 00:04:20,969
the<font color="#E5E5E5"> tag that</font><font color="#CCCCCC"> this looks</font><font color="#E5E5E5"> like an excess</font>

116
00:04:17,430 --> 00:04:22,650
<font color="#E5E5E5">and then it stops it then</font><font color="#CCCCCC"> Chrome and</font>

117
00:04:20,970 --> 00:04:23,760
Internet Explorer<font color="#E5E5E5"> work differently they</font>

118
00:04:22,650 --> 00:04:25,140
see the request<font color="#E5E5E5"> and they see the</font>

119
00:04:23,760 --> 00:04:26,580
response and then they block the<font color="#E5E5E5"> attack</font>

120
00:04:25,140 --> 00:04:28,349
<font color="#CCCCCC">if the response</font>

121
00:04:26,580 --> 00:04:31,258
<font color="#E5E5E5">is in the request and it looks like an</font>

122
00:04:28,349 --> 00:04:32,789
attack<font color="#E5E5E5"> and</font><font color="#CCCCCC"> finally CSP ignores the</font>

123
00:04:31,259 --> 00:04:36,750
<font color="#CCCCCC">requests</font><font color="#E5E5E5"> row and then</font><font color="#CCCCCC"> you see is like</font>

124
00:04:32,789 --> 00:04:38,628
<font color="#CCCCCC">easy success</font><font color="#E5E5E5"> s is this payload good or</font>

125
00:04:36,750 --> 00:04:39,840
not<font color="#CCCCCC"> and if it's</font><font color="#E5E5E5"> not then it</font><font color="#CCCCCC"> blocks it</font>

126
00:04:38,629 --> 00:04:42,240
<font color="#CCCCCC">alright</font>

127
00:04:39,840 --> 00:04:44,008
so without introduction<font color="#E5E5E5"> to mitigations</font>

128
00:04:42,240 --> 00:04:45,210
and what is a sucess then we are going

129
00:04:44,009 --> 00:04:46,800
<font color="#E5E5E5">to talk to you about what</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> script</font>

130
00:04:45,210 --> 00:04:49,349
gadgets<font color="#E5E5E5"> so we're going to give you</font><font color="#CCCCCC"> a</font>

131
00:04:46,800 --> 00:04:52,229
<font color="#E5E5E5">very simple example of what is the</font>

132
00:04:49,349 --> 00:04:55,378
<font color="#E5E5E5">simplest most obvious most the lamest</font>

133
00:04:52,229 --> 00:04:58,378
<font color="#E5E5E5">like script budget that we have right so</font>

134
00:04:55,379 --> 00:05:03,800
we have a script<font color="#E5E5E5"> budget in this case</font>

135
00:04:58,379 --> 00:05:06,210
will be<font color="#CCCCCC"> the following so you have HTML</font>

136
00:05:03,800 --> 00:05:08,759
snippet<font color="#CCCCCC"> that doesn't do anything</font>

137
00:05:06,210 --> 00:05:11,159
ideas that has deep<font color="#E5E5E5"> that has a couple</font>

138
00:05:08,759 --> 00:05:13,020
attributes<font color="#E5E5E5"> and</font><font color="#CCCCCC"> has i'ma button and then</font>

139
00:05:11,159 --> 00:05:16,259
there is some script<font color="#E5E5E5"> somewhere in the</font>

140
00:05:13,020 --> 00:05:17,940
page<font color="#E5E5E5"> that activates that that HTML and</font>

141
00:05:16,259 --> 00:05:19,949
does something<font color="#E5E5E5"> else with</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> maybe it</font>

142
00:05:17,940 --> 00:05:23,099
wants to have some pretty CSS or

143
00:05:19,949 --> 00:05:25,560
something like<font color="#E5E5E5"> that and it</font><font color="#CCCCCC"> just adds it</font>

144
00:05:23,099 --> 00:05:29,009
somewhere<font color="#E5E5E5"> else</font><font color="#CCCCCC"> so in this</font><font color="#E5E5E5"> case then it</font>

145
00:05:25,560 --> 00:05:30,599
takes<font color="#E5E5E5"> the HTML</font><font color="#CCCCCC"> of that attribute and it</font>

146
00:05:29,009 --> 00:05:34,289
detects about the Continental attribute

147
00:05:30,599 --> 00:05:37,710
and<font color="#E5E5E5"> put it as HTML so in this case then</font>

148
00:05:34,289 --> 00:05:39,719
what if you<font color="#E5E5E5"> have a mitigation this is</font>

149
00:05:37,710 --> 00:05:42,810
what will<font color="#CCCCCC"> happen</font><font color="#E5E5E5"> so you have instead of</font>

150
00:05:39,719 --> 00:05:44,159
<font color="#CCCCCC">injecting that</font><font color="#E5E5E5"> you inject</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> deep that</font>

151
00:05:42,810 --> 00:05:46,830
just has a script<font color="#E5E5E5"> tag in the a data</font>

152
00:05:44,159 --> 00:05:48,449
<font color="#E5E5E5">attribute and the sanitizer will just</font>

153
00:05:46,830 --> 00:05:49,289
allow it<font color="#E5E5E5"> because of course like there's</font>

154
00:05:48,449 --> 00:05:51,060
nothing<font color="#E5E5E5"> wrong</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> that</font>

155
00:05:49,289 --> 00:05:53,490
but because there is a<font color="#CCCCCC"> snippet</font><font color="#E5E5E5"> of code</font>

156
00:05:51,060 --> 00:05:54,539
that<font color="#E5E5E5"> activates it and that executes it</font>

157
00:05:53,490 --> 00:05:59,370
and then you<font color="#E5E5E5"> just have a normal</font>

158
00:05:54,539 --> 00:06:01,080
<font color="#CCCCCC">traditional script exercise</font><font color="#E5E5E5"> so yes so</font>

159
00:05:59,370 --> 00:06:04,139
summarize very quickly<font color="#E5E5E5"> what</font><font color="#CCCCCC"> happens is</font>

160
00:06:01,080 --> 00:06:06,120
<font color="#CCCCCC">that they convert</font><font color="#E5E5E5"> the otherwise say</font>

161
00:06:04,139 --> 00:06:08,159
attribute into<font color="#E5E5E5"> something active and</font>

162
00:06:06,120 --> 00:06:09,719
instead of injecting<font color="#E5E5E5"> script which will</font>

163
00:06:08,159 --> 00:06:11,270
<font color="#E5E5E5">be</font><font color="#CCCCCC"> detected by all these mitigations</font>

164
00:06:09,719 --> 00:06:13,889
then you just inject something<font color="#E5E5E5"> else and</font>

165
00:06:11,270 --> 00:06:15,690
these<font color="#E5E5E5"> are passive says that look for for</font>

166
00:06:13,889 --> 00:06:18,060
this<font color="#E5E5E5"> and then what we want to do now</font><font color="#CCCCCC"> is</font>

167
00:06:15,690 --> 00:06:19,770
to try<font color="#E5E5E5"> to figure</font><font color="#CCCCCC"> out how prevalent DC</font>

168
00:06:18,060 --> 00:06:21,479
snippets of code are like maybe they

169
00:06:19,770 --> 00:06:25,770
never happen maybe they happen sometimes

170
00:06:21,479 --> 00:06:28,430
<font color="#CCCCCC">so as a preview of</font><font color="#E5E5E5"> what we're going to</font>

171
00:06:25,770 --> 00:06:30,900
<font color="#E5E5E5">present later today</font><font color="#CCCCCC"> or later</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> now</font>

172
00:06:28,430 --> 00:06:32,279
Gradius<font color="#E5E5E5"> present are present in all</font><font color="#CCCCCC"> but</font>

173
00:06:30,900 --> 00:06:33,479
<font color="#E5E5E5">one of</font><font color="#CCCCCC"> the tested popular web framework</font>

174
00:06:32,279 --> 00:06:35,069
so you use one<font color="#CCCCCC"> of the popular web</font>

175
00:06:33,479 --> 00:06:37,560
frameworks they are in all<font color="#CCCCCC"> of them</font>

176
00:06:35,069 --> 00:06:40,290
except react<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this can be used to</font>

177
00:06:37,560 --> 00:06:42,000
<font color="#E5E5E5">bypass most mitigations</font><font color="#CCCCCC"> so we bypassed</font>

178
00:06:40,290 --> 00:06:44,640
while the mitigations<font color="#CCCCCC"> in</font><font color="#E5E5E5"> several</font>

179
00:06:42,000 --> 00:06:46,110
leadership<font color="#E5E5E5"> some mitigations are by</font>

180
00:06:44,640 --> 00:06:48,810
<font color="#E5E5E5">passable in some framework some</font><font color="#CCCCCC"> aren't</font>

181
00:06:46,110 --> 00:06:50,190
<font color="#E5E5E5">so all of indications were bypassed all</font>

182
00:06:48,810 --> 00:06:52,950
of the frameworks<font color="#E5E5E5"> except one was</font>

183
00:06:50,190 --> 00:06:55,230
bypassed<font color="#E5E5E5"> and we also created exploits</font>

184
00:06:52,950 --> 00:06:56,340
for websites on the internet so for code

185
00:06:55,230 --> 00:06:58,440
that is<font color="#E5E5E5"> not in frameworks or libraries</font>

186
00:06:56,340 --> 00:07:01,320
<font color="#CCCCCC">both</font><font color="#E5E5E5"> custom-made we were able</font><font color="#CCCCCC"> to</font>

187
00:06:58,440 --> 00:07:03,510
automatically find<font color="#E5E5E5"> and generate an expla</font>

188
00:07:01,320 --> 00:07:05,640
for 20% of<font color="#E5E5E5"> websites in</font><font color="#CCCCCC"> Alexa top 5,000</font>

189
00:07:03,510 --> 00:07:09,240
there<font color="#E5E5E5"> is a lower bound</font><font color="#CCCCCC"> we think</font><font color="#E5E5E5"> that the</font>

190
00:07:05,640 --> 00:07:10,800
actual<font color="#CCCCCC"> number is</font><font color="#E5E5E5"> way higher okay so with</font>

191
00:07:09,240 --> 00:07:12,600
that<font color="#CCCCCC"> Cotto is not going to talk to you</font>

192
00:07:10,800 --> 00:07:13,760
about the<font color="#CCCCCC"> userland stuff</font><font color="#E5E5E5"> not the other</font>

193
00:07:12,600 --> 00:07:17,160
ones<font color="#CCCCCC"> though</font>

194
00:07:13,760 --> 00:07:19,110
thank you<font color="#CCCCCC"> that</font><font color="#E5E5E5"> order so script gadgets</font>

195
00:07:17,160 --> 00:07:21,780
in<font color="#E5E5E5"> J's libraries we you already know</font>

196
00:07:19,110 --> 00:07:24,140
what<font color="#CCCCCC"> script gadgets are those existing</font>

197
00:07:21,780 --> 00:07:27,869
snippets of code in the<font color="#CCCCCC"> web site that</font>

198
00:07:24,140 --> 00:07:30,330
sort of upgrades<font color="#E5E5E5"> the HTML that's present</font>

199
00:07:27,870 --> 00:07:32,040
and looks<font color="#E5E5E5"> benign to XSS mitigations into</font>

200
00:07:30,330 --> 00:07:36,330
something that will execute code right

201
00:07:32,040 --> 00:07:39,300
<font color="#E5E5E5">and when we encountered this problem</font><font color="#CCCCCC"> we</font>

202
00:07:36,330 --> 00:07:41,340
started thinking is this<font color="#E5E5E5"> thing prevalent</font>

203
00:07:39,300 --> 00:07:42,930
<font color="#E5E5E5">like our gadgets common are those</font>

204
00:07:41,340 --> 00:07:45,299
snippets existing in most of the

205
00:07:42,930 --> 00:07:46,740
<font color="#E5E5E5">websites most of the frameworks or is it</font>

206
00:07:45,300 --> 00:07:49,340
something<font color="#E5E5E5"> really exotic that's not</font>

207
00:07:46,740 --> 00:07:55,920
really with<font color="#E5E5E5"> no practical use</font><font color="#CCCCCC"> for the</font>

208
00:07:49,340 --> 00:07:59,280
<font color="#CCCCCC">articles</font><font color="#E5E5E5"> and second of all given that we</font>

209
00:07:55,920 --> 00:08:01,380
find a<font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of gadgets or lots of them</font>

210
00:07:59,280 --> 00:08:04,440
<font color="#E5E5E5">how effective they are in actually</font>

211
00:08:01,380 --> 00:08:07,110
bypassing the<font color="#E5E5E5"> XSS mitigations because</font>

212
00:08:04,440 --> 00:08:10,500
that differs for for<font color="#E5E5E5"> every class of</font>

213
00:08:07,110 --> 00:08:13,560
<font color="#E5E5E5">mitigation so we started from those two</font>

214
00:08:10,500 --> 00:08:15,660
questions<font color="#CCCCCC"> and first we started looking</font>

215
00:08:13,560 --> 00:08:18,810
at<font color="#CCCCCC"> JavaScript libraries and started</font>

216
00:08:15,660 --> 00:08:21,800
looking<font color="#CCCCCC"> for gadgets</font><font color="#E5E5E5"> in this code base</font><font color="#CCCCCC"> so</font>

217
00:08:18,810 --> 00:08:24,960
we took<font color="#CCCCCC"> 16</font><font color="#E5E5E5"> popular web frameworks or</font>

218
00:08:21,800 --> 00:08:27,150
JavaScript libraries we<font color="#CCCCCC"> included</font>

219
00:08:24,960 --> 00:08:31,560
angularjs we included polymer included

220
00:08:27,150 --> 00:08:35,159
reacts<font color="#CCCCCC"> jquery</font><font color="#E5E5E5"> knockout backbone all that</font>

221
00:08:31,560 --> 00:08:38,039
we considered<font color="#E5E5E5"> popular and modern was on</font>

222
00:08:35,159 --> 00:08:39,719
<font color="#E5E5E5">that list then we started just simply</font>

223
00:08:38,039 --> 00:08:42,120
manually looking at the code of those

224
00:08:39,720 --> 00:08:44,640
<font color="#E5E5E5">libraries in order</font><font color="#CCCCCC"> to find script</font>

225
00:08:42,120 --> 00:08:49,260
gadgets<font color="#E5E5E5"> so for every library in this</font>

226
00:08:44,640 --> 00:08:51,960
list we were trying<font color="#E5E5E5"> to bypass every of</font>

227
00:08:49,260 --> 00:08:53,850
the mitigations tested so we took a

228
00:08:51,960 --> 00:08:56,399
couple<font color="#E5E5E5"> of exercise filters</font>

229
00:08:53,850 --> 00:08:58,139
we took a<font color="#E5E5E5"> couple of sanitizers</font><font color="#CCCCCC"> we took</font>

230
00:08:56,399 --> 00:09:00,300
<font color="#E5E5E5">only one</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> of Web Application</font>

231
00:08:58,139 --> 00:09:02,940
Firewall<font color="#CCCCCC"> do a spot security with the</font>

232
00:09:00,300 --> 00:09:05,430
<font color="#CCCCCC">charoset and we took</font><font color="#E5E5E5"> several variants of</font>

233
00:09:02,940 --> 00:09:09,930
content security policy<font color="#E5E5E5"> so we had like a</font>

234
00:09:05,430 --> 00:09:12,660
matrix<font color="#CCCCCC"> of libraries and mitigations and</font>

235
00:09:09,930 --> 00:09:19,339
we tried<font color="#CCCCCC"> to come up with a bypass</font>

236
00:09:12,660 --> 00:09:19,339
example for each cell in this<font color="#CCCCCC"> matrix so</font>

237
00:09:19,519 --> 00:09:26,100
in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> describe this</font><font color="#E5E5E5"> it's it's best</font>

238
00:09:22,440 --> 00:09:29,069
to start by<font color="#CCCCCC"> looking at the gadgets by</font>

239
00:09:26,100 --> 00:09:30,600
the mitigations<font color="#E5E5E5"> very target so first</font>

240
00:09:29,069 --> 00:09:32,880
let's talk about<font color="#E5E5E5"> web application</font>

241
00:09:30,600 --> 00:09:35,940
firewalls and<font color="#E5E5E5"> the XSS filters they</font>

242
00:09:32,880 --> 00:09:38,250
detect<font color="#E5E5E5"> XSS attempts by looking at the</font>

243
00:09:35,940 --> 00:09:40,170
request parameters<font color="#E5E5E5"> sometimes using</font>

244
00:09:38,250 --> 00:09:42,480
regular expressions<font color="#E5E5E5"> sometimes using a</font>

245
00:09:40,170 --> 00:09:44,729
more elaborate logic<font color="#E5E5E5"> but essentially</font>

246
00:09:42,480 --> 00:09:47,819
that's what they target the request

247
00:09:44,730 --> 00:09:52,139
parameters and with we thought initially

248
00:09:47,819 --> 00:09:54,180
that<font color="#CCCCCC"> gadgets</font><font color="#E5E5E5"> if they existed and if they</font>

249
00:09:52,139 --> 00:09:56,009
were prevalent<font color="#E5E5E5"> they would be really</font>

250
00:09:54,180 --> 00:09:58,949
<font color="#CCCCCC">successful in bypassing this kind of</font>

251
00:09:56,009 --> 00:10:02,970
<font color="#E5E5E5">access mitigation solely because how</font>

252
00:09:58,949 --> 00:10:04,709
gadgets work<font color="#E5E5E5"> most of them they allow for</font>

253
00:10:02,970 --> 00:10:07,230
<font color="#E5E5E5">encoding their payload in a different</font>

254
00:10:04,709 --> 00:10:09,989
context<font color="#E5E5E5"> you will see an</font><font color="#CCCCCC"> example later</font><font color="#E5E5E5"> on</font>

255
00:10:07,230 --> 00:10:14,880
<font color="#E5E5E5">some gadgets also</font><font color="#CCCCCC"> pasta called to eval</font>

256
00:10:09,990 --> 00:10:17,040
<font color="#E5E5E5">and usually we don't have to include the</font>

257
00:10:14,880 --> 00:10:19,439
eval<font color="#CCCCCC"> function in the payload in the HTML</font>

258
00:10:17,040 --> 00:10:23,069
snippet that<font color="#E5E5E5"> we try to inject into the</font>

259
00:10:19,439 --> 00:10:26,069
<font color="#E5E5E5">website so this gets this would be</font>

260
00:10:23,069 --> 00:10:28,259
detected by by web application firewalls

261
00:10:26,069 --> 00:10:31,410
pretty easily<font color="#E5E5E5"> but since we don't do not</font>

262
00:10:28,259 --> 00:10:36,180
need to inject the<font color="#E5E5E5"> evil the literal</font><font color="#CCCCCC"> eval</font>

263
00:10:31,410 --> 00:10:38,100
function<font color="#E5E5E5"> then it would allow us to</font>

264
00:10:36,180 --> 00:10:40,819
bypass<font color="#E5E5E5"> those mitigation</font><font color="#CCCCCC"> C to be</font>

265
00:10:38,100 --> 00:10:44,490
transparent to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> to the mitigation and</font>

266
00:10:40,819 --> 00:10:46,560
finally most of the gadgets do not

267
00:10:44,490 --> 00:10:49,079
require<font color="#E5E5E5"> us</font><font color="#CCCCCC"> to inject any script tags</font><font color="#E5E5E5"> any</font>

268
00:10:46,560 --> 00:10:51,719
other on<font color="#E5E5E5"> inline event handlers so</font>

269
00:10:49,079 --> 00:10:54,630
something that<font color="#E5E5E5"> is very obvious as an XSS</font>

270
00:10:51,720 --> 00:10:58,170
a<font color="#E5E5E5"> tackle attempt so let's look at an</font>

271
00:10:54,630 --> 00:11:01,170
example<font color="#CCCCCC"> verse was a knock out</font><font color="#E5E5E5"> JavaScript</font>

272
00:10:58,170 --> 00:11:02,569
library<font color="#E5E5E5"> and this one has like a small</font>

273
00:11:01,170 --> 00:11:05,360
templating language

274
00:11:02,570 --> 00:11:09,140
inside of<font color="#CCCCCC"> it</font><font color="#E5E5E5"> so this HTML snippet</font>

275
00:11:05,360 --> 00:11:15,200
<font color="#E5E5E5">actually tells the knockout to look for</font>

276
00:11:09,140 --> 00:11:17,569
<font color="#E5E5E5">to inject hello world as a string into</font>

277
00:11:15,200 --> 00:11:19,970
<font color="#CCCCCC">the into the content</font><font color="#E5E5E5"> of the of this</font>

278
00:11:17,570 --> 00:11:23,030
development<font color="#CCCCCC"> right</font><font color="#E5E5E5"> using some custom</font>

279
00:11:19,970 --> 00:11:25,160
<font color="#CCCCCC">language for novelty</font><font color="#E5E5E5"> in specific what it</font>

280
00:11:23,030 --> 00:11:28,280
<font color="#CCCCCC">would</font><font color="#E5E5E5"> what this snippet triggers in</font>

281
00:11:25,160 --> 00:11:31,939
knockout<font color="#E5E5E5"> is several gadgets first gadget</font>

282
00:11:28,280 --> 00:11:34,850
is<font color="#E5E5E5"> a very fairly simple one it just gets</font>

283
00:11:31,940 --> 00:11:37,400
the content of the data bind<font color="#E5E5E5"> attribute</font>

284
00:11:34,850 --> 00:11:40,550
and assigns it some variable in the

285
00:11:37,400 --> 00:11:44,270
application<font color="#E5E5E5"> later on a knockout creates</font>

286
00:11:40,550 --> 00:11:47,390
a<font color="#E5E5E5"> function</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> JavaScript function in the</font>

287
00:11:44,270 --> 00:11:51,530
<font color="#E5E5E5">body</font><font color="#CCCCCC"> of that function there is the hello</font>

288
00:11:47,390 --> 00:11:54,199
world<font color="#E5E5E5"> expression so literally there is</font><font color="#CCCCCC"> a</font>

289
00:11:51,530 --> 00:11:56,209
new function created by knockout<font color="#CCCCCC"> that</font>

290
00:11:54,200 --> 00:11:58,160
will contain something<font color="#E5E5E5"> originally</font>

291
00:11:56,210 --> 00:12:01,610
<font color="#CCCCCC">present in the HTML code that we I</font>

292
00:11:58,160 --> 00:12:04,069
<font color="#E5E5E5">assume injected through some injection</font>

293
00:12:01,610 --> 00:12:06,890
<font color="#E5E5E5">flow and finally the last cutter that we</font>

294
00:12:04,070 --> 00:12:08,890
need to complete<font color="#CCCCCC"> the chain is no code</font>

295
00:12:06,890 --> 00:12:10,880
will execute<font color="#E5E5E5"> that newly created function</font>

296
00:12:08,890 --> 00:12:13,910
so<font color="#E5E5E5"> that's all we need</font><font color="#CCCCCC"> to actually</font>

297
00:12:10,880 --> 00:12:15,950
construct<font color="#E5E5E5"> an attack that</font><font color="#CCCCCC"> would bypass</font>

298
00:12:13,910 --> 00:12:16,490
<font color="#E5E5E5">the excesses filters and web application</font>

299
00:12:15,950 --> 00:12:19,460
firewalls

300
00:12:16,490 --> 00:12:22,310
so to summarize there is a gadget<font color="#E5E5E5"> in</font>

301
00:12:19,460 --> 00:12:25,130
knockout that<font color="#CCCCCC"> upgrades the value of the</font>

302
00:12:22,310 --> 00:12:27,560
data<font color="#E5E5E5"> bind attribute into an eval call</font>

303
00:12:25,130 --> 00:12:30,740
the function constructor is essentially

304
00:12:27,560 --> 00:12:33,050
an<font color="#CCCCCC"> eval equivalent in JavaScript so in</font>

305
00:12:30,740 --> 00:12:35,480
<font color="#E5E5E5">order to access a website that happens</font>

306
00:12:33,050 --> 00:12:37,939
to use the knockout library and also on

307
00:12:35,480 --> 00:12:39,650
top<font color="#CCCCCC"> of that uses an XSS filter on a</font><font color="#E5E5E5"> web</font>

308
00:12:37,940 --> 00:12:41,480
<font color="#E5E5E5">application firewall</font><font color="#CCCCCC"> instead of</font>

309
00:12:39,650 --> 00:12:44,060
injecting<font color="#E5E5E5"> script or</font><font color="#CCCCCC"> either no image</font>

310
00:12:41,480 --> 00:12:47,060
source equals<font color="#CCCCCC"> exon error equals your</font>

311
00:12:44,060 --> 00:12:51,020
payload it's enough if you just<font color="#E5E5E5"> injected</font>

312
00:12:47,060 --> 00:12:54,349
this<font color="#E5E5E5"> fairly innocent looking to the</font>

313
00:12:51,020 --> 00:12:55,819
mitigations<font color="#CCCCCC"> div element</font><font color="#E5E5E5"> but there are</font>

314
00:12:54,350 --> 00:13:00,520
way more examples of<font color="#E5E5E5"> this</font>

315
00:12:55,820 --> 00:13:03,850
so in<font color="#CCCCCC"> bootstrap</font><font color="#E5E5E5"> you can have tooltips so</font>

316
00:13:00,520 --> 00:13:06,980
<font color="#E5E5E5">bootstrap is a UI component library and</font>

317
00:13:03,850 --> 00:13:09,080
most of the components<font color="#E5E5E5"> can also be</font>

318
00:13:06,980 --> 00:13:10,880
accompanied<font color="#CCCCCC"> by a tooltip so if you mouse</font>

319
00:13:09,080 --> 00:13:12,800
over<font color="#E5E5E5"> certain elements there would be</font>

320
00:13:10,880 --> 00:13:15,850
some new content<font color="#E5E5E5"> displayed fortunately</font>

321
00:13:12,800 --> 00:13:18,310
<font color="#CCCCCC">for us this content</font><font color="#E5E5E5"> can also be</font><font color="#CCCCCC"> HTML</font>

322
00:13:15,850 --> 00:13:21,130
<font color="#E5E5E5">but it's being taken from the title</font>

323
00:13:18,310 --> 00:13:23,529
<font color="#CCCCCC">attribute so we can</font><font color="#E5E5E5"> just encode it</font>

324
00:13:21,130 --> 00:13:27,550
correctly according<font color="#CCCCCC"> to say HTML</font>

325
00:13:23,529 --> 00:13:31,600
specification<font color="#E5E5E5"> correctly</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> attribute</font>

326
00:13:27,550 --> 00:13:35,589
value context and this script this

327
00:13:31,600 --> 00:13:38,380
script payload is completely transparent

328
00:13:35,589 --> 00:13:40,300
to<font color="#E5E5E5"> the XSS mitigations</font><font color="#CCCCCC"> and we were able</font>

329
00:13:38,380 --> 00:13:41,980
through<font color="#E5E5E5"> the through that we are able to</font>

330
00:13:40,300 --> 00:13:45,609
leverage bootstrap into activating<font color="#CCCCCC"> our</font>

331
00:13:41,980 --> 00:13:47,860
payload for us or a similar example<font color="#E5E5E5"> in</font>

332
00:13:45,610 --> 00:13:48,850
<font color="#E5E5E5">dojo toolkit it's also some kind of UI</font>

333
00:13:47,860 --> 00:13:53,079
component library

334
00:13:48,850 --> 00:13:54,100
so what dojo does it just takes the

335
00:13:53,079 --> 00:13:57,310
<font color="#E5E5E5">value of the data</font>

336
00:13:54,100 --> 00:13:59,110
dojo props<font color="#E5E5E5"> attribute</font><font color="#CCCCCC"> concatenated with</font>

337
00:13:57,310 --> 00:14:01,959
<font color="#E5E5E5">some strings and then passes its</font><font color="#CCCCCC"> bus</font>

338
00:13:59,110 --> 00:14:03,490
passes it<font color="#E5E5E5"> to the eval</font><font color="#CCCCCC"> function which is</font>

339
00:14:01,959 --> 00:14:05,138
everything<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we need</font><font color="#CCCCCC"> in order to</font>

340
00:14:03,490 --> 00:14:07,509
<font color="#CCCCCC">bypass</font><font color="#E5E5E5"> the web application firewalls and</font>

341
00:14:05,139 --> 00:14:11,529
accesses filters because<font color="#E5E5E5"> for the XSS</font>

342
00:14:07,509 --> 00:14:13,420
filter<font color="#CCCCCC"> I don't actually see the</font>

343
00:14:11,529 --> 00:14:18,040
<font color="#CCCCCC">JavaScript code right if I would be an</font>

344
00:14:13,420 --> 00:14:19,599
XSS filter thankfully I'm not okay just

345
00:14:18,040 --> 00:14:23,500
some briefly summarize this this section

346
00:14:19,600 --> 00:14:24,910
is what we found out is most of the

347
00:14:23,500 --> 00:14:27,279
<font color="#CCCCCC">framers</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> contain gadgets like</font>

348
00:14:24,910 --> 00:14:29,949
<font color="#E5E5E5">that that are successful in bypassing</font>

349
00:14:27,279 --> 00:14:31,959
<font color="#E5E5E5">web application firewalls</font><font color="#CCCCCC"> as exemplified</font>

350
00:14:29,949 --> 00:14:33,910
by the<font color="#CCCCCC"> modsecurity caroule set and the</font>

351
00:14:31,959 --> 00:14:36,910
XSS filters<font color="#CCCCCC"> built-in</font><font color="#E5E5E5"> into the browsers</font>

352
00:14:33,910 --> 00:14:39,699
so for<font color="#E5E5E5"> example in we were able to bypass</font>

353
00:14:36,910 --> 00:14:42,579
<font color="#CCCCCC">chrome access auditor in 13 out of 16</font>

354
00:14:39,699 --> 00:14:45,008
libraries that we tested<font color="#CCCCCC"> not</font><font color="#E5E5E5"> security we</font>

355
00:14:42,579 --> 00:14:49,269
were<font color="#CCCCCC"> able to bypass in 9 9</font><font color="#E5E5E5"> libraries and</font>

356
00:14:45,009 --> 00:14:49,930
so on and so forth<font color="#E5E5E5"> let's go to the to</font>

357
00:14:49,269 --> 00:14:53,410
the<font color="#E5E5E5"> next section</font>

358
00:14:49,930 --> 00:14:56,040
HTML sanitizers sometimes<font color="#E5E5E5"> web</font>

359
00:14:53,410 --> 00:14:58,839
applications<font color="#E5E5E5"> actually need to display</font>

360
00:14:56,040 --> 00:15:00,370
untrusted HTML content<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> from the</font>

361
00:14:58,839 --> 00:15:02,939
user<font color="#CCCCCC"> like let's say you have a web mail</font>

362
00:15:00,370 --> 00:15:07,180
<font color="#CCCCCC">application that's</font><font color="#E5E5E5"> a very common example</font>

363
00:15:02,939 --> 00:15:10,000
<font color="#E5E5E5">so what</font><font color="#CCCCCC"> that's where HTML sanitizers</font>

364
00:15:07,180 --> 00:15:12,160
come into place they take this untrusted

365
00:15:10,000 --> 00:15:13,810
content<font color="#E5E5E5"> try to filter out</font><font color="#CCCCCC"> everything</font>

366
00:15:12,160 --> 00:15:16,509
that<font color="#E5E5E5"> is bad that would contain</font>

367
00:15:13,810 --> 00:15:20,500
<font color="#E5E5E5">JavaScript and leave everything else</font>

368
00:15:16,509 --> 00:15:23,510
intact<font color="#E5E5E5"> so for example script elements</font>

369
00:15:20,500 --> 00:15:26,540
would<font color="#E5E5E5"> be removed on there and other</font>

370
00:15:23,510 --> 00:15:29,750
<font color="#E5E5E5">event handlers would be removed but I</font>

371
00:15:26,540 --> 00:15:33,139
know a peacock would be left<font color="#E5E5E5"> intact some</font>

372
00:15:29,750 --> 00:15:35,540
<font color="#CCCCCC">sanitizers often white list the data</font>

373
00:15:33,139 --> 00:15:38,089
attributes<font color="#E5E5E5"> this is a recently new</font>

374
00:15:35,540 --> 00:15:40,430
addition to the HTML specification<font color="#E5E5E5"> that</font>

375
00:15:38,089 --> 00:15:42,350
<font color="#E5E5E5">usually</font><font color="#CCCCCC"> contains well data</font><font color="#E5E5E5"> right so</font>

376
00:15:40,430 --> 00:15:47,029
<font color="#E5E5E5">that's not</font><font color="#CCCCCC"> code it shouldn't actually be</font>

377
00:15:42,350 --> 00:15:50,720
<font color="#E5E5E5">removed gadgets</font><font color="#CCCCCC"> we found are really</font>

378
00:15:47,029 --> 00:15:53,930
<font color="#E5E5E5">useful in bypassing HTML sanitizers for</font>

379
00:15:50,720 --> 00:15:56,930
two<font color="#E5E5E5"> reasons first</font><font color="#CCCCCC"> of all this JavaScript</font>

380
00:15:53,930 --> 00:15:58,910
code<font color="#CCCCCC"> that we want to execute can be</font>

381
00:15:56,930 --> 00:16:02,300
present in<font color="#E5E5E5"> in those benign attributes</font>

382
00:15:58,910 --> 00:16:06,170
like ID or title<font color="#E5E5E5"> or other attributes as</font>

383
00:16:02,300 --> 00:16:08,990
<font color="#E5E5E5">you will see soon</font><font color="#CCCCCC"> and the second reason</font>

384
00:16:06,170 --> 00:16:10,819
is that<font color="#E5E5E5"> the gadgets</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> often leverage</font>

385
00:16:08,990 --> 00:16:13,310
the data to<font color="#CCCCCC"> good value so you actually</font>

386
00:16:10,820 --> 00:16:16,820
<font color="#CCCCCC">put parts of the payload of parts of the</font>

387
00:16:13,310 --> 00:16:18,199
code<font color="#E5E5E5"> into data attributes and the</font>

388
00:16:16,820 --> 00:16:19,940
frameworks themselves do the heavy

389
00:16:18,199 --> 00:16:23,359
lifting into<font color="#CCCCCC"> upgrading it and</font><font color="#E5E5E5"> actually</font>

390
00:16:19,940 --> 00:16:26,600
executing<font color="#E5E5E5"> that payload transparent to</font>

391
00:16:23,360 --> 00:16:27,250
the HTML sanitizers so a<font color="#E5E5E5"> couple of</font>

392
00:16:26,600 --> 00:16:30,769
<font color="#E5E5E5">examples</font>

393
00:16:27,250 --> 00:16:33,350
ajaxify for some really weird reason

394
00:16:30,769 --> 00:16:36,170
decides that a div with<font color="#CCCCCC"> a class of</font>

395
00:16:33,350 --> 00:16:39,410
document script should actually be

396
00:16:36,170 --> 00:16:41,269
created as a script<font color="#E5E5E5"> and the text content</font>

397
00:16:39,410 --> 00:16:44,990
of this element will be<font color="#E5E5E5"> the body of the</font>

398
00:16:41,269 --> 00:16:46,699
newly created<font color="#E5E5E5"> and inserted script but</font>

399
00:16:44,990 --> 00:16:48,680
that's common<font color="#E5E5E5"> like such</font><font color="#CCCCCC"> buttons are very</font>

400
00:16:46,699 --> 00:16:51,380
<font color="#E5E5E5">common that this is why actually gadgets</font>

401
00:16:48,680 --> 00:16:54,888
are interesting<font color="#CCCCCC"> as as accesses by fast</font>

402
00:16:51,380 --> 00:16:57,410
mechanism and the same example<font color="#E5E5E5"> as before</font>

403
00:16:54,889 --> 00:17:00,069
<font color="#CCCCCC">write bootstrap</font><font color="#E5E5E5"> there it turns out that</font>

404
00:16:57,410 --> 00:17:02,899
the<font color="#E5E5E5"> very same vector also works</font>

405
00:17:00,069 --> 00:17:05,089
brilliantly for bypassing<font color="#E5E5E5"> HTML</font>

406
00:17:02,899 --> 00:17:07,369
sanitizers which exemplifies<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fact</font>

407
00:17:05,089 --> 00:17:09,049
that you<font color="#E5E5E5"> don't need</font><font color="#CCCCCC"> to find</font><font color="#E5E5E5"> a unique</font>

408
00:17:07,369 --> 00:17:10,969
gadget for every XSS mitigations

409
00:17:09,049 --> 00:17:16,339
sometimes a single gadgets<font color="#E5E5E5"> can bypass a</font>

410
00:17:10,970 --> 00:17:18,919
couple of them<font color="#E5E5E5"> unmodified to briefly</font>

411
00:17:16,339 --> 00:17:20,510
summarize this we were moderately

412
00:17:18,919 --> 00:17:22,309
<font color="#E5E5E5">successful in bypassing the HTML</font>

413
00:17:20,510 --> 00:17:27,140
scientist<font color="#E5E5E5"> with the gadgets</font><font color="#CCCCCC"> that we found</font>

414
00:17:22,309 --> 00:17:28,940
in<font color="#E5E5E5"> J's libraries</font><font color="#CCCCCC"> so yes for Dom purify</font>

415
00:17:27,140 --> 00:17:32,750
we were<font color="#CCCCCC"> able to bypass</font>

416
00:17:28,940 --> 00:17:34,640
bypass<font color="#E5E5E5"> dhtml scientist in nine</font>

417
00:17:32,750 --> 00:17:37,550
<font color="#CCCCCC">javascript libraries out of</font><font color="#E5E5E5"> sixteen</font>

418
00:17:34,640 --> 00:17:42,620
enclosure<font color="#E5E5E5"> HTML sanitizer it was only six</font>

419
00:17:37,550 --> 00:17:46,100
of<font color="#E5E5E5"> the libraries and finally let's get</font>

420
00:17:42,620 --> 00:17:50,060
back to the<font color="#CCCCCC"> finest</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> XSS</font>

421
00:17:46,100 --> 00:17:52,580
mitigations<font color="#CCCCCC"> may be</font><font color="#E5E5E5"> or at least the most</font>

422
00:17:50,060 --> 00:17:54,290
<font color="#CCCCCC">i know sexy one content security</font>

423
00:17:52,580 --> 00:17:56,090
policies content security policy works

424
00:17:54,290 --> 00:17:59,090
on a completely different<font color="#E5E5E5"> level</font><font color="#CCCCCC"> it</font>

425
00:17:56,090 --> 00:18:04,970
doesn't try to identify<font color="#E5E5E5"> anything in the</font>

426
00:17:59,090 --> 00:18:06,949
request parameters<font color="#CCCCCC"> it only tries to</font>

427
00:18:04,970 --> 00:18:09,380
distinguish trusted<font color="#CCCCCC"> scripts from</font>

428
00:18:06,950 --> 00:18:12,500
untrusted scripts<font color="#E5E5E5"> using</font><font color="#CCCCCC"> various means</font>

429
00:18:09,380 --> 00:18:15,500
<font color="#CCCCCC">and of course untrusted scripts are</font>

430
00:18:12,500 --> 00:18:19,010
<font color="#CCCCCC">being stopped from executing so</font>

431
00:18:15,500 --> 00:18:21,500
depending<font color="#E5E5E5"> on a CSP mode the way that a</font>

432
00:18:19,010 --> 00:18:23,660
policy determines which scripts are

433
00:18:21,500 --> 00:18:27,860
trusted so coming<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the application</font>

434
00:18:23,660 --> 00:18:29,540
outer and not the attacker<font color="#E5E5E5"> there are</font>

435
00:18:27,860 --> 00:18:32,540
different ways<font color="#E5E5E5"> of determining that</font><font color="#CCCCCC"> so</font>

436
00:18:29,540 --> 00:18:34,879
first one the<font color="#CCCCCC"> most popular traditional</font>

437
00:18:32,540 --> 00:18:37,430
one<font color="#CCCCCC"> i think it was the first first</font><font color="#E5E5E5"> mode</font>

438
00:18:34,880 --> 00:18:39,260
of<font color="#E5E5E5"> CSP actually it's the white keys</font>

439
00:18:37,430 --> 00:18:41,540
right so we have a white list of<font color="#E5E5E5"> urls or</font>

440
00:18:39,260 --> 00:18:44,330
white<font color="#CCCCCC"> list</font><font color="#E5E5E5"> of origins and only scripts</font>

441
00:18:41,540 --> 00:18:48,440
loaded<font color="#E5E5E5"> from those origins are allowed to</font>

442
00:18:44,330 --> 00:18:50,210
execute then there's a second mode of

443
00:18:48,440 --> 00:18:54,200
<font color="#E5E5E5">operation of content security policy</font>

444
00:18:50,210 --> 00:18:58,310
which is<font color="#E5E5E5"> non spaced so trusted scripts</font>

445
00:18:54,200 --> 00:19:02,420
are recognized by having a correct<font color="#E5E5E5"> nonce</font>

446
00:18:58,310 --> 00:19:04,700
secret value that is unknown<font color="#CCCCCC"> to the</font>

447
00:19:02,420 --> 00:19:06,980
attacker so if an attacker<font color="#E5E5E5"> injects</font>

448
00:19:04,700 --> 00:19:08,720
injects a script<font color="#CCCCCC"> that doesn't carry the</font>

449
00:19:06,980 --> 00:19:11,240
<font color="#E5E5E5">correct nonce value it will be stopped</font>

450
00:19:08,720 --> 00:19:13,730
<font color="#E5E5E5">from executing unfortunately it turned</font>

451
00:19:11,240 --> 00:19:15,410
out that<font color="#E5E5E5"> content security policy is</font>

452
00:19:13,730 --> 00:19:20,180
pretty hard<font color="#CCCCCC"> to adopt on</font><font color="#E5E5E5"> existing</font>

453
00:19:15,410 --> 00:19:22,400
websites so the community came<font color="#E5E5E5"> up with a</font>

454
00:19:20,180 --> 00:19:23,990
list of CSP keywords that make the

455
00:19:22,400 --> 00:19:27,350
adoption a little bit easier at the

456
00:19:23,990 --> 00:19:29,720
<font color="#E5E5E5">expense of the security so let's first</font>

457
00:19:27,350 --> 00:19:32,179
start looking<font color="#CCCCCC"> at the those additional</font>

458
00:19:29,720 --> 00:19:35,300
keywords<font color="#E5E5E5"> first one is the unsafe eval</font>

459
00:19:32,180 --> 00:19:38,330
keyword and what it<font color="#E5E5E5"> adds to the policy</font>

460
00:19:35,300 --> 00:19:41,180
is a slight relaxation<font color="#E5E5E5"> so your trusted</font>

461
00:19:38,330 --> 00:19:42,059
scripts are now allowed<font color="#CCCCCC"> to call an eval</font>

462
00:19:41,180 --> 00:19:45,419
function

463
00:19:42,059 --> 00:19:47,099
which seems simply benign I mean<font color="#CCCCCC"> you</font>

464
00:19:45,419 --> 00:19:49,979
shouldn't pass anything untrusted<font color="#E5E5E5"> and</font>

465
00:19:47,099 --> 00:19:51,749
the scripts<font color="#E5E5E5"> were loaded from say</font><font color="#CCCCCC"> a good</font>

466
00:19:49,979 --> 00:19:52,139
origin so what's the worst that<font color="#E5E5E5"> can</font>

467
00:19:51,749 --> 00:19:54,450
happen

468
00:19:52,139 --> 00:19:57,809
well gadgets are the worst that could

469
00:19:54,450 --> 00:20:00,119
happen maybe<font color="#E5E5E5"> it's pretty obvious how we</font>

470
00:19:57,809 --> 00:20:01,830
can use gadgets<font color="#CCCCCC"> to</font><font color="#E5E5E5"> bypass the</font><font color="#CCCCCC"> unsafe</font>

471
00:20:00,119 --> 00:20:04,139
evil version of content security policy

472
00:20:01,830 --> 00:20:06,299
<font color="#E5E5E5">simply</font><font color="#CCCCCC"> because a lot of gadgets will</font>

473
00:20:04,139 --> 00:20:09,330
call evil<font color="#CCCCCC"> or on something</font><font color="#E5E5E5"> coming from</font>

474
00:20:06,299 --> 00:20:12,239
<font color="#E5E5E5">the HTML</font><font color="#CCCCCC"> that can be injected by</font><font color="#E5E5E5"> the</font>

475
00:20:09,330 --> 00:20:14,639
attacker<font color="#E5E5E5"> as an example underscore</font>

476
00:20:12,239 --> 00:20:18,330
library is a templating library as<font color="#E5E5E5"> well</font>

477
00:20:14,639 --> 00:20:21,209
so we<font color="#CCCCCC"> can simply inject an underscore</font>

478
00:20:18,330 --> 00:20:25,139
template that<font color="#E5E5E5"> contains those this</font>

479
00:20:21,210 --> 00:20:26,719
special syntax<font color="#E5E5E5"> for underscore the</font>

480
00:20:25,139 --> 00:20:29,820
percent tax and whatever is<font color="#E5E5E5"> in the</font>

481
00:20:26,719 --> 00:20:32,339
inside<font color="#E5E5E5"> those percent tax will actually</font>

482
00:20:29,820 --> 00:20:34,200
be<font color="#E5E5E5"> passed to evil so that's a very</font>

483
00:20:32,339 --> 00:20:36,960
<font color="#E5E5E5">simple example</font>

484
00:20:34,200 --> 00:20:38,690
then came strict dynamic a recent

485
00:20:36,960 --> 00:20:42,320
addition<font color="#CCCCCC"> to content security policy</font>

486
00:20:38,690 --> 00:20:45,299
strict dynamic is the relaxation that

487
00:20:42,320 --> 00:20:47,729
allows the trusted script<font color="#E5E5E5"> to</font>

488
00:20:45,299 --> 00:20:50,460
programmatically dynamically create new

489
00:20:47,729 --> 00:20:54,929
script elements and those new script

490
00:20:50,460 --> 00:20:56,849
<font color="#E5E5E5">elements would be blessed by the content</font>

491
00:20:54,929 --> 00:20:58,830
security policy so they would not<font color="#E5E5E5"> need</font>

492
00:20:56,849 --> 00:21:00,989
<font color="#CCCCCC">to</font><font color="#E5E5E5"> have a correct nonce value for</font>

493
00:20:58,830 --> 00:21:02,989
<font color="#CCCCCC">example we would be trusted solely</font>

494
00:21:00,989 --> 00:21:05,309
because they will create it<font color="#E5E5E5"> from a</font>

495
00:21:02,989 --> 00:21:08,879
trusted<font color="#CCCCCC"> root let's say</font><font color="#E5E5E5"> right so what</font>

496
00:21:05,309 --> 00:21:11,190
<font color="#CCCCCC">already trusted script it turned out</font>

497
00:21:08,879 --> 00:21:13,228
that gadgets are quite<font color="#E5E5E5"> successful in</font>

498
00:21:11,190 --> 00:21:17,099
bypassing<font color="#CCCCCC"> content</font><font color="#E5E5E5"> security policy with</font>

499
00:21:13,229 --> 00:21:20,820
<font color="#E5E5E5">straight dynamic solely because creating</font>

500
00:21:17,099 --> 00:21:22,918
<font color="#E5E5E5">new script elements from something that</font>

501
00:21:20,820 --> 00:21:25,769
<font color="#E5E5E5">was already existing</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> Dom in the</font>

502
00:21:22,919 --> 00:21:28,049
HTML<font color="#CCCCCC"> code of</font><font color="#E5E5E5"> the web page is a common</font>

503
00:21:25,769 --> 00:21:29,929
patterning in those libraries as an

504
00:21:28,049 --> 00:21:34,789
<font color="#E5E5E5">example let's look at the jQuery Mobile</font>

505
00:21:29,929 --> 00:21:37,609
<font color="#CCCCCC">so what we have here is some pop-up</font>

506
00:21:34,789 --> 00:21:42,989
functionality of jQuery Mobile<font color="#E5E5E5"> that</font>

507
00:21:37,609 --> 00:21:46,228
allows this<font color="#E5E5E5"> library</font><font color="#CCCCCC"> to enrich a certain</font>

508
00:21:42,989 --> 00:21:49,950
HTML element with additional<font color="#CCCCCC"> behavior</font>

509
00:21:46,229 --> 00:21:52,710
<font color="#E5E5E5">but as a hint to debugging the</font>

510
00:21:49,950 --> 00:21:54,550
applications<font color="#E5E5E5"> jQuery Mobile will insert</font>

511
00:21:52,710 --> 00:21:56,760
an HTML comment with the<font color="#E5E5E5"> ID</font>

512
00:21:54,550 --> 00:21:59,169
of the attribute that<font color="#CCCCCC"> was just enriched</font>

513
00:21:56,760 --> 00:22:02,320
<font color="#CCCCCC">unfortunately they do it in a pretty</font>

514
00:21:59,170 --> 00:22:03,730
unsafe way so we can simply escape<font color="#E5E5E5"> the</font>

515
00:22:02,320 --> 00:22:06,550
comment as you can see in the ID

516
00:22:03,730 --> 00:22:08,920
attribute<font color="#CCCCCC"> and start injecting our HTML</font>

517
00:22:06,550 --> 00:22:10,990
<font color="#CCCCCC">code</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is by the</font><font color="#E5E5E5"> way we could we</font>

518
00:22:08,920 --> 00:22:13,540
<font color="#E5E5E5">could say HTML escape</font><font color="#CCCCCC"> descriptor here it</font>

519
00:22:10,990 --> 00:22:17,110
wouldn't matter<font color="#E5E5E5"> right so there would</font><font color="#CCCCCC"> not</font>

520
00:22:13,540 --> 00:22:21,460
be<font color="#E5E5E5"> a literal script tag there with the</font>

521
00:22:17,110 --> 00:22:25,000
angle brackets so when<font color="#E5E5E5"> jQuery Mobile</font>

522
00:22:21,460 --> 00:22:27,550
<font color="#E5E5E5">inserts this ID attribute</font><font color="#CCCCCC"> into the</font><font color="#E5E5E5"> web</font>

523
00:22:25,000 --> 00:22:30,700
<font color="#E5E5E5">page it defers to the jQuery HTML</font>

524
00:22:27,550 --> 00:22:33,550
function<font color="#E5E5E5"> and jQuery HTML function is a</font>

525
00:22:30,700 --> 00:22:36,190
wrapper over<font color="#CCCCCC"> inner HTML assignment</font><font color="#E5E5E5"> with</font>

526
00:22:33,550 --> 00:22:39,370
one<font color="#CCCCCC"> exception and</font><font color="#E5E5E5"> that exception is that</font>

527
00:22:36,190 --> 00:22:42,850
<font color="#E5E5E5">it tries to look for script tags in the</font>

528
00:22:39,370 --> 00:22:44,830
string<font color="#E5E5E5"> and creates them dynamically</font>

529
00:22:42,850 --> 00:22:49,360
instead of just<font color="#E5E5E5"> passing them to inner</font>

530
00:22:44,830 --> 00:22:51,550
HTML because adding a script element

531
00:22:49,360 --> 00:22:54,129
through inner HTML would not work<font color="#E5E5E5"> for</font>

532
00:22:51,550 --> 00:22:56,950
<font color="#E5E5E5">various reasons so jQuery has a</font>

533
00:22:54,130 --> 00:22:59,140
workaround<font color="#E5E5E5"> for the behavior and that</font>

534
00:22:56,950 --> 00:23:02,320
particular workaround<font color="#E5E5E5"> allows us to use</font>

535
00:22:59,140 --> 00:23:06,040
jQuery as a gadget in jQuery Mobile in

536
00:23:02,320 --> 00:23:07,629
this particular<font color="#E5E5E5"> example</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you have</font>

537
00:23:06,040 --> 00:23:10,060
an application<font color="#CCCCCC"> that</font><font color="#E5E5E5"> uses jQuery Mobile</font>

538
00:23:07,630 --> 00:23:11,260
<font color="#E5E5E5">and you happen to have an XSS there but</font>

539
00:23:10,060 --> 00:23:13,470
there's a strict dynamic content

540
00:23:11,260 --> 00:23:17,400
security policy<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> how to bypass it</font>

541
00:23:13,470 --> 00:23:19,810
<font color="#CCCCCC">and finally</font><font color="#E5E5E5"> let's get back to the</font>

542
00:23:17,400 --> 00:23:21,760
traditional content<font color="#CCCCCC"> security policies</font>

543
00:23:19,810 --> 00:23:23,710
<font color="#E5E5E5">the ones without unsafe eval without</font>

544
00:23:21,760 --> 00:23:26,020
strict dynamic without unsafe in

545
00:23:23,710 --> 00:23:27,310
language we kind of left out of<font color="#E5E5E5"> this</font>

546
00:23:26,020 --> 00:23:32,290
<font color="#E5E5E5">presentation because it's pretty</font><font color="#CCCCCC"> obvious</font>

547
00:23:27,310 --> 00:23:34,330
<font color="#CCCCCC">how to bypass them</font><font color="#E5E5E5"> it wasn't</font><font color="#CCCCCC"> that easy</font>

548
00:23:32,290 --> 00:23:38,050
to bypass<font color="#E5E5E5"> those content</font><font color="#CCCCCC"> security</font>

549
00:23:34,330 --> 00:23:40,600
policies for<font color="#E5E5E5"> two reasons we couldn't use</font>

550
00:23:38,050 --> 00:23:43,450
any gadgets<font color="#CCCCCC"> that end in inner HTML or</font>

551
00:23:40,600 --> 00:23:45,939
eval<font color="#E5E5E5"> call because this would</font><font color="#CCCCCC"> be detected</font>

552
00:23:43,450 --> 00:23:47,650
by content security policy<font color="#E5E5E5"> and we</font>

553
00:23:45,940 --> 00:23:49,870
<font color="#E5E5E5">couldn't add new script elements because</font>

554
00:23:47,650 --> 00:23:52,150
<font color="#E5E5E5">there's no strict dynamic we would have</font>

555
00:23:49,870 --> 00:23:53,500
to<font color="#E5E5E5"> know the correct notes for example</font><font color="#CCCCCC"> or</font>

556
00:23:52,150 --> 00:23:55,630
the script element would have to be

557
00:23:53,500 --> 00:23:59,860
<font color="#CCCCCC">loaded from a</font><font color="#E5E5E5"> trusted whitelist which is</font>

558
00:23:55,630 --> 00:24:02,460
obviously<font color="#CCCCCC"> something we as an attacker</font><font color="#E5E5E5"> do</font>

559
00:23:59,860 --> 00:24:02,459
not want to

560
00:24:02,590 --> 00:24:08,649
fortunately we were<font color="#CCCCCC"> able to bypass such</font>

561
00:24:05,390 --> 00:24:11,660
<font color="#CCCCCC">CSPs with gadgets in expression process</font>

562
00:24:08,650 --> 00:24:13,370
and as a<font color="#CCCCCC"> bonus</font><font color="#E5E5E5"> it turned out that the</font>

563
00:24:11,660 --> 00:24:17,710
<font color="#E5E5E5">very same vectors also work for</font><font color="#CCCCCC"> all the</font>

564
00:24:13,370 --> 00:24:20,060
other medications<font color="#E5E5E5"> so we won't complain</font>

565
00:24:17,710 --> 00:24:22,850
what do I mean<font color="#E5E5E5"> by the expression process</font>

566
00:24:20,060 --> 00:24:28,310
<font color="#E5E5E5">so there's several JavaScript frameworks</font>

567
00:24:22,850 --> 00:24:30,260
that have templating libraries a

568
00:24:28,310 --> 00:24:35,419
template<font color="#E5E5E5"> key component inside of them</font>

569
00:24:30,260 --> 00:24:39,170
and<font color="#CCCCCC"> they allow for</font><font color="#E5E5E5"> certain they have</font>

570
00:24:35,420 --> 00:24:41,750
like a certain custom language<font color="#E5E5E5"> for the</font>

571
00:24:39,170 --> 00:24:44,120
expressions<font color="#CCCCCC"> that could be embedded</font><font color="#E5E5E5"> into</font>

572
00:24:41,750 --> 00:24:47,080
<font color="#E5E5E5">the HTML</font><font color="#CCCCCC"> and those expressions for</font>

573
00:24:44,120 --> 00:24:51,770
<font color="#E5E5E5">example this customer dot name</font>

574
00:24:47,080 --> 00:24:56,360
<font color="#E5E5E5">expression is meant for I believe it's</font>

575
00:24:51,770 --> 00:25:00,230
<font color="#E5E5E5">Oralia code</font><font color="#CCCCCC"> it's meant it instructs your</font>

576
00:24:56,360 --> 00:25:03,520
<font color="#E5E5E5">framework</font><font color="#CCCCCC"> to insert a property name of</font>

577
00:25:00,230 --> 00:25:06,770
some object called customer into this

578
00:25:03,520 --> 00:25:10,610
table<font color="#E5E5E5"> cell element when rendering the</font>

579
00:25:06,770 --> 00:25:13,160
website this yellow code the customer

580
00:25:10,610 --> 00:25:16,070
<font color="#E5E5E5">dot name is not JavaScript</font><font color="#CCCCCC"> this is some</font>

581
00:25:13,160 --> 00:25:19,490
custom<font color="#CCCCCC"> language created</font><font color="#E5E5E5"> by by the</font>

582
00:25:16,070 --> 00:25:22,850
already<font color="#CCCCCC"> a framework</font><font color="#E5E5E5"> in this example with</font>

583
00:25:19,490 --> 00:25:26,360
that gets passed by<font color="#CCCCCC"> irelia and then</font>

584
00:25:22,850 --> 00:25:30,139
later on evaluated so what irelia does

585
00:25:26,360 --> 00:25:33,110
is it it creates a chain<font color="#CCCCCC"> of functions</font>

586
00:25:30,140 --> 00:25:34,850
<font color="#E5E5E5">that will eventually fetch the name</font>

587
00:25:33,110 --> 00:25:38,000
<font color="#E5E5E5">property of some customer object and</font>

588
00:25:34,850 --> 00:25:42,409
then inserted<font color="#CCCCCC"> using inner HTML or inner</font>

589
00:25:38,000 --> 00:25:44,000
text<font color="#E5E5E5"> into this TD element it turns out</font>

590
00:25:42,410 --> 00:25:45,530
<font color="#E5E5E5">that</font><font color="#CCCCCC"> we've sufficiently complex</font>

591
00:25:44,000 --> 00:25:48,170
expression languages in those frameworks

592
00:25:45,530 --> 00:25:54,800
<font color="#E5E5E5">we can actually run arbitrary</font><font color="#CCCCCC"> JavaScript</font>

593
00:25:48,170 --> 00:25:57,410
<font color="#CCCCCC">by</font><font color="#E5E5E5"> passing CSP as an example there has</font>

594
00:25:54,800 --> 00:26:01,159
been prior research<font color="#CCCCCC"> by</font><font color="#E5E5E5"> passing the</font>

595
00:25:57,410 --> 00:26:02,780
angularjs<font color="#E5E5E5"> sandbox mechanism by for</font>

596
00:26:01,160 --> 00:26:05,810
example<font color="#CCCCCC"> my dear</font><font color="#E5E5E5"> Hydra and then other</font>

597
00:26:02,780 --> 00:26:08,710
researchers<font color="#E5E5E5"> and this is an example of of</font>

598
00:26:05,810 --> 00:26:12,620
actually gadgety behavior in angularjs

599
00:26:08,710 --> 00:26:15,080
<font color="#E5E5E5">but we kind of generalize that concept</font>

600
00:26:12,620 --> 00:26:17,899
of built built on this

601
00:26:15,080 --> 00:26:21,199
so this is how you exploit the irelia

602
00:26:17,899 --> 00:26:23,119
into executing<font color="#CCCCCC"> alert essentially let's</font>

603
00:26:21,200 --> 00:26:26,269
let's see what's what's happening<font color="#CCCCCC"> so</font>

604
00:26:23,119 --> 00:26:28,549
first of all we create<font color="#E5E5E5"> a named reference</font>

605
00:26:26,269 --> 00:26:30,830
to this<font color="#E5E5E5"> diff element we</font><font color="#CCCCCC"> name it</font><font color="#E5E5E5"> simply</font>

606
00:26:28,549 --> 00:26:34,940
<font color="#CCCCCC">full such that we can refer to</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> later</font>

607
00:26:30,830 --> 00:26:37,879
on<font color="#E5E5E5"> then we we you can observe that we</font>

608
00:26:34,940 --> 00:26:40,519
try to bind to something<font color="#CCCCCC"> this means</font><font color="#E5E5E5"> that</font>

609
00:26:37,879 --> 00:26:43,340
we instruct<font color="#E5E5E5"> irelia to pass the value of</font>

610
00:26:40,519 --> 00:26:46,519
this attribute<font color="#E5E5E5"> as this custom expression</font>

611
00:26:43,340 --> 00:26:49,039
<font color="#E5E5E5">so what we do is we get the</font><font color="#CCCCCC"> reference to</font>

612
00:26:46,519 --> 00:26:52,850
this<font color="#E5E5E5"> development then we check the owner</font>

613
00:26:49,039 --> 00:26:55,340
document property that happens to be<font color="#CCCCCC"> the</font>

614
00:26:52,850 --> 00:26:56,689
document object then from the document

615
00:26:55,340 --> 00:26:58,459
object it's pretty easy to<font color="#E5E5E5"> get the</font>

616
00:26:56,690 --> 00:27:01,970
reference to the window which is the

617
00:26:58,460 --> 00:27:04,789
<font color="#E5E5E5">default view this is already a property</font>

618
00:27:01,970 --> 00:27:05,929
of<font color="#CCCCCC"> DOM</font><font color="#E5E5E5"> and then once we have a</font><font color="#CCCCCC"> reference</font>

619
00:27:04,789 --> 00:27:07,820
<font color="#E5E5E5">to the window we simply call the</font>

620
00:27:05,929 --> 00:27:11,899
knowledge<font color="#CCCCCC"> a</font><font color="#E5E5E5"> sorry alert</font><font color="#CCCCCC"> function with</font>

621
00:27:07,820 --> 00:27:15,049
<font color="#E5E5E5">parameter</font><font color="#CCCCCC"> one this is but so we are able</font>

622
00:27:11,899 --> 00:27:17,689
<font color="#CCCCCC">to</font><font color="#E5E5E5"> convert the</font><font color="#CCCCCC"> existing custom</font>

623
00:27:15,049 --> 00:27:19,730
expression in irelia language into

624
00:27:17,690 --> 00:27:22,070
something<font color="#CCCCCC"> that results</font><font color="#E5E5E5"> in arbitrary</font>

625
00:27:19,730 --> 00:27:24,200
<font color="#E5E5E5">JavaScript code execution by getting the</font>

626
00:27:22,070 --> 00:27:26,029
reference to the window<font color="#CCCCCC"> object and this</font>

627
00:27:24,200 --> 00:27:28,220
particular payload<font color="#E5E5E5"> would bypass</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

628
00:27:26,029 --> 00:27:30,619
mitigations<font color="#E5E5E5"> so both web application</font>

629
00:27:28,220 --> 00:27:34,429
<font color="#E5E5E5">firewall services XSS filters and all</font>

630
00:27:30,619 --> 00:27:36,830
variants<font color="#E5E5E5"> of</font><font color="#CCCCCC"> content security policy but</font>

631
00:27:34,429 --> 00:27:38,480
there's more<font color="#E5E5E5"> right</font><font color="#CCCCCC"> there's a couple</font><font color="#E5E5E5"> of</font>

632
00:27:36,830 --> 00:27:40,399
frameworks<font color="#E5E5E5"> each of them have different</font>

633
00:27:38,480 --> 00:27:41,960
<font color="#E5E5E5">expression languages and this is for</font>

634
00:27:40,399 --> 00:27:44,959
example<font color="#CCCCCC"> how you would do</font><font color="#E5E5E5"> it in in</font>

635
00:27:41,960 --> 00:27:48,879
polymer<font color="#E5E5E5"> we inject</font><font color="#CCCCCC"> a template</font><font color="#E5E5E5"> element</font>

636
00:27:44,960 --> 00:27:51,859
with a couple of<font color="#CCCCCC"> expressions so first</font>

637
00:27:48,879 --> 00:27:55,570
you<font color="#E5E5E5"> have to read it bottom to top</font><font color="#CCCCCC"> four</font>

638
00:27:51,859 --> 00:27:58,070
reasons<font color="#E5E5E5"> first of all we overwrite the</font>

639
00:27:55,570 --> 00:28:00,918
privates<font color="#E5E5E5"> route data house property which</font>

640
00:27:58,070 --> 00:28:04,220
is<font color="#E5E5E5"> something is something akin to this</font>

641
00:28:00,919 --> 00:28:08,389
<font color="#CCCCCC">object in JavaScript with again a</font>

642
00:28:04,220 --> 00:28:11,779
<font color="#E5E5E5">reference to the window and then we</font><font color="#CCCCCC"> are</font>

643
00:28:08,389 --> 00:28:14,959
able<font color="#CCCCCC"> to call the alert function</font><font color="#E5E5E5"> bound to</font>

644
00:28:11,779 --> 00:28:17,899
the window object<font color="#CCCCCC"> that we overrode</font><font color="#E5E5E5"> just</font>

645
00:28:14,960 --> 00:28:21,139
before and actually<font color="#CCCCCC"> the second the</font>

646
00:28:17,899 --> 00:28:24,619
second argument is being ignored<font color="#CCCCCC"> so this</font>

647
00:28:21,139 --> 00:28:27,340
is again an alert through the expression

648
00:28:24,619 --> 00:28:27,340
language<font color="#E5E5E5"> of polymer</font>

649
00:28:27,500 --> 00:28:35,150
it turns out<font color="#CCCCCC"> that we are able</font><font color="#E5E5E5"> to bypass</font>

650
00:28:32,570 --> 00:28:37,879
the<font color="#E5E5E5"> content security policy in a couple</font>

651
00:28:35,150 --> 00:28:40,880
of frameworks tested<font color="#E5E5E5"> so as for the</font>

652
00:28:37,880 --> 00:28:43,250
<font color="#CCCCCC">whitelist</font><font color="#E5E5E5"> base CSP we are able</font><font color="#CCCCCC"> to found</font>

653
00:28:40,880 --> 00:28:45,380
<font color="#E5E5E5">bypasses we were</font><font color="#CCCCCC"> able to find bypasses</font>

654
00:28:43,250 --> 00:28:49,010
in<font color="#CCCCCC"> 3 out of 16 frameworks for announces</font>

655
00:28:45,380 --> 00:28:51,920
<font color="#E5E5E5">it's for and all the other variants are</font>

656
00:28:49,010 --> 00:28:54,350
obviously more<font color="#CCCCCC"> easier to bypass</font><font color="#E5E5E5"> because</font>

657
00:28:51,920 --> 00:28:57,320
because because of them relaxing the

658
00:28:54,350 --> 00:28:58,639
content security policy<font color="#E5E5E5"> and enabling</font>

659
00:28:57,320 --> 00:29:03,169
<font color="#E5E5E5">some of the</font><font color="#CCCCCC"> cutters that wouldn't work</font>

660
00:28:58,640 --> 00:29:05,600
in in<font color="#E5E5E5"> the in the base case</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is just</font>

661
00:29:03,170 --> 00:29:08,860
<font color="#CCCCCC">a sample of the research that</font><font color="#E5E5E5"> we did in</font>

662
00:29:05,600 --> 00:29:12,260
the JavaScript libraries we found I

663
00:29:08,860 --> 00:29:16,969
<font color="#CCCCCC">think</font><font color="#E5E5E5"> over 50 cut it's something like</font>

664
00:29:12,260 --> 00:29:20,230
<font color="#E5E5E5">that we were able to bypass</font><font color="#CCCCCC"> our success</font>

665
00:29:16,970 --> 00:29:23,090
ratio<font color="#E5E5E5"> for bypasses was over 50 50</font><font color="#CCCCCC"> %</font><font color="#E5E5E5"> and</font>

666
00:29:20,230 --> 00:29:25,910
<font color="#CCCCCC">every tested mitigation was</font><font color="#E5E5E5"> bypassed</font><font color="#CCCCCC"> at</font>

667
00:29:23,090 --> 00:29:28,490
least once<font color="#E5E5E5"> and</font><font color="#CCCCCC"> there's a github</font>

668
00:29:25,910 --> 00:29:30,200
repository of all the examples also<font color="#E5E5E5"> this</font>

669
00:29:28,490 --> 00:29:34,180
<font color="#E5E5E5">will be present on the blackhat website</font>

670
00:29:30,200 --> 00:29:36,650
I<font color="#CCCCCC"> believe</font><font color="#E5E5E5"> almost</font><font color="#CCCCCC"> all libraries turn</font>

671
00:29:34,180 --> 00:29:39,080
<font color="#CCCCCC">turned</font><font color="#E5E5E5"> out to have gadgets that are</font>

672
00:29:36,650 --> 00:29:42,230
interesting<font color="#CCCCCC"> with the exception of react</font>

673
00:29:39,080 --> 00:29:43,909
<font color="#E5E5E5">and amber</font><font color="#CCCCCC"> Jas because it only had a</font>

674
00:29:42,230 --> 00:29:46,130
gadget<font color="#E5E5E5"> in in like a development version</font>

675
00:29:43,910 --> 00:29:48,860
<font color="#CCCCCC">of our development deployment of the</font>

676
00:29:46,130 --> 00:29:50,600
library and it turned out<font color="#CCCCCC"> that the</font>

677
00:29:48,860 --> 00:29:53,030
gadgets in the expression process are

678
00:29:50,600 --> 00:29:55,340
the most<font color="#E5E5E5"> powerful so exercise in</font><font color="#CCCCCC"> irelia</font>

679
00:29:53,030 --> 00:29:57,830
angularjs polymer can bypass all the

680
00:29:55,340 --> 00:30:00,110
<font color="#E5E5E5">mitigation so please don't have</font><font color="#CCCCCC"> exercise</font>

681
00:29:57,830 --> 00:30:02,360
<font color="#E5E5E5">to see in those applications or don't</font>

682
00:30:00,110 --> 00:30:05,810
trust<font color="#E5E5E5"> medications to stop them from</font>

683
00:30:02,360 --> 00:30:10,850
<font color="#E5E5E5">being exploitable and with that I'll</font>

684
00:30:05,810 --> 00:30:13,610
hand<font color="#E5E5E5"> over to Sebastian thank you very</font>

685
00:30:10,850 --> 00:30:15,530
much<font color="#E5E5E5"> koto</font><font color="#CCCCCC"> and the first part of this</font>

686
00:30:13,610 --> 00:30:17,750
presentation<font color="#E5E5E5"> we saw gadgets in libraries</font>

687
00:30:15,530 --> 00:30:20,330
<font color="#E5E5E5">and we</font><font color="#CCCCCC"> actually did this analysis</font>

688
00:30:17,750 --> 00:30:22,070
manually<font color="#E5E5E5"> so it took a huge amount</font><font color="#CCCCCC"> of</font>

689
00:30:20,330 --> 00:30:23,689
time<font color="#E5E5E5"> to investigate</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> source code of</font>

690
00:30:22,070 --> 00:30:26,270
<font color="#CCCCCC">the</font><font color="#E5E5E5"> libraries to find these gadgets to</font>

691
00:30:23,690 --> 00:30:28,010
build exploits<font color="#E5E5E5"> and so on but we also</font>

692
00:30:26,270 --> 00:30:29,810
wanted<font color="#E5E5E5"> to do something at scale</font><font color="#CCCCCC"> we</font>

693
00:30:28,010 --> 00:30:33,080
wanted to see what is the status of

694
00:30:29,810 --> 00:30:35,450
gadgets in the web and in in websites or

695
00:30:33,080 --> 00:30:37,070
popular websites and it's actually work

696
00:30:35,450 --> 00:30:39,820
that<font color="#E5E5E5"> we've done in cooperation with</font>

697
00:30:37,070 --> 00:30:43,300
Martin Jones and<font color="#E5E5E5"> Samuel</font><font color="#CCCCCC"> gross</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> s AP</font>

698
00:30:39,820 --> 00:30:45,340
and I will show<font color="#E5E5E5"> you what we found out so</font>

699
00:30:43,300 --> 00:30:47,139
what we were<font color="#CCCCCC"> interested in is how common</font>

700
00:30:45,340 --> 00:30:48,280
<font color="#E5E5E5">our gadgets in custom code so just</font>

701
00:30:47,140 --> 00:30:50,610
<font color="#CCCCCC">custom websites</font>

702
00:30:48,280 --> 00:30:54,040
code that lives outside<font color="#E5E5E5"> of libraries and</font>

703
00:30:50,610 --> 00:30:55,570
we thought that gadgets<font color="#E5E5E5"> or the</font><font color="#CCCCCC"> number of</font>

704
00:30:54,040 --> 00:30:58,420
gadgets<font color="#E5E5E5"> might be different in that code</font>

705
00:30:55,570 --> 00:30:59,980
<font color="#E5E5E5">because libraries are very</font><font color="#CCCCCC"> generic so it</font>

706
00:30:58,420 --> 00:31:02,500
might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> pretty obvious that you have</font>

707
00:30:59,980 --> 00:31:04,510
<font color="#E5E5E5">some gadgets there but custom code is</font>

708
00:31:02,500 --> 00:31:06,430
more specific and maybe they<font color="#E5E5E5"> are less</font>

709
00:31:04,510 --> 00:31:07,270
gadgets<font color="#E5E5E5"> or maybe even</font><font color="#CCCCCC"> more we</font><font color="#E5E5E5"> don't know</font>

710
00:31:06,430 --> 00:31:09,790
right

711
00:31:07,270 --> 00:31:11,560
and also<font color="#E5E5E5"> we thought about how we can be</font>

712
00:31:09,790 --> 00:31:13,810
<font color="#E5E5E5">address or fix this issue if you have</font>

713
00:31:11,560 --> 00:31:15,760
<font color="#E5E5E5">just gadgets in a few libraries like</font>

714
00:31:13,810 --> 00:31:17,320
<font color="#CCCCCC">sixteen libraries we investigated then</font>

715
00:31:15,760 --> 00:31:19,360
we could<font color="#E5E5E5"> probably go and just fix all</font>

716
00:31:17,320 --> 00:31:21,189
these libraries<font color="#E5E5E5"> or try to remove</font><font color="#CCCCCC"> two</font>

717
00:31:19,360 --> 00:31:23,110
gadgets<font color="#CCCCCC"> from</font><font color="#E5E5E5"> them or somehow put</font>

718
00:31:21,190 --> 00:31:25,120
safeguards<font color="#CCCCCC"> in place but if gadgets are</font>

719
00:31:23,110 --> 00:31:26,620
everywhere in all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> websites</font><font color="#CCCCCC"> then it</font>

720
00:31:25,120 --> 00:31:29,320
will be pretty hard<font color="#CCCCCC"> to address</font><font color="#E5E5E5"> this</font>

721
00:31:26,620 --> 00:31:31,750
problem so in order to do this<font color="#CCCCCC"> research</font>

722
00:31:29,320 --> 00:31:34,480
we need<font color="#E5E5E5"> to have some way to automate the</font>

723
00:31:31,750 --> 00:31:36,910
<font color="#CCCCCC">process of finding gadgets and I was</font>

724
00:31:34,480 --> 00:31:39,160
quite non-trivial<font color="#CCCCCC"> so what we wanted to</font>

725
00:31:36,910 --> 00:31:41,020
<font color="#E5E5E5">find is something</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> so here we</font>

726
00:31:39,160 --> 00:31:44,220
<font color="#E5E5E5">just see a very simple gadget</font><font color="#CCCCCC"> in</font>

727
00:31:41,020 --> 00:31:47,980
<font color="#E5E5E5">userland code</font><font color="#CCCCCC"> so this uses</font><font color="#E5E5E5"> jQuery it</font>

728
00:31:44,220 --> 00:31:49,510
reads<font color="#E5E5E5"> a div element</font><font color="#CCCCCC"> and extracts a data</font>

729
00:31:47,980 --> 00:31:52,420
attribute<font color="#CCCCCC"> from this design element and</font>

730
00:31:49,510 --> 00:31:55,060
<font color="#E5E5E5">then just assigned</font><font color="#CCCCCC"> as threw in HTML</font><font color="#E5E5E5"> so</font>

731
00:31:52,420 --> 00:31:58,090
while<font color="#E5E5E5"> this uses a library it's this code</font>

732
00:31:55,060 --> 00:32:01,060
is custom code right and in order to

733
00:31:58,090 --> 00:32:04,120
<font color="#E5E5E5">check examples</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> we built a tane</font>

734
00:32:01,060 --> 00:32:06,820
tracking engine so<font color="#CCCCCC"> pain tracking is the</font>

735
00:32:04,120 --> 00:32:08,590
process<font color="#E5E5E5"> of tracking user controlled or</font>

736
00:32:06,820 --> 00:32:11,080
tainted<font color="#E5E5E5"> data</font><font color="#CCCCCC"> throughout the execution</font>

737
00:32:08,590 --> 00:32:14,050
<font color="#CCCCCC">and follow it until it reaches a</font>

738
00:32:11,080 --> 00:32:16,120
security sensitive function so we built

739
00:32:14,050 --> 00:32:18,639
this into<font color="#E5E5E5"> a chrome and also</font><font color="#CCCCCC"> firefox</font>

740
00:32:16,120 --> 00:32:20,949
browser that enables us<font color="#CCCCCC"> to track strings</font>

741
00:32:18,640 --> 00:32:23,620
in<font color="#E5E5E5"> the JavaScript engine</font><font color="#CCCCCC"> and here we</font>

742
00:32:20,950 --> 00:32:26,980
<font color="#CCCCCC">again we have this very</font><font color="#E5E5E5"> simple example</font>

743
00:32:23,620 --> 00:32:30,040
<font color="#E5E5E5">where we just read a data coming from</font>

744
00:32:26,980 --> 00:32:31,720
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Dom that we assume is user control</font>

745
00:32:30,040 --> 00:32:34,570
because<font color="#CCCCCC"> we have an XSS and</font><font color="#E5E5E5"> can inject</font>

746
00:32:31,720 --> 00:32:36,700
elements into it<font color="#E5E5E5"> I'm into</font><font color="#CCCCCC"> the security</font>

747
00:32:34,570 --> 00:32:40,720
<font color="#CCCCCC">sensitive property in HTML in this case</font>

748
00:32:36,700 --> 00:32:43,720
<font color="#E5E5E5">so what we do is we we take websites and</font>

749
00:32:40,720 --> 00:32:45,400
load this into<font color="#CCCCCC"> our tained</font><font color="#E5E5E5"> engine and our</font>

750
00:32:43,720 --> 00:32:47,890
<font color="#E5E5E5">taint engine will report these data</font>

751
00:32:45,400 --> 00:32:49,540
flows so after executing<font color="#CCCCCC"> the function</font>

752
00:32:47,890 --> 00:32:51,400
<font color="#CCCCCC">and executing all the JavaScript we know</font>

753
00:32:49,540 --> 00:32:52,750
hey there was actually<font color="#E5E5E5"> data flow from</font>

754
00:32:51,400 --> 00:32:53,220
the Dom<font color="#E5E5E5"> into</font><font color="#CCCCCC"> this securities and</font>

755
00:32:52,750 --> 00:32:56,010
different

756
00:32:53,220 --> 00:32:58,169
then we pass on<font color="#E5E5E5"> this data</font><font color="#CCCCCC"> into an</font>

757
00:32:56,010 --> 00:33:00,090
exploit generator<font color="#E5E5E5"> the exploit generator</font>

758
00:32:58,169 --> 00:33:03,659
<font color="#E5E5E5">will look at this data flow try to come</font>

759
00:33:00,090 --> 00:33:06,780
<font color="#CCCCCC">up</font><font color="#E5E5E5"> with an XSS exploit and create</font><font color="#CCCCCC"> an a</font>

760
00:33:03,659 --> 00:33:09,150
piece of HTML<font color="#E5E5E5"> that triggers the gadget</font>

761
00:33:06,780 --> 00:33:11,370
in the page so in this case we know hey

762
00:33:09,150 --> 00:33:13,320
this was read from a development<font color="#E5E5E5"> it had</font>

763
00:33:11,370 --> 00:33:15,840
a certain ID and a certain or a certain

764
00:33:13,320 --> 00:33:17,340
class or whatever<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the attribute</font>

765
00:33:15,840 --> 00:33:19,470
where the data was<font color="#CCCCCC"> coming</font><font color="#E5E5E5"> from what was</font>

766
00:33:17,340 --> 00:33:22,320
the<font color="#CCCCCC"> data text attribute so we can simply</font>

767
00:33:19,470 --> 00:33:26,250
just<font color="#E5E5E5"> create this</font><font color="#CCCCCC"> element</font><font color="#E5E5E5"> and then</font>

768
00:33:22,320 --> 00:33:28,590
subsequently we simulate<font color="#E5E5E5"> an XSS in the</font>

769
00:33:26,250 --> 00:33:31,740
page<font color="#E5E5E5"> and the test so we just inject this</font>

770
00:33:28,590 --> 00:33:34,320
back and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> injected this HTML</font><font color="#E5E5E5"> snippet</font>

771
00:33:31,740 --> 00:33:36,809
into<font color="#E5E5E5"> six different positions</font><font color="#CCCCCC"> to see when</font>

772
00:33:34,320 --> 00:33:40,200
different gadgets<font color="#CCCCCC"> trigger and how they</font>

773
00:33:36,809 --> 00:33:42,389
<font color="#CCCCCC">can trigger and then what we did</font><font color="#E5E5E5"> is we</font>

774
00:33:40,200 --> 00:33:43,890
<font color="#E5E5E5">ran this tool on</font><font color="#CCCCCC"> the Alexa top 5,000</font>

775
00:33:42,390 --> 00:33:45,590
<font color="#E5E5E5">websites and we</font><font color="#CCCCCC"> built a crawling</font>

776
00:33:43,890 --> 00:33:48,539
extension<font color="#CCCCCC"> for Chrome and Firefox</font>

777
00:33:45,590 --> 00:33:50,820
browsers and basically just crawled<font color="#E5E5E5"> all</font>

778
00:33:48,539 --> 00:33:53,610
the<font color="#CCCCCC"> all the</font><font color="#E5E5E5"> five top 5,000 URLs and the</font>

779
00:33:50,820 --> 00:33:55,918
<font color="#CCCCCC">first</font><font color="#E5E5E5"> level links so all the URLs that</font>

780
00:33:53,610 --> 00:33:58,678
<font color="#CCCCCC">we found and this</font><font color="#E5E5E5"> your these limbs could</font>

781
00:33:55,919 --> 00:34:01,200
either be located on<font color="#E5E5E5"> the main domain or</font>

782
00:33:58,679 --> 00:34:04,669
on any<font color="#CCCCCC"> sub or super domain of this of</font>

783
00:34:01,200 --> 00:34:07,550
this page<font color="#CCCCCC"> and in total we found about</font>

784
00:34:04,669 --> 00:34:11,700
650,000 URLs that we crawled on about

785
00:34:07,550 --> 00:34:14,429
<font color="#CCCCCC">4500 domains</font><font color="#E5E5E5"> it's only</font><font color="#CCCCCC"> 4500</font><font color="#E5E5E5"> because in</font>

786
00:34:11,699 --> 00:34:16,348
the Alexa top 5,000 websites<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

787
00:34:14,429 --> 00:34:18,889
sites redirect<font color="#E5E5E5"> so for example all the</font>

788
00:34:16,349 --> 00:34:21,960
<font color="#CCCCCC">Google top-level domains like</font><font color="#E5E5E5"> Google dot</font>

789
00:34:18,889 --> 00:34:23,940
d<font color="#E5E5E5"> e do</font><font color="#CCCCCC"> to google.fr and so on they all</font>

790
00:34:21,960 --> 00:34:25,949
redirect to google.com<font color="#E5E5E5"> so in the end</font>

791
00:34:23,940 --> 00:34:29,580
that<font color="#E5E5E5"> the data set is a bit bit smaller</font>

792
00:34:25,949 --> 00:34:30,928
and then<font color="#E5E5E5"> we run this exploit generation</font>

793
00:34:29,580 --> 00:34:32,848
and injected all these gadgets<font color="#E5E5E5"> into</font>

794
00:34:30,929 --> 00:34:35,250
these pages<font color="#E5E5E5"> and actually we were</font><font color="#CCCCCC"> able to</font>

795
00:34:32,849 --> 00:34:39,089
verify about two hundred eighty<font color="#E5E5E5"> five</font>

796
00:34:35,250 --> 00:34:40,560
<font color="#E5E5E5">thousand and gadgets in in these</font><font color="#CCCCCC"> 650,000</font>

797
00:34:39,089 --> 00:34:44,549
<font color="#E5E5E5">URLs these gadgets are not necessarily</font>

798
00:34:40,560 --> 00:34:47,460
<font color="#CCCCCC">unique</font><font color="#E5E5E5"> but we found them on 906 domains</font>

799
00:34:44,550 --> 00:34:48,899
<font color="#E5E5E5">and so what we</font><font color="#CCCCCC"> can say here or what is</font>

800
00:34:47,460 --> 00:34:52,530
the key takeaway<font color="#CCCCCC"> of this slide is that</font>

801
00:34:48,899 --> 00:34:55,710
<font color="#E5E5E5">about one in five</font><font color="#CCCCCC"> web sites have a</font>

802
00:34:52,530 --> 00:34:58,740
verified gadgets in<font color="#CCCCCC"> userland code</font>

803
00:34:55,710 --> 00:35:01,560
however<font color="#E5E5E5"> this number is a very</font>

804
00:34:58,740 --> 00:35:04,589
<font color="#CCCCCC">conservative number</font><font color="#E5E5E5"> because our exploit</font>

805
00:35:01,560 --> 00:35:06,779
generation and gadget verification<font color="#E5E5E5"> was</font>

806
00:35:04,589 --> 00:35:09,540
focused to be false positive<font color="#CCCCCC"> three</font>

807
00:35:06,780 --> 00:35:11,430
and we got this<font color="#CCCCCC"> false-positive freeness</font>

808
00:35:09,540 --> 00:35:13,230
by accepting a high number<font color="#CCCCCC"> of false</font>

809
00:35:11,430 --> 00:35:14,940
negatives<font color="#CCCCCC"> and actually we started</font>

810
00:35:13,230 --> 00:35:16,830
<font color="#E5E5E5">looking into the data flows that we</font>

811
00:35:14,940 --> 00:35:18,270
<font color="#E5E5E5">found manually and we</font><font color="#CCCCCC"> found that</font><font color="#E5E5E5"> a lot</font>

812
00:35:16,830 --> 00:35:20,340
<font color="#CCCCCC">of the things that we were not able to</font>

813
00:35:18,270 --> 00:35:23,120
exploit automatically<font color="#CCCCCC"> were also</font>

814
00:35:20,340 --> 00:35:25,290
vulnerable and also had had gadgets<font color="#E5E5E5"> and</font>

815
00:35:23,120 --> 00:35:26,730
that's why we believe<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the real</font>

816
00:35:25,290 --> 00:35:28,440
number<font color="#CCCCCC"> of the edges in websites it's</font>

817
00:35:26,730 --> 00:35:32,220
much much higher<font color="#E5E5E5"> but we</font><font color="#CCCCCC"> are at least</font>

818
00:35:28,440 --> 00:35:34,830
sure it's at<font color="#CCCCCC"> least 20% so based on this</font>

819
00:35:32,220 --> 00:35:36,959
<font color="#CCCCCC">data we started the security analysis in</font>

820
00:35:34,830 --> 00:35:39,240
and wanted to<font color="#E5E5E5"> look at specific</font>

821
00:35:36,960 --> 00:35:42,000
<font color="#E5E5E5">mitigations and we all know that</font><font color="#CCCCCC"> there</font>

822
00:35:39,240 --> 00:35:43,589
is a lot<font color="#CCCCCC"> of resurgent</font><font color="#E5E5E5"> where bypassing</font>

823
00:35:42,000 --> 00:35:46,050
web application firewalls and XSS

824
00:35:43,590 --> 00:35:49,020
filters so we wanted<font color="#E5E5E5"> to focus on the</font>

825
00:35:46,050 --> 00:35:51,420
<font color="#E5E5E5">other two mitigations on HTML sanitizers</font>

826
00:35:49,020 --> 00:35:54,450
and<font color="#CCCCCC"> the content security policy</font><font color="#E5E5E5"> let's</font>

827
00:35:51,420 --> 00:35:55,950
start with HTML sanitizers<font color="#E5E5E5"> so basically</font>

828
00:35:54,450 --> 00:35:59,250
the question<font color="#CCCCCC"> that we ask ourself is</font>

829
00:35:55,950 --> 00:36:01,770
where the HTML sanitizers<font color="#E5E5E5"> are secure in</font>

830
00:35:59,250 --> 00:36:04,080
the default settings<font color="#E5E5E5"> and we saw that a</font>

831
00:36:01,770 --> 00:36:06,450
lot<font color="#CCCCCC"> of sanitizers regard certain HTML</font>

832
00:36:04,080 --> 00:36:09,210
<font color="#CCCCCC">attributes sb9 for example most</font>

833
00:36:06,450 --> 00:36:11,490
sanitizers that<font color="#E5E5E5"> we looked at allow ID or</font>

834
00:36:09,210 --> 00:36:14,280
<font color="#E5E5E5">class attributes to be present in the</font>

835
00:36:11,490 --> 00:36:16,560
sanitized string<font color="#E5E5E5"> also some sanitizers</font>

836
00:36:14,280 --> 00:36:19,850
and allow<font color="#CCCCCC"> data attributes because they</font>

837
00:36:16,560 --> 00:36:22,920
usually<font color="#CCCCCC"> just contain data</font><font color="#E5E5E5"> that is not</font>

838
00:36:19,850 --> 00:36:25,200
security<font color="#E5E5E5"> relevant right so what we found</font>

839
00:36:22,920 --> 00:36:28,830
<font color="#E5E5E5">that out of the data flows that we found</font>

840
00:36:25,200 --> 00:36:31,740
on these pages<font color="#E5E5E5"> 70 80 78 percent of all</font>

841
00:36:28,830 --> 00:36:34,110
domains<font color="#E5E5E5"> had</font><font color="#CCCCCC"> a data flow from an HTML</font>

842
00:36:31,740 --> 00:36:37,560
attribute into<font color="#CCCCCC"> a security sensitive</font>

843
00:36:34,110 --> 00:36:40,470
function and furthermore<font color="#E5E5E5"> 60% of</font><font color="#CCCCCC"> all the</font>

844
00:36:37,560 --> 00:36:42,900
sides exhibited a data flow from a data

845
00:36:40,470 --> 00:36:45,450
attribute<font color="#CCCCCC"> into a security sensitive</font>

846
00:36:42,900 --> 00:36:47,670
functions so what this tells us is<font color="#CCCCCC"> that</font>

847
00:36:45,450 --> 00:36:50,040
is<font color="#E5E5E5"> probably not secure to allow data</font>

848
00:36:47,670 --> 00:36:52,590
attributes by default in HTML sanitizers

849
00:36:50,040 --> 00:36:54,029
<font color="#E5E5E5">and when you use HTML sanitizers you</font>

850
00:36:52,590 --> 00:36:55,860
should be very<font color="#CCCCCC"> careful so usually if</font>

851
00:36:54,030 --> 00:36:57,720
some sanitizers have settings<font color="#E5E5E5"> where you</font>

852
00:36:55,860 --> 00:37:00,510
can like configure<font color="#CCCCCC"> the data attributes</font>

853
00:36:57,720 --> 00:37:02,160
are<font color="#E5E5E5"> not allowed or some and for some</font>

854
00:37:00,510 --> 00:37:03,870
<font color="#E5E5E5">sanitizers is an opt-in approach and</font>

855
00:37:02,160 --> 00:37:06,330
some other hand sanitizers<font color="#E5E5E5"> follow</font><font color="#CCCCCC"> this</font>

856
00:37:03,870 --> 00:37:08,819
<font color="#E5E5E5">opt-out approach so be careful when</font>

857
00:37:06,330 --> 00:37:10,560
using them<font color="#E5E5E5"> we also investigated the ID</font>

858
00:37:08,820 --> 00:37:13,170
and class attributes<font color="#CCCCCC"> and we found that</font>

859
00:37:10,560 --> 00:37:15,450
ID attributes are<font color="#E5E5E5"> or flows from ID</font>

860
00:37:13,170 --> 00:37:17,850
attributes are present in<font color="#CCCCCC"> 16% of all</font>

861
00:37:15,450 --> 00:37:20,310
<font color="#E5E5E5">that all the</font><font color="#CCCCCC"> sites and flows</font><font color="#E5E5E5"> from class</font>

862
00:37:17,850 --> 00:37:22,220
attributes are present in<font color="#CCCCCC"> 10%</font><font color="#E5E5E5"> of all the</font>

863
00:37:20,310 --> 00:37:23,880
so<font color="#CCCCCC"> idea in class and</font><font color="#E5E5E5"> boots are not that</font>

864
00:37:22,220 --> 00:37:26,009
doesn't<font color="#CCCCCC"> seem</font><font color="#E5E5E5"> to be that</font>

865
00:37:23,880 --> 00:37:28,350
<font color="#CCCCCC">security-critical</font><font color="#E5E5E5"> but still there is a</font>

866
00:37:26,010 --> 00:37:30,120
certain probability<font color="#E5E5E5"> that you can bypass</font>

867
00:37:28,350 --> 00:37:33,140
the sanitizers using those those

868
00:37:30,120 --> 00:37:35,970
attributes<font color="#CCCCCC"> if you find the right gadget</font>

869
00:37:33,140 --> 00:37:39,569
<font color="#E5E5E5">okay let's look at the content security</font>

870
00:37:35,970 --> 00:37:42,509
policy<font color="#CCCCCC"> so here we asked ourselves how</font>

871
00:37:39,570 --> 00:37:44,490
secure<font color="#E5E5E5"> are different</font><font color="#CCCCCC"> C's P keywords Kota</font>

872
00:37:42,510 --> 00:37:47,040
already introduced them<font color="#E5E5E5"> and here we</font><font color="#CCCCCC"> just</font>

873
00:37:44,490 --> 00:37:49,339
<font color="#CCCCCC">looked at</font><font color="#E5E5E5"> the CSP unsafe eval keyword</font>

874
00:37:47,040 --> 00:37:52,860
and the CSP<font color="#CCCCCC"> straight dynamic keyword and</font>

875
00:37:49,340 --> 00:37:56,450
for unsafe<font color="#E5E5E5"> evil we so unsafe evil is it</font>

876
00:37:52,860 --> 00:37:58,980
is a weird<font color="#E5E5E5"> or yeah weird keyword because</font>

877
00:37:56,450 --> 00:38:00,720
<font color="#E5E5E5">until</font><font color="#CCCCCC"> now it was</font><font color="#E5E5E5"> considered</font><font color="#CCCCCC"> to be safe</font>

878
00:37:58,980 --> 00:38:02,940
to<font color="#CCCCCC"> specified</font><font color="#E5E5E5"> in a policy and if you</font>

879
00:38:00,720 --> 00:38:05,399
actually<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> policy most</font>

880
00:38:02,940 --> 00:38:07,470
<font color="#E5E5E5">policies will contain the unsafe</font><font color="#CCCCCC"> evil</font>

881
00:38:05,400 --> 00:38:10,590
keyword<font color="#CCCCCC"> because usually</font><font color="#E5E5E5"> the logic is</font>

882
00:38:07,470 --> 00:38:13,080
well it just<font color="#E5E5E5"> renamed Evo which a lot of</font>

883
00:38:10,590 --> 00:38:14,760
<font color="#E5E5E5">websites use and but the ideas you could</font>

884
00:38:13,080 --> 00:38:16,380
just eat you<font color="#CCCCCC"> could just audit all the</font>

885
00:38:14,760 --> 00:38:18,270
places<font color="#E5E5E5"> where you evil and make sure you</font>

886
00:38:16,380 --> 00:38:20,160
<font color="#E5E5E5">don't pass user input</font><font color="#CCCCCC"> to eval</font><font color="#E5E5E5"> and then</font>

887
00:38:18,270 --> 00:38:23,160
you're safe<font color="#E5E5E5"> but that's</font><font color="#CCCCCC"> actually not</font><font color="#E5E5E5"> true</font>

888
00:38:20,160 --> 00:38:27,359
for gadgets and we found that<font color="#CCCCCC"> 40%</font><font color="#E5E5E5"> of all</font>

889
00:38:23,160 --> 00:38:30,480
<font color="#E5E5E5">the</font><font color="#CCCCCC"> websites</font><font color="#E5E5E5"> had a data flow from</font><font color="#CCCCCC"> EPI 9</font>

890
00:38:27,360 --> 00:38:33,990
HTML<font color="#E5E5E5"> piece either a text inside an</font>

891
00:38:30,480 --> 00:38:36,360
element<font color="#CCCCCC"> or an attribute into evil so</font><font color="#E5E5E5"> it</font>

892
00:38:33,990 --> 00:38:39,600
seems that evil is considerably weakened

893
00:38:36,360 --> 00:38:41,640
<font color="#E5E5E5">the policy the same holds true for a</font>

894
00:38:39,600 --> 00:38:44,250
<font color="#E5E5E5">strict dynamic so for a strict dynamic</font>

895
00:38:41,640 --> 00:38:47,640
we investigated all the<font color="#E5E5E5"> data flows that</font>

896
00:38:44,250 --> 00:38:50,640
go into script elements so where we<font color="#E5E5E5"> can</font>

897
00:38:47,640 --> 00:38:52,620
either assign<font color="#E5E5E5"> to an existing script the</font>

898
00:38:50,640 --> 00:38:55,440
text or where we can control the URL of

899
00:38:52,620 --> 00:38:57,029
an existing<font color="#E5E5E5"> script tag or where data is</font>

900
00:38:55,440 --> 00:38:58,950
<font color="#E5E5E5">passed through the jQuery dot HTML</font>

901
00:38:57,030 --> 00:39:01,560
<font color="#CCCCCC">function because that</font><font color="#E5E5E5"> again creates</font>

902
00:38:58,950 --> 00:39:05,279
takes the string creates<font color="#E5E5E5"> a script tags</font>

903
00:39:01,560 --> 00:39:07,440
from<font color="#E5E5E5"> the string and inserts that</font><font color="#CCCCCC"> to the</font>

904
00:39:05,280 --> 00:39:09,960
<font color="#CCCCCC">Dom</font><font color="#E5E5E5"> and we also checked whether we can</font>

905
00:39:07,440 --> 00:39:11,910
create<font color="#E5E5E5"> at new elements where we control</font>

906
00:39:09,960 --> 00:39:14,160
the<font color="#CCCCCC"> TEC name and at the same time</font>

907
00:39:11,910 --> 00:39:16,830
controlled attack of the tag name<font color="#CCCCCC"> and</font>

908
00:39:14,160 --> 00:39:19,020
surprisingly<font color="#E5E5E5"> we found that 73 percent of</font>

909
00:39:16,830 --> 00:39:21,240
all web<font color="#CCCCCC"> sites have these data flows so</font>

910
00:39:19,020 --> 00:39:23,940
that's pretty high<font color="#E5E5E5"> so what we conclude</font>

911
00:39:21,240 --> 00:39:26,250
<font color="#CCCCCC">from this data is</font><font color="#E5E5E5"> that strict dynamic</font>

912
00:39:23,940 --> 00:39:29,550
and unsafe<font color="#CCCCCC"> ETL considerably</font><font color="#E5E5E5"> weakened a</font>

913
00:39:26,250 --> 00:39:32,490
<font color="#E5E5E5">CSP and so you should be</font><font color="#CCCCCC"> very careful</font>

914
00:39:29,550 --> 00:39:33,980
<font color="#E5E5E5">when using this and make</font><font color="#CCCCCC"> sure that you</font>

915
00:39:32,490 --> 00:39:38,310
<font color="#CCCCCC">don't have any gadgets on your page</font>

916
00:39:33,980 --> 00:39:41,630
when you specify those<font color="#E5E5E5"> keywords okay</font>

917
00:39:38,310 --> 00:39:44,430
let's come to the summary<font color="#E5E5E5"> and conclusion</font>

918
00:39:41,630 --> 00:39:47,490
so in this presentation<font color="#CCCCCC"> we showed you</font>

919
00:39:44,430 --> 00:39:51,589
<font color="#CCCCCC">how</font><font color="#E5E5E5"> XSS mitigations work they work by</font>

920
00:39:47,490 --> 00:39:54,209
<font color="#E5E5E5">blocking attacks and not preventing</font>

921
00:39:51,590 --> 00:39:56,760
preventing XSS vulnerabilities and they

922
00:39:54,210 --> 00:40:00,090
mainly do so by distinguishing<font color="#CCCCCC"> a benign</font>

923
00:39:56,760 --> 00:40:02,160
HTML code from malicious HTML code or

924
00:40:00,090 --> 00:40:04,560
potentially malicious<font color="#E5E5E5"> HTML code and then</font>

925
00:40:02,160 --> 00:40:05,450
block<font color="#CCCCCC"> the malicious ones and allowed to</font>

926
00:40:04,560 --> 00:40:07,500
benign ones

927
00:40:05,450 --> 00:40:10,680
furthermore<font color="#E5E5E5"> we showed you that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

928
00:40:07,500 --> 00:40:12,690
use<font color="#CCCCCC"> gadgets to bypass these mitigations</font>

929
00:40:10,680 --> 00:40:15,089
<font color="#E5E5E5">by injecting these benign HTML</font>

930
00:40:12,690 --> 00:40:17,430
constructs<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are then upgraded by an</font>

931
00:40:15,090 --> 00:40:19,920
existing<font color="#CCCCCC"> code</font><font color="#E5E5E5"> in the page</font><font color="#CCCCCC"> to code</font>

932
00:40:17,430 --> 00:40:21,750
execution<font color="#E5E5E5"> we've also shown</font><font color="#CCCCCC"> you that</font>

933
00:40:19,920 --> 00:40:23,730
<font color="#E5E5E5">these gadgets are prevalent in most</font>

934
00:40:21,750 --> 00:40:25,290
<font color="#E5E5E5">modern</font><font color="#CCCCCC"> JavaScript libraries so if you</font>

935
00:40:23,730 --> 00:40:27,870
use<font color="#E5E5E5"> JavaScript libraries in</font><font color="#CCCCCC"> your</font>

936
00:40:25,290 --> 00:40:29,970
<font color="#CCCCCC">websites you're likely more neural to</font>

937
00:40:27,870 --> 00:40:31,759
this<font color="#E5E5E5"> attack</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we've also shown you</font>

938
00:40:29,970 --> 00:40:34,890
that at least<font color="#E5E5E5"> 20% of all the</font><font color="#CCCCCC"> web sites</font>

939
00:40:31,760 --> 00:40:36,420
<font color="#E5E5E5">in custom code have these gadgets but</font>

940
00:40:34,890 --> 00:40:40,049
the real numbers are<font color="#E5E5E5"> probably much</font>

941
00:40:36,420 --> 00:40:43,050
<font color="#CCCCCC">higher in practice so where do we</font><font color="#E5E5E5"> go</font>

942
00:40:40,050 --> 00:40:45,840
from here<font color="#CCCCCC"> so the main conclusion of this</font>

943
00:40:43,050 --> 00:40:48,300
talk<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that is difficult to</font><font color="#CCCCCC"> build</font>

944
00:40:45,840 --> 00:40:51,720
secure applications<font color="#E5E5E5"> and</font><font color="#CCCCCC"> just think</font><font color="#E5E5E5"> about</font>

945
00:40:48,300 --> 00:40:54,180
<font color="#E5E5E5">it give like hire a graduate</font><font color="#CCCCCC"> student</font><font color="#E5E5E5"> and</font>

946
00:40:51,720 --> 00:40:56,069
tell him who has<font color="#E5E5E5"> never been taught about</font>

947
00:40:54,180 --> 00:40:57,930
security who has<font color="#E5E5E5"> never has not much</font>

948
00:40:56,070 --> 00:41:00,360
experience<font color="#E5E5E5"> and just tell</font><font color="#CCCCCC"> him</font><font color="#E5E5E5"> to write a</font>

949
00:40:57,930 --> 00:41:02,609
very<font color="#E5E5E5"> complex web application do you</font>

950
00:41:00,360 --> 00:41:04,890
think it will<font color="#E5E5E5"> be secure and I guess we</font>

951
00:41:02,610 --> 00:41:06,810
all agree<font color="#E5E5E5"> that is probably</font><font color="#CCCCCC"> very hard to</font>

952
00:41:04,890 --> 00:41:08,879
<font color="#E5E5E5">get a secure application out</font><font color="#CCCCCC"> of this</font>

953
00:41:06,810 --> 00:41:11,160
right<font color="#E5E5E5"> and the problem that</font><font color="#CCCCCC"> we are facing</font>

954
00:41:08,880 --> 00:41:13,410
is that<font color="#CCCCCC"> the web hasn't changed in 20</font>

955
00:41:11,160 --> 00:41:16,170
years<font color="#CCCCCC"> so everything in the web is</font><font color="#E5E5E5"> about</font>

956
00:41:13,410 --> 00:41:18,180
turning<font color="#E5E5E5"> strings into code HTTP and HTML</font>

957
00:41:16,170 --> 00:41:20,130
are<font color="#E5E5E5"> based on taking a string from a</font>

958
00:41:18,180 --> 00:41:21,629
server<font color="#E5E5E5"> turning into the code there are</font>

959
00:41:20,130 --> 00:41:23,790
<font color="#E5E5E5">all the functions that we've seen the</font>

960
00:41:21,630 --> 00:41:27,000
Dom are based on turning strings into

961
00:41:23,790 --> 00:41:29,580
<font color="#CCCCCC">Coach with we have about</font><font color="#E5E5E5"> 65 functions</font>

962
00:41:27,000 --> 00:41:31,920
that take<font color="#CCCCCC"> a string</font><font color="#E5E5E5"> and that will result</font>

963
00:41:29,580 --> 00:41:34,290
in code execution<font color="#E5E5E5"> inside a browser and</font>

964
00:41:31,920 --> 00:41:37,170
we think that<font color="#E5E5E5"> the sketch AgResearch</font>

965
00:41:34,290 --> 00:41:39,450
shows that this<font color="#E5E5E5"> is the main reason while</font>

966
00:41:37,170 --> 00:41:41,790
XSS still exists and all the approaches

967
00:41:39,450 --> 00:41:43,649
<font color="#CCCCCC">and all the things that we've done to to</font>

968
00:41:41,790 --> 00:41:46,020
try<font color="#E5E5E5"> to prevent or mitigate exercises</font>

969
00:41:43,650 --> 00:41:47,050
actually<font color="#E5E5E5"> focus on upper levels we never</font>

970
00:41:46,020 --> 00:41:49,780
changed

971
00:41:47,050 --> 00:41:54,190
platform and we believe that<font color="#E5E5E5"> for making</font>

972
00:41:49,780 --> 00:41:56,230
the web secure and fighting XSS<font color="#E5E5E5"> we need</font>

973
00:41:54,190 --> 00:41:58,060
to make the platform secure<font color="#E5E5E5"> so what we</font>

974
00:41:56,230 --> 00:42:00,220
need<font color="#E5E5E5"> to start</font><font color="#CCCCCC"> working on is we need to</font>

975
00:41:58,060 --> 00:42:02,890
get rid<font color="#CCCCCC"> of all those string to code ap</font>

976
00:42:00,220 --> 00:42:05,589
<font color="#E5E5E5">is in the browser</font><font color="#CCCCCC"> we need to have secure</font>

977
00:42:02,890 --> 00:42:07,240
by default<font color="#CCCCCC"> api's and we are actually</font>

978
00:42:05,590 --> 00:42:11,590
going to<font color="#CCCCCC"> work on this in the next few</font>

979
00:42:07,240 --> 00:42:14,529
months in parallel we<font color="#CCCCCC"> can also explore</font>

980
00:42:11,590 --> 00:42:17,590
other primitives<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example we see that</font>

981
00:42:14,530 --> 00:42:19,800
<font color="#E5E5E5">isolation techniques are pretty pretty</font>

982
00:42:17,590 --> 00:42:23,980
effective at preventing or at least

983
00:42:19,800 --> 00:42:26,950
isolating or sandboxing XSS for example

984
00:42:23,980 --> 00:42:29,380
<font color="#E5E5E5">we already have two sub origins proposal</font>

985
00:42:26,950 --> 00:42:31,450
or we have sandbox iframes<font color="#CCCCCC"> where you can</font>

986
00:42:29,380 --> 00:42:33,400
basically separate certain parts of an

987
00:42:31,450 --> 00:42:35,799
applications from each other<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that if</font>

988
00:42:33,400 --> 00:42:37,750
you have an XSS in one part<font color="#CCCCCC"> it cannot</font>

989
00:42:35,800 --> 00:42:39,820
spread to the<font color="#CCCCCC"> other part cannot be used</font>

990
00:42:37,750 --> 00:42:41,620
<font color="#E5E5E5">to exploit other sensitive applications</font>

991
00:42:39,820 --> 00:42:44,170
<font color="#E5E5E5">there's also the isolated</font><font color="#CCCCCC"> scripts</font>

992
00:42:41,620 --> 00:42:45,549
proposal of<font color="#CCCCCC"> avocado</font><font color="#E5E5E5"> and I think we</font>

993
00:42:44,170 --> 00:42:49,150
<font color="#E5E5E5">should think more about how we can</font>

994
00:42:45,550 --> 00:42:54,190
<font color="#E5E5E5">isolate or or partition web applications</font>

995
00:42:49,150 --> 00:42:57,070
<font color="#E5E5E5">in this way okay what</font><font color="#CCCCCC"> is I would</font><font color="#E5E5E5"> like to</font>

996
00:42:54,190 --> 00:42:59,800
thank you for<font color="#CCCCCC"> your attention and I</font><font color="#E5E5E5"> think</font>

997
00:42:57,070 --> 00:43:01,780
we<font color="#E5E5E5"> still have time for questions</font><font color="#CCCCCC"> so feel</font>

998
00:42:59,800 --> 00:43:03,650
<font color="#CCCCCC">free to ask them</font><font color="#E5E5E5"> or just</font><font color="#CCCCCC"> approach us</font>

999
00:43:01,780 --> 00:43:07,570
after the talk

1000
00:43:03,650 --> 00:43:07,570
[Applause]

1001
00:43:09,900 --> 00:43:15,470
<font color="#CCCCCC">I think there's a question can</font><font color="#E5E5E5"> you go to</font>

1002
00:43:11,970 --> 00:43:15,470
the mic and<font color="#CCCCCC"> ask the question</font>

1003
00:43:21,430 --> 00:43:28,140
are you guys going to<font color="#CCCCCC"> open-source</font><font color="#E5E5E5"> your</font>

1004
00:43:23,740 --> 00:43:30,640
JavaScript<font color="#CCCCCC"> teint analyzer probably not</font>

1005
00:43:28,140 --> 00:43:32,319
<font color="#E5E5E5">the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> problem is that the</font>

1006
00:43:30,640 --> 00:43:34,960
infrastructure is<font color="#E5E5E5"> very very complex</font>

1007
00:43:32,319 --> 00:43:38,259
right now and so we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> thinking about</font>

1008
00:43:34,960 --> 00:43:40,839
<font color="#E5E5E5">open sourcing the</font><font color="#CCCCCC"> teint engine</font><font color="#E5E5E5"> but it</font>

1009
00:43:38,260 --> 00:43:41,920
will probably<font color="#E5E5E5"> take a long while to do so</font>

1010
00:43:40,839 --> 00:43:45,190
and<font color="#E5E5E5"> we're not sure</font><font color="#CCCCCC"> if it's going</font><font color="#E5E5E5"> to</font>

1011
00:43:41,920 --> 00:43:47,920
happen<font color="#CCCCCC"> and all</font><font color="#E5E5E5"> did the finals there is</font>

1012
00:43:45,190 --> 00:43:49,690
one that<font color="#E5E5E5"> is open</font><font color="#CCCCCC"> source right</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> there</font>

1013
00:43:47,920 --> 00:43:53,190
<font color="#CCCCCC">are there are a couple of opens yes</font>

1014
00:43:49,690 --> 00:43:55,630
<font color="#E5E5E5">there is one on github I think but it</font>

1015
00:43:53,190 --> 00:43:56,710
it's<font color="#CCCCCC"> difficult it's</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a patch set so</font>

1016
00:43:55,630 --> 00:43:59,950
you need to patch it you on your own

1017
00:43:56,710 --> 00:44:02,020
<font color="#E5E5E5">into the Chrome</font><font color="#CCCCCC"> browser and probably</font>

1018
00:43:59,950 --> 00:44:08,578
<font color="#CCCCCC">update the browser because it's old so</font>

1019
00:44:02,020 --> 00:44:08,579
it's kind of difficult more<font color="#E5E5E5"> questions</font>

1020
00:44:09,420 --> 00:44:17,200
<font color="#CCCCCC">there's a</font><font color="#E5E5E5"> question can you go to the</font>

1021
00:44:13,000 --> 00:44:19,359
microphone<font color="#CCCCCC"> oh there is one church</font><font color="#E5E5E5"> any</font>

1022
00:44:17,200 --> 00:44:22,328
<font color="#E5E5E5">the legacy versions of these frameworks</font>

1023
00:44:19,359 --> 00:44:24,339
<font color="#CCCCCC">to</font><font color="#E5E5E5"> determine fragmentation issues can</font>

1024
00:44:22,329 --> 00:44:27,190
you repeat<font color="#E5E5E5"> the older versions of these</font>

1025
00:44:24,339 --> 00:44:28,930
<font color="#CCCCCC">libraries is this all the newest stuff</font>

1026
00:44:27,190 --> 00:44:32,740
<font color="#E5E5E5">to you guys reviewed or did you guys go</font>

1027
00:44:28,930 --> 00:44:34,980
through maybe so<font color="#CCCCCC"> we didn't look</font><font color="#E5E5E5"> at let's</font>

1028
00:44:32,740 --> 00:44:37,720
say like the<font color="#E5E5E5"> backlog of the of the</font>

1029
00:44:34,980 --> 00:44:39,970
libraries what we looked at was the

1030
00:44:37,720 --> 00:44:42,189
<font color="#E5E5E5">current version of every of those</font>

1031
00:44:39,970 --> 00:44:45,250
libraries<font color="#CCCCCC"> as when we did the research it</font>

1032
00:44:42,190 --> 00:44:46,030
was a couple<font color="#E5E5E5"> of months ago so</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> that</font>

1033
00:44:45,250 --> 00:44:48,190
answers your question

1034
00:44:46,030 --> 00:44:50,170
<font color="#CCCCCC">I didn't have the resources</font><font color="#E5E5E5"> to manually</font>

1035
00:44:48,190 --> 00:44:53,470
analyze all I was just<font color="#CCCCCC"> gonna say the the</font>

1036
00:44:50,170 --> 00:44:54,700
<font color="#CCCCCC">impact custom</font><font color="#E5E5E5"> and the deviation</font><font color="#CCCCCC"> over</font>

1037
00:44:53,470 --> 00:44:56,169
your percentage of findings on true

1038
00:44:54,700 --> 00:44:58,540
positive<font color="#E5E5E5"> I'm sure is</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> greater with</font>

1039
00:44:56,170 --> 00:45:01,809
people that are using outdated systems

1040
00:44:58,540 --> 00:45:03,790
right yes<font color="#E5E5E5"> that's like a known thing</font><font color="#CCCCCC"> so</font>

1041
00:45:01,809 --> 00:45:05,770
what one more comment to this question

1042
00:45:03,790 --> 00:45:07,990
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we found a couple of interesting</font>

1043
00:45:05,770 --> 00:45:10,569
<font color="#CCCCCC">behaviors in different</font><font color="#E5E5E5"> versions</font><font color="#CCCCCC"> of</font>

1044
00:45:07,990 --> 00:45:12,970
libraries<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> jQuery is</font><font color="#CCCCCC"> is an</font>

1045
00:45:10,569 --> 00:45:15,130
<font color="#E5E5E5">example so in jQuery one jQuery will</font>

1046
00:45:12,970 --> 00:45:18,040
just eval<font color="#E5E5E5"> all the script tags that are</font>

1047
00:45:15,130 --> 00:45:20,290
in user input in jQuery<font color="#CCCCCC"> two</font><font color="#E5E5E5"> it has this</font>

1048
00:45:18,040 --> 00:45:22,509
branch<font color="#CCCCCC"> and when the script starts with</font>

1049
00:45:20,290 --> 00:45:24,670
you strict so activates a strict mode it

1050
00:45:22,510 --> 00:45:27,609
will append the script<font color="#E5E5E5"> otherwise it will</font>

1051
00:45:24,670 --> 00:45:30,430
evil it and in version 3<font color="#E5E5E5"> it actually</font>

1052
00:45:27,609 --> 00:45:31,960
just<font color="#E5E5E5"> depends the script to the Dom so</font>

1053
00:45:30,430 --> 00:45:33,578
sometimes depending on<font color="#E5E5E5"> the jQuery</font>

1054
00:45:31,960 --> 00:45:35,200
versions you have different types of

1055
00:45:33,579 --> 00:45:37,869
bypasses so the jQuery

1056
00:45:35,200 --> 00:45:40,540
one bypasses for<font color="#E5E5E5"> example CSP</font><font color="#CCCCCC"> unsafety</font>

1057
00:45:37,869 --> 00:45:43,810
<font color="#E5E5E5">well well the jQuery version</font><font color="#CCCCCC"> 2 bypasses</font>

1058
00:45:40,540 --> 00:45:46,089
consiguió and strict dynamic and<font color="#CCCCCC"> 3 just</font>

1059
00:45:43,810 --> 00:45:47,740
bypass<font color="#CCCCCC"> a strict dynamic</font><font color="#E5E5E5"> so there is some</font>

1060
00:45:46,089 --> 00:45:49,960
kind<font color="#CCCCCC"> of variation and some kind</font><font color="#E5E5E5"> of</font>

1061
00:45:47,740 --> 00:45:52,540
interesting<font color="#CCCCCC"> mixture sometimes you also</font>

1062
00:45:49,960 --> 00:45:55,210
see that<font color="#E5E5E5"> libraries are using other lives</font>

1063
00:45:52,540 --> 00:45:58,240
so so many libraries use<font color="#CCCCCC"> fallback to</font>

1064
00:45:55,210 --> 00:45:59,829
jQuery functionality and so for<font color="#E5E5E5"> example</font>

1065
00:45:58,240 --> 00:46:00,819
you sometimes see they check<font color="#CCCCCC"> for the</font>

1066
00:45:59,829 --> 00:46:01,900
dollar function and if the dollar

1067
00:46:00,820 --> 00:46:03,609
function is there they<font color="#E5E5E5"> will use the</font>

1068
00:46:01,900 --> 00:46:06,010
<font color="#CCCCCC">jquery function</font><font color="#E5E5E5"> and that actually</font>

1069
00:46:03,609 --> 00:46:08,740
depends<font color="#CCCCCC"> on the jquery library</font><font color="#E5E5E5"> version</font>

1070
00:46:06,010 --> 00:46:11,890
<font color="#E5E5E5">which gadget you have in the page which</font>

1071
00:46:08,740 --> 00:46:18,368
is kind<font color="#CCCCCC"> of an interesting behavior so</font>

1072
00:46:11,890 --> 00:46:21,970
<font color="#E5E5E5">you can yeah so in your research</font><font color="#CCCCCC"> you</font>

1073
00:46:18,369 --> 00:46:26,970
<font color="#CCCCCC">said you were not able</font><font color="#E5E5E5"> to carry out this</font>

1074
00:46:21,970 --> 00:46:33,939
bypass of exercise in<font color="#CCCCCC"> radius right</font><font color="#E5E5E5"> so</font>

1075
00:46:26,970 --> 00:46:39,069
will you say<font color="#E5E5E5"> that using react</font><font color="#CCCCCC"> jsut</font><font color="#E5E5E5"> your</font>

1076
00:46:33,940 --> 00:46:45,910
UI<font color="#E5E5E5"> you likely avoid exercise cross-site</font>

1077
00:46:39,070 --> 00:46:47,770
<font color="#E5E5E5">scripting issues and so</font><font color="#CCCCCC"> react is</font><font color="#E5E5E5"> special</font>

1078
00:46:45,910 --> 00:46:51,790
in the way it handles<font color="#CCCCCC"> Dom interactions</font>

1079
00:46:47,770 --> 00:46:55,180
so most templating systems work by you

1080
00:46:51,790 --> 00:46:57,400
you specify template<font color="#E5E5E5"> in in HTML and then</font>

1081
00:46:55,180 --> 00:46:59,618
the<font color="#CCCCCC"> tenth that the library picks up the</font>

1082
00:46:57,400 --> 00:47:01,240
template<font color="#E5E5E5"> and renders it to the Dom so</font>

1083
00:46:59,619 --> 00:47:04,180
<font color="#CCCCCC">there is this reading and</font><font color="#E5E5E5"> writing and</font>

1084
00:47:01,240 --> 00:47:06,578
react is different because it uses<font color="#E5E5E5"> a</font>

1085
00:47:04,180 --> 00:47:09,549
compiler<font color="#E5E5E5"> and actually in react you</font>

1086
00:47:06,579 --> 00:47:11,440
specify the templates in your<font color="#CCCCCC"> JavaScript</font>

1087
00:47:09,550 --> 00:47:13,599
file<font color="#CCCCCC"> and the compiler will turn this</font>

1088
00:47:11,440 --> 00:47:16,030
into JavaScript code<font color="#E5E5E5"> and the direction</font>

1089
00:47:13,599 --> 00:47:17,800
is always<font color="#E5E5E5"> only writing to the Dom so</font>

1090
00:47:16,030 --> 00:47:19,630
<font color="#E5E5E5">react never reads from the Dom but</font>

1091
00:47:17,800 --> 00:47:21,760
always<font color="#CCCCCC"> just refreshes things and that's</font>

1092
00:47:19,630 --> 00:47:23,140
<font color="#E5E5E5">why we didn't</font><font color="#CCCCCC"> find gadgets because</font><font color="#E5E5E5"> you</font>

1093
00:47:21,760 --> 00:47:25,930
can inject<font color="#E5E5E5"> something but if react</font>

1094
00:47:23,140 --> 00:47:28,540
doesn't read it from the<font color="#E5E5E5"> Dom it will not</font>

1095
00:47:25,930 --> 00:47:31,210
write it so in<font color="#E5E5E5"> that regard react is</font>

1096
00:47:28,540 --> 00:47:34,960
better and<font color="#E5E5E5"> that's why react is not not</font>

1097
00:47:31,210 --> 00:47:36,910
prone to gadgets thank you

1098
00:47:34,960 --> 00:47:41,050
did you try using the taint analysis to

1099
00:47:36,910 --> 00:47:43,720
find<font color="#E5E5E5"> caches also in libraries I mean our</font>

1100
00:47:41,050 --> 00:47:46,930
<font color="#E5E5E5">user length code study also contains and</font>

1101
00:47:43,720 --> 00:47:48,759
data flows that are<font color="#E5E5E5"> in libraries</font>

1102
00:47:46,930 --> 00:47:50,558
and but<font color="#CCCCCC"> most of them are triggered</font>

1103
00:47:48,760 --> 00:47:52,240
outside<font color="#E5E5E5"> of the libraries so we looked a</font>

1104
00:47:50,559 --> 00:47:53,890
<font color="#CCCCCC">little bit into it</font><font color="#E5E5E5"> but it's hard to</font>

1105
00:47:52,240 --> 00:47:55,118
<font color="#E5E5E5">distinguish right we just collect the</font>

1106
00:47:53,890 --> 00:47:56,710
data<font color="#E5E5E5"> flows some of them come from</font>

1107
00:47:55,119 --> 00:48:00,160
libraries some of them come from custom

1108
00:47:56,710 --> 00:48:03,280
code<font color="#E5E5E5"> so the answer</font><font color="#CCCCCC"> is yes but</font><font color="#E5E5E5"> we don't</font>

1109
00:48:00,160 --> 00:48:10,210
<font color="#CCCCCC">have like dedicated results for</font><font color="#E5E5E5"> that</font>

1110
00:48:03,280 --> 00:48:13,000
specifically focus on libraries<font color="#CCCCCC"> maybe in</font>

1111
00:48:10,210 --> 00:48:14,880
<font color="#E5E5E5">there a problem yes yeah if you have</font>

1112
00:48:13,000 --> 00:48:19,319
<font color="#E5E5E5">further</font><font color="#CCCCCC"> questions</font><font color="#E5E5E5"> we're going into this</font>

1113
00:48:14,880 --> 00:48:19,319
room down the hall

