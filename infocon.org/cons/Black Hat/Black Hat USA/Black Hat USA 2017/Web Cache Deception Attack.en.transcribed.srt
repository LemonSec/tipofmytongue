1
00:00:00,000 --> 00:00:03,629
I am<font color="#CCCCCC"> all-male in the next 25</font><font color="#E5E5E5"> minutes we</font>

2
00:00:02,190 --> 00:00:05,939
<font color="#E5E5E5">will be talking about the webcast</font>

3
00:00:03,629 --> 00:00:07,710
deception attack<font color="#E5E5E5"> the webcast deception</font>

4
00:00:05,940 --> 00:00:10,080
is<font color="#CCCCCC"> the new web attack vector</font><font color="#E5E5E5"> that allows</font>

5
00:00:07,710 --> 00:00:12,240
the tackers to<font color="#E5E5E5"> easily expose the private</font>

6
00:00:10,080 --> 00:00:14,099
content of application users and in

7
00:00:12,240 --> 00:00:15,540
<font color="#E5E5E5">certain</font><font color="#CCCCCC"> cases to even</font><font color="#E5E5E5"> take complete</font>

8
00:00:14,099 --> 00:00:17,460
control<font color="#E5E5E5"> over their accounts</font>

9
00:00:15,540 --> 00:00:19,830
<font color="#E5E5E5">I discovered it a few months</font><font color="#CCCCCC"> ago in</font>

10
00:00:17,460 --> 00:00:22,140
various<font color="#CCCCCC"> large-scale websites including</font>

11
00:00:19,830 --> 00:00:23,729
PayPal<font color="#CCCCCC"> as you</font><font color="#E5E5E5"> can see here but just</font>

12
00:00:22,140 --> 00:00:26,039
sending a simple get request to<font color="#E5E5E5"> the</font>

13
00:00:23,730 --> 00:00:28,439
papal server<font color="#E5E5E5"> without adding a session ID</font>

14
00:00:26,039 --> 00:00:30,359
or basically<font color="#CCCCCC"> any other</font><font color="#E5E5E5"> cookie it's</font>

15
00:00:28,439 --> 00:00:33,630
easily possible<font color="#E5E5E5"> to expose the private</font>

16
00:00:30,359 --> 00:00:35,690
content of an application user so just

17
00:00:33,630 --> 00:00:39,660
before we begin let<font color="#CCCCCC"> me introduce myself</font>

18
00:00:35,690 --> 00:00:43,379
<font color="#CCCCCC">so my name is</font><font color="#E5E5E5"> Donnell Gill I am 28 years</font>

19
00:00:39,660 --> 00:00:44,940
old and I<font color="#E5E5E5"> am married plus Java now I</font>

20
00:00:43,379 --> 00:00:47,760
don't<font color="#E5E5E5"> know you did miss a release of a</font>

21
00:00:44,940 --> 00:00:50,760
new web framework Java is<font color="#E5E5E5"> awesome</font><font color="#CCCCCC"> to</font>

22
00:00:47,760 --> 00:00:52,769
your dog<font color="#E5E5E5"> and I'll probably think now how</font>

23
00:00:50,760 --> 00:00:54,480
geek you need to be in<font color="#CCCCCC"> order to call</font>

24
00:00:52,770 --> 00:00:55,739
your dog after a programming<font color="#CCCCCC"> language</font>

25
00:00:54,480 --> 00:00:57,809
<font color="#E5E5E5">and that's not so far from the truth</font>

26
00:00:55,739 --> 00:00:58,949
<font color="#CCCCCC">right because if I wasn't a geek I</font>

27
00:00:57,809 --> 00:01:01,468
wouldn't be standing here talking

28
00:00:58,949 --> 00:01:03,480
<font color="#CCCCCC">infront of a</font><font color="#E5E5E5"> hole full</font><font color="#CCCCCC"> of geeks</font><font color="#E5E5E5"> but on</font>

29
00:01:01,469 --> 00:01:06,030
this geeky topic but that's not really

30
00:01:03,480 --> 00:01:08,280
<font color="#E5E5E5">the case here because our Java is not</font>

31
00:01:06,030 --> 00:01:10,710
named<font color="#E5E5E5"> after the language but after the</font>

32
00:01:08,280 --> 00:01:11,970
coffee means of course<font color="#E5E5E5"> now remember her</font>

33
00:01:10,710 --> 00:01:14,240
face<font color="#E5E5E5"> because you're going to you're</font>

34
00:01:11,970 --> 00:01:17,850
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to see her a lot</font><font color="#CCCCCC"> doing this talk</font>

35
00:01:14,240 --> 00:01:19,589
for living<font color="#CCCCCC"> I'm a penetration</font><font color="#E5E5E5"> testing</font>

36
00:01:17,850 --> 00:01:21,630
team leader at Ernst & Young advanced

37
00:01:19,590 --> 00:01:23,810
Security Center we do penetration<font color="#CCCCCC"> test</font>

38
00:01:21,630 --> 00:01:27,240
for web applications mobile<font color="#E5E5E5"> apps</font>

39
00:01:23,810 --> 00:01:30,360
infrastructure and more and besides that

40
00:01:27,240 --> 00:01:33,298
I'm<font color="#E5E5E5"> a student and just</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> to have my</font>

41
00:01:30,360 --> 00:01:35,729
<font color="#CCCCCC">degree in computer science so now we can</font>

42
00:01:33,299 --> 00:01:37,110
<font color="#E5E5E5">start and talk about webpage deception</font>

43
00:01:35,729 --> 00:01:40,140
and<font color="#E5E5E5"> in order to better understand the</font>

44
00:01:37,110 --> 00:01:42,570
attack<font color="#E5E5E5"> let's start by explaining two</font>

45
00:01:40,140 --> 00:01:44,340
important<font color="#CCCCCC"> baselines and the first one in</font>

46
00:01:42,570 --> 00:01:46,619
the first one<font color="#E5E5E5"> we will talk about caching</font>

47
00:01:44,340 --> 00:01:48,420
<font color="#E5E5E5">now we all know</font><font color="#CCCCCC"> about caching it helps</font>

48
00:01:46,619 --> 00:01:50,729
to reduce<font color="#E5E5E5"> latency from the web server</font>

49
00:01:48,420 --> 00:01:53,399
and to serve the users with<font color="#CCCCCC"> a content</font>

50
00:01:50,729 --> 00:01:55,049
<font color="#E5E5E5">faster we all know that what</font><font color="#CCCCCC"> is do</font>

51
00:01:53,399 --> 00:01:56,549
caching but that's not the kind<font color="#CCCCCC"> of</font>

52
00:01:55,049 --> 00:01:58,770
caching we are talking<font color="#E5E5E5"> about today what</font>

53
00:01:56,549 --> 00:02:02,070
we are<font color="#CCCCCC"> talking about</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> our servers</font>

54
00:01:58,770 --> 00:02:03,960
<font color="#CCCCCC">did function as caching mechanisms now</font>

55
00:02:02,070 --> 00:02:06,240
let's see a<font color="#CCCCCC"> few forms of this</font><font color="#E5E5E5"> kind of</font>

56
00:02:03,960 --> 00:02:09,239
caching mechanisms<font color="#E5E5E5"> so for that he</font><font color="#CCCCCC"> is</font>

57
00:02:06,240 --> 00:02:11,280
Java again she<font color="#E5E5E5"> will be our end user this</font>

58
00:02:09,239 --> 00:02:13,110
<font color="#E5E5E5">is</font><font color="#CCCCCC"> a web server on the right and in the</font>

59
00:02:11,280 --> 00:02:13,710
<font color="#E5E5E5">middle that's a caching mechanism</font>

60
00:02:13,110 --> 00:02:16,110
serving the

61
00:02:13,710 --> 00:02:18,210
a<font color="#E5E5E5"> web server so the first caching</font>

62
00:02:16,110 --> 00:02:19,920
mechanism<font color="#CCCCCC"> we'll going to look at is</font><font color="#E5E5E5"> CDN</font>

63
00:02:18,210 --> 00:02:22,290
<font color="#E5E5E5">content delivery content delivery</font>

64
00:02:19,920 --> 00:02:24,929
network which is a distributed network

65
00:02:22,290 --> 00:02:27,570
of proxies all around the world<font color="#E5E5E5"> well</font>

66
00:02:24,930 --> 00:02:30,210
they all<font color="#CCCCCC"> carry</font><font color="#E5E5E5"> applications content and</font>

67
00:02:27,570 --> 00:02:32,640
usually preferably the closest group<font color="#E5E5E5"> to</font>

68
00:02:30,210 --> 00:02:35,570
the user<font color="#E5E5E5"> of proxies which will be the</font>

69
00:02:32,640 --> 00:02:38,220
one who will serve<font color="#E5E5E5"> him with</font><font color="#CCCCCC"> this content</font>

70
00:02:35,570 --> 00:02:40,829
now another form of a<font color="#E5E5E5"> caching mechanism</font>

71
00:02:38,220 --> 00:02:42,420
is a load balancer<font color="#CCCCCC"> now we know that</font><font color="#E5E5E5"> the</font>

72
00:02:40,830 --> 00:02:43,980
main<font color="#CCCCCC"> purpose of a load balancer is to</font>

73
00:02:42,420 --> 00:02:46,530
balance<font color="#CCCCCC"> the traffic between more than</font>

74
00:02:43,980 --> 00:02:48,450
<font color="#CCCCCC">one</font><font color="#E5E5E5"> server but what you can also do is</font>

75
00:02:46,530 --> 00:02:51,240
to catch the applications content in

76
00:02:48,450 --> 00:02:55,640
order<font color="#E5E5E5"> to serve the user with it and do</font>

77
00:02:51,240 --> 00:02:58,380
it faster one<font color="#CCCCCC"> last</font><font color="#E5E5E5"> form a</font><font color="#CCCCCC"> bonus</font><font color="#E5E5E5"> a is</font>

78
00:02:55,640 --> 00:03:02,309
simply reverse proxy which function as

79
00:02:58,380 --> 00:03:04,049
the web server<font color="#E5E5E5"> for a font</font><font color="#CCCCCC"> and it it's</font>

80
00:03:02,310 --> 00:03:05,700
sir it can send<font color="#CCCCCC"> request</font><font color="#E5E5E5"> to the web</font>

81
00:03:04,050 --> 00:03:08,070
<font color="#CCCCCC">server on behalf of the on behalf of the</font>

82
00:03:05,700 --> 00:03:10,530
user<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> addition it can also catch</font>

83
00:03:08,070 --> 00:03:12,510
the applications content<font color="#E5E5E5"> okay so these</font>

84
00:03:10,530 --> 00:03:14,760
are<font color="#E5E5E5"> all forms of caching mechanisms now</font>

85
00:03:12,510 --> 00:03:18,870
let's see how the caching process looks

86
00:03:14,760 --> 00:03:22,130
<font color="#CCCCCC">like so let's say the Java here wants to</font>

87
00:03:18,870 --> 00:03:25,320
<font color="#E5E5E5">access this</font><font color="#CCCCCC"> page style sheet dot CSS and</font>

88
00:03:22,130 --> 00:03:27,210
the first the<font color="#E5E5E5"> first request arrives at</font>

89
00:03:25,320 --> 00:03:28,560
<font color="#E5E5E5">the caching mechanism</font><font color="#CCCCCC"> okay so now the</font>

90
00:03:27,210 --> 00:03:30,660
caching mechanism is not<font color="#E5E5E5"> familiar with</font>

91
00:03:28,560 --> 00:03:32,910
<font color="#CCCCCC">it</font><font color="#E5E5E5"> with this file so it has the web</font>

92
00:03:30,660 --> 00:03:35,130
server for<font color="#CCCCCC"> it</font><font color="#E5E5E5"> now the web server takes</font>

93
00:03:32,910 --> 00:03:37,200
<font color="#E5E5E5">this file and send its back to the</font>

94
00:03:35,130 --> 00:03:39,240
<font color="#CCCCCC">caching mechanism</font><font color="#E5E5E5"> now the caching</font>

95
00:03:37,200 --> 00:03:40,980
mechanism receives this file and<font color="#E5E5E5"> now it</font>

96
00:03:39,240 --> 00:03:43,380
has<font color="#E5E5E5"> to decide whether this file</font><font color="#CCCCCC"> should</font>

97
00:03:40,980 --> 00:03:45,959
be cached or<font color="#E5E5E5"> not so it first needs to</font>

98
00:03:43,380 --> 00:03:47,730
decide what<font color="#E5E5E5"> type of file this is so text</font>

99
00:03:45,960 --> 00:03:50,100
and look at the end of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> oil and</font><font color="#E5E5E5"> it</font>

100
00:03:47,730 --> 00:03:51,959
sees that<font color="#CCCCCC"> it has a CSS extension</font>

101
00:03:50,100 --> 00:03:54,000
therefore it decides<font color="#E5E5E5"> that this is a</font>

102
00:03:51,960 --> 00:03:56,640
<font color="#CCCCCC">stylesheet</font><font color="#E5E5E5"> and if it's configured to</font>

103
00:03:54,000 --> 00:03:57,690
cache<font color="#E5E5E5"> static files for</font><font color="#CCCCCC"> example then this</font>

104
00:03:56,640 --> 00:04:00,359
file is now cached

105
00:03:57,690 --> 00:04:02,160
on the<font color="#E5E5E5"> caching mechanism then the file</font>

106
00:04:00,360 --> 00:04:05,340
is sent by the caching mechanism back to

107
00:04:02,160 --> 00:04:06,990
the<font color="#CCCCCC"> users browser</font><font color="#E5E5E5"> now the next time this</font>

108
00:04:05,340 --> 00:04:09,300
<font color="#E5E5E5">user or any other user will try</font><font color="#CCCCCC"> to</font>

109
00:04:06,990 --> 00:04:10,860
access<font color="#E5E5E5"> this file the</font><font color="#CCCCCC"> request arrives</font><font color="#E5E5E5"> at</font>

110
00:04:09,300 --> 00:04:12,990
the<font color="#CCCCCC"> web's</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> U caching mechanism</font>

111
00:04:10,860 --> 00:04:14,640
which is<font color="#E5E5E5"> now familiar with this file we</font>

112
00:04:12,990 --> 00:04:17,130
just<font color="#E5E5E5"> send it</font><font color="#CCCCCC"> straight back</font><font color="#E5E5E5"> without</font>

113
00:04:14,640 --> 00:04:21,358
<font color="#E5E5E5">asking it from</font><font color="#CCCCCC"> the web</font><font color="#E5E5E5"> server to the</font>

114
00:04:17,130 --> 00:04:25,469
<font color="#E5E5E5">users browser and this is how caching</font>

115
00:04:21,358 --> 00:04:26,849
works<font color="#CCCCCC"> okay so this was the first</font>

116
00:04:25,470 --> 00:04:27,570
<font color="#E5E5E5">baseline out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> two let's move on</font>

117
00:04:26,850 --> 00:04:29,490
<font color="#CCCCCC">quickly</font><font color="#E5E5E5"> to the</font>

118
00:04:27,570 --> 00:04:31,860
<font color="#E5E5E5">second one let's talk</font><font color="#CCCCCC"> about service</font>

119
00:04:29,490 --> 00:04:33,780
reactions so the first time I read about

120
00:04:31,860 --> 00:04:36,060
it was when<font color="#CCCCCC"> I read about</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> alpi over</font>

121
00:04:33,780 --> 00:04:39,210
<font color="#CCCCCC">nobility</font><font color="#E5E5E5"> relative path over right in</font><font color="#CCCCCC"> two</font>

122
00:04:36,060 --> 00:04:40,950
blogs the<font color="#CCCCCC"> spanner</font><font color="#E5E5E5"> and exercise jigsaw so</font>

123
00:04:39,210 --> 00:04:43,979
let's say there<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> that</font>

124
00:04:40,950 --> 00:04:45,900
has<font color="#E5E5E5"> this page account dot PHP this is an</font>

125
00:04:43,980 --> 00:04:48,780
actual painting<font color="#CCCCCC"> application and the user</font>

126
00:04:45,900 --> 00:04:51,299
<font color="#E5E5E5">for</font><font color="#CCCCCC"> some reason decides to access this</font>

127
00:04:48,780 --> 00:04:53,429
URL<font color="#CCCCCC"> he adds a trailing</font><font color="#E5E5E5"> slash and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> name</font>

128
00:04:51,300 --> 00:04:54,300
<font color="#E5E5E5">of a non-existent</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> so let's see what</font>

129
00:04:53,430 --> 00:04:57,090
happens now

130
00:04:54,300 --> 00:04:58,680
so the<font color="#E5E5E5"> Basel just sends this</font><font color="#CCCCCC"> piece</font>

131
00:04:57,090 --> 00:05:00,810
<font color="#E5E5E5">request he won't change it what's more</font>

132
00:04:58,680 --> 00:05:02,670
<font color="#E5E5E5">interesting to look</font><font color="#CCCCCC"> at is how</font><font color="#E5E5E5"> the web</font>

133
00:05:00,810 --> 00:05:05,190
server interprets<font color="#E5E5E5"> this request the web</font>

134
00:05:02,670 --> 00:05:07,320
application<font color="#E5E5E5"> so in certain</font><font color="#CCCCCC"> cases</font><font color="#E5E5E5"> and not</font>

135
00:05:05,190 --> 00:05:09,810
just<font color="#E5E5E5"> a few the web application</font><font color="#CCCCCC"> return is</font>

136
00:05:07,320 --> 00:05:12,420
a 200<font color="#CCCCCC"> okay response meaning</font><font color="#E5E5E5"> the URL</font>

137
00:05:09,810 --> 00:05:17,850
stays the same<font color="#E5E5E5"> with the content of the</font>

138
00:05:12,420 --> 00:05:19,740
<font color="#CCCCCC">user's account page</font><font color="#E5E5E5"> okay so we know that</font>

139
00:05:17,850 --> 00:05:21,690
<font color="#CCCCCC">sometimes the application</font><font color="#E5E5E5"> might return</font>

140
00:05:19,740 --> 00:05:23,250
the content of the account page back to

141
00:05:21,690 --> 00:05:26,250
the<font color="#CCCCCC"> user's</font><font color="#E5E5E5"> browser but what about the</font>

142
00:05:23,250 --> 00:05:29,010
HTTP response headers<font color="#E5E5E5"> will they meet the</font>

143
00:05:26,250 --> 00:05:31,890
dynamic private PHP page or the

144
00:05:29,010 --> 00:05:34,620
<font color="#CCCCCC">non-existent CSS file</font><font color="#E5E5E5"> so same is the CSS</font>

145
00:05:31,890 --> 00:05:36,659
<font color="#CCCCCC">the</font><font color="#E5E5E5"> grunt same is the content the HTTP</font>

146
00:05:34,620 --> 00:05:38,910
response header<font color="#E5E5E5"> they also match</font><font color="#CCCCCC"> the</font>

147
00:05:36,660 --> 00:05:42,810
dynamic private PHP page as you<font color="#CCCCCC"> can see</font>

148
00:05:38,910 --> 00:05:44,550
here for the same URL<font color="#CCCCCC"> the file returns</font>

149
00:05:42,810 --> 00:05:47,100
with a no cache directive matching a

150
00:05:44,550 --> 00:05:49,110
dynamic private page and not a static

151
00:05:47,100 --> 00:05:51,990
CSS file and you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see that the</font>

152
00:05:49,110 --> 00:05:55,080
<font color="#E5E5E5">content type is text HTML and not text</font>

153
00:05:51,990 --> 00:05:57,780
ESS<font color="#E5E5E5"> which is expected</font><font color="#CCCCCC"> ok so that was the</font>

154
00:05:55,080 --> 00:05:59,520
<font color="#E5E5E5">second baseline and now</font><font color="#CCCCCC"> we can get down</font>

155
00:05:57,780 --> 00:06:00,739
to<font color="#E5E5E5"> business</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about how</font><font color="#E5E5E5"> web</font>

156
00:05:59,520 --> 00:06:04,200
<font color="#E5E5E5">page deception works</font>

157
00:06:00,740 --> 00:06:06,360
so there's here<font color="#CCCCCC"> you on the right you can</font>

158
00:06:04,200 --> 00:06:08,789
<font color="#E5E5E5">see a web server hosting for this</font>

159
00:06:06,360 --> 00:06:10,950
example<font color="#E5E5E5"> the web application of Java's</font>

160
00:06:08,790 --> 00:06:13,050
bank account<font color="#E5E5E5"> let me remind me</font><font color="#CCCCCC"> remind you</font>

161
00:06:10,950 --> 00:06:15,900
<font color="#CCCCCC">java is</font><font color="#E5E5E5"> not the web framework it's my</font>

162
00:06:13,050 --> 00:06:18,330
dog<font color="#E5E5E5"> okay so it's hosting her</font><font color="#CCCCCC"> dear</font>

163
00:06:15,900 --> 00:06:19,859
application<font color="#CCCCCC"> off her bank account in the</font>

164
00:06:18,330 --> 00:06:23,190
middle you can<font color="#CCCCCC"> see our</font><font color="#E5E5E5"> caching mechanism</font>

165
00:06:19,860 --> 00:06:25,080
serving this web server<font color="#E5E5E5"> so there's one</font>

166
00:06:23,190 --> 00:06:28,260
<font color="#E5E5E5">thing you need know about Java and it's</font>

167
00:06:25,080 --> 00:06:31,020
Java has a<font color="#CCCCCC"> Wed heard evil twin and</font><font color="#E5E5E5"> she</font>

168
00:06:28,260 --> 00:06:34,789
is also a hacker<font color="#E5E5E5"> so one day this evil</font>

169
00:06:31,020 --> 00:06:37,440
twin approaches Java<font color="#E5E5E5"> and she says woof</font>

170
00:06:34,790 --> 00:06:39,720
<font color="#E5E5E5">no she's</font><font color="#CCCCCC"> not talking about</font><font color="#E5E5E5"> well vacation</font>

171
00:06:37,440 --> 00:06:41,280
<font color="#E5E5E5">follows</font><font color="#CCCCCC"> okay dogs don't do that this is</font>

172
00:06:39,720 --> 00:06:43,110
just<font color="#CCCCCC"> how</font><font color="#E5E5E5"> they speak but let me try</font>

173
00:06:41,280 --> 00:06:45,570
<font color="#CCCCCC">ladies for</font><font color="#E5E5E5"> you what the evil twin</font>

174
00:06:43,110 --> 00:06:47,790
actually means is hey Java<font color="#E5E5E5"> can you</font>

175
00:06:45,570 --> 00:06:49,800
please access the<font color="#CCCCCC"> URL of your bank</font>

176
00:06:47,790 --> 00:06:52,169
account<font color="#CCCCCC"> but in the end of</font><font color="#E5E5E5"> the URL she</font>

177
00:06:49,800 --> 00:06:55,530
had the name of a<font color="#E5E5E5"> non-existent file with</font>

178
00:06:52,169 --> 00:06:57,479
a static extension<font color="#E5E5E5"> CSS so Java is an</font>

179
00:06:55,530 --> 00:06:59,099
<font color="#E5E5E5">overused</font><font color="#CCCCCC"> okay she doesn't click any link</font>

180
00:06:57,480 --> 00:07:01,290
she receives on<font color="#CCCCCC"> Facebook we taught her</font>

181
00:06:59,100 --> 00:07:03,300
<font color="#CCCCCC">well at home</font><font color="#E5E5E5"> so she takes a good look at</font>

182
00:07:01,290 --> 00:07:05,550
this URL<font color="#CCCCCC"> and it doesn't</font><font color="#E5E5E5"> look suspicious</font>

183
00:07:03,300 --> 00:07:07,830
<font color="#CCCCCC">at all right I mean look</font><font color="#E5E5E5"> at it</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

184
00:07:05,550 --> 00:07:09,930
<font color="#CCCCCC">the</font><font color="#E5E5E5"> domain of her bank account the URL</font>

185
00:07:07,830 --> 00:07:12,780
doesn't contain any<font color="#E5E5E5"> malicious code so it</font>

186
00:07:09,930 --> 00:07:15,540
looks<font color="#CCCCCC"> legit and Java decides to click it</font>

187
00:07:12,780 --> 00:07:18,479
and let's see what happens now<font color="#E5E5E5"> so the</font>

188
00:07:15,540 --> 00:07:20,340
<font color="#E5E5E5">request at first arrived at the caching</font>

189
00:07:18,480 --> 00:07:22,710
mechanism<font color="#E5E5E5"> now the caching mechanism is</font>

190
00:07:20,340 --> 00:07:25,169
not familiar<font color="#E5E5E5"> with this file yet so it</font>

191
00:07:22,710 --> 00:07:27,450
asks<font color="#CCCCCC"> the web server for it</font><font color="#E5E5E5"> now the web</font>

192
00:07:25,169 --> 00:07:31,409
server<font color="#E5E5E5"> receives this request with this</font>

193
00:07:27,450 --> 00:07:33,719
non-existent<font color="#CCCCCC"> Wigan URL and it returns a</font>

194
00:07:31,410 --> 00:07:36,660
200<font color="#E5E5E5"> ok response meaning the URL stays</font>

195
00:07:33,720 --> 00:07:38,100
the same<font color="#E5E5E5"> with the content of Java's bank</font>

196
00:07:36,660 --> 00:07:40,290
account with your own private and

197
00:07:38,100 --> 00:07:44,040
sensitive<font color="#E5E5E5"> sensitive content so this</font><font color="#CCCCCC"> is</font>

198
00:07:40,290 --> 00:07:45,930
<font color="#E5E5E5">sent back</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> caching mechanism now</font>

199
00:07:44,040 --> 00:07:47,430
discussion mechanism<font color="#E5E5E5"> received this file</font>

200
00:07:45,930 --> 00:07:50,520
and<font color="#E5E5E5"> needs to decide whether</font><font color="#CCCCCC"> to cache</font>

201
00:07:47,430 --> 00:07:52,169
this file or not<font color="#E5E5E5"> so let's say that the</font>

202
00:07:50,520 --> 00:07:54,690
configuration<font color="#CCCCCC"> of discussion mechanism is</font>

203
00:07:52,169 --> 00:07:56,430
to cache all static files normally<font color="#E5E5E5"> the</font>

204
00:07:54,690 --> 00:07:58,050
<font color="#CCCCCC">Waddle caching headers</font><font color="#E5E5E5"> are because</font>

205
00:07:56,430 --> 00:08:00,570
nothing sensitive can be included<font color="#CCCCCC"> in</font>

206
00:07:58,050 --> 00:08:03,419
<font color="#E5E5E5">static files right like stylesheet</font>

207
00:08:00,570 --> 00:08:05,669
usually<font color="#CCCCCC"> Java</font><font color="#E5E5E5"> scripts images so it's</font>

208
00:08:03,419 --> 00:08:08,580
<font color="#E5E5E5">configure</font><font color="#CCCCCC"> it it caches</font><font color="#E5E5E5"> all static files</font>

209
00:08:05,669 --> 00:08:10,830
and disregards their caching headers<font color="#CCCCCC"> ok</font>

210
00:08:08,580 --> 00:08:12,930
so in order to want to decide<font color="#E5E5E5"> whether to</font>

211
00:08:10,830 --> 00:08:14,729
cache this file or not<font color="#E5E5E5"> it takes a look</font>

212
00:08:12,930 --> 00:08:16,740
<font color="#E5E5E5">the caching mechanism takes a look at</font>

213
00:08:14,729 --> 00:08:19,680
the end of<font color="#E5E5E5"> the URL and sees that</font><font color="#CCCCCC"> it has</font>

214
00:08:16,740 --> 00:08:22,169
a CSS extension so therefore it decides

215
00:08:19,680 --> 00:08:24,270
to cache<font color="#CCCCCC"> it again with javis private and</font>

216
00:08:22,169 --> 00:08:26,130
sensitive<font color="#E5E5E5"> content of your</font><font color="#CCCCCC"> bank account</font>

217
00:08:24,270 --> 00:08:28,830
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is now cached in the caching</font>

218
00:08:26,130 --> 00:08:30,930
mechanism<font color="#E5E5E5"> in the next phase this file is</font>

219
00:08:28,830 --> 00:08:32,640
sent<font color="#E5E5E5"> to the users</font><font color="#CCCCCC"> browser but that's not</font>

220
00:08:30,930 --> 00:08:35,370
interesting<font color="#E5E5E5"> at all because what's</font>

221
00:08:32,640 --> 00:08:37,949
interesting<font color="#E5E5E5"> now is that</font><font color="#CCCCCC"> the evil twin</font>

222
00:08:35,370 --> 00:08:40,380
can just take this URL<font color="#E5E5E5"> and access it on</font>

223
00:08:37,950 --> 00:08:42,180
their own<font color="#E5E5E5"> without being authenticated</font><font color="#CCCCCC"> to</font>

224
00:08:40,380 --> 00:08:43,679
the application<font color="#CCCCCC"> now the caching</font>

225
00:08:42,179 --> 00:08:46,229
mechanism is familiar<font color="#CCCCCC"> with this</font><font color="#E5E5E5"> file</font>

226
00:08:43,679 --> 00:08:48,239
<font color="#CCCCCC">whitey just</font><font color="#E5E5E5"> stored it so we just</font><font color="#CCCCCC"> sent it</font>

227
00:08:46,230 --> 00:08:50,370
back again with the<font color="#CCCCCC"> user's private and</font>

228
00:08:48,240 --> 00:08:53,910
sensitive<font color="#E5E5E5"> content back to the attackers</font>

229
00:08:50,370 --> 00:08:55,200
browser<font color="#E5E5E5"> we just exposed all these</font>

230
00:08:53,910 --> 00:08:58,469
<font color="#CCCCCC">private information</font>

231
00:08:55,200 --> 00:09:02,190
very simple<font color="#E5E5E5"> pretty bad and this is how</font>

232
00:08:58,470 --> 00:09:03,690
<font color="#E5E5E5">web</font><font color="#CCCCCC"> cash deception works now this is bad</font>

233
00:09:02,190 --> 00:09:05,810
but<font color="#E5E5E5"> it</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> get even worse than that</font>

234
00:09:03,690 --> 00:09:08,880
<font color="#E5E5E5">let's say the de content of the HTML</font>

235
00:09:05,810 --> 00:09:11,130
<font color="#E5E5E5">contains</font><font color="#CCCCCC"> CSRF tokens okay so now the</font>

236
00:09:08,880 --> 00:09:13,980
attacker can use<font color="#CCCCCC"> d</font><font color="#E5E5E5"> CSRF token in order</font>

237
00:09:11,130 --> 00:09:15,990
to attack<font color="#E5E5E5"> the user with CSRF attacks</font><font color="#CCCCCC"> it</font>

238
00:09:13,980 --> 00:09:17,520
could get<font color="#E5E5E5"> even</font><font color="#CCCCCC"> worse</font><font color="#E5E5E5"> than death in</font><font color="#CCCCCC"> to</font>

239
00:09:15,990 --> 00:09:21,120
where applications that<font color="#E5E5E5"> I found to be</font>

240
00:09:17,520 --> 00:09:23,160
<font color="#E5E5E5">vulnerable the HTML contained the use of</font>

241
00:09:21,120 --> 00:09:25,020
<font color="#CCCCCC">session identifiers</font><font color="#E5E5E5"> so now the attack</font>

242
00:09:23,160 --> 00:09:27,209
<font color="#E5E5E5">and the attacker could take this session</font>

243
00:09:25,020 --> 00:09:30,420
ID<font color="#E5E5E5"> and use it to take complete control</font>

244
00:09:27,210 --> 00:09:33,360
over the<font color="#E5E5E5"> users account and that's really</font>

245
00:09:30,420 --> 00:09:36,390
<font color="#E5E5E5">bad</font><font color="#CCCCCC"> ok so now we know how web</font><font color="#E5E5E5"> Keys</font>

246
00:09:33,360 --> 00:09:37,650
deception works and let's see a demo to

247
00:09:36,390 --> 00:09:42,770
better understand<font color="#E5E5E5"> how we can identify</font>

248
00:09:37,650 --> 00:09:42,770
<font color="#E5E5E5">whether our website is vulnerable or not</font>

249
00:09:43,940 --> 00:09:49,230
<font color="#CCCCCC">ok so here</font><font color="#E5E5E5"> you can see</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> application</font>

250
00:09:46,590 --> 00:09:51,990
written<font color="#E5E5E5"> in</font><font color="#CCCCCC"> PHP it's opened on the left</font>

251
00:09:49,230 --> 00:09:54,660
<font color="#E5E5E5">on Chrome browser</font><font color="#CCCCCC"> and on the right on</font>

252
00:09:51,990 --> 00:09:57,180
<font color="#E5E5E5">Firefox we are now unauthenticated there</font>

253
00:09:54,660 --> 00:09:58,650
is a private page called private dot PHP

254
00:09:57,180 --> 00:10:00,569
that<font color="#CCCCCC"> you can only</font><font color="#E5E5E5"> see while</font><font color="#CCCCCC"> you're</font>

255
00:09:58,650 --> 00:10:03,000
authenticated and it<font color="#CCCCCC"> presents for each</font>

256
00:10:00,570 --> 00:10:04,740
user his own private<font color="#E5E5E5"> content now this</font>

257
00:10:03,000 --> 00:10:07,830
multiplication<font color="#E5E5E5"> is stored on an Apache</font>

258
00:10:04,740 --> 00:10:10,530
server and AWS<font color="#CCCCCC"> but it's also served by</font>

259
00:10:07,830 --> 00:10:13,380
<font color="#E5E5E5">the cloud</font><font color="#CCCCCC"> Flo CDN</font><font color="#E5E5E5"> so you can see that if</font>

260
00:10:10,530 --> 00:10:15,810
<font color="#CCCCCC">we try</font><font color="#E5E5E5"> to access the private page right</font>

261
00:10:13,380 --> 00:10:17,760
now<font color="#E5E5E5"> we are redirected back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the login</font>

262
00:10:15,810 --> 00:10:21,209
page<font color="#E5E5E5"> right because we aren't</font><font color="#CCCCCC"> enta gated</font>

263
00:10:17,760 --> 00:10:23,550
yet if you try to take a<font color="#CCCCCC"> trigger in URL</font>

264
00:10:21,210 --> 00:10:25,200
we take the private<font color="#CCCCCC"> dot PHP page</font><font color="#E5E5E5"> at the</font>

265
00:10:23,550 --> 00:10:27,359
name of a<font color="#CCCCCC"> non-existing file</font><font color="#E5E5E5"> afterwards</font>

266
00:10:25,200 --> 00:10:28,740
<font color="#E5E5E5">with a static extension we are</font>

267
00:10:27,360 --> 00:10:32,310
redirected to the<font color="#CCCCCC"> login page</font><font color="#E5E5E5"> also</font>

268
00:10:28,740 --> 00:10:36,050
<font color="#E5E5E5">because there's no such page yet</font><font color="#CCCCCC"> ok so</font>

269
00:10:32,310 --> 00:10:36,050
let's<font color="#CCCCCC"> login using</font><font color="#E5E5E5"> the admin account</font>

270
00:10:41,640 --> 00:10:46,860
<font color="#CCCCCC">okay so now we are</font><font color="#E5E5E5"> logged in you</font><font color="#CCCCCC"> can see</font>

271
00:10:43,589 --> 00:10:48,540
that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> our private PHP page we</font>

272
00:10:46,860 --> 00:10:50,670
can see our own private and sensitive

273
00:10:48,540 --> 00:10:53,069
content content of the admin account<font color="#CCCCCC"> and</font>

274
00:10:50,670 --> 00:10:55,380
now let's access<font color="#E5E5E5"> the</font><font color="#CCCCCC"> twin URL let's</font><font color="#E5E5E5"> add</font>

275
00:10:53,070 --> 00:10:58,230
<font color="#E5E5E5">after private dot PHP a trailing slash</font>

276
00:10:55,380 --> 00:11:00,540
<font color="#E5E5E5">and</font><font color="#CCCCCC"> loba dot PNG you can see that we</font>

277
00:10:58,230 --> 00:11:03,300
receive a 200<font color="#E5E5E5"> ok</font><font color="#CCCCCC"> response the URL stays</font>

278
00:11:00,540 --> 00:11:05,670
the same<font color="#E5E5E5"> and now the file is cached on</font>

279
00:11:03,300 --> 00:11:07,740
cloud floor servers so<font color="#E5E5E5"> we take this to</font>

280
00:11:05,670 --> 00:11:09,630
again URL and we put it on<font color="#CCCCCC"> another</font>

281
00:11:07,740 --> 00:11:12,149
browser<font color="#CCCCCC"> wall</font><font color="#E5E5E5"> unauthenticated or on</font>

282
00:11:09,630 --> 00:11:14,490
another<font color="#CCCCCC"> device and we get our contents</font>

283
00:11:12,149 --> 00:11:15,990
to wait for cloud<font color="#CCCCCC"> Flo</font><font color="#E5E5E5"> this is how a</font>

284
00:11:14,490 --> 00:11:18,990
<font color="#CCCCCC">police</font><font color="#E5E5E5"> deception works and in this case</font>

285
00:11:15,990 --> 00:11:22,769
this application is vulnerable<font color="#CCCCCC"> to web</font>

286
00:11:18,990 --> 00:11:24,750
cache deception<font color="#CCCCCC"> okay so I found</font><font color="#E5E5E5"> this</font>

287
00:11:22,769 --> 00:11:26,700
when the ability a few months ago<font color="#E5E5E5"> in</font>

288
00:11:24,750 --> 00:11:29,160
various websites including PayPal and

289
00:11:26,700 --> 00:11:31,940
let's see how<font color="#E5E5E5"> it looked like when PayPal</font>

290
00:11:29,160 --> 00:11:34,800
were vulnerable to<font color="#CCCCCC"> web</font><font color="#E5E5E5"> page deception so</font>

291
00:11:31,940 --> 00:11:36,209
here you can see I'm logged in in my

292
00:11:34,800 --> 00:11:38,640
home<font color="#E5E5E5"> page in paper you can see some</font>

293
00:11:36,209 --> 00:11:40,829
sensitive<font color="#CCCCCC"> information here it's canceled</font>

294
00:11:38,640 --> 00:11:42,540
right<font color="#E5E5E5"> now</font><font color="#CCCCCC"> we'll try to access a</font>

295
00:11:40,829 --> 00:11:44,640
triggering URL we're<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to add off to</font>

296
00:11:42,540 --> 00:11:47,099
the home page<font color="#E5E5E5"> a name of a</font><font color="#CCCCCC"> non-existent</font>

297
00:11:44,640 --> 00:11:49,230
file with a static extension and we

298
00:11:47,100 --> 00:11:52,140
receive a 200<font color="#E5E5E5"> ok response the URL won't</font>

299
00:11:49,230 --> 00:11:54,750
change<font color="#E5E5E5"> in this case the file is cached</font>

300
00:11:52,140 --> 00:11:56,910
on Akamai in this case now we<font color="#E5E5E5"> open</font>

301
00:11:54,750 --> 00:11:58,949
incognito mode<font color="#CCCCCC"> we</font><font color="#E5E5E5"> are unauthenticated we</font>

302
00:11:56,910 --> 00:12:01,290
access this triggering URL<font color="#CCCCCC"> again</font><font color="#E5E5E5"> and</font>

303
00:11:58,949 --> 00:12:03,750
look at it we<font color="#E5E5E5"> just get it straight away</font>

304
00:12:01,290 --> 00:12:05,849
<font color="#E5E5E5">from the Akamai servers without being</font>

305
00:12:03,750 --> 00:12:11,310
<font color="#E5E5E5">authenticated we easily exposed the</font>

306
00:12:05,850 --> 00:12:13,709
<font color="#E5E5E5">users private content</font><font color="#CCCCCC"> ok so what are</font><font color="#E5E5E5"> the</font>

307
00:12:11,310 --> 00:12:16,380
conditions<font color="#CCCCCC"> for</font><font color="#E5E5E5"> web cache deception to</font>

308
00:12:13,709 --> 00:12:19,439
exist in a web application<font color="#CCCCCC"> let's have a</font>

309
00:12:16,380 --> 00:12:21,689
look<font color="#CCCCCC"> so the first one is that web cache</font>

310
00:12:19,440 --> 00:12:23,519
functionality is set for the web

311
00:12:21,690 --> 00:12:25,740
application to<font color="#E5E5E5"> catch static files based</font>

312
00:12:23,519 --> 00:12:28,649
on their extensions<font color="#E5E5E5"> meaning according</font><font color="#CCCCCC"> to</font>

313
00:12:25,740 --> 00:12:32,730
the end of the URL<font color="#CCCCCC"> ok and this regarding</font>

314
00:12:28,649 --> 00:12:34,800
<font color="#E5E5E5">or overriding any caching header we need</font>

315
00:12:32,730 --> 00:12:36,600
to the<font color="#CCCCCC"> application</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> caching mechanism</font>

316
00:12:34,800 --> 00:12:37,979
<font color="#E5E5E5">to overwrite or disregard any caching I</font>

317
00:12:36,600 --> 00:12:39,930
do because ever as I told you<font color="#E5E5E5"> at the</font>

318
00:12:37,980 --> 00:12:42,510
beginning<font color="#E5E5E5"> of the talk</font><font color="#CCCCCC"> you know that the</font>

319
00:12:39,930 --> 00:12:44,250
foul for<font color="#E5E5E5"> the triggering URL arrives from</font>

320
00:12:42,510 --> 00:12:46,290
<font color="#E5E5E5">the web server with a no cache directive</font>

321
00:12:44,250 --> 00:12:47,880
and this is why we have the caching

322
00:12:46,290 --> 00:12:50,160
mechanism with the<font color="#E5E5E5"> caching mechanism to</font>

323
00:12:47,880 --> 00:12:53,160
cache all static files<font color="#E5E5E5"> no matter what</font>

324
00:12:50,160 --> 00:12:55,079
the caching headers<font color="#E5E5E5"> are the second</font>

325
00:12:53,160 --> 00:12:57,510
condition is<font color="#CCCCCC"> that when accessing</font><font color="#E5E5E5"> a page</font>

326
00:12:55,080 --> 00:13:00,180
like home dot<font color="#CCCCCC"> php' which is an actual</font>

327
00:12:57,510 --> 00:13:02,310
paint<font color="#E5E5E5"> in the application</font><font color="#CCCCCC"> /a name of a</font>

328
00:13:00,180 --> 00:13:04,709
<font color="#CCCCCC">non-existent file</font><font color="#E5E5E5"> the web application</font>

329
00:13:02,310 --> 00:13:07,260
will return the content of the of the

330
00:13:04,710 --> 00:13:10,950
actual<font color="#CCCCCC"> page of hon dot PHP</font><font color="#E5E5E5"> for that URL</font>

331
00:13:07,260 --> 00:13:15,450
<font color="#E5E5E5">with a 200 ok response so the URL stays</font>

332
00:13:10,950 --> 00:13:17,580
<font color="#E5E5E5">the same and one last condition is that</font>

333
00:13:15,450 --> 00:13:22,320
the user has to be authenticated<font color="#E5E5E5"> while</font>

334
00:13:17,580 --> 00:13:24,330
accessing<font color="#E5E5E5"> the triggering URL</font><font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> after</font>

335
00:13:22,320 --> 00:13:26,880
I posted<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> web page deception</font>

336
00:13:24,330 --> 00:13:29,280
attack first<font color="#E5E5E5"> a few months</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> some</font>

337
00:13:26,880 --> 00:13:31,380
people<font color="#CCCCCC"> asked me some why the hell why</font>

338
00:13:29,280 --> 00:13:33,060
the hell question didn't understand why

339
00:13:31,380 --> 00:13:34,620
the<font color="#CCCCCC"> hell from the beginning some</font>

340
00:13:33,060 --> 00:13:37,050
technologies<font color="#CCCCCC"> that are involved in</font><font color="#E5E5E5"> this</font>

341
00:13:34,620 --> 00:13:39,150
<font color="#CCCCCC">attack like caching mechanism and web</font>

342
00:13:37,050 --> 00:13:41,430
frameworks<font color="#E5E5E5"> why will they meet these</font>

343
00:13:39,150 --> 00:13:43,319
attack conditions from<font color="#E5E5E5"> the beginning so</font>

344
00:13:41,430 --> 00:13:45,060
I picked up<font color="#CCCCCC"> two</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> favorite one why</font>

345
00:13:43,320 --> 00:13:47,490
the hell questions and let's have<font color="#E5E5E5"> a look</font>

346
00:13:45,060 --> 00:13:49,739
at them<font color="#CCCCCC"> so the first one is</font><font color="#E5E5E5"> why the hell</font>

347
00:13:47,490 --> 00:13:52,920
with<font color="#E5E5E5"> a web application</font><font color="#CCCCCC"> we act</font><font color="#E5E5E5"> like this</font>

348
00:13:49,740 --> 00:13:54,720
why will it return a 200 ok<font color="#CCCCCC"> response</font><font color="#E5E5E5"> for</font>

349
00:13:52,920 --> 00:13:57,959
known is<font color="#E5E5E5"> this for non-existent URL with</font>

350
00:13:54,720 --> 00:13:59,550
<font color="#CCCCCC">the content of the</font><font color="#E5E5E5"> actual page so let's</font>

351
00:13:57,960 --> 00:14:02,640
see an<font color="#CCCCCC"> example on a jungle web</font>

352
00:13:59,550 --> 00:14:04,410
application so here you<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> Django</font>

353
00:14:02,640 --> 00:14:06,120
application there is<font color="#CCCCCC"> a page called inbox</font>

354
00:14:04,410 --> 00:14:09,030
<font color="#CCCCCC">that we turn the content</font><font color="#E5E5E5"> that you can</font>

355
00:14:06,120 --> 00:14:11,820
see right<font color="#CCCCCC"> now on the screen well now</font>

356
00:14:09,030 --> 00:14:13,500
some short<font color="#E5E5E5"> record about how jungle works</font>

357
00:14:11,820 --> 00:14:16,410
or when a request<font color="#E5E5E5"> arrived at the jungle</font>

358
00:14:13,500 --> 00:14:18,570
<font color="#CCCCCC">web application it goes to a dispatcher</font>

359
00:14:16,410 --> 00:14:21,630
<font color="#E5E5E5">and this dispatcher is configured in</font>

360
00:14:18,570 --> 00:14:24,090
files called URLs<font color="#E5E5E5"> and in this file the</font>

361
00:14:21,630 --> 00:14:28,200
developers can use<font color="#E5E5E5"> regular expressions</font>

362
00:14:24,090 --> 00:14:30,210
in order<font color="#E5E5E5"> to find a match sorry in order</font>

363
00:14:28,200 --> 00:14:32,280
<font color="#E5E5E5">to find a match in the URI and according</font>

364
00:14:30,210 --> 00:14:34,980
<font color="#CCCCCC">to it returned</font><font color="#E5E5E5"> the relevant content to</font>

365
00:14:32,280 --> 00:14:37,050
<font color="#E5E5E5">the user</font><font color="#CCCCCC"> so this is an example of a</font>

366
00:14:34,980 --> 00:14:38,760
<font color="#E5E5E5">standard</font><font color="#CCCCCC"> rugged someone white</font><font color="#E5E5E5"> use for</font>

367
00:14:37,050 --> 00:14:40,829
his<font color="#CCCCCC"> Django application it looks for</font><font color="#E5E5E5"> in</font>

368
00:14:38,760 --> 00:14:42,540
box than a trailing slash<font color="#E5E5E5"> and if it</font>

369
00:14:40,830 --> 00:14:45,360
finds it it<font color="#E5E5E5"> between the content of this</font>

370
00:14:42,540 --> 00:14:47,880
<font color="#CCCCCC">page</font><font color="#E5E5E5"> so what happens if we</font><font color="#CCCCCC"> have this</font>

371
00:14:45,360 --> 00:14:50,520
configuration<font color="#E5E5E5"> for the jungle application</font>

372
00:14:47,880 --> 00:14:52,920
and we access<font color="#CCCCCC"> this triggering URL slash</font>

373
00:14:50,520 --> 00:14:54,600
<font color="#E5E5E5">in box which is an actual page slash a</font>

374
00:14:52,920 --> 00:14:57,000
name of a<font color="#CCCCCC"> non-existent file with a</font>

375
00:14:54,600 --> 00:14:59,880
static extension so in<font color="#E5E5E5"> this case we</font>

376
00:14:57,000 --> 00:15:02,010
received a 200 ok response the URL stays

377
00:14:59,880 --> 00:15:04,800
the same and<font color="#E5E5E5"> we receive the</font><font color="#CCCCCC"> content of</font>

378
00:15:02,010 --> 00:15:06,510
the<font color="#CCCCCC"> Inbox page this</font><font color="#E5E5E5"> is fantastic for</font><font color="#CCCCCC"> us</font>

379
00:15:04,800 --> 00:15:08,520
<font color="#CCCCCC">right not</font><font color="#E5E5E5"> very much for the developers</font>

380
00:15:06,510 --> 00:15:10,050
but it's<font color="#E5E5E5"> fantastic for us right</font>

381
00:15:08,520 --> 00:15:12,090
but<font color="#CCCCCC"> why's that</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> at your eye</font>

382
00:15:10,050 --> 00:15:15,270
of the<font color="#E5E5E5"> triggering</font><font color="#CCCCCC"> URL</font><font color="#E5E5E5"> it starts within</font>

383
00:15:12,090 --> 00:15:16,410
box<font color="#CCCCCC"> then it</font><font color="#E5E5E5"> has a trailing slash that's</font>

384
00:15:15,270 --> 00:15:19,079
<font color="#E5E5E5">it we have</font><font color="#CCCCCC"> a match</font>

385
00:15:16,410 --> 00:15:22,230
therefore we receive the<font color="#CCCCCC"> content of the</font>

386
00:15:19,080 --> 00:15:24,090
<font color="#CCCCCC">inbox page with a 200 ok response</font><font color="#E5E5E5"> now</font>

387
00:15:22,230 --> 00:15:25,850
let's see<font color="#CCCCCC"> another example of</font><font color="#E5E5E5"> a pro</font>

388
00:15:24,090 --> 00:15:28,950
configuration of this regular expression

389
00:15:25,850 --> 00:15:32,280
<font color="#CCCCCC">that works for</font><font color="#E5E5E5"> a jungle application and</font>

390
00:15:28,950 --> 00:15:35,610
it can assist attackers to create even

391
00:15:32,280 --> 00:15:37,949
<font color="#E5E5E5">less</font><font color="#CCCCCC"> specious</font><font color="#E5E5E5"> triggering URLs</font><font color="#CCCCCC"> so what</font>

392
00:15:35,610 --> 00:15:40,020
happens if this<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> leg</font><font color="#CCCCCC"> axe that is</font>

393
00:15:37,950 --> 00:15:41,940
used by<font color="#E5E5E5"> the jungle application</font><font color="#CCCCCC"> I just</font>

394
00:15:40,020 --> 00:15:42,890
<font color="#E5E5E5">remove the trailing slash after the</font>

395
00:15:41,940 --> 00:15:45,210
<font color="#CCCCCC">Inbox</font>

396
00:15:42,890 --> 00:15:49,199
<font color="#CCCCCC">ok so in this</font><font color="#E5E5E5"> case if we try to access</font>

397
00:15:45,210 --> 00:15:52,050
<font color="#CCCCCC">this twig in URL slash inbox</font><font color="#E5E5E5"> and now we</font>

398
00:15:49,200 --> 00:15:54,030
add dot CSS which doesn't mean anything

399
00:15:52,050 --> 00:15:56,459
<font color="#E5E5E5">we still receive</font><font color="#CCCCCC"> the content of the</font>

400
00:15:54,030 --> 00:15:59,300
<font color="#E5E5E5">inbox page this is awesome for us right</font>

401
00:15:56,460 --> 00:16:02,130
look at the<font color="#E5E5E5"> URI</font><font color="#CCCCCC"> it starts</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> inbox</font>

402
00:15:59,300 --> 00:16:05,069
that's it we have<font color="#CCCCCC"> a match now anything</font>

403
00:16:02,130 --> 00:16:07,890
<font color="#CCCCCC">that comes afterwards just disregard</font><font color="#E5E5E5"> by</font>

404
00:16:05,070 --> 00:16:10,620
the<font color="#E5E5E5"> Django application and we receive</font>

405
00:16:07,890 --> 00:16:12,630
the content<font color="#E5E5E5"> of the inbox page</font><font color="#CCCCCC"> ok so if</font>

406
00:16:10,620 --> 00:16:14,490
you<font color="#E5E5E5"> want to solve this if you want to</font>

407
00:16:12,630 --> 00:16:16,880
prevent<font color="#CCCCCC"> a jungle</font><font color="#E5E5E5"> application for me</font>

408
00:16:14,490 --> 00:16:18,960
tuning the content of the<font color="#E5E5E5"> inbox page for</font>

409
00:16:16,880 --> 00:16:21,870
<font color="#E5E5E5">non-existent URLs what can we do about</font>

410
00:16:18,960 --> 00:16:23,670
it<font color="#E5E5E5"> so we just need to</font><font color="#CCCCCC"> add one simple</font>

411
00:16:21,870 --> 00:16:26,460
character<font color="#E5E5E5"> and that's the dollar sign and</font>

412
00:16:23,670 --> 00:16:29,550
the end of the<font color="#CCCCCC"> Reg X so now if we try</font><font color="#E5E5E5"> to</font>

413
00:16:26,460 --> 00:16:32,010
access this triggering URL again we

414
00:16:29,550 --> 00:16:34,979
receive a 404 error and now web cache

415
00:16:32,010 --> 00:16:37,439
deception can<font color="#E5E5E5"> be exploited for this web</font>

416
00:16:34,980 --> 00:16:39,960
<font color="#CCCCCC">application and</font><font color="#E5E5E5"> why is that because the</font>

417
00:16:37,440 --> 00:16:42,090
<font color="#CCCCCC">training</font><font color="#E5E5E5"> your eye</font><font color="#CCCCCC"> starts with inbox then</font>

418
00:16:39,960 --> 00:16:44,190
it has a trailing slash but it doesn't

419
00:16:42,090 --> 00:16:46,320
end here<font color="#E5E5E5"> so we don't have</font><font color="#CCCCCC"> a match and we</font>

420
00:16:44,190 --> 00:16:48,990
receive an arrow and now<font color="#E5E5E5"> this issue is</font>

421
00:16:46,320 --> 00:16:52,770
fixed<font color="#E5E5E5"> no FK just no</font><font color="#CCCCCC"> webpage deception</font>

422
00:16:48,990 --> 00:16:54,630
for this application<font color="#CCCCCC"> ok let's move on</font><font color="#E5E5E5"> to</font>

423
00:16:52,770 --> 00:16:57,480
the second<font color="#E5E5E5"> why</font><font color="#CCCCCC"> the hell questions</font><font color="#E5E5E5"> and</font>

424
00:16:54,630 --> 00:16:59,580
this is why the hell with a<font color="#E5E5E5"> caching</font>

425
00:16:57,480 --> 00:17:03,140
mechanism we act like<font color="#E5E5E5"> this why the hell</font>

426
00:16:59,580 --> 00:17:05,339
with a caching mechanism first allow

427
00:17:03,140 --> 00:17:06,930
<font color="#E5E5E5">identify the type</font><font color="#CCCCCC"> of file that it just</font>

428
00:17:05,339 --> 00:17:09,929
receives according to the end of the URL

429
00:17:06,930 --> 00:17:11,400
<font color="#E5E5E5">and second why will it override or</font>

430
00:17:09,930 --> 00:17:13,470
disregard the caching headers that

431
00:17:11,400 --> 00:17:15,120
arrives with<font color="#CCCCCC"> the file from</font><font color="#E5E5E5"> the web</font>

432
00:17:13,470 --> 00:17:19,589
server so let's have<font color="#E5E5E5"> a look at two</font>

433
00:17:15,119 --> 00:17:21,419
<font color="#CCCCCC">examples so the first one is is al</font><font color="#E5E5E5"> error</font>

434
00:17:19,589 --> 00:17:22,139
for those of you<font color="#E5E5E5"> was not familiar with</font>

435
00:17:21,420 --> 00:17:24,150
<font color="#E5E5E5">it</font>

436
00:17:22,140 --> 00:17:26,339
stands<font color="#E5E5E5"> for</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> request</font><font color="#CCCCCC"> routing</font>

437
00:17:24,150 --> 00:17:29,460
<font color="#E5E5E5">that's a feature that</font><font color="#CCCCCC"> makes</font><font color="#E5E5E5"> a is a load</font>

438
00:17:26,339 --> 00:17:31,320
balancer<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> is a you can set your own</font>

439
00:17:29,460 --> 00:17:32,880
caching rules<font color="#CCCCCC"> it looks like this</font><font color="#E5E5E5"> and</font>

440
00:17:31,320 --> 00:17:35,460
<font color="#E5E5E5">look at the bottom</font><font color="#CCCCCC"> it's marked in yellow</font>

441
00:17:32,880 --> 00:17:37,530
<font color="#E5E5E5">in order to identify the type</font><font color="#CCCCCC"> of file</font>

442
00:17:35,460 --> 00:17:39,960
that<font color="#E5E5E5"> is need to be needed to be cached</font>

443
00:17:37,530 --> 00:17:41,879
<font color="#E5E5E5">it uses a</font><font color="#CCCCCC"> wild-card and identify the</font>

444
00:17:39,960 --> 00:17:44,220
type<font color="#CCCCCC"> of file according to the end of the</font>

445
00:17:41,880 --> 00:17:46,560
URL<font color="#CCCCCC"> and looks at the top you can</font><font color="#E5E5E5"> always</font>

446
00:17:44,220 --> 00:17:47,910
<font color="#E5E5E5">apply</font><font color="#CCCCCC"> this rule</font><font color="#E5E5E5"> meaning it just</font>

447
00:17:46,560 --> 00:17:50,310
disregard the caching headers that

448
00:17:47,910 --> 00:17:52,350
<font color="#CCCCCC">arrived from the</font><font color="#E5E5E5"> web server</font><font color="#CCCCCC"> so if we</font>

449
00:17:50,310 --> 00:17:54,870
have this<font color="#CCCCCC"> configuration for the iast</font>

450
00:17:52,350 --> 00:17:58,740
load balancer<font color="#CCCCCC"> is sarah</font><font color="#E5E5E5"> and we access</font>

451
00:17:54,870 --> 00:18:00,300
this<font color="#CCCCCC"> Trillian URL welcome without PHP</font>

452
00:17:58,740 --> 00:18:01,920
page is an actual<font color="#E5E5E5"> page in the</font>

453
00:18:00,300 --> 00:18:04,740
application<font color="#CCCCCC"> and we add a name of a</font>

454
00:18:01,920 --> 00:18:06,150
non-existent<font color="#E5E5E5"> file afterwards</font><font color="#CCCCCC"> then if we</font>

455
00:18:04,740 --> 00:18:08,520
have if we<font color="#E5E5E5"> have a look at the</font><font color="#CCCCCC"> caching</font>

456
00:18:06,150 --> 00:18:10,740
directory on<font color="#CCCCCC"> iOS</font><font color="#E5E5E5"> we can see that there</font>

457
00:18:08,520 --> 00:18:13,680
is<font color="#E5E5E5"> a new direct we just created named</font>

458
00:18:10,740 --> 00:18:15,600
welcome dot PHP and inside it there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

459
00:18:13,680 --> 00:18:18,480
new file<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> cached</font><font color="#E5E5E5"> file called test</font>

460
00:18:15,600 --> 00:18:20,429
dot CSS<font color="#E5E5E5"> but test dot CSS doesn't really</font>

461
00:18:18,480 --> 00:18:22,470
exist on the web application why<font color="#E5E5E5"> but you</font>

462
00:18:20,430 --> 00:18:24,750
already<font color="#E5E5E5"> know what's inside it and that's</font>

463
00:18:22,470 --> 00:18:26,940
the content the private<font color="#E5E5E5"> content of the</font>

464
00:18:24,750 --> 00:18:30,720
<font color="#E5E5E5">user's</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> of the user welcome dot PHP</font>

465
00:18:26,940 --> 00:18:34,410
page<font color="#E5E5E5"> let's see another example let's</font>

466
00:18:30,720 --> 00:18:36,240
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about a CDN CloudFlare now must say</font>

467
00:18:34,410 --> 00:18:37,890
a good<font color="#E5E5E5"> word about both cloud fair and</font>

468
00:18:36,240 --> 00:18:41,040
<font color="#E5E5E5">Akamai they both can meet the attack</font>

469
00:18:37,890 --> 00:18:44,370
condition and many<font color="#E5E5E5"> web sites on the</font><font color="#CCCCCC"> web</font>

470
00:18:41,040 --> 00:18:46,320
use their services so<font color="#CCCCCC"> after I posted my</font>

471
00:18:44,370 --> 00:18:48,030
my blog a few<font color="#E5E5E5"> months ago they posted</font>

472
00:18:46,320 --> 00:18:50,580
their own blog explaining<font color="#CCCCCC"> about</font><font color="#E5E5E5"> web page</font>

473
00:18:48,030 --> 00:18:53,850
deception<font color="#E5E5E5"> and how to prevent it which I</font>

474
00:18:50,580 --> 00:18:56,520
respect<font color="#CCCCCC"> okay so let's have a</font><font color="#E5E5E5"> look at how</font>

475
00:18:53,850 --> 00:18:59,580
cluttering server<font color="#E5E5E5"> decides whether to</font>

476
00:18:56,520 --> 00:19:01,650
cache a file that he gets or not so in

477
00:18:59,580 --> 00:19:04,230
order<font color="#E5E5E5"> for a file to be cached on a cloud</font>

478
00:19:01,650 --> 00:19:06,000
for serving it needs to go to<font color="#E5E5E5"> two phases</font>

479
00:19:04,230 --> 00:19:08,130
<font color="#E5E5E5">now the first phase is called the</font>

480
00:19:06,000 --> 00:19:09,920
<font color="#E5E5E5">eligibility phase and in this phase the</font>

481
00:19:08,130 --> 00:19:13,080
server<font color="#E5E5E5"> takes a</font><font color="#CCCCCC"> look at</font><font color="#E5E5E5"> the URL and</font>

482
00:19:09,920 --> 00:19:15,240
according<font color="#CCCCCC"> to the end of it looks for one</font>

483
00:19:13,080 --> 00:19:17,340
of the<font color="#E5E5E5"> following static extensions you</font>

484
00:19:15,240 --> 00:19:19,800
can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> here CSS you can see who</font>

485
00:19:17,340 --> 00:19:20,639
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> some images for Microsoft</font>

486
00:19:19,800 --> 00:19:23,610
<font color="#E5E5E5">Office files</font>

487
00:19:20,640 --> 00:19:25,830
<font color="#E5E5E5">torrent so if the URL ends with one of</font>

488
00:19:23,610 --> 00:19:27,479
the<font color="#CCCCCC"> following extension we just move on</font>

489
00:19:25,830 --> 00:19:29,790
to<font color="#E5E5E5"> step number two and you already know</font>

490
00:19:27,480 --> 00:19:32,640
<font color="#E5E5E5">how you can make the web server send the</font>

491
00:19:29,790 --> 00:19:34,980
content of<font color="#E5E5E5"> a private file of a user with</font>

492
00:19:32,640 --> 00:19:35,940
one of these extensions<font color="#CCCCCC"> ok so we move on</font>

493
00:19:34,980 --> 00:19:39,210
to phase number<font color="#CCCCCC"> two</font>

494
00:19:35,940 --> 00:19:41,159
the left<font color="#E5E5E5"> phase by the way so this phase</font>

495
00:19:39,210 --> 00:19:45,149
<font color="#E5E5E5">is called the disqualification phase and</font>

496
00:19:41,159 --> 00:19:46,919
in<font color="#E5E5E5"> this phase the server takes a look at</font>

497
00:19:45,149 --> 00:19:49,139
<font color="#E5E5E5">the</font><font color="#CCCCCC"> cut at the caching headers of the</font>

498
00:19:46,919 --> 00:19:51,600
<font color="#CCCCCC">file</font><font color="#E5E5E5"> that it just receives from</font><font color="#CCCCCC"> the web</font>

499
00:19:49,139 --> 00:19:53,939
server<font color="#CCCCCC"> now here we have a problem</font>

500
00:19:51,600 --> 00:19:55,469
<font color="#CCCCCC">because</font><font color="#E5E5E5"> you already know that the</font><font color="#CCCCCC"> file</font>

501
00:19:53,940 --> 00:19:57,659
<font color="#CCCCCC">arise from</font><font color="#E5E5E5"> the web server with a no</font>

502
00:19:55,470 --> 00:20:00,990
cache directive meaning the file<font color="#E5E5E5"> won't</font>

503
00:19:57,659 --> 00:20:04,500
be cached<font color="#E5E5E5"> but exactly for that we have</font><font color="#CCCCCC"> H</font>

504
00:20:00,990 --> 00:20:07,019
cache<font color="#E5E5E5"> expired TTL to</font><font color="#CCCCCC"> the rescue now it</font>

505
00:20:04,500 --> 00:20:09,120
is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> feature that you</font><font color="#CCCCCC"> can set</font><font color="#E5E5E5"> in your</font>

506
00:20:07,019 --> 00:20:11,100
cloud<font color="#CCCCCC"> fair environment</font><font color="#E5E5E5"> called education</font>

507
00:20:09,120 --> 00:20:13,379
<font color="#CCCCCC">expert ETL it was released</font><font color="#E5E5E5"> by cloud for</font>

508
00:20:11,100 --> 00:20:15,269
around<font color="#E5E5E5"> four years ago and it posted a</font>

509
00:20:13,379 --> 00:20:18,500
blog<font color="#E5E5E5"> to explain why you should use</font><font color="#CCCCCC"> it</font>

510
00:20:15,269 --> 00:20:21,389
<font color="#E5E5E5">let's read a part of it so the title was</font>

511
00:20:18,500 --> 00:20:24,629
education<font color="#CCCCCC"> Speyer TTL</font><font color="#E5E5E5"> easiest way</font><font color="#CCCCCC"> to</font>

512
00:20:21,389 --> 00:20:27,029
override any existing headers sounds

513
00:20:24,629 --> 00:20:29,189
<font color="#CCCCCC">interesting right</font><font color="#E5E5E5"> let's read more</font><font color="#CCCCCC"> with</font>

514
00:20:27,029 --> 00:20:31,320
<font color="#CCCCCC">cache</font><font color="#E5E5E5"> everything we respect all headers</font>

515
00:20:29,190 --> 00:20:34,019
if there is any header in place from<font color="#CCCCCC"> the</font>

516
00:20:31,320 --> 00:20:37,080
server or CMS solution<font color="#CCCCCC"> ACK WordPress we</font>

517
00:20:34,019 --> 00:20:39,149
will respect it however we got many

518
00:20:37,080 --> 00:20:41,629
requests from customers one in an easy

519
00:20:39,149 --> 00:20:43,799
<font color="#CCCCCC">way</font><font color="#E5E5E5"> to override any existing headers</font>

520
00:20:41,629 --> 00:20:46,879
<font color="#E5E5E5">today we are releasing a new feature</font>

521
00:20:43,799 --> 00:20:49,500
that<font color="#E5E5E5"> does just that</font>

522
00:20:46,879 --> 00:20:52,019
<font color="#E5E5E5">fantastic right the customers of cloud</font>

523
00:20:49,500 --> 00:20:54,509
were one at an easy way<font color="#CCCCCC"> to override any</font>

524
00:20:52,019 --> 00:20:57,090
existing headers<font color="#CCCCCC"> that arrived from their</font>

525
00:20:54,509 --> 00:20:59,490
own web<font color="#E5E5E5"> server so they just need to set</font>

526
00:20:57,090 --> 00:21:00,928
the education expert ETL setting in the

527
00:20:59,490 --> 00:21:04,139
cloud<font color="#E5E5E5"> for environment and that's it</font>

528
00:21:00,929 --> 00:21:06,720
caching headers<font color="#E5E5E5"> are overridden by cloud</font>

529
00:21:04,139 --> 00:21:08,850
flow and this is why<font color="#CCCCCC"> cloud Fleur and</font>

530
00:21:06,720 --> 00:21:12,299
Akamai works in a<font color="#E5E5E5"> similar way they both</font>

531
00:21:08,850 --> 00:21:14,939
can meet this<font color="#E5E5E5"> attack condition</font><font color="#CCCCCC"> okay so</font>

532
00:21:12,299 --> 00:21:19,350
how this can be<font color="#CCCCCC"> prevented so there are a</font>

533
00:21:14,940 --> 00:21:21,690
<font color="#E5E5E5">few ways</font><font color="#CCCCCC"> to do so you can all only</font><font color="#E5E5E5"> cache</font>

534
00:21:19,350 --> 00:21:24,299
files<font color="#E5E5E5"> if the HTTP caching headers allow</font>

535
00:21:21,690 --> 00:21:27,090
<font color="#E5E5E5">now here sometimes there are</font><font color="#CCCCCC"> good reason</font>

536
00:21:24,299 --> 00:21:28,710
to disregard<font color="#E5E5E5"> or to override the caching</font>

537
00:21:27,090 --> 00:21:31,439
headers that<font color="#CCCCCC"> arrive from your web server</font>

538
00:21:28,710 --> 00:21:32,789
<font color="#CCCCCC">now if you can avoid it then you</font>

539
00:21:31,440 --> 00:21:34,830
probably<font color="#E5E5E5"> should but if you need to</font>

540
00:21:32,789 --> 00:21:37,408
<font color="#CCCCCC">override or to disregard these caching</font>

541
00:21:34,830 --> 00:21:39,570
headers there are other<font color="#E5E5E5"> other things</font>

542
00:21:37,409 --> 00:21:41,639
that you can<font color="#E5E5E5"> do in order to prevent your</font>

543
00:21:39,570 --> 00:21:43,250
application<font color="#E5E5E5"> from being vulnerable to web</font>

544
00:21:41,639 --> 00:21:45,869
cues deception let's have a look at them

545
00:21:43,250 --> 00:21:48,600
another<font color="#E5E5E5"> option is to store all static</font>

546
00:21:45,869 --> 00:21:49,560
files in a designated<font color="#E5E5E5"> directory and to</font>

547
00:21:48,600 --> 00:21:53,040
<font color="#E5E5E5">only cache</font>

548
00:21:49,560 --> 00:21:55,620
this directory you can<font color="#CCCCCC"> also</font><font color="#E5E5E5"> cache files</font>

549
00:21:53,040 --> 00:21:57,780
by the<font color="#E5E5E5"> content type HTTP response header</font>

550
00:21:55,620 --> 00:21:59,399
<font color="#E5E5E5">now here you depend on the</font><font color="#CCCCCC"> technology of</font>

551
00:21:57,780 --> 00:22:02,010
<font color="#E5E5E5">the caching mechanism that you</font><font color="#CCCCCC"> are using</font>

552
00:21:59,400 --> 00:22:04,710
some<font color="#CCCCCC"> of them identify the type of</font><font color="#E5E5E5"> file</font>

553
00:22:02,010 --> 00:22:07,200
<font color="#E5E5E5">they receive according</font><font color="#CCCCCC"> to the end of the</font>

554
00:22:04,710 --> 00:22:08,880
URL<font color="#CCCCCC"> according to its extension</font><font color="#E5E5E5"> some of</font>

555
00:22:07,200 --> 00:22:11,100
them do<font color="#E5E5E5"> it according</font><font color="#CCCCCC"> to the content type</font>

556
00:22:08,880 --> 00:22:13,460
HTTP response header<font color="#E5E5E5"> some of them let</font>

557
00:22:11,100 --> 00:22:15,840
you choose like nginx<font color="#E5E5E5"> so if you can</font>

558
00:22:13,460 --> 00:22:17,850
configure your caching mechanism to do

559
00:22:15,840 --> 00:22:19,679
it by the content type HTTP response

560
00:22:17,850 --> 00:22:21,840
header and not<font color="#E5E5E5"> according</font><font color="#CCCCCC"> to the end of</font>

561
00:22:19,680 --> 00:22:25,170
the URL<font color="#E5E5E5"> then you should do it</font><font color="#CCCCCC"> and</font>

562
00:22:21,840 --> 00:22:27,750
another<font color="#CCCCCC"> option is to not</font><font color="#E5E5E5"> accept these</font>

563
00:22:25,170 --> 00:22:30,690
triggering<font color="#CCCCCC"> URLs</font><font color="#E5E5E5"> don't let your</font>

564
00:22:27,750 --> 00:22:32,400
application to be<font color="#E5E5E5"> so permissive for URLs</font>

565
00:22:30,690 --> 00:22:35,700
like<font color="#E5E5E5"> home dot PHP which is an actual</font>

566
00:22:32,400 --> 00:22:38,100
<font color="#E5E5E5">page slash non-existent dot CSS don't</font>

567
00:22:35,700 --> 00:22:40,020
<font color="#CCCCCC">return a 200 ok</font><font color="#E5E5E5"> response just return a</font>

568
00:22:38,100 --> 00:22:43,709
302<font color="#E5E5E5"> over 404</font>

569
00:22:40,020 --> 00:22:45,090
instead so later on<font color="#E5E5E5"> today I'm going to</font>

570
00:22:43,710 --> 00:22:47,070
release<font color="#E5E5E5"> the white paper explaining all</font>

571
00:22:45,090 --> 00:22:49,080
about web<font color="#CCCCCC"> 57</font><font color="#E5E5E5"> and it includes some</font>

572
00:22:47,070 --> 00:22:51,990
<font color="#CCCCCC">additional technologies that can meet</font>

573
00:22:49,080 --> 00:22:55,860
the<font color="#E5E5E5"> attack conditions like nginx asp.net</font>

574
00:22:51,990 --> 00:22:57,840
<font color="#E5E5E5">and PHP and everything you just seen in</font>

575
00:22:55,860 --> 00:22:59,429
this talk<font color="#E5E5E5"> so thank you very much for</font>

576
00:22:57,840 --> 00:23:00,429
being<font color="#CCCCCC"> here today</font><font color="#E5E5E5"> are we appreciated and</font>

577
00:22:59,430 --> 00:23:03,559
enjoy Vegas

578
00:23:00,430 --> 00:23:03,559
[Applause]

