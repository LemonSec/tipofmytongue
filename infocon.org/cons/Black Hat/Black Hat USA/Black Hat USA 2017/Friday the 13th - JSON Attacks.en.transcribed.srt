1
00:00:00,000 --> 00:00:03,990
my name is Avram<font color="#E5E5E5"> you know time also</font>

2
00:00:01,439 --> 00:00:06,899
<font color="#CCCCCC">known as upon tester principle security</font>

3
00:00:03,990 --> 00:00:08,490
researcher with<font color="#E5E5E5"> HP fortify team and here</font>

4
00:00:06,899 --> 00:00:11,040
with me<font color="#CCCCCC"> my colleague</font><font color="#E5E5E5"> Alexander meters</font>

5
00:00:08,490 --> 00:00:14,929
which is<font color="#CCCCCC"> also</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> researcher with</font>

6
00:00:11,040 --> 00:00:17,970
<font color="#E5E5E5">the HP</font><font color="#CCCCCC"> fortified team so we have a</font>

7
00:00:14,929 --> 00:00:21,448
packed agenda for today so let's jump

8
00:00:17,970 --> 00:00:24,090
<font color="#CCCCCC">straight in 2016 last year was the year</font>

9
00:00:21,449 --> 00:00:26,630
of<font color="#CCCCCC"> Java</font><font color="#E5E5E5"> desalinization attacks right it</font>

10
00:00:24,090 --> 00:00:28,800
was a very well known vector<font color="#E5E5E5"> since 2011</font>

11
00:00:26,630 --> 00:00:30,779
<font color="#CCCCCC">but probably because of</font><font color="#E5E5E5"> the lack of</font>

12
00:00:28,800 --> 00:00:33,300
remote code execution gadgets in very

13
00:00:30,779 --> 00:00:36,660
popular libraries this vulnerability

14
00:00:33,300 --> 00:00:38,309
kind of got ignored<font color="#E5E5E5"> by the community and</font>

15
00:00:36,660 --> 00:00:42,750
<font color="#E5E5E5">no one was actually</font><font color="#CCCCCC"> looking for it</font><font color="#E5E5E5"> until</font>

16
00:00:38,309 --> 00:00:45,000
<font color="#CCCCCC">last year</font><font color="#E5E5E5"> so this is also true for the</font>

17
00:00:42,750 --> 00:00:46,620
dotnet<font color="#E5E5E5"> visualization it's a very</font><font color="#CCCCCC"> well</font>

18
00:00:45,000 --> 00:00:49,079
<font color="#CCCCCC">known vector at least for the binary</font>

19
00:00:46,620 --> 00:00:52,019
<font color="#E5E5E5">formatter and for the net data contract</font>

20
00:00:49,079 --> 00:00:54,300
serializer<font color="#E5E5E5"> because it was presented like</font>

21
00:00:52,020 --> 00:00:57,510
<font color="#E5E5E5">40</font><font color="#CCCCCC"> years ago here in</font><font color="#E5E5E5"> the same conference</font>

22
00:00:54,300 --> 00:00:59,608
<font color="#E5E5E5">by James for so but since there was no</font>

23
00:00:57,510 --> 00:01:01,469
remote code execution<font color="#CCCCCC"> god yet again the</font>

24
00:00:59,609 --> 00:01:02,879
community is not actually<font color="#CCCCCC"> looking for</font>

25
00:01:01,469 --> 00:01:05,250
this<font color="#E5E5E5"> vulnerabilities</font><font color="#CCCCCC"> or kind of ignoring</font>

26
00:01:02,879 --> 00:01:07,500
<font color="#E5E5E5">them so at that</font><font color="#CCCCCC"> time the solution</font><font color="#E5E5E5"> was</font>

27
00:01:05,250 --> 00:01:09,420
like<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> I stopped using Java this</font>

28
00:01:07,500 --> 00:01:10,950
<font color="#CCCCCC">realization altogether</font><font color="#E5E5E5"> it's dangerous</font>

29
00:01:09,420 --> 00:01:13,770
you should not be<font color="#E5E5E5"> seer eyes and trusted</font>

30
00:01:10,950 --> 00:01:15,869
<font color="#E5E5E5">there and developers were like well yeah</font>

31
00:01:13,770 --> 00:01:19,289
I<font color="#E5E5E5"> would like to do so by need to store</font>

32
00:01:15,869 --> 00:01:21,869
my<font color="#E5E5E5"> objects into this database</font><font color="#CCCCCC"> I need to</font>

33
00:01:19,290 --> 00:01:24,509
move our<font color="#CCCCCC"> send these objects across</font><font color="#E5E5E5"> the</font>

34
00:01:21,869 --> 00:01:26,850
wire so I need to use something<font color="#CCCCCC"> and then</font>

35
00:01:24,509 --> 00:01:30,079
the security<font color="#E5E5E5"> experts were like okay then</font>

36
00:01:26,850 --> 00:01:33,780
use something like a secure<font color="#E5E5E5"> JSON or XML</font>

37
00:01:30,079 --> 00:01:35,369
<font color="#E5E5E5">library</font><font color="#CCCCCC"> instead so our goal with this</font>

38
00:01:33,780 --> 00:01:37,829
talk is twofold

39
00:01:35,369 --> 00:01:40,229
first of all we want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> verify those</font>

40
00:01:37,829 --> 00:01:42,539
<font color="#E5E5E5">JSON libraries are any better than the</font>

41
00:01:40,229 --> 00:01:45,270
<font color="#E5E5E5">Java visualizer like the object input</font>

42
00:01:42,540 --> 00:01:47,880
stream<font color="#E5E5E5"> and also raise awareness</font><font color="#CCCCCC"> around</font>

43
00:01:45,270 --> 00:01:51,060
the dotnet<font color="#E5E5E5"> dissertation vulnerabilities</font>

44
00:01:47,880 --> 00:01:54,810
<font color="#E5E5E5">who will be providing a list of</font>

45
00:01:51,060 --> 00:01:56,759
vulnerable<font color="#CCCCCC"> libraries and gadgets</font><font color="#E5E5E5"> so in</font>

46
00:01:54,810 --> 00:01:59,040
the first section<font color="#E5E5E5"> we will</font><font color="#CCCCCC"> cover JSON</font>

47
00:01:56,759 --> 00:02:02,070
libraries for both dotnet<font color="#E5E5E5"> and</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> Java</font>

48
00:01:59,040 --> 00:02:03,840
<font color="#E5E5E5">we will provide gadgets</font><font color="#CCCCCC"> live into</font>

49
00:02:02,070 --> 00:02:06,298
arbitrary code execution<font color="#E5E5E5"> and then we</font>

50
00:02:03,840 --> 00:02:07,920
will have some demos<font color="#E5E5E5"> so in how to get</font>

51
00:02:06,299 --> 00:02:09,690
arbitrary code execution on web

52
00:02:07,920 --> 00:02:11,910
application frameworks<font color="#E5E5E5"> and then the</font>

53
00:02:09,690 --> 00:02:13,620
second<font color="#E5E5E5"> block is about dotnet serializers</font>

54
00:02:11,910 --> 00:02:15,030
we want to raise this awareness

55
00:02:13,620 --> 00:02:16,860
we will provide courteous living to

56
00:02:15,030 --> 00:02:20,550
remote code execution<font color="#E5E5E5"> got yet and again</font>

57
00:02:16,860 --> 00:02:23,099
we will show<font color="#CCCCCC"> you some some demos so with</font>

58
00:02:20,550 --> 00:02:25,560
<font color="#E5E5E5">any further ado let's jump into the JSON</font>

59
00:02:23,099 --> 00:02:28,619
section and just<font color="#CCCCCC"> to set the expectations</font>

60
00:02:25,560 --> 00:02:32,250
clear<font color="#CCCCCC"> we are not</font><font color="#E5E5E5"> talking about JSON</font><font color="#CCCCCC"> when</font>

61
00:02:28,620 --> 00:02:35,069
used to exchange<font color="#E5E5E5"> simple data or simple</font>

62
00:02:32,250 --> 00:02:37,200
JavaScript<font color="#CCCCCC"> object between</font><font color="#E5E5E5"> the front end</font>

63
00:02:35,069 --> 00:02:38,640
like a JavaScript front-end<font color="#E5E5E5"> and maybe I</font>

64
00:02:37,200 --> 00:02:39,720
don't know a spring controller in the

65
00:02:38,640 --> 00:02:41,730
<font color="#CCCCCC">backend or</font><font color="#E5E5E5"> something like that</font>

66
00:02:39,720 --> 00:02:43,980
<font color="#E5E5E5">we're talking about</font><font color="#CCCCCC"> replacing</font><font color="#E5E5E5"> Java</font>

67
00:02:41,730 --> 00:02:46,920
visualization and dotnet this

68
00:02:43,980 --> 00:02:49,679
realization with JSON libraries<font color="#E5E5E5"> which</font>

69
00:02:46,920 --> 00:02:51,660
means that you need to serialize<font color="#E5E5E5"> Java</font>

70
00:02:49,680 --> 00:02:53,810
objects and dotnet objects<font color="#E5E5E5"> and in order</font>

71
00:02:51,660 --> 00:02:55,799
<font color="#CCCCCC">to do so you need to deal with</font>

72
00:02:53,810 --> 00:02:58,530
<font color="#CCCCCC">object-oriented programming features</font>

73
00:02:55,799 --> 00:03:00,239
like<font color="#E5E5E5"> how I'm going to serialize a java</font>

74
00:02:58,530 --> 00:03:02,670
applet<font color="#E5E5E5"> or how I'm going to serialize a</font>

75
00:03:00,239 --> 00:03:05,299
system object<font color="#CCCCCC"> Internet</font><font color="#E5E5E5"> I'm going to deal</font>

76
00:03:02,670 --> 00:03:08,958
with<font color="#E5E5E5"> generics</font><font color="#CCCCCC"> I'm going to deal with</font>

77
00:03:05,299 --> 00:03:11,879
<font color="#E5E5E5">interface figures polymorphism and so on</font>

78
00:03:08,959 --> 00:03:13,799
so a very quick<font color="#CCCCCC"> recap on how attackers</font>

79
00:03:11,879 --> 00:03:15,319
were able<font color="#CCCCCC"> to get a rhetorical execution</font>

80
00:03:13,799 --> 00:03:17,720
with javadi's realization attacks

81
00:03:15,319 --> 00:03:21,138
basically they were sending<font color="#CCCCCC"> like a</font>

82
00:03:17,720 --> 00:03:23,430
stream of<font color="#E5E5E5"> untrusted data to the</font>

83
00:03:21,139 --> 00:03:27,049
visualizer to the vulnerable endpoint

84
00:03:23,430 --> 00:03:29,160
<font color="#E5E5E5">and this data contained some type</font>

85
00:03:27,049 --> 00:03:32,639
discriminators that is nothing<font color="#CCCCCC"> else that</font>

86
00:03:29,160 --> 00:03:34,139
the class<font color="#E5E5E5"> name for this</font><font color="#CCCCCC"> for some types</font>

87
00:03:32,639 --> 00:03:36,900
<font color="#CCCCCC">of</font><font color="#E5E5E5"> arbitrary types that the attacker</font>

88
00:03:34,139 --> 00:03:38,670
could control then the desi eliezer were

89
00:03:36,900 --> 00:03:40,709
basically instance here in<font color="#E5E5E5"> these types</font>

90
00:03:38,670 --> 00:03:43,470
and then invoking some visualization

91
00:03:40,709 --> 00:03:47,609
callbacks<font color="#E5E5E5"> on these types right so</font>

92
00:03:43,470 --> 00:03:50,579
basically attacker<font color="#CCCCCC"> need need to find a</font>

93
00:03:47,609 --> 00:03:53,930
type or<font color="#CCCCCC"> a class containing</font><font color="#E5E5E5"> a read object</font>

94
00:03:50,579 --> 00:03:57,060
or read resolve method<font color="#E5E5E5"> which could be</font>

95
00:03:53,930 --> 00:03:59,099
chained together with other types or

96
00:03:57,060 --> 00:04:00,180
classes in order<font color="#CCCCCC"> to assembly</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> cut the</font>

97
00:03:59,099 --> 00:04:00,810
<font color="#E5E5E5">chains leading to arbitrary code</font>

98
00:04:00,180 --> 00:04:03,120
execution

99
00:04:00,810 --> 00:04:08,549
however JSON libraries don't<font color="#E5E5E5"> normally</font>

100
00:04:03,120 --> 00:04:10,590
invoke any DC<font color="#E5E5E5"> allocation callbacks so we</font>

101
00:04:08,549 --> 00:04:14,099
need to start<font color="#CCCCCC"> this cut yet sense</font><font color="#E5E5E5"> in a</font>

102
00:04:10,590 --> 00:04:16,680
different way so<font color="#CCCCCC"> let's see how the</font>

103
00:04:14,099 --> 00:04:18,690
adjacent libraries to reconstruct the

104
00:04:16,680 --> 00:04:20,880
objects when<font color="#E5E5E5"> DC</font><font color="#CCCCCC"> a licen</font><font color="#E5E5E5"> and see if we</font>

105
00:04:18,690 --> 00:04:22,710
cannot take benefit of some of these

106
00:04:20,880 --> 00:04:25,200
<font color="#CCCCCC">methods in order to start our gadget</font>

107
00:04:22,710 --> 00:04:26,270
chain<font color="#E5E5E5"> so normally this libraries it</font>

108
00:04:25,200 --> 00:04:27,860
depends<font color="#E5E5E5"> on the library</font>

109
00:04:26,270 --> 00:04:29,960
every library<font color="#E5E5E5"> is different from the</font>

110
00:04:27,860 --> 00:04:31,490
others<font color="#CCCCCC"> but normally they will invoke the</font>

111
00:04:29,960 --> 00:04:33,049
<font color="#E5E5E5">default constructor which is not very</font>

112
00:04:31,490 --> 00:04:34,909
<font color="#E5E5E5">useful for</font><font color="#CCCCCC"> the attackers because it</font>

113
00:04:33,050 --> 00:04:37,400
takes no parameters<font color="#CCCCCC"> and then they will</font>

114
00:04:34,909 --> 00:04:39,740
use<font color="#CCCCCC"> either reflection</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> Colin setters</font>

115
00:04:37,400 --> 00:04:42,109
<font color="#E5E5E5">in order</font><font color="#CCCCCC"> to set the</font><font color="#E5E5E5"> values of the fields</font>

116
00:04:39,740 --> 00:04:43,370
<font color="#E5E5E5">or</font><font color="#CCCCCC"> the properties of the class</font><font color="#E5E5E5"> some of</font>

117
00:04:42,110 --> 00:04:45,139
<font color="#CCCCCC">the libraries will invoke some</font>

118
00:04:43,370 --> 00:04:47,449
visualization<font color="#CCCCCC"> callbacks or a special</font>

119
00:04:45,139 --> 00:04:48,800
constructors<font color="#E5E5E5"> some of them will call type</font>

120
00:04:47,449 --> 00:04:51,560
<font color="#CCCCCC">converters that</font><font color="#E5E5E5"> is I don't need a</font>

121
00:04:48,800 --> 00:04:54,050
specific<font color="#E5E5E5"> type which we don't have</font><font color="#CCCCCC"> time</font>

122
00:04:51,560 --> 00:04:55,520
to cover in<font color="#E5E5E5"> this talk but it's included</font>

123
00:04:54,050 --> 00:04:58,880
<font color="#E5E5E5">in our white paper</font><font color="#CCCCCC"> that will be</font>

124
00:04:55,520 --> 00:05:01,219
published<font color="#E5E5E5"> today</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think so let's just</font>

125
00:04:58,880 --> 00:05:02,990
make<font color="#CCCCCC"> sure that you check it</font><font color="#E5E5E5"> out and then</font>

126
00:05:01,220 --> 00:05:04,280
most of the libraries will also invoke

127
00:05:02,990 --> 00:05:07,099
some common methods like for example

128
00:05:04,280 --> 00:05:10,099
when dealing with hash tables<font color="#E5E5E5"> hash code</font>

129
00:05:07,099 --> 00:05:12,620
or equals maker invoke to<font color="#CCCCCC"> a string may</font>

130
00:05:10,099 --> 00:05:15,500
get<font color="#CCCCCC"> invoke when</font><font color="#E5E5E5"> raising an exception</font><font color="#CCCCCC"> if</font>

131
00:05:12,620 --> 00:05:17,810
you can force the library to raise an

132
00:05:15,500 --> 00:05:19,759
exception<font color="#CCCCCC"> finalizes always</font><font color="#E5E5E5"> invoke by the</font>

133
00:05:17,810 --> 00:05:21,680
garbage collector<font color="#CCCCCC"> where click when</font>

134
00:05:19,759 --> 00:05:23,690
<font color="#CCCCCC">claiming the memory so we can actually</font>

135
00:05:21,680 --> 00:05:26,389
<font color="#E5E5E5">start our gadget change using some of</font>

136
00:05:23,690 --> 00:05:29,000
these<font color="#E5E5E5"> libraries by far the most common</font>

137
00:05:26,389 --> 00:05:30,949
one used<font color="#E5E5E5"> by all these data libraries is</font>

138
00:05:29,000 --> 00:05:33,530
the setters<font color="#E5E5E5"> most of the libraries if not</font>

139
00:05:30,949 --> 00:05:36,259
all of<font color="#CCCCCC"> them will invoke setters</font><font color="#E5E5E5"> so what</font>

140
00:05:33,530 --> 00:05:38,000
we did is research and look for God yet

141
00:05:36,259 --> 00:05:39,530
starting with setters<font color="#CCCCCC"> living through</font>

142
00:05:38,000 --> 00:05:45,949
arbitrary<font color="#E5E5E5"> code execution both in Java</font>

143
00:05:39,530 --> 00:05:49,219
and.net<font color="#E5E5E5"> let's have a look on a few</font>

144
00:05:45,949 --> 00:05:50,479
godred in dotnet<font color="#E5E5E5"> all of them can lead to</font>

145
00:05:49,219 --> 00:05:52,340
arbitrary code execution

146
00:05:50,479 --> 00:05:54,680
<font color="#E5E5E5">some of them has the</font><font color="#CCCCCC"> own requirements</font>

147
00:05:52,340 --> 00:05:56,869
<font color="#CCCCCC">and/or limitation but</font><font color="#E5E5E5"> we believe so that</font>

148
00:05:54,680 --> 00:06:00,440
<font color="#E5E5E5">it's not very</font><font color="#CCCCCC"> difficult</font><font color="#E5E5E5"> to pick up</font>

149
00:05:56,870 --> 00:06:03,770
proper one<font color="#CCCCCC"> for specific library so our</font>

150
00:06:00,440 --> 00:06:06,020
first gadget is<font color="#E5E5E5"> a set of path property</font>

151
00:06:03,770 --> 00:06:08,359
in assembly installer<font color="#CCCCCC"> class it allows</font>

152
00:06:06,020 --> 00:06:10,330
code execution during<font color="#E5E5E5"> library loading</font>

153
00:06:08,360 --> 00:06:13,490
<font color="#E5E5E5">from path controlled by an attacker</font>

154
00:06:10,330 --> 00:06:14,710
<font color="#E5E5E5">there is no additional</font><font color="#CCCCCC"> requirements in</font>

155
00:06:13,490 --> 00:06:17,360
case if

156
00:06:14,710 --> 00:06:21,799
<font color="#CCCCCC">assembly this payload is on local</font>

157
00:06:17,360 --> 00:06:24,860
<font color="#E5E5E5">machine but if we try</font><font color="#CCCCCC"> to provide</font><font color="#E5E5E5"> remote</font>

158
00:06:21,800 --> 00:06:27,380
resources dotnet framework may have some

159
00:06:24,860 --> 00:06:29,180
additional<font color="#E5E5E5"> security checks the next two</font>

160
00:06:27,380 --> 00:06:33,710
<font color="#CCCCCC">gadgets are uses</font>

161
00:06:29,180 --> 00:06:35,899
<font color="#CCCCCC">user</font><font color="#E5E5E5"> sam'l parser we will show a bit</font>

162
00:06:33,710 --> 00:06:39,549
later how<font color="#CCCCCC"> it can be used for</font><font color="#E5E5E5"> arbitrary</font>

163
00:06:35,899 --> 00:06:42,099
<font color="#E5E5E5">method</font><font color="#CCCCCC"> invocation so</font>

164
00:06:39,550 --> 00:06:45,660
property inspector font and color data

165
00:06:42,099 --> 00:06:46,870
in workflow designer type<font color="#E5E5E5"> a requires</font>

166
00:06:45,660 --> 00:06:48,909
<font color="#E5E5E5">single-threaded</font>

167
00:06:46,870 --> 00:06:51,759
apartment set it's quite strong

168
00:06:48,909 --> 00:06:53,469
requirement<font color="#CCCCCC"> but if your target has such</font>

169
00:06:51,759 --> 00:06:56,409
configuration you will get remote code

170
00:06:53,470 --> 00:06:59,860
execution<font color="#CCCCCC"> the next gadget is source</font><font color="#E5E5E5"> a</font>

171
00:06:56,409 --> 00:07:03,960
setter<font color="#E5E5E5"> in resource dictionary it has a</font>

172
00:06:59,860 --> 00:07:08,470
few<font color="#CCCCCC"> requirements to Jason</font><font color="#E5E5E5"> and Marshall</font><font color="#CCCCCC"> s</font>

173
00:07:03,960 --> 00:07:11,609
they should call setters in<font color="#E5E5E5"> four types</font>

174
00:07:08,470 --> 00:07:14,440
that implement a dictionary interface

175
00:07:11,610 --> 00:07:18,280
<font color="#E5E5E5">often in such case our Marshalls are</font>

176
00:07:14,440 --> 00:07:20,259
just populating key value pairs<font color="#CCCCCC"> also</font>

177
00:07:18,280 --> 00:07:23,380
they should<font color="#E5E5E5"> be able to reconstruct</font>

178
00:07:20,259 --> 00:07:27,639
<font color="#E5E5E5">system override type and this type does</font>

179
00:07:23,380 --> 00:07:29,199
<font color="#CCCCCC">not have</font><font color="#E5E5E5"> default</font><font color="#CCCCCC"> constructor</font><font color="#E5E5E5"> but very</font>

180
00:07:27,639 --> 00:07:32,979
often parser can do this

181
00:07:29,199 --> 00:07:35,860
and finally our guarded in object data

182
00:07:32,979 --> 00:07:40,090
provider type it's quite flexible<font color="#E5E5E5"> and I</font>

183
00:07:35,860 --> 00:07:43,270
love<font color="#E5E5E5"> allow allows us to use a</font><font color="#CCCCCC"> lot of</font>

184
00:07:40,090 --> 00:07:45,909
vector attacks so as a<font color="#CCCCCC"> result we were</font>

185
00:07:43,270 --> 00:07:49,359
<font color="#CCCCCC">able to use this gadget in almost all</font>

186
00:07:45,909 --> 00:07:53,860
<font color="#CCCCCC">our</font><font color="#E5E5E5"> and Marshalls and</font><font color="#CCCCCC"> formatters let's</font>

187
00:07:49,360 --> 00:07:56,650
have<font color="#CCCCCC"> a look on it closer so it's called</font>

188
00:07:53,860 --> 00:07:58,509
diagram that<font color="#E5E5E5"> will cover a fresh method a</font>

189
00:07:56,650 --> 00:08:00,909
refreshment<font color="#E5E5E5"> that will invoke begin choir</font>

190
00:07:58,509 --> 00:08:02,590
<font color="#E5E5E5">begin query will call query worker and</font>

191
00:08:00,909 --> 00:08:05,199
finally in invoke method<font color="#CCCCCC"> earnest</font>

192
00:08:02,590 --> 00:08:08,880
<font color="#E5E5E5">instance we can</font><font color="#CCCCCC"> see line that you is</font>

193
00:08:05,199 --> 00:08:08,880
<font color="#CCCCCC">that you'll call our arbitrary matter</font>

194
00:08:09,240 --> 00:08:16,449
here we can see<font color="#E5E5E5"> example of JSON payload</font>

195
00:08:12,550 --> 00:08:19,139
that<font color="#E5E5E5"> will pop-up calculator in json dot</font>

196
00:08:16,449 --> 00:08:19,139
net parser

197
00:08:19,340 --> 00:08:27,000
<font color="#E5E5E5">this gadget offer us the next way</font><font color="#CCCCCC"> to for</font>

198
00:08:25,260 --> 00:08:30,890
attack<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> call non default</font>

199
00:08:27,000 --> 00:08:32,390
constructor with own parameters we can<font color="#E5E5E5"> a</font>

200
00:08:30,890 --> 00:08:36,270
[Music]

201
00:08:32,390 --> 00:08:40,080
in invoke method on unmarshal<font color="#CCCCCC"> at object</font>

202
00:08:36,270 --> 00:08:43,079
<font color="#E5E5E5">or we can call any public method</font>

203
00:08:40,080 --> 00:08:47,960
including instance including instant and

204
00:08:43,080 --> 00:08:47,960
<font color="#CCCCCC">static ones these are</font><font color="#E5E5E5"> our own parameters</font>

205
00:08:49,070 --> 00:08:55,320
<font color="#E5E5E5">Java has the own</font><font color="#CCCCCC"> setter gadget as well</font>

206
00:08:52,110 --> 00:08:57,300
after<font color="#CCCCCC"> our our last year research on JDI</font>

207
00:08:55,320 --> 00:09:01,140
injection attacks we<font color="#CCCCCC"> have found a few</font>

208
00:08:57,300 --> 00:09:03,479
<font color="#CCCCCC">setters that</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> gene yellow cup</font>

209
00:09:01,140 --> 00:09:06,870
method<font color="#CCCCCC"> by the way oracle recently</font>

210
00:09:03,480 --> 00:09:09,510
disabled<font color="#CCCCCC"> ami and corba vectors in</font>

211
00:09:06,870 --> 00:09:13,710
default configuration of<font color="#E5E5E5"> java but</font><font color="#CCCCCC"> LDAP</font>

212
00:09:09,510 --> 00:09:16,590
vector still works<font color="#CCCCCC"> so set session</font><font color="#E5E5E5"> factor</font>

213
00:09:13,710 --> 00:09:18,750
<font color="#E5E5E5">jin-gi name in statistic service class</font>

214
00:09:16,590 --> 00:09:23,850
<font color="#CCCCCC">we</font><font color="#E5E5E5"> already mentioned about this in our</font>

215
00:09:18,750 --> 00:09:26,400
talk at blackhat 2016<font color="#CCCCCC"> very similar</font><font color="#E5E5E5"> to it</font>

216
00:09:23,850 --> 00:09:29,610
is to string gadget<font color="#E5E5E5"> from remote client</font>

217
00:09:26,400 --> 00:09:33,870
use the transaction<font color="#CCCCCC"> Clause and finally</font>

218
00:09:29,610 --> 00:09:38,130
set auto commit from<font color="#E5E5E5"> already known</font><font color="#CCCCCC"> gdb 0</font>

219
00:09:33,870 --> 00:09:42,120
set<font color="#CCCCCC"> in pal class let's have a closer</font>

220
00:09:38,130 --> 00:09:44,400
look on it<font color="#CCCCCC"> it</font><font color="#E5E5E5"> is from GRE</font><font color="#CCCCCC"> libraries so</font>

221
00:09:42,120 --> 00:09:47,610
<font color="#E5E5E5">we don't require we don't need any</font>

222
00:09:44,400 --> 00:09:50,250
<font color="#E5E5E5">additional and dependencies as we can</font>

223
00:09:47,610 --> 00:09:54,750
see on this slide<font color="#CCCCCC"> cetera will call</font>

224
00:09:50,250 --> 00:09:57,060
connect<font color="#E5E5E5"> function and here we will call</font>

225
00:09:54,750 --> 00:10:00,930
initial<font color="#CCCCCC"> contacts contacts to</font><font color="#E5E5E5"> lock</font><font color="#CCCCCC"> up</font>

226
00:09:57,060 --> 00:10:04,650
<font color="#CCCCCC">method with our value from data source</font>

227
00:10:00,930 --> 00:10:07,699
name<font color="#CCCCCC"> properties so</font><font color="#E5E5E5"> we will get we will</font>

228
00:10:04,650 --> 00:10:07,699
<font color="#E5E5E5">get a remote code execution</font>

229
00:10:08,820 --> 00:10:15,510
apart from mention at the gadget<font color="#CCCCCC"> that</font>

230
00:10:11,100 --> 00:10:18,600
allow code execution by themselves we

231
00:10:15,510 --> 00:10:21,030
<font color="#CCCCCC">have a few other interesting gadget</font><font color="#E5E5E5"> some</font>

232
00:10:18,600 --> 00:10:25,590
of them can be<font color="#CCCCCC"> used</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> building blocks</font>

233
00:10:21,030 --> 00:10:28,470
for<font color="#CCCCCC"> a gadget chains</font><font color="#E5E5E5"> like string template</font>

234
00:10:25,590 --> 00:10:31,200
to think in Java or<font color="#CCCCCC"> buildings</font><font color="#E5E5E5"> source</font>

235
00:10:28,470 --> 00:10:34,260
said that<font color="#CCCCCC"> a member in dotnet can be used</font>

236
00:10:31,200 --> 00:10:36,510
for arbitrary gutter call other can

237
00:10:34,260 --> 00:10:41,220
trigger non remote code execution attack

238
00:10:36,510 --> 00:10:44,490
<font color="#E5E5E5">like</font><font color="#CCCCCC"> inner</font><font color="#E5E5E5"> XML in XML data document type</font>

239
00:10:41,220 --> 00:10:47,280
or data view setting collections in in

240
00:10:44,490 --> 00:10:50,040
that view manager type can<font color="#CCCCCC"> be used for</font>

241
00:10:47,280 --> 00:10:54,810
external<font color="#E5E5E5"> XML entities attack in some</font>

242
00:10:50,040 --> 00:10:57,120
version of the.net framework and now we

243
00:10:54,810 --> 00:11:01,349
<font color="#E5E5E5">will switch back to our bar he will show</font>

244
00:10:57,120 --> 00:11:03,900
where we can use all these gadgets<font color="#E5E5E5"> so we</font>

245
00:11:01,350 --> 00:11:06,240
analyze a set of different<font color="#CCCCCC"> JSON</font>

246
00:11:03,900 --> 00:11:07,560
libraries<font color="#E5E5E5"> but for Java and.net</font><font color="#CCCCCC"> and we</font>

247
00:11:06,240 --> 00:11:09,570
were<font color="#CCCCCC"> able to create arbitrary code</font>

248
00:11:07,560 --> 00:11:11,130
execution in most of them<font color="#E5E5E5"> as long as</font>

249
00:11:09,570 --> 00:11:12,990
<font color="#E5E5E5">they meet these three simple</font>

250
00:11:11,130 --> 00:11:14,880
requirements so the first one<font color="#CCCCCC"> is that</font>

251
00:11:12,990 --> 00:11:17,700
the attacker needs<font color="#E5E5E5"> to be able to control</font>

252
00:11:14,880 --> 00:11:19,620
the type the class name<font color="#CCCCCC"> that is going to</font>

253
00:11:17,700 --> 00:11:22,320
be reconstructed<font color="#CCCCCC"> at the service agent</font>

254
00:11:19,620 --> 00:11:24,510
type<font color="#E5E5E5"> so normally</font><font color="#CCCCCC"> that means</font><font color="#E5E5E5"> that the</font>

255
00:11:22,320 --> 00:11:26,520
<font color="#E5E5E5">JSON will contain something some</font>

256
00:11:24,510 --> 00:11:28,319
attribute<font color="#E5E5E5"> like this underscore type</font>

257
00:11:26,520 --> 00:11:29,730
dollar type class class name or

258
00:11:28,320 --> 00:11:32,790
<font color="#E5E5E5">something like that that contains a</font>

259
00:11:29,730 --> 00:11:35,040
value that looks like Java class name

260
00:11:32,790 --> 00:11:36,719
with a<font color="#CCCCCC"> namespace or something like a</font>

261
00:11:35,040 --> 00:11:38,459
dotnet<font color="#E5E5E5"> assembly or something like that</font>

262
00:11:36,720 --> 00:11:40,890
and then the libraries will to

263
00:11:38,460 --> 00:11:42,450
instantiate that<font color="#CCCCCC"> type the second</font>

264
00:11:40,890 --> 00:11:44,430
requirement is<font color="#CCCCCC"> that the library need to</font>

265
00:11:42,450 --> 00:11:46,290
invoke any method<font color="#E5E5E5"> normally it will</font>

266
00:11:44,430 --> 00:11:48,959
invoke setters but we saw before that<font color="#E5E5E5"> it</font>

267
00:11:46,290 --> 00:11:50,579
can invoke some other methods and the

268
00:11:48,960 --> 00:11:53,760
third<font color="#E5E5E5"> requirement is that the attacker</font>

269
00:11:50,580 --> 00:11:57,060
needs<font color="#E5E5E5"> to be able to find large enough</font>

270
00:11:53,760 --> 00:11:58,920
gadget space for the him to craft or

271
00:11:57,060 --> 00:12:02,910
assembly a cadet<font color="#E5E5E5"> a chain leading to</font>

272
00:11:58,920 --> 00:12:05,459
arbitrary code execution so we

273
00:12:02,910 --> 00:12:07,500
categorize all the libraries what we

274
00:12:05,460 --> 00:12:09,210
analyzed according<font color="#E5E5E5"> to this</font>

275
00:12:07,500 --> 00:12:11,339
categorization that<font color="#E5E5E5"> is basically based</font>

276
00:12:09,210 --> 00:12:12,960
on two different<font color="#CCCCCC"> factors the first</font><font color="#E5E5E5"> one</font>

277
00:12:11,339 --> 00:12:14,490
is whether these libraries include the

278
00:12:12,960 --> 00:12:17,400
<font color="#E5E5E5">format or they sorry the type</font>

279
00:12:14,490 --> 00:12:19,320
discriminator<font color="#E5E5E5"> by default or not</font><font color="#CCCCCC"> for</font>

280
00:12:17,400 --> 00:12:22,980
<font color="#CCCCCC">example in this</font><font color="#E5E5E5"> case you can see here</font>

281
00:12:19,320 --> 00:12:24,960
that<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> jason dotnet library and</font>

282
00:12:22,980 --> 00:12:27,839
contain this dollar type<font color="#E5E5E5"> with something</font>

283
00:12:24,960 --> 00:12:30,300
that looks<font color="#E5E5E5"> like</font><font color="#CCCCCC"> a donut</font><font color="#E5E5E5"> namespace</font><font color="#CCCCCC"> and</font>

284
00:12:27,839 --> 00:12:32,970
then the second factor<font color="#CCCCCC"> is how they</font>

285
00:12:30,300 --> 00:12:34,290
control<font color="#E5E5E5"> which classes or which types are</font>

286
00:12:32,970 --> 00:12:36,450
going to be instantiated

287
00:12:34,290 --> 00:12:38,140
<font color="#E5E5E5">during this realization some libraries</font>

288
00:12:36,450 --> 00:12:40,660
performed<font color="#CCCCCC"> just a post this allocation</font>

289
00:12:38,140 --> 00:12:42,520
<font color="#E5E5E5">caste operation which is basically or</font>

290
00:12:40,660 --> 00:12:44,560
basically offers no protection at<font color="#E5E5E5"> all</font>

291
00:12:42,520 --> 00:12:46,900
because<font color="#E5E5E5"> by the time that you get the</font>

292
00:12:44,560 --> 00:12:48,369
cast exception<font color="#CCCCCC"> they say recession has</font>

293
00:12:46,900 --> 00:12:51,699
completed and the pay load has<font color="#E5E5E5"> been</font>

294
00:12:48,370 --> 00:12:55,720
executed<font color="#CCCCCC"> so you are already in trouble</font>

295
00:12:51,700 --> 00:12:58,150
<font color="#CCCCCC">and the other type control that most of</font>

296
00:12:55,720 --> 00:13:00,040
the libraries do is perform what we<font color="#E5E5E5"> call</font>

297
00:12:58,150 --> 00:13:02,050
the inspection of the expected<font color="#CCCCCC"> type</font>

298
00:13:00,040 --> 00:13:04,209
object graph which looks<font color="#CCCCCC"> like</font><font color="#E5E5E5"> a little</font>

299
00:13:02,050 --> 00:13:06,670
<font color="#E5E5E5">bit complex but is actually</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> simple</font>

300
00:13:04,210 --> 00:13:08,740
<font color="#CCCCCC">the library will</font><font color="#E5E5E5"> shape what is the</font>

301
00:13:06,670 --> 00:13:12,849
<font color="#E5E5E5">specter type so for example the</font><font color="#CCCCCC"> library</font>

302
00:13:08,740 --> 00:13:16,780
may be<font color="#E5E5E5"> expecting a user type and then it</font>

303
00:13:12,850 --> 00:13:18,820
will<font color="#E5E5E5"> recursively analyze the object</font>

304
00:13:16,780 --> 00:13:21,000
graph<font color="#E5E5E5"> and when they serialize in from</font>

305
00:13:18,820 --> 00:13:24,610
the JSON data it will check<font color="#E5E5E5"> if</font><font color="#CCCCCC"> the</font>

306
00:13:21,000 --> 00:13:26,920
expected<font color="#E5E5E5"> type is a signal from what the</font>

307
00:13:24,610 --> 00:13:29,500
attacker or what the user is sending so

308
00:13:26,920 --> 00:13:31,930
for example if the user or<font color="#E5E5E5"> the library</font>

309
00:13:29,500 --> 00:13:33,520
<font color="#CCCCCC">expects a string if we provide something</font>

310
00:13:31,930 --> 00:13:35,739
<font color="#E5E5E5">like an object data provider that is</font><font color="#CCCCCC"> our</font>

311
00:13:33,520 --> 00:13:37,569
gadget<font color="#E5E5E5"> then the library will throw an</font>

312
00:13:35,740 --> 00:13:41,050
<font color="#E5E5E5">exception and</font><font color="#CCCCCC"> will fail to</font><font color="#E5E5E5"> digitize the</font>

313
00:13:37,570 --> 00:13:43,180
data some of<font color="#CCCCCC"> the libraries in addition</font>

314
00:13:41,050 --> 00:13:45,339
to this<font color="#E5E5E5"> a sigma bility check will also</font>

315
00:13:43,180 --> 00:13:48,310
build a<font color="#CCCCCC"> whitelist</font><font color="#E5E5E5"> during construction</font>

316
00:13:45,340 --> 00:13:50,020
time<font color="#E5E5E5"> so at runtime when they</font><font color="#CCCCCC"> see a licen</font>

317
00:13:48,310 --> 00:13:52,239
they will apply this<font color="#E5E5E5"> whitelist and only</font>

318
00:13:50,020 --> 00:13:54,010
those<font color="#E5E5E5"> types that appear in the object</font>

319
00:13:52,240 --> 00:13:56,710
graph<font color="#E5E5E5"> at construction type will</font><font color="#CCCCCC"> be</font>

320
00:13:54,010 --> 00:13:58,060
allowed to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> the seer lies</font><font color="#E5E5E5"> we found</font>

321
00:13:56,710 --> 00:13:59,920
that these libraries are<font color="#CCCCCC"> still</font>

322
00:13:58,060 --> 00:14:02,229
vulnerable<font color="#CCCCCC"> if the attacker can control</font>

323
00:13:59,920 --> 00:14:04,870
the expected type which is more common

324
00:14:02,230 --> 00:14:06,940
that<font color="#E5E5E5"> you may</font><font color="#CCCCCC"> think and</font><font color="#E5E5E5"> we will see an</font>

325
00:14:04,870 --> 00:14:09,460
<font color="#CCCCCC">example</font><font color="#E5E5E5"> later or if the attacker can</font>

326
00:14:06,940 --> 00:14:11,350
find an entry<font color="#CCCCCC"> point in</font><font color="#E5E5E5"> this object graph</font>

327
00:14:09,460 --> 00:14:14,050
<font color="#E5E5E5">so for example in this simple object</font>

328
00:14:11,350 --> 00:14:16,180
graph all the elements in red are entry

329
00:14:14,050 --> 00:14:19,810
points<font color="#CCCCCC"> that the attacker can actually</font>

330
00:14:16,180 --> 00:14:22,449
use<font color="#CCCCCC"> to place their load at their payload</font>

331
00:14:19,810 --> 00:14:24,760
so that may<font color="#E5E5E5"> be for example a system dot</font>

332
00:14:22,450 --> 00:14:28,000
object type or a non-generic collection

333
00:14:24,760 --> 00:14:29,560
like a hash table<font color="#E5E5E5"> or array list</font><font color="#CCCCCC"> so in</font>

334
00:14:28,000 --> 00:14:31,690
our paper we have like a more detailed

335
00:14:29,560 --> 00:14:35,469
<font color="#CCCCCC">explanation of how to</font><font color="#E5E5E5"> find these entry</font>

336
00:14:31,690 --> 00:14:37,030
points in the epigraph so this is the

337
00:14:35,470 --> 00:14:39,190
<font color="#E5E5E5">list of the libraries that</font><font color="#CCCCCC"> we analyzed</font>

338
00:14:37,030 --> 00:14:42,010
<font color="#CCCCCC">as you can see we have some of them that</font>

339
00:14:39,190 --> 00:14:43,720
are donate and some of them are Java we

340
00:14:42,010 --> 00:14:46,990
included the<font color="#E5E5E5"> most popular ones like the</font>

341
00:14:43,720 --> 00:14:49,090
JSON donate for donate and the<font color="#E5E5E5"> deduction</font>

342
00:14:46,990 --> 00:14:51,560
<font color="#E5E5E5">probably the most common or most popular</font>

343
00:14:49,090 --> 00:14:53,870
one for<font color="#E5E5E5"> Java the ones in</font><font color="#CCCCCC"> red</font>

344
00:14:51,560 --> 00:14:55,969
<font color="#E5E5E5">are those that</font><font color="#CCCCCC"> are vulnerable</font><font color="#E5E5E5"> by default</font>

345
00:14:53,870 --> 00:14:57,680
out of the box<font color="#CCCCCC"> no matter what you do you</font>

346
00:14:55,970 --> 00:15:01,610
cannot protect them and<font color="#E5E5E5"> make them safe</font>

347
00:14:57,680 --> 00:15:04,459
for example<font color="#E5E5E5"> fast Jason sweet Jason Jason</font>

348
00:15:01,610 --> 00:15:06,410
<font color="#E5E5E5">IO or Fleck</font><font color="#CCCCCC"> station because they</font><font color="#E5E5E5"> include</font>

349
00:15:04,460 --> 00:15:09,140
the type discriminators or type names<font color="#E5E5E5"> in</font>

350
00:15:06,410 --> 00:15:11,360
the<font color="#E5E5E5"> satellite data and because they</font>

351
00:15:09,140 --> 00:15:14,089
perform no type control at<font color="#CCCCCC"> all except</font>

352
00:15:11,360 --> 00:15:16,339
for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> post</font><font color="#E5E5E5"> DC allocation cast</font>

353
00:15:14,089 --> 00:15:18,290
operation they will always<font color="#CCCCCC"> be</font><font color="#E5E5E5"> vulnerable</font>

354
00:15:16,339 --> 00:15:20,240
<font color="#E5E5E5">because they invoke a setters and</font><font color="#CCCCCC"> then</font>

355
00:15:18,290 --> 00:15:21,920
we will be we<font color="#CCCCCC"> will be able</font><font color="#E5E5E5"> to use our</font>

356
00:15:20,240 --> 00:15:25,460
setter<font color="#CCCCCC"> gadgets</font><font color="#E5E5E5"> to get a bit recall</font>

357
00:15:21,920 --> 00:15:27,620
execution the one in yellow<font color="#E5E5E5"> depends on</font>

358
00:15:25,460 --> 00:15:29,540
how the developers configure the library

359
00:15:27,620 --> 00:15:31,160
in<font color="#CCCCCC"> order to for the attacker to be able</font>

360
00:15:29,540 --> 00:15:33,110
<font color="#CCCCCC">to</font><font color="#E5E5E5"> get arbitrary code execution or not</font>

361
00:15:31,160 --> 00:15:34,699
<font color="#E5E5E5">so by default normally they don't</font>

362
00:15:33,110 --> 00:15:37,520
<font color="#E5E5E5">include the type information in the data</font>

363
00:15:34,700 --> 00:15:41,060
and they perform an inspection<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

364
00:15:37,520 --> 00:15:42,980
expected object graph and you may<font color="#CCCCCC"> think</font>

365
00:15:41,060 --> 00:15:45,109
that these two<font color="#CCCCCC"> requirements are hard to</font>

366
00:15:42,980 --> 00:15:47,570
meet at the same time or to find in a

367
00:15:45,110 --> 00:15:49,279
real application<font color="#E5E5E5"> but it's actually the</font>

368
00:15:47,570 --> 00:15:51,050
opposite<font color="#CCCCCC"> because if developers are</font>

369
00:15:49,279 --> 00:15:52,610
sterilized in something that<font color="#CCCCCC"> contains or</font>

370
00:15:51,050 --> 00:15:54,140
our object profit of<font color="#CCCCCC"> containing for</font>

371
00:15:52,610 --> 00:15:57,050
<font color="#CCCCCC">example a system data object or a java</font>

372
00:15:54,140 --> 00:15:58,580
language<font color="#CCCCCC"> yet they will need to enable</font>

373
00:15:57,050 --> 00:15:59,810
these configuration settings to include

374
00:15:58,580 --> 00:16:01,490
<font color="#E5E5E5">the type information because otherwise</font>

375
00:15:59,810 --> 00:16:05,780
they won't<font color="#CCCCCC"> be able to serialize</font><font color="#E5E5E5"> that</font>

376
00:16:01,490 --> 00:16:07,940
data<font color="#CCCCCC"> the one in green JSON</font><font color="#E5E5E5"> is actually</font>

377
00:16:05,780 --> 00:16:10,189
the one<font color="#E5E5E5"> that we consider secure because</font>

378
00:16:07,940 --> 00:16:13,400
<font color="#E5E5E5">there is one way</font><font color="#CCCCCC"> of making</font><font color="#E5E5E5"> it insecure</font>

379
00:16:10,190 --> 00:16:15,770
but I mean you need<font color="#E5E5E5"> to be Jimmy you need</font>

380
00:16:13,400 --> 00:16:17,089
to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> you want to make</font><font color="#E5E5E5"> it</font>

381
00:16:15,770 --> 00:16:18,949
vulnerable in purpose because it's very

382
00:16:17,089 --> 00:16:21,230
difficult<font color="#CCCCCC"> and in addition as you</font><font color="#E5E5E5"> can see</font>

383
00:16:18,950 --> 00:16:23,240
here<font color="#E5E5E5"> it invokes no setters at all</font><font color="#CCCCCC"> it</font>

384
00:16:21,230 --> 00:16:24,950
uses<font color="#CCCCCC"> reflection so you cannot use our</font>

385
00:16:23,240 --> 00:16:26,660
<font color="#CCCCCC">Center gadgets</font><font color="#E5E5E5"> you need to find new</font>

386
00:16:24,950 --> 00:16:28,670
gadgets<font color="#E5E5E5"> for example in</font><font color="#CCCCCC"> finalize methods</font>

387
00:16:26,660 --> 00:16:31,100
<font color="#E5E5E5">or other methods</font><font color="#CCCCCC"> that may carry</font><font color="#E5E5E5"> invoke</font>

388
00:16:28,670 --> 00:16:35,060
in this and so we consider it as kind of

389
00:16:31,100 --> 00:16:36,500
<font color="#E5E5E5">secure library so let's see some</font><font color="#CCCCCC"> of</font>

390
00:16:35,060 --> 00:16:38,869
these<font color="#E5E5E5"> libraries for example first Jason</font>

391
00:16:36,500 --> 00:16:40,730
was one in the in the red<font color="#CCCCCC"> category</font><font color="#E5E5E5"> they</font>

392
00:16:38,870 --> 00:16:43,370
always<font color="#CCCCCC"> included type discriminators they</font>

393
00:16:40,730 --> 00:16:45,140
perform in no type control at all<font color="#E5E5E5"> so if</font>

394
00:16:43,370 --> 00:16:47,240
you find<font color="#E5E5E5"> an</font><font color="#CCCCCC"> application using</font>

395
00:16:45,140 --> 00:16:48,770
frustration with untrusted data<font color="#E5E5E5"> you will</font>

396
00:16:47,240 --> 00:16:50,779
be<font color="#E5E5E5"> able to get arbitrary code execution</font>

397
00:16:48,770 --> 00:16:52,790
and that's what we<font color="#E5E5E5"> found for example in</font>

398
00:16:50,779 --> 00:16:55,270
<font color="#E5E5E5">this calico a content management system</font>

399
00:16:52,790 --> 00:16:59,510
<font color="#CCCCCC">that was</font><font color="#E5E5E5"> visualizing untrusted data</font>

400
00:16:55,270 --> 00:17:01,220
<font color="#E5E5E5">leading to arbitrary code execution then</font>

401
00:16:59,510 --> 00:17:03,709
we have<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> serialize ER that is</font>

402
00:17:01,220 --> 00:17:05,240
one of the dotnet native serializers<font color="#E5E5E5"> by</font>

403
00:17:03,709 --> 00:17:07,520
default is secure because<font color="#E5E5E5"> it</font>

404
00:17:05,240 --> 00:17:11,480
not include the type information<font color="#E5E5E5"> so it's</font>

405
00:17:07,520 --> 00:17:16,160
good but when calling the constructor<font color="#CCCCCC"> as</font>

406
00:17:11,480 --> 00:17:19,730
you can see here<font color="#E5E5E5"> developers come pass</font><font color="#CCCCCC"> a</font>

407
00:17:16,160 --> 00:17:21,319
type resolver<font color="#E5E5E5"> if they do that these type</font>

408
00:17:19,730 --> 00:17:23,120
<font color="#E5E5E5">information will be included</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

409
00:17:21,319 --> 00:17:25,159
<font color="#CCCCCC">sterilized</font><font color="#E5E5E5"> JSON data and would be</font>

410
00:17:23,119 --> 00:17:26,719
processed when this arise in the data so

411
00:17:25,160 --> 00:17:29,240
that<font color="#CCCCCC"> will make the library</font><font color="#E5E5E5"> vulnerable</font>

412
00:17:26,720 --> 00:17:30,830
<font color="#E5E5E5">because this library performs no type</font>

413
00:17:29,240 --> 00:17:33,110
control at<font color="#CCCCCC"> all just this post DC</font>

414
00:17:30,830 --> 00:17:35,000
allocation cast operation so again<font color="#E5E5E5"> these</font>

415
00:17:33,110 --> 00:17:37,639
libraries can<font color="#CCCCCC"> be used securely with</font>

416
00:17:35,000 --> 00:17:41,030
untrusted data as long<font color="#CCCCCC"> as you don't use</font>

417
00:17:37,640 --> 00:17:43,179
any type resolver then we have data

418
00:17:41,030 --> 00:17:46,850
contract<font color="#CCCCCC"> Jason serializable and a</font>

419
00:17:43,179 --> 00:17:50,179
different dotnet native rotation

420
00:17:46,850 --> 00:17:52,159
<font color="#CCCCCC">sterilizer by well</font><font color="#E5E5E5"> this is probably one</font>

421
00:17:50,179 --> 00:17:55,340
of<font color="#E5E5E5"> the most secure</font><font color="#CCCCCC"> Jason</font><font color="#E5E5E5"> de</font><font color="#CCCCCC"> salida</font><font color="#E5E5E5"> that</font>

422
00:17:52,160 --> 00:17:57,230
we've seen<font color="#E5E5E5"> it performs that type aspect</font>

423
00:17:55,340 --> 00:17:59,000
the type of the<font color="#CCCCCC"> graph</font><font color="#E5E5E5"> inspection but it</font>

424
00:17:57,230 --> 00:18:01,250
also builds this<font color="#E5E5E5"> whitelist</font>

425
00:17:59,000 --> 00:18:03,740
at construction time that is applied at

426
00:18:01,250 --> 00:18:05,720
<font color="#CCCCCC">runtime so finding an entry point is not</font>

427
00:18:03,740 --> 00:18:07,610
<font color="#E5E5E5">an option for this library and the other</font>

428
00:18:05,720 --> 00:18:10,220
way<font color="#CCCCCC"> that you can attack it and get</font>

429
00:18:07,610 --> 00:18:12,530
arbitrary code execution is if you can

430
00:18:10,220 --> 00:18:14,840
control the<font color="#CCCCCC"> expected type</font><font color="#E5E5E5"> you may think</font>

431
00:18:12,530 --> 00:18:16,670
that something<font color="#E5E5E5"> like this that the spec</font>

432
00:18:14,840 --> 00:18:19,730
<font color="#E5E5E5">that time comes from a cookie and then</font>

433
00:18:16,670 --> 00:18:22,190
is used to<font color="#E5E5E5"> initialize the satellizer is</font>

434
00:18:19,730 --> 00:18:24,650
nothing in common<font color="#E5E5E5"> but</font><font color="#CCCCCC"> we will show</font><font color="#E5E5E5"> you a</font>

435
00:18:22,190 --> 00:18:26,090
demo on<font color="#E5E5E5"> a very common or rapidly popular</font>

436
00:18:24,650 --> 00:18:29,809
content<font color="#CCCCCC"> management system in don't net</font>

437
00:18:26,090 --> 00:18:31,820
that does exactly<font color="#E5E5E5"> does then we have</font>

438
00:18:29,809 --> 00:18:34,309
<font color="#CCCCCC">Jason donate</font><font color="#E5E5E5"> that is probably the most</font>

439
00:18:31,820 --> 00:18:37,639
popular<font color="#CCCCCC"> dish on</font><font color="#E5E5E5"> the net Jason satellizer</font>

440
00:18:34,309 --> 00:18:40,460
for the net by default<font color="#E5E5E5"> is secure because</font>

441
00:18:37,640 --> 00:18:42,410
it does not include<font color="#E5E5E5"> type information but</font>

442
00:18:40,460 --> 00:18:44,600
again<font color="#E5E5E5"> developers can enable this type</font>

443
00:18:42,410 --> 00:18:46,309
name<font color="#E5E5E5"> handling setting which will make</font>

444
00:18:44,600 --> 00:18:48,199
the library<font color="#E5E5E5"> include the type</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

445
00:18:46,309 --> 00:18:50,360
discriminator sort<font color="#E5E5E5"> type information in</font>

446
00:18:48,200 --> 00:18:51,830
the<font color="#CCCCCC"> json serialize data so this</font><font color="#E5E5E5"> is</font>

447
00:18:50,360 --> 00:18:53,750
another example by the way<font color="#E5E5E5"> all these</font>

448
00:18:51,830 --> 00:18:56,600
examples<font color="#CCCCCC"> are from</font><font color="#E5E5E5"> github so this is real</font>

449
00:18:53,750 --> 00:18:58,850
code in<font color="#E5E5E5"> this case the title is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

450
00:18:56,600 --> 00:19:00,709
be<font color="#CCCCCC"> set alight</font><font color="#E5E5E5"> at his message contains</font>

451
00:18:58,850 --> 00:19:03,230
this body property with his<font color="#E5E5E5"> system</font>

452
00:19:00,710 --> 00:19:05,000
object so because of that<font color="#E5E5E5"> as I</font><font color="#CCCCCC"> said</font>

453
00:19:03,230 --> 00:19:07,340
<font color="#E5E5E5">before developers will be forced to</font>

454
00:19:05,000 --> 00:19:09,440
enable this type<font color="#E5E5E5"> name handling setting</font>

455
00:19:07,340 --> 00:19:10,760
<font color="#E5E5E5">that will force the library to include</font>

456
00:19:09,440 --> 00:19:13,940
the type information because<font color="#CCCCCC"> otherwise</font>

457
00:19:10,760 --> 00:19:17,580
<font color="#E5E5E5">add</font><font color="#CCCCCC"> this allocation</font><font color="#E5E5E5"> type it won't know</font>

458
00:19:13,940 --> 00:19:20,759
to which type visualize<font color="#CCCCCC"> that</font><font color="#E5E5E5"> data</font>

459
00:19:17,580 --> 00:19:22,619
so this library will invoke<font color="#CCCCCC"> set-aside</font>

460
00:19:20,759 --> 00:19:25,230
<font color="#CCCCCC">realisable constructor callbacks</font><font color="#E5E5E5"> even</font>

461
00:19:22,619 --> 00:19:28,499
some custom call box type<font color="#CCCCCC"> converters so</font>

462
00:19:25,230 --> 00:19:29,700
<font color="#CCCCCC">you can use a very broad set of Cadets</font>

463
00:19:28,499 --> 00:19:33,899
<font color="#E5E5E5">to get arbitrary code execution</font>

464
00:19:29,700 --> 00:19:36,210
<font color="#CCCCCC">portation today</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so let's see one</font>

465
00:19:33,899 --> 00:19:38,428
<font color="#E5E5E5">example of an application or in this</font>

466
00:19:36,210 --> 00:19:40,679
<font color="#E5E5E5">case a</font><font color="#CCCCCC"> framework that</font><font color="#E5E5E5"> is using JSON</font>

467
00:19:38,429 --> 00:19:41,820
dotnet in an<font color="#E5E5E5"> insecure way so we can we</font>

468
00:19:40,679 --> 00:19:45,119
were<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> get a</font><font color="#CCCCCC"> baterry call</font>

469
00:19:41,820 --> 00:19:47,539
execution<font color="#CCCCCC"> so this is bris this is a</font><font color="#E5E5E5"> beta</font>

470
00:19:45,119 --> 00:19:51,600
management framework which basically

471
00:19:47,539 --> 00:19:53,460
exposes a REST API for both JavaScript

472
00:19:51,600 --> 00:19:56,309
and dotnet clients to connect and

473
00:19:53,460 --> 00:19:59,549
perform like<font color="#E5E5E5"> entity management operation</font>

474
00:19:56,309 --> 00:20:02,668
like adding new<font color="#CCCCCC"> records deleting records</font>

475
00:19:59,549 --> 00:20:05,549
<font color="#E5E5E5">updating</font><font color="#CCCCCC"> records and so</font><font color="#E5E5E5"> on it's kind</font><font color="#CCCCCC"> of</font>

476
00:20:02,669 --> 00:20:07,739
popular in<font color="#CCCCCC"> the.net work</font><font color="#E5E5E5"> and if we look</font>

477
00:20:05,549 --> 00:20:10,609
at<font color="#E5E5E5"> the source code we will see that they</font>

478
00:20:07,739 --> 00:20:14,850
use JSON dotnet as the global<font color="#CCCCCC"> stabilizer</font>

479
00:20:10,609 --> 00:20:17,279
this<font color="#CCCCCC"> JSON dotnet is configured to use</font>

480
00:20:14,850 --> 00:20:20,039
this type<font color="#E5E5E5"> name handling object which</font>

481
00:20:17,279 --> 00:20:22,499
<font color="#E5E5E5">means that when</font><font color="#CCCCCC"> satirising</font><font color="#E5E5E5"> system object</font>

482
00:20:20,039 --> 00:20:25,710
properties<font color="#E5E5E5"> they will include the type</font>

483
00:20:22,499 --> 00:20:28,789
information<font color="#E5E5E5"> now if we check</font><font color="#CCCCCC"> the source</font>

484
00:20:25,710 --> 00:20:31,350
code we<font color="#E5E5E5"> will see that at some point the</font>

485
00:20:28,789 --> 00:20:32,850
<font color="#E5E5E5">JSON</font><font color="#CCCCCC"> donut</font><font color="#E5E5E5"> satellizer is used to</font>

486
00:20:31,350 --> 00:20:34,949
deserialize untrusted data and the

487
00:20:32,850 --> 00:20:38,369
<font color="#E5E5E5">expected type in this case is safe</font>

488
00:20:34,950 --> 00:20:39,570
option if we<font color="#CCCCCC"> perform</font><font color="#E5E5E5"> this inspection of</font>

489
00:20:38,369 --> 00:20:41,309
the expected<font color="#CCCCCC"> type of</font><font color="#E5E5E5"> the graph that</font>

490
00:20:39,570 --> 00:20:43,678
<font color="#CCCCCC">looks</font><font color="#E5E5E5"> like very complex but it's nothing</font>

491
00:20:41,309 --> 00:20:45,658
I'll start looking<font color="#E5E5E5"> at the expected type</font>

492
00:20:43,679 --> 00:20:48,029
object graph in this<font color="#E5E5E5"> case very simple</font>

493
00:20:45,659 --> 00:20:50,190
<font color="#E5E5E5">and we can see that it contains attack</font>

494
00:20:48,029 --> 00:20:52,350
property that is system object so we

495
00:20:50,190 --> 00:20:55,739
will be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to place our payload in</font>

496
00:20:52,350 --> 00:20:57,980
this property and get arbitrary code

497
00:20:55,739 --> 00:20:59,940
execution<font color="#E5E5E5"> so let's see</font><font color="#CCCCCC"> that in action</font>

498
00:20:57,980 --> 00:21:03,269
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is one of the sample application</font>

499
00:20:59,940 --> 00:21:05,340
<font color="#CCCCCC">that</font><font color="#E5E5E5"> comes with with breeze it's a</font>

500
00:21:03,269 --> 00:21:08,789
sample<font color="#E5E5E5"> application</font><font color="#CCCCCC"> that lets you update</font>

501
00:21:05,340 --> 00:21:12,330
<font color="#E5E5E5">or create</font><font color="#CCCCCC"> new car models</font><font color="#E5E5E5"> just something</font>

502
00:21:08,789 --> 00:21:15,679
simple<font color="#E5E5E5"> to teach developers so if we send</font>

503
00:21:12,330 --> 00:21:20,299
like this change<font color="#E5E5E5"> for the car model name</font>

504
00:21:15,679 --> 00:21:22,950
we will see that in our<font color="#E5E5E5"> request we have</font>

505
00:21:20,299 --> 00:21:26,369
<font color="#E5E5E5">the change of the model name like</font>

506
00:21:22,950 --> 00:21:29,490
<font color="#E5E5E5">Mustang</font><font color="#CCCCCC"> 2 and then an empty</font><font color="#E5E5E5"> dictionary</font>

507
00:21:26,369 --> 00:21:30,480
with that is called<font color="#CCCCCC"> safe options</font><font color="#E5E5E5"> if we</font>

508
00:21:29,490 --> 00:21:34,559
send

509
00:21:30,480 --> 00:21:37,080
<font color="#E5E5E5">this request in the response we will see</font>

510
00:21:34,559 --> 00:21:39,330
<font color="#E5E5E5">this dollar type attribute with</font>

511
00:21:37,080 --> 00:21:41,340
something that looks like<font color="#CCCCCC"> a Jason donate</font>

512
00:21:39,330 --> 00:21:42,960
<font color="#CCCCCC">cell ice type so this is a good</font>

513
00:21:41,340 --> 00:21:44,699
<font color="#CCCCCC">indicator that</font><font color="#E5E5E5"> this application is</font>

514
00:21:42,960 --> 00:21:47,970
<font color="#E5E5E5">vulnerable so now</font><font color="#CCCCCC"> we're going to use our</font>

515
00:21:44,700 --> 00:21:51,030
object data provider<font color="#CCCCCC"> setter gadget in</font>

516
00:21:47,970 --> 00:21:53,880
order to call the process<font color="#E5E5E5"> dot a</font><font color="#CCCCCC"> start</font>

517
00:21:51,030 --> 00:21:56,879
method<font color="#CCCCCC"> and pop up a calculator so</font><font color="#E5E5E5"> we</font>

518
00:21:53,880 --> 00:22:02,360
will copy and<font color="#CCCCCC"> replace this empty safe</font>

519
00:21:56,880 --> 00:22:05,340
options dictionary with our payload and

520
00:22:02,360 --> 00:22:06,689
if we send it well let's check that the

521
00:22:05,340 --> 00:22:09,959
victim server is not running<font color="#E5E5E5"> the</font>

522
00:22:06,690 --> 00:22:20,190
<font color="#E5E5E5">calculator of course if we send it we</font>

523
00:22:09,960 --> 00:22:22,590
will get our calculator<font color="#E5E5E5"> thank you so we</font>

524
00:22:20,190 --> 00:22:25,350
<font color="#E5E5E5">wanted</font><font color="#CCCCCC"> to give a shot</font><font color="#E5E5E5"> shout out to</font>

525
00:22:22,590 --> 00:22:28,199
Morris<font color="#CCCCCC"> Bachelor that is a recognized</font>

526
00:22:25,350 --> 00:22:30,600
<font color="#CCCCCC">data</font><font color="#E5E5E5"> security researcher he published</font>

527
00:22:28,200 --> 00:22:32,820
similar<font color="#E5E5E5"> research on May 22</font><font color="#CCCCCC"> aware after</font>

528
00:22:30,600 --> 00:22:36,110
<font color="#CCCCCC">our research was finished and published</font>

529
00:22:32,820 --> 00:22:39,240
and accepted for<font color="#E5E5E5"> black hat and DEF CON</font>

530
00:22:36,110 --> 00:22:41,699
<font color="#E5E5E5">but he serves the same kind of premises</font>

531
00:22:39,240 --> 00:22:44,130
and conclusions he focuses exclusively

532
00:22:41,700 --> 00:22:46,320
on<font color="#CCCCCC"> java and he overlaps with our</font>

533
00:22:44,130 --> 00:22:47,820
research in both the<font color="#CCCCCC"> jackson and this</font>

534
00:22:46,320 --> 00:22:49,409
<font color="#E5E5E5">one</font><font color="#CCCCCC"> i or libraries</font><font color="#E5E5E5"> although for today</font>

535
00:22:47,820 --> 00:22:52,200
<font color="#CCCCCC">Shanaya he founds a completely different</font>

536
00:22:49,410 --> 00:22:55,530
vector and here he also<font color="#E5E5E5"> overlaps with us</font>

537
00:22:52,200 --> 00:22:58,530
in this<font color="#CCCCCC"> JDBC rosette</font><font color="#E5E5E5"> imple</font><font color="#CCCCCC"> Gardea that</font>

538
00:22:55,530 --> 00:23:00,299
was kind of<font color="#CCCCCC"> no views choice because it</font>

539
00:22:58,530 --> 00:23:02,520
was previously<font color="#CCCCCC"> used in the Java</font>

540
00:23:00,299 --> 00:23:04,110
<font color="#E5E5E5">devastation world but he also found a</font>

541
00:23:02,520 --> 00:23:05,668
very interesting gadget in spring

542
00:23:04,110 --> 00:23:07,350
libraries another library so if you are

543
00:23:05,669 --> 00:23:10,020
more<font color="#CCCCCC"> interested</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> java version</font><font color="#E5E5E5"> of</font>

544
00:23:07,350 --> 00:23:14,100
this talk less go and check his his

545
00:23:10,020 --> 00:23:17,549
research and now<font color="#E5E5E5"> Alice will</font><font color="#CCCCCC"> switch gears</font>

546
00:23:14,100 --> 00:23:20,750
<font color="#CCCCCC">and move into the</font><font color="#E5E5E5"> dotnet section let's</font>

547
00:23:17,549 --> 00:23:23,668
back to the<font color="#CCCCCC"> dead dotnet world</font>

548
00:23:20,750 --> 00:23:26,340
potential<font color="#CCCCCC"> security problems in binary</font>

549
00:23:23,669 --> 00:23:29,160
<font color="#E5E5E5">format and</font><font color="#CCCCCC"> data contracts aerolizer</font>

550
00:23:26,340 --> 00:23:32,570
<font color="#CCCCCC">where knows were known</font><font color="#E5E5E5"> for the years</font>

551
00:23:29,160 --> 00:23:36,780
for example great work of James<font color="#CCCCCC"> for flow</font>

552
00:23:32,570 --> 00:23:37,919
about weaknesses and main attack vectors

553
00:23:36,780 --> 00:23:43,170
in

554
00:23:37,920 --> 00:23:48,570
net<font color="#CCCCCC"> formatters</font><font color="#E5E5E5"> was presented and</font><font color="#CCCCCC"> black</font>

555
00:23:43,170 --> 00:23:51,240
<font color="#CCCCCC">hat 2012 so five years ago anyway we</font>

556
00:23:48,570 --> 00:23:53,639
could not find a<font color="#E5E5E5"> good remote code</font>

557
00:23:51,240 --> 00:23:57,750
execution gadget<font color="#CCCCCC"> chain</font><font color="#E5E5E5"> there was one</font>

558
00:23:53,640 --> 00:24:01,290
published by by<font color="#CCCCCC"> florian gold</font><font color="#E5E5E5"> here but it</font>

559
00:23:57,750 --> 00:24:04,020
uses memory<font color="#E5E5E5"> corruption</font><font color="#CCCCCC"> so it's quite</font>

560
00:24:01,290 --> 00:24:07,770
difficult<font color="#E5E5E5"> to build universal exploit for</font>

561
00:24:04,020 --> 00:24:09,629
different version of<font color="#CCCCCC"> windows but we were</font>

562
00:24:07,770 --> 00:24:12,690
<font color="#CCCCCC">sure that</font><font color="#E5E5E5"> there should be</font><font color="#CCCCCC"> a lot of way</font>

563
00:24:09,630 --> 00:24:16,770
to get code execution during dotnet<font color="#CCCCCC"> this</font>

564
00:24:12,690 --> 00:24:18,630
<font color="#E5E5E5">realization so we spent some our time</font>

565
00:24:16,770 --> 00:24:21,360
for searching<font color="#E5E5E5"> cells guarded and have</font>

566
00:24:18,630 --> 00:24:25,380
found one that can be used<font color="#CCCCCC"> in</font><font color="#E5E5E5"> binary</font>

567
00:24:21,360 --> 00:24:29,310
<font color="#E5E5E5">format or some another other dotnet</font>

568
00:24:25,380 --> 00:24:31,890
<font color="#CCCCCC">formatters but after our talk our work</font>

569
00:24:29,310 --> 00:24:34,409
was ready and<font color="#E5E5E5"> talk was accepted by black</font>

570
00:24:31,890 --> 00:24:37,920
<font color="#E5E5E5">hat is the same</font><font color="#CCCCCC"> james forceful published</font>

571
00:24:34,410 --> 00:24:41,220
a couple remote code execution execution

572
00:24:37,920 --> 00:24:45,690
<font color="#CCCCCC">gadget for binary for matter as he</font><font color="#E5E5E5"> is</font>

573
00:24:41,220 --> 00:24:48,060
<font color="#CCCCCC">owned</font><font color="#E5E5E5"> as part of his own research by the</font>

574
00:24:45,690 --> 00:24:52,080
<font color="#E5E5E5">vein not connected with with</font><font color="#CCCCCC"> jason or</font>

575
00:24:48,060 --> 00:24:55,860
our talks<font color="#E5E5E5"> anyway you could find details</font>

576
00:24:52,080 --> 00:24:58,590
<font color="#E5E5E5">about this guarded in on his post-op on</font>

577
00:24:55,860 --> 00:25:03,929
google project<font color="#E5E5E5"> zero block here we will</font>

578
00:24:58,590 --> 00:25:07,080
focus on our own we will<font color="#E5E5E5"> use PS object</font>

579
00:25:03,930 --> 00:25:08,760
type<font color="#E5E5E5"> this type is from powershell</font>

580
00:25:07,080 --> 00:25:12,600
libraries so<font color="#E5E5E5"> are</font><font color="#CCCCCC"> available is available</font>

581
00:25:08,760 --> 00:25:15,060
<font color="#CCCCCC">on almost all</font><font color="#E5E5E5"> windows machine and before</font>

582
00:25:12,600 --> 00:25:18,030
we go<font color="#E5E5E5"> further there are</font><font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> remarks</font>

583
00:25:15,060 --> 00:25:20,280
<font color="#CCCCCC">about this</font><font color="#E5E5E5"> gadget in first version of</font>

584
00:25:18,030 --> 00:25:23,310
<font color="#E5E5E5">powershell this type is</font><font color="#CCCCCC"> not serializable</font>

585
00:25:20,280 --> 00:25:25,260
<font color="#E5E5E5">so</font><font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> suitable for attack but all</font>

586
00:25:23,310 --> 00:25:28,320
modern<font color="#CCCCCC"> web</font><font color="#E5E5E5"> version of windows starting</font>

587
00:25:25,260 --> 00:25:30,990
from a Windows 8 and Windows 2000 server

588
00:25:28,320 --> 00:25:34,080
2012<font color="#E5E5E5"> are shipped</font><font color="#CCCCCC"> with newer and</font>

589
00:25:30,990 --> 00:25:37,320
vulnerable version<font color="#E5E5E5"> also if you updated</font>

590
00:25:34,080 --> 00:25:39,570
<font color="#CCCCCC">your</font><font color="#E5E5E5"> PowerShell in</font><font color="#CCCCCC"> on older</font>

591
00:25:37,320 --> 00:25:42,860
<font color="#E5E5E5">Windows version and this problem is</font>

592
00:25:39,570 --> 00:25:47,939
relevant for<font color="#E5E5E5"> you as well</font>

593
00:25:42,860 --> 00:25:51,000
next remark<font color="#E5E5E5"> we we reported this problem</font>

594
00:25:47,940 --> 00:25:53,039
to Microsoft<font color="#E5E5E5"> and two weeks ago they</font>

595
00:25:51,000 --> 00:25:55,500
<font color="#E5E5E5">released</font><font color="#CCCCCC"> a fix so</font><font color="#E5E5E5"> if you are not</font>

596
00:25:53,039 --> 00:25:57,960
ignoring their updates<font color="#E5E5E5"> you are</font><font color="#CCCCCC"> safe</font>

597
00:25:55,500 --> 00:26:00,659
so<font color="#CCCCCC"> Pierce object</font><font color="#E5E5E5"> it uses custom</font>

598
00:25:57,960 --> 00:26:04,529
<font color="#E5E5E5">digitizer and in case of</font><font color="#CCCCCC"> tea I am</font>

599
00:26:00,659 --> 00:26:09,769
instance it will call<font color="#CCCCCC"> GIM instance</font>

600
00:26:04,529 --> 00:26:12,659
<font color="#E5E5E5">rehydrate see I am instance</font><font color="#CCCCCC"> property</font>

601
00:26:09,769 --> 00:26:16,649
here we can see<font color="#CCCCCC"> that attacker is able to</font>

602
00:26:12,659 --> 00:26:20,039
<font color="#E5E5E5">specify own type as element type of</font>

603
00:26:16,649 --> 00:26:23,928
array and the sterilizer will try<font color="#CCCCCC"> to</font>

604
00:26:20,039 --> 00:26:26,669
<font color="#CCCCCC">deconstruct</font><font color="#E5E5E5"> object of this type for</font>

605
00:26:23,929 --> 00:26:29,250
<font color="#CCCCCC">finding proper way to do this it will</font>

606
00:26:26,669 --> 00:26:31,620
use a<font color="#CCCCCC"> figure conversion method</font><font color="#E5E5E5"> it's</font>

607
00:26:29,250 --> 00:26:34,590
quite interesting<font color="#CCCCCC"> for</font><font color="#E5E5E5"> attacker us there</font>

608
00:26:31,620 --> 00:26:37,709
a lot of<font color="#E5E5E5"> option to attack</font><font color="#CCCCCC"> and we</font>

609
00:26:34,590 --> 00:26:39,480
highlighted only the most obvious one<font color="#E5E5E5"> we</font>

610
00:26:37,710 --> 00:26:41,730
can call<font color="#E5E5E5"> a concern on default</font>

611
00:26:39,480 --> 00:26:45,950
constructor with one argument<font color="#E5E5E5"> and we can</font>

612
00:26:41,730 --> 00:26:50,279
control this argument<font color="#E5E5E5"> we can invoke</font>

613
00:26:45,950 --> 00:26:55,350
setters on public properties so<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font>

614
00:26:50,279 --> 00:26:58,350
use mention it earlier<font color="#E5E5E5"> gadgets or we can</font>

615
00:26:55,350 --> 00:27:03,350
call static public<font color="#E5E5E5"> parts method of</font>

616
00:26:58,350 --> 00:27:03,350
arbitrary type let's try to use<font color="#CCCCCC"> this one</font>

617
00:27:07,770 --> 00:27:15,800
as we said earlier some reader<font color="#E5E5E5"> parts can</font>

618
00:27:12,180 --> 00:27:19,350
be<font color="#E5E5E5"> used for arbitrary</font><font color="#CCCCCC"> method</font><font color="#E5E5E5"> invocation</font>

619
00:27:15,800 --> 00:27:23,520
<font color="#CCCCCC">here we</font><font color="#E5E5E5"> can see a payload that</font><font color="#CCCCCC"> we'll</font>

620
00:27:19,350 --> 00:27:28,760
call process start with<font color="#E5E5E5"> our argument we</font>

621
00:27:23,520 --> 00:27:32,190
can notice<font color="#CCCCCC"> nine space</font><font color="#E5E5E5"> assembly type</font>

622
00:27:28,760 --> 00:27:34,970
<font color="#E5E5E5">method name and finally calc as our</font>

623
00:27:32,190 --> 00:27:34,970
argument

624
00:27:35,660 --> 00:27:41,090
apart from already mentioned<font color="#E5E5E5"> binary</font>

625
00:27:39,150 --> 00:27:44,930
format and net<font color="#CCCCCC"> data contract serializer</font>

626
00:27:41,090 --> 00:27:47,280
<font color="#E5E5E5">dotnet offers a lot of other</font><font color="#CCCCCC"> formatters</font>

627
00:27:44,930 --> 00:27:51,540
unfortunately we don't have<font color="#CCCCCC"> enough time</font>

628
00:27:47,280 --> 00:27:55,170
to<font color="#CCCCCC"> cover</font><font color="#E5E5E5"> to provide the</font><font color="#CCCCCC"> talat</font><font color="#E5E5E5"> view of</font>

629
00:27:51,540 --> 00:27:59,159
each of them<font color="#E5E5E5"> so we will briefly cover</font>

630
00:27:55,170 --> 00:28:01,980
them in today today talk and if you are

631
00:27:59,160 --> 00:28:04,920
interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> deeper analysis we can</font>

632
00:28:01,980 --> 00:28:08,580
offer<font color="#CCCCCC"> our white paper as good source</font><font color="#E5E5E5"> so</font>

633
00:28:04,920 --> 00:28:10,500
we<font color="#CCCCCC"> can group them in two big</font><font color="#E5E5E5"> groups for</font>

634
00:28:08,580 --> 00:28:12,960
matters that<font color="#CCCCCC"> are vulnerable in default</font>

635
00:28:10,500 --> 00:28:15,870
configuration like<font color="#E5E5E5"> binary format absorb</font>

636
00:28:12,960 --> 00:28:18,900
format net data contract serializer<font color="#E5E5E5"> also</font>

637
00:28:15,870 --> 00:28:21,719
we can<font color="#E5E5E5"> adhere for matters that</font>

638
00:28:18,900 --> 00:28:23,850
internally use them like object state

639
00:28:21,720 --> 00:28:27,000
<font color="#E5E5E5">formatter loss formatter binary message</font>

640
00:28:23,850 --> 00:28:29,610
<font color="#CCCCCC">format</font><font color="#E5E5E5"> they should not be used for the</font>

641
00:28:27,000 --> 00:28:31,950
<font color="#CCCCCC">serialization of</font><font color="#E5E5E5"> an untrusted data or</font>

642
00:28:29,610 --> 00:28:34,409
you have<font color="#CCCCCC"> to proper configure them to</font>

643
00:28:31,950 --> 00:28:36,270
<font color="#E5E5E5">limit available types for</font><font color="#CCCCCC"> example use</font>

644
00:28:34,410 --> 00:28:41,120
restricted type resolver with

645
00:28:36,270 --> 00:28:43,860
<font color="#CCCCCC">whitelisted types the second group is</font>

646
00:28:41,120 --> 00:28:47,760
for matters that are<font color="#E5E5E5"> safe in the full</font>

647
00:28:43,860 --> 00:28:50,580
configuration<font color="#E5E5E5"> like</font><font color="#CCCCCC"> XML</font><font color="#E5E5E5"> sterilizer</font><font color="#CCCCCC"> data</font>

648
00:28:47,760 --> 00:28:53,270
contract sterilizer<font color="#E5E5E5"> and data contract</font>

649
00:28:50,580 --> 00:28:56,879
<font color="#E5E5E5">JSON sterilizer but if you are using</font>

650
00:28:53,270 --> 00:28:59,700
weak data<font color="#CCCCCC"> contractor resolver</font><font color="#E5E5E5"> by the way</font>

651
00:28:56,880 --> 00:29:02,270
we have found such examples even<font color="#E5E5E5"> in</font>

652
00:28:59,700 --> 00:29:05,940
official Microsoft documentation or

653
00:29:02,270 --> 00:29:08,700
attacker is able<font color="#E5E5E5"> to control expected</font>

654
00:29:05,940 --> 00:29:12,090
type you<font color="#CCCCCC"> have a very serious</font><font color="#E5E5E5"> security</font>

655
00:29:08,700 --> 00:29:17,490
problem<font color="#CCCCCC"> and we will show a</font><font color="#E5E5E5"> bit later how</font>

656
00:29:12,090 --> 00:29:19,290
that<font color="#CCCCCC"> in this case</font><font color="#E5E5E5"> code execution in</font>

657
00:29:17,490 --> 00:29:22,860
Israel<font color="#E5E5E5"> even</font><font color="#CCCCCC"> for the most</font>

658
00:29:19,290 --> 00:29:25,230
<font color="#CCCCCC">Limited for</font><font color="#E5E5E5"> matters like for example XML</font>

659
00:29:22,860 --> 00:29:26,100
serializing now we will<font color="#E5E5E5"> switch back to</font>

660
00:29:25,230 --> 00:29:30,570
<font color="#CCCCCC">Alvaro</font>

661
00:29:26,100 --> 00:29:33,179
and he will show<font color="#E5E5E5"> our next demo so</font>

662
00:29:30,570 --> 00:29:35,760
because demo is probably worth of

663
00:29:33,180 --> 00:29:38,040
thousands lights let's see<font color="#E5E5E5"> how can</font><font color="#CCCCCC"> we</font>

664
00:29:35,760 --> 00:29:41,150
<font color="#CCCCCC">use our PS object Katya - Casper mode</font>

665
00:29:38,040 --> 00:29:45,030
remote code execution<font color="#E5E5E5"> on any application</font>

666
00:29:41,150 --> 00:29:46,380
<font color="#CCCCCC">build using</font><font color="#E5E5E5"> this Nancy framework so for</font>

667
00:29:45,030 --> 00:29:48,030
those of<font color="#E5E5E5"> you that are not familiar with</font>

668
00:29:46,380 --> 00:29:50,670
<font color="#CCCCCC">Nancy's our web</font><font color="#E5E5E5"> application framework</font>

669
00:29:48,030 --> 00:29:53,690
for the.net world that is very<font color="#CCCCCC"> similarly</font>

670
00:29:50,670 --> 00:29:57,510
inspired<font color="#E5E5E5"> by the Ruby Sinatra framework</font>

671
00:29:53,690 --> 00:29:59,340
<font color="#CCCCCC">they offer some security features</font><font color="#E5E5E5"> like</font>

672
00:29:57,510 --> 00:30:03,150
<font color="#CCCCCC">for example C soft protection which is</font>

673
00:29:59,340 --> 00:30:05,580
<font color="#E5E5E5">good but in order</font><font color="#CCCCCC"> to protect against sis</font>

674
00:30:03,150 --> 00:30:07,290
<font color="#CCCCCC">our protection SSR</font><font color="#E5E5E5"> they open the doors</font>

675
00:30:05,580 --> 00:30:09,360
to remote code execution which is not

676
00:30:07,290 --> 00:30:12,360
that<font color="#E5E5E5"> good</font><font color="#CCCCCC"> in this case</font><font color="#E5E5E5"> what they were</font>

677
00:30:09,360 --> 00:30:14,010
doing<font color="#CCCCCC"> were</font><font color="#E5E5E5"> basically setting this unique</font>

678
00:30:12,360 --> 00:30:16,080
<font color="#E5E5E5">body that we</font><font color="#CCCCCC"> used to</font><font color="#E5E5E5"> protect against</font>

679
00:30:14,010 --> 00:30:17,850
itself<font color="#E5E5E5"> instead of putting that value</font>

680
00:30:16,080 --> 00:30:19,860
<font color="#E5E5E5">directly into the cookie they were</font>

681
00:30:17,850 --> 00:30:21,990
putting that as the<font color="#E5E5E5"> property</font><font color="#CCCCCC"> of a class</font>

682
00:30:19,860 --> 00:30:24,179
and then<font color="#E5E5E5"> said arise in that class into</font>

683
00:30:21,990 --> 00:30:27,660
<font color="#E5E5E5">the cookie and then do not send in the</font>

684
00:30:24,180 --> 00:30:29,820
cookie over<font color="#E5E5E5"> the the wire so what we were</font>

685
00:30:27,660 --> 00:30:31,560
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get pre authenticated remote</font>

686
00:30:29,820 --> 00:30:35,760
code execution<font color="#E5E5E5"> on any application built</font>

687
00:30:31,560 --> 00:30:37,290
using<font color="#E5E5E5"> Nancy and let's see well this is</font>

688
00:30:35,760 --> 00:30:39,500
<font color="#CCCCCC">actually the payload that is basics</font>

689
00:30:37,290 --> 00:30:42,720
<font color="#CCCCCC">different coded if you find this</font>

690
00:30:39,500 --> 00:30:45,150
eh-eh-eh<font color="#CCCCCC"> D magic number in any of your</font>

691
00:30:42,720 --> 00:30:49,170
pen test then<font color="#E5E5E5"> you</font><font color="#CCCCCC"> do get</font><font color="#E5E5E5"> remote code</font>

692
00:30:45,150 --> 00:30:50,910
execution<font color="#E5E5E5"> so this is a sample</font>

693
00:30:49,170 --> 00:30:56,010
<font color="#E5E5E5">application</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> built</font><font color="#CCCCCC"> using Nancy</font>

694
00:30:50,910 --> 00:30:57,240
<font color="#E5E5E5">very simple if we</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> the cookies for</font>

695
00:30:56,010 --> 00:30:59,700
this<font color="#CCCCCC"> application that</font><font color="#E5E5E5"> this application</font>

696
00:30:57,240 --> 00:31:03,120
<font color="#CCCCCC">is</font><font color="#E5E5E5"> set in in our browser</font><font color="#CCCCCC"> we will see</font>

697
00:30:59,700 --> 00:31:05,640
<font color="#E5E5E5">this</font><font color="#CCCCCC"> NC star cookie which contain these</font>

698
00:31:03,120 --> 00:31:08,939
magic<font color="#E5E5E5"> numbers</font><font color="#CCCCCC"> so we were like oh this is</font>

699
00:31:05,640 --> 00:31:10,770
code execution<font color="#E5E5E5"> nice now if we check the</font>

700
00:31:08,940 --> 00:31:14,400
<font color="#E5E5E5">source code we can</font><font color="#CCCCCC"> see that this same</font>

701
00:31:10,770 --> 00:31:17,910
<font color="#E5E5E5">value is also included as a hidden field</font>

702
00:31:14,400 --> 00:31:20,310
for<font color="#E5E5E5"> this form so this</font><font color="#CCCCCC"> is making this</font>

703
00:31:17,910 --> 00:31:24,180
kind of data submission of the<font color="#CCCCCC"> CSR</font>

704
00:31:20,310 --> 00:31:26,460
cookie now we will be used in our<font color="#E5E5E5"> PS</font>

705
00:31:24,180 --> 00:31:28,710
object<font color="#CCCCCC"> code</font><font color="#E5E5E5"> yet now because it's a fixed</font>

706
00:31:26,460 --> 00:31:31,260
<font color="#E5E5E5">by Microsoft you can use any of the gems</font>

707
00:31:28,710 --> 00:31:32,229
<font color="#E5E5E5">for</font><font color="#CCCCCC"> circuits</font><font color="#E5E5E5"> instead so they will work</font>

708
00:31:31,260 --> 00:31:35,479
as<font color="#E5E5E5"> well as</font>

709
00:31:32,229 --> 00:31:37,459
<font color="#E5E5E5">and if we replace the cookie with our</font><font color="#CCCCCC"> PS</font>

710
00:31:35,479 --> 00:31:39,589
<font color="#CCCCCC">object Katya that is configured to</font><font color="#E5E5E5"> pop</font>

711
00:31:37,459 --> 00:31:42,649
up a calculator<font color="#E5E5E5"> and we just submit the</font>

712
00:31:39,589 --> 00:31:45,499
<font color="#E5E5E5">form</font><font color="#CCCCCC"> we can see that there is</font><font color="#E5E5E5"> no</font>

713
00:31:42,649 --> 00:31:49,158
calculator again<font color="#E5E5E5"> and if we send and</font>

714
00:31:45,499 --> 00:31:51,649
submit the request<font color="#CCCCCC"> we</font><font color="#E5E5E5"> will get a</font><font color="#CCCCCC"> 505</font>

715
00:31:49,159 --> 00:31:59,759
exception<font color="#E5E5E5"> but no problem because we got</font>

716
00:31:51,649 --> 00:32:03,129
our calculators<font color="#E5E5E5"> running thank you</font>

717
00:31:59,759 --> 00:32:04,960
so we wanted<font color="#E5E5E5"> to highlight that this is</font>

718
00:32:03,129 --> 00:32:07,360
not a problem in<font color="#CCCCCC"> Jason this is not a</font>

719
00:32:04,960 --> 00:32:09,669
problem<font color="#E5E5E5"> in XML</font><font color="#CCCCCC"> or for example in Java</font>

720
00:32:07,360 --> 00:32:12,100
<font color="#E5E5E5">visualization or binary</font><font color="#CCCCCC"> formatted for</font>

721
00:32:09,669 --> 00:32:15,340
<font color="#E5E5E5">the net this</font><font color="#CCCCCC"> is actually something that</font>

722
00:32:12,100 --> 00:32:18,070
is<font color="#E5E5E5"> a problem in sterilizers themselves</font>

723
00:32:15,340 --> 00:32:19,899
<font color="#E5E5E5">so most or if not all</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> serial isit</font>

724
00:32:18,070 --> 00:32:22,720
will need to<font color="#E5E5E5"> reconstruct those objects</font>

725
00:32:19,899 --> 00:32:26,320
during<font color="#E5E5E5"> this allocation</font><font color="#CCCCCC"> and if you find</font>

726
00:32:22,720 --> 00:32:27,820
that<font color="#E5E5E5"> these serial icers are worth</font>

727
00:32:26,320 --> 00:32:29,499
satisfying these three requirement that

728
00:32:27,820 --> 00:32:31,360
we mentioned<font color="#E5E5E5"> before so including</font>

729
00:32:29,499 --> 00:32:33,909
including<font color="#CCCCCC"> type information in the</font>

730
00:32:31,360 --> 00:32:36,570
<font color="#CCCCCC">sterilized data i invoking methods on</font>

731
00:32:33,909 --> 00:32:40,600
those reconstructed objects and then

732
00:32:36,570 --> 00:32:43,149
with some large enough<font color="#E5E5E5"> cutted space for</font>

733
00:32:40,600 --> 00:32:44,590
the attackers to<font color="#E5E5E5"> assembly gadget</font>

734
00:32:43,149 --> 00:32:46,570
<font color="#CCCCCC">changing</font><font color="#E5E5E5"> into arbitrary code execution</font>

735
00:32:44,590 --> 00:32:49,240
<font color="#E5E5E5">then you will be able to attack any</font>

736
00:32:46,570 --> 00:32:52,539
format in any language<font color="#CCCCCC"> that you will</font>

737
00:32:49,240 --> 00:32:55,299
find<font color="#E5E5E5"> also because most of the library</font>

738
00:32:52,539 --> 00:32:56,889
libraries will invoke setters the<font color="#CCCCCC"> katia</font>

739
00:32:55,299 --> 00:32:58,809
<font color="#E5E5E5">table we presented here today object</font>

740
00:32:56,889 --> 00:33:01,899
data provided and the JDBC<font color="#E5E5E5"> row setting</font>

741
00:32:58,809 --> 00:33:03,610
<font color="#E5E5E5">imple can be used to attack most of the</font>

742
00:33:01,899 --> 00:33:08,168
CLI<font color="#CCCCCC"> sirs out there that satisfy these</font>

743
00:33:03,610 --> 00:33:11,320
<font color="#E5E5E5">dis requirements so we found many we</font>

744
00:33:08,169 --> 00:33:13,029
review many formats and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> found many of</font>

745
00:33:11,320 --> 00:33:14,590
them<font color="#E5E5E5"> vulnerables we want to highlight</font>

746
00:33:13,029 --> 00:33:15,879
<font color="#E5E5E5">these three because well we don't have</font>

747
00:33:14,590 --> 00:33:18,850
<font color="#E5E5E5">time for more</font>

748
00:33:15,879 --> 00:33:21,549
for example<font color="#CCCCCC"> FSP</font><font color="#E5E5E5"> clear and</font><font color="#CCCCCC"> subsidizes</font><font color="#E5E5E5"> our</font>

749
00:33:18,850 --> 00:33:23,259
dotnet<font color="#CCCCCC"> c realises that work</font><font color="#E5E5E5"> not just</font>

750
00:33:21,549 --> 00:33:26,379
with a donut framework but also with

751
00:33:23,259 --> 00:33:28,570
dotnet core silverlight windows mobile

752
00:33:26,379 --> 00:33:31,119
phone<font color="#E5E5E5"> so developers may choose</font><font color="#CCCCCC"> these</font>

753
00:33:28,570 --> 00:33:33,129
serializers over the<font color="#E5E5E5"> native ones when</font>

754
00:33:31,119 --> 00:33:35,230
working<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> silverlight or</font>

755
00:33:33,129 --> 00:33:36,789
whatever<font color="#E5E5E5"> so both of them include type</font>

756
00:33:35,230 --> 00:33:39,879
information<font color="#CCCCCC"> by default both of them</font>

757
00:33:36,789 --> 00:33:41,379
invoke setters<font color="#E5E5E5"> and</font><font color="#CCCCCC"> will FSP clear</font>

758
00:33:39,879 --> 00:33:43,769
performs an inspection<font color="#E5E5E5"> of the object</font>

759
00:33:41,379 --> 00:33:47,529
graph inspection<font color="#E5E5E5"> of object spectrograph</font>

760
00:33:43,769 --> 00:33:49,690
<font color="#E5E5E5">expect the type of the graph but so you</font>

761
00:33:47,529 --> 00:33:51,879
will need<font color="#CCCCCC"> to find these entry points but</font>

762
00:33:49,690 --> 00:33:53,769
<font color="#CCCCCC">subsidy eliezer performs no type control</font>

763
00:33:51,879 --> 00:33:56,080
at all<font color="#CCCCCC"> which means that it cannot be</font>

764
00:33:53,769 --> 00:33:58,360
<font color="#CCCCCC">used with untrusted data at</font><font color="#E5E5E5"> all then we</font>

765
00:33:56,080 --> 00:34:01,629
have wire that<font color="#E5E5E5"> is now known as Hyperion</font>

766
00:33:58,360 --> 00:34:03,908
and is the<font color="#CCCCCC"> steriliser for</font><font color="#E5E5E5"> a cadet</font><font color="#CCCCCC"> akka</font>

767
00:34:01,629 --> 00:34:06,490
<font color="#CCCCCC">doughnuts basically the total</font><font color="#E5E5E5"> net</font>

768
00:34:03,909 --> 00:34:09,520
version of the famous<font color="#CCCCCC"> s Colin</font><font color="#E5E5E5"> and Java</font>

769
00:34:06,490 --> 00:34:12,668
framework to deal with concurrency<font color="#E5E5E5"> using</font>

770
00:34:09,520 --> 00:34:14,889
<font color="#E5E5E5">a</font><font color="#CCCCCC"> dis actor based models which basically</font>

771
00:34:12,668 --> 00:34:16,868
these<font color="#CCCCCC"> factors communicate exchanging</font>

772
00:34:14,889 --> 00:34:18,549
messages that<font color="#CCCCCC"> are satellites with</font><font color="#E5E5E5"> taste</font>

773
00:34:16,869 --> 00:34:20,260
<font color="#E5E5E5">on the net using the insecure</font>

774
00:34:18,549 --> 00:34:21,849
configuration<font color="#E5E5E5"> that we saw you</font><font color="#CCCCCC"> before</font>

775
00:34:20,260 --> 00:34:25,179
this type<font color="#E5E5E5"> name handling</font><font color="#CCCCCC"> equals all</font>

776
00:34:21,849 --> 00:34:26,619
<font color="#E5E5E5">however</font><font color="#CCCCCC"> you can enable this new customs</font>

777
00:34:25,179 --> 00:34:29,349
they<font color="#E5E5E5"> realize that they implemented that</font>

778
00:34:26,619 --> 00:34:31,869
is called Hyperion<font color="#E5E5E5"> that also includes</font>

779
00:34:29,349 --> 00:34:34,359
<font color="#E5E5E5">type discriminators also invoke setters</font>

780
00:34:31,869 --> 00:34:37,329
and also performs no type control at<font color="#CCCCCC"> all</font>

781
00:34:34,359 --> 00:34:40,418
so if you can send<font color="#CCCCCC"> any message to an</font>

782
00:34:37,329 --> 00:34:41,950
<font color="#E5E5E5">Academy net or</font><font color="#CCCCCC"> akka actors you will be</font>

783
00:34:40,418 --> 00:34:43,109
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to get remote code execution as</font>

784
00:34:41,949 --> 00:34:45,460
well

785
00:34:43,109 --> 00:34:47,529
<font color="#E5E5E5">also beware of rolling</font><font color="#CCCCCC"> your own format</font>

786
00:34:45,460 --> 00:34:49,809
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> like crypto</font><font color="#E5E5E5"> right</font>

787
00:34:47,530 --> 00:34:52,329
for example Nancy the framework that<font color="#CCCCCC"> we</font>

788
00:34:49,809 --> 00:34:54,220
saw before<font color="#E5E5E5"> they decided to move away</font>

789
00:34:52,329 --> 00:34:55,629
from binary<font color="#E5E5E5"> format because binary format</font>

790
00:34:54,219 --> 00:34:57,790
was not going to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> included in</font><font color="#E5E5E5"> the</font>

791
00:34:55,629 --> 00:35:00,430
first version of.net core so they

792
00:34:57,790 --> 00:35:01,839
implemented their own<font color="#E5E5E5"> JSON parser so</font>

793
00:35:00,430 --> 00:35:06,549
what can go wrong

794
00:35:01,839 --> 00:35:08,859
well they included this type object

795
00:35:06,549 --> 00:35:11,140
discriminator so attacker can control

796
00:35:08,859 --> 00:35:13,058
the type and they invoke<font color="#CCCCCC"> setters</font><font color="#E5E5E5"> so we</font>

797
00:35:11,140 --> 00:35:15,670
were also<font color="#CCCCCC"> able to get arbitrary code</font>

798
00:35:13,059 --> 00:35:18,400
execution<font color="#E5E5E5"> in these</font><font color="#CCCCCC"> pre-released</font><font color="#E5E5E5"> to the</font>

799
00:35:15,670 --> 00:35:20,079
text<font color="#E5E5E5"> version well it was released as a</font>

800
00:35:18,400 --> 00:35:23,140
beta but it was not like<font color="#E5E5E5"> the official</font>

801
00:35:20,079 --> 00:35:25,930
<font color="#CCCCCC">version and then we also found one of</font>

802
00:35:23,140 --> 00:35:27,790
<font color="#E5E5E5">the most popular CMS for the.net world</font>

803
00:35:25,930 --> 00:35:31,450
that is called the<font color="#CCCCCC"> DotNetNuke beginning</font>

804
00:35:27,790 --> 00:35:33,910
or if not<font color="#E5E5E5"> the most popular library which</font>

805
00:35:31,450 --> 00:35:37,240
uses<font color="#E5E5E5"> XML serialization</font>

806
00:35:33,910 --> 00:35:39,339
to serialize<font color="#CCCCCC"> untrusted data and in this</font>

807
00:35:37,240 --> 00:35:43,779
case<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> the value in a request</font>

808
00:35:39,339 --> 00:35:46,029
cooking<font color="#CCCCCC"> what they wanted</font><font color="#E5E5E5"> to use XML</font>

809
00:35:43,780 --> 00:35:47,920
serialization<font color="#E5E5E5"> with arbitrary types so in</font>

810
00:35:46,030 --> 00:35:50,470
order to<font color="#E5E5E5"> do that they created this</font>

811
00:35:47,920 --> 00:35:52,869
wrapper around<font color="#E5E5E5"> XML</font><font color="#CCCCCC"> sterilizer so they</font>

812
00:35:50,470 --> 00:35:55,000
send the type that is going to be like

813
00:35:52,869 --> 00:35:58,319
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Spector type and then the payload</font>

814
00:35:55,000 --> 00:35:58,319
<font color="#E5E5E5">for the XML serialization</font>

815
00:35:58,750 --> 00:36:02,799
<font color="#E5E5E5">XML</font><font color="#CCCCCC"> I'd say there I said is the most</font>

816
00:36:00,900 --> 00:36:04,900
<font color="#E5E5E5">limited by far</font>

817
00:36:02,799 --> 00:36:06,730
<font color="#CCCCCC">serial I</font><font color="#E5E5E5"> said in the donut family so it</font>

818
00:36:04,900 --> 00:36:08,770
was<font color="#E5E5E5"> like a challenge</font><font color="#CCCCCC"> for us if we were</font>

819
00:36:06,730 --> 00:36:11,440
able<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> a better recall execution in</font>

820
00:36:08,770 --> 00:36:13,990
this case we were sure like like<font color="#CCCCCC"> we can</font>

821
00:36:11,440 --> 00:36:15,549
do that for<font color="#E5E5E5"> any other libraries so we</font>

822
00:36:13,990 --> 00:36:20,290
wanted to<font color="#CCCCCC"> use our object</font><font color="#E5E5E5"> beta providers</font>

823
00:36:15,549 --> 00:36:22,150
<font color="#CCCCCC">data and gadget</font><font color="#E5E5E5"> and well best so far</font><font color="#CCCCCC"> so</font>

824
00:36:20,290 --> 00:36:23,210
good because it's<font color="#CCCCCC"> XML satellizer</font>

825
00:36:22,150 --> 00:36:25,250
<font color="#E5E5E5">friendly I</font>

826
00:36:23,210 --> 00:36:27,470
see realized<font color="#E5E5E5"> by</font><font color="#CCCCCC"> XML is realizing no</font>

827
00:36:25,250 --> 00:36:29,839
problem at all<font color="#E5E5E5"> however</font><font color="#CCCCCC"> if we want</font><font color="#E5E5E5"> to</font>

828
00:36:27,470 --> 00:36:31,189
invoke<font color="#CCCCCC"> processes of the start</font><font color="#E5E5E5"> then we</font>

829
00:36:29,839 --> 00:36:34,549
will get<font color="#E5E5E5"> our first problem because</font>

830
00:36:31,190 --> 00:36:36,589
process contains interface member and

831
00:36:34,550 --> 00:36:38,510
for example<font color="#E5E5E5"> XML serialization is very</font>

832
00:36:36,589 --> 00:36:40,820
limited as I said it cannot<font color="#E5E5E5"> settle eyes</font>

833
00:36:38,510 --> 00:36:44,330
<font color="#E5E5E5">types with interface members it cannot</font>

834
00:36:40,820 --> 00:36:45,650
serialize types<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have system</font><font color="#E5E5E5"> dot type</font>

835
00:36:44,330 --> 00:36:48,049
properties for example<font color="#CCCCCC"> and many</font><font color="#E5E5E5"> other</font>

836
00:36:45,650 --> 00:36:49,940
limitations<font color="#E5E5E5"> so we couldn't use</font><font color="#CCCCCC"> the</font>

837
00:36:48,050 --> 00:36:50,270
<font color="#E5E5E5">process daughter start as the final cut</font>

838
00:36:49,940 --> 00:36:52,640
yet

839
00:36:50,270 --> 00:36:55,520
however<font color="#CCCCCC"> this was easily solved because</font>

840
00:36:52,640 --> 00:36:57,560
<font color="#E5E5E5">we can</font><font color="#CCCCCC"> use our summer reader load cut</font>

841
00:36:55,520 --> 00:36:59,450
yet or the object state formatter<font color="#E5E5E5"> this I</font>

842
00:36:57,560 --> 00:37:01,130
realized<font color="#E5E5E5"> in</font><font color="#CCCCCC"> order to get remote code</font>

843
00:36:59,450 --> 00:37:03,919
execution<font color="#CCCCCC"> or even better you can</font>

844
00:37:01,130 --> 00:37:05,810
<font color="#E5E5E5">actually search the target</font><font color="#CCCCCC"> application</font>

845
00:37:03,920 --> 00:37:08,030
class path for interesting gadgets and

846
00:37:05,810 --> 00:37:10,009
the guy is<font color="#E5E5E5"> at</font><font color="#CCCCCC"> DotNetNuke were kind</font>

847
00:37:08,030 --> 00:37:13,190
enough<font color="#CCCCCC"> to provide</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> with this</font><font color="#E5E5E5"> file</font>

848
00:37:10,010 --> 00:37:15,470
system<font color="#CCCCCC"> use class that contains methods</font>

849
00:37:13,190 --> 00:37:17,869
that are very convenient to deploy web

850
00:37:15,470 --> 00:37:20,660
web cells or to read<font color="#E5E5E5"> flyers and put the</font>

851
00:37:17,869 --> 00:37:22,849
response<font color="#E5E5E5"> the data into the HTTP response</font>

852
00:37:20,660 --> 00:37:27,770
<font color="#E5E5E5">so that problem was solved no problems</font>

853
00:37:22,849 --> 00:37:29,240
so<font color="#E5E5E5"> far now when XML said I said builds</font>

854
00:37:27,770 --> 00:37:33,560
one<font color="#E5E5E5"> of these white list that we talked</font>

855
00:37:29,240 --> 00:37:35,450
<font color="#CCCCCC">about before so a construction type it</font>

856
00:37:33,560 --> 00:37:37,880
will see that the object data provided

857
00:37:35,450 --> 00:37:39,950
contains a system dot object property so

858
00:37:37,880 --> 00:37:42,680
it will include system dot object as<font color="#CCCCCC"> the</font>

859
00:37:39,950 --> 00:37:44,330
in the<font color="#E5E5E5"> white list but a runtime we will</font>

860
00:37:42,680 --> 00:37:47,089
be providing something<font color="#CCCCCC"> else we will</font><font color="#E5E5E5"> be</font>

861
00:37:44,330 --> 00:37:49,848
providing<font color="#E5E5E5"> the sun'll reader or maybe the</font>

862
00:37:47,089 --> 00:37:51,170
file system<font color="#CCCCCC"> units or maybe these</font><font color="#E5E5E5"> object</font>

863
00:37:49,849 --> 00:37:54,470
state format<font color="#E5E5E5"> have something else right</font>

864
00:37:51,170 --> 00:37:57,859
<font color="#CCCCCC">so these types won't be in the white</font>

865
00:37:54,470 --> 00:38:00,830
list<font color="#E5E5E5"> and so the XML serializable prevent</font>

866
00:37:57,859 --> 00:38:03,440
the<font color="#CCCCCC"> visualisation of these types so</font><font color="#E5E5E5"> we</font>

867
00:38:00,830 --> 00:38:05,720
needed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> fool xml cell i satellizer</font>

868
00:38:03,440 --> 00:38:07,910
<font color="#CCCCCC">into including these types</font><font color="#E5E5E5"> into the</font>

869
00:38:05,720 --> 00:38:10,640
white list<font color="#E5E5E5"> and the way they we did it</font>

870
00:38:07,910 --> 00:38:12,529
was basically using<font color="#E5E5E5"> this expected type</font>

871
00:38:10,640 --> 00:38:14,930
which is basically basically<font color="#E5E5E5"> a</font>

872
00:38:12,530 --> 00:38:17,660
<font color="#CCCCCC">parameterized type and in the</font>

873
00:38:14,930 --> 00:38:21,020
parameterized type we're using<font color="#CCCCCC"> we're</font>

874
00:38:17,660 --> 00:38:23,029
placing<font color="#E5E5E5"> our runtime types so these are</font>

875
00:38:21,020 --> 00:38:25,490
<font color="#E5E5E5">going to be included in</font><font color="#CCCCCC"> the white list</font>

876
00:38:23,030 --> 00:38:29,570
<font color="#E5E5E5">and when we send our payload it will</font>

877
00:38:25,490 --> 00:38:31,640
work<font color="#CCCCCC"> like a term so let's see that</font><font color="#E5E5E5"> in</font>

878
00:38:29,570 --> 00:38:33,050
<font color="#E5E5E5">action as we said we were</font><font color="#CCCCCC"> able to get a</font>

879
00:38:31,640 --> 00:38:35,299
<font color="#E5E5E5">bit rowdy code execution pre</font>

880
00:38:33,050 --> 00:38:37,420
authentication on any instance of the

881
00:38:35,300 --> 00:38:41,180
<font color="#CCCCCC">dotnetnuke</font><font color="#E5E5E5"> see</font>

882
00:38:37,420 --> 00:38:43,790
and well this<font color="#E5E5E5"> is the source code leading</font>

883
00:38:41,180 --> 00:38:45,560
to the vulnerability<font color="#E5E5E5"> the source is in</font><font color="#CCCCCC"> in</font>

884
00:38:43,790 --> 00:38:48,200
this<font color="#E5E5E5"> piece of code</font><font color="#CCCCCC"> that gets executed</font>

885
00:38:45,560 --> 00:38:50,630
<font color="#CCCCCC">for example in</font><font color="#E5E5E5"> many cases but one of the</font>

886
00:38:48,200 --> 00:38:54,859
cases is when<font color="#E5E5E5"> visiting the 404 page the</font>

887
00:38:50,630 --> 00:38:57,230
error page<font color="#CCCCCC"> so at</font><font color="#E5E5E5"> that time this DNN</font>

888
00:38:54,860 --> 00:38:59,600
<font color="#E5E5E5">personalization cookie is going to be</font>

889
00:38:57,230 --> 00:39:03,590
read and then pass<font color="#CCCCCC"> to this DISA realized</font>

890
00:38:59,600 --> 00:39:07,279
hash table<font color="#E5E5E5"> XML method then here will</font>

891
00:39:03,590 --> 00:39:10,100
basically<font color="#E5E5E5"> extract the type from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> XML</font>

892
00:39:07,280 --> 00:39:12,350
cookie and then use<font color="#CCCCCC"> that type</font><font color="#E5E5E5"> to build</font>

893
00:39:10,100 --> 00:39:14,029
our XML sterilizer so the attacker can

894
00:39:12,350 --> 00:39:15,380
control the expected type remember I

895
00:39:14,030 --> 00:39:18,620
told you<font color="#E5E5E5"> that</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is more common</font><font color="#CCCCCC"> that</font>

896
00:39:15,380 --> 00:39:21,320
amazing<font color="#E5E5E5"> here's an example and then</font><font color="#CCCCCC"> it's</font>

897
00:39:18,620 --> 00:39:25,790
<font color="#CCCCCC">this year they serialize in the rest of</font>

898
00:39:21,320 --> 00:39:27,890
the cookie<font color="#E5E5E5"> so this is how a regular</font>

899
00:39:25,790 --> 00:39:31,759
<font color="#CCCCCC">cookie looks like</font><font color="#E5E5E5"> it contains the</font>

900
00:39:27,890 --> 00:39:33,230
expected type and then<font color="#E5E5E5"> this blue box</font>

901
00:39:31,760 --> 00:39:35,720
<font color="#E5E5E5">here is the</font><font color="#CCCCCC"> payload for the</font><font color="#E5E5E5"> XML</font>

902
00:39:33,230 --> 00:39:38,390
<font color="#CCCCCC">sterilizer</font><font color="#E5E5E5"> and this is how our our</font>

903
00:39:35,720 --> 00:39:40,939
payload<font color="#E5E5E5"> looks like a little bit</font>

904
00:39:38,390 --> 00:39:44,629
different<font color="#E5E5E5"> so here the expected type is</font>

905
00:39:40,940 --> 00:39:47,960
<font color="#E5E5E5">this parameter S type and here here we</font>

906
00:39:44,630 --> 00:39:50,960
are telling<font color="#E5E5E5"> XML Iser to include these</font>

907
00:39:47,960 --> 00:39:53,270
types into the<font color="#CCCCCC"> whitelist</font><font color="#E5E5E5"> then we will</font>

908
00:39:50,960 --> 00:39:56,150
use this file system<font color="#CCCCCC"> users class to</font>

909
00:39:53,270 --> 00:39:59,509
<font color="#E5E5E5">download our</font><font color="#CCCCCC"> webster deploy it in the</font><font color="#E5E5E5"> I</font>

910
00:39:56,150 --> 00:40:03,770
is root directory<font color="#E5E5E5"> and we will be able to</font>

911
00:39:59,510 --> 00:40:07,130
deploy<font color="#CCCCCC"> our</font><font color="#E5E5E5"> Watson so let's see a video</font>

912
00:40:03,770 --> 00:40:12,020
<font color="#E5E5E5">of that so this is</font><font color="#CCCCCC"> the out-of-the-box</font>

913
00:40:07,130 --> 00:40:15,560
installation of DNN if we<font color="#E5E5E5"> visit a</font>

914
00:40:12,020 --> 00:40:18,620
<font color="#CCCCCC">non-existent page</font><font color="#E5E5E5"> we will get our 404</font>

915
00:40:15,560 --> 00:40:20,779
error page that will force the

916
00:40:18,620 --> 00:40:24,410
processing of the DNN<font color="#E5E5E5"> personalization</font>

917
00:40:20,780 --> 00:40:29,980
cookie<font color="#E5E5E5"> so we will send this page this</font>

918
00:40:24,410 --> 00:40:32,480
request<font color="#E5E5E5"> to burp we will capture it and</font>

919
00:40:29,980 --> 00:40:35,120
because it's by default<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> including</font>

920
00:40:32,480 --> 00:40:37,310
this cookie even<font color="#CCCCCC"> if</font><font color="#E5E5E5"> it's processing the</font>

921
00:40:35,120 --> 00:40:39,710
<font color="#CCCCCC">cookies not including it we will include</font>

922
00:40:37,310 --> 00:40:41,600
<font color="#E5E5E5">it we will write</font><font color="#CCCCCC"> here our dnm</font>

923
00:40:39,710 --> 00:40:44,330
personalization<font color="#E5E5E5"> cookie and then we will</font>

924
00:40:41,600 --> 00:40:44,660
paste the XML payload that<font color="#CCCCCC"> I just showed</font>

925
00:40:44,330 --> 00:40:48,049
you

926
00:40:44,660 --> 00:40:50,719
basically it's invoking the pool file

927
00:40:48,049 --> 00:40:53,269
method of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> file system</font><font color="#CCCCCC"> Uriel's class</font>

928
00:40:50,719 --> 00:41:00,019
<font color="#E5E5E5">to download our website and deploy it in</font>

929
00:40:53,269 --> 00:41:02,029
the<font color="#E5E5E5"> big team server so let's format this</font>

930
00:41:00,019 --> 00:41:06,558
a<font color="#E5E5E5"> little bit now if we go to the victim</font>

931
00:41:02,029 --> 00:41:08,269
server<font color="#E5E5E5"> we will check</font><font color="#CCCCCC"> that the cell aspx</font>

932
00:41:06,559 --> 00:41:14,839
file that we<font color="#E5E5E5"> are going to download is</font>

933
00:41:08,269 --> 00:41:17,058
not existing here<font color="#E5E5E5"> if we send the if we</font>

934
00:41:14,839 --> 00:41:19,640
send the<font color="#E5E5E5"> request it will be downloaded</font>

935
00:41:17,059 --> 00:41:21,199
and<font color="#E5E5E5"> we will get the cell available for</font>

936
00:41:19,640 --> 00:41:22,939
the attacker to<font color="#E5E5E5"> interact with the with a</font>

937
00:41:21,199 --> 00:41:25,429
system so at<font color="#E5E5E5"> this point the attacker can</font>

938
00:41:22,939 --> 00:41:28,069
just use the web<font color="#E5E5E5"> cell as I said to</font>

939
00:41:25,429 --> 00:41:33,199
interact with<font color="#E5E5E5"> the system install metal</font><font color="#CCCCCC"> /</font>

940
00:41:28,069 --> 00:41:37,969
<font color="#CCCCCC">tear or whatever they</font><font color="#E5E5E5"> want to use thank</font>

941
00:41:33,199 --> 00:41:40,519
you and just<font color="#E5E5E5"> to wrap up as I said before</font>

942
00:41:37,969 --> 00:41:42,650
this is<font color="#E5E5E5"> not</font><font color="#CCCCCC"> a problem in JSON or XML or</font>

943
00:41:40,519 --> 00:41:45,758
<font color="#E5E5E5">Java</font><font color="#CCCCCC"> DC allocation this is a problem in</font>

944
00:41:42,650 --> 00:41:47,509
<font color="#E5E5E5">sterilizers themselves</font><font color="#CCCCCC"> so try to avoid</font>

945
00:41:45,759 --> 00:41:49,339
visualizing<font color="#CCCCCC"> entrusted data with any</font>

946
00:41:47,509 --> 00:41:51,799
<font color="#E5E5E5">formatter even if you think</font><font color="#CCCCCC"> it's secure</font>

947
00:41:49,339 --> 00:41:54,529
but if you have to try to get that

948
00:41:51,799 --> 00:41:57,589
library evaluated<font color="#E5E5E5"> from a security point</font>

949
00:41:54,529 --> 00:42:00,859
of view by your security expert of

950
00:41:57,589 --> 00:42:02,660
choice and try avoiding libraries that

951
00:42:00,859 --> 00:42:04,369
performs no type control like the<font color="#E5E5E5"> ones</font>

952
00:42:02,660 --> 00:42:07,459
<font color="#E5E5E5">that we saw that</font><font color="#CCCCCC"> I've just</font><font color="#E5E5E5"> do in a post</font>

953
00:42:04,369 --> 00:42:09,079
a<font color="#E5E5E5"> civilization caste also try to avoid</font>

954
00:42:07,459 --> 00:42:11,359
<font color="#CCCCCC">those libraries</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> are including</font>

955
00:42:09,079 --> 00:42:13,279
type<font color="#E5E5E5"> information in the sterilized data</font>

956
00:42:11,359 --> 00:42:14,598
<font color="#E5E5E5">because that's not sufficient to get</font>

957
00:42:13,279 --> 00:42:17,479
arbitrary code execution but<font color="#E5E5E5"> is a good</font>

958
00:42:14,599 --> 00:42:20,539
indicator<font color="#CCCCCC"> that</font><font color="#E5E5E5"> they it</font><font color="#CCCCCC"> may lead to</font>

959
00:42:17,479 --> 00:42:22,968
<font color="#E5E5E5">arbitrary code execution also don't let</font>

960
00:42:20,539 --> 00:42:25,429
the users control<font color="#E5E5E5"> the expected type of</font>

961
00:42:22,969 --> 00:42:26,900
any<font color="#CCCCCC"> initializer</font><font color="#E5E5E5"> because they will be</font>

962
00:42:25,429 --> 00:42:28,549
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> control the object graph</font>

963
00:42:26,900 --> 00:42:30,589
inspection and they will be able<font color="#E5E5E5"> to</font>

964
00:42:28,549 --> 00:42:32,809
place<font color="#E5E5E5"> anything there and that's what not</font>

965
00:42:30,589 --> 00:42:35,660
least try to not roll your<font color="#E5E5E5"> own format</font><font color="#CCCCCC"> if</font>

966
00:42:32,809 --> 00:42:37,519
you don't know what you're doing<font color="#E5E5E5"> so with</font>

967
00:42:35,660 --> 00:42:39,709
that thank you<font color="#CCCCCC"> very much</font>

968
00:42:37,519 --> 00:42:41,779
<font color="#CCCCCC">what's a</font><font color="#E5E5E5"> pleasure and if you have any</font>

969
00:42:39,709 --> 00:42:47,989
questions I think<font color="#E5E5E5"> we have like</font><font color="#CCCCCC"> 5 times 5</font>

970
00:42:41,779 --> 00:42:52,699
<font color="#E5E5E5">minutes</font><font color="#CCCCCC"> 5</font><font color="#E5E5E5"> minutes questions please go to</font>

971
00:42:47,989 --> 00:42:55,029
the to the<font color="#E5E5E5"> mics I think in the</font><font color="#CCCCCC"> aisles</font><font color="#E5E5E5"> no</font>

972
00:42:52,699 --> 00:42:55,029
questions

973
00:42:55,090 --> 00:43:00,380
<font color="#E5E5E5">also we will be</font><font color="#CCCCCC"> publishing</font><font color="#E5E5E5"> the white</font>

974
00:42:57,680 --> 00:43:03,290
paper<font color="#E5E5E5"> it will be published today in</font><font color="#CCCCCC"> the</font>

975
00:43:00,380 --> 00:43:04,640
black hat side so does make<font color="#E5E5E5"> sure that</font>

976
00:43:03,290 --> 00:43:07,850
you check it<font color="#E5E5E5"> out it contains a lot of</font>

977
00:43:04,640 --> 00:43:08,549
information<font color="#CCCCCC"> on details okay</font><font color="#E5E5E5"> so thank you</font>

978
00:43:07,850 --> 00:43:11,859
<font color="#CCCCCC">very much</font>

979
00:43:08,550 --> 00:43:11,859
[Applause]

