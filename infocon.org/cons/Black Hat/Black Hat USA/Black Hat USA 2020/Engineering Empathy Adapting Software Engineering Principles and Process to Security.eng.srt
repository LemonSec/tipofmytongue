1
00:00:01,180 --> 00:00:10,980
[Music]

2
00:00:11,840 --> 00:00:13,280
hello and welcome to

3
00:00:13,280 --> 00:00:14,960
engineering empathy a talk about

4
00:00:14,960 --> 00:00:17,039
adapting software engineering principles

5
00:00:17,039 --> 00:00:18,880
and processes to security

6
00:00:18,880 --> 00:00:20,880
let me first introduce ourselves i'm

7
00:00:20,880 --> 00:00:22,560
camille mckinnon i'm joining you from

8
00:00:22,560 --> 00:00:24,320
los angeles and i am a principal

9
00:00:24,320 --> 00:00:26,560
infrastructure engineer at salesforce

10
00:00:26,560 --> 00:00:29,039
my background is in software engineering

11
00:00:29,039 --> 00:00:30,800
although i am now working on a security

12
00:00:30,800 --> 00:00:31,840
team

13
00:00:31,840 --> 00:00:33,600
i am joined from the boston area by my

14
00:00:33,600 --> 00:00:35,200
colleague craig ingram who is a

15
00:00:35,200 --> 00:00:36,880
principal security engineer

16
00:00:36,880 --> 00:00:38,879
his background is in security although

17
00:00:38,879 --> 00:00:40,559
he has spent a year working on the

18
00:00:40,559 --> 00:00:42,239
runtime infrastructure team

19
00:00:42,239 --> 00:00:45,360
at heroku as a software engineer so we

20
00:00:45,360 --> 00:00:46,879
bring different backgrounds and

21
00:00:46,879 --> 00:00:47,840
perspectives

22
00:00:47,840 --> 00:00:50,800
on how we can help security teams scale

23
00:00:50,800 --> 00:00:51,520
mature

24
00:00:51,520 --> 00:00:54,239
and improve we currently provide

25
00:00:54,239 --> 00:00:55,920
security assurance for the heroku

26
00:00:55,920 --> 00:00:56,879
platform

27
00:00:56,879 --> 00:00:58,480
which means that we work in constant

28
00:00:58,480 --> 00:01:00,239
collaboration with the engineering teams

29
00:01:00,239 --> 00:01:01,280
at heroku

30
00:01:01,280 --> 00:01:03,280
doing everything from providing security

31
00:01:03,280 --> 00:01:05,199
assessments building threat models

32
00:01:05,199 --> 00:01:07,360
performing penetration tests and

33
00:01:07,360 --> 00:01:09,439
generally helping maintaining positive

34
00:01:09,439 --> 00:01:12,960
control over the heroku platform

35
00:01:12,960 --> 00:01:16,159
in his 2019 keynote at black hat

36
00:01:16,159 --> 00:01:18,640
dino dai zovi sounded the call for

37
00:01:18,640 --> 00:01:19,680
security teams

38
00:01:19,680 --> 00:01:21,520
acting more like software engineering

39
00:01:21,520 --> 00:01:22,720
teams

40
00:01:22,720 --> 00:01:24,640
now that is something that is fairly new

41
00:01:24,640 --> 00:01:26,240
at many organizations

42
00:01:26,240 --> 00:01:27,920
including ones that which we have worked

43
00:01:27,920 --> 00:01:29,439
out in the past

44
00:01:29,439 --> 00:01:31,840
at heroku the security team model that

45
00:01:31,840 --> 00:01:33,600
is closely integrated with this

46
00:01:33,600 --> 00:01:36,000
engineering teams has worked fairly well

47
00:01:36,000 --> 00:01:36,799
for us

48
00:01:36,799 --> 00:01:39,040
and we wanted to help carry the torch

49
00:01:39,040 --> 00:01:40,000
forward and

50
00:01:40,000 --> 00:01:42,640
give you concrete processes and concrete

51
00:01:42,640 --> 00:01:43,119
tools

52
00:01:43,119 --> 00:01:45,600
that you can use as a security team to

53
00:01:45,600 --> 00:01:46,240
act more

54
00:01:46,240 --> 00:01:48,640
like software engineering teams we're

55
00:01:48,640 --> 00:01:49,840
going to start on a

56
00:01:49,840 --> 00:01:52,720
fairly low level on what you can do as a

57
00:01:52,720 --> 00:01:53,439
security

58
00:01:53,439 --> 00:01:56,240
individual contributor to act more like

59
00:01:56,240 --> 00:01:57,600
a software engineer

60
00:01:57,600 --> 00:02:00,079
a software engineer and follow the

61
00:02:00,079 --> 00:02:01,439
everyday principles

62
00:02:01,439 --> 00:02:03,920
that they use behind writing good code

63
00:02:03,920 --> 00:02:05,280
we're then going to take one step

64
00:02:05,280 --> 00:02:08,479
up and look at how as a team

65
00:02:08,479 --> 00:02:10,959
we can adapt software engineering

66
00:02:10,959 --> 00:02:13,120
principles and processes and how

67
00:02:13,120 --> 00:02:14,800
engineers plan their work

68
00:02:14,800 --> 00:02:17,680
and use that as security engineers and

69
00:02:17,680 --> 00:02:18,080
see

70
00:02:18,080 --> 00:02:20,959
how engineers ask themselves how they

71
00:02:20,959 --> 00:02:22,000
are working on the right

72
00:02:22,000 --> 00:02:24,319
thing and see what that means for us as

73
00:02:24,319 --> 00:02:25,760
security people

74
00:02:25,760 --> 00:02:28,080
we're then going to take a 10 000 feet

75
00:02:28,080 --> 00:02:28,959
view at

76
00:02:28,959 --> 00:02:31,680
what devops culture adoption on software

77
00:02:31,680 --> 00:02:32,879
engineering teams

78
00:02:32,879 --> 00:02:36,000
means for us as security engineers

79
00:02:36,000 --> 00:02:37,920
now let's get started with everyday

80
00:02:37,920 --> 00:02:39,120
principles

81
00:02:39,120 --> 00:02:42,000
um the everyday principles behind

82
00:02:42,000 --> 00:02:43,840
writing good code that we have chosen to

83
00:02:43,840 --> 00:02:45,040
talk about today

84
00:02:45,040 --> 00:02:47,040
and welcome to your first acronyms of

85
00:02:47,040 --> 00:02:48,640
today's presentation

86
00:02:48,640 --> 00:02:51,840
are kiss keep it small and simple dry

87
00:02:51,840 --> 00:02:54,239
don't repeat yourself and tdd test

88
00:02:54,239 --> 00:02:55,440
driven development

89
00:02:55,440 --> 00:02:57,840
so let's start with kiss keep it small

90
00:02:57,840 --> 00:02:59,360
and simple

91
00:02:59,360 --> 00:03:01,360
what that means is that as a security

92
00:03:01,360 --> 00:03:03,440
engineer you should strive that your

93
00:03:03,440 --> 00:03:04,480
recommendations

94
00:03:04,480 --> 00:03:07,599
should be simple and straightforward and

95
00:03:07,599 --> 00:03:10,560
understandable clear and actionable by

96
00:03:10,560 --> 00:03:11,920
your engineers

97
00:03:11,920 --> 00:03:14,080
what does that even mean let me give you

98
00:03:14,080 --> 00:03:15,200
an example

99
00:03:15,200 --> 00:03:17,840
at salesforce we have a fairly complex

100
00:03:17,840 --> 00:03:19,440
cryptographic policy

101
00:03:19,440 --> 00:03:22,080
it is this multi-page document it is

102
00:03:22,080 --> 00:03:24,000
technically complex

103
00:03:24,000 --> 00:03:26,560
and it needs to be um it has to cover

104
00:03:26,560 --> 00:03:28,720
every single cryptographic use case at a

105
00:03:28,720 --> 00:03:30,319
fairly large company with

106
00:03:30,319 --> 00:03:33,680
fairly complicated systems now when

107
00:03:33,680 --> 00:03:35,519
an engineer comes to us with a question

108
00:03:35,519 --> 00:03:37,280
about cryptographic use cases

109
00:03:37,280 --> 00:03:40,000
it is super tempting to just send the

110
00:03:40,000 --> 00:03:40,640
policy

111
00:03:40,640 --> 00:03:43,680
because it covers everything right

112
00:03:43,680 --> 00:03:46,159
we have found it a lot more effective to

113
00:03:46,159 --> 00:03:48,239
have language specific guides for

114
00:03:48,239 --> 00:03:48,959
example

115
00:03:48,959 --> 00:03:50,959
and we have picked the most commonly

116
00:03:50,959 --> 00:03:52,480
used languages at heroku

117
00:03:52,480 --> 00:03:55,200
the most common cryptographic use cases

118
00:03:55,200 --> 00:03:56,560
and prepared libraries

119
00:03:56,560 --> 00:03:58,560
and snippets that engineers can just

120
00:03:58,560 --> 00:04:00,239
take and use as

121
00:04:00,239 --> 00:04:04,080
is now absolutely you can link back to

122
00:04:04,080 --> 00:04:07,040
a complex policy or really in-depth

123
00:04:07,040 --> 00:04:08,080
white paper that

124
00:04:08,080 --> 00:04:10,480
explains the rationale behind your

125
00:04:10,480 --> 00:04:12,080
security recommendation

126
00:04:12,080 --> 00:04:14,080
if the engineer wants to dig deeper and

127
00:04:14,080 --> 00:04:15,519
understand all those things that's

128
00:04:15,519 --> 00:04:16,720
wonderful

129
00:04:16,720 --> 00:04:18,320
but don't make that the only thing you

130
00:04:18,320 --> 00:04:20,000
give your software engineers

131
00:04:20,000 --> 00:04:22,880
give them a way to have a very

132
00:04:22,880 --> 00:04:23,600
actionable

133
00:04:23,600 --> 00:04:25,440
and clear answer to the problem that

134
00:04:25,440 --> 00:04:29,120
they have and get them shipping faster

135
00:04:29,120 --> 00:04:31,280
what we also mean by keep it small and

136
00:04:31,280 --> 00:04:32,960
simple is not just

137
00:04:32,960 --> 00:04:35,520
the recommendation itself is nice small

138
00:04:35,520 --> 00:04:36,639
and simple and short

139
00:04:36,639 --> 00:04:39,280
and let me give you an example of that

140
00:04:39,280 --> 00:04:41,360
in my past life as a software engineer

141
00:04:41,360 --> 00:04:43,600
i once had a security engineer file a

142
00:04:43,600 --> 00:04:46,000
bug against a system i owned that wasn't

143
00:04:46,000 --> 00:04:48,160
using mtls to communicate with other

144
00:04:48,160 --> 00:04:49,360
systems

145
00:04:49,360 --> 00:04:51,680
his recommendation was to use mtls

146
00:04:51,680 --> 00:04:52,720
that's really

147
00:04:52,720 --> 00:04:55,600
simple and short recommendation i

148
00:04:55,600 --> 00:04:57,040
completely understood

149
00:04:57,040 --> 00:04:58,880
what that security engineer was asking

150
00:04:58,880 --> 00:05:00,160
of me

151
00:05:00,160 --> 00:05:02,240
but no one else in my company was using

152
00:05:02,240 --> 00:05:04,320
mtls we had none of the pki

153
00:05:04,320 --> 00:05:06,320
infrastructure that i would have needed

154
00:05:06,320 --> 00:05:09,360
to put that in place so i estimated that

155
00:05:09,360 --> 00:05:10,560
as an extra-large

156
00:05:10,560 --> 00:05:12,400
put it on our long-term projects for my

157
00:05:12,400 --> 00:05:15,280
team and by the way if you work a lot

158
00:05:15,280 --> 00:05:16,639
with software engineering that means

159
00:05:16,639 --> 00:05:18,400
it's never going to happen

160
00:05:18,400 --> 00:05:20,400
we have a lot of competing priorities

161
00:05:20,400 --> 00:05:22,000
very large projects

162
00:05:22,000 --> 00:05:25,199
that are on long-term backlogs not not

163
00:05:25,199 --> 00:05:26,960
very likely to make it

164
00:05:26,960 --> 00:05:30,320
to production anytime soon

165
00:05:30,320 --> 00:05:32,800
now a year passed nothing happened and

166
00:05:32,800 --> 00:05:34,720
then another security engineer came back

167
00:05:34,720 --> 00:05:35,919
a year later

168
00:05:35,919 --> 00:05:37,840
but this time it wasn't just with a bug

169
00:05:37,840 --> 00:05:39,120
this time it was

170
00:05:39,120 --> 00:05:41,919
with 10 other engineers um who he had

171
00:05:41,919 --> 00:05:43,680
contacted across the company

172
00:05:43,680 --> 00:05:46,800
who had similar mtls bugs um filed

173
00:05:46,800 --> 00:05:48,560
against their systems he got us all

174
00:05:48,560 --> 00:05:49,199
together

175
00:05:49,199 --> 00:05:52,080
and then together we designed and built

176
00:05:52,080 --> 00:05:54,560
a proper pki infrastructure which became

177
00:05:54,560 --> 00:05:57,199
my company's mtls infrastructure and we

178
00:05:57,199 --> 00:05:58,800
could solve all our security bugs

179
00:05:58,800 --> 00:06:00,479
together

180
00:06:00,479 --> 00:06:02,400
that meant because there were multiple

181
00:06:02,400 --> 00:06:04,080
of us and because we were getting so

182
00:06:04,080 --> 00:06:05,600
much guidance to build it

183
00:06:05,600 --> 00:06:07,680
we knew what we were building we were

184
00:06:07,680 --> 00:06:08,639
getting help

185
00:06:08,639 --> 00:06:10,560
it wasn't all on one team so it was

186
00:06:10,560 --> 00:06:12,240
doable for us to invest

187
00:06:12,240 --> 00:06:14,560
our time to actually build it and we got

188
00:06:14,560 --> 00:06:16,000
it done

189
00:06:16,000 --> 00:06:17,440
now that's a whole lot more work for

190
00:06:17,440 --> 00:06:19,360
security um yes

191
00:06:19,360 --> 00:06:21,520
it is keeping things simple for

192
00:06:21,520 --> 00:06:23,600
engineers may absolutely mean

193
00:06:23,600 --> 00:06:26,560
more work for you in the short term what

194
00:06:26,560 --> 00:06:27,759
it does mean though is that your

195
00:06:27,759 --> 00:06:29,440
recommendation is more likely to be

196
00:06:29,440 --> 00:06:30,240
followed

197
00:06:30,240 --> 00:06:32,720
and what it does mean is that it can

198
00:06:32,720 --> 00:06:34,080
help your company

199
00:06:34,080 --> 00:06:36,080
or organization's security posture

200
00:06:36,080 --> 00:06:38,160
improve

201
00:06:38,160 --> 00:06:40,319
so it's probably worth it in a lot of

202
00:06:40,319 --> 00:06:42,319
cases to invest

203
00:06:42,319 --> 00:06:44,479
at the beginning on keeping things

204
00:06:44,479 --> 00:06:46,240
simple for your engineers

205
00:06:46,240 --> 00:06:49,280
to help them secure whatever systems

206
00:06:49,280 --> 00:06:50,880
they are working on

207
00:06:50,880 --> 00:06:52,800
i'm going to hand it over now to craig

208
00:06:52,800 --> 00:06:54,240
to talk to you about dry

209
00:06:54,240 --> 00:06:57,120
over to you craig all right thank you

210
00:06:57,120 --> 00:06:58,240
camille

211
00:06:58,240 --> 00:06:59,759
so the next principle we're going to

212
00:06:59,759 --> 00:07:02,000
talk about is dry or

213
00:07:02,000 --> 00:07:04,639
don't repeat yourself dry is the

214
00:07:04,639 --> 00:07:05,759
opposite of wet

215
00:07:05,759 --> 00:07:08,560
which stands for we enjoy typing or

216
00:07:08,560 --> 00:07:11,120
wasting everyone's time

217
00:07:11,120 --> 00:07:13,599
the concept here is that we are reducing

218
00:07:13,599 --> 00:07:15,039
duplication of code

219
00:07:15,039 --> 00:07:17,759
and this is a common cause for engineers

220
00:07:17,759 --> 00:07:18,080
to

221
00:07:18,080 --> 00:07:20,000
do a refactor and you can see in the

222
00:07:20,000 --> 00:07:21,759
screenshot we have

223
00:07:21,759 --> 00:07:24,479
uh an engineer that was doing some code

224
00:07:24,479 --> 00:07:26,479
changes and implementing dry

225
00:07:26,479 --> 00:07:27,840
and they took out a whole bunch of code

226
00:07:27,840 --> 00:07:30,000
that was you know spread out through the

227
00:07:30,000 --> 00:07:30,960
code base and

228
00:07:30,960 --> 00:07:32,960
the same sort of code and they reduced

229
00:07:32,960 --> 00:07:34,960
it to a single function

230
00:07:34,960 --> 00:07:37,280
and the result of using try is that

231
00:07:37,280 --> 00:07:39,360
you'll have code that's more readable

232
00:07:39,360 --> 00:07:42,479
more testable that's easier to

233
00:07:42,479 --> 00:07:44,960
add to in the future or make changes to

234
00:07:44,960 --> 00:07:45,520
because

235
00:07:45,520 --> 00:07:48,319
it's not littered through throughout and

236
00:07:48,319 --> 00:07:49,120
it's only in

237
00:07:49,120 --> 00:07:53,120
one place so

238
00:07:53,120 --> 00:07:55,360
as security engineers how can we

239
00:07:55,360 --> 00:07:56,560
implement dry

240
00:07:56,560 --> 00:07:58,560
well one way might be thinking about all

241
00:07:58,560 --> 00:07:59,919
the findings that we see

242
00:07:59,919 --> 00:08:02,720
that are repeated throughout a code base

243
00:08:02,720 --> 00:08:03,280
or

244
00:08:03,280 --> 00:08:04,800
that keep coming up throughout an

245
00:08:04,800 --> 00:08:06,879
organization

246
00:08:06,879 --> 00:08:08,960
and you might think dry here would be

247
00:08:08,960 --> 00:08:10,160
creating a template for

248
00:08:10,160 --> 00:08:12,400
cross-site scripting bugs that you can

249
00:08:12,400 --> 00:08:13,360
copy and paste

250
00:08:13,360 --> 00:08:16,240
and reuse every time you come across one

251
00:08:16,240 --> 00:08:19,039
while that might make you feel

252
00:08:19,039 --> 00:08:21,120
productive as an engineer it's not

253
00:08:21,120 --> 00:08:23,360
really solving the problem of these bugs

254
00:08:23,360 --> 00:08:25,680
repeating themselves at your

255
00:08:25,680 --> 00:08:27,680
organization

256
00:08:27,680 --> 00:08:29,599
so there's there's better ways to do

257
00:08:29,599 --> 00:08:31,039
that and we can take a step back

258
00:08:31,039 --> 00:08:33,200
and start thinking and asking ourselves

259
00:08:33,200 --> 00:08:35,200
why are these bugs showing up

260
00:08:35,200 --> 00:08:38,559
maybe this is a good opportunity for

261
00:08:38,559 --> 00:08:40,958
security engineering to start providing

262
00:08:40,958 --> 00:08:42,719
better patterns to avoid them

263
00:08:42,719 --> 00:08:44,720
like camille was talking about with the

264
00:08:44,720 --> 00:08:46,080
encryption standards

265
00:08:46,080 --> 00:08:48,560
um that we we added other things in

266
00:08:48,560 --> 00:08:50,080
those language security guides for how

267
00:08:50,080 --> 00:08:51,360
to avoid

268
00:08:51,360 --> 00:08:54,080
um cross-site scripting and other common

269
00:08:54,080 --> 00:08:54,959
vulnerabilities

270
00:08:54,959 --> 00:08:56,800
in language specific guides for

271
00:08:56,800 --> 00:08:59,359
engineers

272
00:08:59,680 --> 00:09:02,160
another way to think about this is

273
00:09:02,160 --> 00:09:04,000
outside of documentation providing

274
00:09:04,000 --> 00:09:05,920
actual reusable code and libraries that

275
00:09:05,920 --> 00:09:07,200
engineers could use

276
00:09:07,200 --> 00:09:09,200
good candidates for this are things that

277
00:09:09,200 --> 00:09:10,800
are used absolutely everywhere

278
00:09:10,800 --> 00:09:13,279
like authentication things that are

279
00:09:13,279 --> 00:09:14,480
complex and

280
00:09:14,480 --> 00:09:17,279
easy to make common little mistakes like

281
00:09:17,279 --> 00:09:19,360
encryption or

282
00:09:19,360 --> 00:09:22,480
not logging sensitive data

283
00:09:22,480 --> 00:09:23,760
when you want to contribute to efforts

284
00:09:23,760 --> 00:09:25,519
like this look for where they're already

285
00:09:25,519 --> 00:09:27,040
being done because chances are the

286
00:09:27,040 --> 00:09:28,800
engineers in your company

287
00:09:28,800 --> 00:09:30,880
are already sharing code like this and

288
00:09:30,880 --> 00:09:32,640
might already have a library

289
00:09:32,640 --> 00:09:35,040
i think a perfect example of dry in

290
00:09:35,040 --> 00:09:36,000
heroku

291
00:09:36,000 --> 00:09:39,600
is the heroku slash x repository

292
00:09:39,600 --> 00:09:42,320
this is an open source project that any

293
00:09:42,320 --> 00:09:44,560
heroku engineer who's developing a go

294
00:09:44,560 --> 00:09:46,080
application can use and

295
00:09:46,080 --> 00:09:48,959
it has all kinds of projects uh packages

296
00:09:48,959 --> 00:09:50,560
in this project that range

297
00:09:50,560 --> 00:09:53,360
from simple things like a health check

298
00:09:53,360 --> 00:09:54,000
to

299
00:09:54,000 --> 00:09:56,880
things like the basis for a grpc client

300
00:09:56,880 --> 00:09:57,440
and server

301
00:09:57,440 --> 00:09:59,120
and there's also security related things

302
00:09:59,120 --> 00:10:00,560
here a

303
00:10:00,560 --> 00:10:03,120
common thing that we would see in doing

304
00:10:03,120 --> 00:10:05,040
early stage design reviews and threat

305
00:10:05,040 --> 00:10:06,640
models is we'd see two components and

306
00:10:06,640 --> 00:10:08,160
they needed to talk to each other

307
00:10:08,160 --> 00:10:12,240
and we would recommend that to avoid uh

308
00:10:12,240 --> 00:10:14,399
you know that information being

309
00:10:14,399 --> 00:10:16,320
intercepted if it's sensitive

310
00:10:16,320 --> 00:10:20,160
use tls to encrypt that data in transit

311
00:10:20,160 --> 00:10:22,399
our tls recommendation would also come

312
00:10:22,399 --> 00:10:24,240
with specific guidance on

313
00:10:24,240 --> 00:10:26,160
which version of tls to use and which

314
00:10:26,160 --> 00:10:27,600
cipher suites to use for that

315
00:10:27,600 --> 00:10:29,600
configuration

316
00:10:29,600 --> 00:10:31,120
this could get repetitive if every

317
00:10:31,120 --> 00:10:33,200
engineering team was implementing this

318
00:10:33,200 --> 00:10:34,640
configuration themselves and all their

319
00:10:34,640 --> 00:10:35,519
code base

320
00:10:35,519 --> 00:10:37,600
so our colleagues that are working on

321
00:10:37,600 --> 00:10:38,560
this project

322
00:10:38,560 --> 00:10:41,440
added a tls configuration package so now

323
00:10:41,440 --> 00:10:43,440
any project that needs to use tls to

324
00:10:43,440 --> 00:10:45,680
communicate with another system

325
00:10:45,680 --> 00:10:47,519
can include this package and out of the

326
00:10:47,519 --> 00:10:50,160
box have the proper tls configuration

327
00:10:50,160 --> 00:10:53,120
if that guidance changes we update it in

328
00:10:53,120 --> 00:10:54,320
one place

329
00:10:54,320 --> 00:10:55,920
and now all the other projects are using

330
00:10:55,920 --> 00:10:57,440
it pull in the newer version

331
00:10:57,440 --> 00:10:59,279
and have the latest configuration

332
00:10:59,279 --> 00:11:00,640
without everybody having to make their

333
00:11:00,640 --> 00:11:01,360
own changes

334
00:11:01,360 --> 00:11:03,200
without security having to open open

335
00:11:03,200 --> 00:11:04,480
bugs all over the place to

336
00:11:04,480 --> 00:11:06,399
to make changes based on you know some

337
00:11:06,399 --> 00:11:08,480
new tls bug that comes out

338
00:11:08,480 --> 00:11:09,680
there are other packages in this

339
00:11:09,680 --> 00:11:11,600
repository for things like

340
00:11:11,600 --> 00:11:14,240
how to encrypt things with lib sodium or

341
00:11:14,240 --> 00:11:14,959
how to scrub

342
00:11:14,959 --> 00:11:19,599
sensitive data fields from http requests

343
00:11:20,640 --> 00:11:21,839
the next thing we're going to talk about

344
00:11:21,839 --> 00:11:23,760
is test driven development

345
00:11:23,760 --> 00:11:26,959
or tdd this is

346
00:11:26,959 --> 00:11:30,640
the idea that software engineers

347
00:11:30,640 --> 00:11:34,000
figure determine that their code is

348
00:11:34,000 --> 00:11:35,200
working and functional

349
00:11:35,200 --> 00:11:37,760
by writing tests security is part of the

350
00:11:37,760 --> 00:11:39,360
functionality of software

351
00:11:39,360 --> 00:11:41,680
and we can contribute back by helping

352
00:11:41,680 --> 00:11:42,399
them write

353
00:11:42,399 --> 00:11:45,360
security focused tests test driven

354
00:11:45,360 --> 00:11:46,880
development specifically

355
00:11:46,880 --> 00:11:49,040
is a concept of software engineering

356
00:11:49,040 --> 00:11:50,639
where engineers when they're

357
00:11:50,639 --> 00:11:52,720
writing new functionality the first

358
00:11:52,720 --> 00:11:53,680
thing they write

359
00:11:53,680 --> 00:11:57,200
is a test that fails when they've

360
00:11:57,200 --> 00:11:59,040
gotten to the point where the test is

361
00:11:59,040 --> 00:12:01,920
passing a reasonably good idea that

362
00:12:01,920 --> 00:12:05,120
the functionality is now working

363
00:12:05,120 --> 00:12:07,680
a great candidate for a failing test is

364
00:12:07,680 --> 00:12:09,279
a security vulnerability you find

365
00:12:09,279 --> 00:12:12,399
in an assessment now the engineer has a

366
00:12:12,399 --> 00:12:13,279
great idea

367
00:12:13,279 --> 00:12:16,720
that the the functionality you know the

368
00:12:16,720 --> 00:12:18,079
bug has been fixed if the test is

369
00:12:18,079 --> 00:12:18,880
passing

370
00:12:18,880 --> 00:12:20,959
and that test continues to live in the

371
00:12:20,959 --> 00:12:22,959
code base in their testing framework

372
00:12:22,959 --> 00:12:25,040
so they know if there's a regression

373
00:12:25,040 --> 00:12:26,000
because the test is going to start

374
00:12:26,000 --> 00:12:27,200
failing

375
00:12:27,200 --> 00:12:28,880
similarly if you're using fuzz testing

376
00:12:28,880 --> 00:12:30,800
in your assessments

377
00:12:30,800 --> 00:12:34,000
like our colleague chris leroy he was

378
00:12:34,000 --> 00:12:35,600
using the go fuzz package and found a

379
00:12:35,600 --> 00:12:37,440
denial of service vulnerability

380
00:12:37,440 --> 00:12:39,120
he contributed that testing framework

381
00:12:39,120 --> 00:12:40,880
that testing harness

382
00:12:40,880 --> 00:12:43,040
back to the team that was implementing

383
00:12:43,040 --> 00:12:44,720
the software

384
00:12:44,720 --> 00:12:46,399
so they not only know when the bug is

385
00:12:46,399 --> 00:12:47,760
fixed because the fuzzer is not finding

386
00:12:47,760 --> 00:12:49,839
that denial of service anymore

387
00:12:49,839 --> 00:12:51,360
they also have the opportunity to

388
00:12:51,360 --> 00:12:52,959
continue to look for similar findings

389
00:12:52,959 --> 00:12:54,880
since the fuzzer will now run

390
00:12:54,880 --> 00:12:56,000
every time they're running through their

391
00:12:56,000 --> 00:12:58,480
test suite

392
00:13:00,320 --> 00:13:02,240
so we've talked about a few different

393
00:13:02,240 --> 00:13:04,240
software engineering principles that

394
00:13:04,240 --> 00:13:07,040
you can use as a security engineer to

395
00:13:07,040 --> 00:13:09,440
scale up and be more effective

396
00:13:09,440 --> 00:13:10,720
now we're going to talk about how

397
00:13:10,720 --> 00:13:13,200
software engineers work at a team level

398
00:13:13,200 --> 00:13:16,079
in a few different way areas the first

399
00:13:16,079 --> 00:13:16,399
is

400
00:13:16,399 --> 00:13:18,720
how software engineers prioritize and

401
00:13:18,720 --> 00:13:20,160
plan projects

402
00:13:20,160 --> 00:13:22,720
how they use retrospectives to talk

403
00:13:22,720 --> 00:13:23,440
about

404
00:13:23,440 --> 00:13:25,519
the results of those projects or results

405
00:13:25,519 --> 00:13:27,040
of incidents and how they gather

406
00:13:27,040 --> 00:13:30,719
customer feedback through user research

407
00:13:31,519 --> 00:13:33,120
when i was working on our runtime team

408
00:13:33,120 --> 00:13:34,560
at heroku

409
00:13:34,560 --> 00:13:36,560
planning was a really important big part

410
00:13:36,560 --> 00:13:37,680
of our week

411
00:13:37,680 --> 00:13:39,519
this is the time we looked at all of our

412
00:13:39,519 --> 00:13:41,680
competing priorities that we had

413
00:13:41,680 --> 00:13:43,120
and decided what we were going to work

414
00:13:43,120 --> 00:13:46,000
on as a team and at the individual level

415
00:13:46,000 --> 00:13:48,000
we had a lot of different priorities

416
00:13:48,000 --> 00:13:49,519
from new

417
00:13:49,519 --> 00:13:51,120
features that we were being asked to

418
00:13:51,120 --> 00:13:52,560
implement um

419
00:13:52,560 --> 00:13:55,199
bug fixes to improve performance and

420
00:13:55,199 --> 00:13:56,959
scalability of our platform

421
00:13:56,959 --> 00:13:58,240
and of course we had security coming

422
00:13:58,240 --> 00:14:00,480
around telling us about you know things

423
00:14:00,480 --> 00:14:02,000
that needed to be patched or bugs that

424
00:14:02,000 --> 00:14:04,320
needed to be fixed

425
00:14:04,320 --> 00:14:05,920
as someone who thought i was pretty

426
00:14:05,920 --> 00:14:08,000
empathetic to the balance that engineers

427
00:14:08,000 --> 00:14:09,760
needed to have between

428
00:14:09,760 --> 00:14:12,079
ongoing engineering work and interrupts

429
00:14:12,079 --> 00:14:13,920
or other projects from security

430
00:14:13,920 --> 00:14:15,519
it was another thing entirely to

431
00:14:15,519 --> 00:14:17,279
actually live through it uh we couldn't

432
00:14:17,279 --> 00:14:18,639
get everything done at once we had to

433
00:14:18,639 --> 00:14:20,480
break things down into small manageable

434
00:14:20,480 --> 00:14:21,839
pieces and we're going to talk about how

435
00:14:21,839 --> 00:14:24,240
engineering teams do that

436
00:14:24,240 --> 00:14:26,240
uh and it was a weird position to be in

437
00:14:26,240 --> 00:14:28,000
that security wasn't

438
00:14:28,000 --> 00:14:29,519
always the most important thing to get

439
00:14:29,519 --> 00:14:31,920
done it was still very important

440
00:14:31,920 --> 00:14:35,279
but we had other things to work on too

441
00:14:35,279 --> 00:14:37,519
of course security engineers know we

442
00:14:37,519 --> 00:14:39,920
have our own competing priorities

443
00:14:39,920 --> 00:14:41,360
we have security assessments that need

444
00:14:41,360 --> 00:14:43,120
to get done so that we're not blocking a

445
00:14:43,120 --> 00:14:44,160
security team on

446
00:14:44,160 --> 00:14:46,000
our sorry a software engineering team on

447
00:14:46,000 --> 00:14:47,920
an important milestone

448
00:14:47,920 --> 00:14:50,079
we want to develop tools and automation

449
00:14:50,079 --> 00:14:51,440
to improve

450
00:14:51,440 --> 00:14:54,000
our you know effectiveness as a team and

451
00:14:54,000 --> 00:14:56,240
coverage of code changes

452
00:14:56,240 --> 00:14:58,240
and you might have deeper research you

453
00:14:58,240 --> 00:14:59,360
want to do or you might want to put

454
00:14:59,360 --> 00:15:01,199
together a black cat talk

455
00:15:01,199 --> 00:15:03,040
how do you balance that with all the

456
00:15:03,040 --> 00:15:04,320
other things that you already have

457
00:15:04,320 --> 00:15:07,360
planned or that that needs to get done

458
00:15:07,360 --> 00:15:10,480
well engineering teams

459
00:15:10,480 --> 00:15:14,160
scale through breaking projects down

460
00:15:14,160 --> 00:15:17,680
into manageable pieces and a lot of them

461
00:15:17,680 --> 00:15:18,959
will use things like

462
00:15:18,959 --> 00:15:22,079
okrs or objectives and key results this

463
00:15:22,079 --> 00:15:23,760
is how

464
00:15:23,760 --> 00:15:27,040
engineering teams can look at

465
00:15:27,040 --> 00:15:29,120
what you want to get done and very

466
00:15:29,120 --> 00:15:30,320
clearly define

467
00:15:30,320 --> 00:15:32,240
what the results of that are going to be

468
00:15:32,240 --> 00:15:34,000
and this is a measurable way

469
00:15:34,000 --> 00:15:36,320
to ensure whether or not a project was

470
00:15:36,320 --> 00:15:37,759
successful

471
00:15:37,759 --> 00:15:39,519
this also helps with scope creep because

472
00:15:39,519 --> 00:15:41,440
it defines what's not going to happen

473
00:15:41,440 --> 00:15:43,120
because if it's not a result

474
00:15:43,120 --> 00:15:44,160
you know maybe that's something that

475
00:15:44,160 --> 00:15:46,320
needs to go in a new okr or that

476
00:15:46,320 --> 00:15:47,920
that you know isn't going to happen

477
00:15:47,920 --> 00:15:49,920
right now

478
00:15:49,920 --> 00:15:51,199
this is the time for ruthless

479
00:15:51,199 --> 00:15:53,360
prioritization this is the time for

480
00:15:53,360 --> 00:15:54,800
security engineers to say

481
00:15:54,800 --> 00:15:56,800
no and we're not saying no to our

482
00:15:56,800 --> 00:15:58,079
software engineering partners who want

483
00:15:58,079 --> 00:15:59,120
to do something

484
00:15:59,120 --> 00:16:00,639
we're saying no to things that don't

485
00:16:00,639 --> 00:16:02,399
have the highest impact or don't move us

486
00:16:02,399 --> 00:16:05,040
further to our organizational goals

487
00:16:05,040 --> 00:16:08,079
maybe implementing the latest tool

488
00:16:08,079 --> 00:16:09,920
that you saw and you you want to start

489
00:16:09,920 --> 00:16:11,199
using that and

490
00:16:11,199 --> 00:16:12,720
roll that out to your team isn't as

491
00:16:12,720 --> 00:16:15,360
important as a broader thing like a

492
00:16:15,360 --> 00:16:16,880
supply chain security

493
00:16:16,880 --> 00:16:19,759
tool that can start testing every code

494
00:16:19,759 --> 00:16:21,360
change for

495
00:16:21,360 --> 00:16:23,360
vulnerabilities in open source packages

496
00:16:23,360 --> 00:16:25,440
that your engineers are using

497
00:16:25,440 --> 00:16:26,880
that's something that has a real a lot

498
00:16:26,880 --> 00:16:28,880
of impact and improves coverage and

499
00:16:28,880 --> 00:16:31,360
doesn't require work from engineers

500
00:16:31,360 --> 00:16:33,360
so that's something you can break down

501
00:16:33,360 --> 00:16:34,480
into okr

502
00:16:34,480 --> 00:16:36,240
and then look at it as a team to decide

503
00:16:36,240 --> 00:16:38,079
whether or not it moves you closer

504
00:16:38,079 --> 00:16:40,719
to your goals

505
00:16:42,000 --> 00:16:45,440
so let's talk about retrospectives

506
00:16:45,440 --> 00:16:47,360
retrospective is something that an

507
00:16:47,360 --> 00:16:49,279
engineering team might run for a couple

508
00:16:49,279 --> 00:16:50,399
of reasons

509
00:16:50,399 --> 00:16:51,839
on the runtime team we ran them every

510
00:16:51,839 --> 00:16:54,079
week and this was a great opportunity

511
00:16:54,079 --> 00:16:56,560
for me as an engineer to not feel stuck

512
00:16:56,560 --> 00:16:57,839
this was the time to have a safe

513
00:16:57,839 --> 00:16:58,800
conversation

514
00:16:58,800 --> 00:17:01,680
about what's going well what's not going

515
00:17:01,680 --> 00:17:02,720
well

516
00:17:02,720 --> 00:17:04,160
what we want to keep doing and what we

517
00:17:04,160 --> 00:17:06,720
want to improve

518
00:17:06,720 --> 00:17:08,799
you will also run a retrospective

519
00:17:08,799 --> 00:17:09,919
usually after

520
00:17:09,919 --> 00:17:11,760
you know an incident like downtime or

521
00:17:11,760 --> 00:17:13,359
security problem

522
00:17:13,359 --> 00:17:16,799
this is a time to develop a timeline

523
00:17:16,799 --> 00:17:19,919
of all the things that happened and what

524
00:17:19,919 --> 00:17:21,119
we can learn from it and improve for

525
00:17:21,119 --> 00:17:22,319
next time

526
00:17:22,319 --> 00:17:23,919
the most important aspect of these

527
00:17:23,919 --> 00:17:25,599
retrospectives is that they're

528
00:17:25,599 --> 00:17:28,319
blameless root cause analysis of our

529
00:17:28,319 --> 00:17:28,880
problem

530
00:17:28,880 --> 00:17:30,480
doesn't mean figuring out who did

531
00:17:30,480 --> 00:17:32,240
something wrong

532
00:17:32,240 --> 00:17:34,799
it's it's not necessarily the fault of

533
00:17:34,799 --> 00:17:36,960
an individual if a production database

534
00:17:36,960 --> 00:17:39,280
fails or uh secret gets committed to

535
00:17:39,280 --> 00:17:40,160
source code

536
00:17:40,160 --> 00:17:41,679
this is the time in the retrospective to

537
00:17:41,679 --> 00:17:43,760
look at what controls were missing that

538
00:17:43,760 --> 00:17:44,960
allowed this to happen in the first

539
00:17:44,960 --> 00:17:47,840
place

540
00:17:48,000 --> 00:17:49,120
security engineers can have

541
00:17:49,120 --> 00:17:52,000
retrospectives as well

542
00:17:52,000 --> 00:17:53,760
schedule one every couple of weeks you

543
00:17:53,760 --> 00:17:55,280
don't need to be an agile team and do it

544
00:17:55,280 --> 00:17:56,960
every sprint

545
00:17:56,960 --> 00:17:58,320
look at how your team works and what

546
00:17:58,320 --> 00:18:00,799
makes sense this is a time to start

547
00:18:00,799 --> 00:18:01,360
looking

548
00:18:01,360 --> 00:18:03,600
take a step back and and ask questions

549
00:18:03,600 --> 00:18:04,960
like are we having an impact

550
00:18:04,960 --> 00:18:07,280
are we falling behind or are we meeting

551
00:18:07,280 --> 00:18:09,840
expectations of our customers

552
00:18:09,840 --> 00:18:11,520
if the same sorts of things keep coming

553
00:18:11,520 --> 00:18:12,880
up again and again

554
00:18:12,880 --> 00:18:15,360
in a retro maybe that's the time to re

555
00:18:15,360 --> 00:18:17,200
re-prioritize another project that you

556
00:18:17,200 --> 00:18:18,000
put off or

557
00:18:18,000 --> 00:18:21,520
create a new okr to get something done

558
00:18:21,520 --> 00:18:23,120
if something if an okr was finished your

559
00:18:23,120 --> 00:18:24,720
project was finished this is a time that

560
00:18:24,720 --> 00:18:26,000
we would celebrate it

561
00:18:26,000 --> 00:18:27,760
and you know look for what the next

562
00:18:27,760 --> 00:18:30,320
thing should be

563
00:18:30,400 --> 00:18:32,160
but i want to bring up the importance of

564
00:18:32,160 --> 00:18:34,160
blameless retrospectives again

565
00:18:34,160 --> 00:18:35,600
it you know it's easy to schedule

566
00:18:35,600 --> 00:18:36,880
another meeting i'm sure we all have

567
00:18:36,880 --> 00:18:38,400
plenty

568
00:18:38,400 --> 00:18:40,400
but if you don't first develop trust on

569
00:18:40,400 --> 00:18:43,039
your team and psychological safety

570
00:18:43,039 --> 00:18:46,000
retrospectives are not going to work as

571
00:18:46,000 --> 00:18:46,960
well

572
00:18:46,960 --> 00:18:49,039
if people don't feel safe to talk about

573
00:18:49,039 --> 00:18:50,080
something going wrong

574
00:18:50,080 --> 00:18:51,840
or think that they're going to be blamed

575
00:18:51,840 --> 00:18:53,440
or attacked for

576
00:18:53,440 --> 00:18:55,600
for something that they did

577
00:18:55,600 --> 00:18:57,039
retrospectives are not only

578
00:18:57,039 --> 00:18:59,440
going to be not helpful they can be

579
00:18:59,440 --> 00:19:00,720
actually harmful

580
00:19:00,720 --> 00:19:02,799
psychological safety and trust on a team

581
00:19:02,799 --> 00:19:04,320
is is critically important for

582
00:19:04,320 --> 00:19:06,080
for a lot of reasons and it's something

583
00:19:06,080 --> 00:19:08,080
that takes a lot of work and is is far

584
00:19:08,080 --> 00:19:10,720
outside the scope of this talk

585
00:19:10,720 --> 00:19:12,160
but before you think about scheduling

586
00:19:12,160 --> 00:19:14,080
retrospectives think about

587
00:19:14,080 --> 00:19:16,000
whether or not you have that that trust

588
00:19:16,000 --> 00:19:17,760
and that safety on your team

589
00:19:17,760 --> 00:19:19,760
so that you can give folks on your team

590
00:19:19,760 --> 00:19:20,960
a voice

591
00:19:20,960 --> 00:19:24,000
to share their concerns and feel

592
00:19:24,000 --> 00:19:26,799
safe doing so

593
00:19:27,120 --> 00:19:28,480
so now i'm going to pass it back over to

594
00:19:28,480 --> 00:19:30,080
los angeles where camille is going to

595
00:19:30,080 --> 00:19:30,720
talk about

596
00:19:30,720 --> 00:19:32,640
gathering customer feedback and through

597
00:19:32,640 --> 00:19:34,559
user research

598
00:19:34,559 --> 00:19:36,720
thanks greg i'm excited to talk to you

599
00:19:36,720 --> 00:19:38,240
about what was one of

600
00:19:38,240 --> 00:19:39,919
the favorite parts of the job when i was

601
00:19:39,919 --> 00:19:41,280
a software engineer which is

602
00:19:41,280 --> 00:19:43,200
asking myself am i building the right

603
00:19:43,200 --> 00:19:45,760
thing and i don't mean that just from

604
00:19:45,760 --> 00:19:47,200
the point of view that craig just

605
00:19:47,200 --> 00:19:48,320
explained which is

606
00:19:48,320 --> 00:19:50,320
am i working on the highest priority

607
00:19:50,320 --> 00:19:52,720
item for my team but also at a higher

608
00:19:52,720 --> 00:19:53,200
level

609
00:19:53,200 --> 00:19:54,880
am i working on something that my

610
00:19:54,880 --> 00:19:56,960
organization's users or customers

611
00:19:56,960 --> 00:19:59,600
need or want now this is a very

612
00:19:59,600 --> 00:20:01,360
important question for a business it can

613
00:20:01,360 --> 00:20:02,960
make or break a business

614
00:20:02,960 --> 00:20:04,799
to be shipping the wrong things that

615
00:20:04,799 --> 00:20:06,480
customers don't use or

616
00:20:06,480 --> 00:20:08,880
care about this is where engineering

617
00:20:08,880 --> 00:20:10,720
teams rely on product managers

618
00:20:10,720 --> 00:20:13,039
or professional user researchers and

619
00:20:13,039 --> 00:20:14,159
themselves

620
00:20:14,159 --> 00:20:16,559
to do customer interviews do user

621
00:20:16,559 --> 00:20:17,520
research

622
00:20:17,520 --> 00:20:19,840
help develop user personas to understand

623
00:20:19,840 --> 00:20:21,760
their users needs

624
00:20:21,760 --> 00:20:24,720
now i'm not asking you to become an

625
00:20:24,720 --> 00:20:26,080
actual user researcher

626
00:20:26,080 --> 00:20:28,080
and put your engineers in a lab and

627
00:20:28,080 --> 00:20:30,159
study them please don't do that

628
00:20:30,159 --> 00:20:32,400
what i am asking you to do is to listen

629
00:20:32,400 --> 00:20:34,000
to your engineers and understand

630
00:20:34,000 --> 00:20:37,120
what they are asking and

631
00:20:37,120 --> 00:20:40,240
like a user researcher don't just

632
00:20:40,240 --> 00:20:42,720
ask a question and expect the answer to

633
00:20:42,720 --> 00:20:45,120
be exactly what you want

634
00:20:45,120 --> 00:20:46,799
listen to your engineers and actually

635
00:20:46,799 --> 00:20:48,799
observe what they're doing and what that

636
00:20:48,799 --> 00:20:50,480
can tell you about their needs

637
00:20:50,480 --> 00:20:52,240
they might not be telling you everything

638
00:20:52,240 --> 00:20:54,240
that they need and that's okay

639
00:20:54,240 --> 00:20:56,240
it is your job to observe them and

640
00:20:56,240 --> 00:20:57,440
understand where

641
00:20:57,440 --> 00:21:00,000
you can add value in their process and

642
00:21:00,000 --> 00:21:02,240
make their systems more secure

643
00:21:02,240 --> 00:21:04,480
let me give you an example of the types

644
00:21:04,480 --> 00:21:06,000
of things that i want you to observe

645
00:21:06,000 --> 00:21:09,600
i want you to observe desire paths

646
00:21:09,600 --> 00:21:11,840
when it comes to your engineers i want

647
00:21:11,840 --> 00:21:12,720
you to observe

648
00:21:12,720 --> 00:21:14,960
when an engineer goes from this corner

649
00:21:14,960 --> 00:21:17,120
of the path to the other corner

650
00:21:17,120 --> 00:21:19,360
and has cut through the grass not

651
00:21:19,360 --> 00:21:20,880
walking on the official

652
00:21:20,880 --> 00:21:22,880
paved way that would have taken them

653
00:21:22,880 --> 00:21:24,159
longer

654
00:21:24,159 --> 00:21:25,520
and i want you to be able to observe

655
00:21:25,520 --> 00:21:28,000
that and say ah now i understand

656
00:21:28,000 --> 00:21:31,039
that my engineers needs are to go much

657
00:21:31,039 --> 00:21:32,880
faster than the

658
00:21:32,880 --> 00:21:34,640
situation that they currently have to

659
00:21:34,640 --> 00:21:36,080
get to that corner

660
00:21:36,080 --> 00:21:38,960
is there a way that i can help them let

661
00:21:38,960 --> 00:21:40,320
me give you an example of what happens

662
00:21:40,320 --> 00:21:41,840
when you don't

663
00:21:41,840 --> 00:21:43,840
back in my previous life as a software

664
00:21:43,840 --> 00:21:45,280
engineer

665
00:21:45,280 --> 00:21:48,559
i was working on a department system and

666
00:21:48,559 --> 00:21:50,480
we had to talk to another department

667
00:21:50,480 --> 00:21:51,520
system

668
00:21:51,520 --> 00:21:53,440
our systems needed to talk to each other

669
00:21:53,440 --> 00:21:55,600
so we wanted to share code

670
00:21:55,600 --> 00:21:58,000
between those two systems and we were

671
00:21:58,000 --> 00:21:59,280
using entirely different code

672
00:21:59,280 --> 00:22:00,159
repositories

673
00:22:00,159 --> 00:22:02,799
and there was this multi-month system to

674
00:22:02,799 --> 00:22:04,880
basically be able to get access

675
00:22:04,880 --> 00:22:06,880
to a snapshot of the code from another

676
00:22:06,880 --> 00:22:08,240
department

677
00:22:08,240 --> 00:22:11,440
multi-month doesn't help in

678
00:22:11,440 --> 00:22:13,760
when you're an engineer but we found

679
00:22:13,760 --> 00:22:15,520
this shared ci

680
00:22:15,520 --> 00:22:17,600
infrastructure that we had and we

681
00:22:17,600 --> 00:22:19,120
realized that

682
00:22:19,120 --> 00:22:20,880
instead of going through the multi-month

683
00:22:20,880 --> 00:22:22,400
process what we could do

684
00:22:22,400 --> 00:22:25,360
is create ci builds um that took our

685
00:22:25,360 --> 00:22:26,159
source code

686
00:22:26,159 --> 00:22:28,400
packaged it up as a lovely zip file and

687
00:22:28,400 --> 00:22:30,720
made it an artifact of that ci build

688
00:22:30,720 --> 00:22:32,720
and the other departments could access

689
00:22:32,720 --> 00:22:35,280
that artifact and just get our code

690
00:22:35,280 --> 00:22:38,960
very regularly so we did that it worked

691
00:22:38,960 --> 00:22:40,720
it wasn't as secure as the other option

692
00:22:40,720 --> 00:22:43,360
there was no repudiation there was

693
00:22:43,360 --> 00:22:45,520
mediocre access control but it solved

694
00:22:45,520 --> 00:22:46,559
our problem

695
00:22:46,559 --> 00:22:48,640
a security engineer then came along and

696
00:22:48,640 --> 00:22:49,679
asked

697
00:22:49,679 --> 00:22:51,360
why happened to be using the cumbersome

698
00:22:51,360 --> 00:22:53,440
process they imagined something

699
00:22:53,440 --> 00:22:55,360
was going wrong and they were right we

700
00:22:55,360 --> 00:22:57,520
explained how we were doing

701
00:22:57,520 --> 00:22:59,120
and the next day the shed ci

702
00:22:59,120 --> 00:23:01,360
infrastructure was shut down

703
00:23:01,360 --> 00:23:04,400
now what happened next we actually need

704
00:23:04,400 --> 00:23:07,039
ci as engineers we need to test our code

705
00:23:07,039 --> 00:23:09,039
we need to build artifacts we need to

706
00:23:09,039 --> 00:23:10,320
build new versions

707
00:23:10,320 --> 00:23:12,960
of our applications so what happened is

708
00:23:12,960 --> 00:23:14,080
that a few days later

709
00:23:14,080 --> 00:23:17,440
some mystery machine happened to appear

710
00:23:17,440 --> 00:23:18,960
under an engineer's desk

711
00:23:18,960 --> 00:23:22,159
and that was rci for a while now that

712
00:23:22,159 --> 00:23:24,320
machine was not being scanned by the

713
00:23:24,320 --> 00:23:26,320
department's official security scanning

714
00:23:26,320 --> 00:23:29,120
systems it was not using a secure image

715
00:23:29,120 --> 00:23:32,320
we definitely were not doing

716
00:23:32,320 --> 00:23:35,760
security in a good way eventually what

717
00:23:35,760 --> 00:23:37,280
happened in that team is that it became

718
00:23:37,280 --> 00:23:38,799
so difficult to ship code

719
00:23:38,799 --> 00:23:41,120
um that engineers got frustrated and

720
00:23:41,120 --> 00:23:42,559
there was a massive engineering team

721
00:23:42,559 --> 00:23:43,200
exodus

722
00:23:43,200 --> 00:23:46,400
now there are a lot less dramatic

723
00:23:46,400 --> 00:23:47,840
examples that can happen in your

724
00:23:47,840 --> 00:23:50,000
organization when you can spot a desire

725
00:23:50,000 --> 00:23:53,279
path for engineers and it is not your

726
00:23:53,279 --> 00:23:54,400
job to say

727
00:23:54,400 --> 00:23:57,360
wrong walk on the paved path it is your

728
00:23:57,360 --> 00:23:58,880
job to say

729
00:23:58,880 --> 00:24:01,600
the paved path is more secure i see that

730
00:24:01,600 --> 00:24:03,760
you need something that is faster

731
00:24:03,760 --> 00:24:06,559
how can we get to a compromise of you

732
00:24:06,559 --> 00:24:07,520
get to your path

733
00:24:07,520 --> 00:24:11,279
faster but you are respecting

734
00:24:11,279 --> 00:24:12,960
a higher level of security than what

735
00:24:12,960 --> 00:24:14,720
you're currently doing

736
00:24:14,720 --> 00:24:17,760
it is very difficult and i still

737
00:24:17,760 --> 00:24:19,520
encourage you to try to understand your

738
00:24:19,520 --> 00:24:21,120
engineering team's needs

739
00:24:21,120 --> 00:24:22,480
because what it means is that your

740
00:24:22,480 --> 00:24:24,080
recommendations are more likely to be

741
00:24:24,080 --> 00:24:25,120
followed

742
00:24:25,120 --> 00:24:28,159
even if you have to say no in some cases

743
00:24:28,159 --> 00:24:30,000
having an engineer actually understand

744
00:24:30,000 --> 00:24:31,200
that you have looked

745
00:24:31,200 --> 00:24:33,279
at their need you have looked and

746
00:24:33,279 --> 00:24:35,520
understand why they need to get there

747
00:24:35,520 --> 00:24:38,960
faster and have tried to work around

748
00:24:38,960 --> 00:24:40,799
their problems and help them build

749
00:24:40,799 --> 00:24:42,159
something more secure

750
00:24:42,159 --> 00:24:43,760
will go a long way to make sure that

751
00:24:43,760 --> 00:24:45,520
your recommendations are likely to be

752
00:24:45,520 --> 00:24:47,760
followed

753
00:24:47,760 --> 00:24:49,840
now let's take a step back and take a

754
00:24:49,840 --> 00:24:51,200
ten thousand feet view of our

755
00:24:51,200 --> 00:24:52,159
organizations

756
00:24:52,159 --> 00:24:54,320
and see how devops culture has been

757
00:24:54,320 --> 00:24:56,159
adopted by our software engineers

758
00:24:56,159 --> 00:24:58,400
and what that means for us as security

759
00:24:58,400 --> 00:24:59,520
engineers

760
00:24:59,520 --> 00:25:01,360
we're going to be talking today about

761
00:25:01,360 --> 00:25:03,360
measures and here's some new acronyms

762
00:25:03,360 --> 00:25:06,480
slos and slis service level objectives

763
00:25:06,480 --> 00:25:09,200
and service level indicators we're going

764
00:25:09,200 --> 00:25:10,559
to also talk about

765
00:25:10,559 --> 00:25:12,960
the maniacal focus the engineers have on

766
00:25:12,960 --> 00:25:15,360
removing toil through automation

767
00:25:15,360 --> 00:25:16,960
and finally we're going to talk about

768
00:25:16,960 --> 00:25:18,640
what shifting left means

769
00:25:18,640 --> 00:25:21,200
for your security organization so let's

770
00:25:21,200 --> 00:25:22,240
get started with

771
00:25:22,240 --> 00:25:25,440
slos and slis those acronyms have been

772
00:25:25,440 --> 00:25:26,720
made extremely popular

773
00:25:26,720 --> 00:25:28,320
through things like the google sre

774
00:25:28,320 --> 00:25:30,799
handbook an exam let's just start with

775
00:25:30,799 --> 00:25:31,919
an example

776
00:25:31,919 --> 00:25:34,159
a service level objective that is fairly

777
00:25:34,159 --> 00:25:36,320
common in engineering teams is

778
00:25:36,320 --> 00:25:39,520
my service needs to be 99.9

779
00:25:39,520 --> 00:25:42,880
of the time and available

780
00:25:42,880 --> 00:25:44,960
a service level indicator that goes with

781
00:25:44,960 --> 00:25:46,720
that is your up time

782
00:25:46,720 --> 00:25:50,080
now what makes slos and sli so effective

783
00:25:50,080 --> 00:25:51,600
in engineering teams that we have seen

784
00:25:51,600 --> 00:25:53,440
use them are that action

785
00:25:53,440 --> 00:25:55,679
specific actions are taken when

786
00:25:55,679 --> 00:25:57,520
indicators reach certain levels

787
00:25:57,520 --> 00:26:01,159
for example if your uptime has not been

788
00:26:01,159 --> 00:26:04,080
99.9 percent for the last 30 days

789
00:26:04,080 --> 00:26:05,760
according to your sli

790
00:26:05,760 --> 00:26:08,559
then work stops for that team on that

791
00:26:08,559 --> 00:26:09,279
service

792
00:26:09,279 --> 00:26:12,159
no new features are shipped until

793
00:26:12,159 --> 00:26:13,600
something has been done about that

794
00:26:13,600 --> 00:26:15,039
service availability

795
00:26:15,039 --> 00:26:18,000
and fixes for whatever is the root cause

796
00:26:18,000 --> 00:26:18,880
behind

797
00:26:18,880 --> 00:26:21,039
the drop in service level indicator

798
00:26:21,039 --> 00:26:22,400
under the objective

799
00:26:22,400 --> 00:26:25,600
is fixed now

800
00:26:25,600 --> 00:26:27,679
in security things are slightly more

801
00:26:27,679 --> 00:26:29,679
murky we don't have clear uptime

802
00:26:29,679 --> 00:26:31,360
or you know performance things where we

803
00:26:31,360 --> 00:26:33,360
can say ah we do this under 100

804
00:26:33,360 --> 00:26:34,640
milliseconds

805
00:26:34,640 --> 00:26:36,400
but there are still things that we can

806
00:26:36,400 --> 00:26:38,320
use as service level indicators

807
00:26:38,320 --> 00:26:40,720
so examples of things that work well for

808
00:26:40,720 --> 00:26:42,080
all our organization

809
00:26:42,080 --> 00:26:44,640
is when was the last time a team asked

810
00:26:44,640 --> 00:26:46,240
for a security review

811
00:26:46,240 --> 00:26:49,039
if it's been more than 30 days it is

812
00:26:49,039 --> 00:26:49,840
possible

813
00:26:49,840 --> 00:26:52,240
that two things might be happening um

814
00:26:52,240 --> 00:26:53,840
either they

815
00:26:53,840 --> 00:26:55,600
are just working on things that they

816
00:26:55,600 --> 00:26:57,840
think have absolutely no security impact

817
00:26:57,840 --> 00:26:58,559
in which case

818
00:26:58,559 --> 00:27:00,720
it'd be great to check in and see if you

819
00:27:00,720 --> 00:27:02,240
know you feel that is true

820
00:27:02,240 --> 00:27:05,520
in which case fantastic um they might be

821
00:27:05,520 --> 00:27:07,679
just swamped with other security work

822
00:27:07,679 --> 00:27:08,640
and not need an

823
00:27:08,640 --> 00:27:11,279
other like raft of bugs to work on in

824
00:27:11,279 --> 00:27:12,000
which case

825
00:27:12,000 --> 00:27:14,480
you can help that team prioritize and

826
00:27:14,480 --> 00:27:15,600
engage with them and see

827
00:27:15,600 --> 00:27:17,840
what is actually important to fix and

828
00:27:17,840 --> 00:27:19,440
what can you do about those

829
00:27:19,440 --> 00:27:20,080
recommendations

830
00:27:20,080 --> 00:27:22,960
to make them easier to action for them

831
00:27:22,960 --> 00:27:24,559
other things to keep in mind the service

832
00:27:24,559 --> 00:27:26,320
level indicators could be

833
00:27:26,320 --> 00:27:27,600
when was the last time your threat

834
00:27:27,600 --> 00:27:30,000
models have been updated if it's over a

835
00:27:30,000 --> 00:27:30,720
year

836
00:27:30,720 --> 00:27:32,480
which could be an example of a service

837
00:27:32,480 --> 00:27:34,559
level objective you probably want to

838
00:27:34,559 --> 00:27:36,080
look at those threat models and update

839
00:27:36,080 --> 00:27:37,279
them because your teams have been

840
00:27:37,279 --> 00:27:39,440
working and adding features to them

841
00:27:39,440 --> 00:27:41,120
what is the pull request failure rate

842
00:27:41,120 --> 00:27:43,520
due to your automated security tools

843
00:27:43,520 --> 00:27:46,799
if the failure rate is very high

844
00:27:46,799 --> 00:27:48,240
then you're having a lot of false

845
00:27:48,240 --> 00:27:50,159
positives in all likelihood and your

846
00:27:50,159 --> 00:27:52,080
engineers are going to get alert fatigue

847
00:27:52,080 --> 00:27:53,919
and start ignoring them you need to act

848
00:27:53,919 --> 00:27:54,480
on that

849
00:27:54,480 --> 00:27:56,480
really quickly to make sure that doesn't

850
00:27:56,480 --> 00:27:58,240
happen and that security alerts are

851
00:27:58,240 --> 00:27:59,679
taken seriously

852
00:27:59,679 --> 00:28:02,559
on the other hand if it's zero for a

853
00:28:02,559 --> 00:28:03,279
while

854
00:28:03,279 --> 00:28:04,880
maybe your tools aren't working and

855
00:28:04,880 --> 00:28:06,320
maybe you should take a look at that and

856
00:28:06,320 --> 00:28:08,240
make sure that you're not missing things

857
00:28:08,240 --> 00:28:09,760
that your automated tools could be

858
00:28:09,760 --> 00:28:11,760
finding

859
00:28:11,760 --> 00:28:13,600
another thing that we have seen work

860
00:28:13,600 --> 00:28:14,799
really well

861
00:28:14,799 --> 00:28:16,799
when software engineering teams adopt it

862
00:28:16,799 --> 00:28:18,559
is a focus on removing

863
00:28:18,559 --> 00:28:21,600
toil through automation so by

864
00:28:21,600 --> 00:28:24,960
toil what we mean is any manual

865
00:28:24,960 --> 00:28:27,039
repetitive work something that is easily

866
00:28:27,039 --> 00:28:28,159
automatable

867
00:28:28,159 --> 00:28:29,760
something that you do as a reactive

868
00:28:29,760 --> 00:28:32,880
thing rather than a proactive thing

869
00:28:32,880 --> 00:28:34,480
anything that lacks really enduring

870
00:28:34,480 --> 00:28:36,480
value for the company anything that you

871
00:28:36,480 --> 00:28:38,720
do that grows at least as fast as the

872
00:28:38,720 --> 00:28:41,520
source of the problem

873
00:28:41,520 --> 00:28:43,520
so instead of just saying okay great

874
00:28:43,520 --> 00:28:45,039
let's automate a million things

875
00:28:45,039 --> 00:28:47,520
what we're actually inviting you to do

876
00:28:47,520 --> 00:28:49,440
is to look at your engineers

877
00:28:49,440 --> 00:28:51,679
own efforts to automate and see what

878
00:28:51,679 --> 00:28:53,679
tools they are using and how to leverage

879
00:28:53,679 --> 00:28:56,159
that to automate security work as well

880
00:28:56,159 --> 00:28:57,520
let me give you an example of things

881
00:28:57,520 --> 00:28:59,279
that have worked at salesforce

882
00:28:59,279 --> 00:29:01,120
two colleagues of us in security

883
00:29:01,120 --> 00:29:02,720
assurance current buyers and kenan

884
00:29:02,720 --> 00:29:03,440
mcquaid

885
00:29:03,440 --> 00:29:05,840
have worked in particular on open policy

886
00:29:05,840 --> 00:29:06,640
agent use

887
00:29:06,640 --> 00:29:08,640
across security at salesforce so that's

888
00:29:08,640 --> 00:29:10,880
open policy agent opa

889
00:29:10,880 --> 00:29:13,440
and they have put in place things like

890
00:29:13,440 --> 00:29:15,760
right now when you do an acl request at

891
00:29:15,760 --> 00:29:16,559
salesforce

892
00:29:16,559 --> 00:29:18,159
a lot of those things are completely

893
00:29:18,159 --> 00:29:20,480
automated through opa usage

894
00:29:20,480 --> 00:29:22,640
um that means that engine security

895
00:29:22,640 --> 00:29:24,240
engineers are spending less time

896
00:29:24,240 --> 00:29:25,679
manually reviewing everything

897
00:29:25,679 --> 00:29:28,000
and can focus on higher value things

898
00:29:28,000 --> 00:29:29,520
that they can do to help our engineering

899
00:29:29,520 --> 00:29:30,640
teams

900
00:29:30,640 --> 00:29:33,760
we also have opa directly integrated

901
00:29:33,760 --> 00:29:35,600
into the engineering build systems

902
00:29:35,600 --> 00:29:37,600
looking at terraform configs

903
00:29:37,600 --> 00:29:39,200
looking at whether any of the

904
00:29:39,200 --> 00:29:40,960
configuration may be insecure

905
00:29:40,960 --> 00:29:42,799
and warning engineers about those

906
00:29:42,799 --> 00:29:44,159
insecure choices

907
00:29:44,159 --> 00:29:45,919
right there in the continuous

908
00:29:45,919 --> 00:29:48,559
integration system that they use

909
00:29:48,559 --> 00:29:50,240
this means that engineers don't have to

910
00:29:50,240 --> 00:29:52,480
integrate with yet another security

911
00:29:52,480 --> 00:29:53,520
system

912
00:29:53,520 --> 00:29:55,120
and you're right there in the systems

913
00:29:55,120 --> 00:29:56,799
you understand how they work and you're

914
00:29:56,799 --> 00:29:58,320
part of that process

915
00:29:58,320 --> 00:30:00,559
engineering engineers are just great at

916
00:30:00,559 --> 00:30:02,320
removing toil through automation a lot

917
00:30:02,320 --> 00:30:03,600
of the time

918
00:30:03,600 --> 00:30:05,279
let's just get ourselves in their

919
00:30:05,279 --> 00:30:06,880
systems and integrate

920
00:30:06,880 --> 00:30:09,360
with very low effort for them and help

921
00:30:09,360 --> 00:30:10,240
us understand

922
00:30:10,240 --> 00:30:13,279
how they work and ship things now we're

923
00:30:13,279 --> 00:30:14,000
going to

924
00:30:14,000 --> 00:30:17,200
go one step back and talk about shifting

925
00:30:17,200 --> 00:30:18,159
left

926
00:30:18,159 --> 00:30:21,200
with you craig over to you boston

927
00:30:21,200 --> 00:30:23,360
thanks camille so we're going to talk

928
00:30:23,360 --> 00:30:24,559
about shifting left

929
00:30:24,559 --> 00:30:27,200
and what that means really is moving

930
00:30:27,200 --> 00:30:28,080
your

931
00:30:28,080 --> 00:30:30,559
security engineering process to be

932
00:30:30,559 --> 00:30:31,760
integrated better

933
00:30:31,760 --> 00:30:33,760
in the earlier stages of the software

934
00:30:33,760 --> 00:30:35,360
development life cycle and the software

935
00:30:35,360 --> 00:30:36,640
process

936
00:30:36,640 --> 00:30:39,120
it's not controversial or new to think

937
00:30:39,120 --> 00:30:41,600
that fixing a vulnerability

938
00:30:41,600 --> 00:30:43,360
in the design phase of a project is

939
00:30:43,360 --> 00:30:44,640
going to be easier and less expensive

940
00:30:44,640 --> 00:30:46,080
than fixing it after the code shipped

941
00:30:46,080 --> 00:30:47,200
out the door or even

942
00:30:47,200 --> 00:30:49,679
after the code's been written so we want

943
00:30:49,679 --> 00:30:51,279
to look at the software engineering

944
00:30:51,279 --> 00:30:53,120
process that is being used at the

945
00:30:53,120 --> 00:30:55,039
organization you're working with and

946
00:30:55,039 --> 00:30:56,480
find ways to get involved

947
00:30:56,480 --> 00:30:59,039
earlier and this doesn't mean causing

948
00:30:59,039 --> 00:31:00,559
pain for engineers earlier

949
00:31:00,559 --> 00:31:02,480
or making them jump through more hoops

950
00:31:02,480 --> 00:31:03,840
throughout their phase and making it

951
00:31:03,840 --> 00:31:06,000
harder for them to ship software

952
00:31:06,000 --> 00:31:08,000
this means figuring out how to integrate

953
00:31:08,000 --> 00:31:09,039
with the

954
00:31:09,039 --> 00:31:12,159
software process that they're using um

955
00:31:12,159 --> 00:31:13,679
like building tools that integrate with

956
00:31:13,679 --> 00:31:15,600
their specific ci and not making them

957
00:31:15,600 --> 00:31:16,159
use

958
00:31:16,159 --> 00:31:18,320
an additional build pipeline uh that's

959
00:31:18,320 --> 00:31:20,320
you know security specific

960
00:31:20,320 --> 00:31:22,000
this means we need to adapt to the

961
00:31:22,000 --> 00:31:23,600
environment you're a part of

962
00:31:23,600 --> 00:31:26,559
don't look at necessarily how we do

963
00:31:26,559 --> 00:31:27,919
things or how

964
00:31:27,919 --> 00:31:29,919
another company like netflix or google

965
00:31:29,919 --> 00:31:31,039
does things

966
00:31:31,039 --> 00:31:32,960
look at how your company does things

967
00:31:32,960 --> 00:31:34,880
start having conversations earlier with

968
00:31:34,880 --> 00:31:36,640
with folks figure out how software's

969
00:31:36,640 --> 00:31:38,480
being built if you don't know how it's

970
00:31:38,480 --> 00:31:41,440
working now and how you can support that

971
00:31:41,440 --> 00:31:43,279
start showing up the scrum meetings and

972
00:31:43,279 --> 00:31:44,840
getting involved early in design

973
00:31:44,840 --> 00:31:46,559
discussions this is the

974
00:31:46,559 --> 00:31:48,159
this is how we're going to be successful

975
00:31:48,159 --> 00:31:49,679
in shifting left

976
00:31:49,679 --> 00:31:52,720
by being a better partner

977
00:31:52,720 --> 00:31:56,159
with the teams that we're working with

978
00:31:57,039 --> 00:31:59,440
so wrapping things up we hope you've

979
00:31:59,440 --> 00:32:00,480
shown that

980
00:32:00,480 --> 00:32:02,159
how mature software engineering

981
00:32:02,159 --> 00:32:03,760
processes can

982
00:32:03,760 --> 00:32:06,720
improve your security engineering team

983
00:32:06,720 --> 00:32:08,320
look at what engineering teams are doing

984
00:32:08,320 --> 00:32:09,279
well

985
00:32:09,279 --> 00:32:11,919
learn from it and integrate with them

986
00:32:11,919 --> 00:32:12,640
start

987
00:32:12,640 --> 00:32:14,960
changes small start changing how you do

988
00:32:14,960 --> 00:32:16,640
things start using software engineering

989
00:32:16,640 --> 00:32:17,440
principles

990
00:32:17,440 --> 00:32:18,960
start changing how your team does

991
00:32:18,960 --> 00:32:21,279
planning try retrospectives

992
00:32:21,279 --> 00:32:23,519
start collecting user feedback and and

993
00:32:23,519 --> 00:32:26,240
through from your customers

994
00:32:26,240 --> 00:32:27,519
when you work and act like the teams

995
00:32:27,519 --> 00:32:30,240
you're partnered with

996
00:32:30,240 --> 00:32:31,440
it's going to be a much better process

997
00:32:31,440 --> 00:32:32,799
for everyone you're going to develop

998
00:32:32,799 --> 00:32:33,840
empathy

999
00:32:33,840 --> 00:32:35,440
because for the constraints that they're

1000
00:32:35,440 --> 00:32:37,360
working with because you're working

1001
00:32:37,360 --> 00:32:39,039
under the same workflows and

1002
00:32:39,039 --> 00:32:40,399
similar constraints and you're going to

1003
00:32:40,399 --> 00:32:42,080
have a better understanding of how they

1004
00:32:42,080 --> 00:32:44,880
work and operate and where you can be

1005
00:32:44,880 --> 00:32:45,919
helpful

1006
00:32:45,919 --> 00:32:48,880
in that process there's a lot more

1007
00:32:48,880 --> 00:32:50,640
engineers and software than there are in

1008
00:32:50,640 --> 00:32:52,559
security in most places

1009
00:32:52,559 --> 00:32:55,760
and you have an opportunity to learn

1010
00:32:55,760 --> 00:32:56,000
from

1011
00:32:56,000 --> 00:32:59,279
them and work with them in order to be

1012
00:32:59,279 --> 00:33:00,559
more successful

1013
00:33:00,559 --> 00:33:03,200
as a security engineering team thank you

1014
00:33:03,200 --> 00:33:04,720
very much for coming to our talk i hope

1015
00:33:04,720 --> 00:33:05,519
you enjoyed it

1016
00:33:05,519 --> 00:33:08,640
and hope you have a great rest of your

1017
00:33:08,840 --> 00:33:11,440
day

1018
00:33:11,440 --> 00:33:14,000
all right thanks everyone for uh joining

1019
00:33:14,000 --> 00:33:14,960
our talk i

1020
00:33:14,960 --> 00:33:17,120
hope you enjoyed it uh we did have one

1021
00:33:17,120 --> 00:33:18,320
question come in

1022
00:33:18,320 --> 00:33:20,320
uh in our experience how long did

1023
00:33:20,320 --> 00:33:21,679
successful retrospectives take to

1024
00:33:21,679 --> 00:33:22,640
accomplish um

1025
00:33:22,640 --> 00:33:25,519
camille had a perfect answer in the chat

1026
00:33:25,519 --> 00:33:26,880
so i just echo that you know

1027
00:33:26,880 --> 00:33:29,360
specifically on our runtime team

1028
00:33:29,360 --> 00:33:31,600
um you know it took us a few you know

1029
00:33:31,600 --> 00:33:32,880
two or three cycles

1030
00:33:32,880 --> 00:33:35,840
of finding the right format for a retro

1031
00:33:35,840 --> 00:33:37,039
there's lots of different

1032
00:33:37,039 --> 00:33:40,559
ways to run a retro ways to

1033
00:33:40,559 --> 00:33:44,480
have uh you know the formats of how to

1034
00:33:44,480 --> 00:33:45,840
ask questions or do

1035
00:33:45,840 --> 00:33:48,720
boards and stickies um and and that you

1036
00:33:48,720 --> 00:33:50,320
know take some time to figure out what

1037
00:33:50,320 --> 00:33:53,840
makes sense for your specific team

1038
00:33:54,880 --> 00:33:56,399
i think in the spirit of the rest of the

1039
00:33:56,399 --> 00:33:57,679
talk we're also going to encourage you

1040
00:33:57,679 --> 00:33:59,279
to look at how the rest of your software

1041
00:33:59,279 --> 00:34:00,880
engineering teams are doing

1042
00:34:00,880 --> 00:34:03,440
though they're retros you probably can

1043
00:34:03,440 --> 00:34:07,840
just borrow from them quite heavily

1044
00:34:18,839 --> 00:34:21,839
cool

1045
00:34:24,239 --> 00:34:25,918
we're gonna wait for a few more minutes

1046
00:34:25,918 --> 00:34:27,520
to see if there's any additional

1047
00:34:27,520 --> 00:34:30,000
questions

1048
00:34:32,839 --> 00:34:35,839
um

1049
00:34:38,399 --> 00:34:40,239
all right we have something coming in so

1050
00:34:40,239 --> 00:34:41,839
you talked about a little about sizing

1051
00:34:41,839 --> 00:34:43,440
earlier how do you recommending

1052
00:34:43,440 --> 00:34:46,480
sizing security efforts that's a really

1053
00:34:46,480 --> 00:34:47,520
excellent question

1054
00:34:47,520 --> 00:34:51,119
um so well we've we've actually tried a

1055
00:34:51,119 --> 00:34:53,199
few things on our team and so that this

1056
00:34:53,199 --> 00:34:53,760
is

1057
00:34:53,760 --> 00:34:55,280
we have things that sort of worked and

1058
00:34:55,280 --> 00:34:57,280
didn't work one of the things that has

1059
00:34:57,280 --> 00:34:59,119
medium worked in my experience on

1060
00:34:59,119 --> 00:35:01,359
security teams have been using

1061
00:35:01,359 --> 00:35:03,680
point ish systems so in software

1062
00:35:03,680 --> 00:35:05,440
engineering you can sort of have point

1063
00:35:05,440 --> 00:35:07,359
systems of you know a one point is a

1064
00:35:07,359 --> 00:35:09,280
very small task a five point

1065
00:35:09,280 --> 00:35:11,839
is big and if you see something is ten

1066
00:35:11,839 --> 00:35:12,480
points it's

1067
00:35:12,480 --> 00:35:14,480
probably too big to be its own thing and

1068
00:35:14,480 --> 00:35:16,320
so you have to sort of divide it up

1069
00:35:16,320 --> 00:35:17,920
so it kind of depends what kind of

1070
00:35:17,920 --> 00:35:19,599
security team you are so if you're

1071
00:35:19,599 --> 00:35:21,280
working on sort of let's say lots of

1072
00:35:21,280 --> 00:35:23,200
security assessments using story points

1073
00:35:23,200 --> 00:35:24,480
starts making sense

1074
00:35:24,480 --> 00:35:25,680
because you're like a security

1075
00:35:25,680 --> 00:35:27,359
assessment is going to be a large or

1076
00:35:27,359 --> 00:35:29,200
small or medium and you can use

1077
00:35:29,200 --> 00:35:31,760
points of t-shirt sizes to do that if

1078
00:35:31,760 --> 00:35:33,359
you're on the type of security team that

1079
00:35:33,359 --> 00:35:35,119
does more sort of long-term

1080
00:35:35,119 --> 00:35:37,119
projects that's where it gets harder

1081
00:35:37,119 --> 00:35:38,560
right um so

1082
00:35:38,560 --> 00:35:40,800
you you develop your kr the major

1083
00:35:40,800 --> 00:35:41,920
project that you're helping the

1084
00:35:41,920 --> 00:35:43,520
engineering team ship

1085
00:35:43,520 --> 00:35:45,359
but then you can use storyboards and

1086
00:35:45,359 --> 00:35:48,079
individual tasks within that project

1087
00:35:48,079 --> 00:35:50,079
but estimating an overall project as we

1088
00:35:50,079 --> 00:35:52,640
all know is unbelievably difficult so

1089
00:35:52,640 --> 00:35:56,000
what i would look in those cases is how

1090
00:35:56,000 --> 00:35:58,320
do you report to your executives about

1091
00:35:58,320 --> 00:35:59,520
how you're supposed to deliver those

1092
00:35:59,520 --> 00:36:00,160
projects

1093
00:36:00,160 --> 00:36:01,680
are you the kind of company that needs

1094
00:36:01,680 --> 00:36:04,079
like tight timelines tight deadlines

1095
00:36:04,079 --> 00:36:05,680
do you need to report on those things on

1096
00:36:05,680 --> 00:36:07,760
a sort of weekly basis

1097
00:36:07,760 --> 00:36:09,040
it's so dependent on how you're

1098
00:36:09,040 --> 00:36:11,520
reporting up on success of your company

1099
00:36:11,520 --> 00:36:14,160
um so ultimately on a weekly planning

1100
00:36:14,160 --> 00:36:15,839
you can use story points

1101
00:36:15,839 --> 00:36:17,440
like engineering teams to help

1102
00:36:17,440 --> 00:36:18,960
understand how much work you're getting

1103
00:36:18,960 --> 00:36:19,760
through

1104
00:36:19,760 --> 00:36:22,000
but when it comes to large scale efforts

1105
00:36:22,000 --> 00:36:23,520
look at how you're reporting as a

1106
00:36:23,520 --> 00:36:25,359
company and how you can make sure that

1107
00:36:25,359 --> 00:36:27,119
your work is visible and understood to

1108
00:36:27,119 --> 00:36:30,400
the rest of your co-workers

1109
00:36:31,760 --> 00:36:33,440
cool we've had a few more questions come

1110
00:36:33,440 --> 00:36:35,520
in the next one um how do you build that

1111
00:36:35,520 --> 00:36:36,880
trust and safety for

1112
00:36:36,880 --> 00:36:39,440
blameless retrospectives wow that's um

1113
00:36:39,440 --> 00:36:40,160
that's

1114
00:36:40,160 --> 00:36:44,160
that's that's that could be its own talk

1115
00:36:44,160 --> 00:36:47,119
uh subject or training session for sure

1116
00:36:47,119 --> 00:36:47,599
um

1117
00:36:47,599 --> 00:36:51,280
i think it's it's that you know to reuse

1118
00:36:51,280 --> 00:36:52,640
our the word empathy

1119
00:36:52,640 --> 00:36:54,720
um i think as a more senior person on

1120
00:36:54,720 --> 00:36:56,880
the team it's it's being open and honest

1121
00:36:56,880 --> 00:36:57,359
and

1122
00:36:57,359 --> 00:36:59,839
and being okay with being vulnerable in

1123
00:36:59,839 --> 00:37:01,280
conversations um

1124
00:37:01,280 --> 00:37:02,960
to help show other people on the team

1125
00:37:02,960 --> 00:37:05,280
that it's okay uh to be vulnerable

1126
00:37:05,280 --> 00:37:07,440
uh in your team and set that example in

1127
00:37:07,440 --> 00:37:09,680
standard is really important

1128
00:37:09,680 --> 00:37:11,359
um there's there's lots of good uh

1129
00:37:11,359 --> 00:37:13,200
resources i think that camino linked in

1130
00:37:13,200 --> 00:37:15,760
the chat uh courtney eckert's talks and

1131
00:37:15,760 --> 00:37:17,839
uh the etsy guides as well around

1132
00:37:17,839 --> 00:37:20,000
blameless retrospectives but it's it's a

1133
00:37:20,000 --> 00:37:20,640
process

1134
00:37:20,640 --> 00:37:22,480
and that could extend things out past

1135
00:37:22,480 --> 00:37:24,160
that like two to three cycle for

1136
00:37:24,160 --> 00:37:26,000
getting meaningful retrospectives if you

1137
00:37:26,000 --> 00:37:27,359
don't already have that in place on your

1138
00:37:27,359 --> 00:37:29,359
team

1139
00:37:29,359 --> 00:37:31,599
um we have another question coming in

1140
00:37:31,599 --> 00:37:33,920
which is how early in the cicd process

1141
00:37:33,920 --> 00:37:35,440
are you inserting your security focus

1142
00:37:35,440 --> 00:37:36,880
static analysis

1143
00:37:36,880 --> 00:37:39,520
uh depends on your tool uh from

1144
00:37:39,520 --> 00:37:40,400
experience

1145
00:37:40,400 --> 00:37:42,480
if your static analysis doesn't take

1146
00:37:42,480 --> 00:37:44,560
absolutely ages to run

1147
00:37:44,560 --> 00:37:47,359
um it it works absolutely great as like

1148
00:37:47,359 --> 00:37:48,720
literally something that runs on every

1149
00:37:48,720 --> 00:37:50,480
commit as part of a github pull request

1150
00:37:50,480 --> 00:37:51,920
or whatever it is that you're using on

1151
00:37:51,920 --> 00:37:53,599
the source code repository in your

1152
00:37:53,599 --> 00:37:54,400
company

1153
00:37:54,400 --> 00:37:56,640
uh if it is something that like takes

1154
00:37:56,640 --> 00:37:57,599
ages to build

1155
00:37:57,599 --> 00:37:59,680
look at inserting it into your ci cd

1156
00:37:59,680 --> 00:38:01,040
pipeline so basically

1157
00:38:01,040 --> 00:38:03,599
the general principle is as early as

1158
00:38:03,599 --> 00:38:04,160
possible

1159
00:38:04,160 --> 00:38:06,000
as you can make it without being a

1160
00:38:06,000 --> 00:38:08,320
complete pain for your engineers

1161
00:38:08,320 --> 00:38:09,520
because if your engineers grow to hate

1162
00:38:09,520 --> 00:38:12,000
it then you're losing that battle

1163
00:38:12,000 --> 00:38:14,160
um so as early as possible as long as

1164
00:38:14,160 --> 00:38:15,680
it's not impeding

1165
00:38:15,680 --> 00:38:19,839
software engineers work

1166
00:38:20,320 --> 00:38:23,599
great we have uh

1167
00:38:23,599 --> 00:38:25,040
i think there's one more uh how do you

1168
00:38:25,040 --> 00:38:27,760
handle scan results as technical death

1169
00:38:27,760 --> 00:38:30,320
yeah this is tricky too but i think it's

1170
00:38:30,320 --> 00:38:32,000
the way that we look at it is

1171
00:38:32,000 --> 00:38:35,200
any scan results you know first not just

1172
00:38:35,200 --> 00:38:35,839
taking them

1173
00:38:35,839 --> 00:38:38,160
for face value and spending time and

1174
00:38:38,160 --> 00:38:40,079
like using your expertise as a security

1175
00:38:40,079 --> 00:38:42,000
engineer to validate those

1176
00:38:42,000 --> 00:38:44,320
uh scan results that they're actually

1177
00:38:44,320 --> 00:38:46,480
you know it's

1178
00:38:46,480 --> 00:38:48,079
you know are you getting an alert about

1179
00:38:48,079 --> 00:38:49,839
a missing bluetooth uh

1180
00:38:49,839 --> 00:38:52,480
patch on your aws servers and maybe that

1181
00:38:52,480 --> 00:38:53,359
isn't the highest

1182
00:38:53,359 --> 00:38:56,720
risk that it you know says it is in the

1183
00:38:56,720 --> 00:38:57,200
in the

1184
00:38:57,200 --> 00:39:00,400
scan uh um

1185
00:39:00,400 --> 00:39:02,320
and look at that and look at how your

1186
00:39:02,320 --> 00:39:03,599
engineering teams are handling

1187
00:39:03,599 --> 00:39:05,440
priorities for any other bug

1188
00:39:05,440 --> 00:39:08,240
um and align that to to those priorities

1189
00:39:08,240 --> 00:39:10,400
if a p0 means

1190
00:39:10,400 --> 00:39:12,320
x number of days you know maybe that's

1191
00:39:12,320 --> 00:39:13,599
where your critical bugs

1192
00:39:13,599 --> 00:39:16,960
align and see if you can use their bug

1193
00:39:16,960 --> 00:39:18,800
filing software to

1194
00:39:18,800 --> 00:39:21,359
um speak their language and treat

1195
00:39:21,359 --> 00:39:23,520
security bugs like any other

1196
00:39:23,520 --> 00:39:25,520
production breaking bug or you know this

1197
00:39:25,520 --> 00:39:26,960
is kind of a nuisance sort of

1198
00:39:26,960 --> 00:39:30,640
issue and align those things

1199
00:39:33,119 --> 00:39:36,000
all right uh we have 30 seconds left so

1200
00:39:36,000 --> 00:39:36,720
i'm going to

1201
00:39:36,720 --> 00:39:38,400
quickly do how do you recommend handling

1202
00:39:38,400 --> 00:39:40,079
secure scenarios where security is

1203
00:39:40,079 --> 00:39:41,599
having to be overlaid over existing

1204
00:39:41,599 --> 00:39:42,079
products

1205
00:39:42,079 --> 00:39:45,040
applications that's unbelievably

1206
00:39:45,040 --> 00:39:45,680
difficult

1207
00:39:45,680 --> 00:39:48,079
um i think i'm gonna try answering that

1208
00:39:48,079 --> 00:39:49,599
one in chat because i don't think i can

1209
00:39:49,599 --> 00:39:51,920
do this in 15 seconds live unless craig

1210
00:39:51,920 --> 00:39:53,599
you want to give it a shot

1211
00:39:53,599 --> 00:39:55,440
oh yeah i think uh yeah we'll be happy

1212
00:39:55,440 --> 00:39:57,119
to stick around and chat and answer

1213
00:39:57,119 --> 00:39:58,480
questions or reach out to us on twitter

1214
00:39:58,480 --> 00:39:59,280
happy to

1215
00:39:59,280 --> 00:40:00,720
extend the conversation thank you all

1216
00:40:00,720 --> 00:40:02,400
very much

1217
00:40:02,400 --> 00:40:07,040
thank you so much

