1
00:00:03,750 --> 00:00:16,400
[Music]

2
00:00:16,400 --> 00:00:18,000
greetings everyone

3
00:00:18,000 --> 00:00:20,080
welcome to the talk portable document

4
00:00:20,080 --> 00:00:21,439
flaws 101

5
00:00:21,439 --> 00:00:23,840
at a virtual blackhead conference in

6
00:00:23,840 --> 00:00:26,800
strange times

7
00:00:27,840 --> 00:00:30,000
so my name is jens miller i'm a phd

8
00:00:30,000 --> 00:00:31,039
candidate at

9
00:00:31,039 --> 00:00:34,160
the university of bochum in germany and

10
00:00:34,160 --> 00:00:35,600
today i'm going to give you

11
00:00:35,600 --> 00:00:38,239
an introduction to our current research

12
00:00:38,239 --> 00:00:38,960
which

13
00:00:38,960 --> 00:00:42,320
is a joint work from bohom on dangerous

14
00:00:42,320 --> 00:00:43,200
features

15
00:00:43,200 --> 00:00:46,640
of pdf so in this briefing we will

16
00:00:46,640 --> 00:00:47,520
together

17
00:00:47,520 --> 00:00:50,239
dive deep into the less known features

18
00:00:50,239 --> 00:00:50,879
of the

19
00:00:50,879 --> 00:00:53,680
pdf specification which can lead to

20
00:00:53,680 --> 00:00:54,320
serious

21
00:00:54,320 --> 00:00:57,520
security flaws so in 45 minutes

22
00:00:57,520 --> 00:01:00,000
you may say well i didn't know that pdf

23
00:01:00,000 --> 00:01:02,879
can actually do that

24
00:01:03,039 --> 00:01:06,479
okay so let's put on our

25
00:01:06,479 --> 00:01:10,840
las vegas sunglasses and let's get

26
00:01:10,840 --> 00:01:12,400
started

27
00:01:12,400 --> 00:01:15,439
also i'm introducing a new rule for this

28
00:01:15,439 --> 00:01:16,560
talk

29
00:01:16,560 --> 00:01:19,280
so whenever i'm going to show you a demo

30
00:01:19,280 --> 00:01:21,200
we are all going to have a drink or a

31
00:01:21,200 --> 00:01:23,759
beer together

32
00:01:23,759 --> 00:01:25,439
and there's really going to be a lot of

33
00:01:25,439 --> 00:01:28,080
demos in this briefing

34
00:01:28,080 --> 00:01:30,560
okay so here's an outline of today's

35
00:01:30,560 --> 00:01:31,360
talk

36
00:01:31,360 --> 00:01:32,799
first i'm going to give you some

37
00:01:32,799 --> 00:01:34,560
background information on the

38
00:01:34,560 --> 00:01:37,920
pdf document structure and features so

39
00:01:37,920 --> 00:01:40,320
you'll get a better understanding of the

40
00:01:40,320 --> 00:01:40,960
attacks

41
00:01:40,960 --> 00:01:44,240
to follow then i'm going to introduce

42
00:01:44,240 --> 00:01:44,640
our

43
00:01:44,640 --> 00:01:47,920
four attack classes based on malicious

44
00:01:47,920 --> 00:01:48,799
documents

45
00:01:48,799 --> 00:01:51,439
that basically lead to denial of service

46
00:01:51,439 --> 00:01:52,320
affecting the

47
00:01:52,320 --> 00:01:54,880
host on which the document is processed

48
00:01:54,880 --> 00:01:56,719
information disclosure attacks licking

49
00:01:56,719 --> 00:01:58,640
personal data out of the victim's

50
00:01:58,640 --> 00:01:59,920
computer

51
00:01:59,920 --> 00:02:02,320
manipulation of data and even code

52
00:02:02,320 --> 00:02:03,119
execution

53
00:02:03,119 --> 00:02:06,560
on the victim's machine and finally i'm

54
00:02:06,560 --> 00:02:08,080
going to provide an emulation

55
00:02:08,080 --> 00:02:11,520
of those attacks on 28 popular pdf

56
00:02:11,520 --> 00:02:12,160
viewers

57
00:02:12,160 --> 00:02:13,760
as well as countermeasures for

58
00:02:13,760 --> 00:02:15,840
developers

59
00:02:15,840 --> 00:02:18,239
okay let's start with some technical

60
00:02:18,239 --> 00:02:18,879
background

61
00:02:18,879 --> 00:02:22,879
on pdf i guess we are all

62
00:02:22,879 --> 00:02:24,879
more or less familiar with the portable

63
00:02:24,879 --> 00:02:26,319
document format which is

64
00:02:26,319 --> 00:02:29,280
basically a de facto standard for

65
00:02:29,280 --> 00:02:30,160
electronic

66
00:02:30,160 --> 00:02:33,519
document exchange so pdf was developed

67
00:02:33,519 --> 00:02:34,080
in the

68
00:02:34,080 --> 00:02:36,640
early 90s by adobe and it's an iso

69
00:02:36,640 --> 00:02:37,200
standard

70
00:02:37,200 --> 00:02:39,519
since 2008 with the current version

71
00:02:39,519 --> 00:02:42,560
being pdf 2.0

72
00:02:42,560 --> 00:02:45,120
according to adobe 250 billion pdf

73
00:02:45,120 --> 00:02:46,640
documents have been opened in their

74
00:02:46,640 --> 00:02:47,519
product in

75
00:02:47,519 --> 00:02:50,239
one single year so i guess it's fair to

76
00:02:50,239 --> 00:02:50,959
say that

77
00:02:50,959 --> 00:02:54,160
pdf is used in almost every

78
00:02:54,160 --> 00:02:57,200
company and institution out there

79
00:02:57,200 --> 00:02:59,519
and it's definitely worse having a

80
00:02:59,519 --> 00:03:00,319
deeper look

81
00:03:00,319 --> 00:03:03,280
at the capabilities of potentially

82
00:03:03,280 --> 00:03:04,000
malicious

83
00:03:04,000 --> 00:03:07,040
documents okay

84
00:03:07,040 --> 00:03:10,239
let's first have a look at a simple pdf

85
00:03:10,239 --> 00:03:11,360
document

86
00:03:11,360 --> 00:03:14,400
so here's a minimal hello world pdf file

87
00:03:14,400 --> 00:03:17,680
opened in adobe reader however you can

88
00:03:17,680 --> 00:03:18,000
also

89
00:03:18,000 --> 00:03:20,319
open this very same file using a text

90
00:03:20,319 --> 00:03:21,120
editor

91
00:03:21,120 --> 00:03:24,480
like vi for example and as you can see

92
00:03:24,480 --> 00:03:24,879
here

93
00:03:24,879 --> 00:03:27,760
we can actually read and edit the

94
00:03:27,760 --> 00:03:29,040
document

95
00:03:29,040 --> 00:03:31,200
there may be some some binary parts like

96
00:03:31,200 --> 00:03:32,080
graphics or

97
00:03:32,080 --> 00:03:34,080
compressed data streams but the

98
00:03:34,080 --> 00:03:36,159
structure of a pdf file is

99
00:03:36,159 --> 00:03:38,159
basically plain text so you can read

100
00:03:38,159 --> 00:03:41,599
strings maybe like hello world

101
00:03:42,080 --> 00:03:44,239
on an abstract level each pdf document

102
00:03:44,239 --> 00:03:45,599
consists of

103
00:03:45,599 --> 00:03:48,480
four parts first of all it's a header

104
00:03:48,480 --> 00:03:49,760
which is only one line

105
00:03:49,760 --> 00:03:51,599
containing the pdf version of the

106
00:03:51,599 --> 00:03:55,439
document like 1.7

107
00:03:55,439 --> 00:03:58,239
a cross reference sorry a body which

108
00:03:58,239 --> 00:03:59,760
contains a definition of

109
00:03:59,760 --> 00:04:02,959
pages of the document and and the actual

110
00:04:02,959 --> 00:04:04,000
content this is

111
00:04:04,000 --> 00:04:07,040
the most important part also a cross

112
00:04:07,040 --> 00:04:07,680
reference

113
00:04:07,680 --> 00:04:09,920
section which contains an index table

114
00:04:09,920 --> 00:04:11,360
defining the offsets

115
00:04:11,360 --> 00:04:13,680
of all the documents of all the objects

116
00:04:13,680 --> 00:04:15,599
within that document

117
00:04:15,599 --> 00:04:17,358
and finally a trailer which contains

118
00:04:17,358 --> 00:04:18,959
some more information such

119
00:04:18,959 --> 00:04:21,600
as a reference to the root element of

120
00:04:21,600 --> 00:04:23,759
the document

121
00:04:23,759 --> 00:04:25,360
so pdf documents they are actually

122
00:04:25,360 --> 00:04:29,600
processed from the bottom to the top

123
00:04:29,600 --> 00:04:31,280
now let's have a look at some related

124
00:04:31,280 --> 00:04:33,440
work so

125
00:04:33,440 --> 00:04:35,360
in the past when talking about pdf

126
00:04:35,360 --> 00:04:37,440
security we have seen various things

127
00:04:37,440 --> 00:04:38,560
like for example

128
00:04:38,560 --> 00:04:41,040
we've seen the recent attacks on pdf

129
00:04:41,040 --> 00:04:42,560
encryption and also on

130
00:04:42,560 --> 00:04:45,040
pdf signatures which we both

131
00:04:45,040 --> 00:04:46,320
demonstrated

132
00:04:46,320 --> 00:04:49,919
last year but also in the context of pdf

133
00:04:49,919 --> 00:04:50,800
what happens

134
00:04:50,800 --> 00:04:53,520
very often is that companies and

135
00:04:53,520 --> 00:04:55,199
institutions they publish

136
00:04:55,199 --> 00:04:57,840
pdf documents that are somewhat poorly

137
00:04:57,840 --> 00:04:58,639
redacted

138
00:04:58,639 --> 00:05:02,479
and thereby reveal sensitive information

139
00:05:02,479 --> 00:05:05,039
this happens very often because content

140
00:05:05,039 --> 00:05:06,240
objects are

141
00:05:06,240 --> 00:05:09,199
usually not deleted if the file is

142
00:05:09,199 --> 00:05:11,199
edited they're simply not referenced

143
00:05:11,199 --> 00:05:12,000
anymore

144
00:05:12,000 --> 00:05:14,240
and then this allows you to recover

145
00:05:14,240 --> 00:05:16,960
previous revisions of a document

146
00:05:16,960 --> 00:05:18,639
a comprehensive study was for example

147
00:05:18,639 --> 00:05:20,479
performed by simon garfield

148
00:05:20,479 --> 00:05:25,280
by simon garfinkel and by many others

149
00:05:25,280 --> 00:05:27,440
also we have seen some metadata issues

150
00:05:27,440 --> 00:05:28,639
that reveal the

151
00:05:28,639 --> 00:05:31,120
original author of a document which is

152
00:05:31,120 --> 00:05:32,000
not always

153
00:05:32,000 --> 00:05:35,280
desired so such issues they were

154
00:05:35,280 --> 00:05:36,560
presented for example

155
00:05:36,560 --> 00:05:40,800
at black blackhead 2008 by shema alonso

156
00:05:40,800 --> 00:05:42,080
and finally we have seen a lot of

157
00:05:42,080 --> 00:05:44,800
research on polycloth pdf files that are

158
00:05:44,800 --> 00:05:45,440
also

159
00:05:45,440 --> 00:05:48,320
valid images or other file types because

160
00:05:48,320 --> 00:05:49,440
the pdf header

161
00:05:49,440 --> 00:05:52,240
does not have to start at the beginning

162
00:05:52,240 --> 00:05:53,360
of a file

163
00:05:53,360 --> 00:05:56,080
as demonstrated for example by orange

164
00:05:56,080 --> 00:05:58,720
albertini

165
00:05:58,720 --> 00:06:01,520
now in this talk we'll focus on insecure

166
00:06:01,520 --> 00:06:02,240
features

167
00:06:02,240 --> 00:06:05,600
of pdf and when you study the pdf

168
00:06:05,600 --> 00:06:06,720
specification

169
00:06:06,720 --> 00:06:09,840
for interesting features you will

170
00:06:09,840 --> 00:06:13,440
quickly stumble upon pdf actions

171
00:06:13,440 --> 00:06:16,000
which are used for various purposes such

172
00:06:16,000 --> 00:06:18,880
as for external links

173
00:06:18,880 --> 00:06:21,280
or to navigate for example to a certain

174
00:06:21,280 --> 00:06:22,240
page within

175
00:06:22,240 --> 00:06:25,440
the document and even

176
00:06:25,440 --> 00:06:27,840
javascript within pdf is actually

177
00:06:27,840 --> 00:06:29,199
defined as a pdf

178
00:06:29,199 --> 00:06:32,639
action now all those actions that can be

179
00:06:32,639 --> 00:06:33,759
triggered using

180
00:06:33,759 --> 00:06:36,560
native pdf events for example when

181
00:06:36,560 --> 00:06:37,199
opening

182
00:06:37,199 --> 00:06:41,520
closing or in printing the document

183
00:06:41,680 --> 00:06:43,919
and most actions they can have a pdf

184
00:06:43,919 --> 00:06:45,120
file specification

185
00:06:45,120 --> 00:06:48,080
as a target which could be for example a

186
00:06:48,080 --> 00:06:48,880
ul

187
00:06:48,880 --> 00:06:52,960
in order to define a hyperlink

188
00:06:54,080 --> 00:06:57,520
okay so we systematically started the

189
00:06:57,520 --> 00:07:00,479
pdf specification for pdf actions and

190
00:07:00,479 --> 00:07:01,680
for events that can

191
00:07:01,680 --> 00:07:05,120
trigger them and then we try to

192
00:07:05,120 --> 00:07:07,360
visualize um all those findings

193
00:07:07,360 --> 00:07:08,479
resulting in

194
00:07:08,479 --> 00:07:10,800
my whiteboard being filled up with a

195
00:07:10,800 --> 00:07:13,520
complete mess

196
00:07:13,840 --> 00:07:18,000
so here's a more clean representation

197
00:07:18,000 --> 00:07:20,960
and this is basically the most important

198
00:07:20,960 --> 00:07:22,639
slide of the talk

199
00:07:22,639 --> 00:07:26,080
which will follow us over and over again

200
00:07:26,080 --> 00:07:28,720
so we identified four special objects

201
00:07:28,720 --> 00:07:29,280
which

202
00:07:29,280 --> 00:07:32,240
allow you to call arbitrary actions

203
00:07:32,240 --> 00:07:33,759
which is

204
00:07:33,759 --> 00:07:36,400
page annotations fields and catalog as

205
00:07:36,400 --> 00:07:37,599
shown in the upper part

206
00:07:37,599 --> 00:07:40,639
we call those events now for calling an

207
00:07:40,639 --> 00:07:41,280
action

208
00:07:41,280 --> 00:07:43,520
most objects they offer multiple

209
00:07:43,520 --> 00:07:45,599
alternatives

210
00:07:45,599 --> 00:07:47,680
for example here the catalog object

211
00:07:47,680 --> 00:07:49,520
defines the open action event

212
00:07:49,520 --> 00:07:54,639
but also an additional action aas events

213
00:07:54,639 --> 00:07:56,879
and each event can now launch any

214
00:07:56,879 --> 00:07:58,000
sequence of

215
00:07:58,000 --> 00:08:01,280
pdf actions which are depicted in the

216
00:08:01,280 --> 00:08:02,160
middle part

217
00:08:02,160 --> 00:08:04,080
the meaning of the action will come to

218
00:08:04,080 --> 00:08:06,560
that later

219
00:08:06,720 --> 00:08:09,039
and the target of an action can be a

220
00:08:09,039 --> 00:08:09,840
file handle

221
00:08:09,840 --> 00:08:13,120
or to be more technical a pdf

222
00:08:13,120 --> 00:08:15,440
file specification which is a

223
00:08:15,440 --> 00:08:16,240
multi-purpose

224
00:08:16,240 --> 00:08:18,960
object that can be either an embedded

225
00:08:18,960 --> 00:08:19,919
file so

226
00:08:19,919 --> 00:08:22,960
a data stream within the document a

227
00:08:22,960 --> 00:08:24,560
local file on disk

228
00:08:24,560 --> 00:08:27,599
a remote url or even a network share

229
00:08:27,599 --> 00:08:29,759
depending on the parameters and the

230
00:08:29,759 --> 00:08:32,318
context

231
00:08:32,799 --> 00:08:35,279
now if a pass from an event over an

232
00:08:35,279 --> 00:08:36,958
action to a file handle and

233
00:08:36,958 --> 00:08:39,279
exists and is not explicitly blocked by

234
00:08:39,279 --> 00:08:40,399
the application

235
00:08:40,399 --> 00:08:43,120
opening the document this may result for

236
00:08:43,120 --> 00:08:43,760
example

237
00:08:43,760 --> 00:08:46,720
in file system access or in ul

238
00:08:46,720 --> 00:08:47,519
invocation

239
00:08:47,519 --> 00:08:50,640
as we'll see later

240
00:08:51,120 --> 00:08:53,200
but before coming to the actual attacks

241
00:08:53,200 --> 00:08:54,320
let me introduce

242
00:08:54,320 --> 00:08:57,360
our attacker model so our attack

243
00:08:57,360 --> 00:08:58,080
scenario

244
00:08:58,080 --> 00:09:01,600
is as follows all the victim has to do

245
00:09:01,600 --> 00:09:04,560
is to open a malicious document provided

246
00:09:04,560 --> 00:09:06,640
by the attacker

247
00:09:06,640 --> 00:09:09,120
this is a realistic scenario because pdf

248
00:09:09,120 --> 00:09:10,959
is generally considered as

249
00:09:10,959 --> 00:09:13,600
relatively safe and even sophisticated

250
00:09:13,600 --> 00:09:14,320
uses

251
00:09:14,320 --> 00:09:16,880
they download and open pdf files from

252
00:09:16,880 --> 00:09:18,240
untrusted sources

253
00:09:18,240 --> 00:09:20,480
like email attachments or the internet

254
00:09:20,480 --> 00:09:22,080
for example invoices

255
00:09:22,080 --> 00:09:23,920
placket slides blackhead whitepapers and

256
00:09:23,920 --> 00:09:28,160
so on are provided as pdf files

257
00:09:28,480 --> 00:09:30,480
now once this document which we denote

258
00:09:30,480 --> 00:09:33,200
as the malicious document is opened

259
00:09:33,200 --> 00:09:36,160
bad sayings happen depending on the

260
00:09:36,160 --> 00:09:37,200
actual attack

261
00:09:37,200 --> 00:09:38,959
so for example denial of service attacks

262
00:09:38,959 --> 00:09:40,240
they would cause the

263
00:09:40,240 --> 00:09:42,320
pdf viewer or maybe even the operating

264
00:09:42,320 --> 00:09:43,680
system to consume

265
00:09:43,680 --> 00:09:46,000
all available system resources or cause

266
00:09:46,000 --> 00:09:48,959
them to crash

267
00:09:49,120 --> 00:09:51,680
note that no user interaction other than

268
00:09:51,680 --> 00:09:52,800
opening the document

269
00:09:52,800 --> 00:09:55,680
is required for any of the attacks so in

270
00:09:55,680 --> 00:09:56,320
case

271
00:09:56,320 --> 00:09:58,880
a pdf application would display a

272
00:09:58,880 --> 00:10:00,080
confirmation dialog

273
00:10:00,080 --> 00:10:02,240
before performing a certain action we do

274
00:10:02,240 --> 00:10:03,600
not classify this

275
00:10:03,600 --> 00:10:06,480
as vulnerable

276
00:10:07,920 --> 00:10:11,040
okay let me come to the attacks

277
00:10:11,040 --> 00:10:13,120
so our methodology in finding the

278
00:10:13,120 --> 00:10:15,279
attacks was pretty simple

279
00:10:15,279 --> 00:10:17,760
we systematically started the pdf

280
00:10:17,760 --> 00:10:18,640
standard for

281
00:10:18,640 --> 00:10:20,959
legitimate features that are critical

282
00:10:20,959 --> 00:10:22,320
from a security

283
00:10:22,320 --> 00:10:24,959
point of view and which can be abused

284
00:10:24,959 --> 00:10:25,360
for

285
00:10:25,360 --> 00:10:28,800
attacks so let's start having

286
00:10:28,800 --> 00:10:31,519
some fun with the portable document

287
00:10:31,519 --> 00:10:32,079
format

288
00:10:32,079 --> 00:10:35,360
resulting in denial of service

289
00:10:35,360 --> 00:10:38,000
let's start with how to create a pdf

290
00:10:38,000 --> 00:10:40,720
infinite loop

291
00:10:42,160 --> 00:10:44,320
so for this let's first have a look on

292
00:10:44,320 --> 00:10:45,200
how the

293
00:10:45,200 --> 00:10:48,480
pages object of a pdf document

294
00:10:48,480 --> 00:10:50,880
is defined so a document can have

295
00:10:50,880 --> 00:10:51,600
multiple

296
00:10:51,600 --> 00:10:54,160
or one or multiple pages or no page at

297
00:10:54,160 --> 00:10:54,880
all

298
00:10:54,880 --> 00:10:58,079
and this is usually done using the pages

299
00:10:58,079 --> 00:11:00,720
special object within the document

300
00:11:00,720 --> 00:11:01,680
catalog

301
00:11:01,680 --> 00:11:04,480
and the pages object has a kids entry

302
00:11:04,480 --> 00:11:05,519
containing

303
00:11:05,519 --> 00:11:10,079
a reference to each page in the document

304
00:11:10,079 --> 00:11:12,800
or as the standard phrases it the kids

305
00:11:12,800 --> 00:11:13,600
entry

306
00:11:13,600 --> 00:11:15,760
contains an area of indirect references

307
00:11:15,760 --> 00:11:18,720
to immediate children of this node

308
00:11:18,720 --> 00:11:21,360
now interestingly the children may be

309
00:11:21,360 --> 00:11:22,880
page objects

310
00:11:22,880 --> 00:11:26,959
or other page tree notes

311
00:11:26,959 --> 00:11:30,320
oh wait okay interestingly in other

312
00:11:30,320 --> 00:11:31,440
words

313
00:11:31,440 --> 00:11:34,320
the kids entry of a pages object can

314
00:11:34,320 --> 00:11:35,040
reference

315
00:11:35,040 --> 00:11:38,959
to a pages object itself

316
00:11:39,360 --> 00:11:42,160
so basically to itself thereby creating

317
00:11:42,160 --> 00:11:43,760
a cycle

318
00:11:43,760 --> 00:11:45,680
and this is a no problem of the

319
00:11:45,680 --> 00:11:48,320
specification when parsing pdf files

320
00:11:48,320 --> 00:11:52,560
it was already addressed in 2007.

321
00:11:52,560 --> 00:11:54,480
so we thought maybe maybe there are some

322
00:11:54,480 --> 00:11:57,120
more issues in the specification

323
00:11:57,120 --> 00:11:59,279
maybe there are more examples let's have

324
00:11:59,279 --> 00:12:00,639
a deeper look and study the

325
00:12:00,639 --> 00:12:01,680
specification

326
00:12:01,680 --> 00:12:04,959
for elements for objects that allow

327
00:12:04,959 --> 00:12:07,760
self referencing recursion and other

328
00:12:07,760 --> 00:12:08,800
constructs that

329
00:12:08,800 --> 00:12:12,800
may somehow lead to infinite loops

330
00:12:12,800 --> 00:12:15,200
so we came up with the following attack

331
00:12:15,200 --> 00:12:17,680
variants

332
00:12:18,399 --> 00:12:21,839
so pf actions they allow you to specify

333
00:12:21,839 --> 00:12:22,079
an

334
00:12:22,079 --> 00:12:26,079
array of next actions to be performed

335
00:12:26,079 --> 00:12:28,880
and basically this can easily result in

336
00:12:28,880 --> 00:12:31,760
action cycles

337
00:12:31,839 --> 00:12:35,120
let me show you a demo

338
00:12:35,200 --> 00:12:40,079
demos always means we have to drink

339
00:12:43,600 --> 00:12:46,000
what you can see here was an event an

340
00:12:46,000 --> 00:12:48,079
open action that triggers object number

341
00:12:48,079 --> 00:12:48,720
seven

342
00:12:48,720 --> 00:12:50,639
which is an action that goes to a

343
00:12:50,639 --> 00:12:53,040
certain page in a document

344
00:12:53,040 --> 00:12:55,360
now there is an entry next action which

345
00:12:55,360 --> 00:12:57,120
refers to object number seven again and

346
00:12:57,120 --> 00:12:59,839
thereby we have a cycle right

347
00:12:59,839 --> 00:13:01,519
and then also there's there are two more

348
00:13:01,519 --> 00:13:05,600
object numbers object 8 and object 9

349
00:13:05,600 --> 00:13:07,680
and they also once again have a next

350
00:13:07,680 --> 00:13:09,839
entry once again referencing

351
00:13:09,839 --> 00:13:12,240
to object number seven and then again we

352
00:13:12,240 --> 00:13:13,040
have another

353
00:13:13,040 --> 00:13:16,160
cycle okay let's open this

354
00:13:16,160 --> 00:13:20,079
document in adobe reader for example

355
00:13:20,079 --> 00:13:23,600
what you can see here is while parsing

356
00:13:23,600 --> 00:13:27,360
the document it jumps from page to page

357
00:13:27,360 --> 00:13:29,279
and you can't close it anymore and the

358
00:13:29,279 --> 00:13:30,720
cpu goes

359
00:13:30,720 --> 00:13:34,079
up which is somewhat annoying

360
00:13:34,079 --> 00:13:35,680
it's not really bad but it's somewhat

361
00:13:35,680 --> 00:13:38,079
annoying

362
00:13:39,680 --> 00:13:43,279
okay and there's lots of other

363
00:13:43,279 --> 00:13:46,240
variants without without any actions so

364
00:13:46,240 --> 00:13:46,880
using

365
00:13:46,880 --> 00:13:49,360
pure structural elements like object

366
00:13:49,360 --> 00:13:50,720
stream loops

367
00:13:50,720 --> 00:13:53,680
so pdf object streams they may extend

368
00:13:53,680 --> 00:13:54,480
other objects

369
00:13:54,480 --> 00:13:56,639
object streams and thereby once again

370
00:13:56,639 --> 00:13:57,760
allowing to craft

371
00:13:57,760 --> 00:14:02,880
a document with cycles or for example

372
00:14:02,880 --> 00:14:04,720
you have probably seen pdf documents

373
00:14:04,720 --> 00:14:07,760
that contain an outline

374
00:14:07,760 --> 00:14:10,959
and the entries of an outline

375
00:14:10,959 --> 00:14:13,839
they can reference to themselves or to

376
00:14:13,839 --> 00:14:14,639
each other

377
00:14:14,639 --> 00:14:16,160
and then once again you can craft the

378
00:14:16,160 --> 00:14:18,639
pdf file that when processed

379
00:14:18,639 --> 00:14:21,760
creates or parses all cycles

380
00:14:21,760 --> 00:14:25,760
and results in an infinite loop

381
00:14:26,240 --> 00:14:29,920
also pdf defines type 4 calculator

382
00:14:29,920 --> 00:14:30,800
functions

383
00:14:30,800 --> 00:14:33,600
for example to transform colors and this

384
00:14:33,600 --> 00:14:35,760
may once again allow us to define

385
00:14:35,760 --> 00:14:38,639
an infinite loop by defining a recursive

386
00:14:38,639 --> 00:14:41,120
function

387
00:14:41,920 --> 00:14:44,959
and finally in case the pdf application

388
00:14:44,959 --> 00:14:48,240
supports javascript within documents

389
00:14:48,240 --> 00:14:50,560
well then infinite loops are super easy

390
00:14:50,560 --> 00:14:53,440
to introduce right

391
00:14:53,440 --> 00:14:55,120
okay so the takeaway here is that

392
00:14:55,120 --> 00:14:57,360
there's lots of lots of options to

393
00:14:57,360 --> 00:15:00,880
keep the pdf processing application busy

394
00:15:00,880 --> 00:15:03,680
by forcing it into an invade loop

395
00:15:03,680 --> 00:15:04,720
thereby consuming

396
00:15:04,720 --> 00:15:08,079
all available cpu

397
00:15:08,480 --> 00:15:13,040
can we also exhaust all available memory

398
00:15:13,040 --> 00:15:16,480
sure we can so most of you

399
00:15:16,480 --> 00:15:19,360
are probably aware of the problem of sip

400
00:15:19,360 --> 00:15:20,560
bombs

401
00:15:20,560 --> 00:15:23,040
so data amplification attacks based on

402
00:15:23,040 --> 00:15:23,839
malicious

403
00:15:23,839 --> 00:15:27,360
tip archives

404
00:15:27,360 --> 00:15:29,440
so the first publicly documented denial

405
00:15:29,440 --> 00:15:31,040
of service attack using

406
00:15:31,040 --> 00:15:34,639
a sip bomb was conducted back in 1997

407
00:15:34,639 --> 00:15:37,759
against a feed.net mailbox operator

408
00:15:37,759 --> 00:15:40,800
but not only zip files but also

409
00:15:40,800 --> 00:15:43,360
stream objects within pdf documents that

410
00:15:43,360 --> 00:15:44,800
can be compressed

411
00:15:44,800 --> 00:15:48,399
using various algorithms such as deflate

412
00:15:48,399 --> 00:15:51,360
in order to reduce the overall file size

413
00:15:51,360 --> 00:15:54,720
of the document

414
00:15:54,720 --> 00:15:56,880
now such compressed pdf streams they are

415
00:15:56,880 --> 00:15:58,480
absolutely standard

416
00:15:58,480 --> 00:16:01,519
and they are contained in most pdf

417
00:16:01,519 --> 00:16:03,519
documents in the wild

418
00:16:03,519 --> 00:16:05,120
and now processing applications they

419
00:16:05,120 --> 00:16:07,199
must first decompress

420
00:16:07,199 --> 00:16:09,839
those streams in order to display their

421
00:16:09,839 --> 00:16:12,240
content right

422
00:16:12,240 --> 00:16:14,639
which raises the question if compression

423
00:16:14,639 --> 00:16:15,839
bombs based on

424
00:16:15,839 --> 00:16:20,320
malicious pdf documents can be built

425
00:16:21,199 --> 00:16:23,279
okay here's basically our hello world

426
00:16:23,279 --> 00:16:25,120
example again

427
00:16:25,120 --> 00:16:27,120
let's change this let's craft a valid

428
00:16:27,120 --> 00:16:28,160
pdf file

429
00:16:28,160 --> 00:16:30,560
containing a very long string of 10

430
00:16:30,560 --> 00:16:31,519
gigabyte of

431
00:16:31,519 --> 00:16:35,519
repeated characters aaa and so on

432
00:16:35,519 --> 00:16:38,320
to be displayed

433
00:16:38,560 --> 00:16:43,440
so this results in 10 gigabyte on disk

434
00:16:43,440 --> 00:16:47,199
resulting in 10 gigabyte in memory

435
00:16:47,199 --> 00:16:51,759
which is no gain for the attacker yet

436
00:16:51,759 --> 00:16:55,440
let's now compress this content stream

437
00:16:55,440 --> 00:16:58,560
so in pdf the fleet flight decode filter

438
00:16:58,560 --> 00:16:59,600
indicates that

439
00:16:59,600 --> 00:17:02,560
the stream must be decompressed before

440
00:17:02,560 --> 00:17:04,319
being displayed

441
00:17:04,319 --> 00:17:06,079
and this results now in a compression

442
00:17:06,079 --> 00:17:07,880
ratio of 1 to

443
00:17:07,880 --> 00:17:11,760
1023 which is unfortunately the maximum

444
00:17:11,760 --> 00:17:14,319
compression ratio that can be achieved

445
00:17:14,319 --> 00:17:17,599
with the deflate algorithm

446
00:17:17,599 --> 00:17:19,839
however audi pdf file size can be

447
00:17:19,839 --> 00:17:21,039
further reduced

448
00:17:21,039 --> 00:17:23,839
by concatenating multiple compression

449
00:17:23,839 --> 00:17:24,720
filters

450
00:17:24,720 --> 00:17:27,760
which is totally pdf standard

451
00:17:27,760 --> 00:17:31,679
to concatenate multiple filters

452
00:17:31,679 --> 00:17:33,919
and we can only even do this for a third

453
00:17:33,919 --> 00:17:35,679
time which then results

454
00:17:35,679 --> 00:17:38,720
in around 600 bytes on disk

455
00:17:38,720 --> 00:17:42,000
being decompressed into 10 gigabyte

456
00:17:42,000 --> 00:17:46,000
in memory so we have a compression ratio

457
00:17:46,000 --> 00:17:49,039
of 1 to 18 million which is

458
00:17:49,039 --> 00:17:52,320
quite good let's have

459
00:17:52,320 --> 00:18:00,640
a demo on linux this time

460
00:18:00,640 --> 00:18:02,799
this is our standard hello world file

461
00:18:02,799 --> 00:18:04,960
but you can see that the content is

462
00:18:04,960 --> 00:18:08,480
compressed using a triple deflate filter

463
00:18:08,480 --> 00:18:14,000
the length is around 600 bytes

464
00:18:14,000 --> 00:18:16,240
let's open this file in events the

465
00:18:16,240 --> 00:18:18,640
default pdf ufo gnome

466
00:18:18,640 --> 00:18:20,160
and it's loading and loading trying to

467
00:18:20,160 --> 00:18:22,320
display the content and what you can see

468
00:18:22,320 --> 00:18:22,960
here is that

469
00:18:22,960 --> 00:18:27,039
memory goes up and up and up

470
00:18:27,600 --> 00:18:29,120
now actually this is not a virtual

471
00:18:29,120 --> 00:18:31,280
machine it's my my laptop it only has

472
00:18:31,280 --> 00:18:34,480
eight gigabyte of ram so i do now have

473
00:18:34,480 --> 00:18:34,799
to

474
00:18:34,799 --> 00:18:37,760
manually interrupt this uh process

475
00:18:37,760 --> 00:18:38,320
otherwise

476
00:18:38,320 --> 00:18:41,120
my whole operating system will freeze

477
00:18:41,120 --> 00:18:43,840
and i don't want that

478
00:18:44,559 --> 00:18:46,640
and interestingly you don't even have to

479
00:18:46,640 --> 00:18:47,919
open the file

480
00:18:47,919 --> 00:18:50,080
um so it it's enough to open the

481
00:18:50,080 --> 00:18:52,559
contained directory in

482
00:18:52,559 --> 00:18:54,320
nautilus in the in the gnome file

483
00:18:54,320 --> 00:18:55,679
manager or even in

484
00:18:55,679 --> 00:18:58,799
windows explorer to trigger deflate

485
00:18:58,799 --> 00:19:01,200
bumps

486
00:19:03,520 --> 00:19:06,080
now this may be problematic a bit more

487
00:19:06,080 --> 00:19:07,679
problematic than the infinite loop right

488
00:19:07,679 --> 00:19:10,480
because we can

489
00:19:10,480 --> 00:19:12,320
potentially freeze the whole operating

490
00:19:12,320 --> 00:19:13,840
system

491
00:19:13,840 --> 00:19:15,919
depending on resource limitation

492
00:19:15,919 --> 00:19:18,080
mechanisms of course

493
00:19:18,080 --> 00:19:20,080
it's it's still not that bad because

494
00:19:20,080 --> 00:19:21,679
because the impact of course of denial

495
00:19:21,679 --> 00:19:22,320
of service is

496
00:19:22,320 --> 00:19:25,919
somewhat limited for end users

497
00:19:25,919 --> 00:19:27,520
but it can lead to severe business

498
00:19:27,520 --> 00:19:29,679
impairment if the document is processed

499
00:19:29,679 --> 00:19:31,280
on a server

500
00:19:31,280 --> 00:19:34,400
for example evinced actually uses

501
00:19:34,400 --> 00:19:36,559
popular in the background which is a

502
00:19:36,559 --> 00:19:38,960
really popular pdf library

503
00:19:38,960 --> 00:19:41,840
which is vulnerability to deflate bombs

504
00:19:41,840 --> 00:19:42,320
and

505
00:19:42,320 --> 00:19:44,960
is used by various web applications to

506
00:19:44,960 --> 00:19:45,679
process

507
00:19:45,679 --> 00:19:48,480
or convert uploaded pdf files on the

508
00:19:48,480 --> 00:19:50,799
server side

509
00:19:50,799 --> 00:19:52,320
okay that's out of scope in this talk

510
00:19:52,320 --> 00:19:55,840
but this can be really bad

511
00:19:55,919 --> 00:19:59,440
okay so um let's now proceed with

512
00:19:59,440 --> 00:20:02,480
information disclosure attacks that leak

513
00:20:02,480 --> 00:20:03,360
personal data

514
00:20:03,360 --> 00:20:05,280
out of the victim's computer to the

515
00:20:05,280 --> 00:20:07,120
attacker such as for example

516
00:20:07,120 --> 00:20:10,080
pdf document form data local files on

517
00:20:10,080 --> 00:20:10,799
disk

518
00:20:10,799 --> 00:20:15,360
or ntlm user credentials

519
00:20:16,880 --> 00:20:19,440
let's start with how pdf documents can

520
00:20:19,440 --> 00:20:20,480
silently

521
00:20:20,480 --> 00:20:23,039
phone home

522
00:20:24,480 --> 00:20:27,679
so at blackhead 2008

523
00:20:27,679 --> 00:20:30,400
eric fillio showed how to use an open

524
00:20:30,400 --> 00:20:31,520
action event

525
00:20:31,520 --> 00:20:34,799
to trigger a ui action

526
00:20:34,799 --> 00:20:37,919
thereby resulting in ui invocation in

527
00:20:37,919 --> 00:20:40,400
adobe reader

528
00:20:40,400 --> 00:20:42,559
now this path was quickly blocked in

529
00:20:42,559 --> 00:20:44,720
most pdf implementations

530
00:20:44,720 --> 00:20:48,080
which will now ask you for user content

531
00:20:48,080 --> 00:20:48,640
before

532
00:20:48,640 --> 00:20:52,240
resolving the ui

533
00:20:52,559 --> 00:20:55,520
but what if we just try another parse

534
00:20:55,520 --> 00:20:57,120
using this path by calling

535
00:20:57,120 --> 00:20:59,760
the ui action from a different event

536
00:20:59,760 --> 00:21:00,400
like from

537
00:21:00,400 --> 00:21:04,080
the additional actions of a page object

538
00:21:04,080 --> 00:21:06,240
we can bypass existing protection

539
00:21:06,240 --> 00:21:08,000
mechanisms for example in

540
00:21:08,000 --> 00:21:11,520
perfect pdf reader we can also use

541
00:21:11,520 --> 00:21:13,520
a completely different action such as

542
00:21:13,520 --> 00:21:14,640
the launch action

543
00:21:14,640 --> 00:21:17,679
which we'll have a closer look later to

544
00:21:17,679 --> 00:21:19,520
trigger a url

545
00:21:19,520 --> 00:21:21,679
so this path actually describes a

546
00:21:21,679 --> 00:21:22,640
clickable link

547
00:21:22,640 --> 00:21:25,919
in a pdf document but what firefox does

548
00:21:25,919 --> 00:21:26,320
is

549
00:21:26,320 --> 00:21:28,880
it prefetches the url which was not

550
00:21:28,880 --> 00:21:30,240
intended by the developers

551
00:21:30,240 --> 00:21:32,000
because it results in request forgery

552
00:21:32,000 --> 00:21:33,360
right

553
00:21:33,360 --> 00:21:35,440
so in the context of of the web of

554
00:21:35,440 --> 00:21:37,440
course request 43 can lead

555
00:21:37,440 --> 00:21:40,320
to further web security related

556
00:21:40,320 --> 00:21:42,400
weaknesses

557
00:21:42,400 --> 00:21:44,640
for example a malicious document that's

558
00:21:44,640 --> 00:21:46,960
uploaded to cloud storage

559
00:21:46,960 --> 00:21:50,000
that could uh trigger at least same site

560
00:21:50,000 --> 00:21:50,880
requests

561
00:21:50,880 --> 00:21:52,559
and this could be exported maybe to

562
00:21:52,559 --> 00:21:54,320
perform actions in the context

563
00:21:54,320 --> 00:21:57,039
of the user's account in case that only

564
00:21:57,039 --> 00:21:58,159
same-side cookies

565
00:21:58,159 --> 00:22:00,799
are used to protect against cross-site

566
00:22:00,799 --> 00:22:03,679
request rotary

567
00:22:03,679 --> 00:22:05,760
okay so i guess it's obvious what we

568
00:22:05,760 --> 00:22:07,600
need to do here we need to test

569
00:22:07,600 --> 00:22:11,440
all possible passes systematically

570
00:22:11,440 --> 00:22:13,840
so this means all possible events all

571
00:22:13,840 --> 00:22:15,760
possible pdf actions

572
00:22:15,760 --> 00:22:18,880
and we use the ul as a file

573
00:22:18,880 --> 00:22:21,600
specification target

574
00:22:21,600 --> 00:22:23,440
and if you do this really systematically

575
00:22:23,440 --> 00:22:26,240
craft a lot of test cases

576
00:22:26,240 --> 00:22:29,280
then what happens is if we test them in

577
00:22:29,280 --> 00:22:33,039
28 popular pdf application applications

578
00:22:33,039 --> 00:22:36,480
or 16 of them will resolve the ui

579
00:22:36,480 --> 00:22:39,360
the ul in the background without any

580
00:22:39,360 --> 00:22:42,880
without asking for any user content

581
00:22:42,880 --> 00:22:44,960
and this can definitely be considered as

582
00:22:44,960 --> 00:22:46,960
privacy invasive right

583
00:22:46,960 --> 00:22:48,640
so it could be used for example to

584
00:22:48,640 --> 00:22:51,120
de-anonymize users like journalists or

585
00:22:51,120 --> 00:22:51,919
activists

586
00:22:51,919 --> 00:22:54,159
behind a shared mailbox we don't want

587
00:22:54,159 --> 00:22:56,400
that

588
00:22:56,880 --> 00:23:00,880
okay next i will show how user input

589
00:23:00,880 --> 00:23:03,520
in pdf forms can be leaked to an

590
00:23:03,520 --> 00:23:06,960
attacker controlled server

591
00:23:06,960 --> 00:23:09,440
so pdf documents that can contain forms

592
00:23:09,440 --> 00:23:11,600
to be filled out by the user

593
00:23:11,600 --> 00:23:14,559
this is a feature used on a daily basis

594
00:23:14,559 --> 00:23:15,039
um

595
00:23:15,039 --> 00:23:17,520
for example for for many office tasks

596
00:23:17,520 --> 00:23:20,320
like vacation requests and so on

597
00:23:20,320 --> 00:23:22,080
and depending of the nature of the form

598
00:23:22,080 --> 00:23:23,919
of course this user input

599
00:23:23,919 --> 00:23:27,280
can certainly be sensitive it can can

600
00:23:27,280 --> 00:23:28,960
contain data like financial

601
00:23:28,960 --> 00:23:31,679
or medical records and so on and

602
00:23:31,679 --> 00:23:33,280
therefore the question arises

603
00:23:33,280 --> 00:23:36,000
if an attack can summer access and leak

604
00:23:36,000 --> 00:23:36,480
such

605
00:23:36,480 --> 00:23:40,240
information so

606
00:23:40,240 --> 00:23:43,440
the idea of the attack is as follows

607
00:23:43,440 --> 00:23:46,159
the victim downloads a form so a pdf

608
00:23:46,159 --> 00:23:47,679
document which contains

609
00:23:47,679 --> 00:23:50,320
form fields from an attacker controlled

610
00:23:50,320 --> 00:23:50,880
source

611
00:23:50,880 --> 00:23:54,320
and fills it out on screen for example

612
00:23:54,320 --> 00:23:56,880
in order to print it

613
00:23:56,880 --> 00:23:58,640
note that there are legitimate cases

614
00:23:58,640 --> 00:24:00,480
where a form is obtained

615
00:24:00,480 --> 00:24:03,440
from a third party while the user input

616
00:24:03,440 --> 00:24:04,000
should not

617
00:24:04,000 --> 00:24:06,799
be revealed to this party are for

618
00:24:06,799 --> 00:24:07,600
example

619
00:24:07,600 --> 00:24:10,000
text forms they can be downloaded from

620
00:24:10,000 --> 00:24:11,840
all over the web

621
00:24:11,840 --> 00:24:14,159
even so you do not want arbitrary

622
00:24:14,159 --> 00:24:15,120
websites

623
00:24:15,120 --> 00:24:18,720
to see their input data for a text form

624
00:24:18,720 --> 00:24:20,880
and also they have to be manually signed

625
00:24:20,880 --> 00:24:21,919
anyway to be

626
00:24:21,919 --> 00:24:25,520
accepted by the iis right

627
00:24:25,520 --> 00:24:27,200
now what if this text form is

628
00:24:27,200 --> 00:24:28,880
manipulated in

629
00:24:28,880 --> 00:24:31,919
such a way that it suddenly in the

630
00:24:31,919 --> 00:24:33,520
background exfiltrates

631
00:24:33,520 --> 00:24:36,640
of data without the user noticing

632
00:24:36,640 --> 00:24:38,720
and sends the user input data to the

633
00:24:38,720 --> 00:24:41,440
attacker's server

634
00:24:41,440 --> 00:24:44,400
how could we do this

635
00:24:44,960 --> 00:24:48,159
well this can be done by combining the

636
00:24:48,159 --> 00:24:51,039
by combining the did print and the page

637
00:24:51,039 --> 00:24:52,240
closed events

638
00:24:52,240 --> 00:24:55,120
of the catalog and annotation objects

639
00:24:55,120 --> 00:24:56,240
within

640
00:24:56,240 --> 00:25:00,000
a document together with a submit form

641
00:25:00,000 --> 00:25:03,360
action thereby all form data all user

642
00:25:03,360 --> 00:25:03,919
input

643
00:25:03,919 --> 00:25:06,559
is sent to the attacker's web server

644
00:25:06,559 --> 00:25:07,679
once the document

645
00:25:07,679 --> 00:25:12,159
is either printed or closed

646
00:25:13,440 --> 00:25:15,120
another option of course would be if

647
00:25:15,120 --> 00:25:16,480
supported to use

648
00:25:16,480 --> 00:25:19,600
javascript to submit the form

649
00:25:19,600 --> 00:25:22,080
or you could all use other functions

650
00:25:22,080 --> 00:25:23,279
defined in the

651
00:25:23,279 --> 00:25:26,159
adobe pdf javascript reference to

652
00:25:26,159 --> 00:25:27,120
extrudrate

653
00:25:27,120 --> 00:25:30,639
pdf form values

654
00:25:30,799 --> 00:25:34,960
maybe i should show you a demo here

655
00:25:41,360 --> 00:25:44,159
so what you can see here is that did

656
00:25:44,159 --> 00:25:44,640
print

657
00:25:44,640 --> 00:25:48,080
is object number five which is an action

658
00:25:48,080 --> 00:25:50,880
which means after printing a form should

659
00:25:50,880 --> 00:25:52,960
be submitted

660
00:25:52,960 --> 00:25:57,840
to evil.com port 8080.

661
00:25:58,480 --> 00:26:01,679
let's start our netcat on port 8080 of

662
00:26:01,679 --> 00:26:04,240
evo.com

663
00:26:04,240 --> 00:26:06,159
and open the file with perfect pdf

664
00:26:06,159 --> 00:26:08,640
premium for example

665
00:26:08,640 --> 00:26:11,440
and this is now a minimum minimal

666
00:26:11,440 --> 00:26:12,320
example for

667
00:26:12,320 --> 00:26:15,679
a pdf a form where the user would enter

668
00:26:15,679 --> 00:26:18,000
some maybe sensitive information like i

669
00:26:18,000 --> 00:26:21,120
don't know hello blackhead

670
00:26:21,200 --> 00:26:23,600
and if the user prints a document in

671
00:26:23,600 --> 00:26:25,200
this example we print to some system

672
00:26:25,200 --> 00:26:26,640
printer

673
00:26:26,640 --> 00:26:28,640
what happens is that in the background

674
00:26:28,640 --> 00:26:29,840
the

675
00:26:29,840 --> 00:26:32,880
all user input like help blackhead is

676
00:26:32,880 --> 00:26:38,960
suddenly sent to our server

677
00:26:38,960 --> 00:26:41,679
which is definitely not intended like

678
00:26:41,679 --> 00:26:43,679
this

679
00:26:43,679 --> 00:26:46,880
okay next let me show you how pdf

680
00:26:46,880 --> 00:26:47,919
documents can

681
00:26:47,919 --> 00:26:51,520
silently exfiltrate even arbitrary files

682
00:26:51,520 --> 00:26:52,559
on disk

683
00:26:52,559 --> 00:26:54,720
we do this by chaining multiple

684
00:26:54,720 --> 00:26:56,159
legitimate pdf

685
00:26:56,159 --> 00:26:59,760
futures together

686
00:27:00,320 --> 00:27:04,000
so how could we achieve this

687
00:27:05,200 --> 00:27:08,240
we do not only have to leak data to the

688
00:27:08,240 --> 00:27:09,919
internet which we have already seen

689
00:27:09,919 --> 00:27:12,720
we also need to read from local files

690
00:27:12,720 --> 00:27:14,320
right

691
00:27:14,320 --> 00:27:16,559
and to achieve this maybe let's have a

692
00:27:16,559 --> 00:27:17,600
closer look at

693
00:27:17,600 --> 00:27:20,640
the pdf standard

694
00:27:20,640 --> 00:27:23,600
so we've already seen pdf forms that can

695
00:27:23,600 --> 00:27:26,399
auto submit themselves

696
00:27:26,399 --> 00:27:29,679
however now the data to be submitted

697
00:27:29,679 --> 00:27:33,279
cannot only be a pdf form field value

698
00:27:33,279 --> 00:27:35,919
it can be a reference to arbitrary

699
00:27:35,919 --> 00:27:39,039
stream objects

700
00:27:41,120 --> 00:27:43,200
now if you study the pdf reference

701
00:27:43,200 --> 00:27:45,120
further you will find

702
00:27:45,120 --> 00:27:48,320
a part where it says every pdf stream on

703
00:27:48,320 --> 00:27:48,960
its part

704
00:27:48,960 --> 00:27:52,559
can reference to an external file

705
00:27:52,559 --> 00:27:55,440
okay you see where this goes basically

706
00:27:55,440 --> 00:27:55,679
we

707
00:27:55,679 --> 00:27:58,480
embed files on disk into the document

708
00:27:58,480 --> 00:27:58,960
and then

709
00:27:58,960 --> 00:28:02,000
exfiltrate them using the submit form

710
00:28:02,000 --> 00:28:05,440
action or using javascript

711
00:28:05,440 --> 00:28:09,279
to some external ul let me show you once

712
00:28:09,279 --> 00:28:09,919
again

713
00:28:09,919 --> 00:28:12,320
a demo

714
00:28:15,760 --> 00:28:19,279
in this example we have an embedded file

715
00:28:19,279 --> 00:28:22,080
that actually refers to an external file

716
00:28:22,080 --> 00:28:22,880
on disk

717
00:28:22,880 --> 00:28:24,799
sieve in our spin in here which is you

718
00:28:24,799 --> 00:28:26,720
know the windows um

719
00:28:26,720 --> 00:28:29,520
standard windows system file let's open

720
00:28:29,520 --> 00:28:30,799
the document

721
00:28:30,799 --> 00:28:33,919
in nuance power pdf for example

722
00:28:33,919 --> 00:28:36,480
and once the document is opened silently

723
00:28:36,480 --> 00:28:38,320
the content of that file on disk is

724
00:28:38,320 --> 00:28:39,679
leaked to our server

725
00:28:39,679 --> 00:28:45,120
evil.com which is pretty bad

726
00:28:45,120 --> 00:28:47,279
and this also works for other pdf

727
00:28:47,279 --> 00:28:49,679
viewers

728
00:28:50,720 --> 00:28:53,360
okay next one let me show you how pdf

729
00:28:53,360 --> 00:28:54,720
documents can leak

730
00:28:54,720 --> 00:28:58,799
ntlm hashes for windows user credentials

731
00:28:58,799 --> 00:29:02,159
and and why this works until today

732
00:29:02,159 --> 00:29:06,320
so in 1997 artist bangladesh posted a

733
00:29:06,320 --> 00:29:07,360
vulnerability

734
00:29:07,360 --> 00:29:10,080
in windows nt on the backtrack mailing

735
00:29:10,080 --> 00:29:10,559
list

736
00:29:10,559 --> 00:29:13,679
which can be summarized as follows any

737
00:29:13,679 --> 00:29:15,440
client program can trigger

738
00:29:15,440 --> 00:29:18,399
a connection to a malicious windows smb

739
00:29:18,399 --> 00:29:20,080
server

740
00:29:20,080 --> 00:29:21,520
now if the server requests

741
00:29:21,520 --> 00:29:23,840
authentication the windows client will

742
00:29:23,840 --> 00:29:24,880
automatically try

743
00:29:24,880 --> 00:29:28,799
to log on with a hash of the current

744
00:29:28,799 --> 00:29:31,039
user's credentials and this is a

745
00:29:31,039 --> 00:29:33,440
well-known design problem in the windows

746
00:29:33,440 --> 00:29:34,559
operating system

747
00:29:34,559 --> 00:29:38,480
i guess most of you are aware of this

748
00:29:38,480 --> 00:29:40,480
and what can be done with it while such

749
00:29:40,480 --> 00:29:41,679
cup captured

750
00:29:41,679 --> 00:29:43,840
ntm version 2 hashes which is the

751
00:29:43,840 --> 00:29:44,880
current version

752
00:29:44,880 --> 00:29:47,120
they allow for efficient offline

753
00:29:47,120 --> 00:29:48,720
cracking of the user password

754
00:29:48,720 --> 00:29:51,919
for example using using hashcat and also

755
00:29:51,919 --> 00:29:53,039
if you use

756
00:29:53,039 --> 00:29:56,080
or support previous versions

757
00:29:56,080 --> 00:29:58,960
of ntlm they are actually trivial to

758
00:29:58,960 --> 00:29:59,360
crack

759
00:29:59,360 --> 00:30:01,120
and they can be considered as broken

760
00:30:01,120 --> 00:30:02,640
anyway as shown by

761
00:30:02,640 --> 00:30:06,240
moxie modern spike and badass

762
00:30:06,240 --> 00:30:08,559
or you can also use ntlm hashes to

763
00:30:08,559 --> 00:30:10,880
perform relay attacks and authenticate

764
00:30:10,880 --> 00:30:11,840
under the user's

765
00:30:11,840 --> 00:30:15,279
identity as shown by ashora and tamo

766
00:30:15,279 --> 00:30:17,360
of course it's up to the configuration

767
00:30:17,360 --> 00:30:18,559
of the victims

768
00:30:18,559 --> 00:30:20,240
setup like password strengths and

769
00:30:20,240 --> 00:30:22,320
security policy if such attacks are

770
00:30:22,320 --> 00:30:25,039
actually feasible

771
00:30:25,760 --> 00:30:29,760
ok now in april 2018 checkpoint research

772
00:30:29,760 --> 00:30:31,360
showed that similar attacks can be

773
00:30:31,360 --> 00:30:34,960
performed with malicious pdf files

774
00:30:34,960 --> 00:30:37,200
and they found that the target of a

775
00:30:37,200 --> 00:30:38,240
go-to action

776
00:30:38,240 --> 00:30:40,880
can be set to a network share and

777
00:30:40,880 --> 00:30:42,960
thereby leaking credentials in the form

778
00:30:42,960 --> 00:30:43,440
of

779
00:30:43,440 --> 00:30:46,640
ntm hashes and this issue was actually

780
00:30:46,640 --> 00:30:47,520
quickly fixed

781
00:30:47,520 --> 00:30:51,440
in adobe and foxhead

782
00:30:51,440 --> 00:30:54,799
let's see if we can find some bypasses

783
00:30:54,799 --> 00:30:56,240
what do we need to do we need to

784
00:30:56,240 --> 00:30:58,960
systematically test all possible passes

785
00:30:58,960 --> 00:31:04,000
okay all possible events

786
00:31:04,000 --> 00:31:05,760
so for example by using various

787
00:31:05,760 --> 00:31:07,840
techniques to access a network share

788
00:31:07,840 --> 00:31:10,159
like by including it as an external

789
00:31:10,159 --> 00:31:13,679
content stream or by using all possible

790
00:31:13,679 --> 00:31:15,919
pdf actions that allow a file

791
00:31:15,919 --> 00:31:17,200
specification

792
00:31:17,200 --> 00:31:20,159
and and then use a network share as the

793
00:31:20,159 --> 00:31:21,200
string for file

794
00:31:21,200 --> 00:31:23,919
specification this may allow us to

795
00:31:23,919 --> 00:31:24,640
basically

796
00:31:24,640 --> 00:31:27,279
bypass protection mechanisms which works

797
00:31:27,279 --> 00:31:29,279
on a lot of years

798
00:31:29,279 --> 00:31:33,279
let me show you a demo for fox it

799
00:31:36,080 --> 00:31:38,720
okay trivial open action event and

800
00:31:38,720 --> 00:31:40,080
action number five

801
00:31:40,080 --> 00:31:42,399
which would usually be blocked by fox

802
00:31:42,399 --> 00:31:43,840
set

803
00:31:43,840 --> 00:31:46,880
but if you say the file is not going to

804
00:31:46,880 --> 00:31:48,559
be open but to print it

805
00:31:48,559 --> 00:31:51,039
then this network share will silently be

806
00:31:51,039 --> 00:31:51,760
opened

807
00:31:51,760 --> 00:31:55,360
in the background um by foxhead let's

808
00:31:55,360 --> 00:31:56,399
use responder

809
00:31:56,399 --> 00:31:59,679
as a malicious smb server

810
00:31:59,679 --> 00:32:02,240
to see if we get any incoming user

811
00:32:02,240 --> 00:32:03,279
credentials

812
00:32:03,279 --> 00:32:05,760
and here we go if we open the file and

813
00:32:05,760 --> 00:32:06,399
fox it

814
00:32:06,399 --> 00:32:10,879
we will see the hash of the user's

815
00:32:12,840 --> 00:32:15,200
password

816
00:32:15,200 --> 00:32:17,919
that's not too good either right our

817
00:32:17,919 --> 00:32:19,600
next class of attacks

818
00:32:19,600 --> 00:32:22,640
is data manipulation with

819
00:32:22,640 --> 00:32:24,559
lots of sub attacks once again that

820
00:32:24,559 --> 00:32:25,760
allow an attacker to

821
00:32:25,760 --> 00:32:29,679
modify pdf form values write local files

822
00:32:29,679 --> 00:32:32,399
on on the host file system or master

823
00:32:32,399 --> 00:32:33,200
display

824
00:32:33,200 --> 00:32:35,840
content of a document based on the

825
00:32:35,840 --> 00:32:36,480
opening

826
00:32:36,480 --> 00:32:39,120
application

827
00:32:39,679 --> 00:32:42,559
let's start with phone modification so

828
00:32:42,559 --> 00:32:44,000
our goal here is to create

829
00:32:44,000 --> 00:32:47,840
a pdf document that manipulates itself

830
00:32:47,840 --> 00:32:52,559
or to be more precisely its form values

831
00:32:52,559 --> 00:32:56,960
so the idea of this attack is as follows

832
00:32:56,960 --> 00:32:59,200
similar to form data leakage as

833
00:32:59,200 --> 00:33:00,880
described earlier the victim

834
00:33:00,880 --> 00:33:03,279
obtains a harmlessly looking pdf

835
00:33:03,279 --> 00:33:04,080
document

836
00:33:04,080 --> 00:33:06,720
from an attacker controlled source for

837
00:33:06,720 --> 00:33:07,360
example

838
00:33:07,360 --> 00:33:10,880
a text document and the goal of the

839
00:33:10,880 --> 00:33:12,000
attacker is now to

840
00:33:12,000 --> 00:33:14,000
dynamically and without knowledge of the

841
00:33:14,000 --> 00:33:16,080
victim manipulate

842
00:33:16,080 --> 00:33:19,360
form field data

843
00:33:19,440 --> 00:33:21,200
what's the impact well this could be

844
00:33:21,200 --> 00:33:22,480
abused to

845
00:33:22,480 --> 00:33:25,519
for example um get the victim into big

846
00:33:25,519 --> 00:33:27,039
trouble

847
00:33:27,039 --> 00:33:30,080
by making some some wrong

848
00:33:30,080 --> 00:33:31,919
fields and and get the victim into

849
00:33:31,919 --> 00:33:33,840
trouble of tax fraud suspicion

850
00:33:33,840 --> 00:33:36,320
but also maybe to gain a financial

851
00:33:36,320 --> 00:33:37,840
advantage

852
00:33:37,840 --> 00:33:40,159
for example by adding the attacker as

853
00:33:40,159 --> 00:33:41,039
recipient

854
00:33:41,039 --> 00:33:44,158
of a tax refund

855
00:33:44,320 --> 00:33:47,440
okay there are two ways to achieve this

856
00:33:47,440 --> 00:33:51,440
firstly we can use on the import

857
00:33:51,440 --> 00:33:54,799
data action so um form field values that

858
00:33:54,799 --> 00:33:55,679
can be

859
00:33:55,679 --> 00:33:58,960
set in a document using the import data

860
00:33:58,960 --> 00:34:00,799
action which basically imports

861
00:34:00,799 --> 00:34:03,760
form data from an external source like a

862
00:34:03,760 --> 00:34:04,480
url

863
00:34:04,480 --> 00:34:08,719
or from an embedded file and overwrites

864
00:34:08,719 --> 00:34:11,918
existing document form data and this

865
00:34:11,918 --> 00:34:13,520
action this could be triggered

866
00:34:13,520 --> 00:34:16,000
immediately maybe before printing using

867
00:34:16,000 --> 00:34:17,280
the catalogs

868
00:34:17,280 --> 00:34:20,480
will print event

869
00:34:20,480 --> 00:34:23,520
and if javascript is supported you can

870
00:34:23,520 --> 00:34:24,399
use

871
00:34:24,399 --> 00:34:28,079
javascript functions to set the content

872
00:34:28,079 --> 00:34:31,440
of specific form fields well this method

873
00:34:31,440 --> 00:34:32,399
has an advantage

874
00:34:32,399 --> 00:34:35,520
because you can first back up the

875
00:34:35,520 --> 00:34:39,440
old value and then later on restore

876
00:34:39,440 --> 00:34:42,239
the um the old value so the victim will

877
00:34:42,239 --> 00:34:42,879
not even

878
00:34:42,879 --> 00:34:46,159
realize that something has been changed

879
00:34:46,159 --> 00:34:49,839
let me show you a demo

880
00:34:53,839 --> 00:34:55,760
we have a will print and i did print

881
00:34:55,760 --> 00:34:56,879
event

882
00:34:56,879 --> 00:34:59,920
and both of them reference to

883
00:34:59,920 --> 00:35:03,200
javascript actions and first of all they

884
00:35:03,200 --> 00:35:04,480
back up the old

885
00:35:04,480 --> 00:35:08,320
form field value and then we set

886
00:35:08,320 --> 00:35:12,960
the value to to a new string

887
00:35:12,960 --> 00:35:16,480
and after printing we will

888
00:35:16,480 --> 00:35:20,400
restore the backed up value

889
00:35:21,200 --> 00:35:25,760
okay let's do this in adobe

890
00:35:25,760 --> 00:35:29,200
and we have the original value we

891
00:35:29,200 --> 00:35:31,680
it in this case we print it to to fox it

892
00:35:31,680 --> 00:35:32,560
so

893
00:35:32,560 --> 00:35:34,480
as a system printer so you can easily

894
00:35:34,480 --> 00:35:36,079
see the result

895
00:35:36,079 --> 00:35:38,400
and what we will see here is that when

896
00:35:38,400 --> 00:35:39,119
printed

897
00:35:39,119 --> 00:35:45,839
the modified string

898
00:35:46,640 --> 00:35:48,480
the modified string is contained in that

899
00:35:48,480 --> 00:35:51,040
document

900
00:35:51,040 --> 00:35:53,680
or in the printed version which can be

901
00:35:53,680 --> 00:35:54,320
bad

902
00:35:54,320 --> 00:35:59,440
in case of for example text forms

903
00:35:59,440 --> 00:36:01,599
can we do some more now let me show how

904
00:36:01,599 --> 00:36:03,599
pdf documents how they can write you

905
00:36:03,599 --> 00:36:08,320
and override arbitrary files on disk

906
00:36:08,320 --> 00:36:12,400
how to achieve this so as previously

907
00:36:12,400 --> 00:36:15,359
described the pdf standard enables

908
00:36:15,359 --> 00:36:16,240
documents

909
00:36:16,240 --> 00:36:19,359
to or to submit form data to external

910
00:36:19,359 --> 00:36:21,680
web service

911
00:36:21,680 --> 00:36:24,079
but technically the web service url is

912
00:36:24,079 --> 00:36:25,599
defined using a pdf

913
00:36:25,599 --> 00:36:29,280
file specification and this can also be

914
00:36:29,280 --> 00:36:32,320
a local file on disk

915
00:36:33,440 --> 00:36:36,160
so this ambiguity in the standard may be

916
00:36:36,160 --> 00:36:38,400
interpreted by implementations in such a

917
00:36:38,400 --> 00:36:38,960
way

918
00:36:38,960 --> 00:36:42,000
that they enable documents to submit

919
00:36:42,000 --> 00:36:45,040
pdf form data to a local file

920
00:36:45,040 --> 00:36:49,359
and thereby writing to this file on disk

921
00:36:50,000 --> 00:36:53,119
furthermore there are various javascript

922
00:36:53,119 --> 00:36:55,200
functions which are defined in the

923
00:36:55,200 --> 00:36:57,040
reference which allowed to write

924
00:36:57,040 --> 00:36:59,440
two local files so if successful this

925
00:36:59,440 --> 00:37:00,320
feature

926
00:37:00,320 --> 00:37:03,440
can be used to overwrite arbitrary files

927
00:37:03,440 --> 00:37:04,560
on the victim's

928
00:37:04,560 --> 00:37:07,119
file system and thereby purge their

929
00:37:07,119 --> 00:37:09,839
content

930
00:37:10,400 --> 00:37:13,119
demo time

931
00:37:17,599 --> 00:37:21,200
okay we have basically

932
00:37:21,200 --> 00:37:24,640
an on close action

933
00:37:24,720 --> 00:37:27,359
um and what it does it is submits a form

934
00:37:27,359 --> 00:37:28,000
to drive

935
00:37:28,000 --> 00:37:32,240
e with the file name blackhead.evil

936
00:37:32,240 --> 00:37:35,359
on drive e we don't have any file yet

937
00:37:35,359 --> 00:37:38,560
let's try to do this in master pdf let's

938
00:37:38,560 --> 00:37:40,800
close our malicious document again

939
00:37:40,800 --> 00:37:43,680
and then let's see if the submitted form

940
00:37:43,680 --> 00:37:46,560
was submitted to a local file on disk

941
00:37:46,560 --> 00:37:48,560
okay you cannot write arbitrary content

942
00:37:48,560 --> 00:37:50,000
but you can control

943
00:37:50,000 --> 00:37:53,839
parts of the content by changing the

944
00:37:53,839 --> 00:37:56,720
form field values and you can of course

945
00:37:56,720 --> 00:37:58,160
overwrite

946
00:37:58,160 --> 00:38:05,520
existing content which could be bad okay

947
00:38:05,520 --> 00:38:07,920
so the last attack in this attack class

948
00:38:07,920 --> 00:38:10,560
is content masking

949
00:38:10,560 --> 00:38:13,520
now i will craft a document that renders

950
00:38:13,520 --> 00:38:15,040
different content

951
00:38:15,040 --> 00:38:18,320
in different pdf viewers

952
00:38:18,320 --> 00:38:20,079
this can be used for example to show

953
00:38:20,079 --> 00:38:21,440
different content to

954
00:38:21,440 --> 00:38:24,720
multiple reviewers of an academic paper

955
00:38:24,720 --> 00:38:26,640
or to trick content filters and and

956
00:38:26,640 --> 00:38:27,760
search engines

957
00:38:27,760 --> 00:38:30,640
which now index a different text than

958
00:38:30,640 --> 00:38:31,280
the one

959
00:38:31,280 --> 00:38:35,520
that is shown when opening the document

960
00:38:35,920 --> 00:38:38,079
to achieve this we systematically

961
00:38:38,079 --> 00:38:39,200
studied the

962
00:38:39,200 --> 00:38:43,520
pdf standard for ambiguities

963
00:38:44,800 --> 00:38:46,960
ambiguities at various levels at the

964
00:38:46,960 --> 00:38:48,480
syntax and structural

965
00:38:48,480 --> 00:38:51,119
level that lead to different parts of

966
00:38:51,119 --> 00:38:53,359
the document actually being processed by

967
00:38:53,359 --> 00:38:54,000
different

968
00:38:54,000 --> 00:38:57,280
pdf implementations

969
00:38:57,280 --> 00:39:00,640
for example pdf objects before

970
00:39:00,640 --> 00:39:03,920
the pdf header or after any end of

971
00:39:03,920 --> 00:39:04,800
filemarker

972
00:39:04,800 --> 00:39:07,119
they may not be processed by certain

973
00:39:07,119 --> 00:39:08,880
applications

974
00:39:08,880 --> 00:39:11,280
or a pdf file can contain yet another

975
00:39:11,280 --> 00:39:12,079
document

976
00:39:12,079 --> 00:39:15,119
as an embedded file and then using some

977
00:39:15,119 --> 00:39:16,240
tricks it may become

978
00:39:16,240 --> 00:39:19,920
unclear which one actually to show

979
00:39:19,920 --> 00:39:23,200
or what about objects um

980
00:39:23,200 --> 00:39:25,839
with with duplicate object numbers or

981
00:39:25,839 --> 00:39:27,440
objects that are not listed in a

982
00:39:27,440 --> 00:39:30,320
cross reference table also it's unclear

983
00:39:30,320 --> 00:39:32,160
how content streams should be parsed if

984
00:39:32,160 --> 00:39:33,760
their length value does not match the

985
00:39:33,760 --> 00:39:34,560
offset

986
00:39:34,560 --> 00:39:37,200
of the end stream marker i will show an

987
00:39:37,200 --> 00:39:39,200
example in a second

988
00:39:39,200 --> 00:39:41,440
and finally there are some edge cases on

989
00:39:41,440 --> 00:39:43,920
the syntax level of content streams like

990
00:39:43,920 --> 00:39:47,599
uppercase lowercase and so on

991
00:39:48,000 --> 00:39:51,760
so those attacks or

992
00:39:51,760 --> 00:39:54,880
those edge cases they lead to

993
00:39:54,880 --> 00:39:57,920
33 single edge case variants

994
00:39:57,920 --> 00:40:00,320
and each of them renders differently in

995
00:40:00,320 --> 00:40:02,160
different viewers

996
00:40:02,160 --> 00:40:06,000
just let me give you one example

997
00:40:06,000 --> 00:40:09,119
so a pdf stream usually or has to start

998
00:40:09,119 --> 00:40:10,079
with the keyboard

999
00:40:10,079 --> 00:40:12,720
stream and has to end with the delimiter

1000
00:40:12,720 --> 00:40:14,400
and stream

1001
00:40:14,400 --> 00:40:16,640
higher the stream lengths must also be

1002
00:40:16,640 --> 00:40:17,599
defined

1003
00:40:17,599 --> 00:40:20,640
which can lead to ambiguities should i

1004
00:40:20,640 --> 00:40:22,000
display the

1005
00:40:22,000 --> 00:40:24,560
red text or the blue text okay so in

1006
00:40:24,560 --> 00:40:25,359
this example

1007
00:40:25,359 --> 00:40:28,240
half of the tested viewers they respect

1008
00:40:28,240 --> 00:40:28,560
the

1009
00:40:28,560 --> 00:40:30,400
delimiter and show the red content

1010
00:40:30,400 --> 00:40:32,319
stream while the other half

1011
00:40:32,319 --> 00:40:34,560
of the tested viewers they showed the

1012
00:40:34,560 --> 00:40:35,760
blue content stream

1013
00:40:35,760 --> 00:40:39,440
based on the length and now we found

1014
00:40:39,440 --> 00:40:42,720
62 further edge cases that i said

1015
00:40:42,720 --> 00:40:45,760
lead to different content being shown by

1016
00:40:45,760 --> 00:40:48,800
different viewers

1017
00:40:48,800 --> 00:40:52,000
and in some cases only one viewer shows

1018
00:40:52,000 --> 00:40:53,839
a certain content

1019
00:40:53,839 --> 00:40:55,599
however note that it's also possible to

1020
00:40:55,599 --> 00:40:58,800
to chain those edge cases together

1021
00:40:58,800 --> 00:41:01,200
within one single document to achieve

1022
00:41:01,200 --> 00:41:04,160
the same effect

1023
00:41:04,839 --> 00:41:08,720
okay demo time

1024
00:41:10,400 --> 00:41:14,000
so we have some edge case examples um

1025
00:41:14,000 --> 00:41:18,160
in this case um for adobe and you see

1026
00:41:18,160 --> 00:41:21,119
a different string and a different color

1027
00:41:21,119 --> 00:41:22,079
basically

1028
00:41:22,079 --> 00:41:25,839
for adobe compared to foxy or or pdf

1029
00:41:25,839 --> 00:41:26,880
exchange

1030
00:41:26,880 --> 00:41:30,400
or nitro reader

1031
00:41:30,480 --> 00:41:33,680
which can be problematic in the context

1032
00:41:33,680 --> 00:41:37,040
where we assume that a pdf document

1033
00:41:37,040 --> 00:41:39,040
renders exactly the same content and not

1034
00:41:39,040 --> 00:41:40,640
something completely different

1035
00:41:40,640 --> 00:41:43,119
so for example in the case of a business

1036
00:41:43,119 --> 00:41:45,599
contract

1037
00:41:47,040 --> 00:41:49,520
okay this is what you have been waiting

1038
00:41:49,520 --> 00:41:51,760
for our last class of attacks is the

1039
00:41:51,760 --> 00:41:54,240
execution of arbitrary code on the

1040
00:41:54,240 --> 00:41:56,560
victim's machine basically by silently

1041
00:41:56,560 --> 00:41:57,359
launching

1042
00:41:57,359 --> 00:42:00,839
an executable from the malicious

1043
00:42:00,839 --> 00:42:02,560
document

1044
00:42:02,560 --> 00:42:05,760
we do this using the launch action

1045
00:42:05,760 --> 00:42:08,720
now what is the launch action the launch

1046
00:42:08,720 --> 00:42:09,119
action

1047
00:42:09,119 --> 00:42:11,839
is a somewhat special pdf action that

1048
00:42:11,839 --> 00:42:13,839
according to the standard

1049
00:42:13,839 --> 00:42:16,560
launches an application or opens or

1050
00:42:16,560 --> 00:42:17,200
prints

1051
00:42:17,200 --> 00:42:20,880
a document that sounds interesting right

1052
00:42:20,880 --> 00:42:22,880
descender does not provide any security

1053
00:42:22,880 --> 00:42:24,640
considerations regarding this

1054
00:42:24,640 --> 00:42:27,200
obviously dangerous feature and it even

1055
00:42:27,200 --> 00:42:28,880
specifies how to pass command line

1056
00:42:28,880 --> 00:42:32,400
parameters to the launched application

1057
00:42:32,400 --> 00:42:34,880
therefore it's somewhat fair to say that

1058
00:42:34,880 --> 00:42:35,520
pdf

1059
00:42:35,520 --> 00:42:38,560
offers code execution by design

1060
00:42:38,560 --> 00:42:41,119
if the standard is implemented in a

1061
00:42:41,119 --> 00:42:45,280
straightforward manner

1062
00:42:45,280 --> 00:42:48,240
so how to test for this once again we

1063
00:42:48,240 --> 00:42:48,640
use

1064
00:42:48,640 --> 00:42:51,760
all possible pdf events

1065
00:42:51,760 --> 00:42:55,119
this time to call a launch action with

1066
00:42:55,119 --> 00:42:58,800
the open parameter

1067
00:42:58,800 --> 00:43:01,040
and our target here is an executable

1068
00:43:01,040 --> 00:43:02,720
which is either embedded within the

1069
00:43:02,720 --> 00:43:07,280
pdf document or provided as a local file

1070
00:43:07,280 --> 00:43:10,079
so let's see if in 2020 we still find

1071
00:43:10,079 --> 00:43:12,319
pdf used that do not ask the user

1072
00:43:12,319 --> 00:43:15,359
before launching arbitrary executables

1073
00:43:15,359 --> 00:43:17,760
this is your last time to drink so make

1074
00:43:17,760 --> 00:43:20,240
it double

1075
00:43:23,280 --> 00:43:26,880
as you can see simple code execution

1076
00:43:26,880 --> 00:43:29,920
a by design in a neutral pdf

1077
00:43:29,920 --> 00:43:33,680
reader in neutral pro in pdf studio

1078
00:43:33,680 --> 00:43:34,560
viewer

1079
00:43:34,560 --> 00:43:36,640
pdf studio pro and also in some older

1080
00:43:36,640 --> 00:43:39,520
versions of pdf architect

1081
00:43:39,520 --> 00:43:42,400
um so yeah life can be simple right no

1082
00:43:42,400 --> 00:43:44,319
power overflows no nothing

1083
00:43:44,319 --> 00:43:48,720
simply abusing legitimate features

1084
00:43:49,680 --> 00:43:52,160
okay let me come to an evolution so you

1085
00:43:52,160 --> 00:43:52,800
can see

1086
00:43:52,800 --> 00:43:54,560
which attacks are actually possible on

1087
00:43:54,560 --> 00:43:57,839
which pdf view is

1088
00:43:57,839 --> 00:44:01,200
so we tested 28 popular pdf processing

1089
00:44:01,200 --> 00:44:03,200
applications basically all pdf

1090
00:44:03,200 --> 00:44:04,319
applications for the

1091
00:44:04,319 --> 00:44:07,520
major platforms windows mac os linux and

1092
00:44:07,520 --> 00:44:09,520
web browsers because they can also

1093
00:44:09,520 --> 00:44:14,240
view and display pdf documents natively

1094
00:44:14,240 --> 00:44:16,319
and if a fewer version like adobe reader

1095
00:44:16,319 --> 00:44:18,400
and an agita version like adobe pro was

1096
00:44:18,400 --> 00:44:19,920
available we tested both

1097
00:44:19,920 --> 00:44:21,359
because the support is somewhat

1098
00:44:21,359 --> 00:44:24,240
different feature set

1099
00:44:24,240 --> 00:44:27,839
okay now our evaluation shows that 26

1100
00:44:27,839 --> 00:44:30,480
out of 28 tested applications are

1101
00:44:30,480 --> 00:44:32,079
vulnerable to at least

1102
00:44:32,079 --> 00:44:36,960
one attack so for example infinite loops

1103
00:44:36,960 --> 00:44:38,800
in one variant or another they were

1104
00:44:38,800 --> 00:44:40,560
possible in almost

1105
00:44:40,560 --> 00:44:43,839
any reader resulting in the application

1106
00:44:43,839 --> 00:44:47,440
either to hang or to crash

1107
00:44:47,920 --> 00:44:50,319
and the same holds for deflate bombs

1108
00:44:50,319 --> 00:44:52,000
which are somewhat hard to protect

1109
00:44:52,000 --> 00:44:52,720
against

1110
00:44:52,720 --> 00:44:54,720
if you do not have any strict resource

1111
00:44:54,720 --> 00:44:56,720
limitations

1112
00:44:56,720 --> 00:44:58,880
and using very various techniques we

1113
00:44:58,880 --> 00:44:59,839
could craft

1114
00:44:59,839 --> 00:45:02,640
pdf documents that suddenly phone home

1115
00:45:02,640 --> 00:45:04,560
once the document is being opened

1116
00:45:04,560 --> 00:45:08,319
in 16 of the tested readers

1117
00:45:08,319 --> 00:45:11,200
user input in pdf forms can be silently

1118
00:45:11,200 --> 00:45:11,760
leaked

1119
00:45:11,760 --> 00:45:14,480
to an attacker controlled server for 11

1120
00:45:14,480 --> 00:45:17,680
of the tested applications

1121
00:45:17,760 --> 00:45:21,119
we were able to silently exfiltrate

1122
00:45:21,119 --> 00:45:23,040
files on disk by chaining together

1123
00:45:23,040 --> 00:45:24,400
legitimate pdf

1124
00:45:24,400 --> 00:45:27,599
features in six applications for three

1125
00:45:27,599 --> 00:45:28,640
of them however there are some

1126
00:45:28,640 --> 00:45:32,079
limitations regarding the file type

1127
00:45:32,079 --> 00:45:34,880
12 applications they suddenly leaked the

1128
00:45:34,880 --> 00:45:36,240
user's ntrm

1129
00:45:36,240 --> 00:45:39,040
hashes so we found various bypasses to

1130
00:45:39,040 --> 00:45:39,760
existing

1131
00:45:39,760 --> 00:45:43,520
patches for example for foxit

1132
00:45:44,079 --> 00:45:46,400
now forms that manipulate themselves

1133
00:45:46,400 --> 00:45:48,480
using the import action for example

1134
00:45:48,480 --> 00:45:51,680
or javascript by changing their form

1135
00:45:51,680 --> 00:45:52,720
values

1136
00:45:52,720 --> 00:45:54,400
uh for example when printed they were

1137
00:45:54,400 --> 00:45:56,480
supported only by four readers even so

1138
00:45:56,480 --> 00:45:57,440
this is

1139
00:45:57,440 --> 00:46:01,760
actually a standard pdf ingredient

1140
00:46:01,760 --> 00:46:04,960
but it didn't work very often okay

1141
00:46:04,960 --> 00:46:08,079
but file system access or file right

1142
00:46:08,079 --> 00:46:09,760
access so writing to

1143
00:46:09,760 --> 00:46:12,160
arbitrary files on disk worked for two

1144
00:46:12,160 --> 00:46:13,520
applications which is

1145
00:46:13,520 --> 00:46:16,160
pretty bad and for six viewers we could

1146
00:46:16,160 --> 00:46:17,119
craft a document

1147
00:46:17,119 --> 00:46:19,920
that renders different content in each

1148
00:46:19,920 --> 00:46:23,040
and every other pdf viewer

1149
00:46:23,040 --> 00:46:24,960
for the others you basically have to

1150
00:46:24,960 --> 00:46:26,880
chain edge cases together to achieve the

1151
00:46:26,880 --> 00:46:29,280
same effect

1152
00:46:29,280 --> 00:46:30,960
and in four applications we had

1153
00:46:30,960 --> 00:46:32,880
straightforward call execution based on

1154
00:46:32,880 --> 00:46:33,280
the

1155
00:46:33,280 --> 00:46:35,520
launch action for another three linux

1156
00:46:35,520 --> 00:46:37,520
based viewers this works only

1157
00:46:37,520 --> 00:46:40,560
in the case of mono executables so the

1158
00:46:40,560 --> 00:46:43,520
impact is a bit limited

1159
00:46:43,520 --> 00:46:45,839
okay now the takeaway here is that

1160
00:46:45,839 --> 00:46:47,359
virtually

1161
00:46:47,359 --> 00:46:50,400
all tested pdf applications to have at

1162
00:46:50,400 --> 00:46:50,880
least

1163
00:46:50,880 --> 00:46:54,400
some issues right and pdf viewers that

1164
00:46:54,400 --> 00:46:56,880
only implement a minimal subset of the

1165
00:46:56,880 --> 00:46:57,920
pdf standard

1166
00:46:57,920 --> 00:47:00,480
they're usually less vulnerable so such

1167
00:47:00,480 --> 00:47:01,680
a subset without any

1168
00:47:01,680 --> 00:47:04,880
fancy features that's usually enough to

1169
00:47:04,880 --> 00:47:08,079
simply display a document as shown for

1170
00:47:08,079 --> 00:47:10,400
example by the pdf implementations for

1171
00:47:10,400 --> 00:47:15,119
mac os and linux but also web browsers

1172
00:47:15,359 --> 00:47:17,440
okay we reported all those issues to the

1173
00:47:17,440 --> 00:47:18,560
affected vendors

1174
00:47:18,560 --> 00:47:22,000
back in january some of them are fixed

1175
00:47:22,000 --> 00:47:22,400
and

1176
00:47:22,400 --> 00:47:25,839
some of them work until today

1177
00:47:26,480 --> 00:47:29,839
now how would you fix those issues

1178
00:47:29,839 --> 00:47:33,760
so i would say to counter infant loops

1179
00:47:33,760 --> 00:47:36,880
on constructs that lead to cycles or to

1180
00:47:36,880 --> 00:47:39,200
recursion they must be prohibited in

1181
00:47:39,200 --> 00:47:40,319
implementations

1182
00:47:40,319 --> 00:47:42,559
and also ambiguous formulations that

1183
00:47:42,559 --> 00:47:43,520
should be removed

1184
00:47:43,520 --> 00:47:45,680
from the standard which could also help

1185
00:47:45,680 --> 00:47:46,559
to prevent

1186
00:47:46,559 --> 00:47:49,680
content masking attacks

1187
00:47:49,680 --> 00:47:52,559
also why not limiting the resources a

1188
00:47:52,559 --> 00:47:53,520
single document

1189
00:47:53,520 --> 00:47:56,240
is allowed to consume similar to a

1190
00:47:56,240 --> 00:47:57,440
website

1191
00:47:57,440 --> 00:48:00,160
in a modern web browser thereby a

1192
00:48:00,160 --> 00:48:01,200
malicious document

1193
00:48:01,200 --> 00:48:03,359
would not affect the whole application

1194
00:48:03,359 --> 00:48:07,599
or the whole operating system anymore

1195
00:48:07,599 --> 00:48:10,160
now while our attacks do not depend on

1196
00:48:10,160 --> 00:48:11,119
javascript

1197
00:48:11,119 --> 00:48:13,920
a lot of native pdf feature features

1198
00:48:13,920 --> 00:48:14,559
they are

1199
00:48:14,559 --> 00:48:18,000
redundantly implemented in javascript

1200
00:48:18,000 --> 00:48:20,240
thereby providing an even larger attack

1201
00:48:20,240 --> 00:48:21,680
surface

1202
00:48:21,680 --> 00:48:23,200
so let's let's remove or restrict

1203
00:48:23,200 --> 00:48:25,280
javascript and also given that

1204
00:48:25,280 --> 00:48:27,200
pdf is supposed to be a format for

1205
00:48:27,200 --> 00:48:29,200
portable documents

1206
00:48:29,200 --> 00:48:32,000
we'd argue that the need to embed really

1207
00:48:32,000 --> 00:48:32,559
a full

1208
00:48:32,559 --> 00:48:33,839
programming language is somewhat

1209
00:48:33,839 --> 00:48:36,000
debatable

1210
00:48:36,000 --> 00:48:38,800
now finally and most importantly secure

1211
00:48:38,800 --> 00:48:41,119
pdf processing applications

1212
00:48:41,119 --> 00:48:43,359
they should identify and cut the

1213
00:48:43,359 --> 00:48:46,160
dangerous paths in malicious documents

1214
00:48:46,160 --> 00:48:48,960
so most of our attacks they took a pass

1215
00:48:48,960 --> 00:48:50,240
from an event

1216
00:48:50,240 --> 00:48:52,480
down to a file handle and if this path

1217
00:48:52,480 --> 00:48:53,920
was not blocked or

1218
00:48:53,920 --> 00:48:55,760
required user content the attack was

1219
00:48:55,760 --> 00:48:57,359
successful

1220
00:48:57,359 --> 00:48:59,200
now many applications they blocked

1221
00:48:59,200 --> 00:49:00,559
particular passes

1222
00:49:00,559 --> 00:49:02,240
but they failed to block them all

1223
00:49:02,240 --> 00:49:04,559
because they were not if there was no

1224
00:49:04,559 --> 00:49:08,160
systematic protection approach

1225
00:49:09,040 --> 00:49:12,240
okay let me come to a conclusion

1226
00:49:12,240 --> 00:49:15,200
so pdf is more than a simple document

1227
00:49:15,200 --> 00:49:16,400
format pdf

1228
00:49:16,400 --> 00:49:18,319
is really really complex and it's got a

1229
00:49:18,319 --> 00:49:20,640
lot of dangerous features

1230
00:49:20,640 --> 00:49:23,760
applications that blindly implement the

1231
00:49:23,760 --> 00:49:24,400
standard

1232
00:49:24,400 --> 00:49:27,200
they're somewhat flawed by design so if

1233
00:49:27,200 --> 00:49:29,119
you're the developer of a pdf

1234
00:49:29,119 --> 00:49:30,079
application

1235
00:49:30,079 --> 00:49:32,720
be careful which standard features you

1236
00:49:32,720 --> 00:49:33,200
actually

1237
00:49:33,200 --> 00:49:35,919
want to include

1238
00:49:36,319 --> 00:49:39,040
also even in 2020 you can get code

1239
00:49:39,040 --> 00:49:40,400
execution based on

1240
00:49:40,400 --> 00:49:45,119
pure logic chain exportation

1241
00:49:45,119 --> 00:49:47,680
okay thank you you can find all the

1242
00:49:47,680 --> 00:49:49,920
exploit files on github as well as a

1243
00:49:49,920 --> 00:49:51,599
comprehensive test suite

1244
00:49:51,599 --> 00:49:54,079
in order to test further pdf

1245
00:49:54,079 --> 00:49:55,119
implementations

1246
00:49:55,119 --> 00:49:58,960
for vulnerabilities i really really

1247
00:49:58,960 --> 00:50:00,880
really hope to see you all next year

1248
00:50:00,880 --> 00:50:04,960
in vegas

