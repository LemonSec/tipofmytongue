1
00:00:04,280 --> 00:00:16,400
[Music]

2
00:00:16,400 --> 00:00:16,800
hi

3
00:00:16,800 --> 00:00:19,119
everyone today i will show you how i

4
00:00:19,119 --> 00:00:21,119
exploited samsung's secure boot to

5
00:00:21,119 --> 00:00:23,199
retrieve sensitive data in the galaxy

6
00:00:23,199 --> 00:00:25,680
s10

7
00:00:26,000 --> 00:00:28,240
my name is jeff zhao i have been playing

8
00:00:28,240 --> 00:00:29,039
ctf in

9
00:00:29,039 --> 00:00:31,920
hikong ctf team for 10 years i am also a

10
00:00:31,920 --> 00:00:33,600
member of changeroot

11
00:00:33,600 --> 00:00:36,320
taiwan's privacy security studying group

12
00:00:36,320 --> 00:00:37,600
i now focus on

13
00:00:37,600 --> 00:00:41,360
mobile and iot security

14
00:00:42,000 --> 00:00:44,800
this is my agenda in the beginning i

15
00:00:44,800 --> 00:00:46,640
will play a demo video to show a

16
00:00:46,640 --> 00:00:48,719
scenario where the vulnerabilities

17
00:00:48,719 --> 00:00:51,920
could be exploited

18
00:00:51,920 --> 00:00:54,399
then i will introduce how samsung

19
00:00:54,399 --> 00:00:56,640
enhanced the security in android

20
00:00:56,640 --> 00:01:01,120
with their own framework knox

21
00:01:01,120 --> 00:01:03,199
and a quick glance to see previous

22
00:01:03,199 --> 00:01:04,159
research on

23
00:01:04,159 --> 00:01:07,280
knox framework with the background

24
00:01:07,280 --> 00:01:08,240
knowledge

25
00:01:08,240 --> 00:01:10,240
i will explain the vulnerabilities i

26
00:01:10,240 --> 00:01:12,960
found and how to explore secure boots

27
00:01:12,960 --> 00:01:16,320
by these vulnerabilities

28
00:01:16,479 --> 00:01:19,759
and finally i will discuss how further

29
00:01:19,759 --> 00:01:21,280
damage can be caused

30
00:01:21,280 --> 00:01:24,560
after exploiting secure boot even

31
00:01:24,560 --> 00:01:27,840
without the passcode

32
00:01:29,439 --> 00:01:41,839
before we start let's watch a demo video

33
00:01:52,840 --> 00:01:55,840
yes

34
00:02:03,810 --> 00:02:06,980
[Music]

35
00:02:12,550 --> 00:02:15,749
[Music]

36
00:02:22,240 --> 00:02:25,330
[Music]

37
00:02:30,030 --> 00:02:33,099
[Music]

38
00:02:34,840 --> 00:02:37,840
so

39
00:02:39,120 --> 00:03:01,779
[Music]

40
00:03:19,140 --> 00:03:22,279
[Music]

41
00:03:30,840 --> 00:03:33,840
baby

42
00:03:37,200 --> 00:03:39,120
let me start by giving you a brief

43
00:03:39,120 --> 00:03:41,280
introduction of the samsung security

44
00:03:41,280 --> 00:03:43,760
framework

45
00:03:44,840 --> 00:03:47,280
next

46
00:03:47,280 --> 00:03:50,480
next is a huge complicated whole system

47
00:03:50,480 --> 00:03:53,200
security enhancement based on trust zone

48
00:03:53,200 --> 00:03:56,319
it contains tmr trust zone-based

49
00:03:56,319 --> 00:03:58,840
integrity measurement

50
00:03:58,840 --> 00:04:03,519
architecture real-time kernel protection

51
00:04:03,519 --> 00:04:07,439
tema periodic kernel measurement

52
00:04:07,439 --> 00:04:10,319
seminars enhancement and many other

53
00:04:10,319 --> 00:04:12,480
scenes to prevent privileged exclamation

54
00:04:12,480 --> 00:04:17,279
and authorize access to the phone's data

55
00:04:17,279 --> 00:04:20,160
since we are taking the bootloader we

56
00:04:20,160 --> 00:04:20,560
will

57
00:04:20,560 --> 00:04:23,280
only discuss the most relevant part

58
00:04:23,280 --> 00:04:26,000
secure boot

59
00:04:27,360 --> 00:04:29,840
the enjoyable procedure starts from the

60
00:04:29,840 --> 00:04:30,479
primary

61
00:04:30,479 --> 00:04:34,400
road also called pvl it will load the

62
00:04:34,400 --> 00:04:35,280
second stage

63
00:04:35,280 --> 00:04:38,400
bootloader in samsung devices

64
00:04:38,400 --> 00:04:41,759
it is called secure boot

65
00:04:41,759 --> 00:04:45,280
also known as as food

66
00:04:45,280 --> 00:04:47,440
secure boot will bring up the operating

67
00:04:47,440 --> 00:04:48,560
system from the boot

68
00:04:48,560 --> 00:04:51,600
image each boot stage will verify the

69
00:04:51,600 --> 00:04:54,080
signature before proceeding to the next

70
00:04:54,080 --> 00:04:57,919
stage the verified key is stored in

71
00:04:57,919 --> 00:05:01,120
hardware doing manufactory

72
00:05:01,120 --> 00:05:03,600
primary bloater only runs secure boot if

73
00:05:03,600 --> 00:05:06,240
the signature is valid

74
00:05:06,240 --> 00:05:09,120
we cannot change the primary bloater

75
00:05:09,120 --> 00:05:09,759
thus

76
00:05:09,759 --> 00:05:11,840
the phone can only put the official

77
00:05:11,840 --> 00:05:14,960
secure boot image

78
00:05:14,960 --> 00:05:17,919
next secure boot will launch the boot

79
00:05:17,919 --> 00:05:19,759
image of the recovery image

80
00:05:19,759 --> 00:05:23,039
if its signature is valid

81
00:05:23,039 --> 00:05:26,560
if the signature is not valid

82
00:05:26,560 --> 00:05:28,880
secure boot will put the image for

83
00:05:28,880 --> 00:05:30,800
additional action

84
00:05:30,800 --> 00:05:35,520
which is blowing the next bit

85
00:05:37,120 --> 00:05:39,360
what will happen if the nut splitter is

86
00:05:39,360 --> 00:05:41,280
set

87
00:05:41,280 --> 00:05:43,680
the provision of samsung's warranty

88
00:05:43,680 --> 00:05:46,000
depends on the nut speed

89
00:05:46,000 --> 00:05:49,199
also called the warranty bit

90
00:05:49,199 --> 00:05:52,240
trying to put an official butter image

91
00:05:52,240 --> 00:05:56,080
will temper with the nut speed

92
00:05:56,080 --> 00:05:58,960
it is a one-time writable memory there

93
00:05:58,960 --> 00:06:00,400
is no way to recover

94
00:06:00,400 --> 00:06:04,000
it some services in truss long

95
00:06:04,000 --> 00:06:07,600
cannot be launched if the bit is set

96
00:06:07,600 --> 00:06:11,680
such as lux container senson pay

97
00:06:11,680 --> 00:06:15,120
and trusted key store

98
00:06:17,680 --> 00:06:21,039
after the galaxy s9 samsung equipped the

99
00:06:21,039 --> 00:06:23,360
storage with default settings

100
00:06:23,360 --> 00:06:25,520
only after the first time unlocking the

101
00:06:25,520 --> 00:06:27,120
screen the storage

102
00:06:27,120 --> 00:06:30,319
gets decrypted

103
00:06:30,479 --> 00:06:32,479
the encryption key is stored in the

104
00:06:32,479 --> 00:06:34,639
traditional application

105
00:06:34,639 --> 00:06:37,520
we cannot decrypt the storage without

106
00:06:37,520 --> 00:06:39,280
unlocking the phone

107
00:06:39,280 --> 00:06:49,840
even if if we have good privilege

108
00:06:50,960 --> 00:06:53,919
other than the storage encryption key

109
00:06:53,919 --> 00:06:56,479
there is lots of critical information

110
00:06:56,479 --> 00:07:00,160
that can only be decrypted by translate

111
00:07:00,160 --> 00:07:03,440
once the null speed is set most of the

112
00:07:03,440 --> 00:07:06,880
length will no longer work

113
00:07:08,080 --> 00:07:10,800
this is a diagram of untranslated

114
00:07:10,800 --> 00:07:12,639
exception level

115
00:07:12,639 --> 00:07:14,560
transition router method only gets

116
00:07:14,560 --> 00:07:17,360
exception level 1 in non-secure world

117
00:07:17,360 --> 00:07:19,759
the data encrypted by trustzone cannot

118
00:07:19,759 --> 00:07:20,720
be decrypted

119
00:07:20,720 --> 00:07:24,319
if not speed is set

120
00:07:24,319 --> 00:07:26,800
the way to get sensitive data is

121
00:07:26,800 --> 00:07:29,199
privately escalation to exception level

122
00:07:29,199 --> 00:07:29,680
1

123
00:07:29,680 --> 00:07:33,919
in secure world or tweak the device into

124
00:07:33,919 --> 00:07:35,120
thinking that

125
00:07:35,120 --> 00:07:39,039
the nut speed is still safe

126
00:07:40,160 --> 00:07:42,639
there has been a lot of research into

127
00:07:42,639 --> 00:07:45,120
breaking not exportation

128
00:07:45,120 --> 00:07:49,039
i will show you some previous work

129
00:07:50,560 --> 00:07:54,400
first at blackhead usa 2017

130
00:07:54,400 --> 00:07:56,639
returns me defeated knox real-time

131
00:07:56,639 --> 00:07:58,960
criminal protection

132
00:07:58,960 --> 00:08:01,440
which is designed to prevent privileged

133
00:08:01,440 --> 00:08:02,240
exclamation

134
00:08:02,240 --> 00:08:05,360
from non-secure war exception level 0 to

135
00:08:05,360 --> 00:08:06,879
non-secure war exception

136
00:08:06,879 --> 00:08:09,599
level 1

137
00:08:11,520 --> 00:08:15,680
and second at blair hague europe 2017

138
00:08:15,680 --> 00:08:18,080
then should never demo the vulnerability

139
00:08:18,080 --> 00:08:20,240
to explore a samsung paired translator

140
00:08:20,240 --> 00:08:22,240
in truss zone

141
00:08:22,240 --> 00:08:24,479
resulting in yes it's collected

142
00:08:24,479 --> 00:08:26,560
privilege level from non-secure world

143
00:08:26,560 --> 00:08:28,160
exception level zero

144
00:08:28,160 --> 00:08:32,479
to secure war exception level one

145
00:08:33,919 --> 00:08:37,120
last year quarks never demoed some

146
00:08:37,120 --> 00:08:38,240
amazing work

147
00:08:38,240 --> 00:08:39,760
that's shattered the trust zone

148
00:08:39,760 --> 00:08:42,559
protection resulting in privileged

149
00:08:42,559 --> 00:08:44,159
escalation all the way

150
00:08:44,159 --> 00:08:46,880
from non-secure world exception level 0

151
00:08:46,880 --> 00:08:47,760
to secure

152
00:08:47,760 --> 00:08:51,040
exception level 3.

153
00:08:53,519 --> 00:08:56,560
but all of this work

154
00:08:56,560 --> 00:08:59,279
means at least non-secure exception

155
00:08:59,279 --> 00:09:02,320
level reload privilege

156
00:09:02,399 --> 00:09:05,200
so why if the device is turned off and

157
00:09:05,200 --> 00:09:09,839
we don't know the passcode

158
00:09:12,480 --> 00:09:15,120
in this talk we are discussing the

159
00:09:15,120 --> 00:09:16,160
scenario

160
00:09:16,160 --> 00:09:19,600
in which we can exploit the locked phone

161
00:09:19,600 --> 00:09:23,839
and keep sensitive data reachable

162
00:09:27,040 --> 00:09:29,600
in general samsung's secure boot will

163
00:09:29,600 --> 00:09:31,200
verify the boot imagery

164
00:09:31,200 --> 00:09:33,680
and put into kernel after setting up

165
00:09:33,680 --> 00:09:34,959
secure monitor

166
00:09:34,959 --> 00:09:38,560
and initializing hardware

167
00:09:38,720 --> 00:09:41,760
but secure boot will enter all the mode

168
00:09:41,760 --> 00:09:44,240
if we press the button down and power

169
00:09:44,240 --> 00:09:50,080
buttons during the booting process

170
00:09:50,080 --> 00:09:52,880
the audi mode allows user to flash

171
00:09:52,880 --> 00:09:54,240
stacker firmware

172
00:09:54,240 --> 00:09:58,000
to manually update the phone it not only

173
00:09:58,000 --> 00:09:59,760
verifies the signature

174
00:09:59,760 --> 00:10:04,320
but also checks the virtual number audi

175
00:10:04,320 --> 00:10:06,800
mode does not allow the user to flash

176
00:10:06,800 --> 00:10:11,599
previous versions or unofficial firmware

177
00:10:11,680 --> 00:10:14,320
this is post a channel for interacting

178
00:10:14,320 --> 00:10:19,440
with secure boot

179
00:10:19,440 --> 00:10:21,920
in order mode we found several

180
00:10:21,920 --> 00:10:22,880
vulnerabilities

181
00:10:22,880 --> 00:10:24,959
which can achieve arbitrary core

182
00:10:24,959 --> 00:10:27,120
execution

183
00:10:27,120 --> 00:10:29,360
the first one can only get co-execution

184
00:10:29,360 --> 00:10:31,040
on all the models

185
00:10:31,040 --> 00:10:34,800
like the galaxy s8

186
00:10:44,000 --> 00:10:46,959
all the nucleus is very simple we send

187
00:10:46,959 --> 00:10:47,200
an

188
00:10:47,200 --> 00:10:50,240
integer as operation code the operation

189
00:10:50,240 --> 00:10:51,760
code specifies the

190
00:10:51,760 --> 00:10:55,760
function we want to use in od

191
00:10:55,760 --> 00:10:58,320
and then we follow that with another

192
00:10:58,320 --> 00:10:58,880
integer

193
00:10:58,880 --> 00:11:02,399
sub operation to tell audi whether we

194
00:11:02,399 --> 00:11:03,920
are going to set

195
00:11:03,920 --> 00:11:07,120
get or initialize something

196
00:11:07,120 --> 00:11:15,519
and finally we can have some argument

197
00:11:15,519 --> 00:11:18,079
in all the influential image command the

198
00:11:18,079 --> 00:11:21,040
image size is provided by the user

199
00:11:21,040 --> 00:11:25,040
and there's no check for it

200
00:11:25,600 --> 00:11:28,160
even if odin decides the buffer location

201
00:11:28,160 --> 00:11:29,760
by the size

202
00:11:29,760 --> 00:11:33,040
it has an integer overflow bug so we can

203
00:11:33,040 --> 00:11:37,040
choose which buffer location we want

204
00:11:39,120 --> 00:11:43,440
what data is stored behind the buffer

205
00:11:43,440 --> 00:11:46,320
they are the secure boot code segment b

206
00:11:46,320 --> 00:11:47,360
assets

207
00:11:47,360 --> 00:11:50,399
stake and keep

208
00:11:51,120 --> 00:11:54,079
due to the lack of size check we can

209
00:11:54,079 --> 00:11:55,519
override everything

210
00:11:55,519 --> 00:11:59,040
and control the core segment sket stack

211
00:11:59,040 --> 00:12:01,599
and heap

212
00:12:03,839 --> 00:12:06,720
since the galaxy s8 samsung has

213
00:12:06,720 --> 00:12:07,279
tightened

214
00:12:07,279 --> 00:12:10,240
a new table and set the call segment to

215
00:12:10,240 --> 00:12:12,959
read only

216
00:12:12,959 --> 00:12:16,240
fortunately usb devices have the

217
00:12:16,240 --> 00:12:17,040
literary

218
00:12:17,040 --> 00:12:20,959
memory access we are not restricted by a

219
00:12:20,959 --> 00:12:25,200
menu control

220
00:12:25,200 --> 00:12:28,720
and next we must deal with the cache

221
00:12:28,720 --> 00:12:31,920
incoherence problem since

222
00:12:31,920 --> 00:12:35,360
usb manipulate memory directory

223
00:12:35,360 --> 00:12:38,639
we cannot affect the cache data

224
00:12:38,639 --> 00:12:42,160
unfortunately while receiving data

225
00:12:42,160 --> 00:12:45,680
the cpu keeps checking the usb event

226
00:12:45,680 --> 00:12:49,040
which is in a while loop

227
00:12:49,040 --> 00:12:53,519
obviously this code is cached by the cpu

228
00:12:53,519 --> 00:12:58,399
therefore we cannot affect the code data

229
00:12:58,399 --> 00:13:00,880
but there are some memory segments which

230
00:13:00,880 --> 00:13:01,920
are not said to be

231
00:13:01,920 --> 00:13:07,839
cached and no segments are the hip

232
00:13:09,360 --> 00:13:12,160
in the while loop it will access the hip

233
00:13:12,160 --> 00:13:13,600
pointer

234
00:13:13,600 --> 00:13:16,800
since the hip is not cached once we

235
00:13:16,800 --> 00:13:20,079
override hip data with all neurobite

236
00:13:20,079 --> 00:13:23,040
it will access address 0 and trigger

237
00:13:23,040 --> 00:13:25,839
data about

238
00:13:26,240 --> 00:13:28,720
once data above is triggered it will

239
00:13:28,720 --> 00:13:31,920
jump to the arrow handle immediately

240
00:13:31,920 --> 00:13:33,920
the arrow handle function has never been

241
00:13:33,920 --> 00:13:35,440
executed

242
00:13:35,440 --> 00:13:39,440
thus it is not cached

243
00:13:39,839 --> 00:13:42,160
we can just push jump slide on the arrow

244
00:13:42,160 --> 00:13:43,360
handle

245
00:13:43,360 --> 00:13:45,760
and we put the circle in front of the

246
00:13:45,760 --> 00:13:47,120
call segment

247
00:13:47,120 --> 00:13:49,600
to ensure it will not be affected by the

248
00:13:49,600 --> 00:13:52,480
cpu cache

249
00:13:55,680 --> 00:13:58,800
in conclusion we overflow the memory

250
00:13:58,800 --> 00:14:01,839
according to the layout

251
00:14:01,839 --> 00:14:04,240
we can achieve arbitrary code exclusion

252
00:14:04,240 --> 00:14:07,120
in secure boot

253
00:14:11,440 --> 00:14:14,839
but we are not able to exploit s9

254
00:14:14,839 --> 00:14:17,600
later because the buffer location is

255
00:14:17,600 --> 00:14:19,600
changed to another address

256
00:14:19,600 --> 00:14:22,399
which is far from the secure code

257
00:14:22,399 --> 00:14:24,959
segment

258
00:14:25,120 --> 00:14:27,440
we had figured out a potential exploit

259
00:14:27,440 --> 00:14:31,839
path to exploit the newer marble

260
00:14:33,040 --> 00:14:35,920
in s9 later odin changed the powerful

261
00:14:35,920 --> 00:14:37,920
location to a big address

262
00:14:37,920 --> 00:14:41,760
which is behind the core segment

263
00:14:42,160 --> 00:14:44,480
that is because ordinated payroll

264
00:14:44,480 --> 00:14:45,680
download feature

265
00:14:45,680 --> 00:14:49,120
to make the transfer speed faster

266
00:14:49,120 --> 00:14:52,000
to use this feature secure boot need to

267
00:14:52,000 --> 00:14:52,320
put

268
00:14:52,320 --> 00:14:56,320
up another two cpu cores

269
00:14:56,720 --> 00:15:00,639
if the cause boot fails secure boot will

270
00:15:00,639 --> 00:15:03,279
fall back to normal download mode

271
00:15:03,279 --> 00:15:06,079
which change the buffer to the original

272
00:15:06,079 --> 00:15:08,638
location

273
00:15:08,720 --> 00:15:12,880
so we try to find a way to make the cpu

274
00:15:12,880 --> 00:15:13,600
boot

275
00:15:13,600 --> 00:15:16,000
fails

276
00:15:23,760 --> 00:15:26,560
in secure boot the ship output function

277
00:15:26,560 --> 00:15:27,440
will not put

278
00:15:27,440 --> 00:15:30,639
the core if there are more than three

279
00:15:30,639 --> 00:15:33,680
cores activated

280
00:15:33,680 --> 00:15:37,440
thus if we can put another course before

281
00:15:37,440 --> 00:15:39,360
enter od mode

282
00:15:39,360 --> 00:15:41,759
we can make the secure boot fall back to

283
00:15:41,759 --> 00:15:44,880
normal download mode

284
00:15:47,360 --> 00:15:50,079
that is amazing there's really a way to

285
00:15:50,079 --> 00:15:50,639
achieve

286
00:15:50,639 --> 00:15:54,160
it secure boot has another mode which

287
00:15:54,160 --> 00:15:55,120
called

288
00:15:55,120 --> 00:15:59,519
uart debug mode the mode has a command

289
00:15:59,519 --> 00:16:03,120
light can put another core for testing

290
00:16:03,120 --> 00:16:06,399
most importantly when it's done it will

291
00:16:06,399 --> 00:16:07,600
not decrease the

292
00:16:07,600 --> 00:16:10,800
count of booted costs we can keep

293
00:16:10,800 --> 00:16:13,839
increase the count of booted calls

294
00:16:13,839 --> 00:16:17,680
until it exists limit

295
00:16:17,680 --> 00:16:20,839
and the ur mode has another command

296
00:16:20,839 --> 00:16:22,000
download

297
00:16:22,000 --> 00:16:25,839
can enter into od mode

298
00:16:27,440 --> 00:16:30,639
so if we can enter uart mode we can

299
00:16:30,639 --> 00:16:31,120
explore

300
00:16:31,120 --> 00:16:34,800
s10 with the vulnerability

301
00:16:35,279 --> 00:16:38,000
we found that secure boot will check the

302
00:16:38,000 --> 00:16:40,399
resistor in the usb cable

303
00:16:40,399 --> 00:16:43,759
if the resistor match a specific value

304
00:16:43,759 --> 00:16:47,680
it will enter uart mode

305
00:16:48,320 --> 00:16:51,680
but even some researchers successfully

306
00:16:51,680 --> 00:16:55,040
entered uart mode in galaxy s7

307
00:16:55,040 --> 00:16:57,680
the method was not no longer working in

308
00:16:57,680 --> 00:17:00,320
galaxy s8 and data

309
00:17:00,320 --> 00:17:05,280
because the cable was changed to type c

310
00:17:05,280 --> 00:17:08,959
we have tried many other methods such as

311
00:17:08,959 --> 00:17:11,760
making a type c cable connected with a

312
00:17:11,760 --> 00:17:12,480
proton

313
00:17:12,480 --> 00:17:15,599
and pull up resistor or

314
00:17:15,599 --> 00:17:19,760
making the types cable in accessory mode

315
00:17:19,760 --> 00:17:22,640
or try and communicate with s10 by the

316
00:17:22,640 --> 00:17:26,079
vendor defined ministry

317
00:17:26,160 --> 00:17:29,360
all of this work all failed

318
00:17:29,360 --> 00:17:34,080
secure boot cannot detect the resistor

319
00:17:35,520 --> 00:17:40,240
so six months later we stopped trying

320
00:17:40,240 --> 00:17:43,360
and reported the bug to samsung against

321
00:17:43,360 --> 00:17:47,840
august 2019

322
00:17:52,480 --> 00:17:55,679
and several days later

323
00:17:55,679 --> 00:17:58,640
samsung got back to me and told me that

324
00:17:58,640 --> 00:17:59,039
this

325
00:17:59,039 --> 00:18:02,640
issue was duplicated this was a

326
00:18:02,640 --> 00:18:05,520
dual broad to me and i changed my

327
00:18:05,520 --> 00:18:09,520
research target to other areas

328
00:18:12,559 --> 00:18:15,840
several months later

329
00:18:16,000 --> 00:18:19,200
samsung released the patch the title is

330
00:18:19,200 --> 00:18:22,080
potential integer overflow

331
00:18:22,080 --> 00:18:24,720
after reading the description i guess

332
00:18:24,720 --> 00:18:26,960
the reporter did not notice that

333
00:18:26,960 --> 00:18:29,039
the bug can lead to arbitrary

334
00:18:29,039 --> 00:18:31,760
co-execution

335
00:18:32,880 --> 00:18:36,240
the patch description said it fixed the

336
00:18:36,240 --> 00:18:39,600
unsigned comprehension issue

337
00:18:39,600 --> 00:18:42,640
but actually samsung did not only make

338
00:18:42,640 --> 00:18:44,880
the configuration on site

339
00:18:44,880 --> 00:18:47,760
but also added a size check to prevent

340
00:18:47,760 --> 00:18:50,879
buffer overflow

341
00:18:51,840 --> 00:18:54,840
after looking at the patch i was

342
00:18:54,840 --> 00:18:57,200
wondering if there was

343
00:18:57,200 --> 00:19:01,039
any way to bypass the check

344
00:19:01,360 --> 00:19:05,440
several days later i found another

345
00:19:05,440 --> 00:19:11,840
ability that can bypass the trip

346
00:19:12,640 --> 00:19:14,400
after looking more deeply into the

347
00:19:14,400 --> 00:19:16,160
function related to usb

348
00:19:16,160 --> 00:19:20,080
receive i found that the provided size

349
00:19:20,080 --> 00:19:23,120
is calculated as a line size with a

350
00:19:23,120 --> 00:19:23,600
strange

351
00:19:23,600 --> 00:19:25,840
value

352
00:19:26,880 --> 00:19:29,760
after cross referencing the list value

353
00:19:29,760 --> 00:19:32,400
with all the areas of the system

354
00:19:32,400 --> 00:19:35,200
we found a lot it can be changed by

355
00:19:35,200 --> 00:19:38,320
holding requests

356
00:19:38,320 --> 00:19:41,120
according to the debug message we know

357
00:19:41,120 --> 00:19:44,000
it is used to specify the size of data

358
00:19:44,000 --> 00:19:45,679
package

359
00:19:45,679 --> 00:19:53,679
the value doesn't have any checks

360
00:19:53,679 --> 00:19:56,799
therefore if we set the size

361
00:19:56,799 --> 00:20:00,400
of data packet to a large amount

362
00:20:00,400 --> 00:20:03,039
we can bypass the check last samsung

363
00:20:03,039 --> 00:20:03,679
edited in

364
00:20:03,679 --> 00:20:07,120
october 2019 and destroyed the same

365
00:20:07,120 --> 00:20:09,840
buffer again

366
00:20:11,679 --> 00:20:17,200
this time i reported the bug immediately

367
00:20:17,840 --> 00:20:21,120
several months later samsung released

368
00:20:21,120 --> 00:20:25,199
the patch in january 2020

369
00:20:27,120 --> 00:20:29,679
they added a check to ensure the size of

370
00:20:29,679 --> 00:20:30,720
data packets

371
00:20:30,720 --> 00:20:35,840
cannot be locally 100 000 in hex

372
00:20:37,520 --> 00:20:41,120
the patch gave me an idea

373
00:20:41,120 --> 00:20:44,320
and three hours later i figured out

374
00:20:44,320 --> 00:20:46,080
another exploit

375
00:20:46,080 --> 00:20:50,159
so let's discuss the third variability

376
00:20:50,159 --> 00:20:55,360
this time we can explore the galaxy s10

377
00:20:57,200 --> 00:20:59,840
od has another operation command can

378
00:20:59,840 --> 00:21:03,039
flush the partition information table

379
00:21:03,039 --> 00:21:06,159
the table is small let's open only a

380
00:21:06,159 --> 00:21:08,880
location of heat buffer to store it

381
00:21:08,880 --> 00:21:11,280
instead of using the big buffer in front

382
00:21:11,280 --> 00:21:11,919
of

383
00:21:11,919 --> 00:21:14,720
core segment

384
00:21:15,039 --> 00:21:18,400
we cannot directly overflow it because

385
00:21:18,400 --> 00:21:20,080
there is a check to make sure

386
00:21:20,080 --> 00:21:22,480
that the size is smaller than the heap

387
00:21:22,480 --> 00:21:23,360
buffer

388
00:21:23,360 --> 00:21:27,678
to prevent buffer hipper overflow

389
00:21:29,520 --> 00:21:31,600
remember the second variability i just

390
00:21:31,600 --> 00:21:33,120
mentioned

391
00:21:33,120 --> 00:21:35,440
we can use the size of peggy data to

392
00:21:35,440 --> 00:21:38,400
enlarge the received size

393
00:21:38,400 --> 00:21:40,480
although the patch added additional

394
00:21:40,480 --> 00:21:42,799
track to the size of the

395
00:21:42,799 --> 00:21:46,000
packet data the limit is

396
00:21:46,000 --> 00:21:49,440
6f in hex

397
00:21:49,600 --> 00:21:51,919
but the hip buffer size for the

398
00:21:51,919 --> 00:21:54,159
partitioning information temple

399
00:21:54,159 --> 00:21:57,440
has only 2 000 in hex

400
00:21:57,440 --> 00:22:02,000
which could lead to hip above overflow

401
00:22:04,720 --> 00:22:07,280
this is the sudoku that shows what

402
00:22:07,280 --> 00:22:08,159
happens

403
00:22:08,159 --> 00:22:12,640
when odin tries to receive data

404
00:22:12,640 --> 00:22:15,440
according to the sudo code we can see

405
00:22:15,440 --> 00:22:16,240
the usb

406
00:22:16,240 --> 00:22:18,799
receive will receive the package data

407
00:22:18,799 --> 00:22:20,159
size variable

408
00:22:20,159 --> 00:22:23,280
only if the request size is bigger than

409
00:22:23,280 --> 00:22:26,640
6f in hex or

410
00:22:26,640 --> 00:22:30,000
if the first received attempt cannot get

411
00:22:30,000 --> 00:22:32,799
enough data

412
00:22:33,039 --> 00:22:37,280
this is what we need to achieve

413
00:22:37,360 --> 00:22:40,559
but the usb received function will keep

414
00:22:40,559 --> 00:22:44,159
receiving data until the past size is

415
00:22:44,159 --> 00:22:48,480
reached even if we send data in huge

416
00:22:48,480 --> 00:22:49,919
intervals

417
00:22:49,919 --> 00:22:52,840
the device will still be waiting for

418
00:22:52,840 --> 00:22:55,840
data

419
00:22:56,000 --> 00:22:58,960
actually we found the bug at the very

420
00:22:58,960 --> 00:23:00,640
beginning

421
00:23:00,640 --> 00:23:03,760
but we thought it was unexploitable

422
00:23:03,760 --> 00:23:05,520
vulnerability

423
00:23:05,520 --> 00:23:08,080
we cannot make the usb receiver function

424
00:23:08,080 --> 00:23:11,679
get insufficient data

425
00:23:11,679 --> 00:23:15,039
so we wasted our time on vulnerability

426
00:23:15,039 --> 00:23:17,280
one

427
00:23:19,120 --> 00:23:21,200
but after seeing the patch of

428
00:23:21,200 --> 00:23:22,799
vulnerability too

429
00:23:22,799 --> 00:23:26,640
i was struck by lightning i had a light

430
00:23:26,640 --> 00:23:29,360
bulb moment

431
00:23:30,720 --> 00:23:34,480
this time i came up with an idea

432
00:23:34,480 --> 00:23:37,679
which was to send only a very small

433
00:23:37,679 --> 00:23:39,600
amount of data

434
00:23:39,600 --> 00:23:43,679
and then remove and re-insert the usb

435
00:23:43,679 --> 00:23:46,000
cable

436
00:23:46,000 --> 00:23:48,640
the first usb received returned in

437
00:23:48,640 --> 00:23:50,400
sufficient size

438
00:23:50,400 --> 00:23:53,120
which allow us to reach the second usb

439
00:23:53,120 --> 00:23:54,640
receive

440
00:23:54,640 --> 00:23:57,840
this time it's received with the size of

441
00:23:57,840 --> 00:23:59,760
pc data

442
00:23:59,760 --> 00:24:04,960
allow us to overflow the hip buffer

443
00:24:04,960 --> 00:24:07,039
it's turning into a hip overflow

444
00:24:07,039 --> 00:24:09,440
challenge

445
00:24:09,679 --> 00:24:12,400
we use the traditional hip exploitation

446
00:24:12,400 --> 00:24:13,679
technique

447
00:24:13,679 --> 00:24:16,880
house of spirit

448
00:24:17,039 --> 00:24:21,120
to achieve arbitrary coexecution

449
00:24:22,960 --> 00:24:24,799
there is no check for the double linking

450
00:24:24,799 --> 00:24:26,559
list for the heap

451
00:24:26,559 --> 00:24:29,600
so we can fake the chunks and overwrite

452
00:24:29,600 --> 00:24:33,120
the heaps metadata to insert our fake

453
00:24:33,120 --> 00:24:36,239
chunk into the heap

454
00:24:37,520 --> 00:24:40,240
once we can insert the fake chunk into

455
00:24:40,240 --> 00:24:41,120
the heap

456
00:24:41,120 --> 00:24:44,840
and free it we can override arbitrary

457
00:24:44,840 --> 00:24:50,720
address but there is a limitation

458
00:24:50,720 --> 00:24:55,200
the unused speed must not be zero

459
00:24:55,200 --> 00:24:59,039
since secure boot is 64 bit

460
00:24:59,039 --> 00:25:02,000
we can now overwrite the duot entry

461
00:25:02,000 --> 00:25:05,760
function pointers in data segment

462
00:25:05,760 --> 00:25:07,919
because the unused speed is in the

463
00:25:07,919 --> 00:25:11,440
higher part of the address

464
00:25:11,520 --> 00:25:14,159
which always be zero when the data is a

465
00:25:14,159 --> 00:25:16,720
pointer

466
00:25:19,840 --> 00:25:22,080
the only chance is to overwrite the

467
00:25:22,080 --> 00:25:24,480
return address on stack

468
00:25:24,480 --> 00:25:26,640
if we can control the first local

469
00:25:26,640 --> 00:25:29,840
variable in the functions

470
00:25:30,240 --> 00:25:32,799
but there are only three function calls

471
00:25:32,799 --> 00:25:34,559
after we free our effect

472
00:25:34,559 --> 00:25:38,000
heap trunk luckily

473
00:25:38,000 --> 00:25:43,200
one loss is the odin command handler

474
00:25:43,200 --> 00:25:45,200
the only command buffer is the first

475
00:25:45,200 --> 00:25:47,919
local variable in the handle

476
00:25:47,919 --> 00:25:50,960
the command buffer is in our control

477
00:25:50,960 --> 00:25:53,120
which means we can fulfill the

478
00:25:53,120 --> 00:25:54,400
limitation

479
00:25:54,400 --> 00:25:59,279
and set the unused bit to non zero

480
00:26:01,200 --> 00:26:04,320
now we can execute arbitrary code

481
00:26:04,320 --> 00:26:10,400
in secure boot what's the next step

482
00:26:10,400 --> 00:26:13,679
since we override the bss stack

483
00:26:13,679 --> 00:26:16,640
and keep it with all new bytes it's hard

484
00:26:16,640 --> 00:26:18,960
to recover the data

485
00:26:18,960 --> 00:26:21,679
thus we restart the booting process in

486
00:26:21,679 --> 00:26:22,640
secure boot

487
00:26:22,640 --> 00:26:25,840
to recover this data

488
00:26:28,480 --> 00:26:31,760
but we only get exception level 1 in

489
00:26:31,760 --> 00:26:33,520
unsecured world

490
00:26:33,520 --> 00:26:35,520
some data in translation already

491
00:26:35,520 --> 00:26:37,279
initialized

492
00:26:37,279 --> 00:26:40,400
we can now invent it twice

493
00:26:40,400 --> 00:26:43,360
therefore we must skip the truss zone

494
00:26:43,360 --> 00:26:44,320
related code

495
00:26:44,320 --> 00:26:48,080
to keep trust zone stable

496
00:26:49,360 --> 00:26:51,840
and we continue the booting process

497
00:26:51,840 --> 00:26:54,640
until loading kernel to memory

498
00:26:54,640 --> 00:26:58,080
in this step we replace the color image

499
00:26:58,080 --> 00:27:01,279
with a custom one

500
00:27:02,159 --> 00:27:06,799
so this is our exposed step first

501
00:27:06,799 --> 00:27:09,679
we set the size of peggy data to a big

502
00:27:09,679 --> 00:27:12,080
number

503
00:27:12,159 --> 00:27:16,080
second we send all the pit flash command

504
00:27:16,080 --> 00:27:20,640
to trigger usb data received

505
00:27:20,640 --> 00:27:25,520
third we remove and insert the usb cable

506
00:27:25,520 --> 00:27:29,120
trigger the second usb receive this time

507
00:27:29,120 --> 00:27:33,919
we overwrite the metadata of heap trunk

508
00:27:33,919 --> 00:27:35,039
fourth

509
00:27:35,039 --> 00:27:37,520
we send another loading command to

510
00:27:37,520 --> 00:27:38,799
trigger main lock

511
00:27:38,799 --> 00:27:42,080
and free hip buffer

512
00:27:42,080 --> 00:27:45,440
finally the free action overwrites the

513
00:27:45,440 --> 00:27:47,360
written address on stack

514
00:27:47,360 --> 00:27:49,840
then we can jump to our show call the

515
00:27:49,840 --> 00:27:50,960
circle will put

516
00:27:50,960 --> 00:27:55,600
custom kernel to get root privilege

517
00:27:57,120 --> 00:28:00,840
now we got the exception level 1 normal

518
00:28:00,840 --> 00:28:02,640
world the data

519
00:28:02,640 --> 00:28:05,679
in secular is still legible since the

520
00:28:05,679 --> 00:28:06,320
nut speed

521
00:28:06,320 --> 00:28:08,879
is safe

522
00:28:10,640 --> 00:28:14,720
but we don't have the screen pass code

523
00:28:14,720 --> 00:28:18,240
the phone is still locked

524
00:28:19,760 --> 00:28:22,559
we can now read sensitive data the

525
00:28:22,559 --> 00:28:23,200
storage

526
00:28:23,200 --> 00:28:26,799
is still encrypted the encryption key

527
00:28:26,799 --> 00:28:28,960
for storage is stored in the gatekeeper

528
00:28:28,960 --> 00:28:30,799
translate

529
00:28:30,799 --> 00:28:33,440
some data also cannot be reached for

530
00:28:33,440 --> 00:28:34,399
example

531
00:28:34,399 --> 00:28:36,399
credit card information in samsung pay

532
00:28:36,399 --> 00:28:38,959
translate

533
00:28:40,720 --> 00:28:43,520
there are many ways to reach the data we

534
00:28:43,520 --> 00:28:45,760
can wait for the user to unlock their

535
00:28:45,760 --> 00:28:46,399
phone

536
00:28:46,399 --> 00:28:50,158
as shown in the demo video

537
00:28:50,320 --> 00:28:53,600
since we are in unsecured kernel mode

538
00:28:53,600 --> 00:28:56,080
we also can distort the request from

539
00:28:56,080 --> 00:28:57,600
non-secure user mode

540
00:28:57,600 --> 00:29:01,120
to secure word

541
00:29:09,039 --> 00:29:12,080
furthermore it is first attacking

542
00:29:12,080 --> 00:29:13,919
service for us

543
00:29:13,919 --> 00:29:16,720
since the nut speed is safe the data

544
00:29:16,720 --> 00:29:17,360
stored

545
00:29:17,360 --> 00:29:20,799
in secure work still existed

546
00:29:20,799 --> 00:29:23,039
there are many more abilities that we

547
00:29:23,039 --> 00:29:25,520
can explore to get into the secular

548
00:29:25,520 --> 00:29:27,120
world

549
00:29:27,120 --> 00:29:28,799
our team found more than 10

550
00:29:28,799 --> 00:29:31,360
vulnerabilities in 2019

551
00:29:31,360 --> 00:29:35,520
and still find out in 2020

552
00:29:35,520 --> 00:29:37,919
outside of our team there are 10 times

553
00:29:37,919 --> 00:29:40,480
more about abilities funded by other

554
00:29:40,480 --> 00:29:44,480
researchers of these vulnerabilities

555
00:29:44,480 --> 00:29:46,720
needed at least economic privilege in

556
00:29:46,720 --> 00:29:49,679
non-secure world

557
00:29:51,679 --> 00:29:54,559
for example we can attack the gatekeeper

558
00:29:54,559 --> 00:29:56,240
translate to decrypt the

559
00:29:56,240 --> 00:30:00,320
storage in may 2019

560
00:30:00,320 --> 00:30:02,399
we reported a vulnerability in

561
00:30:02,399 --> 00:30:04,320
gatekeeper translate

562
00:30:04,320 --> 00:30:06,399
which allows us to brute force the

563
00:30:06,399 --> 00:30:08,880
screenpass code

564
00:30:08,880 --> 00:30:11,919
according to our test it takes only a

565
00:30:11,919 --> 00:30:14,159
few hours to try all possible pattern

566
00:30:14,159 --> 00:30:16,480
codes

567
00:30:17,520 --> 00:30:18,960
combined with the vulnerability in

568
00:30:18,960 --> 00:30:20,799
gatekeeper translate

569
00:30:20,799 --> 00:30:23,200
we can unlock the phone and reach the

570
00:30:23,200 --> 00:30:26,240
sensitive data

571
00:30:27,679 --> 00:30:31,360
in conclusion even with the status

572
00:30:31,360 --> 00:30:34,399
stored in secure world it still doesn't

573
00:30:34,399 --> 00:30:35,039
mean

574
00:30:35,039 --> 00:30:39,039
it's 100 secure

575
00:30:39,279 --> 00:30:42,960
but it's actually made exploiting harder

576
00:30:42,960 --> 00:30:45,279
we need multiple vulnerabilities to

577
00:30:45,279 --> 00:30:49,039
retrieve the protected data

578
00:30:49,279 --> 00:30:52,640
we need a landing exploit maybe

579
00:30:52,640 --> 00:30:56,000
remote execution or local secure board

580
00:30:56,000 --> 00:30:57,600
exploit

581
00:30:57,600 --> 00:30:59,679
followed by a kernel exploit to achieve

582
00:30:59,679 --> 00:31:01,279
privileged escalation

583
00:31:01,279 --> 00:31:05,200
to non-secure world kernel mode

584
00:31:05,200 --> 00:31:07,919
after getting the loot privilege we

585
00:31:07,919 --> 00:31:10,399
still need a viability in transit

586
00:31:10,399 --> 00:31:12,799
to break into secure exception level

587
00:31:12,799 --> 00:31:15,200
zero

588
00:31:15,200 --> 00:31:17,760
if we want to go to all get all

589
00:31:17,760 --> 00:31:18,880
sensitive data

590
00:31:18,880 --> 00:31:22,320
instead of one specific piece we need a

591
00:31:22,320 --> 00:31:23,600
secure os

592
00:31:23,600 --> 00:31:28,799
vulnerability to control the full device

593
00:31:29,039 --> 00:31:32,240
with all of this the data in the phone

594
00:31:32,240 --> 00:31:35,200
is still safe

595
00:31:38,640 --> 00:31:40,799
this is a timeline for all the report

596
00:31:40,799 --> 00:31:41,679
types and

597
00:31:41,679 --> 00:31:47,840
page dates

598
00:31:50,640 --> 00:31:54,159
thanks everyone thank you for listening

599
00:31:54,159 --> 00:31:56,960
and if you have any questions please

600
00:31:56,960 --> 00:31:58,320
don't hesitate to

601
00:31:58,320 --> 00:32:02,559
hesitate to ask me or reach out to me by

602
00:32:02,559 --> 00:32:04,559
email in the future

603
00:32:04,559 --> 00:32:06,960
thank you

604
00:32:12,840 --> 00:32:15,840
okay

605
00:32:16,799 --> 00:32:20,000
what's this boat

606
00:32:20,240 --> 00:32:25,919
okay hi and i want to answer the

607
00:32:25,919 --> 00:32:30,080
question what's the baseball you say the

608
00:32:30,080 --> 00:32:32,559
model

609
00:32:40,080 --> 00:32:43,919
let me see the other questions

610
00:32:43,919 --> 00:32:47,120
if a user reboots a layer device

611
00:32:47,120 --> 00:32:48,799
will the device properly put the

612
00:32:48,799 --> 00:32:50,240
original firmware

613
00:32:50,240 --> 00:32:53,760
yes and we don't change the

614
00:32:53,760 --> 00:32:56,880
firmware so if the device is reboot

615
00:32:56,880 --> 00:33:10,000
it will reboot the original firmware

616
00:33:10,000 --> 00:33:13,600
what were the two svs on the next

617
00:33:13,600 --> 00:33:17,120
to that slice

618
00:33:17,440 --> 00:33:25,840
let me check the slice

619
00:33:33,840 --> 00:33:37,360
uh sorry i cannot find to find which

620
00:33:37,360 --> 00:33:53,840
sv you mentioned john can you ask again

621
00:34:00,720 --> 00:34:03,919
oh oh uh for

622
00:34:03,919 --> 00:34:06,799
kerry's questions samsung builds

623
00:34:06,799 --> 00:34:08,000
multiple versions

624
00:34:08,000 --> 00:34:11,119
of level phones with different hardware

625
00:34:11,119 --> 00:34:15,599
we exploit the hardware with uh

626
00:34:15,918 --> 00:34:20,239
in usa i think uh

627
00:34:20,239 --> 00:34:22,479
for

628
00:34:23,839 --> 00:34:27,199
uh yeah uh the month the

629
00:34:27,199 --> 00:34:31,359
s10 s9 s8 with synos models

630
00:34:31,359 --> 00:34:35,839
all affected by the vulnerabilities

631
00:34:37,359 --> 00:34:40,879
and for the people's question how were

632
00:34:40,879 --> 00:34:44,320
you able to view the word information

633
00:34:44,320 --> 00:34:48,800
just reverse the body image

634
00:34:48,800 --> 00:34:52,480
yeah just revert reverse the image as

635
00:34:52,480 --> 00:35:03,839
secure boot

636
00:35:03,839 --> 00:35:07,520
uh in demo video

637
00:35:12,800 --> 00:35:16,480
in demo video we just

638
00:35:16,480 --> 00:35:19,200
enter the od mode and we can view the

639
00:35:19,200 --> 00:35:20,079
boot remove

640
00:35:20,079 --> 00:35:22,720
formation

641
00:35:24,640 --> 00:35:29,040
and for john's questions sv

642
00:35:29,040 --> 00:35:31,839
let me check

643
00:35:39,680 --> 00:35:42,839
oh i i will answer you in in the test

644
00:35:42,839 --> 00:35:45,839
box

645
00:36:01,040 --> 00:36:13,839
okay and any other questions

646
00:36:24,839 --> 00:36:27,839
yes

647
00:36:32,079 --> 00:36:38,160
okay thank you thanks everyone

