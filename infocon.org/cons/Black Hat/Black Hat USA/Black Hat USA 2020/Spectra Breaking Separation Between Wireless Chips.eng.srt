1
00:00:04,280 --> 00:00:14,719
[Music]

2
00:00:14,719 --> 00:00:16,720
hello everyone and welcome to oil talk

3
00:00:16,720 --> 00:00:17,440
spectra

4
00:00:17,440 --> 00:00:19,279
breaking separation between wireless

5
00:00:19,279 --> 00:00:20,560
chips

6
00:00:20,560 --> 00:00:22,480
so this is a topic i've been working on

7
00:00:22,480 --> 00:00:24,000
together with francesco

8
00:00:24,000 --> 00:00:26,640
and francesco is an expert for wi-fi and

9
00:00:26,640 --> 00:00:28,320
other wireless technologies while i have

10
00:00:28,320 --> 00:00:29,679
been working on

11
00:00:29,679 --> 00:00:33,120
mainly with bluetooth and in this store

12
00:00:33,120 --> 00:00:35,120
we bring our abilities together

13
00:00:35,120 --> 00:00:36,800
and break the separation between

14
00:00:36,800 --> 00:00:40,000
different wireless chips

15
00:00:40,640 --> 00:00:43,760
let me first start with a motivation so

16
00:00:43,760 --> 00:00:45,840
a while ago i found a partial large ce

17
00:00:45,840 --> 00:00:47,760
within a broadcom bluetooth ship

18
00:00:47,760 --> 00:00:51,360
and then later on a student of mine yan

19
00:00:51,360 --> 00:00:54,079
built frankenstein and with this he

20
00:00:54,079 --> 00:00:54,719
actually

21
00:00:54,719 --> 00:00:58,399
found even more full rces within

22
00:00:58,399 --> 00:01:01,039
broadcom bluetooth chips and now this is

23
00:01:01,039 --> 00:01:02,559
a cool thing and i said like

24
00:01:02,559 --> 00:01:05,760
hey let me take my unicorn and tour the

25
00:01:05,760 --> 00:01:08,080
world and tell everyone like yay we have

26
00:01:08,080 --> 00:01:09,280
bluetooth rce

27
00:01:09,280 --> 00:01:11,920
and bluetooth is insecure and so on and

28
00:01:11,920 --> 00:01:14,080
then people said like yeah but you know

29
00:01:14,080 --> 00:01:17,040
bluetooth it's like 22 years of

30
00:01:17,040 --> 00:01:19,280
expensive iterative development and it's

31
00:01:19,280 --> 00:01:21,439
indistinguishable from magic anyway

32
00:01:21,439 --> 00:01:24,560
and yeah we know it's insecure um

33
00:01:24,560 --> 00:01:26,720
we live with that and actually because

34
00:01:26,720 --> 00:01:29,200
of this we try to sandbox

35
00:01:29,200 --> 00:01:31,840
bluetooth as much as possible you know

36
00:01:31,840 --> 00:01:33,040
it's

37
00:01:33,040 --> 00:01:34,799
actually just connected with viewers

38
00:01:34,799 --> 00:01:37,200
it's not using pci express

39
00:01:37,200 --> 00:01:40,479
and also can you pop kayak with a

40
00:01:40,479 --> 00:01:41,840
bluetooth rc

41
00:01:41,840 --> 00:01:45,520
so um yeah people said like you know

42
00:01:45,520 --> 00:01:47,439
you have you have the bluetooth rc but

43
00:01:47,439 --> 00:01:49,600
what would be really cool is if you had

44
00:01:49,600 --> 00:01:52,399
a wi-fi rce and now one option would be

45
00:01:52,399 --> 00:01:53,680
of course to

46
00:01:53,680 --> 00:01:55,759
port the fuzzer and everything that we

47
00:01:55,759 --> 00:01:57,360
have to wi-fi

48
00:01:57,360 --> 00:02:00,240
and do the same thing again but actually

49
00:02:00,240 --> 00:02:02,799
wi-fi rc's have been found in the past

50
00:02:02,799 --> 00:02:03,200
with

51
00:02:03,200 --> 00:02:05,520
different technologies and so on so it

52
00:02:05,520 --> 00:02:08,080
would not have been something new and

53
00:02:08,080 --> 00:02:10,000
also a bit boring

54
00:02:10,000 --> 00:02:11,520
and then i thought like yeah maybe there

55
00:02:11,520 --> 00:02:13,120
is another thing that we can do

56
00:02:13,120 --> 00:02:14,800
which is actually breaking the chip

57
00:02:14,800 --> 00:02:17,280
separation so saying i have a bluetooth

58
00:02:17,280 --> 00:02:18,160
rce

59
00:02:18,160 --> 00:02:22,080
can i attack wi-fi or even lte

60
00:02:22,080 --> 00:02:24,319
instead of going all the way up to the

61
00:02:24,319 --> 00:02:27,359
operating system

62
00:02:27,760 --> 00:02:30,800
and so i called francesco and said like

63
00:02:30,800 --> 00:02:32,239
yeah you know let's build something

64
00:02:32,239 --> 00:02:35,040
called speculative transmission

65
00:02:35,040 --> 00:02:37,280
and so this was the initial attack name

66
00:02:37,280 --> 00:02:40,080
or idea because wifi bluetooth and lte

67
00:02:40,080 --> 00:02:43,120
they all share frequencies in the 2.4

68
00:02:43,120 --> 00:02:44,400
gigahertz spectrum

69
00:02:44,400 --> 00:02:46,000
even if they don't share the same

70
00:02:46,000 --> 00:02:48,000
frequency they still have

71
00:02:48,000 --> 00:02:50,560
harmonics that interfere and so on and

72
00:02:50,560 --> 00:02:52,239
everything like in a modern smartphone

73
00:02:52,239 --> 00:02:54,319
is really built to this form factor

74
00:02:54,319 --> 00:02:58,080
and because of this you somehow

75
00:02:58,080 --> 00:03:01,200
need to arbitrate channel access well

76
00:03:01,200 --> 00:03:03,519
and this is actually a performance

77
00:03:03,519 --> 00:03:04,720
optimization

78
00:03:04,720 --> 00:03:07,920
so because they share the spectrum

79
00:03:07,920 --> 00:03:09,280
during the transmission

80
00:03:09,280 --> 00:03:11,200
they somehow need to tell each other i'm

81
00:03:11,200 --> 00:03:13,040
now using this and that frequency i'm

82
00:03:13,040 --> 00:03:14,640
not sending a packet because they cannot

83
00:03:14,640 --> 00:03:16,480
do it at once without causing

84
00:03:16,480 --> 00:03:18,720
interference and this is also called a

85
00:03:18,720 --> 00:03:20,640
coexistence mechanism

86
00:03:20,640 --> 00:03:22,959
and the idea was to use this for side

87
00:03:22,959 --> 00:03:24,799
channel for example to speculatively

88
00:03:24,799 --> 00:03:25,440
transmit

89
00:03:25,440 --> 00:03:27,760
packet in wi-fi or bluetooth and then

90
00:03:27,760 --> 00:03:30,319
tell what the other one is doing

91
00:03:30,319 --> 00:03:32,000
it got a bit broader in the end so i

92
00:03:32,000 --> 00:03:33,599
would more call it like a spectrum

93
00:03:33,599 --> 00:03:35,200
transmission by now

94
00:03:35,200 --> 00:03:38,000
but yeah whatever the attack model

95
00:03:38,000 --> 00:03:39,120
overall is that

96
00:03:39,120 --> 00:03:41,440
an attacker has code execution which we

97
00:03:41,440 --> 00:03:43,200
have in bluetooth in this case with the

98
00:03:43,200 --> 00:03:44,560
technologies that we

99
00:03:44,560 --> 00:03:47,840
use to find vulnerabilities and now

100
00:03:47,840 --> 00:03:49,760
then with this prerequisite somehow

101
00:03:49,760 --> 00:03:52,720
attack the other wireless cores

102
00:03:52,720 --> 00:03:55,200
and while this is a pretty strong

103
00:03:55,200 --> 00:03:56,159
prerequisite

104
00:03:56,159 --> 00:03:58,480
it also is a strong attack primitive

105
00:03:58,480 --> 00:04:00,480
overall because

106
00:04:00,480 --> 00:04:03,040
these chips are have hardwired

107
00:04:03,040 --> 00:04:04,000
connections and

108
00:04:04,000 --> 00:04:06,480
these connections can be used without

109
00:04:06,480 --> 00:04:08,159
passing any checks by the operating

110
00:04:08,159 --> 00:04:09,519
system

111
00:04:09,519 --> 00:04:12,640
so to show you this here is an example

112
00:04:12,640 --> 00:04:14,879
for a modern iphone

113
00:04:14,879 --> 00:04:17,839
there you have the bluetooth chip

114
00:04:17,839 --> 00:04:19,600
running and the wi-fi chip running and

115
00:04:19,600 --> 00:04:21,759
they run on separate arm cores so one is

116
00:04:21,759 --> 00:04:22,160
a

117
00:04:22,160 --> 00:04:24,560
cortex m3 or m4 and the other one is the

118
00:04:24,560 --> 00:04:26,560
cortex r4 for example

119
00:04:26,560 --> 00:04:29,120
and they have this interface here the

120
00:04:29,120 --> 00:04:31,120
serial enhanced coexistence interface

121
00:04:31,120 --> 00:04:32,960
which is a hardwired connection between

122
00:04:32,960 --> 00:04:34,479
the two

123
00:04:34,479 --> 00:04:37,199
and then between this bluetooth wi-fi

124
00:04:37,199 --> 00:04:38,960
combo chip there's also another

125
00:04:38,960 --> 00:04:42,320
connection to the lte chip which is mws

126
00:04:42,320 --> 00:04:44,160
mobile wireless standards

127
00:04:44,160 --> 00:04:46,720
and now we get some new attack paths on

128
00:04:46,720 --> 00:04:48,320
this so for example

129
00:04:48,320 --> 00:04:51,040
an attacker could start here at the

130
00:04:51,040 --> 00:04:52,240
bluetooth core

131
00:04:52,240 --> 00:04:55,199
and then escalate from the rc that yes

132
00:04:55,199 --> 00:04:55,680
there

133
00:04:55,680 --> 00:04:58,720
like to the wi-fi core and then

134
00:04:58,720 --> 00:05:00,720
go all the way up and have the

135
00:05:00,720 --> 00:05:02,560
traditional um

136
00:05:02,560 --> 00:05:04,400
attack that we know like going into the

137
00:05:04,400 --> 00:05:06,560
operating system or we could also have

138
00:05:06,560 --> 00:05:07,280
apps

139
00:05:07,280 --> 00:05:10,160
that now know that timings between the

140
00:05:10,160 --> 00:05:12,080
bluetooth and wifi frames are somehow

141
00:05:12,080 --> 00:05:14,240
hardwired and not random and maybe they

142
00:05:14,240 --> 00:05:15,520
can also use this

143
00:05:15,520 --> 00:05:17,520
hardwired timing to like escalate

144
00:05:17,520 --> 00:05:19,919
something here in between and

145
00:05:19,919 --> 00:05:23,198
infer some information

146
00:05:23,280 --> 00:05:26,160
the impact can be varying a lot

147
00:05:26,160 --> 00:05:26,880
depending

148
00:05:26,880 --> 00:05:28,639
on the chip and the implementation of

149
00:05:28,639 --> 00:05:30,080
coexistence so

150
00:05:30,080 --> 00:05:32,320
the obvious one is denial of service so

151
00:05:32,320 --> 00:05:34,240
that you say i have to transmit i have

152
00:05:34,240 --> 00:05:36,240
to transmit and block the others

153
00:05:36,240 --> 00:05:39,280
or some information disclosure by this

154
00:05:39,280 --> 00:05:41,759
meta information about the packets that

155
00:05:41,759 --> 00:05:43,600
you're going to send which could also be

156
00:05:43,600 --> 00:05:45,520
in the timing of the package and so on

157
00:05:45,520 --> 00:05:46,160
and

158
00:05:46,160 --> 00:05:48,560
maybe if the implementation is really

159
00:05:48,560 --> 00:05:50,000
screwed up

160
00:05:50,000 --> 00:05:53,680
an attacker might gain code execution

161
00:05:53,680 --> 00:05:56,479
now the attack name is a bit let's say

162
00:05:56,479 --> 00:05:58,319
complicated because it's hard to find on

163
00:05:58,319 --> 00:05:59,600
the internet

164
00:05:59,600 --> 00:06:02,160
as background is already a word and so

165
00:06:02,160 --> 00:06:03,840
you might also stick to this

166
00:06:03,840 --> 00:06:05,840
alternate name which is the clear ghost

167
00:06:05,840 --> 00:06:07,440
attack whatever

168
00:06:07,440 --> 00:06:10,880
go for whatever name you prefer

169
00:06:10,880 --> 00:06:14,400
and now let's try to exploit all of this

170
00:06:14,400 --> 00:06:16,560
so there is the broadcom coexistence

171
00:06:16,560 --> 00:06:17,520
interface

172
00:06:17,520 --> 00:06:19,120
and actually the same coexistence

173
00:06:19,120 --> 00:06:21,360
interface is used by cypress because

174
00:06:21,360 --> 00:06:22,560
they acquired

175
00:06:22,560 --> 00:06:25,840
parts of broadcom in 2016 and they used

176
00:06:25,840 --> 00:06:28,080
the same code the same hardware

177
00:06:28,080 --> 00:06:32,240
so i might use those terms

178
00:06:32,840 --> 00:06:34,319
similarly

179
00:06:34,319 --> 00:06:36,240
we really like broadcom because they

180
00:06:36,240 --> 00:06:38,720
don't do any firmware check that means

181
00:06:38,720 --> 00:06:40,960
they don't have secure boot or something

182
00:06:40,960 --> 00:06:43,360
you can just modify the firmware i mean

183
00:06:43,360 --> 00:06:46,960
just modify it's still a thing because

184
00:06:46,960 --> 00:06:50,080
well the hardware itself

185
00:06:50,080 --> 00:06:53,759
uh well it's it's easy to get but then

186
00:06:53,759 --> 00:06:55,599
the firmware you need to load it into

187
00:06:55,599 --> 00:06:57,440
either you don't have symbols and so on

188
00:06:57,440 --> 00:06:59,199
so it's still a complicated thing

189
00:06:59,199 --> 00:07:01,840
but you don't have to bypass other

190
00:07:01,840 --> 00:07:03,520
security mechanisms

191
00:07:03,520 --> 00:07:06,319
and well these these chips are used in

192
00:07:06,319 --> 00:07:08,080
so many devices like really

193
00:07:08,080 --> 00:07:11,840
all iphones all macbooks imacs

194
00:07:11,840 --> 00:07:13,440
and also the older apple watches the

195
00:07:13,440 --> 00:07:15,840
newest apple watch has a different tip

196
00:07:15,840 --> 00:07:18,080
samsung galaxy s series node series and

197
00:07:18,080 --> 00:07:19,280
so on in europe

198
00:07:19,280 --> 00:07:22,240
also the older google nexus phones or

199
00:07:22,240 --> 00:07:24,880
raspberry pi is a lot of iot devices

200
00:07:24,880 --> 00:07:28,160
so there are many devices to pick from

201
00:07:28,160 --> 00:07:30,720
that can now be used to to test certain

202
00:07:30,720 --> 00:07:34,000
attacks for prototyping

203
00:07:34,800 --> 00:07:37,199
and now the coexistence idea is that we

204
00:07:37,199 --> 00:07:38,160
escalate

205
00:07:38,160 --> 00:07:41,440
within the chip components and here you

206
00:07:41,440 --> 00:07:42,080
can see

207
00:07:42,080 --> 00:07:44,479
a data sheet of a chip that's used in

208
00:07:44,479 --> 00:07:45,919
the google nexus 5.

209
00:07:45,919 --> 00:07:47,840
the reason why i took such an old data

210
00:07:47,840 --> 00:07:49,599
sheet is that the newer data sheets are

211
00:07:49,599 --> 00:07:52,000
often not available or not as extensive

212
00:07:52,000 --> 00:07:52,720
because

213
00:07:52,720 --> 00:07:55,199
they are still like closed under nda and

214
00:07:55,199 --> 00:07:56,160
so on but

215
00:07:56,160 --> 00:07:59,039
cyprus actually published a lot of data

216
00:07:59,039 --> 00:08:01,280
sheets of the older chips and they are

217
00:08:01,280 --> 00:08:01,599
now

218
00:08:01,599 --> 00:08:03,360
openly available and you can look a few

219
00:08:03,360 --> 00:08:04,879
things up there

220
00:08:04,879 --> 00:08:07,199
so what you can see is in this detailed

221
00:08:07,199 --> 00:08:09,199
view like there's an arm cortex m3

222
00:08:09,199 --> 00:08:11,840
there is the other arm cortex r4 and in

223
00:08:11,840 --> 00:08:14,400
between there is a lot going on

224
00:08:14,400 --> 00:08:16,240
which we exploit in the following and

225
00:08:16,240 --> 00:08:18,319
then there's also this shared antenna

226
00:08:18,319 --> 00:08:20,240
and it's shared for two point four and

227
00:08:20,240 --> 00:08:21,120
five

228
00:08:21,120 --> 00:08:23,199
gigahertz has a duplexer other

229
00:08:23,199 --> 00:08:24,560
complicated stuff going on

230
00:08:24,560 --> 00:08:28,080
um yeah so this is our

231
00:08:28,080 --> 00:08:30,960
attack surface

232
00:08:31,440 --> 00:08:33,919
if you look for data sheets that somehow

233
00:08:33,919 --> 00:08:35,279
mention

234
00:08:35,279 --> 00:08:38,240
the product what you can see here is one

235
00:08:38,240 --> 00:08:40,559
data sheet about coexistence

236
00:08:40,559 --> 00:08:42,320
and it's by cypress and they state

237
00:08:42,320 --> 00:08:44,560
collaborative coexistence between wlan

238
00:08:44,560 --> 00:08:46,080
and bluetooth is implemented according

239
00:08:46,080 --> 00:08:49,760
to ieee 80252 packet arbitration

240
00:08:49,760 --> 00:08:52,160
that's a scheme that defines different

241
00:08:52,160 --> 00:08:52,880
traffic

242
00:08:52,880 --> 00:08:55,680
priorities so wi-fi acknowledgement has

243
00:08:55,680 --> 00:08:58,320
a high priority or sco

244
00:08:58,320 --> 00:08:59,920
which is used for speech and bluetooth

245
00:08:59,920 --> 00:09:02,160
has a high priority

246
00:09:02,160 --> 00:09:05,600
and that's an old one so many trips use

247
00:09:05,600 --> 00:09:06,880
it it's not a thing that

248
00:09:06,880 --> 00:09:09,600
cyprus first thought of but then cyprus

249
00:09:09,600 --> 00:09:10,800
continues with

250
00:09:10,800 --> 00:09:12,959
and through cyprus enhanced coexistence

251
00:09:12,959 --> 00:09:14,720
interface eci

252
00:09:14,720 --> 00:09:17,920
eci augments pta by signaling by

253
00:09:17,920 --> 00:09:19,279
enabling exchange

254
00:09:19,279 --> 00:09:21,200
of additional information required for

255
00:09:21,200 --> 00:09:23,279
implementing more advanced collaborative

256
00:09:23,279 --> 00:09:25,920
coexistence methods as a result overall

257
00:09:25,920 --> 00:09:28,160
quality for simultaneous voice video and

258
00:09:28,160 --> 00:09:30,160
data transmission on an embedded system

259
00:09:30,160 --> 00:09:31,440
is achieved

260
00:09:31,440 --> 00:09:33,519
and this is an important point because

261
00:09:33,519 --> 00:09:36,000
you cannot simply disable coexistence

262
00:09:36,000 --> 00:09:39,120
as is like to ensure more security so if

263
00:09:39,120 --> 00:09:40,800
you disable coexistence

264
00:09:40,800 --> 00:09:43,519
you are no longer able to stream a video

265
00:09:43,519 --> 00:09:45,200
of a wi-fi and listen to it with your

266
00:09:45,200 --> 00:09:46,959
bluetooth headset so each of

267
00:09:46,959 --> 00:09:49,600
them like gets stuck through stream

268
00:09:49,600 --> 00:09:50,640
stops and then

269
00:09:50,640 --> 00:09:52,320
the bluetooth sound stops and so on so

270
00:09:52,320 --> 00:09:56,800
you cannot just disable coexistence

271
00:09:56,800 --> 00:09:58,880
and now let's look into the serial

272
00:09:58,880 --> 00:10:00,560
enhanced coexistence interface

273
00:10:00,560 --> 00:10:02,640
it's sometimes with the s for the serial

274
00:10:02,640 --> 00:10:04,560
sometimes without and then there's also

275
00:10:04,560 --> 00:10:05,839
the gci which

276
00:10:05,839 --> 00:10:07,680
probably means global coexistence

277
00:10:07,680 --> 00:10:10,160
interface or generic coexistence

278
00:10:10,160 --> 00:10:10,959
interface

279
00:10:10,959 --> 00:10:14,079
and many other terms but they are

280
00:10:14,079 --> 00:10:16,640
like used in the same way so they all

281
00:10:16,640 --> 00:10:18,959
mean the same thing

282
00:10:18,959 --> 00:10:21,839
so um the serial enhanced coexistence

283
00:10:21,839 --> 00:10:23,360
interface that's used between the

284
00:10:23,360 --> 00:10:25,040
bluetooth and the wifi chip

285
00:10:25,040 --> 00:10:28,079
and now when we want to exclude any side

286
00:10:28,079 --> 00:10:30,000
effects for example by shared antennas

287
00:10:30,000 --> 00:10:32,560
we really use those two separate boards

288
00:10:32,560 --> 00:10:34,399
connect them with the serial interface

289
00:10:34,399 --> 00:10:36,320
and the nice thing now is that

290
00:10:36,320 --> 00:10:38,399
we don't have any side effects and we

291
00:10:38,399 --> 00:10:39,680
can still observe

292
00:10:39,680 --> 00:10:41,680
everything that's going on on this

293
00:10:41,680 --> 00:10:43,519
interface so we don't need this for the

294
00:10:43,519 --> 00:10:44,800
attacks later on

295
00:10:44,800 --> 00:10:47,519
but initially to understand what is

296
00:10:47,519 --> 00:10:48,160
going on

297
00:10:48,160 --> 00:10:51,279
in the enhanced coexistence interface it

298
00:10:51,279 --> 00:10:52,079
really helps

299
00:10:52,079 --> 00:10:56,079
to look into it with a logic analyzer

300
00:10:56,079 --> 00:10:58,079
and if you look now into it in detail

301
00:10:58,079 --> 00:11:00,399
what you can see is first of all

302
00:11:00,399 --> 00:11:03,680
uh yeah well here the first example has

303
00:11:03,680 --> 00:11:05,600
bluetooth music stream and you can see

304
00:11:05,600 --> 00:11:07,120
it's sending a lot of data

305
00:11:07,120 --> 00:11:08,640
and it's sending this data with three

306
00:11:08,640 --> 00:11:11,040
mega about which is the same rate that

307
00:11:11,040 --> 00:11:12,160
it's using

308
00:11:12,160 --> 00:11:15,360
to send data of the actual music stream

309
00:11:15,360 --> 00:11:17,839
to the host so this is a very high data

310
00:11:17,839 --> 00:11:18,800
rate

311
00:11:18,800 --> 00:11:21,120
and at the same data rate wi-fi when you

312
00:11:21,120 --> 00:11:22,720
for example like scan for wi-fi

313
00:11:22,720 --> 00:11:24,560
indicates i'm starting a scan then there

314
00:11:24,560 --> 00:11:26,399
are the scan results that are reported

315
00:11:26,399 --> 00:11:27,519
and then later on

316
00:11:27,519 --> 00:11:31,440
the end of the scan and in the same way

317
00:11:31,440 --> 00:11:33,200
if you zoom in now you can see that

318
00:11:33,200 --> 00:11:35,200
there is data so you have these bytes

319
00:11:35,200 --> 00:11:36,640
these additional bytes that are sent

320
00:11:36,640 --> 00:11:37,040
here

321
00:11:37,040 --> 00:11:39,279
and there so there's something encoded

322
00:11:39,279 --> 00:11:40,720
the last example is

323
00:11:40,720 --> 00:11:43,279
a different example so in this one i

324
00:11:43,279 --> 00:11:44,560
connected this

325
00:11:44,560 --> 00:11:47,839
tiny bluetooth keyboard and

326
00:11:47,839 --> 00:11:49,519
then you can see that there's a regular

327
00:11:49,519 --> 00:11:52,320
pattern every 30 milliseconds

328
00:11:52,320 --> 00:11:56,000
of sending data

329
00:11:56,000 --> 00:11:59,360
first attack doesn't even need all this

330
00:11:59,360 --> 00:12:00,560
knowledge here

331
00:12:00,560 --> 00:12:03,279
but what it does is it reconfigures this

332
00:12:03,279 --> 00:12:05,120
interface so there are configuration

333
00:12:05,120 --> 00:12:06,160
registers

334
00:12:06,160 --> 00:12:08,079
and initially i try to find everything

335
00:12:08,079 --> 00:12:10,240
out like about each and every register

336
00:12:10,240 --> 00:12:12,399
and reverse engineer all the functions

337
00:12:12,399 --> 00:12:14,160
but then francesco said like yeah you

338
00:12:14,160 --> 00:12:16,000
know just if you if you don't understand

339
00:12:16,000 --> 00:12:17,680
it first write garbage and see what

340
00:12:17,680 --> 00:12:19,839
happens so i wrote garbage and saw what

341
00:12:19,839 --> 00:12:20,800
happened

342
00:12:20,800 --> 00:12:22,959
and well there is a register is called

343
00:12:22,959 --> 00:12:25,360
gci chip control and it's

344
00:12:25,360 --> 00:12:28,480
at the tci offset 200 it might also be

345
00:12:28,480 --> 00:12:30,880
at 400 or 600 it depends on a bit

346
00:12:30,880 --> 00:12:33,040
a bit on the chip and if you write just

347
00:12:33,040 --> 00:12:35,279
ff to it that's it

348
00:12:35,279 --> 00:12:39,360
then it crashes wi-fi and in this

349
00:12:39,360 --> 00:12:41,360
setup with the logic analyzer you can

350
00:12:41,360 --> 00:12:42,800
even see a voltage drop on the

351
00:12:42,800 --> 00:12:44,079
sec-e-line

352
00:12:44,079 --> 00:12:47,120
and sometimes to recover wi-fi you need

353
00:12:47,120 --> 00:12:48,880
to reboot a device multiple times not

354
00:12:48,880 --> 00:12:51,519
just once it's a bit strange

355
00:12:51,519 --> 00:12:54,240
at least what i observed and well it

356
00:12:54,240 --> 00:12:56,160
causes a kernel panic quite often

357
00:12:56,160 --> 00:12:58,320
because wi-fi behaves so strange that it

358
00:12:58,320 --> 00:12:59,519
starts like spamming

359
00:12:59,519 --> 00:13:02,639
pci express and like if the device is

360
00:13:02,639 --> 00:13:04,639
not rebooting just the chip is crashing

361
00:13:04,639 --> 00:13:06,639
then the chip crash lock still contains

362
00:13:06,639 --> 00:13:08,399
a lot of in village characters and stuff

363
00:13:08,399 --> 00:13:09,440
so it really

364
00:13:09,440 --> 00:13:13,760
screws stuff up here's a demo of it

365
00:13:13,760 --> 00:13:15,200
it's a bit accelerated because it

366
00:13:15,200 --> 00:13:17,200
actually takes a minute on the left hand

367
00:13:17,200 --> 00:13:18,880
side you can see that i write to the

368
00:13:18,880 --> 00:13:20,959
resistor at offset 400

369
00:13:20,959 --> 00:13:22,880
and at the right hand side you can see

370
00:13:22,880 --> 00:13:25,040
how wi-fi stops working immediately so

371
00:13:25,040 --> 00:13:26,880
the ping stops and then a bit

372
00:13:26,880 --> 00:13:28,720
later it reboots and this is on an

373
00:13:28,720 --> 00:13:31,040
up-to-date macos catalina

374
00:13:31,040 --> 00:13:33,560
with a chip that was in the 2019

375
00:13:33,560 --> 00:13:35,040
2019-2020

376
00:13:35,040 --> 00:13:37,519
models

377
00:13:38,720 --> 00:13:40,399
and you can see that many devices are

378
00:13:40,399 --> 00:13:42,160
affected of this so we reported this

379
00:13:42,160 --> 00:13:43,519
like a year ago

380
00:13:43,519 --> 00:13:46,560
and it's still unfixed in most devices

381
00:13:46,560 --> 00:13:49,440
or most drivers so i don't even know if

382
00:13:49,440 --> 00:13:51,440
it's like fixable on all of them

383
00:13:51,440 --> 00:13:53,279
and yeah i mean it's just denial of

384
00:13:53,279 --> 00:13:55,680
service but it's a very nice attack and

385
00:13:55,680 --> 00:13:57,360
very easy to test

386
00:13:57,360 --> 00:13:59,920
um and the only thing that they fixed is

387
00:13:59,920 --> 00:14:00,639
like that now

388
00:14:00,639 --> 00:14:03,519
you can no longer write over hci to this

389
00:14:03,519 --> 00:14:04,480
register but

390
00:14:04,480 --> 00:14:06,240
probably remote code execution would

391
00:14:06,240 --> 00:14:08,720
still be possible to write to those

392
00:14:08,720 --> 00:14:12,480
um registers and because this was very

393
00:14:12,480 --> 00:14:15,120
promising start with all this coexistent

394
00:14:15,120 --> 00:14:18,000
stuff francesco started to look a bit

395
00:14:18,000 --> 00:14:18,399
more

396
00:14:18,399 --> 00:14:21,920
onto the wi-fi site so how the d11 core

397
00:14:21,920 --> 00:14:24,399
is actually parsing all of this so with

398
00:14:24,399 --> 00:14:26,639
this i'm handing over to francesco

399
00:14:26,639 --> 00:14:28,720
thanks jisca for introducing this part

400
00:14:28,720 --> 00:14:30,079
of the talk let's start

401
00:14:30,079 --> 00:14:32,720
describing the wi-fi chip set developed

402
00:14:32,720 --> 00:14:33,680
by broadcom

403
00:14:33,680 --> 00:14:35,920
we see here it evolved in the last two

404
00:14:35,920 --> 00:14:37,440
decades from a soft mac

405
00:14:37,440 --> 00:14:40,160
to a full mac implementation operations

406
00:14:40,160 --> 00:14:42,480
previously performed on the linux host

407
00:14:42,480 --> 00:14:44,560
at the top are offloaded today by an

408
00:14:44,560 --> 00:14:46,560
intermediate arm core

409
00:14:46,560 --> 00:14:48,639
interestingly real-time operations are

410
00:14:48,639 --> 00:14:50,720
still managed by the same low-level

411
00:14:50,720 --> 00:14:51,920
piece of hardware

412
00:14:51,920 --> 00:14:55,199
that did not change much in 17 years

413
00:14:55,199 --> 00:14:58,399
no matter it is an 11b card from 2003

414
00:14:58,399 --> 00:15:01,199
or a state-of-the-art 11ax chipset time

415
00:15:01,199 --> 00:15:03,440
critical operations are managed by the

416
00:15:03,440 --> 00:15:05,839
same the d11 microcontroller

417
00:15:05,839 --> 00:15:08,320
that coordinates all these small blocks

418
00:15:08,320 --> 00:15:09,040
like phi

419
00:15:09,040 --> 00:15:12,240
radio frequency and dma while they

420
00:15:12,240 --> 00:15:14,079
claimed they switched to fullmark to

421
00:15:14,079 --> 00:15:14,560
handle

422
00:15:14,560 --> 00:15:15,920
high throughput features more

423
00:15:15,920 --> 00:15:18,160
efficiently this switch also allowed the

424
00:15:18,160 --> 00:15:20,480
manufacturer to better hide driver

425
00:15:20,480 --> 00:15:21,199
internals

426
00:15:21,199 --> 00:15:24,320
inside the arm binary code let's have a

427
00:15:24,320 --> 00:15:26,240
closer look to the low level

428
00:15:26,240 --> 00:15:28,880
here the d11 microcontroller runs a

429
00:15:28,880 --> 00:15:31,040
microcode that is a short piece of

430
00:15:31,040 --> 00:15:33,360
software made of 8 byte instructions

431
00:15:33,360 --> 00:15:35,600
dedicated to manipulating bits and

432
00:15:35,600 --> 00:15:37,759
testing hardware conditions

433
00:15:37,759 --> 00:15:39,759
this is some code from the main loop

434
00:15:39,759 --> 00:15:42,079
that checks if the phi started receiving

435
00:15:42,079 --> 00:15:42,880
a preamble

436
00:15:42,880 --> 00:15:45,279
useful for analyzing a packet while

437
00:15:45,279 --> 00:15:46,639
being received

438
00:15:46,639 --> 00:15:48,399
or if the current reception is

439
00:15:48,399 --> 00:15:51,199
terminated for deciding whether or not

440
00:15:51,199 --> 00:15:53,839
to push the frame to the upper layers

441
00:15:53,839 --> 00:15:56,480
this one is extracted from the code that

442
00:15:56,480 --> 00:15:58,000
schedules the transmission of an

443
00:15:58,000 --> 00:16:00,079
acknowledgement we see the preparation

444
00:16:00,079 --> 00:16:02,480
of the reply frame that starts with d4

445
00:16:02,480 --> 00:16:05,279
as usual the tool chain for the u-code

446
00:16:05,279 --> 00:16:08,800
was created by michael butch in 2007

447
00:16:08,800 --> 00:16:11,600
and we incorporated it inside our nexus

448
00:16:11,600 --> 00:16:12,320
project

449
00:16:12,320 --> 00:16:14,800
and we periodically update it by adding

450
00:16:14,800 --> 00:16:15,680
instructions

451
00:16:15,680 --> 00:16:18,000
when a chipset is introduced if it comes

452
00:16:18,000 --> 00:16:20,639
with new specialized instructions

453
00:16:20,639 --> 00:16:22,880
as spotting the u-code in the r binary

454
00:16:22,880 --> 00:16:23,920
blob is easy

455
00:16:23,920 --> 00:16:26,959
we can modify it adding customized parts

456
00:16:26,959 --> 00:16:27,920
as we will see

457
00:16:27,920 --> 00:16:31,360
later the d11 cpu coordinates

458
00:16:31,360 --> 00:16:33,759
several blocks first of all it controls

459
00:16:33,759 --> 00:16:36,160
the transmission and reception engines

460
00:16:36,160 --> 00:16:38,399
it manages channel access by scheduling

461
00:16:38,399 --> 00:16:39,440
transmissions

462
00:16:39,440 --> 00:16:42,000
and decides which received frames should

463
00:16:42,000 --> 00:16:42,800
be pushed

464
00:16:42,800 --> 00:16:45,680
to the arm core it can configure the fi

465
00:16:45,680 --> 00:16:46,560
and the radio

466
00:16:46,560 --> 00:16:48,800
and it does so by running the u-code

467
00:16:48,800 --> 00:16:50,959
that is loaded to u-code memory by the

468
00:16:50,959 --> 00:16:53,839
armed firmware at every initialization

469
00:16:53,839 --> 00:16:56,560
d11 has access to limited memory called

470
00:16:56,560 --> 00:16:58,880
shared memory up to 8 kilobytes where it

471
00:16:58,880 --> 00:17:00,959
keeps its configuration and its state

472
00:17:00,959 --> 00:17:02,079
variables

473
00:17:02,079 --> 00:17:04,559
the 11 can also access indirectly dr

474
00:17:04,559 --> 00:17:06,160
memory where packets ready for

475
00:17:06,160 --> 00:17:07,599
transmission are queued

476
00:17:07,599 --> 00:17:10,000
so that it decides which packets can be

477
00:17:10,000 --> 00:17:12,160
transmitted or aggregated

478
00:17:12,160 --> 00:17:14,640
the 11 is equipped with several general

479
00:17:14,640 --> 00:17:15,839
purpose timers

480
00:17:15,839 --> 00:17:18,400
that can be used in modern platforms for

481
00:17:18,400 --> 00:17:20,079
measuring a time of flight

482
00:17:20,079 --> 00:17:22,400
and with many different interfaces for

483
00:17:22,400 --> 00:17:24,480
talking to other parts of the chipset

484
00:17:24,480 --> 00:17:26,640
like the seki interface

485
00:17:26,640 --> 00:17:28,400
during the years it turned out to be a

486
00:17:28,400 --> 00:17:30,160
pretty flexible architecture

487
00:17:30,160 --> 00:17:32,400
we demonstrated the frequency hopping

488
00:17:32,400 --> 00:17:34,400
time division multiplexing lte

489
00:17:34,400 --> 00:17:35,679
coexistence

490
00:17:35,679 --> 00:17:37,840
and so on and so forth in general we

491
00:17:37,840 --> 00:17:40,000
used it as a research platform for

492
00:17:40,000 --> 00:17:42,160
anticipating features that were lately

493
00:17:42,160 --> 00:17:44,640
added by the manufacturer on its own

494
00:17:44,640 --> 00:17:47,600
let's now talk about the 11 coexistence

495
00:17:47,600 --> 00:17:48,559
interface

496
00:17:48,559 --> 00:17:50,480
there are quite a number of registers

497
00:17:50,480 --> 00:17:52,000
dedicated to this

498
00:17:52,000 --> 00:17:54,960
interface there is a 64-bit buffer that

499
00:17:54,960 --> 00:17:56,000
you could pulse

500
00:17:56,000 --> 00:17:58,720
every 1.25 millisecond that is the

501
00:17:58,720 --> 00:18:00,080
minimum bluetooth connection

502
00:18:00,080 --> 00:18:02,080
interval for checking whether new

503
00:18:02,080 --> 00:18:04,000
messages came from bluetooth

504
00:18:04,000 --> 00:18:06,559
such messages include timing indications

505
00:18:06,559 --> 00:18:08,000
from bluetooth that test

506
00:18:08,000 --> 00:18:10,559
wi-fi hey i'm doing something for this

507
00:18:10,559 --> 00:18:11,679
amount of time

508
00:18:11,679 --> 00:18:13,919
and they also include the type of event

509
00:18:13,919 --> 00:18:16,000
which we use it for our attacks

510
00:18:16,000 --> 00:18:18,320
there are countdown timers where u-code

511
00:18:18,320 --> 00:18:20,000
copies the timing received from

512
00:18:20,000 --> 00:18:23,039
bluetooth for deferring wi-fi operations

513
00:18:23,039 --> 00:18:24,720
and there is a bluetooth transmission

514
00:18:24,720 --> 00:18:27,440
control register in red that is used by

515
00:18:27,440 --> 00:18:28,160
wifi

516
00:18:28,160 --> 00:18:30,799
for telling bluetooth hey stop i take

517
00:18:30,799 --> 00:18:32,720
control of the channel wait until i

518
00:18:32,720 --> 00:18:33,360
grant you

519
00:18:33,360 --> 00:18:36,480
access again we also use this register

520
00:18:36,480 --> 00:18:38,240
for our attacks

521
00:18:38,240 --> 00:18:40,640
according to our analysis 12 percent of

522
00:18:40,640 --> 00:18:42,160
the u code is dedicated

523
00:18:42,160 --> 00:18:44,679
to coexistence and we refer here to the

524
00:18:44,679 --> 00:18:47,679
43909 b0 chipset by cyprus

525
00:18:47,679 --> 00:18:50,160
it's amazing because ucode is doing so

526
00:18:50,160 --> 00:18:51,440
many other things with

527
00:18:51,440 --> 00:18:54,240
much less code like packet aggregation

528
00:18:54,240 --> 00:18:56,880
probably coexistence takes a lot of room

529
00:18:56,880 --> 00:18:58,960
because of its complexity

530
00:18:58,960 --> 00:19:01,280
with the help of an external fpga we

531
00:19:01,280 --> 00:19:03,360
measured the jitter of the wi-fi to

532
00:19:03,360 --> 00:19:04,320
bluetooth seki

533
00:19:04,320 --> 00:19:06,880
line we modified the u-code in a couple

534
00:19:06,880 --> 00:19:08,559
of boards and we programmed

535
00:19:08,559 --> 00:19:10,799
them to transmit seki messages when

536
00:19:10,799 --> 00:19:12,640
receiving the same beacons

537
00:19:12,640 --> 00:19:14,640
jitter turned out to be gaussian with

538
00:19:14,640 --> 00:19:16,559
200 nanosecond deviation

539
00:19:16,559 --> 00:19:18,480
which makes it perfect for bluetooth

540
00:19:18,480 --> 00:19:20,320
coexistence

541
00:19:20,320 --> 00:19:23,200
so what about grand reject scheme for

542
00:19:23,200 --> 00:19:25,760
studying the seki protocol we focused at

543
00:19:25,760 --> 00:19:27,760
first on the grant rigid counters that

544
00:19:27,760 --> 00:19:28,080
are

545
00:19:28,080 --> 00:19:30,080
kept by the bluetooth firmware and that

546
00:19:30,080 --> 00:19:32,640
we can collect by using vendor-specific

547
00:19:32,640 --> 00:19:35,679
hci commands every time the bluetooth

548
00:19:35,679 --> 00:19:37,120
has something to transmit

549
00:19:37,120 --> 00:19:39,120
it checks the last grand indication

550
00:19:39,120 --> 00:19:40,720
received from the wi-fi

551
00:19:40,720 --> 00:19:43,039
and if access is granted then bluetooth

552
00:19:43,039 --> 00:19:44,880
transmits and increases the grant

553
00:19:44,880 --> 00:19:46,160
counter otherwise

554
00:19:46,160 --> 00:19:48,559
it increases the reject counter in this

555
00:19:48,559 --> 00:19:49,679
scenario we are

556
00:19:49,679 --> 00:19:51,840
watching a movie that we download over

557
00:19:51,840 --> 00:19:54,240
wi-fi listening audio over bluetooth

558
00:19:54,240 --> 00:19:55,200
headset

559
00:19:55,200 --> 00:19:57,200
at the beginning we see both grand and

560
00:19:57,200 --> 00:19:59,520
rigid counters are increasing almost

561
00:19:59,520 --> 00:20:00,320
linearly

562
00:20:00,320 --> 00:20:02,320
when we pause the video the two counters

563
00:20:02,320 --> 00:20:04,960
freeze this is expected because even if

564
00:20:04,960 --> 00:20:06,960
wi-fi keeps downloading the movie

565
00:20:06,960 --> 00:20:09,200
bluetooth is no more transmitting sound

566
00:20:09,200 --> 00:20:10,400
to the headset

567
00:20:10,400 --> 00:20:12,320
when we restart playing the video

568
00:20:12,320 --> 00:20:14,240
counters start increasing

569
00:20:14,240 --> 00:20:16,240
when the video download is interrupted

570
00:20:16,240 --> 00:20:18,240
by disconnecting from wifi

571
00:20:18,240 --> 00:20:20,960
we have no more rejects but grants keep

572
00:20:20,960 --> 00:20:22,960
increasing because the movie is still

573
00:20:22,960 --> 00:20:24,720
being played

574
00:20:24,720 --> 00:20:26,799
to prove that wi-fi can really hurt

575
00:20:26,799 --> 00:20:28,480
bluetooth and take control of the

576
00:20:28,480 --> 00:20:30,960
wireless channel in a selfish manner

577
00:20:30,960 --> 00:20:33,520
we added to yuko the few lines that

578
00:20:33,520 --> 00:20:34,000
check if

579
00:20:34,000 --> 00:20:36,640
a magic udp killer packet is received

580
00:20:36,640 --> 00:20:38,640
when that happens the u code stop

581
00:20:38,640 --> 00:20:41,280
transmitting grant messages to bluetooth

582
00:20:41,280 --> 00:20:44,000
you see this happens at 2.6 seconds when

583
00:20:44,000 --> 00:20:46,000
there are no more messages in the green

584
00:20:46,000 --> 00:20:47,120
diagram

585
00:20:47,120 --> 00:20:49,520
from there on we cannot hear sound from

586
00:20:49,520 --> 00:20:51,840
headset that means bluetooth keeps bane

587
00:20:51,840 --> 00:20:53,200
rejected

588
00:20:53,200 --> 00:20:55,200
and we also found that if the force at

589
00:20:55,200 --> 00:20:56,320
the pose is short

590
00:20:56,320 --> 00:20:58,559
then audio starts immediately when we

591
00:20:58,559 --> 00:21:00,159
transmit the magic udp

592
00:21:00,159 --> 00:21:03,120
bring to life packet otherwise bluetooth

593
00:21:03,120 --> 00:21:05,600
needs to reconnect the headset

594
00:21:05,600 --> 00:21:08,400
we tested this both on a nexus 5 and on

595
00:21:08,400 --> 00:21:10,720
development boards from cypress

596
00:21:10,720 --> 00:21:13,520
this experiment clearly demonstrates

597
00:21:13,520 --> 00:21:14,000
that

598
00:21:14,000 --> 00:21:16,159
a denial of service attack from the

599
00:21:16,159 --> 00:21:18,400
wi-fi site against bluetooth

600
00:21:18,400 --> 00:21:21,679
is really possible let's take a closer

601
00:21:21,679 --> 00:21:23,919
look now at the messages that bluetooth

602
00:21:23,919 --> 00:21:26,720
sends to wi-fi and if we can use such

603
00:21:26,720 --> 00:21:27,840
information for an

604
00:21:27,840 --> 00:21:30,480
attack these are the psychic time

605
00:21:30,480 --> 00:21:32,400
diagrams when we have a keyboard

606
00:21:32,400 --> 00:21:34,159
connected over bluetooth

607
00:21:34,159 --> 00:21:36,320
depending on the keyboard we can observe

608
00:21:36,320 --> 00:21:38,799
a seckey messages transmitted every 15

609
00:21:38,799 --> 00:21:40,480
or 30 milliseconds

610
00:21:40,480 --> 00:21:42,960
bluetooth sends these saki messages to

611
00:21:42,960 --> 00:21:45,200
inform wi-fi that it is going to pull

612
00:21:45,200 --> 00:21:46,000
the keyboard

613
00:21:46,000 --> 00:21:48,320
so that wi-fi the first channel access

614
00:21:48,320 --> 00:21:49,440
meanwhile

615
00:21:49,440 --> 00:21:52,240
in this diagram wi-fi is idle so there

616
00:21:52,240 --> 00:21:55,120
are no reject messages from wi-fi

617
00:21:55,120 --> 00:21:57,039
this is what happens when somebody is

618
00:21:57,039 --> 00:21:58,640
actually typing on the keyboard

619
00:21:58,640 --> 00:22:00,400
at the bottom we have the periodic

620
00:22:00,400 --> 00:22:02,960
sequence of saki messages we saw before

621
00:22:02,960 --> 00:22:05,840
one pole every 30 milliseconds on top we

622
00:22:05,840 --> 00:22:07,120
have the key presses

623
00:22:07,120 --> 00:22:09,440
sniffed by wireshark when capturing from

624
00:22:09,440 --> 00:22:11,120
the bluetooth interface

625
00:22:11,120 --> 00:22:13,520
as we are typing with moderate speed

626
00:22:13,520 --> 00:22:14,559
each keypress is

627
00:22:14,559 --> 00:22:16,880
separate from the others and we can also

628
00:22:16,880 --> 00:22:18,480
see the bluetooth message with key

629
00:22:18,480 --> 00:22:20,880
release following each key press

630
00:22:20,880 --> 00:22:23,600
in between we can see the hid data

631
00:22:23,600 --> 00:22:26,159
captured by wireshark with a specific

632
00:22:26,159 --> 00:22:28,880
event id that represents a keypress

633
00:22:28,880 --> 00:22:29,440
below

634
00:22:29,440 --> 00:22:31,200
we see the second messages that we

635
00:22:31,200 --> 00:22:33,440
filtered on the wi-fi chipset by

636
00:22:33,440 --> 00:22:35,919
selecting the same message type

637
00:22:35,919 --> 00:22:38,799
this demonstrates that at the wi-fi side

638
00:22:38,799 --> 00:22:39,280
we can

639
00:22:39,280 --> 00:22:42,080
easily distinguish saki messages related

640
00:22:42,080 --> 00:22:43,440
to key presses

641
00:22:43,440 --> 00:22:46,080
so the bottom line is that this clearly

642
00:22:46,080 --> 00:22:48,320
demonstrates that having access to the

643
00:22:48,320 --> 00:22:50,320
wi-fi chipset is enough

644
00:22:50,320 --> 00:22:52,720
for measuring keypress timings with very

645
00:22:52,720 --> 00:22:54,400
accurate resolution

646
00:22:54,400 --> 00:22:56,400
and we know that in some cases with the

647
00:22:56,400 --> 00:22:58,559
help of some artificial intelligence or

648
00:22:58,559 --> 00:23:00,000
classification technique

649
00:23:00,000 --> 00:23:02,400
this is enough for guessing what a user

650
00:23:02,400 --> 00:23:03,280
is typing

651
00:23:03,280 --> 00:23:05,200
we hence believe that without any

652
00:23:05,200 --> 00:23:06,400
further protection

653
00:23:06,400 --> 00:23:08,799
the seki interface can be used for

654
00:23:08,799 --> 00:23:09,440
mounting

655
00:23:09,440 --> 00:23:11,760
side channel attacks and we requested

656
00:23:11,760 --> 00:23:12,640
the cv

657
00:23:12,640 --> 00:23:14,400
for reporting the associated

658
00:23:14,400 --> 00:23:16,159
vulnerability

659
00:23:16,159 --> 00:23:19,280
so this cut the ground is yours again

660
00:23:19,280 --> 00:23:22,320
so as francesco has shown it is possible

661
00:23:22,320 --> 00:23:25,600
to attack bluetooth via wi-fi

662
00:23:25,600 --> 00:23:28,000
with some very simple coexistence

663
00:23:28,000 --> 00:23:29,039
mechanisms

664
00:23:29,039 --> 00:23:30,880
that might be present in many other

665
00:23:30,880 --> 00:23:32,720
coexistence protocols

666
00:23:32,720 --> 00:23:34,559
and just considering something like

667
00:23:34,559 --> 00:23:36,880
packet timing however

668
00:23:36,880 --> 00:23:39,600
there's one thing in the data sheet

669
00:23:39,600 --> 00:23:42,000
called wlan ram sharing which we still

670
00:23:42,000 --> 00:23:44,960
didn't talk about

671
00:23:45,360 --> 00:23:46,960
and i would call it the effect of when

672
00:23:46,960 --> 00:23:49,039
you spend too much time looking for

673
00:23:49,039 --> 00:23:51,919
side channels like you dig everywhere

674
00:23:51,919 --> 00:23:54,159
like here and there and there and there

675
00:23:54,159 --> 00:23:56,240
but then you miss the one big thing

676
00:23:56,240 --> 00:23:57,760
which is the wlan

677
00:23:57,760 --> 00:24:01,279
ground sharing so

678
00:24:01,279 --> 00:24:03,279
it is actually here so you can see like

679
00:24:03,279 --> 00:24:05,600
somewhere between bluetooth and wi-fi

680
00:24:05,600 --> 00:24:07,919
there is this connection and there are

681
00:24:07,919 --> 00:24:10,320
actually two errors for whatever reason

682
00:24:10,320 --> 00:24:12,640
and they only go in one direction for

683
00:24:12,640 --> 00:24:14,480
another reason

684
00:24:14,480 --> 00:24:17,760
and well it's it's a bit weird

685
00:24:17,760 --> 00:24:19,600
and there is nothing else written than

686
00:24:19,600 --> 00:24:21,600
this so i was like

687
00:24:21,600 --> 00:24:24,559
okay i want to find it where is it where

688
00:24:24,559 --> 00:24:26,559
is this shared rum

689
00:24:26,559 --> 00:24:30,640
um so where is it well then i started

690
00:24:30,640 --> 00:24:31,679
looking in

691
00:24:31,679 --> 00:24:35,039
the y studio and device studio has like

692
00:24:35,039 --> 00:24:38,159
a few symbols for the cypress boards

693
00:24:38,159 --> 00:24:41,360
that also include registers

694
00:24:41,360 --> 00:24:44,799
and nothing nothing called wlan wi-fi

695
00:24:44,799 --> 00:24:46,799
whatever also not an eco-existence which

696
00:24:46,799 --> 00:24:48,799
is just everything empty

697
00:24:48,799 --> 00:24:51,919
but then in the studio there's also

698
00:24:51,919 --> 00:24:54,799
one combo chip which is actually in a

699
00:24:54,799 --> 00:24:56,640
macbook pro as well

700
00:24:56,640 --> 00:24:58,880
and this one has slightly different

701
00:24:58,880 --> 00:25:00,000
symbols so i didn't look

702
00:25:00,000 --> 00:25:03,279
into this one at first and it has a

703
00:25:03,279 --> 00:25:04,960
couple of functions

704
00:25:04,960 --> 00:25:07,760
that are called a wlan buff something

705
00:25:07,760 --> 00:25:09,760
sometimes with one f sometimes with two

706
00:25:09,760 --> 00:25:13,200
f's so very consistent

707
00:25:13,360 --> 00:25:15,679
and then there is one function that

708
00:25:15,679 --> 00:25:17,520
actually is writing

709
00:25:17,520 --> 00:25:21,200
uh some stuff into a register

710
00:25:21,200 --> 00:25:25,559
in an area starting here a bit higher

711
00:25:25,559 --> 00:25:27,600
68.000

712
00:25:27,600 --> 00:25:30,480
and then it's writing a word called

713
00:25:30,480 --> 00:25:31,679
caffei by pex

714
00:25:31,679 --> 00:25:34,320
and then afterward it reads and so on

715
00:25:34,320 --> 00:25:34,720
like

716
00:25:34,720 --> 00:25:38,000
doing this in a certain manner if you

717
00:25:38,000 --> 00:25:41,120
don't do it exactly this way but just

718
00:25:41,120 --> 00:25:44,559
random so to say sometimes

719
00:25:44,559 --> 00:25:46,559
the bluetooth crashes while doing this

720
00:25:46,559 --> 00:25:48,960
but overall you can see some data so

721
00:25:48,960 --> 00:25:52,240
i had like the impression i might be in

722
00:25:52,240 --> 00:25:53,840
as soon as i was seeing

723
00:25:53,840 --> 00:25:57,120
something called 802 11 something

724
00:25:57,120 --> 00:26:00,799
in the strings that i got from this area

725
00:26:00,799 --> 00:26:03,039
but that was on the samsung galaxy s8

726
00:26:03,039 --> 00:26:04,720
and then i was like okay can i get it

727
00:26:04,720 --> 00:26:07,440
working on more devices and so on

728
00:26:07,440 --> 00:26:10,559
so i continue testing so what you do is

729
00:26:10,559 --> 00:26:12,799
not just reading then but obviously you

730
00:26:12,799 --> 00:26:13,600
start

731
00:26:13,600 --> 00:26:17,039
writing garbage um so this method once

732
00:26:17,039 --> 00:26:18,000
again proved

733
00:26:18,000 --> 00:26:20,640
very successful and the best thing is

734
00:26:20,640 --> 00:26:23,039
that a couple of devices actually

735
00:26:23,039 --> 00:26:25,360
produced a wi-fi crash lock so when they

736
00:26:25,360 --> 00:26:26,400
crash you would

737
00:26:26,400 --> 00:26:28,960
even get an image of the ram and this

738
00:26:28,960 --> 00:26:29,679
part even

739
00:26:29,679 --> 00:26:32,000
contains the share drum and then you

740
00:26:32,000 --> 00:26:33,520
might be able to infer

741
00:26:33,520 --> 00:26:35,760
some packet pointers and through those

742
00:26:35,760 --> 00:26:36,559
packet

743
00:26:36,559 --> 00:26:38,559
or not function pointers and stuff and

744
00:26:38,559 --> 00:26:40,159
with the function pointers

745
00:26:40,159 --> 00:26:42,720
you're actually able to set for example

746
00:26:42,720 --> 00:26:44,720
the program counter so you can now write

747
00:26:44,720 --> 00:26:45,279
data

748
00:26:45,279 --> 00:26:47,279
execute data set a program counter and

749
00:26:47,279 --> 00:26:48,720
stuff like this so you have

750
00:26:48,720 --> 00:26:51,039
a code execution and this even on the

751
00:26:51,039 --> 00:26:52,480
samsung galaxy s10

752
00:26:52,480 --> 00:26:54,320
and by the way the newest samsung galaxy

753
00:26:54,320 --> 00:26:56,960
s20 has the same chip

754
00:26:56,960 --> 00:27:00,159
so this should also work on them

755
00:27:00,159 --> 00:27:03,600
yeah so finally code execution

756
00:27:03,600 --> 00:27:06,799
within wifi via bluetooth and

757
00:27:06,799 --> 00:27:09,919
well now you might say okay

758
00:27:09,919 --> 00:27:13,120
on which devices does it work so here is

759
00:27:13,120 --> 00:27:14,000
a demo on

760
00:27:14,000 --> 00:27:16,000
the most recent macbook pro you can see

761
00:27:16,000 --> 00:27:18,559
it's really it's a one-liner

762
00:27:18,559 --> 00:27:21,360
i just write this one branch instruction

763
00:27:21,360 --> 00:27:22,880
actually within code so this time i'm

764
00:27:22,880 --> 00:27:24,480
not overwriting function pointer but i

765
00:27:24,480 --> 00:27:25,679
really write code

766
00:27:25,679 --> 00:27:27,760
and then you have a crash log that

767
00:27:27,760 --> 00:27:29,279
actually indicates

768
00:27:29,279 --> 00:27:31,039
that the program counter is there and

769
00:27:31,039 --> 00:27:33,760
you can even see wi-fi restarting on top

770
00:27:33,760 --> 00:27:35,600
and this video is in real time so this

771
00:27:35,600 --> 00:27:38,159
is a super fast super easy attack

772
00:27:38,159 --> 00:27:39,840
on the left hand side of bluetooth on

773
00:27:39,840 --> 00:27:41,679
the right hand side on wi-fi

774
00:27:41,679 --> 00:27:46,720
that's it so there is no separation

775
00:27:46,720 --> 00:27:49,200
and the devices on that it works are

776
00:27:49,200 --> 00:27:50,960
really a lot so initially i found the

777
00:27:50,960 --> 00:27:51,840
symbols

778
00:27:51,840 --> 00:27:55,039
on a macbook pro 2016. uh

779
00:27:55,039 --> 00:27:57,600
sadly i don't have that one with me so i

780
00:27:57,600 --> 00:27:58,159
only

781
00:27:58,159 --> 00:28:00,080
have rom number of it so i couldn't test

782
00:28:00,080 --> 00:28:01,200
it so that's why there is still

783
00:28:01,200 --> 00:28:04,799
dot then there is the data sheet of the

784
00:28:04,799 --> 00:28:06,080
nexus 5

785
00:28:06,080 --> 00:28:07,919
which indicates that there is this

786
00:28:07,919 --> 00:28:10,080
sharing even though

787
00:28:10,080 --> 00:28:12,320
i didn't find a shared run region on

788
00:28:12,320 --> 00:28:14,640
this one so this is a bit weird as well

789
00:28:14,640 --> 00:28:16,559
but i mean maybe i just didn't find it

790
00:28:16,559 --> 00:28:18,159
and maybe it's still vulnerable i don't

791
00:28:18,159 --> 00:28:18,720
know

792
00:28:18,720 --> 00:28:22,320
um but then on the newer devices

793
00:28:22,320 --> 00:28:24,080
there's a thing so this memory region

794
00:28:24,080 --> 00:28:26,080
the 68 something

795
00:28:26,080 --> 00:28:30,720
that is within this wlan buffer function

796
00:28:30,720 --> 00:28:33,520
is no longer referred but still you can

797
00:28:33,520 --> 00:28:35,200
write to it and still you get code

798
00:28:35,200 --> 00:28:36,240
execution

799
00:28:36,240 --> 00:28:38,240
and then there's the star on a couple of

800
00:28:38,240 --> 00:28:39,600
devices because

801
00:28:39,600 --> 00:28:41,840
on some of them i was even able to

802
00:28:41,840 --> 00:28:43,919
observe kernel panics and that's a weird

803
00:28:43,919 --> 00:28:45,200
thing

804
00:28:45,200 --> 00:28:49,279
so let's say the next stage is the pci

805
00:28:49,279 --> 00:28:52,399
exploit and or it's called express but i

806
00:28:52,399 --> 00:28:54,080
think it's more like exploit because it

807
00:28:54,080 --> 00:28:56,480
really seems to be broken

808
00:28:56,480 --> 00:28:59,360
and so when you write random stuff to

809
00:28:59,360 --> 00:29:00,080
that shared

810
00:29:00,080 --> 00:29:01,679
memory what happens is that you get a

811
00:29:01,679 --> 00:29:03,520
lot of crashes so this one is on another

812
00:29:03,520 --> 00:29:04,720
very recent

813
00:29:04,720 --> 00:29:07,919
macbook pro chip um and you can see

814
00:29:07,919 --> 00:29:09,520
like all the crash logs that i just

815
00:29:09,520 --> 00:29:12,399
generated by writing

816
00:29:12,399 --> 00:29:15,840
some garbage into the shared memory area

817
00:29:15,840 --> 00:29:18,159
and so on

818
00:29:18,159 --> 00:29:20,480
most of the time you would get into

819
00:29:20,480 --> 00:29:21,279
those

820
00:29:21,279 --> 00:29:23,679
in a certain amount of function that for

821
00:29:23,679 --> 00:29:26,039
example like this

822
00:29:26,039 --> 00:29:28,960
1693 one because this is probably doing

823
00:29:28,960 --> 00:29:30,720
some memory check or something and then

824
00:29:30,720 --> 00:29:31,120
this

825
00:29:31,120 --> 00:29:34,159
check fails but uh then you might even

826
00:29:34,159 --> 00:29:34,559
get

827
00:29:34,559 --> 00:29:36,960
the program counter under control again

828
00:29:36,960 --> 00:29:38,799
and then there are a lot of other funny

829
00:29:38,799 --> 00:29:40,240
weird stuffs like

830
00:29:40,240 --> 00:29:43,039
failed to create a debugging this is i

831
00:29:43,039 --> 00:29:44,799
think during firmware initialization

832
00:29:44,799 --> 00:29:46,480
when something breaks there

833
00:29:46,480 --> 00:29:49,279
and then even some kind of bit flip

834
00:29:49,279 --> 00:29:50,159
stuff

835
00:29:50,159 --> 00:29:52,799
all broken within this pci express

836
00:29:52,799 --> 00:29:55,200
communication probably

837
00:29:55,200 --> 00:29:59,039
and so you might even get

838
00:29:59,039 --> 00:30:02,080
a bit more out of this so i would call

839
00:30:02,080 --> 00:30:04,000
this like the most hip advisor

840
00:30:04,000 --> 00:30:06,320
i ever wrote because it is really not

841
00:30:06,320 --> 00:30:07,360
doing much

842
00:30:07,360 --> 00:30:10,399
all it does is randomly writing stuff

843
00:30:10,399 --> 00:30:13,360
to a shared memory region i don't get

844
00:30:13,360 --> 00:30:15,200
any coverage or something but at least i

845
00:30:15,200 --> 00:30:17,440
get crashes

846
00:30:17,440 --> 00:30:21,360
and then well not only wifi crashes but

847
00:30:21,360 --> 00:30:23,279
actually um colonel panics

848
00:30:23,279 --> 00:30:26,320
and those kernel panics were like

849
00:30:26,320 --> 00:30:28,559
on the samsung galaxy s10e but only if i

850
00:30:28,559 --> 00:30:29,919
had android 9

851
00:30:29,919 --> 00:30:32,640
and then also on the iphone 8 on ios 13

852
00:30:32,640 --> 00:30:35,120
the iphone 6 and is 12 and so on

853
00:30:35,120 --> 00:30:38,159
um then even another mac os

854
00:30:38,159 --> 00:30:39,760
issue but i think this one is just

855
00:30:39,760 --> 00:30:41,520
within the boot of driver so

856
00:30:41,520 --> 00:30:44,799
different one um and this is really fun

857
00:30:44,799 --> 00:30:46,480
so here you can see it on

858
00:30:46,480 --> 00:30:48,720
an iphone 6. the first thing that

859
00:30:48,720 --> 00:30:50,640
happens is again wi-fi disconnects and

860
00:30:50,640 --> 00:30:52,720
then you would see again the reboot and

861
00:30:52,720 --> 00:30:54,159
so on

862
00:30:54,159 --> 00:30:56,240
and definitely a different type of

863
00:30:56,240 --> 00:30:58,080
kernel panic and this just proves

864
00:30:58,080 --> 00:31:00,320
how bad these drivers are even those

865
00:31:00,320 --> 00:31:01,840
days so even after they have been

866
00:31:01,840 --> 00:31:04,000
exploited a couple of times

867
00:31:04,000 --> 00:31:06,320
there are very simple bugs very easy to

868
00:31:06,320 --> 00:31:07,919
reproduce with this method

869
00:31:07,919 --> 00:31:11,039
that immediately kernel panic devices so

870
00:31:11,039 --> 00:31:11,919
there is still

871
00:31:11,919 --> 00:31:14,960
room for improvement

872
00:31:16,240 --> 00:31:18,000
so you might wonder how the world looks

873
00:31:18,000 --> 00:31:19,760
like for other chips because

874
00:31:19,760 --> 00:31:22,720
uh probably other chips might be

875
00:31:22,720 --> 00:31:24,159
vulnerable as well

876
00:31:24,159 --> 00:31:26,080
they also have coexistence interfaces

877
00:31:26,080 --> 00:31:27,919
and so on

878
00:31:27,919 --> 00:31:30,000
and well there is one trick as a reverse

879
00:31:30,000 --> 00:31:32,320
engineer because as a reverse engineer

880
00:31:32,320 --> 00:31:35,120
you would read specifications backwards

881
00:31:35,120 --> 00:31:36,320
of course

882
00:31:36,320 --> 00:31:37,279
and if you read the bluetooth

883
00:31:37,279 --> 00:31:39,679
specification backwards so you go to the

884
00:31:39,679 --> 00:31:41,440
very last page which just

885
00:31:41,440 --> 00:31:43,600
it only has the bluetooth logo and then

886
00:31:43,600 --> 00:31:45,440
the second last page so this is the

887
00:31:45,440 --> 00:31:47,279
second last page as you can see you can

888
00:31:47,279 --> 00:31:48,159
check it out

889
00:31:48,159 --> 00:31:50,159
and it's about wireless coexistence

890
00:31:50,159 --> 00:31:51,360
interface 2

891
00:31:51,360 --> 00:31:54,559
which is mws and so on so the mobile

892
00:31:54,559 --> 00:31:55,760
wireless standards

893
00:31:55,760 --> 00:31:59,120
which is coexistence with lte so

894
00:31:59,120 --> 00:32:01,039
this one is again just a very simple

895
00:32:01,039 --> 00:32:02,559
serial protocol

896
00:32:02,559 --> 00:32:05,679
for hardwired coexistence as the stuff

897
00:32:05,679 --> 00:32:07,919
that francesco was showing to you

898
00:32:07,919 --> 00:32:12,559
but this time for lte yeah

899
00:32:12,559 --> 00:32:14,080
so there might be even more chips

900
00:32:14,080 --> 00:32:16,799
affected and we even saw mws being used

901
00:32:16,799 --> 00:32:17,039
on

902
00:32:17,039 --> 00:32:20,399
iphones so uh they are very likely also

903
00:32:20,399 --> 00:32:21,360
attackable

904
00:32:21,360 --> 00:32:24,480
into the lte direction

905
00:32:24,480 --> 00:32:27,519
and well i think almost everyone has

906
00:32:27,519 --> 00:32:30,000
proprietary coexistence features

907
00:32:30,000 --> 00:32:32,000
and a couple of vendors also mentioned

908
00:32:32,000 --> 00:32:34,399
them briefly in their data sheets

909
00:32:34,399 --> 00:32:36,480
so we asked procter if we could also

910
00:32:36,480 --> 00:32:38,159
include other wireless manufacturers

911
00:32:38,159 --> 00:32:41,200
into the responsive disclosure process

912
00:32:41,200 --> 00:32:43,120
and they say it yes we can so this is

913
00:32:43,120 --> 00:32:46,000
actually a very nice thing because

914
00:32:46,000 --> 00:32:48,960
uh usually they were like yeah let's do

915
00:32:48,960 --> 00:32:51,440
this like slow and stuff and so on right

916
00:32:51,440 --> 00:32:53,279
but this time they were like yes include

917
00:32:53,279 --> 00:32:54,640
others because others might be

918
00:32:54,640 --> 00:32:56,320
vulnerable and that's

919
00:32:56,320 --> 00:32:59,679
very nice of them and then a couple of

920
00:32:59,679 --> 00:33:01,840
manufacturers replied like yeah no we

921
00:33:01,840 --> 00:33:03,600
are not vulnerable to this

922
00:33:03,600 --> 00:33:06,559
because they don't even separate

923
00:33:06,559 --> 00:33:08,720
wireless cores so the idea is they just

924
00:33:08,720 --> 00:33:10,960
have one core and on that core they have

925
00:33:10,960 --> 00:33:11,600
like

926
00:33:11,600 --> 00:33:13,919
wi-fi bluetooth or bluetooth sigby

927
00:33:13,919 --> 00:33:14,799
whatever

928
00:33:14,799 --> 00:33:17,760
running at once so you might say yeah by

929
00:33:17,760 --> 00:33:18,640
definition

930
00:33:18,640 --> 00:33:20,480
you cannot escalate between those

931
00:33:20,480 --> 00:33:22,559
because they are already

932
00:33:22,559 --> 00:33:25,039
equivalent in terms of code execution

933
00:33:25,039 --> 00:33:26,559
but something that is still

934
00:33:26,559 --> 00:33:28,880
interesting are those operating system

935
00:33:28,880 --> 00:33:30,720
based side channels so when suddenly

936
00:33:30,720 --> 00:33:31,600
timings

937
00:33:31,600 --> 00:33:35,919
between wifi and bluetooth both depend

938
00:33:35,919 --> 00:33:39,200
on the very same

939
00:33:39,200 --> 00:33:41,600
chip and not just on some random

940
00:33:41,600 --> 00:33:43,120
collisions over the air there might

941
00:33:43,120 --> 00:33:44,640
still be predictable

942
00:33:44,640 --> 00:33:46,720
stuff there might still be stuff that

943
00:33:46,720 --> 00:33:50,720
you can influence from higher layers

944
00:33:51,760 --> 00:33:54,399
so as a summary what we achieved with

945
00:33:54,399 --> 00:33:56,640
the spectra attacks so far is that

946
00:33:56,640 --> 00:33:58,559
if you have a bluetooth rce on a

947
00:33:58,559 --> 00:34:00,799
broadcom chip you can actually cause

948
00:34:00,799 --> 00:34:03,919
wi-fi driver kernel panics of different

949
00:34:03,919 --> 00:34:04,799
kinds

950
00:34:04,799 --> 00:34:07,200
you can also get some information about

951
00:34:07,200 --> 00:34:07,919
the

952
00:34:07,919 --> 00:34:09,599
shared run so you have information

953
00:34:09,599 --> 00:34:11,199
disclosure and

954
00:34:11,199 --> 00:34:12,719
we have code execution and in the

955
00:34:12,719 --> 00:34:14,399
opposite direction if you have a wi-fi

956
00:34:14,399 --> 00:34:15,119
rce

957
00:34:15,119 --> 00:34:16,960
you can start attacking bluetooth with

958
00:34:16,960 --> 00:34:18,399
denial of service

959
00:34:18,399 --> 00:34:20,560
and also get information and disclosure

960
00:34:20,560 --> 00:34:23,839
via keypress timings

961
00:34:25,440 --> 00:34:27,359
if you have further questions there will

962
00:34:27,359 --> 00:34:29,359
be a q a afterwards and of course you

963
00:34:29,359 --> 00:34:30,159
can also write

964
00:34:30,159 --> 00:34:33,359
emails to us or ask me on twitter

965
00:34:33,359 --> 00:34:35,839
thanks for listening

966
00:34:38,320 --> 00:34:42,159
hi so thanks for tuning in

967
00:34:42,159 --> 00:34:43,520
i've already seen quite a lot of

968
00:34:43,520 --> 00:34:45,679
questions in the chat and though

969
00:34:45,679 --> 00:34:48,800
and what i want to add first is that i

970
00:34:48,800 --> 00:34:50,960
tested things again on the most recent

971
00:34:50,960 --> 00:34:52,800
ios 13.6 and

972
00:34:52,800 --> 00:34:55,520
also catalina 10 15 sticks and it's

973
00:34:55,520 --> 00:34:56,239
still

974
00:34:56,239 --> 00:34:58,880
unpatched so uh i guess it's like

975
00:34:58,880 --> 00:35:00,240
unfixable because it's

976
00:35:00,240 --> 00:35:03,119
very low in the hardware um the only

977
00:35:03,119 --> 00:35:04,400
thing that they fixed it that

978
00:35:04,400 --> 00:35:07,440
you can no longer send certain hci

979
00:35:07,440 --> 00:35:08,800
commands to right around from the

980
00:35:08,800 --> 00:35:10,400
operating system into the chip but this

981
00:35:10,400 --> 00:35:11,440
is something that

982
00:35:11,440 --> 00:35:14,640
you can bypass if you are root and it

983
00:35:14,640 --> 00:35:15,280
doesn't

984
00:35:15,280 --> 00:35:17,280
like help anything against code

985
00:35:17,280 --> 00:35:18,320
execution

986
00:35:18,320 --> 00:35:20,320
um then there's another question that

987
00:35:20,320 --> 00:35:21,599
might also be

988
00:35:21,599 --> 00:35:25,040
for francesco uh which is if we can

989
00:35:25,040 --> 00:35:26,800
explain a little bit more

990
00:35:26,800 --> 00:35:29,440
how the side channel measurement works

991
00:35:29,440 --> 00:35:33,119
from the wi-fi side of the chip

992
00:35:33,280 --> 00:35:35,520
yeah i see the question and of course if

993
00:35:35,520 --> 00:35:37,119
you already have access to the bluetooth

994
00:35:37,119 --> 00:35:37,920
chip you can

995
00:35:37,920 --> 00:35:40,160
read the information directly there but

996
00:35:40,160 --> 00:35:41,760
the attack was sold differently

997
00:35:41,760 --> 00:35:42,880
basically here

998
00:35:42,880 --> 00:35:44,880
we imagine that you have access to the

999
00:35:44,880 --> 00:35:46,640
wi-fi but you don't have access to

1000
00:35:46,640 --> 00:35:47,520
bluetooth

1001
00:35:47,520 --> 00:35:51,040
and so you can use the information that

1002
00:35:51,040 --> 00:35:51,920
are provided

1003
00:35:51,920 --> 00:35:54,960
to wi-fi for inferring uh the timings

1004
00:35:54,960 --> 00:35:55,599
that

1005
00:35:55,599 --> 00:35:58,480
are actually only available to bluetooth

1006
00:35:58,480 --> 00:35:59,760
so in this case

1007
00:35:59,760 --> 00:36:03,200
if you have this modified the u code

1008
00:36:03,200 --> 00:36:06,640
which would be absolutely not detectable

1009
00:36:06,640 --> 00:36:07,760
from the host

1010
00:36:07,760 --> 00:36:11,200
so you can monitor these bluetooth

1011
00:36:11,200 --> 00:36:13,200
timings and you can actually transmit

1012
00:36:13,200 --> 00:36:15,200
this information directly from the u

1013
00:36:15,200 --> 00:36:15,680
code

1014
00:36:15,680 --> 00:36:19,440
into a wi-fi frames without nobody

1015
00:36:19,440 --> 00:36:22,880
understanding that you are doing this

1016
00:36:22,880 --> 00:36:26,079
so i hope this explains better the kind

1017
00:36:26,079 --> 00:36:29,839
of attack we were thinking about

1018
00:36:31,839 --> 00:36:33,359
oh yeah then there's another question

1019
00:36:33,359 --> 00:36:35,040
which is like if these attacks can be

1020
00:36:35,040 --> 00:36:36,160
done remotely

1021
00:36:36,160 --> 00:36:38,880
and they need to be changed so we have a

1022
00:36:38,880 --> 00:36:40,079
chain so we have

1023
00:36:40,079 --> 00:36:42,160
uh frankenstein for example to do some

1024
00:36:42,160 --> 00:36:43,680
fuzzing and to find

1025
00:36:43,680 --> 00:36:45,520
uh over the air remote code execution

1026
00:36:45,520 --> 00:36:47,839
within bluetooth and then we can chain

1027
00:36:47,839 --> 00:36:48,720
this uh

1028
00:36:48,720 --> 00:36:50,560
and so frankenstein is something that we

1029
00:36:50,560 --> 00:36:52,240
are going to present

1030
00:36:52,240 --> 00:36:54,079
next week at youthnext if you want to

1031
00:36:54,079 --> 00:36:56,560
see it so this is kind of part one and

1032
00:36:56,560 --> 00:36:58,560
part two of the research

1033
00:36:58,560 --> 00:37:01,440
uh and another question in the chat was

1034
00:37:01,440 --> 00:37:01,920
if

1035
00:37:01,920 --> 00:37:04,800
you have a different rf front end so

1036
00:37:04,800 --> 00:37:05,920
let's say if you're a different

1037
00:37:05,920 --> 00:37:08,720
rf front end for wifi and bluetooth if

1038
00:37:08,720 --> 00:37:10,079
that prevents the attack

1039
00:37:10,079 --> 00:37:12,079
and now the issue is that a smartphone

1040
00:37:12,079 --> 00:37:13,920
is like really really small and it has

1041
00:37:13,920 --> 00:37:15,839
nearby antennas so even if you have like

1042
00:37:15,839 --> 00:37:17,599
two antennas that are nearby they

1043
00:37:17,599 --> 00:37:18,720
interfere

1044
00:37:18,720 --> 00:37:21,520
and because of the interference you

1045
00:37:21,520 --> 00:37:22,640
actually

1046
00:37:22,640 --> 00:37:26,079
um have to

1047
00:37:26,079 --> 00:37:28,480
make this so if you don't want to have

1048
00:37:28,480 --> 00:37:30,320
performance impact you still have to do

1049
00:37:30,320 --> 00:37:30,960
some

1050
00:37:30,960 --> 00:37:33,280
packet based decisions and that is

1051
00:37:33,280 --> 00:37:34,480
something that you would do over a

1052
00:37:34,480 --> 00:37:35,440
serial line

1053
00:37:35,440 --> 00:37:36,960
so that means even between different

1054
00:37:36,960 --> 00:37:39,040
vendors with different rf front ends

1055
00:37:39,040 --> 00:37:40,160
there are

1056
00:37:40,160 --> 00:37:42,000
serial enhanced co-existence protocols

1057
00:37:42,000 --> 00:37:50,079
just under different names and so on um

1058
00:37:50,079 --> 00:37:52,000
yeah then someone asked like if the

1059
00:37:52,000 --> 00:37:54,160
newest android and so on would like

1060
00:37:54,160 --> 00:37:57,920
help against those issues and i don't

1061
00:37:57,920 --> 00:37:59,440
think that you can do much

1062
00:37:59,440 --> 00:38:02,160
from an operating system side so it's

1063
00:38:02,160 --> 00:38:03,599
like really something within the

1064
00:38:03,599 --> 00:38:04,240
hardware

1065
00:38:04,240 --> 00:38:06,880
and that needs to be rebuilt in the

1066
00:38:06,880 --> 00:38:09,839
hardware design

1067
00:38:16,560 --> 00:38:18,720
yeah so then there's question like how

1068
00:38:18,720 --> 00:38:20,720
the collaboration with the hardware

1069
00:38:20,720 --> 00:38:23,040
vendors were us and stuff like this so

1070
00:38:23,040 --> 00:38:26,160
um i mean we talked to quite a lot of

1071
00:38:26,160 --> 00:38:28,000
vendors and some of them just said like

1072
00:38:28,000 --> 00:38:30,240
we are not vulnerable because um

1073
00:38:30,240 --> 00:38:33,440
we already have a shared core so for

1074
00:38:33,440 --> 00:38:34,320
example

1075
00:38:34,320 --> 00:38:36,720
i think qualcomm has like a combined

1076
00:38:36,720 --> 00:38:37,359
core for

1077
00:38:37,359 --> 00:38:40,400
wi-fi and bluetooth so they are kind of

1078
00:38:40,400 --> 00:38:42,079
not vulnerable because the code

1079
00:38:42,079 --> 00:38:44,079
execution is already there

1080
00:38:44,079 --> 00:38:46,720
uh so it depends a bit on the definition

1081
00:38:46,720 --> 00:38:48,480
and then other vendors to set like yeah

1082
00:38:48,480 --> 00:38:50,079
we are like vulnerable to the design of

1083
00:38:50,079 --> 00:38:51,680
service but not to the code execution

1084
00:38:51,680 --> 00:38:52,320
and so on

1085
00:38:52,320 --> 00:38:54,160
so it's something like you really need

1086
00:38:54,160 --> 00:38:55,920
to build the box the vendor would never

1087
00:38:55,920 --> 00:38:56,640
say like

1088
00:38:56,640 --> 00:38:59,119
oh no we are affected or something so

1089
00:38:59,119 --> 00:39:00,160
you really need to

1090
00:39:00,160 --> 00:39:01,920
read the documentation build the poc

1091
00:39:01,920 --> 00:39:03,359
until they say oh we need to pick

1092
00:39:03,359 --> 00:39:04,720
something i guess

1093
00:39:04,720 --> 00:39:06,320
but i mean at least they got the

1094
00:39:06,320 --> 00:39:08,400
information um

1095
00:39:08,400 --> 00:39:10,560
quite a time before the talk and so they

1096
00:39:10,560 --> 00:39:12,560
have a chance to rebuild at least

1097
00:39:12,560 --> 00:39:16,078
the newer chips

1098
00:39:18,740 --> 00:39:20,960
[Music]

1099
00:39:20,960 --> 00:39:23,040
now someone asks which kind of other

1100
00:39:23,040 --> 00:39:24,720
devices are vulnerable

1101
00:39:24,720 --> 00:39:27,280
so um i mean everything that has like

1102
00:39:27,280 --> 00:39:29,119
bluetooth and wifi

1103
00:39:29,119 --> 00:39:32,000
uh it it really depends i mean for for

1104
00:39:32,000 --> 00:39:33,599
broadcom i can't say that like some

1105
00:39:33,599 --> 00:39:35,280
smartwatches have it

1106
00:39:35,280 --> 00:39:39,520
but it's it's a bit random i mean nobody

1107
00:39:39,520 --> 00:39:40,560
really writes

1108
00:39:40,560 --> 00:39:43,520
uh which chips are in which devices i

1109
00:39:43,520 --> 00:39:44,079
think

1110
00:39:44,079 --> 00:39:47,520
uh that apple has like 25

1111
00:39:47,520 --> 00:39:50,240
of of the chips that that broadcom

1112
00:39:50,240 --> 00:39:52,320
seller or something go to apple

1113
00:39:52,320 --> 00:39:54,480
but i mean there are other vendors other

1114
00:39:54,480 --> 00:39:55,440
devices it's

1115
00:39:55,440 --> 00:39:58,320
hard to tell

1116
00:40:06,720 --> 00:40:10,000
yeah i don't really see any more

1117
00:40:10,000 --> 00:40:13,440
questions so thanks for listening

1118
00:40:13,440 --> 00:40:15,760
and there's also a longer q a session

1119
00:40:15,760 --> 00:40:16,800
tomorrow at

1120
00:40:16,800 --> 00:40:18,800
defcon if you like come up with another

1121
00:40:18,800 --> 00:40:19,920
question

1122
00:40:19,920 --> 00:40:24,000
you might also ask it there

1123
00:40:24,000 --> 00:40:26,720
okay thank you

1124
00:40:27,040 --> 00:40:29,839
thank you

