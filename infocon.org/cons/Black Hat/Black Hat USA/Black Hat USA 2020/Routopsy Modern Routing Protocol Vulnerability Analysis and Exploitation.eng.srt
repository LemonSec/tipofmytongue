1
00:00:04,360 --> 00:00:14,160
[Music]

2
00:00:14,960 --> 00:00:16,960
hello and welcome to our talk titled

3
00:00:16,960 --> 00:00:18,640
root topsy where we'll discuss modern

4
00:00:18,640 --> 00:00:20,800
routine protocol vulnerability analysis

5
00:00:20,800 --> 00:00:23,519
and exploitation i'm shimon jakovsky

6
00:00:23,519 --> 00:00:24,880
i've been hacking at corporate networks

7
00:00:24,880 --> 00:00:26,640
for over three years before that i was a

8
00:00:26,640 --> 00:00:28,320
student at university of pretoria

9
00:00:28,320 --> 00:00:31,039
i enjoy application security and writing

10
00:00:31,039 --> 00:00:31,840
code

11
00:00:31,840 --> 00:00:33,520
you can catch me on twitter at the goat

12
00:00:33,520 --> 00:00:36,000
farmer hi everybody my name is tyron

13
00:00:36,000 --> 00:00:36,399
kemp

14
00:00:36,399 --> 00:00:38,239
i have roughly four years of networking

15
00:00:38,239 --> 00:00:40,000
and network security experience

16
00:00:40,000 --> 00:00:41,360
i'm working towards three years of pen

17
00:00:41,360 --> 00:00:43,440
testing experience my twitter android is

18
00:00:43,440 --> 00:00:44,559
tcampax

19
00:00:44,559 --> 00:00:47,039
i don't really know how twitter works or

20
00:00:47,039 --> 00:00:48,640
any application for that matter

21
00:00:48,640 --> 00:00:51,440
i enjoy hacking infrastructure myself

22
00:00:51,440 --> 00:00:53,120
and simon are both security analysts at

23
00:00:53,120 --> 00:00:54,320
orange civil defense

24
00:00:54,320 --> 00:00:56,160
we're part of the census team and we

25
00:00:56,160 --> 00:00:57,360
want to become your neighbour

26
00:00:57,360 --> 00:00:58,719
and what we mean by that is we want to

27
00:00:58,719 --> 00:01:00,719
show you how to identify some cool

28
00:01:00,719 --> 00:01:02,719
vulnerabilities using wireshark um

29
00:01:02,719 --> 00:01:05,360
how our initial attempts looked at at

30
00:01:05,360 --> 00:01:06,720
performing these exploit on these

31
00:01:06,720 --> 00:01:07,439
vulnerable

32
00:01:07,439 --> 00:01:09,760
protocols what are the impacts of these

33
00:01:09,760 --> 00:01:10,640
expectations

34
00:01:10,640 --> 00:01:12,479
and some of the challenges that we face

35
00:01:12,479 --> 00:01:14,080
or you may face in attacking these

36
00:01:14,080 --> 00:01:14,799
protocols

37
00:01:14,799 --> 00:01:17,439
and then finally our toolkit attempts to

38
00:01:17,439 --> 00:01:20,159
address some of these challenges

39
00:01:20,159 --> 00:01:22,560
so we went on some pen tests and on

40
00:01:22,560 --> 00:01:24,080
reoccurring occasions we saw these

41
00:01:24,080 --> 00:01:25,680
dynamic reading protocols and first off

42
00:01:25,680 --> 00:01:27,360
redundancy protocols being

43
00:01:27,360 --> 00:01:29,840
played into some sort of a user network

44
00:01:29,840 --> 00:01:30,560
space

45
00:01:30,560 --> 00:01:33,119
so i took it would like to you know

46
00:01:33,119 --> 00:01:34,640
tilku we'd like to include a bunch of

47
00:01:34,640 --> 00:01:36,320
network related attacks but for now

48
00:01:36,320 --> 00:01:37,520
we're focusing on the

49
00:01:37,520 --> 00:01:40,799
these two classes and they are similar

50
00:01:40,799 --> 00:01:42,079
in the way that you can manipulate

51
00:01:42,079 --> 00:01:44,320
traffic flows but for now understand

52
00:01:44,320 --> 00:01:46,159
that dynamic routing protocols

53
00:01:46,159 --> 00:01:48,320
root traffic between multiple networks

54
00:01:48,320 --> 00:01:50,320
whereas a first stop redundancy protocol

55
00:01:50,320 --> 00:01:52,840
is more of a high availability

56
00:01:52,840 --> 00:01:55,840
mechanism so there's a lot of

57
00:01:55,840 --> 00:01:57,680
acronyms and jargon and alphabet soup

58
00:01:57,680 --> 00:01:59,680
going to be thrown at you

59
00:01:59,680 --> 00:02:02,159
please try and stay with us for the some

60
00:02:02,159 --> 00:02:04,159
of the the fhrp sounds similar to the

61
00:02:04,159 --> 00:02:05,840
drp so it gets confusing

62
00:02:05,840 --> 00:02:08,399
but in the drp stack we're going to

63
00:02:08,399 --> 00:02:10,399
focus on eigrp and ospf

64
00:02:10,399 --> 00:02:12,319
and the fhrp stack we're going to focus

65
00:02:12,319 --> 00:02:14,080
on hsrp

66
00:02:14,080 --> 00:02:16,959
during this talk so why are we doing

67
00:02:16,959 --> 00:02:17,360
this

68
00:02:17,360 --> 00:02:19,280
like i said with on multiple painters we

69
00:02:19,280 --> 00:02:21,280
saw these things being bled into

70
00:02:21,280 --> 00:02:23,280
different networks and it's we're not

71
00:02:23,280 --> 00:02:24,560
finding these um

72
00:02:24,560 --> 00:02:26,720
vulnerabilities in certain topologies or

73
00:02:26,720 --> 00:02:28,080
bound to a certain industry

74
00:02:28,080 --> 00:02:29,840
we're in about we're seeing them in a

75
00:02:29,840 --> 00:02:31,120
bunch of different corporate networks

76
00:02:31,120 --> 00:02:32,239
being at isps

77
00:02:32,239 --> 00:02:35,200
being at banks being a smaller type of

78
00:02:35,200 --> 00:02:36,800
we're really seeing them all over the

79
00:02:36,800 --> 00:02:38,160
show

80
00:02:38,160 --> 00:02:40,800
additionally these dynamic reading

81
00:02:40,800 --> 00:02:42,959
protocols are being used in kubernetes

82
00:02:42,959 --> 00:02:44,800
kubernetes makes use of container

83
00:02:44,800 --> 00:02:46,000
network interfaces

84
00:02:46,000 --> 00:02:49,120
or often referred to as cni's and

85
00:02:49,120 --> 00:02:51,519
for example you get a cni called ramana

86
00:02:51,519 --> 00:02:53,200
which makes use of ospf

87
00:02:53,200 --> 00:02:54,560
and then there's another one called

88
00:02:54,560 --> 00:02:58,159
calico which makes use of pgp

89
00:02:58,159 --> 00:03:00,319
so we're going to give you a little bit

90
00:03:00,319 --> 00:03:02,000
of a background on what the purposes of

91
00:03:02,000 --> 00:03:02,879
a drp and

92
00:03:02,879 --> 00:03:05,680
fhrp is but before we do that let's

93
00:03:05,680 --> 00:03:07,200
explain what a static group is

94
00:03:07,200 --> 00:03:09,599
so if i want to route from the 10

95
00:03:09,599 --> 00:03:11,360
network to the 40 network i need to add

96
00:03:11,360 --> 00:03:12,800
a route from router a

97
00:03:12,800 --> 00:03:15,599
to router b and for it to be 2 to c and

98
00:03:15,599 --> 00:03:16,879
then you need to take care of the rim

99
00:03:16,879 --> 00:03:18,319
turn part as well so you need to add a

100
00:03:18,319 --> 00:03:19,360
router back

101
00:03:19,360 --> 00:03:21,280
a route back from root through to c

102
00:03:21,280 --> 00:03:23,120
through to b and root to b through

103
00:03:23,120 --> 00:03:24,720
to a so that's quite tedious just

104
00:03:24,720 --> 00:03:26,640
explaining like static routing between

105
00:03:26,640 --> 00:03:27,440
three little net

106
00:03:27,440 --> 00:03:29,360
three little routers so now imagine

107
00:03:29,360 --> 00:03:31,200
yourself in this large

108
00:03:31,200 --> 00:03:33,360
corporate network with 100 routers and a

109
00:03:33,360 --> 00:03:34,480
thousand different networks

110
00:03:34,480 --> 00:03:35,680
and now you need to configure all these

111
00:03:35,680 --> 00:03:37,760
static routes um indicated by the blue

112
00:03:37,760 --> 00:03:38,879
arrows on the slide

113
00:03:38,879 --> 00:03:40,799
and then you probably need to take care

114
00:03:40,799 --> 00:03:42,879
of some high availability as well so you

115
00:03:42,879 --> 00:03:43,280
need to go

116
00:03:43,280 --> 00:03:45,200
configure extra static routes with

117
00:03:45,200 --> 00:03:46,720
different metrics and priorities to

118
00:03:46,720 --> 00:03:47,840
ensure that you can

119
00:03:47,840 --> 00:03:50,000
have failover or high availability in

120
00:03:50,000 --> 00:03:51,440
your network so that's not really a

121
00:03:51,440 --> 00:03:52,560
scalable solution

122
00:03:52,560 --> 00:03:54,319
so that's why we have dynamic routing

123
00:03:54,319 --> 00:03:56,239
protocols so instead of configuring

124
00:03:56,239 --> 00:03:58,239
these bunches of these bunch of static

125
00:03:58,239 --> 00:04:00,480
routes you can configure a protocol like

126
00:04:00,480 --> 00:04:03,280
ospf or eigrp or

127
00:04:03,280 --> 00:04:05,680
etc etc on your router and it will

128
00:04:05,680 --> 00:04:06,799
become a neighbor with

129
00:04:06,799 --> 00:04:09,040
its adjacent router and the neighboring

130
00:04:09,040 --> 00:04:10,480
concept is something that we will

131
00:04:10,480 --> 00:04:13,439
refer to throughout the talk so once you

132
00:04:13,439 --> 00:04:15,360
configure these protocols on the routers

133
00:04:15,360 --> 00:04:16,880
um it will take care of automatically

134
00:04:16,880 --> 00:04:18,478
sharing the network information and it

135
00:04:18,478 --> 00:04:20,079
will also take care of the

136
00:04:20,079 --> 00:04:22,400
automatic like failover if if a link

137
00:04:22,400 --> 00:04:24,639
where to drop

138
00:04:24,639 --> 00:04:26,720
in terms of first op redundancy

139
00:04:26,720 --> 00:04:28,560
protocols um

140
00:04:28,560 --> 00:04:30,560
is sort of a logical group between

141
00:04:30,560 --> 00:04:32,240
created between an active and a standby

142
00:04:32,240 --> 00:04:33,840
group a virtual mac address is assigned

143
00:04:33,840 --> 00:04:35,440
to this logical grouping

144
00:04:35,440 --> 00:04:38,479
and should the active device fail over

145
00:04:38,479 --> 00:04:40,800
then the virtual mac then the new active

146
00:04:40,800 --> 00:04:42,479
appointed router will respond to this

147
00:04:42,479 --> 00:04:43,600
virtual mac address

148
00:04:43,600 --> 00:04:46,639
so there might be a network failure but

149
00:04:46,639 --> 00:04:48,160
it would be transparent to the user and

150
00:04:48,160 --> 00:04:51,120
the traffic which is flow as expected

151
00:04:51,120 --> 00:04:53,759
so simon don't you want to show us where

152
00:04:53,759 --> 00:04:55,040
you can find these vulnerabilities or

153
00:04:55,040 --> 00:04:56,160
how to look for them

154
00:04:56,160 --> 00:04:58,320
yeah so how can we look for it well

155
00:04:58,320 --> 00:05:00,000
let's open up a packet capture

156
00:05:00,000 --> 00:05:02,160
for instance wireshark and if we take a

157
00:05:02,160 --> 00:05:04,720
look at the very first cap

158
00:05:04,720 --> 00:05:07,360
pack we've captured it's an eigrp hello

159
00:05:07,360 --> 00:05:07,919
packet

160
00:05:07,919 --> 00:05:10,160
right and so when we've got these uh

161
00:05:10,160 --> 00:05:11,600
packets coming in there are certain

162
00:05:11,600 --> 00:05:13,600
fields we want to look out for

163
00:05:13,600 --> 00:05:16,320
because we need these same values for

164
00:05:16,320 --> 00:05:17,919
our router if we would like to

165
00:05:17,919 --> 00:05:20,240
neighbor up or perform an attack in the

166
00:05:20,240 --> 00:05:21,759
case of eigrp

167
00:05:21,759 --> 00:05:23,199
the very first thing that we want to

168
00:05:23,199 --> 00:05:25,600
take note of is the autonomous

169
00:05:25,600 --> 00:05:28,240
system number in this case it's 100 so

170
00:05:28,240 --> 00:05:30,320
we would have to configure our router to

171
00:05:30,320 --> 00:05:32,000
have the same autonomous system number

172
00:05:32,000 --> 00:05:33,919
so we can neighbor up with the router

173
00:05:33,919 --> 00:05:35,280
192 168

174
00:05:35,280 --> 00:05:38,240
100 1. now you'll notice that in that

175
00:05:38,240 --> 00:05:39,520
packet capture there was no

176
00:05:39,520 --> 00:05:40,560
authentication

177
00:05:40,560 --> 00:05:43,120
and so we can perform a very simple or

178
00:05:43,120 --> 00:05:44,240
easy to do attack

179
00:05:44,240 --> 00:05:45,919
we don't have to worry about that but

180
00:05:45,919 --> 00:05:48,479
taran what if there was authentication

181
00:05:48,479 --> 00:05:50,320
well there's two variants of this so

182
00:05:50,320 --> 00:05:51,680
either it would be plain text it would

183
00:05:51,680 --> 00:05:53,199
be hashed and if it's plain text would

184
00:05:53,199 --> 00:05:54,560
you exactly the same thing

185
00:05:54,560 --> 00:05:56,240
you'd look at the packet capture you'd

186
00:05:56,240 --> 00:05:57,919
extract the plain text password and

187
00:05:57,919 --> 00:06:00,240
include that into your sort of attacker

188
00:06:00,240 --> 00:06:01,280
config

189
00:06:01,280 --> 00:06:03,199
but what would happen if it were hashed

190
00:06:03,199 --> 00:06:06,000
or there was some crypto applied

191
00:06:06,000 --> 00:06:07,840
so if there was some crypto applied we

192
00:06:07,840 --> 00:06:09,440
would then take that packet capture and

193
00:06:09,440 --> 00:06:10,880
we could run it through something like

194
00:06:10,880 --> 00:06:11,840
ethercap

195
00:06:11,840 --> 00:06:14,400
which would parse these packets and then

196
00:06:14,400 --> 00:06:15,600
form or rather

197
00:06:15,600 --> 00:06:18,960
create a hash of from that data

198
00:06:18,960 --> 00:06:20,560
that can be then supplied into a

199
00:06:20,560 --> 00:06:22,400
password cracker for example

200
00:06:22,400 --> 00:06:25,039
john the ripper take a good word list

201
00:06:25,039 --> 00:06:26,479
and you may be able to crack it once

202
00:06:26,479 --> 00:06:27,919
you've cracked that password you can

203
00:06:27,919 --> 00:06:29,280
configure your router with this new

204
00:06:29,280 --> 00:06:29,919
password

205
00:06:29,919 --> 00:06:31,840
and now it can attempt to neighbor up so

206
00:06:31,840 --> 00:06:33,680
let's take a look at a packet with

207
00:06:33,680 --> 00:06:37,120
encrypt with a password and specifically

208
00:06:37,120 --> 00:06:39,360
crypto so if we have a look over here

209
00:06:39,360 --> 00:06:41,600
this is an eigrp hello packet

210
00:06:41,600 --> 00:06:44,319
and if we take note over there is now an

211
00:06:44,319 --> 00:06:46,479
authentication md5 and it's got various

212
00:06:46,479 --> 00:06:48,080
bits of data which we won't easily

213
00:06:48,080 --> 00:06:48,880
understand

214
00:06:48,880 --> 00:06:51,120
but something like ethercap would be

215
00:06:51,120 --> 00:06:52,000
able to easily

216
00:06:52,000 --> 00:06:55,120
take this data create the right hash

217
00:06:55,120 --> 00:06:56,720
and then we can supply that to a

218
00:06:56,720 --> 00:06:59,120
password cracker like john the ripper

219
00:06:59,120 --> 00:07:02,639
now let's take a look at that's another

220
00:07:02,639 --> 00:07:05,280
dynamic routine protocol and in here

221
00:07:05,280 --> 00:07:06,400
there are different

222
00:07:06,400 --> 00:07:08,000
other fields that we need to take note

223
00:07:08,000 --> 00:07:09,440
of in this case the

224
00:07:09,440 --> 00:07:12,720
first field is the area id then

225
00:07:12,720 --> 00:07:14,960
we notice that there's authentication

226
00:07:14,960 --> 00:07:16,319
but this is of type

227
00:07:16,319 --> 00:07:19,120
simple password or clear text and so we

228
00:07:19,120 --> 00:07:20,240
won't have to involve

229
00:07:20,240 --> 00:07:22,000
something like ethercat to extract it

230
00:07:22,000 --> 00:07:23,840
and crack it we can easily observe the

231
00:07:23,840 --> 00:07:25,120
clear text password

232
00:07:25,120 --> 00:07:28,160
and then use that in our router we then

233
00:07:28,160 --> 00:07:29,360
take note of the

234
00:07:29,360 --> 00:07:32,080
hello interval and the dead interval and

235
00:07:32,080 --> 00:07:32,880
that's pretty much

236
00:07:32,880 --> 00:07:36,240
it for ospf now when we look at

237
00:07:36,240 --> 00:07:38,720
something like hsrp which is a first top

238
00:07:38,720 --> 00:07:40,160
redundancy protocol

239
00:07:40,160 --> 00:07:41,759
there are a few things to take note of

240
00:07:41,759 --> 00:07:43,280
but first we need to make sure that

241
00:07:43,280 --> 00:07:44,319
we're looking at

242
00:07:44,319 --> 00:07:47,680
packets from the with the active state

243
00:07:47,680 --> 00:07:49,759
because this is important for us to

244
00:07:49,759 --> 00:07:50,720
carry out the attack

245
00:07:50,720 --> 00:07:52,800
we need to make sure our priority is

246
00:07:52,800 --> 00:07:54,560
much higher than that of the active

247
00:07:54,560 --> 00:07:56,240
router

248
00:07:56,240 --> 00:07:58,400
then we take note of the hello and the

249
00:07:58,400 --> 00:07:59,840
hold time which are

250
00:07:59,840 --> 00:08:02,720
3 and 10 seconds the default values and

251
00:08:02,720 --> 00:08:04,319
then we can see the priority value for

252
00:08:04,319 --> 00:08:05,680
this specific router

253
00:08:05,680 --> 00:08:08,319
or d4 gateway which is also active is

254
00:08:08,319 --> 00:08:09,440
150

255
00:08:09,440 --> 00:08:11,440
and so our priority if we would want to

256
00:08:11,440 --> 00:08:13,440
attack this protocol has to be much

257
00:08:13,440 --> 00:08:15,120
higher than that

258
00:08:15,120 --> 00:08:16,800
if we then look at the group number we

259
00:08:16,800 --> 00:08:18,160
also need to get this right

260
00:08:18,160 --> 00:08:19,919
so we form part of the logical grouping

261
00:08:19,919 --> 00:08:22,240
we would like to attack

262
00:08:22,240 --> 00:08:23,599
you can also see that there is

263
00:08:23,599 --> 00:08:25,840
authentication data and in this case as

264
00:08:25,840 --> 00:08:27,199
a default cisco

265
00:08:27,199 --> 00:08:29,280
by default these are configured with

266
00:08:29,280 --> 00:08:31,440
cisco and in clear text

267
00:08:31,440 --> 00:08:33,679
and lastly is the virtual ip address

268
00:08:33,679 --> 00:08:35,120
this is the ip address

269
00:08:35,120 --> 00:08:37,200
that the users on the current network

270
00:08:37,200 --> 00:08:38,159
are configured

271
00:08:38,159 --> 00:08:42,240
configured with as the default gateway

272
00:08:42,240 --> 00:08:44,159
so how do these issues creep into a

273
00:08:44,159 --> 00:08:45,360
network well

274
00:08:45,360 --> 00:08:47,040
one such way would be through minimal

275
00:08:47,040 --> 00:08:48,880
configuration if we take a look at

276
00:08:48,880 --> 00:08:50,080
router 1

277
00:08:50,080 --> 00:08:52,320
and its configuration for ospf there is

278
00:08:52,320 --> 00:08:54,399
a network statement that is very wide

279
00:08:54,399 --> 00:08:57,200
and this basically means that ospf hello

280
00:08:57,200 --> 00:08:58,640
packets would bleed out

281
00:08:58,640 --> 00:09:01,279
to all the networks of this connected to

282
00:09:01,279 --> 00:09:03,200
the interfaces of this router

283
00:09:03,200 --> 00:09:05,760
if we take a look at the second ospf

284
00:09:05,760 --> 00:09:06,560
configuration

285
00:09:06,560 --> 00:09:10,080
on uh routine number r2 there's two

286
00:09:10,080 --> 00:09:13,040
network statements in here a bit more

287
00:09:13,040 --> 00:09:13,920
specific

288
00:09:13,920 --> 00:09:17,440
but still a bit too overboard networks

289
00:09:17,440 --> 00:09:21,040
interfaces connected to the networks of

290
00:09:21,040 --> 00:09:24,399
says 192.168.1024 and 192 168 20

291
00:09:24,399 --> 00:09:27,519
25 would have then ospf packers bleed

292
00:09:27,519 --> 00:09:29,200
out to them

293
00:09:29,200 --> 00:09:32,160
now let's take a look at kubernetes so

294
00:09:32,160 --> 00:09:34,560
in kubernetes taran mentioned there are

295
00:09:34,560 --> 00:09:38,080
cni's and once that cni is ramona ramona

296
00:09:38,080 --> 00:09:40,080
allows us to configure ospf within this

297
00:09:40,080 --> 00:09:40,720
cluster

298
00:09:40,720 --> 00:09:44,320
say we would like to join this cluster

299
00:09:44,320 --> 00:09:45,920
or rather share dynamic routing

300
00:09:45,920 --> 00:09:47,519
information between a cluster

301
00:09:47,519 --> 00:09:50,959
and a your traditional network well

302
00:09:50,959 --> 00:09:53,040
so a person that's typically configuring

303
00:09:53,040 --> 00:09:54,320
a kubernetes cluster is

304
00:09:54,320 --> 00:09:56,959
a person of a devops background and not

305
00:09:56,959 --> 00:09:58,880
necessarily a network engineer

306
00:09:58,880 --> 00:10:01,040
and in there they may have also some

307
00:10:01,040 --> 00:10:03,120
issues trying to configure

308
00:10:03,120 --> 00:10:05,519
ramona on a cluster where there are

309
00:10:05,519 --> 00:10:07,200
multiple os is used

310
00:10:07,200 --> 00:10:09,200
and because os's sometimes have

311
00:10:09,200 --> 00:10:11,200
different naming schemes for interfaces

312
00:10:11,200 --> 00:10:14,000
they may not know what the interfaces of

313
00:10:14,000 --> 00:10:14,560
all of the

314
00:10:14,560 --> 00:10:17,600
nodes are so they may use a wild card

315
00:10:17,600 --> 00:10:19,600
which would then lead to ospf bleeding

316
00:10:19,600 --> 00:10:20,880
to all the networks

317
00:10:20,880 --> 00:10:24,079
that the nodes are attached to tyron

318
00:10:24,079 --> 00:10:25,760
where would you find this on a network

319
00:10:25,760 --> 00:10:27,360
simon that's a really good question but

320
00:10:27,360 --> 00:10:28,880
before we go into that i just want to

321
00:10:28,880 --> 00:10:30,399
reiterate that we sort of

322
00:10:30,399 --> 00:10:32,000
have a rudimentary understanding of

323
00:10:32,000 --> 00:10:33,360
where these protocols fit into the

324
00:10:33,360 --> 00:10:34,000
network

325
00:10:34,000 --> 00:10:35,920
and that we've shown how to identify

326
00:10:35,920 --> 00:10:37,360
them the process is similar

327
00:10:37,360 --> 00:10:39,440
you open up the capture you look at the

328
00:10:39,440 --> 00:10:40,800
multicast packets and

329
00:10:40,800 --> 00:10:42,320
you know you apply your config according

330
00:10:42,320 --> 00:10:44,320
to that but let's consider ourselves

331
00:10:44,320 --> 00:10:45,200
connected to

332
00:10:45,200 --> 00:10:47,040
the the access layer the switches

333
00:10:47,040 --> 00:10:48,480
denoted in the slides

334
00:10:48,480 --> 00:10:50,480
and you're and which part which like

335
00:10:50,480 --> 00:10:52,240
which protocols are we likely to find in

336
00:10:52,240 --> 00:10:52,959
that layer

337
00:10:52,959 --> 00:10:55,040
um you're likely to find something like

338
00:10:55,040 --> 00:10:57,120
hsrp providing you with a default

339
00:10:57,120 --> 00:10:58,480
gateway

340
00:10:58,480 --> 00:11:00,079
however if you find yourself in a

341
00:11:00,079 --> 00:11:01,760
network or you've pivoted to a network

342
00:11:01,760 --> 00:11:03,519
where you have layer 2 connectivity to a

343
00:11:03,519 --> 00:11:05,200
router or a firewall you're likely to

344
00:11:05,200 --> 00:11:07,040
find a dynamic routing protocol because

345
00:11:07,040 --> 00:11:09,519
these appliances support such protocols

346
00:11:09,519 --> 00:11:11,839
other than that firewalls and routers

347
00:11:11,839 --> 00:11:13,360
often make use of the rp

348
00:11:13,360 --> 00:11:15,839
to achieve io availability so if again

349
00:11:15,839 --> 00:11:17,920
if configured insecurely or incorrectly

350
00:11:17,920 --> 00:11:19,279
that could bleed into that

351
00:11:19,279 --> 00:11:23,279
local segment as well other than that

352
00:11:23,279 --> 00:11:25,360
we mentioned kubernetes using their cnis

353
00:11:25,360 --> 00:11:27,040
and they support drps

354
00:11:27,040 --> 00:11:29,519
so if you were able to influence rooting

355
00:11:29,519 --> 00:11:30,640
within kubernetes

356
00:11:30,640 --> 00:11:32,640
that may bleed into or propagate into

357
00:11:32,640 --> 00:11:34,959
the traditional network and vice versa

358
00:11:34,959 --> 00:11:38,000
so what what's the what's the impact of

359
00:11:38,000 --> 00:11:39,360
these type of attacks well

360
00:11:39,360 --> 00:11:42,560
consider yourself the red workstation on

361
00:11:42,560 --> 00:11:43,360
the slide

362
00:11:43,360 --> 00:11:45,600
you've connected to a lan and you have

363
00:11:45,600 --> 00:11:47,120
knowledge of the computers in your sort

364
00:11:47,120 --> 00:11:49,040
of lan segment and you have a default

365
00:11:49,040 --> 00:11:50,639
pointing to your default gateway but you

366
00:11:50,639 --> 00:11:52,480
haven't learned anything yet you start

367
00:11:52,480 --> 00:11:53,920
interfacing with the default routing

368
00:11:53,920 --> 00:11:54,560
protocol

369
00:11:54,560 --> 00:11:55,920
and you learn of these new networks you

370
00:11:55,920 --> 00:11:57,279
learn of the finance and union of the

371
00:11:57,279 --> 00:11:58,160
server network

372
00:11:58,160 --> 00:12:00,000
so you've literally just neighbored up

373
00:12:00,000 --> 00:12:01,920
with the routing protocol you haven't

374
00:12:01,920 --> 00:12:03,440
you haven't done anything malicious as

375
00:12:03,440 --> 00:12:05,760
of yet but the benefit of this is

376
00:12:05,760 --> 00:12:07,279
from an attacker's perspective you don't

377
00:12:07,279 --> 00:12:09,519
have to go an nmap big slash 16s or

378
00:12:09,519 --> 00:12:11,040
mascara or what whichever tool you

379
00:12:11,040 --> 00:12:11,519
prefer

380
00:12:11,519 --> 00:12:13,360
using you've learned exactly which

381
00:12:13,360 --> 00:12:15,200
networks are active within

382
00:12:15,200 --> 00:12:17,839
within this organization so it takes

383
00:12:17,839 --> 00:12:19,120
it's sort of cool in terms of

384
00:12:19,120 --> 00:12:21,200
enumeration you have a lot more accurate

385
00:12:21,200 --> 00:12:22,560
description of what's going on

386
00:12:22,560 --> 00:12:25,120
and you can pinpoint your attacks a

387
00:12:25,120 --> 00:12:26,639
little bit better

388
00:12:26,639 --> 00:12:28,959
so that's cool you can neighbor up but

389
00:12:28,959 --> 00:12:30,639
can we take it further yes we can take

390
00:12:30,639 --> 00:12:31,600
it further so

391
00:12:31,600 --> 00:12:33,920
consider the traffic flow indicated by

392
00:12:33,920 --> 00:12:34,959
the blue arrows

393
00:12:34,959 --> 00:12:36,480
sort of a normal traffic flow of a user

394
00:12:36,480 --> 00:12:38,720
in the finance department accessing a

395
00:12:38,720 --> 00:12:41,519
erp server and in the server vlan so

396
00:12:41,519 --> 00:12:42,399
what can we do

397
00:12:42,399 --> 00:12:44,880
we can inject routes with uh higher

398
00:12:44,880 --> 00:12:46,560
priorities or let's call it higher

399
00:12:46,560 --> 00:12:47,440
priorities for now

400
00:12:47,440 --> 00:12:48,880
to redirect that traffic from the

401
00:12:48,880 --> 00:12:51,279
finance from from the

402
00:12:51,279 --> 00:12:53,760
use it to our malicious attacker control

403
00:12:53,760 --> 00:12:54,320
pc

404
00:12:54,320 --> 00:12:56,320
so that's pretty useful um you know

405
00:12:56,320 --> 00:12:57,680
getting ei your

406
00:12:57,680 --> 00:12:59,519
erp traffic on your attacker machine

407
00:12:59,519 --> 00:13:00,639
could could probably have some

408
00:13:00,639 --> 00:13:02,079
devastating

409
00:13:02,079 --> 00:13:06,160
impacts right in terms of fhrps um

410
00:13:06,160 --> 00:13:08,320
what could happen over here again we we

411
00:13:08,320 --> 00:13:10,160
said there's a logical grouping with

412
00:13:10,160 --> 00:13:11,040
this priority

413
00:13:11,040 --> 00:13:12,959
and then the higher priority becomes the

414
00:13:12,959 --> 00:13:15,120
active device in this logical group so

415
00:13:15,120 --> 00:13:16,720
from an attacker's perspective

416
00:13:16,720 --> 00:13:18,480
we can just assign i o priority to

417
00:13:18,480 --> 00:13:20,880
ourselves and then

418
00:13:20,880 --> 00:13:23,200
the user's traffic will be redirected

419
00:13:23,200 --> 00:13:23,920
would be

420
00:13:23,920 --> 00:13:25,920
directed towards us and then we would

421
00:13:25,920 --> 00:13:27,040
just forward that traffic

422
00:13:27,040 --> 00:13:31,040
onto the legitimate default gateway

423
00:13:31,200 --> 00:13:32,880
okay so it's important to mention some

424
00:13:32,880 --> 00:13:34,160
of the challenges with these type of

425
00:13:34,160 --> 00:13:35,120
attacks so

426
00:13:35,120 --> 00:13:36,639
you need to get specific and what we

427
00:13:36,639 --> 00:13:38,399
mean by that is

428
00:13:38,399 --> 00:13:40,320
you need to inject more specific routes

429
00:13:40,320 --> 00:13:41,920
that's currently in the routing table so

430
00:13:41,920 --> 00:13:43,680
you can join the routing table observe

431
00:13:43,680 --> 00:13:44,880
some routes in there

432
00:13:44,880 --> 00:13:47,120
and then if you observe that there's a

433
00:13:47,120 --> 00:13:49,199
slash 24 network split that network into

434
00:13:49,199 --> 00:13:49,680
two

435
00:13:49,680 --> 00:13:51,839
advertised two 25s and that traffic is

436
00:13:51,839 --> 00:13:53,279
going to get redirected back to you so

437
00:13:53,279 --> 00:13:54,480
that's all what we mean

438
00:13:54,480 --> 00:13:57,199
by saying get be more specific there are

439
00:13:57,199 --> 00:13:58,399
other things to consider

440
00:13:58,399 --> 00:14:00,480
such as administrative distance and then

441
00:14:00,480 --> 00:14:02,000
the per protocol metric

442
00:14:02,000 --> 00:14:03,680
and for the purpose of this talk we're

443
00:14:03,680 --> 00:14:05,120
just saying be more specific and that's

444
00:14:05,120 --> 00:14:06,160
how we're going to beat the routing

445
00:14:06,160 --> 00:14:08,000
table

446
00:14:08,000 --> 00:14:10,000
how did we do this initially we were

447
00:14:10,000 --> 00:14:11,519
connected to a lan we opened up

448
00:14:11,519 --> 00:14:12,240
wireshark

449
00:14:12,240 --> 00:14:14,079
exactly how we shown and we saw these

450
00:14:14,079 --> 00:14:16,320
vulnerable packets being unauthenticated

451
00:14:16,320 --> 00:14:18,320
and you know we wanted to export it so

452
00:14:18,320 --> 00:14:20,320
we started researching for some tools

453
00:14:20,320 --> 00:14:23,279
and honestly we were able to configure a

454
00:14:23,279 --> 00:14:25,040
virtual firewall in a quicker fashion

455
00:14:25,040 --> 00:14:26,320
than it was to get the

456
00:14:26,320 --> 00:14:28,079
existing tools up and running so how

457
00:14:28,079 --> 00:14:30,160
does it look let's uh let's go through a

458
00:14:30,160 --> 00:14:31,839
demo and show you what how you can do

459
00:14:31,839 --> 00:14:32,320
that

460
00:14:32,320 --> 00:14:35,279
with the virtual firewall okay so on the

461
00:14:35,279 --> 00:14:35,920
left

462
00:14:35,920 --> 00:14:37,920
we have a wireshark capture running on

463
00:14:37,920 --> 00:14:39,279
the attacker machine and you can see

464
00:14:39,279 --> 00:14:40,959
some ospf hello packets

465
00:14:40,959 --> 00:14:42,399
so at this point in time you should get

466
00:14:42,399 --> 00:14:44,000
excited just seeing the packets

467
00:14:44,000 --> 00:14:46,639
never mind like whether it's aust or not

468
00:14:46,639 --> 00:14:48,320
it's a it's a good sign already

469
00:14:48,320 --> 00:14:49,839
on the right-hand side we have our

470
00:14:49,839 --> 00:14:52,000
attacker fortigate which is essentially

471
00:14:52,000 --> 00:14:53,760
our rogue router or rogue firewall

472
00:14:53,760 --> 00:14:55,440
and all that we have to do is match the

473
00:14:55,440 --> 00:14:57,120
parameters in the hello packet and

474
00:14:57,120 --> 00:14:58,639
configure them in the fortigate

475
00:14:58,639 --> 00:15:00,079
and then we'll become a routing neighbor

476
00:15:00,079 --> 00:15:02,160
so you can see that there's no auth data

477
00:15:02,160 --> 00:15:03,680
so it's going to be a really easy attack

478
00:15:03,680 --> 00:15:05,440
no cracking required

479
00:15:05,440 --> 00:15:06,880
some other fields we need to take note

480
00:15:06,880 --> 00:15:09,279
of is the area id the alloy interval

481
00:15:09,279 --> 00:15:10,639
and the dead interval so we're just

482
00:15:10,639 --> 00:15:12,399
going to match those parameters in the

483
00:15:12,399 --> 00:15:13,279
firewall

484
00:15:13,279 --> 00:15:16,240
and you know pretty simple copy paste so

485
00:15:16,240 --> 00:15:17,519
when we head over to the firewall

486
00:15:17,519 --> 00:15:18,079
section

487
00:15:18,079 --> 00:15:19,920
we're going to configure a router id

488
00:15:19,920 --> 00:15:21,199
that's just our unique

489
00:15:21,199 --> 00:15:23,360
identifier within this process we're

490
00:15:23,360 --> 00:15:25,040
going to add the area which we observe

491
00:15:25,040 --> 00:15:27,920
to be a squad zero

492
00:15:27,920 --> 00:15:29,120
and we're going to say on which

493
00:15:29,120 --> 00:15:31,519
interfaces do we want to send out our

494
00:15:31,519 --> 00:15:32,959
our hello packets and we're going to

495
00:15:32,959 --> 00:15:35,040
match that ip address i'm displayed at

496
00:15:35,040 --> 00:15:35,519
the top

497
00:15:35,519 --> 00:15:39,120
url bar so only out this one interface

498
00:15:39,120 --> 00:15:42,079
we need to add the interface as well so

499
00:15:42,079 --> 00:15:43,440
you're going to give it a name

500
00:15:43,440 --> 00:15:44,880
you're going to specify the interface on

501
00:15:44,880 --> 00:15:46,240
which we're sniffing and we're going to

502
00:15:46,240 --> 00:15:47,600
put in the hello and the dead interval

503
00:15:47,600 --> 00:15:50,560
which we observed on the left hand side

504
00:15:50,560 --> 00:15:52,000
once we applied this configuration

505
00:15:52,000 --> 00:15:53,440
you're going to see in the wire shock

506
00:15:53,440 --> 00:15:54,880
there's going to be some

507
00:15:54,880 --> 00:15:57,040
ospf conversation happening and that's

508
00:15:57,040 --> 00:15:58,480
when the routing information is going to

509
00:15:58,480 --> 00:15:59,519
start sharing

510
00:15:59,519 --> 00:16:00,720
so it should take a second and you're

511
00:16:00,720 --> 00:16:02,560
going to see some

512
00:16:02,560 --> 00:16:04,079
some movement in the wireshark capture

513
00:16:04,079 --> 00:16:05,360
and then you can see the ls update

514
00:16:05,360 --> 00:16:06,000
packets

515
00:16:06,000 --> 00:16:08,079
sharing the routing information so it

516
00:16:08,079 --> 00:16:09,040
should take

517
00:16:09,040 --> 00:16:11,839
a couple of seconds and then this state

518
00:16:11,839 --> 00:16:12,560
would have been

519
00:16:12,560 --> 00:16:14,160
processed and both routers would have

520
00:16:14,160 --> 00:16:16,160
been shared the routing information

521
00:16:16,160 --> 00:16:17,920
so let's give it a second and let's see

522
00:16:17,920 --> 00:16:19,360
if the fortigate had learned any new

523
00:16:19,360 --> 00:16:21,519
routes

524
00:16:21,519 --> 00:16:22,959
there we go we've learned some a bunch

525
00:16:22,959 --> 00:16:25,040
of new routes so pretty cool we haven't

526
00:16:25,040 --> 00:16:26,800
really done anything malicious

527
00:16:26,800 --> 00:16:28,720
as such but we've learned of new targets

528
00:16:28,720 --> 00:16:30,000
and this is more

529
00:16:30,000 --> 00:16:32,320
accurate accurate way of enumerating

530
00:16:32,320 --> 00:16:34,399
targets

531
00:16:34,399 --> 00:16:37,360
so simon what's the bad what's bad about

532
00:16:37,360 --> 00:16:38,480
taking this approach

533
00:16:38,480 --> 00:16:39,680
so there are a few issues that we

534
00:16:39,680 --> 00:16:41,199
experienced when we took this initial

535
00:16:41,199 --> 00:16:41,680
approach

536
00:16:41,680 --> 00:16:43,440
the very first is that you require

537
00:16:43,440 --> 00:16:44,800
access to such firmware

538
00:16:44,800 --> 00:16:46,800
which is not easily available and then

539
00:16:46,800 --> 00:16:48,560
you also require the knowledge of

540
00:16:48,560 --> 00:16:50,560
first what to look out for in the

541
00:16:50,560 --> 00:16:51,920
specific protocols

542
00:16:51,920 --> 00:16:54,399
and then how to configure such a device

543
00:16:54,399 --> 00:16:55,279
which is again

544
00:16:55,279 --> 00:16:58,800
not easily accessible then with regards

545
00:16:58,800 --> 00:17:00,079
to the existing tooling

546
00:17:00,079 --> 00:17:01,199
well because they haven't been

547
00:17:01,199 --> 00:17:04,160
maintained and because of that uh

548
00:17:04,160 --> 00:17:06,640
they have dependency issues which is

549
00:17:06,640 --> 00:17:08,240
just very tricky to get up and running

550
00:17:08,240 --> 00:17:09,280
so we found the

551
00:17:09,280 --> 00:17:11,760
virtual firewall to be much easier than

552
00:17:11,760 --> 00:17:13,839
the existing tooling

553
00:17:13,839 --> 00:17:15,439
but at that point then we noticed that

554
00:17:15,439 --> 00:17:18,160
there is a a recurring pattern ovr in

555
00:17:18,160 --> 00:17:18,559
that

556
00:17:18,559 --> 00:17:22,640
we can easily extract data or rather we

557
00:17:22,640 --> 00:17:24,480
can automate the process of extracting

558
00:17:24,480 --> 00:17:26,160
the important fields

559
00:17:26,160 --> 00:17:28,400
then writing up a configuration for that

560
00:17:28,400 --> 00:17:30,559
and take a legitimate

561
00:17:30,559 --> 00:17:31,919
virtual router and apply this

562
00:17:31,919 --> 00:17:33,760
configuration to that router

563
00:17:33,760 --> 00:17:36,960
and in in essence making it

564
00:17:36,960 --> 00:17:40,480
attack the network so we wrote up a tool

565
00:17:40,480 --> 00:17:41,679
called root topsy

566
00:17:41,679 --> 00:17:44,320
which helps us achieve this where it

567
00:17:44,320 --> 00:17:44,799
will

568
00:17:44,799 --> 00:17:47,360
first perform a packet capture take that

569
00:17:47,360 --> 00:17:48,480
data and then

570
00:17:48,480 --> 00:17:51,679
uh and make the router kind of attack

571
00:17:51,679 --> 00:17:52,960
the network

572
00:17:52,960 --> 00:17:56,000
and that's done using python and

573
00:17:56,000 --> 00:17:58,799
docker sdk with a few docker containers

574
00:17:58,799 --> 00:18:00,720
and then some other extra bits to it

575
00:18:00,720 --> 00:18:03,760
so with more more specifically we're

576
00:18:03,760 --> 00:18:04,240
using

577
00:18:04,240 --> 00:18:07,679
a fr router which we then

578
00:18:07,679 --> 00:18:09,840
weaponize with these configurations that

579
00:18:09,840 --> 00:18:12,000
we've got to perform these attacks

580
00:18:12,000 --> 00:18:15,280
some of the code or rather the protocols

581
00:18:15,280 --> 00:18:17,919
have code specific to it because they

582
00:18:17,919 --> 00:18:19,600
are cisco proprietary but

583
00:18:19,600 --> 00:18:22,080
others such as your dynamic routing

584
00:18:22,080 --> 00:18:23,600
protocols well they've already been

585
00:18:23,600 --> 00:18:24,960
implemented in fr

586
00:18:24,960 --> 00:18:27,120
so we do not have to recode the entire

587
00:18:27,120 --> 00:18:28,640
protocol

588
00:18:28,640 --> 00:18:31,039
the high level overview of root topsy is

589
00:18:31,039 --> 00:18:33,200
that it will first perform a scan

590
00:18:33,200 --> 00:18:35,600
where it will perform a packet capture

591
00:18:35,600 --> 00:18:36,880
take in these packets

592
00:18:36,880 --> 00:18:38,960
and then extract the various information

593
00:18:38,960 --> 00:18:40,880
and build up a configuration

594
00:18:40,880 --> 00:18:42,880
this configuration it stops at this

595
00:18:42,880 --> 00:18:44,960
configuration it does not go any further

596
00:18:44,960 --> 00:18:46,640
unless we tell it to attack

597
00:18:46,640 --> 00:18:49,039
in the attack it would spin up the

598
00:18:49,039 --> 00:18:50,000
virtual router

599
00:18:50,000 --> 00:18:52,000
and apply the configuration on top which

600
00:18:52,000 --> 00:18:54,400
would then have it go and neighbor up

601
00:18:54,400 --> 00:18:56,720
we can take it one step further because

602
00:18:56,720 --> 00:18:58,160
attack just neighbors up

603
00:18:58,160 --> 00:19:00,559
where we can now inject roots and so

604
00:19:00,559 --> 00:19:01,760
once we supplied

605
00:19:01,760 --> 00:19:04,080
a root this would just ah change the

606
00:19:04,080 --> 00:19:05,360
configuration in

607
00:19:05,360 --> 00:19:07,200
a little bit in a small way and that

608
00:19:07,200 --> 00:19:08,559
will now have the

609
00:19:08,559 --> 00:19:10,799
roots injected into the whole network

610
00:19:10,799 --> 00:19:12,880
which taran will demonstrate

611
00:19:12,880 --> 00:19:15,440
sure so we're going to demonstrate um

612
00:19:15,440 --> 00:19:16,480
learning new routes

613
00:19:16,480 --> 00:19:19,679
um add well first learning

614
00:19:19,679 --> 00:19:21,360
enumerating networks i guess is phase

615
00:19:21,360 --> 00:19:23,360
one phase two is joining the routing

616
00:19:23,360 --> 00:19:24,960
neighbor and then phase three adding

617
00:19:24,960 --> 00:19:25,600
some routes

618
00:19:25,600 --> 00:19:27,280
which will eventually lead us in

619
00:19:27,280 --> 00:19:28,720
directing traffic to an attacker

620
00:19:28,720 --> 00:19:30,559
controlled machine

621
00:19:30,559 --> 00:19:33,840
so before we start off with the demo

622
00:19:33,840 --> 00:19:36,000
let's get a quick lay of the lan we

623
00:19:36,000 --> 00:19:37,440
realize there's a lot going on in the

624
00:19:37,440 --> 00:19:38,960
screen that's why we're sort of

625
00:19:38,960 --> 00:19:40,400
giving a short briefing before we

626
00:19:40,400 --> 00:19:42,080
started running attacks

627
00:19:42,080 --> 00:19:44,799
more specifically the top left is our

628
00:19:44,799 --> 00:19:46,480
attacker's routing table we're running a

629
00:19:46,480 --> 00:19:47,679
watch command on there

630
00:19:47,679 --> 00:19:49,679
and as we perform our attacks that

631
00:19:49,679 --> 00:19:51,360
routing table will

632
00:19:51,360 --> 00:19:53,919
update dynamically on the top right we

633
00:19:53,919 --> 00:19:55,280
that's where we'll be running our root

634
00:19:55,280 --> 00:19:56,799
optic commands from

635
00:19:56,799 --> 00:19:59,280
essentially our attacks and like i

636
00:19:59,280 --> 00:20:00,559
mentioned at the bottom left is the

637
00:20:00,559 --> 00:20:01,200
router

638
00:20:01,200 --> 00:20:03,520
and in the bottom right our victim so

639
00:20:03,520 --> 00:20:04,640
let's start off

640
00:20:04,640 --> 00:20:08,000
with a demo on the top right we're going

641
00:20:08,000 --> 00:20:09,200
to perform our attack

642
00:20:09,200 --> 00:20:10,799
and all you really need to take note of

643
00:20:10,799 --> 00:20:12,559
for now is that our ip address

644
00:20:12,559 --> 00:20:15,760
is 192.168.76.170.

645
00:20:15,760 --> 00:20:17,440
um just keep that in the back of your

646
00:20:17,440 --> 00:20:18,880
mind it's not super

647
00:20:18,880 --> 00:20:20,480
important to remember throughout but

648
00:20:20,480 --> 00:20:21,520
it's nice to have in the back of your

649
00:20:21,520 --> 00:20:22,080
mind

650
00:20:22,080 --> 00:20:24,000
if we go to the bottom left we look at

651
00:20:24,000 --> 00:20:25,600
our router we take note of that ip

652
00:20:25,600 --> 00:20:27,039
address as well

653
00:20:27,039 --> 00:20:28,799
you'll see later why these ip addresses

654
00:20:28,799 --> 00:20:30,880
matter you can see that that rp address

655
00:20:30,880 --> 00:20:33,039
is 76.208

656
00:20:33,039 --> 00:20:36,159
also take note that we have two ospf

657
00:20:36,159 --> 00:20:37,360
neighbors at this point in time

658
00:20:37,360 --> 00:20:38,880
after our attacks will have three

659
00:20:38,880 --> 00:20:40,799
neighbors so we've mentioned there's a

660
00:20:40,799 --> 00:20:42,159
victim in the bottom right

661
00:20:42,159 --> 00:20:45,520
the victim is doing some dns queries and

662
00:20:45,520 --> 00:20:47,200
connecting to an ftp server and this is

663
00:20:47,200 --> 00:20:49,280
essentially the traffic that we want to

664
00:20:49,280 --> 00:20:52,320
modify we're running a wireshark on our

665
00:20:52,320 --> 00:20:53,360
attacker machine

666
00:20:53,360 --> 00:20:56,159
we're filtering for ftp and we're seeing

667
00:20:56,159 --> 00:20:57,520
that there's no traffic traversing

668
00:20:57,520 --> 00:20:58,080
through this

669
00:20:58,080 --> 00:21:00,559
this ftp and after our attack will show

670
00:21:00,559 --> 00:21:01,600
the wireshark again

671
00:21:01,600 --> 00:21:03,120
so let's start the attack let's start

672
00:21:03,120 --> 00:21:05,039
off with the scan flag and like simon

673
00:21:05,039 --> 00:21:05,600
mentioned

674
00:21:05,600 --> 00:21:08,159
this is just going to look for

675
00:21:08,159 --> 00:21:10,559
vulnerable packets parse them and then

676
00:21:10,559 --> 00:21:12,720
take the relevant parameters and push

677
00:21:12,720 --> 00:21:14,559
them into our config templates

678
00:21:14,559 --> 00:21:16,480
so now you can see that we've detected

679
00:21:16,480 --> 00:21:18,799
vulnerable eigrp and ospf

680
00:21:18,799 --> 00:21:20,480
and let's go look at what the

681
00:21:20,480 --> 00:21:22,159
configurations look for these

682
00:21:22,159 --> 00:21:23,679
what these configurations look like for

683
00:21:23,679 --> 00:21:25,520
these protocols so you can see

684
00:21:25,520 --> 00:21:28,000
um we've paused the autonomous system

685
00:21:28,000 --> 00:21:29,039
number number hundred and

686
00:21:29,039 --> 00:21:30,799
we've included that into our config root

687
00:21:30,799 --> 00:21:32,400
eog hundred

688
00:21:32,400 --> 00:21:35,520
um other than that you can see um in our

689
00:21:35,520 --> 00:21:37,280
network statement is our interface

690
00:21:37,280 --> 00:21:39,440
ip address that we we showed initially

691
00:21:39,440 --> 00:21:40,960
um and all this is doing is

692
00:21:40,960 --> 00:21:42,480
it's ensuring that we're only sending

693
00:21:42,480 --> 00:21:44,159
these out packets out of our specific

694
00:21:44,159 --> 00:21:44,880
interface

695
00:21:44,880 --> 00:21:46,960
only our one interface and not a bunch

696
00:21:46,960 --> 00:21:49,120
of other ones so it's pretty simple

697
00:21:49,120 --> 00:21:51,520
let's look at the ospf configuration as

698
00:21:51,520 --> 00:21:52,559
well

699
00:21:52,559 --> 00:21:54,000
it's a little bit more to take note of

700
00:21:54,000 --> 00:21:56,240
but it's also pretty similar

701
00:21:56,240 --> 00:21:57,679
you can take note that we've paused the

702
00:21:57,679 --> 00:21:59,200
hello interval and the dead interval

703
00:21:59,200 --> 00:22:00,640
from the vulnerable packets and we've

704
00:22:00,640 --> 00:22:02,640
included that into our config template

705
00:22:02,640 --> 00:22:04,799
again our network statement includes our

706
00:22:04,799 --> 00:22:06,080
iop address

707
00:22:06,080 --> 00:22:07,919
to reiterate it's ensuring that we're

708
00:22:07,919 --> 00:22:09,520
only sending these hello packets out of

709
00:22:09,520 --> 00:22:10,720
this one interface

710
00:22:10,720 --> 00:22:12,320
and you can see that we've also parsed

711
00:22:12,320 --> 00:22:13,760
the area id from the pick up and

712
00:22:13,760 --> 00:22:15,600
included that into the template

713
00:22:15,600 --> 00:22:18,000
so at this point in time you know

714
00:22:18,000 --> 00:22:19,679
nothing's happened we haven't

715
00:22:19,679 --> 00:22:21,600
interfaced with the protocol we haven't

716
00:22:21,600 --> 00:22:23,120
attacked anything we haven't really

717
00:22:23,120 --> 00:22:24,240
achieved what we achieved with the

718
00:22:24,240 --> 00:22:25,039
fortigate

719
00:22:25,039 --> 00:22:26,880
so we could do that without to you just

720
00:22:26,880 --> 00:22:28,240
simply substitute the

721
00:22:28,240 --> 00:22:30,080
attack flag with the scan flow the scan

722
00:22:30,080 --> 00:22:31,280
flag with the attack flag

723
00:22:31,280 --> 00:22:32,880
but that's a little bit boring we want

724
00:22:32,880 --> 00:22:34,240
to meddle with traffic flows and we want

725
00:22:34,240 --> 00:22:35,120
to inject and read

726
00:22:35,120 --> 00:22:36,720
and perform some redirection so what do

727
00:22:36,720 --> 00:22:39,200
we do we specify the inject and the

728
00:22:39,200 --> 00:22:40,400
redirect flags

729
00:22:40,400 --> 00:22:42,799
and they work slightly differently in

730
00:22:42,799 --> 00:22:44,320
terms of the conflict input's exactly

731
00:22:44,320 --> 00:22:45,120
the same

732
00:22:45,120 --> 00:22:47,600
but the inject flag will forward traffic

733
00:22:47,600 --> 00:22:49,200
onto your default gateway whereas the

734
00:22:49,200 --> 00:22:50,720
redirect flag

735
00:22:50,720 --> 00:22:52,240
will sort of make the traffic stop on

736
00:22:52,240 --> 00:22:54,159
your endpoint which is useful for maybe

737
00:22:54,159 --> 00:22:55,520
a honey potting scenario

738
00:22:55,520 --> 00:22:57,280
or if you wanted to run a soak at then

739
00:22:57,280 --> 00:22:58,559
for the traffic onto

740
00:22:58,559 --> 00:23:00,400
some other endpoint you know or process

741
00:23:00,400 --> 00:23:02,640
it in whichever way you want it to

742
00:23:02,640 --> 00:23:05,840
so again what what's happened now is

743
00:23:05,840 --> 00:23:08,799
our inject and our redirect flags imply

744
00:23:08,799 --> 00:23:10,720
attack which also imply scan

745
00:23:10,720 --> 00:23:12,960
so it passed those vulnerable packets

746
00:23:12,960 --> 00:23:14,080
both config templates

747
00:23:14,080 --> 00:23:16,400
but now it's deployed into a container

748
00:23:16,400 --> 00:23:18,159
and you can see some activity happening

749
00:23:18,159 --> 00:23:19,280
on the panes

750
00:23:19,280 --> 00:23:21,760
so we'll explain what's happening if we

751
00:23:21,760 --> 00:23:23,840
look at the bottom left pane

752
00:23:23,840 --> 00:23:25,760
you'll see that there's some ospf

753
00:23:25,760 --> 00:23:28,080
activity um being logged from the router

754
00:23:28,080 --> 00:23:30,880
saying loading to full meaning that

755
00:23:30,880 --> 00:23:32,320
there's a state change in the

756
00:23:32,320 --> 00:23:34,559
in in the router's ospf we've become a

757
00:23:34,559 --> 00:23:36,480
neighbor with that router effectively

758
00:23:36,480 --> 00:23:39,440
doing what we did with the 48 other than

759
00:23:39,440 --> 00:23:39,760
that

760
00:23:39,760 --> 00:23:41,919
in the top left pane you can see our

761
00:23:41,919 --> 00:23:43,600
attacker machine is starting to

762
00:23:43,600 --> 00:23:45,200
make some changes and you can see that

763
00:23:45,200 --> 00:23:46,799
the routes were automatically added to

764
00:23:46,799 --> 00:23:48,240
our attack machine so this same thing

765
00:23:48,240 --> 00:23:49,520
that you saw in the fortigate we've

766
00:23:49,520 --> 00:23:51,279
learned routes

767
00:23:51,279 --> 00:23:54,159
we now have new targets to go after so

768
00:23:54,159 --> 00:23:55,440
more importantly if you have a look at

769
00:23:55,440 --> 00:23:56,000
the victim

770
00:23:56,000 --> 00:23:57,600
you can see that the victim's dna square

771
00:23:57,600 --> 00:23:59,200
has changed to 1.337

772
00:23:59,200 --> 00:24:00,799
and the ftp trace route has gone from

773
00:24:00,799 --> 00:24:02,840
three ups to five so we've

774
00:24:02,840 --> 00:24:05,840
successfully changed the traffic flow

775
00:24:05,840 --> 00:24:08,720
but you know i guess it's important to

776
00:24:08,720 --> 00:24:10,320
mention that

777
00:24:10,320 --> 00:24:11,840
you don't have to follow out templates

778
00:24:11,840 --> 00:24:13,600
you don't have to use the

779
00:24:13,600 --> 00:24:15,440
inject and direct redirect you can

780
00:24:15,440 --> 00:24:16,880
specify the attack flag

781
00:24:16,880 --> 00:24:18,320
and then you can go perform your own

782
00:24:18,320 --> 00:24:20,240
type of attack should you be

783
00:24:20,240 --> 00:24:23,279
comfortable with a router interface but

784
00:24:23,279 --> 00:24:24,240
nonetheless let's

785
00:24:24,240 --> 00:24:26,000
let's have a look at what these flags do

786
00:24:26,000 --> 00:24:27,200
and what the template is that we've

787
00:24:27,200 --> 00:24:28,640
built for them

788
00:24:28,640 --> 00:24:31,440
so on the top right pane going from top

789
00:24:31,440 --> 00:24:32,000
to bottom

790
00:24:32,000 --> 00:24:34,000
you'll see that we added static routes

791
00:24:34,000 --> 00:24:35,600
pointing to the null interface

792
00:24:35,600 --> 00:24:37,279
and the ip addresses match the flags

793
00:24:37,279 --> 00:24:38,640
that we've specified

794
00:24:38,640 --> 00:24:41,440
then if we move over to our sort of host

795
00:24:41,440 --> 00:24:42,400
machine again

796
00:24:42,400 --> 00:24:43,919
the root and then you'll see these

797
00:24:43,919 --> 00:24:45,919
static routes added to our os machine

798
00:24:45,919 --> 00:24:47,279
indicated with the asterix and that

799
00:24:47,279 --> 00:24:48,000
asterisk

800
00:24:48,000 --> 00:24:49,679
is saying that it's a null route so at

801
00:24:49,679 --> 00:24:51,279
this point in time you may be thinking

802
00:24:51,279 --> 00:24:53,120
why are you guys adding things to the

803
00:24:53,120 --> 00:24:53,520
null

804
00:24:53,520 --> 00:24:54,880
to the null interface because it's going

805
00:24:54,880 --> 00:24:56,720
to drop the traffic we'll explain that

806
00:24:56,720 --> 00:24:57,200
now

807
00:24:57,200 --> 00:24:59,440
so we still get that null um that null

808
00:24:59,440 --> 00:25:01,440
route into ospf and how we do that is we

809
00:25:01,440 --> 00:25:03,440
specify the redistribute command

810
00:25:03,440 --> 00:25:06,000
we can go verify on the router that you

811
00:25:06,000 --> 00:25:07,600
know those routes are within the ospf

812
00:25:07,600 --> 00:25:09,440
process and you can see their quad 8

813
00:25:09,440 --> 00:25:11,840
and the 164 address is really within the

814
00:25:11,840 --> 00:25:14,080
ospf process

815
00:25:14,080 --> 00:25:15,760
we'll hop over back to the to our

816
00:25:15,760 --> 00:25:17,679
attacker machine and you know

817
00:25:17,679 --> 00:25:19,279
we asked that question again okay cool

818
00:25:19,279 --> 00:25:20,880
we've we've advertised these routes into

819
00:25:20,880 --> 00:25:22,480
the routing process but

820
00:25:22,480 --> 00:25:23,760
surely it's going to go to the null

821
00:25:23,760 --> 00:25:26,240
interface um how do we get around that

822
00:25:26,240 --> 00:25:28,159
uh we apply some policy-based routing so

823
00:25:28,159 --> 00:25:29,600
you'll see these policy-based routing

824
00:25:29,600 --> 00:25:30,400
maps

825
00:25:30,400 --> 00:25:32,000
and what we're doing there is we're

826
00:25:32,000 --> 00:25:34,240
saying if you match the parameter if you

827
00:25:34,240 --> 00:25:35,679
match traffic on those parameters that

828
00:25:35,679 --> 00:25:36,720
we specify

829
00:25:36,720 --> 00:25:39,039
forward it on to the next stop but as i

830
00:25:39,039 --> 00:25:39,760
mentioned

831
00:25:39,760 --> 00:25:42,080
it's only really relevant for the inject

832
00:25:42,080 --> 00:25:43,600
flood and not so much for the

833
00:25:43,600 --> 00:25:45,679
the redirect flag as we're doing an

834
00:25:45,679 --> 00:25:47,520
additional iptables rule

835
00:25:47,520 --> 00:25:49,360
in the back to not that traffic to your

836
00:25:49,360 --> 00:25:51,600
interface so that's cool

837
00:25:51,600 --> 00:25:54,159
we've neighbored up we've injected some

838
00:25:54,159 --> 00:25:55,440
routes

839
00:25:55,440 --> 00:25:57,039
but sort of what is the what is the net

840
00:25:57,039 --> 00:25:58,880
result of that let's have a look

841
00:25:58,880 --> 00:26:00,799
let's log into that ftp again all let's

842
00:26:00,799 --> 00:26:02,400
log into that ftp now

843
00:26:02,400 --> 00:26:04,880
connect to it specify the credentials

844
00:26:04,880 --> 00:26:06,400
verify that we connect it and switch

845
00:26:06,400 --> 00:26:08,400
back to the wireshock to see if we can

846
00:26:08,400 --> 00:26:10,320
you know successfully man in the middle

847
00:26:10,320 --> 00:26:11,919
so here you can see you know

848
00:26:11,919 --> 00:26:13,440
with man in the middle the person in the

849
00:26:13,440 --> 00:26:16,159
middle i apologize um the ftp tracker

850
00:26:16,159 --> 00:26:18,320
and we can observe the username and the

851
00:26:18,320 --> 00:26:20,720
password

852
00:26:20,720 --> 00:26:22,960
um so there's quite a bit that was going

853
00:26:22,960 --> 00:26:24,400
on over there and we'd just like to

854
00:26:24,400 --> 00:26:25,360
reiterate

855
00:26:25,360 --> 00:26:27,039
what what happened over there we learned

856
00:26:27,039 --> 00:26:28,320
some new routes just like with the

857
00:26:28,320 --> 00:26:29,279
fortigate

858
00:26:29,279 --> 00:26:31,039
but we went a step further and we

859
00:26:31,039 --> 00:26:32,640
injected some routes and that resulted

860
00:26:32,640 --> 00:26:34,480
in some traffic being redirected to our

861
00:26:34,480 --> 00:26:38,080
attacker-controlled machine

862
00:26:38,080 --> 00:26:40,320
simon um is there a way for us to

863
00:26:40,320 --> 00:26:42,159
manipulate traffic coming

864
00:26:42,159 --> 00:26:45,039
inbound to our local subnet yeah there

865
00:26:45,039 --> 00:26:45,679
is

866
00:26:45,679 --> 00:26:48,240
using dynamic routing protocols we can

867
00:26:48,240 --> 00:26:49,679
have the traffic

868
00:26:49,679 --> 00:26:51,600
uh well using dynamic reading protocols

869
00:26:51,600 --> 00:26:54,000
we can insert a route

870
00:26:54,000 --> 00:26:57,200
to a host on a local lan segment and

871
00:26:57,200 --> 00:26:58,880
inject that into the routing process of

872
00:26:58,880 --> 00:27:00,799
the greater network and that thereby

873
00:27:00,799 --> 00:27:02,000
having traffic

874
00:27:02,000 --> 00:27:04,480
that is initially destined to that host

875
00:27:04,480 --> 00:27:06,000
to first come through the attacker host

876
00:27:06,000 --> 00:27:07,919
before the server so if we take a look

877
00:27:07,919 --> 00:27:09,360
at the diagram right now

878
00:27:09,360 --> 00:27:10,960
the victim would attempt to access the

879
00:27:10,960 --> 00:27:12,799
server and would follow the blue

880
00:27:12,799 --> 00:27:15,600
arrows but now during this attack we

881
00:27:15,600 --> 00:27:16,640
would take this route

882
00:27:16,640 --> 00:27:18,559
of the server and tell the routing

883
00:27:18,559 --> 00:27:20,000
process hey we know

884
00:27:20,000 --> 00:27:22,159
a more direct route to that server and

885
00:27:22,159 --> 00:27:23,919
that would then allow us to capture

886
00:27:23,919 --> 00:27:25,360
traffic from the victim

887
00:27:25,360 --> 00:27:26,960
destined towards the server and then we

888
00:27:26,960 --> 00:27:29,200
can manipulate it to whichever way we

889
00:27:29,200 --> 00:27:30,240
would like to

890
00:27:30,240 --> 00:27:32,880
how we achieve that well we first have

891
00:27:32,880 --> 00:27:34,320
to take a closer look

892
00:27:34,320 --> 00:27:36,720
at the attacker host the configuration

893
00:27:36,720 --> 00:27:37,760
within it

894
00:27:37,760 --> 00:27:40,080
there are two uh containers or rather

895
00:27:40,080 --> 00:27:41,279
two routers in there

896
00:27:41,279 --> 00:27:44,240
one regarded as or known as root topsy

897
00:27:44,240 --> 00:27:46,080
and the other as the puruto

898
00:27:46,080 --> 00:27:47,679
root topsy will neighbor up with both

899
00:27:47,679 --> 00:27:49,760
the external router as well as

900
00:27:49,760 --> 00:27:51,919
the pure router on the host the pure

901
00:27:51,919 --> 00:27:53,360
router there is there

902
00:27:53,360 --> 00:27:56,399
mostly just to inject the route

903
00:27:56,399 --> 00:27:59,520
into the larger routing process but root

904
00:27:59,520 --> 00:28:01,760
topsy has some

905
00:28:01,760 --> 00:28:05,279
some configuration within it to prevent

906
00:28:05,279 --> 00:28:08,159
that routing or rather that route to be

907
00:28:08,159 --> 00:28:08,640
added

908
00:28:08,640 --> 00:28:10,559
to its routing table and why we want to

909
00:28:10,559 --> 00:28:11,760
prevent it is because

910
00:28:11,760 --> 00:28:14,000
root topsy shares the routing table of

911
00:28:14,000 --> 00:28:15,279
the attacker host

912
00:28:15,279 --> 00:28:17,039
so when this traffic comes back from

913
00:28:17,039 --> 00:28:18,960
another network to us we would like to

914
00:28:18,960 --> 00:28:19,360
then

915
00:28:19,360 --> 00:28:21,600
manipulate it to whichever way we want

916
00:28:21,600 --> 00:28:22,880
to and so

917
00:28:22,880 --> 00:28:25,200
that's how we then need that's why we

918
00:28:25,200 --> 00:28:26,159
need to is

919
00:28:26,159 --> 00:28:28,000
prevent the addition of that route into

920
00:28:28,000 --> 00:28:30,159
our table let's take a look at the demo

921
00:28:30,159 --> 00:28:32,240
and how this is done

922
00:28:32,240 --> 00:28:34,960
we're first going to orientate you in

923
00:28:34,960 --> 00:28:36,159
the layout of this demo

924
00:28:36,159 --> 00:28:38,480
in the top left is the attacker window

925
00:28:38,480 --> 00:28:39,520
the top right

926
00:28:39,520 --> 00:28:40,960
is where the attacker will be performing

927
00:28:40,960 --> 00:28:43,360
their commands and on the bottom

928
00:28:43,360 --> 00:28:46,080
right is the victim as you will see the

929
00:28:46,080 --> 00:28:47,919
top left right now the routing table is

930
00:28:47,919 --> 00:28:49,840
quite normal this is without us peering

931
00:28:49,840 --> 00:28:50,559
up

932
00:28:50,559 --> 00:28:52,240
in the top right we're running net

933
00:28:52,240 --> 00:28:54,159
credits

934
00:28:54,159 --> 00:28:55,840
and then we're going to show you that

935
00:28:55,840 --> 00:28:57,440
the victim's traffic is right now not

936
00:28:57,440 --> 00:28:58,399
being captured

937
00:28:58,399 --> 00:29:01,039
in any way this shows that we haven't

938
00:29:01,039 --> 00:29:02,320
done yet the attack

939
00:29:02,320 --> 00:29:04,480
and that the victim is able to normally

940
00:29:04,480 --> 00:29:05,520
access the

941
00:29:05,520 --> 00:29:08,399
smb share without its traffic being

942
00:29:08,399 --> 00:29:09,279
tampered anyway

943
00:29:09,279 --> 00:29:10,720
so you'll notice now we're attempting to

944
00:29:10,720 --> 00:29:12,320
connect to an smb share

945
00:29:12,320 --> 00:29:15,360
we're going to enter in our password and

946
00:29:15,360 --> 00:29:16,399
then we're going to do a directory

947
00:29:16,399 --> 00:29:17,360
listing

948
00:29:17,360 --> 00:29:18,960
while that's happening you'll notice

949
00:29:18,960 --> 00:29:20,640
that there is no data

950
00:29:20,640 --> 00:29:23,760
that is being printed out by netgrades

951
00:29:23,760 --> 00:29:24,960
that just proves that

952
00:29:24,960 --> 00:29:28,080
right now the victim's traffic is

953
00:29:28,080 --> 00:29:30,240
going the normal blue line way the blue

954
00:29:30,240 --> 00:29:31,520
arrow way

955
00:29:31,520 --> 00:29:34,559
if we now write up the command to run

956
00:29:34,559 --> 00:29:35,520
root topsy

957
00:29:35,520 --> 00:29:38,640
and target the protocol ospf

958
00:29:38,640 --> 00:29:40,880
this will first scan for a vulnerable

959
00:29:40,880 --> 00:29:42,640
ospf configuration

960
00:29:42,640 --> 00:29:45,200
then we'll create the necessary ospf

961
00:29:45,200 --> 00:29:46,320
config files

962
00:29:46,320 --> 00:29:49,279
for the virtual router and it will spin

963
00:29:49,279 --> 00:29:49,840
them up

964
00:29:49,840 --> 00:29:51,520
so you're going to notice now that it

965
00:29:51,520 --> 00:29:52,960
spins up a pure

966
00:29:52,960 --> 00:29:54,640
and it will spin up root topsy let's

967
00:29:54,640 --> 00:29:56,399
take a closer look at the configuration

968
00:29:56,399 --> 00:29:58,959
of the pier

969
00:29:59,520 --> 00:30:02,159
within the pier you'll take note of

970
00:30:02,159 --> 00:30:03,120
first the

971
00:30:03,120 --> 00:30:05,600
osp or rather the roots the static

972
00:30:05,600 --> 00:30:08,240
routes we're injecting

973
00:30:08,240 --> 00:30:10,000
and that is the static route to the

974
00:30:10,000 --> 00:30:13,120
server the target server

975
00:30:13,120 --> 00:30:16,080
all right then next is the ospf process

976
00:30:16,080 --> 00:30:17,919
within the ospf process

977
00:30:17,919 --> 00:30:19,919
this tells it to neighbor up with root

978
00:30:19,919 --> 00:30:20,960
topsy and

979
00:30:20,960 --> 00:30:22,799
also redistribute the static roots this

980
00:30:22,799 --> 00:30:24,960
is how we get that root into that larger

981
00:30:24,960 --> 00:30:27,279
routing process we're now going to look

982
00:30:27,279 --> 00:30:28,159
at the

983
00:30:28,159 --> 00:30:30,000
configuration of root opsy and how we

984
00:30:30,000 --> 00:30:32,240
prevent that root from being added

985
00:30:32,240 --> 00:30:34,480
to our routing table because it shares

986
00:30:34,480 --> 00:30:36,240
the rooting table of the

987
00:30:36,240 --> 00:30:39,200
um the attacker host the first two

988
00:30:39,200 --> 00:30:40,640
statements are the network statements

989
00:30:40,640 --> 00:30:41,279
for it to

990
00:30:41,279 --> 00:30:43,440
neighbor up with the external router and

991
00:30:43,440 --> 00:30:44,320
the internal

992
00:30:44,320 --> 00:30:46,720
pure router the next two statements are

993
00:30:46,720 --> 00:30:49,120
access lists the very first access list

994
00:30:49,120 --> 00:30:53,840
is for 192.168.76216.32

995
00:30:53,840 --> 00:30:56,640
so any packets with that root will match

996
00:30:56,640 --> 00:30:57,600
that access list

997
00:30:57,600 --> 00:30:59,200
and then there's a second access list

998
00:30:59,200 --> 00:31:01,120
for anything else

999
00:31:01,120 --> 00:31:03,120
together with the root maps beneath it

1000
00:31:03,120 --> 00:31:04,320
we're able to control

1001
00:31:04,320 --> 00:31:06,640
whether this route is added or not added

1002
00:31:06,640 --> 00:31:07,919
to routing table

1003
00:31:07,919 --> 00:31:09,519
we take it one step further because

1004
00:31:09,519 --> 00:31:10,960
we're using ospf

1005
00:31:10,960 --> 00:31:13,200
to neighbor up that we now add these

1006
00:31:13,200 --> 00:31:15,600
route maps on top of ospf

1007
00:31:15,600 --> 00:31:17,919
so that we don't learn it this route and

1008
00:31:17,919 --> 00:31:20,559
add it into our routing table

1009
00:31:20,559 --> 00:31:22,159
because again it's shared with the

1010
00:31:22,159 --> 00:31:24,080
attacker but it is propagated

1011
00:31:24,080 --> 00:31:27,519
throughout the larger routing process

1012
00:31:27,519 --> 00:31:29,600
so now that we've got that down we're

1013
00:31:29,600 --> 00:31:31,120
going to have a look at

1014
00:31:31,120 --> 00:31:33,679
how we've managed to redirect the

1015
00:31:33,679 --> 00:31:35,279
traffic

1016
00:31:35,279 --> 00:31:38,080
right so we're going to run netquiz and

1017
00:31:38,080 --> 00:31:39,360
then we're going to go back down to the

1018
00:31:39,360 --> 00:31:40,320
victim and attempt

1019
00:31:40,320 --> 00:31:43,840
to connect to that same smb share

1020
00:31:43,840 --> 00:31:46,320
now once i've entered the password in

1021
00:31:46,320 --> 00:31:47,440
you'll notice that

1022
00:31:47,440 --> 00:31:50,559
netcrates will print out a net intellium

1023
00:31:50,559 --> 00:31:53,440
hash this means we've successfully

1024
00:31:53,440 --> 00:31:55,120
managed to redirect the traffic

1025
00:31:55,120 --> 00:31:57,519
of that victim so now we've shown you

1026
00:31:57,519 --> 00:31:58,480
how to

1027
00:31:58,480 --> 00:32:01,679
using dynamic routing protocols inject

1028
00:32:01,679 --> 00:32:04,880
traffic or rather inject a route

1029
00:32:04,880 --> 00:32:07,360
to a host on the local lan segment into

1030
00:32:07,360 --> 00:32:08,000
the

1031
00:32:08,000 --> 00:32:10,399
routing process which then has traffic

1032
00:32:10,399 --> 00:32:12,000
originating from another network

1033
00:32:12,000 --> 00:32:14,000
first go to the attacker before going to

1034
00:32:14,000 --> 00:32:15,600
the server allowing us to perform a

1035
00:32:15,600 --> 00:32:17,279
personal middle attack

1036
00:32:17,279 --> 00:32:20,399
but root tropsy doesn't only perform

1037
00:32:20,399 --> 00:32:22,799
drp related attacks we also perform

1038
00:32:22,799 --> 00:32:24,480
attacks against first top redundancy

1039
00:32:24,480 --> 00:32:25,120
protocols

1040
00:32:25,120 --> 00:32:26,640
and we'll show you a demonstration

1041
00:32:26,640 --> 00:32:29,679
against hsrp

1042
00:32:29,679 --> 00:32:31,440
first let's orientate you around this

1043
00:32:31,440 --> 00:32:33,120
demo or the layout of this demo

1044
00:32:33,120 --> 00:32:35,360
in the top left is the attacker window

1045
00:32:35,360 --> 00:32:36,399
in the bottom

1046
00:32:36,399 --> 00:32:39,760
left is the victim router or the

1047
00:32:39,760 --> 00:32:41,120
vulnerable router rather

1048
00:32:41,120 --> 00:32:43,120
and on the right side is the victim

1049
00:32:43,120 --> 00:32:45,279
attempting to reach quad 8

1050
00:32:45,279 --> 00:32:48,320
via trace route

1051
00:32:48,559 --> 00:32:52,000
take note that the trace route to quad 8

1052
00:32:52,000 --> 00:32:54,960
takes 17 hops and this will change after

1053
00:32:54,960 --> 00:32:56,640
our attack showing that we are

1054
00:32:56,640 --> 00:32:58,799
performing a personal middle attack

1055
00:32:58,799 --> 00:33:01,840
if we go back to the top left window

1056
00:33:01,840 --> 00:33:04,320
where the attacker sits you'll notice

1057
00:33:04,320 --> 00:33:07,120
that the ip address is 10 20 33

1058
00:33:07,120 --> 00:33:08,880
take note of that because that will be

1059
00:33:08,880 --> 00:33:10,880
the next active

1060
00:33:10,880 --> 00:33:12,640
after the successful attack so we're

1061
00:33:12,640 --> 00:33:15,120
going to target the protocol hsrp

1062
00:33:15,120 --> 00:33:18,159
using root opsy which will first run

1063
00:33:18,159 --> 00:33:19,919
and perform a scan to determine whether

1064
00:33:19,919 --> 00:33:22,720
there are vulnerable hsrp configurations

1065
00:33:22,720 --> 00:33:24,720
once it notices that it will start

1066
00:33:24,720 --> 00:33:25,760
sending out

1067
00:33:25,760 --> 00:33:28,000
hsrp hello packets with a much higher

1068
00:33:28,000 --> 00:33:29,600
priority

1069
00:33:29,600 --> 00:33:32,960
to allow us to become the active d4

1070
00:33:32,960 --> 00:33:34,000
gateway

1071
00:33:34,000 --> 00:33:35,679
you'll notice that in the bottom left

1072
00:33:35,679 --> 00:33:38,559
where the vulnerable router assets

1073
00:33:38,559 --> 00:33:40,799
that it goes from a standby st or rather

1074
00:33:40,799 --> 00:33:42,720
an active state to a speak state

1075
00:33:42,720 --> 00:33:44,720
and from a speak state to a standby

1076
00:33:44,720 --> 00:33:46,640
state meaning an election process had

1077
00:33:46,640 --> 00:33:47,279
gone

1078
00:33:47,279 --> 00:33:49,600
and that there's a new active router or

1079
00:33:49,600 --> 00:33:51,600
a new default gateway which has a much

1080
00:33:51,600 --> 00:33:53,519
higher priority than itself

1081
00:33:53,519 --> 00:33:55,919
if we look at the active it is right now

1082
00:33:55,919 --> 00:33:57,279
10 20 33.

1083
00:33:57,279 --> 00:33:59,200
if we take a look at the victim it now

1084
00:33:59,200 --> 00:34:00,399
takes

1085
00:34:00,399 --> 00:34:02,880
it takes 17 hops but now it takes 18

1086
00:34:02,880 --> 00:34:03,519
hops

1087
00:34:03,519 --> 00:34:05,519
to reach quad eight with the first hop

1088
00:34:05,519 --> 00:34:06,559
being 10

1089
00:34:06,559 --> 00:34:10,159
20 33 so we've successfully performed a

1090
00:34:10,159 --> 00:34:11,760
person in the middle attack

1091
00:34:11,760 --> 00:34:15,119
uh via first top redundancy protocols

1092
00:34:15,119 --> 00:34:18,399
great so you could run root topsy to do

1093
00:34:18,399 --> 00:34:18,719
this

1094
00:34:18,719 --> 00:34:22,239
and then you'll notice that maybe your

1095
00:34:22,239 --> 00:34:23,760
network interface is melting away

1096
00:34:23,760 --> 00:34:26,079
because you have the entire user range

1097
00:34:26,079 --> 00:34:28,320
going through that one laptop and you

1098
00:34:28,320 --> 00:34:30,320
may have realized oh wait i forgot to

1099
00:34:30,320 --> 00:34:32,320
turn on ip forwarding well we've got

1100
00:34:32,320 --> 00:34:33,679
safeguards within

1101
00:34:33,679 --> 00:34:36,000
root topsy to prevent that happen but

1102
00:34:36,000 --> 00:34:37,280
what you should take note of

1103
00:34:37,280 --> 00:34:39,119
is that attacks against first top

1104
00:34:39,119 --> 00:34:40,399
redundancy protocols

1105
00:34:40,399 --> 00:34:42,399
as well as dynamic reading protocols may

1106
00:34:42,399 --> 00:34:45,040
cause denial of service

1107
00:34:45,040 --> 00:34:47,679
these can be fixed and going back to

1108
00:34:47,679 --> 00:34:49,599
what tyler mentioned earlier about being

1109
00:34:49,599 --> 00:34:50,719
specific

1110
00:34:50,719 --> 00:34:54,159
with attacks we can be specific with our

1111
00:34:54,159 --> 00:34:57,359
configurations rather than being minimal

1112
00:34:57,359 --> 00:34:59,520
and leaking out these packets to all

1113
00:34:59,520 --> 00:35:00,400
networks

1114
00:35:00,400 --> 00:35:02,800
only speak these specific packets or

1115
00:35:02,800 --> 00:35:03,680
rather yeah

1116
00:35:03,680 --> 00:35:06,079
speak these specific packers on specific

1117
00:35:06,079 --> 00:35:07,119
networks where you have

1118
00:35:07,119 --> 00:35:09,200
another router where you may need to

1119
00:35:09,200 --> 00:35:10,160
perform

1120
00:35:10,160 --> 00:35:12,079
routing protocols or dynamic routing

1121
00:35:12,079 --> 00:35:14,000
protocols or where you have

1122
00:35:14,000 --> 00:35:16,000
where you require high availability

1123
00:35:16,000 --> 00:35:18,160
between two d4 gateways between two

1124
00:35:18,160 --> 00:35:19,680
gateways

1125
00:35:19,680 --> 00:35:22,160
we can take it further and add stronger

1126
00:35:22,160 --> 00:35:23,520
authentication

1127
00:35:23,520 --> 00:35:26,400
by making use of crypto and a much

1128
00:35:26,400 --> 00:35:27,440
stronger password

1129
00:35:27,440 --> 00:35:29,680
such that it's not such an attacker is

1130
00:35:29,680 --> 00:35:31,119
not able to crack it

1131
00:35:31,119 --> 00:35:33,280
we can also then add on top of first top

1132
00:35:33,280 --> 00:35:35,119
redundancy protocols

1133
00:35:35,119 --> 00:35:38,240
making use of a much higher priority

1134
00:35:38,240 --> 00:35:40,640
such as the maximum value such that no

1135
00:35:40,640 --> 00:35:41,359
one else

1136
00:35:41,359 --> 00:35:43,760
can come into the network with a default

1137
00:35:43,760 --> 00:35:45,520
gateway with a much higher priority

1138
00:35:45,520 --> 00:35:47,040
value

1139
00:35:47,040 --> 00:35:50,560
we can also attempt to perform blue team

1140
00:35:50,560 --> 00:35:52,560
or detection against these attacks by

1141
00:35:52,560 --> 00:35:54,160
collecting syslogs of the various

1142
00:35:54,160 --> 00:35:55,359
network devices

1143
00:35:55,359 --> 00:35:57,280
and monitoring for state changes

1144
00:35:57,280 --> 00:35:58,560
monitoring for

1145
00:35:58,560 --> 00:36:01,280
new neighbors on a dynamic routing

1146
00:36:01,280 --> 00:36:03,440
protocol or monitoring for a new active

1147
00:36:03,440 --> 00:36:04,240
on a

1148
00:36:04,240 --> 00:36:05,920
first top redundancy protocols but if

1149
00:36:05,920 --> 00:36:07,359
you're a skilled attacker you may

1150
00:36:07,359 --> 00:36:07,839
probably

1151
00:36:07,839 --> 00:36:09,760
want to just redirect that traffic

1152
00:36:09,760 --> 00:36:11,359
elsewhere

1153
00:36:11,359 --> 00:36:12,400
do you want to introduce them to the

1154
00:36:12,400 --> 00:36:14,880
playground sure thing so we realized

1155
00:36:14,880 --> 00:36:15,599
that

1156
00:36:15,599 --> 00:36:17,119
everybody doesn't have networking kit

1157
00:36:17,119 --> 00:36:19,040
lying around or maybe they don't have

1158
00:36:19,040 --> 00:36:19,680
the

1159
00:36:19,680 --> 00:36:21,280
the know how to configure a network

1160
00:36:21,280 --> 00:36:22,880
emulator to sort of build a vulnerable

1161
00:36:22,880 --> 00:36:24,480
network to test these attacks and play

1162
00:36:24,480 --> 00:36:26,400
with these vulnerabilities so what we've

1163
00:36:26,400 --> 00:36:28,480
done is we've built two yaml files which

1164
00:36:28,480 --> 00:36:30,079
you can run with docker compose

1165
00:36:30,079 --> 00:36:33,839
and in the drp file um you know you can

1166
00:36:33,839 --> 00:36:35,440
it spins up a router it spins up a

1167
00:36:35,440 --> 00:36:37,359
victim and our root ops machine and

1168
00:36:37,359 --> 00:36:38,400
there's two networks

1169
00:36:38,400 --> 00:36:39,680
and if you perform their attacks you'll

1170
00:36:39,680 --> 00:36:41,359
see the traffic traversing from the one

1171
00:36:41,359 --> 00:36:43,040
network to the other network which is

1172
00:36:43,040 --> 00:36:44,800
observable by root topsy

1173
00:36:44,800 --> 00:36:48,079
and in the fhrp lab or mini lab

1174
00:36:48,079 --> 00:36:49,599
there's a victim and there's sort of a

1175
00:36:49,599 --> 00:36:51,280
high availability default gateway

1176
00:36:51,280 --> 00:36:52,240
configured

1177
00:36:52,240 --> 00:36:55,280
with vrrp it's configured in securely

1178
00:36:55,280 --> 00:36:57,440
root ops you can see that traffic and

1179
00:36:57,440 --> 00:36:58,800
then you can

1180
00:36:58,800 --> 00:37:00,800
take advantage of that effectively

1181
00:37:00,800 --> 00:37:02,079
redirecting the traffic

1182
00:37:02,079 --> 00:37:04,079
from the victim to root topsy which will

1183
00:37:04,079 --> 00:37:05,520
then forward it onto the legitimate

1184
00:37:05,520 --> 00:37:07,359
default gateway

1185
00:37:07,359 --> 00:37:08,880
what we want you to take away from this

1186
00:37:08,880 --> 00:37:10,800
talk is that network protocol security

1187
00:37:10,800 --> 00:37:11,119
is

1188
00:37:11,119 --> 00:37:13,359
still very important and using using our

1189
00:37:13,359 --> 00:37:15,599
tool it's possible to meaningfully um

1190
00:37:15,599 --> 00:37:18,480
show impact you know um and it's also

1191
00:37:18,480 --> 00:37:18,880
very

1192
00:37:18,880 --> 00:37:21,359
what's so agreeing to or speaking

1193
00:37:21,359 --> 00:37:22,720
towards what simon has said

1194
00:37:22,720 --> 00:37:24,640
it's quite easy to secure these things

1195
00:37:24,640 --> 00:37:26,000
and it's also possible to

1196
00:37:26,000 --> 00:37:28,160
to detect whether there's some malicious

1197
00:37:28,160 --> 00:37:29,520
activity going on

1198
00:37:29,520 --> 00:37:31,359
um and before we end off simon would

1199
00:37:31,359 --> 00:37:32,640
like to show you what we're currently

1200
00:37:32,640 --> 00:37:34,720
working on

1201
00:37:34,720 --> 00:37:37,440
so picture a kubernetes cluster with one

1202
00:37:37,440 --> 00:37:38,800
master and two nodes

1203
00:37:38,800 --> 00:37:40,480
this kubernetes cluster has calico

1204
00:37:40,480 --> 00:37:42,400
configured which makes use of bgp

1205
00:37:42,400 --> 00:37:44,000
to share routing information between the

1206
00:37:44,000 --> 00:37:46,000
various nodes within this cluster

1207
00:37:46,000 --> 00:37:47,920
and then that one node has been

1208
00:37:47,920 --> 00:37:49,440
compromised through

1209
00:37:49,440 --> 00:37:52,160
some means say a pod and privileged

1210
00:37:52,160 --> 00:37:53,040
escalation or

1211
00:37:53,040 --> 00:37:54,720
an attacker had access to the internal

1212
00:37:54,720 --> 00:37:56,079
network and was able to guess the

1213
00:37:56,079 --> 00:37:58,160
password route

1214
00:37:58,160 --> 00:38:01,040
the victim node has a pod that has been

1215
00:38:01,040 --> 00:38:02,000
deployed to it

1216
00:38:02,000 --> 00:38:03,839
and that performs uh when when

1217
00:38:03,839 --> 00:38:05,839
performing dns queries follows

1218
00:38:05,839 --> 00:38:08,480
the traffic uh denoted by the blue

1219
00:38:08,480 --> 00:38:10,400
arrows

1220
00:38:10,400 --> 00:38:12,960
we should we have compromised this node

1221
00:38:12,960 --> 00:38:14,240
we could maybe use

1222
00:38:14,240 --> 00:38:16,800
bird controller to start messing with

1223
00:38:16,800 --> 00:38:17,680
the routing table

1224
00:38:17,680 --> 00:38:19,760
but not everyone is familiar with the

1225
00:38:19,760 --> 00:38:20,720
bird controller

1226
00:38:20,720 --> 00:38:22,800
and so we've come up with a little tool

1227
00:38:22,800 --> 00:38:23,839
that helps you

1228
00:38:23,839 --> 00:38:26,320
either mess with the routing tables of

1229
00:38:26,320 --> 00:38:27,760
all the nodes in the cluster

1230
00:38:27,760 --> 00:38:30,320
or up for a specific node within a

1231
00:38:30,320 --> 00:38:30,960
cluster

1232
00:38:30,960 --> 00:38:33,280
and so we can actually have that traffic

1233
00:38:33,280 --> 00:38:34,240
redirected

1234
00:38:34,240 --> 00:38:36,160
following the red lines that we've shown

1235
00:38:36,160 --> 00:38:38,160
rather than going to the master

1236
00:38:38,160 --> 00:38:40,960
for dns it would come to us let's show

1237
00:38:40,960 --> 00:38:43,920
you how that is done with the demo

1238
00:38:43,920 --> 00:38:46,960
let's first orientate in the bottom left

1239
00:38:46,960 --> 00:38:50,000
is the master in the bottom right is

1240
00:38:50,000 --> 00:38:50,800
node number two

1241
00:38:50,800 --> 00:38:53,760
the victim and the top is the attacker

1242
00:38:53,760 --> 00:38:54,720
node

1243
00:38:54,720 --> 00:38:56,480
in the bottom left the master we're

1244
00:38:56,480 --> 00:38:58,000
showing you guys the core

1245
00:38:58,000 --> 00:39:01,760
dns with the ip address of 10 96 76

1246
00:39:01,760 --> 00:39:05,200
3 and 10 96 76 2.

1247
00:39:05,200 --> 00:39:06,480
those are the routes that we're going to

1248
00:39:06,480 --> 00:39:08,480
want to inject as we want that traffic

1249
00:39:08,480 --> 00:39:09,920
to come to us

1250
00:39:09,920 --> 00:39:12,079
the next thing that we'll take note of

1251
00:39:12,079 --> 00:39:13,280
is the pos deployed

1252
00:39:13,280 --> 00:39:15,839
there is a dns utils pod deployed to

1253
00:39:15,839 --> 00:39:16,400
node

1254
00:39:16,400 --> 00:39:19,440
2. let's attempt to resolve

1255
00:39:19,440 --> 00:39:22,320
the kubernetes name within that pod and

1256
00:39:22,320 --> 00:39:25,839
we receive an answer 109601

1257
00:39:25,839 --> 00:39:27,680
if we go and take a look at the routing

1258
00:39:27,680 --> 00:39:29,440
table of note 2

1259
00:39:29,440 --> 00:39:30,960
keep an eye on that because that will

1260
00:39:30,960 --> 00:39:34,640
change once we've injected new routes

1261
00:39:34,640 --> 00:39:36,000
going to the master we're going to run

1262
00:39:36,000 --> 00:39:37,920
the script which will inject those two

1263
00:39:37,920 --> 00:39:38,640
new routes

1264
00:39:38,640 --> 00:39:40,480
and you'll notice that node 2's routing

1265
00:39:40,480 --> 00:39:42,560
table has now changed

1266
00:39:42,560 --> 00:39:44,400
so we may be able to get the traffic now

1267
00:39:44,400 --> 00:39:46,079
to come to us let's see if that is the

1268
00:39:46,079 --> 00:39:46,640
case

1269
00:39:46,640 --> 00:39:48,640
let's go back to the master node and

1270
00:39:48,640 --> 00:39:51,920
attempt to resolve kubernetes

1271
00:39:51,920 --> 00:39:54,240
and now we have an answer of one three

1272
00:39:54,240 --> 00:39:54,960
three seven

1273
00:39:54,960 --> 00:39:57,280
so we've effectively redirected traffic

1274
00:39:57,280 --> 00:39:59,440
from that node

1275
00:39:59,440 --> 00:40:01,040
thank you guys for joining us in this

1276
00:40:01,040 --> 00:40:03,440
talk you guys can find our talk

1277
00:40:03,440 --> 00:40:07,119
while our code uh published on github

1278
00:40:07,119 --> 00:40:09,760
sensepress root opsy right after we are

1279
00:40:09,760 --> 00:40:10,720
done here

1280
00:40:10,720 --> 00:40:14,000
and you can catch us on the twitches or

1281
00:40:14,000 --> 00:40:18,160
on email thank you very much

1282
00:40:20,240 --> 00:40:24,400
hello hello everybody

1283
00:40:24,400 --> 00:40:26,720
i hope everyone enjoyed the talk yeah i

1284
00:40:26,720 --> 00:40:28,160
hope you guys enjoyed

1285
00:40:28,160 --> 00:40:30,720
i think we can answer the last question

1286
00:40:30,720 --> 00:40:32,400
first because we tried to

1287
00:40:32,400 --> 00:40:34,720
sort of answer most of them in the chat

1288
00:40:34,720 --> 00:40:36,880
and the last one was

1289
00:40:36,880 --> 00:40:38,480
i may have missed it but the playground

1290
00:40:38,480 --> 00:40:40,079
yaml is for

1291
00:40:40,079 --> 00:40:44,480
what platform container um sort of

1292
00:40:44,480 --> 00:40:46,800
both of them are slightly different but

1293
00:40:46,800 --> 00:40:48,640
the attacker container will always be

1294
00:40:48,640 --> 00:40:49,599
the

1295
00:40:49,599 --> 00:40:51,680
well for the drp stuff it will be a fr

1296
00:40:51,680 --> 00:40:53,280
routine container

1297
00:40:53,280 --> 00:40:56,640
and for the fhrp the vrp

1298
00:40:56,640 --> 00:41:00,160
is a just a custom keeper ifd container

1299
00:41:00,160 --> 00:41:01,680
which we perform the attack with i don't

1300
00:41:01,680 --> 00:41:06,319
know if that answers the question

1301
00:41:06,319 --> 00:41:09,280
um then the other question uh does this

1302
00:41:09,280 --> 00:41:10,240
tool work in an

1303
00:41:10,240 --> 00:41:13,920
aws vpc or azure v-net um just to just

1304
00:41:13,920 --> 00:41:15,440
get some more clarity around that

1305
00:41:15,440 --> 00:41:18,319
uh the tool root topsy was mostly done

1306
00:41:18,319 --> 00:41:19,839
on on-prem kind of infrastructure and

1307
00:41:19,839 --> 00:41:20,800
setups

1308
00:41:20,800 --> 00:41:22,880
so as something we still have to go and

1309
00:41:22,880 --> 00:41:24,000
play around and see

1310
00:41:24,000 --> 00:41:26,079
what the networking is like within the

1311
00:41:26,079 --> 00:41:29,680
cloud on that side of things

1312
00:41:30,960 --> 00:41:33,520
and i'm just checking if there's any

1313
00:41:33,520 --> 00:41:35,040
other questions

1314
00:41:35,040 --> 00:41:37,680
i believe we've covered everything else

1315
00:41:37,680 --> 00:41:38,880
uh regarding

1316
00:41:38,880 --> 00:41:41,040
the tool uh we'll just now go on to

1317
00:41:41,040 --> 00:41:43,359
github and be releasing it live so that

1318
00:41:43,359 --> 00:41:45,359
everyone can go and have a look at it

1319
00:41:45,359 --> 00:41:46,720
and play around with it and

1320
00:41:46,720 --> 00:41:51,040
also open up pull requests for us right

1321
00:41:51,040 --> 00:41:54,160
yeah and there'll be a blog post in not

1322
00:41:54,160 --> 00:41:58,240
too far future at some point

1323
00:41:58,880 --> 00:42:03,119
thanks everyone for joining

