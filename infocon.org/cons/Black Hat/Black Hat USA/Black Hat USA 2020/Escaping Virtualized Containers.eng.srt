1
00:00:03,410 --> 00:00:15,759
[Music]

2
00:00:15,759 --> 00:00:17,440
hi everyone thank you for joining

3
00:00:17,440 --> 00:00:18,960
today we'll be escaping virtualized

4
00:00:18,960 --> 00:00:20,960
containers hey i'm evaluating i'm a

5
00:00:20,960 --> 00:00:22,320
security researcher

6
00:00:22,320 --> 00:00:24,240
at palo alto networks and me and my

7
00:00:24,240 --> 00:00:26,720
team's main focus is a cloud security

8
00:00:26,720 --> 00:00:27,920
and container security

9
00:00:27,920 --> 00:00:29,039
and today i'm going to walk you through

10
00:00:29,039 --> 00:00:30,800
a research i conducted on a cata

11
00:00:30,800 --> 00:00:32,079
containers which is a

12
00:00:32,079 --> 00:00:34,640
sandboxing solution for containers that

13
00:00:34,640 --> 00:00:35,200
runs

14
00:00:35,200 --> 00:00:37,360
virtualized containers it runs each

15
00:00:37,360 --> 00:00:38,239
container

16
00:00:38,239 --> 00:00:40,480
inside the virtual machine and today

17
00:00:40,480 --> 00:00:42,239
we're trying to escape that sandbox and

18
00:00:42,239 --> 00:00:43,360
hopefully

19
00:00:43,360 --> 00:00:44,800
through that learn a bit about the

20
00:00:44,800 --> 00:00:46,399
container security so

21
00:00:46,399 --> 00:00:48,719
a bit about the agenda for today we'll

22
00:00:48,719 --> 00:00:50,239
start off by talking about the

23
00:00:50,239 --> 00:00:51,760
container and container security in

24
00:00:51,760 --> 00:00:53,920
general and then we'll talk about

25
00:00:53,920 --> 00:00:55,920
cutter containers a sandboxing solution

26
00:00:55,920 --> 00:00:56,960
like i've said

27
00:00:56,960 --> 00:00:58,640
why is that needed and how is it

28
00:00:58,640 --> 00:01:00,800
implemented and

29
00:01:00,800 --> 00:01:02,879
then we'll try to escape the sandbox so

30
00:01:02,879 --> 00:01:04,239
we first need to

31
00:01:04,239 --> 00:01:06,080
break out of the container and then

32
00:01:06,080 --> 00:01:07,600
escape the virtual machine

33
00:01:07,600 --> 00:01:09,280
so we have a quite a bit of challenges

34
00:01:09,280 --> 00:01:11,040
ahead and then we'll wrap it up with

35
00:01:11,040 --> 00:01:11,360
some

36
00:01:11,360 --> 00:01:13,520
takeaways from the research so let's

37
00:01:13,520 --> 00:01:14,720
start with containers

38
00:01:14,720 --> 00:01:17,759
there's a misconception that containers

39
00:01:17,759 --> 00:01:19,200
are just lightweight vms

40
00:01:19,200 --> 00:01:21,759
that's not the case truth on steroids is

41
00:01:21,759 --> 00:01:22,640
actually a better

42
00:01:22,640 --> 00:01:24,400
description if you're familiar with

43
00:01:24,400 --> 00:01:26,000
linux but

44
00:01:26,000 --> 00:01:27,439
when i wanted to really sum up

45
00:01:27,439 --> 00:01:29,439
containers in one sentence what i came

46
00:01:29,439 --> 00:01:30,320
up with is

47
00:01:30,320 --> 00:01:32,320
restricted processes running in a

48
00:01:32,320 --> 00:01:33,600
separate file system

49
00:01:33,600 --> 00:01:35,759
and the keyword here is processes at the

50
00:01:35,759 --> 00:01:37,280
end containers are just

51
00:01:37,280 --> 00:01:39,119
linux processors running with a couple

52
00:01:39,119 --> 00:01:41,040
of isolation primitives

53
00:01:41,040 --> 00:01:42,960
applied to them and you probably heard

54
00:01:42,960 --> 00:01:44,640
about some of those

55
00:01:44,640 --> 00:01:47,840
isolation isolation primitives

56
00:01:47,840 --> 00:01:50,720
so for example namespaces define what a

57
00:01:50,720 --> 00:01:52,240
process or what a container

58
00:01:52,240 --> 00:01:54,799
can see so the pid namespace will define

59
00:01:54,799 --> 00:01:56,240
what other processes

60
00:01:56,240 --> 00:01:58,880
may containers see and then you have

61
00:01:58,880 --> 00:02:00,240
primitives which are more related to

62
00:02:00,240 --> 00:02:01,680
what a container can do

63
00:02:01,680 --> 00:02:04,000
like capabilities in a second so for

64
00:02:04,000 --> 00:02:05,600
example capabilities

65
00:02:05,600 --> 00:02:07,439
are based are basically privileges in

66
00:02:07,439 --> 00:02:09,679
linux so you wouldn't like the container

67
00:02:09,679 --> 00:02:10,560
to have the

68
00:02:10,560 --> 00:02:12,800
assist reboot capability as that would

69
00:02:12,800 --> 00:02:14,239
allow him to shut down the machine and

70
00:02:14,239 --> 00:02:15,520
of course that's something you don't

71
00:02:15,520 --> 00:02:16,319
want the

72
00:02:16,319 --> 00:02:19,520
container to be able to do finally the

73
00:02:19,520 --> 00:02:20,879
final piece that really ties it all

74
00:02:20,879 --> 00:02:22,800
together our control groups or

75
00:02:22,800 --> 00:02:24,800
c groups which are all about resource

76
00:02:24,800 --> 00:02:26,480
isolation and limiting

77
00:02:26,480 --> 00:02:29,120
the containers access to host resources

78
00:02:29,120 --> 00:02:30,319
for example you wouldn't like the

79
00:02:30,319 --> 00:02:32,160
container to be able to

80
00:02:32,160 --> 00:02:35,360
exhaust the entire host memory

81
00:02:35,360 --> 00:02:36,800
and launch a denial of service attack

82
00:02:36,800 --> 00:02:38,640
against the host right

83
00:02:38,640 --> 00:02:41,360
and all of those together give allow us

84
00:02:41,360 --> 00:02:42,319
to

85
00:02:42,319 --> 00:02:44,480
separate a process enough from the

86
00:02:44,480 --> 00:02:46,400
system for it to be considered

87
00:02:46,400 --> 00:02:48,720
a container but you still can't really

88
00:02:48,720 --> 00:02:51,440
compare the type of isolation

89
00:02:51,440 --> 00:02:53,200
provided by those primitives and the

90
00:02:53,200 --> 00:02:54,800
isolation of containers

91
00:02:54,800 --> 00:02:56,560
to the level of isolation provided by

92
00:02:56,560 --> 00:02:58,879
virtual machines and and the main

93
00:02:58,879 --> 00:03:01,440
difference is is that a virtual machines

94
00:03:01,440 --> 00:03:02,400
run with a

95
00:03:02,400 --> 00:03:05,200
on a separate kernel from the from the

96
00:03:05,200 --> 00:03:06,959
host and containers

97
00:03:06,959 --> 00:03:10,000
share the host kernel and that's really

98
00:03:10,000 --> 00:03:12,000
a fancy way of saying that containers

99
00:03:12,000 --> 00:03:14,159
at the end are just processes and like

100
00:03:14,159 --> 00:03:16,480
any process they interact with the

101
00:03:16,480 --> 00:03:19,040
kernel quite frequently frequently

102
00:03:19,040 --> 00:03:20,000
either a

103
00:03:20,000 --> 00:03:21,840
when they invoke system call or if a

104
00:03:21,840 --> 00:03:23,280
page fault happen

105
00:03:23,280 --> 00:03:26,560
it happens in their context

106
00:03:26,560 --> 00:03:28,959
and that means that like other processes

107
00:03:28,959 --> 00:03:29,599
on the

108
00:03:29,599 --> 00:03:32,000
on the machine and the kernel is quite a

109
00:03:32,000 --> 00:03:33,360
large of an attack surface for

110
00:03:33,360 --> 00:03:35,040
containers to try and exploit

111
00:03:35,040 --> 00:03:37,920
uh to gain a foothold and a control over

112
00:03:37,920 --> 00:03:39,120
the entire host

113
00:03:39,120 --> 00:03:42,560
right and the the issue here is that

114
00:03:42,560 --> 00:03:44,239
those vulnerabilities don't really have

115
00:03:44,239 --> 00:03:45,040
to be

116
00:03:45,040 --> 00:03:48,000
related to namespaces or to c groups or

117
00:03:48,000 --> 00:03:49,519
to any of the primitives

118
00:03:49,519 --> 00:03:52,640
that really make up containers just any

119
00:03:52,640 --> 00:03:54,159
privilege escalation vulnerability in

120
00:03:54,159 --> 00:03:56,400
the kernel in the in a code path in the

121
00:03:56,400 --> 00:03:57,280
kernel that

122
00:03:57,280 --> 00:04:00,159
the container can somehow invoke it

123
00:04:00,159 --> 00:04:01,760
could allow a container to

124
00:04:01,760 --> 00:04:04,400
break out and that's quite concerning uh

125
00:04:04,400 --> 00:04:06,000
in a lot of scenarios

126
00:04:06,000 --> 00:04:09,120
and to tackle that that issue

127
00:04:09,120 --> 00:04:12,319
a few a solution around a few tools

128
00:04:12,319 --> 00:04:15,519
arrives that allow you to sandbox

129
00:04:15,519 --> 00:04:16,399
container

130
00:04:16,399 --> 00:04:18,560
and cutter containers is one of the

131
00:04:18,560 --> 00:04:19,680
first solution

132
00:04:19,680 --> 00:04:21,839
to actually try to do that and it takes

133
00:04:21,839 --> 00:04:24,080
a pretty straightforward approach at the

134
00:04:24,080 --> 00:04:25,759
sandbox in the containers

135
00:04:25,759 --> 00:04:28,720
it just runs each container inside the

136
00:04:28,720 --> 00:04:29,440
dedicated

137
00:04:29,440 --> 00:04:31,520
lightweight virtual machine and by doing

138
00:04:31,520 --> 00:04:33,360
that you get two layers of isolation

139
00:04:33,360 --> 00:04:34,240
right you get

140
00:04:34,240 --> 00:04:36,000
first the container and then the virtual

141
00:04:36,000 --> 00:04:38,560
machine and you also mitigated the

142
00:04:38,560 --> 00:04:40,080
breakouts which are based on kernel

143
00:04:40,080 --> 00:04:42,000
vulnerabilities because even if the

144
00:04:42,000 --> 00:04:43,600
container exploits a vulnerability in

145
00:04:43,600 --> 00:04:44,639
the guest kernel

146
00:04:44,639 --> 00:04:46,479
he's only compromising the guest right

147
00:04:46,479 --> 00:04:48,720
he still doesn't have access to the host

148
00:04:48,720 --> 00:04:50,639
and really the idea of qatar is to

149
00:04:50,639 --> 00:04:52,560
provide a simple way

150
00:04:52,560 --> 00:04:54,800
to sandbox containers where you can just

151
00:04:54,800 --> 00:04:56,000
plug qatar

152
00:04:56,000 --> 00:04:58,240
into existing solutions like docker and

153
00:04:58,240 --> 00:04:59,280
kubernetes

154
00:04:59,280 --> 00:05:01,520
and have a certain containers run with

155
00:05:01,520 --> 00:05:02,720
an additional

156
00:05:02,720 --> 00:05:04,880
layer of isolation so what's what's the

157
00:05:04,880 --> 00:05:05,919
use case

158
00:05:05,919 --> 00:05:08,080
for this type of solution so first as

159
00:05:08,080 --> 00:05:10,000
i've said kata is great for

160
00:05:10,000 --> 00:05:12,080
untrusted or targeted containers where

161
00:05:12,080 --> 00:05:14,000
you you're afraid the container might

162
00:05:14,000 --> 00:05:15,039
want to

163
00:05:15,039 --> 00:05:16,960
break out and affect the host and it's

164
00:05:16,960 --> 00:05:18,880
also really useful in multi-tenant

165
00:05:18,880 --> 00:05:20,560
environments where you want to

166
00:05:20,560 --> 00:05:23,759
segregate a container from

167
00:05:23,759 --> 00:05:25,840
several tenants and there are a lot of

168
00:05:25,840 --> 00:05:26,800
scenarios where you

169
00:05:26,800 --> 00:05:29,440
those use cases are useful but cloud

170
00:05:29,440 --> 00:05:30,479
service provider is

171
00:05:30,479 --> 00:05:33,360
is one of the prominent ones because

172
00:05:33,360 --> 00:05:33,759
that's

173
00:05:33,759 --> 00:05:35,680
those two use cases are really the

174
00:05:35,680 --> 00:05:37,440
problem that cloud service providers

175
00:05:37,440 --> 00:05:40,240
have right they run a containers from

176
00:05:40,240 --> 00:05:42,800
multiple customers on the same platforms

177
00:05:42,800 --> 00:05:44,720
those containers might be malicious they

178
00:05:44,720 --> 00:05:47,120
really don't they really don't know

179
00:05:47,120 --> 00:05:49,600
they need a and they need a solution to

180
00:05:49,600 --> 00:05:51,600
create a strong isolation boundary

181
00:05:51,600 --> 00:05:53,039
between containers of different

182
00:05:53,039 --> 00:05:55,440
customers right and qatar really fits

183
00:05:55,440 --> 00:05:57,600
that scenario

184
00:05:57,600 --> 00:05:59,680
great and several cloud service

185
00:05:59,680 --> 00:06:01,600
providers are already using qatar in

186
00:06:01,600 --> 00:06:02,479
production

187
00:06:02,479 --> 00:06:05,600
to support customer multi-tenancy so how

188
00:06:05,600 --> 00:06:06,560
do you really

189
00:06:06,560 --> 00:06:10,160
use kata and so

190
00:06:10,160 --> 00:06:11,840
in a normal container setup you have the

191
00:06:11,840 --> 00:06:13,199
container engines or something like

192
00:06:13,199 --> 00:06:13,759
docker

193
00:06:13,759 --> 00:06:15,759
and you also have the container runtime

194
00:06:15,759 --> 00:06:17,280
and that's because container engines

195
00:06:17,280 --> 00:06:19,280
don't really know how to run containers

196
00:06:19,280 --> 00:06:21,520
and when they actually need to they

197
00:06:21,520 --> 00:06:23,520
defer to their defined run time

198
00:06:23,520 --> 00:06:25,520
and that runtime actually knows how to

199
00:06:25,520 --> 00:06:26,800
set up the container

200
00:06:26,800 --> 00:06:28,720
so normally you would use the run c

201
00:06:28,720 --> 00:06:29,919
which is the default

202
00:06:29,919 --> 00:06:32,720
in industry standard runtime but you can

203
00:06:32,720 --> 00:06:33,680
decide that you

204
00:06:33,680 --> 00:06:35,680
if you have an untrusted container where

205
00:06:35,680 --> 00:06:37,520
you want to sandbox that container

206
00:06:37,520 --> 00:06:39,759
you can just define kata as the

207
00:06:39,759 --> 00:06:41,440
underlying runtime of your container

208
00:06:41,440 --> 00:06:41,840
engine

209
00:06:41,840 --> 00:06:44,880
say say docker and now when you run that

210
00:06:44,880 --> 00:06:46,960
container with kata it will be

211
00:06:46,960 --> 00:06:48,560
deployed inside the virtual machine with

212
00:06:48,560 --> 00:06:51,120
an additional layer of isolation

213
00:06:51,120 --> 00:06:53,360
so we at the end of the day want to

214
00:06:53,360 --> 00:06:54,479
break out of this

215
00:06:54,479 --> 00:06:56,720
of this sandbox so let's see a bit more

216
00:06:56,720 --> 00:06:58,479
in depth how does that work so that's

217
00:06:58,479 --> 00:06:59,280
how you

218
00:06:59,280 --> 00:07:01,840
that's the command to start a container

219
00:07:01,840 --> 00:07:03,520
under docker with qatar

220
00:07:03,520 --> 00:07:05,599
and the way this works is docker will

221
00:07:05,599 --> 00:07:08,240
tell the cataract time on the host

222
00:07:08,240 --> 00:07:10,479
please set up a container for me and the

223
00:07:10,479 --> 00:07:12,240
canter runtime now needs to set up a

224
00:07:12,240 --> 00:07:13,199
virtual machine

225
00:07:13,199 --> 00:07:14,840
so it will defer to one of the

226
00:07:14,840 --> 00:07:16,400
predefined

227
00:07:16,400 --> 00:07:18,560
virtual machine monitors virtual machine

228
00:07:18,560 --> 00:07:19,919
monitors are basically software that

229
00:07:19,919 --> 00:07:20,479
knows

230
00:07:20,479 --> 00:07:22,639
how to set up virtual machines and those

231
00:07:22,639 --> 00:07:24,080
are either a qmu

232
00:07:24,080 --> 00:07:26,400
a cloud hypervisor by intel or file

233
00:07:26,400 --> 00:07:27,599
cracker by amazon

234
00:07:27,599 --> 00:07:29,199
and it will use one of those to set up

235
00:07:29,199 --> 00:07:31,360
the virtual machine next it will also

236
00:07:31,360 --> 00:07:33,039
set up a shared directory

237
00:07:33,039 --> 00:07:34,639
between the host and the guest virtual

238
00:07:34,639 --> 00:07:36,720
machine to deliver some files for the

239
00:07:36,720 --> 00:07:39,440
fro to the guest for example in order to

240
00:07:39,440 --> 00:07:40,160
deploy the

241
00:07:40,160 --> 00:07:42,160
container the guest must have the a

242
00:07:42,160 --> 00:07:43,199
container image

243
00:07:43,199 --> 00:07:46,319
right and and now once that done

244
00:07:46,319 --> 00:07:48,720
a process called the cutter agent will

245
00:07:48,720 --> 00:07:49,840
start running

246
00:07:49,840 --> 00:07:51,840
in the guest and he is responsible for

247
00:07:51,840 --> 00:07:53,759
actually deploying

248
00:07:53,759 --> 00:07:55,599
the container inside the guest so it

249
00:07:55,599 --> 00:07:57,599
will take the container configuration

250
00:07:57,599 --> 00:07:59,759
from the catalan time and also the image

251
00:07:59,759 --> 00:08:00,960
from the shell directory

252
00:08:00,960 --> 00:08:03,120
and use those two to actually deploy the

253
00:08:03,120 --> 00:08:04,240
container

254
00:08:04,240 --> 00:08:05,840
and there you have it at the end you

255
00:08:05,840 --> 00:08:08,000
have a container running inside

256
00:08:08,000 --> 00:08:09,680
a lightweight virtual machine what you

257
00:08:09,680 --> 00:08:11,360
expected and you get

258
00:08:11,360 --> 00:08:13,680
two layers of isolation so now that we

259
00:08:13,680 --> 00:08:15,039
know how things work

260
00:08:15,039 --> 00:08:17,120
let's try to escape the sandbox and uh

261
00:08:17,120 --> 00:08:18,720
why would you like to do that

262
00:08:18,720 --> 00:08:20,479
well first it's fun and it's challenging

263
00:08:20,479 --> 00:08:22,319
right you have two isolation layers

264
00:08:22,319 --> 00:08:24,560
to break out of and second i think it's

265
00:08:24,560 --> 00:08:26,639
a great opportunity to learn about

266
00:08:26,639 --> 00:08:27,919
container security

267
00:08:27,919 --> 00:08:30,639
so what's our attack scenario so

268
00:08:30,639 --> 00:08:32,559
enterprises use qatar to contain

269
00:08:32,559 --> 00:08:35,039
untrusted and targeted containers we're

270
00:08:35,039 --> 00:08:37,279
that untrusted container trying to break

271
00:08:37,279 --> 00:08:38,719
out and affect the host

272
00:08:38,719 --> 00:08:41,279
cloud service providers use qatar to

273
00:08:41,279 --> 00:08:43,120
support customer multi-tenancy

274
00:08:43,120 --> 00:08:45,120
so we're that evil customer uploading

275
00:08:45,120 --> 00:08:46,560
our malicious containers

276
00:08:46,560 --> 00:08:48,000
and trying to break out and affect the

277
00:08:48,000 --> 00:08:49,600
entire platform and affect other

278
00:08:49,600 --> 00:08:50,560
customers

279
00:08:50,560 --> 00:08:52,880
so as that as a malicious container

280
00:08:52,880 --> 00:08:54,000
what's the plan

281
00:08:54,000 --> 00:08:55,440
it's pretty straightforward we first

282
00:08:55,440 --> 00:08:57,200
need to escape the container

283
00:08:57,200 --> 00:08:59,040
and then break out of the virtual

284
00:08:59,040 --> 00:09:01,200
machine so we'll get to that in a second

285
00:09:01,200 --> 00:09:02,560
but i want to

286
00:09:02,560 --> 00:09:05,120
discuss scope for a bit a kata is very

287
00:09:05,120 --> 00:09:06,080
configurable

288
00:09:06,080 --> 00:09:08,080
the vulnerabilities i'll show here won't

289
00:09:08,080 --> 00:09:10,480
work in every configuration but we'll be

290
00:09:10,480 --> 00:09:12,399
targeting at the standard default

291
00:09:12,399 --> 00:09:14,720
configuration that cutter ships with

292
00:09:14,720 --> 00:09:17,279
it also will be focusing on a simple

293
00:09:17,279 --> 00:09:18,399
container guest

294
00:09:18,399 --> 00:09:20,480
on a single container guest under docker

295
00:09:20,480 --> 00:09:22,000
and with kubernetes you could have

296
00:09:22,000 --> 00:09:25,200
a multiple containers in one guest which

297
00:09:25,200 --> 00:09:27,040
some exploitation gets complex because

298
00:09:27,040 --> 00:09:29,120
of that and in one of the attacks i'm

299
00:09:29,120 --> 00:09:31,120
going to show them still i still need to

300
00:09:31,120 --> 00:09:32,800
win a race condition for that to work

301
00:09:32,800 --> 00:09:34,160
under kubernetes so

302
00:09:34,160 --> 00:09:36,480
we'll keep it simple we will focus on a

303
00:09:36,480 --> 00:09:38,560
single container guest under docker

304
00:09:38,560 --> 00:09:40,399
and finally i want to say this is not an

305
00:09:40,399 --> 00:09:42,880
indictment against kata you know every

306
00:09:42,880 --> 00:09:44,080
software will have

307
00:09:44,080 --> 00:09:46,000
its share of vulnerabilities i really

308
00:09:46,000 --> 00:09:48,399
want to show it just to so you could

309
00:09:48,399 --> 00:09:51,040
learn about container security so our

310
00:09:51,040 --> 00:09:52,640
first job of the day as i've said is to

311
00:09:52,640 --> 00:09:54,240
escape the container right

312
00:09:54,240 --> 00:09:56,720
so we could rely on the vulnerability in

313
00:09:56,720 --> 00:09:57,839
the guest kernel

314
00:09:57,839 --> 00:10:00,080
right and in a privileged escalation

315
00:10:00,080 --> 00:10:01,680
vulnerability in the guest kernel

316
00:10:01,680 --> 00:10:03,680
but that really misses the point right

317
00:10:03,680 --> 00:10:04,880
we want to learn about container

318
00:10:04,880 --> 00:10:06,640
security we want to find an issue that

319
00:10:06,640 --> 00:10:07,600
is related

320
00:10:07,600 --> 00:10:09,920
to containers so we want to find a

321
00:10:09,920 --> 00:10:11,760
native issue with how kata

322
00:10:11,760 --> 00:10:13,279
sets up the container inside the guest

323
00:10:13,279 --> 00:10:14,959
virtual machine so

324
00:10:14,959 --> 00:10:16,640
in order to do that we need to talk

325
00:10:16,640 --> 00:10:18,399
about how do those

326
00:10:18,399 --> 00:10:20,320
issues even look like you know how do

327
00:10:20,320 --> 00:10:22,399
you approach the task of

328
00:10:22,399 --> 00:10:24,240
looking at the container runtime and

329
00:10:24,240 --> 00:10:25,440
trying to break it

330
00:10:25,440 --> 00:10:27,839
so let's look again at the setup of a

331
00:10:27,839 --> 00:10:29,360
containerized environment

332
00:10:29,360 --> 00:10:31,440
so you have the engine which as i've

333
00:10:31,440 --> 00:10:33,360
said like like docker which as i've said

334
00:10:33,360 --> 00:10:34,720
doesn't really know how to set up

335
00:10:34,720 --> 00:10:36,399
containers and you have the runtime

336
00:10:36,399 --> 00:10:37,920
which really knows how to

337
00:10:37,920 --> 00:10:39,519
take configuration and set up a

338
00:10:39,519 --> 00:10:41,600
container so the engine responsibility

339
00:10:41,600 --> 00:10:42,880
here is to

340
00:10:42,880 --> 00:10:45,360
generate a secure configuration it will

341
00:10:45,360 --> 00:10:46,959
tell the runtime what restrictions to

342
00:10:46,959 --> 00:10:48,000
set up so where

343
00:10:48,000 --> 00:10:50,480
which namespaces and which capabilities

344
00:10:50,480 --> 00:10:51,360
and so on

345
00:10:51,360 --> 00:10:52,480
and the runtime will take that

346
00:10:52,480 --> 00:10:55,760
configuration and apply it

347
00:10:55,760 --> 00:10:58,320
to create a container now when you're

348
00:10:58,320 --> 00:11:00,160
talking about how do you uh

349
00:11:00,160 --> 00:11:02,160
escape containers you're really talking

350
00:11:02,160 --> 00:11:03,760
about what issues

351
00:11:03,760 --> 00:11:06,480
uh could be in this in this process so

352
00:11:06,480 --> 00:11:08,640
the first type of issue that could er

353
00:11:08,640 --> 00:11:10,480
that could arise in this process is in

354
00:11:10,480 --> 00:11:12,079
the initialization of a

355
00:11:12,079 --> 00:11:13,920
of the containerized process and you

356
00:11:13,920 --> 00:11:15,920
have a host process the runtime

357
00:11:15,920 --> 00:11:17,839
trying to use untrusted variables like

358
00:11:17,839 --> 00:11:19,839
like the container image and the command

359
00:11:19,839 --> 00:11:22,399
and to set up a containerized process

360
00:11:22,399 --> 00:11:23,760
that process is really

361
00:11:23,760 --> 00:11:26,480
uh that a procedure is really a

362
00:11:26,480 --> 00:11:27,440
complicated

363
00:11:27,440 --> 00:11:31,200
and crucial and a lot of the

364
00:11:31,200 --> 00:11:33,360
issues was found in that process for

365
00:11:33,360 --> 00:11:34,399
example

366
00:11:34,399 --> 00:11:35,839
there was an issue with the runtime

367
00:11:35,839 --> 00:11:38,640
exposing a briefly exposing host file

368
00:11:38,640 --> 00:11:39,519
descriptors

369
00:11:39,519 --> 00:11:40,959
to the container which the container

370
00:11:40,959 --> 00:11:42,880
could have used to break out and that

371
00:11:42,880 --> 00:11:44,959
issue really is a runtime issue

372
00:11:44,959 --> 00:11:47,680
because the runtime is the one in charge

373
00:11:47,680 --> 00:11:49,120
of setting up the container

374
00:11:49,120 --> 00:11:52,399
right and the second type of issue

375
00:11:52,399 --> 00:11:55,360
is really an engine issue where you at

376
00:11:55,360 --> 00:11:56,000
the end you

377
00:11:56,000 --> 00:11:57,760
you finish the initial initialization of

378
00:11:57,760 --> 00:11:59,680
the container and now you have a running

379
00:11:59,680 --> 00:12:00,800
container with a couple

380
00:12:00,800 --> 00:12:03,680
of restrictions applied to it but there

381
00:12:03,680 --> 00:12:05,600
could be a scenario where that container

382
00:12:05,600 --> 00:12:07,519
is simply not restricted enough

383
00:12:07,519 --> 00:12:10,639
right and that really points to a

384
00:12:10,639 --> 00:12:12,560
a problem with the container

385
00:12:12,560 --> 00:12:13,760
configuration

386
00:12:13,760 --> 00:12:15,519
and the restrictions supplied by the

387
00:12:15,519 --> 00:12:17,600
engine and because that that's a

388
00:12:17,600 --> 00:12:20,800
issue with the engine and it really it's

389
00:12:20,800 --> 00:12:22,720
it points to permissive engine defaults

390
00:12:22,720 --> 00:12:24,800
or perhaps to a new breakout techniques

391
00:12:24,800 --> 00:12:26,639
that wasn't discovered before

392
00:12:26,639 --> 00:12:28,639
and normally those are the two areas

393
00:12:28,639 --> 00:12:29,839
where you will hunt for

394
00:12:29,839 --> 00:12:32,880
issues and vulnerabilities in but

395
00:12:32,880 --> 00:12:35,120
when i came to look at qatar i noticed

396
00:12:35,120 --> 00:12:37,120
that it's quite a unique case

397
00:12:37,120 --> 00:12:39,839
because kata is a runtime that actually

398
00:12:39,839 --> 00:12:41,440
modifies the configuration

399
00:12:41,440 --> 00:12:43,519
uh received from the engine and the

400
00:12:43,519 --> 00:12:44,639
reason it does it it

401
00:12:44,639 --> 00:12:46,800
is because it turns out that a

402
00:12:46,800 --> 00:12:49,200
configuration generated on the host

403
00:12:49,200 --> 00:12:51,920
need to be adjusted in order to be a

404
00:12:51,920 --> 00:12:52,639
valid

405
00:12:52,639 --> 00:12:55,200
a valid for use to deploy a container

406
00:12:55,200 --> 00:12:57,279
inside a different machine inside the

407
00:12:57,279 --> 00:12:58,800
virtual machine which has a

408
00:12:58,800 --> 00:13:00,639
different kernel a different set of

409
00:13:00,639 --> 00:13:02,800
emulated hardware and so on

410
00:13:02,800 --> 00:13:06,000
but that's really dangerous to do

411
00:13:06,000 --> 00:13:08,320
because container engines over the years

412
00:13:08,320 --> 00:13:10,000
of vulnerabilities

413
00:13:10,000 --> 00:13:13,040
have learned how to create a restricted

414
00:13:13,040 --> 00:13:14,480
enough configuration that isn't

415
00:13:14,480 --> 00:13:15,200
breakable

416
00:13:15,200 --> 00:13:17,360
so for us if we want to escape we could

417
00:13:17,360 --> 00:13:18,800
take a look at what qatar does and

418
00:13:18,800 --> 00:13:20,000
perhaps find issue

419
00:13:20,000 --> 00:13:22,079
with how it modifies the configuration

420
00:13:22,079 --> 00:13:23,920
and kata does a couple of things

421
00:13:23,920 --> 00:13:26,000
but the main things i want to focus on

422
00:13:26,000 --> 00:13:27,440
is that it discards

423
00:13:27,440 --> 00:13:29,440
a several c groups several control

424
00:13:29,440 --> 00:13:30,800
groups c groups

425
00:13:30,800 --> 00:13:33,519
and c groups are tied as i've said to

426
00:13:33,519 --> 00:13:34,800
hardware resources

427
00:13:34,800 --> 00:13:37,360
and because the host and the guest have

428
00:13:37,360 --> 00:13:38,959
a different set of hardware resources

429
00:13:38,959 --> 00:13:40,800
right the guests have an emulated set

430
00:13:40,800 --> 00:13:43,120
a virtualized set of hardware resources

431
00:13:43,120 --> 00:13:45,199
some sig groups just don't make sense

432
00:13:45,199 --> 00:13:47,600
uh in the guest if you generate them on

433
00:13:47,600 --> 00:13:48,560
the host

434
00:13:48,560 --> 00:13:52,240
so for example a device group

435
00:13:52,240 --> 00:13:53,440
the host and the guests have different

436
00:13:53,440 --> 00:13:55,839
devices and

437
00:13:55,839 --> 00:13:58,079
you might think it's a bit extreme to

438
00:13:58,079 --> 00:13:59,360
just discard several

439
00:13:59,360 --> 00:14:02,079
several c groups but if you if i wanted

440
00:14:02,079 --> 00:14:03,839
to understand the reasoning behind it i

441
00:14:03,839 --> 00:14:05,440
think i think the reasoning is that

442
00:14:05,440 --> 00:14:08,240
ac groups are known to be mainly about

443
00:14:08,240 --> 00:14:10,000
denying denial of service attacks

444
00:14:10,000 --> 00:14:11,600
preventing denial of service attack

445
00:14:11,600 --> 00:14:13,040
from the container to the underlying

446
00:14:13,040 --> 00:14:15,040
machine but because here the container

447
00:14:15,040 --> 00:14:17,199
runs inside the guest virtual machine

448
00:14:17,199 --> 00:14:19,040
it's no problem really if the container

449
00:14:19,040 --> 00:14:21,040
launches a denial of service attack

450
00:14:21,040 --> 00:14:23,760
against the guest right is is not it's

451
00:14:23,760 --> 00:14:24,240
only

452
00:14:24,240 --> 00:14:26,320
a health in itself only attacking his

453
00:14:26,320 --> 00:14:27,360
own sandbox

454
00:14:27,360 --> 00:14:30,240
he is not only closer to a gaining code

455
00:14:30,240 --> 00:14:32,320
execution on the host

456
00:14:32,320 --> 00:14:34,480
but the thing is c groups are mainly

457
00:14:34,480 --> 00:14:36,720
about preventing an rf service

458
00:14:36,720 --> 00:14:39,279
but some people forget that they're not

459
00:14:39,279 --> 00:14:40,399
only about that

460
00:14:40,399 --> 00:14:42,880
and one device one c groups that is

461
00:14:42,880 --> 00:14:44,399
actually quite interesting

462
00:14:44,399 --> 00:14:46,160
which kata doesn't enforce is the

463
00:14:46,160 --> 00:14:47,600
devices group

464
00:14:47,600 --> 00:14:49,760
and let's have a look at what the device

465
00:14:49,760 --> 00:14:52,160
group does so the devices group

466
00:14:52,160 --> 00:14:54,720
restricts the container access to system

467
00:14:54,720 --> 00:14:55,519
devices

468
00:14:55,519 --> 00:14:58,079
quite simply and qatar doesn't enforce

469
00:14:58,079 --> 00:14:59,760
that c groups as i've said

470
00:14:59,760 --> 00:15:01,760
meaning that we inside the container

471
00:15:01,760 --> 00:15:04,320
have more access than usual

472
00:15:04,320 --> 00:15:07,279
to the devices of the underlying system

473
00:15:07,279 --> 00:15:08,320
and when you look in

474
00:15:08,320 --> 00:15:10,639
that system is the guest virtual machine

475
00:15:10,639 --> 00:15:12,320
and when you look at those devices and

476
00:15:12,320 --> 00:15:14,079
think what device could be

477
00:15:14,079 --> 00:15:16,000
interesting to us from the container

478
00:15:16,000 --> 00:15:17,519
well the guest how this is quite

479
00:15:17,519 --> 00:15:18,639
interesting right

480
00:15:18,639 --> 00:15:21,360
we in the container have a view of only

481
00:15:21,360 --> 00:15:23,279
a specific file system the container

482
00:15:23,279 --> 00:15:24,160
file system

483
00:15:24,160 --> 00:15:26,079
but if we gain access to the entire

484
00:15:26,079 --> 00:15:29,120
guest hard disk we can now

485
00:15:29,120 --> 00:15:31,519
possibly manipulate it in order to gain

486
00:15:31,519 --> 00:15:32,880
code execution on the host

487
00:15:32,880 --> 00:15:36,399
right so how do you even access a hard

488
00:15:36,399 --> 00:15:36,880
disk

489
00:15:36,880 --> 00:15:39,759
in linux what and those type of devices

490
00:15:39,759 --> 00:15:41,440
are called block devices

491
00:15:41,440 --> 00:15:44,480
well you first need a way to refer to

492
00:15:44,480 --> 00:15:45,040
that

493
00:15:45,040 --> 00:15:47,600
a hard disk to the device and in linux

494
00:15:47,600 --> 00:15:49,360
everything is a file so of course

495
00:15:49,360 --> 00:15:52,079
you create a device file that refers to

496
00:15:52,079 --> 00:15:54,240
that blog device or to that hard disk

497
00:15:54,240 --> 00:15:56,720
in linux every device is identified by

498
00:15:56,720 --> 00:15:58,880
two numbers you can see in the examples

499
00:15:58,880 --> 00:16:01,040
in the example here those are eight and

500
00:16:01,040 --> 00:16:04,079
one so you first use make node

501
00:16:04,079 --> 00:16:06,560
to create the device file referring to

502
00:16:06,560 --> 00:16:07,440
that device

503
00:16:07,440 --> 00:16:09,680
and then you mount the device file over

504
00:16:09,680 --> 00:16:11,040
some directory

505
00:16:11,040 --> 00:16:13,120
in your system and now when you interact

506
00:16:13,120 --> 00:16:15,199
with the files under the directory you

507
00:16:15,199 --> 00:16:15,839
are actually

508
00:16:15,839 --> 00:16:17,360
interacting with the hard disk right

509
00:16:17,360 --> 00:16:19,120
everything you do in the directory

510
00:16:19,120 --> 00:16:21,519
is propagated back to the hard disk and

511
00:16:21,519 --> 00:16:22,560
that's really the

512
00:16:22,560 --> 00:16:24,480
the easy way to interact with the file

513
00:16:24,480 --> 00:16:25,920
system

514
00:16:25,920 --> 00:16:28,480
but we that's actually not very useful

515
00:16:28,480 --> 00:16:29,839
for us in the container

516
00:16:29,839 --> 00:16:32,800
because the container in the container

517
00:16:32,800 --> 00:16:34,560
we have the make node capability which

518
00:16:34,560 --> 00:16:35,519
is required

519
00:16:35,519 --> 00:16:38,480
to to create the device file but we

520
00:16:38,480 --> 00:16:40,720
don't have the sys admin capability

521
00:16:40,720 --> 00:16:42,880
which from the name you you you may

522
00:16:42,880 --> 00:16:44,320
realize that it's good the containers

523
00:16:44,320 --> 00:16:46,160
don't have the sysadmin capability

524
00:16:46,160 --> 00:16:47,519
but because we don't have that

525
00:16:47,519 --> 00:16:49,519
capability we can't mount

526
00:16:49,519 --> 00:16:52,240
and below you can see a cataco a cata

527
00:16:52,240 --> 00:16:53,920
container running under docker

528
00:16:53,920 --> 00:16:55,839
which tries to which can create the

529
00:16:55,839 --> 00:16:58,240
device file for the guesthouse but

530
00:16:58,240 --> 00:17:00,800
it can mount it so it seems like we're

531
00:17:00,800 --> 00:17:02,240
in a bit of a problem even though we

532
00:17:02,240 --> 00:17:02,720
should

533
00:17:02,720 --> 00:17:05,439
have more access to the devices other

534
00:17:05,439 --> 00:17:06,559
restrictions are still

535
00:17:06,559 --> 00:17:08,720
stopping us but there is actually

536
00:17:08,720 --> 00:17:10,160
another way

537
00:17:10,160 --> 00:17:13,679
to access devices in linux and that's by

538
00:17:13,679 --> 00:17:15,760
directly reading and writing to the

539
00:17:15,760 --> 00:17:17,520
device file so you don't even need to

540
00:17:17,520 --> 00:17:18,319
mount them

541
00:17:18,319 --> 00:17:21,119
and why why is that useful for example

542
00:17:21,119 --> 00:17:22,880
if the hard disk has a corrupted file

543
00:17:22,880 --> 00:17:24,640
system and you are not able to mount it

544
00:17:24,640 --> 00:17:25,439
correctly

545
00:17:25,439 --> 00:17:27,359
you might need some direct access to the

546
00:17:27,359 --> 00:17:29,280
device to try to fix things

547
00:17:29,280 --> 00:17:32,320
so there are actually build

548
00:17:32,320 --> 00:17:34,880
tools like debug fs which you we can use

549
00:17:34,880 --> 00:17:36,000
inside the container

550
00:17:36,000 --> 00:17:37,840
to directly interact with the hard disk

551
00:17:37,840 --> 00:17:39,360
without needing to mount it

552
00:17:39,360 --> 00:17:41,120
and you can see in the example there

553
00:17:41,120 --> 00:17:42,960
that we can see the files on the hard

554
00:17:42,960 --> 00:17:44,799
disk and we have a great indication that

555
00:17:44,799 --> 00:17:46,480
that's really the guest style disk

556
00:17:46,480 --> 00:17:48,080
because when it's when we inspect the

557
00:17:48,080 --> 00:17:50,000
binaries in it we can see the cutter

558
00:17:50,000 --> 00:17:50,960
agent which we

559
00:17:50,960 --> 00:17:53,360
expect to run to be a present on the

560
00:17:53,360 --> 00:17:54,160
guest

561
00:17:54,160 --> 00:17:56,080
and it's not only reading access to the

562
00:17:56,080 --> 00:17:57,440
how this is only also

563
00:17:57,440 --> 00:17:59,440
writing access so because we don't have

564
00:17:59,440 --> 00:18:00,480
device a group

565
00:18:00,480 --> 00:18:02,240
we can actually modify the guest hard

566
00:18:02,240 --> 00:18:04,160
disk from within the container

567
00:18:04,160 --> 00:18:07,200
so does that mean we broke out can we

568
00:18:07,200 --> 00:18:07,840
now just

569
00:18:07,840 --> 00:18:10,400
easily execute code on the guest well it

570
00:18:10,400 --> 00:18:12,240
turns out that it's not so easy

571
00:18:12,240 --> 00:18:14,559
and there are two mechanisms in a way

572
00:18:14,559 --> 00:18:16,720
the page cushion the entry cache

573
00:18:16,720 --> 00:18:18,799
and because of those changes that we

574
00:18:18,799 --> 00:18:20,480
make at the device level

575
00:18:20,480 --> 00:18:22,320
may not really be apparent to a

576
00:18:22,320 --> 00:18:24,480
processors running on the guest

577
00:18:24,480 --> 00:18:28,000
so why is that in linux when you when

578
00:18:28,000 --> 00:18:30,720
a process interacts with a file linux

579
00:18:30,720 --> 00:18:31,919
will read that

580
00:18:31,919 --> 00:18:34,480
by reading it executing it or whatever

581
00:18:34,480 --> 00:18:36,320
linux will read that file from the hard

582
00:18:36,320 --> 00:18:37,039
disk right

583
00:18:37,039 --> 00:18:39,600
but that's an expensive operation so it

584
00:18:39,600 --> 00:18:40,799
will also keep

585
00:18:40,799 --> 00:18:43,760
a cache of that file content in the page

586
00:18:43,760 --> 00:18:44,720
cache

587
00:18:44,720 --> 00:18:46,799
so the next time a process access that

588
00:18:46,799 --> 00:18:48,559
file then linux doesn't have to go all

589
00:18:48,559 --> 00:18:50,320
the way to the hard disk and can simply

590
00:18:50,320 --> 00:18:51,919
access the page cache

591
00:18:51,919 --> 00:18:53,520
that's great for performance but it's

592
00:18:53,520 --> 00:18:55,440
pretty bad for us because we're in the

593
00:18:55,440 --> 00:18:56,000
container

594
00:18:56,000 --> 00:18:57,840
and we are directly writing to the hard

595
00:18:57,840 --> 00:18:59,440
disk so if we're in

596
00:18:59,440 --> 00:19:02,160
the container for example and we modify

597
00:19:02,160 --> 00:19:03,039
a sh

598
00:19:03,039 --> 00:19:04,960
on the hard disk and then some process

599
00:19:04,960 --> 00:19:06,320
on the guest tries to

600
00:19:06,320 --> 00:19:09,760
access sh if sage is already in the page

601
00:19:09,760 --> 00:19:10,320
cache

602
00:19:10,320 --> 00:19:12,240
and that process will see the original

603
00:19:12,240 --> 00:19:14,320
version of the sh from the

604
00:19:14,320 --> 00:19:16,960
page cache and not our malicious version

605
00:19:16,960 --> 00:19:18,000
on the hard disk

606
00:19:18,000 --> 00:19:19,679
and that's not good for us if you want

607
00:19:19,679 --> 00:19:21,679
to gain code execution on the guest

608
00:19:21,679 --> 00:19:24,160
to make things works the guest is pretty

609
00:19:24,160 --> 00:19:24,880
static

610
00:19:24,880 --> 00:19:27,679
and besides the kata agent and systemd

611
00:19:27,679 --> 00:19:29,520
nothing really else really runs on it

612
00:19:29,520 --> 00:19:30,960
and it doesn't really invoke and

613
00:19:30,960 --> 00:19:32,320
interacts with files

614
00:19:32,320 --> 00:19:34,400
so it's even harder for us to gain code

615
00:19:34,400 --> 00:19:35,440
execution

616
00:19:35,440 --> 00:19:38,240
so how do we deal with that problem so

617
00:19:38,240 --> 00:19:40,080
as i've said the guest is static

618
00:19:40,080 --> 00:19:42,799
so and we can't expect it to just run in

619
00:19:42,799 --> 00:19:43,520
a new

620
00:19:43,520 --> 00:19:45,200
executable so we need to replace an

621
00:19:45,200 --> 00:19:46,720
already running executable

622
00:19:46,720 --> 00:19:48,320
so that's either the cutter agent or

623
00:19:48,320 --> 00:19:50,400
systemd but those as i've said are

624
00:19:50,400 --> 00:19:52,720
already loaded to the page cache

625
00:19:52,720 --> 00:19:56,240
so in order for us to

626
00:19:56,240 --> 00:19:58,400
you know in order for the uh for

627
00:19:58,400 --> 00:19:59,600
modification that

628
00:19:59,600 --> 00:20:01,200
we make to the hard disk to actually be

629
00:20:01,200 --> 00:20:03,520
apparent to guest processes

630
00:20:03,520 --> 00:20:05,280
we need to some way to force the guest

631
00:20:05,280 --> 00:20:07,600
kernel to free the page cache

632
00:20:07,600 --> 00:20:11,120
and how can we do it well the page cache

633
00:20:11,120 --> 00:20:13,600
uses memory that is currently unused but

634
00:20:13,600 --> 00:20:14,720
if a process

635
00:20:14,720 --> 00:20:16,799
wants that memory the kernel will give

636
00:20:16,799 --> 00:20:18,400
the process that memory because it will

637
00:20:18,400 --> 00:20:18,720
say

638
00:20:18,720 --> 00:20:21,520
okay later on i can just read it again

639
00:20:21,520 --> 00:20:22,799
from the hard disk

640
00:20:22,799 --> 00:20:26,400
and and right now that memory is used

641
00:20:26,400 --> 00:20:28,880
is necessary by process so when the

642
00:20:28,880 --> 00:20:30,000
container can allocate

643
00:20:30,000 --> 00:20:33,039
small chunks of memory to a slowly chip

644
00:20:33,039 --> 00:20:33,679
away

645
00:20:33,679 --> 00:20:35,600
at the the page cache and the files in

646
00:20:35,600 --> 00:20:37,440
it until we can actually

647
00:20:37,440 --> 00:20:40,320
successfully clear cutter agent from the

648
00:20:40,320 --> 00:20:41,200
page cache

649
00:20:41,200 --> 00:20:43,679
and now when something access the the

650
00:20:43,679 --> 00:20:44,880
catagen binary

651
00:20:44,880 --> 00:20:47,280
it will must go to the hard disk so if

652
00:20:47,280 --> 00:20:48,159
it's still

653
00:20:48,159 --> 00:20:50,720
not completely clear i'll try to explain

654
00:20:50,720 --> 00:20:52,320
it by showing the how the attack will

655
00:20:52,320 --> 00:20:52,960
work

656
00:20:52,960 --> 00:20:56,400
so the attack the scenario is that we

657
00:20:56,400 --> 00:20:57,919
are in a malicious container right

658
00:20:57,919 --> 00:20:59,919
and we want to gain code execution on

659
00:20:59,919 --> 00:21:01,039
the guest

660
00:21:01,039 --> 00:21:03,520
so what we do we first override the

661
00:21:03,520 --> 00:21:05,520
cutter agent binary on the hard disk

662
00:21:05,520 --> 00:21:07,440
but nothing really really happens

663
00:21:07,440 --> 00:21:09,919
because the cut agent process the memory

664
00:21:09,919 --> 00:21:11,200
is mapped to the

665
00:21:11,200 --> 00:21:12,640
version in the page cache which isn't

666
00:21:12,640 --> 00:21:15,280
malicious so in order for our version to

667
00:21:15,280 --> 00:21:16,480
be propagated

668
00:21:16,480 --> 00:21:18,720
to the guest to the process we need we

669
00:21:18,720 --> 00:21:21,120
man we allocate small chunks of memory

670
00:21:21,120 --> 00:21:22,960
in order to clear the cutter agent from

671
00:21:22,960 --> 00:21:24,880
the page cache and now

672
00:21:24,880 --> 00:21:26,960
when the execution passes back to the

673
00:21:26,960 --> 00:21:29,039
cataloging process the kernel realizes

674
00:21:29,039 --> 00:21:31,760
okay wait i need to get the version i

675
00:21:31,760 --> 00:21:33,200
need to get cutter agent from the hard

676
00:21:33,200 --> 00:21:34,240
disk again

677
00:21:34,240 --> 00:21:36,000
and now when it does it it fetches the

678
00:21:36,000 --> 00:21:38,000
malicious version that we've put in

679
00:21:38,000 --> 00:21:41,360
we've put in the hard disk so and now

680
00:21:41,360 --> 00:21:43,840
the cutter agent process maps to our

681
00:21:43,840 --> 00:21:45,039
malicious version

682
00:21:45,039 --> 00:21:47,280
and it runs the code that we wrote to

683
00:21:47,280 --> 00:21:48,400
the guest hard disk

684
00:21:48,400 --> 00:21:50,880
so it seems like we can get a guest code

685
00:21:50,880 --> 00:21:52,080
execution

686
00:21:52,080 --> 00:21:54,799
but the truth is it's it's not really

687
00:21:54,799 --> 00:21:56,240
that easy

688
00:21:56,240 --> 00:21:58,559
because replacing a process that re

689
00:21:58,559 --> 00:21:59,919
replacing the binary

690
00:21:59,919 --> 00:22:03,200
that the process is running while it is

691
00:22:03,200 --> 00:22:03,840
running

692
00:22:03,840 --> 00:22:05,520
it's quite tricky because you can

693
00:22:05,520 --> 00:22:07,039
imagine that uh the pro

694
00:22:07,039 --> 00:22:09,200
the cut agent process is now running a

695
00:22:09,200 --> 00:22:10,400
specific op code

696
00:22:10,400 --> 00:22:13,120
in a specific function and now when we

697
00:22:13,120 --> 00:22:14,720
replace the executable that it is

698
00:22:14,720 --> 00:22:15,200
running

699
00:22:15,200 --> 00:22:17,039
we don't know when that switch will

700
00:22:17,039 --> 00:22:18,960
happen so we don't know where

701
00:22:18,960 --> 00:22:21,600
in the new binary uh where it will end

702
00:22:21,600 --> 00:22:22,400
which opcode

703
00:22:22,400 --> 00:22:24,400
it will now execute in the new binary so

704
00:22:24,400 --> 00:22:26,080
it's really hard to get the

705
00:22:26,080 --> 00:22:28,720
stable code execution using that and the

706
00:22:28,720 --> 00:22:30,240
most likely thing that will happen is

707
00:22:30,240 --> 00:22:30,559
that

708
00:22:30,559 --> 00:22:33,120
the cart agent process will just crash

709
00:22:33,120 --> 00:22:35,039
so that's not good for us we want stable

710
00:22:35,039 --> 00:22:36,880
code execution

711
00:22:36,880 --> 00:22:39,280
so instead of the of the cut agent

712
00:22:39,280 --> 00:22:41,039
process crushing being a bug over

713
00:22:41,039 --> 00:22:42,960
exploit we actually make it a feature of

714
00:22:42,960 --> 00:22:45,919
our exploit and we intentionally crash

715
00:22:45,919 --> 00:22:47,039
the cart agent binary

716
00:22:47,039 --> 00:22:49,039
so how do we do it we intentionally

717
00:22:49,039 --> 00:22:50,640
override the cutter agent binary on

718
00:22:50,640 --> 00:22:52,559
hardisk with garbage data

719
00:22:52,559 --> 00:22:55,760
but we also override another binary uh

720
00:22:55,760 --> 00:22:57,360
system the shadow with the actual

721
00:22:57,360 --> 00:22:58,960
malicious code that we want to run on

722
00:22:58,960 --> 00:22:59,919
the guest

723
00:22:59,919 --> 00:23:01,679
and then we follow the same procedure as

724
00:23:01,679 --> 00:23:03,200
before we allocate small chunks of

725
00:23:03,200 --> 00:23:03,840
memory

726
00:23:03,840 --> 00:23:05,520
to clear the cut agent from the page

727
00:23:05,520 --> 00:23:08,000
cache and now when execution passes back

728
00:23:08,000 --> 00:23:10,400
to the cut agent process on the guest it

729
00:23:10,400 --> 00:23:12,559
the kernel must read

730
00:23:12,559 --> 00:23:15,280
the garbage cut agent version from the

731
00:23:15,280 --> 00:23:15,840
disk

732
00:23:15,840 --> 00:23:18,159
from the hard disk and the a cutter

733
00:23:18,159 --> 00:23:20,080
agent process now maps to the version

734
00:23:20,080 --> 00:23:22,159
its memory now maps to the version and

735
00:23:22,159 --> 00:23:23,760
it of course crashes right because it

736
00:23:23,760 --> 00:23:26,159
now maps to garbage data

737
00:23:26,159 --> 00:23:28,480
but now once the cutter agent process

738
00:23:28,480 --> 00:23:29,919
crashes a

739
00:23:29,919 --> 00:23:32,400
a system this shutdown sequence is in is

740
00:23:32,400 --> 00:23:33,280
started

741
00:23:33,280 --> 00:23:34,640
which eventually as you might have

742
00:23:34,640 --> 00:23:37,039
guessed calls the shutdown binary

743
00:23:37,039 --> 00:23:38,960
now the shadow binary was never executed

744
00:23:38,960 --> 00:23:41,120
before it is only

745
00:23:41,120 --> 00:23:43,120
accessed when you want to shut down the

746
00:23:43,120 --> 00:23:45,039
machine and therefore it is not in the

747
00:23:45,039 --> 00:23:47,039
page cache and will need to be

748
00:23:47,039 --> 00:23:50,159
directly read from the disk so

749
00:23:50,159 --> 00:23:52,880
now uh the malicious version of the

750
00:23:52,880 --> 00:23:54,320
shutdown binary that we've put in the

751
00:23:54,320 --> 00:23:55,120
hard disk

752
00:23:55,120 --> 00:23:57,679
will start executing on the guest and it

753
00:23:57,679 --> 00:23:59,760
starts executing from the uh

754
00:23:59,760 --> 00:24:02,400
like a normal process and not a switch

755
00:24:02,400 --> 00:24:04,159
in the middle of execution so that we

756
00:24:04,159 --> 00:24:05,120
can actually get

757
00:24:05,120 --> 00:24:08,320
stable code execution by doing that so

758
00:24:08,320 --> 00:24:10,799
let's see of them of how does that work

759
00:24:10,799 --> 00:24:12,400
in the demo the malicious

760
00:24:12,400 --> 00:24:14,240
the malicious shutdown binary will

761
00:24:14,240 --> 00:24:15,760
simply create a file in the shared

762
00:24:15,760 --> 00:24:16,720
directory

763
00:24:16,720 --> 00:24:18,320
which is supposed to be only accessible

764
00:24:18,320 --> 00:24:19,760
from the guest and not from inside the

765
00:24:19,760 --> 00:24:20,720
container

766
00:24:20,720 --> 00:24:23,039
and just and we it just creates that

767
00:24:23,039 --> 00:24:24,000
file so we can

768
00:24:24,000 --> 00:24:27,840
see that the exploit works so

769
00:24:27,840 --> 00:24:32,480
let's see the export in action

770
00:24:32,480 --> 00:24:34,799
so i'm going to show you the code of the

771
00:24:34,799 --> 00:24:36,480
shutdown binary that i'm going to write

772
00:24:36,480 --> 00:24:39,279
run on the guest and the code is quite

773
00:24:39,279 --> 00:24:41,200
simple as i said it just creates

774
00:24:41,200 --> 00:24:44,320
a a a binary in the shared a file in the

775
00:24:44,320 --> 00:24:45,840
shared directory called guess is now

776
00:24:45,840 --> 00:24:47,279
malicious so it's quite simple

777
00:24:47,279 --> 00:24:49,440
and then it slips so we can see inspect

778
00:24:49,440 --> 00:24:51,360
the shared directory

779
00:24:51,360 --> 00:24:53,279
so we are now running the exploit with

780
00:24:53,279 --> 00:24:54,880
docker under qatar and the thing

781
00:24:54,880 --> 00:24:57,039
first thing the exploit does is tell us

782
00:24:57,039 --> 00:24:58,559
this is my container id

783
00:24:58,559 --> 00:25:00,159
so that's where the shared directory on

784
00:25:00,159 --> 00:25:01,679
the host side should be

785
00:25:01,679 --> 00:25:03,440
and we can see that the shared directory

786
00:25:03,440 --> 00:25:04,880
has the normal contents

787
00:25:04,880 --> 00:25:06,720
everything is okay but now when the

788
00:25:06,720 --> 00:25:08,720
container continues

789
00:25:08,720 --> 00:25:11,440
it gets create a device file for the

790
00:25:11,440 --> 00:25:12,320
guest hard disk

791
00:25:12,320 --> 00:25:14,240
and it replaces the shutdown binary with

792
00:25:14,240 --> 00:25:15,760
the code that i've showed you

793
00:25:15,760 --> 00:25:18,400
and also swaps the qatar agent binary on

794
00:25:18,400 --> 00:25:19,520
the guest hard disk

795
00:25:19,520 --> 00:25:21,760
with garbage data nothing really happens

796
00:25:21,760 --> 00:25:22,720
now right

797
00:25:22,720 --> 00:25:24,080
because the cutter agent is still in the

798
00:25:24,080 --> 00:25:27,360
page cache but when we allocate

799
00:25:27,360 --> 00:25:29,279
enough memory we will actually crash the

800
00:25:29,279 --> 00:25:31,760
cutter agent causing our shutdown

801
00:25:31,760 --> 00:25:33,760
process to start running and we can now

802
00:25:33,760 --> 00:25:34,880
see that

803
00:25:34,880 --> 00:25:37,840
it indeed it ran on the guest and it

804
00:25:37,840 --> 00:25:39,679
created the file that we expected

805
00:25:39,679 --> 00:25:42,960
so that's great

806
00:25:42,960 --> 00:25:46,000
and we got a way to break out of the

807
00:25:46,000 --> 00:25:48,000
container and execute code on the guest

808
00:25:48,000 --> 00:25:50,320
a breakout technique that exploits a

809
00:25:50,320 --> 00:25:52,320
direct device access that exploits the

810
00:25:52,320 --> 00:25:53,360
lack of c groups

811
00:25:53,360 --> 00:25:55,120
and it really shows you if you mess

812
00:25:55,120 --> 00:25:56,559
around and modify containers

813
00:25:56,559 --> 00:25:57,760
configuration

814
00:25:57,760 --> 00:25:59,679
you better be only adding restrictions

815
00:25:59,679 --> 00:26:01,039
you you you

816
00:26:01,039 --> 00:26:04,080
you don't really know what other effects

817
00:26:04,080 --> 00:26:07,120
removing that might happen if you remove

818
00:26:07,120 --> 00:26:09,360
a certain restriction researchers might

819
00:26:09,360 --> 00:26:10,159
find a way to

820
00:26:10,159 --> 00:26:12,720
exploit that to break out now the

821
00:26:12,720 --> 00:26:14,400
container does need the make note

822
00:26:14,400 --> 00:26:16,480
capability in order to

823
00:26:16,480 --> 00:26:18,880
exploit this issue but that's default in

824
00:26:18,880 --> 00:26:20,240
most places and of course

825
00:26:20,240 --> 00:26:23,039
this issue received the cv so the next

826
00:26:23,039 --> 00:26:24,000
thing that we want to do

827
00:26:24,000 --> 00:26:26,000
is to escape the virtual machine and

828
00:26:26,000 --> 00:26:27,120
that will actually be

829
00:26:27,120 --> 00:26:29,440
a bit easier so let's talk about the

830
00:26:29,440 --> 00:26:31,600
attack surface of the virtual machine

831
00:26:31,600 --> 00:26:34,320
so first of all the cut around time is a

832
00:26:34,320 --> 00:26:35,840
process running on the host

833
00:26:35,840 --> 00:26:37,840
and it passes messages from the qatar

834
00:26:37,840 --> 00:26:39,279
agent so if there's a vulnerability in

835
00:26:39,279 --> 00:26:40,960
the cataract time

836
00:26:40,960 --> 00:26:42,480
a malicious cutter agent might be able

837
00:26:42,480 --> 00:26:44,799
to exploit that and gain code execution

838
00:26:44,799 --> 00:26:46,720
but qatar runtime is written in golang

839
00:26:46,720 --> 00:26:48,080
which is memory safe and

840
00:26:48,080 --> 00:26:49,840
none of those messages really are that

841
00:26:49,840 --> 00:26:51,440
interesting so

842
00:26:51,440 --> 00:26:54,320
that's really not relevant another thing

843
00:26:54,320 --> 00:26:55,760
that could happen is the issue with the

844
00:26:55,760 --> 00:26:57,039
vulnerability in the virtual machine

845
00:26:57,039 --> 00:26:58,480
monitor right which is actually the

846
00:26:58,480 --> 00:26:59,760
boundary between the

847
00:26:59,760 --> 00:27:02,480
a guest virtual machine and the host but

848
00:27:02,480 --> 00:27:03,440
we'll

849
00:27:03,440 --> 00:27:06,640
not talk about that for for for for now

850
00:27:06,640 --> 00:27:08,080
what i really want to talk about is the

851
00:27:08,080 --> 00:27:09,919
shared directory between the

852
00:27:09,919 --> 00:27:11,360
host and the guest because it's quite an

853
00:27:11,360 --> 00:27:13,120
interesting of an attack surface

854
00:27:13,120 --> 00:27:15,840
um the cutter runtime on the whole side

855
00:27:15,840 --> 00:27:17,360
operates on the files in the shared

856
00:27:17,360 --> 00:27:18,240
directory

857
00:27:18,240 --> 00:27:20,720
but the guest can control those files

858
00:27:20,720 --> 00:27:22,159
just as much as the host right it's a

859
00:27:22,159 --> 00:27:23,440
shared directory

860
00:27:23,440 --> 00:27:25,679
meaning that we're in the get in the get

861
00:27:25,679 --> 00:27:27,520
in in a malicious guest

862
00:27:27,520 --> 00:27:29,440
we can manipulate the file in the shared

863
00:27:29,440 --> 00:27:30,559
directory in order to

864
00:27:30,559 --> 00:27:33,200
maybe affect the catalog time running on

865
00:27:33,200 --> 00:27:34,320
the hostess loot

866
00:27:34,320 --> 00:27:36,480
to do some things that he doesn't expect

867
00:27:36,480 --> 00:27:38,399
and one of the most interesting things

868
00:27:38,399 --> 00:27:40,159
that's done with the shared directory

869
00:27:40,159 --> 00:27:42,559
is that it is used to deliver the image

870
00:27:42,559 --> 00:27:43,360
to the guest

871
00:27:43,360 --> 00:27:46,720
so let's see how does that work so

872
00:27:46,720 --> 00:27:48,559
when you're when the guest virtual

873
00:27:48,559 --> 00:27:50,640
machine is started cataracting bind

874
00:27:50,640 --> 00:27:51,120
mounts

875
00:27:51,120 --> 00:27:52,480
the container image to the shell

876
00:27:52,480 --> 00:27:54,399
directory then the container starts

877
00:27:54,399 --> 00:27:56,399
running inside the guest at some point

878
00:27:56,399 --> 00:27:58,320
it terminates inside the guest and then

879
00:27:58,320 --> 00:28:00,159
the catalog time unmounts the container

880
00:28:00,159 --> 00:28:00,799
image

881
00:28:00,799 --> 00:28:03,039
from the shared directory so that seems

882
00:28:03,039 --> 00:28:04,240
quite reasonable right

883
00:28:04,240 --> 00:28:06,640
but the problem here is that both mount

884
00:28:06,640 --> 00:28:08,320
and unmount operations

885
00:28:08,320 --> 00:28:10,799
follow symlinks so in the guest meaning

886
00:28:10,799 --> 00:28:12,640
that a malicious guest could

887
00:28:12,640 --> 00:28:14,159
place sim links inside the shared

888
00:28:14,159 --> 00:28:16,080
directory and cause the

889
00:28:16,080 --> 00:28:19,120
qatar run time to target other things on

890
00:28:19,120 --> 00:28:19,840
the host

891
00:28:19,840 --> 00:28:22,880
uh that are not in the show directory so

892
00:28:22,880 --> 00:28:25,279
it's really easier to see it in action

893
00:28:25,279 --> 00:28:26,080
so let's start

894
00:28:26,080 --> 00:28:27,600
actually with the unmount redirection

895
00:28:27,600 --> 00:28:29,520
because that's easier to understand

896
00:28:29,520 --> 00:28:31,679
so that's how the attack looks we are in

897
00:28:31,679 --> 00:28:33,360
the malicious container and we somehow

898
00:28:33,360 --> 00:28:34,480
broken up to the guest

899
00:28:34,480 --> 00:28:36,159
maybe using the technique that i've

900
00:28:36,159 --> 00:28:38,240
showed earlier and now from inside the

901
00:28:38,240 --> 00:28:39,679
guest we can create

902
00:28:39,679 --> 00:28:42,480
a sim link when we where we know in the

903
00:28:42,480 --> 00:28:44,080
shared directory where we know

904
00:28:44,080 --> 00:28:46,720
the qatar run time will unmount we'll

905
00:28:46,720 --> 00:28:48,320
try to unmount

906
00:28:48,320 --> 00:28:50,640
and then we we can actually kill the

907
00:28:50,640 --> 00:28:51,520
container

908
00:28:51,520 --> 00:28:54,240
in order to trigger the cataract and to

909
00:28:54,240 --> 00:28:55,760
unmount

910
00:28:55,760 --> 00:28:57,440
that path in the shared directory and

911
00:28:57,440 --> 00:28:59,200
now when it does that operation

912
00:28:59,200 --> 00:29:02,399
it actually is redirected

913
00:29:02,399 --> 00:29:05,520
to a target of the guest choosing and

914
00:29:05,520 --> 00:29:07,200
that's true a really easy way to create

915
00:29:07,200 --> 00:29:09,120
a denial of service on the host because

916
00:29:09,120 --> 00:29:11,440
of the because of the how the qatar run

917
00:29:11,440 --> 00:29:13,919
does the unmount operations

918
00:29:13,919 --> 00:29:15,840
if we tell it if we create a sim links

919
00:29:15,840 --> 00:29:17,279
that points to

920
00:29:17,279 --> 00:29:19,520
the root directory it will actually

921
00:29:19,520 --> 00:29:21,600
unmount all mount points underneath the

922
00:29:21,600 --> 00:29:24,159
directory making the host very unusable

923
00:29:24,159 --> 00:29:25,279
and not able to

924
00:29:25,279 --> 00:29:28,240
run any container

925
00:29:28,480 --> 00:29:32,240
so let's see a demo for this attack

926
00:29:34,480 --> 00:29:37,440
so first we will inspect the mount

927
00:29:37,440 --> 00:29:38,960
points on the hose see that everything

928
00:29:38,960 --> 00:29:39,679
is fine

929
00:29:39,679 --> 00:29:41,200
and then we will run a container that

930
00:29:41,200 --> 00:29:43,520
exploits

931
00:29:43,520 --> 00:29:45,440
both the container to gas breakout and

932
00:29:45,440 --> 00:29:46,799
then the unmount redirection

933
00:29:46,799 --> 00:29:47,600
vulnerability

934
00:29:47,600 --> 00:29:50,480
and it will target the root directory in

935
00:29:50,480 --> 00:29:52,799
it attack in its attack

936
00:29:52,799 --> 00:29:55,520
and once the container is taken down we

937
00:29:55,520 --> 00:29:56,960
can see that

938
00:29:56,960 --> 00:29:58,559
those mount points don't contain

939
00:29:58,559 --> 00:30:00,000
anything anymore on the host

940
00:30:00,000 --> 00:30:02,000
and if we try to do other things like

941
00:30:02,000 --> 00:30:03,360
run a container you can see that the

942
00:30:03,360 --> 00:30:05,360
host is really unusable and you can't

943
00:30:05,360 --> 00:30:06,159
really

944
00:30:06,159 --> 00:30:09,520
use it to do anything so that's in host

945
00:30:09,520 --> 00:30:10,720
denial of service

946
00:30:10,720 --> 00:30:13,440
and that's actually a a very nice moment

947
00:30:13,440 --> 00:30:14,159
for us

948
00:30:14,159 --> 00:30:16,320
because we got the first effect from the

949
00:30:16,320 --> 00:30:17,200
container

950
00:30:17,200 --> 00:30:19,600
all the way up to the host and the first

951
00:30:19,600 --> 00:30:21,679
sort of a sandbox breakout

952
00:30:21,679 --> 00:30:23,520
and a denial of services is nice right

953
00:30:23,520 --> 00:30:25,760
but we want to gain code execution

954
00:30:25,760 --> 00:30:28,159
so let's look at the mount redirection

955
00:30:28,159 --> 00:30:30,080
you can also redirect

956
00:30:30,080 --> 00:30:31,679
not only the unmount operation of the

957
00:30:31,679 --> 00:30:33,360
image but also the mount operation of

958
00:30:33,360 --> 00:30:34,000
the image

959
00:30:34,000 --> 00:30:36,000
and that's more interesting because the

960
00:30:36,000 --> 00:30:37,200
image as we

961
00:30:37,200 --> 00:30:38,640
as i've said kata is used to run

962
00:30:38,640 --> 00:30:40,640
untrusted images so the image

963
00:30:40,640 --> 00:30:42,720
possibly is malicious so let's see how

964
00:30:42,720 --> 00:30:44,159
that attack will look like

965
00:30:44,159 --> 00:30:46,799
uh so we are assuming that the kata

966
00:30:46,799 --> 00:30:48,720
agent now on the guest is malicious

967
00:30:48,720 --> 00:30:50,640
so the catalan time will tell it we're

968
00:30:50,640 --> 00:30:52,399
about to create a sandbox that's the

969
00:30:52,399 --> 00:30:53,360
sandbox id

970
00:30:53,360 --> 00:30:55,279
and now using that message the qatar

971
00:30:55,279 --> 00:30:56,480
agent can know

972
00:30:56,480 --> 00:30:58,240
where in the shared directory the

973
00:30:58,240 --> 00:31:00,240
catalog time is about to bind mount

974
00:31:00,240 --> 00:31:02,559
a the container image and it can create

975
00:31:02,559 --> 00:31:04,240
a sim link at that path

976
00:31:04,240 --> 00:31:06,399
that will actually be followed by the

977
00:31:06,399 --> 00:31:07,440
catalog time

978
00:31:07,440 --> 00:31:09,120
when it tries to bind the container

979
00:31:09,120 --> 00:31:11,440
image and now that untrusted possibly

980
00:31:11,440 --> 00:31:13,039
malicious container image

981
00:31:13,039 --> 00:31:16,000
can be will be mounted over a path on

982
00:31:16,000 --> 00:31:17,600
the host that the k that the guest

983
00:31:17,600 --> 00:31:18,559
decides on

984
00:31:18,559 --> 00:31:21,600
so and there's those are the several

985
00:31:21,600 --> 00:31:24,240
very interesting paths that the guest

986
00:31:24,240 --> 00:31:26,399
could they choose like slash bin or

987
00:31:26,399 --> 00:31:28,960
slash lib which will allow a pretty easy

988
00:31:28,960 --> 00:31:30,080
code execution

989
00:31:30,080 --> 00:31:32,960
on the host but the problem with this

990
00:31:32,960 --> 00:31:33,840
attack that

991
00:31:33,840 --> 00:31:36,799
is that we assumed that the kata agent

992
00:31:36,799 --> 00:31:37,120
is

993
00:31:37,120 --> 00:31:39,360
compromising that the guest is malicious

994
00:31:39,360 --> 00:31:41,039
even before the container starts running

995
00:31:41,039 --> 00:31:41,760
on the guest

996
00:31:41,760 --> 00:31:44,480
right because if if it's before the

997
00:31:44,480 --> 00:31:46,559
container images bind mounted

998
00:31:46,559 --> 00:31:48,559
to the shell directory then of course

999
00:31:48,559 --> 00:31:49,919
that the container isn't

1000
00:31:49,919 --> 00:31:52,960
running on the guest so we actually need

1001
00:31:52,960 --> 00:31:54,799
we actually need a way to compromise the

1002
00:31:54,799 --> 00:31:56,559
guest before the container runs

1003
00:31:56,559 --> 00:31:58,080
and we don't have a way to do that right

1004
00:31:58,080 --> 00:32:00,159
now right we only have a way to get

1005
00:32:00,159 --> 00:32:01,840
gain code execution on the guest from

1006
00:32:01,840 --> 00:32:03,279
the container

1007
00:32:03,279 --> 00:32:06,000
and that task so in order to do that we

1008
00:32:06,000 --> 00:32:08,000
look at cloud hypervisor

1009
00:32:08,000 --> 00:32:09,679
and an issue and vulnerability that i

1010
00:32:09,679 --> 00:32:11,679
found in how kata uses it

1011
00:32:11,679 --> 00:32:14,000
so cloud hypervisor to remind you is one

1012
00:32:14,000 --> 00:32:15,679
of the free virtual machines

1013
00:32:15,679 --> 00:32:17,519
monitor virtual machine monitor options

1014
00:32:17,519 --> 00:32:18,880
of qatar and

1015
00:32:18,880 --> 00:32:21,360
when i tried the container to guest a

1016
00:32:21,360 --> 00:32:22,320
breakout on

1017
00:32:22,320 --> 00:32:24,799
a cutter with cloud hypervisor i noticed

1018
00:32:24,799 --> 00:32:25,440
that

1019
00:32:25,440 --> 00:32:27,039
kata stopped working after that i

1020
00:32:27,039 --> 00:32:29,279
couldn't run any container

1021
00:32:29,279 --> 00:32:30,960
and when i inspected the virtual machine

1022
00:32:30,960 --> 00:32:33,120
image i saw that the cutter agent

1023
00:32:33,120 --> 00:32:35,760
a binary on that on the virtual machine

1024
00:32:35,760 --> 00:32:38,320
image actually contained garbage data

1025
00:32:38,320 --> 00:32:39,840
and that's really concerning because

1026
00:32:39,840 --> 00:32:41,440
that was the garbage data that i wrote

1027
00:32:41,440 --> 00:32:43,760
to hard disk on the

1028
00:32:43,760 --> 00:32:47,200
from the container meaning that from one

1029
00:32:47,200 --> 00:32:47,519
con

1030
00:32:47,519 --> 00:32:50,000
from in one guest any changes that we

1031
00:32:50,000 --> 00:32:51,440
make to the guest hard disk

1032
00:32:51,440 --> 00:32:54,480
under cloud hypervisor are propagated to

1033
00:32:54,480 --> 00:32:56,000
the virtual machine image on the

1034
00:32:56,000 --> 00:32:59,120
host meaning that one guest can control

1035
00:32:59,120 --> 00:33:00,559
the hard disk of all

1036
00:33:00,559 --> 00:33:02,880
future guests and because all virtual

1037
00:33:02,880 --> 00:33:04,720
machine monitors use the same virtual

1038
00:33:04,720 --> 00:33:05,519
machine image

1039
00:33:05,519 --> 00:33:08,240
to set up the the guest this means that

1040
00:33:08,240 --> 00:33:10,159
one guest can control

1041
00:33:10,159 --> 00:33:12,640
every future guest regardless of what

1042
00:33:12,640 --> 00:33:13,919
virtual machine monitor

1043
00:33:13,919 --> 00:33:15,760
it uses and that's really bad for

1044
00:33:15,760 --> 00:33:17,120
multi-tenancy right

1045
00:33:17,120 --> 00:33:19,679
and beside from being a pretty severe

1046
00:33:19,679 --> 00:33:21,440
issue by itself that one guest can

1047
00:33:21,440 --> 00:33:22,080
control

1048
00:33:22,080 --> 00:33:24,640
of all future guests it's also a way for

1049
00:33:24,640 --> 00:33:25,279
us

1050
00:33:25,279 --> 00:33:28,480
uh to gain code execution on the host

1051
00:33:28,480 --> 00:33:30,559
because we now can exploit the monthly

1052
00:33:30,559 --> 00:33:32,000
direction right

1053
00:33:32,000 --> 00:33:33,919
we needed a way to for the guest to be

1054
00:33:33,919 --> 00:33:35,679
compromised even before the container

1055
00:33:35,679 --> 00:33:36,320
runs

1056
00:33:36,320 --> 00:33:40,159
but if we have a way to compromise the a

1057
00:33:40,159 --> 00:33:43,200
the virtual machine image that means

1058
00:33:43,200 --> 00:33:44,880
that the guest can be malicious from the

1059
00:33:44,880 --> 00:33:45,279
moment

1060
00:33:45,279 --> 00:33:48,240
it boots right so we can it can actually

1061
00:33:48,240 --> 00:33:49,279
create the malicious

1062
00:33:49,279 --> 00:33:51,679
symlink before the container is started

1063
00:33:51,679 --> 00:33:52,399
so

1064
00:33:52,399 --> 00:33:54,880
if it's still not that clear let's see

1065
00:33:54,880 --> 00:33:56,640
how that full attack will look like

1066
00:33:56,640 --> 00:33:58,480
so we are now seeing a full container to

1067
00:33:58,480 --> 00:34:00,159
host code execution

1068
00:34:00,159 --> 00:34:02,399
it will require the victim to run our

1069
00:34:02,399 --> 00:34:03,360
container

1070
00:34:03,360 --> 00:34:06,640
twice on the system but that's a pretty

1071
00:34:06,640 --> 00:34:10,399
acceptable expect that's pretty uh

1072
00:34:10,399 --> 00:34:13,599
a pretty normal uh requirement because

1073
00:34:13,599 --> 00:34:15,359
most people an automated system if the

1074
00:34:15,359 --> 00:34:17,520
first container crashes it will just try

1075
00:34:17,520 --> 00:34:18,879
to run it again

1076
00:34:18,879 --> 00:34:21,599
so let's see how it works the first the

1077
00:34:21,599 --> 00:34:23,119
first time the malicious container

1078
00:34:23,119 --> 00:34:25,839
is executed is executed under cloud

1079
00:34:25,839 --> 00:34:26,879
hypervisor

1080
00:34:26,879 --> 00:34:29,918
and it uses the direct device access

1081
00:34:29,918 --> 00:34:31,280
vulnerability that we found

1082
00:34:31,280 --> 00:34:33,359
to change override the cart agent binary

1083
00:34:33,359 --> 00:34:34,480
on the hard disk with a malicious

1084
00:34:34,480 --> 00:34:35,359
version

1085
00:34:35,359 --> 00:34:36,879
now because we are running under cloud

1086
00:34:36,879 --> 00:34:39,040
hypervisor that malicious version is

1087
00:34:39,040 --> 00:34:39,599
going to be

1088
00:34:39,599 --> 00:34:41,599
propagated and committed to the virtual

1089
00:34:41,599 --> 00:34:45,119
machine image meaning that the next time

1090
00:34:45,119 --> 00:34:49,199
a guest will be run it will run with our

1091
00:34:49,199 --> 00:34:52,000
malicious qatar agent right from the

1092
00:34:52,000 --> 00:34:53,280
moment it boots

1093
00:34:53,280 --> 00:34:54,960
so now that malicious cutter agent on

1094
00:34:54,960 --> 00:34:56,320
the second container run

1095
00:34:56,320 --> 00:34:58,800
can exploit the mount redirection issue

1096
00:34:58,800 --> 00:35:00,160
create the sim link

1097
00:35:00,160 --> 00:35:03,280
and redirect our malicious image to

1098
00:35:03,280 --> 00:35:05,040
whenever on the host we want

1099
00:35:05,040 --> 00:35:07,280
to gain code execution on the host so

1100
00:35:07,280 --> 00:35:08,320
let's see a

1101
00:35:08,320 --> 00:35:11,599
demo for that attack

1102
00:35:14,960 --> 00:35:17,920
so we will be trying to mount the

1103
00:35:17,920 --> 00:35:18,880
container image

1104
00:35:18,880 --> 00:35:20,480
over slash bin on the host and we can

1105
00:35:20,480 --> 00:35:22,640
see that slash bin is completely normal

1106
00:35:22,640 --> 00:35:25,118
right now

1107
00:35:28,079 --> 00:35:30,640
so we'll run the container under kata

1108
00:35:30,640 --> 00:35:32,160
with cloud hypervisor and the first

1109
00:35:32,160 --> 00:35:33,280
container

1110
00:35:33,280 --> 00:35:36,079
will replace the qatar agent uh the kite

1111
00:35:36,079 --> 00:35:37,440
agent binary on the

1112
00:35:37,440 --> 00:35:40,400
virtual machine image exploiting a the

1113
00:35:40,400 --> 00:35:43,200
vulnerabilities that we discussed

1114
00:35:43,200 --> 00:35:45,599
and now the next time our malicious say

1115
00:35:45,599 --> 00:35:47,520
container image is executed it will be

1116
00:35:47,520 --> 00:35:48,160
running

1117
00:35:48,160 --> 00:35:51,040
under a with under a malicious guest

1118
00:35:51,040 --> 00:35:51,520
right

1119
00:35:51,520 --> 00:35:53,599
and that malicious guest could exploit

1120
00:35:53,599 --> 00:35:55,119
the redirection vulnerability that we

1121
00:35:55,119 --> 00:35:55,520
found

1122
00:35:55,520 --> 00:35:58,400
to redirect the image over bin and now

1123
00:35:58,400 --> 00:35:59,599
if we want to

1124
00:35:59,599 --> 00:36:01,040
if we check out what hap what's

1125
00:36:01,040 --> 00:36:02,800
happening on bin

1126
00:36:02,800 --> 00:36:04,400
in the content in the host we can see

1127
00:36:04,400 --> 00:36:06,480
that it has a completely different files

1128
00:36:06,480 --> 00:36:07,359
and that's actually

1129
00:36:07,359 --> 00:36:09,359
the files of our malicious container

1130
00:36:09,359 --> 00:36:11,119
file system and if we now

1131
00:36:11,119 --> 00:36:14,480
try to execute something from a inside

1132
00:36:14,480 --> 00:36:15,119
the

1133
00:36:15,119 --> 00:36:17,760
fro a binary that is inside bin we can

1134
00:36:17,760 --> 00:36:19,119
now see that the malicious version of

1135
00:36:19,119 --> 00:36:20,880
that binary is running on the host

1136
00:36:20,880 --> 00:36:22,800
and we actually got code execution from

1137
00:36:22,800 --> 00:36:23,920
the container

1138
00:36:23,920 --> 00:36:27,280
all the way up to the host so that's

1139
00:36:27,280 --> 00:36:27,839
great

1140
00:36:27,839 --> 00:36:29,920
right we we set up what we wanted to

1141
00:36:29,920 --> 00:36:31,520
accomplish in the start we got code

1142
00:36:31,520 --> 00:36:32,480
execution

1143
00:36:32,480 --> 00:36:35,520
on the host from inside the container

1144
00:36:35,520 --> 00:36:38,400
and really the underlying issues here uh

1145
00:36:38,400 --> 00:36:39,200
show how the

1146
00:36:39,200 --> 00:36:40,720
the share directory is really a big

1147
00:36:40,720 --> 00:36:42,640
attack surface for virtual machines

1148
00:36:42,640 --> 00:36:44,240
right we saw two issues

1149
00:36:44,240 --> 00:36:46,400
with host app with a host applications

1150
00:36:46,400 --> 00:36:47,440
that interact

1151
00:36:47,440 --> 00:36:49,760
with the shared directory right uh the

1152
00:36:49,760 --> 00:36:51,920
mountain and mount redirection issue

1153
00:36:51,920 --> 00:36:53,520
uh that we found that we found that

1154
00:36:53,520 --> 00:36:55,520
could be exploited

1155
00:36:55,520 --> 00:36:58,160
and that could be used to trick the

1156
00:36:58,160 --> 00:36:59,280
qatar run time

1157
00:36:59,280 --> 00:37:00,880
so there could be issues with the host

1158
00:37:00,880 --> 00:37:03,119
application uh accessing the shared

1159
00:37:03,119 --> 00:37:03,760
directory

1160
00:37:03,760 --> 00:37:05,359
but there could also be issue with the

1161
00:37:05,359 --> 00:37:07,599
mechanism itself of the shared directory

1162
00:37:07,599 --> 00:37:08,000
normally

1163
00:37:08,000 --> 00:37:10,079
there is some process on the host that

1164
00:37:10,079 --> 00:37:11,680
manages the share directory

1165
00:37:11,680 --> 00:37:13,280
and you can actually find the issues

1166
00:37:13,280 --> 00:37:15,280
with that and i found one of those

1167
00:37:15,280 --> 00:37:17,520
issues that could allow in qatar to

1168
00:37:17,520 --> 00:37:19,520
launch a denial of service attack but we

1169
00:37:19,520 --> 00:37:21,520
won't get into that i just wanted to to

1170
00:37:21,520 --> 00:37:22,000
let you know

1171
00:37:22,000 --> 00:37:24,000
that the mechanism itself could also be

1172
00:37:24,000 --> 00:37:25,040
abused

1173
00:37:25,040 --> 00:37:27,520
so what attacks that we saw today we saw

1174
00:37:27,520 --> 00:37:28,800
a container to guest

1175
00:37:28,800 --> 00:37:30,960
a breakout using direct device access

1176
00:37:30,960 --> 00:37:32,400
and exploiting the lack

1177
00:37:32,400 --> 00:37:35,280
of a device group using a breakout new

1178
00:37:35,280 --> 00:37:36,480
breakout technique

1179
00:37:36,480 --> 00:37:39,680
and we also saw a guest to host unmount

1180
00:37:39,680 --> 00:37:41,680
operation right which we could have used

1181
00:37:41,680 --> 00:37:43,520
to launch a denial of service attack on

1182
00:37:43,520 --> 00:37:43,760
the

1183
00:37:43,760 --> 00:37:46,240
on the host we also saw a way for one

1184
00:37:46,240 --> 00:37:46,800
guest

1185
00:37:46,800 --> 00:37:49,119
to compromise future guests under cloud

1186
00:37:49,119 --> 00:37:51,119
hypervisor and we also found a way for

1187
00:37:51,119 --> 00:37:53,119
one guest to gain code execution

1188
00:37:53,119 --> 00:37:55,520
on the host by redirecting the malicious

1189
00:37:55,520 --> 00:37:56,880
image mount

1190
00:37:56,880 --> 00:37:59,760
and i also briefly discussed a denial of

1191
00:37:59,760 --> 00:38:01,520
service issue that could be found in the

1192
00:38:01,520 --> 00:38:02,960
shared directory mechanism

1193
00:38:02,960 --> 00:38:05,200
itself now all of those attacks could be

1194
00:38:05,200 --> 00:38:06,800
chained together

1195
00:38:06,800 --> 00:38:08,079
all of those vulnerabilities can be

1196
00:38:08,079 --> 00:38:10,079
chained together to perform a number of

1197
00:38:10,079 --> 00:38:10,960
attacks

1198
00:38:10,960 --> 00:38:14,240
on the host and i showed some of them

1199
00:38:14,240 --> 00:38:15,280
today

1200
00:38:15,280 --> 00:38:17,359
all of those issues i've disclosed them

1201
00:38:17,359 --> 00:38:19,040
to cutter containers maintainers they of

1202
00:38:19,040 --> 00:38:20,000
course they

1203
00:38:20,000 --> 00:38:22,480
were fixed and you can read more at this

1204
00:38:22,480 --> 00:38:23,440
directory

1205
00:38:23,440 --> 00:38:27,040
and aside from seeing like a cool

1206
00:38:27,040 --> 00:38:30,560
exploit chain and a sandbox sandbox

1207
00:38:30,560 --> 00:38:32,560
breakout what can we really learn from

1208
00:38:32,560 --> 00:38:34,640
this research so first of all i want

1209
00:38:34,640 --> 00:38:37,200
i hope you now understand that uh more

1210
00:38:37,200 --> 00:38:38,480
about container security

1211
00:38:38,480 --> 00:38:40,000
and understand that containers are only

1212
00:38:40,000 --> 00:38:42,400
as secure as their configuration

1213
00:38:42,400 --> 00:38:45,359
right and a simple way to improve the

1214
00:38:45,359 --> 00:38:46,000
their

1215
00:38:46,000 --> 00:38:48,160
configuration and security is to drop

1216
00:38:48,160 --> 00:38:49,599
unused privileges

1217
00:38:49,599 --> 00:38:53,119
um the breakout that we saw today

1218
00:38:53,119 --> 00:38:57,359
uh relied on cup make note right

1219
00:38:57,359 --> 00:38:58,800
and it's a great example for that

1220
00:38:58,800 --> 00:39:00,560
because a cup make note

1221
00:39:00,560 --> 00:39:03,280
most containers have that capability but

1222
00:39:03,280 --> 00:39:04,800
almost none of them actually need it

1223
00:39:04,800 --> 00:39:06,880
right an ngx container doesn't need

1224
00:39:06,880 --> 00:39:08,880
to create device files and interact with

1225
00:39:08,880 --> 00:39:10,240
them in any way

1226
00:39:10,240 --> 00:39:12,160
so today we the point is that today we

1227
00:39:12,160 --> 00:39:13,920
saw a breakout in cut a container that

1228
00:39:13,920 --> 00:39:16,160
relies on the magnet capability

1229
00:39:16,160 --> 00:39:18,160
but tomorrow it's another breakout right

1230
00:39:18,160 --> 00:39:19,760
in a different container runtime that

1231
00:39:19,760 --> 00:39:20,400
relies

1232
00:39:20,400 --> 00:39:22,560
on another capability that your

1233
00:39:22,560 --> 00:39:23,599
containers have

1234
00:39:23,599 --> 00:39:26,079
but they don't use so the point is you

1235
00:39:26,079 --> 00:39:28,000
really should

1236
00:39:28,000 --> 00:39:30,000
remove capabilities and privileges from

1237
00:39:30,000 --> 00:39:32,640
the container which it doesn't use

1238
00:39:32,640 --> 00:39:35,760
the second thing you need to do is to

1239
00:39:35,760 --> 00:39:38,880
beside further dropping capabilities is

1240
00:39:38,880 --> 00:39:40,000
to

1241
00:39:40,000 --> 00:39:42,560
further restrict the container using

1242
00:39:42,560 --> 00:39:44,000
some best practices

1243
00:39:44,000 --> 00:39:45,760
and history shows that all of those

1244
00:39:45,760 --> 00:39:47,520
vulnerabilities that i've talked all of

1245
00:39:47,520 --> 00:39:48,880
the types of issues

1246
00:39:48,880 --> 00:39:50,800
that i've talked about in the container

1247
00:39:50,800 --> 00:39:52,240
escopology part

1248
00:39:52,240 --> 00:39:54,079
most of them or a lot of them could have

1249
00:39:54,079 --> 00:39:56,320
been mitigated by simply applying best

1250
00:39:56,320 --> 00:39:58,160
practices like username spaces or

1251
00:39:58,160 --> 00:39:59,359
running the container

1252
00:39:59,359 --> 00:40:02,079
as an unknown as the no note user and

1253
00:40:02,079 --> 00:40:02,560
that

1254
00:40:02,560 --> 00:40:04,079
those type of things should really be

1255
00:40:04,079 --> 00:40:05,760
the number one thing you do

1256
00:40:05,760 --> 00:40:07,440
if you're trying to improve the security

1257
00:40:07,440 --> 00:40:08,960
of your containers

1258
00:40:08,960 --> 00:40:11,920
but we also saw a we also talked about

1259
00:40:11,920 --> 00:40:13,359
sandboxes today

1260
00:40:13,359 --> 00:40:15,760
and sandboxes do limit the attack

1261
00:40:15,760 --> 00:40:16,640
surface right

1262
00:40:16,640 --> 00:40:18,319
but i want to clarify there aren't

1263
00:40:18,319 --> 00:40:19,920
magical solutions that

1264
00:40:19,920 --> 00:40:22,640
an attackers would find way to break out

1265
00:40:22,640 --> 00:40:24,160
so the point here is

1266
00:40:24,160 --> 00:40:26,880
don't bet all of your chips on a on one

1267
00:40:26,880 --> 00:40:27,680
bag right

1268
00:40:27,680 --> 00:40:31,040
don't only rely on the sandbox

1269
00:40:31,040 --> 00:40:34,160
you should really be

1270
00:40:34,160 --> 00:40:36,079
prepared for that sandbox to be broken

1271
00:40:36,079 --> 00:40:38,480
up broken out of it should be an

1272
00:40:38,480 --> 00:40:40,319
enhancement and not a replacement

1273
00:40:40,319 --> 00:40:42,960
of your coin security features and the

1274
00:40:42,960 --> 00:40:44,880
final thing that if you do decide to use

1275
00:40:44,880 --> 00:40:45,599
a sandbox

1276
00:40:45,599 --> 00:40:47,760
you should get you should really get the

1277
00:40:47,760 --> 00:40:48,640
full potential

1278
00:40:48,640 --> 00:40:50,480
out of it and enable its security

1279
00:40:50,480 --> 00:40:52,400
features cutter for example has

1280
00:40:52,400 --> 00:40:53,839
some security features that aren't

1281
00:40:53,839 --> 00:40:55,839
enabled by default that could have been

1282
00:40:55,839 --> 00:40:56,640
useful

1283
00:40:56,640 --> 00:40:58,319
to mitigate one of the attacks that we

1284
00:40:58,319 --> 00:40:59,680
saw today

1285
00:40:59,680 --> 00:41:02,560
so that's really all i have for you

1286
00:41:02,560 --> 00:41:04,000
today i hope that you enjoyed it that

1287
00:41:04,000 --> 00:41:05,760
you learn about the container security a

1288
00:41:05,760 --> 00:41:06,000
bit

1289
00:41:06,000 --> 00:41:09,520
and i'll be happy to take any questions

1290
00:41:16,960 --> 00:41:19,839
broken up broken out of it should be an

1291
00:41:19,839 --> 00:41:21,599
enhancement and not a replacement

1292
00:41:21,599 --> 00:41:24,319
of your coin security features and the

1293
00:41:24,319 --> 00:41:27,119
final thing that is

1294
00:41:27,680 --> 00:41:29,919
yep

1295
00:41:32,400 --> 00:41:36,720
oh i'm live hi guys

1296
00:41:36,800 --> 00:41:39,440
so i'll just go over any remaining

1297
00:41:39,440 --> 00:41:41,920
questions

1298
00:41:58,400 --> 00:42:01,440
hi guys can you win

1299
00:42:01,440 --> 00:42:04,160
still equine

1300
00:42:05,839 --> 00:42:16,960
how bad is it can i uh

1301
00:42:16,960 --> 00:42:19,920
so guys it turns out i'm echoing uh so

1302
00:42:19,920 --> 00:42:21,359
i'll answer any questions

1303
00:42:21,359 --> 00:42:23,200
that you may have on the chat that you

1304
00:42:23,200 --> 00:42:25,520
may have left i hope you enjoyed it

1305
00:42:25,520 --> 00:42:27,680
and see you in the rest of the

1306
00:42:27,680 --> 00:42:31,839
conference bye

