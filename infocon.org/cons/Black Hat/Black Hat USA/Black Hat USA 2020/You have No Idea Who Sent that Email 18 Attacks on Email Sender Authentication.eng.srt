1
00:00:03,810 --> 00:00:16,239
[Music]

2
00:00:16,239 --> 00:00:17,520
hello everyone

3
00:00:17,520 --> 00:00:20,320
i'm jin jinten welcome to this talk

4
00:00:20,320 --> 00:00:22,000
today i'm going to share

5
00:00:22,000 --> 00:00:24,080
our latest work about email spoofing

6
00:00:24,080 --> 00:00:26,480
attacks

7
00:00:26,480 --> 00:00:29,279
email is widely used in our daily life

8
00:00:29,279 --> 00:00:31,519
and is a frequently used attack vector

9
00:00:31,519 --> 00:00:33,440
for various attacks

10
00:00:33,440 --> 00:00:35,680
in the past years we have seen numerous

11
00:00:35,680 --> 00:00:37,360
attacks using email

12
00:00:37,360 --> 00:00:39,680
spoofing and phishing attacks to

13
00:00:39,680 --> 00:00:40,559
compromise

14
00:00:40,559 --> 00:00:42,480
enterprise networks or government

15
00:00:42,480 --> 00:00:44,239
official accounts

16
00:00:44,239 --> 00:00:46,640
to address this problem modern email

17
00:00:46,640 --> 00:00:47,440
services

18
00:00:47,440 --> 00:00:49,840
and websites deploy sender

19
00:00:49,840 --> 00:00:50,879
authentication

20
00:00:50,879 --> 00:00:54,000
protocols like spf dkm and dmarc to

21
00:00:54,000 --> 00:00:57,120
prevent email forgery

22
00:00:57,120 --> 00:00:59,440
in this talk we will present a number of

23
00:00:59,440 --> 00:01:00,719
new techniques

24
00:01:00,719 --> 00:01:04,000
to defeat those defense

25
00:01:04,000 --> 00:01:07,680
this is a joint work by three authors

26
00:01:07,680 --> 00:01:10,799
i'm a postdoc at legacy focusing on http

27
00:01:10,799 --> 00:01:12,560
and email security

28
00:01:12,560 --> 00:01:14,880
vern pakistan is my supervisor he's a

29
00:01:14,880 --> 00:01:16,560
professor at uc berkeley and the

30
00:01:16,560 --> 00:01:19,360
original author of the broad ideas

31
00:01:19,360 --> 00:01:21,280
based on the broad system he created a

32
00:01:21,280 --> 00:01:22,960
startup corelight

33
00:01:22,960 --> 00:01:25,119
which provides high performance network

34
00:01:25,119 --> 00:01:27,920
traffic analysis solutions

35
00:01:27,920 --> 00:01:29,759
jian jiang is the senior director of

36
00:01:29,759 --> 00:01:31,600
engineering at f5

37
00:01:31,600 --> 00:01:33,840
he has done some influential work in dns

38
00:01:33,840 --> 00:01:36,960
and web security

39
00:01:39,280 --> 00:01:42,159
okay first a quick question when you

40
00:01:42,159 --> 00:01:42,640
receive

41
00:01:42,640 --> 00:01:45,040
an email how do you tell whether it's a

42
00:01:45,040 --> 00:01:46,640
phishing email

43
00:01:46,640 --> 00:01:49,119
normally we would check the from address

44
00:01:49,119 --> 00:01:51,280
displayed in the email client

45
00:01:51,280 --> 00:01:53,840
if the forum address is legitimate we

46
00:01:53,840 --> 00:01:56,880
may believe it's not a phishing email

47
00:01:56,880 --> 00:01:59,360
if we use email services like gmail we

48
00:01:59,360 --> 00:02:00,240
can also check

49
00:02:00,240 --> 00:02:02,240
additional security indicators like

50
00:02:02,240 --> 00:02:03,680
mailed by or signed back

51
00:02:03,680 --> 00:02:07,439
to verify the sender in this talk we are

52
00:02:07,439 --> 00:02:08,959
going to present a number of new

53
00:02:08,959 --> 00:02:09,679
techniques

54
00:02:09,679 --> 00:02:13,680
to support those security fields

55
00:02:13,680 --> 00:02:16,160
here is a smoothing test i did several

56
00:02:16,160 --> 00:02:17,040
months ago

57
00:02:17,040 --> 00:02:20,400
gmail shows that this email is sent from

58
00:02:20,400 --> 00:02:24,160
security at facebook.com and verify that

59
00:02:24,160 --> 00:02:26,160
the gmail is signed by

60
00:02:26,160 --> 00:02:29,040
facebook.com but in fact it was spoofed

61
00:02:29,040 --> 00:02:30,560
by me

62
00:02:30,560 --> 00:02:32,959
how could it happen why gmail didn't

63
00:02:32,959 --> 00:02:34,720
reject this message

64
00:02:34,720 --> 00:02:36,959
we will answer these questions in this

65
00:02:36,959 --> 00:02:39,280
talk

66
00:02:40,560 --> 00:02:43,040
to understand this tag we need to know

67
00:02:43,040 --> 00:02:45,040
two important concepts in the email

68
00:02:45,040 --> 00:02:45,920
protocol

69
00:02:45,920 --> 00:02:48,720
cinder and authentication let's look at

70
00:02:48,720 --> 00:02:50,720
the first one

71
00:02:50,720 --> 00:02:53,360
here is an email example we often see in

72
00:02:53,360 --> 00:02:54,560
our day knife

73
00:02:54,560 --> 00:02:58,239
who is the email sender the from address

74
00:02:58,239 --> 00:03:00,080
we often see

75
00:03:00,080 --> 00:03:02,239
only represents the user who composes

76
00:03:02,239 --> 00:03:03,840
the message

77
00:03:03,840 --> 00:03:05,920
there's another invaluable part called

78
00:03:05,920 --> 00:03:07,920
smtp envelope

79
00:03:07,920 --> 00:03:10,080
the hello and mail from address in the

80
00:03:10,080 --> 00:03:11,280
smtp envelope

81
00:03:11,280 --> 00:03:13,360
represent represent the user who

82
00:03:13,360 --> 00:03:15,440
transmits the message

83
00:03:15,440 --> 00:03:17,519
this design is similar to the mail in

84
00:03:17,519 --> 00:03:18,480
our real life

85
00:03:18,480 --> 00:03:20,720
the address in envelope and address in

86
00:03:20,720 --> 00:03:24,319
the message data can be different

87
00:03:24,560 --> 00:03:26,959
this picture shows how an email is

88
00:03:26,959 --> 00:03:29,280
transmitted on the network

89
00:03:29,280 --> 00:03:32,000
first alice login her sending service to

90
00:03:32,000 --> 00:03:33,519
send the email

91
00:03:33,519 --> 00:03:35,360
then the email is sent to bob's

92
00:03:35,360 --> 00:03:37,519
receiving service

93
00:03:37,519 --> 00:03:40,239
then bob retrieves the email using his

94
00:03:40,239 --> 00:03:42,560
email client

95
00:03:42,560 --> 00:03:45,360
when smtp is originally designed it has

96
00:03:45,360 --> 00:03:48,799
a low built-in authentication mechanisms

97
00:03:48,799 --> 00:03:51,360
anyone on the internet can claim

98
00:03:51,360 --> 00:03:52,560
another's address

99
00:03:52,560 --> 00:03:55,920
in hello mail from or from field

100
00:03:55,920 --> 00:03:58,159
for example an attacker can claim he is

101
00:03:58,159 --> 00:03:59,760
alice at

102
00:03:59,760 --> 00:04:01,680
and send a spoofing email to bob's

103
00:04:01,680 --> 00:04:04,239
receiving service directly

104
00:04:04,239 --> 00:04:06,159
the receiving service cannot tell

105
00:04:06,159 --> 00:04:08,400
whether the email sender is really alice

106
00:04:08,400 --> 00:04:12,000
a.com to address this

107
00:04:12,000 --> 00:04:14,239
problem various email authentication

108
00:04:14,239 --> 00:04:15,040
mechanisms

109
00:04:15,040 --> 00:04:19,358
have been proposed spf dkm and dmarc

110
00:04:19,358 --> 00:04:23,120
are three most widely adopted particles

111
00:04:23,120 --> 00:04:26,320
spf verified the sender ip address

112
00:04:26,320 --> 00:04:29,680
dkm verifies the gmail signature

113
00:04:29,680 --> 00:04:32,479
demark is designed to fix the alignment

114
00:04:32,479 --> 00:04:33,040
problem

115
00:04:33,040 --> 00:04:36,080
in spf and dkm we will talk about the

116
00:04:36,080 --> 00:04:39,360
alignment problem later

117
00:04:39,360 --> 00:04:41,759
let's look at how those three what three

118
00:04:41,759 --> 00:04:43,600
particles work

119
00:04:43,600 --> 00:04:46,639
first spf use

120
00:04:46,639 --> 00:04:48,880
ip address to authenticate the sender it

121
00:04:48,880 --> 00:04:49,680
works in

122
00:04:49,680 --> 00:04:53,280
three steps first the sending service

123
00:04:53,280 --> 00:04:54,080
publish

124
00:04:54,080 --> 00:04:57,600
dns record to specify which server ip

125
00:04:57,600 --> 00:05:01,440
alone to send the email for this domain

126
00:05:01,440 --> 00:05:03,280
when receiving the email the receiving

127
00:05:03,280 --> 00:05:05,600
service will query the domain in hello

128
00:05:05,600 --> 00:05:07,600
and mail from field

129
00:05:07,600 --> 00:05:11,280
to obtain the ip list

130
00:05:11,280 --> 00:05:13,120
then the receiving service will check

131
00:05:13,120 --> 00:05:14,639
whether the sender's ip

132
00:05:14,639 --> 00:05:17,600
matches with the obtained ip list if yes

133
00:05:17,600 --> 00:05:19,199
spf passed

134
00:05:19,199 --> 00:05:22,479
so spf insurance that only authorized

135
00:05:22,479 --> 00:05:26,719
ip can send the email for this domain

136
00:05:28,479 --> 00:05:30,960
dkm use public key cryptography to

137
00:05:30,960 --> 00:05:32,240
authenticate the sender

138
00:05:32,240 --> 00:05:35,759
it works in four steps

139
00:05:35,840 --> 00:05:37,680
first the sending service publishes

140
00:05:37,680 --> 00:05:41,120
their public key in gs record

141
00:05:41,120 --> 00:05:42,960
when sending an email the sending

142
00:05:42,960 --> 00:05:44,160
service will

143
00:05:44,160 --> 00:05:46,160
use the corresponding private key to

144
00:05:46,160 --> 00:05:47,199
sign the message

145
00:05:47,199 --> 00:05:50,240
to generate the decline signature header

146
00:05:50,240 --> 00:05:53,120
and attach it to the message in the dcm

147
00:05:53,120 --> 00:05:54,880
signature header two tags are very

148
00:05:54,880 --> 00:05:56,080
important

149
00:05:56,080 --> 00:05:59,039
d tag represents the signer's domain as

150
00:05:59,039 --> 00:06:00,560
tag can be any character

151
00:06:00,560 --> 00:06:04,000
is used for sub domain when receiving

152
00:06:04,000 --> 00:06:05,919
the gmail the receiving service will

153
00:06:05,919 --> 00:06:08,400
query as dot domain key dot d

154
00:06:08,400 --> 00:06:11,520
to obtain the public key s and d

155
00:06:11,520 --> 00:06:13,520
i extracted from the dqm signature

156
00:06:13,520 --> 00:06:14,560
header

157
00:06:14,560 --> 00:06:17,680
domain key is a constant for example in

158
00:06:17,680 --> 00:06:19,280
this case

159
00:06:19,280 --> 00:06:21,680
the receiving service will query any

160
00:06:21,680 --> 00:06:24,880
dash domain create.com to obtain

161
00:06:24,880 --> 00:06:28,400
the public key then the receiving

162
00:06:28,400 --> 00:06:31,680
service will validate the decline secret

163
00:06:31,680 --> 00:06:33,919
with the obtain the public key if the

164
00:06:33,919 --> 00:06:35,120
signature is valid

165
00:06:35,120 --> 00:06:38,240
the email pass decam authentication

166
00:06:38,240 --> 00:06:41,759
so dqm insurance that only

167
00:06:41,759 --> 00:06:44,160
the person who loads the private key can

168
00:06:44,160 --> 00:06:49,840
send the email for this domain

169
00:06:49,919 --> 00:06:52,960
unfortunately laser spf nor dkm

170
00:06:52,960 --> 00:06:55,759
provide a complete solution to prevent

171
00:06:55,759 --> 00:06:57,039
emails moving

172
00:06:57,039 --> 00:07:01,440
because spf verifies the hello and

173
00:07:01,440 --> 00:07:05,280
well from identifier they can verify

174
00:07:05,280 --> 00:07:07,360
the tick field in the dqm signature

175
00:07:07,360 --> 00:07:09,680
header

176
00:07:10,000 --> 00:07:12,319
these are of them verify the from

177
00:07:12,319 --> 00:07:13,440
address

178
00:07:13,440 --> 00:07:15,840
that is displayed to the end user which

179
00:07:15,840 --> 00:07:16,560
means

180
00:07:16,560 --> 00:07:19,919
even if a gmail pass both spf

181
00:07:19,919 --> 00:07:23,199
and dkm validation the from address

182
00:07:23,199 --> 00:07:26,639
consider be spoofed

183
00:07:28,960 --> 00:07:33,440
demarc is designed to fix this problem

184
00:07:34,639 --> 00:07:37,840
first when the sending service publish

185
00:07:37,840 --> 00:07:41,360
demand policy the receiving service must

186
00:07:41,360 --> 00:07:44,639
perform identifier alignment

187
00:07:44,639 --> 00:07:48,080
test to check if the from head domain

188
00:07:48,080 --> 00:07:52,400
matched as pf or dkm verified to me

189
00:07:52,400 --> 00:07:55,360
match means exactly match or have the

190
00:07:55,360 --> 00:07:57,680
sim rejected to me domain

191
00:07:57,680 --> 00:08:00,639
another important point is that dmacc

192
00:08:00,639 --> 00:08:01,919
only require

193
00:08:01,919 --> 00:08:05,120
either spf or decam shoe a positive

194
00:08:05,120 --> 00:08:06,479
result

195
00:08:06,479 --> 00:08:09,520
this design is intended to provide more

196
00:08:09,520 --> 00:08:10,720
robust lists

197
00:08:10,720 --> 00:08:13,520
for example for forwarding the email spf

198
00:08:13,520 --> 00:08:14,240
may fail

199
00:08:14,240 --> 00:08:17,360
but dcam will survive if

200
00:08:17,360 --> 00:08:21,199
both spf and dqm fail demand fail

201
00:08:21,199 --> 00:08:22,879
then the receiving service will

202
00:08:22,879 --> 00:08:25,199
reinforce the policy specified by the

203
00:08:25,199 --> 00:08:26,879
domain owner

204
00:08:26,879 --> 00:08:29,520
such as rejecting the email or sending

205
00:08:29,520 --> 00:08:32,240
failure reports

206
00:08:32,240 --> 00:08:35,200
here is an email authentication flow

207
00:08:35,200 --> 00:08:36,640
when the receiving service

208
00:08:36,640 --> 00:08:39,839
receives an email spf component will

209
00:08:39,839 --> 00:08:40,240
check

210
00:08:40,240 --> 00:08:43,039
hello and well from identifier dkm

211
00:08:43,039 --> 00:08:43,760
component

212
00:08:43,760 --> 00:08:47,760
will check the dkm signage header

213
00:08:47,760 --> 00:08:49,760
demand component will check alignment

214
00:08:49,760 --> 00:08:51,360
with the from header

215
00:08:51,360 --> 00:08:55,279
if the gmail pass either spf or dkm

216
00:08:55,279 --> 00:08:58,000
authentication and the from header pass

217
00:08:58,000 --> 00:08:59,839
the alignment test

218
00:08:59,839 --> 00:09:03,440
the gmail pass demand authentication

219
00:09:03,440 --> 00:09:06,839
and then is delivered to the end users

220
00:09:06,839 --> 00:09:08,320
mua

221
00:09:08,320 --> 00:09:11,279
so the flow sounds good what could

222
00:09:11,279 --> 00:09:14,160
possibly go wrong

223
00:09:15,760 --> 00:09:18,240
we found 18 attacks to bypass the

224
00:09:18,240 --> 00:09:20,880
authentication

225
00:09:21,200 --> 00:09:23,839
the key idea of our attacks is to

226
00:09:23,839 --> 00:09:24,560
exploit

227
00:09:24,560 --> 00:09:26,560
inconsistencies between different

228
00:09:26,560 --> 00:09:27,839
components

229
00:09:27,839 --> 00:09:31,519
as shown in the picture a uml

230
00:09:31,519 --> 00:09:34,000
sent by the sender's mua need to be

231
00:09:34,000 --> 00:09:34,640
processed

232
00:09:34,640 --> 00:09:37,279
at least six different components before

233
00:09:37,279 --> 00:09:40,320
reaching the recipient

234
00:09:40,399 --> 00:09:42,399
those components are often built by

235
00:09:42,399 --> 00:09:43,839
different developers

236
00:09:43,839 --> 00:09:46,800
or different companies and have a wide

237
00:09:46,800 --> 00:09:47,440
range of

238
00:09:47,440 --> 00:09:50,240
inconsistencies which can be exploited

239
00:09:50,240 --> 00:09:50,560
by

240
00:09:50,560 --> 00:09:53,600
attackers an

241
00:09:53,600 --> 00:09:56,399
attacker can craft an ambiguous message

242
00:09:56,399 --> 00:09:58,720
with multiple identifiers

243
00:09:58,720 --> 00:10:01,519
component a may take one identifier but

244
00:10:01,519 --> 00:10:02,320
component b

245
00:10:02,320 --> 00:10:05,440
may take another identifier this can

246
00:10:05,440 --> 00:10:07,360
cause semantic ambiguity

247
00:10:07,360 --> 00:10:10,480
and lead to authentication bypass

248
00:10:10,480 --> 00:10:12,480
in the following talk we will talk about

249
00:10:12,480 --> 00:10:14,320
several examples

250
00:10:14,320 --> 00:10:19,120
to illustrate the problem in detail

251
00:10:19,120 --> 00:10:21,200
the first example exploits

252
00:10:21,200 --> 00:10:23,440
inconsistencies between spf

253
00:10:23,440 --> 00:10:27,839
and demarc spf

254
00:10:27,839 --> 00:10:31,519
smtp defined two different identifiers

255
00:10:31,519 --> 00:10:33,680
hello and well from to represent the

256
00:10:33,680 --> 00:10:36,560
user who transmits the message

257
00:10:36,560 --> 00:10:39,279
spf standard requires spf verifiers to

258
00:10:39,279 --> 00:10:41,440
check both of them if either fails

259
00:10:41,440 --> 00:10:45,600
as pf fails demand standard require

260
00:10:45,600 --> 00:10:48,079
demark verifiers to use a mail from

261
00:10:48,079 --> 00:10:49,760
force alignment test

262
00:10:49,760 --> 00:10:54,480
if mail frame is empty then use hello

263
00:10:54,480 --> 00:10:57,760
the problem is that if spf

264
00:10:57,760 --> 00:11:02,079
verify hello on a demark using mail from

265
00:11:02,079 --> 00:11:04,640
to check alignment test it can cause

266
00:11:04,640 --> 00:11:06,399
ambiguity to bypass

267
00:11:06,399 --> 00:11:09,600
the authentication here is one case we

268
00:11:09,600 --> 00:11:11,920
found

269
00:11:12,240 --> 00:11:14,480
an attacker sets the mail from to be

270
00:11:14,480 --> 00:11:15,519
aligned exists

271
00:11:15,519 --> 00:11:18,880
subdomain spf components cannot

272
00:11:18,880 --> 00:11:22,000
verify the mail from address and can

273
00:11:22,000 --> 00:11:23,200
only verify

274
00:11:23,200 --> 00:11:26,000
the hello identifier because now exists

275
00:11:26,000 --> 00:11:26,720
our domain

276
00:11:26,720 --> 00:11:30,399
doesn't have any spf policy

277
00:11:30,399 --> 00:11:33,040
then the spf component will forward the

278
00:11:33,040 --> 00:11:36,079
hello authentication results to demarc

279
00:11:36,079 --> 00:11:38,240
demar components however they are using

280
00:11:38,240 --> 00:11:39,920
mail from domain to perform

281
00:11:39,920 --> 00:11:43,120
alignment tests because mail from is not

282
00:11:43,120 --> 00:11:46,160
empty so in this case

283
00:11:46,160 --> 00:11:49,279
spf will pass because hello domain is

284
00:11:49,279 --> 00:11:51,680
under attacker's control the mac will

285
00:11:51,680 --> 00:11:54,800
pass because mail from and from header

286
00:11:54,800 --> 00:11:58,319
has the same registered domain

287
00:11:58,639 --> 00:12:00,680
the second example exploits

288
00:12:00,680 --> 00:12:02,399
inconsistencies between

289
00:12:02,399 --> 00:12:05,519
dkm and dns this is the bug we

290
00:12:05,519 --> 00:12:07,440
demonstrated at the beginning of this

291
00:12:07,440 --> 00:12:08,480
talk

292
00:12:08,480 --> 00:12:11,600
here is how the attack works first

293
00:12:11,600 --> 00:12:13,440
an attacker constructs a spoofing

294
00:12:13,440 --> 00:12:15,600
message and assigns a message

295
00:12:15,600 --> 00:12:18,560
with his own private key to generate dkm

296
00:12:18,560 --> 00:12:20,240
signature header

297
00:12:20,240 --> 00:12:21,920
in the decal simulation header he

298
00:12:21,920 --> 00:12:24,480
specifies the detect value

299
00:12:24,480 --> 00:12:28,240
as bank.com and the s-tag to include

300
00:12:28,240 --> 00:12:31,600
a neural creator when the receiving

301
00:12:31,600 --> 00:12:33,600
service receives the email the dqm

302
00:12:33,600 --> 00:12:34,480
component

303
00:12:34,480 --> 00:12:37,200
will query as the domain key dot d to

304
00:12:37,200 --> 00:12:39,040
obtain the value key

305
00:12:39,040 --> 00:12:41,760
but when the dns component reserves this

306
00:12:41,760 --> 00:12:42,480
domain

307
00:12:42,480 --> 00:12:45,360
it passes the null character as a stream

308
00:12:45,360 --> 00:12:46,720
terminator

309
00:12:46,720 --> 00:12:48,959
so the public key is actually obtained

310
00:12:48,959 --> 00:12:49,760
from

311
00:12:49,760 --> 00:12:52,800
attack.com so in this case

312
00:12:52,800 --> 00:12:56,160
dkm will pass because dqm components use

313
00:12:56,160 --> 00:12:59,120
attacker's public key to verify attacker

314
00:12:59,120 --> 00:13:01,120
signed message

315
00:13:01,120 --> 00:13:03,279
the mark will pass because the detect

316
00:13:03,279 --> 00:13:07,839
domain is equal to the from head domain

317
00:13:10,079 --> 00:13:13,440
the third example exploits how spf

318
00:13:13,440 --> 00:13:15,760
and dkm forward authentication results

319
00:13:15,760 --> 00:13:18,560
to demag for the alignment test

320
00:13:18,560 --> 00:13:21,360
rfc defines authentication results

321
00:13:21,360 --> 00:13:22,079
header

322
00:13:22,079 --> 00:13:25,279
for communicating those results here is

323
00:13:25,279 --> 00:13:27,120
an example of the authentication results

324
00:13:27,120 --> 00:13:28,000
header

325
00:13:28,000 --> 00:13:31,040
in the header smtp.mailfrom and

326
00:13:31,040 --> 00:13:34,399
header.d represents spf and dkm verify

327
00:13:34,399 --> 00:13:36,000
domain

328
00:13:36,000 --> 00:13:38,480
so the demand component will extract

329
00:13:38,480 --> 00:13:39,680
those two values

330
00:13:39,680 --> 00:13:43,440
to check alignments with the from header

331
00:13:43,440 --> 00:13:45,199
another important information in the

332
00:13:45,199 --> 00:13:47,199
header is the parenthesis

333
00:13:47,199 --> 00:13:49,600
the content in the parenthesis means a

334
00:13:49,600 --> 00:13:50,639
comment

335
00:13:50,639 --> 00:13:54,800
which should be ignored by the mark

336
00:13:55,120 --> 00:13:58,079
here is an example we found to exploit

337
00:13:58,079 --> 00:14:00,320
this forwarding process

338
00:14:00,320 --> 00:14:02,800
first an attacker construct a smoothie

339
00:14:02,800 --> 00:14:03,760
message

340
00:14:03,760 --> 00:14:06,000
and assign the message with his own

341
00:14:06,000 --> 00:14:07,839
private key to generate the dkm

342
00:14:07,839 --> 00:14:09,519
signature header

343
00:14:09,519 --> 00:14:11,920
in the dcm signature header he sets the

344
00:14:11,920 --> 00:14:13,199
detect value with

345
00:14:13,199 --> 00:14:16,399
an open parenthesis embedded in it

346
00:14:16,399 --> 00:14:18,720
when receiving this message the dqm

347
00:14:18,720 --> 00:14:19,600
component

348
00:14:19,600 --> 00:14:22,959
queries s dot domain key dot d

349
00:14:22,959 --> 00:14:25,360
which is attacker's domain to obtain the

350
00:14:25,360 --> 00:14:26,720
value key

351
00:14:26,720 --> 00:14:28,079
and it generates the following

352
00:14:28,079 --> 00:14:31,360
authentication results header

353
00:14:31,360 --> 00:14:33,120
when receiving the authentication

354
00:14:33,120 --> 00:14:35,440
results header the demand component

355
00:14:35,440 --> 00:14:37,680
pass the content after the parentheses

356
00:14:37,680 --> 00:14:39,279
as a comment

357
00:14:39,279 --> 00:14:43,839
and take bank.com as the dqm verified to

358
00:14:43,839 --> 00:14:47,360
so in this case dkm will pass because

359
00:14:47,360 --> 00:14:50,399
dqm components use attacker's public key

360
00:14:50,399 --> 00:14:53,360
to verify attacker's message the mac

361
00:14:53,360 --> 00:14:54,160
will pass

362
00:14:54,160 --> 00:14:57,199
because demand components use the first

363
00:14:57,199 --> 00:14:59,199
part of the detect domain to check

364
00:14:59,199 --> 00:15:00,480
alignment with the

365
00:15:00,480 --> 00:15:03,199
from header

366
00:15:06,320 --> 00:15:09,519
similarly an attacker can also set

367
00:15:09,519 --> 00:15:12,000
the parenthesis in the mail from field

368
00:15:12,000 --> 00:15:14,160
to bypass the spf and demand

369
00:15:14,160 --> 00:15:17,839
authentication spf verifies the entire

370
00:15:17,839 --> 00:15:18,720
domain

371
00:15:18,720 --> 00:15:21,440
but the mark only takes the first part

372
00:15:21,440 --> 00:15:23,600
for the alignment test

373
00:15:23,600 --> 00:15:25,440
in addition to the parenthesis an

374
00:15:25,440 --> 00:15:27,360
attacker can also use a single quote

375
00:15:27,360 --> 00:15:29,759
or double quote to replace the

376
00:15:29,759 --> 00:15:32,320
parentheses

377
00:15:33,120 --> 00:15:36,320
okay in the previous slides i press

378
00:15:36,320 --> 00:15:38,959
present three attacks that exploits

379
00:15:38,959 --> 00:15:40,160
inconsistencies

380
00:15:40,160 --> 00:15:42,800
using a single implementation in the

381
00:15:42,800 --> 00:15:44,320
following talk we will show

382
00:15:44,320 --> 00:15:46,720
attacks exploiting inconsistencies

383
00:15:46,720 --> 00:15:48,880
across different vendors

384
00:15:48,880 --> 00:15:51,360
which are more diverse and hard to be

385
00:15:51,360 --> 00:15:52,560
fixed

386
00:15:52,560 --> 00:15:54,880
now i will hand it over to chain to show

387
00:15:54,880 --> 00:15:58,320
how those attacks works

388
00:15:58,720 --> 00:16:01,199
thank you changing next i'm going to

389
00:16:01,199 --> 00:16:02,800
present the number of attacks we

390
00:16:02,800 --> 00:16:03,519
categorize

391
00:16:03,519 --> 00:16:06,639
as ui mismatch attacks

392
00:16:06,639 --> 00:16:10,639
in this attack the tigers were craft

393
00:16:10,639 --> 00:16:13,759
emailed messages that containing

394
00:16:13,759 --> 00:16:16,959
two identifiers one is the attacker's

395
00:16:16,959 --> 00:16:18,880
identifier another is the spoofing

396
00:16:18,880 --> 00:16:20,240
identifier

397
00:16:20,240 --> 00:16:23,680
in the way that a receiving service

398
00:16:23,680 --> 00:16:26,079
will recognize the attacker's identifier

399
00:16:26,079 --> 00:16:26,880
and

400
00:16:26,880 --> 00:16:28,639
for verification and pass the

401
00:16:28,639 --> 00:16:30,880
verification

402
00:16:30,880 --> 00:16:34,240
however the recipients mua will

403
00:16:34,240 --> 00:16:36,240
pick up the spoofing identifier and

404
00:16:36,240 --> 00:16:38,639
display to the uh

405
00:16:38,639 --> 00:16:41,600
recipient so the first example the

406
00:16:41,600 --> 00:16:44,320
attacker was just simply sent

407
00:16:44,320 --> 00:16:47,440
a email with two from headers and the

408
00:16:47,440 --> 00:16:47,920
first

409
00:16:47,920 --> 00:16:50,800
is the attackers tiger's

410
00:16:51,360 --> 00:16:55,680
email address another is the spoofing

411
00:16:55,680 --> 00:16:58,959
target so the receiving services

412
00:16:58,959 --> 00:17:02,880
demark components in some of

413
00:17:02,880 --> 00:17:04,799
implementations they were just to pick

414
00:17:04,799 --> 00:17:06,319
up the first header

415
00:17:06,319 --> 00:17:09,039
and verify that and that will pass of

416
00:17:09,039 --> 00:17:09,919
course

417
00:17:09,919 --> 00:17:13,439
so um but the

418
00:17:13,439 --> 00:17:17,199
sum of this male user agent will pick up

419
00:17:17,199 --> 00:17:20,319
the second one to display and that

420
00:17:20,319 --> 00:17:21,359
causes

421
00:17:21,359 --> 00:17:24,720
the phishing effects some some of those

422
00:17:24,720 --> 00:17:27,039
combinations are not vulnerable to this

423
00:17:27,039 --> 00:17:28,799
simple format

424
00:17:28,799 --> 00:17:31,679
but we find other variations that able

425
00:17:31,679 --> 00:17:33,440
to attack those

426
00:17:33,440 --> 00:17:36,080
so one of those variation is that you

427
00:17:36,080 --> 00:17:37,120
could use

428
00:17:37,120 --> 00:17:40,320
a a nine folding format

429
00:17:40,320 --> 00:17:43,600
in the first header and

430
00:17:43,600 --> 00:17:45,919
some of those team mark implementations

431
00:17:45,919 --> 00:17:46,640
will

432
00:17:46,640 --> 00:17:48,799
recognize the nine folding format and

433
00:17:48,799 --> 00:17:49,679
still

434
00:17:49,679 --> 00:17:53,120
verify that but for some of those

435
00:17:53,120 --> 00:17:57,280
male user agent or even they are

436
00:17:57,280 --> 00:17:58,080
programmed

437
00:17:58,080 --> 00:18:00,720
to pick up the first form header but in

438
00:18:00,720 --> 00:18:01,919
this case

439
00:18:01,919 --> 00:18:04,400
they consider this nine floating from

440
00:18:04,400 --> 00:18:05,039
header is

441
00:18:05,039 --> 00:18:08,960
invented so they pick up the uh

442
00:18:08,960 --> 00:18:11,440
the the actually uh the spoofing

443
00:18:11,440 --> 00:18:13,840
identifier

444
00:18:13,840 --> 00:18:16,720
cause the attacks

445
00:18:16,880 --> 00:18:19,840
another variation is to utilize the

446
00:18:19,840 --> 00:18:23,120
normalization behaviors

447
00:18:23,120 --> 00:18:26,080
in this case the attacker is sent still

448
00:18:26,080 --> 00:18:28,400
to from headers

449
00:18:28,400 --> 00:18:32,000
the second one is containing a space

450
00:18:32,000 --> 00:18:36,880
in the header name the receiving service

451
00:18:36,880 --> 00:18:38,640
will recognize the first one and

452
00:18:38,640 --> 00:18:40,160
verifies

453
00:18:40,160 --> 00:18:42,160
it actually won't be able to recognize

454
00:18:42,160 --> 00:18:43,200
the

455
00:18:43,200 --> 00:18:45,520
second one as a vanity header but when

456
00:18:45,520 --> 00:18:46,320
it

457
00:18:46,320 --> 00:18:50,960
forward to the mua it actually

458
00:18:50,960 --> 00:18:54,080
normalized the header and to remove this

459
00:18:54,080 --> 00:18:55,520
space

460
00:18:55,520 --> 00:18:58,559
and the mua will pick up the second one

461
00:18:58,559 --> 00:19:01,280
to display

462
00:19:03,200 --> 00:19:07,039
the previous examples use from headers

463
00:19:07,039 --> 00:19:09,600
multiple from headers actually there is

464
00:19:09,600 --> 00:19:11,840
another technique you could use

465
00:19:11,840 --> 00:19:16,720
some other headers in the email protocol

466
00:19:16,720 --> 00:19:19,760
it defines three type of headers that

467
00:19:19,760 --> 00:19:21,600
you could

468
00:19:21,600 --> 00:19:25,039
send the identifiers in is from

469
00:19:25,039 --> 00:19:28,240
sender and recent from

470
00:19:28,240 --> 00:19:32,160
so for some of those muas

471
00:19:32,480 --> 00:19:35,280
you have this kind of implementation

472
00:19:35,280 --> 00:19:36,880
behavior that

473
00:19:36,880 --> 00:19:39,919
if they cannot find a from header

474
00:19:39,919 --> 00:19:43,440
they will display sender or recent from

475
00:19:43,440 --> 00:19:46,960
so in this example we show

476
00:19:46,960 --> 00:19:50,400
that the tiger craft a

477
00:19:50,400 --> 00:19:53,520
two headers message one is from

478
00:19:53,520 --> 00:19:56,480
uh with a nine floating format another

479
00:19:56,480 --> 00:19:57,600
is sender

480
00:19:57,600 --> 00:20:00,400
and the dmacc implementation will be

481
00:20:00,400 --> 00:20:01,919
able to recognize

482
00:20:01,919 --> 00:20:05,280
the from uh in that format and

483
00:20:05,280 --> 00:20:08,320
verify that however the mua

484
00:20:08,320 --> 00:20:11,440
won't be able to recognize the from so

485
00:20:11,440 --> 00:20:13,760
it will think this email does not have a

486
00:20:13,760 --> 00:20:14,799
from header

487
00:20:14,799 --> 00:20:17,760
then it will display the sender header

488
00:20:17,760 --> 00:20:18,400
here

489
00:20:18,400 --> 00:20:21,120
there are some other variations of this

490
00:20:21,120 --> 00:20:22,640
type of things

491
00:20:22,640 --> 00:20:26,640
of multi-headers but not only just you

492
00:20:26,640 --> 00:20:28,400
could send the multi-headers to create

493
00:20:28,400 --> 00:20:30,080
this ambiguities

494
00:20:30,080 --> 00:20:33,280
even you only allowed to send one from

495
00:20:33,280 --> 00:20:33,840
header

496
00:20:33,840 --> 00:20:35,919
it's still possible to create this type

497
00:20:35,919 --> 00:20:37,600
of ambiguities

498
00:20:37,600 --> 00:20:41,840
because of the passing complexities

499
00:20:41,840 --> 00:20:44,480
take a close look of the from header

500
00:20:44,480 --> 00:20:45,760
syntax

501
00:20:45,760 --> 00:20:49,120
it is actually a surprisingly complex

502
00:20:49,120 --> 00:20:53,039
so the from header is defined

503
00:20:53,039 --> 00:20:57,360
with four portions and each portion you

504
00:20:57,360 --> 00:20:58,080
could put

505
00:20:58,080 --> 00:21:01,120
some kind of identifiers in in different

506
00:21:01,120 --> 00:21:02,000
places

507
00:21:02,000 --> 00:21:05,360
and the parser needs to be

508
00:21:05,360 --> 00:21:08,559
correctly picking in this case a at

509
00:21:08,559 --> 00:21:09,520
a.com

510
00:21:09,520 --> 00:21:12,880
as a real address but many parsers

511
00:21:12,880 --> 00:21:17,360
behave differently in addition to that

512
00:21:17,360 --> 00:21:21,039
there are a number of string related

513
00:21:21,039 --> 00:21:24,320
kind of traps that could make things

514
00:21:24,320 --> 00:21:26,720
even more complicated for example you

515
00:21:26,720 --> 00:21:28,240
could have

516
00:21:28,240 --> 00:21:32,320
unicode characters you could have like

517
00:21:32,320 --> 00:21:34,559
encoding you would have those kind of

518
00:21:34,559 --> 00:21:36,080
special characters

519
00:21:36,080 --> 00:21:40,480
put in uh those uh from header values

520
00:21:40,480 --> 00:21:43,440
to to complicate the password we

521
00:21:43,440 --> 00:21:44,559
actually find

522
00:21:44,559 --> 00:21:48,000
many cases that you can craft

523
00:21:48,000 --> 00:21:51,760
to create this type of inconsistencies

524
00:21:51,760 --> 00:21:53,760
between the mail server and the email

525
00:21:53,760 --> 00:21:55,039
client

526
00:21:55,039 --> 00:21:58,559
to launch the ui mismatch attacks

527
00:21:58,559 --> 00:22:00,720
the first example we wanted to show is

528
00:22:00,720 --> 00:22:03,360
you just simply put

529
00:22:03,360 --> 00:22:06,480
two identifiers in the from header

530
00:22:06,480 --> 00:22:08,480
and and the sum of the implementations

531
00:22:08,480 --> 00:22:09,840
will pick the first one

532
00:22:09,840 --> 00:22:13,200
some of those will pick the second one

533
00:22:13,200 --> 00:22:16,240
next example is

534
00:22:16,240 --> 00:22:20,480
you could craft a from a header with

535
00:22:20,480 --> 00:22:24,840
the route portion and some of those

536
00:22:24,840 --> 00:22:27,760
implementations they will correctly

537
00:22:27,760 --> 00:22:29,919
recognize this is a rough portion so

538
00:22:29,919 --> 00:22:30,799
they won't

539
00:22:30,799 --> 00:22:33,120
pick up they will pick up the first one

540
00:22:33,120 --> 00:22:35,440
as the identifier but some of those

541
00:22:35,440 --> 00:22:37,440
implementations they don't support that

542
00:22:37,440 --> 00:22:39,440
portion they will just

543
00:22:39,440 --> 00:22:42,640
sync this is the second one as

544
00:22:42,640 --> 00:22:46,000
the actual identifier

545
00:22:46,559 --> 00:22:50,159
and you can also use big space 64

546
00:22:50,159 --> 00:22:52,400
encoding to send the multiple

547
00:22:52,400 --> 00:22:53,280
identifiers

548
00:22:53,280 --> 00:22:55,760
and the sum of the implementations they

549
00:22:55,760 --> 00:22:56,880
will

550
00:22:56,880 --> 00:22:59,919
try to do the big 64 decoding

551
00:22:59,919 --> 00:23:02,960
so that they could recognize the encoded

552
00:23:02,960 --> 00:23:05,200
identifier but some of those

553
00:23:05,200 --> 00:23:06,000
implementations

554
00:23:06,000 --> 00:23:08,799
won't so that they can only recognize

555
00:23:08,799 --> 00:23:10,080
the non-encoded

556
00:23:10,080 --> 00:23:12,520
identifiers that also creates a

557
00:23:12,520 --> 00:23:14,720
inconsistency

558
00:23:14,720 --> 00:23:18,320
spaces there are some other kind of

559
00:23:18,320 --> 00:23:21,400
format to create this type of

560
00:23:21,400 --> 00:23:24,480
inconsistencies like using a special

561
00:23:24,480 --> 00:23:26,640
characters what and so on

562
00:23:26,640 --> 00:23:29,520
so i'm going to skip those details

563
00:23:29,520 --> 00:23:31,280
actually we find

564
00:23:31,280 --> 00:23:34,640
this ui mismatch attacks is prevalent

565
00:23:34,640 --> 00:23:37,840
among the combinations of those

566
00:23:37,840 --> 00:23:41,840
implementations and we find

567
00:23:41,840 --> 00:23:45,600
43 out of 82 different combinations that

568
00:23:45,600 --> 00:23:48,720
can be exploited in certain ways

569
00:23:48,720 --> 00:23:52,000
and and our test is actually not

570
00:23:52,000 --> 00:23:53,279
compressed efforts that

571
00:23:53,279 --> 00:23:55,520
that are likely more cases of those

572
00:23:55,520 --> 00:23:56,480
things

573
00:23:56,480 --> 00:23:58,720
please read our papers for more details

574
00:23:58,720 --> 00:24:01,760
about this attack

575
00:24:02,480 --> 00:24:06,159
the previous attacks is actually not

576
00:24:06,159 --> 00:24:07,039
perfect

577
00:24:07,039 --> 00:24:10,080
in that if

578
00:24:10,080 --> 00:24:13,760
a user is careful enough they will

579
00:24:13,760 --> 00:24:17,840
check the indicators they will say

580
00:24:17,840 --> 00:24:21,039
although it is displayed as a spoofing

581
00:24:21,039 --> 00:24:24,960
identifier but it will show that it is

582
00:24:24,960 --> 00:24:29,039
either signed was sent by the tigers to

583
00:24:29,039 --> 00:24:31,039
men

584
00:24:31,039 --> 00:24:33,440
however there are certain other kind of

585
00:24:33,440 --> 00:24:35,200
attacks we found

586
00:24:35,200 --> 00:24:38,799
that could have the

587
00:24:38,799 --> 00:24:41,360
spoofing identifier under the attackers

588
00:24:41,360 --> 00:24:42,559
identifier

589
00:24:42,559 --> 00:24:45,440
share the same domain for example if

590
00:24:45,440 --> 00:24:45,760
some

591
00:24:45,760 --> 00:24:49,200
attacker at gmail.com can spoof an email

592
00:24:49,200 --> 00:24:50,159
from admin

593
00:24:50,159 --> 00:24:53,279
gmail.com that could cause

594
00:24:53,279 --> 00:24:57,039
same amount of damage as is spoofing at

595
00:24:57,039 --> 00:24:59,919
different domains

596
00:25:01,200 --> 00:25:06,080
so how those attacks can be launched

597
00:25:07,840 --> 00:25:09,440
of course you could think about you

598
00:25:09,440 --> 00:25:11,360
might be able to simply

599
00:25:11,360 --> 00:25:15,200
simply login to like the email provider

600
00:25:15,200 --> 00:25:16,240
like a gmail

601
00:25:16,240 --> 00:25:20,480
uh and and try to send an email

602
00:25:20,480 --> 00:25:23,760
using the admin gmail.com but that

603
00:25:23,760 --> 00:25:24,799
simple

604
00:25:24,799 --> 00:25:28,720
attack won't work most of cases

605
00:25:28,720 --> 00:25:32,080
because the sending service

606
00:25:32,080 --> 00:25:34,480
were likely to perform some kind of

607
00:25:34,480 --> 00:25:35,520
verifications

608
00:25:35,520 --> 00:25:40,240
on the claim the from header so that

609
00:25:40,240 --> 00:25:44,640
it matches the actual user account

610
00:25:44,640 --> 00:25:48,240
but since we have presented

611
00:25:48,240 --> 00:25:51,279
the uh the parsing and

612
00:25:51,279 --> 00:25:53,840
and the extracting of the identity is

613
00:25:53,840 --> 00:25:55,279
actually a complex

614
00:25:55,279 --> 00:25:58,000
process that the sending service can

615
00:25:58,000 --> 00:25:59,360
also make mistakes

616
00:25:59,360 --> 00:26:02,640
so using the previous techniques is that

617
00:26:02,640 --> 00:26:05,679
one attacker could create a situation

618
00:26:05,679 --> 00:26:07,679
that the sending service

619
00:26:07,679 --> 00:26:11,039
will sing verifies

620
00:26:11,039 --> 00:26:14,799
as the tiger at gmail.com as the sending

621
00:26:14,799 --> 00:26:15,679
a

622
00:26:15,679 --> 00:26:19,200
sender identity but however the mua

623
00:26:19,200 --> 00:26:22,320
will pick up another one

624
00:26:22,320 --> 00:26:25,679
for example admin gmail.com as the

625
00:26:25,679 --> 00:26:26,880
displayed

626
00:26:26,880 --> 00:26:30,640
uh sender and in this case because of

627
00:26:30,640 --> 00:26:34,000
the attacker's domain

628
00:26:34,000 --> 00:26:37,279
and the spoofing target is domain is the

629
00:26:37,279 --> 00:26:38,080
same

630
00:26:38,080 --> 00:26:39,919
so even you check those security

631
00:26:39,919 --> 00:26:41,200
indicators

632
00:26:41,200 --> 00:26:43,760
you won't be able to recognize any kind

633
00:26:43,760 --> 00:26:44,400
of

634
00:26:44,400 --> 00:26:47,760
suspicious evidences

635
00:26:47,760 --> 00:26:52,480
and we actually found using the previous

636
00:26:52,480 --> 00:26:56,159
techniques to craft the email

637
00:26:56,159 --> 00:26:58,400
seven out of eight email providers are

638
00:26:58,400 --> 00:27:01,279
vulnerable to this type of attack

639
00:27:01,279 --> 00:27:05,039
and one exception email provider

640
00:27:05,039 --> 00:27:08,240
is actually not vulnerable because it

641
00:27:08,240 --> 00:27:09,600
will always

642
00:27:09,600 --> 00:27:12,159
try to reset the from header no matter

643
00:27:12,159 --> 00:27:13,360
how you craft

644
00:27:13,360 --> 00:27:16,559
from and under sender those type of

645
00:27:16,559 --> 00:27:17,120
headers

646
00:27:17,120 --> 00:27:20,399
it will just reset the from header as

647
00:27:20,399 --> 00:27:23,200
the actual user account which in this

648
00:27:23,200 --> 00:27:23,600
case

649
00:27:23,600 --> 00:27:27,360
the attacker's account

650
00:27:28,080 --> 00:27:31,279
with that kind of defense uh forces us

651
00:27:31,279 --> 00:27:31,840
to think

652
00:27:31,840 --> 00:27:35,200
more about how we can actually

653
00:27:35,200 --> 00:27:38,559
attack that particular email providers

654
00:27:38,559 --> 00:27:39,440
and we come out

655
00:27:39,440 --> 00:27:42,880
with a more complex format of attack

656
00:27:42,880 --> 00:27:46,960
so uh this attack

657
00:27:46,960 --> 00:27:49,840
combined two steps the first step is

658
00:27:49,840 --> 00:27:50,799
that

659
00:27:50,799 --> 00:27:53,918
the attacker will

660
00:27:54,799 --> 00:27:58,480
log in to this email provider

661
00:27:58,480 --> 00:28:02,080
and send to himself a email

662
00:28:02,080 --> 00:28:06,720
crafted using this format

663
00:28:06,720 --> 00:28:09,919
and the from is attacker

664
00:28:09,919 --> 00:28:13,200
gmail.com and the tool is

665
00:28:13,200 --> 00:28:16,880
victim at victim.com but

666
00:28:16,880 --> 00:28:20,080
since in the envelope the receipt

667
00:28:20,080 --> 00:28:23,279
2 is attacker gmail.com so this mail is

668
00:28:23,279 --> 00:28:24,720
actually going to be delivered

669
00:28:24,720 --> 00:28:28,240
to the attacker himself

670
00:28:28,240 --> 00:28:31,600
and in addition uh this email provider

671
00:28:31,600 --> 00:28:32,880
will actually

672
00:28:32,880 --> 00:28:36,559
provide a valid dkm signature

673
00:28:36,559 --> 00:28:39,919
uh signed by signing the

674
00:28:39,919 --> 00:28:43,039
from the to and the content

675
00:28:43,039 --> 00:28:45,840
so

676
00:28:48,080 --> 00:28:51,279
in the next step the

677
00:28:51,279 --> 00:28:54,399
attacker will using his own

678
00:28:54,399 --> 00:28:58,960
email server to send a

679
00:28:58,960 --> 00:29:03,279
the signed uh email with a smart tweet

680
00:29:03,279 --> 00:29:05,840
the smart tweet is to add another from

681
00:29:05,840 --> 00:29:06,399
header

682
00:29:06,399 --> 00:29:09,600
uh so it it actually goes back to our

683
00:29:09,600 --> 00:29:12,240
previous attack techniques is this

684
00:29:12,240 --> 00:29:14,399
additional from a header creates

685
00:29:14,399 --> 00:29:16,880
a ambiguity between the receiving

686
00:29:16,880 --> 00:29:17,919
service

687
00:29:17,919 --> 00:29:21,279
and the mua of the victim in that

688
00:29:21,279 --> 00:29:25,679
the receiving service will verify the

689
00:29:25,679 --> 00:29:28,799
dkm signature using the attackers

690
00:29:28,799 --> 00:29:31,600
identifier which is the original

691
00:29:31,600 --> 00:29:32,399
assigned

692
00:29:32,399 --> 00:29:35,440
identifier so that the dkm

693
00:29:35,440 --> 00:29:39,120
verification will pass and is the mua

694
00:29:39,120 --> 00:29:42,399
will display the admin at gmail.com in

695
00:29:42,399 --> 00:29:43,600
this case

696
00:29:43,600 --> 00:29:47,200
and then that will becoming a spoofing

697
00:29:47,200 --> 00:29:50,399
email to the victim

698
00:29:51,520 --> 00:29:55,360
with all of those attacks

699
00:29:55,360 --> 00:29:59,039
we consider this why this could happen

700
00:29:59,039 --> 00:30:02,399
i think is the ultimate problem is the

701
00:30:02,399 --> 00:30:03,440
complexity

702
00:30:03,440 --> 00:30:07,520
so in the email protocol

703
00:30:07,520 --> 00:30:09,760
we think there are three sources of

704
00:30:09,760 --> 00:30:11,360
complexities

705
00:30:11,360 --> 00:30:14,399
one is that you have

706
00:30:14,399 --> 00:30:17,279
multiple identifiers in the email

707
00:30:17,279 --> 00:30:18,000
protocol

708
00:30:18,000 --> 00:30:21,279
and it is easy to have

709
00:30:21,279 --> 00:30:24,159
discrepancies inconsistencies of which

710
00:30:24,159 --> 00:30:26,320
identifier to use

711
00:30:26,320 --> 00:30:29,200
the second is the syntax of the

712
00:30:29,200 --> 00:30:31,520
identifiers can be complex

713
00:30:31,520 --> 00:30:34,320
that the processing is not easy to make

714
00:30:34,320 --> 00:30:35,440
it right

715
00:30:35,440 --> 00:30:38,559
the third one is that in the email

716
00:30:38,559 --> 00:30:39,760
systems

717
00:30:39,760 --> 00:30:43,200
one email message is processed by

718
00:30:43,200 --> 00:30:45,600
multiple components and all of those

719
00:30:45,600 --> 00:30:46,880
components

720
00:30:46,880 --> 00:30:50,159
need to have some kind of agreement

721
00:30:50,159 --> 00:30:53,279
on the identifiers z recognized

722
00:30:53,279 --> 00:30:56,320
so that the whole uh

723
00:30:56,320 --> 00:30:58,320
some of the assertions security

724
00:30:58,320 --> 00:30:59,440
assertions could

725
00:30:59,440 --> 00:31:02,080
be hold

726
00:31:03,039 --> 00:31:06,360
those are the sources of those

727
00:31:06,360 --> 00:31:10,080
inconsistencies come from and

728
00:31:10,080 --> 00:31:12,240
from a defense perspective you should

729
00:31:12,240 --> 00:31:13,679
just to make it simple

730
00:31:13,679 --> 00:31:17,120
to remove those complexities

731
00:31:17,120 --> 00:31:18,720
what we think is that when you're

732
00:31:18,720 --> 00:31:20,559
designing a protocol

733
00:31:20,559 --> 00:31:22,320
not only you wanted to make the product

734
00:31:22,320 --> 00:31:23,679
or to be correct but

735
00:31:23,679 --> 00:31:25,760
also wanted to make it a product or to

736
00:31:25,760 --> 00:31:28,240
be implementation-friendly

737
00:31:28,240 --> 00:31:30,840
and make it simple make all these

738
00:31:30,840 --> 00:31:32,880
messages well-typed

739
00:31:32,880 --> 00:31:36,000
and easy to pass and you also

740
00:31:36,000 --> 00:31:39,840
should try to reduce or avoid

741
00:31:39,840 --> 00:31:42,799
multi-party processing that you need a

742
00:31:42,799 --> 00:31:45,279
multi-party to have some agreement

743
00:31:45,279 --> 00:31:47,600
two parties is good enough if you have

744
00:31:47,600 --> 00:31:49,519
three party four party needs to agree on

745
00:31:49,519 --> 00:31:50,399
something

746
00:31:50,399 --> 00:31:53,679
that likely to have some issues

747
00:31:53,679 --> 00:31:56,159
and generally when you do the passing it

748
00:31:56,159 --> 00:31:57,600
should be

749
00:31:57,600 --> 00:32:00,960
strict on what you accept and reject

750
00:32:00,960 --> 00:32:03,679
any kind of suspicious format you would

751
00:32:03,679 --> 00:32:06,159
like to

752
00:32:06,559 --> 00:32:10,240
to avoid this kind of passing issues

753
00:32:10,240 --> 00:32:13,200
the second point we wanted to bring up

754
00:32:13,200 --> 00:32:14,720
is that we found

755
00:32:14,720 --> 00:32:18,559
the user interface of email

756
00:32:18,559 --> 00:32:22,480
is not sufficient to have some kind of a

757
00:32:22,480 --> 00:32:23,760
security assurance

758
00:32:23,760 --> 00:32:26,880
so even for a security professional it's

759
00:32:26,880 --> 00:32:28,159
not easy

760
00:32:28,159 --> 00:32:31,360
for them to use any kind of

761
00:32:31,360 --> 00:32:33,919
security indicators to to show this if

762
00:32:33,919 --> 00:32:37,519
this email is trustable or not i think

763
00:32:37,519 --> 00:32:40,159
there are plenty of spaces to improve in

764
00:32:40,159 --> 00:32:42,399
that direction

765
00:32:42,399 --> 00:32:45,440
finally for the in the users

766
00:32:45,440 --> 00:32:48,799
we would like to remind

767
00:32:48,799 --> 00:32:52,159
that don't blindly trust the email

768
00:32:52,159 --> 00:32:55,440
displayed in your webmail

769
00:32:55,440 --> 00:32:59,279
or email clients try as much as you can

770
00:32:59,279 --> 00:32:59,840
to

771
00:32:59,840 --> 00:33:03,440
verify why this email is trustable

772
00:33:03,440 --> 00:33:07,039
and also we wanted to advocate using

773
00:33:07,039 --> 00:33:11,840
pgp as a secure email mechanism

774
00:33:11,840 --> 00:33:14,640
because pgp as of the authentication in

775
00:33:14,640 --> 00:33:16,000
pgp is

776
00:33:16,000 --> 00:33:19,519
much simpler in that it provides a

777
00:33:19,519 --> 00:33:20,640
end-to-end

778
00:33:20,640 --> 00:33:22,399
authentication only involving two

779
00:33:22,399 --> 00:33:25,519
parties and also the identifier is more

780
00:33:25,519 --> 00:33:28,320
likely more robust from those

781
00:33:28,320 --> 00:33:30,559
inconsistencies

782
00:33:30,559 --> 00:33:33,039
it can have its own problems but

783
00:33:33,039 --> 00:33:33,840
hopefully

784
00:33:33,840 --> 00:33:36,840
better than the tradition standard email

785
00:33:36,840 --> 00:33:39,519
particles

786
00:33:39,519 --> 00:33:42,880
we have connected

787
00:33:42,880 --> 00:33:45,679
all of those test cases and and and put

788
00:33:45,679 --> 00:33:47,600
it together into a tool

789
00:33:47,600 --> 00:33:51,360
we publish on github for those

790
00:33:51,360 --> 00:33:54,080
interested to play around please check

791
00:33:54,080 --> 00:33:56,639
this link

792
00:33:57,039 --> 00:34:00,000
that's our presentation thank you thank

793
00:34:00,000 --> 00:34:02,640
you very much

794
00:34:04,640 --> 00:34:07,919
the is closer uh

795
00:34:07,919 --> 00:34:11,119
yes we we have we have

796
00:34:11,119 --> 00:34:14,239
disclosed for the tax to the

797
00:34:14,239 --> 00:34:18,000
departed vendors and

798
00:34:18,839 --> 00:34:21,119
uh we tested

799
00:34:21,119 --> 00:34:23,440
we actually tested the 20 email services

800
00:34:23,440 --> 00:34:25,520
and 19 email clients

801
00:34:25,520 --> 00:34:28,800
and uh most of them respond our

802
00:34:28,800 --> 00:34:32,560
report positively and uh

803
00:34:32,560 --> 00:34:34,929
and or except microsoft and

804
00:34:34,929 --> 00:34:36,399
[Music]

805
00:34:36,399 --> 00:34:39,359
uh said that they are fixing them or

806
00:34:39,359 --> 00:34:41,280
they have fixed them

807
00:34:41,280 --> 00:34:45,119
and microsoft

808
00:34:46,839 --> 00:34:48,399
said doesn't

809
00:34:48,399 --> 00:34:51,760
consider this report as a valid

810
00:34:51,760 --> 00:34:53,839
security report because they don't

811
00:34:53,839 --> 00:34:54,960
consider

812
00:34:54,960 --> 00:34:58,320
social engineering attacks uh

813
00:34:58,320 --> 00:35:01,280
as a secured vulnerability because the

814
00:35:01,280 --> 00:35:01,760
this

815
00:35:01,760 --> 00:35:04,480
this this email support is often used

816
00:35:04,480 --> 00:35:05,359
for

817
00:35:05,359 --> 00:35:08,000
phishing attacks and yahoo doesn't

818
00:35:08,000 --> 00:35:08,480
consider

819
00:35:08,480 --> 00:35:12,720
these attacks because uh they

820
00:35:12,720 --> 00:35:16,880
think we our attack is relying dns

821
00:35:16,880 --> 00:35:20,480
with complete missed configuration so

822
00:35:20,480 --> 00:35:31,839
they they just ignored my report

823
00:35:47,920 --> 00:35:50,720
the second

824
00:35:52,480 --> 00:35:56,000
the second question is has

825
00:35:56,000 --> 00:35:59,040
this report been discussed in

826
00:35:59,040 --> 00:36:02,800
ihf yeah we didn't report

827
00:36:02,800 --> 00:36:06,000
uh we didn't report this this

828
00:36:06,000 --> 00:36:09,359
paper to the itf but uh

829
00:36:09,359 --> 00:36:11,680
i searched our paper on the intern on

830
00:36:11,680 --> 00:36:12,560
the internet and

831
00:36:12,560 --> 00:36:16,079
found that there was a discussion in the

832
00:36:16,079 --> 00:36:19,440
tmac uh working group and

833
00:36:19,440 --> 00:36:23,200
they feel this is an

834
00:36:23,200 --> 00:36:25,119
implementation issue rather than a

835
00:36:25,119 --> 00:36:27,040
specification issue

836
00:36:27,040 --> 00:36:29,279
so

837
00:36:30,079 --> 00:36:34,079
probably there

838
00:36:34,079 --> 00:36:36,800
there there yeah they have discussed

839
00:36:36,800 --> 00:36:38,720
this

840
00:36:38,720 --> 00:36:42,079
general the discussion link

841
00:36:42,079 --> 00:36:45,920
in the chat box related to that junjin

842
00:36:45,920 --> 00:36:46,960
there's a question

843
00:36:46,960 --> 00:36:51,280
about if dkim spf dmarc are all properly

844
00:36:51,280 --> 00:36:52,400
implemented

845
00:36:52,400 --> 00:36:55,440
and if the mua has strict for all rfc

846
00:36:55,440 --> 00:36:56,800
compliance

847
00:36:56,800 --> 00:37:09,839
can email still be spoofed

848
00:37:19,520 --> 00:37:23,280
it depends on what do you mean by

849
00:37:23,280 --> 00:37:24,640
properly implemented

850
00:37:24,640 --> 00:37:27,280
our attacks employ inconsistencies

851
00:37:27,280 --> 00:37:28,720
between

852
00:37:28,720 --> 00:37:31,520
two different components in the email

853
00:37:31,520 --> 00:37:33,119
processing chain

854
00:37:33,119 --> 00:37:36,320
so some messages are actually valid

855
00:37:36,320 --> 00:37:37,920
message for example

856
00:37:37,920 --> 00:37:39,920
a message with a from header with a two

857
00:37:39,920 --> 00:37:41,920
address in the from header

858
00:37:41,920 --> 00:37:44,960
and this is actually rc compatible

859
00:37:44,960 --> 00:37:50,720
message and but different uh

860
00:37:50,720 --> 00:37:53,040
components may recognize a different

861
00:37:53,040 --> 00:37:55,759
identifier

862
00:37:56,640 --> 00:37:58,960
in the in the message for example the

863
00:37:58,960 --> 00:38:00,000
email server may

864
00:38:00,000 --> 00:38:01,920
recognize the first one mua may

865
00:38:01,920 --> 00:38:04,880
recognize the second one

866
00:38:04,880 --> 00:38:08,720
so yeah um let me answer

867
00:38:08,720 --> 00:38:11,440
another question which is has there been

868
00:38:11,440 --> 00:38:12,480
any effort to make

869
00:38:12,480 --> 00:38:14,480
zeke or snort detections for these

870
00:38:14,480 --> 00:38:15,599
techniques

871
00:38:15,599 --> 00:38:18,720
i can't speak to snort um zeke

872
00:38:18,720 --> 00:38:21,040
of course is near and dear to what i do

873
00:38:21,040 --> 00:38:22,240
in the core light

874
00:38:22,240 --> 00:38:25,920
um and the

875
00:38:25,920 --> 00:38:28,960
from carlite's perspective no not yet

876
00:38:28,960 --> 00:38:30,960
and the main reason is we rarely have

877
00:38:30,960 --> 00:38:34,000
visibility in the clear text

878
00:38:34,000 --> 00:38:37,040
as email on the wire it's usually inside

879
00:38:37,040 --> 00:38:38,240
tls

880
00:38:38,240 --> 00:38:40,880
and so there's not an opportunity to

881
00:38:40,880 --> 00:38:42,560
look for these things

882
00:38:42,560 --> 00:38:44,480
in environments for that changes that it

883
00:38:44,480 --> 00:38:46,000
would be interesting certainly

884
00:38:46,000 --> 00:39:01,839
to code up such techniques

885
00:39:02,160 --> 00:39:04,640
okay

886
00:39:07,599 --> 00:39:10,720
yeah we have so many questions and uh

887
00:39:10,720 --> 00:39:15,839
so little time yeah yeah uh

888
00:39:15,839 --> 00:39:18,480
but we will we will answer the questions

889
00:39:18,480 --> 00:39:19,040
in the

890
00:39:19,040 --> 00:39:22,400
in the channel after this video uh

891
00:39:22,400 --> 00:39:26,480
in the chat box one by one and

892
00:39:26,800 --> 00:39:30,400
feel free to uh follow the twitter on

893
00:39:30,400 --> 00:39:33,760
collabs for my twitter

894
00:39:33,760 --> 00:39:37,599
to ask me any questions and we will also

895
00:39:37,599 --> 00:39:41,280
provide all the materials such as papers

896
00:39:41,280 --> 00:39:44,400
our tools and and the

897
00:39:44,400 --> 00:39:48,160
slides if they use the blackhead

898
00:39:48,160 --> 00:39:51,200
and slides in in the chat box

899
00:39:51,200 --> 00:39:54,839
and so or make a tweet about those

900
00:39:54,839 --> 00:39:57,839
materials

901
00:39:59,839 --> 00:40:02,720
great thank you very much folks yeah

902
00:40:02,720 --> 00:40:06,959
thank you

