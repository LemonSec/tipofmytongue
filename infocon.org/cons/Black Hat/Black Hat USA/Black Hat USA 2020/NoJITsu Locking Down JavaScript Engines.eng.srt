1
00:00:04,270 --> 00:00:14,090
[Music]

2
00:00:15,040 --> 00:00:17,520
hello everyone my name is tamim park and

3
00:00:17,520 --> 00:00:20,960
i'm a phd student at uc irvine today i'm

4
00:00:20,960 --> 00:00:21,520
going to

5
00:00:21,520 --> 00:00:23,600
talk about nodejune locking down

6
00:00:23,600 --> 00:00:25,439
javascript engines

7
00:00:25,439 --> 00:00:28,840
this is a joint work of uc irvine and ku

8
00:00:28,840 --> 00:00:30,640
ruben

9
00:00:30,640 --> 00:00:33,680
today we cannot live without internet so

10
00:00:33,680 --> 00:00:36,160
web browsers are now essential parts of

11
00:00:36,160 --> 00:00:38,000
our daily lives

12
00:00:38,000 --> 00:00:40,000
many of you might open a web browser

13
00:00:40,000 --> 00:00:43,440
first as soon as your computers are on

14
00:00:43,440 --> 00:00:45,520
one of the biggest innovations in web

15
00:00:45,520 --> 00:00:46,559
browser is

16
00:00:46,559 --> 00:00:48,960
javascript which provides rich

17
00:00:48,960 --> 00:00:50,079
interaction between

18
00:00:50,079 --> 00:00:53,039
web pages and web browser so people can

19
00:00:53,039 --> 00:00:56,079
enjoy the dynamic web environment

20
00:00:56,079 --> 00:00:58,079
as you can see most of the modern web

21
00:00:58,079 --> 00:01:02,480
browsers have javascript edges embedded

22
00:01:02,640 --> 00:01:04,720
however the problem of the javascript

23
00:01:04,720 --> 00:01:05,760
engines is that

24
00:01:05,760 --> 00:01:08,080
they are usually written in unsaved

25
00:01:08,080 --> 00:01:08,880
languages

26
00:01:08,880 --> 00:01:11,920
such as c or c plus plus so they might

27
00:01:11,920 --> 00:01:12,479
contain

28
00:01:12,479 --> 00:01:16,479
vulnerabilities also javascript engine

29
00:01:16,479 --> 00:01:17,280
automatically

30
00:01:17,280 --> 00:01:20,479
runs any script embedded in a web page

31
00:01:20,479 --> 00:01:23,119
therefore it is easy for the attacker to

32
00:01:23,119 --> 00:01:24,720
inject his script

33
00:01:24,720 --> 00:01:27,439
and trigger the vulnerability to exploit

34
00:01:27,439 --> 00:01:30,320
victims machine

35
00:01:30,799 --> 00:01:33,200
javascript engines continue to evolve

36
00:01:33,200 --> 00:01:34,479
and the size becomes

37
00:01:34,479 --> 00:01:37,280
larger and larger as you can see in the

38
00:01:37,280 --> 00:01:38,320
in this graph

39
00:01:38,320 --> 00:01:41,680
the code lines of v8 now become

40
00:01:41,680 --> 00:01:44,399
more than more than a million

41
00:01:44,399 --> 00:01:45,200
accordingly

42
00:01:45,200 --> 00:01:47,200
every year more than hundreds of the

43
00:01:47,200 --> 00:01:49,439
vulnerabilities in javascript engines

44
00:01:49,439 --> 00:01:50,880
are reported

45
00:01:50,880 --> 00:01:54,000
so javascript exploitation is now real

46
00:01:54,000 --> 00:01:58,000
threat one of the famous javascript

47
00:01:58,000 --> 00:01:58,399
engine

48
00:01:58,399 --> 00:02:02,079
exploitation is g-spring attack

49
00:02:02,079 --> 00:02:04,640
in this attack an attacker encodes

50
00:02:04,640 --> 00:02:06,799
malicious code in the huge number of

51
00:02:06,799 --> 00:02:08,560
constant in script

52
00:02:08,560 --> 00:02:11,440
look at this example they are definitely

53
00:02:11,440 --> 00:02:12,879
benign consecutive

54
00:02:12,879 --> 00:02:15,920
xor operations so

55
00:02:15,920 --> 00:02:17,920
there is no problem in generating

56
00:02:17,920 --> 00:02:20,160
corresponding digit code within the

57
00:02:20,160 --> 00:02:21,680
sandbox

58
00:02:21,680 --> 00:02:23,920
however an article can trigger a

59
00:02:23,920 --> 00:02:24,959
vulnerability

60
00:02:24,959 --> 00:02:27,120
and change the program counter to the

61
00:02:27,120 --> 00:02:29,280
middle of the door's constant

62
00:02:29,280 --> 00:02:31,040
then the semantic of the cursor turning

63
00:02:31,040 --> 00:02:32,560
to what attacker wants to

64
00:02:32,560 --> 00:02:35,680
execute in this way an attacker can

65
00:02:35,680 --> 00:02:36,239
inject

66
00:02:36,239 --> 00:02:40,560
any malicious code within the sandbox

67
00:02:40,800 --> 00:02:42,640
there are more advanced attacks on

68
00:02:42,640 --> 00:02:43,840
javascript engines

69
00:02:43,840 --> 00:02:46,319
especially utilizing vertice thread

70
00:02:46,319 --> 00:02:48,640
capability

71
00:02:48,640 --> 00:02:50,959
look at this slide during the g

72
00:02:50,959 --> 00:02:52,160
compilation

73
00:02:52,160 --> 00:02:54,640
g compilers first generate the

74
00:02:54,640 --> 00:02:56,239
intermediate representation

75
00:02:56,239 --> 00:02:59,440
which is gir at that time an attack

76
00:02:59,440 --> 00:03:01,360
response on new thread

77
00:03:01,360 --> 00:03:05,280
and still a cpu cycle to overwrite gir

78
00:03:05,280 --> 00:03:07,840
then the gd code transformed from the

79
00:03:07,840 --> 00:03:09,040
corrupted gir

80
00:03:09,040 --> 00:03:12,400
eventually contains attacker's code

81
00:03:12,400 --> 00:03:15,360
or by using the similar technique an

82
00:03:15,360 --> 00:03:17,200
article can inject his code

83
00:03:17,200 --> 00:03:19,599
directly onto the gd region when it

84
00:03:19,599 --> 00:03:20,319
becomes

85
00:03:20,319 --> 00:03:23,440
writable so

86
00:03:23,440 --> 00:03:25,680
people suggested several differences

87
00:03:25,680 --> 00:03:28,560
mostly isolating jig components through

88
00:03:28,560 --> 00:03:31,440
separate process or trusted execution

89
00:03:31,440 --> 00:03:33,519
environment

90
00:03:33,519 --> 00:03:35,920
however the basic execution unit of the

91
00:03:35,920 --> 00:03:36,959
javascript engine

92
00:03:36,959 --> 00:03:39,519
is the interpreter but previous work is

93
00:03:39,519 --> 00:03:40,560
all about jit

94
00:03:40,560 --> 00:03:42,720
and there had been no attacks and of

95
00:03:42,720 --> 00:03:46,799
course no defenses on the interpreter

96
00:03:46,799 --> 00:03:50,159
so here's our contribution our first

97
00:03:50,159 --> 00:03:51,360
goal is to discover

98
00:03:51,360 --> 00:03:53,920
new attack vector which is bytecode

99
00:03:53,920 --> 00:03:55,760
interpret attack

100
00:03:55,760 --> 00:03:57,360
our attack corrupts the bytecode

101
00:03:57,360 --> 00:03:58,799
interpreter and

102
00:03:58,799 --> 00:04:01,200
escape from the sandbox so that an

103
00:04:01,200 --> 00:04:03,760
attacker can execute arbitrary system

104
00:04:03,760 --> 00:04:05,360
calls

105
00:04:05,360 --> 00:04:07,519
the second goal is proposed defense

106
00:04:07,519 --> 00:04:08,959
mechanisms to protect

107
00:04:08,959 --> 00:04:11,519
javascript engines our defense

108
00:04:11,519 --> 00:04:13,680
techniques pursue a comprehensive

109
00:04:13,680 --> 00:04:14,480
defense

110
00:04:14,480 --> 00:04:16,560
so that it defeats not only the bytecode

111
00:04:16,560 --> 00:04:17,600
into print attack

112
00:04:17,600 --> 00:04:20,000
but also prior g-code injection and

113
00:04:20,000 --> 00:04:21,358
code-reached attacks

114
00:04:21,358 --> 00:04:24,160
which means protecting entire script

115
00:04:24,160 --> 00:04:26,560
engines

116
00:04:27,040 --> 00:04:28,960
before going to talk about our attacks

117
00:04:28,960 --> 00:04:30,080
and defenses

118
00:04:30,080 --> 00:04:33,680
i will go over how interpreter executes

119
00:04:33,680 --> 00:04:36,800
look at this slide when script is about

120
00:04:36,800 --> 00:04:38,240
to be executed

121
00:04:38,240 --> 00:04:41,199
it is compiled by by code compiler which

122
00:04:41,199 --> 00:04:42,000
generates

123
00:04:42,000 --> 00:04:44,720
my code object tables and javascript

124
00:04:44,720 --> 00:04:46,320
object

125
00:04:46,320 --> 00:04:48,400
bytecode is a stream of the bytecode

126
00:04:48,400 --> 00:04:49,840
instructions which

127
00:04:49,840 --> 00:04:52,000
which are executed by the interpreter

128
00:04:52,000 --> 00:04:53,680
one by one

129
00:04:53,680 --> 00:04:55,520
by code instructions are pretty much

130
00:04:55,520 --> 00:04:57,600
similar with machine instructions

131
00:04:57,600 --> 00:05:01,280
in that it has opcode and operand

132
00:05:01,280 --> 00:05:04,320
however instead of specifying data

133
00:05:04,320 --> 00:05:07,199
directly on the operand it is used to

134
00:05:07,199 --> 00:05:07,840
specify

135
00:05:07,840 --> 00:05:10,639
an index of an object table and each

136
00:05:10,639 --> 00:05:12,800
entry of the object table points to

137
00:05:12,800 --> 00:05:15,440
javascript object where actual data are

138
00:05:15,440 --> 00:05:17,919
stored

139
00:05:22,080 --> 00:05:24,400
here our attack aims to utilize the

140
00:05:24,400 --> 00:05:26,080
function called routine to run

141
00:05:26,080 --> 00:05:29,680
arbitrary system calls we have several

142
00:05:29,680 --> 00:05:30,880
attack strategies

143
00:05:30,880 --> 00:05:33,840
but in this talk i will show one attack

144
00:05:33,840 --> 00:05:34,960
example which

145
00:05:34,960 --> 00:05:38,880
corrupts javascript object

146
00:05:38,880 --> 00:05:41,759
here's our thread model there is at

147
00:05:41,759 --> 00:05:42,160
least

148
00:05:42,160 --> 00:05:44,160
one memory corruption vulnerability

149
00:05:44,160 --> 00:05:46,240
inside of the script engine

150
00:05:46,240 --> 00:05:48,800
that gives an attacker an arbitrary read

151
00:05:48,800 --> 00:05:49,360
and write

152
00:05:49,360 --> 00:05:52,639
capability and we assume that

153
00:05:52,639 --> 00:05:55,280
code injection defense is deployed so

154
00:05:55,280 --> 00:05:56,960
memory regions should be either

155
00:05:56,960 --> 00:06:00,639
writable or executable lastly

156
00:06:00,639 --> 00:06:02,960
our stream model has lightweight code

157
00:06:02,960 --> 00:06:04,000
reuse defense

158
00:06:04,000 --> 00:06:09,520
which includes aslr and core screen cfi

159
00:06:10,960 --> 00:06:13,520
this is a simple attack script calling

160
00:06:13,520 --> 00:06:15,120
of b9 function 4

161
00:06:15,120 --> 00:06:17,759
and the function full course cosign

162
00:06:17,759 --> 00:06:19,199
function

163
00:06:19,199 --> 00:06:21,280
when this screen is compiled

164
00:06:21,280 --> 00:06:22,800
corresponding by code

165
00:06:22,800 --> 00:06:25,199
object table and data object are

166
00:06:25,199 --> 00:06:27,280
generated

167
00:06:27,280 --> 00:06:29,280
here calling the cosign function is

168
00:06:29,280 --> 00:06:31,199
achieved by an indirect

169
00:06:31,199 --> 00:06:33,280
function core where the function pointer

170
00:06:33,280 --> 00:06:35,759
is fetched from the load function by

171
00:06:35,759 --> 00:06:37,120
code instructions

172
00:06:37,120 --> 00:06:39,680
and also arguments are fetched in the

173
00:06:39,680 --> 00:06:41,120
same way

174
00:06:41,120 --> 00:06:44,319
and this indirect function core gets the

175
00:06:44,319 --> 00:06:45,680
address of the

176
00:06:45,680 --> 00:06:50,319
context object as the first argument

177
00:06:52,000 --> 00:06:54,240
here we're gonna add code to trigger a

178
00:06:54,240 --> 00:06:55,440
vulnerability

179
00:06:55,440 --> 00:06:58,000
which gives an attacker an arbitrary

180
00:06:58,000 --> 00:07:00,560
read and write capability

181
00:07:00,560 --> 00:07:03,280
so attacker can now rely on arbitrarily

182
00:07:03,280 --> 00:07:05,680
with the capability to find the data to

183
00:07:05,680 --> 00:07:06,560
corrupt

184
00:07:06,560 --> 00:07:09,759
here let's say by code bar one object

185
00:07:09,759 --> 00:07:13,199
and context object we use a heap layout

186
00:07:13,199 --> 00:07:14,400
inference technique

187
00:07:14,400 --> 00:07:16,720
which first leaks an address of an

188
00:07:16,720 --> 00:07:18,080
arbitrary object

189
00:07:18,080 --> 00:07:20,479
and follow the pointers in the object to

190
00:07:20,479 --> 00:07:22,319
find the other object

191
00:07:22,319 --> 00:07:24,800
we repeat this process recursively until

192
00:07:24,800 --> 00:07:27,680
we get to the target data

193
00:07:27,680 --> 00:07:30,560
after finding them the article utilized

194
00:07:30,560 --> 00:07:33,039
arbitrary write capability to corrupt

195
00:07:33,039 --> 00:07:34,720
them

196
00:07:34,720 --> 00:07:37,199
first it cropped by codes so that the

197
00:07:37,199 --> 00:07:39,039
operand of the load function instruction

198
00:07:39,039 --> 00:07:39,919
points to

199
00:07:39,919 --> 00:07:43,039
bar one object then it corrupts the

200
00:07:43,039 --> 00:07:44,400
barbell object

201
00:07:44,400 --> 00:07:48,160
so it contains the of it contains the

202
00:07:48,160 --> 00:07:48,800
system

203
00:07:48,800 --> 00:07:52,240
the address of the system function

204
00:07:52,240 --> 00:07:55,360
finally it corrupts the context object

205
00:07:55,360 --> 00:07:58,960
so that it contains a share command

206
00:07:58,960 --> 00:08:02,000
so when this script calls the function

207
00:08:02,000 --> 00:08:03,199
full

208
00:08:03,199 --> 00:08:05,199
it will execute the system function with

209
00:08:05,199 --> 00:08:08,080
the share command

210
00:08:10,240 --> 00:08:12,960
so in order to protect the script

211
00:08:12,960 --> 00:08:13,919
engines from

212
00:08:13,919 --> 00:08:16,240
the previous by code interpreter attack

213
00:08:16,240 --> 00:08:17,199
we propose

214
00:08:17,199 --> 00:08:21,840
no digital a new defense mechanism

215
00:08:21,919 --> 00:08:24,160
the goal of the knowledge is protect all

216
00:08:24,160 --> 00:08:25,039
the data

217
00:08:25,039 --> 00:08:26,960
there are targets of our by could

218
00:08:26,960 --> 00:08:28,400
interpret attack and

219
00:08:28,400 --> 00:08:31,680
other existing attacks so we consider

220
00:08:31,680 --> 00:08:35,039
by code object tables javascript object

221
00:08:35,039 --> 00:08:39,039
gtir and gdt code

222
00:08:39,039 --> 00:08:41,440
in order to do this we enforce a

223
00:08:41,440 --> 00:08:42,320
fine-grained

224
00:08:42,320 --> 00:08:45,120
memory access control over orders data

225
00:08:45,120 --> 00:08:46,080
which means

226
00:08:46,080 --> 00:08:48,080
we try to minimize the permission of

227
00:08:48,080 --> 00:08:50,800
each data as small as possible

228
00:08:50,800 --> 00:08:52,880
however of course memory permission

229
00:08:52,880 --> 00:08:54,560
controls inevitably

230
00:08:54,560 --> 00:08:58,560
comes with significant overhead

231
00:08:59,360 --> 00:09:01,760
so we decided to use intel memory

232
00:09:01,760 --> 00:09:03,279
protection kit to solve

233
00:09:03,279 --> 00:09:07,440
this problem intel mpk is a new hardware

234
00:09:07,440 --> 00:09:09,519
feature to control the protection of the

235
00:09:09,519 --> 00:09:12,320
memory chunk in an efficient way

236
00:09:12,320 --> 00:09:14,160
it doesn't need to change the permission

237
00:09:14,160 --> 00:09:15,760
bit in page tables

238
00:09:15,760 --> 00:09:19,519
so it's very fast look at this slide

239
00:09:19,519 --> 00:09:22,480
each memory chunk is assigned up to 15

240
00:09:22,480 --> 00:09:22,959
kinds

241
00:09:22,959 --> 00:09:26,000
of specific mpk keys with associated

242
00:09:26,000 --> 00:09:28,000
permission

243
00:09:28,000 --> 00:09:30,640
changing permission is achieved by

244
00:09:30,640 --> 00:09:31,680
simply changing

245
00:09:31,680 --> 00:09:34,399
a permission bit of the specific key at

246
00:09:34,399 --> 00:09:36,560
pkru register

247
00:09:36,560 --> 00:09:38,640
and then every chunk with the specific

248
00:09:38,640 --> 00:09:41,519
key is affected

249
00:09:41,519 --> 00:09:44,560
also mpk supports execute only memory

250
00:09:44,560 --> 00:09:48,480
which a protect does not support

251
00:09:48,480 --> 00:09:51,600
finally mpk is red local so

252
00:09:51,600 --> 00:09:53,839
every thread has a different view of

253
00:09:53,839 --> 00:09:55,600
memory permission of the same chunk of

254
00:09:55,600 --> 00:09:58,240
the memory

255
00:09:59,040 --> 00:10:01,279
we are going to apply those nice

256
00:10:01,279 --> 00:10:03,279
properties of the apk to memory

257
00:10:03,279 --> 00:10:04,480
protection policy

258
00:10:04,480 --> 00:10:07,680
in the script engines

259
00:10:07,680 --> 00:10:10,720
this is the latest policy where by code

260
00:10:10,720 --> 00:10:14,320
object tables javascript object and gtir

261
00:10:14,320 --> 00:10:16,959
are all time writeable which means they

262
00:10:16,959 --> 00:10:20,480
are always open to be corrupted

263
00:10:20,480 --> 00:10:23,519
gd code is readable and executable which

264
00:10:23,519 --> 00:10:25,680
allows the attacker to learn about rp

265
00:10:25,680 --> 00:10:26,959
gadgets for attacks

266
00:10:26,959 --> 00:10:30,480
such as giraffe jericho's becomes

267
00:10:30,480 --> 00:10:32,320
temporarily writable when

268
00:10:32,320 --> 00:10:35,519
it is emitted to memory and like we

269
00:10:35,519 --> 00:10:36,720
discussed earlier

270
00:10:36,720 --> 00:10:39,360
an attacker can inject his code by

271
00:10:39,360 --> 00:10:40,320
utilizing

272
00:10:40,320 --> 00:10:43,600
race condition so

273
00:10:43,600 --> 00:10:46,399
in our new situ we minimize memory

274
00:10:46,399 --> 00:10:48,959
permission as small as possible

275
00:10:48,959 --> 00:10:52,000
now by code object table javascript

276
00:10:52,000 --> 00:10:52,720
object

277
00:10:52,720 --> 00:10:55,920
and ir are all time readable and

278
00:10:55,920 --> 00:10:59,040
gd code is executed only

279
00:10:59,040 --> 00:11:01,519
on top of that we separate the memory

280
00:11:01,519 --> 00:11:02,240
chunks

281
00:11:02,240 --> 00:11:04,720
into different kinds and assign

282
00:11:04,720 --> 00:11:07,200
different apk keys to manage them

283
00:11:07,200 --> 00:11:10,720
individually for example when there is

284
00:11:10,720 --> 00:11:12,320
an instruction to write on

285
00:11:12,320 --> 00:11:15,360
object tables we only open a right

286
00:11:15,360 --> 00:11:16,079
window of

287
00:11:16,079 --> 00:11:18,240
object table for this instruction so

288
00:11:18,240 --> 00:11:20,720
that other kinds of data are not not

289
00:11:20,720 --> 00:11:22,640
affected

290
00:11:22,640 --> 00:11:25,200
moreover attacker no longer utilize

291
00:11:25,200 --> 00:11:26,880
erase condition because

292
00:11:26,880 --> 00:11:29,120
the right window is independent from

293
00:11:29,120 --> 00:11:31,600
articles thread

294
00:11:31,600 --> 00:11:33,519
but there are challenges we need to

295
00:11:33,519 --> 00:11:34,880
solve here

296
00:11:34,880 --> 00:11:37,680
it is required to open right windows for

297
00:11:37,680 --> 00:11:39,760
all legal right instructions to those

298
00:11:39,760 --> 00:11:40,399
data

299
00:11:40,399 --> 00:11:42,959
and finding all of them is challenging

300
00:11:42,959 --> 00:11:45,200
and implementing protection changes

301
00:11:45,200 --> 00:11:48,720
is also not trivial

302
00:11:48,880 --> 00:11:52,000
then let's start by the easiest one

303
00:11:52,000 --> 00:11:55,519
we found that by code object cable gir

304
00:11:55,519 --> 00:11:58,320
and gdt quote need to be writable only

305
00:11:58,320 --> 00:12:00,160
during the compilation

306
00:12:00,160 --> 00:12:02,160
so we manually find the right

307
00:12:02,160 --> 00:12:03,279
instructions to

308
00:12:03,279 --> 00:12:06,160
those data and implement protection

309
00:12:06,160 --> 00:12:07,680
changes before and after the

310
00:12:07,680 --> 00:12:09,519
instructions

311
00:12:09,519 --> 00:12:12,560
however we found that it is not trivial

312
00:12:12,560 --> 00:12:14,000
to make the gd code

313
00:12:14,000 --> 00:12:17,680
execute only because gd code is mixture

314
00:12:17,680 --> 00:12:19,120
of motion instructions

315
00:12:19,120 --> 00:12:21,680
and readable data such as jump tables

316
00:12:21,680 --> 00:12:23,839
and large

317
00:12:23,839 --> 00:12:26,720
so we separate the digit code into

318
00:12:26,720 --> 00:12:28,079
machine instruction part

319
00:12:28,079 --> 00:12:31,200
and data part and assign different apk

320
00:12:31,200 --> 00:12:33,760
keys to them so now we can make the

321
00:12:33,760 --> 00:12:34,880
machine instruction

322
00:12:34,880 --> 00:12:40,000
execute only and data section read-only

323
00:12:41,680 --> 00:12:44,000
now we get to the most difficult one

324
00:12:44,000 --> 00:12:45,760
javascript object

325
00:12:45,760 --> 00:12:48,320
there are so many javascript objects and

326
00:12:48,320 --> 00:12:50,800
also so many right instructions to them

327
00:12:50,800 --> 00:12:53,600
so it's impossible to find them and

328
00:12:53,600 --> 00:12:54,240
instrument

329
00:12:54,240 --> 00:12:57,200
our protection changes manually

330
00:12:57,200 --> 00:12:57,920
therefore

331
00:12:57,920 --> 00:13:00,639
we need a automatic solution to find

332
00:13:00,639 --> 00:13:01,920
those instructions

333
00:13:01,920 --> 00:13:04,240
so that it can be generally applied to

334
00:13:04,240 --> 00:13:06,880
any javascript engines

335
00:13:06,880 --> 00:13:09,519
we can rely on steady analysis such as

336
00:13:09,519 --> 00:13:11,279
point to analysis

337
00:13:11,279 --> 00:13:14,320
but they are found to be conservative

338
00:13:14,320 --> 00:13:16,320
so it is not suitable for our

339
00:13:16,320 --> 00:13:18,399
fine-grained enforcement

340
00:13:18,399 --> 00:13:21,040
that's why we decided to rely on dynamic

341
00:13:21,040 --> 00:13:23,680
analysis

342
00:13:24,000 --> 00:13:26,880
the goal of our dynamic analysis is to

343
00:13:26,880 --> 00:13:28,160
automatically

344
00:13:28,160 --> 00:13:30,240
find all the locations of right

345
00:13:30,240 --> 00:13:31,279
instructions

346
00:13:31,279 --> 00:13:34,880
involved in javascript object so

347
00:13:34,880 --> 00:13:37,200
we instrument the code for every write

348
00:13:37,200 --> 00:13:38,000
instructions

349
00:13:38,000 --> 00:13:42,320
using lfvm and check this properly

350
00:13:42,320 --> 00:13:45,040
after the instrumentation we run script

351
00:13:45,040 --> 00:13:45,600
engines

352
00:13:45,600 --> 00:13:48,800
with well chosen input set while making

353
00:13:48,800 --> 00:13:51,360
javascript object read only with an apk

354
00:13:51,360 --> 00:13:53,199
key

355
00:13:53,199 --> 00:13:55,600
when a writing instruction tries to

356
00:13:55,600 --> 00:13:56,480
write on an

357
00:13:56,480 --> 00:13:59,839
object it will cause signal segmentation

358
00:13:59,839 --> 00:14:02,880
fort because it's read-only then

359
00:14:02,880 --> 00:14:05,760
our custom signal handler checks whether

360
00:14:05,760 --> 00:14:06,320
it's

361
00:14:06,320 --> 00:14:10,079
because of the mpk violation if it is

362
00:14:10,079 --> 00:14:12,240
it changes the permission of the object

363
00:14:12,240 --> 00:14:13,199
as writable

364
00:14:13,199 --> 00:14:16,399
and return to our instrument code

365
00:14:16,399 --> 00:14:18,639
our instrument could then check whether

366
00:14:18,639 --> 00:14:20,639
the permission becomes writable

367
00:14:20,639 --> 00:14:22,560
which indicates that the right

368
00:14:22,560 --> 00:14:24,959
instruction above touches the javascript

369
00:14:24,959 --> 00:14:26,240
object

370
00:14:26,240 --> 00:14:29,519
then it reports the associated location

371
00:14:29,519 --> 00:14:32,399
and makes the data object read only for

372
00:14:32,399 --> 00:14:35,839
the rest of the analysis

373
00:14:36,959 --> 00:14:39,440
after finding all those locations from

374
00:14:39,440 --> 00:14:41,440
our dynamic analysis

375
00:14:41,440 --> 00:14:44,800
we use levm again to enforce permission

376
00:14:44,800 --> 00:14:45,360
changes

377
00:14:45,360 --> 00:14:47,279
at the start and at the end of the

378
00:14:47,279 --> 00:14:49,680
function so that we open a right window

379
00:14:49,680 --> 00:14:52,560
for the entire function

380
00:14:52,560 --> 00:14:54,560
we also did a little bit optimization

381
00:14:54,560 --> 00:14:55,760
for some cases

382
00:14:55,760 --> 00:14:58,320
where an instrument function is called

383
00:14:58,320 --> 00:14:59,519
in a loop

384
00:14:59,519 --> 00:15:02,160
in this case we hoist the procession

385
00:15:02,160 --> 00:15:02,720
changes

386
00:15:02,720 --> 00:15:06,160
out of the loop in this way our dynamic

387
00:15:06,160 --> 00:15:06,880
analysis

388
00:15:06,880 --> 00:15:09,519
automatically finds and instruments all

389
00:15:09,519 --> 00:15:13,279
the right instructions

390
00:15:13,279 --> 00:15:15,440
in order to find all of the functions

391
00:15:15,440 --> 00:15:17,040
involved

392
00:15:17,040 --> 00:15:19,920
functions involved in javascript object

393
00:15:19,920 --> 00:15:20,800
it is best

394
00:15:20,800 --> 00:15:24,160
if our input set guarantees fully covers

395
00:15:24,160 --> 00:15:27,839
but it's impossible so we studied script

396
00:15:27,839 --> 00:15:28,320
engine

397
00:15:28,320 --> 00:15:30,560
and found that those functions have

398
00:15:30,560 --> 00:15:31,680
common knowledges

399
00:15:31,680 --> 00:15:34,240
and we can categorize them into four

400
00:15:34,240 --> 00:15:36,480
accessor functions

401
00:15:36,480 --> 00:15:38,560
those accessor functions work as

402
00:15:38,560 --> 00:15:40,079
gateways to write on

403
00:15:40,079 --> 00:15:42,959
data object and extensively shared by

404
00:15:42,959 --> 00:15:44,720
other components

405
00:15:44,720 --> 00:15:47,120
therefore we only need to find those

406
00:15:47,120 --> 00:15:48,160
excessive functions

407
00:15:48,160 --> 00:15:51,360
and we believe that the extensive test

408
00:15:51,360 --> 00:15:54,399
cases on every kind of data object we

409
00:15:54,399 --> 00:15:55,600
cover them

410
00:15:55,600 --> 00:15:58,000
that's why we decided to use javascript

411
00:15:58,000 --> 00:15:59,199
test switch

412
00:15:59,199 --> 00:16:01,839
which satisfy our requirement and we're

413
00:16:01,839 --> 00:16:03,600
going to show that our assumption

414
00:16:03,600 --> 00:16:08,639
is correct in our coverage analysis

415
00:16:08,639 --> 00:16:11,680
in our coverage analysis we picked

416
00:16:11,680 --> 00:16:15,120
one thickness of for test switch as our

417
00:16:15,120 --> 00:16:18,079
input set for dynamic analysis and

418
00:16:18,079 --> 00:16:18,959
implemented

419
00:16:18,959 --> 00:16:22,720
logic ju then we read this note to

420
00:16:22,720 --> 00:16:25,040
enable the javascript engine with the

421
00:16:25,040 --> 00:16:25,680
first test

422
00:16:25,680 --> 00:16:28,800
switch and we found that all test

423
00:16:28,800 --> 00:16:31,759
order test cases are passed with without

424
00:16:31,759 --> 00:16:32,959
any errors

425
00:16:32,959 --> 00:16:36,480
so our analysis implies that even a

426
00:16:36,480 --> 00:16:37,839
small set of the test

427
00:16:37,839 --> 00:16:40,560
switch is enough to find the or accessor

428
00:16:40,560 --> 00:16:42,959
functions

429
00:16:44,079 --> 00:16:46,720
we also evaluate whether our defense can

430
00:16:46,720 --> 00:16:47,519
defeat

431
00:16:47,519 --> 00:16:49,759
our bytecode interpret attack called

432
00:16:49,759 --> 00:16:50,959
injection attack and

433
00:16:50,959 --> 00:16:54,959
other kinds of code reuse attacks

434
00:16:55,920 --> 00:16:58,639
in our bytecode interpreter text we need

435
00:16:58,639 --> 00:17:00,240
to corrupt one of the data

436
00:17:00,240 --> 00:17:02,880
among bytecode object tables and

437
00:17:02,880 --> 00:17:04,160
javascript

438
00:17:04,160 --> 00:17:07,280
object however logistics makes them

439
00:17:07,280 --> 00:17:10,079
or read-only so attacker cannot

440
00:17:10,079 --> 00:17:13,520
manipulate them anymore

441
00:17:14,160 --> 00:17:16,839
g-code injection attacks are also not

442
00:17:16,839 --> 00:17:18,000
available

443
00:17:18,000 --> 00:17:20,959
g ir and gd code should be writeable for

444
00:17:20,959 --> 00:17:22,799
the g compilation unit

445
00:17:22,799 --> 00:17:25,839
but it's not for a ticker thread where

446
00:17:25,839 --> 00:17:29,200
gir is read-only and cheated code is

447
00:17:29,200 --> 00:17:32,000
executed only this is because of the

448
00:17:32,000 --> 00:17:32,880
independent

449
00:17:32,880 --> 00:17:36,400
view of of the thread for the protection

450
00:17:36,400 --> 00:17:36,720
of

451
00:17:36,720 --> 00:17:39,840
each memory chunk so attacker cannot

452
00:17:39,840 --> 00:17:42,959
overwrite it anymore

453
00:17:44,240 --> 00:17:47,200
our defense is also effective in advance

454
00:17:47,200 --> 00:17:49,039
that could reuse attacks such as

455
00:17:49,039 --> 00:17:53,600
g-raw g-rob basically tries to harvest

456
00:17:53,600 --> 00:17:56,000
rpg cuts at runtime by traversing code

457
00:17:56,000 --> 00:17:57,280
pages

458
00:17:57,280 --> 00:18:01,200
but after enforcing reading code pages

459
00:18:01,200 --> 00:18:03,840
are not available which disallows

460
00:18:03,840 --> 00:18:07,280
harvesting rp gadgets

461
00:18:08,320 --> 00:18:10,240
logistics can be combined with a

462
00:18:10,240 --> 00:18:12,720
constant lining to effectively defeat

463
00:18:12,720 --> 00:18:14,799
the g-spring attacks

464
00:18:14,799 --> 00:18:17,679
constant blinding is a good technique to

465
00:18:17,679 --> 00:18:18,240
defend

466
00:18:18,240 --> 00:18:20,559
against just brain attacks with large

467
00:18:20,559 --> 00:18:21,360
constant

468
00:18:21,360 --> 00:18:23,600
but not effective with small constant

469
00:18:23,600 --> 00:18:26,240
because of the overhead

470
00:18:26,240 --> 00:18:29,120
in order to exploit the small constant

471
00:18:29,120 --> 00:18:30,320
this spring attack

472
00:18:30,320 --> 00:18:33,039
should be combined with rp style attacks

473
00:18:33,039 --> 00:18:34,160
but our node is

474
00:18:34,160 --> 00:18:36,720
invalidated because no digit does not

475
00:18:36,720 --> 00:18:37,360
follow

476
00:18:37,360 --> 00:18:40,559
harvesting rp gadgets which is already

477
00:18:40,559 --> 00:18:41,200
described

478
00:18:41,200 --> 00:18:44,400
in previous slides

479
00:18:45,600 --> 00:18:47,840
this is the performance evaluation of

480
00:18:47,840 --> 00:18:49,760
node.js

481
00:18:49,760 --> 00:18:52,559
we tested our knowledge on spider-monkey

482
00:18:52,559 --> 00:18:54,840
which is one of the famous javascript

483
00:18:54,840 --> 00:18:56,160
engines

484
00:18:56,160 --> 00:18:58,720
and we use the long spider benchmarks

485
00:18:58,720 --> 00:18:59,440
which are

486
00:18:59,440 --> 00:19:01,360
a longer version of the standard

487
00:19:01,360 --> 00:19:03,760
benchmarks available in webcam

488
00:19:03,760 --> 00:19:05,840
the reason that we use those benchmarks

489
00:19:05,840 --> 00:19:08,080
is that the original benchmarks are too

490
00:19:08,080 --> 00:19:10,080
microscopic to catch the

491
00:19:10,080 --> 00:19:13,919
overhead caused by our enforcement

492
00:19:13,919 --> 00:19:16,559
we re-ran those benchmarks on industrial

493
00:19:16,559 --> 00:19:20,399
machine under ubuntu 841

494
00:19:22,000 --> 00:19:25,039
here's the result the x-axis is

495
00:19:25,039 --> 00:19:25,840
benchmarks

496
00:19:25,840 --> 00:19:29,840
and y-axis is left y-axis is overhead

497
00:19:29,840 --> 00:19:32,960
induced and the blue bar

498
00:19:32,960 --> 00:19:36,080
is our notice without optimization and

499
00:19:36,080 --> 00:19:38,480
orange bar is losing to with the hoist

500
00:19:38,480 --> 00:19:40,960
optimization

501
00:19:40,960 --> 00:19:43,919
as you can see

502
00:19:44,080 --> 00:19:47,039
the average operator of our defense is

503
00:19:47,039 --> 00:19:48,000
five percent

504
00:19:48,000 --> 00:19:50,640
but it is reduced to three percent with

505
00:19:50,640 --> 00:19:53,120
our waste optimization

506
00:19:53,120 --> 00:19:56,000
our optimization actually widens right

507
00:19:56,000 --> 00:19:56,640
window

508
00:19:56,640 --> 00:19:59,760
but it's negligible you can check more

509
00:19:59,760 --> 00:20:00,799
details about

510
00:20:00,799 --> 00:20:04,240
this issue in our paper

511
00:20:05,440 --> 00:20:08,640
okay i have to conclude my talk

512
00:20:08,640 --> 00:20:10,640
we showed an instance of by code

513
00:20:10,640 --> 00:20:11,760
interpreter attack

514
00:20:11,760 --> 00:20:14,159
which corrupts interpreter execution to

515
00:20:14,159 --> 00:20:16,400
run arbitrary share commands

516
00:20:16,400 --> 00:20:19,760
so we proposed a notion enforcing

517
00:20:19,760 --> 00:20:21,919
fine-grained memory access control

518
00:20:21,919 --> 00:20:25,280
through intel mpk and we showed that our

519
00:20:25,280 --> 00:20:27,280
defense successfully

520
00:20:27,280 --> 00:20:29,919
stopped code reuse and called injection

521
00:20:29,919 --> 00:20:30,480
attack

522
00:20:30,480 --> 00:20:33,520
and also the bytecode interpreter can we

523
00:20:33,520 --> 00:20:34,320
developed

524
00:20:34,320 --> 00:20:38,399
without incurring much overhead

525
00:20:39,120 --> 00:20:41,280
and this is the end of my talk thank you

526
00:20:41,280 --> 00:20:42,480
for your attention

527
00:20:42,480 --> 00:20:49,840
and i'm happy to answer any questions

528
00:20:50,960 --> 00:20:55,039
uh okay it's is this the

529
00:20:55,039 --> 00:20:58,240
question section now yeah

530
00:20:58,240 --> 00:21:01,280
i think my project is really slow so now

531
00:21:01,280 --> 00:21:02,080
i can see

532
00:21:02,080 --> 00:21:05,360
yes some questions

533
00:21:05,440 --> 00:21:09,440
okay yeah okay yeah let's see

534
00:21:09,440 --> 00:21:13,440
the yeah i can see the first question is

535
00:21:13,440 --> 00:21:16,720
the evolve percent overhead what was the

536
00:21:16,720 --> 00:21:20,080
measuring again uh

537
00:21:20,080 --> 00:21:23,039
yeah just so s axis is the benchmark

538
00:21:23,039 --> 00:21:24,720
itself and the y-axis is

539
00:21:24,720 --> 00:21:27,120
the overhead which means that we have

540
00:21:27,120 --> 00:21:28,000
kind of

541
00:21:28,000 --> 00:21:30,400
a baseline which is the running

542
00:21:30,400 --> 00:21:31,360
javascript without

543
00:21:31,360 --> 00:21:34,240
our protection and then we run the

544
00:21:34,240 --> 00:21:35,280
javascript with our

545
00:21:35,280 --> 00:21:38,559
protection and this the overhead in

546
00:21:38,559 --> 00:21:41,440
ahead is how how many percentages

547
00:21:41,440 --> 00:21:44,159
increase from baseline to

548
00:21:44,159 --> 00:21:47,760
our protection version also

549
00:21:47,760 --> 00:21:51,120
the second one is uh the question is

550
00:21:51,120 --> 00:21:54,640
i think you touched based on this

551
00:21:54,640 --> 00:21:58,240
already but did you say traditional

552
00:21:58,240 --> 00:22:01,280
sast testing is not as effective for

553
00:22:01,280 --> 00:22:03,200
this

554
00:22:03,200 --> 00:22:06,559
can you clarify more some details about

555
00:22:06,559 --> 00:22:07,760
this question so

556
00:22:07,760 --> 00:22:13,840
i couldn't understand that

557
00:22:33,919 --> 00:22:38,000
so you mean the sas is a static analysis

558
00:22:38,000 --> 00:22:41,840
uh if it's correct and the real yeah

559
00:22:41,840 --> 00:22:45,360
as i told in the talk earlier the static

560
00:22:45,360 --> 00:22:47,840
analysis is kind of conservative so

561
00:22:47,840 --> 00:22:50,400
it's fine it can there's no first

562
00:22:50,400 --> 00:22:51,360
positive

563
00:22:51,360 --> 00:22:54,080
but we the aesthetic analysis also

564
00:22:54,080 --> 00:22:55,520
consider

565
00:22:55,520 --> 00:22:58,960
other huge number of objects there

566
00:22:58,960 --> 00:23:02,640
that that don't need to be protected so

567
00:23:02,640 --> 00:23:05,360
that means we are going to yeah widen

568
00:23:05,360 --> 00:23:06,480
the attack windows

569
00:23:06,480 --> 00:23:09,919
so attacker has more high probability to

570
00:23:09,919 --> 00:23:12,480
to write on that object because that

571
00:23:12,480 --> 00:23:13,280
object

572
00:23:13,280 --> 00:23:16,320
most of the objects are becomes

573
00:23:16,320 --> 00:23:18,720
writable most of the time it's going to

574
00:23:18,720 --> 00:23:20,480
be more than 50 percent of the time of

575
00:23:20,480 --> 00:23:23,840
the execution i think

576
00:23:23,840 --> 00:23:26,080
so

577
00:23:29,440 --> 00:23:31,440
uh dumbbell sticker just presentation

578
00:23:31,440 --> 00:23:33,039
how many percentage increase from

579
00:23:33,039 --> 00:23:35,120
baseline to

580
00:23:35,120 --> 00:23:38,400
protective version i think yeah

581
00:23:38,400 --> 00:23:42,159
i already answered this question

582
00:23:42,159 --> 00:23:45,200
and also

583
00:23:49,679 --> 00:23:52,960
yeah yeah i would

584
00:23:52,960 --> 00:23:54,960
i think i already answered the question

585
00:23:54,960 --> 00:23:56,240
about why

586
00:23:56,240 --> 00:23:59,360
the static analysis is not good for

587
00:23:59,360 --> 00:24:04,559
my work so

588
00:24:04,559 --> 00:24:07,520
so we can just do some kind of the value

589
00:24:07,520 --> 00:24:08,640
set analysis

590
00:24:08,640 --> 00:24:11,760
which is that we can just imagine how

591
00:24:11,760 --> 00:24:12,880
the memory structures

592
00:24:12,880 --> 00:24:16,159
looks like for each code section and

593
00:24:16,159 --> 00:24:20,240
we are yeah say this memory section

594
00:24:20,240 --> 00:24:22,880
it should be uh should be protected

595
00:24:22,880 --> 00:24:23,360
because

596
00:24:23,360 --> 00:24:26,799
it might contain the our core

597
00:24:26,799 --> 00:24:30,159
data but uh it might not contain our

598
00:24:30,159 --> 00:24:32,000
code data and

599
00:24:32,000 --> 00:24:34,400
this there are so many cases that cover

600
00:24:34,400 --> 00:24:35,120
this kind of

601
00:24:35,120 --> 00:24:38,400
situation so yeah it is they have

602
00:24:38,400 --> 00:24:41,039
fine-grained

603
00:24:43,279 --> 00:24:46,720
uh baseline oh yeah kind of yeah

604
00:24:46,720 --> 00:24:49,840
the posts are kind of built not a second

605
00:24:49,840 --> 00:24:53,520
bill second yeah i don't remember yeah

606
00:24:54,320 --> 00:24:58,000
something like that around nanosecond

607
00:24:58,000 --> 00:24:59,279
yeah

608
00:24:59,279 --> 00:25:01,840
i think

609
00:25:08,240 --> 00:25:10,240
i'm sorry that my project is really slow

610
00:25:10,240 --> 00:25:12,400
so i can see the question very

611
00:25:12,400 --> 00:25:14,960
late so i thought that there's almost no

612
00:25:14,960 --> 00:25:17,840
questions at all

613
00:25:23,360 --> 00:25:26,640
so and in addition so i use the

614
00:25:26,640 --> 00:25:28,320
benchmark which is the longest

615
00:25:28,320 --> 00:25:31,520
long spider that is the longer than uh

616
00:25:31,520 --> 00:25:33,840
the standard benchmark and this actually

617
00:25:33,840 --> 00:25:35,600
the standard benchmark

618
00:25:35,600 --> 00:25:38,480
each benchmark finishes within just

619
00:25:38,480 --> 00:25:39,279
within

620
00:25:39,279 --> 00:25:42,080
around the one second sometimes don't

621
00:25:42,080 --> 00:25:42,400
know

622
00:25:42,400 --> 00:25:45,039
around some millisecond but longer

623
00:25:45,039 --> 00:25:45,919
spider is

624
00:25:45,919 --> 00:25:48,640
around 100 times more yeah more than

625
00:25:48,640 --> 00:25:49,200
that

626
00:25:49,200 --> 00:25:52,559
and and but there's no

627
00:25:52,559 --> 00:25:54,960
difference in what kind of things are

628
00:25:54,960 --> 00:25:56,400
test tested

629
00:25:56,400 --> 00:25:59,120
so yeah

630
00:26:03,360 --> 00:26:07,200
uh losing just not browser plugin uh

631
00:26:07,200 --> 00:26:10,080
in my talk i already told you that i

632
00:26:10,080 --> 00:26:10,559
just

633
00:26:10,559 --> 00:26:13,600
modify an instrument and update the

634
00:26:13,600 --> 00:26:15,600
javascript engine codes

635
00:26:15,600 --> 00:26:19,279
by just manually just engineering

636
00:26:19,279 --> 00:26:21,600
javascript engine or using element

637
00:26:21,600 --> 00:26:24,400
instrumentation tools to automatically

638
00:26:24,400 --> 00:26:27,679
insert some unnecessary codes in

639
00:26:27,679 --> 00:26:31,679
it so if someone wants to use nojitsu

640
00:26:31,679 --> 00:26:35,039
they have to build the

641
00:26:35,039 --> 00:26:38,240
javascript engine with with elevator

642
00:26:38,240 --> 00:26:40,400
instrumentation paths that i made

643
00:26:40,400 --> 00:26:43,679
and also that they have to have

644
00:26:43,679 --> 00:26:46,320
those two version of uh versions to

645
00:26:46,320 --> 00:26:48,640
enable the javascript engine that i

646
00:26:48,640 --> 00:26:52,000
implemented so i i also

647
00:26:52,000 --> 00:26:56,240
think that uh after polishing my code

648
00:26:56,240 --> 00:26:59,760
i would yeah publish my

649
00:26:59,760 --> 00:27:02,400
the let's enable the javascript engine

650
00:27:02,400 --> 00:27:07,840
to to the public

651
00:27:18,840 --> 00:27:21,840
okay

652
00:27:22,799 --> 00:27:25,039
so

653
00:27:27,679 --> 00:27:31,200
i think until now i answer the question

654
00:27:31,200 --> 00:27:32,080
and

655
00:27:32,080 --> 00:27:36,240
there's a some time that i can

656
00:27:36,240 --> 00:27:39,520
uh talk with some missing point and

657
00:27:39,520 --> 00:27:43,120
actually the dynamic analysis

658
00:27:43,120 --> 00:27:45,520
doesn't catch every cases there are kind

659
00:27:45,520 --> 00:27:46,159
of two

660
00:27:46,159 --> 00:27:48,880
corner cases and one is for the garbage

661
00:27:48,880 --> 00:27:49,600
collection

662
00:27:49,600 --> 00:27:52,320
and the other is for kind of generating

663
00:27:52,320 --> 00:27:53,440
multiple

664
00:27:53,440 --> 00:27:56,320
copies of the function in the garbage

665
00:27:56,320 --> 00:27:57,679
collection cases

666
00:27:57,679 --> 00:28:00,480
dynamic analysis cannot catch because

667
00:28:00,480 --> 00:28:02,080
the behavior of the garbage collection

668
00:28:02,080 --> 00:28:03,279
is kind of random

669
00:28:03,279 --> 00:28:06,399
so what i did is that we just look at

670
00:28:06,399 --> 00:28:07,039
the garbage

671
00:28:07,039 --> 00:28:09,440
the code section for garbage collection

672
00:28:09,440 --> 00:28:11,520
and if the garbage collection

673
00:28:11,520 --> 00:28:14,840
tries to write some object value we just

674
00:28:14,840 --> 00:28:16,960
conservatively to open the right windows

675
00:28:16,960 --> 00:28:18,159
for them

676
00:28:18,159 --> 00:28:21,600
and also compilers sometimes

677
00:28:21,600 --> 00:28:24,240
generate a certain uh multiple function

678
00:28:24,240 --> 00:28:24,960
for

679
00:28:24,960 --> 00:28:28,000
yeah or specific function especially

680
00:28:28,000 --> 00:28:30,080
when they have some kind of template

681
00:28:30,080 --> 00:28:33,360
yeah argument and then so our dynamic

682
00:28:33,360 --> 00:28:34,080
analysis

683
00:28:34,080 --> 00:28:36,720
will just catch some of them but not all

684
00:28:36,720 --> 00:28:37,440
of them

685
00:28:37,440 --> 00:28:40,080
so we just find these cases and

686
00:28:40,080 --> 00:28:42,399
instrument our protection changes for

687
00:28:42,399 --> 00:28:47,520
all copies of the dos function and

688
00:28:51,760 --> 00:28:54,240
thank you for the comments i really

689
00:28:54,240 --> 00:28:55,360
appreciate it

690
00:28:55,360 --> 00:28:59,039
you guys like my work so

691
00:28:59,039 --> 00:29:02,159
also what should i tell you there's

692
00:29:02,159 --> 00:29:03,919
something that i need to clarify

693
00:29:03,919 --> 00:29:07,200
oh also uh i just we

694
00:29:07,200 --> 00:29:10,840
just assigned the key to specific uh

695
00:29:10,840 --> 00:29:14,159
data uh data domain but

696
00:29:14,159 --> 00:29:16,880
we separate the object into two kinds

697
00:29:16,880 --> 00:29:17,600
the

698
00:29:17,600 --> 00:29:20,240
one kind is just primitive object the

699
00:29:20,240 --> 00:29:21,039
other kind

700
00:29:21,039 --> 00:29:24,159
is uh kind of kind of

701
00:29:24,159 --> 00:29:28,559
the crucial object the reason is that

702
00:29:28,559 --> 00:29:31,600
attacker just tried to exploit some

703
00:29:31,600 --> 00:29:34,640
or usually they it's exploited some kind

704
00:29:34,640 --> 00:29:36,240
of proper

705
00:29:36,240 --> 00:29:39,120
buffer to override really critical data

706
00:29:39,120 --> 00:29:40,159
so

707
00:29:40,159 --> 00:29:42,080
objective which contains the array

708
00:29:42,080 --> 00:29:44,720
should be separate from the object from

709
00:29:44,720 --> 00:29:46,960
object which contains the critical data

710
00:29:46,960 --> 00:29:49,039
so we separate the object into two

711
00:29:49,039 --> 00:29:50,080
domain

712
00:29:50,080 --> 00:29:53,600
and actually the npk provides 16

713
00:29:53,600 --> 00:29:56,960
domains and we only use six domains so

714
00:29:56,960 --> 00:30:00,399
if we want to make our defense more

715
00:30:00,399 --> 00:30:03,200
more more fine-grained we can just

716
00:30:03,200 --> 00:30:05,120
separate the other data

717
00:30:05,120 --> 00:30:08,399
also so there's a possible way

718
00:30:08,399 --> 00:30:11,520
there are a lot of possible ways to yeah

719
00:30:11,520 --> 00:30:13,679
improve the security of the current

720
00:30:13,679 --> 00:30:24,240
version of the new system okay

721
00:30:24,240 --> 00:30:27,919
so uh i'm looking at

722
00:30:34,840 --> 00:30:37,840
questions

723
00:31:01,360 --> 00:31:05,840
yeah we can we can do that here

724
00:31:17,440 --> 00:31:21,279
okay yeah cool

725
00:31:21,279 --> 00:31:24,320
so i think there are there's there's no

726
00:31:24,320 --> 00:31:25,600
question anymore

727
00:31:25,600 --> 00:31:28,799
so yeah thank you for just attending my

728
00:31:28,799 --> 00:31:32,159
talk and i really appreciate it and

729
00:31:32,159 --> 00:31:35,760
enjoy this blackhead thoughts

730
00:31:35,960 --> 00:31:38,960
thanks

