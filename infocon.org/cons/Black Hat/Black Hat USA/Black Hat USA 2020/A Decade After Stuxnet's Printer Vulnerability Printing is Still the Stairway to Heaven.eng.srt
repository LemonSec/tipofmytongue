1
00:00:01,180 --> 00:00:14,719
[Music]

2
00:00:14,719 --> 00:00:15,120
hi

3
00:00:15,120 --> 00:00:17,039
thank you for joining our talk a decade

4
00:00:17,039 --> 00:00:19,439
after stuxnet's print of vulnerability

5
00:00:19,439 --> 00:00:21,600
printing is still the story to heaven

6
00:00:21,600 --> 00:00:24,640
first let's introduce ourselves

7
00:00:24,640 --> 00:00:26,880
my name is pele gadar i'm in the infosec

8
00:00:26,880 --> 00:00:28,560
field for more than seven years

9
00:00:28,560 --> 00:00:30,160
currently working as a senior security

10
00:00:30,160 --> 00:00:32,320
researcher at st bridge labs

11
00:00:32,320 --> 00:00:34,160
my main focus is on windows internals

12
00:00:34,160 --> 00:00:37,360
and vulnerability research

13
00:00:38,320 --> 00:00:40,960
hi my name is tomer barr i'm in the

14
00:00:40,960 --> 00:00:43,040
infosec field for more than 15 years

15
00:00:43,040 --> 00:00:44,879
currently working as a research team

16
00:00:44,879 --> 00:00:47,120
leader at safe bridge labs

17
00:00:47,120 --> 00:00:49,840
my main focus is on apt research windows

18
00:00:49,840 --> 00:00:50,879
internals

19
00:00:50,879 --> 00:00:54,320
and vulnerability research

20
00:00:57,760 --> 00:00:59,600
in this presentation we will cover the

21
00:00:59,600 --> 00:01:02,000
following we will demonstrate how a

22
00:01:02,000 --> 00:01:02,879
threat actor

23
00:01:02,879 --> 00:01:04,959
might have the ability to build the

24
00:01:04,959 --> 00:01:08,080
propagation part of stuxnet 2.0

25
00:01:08,080 --> 00:01:10,640
we will do that by walkthrough on the

26
00:01:10,640 --> 00:01:12,240
vulnerabilities which were used by

27
00:01:12,240 --> 00:01:13,360
stuxnet

28
00:01:13,360 --> 00:01:15,840
for each one we will describe the root

29
00:01:15,840 --> 00:01:16,640
cause

30
00:01:16,640 --> 00:01:19,439
describe the patch and evaluate the

31
00:01:19,439 --> 00:01:20,560
effectiveness of the

32
00:01:20,560 --> 00:01:23,600
of the patch we will continue with a

33
00:01:23,600 --> 00:01:25,600
deep walkthrough of our prince polar

34
00:01:25,600 --> 00:01:27,200
research findings

35
00:01:27,200 --> 00:01:30,479
including demos of the two zero days

36
00:01:30,479 --> 00:01:32,799
finally we will suggest a new mitigation

37
00:01:32,799 --> 00:01:34,799
for the entire arbitrary fire right

38
00:01:34,799 --> 00:01:38,799
backlash we will be focused on answering

39
00:01:38,799 --> 00:01:40,560
two fundamental questions

40
00:01:40,560 --> 00:01:42,159
is it possible to build equivalent

41
00:01:42,159 --> 00:01:43,920
propagation capabilities as toxins

42
00:01:43,920 --> 00:01:45,280
capabilities

43
00:01:45,280 --> 00:01:47,520
second questions if i fully patch my

44
00:01:47,520 --> 00:01:49,439
entire windows operating system

45
00:01:49,439 --> 00:01:53,759
am i safe now last note before we start

46
00:01:53,759 --> 00:01:55,520
we will use two symbols during our

47
00:01:55,520 --> 00:01:57,840
presentation a narrow patch

48
00:01:57,840 --> 00:01:59,600
means that the patch logic is very

49
00:01:59,600 --> 00:02:01,360
specific and it was possible to

50
00:02:01,360 --> 00:02:02,960
re-exploit it

51
00:02:02,960 --> 00:02:06,079
and secondly a regular patch means that

52
00:02:06,079 --> 00:02:07,600
it solves the problem

53
00:02:07,600 --> 00:02:10,160
and had not been bypassed until nowadays

54
00:02:10,160 --> 00:02:12,080
as much as we know

55
00:02:12,080 --> 00:02:13,920
now that we are ready let's see the

56
00:02:13,920 --> 00:02:17,920
recap and the timeline of stuxnet

57
00:02:18,000 --> 00:02:20,800
stuxnet is considered by many to be one

58
00:02:20,800 --> 00:02:22,640
of the most complex and well engineered

59
00:02:22,640 --> 00:02:23,760
computer worms

60
00:02:23,760 --> 00:02:26,080
ever seen it is believed that the

61
00:02:26,080 --> 00:02:28,800
project was developed in 2006

62
00:02:28,800 --> 00:02:30,800
and lasted four years until it was

63
00:02:30,800 --> 00:02:33,360
discovered

64
00:02:35,040 --> 00:02:40,160
so this is how hollywood imagine stuxnet

65
00:02:48,400 --> 00:02:50,879
actually i love hollywood but in real

66
00:02:50,879 --> 00:02:51,840
life

67
00:02:51,840 --> 00:02:54,319
stuxnet can be can be described by the

68
00:02:54,319 --> 00:02:56,160
following three parts

69
00:02:56,160 --> 00:02:58,080
the first part is the propagation to the

70
00:02:58,080 --> 00:02:59,599
target network by using

71
00:02:59,599 --> 00:03:02,879
three remote codec execution exploits

72
00:03:02,879 --> 00:03:04,959
and two local privileged escalation

73
00:03:04,959 --> 00:03:06,239
exploits

74
00:03:06,239 --> 00:03:08,400
the next part is the special evasion

75
00:03:08,400 --> 00:03:09,360
techniques

76
00:03:09,360 --> 00:03:12,080
which allows stuxnet to oper to operate

77
00:03:12,080 --> 00:03:13,840
under the radar

78
00:03:13,840 --> 00:03:16,319
the third part is the final payload

79
00:03:16,319 --> 00:03:19,760
delivering specifically to siemens plc

80
00:03:19,760 --> 00:03:22,959
in our opinion a decade after stuxnet

81
00:03:22,959 --> 00:03:24,640
the most interesting part is the

82
00:03:24,640 --> 00:03:26,239
propagation capabilities

83
00:03:26,239 --> 00:03:28,080
which is still relevant to almost any

84
00:03:28,080 --> 00:03:32,080
targeted attack

85
00:03:32,080 --> 00:03:34,400
let's zoom in into stuxnet propagation

86
00:03:34,400 --> 00:03:35,840
capabilities

87
00:03:35,840 --> 00:03:38,400
we will describe them one by one

88
00:03:38,400 --> 00:03:40,000
although it was a decade ago

89
00:03:40,000 --> 00:03:42,080
it's still relevant to all of us because

90
00:03:42,080 --> 00:03:43,599
according to a research

91
00:03:43,599 --> 00:03:46,879
posted in 2017 those capabilities were

92
00:03:46,879 --> 00:03:48,959
used widely after stocksnet

93
00:03:48,959 --> 00:03:51,280
for attacking a wide range of

94
00:03:51,280 --> 00:03:52,720
organization

95
00:03:52,720 --> 00:03:56,959
let's dive deeper handing over to peder

96
00:03:58,000 --> 00:04:00,239
thank you tomorrow so let's start and

97
00:04:00,239 --> 00:04:02,080
talk about the ln k vulnerability which

98
00:04:02,080 --> 00:04:03,840
was used by stuxnet

99
00:04:03,840 --> 00:04:05,760
it used it to spread via weaponized usb

100
00:04:05,760 --> 00:04:07,519
flash drives traveling between internet

101
00:04:07,519 --> 00:04:08,480
facing computers

102
00:04:08,480 --> 00:04:15,840
and internal network computers

103
00:04:16,238 --> 00:04:18,079
so the attack vector contained a crafted

104
00:04:18,079 --> 00:04:20,399
lnk file which is a shortcut file

105
00:04:20,399 --> 00:04:22,720
once it was displayed an arbitrary dll

106
00:04:22,720 --> 00:04:24,960
which was specified as the icon file

107
00:04:24,960 --> 00:04:29,759
of the lnk was executed

108
00:04:29,759 --> 00:04:31,440
here's a screenshot of a crafted lnk

109
00:04:31,440 --> 00:04:33,680
file which exploited the vulnerability

110
00:04:33,680 --> 00:04:35,120
you can observe that the lnk file

111
00:04:35,120 --> 00:04:36,880
contains the following

112
00:04:36,880 --> 00:04:39,840
the path of the cpl external file and

113
00:04:39,840 --> 00:04:40,960
the icon id

114
00:04:40,960 --> 00:04:42,960
0 which caused the code to trigger the

115
00:04:42,960 --> 00:04:44,639
execution of the dll

116
00:04:44,639 --> 00:04:48,479
every time the lnk file was displayed

117
00:04:49,360 --> 00:04:50,960
so let's take a look at the exploitation

118
00:04:50,960 --> 00:04:53,759
path and how it was patched

119
00:04:53,759 --> 00:04:55,360
the main problem was that instead of

120
00:04:55,360 --> 00:04:58,000
loading the cpl dll file as a data only

121
00:04:58,000 --> 00:04:58,560
file

122
00:04:58,560 --> 00:05:00,960
by using load library x the code

123
00:05:00,960 --> 00:05:02,800
actually called the load library w

124
00:05:02,800 --> 00:05:06,000
function and also executed the dna

125
00:05:06,000 --> 00:05:07,759
we expected the patch to replace this

126
00:05:07,759 --> 00:05:09,600
call in order to avoid execution

127
00:05:09,600 --> 00:05:13,039
but let's see what was actually happened

128
00:05:13,919 --> 00:05:15,680
so the patch added two validations in

129
00:05:15,680 --> 00:05:17,520
order to mitigate the vulnerability

130
00:05:17,520 --> 00:05:20,000
first it checked that the provided cpl

131
00:05:20,000 --> 00:05:21,840
file was on microsoft's whitelist

132
00:05:21,840 --> 00:05:24,880
and was allowed to be loaded next

133
00:05:24,880 --> 00:05:27,280
the icon id which we control would have

134
00:05:27,280 --> 00:05:28,960
been extracted and converted from a

135
00:05:28,960 --> 00:05:30,479
string

136
00:05:30,479 --> 00:05:32,800
if the id was 0 it would overwrite 0

137
00:05:32,800 --> 00:05:33,840
with -1

138
00:05:33,840 --> 00:05:37,280
meaning it wouldn't be loaded

139
00:05:37,600 --> 00:05:40,000
the patch was very specific because as

140
00:05:40,000 --> 00:05:40,720
you can see

141
00:05:40,720 --> 00:05:43,280
the load library function still existed

142
00:05:43,280 --> 00:05:44,960
meaning that if someone would have been

143
00:05:44,960 --> 00:05:46,720
able to bypass the validations

144
00:05:46,720 --> 00:05:52,080
then the cpl could have been executed

145
00:05:52,080 --> 00:05:53,440
so let's see the bypass which was

146
00:05:53,440 --> 00:05:56,560
patched five years later

147
00:05:58,319 --> 00:06:00,400
in order to bypass the patch we need to

148
00:06:00,400 --> 00:06:02,479
bypass the icon id check and transform

149
00:06:02,479 --> 00:06:04,800
it to zero

150
00:06:04,800 --> 00:06:06,479
it can be done if you will be able to

151
00:06:06,479 --> 00:06:08,479
send the minus sign as a parameter to

152
00:06:08,479 --> 00:06:09,680
str to in w

153
00:06:09,680 --> 00:06:12,479
function let's see exactly how it was

154
00:06:12,479 --> 00:06:13,840
done

155
00:06:13,840 --> 00:06:15,600
because of a type confusion between a

156
00:06:15,600 --> 00:06:17,600
white car buffer and a car buffer

157
00:06:17,600 --> 00:06:19,440
the original icon id string was

158
00:06:19,440 --> 00:06:21,840
truncated

159
00:06:22,080 --> 00:06:23,840
we can exploit it by providing a long

160
00:06:23,840 --> 00:06:26,240
enough buffer so the icon id will turn

161
00:06:26,240 --> 00:06:28,160
into the minus sign

162
00:06:28,160 --> 00:06:30,720
once str2int will return 0 as the icon

163
00:06:30,720 --> 00:06:32,400
id our arbitrary cpl

164
00:06:32,400 --> 00:06:35,840
will be executed

165
00:06:37,440 --> 00:06:40,080
the patch for this one was pretty simple

166
00:06:40,080 --> 00:06:42,639
the truncation bug was removed

167
00:06:42,639 --> 00:06:44,319
the call to load library which was the

168
00:06:44,319 --> 00:06:46,960
actual root cause wasn't changed

169
00:06:46,960 --> 00:06:48,479
that means that if there is another way

170
00:06:48,479 --> 00:06:50,720
to trigger the load cpl module function

171
00:06:50,720 --> 00:06:54,560
it would have been still vulnerable

172
00:06:55,680 --> 00:06:58,960
and apparently there was two years later

173
00:06:58,960 --> 00:07:00,840
a new vulnerability was discovered and

174
00:07:00,840 --> 00:07:02,080
patched

175
00:07:02,080 --> 00:07:04,240
it called the load cpl module function

176
00:07:04,240 --> 00:07:06,319
by using another exploitation path which

177
00:07:06,319 --> 00:07:09,440
was left unpatched

178
00:07:10,639 --> 00:07:12,560
so the patch for this one was adding the

179
00:07:12,560 --> 00:07:15,840
previous logic of a cpl whitelist

180
00:07:15,840 --> 00:07:20,560
but load library still was not replaced

181
00:07:21,360 --> 00:07:23,360
what's interesting here is that we have

182
00:07:23,360 --> 00:07:25,199
noticed that there is another last path

183
00:07:25,199 --> 00:07:26,720
to load library function

184
00:07:26,720 --> 00:07:28,400
but we haven't seen any disclosed

185
00:07:28,400 --> 00:07:31,840
vulnerability yet

186
00:07:33,039 --> 00:07:34,800
so moving to the next propagation

187
00:07:34,800 --> 00:07:36,160
capability

188
00:07:36,160 --> 00:07:37,919
next we will talk about the stuxnet's

189
00:07:37,919 --> 00:07:39,360
rpc vulnerability

190
00:07:39,360 --> 00:07:42,479
handing over to tomer

191
00:07:42,960 --> 00:07:46,080
thank you pele on 2006 three years

192
00:07:46,080 --> 00:07:48,240
before stuxnet's first known infection

193
00:07:48,240 --> 00:07:50,639
a new mumble rpc vulnerability was

194
00:07:50,639 --> 00:07:52,319
discovered and patched

195
00:07:52,319 --> 00:07:54,160
according to microsoft it was a very

196
00:07:54,160 --> 00:07:55,440
limited scoped attack

197
00:07:55,440 --> 00:07:58,479
back then but later on a very similar

198
00:07:58,479 --> 00:07:59,840
exploitation path

199
00:07:59,840 --> 00:08:02,720
was was used by both stuxnet and corfeco

200
00:08:02,720 --> 00:08:03,280
1

201
00:08:03,280 --> 00:08:05,360
which became one of the most spreadable

202
00:08:05,360 --> 00:08:07,120
warm ever seen

203
00:08:07,120 --> 00:08:09,599
rpc vulnerabilities were the main cause

204
00:08:09,599 --> 00:08:12,560
of global computer warmth since 2003.

205
00:08:12,560 --> 00:08:15,680
remember blaster so it's obvious that

206
00:08:15,680 --> 00:08:17,120
the cost of a vulnerability in this

207
00:08:17,120 --> 00:08:18,879
mechanism is huge

208
00:08:18,879 --> 00:08:21,840
let's dive into the specific details the

209
00:08:21,840 --> 00:08:23,840
rpc vulnerability root cause that will

210
00:08:23,840 --> 00:08:24,560
present

211
00:08:24,560 --> 00:08:26,720
is due to a canonical path so let's

212
00:08:26,720 --> 00:08:27,919
understand what is it

213
00:08:27,919 --> 00:08:29,599
a canonical path it's actually a pretty

214
00:08:29,599 --> 00:08:31,919
simple it gets an absolute path

215
00:08:31,919 --> 00:08:34,000
and convert it to the shortest absolute

216
00:08:34,000 --> 00:08:36,080
path in the meaning of string length

217
00:08:36,080 --> 00:08:38,479
the most common usage of canonical path

218
00:08:38,479 --> 00:08:40,399
is for textual comparison

219
00:08:40,399 --> 00:08:42,320
of two different representations of the

220
00:08:42,320 --> 00:08:45,360
same canonical path

221
00:08:46,160 --> 00:08:48,560
the original vulnerability was a type

222
00:08:48,560 --> 00:08:49,279
confusion

223
00:08:49,279 --> 00:08:51,360
which lead to a classic stack-based

224
00:08:51,360 --> 00:08:52,720
buffer overflow

225
00:08:52,720 --> 00:08:54,959
the vulnerable function was copying a

226
00:08:54,959 --> 00:08:57,839
buffer which exceed the allocated buffer

227
00:08:57,839 --> 00:09:01,040
causing memory corruption here is the

228
00:09:01,040 --> 00:09:02,399
exploitation path

229
00:09:02,399 --> 00:09:04,720
an rpc request triggered a vulnerable

230
00:09:04,720 --> 00:09:06,240
function remotely

231
00:09:06,240 --> 00:09:08,640
which lead to an out-of-bound write

232
00:09:08,640 --> 00:09:10,320
caused by wcs cat

233
00:09:10,320 --> 00:09:12,959
function please notice the rpc

234
00:09:12,959 --> 00:09:13,839
function's name

235
00:09:13,839 --> 00:09:17,519
and t net pw we will explain why it's

236
00:09:17,519 --> 00:09:21,040
important in the following slides

237
00:09:21,360 --> 00:09:23,279
the patch added a proper buffer length

238
00:09:23,279 --> 00:09:25,519
check which eliminated the original

239
00:09:25,519 --> 00:09:28,240
buffer overflow vulnerability

240
00:09:28,240 --> 00:09:30,560
two years later a newer vulnerability

241
00:09:30,560 --> 00:09:32,640
was discovered in the same exploitation

242
00:09:32,640 --> 00:09:33,440
path

243
00:09:33,440 --> 00:09:35,600
this this time it was discovered in the

244
00:09:35,600 --> 00:09:37,360
rpc wrapper function

245
00:09:37,360 --> 00:09:40,880
which is called net pr this function

246
00:09:40,880 --> 00:09:42,800
calls the original variable function

247
00:09:42,800 --> 00:09:45,680
directly remember net pw

248
00:09:45,680 --> 00:09:48,880
let's dive into the root cause so the

249
00:09:48,880 --> 00:09:50,399
root cause of the vulnerability

250
00:09:50,399 --> 00:09:52,880
is that the input path includes more

251
00:09:52,880 --> 00:09:54,560
slash dot dot slash

252
00:09:54,560 --> 00:09:56,959
cars than the number of prior directory

253
00:09:56,959 --> 00:09:58,000
entries

254
00:09:58,000 --> 00:10:00,560
this will result in gaining a control

255
00:10:00,560 --> 00:10:02,800
over the output buffer pointer

256
00:10:02,800 --> 00:10:04,880
which will point backwards on the stack

257
00:10:04,880 --> 00:10:05,839
and will trigger

258
00:10:05,839 --> 00:10:08,320
out-of-bound writing after calling the

259
00:10:08,320 --> 00:10:11,760
wcs copy this time

260
00:10:11,760 --> 00:10:14,959
so the patch ms-867

261
00:10:14,959 --> 00:10:18,079
replaced the wcs copy function with a

262
00:10:18,079 --> 00:10:19,120
safer function

263
00:10:19,120 --> 00:10:22,640
string copyworker w

264
00:10:22,800 --> 00:10:24,959
let's dive into stuxnet task scheduler

265
00:10:24,959 --> 00:10:27,440
vulnerability

266
00:10:27,440 --> 00:10:29,600
but first let's understand how the task

267
00:10:29,600 --> 00:10:30,880
scheduler worked

268
00:10:30,880 --> 00:10:33,360
the task scheduler job xml file contains

269
00:10:33,360 --> 00:10:35,120
the metadata of a job

270
00:10:35,120 --> 00:10:37,279
including which user will execute the

271
00:10:37,279 --> 00:10:38,800
job the folder

272
00:10:38,800 --> 00:10:40,959
which contains it is writable by all

273
00:10:40,959 --> 00:10:42,079
users

274
00:10:42,079 --> 00:10:43,839
to protect the integrity of the job

275
00:10:43,839 --> 00:10:46,000
configuration files and prevent user

276
00:10:46,000 --> 00:10:48,160
from modifying them task scheduler

277
00:10:48,160 --> 00:10:50,000
calculated a crc32

278
00:10:50,000 --> 00:10:53,279
checksum on each created task xml

279
00:10:53,279 --> 00:10:55,519
when it's time to start the job task

280
00:10:55,519 --> 00:10:58,399
scheduler recalculated the xml checksum

281
00:10:58,399 --> 00:11:00,880
and compare it to the original value if

282
00:11:00,880 --> 00:11:01,680
they matched

283
00:11:01,680 --> 00:11:05,040
the job executed if not it would have

284
00:11:05,040 --> 00:11:06,160
been ignored

285
00:11:06,160 --> 00:11:09,040
the clc32 algorithm is collision prone

286
00:11:09,040 --> 00:11:11,440
which may lead to data forgery

287
00:11:11,440 --> 00:11:13,680
stuxnet zero day exploited this fact by

288
00:11:13,680 --> 00:11:14,959
forging

289
00:11:14,959 --> 00:11:18,000
an xml file of a job which was executed

290
00:11:18,000 --> 00:11:20,079
as anti-authority system

291
00:11:20,079 --> 00:11:22,880
it had a custom crc32 checksum which was

292
00:11:22,880 --> 00:11:25,760
identical to the original tax xml

293
00:11:25,760 --> 00:11:28,240
therefore it has been executed as a

294
00:11:28,240 --> 00:11:29,040
system

295
00:11:29,040 --> 00:11:32,160
resulting in a local previous relation

296
00:11:32,160 --> 00:11:34,720
in the patch ms1092 microsoft

297
00:11:34,720 --> 00:11:36,880
implemented a second integrity check

298
00:11:36,880 --> 00:11:39,920
by using the sha 256 algorithm

299
00:11:39,920 --> 00:11:42,160
implemented by the compute hash function

300
00:11:42,160 --> 00:11:45,040
which is less collision prone

301
00:11:45,040 --> 00:11:47,440
moving forward nine years later a neural

302
00:11:47,440 --> 00:11:49,920
task scheduler vulnerability was found

303
00:11:49,920 --> 00:11:51,760
the vulnerability abused the backward

304
00:11:51,760 --> 00:11:53,519
compatibility feature of the task

305
00:11:53,519 --> 00:11:55,120
scheduler mechanism

306
00:11:55,120 --> 00:11:57,760
which provides the option of migrating

307
00:11:57,760 --> 00:12:00,639
all tasks from c windows task folder

308
00:12:00,639 --> 00:12:03,279
to the new task folder which is system

309
00:12:03,279 --> 00:12:04,959
32 tasks

310
00:12:04,959 --> 00:12:06,959
in order to exploit it the attacker

311
00:12:06,959 --> 00:12:09,200
would need to perform the following 4

312
00:12:09,200 --> 00:12:10,160
steps

313
00:12:10,160 --> 00:12:13,519
step 1 create a new job as a result

314
00:12:13,519 --> 00:12:16,240
an xml file would be created in the new

315
00:12:16,240 --> 00:12:17,440
tasks folder

316
00:12:17,440 --> 00:12:20,160
step 2 override the job file in the

317
00:12:20,160 --> 00:12:20,800
legacy

318
00:12:20,800 --> 00:12:23,519
tasks folder with an r link to the file

319
00:12:23,519 --> 00:12:26,959
which the attacker wishes to control

320
00:12:26,959 --> 00:12:30,320
this step is creating a new legacy task

321
00:12:30,320 --> 00:12:33,120
with the same name and finally trigger

322
00:12:33,120 --> 00:12:33,440
an

323
00:12:33,440 --> 00:12:36,639
all to new task migration over rpc

324
00:12:36,639 --> 00:12:39,200
as a result the task scheduler service

325
00:12:39,200 --> 00:12:41,040
would update the security information

326
00:12:41,040 --> 00:12:43,200
of the file which the attacker wishes to

327
00:12:43,200 --> 00:12:44,079
control

328
00:12:44,079 --> 00:12:45,680
granting the attacker full control

329
00:12:45,680 --> 00:12:47,920
privileges on it

330
00:12:47,920 --> 00:12:50,240
the attacker can now replace right to

331
00:12:50,240 --> 00:12:51,360
any file

332
00:12:51,360 --> 00:12:54,959
gaining a local private escalation

333
00:12:56,399 --> 00:12:58,399
so this is the exploitation path that

334
00:12:58,399 --> 00:12:59,519
was used

335
00:12:59,519 --> 00:13:01,120
let's see the micros how microsoft

336
00:13:01,120 --> 00:13:03,120
patched it

337
00:13:03,120 --> 00:13:05,120
the patch makes sure that the file is

338
00:13:05,120 --> 00:13:06,720
not a symbolic link

339
00:13:06,720 --> 00:13:09,200
by using two different check the first

340
00:13:09,200 --> 00:13:10,079
check

341
00:13:10,079 --> 00:13:12,000
verified that the original path is the

342
00:13:12,000 --> 00:13:14,160
final path of the file

343
00:13:14,160 --> 00:13:15,920
if it's different it means that it was

344
00:13:15,920 --> 00:13:18,399
redirected by a symbolic link

345
00:13:18,399 --> 00:13:19,920
and the second check verified that the

346
00:13:19,920 --> 00:13:22,079
number of the files ntfs links

347
00:13:22,079 --> 00:13:25,359
is not bigger than one

348
00:13:26,880 --> 00:13:28,240
okay so let's see the fourth

349
00:13:28,240 --> 00:13:34,480
vulnerability moving over to win32k

350
00:13:34,480 --> 00:13:37,040
actually there were dozens of win32k

351
00:13:37,040 --> 00:13:39,440
local pre-escalation vulnerabilities

352
00:13:39,440 --> 00:13:42,079
over the last decade here is a list of

353
00:13:42,079 --> 00:13:44,079
several options from 2020

354
00:13:44,079 --> 00:13:46,160
which can replace the original already

355
00:13:46,160 --> 00:13:47,519
patched vulnerability

356
00:13:47,519 --> 00:13:50,079
in order to rebuild the stuxnet 2.0

357
00:13:50,079 --> 00:13:51,839
propagation capabilities

358
00:13:51,839 --> 00:13:55,680
part the only capability which remained

359
00:13:55,680 --> 00:13:59,199
is the prince pooler vulnerability

360
00:14:01,760 --> 00:14:03,519
let's start to talk about our printer's

361
00:14:03,519 --> 00:14:07,040
polar research and findings

362
00:14:07,120 --> 00:14:09,600
we will start by presenting how we found

363
00:14:09,600 --> 00:14:11,600
a 20 plus year old bug

364
00:14:11,600 --> 00:14:15,600
by using 20 minutes of fuzzing

365
00:14:15,600 --> 00:14:17,360
we have noticed that each time a print

366
00:14:17,360 --> 00:14:18,639
job is being created

367
00:14:18,639 --> 00:14:21,839
it is represented by two files first

368
00:14:21,839 --> 00:14:24,959
an spl file which is simply contains the

369
00:14:24,959 --> 00:14:26,639
data to be printed

370
00:14:26,639 --> 00:14:29,199
second an shd file shadow file which

371
00:14:29,199 --> 00:14:30,880
will be focused on

372
00:14:30,880 --> 00:14:33,120
it is represented by the undocumented

373
00:14:33,120 --> 00:14:35,040
shadow file struct and contains the

374
00:14:35,040 --> 00:14:36,240
metadata

375
00:14:36,240 --> 00:14:39,040
of the print job for example printer

376
00:14:39,040 --> 00:14:39,839
name

377
00:14:39,839 --> 00:14:43,360
printer port name document name and etc

378
00:14:43,360 --> 00:14:46,399
we found that the printers folder which

379
00:14:46,399 --> 00:14:48,480
contains the shd files

380
00:14:48,480 --> 00:14:51,839
is writable by all users and

381
00:14:51,839 --> 00:14:54,720
that the shd files are being processed

382
00:14:54,720 --> 00:14:56,959
once the service is started

383
00:14:56,959 --> 00:14:59,839
so we ask ourselves what will happen if

384
00:14:59,839 --> 00:15:02,320
we'll craft our own shd file

385
00:15:02,320 --> 00:15:05,360
so we started to mutate the shd files

386
00:15:05,360 --> 00:15:08,399
and fast the service

387
00:15:08,560 --> 00:15:10,480
after 20 minutes of fuzzing we had our

388
00:15:10,480 --> 00:15:12,000
first crash

389
00:15:12,000 --> 00:15:14,000
we have managed to crush the prince

390
00:15:14,000 --> 00:15:15,279
fuller service

391
00:15:15,279 --> 00:15:18,240
by using a limited user and a crafted

392
00:15:18,240 --> 00:15:19,920
shd file

393
00:15:19,920 --> 00:15:22,240
it appeared that the code was trying to

394
00:15:22,240 --> 00:15:24,880
dereference some part of our data

395
00:15:24,880 --> 00:15:27,040
to treating it it's as a pointer to a

396
00:15:27,040 --> 00:15:28,639
security descriptor

397
00:15:28,639 --> 00:15:30,959
without any validation or sanitization

398
00:15:30,959 --> 00:15:32,000
of the data

399
00:15:32,000 --> 00:15:35,360
with provided in the shd file microsoft

400
00:15:35,360 --> 00:15:37,120
did not fix this bug

401
00:15:37,120 --> 00:15:38,959
we will show the response in the end of

402
00:15:38,959 --> 00:15:40,880
our talk

403
00:15:40,880 --> 00:15:43,360
ok demo time let's see a demo of the

404
00:15:43,360 --> 00:15:44,959
crash in the latest windows 10

405
00:15:44,959 --> 00:15:47,680
insider build

406
00:15:48,800 --> 00:15:51,519
so on the left side johnny is a limited

407
00:15:51,519 --> 00:15:52,079
user

408
00:15:52,079 --> 00:15:53,920
we can see that we are running on the

409
00:15:53,920 --> 00:15:56,320
latest windows 10 fully patched machine

410
00:15:56,320 --> 00:15:58,480
on the right the user john is

411
00:15:58,480 --> 00:15:59,600
administrator

412
00:15:59,600 --> 00:16:01,600
and it is used only for convenience to

413
00:16:01,600 --> 00:16:03,839
avoid restarts of the os instead will

414
00:16:03,839 --> 00:16:05,120
restart the service to trigger the

415
00:16:05,120 --> 00:16:06,320
vulnerability

416
00:16:06,320 --> 00:16:11,839
so we are copying the crafted shd file

417
00:16:11,839 --> 00:16:23,839
to the printer's puller directory

418
00:16:24,160 --> 00:16:26,079
and now we will trigger the

419
00:16:26,079 --> 00:16:28,240
vulnerability by

420
00:16:28,240 --> 00:16:37,440
restarting the service

421
00:16:37,440 --> 00:16:41,120
and listing the printers

422
00:16:41,440 --> 00:16:50,160
via wmi command

423
00:16:50,160 --> 00:16:52,560
as we can see in pokemon we crash the

424
00:16:52,560 --> 00:16:54,959
service

425
00:17:02,160 --> 00:17:05,760
we will copy the shd file and the spl

426
00:17:05,760 --> 00:17:06,799
file

427
00:17:06,799 --> 00:17:10,480
to the printer's spoiler folder

428
00:17:10,480 --> 00:17:12,720
and we will use john is an administrator

429
00:17:12,720 --> 00:17:14,880
for convenience reasons

430
00:17:14,880 --> 00:17:18,240
to avoid os restart and instead we will

431
00:17:18,240 --> 00:17:33,760
restart the spoiler service instead

432
00:17:33,760 --> 00:17:39,919
and after listing the printers

433
00:17:45,600 --> 00:18:01,840
we can see that the service is crashed

434
00:18:06,559 --> 00:18:09,120
thank you tomorrow so the crash was cool

435
00:18:09,120 --> 00:18:10,960
but we wanted more

436
00:18:10,960 --> 00:18:12,559
let's talk on how we got local previous

437
00:18:12,559 --> 00:18:14,720
escalation twice one of them is still

438
00:18:14,720 --> 00:18:17,200
zero day

439
00:18:17,200 --> 00:18:18,559
so in order to understand the next

440
00:18:18,559 --> 00:18:20,480
vulnerabilities we found we will dive

441
00:18:20,480 --> 00:18:21,679
into the printing process

442
00:18:21,679 --> 00:18:24,880
in the windows os the print spooler is

443
00:18:24,880 --> 00:18:26,400
the service which is responsible for

444
00:18:26,400 --> 00:18:28,080
creating and handling print jobs in the

445
00:18:28,080 --> 00:18:29,520
windows os

446
00:18:29,520 --> 00:18:31,679
accessing the prints bottle is possible

447
00:18:31,679 --> 00:18:33,760
remotely for example using a shelled

448
00:18:33,760 --> 00:18:34,799
printer

449
00:18:34,799 --> 00:18:37,360
and locally we will focus on the local

450
00:18:37,360 --> 00:18:38,080
scenario

451
00:18:38,080 --> 00:18:40,080
more specifically we will focus on the

452
00:18:40,080 --> 00:18:42,160
fact that the spooler allows the user to

453
00:18:42,160 --> 00:18:43,120
print to a file

454
00:18:43,120 --> 00:18:45,919
by using a virtual printer this is an

455
00:18:45,919 --> 00:18:47,679
important part which i'll further slide

456
00:18:47,679 --> 00:18:50,160
rely on

457
00:18:51,360 --> 00:18:53,280
a quick brief on the flow of printing to

458
00:18:53,280 --> 00:18:55,440
a file scenario

459
00:18:55,440 --> 00:18:57,679
user sends some data to be printed using

460
00:18:57,679 --> 00:18:58,559
an application

461
00:18:58,559 --> 00:19:01,679
for example notepad and specifies which

462
00:19:01,679 --> 00:19:03,919
file he would like to print to

463
00:19:03,919 --> 00:19:06,160
it means that the data will be printed

464
00:19:06,160 --> 00:19:07,840
which means will be written to a file

465
00:19:07,840 --> 00:19:09,280
using a virtual printer

466
00:19:09,280 --> 00:19:11,280
instead of printing of instead of

467
00:19:11,280 --> 00:19:13,840
printer to a real printer

468
00:19:13,840 --> 00:19:16,720
the spoiler service spool sv.exe which

469
00:19:16,720 --> 00:19:18,000
is the rpc server

470
00:19:18,000 --> 00:19:21,280
gets the request later on

471
00:19:21,280 --> 00:19:22,960
the local print provider which is

472
00:19:22,960 --> 00:19:25,120
responsible for printing data to files

473
00:19:25,120 --> 00:19:27,039
will print the data into the file which

474
00:19:27,039 --> 00:19:30,320
was specified by the user

475
00:19:31,919 --> 00:19:33,520
let's start with the first principle of

476
00:19:33,520 --> 00:19:36,559
vulnerability which was used in stoxnet

477
00:19:36,559 --> 00:19:38,000
this is the flow of the vulnerability

478
00:19:38,000 --> 00:19:39,600
which was providing a remote code

479
00:19:39,600 --> 00:19:40,880
execution

480
00:19:40,880 --> 00:19:42,640
the vulnerability exploited the fact

481
00:19:42,640 --> 00:19:44,240
that the spoiler allows the user

482
00:19:44,240 --> 00:19:47,200
to print to a file on a remote computer

483
00:19:47,200 --> 00:19:48,880
on behalf of system

484
00:19:48,880 --> 00:19:51,280
and has printed the malicious file to

485
00:19:51,280 --> 00:19:52,320
system 32

486
00:19:52,320 --> 00:19:55,280
which was a mod file

487
00:19:56,640 --> 00:19:59,679
so it was patched on 2010. the patch

488
00:19:59,679 --> 00:20:01,919
included two validations

489
00:20:01,919 --> 00:20:04,400
a check if the printing job was

490
00:20:04,400 --> 00:20:06,480
dispatched locally on the machine itself

491
00:20:06,480 --> 00:20:09,679
or remotely if remotely it will override

492
00:20:09,679 --> 00:20:11,520
and ignore any requested file write

493
00:20:11,520 --> 00:20:13,600
operation

494
00:20:13,600 --> 00:20:15,600
second it will check that the user have

495
00:20:15,600 --> 00:20:17,200
right permissions to the path of the

496
00:20:17,200 --> 00:20:18,080
file

497
00:20:18,080 --> 00:20:19,840
that he wanted to print to before it's

498
00:20:19,840 --> 00:20:22,480
writing to it

499
00:20:23,679 --> 00:20:25,679
moving forward to 2020 we have found a

500
00:20:25,679 --> 00:20:27,840
way to bypass the patch locally using

501
00:20:27,840 --> 00:20:30,960
almost the same exploitation path

502
00:20:30,960 --> 00:20:32,799
the first check bypass is obvious

503
00:20:32,799 --> 00:20:34,000
because we shifted from

504
00:20:34,000 --> 00:20:36,320
a local from a remote code execution to

505
00:20:36,320 --> 00:20:38,720
a local previous escalation

506
00:20:38,720 --> 00:20:40,799
the second check needed some work so

507
00:20:40,799 --> 00:20:42,400
let's dive into our print spooler

508
00:20:42,400 --> 00:20:44,880
research

509
00:20:45,520 --> 00:20:47,360
we found that a limited user can do some

510
00:20:47,360 --> 00:20:49,120
interesting operations without any

511
00:20:49,120 --> 00:20:50,240
elevation required

512
00:20:50,240 --> 00:20:52,559
by just using partial commands for

513
00:20:52,559 --> 00:20:53,600
example

514
00:20:53,600 --> 00:20:55,440
adding a virtual printer which prints to

515
00:20:55,440 --> 00:20:56,640
a local printable

516
00:20:56,640 --> 00:20:59,679
meaning it will print to a file and

517
00:20:59,679 --> 00:21:01,760
specifying a path of the file which he

518
00:21:01,760 --> 00:21:03,200
doesn't have access to

519
00:21:03,200 --> 00:21:06,240
for example system 32 okay

520
00:21:06,240 --> 00:21:07,919
interesting so does that mean that a

521
00:21:07,919 --> 00:21:09,919
user can just print any data he would

522
00:21:09,919 --> 00:21:11,760
like to system32

523
00:21:11,760 --> 00:21:15,520
let's check so apparently no

524
00:21:15,520 --> 00:21:17,360
or that's what we thought as we

525
00:21:17,360 --> 00:21:19,840
mentioned before the ms-1061 patch has

526
00:21:19,840 --> 00:21:21,840
added a function which validates

527
00:21:21,840 --> 00:21:23,520
if the user can write to the path he

528
00:21:23,520 --> 00:21:25,520
asked to print to which means that the

529
00:21:25,520 --> 00:21:27,360
user won't be able to print data to

530
00:21:27,360 --> 00:21:29,120
system 32

531
00:21:29,120 --> 00:21:33,199
so let's understand how can we bypass it

532
00:21:36,480 --> 00:21:38,640
every time the principle initializes it

533
00:21:38,640 --> 00:21:40,400
processes the shd files which are

534
00:21:40,400 --> 00:21:41,919
waiting to be spooled

535
00:21:41,919 --> 00:21:45,039
in the same directory for every user

536
00:21:45,039 --> 00:21:47,520
a limited user can create an shd file

537
00:21:47,520 --> 00:21:49,520
which represents a print job

538
00:21:49,520 --> 00:21:51,360
which prints to any path for example

539
00:21:51,360 --> 00:21:53,360
system32

540
00:21:53,360 --> 00:21:55,600
once the principal restarts it will

541
00:21:55,600 --> 00:21:57,120
process the shd file

542
00:21:57,120 --> 00:21:59,600
without being impersonated or aware of

543
00:21:59,600 --> 00:22:01,440
who created the print job

544
00:22:01,440 --> 00:22:03,120
therefore it will operate as

545
00:22:03,120 --> 00:22:04,559
anti-authority system

546
00:22:04,559 --> 00:22:06,799
and will print the data to any file as

547
00:22:06,799 --> 00:22:08,240
anti-authority system

548
00:22:08,240 --> 00:22:10,159
resulting with allowing the user to

549
00:22:10,159 --> 00:22:13,440
write data to any file on the system

550
00:22:13,440 --> 00:22:15,280
and gaining an arbitrary far right and a

551
00:22:15,280 --> 00:22:18,559
local previous escalation

552
00:22:19,200 --> 00:22:21,120
this was actually the bypass of the

553
00:22:21,120 --> 00:22:22,480
second patch validation

554
00:22:22,480 --> 00:22:24,320
specifically for the validate output

555
00:22:24,320 --> 00:22:26,880
file function because this folder is

556
00:22:26,880 --> 00:22:28,799
running as anti-authority system

557
00:22:28,799 --> 00:22:30,559
it has writing permissions to almost

558
00:22:30,559 --> 00:22:32,080
every file on the file system

559
00:22:32,080 --> 00:22:35,840
so the check will pass successfully

560
00:22:36,080 --> 00:22:37,679
so let's see a demo of the first local

561
00:22:37,679 --> 00:22:39,280
period escalation we found in the

562
00:22:39,280 --> 00:22:41,840
principle

563
00:22:44,159 --> 00:22:45,919
as you can see we are running under the

564
00:22:45,919 --> 00:22:47,600
context of a limited user

565
00:22:47,600 --> 00:22:50,880
we are using a full windows 10 machine

566
00:22:50,880 --> 00:22:52,880
from march before our vulnerability was

567
00:22:52,880 --> 00:22:54,640
patched

568
00:22:54,640 --> 00:22:56,159
we're using johnny which is a limited

569
00:22:56,159 --> 00:22:58,480
user

570
00:23:00,320 --> 00:23:02,159
so first we'll use powershell in order

571
00:23:02,159 --> 00:23:04,480
to do the following

572
00:23:04,480 --> 00:23:07,600
stuff we will add a printed port which

573
00:23:07,600 --> 00:23:11,360
allows us to print to system 32

574
00:23:11,840 --> 00:23:13,360
we will add the printer driver which

575
00:23:13,360 --> 00:23:16,720
allows us to create a virtual printer

576
00:23:16,720 --> 00:23:19,360
and finally we will add a printer which

577
00:23:19,360 --> 00:23:20,159
is using

578
00:23:20,159 --> 00:23:23,679
the system 32 port

579
00:23:23,679 --> 00:23:26,000
next we will use a pre-crafted shd file

580
00:23:26,000 --> 00:23:27,840
which represents a print job which

581
00:23:27,840 --> 00:23:29,520
sprints to system 32

582
00:23:29,520 --> 00:23:31,440
and we will use a dll payload which we

583
00:23:31,440 --> 00:23:33,679
would like to write to system 32

584
00:23:33,679 --> 00:23:36,640
we will rename it to spl and we will

585
00:23:36,640 --> 00:23:39,200
copy it by using our limited user

586
00:23:39,200 --> 00:23:41,279
to the spool printers folder in system

587
00:23:41,279 --> 00:23:45,600
32 which is writable by all users

588
00:23:48,559 --> 00:23:51,679
now before we will restart the vm

589
00:23:51,679 --> 00:23:53,520
i want you to notice that there are only

590
00:23:53,520 --> 00:23:55,360
three users in the

591
00:23:55,360 --> 00:23:57,760
computer administrator johnny and john

592
00:23:57,760 --> 00:23:58,960
and that the following

593
00:23:58,960 --> 00:24:02,240
file in windows 32 which names exploited

594
00:24:02,240 --> 00:24:05,760
txt does not exist

595
00:24:05,760 --> 00:24:08,320
next let's restart the vm by our limited

596
00:24:08,320 --> 00:24:10,080
user in order to

597
00:24:10,080 --> 00:24:19,760
the principal will process our shd file

598
00:24:19,760 --> 00:24:22,720
once we are logged in back into johnny

599
00:24:22,720 --> 00:24:23,520
user

600
00:24:23,520 --> 00:24:25,120
the principal or service will process

601
00:24:25,120 --> 00:24:27,360
our http file we'll treat it

602
00:24:27,360 --> 00:24:29,440
as a print job and we'll write our file

603
00:24:29,440 --> 00:24:31,120
to system 32.

604
00:24:31,120 --> 00:24:34,000
next windows service will execute our

605
00:24:34,000 --> 00:24:35,120
dll

606
00:24:35,120 --> 00:24:37,279
and as you can see we have been able to

607
00:24:37,279 --> 00:24:39,840
add a new administrator

608
00:24:39,840 --> 00:24:44,240
to the computer and we was able to

609
00:24:44,240 --> 00:24:46,120
write a file to system32 name

610
00:24:46,120 --> 00:24:48,320
exploited.txt

611
00:24:48,320 --> 00:24:50,320
now let's verify that we were actually

612
00:24:50,320 --> 00:24:53,520
added an administrator

613
00:24:54,080 --> 00:24:55,679
we will open a command prompt which is

614
00:24:55,679 --> 00:24:57,679
elevated and we will just log in

615
00:24:57,679 --> 00:25:01,200
using our new administrator user

616
00:25:01,200 --> 00:25:03,919
as you can see

617
00:25:07,600 --> 00:25:09,840
the administrators group contains our

618
00:25:09,840 --> 00:25:11,919
user

619
00:25:11,919 --> 00:25:13,679
so we've been able to gain local

620
00:25:13,679 --> 00:25:15,520
previous escalation using the principal

621
00:25:15,520 --> 00:25:17,918
service

622
00:25:18,720 --> 00:25:20,559
so now that we couple them all together

623
00:25:20,559 --> 00:25:29,840
we reach our destination

624
00:25:32,960 --> 00:25:34,880
we have found equivalent capabilities to

625
00:25:34,880 --> 00:25:37,760
allegedly build stuxnet 2.0 propagation

626
00:25:37,760 --> 00:25:38,640
pop

627
00:25:38,640 --> 00:25:43,360
but our work is not over yet

628
00:25:43,360 --> 00:25:45,120
after the first vulnerability we found

629
00:25:45,120 --> 00:25:46,480
was patched we

630
00:25:46,480 --> 00:25:48,720
been able to re-exploit it and we

631
00:25:48,720 --> 00:25:50,760
credited with cve 2020

632
00:25:50,760 --> 00:25:54,640
1337 microsoft are currently working on

633
00:25:54,640 --> 00:25:56,080
a fix which will be deployed

634
00:25:56,080 --> 00:25:58,559
in the upcoming patch tuesday therefore

635
00:25:58,559 --> 00:26:00,240
we can't release any technical details

636
00:26:00,240 --> 00:26:01,360
right now

637
00:26:01,360 --> 00:26:02,960
we will publish it once the patch will

638
00:26:02,960 --> 00:26:04,559
be deployed but

639
00:26:04,559 --> 00:26:11,840
let's see a demo

640
00:26:15,039 --> 00:26:17,120
so as you can see we're running under

641
00:26:17,120 --> 00:26:20,799
the context of johnny which is a limited

642
00:26:22,840 --> 00:26:24,320
user

643
00:26:24,320 --> 00:26:29,520
we're running under a fully patched vm

644
00:26:32,960 --> 00:26:34,960
under the context of johnny we will

645
00:26:34,960 --> 00:26:38,000
execute our exploit

646
00:26:38,000 --> 00:26:40,559
which will bypass the patch of cve 2020

647
00:26:40,559 --> 00:26:43,360
1048

648
00:26:46,640 --> 00:26:49,440
after we crafted our shd file we will

649
00:26:49,440 --> 00:26:50,720
copy

650
00:26:50,720 --> 00:26:55,520
to the principal directory

651
00:26:55,520 --> 00:26:58,000
but first you can notice that the

652
00:26:58,000 --> 00:26:59,120
explore.txt file

653
00:26:59,120 --> 00:27:00,799
does not exist and that we have only

654
00:27:00,799 --> 00:27:03,279
three users as before

655
00:27:03,279 --> 00:27:07,840
now let's restart the vm

656
00:27:11,440 --> 00:27:13,520
once it was initialized we will log in

657
00:27:13,520 --> 00:27:17,440
again to our limited user journey

658
00:27:18,399 --> 00:27:20,960
now as before the principal will process

659
00:27:20,960 --> 00:27:22,559
our shd file

660
00:27:22,559 --> 00:27:24,799
and we'll print the data to system 32

661
00:27:24,799 --> 00:27:27,279
which is our payload which is a dll file

662
00:27:27,279 --> 00:27:29,760
our dll file will be loaded into an

663
00:27:29,760 --> 00:27:30,559
elevated

664
00:27:30,559 --> 00:27:32,799
anti-authority system service and we

665
00:27:32,799 --> 00:27:35,840
will gain call execution

666
00:27:40,799 --> 00:27:43,760
now let's try and find the exploited.txt

667
00:27:43,760 --> 00:27:45,279
file as you can see

668
00:27:45,279 --> 00:27:47,840
we write the data to system 32 and we

669
00:27:47,840 --> 00:27:49,440
have been able to add an administrator

670
00:27:49,440 --> 00:27:49,919
user

671
00:27:49,919 --> 00:27:53,039
once again to the vm let's write

672
00:27:53,039 --> 00:27:56,879
let's execute a command prompt which is

673
00:28:00,840 --> 00:28:02,960
elevated

674
00:28:02,960 --> 00:28:04,559
and let's log in using our new

675
00:28:04,559 --> 00:28:07,520
administrator user

676
00:28:08,559 --> 00:28:10,480
as you can see we've gained a local

677
00:28:10,480 --> 00:28:11,760
preview escalation

678
00:28:11,760 --> 00:28:13,120
and the code execution using the

679
00:28:13,120 --> 00:28:15,200
principler once again after the first

680
00:28:15,200 --> 00:28:18,320
vulnerability was patched

681
00:28:18,799 --> 00:28:21,840
handing over to tomer

682
00:28:22,960 --> 00:28:27,039
wow one two three seven that's awesome

683
00:28:27,039 --> 00:28:30,159
so going back to our second question

684
00:28:30,159 --> 00:28:32,080
we would like to propose an additional

685
00:28:32,080 --> 00:28:33,279
possible solution

686
00:28:33,279 --> 00:28:36,080
as a second level for patching we

687
00:28:36,080 --> 00:28:36,880
believe

688
00:28:36,880 --> 00:28:39,679
in alert security mitigation approach so

689
00:28:39,679 --> 00:28:41,360
we reported to msrc

690
00:28:41,360 --> 00:28:44,640
on each vulnerability we found

691
00:28:44,640 --> 00:28:48,080
but we still believe it's not enough

692
00:28:48,080 --> 00:28:50,240
so we develop a poc for real time

693
00:28:50,240 --> 00:28:53,520
prevention of the attack

694
00:28:53,919 --> 00:28:55,840
the main root cause of the arbitrary

695
00:28:55,840 --> 00:28:57,200
phyllite backlash

696
00:28:57,200 --> 00:28:58,640
in the context of local privilege

697
00:28:58,640 --> 00:29:01,039
escalation is the fact that a limited

698
00:29:01,039 --> 00:29:01,679
user

699
00:29:01,679 --> 00:29:04,159
is allowed to write directly to the

700
00:29:04,159 --> 00:29:06,000
following location

701
00:29:06,000 --> 00:29:08,000
this is dangerous and can be exploited

702
00:29:08,000 --> 00:29:09,039
very easily

703
00:29:09,039 --> 00:29:10,799
and we found that it's actually not

704
00:29:10,799 --> 00:29:13,440
really needed for the regular use

705
00:29:13,440 --> 00:29:15,520
today we will release a mini filter

706
00:29:15,520 --> 00:29:17,279
driver which restricts

707
00:29:17,279 --> 00:29:19,279
any far rights operation by a limited

708
00:29:19,279 --> 00:29:21,200
user to some of this location

709
00:29:21,200 --> 00:29:25,120
as a poc this mitigation proposal is not

710
00:29:25,120 --> 00:29:27,520
specific to the spurs vulnerabilities

711
00:29:27,520 --> 00:29:29,440
and can be used as a template for

712
00:29:29,440 --> 00:29:31,279
mitigating the arbitrary far-right

713
00:29:31,279 --> 00:29:32,640
backlash

714
00:29:32,640 --> 00:29:35,679
please treat the driver as a poc and be

715
00:29:35,679 --> 00:29:36,320
careful

716
00:29:36,320 --> 00:29:38,880
not to execute it in production system

717
00:29:38,880 --> 00:29:40,399
before validating it

718
00:29:40,399 --> 00:29:45,279
for false positive let's see at the end

719
00:29:46,399 --> 00:29:49,120
okay so this time we are running on

720
00:29:49,120 --> 00:29:50,399
windows 10 rs1

721
00:29:50,399 --> 00:29:52,960
an older version without the patch for

722
00:29:52,960 --> 00:29:55,039
the vulnerability we were going to use

723
00:29:55,039 --> 00:29:56,880
and as usual we are running as joining a

724
00:29:56,880 --> 00:29:59,679
limited user

725
00:30:02,559 --> 00:30:04,799
let's make sure that our driver is

726
00:30:04,799 --> 00:30:09,840
loaded to memory

727
00:30:13,600 --> 00:30:16,720
and now we'll present that

728
00:30:16,720 --> 00:30:23,840
a regular usage of printing is allowed

729
00:30:28,559 --> 00:30:31,360
so our driver will examine the file

730
00:30:31,360 --> 00:30:33,919
right of the spl and shd file

731
00:30:33,919 --> 00:30:36,399
and we'll allow it we can see that there

732
00:30:36,399 --> 00:30:38,000
are two files

733
00:30:38,000 --> 00:30:39,840
in the printer's spooler folder with

734
00:30:39,840 --> 00:30:51,840
size which is not zero

735
00:30:55,440 --> 00:30:58,720
and now let's copy

736
00:30:58,720 --> 00:31:02,559
the shd and spl file

737
00:31:02,559 --> 00:31:06,559
to the printer's puller directly

738
00:31:07,279 --> 00:31:10,799
now actually our driver

739
00:31:10,799 --> 00:31:12,559
examined the right and blocked it you

740
00:31:12,559 --> 00:31:13,840
can see that the files

741
00:31:13,840 --> 00:31:19,840
are have zero size

742
00:31:23,200 --> 00:31:26,640
let's demonstrate an ele

743
00:31:26,640 --> 00:31:28,720
let's demonstrate a task scheduler

744
00:31:28,720 --> 00:31:30,480
exploit this is a public exploit and we

745
00:31:30,480 --> 00:31:32,000
can see that our

746
00:31:32,000 --> 00:31:36,320
driver blocked the right

747
00:31:38,480 --> 00:31:41,039
so for microsoft's response for the

748
00:31:41,039 --> 00:31:43,600
spoolers local privilege escalation

749
00:31:43,600 --> 00:31:47,760
the additional vector for cve 2020 1048

750
00:31:47,760 --> 00:31:50,880
will be addressed in august 2020 as cve

751
00:31:50,880 --> 00:31:51,799
2020

752
00:31:51,799 --> 00:31:54,880
13337 and for the spoiler denial of

753
00:31:54,880 --> 00:31:56,000
service

754
00:31:56,000 --> 00:31:58,000
the technique results in a local denial

755
00:31:58,000 --> 00:32:00,480
of service which doesn't meet microsoft

756
00:32:00,480 --> 00:32:01,600
servicing bar

757
00:32:01,600 --> 00:32:05,039
for security updates we would like to

758
00:32:05,039 --> 00:32:06,880
give credit for the following people for

759
00:32:06,880 --> 00:32:08,000
researching similar

760
00:32:08,000 --> 00:32:11,120
areas alex unesco and jaden sophia

761
00:32:11,120 --> 00:32:16,399
dave weinstein it acker and jingoa kia

762
00:32:16,399 --> 00:32:20,240
today we release our repository

763
00:32:20,240 --> 00:32:23,120
which includes includes an expert poc

764
00:32:23,120 --> 00:32:23,840
for cv

765
00:32:23,840 --> 00:32:26,960
2020 1048 and

766
00:32:26,960 --> 00:32:30,080
an exploit poc for the zero day

767
00:32:30,080 --> 00:32:31,760
denial of service of the school of

768
00:32:31,760 --> 00:32:33,279
service

769
00:32:33,279 --> 00:32:35,519
the the driver for the arbitrary

770
00:32:35,519 --> 00:32:37,279
far-right mitigation

771
00:32:37,279 --> 00:32:39,840
and in a few days on august 12 we will

772
00:32:39,840 --> 00:32:40,480
release

773
00:32:40,480 --> 00:32:43,279
the cve 2020 one two three seven the

774
00:32:43,279 --> 00:32:45,120
super lead exploit poc

775
00:32:45,120 --> 00:32:48,639
please check our repository

776
00:32:49,679 --> 00:32:52,159
thank you for joining us and let's go

777
00:32:52,159 --> 00:32:52,960
over for the

778
00:32:52,960 --> 00:32:56,000
q a all right so thank you everyone for

779
00:32:56,000 --> 00:32:57,279
joining us we'll take

780
00:32:57,279 --> 00:33:00,399
questions now uh so first jamie butler

781
00:33:00,399 --> 00:33:00,880
asked

782
00:33:00,880 --> 00:33:02,559
do you need to restart the service or

783
00:33:02,559 --> 00:33:04,320
can you just enumerate the pre-jobs or

784
00:33:04,320 --> 00:33:05,519
something

785
00:33:05,519 --> 00:33:07,679
so the answer is you need to restart the

786
00:33:07,679 --> 00:33:09,120
service in order to trigger the

787
00:33:09,120 --> 00:33:10,559
vulnerable function

788
00:33:10,559 --> 00:33:12,159
but once you restart the service you

789
00:33:12,159 --> 00:33:14,080
will need to trigger

790
00:33:14,080 --> 00:33:16,320
the vulnerable function but we found a

791
00:33:16,320 --> 00:33:17,760
way we just triggered the

792
00:33:17,760 --> 00:33:20,640
rpc request so you definitely need to

793
00:33:20,640 --> 00:33:22,159
restart the service and then

794
00:33:22,159 --> 00:33:24,000
you just found walk around and enumerate

795
00:33:24,000 --> 00:33:26,640
the three jobs

796
00:33:27,679 --> 00:33:39,840
any more questions

797
00:33:52,799 --> 00:33:54,880
here of course we will provide a link to

798
00:33:54,880 --> 00:33:56,880
the driver poc it's in our

799
00:33:56,880 --> 00:34:00,240
safe bridge repository

800
00:34:00,399 --> 00:34:02,640
we will upload it in a couple of minutes

801
00:34:02,640 --> 00:34:06,240
once the presentation will be changed

802
00:34:06,240 --> 00:34:09,039
any more questions

803
00:34:17,440 --> 00:34:20,480
so ricardo the link to the saybridge

804
00:34:20,480 --> 00:34:21,679
labs

805
00:34:21,679 --> 00:34:23,440
github repository you can google

806
00:34:23,440 --> 00:34:25,199
savebridge labs it's this fuller

807
00:34:25,199 --> 00:34:26,239
repository

808
00:34:26,239 --> 00:34:28,480
and we'll also provide it in the in the

809
00:34:28,480 --> 00:34:30,159
slides itself

810
00:34:30,159 --> 00:34:33,040
and samuel the workaround that we found

811
00:34:33,040 --> 00:34:35,280
for restarting the services of course

812
00:34:35,280 --> 00:34:38,800
just restart the computer and

813
00:34:38,800 --> 00:34:41,199
in the presentation of the crash in the

814
00:34:41,199 --> 00:34:42,719
plc of the crash we just

815
00:34:42,719 --> 00:34:45,440
use them limited and elevated user in

816
00:34:45,440 --> 00:34:48,000
order to restart just to make it faster

817
00:34:48,000 --> 00:34:50,239
but at the limited user you will just

818
00:34:50,239 --> 00:34:53,040
restart the vm

819
00:34:59,839 --> 00:35:02,160
so there is a question about the false

820
00:35:02,160 --> 00:35:04,240
positive that we are seeing in our

821
00:35:04,240 --> 00:35:06,400
mini filters so actually we haven't seen

822
00:35:06,400 --> 00:35:08,400
uh many false positives

823
00:35:08,400 --> 00:35:11,200
or any actually but we haven't tested it

824
00:35:11,200 --> 00:35:11,760
a lot

825
00:35:11,760 --> 00:35:16,400
in many systems with variant

826
00:35:16,400 --> 00:35:19,359
with multiple settings so we encourage

827
00:35:19,359 --> 00:35:20,480
people to test it

828
00:35:20,480 --> 00:35:23,839
and we believe it will be able to

829
00:35:23,839 --> 00:35:28,400
prevent some future zero days

830
00:35:28,640 --> 00:35:31,599
so ricardo asked after this new cv patch

831
00:35:31,599 --> 00:35:33,119
do you foresee any possible exploit

832
00:35:33,119 --> 00:35:35,440
coming out using similar pros

833
00:35:35,440 --> 00:35:38,720
actually we don't know we'll wait

834
00:35:38,720 --> 00:35:41,920
for the patch to see and

835
00:35:41,920 --> 00:35:45,839
so we hope not

836
00:35:48,240 --> 00:35:50,480
and we'll make the slides available and

837
00:35:50,480 --> 00:35:51,440
we will upload them

838
00:35:51,440 --> 00:35:53,200
and blanket will upload them at the end

839
00:35:53,200 --> 00:35:54,640
of the day and we will upload them to

840
00:35:54,640 --> 00:35:59,839
github repository as well

841
00:36:00,720 --> 00:36:02,320
there's about four minutes left for you

842
00:36:02,320 --> 00:36:04,480
guys

843
00:36:07,680 --> 00:36:10,640
so willam asked

844
00:36:11,440 --> 00:36:13,280
the principal print the file is empty

845
00:36:13,280 --> 00:36:14,640
system because you crashed the spoiler

846
00:36:14,640 --> 00:36:16,079
and it lost track of who the original

847
00:36:16,079 --> 00:36:17,280
user was

848
00:36:17,280 --> 00:36:20,800
so it's almost accurate uh

849
00:36:20,800 --> 00:36:23,200
so the principal doesn't know who sent

850
00:36:23,200 --> 00:36:25,200
the printing who wrote the shd file so

851
00:36:25,200 --> 00:36:26,000
it worked as

852
00:36:26,000 --> 00:36:27,760
system but it does not relate to the

853
00:36:27,760 --> 00:36:29,200
fact that we crashed it

854
00:36:29,200 --> 00:36:32,640
the crash was a different plc and

855
00:36:32,640 --> 00:36:34,640
the elevation of privilege was because

856
00:36:34,640 --> 00:36:36,560
we restarted the computer

857
00:36:36,560 --> 00:36:38,640
so he didn't know who initiated the

858
00:36:38,640 --> 00:36:39,680
print

859
00:36:39,680 --> 00:36:43,279
who pasted the shd file

860
00:36:45,040 --> 00:36:48,320
so actually we use the custom

861
00:36:48,320 --> 00:36:50,800
fuzzer in order to file the service now

862
00:36:50,800 --> 00:36:51,680
nothing

863
00:36:51,680 --> 00:36:55,280
that is already known we just

864
00:36:55,280 --> 00:36:59,599
wrote our own python script in order to

865
00:37:06,839 --> 00:37:08,720
use

866
00:37:08,720 --> 00:37:10,720
and uh with application whitelisting

867
00:37:10,720 --> 00:37:12,400
prevent this exploit

868
00:37:12,400 --> 00:37:16,480
uh actually i'm not sure

869
00:37:16,480 --> 00:37:19,920
uh you understand yeah but i think that

870
00:37:19,920 --> 00:37:22,160
the most important thing is to prevent

871
00:37:22,160 --> 00:37:25,040
something that you don't know beforehand

872
00:37:25,040 --> 00:37:26,240
so

873
00:37:26,240 --> 00:37:29,040
our driver is taking this approach and

874
00:37:29,040 --> 00:37:30,320
it doesn't need to know

875
00:37:30,320 --> 00:37:32,800
which specific vulnerability is being

876
00:37:32,800 --> 00:37:33,599
exploited

877
00:37:33,599 --> 00:37:36,400
it just mitigates the root cause so it's

878
00:37:36,400 --> 00:37:36,800
a

879
00:37:36,800 --> 00:37:39,359
better approach

880
00:37:42,560 --> 00:37:44,240
we don't have any plan to publish the

881
00:37:44,240 --> 00:37:46,480
custom father we will think about it

882
00:37:46,480 --> 00:37:51,839
but we didn't plan to

883
00:37:55,599 --> 00:37:57,119
can you define what it means to file

884
00:37:57,119 --> 00:37:59,920
something so basically fuzzing is a

885
00:37:59,920 --> 00:38:03,119
very big topic of course but uh

886
00:38:03,119 --> 00:38:06,640
in our in our scenario we just use uh

887
00:38:06,640 --> 00:38:09,520
something that mutated the shd file and

888
00:38:09,520 --> 00:38:10,720
just used random

889
00:38:10,720 --> 00:38:13,040
inputs until we crashed it then we

890
00:38:13,040 --> 00:38:14,240
started to dive in

891
00:38:14,240 --> 00:38:16,640
and understand so to file is basically

892
00:38:16,640 --> 00:38:17,359
to use

893
00:38:17,359 --> 00:38:21,759
random inputs and send it to the space

894
00:38:29,920 --> 00:38:33,040
any more questions uh so of course we

895
00:38:33,040 --> 00:38:33,440
will

896
00:38:33,440 --> 00:38:36,800
uh publish the github repository uh

897
00:38:36,800 --> 00:38:39,040
on twitter on separate twitter and

898
00:38:39,040 --> 00:38:40,800
microsoft twitter as well

899
00:38:40,800 --> 00:38:44,079
and it's important to say that we wrote

900
00:38:44,079 --> 00:38:45,520
a disclaimer for

901
00:38:45,520 --> 00:38:47,520
the driver code we would like you to

902
00:38:47,520 --> 00:38:49,440
read it before you will

903
00:38:49,440 --> 00:38:53,119
use it it's important and

904
00:38:53,119 --> 00:38:55,839
thank you for joining us and ricardo

905
00:38:55,839 --> 00:38:58,720
said what do you use to modify shd files

906
00:38:58,720 --> 00:39:01,359
so when we started the the research the

907
00:39:01,359 --> 00:39:03,119
shd file was

908
00:39:03,119 --> 00:39:05,920
pretty undocumented so we just

909
00:39:05,920 --> 00:39:06,640
engineered

910
00:39:06,640 --> 00:39:10,400
the format and we used a 0 1 0

911
00:39:10,400 --> 00:39:14,160
editor in order to to understand

912
00:39:14,160 --> 00:39:16,240
it very well and we also added the

913
00:39:16,240 --> 00:39:18,160
templates and we will publish it on

914
00:39:18,160 --> 00:39:20,960
github in a few minutes

915
00:39:20,960 --> 00:39:24,240
it's actually it's just distracting c uh

916
00:39:24,240 --> 00:39:29,839
which we used in this video editor

917
00:39:36,560 --> 00:39:38,079
what mitigation do you recommend until

918
00:39:38,079 --> 00:39:41,280
an official patch is released

919
00:39:41,280 --> 00:39:42,880
so basically we don't want you to

920
00:39:42,880 --> 00:39:44,480
disclose anything

921
00:39:44,480 --> 00:39:47,599
that is specific that might tell what

922
00:39:47,599 --> 00:39:49,040
was the vulnerability

923
00:39:49,040 --> 00:39:51,760
so we just say let's wait a few days

924
00:39:51,760 --> 00:39:53,359
until microsoft will deploy

925
00:39:53,359 --> 00:39:56,310
the catch

926
00:39:56,310 --> 00:39:59,119
[Music]

927
00:39:59,119 --> 00:40:00,400
okay thank you very much thank you for

928
00:40:00,400 --> 00:40:03,920
joining us

