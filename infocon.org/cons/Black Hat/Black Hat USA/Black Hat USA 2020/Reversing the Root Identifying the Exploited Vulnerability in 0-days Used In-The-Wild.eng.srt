1
00:00:04,340 --> 00:00:14,140
[Music]

2
00:00:15,679 --> 00:00:16,160
hi

3
00:00:16,160 --> 00:00:18,480
i'm maddie stone and this is reversing

4
00:00:18,480 --> 00:00:19,279
the route

5
00:00:19,279 --> 00:00:21,520
identifying the exploited vulnerability

6
00:00:21,520 --> 00:00:23,840
and zero days used in the wild

7
00:00:23,840 --> 00:00:25,599
so as i said my name is maddie stone and

8
00:00:25,599 --> 00:00:27,199
i'm a security researcher

9
00:00:27,199 --> 00:00:30,080
on google project zero where i focus on

10
00:00:30,080 --> 00:00:31,840
zero days used in the wild

11
00:00:31,840 --> 00:00:34,000
so understanding them analyzing and

12
00:00:34,000 --> 00:00:35,040
seeing what we can learn

13
00:00:35,040 --> 00:00:38,559
and act based on them so why did i want

14
00:00:38,559 --> 00:00:39,440
to do this talk

15
00:00:39,440 --> 00:00:41,840
why do i think it's worth your time is

16
00:00:41,840 --> 00:00:42,559
that

17
00:00:42,559 --> 00:00:44,320
we care a lot and make about making it

18
00:00:44,320 --> 00:00:45,680
harder for people to

19
00:00:45,680 --> 00:00:48,000
exploit users using zero days and so

20
00:00:48,000 --> 00:00:49,520
when zero days are

21
00:00:49,520 --> 00:00:51,760
exploits are detected in the wild that's

22
00:00:51,760 --> 00:00:54,000
the failure case for these attackers

23
00:00:54,000 --> 00:00:55,840
and so we need to learn as much as

24
00:00:55,840 --> 00:00:58,239
possible each time that happens

25
00:00:58,239 --> 00:00:59,520
we need to learn what their

26
00:00:59,520 --> 00:01:01,600
vulnerability is use those

27
00:01:01,600 --> 00:01:03,920
data points to help inform how we're

28
00:01:03,920 --> 00:01:06,400
going to respond to it such as variant

29
00:01:06,400 --> 00:01:08,720
analysis and other systemic

30
00:01:08,720 --> 00:01:11,760
changes to kill bug classes or break

31
00:01:11,760 --> 00:01:13,200
exploit methods

32
00:01:13,200 --> 00:01:16,320
and not work in this sort of theoretical

33
00:01:16,320 --> 00:01:17,119
realm

34
00:01:17,119 --> 00:01:20,000
but take each of those few cases and

35
00:01:20,000 --> 00:01:20,960
really make sure

36
00:01:20,960 --> 00:01:22,880
that we're using those as the data

37
00:01:22,880 --> 00:01:26,000
points to inform what we do

38
00:01:26,000 --> 00:01:28,159
and so one of those big integral parts

39
00:01:28,159 --> 00:01:30,079
is doing a root cause analysis

40
00:01:30,079 --> 00:01:32,000
because a lot of times when we see hear

41
00:01:32,000 --> 00:01:33,200
about zero days

42
00:01:33,200 --> 00:01:35,600
exploits and whether that's a blog or

43
00:01:35,600 --> 00:01:36,240
news

44
00:01:36,240 --> 00:01:37,920
or things like that or even just an

45
00:01:37,920 --> 00:01:40,159
advisory they talk about maybe what the

46
00:01:40,159 --> 00:01:41,600
malware payload is

47
00:01:41,600 --> 00:01:43,840
maybe with the threat threat actor

48
00:01:43,840 --> 00:01:44,720
behind it

49
00:01:44,720 --> 00:01:46,960
the goals but a lot of time they don't

50
00:01:46,960 --> 00:01:49,040
really get into the nitty-gritty of

51
00:01:49,040 --> 00:01:52,079
how did those um attackers get that

52
00:01:52,079 --> 00:01:54,479
initial access to then go and do the bad

53
00:01:54,479 --> 00:01:55,360
thing

54
00:01:55,360 --> 00:01:57,520
so us at project zero we're really

55
00:01:57,520 --> 00:01:59,759
focusing on each time a zero day

56
00:01:59,759 --> 00:02:01,920
is detected to perform a root cause

57
00:02:01,920 --> 00:02:03,040
analysis

58
00:02:03,040 --> 00:02:04,399
and the goal of these root cause

59
00:02:04,399 --> 00:02:06,320
analysis comes down to

60
00:02:06,320 --> 00:02:08,720
figuring out what that vulnerability is

61
00:02:08,720 --> 00:02:09,679
and in

62
00:02:09,679 --> 00:02:11,360
such depth that we can trigger it

63
00:02:11,360 --> 00:02:13,120
through a poc because that really shows

64
00:02:13,120 --> 00:02:13,599
you

65
00:02:13,599 --> 00:02:15,120
you know all the details and not just

66
00:02:15,120 --> 00:02:17,200
sort of the overarching summary

67
00:02:17,200 --> 00:02:20,400
and then how did the attackers exploit

68
00:02:20,400 --> 00:02:21,680
it like what was that exploit

69
00:02:21,680 --> 00:02:22,720
methodology

70
00:02:22,720 --> 00:02:24,560
and those are the two big things of the

71
00:02:24,560 --> 00:02:26,400
foundations that then allow us

72
00:02:26,400 --> 00:02:30,080
to move on to act um have suggestions

73
00:02:30,080 --> 00:02:31,120
for where should we

74
00:02:31,120 --> 00:02:32,720
invest in research and different things

75
00:02:32,720 --> 00:02:35,360
like that in this presentation though

76
00:02:35,360 --> 00:02:38,879
our focus is about that vulnerability

77
00:02:38,879 --> 00:02:40,480
and more so than just giving you a

78
00:02:40,480 --> 00:02:42,319
presentation in a survey of

79
00:02:42,319 --> 00:02:43,760
what are those root cause

80
00:02:43,760 --> 00:02:45,599
vulnerabilities that have been used in

81
00:02:45,599 --> 00:02:47,200
the recent zero day exploits

82
00:02:47,200 --> 00:02:48,720
is that we want to talk about that

83
00:02:48,720 --> 00:02:50,959
process reverse engineer to reverse

84
00:02:50,959 --> 00:02:51,840
engineer

85
00:02:51,840 --> 00:02:53,840
how can we become more efficient come up

86
00:02:53,840 --> 00:02:55,840
with new ways to make sure we're more

87
00:02:55,840 --> 00:02:56,720
precise

88
00:02:56,720 --> 00:02:59,840
when we dig down into

89
00:02:59,840 --> 00:03:01,440
the information we have whether it's the

90
00:03:01,440 --> 00:03:03,519
exploit or the patches or

91
00:03:03,519 --> 00:03:05,120
tips to figure out what that

92
00:03:05,120 --> 00:03:06,560
vulnerability is

93
00:03:06,560 --> 00:03:07,840
and then that allows us to make

94
00:03:07,840 --> 00:03:10,080
hypotheses and brainstorm

95
00:03:10,080 --> 00:03:12,319
to come up with our next steps in our

96
00:03:12,319 --> 00:03:13,120
actions

97
00:03:13,120 --> 00:03:17,040
based on the facts of the vulnerability

98
00:03:17,040 --> 00:03:20,159
so just as a brief i'm giving this

99
00:03:20,159 --> 00:03:22,480
you know three weeks before um y'all are

100
00:03:22,480 --> 00:03:23,760
seeing this presentation

101
00:03:23,760 --> 00:03:26,959
so these all of these root causes

102
00:03:26,959 --> 00:03:30,239
should be published um for your um

103
00:03:30,239 --> 00:03:34,080
perusal and so we i for each of the case

104
00:03:34,080 --> 00:03:34,879
studies

105
00:03:34,879 --> 00:03:36,720
um there is a root cause analysis we've

106
00:03:36,720 --> 00:03:38,319
already performed that include all of

107
00:03:38,319 --> 00:03:39,040
this detail

108
00:03:39,040 --> 00:03:40,239
as well as the information about the

109
00:03:40,239 --> 00:03:42,159
exploit method and different

110
00:03:42,159 --> 00:03:44,159
hypothesis and brainstorms we have about

111
00:03:44,159 --> 00:03:45,599
those facts

112
00:03:45,599 --> 00:03:47,200
and we also have others published so you

113
00:03:47,200 --> 00:03:49,200
can go to our website to see

114
00:03:49,200 --> 00:03:51,760
the case studies covered here as well as

115
00:03:51,760 --> 00:03:52,799
the others we've

116
00:03:52,799 --> 00:03:56,159
investigated so

117
00:03:56,159 --> 00:03:58,959
to be very open and transparent with you

118
00:03:58,959 --> 00:03:59,360
though

119
00:03:59,360 --> 00:04:01,599
these are the take aways i hope that you

120
00:04:01,599 --> 00:04:03,200
have and what i sort of

121
00:04:03,200 --> 00:04:05,599
how i pitched this talk to the review

122
00:04:05,599 --> 00:04:07,360
board is the first thing i hope

123
00:04:07,360 --> 00:04:09,599
that each of you all and the not in the

124
00:04:09,599 --> 00:04:12,159
room but on your couches and your sweats

125
00:04:12,159 --> 00:04:14,480
um gained from this is one there's a lot

126
00:04:14,480 --> 00:04:15,200
of different

127
00:04:15,200 --> 00:04:17,680
ways to reverse engineer vulnerability

128
00:04:17,680 --> 00:04:19,279
we sometimes talk about the different

129
00:04:19,279 --> 00:04:20,320
processes

130
00:04:20,320 --> 00:04:22,720
as a monolith where in actuality there's

131
00:04:22,720 --> 00:04:24,400
a lot of creativity and a lot of

132
00:04:24,400 --> 00:04:26,160
different choices you can take

133
00:04:26,160 --> 00:04:29,600
to raise your likelihood for success

134
00:04:29,600 --> 00:04:32,400
as well as use less resources have to

135
00:04:32,400 --> 00:04:33,759
invest less time

136
00:04:33,759 --> 00:04:37,199
skills etc to get to the answer um

137
00:04:37,199 --> 00:04:39,040
i also want to be frank that not every

138
00:04:39,040 --> 00:04:41,040
endeavor is successful

139
00:04:41,040 --> 00:04:42,880
and so i'm presenting two case studies

140
00:04:42,880 --> 00:04:45,120
where i failed i didn't quite get to the

141
00:04:45,120 --> 00:04:46,000
end

142
00:04:46,000 --> 00:04:47,680
but i don't want those to be

143
00:04:47,680 --> 00:04:49,440
discouraging for anyone else who wants

144
00:04:49,440 --> 00:04:50,639
to get in this realm

145
00:04:50,639 --> 00:04:52,800
we can use you we need more brains

146
00:04:52,800 --> 00:04:54,240
working on these problems

147
00:04:54,240 --> 00:04:57,040
and so each time we don't get to the end

148
00:04:57,040 --> 00:04:57,680
goal

149
00:04:57,680 --> 00:05:00,160
or have a success of identifying the

150
00:05:00,160 --> 00:05:01,199
root cause

151
00:05:01,199 --> 00:05:02,960
we have a lot to learn from that that we

152
00:05:02,960 --> 00:05:04,320
can then apply

153
00:05:04,320 --> 00:05:06,800
if we're deliberate to the next set to

154
00:05:06,800 --> 00:05:07,360
raise our

155
00:05:07,360 --> 00:05:11,440
um probability of success

156
00:05:11,440 --> 00:05:14,720
lastly um i sometimes there's a lot of

157
00:05:14,720 --> 00:05:17,759
resources describing what a technique is

158
00:05:17,759 --> 00:05:19,600
but it doesn't get into the nitty-gritty

159
00:05:19,600 --> 00:05:21,600
of how it appears in practice

160
00:05:21,600 --> 00:05:23,199
and i've heard sometimes it's hard for

161
00:05:23,199 --> 00:05:24,720
people to take those theoretical

162
00:05:24,720 --> 00:05:25,759
descriptions

163
00:05:25,759 --> 00:05:28,479
and apply them so hopefully this talk

164
00:05:28,479 --> 00:05:29,840
will show you through seven different

165
00:05:29,840 --> 00:05:30,960
case studies

166
00:05:30,960 --> 00:05:33,199
how not everything has to be the same

167
00:05:33,199 --> 00:05:35,039
and what are some of those differences

168
00:05:35,039 --> 00:05:36,080
that you can see

169
00:05:36,080 --> 00:05:38,000
when root causing one zero day to

170
00:05:38,000 --> 00:05:39,759
another

171
00:05:39,759 --> 00:05:42,240
and you know pandemic brain has gotten

172
00:05:42,240 --> 00:05:43,199
to us all

173
00:05:43,199 --> 00:05:45,520
and i'm here recording this talk with no

174
00:05:45,520 --> 00:05:46,960
one in the room so let's have a little

175
00:05:46,960 --> 00:05:47,919
fun with it

176
00:05:47,919 --> 00:05:51,600
so yo yo yo i'm batty stone i got these

177
00:05:51,600 --> 00:05:53,680
zero days so let's talk about the ways

178
00:05:53,680 --> 00:05:56,080
that we get to the root so we can scream

179
00:05:56,080 --> 00:05:58,319
loot and when we root cause that bone

180
00:05:58,319 --> 00:06:00,160
life won't be so dull

181
00:06:00,160 --> 00:06:01,840
so hopefully this talk isn't dull we

182
00:06:01,840 --> 00:06:03,199
have some fun talking

183
00:06:03,199 --> 00:06:04,880
about processes and how to be better

184
00:06:04,880 --> 00:06:07,120
reverse engineers my goal is to start

185
00:06:07,120 --> 00:06:09,440
the conversation so i can learn from you

186
00:06:09,440 --> 00:06:10,960
i can share what we at project zero

187
00:06:10,960 --> 00:06:14,639
doing and so let's get into it

188
00:06:14,639 --> 00:06:16,479
first off want to make sure all of us

189
00:06:16,479 --> 00:06:18,319
are starting from the same foundations

190
00:06:18,319 --> 00:06:20,319
understand what terms i'm using so let's

191
00:06:20,319 --> 00:06:23,360
cover basics super quickly

192
00:06:23,360 --> 00:06:25,280
the four categories of techniques i'm

193
00:06:25,280 --> 00:06:26,880
covering and sort of classes of

194
00:06:26,880 --> 00:06:29,360
techniques are one reversing the exploit

195
00:06:29,360 --> 00:06:30,080
sample

196
00:06:30,080 --> 00:06:31,919
i think that's what most people think of

197
00:06:31,919 --> 00:06:33,520
when you say you're going to analyze a

198
00:06:33,520 --> 00:06:35,520
zero-day exploit is you're going to

199
00:06:35,520 --> 00:06:37,759
load it into ida or take the byte code

200
00:06:37,759 --> 00:06:38,960
into another tool

201
00:06:38,960 --> 00:06:40,960
and start line by line statically

202
00:06:40,960 --> 00:06:42,080
reversing it

203
00:06:42,080 --> 00:06:43,919
i want to show you some case studies of

204
00:06:43,919 --> 00:06:45,600
other ways that can appear

205
00:06:45,600 --> 00:06:47,680
um and that's the one that usually

206
00:06:47,680 --> 00:06:49,599
happens when you actually have that zero

207
00:06:49,599 --> 00:06:50,720
day sample

208
00:06:50,720 --> 00:06:52,639
however there's a lot of cases when you

209
00:06:52,639 --> 00:06:54,080
don't have those samples

210
00:06:54,080 --> 00:06:55,759
and so that's where we get into binary

211
00:06:55,759 --> 00:06:57,680
patch stiffing which

212
00:06:57,680 --> 00:07:01,120
is well written about well researched

213
00:07:01,120 --> 00:07:02,720
but it can still take a couple different

214
00:07:02,720 --> 00:07:05,759
looks and there's a lot of different

215
00:07:05,759 --> 00:07:08,800
ways or lessons learned i have

216
00:07:08,800 --> 00:07:11,199
from giving it a shot so that's the

217
00:07:11,199 --> 00:07:12,960
second category

218
00:07:12,960 --> 00:07:15,039
the third is source code patch diffing

219
00:07:15,039 --> 00:07:16,880
and that usually comes into play

220
00:07:16,880 --> 00:07:19,520
for the code bases where that are open

221
00:07:19,520 --> 00:07:20,160
source

222
00:07:20,160 --> 00:07:24,160
such as android chrome firefox etc

223
00:07:24,160 --> 00:07:27,280
or you may be have privileged access as

224
00:07:27,280 --> 00:07:28,160
a vendor

225
00:07:28,160 --> 00:07:31,440
or a partner such that you can see the

226
00:07:31,440 --> 00:07:32,319
source code

227
00:07:32,319 --> 00:07:35,199
source code patches and the repos or the

228
00:07:35,199 --> 00:07:36,000
change logs

229
00:07:36,000 --> 00:07:38,319
so that's when you may use that

230
00:07:38,319 --> 00:07:39,840
technique instead

231
00:07:39,840 --> 00:07:42,400
and lastly sometimes in our industry

232
00:07:42,400 --> 00:07:43,360
they're sharing

233
00:07:43,360 --> 00:07:45,759
or we receive tips about exploits that

234
00:07:45,759 --> 00:07:47,199
are in use

235
00:07:47,199 --> 00:07:48,800
and so that's sort of what i'm calling

236
00:07:48,800 --> 00:07:50,879
bug hunting based on exploit details you

237
00:07:50,879 --> 00:07:52,400
don't have patches and you don't have an

238
00:07:52,400 --> 00:07:53,039
exploit

239
00:07:53,039 --> 00:07:54,960
but you've received some details so how

240
00:07:54,960 --> 00:07:58,479
do you work on that

241
00:07:58,479 --> 00:08:00,479
this is just a simple overview for

242
00:08:00,479 --> 00:08:02,080
anyone who

243
00:08:02,080 --> 00:08:04,240
hasn't worked in this space at all of

244
00:08:04,240 --> 00:08:05,280
some of the questions

245
00:08:05,280 --> 00:08:07,120
you ask yourself and how you end up at

246
00:08:07,120 --> 00:08:10,240
some of the different techniques

247
00:08:10,560 --> 00:08:12,639
and the last other thing that i think is

248
00:08:12,639 --> 00:08:13,599
interesting

249
00:08:13,599 --> 00:08:16,879
is that your role um plays a big part in

250
00:08:16,879 --> 00:08:19,039
how you go about this root causing

251
00:08:19,039 --> 00:08:20,479
sometimes you might be the person who

252
00:08:20,479 --> 00:08:22,720
discovered the exploit and so

253
00:08:22,720 --> 00:08:26,160
your goals are largely get it patched

254
00:08:26,160 --> 00:08:28,960
from the vendor so you may or may not

255
00:08:28,960 --> 00:08:30,960
decide to root cause and you will also

256
00:08:30,960 --> 00:08:31,599
be

257
00:08:31,599 --> 00:08:35,839
regularly reflecting on how much

258
00:08:35,839 --> 00:08:37,519
of your time and resources should you

259
00:08:37,519 --> 00:08:39,200
invest because if you decide

260
00:08:39,200 --> 00:08:41,679
oh i have this exploit i have this crash

261
00:08:41,679 --> 00:08:43,440
and i don't want to report it until i

262
00:08:43,440 --> 00:08:44,240
have that

263
00:08:44,240 --> 00:08:45,920
root cause vulnerability and i'm super

264
00:08:45,920 --> 00:08:47,920
confident then you're allowing time to

265
00:08:47,920 --> 00:08:49,279
continue

266
00:08:49,279 --> 00:08:51,200
um without it being patched versus

267
00:08:51,200 --> 00:08:52,880
sending it to the vendor even if you

268
00:08:52,880 --> 00:08:53,440
don't

269
00:08:53,440 --> 00:08:55,839
understand exactly how it works so in

270
00:08:55,839 --> 00:08:57,920
that case you often have access to the

271
00:08:57,920 --> 00:08:59,839
exploit but not necessarily the source

272
00:08:59,839 --> 00:09:00,399
code

273
00:09:00,399 --> 00:09:03,120
or that vendor developer expertise on

274
00:09:03,120 --> 00:09:04,000
whatever

275
00:09:04,000 --> 00:09:07,200
it's exploiting next you're the vendor

276
00:09:07,200 --> 00:09:09,920
of you probably have the most access to

277
00:09:09,920 --> 00:09:11,040
details whether that's

278
00:09:11,040 --> 00:09:12,480
experts who actually wrote the code

279
00:09:12,480 --> 00:09:14,240
that's being exploited you have the

280
00:09:14,240 --> 00:09:14,959
source code

281
00:09:14,959 --> 00:09:17,040
you likely have the exploit or the crash

282
00:09:17,040 --> 00:09:18,560
from the original discover

283
00:09:18,560 --> 00:09:21,920
or because they reported it to you um

284
00:09:21,920 --> 00:09:22,640
and so

285
00:09:22,640 --> 00:09:24,480
you also can't really make that decision

286
00:09:24,480 --> 00:09:25,760
of oh no this

287
00:09:25,760 --> 00:09:28,320
took too long deciding not i'm not going

288
00:09:28,320 --> 00:09:28,800
to

289
00:09:28,800 --> 00:09:30,640
root calls it all the way you're going

290
00:09:30,640 --> 00:09:32,880
to need to hopefully take it all the way

291
00:09:32,880 --> 00:09:34,160
to the end

292
00:09:34,160 --> 00:09:36,480
and lastly there's third party which may

293
00:09:36,480 --> 00:09:38,000
be users or researchers

294
00:09:38,000 --> 00:09:40,320
who may see in the advisory see i

295
00:09:40,320 --> 00:09:42,000
mentioned a blog post that something has

296
00:09:42,000 --> 00:09:43,680
been exploited in the wild

297
00:09:43,680 --> 00:09:45,279
and you likely have the least amount of

298
00:09:45,279 --> 00:09:47,680
information and

299
00:09:47,680 --> 00:09:50,880
you also need to decide what your

300
00:09:50,880 --> 00:09:51,680
investment

301
00:09:51,680 --> 00:09:53,680
of how much time and energy you want to

302
00:09:53,680 --> 00:09:54,720
put into it

303
00:09:54,720 --> 00:09:57,279
so all i'm presenting seven case studies

304
00:09:57,279 --> 00:09:58,000
here

305
00:09:58,000 --> 00:10:01,200
and all done of root causes done by

306
00:10:01,200 --> 00:10:04,880
project zero project zero's role

307
00:10:04,880 --> 00:10:07,200
has gone through each of these three at

308
00:10:07,200 --> 00:10:08,079
different times

309
00:10:08,079 --> 00:10:10,079
sometimes we discover it sometimes

310
00:10:10,079 --> 00:10:11,440
vendors ask to partner

311
00:10:11,440 --> 00:10:13,279
with us for our expertise to help them

312
00:10:13,279 --> 00:10:14,560
figure out patches

313
00:10:14,560 --> 00:10:16,880
or the root cause and most often we're

314
00:10:16,880 --> 00:10:18,399
the third party researchers who are

315
00:10:18,399 --> 00:10:20,160
trying to dig in and to learn as much as

316
00:10:20,160 --> 00:10:20,959
we can

317
00:10:20,959 --> 00:10:24,000
without being either the two

318
00:10:24,000 --> 00:10:25,680
so now let's get into the fun stuff of

319
00:10:25,680 --> 00:10:27,600
the case studies

320
00:10:27,600 --> 00:10:29,040
so the first category we're going to go

321
00:10:29,040 --> 00:10:30,880
into is two different case studies

322
00:10:30,880 --> 00:10:33,040
of you have the exploit on hand and you

323
00:10:33,040 --> 00:10:34,560
want to recause it

324
00:10:34,560 --> 00:10:37,120
but it can take two very different looks

325
00:10:37,120 --> 00:10:38,160
so the first one is

326
00:10:38,160 --> 00:10:40,720
a series of windows jscript exploits

327
00:10:40,720 --> 00:10:41,519
that were

328
00:10:41,519 --> 00:10:44,000
exploited in the wild so it started with

329
00:10:44,000 --> 00:10:46,640
cve 2019-1360

330
00:10:46,640 --> 00:10:49,680
then went on to cve 2019-1429 and

331
00:10:49,680 --> 00:10:52,480
finally 20-20-0674

332
00:10:52,480 --> 00:10:54,160
and those are all trivial variants of

333
00:10:54,160 --> 00:10:56,079
each other so

334
00:10:56,079 --> 00:10:57,600
all three of these were immediate are

335
00:10:57,600 --> 00:10:59,279
originally detected by clemont

336
00:10:59,279 --> 00:11:02,079
of the google threat analysis group and

337
00:11:02,079 --> 00:11:02,800
clemond

338
00:11:02,800 --> 00:11:05,040
did some of the exploit analysis while

339
00:11:05,040 --> 00:11:05,920
yvonne from

340
00:11:05,920 --> 00:11:08,399
project zero did the root causing of the

341
00:11:08,399 --> 00:11:10,000
bug

342
00:11:10,000 --> 00:11:12,000
so here are the three microsoft security

343
00:11:12,000 --> 00:11:14,240
advisories and the first one

344
00:11:14,240 --> 00:11:16,320
in their description for each of them is

345
00:11:16,320 --> 00:11:18,640
a remote code execution vulnerability

346
00:11:18,640 --> 00:11:20,320
exists in the way that the scripting

347
00:11:20,320 --> 00:11:22,000
engine handles objects

348
00:11:22,000 --> 00:11:25,680
in memory in internet explorer

349
00:11:25,680 --> 00:11:28,000
so yvonne's ready to dig into this

350
00:11:28,000 --> 00:11:29,200
figure out what

351
00:11:29,200 --> 00:11:31,680
um the vulnerability these exploits are

352
00:11:31,680 --> 00:11:32,720
exploiting are

353
00:11:32,720 --> 00:11:34,160
and i think one of the important things

354
00:11:34,160 --> 00:11:36,160
to remember is yvonne has studied and

355
00:11:36,160 --> 00:11:38,800
written tooling extensively for jscript

356
00:11:38,800 --> 00:11:41,440
he is not new to this platform he has

357
00:11:41,440 --> 00:11:43,760
published a lot of research in the area

358
00:11:43,760 --> 00:11:45,760
and when he looks at this looks at the

359
00:11:45,760 --> 00:11:47,120
exploit sample

360
00:11:47,120 --> 00:11:49,440
he doesn't decide to try to statically

361
00:11:49,440 --> 00:11:50,320
reverse it

362
00:11:50,320 --> 00:11:52,639
instead he decides to run the exploit

363
00:11:52,639 --> 00:11:54,560
through a simple

364
00:11:54,560 --> 00:11:57,120
custom test case minimizer which i

365
00:11:57,120 --> 00:11:58,880
thought was a really cool idea and why i

366
00:11:58,880 --> 00:11:59,760
wanted to

367
00:11:59,760 --> 00:12:02,399
include it here so this is the main

368
00:12:02,399 --> 00:12:05,120
portion of the code from the exploit

369
00:12:05,120 --> 00:12:08,800
and um yvonne's test case minimizer

370
00:12:08,800 --> 00:12:10,320
was simple in the fact that you put in

371
00:12:10,320 --> 00:12:12,560
the exploit it ensures it crashes and

372
00:12:12,560 --> 00:12:14,160
each time there's a crash it removes a

373
00:12:14,160 --> 00:12:15,040
line of code

374
00:12:15,040 --> 00:12:18,000
if the exploit no longer causes a crash

375
00:12:18,000 --> 00:12:18,880
um

376
00:12:18,880 --> 00:12:21,760
once a line of code is removed then that

377
00:12:21,760 --> 00:12:23,200
tells you that that was important for

378
00:12:23,200 --> 00:12:25,519
triggering the vulnerability

379
00:12:25,519 --> 00:12:27,440
so the test case minimizer tells them

380
00:12:27,440 --> 00:12:29,120
that it's these lines of code that are

381
00:12:29,120 --> 00:12:30,240
responsible for triggering the

382
00:12:30,240 --> 00:12:31,600
vulnerability

383
00:12:31,600 --> 00:12:34,399
and that's what those codes in format

384
00:12:34,399 --> 00:12:36,079
look like

385
00:12:36,079 --> 00:12:38,880
so from that yvonne then annotated it

386
00:12:38,880 --> 00:12:39,760
for us

387
00:12:39,760 --> 00:12:42,160
as well as cleaned it up a little bit so

388
00:12:42,160 --> 00:12:43,600
what the vulnerability was

389
00:12:43,600 --> 00:12:45,920
when you take those two lines is that

390
00:12:45,920 --> 00:12:47,680
down at the bottom

391
00:12:47,680 --> 00:12:50,160
um array.sort is called with a custom

392
00:12:50,160 --> 00:12:50,880
callback

393
00:12:50,880 --> 00:12:53,519
that function f and so we can see then

394
00:12:53,519 --> 00:12:55,440
the definition of function f

395
00:12:55,440 --> 00:12:57,360
so the first thing it does is it creates

396
00:12:57,360 --> 00:12:58,639
a bunch of objects

397
00:12:58,639 --> 00:13:01,600
otherwise known as jscript variables and

398
00:13:01,600 --> 00:13:03,920
it then stores a reference to one of

399
00:13:03,920 --> 00:13:04,320
those

400
00:13:04,320 --> 00:13:07,200
objects or variables in the arguments

401
00:13:07,200 --> 00:13:08,000
array

402
00:13:08,000 --> 00:13:10,079
and the key here is that the arguments

403
00:13:10,079 --> 00:13:12,160
array isn't tracked by

404
00:13:12,160 --> 00:13:15,680
garbage collector so then in step four

405
00:13:15,680 --> 00:13:16,959
they delete

406
00:13:16,959 --> 00:13:19,839
all of the objects or the jskip

407
00:13:19,839 --> 00:13:20,720
variables

408
00:13:20,720 --> 00:13:22,480
and then call garbage collectors so that

409
00:13:22,480 --> 00:13:24,720
all of those are reclaimed

410
00:13:24,720 --> 00:13:27,200
and lastly though we still have the

411
00:13:27,200 --> 00:13:28,800
reference though to one of them

412
00:13:28,800 --> 00:13:31,040
in the arguments array giving us the use

413
00:13:31,040 --> 00:13:33,040
after free

414
00:13:33,040 --> 00:13:35,519
so that was a really cool idea i thought

415
00:13:35,519 --> 00:13:36,959
and it was super quick

416
00:13:36,959 --> 00:13:39,920
um but if yvonne hadn't had all of this

417
00:13:39,920 --> 00:13:40,959
expertise

418
00:13:40,959 --> 00:13:43,600
in this bug class specifically as well

419
00:13:43,600 --> 00:13:44,480
as

420
00:13:44,480 --> 00:13:46,399
um tooling that he had already created

421
00:13:46,399 --> 00:13:48,320
for jscript probably would have taken

422
00:13:48,320 --> 00:13:48,639
him

423
00:13:48,639 --> 00:13:51,360
a lot longer and so that expertise and

424
00:13:51,360 --> 00:13:52,720
experience already with setting up

425
00:13:52,720 --> 00:13:53,920
tooling for jscript

426
00:13:53,920 --> 00:13:57,920
definitely came in handy

427
00:13:57,920 --> 00:13:59,760
the next case study we're going to cover

428
00:13:59,760 --> 00:14:01,360
is the ios com

429
00:14:01,360 --> 00:14:04,320
uncovered jailbreak so we in project

430
00:14:04,320 --> 00:14:06,000
zero don't technically consider this

431
00:14:06,000 --> 00:14:08,160
this year day exploit that's used in the

432
00:14:08,160 --> 00:14:10,320
wild but you still had to go through

433
00:14:10,320 --> 00:14:11,760
similar actions the root cause of

434
00:14:11,760 --> 00:14:12,800
vulnerability

435
00:14:12,800 --> 00:14:14,800
and brandon recently published a blog

436
00:14:14,800 --> 00:14:16,560
post on this so i thought it was

437
00:14:16,560 --> 00:14:17,199
interesting

438
00:14:17,199 --> 00:14:18,160
i'm going to cover some of the

439
00:14:18,160 --> 00:14:20,079
highlights that brandon showed which i

440
00:14:20,079 --> 00:14:21,760
thought were super interesting and thus

441
00:14:21,760 --> 00:14:22,399
willing

442
00:14:22,399 --> 00:14:24,160
or not willing wanting to share with

443
00:14:24,160 --> 00:14:26,079
y'all

444
00:14:26,079 --> 00:14:29,279
so first as one does he took the exploit

445
00:14:29,279 --> 00:14:31,440
and opened it up in ida

446
00:14:31,440 --> 00:14:33,440
um with the intention of statically

447
00:14:33,440 --> 00:14:35,519
reversing but he saw that it was heavily

448
00:14:35,519 --> 00:14:36,480
obfuscated

449
00:14:36,480 --> 00:14:38,399
and brandon was like uh i think i can

450
00:14:38,399 --> 00:14:40,160
try something else i can pivot i don't

451
00:14:40,160 --> 00:14:40,880
need to

452
00:14:40,880 --> 00:14:44,160
commit to statically reversing it so

453
00:14:44,160 --> 00:14:46,639
instead he decided to run it on a device

454
00:14:46,639 --> 00:14:49,440
so brandon has a lot of expertise in ios

455
00:14:49,440 --> 00:14:50,639
kernel exploits

456
00:14:50,639 --> 00:14:53,519
and so to him he was like huh many

457
00:14:53,519 --> 00:14:55,360
memory corruption based exploits

458
00:14:55,360 --> 00:14:57,920
have this critical section where the

459
00:14:57,920 --> 00:14:58,959
kernel state

460
00:14:58,959 --> 00:15:01,040
is corrupted and so if the exploit

461
00:15:01,040 --> 00:15:02,320
doesn't continue

462
00:15:02,320 --> 00:15:04,320
and instead is stopped then the system's

463
00:15:04,320 --> 00:15:07,199
unstable so here the idea

464
00:15:07,199 --> 00:15:09,360
load the uncover app onto the device and

465
00:15:09,360 --> 00:15:10,720
press stop

466
00:15:10,720 --> 00:15:13,040
in the middle of it and that led him to

467
00:15:13,040 --> 00:15:14,160
a kernel crash

468
00:15:14,160 --> 00:15:16,639
so he was right on target there and the

469
00:15:16,639 --> 00:15:17,680
key here is that

470
00:15:17,680 --> 00:15:19,839
it was interesting this kernel panic

471
00:15:19,839 --> 00:15:22,199
says there's a use after free in the

472
00:15:22,199 --> 00:15:24,560
calc.16 allocation zone

473
00:15:24,560 --> 00:15:26,959
of the kernel so he wasn't fully

474
00:15:26,959 --> 00:15:27,680
trusting it

475
00:15:27,680 --> 00:15:29,680
quite yet but was like this is worth

476
00:15:29,680 --> 00:15:31,040
tracking down and seeing if there's

477
00:15:31,040 --> 00:15:32,079
anything there

478
00:15:32,079 --> 00:15:33,519
so the next step was he wanted to

479
00:15:33,519 --> 00:15:35,680
determine if the vulnerability relies on

480
00:15:35,680 --> 00:15:36,720
reallocating

481
00:15:36,720 --> 00:15:39,920
a calc.16 allocation as if it's used

482
00:15:39,920 --> 00:15:42,800
after free or something like that

483
00:15:42,800 --> 00:15:45,199
so he wrote an app that continuously

484
00:15:45,199 --> 00:15:47,279
allocates and frees to that zone

485
00:15:47,279 --> 00:15:48,959
because if it does then it's messing up

486
00:15:48,959 --> 00:15:51,360
that reallocation and thus should break

487
00:15:51,360 --> 00:15:54,240
the exploit and it did as soon as the

488
00:15:54,240 --> 00:15:55,839
jailbreak button was

489
00:15:55,839 --> 00:16:00,000
pressed in the in the um uncover app

490
00:16:00,000 --> 00:16:02,720
while the app that does the reallocating

491
00:16:02,720 --> 00:16:04,160
was running in the background

492
00:16:04,160 --> 00:16:06,560
there was a kernel panic but this didn't

493
00:16:06,560 --> 00:16:07,360
happen

494
00:16:07,360 --> 00:16:10,199
when brandon changed his custom app to

495
00:16:10,199 --> 00:16:11,440
calc.32

496
00:16:11,440 --> 00:16:13,600
so that's telling him then yep you're

497
00:16:13,600 --> 00:16:14,639
right on

498
00:16:14,639 --> 00:16:18,160
um target this exploit relies on a

499
00:16:18,160 --> 00:16:20,279
reallocation to the

500
00:16:20,279 --> 00:16:24,000
calc.16 area so next he analyzed the

501
00:16:24,000 --> 00:16:24,639
strap

502
00:16:24,639 --> 00:16:26,480
the stack traces from those used after

503
00:16:26,480 --> 00:16:27,920
free catches

504
00:16:27,920 --> 00:16:30,320
and he's symbolicated it which i didn't

505
00:16:30,320 --> 00:16:31,759
know it was a word but i love it now

506
00:16:31,759 --> 00:16:33,360
that i do

507
00:16:33,360 --> 00:16:35,839
so once you've symbolicated it it looked

508
00:16:35,839 --> 00:16:37,199
super interesting

509
00:16:37,199 --> 00:16:39,199
brandon had recently completed a study

510
00:16:39,199 --> 00:16:41,040
of ios exploits

511
00:16:41,040 --> 00:16:44,240
and he um the lio

512
00:16:44,240 --> 00:16:46,800
underscore list io sys call immediately

513
00:16:46,800 --> 00:16:48,320
caught his attention

514
00:16:48,320 --> 00:16:50,880
because from that survey he looked into

515
00:16:50,880 --> 00:16:51,680
light speed

516
00:16:51,680 --> 00:16:53,600
and light speed based exploits were

517
00:16:53,600 --> 00:16:55,600
dependent on the vulnerable syscall

518
00:16:55,600 --> 00:16:59,680
of this lio list i o

519
00:17:00,079 --> 00:17:02,639
so then he started to dig into how does

520
00:17:02,639 --> 00:17:04,160
this exploit run compared to the

521
00:17:04,160 --> 00:17:04,880
original

522
00:17:04,880 --> 00:17:06,959
light speed exploit they weren't exactly

523
00:17:06,959 --> 00:17:07,919
the same

524
00:17:07,919 --> 00:17:11,199
um but he went ahead and used check

525
00:17:11,199 --> 00:17:13,280
grain and pongo ii

526
00:17:13,280 --> 00:17:17,039
punggol os to patch that syscall in the

527
00:17:17,039 --> 00:17:18,079
kernel cache

528
00:17:18,079 --> 00:17:19,679
and that was then how he was able to

529
00:17:19,679 --> 00:17:22,240
determine that the exploit methodology

530
00:17:22,240 --> 00:17:24,599
had changed but apple had actually

531
00:17:24,599 --> 00:17:25,760
reintroduced

532
00:17:25,760 --> 00:17:28,799
the original light speed bug into the um

533
00:17:28,799 --> 00:17:31,600
back into ios and so that's how he root

534
00:17:31,600 --> 00:17:32,000
caused

535
00:17:32,000 --> 00:17:35,760
the vulnerability so a few takeaways

536
00:17:35,760 --> 00:17:37,919
is with the exploit sample brandon did

537
00:17:37,919 --> 00:17:38,799
this um

538
00:17:38,799 --> 00:17:40,480
had the identified the vulnerability

539
00:17:40,480 --> 00:17:42,320
within four hours in a pock

540
00:17:42,320 --> 00:17:45,679
or proof of concept within ten but

541
00:17:45,679 --> 00:17:48,720
his expertise in kernel exploits i would

542
00:17:48,720 --> 00:17:50,559
think definitely played a role as well

543
00:17:50,559 --> 00:17:51,039
as

544
00:17:51,039 --> 00:17:53,760
recently studying previous exploits so

545
00:17:53,760 --> 00:17:55,760
because of that he was able to quickly

546
00:17:55,760 --> 00:17:56,559
identify

547
00:17:56,559 --> 00:17:59,440
the similarities with list i o or

548
00:17:59,440 --> 00:18:00,000
similarities

549
00:18:00,000 --> 00:18:02,400
with lightspeed and i think that's an

550
00:18:02,400 --> 00:18:04,799
important reason for us to continually

551
00:18:04,799 --> 00:18:06,720
publishing and looking back at

552
00:18:06,720 --> 00:18:08,799
historical zero day exploit

553
00:18:08,799 --> 00:18:12,000
data i think it's also important to

554
00:18:12,000 --> 00:18:12,799
highlight

555
00:18:12,799 --> 00:18:16,240
he didn't pause or see any reason not to

556
00:18:16,240 --> 00:18:18,080
pivot and switch to dynamic reversing

557
00:18:18,080 --> 00:18:20,720
when that when he saw the exploit was

558
00:18:20,720 --> 00:18:24,400
obfuscated and thus static reversing

559
00:18:24,400 --> 00:18:29,120
might not be as reliable or as quick

560
00:18:29,120 --> 00:18:30,799
and then one other line that was in his

561
00:18:30,799 --> 00:18:32,480
blog post that i thought was super

562
00:18:32,480 --> 00:18:33,280
interesting

563
00:18:33,280 --> 00:18:34,799
and wanted to call out even though it

564
00:18:34,799 --> 00:18:37,120
didn't work in this case is brandy used

565
00:18:37,120 --> 00:18:38,320
his knowledge that

566
00:18:38,320 --> 00:18:41,760
ios exploits often use mock ports

567
00:18:41,760 --> 00:18:44,160
for their exploitation and so he wrote

568
00:18:44,160 --> 00:18:46,000
an app that was churning the ipc

569
00:18:46,000 --> 00:18:49,200
ports zone and when the uncover

570
00:18:49,200 --> 00:18:51,840
exploit still worked while that app that

571
00:18:51,840 --> 00:18:52,640
was churning

572
00:18:52,640 --> 00:18:55,360
ipc ports was running it suggested that

573
00:18:55,360 --> 00:18:56,880
that exploit used a different

574
00:18:56,880 --> 00:18:58,320
exploitation method

575
00:18:58,320 --> 00:19:00,400
um that didn't rely on heap grooming of

576
00:19:00,400 --> 00:19:02,000
the mockport allocations

577
00:19:02,000 --> 00:19:03,440
so i thought that was super interesting

578
00:19:03,440 --> 00:19:05,760
if you're looking at ios

579
00:19:05,760 --> 00:19:07,679
a good way that he used his knowledge to

580
00:19:07,679 --> 00:19:09,120
then try and apply

581
00:19:09,120 --> 00:19:12,320
to figure out what a root cause was

582
00:19:12,320 --> 00:19:15,520
so that was what you do when you reverse

583
00:19:15,520 --> 00:19:17,039
the exploit and you have the exploit

584
00:19:17,039 --> 00:19:19,200
sample on hand now let's get into binary

585
00:19:19,200 --> 00:19:20,480
patch diffing

586
00:19:20,480 --> 00:19:23,919
so these talks were cut down from once

587
00:19:23,919 --> 00:19:25,760
black hat with remote so this is going

588
00:19:25,760 --> 00:19:26,400
to be

589
00:19:26,400 --> 00:19:29,760
a super quick section both of the case

590
00:19:29,760 --> 00:19:30,799
studies have been

591
00:19:30,799 --> 00:19:32,880
talked about and blogged about as well

592
00:19:32,880 --> 00:19:34,799
as binary patch dipping has been talked

593
00:19:34,799 --> 00:19:35,520
about

594
00:19:35,520 --> 00:19:37,600
a lot so instead i want to answer some

595
00:19:37,600 --> 00:19:38,640
questions

596
00:19:38,640 --> 00:19:40,480
of process that haven't been answered

597
00:19:40,480 --> 00:19:42,799
elsewhere so the first case study is the

598
00:19:42,799 --> 00:19:44,000
whatsapp volume from

599
00:19:44,000 --> 00:19:46,960
last summer that was allegedly used by

600
00:19:46,960 --> 00:19:47,840
nso

601
00:19:47,840 --> 00:19:50,400
and facebook's advisory for it said it's

602
00:19:50,400 --> 00:19:52,400
a buffer overflow vulnerability

603
00:19:52,400 --> 00:19:55,280
the vulnerability and the whatsapp voip

604
00:19:55,280 --> 00:19:55,840
stack

605
00:19:55,840 --> 00:19:59,679
which allowed rce via a series of rtcp

606
00:19:59,679 --> 00:20:02,880
packets so

607
00:20:02,880 --> 00:20:04,960
i did a full talk on my binary patch

608
00:20:04,960 --> 00:20:07,280
differing process for this vulnerability

609
00:20:07,280 --> 00:20:09,600
um so there's the video and slides if

610
00:20:09,600 --> 00:20:11,440
you want to get more in detail

611
00:20:11,440 --> 00:20:13,679
but from that i had some more questions

612
00:20:13,679 --> 00:20:16,320
of how did you decide what to

613
00:20:16,320 --> 00:20:18,960
binary patch diff so just take a step

614
00:20:18,960 --> 00:20:20,159
back and cover that

615
00:20:20,159 --> 00:20:21,760
is when you have a mobile app you need

616
00:20:21,760 --> 00:20:24,159
to make the decision is it ios

617
00:20:24,159 --> 00:20:26,480
or android that's going to largely come

618
00:20:26,480 --> 00:20:27,679
from your expertise

619
00:20:27,679 --> 00:20:29,360
i used to be on the android security

620
00:20:29,360 --> 00:20:31,679
team much more expertise in android

621
00:20:31,679 --> 00:20:34,000
so i went down that route if you have

622
00:20:34,000 --> 00:20:36,240
expertise in neither ios or android

623
00:20:36,240 --> 00:20:38,240
i'd guess that android is probably the

624
00:20:38,240 --> 00:20:39,679
easier place to start with

625
00:20:39,679 --> 00:20:42,720
open tooling and things like that next

626
00:20:42,720 --> 00:20:44,159
the question is

627
00:20:44,159 --> 00:20:46,480
there's a lot of files in android apks

628
00:20:46,480 --> 00:20:48,080
where do you start your diffing

629
00:20:48,080 --> 00:20:49,760
and first is it going to be the dalvik

630
00:20:49,760 --> 00:20:51,600
byte code or native code

631
00:20:51,600 --> 00:20:53,919
so all the byte code is the compiled

632
00:20:53,919 --> 00:20:56,080
java or kotlin from an android app where

633
00:20:56,080 --> 00:20:57,120
native code

634
00:20:57,120 --> 00:20:59,280
are libraries that are compiled crc plus

635
00:20:59,280 --> 00:21:00,240
plus

636
00:21:00,240 --> 00:21:03,360
so having read natalie silvanovic's mini

637
00:21:03,360 --> 00:21:04,159
blog posts

638
00:21:04,159 --> 00:21:06,559
about analyzing web conferencing and

639
00:21:06,559 --> 00:21:08,400
video conferencing apps

640
00:21:08,400 --> 00:21:12,720
um i saw that that's often a native code

641
00:21:12,720 --> 00:21:14,799
so and that narrowed it down to just

642
00:21:14,799 --> 00:21:16,000
native libraries

643
00:21:16,000 --> 00:21:18,720
however whatsapp had 16 of them for each

644
00:21:18,720 --> 00:21:20,080
of the different architectures it

645
00:21:20,080 --> 00:21:21,200
supported

646
00:21:21,200 --> 00:21:23,200
so the next step is figuring out which

647
00:21:23,200 --> 00:21:24,480
of these is

648
00:21:24,480 --> 00:21:27,120
do you use and thankfully i turned my

649
00:21:27,120 --> 00:21:27,760
chair around

650
00:21:27,760 --> 00:21:30,000
asked natalie and she said oh if it's

651
00:21:30,000 --> 00:21:31,280
doing rtcp

652
00:21:31,280 --> 00:21:34,720
that's usually a string in whichever um

653
00:21:34,720 --> 00:21:37,039
elf is doing that behavior and lib

654
00:21:37,039 --> 00:21:37,840
whatsapp just

655
00:21:37,840 --> 00:21:41,360
so was the only one uh that had that

656
00:21:41,360 --> 00:21:41,919
string

657
00:21:41,919 --> 00:21:43,760
and so that is how i got to that point

658
00:21:43,760 --> 00:21:45,760
which is described in the other comp

659
00:21:45,760 --> 00:21:48,799
um conference presentation of how

660
00:21:48,799 --> 00:21:51,039
i started and how i made the decision of

661
00:21:51,039 --> 00:21:52,240
what to do

662
00:21:52,240 --> 00:21:54,080
binary patch stiffing on for that

663
00:21:54,080 --> 00:21:56,799
vulnerability

664
00:21:56,880 --> 00:21:59,039
um so i statically reverse engineered it

665
00:21:59,039 --> 00:22:00,880
then to understand the patch

666
00:22:00,880 --> 00:22:02,799
and then use dynamic tooling a tool

667
00:22:02,799 --> 00:22:04,960
called frida for dynamic instrumentation

668
00:22:04,960 --> 00:22:06,320
to understand

669
00:22:06,320 --> 00:22:08,240
how the patch function could be

670
00:22:08,240 --> 00:22:10,159
triggered

671
00:22:10,159 --> 00:22:12,640
and as i said to hear more about all of

672
00:22:12,640 --> 00:22:14,640
that go ahead and check out the other

673
00:22:14,640 --> 00:22:17,919
presentation the other

674
00:22:17,919 --> 00:22:20,960
attempt in my first failure case of

675
00:22:20,960 --> 00:22:23,360
attempting to root cause analysis of

676
00:22:23,360 --> 00:22:24,480
vulnerability

677
00:22:24,480 --> 00:22:27,760
was a windows 132k vulner that was

678
00:22:27,760 --> 00:22:30,480
disclosed last december it was detected

679
00:22:30,480 --> 00:22:30,799
by

680
00:22:30,799 --> 00:22:34,720
anton ivanov ivanov and alexei koulayev

681
00:22:34,720 --> 00:22:35,120
of

682
00:22:35,120 --> 00:22:38,480
kaspersky lab and the microsoft security

683
00:22:38,480 --> 00:22:38,960
advisor

684
00:22:38,960 --> 00:22:40,400
said that it's an elevation of

685
00:22:40,400 --> 00:22:42,559
privileged vulnerability that exists in

686
00:22:42,559 --> 00:22:43,440
microsoft

687
00:22:43,440 --> 00:22:45,600
when the win32k component fails to

688
00:22:45,600 --> 00:22:48,240
properly handle objects in memory

689
00:22:48,240 --> 00:22:50,000
so i've taken on this role at project

690
00:22:50,000 --> 00:22:52,320
zero wanting to study

691
00:22:52,320 --> 00:22:54,559
more zero days that are exploited in the

692
00:22:54,559 --> 00:22:55,360
wild

693
00:22:55,360 --> 00:22:58,480
but i had no windows experience and that

694
00:22:58,480 --> 00:22:59,919
seemed like a gap that i wanted to

695
00:22:59,919 --> 00:23:00,559
address

696
00:23:00,559 --> 00:23:03,440
so i figured hey this is as good a time

697
00:23:03,440 --> 00:23:03,679
as

698
00:23:03,679 --> 00:23:05,520
ever to jump in and start looking at

699
00:23:05,520 --> 00:23:07,440
windows for the first time

700
00:23:07,440 --> 00:23:10,080
so i attempted to begin patch binary

701
00:23:10,080 --> 00:23:11,520
patch stuffing this bug

702
00:23:11,520 --> 00:23:13,360
i thought i found it wrote up a rude

703
00:23:13,360 --> 00:23:15,679
cause on it wrote a pock to show how

704
00:23:15,679 --> 00:23:17,440
it's triggered

705
00:23:17,440 --> 00:23:19,840
um finished a full blog post on it 24

706
00:23:19,840 --> 00:23:21,679
hours before the blog post was set to be

707
00:23:21,679 --> 00:23:22,799
published

708
00:23:22,799 --> 00:23:25,440
we sent it to microsoft as we do for

709
00:23:25,440 --> 00:23:27,840
vendors just to give a heads up 24 hours

710
00:23:27,840 --> 00:23:30,640
beforehand and they came back and said

711
00:23:30,640 --> 00:23:31,360
nice work

712
00:23:31,360 --> 00:23:34,559
but this is the wrong vulnerability so i

713
00:23:34,559 --> 00:23:36,159
think this is one of the

714
00:23:36,159 --> 00:23:38,240
weaknesses or struggles of binary patch

715
00:23:38,240 --> 00:23:39,280
dipping is

716
00:23:39,280 --> 00:23:42,480
you're looking at a monolith of

717
00:23:42,480 --> 00:23:44,480
it can include lots and lots of

718
00:23:44,480 --> 00:23:46,000
different vulnerabilities within that

719
00:23:46,000 --> 00:23:46,799
file

720
00:23:46,799 --> 00:23:48,480
and it came down to i made a wrong

721
00:23:48,480 --> 00:23:50,400
assumption as i was getting ready to

722
00:23:50,400 --> 00:23:51,360
patch dev

723
00:23:51,360 --> 00:23:55,360
of i had updated this windows 7 vm

724
00:23:55,360 --> 00:23:57,440
and once i got to september the only

725
00:23:57,440 --> 00:23:59,440
other option windows update gave me was

726
00:23:59,440 --> 00:24:00,320
to update to

727
00:24:00,320 --> 00:24:03,200
december when the vulnerability was

728
00:24:03,200 --> 00:24:04,799
patched and despite all my

729
00:24:04,799 --> 00:24:07,279
maneuvering in the windows update um

730
00:24:07,279 --> 00:24:09,279
gooey i couldn't get it to offer me an

731
00:24:09,279 --> 00:24:10,159
october or

732
00:24:10,159 --> 00:24:13,520
november patch so i falsely

733
00:24:13,520 --> 00:24:16,240
or incorrectly assumed maybe they just

734
00:24:16,240 --> 00:24:16,640
want

735
00:24:16,640 --> 00:24:18,400
those it's an old piece of software

736
00:24:18,400 --> 00:24:20,320
maybe they don't do monthly

737
00:24:20,320 --> 00:24:23,600
so i patched september to

738
00:24:23,600 --> 00:24:25,600
december and it just so happened there

739
00:24:25,600 --> 00:24:27,200
ended up to be a vulnerability that

740
00:24:27,200 --> 00:24:28,960
matched all the details

741
00:24:28,960 --> 00:24:31,520
i knew about the exploit but it was

742
00:24:31,520 --> 00:24:33,279
actually patched in october and that's

743
00:24:33,279 --> 00:24:35,120
not the correct vulnerability

744
00:24:35,120 --> 00:24:38,000
so to hear more about that full process

745
00:24:38,000 --> 00:24:38,640
i did of

746
00:24:38,640 --> 00:24:40,240
getting up to speed on patch dipping on

747
00:24:40,240 --> 00:24:41,679
windows as well as

748
00:24:41,679 --> 00:24:43,840
what happened and what went wrong feel

749
00:24:43,840 --> 00:24:45,520
free to check out the blog post

750
00:24:45,520 --> 00:24:47,039
but i also think this is a great case

751
00:24:47,039 --> 00:24:48,960
because pielter florchik

752
00:24:48,960 --> 00:24:51,200
got it right and so he also documented

753
00:24:51,200 --> 00:24:52,720
his process

754
00:24:52,720 --> 00:24:56,000
and showed how he got to the correct

755
00:24:56,000 --> 00:25:00,880
end result so some conclusions on binary

756
00:25:00,880 --> 00:25:02,480
patch dipping as a whole

757
00:25:02,480 --> 00:25:04,000
it's generally the most time consuming

758
00:25:04,000 --> 00:25:05,679
of all the methods but it's also one of

759
00:25:05,679 --> 00:25:07,440
the most documented and there's

760
00:25:07,440 --> 00:25:09,520
a lot of tooling that's gone into it and

761
00:25:09,520 --> 00:25:11,840
research gotten into it

762
00:25:11,840 --> 00:25:14,720
so that's cool and interesting this is

763
00:25:14,720 --> 00:25:16,400
one that usually only needs to be done

764
00:25:16,400 --> 00:25:17,679
if you're playing the role of third

765
00:25:17,679 --> 00:25:18,640
parties

766
00:25:18,640 --> 00:25:22,000
not as much vendors or detectors

767
00:25:22,000 --> 00:25:23,440
but i do think it has the highest

768
00:25:23,440 --> 00:25:24,880
likelihood of getting it wrong and

769
00:25:24,880 --> 00:25:27,120
sometimes not even realizing

770
00:25:27,120 --> 00:25:29,600
you got it wrong like in my case where i

771
00:25:29,600 --> 00:25:31,520
ended up reversing the wrong

772
00:25:31,520 --> 00:25:34,559
vulnerability and so i think that's

773
00:25:34,559 --> 00:25:35,440
something to get

774
00:25:35,440 --> 00:25:37,840
keep in mind of what's your goals and

775
00:25:37,840 --> 00:25:40,720
constantly evaluating against

776
00:25:40,720 --> 00:25:42,400
the amount of investment resources it

777
00:25:42,400 --> 00:25:44,559
takes

778
00:25:44,559 --> 00:25:46,480
so the next category is source code

779
00:25:46,480 --> 00:25:47,600
patch diffing

780
00:25:47,600 --> 00:25:49,760
so this will happen as i said much more

781
00:25:49,760 --> 00:25:51,760
often when you're looking at

782
00:25:51,760 --> 00:25:53,919
vulnerabilities or exploits targeting

783
00:25:53,919 --> 00:25:54,960
open source

784
00:25:54,960 --> 00:25:57,600
software so in this case this is firefox

785
00:25:57,600 --> 00:25:59,559
it was actually disclosed in january of

786
00:25:59,559 --> 00:26:00,720
2020

787
00:26:00,720 --> 00:26:03,600
not even though it has a 2019 cve and it

788
00:26:03,600 --> 00:26:05,919
was detected by chihu

789
00:26:05,919 --> 00:26:09,200
samuel gross from our team analyzed it

790
00:26:09,200 --> 00:26:13,360
the mozilla bug security report is now

791
00:26:13,360 --> 00:26:16,720
public and de-restricted but when samuel

792
00:26:16,720 --> 00:26:19,520
completed his process it was not so he's

793
00:26:19,520 --> 00:26:21,679
going through the process of just

794
00:26:21,679 --> 00:26:23,520
of looking at the patch seal and only

795
00:26:23,520 --> 00:26:24,960
having the information that was in the

796
00:26:24,960 --> 00:26:25,520
most

797
00:26:25,520 --> 00:26:27,279
mozilla security advisory where they

798
00:26:27,279 --> 00:26:30,159
said it's an incorrect alias information

799
00:26:30,159 --> 00:26:32,799
an ion monkey jit compiler for setting

800
00:26:32,799 --> 00:26:34,640
array elements that could lead to a type

801
00:26:34,640 --> 00:26:37,120
confusion

802
00:26:37,120 --> 00:26:40,080
so two files were changed in this patch

803
00:26:40,080 --> 00:26:41,600
the first one being

804
00:26:41,600 --> 00:26:45,039
alias analysis.cpp and so what we see

805
00:26:45,039 --> 00:26:47,440
in this file is that there's this giant

806
00:26:47,440 --> 00:26:49,039
switch case statement

807
00:26:49,039 --> 00:26:50,720
and they're moving the store element

808
00:26:50,720 --> 00:26:52,960
hole and the fallible store element

809
00:26:52,960 --> 00:26:55,440
operations from one section of the case

810
00:26:55,440 --> 00:26:56,799
to another

811
00:26:56,799 --> 00:26:58,400
okay so we're looking at store element

812
00:26:58,400 --> 00:27:01,200
whole infallible store element

813
00:27:01,200 --> 00:27:02,640
the other change is much more

814
00:27:02,640 --> 00:27:04,480
informative so it's in

815
00:27:04,480 --> 00:27:07,679
mir.h which is medium

816
00:27:07,679 --> 00:27:09,679
intermediate representation i think the

817
00:27:09,679 --> 00:27:12,400
mi might have gotten wrong

818
00:27:12,400 --> 00:27:15,760
but you get the gist and so we see that

819
00:27:15,760 --> 00:27:19,600
they're actually only doing deletions

820
00:27:19,600 --> 00:27:21,279
and so the vulnerability is within the

821
00:27:21,279 --> 00:27:23,360
alias information

822
00:27:23,360 --> 00:27:25,679
and this alias information describes any

823
00:27:25,679 --> 00:27:26,799
side effects

824
00:27:26,799 --> 00:27:30,240
a jit operation can have so

825
00:27:30,240 --> 00:27:32,159
in this case they're changing the store

826
00:27:32,159 --> 00:27:34,159
element whole infallible store element

827
00:27:34,159 --> 00:27:35,360
operations

828
00:27:35,360 --> 00:27:37,120
and what they're doing is that

829
00:27:37,120 --> 00:27:38,480
originally

830
00:27:38,480 --> 00:27:40,159
the code said that store element hole

831
00:27:40,159 --> 00:27:41,679
and fallible store element

832
00:27:41,679 --> 00:27:43,120
the side effects they can have is they

833
00:27:43,120 --> 00:27:45,120
can only influence

834
00:27:45,120 --> 00:27:47,679
the object fields in the element fields

835
00:27:47,679 --> 00:27:49,039
but this was incorrect

836
00:27:49,039 --> 00:27:52,240
because they could actually influence um

837
00:27:52,240 --> 00:27:55,440
anything and so by deleting this

838
00:27:55,440 --> 00:27:58,880
they're now telling the jit compiler hey

839
00:27:58,880 --> 00:28:02,240
store element hall infallible

840
00:28:02,240 --> 00:28:04,640
store element need to be more

841
00:28:04,640 --> 00:28:05,760
generalized

842
00:28:05,760 --> 00:28:08,399
so if you execute one of these assume

843
00:28:08,399 --> 00:28:10,480
anything can be changed

844
00:28:10,480 --> 00:28:13,919
and looking at this samuel was like

845
00:28:13,919 --> 00:28:16,000
immediately this is an incorrect side

846
00:28:16,000 --> 00:28:17,679
effect modeling issue in the

847
00:28:17,679 --> 00:28:21,279
jit engine samuel also an expert in this

848
00:28:21,279 --> 00:28:23,360
bug class specifically as well as jet

849
00:28:23,360 --> 00:28:26,080
engine exploitation

850
00:28:26,080 --> 00:28:28,320
so from there he had the bug class

851
00:28:28,320 --> 00:28:30,000
within you know a couple minutes

852
00:28:30,000 --> 00:28:32,640
of opening the patch but it still took

853
00:28:32,640 --> 00:28:34,640
him two days to figure out the poc

854
00:28:34,640 --> 00:28:36,240
so the process he went through is from

855
00:28:36,240 --> 00:28:38,080
looking at that patch he was like

856
00:28:38,080 --> 00:28:40,640
huh this likely causes unexpected

857
00:28:40,640 --> 00:28:44,880
execution of arbitrary javascript um

858
00:28:44,880 --> 00:28:47,600
maybe that's indexed indexed accessors

859
00:28:47,600 --> 00:28:49,200
in the prototype chain

860
00:28:49,200 --> 00:28:53,520
no legit compiler guards against that

861
00:28:53,520 --> 00:28:56,480
but the thing is is they will happily

862
00:28:56,480 --> 00:28:57,360
accept

863
00:28:57,360 --> 00:28:59,760
negative numbers as the index and so

864
00:28:59,760 --> 00:29:01,600
when they accept that negative number as

865
00:29:01,600 --> 00:29:04,399
the index it allows writing a property

866
00:29:04,399 --> 00:29:06,480
and not an element and these are arrays

867
00:29:06,480 --> 00:29:08,320
so you're writing the array property

868
00:29:08,320 --> 00:29:09,520
instead of an array

869
00:29:09,520 --> 00:29:13,440
element and so if there's a property

870
00:29:13,440 --> 00:29:15,919
setter on the property negative one

871
00:29:15,919 --> 00:29:19,039
that will pass the jits requirements um

872
00:29:19,039 --> 00:29:19,600
about

873
00:29:19,600 --> 00:29:21,919
what input objects are allowed but it's

874
00:29:21,919 --> 00:29:23,200
also going to

875
00:29:23,200 --> 00:29:25,840
cause unexpected execution of javascript

876
00:29:25,840 --> 00:29:26,480
during

877
00:29:26,480 --> 00:29:29,279
those two operations so that's through

878
00:29:29,279 --> 00:29:31,600
cause vulnerability

879
00:29:31,600 --> 00:29:33,200
and so from that i thought it was

880
00:29:33,200 --> 00:29:34,960
interesting in this case how

881
00:29:34,960 --> 00:29:37,279
samuel was like it was immediately

882
00:29:37,279 --> 00:29:38,399
obvious to me

883
00:29:38,399 --> 00:29:41,360
what that bug class was but to get down

884
00:29:41,360 --> 00:29:41,919
to

885
00:29:41,919 --> 00:29:43,919
fully understand the vulnerability such

886
00:29:43,919 --> 00:29:45,360
that you can write a trigger or

887
00:29:45,360 --> 00:29:48,399
poc for it it took much more time

888
00:29:48,399 --> 00:29:50,799
and so that keeps us thinking of huh

889
00:29:50,799 --> 00:29:52,240
with someone with minimal or no

890
00:29:52,240 --> 00:29:53,200
experience

891
00:29:53,200 --> 00:29:55,360
have been able to figure it out as well

892
00:29:55,360 --> 00:29:56,960
i think that experience probably was

893
00:29:56,960 --> 00:29:59,600
pretty critical

894
00:30:00,000 --> 00:30:02,559
the second case study here is another

895
00:30:02,559 --> 00:30:03,919
firefox bug because i thought it would

896
00:30:03,919 --> 00:30:05,520
be interesting to do a tale of two

897
00:30:05,520 --> 00:30:06,480
firefoxes

898
00:30:06,480 --> 00:30:08,720
and compare them and this is another

899
00:30:08,720 --> 00:30:09,760
failure case

900
00:30:09,760 --> 00:30:11,760
if we want to call back or learning you

901
00:30:11,760 --> 00:30:13,760
know development opportunity

902
00:30:13,760 --> 00:30:16,720
um so this one was disclosed in april of

903
00:30:16,720 --> 00:30:18,159
this year and it was detected by

904
00:30:18,159 --> 00:30:19,600
francisco alonso

905
00:30:19,600 --> 00:30:22,240
and javier marcus and the security

906
00:30:22,240 --> 00:30:23,440
advisory said

907
00:30:23,440 --> 00:30:25,679
under certain conditions when handling a

908
00:30:25,679 --> 00:30:26,640
readable stream

909
00:30:26,640 --> 00:30:28,720
a race condition can cause a use after

910
00:30:28,720 --> 00:30:30,000
free

911
00:30:30,000 --> 00:30:33,279
sees pretty descriptive and you know

912
00:30:33,279 --> 00:30:34,799
talking about readable strings race

913
00:30:34,799 --> 00:30:36,799
conditions used after free

914
00:30:36,799 --> 00:30:40,159
so the bug was still de-restricted

915
00:30:40,159 --> 00:30:41,679
mozilla usually keeps them it seems

916
00:30:41,679 --> 00:30:43,520
de-restricted for

917
00:30:43,520 --> 00:30:46,399
three to six months-ish but we had the

918
00:30:46,399 --> 00:30:49,039
patch cl

919
00:30:49,039 --> 00:30:52,159
so the patch is actually in the cache

920
00:30:52,159 --> 00:30:55,360
subsystem in the streamless.cpp

921
00:30:55,360 --> 00:30:57,279
file this is the only file that was

922
00:30:57,279 --> 00:30:59,360
changed and they only changed this one

923
00:30:59,360 --> 00:31:00,080
function

924
00:31:00,080 --> 00:31:03,200
streamless close all and so the changes

925
00:31:03,200 --> 00:31:04,640
is that originally

926
00:31:04,640 --> 00:31:07,679
streamless close all would call

927
00:31:07,679 --> 00:31:11,120
on the stream control object close all

928
00:31:11,120 --> 00:31:12,960
stream control is the parent or the

929
00:31:12,960 --> 00:31:15,039
browser side of the ipdl interface

930
00:31:15,039 --> 00:31:16,880
so this actually took me a while to

931
00:31:16,880 --> 00:31:19,039
figure out because like the windows one

932
00:31:19,039 --> 00:31:19,679
i had

933
00:31:19,679 --> 00:31:22,080
no browser experience but thought huh i

934
00:31:22,080 --> 00:31:23,919
want to give this firefox thing a shot

935
00:31:23,919 --> 00:31:25,519
and see how this turns out

936
00:31:25,519 --> 00:31:28,399
and so ibdl it turns out is the ipc

937
00:31:28,399 --> 00:31:29,600
mechanism

938
00:31:29,600 --> 00:31:32,399
within firefox so it's allowing browser

939
00:31:32,399 --> 00:31:34,159
side process to communicate with a

940
00:31:34,159 --> 00:31:36,159
render or content side

941
00:31:36,159 --> 00:31:39,200
process so

942
00:31:39,200 --> 00:31:40,720
what they're doing is instead of just

943
00:31:40,720 --> 00:31:42,399
calling close all they're first setting

944
00:31:42,399 --> 00:31:44,080
that stream control pointer

945
00:31:44,080 --> 00:31:46,159
to null and then calling the stream

946
00:31:46,159 --> 00:31:47,600
control close all

947
00:31:47,600 --> 00:31:50,799
and then calling shutdown

948
00:31:51,279 --> 00:31:53,519
so if we're setting it to null my first

949
00:31:53,519 --> 00:31:54,799
thought is

950
00:31:54,799 --> 00:31:57,519
where else is stream control checked

951
00:31:57,519 --> 00:31:59,519
what else can it influence

952
00:31:59,519 --> 00:32:00,720
and so it turns out there's four

953
00:32:00,720 --> 00:32:02,320
different places that check whether or

954
00:32:02,320 --> 00:32:04,399
not stream control is null

955
00:32:04,399 --> 00:32:07,120
and each of these functions if stream

956
00:32:07,120 --> 00:32:08,080
control is not

957
00:32:08,080 --> 00:32:11,200
null we'll call close

958
00:32:11,200 --> 00:32:13,919
or shut down on the stream control so my

959
00:32:13,919 --> 00:32:14,720
first thought

960
00:32:14,720 --> 00:32:17,840
about this is suddenly huh maybe that

961
00:32:17,840 --> 00:32:19,039
used after free is

962
00:32:19,039 --> 00:32:21,360
two threads two of these calls racing

963
00:32:21,360 --> 00:32:23,200
with each other such that in one case

964
00:32:23,200 --> 00:32:24,000
it's freed

965
00:32:24,000 --> 00:32:25,519
and then they're still calling the other

966
00:32:25,519 --> 00:32:27,200
clothes are shut down

967
00:32:27,200 --> 00:32:29,279
and so this seemed to start panning out

968
00:32:29,279 --> 00:32:30,640
because

969
00:32:30,640 --> 00:32:33,039
the shutdown call will end up calling

970
00:32:33,039 --> 00:32:34,799
sends delete which does the free

971
00:32:34,799 --> 00:32:37,840
on the stream control

972
00:32:37,840 --> 00:32:39,600
so my process after this of what i

973
00:32:39,600 --> 00:32:41,120
thought you know coming in with a very

974
00:32:41,120 --> 00:32:42,000
naive

975
00:32:42,000 --> 00:32:44,399
not really knowing ipdl or any browser

976
00:32:44,399 --> 00:32:45,200
internals

977
00:32:45,200 --> 00:32:47,120
so my first thought is figure out how to

978
00:32:47,120 --> 00:32:49,679
trigger streamless clothes all

979
00:32:49,679 --> 00:32:51,679
and that actually happened pretty

980
00:32:51,679 --> 00:32:52,840
quickly figured out

981
00:32:52,840 --> 00:32:57,039
caches.delete that's how i can call it

982
00:32:57,039 --> 00:32:59,279
the next step was i thought huh maybe i

983
00:32:59,279 --> 00:33:01,200
should find two ways to trigger it

984
00:33:01,200 --> 00:33:04,559
because um that is how uh

985
00:33:04,559 --> 00:33:06,320
it might have to race or something like

986
00:33:06,320 --> 00:33:08,960
that um so to do that which

987
00:33:08,960 --> 00:33:11,600
um i got some suggestions from sergey

988
00:33:11,600 --> 00:33:12,720
and i think

989
00:33:12,720 --> 00:33:15,840
samuel or mark on our team that run the

990
00:33:15,840 --> 00:33:16,880
unit tests

991
00:33:16,880 --> 00:33:18,640
for it to see if anything else can

992
00:33:18,640 --> 00:33:20,159
trigger that code

993
00:33:20,159 --> 00:33:22,640
so that's what i did and i found that

994
00:33:22,640 --> 00:33:23,919
there was this other function that

995
00:33:23,919 --> 00:33:24,880
allowed it

996
00:33:24,880 --> 00:33:26,720
but this highlighted where i'd made a

997
00:33:26,720 --> 00:33:28,080
wrong assumption

998
00:33:28,080 --> 00:33:30,799
of there this and another vulnerability

999
00:33:30,799 --> 00:33:31,679
were both

1000
00:33:31,679 --> 00:33:33,600
disclosed at the same time so you make

1001
00:33:33,600 --> 00:33:34,720
the safe assumption

1002
00:33:34,720 --> 00:33:36,960
of one's going to be a renderer exploit

1003
00:33:36,960 --> 00:33:38,159
and what's going to be the sandbox

1004
00:33:38,159 --> 00:33:41,200
escape i had for some reason i don't

1005
00:33:41,200 --> 00:33:43,120
know that i made the conscious decision

1006
00:33:43,120 --> 00:33:45,279
but i'd been operating as if this was

1007
00:33:45,279 --> 00:33:47,519
the renderer exploit

1008
00:33:47,519 --> 00:33:50,320
but you couldn't call clear storages for

1009
00:33:50,320 --> 00:33:51,840
principle

1010
00:33:51,840 --> 00:33:55,519
from an unprivileged you know renderer

1011
00:33:55,519 --> 00:33:57,360
and that's when i realized that no

1012
00:33:57,360 --> 00:33:59,519
streamless close all is on the browser

1013
00:33:59,519 --> 00:34:00,000
side

1014
00:34:00,000 --> 00:34:03,440
and so this is actually the sandbox

1015
00:34:03,440 --> 00:34:04,080
escape

1016
00:34:04,080 --> 00:34:06,480
and the other one was the render exploit

1017
00:34:06,480 --> 00:34:07,919
so now we can operate

1018
00:34:07,919 --> 00:34:10,239
as if we have a compromise renderer and

1019
00:34:10,239 --> 00:34:11,440
that's how we're triggering this

1020
00:34:11,440 --> 00:34:13,599
vulnerability

1021
00:34:13,599 --> 00:34:15,760
so the next step i thought was huh so

1022
00:34:15,760 --> 00:34:17,119
now let's try and do this from two

1023
00:34:17,119 --> 00:34:18,159
different threads

1024
00:34:18,159 --> 00:34:20,560
there's a race condition going on but i

1025
00:34:20,560 --> 00:34:21,679
can never get that

1026
00:34:21,679 --> 00:34:23,280
and it makes sense now that i understand

1027
00:34:23,280 --> 00:34:26,000
more about ipdl of that there's only one

1028
00:34:26,000 --> 00:34:28,800
parent side of that interface but with

1029
00:34:28,800 --> 00:34:30,399
all of my tests i could only get the

1030
00:34:30,399 --> 00:34:30,879
calls

1031
00:34:30,879 --> 00:34:33,520
queued not in a place where they race

1032
00:34:33,520 --> 00:34:34,000
with each

1033
00:34:34,000 --> 00:34:37,199
other and at that point i decide it's

1034
00:34:37,199 --> 00:34:38,639
time for me to move on

1035
00:34:38,639 --> 00:34:40,639
i had a look at what was the return on

1036
00:34:40,639 --> 00:34:41,760
investment

1037
00:34:41,760 --> 00:34:44,399
when i knew the bug would be restricted

1038
00:34:44,399 --> 00:34:45,119
at some point

1039
00:34:45,119 --> 00:34:47,280
and the reporters of the exploit had

1040
00:34:47,280 --> 00:34:49,119
also said they'd write a blog post

1041
00:34:49,119 --> 00:34:51,839
so that's where i decided to pause call

1042
00:34:51,839 --> 00:34:52,399
it

1043
00:34:52,399 --> 00:34:54,000
and i actually started more research on

1044
00:34:54,000 --> 00:34:55,839
ipdl because i thought this would be

1045
00:34:55,839 --> 00:34:58,560
interesting to learn more about

1046
00:34:58,560 --> 00:35:00,720
fast forward i had spent more time

1047
00:35:00,720 --> 00:35:02,000
learning ipdl

1048
00:35:02,000 --> 00:35:04,720
internals and the bug is de-restricted

1049
00:35:04,720 --> 00:35:05,680
um

1050
00:35:05,680 --> 00:35:08,160
and it realized i got it wrong this what

1051
00:35:08,160 --> 00:35:09,920
didn't need to be the process

1052
00:35:09,920 --> 00:35:12,480
um it's not actually a race condition of

1053
00:35:12,480 --> 00:35:14,320
trying to get two of those calls

1054
00:35:14,320 --> 00:35:16,240
to race with each other from different

1055
00:35:16,240 --> 00:35:18,079
threads instead

1056
00:35:18,079 --> 00:35:20,240
you're actually there's a recursion

1057
00:35:20,240 --> 00:35:21,920
happening that allows for the use after

1058
00:35:21,920 --> 00:35:22,400
free

1059
00:35:22,400 --> 00:35:24,000
so i've made an incorrect assumption

1060
00:35:24,000 --> 00:35:25,760
that led to me going down

1061
00:35:25,760 --> 00:35:27,680
a process that of course was going to

1062
00:35:27,680 --> 00:35:30,079
have me spin my wheels

1063
00:35:30,079 --> 00:35:33,200
and so some closing thoughts of nope

1064
00:35:33,200 --> 00:35:34,720
i didn't figure out the root cause

1065
00:35:34,720 --> 00:35:37,359
vulnerability in a timely way

1066
00:35:37,359 --> 00:35:39,839
i ran into a couple of hurdles of

1067
00:35:39,839 --> 00:35:41,760
assuming it was a render exploit not the

1068
00:35:41,760 --> 00:35:44,079
sandbox escape as well as getting stuck

1069
00:35:44,079 --> 00:35:47,680
in ipl internals and trusting the term

1070
00:35:47,680 --> 00:35:50,640
race condition um but it's also

1071
00:35:50,640 --> 00:35:52,720
promising of that as soon as the bug

1072
00:35:52,720 --> 00:35:54,720
report was de-restricted it was really

1073
00:35:54,720 --> 00:35:56,079
obvious to me exactly what the

1074
00:35:56,079 --> 00:35:57,280
vulnerability was

1075
00:35:57,280 --> 00:36:00,320
which means likely more prepared

1076
00:36:00,320 --> 00:36:02,480
in the future and so i hope no one gets

1077
00:36:02,480 --> 00:36:04,320
discouraged if

1078
00:36:04,320 --> 00:36:06,000
you have failures early on but want to

1079
00:36:06,000 --> 00:36:08,079
get into the stuff of just keep going

1080
00:36:08,079 --> 00:36:09,599
just keep working it's a normal part of

1081
00:36:09,599 --> 00:36:12,079
the process

1082
00:36:12,079 --> 00:36:13,839
and a few more source code patch

1083
00:36:13,839 --> 00:36:15,440
differing conclusions as i'm getting

1084
00:36:15,440 --> 00:36:16,800
tied on time

1085
00:36:16,800 --> 00:36:19,760
of more likelihood of getting correct

1086
00:36:19,760 --> 00:36:22,000
than binary patch diffing due to it only

1087
00:36:22,000 --> 00:36:24,079
being one fix at a time

1088
00:36:24,079 --> 00:36:25,280
but i think something we have to

1089
00:36:25,280 --> 00:36:28,000
remember is that in order to do source

1090
00:36:28,000 --> 00:36:29,760
code patch diving effectively

1091
00:36:29,760 --> 00:36:32,000
we do really rely on transparency from

1092
00:36:32,000 --> 00:36:32,880
vendors

1093
00:36:32,880 --> 00:36:35,839
i know vendors um don't do transparency

1094
00:36:35,839 --> 00:36:36,880
exactly to

1095
00:36:36,880 --> 00:36:39,200
prevent source code patch stiffing but

1096
00:36:39,200 --> 00:36:41,040
we need to remember that in those cases

1097
00:36:41,040 --> 00:36:42,320
the attackers still know

1098
00:36:42,320 --> 00:36:44,000
what the vulnerability is so they are

1099
00:36:44,000 --> 00:36:45,760
operating with

1100
00:36:45,760 --> 00:36:48,640
more knowledge about what went on in the

1101
00:36:48,640 --> 00:36:49,920
security issues

1102
00:36:49,920 --> 00:36:52,720
than us as the defenders so hopefully

1103
00:36:52,720 --> 00:36:54,880
vendors will continue to be transparent

1104
00:36:54,880 --> 00:36:55,440
that

1105
00:36:55,440 --> 00:36:57,920
this is a security fix or this fix in

1106
00:36:57,920 --> 00:36:59,359
our

1107
00:36:59,359 --> 00:37:04,720
repos was for this bug for example

1108
00:37:04,720 --> 00:37:08,240
so lastly super quickly um

1109
00:37:08,240 --> 00:37:10,240
sometimes you get tips about an exploit

1110
00:37:10,240 --> 00:37:11,839
and that happened for me on the android

1111
00:37:11,839 --> 00:37:12,560
binder bug

1112
00:37:12,560 --> 00:37:15,680
that i reported and was disclosed last

1113
00:37:15,680 --> 00:37:16,400
fall

1114
00:37:16,400 --> 00:37:18,640
so how it started i received a scripted

1115
00:37:18,640 --> 00:37:20,400
list of characteristics about the

1116
00:37:20,400 --> 00:37:21,760
exploit

1117
00:37:21,760 --> 00:37:23,920
i go into this in full details about the

1118
00:37:23,920 --> 00:37:25,760
process what happened

1119
00:37:25,760 --> 00:37:28,800
if you want to know why we you know all

1120
00:37:28,800 --> 00:37:29,520
that stuff

1121
00:37:29,520 --> 00:37:31,280
in the blog post as well as an offensive

1122
00:37:31,280 --> 00:37:33,359
con presentation

1123
00:37:33,359 --> 00:37:35,200
but what i wanted to highlight is so i

1124
00:37:35,200 --> 00:37:36,400
got these details

1125
00:37:36,400 --> 00:37:37,680
what do you do with it because this

1126
00:37:37,680 --> 00:37:39,520
isn't something that never happens in

1127
00:37:39,520 --> 00:37:41,119
our industry it actually happens

1128
00:37:41,119 --> 00:37:43,200
a fair amount for people but it can seem

1129
00:37:43,200 --> 00:37:44,720
very intimidating to be

1130
00:37:44,720 --> 00:37:48,079
where do i start so first i

1131
00:37:48,079 --> 00:37:49,599
combed through change logs and patches

1132
00:37:49,599 --> 00:37:51,280
because that was one of the big things

1133
00:37:51,280 --> 00:37:52,400
and the focus was

1134
00:37:52,400 --> 00:37:54,000
how do i break this down and use

1135
00:37:54,000 --> 00:37:55,839
programmatic efforts

1136
00:37:55,839 --> 00:37:59,119
to really narrow down the area i need to

1137
00:37:59,119 --> 00:38:00,880
search for so for me that was

1138
00:38:00,880 --> 00:38:03,760
what's in pixel 3 but not pixel 2 as

1139
00:38:03,760 --> 00:38:04,000
well

1140
00:38:04,000 --> 00:38:05,760
as using the linux kernel mailing list

1141
00:38:05,760 --> 00:38:07,119
to look for any patches

1142
00:38:07,119 --> 00:38:09,599
that affected listad or list dell due to

1143
00:38:09,599 --> 00:38:11,680
the information in the description about

1144
00:38:11,680 --> 00:38:15,839
config debug list and so one thing that

1145
00:38:15,839 --> 00:38:17,359
haven't talked about as much is that i

1146
00:38:17,359 --> 00:38:19,280
originally thought i found the bug

1147
00:38:19,280 --> 00:38:21,119
but once i got into finally comparing it

1148
00:38:21,119 --> 00:38:22,400
to all the details

1149
00:38:22,400 --> 00:38:24,240
it didn't match a single one of those it

1150
00:38:24,240 --> 00:38:26,079
didn't match one of those details it

1151
00:38:26,079 --> 00:38:27,760
matched all the rest

1152
00:38:27,760 --> 00:38:30,079
and the other thing is sure maybe things

1153
00:38:30,079 --> 00:38:31,760
have changed since the detail list had

1154
00:38:31,760 --> 00:38:32,000
come

1155
00:38:32,000 --> 00:38:34,400
out but it also seemed very complex to

1156
00:38:34,400 --> 00:38:35,119
exploit

1157
00:38:35,119 --> 00:38:37,040
when you could likely find an easier bug

1158
00:38:37,040 --> 00:38:39,280
to exploit and so it just didn't feel

1159
00:38:39,280 --> 00:38:40,560
right

1160
00:38:40,560 --> 00:38:43,040
but getting one more detail allowed me

1161
00:38:43,040 --> 00:38:44,240
to find it within

1162
00:38:44,240 --> 00:38:46,160
i think it was one or two working days

1163
00:38:46,160 --> 00:38:47,359
um

1164
00:38:47,359 --> 00:38:49,839
and so using that information to

1165
00:38:49,839 --> 00:38:50,560
identify

1166
00:38:50,560 --> 00:38:52,800
exactly what the vulnerability was with

1167
00:38:52,800 --> 00:38:54,720
um extremely high level of confidence

1168
00:38:54,720 --> 00:38:56,240
nothing else matched

1169
00:38:56,240 --> 00:38:59,359
um can just make a difference

1170
00:38:59,359 --> 00:39:02,160
and so some of the the biggest thing i

1171
00:39:02,160 --> 00:39:03,440
would like to highlight here is that

1172
00:39:03,440 --> 00:39:05,040
when we're talking about role

1173
00:39:05,040 --> 00:39:06,640
and we're talking about investment is

1174
00:39:06,640 --> 00:39:08,480
that oftentimes if you receive these

1175
00:39:08,480 --> 00:39:10,079
details about the exploit

1176
00:39:10,079 --> 00:39:12,000
it means that it is still actively being

1177
00:39:12,000 --> 00:39:13,280
exploited with

1178
00:39:13,280 --> 00:39:15,680
no one knows what the patch is no patch

1179
00:39:15,680 --> 00:39:17,119
has been deployed

1180
00:39:17,119 --> 00:39:20,160
and so there is a much bigger return on

1181
00:39:20,160 --> 00:39:21,200
that investment

1182
00:39:21,200 --> 00:39:23,119
of really going in because otherwise

1183
00:39:23,119 --> 00:39:24,800
it's going to continue to be exploited

1184
00:39:24,800 --> 00:39:26,160
without being fixed

1185
00:39:26,160 --> 00:39:29,280
so i hope we all try and do that

1186
00:39:29,280 --> 00:39:31,040
as well as continue to build tooling

1187
00:39:31,040 --> 00:39:32,720
that allows some of those details to be

1188
00:39:32,720 --> 00:39:34,480
searchable programmatically

1189
00:39:34,480 --> 00:39:37,920
rather than having to be manual

1190
00:39:38,400 --> 00:39:40,640
that was whirlwind but my conclusion for

1191
00:39:40,640 --> 00:39:41,760
you is

1192
00:39:41,760 --> 00:39:44,079
that one i think there's a lot of

1193
00:39:44,079 --> 00:39:45,040
innovation

1194
00:39:45,040 --> 00:39:47,040
happening in this process that we can

1195
00:39:47,040 --> 00:39:48,320
share with each other even though we

1196
00:39:48,320 --> 00:39:49,520
tend to talk about

1197
00:39:49,520 --> 00:39:52,320
it as reverse engineering as a monolith

1198
00:39:52,320 --> 00:39:52,800
but

1199
00:39:52,800 --> 00:39:54,240
i thought it was really cool you know

1200
00:39:54,240 --> 00:39:56,720
the test case minimizer forcing crash

1201
00:39:56,720 --> 00:39:58,240
while running etc

1202
00:39:58,240 --> 00:39:59,920
so i hope we all continue to share the

1203
00:39:59,920 --> 00:40:01,760
different techniques we use with each

1204
00:40:01,760 --> 00:40:02,090
other

1205
00:40:02,090 --> 00:40:03,599
[Music]

1206
00:40:03,599 --> 00:40:06,400
and i would also say something that's

1207
00:40:06,400 --> 00:40:08,000
been struggle for me

1208
00:40:08,000 --> 00:40:09,680
is making sure i challenge any

1209
00:40:09,680 --> 00:40:11,520
assumptions that come from descriptions

1210
00:40:11,520 --> 00:40:13,359
whether that's people's blog posts

1211
00:40:13,359 --> 00:40:17,119
or an advisory is not taking that as

1212
00:40:17,119 --> 00:40:19,599
you know sort of the word but really

1213
00:40:19,599 --> 00:40:20,960
thinking about because a lot of the

1214
00:40:20,960 --> 00:40:22,560
terms of art we use

1215
00:40:22,560 --> 00:40:24,160
can mean slightly different things to

1216
00:40:24,160 --> 00:40:25,599
different people

1217
00:40:25,599 --> 00:40:27,760
but lastly the biggest guarantor for

1218
00:40:27,760 --> 00:40:29,119
success is in

1219
00:40:29,119 --> 00:40:30,560
in-depth knowledge of the target and

1220
00:40:30,560 --> 00:40:33,200
exploit death and that's not shocking

1221
00:40:33,200 --> 00:40:35,520
um to any of us especially when you

1222
00:40:35,520 --> 00:40:36,240
consider

1223
00:40:36,240 --> 00:40:39,520
how many people report bugs

1224
00:40:39,520 --> 00:40:41,440
or exploits without doing that root

1225
00:40:41,440 --> 00:40:43,119
cause vulnerability analysis they just

1226
00:40:43,119 --> 00:40:45,040
send it to a vendor with a crash

1227
00:40:45,040 --> 00:40:48,319
or a sample because it is hard and it's

1228
00:40:48,319 --> 00:40:50,480
not a specific technique is going to fix

1229
00:40:50,480 --> 00:40:51,200
that

1230
00:40:51,200 --> 00:40:53,200
but the cool thing is is we can all grow

1231
00:40:53,200 --> 00:40:55,359
experience we can work on

1232
00:40:55,359 --> 00:40:57,040
growing our red team exploit dev

1233
00:40:57,040 --> 00:40:58,640
knowledge we can work on really digging

1234
00:40:58,640 --> 00:41:00,079
into a single platform

1235
00:41:00,079 --> 00:41:02,000
so we can all do this and continue to

1236
00:41:02,000 --> 00:41:04,319
contribute to that root causing

1237
00:41:04,319 --> 00:41:06,560
and with that thank you i hope you

1238
00:41:06,560 --> 00:41:08,000
enjoyed this from your couch and your

1239
00:41:08,000 --> 00:41:08,640
sweats

1240
00:41:08,640 --> 00:41:10,960
and as i said there's lots of resources

1241
00:41:10,960 --> 00:41:12,720
um available as well as

1242
00:41:12,720 --> 00:41:14,560
the detailed root cause analysis for

1243
00:41:14,560 --> 00:41:16,480
each of these zero days as well as

1244
00:41:16,480 --> 00:41:17,119
others

1245
00:41:17,119 --> 00:41:21,839
on the project zero website so thank you

1246
00:41:21,839 --> 00:41:24,640
hello um thank you all for coming i've

1247
00:41:24,640 --> 00:41:26,880
been told that i did a very long talk so

1248
00:41:26,880 --> 00:41:28,160
we don't really have

1249
00:41:28,160 --> 00:41:30,400
any time for questions but i appreciate

1250
00:41:30,400 --> 00:41:31,440
y'all tuning in

1251
00:41:31,440 --> 00:41:33,920
feel free to contact me on twitter or my

1252
00:41:33,920 --> 00:41:35,920
email is maddiestone at google

1253
00:41:35,920 --> 00:41:38,160
if you want to talk more about this um

1254
00:41:38,160 --> 00:41:39,760
as well as i'll get the slides up

1255
00:41:39,760 --> 00:41:41,839
and lots of resources and i'll stay on

1256
00:41:41,839 --> 00:41:44,640
chat for a little bit longer

1257
00:41:44,640 --> 00:41:48,560
so thanks again

