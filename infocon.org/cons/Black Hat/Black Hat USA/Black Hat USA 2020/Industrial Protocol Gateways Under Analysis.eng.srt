1
00:00:04,320 --> 00:00:14,119
[Music]

2
00:00:14,960 --> 00:00:15,519
hello

3
00:00:15,519 --> 00:00:16,960
and welcome to the talk industrial

4
00:00:16,960 --> 00:00:18,800
protocol gateways under analysis

5
00:00:18,800 --> 00:00:20,480
my name is marco balduzz i work for

6
00:00:20,480 --> 00:00:22,640
tramiko research and this is a joint war

7
00:00:22,640 --> 00:00:23,840
between myself

8
00:00:23,840 --> 00:00:25,920
charles ryan reiner and philip from

9
00:00:25,920 --> 00:00:28,240
trent as well as independent researcher

10
00:00:28,240 --> 00:00:29,679
luca mon journey

11
00:00:29,679 --> 00:00:32,159
so today we talk of protocol gateways

12
00:00:32,159 --> 00:00:33,840
devices like this that have been in the

13
00:00:33,840 --> 00:00:34,719
market since

14
00:00:34,719 --> 00:00:37,040
many years now and we are heavily used

15
00:00:37,040 --> 00:00:38,800
in smart manufacturing

16
00:00:38,800 --> 00:00:40,559
and they play very very important role

17
00:00:40,559 --> 00:00:42,719
when it comes to the integration of it

18
00:00:42,719 --> 00:00:45,200
and ot this is because uh smart

19
00:00:45,200 --> 00:00:47,120
manufacturing plants they are very

20
00:00:47,120 --> 00:00:48,719
complex

21
00:00:48,719 --> 00:00:51,360
for example they might have different

22
00:00:51,360 --> 00:00:53,280
networking layers for example there is

23
00:00:53,280 --> 00:00:54,879
an enterprise layer in the top

24
00:00:54,879 --> 00:00:56,480
where you have a business logic of a

25
00:00:56,480 --> 00:00:58,960
company including the cloud and the data

26
00:00:58,960 --> 00:01:01,039
with a store over the internet then in

27
00:01:01,039 --> 00:01:03,280
the middle you have a control network

28
00:01:03,280 --> 00:01:05,438
that run for example a server for

29
00:01:05,438 --> 00:01:07,200
controlling the production and then down

30
00:01:07,200 --> 00:01:09,040
to the field network which is the lower

31
00:01:09,040 --> 00:01:09,760
network

32
00:01:09,760 --> 00:01:12,320
you have devices like plc's as well as a

33
00:01:12,320 --> 00:01:13,680
twitter motor

34
00:01:13,680 --> 00:01:15,520
and so on and so forth all these

35
00:01:15,520 --> 00:01:17,119
networks have to communicate

36
00:01:17,119 --> 00:01:20,320
and each network

37
00:01:20,320 --> 00:01:22,240
rely on different protocols and there

38
00:01:22,240 --> 00:01:23,920
are a lot of different protocols that

39
00:01:23,920 --> 00:01:24,880
are very

40
00:01:24,880 --> 00:01:26,960
similar to each other like for example

41
00:01:26,960 --> 00:01:28,560
profinet ethercat eight

42
00:01:28,560 --> 00:01:30,159
and so on and so forth but you need

43
00:01:30,159 --> 00:01:32,159
someone who needs something

44
00:01:32,159 --> 00:01:34,159
that you know can bridge this product

45
00:01:34,159 --> 00:01:35,680
all together and make all of these

46
00:01:35,680 --> 00:01:37,200
actually interesable no

47
00:01:37,200 --> 00:01:39,680
make always like talking to each other

48
00:01:39,680 --> 00:01:40,640
uh that's where

49
00:01:40,640 --> 00:01:42,560
protocol getter is coming place and they

50
00:01:42,560 --> 00:01:44,240
play a very important role

51
00:01:44,240 --> 00:01:46,159
so as you can see here on the screen

52
00:01:46,159 --> 00:01:47,600
this is an example of

53
00:01:47,600 --> 00:01:51,360
a actual gateway here in my hands

54
00:01:51,360 --> 00:01:52,960
uh it's pretty much long like 10

55
00:01:52,960 --> 00:01:54,479
centimeters or not big

56
00:01:54,479 --> 00:01:56,640
there are different interfaces and the

57
00:01:56,640 --> 00:01:58,560
gateway basically what it does

58
00:01:58,560 --> 00:02:01,200
it translates different protocols so you

59
00:02:01,200 --> 00:02:03,119
understand the semantic of the protocol

60
00:02:03,119 --> 00:02:04,719
it parses the protocol

61
00:02:04,719 --> 00:02:07,360
and you take appropriate action based on

62
00:02:07,360 --> 00:02:08,000
the inbound

63
00:02:08,000 --> 00:02:10,399
traffic you receive so it can connect an

64
00:02:10,399 --> 00:02:11,200
internet

65
00:02:11,200 --> 00:02:13,599
interface to wireless interface and

66
00:02:13,599 --> 00:02:15,520
interface with serial

67
00:02:15,520 --> 00:02:18,239
as well to the internet a typical

68
00:02:18,239 --> 00:02:19,520
installation like this one

69
00:02:19,520 --> 00:02:22,720
you have on screen so you have a network

70
00:02:22,720 --> 00:02:25,280
a green network on the top of the screen

71
00:02:25,280 --> 00:02:27,760
that might run for example tcp

72
00:02:27,760 --> 00:02:30,000
which could be normally like a control

73
00:02:30,000 --> 00:02:32,319
network no so you can have like a

74
00:02:32,319 --> 00:02:34,319
control network controlling the network

75
00:02:34,319 --> 00:02:35,360
here

76
00:02:35,360 --> 00:02:38,239
on orange red which is a field network

77
00:02:38,239 --> 00:02:40,319
and on the control network you have

78
00:02:40,319 --> 00:02:42,800
an hmi for example which is a master

79
00:02:42,800 --> 00:02:44,720
node so the node better take

80
00:02:44,720 --> 00:02:47,760
action that for example configure a

81
00:02:47,760 --> 00:02:50,400
relay based on the temperature read from

82
00:02:50,400 --> 00:02:52,879
a plc and so on and so forth

83
00:02:52,879 --> 00:02:55,440
suppose you have a master node on the

84
00:02:55,440 --> 00:02:57,040
green network that has to talk to a

85
00:02:57,040 --> 00:02:59,120
slave node of the orange network

86
00:02:59,120 --> 00:03:00,959
so what happened you have for example a

87
00:03:00,959 --> 00:03:02,319
tcp

88
00:03:02,319 --> 00:03:05,040
tcp modbus tcp node but in that case i

89
00:03:05,040 --> 00:03:07,200
have to talk to a modbus r2 node

90
00:03:07,200 --> 00:03:09,519
so to be able to do that you need device

91
00:03:09,519 --> 00:03:11,360
like a protocol gateway that handle the

92
00:03:11,360 --> 00:03:13,200
translation between these two networks

93
00:03:13,200 --> 00:03:13,680
and can

94
00:03:13,680 --> 00:03:16,840
speak concurrently modbus tcp and modbus

95
00:03:16,840 --> 00:03:18,080
rtu

96
00:03:18,080 --> 00:03:20,239
this is a typical installation and this

97
00:03:20,239 --> 00:03:22,560
is very frequently you have devices

98
00:03:22,560 --> 00:03:25,440
that run on legacy networks like serial

99
00:03:25,440 --> 00:03:26,799
and you have to bridge

100
00:03:26,799 --> 00:03:28,959
this legacy network and to bring them

101
00:03:28,959 --> 00:03:32,159
into in in your it environment

102
00:03:32,159 --> 00:03:33,920
note that often there is also an ses

103
00:03:33,920 --> 00:03:36,000
firewall which is like a mechanism that

104
00:03:36,000 --> 00:03:36,560
prevent

105
00:03:36,560 --> 00:03:38,640
an auto reside come and prevent for

106
00:03:38,640 --> 00:03:40,400
example an hmi

107
00:03:40,400 --> 00:03:42,879
to write a register that are not allowed

108
00:03:42,879 --> 00:03:44,799
to be written because are protected

109
00:03:44,799 --> 00:03:47,280
so we might for example only allow read

110
00:03:47,280 --> 00:03:49,040
requests

111
00:03:49,040 --> 00:03:50,480
so as a result of these protocol

112
00:03:50,480 --> 00:03:52,799
gateways they are kind of teeny cheap

113
00:03:52,799 --> 00:03:53,920
and for many people

114
00:03:53,920 --> 00:03:56,239
and just embedded piece of hardware so

115
00:03:56,239 --> 00:03:57,840
we don't give much importance to these

116
00:03:57,840 --> 00:03:59,200
devices

117
00:03:59,200 --> 00:04:02,080
which actually looks like you know maybe

118
00:04:02,080 --> 00:04:03,840
performing only secondary tasks

119
00:04:03,840 --> 00:04:05,760
i mean okay i mean they are not like

120
00:04:05,760 --> 00:04:07,439
industrial robots but

121
00:04:07,439 --> 00:04:09,120
build things so you don't see them

122
00:04:09,120 --> 00:04:11,519
they're doing something concretely but

123
00:04:11,519 --> 00:04:13,120
that's really not true i mean they play

124
00:04:13,120 --> 00:04:14,959
an important role especially when it

125
00:04:14,959 --> 00:04:16,079
comes to a um

126
00:04:16,079 --> 00:04:18,079
to the network no they are core to

127
00:04:18,079 --> 00:04:19,839
industrial network if something goes

128
00:04:19,839 --> 00:04:21,680
wrong with these devices

129
00:04:21,680 --> 00:04:24,160
it's not bad right and on top of that

130
00:04:24,160 --> 00:04:26,160
they actually run a full-fledged system

131
00:04:26,160 --> 00:04:28,080
so they might have like actually a

132
00:04:28,080 --> 00:04:29,759
minimum like a real like a real-time

133
00:04:29,759 --> 00:04:31,360
operating system so there are a lot of

134
00:04:31,360 --> 00:04:32,560
functionalities

135
00:04:32,560 --> 00:04:35,759
so we are not so you know like

136
00:04:35,759 --> 00:04:38,880
simple if you want no so as a result of

137
00:04:38,880 --> 00:04:39,280
this

138
00:04:39,280 --> 00:04:41,919
is that this device tends to be often

139
00:04:41,919 --> 00:04:42,800
overlooked

140
00:04:42,800 --> 00:04:45,440
or not indexed at all like in the asset

141
00:04:45,440 --> 00:04:46,880
of a company

142
00:04:46,880 --> 00:04:50,479
and this because that they know they

143
00:04:50,479 --> 00:04:51,680
might not

144
00:04:51,680 --> 00:04:54,479
go into properly patching they might not

145
00:04:54,479 --> 00:04:56,000
be monitored

146
00:04:56,000 --> 00:04:58,240
uh there might be this configure and so

147
00:04:58,240 --> 00:04:59,520
on and so forth

148
00:04:59,520 --> 00:05:01,600
so that's why we did this research so

149
00:05:01,600 --> 00:05:04,240
our goal is really to understand

150
00:05:04,240 --> 00:05:05,759
the problem when it comes to the

151
00:05:05,759 --> 00:05:07,280
translation capabilities of these

152
00:05:07,280 --> 00:05:08,639
devices how

153
00:05:08,639 --> 00:05:11,199
this problem may affect like in a real

154
00:05:11,199 --> 00:05:11,680
world

155
00:05:11,680 --> 00:05:14,560
for example a factory or a production

156
00:05:14,560 --> 00:05:15,840
and

157
00:05:15,840 --> 00:05:17,120
we do it in a different way when

158
00:05:17,120 --> 00:05:18,960
compared to the past like if you take

159
00:05:18,960 --> 00:05:21,680
this research project in 2018 by thomas

160
00:05:21,680 --> 00:05:23,440
i show that this device might have

161
00:05:23,440 --> 00:05:25,440
significant vulnerabilities

162
00:05:25,440 --> 00:05:28,160
uh by but you know we are not interested

163
00:05:28,160 --> 00:05:29,440
as much in

164
00:05:29,440 --> 00:05:31,759
compromising the device but rather as i

165
00:05:31,759 --> 00:05:34,160
said looking at the translation so now

166
00:05:34,160 --> 00:05:36,160
understanding how protocol is translated

167
00:05:36,160 --> 00:05:38,639
into another protocol and doing this

168
00:05:38,639 --> 00:05:41,440
analysis on the technological layers

169
00:05:41,440 --> 00:05:43,440
we are not much interested in finger

170
00:05:43,440 --> 00:05:45,280
pointing against specific vendors but

171
00:05:45,280 --> 00:05:46,080
travel

172
00:05:46,080 --> 00:05:47,759
understanding how different vendors

173
00:05:47,759 --> 00:05:49,360
implement this translation and what

174
00:05:49,360 --> 00:05:51,280
could go wrong

175
00:05:51,280 --> 00:05:53,600
we also decided to focus on modbus

176
00:05:53,600 --> 00:05:54,560
because it's a

177
00:05:54,560 --> 00:05:58,000
widely used and popular protocol and it

178
00:05:58,000 --> 00:06:00,080
extensively covers both the control

179
00:06:00,080 --> 00:06:02,960
network and the field network

180
00:06:02,960 --> 00:06:05,600
so overall we consider five type i mean

181
00:06:05,600 --> 00:06:07,360
five vendors with five products

182
00:06:07,360 --> 00:06:10,560
and they are pretty much similar to each

183
00:06:10,560 --> 00:06:12,080
other in a sense they both

184
00:06:12,080 --> 00:06:13,919
they all have like at least internet

185
00:06:13,919 --> 00:06:15,199
serial interfaces

186
00:06:15,199 --> 00:06:17,440
speak modbus and they're widely

187
00:06:17,440 --> 00:06:18,840
distributed

188
00:06:18,840 --> 00:06:22,319
worldwide and the two main

189
00:06:22,319 --> 00:06:23,360
i mean there are just two main

190
00:06:23,360 --> 00:06:25,039
categories of these two products which

191
00:06:25,039 --> 00:06:26,880
is important to point out here uh

192
00:06:26,880 --> 00:06:29,360
some of them are real-time getaways in

193
00:06:29,360 --> 00:06:30,479
the sense that

194
00:06:30,479 --> 00:06:33,039
they do a one-to-one in translation that

195
00:06:33,039 --> 00:06:35,199
means that each incoming packet

196
00:06:35,199 --> 00:06:37,919
is forwarded to a as a two-way outbound

197
00:06:37,919 --> 00:06:38,639
interface

198
00:06:38,639 --> 00:06:41,280
one-to-one so one incoming pocket one uh

199
00:06:41,280 --> 00:06:42,639
outbound pocket

200
00:06:42,639 --> 00:06:45,840
while data station um make use of an

201
00:06:45,840 --> 00:06:47,039
asynchronous approach

202
00:06:47,039 --> 00:06:48,479
for example they do not wait for

203
00:06:48,479 --> 00:06:50,560
incoming grid to pull data out from a

204
00:06:50,560 --> 00:06:51,840
slave

205
00:06:51,840 --> 00:06:54,479
so they do it for a performance reason

206
00:06:54,479 --> 00:06:55,280
which is okay

207
00:06:55,280 --> 00:06:58,319
but you know this way of

208
00:06:58,319 --> 00:07:00,479
working asynchronously and as well

209
00:07:00,479 --> 00:07:02,800
relying on an internal mapping table

210
00:07:02,800 --> 00:07:03,919
called the

211
00:07:03,919 --> 00:07:07,360
iot io mapping table um complicate

212
00:07:07,360 --> 00:07:08,800
things so we see later in the

213
00:07:08,800 --> 00:07:10,800
presentation how we sort of routing

214
00:07:10,800 --> 00:07:11,840
table complicate

215
00:07:11,840 --> 00:07:15,360
things so let's look at how we approach

216
00:07:15,360 --> 00:07:17,440
our search so we voluntarily decide to

217
00:07:17,440 --> 00:07:18,240
go uh

218
00:07:18,240 --> 00:07:20,720
through via a black box approach in

219
00:07:20,720 --> 00:07:22,400
which we have the researcher that

220
00:07:22,400 --> 00:07:24,240
leverage a father to generate

221
00:07:24,240 --> 00:07:26,800
appropriate test cases for the getaway

222
00:07:26,800 --> 00:07:30,080
and this test case is my for example as

223
00:07:30,080 --> 00:07:31,599
well we'll crash get your

224
00:07:31,599 --> 00:07:33,840
problem to begin with so we have also a

225
00:07:33,840 --> 00:07:36,160
system loop system for monitoring

226
00:07:36,160 --> 00:07:36,960
problems

227
00:07:36,960 --> 00:07:39,840
uh with what we call crash monitoring

228
00:07:39,840 --> 00:07:40,560
and it's run

229
00:07:40,560 --> 00:07:43,120
by by the father itself uh what the

230
00:07:43,120 --> 00:07:44,639
gateway does when we receive the

231
00:07:44,639 --> 00:07:45,919
trafficking for why you actually

232
00:07:45,919 --> 00:07:47,520
translate the traffic and it translate

233
00:07:47,520 --> 00:07:48,879
down to a simulator

234
00:07:48,879 --> 00:07:50,879
so simulator playing a very important

235
00:07:50,879 --> 00:07:52,960
role especially for data station but you

236
00:07:52,960 --> 00:07:54,400
need to know what's connected on the

237
00:07:54,400 --> 00:07:57,039
back to operate properly

238
00:07:57,039 --> 00:07:59,759
um where we have a steam fair that

239
00:07:59,759 --> 00:08:00,319
collect

240
00:08:00,319 --> 00:08:03,520
outbound traffic from the gateway and

241
00:08:03,520 --> 00:08:06,000
bring this traffic down to the analyzer

242
00:08:06,000 --> 00:08:07,440
together with traffic coming from the

243
00:08:07,440 --> 00:08:08,479
father

244
00:08:08,479 --> 00:08:11,199
and then either take decisions based on

245
00:08:11,199 --> 00:08:13,039
the fact that the inbound wealthbound

246
00:08:13,039 --> 00:08:14,960
traffic is the same it's not the same as

247
00:08:14,960 --> 00:08:16,879
change but it's not bound traffic

248
00:08:16,879 --> 00:08:18,879
compared to inbound traffic and so on

249
00:08:18,879 --> 00:08:20,000
and so forth

250
00:08:20,000 --> 00:08:22,000
so let me now show you by mean of some

251
00:08:22,000 --> 00:08:24,240
screenshots related to the simulator

252
00:08:24,240 --> 00:08:27,440
all the modbus protocol uh what

253
00:08:27,440 --> 00:08:29,599
motorcycle protocol is and how

254
00:08:29,599 --> 00:08:31,759
a protocol gateway operate with respect

255
00:08:31,759 --> 00:08:33,519
to this protocol

256
00:08:33,519 --> 00:08:35,360
so suppose you have two simulators like

257
00:08:35,360 --> 00:08:37,120
this one you have a screen one is

258
00:08:37,120 --> 00:08:39,519
on the left is a master uh one is a

259
00:08:39,519 --> 00:08:41,039
slave

260
00:08:41,039 --> 00:08:42,719
so the modbus master is connected via

261
00:08:42,719 --> 00:08:44,560
tcp you can see the address here the

262
00:08:44,560 --> 00:08:46,880
modbus lab is connected to serial to the

263
00:08:46,880 --> 00:08:48,560
serial port of the parallel gateway you

264
00:08:48,560 --> 00:08:49,920
can see here

265
00:08:49,920 --> 00:08:51,760
we made use of this simulator because

266
00:08:51,760 --> 00:08:53,760
it's made i mean it works pretty well

267
00:08:53,760 --> 00:08:55,920
it's free available online so thanks

268
00:08:55,920 --> 00:08:58,000
to developer of this uh of this

269
00:08:58,000 --> 00:08:59,279
application

270
00:08:59,279 --> 00:09:01,120
we change a few things around but

271
00:09:01,120 --> 00:09:03,839
overall we use the application as it is

272
00:09:03,839 --> 00:09:05,920
and it worked pretty well for us so we

273
00:09:05,920 --> 00:09:07,440
were able to simulate

274
00:09:07,440 --> 00:09:10,640
both master node buffers nav node boson

275
00:09:10,640 --> 00:09:11,279
serial

276
00:09:11,279 --> 00:09:14,720
buff on tcp so very good

277
00:09:14,720 --> 00:09:16,640
so when it comes to the master let's say

278
00:09:16,640 --> 00:09:18,399
for example the master generate a read

279
00:09:18,399 --> 00:09:20,720
request that started from address 0 for

280
00:09:20,720 --> 00:09:21,120
5

281
00:09:21,120 --> 00:09:24,000
coils so these requests get forward to

282
00:09:24,000 --> 00:09:24,240
the

283
00:09:24,240 --> 00:09:25,519
gateway what we get with us

284
00:09:25,519 --> 00:09:27,760
transitioning request for the slave

285
00:09:27,760 --> 00:09:30,320
the slave replies by the value of these

286
00:09:30,320 --> 00:09:31,440
five coins

287
00:09:31,440 --> 00:09:34,000
down to the master very simple what

288
00:09:34,000 --> 00:09:35,519
happened on the backhand is that the

289
00:09:35,519 --> 00:09:36,640
master generated

290
00:09:36,640 --> 00:09:39,040
a packet like this so you have an header

291
00:09:39,040 --> 00:09:40,399
which is a mod model it's called

292
00:09:40,399 --> 00:09:43,760
modbus tcp error in a in a yellow

293
00:09:43,760 --> 00:09:45,920
and a payload the payload consists of

294
00:09:45,920 --> 00:09:47,440
the command in this case a function

295
00:09:47,440 --> 00:09:49,600
called one which means a red coil

296
00:09:49,600 --> 00:09:52,320
and read five calls so what the ghetto

297
00:09:52,320 --> 00:09:53,839
does when you receive this

298
00:09:53,839 --> 00:09:56,399
packet you strike the payload take the

299
00:09:56,399 --> 00:09:58,240
payload to compute the checksum

300
00:09:58,240 --> 00:10:00,320
and add the checksum as a two bytes

301
00:10:00,320 --> 00:10:02,000
trailer to the payload

302
00:10:02,000 --> 00:10:05,040
then the modbus new packet called modbus

303
00:10:05,040 --> 00:10:07,279
rtu is sent to the slave

304
00:10:07,279 --> 00:10:09,760
we slave reply with a value in this case

305
00:10:09,760 --> 00:10:11,519
x15

306
00:10:11,519 --> 00:10:15,120
this payload get get reprocessed

307
00:10:15,120 --> 00:10:17,920
by the protocol get in the back we

308
00:10:17,920 --> 00:10:20,079
generate the header and send back to the

309
00:10:20,079 --> 00:10:21,200
master

310
00:10:21,200 --> 00:10:24,079
so this is how it works uh on top of

311
00:10:24,079 --> 00:10:26,160
that we have a father i said so we use a

312
00:10:26,160 --> 00:10:28,240
generation based the father that works

313
00:10:28,240 --> 00:10:29,760
pretty well when you have protocol with

314
00:10:29,760 --> 00:10:31,680
known specifications like modbus

315
00:10:31,680 --> 00:10:34,720
in our case we rely on a code uh based

316
00:10:34,720 --> 00:10:35,760
on buffers

317
00:10:35,760 --> 00:10:38,800
for modbus that we modify to our needs

318
00:10:38,800 --> 00:10:41,920
we manage for example to create uh

319
00:10:41,920 --> 00:10:44,000
things like this so this is a snippet

320
00:10:44,000 --> 00:10:45,040
showing how you can

321
00:10:45,040 --> 00:10:47,920
easily fold the right single coil uh

322
00:10:47,920 --> 00:10:48,720
command

323
00:10:48,720 --> 00:10:50,880
so without going detail here since we

324
00:10:50,880 --> 00:10:52,399
don't have as much time we can

325
00:10:52,399 --> 00:10:54,560
fast different field for different for

326
00:10:54,560 --> 00:10:56,240
each field we can specify

327
00:10:56,240 --> 00:10:58,399
the byte ordering how you want to fold

328
00:10:58,399 --> 00:11:00,079
the i want to find it if you want

329
00:11:00,079 --> 00:11:03,120
to cover to all the other space or not

330
00:11:03,120 --> 00:11:05,600
the order if you want to add for example

331
00:11:05,600 --> 00:11:08,000
recursive field or a trailer at the end

332
00:11:08,000 --> 00:11:09,200
for example to generate

333
00:11:09,200 --> 00:11:12,560
very large pockets that potentially my

334
00:11:12,560 --> 00:11:14,240
my potentially trigger for example a

335
00:11:14,240 --> 00:11:16,000
data service condition

336
00:11:16,000 --> 00:11:18,800
we can also do instrumentation so we can

337
00:11:18,800 --> 00:11:20,800
monitor uh if a device we are

338
00:11:20,800 --> 00:11:24,640
testing might get my crash for example

339
00:11:24,640 --> 00:11:27,440
we can do it vr connect or request

340
00:11:27,440 --> 00:11:30,000
whatever so whatever we want

341
00:11:30,000 --> 00:11:33,120
and on top of that of course i said we

342
00:11:33,120 --> 00:11:34,800
had to sniff so we had to capture

343
00:11:34,800 --> 00:11:35,360
inbound

344
00:11:35,360 --> 00:11:38,000
outbound traffic uh for the inbound i

345
00:11:38,000 --> 00:11:40,160
mean for tcp we use like where share

346
00:11:40,160 --> 00:11:40,720
with for

347
00:11:40,720 --> 00:11:42,560
serial we use iron ninja which works

348
00:11:42,560 --> 00:11:44,560
pretty well

349
00:11:44,560 --> 00:11:46,079
at the time when these two sniffers

350
00:11:46,079 --> 00:11:47,680
create their own logs

351
00:11:47,680 --> 00:11:49,680
we extract from the logs the packets we

352
00:11:49,680 --> 00:11:50,959
are interested to

353
00:11:50,959 --> 00:11:53,519
we normalize the data and we do it in a

354
00:11:53,519 --> 00:11:54,320
way that

355
00:11:54,320 --> 00:11:57,600
the analyzer van can easily correlate

356
00:11:57,600 --> 00:11:58,240
inbound

357
00:11:58,240 --> 00:12:01,440
outbound traffic the correlation is made

358
00:12:01,440 --> 00:12:03,600
via timestamp when it comes to real-time

359
00:12:03,600 --> 00:12:04,720
getaways

360
00:12:04,720 --> 00:12:06,320
because there is a one-to-one matching

361
00:12:06,320 --> 00:12:08,320
between input and outer mode

362
00:12:08,320 --> 00:12:10,320
while for data station we made use of

363
00:12:10,320 --> 00:12:12,959
nouns like a random value that we insert

364
00:12:12,959 --> 00:12:14,399
that if we insert that we have been

365
00:12:14,399 --> 00:12:16,320
inserted by the father so we asked the

366
00:12:16,320 --> 00:12:18,000
father to insert his knowledge in

367
00:12:18,000 --> 00:12:20,639
bound data so that we can then easily

368
00:12:20,639 --> 00:12:21,279
map

369
00:12:21,279 --> 00:12:24,480
uh outbound inbound um so here

370
00:12:24,480 --> 00:12:27,200
for example driver is a session where

371
00:12:27,200 --> 00:12:28,079
you can see

372
00:12:28,079 --> 00:12:30,160
a real time session you can see tcp rtu

373
00:12:30,160 --> 00:12:32,800
tcp rtu disappear to you so this is

374
00:12:32,800 --> 00:12:36,160
a classic example of a correct actually

375
00:12:36,160 --> 00:12:38,320
it's even correct forwarding of

376
00:12:38,320 --> 00:12:41,839
traffic between tcp and rtu

377
00:12:41,839 --> 00:12:43,680
this is an example of setup where you

378
00:12:43,680 --> 00:12:45,200
have a gateway down here

379
00:12:45,200 --> 00:12:49,600
that translate the tcp into rtu

380
00:12:49,600 --> 00:12:51,760
on the rtu we have a tab that we use to

381
00:12:51,760 --> 00:12:54,000
collect data and send it to us neither

382
00:12:54,000 --> 00:12:56,560
on the tcp we use a monitoring port of

383
00:12:56,560 --> 00:12:57,519
the netgear

384
00:12:57,519 --> 00:12:59,519
to collect data as well then we have a

385
00:12:59,519 --> 00:13:01,680
second arduino up here on the left

386
00:13:01,680 --> 00:13:02,480
corner

387
00:13:02,480 --> 00:13:06,079
that simulates every modbus

388
00:13:06,079 --> 00:13:08,959
master of flavor and also implement the

389
00:13:08,959 --> 00:13:10,079
fuzzing uh

390
00:13:10,079 --> 00:13:12,959
capabilities and all of this in the

391
00:13:12,959 --> 00:13:14,560
center of this there is this network

392
00:13:14,560 --> 00:13:16,560
power strip that we use to reboot the

393
00:13:16,560 --> 00:13:17,760
device when there are

394
00:13:17,760 --> 00:13:21,200
problems let's go for a finding here

395
00:13:21,200 --> 00:13:23,040
um so let's start with resource

396
00:13:23,040 --> 00:13:24,720
explosion because it's very common

397
00:13:24,720 --> 00:13:25,600
problem

398
00:13:25,600 --> 00:13:27,440
like we found that all the devices we

399
00:13:27,440 --> 00:13:30,000
test are affected to certain extension

400
00:13:30,000 --> 00:13:31,920
to with resources ocean

401
00:13:31,920 --> 00:13:34,399
uh what happened here is that even the

402
00:13:34,399 --> 00:13:35,040
device

403
00:13:35,040 --> 00:13:38,079
hang at the tcpap stack so it's not

404
00:13:38,079 --> 00:13:40,079
reachable by even single command like

405
00:13:40,079 --> 00:13:40,800
paying

406
00:13:40,800 --> 00:13:43,120
or it hang of the translation process so

407
00:13:43,120 --> 00:13:44,639
it still happens running but does not

408
00:13:44,639 --> 00:13:45,680
translate

409
00:13:45,680 --> 00:13:49,040
of course this is very severe because uh

410
00:13:49,040 --> 00:13:51,120
in my uh even if you if you block

411
00:13:51,120 --> 00:13:52,480
something like this of course

412
00:13:52,480 --> 00:13:55,440
production is is block right so it's

413
00:13:55,440 --> 00:13:57,120
really a problem and it's very easy to

414
00:13:57,120 --> 00:13:57,519
cause

415
00:13:57,519 --> 00:14:00,480
such a resources social thing like here

416
00:14:00,480 --> 00:14:01,600
you have for example a

417
00:14:01,600 --> 00:14:04,959
father that test uh i mean

418
00:14:04,959 --> 00:14:06,720
generate a test every second as you can

419
00:14:06,720 --> 00:14:09,360
see down here for a total of 20 kilobits

420
00:14:09,360 --> 00:14:11,680
per second so not much but even

421
00:14:11,680 --> 00:14:14,399
at this low bandwidth the device you can

422
00:14:14,399 --> 00:14:16,480
see here has been detected to be crashed

423
00:14:16,480 --> 00:14:18,720
it's not reachable anymore and the power

424
00:14:18,720 --> 00:14:19,760
socket uh

425
00:14:19,760 --> 00:14:22,320
jump in and basically reboot the device

426
00:14:22,320 --> 00:14:23,680
which got rebooted

427
00:14:23,680 --> 00:14:25,680
and you can see here when you have time

428
00:14:25,680 --> 00:14:27,920
it's just five seconds

429
00:14:27,920 --> 00:14:30,079
and as you can see five everything start

430
00:14:30,079 --> 00:14:32,240
so this is the way in which we process

431
00:14:32,240 --> 00:14:34,240
basically we go with fuzz every device

432
00:14:34,240 --> 00:14:35,920
reboot we continue to fight and so on

433
00:14:35,920 --> 00:14:37,040
and so forth

434
00:14:37,040 --> 00:14:38,880
until we find something like this so

435
00:14:38,880 --> 00:14:40,880
this is a targeted denial of service

436
00:14:40,880 --> 00:14:43,120
occurring against the red lion

437
00:14:43,120 --> 00:14:45,440
in case we are going to read the

438
00:14:45,440 --> 00:14:47,600
addresses that have a value of zero so i

439
00:14:47,600 --> 00:14:48,000
mean

440
00:14:48,000 --> 00:14:50,560
which is legitimate zero is okay but

441
00:14:50,560 --> 00:14:52,240
since this one is a data station

442
00:14:52,240 --> 00:14:54,880
as we see later in the talk zero here is

443
00:14:54,880 --> 00:14:56,720
using the address in the internal

444
00:14:56,720 --> 00:14:58,480
mapping table so

445
00:14:58,480 --> 00:15:00,320
in this case the device has really

446
00:15:00,320 --> 00:15:02,480
problem with addressing the mapping

447
00:15:02,480 --> 00:15:03,360
table

448
00:15:03,360 --> 00:15:06,480
at address zero so let me show you here

449
00:15:06,480 --> 00:15:09,760
an example of this so here you have uh

450
00:15:09,760 --> 00:15:12,560
basically uh the attacker that generates

451
00:15:12,560 --> 00:15:14,560
such a packet for vcp address

452
00:15:14,560 --> 00:15:17,199
which is the device the packet is sent

453
00:15:17,199 --> 00:15:18,480
as you can see here

454
00:15:18,480 --> 00:15:21,199
as soon as you send the device turn off

455
00:15:21,199 --> 00:15:22,399
and reboot

456
00:15:22,399 --> 00:15:25,680
uh where it would take about 20 seconds

457
00:15:25,680 --> 00:15:27,760
to run that's why you don't see any more

458
00:15:27,760 --> 00:15:29,519
locks coming down here but

459
00:15:29,519 --> 00:15:32,079
when the reboot is finished the device

460
00:15:32,079 --> 00:15:33,600
will send a notification

461
00:15:33,600 --> 00:15:37,199
that there was a connection false

462
00:15:37,199 --> 00:15:38,959
again you know the attacker generated a

463
00:15:38,959 --> 00:15:40,880
second packet here

464
00:15:40,880 --> 00:15:42,880
the device as you can see i will crash

465
00:15:42,880 --> 00:15:44,480
again all the leds

466
00:15:44,480 --> 00:15:47,120
go down so you know it's very very easy

467
00:15:47,120 --> 00:15:47,600
to

468
00:15:47,600 --> 00:15:50,320
to trigger such a remote by by remotely

469
00:15:50,320 --> 00:15:52,320
sending just a single pocket so

470
00:15:52,320 --> 00:15:53,680
imagine like imagine you have an

471
00:15:53,680 --> 00:15:55,839
attacker like in the control network one

472
00:15:55,839 --> 00:15:56,800
pack and you

473
00:15:56,800 --> 00:16:00,880
go down basically so let's now jump into

474
00:16:00,880 --> 00:16:03,360
the protocol translation bypass problems

475
00:16:03,360 --> 00:16:04,959
which are actually the core of our

476
00:16:04,959 --> 00:16:05,920
research

477
00:16:05,920 --> 00:16:08,880
so we start by evaluating uh how well

478
00:16:08,880 --> 00:16:10,880
our devices do with respect to

479
00:16:10,880 --> 00:16:13,519
a dropping on phone packets so if there

480
00:16:13,519 --> 00:16:16,000
is any good filtering mechanism in place

481
00:16:16,000 --> 00:16:17,839
and it turned out that one of our device

482
00:16:17,839 --> 00:16:19,600
actually didn't filter any single

483
00:16:19,600 --> 00:16:23,040
of our firm packet and this one we see

484
00:16:23,040 --> 00:16:25,120
here on screen is one of those packet is

485
00:16:25,120 --> 00:16:27,360
a read input register command where we

486
00:16:27,360 --> 00:16:28,000
are

487
00:16:28,000 --> 00:16:30,959
asking to the slave to give us basically

488
00:16:30,959 --> 00:16:33,920
70 registers starting from this

489
00:16:33,920 --> 00:16:36,160
address here you see on the screen so

490
00:16:36,160 --> 00:16:37,920
the payload here is six

491
00:16:37,920 --> 00:16:40,000
bytes long as you can count them but you

492
00:16:40,000 --> 00:16:42,240
know the the field here in there

493
00:16:42,240 --> 00:16:45,279
in there in the tcp header um

494
00:16:45,279 --> 00:16:47,839
um specify the message length of the

495
00:16:47,839 --> 00:16:49,120
payload of 11 so there is an

496
00:16:49,120 --> 00:16:50,079
inconsistency

497
00:16:50,079 --> 00:16:52,399
between what has been said in the error

498
00:16:52,399 --> 00:16:53,440
and the real

499
00:16:53,440 --> 00:16:56,399
content of the payload as a result of

500
00:16:56,399 --> 00:16:57,920
that the device does not

501
00:16:57,920 --> 00:17:01,040
properly translate these packets

502
00:17:01,040 --> 00:17:02,959
actually does not translate at all just

503
00:17:02,959 --> 00:17:05,199
take the pocket and follow the pocket as

504
00:17:05,199 --> 00:17:05,439
it

505
00:17:05,439 --> 00:17:08,480
is so as a result you will have like a

506
00:17:08,480 --> 00:17:10,319
pocket that has been uh

507
00:17:10,319 --> 00:17:13,280
that has a it is basically a modbus tcp

508
00:17:13,280 --> 00:17:14,160
packet

509
00:17:14,160 --> 00:17:16,839
that will be propagated on the serial

510
00:17:16,839 --> 00:17:18,079
interface

511
00:17:18,079 --> 00:17:20,319
and this is very severe because the

512
00:17:20,319 --> 00:17:22,400
semantic of the two protocol like modmas

513
00:17:22,400 --> 00:17:25,280
tcp and modbus return difference

514
00:17:25,280 --> 00:17:27,280
what does it mean it means that such a

515
00:17:27,280 --> 00:17:29,760
pocket that in modbus tcp

516
00:17:29,760 --> 00:17:32,799
read as a red input register

517
00:17:32,799 --> 00:17:35,120
because its function code is four in

518
00:17:35,120 --> 00:17:37,280
modbuster two it reads as a

519
00:17:37,280 --> 00:17:39,919
right multiple call command so that

520
00:17:39,919 --> 00:17:41,520
doesn't mean it means that if you have

521
00:17:41,520 --> 00:17:43,200
an attacker that has for example

522
00:17:43,200 --> 00:17:45,600
compromising historian like a database

523
00:17:45,600 --> 00:17:47,520
on your control network

524
00:17:47,520 --> 00:17:49,840
you can easily send a read request which

525
00:17:49,840 --> 00:17:51,840
is a super legitimate request that every

526
00:17:51,840 --> 00:17:52,480
ics

527
00:17:52,480 --> 00:17:55,679
firewall will allow to trigger actually

528
00:17:55,679 --> 00:17:56,640
a

529
00:17:56,640 --> 00:17:58,559
right down here in the production

530
00:17:58,559 --> 00:18:00,480
network so he might for example

531
00:18:00,480 --> 00:18:03,440
be able to earn office uh every day or

532
00:18:03,440 --> 00:18:05,360
turn off a thermometer

533
00:18:05,360 --> 00:18:07,600
and the cause radio i mean cause the

534
00:18:07,600 --> 00:18:09,520
damage right to the production

535
00:18:09,520 --> 00:18:11,919
so let me show an example of what i said

536
00:18:11,919 --> 00:18:12,640
here

537
00:18:12,640 --> 00:18:16,080
so let me kill this one let me go for

538
00:18:16,080 --> 00:18:19,120
the server then we are down here uh

539
00:18:19,120 --> 00:18:20,640
and i'm going to show you this is our

540
00:18:20,640 --> 00:18:22,880
gateway which is this neo50

541
00:18:22,880 --> 00:18:25,440
um that is running the gateway is

542
00:18:25,440 --> 00:18:28,320
correctly translating modbus

543
00:18:28,320 --> 00:18:31,120
from ethernet to serial and is listed on

544
00:18:31,120 --> 00:18:36,239
port 502 for incoming modus tcp request

545
00:18:36,320 --> 00:18:39,039
so what you will see here you see uh

546
00:18:39,039 --> 00:18:40,080
this is a sniffer

547
00:18:40,080 --> 00:18:43,520
md on mobile tcp but we run on backhand

548
00:18:43,520 --> 00:18:46,799
then we run a sniffer on modbus rtu on

549
00:18:46,799 --> 00:18:48,960
the back end as well

550
00:18:48,960 --> 00:18:50,799
then we'll have an attacker but we'll

551
00:18:50,799 --> 00:18:53,280
use a tool to generate

552
00:18:53,280 --> 00:18:55,360
evaporated traffic in that case we

553
00:18:55,360 --> 00:18:57,360
specified a payload

554
00:18:57,360 --> 00:19:00,400
that we have as a

555
00:19:00,400 --> 00:19:03,120
function code 4 and the different field

556
00:19:03,120 --> 00:19:05,039
as we show on screen right so 70

557
00:19:05,039 --> 00:19:06,960
register from that address

558
00:19:06,960 --> 00:19:08,880
here on the small screen you have open

559
00:19:08,880 --> 00:19:10,720
plc so this is like an

560
00:19:10,720 --> 00:19:14,240
example of a real and running plc server

561
00:19:14,240 --> 00:19:17,360
where you have a relay and motors which

562
00:19:17,360 --> 00:19:17,840
which are

563
00:19:17,840 --> 00:19:19,760
on you can see that correctly is

564
00:19:19,760 --> 00:19:21,760
reporting the temperature to this to the

565
00:19:21,760 --> 00:19:22,400
plc

566
00:19:22,400 --> 00:19:24,400
as well as some other information by a

567
00:19:24,400 --> 00:19:25,600
tachometer

568
00:19:25,600 --> 00:19:28,559
so what vataka will do by a single read

569
00:19:28,559 --> 00:19:30,400
command they will actually trigger it

570
00:19:30,400 --> 00:19:31,760
right and they will

571
00:19:31,760 --> 00:19:35,200
disable everything except the motor

572
00:19:35,200 --> 00:19:37,039
making basically the system going in

573
00:19:37,039 --> 00:19:38,480
panic because the system will continue

574
00:19:38,480 --> 00:19:40,000
basically producing the motor will

575
00:19:40,000 --> 00:19:41,440
continue running but there is no

576
00:19:41,440 --> 00:19:43,280
temperature reporting back so

577
00:19:43,280 --> 00:19:46,080
it might be super severe this this stuff

578
00:19:46,080 --> 00:19:46,400
and

579
00:19:46,400 --> 00:19:48,400
i'm going to show you that only the push

580
00:19:48,400 --> 00:19:51,440
command sent from the attacker there is

581
00:19:51,440 --> 00:19:54,000
the packet that has been generated by

582
00:19:54,000 --> 00:19:55,200
the by the tool

583
00:19:55,200 --> 00:19:56,720
as well i'm going to show you that

584
00:19:56,720 --> 00:19:58,720
obviously on the serial side

585
00:19:58,720 --> 00:20:00,720
the packet is exactly the same

586
00:20:00,720 --> 00:20:02,640
confirming that there is no

587
00:20:02,640 --> 00:20:05,200
translation but a simple forwarding made

588
00:20:05,200 --> 00:20:06,720
by the gateway

589
00:20:06,720 --> 00:20:08,559
of course this is just an example but

590
00:20:08,559 --> 00:20:10,559
it's super severe in the sense that this

591
00:20:10,559 --> 00:20:11,520
attack

592
00:20:11,520 --> 00:20:13,600
and this vulnerability related to the

593
00:20:13,600 --> 00:20:14,640
translation

594
00:20:14,640 --> 00:20:16,960
problem of the device can be used to do

595
00:20:16,960 --> 00:20:18,960
anything so attacker it's up to the

596
00:20:18,960 --> 00:20:21,120
attacker to be able to uh

597
00:20:21,120 --> 00:20:24,000
to design his own preferred attack so

598
00:20:24,000 --> 00:20:24,480
it's

599
00:20:24,480 --> 00:20:26,880
something it's a nightmare uh let's see

600
00:20:26,880 --> 00:20:28,640
something uh which pretty much is

601
00:20:28,640 --> 00:20:30,320
pretty the same like the same flavor

602
00:20:30,320 --> 00:20:31,919
attack uh for the

603
00:20:31,919 --> 00:20:34,080
station so as i said they are stationary

604
00:20:34,080 --> 00:20:36,000
a bit more complex devices because they

605
00:20:36,000 --> 00:20:37,679
don't operate real time but we have

606
00:20:37,679 --> 00:20:39,280
multiple routines that work

607
00:20:39,280 --> 00:20:41,840
synchronously for example normally you

608
00:20:41,840 --> 00:20:43,760
have one thing that parts for

609
00:20:43,760 --> 00:20:46,480
incoming traffic and set appropriate

610
00:20:46,480 --> 00:20:48,960
value the mapping table based on the

611
00:20:48,960 --> 00:20:51,360
of the traffic it received and then you

612
00:20:51,360 --> 00:20:53,360
have a second routine that scan for the

613
00:20:53,360 --> 00:20:55,200
mapping table and if there are problems

614
00:20:55,200 --> 00:20:56,799
if it actually changes in the mapping

615
00:20:56,799 --> 00:20:58,320
table it generates the appropriate

616
00:20:58,320 --> 00:20:58,960
request

617
00:20:58,960 --> 00:21:02,080
for a slave connected to the back

618
00:21:02,080 --> 00:21:04,320
so in this example we have two commands

619
00:21:04,320 --> 00:21:06,000
being configured in the mapping table

620
00:21:06,000 --> 00:21:06,400
one

621
00:21:06,400 --> 00:21:08,559
for enabling disabling a coil and one

622
00:21:08,559 --> 00:21:10,960
for setting a critical temperature

623
00:21:10,960 --> 00:21:12,960
and this command are mapped down as you

624
00:21:12,960 --> 00:21:15,039
can see here to internal address zero

625
00:21:15,039 --> 00:21:16,159
for first command

626
00:21:16,159 --> 00:21:18,240
and intel address two and three for the

627
00:21:18,240 --> 00:21:19,360
second command

628
00:21:19,360 --> 00:21:21,360
second command requires two bytes

629
00:21:21,360 --> 00:21:23,520
because it's the right register so to

630
00:21:23,520 --> 00:21:24,400
write

631
00:21:24,400 --> 00:21:27,039
uh to set a temperature which is an

632
00:21:27,039 --> 00:21:28,640
integer value you need

633
00:21:28,640 --> 00:21:32,240
you need two bytes this is two other

634
00:21:32,240 --> 00:21:33,120
space

635
00:21:33,120 --> 00:21:34,559
so what happened here is that at the

636
00:21:34,559 --> 00:21:36,960
time when there is a change for example

637
00:21:36,960 --> 00:21:40,159
in uh let's say bit number five

638
00:21:40,159 --> 00:21:43,600
which is on the first byte uh what will

639
00:21:43,600 --> 00:21:44,400
do the

640
00:21:44,400 --> 00:21:47,600
data stage will be is to trigger a

641
00:21:47,600 --> 00:21:50,320
set software one also to trigger the

642
00:21:50,320 --> 00:21:52,960
first command

643
00:21:52,960 --> 00:21:54,720
so there is a weird fact here the fact

644
00:21:54,720 --> 00:21:56,240
that the address

645
00:21:56,240 --> 00:21:58,799
of inbound message is using an index in

646
00:21:58,799 --> 00:22:00,480
the mapping table what does it mean it

647
00:22:00,480 --> 00:22:01,120
means uh

648
00:22:01,120 --> 00:22:03,840
going back here to the example suppose

649
00:22:03,840 --> 00:22:04,240
uh

650
00:22:04,240 --> 00:22:07,200
this device receive a uh i don't know

651
00:22:07,200 --> 00:22:07,520
like

652
00:22:07,520 --> 00:22:10,559
right coil five what do we do we will

653
00:22:10,559 --> 00:22:11,360
generate

654
00:22:11,360 --> 00:22:14,080
another right coil because uh this

655
00:22:14,080 --> 00:22:15,120
command here

656
00:22:15,120 --> 00:22:17,120
corresponds to function called five so

657
00:22:17,120 --> 00:22:20,240
we generate another right coil okay

658
00:22:20,240 --> 00:22:22,559
so it's pretty much weird anyhow because

659
00:22:22,559 --> 00:22:23,840
uh if i send the

660
00:22:23,840 --> 00:22:26,080
right coil five i would expect you know

661
00:22:26,080 --> 00:22:26,880
that 5

662
00:22:26,880 --> 00:22:29,360
means basically the address of the slave

663
00:22:29,360 --> 00:22:30,400
not the address

664
00:22:30,400 --> 00:22:33,600
of the mapping table but okay this is

665
00:22:33,600 --> 00:22:35,520
always been designed let's take it as it

666
00:22:35,520 --> 00:22:36,000
is

667
00:22:36,000 --> 00:22:37,679
the problem is the out of bound

668
00:22:37,679 --> 00:22:39,120
vulnerability we have discovered in

669
00:22:39,120 --> 00:22:40,000
which the attacker

670
00:22:40,000 --> 00:22:43,600
can do a right coil n or x in this case

671
00:22:43,600 --> 00:22:45,760
we see here where x is anywhere in the

672
00:22:45,760 --> 00:22:48,159
table so it can overflow the table

673
00:22:48,159 --> 00:22:50,159
it can go and write in others of the

674
00:22:50,159 --> 00:22:51,280
table that are not

675
00:22:51,280 --> 00:22:53,679
mapped as well there is no check for

676
00:22:53,679 --> 00:22:54,960
function code

677
00:22:54,960 --> 00:22:56,799
that means that an attacker will be able

678
00:22:56,799 --> 00:22:58,799
for example to trigger write register

679
00:22:58,799 --> 00:23:00,400
between a right coil

680
00:23:00,400 --> 00:23:02,720
and vice versa or even worse you could

681
00:23:02,720 --> 00:23:03,440
use the right

682
00:23:03,440 --> 00:23:05,919
multiple coils command to overflow or

683
00:23:05,919 --> 00:23:07,039
the table

684
00:23:07,039 --> 00:23:09,840
at that point basically all and right

685
00:23:09,840 --> 00:23:10,480
coiler

686
00:23:10,480 --> 00:23:12,480
and potential right register will be

687
00:23:12,480 --> 00:23:14,240
will be triggered on the slave

688
00:23:14,240 --> 00:23:17,760
for example causing an amplification

689
00:23:17,760 --> 00:23:18,880
attack

690
00:23:18,880 --> 00:23:20,799
uh so let's give you an example about

691
00:23:20,799 --> 00:23:22,559
visa let's assume an attacker want to

692
00:23:22,559 --> 00:23:24,640
change a protected parameter like a

693
00:23:24,640 --> 00:23:25,600
critical threshold

694
00:23:25,600 --> 00:23:27,600
we say in the past which has like the

695
00:23:27,600 --> 00:23:29,360
fault value of 200.

696
00:23:29,360 --> 00:23:32,480
uh so this change is it's not allowed

697
00:23:32,480 --> 00:23:33,120
because

698
00:23:33,120 --> 00:23:38,000
uh you know like a write request are

699
00:23:38,000 --> 00:23:39,760
blocked and only right call command are

700
00:23:39,760 --> 00:23:41,679
allowed by a firewall but we'll

701
00:23:41,679 --> 00:23:44,240
show you in this demo how it's possible

702
00:23:44,240 --> 00:23:45,039
to do that

703
00:23:45,039 --> 00:23:48,000
by abusing this vulnerability so let me

704
00:23:48,000 --> 00:23:49,440
go here

705
00:23:49,440 --> 00:23:52,559
and start showing you moxa attack now

706
00:23:52,559 --> 00:23:54,000
it's the max second

707
00:23:54,000 --> 00:23:57,360
one our setup so in our setup we have a

708
00:23:57,360 --> 00:23:59,200
vulnerable gateway which is uh

709
00:23:59,200 --> 00:24:02,480
this gentleman here which is a power on

710
00:24:02,480 --> 00:24:03,039
of course

711
00:24:03,039 --> 00:24:06,000
connect with two interfaces later

712
00:24:06,000 --> 00:24:07,919
interface go to the fuzzer

713
00:24:07,919 --> 00:24:11,120
or in our case the attacker

714
00:24:11,120 --> 00:24:14,640
the serial interface with this silver

715
00:24:14,640 --> 00:24:15,279
cable

716
00:24:15,279 --> 00:24:18,080
go down to an arduino which implements

717
00:24:18,080 --> 00:24:20,000
this open

718
00:24:20,000 --> 00:24:23,279
plc logic so this plc

719
00:24:23,279 --> 00:24:26,480
is connecting to a to a board

720
00:24:26,480 --> 00:24:29,440
that contains a different leds for

721
00:24:29,440 --> 00:24:30,720
relaying motors

722
00:24:30,720 --> 00:24:33,360
as well as a siren the siren gets

723
00:24:33,360 --> 00:24:35,120
automatically triggered when the

724
00:24:35,120 --> 00:24:35,919
temperature

725
00:24:35,919 --> 00:24:39,919
reads by the um by the arduino in this

726
00:24:39,919 --> 00:24:40,640
case

727
00:24:40,640 --> 00:24:43,679
it goes over so above sorry the

728
00:24:43,679 --> 00:24:45,200
threshold

729
00:24:45,200 --> 00:24:48,480
which is by default 200. now i'm

730
00:24:48,480 --> 00:24:52,400
showing you um how

731
00:24:52,400 --> 00:24:56,240
things are so so in a normal situation

732
00:24:56,240 --> 00:24:58,960
you know the engineer uses this right

733
00:24:58,960 --> 00:25:01,360
register command and write register

734
00:25:01,360 --> 00:25:02,000
packet

735
00:25:02,000 --> 00:25:05,279
which has a function code 6

736
00:25:05,279 --> 00:25:07,520
to change the temperature for example

737
00:25:07,520 --> 00:25:08,400
3000

738
00:25:08,400 --> 00:25:10,400
for 300 because you know you have to

739
00:25:10,400 --> 00:25:12,080
convert an enter into float and we are

740
00:25:12,080 --> 00:25:13,840
one off

741
00:25:13,840 --> 00:25:16,640
but that's okay so suppose that's the

742
00:25:16,640 --> 00:25:17,919
right way to change

743
00:25:17,919 --> 00:25:21,520
this this this value and uh

744
00:25:21,520 --> 00:25:23,520
normally this function code six is uh

745
00:25:23,520 --> 00:25:25,679
for example uh blocked by an ses

746
00:25:25,679 --> 00:25:27,440
firewall not to prevent the authorized

747
00:25:27,440 --> 00:25:28,480
change but

748
00:25:28,480 --> 00:25:30,960
an attacker basically would abuse of a

749
00:25:30,960 --> 00:25:32,559
protocol translation problem

750
00:25:32,559 --> 00:25:35,600
we use the right coil to flip a single

751
00:25:35,600 --> 00:25:36,400
bit

752
00:25:36,400 --> 00:25:38,480
in a way to change the temperature for

753
00:25:38,480 --> 00:25:40,880
example by flipping b22 we can

754
00:25:40,880 --> 00:25:44,000
raise the critical threshold to 1800 so

755
00:25:44,000 --> 00:25:45,279
such a high value

756
00:25:45,279 --> 00:25:48,400
would probably not be hit never so at

757
00:25:48,400 --> 00:25:50,159
that point basically if it is like a

758
00:25:50,159 --> 00:25:51,679
process you might you know melt the

759
00:25:51,679 --> 00:25:52,159
process

760
00:25:52,159 --> 00:25:55,039
and you are really damaging production

761
00:25:55,039 --> 00:25:56,559
and even worse

762
00:25:56,559 --> 00:25:59,120
since this is an integer value you know

763
00:25:59,120 --> 00:26:00,559
attacker can

764
00:26:00,559 --> 00:26:03,679
do an integer overflow it can flip the

765
00:26:03,679 --> 00:26:05,520
more significative bit which in this

766
00:26:05,520 --> 00:26:06,000
case

767
00:26:06,000 --> 00:26:09,200
is there at address 23 and it will

768
00:26:09,200 --> 00:26:10,720
basically

769
00:26:10,720 --> 00:26:13,039
set critical threshold temperature at a

770
00:26:13,039 --> 00:26:14,559
negative value

771
00:26:14,559 --> 00:26:17,279
and the alarm will be will be raised

772
00:26:17,279 --> 00:26:18,799
consequently

773
00:26:18,799 --> 00:26:21,919
i can show you down here in the camera

774
00:26:21,919 --> 00:26:24,400
so exactly this is exactly what i said

775
00:26:24,400 --> 00:26:26,400
uh you have an attacker but by mean of a

776
00:26:26,400 --> 00:26:28,400
single coil command single right coil

777
00:26:28,400 --> 00:26:30,400
command flip a bit

778
00:26:30,400 --> 00:26:32,000
bring the critical thresher at the

779
00:26:32,000 --> 00:26:34,240
negative temperature at that point

780
00:26:34,240 --> 00:26:37,279
the alarm is actually trigger on the on

781
00:26:37,279 --> 00:26:40,400
the plc

782
00:26:40,400 --> 00:26:43,279
of course this is all possible and this

783
00:26:43,279 --> 00:26:45,200
is summarized here

784
00:26:45,200 --> 00:26:47,200
so this is the correct way of doing it

785
00:26:47,200 --> 00:26:49,760
by using a right register

786
00:26:49,760 --> 00:26:53,840
by changing address one

787
00:26:53,840 --> 00:26:57,039
this is actually the the way to abuse

788
00:26:57,039 --> 00:26:58,880
of such problem with the protocol

789
00:26:58,880 --> 00:27:00,320
translation in this

790
00:27:00,320 --> 00:27:02,720
data station to flip one bit and to

791
00:27:02,720 --> 00:27:04,000
create

792
00:27:04,000 --> 00:27:05,919
the things i show you on the screen on

793
00:27:05,919 --> 00:27:07,279
the video

794
00:27:07,279 --> 00:27:10,480
uh of course all of this is possible uh

795
00:27:10,480 --> 00:27:12,880
of course if attacker know more about

796
00:27:12,880 --> 00:27:14,559
what's it on the back of a

797
00:27:14,559 --> 00:27:16,400
of a brother will get will know more

798
00:27:16,400 --> 00:27:18,399
about the mapping table

799
00:27:18,399 --> 00:27:20,320
it can perform more target attack

800
00:27:20,320 --> 00:27:22,320
instead of doing a blind

801
00:27:22,320 --> 00:27:25,360
blind attack um so we have discovered

802
00:27:25,360 --> 00:27:27,520
different techniques to lick the i o

803
00:27:27,520 --> 00:27:28,799
mapping table

804
00:27:28,799 --> 00:27:30,640
and all these are vulnerabilities which

805
00:27:30,640 --> 00:27:33,440
we reported to a vendor so the first one

806
00:27:33,440 --> 00:27:36,640
is by uh token creature reuse so the

807
00:27:36,640 --> 00:27:37,360
problem here

808
00:27:37,360 --> 00:27:39,840
live from within the fact that the

809
00:27:39,840 --> 00:27:41,279
password

810
00:27:41,279 --> 00:27:44,960
uh is encrypted with a nonce that is

811
00:27:44,960 --> 00:27:48,320
not uh correctly initialized so

812
00:27:48,320 --> 00:27:50,559
an attacker can use the same noise over

813
00:27:50,559 --> 00:27:51,360
and over

814
00:27:51,360 --> 00:27:54,159
so as you can see here this is a uh this

815
00:27:54,159 --> 00:27:55,039
is part of a

816
00:27:55,039 --> 00:27:56,799
of a firmware that we reverse engineer

817
00:27:56,799 --> 00:27:58,240
to discover the problem

818
00:27:58,240 --> 00:28:01,200
so render is uh does not have any

819
00:28:01,200 --> 00:28:02,080
initialization

820
00:28:02,080 --> 00:28:05,600
vector so v1 v11 is used in this get

821
00:28:05,600 --> 00:28:08,720
challenge function and as a result of

822
00:28:08,720 --> 00:28:10,080
that every time this

823
00:28:10,080 --> 00:28:13,600
sdc underscore function is called uh

824
00:28:13,600 --> 00:28:16,640
this this this channel get initialized

825
00:28:16,640 --> 00:28:18,159
always with the same value

826
00:28:18,159 --> 00:28:20,240
and this is the case after reboot

827
00:28:20,240 --> 00:28:22,799
reconfigure update so in this case

828
00:28:22,799 --> 00:28:25,600
an attacker can use the same token and

829
00:28:25,600 --> 00:28:26,320
which will give

830
00:28:26,320 --> 00:28:28,480
them access full access to the device

831
00:28:28,480 --> 00:28:31,120
not only they by mapping table

832
00:28:31,120 --> 00:28:32,960
another way is to decrypt the

833
00:28:32,960 --> 00:28:35,840
configuration that is exchanged

834
00:28:35,840 --> 00:28:38,960
over over internet over network sorry

835
00:28:38,960 --> 00:28:40,240
so the attacker can dump the

836
00:28:40,240 --> 00:28:42,559
configuration and the configuration

837
00:28:42,559 --> 00:28:44,480
itself contain this is encrypted but

838
00:28:44,480 --> 00:28:45,679
contain the key

839
00:28:45,679 --> 00:28:48,080
to the cryptid so which is super early

840
00:28:48,080 --> 00:28:49,200
no i mean

841
00:28:49,200 --> 00:28:51,679
and the configuration is ies but the key

842
00:28:51,679 --> 00:28:52,480
is included

843
00:28:52,480 --> 00:28:55,840
so the attacker can simply use

844
00:28:55,840 --> 00:28:57,919
the library provided to provide like

845
00:28:57,919 --> 00:28:59,760
including the moxa firmware for example

846
00:28:59,760 --> 00:29:00,559
this underscore

847
00:29:00,559 --> 00:29:03,360
the crypt confidence convul 1as and as

848
00:29:03,360 --> 00:29:04,320
you can

849
00:29:04,320 --> 00:29:06,399
we can show here you can use qmo to

850
00:29:06,399 --> 00:29:08,000
emulate the library

851
00:29:08,000 --> 00:29:11,520
run it against the decrypt of encrypted

852
00:29:11,520 --> 00:29:12,159
content

853
00:29:12,159 --> 00:29:13,840
that has been installed by network and

854
00:29:13,840 --> 00:29:15,600
decrypt or the configuration including

855
00:29:15,600 --> 00:29:17,600
the mapping table

856
00:29:17,600 --> 00:29:19,200
the fourth way of doing it is the

857
00:29:19,200 --> 00:29:20,960
authenticated previous escalation

858
00:29:20,960 --> 00:29:23,200
vulnerability that we have found

859
00:29:23,200 --> 00:29:25,200
in the web console in which an

860
00:29:25,200 --> 00:29:26,399
unprivileged user like

861
00:29:26,399 --> 00:29:29,679
read only can abuse the common injection

862
00:29:29,679 --> 00:29:31,120
vulnerability in

863
00:29:31,120 --> 00:29:33,760
the ping destination form as you can see

864
00:29:33,760 --> 00:29:34,480
here

865
00:29:34,480 --> 00:29:37,679
to run a telnet d demon as a root so i

866
00:29:37,679 --> 00:29:40,159
don't really understand why ping

867
00:29:40,159 --> 00:29:41,840
needs a route to be run but that's the

868
00:29:41,840 --> 00:29:44,080
thing so at that point you can with uh

869
00:29:44,080 --> 00:29:47,039
with this command here you can basically

870
00:29:47,039 --> 00:29:48,799
inject like a talent the other point you

871
00:29:48,799 --> 00:29:49,360
connect

872
00:29:49,360 --> 00:29:52,799
back and you are root the other option

873
00:29:52,799 --> 00:29:54,000
is to use the memory leakage

874
00:29:54,000 --> 00:29:55,520
the vulnerability that we found in

875
00:29:55,520 --> 00:29:57,279
another of our products

876
00:29:57,279 --> 00:29:58,720
here we have an example of attack

877
00:29:58,720 --> 00:30:00,640
payload where you specify

878
00:30:00,640 --> 00:30:03,440
for a register to be read and the number

879
00:30:03,440 --> 00:30:04,799
of bytes

880
00:30:04,799 --> 00:30:06,640
set to zero which is doesn't make any

881
00:30:06,640 --> 00:30:08,799
sense so in this case what happened

882
00:30:08,799 --> 00:30:11,919
is that the device leak part of his

883
00:30:11,919 --> 00:30:12,640
memory

884
00:30:12,640 --> 00:30:15,840
to the slave in form of register that

885
00:30:15,840 --> 00:30:17,600
are set to the slave

886
00:30:17,600 --> 00:30:20,159
and then that are then also read back

887
00:30:20,159 --> 00:30:21,840
this is because a data station

888
00:30:21,840 --> 00:30:24,559
it keeps only uh synced his internal

889
00:30:24,559 --> 00:30:25,200
cache with

890
00:30:25,200 --> 00:30:27,360
value the register on the slave so at

891
00:30:27,360 --> 00:30:29,200
that point an attacker can read all the

892
00:30:29,200 --> 00:30:31,600
data back from the data station

893
00:30:31,600 --> 00:30:33,600
as you can see here on the on screen of

894
00:30:33,600 --> 00:30:35,520
the screenshot an attacker can

895
00:30:35,520 --> 00:30:38,320
for example leak part of this register

896
00:30:38,320 --> 00:30:39,559
register

897
00:30:39,559 --> 00:30:42,000
40563 which is exactly this one in the

898
00:30:42,000 --> 00:30:43,360
mapping table

899
00:30:43,360 --> 00:30:45,600
um we are still investigating this case

900
00:30:45,600 --> 00:30:47,200
but it looks like that the amount of

901
00:30:47,200 --> 00:30:48,240
data you can leak

902
00:30:48,240 --> 00:30:49,679
is proportional to the number of

903
00:30:49,679 --> 00:30:51,600
register to right field

904
00:30:51,600 --> 00:30:53,679
specified in the attack value with a cap

905
00:30:53,679 --> 00:30:55,520
of 16 bytes

906
00:30:55,520 --> 00:30:58,720
per request and the address that you

907
00:30:58,720 --> 00:31:01,600
um which are going to leak is

908
00:31:01,600 --> 00:31:03,440
predictable because it's a function of a

909
00:31:03,440 --> 00:31:05,120
starting address field

910
00:31:05,120 --> 00:31:09,200
specified in the in the attack pocket

911
00:31:09,200 --> 00:31:10,480
we also found a bunch of other

912
00:31:10,480 --> 00:31:12,320
translation problem that i would like to

913
00:31:12,320 --> 00:31:14,000
discuss with you but you know uh

914
00:31:14,000 --> 00:31:15,919
given the fact that due to this

915
00:31:15,919 --> 00:31:17,279
coronavirus

916
00:31:17,279 --> 00:31:20,320
problem our talk has been reduced

917
00:31:20,320 --> 00:31:22,640
from 50 minutes down to pretty much 35

918
00:31:22,640 --> 00:31:24,240
because there are

919
00:31:24,240 --> 00:31:27,039
questions upcoming and i'm going to

920
00:31:27,039 --> 00:31:28,480
mention briefly here but there are way

921
00:31:28,480 --> 00:31:30,159
more in the people that we are going to

922
00:31:30,159 --> 00:31:32,320
publish together with presentation

923
00:31:32,320 --> 00:31:34,399
uh so there are a lot of problem when it

924
00:31:34,399 --> 00:31:35,679
comes to the translation

925
00:31:35,679 --> 00:31:38,880
uh from your network uh that's an entry

926
00:31:38,880 --> 00:31:39,760
to the cloud

927
00:31:39,760 --> 00:31:41,279
for example photo that there is a lack

928
00:31:41,279 --> 00:31:43,120
of encryption or whether the encryption

929
00:31:43,120 --> 00:31:43,919
is broken

930
00:31:43,919 --> 00:31:46,080
so an attacker can steal confidential

931
00:31:46,080 --> 00:31:48,559
data like data coming from sensors

932
00:31:48,559 --> 00:31:50,880
there is a lack of sanitization so an

933
00:31:50,880 --> 00:31:52,000
attacker

934
00:31:52,000 --> 00:31:54,240
is able to inject for example sql

935
00:31:54,240 --> 00:31:55,760
injection command

936
00:31:55,760 --> 00:31:58,880
into uh into the communication between

937
00:31:58,880 --> 00:32:00,720
the protocol gateway

938
00:32:00,720 --> 00:32:04,000
and a database running in the cloud

939
00:32:04,000 --> 00:32:05,519
and exploiting a vulnerability

940
00:32:05,519 --> 00:32:08,320
sequential reliability in the cloud

941
00:32:08,320 --> 00:32:11,039
there is a broken authentication and

942
00:32:11,039 --> 00:32:12,159
many others

943
00:32:12,159 --> 00:32:13,360
there are still problems with

944
00:32:13,360 --> 00:32:15,360
availability for example the fact that

945
00:32:15,360 --> 00:32:17,279
someone can cause a nerve service attack

946
00:32:17,279 --> 00:32:20,640
by by using a single packet would

947
00:32:20,640 --> 00:32:22,640
like a single magic packet that would

948
00:32:22,640 --> 00:32:23,919
the change may be addressed on the

949
00:32:23,919 --> 00:32:25,039
device

950
00:32:25,039 --> 00:32:26,399
there are problems with a different

951
00:32:26,399 --> 00:32:30,158
implementation of specifications

952
00:32:30,240 --> 00:32:33,840
and so on and so forth so let me wrap

953
00:32:33,840 --> 00:32:36,880
up by saying that this device

954
00:32:36,880 --> 00:32:39,279
even if they are small tiny and they are

955
00:32:39,279 --> 00:32:41,360
not as visible as an industrial robot

956
00:32:41,360 --> 00:32:42,399
for example

957
00:32:42,399 --> 00:32:44,399
they play a very important role in a

958
00:32:44,399 --> 00:32:46,799
modern smart manufacturing network and

959
00:32:46,799 --> 00:32:48,480
their core to the communication

960
00:32:48,480 --> 00:32:51,919
so be sure to correctly configure them

961
00:32:51,919 --> 00:32:54,480
and manage them include them in your

962
00:32:54,480 --> 00:32:56,000
asset list

963
00:32:56,000 --> 00:32:59,840
and yeah i mean really take care of this

964
00:32:59,840 --> 00:33:01,279
modifiers because even if they're

965
00:33:01,279 --> 00:33:02,000
smaller

966
00:33:02,000 --> 00:33:03,679
they might create big problems something

967
00:33:03,679 --> 00:33:06,240
goes wrong as we as we show here in

968
00:33:06,240 --> 00:33:09,120
in our presentation then do not rely on

969
00:33:09,120 --> 00:33:10,720
a single point of failure like

970
00:33:10,720 --> 00:33:12,240
you know you might say okay i buy an ics

971
00:33:12,240 --> 00:33:14,320
firewall i'm done well not really

972
00:33:14,320 --> 00:33:15,039
because

973
00:33:15,039 --> 00:33:17,120
the vulnerability we have show you on

974
00:33:17,120 --> 00:33:19,120
the protocol translation

975
00:33:19,120 --> 00:33:20,799
their own vulnerability with a line

976
00:33:20,799 --> 00:33:23,360
attacker to create a legitim packet

977
00:33:23,360 --> 00:33:25,600
that would go through an ics firewall

978
00:33:25,600 --> 00:33:27,679
but would be converted into something

979
00:33:27,679 --> 00:33:28,559
else

980
00:33:28,559 --> 00:33:30,880
chosen by the attacker and potentially

981
00:33:30,880 --> 00:33:33,039
very badly that would for example like a

982
00:33:33,039 --> 00:33:34,640
disabled error

983
00:33:34,640 --> 00:33:37,519
changing server configuration change

984
00:33:37,519 --> 00:33:39,120
value with temperature

985
00:33:39,120 --> 00:33:41,600
threshold whatever so really don't rely

986
00:33:41,600 --> 00:33:42,559
on a single

987
00:33:42,559 --> 00:33:44,399
point of control but implement other

988
00:33:44,399 --> 00:33:46,320
heuristics like monitoring traffic on

989
00:33:46,320 --> 00:33:47,519
the serial

990
00:33:47,519 --> 00:33:49,760
or include intrusion detention system

991
00:33:49,760 --> 00:33:51,360
and so on and so forth

992
00:33:51,360 --> 00:33:54,320
and lastly try to consider security is

993
00:33:54,320 --> 00:33:55,760
an important aspect in the product

994
00:33:55,760 --> 00:33:56,399
selection

995
00:33:56,399 --> 00:33:58,240
so i know that when it comes to embedded

996
00:33:58,240 --> 00:34:00,320
devices

997
00:34:00,320 --> 00:34:02,399
security is not always there but you

998
00:34:02,399 --> 00:34:04,840
know try to go for those vendors that

999
00:34:04,840 --> 00:34:06,399
provide

1000
00:34:06,399 --> 00:34:08,719
at least some security features because

1001
00:34:08,719 --> 00:34:10,719
these devices need to be protected as

1002
00:34:10,719 --> 00:34:11,440
well

1003
00:34:11,440 --> 00:34:13,599
especially because they really contain a

1004
00:34:13,599 --> 00:34:16,560
lot of vulnerabilities a lot of problems

1005
00:34:16,560 --> 00:34:19,280
this one are only some of the problems

1006
00:34:19,280 --> 00:34:22,480
that we reported to zdi

1007
00:34:22,480 --> 00:34:25,599
but there are way more of this but we we

1008
00:34:25,599 --> 00:34:26,000
don't

1009
00:34:26,000 --> 00:34:29,119
we have decided to not report yet and

1010
00:34:29,119 --> 00:34:30,879
we are still investigating and so but

1011
00:34:30,879 --> 00:34:32,639
you know some of these problems have

1012
00:34:32,639 --> 00:34:33,199
been

1013
00:34:33,199 --> 00:34:36,079
fixed some are waiting to be fixed some

1014
00:34:36,079 --> 00:34:37,040
won't be fixed

1015
00:34:37,040 --> 00:34:39,040
unfortunately because we had really

1016
00:34:39,040 --> 00:34:40,639
difficulties in talking to the

1017
00:34:40,639 --> 00:34:42,000
appropriate

1018
00:34:42,000 --> 00:34:45,520
parties but you know we do our best so

1019
00:34:45,520 --> 00:34:46,800
the research we do

1020
00:34:46,800 --> 00:34:50,560
is a public we want to raise awareness

1021
00:34:50,560 --> 00:34:51,599
in this field but

1022
00:34:51,599 --> 00:34:55,359
we need awareness that's why we we have

1023
00:34:55,359 --> 00:34:55,760
done

1024
00:34:55,760 --> 00:34:59,440
this research again all the details will

1025
00:34:59,440 --> 00:35:01,359
be disclosed in the paper but will be

1026
00:35:01,359 --> 00:35:02,720
published at the time you see this

1027
00:35:02,720 --> 00:35:03,599
presentation

1028
00:35:03,599 --> 00:35:06,800
and you can reference it through our

1029
00:35:06,800 --> 00:35:09,359
social networking websites and if you

1030
00:35:09,359 --> 00:35:10,800
have any questions

1031
00:35:10,800 --> 00:35:13,040
either reach me out with twitter or feel

1032
00:35:13,040 --> 00:35:14,160
free to ask me

1033
00:35:14,160 --> 00:35:17,280
a live question thanks again for being

1034
00:35:17,280 --> 00:35:17,839
with me

1035
00:35:17,839 --> 00:35:22,400
and have a nice day bye bye

1036
00:35:25,040 --> 00:35:27,440
hello here is marco from italy as you

1037
00:35:27,440 --> 00:35:28,800
can see it's pretty

1038
00:35:28,800 --> 00:35:31,760
dark outside out here where i am now uh

1039
00:35:31,760 --> 00:35:32,400
yeah

1040
00:35:32,400 --> 00:35:34,400
thanks for listening i hope you enjoy

1041
00:35:34,400 --> 00:35:36,000
the talk uh

1042
00:35:36,000 --> 00:35:38,960
it was a kind of rash to make it into 45

1043
00:35:38,960 --> 00:35:39,920
minutes

1044
00:35:39,920 --> 00:35:41,920
but what i want to say is uh yeah today

1045
00:35:41,920 --> 00:35:43,359
i sent basically to

1046
00:35:43,359 --> 00:35:46,640
blanket crew of the paper which is

1047
00:35:46,640 --> 00:35:47,920
something like over

1048
00:35:47,920 --> 00:35:50,000
50 pages so there is a lot of material

1049
00:35:50,000 --> 00:35:51,839
in the paper you might want to check it

1050
00:35:51,839 --> 00:35:52,480
out

1051
00:35:52,480 --> 00:35:55,040
and as well an extended version of a

1052
00:35:55,040 --> 00:35:56,240
presentation where

1053
00:35:56,240 --> 00:35:59,680
we included like uh problems uh when it

1054
00:35:59,680 --> 00:36:01,680
comes to mqtt for example the cloud

1055
00:36:01,680 --> 00:36:02,560
support

1056
00:36:02,560 --> 00:36:05,760
as well as a longer introduction how the

1057
00:36:05,760 --> 00:36:07,200
filter works and

1058
00:36:07,200 --> 00:36:09,280
everything related to how we test

1059
00:36:09,280 --> 00:36:12,240
physically these devices

1060
00:36:12,240 --> 00:36:14,480
so i guess i replied already too many of

1061
00:36:14,480 --> 00:36:15,280
the questions

1062
00:36:15,280 --> 00:36:18,560
you guys add let me just go over here to

1063
00:36:18,560 --> 00:36:19,839
see if there is something

1064
00:36:19,839 --> 00:36:22,560
coming up here

1065
00:36:25,520 --> 00:36:27,599
yeah okay someone is commenting saying

1066
00:36:27,599 --> 00:36:29,520
okay to not expose the device over the

1067
00:36:29,520 --> 00:36:31,359
internet okay that's a little

1068
00:36:31,359 --> 00:36:33,920
obvious but the problem is that this

1069
00:36:33,920 --> 00:36:34,560
device

1070
00:36:34,560 --> 00:36:37,280
are often exposed to the control network

1071
00:36:37,280 --> 00:36:38,400
uh

1072
00:36:38,400 --> 00:36:40,240
so it's not the internet it's part of

1073
00:36:40,240 --> 00:36:42,000
your basically uh

1074
00:36:42,000 --> 00:36:45,280
enterprise and uh if you know any of the

1075
00:36:45,280 --> 00:36:46,880
machining the control network

1076
00:36:46,880 --> 00:36:48,640
are compromised then at that point

1077
00:36:48,640 --> 00:36:50,320
basically you can attack

1078
00:36:50,320 --> 00:36:53,680
uh your production network via

1079
00:36:53,680 --> 00:36:55,760
the the protocol gateway and it's very

1080
00:36:55,760 --> 00:36:57,040
difficult to debug

1081
00:36:57,040 --> 00:36:59,040
such attacks because this embedded

1082
00:36:59,040 --> 00:37:01,040
device is very difficult to debug

1083
00:37:01,040 --> 00:37:03,680
uh very often don't have logs and then

1084
00:37:03,680 --> 00:37:05,760
the device does not basically show any

1085
00:37:05,760 --> 00:37:07,440
problem so the device

1086
00:37:07,440 --> 00:37:10,240
basically make a mistake in the

1087
00:37:10,240 --> 00:37:11,200
translation

1088
00:37:11,200 --> 00:37:14,240
and bring the mistake down to the plc

1089
00:37:14,240 --> 00:37:16,560
and so it's very hard to debug such

1090
00:37:16,560 --> 00:37:17,920
things that's also

1091
00:37:17,920 --> 00:37:21,440
one other issue uh oh yeah man there is

1092
00:37:21,440 --> 00:37:23,440
too many things here how do you see

1093
00:37:23,440 --> 00:37:24,800
traditional ics protocol

1094
00:37:24,800 --> 00:37:26,560
change in the future especially internal

1095
00:37:26,560 --> 00:37:28,480
authentication encryption

1096
00:37:28,480 --> 00:37:31,839
etc um yeah that's a good question in

1097
00:37:31,839 --> 00:37:33,599
the past we did a similar work where we

1098
00:37:33,599 --> 00:37:34,240
look at

1099
00:37:34,240 --> 00:37:36,480
aes which is like a protocol using

1100
00:37:36,480 --> 00:37:37,839
monitoring security and

1101
00:37:37,839 --> 00:37:40,320
that was also protocol that has no

1102
00:37:40,320 --> 00:37:41,280
encryption and

1103
00:37:41,280 --> 00:37:44,160
no such things but uh in the future i

1104
00:37:44,160 --> 00:37:44,480
guess

1105
00:37:44,480 --> 00:37:46,560
ics product will be more robust but

1106
00:37:46,560 --> 00:37:48,720
again here the problem is not of modbus

1107
00:37:48,720 --> 00:37:50,079
so modbus is okay

1108
00:37:50,079 --> 00:37:52,480
it's the problem of how this ics power

1109
00:37:52,480 --> 00:37:54,720
call is implemented in the device

1110
00:37:54,720 --> 00:37:57,200
so uh so you take like a protocol even

1111
00:37:57,200 --> 00:37:59,040
if a protocol is safe but you

1112
00:37:59,040 --> 00:38:00,800
implement it in a wrong way like you do

1113
00:38:00,800 --> 00:38:02,720
it in a router no you cannot say that

1114
00:38:02,720 --> 00:38:04,400
tcp is

1115
00:38:04,400 --> 00:38:05,839
you know it's a wrong product all right

1116
00:38:05,839 --> 00:38:08,079
i mean but if your router is uh

1117
00:38:08,079 --> 00:38:10,720
implement in a bad way basically the

1118
00:38:10,720 --> 00:38:12,000
translation

1119
00:38:12,000 --> 00:38:14,320
uh with this vp translation then you

1120
00:38:14,320 --> 00:38:15,760
know you might have problems so it's

1121
00:38:15,760 --> 00:38:16,480
really

1122
00:38:16,480 --> 00:38:19,359
a problem of the of the gateways no

1123
00:38:19,359 --> 00:38:21,040
travel of the of the protocol

1124
00:38:21,040 --> 00:38:22,560
but yeah i agree with you that in

1125
00:38:22,560 --> 00:38:25,280
general you know uh the scs protocols

1126
00:38:25,280 --> 00:38:28,320
should improve the in the future

1127
00:38:28,320 --> 00:38:31,359
um someone is asking

1128
00:38:31,359 --> 00:38:33,119
what do you want to couple with ics

1129
00:38:33,119 --> 00:38:35,280
firewall um

1130
00:38:35,280 --> 00:38:38,560
yeah i mean the idea would be to that

1131
00:38:38,560 --> 00:38:38,960
you

1132
00:38:38,960 --> 00:38:41,359
monitor not only the tcpap side like the

1133
00:38:41,359 --> 00:38:42,560
control network but

1134
00:38:42,560 --> 00:38:46,400
also like the serial side uh the problem

1135
00:38:46,400 --> 00:38:48,480
i mean i'm not really energy engineer or

1136
00:38:48,480 --> 00:38:49,520
lt expert but

1137
00:38:49,520 --> 00:38:51,599
my understanding is that from the serial

1138
00:38:51,599 --> 00:38:53,440
side there are not many actually there

1139
00:38:53,440 --> 00:38:55,119
are no products doing like

1140
00:38:55,119 --> 00:38:58,240
ips or firewalling on serial

1141
00:38:58,240 --> 00:39:00,400
so at that point you have to uh

1142
00:39:00,400 --> 00:39:02,400
implement your own basically monitoring

1143
00:39:02,400 --> 00:39:02,960
system

1144
00:39:02,960 --> 00:39:06,160
so you you for example you can use a tab

1145
00:39:06,160 --> 00:39:08,800
to capture data on serial at that point

1146
00:39:08,800 --> 00:39:10,640
you can monitor you know if

1147
00:39:10,640 --> 00:39:13,680
what comes out of the serial makes sense

1148
00:39:13,680 --> 00:39:14,160
uh

1149
00:39:14,160 --> 00:39:17,440
or not yeah so i have one more minute

1150
00:39:17,440 --> 00:39:17,839
here

1151
00:39:17,839 --> 00:39:21,359
uh yeah there is not much but

1152
00:39:21,359 --> 00:39:23,599
in any case i would say uh you have my

1153
00:39:23,599 --> 00:39:25,040
contacts uh

1154
00:39:25,040 --> 00:39:28,079
and also the contacts of the uh

1155
00:39:28,079 --> 00:39:30,240
of the researcher that you know work

1156
00:39:30,240 --> 00:39:32,079
with me in this uh

1157
00:39:32,079 --> 00:39:34,720
this research uh so we are a group of

1158
00:39:34,720 --> 00:39:35,520
people

1159
00:39:35,520 --> 00:39:38,160
uh they are all listed as well in the

1160
00:39:38,160 --> 00:39:39,280
abstract

1161
00:39:39,280 --> 00:39:41,920
of the talk as well in the paper so you

1162
00:39:41,920 --> 00:39:43,359
may wanna

1163
00:39:43,359 --> 00:39:45,680
let us know in case you have far more

1164
00:39:45,680 --> 00:39:46,960
questions so thanks a lot

1165
00:39:46,960 --> 00:39:48,640
enjoying blackhead even if it's weird

1166
00:39:48,640 --> 00:39:50,240
wow and

1167
00:39:50,240 --> 00:39:54,399
have fun bye

