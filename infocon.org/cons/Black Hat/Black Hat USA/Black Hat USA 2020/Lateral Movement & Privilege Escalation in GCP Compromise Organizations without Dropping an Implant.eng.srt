1
00:00:02,740 --> 00:00:12,539
[Music]

2
00:00:13,360 --> 00:00:17,919
my name is allison

3
00:00:18,400 --> 00:00:21,359
hi my name's dylan

4
00:00:23,359 --> 00:00:25,119
we've been researching gcp for the last

5
00:00:25,119 --> 00:00:26,320
year and a half and we've come up with

6
00:00:26,320 --> 00:00:28,160
some effective ways that compromise most

7
00:00:28,160 --> 00:00:29,519
gcp organizations

8
00:00:29,519 --> 00:00:30,960
all the ones we've looked at anyway

9
00:00:30,960 --> 00:00:32,159
these techniques involve moving

10
00:00:32,159 --> 00:00:33,680
laterally with service accounts and

11
00:00:33,680 --> 00:00:35,520
cloud apis we have a lot of ground to

12
00:00:35,520 --> 00:00:45,840
cover so let's get to it

13
00:00:47,140 --> 00:00:49,360
[Music]

14
00:00:49,360 --> 00:00:50,800
i think everyone has a slightly

15
00:00:50,800 --> 00:00:52,320
different reaction when they first start

16
00:00:52,320 --> 00:00:55,120
learning about gcp iam

17
00:00:55,120 --> 00:00:57,360
what the the one common thing i've

18
00:00:57,360 --> 00:00:59,039
observed is people often compare it to

19
00:00:59,039 --> 00:01:01,199
aws iam but there are some pretty key

20
00:01:01,199 --> 00:01:03,600
differences between gcp and aws iam

21
00:01:03,600 --> 00:01:04,799
so let's talk about some of those

22
00:01:04,799 --> 00:01:06,720
differences first in aws

23
00:01:06,720 --> 00:01:09,200
we have user identities and those user

24
00:01:09,200 --> 00:01:11,520
identities can be exported in the form

25
00:01:11,520 --> 00:01:12,640
of credentials

26
00:01:12,640 --> 00:01:16,000
which looks something like this in gcp

27
00:01:16,000 --> 00:01:18,799
the equivalent is a service account and

28
00:01:18,799 --> 00:01:19,680
service accounts

29
00:01:19,680 --> 00:01:21,920
can also be exported in credentials that

30
00:01:21,920 --> 00:01:23,119
look a little bit differently they look

31
00:01:23,119 --> 00:01:25,439
like this

32
00:01:25,439 --> 00:01:27,680
and in both cases we have owners of

33
00:01:27,680 --> 00:01:29,040
these identities

34
00:01:29,040 --> 00:01:30,320
but where things get a little bit

35
00:01:30,320 --> 00:01:31,680
different is when you start to ask the

36
00:01:31,680 --> 00:01:32,320
question

37
00:01:32,320 --> 00:01:34,799
what can my identity access in the world

38
00:01:34,799 --> 00:01:35,680
of aws

39
00:01:35,680 --> 00:01:37,360
you basically have a policy that

40
00:01:37,360 --> 00:01:39,200
determines all the different things that

41
00:01:39,200 --> 00:01:40,000
the identity

42
00:01:40,000 --> 00:01:42,720
can access and the person who can create

43
00:01:42,720 --> 00:01:43,040
re

44
00:01:43,040 --> 00:01:45,280
update delete that policy is the same

45
00:01:45,280 --> 00:01:46,640
person who owns the

46
00:01:46,640 --> 00:01:48,240
identity so here's an example of what

47
00:01:48,240 --> 00:01:50,320
that looks like

48
00:01:50,320 --> 00:01:52,000
in gcp though this is where things start

49
00:01:52,000 --> 00:01:53,280
getting really different instead of

50
00:01:53,280 --> 00:01:55,759
having a centralized policy for a given

51
00:01:55,759 --> 00:01:58,640
identity we have policies for resources

52
00:01:58,640 --> 00:02:00,240
so in this case we've got a bucket and a

53
00:02:00,240 --> 00:02:02,320
bucket owner and that bucket has a

54
00:02:02,320 --> 00:02:03,040
policy

55
00:02:03,040 --> 00:02:05,439
the bucket owner controls who can create

56
00:02:05,439 --> 00:02:07,920
read update or delete that policy and

57
00:02:07,920 --> 00:02:10,080
that policy applies to whatever identity

58
00:02:10,080 --> 00:02:11,680
the bucket owner wants it to

59
00:02:11,680 --> 00:02:13,920
so here's an example of what that looks

60
00:02:13,920 --> 00:02:16,800
like for storage

61
00:02:16,800 --> 00:02:18,879
what's interesting here is that the

62
00:02:18,879 --> 00:02:20,480
owner of the service account

63
00:02:20,480 --> 00:02:23,360
actually doesn't have any insight into

64
00:02:23,360 --> 00:02:25,280
this policy they can't view it

65
00:02:25,280 --> 00:02:27,280
they can't update it they don't even

66
00:02:27,280 --> 00:02:28,959
know that their service account was

67
00:02:28,959 --> 00:02:30,480
given access to this bucket

68
00:02:30,480 --> 00:02:32,640
instead the bucket owner controls this

69
00:02:32,640 --> 00:02:33,599
and if the

70
00:02:33,599 --> 00:02:34,800
owner of the service account doesn't

71
00:02:34,800 --> 00:02:36,640
have im list on the bucket

72
00:02:36,640 --> 00:02:38,720
then they won't be able to even see that

73
00:02:38,720 --> 00:02:41,840
that policy was granted

74
00:02:41,840 --> 00:02:43,200
and i think this is one of the harder

75
00:02:43,200 --> 00:02:44,800
concepts it was for me personally to

76
00:02:44,800 --> 00:02:46,160
wrap my head around in gcp

77
00:02:46,160 --> 00:02:48,319
is if you have an identity in gcp like a

78
00:02:48,319 --> 00:02:50,080
user or a surface account

79
00:02:50,080 --> 00:02:52,160
as the owner of that identity you can't

80
00:02:52,160 --> 00:02:53,280
actually know

81
00:02:53,280 --> 00:02:55,440
what that identity has access to in fact

82
00:02:55,440 --> 00:02:57,200
no one can answer the question

83
00:02:57,200 --> 00:02:58,800
what does a service account have access

84
00:02:58,800 --> 00:03:01,120
to instead resource owners control what

85
00:03:01,120 --> 00:03:02,879
the policy is for a given resource so

86
00:03:02,879 --> 00:03:04,319
you can answer questions like

87
00:03:04,319 --> 00:03:06,319
who has access to this bucket but you

88
00:03:06,319 --> 00:03:08,000
can answer questions like how many

89
00:03:08,000 --> 00:03:09,440
buckets does the service account have

90
00:03:09,440 --> 00:03:11,040
access to or what buckets does the

91
00:03:11,040 --> 00:03:12,640
service account have access to

92
00:03:12,640 --> 00:03:14,480
those questions are unanswerable by

93
00:03:14,480 --> 00:03:15,680
design in gcp

94
00:03:15,680 --> 00:03:17,440
likewise we can have other resources

95
00:03:17,440 --> 00:03:19,280
like bigquery for example and we have an

96
00:03:19,280 --> 00:03:21,120
owner for the bigquery and a policy for

97
00:03:21,120 --> 00:03:22,560
the bigquery and the owner of the

98
00:03:22,560 --> 00:03:23,760
bigquery can again

99
00:03:23,760 --> 00:03:26,159
grant access to any identity they want

100
00:03:26,159 --> 00:03:26,879
however

101
00:03:26,879 --> 00:03:29,040
the owner of the service account has no

102
00:03:29,040 --> 00:03:30,799
control over this and can't see this one

103
00:03:30,799 --> 00:03:32,400
thing you might be wondering is before

104
00:03:32,400 --> 00:03:33,599
when i mentioned that the owner of a

105
00:03:33,599 --> 00:03:34,319
service account

106
00:03:34,319 --> 00:03:35,840
can't fully answer the question what

107
00:03:35,840 --> 00:03:37,599
does the service account have access to

108
00:03:37,599 --> 00:03:39,360
you might be thinking well if you own an

109
00:03:39,360 --> 00:03:41,680
organization can't you just get the iem

110
00:03:41,680 --> 00:03:43,200
policies of all the resources in the

111
00:03:43,200 --> 00:03:43,920
organization

112
00:03:43,920 --> 00:03:45,760
well someone outside your organization

113
00:03:45,760 --> 00:03:47,120
can still grant your service account

114
00:03:47,120 --> 00:03:48,640
access to their resources

115
00:03:48,640 --> 00:03:50,879
so when i said before you can't actually

116
00:03:50,879 --> 00:03:51,680
answer the question

117
00:03:51,680 --> 00:03:52,799
what does your service account have

118
00:03:52,799 --> 00:03:54,799
access to it's true you cannot get the

119
00:03:54,799 --> 00:03:56,239
answer to the question because people

120
00:03:56,239 --> 00:03:57,439
outside your organization

121
00:03:57,439 --> 00:03:59,840
can also grant access to their resources

122
00:03:59,840 --> 00:04:01,040
we'll come back to that later and

123
00:04:01,040 --> 00:04:01,680
explain

124
00:04:01,680 --> 00:04:03,439
what an organization is and how it's

125
00:04:03,439 --> 00:04:04,720
structured but for now i figured i'd

126
00:04:04,720 --> 00:04:05,760
just mention that in case you were

127
00:04:05,760 --> 00:04:06,239
wondering

128
00:04:06,239 --> 00:04:08,159
as you might imagine not having control

129
00:04:08,159 --> 00:04:09,920
or visibility into what your service

130
00:04:09,920 --> 00:04:10,640
accounts can

131
00:04:10,640 --> 00:04:12,319
or can't access comes with some

132
00:04:12,319 --> 00:04:13,920
challenges and one particular place i

133
00:04:13,920 --> 00:04:15,040
think those challenges manifest

134
00:04:15,040 --> 00:04:16,238
themselves is in a multi-tenant

135
00:04:16,238 --> 00:04:17,519
kubernetes environment

136
00:04:17,519 --> 00:04:19,199
google has a managed kubernetes engine

137
00:04:19,199 --> 00:04:21,279
that's often shorthanded gke

138
00:04:21,279 --> 00:04:23,040
if you're familiar with kubernetes you

139
00:04:23,040 --> 00:04:24,960
have a bunch of nodes and within those

140
00:04:24,960 --> 00:04:26,479
nodes you have workloads

141
00:04:26,479 --> 00:04:29,040
in gke those nodes are powered by vms

142
00:04:29,040 --> 00:04:30,720
and those vms have service accounts

143
00:04:30,720 --> 00:04:31,680
attached to them

144
00:04:31,680 --> 00:04:33,520
if we take a look at console we can see

145
00:04:33,520 --> 00:04:35,520
a kubernetes cluster here that's powered

146
00:04:35,520 --> 00:04:39,039
by four underlying nodes

147
00:04:39,120 --> 00:04:41,040
then if we hop over to compute engine

148
00:04:41,040 --> 00:04:42,880
and click on vm instances we'll see the

149
00:04:42,880 --> 00:04:44,080
same four instances

150
00:04:44,080 --> 00:04:45,520
and if we click into one of them we'll

151
00:04:45,520 --> 00:04:46,720
see that we have a service account

152
00:04:46,720 --> 00:04:48,160
that's attached to it we talked a little

153
00:04:48,160 --> 00:04:49,360
bit about how workloads

154
00:04:49,360 --> 00:04:51,120
interact with the service account in our

155
00:04:51,120 --> 00:04:52,960
b-side san francisco talk this year so

156
00:04:52,960 --> 00:04:55,280
feel free to check that out

157
00:04:55,280 --> 00:04:56,720
but in short anything running on the

158
00:04:56,720 --> 00:04:58,639
node can access this identity so it's a

159
00:04:58,639 --> 00:05:00,240
good idea to de-scope it and not give it

160
00:05:00,240 --> 00:05:01,039
many privileges

161
00:05:01,039 --> 00:05:02,479
but let's think about what that actually

162
00:05:02,479 --> 00:05:04,400
means we have a kubernetes admin that

163
00:05:04,400 --> 00:05:05,360
runs the nodes

164
00:05:05,360 --> 00:05:06,800
and the service account powering the

165
00:05:06,800 --> 00:05:08,160
nodes and then we have a bunch of

166
00:05:08,160 --> 00:05:10,160
developers that run the workloads on the

167
00:05:10,160 --> 00:05:11,919
kubernetes engine those developers may

168
00:05:11,919 --> 00:05:13,360
be on separate teams and may be in

169
00:05:13,360 --> 00:05:15,199
control of separate resources from each

170
00:05:15,199 --> 00:05:16,880
other and from the kubernetes admin so

171
00:05:16,880 --> 00:05:18,560
you can imagine in this case we have

172
00:05:18,560 --> 00:05:20,560
dev1 and dev2 that have both deployed

173
00:05:20,560 --> 00:05:22,720
workloads workload 1 and workload 2.

174
00:05:22,720 --> 00:05:24,000
likewise they both control

175
00:05:24,000 --> 00:05:25,520
resources in this case we'll say that

176
00:05:25,520 --> 00:05:27,120
they both own a bucket and they want

177
00:05:27,120 --> 00:05:28,639
their workloads to be able to access

178
00:05:28,639 --> 00:05:30,639
that bucket one really easy way to do

179
00:05:30,639 --> 00:05:32,720
that is to just give the service account

180
00:05:32,720 --> 00:05:33,440
on the node

181
00:05:33,440 --> 00:05:35,520
access to the bucket but the downside to

182
00:05:35,520 --> 00:05:37,039
doing that is instead of just giving

183
00:05:37,039 --> 00:05:38,000
their workload access

184
00:05:38,000 --> 00:05:39,199
to the bucket they'll give every

185
00:05:39,199 --> 00:05:40,720
workload access to the bucket the

186
00:05:40,720 --> 00:05:42,560
developers in this case control this

187
00:05:42,560 --> 00:05:44,080
story they control what the service

188
00:05:44,080 --> 00:05:45,840
account has access to because they're

189
00:05:45,840 --> 00:05:46,880
the resource owners

190
00:05:46,880 --> 00:05:48,800
the kubernetes admin does not control

191
00:05:48,800 --> 00:05:50,240
this and cannot see that this even

192
00:05:50,240 --> 00:05:51,840
happened so you can imagine in a

193
00:05:51,840 --> 00:05:53,280
situation where you have

194
00:05:53,280 --> 00:05:55,520
a small team of kubernetes admins that

195
00:05:55,520 --> 00:05:57,120
are trying to maintain a cluster

196
00:05:57,120 --> 00:05:58,880
that want to open it up to give many

197
00:05:58,880 --> 00:06:00,479
developers the ability to deploy

198
00:06:00,479 --> 00:06:02,080
workloads to this cluster it can be

199
00:06:02,080 --> 00:06:03,759
difficult to secure because they can't

200
00:06:03,759 --> 00:06:05,039
control with the service account

201
00:06:05,039 --> 00:06:07,440
attached to the notes has access to and

202
00:06:07,440 --> 00:06:09,120
some developers may want to just give

203
00:06:09,120 --> 00:06:11,440
that service account access to resources

204
00:06:11,440 --> 00:06:12,800
rather than using something like

205
00:06:12,800 --> 00:06:15,199
kubernetes secrets or vault to pass

206
00:06:15,199 --> 00:06:16,880
credentials to those workloads

207
00:06:16,880 --> 00:06:18,800
they may choose to just give the service

208
00:06:18,800 --> 00:06:20,880
account attached to the underlying node

209
00:06:20,880 --> 00:06:23,120
access to their resources but when they

210
00:06:23,120 --> 00:06:25,440
do that they give all workloads access

211
00:06:25,440 --> 00:06:26,560
to their resources

212
00:06:26,560 --> 00:06:28,800
not just one workload and so you end up

213
00:06:28,800 --> 00:06:29,919
in a situation

214
00:06:29,919 --> 00:06:32,160
where a kubernetes admin who wants to

215
00:06:32,160 --> 00:06:34,240
onboard developers into their cluster

216
00:06:34,240 --> 00:06:36,639
inadvertently gives every new workload

217
00:06:36,639 --> 00:06:38,639
access to a bunch of resources even

218
00:06:38,639 --> 00:06:40,319
though they can't even see that or have

219
00:06:40,319 --> 00:06:49,440
any control over it

220
00:06:49,440 --> 00:06:52,680
[Music]

221
00:06:53,919 --> 00:06:55,440
okay now before we go any further it's

222
00:06:55,440 --> 00:06:56,880
important to point out that up until

223
00:06:56,880 --> 00:06:58,560
this point i've kind of implied that

224
00:06:58,560 --> 00:07:00,479
resources are like these standalone

225
00:07:00,479 --> 00:07:01,599
entities that receive

226
00:07:01,599 --> 00:07:03,520
single role bindings directly to them

227
00:07:03,520 --> 00:07:05,280
and while resources definitely can

228
00:07:05,280 --> 00:07:06,240
operate that way

229
00:07:06,240 --> 00:07:07,680
most of the time they're actually

230
00:07:07,680 --> 00:07:09,440
bundled together into groupings and

231
00:07:09,440 --> 00:07:10,800
there's a role binding that goes to the

232
00:07:10,800 --> 00:07:12,479
entire group of stuff so instead of

233
00:07:12,479 --> 00:07:13,919
getting a role directly to a bucket

234
00:07:13,919 --> 00:07:15,599
you'd instead get a role to a collection

235
00:07:15,599 --> 00:07:17,599
of buckets so fundamentally there are

236
00:07:17,599 --> 00:07:18,160
four

237
00:07:18,160 --> 00:07:20,560
nodes resource nodes within gcp there's

238
00:07:20,560 --> 00:07:22,880
an organization node which is the parent

239
00:07:22,880 --> 00:07:23,280
node

240
00:07:23,280 --> 00:07:25,039
this is generally associated with your

241
00:07:25,039 --> 00:07:27,039
domain or cloud identity service there

242
00:07:27,039 --> 00:07:27,840
are folders

243
00:07:27,840 --> 00:07:30,720
and projects all of these different top

244
00:07:30,720 --> 00:07:33,520
level nodes are mostly used for iam

245
00:07:33,520 --> 00:07:34,960
and something that's important to note

246
00:07:34,960 --> 00:07:36,560
within the resource hierarchy is the

247
00:07:36,560 --> 00:07:37,360
concept of

248
00:07:37,360 --> 00:07:40,000
i am inheritance where wherever you have

249
00:07:40,000 --> 00:07:41,199
an i am binding

250
00:07:41,199 --> 00:07:43,599
to one of these top level nodes your i

251
00:07:43,599 --> 00:07:44,319
am binding

252
00:07:44,319 --> 00:07:46,960
is also going to be inherited to all

253
00:07:46,960 --> 00:07:47,840
subsequent or

254
00:07:47,840 --> 00:07:50,479
child resources within this hierarchy so

255
00:07:50,479 --> 00:07:51,840
if i have a role binding at the

256
00:07:51,840 --> 00:07:53,680
organization i have access to all

257
00:07:53,680 --> 00:07:55,280
subsequent resources that are created

258
00:07:55,280 --> 00:07:56,479
within the environment

259
00:07:56,479 --> 00:07:58,720
same at the folder and project level

260
00:07:58,720 --> 00:07:59,759
generally users

261
00:07:59,759 --> 00:08:01,599
mostly interact with resources at the

262
00:08:01,599 --> 00:08:03,120
project level that's where

263
00:08:03,120 --> 00:08:06,160
services like buckets compute and

264
00:08:06,160 --> 00:08:07,599
general services that you may interact

265
00:08:07,599 --> 00:08:09,280
with on a day-to-day basis are

266
00:08:09,280 --> 00:08:10,960
now let's dig into a few different im

267
00:08:10,960 --> 00:08:12,639
workflows and try to understand why

268
00:08:12,639 --> 00:08:14,560
project level im bindings are so

269
00:08:14,560 --> 00:08:16,479
prevalent in gcp

270
00:08:16,479 --> 00:08:18,319
if we navigate to iam and we go to grant

271
00:08:18,319 --> 00:08:20,080
a member access to our resources what

272
00:08:20,080 --> 00:08:21,199
we're doing here is we're actually

273
00:08:21,199 --> 00:08:22,879
creating a project level role binding

274
00:08:22,879 --> 00:08:24,800
which will give this member access to

275
00:08:24,800 --> 00:08:26,479
all resources within our project if we

276
00:08:26,479 --> 00:08:28,560
wanted to create a resource level im

277
00:08:28,560 --> 00:08:29,840
binding we would actually need to

278
00:08:29,840 --> 00:08:32,240
interact with the resource specific api

279
00:08:32,240 --> 00:08:35,599
and set the iam binding there

280
00:08:36,000 --> 00:08:37,760
another im workflow where a user is

281
00:08:37,760 --> 00:08:39,360
prompted to create a project level role

282
00:08:39,360 --> 00:08:40,000
binding is

283
00:08:40,000 --> 00:08:41,599
when you create a service account when

284
00:08:41,599 --> 00:08:42,958
we create a service account we'll

285
00:08:42,958 --> 00:08:44,080
actually be prompted

286
00:08:44,080 --> 00:08:46,320
to set a project level i am binding that

287
00:08:46,320 --> 00:08:48,080
will grant this service account access

288
00:08:48,080 --> 00:08:49,680
again to all resources within our

289
00:08:49,680 --> 00:08:51,760
project so we can see that when you go

290
00:08:51,760 --> 00:08:53,680
through general im workflows you are

291
00:08:53,680 --> 00:08:55,360
going to always be setting a project

292
00:08:55,360 --> 00:08:57,760
level i am binding your im binding is

293
00:08:57,760 --> 00:08:58,320
also

294
00:08:58,320 --> 00:09:00,480
going to be inherited to all subsequent

295
00:09:00,480 --> 00:09:04,560
or child resources within this project

296
00:09:05,200 --> 00:09:06,560
here we can also see something called

297
00:09:06,560 --> 00:09:08,720
conditionals this is an advanced feature

298
00:09:08,720 --> 00:09:10,640
within the im service that does enable

299
00:09:10,640 --> 00:09:13,200
you to set more granular im policies

300
00:09:13,200 --> 00:09:15,040
but also at the project level within

301
00:09:15,040 --> 00:09:16,320
your environment

302
00:09:16,320 --> 00:09:17,519
so i think that's really interesting

303
00:09:17,519 --> 00:09:19,519
that the main iam button in the ui

304
00:09:19,519 --> 00:09:21,120
actually takes you to the project level

305
00:09:21,120 --> 00:09:22,800
bindings a lot of people don't even

306
00:09:22,800 --> 00:09:24,399
realize that you can do resource level

307
00:09:24,399 --> 00:09:25,839
bindings because you have to actually

308
00:09:25,839 --> 00:09:26,480
click through

309
00:09:26,480 --> 00:09:28,160
into the resource to see that there are

310
00:09:28,160 --> 00:09:30,000
im settings there and a lot of people

311
00:09:30,000 --> 00:09:31,600
just assume that if they go to the i am

312
00:09:31,600 --> 00:09:33,360
page they get the whole iam story so

313
00:09:33,360 --> 00:09:34,640
when we backtrack a little bit to when

314
00:09:34,640 --> 00:09:36,000
we were talking about resource owners

315
00:09:36,000 --> 00:09:37,120
and service account owners

316
00:09:37,120 --> 00:09:38,720
realistically what would actually happen

317
00:09:38,720 --> 00:09:40,320
is you would have project owners and

318
00:09:40,320 --> 00:09:42,000
within those projects you would have

319
00:09:42,000 --> 00:09:44,240
resources and service accounts so before

320
00:09:44,240 --> 00:09:45,680
we were talking about role bindings we

321
00:09:45,680 --> 00:09:47,600
mentioned this idea of kubernetes nodes

322
00:09:47,600 --> 00:09:48,080
having

323
00:09:48,080 --> 00:09:49,440
service accounts attached to them and

324
00:09:49,440 --> 00:09:51,120
developers deploying workloads to the

325
00:09:51,120 --> 00:09:52,800
kubernetes cluster and granting them

326
00:09:52,800 --> 00:09:54,240
access to resources

327
00:09:54,240 --> 00:09:55,519
but more realistically what that would

328
00:09:55,519 --> 00:09:57,200
look like is they would grant that node

329
00:09:57,200 --> 00:09:58,720
access to their entire project

330
00:09:58,720 --> 00:10:00,399
because again im bindings are typically

331
00:10:00,399 --> 00:10:02,079
done at the project level so instead of

332
00:10:02,079 --> 00:10:03,600
granting the node access to a single

333
00:10:03,600 --> 00:10:05,279
bucket they would granted access to all

334
00:10:05,279 --> 00:10:06,720
buckets within a given project

335
00:10:06,720 --> 00:10:08,480
now this isn't always the case sometimes

336
00:10:08,480 --> 00:10:10,079
developers do resource level role

337
00:10:10,079 --> 00:10:10,560
binding

338
00:10:10,560 --> 00:10:12,480
and it should also be noted that the ui

339
00:10:12,480 --> 00:10:13,920
isn't the only way to apply these role

340
00:10:13,920 --> 00:10:15,519
bindings you can also apply them via

341
00:10:15,519 --> 00:10:17,120
terraform or via cli

342
00:10:17,120 --> 00:10:19,040
it's pretty common for developers to do

343
00:10:19,040 --> 00:10:20,640
it at the project level because most of

344
00:10:20,640 --> 00:10:22,399
their first exposure actually comes

345
00:10:22,399 --> 00:10:23,200
through the ui

346
00:10:23,200 --> 00:10:24,720
okay so if we recapped the earlier

347
00:10:24,720 --> 00:10:26,000
section you might remember when we

348
00:10:26,000 --> 00:10:27,600
talked about service account owners

349
00:10:27,600 --> 00:10:28,880
we mentioned that the service account

350
00:10:28,880 --> 00:10:30,720
owner can't actually know what access

351
00:10:30,720 --> 00:10:32,079
their service accounts have well it's

352
00:10:32,079 --> 00:10:33,440
not really the whole story really what

353
00:10:33,440 --> 00:10:35,040
we have is a project owner and then that

354
00:10:35,040 --> 00:10:36,399
project owner has a bunch of service

355
00:10:36,399 --> 00:10:37,600
accounts in their project

356
00:10:37,600 --> 00:10:38,959
and then those service accounts have

357
00:10:38,959 --> 00:10:40,560
access to stuff and the project owner

358
00:10:40,560 --> 00:10:42,000
doesn't really have the whole story of

359
00:10:42,000 --> 00:10:43,440
what their service accounts have access

360
00:10:43,440 --> 00:10:43,760
to

361
00:10:43,760 --> 00:10:45,120
and so you might imagine how that can

362
00:10:45,120 --> 00:10:46,800
start to become dangerous is when i hand

363
00:10:46,800 --> 00:10:47,200
over

364
00:10:47,200 --> 00:10:49,200
access of my project to someone else i

365
00:10:49,200 --> 00:10:50,480
don't really know how much access i'm

366
00:10:50,480 --> 00:10:51,760
handing over because again

367
00:10:51,760 --> 00:10:53,279
i don't even know how much access my

368
00:10:53,279 --> 00:10:54,800
service accounts have in my project so

369
00:10:54,800 --> 00:10:56,560
if i hand that over to someone else i'm

370
00:10:56,560 --> 00:10:58,480
handing over an unknown amount of access

371
00:10:58,480 --> 00:11:00,240
so what is an example of this look like

372
00:11:00,240 --> 00:11:02,399
well we have a project owner that knows

373
00:11:02,399 --> 00:11:04,320
the email address of a different project

374
00:11:04,320 --> 00:11:06,240
service account they can then give that

375
00:11:06,240 --> 00:11:07,040
service account

376
00:11:07,040 --> 00:11:09,279
access to their project through an im

377
00:11:09,279 --> 00:11:11,200
binding and then that service account

378
00:11:11,200 --> 00:11:14,000
has access to their project's resources

379
00:11:14,000 --> 00:11:15,200
now one question you might be asking

380
00:11:15,200 --> 00:11:16,480
yourself is why you would even need a

381
00:11:16,480 --> 00:11:17,920
cross project role binding but when you

382
00:11:17,920 --> 00:11:19,040
think about it when you have two

383
00:11:19,040 --> 00:11:21,120
projects they're not particularly useful

384
00:11:21,120 --> 00:11:22,399
unless they have some way to talk to

385
00:11:22,399 --> 00:11:23,920
each other and one common way to do that

386
00:11:23,920 --> 00:11:25,680
is through google cloud services like

387
00:11:25,680 --> 00:11:26,640
pub sub or

388
00:11:26,640 --> 00:11:28,320
storage and so it makes sense that we

389
00:11:28,320 --> 00:11:29,760
would want to share some resources

390
00:11:29,760 --> 00:11:31,600
between projects but again where things

391
00:11:31,600 --> 00:11:33,200
sort of start to become more dangerous

392
00:11:33,200 --> 00:11:34,800
is if we share service account access

393
00:11:34,800 --> 00:11:36,480
between projects because again project

394
00:11:36,480 --> 00:11:37,680
owners don't really know what access

395
00:11:37,680 --> 00:11:38,800
their service accounts have

396
00:11:38,800 --> 00:11:40,240
so we're missing out on some important

397
00:11:40,240 --> 00:11:41,920
existential questions like how

398
00:11:41,920 --> 00:11:43,519
interconnected our projects actually are

399
00:11:43,519 --> 00:11:44,880
because again we can answer questions

400
00:11:44,880 --> 00:11:46,800
like who has access to a resource but we

401
00:11:46,800 --> 00:11:48,399
really can't answer questions like what

402
00:11:48,399 --> 00:11:50,079
does a service account have access to so

403
00:11:50,079 --> 00:11:51,680
we came up with a solution that let us

404
00:11:51,680 --> 00:11:53,440
sort of answer this question within our

405
00:11:53,440 --> 00:11:54,560
own organization

406
00:11:54,560 --> 00:11:56,079
we can't actually get the complete

407
00:11:56,079 --> 00:11:57,600
answer of the question again because of

408
00:11:57,600 --> 00:11:58,560
these things called cross

409
00:11:58,560 --> 00:12:00,079
organizational bindings but at least

410
00:12:00,079 --> 00:12:01,839
within our org we can get the answer for

411
00:12:01,839 --> 00:12:03,519
cross project bindings by just

412
00:12:03,519 --> 00:12:05,279
introspecting every individual project

413
00:12:05,279 --> 00:12:06,800
that we own and pulling all the iem

414
00:12:06,800 --> 00:12:08,240
policies we then took all that

415
00:12:08,240 --> 00:12:08,959
information

416
00:12:08,959 --> 00:12:10,560
and we made a graph out of it we

417
00:12:10,560 --> 00:12:12,000
actually went over to github

418
00:12:12,000 --> 00:12:13,920
and we crawled a bunch of im policies

419
00:12:13,920 --> 00:12:15,440
that people either intentionally or

420
00:12:15,440 --> 00:12:16,720
accidentally committed

421
00:12:16,720 --> 00:12:18,320
and we took all those policies and we

422
00:12:18,320 --> 00:12:22,399
kind of compiled this pseudo-org

423
00:12:22,839 --> 00:12:25,839
generator

424
00:12:26,440 --> 00:12:36,190
[Music]

425
00:12:36,240 --> 00:12:37,279
so let's take a look at one of the

426
00:12:37,279 --> 00:12:38,959
graphs we ended up with as you can see

427
00:12:38,959 --> 00:12:40,639
there are two different colored nodes

428
00:12:40,639 --> 00:12:42,480
there are red nodes and there are blue

429
00:12:42,480 --> 00:12:44,560
nodes what the red nodes represent are

430
00:12:44,560 --> 00:12:46,079
projects and what the blue nodes

431
00:12:46,079 --> 00:12:48,000
represent are service accounts

432
00:12:48,000 --> 00:12:49,040
those are the only two things we're

433
00:12:49,040 --> 00:12:50,480
graphing here then there are two

434
00:12:50,480 --> 00:12:51,600
different types of edges

435
00:12:51,600 --> 00:12:53,279
there are contains edges and there are

436
00:12:53,279 --> 00:12:55,519
bindings edges a contains edge is

437
00:12:55,519 --> 00:12:56,880
basically when a service account

438
00:12:56,880 --> 00:12:59,040
lives in a given project and the binding

439
00:12:59,040 --> 00:13:00,480
edge is when that service account has a

440
00:13:00,480 --> 00:13:02,480
role binding to that project

441
00:13:02,480 --> 00:13:04,160
most of the time a service account has a

442
00:13:04,160 --> 00:13:05,680
role binding to the project that it's

443
00:13:05,680 --> 00:13:06,560
contained in

444
00:13:06,560 --> 00:13:07,920
but every once in a while we'll end up

445
00:13:07,920 --> 00:13:09,360
with a service account that has a role

446
00:13:09,360 --> 00:13:11,040
binding to a different project across

447
00:13:11,040 --> 00:13:12,079
project binding

448
00:13:12,079 --> 00:13:13,440
so in this case we have a service

449
00:13:13,440 --> 00:13:14,959
account that's contained in project

450
00:13:14,959 --> 00:13:16,399
number 67

451
00:13:16,399 --> 00:13:18,240
and it has a role binding into project

452
00:13:18,240 --> 00:13:20,160
number 57. if we zoom out we get the

453
00:13:20,160 --> 00:13:21,920
view of the entire organization we have

454
00:13:21,920 --> 00:13:23,440
all the different projects here on a map

455
00:13:23,440 --> 00:13:24,959
and we have all the relationships of the

456
00:13:24,959 --> 00:13:26,639
service accounts within the org that are

457
00:13:26,639 --> 00:13:28,240
contained within these projects now

458
00:13:28,240 --> 00:13:29,839
we're not looking at organization level

459
00:13:29,839 --> 00:13:31,279
bindings in this graph or

460
00:13:31,279 --> 00:13:32,800
resource level bindings we're only

461
00:13:32,800 --> 00:13:34,320
looking at the project level bindings

462
00:13:34,320 --> 00:13:36,079
and we're mapping these relationships

463
00:13:36,079 --> 00:13:37,920
so because we based this off of real im

464
00:13:37,920 --> 00:13:39,120
policies that were able to pull off

465
00:13:39,120 --> 00:13:40,720
github we could say with some level of

466
00:13:40,720 --> 00:13:42,320
confidence that this is an accurate

467
00:13:42,320 --> 00:13:44,240
representation of what a sufficiently

468
00:13:44,240 --> 00:13:45,600
large company might look like we can

469
00:13:45,600 --> 00:13:47,120
also say with a little bit of personal

470
00:13:47,120 --> 00:13:49,040
experience based on the large companies

471
00:13:49,040 --> 00:13:50,639
that we've looked at this is an accurate

472
00:13:50,639 --> 00:13:52,079
representation of what a sufficiently

473
00:13:52,079 --> 00:13:53,760
large company looks like now again most

474
00:13:53,760 --> 00:13:55,360
of the time a developer is just going to

475
00:13:55,360 --> 00:13:56,880
be the owner of a single project and

476
00:13:56,880 --> 00:13:58,480
they won't really see the whole picture

477
00:13:58,480 --> 00:14:00,320
all they'll see is sort of tunnel vision

478
00:14:00,320 --> 00:14:01,600
for the one project that they have

479
00:14:01,600 --> 00:14:02,399
control over

480
00:14:02,399 --> 00:14:03,920
and so they'll see the service accounts

481
00:14:03,920 --> 00:14:05,360
that belong to their project and they'll

482
00:14:05,360 --> 00:14:07,279
see what has role bindings into their

483
00:14:07,279 --> 00:14:08,959
project but they won't know where their

484
00:14:08,959 --> 00:14:10,639
service accounts have role bindings

485
00:14:10,639 --> 00:14:12,079
out of their project and so when they

486
00:14:12,079 --> 00:14:14,000
hand off access to their project to

487
00:14:14,000 --> 00:14:15,360
another developer they won't actually

488
00:14:15,360 --> 00:14:16,000
know how many

489
00:14:16,000 --> 00:14:17,680
additional projects they're handing off

490
00:14:17,680 --> 00:14:19,279
and they themselves may not have a good

491
00:14:19,279 --> 00:14:20,880
understanding of how many projects that

492
00:14:20,880 --> 00:14:22,240
they have access to through their

493
00:14:22,240 --> 00:14:23,040
service accounts

494
00:14:23,040 --> 00:14:24,240
one other interesting thing that we

495
00:14:24,240 --> 00:14:25,839
found here is that there are certain

496
00:14:25,839 --> 00:14:27,440
projects that have seemingly

497
00:14:27,440 --> 00:14:29,360
disproportionate large numbers of role

498
00:14:29,360 --> 00:14:31,199
bindings and resources in them we found

499
00:14:31,199 --> 00:14:33,040
this was a pretty consistent story at

500
00:14:33,040 --> 00:14:34,880
multiple companies that we looked at and

501
00:14:34,880 --> 00:14:36,560
so in the center here you can see there

502
00:14:36,560 --> 00:14:38,320
are a bunch of projects that have really

503
00:14:38,320 --> 00:14:40,079
tightly bound role bindings and then at

504
00:14:40,079 --> 00:14:41,680
the bottom we have smaller projects that

505
00:14:41,680 --> 00:14:43,360
only have one or two service accounts

506
00:14:43,360 --> 00:14:44,959
that may not be connected to the broader

507
00:14:44,959 --> 00:14:45,360
web

508
00:14:45,360 --> 00:14:46,480
and then we have a bunch of projects

509
00:14:46,480 --> 00:14:48,160
that have no service accounts what we

510
00:14:48,160 --> 00:14:50,320
found is that most of the sensitive data

511
00:14:50,320 --> 00:14:52,079
or sensitive workloads are in the

512
00:14:52,079 --> 00:14:53,680
interconnected projects that's where

513
00:14:53,680 --> 00:14:55,199
most of the development is happening and

514
00:14:55,199 --> 00:14:56,560
so it makes sense that it would have

515
00:14:56,560 --> 00:14:58,880
most of the iem roll bindings connecting

516
00:14:58,880 --> 00:15:00,000
it with other projects

517
00:15:00,000 --> 00:15:01,360
so when we first started building these

518
00:15:01,360 --> 00:15:03,120
graphs we were thinking to ourselves oh

519
00:15:03,120 --> 00:15:03,519
gosh

520
00:15:03,519 --> 00:15:05,279
these projects are supposed to be

521
00:15:05,279 --> 00:15:07,440
isolated boundaries are they really this

522
00:15:07,440 --> 00:15:09,440
interconnected and the more we dug into

523
00:15:09,440 --> 00:15:11,199
it and the more we thought about how

524
00:15:11,199 --> 00:15:13,120
project owners can't actually see the

525
00:15:13,120 --> 00:15:14,639
role bindings their service accounts

526
00:15:14,639 --> 00:15:16,399
have been granted we realized this is a

527
00:15:16,399 --> 00:15:18,480
problem that's really remained invisible

528
00:15:18,480 --> 00:15:20,240
and it really takes this org level

529
00:15:20,240 --> 00:15:22,079
introspection to even see it now there's

530
00:15:22,079 --> 00:15:23,519
one final piece here that we haven't

531
00:15:23,519 --> 00:15:24,720
talked about yet and that's when a

532
00:15:24,720 --> 00:15:26,000
developer actually does hand over

533
00:15:26,000 --> 00:15:27,199
access to their project to another

534
00:15:27,199 --> 00:15:29,360
developer pieces of that might be okay

535
00:15:29,360 --> 00:15:30,880
it might be okay to share storage for

536
00:15:30,880 --> 00:15:32,079
example but things start to become

537
00:15:32,079 --> 00:15:33,600
really dangerous if you share access to

538
00:15:33,600 --> 00:15:35,120
service accounts because again that's

539
00:15:35,120 --> 00:15:36,560
where the problem is hidden where the

540
00:15:36,560 --> 00:15:38,160
owner of the project doesn't actually

541
00:15:38,160 --> 00:15:39,839
know what access their service accounts

542
00:15:39,839 --> 00:15:40,240
have

543
00:15:40,240 --> 00:15:41,920
and so if we share that unknown access

544
00:15:41,920 --> 00:15:43,040
that's where things can start to go

545
00:15:43,040 --> 00:15:44,639
astray so we'll come back to

546
00:15:44,639 --> 00:15:46,399
what roles and permissions are actually

547
00:15:46,399 --> 00:15:48,079
required to hand over that level of

548
00:15:48,079 --> 00:15:48,639
access

549
00:15:48,639 --> 00:15:50,399
and we'll talk about how common that is

550
00:15:50,399 --> 00:15:52,000
so far we've talked a lot about roles

551
00:15:52,000 --> 00:15:53,199
and mentioned that some are more

552
00:15:53,199 --> 00:15:54,399
dangerous than others

553
00:15:54,399 --> 00:15:56,240
so now let's dig into that a little bit

554
00:15:56,240 --> 00:15:58,480
more within gcp there are three distinct

555
00:15:58,480 --> 00:15:59,920
types of roles that you can use

556
00:15:59,920 --> 00:16:01,519
primitive which have been around since

557
00:16:01,519 --> 00:16:04,000
before cloud im that we know today

558
00:16:04,000 --> 00:16:06,000
predefined rules which are curated by

559
00:16:06,000 --> 00:16:08,240
gcp and service specific

560
00:16:08,240 --> 00:16:10,320
and custom roles that enable developers

561
00:16:10,320 --> 00:16:11,920
to specify any permission that they

562
00:16:11,920 --> 00:16:13,360
would like that is supported

563
00:16:13,360 --> 00:16:15,600
to fit their services needs let's focus

564
00:16:15,600 --> 00:16:16,720
on primitive rules

565
00:16:16,720 --> 00:16:19,040
within primitive roles there is an owner

566
00:16:19,040 --> 00:16:20,639
role which provides

567
00:16:20,639 --> 00:16:21,839
all of the different permissions that

568
00:16:21,839 --> 00:16:23,680
are available within the platform

569
00:16:23,680 --> 00:16:26,480
an editor role which closely resembles

570
00:16:26,480 --> 00:16:27,680
the owner role

571
00:16:27,680 --> 00:16:29,279
but excludes a few different things for

572
00:16:29,279 --> 00:16:30,800
administrative capabilities

573
00:16:30,800 --> 00:16:33,120
and that just might not be supported yet

574
00:16:33,120 --> 00:16:34,720
one thing in particular that's excluded

575
00:16:34,720 --> 00:16:36,720
is the ability to set project level role

576
00:16:36,720 --> 00:16:37,600
bindings

577
00:16:37,600 --> 00:16:39,360
and the viewer role which is exactly

578
00:16:39,360 --> 00:16:40,800
what it sounds like it allows you to

579
00:16:40,800 --> 00:16:42,800
view resources but not perform any state

580
00:16:42,800 --> 00:16:44,639
changing actions

581
00:16:44,639 --> 00:16:46,959
how are these primitive roles used well

582
00:16:46,959 --> 00:16:48,800
earlier we saw that when you go

583
00:16:48,800 --> 00:16:51,120
to cloud im through the ui these

584
00:16:51,120 --> 00:16:52,480
primitive roles are what are first

585
00:16:52,480 --> 00:16:54,880
suggested to users

586
00:16:54,880 --> 00:16:56,240
there's another way that these primitive

587
00:16:56,240 --> 00:16:57,680
roles manifest themselves within your

588
00:16:57,680 --> 00:16:58,959
gcp project

589
00:16:58,959 --> 00:17:01,040
and that's through default i am role

590
00:17:01,040 --> 00:17:03,199
bindings whatever identity creates a

591
00:17:03,199 --> 00:17:04,959
project will automatically

592
00:17:04,959 --> 00:17:07,280
be granted a project level role binding

593
00:17:07,280 --> 00:17:08,720
using the owner role

594
00:17:08,720 --> 00:17:11,359
so we know that the owner role contains

595
00:17:11,359 --> 00:17:12,640
all of the different permissions that

596
00:17:12,640 --> 00:17:13,359
are available

597
00:17:13,359 --> 00:17:15,839
but what about the editor rule well the

598
00:17:15,839 --> 00:17:17,839
editor role contains at the time of this

599
00:17:17,839 --> 00:17:19,880
talk

600
00:17:19,880 --> 00:17:23,919
2576 distinct permissions

601
00:17:25,839 --> 00:17:27,839
that's a lot this means that with the

602
00:17:27,839 --> 00:17:29,840
editor role you can for example

603
00:17:29,840 --> 00:17:33,120
access all buckets all databases all vms

604
00:17:33,120 --> 00:17:36,879
and much more within your project

605
00:17:37,200 --> 00:17:38,799
out of these permissions that we talked

606
00:17:38,799 --> 00:17:40,559
about earlier which of these roles

607
00:17:40,559 --> 00:17:42,559
actually enable user to manage service

608
00:17:42,559 --> 00:17:43,120
accounts

609
00:17:43,120 --> 00:17:45,120
well both the owner and the editor role

610
00:17:45,120 --> 00:17:47,280
do while the editor role does not enable

611
00:17:47,280 --> 00:17:47,679
you

612
00:17:47,679 --> 00:17:51,120
to create new service accounts or apply

613
00:17:51,120 --> 00:17:53,120
project level role bindings for service

614
00:17:53,120 --> 00:17:54,799
accounts it does allow you

615
00:17:54,799 --> 00:17:57,440
to manage service accounts in two

616
00:17:57,440 --> 00:17:58,160
different ways

617
00:17:58,160 --> 00:18:00,320
and that's by creating keys or

618
00:18:00,320 --> 00:18:02,320
credentials for a given service account

619
00:18:02,320 --> 00:18:03,760
that already exists

620
00:18:03,760 --> 00:18:06,080
and by associating a service account

621
00:18:06,080 --> 00:18:07,440
with a resource

622
00:18:07,440 --> 00:18:09,919
so if a user can create a resource

623
00:18:09,919 --> 00:18:11,679
specify a service account

624
00:18:11,679 --> 00:18:14,000
gcp will go and check does this user

625
00:18:14,000 --> 00:18:16,080
have the im service accounts act as

626
00:18:16,080 --> 00:18:17,679
permission on the service account that

627
00:18:17,679 --> 00:18:18,880
they are attempting to associate with

628
00:18:18,880 --> 00:18:19,840
the resource

629
00:18:19,840 --> 00:18:22,320
if so it gets attached and then that

630
00:18:22,320 --> 00:18:24,720
user can interact with gcp services and

631
00:18:24,720 --> 00:18:25,520
apis

632
00:18:25,520 --> 00:18:27,520
as that service account identity and its

633
00:18:27,520 --> 00:18:28,559
associated role

634
00:18:28,559 --> 00:18:31,280
so how common are these i am roles in

635
00:18:31,280 --> 00:18:31,840
gcp

636
00:18:31,840 --> 00:18:34,400
projects there's another way that gcp

637
00:18:34,400 --> 00:18:36,240
creates automatic role bindings for

638
00:18:36,240 --> 00:18:36,960
identities

639
00:18:36,960 --> 00:18:38,240
and this way is a little bit different

640
00:18:38,240 --> 00:18:40,320
when you enable a specific service

641
00:18:40,320 --> 00:18:43,120
such as google compute engine it will go

642
00:18:43,120 --> 00:18:43,840
and create

643
00:18:43,840 --> 00:18:46,000
a default service account in your

644
00:18:46,000 --> 00:18:47,919
project and then grant that service

645
00:18:47,919 --> 00:18:48,640
account a

646
00:18:48,640 --> 00:18:50,880
project level role binding using the

647
00:18:50,880 --> 00:18:52,880
primitive editor role that we chatted

648
00:18:52,880 --> 00:18:54,559
about earlier

649
00:18:54,559 --> 00:18:56,240
this also happens with another service

650
00:18:56,240 --> 00:18:57,840
when a user enables the app engine

651
00:18:57,840 --> 00:18:58,320
service

652
00:18:58,320 --> 00:18:59,919
a service account called the app spot

653
00:18:59,919 --> 00:19:01,280
service account is created in your

654
00:19:01,280 --> 00:19:02,960
project and also granted a

655
00:19:02,960 --> 00:19:05,440
project level editor role binding now as

656
00:19:05,440 --> 00:19:06,480
we discussed earlier

657
00:19:06,480 --> 00:19:08,400
that editor role contains a permission

658
00:19:08,400 --> 00:19:10,000
that enables identities to

659
00:19:10,000 --> 00:19:11,919
associate service accounts with

660
00:19:11,919 --> 00:19:14,240
resources so that means that both of

661
00:19:14,240 --> 00:19:15,760
these default service accounts the

662
00:19:15,760 --> 00:19:16,559
compute engine

663
00:19:16,559 --> 00:19:18,320
and the app spot service account are

664
00:19:18,320 --> 00:19:20,160
able to associate

665
00:19:20,160 --> 00:19:22,080
any service account within its gcp

666
00:19:22,080 --> 00:19:24,559
project to a resource so where are these

667
00:19:24,559 --> 00:19:25,760
service accounts used

668
00:19:25,760 --> 00:19:28,160
the default compute service count is

669
00:19:28,160 --> 00:19:29,039
associated

670
00:19:29,039 --> 00:19:32,240
with gce vms by default

671
00:19:32,240 --> 00:19:34,320
so whenever you create a vm the default

672
00:19:34,320 --> 00:19:36,160
compute service account is automatically

673
00:19:36,160 --> 00:19:36,880
associated

674
00:19:36,880 --> 00:19:40,400
with the vm there's one thing to note

675
00:19:40,400 --> 00:19:42,720
about service counts and the way that

676
00:19:42,720 --> 00:19:44,240
they are authorized to interact with

677
00:19:44,240 --> 00:19:44,880
services

678
00:19:44,880 --> 00:19:46,880
from a vm there is the role that they

679
00:19:46,880 --> 00:19:49,600
have as well as something called scopes

680
00:19:49,600 --> 00:19:52,799
and scopes define from within the vm

681
00:19:52,799 --> 00:19:55,520
what services and apis can that identity

682
00:19:55,520 --> 00:19:56,480
interact with

683
00:19:56,480 --> 00:19:58,320
regardless of the role binding that they

684
00:19:58,320 --> 00:20:00,160
have by default for vms

685
00:20:00,160 --> 00:20:02,720
scopes are restricted to only a few

686
00:20:02,720 --> 00:20:03,600
particular

687
00:20:03,600 --> 00:20:06,080
services like storage but from what we

688
00:20:06,080 --> 00:20:06,880
have observed

689
00:20:06,880 --> 00:20:08,720
developers will commonly open these

690
00:20:08,720 --> 00:20:10,559
scopes up so that they can interact with

691
00:20:10,559 --> 00:20:11,840
many different services

692
00:20:11,840 --> 00:20:13,440
and how are the app spot service

693
00:20:13,440 --> 00:20:15,120
accounts used cloud functions

694
00:20:15,120 --> 00:20:17,200
are google server list offerings which

695
00:20:17,200 --> 00:20:19,120
are similar to aws lambdas

696
00:20:19,120 --> 00:20:20,880
they're meant to just be lightweight

697
00:20:20,880 --> 00:20:22,799
ephemeral small chunks of code that run

698
00:20:22,799 --> 00:20:24,960
fast and exit once they're done

699
00:20:24,960 --> 00:20:27,120
if the app engine service is enabled

700
00:20:27,120 --> 00:20:28,960
within your project when a developer

701
00:20:28,960 --> 00:20:30,880
goes to create a cloud function

702
00:20:30,880 --> 00:20:33,280
that default appspot service account

703
00:20:33,280 --> 00:20:34,880
with the editor role binding

704
00:20:34,880 --> 00:20:37,120
will be associated with cloud functions

705
00:20:37,120 --> 00:20:38,559
by default when you create a cloud

706
00:20:38,559 --> 00:20:39,520
function

707
00:20:39,520 --> 00:20:41,120
you actually do not have the ability to

708
00:20:41,120 --> 00:20:43,120
specify to set it without an identity

709
00:20:43,120 --> 00:20:45,280
you always have to associate an identity

710
00:20:45,280 --> 00:20:47,039
with the cloud function so if you don't

711
00:20:47,039 --> 00:20:47,440
know

712
00:20:47,440 --> 00:20:49,440
to create a new service account and

713
00:20:49,440 --> 00:20:51,039
associate with your cloud function

714
00:20:51,039 --> 00:20:52,880
you'll always be using the default app

715
00:20:52,880 --> 00:20:54,400
spot service account that has that

716
00:20:54,400 --> 00:20:56,080
editor role binding cloud functions do

717
00:20:56,080 --> 00:20:57,360
not have scopes and get all the

718
00:20:57,360 --> 00:21:00,240
permissions of the editor role

719
00:21:00,240 --> 00:21:02,640
and coming back to the vms a lot of

720
00:21:02,640 --> 00:21:03,919
managed services

721
00:21:03,919 --> 00:21:06,240
leverage vms as their underlying

722
00:21:06,240 --> 00:21:07,039
infrastructure

723
00:21:07,039 --> 00:21:10,240
things like gke dataproc dataflow they

724
00:21:10,240 --> 00:21:10,880
also get

725
00:21:10,880 --> 00:21:12,640
this default compute engine service

726
00:21:12,640 --> 00:21:14,080
account associated with them

727
00:21:14,080 --> 00:21:16,080
in aws when you spin up something like a

728
00:21:16,080 --> 00:21:18,480
vm or a lambda it defaults to having no

729
00:21:18,480 --> 00:21:19,280
access

730
00:21:19,280 --> 00:21:21,679
there are no roles attached but in gcp

731
00:21:21,679 --> 00:21:23,039
things default to having

732
00:21:23,039 --> 00:21:25,280
thousands of permissions earlier we

733
00:21:25,280 --> 00:21:27,600
talked about cross-project role bindings

734
00:21:27,600 --> 00:21:29,919
the ability to leverage service accounts

735
00:21:29,919 --> 00:21:30,720
in a project

736
00:21:30,720 --> 00:21:32,640
to get access to other service accounts

737
00:21:32,640 --> 00:21:34,400
and potentially move laterally across

738
00:21:34,400 --> 00:21:35,520
gcp projects

739
00:21:35,520 --> 00:21:37,520
we talked about developers potentially

740
00:21:37,520 --> 00:21:39,039
not knowing what access their service

741
00:21:39,039 --> 00:21:41,440
accounts have we mentioned the idea of

742
00:21:41,440 --> 00:21:43,600
handing off access and what this

743
00:21:43,600 --> 00:21:45,039
realistically looks like is the

744
00:21:45,039 --> 00:21:46,799
developer applies a role binding with

745
00:21:46,799 --> 00:21:48,159
the act as permission

746
00:21:48,159 --> 00:21:50,240
like the editor role let's look at what

747
00:21:50,240 --> 00:21:51,919
that could look like

748
00:21:51,919 --> 00:21:59,840
no it's demo time

749
00:22:00,240 --> 00:22:02,000
to help understand how to exploit the

750
00:22:02,000 --> 00:22:03,679
act as permission we built a framework

751
00:22:03,679 --> 00:22:04,799
called gsplate

752
00:22:04,799 --> 00:22:06,880
to start out we need a base identity

753
00:22:06,880 --> 00:22:08,080
there are a number of different ways to

754
00:22:08,080 --> 00:22:09,280
get a base identity

755
00:22:09,280 --> 00:22:11,120
one way for example is you could oauth

756
00:22:11,120 --> 00:22:12,960
fish a developer that has project level

757
00:22:12,960 --> 00:22:14,080
editor access

758
00:22:14,080 --> 00:22:15,679
another way is maybe a developer

759
00:22:15,679 --> 00:22:17,440
accidentally uploaded a service account

760
00:22:17,440 --> 00:22:19,200
key to github or pastebin

761
00:22:19,200 --> 00:22:21,200
and that surface account has a editor

762
00:22:21,200 --> 00:22:22,880
level role binding because the primitive

763
00:22:22,880 --> 00:22:23,919
roles are the first thing that are

764
00:22:23,919 --> 00:22:26,000
suggested to you on the iam page or

765
00:22:26,000 --> 00:22:27,120
maybe the most likely

766
00:22:27,120 --> 00:22:28,720
maybe the base identity comes from

767
00:22:28,720 --> 00:22:30,559
exploiting a service and because most

768
00:22:30,559 --> 00:22:32,320
services run with project editor by

769
00:22:32,320 --> 00:22:33,679
default maybe that's how you get your

770
00:22:33,679 --> 00:22:34,400
first foothold

771
00:22:34,400 --> 00:22:36,400
in any case in this case we've simulated

772
00:22:36,400 --> 00:22:38,000
this by just starting with the service

773
00:22:38,000 --> 00:22:39,360
account credential we can see this

774
00:22:39,360 --> 00:22:41,039
credential here and we can see that it

775
00:22:41,039 --> 00:22:42,240
starts in the project

776
00:22:42,240 --> 00:22:46,000
bbs 2. next we'll run the list operation

777
00:22:46,000 --> 00:22:47,600
on the g supply tool we can see that

778
00:22:47,600 --> 00:22:48,640
there's no output

779
00:22:48,640 --> 00:22:50,799
the reason there's no output is the list

780
00:22:50,799 --> 00:22:53,039
operation lists all the service accounts

781
00:22:53,039 --> 00:22:54,559
that you've managed to take control of

782
00:22:54,559 --> 00:22:56,159
and it doesn't count the base identity

783
00:22:56,159 --> 00:22:58,000
we'll run the gcloud command projects

784
00:22:58,000 --> 00:22:59,840
list on the base identity to see what

785
00:22:59,840 --> 00:23:02,880
project we have access to

786
00:23:02,880 --> 00:23:05,280
it looks like we have access to bbs2

787
00:23:05,280 --> 00:23:07,200
next we'll try an act as exploit on this

788
00:23:07,200 --> 00:23:09,200
project and we'll target every service

789
00:23:09,200 --> 00:23:12,159
account in the project

790
00:23:13,760 --> 00:23:15,679
let's unpack what's happening now keep

791
00:23:15,679 --> 00:23:17,520
in mind the editor role has two ways to

792
00:23:17,520 --> 00:23:18,960
take control of all the service accounts

793
00:23:18,960 --> 00:23:19,760
in a project

794
00:23:19,760 --> 00:23:21,600
the first is through creating tokens and

795
00:23:21,600 --> 00:23:22,880
the second is through provisioning

796
00:23:22,880 --> 00:23:23,760
resources

797
00:23:23,760 --> 00:23:24,880
there's another role that we haven't

798
00:23:24,880 --> 00:23:26,400
talked about yet and that's the service

799
00:23:26,400 --> 00:23:27,520
account user role

800
00:23:27,520 --> 00:23:29,360
this role is also pretty common and is

801
00:23:29,360 --> 00:23:30,720
often given to users and service

802
00:23:30,720 --> 00:23:32,000
accounts that are meant to provision

803
00:23:32,000 --> 00:23:32,960
resources

804
00:23:32,960 --> 00:23:34,559
because some things like cloud functions

805
00:23:34,559 --> 00:23:36,400
require service accounts to be attached

806
00:23:36,400 --> 00:23:36,880
to them

807
00:23:36,880 --> 00:23:38,480
this is the role that's usually granted

808
00:23:38,480 --> 00:23:40,320
to do that

809
00:23:40,320 --> 00:23:41,919
so because the service account user role

810
00:23:41,919 --> 00:23:43,760
and the editor role both have the act as

811
00:23:43,760 --> 00:23:45,360
permission we'll use that to take

812
00:23:45,360 --> 00:23:46,640
control of the service accounts

813
00:23:46,640 --> 00:23:48,240
because it casts a little bit wider of a

814
00:23:48,240 --> 00:23:50,000
net than the token creator permission

815
00:23:50,000 --> 00:23:52,000
which is only in the editor role so what

816
00:23:52,000 --> 00:23:53,360
gsploit is actually doing under the hood

817
00:23:53,360 --> 00:23:54,880
here is first it's running the service

818
00:23:54,880 --> 00:23:56,880
account list operation to get a list of

819
00:23:56,880 --> 00:23:58,320
all the service accounts in the project

820
00:23:58,320 --> 00:23:59,600
and then it's spinning up a cloud

821
00:23:59,600 --> 00:24:01,120
function for each one of those service

822
00:24:01,120 --> 00:24:01,679
accounts

823
00:24:01,679 --> 00:24:03,360
then we keep a database of all the cloud

824
00:24:03,360 --> 00:24:05,279
functions we've harvested each which has

825
00:24:05,279 --> 00:24:05,760
its own

826
00:24:05,760 --> 00:24:07,279
underlying service account attached to

827
00:24:07,279 --> 00:24:09,039
it this gives us access to all the

828
00:24:09,039 --> 00:24:10,559
service accounts in the project through

829
00:24:10,559 --> 00:24:12,080
the cloud functions that we spun up

830
00:24:12,080 --> 00:24:13,440
we control the code that lands on the

831
00:24:13,440 --> 00:24:15,600
cloud function so we'll just deploy code

832
00:24:15,600 --> 00:24:17,360
that allows us to run whatever g-cloud

833
00:24:17,360 --> 00:24:18,799
commands we want it takes about two

834
00:24:18,799 --> 00:24:20,400
minutes to spin up each cloud function

835
00:24:20,400 --> 00:24:22,000
so we'll just speed through this really

836
00:24:22,000 --> 00:24:24,240
quick

837
00:24:25,200 --> 00:24:26,640
and now when we run the list command

838
00:24:26,640 --> 00:24:28,480
again we can see all the new service

839
00:24:28,480 --> 00:24:30,080
accounts that we now have access to

840
00:24:30,080 --> 00:24:31,840
one of them says owner that service

841
00:24:31,840 --> 00:24:33,520
account actually has an owner-level role

842
00:24:33,520 --> 00:24:35,039
binding to the project that we started

843
00:24:35,039 --> 00:24:36,480
in that means we now have full control

844
00:24:36,480 --> 00:24:37,200
of the project

845
00:24:37,200 --> 00:24:38,480
through this service account if we

846
00:24:38,480 --> 00:24:40,000
wanted to we could use this service

847
00:24:40,000 --> 00:24:41,600
account to add ourselves as owners to

848
00:24:41,600 --> 00:24:43,279
the project so just to pause and think

849
00:24:43,279 --> 00:24:44,960
about that for a second what that means

850
00:24:44,960 --> 00:24:46,480
is if you ever have a service account

851
00:24:46,480 --> 00:24:46,880
that has

852
00:24:46,880 --> 00:24:49,039
editor level access and another service

853
00:24:49,039 --> 00:24:50,880
account that has owner level access

854
00:24:50,880 --> 00:24:52,480
the editor level service account can

855
00:24:52,480 --> 00:24:54,159
always privilege escalate itself to

856
00:24:54,159 --> 00:24:54,799
owner

857
00:24:54,799 --> 00:24:56,240
that's the same with developers if you

858
00:24:56,240 --> 00:24:58,159
grant developer editor level access to a

859
00:24:58,159 --> 00:24:59,679
project but you happen to have a service

860
00:24:59,679 --> 00:25:00,960
account in that project that has owner

861
00:25:00,960 --> 00:25:01,919
level access

862
00:25:01,919 --> 00:25:03,440
that developer can privilege escalate

863
00:25:03,440 --> 00:25:04,960
themselves to owner through that service

864
00:25:04,960 --> 00:25:05,360
account

865
00:25:05,360 --> 00:25:06,559
okay let's take another look at those

866
00:25:06,559 --> 00:25:08,240
service accounts that we have there's

867
00:25:08,240 --> 00:25:09,440
one here that's kind of interesting that

868
00:25:09,440 --> 00:25:10,559
says do nothing

869
00:25:10,559 --> 00:25:12,240
it might not sound interesting but keep

870
00:25:12,240 --> 00:25:13,919
in mind that the developer that created

871
00:25:13,919 --> 00:25:15,360
that service account in this project

872
00:25:15,360 --> 00:25:16,880
although they didn't intend to give it

873
00:25:16,880 --> 00:25:18,720
any role bindings again the owner of the

874
00:25:18,720 --> 00:25:20,000
service accounts can't control the role

875
00:25:20,000 --> 00:25:21,919
bindings and so it's possible that a

876
00:25:21,919 --> 00:25:23,360
different project gave it a role binding

877
00:25:23,360 --> 00:25:24,960
so let's run the project list command

878
00:25:24,960 --> 00:25:26,159
from this service account that we've

879
00:25:26,159 --> 00:25:27,520
compromised

880
00:25:27,520 --> 00:25:28,880
something interesting here that the base

881
00:25:28,880 --> 00:25:30,960
project bbs 2 doesn't actually show up

882
00:25:30,960 --> 00:25:32,159
when we run this command

883
00:25:32,159 --> 00:25:33,600
this is because the service account has

884
00:25:33,600 --> 00:25:34,880
no role minings there the developer

885
00:25:34,880 --> 00:25:36,480
didn't want to have any role bindings

886
00:25:36,480 --> 00:25:38,720
but bbs 3 this new project we haven't

887
00:25:38,720 --> 00:25:39,840
looked at shows up

888
00:25:39,840 --> 00:25:41,200
what happened here is a developer in

889
00:25:41,200 --> 00:25:42,880
another project granted this service

890
00:25:42,880 --> 00:25:44,640
account and editor role binding into

891
00:25:44,640 --> 00:25:45,360
their project

892
00:25:45,360 --> 00:25:47,440
so let's run the act as exploit one more

893
00:25:47,440 --> 00:25:48,720
time this time from

894
00:25:48,720 --> 00:25:51,360
this do nothing serves account into bbs3

895
00:25:51,360 --> 00:25:52,960
and see how many service accounts we can

896
00:25:52,960 --> 00:25:54,400
harvest in bbs3

897
00:25:54,400 --> 00:25:55,919
again this process takes a little while

898
00:25:55,919 --> 00:25:59,200
so we're gonna fast forward through this

899
00:26:02,080 --> 00:26:03,600
and now we can see a whole bunch of new

900
00:26:03,600 --> 00:26:05,840
service accounts in the bbs3 project

901
00:26:05,840 --> 00:26:06,960
service accounts that we didn't have

902
00:26:06,960 --> 00:26:08,480
access to before that we were able to

903
00:26:08,480 --> 00:26:08,960
get

904
00:26:08,960 --> 00:26:10,400
strictly through lateral movement

905
00:26:10,400 --> 00:26:11,440
there's a couple of service accounts in

906
00:26:11,440 --> 00:26:12,799
here that look interesting there's one

907
00:26:12,799 --> 00:26:14,159
that's labeled networking that maybe

908
00:26:14,159 --> 00:26:15,919
controls networking for the organization

909
00:26:15,919 --> 00:26:17,600
but probably most interesting is this

910
00:26:17,600 --> 00:26:19,760
one that's labeled organizational admin

911
00:26:19,760 --> 00:26:21,120
if while you're moving laterally through

912
00:26:21,120 --> 00:26:22,799
projects you happen to land on a service

913
00:26:22,799 --> 00:26:24,480
account that has an org level binding

914
00:26:24,480 --> 00:26:26,240
through inheritance you get access to

915
00:26:26,240 --> 00:26:28,080
the entire org that way

916
00:26:28,080 --> 00:26:29,679
so to recap we started with the base

917
00:26:29,679 --> 00:26:32,000
identity in bbs2 that had act as on the

918
00:26:32,000 --> 00:26:32,640
project

919
00:26:32,640 --> 00:26:34,400
we then used that permission to gain

920
00:26:34,400 --> 00:26:36,159
access to every service account in this

921
00:26:36,159 --> 00:26:38,080
project via cloud functions one of the

922
00:26:38,080 --> 00:26:39,919
service accounts in bbs2 had an owner

923
00:26:39,919 --> 00:26:41,279
role which allowed us to elevate

924
00:26:41,279 --> 00:26:42,080
privileges

925
00:26:42,080 --> 00:26:44,159
in the bbs2 project a different service

926
00:26:44,159 --> 00:26:46,720
account had a role binding into bbs3

927
00:26:46,720 --> 00:26:48,400
this allowed us to use act as to take

928
00:26:48,400 --> 00:26:49,679
control of all the service accounts in

929
00:26:49,679 --> 00:26:51,440
bbs3 one of the service accounts we

930
00:26:51,440 --> 00:26:53,679
found in bbs3 had an organizational role

931
00:26:53,679 --> 00:26:55,200
binding and this allowed us to take

932
00:26:55,200 --> 00:27:07,840
control of the entire org

933
00:27:11,420 --> 00:27:13,840
[Music]

934
00:27:13,840 --> 00:27:15,279
so we talked about when you provision

935
00:27:15,279 --> 00:27:16,880
resources when you attach service

936
00:27:16,880 --> 00:27:18,799
accounts to those resources gcp will

937
00:27:18,799 --> 00:27:20,080
check to make sure that you have the act

938
00:27:20,080 --> 00:27:21,840
as permission first before allowing you

939
00:27:21,840 --> 00:27:23,120
to provision the resource

940
00:27:23,120 --> 00:27:24,960
because some apis like cloud functions

941
00:27:24,960 --> 00:27:26,399
require that you have identities to

942
00:27:26,399 --> 00:27:28,080
power them this leads to a lot of people

943
00:27:28,080 --> 00:27:29,520
getting the act as permission

944
00:27:29,520 --> 00:27:31,360
well it turns out that some apis will

945
00:27:31,360 --> 00:27:32,320
actually allow you to provision

946
00:27:32,320 --> 00:27:33,679
resources with a service account

947
00:27:33,679 --> 00:27:35,120
attached to them without the need for

948
00:27:35,120 --> 00:27:36,240
the actas permission

949
00:27:36,240 --> 00:27:38,720
these include the dataproc dataflow and

950
00:27:38,720 --> 00:27:40,159
composer apis

951
00:27:40,159 --> 00:27:42,159
let's talk about the dataproc api the

952
00:27:42,159 --> 00:27:44,880
dataproc api is google's data processing

953
00:27:44,880 --> 00:27:45,520
api

954
00:27:45,520 --> 00:27:47,279
among other things it includes managed

955
00:27:47,279 --> 00:27:49,760
apache hadoop and managed apache spark

956
00:27:49,760 --> 00:27:51,520
when you spin up a data proc cluster

957
00:27:51,520 --> 00:27:53,120
like a lot of things in gcp

958
00:27:53,120 --> 00:27:54,799
it will default to using the default

959
00:27:54,799 --> 00:27:56,480
compute engine service account

960
00:27:56,480 --> 00:27:58,320
this means by default your spark jobs

961
00:27:58,320 --> 00:27:59,760
will run as project editor

962
00:27:59,760 --> 00:28:01,360
you only need the permission dataproc

963
00:28:01,360 --> 00:28:03,279
cluster create to spin up this cluster

964
00:28:03,279 --> 00:28:04,960
you don't actually need the act as

965
00:28:04,960 --> 00:28:06,559
permission on the default service

966
00:28:06,559 --> 00:28:07,039
account

967
00:28:07,039 --> 00:28:09,360
because of this anyone who has the data

968
00:28:09,360 --> 00:28:10,720
cluster create permission

969
00:28:10,720 --> 00:28:12,480
can actually make use of the default

970
00:28:12,480 --> 00:28:13,760
editor service account

971
00:28:13,760 --> 00:28:15,279
put another way service accounts that

972
00:28:15,279 --> 00:28:16,880
are only intended to be able to spin up

973
00:28:16,880 --> 00:28:18,480
data proc clusters can privilege

974
00:28:18,480 --> 00:28:20,399
escalate themselves to project editor

975
00:28:20,399 --> 00:28:22,080
and then they can make use of that act

976
00:28:22,080 --> 00:28:23,760
as permission to take control of the

977
00:28:23,760 --> 00:28:25,039
rest of the service accounts in the

978
00:28:25,039 --> 00:28:25,520
project

979
00:28:25,520 --> 00:28:27,440
we built support for this into g-split

980
00:28:27,440 --> 00:28:28,559
so let's take a look and see what it

981
00:28:28,559 --> 00:28:29,440
looks like

982
00:28:29,440 --> 00:28:30,720
if we take another look at the list of

983
00:28:30,720 --> 00:28:32,159
service accounts we've compromised

984
00:28:32,159 --> 00:28:34,000
there's one here that says dataproc

985
00:28:34,000 --> 00:28:35,760
let's run the gcloud projects list on

986
00:28:35,760 --> 00:28:36,960
this service account and see what

987
00:28:36,960 --> 00:28:45,120
projects it has access to

988
00:28:45,120 --> 00:28:47,360
looks like it has access to a bbs4 now

989
00:28:47,360 --> 00:28:50,159
let's run the dataproc exploit on vbs4

990
00:28:50,159 --> 00:28:52,159
through the dataproc service account we

991
00:28:52,159 --> 00:28:53,840
have to spin up a whole dataproc cluster

992
00:28:53,840 --> 00:28:55,279
to do this and that takes a little bit

993
00:28:55,279 --> 00:28:57,039
of time and then we delete it afterwards

994
00:28:57,039 --> 00:28:58,480
so that we're not billed too long

995
00:28:58,480 --> 00:29:00,080
so we'll fast forward to this part but

996
00:29:00,080 --> 00:29:02,080
at the end of it when we run gcloud list

997
00:29:02,080 --> 00:29:03,679
again we can see a new service account

998
00:29:03,679 --> 00:29:05,200
has been added and that's the default

999
00:29:05,200 --> 00:29:06,799
service account in the bbs4

1000
00:29:06,799 --> 00:29:08,640
project we were able to get this service

1001
00:29:08,640 --> 00:29:10,240
account by spinning up a dataproc

1002
00:29:10,240 --> 00:29:11,520
cluster in vbs4

1003
00:29:11,520 --> 00:29:13,360
and then running a spark job on that

1004
00:29:13,360 --> 00:29:14,960
cluster which enabled us to grab the

1005
00:29:14,960 --> 00:29:16,480
credential off the instance

1006
00:29:16,480 --> 00:29:18,080
because our dataproc service account

1007
00:29:18,080 --> 00:29:19,679
credential had the ability to spin the

1008
00:29:19,679 --> 00:29:21,679
cluster up it also controlled the scopes

1009
00:29:21,679 --> 00:29:22,559
for that cluster

1010
00:29:22,559 --> 00:29:24,000
and so we just defined the scopes for

1011
00:29:24,000 --> 00:29:26,080
this cluster to be wide open next since

1012
00:29:26,080 --> 00:29:27,840
we have a default editor service account

1013
00:29:27,840 --> 00:29:29,279
credential at this point we can run the

1014
00:29:29,279 --> 00:29:32,880
act as exploit on this project

1015
00:29:35,760 --> 00:29:41,840
we'll again fast forward to this process

1016
00:29:41,840 --> 00:29:43,760
and finally if we run the gcode list one

1017
00:29:43,760 --> 00:29:45,360
more time we can see a whole bunch of

1018
00:29:45,360 --> 00:29:46,640
new service accounts that we now have

1019
00:29:46,640 --> 00:29:48,799
access to in the bbs4 project so just to

1020
00:29:48,799 --> 00:29:49,440
recap

1021
00:29:49,440 --> 00:29:52,000
some apis in gcp do not require the act

1022
00:29:52,000 --> 00:29:53,840
as permission to spin up resources and

1023
00:29:53,840 --> 00:29:55,360
attach the default service accounts to

1024
00:29:55,360 --> 00:29:56,960
them the identities that can spin those

1025
00:29:56,960 --> 00:29:59,120
resources up can also control the scopes

1026
00:29:59,120 --> 00:30:01,120
so effectively in cases like dataproc

1027
00:30:01,120 --> 00:30:02,880
and dataflow and composer

1028
00:30:02,880 --> 00:30:04,799
any identity that's granted permissions

1029
00:30:04,799 --> 00:30:06,799
to those apis can privilege escalate

1030
00:30:06,799 --> 00:30:08,080
themselves to project editor

1031
00:30:08,080 --> 00:30:09,600
one last thing to note here is because

1032
00:30:09,600 --> 00:30:11,440
this data proc rule binding was actually

1033
00:30:11,440 --> 00:30:12,399
cross project

1034
00:30:12,399 --> 00:30:14,320
this allowed us to again compromise the

1035
00:30:14,320 --> 00:30:15,919
new project bbs4

1036
00:30:15,919 --> 00:30:17,600
and because the default service accounts

1037
00:30:17,600 --> 00:30:19,440
are in every project this allows us to

1038
00:30:19,440 --> 00:30:21,200
take control of all the service accounts

1039
00:30:21,200 --> 00:30:23,840
in the new project

1040
00:30:24,380 --> 00:30:39,039
[Music]

1041
00:30:39,039 --> 00:30:40,720
google has a new feature in their asset

1042
00:30:40,720 --> 00:30:43,440
inventory api called the iem analyzer

1043
00:30:43,440 --> 00:30:45,120
we worked with google on this feature

1044
00:30:45,120 --> 00:30:46,480
and one of the user stories actually

1045
00:30:46,480 --> 00:30:49,039
came from us

1046
00:30:49,440 --> 00:30:51,039
we came up with a list of dangerous

1047
00:30:51,039 --> 00:30:52,480
roles and permissions that can be used

1048
00:30:52,480 --> 00:30:53,679
to take control of all the service

1049
00:30:53,679 --> 00:30:55,120
accounts in the project these can be

1050
00:30:55,120 --> 00:30:57,360
seen here we won't demo data flow and

1051
00:30:57,360 --> 00:30:58,799
composer but you can think of them as

1052
00:30:58,799 --> 00:31:00,399
working the same way as data proc

1053
00:31:00,399 --> 00:31:02,559
using the iam analyzer and the dangerous

1054
00:31:02,559 --> 00:31:04,080
permissions that we're able to find

1055
00:31:04,080 --> 00:31:06,000
we're able to run a bfs search on a base

1056
00:31:06,000 --> 00:31:07,519
identity without the need to spin up

1057
00:31:07,519 --> 00:31:10,159
expensive resources exploiting services

1058
00:31:10,159 --> 00:31:11,840
as you can see from the output here we

1059
00:31:11,840 --> 00:31:13,360
get the same list of service accounts

1060
00:31:13,360 --> 00:31:15,039
from the same base identity as we did

1061
00:31:15,039 --> 00:31:15,919
exploiting things

1062
00:31:15,919 --> 00:31:17,600
except this was much faster we didn't

1063
00:31:17,600 --> 00:31:19,519
have to spin anything up you need an org

1064
00:31:19,519 --> 00:31:20,640
binding to use this

1065
00:31:20,640 --> 00:31:22,480
so this is a tool for defenders to be

1066
00:31:22,480 --> 00:31:24,159
able to get quick answers to

1067
00:31:24,159 --> 00:31:25,440
how an attacker might be able to move

1068
00:31:25,440 --> 00:31:27,360
laterally through the organization if we

1069
00:31:27,360 --> 00:31:28,720
cut back to our mock graph

1070
00:31:28,720 --> 00:31:30,159
let's zoom into a seemingly innocent

1071
00:31:30,159 --> 00:31:32,080
base identity this service account

1072
00:31:32,080 --> 00:31:34,559
guadvcl was meant to only run spark jobs

1073
00:31:34,559 --> 00:31:35,600
in its base project

1074
00:31:35,600 --> 00:31:38,000
14. it only has the dataproc editor role

1075
00:31:38,000 --> 00:31:39,840
now run a bfs search from the starting

1076
00:31:39,840 --> 00:31:42,000
identity and highlight the path in blue

1077
00:31:42,000 --> 00:31:43,279
as you can see this allowed us to

1078
00:31:43,279 --> 00:31:44,720
compromise all the service accounts in

1079
00:31:44,720 --> 00:31:46,240
the starting project through the default

1080
00:31:46,240 --> 00:31:47,600
editor role on our spark job

1081
00:31:47,600 --> 00:31:48,720
most of these service accounts have

1082
00:31:48,720 --> 00:31:51,039
benign roles like storage or pub sub

1083
00:31:51,039 --> 00:31:52,960
and most of them are not cross project

1084
00:31:52,960 --> 00:31:54,159
that said some

1085
00:31:54,159 --> 00:31:55,760
like this one have dangerous role

1086
00:31:55,760 --> 00:31:57,360
bindings that are cross project in this

1087
00:31:57,360 --> 00:31:59,200
case the dataflow developer role

1088
00:31:59,200 --> 00:32:00,559
these allow us to take full controlled

1089
00:32:00,559 --> 00:32:02,640
service accounts in different projects

1090
00:32:02,640 --> 00:32:04,080
as we start to zoom out we can begin to

1091
00:32:04,080 --> 00:32:05,840
see the whole picture we've managed to

1092
00:32:05,840 --> 00:32:07,760
compromise most of the service accounts

1093
00:32:07,760 --> 00:32:08,399
in the org

1094
00:32:08,399 --> 00:32:10,080
with a few notable project exceptions

1095
00:32:10,080 --> 00:32:11,360
that just don't have any dangerous role

1096
00:32:11,360 --> 00:32:12,159
bindings to them

1097
00:32:12,159 --> 00:32:13,679
we're only looking at project level

1098
00:32:13,679 --> 00:32:15,440
bindings in this graph so if any of

1099
00:32:15,440 --> 00:32:17,039
these surface accounts have org level

1100
00:32:17,039 --> 00:32:19,840
bindings it's not reflected here

1101
00:32:19,840 --> 00:32:21,120
so we just saw some really interesting

1102
00:32:21,120 --> 00:32:23,279
techniques around privilege escalation

1103
00:32:23,279 --> 00:32:25,120
and lateral movement but we also wanted

1104
00:32:25,120 --> 00:32:27,120
to provide a way to detect this

1105
00:32:27,120 --> 00:32:28,799
so we fingerprinted this tooling and

1106
00:32:28,799 --> 00:32:30,240
we'll be releasing monitoring and

1107
00:32:30,240 --> 00:32:30,720
alerting

1108
00:32:30,720 --> 00:32:32,880
to detect the behavior of this tool in

1109
00:32:32,880 --> 00:32:33,760
your environment

1110
00:32:33,760 --> 00:32:34,880
i think one of the nice things about

1111
00:32:34,880 --> 00:32:36,799
doing security work in the cloud is how

1112
00:32:36,799 --> 00:32:38,240
much help you get from your upstream

1113
00:32:38,240 --> 00:32:40,000
provider if we were doing work on a web

1114
00:32:40,000 --> 00:32:41,919
application or a binary we'd kind of be

1115
00:32:41,919 --> 00:32:43,519
left to our own vices to fix the

1116
00:32:43,519 --> 00:32:45,120
problems we found but because we had a

1117
00:32:45,120 --> 00:32:46,480
close partnership with google we were

1118
00:32:46,480 --> 00:32:47,840
able to work with them to roll out some

1119
00:32:47,840 --> 00:32:49,440
new features that help with the security

1120
00:32:49,440 --> 00:32:50,880
story of some of these problems

1121
00:32:50,880 --> 00:32:52,159
one of the people that helped us do that

1122
00:32:52,159 --> 00:32:54,000
is a security engineer named bakanov and

1123
00:32:54,000 --> 00:32:55,760
we gave him an invitation to do a brief

1124
00:32:55,760 --> 00:32:57,120
cameo and talk about some of the new

1125
00:32:57,120 --> 00:32:59,039
features that we helped google roll out

1126
00:32:59,039 --> 00:33:01,919
hello black hat

1127
00:33:04,080 --> 00:33:05,840
i had the privilege of working with

1128
00:33:05,840 --> 00:33:07,760
alison and dylan as a result of our

1129
00:33:07,760 --> 00:33:08,799
collaboration

1130
00:33:08,799 --> 00:33:10,559
with google cloud launched several

1131
00:33:10,559 --> 00:33:12,159
features that help customers

1132
00:33:12,159 --> 00:33:14,480
address concerns on the prevention side

1133
00:33:14,480 --> 00:33:16,480
of things we now have an org policy

1134
00:33:16,480 --> 00:33:17,360
constraint

1135
00:33:17,360 --> 00:33:19,760
that prevents the editor grant to the

1136
00:33:19,760 --> 00:33:21,519
default service accounts for

1137
00:33:21,519 --> 00:33:23,600
compute engine and app engine and we

1138
00:33:23,600 --> 00:33:25,200
advise customers to turn around

1139
00:33:25,200 --> 00:33:27,279
we recommend that customers create

1140
00:33:27,279 --> 00:33:28,799
custom service accounts

1141
00:33:28,799 --> 00:33:30,880
with the necessary set of permissions on

1142
00:33:30,880 --> 00:33:32,320
the target resources

1143
00:33:32,320 --> 00:33:34,559
as opposed to the broad project level

1144
00:33:34,559 --> 00:33:35,519
editor grants

1145
00:33:35,519 --> 00:33:37,679
allison and dylan briefly touched upon

1146
00:33:37,679 --> 00:33:39,360
the investigative iem

1147
00:33:39,360 --> 00:33:42,320
analyzer tool as you saw we built im

1148
00:33:42,320 --> 00:33:44,559
analyzer to be able to address the use

1149
00:33:44,559 --> 00:33:45,360
case of

1150
00:33:45,360 --> 00:33:47,519
finding resources which are granted

1151
00:33:47,519 --> 00:33:50,000
access to any specific identity the

1152
00:33:50,000 --> 00:33:52,080
other investigative feature available

1153
00:33:52,080 --> 00:33:54,720
is the iam recommender it uses machine

1154
00:33:54,720 --> 00:33:56,640
learning to evaluate the permissions

1155
00:33:56,640 --> 00:33:58,960
granted to an identity against actual

1156
00:33:58,960 --> 00:34:01,039
activities performed by the identity

1157
00:34:01,039 --> 00:34:03,120
it's a great way to find overly generous

1158
00:34:03,120 --> 00:34:05,279
permission grants and to identify the

1159
00:34:05,279 --> 00:34:07,039
actual permissions that are needed for

1160
00:34:07,039 --> 00:34:08,960
the workload i spent many years working

1161
00:34:08,960 --> 00:34:10,960
with all major cloud providers

1162
00:34:10,960 --> 00:34:12,800
and this statement is generally true for

1163
00:34:12,800 --> 00:34:15,199
all of them starter cloud uis

1164
00:34:15,199 --> 00:34:17,520
those flows are optimized for ease of

1165
00:34:17,520 --> 00:34:18,239
onboarding

1166
00:34:18,239 --> 00:34:20,399
and so the fundamental challenge for

1167
00:34:20,399 --> 00:34:21,599
large organizations

1168
00:34:21,599 --> 00:34:23,918
is to make available insanely secured

1169
00:34:23,918 --> 00:34:24,719
defaults

1170
00:34:24,719 --> 00:34:26,879
as well as preventative guardrails for

1171
00:34:26,879 --> 00:34:28,000
their developers

1172
00:34:28,000 --> 00:34:30,159
those are usually in the shape of cloud

1173
00:34:30,159 --> 00:34:31,760
foundation code bases

1174
00:34:31,760 --> 00:34:33,839
such as infrastructures called samples

1175
00:34:33,839 --> 00:34:35,440
that are built with security in mind

1176
00:34:35,440 --> 00:34:37,839
policy has called evaluations as part of

1177
00:34:37,839 --> 00:34:39,599
the build and release pipelines

1178
00:34:39,599 --> 00:34:41,760
and preventative controls exposed by the

1179
00:34:41,760 --> 00:34:42,800
cloud providers

1180
00:34:42,800 --> 00:34:45,760
such as org policy constraints on gcp if

1181
00:34:45,760 --> 00:34:47,918
we're leaving developers to the mercy of

1182
00:34:47,918 --> 00:34:48,560
those

1183
00:34:48,560 --> 00:34:51,199
starter ui flows on the cloud providers

1184
00:34:51,199 --> 00:34:53,359
or stack overflow code snippets we're

1185
00:34:53,359 --> 00:34:54,879
gonna end up in a bad place

1186
00:34:54,879 --> 00:34:56,639
if you're a google cloud customer and

1187
00:34:56,639 --> 00:34:58,400
are looking for guidance in this area

1188
00:34:58,400 --> 00:35:00,320
you should try to engage your account

1189
00:35:00,320 --> 00:35:00,720
team

1190
00:35:00,720 --> 00:35:02,880
so that we can help out allison and

1191
00:35:02,880 --> 00:35:04,079
dylan on behalf

1192
00:35:04,079 --> 00:35:06,320
of everyone at google cloud we are very

1193
00:35:06,320 --> 00:35:08,320
grateful for the collaboration

1194
00:35:08,320 --> 00:35:10,320
on improving our customers experience on

1195
00:35:10,320 --> 00:35:12,240
the platform and for the opportunity to

1196
00:35:12,240 --> 00:35:14,079
have a cameo appearance in this talk

1197
00:35:14,079 --> 00:35:16,640
i'm hoping that blackout 2021 happens in

1198
00:35:16,640 --> 00:35:18,320
person and we can share stories in the

1199
00:35:18,320 --> 00:35:19,520
face-to-face setting

1200
00:35:19,520 --> 00:35:21,680
until then please wear face masks and

1201
00:35:21,680 --> 00:35:23,280
don't forget to turn on two-factor

1202
00:35:23,280 --> 00:35:24,160
authentication

1203
00:35:24,160 --> 00:35:30,960
wherever possible

1204
00:35:30,960 --> 00:35:33,599
thank you thank you bach we also wanted

1205
00:35:33,599 --> 00:35:34,960
to provide some context

1206
00:35:34,960 --> 00:35:36,800
and a little bit more insight and let

1207
00:35:36,800 --> 00:35:38,400
you know a few of the limitations or

1208
00:35:38,400 --> 00:35:39,920
constraints to these tools

1209
00:35:39,920 --> 00:35:41,760
so one of the main limitations to the

1210
00:35:41,760 --> 00:35:43,520
organization policy services you

1211
00:35:43,520 --> 00:35:44,000
actually have

1212
00:35:44,000 --> 00:35:46,240
to have an organization resource either

1213
00:35:46,240 --> 00:35:48,160
through cloud identity or g suite to be

1214
00:35:48,160 --> 00:35:49,359
able to use

1215
00:35:49,359 --> 00:35:51,040
the organization policy service if you

1216
00:35:51,040 --> 00:35:52,640
only have projects you won't actually be

1217
00:35:52,640 --> 00:35:54,240
able to leverage any of the constraints

1218
00:35:54,240 --> 00:35:55,119
that are available

1219
00:35:55,119 --> 00:35:56,560
another limitation within the

1220
00:35:56,560 --> 00:35:58,079
organization policy service is that

1221
00:35:58,079 --> 00:35:59,760
constraints are not retroactive

1222
00:35:59,760 --> 00:36:02,400
so when the policy is applied all

1223
00:36:02,400 --> 00:36:03,200
resources

1224
00:36:03,200 --> 00:36:05,040
will be affected by the policy or

1225
00:36:05,040 --> 00:36:06,560
evaluated by the policy

1226
00:36:06,560 --> 00:36:08,240
after it is enabled but existing

1227
00:36:08,240 --> 00:36:10,000
resources will not be modified

1228
00:36:10,000 --> 00:36:12,480
to match or meet the requirements of a

1229
00:36:12,480 --> 00:36:13,359
given constraint

1230
00:36:13,359 --> 00:36:15,119
another thing to note is that for the

1231
00:36:15,119 --> 00:36:17,040
new disable automatic im grants for

1232
00:36:17,040 --> 00:36:18,160
default service accounts

1233
00:36:18,160 --> 00:36:21,200
that constraint will only enforce

1234
00:36:21,200 --> 00:36:23,920
that when the apis are initially enabled

1235
00:36:23,920 --> 00:36:25,520
for new projects that the

1236
00:36:25,520 --> 00:36:27,280
default service accounts are not granted

1237
00:36:27,280 --> 00:36:28,960
editor level role bindings

1238
00:36:28,960 --> 00:36:31,040
at the time of the apis being enabled

1239
00:36:31,040 --> 00:36:32,800
but there is no enforcement mechanism

1240
00:36:32,800 --> 00:36:34,400
to ensure that the default service

1241
00:36:34,400 --> 00:36:35,920
accounts are not granted

1242
00:36:35,920 --> 00:36:39,040
a project level binding or other binding

1243
00:36:39,040 --> 00:36:41,119
there's also no way to restrict the

1244
00:36:41,119 --> 00:36:42,480
cross project

1245
00:36:42,480 --> 00:36:44,720
bindings that we talked about previously

1246
00:36:44,720 --> 00:36:46,480
where if a user knows the name of your

1247
00:36:46,480 --> 00:36:48,000
service account they could still

1248
00:36:48,000 --> 00:36:50,079
give the service account access to their

1249
00:36:50,079 --> 00:36:52,160
project or project's resources so the im

1250
00:36:52,160 --> 00:36:54,560
recommender is very powerful some of the

1251
00:36:54,560 --> 00:36:56,240
limitations on the tool is that you have

1252
00:36:56,240 --> 00:36:56,640
to

1253
00:36:56,640 --> 00:36:59,520
have a 90-day period where the policies

1254
00:36:59,520 --> 00:37:01,280
or behavior of a given identity

1255
00:37:01,280 --> 00:37:03,280
are evaluated so that you can have a

1256
00:37:03,280 --> 00:37:05,040
recommendation be made and there may be

1257
00:37:05,040 --> 00:37:05,520
more

1258
00:37:05,520 --> 00:37:07,359
im bindings that you may not be aware of

1259
00:37:07,359 --> 00:37:09,280
like the cross project

1260
00:37:09,280 --> 00:37:11,280
bindings the im analyzer can provide a

1261
00:37:11,280 --> 00:37:12,720
lot of context into the

1262
00:37:12,720 --> 00:37:14,640
i am bindings or associations for a

1263
00:37:14,640 --> 00:37:16,160
given identity and

1264
00:37:16,160 --> 00:37:18,800
in order to use this auditing tool you

1265
00:37:18,800 --> 00:37:19,520
have to have

1266
00:37:19,520 --> 00:37:21,280
administrative capabilities in an

1267
00:37:21,280 --> 00:37:22,800
organization to be able to

1268
00:37:22,800 --> 00:37:25,280
see the policies that are being analyzed

1269
00:37:25,280 --> 00:37:26,240
so in order to

1270
00:37:26,240 --> 00:37:28,160
use this tool to the fullest extent you

1271
00:37:28,160 --> 00:37:30,240
need administrative capabilities in your

1272
00:37:30,240 --> 00:37:31,040
organization

1273
00:37:31,040 --> 00:37:33,359
as well as within g suite if you want to

1274
00:37:33,359 --> 00:37:35,839
expand group membership to know who has

1275
00:37:35,839 --> 00:37:38,160
access to a given service account that

1276
00:37:38,160 --> 00:37:39,119
is in a group

1277
00:37:39,119 --> 00:37:41,359
earlier we talked about how kubernetes

1278
00:37:41,359 --> 00:37:43,760
workloads have access to the underlying

1279
00:37:43,760 --> 00:37:45,280
service count that's attached to the

1280
00:37:45,280 --> 00:37:47,440
node and the suggested

1281
00:37:47,440 --> 00:37:49,920
way to harden your clusters is to use a

1282
00:37:49,920 --> 00:37:51,839
service called workload identity

1283
00:37:51,839 --> 00:37:53,680
and workload identity allows you to

1284
00:37:53,680 --> 00:37:55,920
associate a kubernetes service account

1285
00:37:55,920 --> 00:37:56,320
with

1286
00:37:56,320 --> 00:37:58,960
a cloud identity and this is how you can

1287
00:37:58,960 --> 00:37:59,920
harden your cluster

1288
00:37:59,920 --> 00:38:01,680
as well as have a one-to-one mapping of

1289
00:38:01,680 --> 00:38:03,520
kubernetes service accounts to cloud

1290
00:38:03,520 --> 00:38:04,000
identity

1291
00:38:04,000 --> 00:38:05,680
service accounts we brought up earlier

1292
00:38:05,680 --> 00:38:07,680
to ensure default service accounts are

1293
00:38:07,680 --> 00:38:08,000
not

1294
00:38:08,000 --> 00:38:10,160
granted project level role bindings or

1295
00:38:10,160 --> 00:38:11,920
other role bindings after the

1296
00:38:11,920 --> 00:38:13,920
disable automatic im grants for default

1297
00:38:13,920 --> 00:38:16,320
service accounts constraint is enabled

1298
00:38:16,320 --> 00:38:18,240
that you require additional tooling and

1299
00:38:18,240 --> 00:38:19,760
to demonstrate a way

1300
00:38:19,760 --> 00:38:21,119
that you can enforce these

1301
00:38:21,119 --> 00:38:23,680
configurations we will be releasing a

1302
00:38:23,680 --> 00:38:25,920
terraform enterprise sentinel policy set

1303
00:38:25,920 --> 00:38:27,200
that can demonstrate

1304
00:38:27,200 --> 00:38:29,119
enforcing that default service accounts

1305
00:38:29,119 --> 00:38:30,560
are not granted project level role

1306
00:38:30,560 --> 00:38:31,200
bindings

1307
00:38:31,200 --> 00:38:34,240
or that roles that enable service

1308
00:38:34,240 --> 00:38:35,119
account takeover

1309
00:38:35,119 --> 00:38:37,280
or management of service accounts cannot

1310
00:38:37,280 --> 00:38:38,880
be applied at the project level

1311
00:38:38,880 --> 00:38:40,640
sentinel policies are terraform

1312
00:38:40,640 --> 00:38:42,240
enterprise policy

1313
00:38:42,240 --> 00:38:44,480
configuration language that enable you

1314
00:38:44,480 --> 00:38:46,160
to either restrict

1315
00:38:46,160 --> 00:38:48,400
or alert on specific configurations in

1316
00:38:48,400 --> 00:38:49,359
your runs

1317
00:38:49,359 --> 00:38:51,200
so just to recap some of the key

1318
00:38:51,200 --> 00:38:53,760
takeaways im in gcp is very resource

1319
00:38:53,760 --> 00:38:54,320
centric

1320
00:38:54,320 --> 00:38:55,839
meaning that if you are a service

1321
00:38:55,839 --> 00:38:57,599
counselor you may not be aware of the

1322
00:38:57,599 --> 00:38:59,520
configurations that are associated with

1323
00:38:59,520 --> 00:39:00,320
that service count

1324
00:39:00,320 --> 00:39:02,480
or how it may be used across a gcp

1325
00:39:02,480 --> 00:39:04,400
organization this can lead to projects

1326
00:39:04,400 --> 00:39:06,079
being interconnected and many different

1327
00:39:06,079 --> 00:39:07,760
ways that you may not be able to see

1328
00:39:07,760 --> 00:39:09,200
role bindings are often done at the

1329
00:39:09,200 --> 00:39:11,920
project level and can grant more access

1330
00:39:11,920 --> 00:39:14,079
than a user intends to a lot of managed

1331
00:39:14,079 --> 00:39:15,599
services and general resource

1332
00:39:15,599 --> 00:39:16,400
provisioning

1333
00:39:16,400 --> 00:39:19,359
operations can hand off access to your

1334
00:39:19,359 --> 00:39:20,560
project's resources

1335
00:39:20,560 --> 00:39:22,800
and im that you may not be aware of this

1336
00:39:22,800 --> 00:39:24,720
kind of access that's granted through

1337
00:39:24,720 --> 00:39:25,920
resource creation

1338
00:39:25,920 --> 00:39:28,160
can lead to privilege escalation and

1339
00:39:28,160 --> 00:39:29,359
lateral movements within your

1340
00:39:29,359 --> 00:39:30,160
environments

1341
00:39:30,160 --> 00:39:31,839
another thing we covered is that default

1342
00:39:31,839 --> 00:39:33,599
service accounts are granted

1343
00:39:33,599 --> 00:39:35,920
administrative roles within your project

1344
00:39:35,920 --> 00:39:37,599
automatically and that's with the editor

1345
00:39:37,599 --> 00:39:39,520
role unless you're using the disable

1346
00:39:39,520 --> 00:39:41,760
automatic im grants for default service

1347
00:39:41,760 --> 00:39:43,520
accounts organization constraint reduce

1348
00:39:43,520 --> 00:39:45,280
usage of default service accounts where

1349
00:39:45,280 --> 00:39:45,920
possible

1350
00:39:45,920 --> 00:39:48,000
by creating service specific service

1351
00:39:48,000 --> 00:39:50,079
accounts with im roles that are scoped

1352
00:39:50,079 --> 00:39:51,280
to your services needs

1353
00:39:51,280 --> 00:39:53,200
there are a few new cool tools in the

1354
00:39:53,200 --> 00:39:54,720
platform that have been released to

1355
00:39:54,720 --> 00:39:56,480
assist you in understanding

1356
00:39:56,480 --> 00:39:58,480
who has access to your service accounts

1357
00:39:58,480 --> 00:40:00,640
such as the im analyzer which can also

1358
00:40:00,640 --> 00:40:02,400
be really helpful for understanding

1359
00:40:02,400 --> 00:40:07,040
im dependencies and access within your

1360
00:40:08,839 --> 00:40:11,839
environments

1361
00:40:18,079 --> 00:40:25,839
i remember my dreams

1362
00:40:26,730 --> 00:40:29,839
[Music]

1363
00:40:29,839 --> 00:40:32,000
hey folks i just want to thank everybody

1364
00:40:32,000 --> 00:40:33,359
for watching our talk

1365
00:40:33,359 --> 00:40:36,240
and i'll be posting a link in the live

1366
00:40:36,240 --> 00:40:36,720
chat

1367
00:40:36,720 --> 00:40:38,560
for folks who said they wanted to take

1368
00:40:38,560 --> 00:40:41,280
notes and

1369
00:40:41,280 --> 00:40:44,640
get a second viewing

1370
00:40:45,920 --> 00:40:47,760
yeah thanks for watching and hope you

1371
00:40:47,760 --> 00:40:50,839
enjoyed it and we're able to learn

1372
00:40:50,839 --> 00:40:53,839
something

