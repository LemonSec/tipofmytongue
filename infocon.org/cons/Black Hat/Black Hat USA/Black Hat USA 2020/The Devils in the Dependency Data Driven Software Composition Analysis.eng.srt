1
00:00:00,719 --> 00:00:02,000
most of you have probably heard the

2
00:00:02,000 --> 00:00:04,319
analogy that open source is free as in

3
00:00:04,319 --> 00:00:05,040
puppy

4
00:00:05,040 --> 00:00:07,040
that is you're responsible for the care

5
00:00:07,040 --> 00:00:08,960
and feeding and there's often times

6
00:00:08,960 --> 00:00:11,200
a lot more work than you realize when

7
00:00:11,200 --> 00:00:12,799
you build software using open source

8
00:00:12,799 --> 00:00:14,400
libraries you get the good along with

9
00:00:14,400 --> 00:00:15,280
the bad

10
00:00:15,280 --> 00:00:16,560
you get the functionality that you

11
00:00:16,560 --> 00:00:17,840
wanted so you don't have to reinvent the

12
00:00:17,840 --> 00:00:18,480
wheel

13
00:00:18,480 --> 00:00:19,520
but then you also get all the

14
00:00:19,520 --> 00:00:21,279
vulnerabilities that are inherent in

15
00:00:21,279 --> 00:00:22,960
that code base

16
00:00:22,960 --> 00:00:24,320
today we're going to talk about software

17
00:00:24,320 --> 00:00:26,560
composition analysis specifically

18
00:00:26,560 --> 00:00:28,400
what does real world software look like

19
00:00:28,400 --> 00:00:30,080
from the purpose from the perspective

20
00:00:30,080 --> 00:00:33,040
of library usage and inherited risk

21
00:00:33,040 --> 00:00:35,120
we'll use data science to uncover some

22
00:00:35,120 --> 00:00:37,280
new quantitative insights on how open

23
00:00:37,280 --> 00:00:39,920
source libraries impact application risk

24
00:00:39,920 --> 00:00:41,280
and we think you'll be surprised by some

25
00:00:41,280 --> 00:00:42,399
of the findings so i'm going to start

26
00:00:42,399 --> 00:00:43,120
with a quick

27
00:00:43,120 --> 00:00:45,920
preview here are some of the things

28
00:00:45,920 --> 00:00:47,680
we're going to show you today

29
00:00:47,680 --> 00:00:50,079
even the smallest library 162 lines of

30
00:00:50,079 --> 00:00:51,520
code can introduce flaws into your

31
00:00:51,520 --> 00:00:52,559
application

32
00:00:52,559 --> 00:00:54,160
and there are a lot of small libraries

33
00:00:54,160 --> 00:00:56,480
in the javascript ecosystem

34
00:00:56,480 --> 00:00:58,000
most libraries aren't even directly

35
00:00:58,000 --> 00:00:59,280
included but they're actually included

36
00:00:59,280 --> 00:01:00,719
by other libraries

37
00:01:00,719 --> 00:01:02,480
in other words one library will include

38
00:01:02,480 --> 00:01:04,319
another which may include another

39
00:01:04,319 --> 00:01:05,680
and that's something that developers

40
00:01:05,680 --> 00:01:07,680
often don't realize

41
00:01:07,680 --> 00:01:09,040
we'll show you that more libraries

42
00:01:09,040 --> 00:01:11,119
doesn't always mean more problems

43
00:01:11,119 --> 00:01:12,960
you can actually build an application

44
00:01:12,960 --> 00:01:14,479
with hundreds sometimes thousands of

45
00:01:14,479 --> 00:01:15,520
libraries

46
00:01:15,520 --> 00:01:17,040
without introducing a ton of

47
00:01:17,040 --> 00:01:19,280
vulnerabilities

48
00:01:19,280 --> 00:01:20,320
there are a lot better ways to

49
00:01:20,320 --> 00:01:23,040
prioritize fixes than by severity alone

50
00:01:23,040 --> 00:01:24,240
so we'll show you a few different

51
00:01:24,240 --> 00:01:26,320
techniques that you can use to make sure

52
00:01:26,320 --> 00:01:28,560
that you're fixing what matters most

53
00:01:28,560 --> 00:01:30,400
and then finally we'll show you that 81

54
00:01:30,400 --> 00:01:31,840
of patchable vulnerabilities can be

55
00:01:31,840 --> 00:01:32,960
fixed with a minor

56
00:01:32,960 --> 00:01:35,200
library update and most updates are

57
00:01:35,200 --> 00:01:36,479
small even when one

58
00:01:36,479 --> 00:01:38,640
update may introduce a new vulnerability

59
00:01:38,640 --> 00:01:40,000
which then you have to patch again it

60
00:01:40,000 --> 00:01:41,040
creates this chain

61
00:01:41,040 --> 00:01:42,479
so we'll do some analysis of that as

62
00:01:42,479 --> 00:01:44,399
well

63
00:01:44,399 --> 00:01:46,399
a little bit about us my co-presenter

64
00:01:46,399 --> 00:01:48,399
ben senior data scientist at scientia

65
00:01:48,399 --> 00:01:50,560
spent his whole career in data science

66
00:01:50,560 --> 00:01:52,640
i'm chief research officer at veracode

67
00:01:52,640 --> 00:01:54,079
and i've spent my whole career in

68
00:01:54,079 --> 00:01:55,200
application security

69
00:01:55,200 --> 00:01:56,320
and so that's why we think you should

70
00:01:56,320 --> 00:01:58,479
spend the 40 minutes listening to us

71
00:01:58,479 --> 00:01:59,410
today

72
00:01:59,410 --> 00:02:01,520
[Music]

73
00:02:01,520 --> 00:02:03,520
all the data in this report comes from

74
00:02:03,520 --> 00:02:05,520
the varicode state of software security

75
00:02:05,520 --> 00:02:06,719
which is something that

76
00:02:06,719 --> 00:02:10,000
we released annually since 2010

77
00:02:10,000 --> 00:02:12,800
we take all the customer data from the

78
00:02:12,800 --> 00:02:14,480
scans that we do for our customers we

79
00:02:14,480 --> 00:02:16,080
anonymize it and then we report on

80
00:02:16,080 --> 00:02:17,440
trends that we're seeing in application

81
00:02:17,440 --> 00:02:19,040
security

82
00:02:19,040 --> 00:02:20,879
as that data set has gotten larger and

83
00:02:20,879 --> 00:02:22,800
larger we have teamed up with the

84
00:02:22,800 --> 00:02:24,160
scientia institute

85
00:02:24,160 --> 00:02:27,120
who is specifically good at doing data

86
00:02:27,120 --> 00:02:29,040
science on cyber security data and so

87
00:02:29,040 --> 00:02:30,239
they've helped us with the last

88
00:02:30,239 --> 00:02:33,360
few editions of this these reports give

89
00:02:33,360 --> 00:02:35,040
us and the readers insights into

90
00:02:35,040 --> 00:02:36,640
industry performance it allows our

91
00:02:36,640 --> 00:02:38,080
customers to benchmark themselves

92
00:02:38,080 --> 00:02:39,280
against their peers

93
00:02:39,280 --> 00:02:40,959
and it gives security practitioners and

94
00:02:40,959 --> 00:02:43,920
developers advice for improving appsec

95
00:02:43,920 --> 00:02:45,840
one other note is that this talk

96
00:02:45,840 --> 00:02:47,280
includes more than what's covered in the

97
00:02:47,280 --> 00:02:48,480
report

98
00:02:48,480 --> 00:02:50,800
we did this update chain analysis which

99
00:02:50,800 --> 00:02:52,400
was not in the report so that's going to

100
00:02:52,400 --> 00:02:54,160
be tagged onto the end

101
00:02:54,160 --> 00:02:56,959
also we've made a point to tag every

102
00:02:56,959 --> 00:02:58,480
chart or figure that we've used that was

103
00:02:58,480 --> 00:02:59,280
from the report

104
00:02:59,280 --> 00:03:00,879
so that you can cross-reference it back

105
00:03:00,879 --> 00:03:02,319
if you happen to go read the real

106
00:03:02,319 --> 00:03:04,959
report you can grab the report on the

107
00:03:04,959 --> 00:03:06,720
varicode website or on the scientia

108
00:03:06,720 --> 00:03:08,130
website

109
00:03:08,130 --> 00:03:09,760
[Music]

110
00:03:09,760 --> 00:03:11,840
so today's agenda we'll go over the data

111
00:03:11,840 --> 00:03:12,879
sources for the study

112
00:03:12,879 --> 00:03:14,959
and some inherent biases we'll talk

113
00:03:14,959 --> 00:03:16,720
about library usage both direct and

114
00:03:16,720 --> 00:03:17,760
transitive

115
00:03:17,760 --> 00:03:19,280
we'll talk about the flaws that we saw

116
00:03:19,280 --> 00:03:20,480
in those libraries and some of the

117
00:03:20,480 --> 00:03:22,239
patterns that we uncovered

118
00:03:22,239 --> 00:03:23,840
then we'll get into that funnel of fixed

119
00:03:23,840 --> 00:03:26,080
prioritization how do you

120
00:03:26,080 --> 00:03:27,920
get at that huge amount of fixing and

121
00:03:27,920 --> 00:03:29,519
patching to do in the most appropriate

122
00:03:29,519 --> 00:03:30,319
order

123
00:03:30,319 --> 00:03:31,599
and then what do those update chains

124
00:03:31,599 --> 00:03:33,519
look like when one library patch

125
00:03:33,519 --> 00:03:36,959
introduces a new vulnerability

126
00:03:37,680 --> 00:03:39,360
as far as i know this is the largest

127
00:03:39,360 --> 00:03:41,280
known quantitative study of application

128
00:03:41,280 --> 00:03:42,319
security findings

129
00:03:42,319 --> 00:03:44,159
anywhere out there and it has been since

130
00:03:44,159 --> 00:03:45,440
its inception

131
00:03:45,440 --> 00:03:47,920
this particular report covers 12 months

132
00:03:47,920 --> 00:03:50,080
and that includes 85 000 unique

133
00:03:50,080 --> 00:03:52,799
applications and 351 000 unique

134
00:03:52,799 --> 00:03:54,080
libraries

135
00:03:54,080 --> 00:03:56,319
[Music]

136
00:03:56,319 --> 00:03:58,560
any report based on data that comes from

137
00:03:58,560 --> 00:04:00,080
an automated testing tool is going to

138
00:04:00,080 --> 00:04:01,840
have certain biases in it

139
00:04:01,840 --> 00:04:03,840
and so i want to acknowledge those there

140
00:04:03,840 --> 00:04:05,439
are always going to be false positives

141
00:04:05,439 --> 00:04:07,439
that's things that the tool finds that

142
00:04:07,439 --> 00:04:08,959
are not actually there

143
00:04:08,959 --> 00:04:10,239
and they're always going to be false

144
00:04:10,239 --> 00:04:12,799
negatives problems that are there that

145
00:04:12,799 --> 00:04:13,120
the

146
00:04:13,120 --> 00:04:15,519
is unable to detect then there's

147
00:04:15,519 --> 00:04:16,560
selection bias

148
00:04:16,560 --> 00:04:18,720
as i mentioned this data set is based on

149
00:04:18,720 --> 00:04:20,639
varicode's customers so

150
00:04:20,639 --> 00:04:22,160
anybody who's not a very good customer

151
00:04:22,160 --> 00:04:23,759
or who doesn't take application security

152
00:04:23,759 --> 00:04:25,680
seriously enough to be using a tool

153
00:04:25,680 --> 00:04:28,240
is obviously not included customers also

154
00:04:28,240 --> 00:04:29,600
choose which applications they want to

155
00:04:29,600 --> 00:04:30,880
analyze so that gives

156
00:04:30,880 --> 00:04:33,680
a bias as well finally there's an

157
00:04:33,680 --> 00:04:35,199
attribution bias which is more of an

158
00:04:35,199 --> 00:04:36,639
interpretation

159
00:04:36,639 --> 00:04:37,919
as you're reading the report as you're

160
00:04:37,919 --> 00:04:40,000
watching this presentation

161
00:04:40,000 --> 00:04:41,759
you may have the inclination to blame

162
00:04:41,759 --> 00:04:43,600
the outcomes that you see on things that

163
00:04:43,600 --> 00:04:45,199
may seem relevant but are not actually

164
00:04:45,199 --> 00:04:47,040
the reason why things happened

165
00:04:47,040 --> 00:04:49,040
so another way of thinking about this is

166
00:04:49,040 --> 00:04:50,880
that we can tell you about what we see

167
00:04:50,880 --> 00:04:52,880
but we can't always tell you why we can

168
00:04:52,880 --> 00:04:54,880
speculate on that

169
00:04:54,880 --> 00:04:56,639
so now that the disclaimers are out of

170
00:04:56,639 --> 00:04:58,400
the way i'll hand it over to ben to

171
00:04:58,400 --> 00:05:00,560
start diving into the data

172
00:05:00,560 --> 00:05:02,320
thanks for that introduction chris i'm

173
00:05:02,320 --> 00:05:04,000
really excited to be here this is my

174
00:05:04,000 --> 00:05:04,479
first

175
00:05:04,479 --> 00:05:07,360
black hat briefing um and remarkably you

176
00:05:07,360 --> 00:05:08,720
know i wish it could be under different

177
00:05:08,720 --> 00:05:10,160
circumstances but

178
00:05:10,160 --> 00:05:11,919
i'm really excited to talk to you about

179
00:05:11,919 --> 00:05:13,919
the research we have today

180
00:05:13,919 --> 00:05:15,759
so the first question we need to ask

181
00:05:15,759 --> 00:05:17,280
when we're thinking about library usage

182
00:05:17,280 --> 00:05:19,680
and the security implications of that

183
00:05:19,680 --> 00:05:22,160
is exactly how these libraries are being

184
00:05:22,160 --> 00:05:24,240
used in applications

185
00:05:24,240 --> 00:05:26,400
and so the most basic question is just

186
00:05:26,400 --> 00:05:27,440
how many applica

187
00:05:27,440 --> 00:05:29,039
how many libraries get included in an

188
00:05:29,039 --> 00:05:30,479
application

189
00:05:30,479 --> 00:05:33,199
so let's look at this first chart here

190
00:05:33,199 --> 00:05:34,880
along the horizontal axis we have the

191
00:05:34,880 --> 00:05:36,840
number of libraries included in an

192
00:05:36,840 --> 00:05:38,000
application

193
00:05:38,000 --> 00:05:40,560
notice that it's on a log scale here so

194
00:05:40,560 --> 00:05:41,440
equal

195
00:05:41,440 --> 00:05:44,240
distances apart here imply orders of

196
00:05:44,240 --> 00:05:45,759
magnitude gain rather than kind of a

197
00:05:45,759 --> 00:05:46,639
constant gain

198
00:05:46,639 --> 00:05:49,120
so we do this sometimes so we can have a

199
00:05:49,120 --> 00:05:50,320
better idea of

200
00:05:50,320 --> 00:05:52,160
widespread distributions when things get

201
00:05:52,160 --> 00:05:53,360
really uh

202
00:05:53,360 --> 00:05:55,919
really disparate a lot of variants and

203
00:05:55,919 --> 00:05:57,520
then the dots here represent

204
00:05:57,520 --> 00:05:59,039
how many libraries get included in an

205
00:05:59,039 --> 00:06:01,360
application at various levels so on the

206
00:06:01,360 --> 00:06:03,520
far left side the blue dots this is the

207
00:06:03,520 --> 00:06:05,120
10th percentile

208
00:06:05,120 --> 00:06:08,000
this means that about 10 of applications

209
00:06:08,000 --> 00:06:08,479
have

210
00:06:08,479 --> 00:06:10,240
less than that blue dot number for a

211
00:06:10,240 --> 00:06:12,160
specific language and the right-hand

212
00:06:12,160 --> 00:06:13,600
side the yellow dots

213
00:06:13,600 --> 00:06:15,840
these are uh application this is the top

214
00:06:15,840 --> 00:06:18,000
end the 90th percentile so about 10 of

215
00:06:18,000 --> 00:06:19,680
applications have

216
00:06:19,680 --> 00:06:21,759
more libraries than this and the middle

217
00:06:21,759 --> 00:06:23,120
is the geometric mean

218
00:06:23,120 --> 00:06:24,639
you can think about this like the median

219
00:06:24,639 --> 00:06:26,479
it gives us a good idea of kind of the

220
00:06:26,479 --> 00:06:29,360
typical application

221
00:06:29,360 --> 00:06:31,840
but it's robust to that big variance we

222
00:06:31,840 --> 00:06:32,639
see here

223
00:06:32,639 --> 00:06:34,080
so there's a few things we want to point

224
00:06:34,080 --> 00:06:36,080
out so first of all

225
00:06:36,080 --> 00:06:38,160
there's just a large spread a large

226
00:06:38,160 --> 00:06:39,919
difference among languages

227
00:06:39,919 --> 00:06:41,759
so you have languages like javascript

228
00:06:41,759 --> 00:06:44,160
where it's typical to have hundreds

229
00:06:44,160 --> 00:06:46,720
of libraries included in an application

230
00:06:46,720 --> 00:06:48,720
and on the upper end sometimes thousands

231
00:06:48,720 --> 00:06:49,919
i think the top end

232
00:06:49,919 --> 00:06:51,599
is something like a couple thousand

233
00:06:51,599 --> 00:06:52,960
libraries get included in a single

234
00:06:52,960 --> 00:06:54,080
application

235
00:06:54,080 --> 00:06:56,120
um whereas other languages like

236
00:06:56,120 --> 00:06:57,440
python.net

237
00:06:57,440 --> 00:07:00,080
these have a couple dozen and so this

238
00:07:00,080 --> 00:07:01,039
really

239
00:07:01,039 --> 00:07:02,720
illustrates kind of the philosophy and

240
00:07:02,720 --> 00:07:04,319
the culture that's built up around these

241
00:07:04,319 --> 00:07:05,280
languages

242
00:07:05,280 --> 00:07:06,880
whereas you have javascript and ruby

243
00:07:06,880 --> 00:07:08,880
which kind of have smaller

244
00:07:08,880 --> 00:07:11,440
libraries that have single functionality

245
00:07:11,440 --> 00:07:12,800
so they're they're putting in

246
00:07:12,800 --> 00:07:14,160
they're wrapping up a single function

247
00:07:14,160 --> 00:07:16,319
into a package that gets pulled in

248
00:07:16,319 --> 00:07:17,759
whereas these other languages are kind

249
00:07:17,759 --> 00:07:20,400
of more complete you have

250
00:07:20,400 --> 00:07:22,479
families of functions together that get

251
00:07:22,479 --> 00:07:23,840
wrapped up in a library that get

252
00:07:23,840 --> 00:07:24,639
imported

253
00:07:24,639 --> 00:07:26,720
so both of these have security

254
00:07:26,720 --> 00:07:27,680
implications

255
00:07:27,680 --> 00:07:29,680
so with lots of small packages you're

256
00:07:29,680 --> 00:07:31,280
potentially bringing in lots of code

257
00:07:31,280 --> 00:07:32,880
developed by lots of different people

258
00:07:32,880 --> 00:07:34,720
increasing that wrist surface

259
00:07:34,720 --> 00:07:36,400
but even with the kind of more unified

260
00:07:36,400 --> 00:07:37,919
packages you may be pulling in things

261
00:07:37,919 --> 00:07:39,440
that you don't need

262
00:07:39,440 --> 00:07:41,199
functionality that exposes that risk

263
00:07:41,199 --> 00:07:42,720
surface potentially so

264
00:07:42,720 --> 00:07:43,919
kind of both ends of these things

265
00:07:43,919 --> 00:07:46,080
neither is better than the other

266
00:07:46,080 --> 00:07:47,840
but they both have their their security

267
00:07:47,840 --> 00:07:49,199
implications

268
00:07:49,199 --> 00:07:52,160
now the obverse of this is how popular

269
00:07:52,160 --> 00:07:53,680
are some applications how many

270
00:07:53,680 --> 00:07:56,639
or popular some libraries so how many

271
00:07:56,639 --> 00:07:58,080
applications use a specific

272
00:07:58,080 --> 00:08:00,800
library so for this visual along the

273
00:08:00,800 --> 00:08:02,319
horizontal axis we have

274
00:08:02,319 --> 00:08:04,000
the percent of applications that are

275
00:08:04,000 --> 00:08:05,840
using any particular library and the

276
00:08:05,840 --> 00:08:07,440
dots here are actually individual

277
00:08:07,440 --> 00:08:09,120
libraries

278
00:08:09,120 --> 00:08:11,199
the color of the dots indicates kind of

279
00:08:11,199 --> 00:08:12,720
how dangerous they are and chris is

280
00:08:12,720 --> 00:08:14,000
going to go into this more a little bit

281
00:08:14,000 --> 00:08:14,720
later

282
00:08:14,720 --> 00:08:16,560
but the dark blue indicates that there's

283
00:08:16,560 --> 00:08:18,000
no known flaws the

284
00:08:18,000 --> 00:08:20,319
the kind of uh gray blue there indicates

285
00:08:20,319 --> 00:08:22,400
we know there are some flaws

286
00:08:22,400 --> 00:08:24,319
the light blue means there are flaws and

287
00:08:24,319 --> 00:08:25,680
there are proof of concept

288
00:08:25,680 --> 00:08:28,080
exploits for those flaws and the yellow

289
00:08:28,080 --> 00:08:29,280
means we've actually seen those

290
00:08:29,280 --> 00:08:31,199
exploited in the wild

291
00:08:31,199 --> 00:08:32,958
so again we've broken it up by language

292
00:08:32,958 --> 00:08:35,839
here javascript the odd duck out here at

293
00:08:35,839 --> 00:08:37,039
the top again

294
00:08:37,039 --> 00:08:38,799
we have libraries in javascript that are

295
00:08:38,799 --> 00:08:40,640
used in more than 90

296
00:08:40,640 --> 00:08:42,320
of applications which is just really

297
00:08:42,320 --> 00:08:44,080
remarkable that there

298
00:08:44,080 --> 00:08:46,080
are libraries out there that's almost

299
00:08:46,080 --> 00:08:47,760
guaranteed that it will be included in

300
00:08:47,760 --> 00:08:48,959
an application we're going to talk

301
00:08:48,959 --> 00:08:50,320
specifically about what those are

302
00:08:50,320 --> 00:08:52,839
because javascript is such a strange

303
00:08:52,839 --> 00:08:55,519
duck and then as we kind of go down we

304
00:08:55,519 --> 00:08:56,320
see things like

305
00:08:56,320 --> 00:08:58,399
net and swift at the bottom there where

306
00:08:58,399 --> 00:09:00,160
even the most popular libraries aren't

307
00:09:00,160 --> 00:09:01,680
even used in half or in the case of

308
00:09:01,680 --> 00:09:03,600
swift like a third of

309
00:09:03,600 --> 00:09:06,399
applications so there are no must haves

310
00:09:06,399 --> 00:09:07,680
for those

311
00:09:07,680 --> 00:09:09,600
but of course you know javascript and

312
00:09:09,600 --> 00:09:11,279
ruby in the middle

313
00:09:11,279 --> 00:09:14,480
we have lots and lots of libraries that

314
00:09:14,480 --> 00:09:16,880
are used very very commonly

315
00:09:16,880 --> 00:09:19,920
and so kind of as an illustration

316
00:09:19,920 --> 00:09:21,440
let's take a minute to talk about

317
00:09:21,440 --> 00:09:24,240
javascript because it is so weird we

318
00:09:24,240 --> 00:09:26,080
really need to talk about it

319
00:09:26,080 --> 00:09:27,680
and get an idea so on the right hand

320
00:09:27,680 --> 00:09:29,920
side here you have the top 10

321
00:09:29,920 --> 00:09:32,880
libraries used in javascript and notice

322
00:09:32,880 --> 00:09:34,240
that top one inherits

323
00:09:34,240 --> 00:09:37,360
used in 92.3 percent of applications and

324
00:09:37,360 --> 00:09:38,480
even like the

325
00:09:38,480 --> 00:09:41,360
the bottom of the top 10 um is used in

326
00:09:41,360 --> 00:09:42,160
83

327
00:09:42,160 --> 00:09:45,200
of applications almost 84

328
00:09:45,200 --> 00:09:46,959
so uh what we really want to do is kind

329
00:09:46,959 --> 00:09:48,720
of dive in and think about these and do

330
00:09:48,720 --> 00:09:50,240
a little bit of a case study

331
00:09:50,240 --> 00:09:52,800
so as we know uh javascript applications

332
00:09:52,800 --> 00:09:53,920
are incredibly small

333
00:09:53,920 --> 00:09:55,760
incredibly numerous i like to think

334
00:09:55,760 --> 00:09:57,360
about left pad

335
00:09:57,360 --> 00:09:59,279
that was an incredibly small library all

336
00:09:59,279 --> 00:10:01,519
it did was add characters pad out of

337
00:10:01,519 --> 00:10:02,800
string

338
00:10:02,800 --> 00:10:05,600
for in javascript um a developer pulled

339
00:10:05,600 --> 00:10:06,720
it off github and

340
00:10:06,720 --> 00:10:09,200
broke like half of the internet um and

341
00:10:09,200 --> 00:10:10,560
so that's kind of the same thing we're

342
00:10:10,560 --> 00:10:12,160
seeing here

343
00:10:12,160 --> 00:10:14,240
um really small libraries particularly

344
00:10:14,240 --> 00:10:15,680
the top three

345
00:10:15,680 --> 00:10:17,600
all have less than a thousand lines of

346
00:10:17,600 --> 00:10:19,519
code each and in fact that top library

347
00:10:19,519 --> 00:10:20,800
inherits

348
00:10:20,800 --> 00:10:23,200
only has 36 lines and what all that does

349
00:10:23,200 --> 00:10:25,279
is is

350
00:10:25,279 --> 00:10:26,959
replicates some functionality that's in

351
00:10:26,959 --> 00:10:29,360
jquery

352
00:10:29,360 --> 00:10:31,360
and if it's not available from jquery

353
00:10:31,360 --> 00:10:33,440
natively it re-implements it

354
00:10:33,440 --> 00:10:34,959
the other ones have less than a thousand

355
00:10:34,959 --> 00:10:37,279
lines of code debug and ms we're going

356
00:10:37,279 --> 00:10:38,720
to talk about them a little bit more in

357
00:10:38,720 --> 00:10:40,880
a second

358
00:10:40,880 --> 00:10:44,399
is array which makes this top 10 at six

359
00:10:44,399 --> 00:10:47,040
only has four functional lines of code

360
00:10:47,040 --> 00:10:49,360
and does exactly what you think

361
00:10:49,360 --> 00:10:51,360
so again these are getting pulled into

362
00:10:51,360 --> 00:10:53,279
applications

363
00:10:53,279 --> 00:10:56,160
really frequently so that's not to say

364
00:10:56,160 --> 00:10:57,519
that even though they're really small

365
00:10:57,519 --> 00:10:58,480
that they're not

366
00:10:58,480 --> 00:11:01,519
prone to flaws in fact the top the two

367
00:11:01,519 --> 00:11:03,200
and three libraries debug and

368
00:11:03,200 --> 00:11:06,160
ms have versions that have known flaws

369
00:11:06,160 --> 00:11:07,440
with cves

370
00:11:07,440 --> 00:11:10,399
uh they're both denial of service cves

371
00:11:10,399 --> 00:11:11,279
and they're both

372
00:11:11,279 --> 00:11:12,880
uh you know these are really popular

373
00:11:12,880 --> 00:11:15,040
libraries that get pulled in a lot

374
00:11:15,040 --> 00:11:16,880
and they have flaws even though they're

375
00:11:16,880 --> 00:11:20,320
only 790 and 162 lines respectively

376
00:11:20,320 --> 00:11:22,079
so it is certainly something that we

377
00:11:22,079 --> 00:11:23,440
need to think about that even if you

378
00:11:23,440 --> 00:11:25,200
have small functionality that's wrapped

379
00:11:25,200 --> 00:11:26,240
up in a package

380
00:11:26,240 --> 00:11:27,760
you could be increasing your risk

381
00:11:27,760 --> 00:11:30,399
surface by bringing it in

382
00:11:30,399 --> 00:11:32,560
um so when i've been talking about this

383
00:11:32,560 --> 00:11:34,320
so far is the popularity of libraries

384
00:11:34,320 --> 00:11:35,279
and and

385
00:11:35,279 --> 00:11:37,600
libraries that come into applications

386
00:11:37,600 --> 00:11:39,120
i've been glossing over a big thing

387
00:11:39,120 --> 00:11:41,760
which is versioning

388
00:11:41,760 --> 00:11:44,000
so on that previous slide i'm treating

389
00:11:44,000 --> 00:11:45,920
all versions that's the same

390
00:11:45,920 --> 00:11:47,680
so if any version of is array gets

391
00:11:47,680 --> 00:11:49,839
included in an application

392
00:11:49,839 --> 00:11:52,000
uh then we include it in that in that

393
00:11:52,000 --> 00:11:53,040
chart

394
00:11:53,040 --> 00:11:54,959
so but it's it's instructive to look at

395
00:11:54,959 --> 00:11:56,880
kind of the distribution of versions

396
00:11:56,880 --> 00:11:59,440
and see what developers are putting into

397
00:11:59,440 --> 00:12:00,160
their

398
00:12:00,160 --> 00:12:02,959
applications so a few things that are

399
00:12:02,959 --> 00:12:04,399
just interesting here

400
00:12:04,399 --> 00:12:06,320
along the horizontal axis we've got

401
00:12:06,320 --> 00:12:08,000
individual version types you can see

402
00:12:08,000 --> 00:12:10,000
labeled there and the vertical axis is

403
00:12:10,000 --> 00:12:11,920
the number of libraries that have any

404
00:12:11,920 --> 00:12:13,200
particular version

405
00:12:13,200 --> 00:12:15,440
uh now just one word of caution we're

406
00:12:15,440 --> 00:12:17,040
all i'm only showing libraries here that

407
00:12:17,040 --> 00:12:18,959
we managed to parse the version number

408
00:12:18,959 --> 00:12:19,360
is

409
00:12:19,360 --> 00:12:22,959
in um developers do a great job of

410
00:12:22,959 --> 00:12:24,800
trying to

411
00:12:24,800 --> 00:12:26,320
conform to the semantic versioning

412
00:12:26,320 --> 00:12:28,880
system but they don't always do it

413
00:12:28,880 --> 00:12:32,000
you get weird things like 1.2 point

414
00:12:32,000 --> 00:12:35,120
revision 7 which is not actually a good

415
00:12:35,120 --> 00:12:37,760
semantic versioning number but we're

416
00:12:37,760 --> 00:12:38,639
able to parse

417
00:12:38,639 --> 00:12:40,959
quite a few of them um some interesting

418
00:12:40,959 --> 00:12:42,160
takeaways here

419
00:12:42,160 --> 00:12:44,880
um about 18 of libraries that get

420
00:12:44,880 --> 00:12:46,320
included in applications

421
00:12:46,320 --> 00:12:48,000
use a major version of xero these are

422
00:12:48,000 --> 00:12:50,000
these pre-release versions

423
00:12:50,000 --> 00:12:52,000
um we think you know maybe they have are

424
00:12:52,000 --> 00:12:53,360
more prone to flaws although we didn't

425
00:12:53,360 --> 00:12:55,200
see a lot of evidence of that

426
00:12:55,200 --> 00:12:57,519
um and so you know developers are

427
00:12:57,519 --> 00:12:59,200
willing to take a risk if it's got the

428
00:12:59,200 --> 00:13:01,200
functionality they've got

429
00:13:01,200 --> 00:13:02,959
um the other thing that i just like

430
00:13:02,959 --> 00:13:05,120
about this is it's very uh regular

431
00:13:05,120 --> 00:13:06,639
we've got these big spikes at major

432
00:13:06,639 --> 00:13:08,639
versions this kind of exponential decay

433
00:13:08,639 --> 00:13:09,680
down to the

434
00:13:09,680 --> 00:13:11,120
next major version and then another

435
00:13:11,120 --> 00:13:13,360
spike again and those kind of blocks

436
00:13:13,360 --> 00:13:13,760
also

437
00:13:13,760 --> 00:13:16,800
decay as we go to the right um so

438
00:13:16,800 --> 00:13:18,240
there's more about this in the report

439
00:13:18,240 --> 00:13:19,519
you know i encourage you to go look if

440
00:13:19,519 --> 00:13:20,000
you kind of want

441
00:13:20,000 --> 00:13:23,360
to dig out your own story

442
00:13:23,440 --> 00:13:25,040
so when we're talking about including

443
00:13:25,040 --> 00:13:26,720
libraries in

444
00:13:26,720 --> 00:13:28,560
into applications there's really two

445
00:13:28,560 --> 00:13:31,120
ways that we can do that

446
00:13:31,120 --> 00:13:33,760
it's either the developer can directly

447
00:13:33,760 --> 00:13:34,720
include it

448
00:13:34,720 --> 00:13:38,079
or uh they can or a library can get

449
00:13:38,079 --> 00:13:38,720
included

450
00:13:38,720 --> 00:13:40,959
because it was part of another library

451
00:13:40,959 --> 00:13:42,720
um you know as the saying goes it's

452
00:13:42,720 --> 00:13:44,399
turtles all the way down

453
00:13:44,399 --> 00:13:47,120
um and this is uh this is uh pretty

454
00:13:47,120 --> 00:13:48,000
obvious right

455
00:13:48,000 --> 00:13:49,760
libraries like applications aren't built

456
00:13:49,760 --> 00:13:51,519
in a vacuum

457
00:13:51,519 --> 00:13:53,839
developers are going to use those other

458
00:13:53,839 --> 00:13:55,600
libraries that other functionality

459
00:13:55,600 --> 00:13:57,920
and bring it in in a way when they need

460
00:13:57,920 --> 00:13:58,880
it

461
00:13:58,880 --> 00:14:01,680
so when a developer includes a library

462
00:14:01,680 --> 00:14:03,199
an application they're including

463
00:14:03,199 --> 00:14:05,360
every library that that uses and so

464
00:14:05,360 --> 00:14:06,800
we're going to talk about there's two

465
00:14:06,800 --> 00:14:08,959
different types of dependencies

466
00:14:08,959 --> 00:14:10,639
uh one are direct dependencies where

467
00:14:10,639 --> 00:14:12,000
that developer just says yes

468
00:14:12,000 --> 00:14:14,160
import this and the other ones are the

469
00:14:14,160 --> 00:14:15,040
transitive

470
00:14:15,040 --> 00:14:17,680
where it resolves all those dependencies

471
00:14:17,680 --> 00:14:18,800
and brings all those into the

472
00:14:18,800 --> 00:14:20,160
application

473
00:14:20,160 --> 00:14:21,760
so we wanted to look at different

474
00:14:21,760 --> 00:14:23,920
applications and see how they broke down

475
00:14:23,920 --> 00:14:26,639
on this kind of direct versus transitive

476
00:14:26,639 --> 00:14:30,240
line so again there's a lot of variation

477
00:14:30,240 --> 00:14:31,839
by language so we broke it up by

478
00:14:31,839 --> 00:14:33,519
language to show that

479
00:14:33,519 --> 00:14:36,560
um on the top here we've got net now the

480
00:14:36,560 --> 00:14:37,600
blue bars

481
00:14:37,600 --> 00:14:40,000
represent applications that have more

482
00:14:40,000 --> 00:14:42,079
direct dependencies than transitive

483
00:14:42,079 --> 00:14:44,240
and that means about two-thirds of the

484
00:14:44,240 --> 00:14:45,440
inclusions are

485
00:14:45,440 --> 00:14:47,199
or two-thirds or more of the inclusions

486
00:14:47,199 --> 00:14:49,279
are direct so about 90

487
00:14:49,279 --> 00:14:52,240
of applications fall in this for net

488
00:14:52,240 --> 00:14:53,920
fall into this category that almost

489
00:14:53,920 --> 00:14:54,880
everything is direct

490
00:14:54,880 --> 00:14:58,079
we're about only 9.3 which is more than

491
00:14:58,079 --> 00:14:59,440
two-thirds of the application

492
00:14:59,440 --> 00:15:03,519
libraries are transitive dependencies

493
00:15:03,519 --> 00:15:05,600
and then about one percent are balanced

494
00:15:05,600 --> 00:15:07,360
and so we can see kind of as we go

495
00:15:07,360 --> 00:15:08,880
uh down and look at the different

496
00:15:08,880 --> 00:15:10,800
languages there's again quite a bit of

497
00:15:10,800 --> 00:15:11,519
variation

498
00:15:11,519 --> 00:15:13,600
so swift has this big chunk that are

499
00:15:13,600 --> 00:15:15,040
there's a lot of balance

500
00:15:15,040 --> 00:15:16,800
where we've got a lot of direct and

501
00:15:16,800 --> 00:15:18,160
transient dependencies

502
00:15:18,160 --> 00:15:19,440
and then kind of at the bottom we've got

503
00:15:19,440 --> 00:15:21,120
ruby and javascript again these web

504
00:15:21,120 --> 00:15:23,519
applications with smaller libraries

505
00:15:23,519 --> 00:15:26,000
where it's mostly transit dependencies

506
00:15:26,000 --> 00:15:27,760
so when we saw those

507
00:15:27,760 --> 00:15:30,399
applications with 1400 dependencies in

508
00:15:30,399 --> 00:15:31,519
javascript

509
00:15:31,519 --> 00:15:34,160
it's likely that most of those were depe

510
00:15:34,160 --> 00:15:34,560
were

511
00:15:34,560 --> 00:15:36,560
dependencies of libraries not directly

512
00:15:36,560 --> 00:15:37,759
things that were pulled in by the

513
00:15:37,759 --> 00:15:39,040
developer

514
00:15:39,040 --> 00:15:41,120
and so this is a lot of risk surface a

515
00:15:41,120 --> 00:15:42,720
lot of flaws that might be included in

516
00:15:42,720 --> 00:15:43,759
an application

517
00:15:43,759 --> 00:15:45,600
that is not directly thought about by

518
00:15:45,600 --> 00:15:46,959
the developer it's just

519
00:15:46,959 --> 00:15:48,880
pulled in automatically in your build

520
00:15:48,880 --> 00:15:50,160
system

521
00:15:50,160 --> 00:15:52,079
so definitely something that we need to

522
00:15:52,079 --> 00:15:54,800
be cautious about

523
00:15:54,800 --> 00:15:56,639
and then so what is what's the

524
00:15:56,639 --> 00:15:59,199
implication for flaws here

525
00:15:59,199 --> 00:16:01,199
so two flaws i'm just and chris is going

526
00:16:01,199 --> 00:16:03,440
to get to this directly after me but

527
00:16:03,440 --> 00:16:07,199
as a baseline about 70 of applications

528
00:16:07,199 --> 00:16:09,680
have a library uh with some sort of flaw

529
00:16:09,680 --> 00:16:11,519
in it on the first scan

530
00:16:11,519 --> 00:16:13,519
um and then if we look at kind of the

531
00:16:13,519 --> 00:16:14,639
breakdown of those

532
00:16:14,639 --> 00:16:17,920
uh flaws across the the dependency type

533
00:16:17,920 --> 00:16:20,720
more than a plurality 46.6 are

534
00:16:20,720 --> 00:16:22,160
transitive dependencies

535
00:16:22,160 --> 00:16:24,000
that is most of the flaws that get

536
00:16:24,000 --> 00:16:25,519
included in an application

537
00:16:25,519 --> 00:16:27,440
are from these transitive dependencies

538
00:16:27,440 --> 00:16:30,079
uh not direct inclusion of libraries

539
00:16:30,079 --> 00:16:32,240
about 42 percent are direct inclusion

540
00:16:32,240 --> 00:16:33,680
and then occasionally we have both so

541
00:16:33,680 --> 00:16:35,360
somebody imports the library but it's

542
00:16:35,360 --> 00:16:37,600
also included as a transitive dependency

543
00:16:37,600 --> 00:16:40,079
and that has a flaw in it and so this

544
00:16:40,079 --> 00:16:41,120
this is i think

545
00:16:41,120 --> 00:16:44,320
a really important point is that when

546
00:16:44,320 --> 00:16:45,680
you're developing your application and

547
00:16:45,680 --> 00:16:46,959
you're pulling in libraries

548
00:16:46,959 --> 00:16:48,240
you don't just have to worry about the

549
00:16:48,240 --> 00:16:49,519
flaws of things you're directly

550
00:16:49,519 --> 00:16:50,240
including

551
00:16:50,240 --> 00:16:52,000
but you have to worry about things that

552
00:16:52,000 --> 00:16:53,279
are

553
00:16:53,279 --> 00:16:55,279
pulled in by those library developers

554
00:16:55,279 --> 00:16:56,480
those dependencies

555
00:16:56,480 --> 00:16:58,079
and so it's really about managing that

556
00:16:58,079 --> 00:16:59,839
kind of fan out and those dependencies

557
00:16:59,839 --> 00:17:02,160
as it goes

558
00:17:02,160 --> 00:17:04,400
so chris is now going to dive into

559
00:17:04,400 --> 00:17:05,839
talking about the flaws

560
00:17:05,839 --> 00:17:06,799
where they show up in different

561
00:17:06,799 --> 00:17:09,679
languages and the types of flaws

562
00:17:09,679 --> 00:17:11,280
in in different applications that we've

563
00:17:11,280 --> 00:17:14,160
seen now that we understand the library

564
00:17:14,160 --> 00:17:14,880
ecosystem

565
00:17:14,880 --> 00:17:16,240
let's take a look at the flaws that we

566
00:17:16,240 --> 00:17:19,439
inherit by using them

567
00:17:19,439 --> 00:17:21,199
here we're showing a scatter plot where

568
00:17:21,199 --> 00:17:22,799
we compare the number of libraries

569
00:17:22,799 --> 00:17:24,240
included in the application on the

570
00:17:24,240 --> 00:17:25,520
x-axis

571
00:17:25,520 --> 00:17:27,760
with the number of vulnerable libraries

572
00:17:27,760 --> 00:17:29,360
on the y-axis

573
00:17:29,360 --> 00:17:32,240
one black dot represents one application

574
00:17:32,240 --> 00:17:33,280
and when there are lots of them in the

575
00:17:33,280 --> 00:17:35,520
same spot we use color to indicate the

576
00:17:35,520 --> 00:17:37,520
density or the count of applications

577
00:17:37,520 --> 00:17:39,679
so the brighter the color the more data

578
00:17:39,679 --> 00:17:42,320
points at that particular location

579
00:17:42,320 --> 00:17:43,760
also be aware as you're looking at this

580
00:17:43,760 --> 00:17:46,799
that both axes use a log scale

581
00:17:46,799 --> 00:17:49,280
so a few interesting notes here for java

582
00:17:49,280 --> 00:17:51,360
javascript and python we see a definite

583
00:17:51,360 --> 00:17:53,120
scaling relationship

584
00:17:53,120 --> 00:17:54,640
the more libraries that are included in

585
00:17:54,640 --> 00:17:56,640
the application the more those have

586
00:17:56,640 --> 00:17:57,600
flaws

587
00:17:57,600 --> 00:17:58,880
and this is the most obvious in the

588
00:17:58,880 --> 00:18:00,320
python chart where you see that

589
00:18:00,320 --> 00:18:02,559
concentration line the green

590
00:18:02,559 --> 00:18:05,440
bright spot trending with a clear path

591
00:18:05,440 --> 00:18:06,559
up and towards the right

592
00:18:06,559 --> 00:18:08,080
so the more libraries you include the

593
00:18:08,080 --> 00:18:10,320
more vulnerabilities you get

594
00:18:10,320 --> 00:18:12,720
ruby is kind of a mixed bag you see dots

595
00:18:12,720 --> 00:18:14,000
all over the place but you also

596
00:18:14,000 --> 00:18:15,840
see a small concentration of apps around

597
00:18:15,840 --> 00:18:17,600
the 100 libraries mark

598
00:18:17,600 --> 00:18:19,440
where there's about 20 of those

599
00:18:19,440 --> 00:18:20,720
libraries that are vulnerable there's a

600
00:18:20,720 --> 00:18:23,200
little bit of a blue area there

601
00:18:23,200 --> 00:18:26,240
now go.net and php are interesting

602
00:18:26,240 --> 00:18:27,280
in the sense that most of the

603
00:18:27,280 --> 00:18:29,600
concentration is near the bottom of the

604
00:18:29,600 --> 00:18:30,880
chart

605
00:18:30,880 --> 00:18:33,200
indicating a very small number of flaws

606
00:18:33,200 --> 00:18:35,280
even as the number of libraries included

607
00:18:35,280 --> 00:18:36,480
increases

608
00:18:36,480 --> 00:18:39,120
so this tells us one of two things

609
00:18:39,120 --> 00:18:41,120
either the library ecosystem itself

610
00:18:41,120 --> 00:18:43,679
is safer or that developers in those

611
00:18:43,679 --> 00:18:44,400
languages

612
00:18:44,400 --> 00:18:46,480
are actually better at avoiding the bad

613
00:18:46,480 --> 00:18:49,039
libraries more on that later

614
00:18:49,039 --> 00:18:50,960
so what you take away from this is that

615
00:18:50,960 --> 00:18:52,880
in nearly every language there are

616
00:18:52,880 --> 00:18:54,720
there are applications with hundreds or

617
00:18:54,720 --> 00:18:56,640
even thousands of libraries

618
00:18:56,640 --> 00:18:59,280
that still have zero or very few flaws

619
00:18:59,280 --> 00:19:00,880
and those are represented by the black

620
00:19:00,880 --> 00:19:02,000
dots sort of

621
00:19:02,000 --> 00:19:05,679
uh as close to the x axis as possible

622
00:19:05,679 --> 00:19:08,799
so it is possible to have those very

623
00:19:08,799 --> 00:19:10,640
large applications without introducing a

624
00:19:10,640 --> 00:19:12,480
ton of flaws so that's that's nice to

625
00:19:12,480 --> 00:19:14,480
know

626
00:19:14,480 --> 00:19:16,080
just a simpler view but still broken

627
00:19:16,080 --> 00:19:17,600
down by language we think the data

628
00:19:17,600 --> 00:19:18,880
points shown in blue are the most

629
00:19:18,880 --> 00:19:20,320
interesting and illustrating the point

630
00:19:20,320 --> 00:19:21,840
that language selection

631
00:19:21,840 --> 00:19:24,880
has a real impact on open source risk on

632
00:19:24,880 --> 00:19:26,400
the horizontal axis is the percent of

633
00:19:26,400 --> 00:19:28,080
libraries in that language that contain

634
00:19:28,080 --> 00:19:29,679
at least one flaw

635
00:19:29,679 --> 00:19:31,760
on the vertical axis is the flaw density

636
00:19:31,760 --> 00:19:33,200
of the average number of flaws

637
00:19:33,200 --> 00:19:35,679
per vulnerable library let's start with

638
00:19:35,679 --> 00:19:36,640
go

639
00:19:36,640 --> 00:19:38,240
go has a high percentage of libraries

640
00:19:38,240 --> 00:19:40,240
with flaws but an overall low number of

641
00:19:40,240 --> 00:19:40,799
flaws

642
00:19:40,799 --> 00:19:43,360
per individual library now compared with

643
00:19:43,360 --> 00:19:44,720
go php has an

644
00:19:44,720 --> 00:19:46,640
even higher rate of flawed libraries and

645
00:19:46,640 --> 00:19:48,480
over double the density of flaws

646
00:19:48,480 --> 00:19:51,200
in a given library so if you pick a php

647
00:19:51,200 --> 00:19:52,960
library at random there's a better than

648
00:19:52,960 --> 00:19:53,600
50

649
00:19:53,600 --> 00:19:56,000
chance that contains a vulnerability so

650
00:19:56,000 --> 00:19:57,120
going back to what we saw in the

651
00:19:57,120 --> 00:19:58,640
previous slide it would actually appear

652
00:19:58,640 --> 00:20:00,400
that go and php developers

653
00:20:00,400 --> 00:20:02,080
are pretty good at picking safer

654
00:20:02,080 --> 00:20:05,760
libraries despite these really bad odds

655
00:20:05,760 --> 00:20:07,840
swifton.net are both very different

656
00:20:07,840 --> 00:20:09,919
ecosystems from the other languages

657
00:20:09,919 --> 00:20:11,760
tied to a particular operating system

658
00:20:11,760 --> 00:20:13,520
and deployment style

659
00:20:13,520 --> 00:20:15,600
both of these languages have a low

660
00:20:15,600 --> 00:20:17,440
percentage of flawed libraries and

661
00:20:17,440 --> 00:20:19,360
net does better than swift on both

662
00:20:19,360 --> 00:20:21,120
metrics despite a library population

663
00:20:21,120 --> 00:20:24,719
that's over 17 times bigger

664
00:20:24,799 --> 00:20:26,080
now instead of language let's look at

665
00:20:26,080 --> 00:20:27,919
the types of vulnerabilities that crop

666
00:20:27,919 --> 00:20:29,280
up most often

667
00:20:29,280 --> 00:20:30,799
most people are familiar with the owasp

668
00:20:30,799 --> 00:20:32,320
top 10.

669
00:20:32,320 --> 00:20:34,159
three of those categories in the owasp

670
00:20:34,159 --> 00:20:36,159
top 10 shown in blue

671
00:20:36,159 --> 00:20:38,240
account for nearly three-quarters of all

672
00:20:38,240 --> 00:20:39,919
the vulnerabilities

673
00:20:39,919 --> 00:20:41,280
cross-site scripting is probably not a

674
00:20:41,280 --> 00:20:42,720
surprise it's been around forever it's

675
00:20:42,720 --> 00:20:43,840
fairly prevalent

676
00:20:43,840 --> 00:20:45,840
but the others may be a surprise for

677
00:20:45,840 --> 00:20:47,200
example a8

678
00:20:47,200 --> 00:20:50,240
insecure deserialization is number two

679
00:20:50,240 --> 00:20:51,840
and when we looked at first party code

680
00:20:51,840 --> 00:20:54,400
deserialization came in eighth place

681
00:20:54,400 --> 00:20:57,360
but here for third party is second i'd

682
00:20:57,360 --> 00:20:59,200
also expected injection to be a lot

683
00:20:59,200 --> 00:21:00,000
higher

684
00:21:00,000 --> 00:21:02,480
but it shows up only 8.8 which is less

685
00:21:02,480 --> 00:21:03,520
than half

686
00:21:03,520 --> 00:21:06,000
of what we see for broken access control

687
00:21:06,000 --> 00:21:07,760
so it's not exactly what we expected it

688
00:21:07,760 --> 00:21:09,760
to be

689
00:21:09,760 --> 00:21:11,360
now we take all this data and we break

690
00:21:11,360 --> 00:21:13,120
it down by both language and flaw

691
00:21:13,120 --> 00:21:14,960
category we can actually see where the

692
00:21:14,960 --> 00:21:16,400
hot spots are

693
00:21:16,400 --> 00:21:18,240
i've put a star by the categories that

694
00:21:18,240 --> 00:21:19,760
were in the top three on the previous

695
00:21:19,760 --> 00:21:20,480
slide

696
00:21:20,480 --> 00:21:22,480
so to read this chart take any row and

697
00:21:22,480 --> 00:21:23,760
column say a1

698
00:21:23,760 --> 00:21:27,760
and php and that tells you that 18.6

699
00:21:27,760 --> 00:21:29,679
of php libraries bring along with them

700
00:21:29,679 --> 00:21:30,880
at least one

701
00:21:30,880 --> 00:21:33,360
injection vulnerability the darker the

702
00:21:33,360 --> 00:21:36,240
cell the worse the situation

703
00:21:36,240 --> 00:21:38,559
if we look at broken access control and

704
00:21:38,559 --> 00:21:40,720
cross-site scripting a5 and a7

705
00:21:40,720 --> 00:21:42,400
we can see they're not only top three

706
00:21:42,400 --> 00:21:44,400
overall but they're in the top three

707
00:21:44,400 --> 00:21:46,720
regardless of language

708
00:21:46,720 --> 00:21:49,280
but looking at the bottom row insecurity

709
00:21:49,280 --> 00:21:50,880
serialization is heavily weighted

710
00:21:50,880 --> 00:21:53,200
towards java and php

711
00:21:53,200 --> 00:21:55,200
and we expect to see a lot of in java

712
00:21:55,200 --> 00:21:56,640
because the first

713
00:21:56,640 --> 00:21:57,919
really modern talk that brought

714
00:21:57,919 --> 00:22:00,240
attention to this category covered zero

715
00:22:00,240 --> 00:22:02,159
days in gadget chains in java this was a

716
00:22:02,159 --> 00:22:04,320
few years ago

717
00:22:04,320 --> 00:22:06,480
apache commons spring groovy some of

718
00:22:06,480 --> 00:22:09,200
those but apparently php has a lot of it

719
00:22:09,200 --> 00:22:09,760
too

720
00:22:09,760 --> 00:22:12,559
so insert insecure deserialization ended

721
00:22:12,559 --> 00:22:14,240
up at number two overall

722
00:22:14,240 --> 00:22:16,080
almost entirely because of the volume

723
00:22:16,080 --> 00:22:18,320
from java and php

724
00:22:18,320 --> 00:22:20,880
if you look vertically php just seems to

725
00:22:20,880 --> 00:22:22,240
be full of bugs

726
00:22:22,240 --> 00:22:26,480
no matter which category you look at

727
00:22:26,480 --> 00:22:28,480
so it's easy to look at this data and be

728
00:22:28,480 --> 00:22:30,080
overwhelmed with the sheer amount of

729
00:22:30,080 --> 00:22:31,760
vulnerable code that we inherit simply

730
00:22:31,760 --> 00:22:33,600
by developing software the same way that

731
00:22:33,600 --> 00:22:34,559
everybody else does

732
00:22:34,559 --> 00:22:37,120
by borrowing functionality so in this

733
00:22:37,120 --> 00:22:38,400
section we'll look at some ways to

734
00:22:38,400 --> 00:22:39,200
prioritize

735
00:22:39,200 --> 00:22:41,440
what's most important to fix there are a

736
00:22:41,440 --> 00:22:42,799
few different ways that we can take this

737
00:22:42,799 --> 00:22:44,640
huge list of vulnerabilities and filter

738
00:22:44,640 --> 00:22:45,840
it down

739
00:22:45,840 --> 00:22:47,600
you can think of it like a funnel

740
00:22:47,600 --> 00:22:49,200
everything goes in the top and then what

741
00:22:49,200 --> 00:22:51,840
we care about most comes out the bottom

742
00:22:51,840 --> 00:22:53,440
so the first filter is pretty easy to

743
00:22:53,440 --> 00:22:55,200
understand

744
00:22:55,200 --> 00:22:58,000
not all vulnerabilities have exploits

745
00:22:58,000 --> 00:22:59,200
vulnerability reports

746
00:22:59,200 --> 00:23:00,640
contain a pretty wide variety of

747
00:23:00,640 --> 00:23:02,240
information sometimes a researcher will

748
00:23:02,240 --> 00:23:04,240
publish a very detailed advisory

749
00:23:04,240 --> 00:23:06,400
with information on how to reproduce the

750
00:23:06,400 --> 00:23:08,400
vulnerability or how to exploit it

751
00:23:08,400 --> 00:23:10,080
other times a library maintainer will

752
00:23:10,080 --> 00:23:12,320
roll the fix into a

753
00:23:12,320 --> 00:23:13,679
release that doesn't really give much

754
00:23:13,679 --> 00:23:15,200
information about how the attacks might

755
00:23:15,200 --> 00:23:16,640
work

756
00:23:16,640 --> 00:23:18,080
most people don't have the skill to

757
00:23:18,080 --> 00:23:19,919
develop and exploit but there are

758
00:23:19,919 --> 00:23:21,520
websites that crowdsource proof of

759
00:23:21,520 --> 00:23:22,000
concept

760
00:23:22,000 --> 00:23:24,320
exploits for known vulnerabilities

761
00:23:24,320 --> 00:23:25,120
exploit db

762
00:23:25,120 --> 00:23:26,159
is one of them and then there's some

763
00:23:26,159 --> 00:23:27,840
commercial products like metasploit and

764
00:23:27,840 --> 00:23:28,480
canvas

765
00:23:28,480 --> 00:23:30,159
that provide weaponized exploits which

766
00:23:30,159 --> 00:23:31,600
are essentially just more reliable

767
00:23:31,600 --> 00:23:34,320
versions of proof of concept exploits

768
00:23:34,320 --> 00:23:35,840
so we use some data from kenneth

769
00:23:35,840 --> 00:23:37,600
security that cross-reference

770
00:23:37,600 --> 00:23:39,520
known vulnerabilities with publicly

771
00:23:39,520 --> 00:23:40,880
available exploits

772
00:23:40,880 --> 00:23:42,720
which gives us a first cut as to which

773
00:23:42,720 --> 00:23:44,480
vulnerabilities are more likely to be

774
00:23:44,480 --> 00:23:45,840
exploited

775
00:23:45,840 --> 00:23:49,279
so on average the blue vertical line

776
00:23:49,279 --> 00:23:52,320
20.7 20.7 percent of all vulnerable

777
00:23:52,320 --> 00:23:53,120
libra

778
00:23:53,120 --> 00:23:54,559
libraries have a proof of concept

779
00:23:54,559 --> 00:23:56,880
exploit but as you can see it varies

780
00:23:56,880 --> 00:23:58,159
widely by language

781
00:23:58,159 --> 00:24:00,240
and once again php is that unfortunate

782
00:24:00,240 --> 00:24:02,240
leader

783
00:24:02,240 --> 00:24:03,200
and when you look at exploit

784
00:24:03,200 --> 00:24:05,360
availability by owasp top 10

785
00:24:05,360 --> 00:24:07,360
the outliers in the chart are the same

786
00:24:07,360 --> 00:24:09,679
three categories that we saw before

787
00:24:09,679 --> 00:24:11,919
so not only are they more prevalent

788
00:24:11,919 --> 00:24:14,400
they're more likely to be exploited

789
00:24:14,400 --> 00:24:18,000
especially a8 and a5 now you see that

790
00:24:18,000 --> 00:24:19,600
cross-set scripting is a little bit

791
00:24:19,600 --> 00:24:20,480
further down

792
00:24:20,480 --> 00:24:23,200
only less than 10 of available exploits

793
00:24:23,200 --> 00:24:25,279
but oftentimes crosstalk scripting is so

794
00:24:25,279 --> 00:24:26,799
easy to exploit that you don't need to

795
00:24:26,799 --> 00:24:28,720
release a tool so i would suspect that

796
00:24:28,720 --> 00:24:29,039
that

797
00:24:29,039 --> 00:24:31,120
number in reality is a little bit

798
00:24:31,120 --> 00:24:32,799
underreported and probably a little bit

799
00:24:32,799 --> 00:24:34,480
higher

800
00:24:34,480 --> 00:24:37,039
in general a skilled attacker can create

801
00:24:37,039 --> 00:24:38,720
an exploit for most of these so treat

802
00:24:38,720 --> 00:24:40,799
any of these numbers as minimums

803
00:24:40,799 --> 00:24:43,039
but still using this chart combined with

804
00:24:43,039 --> 00:24:44,720
the previous one

805
00:24:44,720 --> 00:24:47,440
you'd probably prioritize patching for a

806
00:24:47,440 --> 00:24:48,240
php

807
00:24:48,240 --> 00:24:50,320
destrialization bug before a python

808
00:24:50,320 --> 00:24:51,679
injection bug right

809
00:24:51,679 --> 00:24:52,880
even though they might still have the

810
00:24:52,880 --> 00:24:55,039
same high cvss score

811
00:24:55,039 --> 00:24:57,520
high impact one represents more risk to

812
00:24:57,520 --> 00:24:58,799
the application than the other

813
00:24:58,799 --> 00:25:01,290
because of that presence of an exploit

814
00:25:01,290 --> 00:25:03,120
[Music]

815
00:25:03,120 --> 00:25:05,200
now prioritizing the vulnerabilities

816
00:25:05,200 --> 00:25:06,400
that have a

817
00:25:06,400 --> 00:25:08,400
public proof of concept exploit gets us

818
00:25:08,400 --> 00:25:09,840
from 97.4

819
00:25:09,840 --> 00:25:13,039
of applications down to 52.3 percent

820
00:25:13,039 --> 00:25:15,200
that's pretty good but there's more

821
00:25:15,200 --> 00:25:16,799
let's look at a couple other factors you

822
00:25:16,799 --> 00:25:20,080
can use to prioritize even further

823
00:25:20,080 --> 00:25:21,520
canada security provided us some

824
00:25:21,520 --> 00:25:23,039
additional data that tells us which

825
00:25:23,039 --> 00:25:24,799
vulnerabilities are being actively

826
00:25:24,799 --> 00:25:26,559
exploited in the wild

827
00:25:26,559 --> 00:25:28,720
now they do this by collecting telemetry

828
00:25:28,720 --> 00:25:30,240
data from various network security

829
00:25:30,240 --> 00:25:32,159
vendors to demonstrate that

830
00:25:32,159 --> 00:25:34,000
now obviously it's impossible for any of

831
00:25:34,000 --> 00:25:35,919
these tools to detect every attack

832
00:25:35,919 --> 00:25:37,919
the accuracy is dependent on having good

833
00:25:37,919 --> 00:25:39,039
iocs

834
00:25:39,039 --> 00:25:41,279
but it's still something we can use so

835
00:25:41,279 --> 00:25:42,799
if you apply that filter

836
00:25:42,799 --> 00:25:44,640
now you're down to only 25 percent of

837
00:25:44,640 --> 00:25:46,720
applications

838
00:25:46,720 --> 00:25:47,840
finally we can look at how the

839
00:25:47,840 --> 00:25:50,159
application actually uses the vulnerable

840
00:25:50,159 --> 00:25:51,279
library

841
00:25:51,279 --> 00:25:53,919
libraries have a lot of code in them

842
00:25:53,919 --> 00:25:55,120
aside from those tiny

843
00:25:55,120 --> 00:25:57,760
javascript ones in plenty of cases an

844
00:25:57,760 --> 00:25:59,520
application may be dependent on a

845
00:25:59,520 --> 00:26:00,559
vulnerable library

846
00:26:00,559 --> 00:26:02,159
but not actually executing any of the

847
00:26:02,159 --> 00:26:04,480
vulnerable code so for example

848
00:26:04,480 --> 00:26:06,400
let's say i download a math library

849
00:26:06,400 --> 00:26:07,600
because i want to use the square root

850
00:26:07,600 --> 00:26:08,480
function

851
00:26:08,480 --> 00:26:10,080
and it's a vulnerable library but the

852
00:26:10,080 --> 00:26:11,679
vulnerability is in the fourier

853
00:26:11,679 --> 00:26:13,279
transform function which is something

854
00:26:13,279 --> 00:26:14,880
that i never call

855
00:26:14,880 --> 00:26:16,320
so even though i'm using the library

856
00:26:16,320 --> 00:26:18,080
it's impossible for an attacker to

857
00:26:18,080 --> 00:26:18,559
trigger

858
00:26:18,559 --> 00:26:20,080
that vulnerability because i don't use

859
00:26:20,080 --> 00:26:21,840
that function

860
00:26:21,840 --> 00:26:23,520
so the varicode product where this data

861
00:26:23,520 --> 00:26:26,480
comes from looks for an execution path

862
00:26:26,480 --> 00:26:28,080
and if it sees one with a high degree of

863
00:26:28,080 --> 00:26:30,240
confidence it flags it to say this

864
00:26:30,240 --> 00:26:32,000
application is definitely using the

865
00:26:32,000 --> 00:26:32,960
vulnerable

866
00:26:32,960 --> 00:26:35,600
library function so if we use this as

867
00:26:35,600 --> 00:26:37,520
our final filter that gets us down to

868
00:26:37,520 --> 00:26:40,320
one percent of applications

869
00:26:40,320 --> 00:26:41,840
and this is not to say we should ignore

870
00:26:41,840 --> 00:26:44,159
all the other library flaws

871
00:26:44,159 --> 00:26:45,600
none of these filters are perfect

872
00:26:45,600 --> 00:26:47,440
there's false negatives at every stage

873
00:26:47,440 --> 00:26:48,240
but this gives us

874
00:26:48,240 --> 00:26:50,960
a framework for prioritizing what's most

875
00:26:50,960 --> 00:26:52,320
likely to be exploited

876
00:26:52,320 --> 00:26:55,678
and what's most important to fix

877
00:26:55,840 --> 00:26:57,760
one more piece of good news is that most

878
00:26:57,760 --> 00:26:59,679
fixes are minor

879
00:26:59,679 --> 00:27:01,200
if you've ever been a developer you know

880
00:27:01,200 --> 00:27:03,279
that a library upgrade can have side

881
00:27:03,279 --> 00:27:04,480
effects

882
00:27:04,480 --> 00:27:06,559
upgrading to a new major version can

883
00:27:06,559 --> 00:27:08,480
have a blast radius where stuff breaks

884
00:27:08,480 --> 00:27:09,360
unexpectedly

885
00:27:09,360 --> 00:27:11,919
so for example an api or a config

886
00:27:11,919 --> 00:27:13,440
setting might be deprecated

887
00:27:13,440 --> 00:27:14,960
and so that would break other code that

888
00:27:14,960 --> 00:27:16,159
you're using that depends on those

889
00:27:16,159 --> 00:27:17,760
deprecated things

890
00:27:17,760 --> 00:27:20,000
a minor version or patch is usually safe

891
00:27:20,000 --> 00:27:21,120
though

892
00:27:21,120 --> 00:27:24,240
so if of the 73.8 percent of libraries

893
00:27:24,240 --> 00:27:26,399
that do have an update available the

894
00:27:26,399 --> 00:27:27,600
vast majority of them

895
00:27:27,600 --> 00:27:30,720
81 percent are a minor version or less

896
00:27:30,720 --> 00:27:33,279
minor patch or revision meaning there's

897
00:27:33,279 --> 00:27:34,000
a really good chance

898
00:27:34,000 --> 00:27:35,120
you're going to be able to apply that

899
00:27:35,120 --> 00:27:38,639
update without breaking anything

900
00:27:39,840 --> 00:27:42,320
so let's say you're using a vulnerable

901
00:27:42,320 --> 00:27:43,760
library and you patch it

902
00:27:43,760 --> 00:27:46,080
that's great but oh no now you find out

903
00:27:46,080 --> 00:27:46,960
the new version

904
00:27:46,960 --> 00:27:48,559
has a different vulnerability so you

905
00:27:48,559 --> 00:27:50,399
have to patch again to get rid of that

906
00:27:50,399 --> 00:27:51,520
one

907
00:27:51,520 --> 00:27:55,360
this could go on forever and ever right

908
00:27:55,360 --> 00:27:56,799
well maybe not we wanted to figure this

909
00:27:56,799 --> 00:27:58,640
out because otherwise

910
00:27:58,640 --> 00:28:00,320
you just have to you know you're in this

911
00:28:00,320 --> 00:28:03,039
never-ending cycle so ben did some extra

912
00:28:03,039 --> 00:28:04,399
analysis on these scenarios to

913
00:28:04,399 --> 00:28:06,240
understand what these update chains

914
00:28:06,240 --> 00:28:07,919
actually look like and so i'll hand it

915
00:28:07,919 --> 00:28:09,679
back over to him to talk about what he's

916
00:28:09,679 --> 00:28:11,520
found

917
00:28:11,520 --> 00:28:14,240
okay so as chris said things are never

918
00:28:14,240 --> 00:28:14,559
that

919
00:28:14,559 --> 00:28:16,960
easy so we really need to look at what

920
00:28:16,960 --> 00:28:19,679
these update chains look like

921
00:28:19,679 --> 00:28:21,919
so when you go to update a library

922
00:28:21,919 --> 00:28:23,679
what's the next step

923
00:28:23,679 --> 00:28:25,679
and so before we kind of dig into the

924
00:28:25,679 --> 00:28:27,440
statistics and dig into the data and see

925
00:28:27,440 --> 00:28:28,320
what it's like

926
00:28:28,320 --> 00:28:30,159
it's instructive to think about it ahead

927
00:28:30,159 --> 00:28:31,679
of time and think about what

928
00:28:31,679 --> 00:28:33,279
possibilities there are

929
00:28:33,279 --> 00:28:34,960
um so let's start with the good

930
00:28:34,960 --> 00:28:36,559
possibilities

931
00:28:36,559 --> 00:28:39,039
um and there's two uh the best would be

932
00:28:39,039 --> 00:28:40,720
there's a single update to

933
00:28:40,720 --> 00:28:43,120
a known version to a version with no

934
00:28:43,120 --> 00:28:44,399
known flaw

935
00:28:44,399 --> 00:28:46,320
that is we just kind of move to the next

936
00:28:46,320 --> 00:28:49,039
version and it's fantastic

937
00:28:49,039 --> 00:28:50,960
the next thing that's maybe less ideal

938
00:28:50,960 --> 00:28:52,080
but still good

939
00:28:52,080 --> 00:28:53,840
is if we can do multiple updates and get

940
00:28:53,840 --> 00:28:56,480
to a version with no known flaw

941
00:28:56,480 --> 00:28:58,000
so you can update your library a couple

942
00:28:58,000 --> 00:28:59,840
times maybe you have to step through

943
00:28:59,840 --> 00:29:02,240
like major or minor versions but you do

944
00:29:02,240 --> 00:29:04,720
get to that version with no known flaw

945
00:29:04,720 --> 00:29:07,440
now the less ideal version is that

946
00:29:07,440 --> 00:29:09,200
there's no update available at the end

947
00:29:09,200 --> 00:29:10,240
of that chain

948
00:29:10,240 --> 00:29:11,760
and that can either be immediately

949
00:29:11,760 --> 00:29:13,679
there's no update available

950
00:29:13,679 --> 00:29:15,600
or after multiple steps there's no

951
00:29:15,600 --> 00:29:17,200
update available

952
00:29:17,200 --> 00:29:19,279
now this isn't exactly the worst thing

953
00:29:19,279 --> 00:29:20,880
in the world because if an update is

954
00:29:20,880 --> 00:29:22,559
available

955
00:29:22,559 --> 00:29:24,480
it may update a person a portion of the

956
00:29:24,480 --> 00:29:25,760
library that

957
00:29:25,760 --> 00:29:28,080
was flawed that you're using and new

958
00:29:28,080 --> 00:29:29,520
flaws that get introduced are not

959
00:29:29,520 --> 00:29:30,159
necessarily

960
00:29:30,159 --> 00:29:31,120
don't necessarily affect your

961
00:29:31,120 --> 00:29:32,880
application they're not on that

962
00:29:32,880 --> 00:29:34,159
execution path

963
00:29:34,159 --> 00:29:36,000
um or they're in a portion of the

964
00:29:36,000 --> 00:29:37,600
application that's never exposed in a

965
00:29:37,600 --> 00:29:38,159
way

966
00:29:38,159 --> 00:29:39,679
or that you can control in a different

967
00:29:39,679 --> 00:29:41,520
way

968
00:29:41,520 --> 00:29:44,399
now there is one last possibility that

969
00:29:44,399 --> 00:29:45,840
we actually didn't think about ahead of

970
00:29:45,840 --> 00:29:46,480
time but

971
00:29:46,480 --> 00:29:49,200
found in the data is that the suggested

972
00:29:49,200 --> 00:29:50,559
updates are circular

973
00:29:50,559 --> 00:29:53,840
so occasionally we'll have a library

974
00:29:53,840 --> 00:29:54,880
version update

975
00:29:54,880 --> 00:29:56,880
another version update and then we'll

976
00:29:56,880 --> 00:29:58,640
get to an end point and it'll say no

977
00:29:58,640 --> 00:30:00,480
if you want to avoid this new flaw you

978
00:30:00,480 --> 00:30:02,720
should downgrade to a previous version

979
00:30:02,720 --> 00:30:04,799
um and so when this happens it's it's

980
00:30:04,799 --> 00:30:05,919
not ideal

981
00:30:05,919 --> 00:30:07,520
so you kind of have to pick your poison

982
00:30:07,520 --> 00:30:09,760
and where in this circle it might be

983
00:30:09,760 --> 00:30:13,360
that your flaw is um now

984
00:30:13,360 --> 00:30:16,559
that's fine um so we we

985
00:30:16,559 --> 00:30:17,600
wanted to look at these all

986
00:30:17,600 --> 00:30:19,520
possibilities and see what what it looks

987
00:30:19,520 --> 00:30:20,480
like

988
00:30:20,480 --> 00:30:22,159
and then ask some questions about what

989
00:30:22,159 --> 00:30:23,840
these chains are so

990
00:30:23,840 --> 00:30:25,520
uh first of all is just what is the

991
00:30:25,520 --> 00:30:27,360
proportion of those possibilities where

992
00:30:27,360 --> 00:30:27,840
do these

993
00:30:27,840 --> 00:30:30,399
end um how many steps occur in that

994
00:30:30,399 --> 00:30:31,279
change

995
00:30:31,279 --> 00:30:33,279
and are they gonna significantly

996
00:30:33,279 --> 00:30:34,799
increase that update size

997
00:30:34,799 --> 00:30:36,720
so where we said we had mostly patch and

998
00:30:36,720 --> 00:30:38,399
minor versions are we going to have to

999
00:30:38,399 --> 00:30:40,320
now move to mostly major versions if we

1000
00:30:40,320 --> 00:30:42,640
check out the chains

1001
00:30:42,640 --> 00:30:44,240
and thankfully i mostly have good news

1002
00:30:44,240 --> 00:30:46,320
for you

1003
00:30:46,320 --> 00:30:49,200
so how do the chains end about a little

1004
00:30:49,200 --> 00:30:50,399
over two-thirds

1005
00:30:50,399 --> 00:30:52,720
end in this version that we have has no

1006
00:30:52,720 --> 00:30:53,760
known flaw

1007
00:30:53,760 --> 00:30:56,080
uh so about 34 percent get to that

1008
00:30:56,080 --> 00:30:58,480
multiple steps to a version that's

1009
00:30:58,480 --> 00:31:01,039
unflawed and then about 33 percent uh

1010
00:31:01,039 --> 00:31:02,640
it's just a single step so

1011
00:31:02,640 --> 00:31:05,039
that's good we can still do that on the

1012
00:31:05,039 --> 00:31:07,120
26.2 that's what you saw before these

1013
00:31:07,120 --> 00:31:08,559
are libraries that have no

1014
00:31:08,559 --> 00:31:11,440
one-step update and then about 6.4 you

1015
00:31:11,440 --> 00:31:12,880
might have this multiple steps and kind

1016
00:31:12,880 --> 00:31:14,480
of get stuck and there's nothing to

1017
00:31:14,480 --> 00:31:16,960
to go to now blessedly these circular

1018
00:31:16,960 --> 00:31:18,000
updates are where only

1019
00:31:18,000 --> 00:31:20,080
about half percent of the time so you

1020
00:31:20,080 --> 00:31:21,120
may have to kind of pick

1021
00:31:21,120 --> 00:31:24,399
uh the the least

1022
00:31:24,799 --> 00:31:27,679
the least worst option in those update

1023
00:31:27,679 --> 00:31:28,080
chains

1024
00:31:28,080 --> 00:31:30,640
as you go um so that's that's good news

1025
00:31:30,640 --> 00:31:32,000
for us

1026
00:31:32,000 --> 00:31:34,080
the next question how long are these

1027
00:31:34,080 --> 00:31:35,039
chains

1028
00:31:35,039 --> 00:31:37,360
most are relatively short so across the

1029
00:31:37,360 --> 00:31:38,880
horizontal axis here

1030
00:31:38,880 --> 00:31:40,399
we've got the update chain length we

1031
00:31:40,399 --> 00:31:43,120
just looked at all those lengths

1032
00:31:43,120 --> 00:31:46,000
and we can see that most are length one

1033
00:31:46,000 --> 00:31:47,679
the colors here is whether the

1034
00:31:47,679 --> 00:31:49,760
final version has flaws or not the blue

1035
00:31:49,760 --> 00:31:52,720
is no flaws the yellow has flaws

1036
00:31:52,720 --> 00:31:54,480
and in fact ninety percent of the chains

1037
00:31:54,480 --> 00:31:56,080
that end in

1038
00:31:56,080 --> 00:31:59,519
a version that doesn't have a flaw

1039
00:31:59,519 --> 00:32:01,279
actually are less than less than or

1040
00:32:01,279 --> 00:32:03,279
equal to four steps so you only have to

1041
00:32:03,279 --> 00:32:03,840
do uh

1042
00:32:03,840 --> 00:32:06,080
three updates uh before you get to that

1043
00:32:06,080 --> 00:32:07,039
end chain

1044
00:32:07,039 --> 00:32:10,480
three little jumps um now interestingly

1045
00:32:10,480 --> 00:32:10,960
enough

1046
00:32:10,960 --> 00:32:12,640
occasionally we get these really long

1047
00:32:12,640 --> 00:32:14,799
ones like 33 updates to the final

1048
00:32:14,799 --> 00:32:15,600
version

1049
00:32:15,600 --> 00:32:18,080
but again those are blessedly rare um

1050
00:32:18,080 --> 00:32:19,760
and you know because that ends in a

1051
00:32:19,760 --> 00:32:22,240
version that still has a known flaw

1052
00:32:22,240 --> 00:32:23,600
you may be able to pick something else

1053
00:32:23,600 --> 00:32:25,679
along the way uh that has a flaw that's

1054
00:32:25,679 --> 00:32:27,120
more amenable to your application

1055
00:32:27,120 --> 00:32:29,519
is a little safer so it's about managing

1056
00:32:29,519 --> 00:32:32,399
kind of what those flaw types are

1057
00:32:32,399 --> 00:32:34,720
now as we've seen over and over again

1058
00:32:34,720 --> 00:32:37,440
these things vary by language

1059
00:32:37,440 --> 00:32:39,519
and so.net tends to have these really

1060
00:32:39,519 --> 00:32:40,960
long update chains

1061
00:32:40,960 --> 00:32:43,600
um and in fact on average has these has

1062
00:32:43,600 --> 00:32:45,600
about seven steps before you get to an

1063
00:32:45,600 --> 00:32:47,360
unflawed version or or

1064
00:32:47,360 --> 00:32:49,519
and the end of the chain um you know on

1065
00:32:49,519 --> 00:32:52,240
the other end is go which only has about

1066
00:32:52,240 --> 00:32:55,279
averages about one step

1067
00:32:55,279 --> 00:32:56,799
interestingly here like this is the one

1068
00:32:56,799 --> 00:32:58,320
place javascript is in the middle of the

1069
00:32:58,320 --> 00:32:59,120
pack

1070
00:32:59,120 --> 00:33:00,960
which about four steps before you get to

1071
00:33:00,960 --> 00:33:02,559
the the end of the chain

1072
00:33:02,559 --> 00:33:04,720
um so as always you know the language

1073
00:33:04,720 --> 00:33:06,960
choice makes a big difference

1074
00:33:06,960 --> 00:33:10,080
so um this is the last visual i'm going

1075
00:33:10,080 --> 00:33:10,880
to show you

1076
00:33:10,880 --> 00:33:13,200
and there's a lot going on here so we're

1077
00:33:13,200 --> 00:33:15,200
just going to take a minute to kind of

1078
00:33:15,200 --> 00:33:16,640
parse it a little bit and it's actually

1079
00:33:16,640 --> 00:33:19,039
easier to look at than you think it is

1080
00:33:19,039 --> 00:33:20,720
so what this is is really kind of a bar

1081
00:33:20,720 --> 00:33:22,159
chart that shows how the different

1082
00:33:22,159 --> 00:33:24,720
proportions change across each bar

1083
00:33:24,720 --> 00:33:26,399
so on the left hand side we have kind of

1084
00:33:26,399 --> 00:33:28,159
the type of updates we have

1085
00:33:28,159 --> 00:33:29,679
so we can either have those one-step

1086
00:33:29,679 --> 00:33:31,840
chains the multi-step chains that end in

1087
00:33:31,840 --> 00:33:33,760
a nice clean version

1088
00:33:33,760 --> 00:33:35,919
that can end in a flawed version or

1089
00:33:35,919 --> 00:33:37,440
there's no update available that's that

1090
00:33:37,440 --> 00:33:38,000
yellow chunk

1091
00:33:38,000 --> 00:33:41,279
at the top and then in the middle we can

1092
00:33:41,279 --> 00:33:42,399
see this like

1093
00:33:42,399 --> 00:33:44,799
the 73.4 percent of flaws that's the

1094
00:33:44,799 --> 00:33:45,919
height of the bar

1095
00:33:45,919 --> 00:33:48,000
um that have any kind of update

1096
00:33:48,000 --> 00:33:49,919
available just just one step and we get

1097
00:33:49,919 --> 00:33:51,200
to something that's different

1098
00:33:51,200 --> 00:33:53,360
has a different type of flaw that you

1099
00:33:53,360 --> 00:33:54,320
might be able to accept

1100
00:33:54,320 --> 00:33:56,000
and what we've done is we've colored

1101
00:33:56,000 --> 00:33:58,559
this by the size of the update

1102
00:33:58,559 --> 00:34:00,240
so that blue at the bottom is the patch

1103
00:34:00,240 --> 00:34:01,600
the kind of gray in the middle is the

1104
00:34:01,600 --> 00:34:03,120
minor version and that lighter gray at

1105
00:34:03,120 --> 00:34:03,519
the top

1106
00:34:03,519 --> 00:34:06,320
is in the major and so these are the

1107
00:34:06,320 --> 00:34:07,840
proportions that we saw in the in the

1108
00:34:07,840 --> 00:34:08,960
previous chart that chris

1109
00:34:08,960 --> 00:34:12,480
showed and what we can see is how th how

1110
00:34:12,480 --> 00:34:12,960
those

1111
00:34:12,960 --> 00:34:15,520
flow from left to right and how those

1112
00:34:15,520 --> 00:34:16,000
cha

1113
00:34:16,000 --> 00:34:17,679
change as we go through these chain

1114
00:34:17,679 --> 00:34:19,040
updates

1115
00:34:19,040 --> 00:34:21,199
so in the far right version it shows how

1116
00:34:21,199 --> 00:34:23,918
those proportions have kind of changed

1117
00:34:23,918 --> 00:34:26,560
for major minor and patch versions and

1118
00:34:26,560 --> 00:34:28,079
so what we see here is where we had

1119
00:34:28,079 --> 00:34:30,079
mostly patch versions on that single

1120
00:34:30,079 --> 00:34:32,159
update to fix the flaw

1121
00:34:32,159 --> 00:34:34,480
on the right hand side we have mostly

1122
00:34:34,480 --> 00:34:35,599
minor versions

1123
00:34:35,599 --> 00:34:38,239
so that that blue that goes across the

1124
00:34:38,239 --> 00:34:39,359
minor version it shows

1125
00:34:39,359 --> 00:34:41,520
you know about a third of them um that

1126
00:34:41,520 --> 00:34:43,359
were patch updates on that first step

1127
00:34:43,359 --> 00:34:45,119
end up being minor version updates in

1128
00:34:45,119 --> 00:34:46,960
that in the chain step

1129
00:34:46,960 --> 00:34:48,879
um interestingly like most of the patch

1130
00:34:48,879 --> 00:34:50,560
stays the chain the same

1131
00:34:50,560 --> 00:34:52,560
um and we see most of the minor versions

1132
00:34:52,560 --> 00:34:54,000
stay minor versions

1133
00:34:54,000 --> 00:34:56,320
a few go up to major version updates and

1134
00:34:56,320 --> 00:34:57,040
then

1135
00:34:57,040 --> 00:34:59,520
about 10 of those go and don't actually

1136
00:34:59,520 --> 00:35:01,440
have an update at the end of the chain

1137
00:35:01,440 --> 00:35:02,560
um so that's what there's kind of

1138
00:35:02,560 --> 00:35:04,720
different flows show um

1139
00:35:04,720 --> 00:35:07,839
so this is like a good outcome again

1140
00:35:07,839 --> 00:35:10,480
about two-thirds of our flaws you know

1141
00:35:10,480 --> 00:35:11,200
have that

1142
00:35:11,200 --> 00:35:14,079
that good ending and still most of those

1143
00:35:14,079 --> 00:35:15,680
about 75

1144
00:35:15,680 --> 00:35:18,720
are small updates minor versions or less

1145
00:35:18,720 --> 00:35:21,119
um and so we're in we're in good shape

1146
00:35:21,119 --> 00:35:22,400
um even though

1147
00:35:22,400 --> 00:35:24,079
we know that you can do multiple updates

1148
00:35:24,079 --> 00:35:26,000
we're still going to end up with a clean

1149
00:35:26,000 --> 00:35:27,359
version most of the time

1150
00:35:27,359 --> 00:35:31,119
that's going to be a small update um

1151
00:35:31,119 --> 00:35:33,119
so that's the last visual i have i'm

1152
00:35:33,119 --> 00:35:35,440
just going to end with a few takeaways

1153
00:35:35,440 --> 00:35:37,040
and then we can get to some questions

1154
00:35:37,040 --> 00:35:38,880
that i will answer in a month and a half

1155
00:35:38,880 --> 00:35:40,079
when i present this

1156
00:35:40,079 --> 00:35:43,280
on a webinar so

1157
00:35:43,280 --> 00:35:46,400
the first takeaway is um i i

1158
00:35:46,400 --> 00:35:48,320
open source software has a surprising

1159
00:35:48,320 --> 00:35:50,640
and surprisingly variable number of

1160
00:35:50,640 --> 00:35:53,839
types and quantity of software flaws

1161
00:35:53,839 --> 00:35:54,960
i don't think it would come to a

1162
00:35:54,960 --> 00:35:57,040
surprise from anybody that yes

1163
00:35:57,040 --> 00:35:59,599
open source software is flawed um but

1164
00:35:59,599 --> 00:36:00,079
the

1165
00:36:00,079 --> 00:36:02,640
extent and the the types and the changes

1166
00:36:02,640 --> 00:36:03,760
uh were something that's really

1167
00:36:03,760 --> 00:36:05,520
interesting and pulling those apart

1168
00:36:05,520 --> 00:36:07,280
and understanding how those interact

1169
00:36:07,280 --> 00:36:09,040
with applications and their use

1170
00:36:09,040 --> 00:36:10,960
uh i think led to some surprising

1171
00:36:10,960 --> 00:36:12,800
results

1172
00:36:12,800 --> 00:36:15,280
um i think this idea that most of the

1173
00:36:15,280 --> 00:36:17,040
flaws that come in or come from transit

1174
00:36:17,040 --> 00:36:18,480
defense dependencies

1175
00:36:18,480 --> 00:36:21,839
is really important to understand um

1176
00:36:21,839 --> 00:36:23,920
so when you're writing an application

1177
00:36:23,920 --> 00:36:25,280
you're pulling in all that data

1178
00:36:25,280 --> 00:36:26,960
you have to understand you're pulling in

1179
00:36:26,960 --> 00:36:28,079
all those libraries you have to

1180
00:36:28,079 --> 00:36:28,880
understand

1181
00:36:28,880 --> 00:36:30,720
it's not just the libraries you're

1182
00:36:30,720 --> 00:36:32,880
directly including it's everything that

1183
00:36:32,880 --> 00:36:34,640
those library user those library

1184
00:36:34,640 --> 00:36:35,920
developers used and those library

1185
00:36:35,920 --> 00:36:37,280
developers used and those library

1186
00:36:37,280 --> 00:36:38,400
developers used

1187
00:36:38,400 --> 00:36:40,400
so you potentially have to manage you

1188
00:36:40,400 --> 00:36:41,440
know

1189
00:36:41,440 --> 00:36:43,119
hundreds of developers when you pull in

1190
00:36:43,119 --> 00:36:44,960
one library

1191
00:36:44,960 --> 00:36:47,760
and really it is about management um

1192
00:36:47,760 --> 00:36:48,960
it's not just the

1193
00:36:48,960 --> 00:36:51,520
um it's about management prioritization

1194
00:36:51,520 --> 00:36:52,160
it's not just

1195
00:36:52,160 --> 00:36:54,640
fix everything update everything it's

1196
00:36:54,640 --> 00:36:56,320
about fixing the stuff that's important

1197
00:36:56,320 --> 00:36:58,079
things that have that proof of concept

1198
00:36:58,079 --> 00:36:59,280
things that have that exploit in the

1199
00:36:59,280 --> 00:37:01,440
wild things that can be update that can

1200
00:37:01,440 --> 00:37:03,599
be fixed with just a minor update

1201
00:37:03,599 --> 00:37:05,280
those are easy things to do and not

1202
00:37:05,280 --> 00:37:06,880
necessarily they don't mean a huge

1203
00:37:06,880 --> 00:37:09,040
refactor of the code

1204
00:37:09,040 --> 00:37:10,800
and then of course language selection

1205
00:37:10,800 --> 00:37:12,320
does make a difference

1206
00:37:12,320 --> 00:37:14,079
developers don't always have the luxury

1207
00:37:14,079 --> 00:37:16,240
of picking the language ahead of time

1208
00:37:16,240 --> 00:37:18,320
but sometimes they do and if you're

1209
00:37:18,320 --> 00:37:19,440
worried about security in your

1210
00:37:19,440 --> 00:37:20,880
application

1211
00:37:20,880 --> 00:37:22,560
and know kind of what the application

1212
00:37:22,560 --> 00:37:24,560
you're building is some of this can give

1213
00:37:24,560 --> 00:37:26,320
you guidance on what language you might

1214
00:37:26,320 --> 00:37:27,599
want to select

1215
00:37:27,599 --> 00:37:30,880
versus shy away from and so i think

1216
00:37:30,880 --> 00:37:32,720
these are all just kind of

1217
00:37:32,720 --> 00:37:34,079
interesting lessons that we can take

1218
00:37:34,079 --> 00:37:36,560
away and you know there's lots of

1219
00:37:36,560 --> 00:37:38,000
interesting questions that get brought

1220
00:37:38,000 --> 00:37:39,040
up in this research and

1221
00:37:39,040 --> 00:37:40,720
we're looking forward to working on that

1222
00:37:40,720 --> 00:37:42,800
in the future but until then

1223
00:37:42,800 --> 00:37:44,800
i'm excited to hear about your questions

1224
00:37:44,800 --> 00:37:47,040
um thanks for making my first briefing a

1225
00:37:47,040 --> 00:37:48,160
memorable one

1226
00:37:48,160 --> 00:37:53,680
um and uh let's let's talk a little bit

