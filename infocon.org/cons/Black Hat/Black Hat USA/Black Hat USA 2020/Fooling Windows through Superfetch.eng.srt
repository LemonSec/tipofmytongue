1
00:00:02,830 --> 00:00:13,260
[Music]

2
00:00:13,920 --> 00:00:15,440
hello everyone and thank you all for

3
00:00:15,440 --> 00:00:16,079
being here

4
00:00:16,079 --> 00:00:17,760
today we're going to introduce you to

5
00:00:17,760 --> 00:00:19,359
the best friend you never had the chance

6
00:00:19,359 --> 00:00:20,160
to meet

7
00:00:20,160 --> 00:00:22,800
this little guy is called superfash and

8
00:00:22,800 --> 00:00:23,359
trust me

9
00:00:23,359 --> 00:00:24,800
he knows more about you than your

10
00:00:24,800 --> 00:00:26,800
closest friends too before getting

11
00:00:26,800 --> 00:00:27,920
acquainted with him

12
00:00:27,920 --> 00:00:30,240
let us introduce ourselves i am matteo

13
00:00:30,240 --> 00:00:31,199
bello a master

14
00:00:31,199 --> 00:00:33,920
student and this is betsy's david a phd

15
00:00:33,920 --> 00:00:34,640
student

16
00:00:34,640 --> 00:00:36,559
we both work at the asia laboratory in

17
00:00:36,559 --> 00:00:38,399
lava france

18
00:00:38,399 --> 00:00:41,760
if you have one day wondered what means

19
00:00:41,760 --> 00:00:42,879
standby memory

20
00:00:42,879 --> 00:00:45,039
in the resource monitor we might have a

21
00:00:45,039 --> 00:00:46,879
solution actually this memory is

22
00:00:46,879 --> 00:00:48,719
composed of properly processed

23
00:00:48,719 --> 00:00:51,120
and produced fine even if you never ask

24
00:00:51,120 --> 00:00:52,960
for this process to be launched or this

25
00:00:52,960 --> 00:00:54,480
file to be touched

26
00:00:54,480 --> 00:00:56,160
how is it possible that the system

27
00:00:56,160 --> 00:00:58,160
provided something in memory

28
00:00:58,160 --> 00:01:00,800
even if you didn't ask for it actually

29
00:01:00,800 --> 00:01:02,559
the system tried to grasp what you are

30
00:01:02,559 --> 00:01:03,520
going to use

31
00:01:03,520 --> 00:01:06,640
but how is it possible

32
00:01:06,960 --> 00:01:09,600
it is there is in the system a little

33
00:01:09,600 --> 00:01:10,560
spy

34
00:01:10,560 --> 00:01:13,840
which buys on you every hour of every

35
00:01:13,840 --> 00:01:14,560
day

36
00:01:14,560 --> 00:01:17,600
it's name this makes sense

37
00:01:17,600 --> 00:01:19,439
this service tries to make your life

38
00:01:19,439 --> 00:01:20,799
easier actually

39
00:01:20,799 --> 00:01:23,119
and by two leverages the first one is

40
00:01:23,119 --> 00:01:24,560
optimizing the boot

41
00:01:24,560 --> 00:01:26,799
and the second one is analyzing your

42
00:01:26,799 --> 00:01:28,400
daily software use

43
00:01:28,400 --> 00:01:30,560
so it can predict and pronounce what you

44
00:01:30,560 --> 00:01:32,159
might need next time

45
00:01:32,159 --> 00:01:34,720
for instance if every day as soon as you

46
00:01:34,720 --> 00:01:36,880
turn on your computer you go to your web

47
00:01:36,880 --> 00:01:39,600
application or tomorrow morning your os

48
00:01:39,600 --> 00:01:41,200
will be ready to execute this

49
00:01:41,200 --> 00:01:41,840
application

50
00:01:41,840 --> 00:01:44,240
before you even think about it but to

51
00:01:44,240 --> 00:01:45,680
clear things up super fetch

52
00:01:45,680 --> 00:01:48,880
is just a part of the system in service

53
00:01:48,880 --> 00:01:50,880
but the misuse of language is often made

54
00:01:50,880 --> 00:01:52,560
because until windows 8

55
00:01:52,560 --> 00:01:54,560
the whole service used to be called

56
00:01:54,560 --> 00:01:56,479
superfetch

57
00:01:56,479 --> 00:01:59,920
the place of cis main is located on sea

58
00:01:59,920 --> 00:02:02,320
windows profesh and there are many

59
00:02:02,320 --> 00:02:04,079
things in this directory you first have

60
00:02:04,079 --> 00:02:06,000
a directory called reboot

61
00:02:06,000 --> 00:02:08,399
this is related to a driver's activity

62
00:02:08,399 --> 00:02:09,840
called ready boost

63
00:02:09,840 --> 00:02:13,040
you have the majority dot db and the dot

64
00:02:13,040 --> 00:02:14,720
pf files they are the traces

65
00:02:14,720 --> 00:02:17,200
of the course activity and you've got a

66
00:02:17,200 --> 00:02:17,840
file

67
00:02:17,840 --> 00:02:20,560
named liar dolphini let's have a closer

68
00:02:20,560 --> 00:02:23,599
look at it this is a list representing

69
00:02:23,599 --> 00:02:26,720
the best order for your os to load files

70
00:02:26,720 --> 00:02:28,000
when booting

71
00:02:28,000 --> 00:02:30,239
and of course it begins with the kernel

72
00:02:30,239 --> 00:02:31,200
because with that

73
00:02:31,200 --> 00:02:34,080
it won't be able to build much yes the

74
00:02:34,080 --> 00:02:36,000
rest of super fetch performance

75
00:02:36,000 --> 00:02:39,360
is based on reducing memory operation

76
00:02:39,360 --> 00:02:41,200
but to understand this concept we first

77
00:02:41,200 --> 00:02:42,800
need to make sure everybody knows

78
00:02:42,800 --> 00:02:44,640
what is memory paging and how does it

79
00:02:44,640 --> 00:02:46,560
work so

80
00:02:46,560 --> 00:02:49,760
every process is dividing into pages

81
00:02:49,760 --> 00:02:50,080
which

82
00:02:50,080 --> 00:02:52,800
are same size blog of data containing

83
00:02:52,800 --> 00:02:53,760
the instructions

84
00:02:53,760 --> 00:02:57,040
program etc and these pages will be

85
00:02:57,040 --> 00:02:59,200
mapped usually into the hub which is a

86
00:02:59,200 --> 00:03:00,720
physical memory

87
00:03:00,720 --> 00:03:02,480
but they could also be mapped into the

88
00:03:02,480 --> 00:03:04,879
virtual memory every process

89
00:03:04,879 --> 00:03:07,760
has also what we call a page table with

90
00:03:07,760 --> 00:03:09,440
which is another associating

91
00:03:09,440 --> 00:03:12,000
the page number which is the index of

92
00:03:12,000 --> 00:03:13,280
the physical address

93
00:03:13,280 --> 00:03:15,840
to the frame number which is the index

94
00:03:15,840 --> 00:03:17,280
of the virtual address

95
00:03:17,280 --> 00:03:20,080
into the physical memory when you launch

96
00:03:20,080 --> 00:03:22,239
the program the cpu has to

97
00:03:22,239 --> 00:03:24,319
first figure out where the instruction

98
00:03:24,319 --> 00:03:25,599
is

99
00:03:25,599 --> 00:03:27,920
so it goes to the page table with the

100
00:03:27,920 --> 00:03:28,879
page number

101
00:03:28,879 --> 00:03:30,959
gets the frame number associated and

102
00:03:30,959 --> 00:03:33,440
then execute the instruction

103
00:03:33,440 --> 00:03:35,680
but what would happen if the page is not

104
00:03:35,680 --> 00:03:37,760
mapped into the physical memory but into

105
00:03:37,760 --> 00:03:39,280
the virtual memory

106
00:03:39,280 --> 00:03:41,840
well the page table can't resolve the

107
00:03:41,840 --> 00:03:43,280
address of the frame number

108
00:03:43,280 --> 00:03:45,360
since the page is not mapped into

109
00:03:45,360 --> 00:03:46,959
physical memory

110
00:03:46,959 --> 00:03:49,920
so a page falls occurs to deal with that

111
00:03:49,920 --> 00:03:53,040
the os will first find the page into the

112
00:03:53,040 --> 00:03:55,040
virtual memory then it will bring it

113
00:03:55,040 --> 00:03:56,480
back into a free frame

114
00:03:56,480 --> 00:03:59,760
and then it will update the page table

115
00:03:59,760 --> 00:04:01,760
with this new entry so the process can

116
00:04:01,760 --> 00:04:04,080
be redone again

117
00:04:04,080 --> 00:04:07,040
the old point of superfetch is to avoid

118
00:04:07,040 --> 00:04:09,280
this whole process of handling page

119
00:04:09,280 --> 00:04:09,840
faults

120
00:04:09,840 --> 00:04:11,760
because there are other roles such as

121
00:04:11,760 --> 00:04:14,159
normal parts of memory management but

122
00:04:14,159 --> 00:04:14,560
actually

123
00:04:14,560 --> 00:04:16,399
they do require times and memory

124
00:04:16,399 --> 00:04:19,040
operations so they slow the system

125
00:04:19,040 --> 00:04:22,479
to avoid that superfetch references the

126
00:04:22,479 --> 00:04:25,040
page accesses the page folds

127
00:04:25,040 --> 00:04:27,520
so it could directly mapped into the

128
00:04:27,520 --> 00:04:28,880
physical memory

129
00:04:28,880 --> 00:04:32,320
the page faults that happened once and

130
00:04:32,320 --> 00:04:35,919
to avoid them to happen again

131
00:04:35,919 --> 00:04:38,960
let's check how it works superfresh or

132
00:04:38,960 --> 00:04:40,240
systemic service

133
00:04:40,240 --> 00:04:42,800
is composed of different components and

134
00:04:42,800 --> 00:04:44,639
among all these components there is

135
00:04:44,639 --> 00:04:46,639
five very important ones which are

136
00:04:46,639 --> 00:04:47,759
called agents

137
00:04:47,759 --> 00:04:50,080
so we are going to focus on introducing

138
00:04:50,080 --> 00:04:51,040
every agent

139
00:04:51,040 --> 00:04:53,840
the first agent is called agent context

140
00:04:53,840 --> 00:04:55,360
agcx for short

141
00:04:55,360 --> 00:04:57,919
this one uh is based on user information

142
00:04:57,919 --> 00:04:59,680
and that's why he is dealing with sid

143
00:04:59,680 --> 00:05:02,320
and turkey and of user

144
00:05:02,320 --> 00:05:06,800
its main focus is concentrating

145
00:05:06,800 --> 00:05:09,280
on context change which mean when you

146
00:05:09,280 --> 00:05:11,199
are going to ignition when the computer

147
00:05:11,199 --> 00:05:12,560
is going to stand by mode

148
00:05:12,560 --> 00:05:15,600
or when you are changing a session

149
00:05:15,600 --> 00:05:17,520
you have two way of charging session the

150
00:05:17,520 --> 00:05:20,080
classic one which is disconnecting from

151
00:05:20,080 --> 00:05:21,759
your current session going to the new

152
00:05:21,759 --> 00:05:22,560
session

153
00:05:22,560 --> 00:05:24,960
and the lazy disconnect which means from

154
00:05:24,960 --> 00:05:26,560
your current session going to a new

155
00:05:26,560 --> 00:05:27,120
session

156
00:05:27,120 --> 00:05:29,600
directly directly and what's happened is

157
00:05:29,600 --> 00:05:31,199
when you are changing the station i

158
00:05:31,199 --> 00:05:31,919
agree this

159
00:05:31,919 --> 00:05:35,759
agent is going to take a snapshot

160
00:05:35,759 --> 00:05:37,680
of your session so that when you are

161
00:05:37,680 --> 00:05:39,600
going back from the new session

162
00:05:39,600 --> 00:05:42,720
to the original one this is that

163
00:05:42,720 --> 00:05:44,800
snapshot which is used to improve the

164
00:05:44,800 --> 00:05:46,080
performance

165
00:05:46,080 --> 00:05:49,280
the second agent is agent if and db for

166
00:05:49,280 --> 00:05:52,320
page frame page frame number of database

167
00:05:52,320 --> 00:05:54,960
which is on a very important agent this

168
00:05:54,960 --> 00:05:55,759
one is uh

169
00:05:55,759 --> 00:05:59,120
going to focus on two uh

170
00:05:59,120 --> 00:06:02,080
two two information who is allowed to

171
00:06:02,080 --> 00:06:03,840
log every page forward to know which

172
00:06:03,840 --> 00:06:04,240
file

173
00:06:04,240 --> 00:06:07,759
is doesn't matter for for for a given

174
00:06:07,759 --> 00:06:08,479
process

175
00:06:08,479 --> 00:06:11,759
and it is about to log every access to

176
00:06:11,759 --> 00:06:12,720
memory page

177
00:06:12,720 --> 00:06:15,039
in a process so from a working site of

178
00:06:15,039 --> 00:06:16,319
many pages

179
00:06:16,319 --> 00:06:17,919
all these pages can be in different

180
00:06:17,919 --> 00:06:19,360
place modified lists

181
00:06:19,360 --> 00:06:22,880
and values free list series

182
00:06:22,880 --> 00:06:25,840
all of this page are actually monitored

183
00:06:25,840 --> 00:06:27,600
in a way

184
00:06:27,600 --> 00:06:30,800
by this agent so that we can

185
00:06:30,800 --> 00:06:33,520
guess or know which phase matter of our

186
00:06:33,520 --> 00:06:35,199
process which means if you uploaded the

187
00:06:35,199 --> 00:06:37,039
file in memory and this file is

188
00:06:37,039 --> 00:06:39,440
not accessed a lot it doesn't make sense

189
00:06:39,440 --> 00:06:41,440
to keep record on it but if that file

190
00:06:41,440 --> 00:06:42,160
loaded

191
00:06:42,160 --> 00:06:45,680
has a lot of access by memory for given

192
00:06:45,680 --> 00:06:46,240
process

193
00:06:46,240 --> 00:06:48,639
it makes sense to keep that information

194
00:06:48,639 --> 00:06:50,560
and in addition it adds

195
00:06:50,560 --> 00:06:53,599
to the page of memory which are tracked

196
00:06:53,599 --> 00:06:54,560
in memory

197
00:06:54,560 --> 00:06:57,840
is this page private memory is disparage

198
00:06:57,840 --> 00:07:00,880
sharing memory committed memory or if

199
00:07:00,880 --> 00:07:02,400
this page is coming from a bandwidth

200
00:07:02,400 --> 00:07:04,319
application or four-point application

201
00:07:04,319 --> 00:07:06,639
making sense that background application

202
00:07:06,639 --> 00:07:08,880
does not need the same uh responsiveness

203
00:07:08,880 --> 00:07:09,680
the same

204
00:07:09,680 --> 00:07:12,080
ability to to be running fast rather

205
00:07:12,080 --> 00:07:13,680
than a full-blown application

206
00:07:13,680 --> 00:07:15,440
they're not gonna be processed at the

207
00:07:15,440 --> 00:07:17,440
same way because the needs are not the

208
00:07:17,440 --> 00:07:18,479
same

209
00:07:18,479 --> 00:07:22,639
exactly and we have another agent

210
00:07:22,639 --> 00:07:25,840
which is important which is upload

211
00:07:25,840 --> 00:07:27,759
agents this one is responsible to

212
00:07:27,759 --> 00:07:29,120
monitor

213
00:07:29,120 --> 00:07:31,759
every process to be notified that this

214
00:07:31,759 --> 00:07:34,000
process is using that file etc

215
00:07:34,000 --> 00:07:36,240
and actually from all this information

216
00:07:36,240 --> 00:07:38,080
provided is making statistics

217
00:07:38,080 --> 00:07:41,280
with a map of change process

218
00:07:41,280 --> 00:07:44,720
to define pattern of use from a memory

219
00:07:44,720 --> 00:07:46,400
point of view

220
00:07:46,400 --> 00:07:48,879
of a given process but approach is very

221
00:07:48,879 --> 00:07:49,520
focused

222
00:07:49,520 --> 00:07:52,240
on every process it is not a global view

223
00:07:52,240 --> 00:07:54,000
if we want to deal with

224
00:07:54,000 --> 00:07:57,039
agents with a bigger

225
00:07:57,039 --> 00:07:59,919
view we've got a robust performance

226
00:07:59,919 --> 00:08:02,319
agent a grp for short

227
00:08:02,319 --> 00:08:05,360
this one uh issues the relevance of all

228
00:08:05,360 --> 00:08:07,280
the databases which are recalled

229
00:08:07,280 --> 00:08:09,360
actually it's not an overrange of the

230
00:08:09,360 --> 00:08:11,520
system yeah it calculates like a

231
00:08:11,520 --> 00:08:12,080
threshold

232
00:08:12,080 --> 00:08:15,120
to make a mark and calculates if a file

233
00:08:15,120 --> 00:08:16,240
is relevant or not

234
00:08:16,240 --> 00:08:18,319
yes actually let's suppose you have on

235
00:08:18,319 --> 00:08:20,720
the system software you are using during

236
00:08:20,720 --> 00:08:23,120
three days it makes sense as a fourth

237
00:08:23,120 --> 00:08:24,240
day that

238
00:08:24,240 --> 00:08:25,919
system is guessing that you are going to

239
00:08:25,919 --> 00:08:28,160
reuse it so it's going to pre-load it in

240
00:08:28,160 --> 00:08:28,879
memory

241
00:08:28,879 --> 00:08:30,080
so that when you are launching the

242
00:08:30,080 --> 00:08:32,000
software it's much faster but best

243
00:08:32,000 --> 00:08:32,719
because now

244
00:08:32,719 --> 00:08:35,120
after three days of intensive use you

245
00:08:35,120 --> 00:08:37,679
are no more using that software anymore

246
00:08:37,679 --> 00:08:40,479
after one week or two weeks super fetch

247
00:08:40,479 --> 00:08:40,880
and

248
00:08:40,880 --> 00:08:43,200
ruby's performance agents is about to

249
00:08:43,200 --> 00:08:44,800
guess that this software is no more

250
00:08:44,800 --> 00:08:46,640
relevant to be prolonged in memory

251
00:08:46,640 --> 00:08:48,160
that's why we should remove it from the

252
00:08:48,160 --> 00:08:49,440
travel list

253
00:08:49,440 --> 00:08:52,399
so this is it's for another agent which

254
00:08:52,399 --> 00:08:53,600
is very central

255
00:08:53,600 --> 00:08:56,480
and which has not really defined goal

256
00:08:56,480 --> 00:08:57,600
except supporting

257
00:08:57,600 --> 00:09:00,320
other agent is global legend this one is

258
00:09:00,320 --> 00:09:02,160
very important because you manage a lot

259
00:09:02,160 --> 00:09:03,600
of things like histories

260
00:09:03,600 --> 00:09:05,600
histories it's a collection of scenarios

261
00:09:05,600 --> 00:09:08,080
5 and scenarios 5 for short this is the

262
00:09:08,080 --> 00:09:08,480
way

263
00:09:08,480 --> 00:09:10,240
that super fetch is predicting which

264
00:09:10,240 --> 00:09:11,519
patch could be used by

265
00:09:11,519 --> 00:09:14,880
a given process uh etc

266
00:09:14,880 --> 00:09:17,760
so scenario are very uh central yes

267
00:09:17,760 --> 00:09:18,800
they're really important

268
00:09:18,800 --> 00:09:21,920
to the heart of actually yes and it

269
00:09:21,920 --> 00:09:22,640
defines

270
00:09:22,640 --> 00:09:24,959
phase per day so this is a service which

271
00:09:24,959 --> 00:09:26,320
tries to know

272
00:09:26,320 --> 00:09:29,600
how you live with your computer when the

273
00:09:29,600 --> 00:09:30,480
morning starts

274
00:09:30,480 --> 00:09:32,640
yeah what are the schedules for the

275
00:09:32,640 --> 00:09:34,720
night yeah for you for your

276
00:09:34,720 --> 00:09:37,760
for your use and he is able to check uh

277
00:09:37,760 --> 00:09:40,640
to guess that if you are in a working

278
00:09:40,640 --> 00:09:41,839
day you are supposed to

279
00:09:41,839 --> 00:09:43,519
to use that software but the weekend

280
00:09:43,519 --> 00:09:45,440
maybe you are using video games or stuff

281
00:09:45,440 --> 00:09:45,920
like that

282
00:09:45,920 --> 00:09:48,800
so that is going to change for saturday

283
00:09:48,800 --> 00:09:49,760
and sunday

284
00:09:49,760 --> 00:09:51,600
how you are going to use your computer

285
00:09:51,600 --> 00:09:52,880
so that can pre-load

286
00:09:52,880 --> 00:09:55,279
what makes sense for you during weekends

287
00:09:55,279 --> 00:09:56,000
or

288
00:09:56,000 --> 00:09:59,279
during morning or evening so this is

289
00:09:59,279 --> 00:10:02,839
an engine which knows you very very

290
00:10:02,839 --> 00:10:06,079
efficiently reusing approach

291
00:10:06,079 --> 00:10:08,560
this hr test to side more than just

292
00:10:08,560 --> 00:10:09,279
statistics

293
00:10:09,279 --> 00:10:11,120
is the agent responsible to pre-load in

294
00:10:11,120 --> 00:10:13,279
memory for short making the page

295
00:10:13,279 --> 00:10:15,760
resistant dialysis

296
00:10:15,760 --> 00:10:19,519
so that's for all the energy pictures of

297
00:10:19,519 --> 00:10:21,760
the different agents but agents have for

298
00:10:21,760 --> 00:10:22,959
all of them different

299
00:10:22,959 --> 00:10:25,600
tasks um the professional team for for

300
00:10:25,600 --> 00:10:26,959
sure which is a part of the system

301
00:10:26,959 --> 00:10:28,160
collecting

302
00:10:28,160 --> 00:10:32,399
statistics making predictions yeah

303
00:10:32,399 --> 00:10:34,160
non-stop jobs but there is also

304
00:10:34,160 --> 00:10:35,839
different jobs one is about

305
00:10:35,839 --> 00:10:39,839
saving makes periodic sales

306
00:10:39,839 --> 00:10:41,600
if you are going to check on internet

307
00:10:41,600 --> 00:10:43,200
you can read sometimes that

308
00:10:43,200 --> 00:10:46,160
these sales are performed every three

309
00:10:46,160 --> 00:10:47,040
days

310
00:10:47,040 --> 00:10:49,200
agree it's thickness because all the

311
00:10:49,200 --> 00:10:50,959
safe depends on the type of

312
00:10:50,959 --> 00:10:54,959
data stream date user activity etc

313
00:10:54,959 --> 00:10:57,120
it depends if it's registry database

314
00:10:57,120 --> 00:10:58,800
poster file etc

315
00:10:58,800 --> 00:11:01,760
and it can be controlled by registry

316
00:11:01,760 --> 00:11:02,800
values

317
00:11:02,800 --> 00:11:05,120
so it's far to be accurate to say it's

318
00:11:05,120 --> 00:11:06,480
every three days

319
00:11:06,480 --> 00:11:09,360
another task which is relevant is idle

320
00:11:09,360 --> 00:11:09,839
task

321
00:11:09,839 --> 00:11:13,600
it means under specific circumstances

322
00:11:13,600 --> 00:11:16,800
low cpus blue memory use consumption

323
00:11:16,800 --> 00:11:19,760
disk used as well yeah and when your

324
00:11:19,760 --> 00:11:21,600
computer is about to do nothing

325
00:11:21,600 --> 00:11:24,800
superfetch is taking the hand to

326
00:11:24,800 --> 00:11:28,000
perform highly resource

327
00:11:28,000 --> 00:11:30,560
consumption tasks like updating optimal

328
00:11:30,560 --> 00:11:31,680
layout making

329
00:11:31,680 --> 00:11:35,360
a math making a different notation

330
00:11:35,360 --> 00:11:38,720
of a regular hard drive so this is very

331
00:11:38,720 --> 00:11:40,800
interesting task resistance

332
00:11:40,800 --> 00:11:44,160
only performed if it's power supplied

333
00:11:44,160 --> 00:11:46,240
for your computer which means that if

334
00:11:46,240 --> 00:11:47,920
you're on a laptop

335
00:11:47,920 --> 00:11:49,920
because this is a highly resource

336
00:11:49,920 --> 00:11:52,480
consuming task

337
00:11:52,480 --> 00:11:55,519
windows don't doesn't want to decrease

338
00:11:55,519 --> 00:11:56,480
the performance

339
00:11:56,480 --> 00:11:58,959
of the autonomy of your laptop so that's

340
00:11:58,959 --> 00:12:00,399
why if it's power supplied

341
00:12:00,399 --> 00:12:02,720
only all this either task can be

342
00:12:02,720 --> 00:12:03,440
performed

343
00:12:03,440 --> 00:12:06,399
another fact which can be fun in a way

344
00:12:06,399 --> 00:12:08,000
is that super fetch is using more than

345
00:12:08,000 --> 00:12:09,839
22

346
00:12:09,839 --> 00:12:13,279
keys and values to make communication

347
00:12:13,279 --> 00:12:16,079
or synchronization with the driver which

348
00:12:16,079 --> 00:12:17,279
is supplying it

349
00:12:17,279 --> 00:12:20,160
a lot of information which is a finer

350
00:12:20,160 --> 00:12:21,040
phone

351
00:12:21,040 --> 00:12:22,720
this keys can be used to change data

352
00:12:22,720 --> 00:12:24,480
buffer strings

353
00:12:24,480 --> 00:12:26,560
or just for synchronization creating a

354
00:12:26,560 --> 00:12:27,680
one value

355
00:12:27,680 --> 00:12:29,760
deleting the value right after so this

356
00:12:29,760 --> 00:12:32,000
is not the usual way of communicating

357
00:12:32,000 --> 00:12:34,000
with drivers so that's a bit fun

358
00:12:34,000 --> 00:12:35,440
maybe it could be due to virtual

359
00:12:35,440 --> 00:12:37,040
competition we don't really know

360
00:12:37,040 --> 00:12:39,920
but it was kind of surprising yes but

361
00:12:39,920 --> 00:12:40,720
yeah yeah so

362
00:12:40,720 --> 00:12:42,959
that's true another thing is that

363
00:12:42,959 --> 00:12:44,079
superfresh has

364
00:12:44,079 --> 00:12:46,720
five different types of database from

365
00:12:46,720 --> 00:12:48,079
all different agents

366
00:12:48,079 --> 00:12:50,240
collecting different information even if

367
00:12:50,240 --> 00:12:52,079
this is different information in their

368
00:12:52,079 --> 00:12:52,560
shape

369
00:12:52,560 --> 00:12:55,200
in their data they are all stored in

370
00:12:55,200 --> 00:12:58,079
files which are the same format

371
00:12:58,079 --> 00:13:01,760
technically speaking superfetch in this

372
00:13:01,760 --> 00:13:02,480
main service

373
00:13:02,480 --> 00:13:04,800
using a set of internal functions sort

374
00:13:04,800 --> 00:13:06,160
of internet api

375
00:13:06,160 --> 00:13:08,480
if you want which are collecting from

376
00:13:08,480 --> 00:13:11,440
different information

377
00:13:11,440 --> 00:13:13,200
processing all these information so that

378
00:13:13,200 --> 00:13:14,560
they can be saved in the

379
00:13:14,560 --> 00:13:17,279
same shape of file and the same format

380
00:13:17,279 --> 00:13:18,480
of database

381
00:13:18,480 --> 00:13:21,760
so on these pictures we made the links

382
00:13:21,760 --> 00:13:22,639
between the different

383
00:13:22,639 --> 00:13:25,600
internal functions which are used to to

384
00:13:25,600 --> 00:13:26,480
perform all the

385
00:13:26,480 --> 00:13:29,279
all this stuff this leads us to another

386
00:13:29,279 --> 00:13:31,360
pillar of superfetch which are

387
00:13:31,360 --> 00:13:34,480
its professionalized it includes the tb

388
00:13:34,480 --> 00:13:37,200
and the dot pfis and the first thing you

389
00:13:37,200 --> 00:13:38,320
need to know about them

390
00:13:38,320 --> 00:13:40,800
is that they're almost all compressed

391
00:13:40,800 --> 00:13:42,800
within the documented function

392
00:13:42,800 --> 00:13:46,240
rtl compress buffer and with the express

393
00:13:46,240 --> 00:13:48,320
huffman algorithm but it was not always

394
00:13:48,320 --> 00:13:49,880
the case and it used to be

395
00:13:49,880 --> 00:13:52,240
lznt1 so it might as well change from

396
00:13:52,240 --> 00:13:53,199
the future

397
00:13:53,199 --> 00:13:55,680
let's first focus on the database files

398
00:13:55,680 --> 00:13:56,480
they are the

399
00:13:56,480 --> 00:13:58,880
db and they are related to the agent's

400
00:13:58,880 --> 00:13:59,839
activities

401
00:13:59,839 --> 00:14:02,240
actually they are the way for superfetch

402
00:14:02,240 --> 00:14:04,800
to rebuild the internal database for the

403
00:14:04,800 --> 00:14:05,600
agents

404
00:14:05,600 --> 00:14:08,240
so when agents might have more than one

405
00:14:08,240 --> 00:14:09,680
db associated

406
00:14:09,680 --> 00:14:11,920
since one agent might need more than one

407
00:14:11,920 --> 00:14:12,800
db

408
00:14:12,800 --> 00:14:16,240
for its internal operation please

409
00:14:16,240 --> 00:14:18,959
note they are not always present on the

410
00:14:18,959 --> 00:14:21,040
directory which makes their reading much

411
00:14:21,040 --> 00:14:22,000
more complicated

412
00:14:22,000 --> 00:14:24,000
and this might also explain why their

413
00:14:24,000 --> 00:14:26,480
format was not documented so far

414
00:14:26,480 --> 00:14:28,399
their name hasn't been explained as well

415
00:14:28,399 --> 00:14:29,519
so here is a list

416
00:14:29,519 --> 00:14:32,560
of what we could come up with and so

417
00:14:32,560 --> 00:14:33,279
we've got

418
00:14:33,279 --> 00:14:36,560
the hdcx which is followed by

419
00:14:36,560 --> 00:14:39,360
a huge number actually this number

420
00:14:39,360 --> 00:14:41,120
corresponds to the seed of a user you

421
00:14:41,120 --> 00:14:42,320
have on your machine

422
00:14:42,320 --> 00:14:44,079
so you may have more than one if you

423
00:14:44,079 --> 00:14:45,839
have a multi-user machine

424
00:14:45,839 --> 00:14:49,279
you have also um the aggl5 which is

425
00:14:49,279 --> 00:14:50,240
followed by

426
00:14:50,240 --> 00:14:53,279
some abbreviation you have the fg which

427
00:14:53,279 --> 00:14:55,199
refers to foreground application

428
00:14:55,199 --> 00:14:57,680
as we say they do matter to know where

429
00:14:57,680 --> 00:14:58,240
the

430
00:14:58,240 --> 00:15:01,360
hub come from you also have the uad

431
00:15:01,360 --> 00:15:04,079
which actually might refer to user

432
00:15:04,079 --> 00:15:05,120
active days

433
00:15:05,120 --> 00:15:07,360
but unfortunately we do not have a means

434
00:15:07,360 --> 00:15:08,320
to check that

435
00:15:08,320 --> 00:15:11,680
so this is only an assumption um

436
00:15:11,680 --> 00:15:14,160
so as we have seen previously all the

437
00:15:14,160 --> 00:15:16,800
databases are connected to each other

438
00:15:16,800 --> 00:15:18,880
and so they follow the same reading

439
00:15:18,880 --> 00:15:21,519
process for each file in orange on the

440
00:15:21,519 --> 00:15:22,320
screen

441
00:15:22,320 --> 00:15:24,720
the reading process is divided into

442
00:15:24,720 --> 00:15:26,959
three steps the first step if

443
00:15:26,959 --> 00:15:30,240
is if part getting the view of the file

444
00:15:30,240 --> 00:15:31,920
decompress the buffer

445
00:15:31,920 --> 00:15:34,360
then you've got the initial

446
00:15:34,360 --> 00:15:35,519
initialization

447
00:15:35,519 --> 00:15:38,720
of the internal database in dark glue

448
00:15:38,720 --> 00:15:41,120
and after that you filter that super

449
00:15:41,120 --> 00:15:42,800
patch builds the database

450
00:15:42,800 --> 00:15:45,040
with the information contained into the

451
00:15:45,040 --> 00:15:46,320
file

452
00:15:46,320 --> 00:15:49,839
regarding the database itself

453
00:15:49,839 --> 00:15:51,600
when you open it you first see the

454
00:15:51,600 --> 00:15:53,120
compressed format

455
00:15:53,120 --> 00:15:56,000
so this is a buffer with a magic number

456
00:15:56,000 --> 00:15:57,279
specific to

457
00:15:57,279 --> 00:15:59,600
super fetch files and then the

458
00:15:59,600 --> 00:16:01,199
decompressed size and then checks them

459
00:16:01,199 --> 00:16:03,600
to make sure there is no data corruption

460
00:16:03,600 --> 00:16:05,600
when you decompress the referee you have

461
00:16:05,600 --> 00:16:07,279
many informations

462
00:16:07,279 --> 00:16:09,600
among them the most important are the

463
00:16:09,600 --> 00:16:11,759
header size because the error size

464
00:16:11,759 --> 00:16:15,440
is useful to calculate um offset within

465
00:16:15,440 --> 00:16:16,560
the files so

466
00:16:16,560 --> 00:16:19,199
without them the offset calculation do

467
00:16:19,199 --> 00:16:19,839
not

468
00:16:19,839 --> 00:16:21,839
mean anything and you've got the

469
00:16:21,839 --> 00:16:24,399
database parameter 5 type

470
00:16:24,399 --> 00:16:28,320
sysname has an internal table of 16

471
00:16:28,320 --> 00:16:31,360
sets of 8 numbers which are the

472
00:16:31,360 --> 00:16:32,560
parameters

473
00:16:32,560 --> 00:16:35,920
the file parameter 5 type shows actually

474
00:16:35,920 --> 00:16:36,639
the index

475
00:16:36,639 --> 00:16:38,240
into this table to find the

476
00:16:38,240 --> 00:16:40,000
corresponding parameters

477
00:16:40,000 --> 00:16:42,959
and those parameters have two major uses

478
00:16:42,959 --> 00:16:44,160
the first one is

479
00:16:44,160 --> 00:16:46,480
offset calculation within the five and

480
00:16:46,480 --> 00:16:47,360
the second one

481
00:16:47,360 --> 00:16:50,000
is setting some sizes into the internal

482
00:16:50,000 --> 00:16:52,399
database corresponding

483
00:16:52,399 --> 00:16:55,680
so um the

484
00:16:55,680 --> 00:16:58,320
the details of the calculation between

485
00:16:58,320 --> 00:16:59,839
the files

486
00:16:59,839 --> 00:17:02,800
are just in here the problem paragram

487
00:17:02,800 --> 00:17:03,199
one

488
00:17:03,199 --> 00:17:05,359
is useful to calculate the beginning of

489
00:17:05,359 --> 00:17:06,319
string one

490
00:17:06,319 --> 00:17:08,640
from the end of the header and similarly

491
00:17:08,640 --> 00:17:09,439
the part two

492
00:17:09,439 --> 00:17:11,760
is useful to calculate the beginning of

493
00:17:11,760 --> 00:17:12,640
string two

494
00:17:12,640 --> 00:17:15,839
from the end of string one so from all

495
00:17:15,839 --> 00:17:16,400
the

496
00:17:16,400 --> 00:17:19,679
from all that are stored uh in this

497
00:17:19,679 --> 00:17:23,760
db5 uh as well to create

498
00:17:23,760 --> 00:17:27,439
something much more involved like senior

499
00:17:27,439 --> 00:17:29,440
fights so from all the data collected

500
00:17:29,440 --> 00:17:31,760
from the system is going to create a

501
00:17:31,760 --> 00:17:32,720
process here

502
00:17:32,720 --> 00:17:34,559
process all this information so that he

503
00:17:34,559 --> 00:17:35,760
is able to make quests

504
00:17:35,760 --> 00:17:37,520
of what should be prolonged what is

505
00:17:37,520 --> 00:17:39,440
using what is used by

506
00:17:39,440 --> 00:17:42,480
this process etc to do so

507
00:17:42,480 --> 00:17:44,080
he is going to create scenario files

508
00:17:44,080 --> 00:17:46,080
scenario files are all

509
00:17:46,080 --> 00:17:48,320
have always the same shape or the same

510
00:17:48,320 --> 00:17:49,120
shape of name

511
00:17:49,120 --> 00:17:50,960
first they are stored in c windows

512
00:17:50,960 --> 00:17:52,799
prefetch directory and then this is

513
00:17:52,799 --> 00:17:55,440
always the name of the app.exe

514
00:17:55,440 --> 00:17:59,360
dash adjs and pf extension actually

515
00:17:59,360 --> 00:18:02,240
there are tracks of an application and

516
00:18:02,240 --> 00:18:03,280
one application

517
00:18:03,280 --> 00:18:05,520
can have one or more scenario files

518
00:18:05,520 --> 00:18:07,280
depending on the context

519
00:18:07,280 --> 00:18:09,840
of the execution of the given

520
00:18:09,840 --> 00:18:11,440
application

521
00:18:11,440 --> 00:18:14,480
one interesting thing is that

522
00:18:14,480 --> 00:18:17,679
this directory and this size especially

523
00:18:17,679 --> 00:18:20,960
are ruled by a

524
00:18:20,960 --> 00:18:23,280
key in the registry and especially if i

525
00:18:23,280 --> 00:18:24,880
use in that key

526
00:18:24,880 --> 00:18:27,360
among the values which are present in

527
00:18:27,360 --> 00:18:29,200
that key which is software microsoft

528
00:18:29,200 --> 00:18:31,679
windows nt current version prefetcher

529
00:18:31,679 --> 00:18:34,720
there is a max prefetch files key

530
00:18:34,720 --> 00:18:38,160
which is by default set to 256th

531
00:18:38,160 --> 00:18:39,840
and which corresponds to maximum number

532
00:18:39,840 --> 00:18:41,520
of scenarios files which are stored on

533
00:18:41,520 --> 00:18:44,160
the disk and for each file there is a

534
00:18:44,160 --> 00:18:46,160
key which is max prefetch byte size

535
00:18:46,160 --> 00:18:47,440
which gives us

536
00:18:47,440 --> 00:18:51,280
the maximum size and bytes of a file

537
00:18:51,280 --> 00:18:53,520
so this is a way by multiplying the two

538
00:18:53,520 --> 00:18:55,520
values to know the maximum size

539
00:18:55,520 --> 00:18:57,840
that superflash can use for scenario

540
00:18:57,840 --> 00:18:59,200
files

541
00:18:59,200 --> 00:19:02,400
so once we know that how i manage our

542
00:19:02,400 --> 00:19:03,440
scenario files

543
00:19:03,440 --> 00:19:06,320
we can try to understand how they

544
00:19:06,320 --> 00:19:08,160
interact with superfash

545
00:19:08,160 --> 00:19:09,520
let's suppose that the program is

546
00:19:09,520 --> 00:19:11,120
launched so it means that process is

547
00:19:11,120 --> 00:19:12,320
created and

548
00:19:12,320 --> 00:19:14,400
in a way or another there is a

549
00:19:14,400 --> 00:19:15,440
notification

550
00:19:15,440 --> 00:19:18,000
uh performed by the operating system

551
00:19:18,000 --> 00:19:20,320
final four if you want

552
00:19:20,320 --> 00:19:24,320
to explain to super fetch service

553
00:19:24,320 --> 00:19:26,320
to transfer this information that a new

554
00:19:26,320 --> 00:19:28,160
process is created

555
00:19:28,160 --> 00:19:31,360
from that process creative superfetch is

556
00:19:31,360 --> 00:19:33,760
going to check if it exists for this

557
00:19:33,760 --> 00:19:36,880
process scenario or not how is it

558
00:19:36,880 --> 00:19:37,600
possible

559
00:19:37,600 --> 00:19:40,160
simply by just requesting if the file

560
00:19:40,160 --> 00:19:41,440
already exists or not

561
00:19:41,440 --> 00:19:44,480
so it needs to know in which context has

562
00:19:44,480 --> 00:19:45,440
been launched first

563
00:19:45,440 --> 00:19:47,200
super fetch is notified with the full

564
00:19:47,200 --> 00:19:49,039
application path and in addition

565
00:19:49,039 --> 00:19:51,120
parameters provided to that application

566
00:19:51,120 --> 00:19:54,080
for instance you have a command line

567
00:19:54,080 --> 00:19:55,760
like

568
00:19:55,760 --> 00:19:58,559
a different the different yes different

569
00:19:58,559 --> 00:20:01,760
and you can add the parameters like

570
00:20:01,760 --> 00:20:05,039
dash s dash b stuff like that so all

571
00:20:05,039 --> 00:20:06,000
these parameters

572
00:20:06,000 --> 00:20:09,039
are provided to to super fetch so that

573
00:20:09,039 --> 00:20:11,440
is a long string

574
00:20:11,440 --> 00:20:14,480
from this long string there is a sort of

575
00:20:14,480 --> 00:20:17,120
patch function actually this is far from

576
00:20:17,120 --> 00:20:18,080
being

577
00:20:18,080 --> 00:20:21,200
a cryptographically secures a

578
00:20:21,200 --> 00:20:23,200
harsh function it's much more like

579
00:20:23,200 --> 00:20:25,039
homemade

580
00:20:25,039 --> 00:20:26,640
hash functions so it's just a linear

581
00:20:26,640 --> 00:20:29,120
transform of every characters

582
00:20:29,120 --> 00:20:30,960
interesting on windows 10 version we

583
00:20:30,960 --> 00:20:33,039
have reversed this is based on the

584
00:20:33,039 --> 00:20:34,000
string constant which

585
00:20:34,000 --> 00:20:37,240
is pi constant which is 3 dot

586
00:20:37,240 --> 00:20:40,640
1459 etc and so

587
00:20:40,640 --> 00:20:42,320
this is interesting but it doesn't

588
00:20:42,320 --> 00:20:44,240
correspond to

589
00:20:44,240 --> 00:20:46,080
older version of windows so from time to

590
00:20:46,080 --> 00:20:47,840
time this algorithm has changed yeah

591
00:20:47,840 --> 00:20:49,679
there were some modular some other

592
00:20:49,679 --> 00:20:51,679
operation or some difference

593
00:20:51,679 --> 00:20:55,440
depending on the value of the seat etc

594
00:20:55,440 --> 00:20:59,039
so what is happening when

595
00:20:59,039 --> 00:21:01,520
there is no file actually superflash is

596
00:21:01,520 --> 00:21:03,600
able to create a new file if there is no

597
00:21:03,600 --> 00:21:03,919
one

598
00:21:03,919 --> 00:21:06,080
uh created for event scenarios but if

599
00:21:06,080 --> 00:21:07,760
there is one super fetch is about to

600
00:21:07,760 --> 00:21:09,440
read information actually it is only

601
00:21:09,440 --> 00:21:11,039
relevant information from him

602
00:21:11,039 --> 00:21:14,159
for for him in that file

603
00:21:14,159 --> 00:21:17,919
um and then uh taking into account uh

604
00:21:17,919 --> 00:21:20,240
we have access to scenario we need to

605
00:21:20,240 --> 00:21:21,360
know uh

606
00:21:21,360 --> 00:21:24,000
how to provide new information because

607
00:21:24,000 --> 00:21:25,280
your process is running

608
00:21:25,280 --> 00:21:27,760
and systems running things can happen

609
00:21:27,760 --> 00:21:29,120
and all this

610
00:21:29,120 --> 00:21:32,640
activity can be monitored to

611
00:21:32,640 --> 00:21:36,240
enrich the content of a scenario today

612
00:21:36,240 --> 00:21:39,840
to update this is done via

613
00:21:39,840 --> 00:21:42,960
the camera component which is final four

614
00:21:42,960 --> 00:21:44,080
which is a

615
00:21:44,080 --> 00:21:47,200
file minifilter driver

616
00:21:47,200 --> 00:21:50,000
which is the evolution of a legacy

617
00:21:50,000 --> 00:21:52,320
filter or driver for fine

618
00:21:52,320 --> 00:21:54,559
its main job of his driver is to provide

619
00:21:54,559 --> 00:21:56,000
them an information

620
00:21:56,000 --> 00:21:58,320
mostly read write on name change

621
00:21:58,320 --> 00:21:59,039
progressions

622
00:21:59,039 --> 00:22:01,840
like that locations about different

623
00:22:01,840 --> 00:22:02,640
files

624
00:22:02,640 --> 00:22:06,080
touched by all the process of the system

625
00:22:06,080 --> 00:22:09,520
so how is it possible for the shape of

626
00:22:09,520 --> 00:22:10,320
simplicity

627
00:22:10,320 --> 00:22:11,679
[Music]

628
00:22:11,679 --> 00:22:13,680
we can explain that um

629
00:22:13,680 --> 00:22:15,200
[Music]

630
00:22:15,200 --> 00:22:17,200
in the minifigure driver technology you

631
00:22:17,200 --> 00:22:18,320
can add context

632
00:22:18,320 --> 00:22:20,720
to each file for when you create when

633
00:22:20,720 --> 00:22:21,360
you have a

634
00:22:21,360 --> 00:22:23,600
create notification of a file or access

635
00:22:23,600 --> 00:22:24,480
a file for

636
00:22:24,480 --> 00:22:26,960
if you prefer if you prefer or removing

637
00:22:26,960 --> 00:22:28,000
the context when

638
00:22:28,000 --> 00:22:30,159
the file is normal so that when there is

639
00:22:30,159 --> 00:22:32,159
a read or write operation

640
00:22:32,159 --> 00:22:34,320
the context is used to know that this is

641
00:22:34,320 --> 00:22:36,720
that file uh which is targeted

642
00:22:36,720 --> 00:22:39,600
and doing that this driver is allowed to

643
00:22:39,600 --> 00:22:40,000
record

644
00:22:40,000 --> 00:22:41,440
which part of the file has been read

645
00:22:41,440 --> 00:22:43,440
which part of the file has been written

646
00:22:43,440 --> 00:22:45,440
so this is a lot of very relevant

647
00:22:45,440 --> 00:22:46,960
information that's perfection of

648
00:22:46,960 --> 00:22:49,120
what should be loaded from file not the

649
00:22:49,120 --> 00:22:50,559
full file but maybe some

650
00:22:50,559 --> 00:22:53,600
relevant part of the file so it's really

651
00:22:53,600 --> 00:22:54,240
makes sense

652
00:22:54,240 --> 00:22:56,080
and from all this information from time

653
00:22:56,080 --> 00:22:58,799
to time final floor is going

654
00:22:58,799 --> 00:23:01,360
to give back all this information to the

655
00:23:01,360 --> 00:23:02,640
six main services

656
00:23:02,640 --> 00:23:05,919
and uh checking from uh

657
00:23:05,919 --> 00:23:08,559
windows public device symbols this

658
00:23:08,559 --> 00:23:10,480
buffer is called nl buffer

659
00:23:10,480 --> 00:23:13,200
yeah unfortunately we do not really know

660
00:23:13,200 --> 00:23:15,520
what does it mean but we can assume it's

661
00:23:15,520 --> 00:23:17,520
normalized something yeah and it should

662
00:23:17,520 --> 00:23:22,080
be phone normalized yes

663
00:23:22,080 --> 00:23:24,159
scenario files actually all this data is

664
00:23:24,159 --> 00:23:26,159
processed to be stored in scenario file

665
00:23:26,159 --> 00:23:26,480
which

666
00:23:26,480 --> 00:23:29,440
uh owns by pfc fixes explaining actually

667
00:23:29,440 --> 00:23:30,480
they are

668
00:23:30,480 --> 00:23:32,240
managed almost the same database so it

669
00:23:32,240 --> 00:23:33,679
means it's compressed

670
00:23:33,679 --> 00:23:35,760
and if you decompress them you have a

671
00:23:35,760 --> 00:23:37,360
lot of relevant information

672
00:23:37,360 --> 00:23:40,400
os version prefetching materials and

673
00:23:40,400 --> 00:23:42,000
you've got the name of the application

674
00:23:42,000 --> 00:23:44,080
in our example we have decided to use

675
00:23:44,080 --> 00:23:46,960
vlc which is a media movie player

676
00:23:46,960 --> 00:23:52,080
and so that's why it's written vlc.exe

677
00:23:52,080 --> 00:23:54,559
we have a lot of information which are

678
00:23:54,559 --> 00:23:55,440
relevant one

679
00:23:55,440 --> 00:23:57,520
which is very relevant from a forensic

680
00:23:57,520 --> 00:23:59,919
point of view is the last date

681
00:23:59,919 --> 00:24:02,159
when this software has been used so that

682
00:24:02,159 --> 00:24:03,039
we can know

683
00:24:03,039 --> 00:24:05,120
exactly when you are using your software

684
00:24:05,120 --> 00:24:06,320
morning evening

685
00:24:06,320 --> 00:24:08,960
or which day the frequency you are using

686
00:24:08,960 --> 00:24:09,440
it

687
00:24:09,440 --> 00:24:11,440
so it might be interesting yeah also

688
00:24:11,440 --> 00:24:13,039
what you have done yesterday and the day

689
00:24:13,039 --> 00:24:13,600
before

690
00:24:13,600 --> 00:24:15,360
and all of the stuff so all your

691
00:24:15,360 --> 00:24:17,039
schedule actually yes this is very good

692
00:24:17,039 --> 00:24:19,279
to spy on you

693
00:24:19,279 --> 00:24:21,760
well uh you have also the number of

694
00:24:21,760 --> 00:24:24,559
times executing but more interesting

695
00:24:24,559 --> 00:24:27,360
you have a file which has been touched

696
00:24:27,360 --> 00:24:27,840
by

697
00:24:27,840 --> 00:24:30,799
uh your application there is different

698
00:24:30,799 --> 00:24:32,080
rules to be recorded

699
00:24:32,080 --> 00:24:33,760
in the scenario files because not all

700
00:24:33,760 --> 00:24:35,520
files are recorded first because it's

701
00:24:35,520 --> 00:24:36,159
for

702
00:24:36,159 --> 00:24:40,240
the uh purposes of the speed of

703
00:24:40,240 --> 00:24:44,159
your computer um the executables lost

704
00:24:44,159 --> 00:24:46,559
every time they are dear so a lot of

705
00:24:46,559 --> 00:24:48,400
files recording scenario files

706
00:24:48,400 --> 00:24:51,120
are dlls of the given process but you've

707
00:24:51,120 --> 00:24:53,279
got also recent files such as personal

708
00:24:53,279 --> 00:24:53,760
file

709
00:24:53,760 --> 00:24:56,799
in okay this is a very

710
00:24:56,799 --> 00:25:00,320
famous movement that has been recorded

711
00:25:00,320 --> 00:25:02,000
directly in the scenario file so that we

712
00:25:02,000 --> 00:25:02,799
know exactly

713
00:25:02,799 --> 00:25:05,200
which movie you have watched and combine

714
00:25:05,200 --> 00:25:07,279
it with the information from firefox

715
00:25:07,279 --> 00:25:09,200
we know exactly which part has been read

716
00:25:09,200 --> 00:25:11,200
from that file so from that movie

717
00:25:11,200 --> 00:25:13,919
so it means that we can know which part

718
00:25:13,919 --> 00:25:14,799
do you prefer

719
00:25:14,799 --> 00:25:17,039
or have you finished to watch that movie

720
00:25:17,039 --> 00:25:18,720
etc so this is very

721
00:25:18,720 --> 00:25:20,880
relevant information about you but there

722
00:25:20,880 --> 00:25:22,880
is more and actually it works also with

723
00:25:22,880 --> 00:25:25,120
the songs the photos the text documents

724
00:25:25,120 --> 00:25:26,640
we also have the names of the

725
00:25:26,640 --> 00:25:27,760
directories

726
00:25:27,760 --> 00:25:29,840
the names of the files so it tells

727
00:25:29,840 --> 00:25:31,200
everything about you

728
00:25:31,200 --> 00:25:33,600
you also have the cache files and this

729
00:25:33,600 --> 00:25:34,720
is really specific

730
00:25:34,720 --> 00:25:37,279
because they are the result of the cache

731
00:25:37,279 --> 00:25:39,120
memory management you have the example

732
00:25:39,120 --> 00:25:41,520
of the reference to the directory of the

733
00:25:41,520 --> 00:25:42,400
cache

734
00:25:42,400 --> 00:25:44,480
the cache for the record is a memory

735
00:25:44,480 --> 00:25:45,520
management

736
00:25:45,520 --> 00:25:48,240
and that aims at storing pieces of data

737
00:25:48,240 --> 00:25:48,960
to reduce

738
00:25:48,960 --> 00:25:51,919
their access time later on it is also

739
00:25:51,919 --> 00:25:53,919
designed to do stream caching so this

740
00:25:53,919 --> 00:25:54,480
implies

741
00:25:54,480 --> 00:25:57,600
the data stored could be the contents of

742
00:25:57,600 --> 00:25:58,240
the file

743
00:25:58,240 --> 00:26:00,799
yeah and here is the proof with we have

744
00:26:00,799 --> 00:26:01,679
updates

745
00:26:01,679 --> 00:26:05,039
this is a top 60 document and the

746
00:26:05,039 --> 00:26:05,600
content

747
00:26:05,600 --> 00:26:09,520
of the document is written in clear text

748
00:26:09,520 --> 00:26:11,919
so this is a nice way to find your

749
00:26:11,919 --> 00:26:13,279
personal content

750
00:26:13,279 --> 00:26:16,480
from any text document actually super

751
00:26:16,480 --> 00:26:17,600
fetch does not have

752
00:26:17,600 --> 00:26:19,840
the content but it shows you the way to

753
00:26:19,840 --> 00:26:20,799
do so

754
00:26:20,799 --> 00:26:23,120
so let's sum up now you know what is

755
00:26:23,120 --> 00:26:23,840
this name

756
00:26:23,840 --> 00:26:26,000
and how it works you know which file you

757
00:26:26,000 --> 00:26:27,039
are using yeah

758
00:26:27,039 --> 00:26:29,440
and what it's interesting to extract

759
00:26:29,440 --> 00:26:31,520
from that the account of execution the

760
00:26:31,520 --> 00:26:32,720
dates the times

761
00:26:32,720 --> 00:26:36,000
the names of and locations of each five

762
00:26:36,000 --> 00:26:39,440
etc so from a forensic point of view

763
00:26:39,440 --> 00:26:42,240
this is a wonderful opportunity to track

764
00:26:42,240 --> 00:26:43,679
any user

765
00:26:43,679 --> 00:26:45,600
but it also means that you could be a

766
00:26:45,600 --> 00:26:47,679
victim of that so what if you want to

767
00:26:47,679 --> 00:26:49,679
protect yourself from it

768
00:26:49,679 --> 00:26:51,360
well it's our pleasure to announce you

769
00:26:51,360 --> 00:26:54,000
it's time to fool your os

770
00:26:54,000 --> 00:26:56,000
the first step to do that is to find a

771
00:26:56,000 --> 00:26:58,240
way to access to the data

772
00:26:58,240 --> 00:27:01,120
in 2010 nirsoft has released a tool

773
00:27:01,120 --> 00:27:01,679
named

774
00:27:01,679 --> 00:27:04,240
win professional that allows you to have

775
00:27:04,240 --> 00:27:05,120
an overview

776
00:27:05,120 --> 00:27:08,000
of the prefetch scenarios and you can

777
00:27:08,000 --> 00:27:10,960
see the details of each scenarios in it

778
00:27:10,960 --> 00:27:13,360
this is really user friendly and this is

779
00:27:13,360 --> 00:27:14,799
really useful to have this

780
00:27:14,799 --> 00:27:18,080
overview but when we used it we faced

781
00:27:18,080 --> 00:27:20,559
three problems the first one is the two

782
00:27:20,559 --> 00:27:21,760
disclose source

783
00:27:21,760 --> 00:27:24,000
so you don't really know how the data is

784
00:27:24,000 --> 00:27:24,799
processed

785
00:27:24,799 --> 00:27:26,320
and you cannot change if there is an

786
00:27:26,320 --> 00:27:28,240
update in supervision yeah

787
00:27:28,240 --> 00:27:31,039
so this was one of the major problem the

788
00:27:31,039 --> 00:27:31,679
other one

789
00:27:31,679 --> 00:27:34,320
is the information is only about the dog

790
00:27:34,320 --> 00:27:35,039
yet

791
00:27:35,039 --> 00:27:38,159
so even if the dogs do not reveal

792
00:27:38,159 --> 00:27:40,480
much about your habits such as the

793
00:27:40,480 --> 00:27:42,159
scenarios they do marry

794
00:27:42,159 --> 00:27:45,200
and this was something

795
00:27:45,200 --> 00:27:48,159
bothering us and last but not least you

796
00:27:48,159 --> 00:27:49,360
can't edit the data

797
00:27:49,360 --> 00:27:51,919
so it's really only software yeah there

798
00:27:51,919 --> 00:27:53,200
is no way to

799
00:27:53,200 --> 00:27:55,360
change uh whether the scenarios revealed

800
00:27:55,360 --> 00:27:57,919
about you etc and this was the goal

801
00:27:57,919 --> 00:28:00,000
so to solve these problems we have

802
00:28:00,000 --> 00:28:01,360
created our own

803
00:28:01,360 --> 00:28:04,880
tool in c that allows us to have the

804
00:28:04,880 --> 00:28:05,760
full control

805
00:28:05,760 --> 00:28:09,520
on any kind of prefetch spice you can

806
00:28:09,520 --> 00:28:12,000
compress decompress any buffer you can

807
00:28:12,000 --> 00:28:13,440
view the information

808
00:28:13,440 --> 00:28:16,080
and you can edit the information of

809
00:28:16,080 --> 00:28:17,679
course this is open source and you can

810
00:28:17,679 --> 00:28:19,760
also hash with the super fetch 10

811
00:28:19,760 --> 00:28:20,640
algorithm

812
00:28:20,640 --> 00:28:24,000
but what we are really interested in is

813
00:28:24,000 --> 00:28:27,279
fooding your os and through the system

814
00:28:27,279 --> 00:28:30,159
so the roadmap is pretty simple we will

815
00:28:30,159 --> 00:28:31,120
pick any

816
00:28:31,120 --> 00:28:34,000
program scenarios we will open its

817
00:28:34,000 --> 00:28:34,799
scenarios

818
00:28:34,799 --> 00:28:37,600
decompress it edit the information and

819
00:28:37,600 --> 00:28:38,399
then we will

820
00:28:38,399 --> 00:28:40,960
compress it save it and reintroduce it

821
00:28:40,960 --> 00:28:42,720
into the prefetch territory

822
00:28:42,720 --> 00:28:46,159
maybe so

823
00:28:46,159 --> 00:28:48,880
this is an example with porsche we

824
00:28:48,880 --> 00:28:50,640
execute

825
00:28:50,640 --> 00:28:53,840
once yeah we get the scenarios

826
00:28:53,840 --> 00:28:57,840
copy and paste it as well at the

827
00:28:57,840 --> 00:29:01,039
and that we open it with our tool so it

828
00:29:01,039 --> 00:29:02,000
offers you to

829
00:29:02,000 --> 00:29:05,679
decompress and view the information

830
00:29:05,679 --> 00:29:07,360
so we've got the information we talked

831
00:29:07,360 --> 00:29:09,120
about the count of execution and the

832
00:29:09,120 --> 00:29:09,840
date

833
00:29:09,840 --> 00:29:12,880
it's currently the 26th of june and it's

834
00:29:12,880 --> 00:29:16,320
9 32. so let's try to change

835
00:29:16,320 --> 00:29:20,240
this date okay so we opened the

836
00:29:20,240 --> 00:29:24,080
decompressed buffer we set the

837
00:29:24,080 --> 00:29:27,200
right offset and change the dates

838
00:29:27,200 --> 00:29:31,279
so let's say it's the 14th of may

839
00:29:31,279 --> 00:29:34,559
okay we save it we compress this we

840
00:29:34,559 --> 00:29:36,240
prefer so it could be

841
00:29:36,240 --> 00:29:39,279
reprocessed by us this main and we put

842
00:29:39,279 --> 00:29:40,640
it back into

843
00:29:40,640 --> 00:29:42,880
the prefetch directory with the original

844
00:29:42,880 --> 00:29:44,640
name so that it will erase

845
00:29:44,640 --> 00:29:47,520
the original file yeah and let's see how

846
00:29:47,520 --> 00:29:50,240
the os reacts

847
00:29:50,240 --> 00:29:55,039
put it back into the prefetch place it

848
00:29:55,039 --> 00:29:58,240
okay now let's launch once more the

849
00:29:58,240 --> 00:30:01,360
bar shell to see how the scenario

850
00:30:01,360 --> 00:30:07,199
goes so let's go to our shell

851
00:30:07,520 --> 00:30:10,960
up right

852
00:30:11,520 --> 00:30:14,640
and let's check what changed in portion

853
00:30:14,640 --> 00:30:16,000
scenario

854
00:30:16,000 --> 00:30:18,320
we could be invest elsewhere let's take

855
00:30:18,320 --> 00:30:19,200
last time we

856
00:30:19,200 --> 00:30:22,480
open it with our tool and let's see

857
00:30:22,480 --> 00:30:26,399
the information here it is you've got

858
00:30:26,399 --> 00:30:27,039
the date

859
00:30:27,039 --> 00:30:29,440
falsified and the os didn't realize it

860
00:30:29,440 --> 00:30:31,200
has been falsified

861
00:30:31,200 --> 00:30:34,559
so you can wipe any traces with that

862
00:30:34,559 --> 00:30:36,640
so we can full forensic tool based on

863
00:30:36,640 --> 00:30:37,600
super fashion yeah

864
00:30:37,600 --> 00:30:40,399
your os any forensic tool because um the

865
00:30:40,399 --> 00:30:41,039
us

866
00:30:41,039 --> 00:30:44,559
doesn't notice that so here is a way to

867
00:30:44,559 --> 00:30:45,919
protect yourself and

868
00:30:45,919 --> 00:30:48,480
food the os and trick everything but

869
00:30:48,480 --> 00:30:50,000
what if you want to completely

870
00:30:50,000 --> 00:30:52,000
prevent yourself from any assessment

871
00:30:52,000 --> 00:30:53,200
track well

872
00:30:53,200 --> 00:30:55,279
actually windows internals would advise

873
00:30:55,279 --> 00:30:57,919
you to edit the registry value called

874
00:30:57,919 --> 00:31:01,039
enable prefetcher and set it to xero but

875
00:31:01,039 --> 00:31:04,720
let us show you what we have seen

876
00:31:04,720 --> 00:31:07,600
okay so we open the registry and get to

877
00:31:07,600 --> 00:31:09,279
the values

878
00:31:09,279 --> 00:31:12,080
so normally the two values are set to

879
00:31:12,080 --> 00:31:12,640
three

880
00:31:12,640 --> 00:31:16,159
which means another yeah correctly

881
00:31:16,159 --> 00:31:18,000
so they are set to 3 when we launch

882
00:31:18,000 --> 00:31:19,679
notepad the scenario

883
00:31:19,679 --> 00:31:23,279
is written as usual

884
00:31:23,279 --> 00:31:26,159
so we are going to remove this value to

885
00:31:26,159 --> 00:31:26,799
0

886
00:31:26,799 --> 00:31:30,559
so that the service should be disabled

887
00:31:30,559 --> 00:31:33,039
let's reboot the system to make sure the

888
00:31:33,039 --> 00:31:36,640
chain has been taken into account

889
00:31:36,640 --> 00:31:38,559
so we have accelerated part because it's

890
00:31:38,559 --> 00:31:40,000
going to be visible yeah it's pretty

891
00:31:40,000 --> 00:31:42,240
long

892
00:31:43,279 --> 00:31:46,000
here we're back so first we are checking

893
00:31:46,000 --> 00:31:47,200
in the registry that

894
00:31:47,200 --> 00:31:50,080
the two values edited are still zero

895
00:31:50,080 --> 00:31:50,880
that's the case

896
00:31:50,880 --> 00:31:55,060
right going to prefetch directory

897
00:31:55,060 --> 00:31:58,159
[Music]

898
00:31:59,679 --> 00:32:01,760
and now we will try to relaunch notepad

899
00:32:01,760 --> 00:32:03,840
as we have just been doing before

900
00:32:03,840 --> 00:32:06,780
and see what happens

901
00:32:06,780 --> 00:32:08,880
[Music]

902
00:32:08,880 --> 00:32:12,240
the scenario is still um updated so

903
00:32:12,240 --> 00:32:14,720
it means system didn't work didn't stop

904
00:32:14,720 --> 00:32:16,559
actually

905
00:32:16,559 --> 00:32:19,360
yeah even with this value another

906
00:32:19,360 --> 00:32:20,000
example

907
00:32:20,000 --> 00:32:23,200
is the function from cis main and

908
00:32:23,200 --> 00:32:26,480
pf as the super checking interval and

909
00:32:26,480 --> 00:32:29,039
even though the name speaks for itself

910
00:32:29,039 --> 00:32:30,720
and let's see what the function

911
00:32:30,720 --> 00:32:33,200
is doing so it opens the registry key we

912
00:32:33,200 --> 00:32:35,919
have just in the enable to the patch

913
00:32:35,919 --> 00:32:38,960
and it uses the reg set value

914
00:32:38,960 --> 00:32:42,880
to set this registry value to three so

915
00:32:42,880 --> 00:32:44,880
it actually doesn't care about the

916
00:32:44,880 --> 00:32:46,480
initial value and at

917
00:32:46,480 --> 00:32:49,200
one moment in super fetch the enable

918
00:32:49,200 --> 00:32:50,640
super fetch value is gonna be

919
00:32:50,640 --> 00:32:53,120
three again so this value do not have

920
00:32:53,120 --> 00:32:54,080
any impact

921
00:32:54,080 --> 00:32:57,600
on system activities to be honest the

922
00:32:57,600 --> 00:32:59,440
solution is quite basic

923
00:32:59,440 --> 00:33:02,159
you can disable sysmain manually through

924
00:33:02,159 --> 00:33:03,600
the service control manager

925
00:33:03,600 --> 00:33:07,120
or any command line um but please keep

926
00:33:07,120 --> 00:33:07,840
in mind that

927
00:33:07,840 --> 00:33:10,559
it's gonna cost you performance because

928
00:33:10,559 --> 00:33:11,519
even though um

929
00:33:11,519 --> 00:33:14,559
system interacts you and knows you

930
00:33:14,559 --> 00:33:18,399
and your habits it gains performance

931
00:33:18,399 --> 00:33:21,279
actually it's like the first time you

932
00:33:21,279 --> 00:33:22,559
haven't started your operating system

933
00:33:22,559 --> 00:33:24,159
you see the same performances so it's

934
00:33:24,159 --> 00:33:24,799
not

935
00:33:24,799 --> 00:33:28,000
so slow but you don't

936
00:33:28,000 --> 00:33:30,080
get access to the improvement of

937
00:33:30,080 --> 00:33:31,760
performance provided by system

938
00:33:31,760 --> 00:33:33,679
to keep your privacy it's a bit like

939
00:33:33,679 --> 00:33:35,679
when you have a web browser and you want

940
00:33:35,679 --> 00:33:36,480
to

941
00:33:36,480 --> 00:33:38,559
use it in a prelight mode this is

942
00:33:38,559 --> 00:33:40,799
exactly the same actually but for your

943
00:33:40,799 --> 00:33:44,320
old operating system we really think we

944
00:33:44,320 --> 00:33:44,720
have

945
00:33:44,720 --> 00:33:46,720
contributed to the comprehension of

946
00:33:46,720 --> 00:33:47,840
systemate

947
00:33:47,840 --> 00:33:51,200
and we are glad to have built a tool

948
00:33:51,200 --> 00:33:51,600
that

949
00:33:51,600 --> 00:33:54,399
exploits these functionalities and would

950
00:33:54,399 --> 00:33:54,720
be

951
00:33:54,720 --> 00:33:57,919
more than happy to have your suggestion

952
00:33:57,919 --> 00:33:59,840
if you experience it on your own you can

953
00:33:59,840 --> 00:34:00,640
download it

954
00:34:00,640 --> 00:34:03,519
on our github and yeah and contribute if

955
00:34:03,519 --> 00:34:04,799
you have any suggestions

956
00:34:04,799 --> 00:34:07,360
it would be really welcomed we also

957
00:34:07,360 --> 00:34:09,359
think it would be really rewarding to

958
00:34:09,359 --> 00:34:11,520
go further on the interactions with the

959
00:34:11,520 --> 00:34:13,599
drivers such as spider phone

960
00:34:13,599 --> 00:34:16,320
and also dive further on the windows

961
00:34:16,320 --> 00:34:19,119
cache because it hasn't been explained

962
00:34:19,119 --> 00:34:21,440
a lot so who knows we might find more

963
00:34:21,440 --> 00:34:23,119
about your personal fine

964
00:34:23,119 --> 00:34:26,239
content thank you for attention and if

965
00:34:26,239 --> 00:34:34,239
you have any questions

966
00:34:34,239 --> 00:34:37,040
hi guys it's me again if you have any

967
00:34:37,040 --> 00:34:37,760
questions

968
00:34:37,760 --> 00:34:49,839
my pleasure to help you

969
00:34:56,159 --> 00:34:59,680
so we we have answered questions chat

970
00:34:59,680 --> 00:35:03,200
um notably if the github link will be

971
00:35:03,200 --> 00:35:04,400
provided so there will be

972
00:35:04,400 --> 00:35:07,760
it's present at the end of the slide

973
00:35:07,760 --> 00:35:10,079
but if someone need it we can maybe post

974
00:35:10,079 --> 00:35:13,599
it on the chat directly

975
00:35:14,480 --> 00:35:17,520
there was question about malware

976
00:35:17,520 --> 00:35:20,320
yes yes please

977
00:35:29,119 --> 00:35:30,880
so yeah there was question about malware

978
00:35:30,880 --> 00:35:32,880
detection yes actually superfast can be

979
00:35:32,880 --> 00:35:33,680
used to to

980
00:35:33,680 --> 00:35:36,960
to to do that you can you can uh you can

981
00:35:36,960 --> 00:35:39,040
make mobile detection with that uh

982
00:35:39,040 --> 00:35:40,560
easily because uh

983
00:35:40,560 --> 00:35:44,160
most of marvel don't think about to

984
00:35:44,160 --> 00:35:46,480
to avoid super fashion to detect

985
00:35:46,480 --> 00:35:47,839
yourself

986
00:35:47,839 --> 00:35:51,359
so this is a good great way from

987
00:35:51,359 --> 00:35:53,359
forensic point of view to to make the

988
00:35:53,359 --> 00:35:55,359
detection so okay i'm reading the chat

989
00:35:55,359 --> 00:35:55,920
to have

990
00:35:55,920 --> 00:35:58,480
questions

991
00:35:59,119 --> 00:36:02,800
yes you can edit the db file directly

992
00:36:02,800 --> 00:36:05,040
with our tool so this one is open source

993
00:36:05,040 --> 00:36:06,640
so if you want to contribute

994
00:36:06,640 --> 00:36:09,440
and modify and improve it it's no

995
00:36:09,440 --> 00:36:10,720
problem actually yes you can you can

996
00:36:10,720 --> 00:36:12,400
modify a lot of file

997
00:36:12,400 --> 00:36:14,880
uh the most interesting are scenarios

998
00:36:14,880 --> 00:36:19,119
directly but yes you can modify also db

999
00:36:19,359 --> 00:36:22,160
yes there is i just posted the github

1000
00:36:22,160 --> 00:36:22,560
link

1001
00:36:22,560 --> 00:36:25,520
actually i will open it to the public in

1002
00:36:25,520 --> 00:36:27,280
a few minutes

1003
00:36:27,280 --> 00:36:30,560
but now you have the link

1004
00:36:36,960 --> 00:36:39,200
what exactly can you change in prefetch

1005
00:36:39,200 --> 00:36:40,000
file actually

1006
00:36:40,000 --> 00:36:42,320
we can change a lot of things like name

1007
00:36:42,320 --> 00:36:43,920
of the executable

1008
00:36:43,920 --> 00:36:45,280
the time when it has been used the

1009
00:36:45,280 --> 00:36:46,880
number of time it has been used and the

1010
00:36:46,880 --> 00:36:48,480
file it has been constructed

1011
00:36:48,480 --> 00:36:50,560
so the file which has been touched by

1012
00:36:50,560 --> 00:36:51,920
your app you also have all the

1013
00:36:51,920 --> 00:36:54,400
information

1014
00:36:54,560 --> 00:36:57,040
such as the time executed the count of

1015
00:36:57,040 --> 00:36:58,240
execution so

1016
00:36:58,240 --> 00:37:01,040
it can tell us a lot about you like if

1017
00:37:01,040 --> 00:37:01,599
you have

1018
00:37:01,599 --> 00:37:04,079
a mild way let's take this example and

1019
00:37:04,079 --> 00:37:06,320
it has been executed just once

1020
00:37:06,320 --> 00:37:09,760
well you know that it's not likely

1021
00:37:09,760 --> 00:37:13,200
to be launched again and all of do stuff

1022
00:37:13,200 --> 00:37:14,720
about your habits and your

1023
00:37:14,720 --> 00:37:22,079
usual programs

1024
00:37:22,079 --> 00:37:25,920
and actually uh there is no way for

1025
00:37:25,920 --> 00:37:29,920
know that tpfh files has been modified

1026
00:37:29,920 --> 00:37:33,520
even if it's modified so security is not

1027
00:37:33,520 --> 00:37:35,040
very present in the file it's just

1028
00:37:35,040 --> 00:37:36,880
regular files that you can edit once you

1029
00:37:36,880 --> 00:37:38,160
know how to read them

1030
00:37:38,160 --> 00:37:41,119
this is a gold mine and yes we have

1031
00:37:41,119 --> 00:37:41,760
reverse

1032
00:37:41,760 --> 00:37:46,560
harsh actually and

1033
00:37:46,800 --> 00:37:49,760
but the hash is a it's a losing data

1034
00:37:49,760 --> 00:37:50,400
hash

1035
00:37:50,400 --> 00:37:52,800
it means you cannot from the ash value

1036
00:37:52,800 --> 00:37:55,520
retrieve the original strings

1037
00:37:55,520 --> 00:37:58,160
but that's not a big deal because

1038
00:37:58,160 --> 00:37:59,440
actually this is far to be a

1039
00:37:59,440 --> 00:38:00,720
cryptographic ash you can

1040
00:38:00,720 --> 00:38:02,960
perform if you want a collision very

1041
00:38:02,960 --> 00:38:05,839
easily just a linear transformer

1042
00:38:05,839 --> 00:38:08,400
and yeah the github links may have

1043
00:38:08,400 --> 00:38:10,640
issues we are going to to

1044
00:38:10,640 --> 00:38:13,520
open it and try it available as soon as

1045
00:38:13,520 --> 00:38:14,400
possible

1046
00:38:14,400 --> 00:38:19,839
it should be fine now

1047
00:38:20,320 --> 00:38:23,119
i'm going to test it yeah let me know if

1048
00:38:23,119 --> 00:38:26,240
there is still an issue

1049
00:38:30,839 --> 00:38:32,110
yes

1050
00:38:32,110 --> 00:38:35,119
[Music]

1051
00:38:35,119 --> 00:38:38,560
actually that's a very good point for us

1052
00:38:38,560 --> 00:38:41,280
and we would have preferred to be

1053
00:38:41,280 --> 00:38:42,640
present

1054
00:38:42,640 --> 00:38:47,599
physically but

1055
00:38:47,599 --> 00:38:50,880
is the link available yeah the link

1056
00:38:50,880 --> 00:38:51,839
should be working

1057
00:38:51,839 --> 00:38:55,680
now uh let me know if you okay

1058
00:38:57,119 --> 00:38:59,520
uh we have one more question that's the

1059
00:38:59,520 --> 00:39:01,440
windows system record

1060
00:39:01,440 --> 00:39:03,680
that the scenario file has been randomly

1061
00:39:03,680 --> 00:39:04,720
changed

1062
00:39:04,720 --> 00:39:06,880
actually not at all that means if you

1063
00:39:06,880 --> 00:39:08,640
re-inject the file you have just

1064
00:39:08,640 --> 00:39:09,599
modified

1065
00:39:09,599 --> 00:39:12,160
but with the original name that's to say

1066
00:39:12,160 --> 00:39:14,640
our to allows you to change the file

1067
00:39:14,640 --> 00:39:17,440
but the extension um just before the

1068
00:39:17,440 --> 00:39:18,720
extension you will have

1069
00:39:18,720 --> 00:39:21,839
um like result compressed to tell you um

1070
00:39:21,839 --> 00:39:24,560
if the file is compressed or not and if

1071
00:39:24,560 --> 00:39:24,880
as

1072
00:39:24,880 --> 00:39:27,839
if it has been modified well if you

1073
00:39:27,839 --> 00:39:29,839
re-inject this modify

1074
00:39:29,839 --> 00:39:32,640
file into the prefetch directory os

1075
00:39:32,640 --> 00:39:34,800
won't notify it and it will

1076
00:39:34,800 --> 00:39:37,280
windows will process it as any other

1077
00:39:37,280 --> 00:39:37,920
prefetch

1078
00:39:37,920 --> 00:39:42,720
file and that's the magic part of it

1079
00:39:42,720 --> 00:39:45,839
to fold your system

1080
00:39:46,320 --> 00:39:49,680
so there is two we'll try to to to

1081
00:39:49,680 --> 00:39:50,960
answer them first uh

1082
00:39:50,960 --> 00:39:52,960
disable super fetch yes it's like being

1083
00:39:52,960 --> 00:39:54,480
a privacy mode in uh

1084
00:39:54,480 --> 00:39:56,320
web browser so it's a form of a full

1085
00:39:56,320 --> 00:39:57,920
system but yes that's a clue that you

1086
00:39:57,920 --> 00:39:58,160
are

1087
00:39:58,160 --> 00:39:59,839
you know that super fetch is enabled and

1088
00:39:59,839 --> 00:40:01,440
you want to avoid forensic and the last

1089
00:40:01,440 --> 00:40:02,160
question

1090
00:40:02,160 --> 00:40:04,640
uh does malware has the ability to

1091
00:40:04,640 --> 00:40:06,240
inject itself in

1092
00:40:06,240 --> 00:40:07,760
well actually superfast is running with

1093
00:40:07,760 --> 00:40:09,760
system privilege which means you have to

1094
00:40:09,760 --> 00:40:10,400
be an

1095
00:40:10,400 --> 00:40:14,000
administrator on the machine and

1096
00:40:14,000 --> 00:40:16,240
so once you have once you are

1097
00:40:16,240 --> 00:40:17,440
administrators you are

1098
00:40:17,440 --> 00:40:19,359
on the other side of the airwatch so it

1099
00:40:19,359 --> 00:40:21,520
means the security is already broken

1100
00:40:21,520 --> 00:40:23,920
so but yes if malware has administrator

1101
00:40:23,920 --> 00:40:25,680
rice he can disable super fetch or full

1102
00:40:25,680 --> 00:40:26,400
super fetch

1103
00:40:26,400 --> 00:40:29,920
by itself yes of course so we hope

1104
00:40:29,920 --> 00:40:31,599
you enjoyed this presentation we enjoyed

1105
00:40:31,599 --> 00:40:32,800
to do it and thank you for your

1106
00:40:32,800 --> 00:40:33,839
attention

1107
00:40:33,839 --> 00:40:36,000
yeah if you have any question you can

1108
00:40:36,000 --> 00:40:37,839
contact us and it would be your pleasure

1109
00:40:37,839 --> 00:40:42,400
to answer

