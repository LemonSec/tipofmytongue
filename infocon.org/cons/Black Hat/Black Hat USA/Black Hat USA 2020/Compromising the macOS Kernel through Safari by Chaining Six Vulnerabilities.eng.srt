1
00:00:17,680 --> 00:00:18,720
hello everyone

2
00:00:18,720 --> 00:00:20,480
we will present about compromising the

3
00:00:20,480 --> 00:00:22,480
megawatts corners rosa party by chaining

4
00:00:22,480 --> 00:00:25,439
six vulnerabilities

5
00:00:25,439 --> 00:00:27,439
before jumping to the talk let me

6
00:00:27,439 --> 00:00:29,920
introduce ourselves first

7
00:00:29,920 --> 00:00:32,000
we are phd students at georgia tech

8
00:00:32,000 --> 00:00:32,960
working with

9
00:00:32,960 --> 00:00:36,880
professor tesso kim we are in ss lab at

10
00:00:36,880 --> 00:00:38,000
gotec

11
00:00:38,000 --> 00:00:40,640
and we believe is one of the best

12
00:00:40,640 --> 00:00:44,000
information security labs in the world

13
00:00:44,000 --> 00:00:46,399
we also placed etf as team rudimentary

14
00:00:46,399 --> 00:00:47,920
you remember that

15
00:00:47,920 --> 00:00:49,440
that's called loot on depth constitutive

16
00:00:49,440 --> 00:00:52,640
2018. actually depu root is the union

17
00:00:52,640 --> 00:00:55,039
team of deathcore and rutimentary

18
00:00:55,039 --> 00:00:58,640
which is our team

19
00:00:58,640 --> 00:01:02,079
as you know we won in ponton 2020 by

20
00:01:02,079 --> 00:01:05,119
demonstrating the power exploit we got

21
00:01:05,119 --> 00:01:06,479
rce and also

22
00:01:06,479 --> 00:01:09,680
escalated privileged corner as per after

23
00:01:09,680 --> 00:01:13,040
escaping from sandbox we used

24
00:01:13,040 --> 00:01:15,200
six unique vulnerabilities in our

25
00:01:15,200 --> 00:01:16,720
exploit chain and one

26
00:01:16,720 --> 00:01:19,759
70k usd

27
00:01:19,759 --> 00:01:22,799
also we got second place in master of

28
00:01:22,799 --> 00:01:24,880
pawn

29
00:01:24,880 --> 00:01:28,000
we want to emphasize two things

30
00:01:28,000 --> 00:01:29,920
our submission was the only broader

31
00:01:29,920 --> 00:01:31,840
categories of mission in point on this

32
00:01:31,840 --> 00:01:32,880
year

33
00:01:32,880 --> 00:01:34,960
also it was the largest payout for

34
00:01:34,960 --> 00:01:36,640
single targeting this year's phone to

35
00:01:36,640 --> 00:01:38,799
own

36
00:01:39,759 --> 00:01:42,159
i think many people are interested in

37
00:01:42,159 --> 00:01:43,840
how we prepared pontoon

38
00:01:43,840 --> 00:01:46,320
we prepared it for a month to find

39
00:01:46,320 --> 00:01:48,159
vulnerabilities

40
00:01:48,159 --> 00:01:50,560
we consider the three methods fording

41
00:01:50,560 --> 00:01:53,840
code qr and manual analysis

42
00:01:53,840 --> 00:01:56,159
we found several blocks by fodding but

43
00:01:56,159 --> 00:01:57,920
they were not exploitable

44
00:01:57,920 --> 00:02:00,399
code qr looked great but we didn't have

45
00:02:00,399 --> 00:02:01,840
the time to run

46
00:02:01,840 --> 00:02:04,240
so most of our findings come from manual

47
00:02:04,240 --> 00:02:06,079
analysis

48
00:02:06,079 --> 00:02:08,959
we had frequently yet quit meetings to

49
00:02:08,959 --> 00:02:10,878
share information among members to

50
00:02:10,878 --> 00:02:12,800
fully utilize the shield preparation

51
00:02:12,800 --> 00:02:15,040
time

52
00:02:17,280 --> 00:02:19,040
we selected the party as a target

53
00:02:19,040 --> 00:02:21,280
because we were interested in broader

54
00:02:21,280 --> 00:02:22,080
exploitation

55
00:02:22,080 --> 00:02:25,760
and more familiarized nix like os also

56
00:02:25,760 --> 00:02:27,599
previous experience about sapphire

57
00:02:27,599 --> 00:02:29,599
exploitations helped us to

58
00:02:29,599 --> 00:02:33,040
select safari as a target

59
00:02:34,319 --> 00:02:36,959
this is high level overview of our full

60
00:02:36,959 --> 00:02:39,840
chain exploit using six vulnerabilities

61
00:02:39,840 --> 00:02:43,280
first we explore the deep bug in a

62
00:02:43,280 --> 00:02:46,239
javascript engine to get rce in web

63
00:02:46,239 --> 00:02:48,000
process of safari by visiting our

64
00:02:48,000 --> 00:02:49,680
webpage

65
00:02:49,680 --> 00:02:53,200
then using our third box hip overflow in

66
00:02:53,200 --> 00:02:54,480
cpm server

67
00:02:54,480 --> 00:02:56,959
we got we get arbitrary code execution

68
00:02:56,959 --> 00:02:58,640
in cpm server

69
00:02:58,640 --> 00:03:01,760
and then we execute our app using our

70
00:03:01,760 --> 00:03:03,120
second bug

71
00:03:03,120 --> 00:03:04,879
a logical login is a part is a broker

72
00:03:04,879 --> 00:03:06,480
process

73
00:03:06,480 --> 00:03:09,599
however the execution is blocked by

74
00:03:09,599 --> 00:03:12,959
first time execution protection in the

75
00:03:12,959 --> 00:03:16,000
mac os so

76
00:03:16,000 --> 00:03:19,280
we used our force box to bypass this now

77
00:03:19,280 --> 00:03:20,720
we have code execution as

78
00:03:20,720 --> 00:03:24,000
employability user results and box

79
00:03:24,000 --> 00:03:26,879
after that we use our fips block or race

80
00:03:26,879 --> 00:03:28,879
condition bug and zip preference demon

81
00:03:28,879 --> 00:03:29,200
to

82
00:03:29,200 --> 00:03:32,879
escalate privilege to root

83
00:03:32,879 --> 00:03:36,080
finally we exploit our sixth bug

84
00:03:36,080 --> 00:03:38,319
in corner extension load binary to get

85
00:03:38,319 --> 00:03:42,560
corner code execution and disable sap

86
00:03:43,680 --> 00:03:46,400
let me explain first bug in our exploit

87
00:03:46,400 --> 00:03:46,959
chain

88
00:03:46,959 --> 00:03:50,080
rce in supply via incorrect side defect

89
00:03:50,080 --> 00:03:53,840
modeling in jcg compiler

90
00:03:54,239 --> 00:03:56,560
for your background there is a in

91
00:03:56,560 --> 00:03:58,720
operator in javascript

92
00:03:58,720 --> 00:04:01,840
it will return true if specific property

93
00:04:01,840 --> 00:04:02,959
is in the object

94
00:04:02,959 --> 00:04:06,080
or is in its prototype chain

95
00:04:06,080 --> 00:04:08,000
and this operation is usually side

96
00:04:08,000 --> 00:04:09,120
effect free

97
00:04:09,120 --> 00:04:10,560
since it's just checking whether a

98
00:04:10,560 --> 00:04:15,840
specific property exists

99
00:04:16,000 --> 00:04:18,560
decompilation eliminates redundant text

100
00:04:18,560 --> 00:04:20,880
for optimization

101
00:04:20,880 --> 00:04:23,520
here is the function to be decompiled

102
00:04:23,520 --> 00:04:25,360
note that already 2's type is

103
00:04:25,360 --> 00:04:27,360
already stable which means that all

104
00:04:27,360 --> 00:04:30,240
elements are double

105
00:04:30,240 --> 00:04:32,400
in the first line of this function it

106
00:04:32,400 --> 00:04:33,919
says array 2's value

107
00:04:33,919 --> 00:04:36,720
with double this will introduce type

108
00:04:36,720 --> 00:04:38,400
check to ensure that the

109
00:04:38,400 --> 00:04:41,600
type is already stable and then there is

110
00:04:41,600 --> 00:04:44,080
the in operation against array1

111
00:04:44,080 --> 00:04:46,560
at the end of function already type

112
00:04:46,560 --> 00:04:48,000
should be checked again to

113
00:04:48,000 --> 00:04:51,280
access or a2 element

114
00:04:51,360 --> 00:04:54,240
but the check is considered as redundant

115
00:04:54,240 --> 00:04:55,280
if

116
00:04:55,280 --> 00:04:57,600
the in operator is modeled as side

117
00:04:57,600 --> 00:04:59,680
effect 3

118
00:04:59,680 --> 00:05:02,000
then this check will be eliminated by

119
00:05:02,000 --> 00:05:04,800
optimization

120
00:05:05,520 --> 00:05:08,000
the problem is if such side defect

121
00:05:08,000 --> 00:05:09,440
modeling was incorrect

122
00:05:09,440 --> 00:05:11,600
we can trigger unexpected side effects

123
00:05:11,600 --> 00:05:13,280
and cause type confusion

124
00:05:13,280 --> 00:05:15,520
for example we can change our a2's type

125
00:05:15,520 --> 00:05:16,800
to something else

126
00:05:16,800 --> 00:05:22,080
and access it as an old speculated type

127
00:05:22,880 --> 00:05:25,600
inoperator is normally side effect free

128
00:05:25,600 --> 00:05:26,400
but

129
00:05:26,400 --> 00:05:28,160
webkit failed to consider exceptional

130
00:05:28,160 --> 00:05:29,840
cases which can cause

131
00:05:29,840 --> 00:05:33,840
dummy bans webkit uses pdf plugin to

132
00:05:33,840 --> 00:05:36,960
support an embedded pdf file

133
00:05:36,960 --> 00:05:39,280
for efficiency program will be

134
00:05:39,280 --> 00:05:40,560
initialized

135
00:05:40,560 --> 00:05:43,120
lazily when its internal data is used

136
00:05:43,120 --> 00:05:44,240
this includes

137
00:05:44,240 --> 00:05:47,520
uses of in operator and this lady

138
00:05:47,520 --> 00:05:50,080
initialization triggers a dummy band

139
00:05:50,080 --> 00:05:54,240
so we can't register a

140
00:05:54,240 --> 00:05:56,720
handler for this dome event and invoke

141
00:05:56,720 --> 00:05:58,800
arbitrary javascript code to call side

142
00:05:58,800 --> 00:06:01,199
effect

143
00:06:02,960 --> 00:06:04,720
the interesting thing about this bug is

144
00:06:04,720 --> 00:06:07,199
that it can't be discovered by avoiding

145
00:06:07,199 --> 00:06:08,880
the javascript engine itself

146
00:06:08,880 --> 00:06:12,240
so there is phone fault fortunately

147
00:06:12,240 --> 00:06:15,280
codal chemist and xperia

148
00:06:15,280 --> 00:06:18,240
can't find this bug since pdf plugin is

149
00:06:18,240 --> 00:06:19,680
not part of javascript

150
00:06:19,680 --> 00:06:22,400
javascript engine or how do you define

151
00:06:22,400 --> 00:06:23,600
this

152
00:06:23,600 --> 00:06:26,880
manually so

153
00:06:26,880 --> 00:06:29,840
how can you trigger this bug first load

154
00:06:29,840 --> 00:06:30,400
pdf

155
00:06:30,400 --> 00:06:33,440
using embed tag then install an event

156
00:06:33,440 --> 00:06:36,720
handler that triggers side effects

157
00:06:36,720 --> 00:06:38,560
inoperator will be considered as side

158
00:06:38,560 --> 00:06:40,639
defect free in decompilation

159
00:06:40,639 --> 00:06:43,759
even though it's not actually it will

160
00:06:43,759 --> 00:06:46,479
cause side effects for example

161
00:06:46,479 --> 00:06:49,840
printing hello world in this case

162
00:06:51,039 --> 00:06:52,720
we can abuse this bug to build a

163
00:06:52,720 --> 00:06:54,479
primitive for

164
00:06:54,479 --> 00:06:56,720
arbitrary code execution which are get

165
00:06:56,720 --> 00:06:58,080
addressed over and fake

166
00:06:58,080 --> 00:07:01,680
object for address of primitive

167
00:07:01,680 --> 00:07:05,039
we decompile the following function

168
00:07:05,039 --> 00:07:06,880
in the first line of the function it

169
00:07:06,880 --> 00:07:09,680
says array tools value is double

170
00:07:09,680 --> 00:07:11,919
this will introduce type check to ensure

171
00:07:11,919 --> 00:07:14,479
that type is already stopper

172
00:07:14,479 --> 00:07:18,080
and then there is a in operation on

173
00:07:18,080 --> 00:07:19,360
array1

174
00:07:19,360 --> 00:07:22,800
this will be considered side effect 3.

175
00:07:22,800 --> 00:07:25,039
however it will trigger initialization

176
00:07:25,039 --> 00:07:26,800
of the pdf plugin and

177
00:07:26,800 --> 00:07:28,880
invoke our event handler for doms of 3

178
00:07:28,880 --> 00:07:30,319
modified

179
00:07:30,319 --> 00:07:32,560
this gender will put our object to the

180
00:07:32,560 --> 00:07:33,360
array

181
00:07:33,360 --> 00:07:35,759
and change the type of the array 2 into

182
00:07:35,759 --> 00:07:38,800
array is contiguous

183
00:07:39,280 --> 00:07:41,520
type check for array 2 is eliminated

184
00:07:41,520 --> 00:07:43,759
because of the incorrect modeling

185
00:07:43,759 --> 00:07:46,639
therefore compiled code will sync array

186
00:07:46,639 --> 00:07:46,960
2

187
00:07:46,960 --> 00:07:50,160
as an already stubber so we can

188
00:07:50,160 --> 00:07:52,720
return our objects otherwise interpreted

189
00:07:52,720 --> 00:07:58,560
as a double and decompiled function

190
00:07:58,560 --> 00:08:01,440
fake object primitive is almost the same

191
00:08:01,440 --> 00:08:01,759
but

192
00:08:01,759 --> 00:08:04,560
in this case we put address of our fake

193
00:08:04,560 --> 00:08:05,039
object

194
00:08:05,039 --> 00:08:07,680
to array after triggering side defect

195
00:08:07,680 --> 00:08:08,400
which con

196
00:08:08,400 --> 00:08:10,960
which changes type of the array to array

197
00:08:10,960 --> 00:08:13,840
is contiguous

198
00:08:15,199 --> 00:08:17,840
from address op and fake object

199
00:08:17,840 --> 00:08:19,039
primitive

200
00:08:19,039 --> 00:08:21,199
we just reuse the existing technique to

201
00:08:21,199 --> 00:08:23,440
achieve arbitrary code execution

202
00:08:23,440 --> 00:08:26,000
first we need the structure id to bypass

203
00:08:26,000 --> 00:08:26,879
randomized

204
00:08:26,879 --> 00:08:29,280
structure id protection and corrupt

205
00:08:29,280 --> 00:08:30,800
valid object using

206
00:08:30,800 --> 00:08:33,039
one's technique which is presented in

207
00:08:33,039 --> 00:08:35,599
blackhead europe 2019

208
00:08:35,599 --> 00:08:38,240
then we achieved arbitrary read write by

209
00:08:38,240 --> 00:08:40,080
abusing butterfly structure in

210
00:08:40,080 --> 00:08:44,959
the acc similar to the class exploit

211
00:08:45,120 --> 00:08:47,680
finally we overwrote this region to

212
00:08:47,680 --> 00:08:50,560
execute their code

213
00:08:52,000 --> 00:08:54,399
how this is fixed webkit started to

214
00:08:54,399 --> 00:08:55,200
consider that

215
00:08:55,200 --> 00:08:57,839
in operator has side effects if an

216
00:08:57,839 --> 00:08:58,480
object's

217
00:08:58,480 --> 00:09:02,160
prototype is modified so now scientific

218
00:09:02,160 --> 00:09:02,880
modelling of

219
00:09:02,880 --> 00:09:06,000
inoperator is correct

220
00:09:07,680 --> 00:09:09,760
next step in our exploit chain is

221
00:09:09,760 --> 00:09:11,680
launching arbitrary app by exploiting

222
00:09:11,680 --> 00:09:13,440
our logical bug in the price broker

223
00:09:13,440 --> 00:09:15,760
process

224
00:09:18,560 --> 00:09:20,640
as you know there is a fire scheme in

225
00:09:20,640 --> 00:09:22,000
the browser

226
00:09:22,000 --> 00:09:24,240
if we use it in the chrome it will just

227
00:09:24,240 --> 00:09:26,080
show the contents of the directory

228
00:09:26,080 --> 00:09:29,040
in the in a browser but in safari

229
00:09:29,040 --> 00:09:30,720
somehow it pops

230
00:09:30,720 --> 00:09:33,920
finder to show the directory we had a

231
00:09:33,920 --> 00:09:34,720
question

232
00:09:34,720 --> 00:09:37,839
how does it happen

233
00:09:37,839 --> 00:09:40,000
so we checked what is happening under

234
00:09:40,000 --> 00:09:41,040
the hood

235
00:09:41,040 --> 00:09:44,320
the party uses elect function to

236
00:09:44,320 --> 00:09:47,600
launch finder here is a code to enter

237
00:09:47,600 --> 00:09:50,480
fire scheme in safari it gets firepath

238
00:09:50,480 --> 00:09:51,680
from gibbon url

239
00:09:51,680 --> 00:09:54,160
and launches finder using select file

240
00:09:54,160 --> 00:09:55,279
api

241
00:09:55,279 --> 00:09:56,959
so probably opened the file in the past

242
00:09:56,959 --> 00:10:00,800
and it caused it caused a security issue

243
00:10:00,800 --> 00:10:02,959
because of the issue now it opens the

244
00:10:02,959 --> 00:10:05,440
directory containing the file

245
00:10:05,440 --> 00:10:09,600
uh whereas this function is being used

246
00:10:09,600 --> 00:10:12,880
we found that it is also used in another

247
00:10:12,880 --> 00:10:16,880
function called safari repair file

248
00:10:17,440 --> 00:10:19,680
in this function our url will be checked

249
00:10:19,680 --> 00:10:20,480
using

250
00:10:20,480 --> 00:10:23,360
each file package as pest function is

251
00:10:23,360 --> 00:10:24,240
file package

252
00:10:24,240 --> 00:10:26,560
pass function text whether a url points

253
00:10:26,560 --> 00:10:28,640
to an app

254
00:10:28,640 --> 00:10:31,040
so in this case select file function is

255
00:10:31,040 --> 00:10:33,040
called with a url and nothing

256
00:10:33,040 --> 00:10:34,640
interesting happens

257
00:10:34,640 --> 00:10:37,680
but if if file package pass returns

258
00:10:37,680 --> 00:10:41,120
first then it will cause select file

259
00:10:41,120 --> 00:10:41,920
with argument

260
00:10:41,920 --> 00:10:46,240
in file we are rooted at pass

261
00:10:46,240 --> 00:10:48,640
after a quick experiment we discovered

262
00:10:48,640 --> 00:10:49,279
that

263
00:10:49,279 --> 00:10:52,480
our path is considered as an app by is

264
00:10:52,480 --> 00:10:54,160
file package at pacific

265
00:10:54,160 --> 00:10:56,240
is a directory whose name ends with that

266
00:10:56,240 --> 00:10:57,600
app and

267
00:10:57,600 --> 00:10:59,519
we can also bypass this check using

268
00:10:59,519 --> 00:11:01,360
simple link

269
00:11:01,360 --> 00:11:04,160
also if select files second arguments

270
00:11:04,160 --> 00:11:05,279
points on app

271
00:11:05,279 --> 00:11:08,160
it will launch the app even if it's the

272
00:11:08,160 --> 00:11:10,560
symbol link

273
00:11:10,560 --> 00:11:13,839
and most importantly the renderer can

274
00:11:13,839 --> 00:11:15,760
make broker to call this function

275
00:11:15,760 --> 00:11:20,320
using the pipc in short

276
00:11:20,320 --> 00:11:23,200
we send ipc after making a symbol link

277
00:11:23,200 --> 00:11:23,600
for

278
00:11:23,600 --> 00:11:29,839
an arbitrary app we can launch the app

279
00:11:30,800 --> 00:11:33,519
but two problems still exist to launch

280
00:11:33,519 --> 00:11:34,959
the arbitrary app

281
00:11:34,959 --> 00:11:37,839
first we can't create simple link from

282
00:11:37,839 --> 00:11:38,720
the

283
00:11:38,720 --> 00:11:40,959
renderer since it's restricted by

284
00:11:40,959 --> 00:11:42,000
sandbox

285
00:11:42,000 --> 00:11:44,959
to resolve this we use the bug 3

286
00:11:44,959 --> 00:11:46,399
arbitrary code exclusion

287
00:11:46,399 --> 00:11:49,440
in gbm server second

288
00:11:49,440 --> 00:11:52,079
apple has a mitigation code first time

289
00:11:52,079 --> 00:11:53,600
at protection

290
00:11:53,600 --> 00:11:55,760
in particular iphone app is not signed

291
00:11:55,760 --> 00:11:57,839
by trusted developers

292
00:11:57,839 --> 00:11:59,440
its execution will be blocked until

293
00:11:59,440 --> 00:12:01,120
users are proper

294
00:12:01,120 --> 00:12:03,200
but we were able to bypass this

295
00:12:03,200 --> 00:12:06,720
protection using the bug 4.

296
00:12:08,240 --> 00:12:11,760
so how did apple fix this

297
00:12:11,760 --> 00:12:13,440
they just remove the application

298
00:12:13,440 --> 00:12:16,079
launching pass

299
00:12:16,320 --> 00:12:18,800
now jungi will continue the rest of the

300
00:12:18,800 --> 00:12:21,040
presentation

301
00:12:21,040 --> 00:12:22,720
i'll continue with the arbitrary code

302
00:12:22,720 --> 00:12:25,279
execution vulnerability in cpm service

303
00:12:25,279 --> 00:12:28,800
by using heap overflow block

304
00:12:29,360 --> 00:12:32,079
cbm server is an xpc service accessible

305
00:12:32,079 --> 00:12:34,160
from web process

306
00:12:34,160 --> 00:12:36,839
these services use it to support opengl

307
00:12:36,839 --> 00:12:39,680
rendering and we can see it is exposed

308
00:12:39,680 --> 00:12:43,279
in the sandbox profile code

309
00:12:43,920 --> 00:12:46,320
it is also sandboxed but it has more

310
00:12:46,320 --> 00:12:47,360
capabilities than

311
00:12:47,360 --> 00:12:50,880
web process for example we can create a

312
00:12:50,880 --> 00:12:52,079
symbol link

313
00:12:52,079 --> 00:12:54,240
and send a signal to other process from

314
00:12:54,240 --> 00:12:56,560
here

315
00:12:57,040 --> 00:12:59,440
and there is heap overflow block in cbm

316
00:12:59,440 --> 00:13:01,120
server

317
00:13:01,120 --> 00:13:04,720
as you can see here if we send a message

318
00:13:04,720 --> 00:13:07,120
with message field set to 4

319
00:13:07,120 --> 00:13:09,839
then it calls a function named cpms

320
00:13:09,839 --> 00:13:10,560
service

321
00:13:10,560 --> 00:13:13,600
server service attached all of these

322
00:13:13,600 --> 00:13:16,240
arguments are controllable from our xpc

323
00:13:16,240 --> 00:13:17,440
request

324
00:13:17,440 --> 00:13:20,240
as indicated here let's focus on

325
00:13:20,240 --> 00:13:23,040
framework name

326
00:13:24,320 --> 00:13:26,800
in this function it opens a file name in

327
00:13:26,800 --> 00:13:28,480
the form of framework name

328
00:13:28,480 --> 00:13:31,360
type of cpu user id and that maps

329
00:13:31,360 --> 00:13:33,200
concatenated

330
00:13:33,200 --> 00:13:35,440
since framework name is controllable and

331
00:13:35,440 --> 00:13:36,959
there is no filter

332
00:13:36,959 --> 00:13:38,880
we can make it open a file in any

333
00:13:38,880 --> 00:13:40,480
directory

334
00:13:40,480 --> 00:13:43,120
in our case we can create a file in the

335
00:13:43,120 --> 00:13:44,800
sandbox directory

336
00:13:44,800 --> 00:13:49,839
and make the cbm server open this file

337
00:13:50,000 --> 00:13:53,040
then cbm server wisdom maps file by

338
00:13:53,040 --> 00:13:54,560
calculating its size

339
00:13:54,560 --> 00:13:57,360
based on its data let's look at the

340
00:13:57,360 --> 00:14:00,399
detail of the process

341
00:14:00,639 --> 00:14:02,720
here is the shield code for the binary

342
00:14:02,720 --> 00:14:04,720
code above

343
00:14:04,720 --> 00:14:07,040
counter and offset are read from the

344
00:14:07,040 --> 00:14:09,760
file so it is controllable

345
00:14:09,760 --> 00:14:12,160
then size is computed and it will resize

346
00:14:12,160 --> 00:14:13,360
the buffer

347
00:14:13,360 --> 00:14:15,519
then it will also read the remaining

348
00:14:15,519 --> 00:14:17,760
part of the file

349
00:14:17,760 --> 00:14:20,560
as you can see here size can be smaller

350
00:14:20,560 --> 00:14:21,360
smaller than

351
00:14:21,360 --> 00:14:24,160
80. like both counter and offset can be

352
00:14:24,160 --> 00:14:25,199
zero

353
00:14:25,199 --> 00:14:28,720
then size will be 0 too but the actual

354
00:14:28,720 --> 00:14:29,680
size to read

355
00:14:29,680 --> 00:14:32,079
underflows in this case making it

356
00:14:32,079 --> 00:14:34,959
possible to overflow the buffer

357
00:14:34,959 --> 00:14:37,279
note that afrid also stops at the end of

358
00:14:37,279 --> 00:14:38,160
the file

359
00:14:38,160 --> 00:14:40,320
so we can also control the size to

360
00:14:40,320 --> 00:14:42,880
overwrite

361
00:14:43,440 --> 00:14:46,160
to exploit this we used another handler

362
00:14:46,160 --> 00:14:47,600
from message number seven

363
00:14:47,600 --> 00:14:49,279
which returns some mac power to the

364
00:14:49,279 --> 00:14:52,320
client on mac partition ipc mechanism in

365
00:14:52,320 --> 00:14:53,839
macos

366
00:14:53,839 --> 00:14:56,480
and there is a kind of mac port named

367
00:14:56,480 --> 00:14:57,360
task port

368
00:14:57,360 --> 00:15:00,800
which can be used to control a task

369
00:15:00,800 --> 00:15:02,880
well taskbar should not be exposed to

370
00:15:02,880 --> 00:15:04,079
other process

371
00:15:04,079 --> 00:15:06,160
because it allows reading and writing

372
00:15:06,160 --> 00:15:07,279
writing memory

373
00:15:07,279 --> 00:15:10,560
and controlling the registers so it

374
00:15:10,560 --> 00:15:11,600
basically means that

375
00:15:11,600 --> 00:15:15,040
arbitrary code execution is possible

376
00:15:15,040 --> 00:15:17,440
as highlighted here let's focus on the

377
00:15:17,440 --> 00:15:18,399
vm part

378
00:15:18,399 --> 00:15:21,519
of the import variable that is loaded

379
00:15:21,519 --> 00:15:24,720
and copied to client

380
00:15:25,519 --> 00:15:28,160
as you can see here the free import is

381
00:15:28,160 --> 00:15:29,920
loaded from an array located

382
00:15:29,920 --> 00:15:32,800
at heap so we can override the port

383
00:15:32,800 --> 00:15:35,199
value

384
00:15:36,399 --> 00:15:38,880
so we first locate the valid port value

385
00:15:38,880 --> 00:15:41,839
using other handler

386
00:15:41,920 --> 00:15:44,480
then we overwrite the port into the task

387
00:15:44,480 --> 00:15:44,959
port

388
00:15:44,959 --> 00:15:48,239
and send a message 7

389
00:15:48,800 --> 00:15:50,880
then the client will receive the task

390
00:15:50,880 --> 00:15:52,480
port of cpm server

391
00:15:52,480 --> 00:15:54,639
and in this case the client is web

392
00:15:54,639 --> 00:15:57,040
process

393
00:15:57,279 --> 00:15:59,279
then we can execute the arbitrary code

394
00:15:59,279 --> 00:16:00,399
in cpm server

395
00:16:00,399 --> 00:16:02,560
by allocating memory and modifying

396
00:16:02,560 --> 00:16:05,599
stress registers

397
00:16:07,600 --> 00:16:09,759
i will patch it this by checking if the

398
00:16:09,759 --> 00:16:11,759
real press of the math file

399
00:16:11,759 --> 00:16:15,120
matches the batches to the given pass

400
00:16:15,120 --> 00:16:18,079
so arbitrary file open using past travel

401
00:16:18,079 --> 00:16:20,720
becomes impossible

402
00:16:20,720 --> 00:16:23,120
also they added a check for side

403
00:16:23,120 --> 00:16:25,680
underflow

404
00:16:26,720 --> 00:16:29,920
then we use another block to bypass

405
00:16:29,920 --> 00:16:33,519
the first time at protection

406
00:16:34,160 --> 00:16:36,639
here's a reminder that there's a first

407
00:16:36,639 --> 00:16:37,920
time at protection

408
00:16:37,920 --> 00:16:40,000
which requires user interaction to open

409
00:16:40,000 --> 00:16:41,199
an application

410
00:16:41,199 --> 00:16:44,399
launching for the first time it weighs

411
00:16:44,399 --> 00:16:47,680
the user's confirmation to click open

412
00:16:47,680 --> 00:16:51,839
the question is how is it implemented

413
00:16:52,240 --> 00:16:55,120
then let's see the process list it turns

414
00:16:55,120 --> 00:16:55,680
out that

415
00:16:55,680 --> 00:16:58,000
the protection starts the application in

416
00:16:58,000 --> 00:17:00,639
the suspended state

417
00:17:00,639 --> 00:17:03,360
what if it receives second signal which

418
00:17:03,360 --> 00:17:06,319
resumes the process

419
00:17:09,520 --> 00:17:12,160
it was bypass it so we could open our

420
00:17:12,160 --> 00:17:15,120
application bundle

421
00:17:15,760 --> 00:17:18,959
apple said they won't fix the bug

422
00:17:18,959 --> 00:17:21,839
here is some guess about the reasons

423
00:17:21,839 --> 00:17:22,559
first

424
00:17:22,559 --> 00:17:25,520
to send a signal to an application we

425
00:17:25,520 --> 00:17:29,120
usually need to get code execution first

426
00:17:29,120 --> 00:17:31,600
second kernel modification might be

427
00:17:31,600 --> 00:17:32,960
needed to support

428
00:17:32,960 --> 00:17:36,000
secure ui and it is not trivial to

429
00:17:36,000 --> 00:17:38,080
change

430
00:17:38,080 --> 00:17:39,679
so if you have similar types of

431
00:17:39,679 --> 00:17:42,400
vulnerabilities you can bypass the first

432
00:17:42,400 --> 00:17:42,720
time

433
00:17:42,720 --> 00:17:47,840
ad protection with this method

434
00:17:48,000 --> 00:17:50,080
let me briefly summarize our sandbox

435
00:17:50,080 --> 00:17:51,840
escape chain

436
00:17:51,840 --> 00:17:54,160
first we achieved code execution in web

437
00:17:54,160 --> 00:17:56,240
process using the first block

438
00:17:56,240 --> 00:17:58,480
and then we got code execution in cbm

439
00:17:58,480 --> 00:17:59,600
server as well

440
00:17:59,600 --> 00:18:03,760
using box 3. in that process we created

441
00:18:03,760 --> 00:18:04,960
a symbol link

442
00:18:04,960 --> 00:18:07,760
pointing to an arbitrary application and

443
00:18:07,760 --> 00:18:09,760
send the ipc call to safari

444
00:18:09,760 --> 00:18:12,960
to launch the application then we send

445
00:18:12,960 --> 00:18:14,240
second to it

446
00:18:14,240 --> 00:18:18,640
to bypass the first time at protection

447
00:18:20,000 --> 00:18:22,000
now we get code execution outside

448
00:18:22,000 --> 00:18:24,480
sandbox

449
00:18:24,480 --> 00:18:27,919
to get root public privilege we used

450
00:18:27,919 --> 00:18:29,919
we used the waste condition block and

451
00:18:29,919 --> 00:18:32,960
cfpraff's demon

452
00:18:33,440 --> 00:18:36,720
so what is cfr's demon it is an xpc

453
00:18:36,720 --> 00:18:38,240
service located at

454
00:18:38,240 --> 00:18:41,600
core foundation framework

455
00:18:41,600 --> 00:18:44,640
we can read or write preference files by

456
00:18:44,640 --> 00:18:46,720
sending a request

457
00:18:46,720 --> 00:18:48,720
there were several security issues

458
00:18:48,720 --> 00:18:50,320
including the famous block

459
00:18:50,320 --> 00:18:53,678
found by code colorist

460
00:18:54,559 --> 00:18:56,480
and there is a wrapper function which

461
00:18:56,480 --> 00:18:59,440
sends the xpc request to the demo

462
00:18:59,440 --> 00:19:01,520
if a client calls this function with key

463
00:19:01,520 --> 00:19:02,559
value pair

464
00:19:02,559 --> 00:19:05,760
and destination pass set then demo will

465
00:19:05,760 --> 00:19:07,280
process the request

466
00:19:07,280 --> 00:19:09,520
first it will check if the client

467
00:19:09,520 --> 00:19:12,000
process can write to the file

468
00:19:12,000 --> 00:19:14,080
then it will try to create a directory

469
00:19:14,080 --> 00:19:15,280
recursively

470
00:19:15,280 --> 00:19:18,559
if it does not exist in this case it is

471
00:19:18,559 --> 00:19:22,640
pass2 finally it will write a new

472
00:19:22,640 --> 00:19:24,720
content content2.plist file

473
00:19:24,720 --> 00:19:29,039
with the new key and value pair edit

474
00:19:29,600 --> 00:19:32,640
but how exactly it creates the directory

475
00:19:32,640 --> 00:19:35,360
first it will split the path into parts

476
00:19:35,360 --> 00:19:38,640
using slash's delimiter then for each

477
00:19:38,640 --> 00:19:40,720
part it will create a directory using

478
00:19:40,720 --> 00:19:44,000
kdir then it will change the permission

479
00:19:44,000 --> 00:19:45,200
and the owner of the

480
00:19:45,200 --> 00:19:48,320
folder all of these three functions

481
00:19:48,320 --> 00:19:52,720
accepts the paths as their arguments

482
00:19:52,720 --> 00:19:54,960
but what if the created directory are

483
00:19:54,960 --> 00:19:58,080
replaced between mkdir and chmod

484
00:19:58,080 --> 00:20:00,559
like we can replace the folder with a

485
00:20:00,559 --> 00:20:03,679
symbol link instead

486
00:20:03,679 --> 00:20:05,520
then it will change the permission and

487
00:20:05,520 --> 00:20:08,320
owner of the pointed file instead

488
00:20:08,320 --> 00:20:11,520
in this way we can make any files to be

489
00:20:11,520 --> 00:20:13,679
writable

490
00:20:13,679 --> 00:20:15,760
at this point let's look at the command

491
00:20:15,760 --> 00:20:17,200
with set uitps

492
00:20:17,200 --> 00:20:21,840
named this user bin login

493
00:20:22,400 --> 00:20:24,799
the login command authenticates a user

494
00:20:24,799 --> 00:20:26,559
based on policies specified

495
00:20:26,559 --> 00:20:29,600
at the file named etc pam.d and

496
00:20:29,600 --> 00:20:33,440
login this file specifies paa module for

497
00:20:33,440 --> 00:20:36,640
authentication for example a module

498
00:20:36,640 --> 00:20:37,120
named

499
00:20:37,120 --> 00:20:40,559
pam permit.so always permit access

500
00:20:40,559 --> 00:20:43,918
without any authentication

501
00:20:45,840 --> 00:20:48,320
by overwriting this file we can change

502
00:20:48,320 --> 00:20:51,679
all pi modules into pam permit.so

503
00:20:51,679 --> 00:20:54,080
after that just running login root

504
00:20:54,080 --> 00:20:56,480
command will give us a root privileged

505
00:20:56,480 --> 00:20:57,200
shell

506
00:20:57,200 --> 00:21:01,039
without asking any password

507
00:21:01,679 --> 00:21:03,679
for the patch now they use file

508
00:21:03,679 --> 00:21:05,120
descriptor instead

509
00:21:05,120 --> 00:21:06,960
to change the owner of the created

510
00:21:06,960 --> 00:21:09,440
folder

511
00:21:10,320 --> 00:21:12,720
and this is the last block and use it in

512
00:21:12,720 --> 00:21:14,799
our chain

513
00:21:14,799 --> 00:21:17,760
we used it to execute code in kernel and

514
00:21:17,760 --> 00:21:22,080
it is a race condition bug in keck slot

515
00:21:23,520 --> 00:21:25,679
before diving into the block let me

516
00:21:25,679 --> 00:21:27,600
briefly talk about system integrated

517
00:21:27,600 --> 00:21:28,880
protection

518
00:21:28,880 --> 00:21:31,200
in macos having a root privilege does

519
00:21:31,200 --> 00:21:34,480
not mean we can execute coding kernel

520
00:21:34,480 --> 00:21:37,360
because even the root user cannot write

521
00:21:37,360 --> 00:21:40,360
two folders with the attribute

522
00:21:40,360 --> 00:21:42,320
com.rootlist and there is other

523
00:21:42,320 --> 00:21:43,600
protections that prevent

524
00:21:43,600 --> 00:21:49,520
some prevents from operation

525
00:21:49,520 --> 00:21:51,679
only specially entitled binaries can

526
00:21:51,679 --> 00:21:53,200
write to these folders

527
00:21:53,200 --> 00:21:55,520
for example there is a command named

528
00:21:55,520 --> 00:21:56,640
keck slot

529
00:21:56,640 --> 00:21:59,120
and pr2 legacy which is the macos

530
00:21:59,120 --> 00:22:00,799
installer

531
00:22:00,799 --> 00:22:02,480
and there are other programs with

532
00:22:02,480 --> 00:22:04,080
special entitlements

533
00:22:04,080 --> 00:22:06,720
to have this entitlement it needs to be

534
00:22:06,720 --> 00:22:09,520
signed by apple

535
00:22:09,520 --> 00:22:12,600
this mitigation is added from os x

536
00:22:12,600 --> 00:22:18,000
10.11 and it is called rootless

537
00:22:19,760 --> 00:22:21,679
then let me briefly introduce about the

538
00:22:21,679 --> 00:22:24,080
kernel extension in backos

539
00:22:24,080 --> 00:22:26,880
megaos uses many kernel modules for

540
00:22:26,880 --> 00:22:28,880
example there is psd

541
00:22:28,880 --> 00:22:31,840
sandbox and quarantine.text and it

542
00:22:31,840 --> 00:22:33,919
contains binaries and configuration

543
00:22:33,919 --> 00:22:35,520
files

544
00:22:35,520 --> 00:22:39,600
all folders related are protected in sip

545
00:22:39,600 --> 00:22:42,400
so the root user cannot directly write

546
00:22:42,400 --> 00:22:45,280
to the kernel modules

547
00:22:45,280 --> 00:22:47,440
also we can only load signed kernel

548
00:22:47,440 --> 00:22:50,400
extensions using text load command

549
00:22:50,400 --> 00:22:55,520
then let's look a look at this command

550
00:22:55,520 --> 00:22:57,120
kexload command has a special

551
00:22:57,120 --> 00:22:59,600
entitlement to write a directory that is

552
00:22:59,600 --> 00:23:00,480
protected by

553
00:23:00,480 --> 00:23:03,679
sip so it can write to

554
00:23:03,679 --> 00:23:07,360
cax directories this command loads the

555
00:23:07,360 --> 00:23:09,120
kernel extension after wifi

556
00:23:09,120 --> 00:23:11,840
verifying code signature and the

557
00:23:11,840 --> 00:23:14,000
signature check happens only in user

558
00:23:14,000 --> 00:23:15,679
space

559
00:23:15,679 --> 00:23:18,640
the problem is both the signature

560
00:23:18,640 --> 00:23:19,679
checking function

561
00:23:19,679 --> 00:23:21,440
and the function that loads the text

562
00:23:21,440 --> 00:23:24,320
accepts the past of the folder

563
00:23:24,320 --> 00:23:26,080
therefore a race condition could

564
00:23:26,080 --> 00:23:28,960
possibly happen

565
00:23:29,679 --> 00:23:32,159
to prevent this it uses a mitigation

566
00:23:32,159 --> 00:23:34,000
called station

567
00:23:34,000 --> 00:23:36,640
like it'll use read only copy in sip

568
00:23:36,640 --> 00:23:38,320
protected folder instead

569
00:23:38,320 --> 00:23:41,520
for verifying and loading text first

570
00:23:41,520 --> 00:23:45,520
it will copy cache to sip protected

571
00:23:45,520 --> 00:23:48,559
directory then it will verify and load

572
00:23:48,559 --> 00:23:48,880
the

573
00:23:48,880 --> 00:23:52,480
copy instead of using the original one

574
00:23:52,480 --> 00:23:54,720
on attacker cannot modify text file

575
00:23:54,720 --> 00:23:56,960
between verifying and loading because of

576
00:23:56,960 --> 00:23:58,400
sip

577
00:23:58,400 --> 00:24:01,279
so it means that we fail to exploit the

578
00:24:01,279 --> 00:24:04,720
race condition

579
00:24:04,720 --> 00:24:07,120
but there are two problems in staging

580
00:24:07,120 --> 00:24:08,400
mechanism

581
00:24:08,400 --> 00:24:11,520
the actual steps are first it copies our

582
00:24:11,520 --> 00:24:13,760
text file into sip protected folder

583
00:24:13,760 --> 00:24:14,159
named

584
00:24:14,159 --> 00:24:17,360
library stage extensions note that the

585
00:24:17,360 --> 00:24:18,000
path is

586
00:24:18,000 --> 00:24:19,840
preserved except the base file name

587
00:24:19,840 --> 00:24:22,000
which is replaced into a temporary name

588
00:24:22,000 --> 00:24:23,919
with uuid

589
00:24:23,919 --> 00:24:26,880
then it verifies the code signature if

590
00:24:26,880 --> 00:24:28,720
it fails it will list them

591
00:24:28,720 --> 00:24:30,960
if it succeeds it moves them into

592
00:24:30,960 --> 00:24:34,720
library staged extensions tnpa.kext

593
00:24:34,720 --> 00:24:38,400
then it'll load the kernel extension

594
00:24:38,400 --> 00:24:40,799
the first problem is it copies all of

595
00:24:40,799 --> 00:24:41,760
the files

596
00:24:41,760 --> 00:24:45,039
including the symbol link files second

597
00:24:45,039 --> 00:24:46,159
problem is

598
00:24:46,159 --> 00:24:48,480
we can actually avoid cast load from

599
00:24:48,480 --> 00:24:49,679
deleting them

600
00:24:49,679 --> 00:24:53,360
by killing the process before step three

601
00:24:53,360 --> 00:24:55,279
it is possible because both of the

602
00:24:55,279 --> 00:24:56,559
attacker process

603
00:24:56,559 --> 00:24:58,320
and cache load process are running in

604
00:24:58,320 --> 00:25:02,158
the same account which is root

605
00:25:02,799 --> 00:25:05,360
so our plan is we place the symbol link

606
00:25:05,360 --> 00:25:07,039
under the text bundle then run the

607
00:25:07,039 --> 00:25:09,279
command

608
00:25:09,279 --> 00:25:12,960
let's first copy them like this

609
00:25:13,200 --> 00:25:15,039
and we kill the process before it

610
00:25:15,039 --> 00:25:16,559
deletes them

611
00:25:16,559 --> 00:25:19,360
now we have sip protected symbolic link

612
00:25:19,360 --> 00:25:21,678
file

613
00:25:22,159 --> 00:25:24,720
then we run the command again and this

614
00:25:24,720 --> 00:25:29,120
time our text under the symbolic link

615
00:25:29,120 --> 00:25:31,039
it will copy b that text under the

616
00:25:31,039 --> 00:25:32,880
folder name the symlink

617
00:25:32,880 --> 00:25:35,039
to the destination pass which is under

618
00:25:35,039 --> 00:25:37,440
the simple link file

619
00:25:37,440 --> 00:25:40,159
by doing this we can get a state text

620
00:25:40,159 --> 00:25:40,880
folder

621
00:25:40,880 --> 00:25:43,679
inside rightful folder and it is no

622
00:25:43,679 --> 00:25:47,360
longer protected by sip

623
00:25:48,720 --> 00:25:50,799
and we used another technique to improve

624
00:25:50,799 --> 00:25:51,919
the chance to win the

625
00:25:51,919 --> 00:25:55,600
race we abused the sandbox feature

626
00:25:55,600 --> 00:25:59,760
to intercept some activity of process

627
00:25:59,760 --> 00:26:02,080
first we can prevent deleting staged

628
00:26:02,080 --> 00:26:05,039
files by terminating text load

629
00:26:05,039 --> 00:26:08,158
like we can stop set

630
00:26:08,799 --> 00:26:12,960
like we can do that

631
00:26:16,799 --> 00:26:19,520
we can do that by denying a link and

632
00:26:19,520 --> 00:26:20,400
send

633
00:26:20,400 --> 00:26:25,840
termination signal

634
00:26:26,159 --> 00:26:29,520
second we can stop after every five bit

635
00:26:29,520 --> 00:26:33,039
to replace files after code sign check

636
00:26:33,039 --> 00:26:34,960
we can send stop signal after reading

637
00:26:34,960 --> 00:26:38,400
specific file by using this rule

638
00:26:38,400 --> 00:26:40,880
this technique is inspired by cold

639
00:26:40,880 --> 00:26:41,760
colorists

640
00:26:41,760 --> 00:26:45,120
as a hitb pro hitp presentation

641
00:26:45,120 --> 00:26:48,799
in 2019

642
00:26:49,919 --> 00:26:53,200
so by attacking race condition we could

643
00:26:53,200 --> 00:26:55,360
load unsigned kernel extension for

644
00:26:55,360 --> 00:26:56,799
example we could use

645
00:26:56,799 --> 00:26:59,840
unrootly statcats from linux which

646
00:26:59,840 --> 00:27:04,399
disables sap by modifying the kernel

647
00:27:04,840 --> 00:27:07,440
memory and the passports

648
00:27:07,440 --> 00:27:09,840
they made another read-only copy in sap

649
00:27:09,840 --> 00:27:10,880
protected folder

650
00:27:10,880 --> 00:27:13,760
in different form in this time they

651
00:27:13,760 --> 00:27:14,480
replaced

652
00:27:14,480 --> 00:27:17,279
left-most pass to random one to prevent

653
00:27:17,279 --> 00:27:20,720
this attack

654
00:27:20,720 --> 00:27:24,240
and here is our demo video

655
00:27:24,960 --> 00:27:29,200
we first check the version of macos

656
00:27:30,159 --> 00:27:34,799
and safari

657
00:27:34,799 --> 00:27:39,039
then we navigate to the attacker server

658
00:27:41,279 --> 00:27:44,000
it first gets code execution and we

659
00:27:44,000 --> 00:27:47,840
escape sandbox by attacking safari and

660
00:27:47,840 --> 00:27:49,760
then calculator is popped outside

661
00:27:49,760 --> 00:27:52,000
sandbox

662
00:27:52,000 --> 00:27:54,320
in the background it tries to escalate

663
00:27:54,320 --> 00:27:56,640
its privilege to root

664
00:27:56,640 --> 00:28:03,840
then finally kernel

665
00:28:04,960 --> 00:28:07,760
and it shows a terminal showing that sap

666
00:28:07,760 --> 00:28:09,200
became disabled

667
00:28:09,200 --> 00:28:12,799
by running code in kernel

668
00:28:14,000 --> 00:28:17,039
so our conclusion is we discussed six

669
00:28:17,039 --> 00:28:19,279
vulnerabilities and their exploitation

670
00:28:19,279 --> 00:28:22,720
used in 0.1 2020 to compromise safari

671
00:28:22,720 --> 00:28:26,240
with escalation of kernel privilege

672
00:28:26,240 --> 00:28:28,159
they show difficulties in protecting a

673
00:28:28,159 --> 00:28:31,440
large and complicated system

674
00:28:31,440 --> 00:28:33,600
we open source our exploit chain to

675
00:28:33,600 --> 00:28:36,959
foster further research

676
00:28:37,039 --> 00:28:40,080
thank you for listening

677
00:28:41,760 --> 00:28:44,240
oh yeah it seems like we don't have any

678
00:28:44,240 --> 00:28:59,840
questions yet

679
00:29:29,120 --> 00:29:32,240
okay uh we got one question oh

680
00:29:32,240 --> 00:29:36,080
from chat uh can you drop your

681
00:29:36,080 --> 00:29:39,919
link in here um okay oh i'll

682
00:29:39,919 --> 00:29:55,840
paste the link to the chat

683
00:30:06,840 --> 00:30:10,880
um but another question project

684
00:30:10,880 --> 00:30:13,039
is

685
00:30:14,240 --> 00:30:16,320
it is what was the motive for this

686
00:30:16,320 --> 00:30:18,240
research

687
00:30:18,240 --> 00:30:22,480
um actually uh

688
00:30:22,480 --> 00:30:25,679
pontoon participating proton is one of

689
00:30:25,679 --> 00:30:27,120
the dream for a hacker

690
00:30:27,120 --> 00:30:30,559
so uh i think

691
00:30:30,559 --> 00:30:33,520
that's the motivation

692
00:30:34,840 --> 00:30:37,440
um yeah the

693
00:30:37,440 --> 00:30:39,360
the another question is i've looked at

694
00:30:39,360 --> 00:30:41,360
the github link provided and it seems

695
00:30:41,360 --> 00:30:43,679
the worker is not public yet whatever

696
00:30:43,679 --> 00:30:47,360
um okay so uh i'm

697
00:30:47,360 --> 00:30:50,240
i'm talking with our teammates to

698
00:30:50,240 --> 00:30:50,880
publish

699
00:30:50,880 --> 00:30:54,640
a published exploit chain so

700
00:30:54,640 --> 00:30:58,960
so i think it'll be public

701
00:30:58,960 --> 00:31:02,720
after about some minutes later

702
00:31:02,720 --> 00:31:06,240
i guess i think it will be public public

703
00:31:06,240 --> 00:31:09,440
uh during public

704
00:31:09,440 --> 00:31:12,559
today yes

705
00:31:15,919 --> 00:31:19,600
okay oh uh do you think the

706
00:31:19,600 --> 00:31:23,120
move by apple to am 64 cpus will make

707
00:31:23,120 --> 00:31:25,039
exploitation of this kind of

708
00:31:25,039 --> 00:31:28,799
chain or challenging um

709
00:31:29,200 --> 00:31:32,720
yes i think so because uh

710
00:31:32,720 --> 00:31:36,000
when needed to make some pointer

711
00:31:36,000 --> 00:31:36,720
differences

712
00:31:36,720 --> 00:31:40,559
work uh when using cbm

713
00:31:40,559 --> 00:31:44,000
when exploiting cbm server so

714
00:31:44,000 --> 00:31:47,200
if if some medications like pointer

715
00:31:47,200 --> 00:31:47,919
authenticate

716
00:31:47,919 --> 00:31:50,799
codes is applied then i think the

717
00:31:50,799 --> 00:31:52,960
exploitation will be

718
00:31:52,960 --> 00:31:56,240
harder um

719
00:31:56,240 --> 00:31:58,159
and the question another question is

720
00:31:58,159 --> 00:31:59,760
what prompted you

721
00:31:59,760 --> 00:32:02,799
look at the cbm server

722
00:32:02,799 --> 00:32:07,519
actually we looked at uh many tablets

723
00:32:07,519 --> 00:32:11,519
and sim server is one of them

724
00:32:11,519 --> 00:32:13,360
and we found the vulnerability in

725
00:32:13,360 --> 00:32:15,120
separate server and we promptly

726
00:32:15,120 --> 00:32:20,158
promptly to exploit it and it'll success

727
00:32:23,039 --> 00:32:26,799
so at first we we try to look at

728
00:32:26,799 --> 00:32:29,600
xpc and mig demos because there were

729
00:32:29,600 --> 00:32:31,840
some existing research around that

730
00:32:31,840 --> 00:32:35,439
so yeah

731
00:32:36,799 --> 00:32:43,840
i think this can be answered

732
00:32:44,960 --> 00:32:48,880
um okay ah i missed a question

733
00:32:48,880 --> 00:32:52,159
so can you talk about how you go through

734
00:32:52,159 --> 00:32:53,440
manual finding about

735
00:32:53,440 --> 00:32:56,720
like what you what do you do

736
00:32:56,720 --> 00:33:00,080
to get started um yes so

737
00:33:00,080 --> 00:33:03,279
first we are listed or also

738
00:33:03,279 --> 00:33:05,919
open the demos that is exposed to vendor

739
00:33:05,919 --> 00:33:07,679
process

740
00:33:07,679 --> 00:33:10,799
and then we

741
00:33:10,799 --> 00:33:14,960
and then we uh actually made a foster to

742
00:33:14,960 --> 00:33:18,080
uh nightly let's just send some

743
00:33:18,080 --> 00:33:21,200
requests to that but it does not

744
00:33:21,200 --> 00:33:24,640
uh it does not work well so

745
00:33:24,640 --> 00:33:27,679
i try to examine each demo to

746
00:33:27,679 --> 00:33:29,760
figure out our photo is running

747
00:33:29,760 --> 00:33:31,679
correctly and

748
00:33:31,679 --> 00:33:34,159
it related to me to reverse your

749
00:33:34,159 --> 00:33:34,880
engineer

750
00:33:34,880 --> 00:33:39,840
each demo in more detail

751
00:34:17,918 --> 00:34:20,879
um okay uh we got another question i

752
00:34:20,879 --> 00:34:22,639
haven't tested these books on iphone do

753
00:34:22,639 --> 00:34:22,960
they

754
00:34:22,960 --> 00:34:26,079
work uh actually uh we couldn't because

755
00:34:26,079 --> 00:34:26,800
we don't have

756
00:34:26,800 --> 00:34:30,560
a debugging environment for iphone yet

757
00:34:30,560 --> 00:34:33,679
uh but uh i saw some

758
00:34:33,679 --> 00:34:37,119
advisory on ios acknowledging our book

759
00:34:37,119 --> 00:34:40,239
so i think something would work but i

760
00:34:40,239 --> 00:34:42,399
think the exploit chain would be

761
00:34:42,399 --> 00:34:49,839
completely different i guess

762
00:35:05,520 --> 00:35:10,560
and thank you for the appreciate

763
00:35:14,839 --> 00:35:16,880
appreciation

764
00:35:16,880 --> 00:35:31,839
i'm glad that you enjoyed our talk

765
00:36:36,800 --> 00:36:40,640
uh and affordable link uh

766
00:36:40,640 --> 00:36:42,560
i'm actually finding the location of our

767
00:36:42,560 --> 00:36:44,240
site so

768
00:36:44,240 --> 00:36:47,359
um i think the weapon will be also

769
00:36:47,359 --> 00:36:49,440
public in a few minutes so

770
00:36:49,440 --> 00:36:53,520
i think we can put the link

771
00:36:53,520 --> 00:36:58,160
after making it public just for a moment

772
00:36:58,160 --> 00:37:09,839
thank you

773
00:37:34,839 --> 00:37:37,839
so

774
00:38:02,839 --> 00:38:05,839
uh

775
00:38:16,839 --> 00:38:19,839
so

776
00:38:54,079 --> 00:38:57,760
um okay i've i found a link so i'll post

777
00:38:57,760 --> 00:39:00,560
it into the chat

778
00:39:00,560 --> 00:39:03,839
uh please note that this is

779
00:39:03,839 --> 00:39:06,640
not made and made in public uh we're

780
00:39:06,640 --> 00:39:15,839
we're still cleaning up some

781
00:39:21,599 --> 00:39:23,760
okay the question is uh what resources

782
00:39:23,760 --> 00:39:25,119
do you recommend for research just

783
00:39:25,119 --> 00:39:27,920
getting started with microwaves on now

784
00:39:27,920 --> 00:39:29,280
actually uh for

785
00:39:29,280 --> 00:39:32,480
oh for all areas of research i i'd

786
00:39:32,480 --> 00:39:33,200
recommend

787
00:39:33,200 --> 00:39:37,760
uh uh googling for some previous works

788
00:39:37,760 --> 00:39:38,560
on the direct

789
00:39:38,560 --> 00:39:42,560
that area

790
00:39:42,560 --> 00:39:45,040
um i think we are one of the time uh but

791
00:39:45,040 --> 00:39:47,119
specifically uh

792
00:39:47,119 --> 00:39:51,680
uh we've saw some researches uh known by

793
00:39:51,680 --> 00:39:54,960
phonaks and some articles in

794
00:39:54,960 --> 00:39:58,960
objective and yeah and there's

795
00:39:58,960 --> 00:40:01,280
much uh there's many other resources so

796
00:40:01,280 --> 00:40:04,160
i think you can

797
00:40:04,240 --> 00:40:11,839
you can read that

798
00:40:30,079 --> 00:40:32,960
okay oh oh thank you thanks for

799
00:40:32,960 --> 00:40:37,760
listening our presentation

