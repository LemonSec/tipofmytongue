1
00:00:04,210 --> 00:00:14,640
[Music]

2
00:00:15,599 --> 00:00:16,160
so hi

3
00:00:16,160 --> 00:00:17,840
uh thank you for attending our talk this

4
00:00:17,840 --> 00:00:19,920
is room for escape scribbling outside

5
00:00:19,920 --> 00:00:21,600
the lines of template security

6
00:00:21,600 --> 00:00:23,600
my name is alvaro munoz also known as

7
00:00:23,600 --> 00:00:25,199
pontester in the social media

8
00:00:25,199 --> 00:00:27,119
i'm a staff security researcher with a

9
00:00:27,119 --> 00:00:28,800
github security lab team

10
00:00:28,800 --> 00:00:31,359
and my colleague alexander miros or oleg

11
00:00:31,359 --> 00:00:33,040
mirosin in twitter and social media

12
00:00:33,040 --> 00:00:35,200
which is a security researcher with the

13
00:00:35,200 --> 00:00:36,480
microfocus

14
00:00:36,480 --> 00:00:39,120
fortify team so today we will be talking

15
00:00:39,120 --> 00:00:42,000
about content management systems or cmss

16
00:00:42,000 --> 00:00:44,320
and in particular the template systems

17
00:00:44,320 --> 00:00:46,640
that they use to render dynamic content

18
00:00:46,640 --> 00:00:48,640
so a cms is an application that is used

19
00:00:48,640 --> 00:00:50,000
to manage different

20
00:00:50,000 --> 00:00:52,480
web content and it basically allows

21
00:00:52,480 --> 00:00:54,480
multiple users and contributors to

22
00:00:54,480 --> 00:00:54,960
create

23
00:00:54,960 --> 00:00:56,640
edit and publish content on these

24
00:00:56,640 --> 00:00:59,600
systems so what is important to us

25
00:00:59,600 --> 00:01:02,239
is that this content is normally

26
00:01:02,239 --> 00:01:03,199
rendered

27
00:01:03,199 --> 00:01:06,080
based on a system of some documents

28
00:01:06,080 --> 00:01:07,280
called templates

29
00:01:07,280 --> 00:01:09,280
and these templates are normally mixing

30
00:01:09,280 --> 00:01:11,439
both static and dynamic content

31
00:01:11,439 --> 00:01:14,159
so for the evaluation of that of those

32
00:01:14,159 --> 00:01:16,159
dynamic parts in the templates

33
00:01:16,159 --> 00:01:18,479
these systems are normally using some

34
00:01:18,479 --> 00:01:19,759
subset of

35
00:01:19,759 --> 00:01:21,840
some programming language capabilities

36
00:01:21,840 --> 00:01:23,680
which are powerful and normally

37
00:01:23,680 --> 00:01:26,560
are able to get a remote code execution

38
00:01:26,560 --> 00:01:28,000
so uh these systems are normally

39
00:01:28,000 --> 00:01:29,600
sandboxed in order to prevent

40
00:01:29,600 --> 00:01:32,880
that so our research will focus

41
00:01:32,880 --> 00:01:33,840
basically on

42
00:01:33,840 --> 00:01:36,640
net and java based content management

43
00:01:36,640 --> 00:01:37,360
systems

44
00:01:37,360 --> 00:01:39,040
because those are normally the languages

45
00:01:39,040 --> 00:01:40,799
that are more used by

46
00:01:40,799 --> 00:01:43,600
enterprises and our assumption is that

47
00:01:43,600 --> 00:01:45,119
the attacker can control

48
00:01:45,119 --> 00:01:47,920
the contents of a template right so it

49
00:01:47,920 --> 00:01:49,759
doesn't matter if it gets control of

50
00:01:49,759 --> 00:01:50,640
those templates

51
00:01:50,640 --> 00:01:52,799
through a server-side template injection

52
00:01:52,799 --> 00:01:54,479
or maybe they can control it because

53
00:01:54,479 --> 00:01:55,200
they have

54
00:01:55,200 --> 00:01:57,600
permission uh to do that because they

55
00:01:57,600 --> 00:01:59,040
are author

56
00:01:59,040 --> 00:02:01,840
of some different systems or they have

57
00:02:01,840 --> 00:02:03,680
for example a user in a sharepoint

58
00:02:03,680 --> 00:02:05,759
or something like that so our goal here

59
00:02:05,759 --> 00:02:06,799
is to basically

60
00:02:06,799 --> 00:02:08,959
be able to escape those sandboxes and

61
00:02:08,959 --> 00:02:10,160
run arbitrary

62
00:02:10,160 --> 00:02:11,680
system commands on the underlying

63
00:02:11,680 --> 00:02:15,200
servers so we will divide our talk into

64
00:02:15,200 --> 00:02:15,599
the

65
00:02:15,599 --> 00:02:17,360
two different big blocks the first one

66
00:02:17,360 --> 00:02:18,879
will be around.net

67
00:02:18,879 --> 00:02:20,959
although we will basically focus on

68
00:02:20,959 --> 00:02:22,400
sharepoint

69
00:02:22,400 --> 00:02:24,480
and we will show five different ways we

70
00:02:24,480 --> 00:02:25,840
were able to break

71
00:02:25,840 --> 00:02:28,400
uh the sharepoint sandbox and then we

72
00:02:28,400 --> 00:02:29,280
will move into the

73
00:02:29,280 --> 00:02:32,000
java part where we will be uh reviewing

74
00:02:32,000 --> 00:02:33,519
10 different content

75
00:02:33,519 --> 00:02:35,440
management systems and up to four

76
00:02:35,440 --> 00:02:37,760
different template engines including the

77
00:02:37,760 --> 00:02:39,440
most popular ones free market and

78
00:02:39,440 --> 00:02:40,480
velocity

79
00:02:40,480 --> 00:02:42,319
so with that we will wrap up with some

80
00:02:42,319 --> 00:02:43,760
takeaways and then we will open the

81
00:02:43,760 --> 00:02:44,239
floor

82
00:02:44,239 --> 00:02:47,360
for some q a thank you eribara in this

83
00:02:47,360 --> 00:02:49,200
part of our presentation we will see

84
00:02:49,200 --> 00:02:50,000
examples of

85
00:02:50,000 --> 00:02:52,000
different types of security problems in

86
00:02:52,000 --> 00:02:53,440
sharepoint server

87
00:02:53,440 --> 00:02:55,920
but before that we need to explain some

88
00:02:55,920 --> 00:02:56,879
basics of

89
00:02:56,879 --> 00:03:00,000
sharepoint security

90
00:03:00,000 --> 00:03:03,360
sharepoint has two types of ispx pairs

91
00:03:03,360 --> 00:03:06,000
the first type is application page

92
00:03:06,000 --> 00:03:08,879
actually each of these pages is part of

93
00:03:08,879 --> 00:03:10,959
sharepoint server and implements some

94
00:03:10,959 --> 00:03:12,239
application logic

95
00:03:12,239 --> 00:03:15,280
they are stored in specific folders in

96
00:03:15,280 --> 00:03:18,239
file system and of course users are not

97
00:03:18,239 --> 00:03:19,519
able to change them

98
00:03:19,519 --> 00:03:22,239
they are regular aspx pages and are

99
00:03:22,239 --> 00:03:23,040
processed

100
00:03:23,040 --> 00:03:25,680
by the server without any restrictions

101
00:03:25,680 --> 00:03:27,040
in opposite to them

102
00:03:27,040 --> 00:03:29,599
there are site pages they are stored in

103
00:03:29,599 --> 00:03:30,640
databases

104
00:03:30,640 --> 00:03:33,760
and they can be customized even by

105
00:03:33,760 --> 00:03:36,879
users sharepoint parts of them in

106
00:03:36,879 --> 00:03:38,239
special mode

107
00:03:38,239 --> 00:03:40,879
also known as safe mode actually they

108
00:03:40,879 --> 00:03:41,680
are more like

109
00:03:41,680 --> 00:03:44,840
some sort of templates for dynamic

110
00:03:44,840 --> 00:03:46,000
content

111
00:03:46,000 --> 00:03:48,480
this slide we can see a diagram how

112
00:03:48,480 --> 00:03:50,400
server works with this page

113
00:03:50,400 --> 00:03:53,280
virtual provider can fetch content from

114
00:03:53,280 --> 00:03:54,480
file system or

115
00:03:54,480 --> 00:03:57,040
database based on the virtual path of

116
00:03:57,040 --> 00:03:58,159
the current page

117
00:03:58,159 --> 00:04:02,480
sp page parser filter will decide either

118
00:04:02,480 --> 00:04:04,720
it is site page and safe mode should be

119
00:04:04,720 --> 00:04:06,959
applied or it is application page

120
00:04:06,959 --> 00:04:09,840
and it will be processed without any

121
00:04:09,840 --> 00:04:11,040
restriction

122
00:04:11,040 --> 00:04:14,080
so page filter is critical element from

123
00:04:14,080 --> 00:04:17,918
security point of view in sharepoint

124
00:04:17,918 --> 00:04:21,440
let's have a look at sample aspx page

125
00:04:21,440 --> 00:04:24,080
for our tag we are interesting only in

126
00:04:24,080 --> 00:04:25,600
server side components

127
00:04:25,600 --> 00:04:28,160
like directives there are special

128
00:04:28,160 --> 00:04:30,080
instruction instructions on how

129
00:04:30,080 --> 00:04:33,360
server should process this page often

130
00:04:33,360 --> 00:04:35,360
they have some numbers attributes

131
00:04:35,360 --> 00:04:38,080
with values we can include servers site

132
00:04:38,080 --> 00:04:38,479
called

133
00:04:38,479 --> 00:04:41,759
either ins special blocks or

134
00:04:41,759 --> 00:04:44,639
as embedded server side code server site

135
00:04:44,639 --> 00:04:45,520
controls

136
00:04:45,520 --> 00:04:48,000
should have the runout server attribute

137
00:04:48,000 --> 00:04:49,600
server side comments block will be

138
00:04:49,600 --> 00:04:50,320
ignored

139
00:04:50,320 --> 00:04:53,680
on the server and the last element

140
00:04:53,680 --> 00:04:56,960
server site include directives allow

141
00:04:56,960 --> 00:05:00,240
us to include raw content of arbitrary

142
00:05:00,240 --> 00:05:02,240
files

143
00:05:02,240 --> 00:05:04,720
now we can better understand what safe

144
00:05:04,720 --> 00:05:05,919
mode means

145
00:05:05,919 --> 00:05:09,280
site page will not be compiled so

146
00:05:09,280 --> 00:05:12,400
we cannot use server side code here we

147
00:05:12,400 --> 00:05:14,320
are not able to include files from file

148
00:05:14,320 --> 00:05:15,280
system

149
00:05:15,280 --> 00:05:17,680
we can only use allowed controls this

150
00:05:17,680 --> 00:05:20,479
list is defined in safe control section

151
00:05:20,479 --> 00:05:23,600
of web config file page filter also

152
00:05:23,600 --> 00:05:24,720
applies

153
00:05:24,720 --> 00:05:27,600
allow list for directives and even for

154
00:05:27,600 --> 00:05:29,600
attributes of most of them

155
00:05:29,600 --> 00:05:31,120
there are many other restrictions for

156
00:05:31,120 --> 00:05:34,479
example event binding is blocked as well

157
00:05:34,479 --> 00:05:36,400
this set of restriction looks quite

158
00:05:36,400 --> 00:05:38,000
impressive but let's

159
00:05:38,000 --> 00:05:40,320
look possible type of attacks what we

160
00:05:40,320 --> 00:05:43,440
can perform

161
00:05:43,520 --> 00:05:46,800
as we know safe mode is enforced by page

162
00:05:46,800 --> 00:05:47,680
filter

163
00:05:47,680 --> 00:05:49,840
so our first question was either any

164
00:05:49,840 --> 00:05:52,000
place where sharepoint does not use

165
00:05:52,000 --> 00:05:55,280
it and answer yes there are such places

166
00:05:55,280 --> 00:05:57,440
page filter will not be applied for the

167
00:05:57,440 --> 00:05:58,560
content argument

168
00:05:58,560 --> 00:06:00,960
of the parse control method if it's

169
00:06:00,960 --> 00:06:02,479
called only with one argument

170
00:06:02,479 --> 00:06:05,199
or if the second one that actually is

171
00:06:05,199 --> 00:06:07,440
named ignore parts filter is true

172
00:06:07,440 --> 00:06:10,400
in addition page filter will be used at

173
00:06:10,400 --> 00:06:11,280
rendering time

174
00:06:11,280 --> 00:06:14,639
but ignored in design time

175
00:06:14,639 --> 00:06:18,160
but even if page fit is not applied

176
00:06:18,160 --> 00:06:20,960
sharepoint uses another way to verify

177
00:06:20,960 --> 00:06:22,080
the input

178
00:06:22,080 --> 00:06:24,720
it is verify control on save list method

179
00:06:24,720 --> 00:06:25,199
from

180
00:06:25,199 --> 00:06:28,240
editing page parse type that aim

181
00:06:28,240 --> 00:06:30,560
to do the same task of the original page

182
00:06:30,560 --> 00:06:31,759
filter

183
00:06:31,759 --> 00:06:34,800
so what we can do let's

184
00:06:34,800 --> 00:06:38,000
imagine for one second that we are able

185
00:06:38,000 --> 00:06:40,400
to bypass either this method or patch

186
00:06:40,400 --> 00:06:41,520
filter

187
00:06:41,520 --> 00:06:43,360
by the way each such bypass is separate

188
00:06:43,360 --> 00:06:45,759
from an ability we will present them

189
00:06:45,759 --> 00:06:48,800
in a few minutes so how could we get

190
00:06:48,800 --> 00:06:50,319
remote code execution after

191
00:06:50,319 --> 00:06:53,919
escaping safe mode since pass control

192
00:06:53,919 --> 00:06:54,560
method

193
00:06:54,560 --> 00:06:57,599
never cause compilation we are not able

194
00:06:57,599 --> 00:07:00,160
to use server side code or perform other

195
00:07:00,160 --> 00:07:00,960
attacks

196
00:07:00,960 --> 00:07:03,919
that require such compilation but if we

197
00:07:03,919 --> 00:07:05,120
escape safe mode

198
00:07:05,120 --> 00:07:07,599
we can use unsafe controls or directors

199
00:07:07,599 --> 00:07:10,880
so let's review a few of them

200
00:07:11,039 --> 00:07:12,880
one of the most interesting and safe

201
00:07:12,880 --> 00:07:14,240
controls is

202
00:07:14,240 --> 00:07:16,720
object data source it allows us to

203
00:07:16,720 --> 00:07:18,560
invoke public method from our bad

204
00:07:18,560 --> 00:07:19,280
arbitrary

205
00:07:19,280 --> 00:07:21,360
public type we can see an example of

206
00:07:21,360 --> 00:07:23,599
payload that uses the start method

207
00:07:23,599 --> 00:07:26,319
from process type to popup calculator so

208
00:07:26,319 --> 00:07:27,680
actually it is arbitrary record

209
00:07:27,680 --> 00:07:29,360
execution by definition

210
00:07:29,360 --> 00:07:32,000
game over but let's review a couple

211
00:07:32,000 --> 00:07:34,080
other unsafe controls

212
00:07:34,080 --> 00:07:36,800
xml data source and xml controls allow

213
00:07:36,800 --> 00:07:39,360
us to get the content of arbitrary xml

214
00:07:39,360 --> 00:07:40,000
files

215
00:07:40,000 --> 00:07:42,479
the similar results we can get by server

216
00:07:42,479 --> 00:07:43,440
set include

217
00:07:43,440 --> 00:07:47,039
directives that return us a content of

218
00:07:47,039 --> 00:07:50,400
any text file let's see on the next

219
00:07:50,400 --> 00:07:54,240
slide how we can escalate from arbitrary

220
00:07:54,240 --> 00:07:57,680
file read to arbitrary code execution

221
00:07:57,680 --> 00:08:00,240
if we can access the webconfig file we

222
00:08:00,240 --> 00:08:02,000
will be able to get value

223
00:08:02,000 --> 00:08:04,240
of validation key from machine key

224
00:08:04,240 --> 00:08:05,039
section

225
00:08:05,039 --> 00:08:07,120
by the way this value may be present in

226
00:08:07,120 --> 00:08:08,479
other places such as

227
00:08:08,479 --> 00:08:10,639
internal sharepoint properties you can

228
00:08:10,639 --> 00:08:13,280
find this example in our white paper

229
00:08:13,280 --> 00:08:15,759
with validation key we can generate a

230
00:08:15,759 --> 00:08:17,280
valid view state that will

231
00:08:17,280 --> 00:08:20,879
execute arbitrary commands on the target

232
00:08:20,879 --> 00:08:22,000
server

233
00:08:22,000 --> 00:08:24,240
you can use tools such as user

234
00:08:24,240 --> 00:08:25,680
serial.net

235
00:08:25,680 --> 00:08:29,039
to generate this payload

236
00:08:29,039 --> 00:08:31,840
now when we know what safe mode is and

237
00:08:31,840 --> 00:08:33,839
how we can compromise sharepoint server

238
00:08:33,839 --> 00:08:35,120
if it's bypassed

239
00:08:35,120 --> 00:08:38,000
we can move to our next part here we

240
00:08:38,000 --> 00:08:38,719
will present

241
00:08:38,719 --> 00:08:40,399
five different types of security

242
00:08:40,399 --> 00:08:42,799
problems in content management system

243
00:08:42,799 --> 00:08:45,279
we will show examples of each type in

244
00:08:45,279 --> 00:08:46,880
sharepoint

245
00:08:46,880 --> 00:08:49,760
we would like to stress here that our

246
00:08:49,760 --> 00:08:52,000
target is sharepoint server with default

247
00:08:52,000 --> 00:08:53,440
configuration

248
00:08:53,440 --> 00:08:56,560
all vulnerable vulnerability allowed us

249
00:08:56,560 --> 00:08:59,760
to execute arbitrary code on the target

250
00:08:59,760 --> 00:09:01,680
all attacks were performed by regular

251
00:09:01,680 --> 00:09:03,120
users and

252
00:09:03,120 --> 00:09:07,040
no admin rights were needed let's start

253
00:09:07,040 --> 00:09:08,880
the first type of security problems is

254
00:09:08,880 --> 00:09:10,480
access to resources

255
00:09:10,480 --> 00:09:12,800
with sensitive information it can be

256
00:09:12,800 --> 00:09:14,560
configuration or business information in

257
00:09:14,560 --> 00:09:15,120
various

258
00:09:15,120 --> 00:09:17,920
files logs database or even process

259
00:09:17,920 --> 00:09:18,959
memory

260
00:09:18,959 --> 00:09:20,880
of course a proper sandbox should

261
00:09:20,880 --> 00:09:22,399
prevent this problem

262
00:09:22,399 --> 00:09:26,000
but it's not always the case we already

263
00:09:26,000 --> 00:09:26,560
mentioned

264
00:09:26,560 --> 00:09:28,560
that page filter block server set

265
00:09:28,560 --> 00:09:29,680
include directors

266
00:09:29,680 --> 00:09:32,160
and verify control on safe list method

267
00:09:32,160 --> 00:09:32,959
should do

268
00:09:32,959 --> 00:09:36,480
as well and actually it does but

269
00:09:36,480 --> 00:09:38,320
if it's called this false in block

270
00:09:38,320 --> 00:09:40,640
server set includes argument it will not

271
00:09:40,640 --> 00:09:41,680
block them

272
00:09:41,680 --> 00:09:44,399
we found such usage of this method it

273
00:09:44,399 --> 00:09:46,640
was used for design mode

274
00:09:46,640 --> 00:09:48,800
the next building block from for our

275
00:09:48,800 --> 00:09:50,000
attack how

276
00:09:50,000 --> 00:09:53,839
can we provide our markup to this mode

277
00:09:53,839 --> 00:09:56,720
we can send it in the verb part xml

278
00:09:56,720 --> 00:09:57,600
parameter

279
00:09:57,600 --> 00:09:59,839
of the render web part for edit method

280
00:09:59,839 --> 00:10:01,920
of the web part page services

281
00:10:01,920 --> 00:10:03,920
so we can try to include web config

282
00:10:03,920 --> 00:10:05,920
there

283
00:10:05,920 --> 00:10:09,279
here we can see the full payload uh

284
00:10:09,279 --> 00:10:12,079
that will be sent in uh mentioned

285
00:10:12,079 --> 00:10:12,959
parameter

286
00:10:12,959 --> 00:10:15,440
and address of relevant web service

287
00:10:15,440 --> 00:10:16,560
server returned

288
00:10:16,560 --> 00:10:18,959
us the entire web config with validation

289
00:10:18,959 --> 00:10:19,680
key

290
00:10:19,680 --> 00:10:21,360
we used it for view state based

291
00:10:21,360 --> 00:10:23,760
visualization attack which led us to

292
00:10:23,760 --> 00:10:26,160
executing arbitrary os command on the

293
00:10:26,160 --> 00:10:28,560
server

294
00:10:29,760 --> 00:10:32,000
time for our next type of security

295
00:10:32,000 --> 00:10:32,959
problem

296
00:10:32,959 --> 00:10:35,519
allow dangerous element that can be used

297
00:10:35,519 --> 00:10:36,000
for

298
00:10:36,000 --> 00:10:38,959
attacks we have found an example in

299
00:10:38,959 --> 00:10:40,720
sharepoint safe control list

300
00:10:40,720 --> 00:10:42,800
or should we call it don't show safe

301
00:10:42,800 --> 00:10:47,120
control list in this case

302
00:10:47,120 --> 00:10:50,480
it is contact link suggestion

303
00:10:50,480 --> 00:10:52,720
micro view control we can see snippet

304
00:10:52,720 --> 00:10:54,079
with interesting call from its

305
00:10:54,079 --> 00:10:55,279
implementation

306
00:10:55,279 --> 00:10:58,320
where request parameter is passed into

307
00:10:58,320 --> 00:11:01,440
data set read dataset.xml method

308
00:11:01,440 --> 00:11:03,680
if we can control input for this method

309
00:11:03,680 --> 00:11:04,800
we can get

310
00:11:04,800 --> 00:11:07,600
our data deserialized by xml serialized

311
00:11:07,600 --> 00:11:07,920
and

312
00:11:07,920 --> 00:11:11,040
be able to control a destination type

313
00:11:11,040 --> 00:11:14,000
we already showed in one of our previous

314
00:11:14,000 --> 00:11:15,680
research that in this case

315
00:11:15,680 --> 00:11:17,920
we can get a repeat record execution

316
00:11:17,920 --> 00:11:19,040
unfortunately

317
00:11:19,040 --> 00:11:21,279
this payload is too big for slides but

318
00:11:21,279 --> 00:11:25,040
you can find it in our white paper

319
00:11:25,519 --> 00:11:28,880
the last piece of our puzzle is

320
00:11:28,880 --> 00:11:31,600
side page with this dangerous control we

321
00:11:31,600 --> 00:11:32,320
can see

322
00:11:32,320 --> 00:11:36,240
it on our slide for unpack we need

323
00:11:36,240 --> 00:11:39,120
to place the payload into text box and

324
00:11:39,120 --> 00:11:41,040
click on the submit button

325
00:11:41,040 --> 00:11:42,800
and desired command will be executed on

326
00:11:42,800 --> 00:11:45,839
the sharepoint server

327
00:11:47,279 --> 00:11:50,079
for art for us the next type of security

328
00:11:50,079 --> 00:11:50,639
problems

329
00:11:50,639 --> 00:11:52,480
look quite interesting so we will try to

330
00:11:52,480 --> 00:11:55,600
explain it with more details

331
00:11:55,600 --> 00:11:58,800
content usually means that we will have

332
00:11:58,800 --> 00:11:59,440
at least

333
00:11:59,440 --> 00:12:01,600
read access to some properties or

334
00:12:01,600 --> 00:12:03,839
attributes of some objects

335
00:12:03,839 --> 00:12:06,720
for some system like sharia point we can

336
00:12:06,720 --> 00:12:07,760
even have

337
00:12:07,760 --> 00:12:11,200
right access sandbox should filter out

338
00:12:11,200 --> 00:12:12,399
the access to

339
00:12:12,399 --> 00:12:16,720
dangerous properties or attributes

340
00:12:17,519 --> 00:12:19,440
let's review basic types of such

341
00:12:19,440 --> 00:12:22,079
filtering the first case is when only

342
00:12:22,079 --> 00:12:24,160
one level of properties or attributes is

343
00:12:24,160 --> 00:12:25,040
allowed

344
00:12:25,040 --> 00:12:26,959
we can see examples on the slide name

345
00:12:26,959 --> 00:12:28,720
property of user object

346
00:12:28,720 --> 00:12:31,440
or selected value from menu we can

347
00:12:31,440 --> 00:12:32,000
imagine

348
00:12:32,000 --> 00:12:34,959
the object and its property like branch

349
00:12:34,959 --> 00:12:37,360
with only lives

350
00:12:37,360 --> 00:12:39,279
if an allow list is applied it is

351
00:12:39,279 --> 00:12:41,440
relatively easy to review all elements

352
00:12:41,440 --> 00:12:43,200
and after such review we can

353
00:12:43,200 --> 00:12:45,200
make sure that there is no dangerous

354
00:12:45,200 --> 00:12:47,680
element what if a block list is used

355
00:12:47,680 --> 00:12:48,720
instead

356
00:12:48,720 --> 00:12:50,800
we still need to verify our available

357
00:12:50,800 --> 00:12:53,279
objects and it can be a bit difficult

358
00:12:53,279 --> 00:12:55,519
so in general we do not consider block

359
00:12:55,519 --> 00:12:57,360
list a safe approach

360
00:12:57,360 --> 00:13:00,000
because of potential gaps on them we

361
00:13:00,000 --> 00:13:00,560
will see

362
00:13:00,560 --> 00:13:03,440
in java part of our presentation a

363
00:13:03,440 --> 00:13:06,720
couple examples of such bypasses

364
00:13:06,720 --> 00:13:09,519
the most interesting case for us is when

365
00:13:09,519 --> 00:13:10,399
access to

366
00:13:10,399 --> 00:13:13,440
nested property or attributes is allowed

367
00:13:13,440 --> 00:13:16,079
for example request dot auth user dot

368
00:13:16,079 --> 00:13:16,480
name

369
00:13:16,480 --> 00:13:20,160
or menu dot selected item dot text

370
00:13:20,160 --> 00:13:22,800
because of branch leads leaves analogy

371
00:13:22,800 --> 00:13:25,839
many developers may imagine this case as

372
00:13:25,839 --> 00:13:28,160
branch with branches and leaves and they

373
00:13:28,160 --> 00:13:30,480
can apply filter only for the first

374
00:13:30,480 --> 00:13:34,079
level objects

375
00:13:34,079 --> 00:13:37,120
but it's not tree it is network and

376
00:13:37,120 --> 00:13:39,600
we may jump from one branch to another

377
00:13:39,600 --> 00:13:41,279
or even to the trunk

378
00:13:41,279 --> 00:13:43,920
for example on the slide we can see how

379
00:13:43,920 --> 00:13:45,839
to access application instance

380
00:13:45,839 --> 00:13:49,519
from menu control let's move to our

381
00:13:49,519 --> 00:13:51,279
example in sharepoint

382
00:13:51,279 --> 00:13:53,920
it has wiki content web part control it

383
00:13:53,920 --> 00:13:55,360
is allowed and will pass

384
00:13:55,360 --> 00:13:58,320
our markup into the parse control method

385
00:13:58,320 --> 00:13:59,440
please note

386
00:13:59,440 --> 00:14:01,760
it is called this false value in ignore

387
00:14:01,760 --> 00:14:03,199
parse filter argument

388
00:14:03,199 --> 00:14:06,800
so page filter will not be ignored

389
00:14:06,800 --> 00:14:09,680
the following snippet shows that in this

390
00:14:09,680 --> 00:14:11,440
case the virtual path will be created

391
00:14:11,440 --> 00:14:11,760
from

392
00:14:11,760 --> 00:14:15,040
up relative virtual path property and if

393
00:14:15,040 --> 00:14:16,880
you remember page filter will apply

394
00:14:16,880 --> 00:14:19,040
restriction based on this virtual path

395
00:14:19,040 --> 00:14:23,120
so if we are able to change it it

396
00:14:23,120 --> 00:14:26,160
we can fool the page filter not to apply

397
00:14:26,160 --> 00:14:30,000
restriction at all to our markup

398
00:14:30,000 --> 00:14:32,160
let's try to craft such payload first

399
00:14:32,160 --> 00:14:33,600
snippet fails

400
00:14:33,600 --> 00:14:36,880
because when aspx parsers try to

401
00:14:36,880 --> 00:14:39,279
assign a new value to our up relative

402
00:14:39,279 --> 00:14:40,480
virtual path

403
00:14:40,480 --> 00:14:42,560
the page property of our control is not

404
00:14:42,560 --> 00:14:43,920
defined yet

405
00:14:43,920 --> 00:14:46,000
so we need to delay this assignment a

406
00:14:46,000 --> 00:14:47,040
little bit

407
00:14:47,040 --> 00:14:49,680
this can be done using data binding so

408
00:14:49,680 --> 00:14:50,800
by time

409
00:14:50,800 --> 00:14:53,279
the property is bound the page property

410
00:14:53,279 --> 00:14:56,399
will be already defined

411
00:14:56,800 --> 00:15:00,560
here is our final payload we can notice

412
00:15:00,560 --> 00:15:03,839
that our new path points to settings uh

413
00:15:03,839 --> 00:15:07,120
page its application page it is assign

414
00:15:07,120 --> 00:15:07,920
it to tool t

415
00:15:07,920 --> 00:15:09,680
property and later will be transferred

416
00:15:09,680 --> 00:15:11,600
to up relative retail path

417
00:15:11,600 --> 00:15:14,399
so the page filter will think that this

418
00:15:14,399 --> 00:15:17,040
is system page and will allow any unsafe

419
00:15:17,040 --> 00:15:17,839
markup

420
00:15:17,839 --> 00:15:20,079
for example we can use our object object

421
00:15:20,079 --> 00:15:24,160
data source control to pop up calculator

422
00:15:24,959 --> 00:15:26,880
uh let's see how this attack looks on

423
00:15:26,880 --> 00:15:30,000
real sharepoint server

424
00:15:32,079 --> 00:15:35,600
oh here is our site page this payload

425
00:15:35,600 --> 00:15:38,000
here is passed to the system page

426
00:15:38,000 --> 00:15:40,160
it will be transferred to up relative

427
00:15:40,160 --> 00:15:41,440
virtual path

428
00:15:41,440 --> 00:15:44,240
here is our unsafe uh markup with object

429
00:15:44,240 --> 00:15:45,279
data source

430
00:15:45,279 --> 00:15:49,040
start method process type and calculator

431
00:15:49,040 --> 00:15:52,480
uh file name we let's

432
00:15:52,480 --> 00:15:55,440
save it's here for our attack we need to

433
00:15:55,440 --> 00:15:57,440
upload this to sharepoint server

434
00:15:57,440 --> 00:15:59,279
our target is sharepoint with default

435
00:15:59,279 --> 00:16:01,839
configuration in this configuration

436
00:16:01,839 --> 00:16:03,440
regular users usually have access to

437
00:16:03,440 --> 00:16:06,399
their own personal site so we can use it

438
00:16:06,399 --> 00:16:08,480
we are attacker it's regular user no

439
00:16:08,480 --> 00:16:09,440
admin

440
00:16:09,440 --> 00:16:13,040
uh rights so uh here is a

441
00:16:13,040 --> 00:16:16,880
a personal site let's uh upload

442
00:16:16,880 --> 00:16:19,519
our page or to trigger our attack we

443
00:16:19,519 --> 00:16:20,720
just need to click on it

444
00:16:20,720 --> 00:16:22,959
but before that let's pay attention on

445
00:16:22,959 --> 00:16:24,000
the uh

446
00:16:24,000 --> 00:16:26,079
other window in the screen it is task

447
00:16:26,079 --> 00:16:27,360
manager so we will

448
00:16:27,360 --> 00:16:30,079
on this sharepoint so we will see if a

449
00:16:30,079 --> 00:16:30,959
calculator

450
00:16:30,959 --> 00:16:34,839
starts actually it starts attack was

451
00:16:34,839 --> 00:16:37,839
successful

452
00:16:40,480 --> 00:16:43,680
by the way we were able to export read

453
00:16:43,680 --> 00:16:45,040
access to nested properties in

454
00:16:45,040 --> 00:16:45,920
sharepoint

455
00:16:45,920 --> 00:16:48,399
but unfortunately we do not have time to

456
00:16:48,399 --> 00:16:50,240
present this vulnerability today

457
00:16:50,240 --> 00:16:52,800
you can find all details in our white

458
00:16:52,800 --> 00:16:55,199
paper

459
00:16:56,079 --> 00:16:57,839
now let's move to the next type of

460
00:16:57,839 --> 00:16:59,199
security problems

461
00:16:59,199 --> 00:17:01,120
it is connected with our previous work

462
00:17:01,120 --> 00:17:02,959
on unsafe decentralization

463
00:17:02,959 --> 00:17:04,880
such kind of problem is relevant to when

464
00:17:04,880 --> 00:17:07,359
text or binary data is converted to an

465
00:17:07,359 --> 00:17:08,079
object

466
00:17:08,079 --> 00:17:10,640
and the typo or class of this object is

467
00:17:10,640 --> 00:17:12,160
under attacker control

468
00:17:12,160 --> 00:17:15,679
also it is not properly limited

469
00:17:15,679 --> 00:17:17,839
actually it doesn't really matter what

470
00:17:17,839 --> 00:17:18,880
mechanism is used

471
00:17:18,880 --> 00:17:20,959
classical the serializer json and

472
00:17:20,959 --> 00:17:22,640
marshalls type converters

473
00:17:22,640 --> 00:17:25,439
or even some custom approaches all of

474
00:17:25,439 --> 00:17:27,439
them are potentially dangerous

475
00:17:27,439 --> 00:17:29,200
also for successful exploitation

476
00:17:29,200 --> 00:17:30,799
attackers may need to find

477
00:17:30,799 --> 00:17:34,559
proper gadget on the target system

478
00:17:35,440 --> 00:17:37,280
we have found an example of such problem

479
00:17:37,280 --> 00:17:38,559
in sharepoint server

480
00:17:38,559 --> 00:17:40,320
and were able to perform arbitrary

481
00:17:40,320 --> 00:17:42,000
execution attack using it

482
00:17:42,000 --> 00:17:44,400
microsoft assigned an cv number to this

483
00:17:44,400 --> 00:17:46,240
vulnerability but because this problem

484
00:17:46,240 --> 00:17:48,080
affects a few other products

485
00:17:48,080 --> 00:17:50,559
microsoft was not able to release fixes

486
00:17:50,559 --> 00:17:51,280
for all

487
00:17:51,280 --> 00:17:54,000
of them in time so we are going to

488
00:17:54,000 --> 00:17:55,440
publish all details of this

489
00:17:55,440 --> 00:17:56,559
vulnerability

490
00:17:56,559 --> 00:18:00,720
a bit later when all fixes are released

491
00:18:00,720 --> 00:18:02,640
the last type of security problems in

492
00:18:02,640 --> 00:18:04,720
this part is the classical

493
00:18:04,720 --> 00:18:07,520
time of check to time of use problems

494
00:18:07,520 --> 00:18:08,960
they occur when

495
00:18:08,960 --> 00:18:11,600
the server validates some input but it

496
00:18:11,600 --> 00:18:12,720
can be later

497
00:18:12,720 --> 00:18:18,240
changed before that server is used

498
00:18:18,720 --> 00:18:20,880
we found such problem in web part

499
00:18:20,880 --> 00:18:22,720
editing surface page

500
00:18:22,720 --> 00:18:25,039
user input is validated by the already

501
00:18:25,039 --> 00:18:26,160
known for us

502
00:18:26,160 --> 00:18:28,320
verify control on save this method but

503
00:18:28,320 --> 00:18:29,600
later the server may

504
00:18:29,600 --> 00:18:32,080
just modify the input and remove some

505
00:18:32,080 --> 00:18:34,960
substring from it

506
00:18:35,039 --> 00:18:38,400
let's consider the next uh content

507
00:18:38,400 --> 00:18:41,280
for verify control on save list it is

508
00:18:41,280 --> 00:18:42,240
just one

509
00:18:42,240 --> 00:18:44,160
server side comment block so it will

510
00:18:44,160 --> 00:18:45,440
pass validation

511
00:18:45,440 --> 00:18:47,600
but sharepoint removes the yellow

512
00:18:47,600 --> 00:18:49,520
substring and parse control will

513
00:18:49,520 --> 00:18:52,559
see two comments and some markup node

514
00:18:52,559 --> 00:18:54,480
parse control has only one argument

515
00:18:54,480 --> 00:18:59,280
so page filter will be ignored

516
00:18:59,280 --> 00:19:02,640
time for our payload we can notice here

517
00:19:02,640 --> 00:19:04,720
our unsafe object object data source

518
00:19:04,720 --> 00:19:07,039
control and calculator

519
00:19:07,039 --> 00:19:09,440
of course in all our examples we could

520
00:19:09,440 --> 00:19:10,720
change this command to

521
00:19:10,720 --> 00:19:13,039
a more interesting one and compromise

522
00:19:13,039 --> 00:19:15,200
compromise sharepoint server but

523
00:19:15,200 --> 00:19:17,919
it would be another story now let's

524
00:19:17,919 --> 00:19:19,840
switch back to alvar and he will present

525
00:19:19,840 --> 00:19:22,640
the java part of our research

526
00:19:22,640 --> 00:19:24,720
thank you alexander and now we will be

527
00:19:24,720 --> 00:19:27,039
focusing on the java part

528
00:19:27,039 --> 00:19:29,120
for that we analyze four different uh

529
00:19:29,120 --> 00:19:31,679
sandbox java template engines including

530
00:19:31,679 --> 00:19:33,360
the most popular ones

531
00:19:33,360 --> 00:19:35,520
which are free marker velocity and also

532
00:19:35,520 --> 00:19:37,280
gene java and pebble

533
00:19:37,280 --> 00:19:40,320
and in order to test our bypasses we

534
00:19:40,320 --> 00:19:42,080
will be testing them on different

535
00:19:42,080 --> 00:19:44,400
cms-like systems such as

536
00:19:44,400 --> 00:19:47,840
life ray alfresco confluence or hubspot

537
00:19:47,840 --> 00:19:50,080
just to mention a few

538
00:19:50,080 --> 00:19:52,559
so a brief introduction into what a

539
00:19:52,559 --> 00:19:53,440
content

540
00:19:53,440 --> 00:19:56,000
or a template engine is basically um we

541
00:19:56,000 --> 00:19:57,280
have a template which

542
00:19:57,280 --> 00:19:59,840
is mixing both static and dynamic

543
00:19:59,840 --> 00:20:00,640
content

544
00:20:00,640 --> 00:20:02,640
and then the template engine is

545
00:20:02,640 --> 00:20:04,640
resolving and expanding this

546
00:20:04,640 --> 00:20:08,080
dynamic content by using some objects

547
00:20:08,080 --> 00:20:10,000
that are available in something that is

548
00:20:10,000 --> 00:20:12,559
known as the template context so in this

549
00:20:12,559 --> 00:20:13,200
example

550
00:20:13,200 --> 00:20:15,120
the user.name expression will be

551
00:20:15,120 --> 00:20:17,280
resolved by accessing the user

552
00:20:17,280 --> 00:20:21,520
object and then invoking the get name

553
00:20:21,520 --> 00:20:23,679
property the get name getter in this

554
00:20:23,679 --> 00:20:25,280
object because this

555
00:20:25,280 --> 00:20:28,240
invocation is 10 years and can lead to

556
00:20:28,240 --> 00:20:29,039
bypasses

557
00:20:29,039 --> 00:20:31,760
of or arbitrary code execution then

558
00:20:31,760 --> 00:20:33,360
these template engines are normally

559
00:20:33,360 --> 00:20:34,080
sandbox

560
00:20:34,080 --> 00:20:36,799
in order to prevent further access of

561
00:20:36,799 --> 00:20:37,440
methods

562
00:20:37,440 --> 00:20:38,799
reflection through reflection that

563
00:20:38,799 --> 00:20:40,640
should not be allowed

564
00:20:40,640 --> 00:20:42,960
so apart from those objects like users

565
00:20:42,960 --> 00:20:45,120
that are directly used in in the

566
00:20:45,120 --> 00:20:46,000
template

567
00:20:46,000 --> 00:20:48,000
these frameworks and this content

568
00:20:48,000 --> 00:20:49,919
management system normally exposed a

569
00:20:49,919 --> 00:20:51,440
number of other objects

570
00:20:51,440 --> 00:20:53,520
to the template context this is known as

571
00:20:53,520 --> 00:20:54,799
the template api

572
00:20:54,799 --> 00:20:57,200
and in includes things like the

573
00:20:57,200 --> 00:20:59,280
satellite request our response

574
00:20:59,280 --> 00:21:02,640
the servlet context just to mention a

575
00:21:02,640 --> 00:21:03,840
few

576
00:21:03,840 --> 00:21:07,280
so the first kind of bypass that we will

577
00:21:07,280 --> 00:21:08,559
be using is

578
00:21:08,559 --> 00:21:12,000
trying to find objects in this context

579
00:21:12,000 --> 00:21:14,720
which can be used to get remote code

580
00:21:14,720 --> 00:21:15,679
execution right

581
00:21:15,679 --> 00:21:17,520
so these are genetic in the sense that

582
00:21:17,520 --> 00:21:19,679
no matter if it's uh we are

583
00:21:19,679 --> 00:21:22,400
using jinjaba or free marker those

584
00:21:22,400 --> 00:21:23,440
should be working

585
00:21:23,440 --> 00:21:26,480
regardless of the engine so first of all

586
00:21:26,480 --> 00:21:27,200
we need to

587
00:21:27,200 --> 00:21:30,640
see and analyze what is in the context

588
00:21:30,640 --> 00:21:32,640
right so for that if we get access to

589
00:21:32,640 --> 00:21:35,120
the java runtime we can instrument it

590
00:21:35,120 --> 00:21:37,520
or debug it and then dump the context

591
00:21:37,520 --> 00:21:39,600
and analyze those objects

592
00:21:39,600 --> 00:21:42,559
if not we have to read the documentation

593
00:21:42,559 --> 00:21:44,159
maybe brute force or

594
00:21:44,159 --> 00:21:46,320
guess some common names like request or

595
00:21:46,320 --> 00:21:47,760
break or response rest

596
00:21:47,760 --> 00:21:50,400
for example and then in some cases like

597
00:21:50,400 --> 00:21:51,200
free marker

598
00:21:51,200 --> 00:21:54,640
we are able to actually list all the

599
00:21:54,640 --> 00:21:56,159
objects in the context through some

600
00:21:56,159 --> 00:21:59,039
special variables

601
00:21:59,039 --> 00:22:00,720
apart from those objects that are

602
00:22:00,720 --> 00:22:02,640
directly exposed we have some

603
00:22:02,640 --> 00:22:04,720
indirectly exposed objects like for

604
00:22:04,720 --> 00:22:06,640
example if the request

605
00:22:06,640 --> 00:22:09,919
is exposed all of the request attributes

606
00:22:09,919 --> 00:22:12,159
are exposed as well so same thing with

607
00:22:12,159 --> 00:22:14,159
the session and the satellite context

608
00:22:14,159 --> 00:22:16,320
and we will be able to find very

609
00:22:16,320 --> 00:22:18,400
interesting objects yeah

610
00:22:18,400 --> 00:22:21,520
in this set of attributes so let's see

611
00:22:21,520 --> 00:22:22,960
an example of how many

612
00:22:22,960 --> 00:22:26,960
objects we are able to find in a

613
00:22:26,960 --> 00:22:28,880
regular content management system like

614
00:22:28,880 --> 00:22:30,559
for example life ray

615
00:22:30,559 --> 00:22:32,159
that's what we call object dumpster

616
00:22:32,159 --> 00:22:34,240
diving and you will see why in few

617
00:22:34,240 --> 00:22:35,360
minutes

618
00:22:35,360 --> 00:22:37,360
so um this is the template that we will

619
00:22:37,360 --> 00:22:39,200
be using first of all

620
00:22:39,200 --> 00:22:41,360
we will be listing all the context

621
00:22:41,360 --> 00:22:42,799
objects by using the

622
00:22:42,799 --> 00:22:46,000
dot data model variable then we will be

623
00:22:46,000 --> 00:22:47,840
listing all the attributes in the

624
00:22:47,840 --> 00:22:50,000
request and then the attributes in the

625
00:22:50,000 --> 00:22:51,760
session and then the attributes in the

626
00:22:51,760 --> 00:22:52,960
servlet context

627
00:22:52,960 --> 00:22:55,200
and because the selfless context give us

628
00:22:55,200 --> 00:22:56,720
access to the spring

629
00:22:56,720 --> 00:22:58,960
application context we will also be

630
00:22:58,960 --> 00:23:00,240
listing all of the

631
00:23:00,240 --> 00:23:03,520
spring bins that are available to us

632
00:23:03,520 --> 00:23:07,360
so if we render these

633
00:23:07,360 --> 00:23:09,840
this template we will see all of the

634
00:23:09,840 --> 00:23:10,960
context objects

635
00:23:10,960 --> 00:23:13,440
those are normally exposed by by the

636
00:23:13,440 --> 00:23:14,240
framework or

637
00:23:14,240 --> 00:23:17,360
cms and those are kind of safe

638
00:23:17,360 --> 00:23:20,320
sometimes but apart from that we have

639
00:23:20,320 --> 00:23:23,039
access to a bunch of request attributes

640
00:23:23,039 --> 00:23:25,280
a bunch of session attributes and a

641
00:23:25,280 --> 00:23:26,400
bunch of

642
00:23:26,400 --> 00:23:28,640
self-led context attributes including

643
00:23:28,640 --> 00:23:29,840
things like this

644
00:23:29,840 --> 00:23:31,919
instance manager that we will be using

645
00:23:31,919 --> 00:23:34,400
to get through local execution

646
00:23:34,400 --> 00:23:36,080
we also have access to the spring web

647
00:23:36,080 --> 00:23:38,080
application context as we mentioned

648
00:23:38,080 --> 00:23:39,679
which will give us access to all of the

649
00:23:39,679 --> 00:23:42,480
spring bins registered in this context

650
00:23:42,480 --> 00:23:45,679
which are in the order of hundreds

651
00:23:45,679 --> 00:23:50,720
so we get a total of almost 900 um

652
00:23:50,720 --> 00:23:53,760
objects available to us and

653
00:23:53,760 --> 00:23:55,279
those are objects that expose other

654
00:23:55,279 --> 00:23:57,279
objects so we normally get access to

655
00:23:57,279 --> 00:23:58,720
thousands of objects

656
00:23:58,720 --> 00:24:00,799
so this is why we call it object

657
00:24:00,799 --> 00:24:02,320
dumpster diving right because this is

658
00:24:02,320 --> 00:24:04,000
how we felt like looking for a few

659
00:24:04,000 --> 00:24:05,360
interesting objects

660
00:24:05,360 --> 00:24:07,760
in hundreds and thousands and thousands

661
00:24:07,760 --> 00:24:08,559
of objects

662
00:24:08,559 --> 00:24:10,799
that in most cases should not even be

663
00:24:10,799 --> 00:24:12,880
exposed to the template in the first

664
00:24:12,880 --> 00:24:14,880
in the first case so we will be

665
00:24:14,880 --> 00:24:17,200
reviewing the top three

666
00:24:17,200 --> 00:24:19,120
objects that lead to remote execution

667
00:24:19,120 --> 00:24:20,559
that we were able to find

668
00:24:20,559 --> 00:24:22,320
and the number one will be the class

669
00:24:22,320 --> 00:24:24,400
loader which was available in 10 out of

670
00:24:24,400 --> 00:24:26,159
the 10 content management systems that

671
00:24:26,159 --> 00:24:27,200
we analyzed

672
00:24:27,200 --> 00:24:28,799
this is normally available through the

673
00:24:28,799 --> 00:24:30,559
class object

674
00:24:30,559 --> 00:24:33,039
but since that one is normally blocked

675
00:24:33,039 --> 00:24:34,960
you can still get access to it through

676
00:24:34,960 --> 00:24:36,799
either the protection domain or self-led

677
00:24:36,799 --> 00:24:38,720
context that which are normally not

678
00:24:38,720 --> 00:24:42,000
non-blocked uh once that we have access

679
00:24:42,000 --> 00:24:42,400
to

680
00:24:42,400 --> 00:24:44,880
a class loader we can obviously load

681
00:24:44,880 --> 00:24:46,400
arbitrary classes

682
00:24:46,400 --> 00:24:48,480
or class path resources from that class

683
00:24:48,480 --> 00:24:50,400
loader but we can also

684
00:24:50,400 --> 00:24:52,400
read any arbitrary file from the file

685
00:24:52,400 --> 00:24:54,960
system by accessing a url

686
00:24:54,960 --> 00:24:57,919
object and then pointing the underlying

687
00:24:57,919 --> 00:24:58,640
uri

688
00:24:58,640 --> 00:25:01,679
to our arbitrary file and then

689
00:25:01,679 --> 00:25:03,200
opening a connection and reading the

690
00:25:03,200 --> 00:25:06,159
byte from from that connection

691
00:25:06,159 --> 00:25:08,000
so because these content management

692
00:25:08,000 --> 00:25:10,640
systems are normally deployed on top

693
00:25:10,640 --> 00:25:13,200
of an application server or satellite

694
00:25:13,200 --> 00:25:14,080
containers

695
00:25:14,080 --> 00:25:16,640
then those class loaders that we are

696
00:25:16,640 --> 00:25:18,480
going to get access to are normally

697
00:25:18,480 --> 00:25:20,240
instances of web application class

698
00:25:20,240 --> 00:25:21,039
loaders

699
00:25:21,039 --> 00:25:23,600
which expose a number of features and

700
00:25:23,600 --> 00:25:25,039
capabilities

701
00:25:25,039 --> 00:25:28,480
on top of the regular class loader ones

702
00:25:28,480 --> 00:25:30,240
so we were able to abuse those

703
00:25:30,240 --> 00:25:32,400
additional methods to get remote code

704
00:25:32,400 --> 00:25:34,559
execution in nine out of the ten

705
00:25:34,559 --> 00:25:37,760
cms like systems that we analyzed and we

706
00:25:37,760 --> 00:25:38,559
don't have time

707
00:25:38,559 --> 00:25:40,240
unfortunately to cover them today

708
00:25:40,240 --> 00:25:41,760
because they are sometimes

709
00:25:41,760 --> 00:25:43,840
complex and and will have time in this

710
00:25:43,840 --> 00:25:45,520
40 minutes presentation

711
00:25:45,520 --> 00:25:48,320
but they range from being able to upload

712
00:25:48,320 --> 00:25:49,200
a website

713
00:25:49,200 --> 00:25:51,120
to instantiate arbitrary objects to

714
00:25:51,120 --> 00:25:52,400
perform jndi

715
00:25:52,400 --> 00:25:54,960
injection attacks or to initialize

716
00:25:54,960 --> 00:25:56,480
attacker control classes

717
00:25:56,480 --> 00:25:58,559
leading to the execution of the static

718
00:25:58,559 --> 00:26:01,760
initializer of that class

719
00:26:01,760 --> 00:26:05,039
so the number two object that leads to

720
00:26:05,039 --> 00:26:07,120
remote code execution and that we found

721
00:26:07,120 --> 00:26:07,679
in nine

722
00:26:07,679 --> 00:26:10,559
out of the ten cms cms-like systems that

723
00:26:10,559 --> 00:26:11,600
we analyzed

724
00:26:11,600 --> 00:26:13,679
is the instance manager so an instance

725
00:26:13,679 --> 00:26:15,919
manager is an object that is capable of

726
00:26:15,919 --> 00:26:19,200
instantiating arbitrary types

727
00:26:19,200 --> 00:26:22,080
you normally find it either as part of

728
00:26:22,080 --> 00:26:23,360
the selfless context

729
00:26:23,360 --> 00:26:25,679
attributes or through one of these web

730
00:26:25,679 --> 00:26:27,440
application class loaders that we

731
00:26:27,440 --> 00:26:28,880
mentioned before

732
00:26:28,880 --> 00:26:30,559
once that we get access to the instance

733
00:26:30,559 --> 00:26:32,159
manager sometimes also called

734
00:26:32,159 --> 00:26:34,400
object factory you can instantiate

735
00:26:34,400 --> 00:26:35,840
arbitrary types

736
00:26:35,840 --> 00:26:37,360
in this case we are instantiating the

737
00:26:37,360 --> 00:26:39,279
script engine manager in order to

738
00:26:39,279 --> 00:26:41,440
evaluate arbitrary javascript and java

739
00:26:41,440 --> 00:26:42,080
code

740
00:26:42,080 --> 00:26:44,159
but once that you can instantiate

741
00:26:44,159 --> 00:26:45,120
arbitrary types

742
00:26:45,120 --> 00:26:46,799
you can get remote code execution

743
00:26:46,799 --> 00:26:48,740
through a number of different vectors

744
00:26:48,740 --> 00:26:50,159
[Music]

745
00:26:50,159 --> 00:26:52,799
the number three object that we found in

746
00:26:52,799 --> 00:26:54,720
four out of the ten systems

747
00:26:54,720 --> 00:26:56,400
is the spring application context

748
00:26:56,400 --> 00:26:58,159
actually the only four systems that were

749
00:26:58,159 --> 00:27:00,000
using a spring framework

750
00:27:00,000 --> 00:27:03,120
um underneath to manage

751
00:27:03,120 --> 00:27:06,400
the the dependency injection so we were

752
00:27:06,400 --> 00:27:08,000
able to access the spring application

753
00:27:08,000 --> 00:27:09,279
context through

754
00:27:09,279 --> 00:27:11,360
these satellite context attributes but

755
00:27:11,360 --> 00:27:12,720
also a spring

756
00:27:12,720 --> 00:27:16,080
mvc if it's been used will inject a

757
00:27:16,080 --> 00:27:18,240
variable called spring macro request

758
00:27:18,240 --> 00:27:20,480
context into the template context

759
00:27:20,480 --> 00:27:22,960
and you can use that one to get access

760
00:27:22,960 --> 00:27:25,039
to the web application context

761
00:27:25,039 --> 00:27:26,559
so from there you can get access to the

762
00:27:26,559 --> 00:27:28,720
class loader to the environment

763
00:27:28,720 --> 00:27:30,640
including things like the environment

764
00:27:30,640 --> 00:27:33,360
variables but also the spring properties

765
00:27:33,360 --> 00:27:34,640
which will include things like

766
00:27:34,640 --> 00:27:36,640
encryption keys and another interesting

767
00:27:36,640 --> 00:27:37,440
stuff

768
00:27:37,440 --> 00:27:39,520
but probably most interesting is the

769
00:27:39,520 --> 00:27:40,480
access to them

770
00:27:40,480 --> 00:27:43,200
to the spring bins right as we saw in

771
00:27:43,200 --> 00:27:44,960
life ray we get access to hundreds and

772
00:27:44,960 --> 00:27:46,399
hundreds of objects

773
00:27:46,399 --> 00:27:49,279
which are normally meant to control the

774
00:27:49,279 --> 00:27:51,520
application logic right things like

775
00:27:51,520 --> 00:27:54,480
creating new users deleting users and

776
00:27:54,480 --> 00:27:55,440
creating new

777
00:27:55,440 --> 00:27:57,760
transactions and things like that and

778
00:27:57,760 --> 00:27:59,200
because these are normally

779
00:27:59,200 --> 00:28:02,240
behind the layer of authorization

780
00:28:02,240 --> 00:28:03,919
they will give you access to those

781
00:28:03,919 --> 00:28:06,000
operations without any further

782
00:28:06,000 --> 00:28:08,399
authentication or authorization checks

783
00:28:08,399 --> 00:28:10,320
you can also do other interesting stuff

784
00:28:10,320 --> 00:28:12,320
like disabling the template engines and

785
00:28:12,320 --> 00:28:13,760
box all together

786
00:28:13,760 --> 00:28:17,120
and also instantiate arbitrary objects

787
00:28:17,120 --> 00:28:20,559
through um things like uh json and

788
00:28:20,559 --> 00:28:21,360
martial or

789
00:28:21,360 --> 00:28:24,880
xml deserializer so those were like the

790
00:28:24,880 --> 00:28:27,279
top three ones and we found other

791
00:28:27,279 --> 00:28:29,200
objects leading to remote code execution

792
00:28:29,200 --> 00:28:31,200
plenty of them but we don't have time to

793
00:28:31,200 --> 00:28:32,559
cover them today

794
00:28:32,559 --> 00:28:34,880
again this will be explained and covered

795
00:28:34,880 --> 00:28:36,320
in the white paper that we will be

796
00:28:36,320 --> 00:28:38,159
releasing

797
00:28:38,159 --> 00:28:40,559
so those were generic in the sense that

798
00:28:40,559 --> 00:28:42,960
they were dependent on finding objects

799
00:28:42,960 --> 00:28:45,520
in the context no matter if that was the

800
00:28:45,520 --> 00:28:46,240
context

801
00:28:46,240 --> 00:28:48,799
of the gene java engine or the free

802
00:28:48,799 --> 00:28:49,840
marker one

803
00:28:49,840 --> 00:28:53,120
now we will be reviewing some of the

804
00:28:53,120 --> 00:28:55,279
specific bypasses that we found for

805
00:28:55,279 --> 00:28:56,880
these four different

806
00:28:56,880 --> 00:28:59,360
template engines so we will start with

807
00:28:59,360 --> 00:29:00,880
free marker

808
00:29:00,880 --> 00:29:02,880
it's probably the most popular one also

809
00:29:02,880 --> 00:29:04,640
the one that got more attention from the

810
00:29:04,640 --> 00:29:06,080
security community

811
00:29:06,080 --> 00:29:08,080
starting by james kettle who presented

812
00:29:08,080 --> 00:29:10,399
back into 2015

813
00:29:10,399 --> 00:29:12,799
this presentation about um server side

814
00:29:12,799 --> 00:29:14,559
template injection actually introducing

815
00:29:14,559 --> 00:29:15,520
the whole

816
00:29:15,520 --> 00:29:18,159
category type and he found a way of

817
00:29:18,159 --> 00:29:20,159
bypassing the sandbox by using an

818
00:29:20,159 --> 00:29:22,720
add-on that is was part of the default

819
00:29:22,720 --> 00:29:24,480
configuration at that time

820
00:29:24,480 --> 00:29:26,480
so uh tonito robert found a different

821
00:29:26,480 --> 00:29:28,480
bypass i've been able to instantiate

822
00:29:28,480 --> 00:29:29,679
arbitrary objects

823
00:29:29,679 --> 00:29:31,760
but this bypass is not universal in the

824
00:29:31,760 --> 00:29:33,760
sense that it depends on

825
00:29:33,760 --> 00:29:35,679
one of these add-ons that is not part of

826
00:29:35,679 --> 00:29:37,279
the default configuration

827
00:29:37,279 --> 00:29:40,320
and also being able to access some

828
00:29:40,320 --> 00:29:43,279
special fields and some objects in third

829
00:29:43,279 --> 00:29:44,320
party libraries

830
00:29:44,320 --> 00:29:46,720
which are not part of the free market

831
00:29:46,720 --> 00:29:48,960
distribution

832
00:29:48,960 --> 00:29:51,200
last but not least ryan hansen at the

833
00:29:51,200 --> 00:29:53,039
same time that we were performing this

834
00:29:53,039 --> 00:29:56,080
this research published a bypass

835
00:29:56,080 --> 00:29:59,039
that works only in tomcat and that leads

836
00:29:59,039 --> 00:30:00,960
to remote code execution by uploading

837
00:30:00,960 --> 00:30:02,080
our webshell so

838
00:30:02,080 --> 00:30:03,760
those were like the ones that we were

839
00:30:03,760 --> 00:30:06,399
aware of and then we will be reviewing

840
00:30:06,399 --> 00:30:08,720
the sandbox in in free market so this

841
00:30:08,720 --> 00:30:11,360
sandbox is based on blocking individual

842
00:30:11,360 --> 00:30:12,159
methods

843
00:30:12,159 --> 00:30:14,240
like for example the java lang class get

844
00:30:14,240 --> 00:30:15,840
class loader method is blocked you

845
00:30:15,840 --> 00:30:16,559
cannot

846
00:30:16,559 --> 00:30:19,120
invoke it but as we mentioned before we

847
00:30:19,120 --> 00:30:20,640
have different ways of getting an

848
00:30:20,640 --> 00:30:22,080
instance of a class loader like for

849
00:30:22,080 --> 00:30:24,399
example using the self-led context

850
00:30:24,399 --> 00:30:26,559
then all the class loader methods are

851
00:30:26,559 --> 00:30:28,159
allowed they are not blocked by this

852
00:30:28,159 --> 00:30:29,039
block list

853
00:30:29,039 --> 00:30:31,120
so if you find an instance of a web

854
00:30:31,120 --> 00:30:33,120
application class loader that is already

855
00:30:33,120 --> 00:30:34,480
jackpot you can get remote code

856
00:30:34,480 --> 00:30:35,600
execution

857
00:30:35,600 --> 00:30:39,679
otherwise you can still get access to

858
00:30:39,679 --> 00:30:43,039
or get remote execution by accessing

859
00:30:43,039 --> 00:30:44,640
public static fields

860
00:30:44,640 --> 00:30:47,279
which is also allowed by the block list

861
00:30:47,279 --> 00:30:49,360
so in order to do that we found

862
00:30:49,360 --> 00:30:52,159
interesting public static fields within

863
00:30:52,159 --> 00:30:52,960
the

864
00:30:52,960 --> 00:30:56,240
free market library so we use codequill

865
00:30:56,240 --> 00:30:56,880
for that

866
00:30:56,880 --> 00:30:58,640
if you are not familiar with codeql it's

867
00:30:58,640 --> 00:31:00,000
a language that

868
00:31:00,000 --> 00:31:03,279
allows you to query source code as you

869
00:31:03,279 --> 00:31:06,240
query a database for example using sql

870
00:31:06,240 --> 00:31:08,000
and we don't have time to explain the

871
00:31:08,000 --> 00:31:09,279
the query here

872
00:31:09,279 --> 00:31:11,600
but the idea what we are asking for is

873
00:31:11,600 --> 00:31:12,640
okay find me

874
00:31:12,640 --> 00:31:15,279
all the public static fields which

875
00:31:15,279 --> 00:31:17,360
contain or of a given type which

876
00:31:17,360 --> 00:31:17,840
contains

877
00:31:17,840 --> 00:31:20,640
a method that allows me to instantiate

878
00:31:20,640 --> 00:31:22,000
arbitrary types

879
00:31:22,000 --> 00:31:24,080
so running this query on free marker

880
00:31:24,080 --> 00:31:25,440
code we found

881
00:31:25,440 --> 00:31:27,919
four different results all of them are

882
00:31:27,919 --> 00:31:30,159
fields from different

883
00:31:30,159 --> 00:31:32,799
interfaces or classes but what they have

884
00:31:32,799 --> 00:31:34,240
in common is that all of them

885
00:31:34,240 --> 00:31:37,279
extend from the bins wrapper

886
00:31:37,279 --> 00:31:39,120
class and this class contains a new

887
00:31:39,120 --> 00:31:41,039
instance method which will allow us to

888
00:31:41,039 --> 00:31:42,799
instantiate arbitrary

889
00:31:42,799 --> 00:31:47,279
types so with that the universal bypass

890
00:31:47,279 --> 00:31:50,080
is basically based on getting an

891
00:31:50,080 --> 00:31:51,679
instance of the class loader either

892
00:31:51,679 --> 00:31:53,200
through the protection domain or through

893
00:31:53,200 --> 00:31:55,600
the self-led context and then loading

894
00:31:55,600 --> 00:31:56,960
the object wrapper

895
00:31:56,960 --> 00:31:59,600
interface and from there grabbing the

896
00:31:59,600 --> 00:32:00,240
default

897
00:32:00,240 --> 00:32:02,559
wrapper field because this field

898
00:32:02,559 --> 00:32:03,360
contains

899
00:32:03,360 --> 00:32:04,880
the new instance method we can

900
00:32:04,880 --> 00:32:06,880
instantiate arbitrary types

901
00:32:06,880 --> 00:32:10,080
and in this case to keep the bypass

902
00:32:10,080 --> 00:32:12,080
self-contained in free market libraries

903
00:32:12,080 --> 00:32:13,840
we are using the execute class which

904
00:32:13,840 --> 00:32:14,559
will

905
00:32:14,559 --> 00:32:16,799
allow us to invoke arbitrary system

906
00:32:16,799 --> 00:32:17,679
commands

907
00:32:17,679 --> 00:32:21,440
so this was fixed in in free market 230

908
00:32:21,440 --> 00:32:24,720
back in march and it's still vulnerable

909
00:32:24,720 --> 00:32:27,360
if the legacy access policy is

910
00:32:27,360 --> 00:32:30,559
configured but that's not the default

911
00:32:30,559 --> 00:32:32,960
so as we mentioned before if you get

912
00:32:32,960 --> 00:32:34,799
access to the spring bins

913
00:32:34,799 --> 00:32:37,919
you can also disable the sandbox in this

914
00:32:37,919 --> 00:32:39,360
case by accessing the free market

915
00:32:39,360 --> 00:32:40,399
configuration

916
00:32:40,399 --> 00:32:42,159
and then getting the default

917
00:32:42,159 --> 00:32:44,480
configuration that is non-sandboxed

918
00:32:44,480 --> 00:32:46,320
and getting the class resolver from

919
00:32:46,320 --> 00:32:48,799
there and setting that class resolver as

920
00:32:48,799 --> 00:32:50,880
the class resolver for the current and

921
00:32:50,880 --> 00:32:51,519
sandbox

922
00:32:51,519 --> 00:32:53,840
configuration so effectively disabling

923
00:32:53,840 --> 00:32:56,320
the sandbox altogether

924
00:32:56,320 --> 00:33:00,240
and re-enabling the old payload by james

925
00:33:00,240 --> 00:33:01,120
kettle

926
00:33:01,120 --> 00:33:04,159
from five years ago so now switching to

927
00:33:04,159 --> 00:33:06,799
velocity velocity sandbox is also known

928
00:33:06,799 --> 00:33:08,720
as security spectre

929
00:33:08,720 --> 00:33:11,120
and is pretty effective in the way that

930
00:33:11,120 --> 00:33:13,200
it's not based on individual methods

931
00:33:13,200 --> 00:33:14,720
it's blocking whole

932
00:33:14,720 --> 00:33:17,919
name spaces and and also classes so for

933
00:33:17,919 --> 00:33:18,720
example

934
00:33:18,720 --> 00:33:21,360
the java line reflect namespace is

935
00:33:21,360 --> 00:33:23,200
blocked so you cannot use

936
00:33:23,200 --> 00:33:26,240
java reflection api you cannot use any

937
00:33:26,240 --> 00:33:28,640
method on class or on class loader

938
00:33:28,640 --> 00:33:32,320
classes for example but we found a flow

939
00:33:32,320 --> 00:33:34,640
in the implementation of this sandbox

940
00:33:34,640 --> 00:33:36,320
because when they are checking this

941
00:33:36,320 --> 00:33:37,840
block list they are not checking the

942
00:33:37,840 --> 00:33:39,039
whole hierarchy

943
00:33:39,039 --> 00:33:42,240
of the classes for the method being

944
00:33:42,240 --> 00:33:43,279
invoked

945
00:33:43,279 --> 00:33:45,440
like for example in when we invoke the

946
00:33:45,440 --> 00:33:47,440
load class from the class loader

947
00:33:47,440 --> 00:33:50,000
we are not checking the whole instance

948
00:33:50,000 --> 00:33:52,000
at the whole hierarchy of this

949
00:33:52,000 --> 00:33:54,480
object right we are just checking the

950
00:33:54,480 --> 00:33:55,279
current

951
00:33:55,279 --> 00:33:57,279
type which in this case because it was

952
00:33:57,279 --> 00:33:59,120
deployed on top of tonkat it's an

953
00:33:59,120 --> 00:34:00,799
instance of parallel web app class

954
00:34:00,799 --> 00:34:01,440
loader

955
00:34:01,440 --> 00:34:04,399
but what it's important here is it it

956
00:34:04,399 --> 00:34:06,080
won't be an instance of the java land

957
00:34:06,080 --> 00:34:06,960
class loader

958
00:34:06,960 --> 00:34:09,918
that is the only one that is blocked by

959
00:34:09,918 --> 00:34:11,199
the uh block list

960
00:34:11,199 --> 00:34:14,560
so with that we are able to basically um

961
00:34:14,560 --> 00:34:16,560
bypass this limitation and execute

962
00:34:16,560 --> 00:34:18,079
arbitrary methods from

963
00:34:18,079 --> 00:34:19,679
from class loaders and get remote code

964
00:34:19,679 --> 00:34:21,520
execution so this was

965
00:34:21,520 --> 00:34:25,760
have fixed in two in version 2.3

966
00:34:25,760 --> 00:34:28,560
now moving to the jinjaba sandbox this

967
00:34:28,560 --> 00:34:30,320
is based in a very short

968
00:34:30,320 --> 00:34:33,440
method based block list which is only

969
00:34:33,440 --> 00:34:36,960
blocking nine different methods but

970
00:34:36,960 --> 00:34:39,040
it contains a piece of code here at the

971
00:34:39,040 --> 00:34:41,599
right which will basically

972
00:34:41,599 --> 00:34:44,719
improve the protection by preventing

973
00:34:44,719 --> 00:34:47,839
any method from returning an instance of

974
00:34:47,839 --> 00:34:48,879
java lang

975
00:34:48,879 --> 00:34:51,359
class so if we cannot get an instance of

976
00:34:51,359 --> 00:34:53,280
javelin class we cannot instantiate

977
00:34:53,280 --> 00:34:54,719
arbitrary types that's

978
00:34:54,719 --> 00:34:57,359
normally the case however there was a

979
00:34:57,359 --> 00:34:57,839
flow

980
00:34:57,839 --> 00:35:02,000
again in this case they are not blocking

981
00:35:02,000 --> 00:35:04,880
invocation of methods which return a

982
00:35:04,880 --> 00:35:07,119
race of classes or map of classes

983
00:35:07,119 --> 00:35:10,560
so that was the first part of the bypass

984
00:35:10,560 --> 00:35:12,400
the second part is that they are

985
00:35:12,400 --> 00:35:13,839
exposing these

986
00:35:13,839 --> 00:35:16,960
secret or hidden keyword called

987
00:35:16,960 --> 00:35:19,599
interpreter in in liter speech which

988
00:35:19,599 --> 00:35:21,599
will give you access to a bunch

989
00:35:21,599 --> 00:35:23,760
of objects including all the objects in

990
00:35:23,760 --> 00:35:25,040
the context but also

991
00:35:25,040 --> 00:35:27,680
the exposed functions filters and some

992
00:35:27,680 --> 00:35:28,960
other objects

993
00:35:28,960 --> 00:35:31,920
so putting these two parts together we

994
00:35:31,920 --> 00:35:33,040
were able to get

995
00:35:33,040 --> 00:35:35,040
the context from the interpreter and

996
00:35:35,040 --> 00:35:36,880
then getting all the functions

997
00:35:36,880 --> 00:35:39,200
exposed to the context and then getting

998
00:35:39,200 --> 00:35:40,240
the underlying

999
00:35:40,240 --> 00:35:43,040
method for one of these functions and

1000
00:35:43,040 --> 00:35:44,800
now we are able to get an instance of

1001
00:35:44,800 --> 00:35:46,800
the java lung reflect method

1002
00:35:46,800 --> 00:35:50,000
type from there we can get the

1003
00:35:50,000 --> 00:35:52,320
we can use the get parameter types which

1004
00:35:52,320 --> 00:35:54,160
will return an array of classes

1005
00:35:54,160 --> 00:35:56,240
and then access an individual element of

1006
00:35:56,240 --> 00:35:58,079
this array in order

1007
00:35:58,079 --> 00:36:00,720
to get finally an instance of a java

1008
00:36:00,720 --> 00:36:01,440
land class

1009
00:36:01,440 --> 00:36:03,359
from then from there you can get an

1010
00:36:03,359 --> 00:36:04,960
instance of the class loader and

1011
00:36:04,960 --> 00:36:08,079
launch any class loader based

1012
00:36:08,079 --> 00:36:11,200
attack so this was fixed in

1013
00:36:11,200 --> 00:36:14,560
version 254 and

1014
00:36:14,560 --> 00:36:17,839
that got this cv um so now we will move

1015
00:36:17,839 --> 00:36:18,240
to

1016
00:36:18,240 --> 00:36:21,200
pebble which unfortunately unfortunately

1017
00:36:21,200 --> 00:36:21,839
um

1018
00:36:21,839 --> 00:36:23,839
we found a couple of bypasses we

1019
00:36:23,839 --> 00:36:26,160
reported them to the maintainers but

1020
00:36:26,160 --> 00:36:28,640
they were not fixed on time so

1021
00:36:28,640 --> 00:36:32,079
we decided not to release um the um

1022
00:36:32,079 --> 00:36:36,079
the the bypasses

1023
00:36:36,079 --> 00:36:39,119
so far so with that uh we will

1024
00:36:39,119 --> 00:36:41,359
switch back to alexander to wrap up with

1025
00:36:41,359 --> 00:36:43,520
some takeaways

1026
00:36:43,520 --> 00:36:45,680
thank you alvaro first of all let's

1027
00:36:45,680 --> 00:36:49,599
summarize our results of this research

1028
00:36:49,599 --> 00:36:52,079
30 new vulnerabilities were found and

1029
00:36:52,079 --> 00:36:53,359
reported to the

1030
00:36:53,359 --> 00:36:56,000
vendors 20 different products are

1031
00:36:56,000 --> 00:36:56,720
affected

1032
00:36:56,720 --> 00:37:00,000
you can see their names on this slide

1033
00:37:00,000 --> 00:37:03,200
based on these results we are able to

1034
00:37:03,200 --> 00:37:05,200
make the next conclusion

1035
00:37:05,200 --> 00:37:07,359
content management system should be on

1036
00:37:07,359 --> 00:37:08,560
the radar

1037
00:37:08,560 --> 00:37:11,760
of red teams template for dynamic

1038
00:37:11,760 --> 00:37:12,400
content

1039
00:37:12,400 --> 00:37:15,280
that can be managed by user is the main

1040
00:37:15,280 --> 00:37:17,040
target in such systems

1041
00:37:17,040 --> 00:37:19,040
there are specific areas with higher

1042
00:37:19,040 --> 00:37:21,359
risk from security point of view

1043
00:37:21,359 --> 00:37:23,359
it is a good idea to perform security

1044
00:37:23,359 --> 00:37:25,839
review and testing for such places

1045
00:37:25,839 --> 00:37:28,800
always try to reduce attack surface as

1046
00:37:28,800 --> 00:37:30,160
much as you can

1047
00:37:30,160 --> 00:37:34,000
and stay safe thank you very much for

1048
00:37:34,000 --> 00:37:36,160
your attention and we hope we still have

1049
00:37:36,160 --> 00:37:38,160
a couple minutes for the answers on your

1050
00:37:38,160 --> 00:37:40,640
questions

1051
00:37:43,839 --> 00:37:46,960
hello everybody hello everybody if you

1052
00:37:46,960 --> 00:37:48,240
have question we will be

1053
00:37:48,240 --> 00:37:50,400
here in chat window for the next 20

1054
00:37:50,400 --> 00:37:52,960
minutes and we'll try to answer of them

1055
00:37:52,960 --> 00:37:54,880
slides and white paper should be

1056
00:37:54,880 --> 00:37:57,359
published today evening on black hat

1057
00:37:57,359 --> 00:37:58,079
server

1058
00:37:58,079 --> 00:38:02,400
so check it out later in the evening

1059
00:38:02,400 --> 00:38:05,760
also uh we will be hosting a q a session

1060
00:38:05,760 --> 00:38:07,680
of 30 minutes tomorrow at 10

1061
00:38:07,680 --> 00:38:10,800
30 a.m pacific time um

1062
00:38:10,800 --> 00:38:13,119
at the depth conversion of this chat of

1063
00:38:13,119 --> 00:38:15,040
this talk series so if you have any

1064
00:38:15,040 --> 00:38:16,800
questions that we were not able to

1065
00:38:16,800 --> 00:38:19,200
answer today you are very welcome to

1066
00:38:19,200 --> 00:38:21,200
join our q a session tomorrow and we

1067
00:38:21,200 --> 00:38:24,879
will be answering all the questions

1068
00:38:27,200 --> 00:38:29,520
so i think we have a question that is

1069
00:38:29,520 --> 00:38:31,200
already answered

1070
00:38:31,200 --> 00:38:33,200
so the white paper will be available in

1071
00:38:33,200 --> 00:38:34,800
the black hat server

1072
00:38:34,800 --> 00:38:38,640
in the same page where the talk is

1073
00:38:38,640 --> 00:38:40,480
announced where the briefing is

1074
00:38:40,480 --> 00:38:42,240
announced both the

1075
00:38:42,240 --> 00:38:44,720
slides pdf and the whitepaper pdfs will

1076
00:38:44,720 --> 00:38:46,800
be published

1077
00:38:46,800 --> 00:38:49,760
and i think that will be later today or

1078
00:38:49,760 --> 00:39:00,480
maybe tomorrow

1079
00:39:00,480 --> 00:39:02,960
so with that i think there are no other

1080
00:39:02,960 --> 00:39:05,599
questions so we can

1081
00:39:05,599 --> 00:39:09,359
um thank you all for attending our talk

1082
00:39:09,359 --> 00:39:12,000
we really hope you liked it and again if

1083
00:39:12,000 --> 00:39:13,119
you have any

1084
00:39:13,119 --> 00:39:15,520
questions that we will be hosting this q

1085
00:39:15,520 --> 00:39:17,040
a session tomorrow

1086
00:39:17,040 --> 00:39:23,599
thank you thank you

