1
00:00:03,990 --> 00:00:13,810
[Music]

2
00:00:14,799 --> 00:00:17,920
welcome to this talk when tls hacks you

3
00:00:17,920 --> 00:00:19,199
i'm actually going to start off with the

4
00:00:19,199 --> 00:00:21,279
demo this is going to be weird

5
00:00:21,279 --> 00:00:22,800
this isn't a concrete attack scenario

6
00:00:22,800 --> 00:00:24,240
but hopefully should make everyone

7
00:00:24,240 --> 00:00:26,400
curious about what's going on

8
00:00:26,400 --> 00:00:28,720
for those familiar with ssrf the

9
00:00:28,720 --> 00:00:30,320
implications will be fairly clear

10
00:00:30,320 --> 00:00:32,000
but i'll explain them right after the

11
00:00:32,000 --> 00:00:33,840
demo for everyone else

12
00:00:33,840 --> 00:00:35,680
after that the attack scenario examples

13
00:00:35,680 --> 00:00:37,360
are going to gradually move towards real

14
00:00:37,360 --> 00:00:38,320
stuff

15
00:00:38,320 --> 00:00:39,840
but i find it's easiest to first look at

16
00:00:39,840 --> 00:00:41,760
the simplest cases and then

17
00:00:41,760 --> 00:00:43,280
start expanding to look at real world

18
00:00:43,280 --> 00:00:46,239
stuff for now though

19
00:00:46,239 --> 00:00:47,600
let's see the essence of the dangerous

20
00:00:47,600 --> 00:00:50,640
property of dls that this talk is about

21
00:00:50,640 --> 00:00:54,559
oh there we go

22
00:00:54,559 --> 00:00:57,680
here's memcached a popular cache that

23
00:00:57,680 --> 00:00:58,640
commonly

24
00:00:58,640 --> 00:01:00,239
commonly runs on port one one two and

25
00:01:00,239 --> 00:01:02,399
one i have it installed here so you can

26
00:01:02,399 --> 00:01:04,400
see that for the key named z

27
00:01:04,400 --> 00:01:06,560
there is currently no entry if you're

28
00:01:06,560 --> 00:01:08,080
not familiar with memcache this is how

29
00:01:08,080 --> 00:01:09,439
stuff communicates with it

30
00:01:09,439 --> 00:01:12,240
a new line delimited tcp protocol now

31
00:01:12,240 --> 00:01:14,080
i'll do something that

32
00:01:14,080 --> 00:01:16,080
you might not expect to affect memcached

33
00:01:16,080 --> 00:01:18,560
i'll make a request to an https url

34
00:01:18,560 --> 00:01:20,560
the dash l enables redirects and the

35
00:01:20,560 --> 00:01:22,080
dash v lets us see everything that's

36
00:01:22,080 --> 00:01:23,920
going on

37
00:01:23,920 --> 00:01:26,000
so you can see that the end point after

38
00:01:26,000 --> 00:01:27,040
a bit is

39
00:01:27,040 --> 00:01:30,159
redirecting to itself i sped this up

40
00:01:30,159 --> 00:01:31,680
because this is a lightning talk and the

41
00:01:31,680 --> 00:01:33,119
string of redirects takes a couple of

42
00:01:33,119 --> 00:01:34,720
minutes

43
00:01:34,720 --> 00:01:36,400
but the redirects don't go on forever

44
00:01:36,400 --> 00:01:37,759
[Music]

45
00:01:37,759 --> 00:01:40,320
after a bit we get an error and now for

46
00:01:40,320 --> 00:01:41,439
the magic

47
00:01:41,439 --> 00:01:44,560
going back to memcached if we rerun the

48
00:01:44,560 --> 00:01:48,320
same get command we see an entry appear

49
00:01:48,640 --> 00:01:50,479
the odd thing is that text never showed

50
00:01:50,479 --> 00:01:51,920
up in the curl command

51
00:01:51,920 --> 00:01:54,159
or in any of the redirects so somehow

52
00:01:54,159 --> 00:01:55,920
the server we were talking to had to do

53
00:01:55,920 --> 00:01:58,479
something with tls to trick curl into

54
00:01:58,479 --> 00:02:00,399
putting it in there so even though i

55
00:02:00,399 --> 00:02:01,759
didn't just do anything aside from

56
00:02:01,759 --> 00:02:02,799
hacking myself

57
00:02:02,799 --> 00:02:06,719
what happened was weird and potentially

58
00:02:06,840 --> 00:02:08,160
useful

59
00:02:08,160 --> 00:02:10,000
but here's where i'm going with this

60
00:02:10,000 --> 00:02:11,599
because not everyone is into these sorts

61
00:02:11,599 --> 00:02:12,560
of attacks

62
00:02:12,560 --> 00:02:14,959
i'm going to start off with exactly what

63
00:02:14,959 --> 00:02:17,040
makes this useful as an attacker

64
00:02:17,040 --> 00:02:18,400
i'll then move on to some stuff that

65
00:02:18,400 --> 00:02:20,000
shows just how widely these attacks can

66
00:02:20,000 --> 00:02:20,959
be applied

67
00:02:20,959 --> 00:02:23,280
and then get to some recommendations for

68
00:02:23,280 --> 00:02:24,310
what to do about them

69
00:02:24,310 --> 00:02:25,920
[Music]

70
00:02:25,920 --> 00:02:27,599
so to start off with there's an existing

71
00:02:27,599 --> 00:02:30,319
category of vulnerability called ssrf

72
00:02:30,319 --> 00:02:31,760
it stands for server side request

73
00:02:31,760 --> 00:02:33,920
forgery it's where you effectively fish

74
00:02:33,920 --> 00:02:35,680
a server into doing something by sending

75
00:02:35,680 --> 00:02:38,319
it a url

76
00:02:38,319 --> 00:02:39,920
last year at black hat i demonstrated a

77
00:02:39,920 --> 00:02:41,760
bunch of these vulnerabilities in apple

78
00:02:41,760 --> 00:02:44,080
pay and in web book receivers

79
00:02:44,080 --> 00:02:45,599
i'm not going to go into these as much

80
00:02:45,599 --> 00:02:47,200
here but if you're curious you can

81
00:02:47,200 --> 00:02:49,040
download these slides later and take a

82
00:02:49,040 --> 00:02:52,560
look at this youtube link right here

83
00:02:53,120 --> 00:02:55,360
ssrf has a ton of different approaches

84
00:02:55,360 --> 00:02:56,800
but it was actually pretty easy in some

85
00:02:56,800 --> 00:02:58,000
cases

86
00:02:58,000 --> 00:02:59,840
webkit.org had a live sample

87
00:02:59,840 --> 00:03:02,720
implementation of apple pay and it even

88
00:03:02,720 --> 00:03:04,560
was on aws with the old instance

89
00:03:04,560 --> 00:03:06,319
metadata service

90
00:03:06,319 --> 00:03:08,239
so all i had to do was pass this ip and

91
00:03:08,239 --> 00:03:10,239
i could poke around an internal api

92
00:03:10,239 --> 00:03:13,120
and get some tokens but not everything

93
00:03:13,120 --> 00:03:14,640
was so simple

94
00:03:14,640 --> 00:03:17,040
uh i had a lot of ssrf vulnerabilities

95
00:03:17,040 --> 00:03:19,280
that were out there

96
00:03:19,280 --> 00:03:21,200
that were almost there but weren't quite

97
00:03:21,200 --> 00:03:24,080
vulnerable to this easy approach

98
00:03:24,080 --> 00:03:25,840
sometimes i'd have a web hook where i

99
00:03:25,840 --> 00:03:27,599
could hand it a url and the server would

100
00:03:27,599 --> 00:03:29,120
even fetch the url

101
00:03:29,120 --> 00:03:30,799
but not give me a response this is

102
00:03:30,799 --> 00:03:32,020
called blind ssrf

103
00:03:32,020 --> 00:03:33,360
[Music]

104
00:03:33,360 --> 00:03:34,879
other times the requests in question

105
00:03:34,879 --> 00:03:36,720
would be a put request

106
00:03:36,720 --> 00:03:38,159
which restricted what endpoints i could

107
00:03:38,159 --> 00:03:40,319
hit sometimes you can mess with the

108
00:03:40,319 --> 00:03:42,159
request method by setting up an endpoint

109
00:03:42,159 --> 00:03:43,920
that redirects the server around

110
00:03:43,920 --> 00:03:47,200
but that's hit or miss other times you

111
00:03:47,200 --> 00:03:48,400
might get some data back

112
00:03:48,400 --> 00:03:50,000
but it's validated against a specific

113
00:03:50,000 --> 00:03:51,680
content type or you only get back

114
00:03:51,680 --> 00:03:53,120
certain fields

115
00:03:53,120 --> 00:03:55,040
or even worse it will only accept https

116
00:03:55,040 --> 00:03:57,280
urls

117
00:03:57,280 --> 00:03:59,680
so what we really want here in order to

118
00:03:59,680 --> 00:04:00,560
exploit this stuff

119
00:04:00,560 --> 00:04:04,000
is a generic blind ssrf approach in

120
00:04:04,000 --> 00:04:05,840
other words we'd like to send the server

121
00:04:05,840 --> 00:04:07,840
a url have it fire a payload at

122
00:04:07,840 --> 00:04:10,799
something internal like smtp or redis

123
00:04:10,799 --> 00:04:12,799
and get a security compromise just from

124
00:04:12,799 --> 00:04:15,599
that exchange alone

125
00:04:15,599 --> 00:04:17,290
and without needing to see a response

126
00:04:17,290 --> 00:04:18,959
[Music]

127
00:04:18,959 --> 00:04:20,639
so here are the comments some of the

128
00:04:20,639 --> 00:04:22,079
common approaches to that

129
00:04:22,079 --> 00:04:23,600
the issue is these are extremely

130
00:04:23,600 --> 00:04:25,919
platform specific to the point that i

131
00:04:25,919 --> 00:04:28,320
have never had any luck with these but

132
00:04:28,320 --> 00:04:29,759
there are some useful ideas in here

133
00:04:29,759 --> 00:04:32,320
particularly an sni injection

134
00:04:32,320 --> 00:04:33,440
you wouldn't think tls would be

135
00:04:33,440 --> 00:04:35,840
particularly useful because its packets

136
00:04:35,840 --> 00:04:37,600
are mostly just encrypted data

137
00:04:37,600 --> 00:04:39,680
binary flags and other stuff that an

138
00:04:39,680 --> 00:04:42,160
attacker doesn't have much control over

139
00:04:42,160 --> 00:04:44,000
but it's not all that limited as orange

140
00:04:44,000 --> 00:04:45,280
signos

141
00:04:45,280 --> 00:04:47,040
the sni which is basically just the

142
00:04:47,040 --> 00:04:49,680
domain name

143
00:04:49,759 --> 00:04:52,960
is part of the url so if you can trick

144
00:04:52,960 --> 00:04:55,680
the victim into accepting a weird domain

145
00:04:55,680 --> 00:04:57,759
name and parsing it incorrectly

146
00:04:57,759 --> 00:05:00,240
you can include arbitrary bytes in there

147
00:05:00,240 --> 00:05:02,720
and smuggle stuff like smtp commands

148
00:05:02,720 --> 00:05:04,000
this approach is dependent on a

149
00:05:04,000 --> 00:05:06,080
platform-specific url parsing bug

150
00:05:06,080 --> 00:05:07,280
but what if we had something that was

151
00:05:07,280 --> 00:05:09,520
inherent to the tls protocol

152
00:05:09,520 --> 00:05:11,759
this is where my work starts let's look

153
00:05:11,759 --> 00:05:12,880
at a tls packet

154
00:05:12,880 --> 00:05:16,160
and see what's there for us to use as

155
00:05:16,160 --> 00:05:17,600
is often helpful when looking at

156
00:05:17,600 --> 00:05:19,680
protocols we can open up wireshark and

157
00:05:19,680 --> 00:05:21,520
see what happens in a tls connection

158
00:05:21,520 --> 00:05:24,560
here's the sni or server name indication

159
00:05:24,560 --> 00:05:26,960
that was previously explored in orange's

160
00:05:26,960 --> 00:05:27,680
talk

161
00:05:27,680 --> 00:05:30,479
his work involves putting new lines and

162
00:05:30,479 --> 00:05:32,400
smtp commands into the section pointed

163
00:05:32,400 --> 00:05:34,800
to by the arrow here

164
00:05:34,800 --> 00:05:36,320
if you poke around you'll see stuff like

165
00:05:36,320 --> 00:05:38,000
random strings key

166
00:05:38,000 --> 00:05:39,360
shares and other stuff that isn't all

167
00:05:39,360 --> 00:05:41,600
that useful for ssrf

168
00:05:41,600 --> 00:05:43,840
why because the only part of a server

169
00:05:43,840 --> 00:05:45,680
that or the only part of this that we

170
00:05:45,680 --> 00:05:47,360
can typically feed a server

171
00:05:47,360 --> 00:05:49,600
is a url and the only part of the url

172
00:05:49,600 --> 00:05:51,440
that will make it into this client hello

173
00:05:51,440 --> 00:05:52,080
packet

174
00:05:52,080 --> 00:05:53,440
is the domain name that we provide the

175
00:05:53,440 --> 00:05:56,080
victim machine

176
00:05:57,919 --> 00:05:59,120
but there's a different way that we as

177
00:05:59,120 --> 00:06:01,199
an attacker can get payloads into client

178
00:06:01,199 --> 00:06:02,400
hello messages

179
00:06:02,400 --> 00:06:04,000
it involves a couple of steps and is the

180
00:06:04,000 --> 00:06:06,639
main focus of this talk first

181
00:06:06,639 --> 00:06:09,360
we send over a link to our own server in

182
00:06:09,360 --> 00:06:11,360
this case jmaddox.com

183
00:06:11,360 --> 00:06:13,680
then jmadx.com responds with a valid

184
00:06:13,680 --> 00:06:14,639
server hello

185
00:06:14,639 --> 00:06:16,590
hello that contains our payload

186
00:06:16,590 --> 00:06:18,240
[Music]

187
00:06:18,240 --> 00:06:19,919
now it would be an ideal if we as an

188
00:06:19,919 --> 00:06:22,319
attacker could get that payload

189
00:06:22,319 --> 00:06:24,560
the jmatics.com sent the victim and get

190
00:06:24,560 --> 00:06:26,880
the victim to send it somewhere internal

191
00:06:26,880 --> 00:06:28,800
but that raises a question is there such

192
00:06:28,800 --> 00:06:30,960
a field that we can use to deliver these

193
00:06:30,960 --> 00:06:31,540
payloads

194
00:06:31,540 --> 00:06:33,280
[Music]

195
00:06:33,280 --> 00:06:35,120
it might seem too good to be true but

196
00:06:35,120 --> 00:06:36,880
tls actually provides us

197
00:06:36,880 --> 00:06:38,319
with exactly that in the form of a

198
00:06:38,319 --> 00:06:40,800
session id most clients even persist

199
00:06:40,800 --> 00:06:41,919
this field

200
00:06:41,919 --> 00:06:44,479
session ids are limited to 32 bytes as

201
00:06:44,479 --> 00:06:45,360
you see here

202
00:06:45,360 --> 00:06:46,800
but depending on the implementation you

203
00:06:46,800 --> 00:06:48,560
might have

204
00:06:48,560 --> 00:06:51,599
session tickets this one is about 200

205
00:06:51,599 --> 00:06:53,759
bytes but these can be up to around 65

206
00:06:53,759 --> 00:06:55,280
kilobytes

207
00:06:55,280 --> 00:06:57,280
both session ids and session tickets are

208
00:06:57,280 --> 00:06:59,440
mechanisms for a tls client to go

209
00:06:59,440 --> 00:07:01,199
hey remember that key cryptographic key

210
00:07:01,199 --> 00:07:02,479
exchange we did earlier

211
00:07:02,479 --> 00:07:05,039
let's just keep using that in this new

212
00:07:05,039 --> 00:07:05,680
exchange

213
00:07:05,680 --> 00:07:09,199
or in this new connection tls 1.3

214
00:07:09,199 --> 00:07:10,800
includes a slightly more complicated

215
00:07:10,800 --> 00:07:12,240
mechanism called a pre-shared key

216
00:07:12,240 --> 00:07:13,520
identity

217
00:07:13,520 --> 00:07:14,960
which does pretty much the same thing

218
00:07:14,960 --> 00:07:16,800
for our purpose

219
00:07:16,800 --> 00:07:18,720
all of these are about optimization

220
00:07:18,720 --> 00:07:20,000
since key exchanges can be time

221
00:07:20,000 --> 00:07:21,199
consuming

222
00:07:21,199 --> 00:07:22,800
but they provide a way for a server to

223
00:07:22,800 --> 00:07:24,880
tell whatever is connecting to it to

224
00:07:24,880 --> 00:07:28,319
persist some data for later use

225
00:07:28,319 --> 00:07:30,000
so it's almost like a cookie that lives

226
00:07:30,000 --> 00:07:31,680
in plain text so it's perfect for the

227
00:07:31,680 --> 00:07:35,199
ssrf attack that we're trying to do

228
00:07:35,280 --> 00:07:37,520
now you might anticipate a problem here

229
00:07:37,520 --> 00:07:39,199
obviously if you go to google.com and

230
00:07:39,199 --> 00:07:41,680
then to apple.com those tls sessions

231
00:07:41,680 --> 00:07:43,199
are going to have distinct data from

232
00:07:43,199 --> 00:07:45,120
each other the same applies between

233
00:07:45,120 --> 00:07:47,280
google.com and localhost

234
00:07:47,280 --> 00:07:48,639
so we have a bit of a problem getting

235
00:07:48,639 --> 00:07:50,400
the target server to reuse the session

236
00:07:50,400 --> 00:07:51,680
when communicating with something

237
00:07:51,680 --> 00:07:53,759
internal

238
00:07:53,759 --> 00:07:55,919
but when i looked at both the tls spec

239
00:07:55,919 --> 00:07:57,120
and popular session cache

240
00:07:57,120 --> 00:07:58,319
implementations

241
00:07:58,319 --> 00:08:00,800
i saw this wasn't quite the case i first

242
00:08:00,800 --> 00:08:01,520
went to the

243
00:08:01,520 --> 00:08:03,759
curl source code since lib curl is used

244
00:08:03,759 --> 00:08:05,840
by a lot of php stuff

245
00:08:05,840 --> 00:08:07,440
sessions are keyed by the four key

246
00:08:07,440 --> 00:08:09,759
properties here

247
00:08:09,759 --> 00:08:12,080
which belong to this struct as you can

248
00:08:12,080 --> 00:08:14,639
see none of these are the ip address

249
00:08:14,639 --> 00:08:16,080
this means that no matter what ip

250
00:08:16,080 --> 00:08:19,120
address jmaddix.com resolves to

251
00:08:19,120 --> 00:08:21,280
curl will attempt to reuse the session

252
00:08:21,280 --> 00:08:23,039
this also happens to be how just about

253
00:08:23,039 --> 00:08:25,680
everything else caches tls sessions

254
00:08:25,680 --> 00:08:27,440
so if you establish a tls session with

255
00:08:27,440 --> 00:08:28,800
jmadx.com

256
00:08:28,800 --> 00:08:30,479
whether it resolves to something on your

257
00:08:30,479 --> 00:08:33,039
on the internet or your own machine

258
00:08:33,039 --> 00:08:34,559
your https client will not know the

259
00:08:34,559 --> 00:08:37,200
difference since i as the attacker own

260
00:08:37,200 --> 00:08:38,559
jmaddox.com

261
00:08:38,559 --> 00:08:40,559
i can combine all of this tls stuff with

262
00:08:40,559 --> 00:08:43,919
a concept i'd call dns or binding

263
00:08:43,919 --> 00:08:46,920
so i resolve the first request to

264
00:08:46,920 --> 00:08:48,320
35.x.x.x

265
00:08:48,320 --> 00:08:51,519
some server i control then i

266
00:08:51,519 --> 00:08:53,200
the server target server picks up the

267
00:08:53,200 --> 00:08:54,959
payload from 35.x.x

268
00:08:54,959 --> 00:08:59,040
x in the form of a session ticket

269
00:08:59,040 --> 00:09:01,040
after some time i send the exact same

270
00:09:01,040 --> 00:09:02,160
url

271
00:09:02,160 --> 00:09:05,040
except the dns entry has expired again

272
00:09:05,040 --> 00:09:05,600
since i

273
00:09:05,600 --> 00:09:09,040
control the dns server

274
00:09:09,040 --> 00:09:11,440
this time around i resolved jmatox.com

275
00:09:11,440 --> 00:09:12,959
to something internal that i wouldn't

276
00:09:12,959 --> 00:09:15,120
normally have access to from the outside

277
00:09:15,120 --> 00:09:16,720
to simplify things i'll just use

278
00:09:16,720 --> 00:09:19,279
localhost

279
00:09:19,839 --> 00:09:22,160
once the dns query finishes the target

280
00:09:22,160 --> 00:09:23,200
server then

281
00:09:23,200 --> 00:09:24,640
makes an internal request with that

282
00:09:24,640 --> 00:09:27,040
payload

283
00:09:27,360 --> 00:09:29,600
so like what i did in the opening demo

284
00:09:29,600 --> 00:09:30,800
you can manipulate whatever you're

285
00:09:30,800 --> 00:09:31,600
attacking

286
00:09:31,600 --> 00:09:34,480
to send a tls session id ticket or psk

287
00:09:34,480 --> 00:09:36,320
identity to itself

288
00:09:36,320 --> 00:09:38,240
here i'm showing a psk identity that

289
00:09:38,240 --> 00:09:41,360
does a memcache insert

290
00:09:41,360 --> 00:09:43,440
so here's the same tcp stream but just

291
00:09:43,440 --> 00:09:44,640
displayed raw

292
00:09:44,640 --> 00:09:46,080
this view shows the really important

293
00:09:46,080 --> 00:09:48,399
property of my approach to combining tls

294
00:09:48,399 --> 00:09:50,240
with dns for binding you can get

295
00:09:50,240 --> 00:09:51,519
arbitrary characters

296
00:09:51,519 --> 00:09:54,080
to be sent which includes new lines this

297
00:09:54,080 --> 00:09:55,440
is what allows you to interact with a

298
00:09:55,440 --> 00:09:57,600
bunch of local services like memcached

299
00:09:57,600 --> 00:09:58,959
just like people did in the past with

300
00:09:58,959 --> 00:10:01,839
gopher urls

301
00:10:02,720 --> 00:10:04,240
and here's an exchange more typical of

302
00:10:04,240 --> 00:10:06,079
what you'd use to do real damage

303
00:10:06,079 --> 00:10:07,839
this is a value that in most python

304
00:10:07,839 --> 00:10:09,120
memcache libraries

305
00:10:09,120 --> 00:10:11,839
will execute a shell command immediately

306
00:10:11,839 --> 00:10:13,920
once it's retrieved from the cache

307
00:10:13,920 --> 00:10:15,200
this is because it's quite common in

308
00:10:15,200 --> 00:10:17,040
python and other languages to use

309
00:10:17,040 --> 00:10:18,560
built-in serialization methods like

310
00:10:18,560 --> 00:10:19,839
pickle

311
00:10:19,839 --> 00:10:21,440
to convert values to something that can

312
00:10:21,440 --> 00:10:23,920
be stored unfortunately

313
00:10:23,920 --> 00:10:25,519
built-in serialization methods are also

314
00:10:25,519 --> 00:10:27,200
common rce targets we'll get to

315
00:10:27,200 --> 00:10:28,190
exploitation later

316
00:10:28,190 --> 00:10:30,079
[Music]

317
00:10:30,079 --> 00:10:32,079
but since this is pretty common i ended

318
00:10:32,079 --> 00:10:34,399
up testing a fairly fair amount of sites

319
00:10:34,399 --> 00:10:36,079
i'll get to specif some specific ones in

320
00:10:36,079 --> 00:10:38,000
a second but first i'll go over some

321
00:10:38,000 --> 00:10:38,720
infrastructure

322
00:10:38,720 --> 00:10:40,720
some testing infrastructure i set up

323
00:10:40,720 --> 00:10:41,920
along with some tips for actually

324
00:10:41,920 --> 00:10:43,260
performing these exploits

325
00:10:43,260 --> 00:10:45,040
[Music]

326
00:10:45,040 --> 00:10:46,640
so here are all the vms i have on the

327
00:10:46,640 --> 00:10:48,959
internet save for maybe some ip white

328
00:10:48,959 --> 00:10:49,839
listing

329
00:10:49,839 --> 00:10:51,360
they need to be on the open internet so

330
00:10:51,360 --> 00:10:53,680
the target boxes can reach them

331
00:10:53,680 --> 00:10:55,200
i've got a name server record pointing

332
00:10:55,200 --> 00:10:58,720
to ssltest.jmax.com queries to the dns

333
00:10:58,720 --> 00:11:00,160
server on the top left

334
00:11:00,160 --> 00:11:01,920
which is just a by python script running

335
00:11:01,920 --> 00:11:03,839
on port 53.

336
00:11:03,839 --> 00:11:05,279
it alternates between answering with the

337
00:11:05,279 --> 00:11:08,079
ip address of the custom tls server

338
00:11:08,079 --> 00:11:10,800
and localhost then on over there on the

339
00:11:10,800 --> 00:11:13,519
right i have my custom tls server

340
00:11:13,519 --> 00:11:14,880
which is there to deliver my payloads

341
00:11:14,880 --> 00:11:17,279
via session tickets i configure those by

342
00:11:17,279 --> 00:11:19,839
just updating values in redis

343
00:11:19,839 --> 00:11:21,440
but when testing it it proved difficult

344
00:11:21,440 --> 00:11:23,600
to go straight to localhost

345
00:11:23,600 --> 00:11:26,079
since depending on what library is

346
00:11:26,079 --> 00:11:27,600
making the requests

347
00:11:27,600 --> 00:11:29,279
i didn't know if ssl sessions were being

348
00:11:29,279 --> 00:11:31,519
cached

349
00:11:31,519 --> 00:11:33,440
to address this sometimes i ended up

350
00:11:33,440 --> 00:11:34,560
adding another box

351
00:11:34,560 --> 00:11:35,920
just see if the payload was being

352
00:11:35,920 --> 00:11:38,480
persisted if you're not familiar

353
00:11:38,480 --> 00:11:40,800
netcat can be set up to listen just

354
00:11:40,800 --> 00:11:42,240
listen for tcp

355
00:11:42,240 --> 00:11:44,640
connections and log the results i saw my

356
00:11:44,640 --> 00:11:45,279
payload

357
00:11:45,279 --> 00:11:46,800
if i saw my payload making it into the

358
00:11:46,800 --> 00:11:48,880
logs i knew the general approach

359
00:11:48,880 --> 00:11:51,760
could work and then go back to the setup

360
00:11:51,760 --> 00:11:52,959
from the previous slide

361
00:11:52,959 --> 00:11:54,480
to get the server to start delivering

362
00:11:54,480 --> 00:11:58,800
the payload to itself on different ports

363
00:11:58,959 --> 00:12:00,000
and here are the links to what i

364
00:12:00,000 --> 00:12:01,839
actually used a big chunk of the work

365
00:12:01,839 --> 00:12:03,440
was saved by just messing around with

366
00:12:03,440 --> 00:12:05,600
pure a pure rust implementation of tls

367
00:12:05,600 --> 00:12:07,279
which is linked to here

368
00:12:07,279 --> 00:12:08,720
a big thanks goes out to everyone in

369
00:12:08,720 --> 00:12:11,040
this slide i wouldn't have had the time

370
00:12:11,040 --> 00:12:12,560
to do any of this work if not for the

371
00:12:12,560 --> 00:12:15,599
code they had put out there

372
00:12:16,160 --> 00:12:18,240
but i know if everything i just claimed

373
00:12:18,240 --> 00:12:20,160
i need to back things up by showing what

374
00:12:20,160 --> 00:12:22,800
actual real-world attacks can happen

375
00:12:22,800 --> 00:12:25,200
with us i'll start off conceptually and

376
00:12:25,200 --> 00:12:26,880
then get to some examples along with

377
00:12:26,880 --> 00:12:28,959
another demo

378
00:12:28,959 --> 00:12:30,880
but here's the model i've got if you're

379
00:12:30,880 --> 00:12:32,560
in the middle of this diagram you're

380
00:12:32,560 --> 00:12:35,518
generally vulnerable

381
00:12:35,839 --> 00:12:37,440
and then this top part refers to when

382
00:12:37,440 --> 00:12:39,200
you can send something a url

383
00:12:39,200 --> 00:12:40,800
and it will fetch that url but you don't

384
00:12:40,800 --> 00:12:42,639
know of a way to exploit that behavior

385
00:12:42,639 --> 00:12:45,120
just like in the first few slides it's

386
00:12:45,120 --> 00:12:47,040
interesting because you would hope by

387
00:12:47,040 --> 00:12:48,720
now people would try to eliminate

388
00:12:48,720 --> 00:12:51,279
anything even remotely looking like ssrf

389
00:12:51,279 --> 00:12:53,360
but this pattern is in fact required by

390
00:12:53,360 --> 00:12:54,959
a few popular specs

391
00:12:54,959 --> 00:12:56,720
this is even common enough that i've

392
00:12:56,720 --> 00:12:58,639
seen bug bounties mention ssrf with no

393
00:12:58,639 --> 00:13:00,160
proven security impact

394
00:13:00,160 --> 00:13:02,480
as an excluded category understandably

395
00:13:02,480 --> 00:13:03,360
so

396
00:13:03,360 --> 00:13:05,279
but that's what this exactly what this

397
00:13:05,279 --> 00:13:07,600
talk is about adding the security impact

398
00:13:07,600 --> 00:13:10,639
even when you have something that

399
00:13:10,639 --> 00:13:20,560
it's just almost srf and then this one

400
00:13:20,560 --> 00:13:21,839
on the left sounds weird

401
00:13:21,839 --> 00:13:23,680
but it's getting bigger it's just a

402
00:13:23,680 --> 00:13:24,880
matter of what if

403
00:13:24,880 --> 00:13:26,800
whatever the sref is going through to

404
00:13:26,800 --> 00:13:28,240
make requests has implemented this

405
00:13:28,240 --> 00:13:31,680
feature according to the latest spec

406
00:13:31,920 --> 00:13:33,360
unfortunately there are quite a few

407
00:13:33,360 --> 00:13:35,200
https client libraries out there that

408
00:13:35,200 --> 00:13:37,920
support full-blown tls session caching

409
00:13:37,920 --> 00:13:39,680
i reported this as a vulnerability to a

410
00:13:39,680 --> 00:13:42,240
few but not all of the entries with yes

411
00:13:42,240 --> 00:13:44,240
i haven't seen much traction

412
00:13:44,240 --> 00:13:45,519
understandably since

413
00:13:45,519 --> 00:13:47,279
fixing this requires diverging from the

414
00:13:47,279 --> 00:13:49,440
tls spec not a whole lot of people are

415
00:13:49,440 --> 00:13:52,160
eager to do so

416
00:13:52,639 --> 00:13:54,560
this thing you run into the most trouble

417
00:13:54,560 --> 00:13:56,240
with is this last circle

418
00:13:56,240 --> 00:13:58,160
because you have to first do some recon

419
00:13:58,160 --> 00:13:59,600
to see what ports might be open

420
00:13:59,600 --> 00:14:02,079
internally exposed on the server and

421
00:14:02,079 --> 00:14:03,360
then you need to see

422
00:14:03,360 --> 00:14:05,199
if what's on those ports is permissive

423
00:14:05,199 --> 00:14:07,120
enough to keep the connection

424
00:14:07,120 --> 00:14:08,880
open past the opening bytes of the tls

425
00:14:08,880 --> 00:14:11,120
client hello

426
00:14:11,120 --> 00:14:12,399
but here's some examples of what you

427
00:14:12,399 --> 00:14:14,720
might be looking for it's far from

428
00:14:14,720 --> 00:14:16,079
from complete but here are some of the

429
00:14:16,079 --> 00:14:17,680
most notable entries i've had success

430
00:14:17,680 --> 00:14:19,920
with

431
00:14:20,079 --> 00:14:21,360
so now we'll go through a couple of

432
00:14:21,360 --> 00:14:23,519
exploitable examples of these tls

433
00:14:23,519 --> 00:14:24,240
session based

434
00:14:24,240 --> 00:14:26,320
ssrf vulnerabilities that i reported and

435
00:14:26,320 --> 00:14:28,560
got fixed

436
00:14:28,560 --> 00:14:30,959
here's one from you track it's rated low

437
00:14:30,959 --> 00:14:31,600
because

438
00:14:31,600 --> 00:14:34,079
all i had was local smtp and i didn't

439
00:14:34,079 --> 00:14:34,639
try

440
00:14:34,639 --> 00:14:36,240
poking around to see if i could exploit

441
00:14:36,240 --> 00:14:38,000
the smtp server further

442
00:14:38,000 --> 00:14:40,000
it originated from utrack's import

443
00:14:40,000 --> 00:14:41,279
feature

444
00:14:41,279 --> 00:14:42,720
which normally wouldn't be easy to

445
00:14:42,720 --> 00:14:46,079
exploit being blind ssrf

446
00:14:46,079 --> 00:14:47,680
but with my rebinding code here's a

447
00:14:47,680 --> 00:14:49,600
section from the tls packet i got you

448
00:14:49,600 --> 00:14:51,199
track to send itself

449
00:14:51,199 --> 00:14:53,120
this works because ssrf is a newline

450
00:14:53,120 --> 00:14:54,240
delimited

451
00:14:54,240 --> 00:14:56,639
tcp protocol just like memcached so you

452
00:14:56,639 --> 00:14:58,880
can embed working commands within a tls

453
00:14:58,880 --> 00:15:00,800
ticket

454
00:15:00,800 --> 00:15:03,120
and here's what came of that packet this

455
00:15:03,120 --> 00:15:04,800
alone wasn't super severe

456
00:15:04,800 --> 00:15:06,240
because it's not signed quite right and

457
00:15:06,240 --> 00:15:07,839
i didn't dig too deeply because

458
00:15:07,839 --> 00:15:10,399
i wanted to just report it asap but it

459
00:15:10,399 --> 00:15:12,240
did get initiated by tcp

460
00:15:12,240 --> 00:15:14,800
stream i got utrack to send itself so

461
00:15:14,800 --> 00:15:16,000
it's still pretty bad

462
00:15:16,000 --> 00:15:18,959
just conceptually and here's one i

463
00:15:18,959 --> 00:15:20,320
reported in next cloud

464
00:15:20,320 --> 00:15:22,240
the idea behind next cloud is a cool one

465
00:15:22,240 --> 00:15:24,880
you can set up a server and host files

466
00:15:24,880 --> 00:15:26,639
and even share them with other people's

467
00:15:26,639 --> 00:15:30,000
servers using a share url like this

468
00:15:30,000 --> 00:15:32,000
but as it turns out you can include port

469
00:15:32,000 --> 00:15:33,759
numbers in the share url

470
00:15:33,759 --> 00:15:35,600
now since next cloud automatically puts

471
00:15:35,600 --> 00:15:37,600
https in there

472
00:15:37,600 --> 00:15:39,440
normally there wouldn't be as much ssrf

473
00:15:39,440 --> 00:15:40,880
potential and it would have to be blind

474
00:15:40,880 --> 00:15:43,360
ssrf

475
00:15:43,360 --> 00:15:45,600
but luckily i was able to do just that

476
00:15:45,600 --> 00:15:47,759
so as a non-admin user i could use my

477
00:15:47,759 --> 00:15:49,279
tls for binding attack

478
00:15:49,279 --> 00:15:50,880
infrastructure to perform arbitrary

479
00:15:50,880 --> 00:15:53,680
writes on memcached

480
00:15:53,680 --> 00:15:55,279
after reporting this and working through

481
00:15:55,279 --> 00:15:57,120
the options there weren't any great ones

482
00:15:57,120 --> 00:15:58,079
because not all

483
00:15:58,079 --> 00:15:59,839
request libraries allow you to disable

484
00:15:59,839 --> 00:16:01,440
tls sessions

485
00:16:01,440 --> 00:16:04,480
in this case libkurl has the option but

486
00:16:04,480 --> 00:16:06,560
isn't exposed by a php request library

487
00:16:06,560 --> 00:16:07,759
such as guzzle

488
00:16:07,759 --> 00:16:09,920
in any case adding a request timeout

489
00:16:09,920 --> 00:16:11,680
made the attack pretty much

490
00:16:11,680 --> 00:16:13,199
infeasible assuming people don't turn

491
00:16:13,199 --> 00:16:15,279
their dns time to live values super low

492
00:16:15,279 --> 00:16:16,720
on their servers

493
00:16:16,720 --> 00:16:18,480
next claude was even generous enough to

494
00:16:18,480 --> 00:16:20,079
give me a bounty even though in my

495
00:16:20,079 --> 00:16:23,839
opinion this is lip girl's fault

496
00:16:24,000 --> 00:16:25,839
so since the last couple were just text

497
00:16:25,839 --> 00:16:27,680
slides let's see a real demo now from

498
00:16:27,680 --> 00:16:28,079
the

499
00:16:28,079 --> 00:16:29,920
perspective of a django web developer

500
00:16:29,920 --> 00:16:31,440
getting phished

501
00:16:31,440 --> 00:16:33,120
the dns or binding part has been done in

502
00:16:33,120 --> 00:16:36,079
the past

503
00:16:36,079 --> 00:16:38,639
uh but what's new here is combining dns

504
00:16:38,639 --> 00:16:40,639
or binding with tls session persistence

505
00:16:40,639 --> 00:16:42,880
to make it even more powerful

506
00:16:42,880 --> 00:16:44,320
in the past you had to get people to

507
00:16:44,320 --> 00:16:46,800
visit a fully malicious page

508
00:16:46,800 --> 00:16:48,880
to get anywhere with the nsr binding but

509
00:16:48,880 --> 00:16:50,000
with my work you just

510
00:16:50,000 --> 00:16:51,440
need you can do the same with just an

511
00:16:51,440 --> 00:16:53,680
image tag because of that you can fish

512
00:16:53,680 --> 00:16:55,279
people into rce

513
00:16:55,279 --> 00:16:57,440
even if they just view an email but

514
00:16:57,440 --> 00:16:58,800
don't click any links

515
00:16:58,800 --> 00:17:01,599
let's see it now

516
00:17:03,279 --> 00:17:05,679
and now for the actual demo so as you

517
00:17:05,679 --> 00:17:06,559
can see

518
00:17:06,559 --> 00:17:08,880
we're pretending i'm a django developer

519
00:17:08,880 --> 00:17:10,799
running a typical app

520
00:17:10,799 --> 00:17:12,000
but if we look at the app it's pretty

521
00:17:12,000 --> 00:17:14,400
simple we can view a slot emoji

522
00:17:14,400 --> 00:17:16,640
but if we refresh too fast the slot

523
00:17:16,640 --> 00:17:18,559
needs to go to sleep

524
00:17:18,559 --> 00:17:19,839
and now for what happens when i get

525
00:17:19,839 --> 00:17:22,400
phished as you can see

526
00:17:22,400 --> 00:17:24,240
i've received some perfectly legitimate

527
00:17:24,240 --> 00:17:26,799
emails and i'm viewing them

528
00:17:26,799 --> 00:17:28,319
normally these image tags would be

529
00:17:28,319 --> 00:17:32,480
benign but after viewing them my sloth

530
00:17:32,480 --> 00:17:34,080
now opens up a calculator

531
00:17:34,080 --> 00:17:36,559
via shell command that's because the

532
00:17:36,559 --> 00:17:38,400
image tag is pointed to by the dom

533
00:17:38,400 --> 00:17:40,000
pointed to the domain with my rebinding

534
00:17:40,000 --> 00:17:46,880
setup and a simple python picot payload

535
00:17:46,880 --> 00:17:48,320
and here's most of the source code used

536
00:17:48,320 --> 00:17:50,160
in the example app i created

537
00:17:50,160 --> 00:17:52,160
you can pretty easily find apps that

538
00:17:52,160 --> 00:17:54,960
call django.cor.cache around github

539
00:17:54,960 --> 00:17:56,720
but i didn't want to demo against a

540
00:17:56,720 --> 00:17:58,559
specific one because that seems a little

541
00:17:58,559 --> 00:17:59,360
mean

542
00:17:59,360 --> 00:18:01,039
and i don't want people launching actual

543
00:18:01,039 --> 00:18:04,000
fishing campaigns against such projects

544
00:18:04,000 --> 00:18:06,080
it's a little tough to assign blame here

545
00:18:06,080 --> 00:18:07,600
nothing is really breaking from

546
00:18:07,600 --> 00:18:10,240
establish safe practices but it's clear

547
00:18:10,240 --> 00:18:11,840
that there's a potential to compromise

548
00:18:11,840 --> 00:18:16,159
real world developer laptops

549
00:18:16,320 --> 00:18:17,919
on that note there's a lot more to do

550
00:18:17,919 --> 00:18:19,360
here that i couldn't possibly do on my

551
00:18:19,360 --> 00:18:20,160
own

552
00:18:20,160 --> 00:18:21,679
these slides will be available online if

553
00:18:21,679 --> 00:18:23,840
you want to return to this

554
00:18:23,840 --> 00:18:25,200
and if you do anything interesting i'd

555
00:18:25,200 --> 00:18:27,120
love to hear about it there's certainly

556
00:18:27,120 --> 00:18:28,960
a lot more potential vulnerabilities to

557
00:18:28,960 --> 00:18:31,280
explore

558
00:18:31,280 --> 00:18:33,360
so all of that is bad but what can be

559
00:18:33,360 --> 00:18:34,400
done about it

560
00:18:34,400 --> 00:18:35,840
let's start from the root of the problem

561
00:18:35,840 --> 00:18:38,720
tls clients

562
00:18:38,799 --> 00:18:40,160
so here's something i recommended to the

563
00:18:40,160 --> 00:18:42,160
chromium team a while back we still

564
00:18:42,160 --> 00:18:43,760
aren't in agreement about whether this

565
00:18:43,760 --> 00:18:45,360
should be fixed and my report was pretty

566
00:18:45,360 --> 00:18:47,039
hastily written which probably didn't

567
00:18:47,039 --> 00:18:48,320
help things

568
00:18:48,320 --> 00:18:49,760
essentially i'd like to remove the

569
00:18:49,760 --> 00:18:52,480
ability for sessions to be resumed

570
00:18:52,480 --> 00:18:55,679
between different servers while the

571
00:18:55,679 --> 00:18:57,039
chromium team has marked this as it

572
00:18:57,039 --> 00:18:58,320
won't fix they did suggest an

573
00:18:58,320 --> 00:18:59,280
alternative

574
00:18:59,280 --> 00:19:01,679
that maintains or support for resuming

575
00:19:01,679 --> 00:19:03,200
sessions across servers

576
00:19:03,200 --> 00:19:04,640
they probably care a lot more about that

577
00:19:04,640 --> 00:19:06,240
than i do but we can have the best of

578
00:19:06,240 --> 00:19:07,280
both worlds

579
00:19:07,280 --> 00:19:08,880
this last option of just partitioning

580
00:19:08,880 --> 00:19:10,640
based upon whether the address is

581
00:19:10,640 --> 00:19:11,760
something local

582
00:19:11,760 --> 00:19:13,840
is a good compromise it wouldn't affect

583
00:19:13,840 --> 00:19:15,120
performance but would

584
00:19:15,120 --> 00:19:17,760
be but would protect against most most

585
00:19:17,760 --> 00:19:20,160
of the attack scenarios i can think of

586
00:19:20,160 --> 00:19:22,480
but based on my experience so far i'm

587
00:19:22,480 --> 00:19:23,919
not hopeful that there's going to be

588
00:19:23,919 --> 00:19:25,360
much proactive effort

589
00:19:25,360 --> 00:19:26,799
on the part of software packages that

590
00:19:26,799 --> 00:19:28,640
make https requests

591
00:19:28,640 --> 00:19:30,320
so for most of the audience it's more

592
00:19:30,320 --> 00:19:32,480
useful to know what's susceptible and

593
00:19:32,480 --> 00:19:34,559
what layers of defense can be applied

594
00:19:34,559 --> 00:19:36,160
however with all of this it's worth

595
00:19:36,160 --> 00:19:38,320
taking a step back to consider

596
00:19:38,320 --> 00:19:40,400
is cl assumption session resumption even

597
00:19:40,400 --> 00:19:40,920
worth it

598
00:19:40,920 --> 00:19:42,799
[Music]

599
00:19:42,799 --> 00:19:45,440
there are others issues with it some of

600
00:19:45,440 --> 00:19:47,360
some of which are shown here

601
00:19:47,360 --> 00:19:48,640
i'm not going to make the case that the

602
00:19:48,640 --> 00:19:50,799
industry as a whole

603
00:19:50,799 --> 00:19:52,799
should give up on this optimization but

604
00:19:52,799 --> 00:19:54,320
we should take a step back and see if

605
00:19:54,320 --> 00:19:56,240
this is a worthwhile trade-off

606
00:19:56,240 --> 00:19:58,080
we may just like in the previous slide

607
00:19:58,080 --> 00:20:00,880
find that the costs can be eliminated

608
00:20:00,880 --> 00:20:03,120
but if we can't if we find that we can't

609
00:20:03,120 --> 00:20:04,400
tackle these problems

610
00:20:04,400 --> 00:20:05,520
we need to weigh them against the

611
00:20:05,520 --> 00:20:06,150
benefits

612
00:20:06,150 --> 00:20:16,960
[Music]

613
00:20:16,960 --> 00:20:19,360
and here's the main benefit you get a

614
00:20:19,360 --> 00:20:20,880
sizable performance improvement

615
00:20:20,880 --> 00:20:22,559
on the small subset of packets that are

616
00:20:22,559 --> 00:20:24,559
dls handshakes

617
00:20:24,559 --> 00:20:26,400
you probably care about this whenever

618
00:20:26,400 --> 00:20:27,840
you're in the position of serving up

619
00:20:27,840 --> 00:20:30,880
a lot of tls connections

620
00:20:30,880 --> 00:20:33,120
whatever percentage of cpu usage is due

621
00:20:33,120 --> 00:20:34,559
to tls session

622
00:20:34,559 --> 00:20:36,799
tls handshakes you probably want to keep

623
00:20:36,799 --> 00:20:40,000
that load to minimize costs

624
00:20:40,000 --> 00:20:42,320
but if you're like me you don't care i'm

625
00:20:42,320 --> 00:20:43,440
taking on all the

626
00:20:43,440 --> 00:20:45,840
security and privacy risk as just a

627
00:20:45,840 --> 00:20:46,640
regular

628
00:20:46,640 --> 00:20:50,000
internet user taking on all the

629
00:20:50,000 --> 00:20:51,600
security and privacy risk of session

630
00:20:51,600 --> 00:20:53,200
resumption but the amount that actually

631
00:20:53,200 --> 00:20:55,120
saves on my powerball is probably pretty

632
00:20:55,120 --> 00:20:56,159
minimal

633
00:20:56,159 --> 00:20:58,240
additionally if you're running a web

634
00:20:58,240 --> 00:21:00,559
application that you might

635
00:21:00,559 --> 00:21:02,000
you might care about session resumption

636
00:21:02,000 --> 00:21:03,840
on incoming connections

637
00:21:03,840 --> 00:21:05,919
uh but when you are making an external

638
00:21:05,919 --> 00:21:07,760
request it's probably not in your

639
00:21:07,760 --> 00:21:08,799
interests

640
00:21:08,799 --> 00:21:10,320
you're placing a lot of trust on random

641
00:21:10,320 --> 00:21:12,480
websites not to redirect you

642
00:21:12,480 --> 00:21:15,440
and own your local services so how you

643
00:21:15,440 --> 00:21:17,919
how might you turn this off

644
00:21:17,919 --> 00:21:20,240
here's what i found it's kind of sad

645
00:21:20,240 --> 00:21:21,919
when stuff forces you into this

646
00:21:21,919 --> 00:21:23,760
but at least as an internet user you can

647
00:21:23,760 --> 00:21:25,360
pick firefox and disable session

648
00:21:25,360 --> 00:21:27,120
identifiers if you're really paranoid

649
00:21:27,120 --> 00:21:28,480
about this stuff

650
00:21:28,480 --> 00:21:30,000
if you're running a web application

651
00:21:30,000 --> 00:21:31,840
you're a bit stuck though what should

652
00:21:31,840 --> 00:21:34,080
you do

653
00:21:34,400 --> 00:21:36,400
first off it's a good idea in general to

654
00:21:36,400 --> 00:21:37,679
run your outbound requests through a

655
00:21:37,679 --> 00:21:38,640
proxy

656
00:21:38,640 --> 00:21:40,080
especially if you're supporting web

657
00:21:40,080 --> 00:21:42,720
hooks or some other ssrf prone feature

658
00:21:42,720 --> 00:21:44,720
but also reconsider your infrastructure

659
00:21:44,720 --> 00:21:46,720
decisions you'd be surprised just how

660
00:21:46,720 --> 00:21:48,400
much stuff is still set up in a way that

661
00:21:48,400 --> 00:21:50,880
is just one locally initiated tcp stream

662
00:21:50,880 --> 00:21:52,120
away from compromise

663
00:21:52,120 --> 00:21:54,240
[Music]

664
00:21:54,240 --> 00:21:56,240
and here are the general takeaways the

665
00:21:56,240 --> 00:21:57,600
thing i'd like to highlight is

666
00:21:57,600 --> 00:21:58,880
if you're just starting out on the

667
00:21:58,880 --> 00:22:00,880
offensive side of security i'd encourage

668
00:22:00,880 --> 00:22:02,320
you to look at random standards and

669
00:22:02,320 --> 00:22:04,159
browser features that come out

670
00:22:04,159 --> 00:22:06,000
even if you don't fully understand them

671
00:22:06,000 --> 00:22:07,760
at first find something that seems

672
00:22:07,760 --> 00:22:09,200
interesting and start hacking around in

673
00:22:09,200 --> 00:22:10,480
wireshark

674
00:22:10,480 --> 00:22:12,480
i know i didn't understand tls and i

675
00:22:12,480 --> 00:22:13,919
still don't really understand it

676
00:22:13,919 --> 00:22:16,720
but as an attacker you only really need

677
00:22:16,720 --> 00:22:18,240
to understand the worst parts

678
00:22:18,240 --> 00:22:21,360
and that's what this is all about

679
00:22:21,360 --> 00:22:23,280
and thank you here's my twitter and a

680
00:22:23,280 --> 00:22:25,280
link to latakora where i work

681
00:22:25,280 --> 00:22:26,640
they're a great place to work and have

682
00:22:26,640 --> 00:22:28,240
been amazingly supportive of random

683
00:22:28,240 --> 00:22:29,760
research directions i take

684
00:22:29,760 --> 00:22:30,750
definitely take a look

685
00:22:30,750 --> 00:22:34,029
[Music]

686
00:22:35,440 --> 00:22:37,360
thanks everyone for watching and for all

687
00:22:37,360 --> 00:22:38,559
the comments

688
00:22:38,559 --> 00:22:41,520
i don't see any questions quite yet um

689
00:22:41,520 --> 00:22:43,440
oh actually i do see one

690
00:22:43,440 --> 00:22:45,200
uh when using an image proxy in your

691
00:22:45,200 --> 00:22:47,039
email protects against this

692
00:22:47,039 --> 00:22:50,880
that's a good question you'll notice uh

693
00:22:50,880 --> 00:22:54,000
if you rewatched in the demo i used

694
00:22:54,000 --> 00:22:57,360
microsoft uh outlook outlook

695
00:22:57,360 --> 00:23:00,240
and not gmail um and that's actually due

696
00:23:00,240 --> 00:23:01,200
to the fact that

697
00:23:01,200 --> 00:23:04,400
uh you're correct like using when an

698
00:23:04,400 --> 00:23:06,080
email provider uses

699
00:23:06,080 --> 00:23:09,520
an image proxy that does to some extent

700
00:23:09,520 --> 00:23:13,039
um protect end users against

701
00:23:13,039 --> 00:23:15,280
uh against this although then the catch

702
00:23:15,280 --> 00:23:16,240
of course is

703
00:23:16,240 --> 00:23:17,760
email providers have to put some work

704
00:23:17,760 --> 00:23:19,919
into

705
00:23:21,039 --> 00:23:22,400
preventing esc's traffic against

706
00:23:22,400 --> 00:23:24,240
themselves which of course you know

707
00:23:24,240 --> 00:23:25,120
gmail being

708
00:23:25,120 --> 00:23:28,159
as big as it is they've put that work in

709
00:23:28,159 --> 00:23:31,840
um and i think uh i might not be

710
00:23:31,840 --> 00:23:34,799
correct about this in all cases but uh

711
00:23:34,799 --> 00:23:36,960
outlook uh does not use an

712
00:23:36,960 --> 00:23:39,200
image proxy and that's why the demo

713
00:23:39,200 --> 00:23:42,000
worked and not look

714
00:23:42,880 --> 00:23:46,799
um let's see

715
00:23:47,440 --> 00:23:49,919
see do you have a white paper on this um

716
00:23:49,919 --> 00:23:52,159
so i didn't get around to uh

717
00:23:52,159 --> 00:23:53,760
writing a white paper but there is

718
00:23:53,760 --> 00:23:56,240
something close to it um

719
00:23:56,240 --> 00:23:58,799
the github link has i wrote up the

720
00:23:58,799 --> 00:23:59,840
readme

721
00:23:59,840 --> 00:24:04,080
um it has at least some

722
00:24:04,080 --> 00:24:06,880
uh some explanation of the attacks uh as

723
00:24:06,880 --> 00:24:08,240
well as a little diagram

724
00:24:08,240 --> 00:24:11,360
and uh instructions on how to set up the

725
00:24:11,360 --> 00:24:13,520
infrastructure for yourself

726
00:24:13,520 --> 00:24:16,720
um and the next question uh does this

727
00:24:16,720 --> 00:24:18,799
work on all versions of tls

728
00:24:18,799 --> 00:24:23,200
um so uh it works on

729
00:24:23,200 --> 00:24:25,520
um

730
00:24:26,960 --> 00:24:30,240
so it works i want to say you know with

731
00:24:30,240 --> 00:24:32,400
tls implementations you get

732
00:24:32,400 --> 00:24:35,679
uh it gets a bit fuzzy

733
00:24:35,679 --> 00:24:38,159
um i think the features that this relies

734
00:24:38,159 --> 00:24:39,200
on

735
00:24:39,200 --> 00:24:42,559
um have been present since cls 1.2

736
00:24:42,559 --> 00:24:45,039
although i think you know most stuff is

737
00:24:45,039 --> 00:24:47,520
on 1.2 or 1.3 at least

738
00:24:47,520 --> 00:24:50,720
um so you run into more as

739
00:24:50,720 --> 00:24:53,440
if the actual request making the https

740
00:24:53,440 --> 00:24:54,880
client library

741
00:24:54,880 --> 00:24:58,400
um if that if that

742
00:24:58,400 --> 00:25:00,480
uh implementation like has a cache on

743
00:25:00,480 --> 00:25:01,919
its own so like if you

744
00:25:01,919 --> 00:25:04,240
use like the built-in java https request

745
00:25:04,240 --> 00:25:06,000
library uh method

746
00:25:06,000 --> 00:25:07,760
um that will automatically cache

747
00:25:07,760 --> 00:25:09,760
sessions for you which will make

748
00:25:09,760 --> 00:25:12,960
you know if you have an sref

749
00:25:13,039 --> 00:25:14,880
issue in your website this is a valid

750
00:25:14,880 --> 00:25:18,320
approach to in the java application

751
00:25:18,320 --> 00:25:24,000
um oh yes i'll re-share the github link

752
00:25:26,840 --> 00:25:29,840
here

753
00:25:31,200 --> 00:25:36,000
um let's see and what versions of tls

754
00:25:36,000 --> 00:25:37,760
okay that was the same as the previous

755
00:25:37,760 --> 00:25:39,200
one

756
00:25:39,200 --> 00:25:42,960
oh yes okay and another question

757
00:25:42,960 --> 00:25:44,640
what kind of payload can be set in a tls

758
00:25:44,640 --> 00:25:47,039
ticket is binary data possible

759
00:25:47,039 --> 00:25:50,320
like xo um i believe

760
00:25:50,320 --> 00:25:54,240
i believe null bytes are possible um

761
00:25:54,240 --> 00:25:57,520
it's just about anything because it's um

762
00:25:57,520 --> 00:26:01,039
i believe it's a length prefix field um

763
00:26:01,039 --> 00:26:03,279
the particular thing that you run into

764
00:26:03,279 --> 00:26:05,039
or that you know

765
00:26:05,039 --> 00:26:06,880
gets you a lot of the ssrf

766
00:26:06,880 --> 00:26:08,320
vulnerabilities in practice

767
00:26:08,320 --> 00:26:11,520
is uh is the new lines because that gets

768
00:26:11,520 --> 00:26:14,080
you like memcached that gets you

769
00:26:14,080 --> 00:26:16,000
smtp although it would be really

770
00:26:16,000 --> 00:26:17,760
interesting trying to

771
00:26:17,760 --> 00:26:19,679
attack uh non-newline delimited

772
00:26:19,679 --> 00:26:20,960
protocols like

773
00:26:20,960 --> 00:26:23,120
you know random binary debugging

774
00:26:23,120 --> 00:26:24,080
protocols

775
00:26:24,080 --> 00:26:25,760
which i haven't had any success with yet

776
00:26:25,760 --> 00:26:28,720
but i imagine might be possible

777
00:26:28,720 --> 00:26:32,080
um oh yes and you have an example of the

778
00:26:32,080 --> 00:26:32,960
code used for the

779
00:26:32,960 --> 00:26:36,559
calc.exe payload that

780
00:26:36,559 --> 00:26:40,240
so that's buried within the github

781
00:26:40,240 --> 00:26:43,919
link a bit i'm gonna try to find the

782
00:26:43,919 --> 00:26:53,840
path here

783
00:26:54,159 --> 00:26:57,600
let's see so it's in quiet hell

784
00:26:57,600 --> 00:27:01,840
poisoning slash minimal django

785
00:27:01,840 --> 00:27:04,080
um so in there i have a payload

786
00:27:04,080 --> 00:27:05,760
memcached

787
00:27:05,760 --> 00:27:08,799
file which has uh that has a d

788
00:27:08,799 --> 00:27:10,559
serialization payload

789
00:27:10,559 --> 00:27:14,720
um for attacking specifically uh

790
00:27:14,720 --> 00:27:17,440
specifically django users and it's

791
00:27:17,440 --> 00:27:19,200
specific to

792
00:27:19,200 --> 00:27:22,720
uh it's specific to this application

793
00:27:22,720 --> 00:27:24,720
because in order to load the payload you

794
00:27:24,720 --> 00:27:26,080
do need to know like

795
00:27:26,080 --> 00:27:28,960
what that name of the cache entry is um

796
00:27:28,960 --> 00:27:30,159
so there is

797
00:27:30,159 --> 00:27:32,799
you know in terms of practical

798
00:27:32,799 --> 00:27:34,000
exploitation of this

799
00:27:34,000 --> 00:27:36,240
you know it does depend on some recon

800
00:27:36,240 --> 00:27:37,200
and some knowledge of

801
00:27:37,200 --> 00:27:39,520
what application you're attacking um of

802
00:27:39,520 --> 00:27:40,880
course if it's open source

803
00:27:40,880 --> 00:27:44,640
which some of some of the apps i found

804
00:27:44,640 --> 00:27:49,840
uh are um then that's a lot easier

805
00:27:50,240 --> 00:27:52,720
let's see

806
00:27:57,440 --> 00:27:59,360
oh here's another question i'm seeing in

807
00:27:59,360 --> 00:28:01,840
the chat if a deep inspection firewall

808
00:28:01,840 --> 00:28:02,880
was able to block

809
00:28:02,880 --> 00:28:05,039
external dns supplies that had internal

810
00:28:05,039 --> 00:28:06,080
answers

811
00:28:06,080 --> 00:28:08,000
including locos would that mitigate the

812
00:28:08,000 --> 00:28:11,440
dns refining impact

813
00:28:14,840 --> 00:28:17,360
um

814
00:28:17,360 --> 00:28:18,399
i think this is an angle i haven't

815
00:28:18,399 --> 00:28:21,679
thought about as much um

816
00:28:21,679 --> 00:28:24,960
i want to say there is uh

817
00:28:24,960 --> 00:28:28,000
there is in terms of generic dns

818
00:28:28,000 --> 00:28:29,120
rebinding

819
00:28:29,120 --> 00:28:34,159
defenses uh i have seen some stuff

820
00:28:34,159 --> 00:28:36,399
uh

821
00:28:39,840 --> 00:28:42,640
i don't know what what they actually uh

822
00:28:42,640 --> 00:28:44,559
what's actually been implemented

823
00:28:44,559 --> 00:28:48,159
um but i think you know like on my home

824
00:28:48,159 --> 00:28:50,240
network i have like a pie haul

825
00:28:50,240 --> 00:28:54,000
um blocking ads and i think i've seen

826
00:28:54,000 --> 00:28:57,840
a uh i think i've seen some so

827
00:28:57,840 --> 00:28:59,279
like a plug-in for pie hole or something

828
00:28:59,279 --> 00:29:00,960
like that that does

829
00:29:00,960 --> 00:29:02,559
try to mitigate dns or binding i don't

830
00:29:02,559 --> 00:29:04,799
remember if it's by just

831
00:29:04,799 --> 00:29:08,640
um keeping like dns ttl values really

832
00:29:08,640 --> 00:29:09,840
really high

833
00:29:09,840 --> 00:29:13,840
um that's a good question um

834
00:29:13,840 --> 00:29:14,960
it may be a little bit more in the

835
00:29:14,960 --> 00:29:17,279
general dns refining

836
00:29:17,279 --> 00:29:20,159
attack category

837
00:29:21,600 --> 00:29:27,039
all right i think

838
00:29:27,039 --> 00:29:30,159
see i think that's all the questions um

839
00:29:30,159 --> 00:29:31,840
thank you everyone for watching and for

840
00:29:31,840 --> 00:29:36,879
all the kind words in the chat

