1
00:00:03,810 --> 00:00:14,240
[Music]

2
00:00:14,719 --> 00:00:15,599
good afternoon

3
00:00:15,599 --> 00:00:17,520
and welcome to webcache entanglement

4
00:00:17,520 --> 00:00:21,119
novel pathways to poisoning

5
00:00:21,279 --> 00:00:22,720
have you ever thought you understood

6
00:00:22,720 --> 00:00:25,279
something and then realized that what

7
00:00:25,279 --> 00:00:26,240
you understand

8
00:00:26,240 --> 00:00:28,840
is actually only one percent of the

9
00:00:28,840 --> 00:00:30,560
total

10
00:00:30,560 --> 00:00:32,800
or have you ever found a vulnerability

11
00:00:32,800 --> 00:00:33,680
that wasn't

12
00:00:33,680 --> 00:00:36,399
quite exploitable and exploit chain with

13
00:00:36,399 --> 00:00:36,719
a

14
00:00:36,719 --> 00:00:39,680
missing link in this session i'm going

15
00:00:39,680 --> 00:00:41,360
to share with you some advanced

16
00:00:41,360 --> 00:00:42,000
techniques

17
00:00:42,000 --> 00:00:44,399
to find some seriously esoteric cash

18
00:00:44,399 --> 00:00:45,360
behaviors

19
00:00:45,360 --> 00:00:47,520
and combine them into glorious exploit

20
00:00:47,520 --> 00:00:48,399
chains to turn

21
00:00:48,399 --> 00:00:52,800
junk vulnerabilities into criticals

22
00:00:53,199 --> 00:00:55,600
i used to think that i understood most

23
00:00:55,600 --> 00:00:56,800
of what there is to know

24
00:00:56,800 --> 00:00:59,280
about how caches work and how to poison

25
00:00:59,280 --> 00:01:00,320
them

26
00:01:00,320 --> 00:01:02,879
until i stumbled on a small information

27
00:01:02,879 --> 00:01:03,680
link

28
00:01:03,680 --> 00:01:06,560
on systems running akamai if you send a

29
00:01:06,560 --> 00:01:08,159
certain pragma value then they'll come

30
00:01:08,159 --> 00:01:10,240
back at you with their cash key

31
00:01:10,240 --> 00:01:13,200
in the response headers and the value of

32
00:01:13,200 --> 00:01:15,360
this key is a bit different from what

33
00:01:15,360 --> 00:01:19,040
i expected but more concerningly

34
00:01:19,040 --> 00:01:20,400
they don't just come back at you with

35
00:01:20,400 --> 00:01:21,759
that one header they actually give you

36
00:01:21,759 --> 00:01:23,920
two cache keys which don't quite

37
00:01:23,920 --> 00:01:26,479
match and if you add another pragma

38
00:01:26,479 --> 00:01:27,600
value

39
00:01:27,600 --> 00:01:30,880
you get a third cache key but you know

40
00:01:30,880 --> 00:01:32,799
i'm sure things are simple right we just

41
00:01:32,799 --> 00:01:33,759
need to identify

42
00:01:33,759 --> 00:01:36,159
which of these cache keys is actually

43
00:01:36,159 --> 00:01:37,920
accurate

44
00:01:37,920 --> 00:01:41,119
well is it the humble cash key

45
00:01:41,119 --> 00:01:43,759
is it the extended cash key for internal

46
00:01:43,759 --> 00:01:45,520
use only or

47
00:01:45,520 --> 00:01:49,119
is it the true cash key after extensive

48
00:01:49,119 --> 00:01:49,840
research

49
00:01:49,840 --> 00:01:51,759
i can tell you that the answer is none

50
00:01:51,759 --> 00:01:53,759
of them not one of these keys

51
00:01:53,759 --> 00:01:57,119
is entirely accurate but if we assume

52
00:01:57,119 --> 00:01:58,799
that there's some kind of element of

53
00:01:58,799 --> 00:01:59,520
truth in them

54
00:01:59,520 --> 00:02:01,600
then they still leave us with some quite

55
00:02:01,600 --> 00:02:02,880
serious questions

56
00:02:02,880 --> 00:02:05,600
like where did my parameter go it's in

57
00:02:05,600 --> 00:02:07,200
my request but it's not in

58
00:02:07,200 --> 00:02:09,758
any of the keys where did this and white

59
00:02:09,758 --> 00:02:11,520
transform parameter that i didn't send

60
00:02:11,520 --> 00:02:12,239
come from

61
00:02:12,239 --> 00:02:14,959
and why is it in some keys but not other

62
00:02:14,959 --> 00:02:16,560
keys

63
00:02:16,560 --> 00:02:18,160
what's this double underscore thing

64
00:02:18,160 --> 00:02:20,400
about that looks kind of shady

65
00:02:20,400 --> 00:02:22,879
and our other caching systems this

66
00:02:22,879 --> 00:02:24,879
quirky

67
00:02:24,879 --> 00:02:27,120
following up on each of those questions

68
00:02:27,120 --> 00:02:29,520
led me to an exploitable scenario which

69
00:02:29,520 --> 00:02:30,800
i'm going to share with you

70
00:02:30,800 --> 00:02:34,239
today first i'm just going to recap the

71
00:02:34,239 --> 00:02:35,760
basic cash poisoning

72
00:02:35,760 --> 00:02:38,400
concept and show how this research

73
00:02:38,400 --> 00:02:40,640
diverges from classical cash poisoning

74
00:02:40,640 --> 00:02:42,319
techniques

75
00:02:42,319 --> 00:02:44,319
then i'll share a methodology for

76
00:02:44,319 --> 00:02:46,640
finding these new types of issues

77
00:02:46,640 --> 00:02:48,480
share a whole bunch of case studies

78
00:02:48,480 --> 00:02:50,000
where i've applied the methodology to

79
00:02:50,000 --> 00:02:50,480
find

80
00:02:50,480 --> 00:02:52,319
real vulnerabilities in sites that have

81
00:02:52,319 --> 00:02:54,239
bug bounty programs

82
00:02:54,239 --> 00:02:56,319
and share some tooling to make your life

83
00:02:56,319 --> 00:02:58,239
easier then i'll talk about how to

84
00:02:58,239 --> 00:02:59,519
prevent these attacks

85
00:02:59,519 --> 00:03:02,840
wrap up and take roughly five minutes of

86
00:03:02,840 --> 00:03:04,319
questions

87
00:03:04,319 --> 00:03:07,200
caches work by saving copies of web

88
00:03:07,200 --> 00:03:07,760
pages

89
00:03:07,760 --> 00:03:10,480
in order to reduce load on the back end

90
00:03:10,480 --> 00:03:11,360
system

91
00:03:11,360 --> 00:03:12,959
and web cache poisoning is just a

92
00:03:12,959 --> 00:03:14,879
general term for when you trick a cache

93
00:03:14,879 --> 00:03:16,879
into saving a harmful page

94
00:03:16,879 --> 00:03:20,000
and serving it up to other users

95
00:03:20,000 --> 00:03:23,040
how do you poison the cache well caches

96
00:03:23,040 --> 00:03:24,959
map requests to responses using

97
00:03:24,959 --> 00:03:26,080
something called

98
00:03:26,080 --> 00:03:28,400
the cache key which is the subset of the

99
00:03:28,400 --> 00:03:29,680
request that they think

100
00:03:29,680 --> 00:03:32,480
is actually important generally this

101
00:03:32,480 --> 00:03:34,319
includes the host header

102
00:03:34,319 --> 00:03:37,280
and the request line but it doesn't

103
00:03:37,280 --> 00:03:39,040
include random other headers like them

104
00:03:39,040 --> 00:03:40,560
like the ones that i've highlighted in

105
00:03:40,560 --> 00:03:42,000
orange on this slide

106
00:03:42,000 --> 00:03:44,080
so a classic cache poisoning attack is

107
00:03:44,080 --> 00:03:46,239
you simply put your payload in one of

108
00:03:46,239 --> 00:03:47,440
the orange headers

109
00:03:47,440 --> 00:03:49,280
and hope that that makes the application

110
00:03:49,280 --> 00:03:51,200
send something harmful back

111
00:03:51,200 --> 00:03:53,519
and the cache will save it and serve it

112
00:03:53,519 --> 00:03:56,080
up to other users

113
00:03:56,080 --> 00:03:58,480
but there's a bit of a problem with this

114
00:03:58,480 --> 00:04:00,080
approach to cache poisoning which is

115
00:04:00,080 --> 00:04:00,480
that

116
00:04:00,480 --> 00:04:02,400
most applications take most of their

117
00:04:02,400 --> 00:04:04,560
input from the query string

118
00:04:04,560 --> 00:04:07,439
and from the path and we can't directly

119
00:04:07,439 --> 00:04:09,120
edit those with this style

120
00:04:09,120 --> 00:04:12,400
of attack however this

121
00:04:12,400 --> 00:04:14,239
understanding of cache keys is actually

122
00:04:14,239 --> 00:04:15,760
a bit simplified

123
00:04:15,760 --> 00:04:17,199
the request line yeah it is

124
00:04:17,199 --> 00:04:19,759
unexploitable because it's in the key

125
00:04:19,759 --> 00:04:22,720
unless someone decides the analytics

126
00:04:22,720 --> 00:04:24,560
parameters are hurting performance and

127
00:04:24,560 --> 00:04:27,040
they need to rewrite the query string

128
00:04:27,040 --> 00:04:28,960
or the cache decides it's going to

129
00:04:28,960 --> 00:04:31,040
normalize the request line because you

130
00:04:31,040 --> 00:04:33,280
know normalization is great

131
00:04:33,280 --> 00:04:35,360
or the cache key components are stored

132
00:04:35,360 --> 00:04:36,400
next to each other as

133
00:04:36,400 --> 00:04:39,759
unescaped strings or there simply

134
00:04:39,759 --> 00:04:42,800
is no cache key any of these can cause

135
00:04:42,800 --> 00:04:43,600
trouble

136
00:04:43,600 --> 00:04:45,520
for your application as we'll see

137
00:04:45,520 --> 00:04:47,919
shortly

138
00:04:47,919 --> 00:04:50,320
because this approach to cash poisoning

139
00:04:50,320 --> 00:04:51,600
is built around

140
00:04:51,600 --> 00:04:54,560
exploiting specific unique quirks in the

141
00:04:54,560 --> 00:04:56,960
target system the first step to an

142
00:04:56,960 --> 00:04:58,080
exploit is to get an

143
00:04:58,080 --> 00:05:00,639
understanding of how the target cache

144
00:05:00,639 --> 00:05:01,280
works

145
00:05:01,280 --> 00:05:02,880
if you can't do that you don't stand a

146
00:05:02,880 --> 00:05:05,360
chance with any of these techniques

147
00:05:05,360 --> 00:05:07,520
and to gain that understanding we need

148
00:05:07,520 --> 00:05:10,560
the help of a cache oracle this is just

149
00:05:10,560 --> 00:05:13,120
a term i've made up for a page on the

150
00:05:13,120 --> 00:05:15,039
site that we're going to ask a series of

151
00:05:15,039 --> 00:05:16,080
questions to

152
00:05:16,080 --> 00:05:18,240
in order to understand how the cache

153
00:05:18,240 --> 00:05:19,600
works

154
00:05:19,600 --> 00:05:22,960
this page needs to be cacheable and

155
00:05:22,960 --> 00:05:25,440
it needs to tell us somehow whether it

156
00:05:25,440 --> 00:05:26,080
got a

157
00:05:26,080 --> 00:05:28,000
a cash hit or a cash missed this could

158
00:05:28,000 --> 00:05:29,600
be headers or it could just be the speed

159
00:05:29,600 --> 00:05:30,320
with which

160
00:05:30,320 --> 00:05:34,320
the response comes back and in theory

161
00:05:34,320 --> 00:05:36,160
those two conditions are sufficient but

162
00:05:36,160 --> 00:05:38,400
it will also make life easier and let us

163
00:05:38,400 --> 00:05:39,600
find some more advanced

164
00:05:39,600 --> 00:05:42,400
attacks if this if this cache oracle

165
00:05:42,400 --> 00:05:44,960
page also reflects the whole url

166
00:05:44,960 --> 00:05:47,680
and reflects at least one specific

167
00:05:47,680 --> 00:05:49,199
parameter

168
00:05:49,199 --> 00:05:51,919
having chosen this page and got hold of

169
00:05:51,919 --> 00:05:53,759
any documentation or source code that

170
00:05:53,759 --> 00:05:55,360
you might be able to find

171
00:05:55,360 --> 00:05:57,440
the next step is to ask a series of

172
00:05:57,440 --> 00:05:59,440
questions to the so-called to understand

173
00:05:59,440 --> 00:06:01,440
what's happening

174
00:06:01,440 --> 00:06:03,600
the thing to focus on is look for

175
00:06:03,600 --> 00:06:04,960
transformations

176
00:06:04,960 --> 00:06:07,199
that are happening on your request in

177
00:06:07,199 --> 00:06:08,639
order to create

178
00:06:08,639 --> 00:06:11,759
the key things like is your request

179
00:06:11,759 --> 00:06:13,440
being normalized when it's stored in the

180
00:06:13,440 --> 00:06:15,199
key how is

181
00:06:15,199 --> 00:06:16,800
how are the components being stored in

182
00:06:16,800 --> 00:06:18,319
the key next to each other

183
00:06:18,319 --> 00:06:20,400
is there some kind of url parsing that's

184
00:06:20,400 --> 00:06:22,639
happening before the key is generated

185
00:06:22,639 --> 00:06:24,639
and so on we'll see some example of

186
00:06:24,639 --> 00:06:25,840
where these go

187
00:06:25,840 --> 00:06:28,880
go wrong shortly having found

188
00:06:28,880 --> 00:06:30,720
hopefully a few quirks in the target's

189
00:06:30,720 --> 00:06:32,160
cache the final step

190
00:06:32,160 --> 00:06:35,039
is to find a gadget to chain this with

191
00:06:35,039 --> 00:06:36,240
to create

192
00:06:36,240 --> 00:06:39,120
a powerful export this could be an

193
00:06:39,120 --> 00:06:41,120
existing vulnerability

194
00:06:41,120 --> 00:06:43,039
on the target where we can just increase

195
00:06:43,039 --> 00:06:44,400
the severity of it

196
00:06:44,400 --> 00:06:46,960
by combining it with cash poisoning or

197
00:06:46,960 --> 00:06:48,400
it could be something that's completely

198
00:06:48,400 --> 00:06:49,039
harmless

199
00:06:49,039 --> 00:06:51,599
by itself

200
00:06:52,080 --> 00:06:55,199
and that's the theory so now i'm going

201
00:06:55,199 --> 00:06:56,000
to show you

202
00:06:56,000 --> 00:06:57,919
the kinds of things that you might run

203
00:06:57,919 --> 00:06:59,759
into when you apply that methodology to

204
00:06:59,759 --> 00:07:01,440
real life systems

205
00:07:01,440 --> 00:07:03,360
starting out with some really simple

206
00:07:03,360 --> 00:07:05,039
scenarios and then things will get

207
00:07:05,039 --> 00:07:07,360
progressively crazier towards the end of

208
00:07:07,360 --> 00:07:09,599
the presentation

209
00:07:09,599 --> 00:07:12,080
here's a nice simple example of how to

210
00:07:12,080 --> 00:07:12,639
apply

211
00:07:12,639 --> 00:07:14,800
the methodology based on a real target

212
00:07:14,800 --> 00:07:16,240
that i found

213
00:07:16,240 --> 00:07:18,000
for our oracle we're just gonna use

214
00:07:18,000 --> 00:07:19,840
their home page because

215
00:07:19,840 --> 00:07:21,280
they've got this header that tells us

216
00:07:21,280 --> 00:07:23,199
whether we got a cash hit or a cash miss

217
00:07:23,199 --> 00:07:24,880
that makes life easy

218
00:07:24,880 --> 00:07:27,039
and they're also reflecting the host

219
00:07:27,039 --> 00:07:28,479
header which is where we're going

220
00:07:28,479 --> 00:07:31,039
going to put our payload what we're

221
00:07:31,039 --> 00:07:32,400
going to do is we're going to ask the

222
00:07:32,400 --> 00:07:33,280
question

223
00:07:33,280 --> 00:07:35,840
is the port in the host header included

224
00:07:35,840 --> 00:07:38,160
in the cash kit so we're going to send

225
00:07:38,160 --> 00:07:40,400
a port of one we see it get reflected

226
00:07:40,400 --> 00:07:41,280
back to us

227
00:07:41,280 --> 00:07:42,840
and then we're going to replay that

228
00:07:42,840 --> 00:07:44,879
request buy it for by

229
00:07:44,879 --> 00:07:46,720
identical but without the port

230
00:07:46,720 --> 00:07:48,160
specification

231
00:07:48,160 --> 00:07:50,800
and sure enough as you can see we have a

232
00:07:50,800 --> 00:07:52,800
cash hit so that tells us the port

233
00:07:52,800 --> 00:07:55,360
is not included in the cash key and in

234
00:07:55,360 --> 00:07:56,960
fact with that one request we've just

235
00:07:56,960 --> 00:07:58,560
taken down the home page

236
00:07:58,560 --> 00:08:00,960
of that website because now when any any

237
00:08:00,960 --> 00:08:01,840
any whenever

238
00:08:01,840 --> 00:08:04,080
anyone tries to fetch that page they're

239
00:08:04,080 --> 00:08:06,080
going to get a redirect

240
00:08:06,080 --> 00:08:08,160
to port one and their browser will just

241
00:08:08,160 --> 00:08:09,919
time it

242
00:08:09,919 --> 00:08:12,240
who does this technique work on quite a

243
00:08:12,240 --> 00:08:13,680
few companies

244
00:08:13,680 --> 00:08:16,639
uh there's just one thing to mention

245
00:08:16,639 --> 00:08:18,160
before you go charging off bounty

246
00:08:18,160 --> 00:08:19,759
hunting with this if that's your kind of

247
00:08:19,759 --> 00:08:20,560
thing

248
00:08:20,560 --> 00:08:22,639
be warned that as a denial of service

249
00:08:22,639 --> 00:08:25,039
issue you may get a mixed reception

250
00:08:25,039 --> 00:08:27,520
using this sort of finding on different

251
00:08:27,520 --> 00:08:29,599
companies that have bounty programs

252
00:08:29,599 --> 00:08:31,440
i've had some of them saying we do not

253
00:08:31,440 --> 00:08:32,880
care that you can take our site down

254
00:08:32,880 --> 00:08:34,719
with one request

255
00:08:34,719 --> 00:08:36,880
and i've had other sites pay me 10k for

256
00:08:36,880 --> 00:08:38,399
it so

257
00:08:38,399 --> 00:08:40,640
as with any kind of bug bounties it's a

258
00:08:40,640 --> 00:08:43,200
bit of a lucky dip

259
00:08:43,200 --> 00:08:45,440
now one of the most common

260
00:08:45,440 --> 00:08:47,279
transformations that people do on the

261
00:08:47,279 --> 00:08:49,279
cash key is they simply eliminate

262
00:08:49,279 --> 00:08:52,560
the entire query string and you might

263
00:08:52,560 --> 00:08:54,240
think that

264
00:08:54,240 --> 00:08:56,720
such a major transformation would be

265
00:08:56,720 --> 00:08:58,800
really obvious right but

266
00:08:58,800 --> 00:09:01,120
it's actually incredibly easy to miss

267
00:09:01,120 --> 00:09:02,800
because what it does is it makes

268
00:09:02,800 --> 00:09:05,200
dynamic pages look as though they're

269
00:09:05,200 --> 00:09:06,880
static

270
00:09:06,880 --> 00:09:09,120
on a normal page if you change any

271
00:09:09,120 --> 00:09:11,279
parameter you'll have some kind of

272
00:09:11,279 --> 00:09:14,480
visible change in the response but

273
00:09:14,480 --> 00:09:16,880
if the page has a cache which excludes

274
00:09:16,880 --> 00:09:18,240
the query string from the

275
00:09:18,240 --> 00:09:20,800
from the cache key you'll you can change

276
00:09:20,800 --> 00:09:22,399
any parameters you like you can even

277
00:09:22,399 --> 00:09:23,040
specify

278
00:09:23,040 --> 00:09:25,120
a cache buster and you'll think you're

279
00:09:25,120 --> 00:09:26,560
talking to the back end

280
00:09:26,560 --> 00:09:27,920
but actually you'll be talking to the

281
00:09:27,920 --> 00:09:30,160
cache and therefore your parameters will

282
00:09:30,160 --> 00:09:31,440
make no difference

283
00:09:31,440 --> 00:09:34,800
to the response in order to find

284
00:09:34,800 --> 00:09:37,600
these pages we need to take extra

285
00:09:37,600 --> 00:09:39,519
measures

286
00:09:39,519 --> 00:09:41,920
one thing you can do is try and put cash

287
00:09:41,920 --> 00:09:43,200
busters

288
00:09:43,200 --> 00:09:45,600
in http headers that are likely to be

289
00:09:45,600 --> 00:09:46,560
included

290
00:09:46,560 --> 00:09:49,519
in the cash key and brown miner will do

291
00:09:49,519 --> 00:09:50,000
this by

292
00:09:50,000 --> 00:09:53,200
default as of today's update this

293
00:09:53,200 --> 00:09:55,040
approach works really well on some

294
00:09:55,040 --> 00:09:57,360
systems for example on cloudflare by

295
00:09:57,360 --> 00:09:59,519
default the origin is in the cache key

296
00:09:59,519 --> 00:10:01,040
and so this will pierce

297
00:10:01,040 --> 00:10:03,360
through their cache and tell you whether

298
00:10:03,360 --> 00:10:06,880
that page actually is dynamic or not

299
00:10:06,880 --> 00:10:08,480
but it doesn't work on all systems

300
00:10:08,480 --> 00:10:10,399
because some of them basically ignore

301
00:10:10,399 --> 00:10:11,600
all the http

302
00:10:11,600 --> 00:10:13,680
headers or the ones that we can change

303
00:10:13,680 --> 00:10:15,440
without just breaking the application

304
00:10:15,440 --> 00:10:17,600
anyway

305
00:10:17,600 --> 00:10:19,600
however there is a kind of a cheat you

306
00:10:19,600 --> 00:10:20,800
can do

307
00:10:20,800 --> 00:10:23,200
on fastly and systems running varnish

308
00:10:23,200 --> 00:10:24,640
and various others

309
00:10:24,640 --> 00:10:26,800
you can use the purge or fastly purge

310
00:10:26,800 --> 00:10:28,480
http methods

311
00:10:28,480 --> 00:10:31,279
to directly delete entries from the

312
00:10:31,279 --> 00:10:32,959
target website's cache

313
00:10:32,959 --> 00:10:36,000
with no authentication this feature is

314
00:10:36,000 --> 00:10:38,560
fantastic for launching cache poisoning

315
00:10:38,560 --> 00:10:41,200
attacks but it's also great for simply

316
00:10:41,200 --> 00:10:42,720
piercing through the cache

317
00:10:42,720 --> 00:10:44,800
to find out what's really going on with

318
00:10:44,800 --> 00:10:46,959
the page behind it

319
00:10:46,959 --> 00:10:48,880
if that doesn't work well there is an

320
00:10:48,880 --> 00:10:50,079
option of last

321
00:10:50,079 --> 00:10:52,399
resort it kind of sucks but you can take

322
00:10:52,399 --> 00:10:54,000
advantage of the fact that a lot of

323
00:10:54,000 --> 00:10:54,800
caches

324
00:10:54,800 --> 00:10:57,600
do only really lightweight normalization

325
00:10:57,600 --> 00:10:59,279
on request parts

326
00:10:59,279 --> 00:11:01,519
whereas servers and frameworks

327
00:11:01,519 --> 00:11:02,480
especially

328
00:11:02,480 --> 00:11:05,600
tend to do much heavier weight stuff so

329
00:11:05,600 --> 00:11:07,360
that means you can send requests that

330
00:11:07,360 --> 00:11:08,160
the cache

331
00:11:08,160 --> 00:11:10,880
regard as being different they generate

332
00:11:10,880 --> 00:11:12,399
a different cache key because the path

333
00:11:12,399 --> 00:11:13,760
is different

334
00:11:13,760 --> 00:11:15,360
but once the back end server has

335
00:11:15,360 --> 00:11:16,800
finished processing them they end up

336
00:11:16,800 --> 00:11:17,600
hitting

337
00:11:17,600 --> 00:11:20,800
exactly the same end point i've thought

338
00:11:20,800 --> 00:11:21,519
about putting

339
00:11:21,519 --> 00:11:23,839
this technique in for a minor and by the

340
00:11:23,839 --> 00:11:26,320
time you watch this it may have happened

341
00:11:26,320 --> 00:11:28,720
but it is a bit unreliable so we'll have

342
00:11:28,720 --> 00:11:30,399
to see

343
00:11:30,399 --> 00:11:32,320
what happens when you try this technique

344
00:11:32,320 --> 00:11:33,760
out well

345
00:11:33,760 --> 00:11:36,160
you're going to find some really obvious

346
00:11:36,160 --> 00:11:37,360
vulnerabilities

347
00:11:37,360 --> 00:11:40,079
for example on this online newspaper i

348
00:11:40,079 --> 00:11:43,279
found reflected xss on every single page

349
00:11:43,279 --> 00:11:46,240
including the home page and this is a

350
00:11:46,240 --> 00:11:48,160
site that has a bug bounty program

351
00:11:48,160 --> 00:11:50,000
normally a vulnerability that obvious

352
00:11:50,000 --> 00:11:51,519
wouldn't last five minutes

353
00:11:51,519 --> 00:11:54,720
right but because of the cash no one had

354
00:11:54,720 --> 00:11:55,200
found

355
00:11:55,200 --> 00:11:56,800
that vulnerability they just talked to

356
00:11:56,800 --> 00:11:59,279
the cache and probably concluded

357
00:11:59,279 --> 00:12:02,160
that this site was static but there's a

358
00:12:02,160 --> 00:12:02,800
second

359
00:12:02,800 --> 00:12:05,120
effect because our payload here isn't

360
00:12:05,120 --> 00:12:06,720
part of the cache key

361
00:12:06,720 --> 00:12:09,360
so that means having sent that that

362
00:12:09,360 --> 00:12:11,440
request myself shown there

363
00:12:11,440 --> 00:12:13,120
from that point onwards as long as i

364
00:12:13,120 --> 00:12:15,279
time that right so it hits the back end

365
00:12:15,279 --> 00:12:17,920
anyone else who fetches that page is

366
00:12:17,920 --> 00:12:19,440
going to get my payload coming back at

367
00:12:19,440 --> 00:12:20,320
them

368
00:12:20,320 --> 00:12:22,800
so in effect with this reflected

369
00:12:22,800 --> 00:12:24,560
cross-site scripting i've gained

370
00:12:24,560 --> 00:12:26,880
persistent control over every single

371
00:12:26,880 --> 00:12:27,600
page

372
00:12:27,600 --> 00:12:31,040
on this website now

373
00:12:31,040 --> 00:12:33,120
there's some at this point some of you

374
00:12:33,120 --> 00:12:34,800
are probably thinking well

375
00:12:34,800 --> 00:12:36,560
that company is just stupid they're

376
00:12:36,560 --> 00:12:38,240
playing with caching but they've got no

377
00:12:38,240 --> 00:12:38,880
idea

378
00:12:38,880 --> 00:12:40,880
what they're doing there's no way that

379
00:12:40,880 --> 00:12:42,000
could happen to anyone

380
00:12:42,000 --> 00:12:45,360
who knows what they're doing

381
00:12:45,839 --> 00:12:48,880
and to down to that point

382
00:12:48,880 --> 00:12:51,120
i'm going to use the same technique on

383
00:12:51,120 --> 00:12:52,000
the main website

384
00:12:52,000 --> 00:12:54,880
of a caching vendor called cloudflare so

385
00:12:54,880 --> 00:12:56,639
here the gadget that we're using this

386
00:12:56,639 --> 00:12:57,200
time

387
00:12:57,200 --> 00:13:00,160
looks pretty much harmless right all

388
00:13:00,160 --> 00:13:00,800
they're doing

389
00:13:00,800 --> 00:13:03,760
is they're taking the request and query

390
00:13:03,760 --> 00:13:05,440
string that we give them

391
00:13:05,440 --> 00:13:07,440
and they're putting a slash on the end

392
00:13:07,440 --> 00:13:08,639
of the path and

393
00:13:08,639 --> 00:13:10,639
just like the previous target they've

394
00:13:10,639 --> 00:13:12,399
excluded the whole query string from the

395
00:13:12,399 --> 00:13:14,240
cache key

396
00:13:14,240 --> 00:13:15,440
what we're going to do is we're going to

397
00:13:15,440 --> 00:13:17,360
take advantage of that extra forward

398
00:13:17,360 --> 00:13:17,920
slash

399
00:13:17,920 --> 00:13:19,519
that they're sticking on so we're going

400
00:13:19,519 --> 00:13:22,160
to send a request that uses a really

401
00:13:22,160 --> 00:13:23,680
long query string

402
00:13:23,680 --> 00:13:25,839
to mean that the resulting request line

403
00:13:25,839 --> 00:13:27,440
is the maximum

404
00:13:27,440 --> 00:13:31,120
length that their server will will allow

405
00:13:31,120 --> 00:13:32,240
and then they're going to give me a

406
00:13:32,240 --> 00:13:34,880
redirect that takes that maximum length

407
00:13:34,880 --> 00:13:36,720
and puts one extra character

408
00:13:36,720 --> 00:13:39,519
in it so then having done that if i time

409
00:13:39,519 --> 00:13:40,720
that right

410
00:13:40,720 --> 00:13:44,160
then from that point onwards if anyone

411
00:13:44,160 --> 00:13:45,279
else is browsing

412
00:13:45,279 --> 00:13:48,079
cloudflare's site and they press that

413
00:13:48,079 --> 00:13:49,360
login link

414
00:13:49,360 --> 00:13:50,560
they're going to get this cached

415
00:13:50,560 --> 00:13:53,360
redirect that includes my really long

416
00:13:53,360 --> 00:13:54,800
query string

417
00:13:54,800 --> 00:13:57,040
and when they follow that redirect

418
00:13:57,040 --> 00:13:58,240
they're going to get blocked by the

419
00:13:58,240 --> 00:13:59,760
server because their request

420
00:13:59,760 --> 00:14:02,399
is too long so with one request we've

421
00:14:02,399 --> 00:14:04,160
persistently taken down cloudflare's

422
00:14:04,160 --> 00:14:06,480
login page

423
00:14:06,480 --> 00:14:08,399
it's worth mentioning that you couldn't

424
00:14:08,399 --> 00:14:11,600
send that last request by itself

425
00:14:11,600 --> 00:14:13,440
directly as a cash poisoning attack

426
00:14:13,440 --> 00:14:16,240
because cloudflare would refuse to cache

427
00:14:16,240 --> 00:14:16,800
it

428
00:14:16,800 --> 00:14:19,760
because of the http error status code

429
00:14:19,760 --> 00:14:21,279
it's the layer of

430
00:14:21,279 --> 00:14:24,000
indirection that the redirect adds that

431
00:14:24,000 --> 00:14:27,120
makes this issue exploitable

432
00:14:27,120 --> 00:14:29,920
so i reported this to cloudflare and

433
00:14:29,920 --> 00:14:31,440
they could have obviously patched it on

434
00:14:31,440 --> 00:14:33,279
their site really easily

435
00:14:33,279 --> 00:14:35,360
but they acknowledged that this was

436
00:14:35,360 --> 00:14:36,720
probably going to affect most of their

437
00:14:36,720 --> 00:14:38,560
customers as well

438
00:14:38,560 --> 00:14:40,240
and so they deployed a kind of more

439
00:14:40,240 --> 00:14:42,079
general mitigation

440
00:14:42,079 --> 00:14:45,600
they said in the cache if the query

441
00:14:45,600 --> 00:14:47,120
string is unkeyed

442
00:14:47,120 --> 00:14:50,320
and the query string

443
00:14:50,320 --> 00:14:53,360
in the responses location header

444
00:14:53,360 --> 00:14:56,240
matches the query string in the request

445
00:14:56,240 --> 00:14:58,079
just refuse to cache

446
00:14:58,079 --> 00:15:01,199
that response uh the concept behind this

447
00:15:01,199 --> 00:15:03,120
is completely sound

448
00:15:03,120 --> 00:15:05,920
but i was able to bypass it by encoding

449
00:15:05,920 --> 00:15:07,519
a single character

450
00:15:07,519 --> 00:15:09,279
in the request because the server would

451
00:15:09,279 --> 00:15:10,880
decode it and therefore it wouldn't

452
00:15:10,880 --> 00:15:12,399
match and

453
00:15:12,399 --> 00:15:13,920
cloudflare has now fixed this but

454
00:15:13,920 --> 00:15:16,560
obviously if you have any other

455
00:15:16,560 --> 00:15:18,560
transformations happening in between the

456
00:15:18,560 --> 00:15:20,079
query string of the request

457
00:15:20,079 --> 00:15:21,600
and the location header you'll once

458
00:15:21,600 --> 00:15:23,519
again be able to bypass

459
00:15:23,519 --> 00:15:26,639
this this mitigation and take down a

460
00:15:26,639 --> 00:15:29,680
whole bunch of pages

461
00:15:29,920 --> 00:15:32,399
so far we've seen how simple

462
00:15:32,399 --> 00:15:33,920
transformations can

463
00:15:33,920 --> 00:15:37,120
have quite major unexpected effects

464
00:15:37,120 --> 00:15:39,440
and on some sites you'll find even the

465
00:15:39,440 --> 00:15:41,279
transformations themselves get quite

466
00:15:41,279 --> 00:15:42,079
messy

467
00:15:42,079 --> 00:15:44,000
because they've decided to exclude

468
00:15:44,000 --> 00:15:46,000
specific parameters

469
00:15:46,000 --> 00:15:48,079
from the cache key i've seen this happen

470
00:15:48,079 --> 00:15:49,839
with utm content

471
00:15:49,839 --> 00:15:51,680
quite a few time because it's an

472
00:15:51,680 --> 00:15:53,040
analytics parameter

473
00:15:53,040 --> 00:15:54,800
it changes a lot and it's not really

474
00:15:54,800 --> 00:15:56,399
relevant to the back end

475
00:15:56,399 --> 00:15:58,399
so for performance reasons they just

476
00:15:58,399 --> 00:16:00,320
exclude it from the key

477
00:16:00,320 --> 00:16:03,839
and obviously this makes full url-based

478
00:16:03,839 --> 00:16:05,839
full url reflection based

479
00:16:05,839 --> 00:16:08,079
vulnerabilities really easy

480
00:16:08,079 --> 00:16:11,839
to exploit but what happens if they're

481
00:16:11,839 --> 00:16:14,959
they've got this behavior and you find a

482
00:16:14,959 --> 00:16:16,480
vulnerability in how the

483
00:16:16,480 --> 00:16:19,680
parameter term is handled can you

484
00:16:19,680 --> 00:16:21,519
combine that with this cash poisoning

485
00:16:21,519 --> 00:16:23,759
issue to escalate the severity

486
00:16:23,759 --> 00:16:26,800
well in theory you can't because

487
00:16:26,800 --> 00:16:28,399
the term parameter is meant to be

488
00:16:28,399 --> 00:16:30,000
included in the key

489
00:16:30,000 --> 00:16:32,320
but actually it depends on the

490
00:16:32,320 --> 00:16:33,920
implementation this is where

491
00:16:33,920 --> 00:16:37,440
cache parameter cloaking comes in

492
00:16:37,440 --> 00:16:38,800
some people are going to implement these

493
00:16:38,800 --> 00:16:41,120
things by googling them landing on

494
00:16:41,120 --> 00:16:43,680
stack overflow and then implementing a

495
00:16:43,680 --> 00:16:45,519
regex that's how i would implement it at

496
00:16:45,519 --> 00:16:46,560
least

497
00:16:46,560 --> 00:16:50,399
and if you if someone's using a regex

498
00:16:50,399 --> 00:16:52,720
like this well this one's meant to

499
00:16:52,720 --> 00:16:53,519
replace

500
00:16:53,519 --> 00:16:56,000
eliminate any parameters called

501
00:16:56,000 --> 00:16:58,320
underscore from the cash key

502
00:16:58,320 --> 00:17:00,320
given that behavior how can we place a

503
00:17:00,320 --> 00:17:02,160
payload in the parameter queue

504
00:17:02,160 --> 00:17:05,280
well just like so

505
00:17:05,280 --> 00:17:08,959
so here the interesting thing is that

506
00:17:08,959 --> 00:17:11,039
they've eliminated this parameter from

507
00:17:11,039 --> 00:17:13,119
the key but they've substituted it with

508
00:17:13,119 --> 00:17:14,640
a question mark

509
00:17:14,640 --> 00:17:18,480
so although we can or arbitrary things

510
00:17:18,480 --> 00:17:19,679
to arbitrary

511
00:17:19,679 --> 00:17:22,880
values arbitrary parameters on the site

512
00:17:22,880 --> 00:17:25,599
we can only successfully poison

513
00:17:25,599 --> 00:17:27,520
parameters used by the site

514
00:17:27,520 --> 00:17:29,679
that already have a question mark in

515
00:17:29,679 --> 00:17:30,799
them

516
00:17:30,799 --> 00:17:34,080
these kinds of complications can arise

517
00:17:34,080 --> 00:17:36,000
fairly often with this type of

518
00:17:36,000 --> 00:17:37,840
issue and they generally just make life

519
00:17:37,840 --> 00:17:40,000
more interesting

520
00:17:40,000 --> 00:17:42,160
here i've hear fairly humble target

521
00:17:42,160 --> 00:17:44,240
right just a stack overflow post but

522
00:17:44,240 --> 00:17:46,559
this also works on some more serious

523
00:17:46,559 --> 00:17:48,080
companies

524
00:17:48,080 --> 00:17:50,160
remember how we got akamai to show us a

525
00:17:50,160 --> 00:17:51,360
few cache keys

526
00:17:51,360 --> 00:17:52,799
and some of them had this akamai

527
00:17:52,799 --> 00:17:54,400
transform parameter

528
00:17:54,400 --> 00:17:56,480
and some of them didn't that means maybe

529
00:17:56,480 --> 00:17:58,080
they're excluding this from the key

530
00:17:58,080 --> 00:17:59,919
and if we send a request with that

531
00:17:59,919 --> 00:18:02,160
parameter we'll see it doesn't appear

532
00:18:02,160 --> 00:18:04,799
in the true cache key and if we change

533
00:18:04,799 --> 00:18:06,559
the value of that parameter

534
00:18:06,559 --> 00:18:08,480
then we'll get a cache hit which

535
00:18:08,480 --> 00:18:10,400
confirms it is genuinely

536
00:18:10,400 --> 00:18:13,760
not in the key and

537
00:18:13,760 --> 00:18:15,600
the cool thing here is that their

538
00:18:15,600 --> 00:18:18,240
parsing of the url is not quite optimal

539
00:18:18,240 --> 00:18:19,440
so as well as being

540
00:18:19,440 --> 00:18:22,000
able to add this value to the query

541
00:18:22,000 --> 00:18:23,440
string we can also

542
00:18:23,440 --> 00:18:26,880
append arbitrary payloads to arbitrary

543
00:18:26,880 --> 00:18:27,679
parameters

544
00:18:27,679 --> 00:18:30,480
of our choice using this technique here

545
00:18:30,480 --> 00:18:30,799
so

546
00:18:30,799 --> 00:18:33,919
here what the back end sees is one

547
00:18:33,919 --> 00:18:34,799
parameter

548
00:18:34,799 --> 00:18:37,760
called x containing our payload but

549
00:18:37,760 --> 00:18:38,880
akamai will

550
00:18:38,880 --> 00:18:40,720
will eliminate the question mark and

551
00:18:40,720 --> 00:18:44,320
everything after it from the cash key

552
00:18:44,320 --> 00:18:47,200
this would be extremely serious uh if it

553
00:18:47,200 --> 00:18:49,120
wasn't for one small catch

554
00:18:49,120 --> 00:18:50,320
which is that there's actually an

555
00:18:50,320 --> 00:18:52,559
invisible bit not mentioned in any of

556
00:18:52,559 --> 00:18:54,960
the cash keys that says

557
00:18:54,960 --> 00:18:57,520
did this request contain the parameter i

558
00:18:57,520 --> 00:18:59,360
can write transform

559
00:18:59,360 --> 00:19:01,679
what that means is that you can only use

560
00:19:01,679 --> 00:19:02,799
this technique

561
00:19:02,799 --> 00:19:05,440
to exploit sites that are already using

562
00:19:05,440 --> 00:19:06,880
the akamai transform

563
00:19:06,880 --> 00:19:09,039
functionality you can't hit arbitrary

564
00:19:09,039 --> 00:19:12,320
akamai targets with this

565
00:19:12,559 --> 00:19:14,559
on a different target something was

566
00:19:14,559 --> 00:19:16,240
weird and i couldn't find an

567
00:19:16,240 --> 00:19:19,280
oracle that was any ghost so i looked at

568
00:19:19,280 --> 00:19:20,559
the coat

569
00:19:20,559 --> 00:19:22,799
in order to figure out how to exploit it

570
00:19:22,799 --> 00:19:25,280
and we could see they were splitting

571
00:19:25,280 --> 00:19:28,400
the query string on semicolons as well

572
00:19:28,400 --> 00:19:30,320
as ampersands

573
00:19:30,320 --> 00:19:32,080
so that meant that in principle i could

574
00:19:32,080 --> 00:19:34,640
use a a payload like this

575
00:19:34,640 --> 00:19:38,240
to smuggle um a malicious bit of code

576
00:19:38,240 --> 00:19:40,000
into the callback parameter that would

577
00:19:40,000 --> 00:19:42,720
be excluded from the cache

578
00:19:42,720 --> 00:19:44,720
and i thought great i'm going to set up

579
00:19:44,720 --> 00:19:46,320
my demo

580
00:19:46,320 --> 00:19:47,760
using this because the vulnerable cache

581
00:19:47,760 --> 00:19:49,520
here is rack cache which is something i

582
00:19:49,520 --> 00:19:51,520
can easily set up myself

583
00:19:51,520 --> 00:19:53,600
i set it up i tried it and it didn't

584
00:19:53,600 --> 00:19:54,880
work

585
00:19:54,880 --> 00:19:57,120
and it didn't work because ruby on rails

586
00:19:57,120 --> 00:19:58,320
itself also

587
00:19:58,320 --> 00:20:01,360
splits parameters on semicolons

588
00:20:01,360 --> 00:20:04,640
as well as ampersands and that

589
00:20:04,640 --> 00:20:07,440
is good news for rack cash uh although

590
00:20:07,440 --> 00:20:08,400
we're going to hack it in a different

591
00:20:08,400 --> 00:20:09,760
way shortly later

592
00:20:09,760 --> 00:20:12,880
but it's bad news for ruby on rails

593
00:20:12,880 --> 00:20:14,960
because it means if you use a

594
00:20:14,960 --> 00:20:16,799
application built on rails behind

595
00:20:16,799 --> 00:20:20,000
any normal cache like varnish or akamai

596
00:20:20,000 --> 00:20:21,440
or whatever

597
00:20:21,440 --> 00:20:23,520
and you eliminate any parameter from the

598
00:20:23,520 --> 00:20:24,640
cache key

599
00:20:24,640 --> 00:20:27,280
then an attacker can exploit that to

600
00:20:27,280 --> 00:20:28,400
make arbitrary

601
00:20:28,400 --> 00:20:31,679
unkeyed changes to arbitrary parameters

602
00:20:31,679 --> 00:20:34,559
on cash flow pages on your site for

603
00:20:34,559 --> 00:20:35,280
example

604
00:20:35,280 --> 00:20:38,799
in this request here from akamai's point

605
00:20:38,799 --> 00:20:40,720
of view from the cache keys point of

606
00:20:40,720 --> 00:20:42,640
view there's one

607
00:20:42,640 --> 00:20:44,720
parameter called callback and the value

608
00:20:44,720 --> 00:20:45,760
is legit

609
00:20:45,760 --> 00:20:47,360
or whatever value the application

610
00:20:47,360 --> 00:20:49,840
happens to be using but when rails

611
00:20:49,840 --> 00:20:52,880
parses this it sees three parameters the

612
00:20:52,880 --> 00:20:54,559
callback

613
00:20:54,559 --> 00:20:56,880
utm content and a second callback

614
00:20:56,880 --> 00:20:58,240
parameter

615
00:20:58,240 --> 00:21:00,799
and it prioritizes the last parameter

616
00:21:00,799 --> 00:21:02,400
which is something as an attacker

617
00:21:02,400 --> 00:21:04,400
we have full control over so we can just

618
00:21:04,400 --> 00:21:06,480
change that to whatever harmful code

619
00:21:06,480 --> 00:21:09,120
we like and then any page on that

620
00:21:09,120 --> 00:21:09,760
website

621
00:21:09,760 --> 00:21:12,799
that uses that jsonp will end up

622
00:21:12,799 --> 00:21:16,000
being exploited

623
00:21:16,000 --> 00:21:19,440
so say you found parameter cloaking

624
00:21:19,440 --> 00:21:21,760
using any of those techniques the next

625
00:21:21,760 --> 00:21:23,760
step is to combine that with a gadget

626
00:21:23,760 --> 00:21:25,840
right and as we've seen traditional xss

627
00:21:25,840 --> 00:21:27,600
works great but if it's a hardened

628
00:21:27,600 --> 00:21:28,880
target then

629
00:21:28,880 --> 00:21:31,280
you might not have that but the good

630
00:21:31,280 --> 00:21:32,799
news is you there's a whole bunch of

631
00:21:32,799 --> 00:21:34,480
other things that are harmless by

632
00:21:34,480 --> 00:21:35,280
themselves

633
00:21:35,280 --> 00:21:37,360
and therefore less likely to be patched

634
00:21:37,360 --> 00:21:38,880
but still become harmful

635
00:21:38,880 --> 00:21:41,200
in the presence of cash of cash

636
00:21:41,200 --> 00:21:42,799
poisoning and jsonp

637
00:21:42,799 --> 00:21:45,600
as we've seen is one of them but also

638
00:21:45,600 --> 00:21:47,440
any kind of dynamic content

639
00:21:47,440 --> 00:21:50,480
in javascript files or css files

640
00:21:50,480 --> 00:21:51,840
typically this stuff

641
00:21:51,840 --> 00:21:55,760
is harmless but but with cache poisoning

642
00:21:55,760 --> 00:21:57,360
we can poison

643
00:21:57,360 --> 00:22:00,320
these resource files so that anyone that

644
00:22:00,320 --> 00:22:02,240
any pages that reference that resource

645
00:22:02,240 --> 00:22:05,760
file end up being exploited for example

646
00:22:05,760 --> 00:22:07,919
i found a css file

647
00:22:07,919 --> 00:22:11,600
on one target that was they reflected

648
00:22:11,600 --> 00:22:14,880
the query string in an import statement

649
00:22:14,880 --> 00:22:18,159
in that css file and by changing

650
00:22:18,159 --> 00:22:20,640
the the query string you could break out

651
00:22:20,640 --> 00:22:21,679
of the import

652
00:22:21,679 --> 00:22:23,520
statement and import an arbitrary

653
00:22:23,520 --> 00:22:26,960
malicious css file from your own site

654
00:22:26,960 --> 00:22:29,280
in order to steal sensitive information

655
00:22:29,280 --> 00:22:31,039
from any pages that referenced

656
00:22:31,039 --> 00:22:34,960
that css file in fact

657
00:22:34,960 --> 00:22:37,919
if the page that uses a css loads a css

658
00:22:37,919 --> 00:22:39,760
document doesn't have a doctype then you

659
00:22:39,760 --> 00:22:41,039
can even

660
00:22:41,039 --> 00:22:43,520
persuade the browser to load html

661
00:22:43,520 --> 00:22:44,400
responses

662
00:22:44,400 --> 00:22:46,960
as css which can enable exploitation of

663
00:22:46,960 --> 00:22:50,080
normally static css files

664
00:22:50,080 --> 00:22:52,320
and there's also major implications of

665
00:22:52,320 --> 00:22:53,520
this issue that make

666
00:22:53,520 --> 00:22:55,440
relative path override issues

667
00:22:55,440 --> 00:22:58,400
substantially easier to exploit

668
00:22:58,400 --> 00:23:00,720
however unfortunately it takes about 20

669
00:23:00,720 --> 00:23:02,159
minutes to explain so

670
00:23:02,159 --> 00:23:03,440
i'm just going to leave that one for the

671
00:23:03,440 --> 00:23:06,000
white paper

672
00:23:06,880 --> 00:23:09,200
now another way of hiding parameters

673
00:23:09,200 --> 00:23:10,640
from the cache

674
00:23:10,640 --> 00:23:13,120
is simply to send a post request this is

675
00:23:13,120 --> 00:23:14,960
unbelievably simple i was quite

676
00:23:14,960 --> 00:23:17,200
surprised to find this worked but

677
00:23:17,200 --> 00:23:20,400
on this chinese mapping site i found

678
00:23:20,400 --> 00:23:23,280
reflected xss on every page if you use

679
00:23:23,280 --> 00:23:24,320
post

680
00:23:24,320 --> 00:23:26,240
you had to tweak the payload slightly to

681
00:23:26,240 --> 00:23:27,600
bypass their waffle that's why that

682
00:23:27,600 --> 00:23:28,880
looks weird

683
00:23:28,880 --> 00:23:30,480
and the cool thing was they weren't

684
00:23:30,480 --> 00:23:32,960
including the request method

685
00:23:32,960 --> 00:23:35,200
in the cache key so having sent that

686
00:23:35,200 --> 00:23:36,799
payload if someone sent a get

687
00:23:36,799 --> 00:23:39,760
to that site just browsing the site as

688
00:23:39,760 --> 00:23:41,039
they normally would be

689
00:23:41,039 --> 00:23:43,120
then they ended up being ex being

690
00:23:43,120 --> 00:23:46,000
exploited by the poison cache

691
00:23:46,000 --> 00:23:48,960
and just like the earlier xss issues we

692
00:23:48,960 --> 00:23:50,640
saw this one was present on every page

693
00:23:50,640 --> 00:23:51,679
of the site

694
00:23:51,679 --> 00:23:53,919
so i could take persistent control over

695
00:23:53,919 --> 00:23:55,840
the entire website

696
00:23:55,840 --> 00:23:59,120
i actually had a research collision with

697
00:23:59,120 --> 00:24:00,400
with someone else with that they were

698
00:24:00,400 --> 00:24:02,240
using the same technique around

699
00:24:02,240 --> 00:24:04,240
the same time so they've just published

700
00:24:04,240 --> 00:24:05,840
a blog post coming out today

701
00:24:05,840 --> 00:24:07,679
hopefully and if you check that out

702
00:24:07,679 --> 00:24:09,279
you'll find some more examples

703
00:24:09,279 --> 00:24:12,960
of this technique now

704
00:24:12,960 --> 00:24:14,559
that there was a collision there right

705
00:24:14,559 --> 00:24:16,320
but with a small tweak

706
00:24:16,320 --> 00:24:18,400
we can make that approach work on a lot

707
00:24:18,400 --> 00:24:20,000
more systems

708
00:24:20,000 --> 00:24:21,600
for inspiration let's look at the

709
00:24:21,600 --> 00:24:23,600
varnish documentation

710
00:24:23,600 --> 00:24:26,720
they say if a request has a body this

711
00:24:26,720 --> 00:24:28,480
will be sent to the back end

712
00:24:28,480 --> 00:24:30,880
the default varnish config removes the

713
00:24:30,880 --> 00:24:32,799
body forget requests

714
00:24:32,799 --> 00:24:35,600
because it is questionable if these

715
00:24:35,600 --> 00:24:36,799
requests are valid

716
00:24:36,799 --> 00:24:39,919
but some applications use them

717
00:24:39,919 --> 00:24:43,039
so what happens if you're using a

718
00:24:43,039 --> 00:24:44,720
varnish config file that doesn't have

719
00:24:44,720 --> 00:24:45,360
this

720
00:24:45,360 --> 00:24:47,840
snippet well unfortunately github didn't

721
00:24:47,840 --> 00:24:48,400
have

722
00:24:48,400 --> 00:24:50,559
this snippet and they were using ruby on

723
00:24:50,559 --> 00:24:51,679
rails which does

724
00:24:51,679 --> 00:24:53,600
accept parameters in the body of get

725
00:24:53,600 --> 00:24:55,520
requests

726
00:24:55,520 --> 00:24:58,559
that meant that on cash flow on cash

727
00:24:58,559 --> 00:25:00,400
ball pages i could make arbitrary

728
00:25:00,400 --> 00:25:01,840
changes to arbitrary

729
00:25:01,840 --> 00:25:04,640
parameters for example with this request

730
00:25:04,640 --> 00:25:06,080
here i've poisoned their

731
00:25:06,080 --> 00:25:08,799
report abuse page so if you try and

732
00:25:08,799 --> 00:25:10,799
report abuse on my profile

733
00:25:10,799 --> 00:25:14,240
it ends up reporting somebody else

734
00:25:14,240 --> 00:25:17,120
you you could also apply arbitrary

735
00:25:17,120 --> 00:25:18,799
filters to hide issues in people's

736
00:25:18,799 --> 00:25:20,640
projects and such like and also just

737
00:25:20,640 --> 00:25:22,720
block access to the majority of project

738
00:25:22,720 --> 00:25:24,720
content using this technique so i

739
00:25:24,720 --> 00:25:26,559
reported this to github and got a seven

740
00:25:26,559 --> 00:25:28,080
and a half cake bounty for that which

741
00:25:28,080 --> 00:25:28,400
was

742
00:25:28,400 --> 00:25:31,520
pretty cool in addition to working on

743
00:25:31,520 --> 00:25:33,600
some varnish systems

744
00:25:33,600 --> 00:25:35,919
this technique also works in exactly the

745
00:25:35,919 --> 00:25:37,679
same way on quite a few people

746
00:25:37,679 --> 00:25:40,400
using using cloud flare and on one of

747
00:25:40,400 --> 00:25:41,200
those

748
00:25:41,200 --> 00:25:44,159
i had a really hard time finding a

749
00:25:44,159 --> 00:25:46,960
gadget to combine this behavior with

750
00:25:46,960 --> 00:25:49,360
in the end i used a local redirect on

751
00:25:49,360 --> 00:25:50,799
their login page

752
00:25:50,799 --> 00:25:53,360
so that if you went to their login page

753
00:25:53,360 --> 00:25:55,279
entered your credits and logged in

754
00:25:55,279 --> 00:25:56,720
then you would get redirected to the

755
00:25:56,720 --> 00:25:58,320
logout page which would then redirect

756
00:25:58,320 --> 00:25:59,840
you to the login bouncer and log you

757
00:25:59,840 --> 00:26:00,480
back in

758
00:26:00,480 --> 00:26:02,559
to my account using my authentication

759
00:26:02,559 --> 00:26:04,400
token

760
00:26:04,400 --> 00:26:07,440
and then eventually put you on a page of

761
00:26:07,440 --> 00:26:08,320
my choice

762
00:26:08,320 --> 00:26:10,559
so from your point of view you enter

763
00:26:10,559 --> 00:26:12,640
your credits you press login and you end

764
00:26:12,640 --> 00:26:14,240
up logged in but you're actually in my

765
00:26:14,240 --> 00:26:15,840
account and

766
00:26:15,840 --> 00:26:17,360
unfortunately i can't describe the

767
00:26:17,360 --> 00:26:19,120
nature of the site but

768
00:26:19,120 --> 00:26:20,880
if you were to then proceed to do

769
00:26:20,880 --> 00:26:23,200
something on the site i would

770
00:26:23,200 --> 00:26:24,960
have full knowledge of what you've done

771
00:26:24,960 --> 00:26:26,320
there which could be

772
00:26:26,320 --> 00:26:30,400
quite interesting uh i reported this

773
00:26:30,400 --> 00:26:31,679
sorry that makes it sound like it's a

774
00:26:31,679 --> 00:26:33,440
certain kind of science not that kind of

775
00:26:33,440 --> 00:26:34,960
site you know what i mean

776
00:26:34,960 --> 00:26:37,679
i reported this to cloudflare and they

777
00:26:37,679 --> 00:26:39,120
said that they're not going to change

778
00:26:39,120 --> 00:26:41,918
this behavior

779
00:26:42,240 --> 00:26:46,720
but i've completely lost my thread now

780
00:26:46,720 --> 00:26:48,559
but they did update their documentation

781
00:26:48,559 --> 00:26:50,159
to say don't trust

782
00:26:50,159 --> 00:26:53,600
get request bodies which basically means

783
00:26:53,600 --> 00:26:56,640
don't use rails there's an interesting

784
00:26:56,640 --> 00:26:57,120
kind of

785
00:26:57,120 --> 00:27:00,000
side point here which is that both is

786
00:27:00,000 --> 00:27:01,440
that this gadget that we've seen that

787
00:27:01,440 --> 00:27:03,440
we've used on this site and on github is

788
00:27:03,440 --> 00:27:05,120
an incredibly powerful gadget we can

789
00:27:05,120 --> 00:27:06,880
make arbitrary changes to arbitrary

790
00:27:06,880 --> 00:27:08,080
parameters

791
00:27:08,080 --> 00:27:10,400
but neither of the exploits were that

792
00:27:10,400 --> 00:27:12,799
harmful

793
00:27:12,799 --> 00:27:15,679
and that's because neither of those

794
00:27:15,679 --> 00:27:16,320
sites

795
00:27:16,320 --> 00:27:18,640
had the right kind of gadget that you

796
00:27:18,640 --> 00:27:21,919
could use to make a high impact

797
00:27:21,919 --> 00:27:25,360
exploit so how hard these cash poisoning

798
00:27:25,360 --> 00:27:27,520
issues hit you is massively dependent

799
00:27:27,520 --> 00:27:29,360
on whether you've got these kind of

800
00:27:29,360 --> 00:27:31,600
almost exploitable vulnerabilities

801
00:27:31,600 --> 00:27:35,200
present on your site

802
00:27:35,200 --> 00:27:38,960
so i use firefox for most of my testing

803
00:27:38,960 --> 00:27:39,840
and

804
00:27:39,840 --> 00:27:41,760
every year i'm doing my research and i

805
00:27:41,760 --> 00:27:43,440
accidentally find a vulnerability in

806
00:27:43,440 --> 00:27:44,559
firefox's

807
00:27:44,559 --> 00:27:47,120
update infrastructure and this is no

808
00:27:47,120 --> 00:27:48,240
different

809
00:27:48,240 --> 00:27:49,840
this one is going to show us how

810
00:27:49,840 --> 00:27:52,080
something even as simple and common as

811
00:27:52,080 --> 00:27:54,880
no as normalization can be really quite

812
00:27:54,880 --> 00:27:56,159
harmful

813
00:27:56,159 --> 00:27:58,120
if you look at the nginx config on

814
00:27:58,120 --> 00:28:00,399
download.mozilla.org it looks fine

815
00:28:00,399 --> 00:28:02,080
if you look at the proxy cache key

816
00:28:02,080 --> 00:28:04,399
documentation you'll see their key is

817
00:28:04,399 --> 00:28:07,760
very similar to the default nginx one

818
00:28:07,760 --> 00:28:09,279
but if you look at the proxy pass

819
00:28:09,279 --> 00:28:10,960
documentation there's a kind of a clue

820
00:28:10,960 --> 00:28:11,600
that

821
00:28:11,600 --> 00:28:14,320
something might be wrong here it says if

822
00:28:14,320 --> 00:28:16,000
you use proxy pass without

823
00:28:16,000 --> 00:28:19,200
a uri like mozilla have done then

824
00:28:19,200 --> 00:28:21,919
the request gry is passed to the server

825
00:28:21,919 --> 00:28:22,720
in the same

826
00:28:22,720 --> 00:28:25,120
form as sent by a client when the

827
00:28:25,120 --> 00:28:26,480
original request

828
00:28:26,480 --> 00:28:29,440
is processed what that's hinting at is

829
00:28:29,440 --> 00:28:30,080
the fact that

830
00:28:30,080 --> 00:28:32,480
this proxy cache key value is being

831
00:28:32,480 --> 00:28:33,679
normalized

832
00:28:33,679 --> 00:28:35,200
but the value that gets passed to the

833
00:28:35,200 --> 00:28:38,480
upstream system is not being normalized

834
00:28:38,480 --> 00:28:41,200
what does that mean well whenever you

835
00:28:41,200 --> 00:28:42,399
open a firefox

836
00:28:42,399 --> 00:28:44,320
and periodically thereafter it checks

837
00:28:44,320 --> 00:28:46,960
for important security updates that

838
00:28:46,960 --> 00:28:50,559
need to be installed to keep you safe

839
00:28:50,559 --> 00:28:52,880
but and it does that with a url like

840
00:28:52,880 --> 00:28:53,679
this

841
00:28:53,679 --> 00:28:55,360
and if there's a security update present

842
00:28:55,360 --> 00:28:56,960
it'll give you a redirect to the

843
00:28:56,960 --> 00:28:59,840
installer

844
00:28:59,919 --> 00:29:01,840
but what happens if i send a request

845
00:29:01,840 --> 00:29:03,840
that looks like this it's buy it for by

846
00:29:03,840 --> 00:29:04,559
the same

847
00:29:04,559 --> 00:29:07,840
but i've url encoded the question mark

848
00:29:07,840 --> 00:29:10,240
well enginex is going to url decode that

849
00:29:10,240 --> 00:29:12,000
question mark when it saves its cash

850
00:29:12,000 --> 00:29:14,159
key so from any next point of view this

851
00:29:14,159 --> 00:29:15,840
is a completely valid

852
00:29:15,840 --> 00:29:18,640
check for updates but when the backend

853
00:29:18,640 --> 00:29:21,440
server sees the unnormalized version

854
00:29:21,440 --> 00:29:24,159
of this request they interpret the whole

855
00:29:24,159 --> 00:29:25,760
thing as being the path so there's no

856
00:29:25,760 --> 00:29:26,480
parameters

857
00:29:26,480 --> 00:29:28,399
and it breaks the redirect and in

858
00:29:28,399 --> 00:29:29,760
practice

859
00:29:29,760 --> 00:29:32,880
the update fails so if i send that

860
00:29:32,880 --> 00:29:33,679
request

861
00:29:33,679 --> 00:29:35,919
and time it right then whenever anyone

862
00:29:35,919 --> 00:29:36,720
else

863
00:29:36,720 --> 00:29:39,520
checks for updates for firefox they get

864
00:29:39,520 --> 00:29:40,720
this broken redirect

865
00:29:40,720 --> 00:29:43,279
and i've just disabled firefox security

866
00:29:43,279 --> 00:29:44,399
updates

867
00:29:44,399 --> 00:29:47,120
globally i think this is my favorite

868
00:29:47,120 --> 00:29:48,799
denial of service issue

869
00:29:48,799 --> 00:29:51,679
that i've ever found

870
00:29:53,039 --> 00:29:54,960
what else can you do with normalization

871
00:29:54,960 --> 00:29:57,039
well there's a classic issue that

872
00:29:57,039 --> 00:29:58,640
i'm sure many of you have run into where

873
00:29:58,640 --> 00:30:00,399
you find some excess maybe it's in the

874
00:30:00,399 --> 00:30:02,399
path or more recently maybe even in the

875
00:30:02,399 --> 00:30:03,919
query string

876
00:30:03,919 --> 00:30:06,720
and it looks great in burp but when you

877
00:30:06,720 --> 00:30:07,200
try and

878
00:30:07,200 --> 00:30:08,960
exploit a browser with it it doesn't

879
00:30:08,960 --> 00:30:11,120
work because the browser is encoding

880
00:30:11,120 --> 00:30:13,039
your payload and the server is not

881
00:30:13,039 --> 00:30:17,120
decoding it but with normalization this

882
00:30:17,120 --> 00:30:19,120
issue once again becomes

883
00:30:19,120 --> 00:30:21,039
exploitable because you can send your

884
00:30:21,039 --> 00:30:23,279
request shortly before the victim loads

885
00:30:23,279 --> 00:30:24,799
the url you give them

886
00:30:24,799 --> 00:30:26,640
and they'll just get a cash hit from

887
00:30:26,640 --> 00:30:28,320
your request

888
00:30:28,320 --> 00:30:30,399
they'll get your poisoned response and

889
00:30:30,399 --> 00:30:33,039
they'll get exploited

890
00:30:33,039 --> 00:30:34,840
on the topic of issues that are normally

891
00:30:34,840 --> 00:30:37,120
unexploitable what do you do if you get

892
00:30:37,120 --> 00:30:38,480
cross-site scripting

893
00:30:38,480 --> 00:30:41,760
in a http header that's in the cache key

894
00:30:41,760 --> 00:30:45,200
normally that's useless

895
00:30:45,200 --> 00:30:48,320
but on akamai they stick both query

896
00:30:48,320 --> 00:30:50,399
parameters and headers into the same

897
00:30:50,399 --> 00:30:52,880
chunk of the cache key they separate

898
00:30:52,880 --> 00:30:54,320
them using underscores

899
00:30:54,320 --> 00:30:56,320
and underscores aren't escaped so that

900
00:30:56,320 --> 00:30:57,919
means these two requests

901
00:30:57,919 --> 00:31:01,360
have exactly the same cache key so as an

902
00:31:01,360 --> 00:31:03,760
attacker i i can send the first one with

903
00:31:03,760 --> 00:31:05,440
the poisoned origin which is something

904
00:31:05,440 --> 00:31:06,880
no browser would ever

905
00:31:06,880 --> 00:31:09,840
agree to send and then i can hand the

906
00:31:09,840 --> 00:31:12,240
url of the second request to my victim

907
00:31:12,240 --> 00:31:13,840
they'll hit that they'll get my poisoned

908
00:31:13,840 --> 00:31:17,279
response and get exploited

909
00:31:17,279 --> 00:31:19,519
after seeing how easy that was in akamai

910
00:31:19,519 --> 00:31:20,559
i thought i'd try it

911
00:31:20,559 --> 00:31:22,960
on cloudflare according to their

912
00:31:22,960 --> 00:31:24,720
documentation the cache key looks like

913
00:31:24,720 --> 00:31:25,519
this

914
00:31:25,519 --> 00:31:27,840
so these two requests should have the

915
00:31:27,840 --> 00:31:29,440
same key

916
00:31:29,440 --> 00:31:31,360
however in practice it doesn't work and

917
00:31:31,360 --> 00:31:32,960
i tried a few things

918
00:31:32,960 --> 00:31:35,200
ran low on options and eventually sent

919
00:31:35,200 --> 00:31:36,640
an email to cloudflare

920
00:31:36,640 --> 00:31:38,399
to complain that their documentation is

921
00:31:38,399 --> 00:31:40,000
incorrect and say could they fix it

922
00:31:40,000 --> 00:31:41,440
please

923
00:31:41,440 --> 00:31:43,600
unfortunately one thing led to another

924
00:31:43,600 --> 00:31:46,000
and i had to explain the attack

925
00:31:46,000 --> 00:31:47,360
and then i got a response from their

926
00:31:47,360 --> 00:31:49,840
security team saying well

927
00:31:49,840 --> 00:31:52,720
the documentation is wrong the attack

928
00:31:52,720 --> 00:31:53,840
you're describing

929
00:31:53,840 --> 00:31:56,080
is possible but you're doing it wrong

930
00:31:56,080 --> 00:31:58,720
and we're not going to tell you how

931
00:31:58,720 --> 00:32:00,720
and then they have now patched it uh but

932
00:32:00,720 --> 00:32:02,640
they did send me a t-shirt so it was

933
00:32:02,640 --> 00:32:04,640
possible to use some variation of this

934
00:32:04,640 --> 00:32:05,679
on cloudflare

935
00:32:05,679 --> 00:32:07,760
but unfortunately i can't tell you how

936
00:32:07,760 --> 00:32:09,600
to do it

937
00:32:09,600 --> 00:32:12,240
on the opposite end of the spectrum some

938
00:32:12,240 --> 00:32:13,039
attacks are

939
00:32:13,039 --> 00:32:15,120
so practical that it's not possible to

940
00:32:15,120 --> 00:32:17,440
do them safely

941
00:32:17,440 --> 00:32:20,080
on adobe i was testing for a classic

942
00:32:20,080 --> 00:32:22,080
cache poisoning issue

943
00:32:22,080 --> 00:32:24,799
on a particular blog page on their blog

944
00:32:24,799 --> 00:32:26,960
and i suddenly got a flood of loads and

945
00:32:26,960 --> 00:32:28,960
loads and loads of traffic

946
00:32:28,960 --> 00:32:32,559
to my server and it turns out

947
00:32:32,559 --> 00:32:35,679
unfortunately for well me and adobe they

948
00:32:35,679 --> 00:32:36,399
were using

949
00:32:36,399 --> 00:32:38,880
an internal and application based cache

950
00:32:38,880 --> 00:32:40,399
that was integrated into their

951
00:32:40,399 --> 00:32:41,120
application

952
00:32:41,120 --> 00:32:44,159
and had no concept of a cache key

953
00:32:44,159 --> 00:32:46,080
so i poisoned the header of my page and

954
00:32:46,080 --> 00:32:47,519
that header was then being used

955
00:32:47,519 --> 00:32:50,320
on every page on the entire website

956
00:32:50,320 --> 00:32:52,000
including their home page

957
00:32:52,000 --> 00:32:55,279
all the resource loads went to my site

958
00:32:55,279 --> 00:32:57,679
and all the links on their homepage also

959
00:32:57,679 --> 00:33:01,039
sent people to my website this was not a

960
00:33:01,039 --> 00:33:02,240
great experience

961
00:33:02,240 --> 00:33:04,320
for either of us i reported it very

962
00:33:04,320 --> 00:33:06,080
quickly they fixed it very quickly

963
00:33:06,080 --> 00:33:08,320
luckily they were quite understanding

964
00:33:08,320 --> 00:33:11,120
but you can see this kind of issue makes

965
00:33:11,120 --> 00:33:12,320
the distinction between

966
00:33:12,320 --> 00:33:14,720
a legitimate-ish researcher and an

967
00:33:14,720 --> 00:33:15,360
attacker

968
00:33:15,360 --> 00:33:18,399
really quite blurry

969
00:33:18,399 --> 00:33:20,720
and not only is internal cash poisoning

970
00:33:20,720 --> 00:33:23,600
uncontrollable it can also be invisible

971
00:33:23,600 --> 00:33:26,000
on a a different time i had an idea for

972
00:33:26,000 --> 00:33:27,200
denial of service

973
00:33:27,200 --> 00:33:29,360
detection technique sent it to a bunch

974
00:33:29,360 --> 00:33:30,240
of sites

975
00:33:30,240 --> 00:33:31,679
and got loads of traffic from the

976
00:33:31,679 --> 00:33:34,320
department of defense intranet

977
00:33:34,320 --> 00:33:36,080
eventually i think i figured out what

978
00:33:36,080 --> 00:33:38,080
happened which is there's this site it's

979
00:33:38,080 --> 00:33:41,039
meant to be internal to the dod

980
00:33:41,039 --> 00:33:43,679
any attempt to access it from external

981
00:33:43,679 --> 00:33:45,760
redirects to their internet which

982
00:33:45,760 --> 00:33:49,120
i can't access the denial of service

983
00:33:49,120 --> 00:33:49,760
technique

984
00:33:49,760 --> 00:33:51,840
breaks the redirect it only lets you

985
00:33:51,840 --> 00:33:53,679
access the error page though

986
00:33:53,679 --> 00:33:55,440
but hitting the error page with a

987
00:33:55,440 --> 00:33:56,960
certain payload

988
00:33:56,960 --> 00:33:58,960
poisons their internal cache and thereby

989
00:33:58,960 --> 00:34:00,960
poisons all the resource loads

990
00:34:00,960 --> 00:34:02,559
in their internet administration

991
00:34:02,559 --> 00:34:04,640
interface

992
00:34:04,640 --> 00:34:07,440
so i can't tell you how to find internal

993
00:34:07,440 --> 00:34:09,599
cash poisoning issues safely

994
00:34:09,599 --> 00:34:11,359
but i can't tell you how to recognize it

995
00:34:11,359 --> 00:34:13,520
to avoid wasting your time

996
00:34:13,520 --> 00:34:16,079
if you see both old and val old and new

997
00:34:16,079 --> 00:34:17,199
values coming back

998
00:34:17,199 --> 00:34:20,000
in that one response that's a good clue

999
00:34:20,000 --> 00:34:21,679
or reflection of your input on different

1000
00:34:21,679 --> 00:34:22,800
pages or

1001
00:34:22,800 --> 00:34:26,399
things just don't make sense and

1002
00:34:26,399 --> 00:34:27,839
haven't yet figured out how to do it

1003
00:34:27,839 --> 00:34:29,839
completely safely but if you're doing

1004
00:34:29,839 --> 00:34:32,079
any technique of any type

1005
00:34:32,079 --> 00:34:33,839
then this might happen by accident and

1006
00:34:33,839 --> 00:34:36,000
what that means is whenever you use

1007
00:34:36,000 --> 00:34:37,679
a domain whenever you give a domain to

1008
00:34:37,679 --> 00:34:39,599
the target that's not

1009
00:34:39,599 --> 00:34:42,079
the real target domain please use a

1010
00:34:42,079 --> 00:34:44,079
domain you control you do not want to be

1011
00:34:44,079 --> 00:34:44,879
sending

1012
00:34:44,879 --> 00:34:46,800
all of your target websites traffic to

1013
00:34:46,800 --> 00:34:48,000
evil.com unless

1014
00:34:48,000 --> 00:34:52,639
you are the lucky owner of evil.com

1015
00:34:52,719 --> 00:34:54,719
so i was going to release a standalone

1016
00:34:54,719 --> 00:34:56,719
tool for this research but instead i've

1017
00:34:56,719 --> 00:34:57,040
done

1018
00:34:57,040 --> 00:34:58,960
an update to param weiner which is the

1019
00:34:58,960 --> 00:35:01,119
open source burp suite extension that i

1020
00:35:01,119 --> 00:35:02,960
originally wrote for my prior cash

1021
00:35:02,960 --> 00:35:04,560
poisoning

1022
00:35:04,560 --> 00:35:06,480
research it can find almost all the

1023
00:35:06,480 --> 00:35:07,839
techniques mentioned in this

1024
00:35:07,839 --> 00:35:08,800
presentation

1025
00:35:08,800 --> 00:35:10,800
and there's a demo of me using it to

1026
00:35:10,800 --> 00:35:12,880
exploit a fat get vulnerability

1027
00:35:12,880 --> 00:35:16,240
in rack cache on the github page

1028
00:35:16,240 --> 00:35:19,839
please check it out as far as defense

1029
00:35:19,839 --> 00:35:22,480
goes the key thing is if you want to

1030
00:35:22,480 --> 00:35:24,160
make these optimizations

1031
00:35:24,160 --> 00:35:26,400
just rewrite the request not the cash

1032
00:35:26,400 --> 00:35:27,200
key

1033
00:35:27,200 --> 00:35:30,560
this is vastly safer also

1034
00:35:30,560 --> 00:35:33,280
don't accept fat get requests don't use

1035
00:35:33,280 --> 00:35:34,800
rails i guess or

1036
00:35:34,800 --> 00:35:37,839
see if you can patch it and

1037
00:35:37,839 --> 00:35:39,599
if you're using caching it's really

1038
00:35:39,599 --> 00:35:42,839
important to patch unexploitable

1039
00:35:42,839 --> 00:35:44,079
vulnerabilities

1040
00:35:44,079 --> 00:35:46,640
now there's a whole bunch of more

1041
00:35:46,640 --> 00:35:47,440
information

1042
00:35:47,440 --> 00:35:49,280
on this uh check out the white paper

1043
00:35:49,280 --> 00:35:50,880
which i've just published which has some

1044
00:35:50,880 --> 00:35:52,720
a couple of extra techniques

1045
00:35:52,720 --> 00:35:54,480
also the prior research is well worth

1046
00:35:54,480 --> 00:35:56,560
reading if you haven't already seen it

1047
00:35:56,560 --> 00:35:58,320
and if you're watching this at black app

1048
00:35:58,320 --> 00:36:00,480
check out emma client's presentation

1049
00:36:00,480 --> 00:36:03,839
on http uh request muggling because he

1050
00:36:03,839 --> 00:36:05,280
invented it back in the day so i'm sure

1051
00:36:05,280 --> 00:36:07,599
that's a good talk

1052
00:36:07,599 --> 00:36:10,000
this is not the end of novel cash

1053
00:36:10,000 --> 00:36:10,880
poisoning issues

1054
00:36:10,880 --> 00:36:13,280
coming out i've got loads of leads i'm

1055
00:36:13,280 --> 00:36:15,359
sure other people do too

1056
00:36:15,359 --> 00:36:16,880
so please don't think this is a

1057
00:36:16,880 --> 00:36:20,240
comprehensive presentation

1058
00:36:20,320 --> 00:36:22,000
and that basically means the most

1059
00:36:22,000 --> 00:36:23,680
important thing to take away

1060
00:36:23,680 --> 00:36:25,839
is that caching introduces unique

1061
00:36:25,839 --> 00:36:26,880
hazards

1062
00:36:26,880 --> 00:36:28,480
and these may be well hidden and not

1063
00:36:28,480 --> 00:36:31,040
documented by anyone anywhere ever

1064
00:36:31,040 --> 00:36:33,440
and as such if you're using caching

1065
00:36:33,440 --> 00:36:35,200
unexploitable vulnerabilities

1066
00:36:35,200 --> 00:36:38,560
are really worth patching

1067
00:36:38,560 --> 00:36:40,160
i'm going to take five minutes of

1068
00:36:40,160 --> 00:36:42,240
questions now uh if you have any more

1069
00:36:42,240 --> 00:36:44,160
for that feel free to chat me an email

1070
00:36:44,160 --> 00:36:46,320
don't forget to follow me on twitter and

1071
00:36:46,320 --> 00:36:49,200
thank you for listening

1072
00:36:51,280 --> 00:36:53,839
cool thank you for listening i hope you

1073
00:36:53,839 --> 00:36:55,359
enjoyed that

1074
00:36:55,359 --> 00:36:58,560
does anyone have any questions uh if if

1075
00:36:58,560 --> 00:37:00,160
you do if you post in the chat box then

1076
00:37:00,160 --> 00:37:02,079
i'll be able to see

1077
00:37:02,079 --> 00:37:05,839
and answer them the one thing that i

1078
00:37:05,839 --> 00:37:07,760
need to add is that uh akamai would like

1079
00:37:07,760 --> 00:37:09,520
me to tell you that they're working on

1080
00:37:09,520 --> 00:37:12,240
a fix for the akamai issues mentioned in

1081
00:37:12,240 --> 00:37:23,280
this presentation

1082
00:37:23,280 --> 00:37:26,880
cool uh doesn't look like you've got any

1083
00:37:26,880 --> 00:37:28,160
questions

1084
00:37:28,160 --> 00:37:29,920
great thank you for listening uh don't

1085
00:37:29,920 --> 00:37:31,680
forget to check out the

1086
00:37:31,680 --> 00:37:33,760
the academy labs and the white paper

1087
00:37:33,760 --> 00:37:35,359
which has some extra

1088
00:37:35,359 --> 00:37:38,800
techniques uh stuck in there ah we've

1089
00:37:38,800 --> 00:37:41,599
got one question

1090
00:37:42,400 --> 00:37:45,280
when i'm testing

1091
00:37:45,599 --> 00:37:49,440
cool so the uh the question is when i'm

1092
00:37:49,440 --> 00:37:50,960
testing

1093
00:37:50,960 --> 00:37:54,079
on live sites and i accidentally get

1094
00:37:54,079 --> 00:37:56,160
persistent xss

1095
00:37:56,160 --> 00:37:59,440
uh how much do i disrupt the

1096
00:37:59,440 --> 00:38:03,599
the business well uh

1097
00:38:03,599 --> 00:38:05,599
when you're testing for most of these

1098
00:38:05,599 --> 00:38:08,079
issues you can just use a cash

1099
00:38:08,079 --> 00:38:11,119
buster and what that means is that no

1100
00:38:11,119 --> 00:38:14,079
you'll cause no disruption for anyone

1101
00:38:14,079 --> 00:38:14,560
because

1102
00:38:14,560 --> 00:38:18,320
you're only poisoning a specific url

1103
00:38:18,320 --> 00:38:20,079
that other people

1104
00:38:20,079 --> 00:38:22,480
aren't visiting the only exception to

1105
00:38:22,480 --> 00:38:23,280
that

1106
00:38:23,280 --> 00:38:26,160
is the internal cash poisoning uh

1107
00:38:26,160 --> 00:38:28,480
internal cash poisoning as i mentioned

1108
00:38:28,480 --> 00:38:32,000
is really dangerous and you can't do

1109
00:38:32,000 --> 00:38:32,880
much

1110
00:38:32,880 --> 00:38:34,640
about it really so it's only happened to

1111
00:38:34,640 --> 00:38:36,400
me twice

1112
00:38:36,400 --> 00:38:40,000
and the site was basically defaced

1113
00:38:40,000 --> 00:38:42,800
until their team manually fixed it i

1114
00:38:42,800 --> 00:38:43,920
think

1115
00:38:43,920 --> 00:38:45,599
which is one of the reasons that i

1116
00:38:45,599 --> 00:38:47,359
didn't talk very much about internal

1117
00:38:47,359 --> 00:38:48,960
cache poisoning because i can't properly

1118
00:38:48,960 --> 00:38:51,119
research it until i figured out

1119
00:38:51,119 --> 00:38:53,680
how to do it without causing business

1120
00:38:53,680 --> 00:38:54,560
disruption

1121
00:38:54,560 --> 00:38:56,320
uh but most of the techniques in this

1122
00:38:56,320 --> 00:38:58,079
presentation are completely safe

1123
00:38:58,079 --> 00:39:01,440
as long as you use a cache

1124
00:39:02,000 --> 00:39:04,800
uh the other question is do i have

1125
00:39:04,800 --> 00:39:05,359
linkedin

1126
00:39:05,359 --> 00:39:08,560
no i don't have linkedin but i am on

1127
00:39:08,560 --> 00:39:13,119
twitter uh that's my version of negative

1128
00:39:13,200 --> 00:39:17,119
and i think i think that's everything

1129
00:39:17,119 --> 00:39:18,400
cool quick

1130
00:39:18,400 --> 00:39:22,160
thanks for listening

