1
00:00:04,350 --> 00:00:14,149
[Music]

2
00:00:15,200 --> 00:00:16,960
hi my name is paul grubs

3
00:00:16,960 --> 00:00:18,480
and today i'll be presenting my talk

4
00:00:18,480 --> 00:00:20,080
hunting invisible salamanders

5
00:00:20,080 --> 00:00:21,520
cryptographic insecurity with

6
00:00:21,520 --> 00:00:24,640
attacker-controlled keys

7
00:00:24,640 --> 00:00:26,400
before i start let me tell you a little

8
00:00:26,400 --> 00:00:28,800
bit about myself for another month or so

9
00:00:28,800 --> 00:00:30,000
i'll be a phd student

10
00:00:30,000 --> 00:00:31,599
in computer science at cornell's new

11
00:00:31,599 --> 00:00:33,040
york city campus

12
00:00:33,040 --> 00:00:34,800
after that i'll be joining nyu for a

13
00:00:34,800 --> 00:00:36,239
year-long postdoc and

14
00:00:36,239 --> 00:00:38,079
next fall i'll be joining the university

15
00:00:38,079 --> 00:00:40,000
of michigan as an assistant professor

16
00:00:40,000 --> 00:00:43,920
of computer science my research is an

17
00:00:43,920 --> 00:00:45,280
applied cryptography

18
00:00:45,280 --> 00:00:47,039
i do some work on the security of

19
00:00:47,039 --> 00:00:48,640
outsourced encrypted databases in

20
00:00:48,640 --> 00:00:49,280
storage

21
00:00:49,280 --> 00:00:51,039
but the work i'll be talking about today

22
00:00:51,039 --> 00:00:52,559
is all about the security of a core

23
00:00:52,559 --> 00:00:53,920
cryptographic primitive called

24
00:00:53,920 --> 00:00:56,000
authenticated encryption

25
00:00:56,000 --> 00:00:57,520
specifically i'll be talking about the

26
00:00:57,520 --> 00:00:59,039
ways in which the security of

27
00:00:59,039 --> 00:01:00,960
authenticated encryption can fail when

28
00:01:00,960 --> 00:01:01,600
it's used

29
00:01:01,600 --> 00:01:04,080
in new settings this talk will probably

30
00:01:04,080 --> 00:01:05,519
be most interesting to people whose

31
00:01:05,519 --> 00:01:07,439
day-to-day work involves designing

32
00:01:07,439 --> 00:01:09,840
implementing and applying cryptography

33
00:01:09,840 --> 00:01:11,520
but all security practitioners will be

34
00:01:11,520 --> 00:01:13,600
able to follow along and take away some

35
00:01:13,600 --> 00:01:14,799
interesting new knowledge about

36
00:01:14,799 --> 00:01:16,479
cryptography

37
00:01:16,479 --> 00:01:18,000
i'll also be delving into a few

38
00:01:18,000 --> 00:01:20,159
mathematical details during my talk

39
00:01:20,159 --> 00:01:21,439
but i'll mark these slides with the

40
00:01:21,439 --> 00:01:22,960
symbol to let you know that it's okay if

41
00:01:22,960 --> 00:01:24,400
you don't understand everything and at

42
00:01:24,400 --> 00:01:26,240
the end i'll give a high level summary

43
00:01:26,240 --> 00:01:29,280
of the takeaways of those slides

44
00:01:29,280 --> 00:01:31,280
so as i said before my talk is all about

45
00:01:31,280 --> 00:01:34,079
authenticated encryption or ae for short

46
00:01:34,079 --> 00:01:36,159
a is probably along with key exchange

47
00:01:36,159 --> 00:01:37,840
and signatures one of the most widely

48
00:01:37,840 --> 00:01:39,360
used cryptographic primitives on the

49
00:01:39,360 --> 00:01:40,320
internet

50
00:01:40,320 --> 00:01:42,240
the way ae is often used is for two

51
00:01:42,240 --> 00:01:44,079
parties who want to communicate securely

52
00:01:44,079 --> 00:01:46,479
to first agree on a random symmetric key

53
00:01:46,479 --> 00:01:47,920
perhaps pre-distributing it or

54
00:01:47,920 --> 00:01:50,159
establishing it via key exchange

55
00:01:50,159 --> 00:01:52,799
and then encrypting all their traffic uh

56
00:01:52,799 --> 00:01:54,640
for example their cat pictures with an

57
00:01:54,640 --> 00:01:56,640
ae scheme like galwa counter mode or

58
00:01:56,640 --> 00:01:59,600
cha-cha 20 poly 1305

59
00:01:59,600 --> 00:02:02,159
this basic blueprint is the core of a

60
00:02:02,159 --> 00:02:03,439
huge number of

61
00:02:03,439 --> 00:02:05,280
security protocols on the internet like

62
00:02:05,280 --> 00:02:06,640
tls ipsec

63
00:02:06,640 --> 00:02:09,119
ssh and others that protect end users

64
00:02:09,119 --> 00:02:10,800
sensitive business data and financial

65
00:02:10,800 --> 00:02:12,640
transactions every day

66
00:02:12,640 --> 00:02:14,800
decades of research in cryptography has

67
00:02:14,800 --> 00:02:16,959
given us ways to prove formally that as

68
00:02:16,959 --> 00:02:18,080
long as this key

69
00:02:18,080 --> 00:02:20,080
that the two parties share is random

70
00:02:20,080 --> 00:02:22,400
enough and hidden from the attacker

71
00:02:22,400 --> 00:02:24,400
using authenticated encryption hides the

72
00:02:24,400 --> 00:02:26,000
contents of the traffic and prevents an

73
00:02:26,000 --> 00:02:27,680
adversary from modifying

74
00:02:27,680 --> 00:02:31,040
the contents ae

75
00:02:31,040 --> 00:02:32,879
though is increasingly used in settings

76
00:02:32,879 --> 00:02:34,319
that don't look like this one i just

77
00:02:34,319 --> 00:02:35,120
described

78
00:02:35,120 --> 00:02:36,720
for example in some threat models it

79
00:02:36,720 --> 00:02:38,400
makes sense for the attacker to be able

80
00:02:38,400 --> 00:02:40,480
to choose the key used for authenticated

81
00:02:40,480 --> 00:02:41,519
encryption

82
00:02:41,519 --> 00:02:43,920
examples of this include password

83
00:02:43,920 --> 00:02:45,360
authenticated key exchange

84
00:02:45,360 --> 00:02:46,560
password-based encryption

85
00:02:46,560 --> 00:02:48,160
encrypted messaging for groups and

86
00:02:48,160 --> 00:02:50,000
content moderation or abuse reporting

87
00:02:50,000 --> 00:02:52,319
for encrypted messaging and these

88
00:02:52,319 --> 00:02:53,440
attacker-controlled

89
00:02:53,440 --> 00:02:55,840
key settings we can't argue any security

90
00:02:55,840 --> 00:02:57,599
based on the fact that the key is random

91
00:02:57,599 --> 00:02:58,400
and hidden

92
00:02:58,400 --> 00:03:00,239
from the adversary after all the

93
00:03:00,239 --> 00:03:02,080
adversary chose it

94
00:03:02,080 --> 00:03:04,400
so we're left with a bunch of important

95
00:03:04,400 --> 00:03:05,440
questions like

96
00:03:05,440 --> 00:03:07,440
what security properties does ae need to

97
00:03:07,440 --> 00:03:10,480
have in the face of such an attack

98
00:03:10,480 --> 00:03:12,080
what properties might we expect it to

99
00:03:12,080 --> 00:03:14,080
have and do modern widely used

100
00:03:14,080 --> 00:03:15,680
authenticated encryption schemes have

101
00:03:15,680 --> 00:03:18,640
the properties we expect

102
00:03:18,640 --> 00:03:20,560
my talk based on these research papers

103
00:03:20,560 --> 00:03:22,080
here at the bottom will seek to answer

104
00:03:22,080 --> 00:03:23,200
these questions

105
00:03:23,200 --> 00:03:24,640
first i'll describe our attack

106
00:03:24,640 --> 00:03:26,879
controlled key setting in more detail

107
00:03:26,879 --> 00:03:28,239
convince you it's not just something i

108
00:03:28,239 --> 00:03:30,239
made up by giving a few examples explain

109
00:03:30,239 --> 00:03:32,159
the committing security property ae

110
00:03:32,159 --> 00:03:33,440
should have here

111
00:03:33,440 --> 00:03:34,959
next i'll show that most modern

112
00:03:34,959 --> 00:03:36,560
authenticated encryption schemes are not

113
00:03:36,560 --> 00:03:37,440
committing

114
00:03:37,440 --> 00:03:39,519
i'll explain the gcm algorithm briefly

115
00:03:39,519 --> 00:03:40,959
walk through the process of creating a

116
00:03:40,959 --> 00:03:42,400
gcm ciphertext

117
00:03:42,400 --> 00:03:43,760
that decrypts under two different

118
00:03:43,760 --> 00:03:45,440
attacker controlled keys

119
00:03:45,440 --> 00:03:46,959
and finally i'll show how to use

120
00:03:46,959 --> 00:03:48,879
polynomial interpolation to go from two

121
00:03:48,879 --> 00:03:50,239
to hundreds of thousands of keys with

122
00:03:50,239 --> 00:03:51,519
gcm

123
00:03:51,519 --> 00:03:53,120
and then after that i'll give some

124
00:03:53,120 --> 00:03:54,720
attacks resulting from non-committing

125
00:03:54,720 --> 00:03:56,239
authenticated encryption

126
00:03:56,239 --> 00:03:58,000
i'll describe how in multi-receiver

127
00:03:58,000 --> 00:03:59,280
encryption you can send different

128
00:03:59,280 --> 00:04:00,640
messages to different people when

129
00:04:00,640 --> 00:04:01,920
encryption is not committing

130
00:04:01,920 --> 00:04:03,519
and then we'll meet the original

131
00:04:03,519 --> 00:04:05,519
invisible salamander in an attack on

132
00:04:05,519 --> 00:04:07,680
facebook's message ranking protocol

133
00:04:07,680 --> 00:04:09,439
and finally i'll describe partitioning

134
00:04:09,439 --> 00:04:11,519
oracles which recover low or medium

135
00:04:11,519 --> 00:04:13,120
entropy cryptographic keys

136
00:04:13,120 --> 00:04:15,599
via adaptive uh chosen cyber text

137
00:04:15,599 --> 00:04:17,759
attacks

138
00:04:17,759 --> 00:04:19,440
but we'll start with explaining the

139
00:04:19,440 --> 00:04:20,959
setting in a little bit more detail and

140
00:04:20,959 --> 00:04:23,919
explaining committing security

141
00:04:23,919 --> 00:04:25,520
so first i'll say a little bit more

142
00:04:25,520 --> 00:04:27,360
about the setting that we started to

143
00:04:27,360 --> 00:04:28,240
talk with and then

144
00:04:28,240 --> 00:04:30,240
contrast it to the attacker control keys

145
00:04:30,240 --> 00:04:31,520
setting

146
00:04:31,520 --> 00:04:32,880
in secure transport settings the

147
00:04:32,880 --> 00:04:34,720
encryption key here is unknown to the

148
00:04:34,720 --> 00:04:36,880
adversary and has lots of randomness

149
00:04:36,880 --> 00:04:38,800
the kinds of things an attacker can try

150
00:04:38,800 --> 00:04:40,880
to do in this setting is to

151
00:04:40,880 --> 00:04:42,400
learn something about the message or to

152
00:04:42,400 --> 00:04:43,919
change the output of decryption

153
00:04:43,919 --> 00:04:45,919
to cause the decryption to output

154
00:04:45,919 --> 00:04:47,680
something other than what the

155
00:04:47,680 --> 00:04:49,440
encrypter put put into the encryption

156
00:04:49,440 --> 00:04:51,440
algorithm

157
00:04:51,440 --> 00:04:53,040
in contrast neither of these goals

158
00:04:53,040 --> 00:04:55,040
really makes sense when the attacker

159
00:04:55,040 --> 00:04:56,160
controls the key

160
00:04:56,160 --> 00:04:58,000
the adversary already knows the message

161
00:04:58,000 --> 00:04:59,759
that's using for encryption so nothing

162
00:04:59,759 --> 00:05:01,759
is hidden from the adversary and the

163
00:05:01,759 --> 00:05:03,199
adversary can try to make decryption

164
00:05:03,199 --> 00:05:04,639
output whatever it wants because it

165
00:05:04,639 --> 00:05:06,320
chooses the input

166
00:05:06,320 --> 00:05:08,800
so what might an attacker want to do in

167
00:05:08,800 --> 00:05:10,320
this attack setting

168
00:05:10,320 --> 00:05:12,479
so it really depends on whether or not

169
00:05:12,479 --> 00:05:13,919
the adversary

170
00:05:13,919 --> 00:05:15,520
already knows the key used for

171
00:05:15,520 --> 00:05:18,400
decryption as well as encryption

172
00:05:18,400 --> 00:05:21,120
if the adversary doesn't control the key

173
00:05:21,120 --> 00:05:22,160
used in decryption

174
00:05:22,160 --> 00:05:23,600
one thing you could try to do is to

175
00:05:23,600 --> 00:05:26,000
learn information about the key itself

176
00:05:26,000 --> 00:05:27,759
the classical example of this is a brute

177
00:05:27,759 --> 00:05:29,440
force attack on for example

178
00:05:29,440 --> 00:05:31,759
password-based authenticated encryption

179
00:05:31,759 --> 00:05:33,759
if the receiver is decrypting ciphertext

180
00:05:33,759 --> 00:05:35,759
using a key that's easy to guess

181
00:05:35,759 --> 00:05:37,680
and the receiver somehow lets the sender

182
00:05:37,680 --> 00:05:39,600
know whether decryption succeeded with

183
00:05:39,600 --> 00:05:40,639
its key

184
00:05:40,639 --> 00:05:42,560
an attacker can try to encrypt a message

185
00:05:42,560 --> 00:05:44,160
with every possible password in

186
00:05:44,160 --> 00:05:45,280
popularity order

187
00:05:45,280 --> 00:05:47,680
and send them to the receiver if the

188
00:05:47,680 --> 00:05:48,800
keys don't match

189
00:05:48,800 --> 00:05:50,400
decryption will fail and the receiver

190
00:05:50,400 --> 00:05:52,160
will say i can't decrypt this

191
00:05:52,160 --> 00:05:53,919
but if the keys match decryption will

192
00:05:53,919 --> 00:05:55,680
succeed and the

193
00:05:55,680 --> 00:05:57,360
attacker will know the receiver's

194
00:05:57,360 --> 00:05:59,120
password

195
00:05:59,120 --> 00:06:00,800
an attack like this is always possible

196
00:06:00,800 --> 00:06:02,240
in any protocol but

197
00:06:02,240 --> 00:06:04,960
in settings like tls and another

198
00:06:04,960 --> 00:06:07,120
transport protocols the key is

199
00:06:07,120 --> 00:06:10,080
random enough uh to prove to make uh an

200
00:06:10,080 --> 00:06:11,600
online brute force attack like this

201
00:06:11,600 --> 00:06:12,800
infeasible

202
00:06:12,800 --> 00:06:14,560
so key recovery attacks like this are

203
00:06:14,560 --> 00:06:15,919
usually only a problem when

204
00:06:15,919 --> 00:06:17,840
the key used for authenticated

205
00:06:17,840 --> 00:06:19,919
encryption is a password or a short pin

206
00:06:19,919 --> 00:06:21,440
or if some key beats

207
00:06:21,440 --> 00:06:23,440
key bits rather are leaked via side

208
00:06:23,440 --> 00:06:25,520
channel

209
00:06:25,520 --> 00:06:27,759
so even if the sender and the receiver

210
00:06:27,759 --> 00:06:29,680
share a key attacker controlled keys can

211
00:06:29,680 --> 00:06:30,080
still

212
00:06:30,080 --> 00:06:32,479
be a problem take for example a setting

213
00:06:32,479 --> 00:06:34,080
where two parties are say trying to

214
00:06:34,080 --> 00:06:34,960
embezzle money

215
00:06:34,960 --> 00:06:38,080
and communicating ae encrypted traffic

216
00:06:38,080 --> 00:06:40,720
uh that contains fraudulent records like

217
00:06:40,720 --> 00:06:42,400
evidence of their crimes

218
00:06:42,400 --> 00:06:44,319
if the encrypted traffic has been stored

219
00:06:44,319 --> 00:06:45,680
for audit purposes

220
00:06:45,680 --> 00:06:47,199
and the auditor needs to decrypt to

221
00:06:47,199 --> 00:06:48,639
check what they've been doing the

222
00:06:48,639 --> 00:06:50,560
attackers could try to give a different

223
00:06:50,560 --> 00:06:51,199
key

224
00:06:51,199 --> 00:06:53,360
than the one they've been using so here

225
00:06:53,360 --> 00:06:54,880
their goal is not to learn something

226
00:06:54,880 --> 00:06:56,560
about what the decrypter

227
00:06:56,560 --> 00:06:59,520
is using or what the auditor will see in

228
00:06:59,520 --> 00:07:00,800
decryption

229
00:07:00,800 --> 00:07:02,240
it's rather to ensure that the auditor

230
00:07:02,240 --> 00:07:03,919
recovers something from decryption other

231
00:07:03,919 --> 00:07:05,360
than the fraudulent records that they've

232
00:07:05,360 --> 00:07:08,319
been communicating

233
00:07:08,319 --> 00:07:10,160
so now that we understand the setting

234
00:07:10,160 --> 00:07:11,919
and have some examples i'll explain what

235
00:07:11,919 --> 00:07:14,160
this committing security property is

236
00:07:14,160 --> 00:07:15,680
to explain this i like to use a very

237
00:07:15,680 --> 00:07:17,520
simple physical intuition of

238
00:07:17,520 --> 00:07:19,759
authenticated encryption as a lock box

239
00:07:19,759 --> 00:07:22,560
we can we can take ae in like a lockbox

240
00:07:22,560 --> 00:07:24,400
we can put a message inside of a box

241
00:07:24,400 --> 00:07:26,000
close it and lock it up

242
00:07:26,000 --> 00:07:27,840
and give it to an adversary and like a

243
00:07:27,840 --> 00:07:29,759
physical lock box ae should

244
00:07:29,759 --> 00:07:32,160
hide the contents of the of of what's

245
00:07:32,160 --> 00:07:32,800
inside

246
00:07:32,800 --> 00:07:35,360
confidentiality and prevent someone with

247
00:07:35,360 --> 00:07:37,280
that box from changing what's inside so

248
00:07:37,280 --> 00:07:40,319
integrity another property that a

249
00:07:40,319 --> 00:07:41,599
physical lock box has

250
00:07:41,599 --> 00:07:44,080
is more similar to committing security

251
00:07:44,080 --> 00:07:45,120
for ae

252
00:07:45,120 --> 00:07:46,879
which is that when you try to unlock the

253
00:07:46,879 --> 00:07:49,039
box no matter what key you use you

254
00:07:49,039 --> 00:07:49,520
either

255
00:07:49,520 --> 00:07:51,919
fail to open it or you open it and you

256
00:07:51,919 --> 00:07:52,560
see what

257
00:07:52,560 --> 00:07:54,800
the person who locked the box put in

258
00:07:54,800 --> 00:07:55,759
there

259
00:07:55,759 --> 00:07:57,919
this guarantee is a meaningful one in

260
00:07:57,919 --> 00:07:59,599
our attacker-controlled key setting

261
00:07:59,599 --> 00:08:01,520
because it restricts what the what the

262
00:08:01,520 --> 00:08:03,680
attacker can what what the encrypter can

263
00:08:03,680 --> 00:08:05,199
do when they lock them when they lock

264
00:08:05,199 --> 00:08:06,960
the box

265
00:08:06,960 --> 00:08:10,319
so this is in in in put simply the

266
00:08:10,319 --> 00:08:12,240
committing security guarantee that ae

267
00:08:12,240 --> 00:08:14,000
needs and if ae didn't have this it

268
00:08:14,000 --> 00:08:15,599
might be able to

269
00:08:15,599 --> 00:08:17,840
create an attacker or rather might be

270
00:08:17,840 --> 00:08:19,440
able to create lock boxes that had

271
00:08:19,440 --> 00:08:20,800
different things in them depending on

272
00:08:20,800 --> 00:08:22,479
which key was used to unlock them which

273
00:08:22,479 --> 00:08:23,919
defies our physical

274
00:08:23,919 --> 00:08:26,720
lock box uh for example an adversary

275
00:08:26,720 --> 00:08:28,720
could craft a single ae ciphertext that

276
00:08:28,720 --> 00:08:29,199
had

277
00:08:29,199 --> 00:08:30,960
in addition to this real cap picture

278
00:08:30,960 --> 00:08:32,559
decryption from before a second

279
00:08:32,559 --> 00:08:33,360
decryption

280
00:08:33,360 --> 00:08:35,279
with a different key to the salamander

281
00:08:35,279 --> 00:08:36,799
the invisible salamander

282
00:08:36,799 --> 00:08:39,760
of the title so committing security for

283
00:08:39,760 --> 00:08:40,240
ae

284
00:08:40,240 --> 00:08:42,880
as i said prevents this by binding the

285
00:08:42,880 --> 00:08:44,959
attacker in some sense to a single ae

286
00:08:44,959 --> 00:08:46,000
decryption

287
00:08:46,000 --> 00:08:50,160
and uh requiring that if the attacker

288
00:08:50,160 --> 00:08:51,519
unless the attacker solves some

289
00:08:51,519 --> 00:08:53,680
computationally intractable problem

290
00:08:53,680 --> 00:08:56,080
any ae ciphertext that they create only

291
00:08:56,080 --> 00:08:58,560
has one correct decryption

292
00:08:58,560 --> 00:08:59,920
this prevents them from crafting a

293
00:08:59,920 --> 00:09:01,519
ciphertext with these hidden secondary

294
00:09:01,519 --> 00:09:02,880
decryptions

295
00:09:02,880 --> 00:09:04,480
or these invisible southmanders from the

296
00:09:04,480 --> 00:09:06,240
title

297
00:09:06,240 --> 00:09:08,399
to see why committing uh prevents the

298
00:09:08,399 --> 00:09:09,839
attacks i described before

299
00:09:09,839 --> 00:09:12,160
uh recalled the our train our plain text

300
00:09:12,160 --> 00:09:14,080
reporting example from before

301
00:09:14,080 --> 00:09:16,160
if the malicious accountants uh that

302
00:09:16,160 --> 00:09:17,920
were communicating these fraudulent

303
00:09:17,920 --> 00:09:19,680
records used committing authenticated

304
00:09:19,680 --> 00:09:20,720
encryption

305
00:09:20,720 --> 00:09:22,880
uh no matter what key they report to the

306
00:09:22,880 --> 00:09:24,480
auditor they won't be able to hide their

307
00:09:24,480 --> 00:09:26,640
fraud the committing property guarantees

308
00:09:26,640 --> 00:09:27,040
that

309
00:09:27,040 --> 00:09:29,040
either the auditor will fail to decrypt

310
00:09:29,040 --> 00:09:31,040
those ciphertexts or it will decrypt and

311
00:09:31,040 --> 00:09:34,319
see the fraudulent records out

312
00:09:34,640 --> 00:09:37,200
so next i'll explain that surprisingly

313
00:09:37,200 --> 00:09:38,160
uh many

314
00:09:38,160 --> 00:09:40,000
widely used modern authenticated

315
00:09:40,000 --> 00:09:42,800
encryptions they're not committing

316
00:09:42,800 --> 00:09:45,200
so i promised you an attack on gcm uh

317
00:09:45,200 --> 00:09:46,240
but because gcm

318
00:09:46,240 --> 00:09:48,640
is fairly complicated i'll start with

319
00:09:48,640 --> 00:09:50,240
reasoning just about the encryption part

320
00:09:50,240 --> 00:09:52,240
of gcf which is counter mode

321
00:09:52,240 --> 00:09:53,839
so counter mode encryption if you're not

322
00:09:53,839 --> 00:09:55,760
familiar is pretty simple if we want to

323
00:09:55,760 --> 00:09:57,440
encrypt for example this plain text with

324
00:09:57,440 --> 00:09:57,920
this

325
00:09:57,920 --> 00:10:00,320
this orange key here we just sample a

326
00:10:00,320 --> 00:10:02,320
random initialization vector and derive

327
00:10:02,320 --> 00:10:03,440
a pad

328
00:10:03,440 --> 00:10:06,240
using that key in that iv then we take

329
00:10:06,240 --> 00:10:08,399
this pad that we derived an exclusive or

330
00:10:08,399 --> 00:10:10,320
with the plain text to output the

331
00:10:10,320 --> 00:10:12,480
ciphertext

332
00:10:12,480 --> 00:10:14,079
but now imagine that we have a different

333
00:10:14,079 --> 00:10:15,680
key this red key here

334
00:10:15,680 --> 00:10:18,720
we can still derive the pad for this

335
00:10:18,720 --> 00:10:20,480
other key with the same iv

336
00:10:20,480 --> 00:10:22,560
and try to decrypt the ciphertext with

337
00:10:22,560 --> 00:10:23,600
this other pad

338
00:10:23,600 --> 00:10:25,360
which will result in a different plain

339
00:10:25,360 --> 00:10:27,120
text than the one we

340
00:10:27,120 --> 00:10:30,480
kind of use for encryption so

341
00:10:30,480 --> 00:10:32,160
counter mode as you can see has this

342
00:10:32,160 --> 00:10:34,000
somewhat intuitive counter-intuitive

343
00:10:34,000 --> 00:10:35,760
property rather that ciphertext can be

344
00:10:35,760 --> 00:10:38,560
decrypted by any key

345
00:10:38,560 --> 00:10:40,720
so before showing the attack on full gcm

346
00:10:40,720 --> 00:10:42,399
i'll briefly explain how it works

347
00:10:42,399 --> 00:10:45,519
so gcm is ubiquitous and standardized by

348
00:10:45,519 --> 00:10:47,120
basically every standards body that

349
00:10:47,120 --> 00:10:47,920
standardizes

350
00:10:47,920 --> 00:10:51,279
encryption schemes so gcm in addition to

351
00:10:51,279 --> 00:10:52,399
using counter mode

352
00:10:52,399 --> 00:10:54,959
to encrypt things uh by sampling a

353
00:10:54,959 --> 00:10:56,079
random iv

354
00:10:56,079 --> 00:10:57,839
uh and encrypting the message with

355
00:10:57,839 --> 00:10:59,120
counter mode uses a message

356
00:10:59,120 --> 00:11:01,279
authentication code or mac to prevent

357
00:11:01,279 --> 00:11:02,079
tampering

358
00:11:02,079 --> 00:11:03,839
this is this mac is what provides the

359
00:11:03,839 --> 00:11:05,279
authenticated and authenticated

360
00:11:05,279 --> 00:11:06,800
encryption

361
00:11:06,800 --> 00:11:10,800
so to encrypt uh the gcm first computes

362
00:11:10,800 --> 00:11:12,399
counter mode on the plain text and then

363
00:11:12,399 --> 00:11:13,440
applies this

364
00:11:13,440 --> 00:11:15,040
this authentication message

365
00:11:15,040 --> 00:11:17,040
authentication code on the result of

366
00:11:17,040 --> 00:11:18,000
counter mode

367
00:11:18,000 --> 00:11:21,200
uh to compute a tag

368
00:11:21,200 --> 00:11:23,760
decryption then takes this this cipher

369
00:11:23,760 --> 00:11:24,240
this

370
00:11:24,240 --> 00:11:26,720
counter mode ciphertext and tag as input

371
00:11:26,720 --> 00:11:28,079
and recomputes the tag

372
00:11:28,079 --> 00:11:30,000
using this mac algorithm and compares it

373
00:11:30,000 --> 00:11:31,440
to the tag that was input

374
00:11:31,440 --> 00:11:33,360
if they match gcm outputs the counter

375
00:11:33,360 --> 00:11:34,959
decryption of that part of the cipher

376
00:11:34,959 --> 00:11:35,839
text

377
00:11:35,839 --> 00:11:38,959
and if if they don't uh decryption fails

378
00:11:38,959 --> 00:11:41,360
so if you didn't follow that that's fine

379
00:11:41,360 --> 00:11:43,680
all that's really important is that

380
00:11:43,680 --> 00:11:45,519
we we don't have to worry about any of

381
00:11:45,519 --> 00:11:47,120
the properties of counter mode

382
00:11:47,120 --> 00:11:49,760
to craft an invisible salamander for a

383
00:11:49,760 --> 00:11:51,040
cipher text or a cipher text that

384
00:11:51,040 --> 00:11:51,839
decrypts

385
00:11:51,839 --> 00:11:54,240
under multiple keys all we need to do is

386
00:11:54,240 --> 00:11:56,480
come up with a counter mode ciphertext

387
00:11:56,480 --> 00:11:58,880
uh that collides under this tag function

388
00:11:58,880 --> 00:11:59,920
that has the same

389
00:11:59,920 --> 00:12:01,680
the same tag output under these two

390
00:12:01,680 --> 00:12:03,680
different keys

391
00:12:03,680 --> 00:12:06,399
so we'll next see how to do that and

392
00:12:06,399 --> 00:12:07,920
recall that our process here is

393
00:12:07,920 --> 00:12:09,920
going to take as input these two

394
00:12:09,920 --> 00:12:11,440
encryption keys and it's going to output

395
00:12:11,440 --> 00:12:13,040
a counter mode cipher text

396
00:12:13,040 --> 00:12:16,880
iv and message so to do this

397
00:12:16,880 --> 00:12:19,279
we need to review how the mac works and

398
00:12:19,279 --> 00:12:21,519
fortunately for us gcm's mac is not a

399
00:12:21,519 --> 00:12:23,120
complicated collision resistant hash

400
00:12:23,120 --> 00:12:24,079
function like shot

401
00:12:24,079 --> 00:12:27,200
56 instead it's a very fast polynomial

402
00:12:27,200 --> 00:12:28,720
evaluation combined with

403
00:12:28,720 --> 00:12:31,279
exclusive or as follows first uh the

404
00:12:31,279 --> 00:12:32,000
algorithm

405
00:12:32,000 --> 00:12:34,000
takes the the counter mode cipher text

406
00:12:34,000 --> 00:12:36,560
and splits it into 128 bit blocks which

407
00:12:36,560 --> 00:12:38,639
form the coefficients of the polynomial

408
00:12:38,639 --> 00:12:40,000
well so here we'll just stick to the

409
00:12:40,000 --> 00:12:41,600
case where the ciphertext is a single

410
00:12:41,600 --> 00:12:42,800
block for now

411
00:12:42,800 --> 00:12:46,240
then it computes the hash point and the

412
00:12:46,240 --> 00:12:48,480
and the pad the hash point by encrypting

413
00:12:48,480 --> 00:12:50,560
the zero string with aes in the key and

414
00:12:50,560 --> 00:12:52,399
the pad by encrypting the iv

415
00:12:52,399 --> 00:12:56,000
with aes and the key finally it treats

416
00:12:56,000 --> 00:12:57,519
this hash point as a number

417
00:12:57,519 --> 00:12:59,519
and evaluates the polynomial defined by

418
00:12:59,519 --> 00:13:02,000
our coefficient c1 and a blocked into

419
00:13:02,000 --> 00:13:05,680
the ciphertext length at the number h

420
00:13:05,680 --> 00:13:07,760
then exclusive or is the pad with the

421
00:13:07,760 --> 00:13:10,800
result and how it puts it as the tag

422
00:13:10,800 --> 00:13:12,720
all this arithmetic is actually not done

423
00:13:12,720 --> 00:13:14,240
over the real numbers it's done

424
00:13:14,240 --> 00:13:16,160
in what's called a gawa field of order 2

425
00:13:16,160 --> 00:13:17,600
to the 128

426
00:13:17,600 --> 00:13:18,720
and the details of that aren't too

427
00:13:18,720 --> 00:13:20,079
important the only thing that's

428
00:13:20,079 --> 00:13:21,279
important or

429
00:13:21,279 --> 00:13:23,680
know about that that algebraic structure

430
00:13:23,680 --> 00:13:24,639
is that in

431
00:13:24,639 --> 00:13:28,000
in that in that in that field addition

432
00:13:28,000 --> 00:13:31,680
and exclusive or the same operation

433
00:13:32,160 --> 00:13:34,639
so recall we're trying to work out an

434
00:13:34,639 --> 00:13:36,560
input iv in ciphertext that makes the

435
00:13:36,560 --> 00:13:38,399
mac function output the same thing

436
00:13:38,399 --> 00:13:42,000
for our red and orange keys here

437
00:13:42,000 --> 00:13:43,920
so to do this we're gonna we're gonna

438
00:13:43,920 --> 00:13:45,600
use the following process

439
00:13:45,600 --> 00:13:47,920
uh so we're gonna choose an arbitrary iv

440
00:13:47,920 --> 00:13:49,040
it doesn't matter which one

441
00:13:49,040 --> 00:13:52,079
and then we're going to derive

442
00:13:52,079 --> 00:13:54,399
the hash points and the pads for the two

443
00:13:54,399 --> 00:13:55,440
keys

444
00:13:55,440 --> 00:13:56,800
then we're going to take the tag

445
00:13:56,800 --> 00:13:59,040
equations for the for the

446
00:13:59,040 --> 00:14:01,360
for the two keys treating the ciphertext

447
00:14:01,360 --> 00:14:02,639
block as a variable

448
00:14:02,639 --> 00:14:05,199
and just set them equal to each other

449
00:14:05,199 --> 00:14:07,440
this gives an equation in one variable

450
00:14:07,440 --> 00:14:09,519
namely the single block c1 so we can

451
00:14:09,519 --> 00:14:11,120
simply solve it and i'll come back to

452
00:14:11,120 --> 00:14:12,639
how we do this to find the

453
00:14:12,639 --> 00:14:15,680
block now we can let our message be that

454
00:14:15,680 --> 00:14:16,959
single block that we computed and

455
00:14:16,959 --> 00:14:18,959
recompute the tag which by construction

456
00:14:18,959 --> 00:14:21,360
collides under both keys

457
00:14:21,360 --> 00:14:23,360
and then output this iv messaging tag

458
00:14:23,360 --> 00:14:26,079
that we computed

459
00:14:26,639 --> 00:14:29,120
now to solve this equation we simply

460
00:14:29,120 --> 00:14:30,000
have to rearrange

461
00:14:30,000 --> 00:14:32,720
it a little bit so that we get this the

462
00:14:32,720 --> 00:14:33,839
ciphertext block

463
00:14:33,839 --> 00:14:37,120
times the sum of the two uh squared hash

464
00:14:37,120 --> 00:14:37,680
points

465
00:14:37,680 --> 00:14:38,880
and on the right side we get some

466
00:14:38,880 --> 00:14:40,880
constants

467
00:14:40,880 --> 00:14:43,360
so we can rearrange this by multiplying

468
00:14:43,360 --> 00:14:44,959
the left-hand side by the inverse of

469
00:14:44,959 --> 00:14:46,480
that constant term and just

470
00:14:46,480 --> 00:14:49,920
define the ciphertext block c1

471
00:14:49,920 --> 00:14:53,279
as the the terms on the right

472
00:14:53,279 --> 00:14:56,000
now this equation here on the left looks

473
00:14:56,000 --> 00:14:57,839
very hairy because it has a lot of terms

474
00:14:57,839 --> 00:14:59,360
but it's really very simple

475
00:14:59,360 --> 00:15:01,440
so just imagine a much simpler equation

476
00:15:01,440 --> 00:15:03,199
like 2x equals 6.

477
00:15:03,199 --> 00:15:05,600
um like 2x equals 6 our equation here on

478
00:15:05,600 --> 00:15:07,199
the right-hand side is all constant and

479
00:15:07,199 --> 00:15:08,639
on the left-hand side is a variable

480
00:15:08,639 --> 00:15:09,839
times a constant

481
00:15:09,839 --> 00:15:12,000
so if you remember from from algebra all

482
00:15:12,000 --> 00:15:13,199
you need to do is kind of

483
00:15:13,199 --> 00:15:16,480
uh divide both sides by the the constant

484
00:15:16,480 --> 00:15:17,680
term here on the left

485
00:15:17,680 --> 00:15:19,600
to solve for to solve for the variable

486
00:15:19,600 --> 00:15:21,199
which on the right hand side is x equals

487
00:15:21,199 --> 00:15:22,800
three or on the left-hand side is our

488
00:15:22,800 --> 00:15:25,600
ciphertext block

489
00:15:25,600 --> 00:15:28,720
so it's worth reflecting on why this

490
00:15:28,720 --> 00:15:32,079
attack doesn't work for other um

491
00:15:32,079 --> 00:15:33,759
collision resistant hash functions like

492
00:15:33,759 --> 00:15:35,120
shot 56

493
00:15:35,120 --> 00:15:36,880
uh why this attack can't work for any

494
00:15:36,880 --> 00:15:38,160
mac um or

495
00:15:38,160 --> 00:15:39,600
based on like a collision resistant

496
00:15:39,600 --> 00:15:41,279
function and it's because

497
00:15:41,279 --> 00:15:43,680
this this mac is not a complicated

498
00:15:43,680 --> 00:15:44,320
function

499
00:15:44,320 --> 00:15:46,480
of the cipher text in in it's a very

500
00:15:46,480 --> 00:15:47,920
simple to describe

501
00:15:47,920 --> 00:15:51,120
algebraic function of the cipher text so

502
00:15:51,120 --> 00:15:52,959
you could write down an equation like

503
00:15:52,959 --> 00:15:54,720
this for a more complicated collision

504
00:15:54,720 --> 00:15:55,519
resistant

505
00:15:55,519 --> 00:15:58,959
hash like shot to 56 but the reason why

506
00:15:58,959 --> 00:16:00,560
that function is collision resistant is

507
00:16:00,560 --> 00:16:02,240
because no one knows how to solve that

508
00:16:02,240 --> 00:16:03,600
system of equations

509
00:16:03,600 --> 00:16:06,000
with time less than just a simple

510
00:16:06,000 --> 00:16:09,839
generic collision finding search

511
00:16:09,920 --> 00:16:12,800
so this this attack works for a single

512
00:16:12,800 --> 00:16:14,320
ciphertext block and it's not too hard

513
00:16:14,320 --> 00:16:16,079
to adapt it to multiple ciphertext

514
00:16:16,079 --> 00:16:18,240
blocks

515
00:16:18,240 --> 00:16:21,120
one just needs to add a a constant

516
00:16:21,120 --> 00:16:23,040
contribution from the other ciphertext

517
00:16:23,040 --> 00:16:24,720
blocks that aren't fixed by the choice

518
00:16:24,720 --> 00:16:25,920
of the two keys

519
00:16:25,920 --> 00:16:28,079
uh to the to the mac equation so here on

520
00:16:28,079 --> 00:16:29,680
the right hand side i've adapted the mac

521
00:16:29,680 --> 00:16:30,560
algorithm

522
00:16:30,560 --> 00:16:32,880
uh two arbitrary numbers of blocks and

523
00:16:32,880 --> 00:16:36,000
the with the changes here in white

524
00:16:36,000 --> 00:16:37,600
but i also promised you that i would

525
00:16:37,600 --> 00:16:40,240
describe how to do more than two keys

526
00:16:40,240 --> 00:16:44,079
um and you can do this by observing that

527
00:16:44,079 --> 00:16:46,079
this this simple one equation problem

528
00:16:46,079 --> 00:16:47,920
for one block that we had before is a

529
00:16:47,920 --> 00:16:50,639
very simple instance of linear algebra

530
00:16:50,639 --> 00:16:53,600
or it has to do with solving systems of

531
00:16:53,600 --> 00:16:55,600
linear equations

532
00:16:55,600 --> 00:16:57,440
so we can recast the question of

533
00:16:57,440 --> 00:16:59,920
constructing a gcm collision

534
00:16:59,920 --> 00:17:03,519
to a single matrix vector equation

535
00:17:03,519 --> 00:17:05,839
where there's an equation for each key

536
00:17:05,839 --> 00:17:07,679
that we want to collide on and as many

537
00:17:07,679 --> 00:17:08,640
variables

538
00:17:08,640 --> 00:17:11,119
as there are ciphertext blocks in in the

539
00:17:11,119 --> 00:17:13,280
in the desired ciphertext

540
00:17:13,280 --> 00:17:15,280
so we know from linear algebra that as

541
00:17:15,280 --> 00:17:16,799
long as there are more

542
00:17:16,799 --> 00:17:20,400
ciphertex blocks than keys

543
00:17:20,400 --> 00:17:22,240
this this system can be solved where

544
00:17:22,240 --> 00:17:23,839
we're here on the left hand side this

545
00:17:23,839 --> 00:17:24,240
this

546
00:17:24,240 --> 00:17:26,079
matrix is the basically the

547
00:17:26,079 --> 00:17:27,439
exponentiation

548
00:17:27,439 --> 00:17:29,120
of each of the hash points for each of

549
00:17:29,120 --> 00:17:31,280
the keys

550
00:17:31,280 --> 00:17:33,760
and this this this equation as long as

551
00:17:33,760 --> 00:17:34,880
the number of

552
00:17:34,880 --> 00:17:36,640
the number of variables is more than a

553
00:17:36,640 --> 00:17:38,320
number of constraints can be solved in

554
00:17:38,320 --> 00:17:42,000
quadratic time in the number of keys

555
00:17:43,120 --> 00:17:45,520
uh so finally this this basic template

556
00:17:45,520 --> 00:17:47,679
for colliding on multiple keys applies

557
00:17:47,679 --> 00:17:48,080
to

558
00:17:48,080 --> 00:17:50,720
other um authenticated encryption

559
00:17:50,720 --> 00:17:52,480
schemes with polynomial max so for

560
00:17:52,480 --> 00:17:53,200
example

561
00:17:53,200 --> 00:17:55,520
schemes that use poly1305 that can be

562
00:17:55,520 --> 00:17:57,280
found in lib sodium and knackle

563
00:17:57,280 --> 00:18:00,400
can be attacked like this and gcm siv as

564
00:18:00,400 --> 00:18:01,280
well

565
00:18:01,280 --> 00:18:03,440
um but for technical reasons i won't go

566
00:18:03,440 --> 00:18:05,280
into scaling these attacks up to many

567
00:18:05,280 --> 00:18:06,080
keys is more

568
00:18:06,080 --> 00:18:09,200
is more complicated than with plain gcm

569
00:18:09,200 --> 00:18:09,440
but

570
00:18:09,440 --> 00:18:12,559
but it can be done

571
00:18:12,880 --> 00:18:14,799
so here we're at the end of the the

572
00:18:14,799 --> 00:18:15,919
heavy math stuff

573
00:18:15,919 --> 00:18:18,160
so if my dulcet tones have put you to

574
00:18:18,160 --> 00:18:20,000
sleep uh it's time to wake up to get the

575
00:18:20,000 --> 00:18:20,880
summary

576
00:18:20,880 --> 00:18:23,120
uh first widely used authenticated

577
00:18:23,120 --> 00:18:24,640
encryption schemes like gcm are not

578
00:18:24,640 --> 00:18:25,280
committing

579
00:18:25,280 --> 00:18:26,480
though importantly this doesn't

580
00:18:26,480 --> 00:18:28,160
invalidate their use in settings where

581
00:18:28,160 --> 00:18:29,520
attacker-controlled keys

582
00:18:29,520 --> 00:18:32,240
aren't a problem it's very simple to

583
00:18:32,240 --> 00:18:32,799
craft

584
00:18:32,799 --> 00:18:34,799
ciphertext with invisible salamanders or

585
00:18:34,799 --> 00:18:36,799
secondary hidden decryptions

586
00:18:36,799 --> 00:18:38,720
and finally using linear algebra it's

587
00:18:38,720 --> 00:18:40,000
not too hard to produce a single

588
00:18:40,000 --> 00:18:41,760
ciphertext with hundreds of thousands of

589
00:18:41,760 --> 00:18:43,600
correct decryptions or even more

590
00:18:43,600 --> 00:18:45,840
for example my colleague generated a gcm

591
00:18:45,840 --> 00:18:47,840
ciphertext that decrypts correctly under

592
00:18:47,840 --> 00:18:52,159
over 131 000 different keys

593
00:18:52,559 --> 00:18:55,039
finally i'll give you some some attacks

594
00:18:55,039 --> 00:18:56,559
that result from incorrect use of

595
00:18:56,559 --> 00:18:58,240
non-committing authenticated encryption

596
00:18:58,240 --> 00:19:01,520
in attacker-controlled key settings

597
00:19:01,520 --> 00:19:03,280
so the first uh i'll start with the

598
00:19:03,280 --> 00:19:05,280
simplest one which has to do with

599
00:19:05,280 --> 00:19:07,440
group messaging in group messaging a

600
00:19:07,440 --> 00:19:09,360
single sender sends a message to a group

601
00:19:09,360 --> 00:19:10,080
of recipients

602
00:19:10,080 --> 00:19:12,400
instead of just one receiver and

603
00:19:12,400 --> 00:19:13,919
actually the sender will use ae to

604
00:19:13,919 --> 00:19:15,120
encrypt the message

605
00:19:15,120 --> 00:19:16,400
and they'll do so with a key that's

606
00:19:16,400 --> 00:19:18,880
shared pairwise with each recipient

607
00:19:18,880 --> 00:19:20,240
perhaps done using a public key

608
00:19:20,240 --> 00:19:23,120
encryption of the key

609
00:19:23,120 --> 00:19:25,600
in in the ciphertext itself and

610
00:19:25,600 --> 00:19:26,799
importantly we're going to assume a

611
00:19:26,799 --> 00:19:28,480
setup where there's only one ae

612
00:19:28,480 --> 00:19:29,120
encryption

613
00:19:29,120 --> 00:19:32,559
sent to all to all users fanned out by

614
00:19:32,559 --> 00:19:34,640
the server

615
00:19:34,640 --> 00:19:37,919
so once the keys are shared pairwise it

616
00:19:37,919 --> 00:19:38,559
can

617
00:19:38,559 --> 00:19:39,919
the the sender can send a single

618
00:19:39,919 --> 00:19:41,760
ciphertext to the server that fans it

619
00:19:41,760 --> 00:19:44,480
out to each recipient who just got a key

620
00:19:44,480 --> 00:19:46,240
so this basic pattern of fanning out

621
00:19:46,240 --> 00:19:47,520
these single ciphertexts

622
00:19:47,520 --> 00:19:49,679
after pairwise sharing keys is pretty

623
00:19:49,679 --> 00:19:51,440
common in group messaging and is used by

624
00:19:51,440 --> 00:19:54,880
whatsapp and key base and a few others

625
00:19:54,880 --> 00:19:56,960
so the attack here is is pretty simple

626
00:19:56,960 --> 00:19:58,880
if the sender is malicious it can simply

627
00:19:58,880 --> 00:19:59,200
share

628
00:19:59,200 --> 00:20:01,840
different keys with different recipients

629
00:20:01,840 --> 00:20:03,440
and then send a ciphertext with an

630
00:20:03,440 --> 00:20:05,200
invisible salamander and enforcing

631
00:20:05,200 --> 00:20:06,799
different receivers to see different

632
00:20:06,799 --> 00:20:08,480
decryptions

633
00:20:08,480 --> 00:20:11,039
uh this attack is is is a nice

634
00:20:11,039 --> 00:20:11,919
demonstration

635
00:20:11,919 --> 00:20:14,400
of what unintuitive things can happen

636
00:20:14,400 --> 00:20:15,679
when encryption is

637
00:20:15,679 --> 00:20:17,840
not committing but as far as i know it's

638
00:20:17,840 --> 00:20:19,360
only theoretical and it's not

639
00:20:19,360 --> 00:20:21,120
clear that these protocols that use this

640
00:20:21,120 --> 00:20:23,039
pattern are are vulnerable

641
00:20:23,039 --> 00:20:24,880
although if you want to do some homework

642
00:20:24,880 --> 00:20:26,320
you can go look at these

643
00:20:26,320 --> 00:20:28,880
these protocols yourself and if you find

644
00:20:28,880 --> 00:20:30,799
uh find a vulnerability like this and

645
00:20:30,799 --> 00:20:32,480
email me i'll i'll give you uh

646
00:20:32,480 --> 00:20:35,600
i'll give you a gold star

647
00:20:35,600 --> 00:20:39,039
so uh attacks like this have been

648
00:20:39,039 --> 00:20:40,000
demonstrated

649
00:20:40,000 --> 00:20:42,799
in in in some protocols although the the

650
00:20:42,799 --> 00:20:44,400
many of the details are different in way

651
00:20:44,400 --> 00:20:46,159
i'll explain before

652
00:20:46,159 --> 00:20:49,120
so a a an attack similar to this one

653
00:20:49,120 --> 00:20:50,400
that's been demonstrated

654
00:20:50,400 --> 00:20:52,400
is on an abuse reporting system for

655
00:20:52,400 --> 00:20:53,919
encrypted messaging

656
00:20:53,919 --> 00:20:55,679
so just to give you some background on

657
00:20:55,679 --> 00:20:56,960
abuse reporting

658
00:20:56,960 --> 00:20:59,840
this is a problem that's faced by all

659
00:20:59,840 --> 00:21:00,400
people

660
00:21:00,400 --> 00:21:02,240
but by all people who run platforms that

661
00:21:02,240 --> 00:21:04,000
provide ending encryption

662
00:21:04,000 --> 00:21:06,159
where if a sender is malicious and sends

663
00:21:06,159 --> 00:21:08,159
something abusive to a receiver

664
00:21:08,159 --> 00:21:10,080
uh encryption makes it hard to report

665
00:21:10,080 --> 00:21:11,840
that message to the platform

666
00:21:11,840 --> 00:21:14,480
uh because if the platform doesn't ask

667
00:21:14,480 --> 00:21:16,240
for additional verification that the

668
00:21:16,240 --> 00:21:17,280
reports

669
00:21:17,280 --> 00:21:19,440
are are genuine then a malicious

670
00:21:19,440 --> 00:21:20,880
receiver could themselves report

671
00:21:20,880 --> 00:21:22,640
whatever they want and abuse the abuse

672
00:21:22,640 --> 00:21:25,120
reporting system

673
00:21:25,120 --> 00:21:27,840
so what what is needed here in this

674
00:21:27,840 --> 00:21:29,600
abuse reporting for encrypted messaging

675
00:21:29,600 --> 00:21:30,240
setting

676
00:21:30,240 --> 00:21:31,919
is some kind of secure reporting

677
00:21:31,919 --> 00:21:33,600
protocol for the contents of an

678
00:21:33,600 --> 00:21:35,840
encrypted message

679
00:21:35,840 --> 00:21:37,440
and facebook were the first to notice

680
00:21:37,440 --> 00:21:39,840
the need for this in in applications

681
00:21:39,840 --> 00:21:42,240
and they developed an ad hoc protocol

682
00:21:42,240 --> 00:21:43,919
for cryptographically proving the

683
00:21:43,919 --> 00:21:45,520
contents of a message called message

684
00:21:45,520 --> 00:21:47,039
franking

685
00:21:47,039 --> 00:21:48,480
and the attack will break this message

686
00:21:48,480 --> 00:21:50,960
ranking protocol basically the attack

687
00:21:50,960 --> 00:21:52,000
works because

688
00:21:52,000 --> 00:21:53,919
facebook used non-committing encryption

689
00:21:53,919 --> 00:21:56,000
for part of their protocol

690
00:21:56,000 --> 00:21:59,120
which meant that an attacker a malicious

691
00:21:59,120 --> 00:22:00,400
sender to be precise

692
00:22:00,400 --> 00:22:03,440
can uh choose the keys and craft a

693
00:22:03,440 --> 00:22:05,280
ciphertext that lets them evade abuse

694
00:22:05,280 --> 00:22:07,760
reporting

695
00:22:07,919 --> 00:22:10,000
so let's take a look briefly at the

696
00:22:10,000 --> 00:22:11,280
message ranking protocol

697
00:22:11,280 --> 00:22:12,960
note that for time reasons this isn't

698
00:22:12,960 --> 00:22:15,200
the exact protocol it's actually a

699
00:22:15,200 --> 00:22:17,280
vastly simplified version but this

700
00:22:17,280 --> 00:22:18,720
protocol has the same problem as the

701
00:22:18,720 --> 00:22:20,000
real one and i

702
00:22:20,000 --> 00:22:21,919
invite you to look at my academic papers

703
00:22:21,919 --> 00:22:23,679
on the subject or facebook's white paper

704
00:22:23,679 --> 00:22:24,840
if you have questions about the real

705
00:22:24,840 --> 00:22:28,080
protocol so first the protocol

706
00:22:28,080 --> 00:22:30,799
uh encrypts the the plain text with the

707
00:22:30,799 --> 00:22:31,840
sender chosen

708
00:22:31,840 --> 00:22:34,400
uh per message key and then the sender

709
00:22:34,400 --> 00:22:35,919
sends this cipher text to facebook

710
00:22:35,919 --> 00:22:37,520
facebook stores a copy of it

711
00:22:37,520 --> 00:22:39,440
and then forwards the ciphertext onto

712
00:22:39,440 --> 00:22:41,120
the receiver who decrypts it with that

713
00:22:41,120 --> 00:22:43,200
key

714
00:22:43,200 --> 00:22:45,360
when the when the receiver judges the

715
00:22:45,360 --> 00:22:47,120
content that they decrypted to be

716
00:22:47,120 --> 00:22:48,480
abusive

717
00:22:48,480 --> 00:22:50,559
they send the keys for all recent

718
00:22:50,559 --> 00:22:52,640
messages to facebook

719
00:22:52,640 --> 00:22:54,720
and facebook decrypts those ciphertexts

720
00:22:54,720 --> 00:22:55,760
that it's stored

721
00:22:55,760 --> 00:22:58,640
and uh it deduplicates the their their

722
00:22:58,640 --> 00:23:00,400
contents and places them into an abuse

723
00:23:00,400 --> 00:23:02,799
report that a human can see

724
00:23:02,799 --> 00:23:06,240
thus if we if we send uh if we if we

725
00:23:06,240 --> 00:23:08,240
send a single

726
00:23:08,240 --> 00:23:10,480
if we send a single ciphertext twice

727
00:23:10,480 --> 00:23:12,480
under two different keys

728
00:23:12,480 --> 00:23:14,000
because the keys are sent or chosen we

729
00:23:14,000 --> 00:23:15,600
might imagine that we can use

730
00:23:15,600 --> 00:23:16,960
a ciphertext with an invisible

731
00:23:16,960 --> 00:23:18,640
salamander to kind of

732
00:23:18,640 --> 00:23:20,159
send a message that facebook won't see

733
00:23:20,159 --> 00:23:22,320
because of this deduplication

734
00:23:22,320 --> 00:23:23,600
and so this is exactly what we're going

735
00:23:23,600 --> 00:23:25,280
to do more specifically we're going to

736
00:23:25,280 --> 00:23:26,799
craft a cipher text

737
00:23:26,799 --> 00:23:28,720
with an invisible salamander that's some

738
00:23:28,720 --> 00:23:30,720
induced abusive image that we want to

739
00:23:30,720 --> 00:23:32,240
send and another decryption to an

740
00:23:32,240 --> 00:23:33,760
innocuous image

741
00:23:33,760 --> 00:23:35,840
then the attacker the the malicious

742
00:23:35,840 --> 00:23:37,039
center will send this

743
00:23:37,039 --> 00:23:39,280
ciphertext twice with two different keys

744
00:23:39,280 --> 00:23:41,840
to the receiver

745
00:23:41,840 --> 00:23:44,880
the receiver will decrypt both

746
00:23:44,880 --> 00:23:46,640
will decrypt the ciphertext under both

747
00:23:46,640 --> 00:23:48,320
keys and they'll see the abusive image

748
00:23:48,320 --> 00:23:50,480
and the innocuous one but then when the

749
00:23:50,480 --> 00:23:52,320
receiver reports that

750
00:23:52,320 --> 00:23:54,159
that conversation to facebook the

751
00:23:54,159 --> 00:23:55,679
deduplication will ensure

752
00:23:55,679 --> 00:23:58,799
that despite both uh encryption both

753
00:23:58,799 --> 00:23:59,679
decryptions

754
00:23:59,679 --> 00:24:02,159
being uh decrypted by facebook the human

755
00:24:02,159 --> 00:24:02,880
moderator

756
00:24:02,880 --> 00:24:05,120
will only actually see one of those

757
00:24:05,120 --> 00:24:08,880
decryptions namely the innocuous one

758
00:24:08,880 --> 00:24:12,080
so this protocol allows the sender to

759
00:24:12,080 --> 00:24:15,120
evade abuse reporting but i

760
00:24:15,120 --> 00:24:17,600
i told you that the to do this the

761
00:24:17,600 --> 00:24:18,960
sender has to craft

762
00:24:18,960 --> 00:24:20,880
a gcm cipher text that decrypts the two

763
00:24:20,880 --> 00:24:22,400
different valid images

764
00:24:22,400 --> 00:24:23,919
and before i didn't actually tell you

765
00:24:23,919 --> 00:24:25,600
how to do that

766
00:24:25,600 --> 00:24:27,840
in fact without additional work the

767
00:24:27,840 --> 00:24:29,840
invisible salamanders crafted using the

768
00:24:29,840 --> 00:24:31,279
method i described before

769
00:24:31,279 --> 00:24:32,799
won't have any particular structure at

770
00:24:32,799 --> 00:24:34,480
all it'll just be kind of random junk

771
00:24:34,480 --> 00:24:36,320
bits

772
00:24:36,320 --> 00:24:38,240
so to give facebook a proof of concept

773
00:24:38,240 --> 00:24:40,159
we actually crafted a single gcm

774
00:24:40,159 --> 00:24:41,120
ciphertext

775
00:24:41,120 --> 00:24:43,440
where both decryptions are valid images

776
00:24:43,440 --> 00:24:44,640
namely this

777
00:24:44,640 --> 00:24:46,640
bitmap of a kitten and this jpeg of a

778
00:24:46,640 --> 00:24:47,919
salamander that we've been using

779
00:24:47,919 --> 00:24:48,960
throughout this talk

780
00:24:48,960 --> 00:24:50,480
and i actually did import the

781
00:24:50,480 --> 00:24:52,080
decryptions of that single ciphertext

782
00:24:52,080 --> 00:24:53,440
into this powerpoint so these are the

783
00:24:53,440 --> 00:24:55,600
real images

784
00:24:55,600 --> 00:24:57,360
doing this doing this collision was

785
00:24:57,360 --> 00:24:59,039
tricky because in addition to

786
00:24:59,039 --> 00:25:01,600
crafting the tag to be colliding we need

787
00:25:01,600 --> 00:25:02,240
to have

788
00:25:02,240 --> 00:25:04,080
to to have the right bytes at certain

789
00:25:04,080 --> 00:25:05,919
offsets of these files

790
00:25:05,919 --> 00:25:09,120
um for example the the initial two bytes

791
00:25:09,120 --> 00:25:09,919
of the file

792
00:25:09,919 --> 00:25:12,480
need to be the correct um magic bytes

793
00:25:12,480 --> 00:25:14,000
for the image files

794
00:25:14,000 --> 00:25:15,919
respectively the jpeg and the bitmap

795
00:25:15,919 --> 00:25:17,200
magic bytes

796
00:25:17,200 --> 00:25:18,960
and the third and fourth bytes in the

797
00:25:18,960 --> 00:25:20,880
jpeg need to be a comment character and

798
00:25:20,880 --> 00:25:22,799
the bitmap need to be the length

799
00:25:22,799 --> 00:25:24,559
and then the fifth and sixth bytes in

800
00:25:24,559 --> 00:25:26,080
the jpeg need to be a comment

801
00:25:26,080 --> 00:25:28,400
length and in the bitmap they need to be

802
00:25:28,400 --> 00:25:29,120
the zero

803
00:25:29,120 --> 00:25:32,559
the two zero bytes so what we ended up

804
00:25:32,559 --> 00:25:34,720
doing is colliding the gcm key stream of

805
00:25:34,720 --> 00:25:36,080
the first four bytes and then

806
00:25:36,080 --> 00:25:37,919
allowing the comment length to vary

807
00:25:37,919 --> 00:25:39,360
randomly based on the

808
00:25:39,360 --> 00:25:42,080
decryption of those bitmap bytes um

809
00:25:42,080 --> 00:25:43,520
under the jpeg

810
00:25:43,520 --> 00:25:46,320
keystream the counter mode keystream

811
00:25:46,320 --> 00:25:46,720
then

812
00:25:46,720 --> 00:25:49,039
because the what's that whatever is at

813
00:25:49,039 --> 00:25:50,000
the

814
00:25:50,000 --> 00:25:52,400
the the suffix of this bitmap file will

815
00:25:52,400 --> 00:25:54,240
be ignored by the bitmap parser as long

816
00:25:54,240 --> 00:25:55,679
as the length is correct

817
00:25:55,679 --> 00:25:56,880
we can construct the rest of the

818
00:25:56,880 --> 00:25:58,880
ciphertext very simply by starting with

819
00:25:58,880 --> 00:25:59,760
the bitmap

820
00:25:59,760 --> 00:26:01,840
ciphertext and then putting some padding

821
00:26:01,840 --> 00:26:03,679
and then ending with the jpeg ciphertext

822
00:26:03,679 --> 00:26:05,360
ensuring that the jpeg ends with the

823
00:26:05,360 --> 00:26:05,760
correct

824
00:26:05,760 --> 00:26:10,240
ffd9 byte indicator

825
00:26:10,240 --> 00:26:12,320
so the last attack i'll tell you about

826
00:26:12,320 --> 00:26:13,520
that results from the use of

827
00:26:13,520 --> 00:26:14,640
non-committing

828
00:26:14,640 --> 00:26:17,600
uh ae is partitioning oracles uh

829
00:26:17,600 --> 00:26:18,799
partitioning oracles

830
00:26:18,799 --> 00:26:21,039
occur when non-committing ae is used

831
00:26:21,039 --> 00:26:22,960
with low entropy keys like passwords and

832
00:26:22,960 --> 00:26:24,159
give a speed up in

833
00:26:24,159 --> 00:26:26,080
uh online brute force key recovery

834
00:26:26,080 --> 00:26:28,480
attacks for on password-based ae

835
00:26:28,480 --> 00:26:30,480
so recall our example before of an

836
00:26:30,480 --> 00:26:32,880
online key recovery attack

837
00:26:32,880 --> 00:26:34,799
the adversary chooses the key and then

838
00:26:34,799 --> 00:26:36,000
encrypts a kind of guess

839
00:26:36,000 --> 00:26:38,400
plaintext with it and sends it to the

840
00:26:38,400 --> 00:26:39,360
the receiver

841
00:26:39,360 --> 00:26:41,679
and the receiver either responds with a

842
00:26:41,679 --> 00:26:43,279
decryption failed i can't decrypt this

843
00:26:43,279 --> 00:26:44,720
or decryption succeeded

844
00:26:44,720 --> 00:26:47,679
and based on these responses the the

845
00:26:47,679 --> 00:26:48,720
attacker

846
00:26:48,720 --> 00:26:51,520
will be able to learn the the receiver's

847
00:26:51,520 --> 00:26:53,840
key

848
00:26:53,919 --> 00:26:56,880
so using non-committing ae here lets the

849
00:26:56,880 --> 00:26:59,120
adversary check more than one guess for

850
00:26:59,120 --> 00:27:00,960
each cipher text it sends

851
00:27:00,960 --> 00:27:02,960
effectively the use of non-committing ae

852
00:27:02,960 --> 00:27:04,720
lets the adversary partition the space

853
00:27:04,720 --> 00:27:06,480
of possible keys into sets that are

854
00:27:06,480 --> 00:27:08,320
bigger than bigger than one

855
00:27:08,320 --> 00:27:10,559
so there's nothing actually special

856
00:27:10,559 --> 00:27:12,400
about these these two guesses here the

857
00:27:12,400 --> 00:27:13,200
fact that this

858
00:27:13,200 --> 00:27:14,559
sender has sent a cipher text that

859
00:27:14,559 --> 00:27:16,240
decrypts under both these keys it could

860
00:27:16,240 --> 00:27:16,799
be

861
00:27:16,799 --> 00:27:19,279
more than two keys um it could even be

862
00:27:19,279 --> 00:27:20,559
the cipher text that my colleague

863
00:27:20,559 --> 00:27:22,159
crafted that has 131

864
00:27:22,159 --> 00:27:24,960
000 correct decryptions if the adversary

865
00:27:24,960 --> 00:27:25,279
sent

866
00:27:25,279 --> 00:27:26,880
a ciphertext like this they'd be able to

867
00:27:26,880 --> 00:27:29,600
check more than 131 000 password guesses

868
00:27:29,600 --> 00:27:32,240
with a single ciphertext

869
00:27:32,240 --> 00:27:34,000
in fact if there are no restrictions on

870
00:27:34,000 --> 00:27:35,520
the length of the cipher text the

871
00:27:35,520 --> 00:27:36,640
adversary can actually get an

872
00:27:36,640 --> 00:27:38,399
exponential improvement in the number of

873
00:27:38,399 --> 00:27:40,480
guesses required for key recovery by

874
00:27:40,480 --> 00:27:41,919
using a partitioning oracle

875
00:27:41,919 --> 00:27:44,640
by using binary search for example if

876
00:27:44,640 --> 00:27:46,480
there are a million possible passwords

877
00:27:46,480 --> 00:27:48,080
that could be the receiver's key over

878
00:27:48,080 --> 00:27:48,640
here

879
00:27:48,640 --> 00:27:50,559
a naive brute force attack needs to send

880
00:27:50,559 --> 00:27:52,320
a million ciphertext to guess the key in

881
00:27:52,320 --> 00:27:53,200
the worst case

882
00:27:53,200 --> 00:27:55,120
but a partitioning oracle only needs to

883
00:27:55,120 --> 00:27:56,799
send 20 ciphertexts or

884
00:27:56,799 --> 00:27:59,360
the log base 2 of 1 million passwords by

885
00:27:59,360 --> 00:28:03,760
using binary search

886
00:28:03,760 --> 00:28:06,000
so in some forthcoming work my authors

887
00:28:06,000 --> 00:28:07,520
my co-authors and i demonstrated

888
00:28:07,520 --> 00:28:09,440
concrete partitioning oracle attacks on

889
00:28:09,440 --> 00:28:11,200
the shadow sox protocol for practicing

890
00:28:11,200 --> 00:28:12,640
udp connections

891
00:28:12,640 --> 00:28:14,960
and also on incorrect prototype

892
00:28:14,960 --> 00:28:17,200
implementations of the opaque protocol

893
00:28:17,200 --> 00:28:19,520
which is a standards track protocol for

894
00:28:19,520 --> 00:28:22,000
password authenticated key exchange

895
00:28:22,000 --> 00:28:25,279
we also found latent password or latent

896
00:28:25,279 --> 00:28:26,880
partitioning oracle vulnerabilities

897
00:28:26,880 --> 00:28:29,279
elsewhere

898
00:28:29,279 --> 00:28:31,039
so finally i'd like to end on some

899
00:28:31,039 --> 00:28:32,559
optimism i've spent a lot of time

900
00:28:32,559 --> 00:28:34,720
talking about attacks and these attacks

901
00:28:34,720 --> 00:28:35,919
seem quite scary but

902
00:28:35,919 --> 00:28:38,000
uh i'll just briefly describe how to

903
00:28:38,000 --> 00:28:39,360
prevent them so we do

904
00:28:39,360 --> 00:28:41,120
know of committing authenticated

905
00:28:41,120 --> 00:28:42,480
encryption schemes and

906
00:28:42,480 --> 00:28:44,240
they're not that hard to build in theory

907
00:28:44,240 --> 00:28:46,000
for example counter mode

908
00:28:46,000 --> 00:28:49,120
than hmac if done correctly uh

909
00:28:49,120 --> 00:28:50,559
provides this committing security

910
00:28:50,559 --> 00:28:52,559
guarantee that we need

911
00:28:52,559 --> 00:28:55,039
unfortunately um committing ae schemes

912
00:28:55,039 --> 00:28:56,640
can can be hard to use because

913
00:28:56,640 --> 00:28:58,080
there aren't really standardized

914
00:28:58,080 --> 00:28:59,919
committing ae schemes and

915
00:28:59,919 --> 00:29:02,080
and schemes that have this security

916
00:29:02,080 --> 00:29:03,760
guarantee aren't widely available in

917
00:29:03,760 --> 00:29:06,000
photography libraries that offer ae

918
00:29:06,000 --> 00:29:07,039
interfaces

919
00:29:07,039 --> 00:29:08,559
though they can be built using the

920
00:29:08,559 --> 00:29:10,840
primitives from common libraries like

921
00:29:10,840 --> 00:29:12,320
openssl

922
00:29:12,320 --> 00:29:14,399
a committing ae can also be less

923
00:29:14,399 --> 00:29:16,159
efficient than non-committing ae because

924
00:29:16,159 --> 00:29:17,360
of the

925
00:29:17,360 --> 00:29:19,600
for technical reasons committing

926
00:29:19,600 --> 00:29:21,279
achieving this committing guarantee

927
00:29:21,279 --> 00:29:22,480
necessitates the use of

928
00:29:22,480 --> 00:29:24,159
collision-resistant hash functions which

929
00:29:24,159 --> 00:29:25,360
can be slower than

930
00:29:25,360 --> 00:29:28,559
fast polynomial max um

931
00:29:28,559 --> 00:29:31,760
finally uh let me just conclude this

932
00:29:31,760 --> 00:29:33,919
this this section on preventing these

933
00:29:33,919 --> 00:29:35,600
attacks by saying that

934
00:29:35,600 --> 00:29:38,799
you don't need committing ae unless

935
00:29:38,799 --> 00:29:40,399
attacker-controlled keys are part of

936
00:29:40,399 --> 00:29:41,919
your threat model so

937
00:29:41,919 --> 00:29:44,000
i don't want anybody to rush home after

938
00:29:44,000 --> 00:29:45,279
after seeing this talk and

939
00:29:45,279 --> 00:29:46,960
immediately change your tls cipher

940
00:29:46,960 --> 00:29:49,440
suites to remove these fast ae schemes

941
00:29:49,440 --> 00:29:51,919
like gcm or chat 20 poly 1305

942
00:29:51,919 --> 00:29:54,960
they are perfectly safe for use when

943
00:29:54,960 --> 00:29:57,440
keys are hidden and random enough

944
00:29:57,440 --> 00:29:59,760
they simply need to be used with care or

945
00:29:59,760 --> 00:30:01,039
not used at all in settings where

946
00:30:01,039 --> 00:30:04,480
attacker-controlled keys are a problem

947
00:30:04,480 --> 00:30:06,480
so i'd like to end by thanking all my

948
00:30:06,480 --> 00:30:08,159
co-authors on on these papers

949
00:30:08,159 --> 00:30:10,240
and also by thanking hugo crotchik who

950
00:30:10,240 --> 00:30:12,000
helped us understand the opaque protocol

951
00:30:12,000 --> 00:30:13,279
and develop an early version of the

952
00:30:13,279 --> 00:30:15,120
partitioning oracle attack

953
00:30:15,120 --> 00:30:16,960
and catriol cone gordon for making the

954
00:30:16,960 --> 00:30:18,399
observation about multi-receiver

955
00:30:18,399 --> 00:30:19,120
encryption

956
00:30:19,120 --> 00:30:21,200
that i that i discussed in a previous

957
00:30:21,200 --> 00:30:22,799
slide

958
00:30:22,799 --> 00:30:24,159
i'd also like to thank the black hat

959
00:30:24,159 --> 00:30:25,919
organizers for inviting me to speak

960
00:30:25,919 --> 00:30:27,440
and i'd like to thank you for listening

961
00:30:27,440 --> 00:30:31,200
and take any questions

