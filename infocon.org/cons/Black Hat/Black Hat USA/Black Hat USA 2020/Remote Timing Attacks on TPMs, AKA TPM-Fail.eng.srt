1
00:00:04,120 --> 00:00:14,550
[Music]

2
00:00:15,040 --> 00:00:17,199
hi everyone thanks for attending my talk

3
00:00:17,199 --> 00:00:17,600
uh

4
00:00:17,600 --> 00:00:19,840
today i'm going to talk about tpm field

5
00:00:19,840 --> 00:00:22,000
which is related to some vulnerabilities

6
00:00:22,000 --> 00:00:22,560
on

7
00:00:22,560 --> 00:00:25,039
uh trusted platform modules that can

8
00:00:25,039 --> 00:00:27,119
actually be exploited to the

9
00:00:27,119 --> 00:00:29,920
cryptographic keys from these secure

10
00:00:29,920 --> 00:00:31,279
platforms

11
00:00:31,279 --> 00:00:33,440
my name is daniel morimi i'm a security

12
00:00:33,440 --> 00:00:34,719
researcher

13
00:00:34,719 --> 00:00:36,960
and i've been working as a phd student

14
00:00:36,960 --> 00:00:39,520
on a few topics like microarchitectural

15
00:00:39,520 --> 00:00:41,520
attacks side channels and applying them

16
00:00:41,520 --> 00:00:42,719
to break

17
00:00:42,719 --> 00:00:46,000
crypto implementations and intellectuals

18
00:00:46,000 --> 00:00:48,239
and and you can reach reach out to me on

19
00:00:48,239 --> 00:00:49,360
my twitter or

20
00:00:49,360 --> 00:00:52,640
dark information on my website as well

21
00:00:52,640 --> 00:00:55,199
before i start my talk i would like to

22
00:00:55,199 --> 00:00:56,320
also thank

23
00:00:56,320 --> 00:00:59,359
my collaborators in some of these works

24
00:00:59,359 --> 00:01:00,160
like

25
00:01:00,160 --> 00:01:03,039
my advisors burke sooner nadia henninger

26
00:01:03,039 --> 00:01:04,559
thomas eisenberg and

27
00:01:04,559 --> 00:01:08,159
john vishelman before we

28
00:01:08,159 --> 00:01:12,000
uh dive into the topic of this uh

29
00:01:12,000 --> 00:01:14,240
this presentation which is related to

30
00:01:14,240 --> 00:01:16,159
site channel crypto analysis

31
00:01:16,159 --> 00:01:19,200
uh we we basically motivate on the fact

32
00:01:19,200 --> 00:01:20,479
that on

33
00:01:20,479 --> 00:01:22,720
traditional crypto analysis an attacker

34
00:01:22,720 --> 00:01:23,520
try to

35
00:01:23,520 --> 00:01:25,840
look at a crypto system at the input and

36
00:01:25,840 --> 00:01:27,840
output of this crypto system and try to

37
00:01:27,840 --> 00:01:28,799
find some

38
00:01:28,799 --> 00:01:30,720
flaws that can be used to leak the

39
00:01:30,720 --> 00:01:31,840
crypto key

40
00:01:31,840 --> 00:01:35,119
uh by just finding some design flow and

41
00:01:35,119 --> 00:01:37,439
things like that a good example of this

42
00:01:37,439 --> 00:01:39,680
happened 10 years ago

43
00:01:39,680 --> 00:01:42,479
on playstation 3 that they were using

44
00:01:42,479 --> 00:01:45,280
ucdsa nuts in the proper way

45
00:01:45,280 --> 00:01:48,240
and what happened then it was that so in

46
00:01:48,240 --> 00:01:50,320
cdsa we have like this

47
00:01:50,320 --> 00:01:54,320
fancy equations here that we can compute

48
00:01:54,320 --> 00:01:56,079
a signature pair and here in these

49
00:01:56,079 --> 00:01:58,079
equations there is a nonce that is a

50
00:01:58,079 --> 00:02:00,079
secret value that need to be generated

51
00:02:00,079 --> 00:02:02,880
for each signatures uniquely and

52
00:02:02,880 --> 00:02:04,799
randomly and there is a private key here

53
00:02:04,799 --> 00:02:05,439
that

54
00:02:05,439 --> 00:02:08,080
that is the private key for for that

55
00:02:08,080 --> 00:02:08,878
message

56
00:02:08,878 --> 00:02:11,520
and what happened back then is that the

57
00:02:11,520 --> 00:02:12,800
designers of

58
00:02:12,800 --> 00:02:15,280
playstation 3 they basically used the

59
00:02:15,280 --> 00:02:17,360
same nouns for all the messages and this

60
00:02:17,360 --> 00:02:18,160
equation

61
00:02:18,160 --> 00:02:19,840
turned to something like this and when

62
00:02:19,840 --> 00:02:22,080
you do that the problem is that if you

63
00:02:22,080 --> 00:02:22,720
just

64
00:02:22,720 --> 00:02:24,640
generate two messages and you subtract

65
00:02:24,640 --> 00:02:25,760
them from each other

66
00:02:25,760 --> 00:02:27,520
you get a much simpler equation with

67
00:02:27,520 --> 00:02:29,760
just one unknown variable and you can

68
00:02:29,760 --> 00:02:30,560
just

69
00:02:30,560 --> 00:02:33,200
calculate the private key from this so

70
00:02:33,200 --> 00:02:35,360
this is a huge design issue and

71
00:02:35,360 --> 00:02:37,280
that's what uh traditional crypto

72
00:02:37,280 --> 00:02:39,680
analysis is about that people try to

73
00:02:39,680 --> 00:02:41,920
find design issue in the actual

74
00:02:41,920 --> 00:02:44,400
algorithm or the actual design of

75
00:02:44,400 --> 00:02:47,040
uh some crypto system to break it but

76
00:02:47,040 --> 00:02:48,959
inside channel crypto analysis we are

77
00:02:48,959 --> 00:02:50,720
not playing the fair

78
00:02:50,720 --> 00:02:53,599
the same fair game we actually have more

79
00:02:53,599 --> 00:02:55,280
information about the

80
00:02:55,280 --> 00:02:58,400
the system and the idea is that during

81
00:02:58,400 --> 00:03:00,800
the execution of a crypto system we can

82
00:03:00,800 --> 00:03:03,120
learn some signal uh something like

83
00:03:03,120 --> 00:03:04,480
timing channel or other

84
00:03:04,480 --> 00:03:07,200
things that can actually be used to

85
00:03:07,200 --> 00:03:09,440
perform key recovery in a more efficient

86
00:03:09,440 --> 00:03:10,959
way

87
00:03:10,959 --> 00:03:12,560
and there are lots of different type of

88
00:03:12,560 --> 00:03:14,560
side channels for example there is power

89
00:03:14,560 --> 00:03:15,040
attack

90
00:03:15,040 --> 00:03:17,360
electromagnetic attacks timing attacks

91
00:03:17,360 --> 00:03:18,239
cache attacks

92
00:03:18,239 --> 00:03:20,879
and these attacks they are generally

93
00:03:20,879 --> 00:03:22,319
they have a very complicated thread

94
00:03:22,319 --> 00:03:24,239
models because some of them can be

95
00:03:24,239 --> 00:03:26,799
conducted not phys on a physical access

96
00:03:26,799 --> 00:03:28,720
device scenario or some of them can only

97
00:03:28,720 --> 00:03:29,440
be

98
00:03:29,440 --> 00:03:31,280
done in a local attack scenario like in

99
00:03:31,280 --> 00:03:33,280
the cloud and some of them can also be

100
00:03:33,280 --> 00:03:34,560
done in remotely and this

101
00:03:34,560 --> 00:03:37,040
actually makes it really complicated for

102
00:03:37,040 --> 00:03:39,120
crypto developers to implement

103
00:03:39,120 --> 00:03:41,280
an algorithm to be secure against all

104
00:03:41,280 --> 00:03:43,840
these different scenarios

105
00:03:43,840 --> 00:03:46,480
so you mentioned that today talk is

106
00:03:46,480 --> 00:03:46,959
about

107
00:03:46,959 --> 00:03:50,480
uh trusted platform module uh so just

108
00:03:50,480 --> 00:03:52,480
basic what is trusted platform module

109
00:03:52,480 --> 00:03:54,239
the basic idea is that

110
00:03:54,239 --> 00:03:56,560
we know that we cannot really rely on

111
00:03:56,560 --> 00:03:59,519
operating system or the hypervisor

112
00:03:59,519 --> 00:04:01,840
for roots of trust and security because

113
00:04:01,840 --> 00:04:03,200
there are all sorts of attacks that

114
00:04:03,200 --> 00:04:05,519
compromise the system software like

115
00:04:05,519 --> 00:04:07,439
there is uh there is root kits there are

116
00:04:07,439 --> 00:04:08,720
different things and

117
00:04:08,720 --> 00:04:10,640
we know that even sometimes the cpu

118
00:04:10,640 --> 00:04:12,480
cannot be trusted as we have seen by

119
00:04:12,480 --> 00:04:14,560
attacks like meltdown and spectra

120
00:04:14,560 --> 00:04:16,639
so the idea is we need something like

121
00:04:16,639 --> 00:04:18,320
hardware based off root of truss

122
00:04:18,320 --> 00:04:21,120
and we have designed things like trusted

123
00:04:21,120 --> 00:04:22,639
platform module for instance

124
00:04:22,639 --> 00:04:24,560
trusted platform module is a secure

125
00:04:24,560 --> 00:04:26,479
element that is a standard and

126
00:04:26,479 --> 00:04:28,320
it has to support a standard set of

127
00:04:28,320 --> 00:04:29,600
functionality

128
00:04:29,600 --> 00:04:32,160
and the other promise of this transfer

129
00:04:32,160 --> 00:04:33,759
platform module is that

130
00:04:33,759 --> 00:04:37,759
it basically uh defines a security chip

131
00:04:37,759 --> 00:04:40,240
that need to be secure against even

132
00:04:40,240 --> 00:04:42,320
some of the physical attacks like uh

133
00:04:42,320 --> 00:04:43,440
like tampering

134
00:04:43,440 --> 00:04:46,160
and side channel attacks and uh this uh

135
00:04:46,160 --> 00:04:47,680
tpm devices uh

136
00:04:47,680 --> 00:04:49,360
basically when you have one of these you

137
00:04:49,360 --> 00:04:52,160
can simply put all your crypto keys or

138
00:04:52,160 --> 00:04:54,000
important as an insight is

139
00:04:54,000 --> 00:04:57,280
inside this kind of a safe and if the os

140
00:04:57,280 --> 00:04:59,360
or the cloud provider or any of the

141
00:04:59,360 --> 00:05:00,639
software level

142
00:05:00,639 --> 00:05:02,639
or even anything that runs basically on

143
00:05:02,639 --> 00:05:04,479
your cpu get compromised

144
00:05:04,479 --> 00:05:07,199
they cannot subvert the entire control

145
00:05:07,199 --> 00:05:08,720
and they cannot access to

146
00:05:08,720 --> 00:05:11,840
all of the information

147
00:05:11,919 --> 00:05:15,280
so what is inside this security chip or

148
00:05:15,280 --> 00:05:16,800
trusted platform module

149
00:05:16,800 --> 00:05:18,160
there is a specific set of

150
00:05:18,160 --> 00:05:20,240
functionalities that is defined by

151
00:05:20,240 --> 00:05:23,120
trusted computing group and organization

152
00:05:23,120 --> 00:05:25,360
and basically based on this

153
00:05:25,360 --> 00:05:27,759
definition this trusted platform module

154
00:05:27,759 --> 00:05:29,600
has to support some

155
00:05:29,600 --> 00:05:31,680
secure storage and also some

156
00:05:31,680 --> 00:05:33,280
cryptographic functionalities like

157
00:05:33,280 --> 00:05:34,960
digital signatures and

158
00:05:34,960 --> 00:05:36,160
we're going to talk about digital

159
00:05:36,160 --> 00:05:38,320
signatures more in this talk and

160
00:05:38,320 --> 00:05:41,840
it's important but in general

161
00:05:41,840 --> 00:05:45,120
these digital signatures uh can help us

162
00:05:45,120 --> 00:05:47,199
to execute signing operations more

163
00:05:47,199 --> 00:05:49,199
securely and nowadays

164
00:05:49,199 --> 00:05:50,800
there are lots of software stacks like

165
00:05:50,800 --> 00:05:53,120
the linux software stack or open ssl

166
00:05:53,120 --> 00:05:53,680
that

167
00:05:53,680 --> 00:05:56,400
they actually support using trusted

168
00:05:56,400 --> 00:05:58,720
platform module or tpms for

169
00:05:58,720 --> 00:06:00,560
performing signing operations whether

170
00:06:00,560 --> 00:06:02,720
it's rsa or ecdsa

171
00:06:02,720 --> 00:06:04,880
and another important aspect of these

172
00:06:04,880 --> 00:06:06,080
digital signatures

173
00:06:06,080 --> 00:06:08,400
is that you can actually use them to

174
00:06:08,400 --> 00:06:10,639
perform a remote attestation of

175
00:06:10,639 --> 00:06:13,520
hardware from like the other side of the

176
00:06:13,520 --> 00:06:14,960
internet you don't know if

177
00:06:14,960 --> 00:06:16,560
another part is running the correct

178
00:06:16,560 --> 00:06:18,319
firmware the correct hardware and you

179
00:06:18,319 --> 00:06:20,160
can use remote attestation to

180
00:06:20,160 --> 00:06:23,360
verify some of these promises

181
00:06:23,360 --> 00:06:26,080
since 2010 trusted platform module

182
00:06:26,080 --> 00:06:27,440
version 2

183
00:06:27,440 --> 00:06:29,600
now supports elliptic curve digital

184
00:06:29,600 --> 00:06:31,600
signatures and

185
00:06:31,600 --> 00:06:34,639
schemes like ecdsa or ecdaa and

186
00:06:34,639 --> 00:06:37,199
these schemes use elliptic curves that

187
00:06:37,199 --> 00:06:38,479
are actually more efficient

188
00:06:38,479 --> 00:06:40,960
and uh are actually more popular

189
00:06:40,960 --> 00:06:42,240
nowadays

190
00:06:42,240 --> 00:06:44,560
so one thing we mentioned is that okay

191
00:06:44,560 --> 00:06:45,440
these uh

192
00:06:45,440 --> 00:06:48,080
trusted platform modules they have some

193
00:06:48,080 --> 00:06:50,000
standard and they need to support a set

194
00:06:50,000 --> 00:06:51,520
of functionalities

195
00:06:51,520 --> 00:06:54,240
but one thing that we are interested in

196
00:06:54,240 --> 00:06:55,440
to know also

197
00:06:55,440 --> 00:06:58,400
if these devices actually support any if

198
00:06:58,400 --> 00:07:00,080
this is standard supports any

199
00:07:00,080 --> 00:07:01,039
implementation

200
00:07:01,039 --> 00:07:03,759
standard like how do we know if these uh

201
00:07:03,759 --> 00:07:05,280
hardware devices the

202
00:07:05,280 --> 00:07:07,759
security chips are actually implemented

203
00:07:07,759 --> 00:07:08,720
properly

204
00:07:08,720 --> 00:07:12,720
so tcg expect designers and developers

205
00:07:12,720 --> 00:07:14,319
of these products to

206
00:07:14,319 --> 00:07:16,720
maintain a security assurance according

207
00:07:16,720 --> 00:07:18,319
to common criteria

208
00:07:18,319 --> 00:07:20,319
and the level of assurance they expect

209
00:07:20,319 --> 00:07:21,680
is a l4 plus

210
00:07:21,680 --> 00:07:24,560
and if you go on the tcg website you can

211
00:07:24,560 --> 00:07:26,319
also find a list of devices that

212
00:07:26,319 --> 00:07:28,560
actually have proper certificates

213
00:07:28,560 --> 00:07:31,440
and for instance in this picture we see

214
00:07:31,440 --> 00:07:34,000
some devices from sd microelectronics or

215
00:07:34,000 --> 00:07:35,199
new photon or

216
00:07:35,199 --> 00:07:38,560
infinii and that that are listed here

217
00:07:38,560 --> 00:07:41,599
and uh for example one one thing

218
00:07:41,599 --> 00:07:44,800
here we looked at is this is like a

219
00:07:44,800 --> 00:07:47,360
picture of st microelectronics

220
00:07:47,360 --> 00:07:50,080
that i actually took from the laptop

221
00:07:50,080 --> 00:07:51,440
that i'm using today for this

222
00:07:51,440 --> 00:07:52,720
presentation

223
00:07:52,720 --> 00:07:55,120
and we looked at the data sheet of this

224
00:07:55,120 --> 00:07:57,520
uh this chip and it shows that okay this

225
00:07:57,520 --> 00:08:00,080
this is this supports resistance against

226
00:08:00,080 --> 00:08:01,759
sidechain attacks and we also looked at

227
00:08:01,759 --> 00:08:03,199
the evaluation and

228
00:08:03,199 --> 00:08:05,280
uh here is the link for the evaluation

229
00:08:05,280 --> 00:08:06,240
of this uh

230
00:08:06,240 --> 00:08:09,759
tpm chip and uh it's also like we made

231
00:08:09,759 --> 00:08:11,680
like we looked at through the

232
00:08:11,680 --> 00:08:14,160
different part of this evaluation it

233
00:08:14,160 --> 00:08:15,919
says okay this is the version that is

234
00:08:15,919 --> 00:08:18,240
evaluated and this is the date that the

235
00:08:18,240 --> 00:08:20,879
evaluation has been conducted and there

236
00:08:20,879 --> 00:08:22,479
are some interesting information like

237
00:08:22,479 --> 00:08:23,840
for instance

238
00:08:23,840 --> 00:08:26,479
both the rsa and ecc keys are actually

239
00:08:26,479 --> 00:08:27,280
used for

240
00:08:27,280 --> 00:08:29,759
endorsements of this device which is the

241
00:08:29,759 --> 00:08:30,800
root

242
00:08:30,800 --> 00:08:32,479
security key that is used for these

243
00:08:32,479 --> 00:08:34,640
devices and there is also

244
00:08:34,640 --> 00:08:36,559
other things that says for instance this

245
00:08:36,559 --> 00:08:37,919
device need to

246
00:08:37,919 --> 00:08:39,760
maintain security of all the assets

247
00:08:39,760 --> 00:08:41,839
inside it and the list of assets is

248
00:08:41,839 --> 00:08:43,360
defined by the

249
00:08:43,360 --> 00:08:46,480
protection profile the user key or other

250
00:08:46,480 --> 00:08:47,920
other keys that are stored in the

251
00:08:47,920 --> 00:08:50,320
storage they all need to be protected

252
00:08:50,320 --> 00:08:53,200
for the implementation of these devices

253
00:08:53,200 --> 00:08:53,760
and

254
00:08:53,760 --> 00:08:57,440
more explicitly it also says that this

255
00:08:57,440 --> 00:08:59,440
evaluation supports side chain attacks

256
00:08:59,440 --> 00:09:00,640
and timings attacks

257
00:09:00,640 --> 00:09:03,680
and attacks like spa and dpa and there

258
00:09:03,680 --> 00:09:04,560
is also

259
00:09:04,560 --> 00:09:07,680
other information like uh

260
00:09:07,680 --> 00:09:09,440
yeah the standard that it need to

261
00:09:09,440 --> 00:09:11,040
support physical manipulation and

262
00:09:11,040 --> 00:09:12,480
physical probing

263
00:09:12,480 --> 00:09:15,519
is covered so you see that basically

264
00:09:15,519 --> 00:09:16,320
this says that

265
00:09:16,320 --> 00:09:19,519
okay this uh device actually supports

266
00:09:19,519 --> 00:09:21,040
mitigation against this

267
00:09:21,040 --> 00:09:23,519
uh sidechain attack so now the question

268
00:09:23,519 --> 00:09:25,200
is okay should we just rely on these

269
00:09:25,200 --> 00:09:27,120
certificates and say okay

270
00:09:27,120 --> 00:09:29,680
this is done this is a secure device or

271
00:09:29,680 --> 00:09:30,640
not

272
00:09:30,640 --> 00:09:32,560
so the first thing we wanted to

273
00:09:32,560 --> 00:09:33,680
basically test

274
00:09:33,680 --> 00:09:36,959
is the simplest test that's uh also very

275
00:09:36,959 --> 00:09:38,800
practical is a timing test because if

276
00:09:38,800 --> 00:09:39,440
you can

277
00:09:39,440 --> 00:09:41,440
recover any key from these devices using

278
00:09:41,440 --> 00:09:42,959
a timing attack it's actually very

279
00:09:42,959 --> 00:09:44,160
valuable and

280
00:09:44,160 --> 00:09:46,160
uh it's a attack that is not intrusive

281
00:09:46,160 --> 00:09:48,080
it can even may be done

282
00:09:48,080 --> 00:09:52,320
remotely so to build a testing

283
00:09:52,320 --> 00:09:54,560
tool and measure the timing of these tpm

284
00:09:54,560 --> 00:09:56,240
devices what we did is that

285
00:09:56,240 --> 00:09:59,519
we looked at the cpu cycle count because

286
00:09:59,519 --> 00:10:01,680
we realized that most of these tpm

287
00:10:01,680 --> 00:10:04,560
devices are implemented on a very low

288
00:10:04,560 --> 00:10:05,120
cost

289
00:10:05,120 --> 00:10:08,240
uh micro processor that may run like 100

290
00:10:08,240 --> 00:10:08,560
times

291
00:10:08,560 --> 00:10:12,160
slower than a cpu so using cpu cycle

292
00:10:12,160 --> 00:10:13,920
count is a good good way to measure

293
00:10:13,920 --> 00:10:17,120
time for these devices and without any

294
00:10:17,120 --> 00:10:19,920
special equipment or anything anything

295
00:10:19,920 --> 00:10:20,959
so

296
00:10:20,959 --> 00:10:23,200
one of these devices that we we looked

297
00:10:23,200 --> 00:10:24,959
at initially was called

298
00:10:24,959 --> 00:10:27,440
intel platform trust technology or intel

299
00:10:27,440 --> 00:10:29,680
ftpm this intel ftpm

300
00:10:29,680 --> 00:10:31,440
the idea is that they have implemented

301
00:10:31,440 --> 00:10:33,839
the tpm features as

302
00:10:33,839 --> 00:10:36,880
as it is defined by tcg as a module that

303
00:10:36,880 --> 00:10:37,839
runs on

304
00:10:37,839 --> 00:10:41,120
the csme or management engine

305
00:10:41,120 --> 00:10:43,920
inside the same die as the cpu and this

306
00:10:43,920 --> 00:10:46,000
management engine also runs its own

307
00:10:46,000 --> 00:10:47,920
microprocessor so it's separate from the

308
00:10:47,920 --> 00:10:50,320
cpu so even if the cpu gets compromised

309
00:10:50,320 --> 00:10:51,760
you cannot really

310
00:10:51,760 --> 00:10:53,120
you are not supposed to have access to

311
00:10:53,120 --> 00:10:54,640
that microprocessor or even though if

312
00:10:54,640 --> 00:10:56,320
they are on the same die

313
00:10:56,320 --> 00:10:58,480
and this has been around now for a long

314
00:10:58,480 --> 00:10:59,600
time since haspel

315
00:10:59,600 --> 00:11:02,160
and it's very popular because uh most

316
00:11:02,160 --> 00:11:03,600
computers and laptops

317
00:11:03,600 --> 00:11:06,000
nowadays they can just rely on and these

318
00:11:06,000 --> 00:11:07,600
if they have an intel cpu and they don't

319
00:11:07,600 --> 00:11:09,120
need to attach a separate

320
00:11:09,120 --> 00:11:11,120
uh trusted platform modular dedicated

321
00:11:11,120 --> 00:11:12,320
trusted platform azure to your

322
00:11:12,320 --> 00:11:13,440
motherboard

323
00:11:13,440 --> 00:11:16,320
we did an initial initial timing test

324
00:11:16,320 --> 00:11:17,600
and we realized that okay

325
00:11:17,600 --> 00:11:22,399
if we run ecdsa on this tpm

326
00:11:22,399 --> 00:11:24,800
firmware tpm we see that for different

327
00:11:24,800 --> 00:11:27,440
executions of the same

328
00:11:27,440 --> 00:11:30,160
ecdsa function with the same private key

329
00:11:30,160 --> 00:11:32,000
the timing operations are actually

330
00:11:32,000 --> 00:11:32,720
different

331
00:11:32,720 --> 00:11:35,040
for different execution and here we see

332
00:11:35,040 --> 00:11:36,399
a histogram of

333
00:11:36,399 --> 00:11:39,760
a different histogram of a number of

334
00:11:39,760 --> 00:11:43,120
signature operations and their timing so

335
00:11:43,120 --> 00:11:46,720
this got kind of our curiosity like okay

336
00:11:46,720 --> 00:11:48,800
so we see as timing behavior here this

337
00:11:48,800 --> 00:11:50,079
is interesting

338
00:11:50,079 --> 00:11:52,320
can we do better so what we did is that

339
00:11:52,320 --> 00:11:54,639
we basically implemented

340
00:11:54,639 --> 00:11:56,480
a tool to do this timing measurement

341
00:11:56,480 --> 00:11:58,720
more precisely our tool basically

342
00:11:58,720 --> 00:12:01,040
uh override some of the functionality of

343
00:12:01,040 --> 00:12:03,040
the linux

344
00:12:03,040 --> 00:12:06,079
kernel stack for tpm and this uh

345
00:12:06,079 --> 00:12:08,160
this functionality when is override then

346
00:12:08,160 --> 00:12:09,920
with our tool we can actually measure

347
00:12:09,920 --> 00:12:10,880
the time

348
00:12:10,880 --> 00:12:13,040
of the tpm operation as close as

349
00:12:13,040 --> 00:12:14,880
possible to the interface of the tpm

350
00:12:14,880 --> 00:12:15,920
device

351
00:12:15,920 --> 00:12:18,160
and by doing that we can get a very high

352
00:12:18,160 --> 00:12:20,880
resolution timing of what's actually

353
00:12:20,880 --> 00:12:22,959
going on or if there is any anything

354
00:12:22,959 --> 00:12:24,639
interesting and when we did that we saw

355
00:12:24,639 --> 00:12:25,519
that okay this

356
00:12:25,519 --> 00:12:27,279
gaussian distribution actually become

357
00:12:27,279 --> 00:12:28,720
even more more

358
00:12:28,720 --> 00:12:30,480
separated and we see that there are two

359
00:12:30,480 --> 00:12:32,320
different brackets here in the

360
00:12:32,320 --> 00:12:34,240
in this uh timing operation that is

361
00:12:34,240 --> 00:12:37,680
measured by with a root access

362
00:12:37,680 --> 00:12:40,959
so we use the same key to generate all

363
00:12:40,959 --> 00:12:42,399
the signatures and

364
00:12:42,399 --> 00:12:44,560
this actually told us that okay if we

365
00:12:44,560 --> 00:12:45,920
use the same key to generate all these

366
00:12:45,920 --> 00:12:46,880
signatures

367
00:12:46,880 --> 00:12:48,639
the only thing that is changing is the

368
00:12:48,639 --> 00:12:50,320
nonce and that could be

369
00:12:50,320 --> 00:12:52,320
the reason that we see this timing

370
00:12:52,320 --> 00:12:54,160
behavior so we looked at the nonsense

371
00:12:54,160 --> 00:12:56,000
for some of the signatures we generated

372
00:12:56,000 --> 00:12:57,120
and we realized that

373
00:12:57,120 --> 00:12:58,959
there is actually a leakage behavior

374
00:12:58,959 --> 00:13:01,120
that is directly correlated with the

375
00:13:01,120 --> 00:13:04,320
bit length of the nuts so

376
00:13:04,320 --> 00:13:07,360
for example if you execute uh this uh a

377
00:13:07,360 --> 00:13:08,959
signature operation and this is the

378
00:13:08,959 --> 00:13:10,160
nonce that is used

379
00:13:10,160 --> 00:13:12,959
we see some some timing like this and if

380
00:13:12,959 --> 00:13:15,040
there is like four bit window of

381
00:13:15,040 --> 00:13:17,120
leading zero bit at the beginning of it

382
00:13:17,120 --> 00:13:19,120
and once we see that the timing is much

383
00:13:19,120 --> 00:13:20,000
faster and so

384
00:13:20,000 --> 00:13:22,560
and so we see that for every additional

385
00:13:22,560 --> 00:13:23,920
four bit window of

386
00:13:23,920 --> 00:13:26,240
leading zero bits at the nonce the

387
00:13:26,240 --> 00:13:27,760
signature is generated

388
00:13:27,760 --> 00:13:30,399
much faster and for instance if we have

389
00:13:30,399 --> 00:13:32,240
like a 12 leading zero bit in a

390
00:13:32,240 --> 00:13:33,040
signature

391
00:13:33,040 --> 00:13:35,839
the signature may be slowed maybe faster

392
00:13:35,839 --> 00:13:38,480
like for more than three milliseconds

393
00:13:38,480 --> 00:13:40,800
which is a very high timing behavior

394
00:13:40,800 --> 00:13:41,839
that maybe even

395
00:13:41,839 --> 00:13:45,680
be observable over a network

396
00:13:45,680 --> 00:13:49,040
and here i prepared basically a

397
00:13:49,040 --> 00:13:52,079
demo of how such a such an attack works

398
00:13:52,079 --> 00:13:53,199
that we can

399
00:13:53,199 --> 00:13:55,600
collect timing measurements first we use

400
00:13:55,600 --> 00:13:57,040
a script to generate

401
00:13:57,040 --> 00:14:00,720
open ssl generate a cd saq using open

402
00:14:00,720 --> 00:14:03,519
sshold and then we program the device

403
00:14:03,519 --> 00:14:05,440
with this key so this is script runs we

404
00:14:05,440 --> 00:14:06,959
program the device with a

405
00:14:06,959 --> 00:14:10,880
new new key for ecdsa operation

406
00:14:10,880 --> 00:14:13,920
and if you look at the key we see that

407
00:14:13,920 --> 00:14:15,040
okay

408
00:14:15,040 --> 00:14:18,240
we have generated a 256 bit

409
00:14:18,240 --> 00:14:21,519
ecdsa key and

410
00:14:21,519 --> 00:14:26,399
yeah and here is the key the private key

411
00:14:26,399 --> 00:14:29,279
starts with the hex value 92 and so on

412
00:14:29,279 --> 00:14:30,800
and then we have another script here

413
00:14:30,800 --> 00:14:32,880
that basically uses our tool to measure

414
00:14:32,880 --> 00:14:33,519
the time

415
00:14:33,519 --> 00:14:36,639
and also run a tpm signing operation so

416
00:14:36,639 --> 00:14:38,800
we use this tool basically to generate

417
00:14:38,800 --> 00:14:41,040
signatures and also measure the time of

418
00:14:41,040 --> 00:14:43,839
execution of that signature and when we

419
00:14:43,839 --> 00:14:45,680
run this tool we see that

420
00:14:45,680 --> 00:14:48,480
a new entry has been added that it has

421
00:14:48,480 --> 00:14:50,399
some signature pair and some timing

422
00:14:50,399 --> 00:14:51,440
values and

423
00:14:51,440 --> 00:14:53,360
if we keep running this script we see

424
00:14:53,360 --> 00:14:55,440
that okay another entry has been added

425
00:14:55,440 --> 00:14:58,000
so in our for our attack we basically

426
00:14:58,000 --> 00:14:58,480
run this

427
00:14:58,480 --> 00:15:01,040
script for a while and here we have also

428
00:15:01,040 --> 00:15:02,959
a live histogram of what's happening

429
00:15:02,959 --> 00:15:03,839
here that

430
00:15:03,839 --> 00:15:06,079
we see that uh as we generate these

431
00:15:06,079 --> 00:15:08,399
signatures some of these signatures

432
00:15:08,399 --> 00:15:10,800
are faster and this means that the bit

433
00:15:10,800 --> 00:15:12,399
length of the nonce was

434
00:15:12,399 --> 00:15:14,079
shorter for the signatures and this

435
00:15:14,079 --> 00:15:16,639
histogram as we see is populated with

436
00:15:16,639 --> 00:15:17,440
this

437
00:15:17,440 --> 00:15:21,120
bit length value and we see that

438
00:15:21,199 --> 00:15:23,519
some of the signatures are faster and

439
00:15:23,519 --> 00:15:24,959
for an attack we are generally

440
00:15:24,959 --> 00:15:26,720
interested for the signatures that are

441
00:15:26,720 --> 00:15:27,360
on the

442
00:15:27,360 --> 00:15:29,199
on the left brackets because we know

443
00:15:29,199 --> 00:15:39,990
that they have some bios in their nuts

444
00:15:39,990 --> 00:15:43,720
[Music]

445
00:15:52,480 --> 00:15:55,440
so this was a vulnerability basically we

446
00:15:55,440 --> 00:15:55,920
found an

447
00:15:55,920 --> 00:15:59,199
intel fdpm or intel ptt and

448
00:15:59,199 --> 00:16:01,120
even though this device has some

449
00:16:01,120 --> 00:16:02,959
security guarantees

450
00:16:02,959 --> 00:16:05,920
like the phipps certificate but it

451
00:16:05,920 --> 00:16:07,120
doesn't have any

452
00:16:07,120 --> 00:16:09,519
cc evaluation and it's not listed on

453
00:16:09,519 --> 00:16:11,040
trusted computing group

454
00:16:11,040 --> 00:16:13,279
website so we're very interested to also

455
00:16:13,279 --> 00:16:15,199
see if there are similar vulnerabilities

456
00:16:15,199 --> 00:16:17,120
in other tpm devices so

457
00:16:17,120 --> 00:16:21,279
we used our tool to do timing test of

458
00:16:21,279 --> 00:16:23,440
a bunch of computers that we had in the

459
00:16:23,440 --> 00:16:25,360
lab this computer some of them they just

460
00:16:25,360 --> 00:16:26,480
use the intel

461
00:16:26,480 --> 00:16:29,680
uh ftpm and when we ran this

462
00:16:29,680 --> 00:16:32,000
uh test on intel ftpm almost all of the

463
00:16:32,000 --> 00:16:33,360
devices that were

464
00:16:33,360 --> 00:16:35,279
using this intel ftpm are vulnerable to

465
00:16:35,279 --> 00:16:36,639
this timing behavior

466
00:16:36,639 --> 00:16:38,959
and then we also found some interesting

467
00:16:38,959 --> 00:16:39,839
thing and

468
00:16:39,839 --> 00:16:42,480
uh interesting other timing behaviors on

469
00:16:42,480 --> 00:16:43,440
other devices

470
00:16:43,440 --> 00:16:45,759
like on nuvotone and infineon but the

471
00:16:45,759 --> 00:16:47,600
only other interesting vulnerability we

472
00:16:47,600 --> 00:16:49,920
found was on st microelectronic tpm

473
00:16:49,920 --> 00:16:51,120
device that we also

474
00:16:51,120 --> 00:16:53,440
earlier showed that it's it's supposed

475
00:16:53,440 --> 00:16:55,279
to be resisting as this attack

476
00:16:55,279 --> 00:16:59,199
and here is basically the histogram we

477
00:16:59,199 --> 00:17:02,079
we drew for the for the timing behavior

478
00:17:02,079 --> 00:17:04,480
of sd microelectronic and we see that

479
00:17:04,480 --> 00:17:06,720
even though at the first glance it looks

480
00:17:06,720 --> 00:17:07,679
like a

481
00:17:07,679 --> 00:17:10,079
balanced gaussian distribution but that

482
00:17:10,079 --> 00:17:11,919
we have more samples on the left side

483
00:17:11,919 --> 00:17:12,160
and

484
00:17:12,160 --> 00:17:13,839
it actually gave us an idea that okay

485
00:17:13,839 --> 00:17:15,280
this may also have a

486
00:17:15,280 --> 00:17:18,079
timing behavior so we looked at the

487
00:17:18,079 --> 00:17:19,520
nonsense again and we

488
00:17:19,520 --> 00:17:21,599
realized that okay this is a very

489
00:17:21,599 --> 00:17:23,359
similar vulnerability

490
00:17:23,359 --> 00:17:25,919
to compared to the intel ftpm ecdsa

491
00:17:25,919 --> 00:17:26,720
operation

492
00:17:26,720 --> 00:17:28,400
but this time instead of for every

493
00:17:28,400 --> 00:17:30,400
additional four between the

494
00:17:30,400 --> 00:17:32,559
uh leading zero bits we see that for

495
00:17:32,559 --> 00:17:34,240
every additional

496
00:17:34,240 --> 00:17:36,559
leading zero bits for every one leading

497
00:17:36,559 --> 00:17:37,840
zero bits we see

498
00:17:37,840 --> 00:17:40,640
that the timing is is faster and uh we

499
00:17:40,640 --> 00:17:41,600
also looked at

500
00:17:41,600 --> 00:17:43,760
that okay there is a linear correlation

501
00:17:43,760 --> 00:17:45,039
between the beats length of slang

502
00:17:45,039 --> 00:17:46,160
afternoons and

503
00:17:46,160 --> 00:17:48,640
and the timing so this again gives us

504
00:17:48,640 --> 00:17:50,720
the similar leakage behavior

505
00:17:50,720 --> 00:17:54,160
so so far we have just talked about okay

506
00:17:54,160 --> 00:17:57,360
we have some vulnerabilities and this

507
00:17:57,360 --> 00:17:59,280
ecdsa operation of these devices and

508
00:17:59,280 --> 00:18:01,520
this vulnerability tells us

509
00:18:01,520 --> 00:18:04,799
some number of bits about the nons for

510
00:18:04,799 --> 00:18:08,080
ecdsa operation but this information by

511
00:18:08,080 --> 00:18:10,000
itself is not useful we need to use this

512
00:18:10,000 --> 00:18:12,000
information to recover something that is

513
00:18:12,000 --> 00:18:14,000
more valuable like the private key for a

514
00:18:14,000 --> 00:18:14,880
cdsa

515
00:18:14,880 --> 00:18:18,160
and for for this purpose we basically

516
00:18:18,160 --> 00:18:20,720
came up with a with a systematic attack

517
00:18:20,720 --> 00:18:22,960
and this systematic attack

518
00:18:22,960 --> 00:18:24,960
assuming that the tpm is programmed with

519
00:18:24,960 --> 00:18:26,640
a private key with an unknown private

520
00:18:26,640 --> 00:18:27,760
key

521
00:18:27,760 --> 00:18:29,840
we can basically what we do is that we

522
00:18:29,840 --> 00:18:31,679
collect a list of signatures

523
00:18:31,679 --> 00:18:33,919
uh using this tpm device and these

524
00:18:33,919 --> 00:18:35,280
signatures

525
00:18:35,280 --> 00:18:37,679
are collected with their timing and we

526
00:18:37,679 --> 00:18:39,679
use the timing basically to filter

527
00:18:39,679 --> 00:18:42,559
signatures to a group that has some bias

528
00:18:42,559 --> 00:18:44,559
some non-bias for instance we know that

529
00:18:44,559 --> 00:18:46,640
all the signatures that are generated

530
00:18:46,640 --> 00:18:49,600
in less than x amount of cycle are

531
00:18:49,600 --> 00:18:50,640
supposed to be

532
00:18:50,640 --> 00:18:53,440
eight bits uh short for instance and

533
00:18:53,440 --> 00:18:56,160
when we have those biases we basically

534
00:18:56,160 --> 00:18:58,400
can use a technical that is based attack

535
00:18:58,400 --> 00:18:59,919
and using this lattice based attack we

536
00:18:59,919 --> 00:19:00,400
can

537
00:19:00,400 --> 00:19:03,440
recover the private key so i'm not going

538
00:19:03,440 --> 00:19:05,600
to get into the detail of how lattices

539
00:19:05,600 --> 00:19:06,880
work there are lots of

540
00:19:06,880 --> 00:19:09,520
mathematics behind behind that and it's

541
00:19:09,520 --> 00:19:10,720
beyond

542
00:19:10,720 --> 00:19:14,000
the scope of this talk but the idea is

543
00:19:14,000 --> 00:19:14,559
that

544
00:19:14,559 --> 00:19:17,039
we can rewrite that this cdsa equation

545
00:19:17,039 --> 00:19:18,400
we showed earlier

546
00:19:18,400 --> 00:19:20,400
as a simpler equation that has some

547
00:19:20,400 --> 00:19:22,960
known values and some unknown values

548
00:19:22,960 --> 00:19:24,799
and then when we replace the known

549
00:19:24,799 --> 00:19:26,799
values with simple

550
00:19:26,799 --> 00:19:28,799
like variables we have just this

551
00:19:28,799 --> 00:19:30,480
equation that has two

552
00:19:30,480 --> 00:19:32,960
unknowns and for these two unknowns we

553
00:19:32,960 --> 00:19:34,720
cannot simply calculate

554
00:19:34,720 --> 00:19:36,960
any of them because we we need at least

555
00:19:36,960 --> 00:19:38,799
one of them to calculate the other

556
00:19:38,799 --> 00:19:41,200
but the reality is we have some

557
00:19:41,200 --> 00:19:43,280
information about the value of the nonce

558
00:19:43,280 --> 00:19:44,000
or ki

559
00:19:44,000 --> 00:19:47,039
and this value this information tells us

560
00:19:47,039 --> 00:19:47,760
the ki

561
00:19:47,760 --> 00:19:50,080
cannot be bigger than some amount

562
00:19:50,080 --> 00:19:52,240
because we know the bit length of ki

563
00:19:52,240 --> 00:19:55,280
for some of these signatures and these

564
00:19:55,280 --> 00:19:58,960
uh basically resemble a very well known

565
00:19:58,960 --> 00:20:01,600
uh well-known problem of hidden number

566
00:20:01,600 --> 00:20:02,960
problem that was

567
00:20:02,960 --> 00:20:05,440
proposed a long time ago and it can

568
00:20:05,440 --> 00:20:06,480
actually

569
00:20:06,480 --> 00:20:08,640
efficiently be calculated and we can

570
00:20:08,640 --> 00:20:10,559
efficiently recover the private key from

571
00:20:10,559 --> 00:20:11,280
this

572
00:20:11,280 --> 00:20:13,440
if you have enough uh signatures with

573
00:20:13,440 --> 00:20:14,559
this quality

574
00:20:14,559 --> 00:20:17,360
and what we did is basically we use this

575
00:20:17,360 --> 00:20:20,000
information we construct a lattice

576
00:20:20,000 --> 00:20:22,640
uh this lattice is described in a form

577
00:20:22,640 --> 00:20:24,159
of a matrix here and

578
00:20:24,159 --> 00:20:26,799
this lattice basically form a problem

579
00:20:26,799 --> 00:20:27,679
that is uh

580
00:20:27,679 --> 00:20:29,919
that is well studied in the in the

581
00:20:29,919 --> 00:20:30,720
lattice

582
00:20:30,720 --> 00:20:32,720
base crypto community and this problem

583
00:20:32,720 --> 00:20:33,919
basically

584
00:20:33,919 --> 00:20:36,159
tells us that okay we want to solve the

585
00:20:36,159 --> 00:20:37,520
shortest vector and

586
00:20:37,520 --> 00:20:39,520
if we solve this problem we can actually

587
00:20:39,520 --> 00:20:41,440
recover the private key and

588
00:20:41,440 --> 00:20:43,600
uh surprisingly this problem can be

589
00:20:43,600 --> 00:20:45,600
solved in a polynomial time and

590
00:20:45,600 --> 00:20:47,600
there are some algorithms like lll and

591
00:20:47,600 --> 00:20:49,679
bk set that we can execute

592
00:20:49,679 --> 00:20:51,679
on this lattice to recover the private

593
00:20:51,679 --> 00:20:52,960
key and

594
00:20:52,960 --> 00:20:55,679
we did that and it actually worked and

595
00:20:55,679 --> 00:20:56,159
here

596
00:20:56,159 --> 00:20:59,440
is also a demo for this attack basically

597
00:20:59,440 --> 00:21:02,400
so for the same key that we showed

598
00:21:02,400 --> 00:21:04,480
earlier we collected more results here

599
00:21:04,480 --> 00:21:05,840
we have for instance 25

600
00:21:05,840 --> 00:21:08,720
000 signatures that we generated uh

601
00:21:08,720 --> 00:21:09,919
these signatures

602
00:21:09,919 --> 00:21:12,720
now we can see that okay this these are

603
00:21:12,720 --> 00:21:13,039
the

604
00:21:13,039 --> 00:21:14,720
historic these are the gaussian

605
00:21:14,720 --> 00:21:16,720
distributions and

606
00:21:16,720 --> 00:21:18,720
we are probably more interested in the

607
00:21:18,720 --> 00:21:21,200
signatures that are generated faster

608
00:21:21,200 --> 00:21:25,120
so here if we look at at the value 4.7

609
00:21:25,120 --> 00:21:28,640
uh to the to the 10 to the 8th

610
00:21:28,640 --> 00:21:30,400
this these are the signatures that

611
00:21:30,400 --> 00:21:32,799
probably have eight bit of leading zero

612
00:21:32,799 --> 00:21:33,520
bits because

613
00:21:33,520 --> 00:21:36,000
this is this is the second window here

614
00:21:36,000 --> 00:21:38,880
so we program this value to our tool

615
00:21:38,880 --> 00:21:41,919
uh we filter all the signatures that are

616
00:21:41,919 --> 00:21:43,440
executed

617
00:21:43,440 --> 00:21:45,440
that fast and when we filter these

618
00:21:45,440 --> 00:21:48,000
signatures we realize that there is only

619
00:21:48,000 --> 00:21:51,520
a 99 signature out of this 25 000

620
00:21:51,520 --> 00:21:53,760
signature that they have this quality

621
00:21:53,760 --> 00:21:57,760
and we save these 99 signatures and then

622
00:21:57,760 --> 00:22:00,000
we use another script that we have

623
00:22:00,000 --> 00:22:01,679
program using sage and

624
00:22:01,679 --> 00:22:04,640
this script basically randomly pick 60

625
00:22:04,640 --> 00:22:06,400
different signature

626
00:22:06,400 --> 00:22:10,320
from this set of filtered signatures

627
00:22:10,320 --> 00:22:12,320
to run the lattice attack and here we

628
00:22:12,320 --> 00:22:14,960
also have the same private key in id to

629
00:22:14,960 --> 00:22:17,200
to check as a ground through to see if

630
00:22:17,200 --> 00:22:18,559
our attack works

631
00:22:18,559 --> 00:22:20,880
and if our attack works this function

632
00:22:20,880 --> 00:22:23,280
solves cvp is gonna

633
00:22:23,280 --> 00:22:26,240
recover the key if the key matches that

634
00:22:26,240 --> 00:22:27,840
the key that we have put here

635
00:22:27,840 --> 00:22:30,000
as a ground truth then the attack works

636
00:22:30,000 --> 00:22:30,880
and here is the

637
00:22:30,880 --> 00:22:34,320
simple definition of the lattice in

638
00:22:34,320 --> 00:22:36,320
in matrix form and running the lll

639
00:22:36,320 --> 00:22:37,760
algorithm uh

640
00:22:37,760 --> 00:22:40,320
in the code so if we run this we

641
00:22:40,320 --> 00:22:41,919
basically see that okay

642
00:22:41,919 --> 00:22:44,880
our attack works even when we randomly

643
00:22:44,880 --> 00:22:45,200
pick

644
00:22:45,200 --> 00:22:47,840
different set of samples and every time

645
00:22:47,840 --> 00:22:48,320
the key

646
00:22:48,320 --> 00:22:52,080
this the correct key is recovered

647
00:22:53,760 --> 00:22:57,039
so uh this was basically uh

648
00:22:57,039 --> 00:22:59,120
an efficient attack we saw that okay

649
00:22:59,120 --> 00:23:00,799
running the attack actually

650
00:23:00,799 --> 00:23:03,120
uh doesn't take that much time the only

651
00:23:03,120 --> 00:23:04,559
the only thing that takes time is

652
00:23:04,559 --> 00:23:06,000
collecting those signatures because

653
00:23:06,000 --> 00:23:07,360
depending on the

654
00:23:07,360 --> 00:23:09,440
on the amount of leakage we have if you

655
00:23:09,440 --> 00:23:10,799
have four bit leakage or eight bit

656
00:23:10,799 --> 00:23:11,520
leakage

657
00:23:11,520 --> 00:23:13,200
we need to collect different amount of

658
00:23:13,200 --> 00:23:14,960
signatures and we have some numbers in

659
00:23:14,960 --> 00:23:16,640
the paper in more detail

660
00:23:16,640 --> 00:23:18,880
but the end result is that you can

661
00:23:18,880 --> 00:23:20,000
recover

662
00:23:20,000 --> 00:23:22,240
the crypto key very efficiently on both

663
00:23:22,240 --> 00:23:24,880
intel ftpm and st microelectronic

664
00:23:24,880 --> 00:23:26,720
especially if you have a local access

665
00:23:26,720 --> 00:23:28,000
that that's very

666
00:23:28,000 --> 00:23:30,799
fast and it just signature generation

667
00:23:30,799 --> 00:23:31,520
may take some

668
00:23:31,520 --> 00:23:35,280
some time so

669
00:23:35,280 --> 00:23:37,360
after we did this it was like okay we

670
00:23:37,360 --> 00:23:39,840
have a almost remote attack on tpm

671
00:23:39,840 --> 00:23:41,200
devices which means that

672
00:23:41,200 --> 00:23:44,240
uh this tpm is even not supposed to leak

673
00:23:44,240 --> 00:23:46,080
these keys with a physical attack but we

674
00:23:46,080 --> 00:23:48,000
can already lick this keys

675
00:23:48,000 --> 00:23:50,960
from the cpu because uh we can't measure

676
00:23:50,960 --> 00:23:52,480
the timing and leak these

677
00:23:52,480 --> 00:23:54,960
ac dsa keys but can we do these attacks

678
00:23:54,960 --> 00:23:56,080
on a real

679
00:23:56,080 --> 00:23:58,320
remote like network or remote timing

680
00:23:58,320 --> 00:23:59,360
attack like as

681
00:23:59,360 --> 00:24:02,080
is known by the community like in the

682
00:24:02,080 --> 00:24:02,720
one

683
00:24:02,720 --> 00:24:06,080
so what we looked at is okay these

684
00:24:06,080 --> 00:24:08,400
tpm devices they are running with a very

685
00:24:08,400 --> 00:24:09,120
slow

686
00:24:09,120 --> 00:24:11,520
frequency and because of that the timing

687
00:24:11,520 --> 00:24:13,600
difference for every of these

688
00:24:13,600 --> 00:24:15,760
short signatures the different brackets

689
00:24:15,760 --> 00:24:17,279
is different for instance for the intel

690
00:24:17,279 --> 00:24:18,240
ftpm

691
00:24:18,240 --> 00:24:21,200
the time difference for each of those uh

692
00:24:21,200 --> 00:24:23,440
group of peaks we saw is like about more

693
00:24:23,440 --> 00:24:23,840
than

694
00:24:23,840 --> 00:24:26,080
one millisecond which means that if you

695
00:24:26,080 --> 00:24:28,880
have like 12 bit of uh

696
00:24:28,880 --> 00:24:31,039
zero at one nonce that signature is

697
00:24:31,039 --> 00:24:33,360
gonna be executed like for more than

698
00:24:33,360 --> 00:24:34,400
three seconds

699
00:24:34,400 --> 00:24:38,240
uh faster and that means that

700
00:24:38,240 --> 00:24:41,039
on most local networks on or even some

701
00:24:41,039 --> 00:24:43,200
internet networks this can be

702
00:24:43,200 --> 00:24:45,600
kind of observed and for instance here i

703
00:24:45,600 --> 00:24:46,400
have like a

704
00:24:46,400 --> 00:24:48,559
the round trip time on my local network

705
00:24:48,559 --> 00:24:50,400
of pinging another device

706
00:24:50,400 --> 00:24:53,039
in my local network and we see that the

707
00:24:53,039 --> 00:24:54,720
time it takes to do a round trip

708
00:24:54,720 --> 00:24:56,240
is like less than a millisecond which

709
00:24:56,240 --> 00:24:58,400
means if i have a leakage that is like

710
00:24:58,400 --> 00:24:58,840
three

711
00:24:58,840 --> 00:25:01,279
milliseconds delay this is something

712
00:25:01,279 --> 00:25:02,320
that probably

713
00:25:02,320 --> 00:25:04,640
can be observed uh easily over even a

714
00:25:04,640 --> 00:25:06,559
local network and even on some remote

715
00:25:06,559 --> 00:25:07,919
networks here if i

716
00:25:07,919 --> 00:25:10,960
ping cloudflare it takes 20 milliseconds

717
00:25:10,960 --> 00:25:12,880
so maybe this is even observable

718
00:25:12,880 --> 00:25:16,480
observable over a online like

719
00:25:16,480 --> 00:25:19,200
like internet network uh well we didn't

720
00:25:19,200 --> 00:25:20,880
do an attack on internet work but

721
00:25:20,880 --> 00:25:23,760
on a local network we try to see if this

722
00:25:23,760 --> 00:25:24,400
what is the

723
00:25:24,400 --> 00:25:26,400
impact of this attack on a local network

724
00:25:26,400 --> 00:25:27,440
so we

725
00:25:27,440 --> 00:25:30,400
picked up an application a vpn

726
00:25:30,400 --> 00:25:31,200
application that

727
00:25:31,200 --> 00:25:33,840
actually has the instruction how to use

728
00:25:33,840 --> 00:25:35,360
a strong sound vpn

729
00:25:35,360 --> 00:25:37,760
to configure it to use tpm for

730
00:25:37,760 --> 00:25:38,720
authentication

731
00:25:38,720 --> 00:25:41,200
so when we configure the strong sun vpn

732
00:25:41,200 --> 00:25:43,679
to use tpm for authentication

733
00:25:43,679 --> 00:25:45,919
what we realized is okay that the first

734
00:25:45,919 --> 00:25:48,159
handshake is the same there is a

735
00:25:48,159 --> 00:25:49,919
default main queue exchange at the first

736
00:25:49,919 --> 00:25:51,360
handshake with the server

737
00:25:51,360 --> 00:25:53,039
and then after this default monkey

738
00:25:53,039 --> 00:25:55,120
exchange both the client and the server

739
00:25:55,120 --> 00:25:57,600
they both have the shared key for

740
00:25:57,600 --> 00:25:59,200
encryption of their packets

741
00:25:59,200 --> 00:26:00,960
but then the client also need to make

742
00:26:00,960 --> 00:26:03,440
sure the server is the correct server so

743
00:26:03,440 --> 00:26:04,640
it's not a

744
00:26:04,640 --> 00:26:06,640
impersonated server so then the

745
00:26:06,640 --> 00:26:08,559
authentication happens in the next

746
00:26:08,559 --> 00:26:11,039
ike exchange protocol and then during

747
00:26:11,039 --> 00:26:12,080
the next exchange

748
00:26:12,080 --> 00:26:14,720
the vpn server doesn't even have the

749
00:26:14,720 --> 00:26:16,320
access to the key and it's going to ask

750
00:26:16,320 --> 00:26:17,520
the tpm device

751
00:26:17,520 --> 00:26:19,840
hey this is a message please sign this

752
00:26:19,840 --> 00:26:20,720
for me

753
00:26:20,720 --> 00:26:23,840
and then the server asks the vpn device

754
00:26:23,840 --> 00:26:25,360
to sign the message and the tpm ui

755
00:26:25,360 --> 00:26:27,200
signed a message and then the server

756
00:26:27,200 --> 00:26:29,440
just get their response and send it to

757
00:26:29,440 --> 00:26:31,039
the client and the client

758
00:26:31,039 --> 00:26:33,200
can verify that oh this server is a

759
00:26:33,200 --> 00:26:34,960
legitimate server

760
00:26:34,960 --> 00:26:36,799
and the good thing about using this tpm

761
00:26:36,799 --> 00:26:38,880
is that okay now even if the server is

762
00:26:38,880 --> 00:26:40,720
compromised nobody can have access to

763
00:26:40,720 --> 00:26:42,159
that private key

764
00:26:42,159 --> 00:26:45,440
so nobody can impersonate the vpn

765
00:26:45,440 --> 00:26:47,919
server

766
00:26:48,480 --> 00:26:50,480
that roll off the vpn server basically

767
00:26:50,480 --> 00:26:52,640
but the the bad thing about this is that

768
00:26:52,640 --> 00:26:54,080
if we have vulnerability on the tpm

769
00:26:54,080 --> 00:26:55,679
device then every time there is a

770
00:26:55,679 --> 00:26:57,520
handshake you can measure the time so

771
00:26:57,520 --> 00:26:59,120
here what we did is that after the

772
00:26:59,120 --> 00:27:00,559
second hatching you just drop the

773
00:27:00,559 --> 00:27:01,360
connection

774
00:27:01,360 --> 00:27:03,200
and we repeat this operation again and

775
00:27:03,200 --> 00:27:06,799
we collect uh lots of timing measurement

776
00:27:06,799 --> 00:27:09,520
after doing that we again applied the

777
00:27:09,520 --> 00:27:11,120
same attack that we explained as our

778
00:27:11,120 --> 00:27:12,480
local attack on the

779
00:27:12,480 --> 00:27:14,960
as a root adversary and with the local

780
00:27:14,960 --> 00:27:16,960
attack with the remote attack we again

781
00:27:16,960 --> 00:27:19,600
managed to recover the private key from

782
00:27:19,600 --> 00:27:20,159
uh

783
00:27:20,159 --> 00:27:23,760
from a vpn server and uh

784
00:27:23,760 --> 00:27:25,760
for this attack we needed like about

785
00:27:25,760 --> 00:27:27,760
forty four thousand handshakes

786
00:27:27,760 --> 00:27:29,440
uh with the vpn server that we

787
00:27:29,440 --> 00:27:31,279
configured on a local network

788
00:27:31,279 --> 00:27:33,039
that takes about like five hours to

789
00:27:33,039 --> 00:27:35,760
collect this amount of signature

790
00:27:35,760 --> 00:27:38,880
and the attack is also about sixty

791
00:27:38,880 --> 00:27:40,799
percent of the times is successful with

792
00:27:40,799 --> 00:27:41,360
this

793
00:27:41,360 --> 00:27:44,158
prettiest network

794
00:27:44,960 --> 00:27:47,200
and here also we see a comparison of

795
00:27:47,200 --> 00:27:48,480
different

796
00:27:48,480 --> 00:27:50,399
histograms that we generated for this

797
00:27:50,399 --> 00:27:52,320
intel ftp and vulnerability and we see

798
00:27:52,320 --> 00:27:53,120
that

799
00:27:53,120 --> 00:27:55,200
for system level adversary the leakage

800
00:27:55,200 --> 00:27:57,039
is almost as clean as

801
00:27:57,039 --> 00:28:00,240
if we already know the bios there is no

802
00:28:00,240 --> 00:28:02,080
interesting statistics behind it it's

803
00:28:02,080 --> 00:28:04,080
just clean leakage and for the remote

804
00:28:04,080 --> 00:28:04,960
attacks

805
00:28:04,960 --> 00:28:07,679
the leakage is noisier and remote attack

806
00:28:07,679 --> 00:28:10,399
with vpn protocol event is more lazier

807
00:28:10,399 --> 00:28:13,279
more noisier but what is clear is that

808
00:28:13,279 --> 00:28:15,120
there is a still possibility to

809
00:28:15,120 --> 00:28:17,360
lick the key and we actually showed that

810
00:28:17,360 --> 00:28:18,320
you can

811
00:28:18,320 --> 00:28:22,559
recover the private key over a network

812
00:28:22,559 --> 00:28:25,919
so uh you may be surprised okay why

813
00:28:25,919 --> 00:28:27,919
why are these such problems on this tpm

814
00:28:27,919 --> 00:28:29,600
devices and

815
00:28:29,600 --> 00:28:31,279
this is not actually the first time that

816
00:28:31,279 --> 00:28:32,799
we show such a

817
00:28:32,799 --> 00:28:35,679
vulnerability on some uh diploid crypto

818
00:28:35,679 --> 00:28:36,480
products

819
00:28:36,480 --> 00:28:38,799
um like two years ago around two years

820
00:28:38,799 --> 00:28:40,240
ago we showed that

821
00:28:40,240 --> 00:28:43,200
another product that's uh that uses the

822
00:28:43,200 --> 00:28:44,799
signature schemes like a signature

823
00:28:44,799 --> 00:28:45,919
scheme called epid

824
00:28:45,919 --> 00:28:49,120
that also use elliptic curve uh actually

825
00:28:49,120 --> 00:28:50,960
has this leakage and we show that on

826
00:28:50,960 --> 00:28:52,720
intel sgx product

827
00:28:52,720 --> 00:28:56,159
uh they're secure on their uh

828
00:28:56,159 --> 00:28:58,000
coating enclave that is used as part of

829
00:28:58,000 --> 00:28:59,440
the remote asset station is actually

830
00:28:59,440 --> 00:29:00,320
vulnerable

831
00:29:00,320 --> 00:29:02,559
and using a cache attack we could

832
00:29:02,559 --> 00:29:03,679
actually recover

833
00:29:03,679 --> 00:29:06,000
the private key for remote attestation

834
00:29:06,000 --> 00:29:07,360
so

835
00:29:07,360 --> 00:29:09,919
these uh why why why is it so easy to

836
00:29:09,919 --> 00:29:11,520
break this crypto implementation when it

837
00:29:11,520 --> 00:29:13,279
comes to sidechain attack

838
00:29:13,279 --> 00:29:15,120
the reason is that implementing this

839
00:29:15,120 --> 00:29:16,799
crypto implementation is really hard

840
00:29:16,799 --> 00:29:18,559
it's really hard to

841
00:29:18,559 --> 00:29:20,960
implement them to be resistant against

842
00:29:20,960 --> 00:29:22,799
all sort of different

843
00:29:22,799 --> 00:29:25,120
side channel attacks if we look at the

844
00:29:25,120 --> 00:29:27,200
ecd i say for instance as we talked a

845
00:29:27,200 --> 00:29:28,640
lot about the cdsa

846
00:29:28,640 --> 00:29:31,440
is that there is a simple equation here

847
00:29:31,440 --> 00:29:33,279
that okay this is the cdsa signing

848
00:29:33,279 --> 00:29:34,799
operation but in reality

849
00:29:34,799 --> 00:29:36,960
there is more going on in the back and

850
00:29:36,960 --> 00:29:38,159
implementing this

851
00:29:38,159 --> 00:29:40,480
is much more complicated than it seems

852
00:29:40,480 --> 00:29:41,760
and so

853
00:29:41,760 --> 00:29:43,840
for elliptic curve we have like a curve

854
00:29:43,840 --> 00:29:45,440
this is called the elliptic curve and

855
00:29:45,440 --> 00:29:47,679
it's defined okay this is a secure curve

856
00:29:47,679 --> 00:29:48,559
and then

857
00:29:48,559 --> 00:29:50,960
we have two primitive operations one

858
00:29:50,960 --> 00:29:52,399
operation is called double

859
00:29:52,399 --> 00:29:54,240
that after we double the point we get

860
00:29:54,240 --> 00:29:56,880
another point on the same curve here

861
00:29:56,880 --> 00:29:59,120
and again for another operation called

862
00:29:59,120 --> 00:30:01,360
add we add two points together

863
00:30:01,360 --> 00:30:04,000
and we pass a line to these two points

864
00:30:04,000 --> 00:30:06,240
and we get another point here mirrored

865
00:30:06,240 --> 00:30:08,320
down there and these are the two basic

866
00:30:08,320 --> 00:30:10,080
operations but using this two basic

867
00:30:10,080 --> 00:30:11,520
operation we can implement

868
00:30:11,520 --> 00:30:13,279
more complicated operation for instance

869
00:30:13,279 --> 00:30:15,520
during the cdsa signing operation one

870
00:30:15,520 --> 00:30:17,279
complicated operation is the scalar

871
00:30:17,279 --> 00:30:18,320
multiplication

872
00:30:18,320 --> 00:30:19,679
and we can implement a scalar

873
00:30:19,679 --> 00:30:21,760
multiplication using a series of double

874
00:30:21,760 --> 00:30:23,760
and add operation as you can see that

875
00:30:23,760 --> 00:30:26,559
for instance multiplying 3 7 23

876
00:30:26,559 --> 00:30:27,520
different numbers with

877
00:30:27,520 --> 00:30:30,399
a point can be done using this island

878
00:30:30,399 --> 00:30:31,360
double operation

879
00:30:31,360 --> 00:30:33,279
and this gives us a simple algorithm we

880
00:30:33,279 --> 00:30:34,720
can use this to

881
00:30:34,720 --> 00:30:38,159
implement the cdsa but there is not a

882
00:30:38,159 --> 00:30:40,159
single implementation of this algorithm

883
00:30:40,159 --> 00:30:41,840
and we see that this algorithm

884
00:30:41,840 --> 00:30:44,399
has behavior depending on the key beats

885
00:30:44,399 --> 00:30:46,320
and there are so many other algorithms

886
00:30:46,320 --> 00:30:48,240
there is like double that algorithm that

887
00:30:48,240 --> 00:30:50,080
we show there is montgomery double up

888
00:30:50,080 --> 00:30:50,399
there

889
00:30:50,399 --> 00:30:52,640
like a sliding window fixed window so

890
00:30:52,640 --> 00:30:54,159
there are so many different ways to

891
00:30:54,159 --> 00:30:55,600
implement the same

892
00:30:55,600 --> 00:30:57,919
functionality this is part of this cdsa

893
00:30:57,919 --> 00:30:59,360
signature and

894
00:30:59,360 --> 00:31:01,840
in our case the shortcase we showed in

895
00:31:01,840 --> 00:31:02,799
fixed window

896
00:31:02,799 --> 00:31:05,200
in intel ftpm it was actually a fixed

897
00:31:05,200 --> 00:31:07,039
window implementation that was leaking

898
00:31:07,039 --> 00:31:10,640
leaking for every four bit window but

899
00:31:10,640 --> 00:31:12,399
if you are designing crypto system this

900
00:31:12,399 --> 00:31:13,919
is very difficult because

901
00:31:13,919 --> 00:31:15,760
uh you are not sure what is the threat

902
00:31:15,760 --> 00:31:16,960
model you may

903
00:31:16,960 --> 00:31:18,880
implement this cryptosystem to run on a

904
00:31:18,880 --> 00:31:20,720
cloud but then later on you may use the

905
00:31:20,720 --> 00:31:21,519
same code

906
00:31:21,519 --> 00:31:23,440
to run it on an airplane and people have

907
00:31:23,440 --> 00:31:24,799
told you not to implement your own

908
00:31:24,799 --> 00:31:26,880
crypto so you just copy paste the same

909
00:31:26,880 --> 00:31:29,039
crypto library from one design to

910
00:31:29,039 --> 00:31:30,960
another and this makes it really

911
00:31:30,960 --> 00:31:32,159
difficult and

912
00:31:32,159 --> 00:31:34,720
uh a while back we actually were curious

913
00:31:34,720 --> 00:31:36,880
okay how can we find these leakages

914
00:31:36,880 --> 00:31:38,880
uh automatically instead of trying to

915
00:31:38,880 --> 00:31:40,720
attack every specific

916
00:31:40,720 --> 00:31:43,039
uh implementation on different platforms

917
00:31:43,039 --> 00:31:44,720
and one thing we

918
00:31:44,720 --> 00:31:47,519
we came up with here is that okay all

919
00:31:47,519 --> 00:31:49,200
these software related

920
00:31:49,200 --> 00:31:51,760
side channel leakages they have some

921
00:31:51,760 --> 00:31:52,799
characteristics

922
00:31:52,799 --> 00:31:54,559
they either happen due to a secret

923
00:31:54,559 --> 00:31:56,399
dependent control flow like when you

924
00:31:56,399 --> 00:31:59,200
do a loop or if a statement that depends

925
00:31:59,200 --> 00:32:00,159
on the keywords

926
00:32:00,159 --> 00:32:02,240
or when you try to do a memory access

927
00:32:02,240 --> 00:32:04,080
depending on the keyboards like when we

928
00:32:04,080 --> 00:32:05,039
see that in

929
00:32:05,039 --> 00:32:07,679
in some black ciphers like aes that they

930
00:32:07,679 --> 00:32:09,919
have something called s box and

931
00:32:09,919 --> 00:32:11,760
in some rare cases there are also some

932
00:32:11,760 --> 00:32:13,120
instructions that they

933
00:32:13,120 --> 00:32:15,440
leak some value about the input like on

934
00:32:15,440 --> 00:32:17,279
some arm cpu for instance

935
00:32:17,279 --> 00:32:20,559
this has been reported but the idea is

936
00:32:20,559 --> 00:32:22,480
that okay we want to have an automatic

937
00:32:22,480 --> 00:32:23,200
tool and we

938
00:32:23,200 --> 00:32:25,600
want to apply this understanding to

939
00:32:25,600 --> 00:32:26,960
recover these leakages

940
00:32:26,960 --> 00:32:28,960
from a software's perspective without

941
00:32:28,960 --> 00:32:30,080
even caring

942
00:32:30,080 --> 00:32:32,720
uh what computer or what threat model we

943
00:32:32,720 --> 00:32:33,600
are running to

944
00:32:33,600 --> 00:32:37,279
uh so in reality the way

945
00:32:37,279 --> 00:32:39,519
our tool which we call it microwave work

946
00:32:39,519 --> 00:32:40,559
is that so

947
00:32:40,559 --> 00:32:42,799
in practice an attacker learn about the

948
00:32:42,799 --> 00:32:45,360
execution time the memory usage behavior

949
00:32:45,360 --> 00:32:46,880
the cash access pattern

950
00:32:46,880 --> 00:32:49,200
but in theory in the principle what

951
00:32:49,200 --> 00:32:50,720
happens is that the attacker learns

952
00:32:50,720 --> 00:32:52,320
something about how many instructions

953
00:32:52,320 --> 00:32:53,440
are executed or

954
00:32:53,440 --> 00:32:56,080
or what branches have been taken or what

955
00:32:56,080 --> 00:32:57,760
is the memory access

956
00:32:57,760 --> 00:33:00,000
pattern of the software and so we said

957
00:33:00,000 --> 00:33:01,760
okay we're going to try to have a more

958
00:33:01,760 --> 00:33:03,919
tight model and we just look at the

959
00:33:03,919 --> 00:33:06,960
principle of why the leakage happen so

960
00:33:06,960 --> 00:33:08,880
we came up with this tool and the idea

961
00:33:08,880 --> 00:33:11,279
is we generate a set of random test case

962
00:33:11,279 --> 00:33:13,279
and we feed these random case test cases

963
00:33:13,279 --> 00:33:15,200
to the implementation of a

964
00:33:15,200 --> 00:33:17,519
crypto operation and while we are

965
00:33:17,519 --> 00:33:19,200
generating while we are feeding these

966
00:33:19,200 --> 00:33:20,559
test cases we also generate the

967
00:33:20,559 --> 00:33:22,080
execution trace

968
00:33:22,080 --> 00:33:24,960
of this crypto operation and then uh one

969
00:33:24,960 --> 00:33:25,519
way to

970
00:33:25,519 --> 00:33:27,679
see if there is a leakage we can we we

971
00:33:27,679 --> 00:33:28,720
show that we can

972
00:33:28,720 --> 00:33:30,320
check the difference between the traces

973
00:33:30,320 --> 00:33:32,240
for the same for different

974
00:33:32,240 --> 00:33:35,120
inputs and another way we also use

975
00:33:35,120 --> 00:33:36,640
mutual information we said

976
00:33:36,640 --> 00:33:38,240
for every instruction that has been

977
00:33:38,240 --> 00:33:42,159
executed during the execution of uh

978
00:33:42,159 --> 00:33:43,919
this crypto system with different inputs

979
00:33:43,919 --> 00:33:45,279
we're going to calculate a mutual

980
00:33:45,279 --> 00:33:45,919
information

981
00:33:45,919 --> 00:33:49,039
score and we say we look at how

982
00:33:49,039 --> 00:33:51,600
if this mutual information is positive

983
00:33:51,600 --> 00:33:52,720
if there is a score

984
00:33:52,720 --> 00:33:54,399
associated with the instruction it means

985
00:33:54,399 --> 00:33:56,159
that that instruction was involved

986
00:33:56,159 --> 00:33:58,559
with the operation that took different

987
00:33:58,559 --> 00:33:59,200
amount of

988
00:33:59,200 --> 00:34:01,519
different uh different inputs or

989
00:34:01,519 --> 00:34:03,279
different amount of execution and that

990
00:34:03,279 --> 00:34:04,720
actually tells us

991
00:34:04,720 --> 00:34:06,799
there is a relationship between the

992
00:34:06,799 --> 00:34:08,560
leakage and that instruction

993
00:34:08,560 --> 00:34:11,040
so using that we can actually also look

994
00:34:11,040 --> 00:34:12,960
at which instructions are leaky

995
00:34:12,960 --> 00:34:14,960
and the there are two the way it works

996
00:34:14,960 --> 00:34:16,879
is that first we generate these traces

997
00:34:16,879 --> 00:34:17,918
and we do some

998
00:34:17,918 --> 00:34:19,520
uh some tweaks to that to that

999
00:34:19,520 --> 00:34:21,199
generation during the execution we use

1000
00:34:21,199 --> 00:34:22,560
something like intel

1001
00:34:22,560 --> 00:34:24,879
pin tool to to but do binary

1002
00:34:24,879 --> 00:34:27,119
instrumentation so it can work on

1003
00:34:27,119 --> 00:34:28,560
binary software that we don't have

1004
00:34:28,560 --> 00:34:30,719
access to the source code and then we do

1005
00:34:30,719 --> 00:34:33,839
some pre-processing of the trace because

1006
00:34:33,839 --> 00:34:36,079
some of these operations like they have

1007
00:34:36,079 --> 00:34:37,760
different address space

1008
00:34:37,760 --> 00:34:40,639
because of aslr or because of memory

1009
00:34:40,639 --> 00:34:42,719
allocation so we try to normalize the

1010
00:34:42,719 --> 00:34:44,320
trace so we don't have

1011
00:34:44,320 --> 00:34:46,320
false positive and we also apply some

1012
00:34:46,320 --> 00:34:48,320
leakage granularity like you may be

1013
00:34:48,320 --> 00:34:50,239
interested in cache level

1014
00:34:50,239 --> 00:34:52,159
attack or page level attacks and things

1015
00:34:52,159 --> 00:34:54,399
like that and then we apply the analysis

1016
00:34:54,399 --> 00:34:56,560
that we mentioned

1017
00:34:56,560 --> 00:34:59,760
so we had this tool but apparently the

1018
00:34:59,760 --> 00:35:01,280
vendor didn't have access

1019
00:35:01,280 --> 00:35:03,599
to such a tool or they didn't care

1020
00:35:03,599 --> 00:35:04,720
enough to use it

1021
00:35:04,720 --> 00:35:07,599
and this is the basically the

1022
00:35:07,599 --> 00:35:09,680
responsible disclosure we had with

1023
00:35:09,680 --> 00:35:11,520
sd micro electronic we reported this

1024
00:35:11,520 --> 00:35:12,880
vulnerability to them

1025
00:35:12,880 --> 00:35:14,960
about a year ago and we had lots of

1026
00:35:14,960 --> 00:35:16,960
exchanges with them to help them

1027
00:35:16,960 --> 00:35:19,440
to update the firmware for this device

1028
00:35:19,440 --> 00:35:21,440
and fix these devices and later on

1029
00:35:21,440 --> 00:35:23,680
uh some vendors like hp and lenovo

1030
00:35:23,680 --> 00:35:24,560
issued some

1031
00:35:24,560 --> 00:35:26,480
firmware updates to fix this issue for

1032
00:35:26,480 --> 00:35:28,480
intel uh we also had a

1033
00:35:28,480 --> 00:35:30,240
responsible disclosure that was a little

1034
00:35:30,240 --> 00:35:32,320
bit longer about nine months

1035
00:35:32,320 --> 00:35:34,720
and then similarly we reported this

1036
00:35:34,720 --> 00:35:36,800
issue and what's interesting is after we

1037
00:35:36,800 --> 00:35:38,960
reported this issue they told us that

1038
00:35:38,960 --> 00:35:40,560
uh the reason they had this

1039
00:35:40,560 --> 00:35:42,480
vulnerability was that they were using

1040
00:35:42,480 --> 00:35:44,480
an updated version of library and this

1041
00:35:44,480 --> 00:35:45,760
also matches our

1042
00:35:45,760 --> 00:35:47,760
our previous reports because we already

1043
00:35:47,760 --> 00:35:48,960
reported

1044
00:35:48,960 --> 00:35:51,280
similar vulnerabilities in intel ipp

1045
00:35:51,280 --> 00:35:52,160
which is a

1046
00:35:52,160 --> 00:35:55,280
official crypto library by intel as part

1047
00:35:55,280 --> 00:35:58,160
of our study of the microwave tool and

1048
00:35:58,160 --> 00:36:00,000
we already reported this vulnerability

1049
00:36:00,000 --> 00:36:01,440
is like two years before like

1050
00:36:01,440 --> 00:36:04,480
in 2018 but later on again the same

1051
00:36:04,480 --> 00:36:06,160
vulnerability

1052
00:36:06,160 --> 00:36:07,920
appeared in another product another

1053
00:36:07,920 --> 00:36:09,680
consumer product actually

1054
00:36:09,680 --> 00:36:12,160
and that's actually an interesting thing

1055
00:36:12,160 --> 00:36:13,280
that sometimes

1056
00:36:13,280 --> 00:36:15,280
uh the knowledge you get from cash

1057
00:36:15,280 --> 00:36:16,720
attacks and analyzing software

1058
00:36:16,720 --> 00:36:18,400
indicators can be transferred to that

1059
00:36:18,400 --> 00:36:19,440
totally different

1060
00:36:19,440 --> 00:36:22,480
type of site channel and with even

1061
00:36:22,480 --> 00:36:26,160
more bad consequence on the products

1062
00:36:26,160 --> 00:36:28,560
this is my talk and here are some things

1063
00:36:28,560 --> 00:36:30,240
about our tool

1064
00:36:30,240 --> 00:36:33,440
about this attack and also this paper

1065
00:36:33,440 --> 00:36:35,440
will appear also at using security

1066
00:36:35,440 --> 00:36:36,720
symposium

1067
00:36:36,720 --> 00:36:39,200
which happens soon right after the

1068
00:36:39,200 --> 00:36:40,960
blackhead

1069
00:36:40,960 --> 00:36:44,400
yeah so i have one one question in the

1070
00:36:44,400 --> 00:36:45,839
chat window that

1071
00:36:45,839 --> 00:36:48,800
asks uh from what i can remember tpm

1072
00:36:48,800 --> 00:36:50,720
should be generating key materials with

1073
00:36:50,720 --> 00:36:52,640
an artificial response time to prevent

1074
00:36:52,640 --> 00:36:54,560
this type of timing attack

1075
00:36:54,560 --> 00:36:56,320
your results show this is not true but

1076
00:36:56,320 --> 00:36:58,079
is that a problem in the standard or the

1077
00:36:58,079 --> 00:36:59,280
tpm vendors

1078
00:36:59,280 --> 00:37:02,400
i i believe that the tpm standards the

1079
00:37:02,400 --> 00:37:05,920
tpm standard itself doesn't

1080
00:37:05,920 --> 00:37:08,240
impose how the vendors are supposed to

1081
00:37:08,240 --> 00:37:10,480
implement that actual tpm hardware

1082
00:37:10,480 --> 00:37:13,280
but the cc certification when it's at

1083
00:37:13,280 --> 00:37:14,160
level four or

1084
00:37:14,160 --> 00:37:16,480
five expect dpm vendors to have some

1085
00:37:16,480 --> 00:37:19,119
mitigation

1086
00:37:20,560 --> 00:37:23,599
so i don't know if i hope that clarified

1087
00:37:23,599 --> 00:37:26,640
the answer for that

1088
00:37:30,640 --> 00:37:37,839
any other question

1089
00:38:23,440 --> 00:38:26,720
i don't see more questions but i would

1090
00:38:26,720 --> 00:38:27,200
like to

1091
00:38:27,200 --> 00:38:29,599
again thank the audience for listening

1092
00:38:29,599 --> 00:38:30,839
to my talk

1093
00:38:30,839 --> 00:38:35,599
uh yeah

