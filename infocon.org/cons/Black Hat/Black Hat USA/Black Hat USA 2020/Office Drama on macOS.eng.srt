1
00:00:03,910 --> 00:00:13,710
[Music]

2
00:00:14,639 --> 00:00:16,560
aloha and welcome to my talk

3
00:00:16,560 --> 00:00:19,840
office drama on mac os

4
00:00:19,840 --> 00:00:22,160
my name is patrick wardle i am a

5
00:00:22,160 --> 00:00:24,160
principal security researcher at

6
00:00:24,160 --> 00:00:27,199
jaff and also the creator of the mac

7
00:00:27,199 --> 00:00:29,519
security website and tool suite

8
00:00:29,519 --> 00:00:32,640
objective-c so

9
00:00:32,640 --> 00:00:34,640
today we're going to be talking about

10
00:00:34,640 --> 00:00:36,399
malicious office documents

11
00:00:36,399 --> 00:00:40,079
on mac os first we're going to detail

12
00:00:40,079 --> 00:00:43,120
recent attacks targeting mac users

13
00:00:43,120 --> 00:00:45,840
attacks that leveraged macro laced

14
00:00:45,840 --> 00:00:47,120
documents

15
00:00:47,120 --> 00:00:49,680
then we'll discuss methods of analyzing

16
00:00:49,680 --> 00:00:51,360
these attacks for example

17
00:00:51,360 --> 00:00:54,480
how to extract the embedded macros and

18
00:00:54,480 --> 00:00:55,440
also how to

19
00:00:55,440 --> 00:00:58,879
analyze the document payloads

20
00:00:58,879 --> 00:01:01,920
as the current attacks are kind of lame

21
00:01:01,920 --> 00:01:04,080
somewhat constrained for example by the

22
00:01:04,080 --> 00:01:05,119
sandbox

23
00:01:05,119 --> 00:01:07,600
i wanted to dig into this a little more

24
00:01:07,600 --> 00:01:08,400
and

25
00:01:08,400 --> 00:01:10,880
we'll talk today about a new exploit

26
00:01:10,880 --> 00:01:11,520
chain

27
00:01:11,520 --> 00:01:15,200
that combines was what was at the time

28
00:01:15,200 --> 00:01:18,320
a handful of zero days to bypass the

29
00:01:18,320 --> 00:01:20,240
sandbox and apple's latest

30
00:01:20,240 --> 00:01:22,720
security mechanisms we'll end by

31
00:01:22,720 --> 00:01:25,119
discussing generic methods to detect and

32
00:01:25,119 --> 00:01:25,759
thwart

33
00:01:25,759 --> 00:01:29,520
some of these attacks alright so let's

34
00:01:29,520 --> 00:01:31,520
dive in we're going to start by looking

35
00:01:31,520 --> 00:01:34,079
at recent macro based attacks

36
00:01:34,079 --> 00:01:37,119
targeting mac users

37
00:01:37,119 --> 00:01:39,600
now first you might be wondering what is

38
00:01:39,600 --> 00:01:40,640
a macro

39
00:01:40,640 --> 00:01:43,200
well i've added the official microsoft

40
00:01:43,200 --> 00:01:45,439
documentation on the slide

41
00:01:45,439 --> 00:01:48,240
but in short a macro is embedded

42
00:01:48,240 --> 00:01:49,520
executable code

43
00:01:49,520 --> 00:01:52,560
in microsoft office documents in other

44
00:01:52,560 --> 00:01:53,119
words

45
00:01:53,119 --> 00:01:55,600
it allows one as i mentioned to add

46
00:01:55,600 --> 00:01:56,960
executable code

47
00:01:56,960 --> 00:02:00,640
into a file into a document so as we can

48
00:02:00,640 --> 00:02:02,479
see on the slide what i've done

49
00:02:02,479 --> 00:02:06,240
is i've inserted a macro into a word

50
00:02:06,240 --> 00:02:06,960
document

51
00:02:06,960 --> 00:02:09,360
that will display a pop-up that says

52
00:02:09,360 --> 00:02:10,720
hello world

53
00:02:10,720 --> 00:02:14,000
now we'll talk about this more later in

54
00:02:14,000 --> 00:02:15,040
the talk

55
00:02:15,040 --> 00:02:17,200
but since i've placed this code within

56
00:02:17,200 --> 00:02:18,160
the auto

57
00:02:18,160 --> 00:02:21,440
open subroutine if the user has enabled

58
00:02:21,440 --> 00:02:22,239
macro

59
00:02:22,239 --> 00:02:24,640
this code will be automatically executed

60
00:02:24,640 --> 00:02:28,319
anytime they open the document

61
00:02:28,319 --> 00:02:30,400
now from a security point of view you

62
00:02:30,400 --> 00:02:31,519
might be thinking

63
00:02:31,519 --> 00:02:34,640
this sounds like a horrible idea and

64
00:02:34,640 --> 00:02:37,760
you're right placing executable code

65
00:02:37,760 --> 00:02:38,319
within

66
00:02:38,319 --> 00:02:41,680
documents really just a terrible idea

67
00:02:41,680 --> 00:02:44,800
which attackers have abused for years

68
00:02:44,800 --> 00:02:47,760
in fact the infamous melissa virus which

69
00:02:47,760 --> 00:02:48,400
was around

70
00:02:48,400 --> 00:02:52,400
all the way back in 1999 you guessed it

71
00:02:52,400 --> 00:02:55,440
was a macro virus now to be fair

72
00:02:55,440 --> 00:02:58,480
microsoft has added some mitigations

73
00:02:58,480 --> 00:03:01,840
for example alerts and sandboxing

74
00:03:01,840 --> 00:03:04,319
but as we'll see this has not fully

75
00:03:04,319 --> 00:03:05,120
mitigated

76
00:03:05,120 --> 00:03:07,599
the threat

77
00:03:09,200 --> 00:03:10,800
so traditionally these macro based

78
00:03:10,800 --> 00:03:13,360
attacks have targeted microsoft windows

79
00:03:13,360 --> 00:03:14,720
systems

80
00:03:14,720 --> 00:03:18,400
due to two main reasons first macros are

81
00:03:18,400 --> 00:03:20,640
a microsoft creation and only work

82
00:03:20,640 --> 00:03:23,200
in microsoft products that is that they

83
00:03:23,200 --> 00:03:24,159
they're not going to work in

84
00:03:24,159 --> 00:03:27,440
apple's office apps such as pages or or

85
00:03:27,440 --> 00:03:28,480
numbers

86
00:03:28,480 --> 00:03:31,280
and then windows computers especially in

87
00:03:31,280 --> 00:03:32,640
the past were far

88
00:03:32,640 --> 00:03:35,280
more prevalent especially in the

89
00:03:35,280 --> 00:03:36,799
enterprise

90
00:03:36,799 --> 00:03:38,720
now this is definitely changing we're

91
00:03:38,720 --> 00:03:41,040
seeing a lot more macs especially in the

92
00:03:41,040 --> 00:03:42,080
startup scene

93
00:03:42,080 --> 00:03:45,200
and also in the enterprise as well and

94
00:03:45,200 --> 00:03:47,680
so in short there are more macs and a

95
00:03:47,680 --> 00:03:49,040
lot of them are running these

96
00:03:49,040 --> 00:03:52,000
microsoft office products which means

97
00:03:52,000 --> 00:03:53,280
there's just more targets

98
00:03:53,280 --> 00:03:55,920
for hackers

99
00:03:56,480 --> 00:03:58,799
so now let's take a look at some recent

100
00:03:58,799 --> 00:04:00,000
attacks targeting

101
00:04:00,000 --> 00:04:03,439
mac users attacks that leverage macro

102
00:04:03,439 --> 00:04:04,080
laced

103
00:04:04,080 --> 00:04:07,120
documents so first in this section we're

104
00:04:07,120 --> 00:04:07,840
kind of

105
00:04:07,840 --> 00:04:09,680
going to kind of look at these at a high

106
00:04:09,680 --> 00:04:11,519
level in the next section though we're

107
00:04:11,519 --> 00:04:12,400
going to dive

108
00:04:12,400 --> 00:04:15,599
into discussing exactly how to extract

109
00:04:15,599 --> 00:04:18,560
and analyze the payload of these

110
00:04:18,560 --> 00:04:19,279
malicious

111
00:04:19,279 --> 00:04:21,839
documents so we're going to start in

112
00:04:21,839 --> 00:04:23,120
2017.

113
00:04:23,120 --> 00:04:25,759
here we have a document that appears to

114
00:04:25,759 --> 00:04:27,199
be about trump's

115
00:04:27,199 --> 00:04:30,720
unfortunate election victory if the user

116
00:04:30,720 --> 00:04:31,919
though went to open

117
00:04:31,919 --> 00:04:35,280
this document and clicked allow on the

118
00:04:35,280 --> 00:04:38,000
enabled macro alert the system would

119
00:04:38,000 --> 00:04:38,560
become

120
00:04:38,560 --> 00:04:40,560
infected because in reality this was a

121
00:04:40,560 --> 00:04:41,680
malicious document

122
00:04:41,680 --> 00:04:45,440
containing malicious macros

123
00:04:45,440 --> 00:04:48,320
moving on to 2018 we have a document

124
00:04:48,320 --> 00:04:50,000
that appears to be about

125
00:04:50,000 --> 00:04:52,560
bitcoin which was a very hot trendy

126
00:04:52,560 --> 00:04:53,600
topic

127
00:04:53,600 --> 00:04:56,240
at the time again if the user opens the

128
00:04:56,240 --> 00:04:56,880
document

129
00:04:56,880 --> 00:04:59,919
and allows macros to run the system

130
00:04:59,919 --> 00:05:02,479
is owned now this document is

131
00:05:02,479 --> 00:05:03,280
interesting

132
00:05:03,280 --> 00:05:06,240
and we'll dig into this more shortly but

133
00:05:06,240 --> 00:05:07,120
the most interesting

134
00:05:07,120 --> 00:05:09,759
aspect of this attack was that the

135
00:05:09,759 --> 00:05:10,479
embedded

136
00:05:10,479 --> 00:05:14,000
exploit code contained the ability to

137
00:05:14,000 --> 00:05:15,039
actually bypass

138
00:05:15,039 --> 00:05:19,039
microsoft office's sandbox

139
00:05:19,120 --> 00:05:22,240
moving on to 2019 we have a document

140
00:05:22,240 --> 00:05:22,880
from the

141
00:05:22,880 --> 00:05:26,320
prolific lazarus apt group which is

142
00:05:26,320 --> 00:05:29,280
normally associated with north korea

143
00:05:29,280 --> 00:05:30,800
this is interesting because we're

144
00:05:30,800 --> 00:05:31,360
actually now

145
00:05:31,360 --> 00:05:34,639
seeing apt groups jump on the

146
00:05:34,639 --> 00:05:37,440
hey let's target mac os via macros

147
00:05:37,440 --> 00:05:38,400
bandwagon

148
00:05:38,400 --> 00:05:40,560
again if the user opens the document and

149
00:05:40,560 --> 00:05:41,759
clicks allow

150
00:05:41,759 --> 00:05:45,280
the system will be owned

151
00:05:45,440 --> 00:05:47,280
all right so now let's talk about

152
00:05:47,280 --> 00:05:49,520
methods of analyzing these malicious

153
00:05:49,520 --> 00:05:50,560
documents

154
00:05:50,560 --> 00:05:53,840
showing exactly how to extract embedded

155
00:05:53,840 --> 00:05:54,639
macros

156
00:05:54,639 --> 00:05:58,080
and how to analyze both the macro code

157
00:05:58,080 --> 00:06:02,240
and any embedded payloads

158
00:06:02,639 --> 00:06:05,840
first we need to be able to extract the

159
00:06:05,840 --> 00:06:09,759
embedded macro code now the details of

160
00:06:09,759 --> 00:06:12,319
the file format of microsoft office

161
00:06:12,319 --> 00:06:14,639
documents is kind of beyond the scope of

162
00:06:14,639 --> 00:06:15,600
this talk

163
00:06:15,600 --> 00:06:17,280
but the good news is you really don't

164
00:06:17,280 --> 00:06:18,880
have to even worry about that

165
00:06:18,880 --> 00:06:20,639
turns out there are some really great

166
00:06:20,639 --> 00:06:22,160
tools that are able to

167
00:06:22,160 --> 00:06:25,120
if given a office document with macros

168
00:06:25,120 --> 00:06:26,000
can trivially

169
00:06:26,000 --> 00:06:28,080
extract those macros and that's really

170
00:06:28,080 --> 00:06:30,240
basically all we care about

171
00:06:30,240 --> 00:06:32,960
my favorite is a tool suite called ole

172
00:06:32,960 --> 00:06:33,680
tools

173
00:06:33,680 --> 00:06:36,319
from github so we can see on the slide

174
00:06:36,319 --> 00:06:37,280
we downloaded

175
00:06:37,280 --> 00:06:40,080
the package and installed it and then we

176
00:06:40,080 --> 00:06:40,960
execute the

177
00:06:40,960 --> 00:06:44,000
ole vba command with the dash

178
00:06:44,000 --> 00:06:46,960
c parameter passing in the document

179
00:06:46,960 --> 00:06:48,000
which we suspect

180
00:06:48,000 --> 00:06:50,160
has embedded macros that we want to

181
00:06:50,160 --> 00:06:51,199
analyze

182
00:06:51,199 --> 00:06:54,400
and the ole vba tool will then

183
00:06:54,400 --> 00:06:57,280
parse the document and dump any embedded

184
00:06:57,280 --> 00:06:58,240
macros to

185
00:06:58,240 --> 00:07:01,199
standard out there's also various online

186
00:07:01,199 --> 00:07:04,080
sites where you can upload a document

187
00:07:04,080 --> 00:07:05,680
the website will then do the analysis

188
00:07:05,680 --> 00:07:07,120
and extract any

189
00:07:07,120 --> 00:07:09,840
macro code

190
00:07:10,720 --> 00:07:13,759
now we want to understand exactly

191
00:07:13,759 --> 00:07:17,039
what these malicious macros are doing

192
00:07:17,039 --> 00:07:20,240
so let's briefly return to the documents

193
00:07:20,240 --> 00:07:21,120
that we discussed

194
00:07:21,120 --> 00:07:24,000
in the first part of the talk and for

195
00:07:24,000 --> 00:07:25,120
each of these

196
00:07:25,120 --> 00:07:27,919
look at exactly what the malicious macro

197
00:07:27,919 --> 00:07:29,039
code

198
00:07:29,039 --> 00:07:31,520
is doing so again starting at the one

199
00:07:31,520 --> 00:07:32,960
from 2018

200
00:07:32,960 --> 00:07:36,319
we can use the ole vba tool to extract

201
00:07:36,319 --> 00:07:37,919
the macros and i've cleaned up the

202
00:07:37,919 --> 00:07:39,039
macros a little bit

203
00:07:39,039 --> 00:07:42,000
and placed them on the screen so we can

204
00:07:42,000 --> 00:07:43,120
see on the slide

205
00:07:43,120 --> 00:07:47,360
there is a subroutine called fisher

206
00:07:47,360 --> 00:07:50,479
that is invoked via the auto open method

207
00:07:50,479 --> 00:07:54,160
the auto open method is a microsoft api

208
00:07:54,160 --> 00:07:58,800
and as its name implies any code placed

209
00:07:58,800 --> 00:07:59,280
within

210
00:07:59,280 --> 00:08:02,800
this api will be automatically executed

211
00:08:02,800 --> 00:08:04,479
if and only if the user hasn't has

212
00:08:04,479 --> 00:08:07,520
enabled macros when opening the document

213
00:08:07,520 --> 00:08:09,680
so if we assume the user has clicked

214
00:08:09,680 --> 00:08:12,400
allow to the embedded macros let's look

215
00:08:12,400 --> 00:08:13,120
at what the

216
00:08:13,120 --> 00:08:15,360
fisher subroutine does again as it will

217
00:08:15,360 --> 00:08:17,680
be automatically executed each time

218
00:08:17,680 --> 00:08:21,199
the document is opened so the first

219
00:08:21,199 --> 00:08:23,120
thing it does is it builds a

220
00:08:23,120 --> 00:08:25,919
base64 encoded string and then it

221
00:08:25,919 --> 00:08:26,879
decodes and

222
00:08:26,879 --> 00:08:30,639
executes that via python

223
00:08:30,639 --> 00:08:33,599
if we manually decode this string we can

224
00:08:33,599 --> 00:08:34,080
see its

225
00:08:34,080 --> 00:08:35,760
python code which is you know

226
00:08:35,760 --> 00:08:37,519
unsurprising as it's passing it to

227
00:08:37,519 --> 00:08:39,039
python to execute

228
00:08:39,039 --> 00:08:42,320
so what is this python code does well

229
00:08:42,320 --> 00:08:44,560
first thing it does is it checks to see

230
00:08:44,560 --> 00:08:47,040
if popular security products for example

231
00:08:47,040 --> 00:08:49,040
little snitch is running and then it

232
00:08:49,040 --> 00:08:50,080
downloads a

233
00:08:50,080 --> 00:08:52,880
second stage payload from security

234
00:08:52,880 --> 00:08:53,440
checking

235
00:08:53,440 --> 00:08:56,880
dot it then decrypts this payload using

236
00:08:56,880 --> 00:08:57,920
rc4

237
00:08:57,920 --> 00:09:01,279
and executes this now this code

238
00:09:01,279 --> 00:09:03,279
might look familiar if you spend a lot

239
00:09:03,279 --> 00:09:05,519
of time kind of looking at these attacks

240
00:09:05,519 --> 00:09:07,600
and that's because this payload is

241
00:09:07,600 --> 00:09:08,959
actually empire

242
00:09:08,959 --> 00:09:11,600
which is a well-known open source python

243
00:09:11,600 --> 00:09:12,959
backdoor

244
00:09:12,959 --> 00:09:14,959
now you might be wondering okay what is

245
00:09:14,959 --> 00:09:16,080
it downloading and

246
00:09:16,080 --> 00:09:19,360
executing as its second stage payload

247
00:09:19,360 --> 00:09:21,839
well unfortunately the commanding

248
00:09:21,839 --> 00:09:24,080
control server was offline at the time i

249
00:09:24,080 --> 00:09:25,440
did this analysis

250
00:09:25,440 --> 00:09:27,440
but it's likely that it's simply

251
00:09:27,440 --> 00:09:29,040
empire's second stage

252
00:09:29,040 --> 00:09:31,360
payload which gives attackers full

253
00:09:31,360 --> 00:09:35,040
access over the infected system

254
00:09:35,600 --> 00:09:37,680
moving on to the bitcoin document again

255
00:09:37,680 --> 00:09:38,640
this one was from

256
00:09:38,640 --> 00:09:42,640
2018. using the ole vba tool we can

257
00:09:42,640 --> 00:09:43,040
again

258
00:09:43,040 --> 00:09:45,120
extract the embedded macros

259
00:09:45,120 --> 00:09:47,760
interestingly this also contains encoded

260
00:09:47,760 --> 00:09:48,560
python

261
00:09:48,560 --> 00:09:50,640
and what appears to be an embedded

262
00:09:50,640 --> 00:09:52,080
property list

263
00:09:52,080 --> 00:09:55,200
that's interesting so

264
00:09:55,200 --> 00:09:58,000
let's take a closer look first thing we

265
00:09:58,000 --> 00:09:59,920
do is we decode the python

266
00:09:59,920 --> 00:10:02,959
since it's base64 encoded it's very

267
00:10:02,959 --> 00:10:04,079
trivial to do

268
00:10:04,079 --> 00:10:06,320
you can either do that via an online

269
00:10:06,320 --> 00:10:08,959
site that provides base64 decoding

270
00:10:08,959 --> 00:10:11,040
or i just do it via the command line via

271
00:10:11,040 --> 00:10:12,000
a python

272
00:10:12,000 --> 00:10:15,360
shop once the code is decoded

273
00:10:15,360 --> 00:10:17,680
again we can see that on the slide it

274
00:10:17,680 --> 00:10:18,800
connects to an

275
00:10:18,800 --> 00:10:22,079
ip address executes and downloads a

276
00:10:22,079 --> 00:10:25,200
second stage payload it turns out this

277
00:10:25,200 --> 00:10:26,959
command and control server was still

278
00:10:26,959 --> 00:10:30,079
online during the time of my analysis so

279
00:10:30,079 --> 00:10:32,320
i was actually able to get a copy

280
00:10:32,320 --> 00:10:35,200
of this second stage halo which turned

281
00:10:35,200 --> 00:10:35,920
out to be

282
00:10:35,920 --> 00:10:38,000
metasploits interpreter again

283
00:10:38,000 --> 00:10:40,320
interesting to see attackers leveraging

284
00:10:40,320 --> 00:10:42,959
open source agents and second stage

285
00:10:42,959 --> 00:10:44,079
payload

286
00:10:44,079 --> 00:10:46,480
interpreter affords remote access of an

287
00:10:46,480 --> 00:10:47,440
infected

288
00:10:47,440 --> 00:10:51,040
system now

289
00:10:51,040 --> 00:10:52,240
if you're called the beginning of this

290
00:10:52,240 --> 00:10:53,839
at the talk we kind of said that the

291
00:10:53,839 --> 00:10:54,160
most

292
00:10:54,160 --> 00:10:56,399
interesting thing about this particular

293
00:10:56,399 --> 00:10:57,200
document

294
00:10:57,200 --> 00:10:59,680
was its ability to escape out of

295
00:10:59,680 --> 00:11:01,279
microsoft office's

296
00:11:01,279 --> 00:11:04,959
sandbox so recent versions of office

297
00:11:04,959 --> 00:11:07,519
run in a sandbox which is good and it

298
00:11:07,519 --> 00:11:08,640
means that if

299
00:11:08,640 --> 00:11:11,519
code is executed within the context of

300
00:11:11,519 --> 00:11:12,560
the process

301
00:11:12,560 --> 00:11:15,200
for example macro code executing within

302
00:11:15,200 --> 00:11:15,760
a word

303
00:11:15,760 --> 00:11:18,880
document it is highly contained it's

304
00:11:18,880 --> 00:11:21,040
limited by what it can do it's still in

305
00:11:21,040 --> 00:11:22,240
the sandbox

306
00:11:22,240 --> 00:11:24,240
so it can't do things like persist the

307
00:11:24,240 --> 00:11:25,519
backdoor or even

308
00:11:25,519 --> 00:11:27,920
access the user's files from a security

309
00:11:27,920 --> 00:11:28,959
point of view this is

310
00:11:28,959 --> 00:11:32,160
very good however

311
00:11:32,160 --> 00:11:34,240
mac security researcher adam chester

312
00:11:34,240 --> 00:11:35,839
found a very neat way to

313
00:11:35,839 --> 00:11:38,560
escape the sandbox and posted a guest

314
00:11:38,560 --> 00:11:39,680
blog about this

315
00:11:39,680 --> 00:11:42,800
on my mac security website objectives in

316
00:11:42,800 --> 00:11:44,399
short we found that

317
00:11:44,399 --> 00:11:47,839
microsoft office had a sandbox

318
00:11:47,839 --> 00:11:50,959
exception that was based on a faulty reg

319
00:11:50,959 --> 00:11:53,839
x that would allow sandbox code to

320
00:11:53,839 --> 00:11:54,959
create a file

321
00:11:54,959 --> 00:11:57,680
anywhere on the system so what adam was

322
00:11:57,680 --> 00:11:58,480
able to do

323
00:11:58,480 --> 00:12:01,040
was via macro code running in the

324
00:12:01,040 --> 00:12:03,040
context of the sandbox

325
00:12:03,040 --> 00:12:06,399
create a launch item that

326
00:12:06,399 --> 00:12:08,560
on the next login would be executed

327
00:12:08,560 --> 00:12:10,560
outside the context of the sandbox and

328
00:12:10,560 --> 00:12:11,200
he used

329
00:12:11,200 --> 00:12:15,360
a property list in order to do that

330
00:12:15,360 --> 00:12:16,959
so i was analyzing this document i said

331
00:12:16,959 --> 00:12:18,800
okay this code looks very familiar

332
00:12:18,800 --> 00:12:20,800
and i you know read adam's blog and

333
00:12:20,800 --> 00:12:21,839
posted it on my

334
00:12:21,839 --> 00:12:24,160
site and it turns out that the attackers

335
00:12:24,160 --> 00:12:25,279
had likely

336
00:12:25,279 --> 00:12:28,320
also read this blog and took adam's

337
00:12:28,320 --> 00:12:31,920
code for verbatim 100 copy and paste

338
00:12:31,920 --> 00:12:34,160
and embedded it into their office

339
00:12:34,160 --> 00:12:34,959
document

340
00:12:34,959 --> 00:12:37,120
so this would mean that on unpatched

341
00:12:37,120 --> 00:12:38,720
systems they would be able to

342
00:12:38,720 --> 00:12:41,279
break out of the sandbox and cause more

343
00:12:41,279 --> 00:12:41,839
havoc

344
00:12:41,839 --> 00:12:44,480
or mayhem

345
00:12:45,120 --> 00:12:47,680
finally if we extract the embedded macro

346
00:12:47,680 --> 00:12:48,720
code from the

347
00:12:48,720 --> 00:12:51,440
lazarus group document we can see it's

348
00:12:51,440 --> 00:12:52,320
pretty basic

349
00:12:52,320 --> 00:12:54,959
this case it's not even included so what

350
00:12:54,959 --> 00:12:55,760
does it do

351
00:12:55,760 --> 00:12:58,480
well it simply downloads and executes a

352
00:12:58,480 --> 00:13:00,720
second stage persistent implant

353
00:13:00,720 --> 00:13:03,839
that implant is named mt.dat and would

354
00:13:03,839 --> 00:13:06,079
give attackers persistent remote access

355
00:13:06,079 --> 00:13:09,120
to the system however this document did

356
00:13:09,120 --> 00:13:11,360
not have any sandbox escape code

357
00:13:11,360 --> 00:13:13,440
which means if it was opened on a recent

358
00:13:13,440 --> 00:13:14,880
version of mac os

359
00:13:14,880 --> 00:13:17,120
this part of the attack would fail

360
00:13:17,120 --> 00:13:18,320
because you can't obviously

361
00:13:18,320 --> 00:13:21,279
persist code from within the context of

362
00:13:21,279 --> 00:13:24,000
a sandbox

363
00:13:24,160 --> 00:13:26,240
so that's an overview of recent macro

364
00:13:26,240 --> 00:13:28,560
based attacks against mac os which gave

365
00:13:28,560 --> 00:13:28,880
us

366
00:13:28,880 --> 00:13:31,760
i think a pretty thorough understanding

367
00:13:31,760 --> 00:13:32,639
of

368
00:13:32,639 --> 00:13:35,519
the status quo now let's talk about a

369
00:13:35,519 --> 00:13:36,160
new

370
00:13:36,160 --> 00:13:40,800
zero click macro based exploit chain

371
00:13:40,800 --> 00:13:42,880
and you might be wondering why should we

372
00:13:42,880 --> 00:13:43,920
do this

373
00:13:43,920 --> 00:13:46,480
well all current macro based attacks in

374
00:13:46,480 --> 00:13:47,120
my opinion

375
00:13:47,120 --> 00:13:51,360
are super lame let's list the ways

376
00:13:51,360 --> 00:13:53,839
first for any of these attacks when the

377
00:13:53,839 --> 00:13:56,160
user goes to open the document there's a

378
00:13:56,160 --> 00:13:56,639
huge

379
00:13:56,639 --> 00:13:59,279
alert warning them that this document

380
00:13:59,279 --> 00:14:00,880
contains macros and they

381
00:14:00,880 --> 00:14:04,000
probably should not allow them

382
00:14:04,000 --> 00:14:06,560
the user basically has to click enable

383
00:14:06,560 --> 00:14:08,320
most won't which means these attacks

384
00:14:08,320 --> 00:14:09,120
will fail

385
00:14:09,120 --> 00:14:11,120
immediately out of the box macro code

386
00:14:11,120 --> 00:14:12,560
will never even be

387
00:14:12,560 --> 00:14:16,560
run also as microsoft has now patched

388
00:14:16,560 --> 00:14:19,360
adam's sandbox escape bug all the

389
00:14:19,360 --> 00:14:20,320
attacks remain

390
00:14:20,320 --> 00:14:22,560
sandbox again means even if the user

391
00:14:22,560 --> 00:14:24,880
does enable the macro code

392
00:14:24,880 --> 00:14:26,639
they're incredibly limited about what

393
00:14:26,639 --> 00:14:28,240
they can do they can't persist

394
00:14:28,240 --> 00:14:31,360
code or access user files and then

395
00:14:31,360 --> 00:14:32,880
finally on mac os

396
00:14:32,880 --> 00:14:35,199
catalina the most recent version of mac

397
00:14:35,199 --> 00:14:36,000
os

398
00:14:36,000 --> 00:14:38,000
apple has really upped the bar and

399
00:14:38,000 --> 00:14:40,320
introduced some new security mechanisms

400
00:14:40,320 --> 00:14:43,040
such as notarization which means the

401
00:14:43,040 --> 00:14:44,720
second stage payloads

402
00:14:44,720 --> 00:14:47,680
may not necessarily be even allowed to

403
00:14:47,680 --> 00:14:48,720
execute

404
00:14:48,720 --> 00:14:51,040
by the system so again the current

405
00:14:51,040 --> 00:14:52,240
attacks

406
00:14:52,240 --> 00:14:56,399
my opinion basically useless

407
00:14:56,800 --> 00:14:59,440
now whenever companies such as microsoft

408
00:14:59,440 --> 00:15:00,560
or apple

409
00:15:00,560 --> 00:15:02,720
patch stuff or implement new security

410
00:15:02,720 --> 00:15:04,480
mechanisms i like to

411
00:15:04,480 --> 00:15:09,120
poke on that because often they do so

412
00:15:09,120 --> 00:15:12,240
incorrectly insufficiently so let's

413
00:15:12,240 --> 00:15:14,639
walk through now this kind of zero click

414
00:15:14,639 --> 00:15:16,160
exploit chain

415
00:15:16,160 --> 00:15:17,760
so the exploit starts with a really neat

416
00:15:17,760 --> 00:15:20,320
bug that was found a while ago by

417
00:15:20,320 --> 00:15:22,560
two security researchers and then kind

418
00:15:22,560 --> 00:15:25,279
of improved upon by other researchers at

419
00:15:25,279 --> 00:15:28,959
cert so this first bug is not mine

420
00:15:28,959 --> 00:15:31,279
what these researchers found was that

421
00:15:31,279 --> 00:15:33,279
even if macros are turned

422
00:15:33,279 --> 00:15:36,079
off they could create a document that

423
00:15:36,079 --> 00:15:36,720
contained

424
00:15:36,720 --> 00:15:38,639
macros that would be automatically

425
00:15:38,639 --> 00:15:40,079
executed with no

426
00:15:40,079 --> 00:15:43,439
alerts no prompts

427
00:15:43,759 --> 00:15:46,800
that's hot how do they do this

428
00:15:46,800 --> 00:15:50,240
by abusing a incredibly old microsoft

429
00:15:50,240 --> 00:15:53,680
file format called sylk files how old

430
00:15:53,680 --> 00:15:56,959
like from the 1980s before i was even

431
00:15:56,959 --> 00:15:58,240
born

432
00:15:58,240 --> 00:16:00,880
and they also used a macro language not

433
00:16:00,880 --> 00:16:03,399
written in vba but something called

434
00:16:03,399 --> 00:16:06,839
xlm not xml

435
00:16:06,839 --> 00:16:10,000
xln now microsoft loves to support

436
00:16:10,000 --> 00:16:12,480
old file formats for compatibility

437
00:16:12,480 --> 00:16:13,120
reasons

438
00:16:13,120 --> 00:16:15,920
so yeah these old four file formats

439
00:16:15,920 --> 00:16:17,040
still work

440
00:16:17,040 --> 00:16:20,160
even in recent versions specifically in

441
00:16:20,160 --> 00:16:23,360
excel so as i mentioned the researchers

442
00:16:23,360 --> 00:16:26,639
found that they could create these

443
00:16:26,639 --> 00:16:30,399
xlm macros in these sylk

444
00:16:30,399 --> 00:16:32,800
file formats that would be automatically

445
00:16:32,800 --> 00:16:33,759
executed

446
00:16:33,759 --> 00:16:36,720
ironically if the user had set never run

447
00:16:36,720 --> 00:16:38,560
macros to true

448
00:16:38,560 --> 00:16:41,040
so the researchers published some great

449
00:16:41,040 --> 00:16:42,800
details about these older formats and

450
00:16:42,800 --> 00:16:43,920
some of their findings

451
00:16:43,920 --> 00:16:45,839
so if you're interested i've posted a

452
00:16:45,839 --> 00:16:47,759
link on the slide to their

453
00:16:47,759 --> 00:16:51,279
very thorough technical write-ups

454
00:16:51,279 --> 00:16:53,120
so what i did was i created a simple

455
00:16:53,120 --> 00:16:55,199
proof of concept based on their

456
00:16:55,199 --> 00:16:57,759
code we'll see a malicious document is

457
00:16:57,759 --> 00:16:59,440
downloaded from the internet

458
00:16:59,440 --> 00:17:01,199
and when it is opened calc is

459
00:17:01,199 --> 00:17:03,839
automatically

460
00:17:03,839 --> 00:17:05,839
now the main takeaway from here is that

461
00:17:05,839 --> 00:17:07,280
there are no macro

462
00:17:07,280 --> 00:17:10,480
alerts right no prompts nothing just as

463
00:17:10,480 --> 00:17:12,720
soon as the document is opened

464
00:17:12,720 --> 00:17:16,160
calculator pops

465
00:17:17,280 --> 00:17:20,240
now that's well and good but as we noted

466
00:17:20,240 --> 00:17:20,480
on

467
00:17:20,480 --> 00:17:23,679
recent versions of microsoft office the

468
00:17:23,679 --> 00:17:24,640
applications

469
00:17:24,640 --> 00:17:28,000
are sandboxed meaning sure we can pop

470
00:17:28,000 --> 00:17:30,720
calculator and that's neat for a demo

471
00:17:30,720 --> 00:17:31,200
but

472
00:17:31,200 --> 00:17:33,360
you know we can't persist the backdoor

473
00:17:33,360 --> 00:17:35,120
we can't access the user's

474
00:17:35,120 --> 00:17:37,919
files this is the point of the sandbox

475
00:17:37,919 --> 00:17:39,840
it contains malicious code

476
00:17:39,840 --> 00:17:42,480
even if such code finds a way to execute

477
00:17:42,480 --> 00:17:43,120
so

478
00:17:43,120 --> 00:17:45,840
in short we need a new sandbox escape in

479
00:17:45,840 --> 00:17:46,799
order to do

480
00:17:46,799 --> 00:17:50,400
any real damage so i started

481
00:17:50,400 --> 00:17:52,720
by looking at microsoft's patch for

482
00:17:52,720 --> 00:17:54,160
adam's bug

483
00:17:54,160 --> 00:17:56,480
and i noticed that they actually didn't

484
00:17:56,480 --> 00:17:57,840
fix the faulty

485
00:17:57,840 --> 00:18:01,120
regex instead they just simply

486
00:18:01,120 --> 00:18:03,760
block certain locations such as the

487
00:18:03,760 --> 00:18:05,360
launch agent directory

488
00:18:05,360 --> 00:18:07,440
which is where adam's proof of concept

489
00:18:07,440 --> 00:18:08,640
created a launch

490
00:18:08,640 --> 00:18:10,720
agent which on the next login would be

491
00:18:10,720 --> 00:18:13,200
executed outside the context

492
00:18:13,200 --> 00:18:16,160
of the sandbox so this means we can

493
00:18:16,160 --> 00:18:16,559
create

494
00:18:16,559 --> 00:18:18,880
arbitrary files as long as they start

495
00:18:18,880 --> 00:18:20,880
with tilde dollar sign meaning they

496
00:18:20,880 --> 00:18:23,520
conform to this faulty regex

497
00:18:23,520 --> 00:18:25,679
almost anywhere again almost anywhere

498
00:18:25,679 --> 00:18:26,799
because microsoft

499
00:18:26,799 --> 00:18:29,440
added some specific locations that they

500
00:18:29,440 --> 00:18:31,919
blocked

501
00:18:32,320 --> 00:18:34,240
now our goal of course is to execute

502
00:18:34,240 --> 00:18:36,799
something outside the sandbox so we can

503
00:18:36,799 --> 00:18:37,600
persist

504
00:18:37,600 --> 00:18:40,400
and do evil things we just noted we can

505
00:18:40,400 --> 00:18:43,039
write specially named files to arbitrary

506
00:18:43,039 --> 00:18:45,840
locations from macro code that's running

507
00:18:45,840 --> 00:18:46,960
within the context

508
00:18:46,960 --> 00:18:49,679
of the sandbox as microsoft didn't fully

509
00:18:49,679 --> 00:18:51,280
patch that

510
00:18:51,280 --> 00:18:54,080
also it turns out in the sandbox we can

511
00:18:54,080 --> 00:18:54,400
both

512
00:18:54,400 --> 00:18:56,799
download and execute scripts as we can

513
00:18:56,799 --> 00:18:57,679
see in the pro

514
00:18:57,679 --> 00:19:00,320
process monitor on the slide now these

515
00:19:00,320 --> 00:19:02,160
scripts themselves will be

516
00:19:02,160 --> 00:19:04,320
sandboxed right they're children of a

517
00:19:04,320 --> 00:19:06,240
sandbox process which means

518
00:19:06,240 --> 00:19:09,280
themselves are also sandbox but that's

519
00:19:09,280 --> 00:19:10,559
still a start

520
00:19:10,559 --> 00:19:13,120
right we can execute for example python

521
00:19:13,120 --> 00:19:14,640
scripts which gives us a very

522
00:19:14,640 --> 00:19:16,559
extensible programming language to

523
00:19:16,559 --> 00:19:20,080
perhaps do some sorts of evil things

524
00:19:20,240 --> 00:19:23,600
so via a python script which we again

525
00:19:23,600 --> 00:19:26,960
download and execute within the sandbox

526
00:19:26,960 --> 00:19:30,240
we can create something called a login

527
00:19:30,240 --> 00:19:33,760
item now login items are automatically

528
00:19:33,760 --> 00:19:36,640
executed the next time the user logs in

529
00:19:36,640 --> 00:19:40,240
and since it's started by mac os

530
00:19:40,240 --> 00:19:42,799
instead of us via the sandbox it's not

531
00:19:42,799 --> 00:19:43,440
going to be

532
00:19:43,440 --> 00:19:46,240
sandbox so when the user's logging in

533
00:19:46,240 --> 00:19:48,640
mac os goes and looks at the register

534
00:19:48,640 --> 00:19:51,440
login items and just executes and starts

535
00:19:51,440 --> 00:19:52,160
all of them

536
00:19:52,160 --> 00:19:54,320
again there's no tie back to the

537
00:19:54,320 --> 00:19:55,600
microsoft office

538
00:19:55,600 --> 00:19:58,720
macro code sandbox nothing so

539
00:19:58,720 --> 00:20:00,799
that means this will be executed outside

540
00:20:00,799 --> 00:20:03,440
the context of the sandbox

541
00:20:03,440 --> 00:20:06,799
to confirm we can persist terminal.app

542
00:20:06,799 --> 00:20:09,840
sure enough when we re-log in terminal

543
00:20:09,840 --> 00:20:12,799
is executed and we look at it in

544
00:20:12,799 --> 00:20:13,679
activity

545
00:20:13,679 --> 00:20:15,919
monitor we can see that it runs outside

546
00:20:15,919 --> 00:20:18,640
the sandbox

547
00:20:18,799 --> 00:20:21,039
so this is good right we now have a way

548
00:20:21,039 --> 00:20:23,120
to bypass the sandbox but

549
00:20:23,120 --> 00:20:25,919
unfortunately we run smack into

550
00:20:25,919 --> 00:20:27,840
catalina's new security

551
00:20:27,840 --> 00:20:30,880
mechanisms which are file quarantines

552
00:20:30,880 --> 00:20:34,080
and new notarization requirements in a

553
00:20:34,080 --> 00:20:35,520
nutshell notarization

554
00:20:35,520 --> 00:20:38,080
basically says hey apple has to bless

555
00:20:38,080 --> 00:20:40,000
the file before it's run

556
00:20:40,000 --> 00:20:42,159
obviously apple's not going to bless our

557
00:20:42,159 --> 00:20:43,360
back door

558
00:20:43,360 --> 00:20:45,440
so even if we go and persist the back

559
00:20:45,440 --> 00:20:47,600
door as a login item

560
00:20:47,600 --> 00:20:50,080
mac os will simply refuse to execute it

561
00:20:50,080 --> 00:20:52,000
because unfortunately it is not

562
00:20:52,000 --> 00:20:55,679
blessed it is not notarized ugh

563
00:20:55,679 --> 00:20:58,640
this is a bummer and so what do we do

564
00:20:58,640 --> 00:21:00,159
right we gotta figure out a way to

565
00:21:00,159 --> 00:21:00,799
bypass

566
00:21:00,799 --> 00:21:03,919
now quarantine and notarization

567
00:21:03,919 --> 00:21:07,600
now hope is not lost right

568
00:21:07,600 --> 00:21:09,600
this is 2020 things look bleak but we

569
00:21:09,600 --> 00:21:11,840
gotta stay optimistic especially when we

570
00:21:11,840 --> 00:21:12,320
are

571
00:21:12,320 --> 00:21:14,880
looking and developing exploits because

572
00:21:14,880 --> 00:21:16,000
if and this is a big

573
00:21:16,000 --> 00:21:19,520
if if we can create a launch agent

574
00:21:19,520 --> 00:21:23,200
we can specify arguments and

575
00:21:23,200 --> 00:21:25,360
persist a persistent interactive

576
00:21:25,360 --> 00:21:27,120
non-sandbox reverse shell

577
00:21:27,120 --> 00:21:31,120
via bash this is a big if but again

578
00:21:31,120 --> 00:21:32,799
there's a few kind of takeaways here

579
00:21:32,799 --> 00:21:34,799
first being able to specify arguments is

580
00:21:34,799 --> 00:21:36,559
huge uh and then

581
00:21:36,559 --> 00:21:40,000
also if we can specify uh or persist

582
00:21:40,000 --> 00:21:41,360
rather an interactive

583
00:21:41,360 --> 00:21:43,440
shell it's gonna be running outside the

584
00:21:43,440 --> 00:21:44,480
sandbox which

585
00:21:44,480 --> 00:21:46,640
which is going to do things like allow

586
00:21:46,640 --> 00:21:48,960
us to remove quarantine attributes

587
00:21:48,960 --> 00:21:50,720
which means that notarization checks

588
00:21:50,720 --> 00:21:53,440
will not even be performed

589
00:21:53,440 --> 00:21:56,080
this would be great but recall that

590
00:21:56,080 --> 00:21:57,039
microsoft's

591
00:21:57,039 --> 00:22:00,559
patch for adam's bug explicitly

592
00:22:00,559 --> 00:22:03,919
blocks the creation of launch agents

593
00:22:03,919 --> 00:22:07,280
bummer so we kind of have like all these

594
00:22:07,280 --> 00:22:09,440
pieces but we just can't quite put them

595
00:22:09,440 --> 00:22:10,880
together

596
00:22:10,880 --> 00:22:13,840
frustrating so we can escape the sandbox

597
00:22:13,840 --> 00:22:14,640
via a

598
00:22:14,640 --> 00:22:17,919
login item but login items can't take

599
00:22:17,919 --> 00:22:19,760
arguments and they also can't be a

600
00:22:19,760 --> 00:22:21,360
random binary because

601
00:22:21,360 --> 00:22:23,760
notarization will block it so in other

602
00:22:23,760 --> 00:22:24,480
words

603
00:22:24,480 --> 00:22:28,000
all we can do is persist an apple binary

604
00:22:28,000 --> 00:22:31,360
again with no arguments and sure we can

605
00:22:31,360 --> 00:22:31,919
bypass

606
00:22:31,919 --> 00:22:34,480
notarization by the creation of a launch

607
00:22:34,480 --> 00:22:35,280
agent

608
00:22:35,280 --> 00:22:38,000
but we can't create one from the sandbox

609
00:22:38,000 --> 00:22:40,480
due to microsoft's partial patch

610
00:22:40,480 --> 00:22:43,200
so in other words what we need is a way

611
00:22:43,200 --> 00:22:44,480
for the system

612
00:22:44,480 --> 00:22:48,080
or for an apple binary with no arguments

613
00:22:48,080 --> 00:22:52,879
is to create a launch agent for us

614
00:22:53,120 --> 00:22:56,159
this is where things get beautiful so

615
00:22:56,159 --> 00:22:58,640
i had a random idea what happens if you

616
00:22:58,640 --> 00:23:00,559
create a login item that is

617
00:23:00,559 --> 00:23:03,280
not a binary or an application like what

618
00:23:03,280 --> 00:23:04,880
happens if you persist

619
00:23:04,880 --> 00:23:07,280
a zip file how does the system handle

620
00:23:07,280 --> 00:23:09,200
that again recall we can create these

621
00:23:09,200 --> 00:23:11,039
login items from the sandbox they can't

622
00:23:11,039 --> 00:23:12,720
take arguments and they can't be random

623
00:23:12,720 --> 00:23:13,520
binaries

624
00:23:13,520 --> 00:23:16,240
but you know what happens if we create

625
00:23:16,240 --> 00:23:17,120
persist

626
00:23:17,120 --> 00:23:20,559
as a zip file right well it turns out on

627
00:23:20,559 --> 00:23:23,840
logging login the files default handler

628
00:23:23,840 --> 00:23:25,120
will be invoked

629
00:23:25,120 --> 00:23:27,840
which for a zip file mac os will

630
00:23:27,840 --> 00:23:28,640
automatically

631
00:23:28,640 --> 00:23:32,080
execute the apple's archive utility to

632
00:23:32,080 --> 00:23:33,440
unzip the file

633
00:23:33,440 --> 00:23:35,520
basically says okay this is not an

634
00:23:35,520 --> 00:23:36,880
executable so

635
00:23:36,880 --> 00:23:39,200
i'm going to invoke the handler in this

636
00:23:39,200 --> 00:23:41,279
case it's the archive utility because we

637
00:23:41,279 --> 00:23:42,640
persisted a zip file

638
00:23:42,640 --> 00:23:45,760
which will extract that now we remember

639
00:23:45,760 --> 00:23:46,720
we want to create

640
00:23:46,720 --> 00:23:50,240
a launch agent but due to apple's sorry

641
00:23:50,240 --> 00:23:51,600
microsoft's recent

642
00:23:51,600 --> 00:23:53,840
patch we cannot directly write to the

643
00:23:53,840 --> 00:23:54,720
user's launch

644
00:23:54,720 --> 00:23:57,440
agent directory but if it doesn't exist

645
00:23:57,440 --> 00:23:59,360
which on a default version of mac os it

646
00:23:59,360 --> 00:24:00,159
does not

647
00:24:00,159 --> 00:24:03,120
we can drop the zip file one directory

648
00:24:03,120 --> 00:24:05,679
up in the user's library directory

649
00:24:05,679 --> 00:24:09,200
this is allowed from the sandbox

650
00:24:09,200 --> 00:24:11,679
so now we can place a zip file in the

651
00:24:11,679 --> 00:24:13,120
library directory

652
00:24:13,120 --> 00:24:17,520
and we can persist this as a login item

653
00:24:17,520 --> 00:24:19,600
so we're making progress so what do we

654
00:24:19,600 --> 00:24:20,880
put in the zip file

655
00:24:20,880 --> 00:24:24,240
a directory named launch agents and in

656
00:24:24,240 --> 00:24:25,039
that

657
00:24:25,039 --> 00:24:27,919
a launch agent property list so now when

658
00:24:27,919 --> 00:24:28,799
we persist

659
00:24:28,799 --> 00:24:32,000
this zip file as a login item on next

660
00:24:32,000 --> 00:24:34,240
login the archive utility will

661
00:24:34,240 --> 00:24:36,640
automatically be invoked this is allowed

662
00:24:36,640 --> 00:24:37,919
because it's an apple sign

663
00:24:37,919 --> 00:24:40,400
process and it will run outside the

664
00:24:40,400 --> 00:24:42,320
context of the sandbox

665
00:24:42,320 --> 00:24:45,120
which means it can do things like unzip

666
00:24:45,120 --> 00:24:46,799
our file

667
00:24:46,799 --> 00:24:48,720
and create the launch agent directory

668
00:24:48,720 --> 00:24:50,960
and our launch agent property list

669
00:24:50,960 --> 00:24:54,480
for us that is awesome

670
00:24:54,480 --> 00:24:57,200
so this completes the full exploit chain

671
00:24:57,200 --> 00:24:59,039
the user starts by opening this

672
00:24:59,039 --> 00:25:02,559
slk file containing the xlm macro

673
00:25:02,559 --> 00:25:05,120
which will execute automatically again

674
00:25:05,120 --> 00:25:06,159
no alert it just

675
00:25:06,159 --> 00:25:09,200
open the document this downloads and

676
00:25:09,200 --> 00:25:09,919
persists

677
00:25:09,919 --> 00:25:13,039
the specially crafted zip file as a

678
00:25:13,039 --> 00:25:14,000
login item

679
00:25:14,000 --> 00:25:16,000
on next login the archive utility will

680
00:25:16,000 --> 00:25:17,600
be automatically invoked and

681
00:25:17,600 --> 00:25:20,080
in the background we'll extract this zip

682
00:25:20,080 --> 00:25:21,120
file thereby

683
00:25:21,120 --> 00:25:24,480
creating a launch agent for us and on

684
00:25:24,480 --> 00:25:27,200
next login the huge the login agent will

685
00:25:27,200 --> 00:25:28,960
be automatically executed

686
00:25:28,960 --> 00:25:31,200
with our arguments which we can put in

687
00:25:31,200 --> 00:25:32,799
the property list

688
00:25:32,799 --> 00:25:35,360
and we'll execute our bash based

689
00:25:35,360 --> 00:25:38,240
interactive backdoor

690
00:25:38,240 --> 00:25:40,880
so this batch back door runs outside the

691
00:25:40,880 --> 00:25:42,080
sandbox

692
00:25:42,080 --> 00:25:44,880
meaning it can download and unquarantine

693
00:25:44,880 --> 00:25:45,679
files

694
00:25:45,679 --> 00:25:48,320
unquarantined files are not constrained

695
00:25:48,320 --> 00:25:50,080
by apple's notarization

696
00:25:50,080 --> 00:25:53,279
requirements so we have this interactive

697
00:25:53,279 --> 00:25:54,080
shell

698
00:25:54,080 --> 00:25:57,039
outside of the sandbox what do we do

699
00:25:57,039 --> 00:25:59,279
well we decided to persist

700
00:25:59,279 --> 00:26:00,799
something and i thought it'd be extra

701
00:26:00,799 --> 00:26:03,279
funny to persist a repurposed

702
00:26:03,279 --> 00:26:05,760
clearly not notarized version of

703
00:26:05,760 --> 00:26:06,640
windtail

704
00:26:06,640 --> 00:26:08,159
and you can see on the slide when i

705
00:26:08,159 --> 00:26:09,760
finally got this all working

706
00:26:09,760 --> 00:26:12,000
in the slack channel at work i was

707
00:26:12,000 --> 00:26:15,440
clearly pretty stoked

708
00:26:15,679 --> 00:26:17,440
all right so let's now talk kind of

709
00:26:17,440 --> 00:26:20,159
shift gears and talk about defending

710
00:26:20,159 --> 00:26:21,520
against these attacks

711
00:26:21,520 --> 00:26:26,159
and some generic methods of detection

712
00:26:26,159 --> 00:26:28,720
first thing as a responsible security

713
00:26:28,720 --> 00:26:29,440
researcher

714
00:26:29,440 --> 00:26:31,840
i reported all these vulnerabilities to

715
00:26:31,840 --> 00:26:33,840
microsoft and apple

716
00:26:33,840 --> 00:26:36,720
microsoft responded and said this is a

717
00:26:36,720 --> 00:26:38,000
known issue on the apple

718
00:26:38,000 --> 00:26:40,559
side and i was like well yeah because i

719
00:26:40,559 --> 00:26:42,159
told apple as well

720
00:26:42,159 --> 00:26:45,200
so i have no idea what microsoft did no

721
00:26:45,200 --> 00:26:45,919
cde

722
00:26:45,919 --> 00:26:49,360
no bug bounty bummer apple said

723
00:26:49,360 --> 00:26:52,400
thank you for your report and then

724
00:26:52,400 --> 00:26:55,760
nothing i waited a long time

725
00:26:55,760 --> 00:26:57,360
and checked back in with apple and said

726
00:26:57,360 --> 00:26:59,360
oh yeah we patched that back in

727
00:26:59,360 --> 00:27:02,640
you know 10.15.3 again

728
00:27:02,640 --> 00:27:08,640
no cve no bug bounty classic cupertino

729
00:27:09,520 --> 00:27:11,520
let's talk briefly though about how to

730
00:27:11,520 --> 00:27:12,880
detect this

731
00:27:12,880 --> 00:27:15,039
these attacks and perhaps other mac

732
00:27:15,039 --> 00:27:16,880
malware as well

733
00:27:16,880 --> 00:27:18,720
so the first thing let's talk about is

734
00:27:18,720 --> 00:27:20,080
process monitoring

735
00:27:20,080 --> 00:27:22,720
leveraging apple's new endpoint security

736
00:27:22,720 --> 00:27:24,000
framework

737
00:27:24,000 --> 00:27:25,760
turns out it's pretty easy to create a

738
00:27:25,760 --> 00:27:28,080
process monitor to detect something i

739
00:27:28,080 --> 00:27:28,480
call

740
00:27:28,480 --> 00:27:32,080
suspicious children suspicious children

741
00:27:32,080 --> 00:27:34,559
processes as we can see on the slide we

742
00:27:34,559 --> 00:27:35,760
can now detect

743
00:27:35,760 --> 00:27:38,559
when an office application for example

744
00:27:38,559 --> 00:27:39,600
excel

745
00:27:39,600 --> 00:27:42,799
spawns a child process that is well

746
00:27:42,799 --> 00:27:46,559
suspicious so regardless of the reason

747
00:27:46,559 --> 00:27:48,159
you know of the exploit if it was a

748
00:27:48,159 --> 00:27:49,919
macro buffer overflow

749
00:27:49,919 --> 00:27:53,440
if you see excel spawning curl and then

750
00:27:53,440 --> 00:27:56,320
python you know that's bad news

751
00:27:56,320 --> 00:27:56,880
something

752
00:27:56,880 --> 00:27:59,679
is amiss

753
00:28:00,080 --> 00:28:02,159
we can also detect a wide range of

754
00:28:02,159 --> 00:28:04,320
attacks including the exploit chain we

755
00:28:04,320 --> 00:28:05,600
just talked about this

756
00:28:05,600 --> 00:28:08,320
by monitoring the file system for

757
00:28:08,320 --> 00:28:09,360
persistence

758
00:28:09,360 --> 00:28:11,520
persistence is just the way that malware

759
00:28:11,520 --> 00:28:13,360
or perhaps an exploit chain

760
00:28:13,360 --> 00:28:15,440
escapes out of the sandbox or ensures

761
00:28:15,440 --> 00:28:17,440
that it's automatically re-executed when

762
00:28:17,440 --> 00:28:19,120
the system is rebooted

763
00:28:19,120 --> 00:28:21,840
or the user re-logs in so again we can

764
00:28:21,840 --> 00:28:23,679
use apple's new endpoint security

765
00:28:23,679 --> 00:28:24,320
framework

766
00:28:24,320 --> 00:28:26,000
and we can monitor for files

767
00:28:26,000 --> 00:28:27,440
specifically related for

768
00:28:27,440 --> 00:28:30,240
ones to persistence so here for example

769
00:28:30,240 --> 00:28:32,720
on the slide we can detect now that

770
00:28:32,720 --> 00:28:36,240
a login item was created that does not

771
00:28:36,240 --> 00:28:38,720
point to an application or a binary

772
00:28:38,720 --> 00:28:39,279
which is

773
00:28:39,279 --> 00:28:41,120
normally the case when a login item is

774
00:28:41,120 --> 00:28:42,640
created but instead

775
00:28:42,640 --> 00:28:45,039
to a zip file this is a huge red flag

776
00:28:45,039 --> 00:28:46,080
and kind of

777
00:28:46,080 --> 00:28:49,360
you know shows that our exploit is

778
00:28:49,360 --> 00:28:53,360
executing so at jamp

779
00:28:53,360 --> 00:28:56,080
we implement such monitoring logic in a

780
00:28:56,080 --> 00:28:57,039
framework we call

781
00:28:57,039 --> 00:29:00,159
monitor kit we then feed that monitoring

782
00:29:00,159 --> 00:29:00,960
data

783
00:29:00,960 --> 00:29:03,919
as well as our analytics and rules into

784
00:29:03,919 --> 00:29:04,559
apple's

785
00:29:04,559 --> 00:29:07,600
game logic engine for evaluation

786
00:29:07,600 --> 00:29:10,080
this gives us a powerful endpoint

787
00:29:10,080 --> 00:29:12,000
detection capability

788
00:29:12,000 --> 00:29:15,039
uniquely tailored for mac os and kind of

789
00:29:15,039 --> 00:29:16,159
neat not to really brag

790
00:29:16,159 --> 00:29:18,480
but based on our current rules we were

791
00:29:18,480 --> 00:29:20,159
actually able to detect this

792
00:29:20,159 --> 00:29:24,640
exploit chain with no a priori knowledge

793
00:29:24,840 --> 00:29:27,120
pretty all right so let's

794
00:29:27,120 --> 00:29:30,320
wrap everything up so today we kind of

795
00:29:30,320 --> 00:29:31,279
talked about the

796
00:29:31,279 --> 00:29:33,760
current state of affairs in the land of

797
00:29:33,760 --> 00:29:35,840
macro based attacks and we showed that

798
00:29:35,840 --> 00:29:38,320
they are becoming more and more popular

799
00:29:38,320 --> 00:29:40,480
in the sense of targeting specifically

800
00:29:40,480 --> 00:29:44,159
mac os users but luckily current attacks

801
00:29:44,159 --> 00:29:47,039
are rather late however we should not be

802
00:29:47,039 --> 00:29:49,279
lulled into a sense of complacency

803
00:29:49,279 --> 00:29:50,240
because

804
00:29:50,240 --> 00:29:51,840
you know showed us pretty easy to

805
00:29:51,840 --> 00:29:53,279
actually create a

806
00:29:53,279 --> 00:29:56,320
zero click exploit chain that

807
00:29:56,320 --> 00:29:58,720
if the user would open a document would

808
00:29:58,720 --> 00:29:59,840
both escape

809
00:29:59,840 --> 00:30:02,960
the sandbox and bypass

810
00:30:02,960 --> 00:30:04,640
all of apple's recent security

811
00:30:04,640 --> 00:30:06,480
mechanisms again

812
00:30:06,480 --> 00:30:08,960
at the time on a fully patched mac os

813
00:30:08,960 --> 00:30:09,919
system

814
00:30:09,919 --> 00:30:11,600
however we ended by showing that by

815
00:30:11,600 --> 00:30:13,919
leveraging apple's new endpoint security

816
00:30:13,919 --> 00:30:14,559
framework

817
00:30:14,559 --> 00:30:16,799
we can generically detect these and

818
00:30:16,799 --> 00:30:19,679
other attacks

819
00:30:19,679 --> 00:30:22,320
i briefly want to thank a variety of

820
00:30:22,320 --> 00:30:22,720
people

821
00:30:22,720 --> 00:30:25,120
first and foremost you all for virtually

822
00:30:25,120 --> 00:30:26,240
attending my talk

823
00:30:26,240 --> 00:30:28,640
hope you're all staying safe and healthy

824
00:30:28,640 --> 00:30:29,600
also to jam

825
00:30:29,600 --> 00:30:32,399
for putting up with my many shenanigans

826
00:30:32,399 --> 00:30:34,320
and also all the amazing companies

827
00:30:34,320 --> 00:30:37,919
that support objective c

828
00:30:37,919 --> 00:30:40,159
oh and one more thing today i am

829
00:30:40,159 --> 00:30:42,000
announcing my new book

830
00:30:42,000 --> 00:30:45,120
the art of mac malware analysis

831
00:30:45,120 --> 00:30:48,240
my dog is very excited about it as well

832
00:30:48,240 --> 00:30:52,200
i published the first part online at

833
00:30:52,200 --> 00:30:54,559
taum.org and the rest of the chapters

834
00:30:54,559 --> 00:30:55,679
will be published

835
00:30:55,679 --> 00:30:58,720
shortly as well all 100 free

836
00:30:58,720 --> 00:31:00,880
sharing is caring so if you're

837
00:31:00,880 --> 00:31:02,559
interested in learning more about

838
00:31:02,559 --> 00:31:05,519
mac malware exploits persistence

839
00:31:05,519 --> 00:31:07,360
debuggers disassembling

840
00:31:07,360 --> 00:31:10,480
check out the site

841
00:31:10,480 --> 00:31:12,480
so again that is a wrap thank you so

842
00:31:12,480 --> 00:31:13,919
much for attending my talk

843
00:31:13,919 --> 00:31:16,840
and hopefully see you in person at

844
00:31:16,840 --> 00:31:18,240
blackhat2021

845
00:31:18,240 --> 00:31:20,720
aloha

846
00:31:22,240 --> 00:31:23,840
well thank you for attending my talk uh

847
00:31:23,840 --> 00:31:26,559
we now have a live q a session so if

848
00:31:26,559 --> 00:31:27,279
there's any

849
00:31:27,279 --> 00:31:30,880
questions about my research or my talks

850
00:31:30,880 --> 00:31:33,840
ask away

851
00:32:06,770 --> 00:32:09,889
[Music]

852
00:32:12,880 --> 00:32:15,840
2020.

853
00:32:30,480 --> 00:32:32,880
awesome

854
00:32:34,720 --> 00:32:38,320
hooray thank you for attending though

855
00:32:38,320 --> 00:32:39,519
and for the feedback

856
00:32:39,519 --> 00:32:42,080
um like we said we will put up the

857
00:32:42,080 --> 00:32:44,159
slides online

858
00:32:44,159 --> 00:32:48,399
so this question from sean that says

859
00:32:48,880 --> 00:32:50,480
how did you come up with ideas for

860
00:32:50,480 --> 00:32:52,799
research start with existing exploit or

861
00:32:52,799 --> 00:32:54,399
try to come up with

862
00:32:54,399 --> 00:32:57,840
something new so that's a great question

863
00:32:57,840 --> 00:33:00,080
um so i was kind of looking at these

864
00:33:00,080 --> 00:33:00,960
macro-based

865
00:33:00,960 --> 00:33:04,559
attacks these uh you know

866
00:33:04,559 --> 00:33:07,039
document-based attacks and it seems they

867
00:33:07,039 --> 00:33:07,679
would be

868
00:33:07,679 --> 00:33:09,840
kind of still a threat and luckily

869
00:33:09,840 --> 00:33:11,440
because all the patches were

870
00:33:11,440 --> 00:33:14,799
applied um they

871
00:33:14,799 --> 00:33:17,519
were as we mentioned kind of um not

872
00:33:17,519 --> 00:33:18,399
really

873
00:33:18,399 --> 00:33:21,840
going to work against patched systems so

874
00:33:21,840 --> 00:33:23,919
what i did was started kind of looking

875
00:33:23,919 --> 00:33:25,200
and you know

876
00:33:25,200 --> 00:33:26,880
where to get the ideas i said okay we

877
00:33:26,880 --> 00:33:30,000
needed a sandbox escape so i looked at

878
00:33:30,000 --> 00:33:33,279
uh apple sorry adam's base sandbox

879
00:33:33,279 --> 00:33:35,519
escape and said okay well this is a good

880
00:33:35,519 --> 00:33:36,960
place to start let me see how

881
00:33:36,960 --> 00:33:39,440
microsoft fix this this is actually a

882
00:33:39,440 --> 00:33:41,039
really good approach

883
00:33:41,039 --> 00:33:44,080
a lot of times vendors will patch

884
00:33:44,080 --> 00:33:47,279
a vulnerability but

885
00:33:47,279 --> 00:33:50,240
that won't do so in maybe the best of

886
00:33:50,240 --> 00:33:51,120
ways

887
00:33:51,120 --> 00:33:53,679
so for example they will you know patch

888
00:33:53,679 --> 00:33:55,440
one specific code path

889
00:33:55,440 --> 00:33:58,799
but not actually really address the

890
00:33:58,799 --> 00:34:00,320
systemic or underlying cause and that

891
00:34:00,320 --> 00:34:01,120
was exactly

892
00:34:01,120 --> 00:34:03,600
what happened in this case so basically

893
00:34:03,600 --> 00:34:05,360
looked at how microsoft patched it and

894
00:34:05,360 --> 00:34:06,880
that was the idea you know

895
00:34:06,880 --> 00:34:09,040
looking at the patch for the existing

896
00:34:09,040 --> 00:34:09,918
escape and then

897
00:34:09,918 --> 00:34:12,800
i saw it wasn't really comprehensive so

898
00:34:12,800 --> 00:34:13,119
that

899
00:34:13,119 --> 00:34:16,320
allowed me to find a sandbox escape

900
00:34:16,320 --> 00:34:17,839
then i basically said okay i need to

901
00:34:17,839 --> 00:34:19,520
create a way to kind of break out or get

902
00:34:19,520 --> 00:34:22,239
around apple's notarization requirements

903
00:34:22,239 --> 00:34:23,679
and you know i just really kind of

904
00:34:23,679 --> 00:34:25,440
thought long and hard about it for a few

905
00:34:25,440 --> 00:34:27,280
different days

906
00:34:27,280 --> 00:34:28,719
and there had been some previous

907
00:34:28,719 --> 00:34:31,280
research using the archive utility

908
00:34:31,280 --> 00:34:33,040
so what i try to do is really just stay

909
00:34:33,040 --> 00:34:34,560
abreast of other people's

910
00:34:34,560 --> 00:34:37,119
security research and then also look at

911
00:34:37,119 --> 00:34:38,639
how vendors patch and fix

912
00:34:38,639 --> 00:34:42,079
things so when i find a bug or kind of

913
00:34:42,079 --> 00:34:44,719
need pieces to put an exploit chain

914
00:34:44,719 --> 00:34:46,560
together i kind of have all these ideas

915
00:34:46,560 --> 00:34:49,040
ideas and generally something falls

916
00:34:49,040 --> 00:34:50,560
together

917
00:34:50,560 --> 00:34:52,320
so great question that's kind of where i

918
00:34:52,320 --> 00:34:54,320
get the questions next question

919
00:34:54,320 --> 00:34:57,520
why did you not assign cdes that's

920
00:34:57,520 --> 00:34:59,200
actually a great question

921
00:34:59,200 --> 00:35:02,320
uh so you know like i said i reported

922
00:35:02,320 --> 00:35:03,760
this vulnerability to apple they said

923
00:35:03,760 --> 00:35:04,960
this issue was not

924
00:35:04,960 --> 00:35:08,160
cd worthy uh you know it's apple's

925
00:35:08,160 --> 00:35:10,400
prerogative apparently um you know

926
00:35:10,400 --> 00:35:11,200
they've given me

927
00:35:11,200 --> 00:35:13,920
cds in the past so i'm not sure exactly

928
00:35:13,920 --> 00:35:15,359
what the reasoning was here i asked for

929
00:35:15,359 --> 00:35:16,400
clarification

930
00:35:16,400 --> 00:35:18,560
they basically said that they provided

931
00:35:18,560 --> 00:35:19,599
some mitigations

932
00:35:19,599 --> 00:35:22,880
to prevent the sandbox escape

933
00:35:22,880 --> 00:35:25,920
i would already obviously argue that a

934
00:35:25,920 --> 00:35:28,720
generic sandbox escape that allows you

935
00:35:28,720 --> 00:35:29,119
to

936
00:35:29,119 --> 00:35:31,839
break out of an app sandbox and persist

937
00:35:31,839 --> 00:35:33,440
unsigned malware is

938
00:35:33,440 --> 00:35:34,960
a security risk which probably should

939
00:35:34,960 --> 00:35:37,680
have a cd but apple did provide

940
00:35:37,680 --> 00:35:41,119
an um mitigation but you know under

941
00:35:41,119 --> 00:35:43,760
infinite wisdom decided not to

942
00:35:43,760 --> 00:35:47,680
give a cde so yeah maybe i could uh

943
00:35:47,680 --> 00:35:50,240
see if i can apply myself a cd that's

944
00:35:50,240 --> 00:35:52,560
actually a great idea

945
00:35:52,560 --> 00:35:54,640
it would i'm sure make apple really

946
00:35:54,640 --> 00:35:55,599
happy

947
00:35:55,599 --> 00:35:58,079
all right next question um troy asks are

948
00:35:58,079 --> 00:35:59,440
you seeing an increase

949
00:35:59,440 --> 00:36:01,680
of max and thus cyber attacks increasing

950
00:36:01,680 --> 00:36:04,079
on mac os endpoint as well

951
00:36:04,079 --> 00:36:06,560
if so could it be correlated with work

952
00:36:06,560 --> 00:36:07,599
from home

953
00:36:07,599 --> 00:36:09,520
so we're seeing this definite trend of

954
00:36:09,520 --> 00:36:10,720
increase of max

955
00:36:10,720 --> 00:36:12,800
in the enterprise and i think this is

956
00:36:12,800 --> 00:36:14,880
driven by a few different

957
00:36:14,880 --> 00:36:18,000
um reasons uh one is you know you go to

958
00:36:18,000 --> 00:36:19,520
any college campus

959
00:36:19,520 --> 00:36:21,680
walk into a classroom pretty much

960
00:36:21,680 --> 00:36:23,040
everyone's using max right

961
00:36:23,040 --> 00:36:25,040
so that trend probably started you know

962
00:36:25,040 --> 00:36:26,160
maybe five years ago

963
00:36:26,160 --> 00:36:28,480
and as those college graduates graduate

964
00:36:28,480 --> 00:36:29,599
and enter the workforce

965
00:36:29,599 --> 00:36:31,520
a lot of them want to use mac computers

966
00:36:31,520 --> 00:36:33,200
right microsoft's

967
00:36:33,200 --> 00:36:34,640
computers are maybe seen as a little

968
00:36:34,640 --> 00:36:37,200
more and outdated

969
00:36:37,200 --> 00:36:39,359
so maybe that's one driver also apple

970
00:36:39,359 --> 00:36:40,480
has definitely made

971
00:36:40,480 --> 00:36:43,280
a lot of pushes into uh the enterprise

972
00:36:43,280 --> 00:36:43,680
so

973
00:36:43,680 --> 00:36:47,040
end result we're seeing max rate

974
00:36:47,040 --> 00:36:49,599
in the enterprise the hackers are very

975
00:36:49,599 --> 00:36:51,200
opportunistic

976
00:36:51,200 --> 00:36:53,920
and have taken note of this trend so you

977
00:36:53,920 --> 00:36:55,040
know they're starting to

978
00:36:55,040 --> 00:36:58,000
take their window windows based attack

979
00:36:58,000 --> 00:36:59,200
factors for example

980
00:36:59,200 --> 00:37:00,880
macro base attacks which they've had

981
00:37:00,880 --> 00:37:03,359
great success targeting windows pcs

982
00:37:03,359 --> 00:37:05,119
and saying hey look maps are now common

983
00:37:05,119 --> 00:37:06,880
in the enterprise

984
00:37:06,880 --> 00:37:08,800
yes perhaps especially now is people are

985
00:37:08,800 --> 00:37:10,000
more working from home

986
00:37:10,000 --> 00:37:12,160
a lot of people have personal macs that

987
00:37:12,160 --> 00:37:13,440
maybe they can now use

988
00:37:13,440 --> 00:37:16,000
for uh their their work their job their

989
00:37:16,000 --> 00:37:18,000
enterprise type work

990
00:37:18,000 --> 00:37:19,520
and so we're definitely seeing a trend

991
00:37:19,520 --> 00:37:21,680
and this talk was kind of illustrative

992
00:37:21,680 --> 00:37:22,320
of that

993
00:37:22,320 --> 00:37:24,320
where they're bringing their traditional

994
00:37:24,320 --> 00:37:26,000
window-based attacks

995
00:37:26,000 --> 00:37:29,520
and infection vectors for example macros

996
00:37:29,520 --> 00:37:32,000
and now are specifically targeting mac

997
00:37:32,000 --> 00:37:32,720
users so

998
00:37:32,720 --> 00:37:36,480
this is a trend i expect to see both the

999
00:37:36,480 --> 00:37:38,560
creation of brand new mac specific

1000
00:37:38,560 --> 00:37:41,200
infection vectors and attack scenarios

1001
00:37:41,200 --> 00:37:43,520
but also attackers bringing their proven

1002
00:37:43,520 --> 00:37:44,480
windows based

1003
00:37:44,480 --> 00:37:47,119
techniques and if possible porting those

1004
00:37:47,119 --> 00:37:48,839
to target

1005
00:37:48,839 --> 00:37:51,839
macos next question

1006
00:37:51,839 --> 00:37:53,359
uh have you looked at other apps that

1007
00:37:53,359 --> 00:37:55,520
have minimal or weakened runtime

1008
00:37:55,520 --> 00:37:57,040
configurations

1009
00:37:57,040 --> 00:37:58,960
for example firefox has somewhat weak

1010
00:37:58,960 --> 00:38:00,960
defaults that's actually a really good

1011
00:38:00,960 --> 00:38:01,520
question

1012
00:38:01,520 --> 00:38:04,480
uh thanks william and the question is

1013
00:38:04,480 --> 00:38:05,760
basically asking about

1014
00:38:05,760 --> 00:38:09,040
applications sandbox profiles

1015
00:38:09,040 --> 00:38:11,920
and also how they are compiled so in

1016
00:38:11,920 --> 00:38:13,280
catalina

1017
00:38:13,280 --> 00:38:17,200
apple introduced this concept called the

1018
00:38:17,200 --> 00:38:18,000
hardened runtime

1019
00:38:18,000 --> 00:38:19,839
i believe it was in catalina where

1020
00:38:19,839 --> 00:38:21,760
applications can basically

1021
00:38:21,760 --> 00:38:23,839
be recompiled with these extra

1022
00:38:23,839 --> 00:38:24,800
protections

1023
00:38:24,800 --> 00:38:27,359
for example that prevent uh dilib

1024
00:38:27,359 --> 00:38:28,720
injection attacks or

1025
00:38:28,720 --> 00:38:31,760
other kind of injection-based uh attacks

1026
00:38:31,760 --> 00:38:33,599
but this means that the applications

1027
00:38:33,599 --> 00:38:36,640
have to kind of opt in and be recompiled

1028
00:38:36,640 --> 00:38:37,920
so what i do is i look at a lot of

1029
00:38:37,920 --> 00:38:40,720
applications and for ones that are not

1030
00:38:40,720 --> 00:38:42,640
compiled with this hardened runtime

1031
00:38:42,640 --> 00:38:46,079
really opens up a broad attack

1032
00:38:46,079 --> 00:38:49,119
attack surface recently i looked at zoom

1033
00:38:49,119 --> 00:38:51,440
this is probably now four or five months

1034
00:38:51,440 --> 00:38:53,599
ago and it turned out they had an

1035
00:38:53,599 --> 00:38:55,599
exception in their hard run time

1036
00:38:55,599 --> 00:38:56,640
configuration

1037
00:38:56,640 --> 00:38:58,880
that allowed for the loading or

1038
00:38:58,880 --> 00:39:01,520
injection of arbitrary dynamic libraries

1039
00:39:01,520 --> 00:39:03,040
zoom was an interesting case study

1040
00:39:03,040 --> 00:39:04,720
because on a system they are

1041
00:39:04,720 --> 00:39:08,000
granted access to the mic in the webcam

1042
00:39:08,000 --> 00:39:09,760
however because they had this weak kind

1043
00:39:09,760 --> 00:39:11,040
of part and runtime

1044
00:39:11,040 --> 00:39:14,640
policy i or any malware that was

1045
00:39:14,640 --> 00:39:17,440
existing on the system could piggyback

1046
00:39:17,440 --> 00:39:17,839
off

1047
00:39:17,839 --> 00:39:20,720
of zoom's kind of weak hard runtime

1048
00:39:20,720 --> 00:39:21,599
configuration

1049
00:39:21,599 --> 00:39:23,280
and load a dynamic library into the

1050
00:39:23,280 --> 00:39:25,119
process context of zoom

1051
00:39:25,119 --> 00:39:26,960
since zoom was allowed to access the mic

1052
00:39:26,960 --> 00:39:29,520
or the webcam the

1053
00:39:29,520 --> 00:39:31,200
malicious dynamic library which is

1054
00:39:31,200 --> 00:39:32,960
running now within zoom

1055
00:39:32,960 --> 00:39:36,640
could also do that so really good point

1056
00:39:36,640 --> 00:39:38,480
it's really good to look at applications

1057
00:39:38,480 --> 00:39:40,240
that are configured with

1058
00:39:40,240 --> 00:39:42,640
without the hardened run time or also if

1059
00:39:42,640 --> 00:39:43,920
they are configured

1060
00:39:43,920 --> 00:39:46,400
with the sandbox take a look at their

1061
00:39:46,400 --> 00:39:47,359
sandbox

1062
00:39:47,359 --> 00:39:49,839
policy for example in this talk the

1063
00:39:49,839 --> 00:39:51,839
reason we were able to break out of

1064
00:39:51,839 --> 00:39:55,200
the office sandbox was uh specifically

1065
00:39:55,200 --> 00:39:56,079
because of

1066
00:39:56,079 --> 00:39:58,400
kind of an exception in microsoft's

1067
00:39:58,400 --> 00:39:59,359
sandbox

1068
00:39:59,359 --> 00:40:01,200
policy so that's always a really good

1069
00:40:01,200 --> 00:40:02,880
thing to look at it's a really good

1070
00:40:02,880 --> 00:40:03,760
question

1071
00:40:03,760 --> 00:40:06,319
uh next question can you compare and

1072
00:40:06,319 --> 00:40:07,119
contrast

1073
00:40:07,119 --> 00:40:09,440
the new security features native to

1074
00:40:09,440 --> 00:40:10,800
catalina versus

1075
00:40:10,800 --> 00:40:14,560
jam implementations um

1076
00:40:14,560 --> 00:40:17,760
i'm not 100 sure about that but

1077
00:40:17,760 --> 00:40:19,599
let me at least talk a little bit about

1078
00:40:19,599 --> 00:40:20,880
catalina's

1079
00:40:20,880 --> 00:40:23,119
new security features and then i can

1080
00:40:23,119 --> 00:40:24,079
also talk about

1081
00:40:24,079 --> 00:40:26,720
what we do at jam to benefit or leverage

1082
00:40:26,720 --> 00:40:27,440
those

1083
00:40:27,440 --> 00:40:29,839
in our endpoint security products so

1084
00:40:29,839 --> 00:40:31,359
catalina does a lot of great things

1085
00:40:31,359 --> 00:40:34,240
we mentioned the notarization that will

1086
00:40:34,240 --> 00:40:34,880
stop

1087
00:40:34,880 --> 00:40:37,760
a lot of attacks where the user is

1088
00:40:37,760 --> 00:40:38,319
basically

1089
00:40:38,319 --> 00:40:41,520
tricked into running a piece of malware

1090
00:40:41,520 --> 00:40:43,440
i'm sure you're all familiar with like

1091
00:40:43,440 --> 00:40:45,359
hey

1092
00:40:45,359 --> 00:40:47,040
browse the website there's a pop-up

1093
00:40:47,040 --> 00:40:49,359
saying flash is out of date

1094
00:40:49,359 --> 00:40:51,760
download and install this flash update

1095
00:40:51,760 --> 00:40:53,520
and obviously it's generally not flash

1096
00:40:53,520 --> 00:40:54,319
it's malware

1097
00:40:54,319 --> 00:40:56,000
so in this case the user is basically

1098
00:40:56,000 --> 00:40:58,160
tricked or socially engineered into

1099
00:40:58,160 --> 00:41:00,000
infecting themselves so notarization

1100
00:41:00,000 --> 00:41:02,079
will now block these attacks which is

1101
00:41:02,079 --> 00:41:03,920
which is really good so that's probably

1102
00:41:03,920 --> 00:41:05,119
the main feature

1103
00:41:05,119 --> 00:41:06,880
security feature i see at least in the

1104
00:41:06,880 --> 00:41:09,119
context of

1105
00:41:09,119 --> 00:41:12,079
malware but as we showed in this talk

1106
00:41:12,079 --> 00:41:13,839
exploit based attacks

1107
00:41:13,839 --> 00:41:16,400
which we'll probably see an uptick in

1108
00:41:16,400 --> 00:41:16,960
are

1109
00:41:16,960 --> 00:41:18,960
generally able to bypass the

1110
00:41:18,960 --> 00:41:20,960
notarization constraints

1111
00:41:20,960 --> 00:41:24,000
there's also some very creative adware

1112
00:41:24,000 --> 00:41:26,000
malware that we've seen that basically

1113
00:41:26,000 --> 00:41:27,760
instructs the user how to

1114
00:41:27,760 --> 00:41:29,920
bypass notarization so if you kind of

1115
00:41:29,920 --> 00:41:31,760
like right click on the file and click

1116
00:41:31,760 --> 00:41:32,319
open

1117
00:41:32,319 --> 00:41:33,920
it'll give you a prompt that says hey

1118
00:41:33,920 --> 00:41:35,280
are you sure you want to allow this and

1119
00:41:35,280 --> 00:41:36,319
you can click ok

1120
00:41:36,319 --> 00:41:38,720
even if the application or the package

1121
00:41:38,720 --> 00:41:39,839
is not notarized

1122
00:41:39,839 --> 00:41:42,640
so we've seen malware basically instruct

1123
00:41:42,640 --> 00:41:43,920
the user how to

1124
00:41:43,920 --> 00:41:46,960
install that so there are ways to kind

1125
00:41:46,960 --> 00:41:49,200
of bypass there's still maybe some gaps

1126
00:41:49,200 --> 00:41:52,800
so what we do at jf is as i mentioned we

1127
00:41:52,800 --> 00:41:54,400
we leverage apple's new endpoint

1128
00:41:54,400 --> 00:41:56,160
security framework which is also a new

1129
00:41:56,160 --> 00:41:57,200
security

1130
00:41:57,200 --> 00:41:59,599
feature of catalina and this allows us

1131
00:41:59,599 --> 00:42:01,599
to very efficiently do things like

1132
00:42:01,599 --> 00:42:04,800
monitor for new processes monitor for

1133
00:42:04,800 --> 00:42:06,400
persistence attempts

1134
00:42:06,400 --> 00:42:08,960
so for example if we see a process being

1135
00:42:08,960 --> 00:42:10,880
started that is unnotarized

1136
00:42:10,880 --> 00:42:12,400
that's something we're going to flag

1137
00:42:12,400 --> 00:42:14,560
like we don't care how

1138
00:42:14,560 --> 00:42:17,359
it was run if it was the user kind of

1139
00:42:17,359 --> 00:42:18,319
right clicking

1140
00:42:18,319 --> 00:42:20,800
and launching it kind of sidestepping

1141
00:42:20,800 --> 00:42:22,240
the catalina requirements

1142
00:42:22,240 --> 00:42:24,560
or if it was an exploit like the one we

1143
00:42:24,560 --> 00:42:25,760
talked about today

1144
00:42:25,760 --> 00:42:27,119
we basically just don't care we're

1145
00:42:27,119 --> 00:42:28,880
basically saying hey look

1146
00:42:28,880 --> 00:42:31,200
unnotarized code is running you know

1147
00:42:31,200 --> 00:42:32,560
this should normally be blocked

1148
00:42:32,560 --> 00:42:35,200
clearly the attacker or the malware

1149
00:42:35,200 --> 00:42:35,760
found a way

1150
00:42:35,760 --> 00:42:38,000
around this you know you'd be interested

1151
00:42:38,000 --> 00:42:38,800
to figure out how

1152
00:42:38,800 --> 00:42:41,200
and why but right now let's let's block

1153
00:42:41,200 --> 00:42:42,400
that because that's not something that

1154
00:42:42,400 --> 00:42:45,680
normally shouldn't run

