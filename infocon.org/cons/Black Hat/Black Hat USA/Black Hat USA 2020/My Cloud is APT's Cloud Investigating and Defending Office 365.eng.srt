1
00:00:04,000 --> 00:00:13,800
[Music]

2
00:00:15,280 --> 00:00:17,199
all right welcome everyone to our talk

3
00:00:17,199 --> 00:00:19,439
my cloud is apt's cloud attacking and

4
00:00:19,439 --> 00:00:22,240
defending office 365.

5
00:00:22,240 --> 00:00:24,480
my name is doug beanstalk and i am a

6
00:00:24,480 --> 00:00:26,400
incident response manager at mandia

7
00:00:26,400 --> 00:00:28,640
so i spend most of my time leading

8
00:00:28,640 --> 00:00:30,320
incident response engagements out of our

9
00:00:30,320 --> 00:00:32,000
new york city office for our clients

10
00:00:32,000 --> 00:00:32,800
there

11
00:00:32,800 --> 00:00:34,160
but i also do a little bit of dabbling

12
00:00:34,160 --> 00:00:37,120
in red teaming and some research as well

13
00:00:37,120 --> 00:00:38,719
and i've developed a pretty strong

14
00:00:38,719 --> 00:00:41,120
love-hate relationship with office 365

15
00:00:41,120 --> 00:00:42,719
over the past few years and i hope that

16
00:00:42,719 --> 00:00:43,680
after this talk

17
00:00:43,680 --> 00:00:46,160
you'll understand a little bit why

18
00:00:46,160 --> 00:00:47,920
outside of infosec i'm a huge green bay

19
00:00:47,920 --> 00:00:48,800
packers fan

20
00:00:48,800 --> 00:00:50,399
so if during the qa you want to ask me

21
00:00:50,399 --> 00:00:51,920
anything about aaron rodgers

22
00:00:51,920 --> 00:00:53,360
it might not be the best use of our time

23
00:00:53,360 --> 00:00:55,280
but i say go for it

24
00:00:55,280 --> 00:00:56,480
now i'm going to turn it over to my

25
00:00:56,480 --> 00:00:58,000
co-speaker josh who will introduce

26
00:00:58,000 --> 00:00:58,559
himself

27
00:00:58,559 --> 00:01:00,640
and get us started with some content

28
00:01:00,640 --> 00:01:02,640
josh

29
00:01:02,640 --> 00:01:04,879
thanks doug my name is josh madeley i'm

30
00:01:04,879 --> 00:01:06,159
an incident response manager

31
00:01:06,159 --> 00:01:08,240
at mandiant based out of our boston

32
00:01:08,240 --> 00:01:09,520
office and i've been with the company

33
00:01:09,520 --> 00:01:12,799
for about four and a half years

34
00:01:12,799 --> 00:01:14,240
i like to think of myself as a bit of a

35
00:01:14,240 --> 00:01:16,960
cloud connoisseur

36
00:01:16,960 --> 00:01:18,880
since i do love all things cloud and i

37
00:01:18,880 --> 00:01:20,479
genuinely believe that it is the

38
00:01:20,479 --> 00:01:21,680
solution to many

39
00:01:21,680 --> 00:01:24,960
modern i.t problems but with that comes

40
00:01:24,960 --> 00:01:26,000
the realization that

41
00:01:26,000 --> 00:01:27,920
it has its own unique security

42
00:01:27,920 --> 00:01:29,680
implications

43
00:01:29,680 --> 00:01:31,680
uh outside of infosec i'm a die-hard

44
00:01:31,680 --> 00:01:33,119
rugby fan and

45
00:01:33,119 --> 00:01:35,040
you know based out of boston i've had to

46
00:01:35,040 --> 00:01:37,759
adopt the new england patriots as my

47
00:01:37,759 --> 00:01:41,840
american football team of choice

48
00:01:42,000 --> 00:01:43,439
so today we're going to be talking about

49
00:01:43,439 --> 00:01:45,759
how targeted threat actors attack office

50
00:01:45,759 --> 00:01:47,439
365.

51
00:01:47,439 --> 00:01:49,040
to do that we're going to give you a

52
00:01:49,040 --> 00:01:50,560
crash course overview of

53
00:01:50,560 --> 00:01:53,680
office 365 then talk about how attackers

54
00:01:53,680 --> 00:01:54,159
gain

55
00:01:54,159 --> 00:01:56,399
their initial access to a tenant and

56
00:01:56,399 --> 00:01:57,920
finally how they complete their mission

57
00:01:57,920 --> 00:01:59,680
and steal data

58
00:01:59,680 --> 00:02:01,280
we want all of you to walk away from

59
00:02:01,280 --> 00:02:03,439
this presentation with the understanding

60
00:02:03,439 --> 00:02:05,520
that targeted threat groups are

61
00:02:05,520 --> 00:02:07,280
investing a lot of time and money into

62
00:02:07,280 --> 00:02:08,000
understanding

63
00:02:08,000 --> 00:02:10,000
office 365 and understanding how to

64
00:02:10,000 --> 00:02:11,520
attack it

65
00:02:11,520 --> 00:02:14,640
and that means that you need to as well

66
00:02:14,640 --> 00:02:16,640
now one of the major misconceptions

67
00:02:16,640 --> 00:02:18,720
about office 365

68
00:02:18,720 --> 00:02:21,920
is that it is just email well that may

69
00:02:21,920 --> 00:02:23,200
be true for some small

70
00:02:23,200 --> 00:02:25,680
organizations for many it is their

71
00:02:25,680 --> 00:02:26,720
entire

72
00:02:26,720 --> 00:02:28,160
authentication and collaboration

73
00:02:28,160 --> 00:02:32,400
platform this includes exchange online

74
00:02:32,400 --> 00:02:35,680
active directory online microsoft teams

75
00:02:35,680 --> 00:02:39,760
sharepoint online word online

76
00:02:39,760 --> 00:02:42,400
you get the point microsoft has moved

77
00:02:42,400 --> 00:02:43,440
their traditionally

78
00:02:43,440 --> 00:02:47,519
on-premise applications into the cloud

79
00:02:47,519 --> 00:02:49,519
and provided them as a software as a

80
00:02:49,519 --> 00:02:51,120
service model

81
00:02:51,120 --> 00:02:52,879
now one of the important features of

82
00:02:52,879 --> 00:02:54,400
office 365

83
00:02:54,400 --> 00:02:56,640
is that it is accessible from anywhere

84
00:02:56,640 --> 00:02:57,519
in the world

85
00:02:57,519 --> 00:02:59,440
there are no access restrictions unless

86
00:02:59,440 --> 00:03:01,360
your organization intentionally

87
00:03:01,360 --> 00:03:03,280
implements them

88
00:03:03,280 --> 00:03:05,760
this means that identity and its

89
00:03:05,760 --> 00:03:07,519
corresponding metadata are used to

90
00:03:07,519 --> 00:03:08,480
determine

91
00:03:08,480 --> 00:03:11,280
if a user has rights to access their

92
00:03:11,280 --> 00:03:13,280
email or a word document

93
00:03:13,280 --> 00:03:16,959
from a hotel wi-fi or an airplane

94
00:03:16,959 --> 00:03:20,879
no vpn required with that though

95
00:03:20,879 --> 00:03:22,400
we want to spend a few minutes talking

96
00:03:22,400 --> 00:03:24,319
about authentication and the two

97
00:03:24,319 --> 00:03:27,200
common hybrid identity models that we

98
00:03:27,200 --> 00:03:28,879
see organizations using

99
00:03:28,879 --> 00:03:30,319
and it is very likely that your

100
00:03:30,319 --> 00:03:33,680
organization is using one of these

101
00:03:33,680 --> 00:03:36,879
now first there's managed authentication

102
00:03:36,879 --> 00:03:38,879
and this is when azure ad handles the

103
00:03:38,879 --> 00:03:40,560
authentication process

104
00:03:40,560 --> 00:03:44,239
by using a cloud stored hashed version

105
00:03:44,239 --> 00:03:47,440
of your password known as a password

106
00:03:47,440 --> 00:03:49,120
hash synchronization

107
00:03:49,120 --> 00:03:51,280
or it will send the credentials to an

108
00:03:51,280 --> 00:03:53,200
on-premise software agent

109
00:03:53,200 --> 00:03:55,040
to authenticate against your local

110
00:03:55,040 --> 00:03:56,239
active directory server

111
00:03:56,239 --> 00:03:58,080
it's called pass-through authentication

112
00:03:58,080 --> 00:03:59,760
it's model simple

113
00:03:59,760 --> 00:04:03,040
easy to use and maintain and it is

114
00:04:03,040 --> 00:04:05,120
microsoft's preferred mechanism

115
00:04:05,120 --> 00:04:06,799
for authentication they would prefer to

116
00:04:06,799 --> 00:04:09,120
use password hash synchronization

117
00:04:09,120 --> 00:04:12,400
because it gives you access to advanced

118
00:04:12,400 --> 00:04:14,480
azure ad security features such as

119
00:04:14,480 --> 00:04:16,160
identity protection

120
00:04:16,160 --> 00:04:17,759
the second model is federated

121
00:04:17,759 --> 00:04:19,440
authentication and this is where

122
00:04:19,440 --> 00:04:21,279
authentication is passed off to a

123
00:04:21,279 --> 00:04:22,880
trusted third party

124
00:04:22,880 --> 00:04:26,880
such as adfs octa ping identity

125
00:04:26,880 --> 00:04:28,080
and we're going to spend a little bit of

126
00:04:28,080 --> 00:04:30,479
time talking today about what that

127
00:04:30,479 --> 00:04:32,800
trusted third party actually means in

128
00:04:32,800 --> 00:04:34,560
practice

129
00:04:34,560 --> 00:04:37,520
now when a user logs in they're

130
00:04:37,520 --> 00:04:40,160
redirected to a login page

131
00:04:40,160 --> 00:04:42,880
for that particular organization this is

132
00:04:42,880 --> 00:04:44,880
often an adfs proxy server

133
00:04:44,880 --> 00:04:48,560
sitting in a dmz in your network

134
00:04:48,560 --> 00:04:50,560
the user presents their credentials

135
00:04:50,560 --> 00:04:51,759
which are validated

136
00:04:51,759 --> 00:04:55,040
against the internal ad database a

137
00:04:55,040 --> 00:04:56,880
successful authentication results in a

138
00:04:56,880 --> 00:04:58,479
signed saml token

139
00:04:58,479 --> 00:05:01,759
being sent to the cloud to assert that

140
00:05:01,759 --> 00:05:03,280
the users provided

141
00:05:03,280 --> 00:05:05,919
the appropriate username password and if

142
00:05:05,919 --> 00:05:06,639
configured

143
00:05:06,639 --> 00:05:09,120
satisfied the mfa requirements now as

144
00:05:09,120 --> 00:05:11,199
you can imagine

145
00:05:11,199 --> 00:05:12,639
this is a little harder to manage and

146
00:05:12,639 --> 00:05:14,639
maintain but it does give some

147
00:05:14,639 --> 00:05:15,680
organizations

148
00:05:15,680 --> 00:05:18,639
added flexibility federated

149
00:05:18,639 --> 00:05:20,000
authentication is

150
00:05:20,000 --> 00:05:23,280
generally used by large enterprises

151
00:05:23,280 --> 00:05:26,240
now that we understand the basics of how

152
00:05:26,240 --> 00:05:27,759
authentication is handled

153
00:05:27,759 --> 00:05:29,919
we need to discuss the two types of

154
00:05:29,919 --> 00:05:31,199
authentication there's modern

155
00:05:31,199 --> 00:05:33,199
authentication which is the default and

156
00:05:33,199 --> 00:05:34,320
recommended

157
00:05:34,320 --> 00:05:36,479
sign in method and effectively behind

158
00:05:36,479 --> 00:05:37,360
the scenes

159
00:05:37,360 --> 00:05:41,039
it is oauth this with this comes support

160
00:05:41,039 --> 00:05:43,759
for some advanced security features such

161
00:05:43,759 --> 00:05:45,600
as multi-factor authentication

162
00:05:45,600 --> 00:05:48,080
and conditional access policies you can

163
00:05:48,080 --> 00:05:48,639
even use

164
00:05:48,639 --> 00:05:52,960
metadata about the device or location

165
00:05:52,960 --> 00:05:56,560
or the location of the user to determine

166
00:05:56,560 --> 00:05:58,960
if additional verification is required

167
00:05:58,960 --> 00:06:00,400
such as a mobile push

168
00:06:00,400 --> 00:06:03,360
legacy authentication is used by you

169
00:06:03,360 --> 00:06:04,160
guessed it

170
00:06:04,160 --> 00:06:07,360
legacy protocols such as pop imap

171
00:06:07,360 --> 00:06:10,560
older versions of powershell and

172
00:06:10,560 --> 00:06:13,360
autodiscover it does not support

173
00:06:13,360 --> 00:06:14,960
multi-factor authentication because it

174
00:06:14,960 --> 00:06:16,720
is essentially http

175
00:06:16,720 --> 00:06:18,960
basic auth and the reason we have to

176
00:06:18,960 --> 00:06:20,400
talk about this

177
00:06:20,400 --> 00:06:23,280
is that it is enabled by default and you

178
00:06:23,280 --> 00:06:23,520
as

179
00:06:23,520 --> 00:06:24,960
administrators and defenders need to

180
00:06:24,960 --> 00:06:27,199
proactively turn it off attackers know

181
00:06:27,199 --> 00:06:27,520
this

182
00:06:27,520 --> 00:06:30,800
and they extensively target it

183
00:06:30,800 --> 00:06:33,360
now microsoft will eventually disable

184
00:06:33,360 --> 00:06:34,800
this

185
00:06:34,800 --> 00:06:35,840
but they've already extended the

186
00:06:35,840 --> 00:06:38,160
deadline once so your guess is as good

187
00:06:38,160 --> 00:06:41,440
as mine when that will actually occur

188
00:06:41,440 --> 00:06:43,280
now once the user has successfully

189
00:06:43,280 --> 00:06:45,600
authenticated you as defenders

190
00:06:45,600 --> 00:06:49,120
need to know where this

191
00:06:49,120 --> 00:06:51,440
authentication is recorded and where the

192
00:06:51,440 --> 00:06:54,479
subsequent actions are recorded

193
00:06:54,479 --> 00:06:56,639
now you're going to be given three core

194
00:06:56,639 --> 00:06:58,720
logs you've got the unified

195
00:06:58,720 --> 00:07:01,599
mailbox and admin audit logs along with

196
00:07:01,599 --> 00:07:02,000
azure

197
00:07:02,000 --> 00:07:04,880
ad logs mail trace logs and the security

198
00:07:04,880 --> 00:07:06,960
and compliance reports

199
00:07:06,960 --> 00:07:09,840
the unified log is the centralized

200
00:07:09,840 --> 00:07:10,800
solution

201
00:07:10,800 --> 00:07:13,280
for various office 365 applications it

202
00:07:13,280 --> 00:07:14,400
records

203
00:07:14,400 --> 00:07:17,280
it's sorry the data it records varies by

204
00:07:17,280 --> 00:07:19,039
application

205
00:07:19,039 --> 00:07:20,720
and in most cases it will record it

206
00:07:20,720 --> 00:07:22,720
timestamp username

207
00:07:22,720 --> 00:07:25,360
operation source ip address and the

208
00:07:25,360 --> 00:07:26,400
associ

209
00:07:26,400 --> 00:07:28,000
sorry and this and the associated

210
00:07:28,000 --> 00:07:30,720
parameters for that request

211
00:07:30,720 --> 00:07:32,560
the date is stored for 90 days by

212
00:07:32,560 --> 00:07:34,400
default and can be accessed via

213
00:07:34,400 --> 00:07:37,039
powershell or a web ui

214
00:07:37,039 --> 00:07:39,199
we strongly recommend that you have this

215
00:07:39,199 --> 00:07:40,800
data forwarded to some sort of log

216
00:07:40,800 --> 00:07:41,919
aggregation tool

217
00:07:41,919 --> 00:07:43,919
so that you're not limited by the

218
00:07:43,919 --> 00:07:46,319
powershell interface

219
00:07:46,319 --> 00:07:49,360
um and if you have e5 an e5 license you

220
00:07:49,360 --> 00:07:51,360
can extend the retention period

221
00:07:51,360 --> 00:07:53,199
uh the native search capabilities are

222
00:07:53,199 --> 00:07:54,879
pretty limited so

223
00:07:54,879 --> 00:07:57,039
if you want to have some robust

224
00:07:57,039 --> 00:07:58,879
interactions and robust detection

225
00:07:58,879 --> 00:08:00,080
you're going to have to forward it to a

226
00:08:00,080 --> 00:08:02,639
sim the mailbox audit logs

227
00:08:02,639 --> 00:08:05,919
record certain data that occur by

228
00:08:05,919 --> 00:08:09,199
owners delegates and administrators

229
00:08:09,199 --> 00:08:11,919
within a specific mailbox this is not

230
00:08:11,919 --> 00:08:13,280
centrally indexed

231
00:08:13,280 --> 00:08:15,680
and these would include log ons message

232
00:08:15,680 --> 00:08:16,479
binds

233
00:08:16,479 --> 00:08:18,720
folder binds and mail items at mail item

234
00:08:18,720 --> 00:08:20,240
access events

235
00:08:20,240 --> 00:08:23,120
whether the event is logged depends

236
00:08:23,120 --> 00:08:25,360
entirely on the license level

237
00:08:25,360 --> 00:08:27,520
and the type of access to the object

238
00:08:27,520 --> 00:08:28,800
whether it was done with valid

239
00:08:28,800 --> 00:08:29,840
credentials

240
00:08:29,840 --> 00:08:33,039
or the user was delegated access

241
00:08:33,039 --> 00:08:36,559
to the the object now defenders need to

242
00:08:36,559 --> 00:08:38,479
be familiar with this type of auditing

243
00:08:38,479 --> 00:08:39,839
we're not going to go over the details

244
00:08:39,839 --> 00:08:42,479
of it today

245
00:08:42,559 --> 00:08:45,200
but unless you're paying money for

246
00:08:45,200 --> 00:08:46,480
advanced auditing

247
00:08:46,480 --> 00:08:48,160
if an attacker logs in with valid

248
00:08:48,160 --> 00:08:49,920
credentials you will not know what

249
00:08:49,920 --> 00:08:52,000
objects they interacted with what emails

250
00:08:52,000 --> 00:08:54,080
they viewed

251
00:08:54,080 --> 00:08:58,080
another important point is that the data

252
00:08:58,080 --> 00:09:00,240
is stored in the individual mailboxes

253
00:09:00,240 --> 00:09:01,839
themselves

254
00:09:01,839 --> 00:09:04,080
so if you want to search the data that

255
00:09:04,080 --> 00:09:05,440
is not

256
00:09:05,440 --> 00:09:07,040
if you want to search the data within

257
00:09:07,040 --> 00:09:09,279
the mailbox audit logs

258
00:09:09,279 --> 00:09:10,720
you're going to have to do it on a per

259
00:09:10,720 --> 00:09:12,320
mailbox basis

260
00:09:12,320 --> 00:09:13,600
and you have to think that this is

261
00:09:13,600 --> 00:09:16,320
likely going to be an unfortunate loop

262
00:09:16,320 --> 00:09:18,160
with a powershell script unless you

263
00:09:18,160 --> 00:09:21,360
forward it to a sim proactively

264
00:09:21,360 --> 00:09:24,320
uh finally there's the admin audit log

265
00:09:24,320 --> 00:09:25,519
and this is going to record the

266
00:09:25,519 --> 00:09:26,880
execution and the corresponding

267
00:09:26,880 --> 00:09:28,800
parameters of administrative commandlets

268
00:09:28,800 --> 00:09:30,080
within the tenant

269
00:09:30,080 --> 00:09:31,839
majority of these are searchable within

270
00:09:31,839 --> 00:09:33,440
the unified audit log so you don't

271
00:09:33,440 --> 00:09:36,399
generally need to interact with it

272
00:09:36,399 --> 00:09:39,440
if you are an e5 licensed subscriber

273
00:09:39,440 --> 00:09:40,800
uh you're going to have access to the

274
00:09:40,800 --> 00:09:43,360
asia at the azure ad audit logs

275
00:09:43,360 --> 00:09:44,640
and they'll be stored for 30 days and

276
00:09:44,640 --> 00:09:46,480
they contain additional data about the

277
00:09:46,480 --> 00:09:47,760
authentications

278
00:09:47,760 --> 00:09:51,120
such as the mfa type used a little bit

279
00:09:51,120 --> 00:09:53,920
more detail about the applications etc

280
00:09:53,920 --> 00:09:55,680
uh mail flow logs are going to give you

281
00:09:55,680 --> 00:09:57,360
access to you know

282
00:09:57,360 --> 00:09:59,839
which how which direction individual

283
00:09:59,839 --> 00:10:01,120
mail items are transiting

284
00:10:01,120 --> 00:10:03,360
the the tenant so who's receiving which

285
00:10:03,360 --> 00:10:06,000
messages and who's sending them

286
00:10:06,000 --> 00:10:08,880
and then you can also use the security

287
00:10:08,880 --> 00:10:10,560
and compliance reports to search for

288
00:10:10,560 --> 00:10:12,560
content of the messages to see what they

289
00:10:12,560 --> 00:10:15,040
contain

290
00:10:17,200 --> 00:10:19,360
now that we're all experts on how office

291
00:10:19,360 --> 00:10:20,720
365 works

292
00:10:20,720 --> 00:10:23,760
let's briefly talk about the attack

293
00:10:23,760 --> 00:10:25,040
lifecycle

294
00:10:25,040 --> 00:10:28,240
and how it relates to office 365.

295
00:10:28,240 --> 00:10:30,399
as we mentioned earlier identity is the

296
00:10:30,399 --> 00:10:32,480
most important access control

297
00:10:32,480 --> 00:10:36,240
within office 365. so when we think

298
00:10:36,240 --> 00:10:38,160
about the attack life cycle we need to

299
00:10:38,160 --> 00:10:40,079
keep it tightly coupled

300
00:10:40,079 --> 00:10:42,880
to the compromise credentials and the

301
00:10:42,880 --> 00:10:44,640
authentication providers

302
00:10:44,640 --> 00:10:47,360
each request to an object needs to be

303
00:10:47,360 --> 00:10:49,279
authenticated

304
00:10:49,279 --> 00:10:50,800
today we're going to focus on how

305
00:10:50,800 --> 00:10:52,800
attackers initially compromise an

306
00:10:52,800 --> 00:10:55,279
environment

307
00:10:55,279 --> 00:10:57,519
using valid credentials how they

308
00:10:57,519 --> 00:10:59,519
maintain their persistence by modifying

309
00:10:59,519 --> 00:11:01,040
or circumventing the federated

310
00:11:01,040 --> 00:11:02,720
authentication providers

311
00:11:02,720 --> 00:11:05,200
and how they use the built-in

312
00:11:05,200 --> 00:11:07,279
administrative and security tooling to

313
00:11:07,279 --> 00:11:07,839
steal

314
00:11:07,839 --> 00:11:09,680
mass amounts of data all of the

315
00:11:09,680 --> 00:11:11,360
techniques today that doug and i are

316
00:11:11,360 --> 00:11:12,720
going to talk about

317
00:11:12,720 --> 00:11:15,440
we've observed attackers using through

318
00:11:15,440 --> 00:11:18,399
investigating real live incidents

319
00:11:18,399 --> 00:11:19,760
we are not going to be talking about

320
00:11:19,760 --> 00:11:21,920
penetration testing techniques

321
00:11:21,920 --> 00:11:24,959
um but instead focus on the ttps we

322
00:11:24,959 --> 00:11:27,040
we have observed advanced adversaries

323
00:11:27,040 --> 00:11:29,760
using in the real world

324
00:11:29,760 --> 00:11:32,079
all right thanks josh so our first case

325
00:11:32,079 --> 00:11:33,920
studies are going to talk about initial

326
00:11:33,920 --> 00:11:35,440
access what are the ways that targeted

327
00:11:35,440 --> 00:11:37,120
threat actors are finding their way

328
00:11:37,120 --> 00:11:40,320
into office 365. after that we'll talk a

329
00:11:40,320 --> 00:11:41,600
little bit about some of the ways that

330
00:11:41,600 --> 00:11:43,279
they're maintaining their access how are

331
00:11:43,279 --> 00:11:45,200
they establishing persistence

332
00:11:45,200 --> 00:11:47,279
so they can access a tenant for days

333
00:11:47,279 --> 00:11:49,279
weeks months maybe even years if they're

334
00:11:49,279 --> 00:11:51,279
lucky

335
00:11:51,279 --> 00:11:52,959
our first case study is going to walk us

336
00:11:52,959 --> 00:11:55,040
through an mfa bypass

337
00:11:55,040 --> 00:11:57,680
using powershell so josh has talked

338
00:11:57,680 --> 00:11:59,120
about conditional access and i'm going

339
00:11:59,120 --> 00:12:00,480
to talk about it even more

340
00:12:00,480 --> 00:12:03,040
it's a really strong way to ensure that

341
00:12:03,040 --> 00:12:04,959
you are securing your tenant

342
00:12:04,959 --> 00:12:07,200
and these clients that we were assisting

343
00:12:07,200 --> 00:12:09,040
they were all using conditional access

344
00:12:09,040 --> 00:12:10,560
to enforce mfa

345
00:12:10,560 --> 00:12:13,120
for all logons but somehow the attacker

346
00:12:13,120 --> 00:12:14,959
was actually managing to get around this

347
00:12:14,959 --> 00:12:17,040
and through some initial testing we

348
00:12:17,040 --> 00:12:18,880
couldn't exactly figure out how

349
00:12:18,880 --> 00:12:20,800
until we started looking at the azure ad

350
00:12:20,800 --> 00:12:23,519
audit logs and the unified audit log

351
00:12:23,519 --> 00:12:25,519
we found that the attacker was using a

352
00:12:25,519 --> 00:12:27,519
powershell module called azure active

353
00:12:27,519 --> 00:12:30,079
directory powershell or azure ad

354
00:12:30,079 --> 00:12:31,600
now this module is going to give us

355
00:12:31,600 --> 00:12:33,920
programmatic access to azure active

356
00:12:33,920 --> 00:12:34,800
directory

357
00:12:34,800 --> 00:12:36,639
and as josh just finished telling us it

358
00:12:36,639 --> 00:12:38,320
has a lot of sensitive information in

359
00:12:38,320 --> 00:12:40,079
there so obviously our users

360
00:12:40,079 --> 00:12:42,000
but also groups that they're in and

361
00:12:42,000 --> 00:12:43,600
other overarching

362
00:12:43,600 --> 00:12:46,399
information about the organization and

363
00:12:46,399 --> 00:12:47,040
what's

364
00:12:47,040 --> 00:12:48,639
interesting about this particular

365
00:12:48,639 --> 00:12:51,440
powershell module for office 365

366
00:12:51,440 --> 00:12:54,639
is that any user even an unlicensed user

367
00:12:54,639 --> 00:12:56,480
can access it and you actually can't

368
00:12:56,480 --> 00:12:58,480
disable it so with exchange online

369
00:12:58,480 --> 00:13:00,399
powershell there's a setting you can use

370
00:13:00,399 --> 00:13:01,519
to disable it

371
00:13:01,519 --> 00:13:03,040
that setting does not apply to this

372
00:13:03,040 --> 00:13:05,360
powershell module and what's even more

373
00:13:05,360 --> 00:13:07,040
interesting to us but also to the

374
00:13:07,040 --> 00:13:08,399
attacker at the time

375
00:13:08,399 --> 00:13:10,880
was that this module did not go through

376
00:13:10,880 --> 00:13:12,240
conditional access so it would

377
00:13:12,240 --> 00:13:13,360
completely bypass

378
00:13:13,360 --> 00:13:15,839
conditional access policies the attacker

379
00:13:15,839 --> 00:13:17,360
found this out and they used it to

380
00:13:17,360 --> 00:13:19,360
access a number of organizations that we

381
00:13:19,360 --> 00:13:20,399
assisted

382
00:13:20,399 --> 00:13:22,399
now microsoft has recently fixed this

383
00:13:22,399 --> 00:13:24,079
bug you can no longer bypass

384
00:13:24,079 --> 00:13:26,079
conditional access using this powershell

385
00:13:26,079 --> 00:13:28,320
module we're just not exactly sure when

386
00:13:28,320 --> 00:13:29,839
they put the fix in because there were

387
00:13:29,839 --> 00:13:31,040
no release notes

388
00:13:31,040 --> 00:13:34,240
or patch notes that we could find so the

389
00:13:34,240 --> 00:13:36,320
first investigation that we were working

390
00:13:36,320 --> 00:13:38,320
involved a citrix netscaler compromise

391
00:13:38,320 --> 00:13:40,880
the attacker had accessed this netscaler

392
00:13:40,880 --> 00:13:42,480
using the vulnerability that i'm sure we

393
00:13:42,480 --> 00:13:45,279
all know about and that netscaler device

394
00:13:45,279 --> 00:13:46,560
contained the username

395
00:13:46,560 --> 00:13:48,240
and password for what the client was

396
00:13:48,240 --> 00:13:50,720
calling an ldap connector account

397
00:13:50,720 --> 00:13:52,720
now this account was an ad account and

398
00:13:52,720 --> 00:13:53,920
so it was also being

399
00:13:53,920 --> 00:13:56,399
synced into azure active directory which

400
00:13:56,399 --> 00:13:57,680
meant the attacker could use it to

401
00:13:57,680 --> 00:13:59,680
connect to azure active directory using

402
00:13:59,680 --> 00:14:01,279
the powershell module

403
00:14:01,279 --> 00:14:03,519
they did that and then they exported the

404
00:14:03,519 --> 00:14:06,399
full list of users so about 50 000 users

405
00:14:06,399 --> 00:14:08,320
and conducted a massive password spray

406
00:14:08,320 --> 00:14:10,399
attack now inevitably they got some more

407
00:14:10,399 --> 00:14:11,519
credentials out of that

408
00:14:11,519 --> 00:14:13,279
and then further accessed this victim

409
00:14:13,279 --> 00:14:15,680
organization's environment

410
00:14:15,680 --> 00:14:17,600
now some other case studies we were also

411
00:14:17,600 --> 00:14:19,360
investigating password sprays

412
00:14:19,360 --> 00:14:21,199
these were much smaller in scope so

413
00:14:21,199 --> 00:14:23,040
likely the attacker had conducted some

414
00:14:23,040 --> 00:14:25,519
osint or had bought some lists

415
00:14:25,519 --> 00:14:27,279
and was using that to try and

416
00:14:27,279 --> 00:14:29,519
authenticate to azure ad powershell

417
00:14:29,519 --> 00:14:31,680
now once they successfully got in they

418
00:14:31,680 --> 00:14:33,680
exported as much information as they

419
00:14:33,680 --> 00:14:34,480
could

420
00:14:34,480 --> 00:14:36,160
turned that information around and used

421
00:14:36,160 --> 00:14:38,240
it to export all of these organizations

422
00:14:38,240 --> 00:14:38,560
so

423
00:14:38,560 --> 00:14:40,240
threatening to sell this information to

424
00:14:40,240 --> 00:14:42,480
criminals if the organization didn't buy

425
00:14:42,480 --> 00:14:45,839
it from them first

426
00:14:45,920 --> 00:14:48,000
now our next case study our next ttp

427
00:14:48,000 --> 00:14:49,519
also involves powershell

428
00:14:49,519 --> 00:14:51,279
also involves a conditional access

429
00:14:51,279 --> 00:14:53,680
bypass so this organization was using

430
00:14:53,680 --> 00:14:55,279
conditional access to enforce

431
00:14:55,279 --> 00:14:57,839
mfa for all science but the attacker

432
00:14:57,839 --> 00:14:59,440
also found a way around conditional

433
00:14:59,440 --> 00:15:01,760
access using a different technique

434
00:15:01,760 --> 00:15:03,519
in this case we could see in the azure

435
00:15:03,519 --> 00:15:05,040
ad audit logs

436
00:15:05,040 --> 00:15:06,320
that the attacker was using an

437
00:15:06,320 --> 00:15:08,560
application called the microsoft online

438
00:15:08,560 --> 00:15:10,880
syndication partner portal or the mos

439
00:15:10,880 --> 00:15:13,120
pp and the user agent contained a

440
00:15:13,120 --> 00:15:15,600
windows binary called the msoid

441
00:15:15,600 --> 00:15:18,079
svc now we had never heard of this

442
00:15:18,079 --> 00:15:18,720
before

443
00:15:18,720 --> 00:15:20,399
neither had the client and furthermore

444
00:15:20,399 --> 00:15:22,079
the client was not using

445
00:15:22,079 --> 00:15:24,079
a partner to manage their tenant so the

446
00:15:24,079 --> 00:15:25,519
partner portal thing just

447
00:15:25,519 --> 00:15:28,240
didn't make sense to us after some

448
00:15:28,240 --> 00:15:29,199
digging we found

449
00:15:29,199 --> 00:15:33,199
that the msmonsoidsvc

450
00:15:33,199 --> 00:15:35,360
excuse me was the microsoft online

451
00:15:35,360 --> 00:15:37,279
services sign-in assistant

452
00:15:37,279 --> 00:15:38,959
which is basically an authentication

453
00:15:38,959 --> 00:15:41,440
broker that helps other desktop apps

454
00:15:41,440 --> 00:15:44,320
connect to office 365 and this was

455
00:15:44,320 --> 00:15:45,759
actually a requirement for some

456
00:15:45,759 --> 00:15:46,720
applications and

457
00:15:46,720 --> 00:15:48,880
even powershell modules in the earlier

458
00:15:48,880 --> 00:15:51,839
days of office 365.

459
00:15:51,839 --> 00:15:55,040
and that mospp that partner portal

460
00:15:55,040 --> 00:15:56,880
not a partner portal it was actually a

461
00:15:56,880 --> 00:15:58,959
very early version of the microsoft

462
00:15:58,959 --> 00:16:00,959
exchange online powershell module a

463
00:16:00,959 --> 00:16:01,600
version

464
00:16:01,600 --> 00:16:04,320
from i think 2016 that you can actually

465
00:16:04,320 --> 00:16:05,920
no longer download from an official

466
00:16:05,920 --> 00:16:08,079
microsoft website and for context

467
00:16:08,079 --> 00:16:09,920
we were conducting this investigation

468
00:16:09,920 --> 00:16:12,240
very early 2020

469
00:16:12,240 --> 00:16:13,920
and now it turns out this combination of

470
00:16:13,920 --> 00:16:15,440
tools the sign in assistant

471
00:16:15,440 --> 00:16:17,199
and this old version of powershell

472
00:16:17,199 --> 00:16:18,639
completely bypassed

473
00:16:18,639 --> 00:16:20,320
conditional access so the attacker

474
00:16:20,320 --> 00:16:21,759
somehow figured this out

475
00:16:21,759 --> 00:16:23,920
and was using it to access the tenant

476
00:16:23,920 --> 00:16:25,839
now this has also been fixed again we're

477
00:16:25,839 --> 00:16:27,360
not sure exactly when because there are

478
00:16:27,360 --> 00:16:28,480
no release notes

479
00:16:28,480 --> 00:16:30,480
but sometime the last few months you

480
00:16:30,480 --> 00:16:32,079
this was closed and you can no longer

481
00:16:32,079 --> 00:16:34,839
use these tools to bypass conditional

482
00:16:34,839 --> 00:16:36,639
access

483
00:16:36,639 --> 00:16:38,000
now the last technique i want to talk

484
00:16:38,000 --> 00:16:40,240
about for initial access is oauth abuse

485
00:16:40,240 --> 00:16:41,680
i've already talked about this at some

486
00:16:41,680 --> 00:16:42,800
other conferences

487
00:16:42,800 --> 00:16:44,480
as well as a pretty good fireeye blog

488
00:16:44,480 --> 00:16:46,560
post and a tool that i've created

489
00:16:46,560 --> 00:16:48,079
and some of my peers in the infosec

490
00:16:48,079 --> 00:16:49,680
industry have blogged about this and

491
00:16:49,680 --> 00:16:51,519
created their own tools

492
00:16:51,519 --> 00:16:53,040
but what it's boiling down to is the

493
00:16:53,040 --> 00:16:54,880
fact that office 365

494
00:16:54,880 --> 00:16:57,680
just like any cloud platform is going to

495
00:16:57,680 --> 00:17:00,000
give third-party developers the ability

496
00:17:00,000 --> 00:17:02,800
to create applications that then access

497
00:17:02,800 --> 00:17:04,720
data on a user's behalf so think about

498
00:17:04,720 --> 00:17:06,079
your calendar plugins

499
00:17:06,079 --> 00:17:08,559
your salesforce integration maybe

500
00:17:08,559 --> 00:17:10,160
boomerang for email

501
00:17:10,160 --> 00:17:12,559
all of these are our oauth applications

502
00:17:12,559 --> 00:17:14,319
and they're attractive to attackers for

503
00:17:14,319 --> 00:17:15,919
a few reasons the first is

504
00:17:15,919 --> 00:17:17,520
they're using a legitimate microsoft

505
00:17:17,520 --> 00:17:19,919
framework so you can see the image here

506
00:17:19,919 --> 00:17:21,599
is the only thing that a user really

507
00:17:21,599 --> 00:17:22,959
sees and it's a pretty simple

508
00:17:22,959 --> 00:17:24,720
yes or no prompt for them to allow an

509
00:17:24,720 --> 00:17:27,439
app now these applications are designed

510
00:17:27,439 --> 00:17:28,160
to bypass

511
00:17:28,160 --> 00:17:30,240
mfa because i don't want my calendar

512
00:17:30,240 --> 00:17:32,080
plugin to prompt me for mfa

513
00:17:32,080 --> 00:17:34,400
every day or every week or whatever they

514
00:17:34,400 --> 00:17:36,559
also can access the user's data for 90

515
00:17:36,559 --> 00:17:37,039
days

516
00:17:37,039 --> 00:17:39,120
if not longer so very attractive to

517
00:17:39,120 --> 00:17:40,799
attackers and in fact we've seen a

518
00:17:40,799 --> 00:17:43,360
number of campaigns since around 2018

519
00:17:43,360 --> 00:17:45,600
of varying levels of sophistication and

520
00:17:45,600 --> 00:17:47,440
microsoft actually just recently

521
00:17:47,440 --> 00:17:49,200
took down a number of domains that were

522
00:17:49,200 --> 00:17:51,600
hosting oauth abuse applications

523
00:17:51,600 --> 00:17:54,000
that attackers were using to conduct bec

524
00:17:54,000 --> 00:17:55,760
attacks

525
00:17:55,760 --> 00:17:57,760
so how can we stop this from happening

526
00:17:57,760 --> 00:17:59,520
well first off we should remove the

527
00:17:59,520 --> 00:18:02,000
ability for users to consent to apps

528
00:18:02,000 --> 00:18:03,440
right just like we're not allowing our

529
00:18:03,440 --> 00:18:05,360
end users or shouldn't be allowing our

530
00:18:05,360 --> 00:18:06,559
end users to install

531
00:18:06,559 --> 00:18:08,880
applications on their laptops we should

532
00:18:08,880 --> 00:18:10,559
not be allowing them to consent to

533
00:18:10,559 --> 00:18:12,400
applications in office 365

534
00:18:12,400 --> 00:18:14,640
just doesn't make sense now if you have

535
00:18:14,640 --> 00:18:16,799
an e5 license or cloud app security you

536
00:18:16,799 --> 00:18:17,840
can go a little further

537
00:18:17,840 --> 00:18:19,600
you can have a little more control you

538
00:18:19,600 --> 00:18:21,120
can do some hunting you can look for

539
00:18:21,120 --> 00:18:22,400
prevalence

540
00:18:22,400 --> 00:18:23,919
you just basically have some more

541
00:18:23,919 --> 00:18:26,720
options available

542
00:18:27,120 --> 00:18:28,880
now that we understand initial access

543
00:18:28,880 --> 00:18:30,400
let's move into persistence

544
00:18:30,400 --> 00:18:32,080
how are attackers ensuring they have

545
00:18:32,080 --> 00:18:35,120
long-term access to office 365

546
00:18:35,120 --> 00:18:36,799
and it's important to note that all of

547
00:18:36,799 --> 00:18:38,240
these techniques require

548
00:18:38,240 --> 00:18:40,400
global admin privileges so the attacker

549
00:18:40,400 --> 00:18:42,000
has already somehow escalated their

550
00:18:42,000 --> 00:18:45,760
privileges that's out of scope for now

551
00:18:45,760 --> 00:18:47,440
our first technique is a conditional

552
00:18:47,440 --> 00:18:49,440
access policy modification so we've

553
00:18:49,440 --> 00:18:51,600
talked a lot about conditional access

554
00:18:51,600 --> 00:18:54,240
and it's very important obviously and

555
00:18:54,240 --> 00:18:56,000
attackers know that and they spend a lot

556
00:18:56,000 --> 00:18:57,039
of time

557
00:18:57,039 --> 00:18:58,799
understanding how conditional access

558
00:18:58,799 --> 00:19:00,799
works and so in this case we had an

559
00:19:00,799 --> 00:19:01,840
attacker that was

560
00:19:01,840 --> 00:19:05,919
accessing office 365 from the vpn

561
00:19:05,919 --> 00:19:09,120
this vpn did not require mfa now however

562
00:19:09,120 --> 00:19:11,600
the victim organization was still using

563
00:19:11,600 --> 00:19:14,160
conditional access to enforce mfa as

564
00:19:14,160 --> 00:19:15,840
long as you were coming from somewhere

565
00:19:15,840 --> 00:19:18,400
else from a starbucks for example

566
00:19:18,400 --> 00:19:20,000
and to kind of set up this level of

567
00:19:20,000 --> 00:19:22,720
configuration conditional access has

568
00:19:22,720 --> 00:19:25,039
a couple of tools available to us right

569
00:19:25,039 --> 00:19:26,559
so what the attacker was

570
00:19:26,559 --> 00:19:29,440
was using and what this client was using

571
00:19:29,440 --> 00:19:29,760
is

572
00:19:29,760 --> 00:19:32,880
a ip based exclusion list so the client

573
00:19:32,880 --> 00:19:34,240
was calling it their mfa

574
00:19:34,240 --> 00:19:36,559
trusted ips the list of ip addresses

575
00:19:36,559 --> 00:19:38,480
that don't need mfa

576
00:19:38,480 --> 00:19:40,240
the attacker found this list and they

577
00:19:40,240 --> 00:19:42,480
added an additional ip address to it

578
00:19:42,480 --> 00:19:44,559
that ip address was actually a microsoft

579
00:19:44,559 --> 00:19:46,480
ip address because the attacker's plan

580
00:19:46,480 --> 00:19:47,440
was to proxy

581
00:19:47,440 --> 00:19:49,440
all of their network traffic through an

582
00:19:49,440 --> 00:19:50,799
azure vm

583
00:19:50,799 --> 00:19:52,720
this had the added benefit that when an

584
00:19:52,720 --> 00:19:54,400
investigator when an analyst

585
00:19:54,400 --> 00:19:56,320
is looking through the logs they'll just

586
00:19:56,320 --> 00:19:58,160
see microsoft ips and they'll probably

587
00:19:58,160 --> 00:20:00,000
think it's legitimate

588
00:20:00,000 --> 00:20:01,360
and the other thing for us to think

589
00:20:01,360 --> 00:20:03,039
about is

590
00:20:03,039 --> 00:20:04,720
monitoring and alerting right when

591
00:20:04,720 --> 00:20:06,559
you're monitoring or learning you

592
00:20:06,559 --> 00:20:07,440
probably want to know about

593
00:20:07,440 --> 00:20:08,799
configuration changes to your

594
00:20:08,799 --> 00:20:09,600
environment

595
00:20:09,600 --> 00:20:12,159
you probably have scom alerts for when a

596
00:20:12,159 --> 00:20:13,919
new domain administrator gets created

597
00:20:13,919 --> 00:20:14,880
for example

598
00:20:14,880 --> 00:20:16,480
there's nothing out of the box that we

599
00:20:16,480 --> 00:20:18,720
can really do here though in office 365.

600
00:20:18,720 --> 00:20:20,080
we can't receive an alert

601
00:20:20,080 --> 00:20:22,880
any time a new mfa trusted ip is added

602
00:20:22,880 --> 00:20:24,400
you need some additional logging

603
00:20:24,400 --> 00:20:27,840
or monitoring to do that

604
00:20:27,840 --> 00:20:30,240
now moving on in sophistication we had

605
00:20:30,240 --> 00:20:32,080
another victim organization where the

606
00:20:32,080 --> 00:20:33,120
attacker was

607
00:20:33,120 --> 00:20:35,600
managing to access office 365 even

608
00:20:35,600 --> 00:20:37,679
though the attacker had

609
00:20:37,679 --> 00:20:39,919
didn't have mfa obviously and even

610
00:20:39,919 --> 00:20:40,960
though the victim

611
00:20:40,960 --> 00:20:42,880
was enforcing password resets and

612
00:20:42,880 --> 00:20:44,480
enforcing mfa

613
00:20:44,480 --> 00:20:45,600
and we didn't see any of the other

614
00:20:45,600 --> 00:20:47,679
hallmarks of those conditional access

615
00:20:47,679 --> 00:20:49,200
bypasses that we have just finished

616
00:20:49,200 --> 00:20:51,280
talking about it turns out what was

617
00:20:51,280 --> 00:20:52,960
happening is the attacker was using a

618
00:20:52,960 --> 00:20:54,880
bug in office 365

619
00:20:54,880 --> 00:20:56,559
as well as some very particular

620
00:20:56,559 --> 00:20:58,159
knowledge about how federated

621
00:20:58,159 --> 00:20:59,840
authentication works

622
00:20:59,840 --> 00:21:02,559
so that bug was that you could add a new

623
00:21:02,559 --> 00:21:04,080
domain to a tenant

624
00:21:04,080 --> 00:21:06,320
and use it for federated auth even if

625
00:21:06,320 --> 00:21:07,919
you don't own that domain so i could add

626
00:21:07,919 --> 00:21:09,919
google.com for example

627
00:21:09,919 --> 00:21:11,840
and the knowledge was the attacker knew

628
00:21:11,840 --> 00:21:13,039
specifically that

629
00:21:13,039 --> 00:21:15,520
azure active directory is really only

630
00:21:15,520 --> 00:21:17,840
checking two pieces of information

631
00:21:17,840 --> 00:21:19,520
with those federated authentication

632
00:21:19,520 --> 00:21:21,440
tokens the first one is obvious they're

633
00:21:21,440 --> 00:21:23,280
checking that the digital signature is

634
00:21:23,280 --> 00:21:24,240
valid

635
00:21:24,240 --> 00:21:26,240
and the second one is looking for a

636
00:21:26,240 --> 00:21:28,159
piece of information in those tokens

637
00:21:28,159 --> 00:21:30,080
called an immutable id

638
00:21:30,080 --> 00:21:32,159
the mutable id is basically just a grid

639
00:21:32,159 --> 00:21:34,480
which can map back to a user in the

640
00:21:34,480 --> 00:21:36,480
azure active directory or in the office

641
00:21:36,480 --> 00:21:38,559
365 tenant

642
00:21:38,559 --> 00:21:40,799
and so what the attacker was doing is

643
00:21:40,799 --> 00:21:42,080
they were creating

644
00:21:42,080 --> 00:21:45,360
authentication tokens for valid users in

645
00:21:45,360 --> 00:21:47,200
that tenant

646
00:21:47,200 --> 00:21:49,600
and then authenticating regardless of

647
00:21:49,600 --> 00:21:50,480
the fact that

648
00:21:50,480 --> 00:21:52,400
they have just added this new federated

649
00:21:52,400 --> 00:21:54,400
domain called evil.com

650
00:21:54,400 --> 00:21:56,159
but they were trying to authenticate to

651
00:21:56,159 --> 00:21:58,080
users called victim.org

652
00:21:58,080 --> 00:21:59,600
that doesn't matter because those two

653
00:21:59,600 --> 00:22:02,799
domains were within the same tenant

654
00:22:02,799 --> 00:22:04,480
so by setting a new additional

655
00:22:04,480 --> 00:22:06,320
unverified domain as a federated

656
00:22:06,320 --> 00:22:07,760
authentication provider

657
00:22:07,760 --> 00:22:09,600
the attacker was basically telling azure

658
00:22:09,600 --> 00:22:11,039
active directory hey

659
00:22:11,039 --> 00:22:13,200
i'm going to send you authentication

660
00:22:13,200 --> 00:22:14,720
tokens from this domain

661
00:22:14,720 --> 00:22:16,799
and you can trust them for any user in

662
00:22:16,799 --> 00:22:20,320
the tenant regardless of their domain

663
00:22:20,320 --> 00:22:22,000
and because the attacker already had

664
00:22:22,000 --> 00:22:24,240
access to office 365

665
00:22:24,240 --> 00:22:26,400
to azure active directory they could

666
00:22:26,400 --> 00:22:28,559
export the full list of immutable ids

667
00:22:28,559 --> 00:22:30,400
for all of the users which now meant

668
00:22:30,400 --> 00:22:31,200
that they had

669
00:22:31,200 --> 00:22:32,720
all of the information they needed to

670
00:22:32,720 --> 00:22:34,400
create an authentication token

671
00:22:34,400 --> 00:22:36,799
for any user in the entire tenant and

672
00:22:36,799 --> 00:22:37,840
this is going to bypass

673
00:22:37,840 --> 00:22:40,000
mfa because the attacker can add

674
00:22:40,000 --> 00:22:41,760
something to those authentication tokens

675
00:22:41,760 --> 00:22:42,559
that say

676
00:22:42,559 --> 00:22:44,400
hey this is a trusted authentication

677
00:22:44,400 --> 00:22:46,080
from a trusted location don't worry

678
00:22:46,080 --> 00:22:47,679
about mfa

679
00:22:47,679 --> 00:22:50,480
now this bug has somewhat been fixed so

680
00:22:50,480 --> 00:22:51,840
you can no longer set up an

681
00:22:51,840 --> 00:22:54,640
unverified domain a domain you don't own

682
00:22:54,640 --> 00:22:57,200
as a federated authentication provider

683
00:22:57,200 --> 00:22:58,559
but if we think about it it would be

684
00:22:58,559 --> 00:23:00,880
fairly trivial for an attacker to create

685
00:23:00,880 --> 00:23:03,360
a typo squad domain validate that they

686
00:23:03,360 --> 00:23:04,799
own it because they're going to register

687
00:23:04,799 --> 00:23:05,280
it

688
00:23:05,280 --> 00:23:06,880
and then add it as a new federated

689
00:23:06,880 --> 00:23:08,720
authentication provider and conduct

690
00:23:08,720 --> 00:23:10,880
the same attack and just like with

691
00:23:10,880 --> 00:23:12,640
modifying conditional access there are

692
00:23:12,640 --> 00:23:14,640
no alerts set up out of the box

693
00:23:14,640 --> 00:23:16,559
to tell us when a new domain gets added

694
00:23:16,559 --> 00:23:18,240
when a new federated authentication

695
00:23:18,240 --> 00:23:19,760
provider gets added

696
00:23:19,760 --> 00:23:21,200
and actually this technique has been

697
00:23:21,200 --> 00:23:24,000
blogged about as far back as 2018

698
00:23:24,000 --> 00:23:25,919
as a way for it administrators to

699
00:23:25,919 --> 00:23:27,520
backdoor their own tenant

700
00:23:27,520 --> 00:23:29,200
in case they're worried that some cloud

701
00:23:29,200 --> 00:23:31,600
multi-factor provider maybe azure mfa

702
00:23:31,600 --> 00:23:34,959
fails and locks them out

703
00:23:35,120 --> 00:23:36,480
so the last technique i'm going to talk

704
00:23:36,480 --> 00:23:38,240
about is gold and saml and i've talked

705
00:23:38,240 --> 00:23:39,200
about this a lot

706
00:23:39,200 --> 00:23:41,440
at my troopers talk back last year in

707
00:23:41,440 --> 00:23:42,720
2019

708
00:23:42,720 --> 00:23:44,720
and some tools that i released but what

709
00:23:44,720 --> 00:23:46,559
it's boiling down to is the fact that

710
00:23:46,559 --> 00:23:46,880
the

711
00:23:46,880 --> 00:23:49,120
digital signature that adfs servers

712
00:23:49,120 --> 00:23:51,279
create is relying on a

713
00:23:51,279 --> 00:23:53,600
signing key that sits in a database on

714
00:23:53,600 --> 00:23:54,320
that server

715
00:23:54,320 --> 00:23:56,640
now it is encrypted but that encryption

716
00:23:56,640 --> 00:23:58,000
key sits within

717
00:23:58,000 --> 00:23:59,679
active directory and can easily be

718
00:23:59,679 --> 00:24:02,240
exported by a domain administrator

719
00:24:02,240 --> 00:24:04,080
so what we now have is a way for an

720
00:24:04,080 --> 00:24:07,200
attacker to export a valid signing key

721
00:24:07,200 --> 00:24:09,039
and then create their own valid

722
00:24:09,039 --> 00:24:10,559
authentication tokens

723
00:24:10,559 --> 00:24:12,320
from anywhere in the world and just feed

724
00:24:12,320 --> 00:24:14,400
those to azure active directory

725
00:24:14,400 --> 00:24:16,159
and in fact we've seen this in the wild

726
00:24:16,159 --> 00:24:18,240
we've seen kate a case where a

727
00:24:18,240 --> 00:24:20,640
attacker was on premise so they were

728
00:24:20,640 --> 00:24:21,600
domain admin

729
00:24:21,600 --> 00:24:23,120
running around the network they

730
00:24:23,120 --> 00:24:25,120
connected to an adfs server

731
00:24:25,120 --> 00:24:26,960
and from smb flow logs that were

732
00:24:26,960 --> 00:24:28,559
available to us we could see that they

733
00:24:28,559 --> 00:24:31,200
copied off the entire adfs database

734
00:24:31,200 --> 00:24:33,600
back to their c2 server presumably with

735
00:24:33,600 --> 00:24:35,360
the goal of conducting a golden sample

736
00:24:35,360 --> 00:24:36,640
attack

737
00:24:36,640 --> 00:24:38,480
so how can we make sure gold and saml

738
00:24:38,480 --> 00:24:40,480
doesn't happen well we need to protect

739
00:24:40,480 --> 00:24:41,440
adfs

740
00:24:41,440 --> 00:24:43,760
as a tier zero device so just like we're

741
00:24:43,760 --> 00:24:45,440
protecting our domain controllers we're

742
00:24:45,440 --> 00:24:46,720
hardening them

743
00:24:46,720 --> 00:24:48,720
we are enforcing least privilege we're

744
00:24:48,720 --> 00:24:50,640
segmenting them the same must be done

745
00:24:50,640 --> 00:24:52,880
for our adfs servers

746
00:24:52,880 --> 00:24:55,039
we also need to be prepared to reset

747
00:24:55,039 --> 00:24:56,880
that adfs signing to

748
00:24:56,880 --> 00:24:59,360
signing key so just like when we think

749
00:24:59,360 --> 00:25:00,000
an attacker

750
00:25:00,000 --> 00:25:01,679
accesses a domain controller we're going

751
00:25:01,679 --> 00:25:03,600
to reset the krb tgt

752
00:25:03,600 --> 00:25:06,320
twice when we think an attacker accesses

753
00:25:06,320 --> 00:25:08,159
the adfs server we're going to reset

754
00:25:08,159 --> 00:25:10,480
that certificate only once though

755
00:25:10,480 --> 00:25:11,760
so we need to make sure that's in our

756
00:25:11,760 --> 00:25:13,919
irp our incident response plan we need

757
00:25:13,919 --> 00:25:15,679
to make sure our it teams have practiced

758
00:25:15,679 --> 00:25:17,279
that and that they recognize how to do

759
00:25:17,279 --> 00:25:18,559
it

760
00:25:18,559 --> 00:25:20,880
so that's it for persistence and initial

761
00:25:20,880 --> 00:25:22,400
access i'm now going to turn it over to

762
00:25:22,400 --> 00:25:24,000
josh and he's going to talk about

763
00:25:24,000 --> 00:25:25,919
what we see targeted threat actors do to

764
00:25:25,919 --> 00:25:27,440
actually achieve their mess

765
00:25:27,440 --> 00:25:30,960
achieve their mission attackers don't

766
00:25:30,960 --> 00:25:31,679
compromise

767
00:25:31,679 --> 00:25:34,480
office 365 for the fun of it there is

768
00:25:34,480 --> 00:25:35,919
purpose

769
00:25:35,919 --> 00:25:37,440
they are there to complete a mission it

770
00:25:37,440 --> 00:25:39,200
may be reconnaissance and maybe trying

771
00:25:39,200 --> 00:25:41,520
to gain access to your partner networks

772
00:25:41,520 --> 00:25:44,400
they may be trying to steal data that is

773
00:25:44,400 --> 00:25:46,080
contained within your tenant

774
00:25:46,080 --> 00:25:48,799
and the simplest mechanism that we see

775
00:25:48,799 --> 00:25:49,679
both targeted

776
00:25:49,679 --> 00:25:52,559
and opportunistic attackers employ are

777
00:25:52,559 --> 00:25:54,000
mail forwarding rules

778
00:25:54,000 --> 00:25:55,919
the two most common ways we see

779
00:25:55,919 --> 00:25:57,440
attackers configure this

780
00:25:57,440 --> 00:25:59,919
is through the use of smtp forwarding

781
00:25:59,919 --> 00:26:00,960
rules

782
00:26:00,960 --> 00:26:04,080
or inbox rules the smtp rules

783
00:26:04,080 --> 00:26:07,360
forward all received messages to the

784
00:26:07,360 --> 00:26:09,440
specified mailbox

785
00:26:09,440 --> 00:26:10,799
they're easy to detect both

786
00:26:10,799 --> 00:26:12,880
retroactively and real time

787
00:26:12,880 --> 00:26:14,799
by monitoring the unified audit log for

788
00:26:14,799 --> 00:26:17,120
the set mailbox commandlet

789
00:26:17,120 --> 00:26:18,880
or by reviewing the forwarding address

790
00:26:18,880 --> 00:26:21,279
and forwarding smtp address

791
00:26:21,279 --> 00:26:23,840
attribute of the mailbox configuration

792
00:26:23,840 --> 00:26:27,039
we often see attackers configure this

793
00:26:27,039 --> 00:26:30,320
these forwarding rules so that

794
00:26:30,320 --> 00:26:31,760
when they lose access when the user

795
00:26:31,760 --> 00:26:33,760
resets their password they continue to

796
00:26:33,760 --> 00:26:34,880
get the data

797
00:26:34,880 --> 00:26:38,000
out of the mailbox inbox

798
00:26:38,000 --> 00:26:39,919
rules are more versatile and a bit

799
00:26:39,919 --> 00:26:41,840
harder to retroactively detect

800
00:26:41,840 --> 00:26:44,159
they allow the attacker to configure

801
00:26:44,159 --> 00:26:45,200
rules

802
00:26:45,200 --> 00:26:46,880
that target messages with specific

803
00:26:46,880 --> 00:26:49,840
keywords or between key personnel

804
00:26:49,840 --> 00:26:51,679
we've seen targeted attackers ensure

805
00:26:51,679 --> 00:26:54,000
that all password reset emails were

806
00:26:54,000 --> 00:26:54,720
forwarded

807
00:26:54,720 --> 00:26:58,159
to an attacker controlled email address

808
00:26:58,159 --> 00:27:00,320
this allowed the attacker to reset the

809
00:27:00,320 --> 00:27:01,679
password for services

810
00:27:01,679 --> 00:27:03,279
that relied on the corporate email

811
00:27:03,279 --> 00:27:05,279
address as the username but weren't

812
00:27:05,279 --> 00:27:07,039
integrated into

813
00:27:07,039 --> 00:27:10,240
active directory and because a lot of

814
00:27:10,240 --> 00:27:12,080
users legitimately configure

815
00:27:12,080 --> 00:27:14,240
inbox rules they're challenging to

816
00:27:14,240 --> 00:27:15,919
detect and monitor

817
00:27:15,919 --> 00:27:17,600
as sim tuning can be a challenge you're

818
00:27:17,600 --> 00:27:19,840
going to be facing a lot of false

819
00:27:19,840 --> 00:27:20,559
positives

820
00:27:20,559 --> 00:27:22,240
on a fairly regular basis and you tend

821
00:27:22,240 --> 00:27:24,799
to become numb to those types of alerts

822
00:27:24,799 --> 00:27:26,880
uh they're also difficult to hunt within

823
00:27:26,880 --> 00:27:27,840
the environment because they are

824
00:27:27,840 --> 00:27:30,799
configured within the mailbox itself

825
00:27:30,799 --> 00:27:32,799
um which means you need to interrogate

826
00:27:32,799 --> 00:27:35,120
each individual mailbox as opposed to

827
00:27:35,120 --> 00:27:37,360
just looking at the metadata about the

828
00:27:37,360 --> 00:27:40,799
mailbox now in addition to

829
00:27:40,799 --> 00:27:43,440
forwarding and inbox rules we have seen

830
00:27:43,440 --> 00:27:45,279
on a handful of occasions attackers

831
00:27:45,279 --> 00:27:45,919
configure

832
00:27:45,919 --> 00:27:49,200
flow rules and this way they can use the

833
00:27:49,200 --> 00:27:51,679
microsoft automation framework

834
00:27:51,679 --> 00:27:54,159
to take action on particular messages

835
00:27:54,159 --> 00:27:55,760
generally forwarding them to an external

836
00:27:55,760 --> 00:27:56,799
address

837
00:27:56,799 --> 00:27:59,440
these are much harder to detect because

838
00:27:59,440 --> 00:28:01,120
none of the configurations are

839
00:28:01,120 --> 00:28:03,760
are contained within the mailbox itself

840
00:28:03,760 --> 00:28:05,279
you have to be looking in the unified

841
00:28:05,279 --> 00:28:06,559
audit log

842
00:28:06,559 --> 00:28:09,039
for uh suspicious flow entries being

843
00:28:09,039 --> 00:28:10,720
created

844
00:28:10,720 --> 00:28:13,760
rights delegation is another tactic that

845
00:28:13,760 --> 00:28:14,720
attackers use

846
00:28:14,720 --> 00:28:15,760
i mean we're going to stick with the

847
00:28:15,760 --> 00:28:17,360
boring but effective category for this

848
00:28:17,360 --> 00:28:18,880
one

849
00:28:18,880 --> 00:28:21,679
we've seen attackers delegate rights to

850
00:28:21,679 --> 00:28:23,039
the compromised accounts

851
00:28:23,039 --> 00:28:24,960
for content within mailboxes that

852
00:28:24,960 --> 00:28:26,320
they're interested in

853
00:28:26,320 --> 00:28:27,679
the attacker will gain access to a

854
00:28:27,679 --> 00:28:29,520
service account possibly a directory

855
00:28:29,520 --> 00:28:31,279
sync account

856
00:28:31,279 --> 00:28:33,520
or a maintenance account that never

857
00:28:33,520 --> 00:28:35,200
changes its password and assign it

858
00:28:35,200 --> 00:28:36,320
privileges

859
00:28:36,320 --> 00:28:37,840
to read the content of over 100

860
00:28:37,840 --> 00:28:39,679
mailboxes that they're targeting

861
00:28:39,679 --> 00:28:41,679
well it's not uncommon well it's well

862
00:28:41,679 --> 00:28:43,440
this is not an uncommon practice in

863
00:28:43,440 --> 00:28:44,880
organizations

864
00:28:44,880 --> 00:28:48,240
um you know there's there's legitimate

865
00:28:48,240 --> 00:28:50,640
reasons for delegation

866
00:28:50,640 --> 00:28:52,640
your security monitoring team should be

867
00:28:52,640 --> 00:28:54,080
looking out for the add mailbox

868
00:28:54,080 --> 00:28:55,600
permission event

869
00:28:55,600 --> 00:28:57,360
um and following that up with some sort

870
00:28:57,360 --> 00:28:58,799
of change request or positive

871
00:28:58,799 --> 00:29:00,000
affirmation from

872
00:29:00,000 --> 00:29:03,440
the users that they did configure it

873
00:29:03,440 --> 00:29:04,720
now we want to get into a little bit

874
00:29:04,720 --> 00:29:06,240
more complicated mechanisms that

875
00:29:06,240 --> 00:29:07,840
attackers use

876
00:29:07,840 --> 00:29:10,080
and these can be mail flow or transport

877
00:29:10,080 --> 00:29:10,960
rules

878
00:29:10,960 --> 00:29:14,000
these rules i identify and act on all

879
00:29:14,000 --> 00:29:14,799
messages

880
00:29:14,799 --> 00:29:17,039
that flow through exchange online

881
00:29:17,039 --> 00:29:18,880
they're commonly used by organizations

882
00:29:18,880 --> 00:29:19,200
to

883
00:29:19,200 --> 00:29:22,799
block attachments bypass clutter

884
00:29:22,799 --> 00:29:26,000
or block messages with

885
00:29:26,000 --> 00:29:29,120
unacceptable language

886
00:29:29,120 --> 00:29:32,960
attackers can use these same rules

887
00:29:32,960 --> 00:29:34,880
to inspect messages for content that

888
00:29:34,880 --> 00:29:36,480
they're interested in that's relevant to

889
00:29:36,480 --> 00:29:37,840
their mission

890
00:29:37,840 --> 00:29:40,640
and send it outside of the tenant via a

891
00:29:40,640 --> 00:29:42,000
bcc rule

892
00:29:42,000 --> 00:29:44,080
now we've seen fin 7 employ this

893
00:29:44,080 --> 00:29:45,039
technique

894
00:29:45,039 --> 00:29:47,360
to target gift card processing in an

895
00:29:47,360 --> 00:29:48,399
organization

896
00:29:48,399 --> 00:29:52,320
each time that a legitimate gift card

897
00:29:52,320 --> 00:29:53,520
was created

898
00:29:53,520 --> 00:29:56,480
within the organization fin7 received a

899
00:29:56,480 --> 00:29:58,240
copy of that gift card and this resulted

900
00:29:58,240 --> 00:29:58,480
in

901
00:29:58,480 --> 00:30:01,440
thousands of gift cards being cashed out

902
00:30:01,440 --> 00:30:02,480
prior to the

903
00:30:02,480 --> 00:30:06,240
legitimate users receiving them

904
00:30:06,320 --> 00:30:08,880
now because organizations can have a lot

905
00:30:08,880 --> 00:30:11,840
of mail flow rules

906
00:30:11,840 --> 00:30:14,720
malicious entries are difficult to find

907
00:30:14,720 --> 00:30:15,200
so

908
00:30:15,200 --> 00:30:17,600
the new transport rule event needs to be

909
00:30:17,600 --> 00:30:18,399
monitored

910
00:30:18,399 --> 00:30:20,960
in your by your security operations team

911
00:30:20,960 --> 00:30:22,720
and i'd recommend having some sort of

912
00:30:22,720 --> 00:30:24,640
change process to go along with this so

913
00:30:24,640 --> 00:30:25,360
you can again

914
00:30:25,360 --> 00:30:27,440
positively affirm that administrators

915
00:30:27,440 --> 00:30:28,640
are making these changes

916
00:30:28,640 --> 00:30:31,840
and that it's not an attacker

917
00:30:32,080 --> 00:30:35,200
now attackers like to automate things as

918
00:30:35,200 --> 00:30:36,799
well

919
00:30:36,799 --> 00:30:38,799
so we have seen attackers leverage the

920
00:30:38,799 --> 00:30:41,600
graph api and this is a restful web api

921
00:30:41,600 --> 00:30:45,120
that enables you or administrators to

922
00:30:45,120 --> 00:30:46,799
access

923
00:30:46,799 --> 00:30:48,840
the microsoft cloud services and its

924
00:30:48,840 --> 00:30:50,000
resources

925
00:30:50,000 --> 00:30:53,200
you can read emails create events

926
00:30:53,200 --> 00:30:55,360
administer users effectively do

927
00:30:55,360 --> 00:30:56,880
everything

928
00:30:56,880 --> 00:30:58,960
advanced attackers have registered oauth

929
00:30:58,960 --> 00:31:00,480
applications like doug talked about

930
00:31:00,480 --> 00:31:01,760
earlier

931
00:31:01,760 --> 00:31:04,880
and convinced those users to consent to

932
00:31:04,880 --> 00:31:06,640
access we've also seen them

933
00:31:06,640 --> 00:31:10,080
consent to tenant wide admin access

934
00:31:10,080 --> 00:31:13,200
now because password changes don't

935
00:31:13,200 --> 00:31:16,640
remove the oauth the

936
00:31:16,640 --> 00:31:19,039
the oauth application the attackers can

937
00:31:19,039 --> 00:31:20,480
maintain their persistence in the

938
00:31:20,480 --> 00:31:21,360
environment

939
00:31:21,360 --> 00:31:23,440
and make these api requests to read your

940
00:31:23,440 --> 00:31:24,960
mailbox to search your

941
00:31:24,960 --> 00:31:27,039
documents and download you know your

942
00:31:27,039 --> 00:31:30,000
onenote files or your updated contracts

943
00:31:30,000 --> 00:31:30,559
or

944
00:31:30,559 --> 00:31:32,240
your secret project development

945
00:31:32,240 --> 00:31:35,120
information all through a web api that's

946
00:31:35,120 --> 00:31:37,200
proxied through anywhere in the world

947
00:31:37,200 --> 00:31:38,399
with no need for multi-factor

948
00:31:38,399 --> 00:31:41,039
authentication

949
00:31:41,760 --> 00:31:44,399
and finally i want to talk about

950
00:31:44,399 --> 00:31:46,799
e-discovery abuse

951
00:31:46,799 --> 00:31:49,120
this is where attackers have access to

952
00:31:49,120 --> 00:31:50,399
all the things

953
00:31:50,399 --> 00:31:53,360
it's a gold mine for them it lets them

954
00:31:53,360 --> 00:31:55,919
search and download content

955
00:31:55,919 --> 00:31:59,840
in exchange online microsoft teams

956
00:31:59,840 --> 00:32:01,200
sharepoint online

957
00:32:01,200 --> 00:32:04,240
onedrive for business skype for the

958
00:32:04,240 --> 00:32:06,480
three of you that are still using skype

959
00:32:06,480 --> 00:32:09,200
and yammer i guess if you're microsoft

960
00:32:09,200 --> 00:32:11,919
you use yammer

961
00:32:12,159 --> 00:32:14,799
and the corresponding event log entries

962
00:32:14,799 --> 00:32:16,480
are missing some critical data like a

963
00:32:16,480 --> 00:32:17,519
session id

964
00:32:17,519 --> 00:32:19,919
or ip addresses so when you search the

965
00:32:19,919 --> 00:32:22,240
unified audit log

966
00:32:22,240 --> 00:32:24,399
for evidence of an attacker accessing or

967
00:32:24,399 --> 00:32:26,159
making a malicious search

968
00:32:26,159 --> 00:32:27,840
based on the indicators of compromise

969
00:32:27,840 --> 00:32:30,399
you've developed namely an ip address

970
00:32:30,399 --> 00:32:32,240
you will miss these events and you will

971
00:32:32,240 --> 00:32:33,519
potentially miss

972
00:32:33,519 --> 00:32:36,559
hundreds of gigabytes of data theft and

973
00:32:36,559 --> 00:32:38,640
we've seen apt-35

974
00:32:38,640 --> 00:32:41,440
leverage this capability with great

975
00:32:41,440 --> 00:32:42,399
success

976
00:32:42,399 --> 00:32:44,559
uh they will log in gain administrative

977
00:32:44,559 --> 00:32:46,559
access to a network

978
00:32:46,559 --> 00:32:49,760
they will create an e-discovery search

979
00:32:49,760 --> 00:32:51,440
find all the data they were interested

980
00:32:51,440 --> 00:32:53,679
in in most cases it's the

981
00:32:53,679 --> 00:32:56,320
rs are these rsa seed files for soft

982
00:32:56,320 --> 00:32:58,000
tokens that are mailed to users

983
00:32:58,000 --> 00:33:01,360
or emailed to users during provisioning

984
00:33:01,360 --> 00:33:03,600
they will download the data and they

985
00:33:03,600 --> 00:33:05,200
will then delete the results and this

986
00:33:05,200 --> 00:33:07,120
all happens in the span of a couple of

987
00:33:07,120 --> 00:33:09,360
hours and once they're once they delete

988
00:33:09,360 --> 00:33:10,799
the results when a legitimate

989
00:33:10,799 --> 00:33:12,080
e-discovery user

990
00:33:12,080 --> 00:33:15,039
logs into the console all evidence of it

991
00:33:15,039 --> 00:33:16,480
has disappeared

992
00:33:16,480 --> 00:33:18,640
so it's a particularly insidious way to

993
00:33:18,640 --> 00:33:20,880
gain access to your entire

994
00:33:20,880 --> 00:33:23,840
tenant and it's critical that you as

995
00:33:23,840 --> 00:33:25,200
defenders

996
00:33:25,200 --> 00:33:28,399
micromanage the searches and exports of

997
00:33:28,399 --> 00:33:28,880
data

998
00:33:28,880 --> 00:33:32,720
that occur within e-discovery

999
00:33:33,840 --> 00:33:35,840
so on that happy note i wanted to leave

1000
00:33:35,840 --> 00:33:38,640
you guys with some closing thoughts

1001
00:33:38,640 --> 00:33:41,919
one enforce mfa for everyone just do it

1002
00:33:41,919 --> 00:33:42,399
now

1003
00:33:42,399 --> 00:33:46,080
there's no reason to wait um ensure

1004
00:33:46,080 --> 00:33:49,039
that you're sending your office 365 logs

1005
00:33:49,039 --> 00:33:49,760
to a sim

1006
00:33:49,760 --> 00:33:52,480
and you have alerts configured that

1007
00:33:52,480 --> 00:33:56,480
detect what attackers are actually doing

1008
00:33:56,480 --> 00:33:58,799
and you need to understand the types of

1009
00:33:58,799 --> 00:33:59,840
information that is

1010
00:33:59,840 --> 00:34:04,240
in your o365 tenant it's not just email

1011
00:34:04,240 --> 00:34:06,960
your developers are sharing api keys

1012
00:34:06,960 --> 00:34:08,879
within teams chats whether you like it

1013
00:34:08,879 --> 00:34:09,760
or not

1014
00:34:09,760 --> 00:34:12,079
and using ediscovery they can find those

1015
00:34:12,079 --> 00:34:14,079
api keys and gain access to a

1016
00:34:14,079 --> 00:34:16,560
variety of other services and use this

1017
00:34:16,560 --> 00:34:17,280
data as an

1018
00:34:17,280 --> 00:34:21,599
easy hop point and finally

1019
00:34:21,599 --> 00:34:23,199
it's important to understand that the

1020
00:34:23,199 --> 00:34:26,719
apt groups are aware of how office 365

1021
00:34:26,719 --> 00:34:27,280
works

1022
00:34:27,280 --> 00:34:28,879
and they're investing considerable

1023
00:34:28,879 --> 00:34:31,359
effort into learning how to use it

1024
00:34:31,359 --> 00:34:33,359
so much so that they're not even afraid

1025
00:34:33,359 --> 00:34:34,560
to make

1026
00:34:34,560 --> 00:34:37,280
tenant-wide modifications like mail flow

1027
00:34:37,280 --> 00:34:38,000
rules

1028
00:34:38,000 --> 00:34:41,040
or modifying conditional access policies

1029
00:34:41,040 --> 00:34:44,480
for your entire cloud infrastructure

1030
00:34:44,480 --> 00:34:46,719
well you might have a change control

1031
00:34:46,719 --> 00:34:48,560
process the attacker is not going to

1032
00:34:48,560 --> 00:34:50,239
respect that

1033
00:34:50,239 --> 00:34:51,918
thanks for listening we appreciate the

1034
00:34:51,918 --> 00:34:54,719
you guys tuning in

1035
00:34:58,240 --> 00:35:03,839
i think we're live

1036
00:35:07,760 --> 00:35:10,160
all right guys uh thanks for and girls

1037
00:35:10,160 --> 00:35:11,680
thanks for listening to our talk

1038
00:35:11,680 --> 00:35:14,400
um i think most of the questions that

1039
00:35:14,400 --> 00:35:16,320
were in the chat we answered so

1040
00:35:16,320 --> 00:35:18,880
i don't really know how this is supposed

1041
00:35:18,880 --> 00:35:20,160
to work but i guess if there are any

1042
00:35:20,160 --> 00:35:21,760
other questions we'll answer them as

1043
00:35:21,760 --> 00:35:22,160
they

1044
00:35:22,160 --> 00:35:24,480
come in

1045
00:35:29,119 --> 00:35:32,400
uh should the sim

1046
00:35:32,400 --> 00:35:34,560
be outside of the ad tenant it's

1047
00:35:34,560 --> 00:35:36,000
monitoring

1048
00:35:36,000 --> 00:35:38,079
i don't really think it matters i assume

1049
00:35:38,079 --> 00:35:40,560
this is a question of alluding to like

1050
00:35:40,560 --> 00:35:43,280
uh sentinel and the other uh stuff

1051
00:35:43,280 --> 00:35:45,040
inside azure active directory inside

1052
00:35:45,040 --> 00:35:46,079
office 365

1053
00:35:46,079 --> 00:35:48,800
i don't think it really matters uh

1054
00:35:48,800 --> 00:35:50,320
there's probably not really a question

1055
00:35:50,320 --> 00:35:52,160
of like a

1056
00:35:52,160 --> 00:35:53,520
dos attack or anything like that if

1057
00:35:53,520 --> 00:35:54,800
you're trying to get it and i think

1058
00:35:54,800 --> 00:35:59,839
sentinel is a pretty good platform

1059
00:36:09,920 --> 00:36:12,240
in regards to the the miter attack

1060
00:36:12,240 --> 00:36:13,440
framework question i'll

1061
00:36:13,440 --> 00:36:16,560
confess i'm not an expert on the

1062
00:36:16,560 --> 00:36:18,560
miter attack framework and i don't know

1063
00:36:18,560 --> 00:36:20,000
how any of these

1064
00:36:20,000 --> 00:36:23,599
techniques map to it

1065
00:36:23,680 --> 00:36:25,440
i don't know doug if you have any

1066
00:36:25,440 --> 00:36:28,079
thoughts on that

1067
00:36:30,640 --> 00:36:32,960
nope um the question let's see office

1068
00:36:32,960 --> 00:36:35,200
365 has built-in alerts are those

1069
00:36:35,200 --> 00:36:36,160
adequate

1070
00:36:36,160 --> 00:36:38,320
i think those are a really great start

1071
00:36:38,320 --> 00:36:39,440
but you know

1072
00:36:39,440 --> 00:36:41,200
part of what josh and i have talked

1073
00:36:41,200 --> 00:36:43,040
about here are a lot of ways that

1074
00:36:43,040 --> 00:36:44,560
attackers are using

1075
00:36:44,560 --> 00:36:47,040
legitimate features within office 365 to

1076
00:36:47,040 --> 00:36:48,240
their benefit right

1077
00:36:48,240 --> 00:36:50,160
and so there there certainly are some

1078
00:36:50,160 --> 00:36:51,760
alerts for

1079
00:36:51,760 --> 00:36:53,920
um like new e-discovery cases being

1080
00:36:53,920 --> 00:36:56,240
launched new forwarding rules being put

1081
00:36:56,240 --> 00:36:56,800
in

1082
00:36:56,800 --> 00:36:58,400
those are certainly good something an

1083
00:36:58,400 --> 00:37:00,800
organization wants to

1084
00:37:00,800 --> 00:37:03,599
uh be monitoring but some of the more

1085
00:37:03,599 --> 00:37:05,119
nuanced things like

1086
00:37:05,119 --> 00:37:07,040
someone modifying a conditional access

1087
00:37:07,040 --> 00:37:08,240
policy for example

1088
00:37:08,240 --> 00:37:10,720
or someone adding a new authentication

1089
00:37:10,720 --> 00:37:11,760
provider

1090
00:37:11,760 --> 00:37:13,760
those i don't believe have any sort of

1091
00:37:13,760 --> 00:37:15,520
default alerts and it's

1092
00:37:15,520 --> 00:37:16,640
something you really want to be

1093
00:37:16,640 --> 00:37:18,000
monitoring right it's something that

1094
00:37:18,000 --> 00:37:18,880
probably happens

1095
00:37:18,880 --> 00:37:21,119
infrequently enough that it's okay to

1096
00:37:21,119 --> 00:37:22,079
generate an alert

1097
00:37:22,079 --> 00:37:25,599
for your sock or for your uh cert team

1098
00:37:25,599 --> 00:37:26,960
and that to my knowledge does not have

1099
00:37:26,960 --> 00:37:31,359
any default within uh office 360.

1100
00:37:31,359 --> 00:37:34,400
microsoft does have sentinel which i

1101
00:37:34,400 --> 00:37:36,240
have limited experience with it

1102
00:37:36,240 --> 00:37:38,480
um but anybody that i've talked to

1103
00:37:38,480 --> 00:37:39,520
that's worked with it has

1104
00:37:39,520 --> 00:37:42,800
come away with a fairly positive um

1105
00:37:42,800 --> 00:37:45,520
uh impression of the tool you can also

1106
00:37:45,520 --> 00:37:47,280
build in these custom alerts

1107
00:37:47,280 --> 00:37:49,200
into your existing sim if you integrate

1108
00:37:49,200 --> 00:37:51,040
the two

1109
00:37:51,040 --> 00:37:53,200
and like doug said when attackers are

1110
00:37:53,200 --> 00:37:54,480
leveraging

1111
00:37:54,480 --> 00:37:56,320
existing functionality or legitimate

1112
00:37:56,320 --> 00:37:58,160
functionality you need to

1113
00:37:58,160 --> 00:37:59,760
pay close attention to how your alerts

1114
00:37:59,760 --> 00:38:00,880
are being configured and how you're

1115
00:38:00,880 --> 00:38:02,000
following up on them and what the

1116
00:38:02,000 --> 00:38:03,599
playbooks are for each alert because you

1117
00:38:03,599 --> 00:38:06,640
don't want to end up

1118
00:38:06,720 --> 00:38:08,320
generating an alert for every

1119
00:38:08,320 --> 00:38:10,400
e-discovery search that's done in your

1120
00:38:10,400 --> 00:38:11,119
tenant

1121
00:38:11,119 --> 00:38:13,520
when you have a fairly active legal team

1122
00:38:13,520 --> 00:38:15,040
it's just gonna you're gonna become numb

1123
00:38:15,040 --> 00:38:16,240
to those

1124
00:38:16,240 --> 00:38:18,079
those alerts very quickly so it's just a

1125
00:38:18,079 --> 00:38:19,440
matter of

1126
00:38:19,440 --> 00:38:22,560
building or developing solid workflows

1127
00:38:22,560 --> 00:38:24,800
inside and outside of office 365 to make

1128
00:38:24,800 --> 00:38:27,200
your alerts more effective

1129
00:38:27,200 --> 00:38:28,640
josh there's a question about the graph

1130
00:38:28,640 --> 00:38:30,560
api because the video was chopping in

1131
00:38:30,560 --> 00:38:32,560
and out do you want to briefly go over

1132
00:38:32,560 --> 00:38:33,839
what attackers have used the

1133
00:38:33,839 --> 00:38:36,960
graph api for yeah so at a really simple

1134
00:38:36,960 --> 00:38:38,800
level the attackers are using it to read

1135
00:38:38,800 --> 00:38:42,560
mailbox or message content for um

1136
00:38:42,560 --> 00:38:44,320
mailboxes they're interested in so the

1137
00:38:44,320 --> 00:38:46,160
the case that we worked on

1138
00:38:46,160 --> 00:38:48,560
um the attacker had granted themselves

1139
00:38:48,560 --> 00:38:49,200
or

1140
00:38:49,200 --> 00:38:51,599
made an oauth consent for an individual

1141
00:38:51,599 --> 00:38:52,640
user's mailbox

1142
00:38:52,640 --> 00:38:55,520
this wasn't a tenant-wide access that is

1143
00:38:55,520 --> 00:38:57,200
possible but that's not

1144
00:38:57,200 --> 00:39:00,160
what we saw uh the attacker then made

1145
00:39:00,160 --> 00:39:01,920
repeated api requests

1146
00:39:01,920 --> 00:39:05,280
to access content within the mailbox

1147
00:39:05,280 --> 00:39:08,560
i think it was close to 90 days before

1148
00:39:08,560 --> 00:39:12,160
we were able to detect it and identify

1149
00:39:12,839 --> 00:39:15,839
it

1150
00:39:16,240 --> 00:39:19,839
okay let's see

1151
00:39:19,920 --> 00:39:22,240
yeah are there any powershell services

1152
00:39:22,240 --> 00:39:23,839
allowing abuse similar to what we

1153
00:39:23,839 --> 00:39:24,640
described

1154
00:39:24,640 --> 00:39:26,240
you know i think that's kind of a we'll

1155
00:39:26,240 --> 00:39:28,000
have to see question that you know

1156
00:39:28,000 --> 00:39:30,720
from from my understanding of how these

1157
00:39:30,720 --> 00:39:32,640
all worked it's

1158
00:39:32,640 --> 00:39:34,079
they all were using legacy

1159
00:39:34,079 --> 00:39:35,839
authentication right which doesn't

1160
00:39:35,839 --> 00:39:36,320
support

1161
00:39:36,320 --> 00:39:40,000
mfa and however our victim organizations

1162
00:39:40,000 --> 00:39:41,359
that we were working with

1163
00:39:41,359 --> 00:39:43,520
were using conditional access policies

1164
00:39:43,520 --> 00:39:46,079
to block legacy authentication

1165
00:39:46,079 --> 00:39:48,000
but i guess under the hood the way it

1166
00:39:48,000 --> 00:39:50,640
worked it was

1167
00:39:50,640 --> 00:39:53,280
trying to block it based on the specific

1168
00:39:53,280 --> 00:39:54,880
application service principle

1169
00:39:54,880 --> 00:39:58,320
and these service principles

1170
00:39:58,320 --> 00:40:00,640
azure ad powershell and then the older

1171
00:40:00,640 --> 00:40:02,320
version the mospp

1172
00:40:02,320 --> 00:40:04,880
powershell weren't included in that

1173
00:40:04,880 --> 00:40:05,920
block list

1174
00:40:05,920 --> 00:40:07,839
that now has been fixed but what i don't

1175
00:40:07,839 --> 00:40:09,280
know because i you know i don't know the

1176
00:40:09,280 --> 00:40:10,560
code right is

1177
00:40:10,560 --> 00:40:12,960
has the model shifted to use some sort

1178
00:40:12,960 --> 00:40:15,040
of different metadata or could there be

1179
00:40:15,040 --> 00:40:17,440
other service principle grids out there

1180
00:40:17,440 --> 00:40:19,280
that may bypass

1181
00:40:19,280 --> 00:40:22,839
the kind of logic and the conditional

1182
00:40:22,839 --> 00:40:25,760
access

1183
00:40:25,760 --> 00:40:28,880
there's a question about

1184
00:40:30,319 --> 00:40:32,960
okay perfect

1185
00:40:34,079 --> 00:40:35,359
there's a couple good questions i want

1186
00:40:35,359 --> 00:40:37,599
to get to all right yeah thanks guys

1187
00:40:37,599 --> 00:40:38,800
we'll we'll answer

1188
00:40:38,800 --> 00:40:44,079
uh in the chat

