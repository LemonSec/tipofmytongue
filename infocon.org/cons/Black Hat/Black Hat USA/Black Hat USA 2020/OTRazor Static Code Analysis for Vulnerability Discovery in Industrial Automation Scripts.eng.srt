1
00:00:02,910 --> 00:00:15,200
[Music]

2
00:00:15,200 --> 00:00:17,119
hello everyone thanks for following our

3
00:00:17,119 --> 00:00:17,840
talk

4
00:00:17,840 --> 00:00:19,520
my name is federico madgie i'm a

5
00:00:19,520 --> 00:00:21,359
researcher with planet micro

6
00:00:21,359 --> 00:00:23,359
and i'm here today with my collaborator

7
00:00:23,359 --> 00:00:24,640
marcia lopelyani

8
00:00:24,640 --> 00:00:27,199
who just received a phd from politecnico

9
00:00:27,199 --> 00:00:28,400
di milano

10
00:00:28,400 --> 00:00:30,640
this research is based on a joint work

11
00:00:30,640 --> 00:00:32,719
between politecnico di milano and trend

12
00:00:32,719 --> 00:00:35,680
micro research

13
00:00:36,719 --> 00:00:38,480
three years ago we were here on the

14
00:00:38,480 --> 00:00:40,079
blanket stage where actually we were in

15
00:00:40,079 --> 00:00:41,920
vegas but still we were on blackett

16
00:00:41,920 --> 00:00:44,480
explaining to you what were the risks of

17
00:00:44,480 --> 00:00:46,399
having an industrial robot connected to

18
00:00:46,399 --> 00:00:48,160
the factory network

19
00:00:48,160 --> 00:00:50,160
we showed you several ways that an

20
00:00:50,160 --> 00:00:52,719
attacker can abuse a connected robot

21
00:00:52,719 --> 00:00:54,879
and we show you the impact of real

22
00:00:54,879 --> 00:00:55,760
attacks

23
00:00:55,760 --> 00:00:58,480
for example they can introduce micro

24
00:00:58,480 --> 00:00:59,199
defects

25
00:00:59,199 --> 00:01:02,640
into the production three years later

26
00:01:02,640 --> 00:01:03,920
we're here once again

27
00:01:03,920 --> 00:01:06,159
but this time we told we we talked to

28
00:01:06,159 --> 00:01:07,840
you about programming

29
00:01:07,840 --> 00:01:10,960
of industrial robots we examined eight

30
00:01:10,960 --> 00:01:13,119
of the leading industrial robot

31
00:01:13,119 --> 00:01:14,080
platforms

32
00:01:14,080 --> 00:01:16,560
and we found some design issues that can

33
00:01:16,560 --> 00:01:18,240
have an impact in terms of

34
00:01:18,240 --> 00:01:20,240
vulnerabilities that could be introduced

35
00:01:20,240 --> 00:01:21,280
by mistake from

36
00:01:21,280 --> 00:01:23,920
by developer and on the other hand we

37
00:01:23,920 --> 00:01:26,320
show you how a malicious actor can

38
00:01:26,320 --> 00:01:28,000
use these languages these custom

39
00:01:28,000 --> 00:01:30,159
languages to create new strains of

40
00:01:30,159 --> 00:01:31,680
malware

41
00:01:31,680 --> 00:01:34,079
last we will conclude our presentation

42
00:01:34,079 --> 00:01:35,680
telling you how we can prevent

43
00:01:35,680 --> 00:01:37,520
vulnerabilities and in case we cannot

44
00:01:37,520 --> 00:01:38,159
prevent

45
00:01:38,159 --> 00:01:40,000
we show you a technique that we have

46
00:01:40,000 --> 00:01:42,399
developed to detect vulnerabilities and

47
00:01:42,399 --> 00:01:44,000
malicious code

48
00:01:44,000 --> 00:01:45,840
so let me now hand it over to marcelo

49
00:01:45,840 --> 00:01:47,360
who will explain to you how

50
00:01:47,360 --> 00:01:49,920
industrial robots are programmed there

51
00:01:49,920 --> 00:01:51,040
are two different ways

52
00:01:51,040 --> 00:01:53,280
of programming russell robots the first

53
00:01:53,280 --> 00:01:54,640
is called teaching my showing

54
00:01:54,640 --> 00:01:57,360
and is about programming a robot while

55
00:01:57,360 --> 00:01:58,079
moving it

56
00:01:58,079 --> 00:02:00,320
using the teach pilot that device you

57
00:02:00,320 --> 00:02:02,320
can find on this line

58
00:02:02,320 --> 00:02:04,399
this is a very interactive and online

59
00:02:04,399 --> 00:02:06,159
way of programming robots

60
00:02:06,159 --> 00:02:08,720
on the other hand for more complex tasks

61
00:02:08,720 --> 00:02:09,758
you want to use

62
00:02:09,758 --> 00:02:12,879
a full-fledged programming language to

63
00:02:12,879 --> 00:02:14,480
program a robot offline

64
00:02:14,480 --> 00:02:16,080
as this talk is about programming

65
00:02:16,080 --> 00:02:18,720
languages let's see how they look like

66
00:02:18,720 --> 00:02:21,680
here you can find a simple task program

67
00:02:21,680 --> 00:02:23,920
implemented for abb's rapid programming

68
00:02:23,920 --> 00:02:25,040
language

69
00:02:25,040 --> 00:02:27,440
this program moves robot between two

70
00:02:27,440 --> 00:02:29,760
points point zero and point one

71
00:02:29,760 --> 00:02:32,720
repeatedly in a loop four ten times as

72
00:02:32,720 --> 00:02:34,400
you can see from the source code

73
00:02:34,400 --> 00:02:36,640
it's like having a general purpose

74
00:02:36,640 --> 00:02:37,920
programming language

75
00:02:37,920 --> 00:02:39,840
with addition of rob specific

76
00:02:39,840 --> 00:02:42,560
instructions and data types

77
00:02:42,560 --> 00:02:44,160
the same concept can be applied to

78
00:02:44,160 --> 00:02:46,160
different languages here is the same

79
00:02:46,160 --> 00:02:46,640
program

80
00:02:46,640 --> 00:02:48,080
implemented for another language

81
00:02:48,080 --> 00:02:49,680
queuecast here are

82
00:02:49,680 --> 00:02:51,920
as you can see the structure is very

83
00:02:51,920 --> 00:02:53,599
similar

84
00:02:53,599 --> 00:02:56,239
i'm using the terms language and vendor

85
00:02:56,239 --> 00:02:58,080
in a pretty much interchangeable way

86
00:02:58,080 --> 00:02:59,920
because in robot space

87
00:02:59,920 --> 00:03:02,400
languages are mostly proprietary to

88
00:03:02,400 --> 00:03:03,519
program a robot

89
00:03:03,519 --> 00:03:05,440
of a certain vendor you must use the

90
00:03:05,440 --> 00:03:07,360
property language as the property domain

91
00:03:07,360 --> 00:03:09,360
specific language of that vendor so to

92
00:03:09,360 --> 00:03:11,280
say to program an abb robot you must use

93
00:03:11,280 --> 00:03:12,080
a rep

94
00:03:12,080 --> 00:03:14,560
there isn't any cross-platform language

95
00:03:14,560 --> 00:03:16,480
or lingua franca that can be used to

96
00:03:16,480 --> 00:03:17,599
program robots

97
00:03:17,599 --> 00:03:20,720
by different manners back to the topic

98
00:03:20,720 --> 00:03:22,159
of our talk

99
00:03:22,159 --> 00:03:24,480
we analyzed the languages of eight

100
00:03:24,480 --> 00:03:26,239
different vendors in order to see

101
00:03:26,239 --> 00:03:28,560
if they had securely sensitive

102
00:03:28,560 --> 00:03:29,280
primitives

103
00:03:29,280 --> 00:03:31,040
so to say primitives that they can be

104
00:03:31,040 --> 00:03:33,680
used to bypass security boundaries

105
00:03:33,680 --> 00:03:35,760
the first primitive that we analyzed is

106
00:03:35,760 --> 00:03:36,879
the ability of

107
00:03:36,879 --> 00:03:39,599
reading or writing from a from the file

108
00:03:39,599 --> 00:03:41,519
system of the robot the artifact has

109
00:03:41,519 --> 00:03:42,239
problem

110
00:03:42,239 --> 00:03:44,799
this capability is present in five out

111
00:03:44,799 --> 00:03:46,799
of eight programming languages

112
00:03:46,799 --> 00:03:49,200
and well it's not exactly surprising

113
00:03:49,200 --> 00:03:50,959
because there's there is there are a lot

114
00:03:50,959 --> 00:03:51,599
of

115
00:03:51,599 --> 00:03:54,319
uh there are a lot of use cases for this

116
00:03:54,319 --> 00:03:55,200
such as

117
00:03:55,200 --> 00:03:58,319
writing log files or reading coordinates

118
00:03:58,319 --> 00:04:00,159
from a file

119
00:04:00,159 --> 00:04:03,280
the more advanced file systems

120
00:04:03,280 --> 00:04:05,599
have also the capability of performing

121
00:04:05,599 --> 00:04:07,040
directory listing because

122
00:04:07,040 --> 00:04:09,439
they are hierarchical not just a flat

123
00:04:09,439 --> 00:04:12,159
list of files

124
00:04:12,959 --> 00:04:15,840
more surprisingly we found that in four

125
00:04:15,840 --> 00:04:16,639
cases

126
00:04:16,639 --> 00:04:19,279
it was possible to load new code at

127
00:04:19,279 --> 00:04:20,160
runtime

128
00:04:20,160 --> 00:04:23,120
so a language is exposing primitives to

129
00:04:23,120 --> 00:04:25,040
load a module to load a code module from

130
00:04:25,040 --> 00:04:25,840
file

131
00:04:25,840 --> 00:04:29,280
and to dynamically resolve a function

132
00:04:29,280 --> 00:04:30,160
name

133
00:04:30,160 --> 00:04:32,720
at one time and call it and call the

134
00:04:32,720 --> 00:04:35,199
function with that name

135
00:04:35,199 --> 00:04:37,840
this capability combined with the fact

136
00:04:37,840 --> 00:04:39,680
that it is possible to write on a file

137
00:04:39,680 --> 00:04:40,560
system

138
00:04:40,560 --> 00:04:42,720
makes it possible if the language is

139
00:04:42,720 --> 00:04:44,639
interpreted and not compiled

140
00:04:44,639 --> 00:04:47,360
to write programs that write a program

141
00:04:47,360 --> 00:04:48,320
load it

142
00:04:48,320 --> 00:04:52,160
and cause it so to say having some sort

143
00:04:52,160 --> 00:04:52,639
of

144
00:04:52,639 --> 00:04:56,639
writable and executable memory error

145
00:04:56,639 --> 00:04:59,120
last but not least we found that all the

146
00:04:59,120 --> 00:05:00,960
languages that we analyzed

147
00:05:00,960 --> 00:05:02,800
have the capability of performing

148
00:05:02,800 --> 00:05:04,800
network communication

149
00:05:04,800 --> 00:05:08,720
so to say to use network sockets

150
00:05:08,720 --> 00:05:11,759
before going forward i would like to uh

151
00:05:11,759 --> 00:05:13,440
give a short look at the random

152
00:05:13,440 --> 00:05:14,880
environment uh

153
00:05:14,880 --> 00:05:17,840
if we consider modern platform uh the

154
00:05:17,840 --> 00:05:19,759
tendency is to have

155
00:05:19,759 --> 00:05:22,320
third-party application to be isolated

156
00:05:22,320 --> 00:05:25,280
to be sandboxed if an application is

157
00:05:25,280 --> 00:05:28,479
to access resources from the operating

158
00:05:28,479 --> 00:05:28,960
system

159
00:05:28,960 --> 00:05:30,960
from the hardware that access is

160
00:05:30,960 --> 00:05:33,039
mediated it's mediated by an access

161
00:05:33,039 --> 00:05:35,120
control mechanism that is fine grain

162
00:05:35,120 --> 00:05:37,199
and application specific so i can have

163
00:05:37,199 --> 00:05:38,400
an application

164
00:05:38,400 --> 00:05:39,919
that doesn't have the permission of

165
00:05:39,919 --> 00:05:41,600
access device system

166
00:05:41,600 --> 00:05:43,600
or i can have an application that has

167
00:05:43,600 --> 00:05:46,080
the permission only of accessing

168
00:05:46,080 --> 00:05:48,960
some subset of the file system in case

169
00:05:48,960 --> 00:05:51,039
of industrial robot it is not so

170
00:05:51,039 --> 00:05:53,360
there isn't any access control mechanism

171
00:05:53,360 --> 00:05:55,039
for task programs

172
00:05:55,039 --> 00:05:57,600
programs run in an unrestricted way if

173
00:05:57,600 --> 00:05:58,400
there exists

174
00:05:58,400 --> 00:06:01,360
an instruction or an api to access a

175
00:06:01,360 --> 00:06:02,080
certain

176
00:06:02,080 --> 00:06:04,960
hardware resource that resource can be

177
00:06:04,960 --> 00:06:05,600
accessed

178
00:06:05,600 --> 00:06:08,639
by all the programs it turns out that

179
00:06:08,639 --> 00:06:10,560
the features that marcelo just explained

180
00:06:10,560 --> 00:06:11,199
to you

181
00:06:11,199 --> 00:06:13,680
are actually used we talked to about 20

182
00:06:13,680 --> 00:06:15,840
experts including developers control

183
00:06:15,840 --> 00:06:17,600
process engineers as well as some

184
00:06:17,600 --> 00:06:19,039
academics working in the field of

185
00:06:19,039 --> 00:06:21,199
robotics and they all told us that in

186
00:06:21,199 --> 00:06:22,479
one way or another

187
00:06:22,479 --> 00:06:24,960
when they develop code to automate a

188
00:06:24,960 --> 00:06:27,360
robot or an industrial machine

189
00:06:27,360 --> 00:06:29,360
they need to use network features such

190
00:06:29,360 --> 00:06:30,720
as network socket they

191
00:06:30,720 --> 00:06:32,560
they need to use file operations they

192
00:06:32,560 --> 00:06:34,479
need to use dynamic code loading

193
00:06:34,479 --> 00:06:36,080
and some of them told us that their

194
00:06:36,080 --> 00:06:38,080
software the automation scripts that

195
00:06:38,080 --> 00:06:39,199
they come up with

196
00:06:39,199 --> 00:06:42,479
are complex enough to need subroutines

197
00:06:42,479 --> 00:06:44,319
in order to structure them in

198
00:06:44,319 --> 00:06:47,680
an elegant and usable way we also wanted

199
00:06:47,680 --> 00:06:49,280
to understand how much awareness there

200
00:06:49,280 --> 00:06:50,960
is in this community how much security

201
00:06:50,960 --> 00:06:52,800
awareness there is in these communities

202
00:06:52,800 --> 00:06:54,479
the percentages that you see on the

203
00:06:54,479 --> 00:06:56,319
right hand side of the screen indicate

204
00:06:56,319 --> 00:06:57,120
the fraction

205
00:06:57,120 --> 00:06:59,840
of conversations uh going on in the

206
00:06:59,840 --> 00:07:00,479
major

207
00:07:00,479 --> 00:07:02,800
online communities for industrial

208
00:07:02,800 --> 00:07:04,080
automation engineers

209
00:07:04,080 --> 00:07:07,199
which contain security related terms we

210
00:07:07,199 --> 00:07:09,440
search about 12 of the most active

211
00:07:09,440 --> 00:07:10,400
forums

212
00:07:10,400 --> 00:07:12,319
looking for conversations containing

213
00:07:12,319 --> 00:07:13,919
keywords such as

214
00:07:13,919 --> 00:07:17,039
hack security vulnerability fixes

215
00:07:17,039 --> 00:07:19,360
patches and stuff like that and we found

216
00:07:19,360 --> 00:07:21,599
that uh only a minority of the

217
00:07:21,599 --> 00:07:22,400
conversation

218
00:07:22,400 --> 00:07:24,720
are about security in some cases there

219
00:07:24,720 --> 00:07:25,680
are there is even

220
00:07:25,680 --> 00:07:28,479
almost nothing about security in the in

221
00:07:28,479 --> 00:07:31,120
the forum as well

222
00:07:31,120 --> 00:07:34,240
um so to con to summarize what we have

223
00:07:34,240 --> 00:07:34,880
so far

224
00:07:34,880 --> 00:07:37,280
uh we have a fairly scarce security

225
00:07:37,280 --> 00:07:38,479
awareness at least

226
00:07:38,479 --> 00:07:40,160
according to the data that we have

227
00:07:40,160 --> 00:07:42,000
collected and to the interviews that we

228
00:07:42,000 --> 00:07:43,680
have conducted

229
00:07:43,680 --> 00:07:46,240
we have industrial industrial machines

230
00:07:46,240 --> 00:07:47,759
that are programmable

231
00:07:47,759 --> 00:07:50,319
using these legacy programming languages

232
00:07:50,319 --> 00:07:51,280
which are

233
00:07:51,280 --> 00:07:53,599
makes it fairly difficult to switch away

234
00:07:53,599 --> 00:07:55,759
from because every vendor has their own

235
00:07:55,759 --> 00:07:56,960
technology

236
00:07:56,960 --> 00:07:59,440
and these programming languages include

237
00:07:59,440 --> 00:08:01,520
security sensitive features which may

238
00:08:01,520 --> 00:08:04,560
impact the security of the of any

239
00:08:04,560 --> 00:08:06,319
produced

240
00:08:06,319 --> 00:08:09,120
automation program and last very

241
00:08:09,120 --> 00:08:10,000
important

242
00:08:10,000 --> 00:08:12,080
we found out that there is almost no

243
00:08:12,080 --> 00:08:14,639
security isolation there is no um

244
00:08:14,639 --> 00:08:17,120
resource isolation that is fine-grained

245
00:08:17,120 --> 00:08:17,759
enough

246
00:08:17,759 --> 00:08:20,160
to avoid for example that if a program

247
00:08:20,160 --> 00:08:22,560
contains a security sensitive operation

248
00:08:22,560 --> 00:08:24,960
the operating system may may or may not

249
00:08:24,960 --> 00:08:27,360
be able to

250
00:08:27,360 --> 00:08:29,360
block the execution or at least ask for

251
00:08:29,360 --> 00:08:30,560
confirmation

252
00:08:30,560 --> 00:08:32,799
up front to the operator there's no such

253
00:08:32,799 --> 00:08:34,000
features

254
00:08:34,000 --> 00:08:36,799
that we have found so you may ask what

255
00:08:36,799 --> 00:08:38,240
could possibly go wrong

256
00:08:38,240 --> 00:08:40,799
well on the one end developers may

257
00:08:40,799 --> 00:08:43,120
introduce vulnerabilities by mistake

258
00:08:43,120 --> 00:08:44,560
because they are not aware of the

259
00:08:44,560 --> 00:08:46,320
security implication of using

260
00:08:46,320 --> 00:08:48,959
those uh security sensitive features and

261
00:08:48,959 --> 00:08:49,920
on the other hand

262
00:08:49,920 --> 00:08:52,399
threat actors may develop may use these

263
00:08:52,399 --> 00:08:54,160
powerful features to develop

264
00:08:54,160 --> 00:08:56,240
new strains of malware and we found

265
00:08:56,240 --> 00:08:57,760
evidence of both cases

266
00:08:57,760 --> 00:08:59,920
on the one end we found public code

267
00:08:59,920 --> 00:09:02,240
containing vulnerabilities we found

268
00:09:02,240 --> 00:09:04,320
industrial automation code in github and

269
00:09:04,320 --> 00:09:06,160
gitlab and other repositories

270
00:09:06,160 --> 00:09:08,640
and we found vulnerabilities in there

271
00:09:08,640 --> 00:09:10,080
and on the other hand we were able to

272
00:09:10,080 --> 00:09:10,800
prove

273
00:09:10,800 --> 00:09:12,959
that these languages are powerful enough

274
00:09:12,959 --> 00:09:15,279
to allow malicious actors to develop

275
00:09:15,279 --> 00:09:17,519
fairly advanced malware for example we

276
00:09:17,519 --> 00:09:18,959
develop a malware with

277
00:09:18,959 --> 00:09:21,760
self-spreading capabilities and file

278
00:09:21,760 --> 00:09:24,080
dropping capabilities so remote updates

279
00:09:24,080 --> 00:09:25,360
essentially

280
00:09:25,360 --> 00:09:26,880
let me now switch it over to marcelo

281
00:09:26,880 --> 00:09:28,480
again who will explain to you the first

282
00:09:28,480 --> 00:09:31,360
part vulnerabilities

283
00:09:31,360 --> 00:09:33,040
vulnerabilities industrial other

284
00:09:33,040 --> 00:09:34,800
programs happen because of two

285
00:09:34,800 --> 00:09:36,880
ingredients the first ingredient is

286
00:09:36,880 --> 00:09:38,480
related to the fact that the programming

287
00:09:38,480 --> 00:09:40,640
languages used for industrial robotics

288
00:09:40,640 --> 00:09:42,640
have security sensitive features just

289
00:09:42,640 --> 00:09:44,399
like the ones that i showed you before

290
00:09:44,399 --> 00:09:46,240
the second ingredient is related with

291
00:09:46,240 --> 00:09:47,920
the fact that sometimes

292
00:09:47,920 --> 00:09:50,080
tense programs left a property input

293
00:09:50,080 --> 00:09:50,959
validation

294
00:09:50,959 --> 00:09:54,080
which which is partially related by the

295
00:09:54,080 --> 00:09:55,680
lack of security awareness

296
00:09:55,680 --> 00:09:57,680
among who programs industrial robots as

297
00:09:57,680 --> 00:09:59,360
federico showed before

298
00:09:59,360 --> 00:10:01,680
so overall it's possible to have

299
00:10:01,680 --> 00:10:03,360
vulnerabilities because the combination

300
00:10:03,360 --> 00:10:05,040
of those two needles makes it possible

301
00:10:05,040 --> 00:10:07,120
to have vulnerabilities in test programs

302
00:10:07,120 --> 00:10:09,040
and actually we find we found

303
00:10:09,040 --> 00:10:10,800
vulnerabilities is some reality's

304
00:10:10,800 --> 00:10:12,800
problems that we found out in the wide

305
00:10:12,800 --> 00:10:14,320
we found various instances of

306
00:10:14,320 --> 00:10:16,160
vulnerabilities or signal movement

307
00:10:16,160 --> 00:10:16,959
commands

308
00:10:16,959 --> 00:10:19,519
patra vessel and rc the function codes

309
00:10:19,519 --> 00:10:20,399
so let's start

310
00:10:20,399 --> 00:10:22,079
with the first class vulnerabilities are

311
00:10:22,079 --> 00:10:23,920
restricted movement commands

312
00:10:23,920 --> 00:10:25,760
this vulnerability is mostly found in

313
00:10:25,760 --> 00:10:27,519
motion servers so

314
00:10:27,519 --> 00:10:30,160
motion server is basically a program

315
00:10:30,160 --> 00:10:31,680
that allows the robot that allows the

316
00:10:31,680 --> 00:10:33,839
motion of a robot to be controlled

317
00:10:33,839 --> 00:10:35,839
externally from the network by an

318
00:10:35,839 --> 00:10:37,519
external and external party

319
00:10:37,519 --> 00:10:38,880
so it's basically a program that

320
00:10:38,880 --> 00:10:40,320
receives the movement command of your

321
00:10:40,320 --> 00:10:41,760
network and translates

322
00:10:41,760 --> 00:10:44,399
it in one or more movement instruction

323
00:10:44,399 --> 00:10:47,920
and issues them down to their own

324
00:10:47,920 --> 00:10:50,720
this pattern is mostly found uh whenever

325
00:10:50,720 --> 00:10:51,680
we want to integrate

326
00:10:51,680 --> 00:10:53,200
raw between industrial robots with a

327
00:10:53,200 --> 00:10:54,800
with a with an external system

328
00:10:54,800 --> 00:10:56,560
uh and we want that external system to

329
00:10:56,560 --> 00:10:58,240
directly control the motion of the robot

330
00:10:58,240 --> 00:11:00,079
and there isn't any

331
00:11:00,079 --> 00:11:02,320
supported official way of doing so we

332
00:11:02,320 --> 00:11:04,000
build a motion server and

333
00:11:04,000 --> 00:11:07,040
we we control robot through that indeed

334
00:11:07,040 --> 00:11:08,880
we found we found motion servers

335
00:11:08,880 --> 00:11:11,760
among adapters for ros industrial ros

336
00:11:11,760 --> 00:11:14,000
industrial is a project aimed to bring

337
00:11:14,000 --> 00:11:15,519
compatibility between russ

338
00:11:15,519 --> 00:11:20,000
and industrial robots ross efcs

339
00:11:20,000 --> 00:11:22,880
the rob's operating system is the most

340
00:11:22,880 --> 00:11:23,680
widespread

341
00:11:23,680 --> 00:11:25,760
and well-known open source middleware

342
00:11:25,760 --> 00:11:27,440
for robotics not just robotic

343
00:11:27,440 --> 00:11:29,120
not not just industrial robotics but

344
00:11:29,120 --> 00:11:31,920
robotics in general

345
00:11:31,920 --> 00:11:34,240
in this slide you can find the main gear

346
00:11:34,240 --> 00:11:36,240
up project page for quick experimenter

347
00:11:36,240 --> 00:11:37,200
which has

348
00:11:37,200 --> 00:11:40,399
the adapter for rust industrial for 2k

349
00:11:40,399 --> 00:11:41,440
robots

350
00:11:41,440 --> 00:11:43,600
this adapter is basically motion server

351
00:11:43,600 --> 00:11:45,600
it's written in kr which is the cuca

352
00:11:45,600 --> 00:11:46,720
language

353
00:11:46,720 --> 00:11:50,959
and uh it's written as a test program

354
00:11:50,959 --> 00:11:53,600
so what is big deal we had uh honestly

355
00:11:53,600 --> 00:11:54,880
the movement commands

356
00:11:54,880 --> 00:11:56,959
so if we don't have input validation in

357
00:11:56,959 --> 00:11:58,320
the task program that implements a

358
00:11:58,320 --> 00:12:00,240
motion server and if we don't have

359
00:12:00,240 --> 00:12:03,519
any form authentication and this is the

360
00:12:03,519 --> 00:12:04,320
case of

361
00:12:04,320 --> 00:12:06,160
basically all the motion servers that we

362
00:12:06,160 --> 00:12:07,519
found in the wild

363
00:12:07,519 --> 00:12:11,200
if we in this case an attacker that has

364
00:12:11,200 --> 00:12:13,360
access to the same network of the robot

365
00:12:13,360 --> 00:12:15,120
can basically control the robot every

366
00:12:15,120 --> 00:12:17,040
time with

367
00:12:17,040 --> 00:12:20,160
the which is not necessarily a big deal

368
00:12:20,160 --> 00:12:21,839
from a safety perspective

369
00:12:21,839 --> 00:12:24,959
because there is the safety system and

370
00:12:24,959 --> 00:12:26,639
in the end even if there is the safety

371
00:12:26,639 --> 00:12:28,399
system is never a good idea to

372
00:12:28,399 --> 00:12:30,720
to bring the robot close to the safety

373
00:12:30,720 --> 00:12:32,720
limits uh just to give an example

374
00:12:32,720 --> 00:12:35,200
when we are working on on this research

375
00:12:35,200 --> 00:12:36,560
we um

376
00:12:36,560 --> 00:12:38,880
we were controlling the robot uh with a

377
00:12:38,880 --> 00:12:40,560
rust adapter with the rust industrial

378
00:12:40,560 --> 00:12:41,600
adapter

379
00:12:41,600 --> 00:12:44,800
and uh we by doing so we ended up

380
00:12:44,800 --> 00:12:47,360
hitting the safety limit quite fast and

381
00:12:47,360 --> 00:12:48,959
our colleagues had to send the road for

382
00:12:48,959 --> 00:12:53,839
montana so we basically we broke down

383
00:12:55,680 --> 00:12:58,959
the best thing here would be to perform

384
00:12:58,959 --> 00:13:02,079
input validation input variation by

385
00:13:02,079 --> 00:13:04,320
restricting commands that are

386
00:13:04,320 --> 00:13:06,079
for sure for knowledge that it is

387
00:13:06,079 --> 00:13:07,839
possible to have and to embed in the

388
00:13:07,839 --> 00:13:09,120
task program

389
00:13:09,120 --> 00:13:12,880
uh not not allowed for that specific

390
00:13:12,880 --> 00:13:16,560
for the specific work by the robot

391
00:13:16,560 --> 00:13:18,160
it would be also nice to add

392
00:13:18,160 --> 00:13:20,320
authentication but so for

393
00:13:20,320 --> 00:13:23,360
for how the robot languages work

394
00:13:23,360 --> 00:13:25,360
it's not straightforward to add

395
00:13:25,360 --> 00:13:26,720
authentication

396
00:13:26,720 --> 00:13:28,560
for example it is not possible to have

397
00:13:28,560 --> 00:13:32,480
cryptographic primitives in most cases

398
00:13:32,480 --> 00:13:34,240
this is a vulnerable motion service so

399
00:13:34,240 --> 00:13:36,399
let's let's let's go to some code and

400
00:13:36,399 --> 00:13:36,800
this

401
00:13:36,800 --> 00:13:39,120
is a vulnerable motion server uh the

402
00:13:39,120 --> 00:13:40,720
function eki get real

403
00:13:40,720 --> 00:13:44,320
is taking uh in the krr language

404
00:13:44,320 --> 00:13:46,480
is taking it and a real value and

405
00:13:46,480 --> 00:13:48,560
floating point value for a network

406
00:13:48,560 --> 00:13:50,560
and saving it in a variable we do the

407
00:13:50,560 --> 00:13:51,600
same for

408
00:13:51,600 --> 00:13:54,240
all the six components of of the

409
00:13:54,240 --> 00:13:55,600
coordinate

410
00:13:55,600 --> 00:13:57,360
we end up with a coordinate jump

411
00:13:57,360 --> 00:13:59,040
position chord command

412
00:13:59,040 --> 00:14:01,519
and we move the robot to that coordinate

413
00:14:01,519 --> 00:14:03,440
ptpas basically move the robot is

414
00:14:03,440 --> 00:14:04,639
pointing to point to point

415
00:14:04,639 --> 00:14:06,639
and we do this in a loop so it is

416
00:14:06,639 --> 00:14:08,639
basically a bare-bone

417
00:14:08,639 --> 00:14:10,639
motion server implemented in kr and the

418
00:14:10,639 --> 00:14:12,639
cuca language

419
00:14:12,639 --> 00:14:14,560
the second class of vulnerability is

420
00:14:14,560 --> 00:14:16,560
directed to vessel so directed to vessel

421
00:14:16,560 --> 00:14:17,199
works

422
00:14:17,199 --> 00:14:19,360
just like direct intervention works in

423
00:14:19,360 --> 00:14:20,399
other cases

424
00:14:20,399 --> 00:14:23,360
we have a program that opens the file

425
00:14:23,360 --> 00:14:24,320
was file name

426
00:14:24,320 --> 00:14:26,320
is controlled by the by data received

427
00:14:26,320 --> 00:14:27,760
from the network without any form of

428
00:14:27,760 --> 00:14:28,959
validation

429
00:14:28,959 --> 00:14:31,760
so for the network we send a finding the

430
00:14:31,760 --> 00:14:33,839
robocontroller opens that file

431
00:14:33,839 --> 00:14:35,600
prints attention back over your network

432
00:14:35,600 --> 00:14:37,600
or writes it or does something in that

433
00:14:37,600 --> 00:14:38,720
file

434
00:14:38,720 --> 00:14:40,160
if there isn't any form of input

435
00:14:40,160 --> 00:14:42,639
validation an attacker

436
00:14:42,639 --> 00:14:44,480
can send the file name with the user

437
00:14:44,480 --> 00:14:46,160
pattern dot slash

438
00:14:46,160 --> 00:14:49,600
and trovers travel the hierarchy of the

439
00:14:49,600 --> 00:14:50,720
file system

440
00:14:50,720 --> 00:14:53,600
ending up reading for example secret

441
00:14:53,600 --> 00:14:56,160
information

442
00:14:56,639 --> 00:15:00,000
this is a bearable an example of uh

443
00:15:00,000 --> 00:15:03,760
of of a server that is vulnerable to

444
00:15:03,760 --> 00:15:06,959
pathosa with the circuit receive

445
00:15:06,959 --> 00:15:10,800
function we receive some data we pass

446
00:15:10,800 --> 00:15:13,199
from that data a file name we open a

447
00:15:13,199 --> 00:15:14,800
file with that file name and then we

448
00:15:14,800 --> 00:15:16,560
read it and send it back over to the

449
00:15:16,560 --> 00:15:18,000
same socket

450
00:15:18,000 --> 00:15:20,800
this example is in the rapid the rapid

451
00:15:20,800 --> 00:15:22,560
programming language which is the abb

452
00:15:22,560 --> 00:15:24,320
programming language

453
00:15:24,320 --> 00:15:27,519
this might seem like a toy example

454
00:15:27,519 --> 00:15:30,000
just for just for the sake of making an

455
00:15:30,000 --> 00:15:31,040
example

456
00:15:31,040 --> 00:15:33,920
actually we found the same pattern

457
00:15:33,920 --> 00:15:35,120
implemented

458
00:15:35,120 --> 00:15:37,199
into the real world so some years ago we

459
00:15:37,199 --> 00:15:38,560
found in the

460
00:15:38,560 --> 00:15:42,079
robot app store by abb

461
00:15:42,079 --> 00:15:45,600
this web server implemented in rapid

462
00:15:45,600 --> 00:15:47,839
which was intended to serve a static and

463
00:15:47,839 --> 00:15:49,600
dynamic page

464
00:15:49,600 --> 00:15:52,079
from drought directly you can look at

465
00:15:52,079 --> 00:15:53,360
the height you could have for example

466
00:15:53,360 --> 00:15:54,480
dynamic page

467
00:15:54,480 --> 00:15:56,560
including variables from including rapid

468
00:15:56,560 --> 00:15:57,519
variables you can

469
00:15:57,519 --> 00:16:00,480
could find you could have very nice

470
00:16:00,480 --> 00:16:02,320
status pages server directly from the

471
00:16:02,320 --> 00:16:03,360
robot

472
00:16:03,360 --> 00:16:06,720
which is which is a good use case

473
00:16:06,720 --> 00:16:09,600
the problem is that this web server had

474
00:16:09,600 --> 00:16:11,360
a straightforward password

475
00:16:11,360 --> 00:16:13,120
availability that allowed to traverse

476
00:16:13,120 --> 00:16:14,880
the hierarchy on the file system

477
00:16:14,880 --> 00:16:17,120
and exit from the web server so from the

478
00:16:17,120 --> 00:16:18,000
web server

479
00:16:18,000 --> 00:16:21,199
it was possible to exit from there and

480
00:16:21,199 --> 00:16:22,800
read files on the root on the file

481
00:16:22,800 --> 00:16:25,320
system on their own so for example

482
00:16:25,320 --> 00:16:26,560
secrets.txt

483
00:16:26,560 --> 00:16:29,120
just just to make an example but it was

484
00:16:29,120 --> 00:16:30,000
possible to read

485
00:16:30,000 --> 00:16:32,480
sensi configuration files or anything

486
00:16:32,480 --> 00:16:36,560
else that was parent on the rob

487
00:16:36,560 --> 00:16:38,880
last but not least input validation on

488
00:16:38,880 --> 00:16:40,560
function calls so let's suppose that we

489
00:16:40,560 --> 00:16:40,959
have

490
00:16:40,959 --> 00:16:43,360
a program that allows to perform

491
00:16:43,360 --> 00:16:45,120
different operations according to data

492
00:16:45,120 --> 00:16:46,480
received from the network so

493
00:16:46,480 --> 00:16:49,040
start cycle stop cycle operation a

494
00:16:49,040 --> 00:16:50,079
operation b operation

495
00:16:50,079 --> 00:16:54,000
c instead of using a switch statement

496
00:16:54,000 --> 00:16:57,199
we can implement this uh as doing a

497
00:16:57,199 --> 00:17:00,639
late binding or call by name function

498
00:17:00,639 --> 00:17:02,480
by calling a function that corresponds

499
00:17:02,480 --> 00:17:03,759
to the functionalities even

500
00:17:03,759 --> 00:17:06,959
received from the network and that name

501
00:17:06,959 --> 00:17:09,039
composing that name of that function

502
00:17:09,039 --> 00:17:11,280
with the data received from the network

503
00:17:11,280 --> 00:17:11,679
so

504
00:17:11,679 --> 00:17:13,280
if we want to call the operation staff

505
00:17:13,280 --> 00:17:14,880
cycle the network

506
00:17:14,880 --> 00:17:17,359
we send of the network i will send

507
00:17:17,359 --> 00:17:17,919
function

508
00:17:17,919 --> 00:17:20,480
start cycle the problem with this is

509
00:17:20,480 --> 00:17:21,839
that it is possible

510
00:17:21,839 --> 00:17:24,559
for an attacker to call any arbitrary

511
00:17:24,559 --> 00:17:25,119
function

512
00:17:25,119 --> 00:17:27,679
to call any arbitrary function defined

513
00:17:27,679 --> 00:17:30,240
in the in the unify scope

514
00:17:30,240 --> 00:17:32,160
or in the in the system scope well that

515
00:17:32,160 --> 00:17:33,919
this depends on upon the language but

516
00:17:33,919 --> 00:17:34,559
basically

517
00:17:34,559 --> 00:17:36,799
the attacker can send can can make the

518
00:17:36,799 --> 00:17:39,120
robot call any arbitrary function

519
00:17:39,120 --> 00:17:41,360
well of course uh the remediation here

520
00:17:41,360 --> 00:17:43,120
it's pretty simple is just to implement

521
00:17:43,120 --> 00:17:43,840
an

522
00:17:43,840 --> 00:17:47,440
allow list of the functions that

523
00:17:47,440 --> 00:17:50,400
that are deemed bad

524
00:17:50,480 --> 00:17:53,039
this was all for vulnerabilities so let

525
00:17:53,039 --> 00:17:55,039
me now hand over to federico we'll talk

526
00:17:55,039 --> 00:17:56,400
about

527
00:17:56,400 --> 00:18:00,080
using languages for malicious purposes

528
00:18:00,080 --> 00:18:01,919
what do we need to write malware first

529
00:18:01,919 --> 00:18:04,400
of all we need network capabilities and

530
00:18:04,400 --> 00:18:06,400
we showed you uh marcelo just explained

531
00:18:06,400 --> 00:18:07,600
to you that we have

532
00:18:07,600 --> 00:18:09,360
in all of the languages communication

533
00:18:09,360 --> 00:18:10,960
capabilities over the network

534
00:18:10,960 --> 00:18:14,160
and we also need some file exchange

535
00:18:14,160 --> 00:18:16,000
file handling capabilities and for

536
00:18:16,000 --> 00:18:17,679
example if we combine these two

537
00:18:17,679 --> 00:18:19,600
we can create a malware that i don't

538
00:18:19,600 --> 00:18:21,600
know exfiltrates files right

539
00:18:21,600 --> 00:18:25,039
so we have the features there secondly

540
00:18:25,039 --> 00:18:26,799
we need the ability if we want to

541
00:18:26,799 --> 00:18:27,440
develop

542
00:18:27,440 --> 00:18:29,280
some advanced malware we need the

543
00:18:29,280 --> 00:18:31,679
ability to load code that is only

544
00:18:31,679 --> 00:18:34,160
available at runtime and we have seen

545
00:18:34,160 --> 00:18:37,120
that we have in most of the languages we

546
00:18:37,120 --> 00:18:38,720
have the capability to

547
00:18:38,720 --> 00:18:41,520
load code in memory in the robots memory

548
00:18:41,520 --> 00:18:44,480
and then jump to it

549
00:18:44,480 --> 00:18:46,480
third we need to be able to scan

550
00:18:46,480 --> 00:18:48,799
potential new targets over the network

551
00:18:48,799 --> 00:18:51,039
so we need a port scanner essentially

552
00:18:51,039 --> 00:18:52,000
and

553
00:18:52,000 --> 00:18:53,600
at least on paper we have all the

554
00:18:53,600 --> 00:18:56,400
features that we need as well

555
00:18:56,400 --> 00:18:58,960
and last we need a touring complete

556
00:18:58,960 --> 00:19:00,640
language which means that we need to

557
00:19:00,640 --> 00:19:03,440
have conditional statements such as if

558
00:19:03,440 --> 00:19:06,400
uh if then else or and and also we need

559
00:19:06,400 --> 00:19:08,480
loop statements such as

560
00:19:08,480 --> 00:19:10,799
while or four and in all of the

561
00:19:10,799 --> 00:19:12,640
languages that we have analyzed we have

562
00:19:12,640 --> 00:19:14,320
those features

563
00:19:14,320 --> 00:19:17,520
for example here is a is a network

564
00:19:17,520 --> 00:19:19,120
scanner a port scanner that we have

565
00:19:19,120 --> 00:19:20,320
developed using the

566
00:19:20,320 --> 00:19:22,960
abb rapid language we used abb only

567
00:19:22,960 --> 00:19:24,000
because we had

568
00:19:24,000 --> 00:19:26,400
all the programming environments

569
00:19:26,400 --> 00:19:27,760
available

570
00:19:27,760 --> 00:19:30,080
not because ibb has some specific

571
00:19:30,080 --> 00:19:31,120
features

572
00:19:31,120 --> 00:19:33,120
all of the languages that have the same

573
00:19:33,120 --> 00:19:35,440
features according to our tables

574
00:19:35,440 --> 00:19:37,760
can be used in the same way to develop

575
00:19:37,760 --> 00:19:39,600
the same

576
00:19:39,600 --> 00:19:42,960
malicious capabilities essentially

577
00:19:42,960 --> 00:19:45,600
we also attempted to develop and we

578
00:19:45,600 --> 00:19:47,760
succeeded to develop a

579
00:19:47,760 --> 00:19:50,080
file harvesting routine you see here

580
00:19:50,080 --> 00:19:51,840
that the code is

581
00:19:51,840 --> 00:19:54,480
going down the file system tree and is

582
00:19:54,480 --> 00:19:56,000
exfiltrating the the

583
00:19:56,000 --> 00:19:58,320
the full path of the files but we could

584
00:19:58,320 --> 00:20:00,880
even exfiltrate the entire file content

585
00:20:00,880 --> 00:20:04,080
over a network socket and

586
00:20:04,080 --> 00:20:05,760
what you see here is a simplified

587
00:20:05,760 --> 00:20:07,520
structure of a

588
00:20:07,520 --> 00:20:09,840
malware dropper that receives data from

589
00:20:09,840 --> 00:20:10,640
the network

590
00:20:10,640 --> 00:20:13,200
writes that data onto a file and then

591
00:20:13,200 --> 00:20:14,480
loads that file

592
00:20:14,480 --> 00:20:17,679
into the robot's memory and last

593
00:20:17,679 --> 00:20:20,720
points the program pointer to the main

594
00:20:20,720 --> 00:20:21,760
routine of that

595
00:20:21,760 --> 00:20:24,799
loaded code so um

596
00:20:24,799 --> 00:20:27,840
i want to show you a little demo of

597
00:20:27,840 --> 00:20:29,440
when will happen when we put all of

598
00:20:29,440 --> 00:20:31,440
these things together

599
00:20:31,440 --> 00:20:33,120
what we have here is a three-station

600
00:20:33,120 --> 00:20:35,120
robot all of them are vulnerable

601
00:20:35,120 --> 00:20:37,679
they run a vulnerable server but only

602
00:20:37,679 --> 00:20:39,600
the first one is exposed to the network

603
00:20:39,600 --> 00:20:40,880
to the external network

604
00:20:40,880 --> 00:20:42,880
and is running an infected version of

605
00:20:42,880 --> 00:20:44,240
that server because the attacker has

606
00:20:44,240 --> 00:20:45,919
already compromised as you can see

607
00:20:45,919 --> 00:20:47,840
the other two controller 2 and

608
00:20:47,840 --> 00:20:48,960
controller 3

609
00:20:48,960 --> 00:20:51,760
are not running a vulnerable version so

610
00:20:51,760 --> 00:20:53,360
it's not i mean it's vulnerable but it's

611
00:20:53,360 --> 00:20:56,320
not infected sorry

612
00:20:57,200 --> 00:21:02,799
so now we start the um example we can do

613
00:21:02,799 --> 00:21:03,120
a

614
00:21:03,120 --> 00:21:05,280
port scanning routine using the first

615
00:21:05,280 --> 00:21:08,000
robot to scan the internal network

616
00:21:08,000 --> 00:21:12,400
so maybe we find the other two robots

617
00:21:12,640 --> 00:21:14,880
there it is first robot found second

618
00:21:14,880 --> 00:21:16,400
robot found

619
00:21:16,400 --> 00:21:18,720
and now the attacker can start the

620
00:21:18,720 --> 00:21:20,320
propagation routine

621
00:21:20,320 --> 00:21:23,440
which will attempt to use the open port

622
00:21:23,440 --> 00:21:25,440
on the second and third robot to

623
00:21:25,440 --> 00:21:26,799
propagate

624
00:21:26,799 --> 00:21:31,840
and try to infect their files as well

625
00:21:31,919 --> 00:21:34,880
notice that we can have the robots doing

626
00:21:34,880 --> 00:21:36,000
normal tasks

627
00:21:36,000 --> 00:21:38,480
and you wouldn't notice anything uh in

628
00:21:38,480 --> 00:21:40,880
their in their motions i mean

629
00:21:40,880 --> 00:21:42,559
the underlying server is running in

630
00:21:42,559 --> 00:21:44,480
parallel it is not affecting the

631
00:21:44,480 --> 00:21:47,679
execution of their movements

632
00:21:47,679 --> 00:21:49,440
and meanwhile you can see on the console

633
00:21:49,440 --> 00:21:51,440
on the black console on the right

634
00:21:51,440 --> 00:21:54,400
that the propagation is continuing now

635
00:21:54,400 --> 00:21:55,440
it's finished

636
00:21:55,440 --> 00:21:57,919
so now we can go and check what happened

637
00:21:57,919 --> 00:21:58,799
to

638
00:21:58,799 --> 00:22:01,918
the other two robots

639
00:22:04,640 --> 00:22:07,039
just for confirmation robot number two

640
00:22:07,039 --> 00:22:08,720
now the file is infected

641
00:22:08,720 --> 00:22:10,840
notice that the ip address has been

642
00:22:10,840 --> 00:22:12,159
retained

643
00:22:12,159 --> 00:22:14,559
and the third one is also infected

644
00:22:14,559 --> 00:22:17,918
retaining the ip address

645
00:22:18,080 --> 00:22:20,400
okay so this was just to show you that

646
00:22:20,400 --> 00:22:23,280
it is possible

647
00:22:24,080 --> 00:22:27,200
good so um in addition to having a

648
00:22:27,200 --> 00:22:29,280
remote code execution vulnerability

649
00:22:29,280 --> 00:22:31,280
as we have in the first robot on the

650
00:22:31,280 --> 00:22:32,799
left uh that

651
00:22:32,799 --> 00:22:35,679
you just saw um in order to bootstrap

652
00:22:35,679 --> 00:22:36,480
the infection

653
00:22:36,480 --> 00:22:38,400
the attacker may also be a little bit

654
00:22:38,400 --> 00:22:40,080
more creative and i want to

655
00:22:40,080 --> 00:22:41,840
spend a few slides explaining to you

656
00:22:41,840 --> 00:22:43,280
this

657
00:22:43,280 --> 00:22:47,200
we found out that some of the

658
00:22:47,200 --> 00:22:50,159
robot vendors provide a ecosystem that

659
00:22:50,159 --> 00:22:52,159
is very similar to

660
00:22:52,159 --> 00:22:54,240
our app stores that we have for mobile

661
00:22:54,240 --> 00:22:56,640
phones and they use these app stores to

662
00:22:56,640 --> 00:22:59,120
deliver software that will either run

663
00:22:59,120 --> 00:23:01,600
directly on the robot or on the machine

664
00:23:01,600 --> 00:23:03,200
or that will be used

665
00:23:03,200 --> 00:23:06,320
to enrich the functionalities of the

666
00:23:06,320 --> 00:23:08,080
development environment so you download

667
00:23:08,080 --> 00:23:09,840
for example plugins and stuff

668
00:23:09,840 --> 00:23:11,919
but the interesting thing is that uh for

669
00:23:11,919 --> 00:23:14,080
some vendors this is integrated into the

670
00:23:14,080 --> 00:23:14,880
developer

671
00:23:14,880 --> 00:23:16,559
development environment so you can go

672
00:23:16,559 --> 00:23:18,000
and have a true

673
00:23:18,000 --> 00:23:21,440
app store experience find the apps that

674
00:23:21,440 --> 00:23:22,080
you want

675
00:23:22,080 --> 00:23:23,840
one click install and those will be

676
00:23:23,840 --> 00:23:26,240
downloaded either on the robot or on

677
00:23:26,240 --> 00:23:29,679
directly on the development

678
00:23:29,679 --> 00:23:31,440
machine on the engineering workstation

679
00:23:31,440 --> 00:23:32,960
so to speak

680
00:23:32,960 --> 00:23:35,360
um among all the stores we think that

681
00:23:35,360 --> 00:23:37,760
abbs is the most advanced one because it

682
00:23:37,760 --> 00:23:38,480
really has

683
00:23:38,480 --> 00:23:40,400
all of the features of an app store you

684
00:23:40,400 --> 00:23:43,919
can go and register and upload software

685
00:23:43,919 --> 00:23:45,919
for our security analysis what was

686
00:23:45,919 --> 00:23:47,039
important is that we

687
00:23:47,039 --> 00:23:50,400
reported a vulnerability that abb

688
00:23:50,400 --> 00:23:53,039
has fixed but we would like to use this

689
00:23:53,039 --> 00:23:54,880
vulnerability to show what could have

690
00:23:54,880 --> 00:23:55,840
happened

691
00:23:55,840 --> 00:23:58,720
if we if that vulnerability wouldn't be

692
00:23:58,720 --> 00:23:59,919
fixed

693
00:23:59,919 --> 00:24:02,080
um the vulnerability is on the back end

694
00:24:02,080 --> 00:24:03,600
so you don't have to do anything if

695
00:24:03,600 --> 00:24:03,840
you're

696
00:24:03,840 --> 00:24:05,840
using adb software because abb has

697
00:24:05,840 --> 00:24:07,520
already patched the vulnerability on the

698
00:24:07,520 --> 00:24:08,799
back end of their

699
00:24:08,799 --> 00:24:11,760
um app store so according to that

700
00:24:11,760 --> 00:24:12,720
vulnerability

701
00:24:12,720 --> 00:24:15,360
an attacker will be able to upload a

702
00:24:15,360 --> 00:24:16,480
malicious

703
00:24:16,480 --> 00:24:19,120
application malicious code and have it

704
00:24:19,120 --> 00:24:21,120
immediately available for download you

705
00:24:21,120 --> 00:24:22,400
can see on the right hand side of the

706
00:24:22,400 --> 00:24:23,360
screen that

707
00:24:23,360 --> 00:24:25,360
on the development environment that

708
00:24:25,360 --> 00:24:27,279
extension that we have uploaded as a

709
00:24:27,279 --> 00:24:27,919
test

710
00:24:27,919 --> 00:24:29,919
was already available whereas if you

711
00:24:29,919 --> 00:24:31,039
notice on the left

712
00:24:31,039 --> 00:24:32,960
the application is still pending for

713
00:24:32,960 --> 00:24:34,080
approval so

714
00:24:34,080 --> 00:24:36,159
due to this bug it was possible for an

715
00:24:36,159 --> 00:24:38,240
attacker to completely bypass

716
00:24:38,240 --> 00:24:41,520
the approval procedure we also wanted to

717
00:24:41,520 --> 00:24:43,440
see if there was any

718
00:24:43,440 --> 00:24:46,240
human approving the extensions so we

719
00:24:46,240 --> 00:24:47,520
uploaded a test

720
00:24:47,520 --> 00:24:49,520
extension a test application containing

721
00:24:49,520 --> 00:24:50,799
a very clear banner

722
00:24:50,799 --> 00:24:52,640
saying that such extensions such

723
00:24:52,640 --> 00:24:54,320
application shouldn't be considered

724
00:24:54,320 --> 00:24:55,840
because it was simply for research

725
00:24:55,840 --> 00:24:56,640
purposes

726
00:24:56,640 --> 00:24:58,960
and so we wanted to see if there was

727
00:24:58,960 --> 00:25:00,000
anyone there

728
00:25:00,000 --> 00:25:02,720
reading the content of our overall

729
00:25:02,720 --> 00:25:04,880
pop-up that will appear immediately

730
00:25:04,880 --> 00:25:07,120
after you execute the application and as

731
00:25:07,120 --> 00:25:08,480
you can see on the left-hand side the

732
00:25:08,480 --> 00:25:09,919
application got approved

733
00:25:09,919 --> 00:25:13,679
despite this warning

734
00:25:13,679 --> 00:25:15,600
we found a variation over the same issue

735
00:25:15,600 --> 00:25:16,880
but i don't have time

736
00:25:16,880 --> 00:25:20,000
to go through it in the kuka platform

737
00:25:20,000 --> 00:25:21,760
this time we had to

738
00:25:21,760 --> 00:25:24,799
um we released an alert through the ics

739
00:25:24,799 --> 00:25:25,520
cert

740
00:25:25,520 --> 00:25:27,919
because there is a fix that must be

741
00:25:27,919 --> 00:25:29,520
applied on the client side

742
00:25:29,520 --> 00:25:32,240
so if you're using the kuka platform for

743
00:25:32,240 --> 00:25:32,559
you

744
00:25:32,559 --> 00:25:34,640
for developing a robotics application

745
00:25:34,640 --> 00:25:36,000
make sure that you run

746
00:25:36,000 --> 00:25:38,320
the last version because it contained

747
00:25:38,320 --> 00:25:39,520
the patch

748
00:25:39,520 --> 00:25:41,600
let's go back to vulnerabilities the

749
00:25:41,600 --> 00:25:43,679
vulnerabilities that we have considered

750
00:25:43,679 --> 00:25:45,520
so far depend upon the fact that there

751
00:25:45,520 --> 00:25:46,799
is some input

752
00:25:46,799 --> 00:25:49,200
which might be untrusted and tracker

753
00:25:49,200 --> 00:25:50,720
controlled in a test program

754
00:25:50,720 --> 00:25:53,039
this input will end up influencing some

755
00:25:53,039 --> 00:25:55,360
operational robot with a concrete input

756
00:25:55,360 --> 00:25:56,000
such as moving

757
00:25:56,000 --> 00:25:58,320
the rod so basically what we're talking

758
00:25:58,320 --> 00:26:01,120
about is things are vulnerable

759
00:26:01,120 --> 00:26:02,799
generally speaking we have attained

760
00:26:02,799 --> 00:26:04,880
style vulnerability whenever we have an

761
00:26:04,880 --> 00:26:06,400
unsanitized data flow between a

762
00:26:06,400 --> 00:26:08,640
sensitive source and the sensitive sync

763
00:26:08,640 --> 00:26:10,240
in all the languages that we have

764
00:26:10,240 --> 00:26:12,159
considered there are multiple functions

765
00:26:12,159 --> 00:26:13,360
or instructions

766
00:26:13,360 --> 00:26:15,360
that can be considered sensitive sources

767
00:26:15,360 --> 00:26:17,279
because they allow external data to

768
00:26:17,279 --> 00:26:18,799
reach the product

769
00:26:18,799 --> 00:26:22,080
those functions are file handling

770
00:26:22,080 --> 00:26:24,159
inbound natural communication and

771
00:26:24,159 --> 00:26:25,520
functions that allow to get

772
00:26:25,520 --> 00:26:27,039
data from the user interface of the

773
00:26:27,039 --> 00:26:29,039
teach pen

774
00:26:29,039 --> 00:26:31,039
all the languages also have other

775
00:26:31,039 --> 00:26:32,559
functions or instructions

776
00:26:32,559 --> 00:26:34,799
that can be considered sensitive things

777
00:26:34,799 --> 00:26:36,880
such as functions to move the robot

778
00:26:36,880 --> 00:26:39,120
function to handle files functions to

779
00:26:39,120 --> 00:26:40,400
write the configuration

780
00:26:40,400 --> 00:26:43,120
and function to perform changes in the

781
00:26:43,120 --> 00:26:44,559
control flow of the product

782
00:26:44,559 --> 00:26:46,720
such as call by name and late binding

783
00:26:46,720 --> 00:26:48,720
functionalities

784
00:26:48,720 --> 00:26:50,640
given this context we implemented the

785
00:26:50,640 --> 00:26:53,440
prototype of a statistical analyzer

786
00:26:53,440 --> 00:26:55,360
for programs written in industrial robot

787
00:26:55,360 --> 00:26:56,799
programming languages

788
00:26:56,799 --> 00:26:59,840
our analyzer is able to analyze the

789
00:26:59,840 --> 00:27:01,120
source code of the task program

790
00:27:01,120 --> 00:27:02,559
and to find potential to install

791
00:27:02,559 --> 00:27:04,880
vulnerabilities or potentially abuse

792
00:27:04,880 --> 00:27:05,520
features

793
00:27:05,520 --> 00:27:07,919
that can be expressed as a data flow

794
00:27:07,919 --> 00:27:10,320
between a source in the sync

795
00:27:10,320 --> 00:27:12,880
our analyzer works in this way we start

796
00:27:12,880 --> 00:27:13,520
with a

797
00:27:13,520 --> 00:27:15,760
task program source code we pass it with

798
00:27:15,760 --> 00:27:17,279
the appropriate module for

799
00:27:17,279 --> 00:27:18,640
for the language that the program is

800
00:27:18,640 --> 00:27:20,880
written into we have implemented

801
00:27:20,880 --> 00:27:23,679
rapid and krr process we build the

802
00:27:23,679 --> 00:27:25,679
abstract syntax tree and the contour

803
00:27:25,679 --> 00:27:26,399
graph

804
00:27:26,399 --> 00:27:27,840
we build the counter for graph in a way

805
00:27:27,840 --> 00:27:30,000
that is language agnostic and from the

806
00:27:30,000 --> 00:27:31,840
language diagnostic content photograph

807
00:27:31,840 --> 00:27:33,039
we link them together

808
00:27:33,039 --> 00:27:34,720
we link the control for graphs of every

809
00:27:34,720 --> 00:27:36,000
function together into the

810
00:27:36,000 --> 00:27:37,520
inter-procedural graph

811
00:27:37,520 --> 00:27:39,360
and we run the analysis the length of

812
00:27:39,360 --> 00:27:41,520
analysis on the inter-procedural graph

813
00:27:41,520 --> 00:27:43,600
the data for analysis is configurable

814
00:27:43,600 --> 00:27:45,360
with respect to which functions and

815
00:27:45,360 --> 00:27:47,200
instructions to consider resources to

816
00:27:47,200 --> 00:27:48,720
consider as syncs and to consider

817
00:27:48,720 --> 00:27:51,279
sanitizers in this way it is possible to

818
00:27:51,279 --> 00:27:51,760
find

819
00:27:51,760 --> 00:27:54,080
potential things type of narratives by

820
00:27:54,080 --> 00:27:56,000
by configuring the electronics

821
00:27:56,000 --> 00:27:58,559
engine that would associate that we have

822
00:27:58,559 --> 00:28:00,320
seen on the previous slide

823
00:28:00,320 --> 00:28:02,240
as well as to find potential abuse

824
00:28:02,240 --> 00:28:04,399
features

825
00:28:04,399 --> 00:28:06,720
okay that's enough talking for now let's

826
00:28:06,720 --> 00:28:09,120
now switch over to a very short demo of

827
00:28:09,120 --> 00:28:11,678
our tool

828
00:28:12,320 --> 00:28:14,159
so i would like to start with the

829
00:28:14,159 --> 00:28:16,880
analysis of a very simple

830
00:28:16,880 --> 00:28:18,880
program written in here out so the

831
00:28:18,880 --> 00:28:20,559
program works in this way

832
00:28:20,559 --> 00:28:23,279
here on the line 72 and 73 you can see

833
00:28:23,279 --> 00:28:25,039
that the line 73

834
00:28:25,039 --> 00:28:26,880
we are moving the rubble with the ptpe

835
00:28:26,880 --> 00:28:28,720
point-to-point movement instruction

836
00:28:28,720 --> 00:28:31,360
to this coordinate joint position target

837
00:28:31,360 --> 00:28:32,480
this coordinate

838
00:28:32,480 --> 00:28:35,039
is this parameter that is passed to this

839
00:28:35,039 --> 00:28:35,840
function

840
00:28:35,840 --> 00:28:37,520
and it's an output parameter so this is

841
00:28:37,520 --> 00:28:39,120
written by this function

842
00:28:39,120 --> 00:28:44,399
so let's see what this function does

843
00:28:44,399 --> 00:28:47,440
and we can see that this function uses

844
00:28:47,440 --> 00:28:50,799
uses the eki get real function to uh

845
00:28:50,799 --> 00:28:53,120
get data from the network and write it

846
00:28:53,120 --> 00:28:55,200
into this joint position command which

847
00:28:55,200 --> 00:28:56,960
is given as an output parameter

848
00:28:56,960 --> 00:28:59,279
so basically there's a motion server

849
00:28:59,279 --> 00:29:00,240
let's see

850
00:29:00,240 --> 00:29:03,600
uh what our analysis tool has to say

851
00:29:03,600 --> 00:29:07,279
so our analysis tool outputs a json file

852
00:29:07,279 --> 00:29:09,120
with the results of one of the analysis

853
00:29:09,120 --> 00:29:10,720
which is basically a list

854
00:29:10,720 --> 00:29:13,440
of source sync pairs that correspond to

855
00:29:13,440 --> 00:29:14,320
the found

856
00:29:14,320 --> 00:29:16,080
data flow to the phone patterns in this

857
00:29:16,080 --> 00:29:18,880
case we have found just one pattern

858
00:29:18,880 --> 00:29:21,919
with one sync which is

859
00:29:21,919 --> 00:29:26,159
this thing here the ptp at the line 73

860
00:29:26,159 --> 00:29:28,080
where the tainted variable is joint

861
00:29:28,080 --> 00:29:29,279
position target

862
00:29:29,279 --> 00:29:31,600
this thing is tainted by multiple

863
00:29:31,600 --> 00:29:34,000
functions because all these six

864
00:29:34,000 --> 00:29:37,919
eki get real are painting or differ

865
00:29:37,919 --> 00:29:40,799
the variable joint position comma so we

866
00:29:40,799 --> 00:29:41,679
are finding that

867
00:29:41,679 --> 00:29:43,679
in our sourcing pair we have multiple

868
00:29:43,679 --> 00:29:45,760
sources and one cent

869
00:29:45,760 --> 00:29:48,960
okay at this point we can analyze a more

870
00:29:48,960 --> 00:29:49,919
complex

871
00:29:49,919 --> 00:29:53,840
case which in this case is written on

872
00:29:53,840 --> 00:29:54,480
rapid

873
00:29:54,480 --> 00:29:57,120
and it's basically the web server that

874
00:29:57,120 --> 00:29:58,640
we found some years ago

875
00:29:58,640 --> 00:30:00,640
from the robot studio uh robert studio

876
00:30:00,640 --> 00:30:02,320
robotech store

877
00:30:02,320 --> 00:30:04,640
uh the one that was vulnerable to uh

878
00:30:04,640 --> 00:30:07,120
apache rasa vulnerable

879
00:30:07,120 --> 00:30:10,480
in this case uh there are five patterns

880
00:30:10,480 --> 00:30:13,520
five different patterns uh and

881
00:30:13,520 --> 00:30:16,240
uh if we consider if we go and see the

882
00:30:16,240 --> 00:30:18,159
first pattern

883
00:30:18,159 --> 00:30:22,080
uh which is this one here we have that

884
00:30:22,080 --> 00:30:24,480
this is a pattern between the source at

885
00:30:24,480 --> 00:30:25,919
line one to six

886
00:30:25,919 --> 00:30:28,720
right socket four sim variable react

887
00:30:28,720 --> 00:30:29,200
bytes

888
00:30:29,200 --> 00:30:32,960
and the sync is this open here line 567

889
00:30:32,960 --> 00:30:35,760
which is in the function send files

890
00:30:35,760 --> 00:30:37,919
let's take a sneak peek at the source

891
00:30:37,919 --> 00:30:38,720
code

892
00:30:38,720 --> 00:30:41,760
of this of this uh

893
00:30:41,760 --> 00:30:45,919
of this program and we can see that

894
00:30:45,919 --> 00:30:49,279
the function at line 166 is this one

895
00:30:49,279 --> 00:30:51,120
so here we are doing a socket receive

896
00:30:51,120 --> 00:30:53,200
and believe me this is receiving the

897
00:30:53,200 --> 00:30:55,919
data of the http request from the client

898
00:30:55,919 --> 00:30:58,480
saving it in direct bytes variable

899
00:30:58,480 --> 00:31:00,720
passing it and doing stuff with that

900
00:31:00,720 --> 00:31:05,840
and line five six 6776567

901
00:31:05,919 --> 00:31:08,159
we have this opening the function send

902
00:31:08,159 --> 00:31:10,080
file which is taking the file name

903
00:31:10,080 --> 00:31:12,320
which comes from the password or request

904
00:31:12,320 --> 00:31:13,919
from the client

905
00:31:13,919 --> 00:31:16,480
opening the file and sending it back to

906
00:31:16,480 --> 00:31:17,279
the network

907
00:31:17,279 --> 00:31:19,600
exactly so basically we have a part of

908
00:31:19,600 --> 00:31:21,679
our vulnerabilities as we expected

909
00:31:21,679 --> 00:31:23,679
we have other patterns that are related

910
00:31:23,679 --> 00:31:24,960
for example

911
00:31:24,960 --> 00:31:26,960
to the function that does the same thing

912
00:31:26,960 --> 00:31:29,279
but for dynamic files not to

913
00:31:29,279 --> 00:31:32,240
not stratifies anyhow now that we have

914
00:31:32,240 --> 00:31:33,360
this tool now we

915
00:31:33,360 --> 00:31:35,360
that we have the ability of analyzing

916
00:31:35,360 --> 00:31:37,120
programs what we do with that

917
00:31:37,120 --> 00:31:40,240
well what we do is to take a data set

918
00:31:40,240 --> 00:31:42,399
of programs of real test programs

919
00:31:42,399 --> 00:31:44,399
analyze them and see if there are

920
00:31:44,399 --> 00:31:46,559
vulnerabilities and then and how much

921
00:31:46,559 --> 00:31:48,159
how much vulnerabilities are widespread

922
00:31:48,159 --> 00:31:49,760
unfortunately this is very difficult to

923
00:31:49,760 --> 00:31:51,760
do with task programs because

924
00:31:51,760 --> 00:31:53,840
robot programs are highly sensitive

925
00:31:53,840 --> 00:31:56,000
intellectual property and it's very hard

926
00:31:56,000 --> 00:31:58,399
if not impossible to find public code so

927
00:31:58,399 --> 00:31:59,519
as a proxy for

928
00:31:59,519 --> 00:32:02,640
reactors programs we found about 100

929
00:32:02,640 --> 00:32:05,200
files are wrapping and qrl files on

930
00:32:05,200 --> 00:32:07,360
public repository on github and github

931
00:32:07,360 --> 00:32:10,559
and we analyze such files so such uh 100

932
00:32:10,559 --> 00:32:12,559
files are only files that has

933
00:32:12,559 --> 00:32:14,320
at least one sensitive source so that

934
00:32:14,320 --> 00:32:15,840
they at least

935
00:32:15,840 --> 00:32:17,760
take some input from an external source

936
00:32:17,760 --> 00:32:18,880
because otherwise there is no

937
00:32:18,880 --> 00:32:20,320
vulnerability

938
00:32:20,320 --> 00:32:24,320
of this kind and we we analyzed that so

939
00:32:24,320 --> 00:32:26,399
100 files there are mostly educational

940
00:32:26,399 --> 00:32:28,559
files teaching files or demonstration

941
00:32:28,559 --> 00:32:29,200
projects

942
00:32:29,200 --> 00:32:31,360
and we use them as a proxy for real test

943
00:32:31,360 --> 00:32:33,440
programs so what we found

944
00:32:33,440 --> 00:32:35,519
vulnerabilities we found two projects

945
00:32:35,519 --> 00:32:36,559
with

946
00:32:36,559 --> 00:32:38,480
a vulnerability that allowed to execute

947
00:32:38,480 --> 00:32:39,760
arbitrary functions

948
00:32:39,760 --> 00:32:42,320
we found one project with a pattern

949
00:32:42,320 --> 00:32:43,120
vessel

950
00:32:43,120 --> 00:32:45,360
a new font 13 project that allowed to

951
00:32:45,360 --> 00:32:47,279
specify arbitrary movement

952
00:32:47,279 --> 00:32:50,960
from data received from the socket

953
00:32:51,519 --> 00:32:54,159
of course our tool is not perfect far

954
00:32:54,159 --> 00:32:54,720
from perf

955
00:32:54,720 --> 00:32:56,320
from being perfect we found also

956
00:32:56,320 --> 00:32:58,399
detection errors particularly

957
00:32:58,399 --> 00:33:00,799
we found a forced negative in the

958
00:33:00,799 --> 00:33:01,600
analysis

959
00:33:01,600 --> 00:33:06,399
of uh duras industrial adapter for rapid

960
00:33:06,399 --> 00:33:08,320
it was implemented as two different task

961
00:33:08,320 --> 00:33:10,240
programs that program concurrently and

962
00:33:10,240 --> 00:33:10,799
that

963
00:33:10,799 --> 00:33:13,840
talk together took together uh by means

964
00:33:13,840 --> 00:33:14,799
of interrupts

965
00:33:14,799 --> 00:33:18,000
and sharing map our analyzer is able to

966
00:33:18,000 --> 00:33:19,519
analyze the control graph

967
00:33:19,519 --> 00:33:22,000
and is not able to detect implicit data

968
00:33:22,000 --> 00:33:22,960
flow between

969
00:33:22,960 --> 00:33:25,120
different programs that communicate via

970
00:33:25,120 --> 00:33:26,960
other means

971
00:33:26,960 --> 00:33:28,880
in addition to using the detection tools

972
00:33:28,880 --> 00:33:30,559
that marchello explained to you another

973
00:33:30,559 --> 00:33:32,480
important thing to consider is to

974
00:33:32,480 --> 00:33:34,559
prevent vulnerabilities in the

975
00:33:34,559 --> 00:33:35,760
automation

976
00:33:35,760 --> 00:33:38,559
code this means that we need to

977
00:33:38,559 --> 00:33:40,320
implement secure communication at the

978
00:33:40,320 --> 00:33:41,679
application level

979
00:33:41,679 --> 00:33:44,559
in terms this means that the oems should

980
00:33:44,559 --> 00:33:46,159
consider having strong

981
00:33:46,159 --> 00:33:47,760
implementation of cryptographic

982
00:33:47,760 --> 00:33:50,159
primitives right into the languages not

983
00:33:50,159 --> 00:33:53,679
all of the languages implement them now

984
00:33:53,679 --> 00:33:55,840
maybe it's not needed right away but in

985
00:33:55,840 --> 00:33:57,519
the future it will be needed because

986
00:33:57,519 --> 00:33:58,399
robots will be

987
00:33:58,399 --> 00:34:01,200
more and more connected secondly another

988
00:34:01,200 --> 00:34:02,880
important thing is to

989
00:34:02,880 --> 00:34:05,519
consider input validation it is

990
00:34:05,519 --> 00:34:06,240
challenging

991
00:34:06,240 --> 00:34:09,520
um deciding what to do when

992
00:34:09,520 --> 00:34:12,480
a automation program receives invalid

993
00:34:12,480 --> 00:34:13,199
input

994
00:34:13,199 --> 00:34:15,119
because we have a moving object a robot

995
00:34:15,119 --> 00:34:16,800
is a moving object moving physical

996
00:34:16,800 --> 00:34:17,520
object

997
00:34:17,520 --> 00:34:19,839
so if the robot is already in motion for

998
00:34:19,839 --> 00:34:21,280
example it is not

999
00:34:21,280 --> 00:34:24,079
automatic to decide what to do if we

1000
00:34:24,079 --> 00:34:24,879
receive

1001
00:34:24,879 --> 00:34:28,000
a coordinate that is off the the safety

1002
00:34:28,000 --> 00:34:29,760
zone for example that's why it's very

1003
00:34:29,760 --> 00:34:30,560
important

1004
00:34:30,560 --> 00:34:32,879
if we cannot implement input validation

1005
00:34:32,879 --> 00:34:33,760
to have

1006
00:34:33,760 --> 00:34:35,918
a safety system configured properly

1007
00:34:35,918 --> 00:34:37,199
because the safety system will

1008
00:34:37,199 --> 00:34:38,159
essentially

1009
00:34:38,159 --> 00:34:40,399
implement input validation in the

1010
00:34:40,399 --> 00:34:42,879
physical world so to speak

1011
00:34:42,879 --> 00:34:44,560
uh previous separation the

1012
00:34:44,560 --> 00:34:46,560
implementation of privilege separation

1013
00:34:46,560 --> 00:34:48,960
i think will be a true game changer

1014
00:34:48,960 --> 00:34:49,760
because it will

1015
00:34:49,760 --> 00:34:53,599
change the way developers create these

1016
00:34:53,599 --> 00:34:56,079
automation programs it will force the

1017
00:34:56,079 --> 00:34:58,000
developers to declare

1018
00:34:58,000 --> 00:35:00,320
when they have to use security sensitive

1019
00:35:00,320 --> 00:35:01,680
primitives such as

1020
00:35:01,680 --> 00:35:04,800
network file or using dynamic code

1021
00:35:04,800 --> 00:35:05,520
loading

1022
00:35:05,520 --> 00:35:07,680
pretty much like we do when we develop

1023
00:35:07,680 --> 00:35:09,280
an application for a mobile phone we

1024
00:35:09,280 --> 00:35:11,200
have to declare all of the permissions

1025
00:35:11,200 --> 00:35:13,680
and at deployment time an operator will

1026
00:35:13,680 --> 00:35:15,200
have to go through the checklist

1027
00:35:15,200 --> 00:35:17,280
and decide whether or not that

1028
00:35:17,280 --> 00:35:18,720
application is good

1029
00:35:18,720 --> 00:35:22,000
for the setup that the network or

1030
00:35:22,000 --> 00:35:25,359
whatever is running is running onto

1031
00:35:25,359 --> 00:35:28,800
last to mitigate the spread of

1032
00:35:28,800 --> 00:35:30,640
malicious code i think that in the

1033
00:35:30,640 --> 00:35:32,000
future we will see

1034
00:35:32,000 --> 00:35:33,920
code signing it will take probably five

1035
00:35:33,920 --> 00:35:35,280
to ten years i think

1036
00:35:35,280 --> 00:35:37,839
we'll see code signing implemented also

1037
00:35:37,839 --> 00:35:40,160
on these platforms

1038
00:35:40,160 --> 00:35:43,280
uh to conclude uh working on this

1039
00:35:43,280 --> 00:35:46,320
project was uh like brought me back like

1040
00:35:46,320 --> 00:35:46,720
20

1041
00:35:46,720 --> 00:35:49,839
25 years ago when the first

1042
00:35:49,839 --> 00:35:52,480
vulnerabilities in web applications uh

1043
00:35:52,480 --> 00:35:53,359
started to

1044
00:35:53,359 --> 00:35:55,680
you know come up and people are starting

1045
00:35:55,680 --> 00:35:57,040
to exploit them

1046
00:35:57,040 --> 00:35:58,800
and as you have seen i mean the classic

1047
00:35:58,800 --> 00:36:00,160
example of the

1048
00:36:00,160 --> 00:36:03,040
path traversal is really an example of a

1049
00:36:03,040 --> 00:36:05,119
vulnerability that is classically found

1050
00:36:05,119 --> 00:36:08,640
in uh web applications and i think that

1051
00:36:08,640 --> 00:36:09,520
in this space

1052
00:36:09,520 --> 00:36:11,680
there are more and more vulnerabilities

1053
00:36:11,680 --> 00:36:13,520
to uncover it's simply

1054
00:36:13,520 --> 00:36:16,160
that we're not looking on that on that

1055
00:36:16,160 --> 00:36:18,800
languages now

1056
00:36:18,800 --> 00:36:21,440
secondly the most important point is

1057
00:36:21,440 --> 00:36:23,440
resource isolation i want to stress this

1058
00:36:23,440 --> 00:36:23,920
one

1059
00:36:23,920 --> 00:36:27,440
it is important that um the future

1060
00:36:27,440 --> 00:36:28,160
languages

1061
00:36:28,160 --> 00:36:31,440
include some ways to differentiate

1062
00:36:31,440 --> 00:36:32,079
between

1063
00:36:32,079 --> 00:36:34,079
security sensitive and non-security

1064
00:36:34,079 --> 00:36:35,839
sensitive instruction so that

1065
00:36:35,839 --> 00:36:37,839
the runtime can decide what to do at

1066
00:36:37,839 --> 00:36:39,599
execution time

1067
00:36:39,599 --> 00:36:42,560
last uh sorry third we ask automation

1068
00:36:42,560 --> 00:36:43,839
engineers to please

1069
00:36:43,839 --> 00:36:45,599
read through the security guidelines

1070
00:36:45,599 --> 00:36:47,440
that we're going to release as part of

1071
00:36:47,440 --> 00:36:49,040
our research paper

1072
00:36:49,040 --> 00:36:52,480
and last security officers please

1073
00:36:52,480 --> 00:36:56,240
start to think on including these

1074
00:36:56,240 --> 00:36:58,720
weird and custom languages as part of

1075
00:36:58,720 --> 00:36:59,680
your

1076
00:36:59,680 --> 00:37:03,200
code reviews activities

1077
00:37:03,280 --> 00:37:05,839
to conclude uh please stay tuned because

1078
00:37:05,839 --> 00:37:07,680
in a few weeks we will have

1079
00:37:07,680 --> 00:37:09,920
we will release a paper with the full

1080
00:37:09,920 --> 00:37:11,200
details of

1081
00:37:11,200 --> 00:37:13,359
the detection system that marcelo has

1082
00:37:13,359 --> 00:37:14,400
explained to you

1083
00:37:14,400 --> 00:37:17,040
of which we have a prototype so if you

1084
00:37:17,040 --> 00:37:17,440
have

1085
00:37:17,440 --> 00:37:20,800
abb or kuka code running on your systems

1086
00:37:20,800 --> 00:37:22,320
and you would like to have that code

1087
00:37:22,320 --> 00:37:23,040
checked

1088
00:37:23,040 --> 00:37:24,880
please reach out and thanks for

1089
00:37:24,880 --> 00:37:27,760
following our talk

1090
00:37:27,920 --> 00:37:31,040
and last security officers please

1091
00:37:31,040 --> 00:37:33,119
hi everyone just wanted to say greetings

1092
00:37:33,119 --> 00:37:35,040
from italy

1093
00:37:35,040 --> 00:37:38,079
i don't see any questions

1094
00:37:38,079 --> 00:37:40,400
unfortunately but you can understand why

1095
00:37:40,400 --> 00:37:43,680
we're competing with uh some great talks

1096
00:37:43,680 --> 00:37:46,720
uh on the other tracks um i just wanted

1097
00:37:46,720 --> 00:37:47,440
to say that

1098
00:37:47,440 --> 00:37:51,040
um still very cool to attend

1099
00:37:51,040 --> 00:37:53,760
and uh talk to blackett even if it's you

1100
00:37:53,760 --> 00:37:55,119
know a bit different

1101
00:37:55,119 --> 00:37:57,520
uh so i really hope to see you all next

1102
00:37:57,520 --> 00:37:58,960
year in

1103
00:37:58,960 --> 00:38:01,200
real vegas thank you very much everyone

1104
00:38:01,200 --> 00:38:02,640
if you have questions we're gonna stay

1105
00:38:02,640 --> 00:38:03,920
here for

1106
00:38:03,920 --> 00:38:06,880
the entire q a time if marcelo has

1107
00:38:06,880 --> 00:38:08,400
something to add

1108
00:38:08,400 --> 00:38:10,160
no i don't have anything to add in the

1109
00:38:10,160 --> 00:38:12,480
month

1110
00:38:12,800 --> 00:38:15,760
uh we have put in there on the chat room

1111
00:38:15,760 --> 00:38:16,800
on the chat from

1112
00:38:16,800 --> 00:38:20,079
some some links to our papers and

1113
00:38:20,079 --> 00:38:23,359
to uh somebody is asking

1114
00:38:23,359 --> 00:38:25,680
alex is asking did you ask did you ask

1115
00:38:25,680 --> 00:38:28,240
any vendors slash publishers

1116
00:38:28,240 --> 00:38:32,400
for example code to analyze uh

1117
00:38:32,400 --> 00:38:35,760
finding code is hard and um

1118
00:38:35,760 --> 00:38:38,960
i don't think that asking vendors um

1119
00:38:38,960 --> 00:38:41,200
i mean we tried we cannot really

1120
00:38:41,200 --> 00:38:42,400
disclose whom

1121
00:38:42,400 --> 00:38:46,000
we asked to but i think the best to

1122
00:38:46,000 --> 00:38:48,480
ask is system integrators uh because

1123
00:38:48,480 --> 00:38:49,359
they produce

1124
00:38:49,359 --> 00:38:53,280
most of the code um but unfortunately

1125
00:38:53,280 --> 00:38:56,480
um it is highly sensitive uh

1126
00:38:56,480 --> 00:38:58,800
for intellectual property so the answer

1127
00:38:58,800 --> 00:39:00,400
that you get is

1128
00:39:00,400 --> 00:39:02,960
in the best case yes let me find out and

1129
00:39:02,960 --> 00:39:03,760
then

1130
00:39:03,760 --> 00:39:06,240
um they will never get back to you so if

1131
00:39:06,240 --> 00:39:06,800
of course

1132
00:39:06,800 --> 00:39:09,760
any of the people who have attended have

1133
00:39:09,760 --> 00:39:10,800
any contacts

1134
00:39:10,800 --> 00:39:14,960
with system integrators or

1135
00:39:15,440 --> 00:39:18,720
producers of industrial automation code

1136
00:39:18,720 --> 00:39:21,200
especially if written in abb or cuca

1137
00:39:21,200 --> 00:39:22,960
language because we have the analyzer

1138
00:39:22,960 --> 00:39:24,079
ready

1139
00:39:24,079 --> 00:39:27,119
we will be very happy to to connect with

1140
00:39:27,119 --> 00:39:29,839
this

1141
00:39:34,640 --> 00:39:43,839
um yeah thank you jake

1142
00:39:49,200 --> 00:39:51,760
okay no more questions make sure that

1143
00:39:51,760 --> 00:39:53,119
you check out the paper

1144
00:39:53,119 --> 00:39:57,839
at the link that we provided

