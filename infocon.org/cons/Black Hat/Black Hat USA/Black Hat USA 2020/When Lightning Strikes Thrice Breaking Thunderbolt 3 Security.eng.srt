1
00:00:04,630 --> 00:00:16,640
[Music]

2
00:00:16,640 --> 00:00:17,520
hello everyone

3
00:00:17,520 --> 00:00:19,520
uh it's really great to be here now this

4
00:00:19,520 --> 00:00:21,760
is my first time in black hat so it's an

5
00:00:21,760 --> 00:00:23,680
incredible honor that i can share my

6
00:00:23,680 --> 00:00:26,480
share with you my name is byron

7
00:00:26,480 --> 00:00:28,640
ratenberg i'm a vulnerability researcher

8
00:00:28,640 --> 00:00:30,080
in my spare time

9
00:00:30,080 --> 00:00:32,238
um mainly interested in hardware

10
00:00:32,238 --> 00:00:33,760
firmware security

11
00:00:33,760 --> 00:00:36,320
sandboxing and input validation and you

12
00:00:36,320 --> 00:00:39,840
can find some of my work on my website

13
00:00:39,840 --> 00:00:41,440
i'm a master's student in computer

14
00:00:41,440 --> 00:00:42,960
science at eindhoven university of

15
00:00:42,960 --> 00:00:44,160
technology

16
00:00:44,160 --> 00:00:45,520
and the work that i'll be presenting

17
00:00:45,520 --> 00:00:49,760
today is part of my master's thesis

18
00:00:49,760 --> 00:00:51,360
so in this talk i'll be occasionally

19
00:00:51,360 --> 00:00:54,000
referring to pci express terminology

20
00:00:54,000 --> 00:00:56,559
um but enter in the interest of time in

21
00:00:56,559 --> 00:00:58,320
case you're not familiar with it

22
00:00:58,320 --> 00:01:01,280
just think of pci express as a package

23
00:01:01,280 --> 00:01:04,239
choice network that connects your cpu

24
00:01:04,239 --> 00:01:08,960
to your peripherals now thunderbolt is

25
00:01:08,960 --> 00:01:12,640
a external pcie-based interconnect

26
00:01:12,640 --> 00:01:14,799
and it was developed by intel apple in

27
00:01:14,799 --> 00:01:16,159
2011

28
00:01:16,159 --> 00:01:19,600
now being pcie based it enables start

29
00:01:19,600 --> 00:01:21,119
memory access

30
00:01:21,119 --> 00:01:24,240
io to the peripherals and so it's the

31
00:01:24,240 --> 00:01:25,439
first external

32
00:01:25,439 --> 00:01:28,000
interconnect that allows use cases such

33
00:01:28,000 --> 00:01:29,040
as connecting

34
00:01:29,040 --> 00:01:32,479
a external gpu to a laptop connecting 5k

35
00:01:32,479 --> 00:01:34,079
monitors

36
00:01:34,079 --> 00:01:36,720
accessing high speed external storage at

37
00:01:36,720 --> 00:01:39,119
its maximum

38
00:01:39,119 --> 00:01:40,640
and performance well the first two

39
00:01:40,640 --> 00:01:42,960
versions they were mostly exclusive to

40
00:01:42,960 --> 00:01:46,000
max and use the mini display for form

41
00:01:46,000 --> 00:01:47,520
factor

42
00:01:47,520 --> 00:01:49,600
uh thunderbolt 3 is the first version to

43
00:01:49,600 --> 00:01:52,079
be widely adopted among both

44
00:01:52,079 --> 00:01:56,079
pcs and macs and it uses the usbc

45
00:01:56,079 --> 00:01:59,200
form factor instead thereby allowing not

46
00:01:59,200 --> 00:02:00,399
only thunderbolt

47
00:02:00,399 --> 00:02:05,600
devices but also displayport and usbc

48
00:02:06,640 --> 00:02:09,758
now dma is a very powerful concept um

49
00:02:09,758 --> 00:02:12,559
it enables

50
00:02:13,520 --> 00:02:16,800
high bandwidth low latency use cases by

51
00:02:16,800 --> 00:02:19,040
putting the burden on the peripheral for

52
00:02:19,040 --> 00:02:19,920
copying

53
00:02:19,920 --> 00:02:22,000
the requested data in directly into

54
00:02:22,000 --> 00:02:23,120
system ram

55
00:02:23,120 --> 00:02:25,920
but at the same time uh this could also

56
00:02:25,920 --> 00:02:28,000
pose a security risk and this was

57
00:02:28,000 --> 00:02:30,319
actually the case with thunderbolt one

58
00:02:30,319 --> 00:02:33,040
um for fundable one all the attacker had

59
00:02:33,040 --> 00:02:33,760
to do was

60
00:02:33,760 --> 00:02:36,959
basically connect a peripheral and then

61
00:02:36,959 --> 00:02:39,680
get unrestricted reading right memory

62
00:02:39,680 --> 00:02:41,280
access

63
00:02:41,280 --> 00:02:45,120
now as a result the attacker could get

64
00:02:45,360 --> 00:02:48,400
well excess data from encrypted drives

65
00:02:48,400 --> 00:02:51,519
and uh to gain persistent access they

66
00:02:51,519 --> 00:02:54,800
could install a root kit

67
00:02:54,959 --> 00:02:56,959
dma attacks are generally well

68
00:02:56,959 --> 00:02:58,400
understood

69
00:02:58,400 --> 00:03:02,239
first started with firewire back in 2004

70
00:03:02,239 --> 00:03:05,120
and over the years gradually moved to

71
00:03:05,120 --> 00:03:06,560
pci express

72
00:03:06,560 --> 00:03:09,519
including all its form factors such as

73
00:03:09,519 --> 00:03:11,360
m2 express card

74
00:03:11,360 --> 00:03:14,720
and eventually thunderbolt

75
00:03:15,040 --> 00:03:16,239
so the threat model that we'll be

76
00:03:16,239 --> 00:03:18,720
talking about tonight is pre-physical

77
00:03:18,720 --> 00:03:20,640
access to a victim system

78
00:03:20,640 --> 00:03:23,760
also known as an evil might attack and

79
00:03:23,760 --> 00:03:25,200
some of the real world scenarios that

80
00:03:25,200 --> 00:03:26,879
you can think of are

81
00:03:26,879 --> 00:03:30,319
for example leaving a laptop

82
00:03:30,319 --> 00:03:32,720
unattended in a hotel room while you're

83
00:03:32,720 --> 00:03:33,920
out for dinner

84
00:03:33,920 --> 00:03:38,000
or a desktop system sitting in an office

85
00:03:38,000 --> 00:03:40,000
and at some point any cleaning crew

86
00:03:40,000 --> 00:03:41,440
comes in and has

87
00:03:41,440 --> 00:03:44,400
brief unfettered access now in case

88
00:03:44,400 --> 00:03:46,400
you're wondering what such an evil

89
00:03:46,400 --> 00:03:49,280
clean crew might look like um i included

90
00:03:49,280 --> 00:03:51,440
a picture right here in the

91
00:03:51,440 --> 00:03:55,120
slide so

92
00:03:55,120 --> 00:03:58,239
this pre-physical axis the industry has

93
00:03:58,239 --> 00:04:00,000
implemented several protection measures

94
00:04:00,000 --> 00:04:02,239
over the years to protect against this

95
00:04:02,239 --> 00:04:03,280
so-called

96
00:04:03,280 --> 00:04:05,840
opportunistic physical access so let's

97
00:04:05,840 --> 00:04:06,480
briefly

98
00:04:06,480 --> 00:04:09,360
go through them first one is really

99
00:04:09,360 --> 00:04:10,400
simple

100
00:04:10,400 --> 00:04:13,439
you put a password on your bios and

101
00:04:13,439 --> 00:04:15,040
well that should prevent the attacker

102
00:04:15,040 --> 00:04:17,839
from making unauthorized modifications

103
00:04:17,839 --> 00:04:20,798
uh when you get physical access then

104
00:04:20,798 --> 00:04:22,079
there's secure boot

105
00:04:22,079 --> 00:04:25,840
secure boot focuses on cryptography

106
00:04:25,840 --> 00:04:28,080
verifying all components in the entire

107
00:04:28,080 --> 00:04:30,400
buching starting from the os bootloader

108
00:04:30,400 --> 00:04:31,280
to the kernel

109
00:04:31,280 --> 00:04:34,560
and finally device drivers

110
00:04:34,560 --> 00:04:36,720
there's boot card which focuses on

111
00:04:36,720 --> 00:04:39,199
cryptographically verifying at the bios

112
00:04:39,199 --> 00:04:40,720
itself

113
00:04:40,720 --> 00:04:44,000
and there's full disk encryption um

114
00:04:44,000 --> 00:04:46,400
which enables you to encrypt all your

115
00:04:46,400 --> 00:04:47,280
data

116
00:04:47,280 --> 00:04:50,080
so that when a attacker gets physical

117
00:04:50,080 --> 00:04:51,600
access to your laptop

118
00:04:51,600 --> 00:04:54,240
they can disassemble the ssd but still

119
00:04:54,240 --> 00:04:56,240
cannot access the data with now

120
00:04:56,240 --> 00:04:59,919
without knowing the correct password

121
00:05:00,560 --> 00:05:02,880
now to counter the dma attacks that

122
00:05:02,880 --> 00:05:05,199
we've seen in the previous slide

123
00:05:05,199 --> 00:05:07,199
intel introduced what they call

124
00:05:07,199 --> 00:05:09,039
thunderbolt security levels

125
00:05:09,039 --> 00:05:10,880
and these security levels are intended

126
00:05:10,880 --> 00:05:13,120
to protect the entire thing

127
00:05:13,120 --> 00:05:16,160
that you see right here

128
00:05:16,240 --> 00:05:18,560
so let's dive a little bit deeper in the

129
00:05:18,560 --> 00:05:20,800
thunderbolt security architecture

130
00:05:20,800 --> 00:05:24,080
um security levels it's really

131
00:05:24,080 --> 00:05:27,199
uh an access control system so if

132
00:05:27,199 --> 00:05:30,080
uh if you connect a device to the laptop

133
00:05:30,080 --> 00:05:32,320
then as a user you will see this pop-up

134
00:05:32,320 --> 00:05:33,360
right here

135
00:05:33,360 --> 00:05:36,080
uh it will let you identify the device

136
00:05:36,080 --> 00:05:38,560
and then make a decision whether you

137
00:05:38,560 --> 00:05:38,960
know

138
00:05:38,960 --> 00:05:40,560
whether or not you would like to enable

139
00:05:40,560 --> 00:05:43,600
pcie tunneling

140
00:05:43,919 --> 00:05:48,400
now thunderbolt security levels rely on

141
00:05:48,720 --> 00:05:50,320
thunderbolt devices authenticating to

142
00:05:50,320 --> 00:05:52,960
the host and these devices do this using

143
00:05:52,960 --> 00:05:56,080
the parameters shown right here and the

144
00:05:56,080 --> 00:05:58,000
most important one being the

145
00:05:58,000 --> 00:06:01,120
universal unique id or uuid

146
00:06:01,120 --> 00:06:03,919
now this number is intended to uniquely

147
00:06:03,919 --> 00:06:04,720
identify

148
00:06:04,720 --> 00:06:07,840
any single thunderbolt device

149
00:06:07,840 --> 00:06:10,560
and also it's defined to be fused in

150
00:06:10,560 --> 00:06:11,600
silicon so

151
00:06:11,600 --> 00:06:14,960
it shouldn't be easy to change

152
00:06:15,759 --> 00:06:17,440
so thunderbolt security levels is a

153
00:06:17,440 --> 00:06:19,039
multi-step system

154
00:06:19,039 --> 00:06:22,880
um as a user you can select any of these

155
00:06:22,880 --> 00:06:24,240
in the bios

156
00:06:24,240 --> 00:06:27,360
um so let's uh quickly go through them

157
00:06:27,360 --> 00:06:30,639
um well sl0 basically is

158
00:06:30,639 --> 00:06:33,199
no security so essentially the same

159
00:06:33,199 --> 00:06:35,600
situation like with thunderbolt one

160
00:06:35,600 --> 00:06:38,319
there's so one user um where device

161
00:06:38,319 --> 00:06:42,080
authorization is based on the device uid

162
00:06:42,080 --> 00:06:43,680
um and this is actually the default

163
00:06:43,680 --> 00:06:45,440
settings uh on all

164
00:06:45,440 --> 00:06:47,919
thunderbolt equipped pcs then there is

165
00:06:47,919 --> 00:06:49,039
so2

166
00:06:49,039 --> 00:06:51,919
it's the same as as a one but it adds

167
00:06:51,919 --> 00:06:54,400
john's response mechanism

168
00:06:54,400 --> 00:06:56,240
so3 disables all thunderbolt

169
00:06:56,240 --> 00:06:58,400
connectivity but allows usb

170
00:06:58,400 --> 00:07:01,680
and displayport devices

171
00:07:01,680 --> 00:07:04,400
so4 is intended for use with thunderbolt

172
00:07:04,400 --> 00:07:05,199
docks

173
00:07:05,199 --> 00:07:07,360
so when you connect to dock you cannot

174
00:07:07,360 --> 00:07:09,680
daisy chain any additional thunderbolt

175
00:07:09,680 --> 00:07:13,360
bolt devices um through the dock

176
00:07:13,360 --> 00:07:16,800
and finally if you're using so1 or so2

177
00:07:16,800 --> 00:07:18,400
you will get pre-boot protection for

178
00:07:18,400 --> 00:07:20,720
free so

179
00:07:20,720 --> 00:07:23,039
that means that any authorized any

180
00:07:23,039 --> 00:07:24,720
devices that you've previously

181
00:07:24,720 --> 00:07:27,280
authorized will also be usable during

182
00:07:27,280 --> 00:07:28,880
boot time

183
00:07:28,880 --> 00:07:31,680
while the rest will be blocked from

184
00:07:31,680 --> 00:07:34,800
accessing your system

185
00:07:34,880 --> 00:07:37,440
now security levels um the security

186
00:07:37,440 --> 00:07:39,360
level scheme is mostly known for

187
00:07:39,360 --> 00:07:40,800
protecting against

188
00:07:40,800 --> 00:07:44,560
the fights to host ema attacks but

189
00:07:44,560 --> 00:07:47,440
since it prevents malicious devices from

190
00:07:47,440 --> 00:07:49,599
accessing the pcie bus

191
00:07:49,599 --> 00:07:52,160
it actually prevents against other

192
00:07:52,160 --> 00:07:54,160
inherent attack factors

193
00:07:54,160 --> 00:07:58,400
such as well peer-to-peer dma attacks

194
00:07:58,400 --> 00:08:01,440
uh pcied spoofing to target vulnerable

195
00:08:01,440 --> 00:08:02,960
device drivers

196
00:08:02,960 --> 00:08:06,639
and um tlp source id spoofing

197
00:08:06,639 --> 00:08:10,000
so concept wise security level is really

198
00:08:10,000 --> 00:08:10,960
a powerful

199
00:08:10,960 --> 00:08:14,799
and much needed protection scheme

200
00:08:15,680 --> 00:08:18,639
right so um introducing thunderspy so

201
00:08:18,639 --> 00:08:20,720
previous research you can roughly divide

202
00:08:20,720 --> 00:08:22,400
into two categories

203
00:08:22,400 --> 00:08:26,639
um the first one before security levels

204
00:08:26,639 --> 00:08:30,080
they primarily focus on pcie level dma

205
00:08:30,080 --> 00:08:31,280
attacks

206
00:08:31,280 --> 00:08:32,880
after the introduction of security

207
00:08:32,880 --> 00:08:36,399
levels they mostly focus on

208
00:08:36,399 --> 00:08:38,799
tricking the user into accepting

209
00:08:38,799 --> 00:08:40,719
malicious devices

210
00:08:40,719 --> 00:08:43,200
now sounderfi is a new class of

211
00:08:43,200 --> 00:08:46,399
vulnerabilities that breaks

212
00:08:46,399 --> 00:08:49,040
thunderbolt protocol security and it's

213
00:08:49,040 --> 00:08:50,720
really the first attack on

214
00:08:50,720 --> 00:08:52,959
thunderbolt security levels so what

215
00:08:52,959 --> 00:08:54,080
we're presenting today

216
00:08:54,080 --> 00:08:57,200
is seven vulnerabilities and nine

217
00:08:57,200 --> 00:08:59,360
scenarios to actually practically

218
00:08:59,360 --> 00:09:02,000
exploit them

219
00:09:02,800 --> 00:09:05,440
right so the first step um in our

220
00:09:05,440 --> 00:09:06,959
research was to

221
00:09:06,959 --> 00:09:09,200
find out how thunderbolt works now

222
00:09:09,200 --> 00:09:11,600
thunderbolt is a proprietary standard so

223
00:09:11,600 --> 00:09:12,720
if you try to look up

224
00:09:12,720 --> 00:09:15,680
protocol specifications uh you will not

225
00:09:15,680 --> 00:09:16,800
find them

226
00:09:16,800 --> 00:09:19,440
and if you try to look up diagrams that

227
00:09:19,440 --> 00:09:22,240
will tell you how the

228
00:09:22,240 --> 00:09:24,160
sorry what the hardware architecture is

229
00:09:24,160 --> 00:09:26,720
like uh you will not find it either

230
00:09:26,720 --> 00:09:29,200
so the first thing that we did was

231
00:09:29,200 --> 00:09:30,080
dissecting

232
00:09:30,080 --> 00:09:32,800
various vulnerable devices and frontal

233
00:09:32,800 --> 00:09:36,880
equip systems

234
00:09:36,880 --> 00:09:39,680
now eventually we came up um with this

235
00:09:39,680 --> 00:09:40,480
diagram

236
00:09:40,480 --> 00:09:42,160
uh that i'm showing here for future

237
00:09:42,160 --> 00:09:45,120
research um

238
00:09:45,120 --> 00:09:46,399
so starting with the thundable host

239
00:09:46,399 --> 00:09:48,240
controller uh the sonobot host

240
00:09:48,240 --> 00:09:50,080
controller on the pc and connects to the

241
00:09:50,080 --> 00:09:52,000
pch

242
00:09:52,000 --> 00:09:56,240
and the gpu and igpu take care of

243
00:09:56,240 --> 00:09:59,440
generating a displayport signal now on

244
00:09:59,440 --> 00:10:01,120
the other hand there's the usb pd

245
00:10:01,120 --> 00:10:02,160
controller

246
00:10:02,160 --> 00:10:05,120
which is a third-party chip and this

247
00:10:05,120 --> 00:10:07,120
controller multiplexes between

248
00:10:07,120 --> 00:10:10,240
thunderbolt and a usb

249
00:10:10,240 --> 00:10:13,440
from the pch as appropriate

250
00:10:13,440 --> 00:10:16,480
now the define side is actually kind of

251
00:10:16,480 --> 00:10:18,399
a mirrored version of what we see

252
00:10:18,399 --> 00:10:21,440
on the pc so the signal comes in

253
00:10:21,440 --> 00:10:23,040
and the thunderbolt device controller

254
00:10:23,040 --> 00:10:25,040
then the multiplexes it to

255
00:10:25,040 --> 00:10:28,320
pcie on the one end and if the device

256
00:10:28,320 --> 00:10:29,120
has two

257
00:10:29,120 --> 00:10:32,079
ports um thunderbolt again on the other

258
00:10:32,079 --> 00:10:32,640
event

259
00:10:32,640 --> 00:10:34,399
so that you can connect another

260
00:10:34,399 --> 00:10:35,839
vulnerable device

261
00:10:35,839 --> 00:10:40,000
or a usb or displayport device

262
00:10:41,360 --> 00:10:43,200
right so let's have a look at some

263
00:10:43,200 --> 00:10:46,320
thunderbolt devices

264
00:10:46,320 --> 00:10:49,920
um we have we have had to look at

265
00:10:49,920 --> 00:10:51,839
various soluble devices

266
00:10:51,839 --> 00:10:54,720
starting with very simple esata to

267
00:10:54,720 --> 00:10:55,920
thunderbolt

268
00:10:55,920 --> 00:11:00,560
dongles to storage solutions to e-gpus

269
00:11:00,560 --> 00:11:02,880
and they were pretty much all the same

270
00:11:02,880 --> 00:11:04,000
um but

271
00:11:04,000 --> 00:11:06,480
this netstore thunderbolt nvme enclosure

272
00:11:06,480 --> 00:11:07,360
really had a

273
00:11:07,360 --> 00:11:10,480
nice design um you could immediately

274
00:11:10,480 --> 00:11:12,800
identify all the chips so that's why i'm

275
00:11:12,800 --> 00:11:16,240
taking it here as an example

276
00:11:16,480 --> 00:11:18,959
our prime suspect is in the top left

277
00:11:18,959 --> 00:11:19,760
corner

278
00:11:19,760 --> 00:11:22,399
the intel thunderbolt controller and we

279
00:11:22,399 --> 00:11:23,760
see

280
00:11:23,760 --> 00:11:27,360
a usb controller texas instrument tps

281
00:11:27,360 --> 00:11:30,560
one for each vulnerable port there's a

282
00:11:30,560 --> 00:11:32,720
spy flash which we'll be talking about

283
00:11:32,720 --> 00:11:37,680
a lot about uh later and i square c

284
00:11:37,680 --> 00:11:39,760
which apparently has been routed by the

285
00:11:39,760 --> 00:11:41,920
netstar people to easily accessible

286
00:11:41,920 --> 00:11:42,880
paths

287
00:11:42,880 --> 00:11:45,920
so that was really nice and there

288
00:11:45,920 --> 00:11:49,920
is a interface with appears to be jtag

289
00:11:49,920 --> 00:11:53,120
but want to answer your question

290
00:11:53,120 --> 00:11:57,279
no it doesn't work sorry

291
00:11:57,279 --> 00:11:59,839
so the intel thunderbolt controller is

292
00:11:59,839 --> 00:12:01,760
well in this case it's really a

293
00:12:01,760 --> 00:12:04,079
special model because it supports both

294
00:12:04,079 --> 00:12:04,959
running in host

295
00:12:04,959 --> 00:12:08,320
and endpoint mode and uh

296
00:12:08,320 --> 00:12:10,079
well it's from the alpine range

297
00:12:10,079 --> 00:12:11,920
generation so it supports displayport

298
00:12:11,920 --> 00:12:13,040
1.2

299
00:12:13,040 --> 00:12:16,560
hdmi 2.0 uh usb passthrough

300
00:12:16,560 --> 00:12:20,000
and usb power delivery

301
00:12:20,000 --> 00:12:22,519
now in terms of analyzing the hardware

302
00:12:22,519 --> 00:12:24,240
architecture

303
00:12:24,240 --> 00:12:26,240
this particular chip is not very

304
00:12:26,240 --> 00:12:28,399
attractive to have a look at

305
00:12:28,399 --> 00:12:30,320
at least not initially because it's a

306
00:12:30,320 --> 00:12:32,639
bga package and there's no

307
00:12:32,639 --> 00:12:36,079
public data sheets so yeah

308
00:12:36,079 --> 00:12:38,240
we actually moved on to the other chips

309
00:12:38,240 --> 00:12:40,240
first

310
00:12:40,240 --> 00:12:42,399
the tps is actually uh quite the

311
00:12:42,399 --> 00:12:44,000
opposite there's just a

312
00:12:44,000 --> 00:12:45,920
uh a public data sheet that you can have

313
00:12:45,920 --> 00:12:47,040
a look at

314
00:12:47,040 --> 00:12:49,040
and uh you can actually talk to this

315
00:12:49,040 --> 00:12:50,160
thing over i square

316
00:12:50,160 --> 00:12:54,320
c so for example to get

317
00:12:54,320 --> 00:12:56,399
firmware identifiers the current

318
00:12:56,399 --> 00:12:58,079
operational state

319
00:12:58,079 --> 00:13:00,000
and i think there are even some

320
00:13:00,000 --> 00:13:03,360
registers in there that allow you to

321
00:13:03,360 --> 00:13:06,240
change the current output voltage but i

322
00:13:06,240 --> 00:13:07,040
haven't really

323
00:13:07,040 --> 00:13:09,920
looked much into that

324
00:13:10,639 --> 00:13:12,959
now the spy flash is of course very

325
00:13:12,959 --> 00:13:14,959
interesting

326
00:13:14,959 --> 00:13:17,360
and i will be talking about a lot more

327
00:13:17,360 --> 00:13:20,480
in the rest of this presentation um

328
00:13:20,480 --> 00:13:23,360
of course we dumped its content and what

329
00:13:23,360 --> 00:13:24,959
we found was the thunderbolt 3

330
00:13:24,959 --> 00:13:27,839
controller firmware

331
00:13:27,839 --> 00:13:30,800
and what you will immediately notice uh

332
00:13:30,800 --> 00:13:32,240
when you dump this firmware

333
00:13:32,240 --> 00:13:36,240
is a section called drum or device rom

334
00:13:36,240 --> 00:13:38,000
now this device rom contains all the

335
00:13:38,000 --> 00:13:39,760
parameters that we've seen before

336
00:13:39,760 --> 00:13:41,760
which are important for uh thunderbolt

337
00:13:41,760 --> 00:13:43,600
device authentication

338
00:13:43,600 --> 00:13:45,839
um but the question is of course is the

339
00:13:45,839 --> 00:13:48,399
uuid all the part of this

340
00:13:48,399 --> 00:13:51,360
now the answer is yes but only two out

341
00:13:51,360 --> 00:13:53,600
of eight bytes

342
00:13:53,600 --> 00:13:55,440
still we would like to know whether

343
00:13:55,440 --> 00:13:56,639
there's a

344
00:13:56,639 --> 00:13:59,920
signature and whether we can change any

345
00:13:59,920 --> 00:14:03,839
of this without breaking that signature

346
00:14:04,399 --> 00:14:07,839
now um to answer the first question yes

347
00:14:07,839 --> 00:14:09,120
there's a signature

348
00:14:09,120 --> 00:14:12,399
there's a public key and signed digest

349
00:14:12,399 --> 00:14:14,480
changing the public key doesn't really

350
00:14:14,480 --> 00:14:16,079
work so probably the fingerprint

351
00:14:16,079 --> 00:14:19,839
is embedded somewhere in silicon

352
00:14:19,839 --> 00:14:22,160
but still uh well it would be

353
00:14:22,160 --> 00:14:24,000
interesting to find out what we can

354
00:14:24,000 --> 00:14:25,199
change

355
00:14:25,199 --> 00:14:28,320
uh without breaking the signature

356
00:14:28,320 --> 00:14:31,680
so what is covered by the signature

357
00:14:31,680 --> 00:14:34,800
well not the d-rom because

358
00:14:34,800 --> 00:14:37,839
um when we do in-system programming uh

359
00:14:37,839 --> 00:14:39,199
we can basically

360
00:14:39,199 --> 00:14:42,959
uh construct entire arbitrary identities

361
00:14:42,959 --> 00:14:45,640
for the device and well then you can

362
00:14:45,640 --> 00:14:47,120
[Music]

363
00:14:47,120 --> 00:14:49,279
create some nice identities like shown

364
00:14:49,279 --> 00:14:52,000
here in the screenshot

365
00:14:52,000 --> 00:14:54,800
and this was quite puzzling at first

366
00:14:54,800 --> 00:14:56,240
because

367
00:14:56,240 --> 00:14:58,959
when you apply vendor uh updates for

368
00:14:58,959 --> 00:14:59,760
example

369
00:14:59,760 --> 00:15:02,160
updates that you download from a website

370
00:15:02,160 --> 00:15:02,880
then

371
00:15:02,880 --> 00:15:05,920
the dram is actually part of the second

372
00:15:05,920 --> 00:15:08,240
signature check when you do in system

373
00:15:08,240 --> 00:15:09,279
programming

374
00:15:09,279 --> 00:15:12,639
it is apparently not now the second

375
00:15:12,639 --> 00:15:14,399
vulnerability is also quite interesting

376
00:15:14,399 --> 00:15:15,519
because

377
00:15:15,519 --> 00:15:17,839
uh for example the vendor id you would

378
00:15:17,839 --> 00:15:19,279
expect to be tied

379
00:15:19,279 --> 00:15:22,399
to a certain vendor name and the same

380
00:15:22,399 --> 00:15:26,160
applies to device id

381
00:15:26,160 --> 00:15:28,240
and the device name well apparently

382
00:15:28,240 --> 00:15:30,399
that's not the case because you can

383
00:15:30,399 --> 00:15:32,880
make up completely arbitrary values for

384
00:15:32,880 --> 00:15:35,680
both entries

385
00:15:37,279 --> 00:15:41,120
so um well i had another look at the

386
00:15:41,120 --> 00:15:43,440
uh intel white paper on thunderbolt

387
00:15:43,440 --> 00:15:44,320
security

388
00:15:44,320 --> 00:15:46,320
and there was this interesting section

389
00:15:46,320 --> 00:15:48,480
on the unique id number

390
00:15:48,480 --> 00:15:50,560
and it said every thunderbolt 3

391
00:15:50,560 --> 00:15:52,560
controller has a unique id

392
00:15:52,560 --> 00:15:56,240
fused in silicone during production

393
00:15:56,240 --> 00:15:58,000
now we already know this is not true

394
00:15:58,000 --> 00:15:59,839
because we're going to change 2 out of 8

395
00:15:59,839 --> 00:16:00,959
bytes

396
00:16:00,959 --> 00:16:03,759
but there was this interesting emphasis

397
00:16:03,759 --> 00:16:04,160
on

398
00:16:04,160 --> 00:16:06,480
thunderbolt 3. so i had a look at

399
00:16:06,480 --> 00:16:08,720
thunderbolt 2 devices

400
00:16:08,720 --> 00:16:11,759
and what to answer your question

401
00:16:11,759 --> 00:16:15,600
yes this is the uuid in plain text

402
00:16:15,600 --> 00:16:16,959
and no it's not covered by any

403
00:16:16,959 --> 00:16:18,800
signatures

404
00:16:18,800 --> 00:16:21,759
so essentially what you can do is spoof

405
00:16:21,759 --> 00:16:23,440
both thunderbolt 2 and thunderbolt 3

406
00:16:23,440 --> 00:16:25,600
devices

407
00:16:25,600 --> 00:16:29,440
and well once you spoof a thunderbolt

408
00:16:29,440 --> 00:16:30,959
device that has been previously

409
00:16:30,959 --> 00:16:32,560
authorized by the user

410
00:16:32,560 --> 00:16:34,000
then the system will accept your

411
00:16:34,000 --> 00:16:36,800
malicious device and then you get

412
00:16:36,800 --> 00:16:40,479
a full dma access

413
00:16:41,519 --> 00:16:43,759
so this is how we got to thunderbolt uh

414
00:16:43,759 --> 00:16:44,800
surrounding spy

415
00:16:44,800 --> 00:16:47,360
vulnerability three and four and we've

416
00:16:47,360 --> 00:16:49,680
documented how to exploit these

417
00:16:49,680 --> 00:16:53,199
in these exploitation scenarios

418
00:16:54,560 --> 00:16:57,040
so let's have a look at the device

419
00:16:57,040 --> 00:16:58,480
controller firmware

420
00:16:58,480 --> 00:17:00,560
we see a jump address on top which

421
00:17:00,560 --> 00:17:03,279
differs depending on

422
00:17:03,279 --> 00:17:04,799
the mode that the controller is running

423
00:17:04,799 --> 00:17:07,599
in there's a secure key dictionary which

424
00:17:07,599 --> 00:17:09,439
maps an 8 byte hosting ued

425
00:17:09,439 --> 00:17:12,799
to a 32 byte key

426
00:17:12,799 --> 00:17:17,839
the drum section phy configuration

427
00:17:17,839 --> 00:17:20,720
public key the side digest and there

428
00:17:20,720 --> 00:17:22,480
there's a section

429
00:17:22,480 --> 00:17:25,599
which comprises the tps uh power

430
00:17:25,599 --> 00:17:26,880
delivery firmware

431
00:17:26,880 --> 00:17:28,400
so that's really interesting because

432
00:17:28,400 --> 00:17:30,799
that means that the thermal controller

433
00:17:30,799 --> 00:17:35,520
and the tps share the same spy flash

434
00:17:35,520 --> 00:17:38,240
now finally there are some scratch pads

435
00:17:38,240 --> 00:17:40,720
section

436
00:17:40,960 --> 00:17:43,520
and this section is used to temporarily

437
00:17:43,520 --> 00:17:44,720
store

438
00:17:44,720 --> 00:17:46,880
firmware updates that you apply from the

439
00:17:46,880 --> 00:17:49,200
host

440
00:17:50,559 --> 00:17:51,919
so let's have a look at some thunderbolt

441
00:17:51,919 --> 00:17:54,320
equipped systems

442
00:17:54,320 --> 00:17:56,320
we've had a look at all major vendors

443
00:17:56,320 --> 00:17:59,760
across seven generations of systems

444
00:17:59,760 --> 00:18:02,000
and we had a look at five generations of

445
00:18:02,000 --> 00:18:03,360
thunderbolt controllers

446
00:18:03,360 --> 00:18:06,000
starting from thunderbolt 2 with falcon

447
00:18:06,000 --> 00:18:06,480
ridge

448
00:18:06,480 --> 00:18:08,320
all the way to the latest iceland

449
00:18:08,320 --> 00:18:11,439
thunderbolt 3 controller

450
00:18:11,679 --> 00:18:13,919
they were all pretty much the same but

451
00:18:13,919 --> 00:18:14,720
the lenovo

452
00:18:14,720 --> 00:18:17,679
thinkp1 had a nice clean layout so

453
00:18:17,679 --> 00:18:20,880
that's why i'm showing it here

454
00:18:20,880 --> 00:18:23,360
most of the components will be familiar

455
00:18:23,360 --> 00:18:24,400
to you

456
00:18:24,400 --> 00:18:26,640
but there's of course the most important

457
00:18:26,640 --> 00:18:29,120
part in the top right

458
00:18:29,120 --> 00:18:31,200
where we see the thunderbolt controller

459
00:18:31,200 --> 00:18:35,120
a slightly different tps version

460
00:18:35,120 --> 00:18:38,720
than we saw in the devices and of course

461
00:18:38,720 --> 00:18:39,280
the

462
00:18:39,280 --> 00:18:41,200
spy flash hosting the controller

463
00:18:41,200 --> 00:18:43,840
firmware

464
00:18:44,320 --> 00:18:46,240
now for the host controller the key

465
00:18:46,240 --> 00:18:48,400
questions are

466
00:18:48,400 --> 00:18:50,960
as a user you can select a security

467
00:18:50,960 --> 00:18:51,520
level

468
00:18:51,520 --> 00:18:55,440
from the bios so that kind of seems to

469
00:18:55,440 --> 00:18:57,679
suggest that the bias stores the

470
00:18:57,679 --> 00:18:59,919
security level state

471
00:18:59,919 --> 00:19:03,360
and for security level one and two um

472
00:19:03,360 --> 00:19:06,240
well these require storing device uids

473
00:19:06,240 --> 00:19:08,240
so that raises the question

474
00:19:08,240 --> 00:19:11,760
uh where is the device acl stored

475
00:19:11,760 --> 00:19:14,720
so let's have a look

476
00:19:14,960 --> 00:19:18,640
um well the host controller firmware is

477
00:19:18,640 --> 00:19:20,240
pretty much the same as the device

478
00:19:20,240 --> 00:19:20,960
firmware

479
00:19:20,960 --> 00:19:22,240
but there are a couple of important

480
00:19:22,240 --> 00:19:25,200
differences for example the first one

481
00:19:25,200 --> 00:19:27,360
is that the device uh that there is a

482
00:19:27,360 --> 00:19:29,600
device acl

483
00:19:29,600 --> 00:19:31,520
listing all of the uuids that are

484
00:19:31,520 --> 00:19:32,640
allowed

485
00:19:32,640 --> 00:19:36,480
and there is no secure key dictionary

486
00:19:36,480 --> 00:19:38,320
which is pretty interesting because in

487
00:19:38,320 --> 00:19:40,240
security level 2

488
00:19:40,240 --> 00:19:43,200
um these keys are stored on the os disk

489
00:19:43,200 --> 00:19:44,720
and it means that

490
00:19:44,720 --> 00:19:48,240
or seems to suggest that with reboot and

491
00:19:48,240 --> 00:19:51,120
authentication devices are still

492
00:19:51,120 --> 00:19:52,160
authorized

493
00:19:52,160 --> 00:19:56,640
based on the ua uuid only

494
00:19:56,960 --> 00:19:59,840
now what was more interesting is another

495
00:19:59,840 --> 00:20:02,559
part we found

496
00:20:02,559 --> 00:20:05,280
the host security level configuration

497
00:20:05,280 --> 00:20:05,760
and

498
00:20:05,760 --> 00:20:09,039
yes it's there in plain text and no it's

499
00:20:09,039 --> 00:20:11,039
not covered by any signatures

500
00:20:11,039 --> 00:20:14,960
so all the attacker would have to do is

501
00:20:14,960 --> 00:20:17,039
patch the host controller firmware to

502
00:20:17,039 --> 00:20:19,679
for example disable thunderbolt security

503
00:20:19,679 --> 00:20:22,159
or restore a thunderbolt connectivity

504
00:20:22,159 --> 00:20:25,679
when it was disabled by the user

505
00:20:26,640 --> 00:20:28,240
spy flaggers are really interesting

506
00:20:28,240 --> 00:20:30,240
devices

507
00:20:30,240 --> 00:20:32,880
and they usually have multiple methods

508
00:20:32,880 --> 00:20:33,520
to

509
00:20:33,520 --> 00:20:36,400
support right protection now this wind

510
00:20:36,400 --> 00:20:37,360
bond

511
00:20:37,360 --> 00:20:41,280
we encountered in many thunderbolt

512
00:20:41,280 --> 00:20:45,120
devices and this particular one

513
00:20:45,120 --> 00:20:48,480
supports actually four

514
00:20:48,480 --> 00:20:50,640
wreck protection methods including what

515
00:20:50,640 --> 00:20:52,559
is called one time program

516
00:20:52,559 --> 00:20:56,640
now one time program allows it to

517
00:20:56,640 --> 00:20:58,720
turn the spy flash into a read only

518
00:20:58,720 --> 00:21:00,880
memory and this is really interesting

519
00:21:00,880 --> 00:21:01,600
because

520
00:21:01,600 --> 00:21:04,720
it says special order but we found that

521
00:21:04,720 --> 00:21:05,600
these

522
00:21:05,600 --> 00:21:08,080
samples that we have still appear to

523
00:21:08,080 --> 00:21:08,640
ship

524
00:21:08,640 --> 00:21:12,000
this kind of support so that's how we

525
00:21:12,000 --> 00:21:14,159
got to vulnerability 6 because

526
00:21:14,159 --> 00:21:17,600
well as an attacker what you could do is

527
00:21:17,600 --> 00:21:20,320
exploit vulnerability 5 to override the

528
00:21:20,320 --> 00:21:22,080
thunderbolt security to

529
00:21:22,080 --> 00:21:24,720
no security at all and then you can

530
00:21:24,720 --> 00:21:26,240
simply turn the

531
00:21:26,240 --> 00:21:29,280
spyflash into a read-only memory thereby

532
00:21:29,280 --> 00:21:30,880
preventing the user from

533
00:21:30,880 --> 00:21:34,000
ever changing while effort turning

534
00:21:34,000 --> 00:21:37,760
on thunderbolt security again

535
00:21:39,679 --> 00:21:42,720
so to summarize uh the cerner spy

536
00:21:42,720 --> 00:21:45,280
attack methods can be divided in two

537
00:21:45,280 --> 00:21:46,720
categories

538
00:21:46,720 --> 00:21:49,760
um so the first attack method requires

539
00:21:49,760 --> 00:21:51,840
only brief access to the laptop

540
00:21:51,840 --> 00:21:54,480
only five minutes to reprogram the host

541
00:21:54,480 --> 00:21:56,080
controller firmware

542
00:21:56,080 --> 00:22:00,400
uh it does not require any access to

543
00:22:00,400 --> 00:22:03,679
victim devices attack method 2 is kind

544
00:22:03,679 --> 00:22:04,080
of the

545
00:22:04,080 --> 00:22:06,720
inverse so it does not require

546
00:22:06,720 --> 00:22:08,799
reprogramming else controller framework

547
00:22:08,799 --> 00:22:10,720
but it only requires five minutes of

548
00:22:10,720 --> 00:22:12,559
physical access to

549
00:22:12,559 --> 00:22:14,240
one of the uh victims thunderbolt

550
00:22:14,240 --> 00:22:15,919
devices

551
00:22:15,919 --> 00:22:18,640
so the impact for both is really much

552
00:22:18,640 --> 00:22:21,039
the same so you get

553
00:22:21,039 --> 00:22:24,000
unrestricted reading my memory access

554
00:22:24,000 --> 00:22:25,600
you can access data from encrypted

555
00:22:25,600 --> 00:22:26,720
drives

556
00:22:26,720 --> 00:22:29,360
and to enable persistent access you can

557
00:22:29,360 --> 00:22:31,679
exploit vulnerability 6

558
00:22:31,679 --> 00:22:34,320
or you can install rootkits to remove

559
00:22:34,320 --> 00:22:38,639
the dependency on some spy altogether

560
00:22:39,200 --> 00:22:41,679
right so here's a demo uh where we show

561
00:22:41,679 --> 00:22:43,520
attack monster warning practice

562
00:22:43,520 --> 00:22:46,000
so what we have here is a lenovo p1

563
00:22:46,000 --> 00:22:48,400
which was purchased last year

564
00:22:48,400 --> 00:22:52,720
and as you can see it's in sleep mode

565
00:22:52,960 --> 00:22:56,240
yes it's been locked so

566
00:22:56,240 --> 00:22:59,600
um i don't know the password

567
00:22:59,600 --> 00:23:02,159
and the password isn't empty either as

568
00:23:02,159 --> 00:23:03,520
you can see

569
00:23:03,520 --> 00:23:06,320
so that's all good

570
00:23:07,200 --> 00:23:09,520
what we're gonna do now is turn over the

571
00:23:09,520 --> 00:23:11,600
laptop so that we can reach the back

572
00:23:11,600 --> 00:23:13,918
plate

573
00:23:14,400 --> 00:23:19,760
and we unscrew the back plate

574
00:23:21,600 --> 00:23:25,039
right there we go so

575
00:23:25,039 --> 00:23:27,039
now i'm going to attach my spy

576
00:23:27,039 --> 00:23:28,720
programmer which is a

577
00:23:28,720 --> 00:23:32,080
device called boss pirate and

578
00:23:32,080 --> 00:23:34,480
it allows me to interface with the spy

579
00:23:34,480 --> 00:23:36,159
flash that is storing

580
00:23:36,159 --> 00:23:40,400
the thunderbolt controller firmware

581
00:23:40,559 --> 00:23:43,200
so attaching the bus pirate to my

582
00:23:43,200 --> 00:23:45,279
attacker laptop

583
00:23:45,279 --> 00:23:47,600
and now we're going to use a tool called

584
00:23:47,600 --> 00:23:48,640
flash rom

585
00:23:48,640 --> 00:23:54,400
to get the firmware from the spy flash

586
00:23:54,720 --> 00:23:57,440
right so now i have a dump and i'm going

587
00:23:57,440 --> 00:23:58,799
to feed that dump to

588
00:23:58,799 --> 00:24:00,880
a tool that i wrote which is called

589
00:24:00,880 --> 00:24:04,559
thunderbolt controller firmware patcher

590
00:24:04,559 --> 00:24:07,520
and so as you can see apparently the

591
00:24:07,520 --> 00:24:08,799
thunderbolt controller is set to

592
00:24:08,799 --> 00:24:10,159
security level one

593
00:24:10,159 --> 00:24:12,720
which is the default security level on

594
00:24:12,720 --> 00:24:15,520
all thunderbolt laptops

595
00:24:15,520 --> 00:24:18,559
and i'm patching it now to an insecure

596
00:24:18,559 --> 00:24:22,000
state and so as you can see

597
00:24:22,000 --> 00:24:25,200
it says sl0 which means all thunderbolt

598
00:24:25,200 --> 00:24:26,000
security

599
00:24:26,000 --> 00:24:29,279
is disabled now we're going to

600
00:24:29,279 --> 00:24:34,799
write back the firmware to the spyflash

601
00:24:35,200 --> 00:24:37,039
now this might take a bit because

602
00:24:37,039 --> 00:24:38,240
flashrom will be

603
00:24:38,240 --> 00:24:41,440
trying various methods to

604
00:24:41,440 --> 00:24:47,600
program the spy flash

605
00:24:47,600 --> 00:24:50,720
and as you can see eventually

606
00:24:50,720 --> 00:24:54,240
it will succeed

607
00:24:58,400 --> 00:25:01,919
okay so um now we've written

608
00:25:01,919 --> 00:25:05,360
our custom firmware to the spy flash

609
00:25:05,360 --> 00:25:09,039
and we're detaching the spy programmer

610
00:25:09,039 --> 00:25:12,840
and putting back the back plate onto the

611
00:25:12,840 --> 00:25:15,840
laptop

612
00:25:24,960 --> 00:25:28,240
turning over the laptop

613
00:25:28,240 --> 00:25:31,279
and opening it up

614
00:25:31,279 --> 00:25:34,640
now as you can see it's still up and

615
00:25:34,640 --> 00:25:36,880
running

616
00:25:36,880 --> 00:25:42,880
you still cannot get into the laptop

617
00:25:42,880 --> 00:25:45,760
and here i'm attaching my thunderbolt

618
00:25:45,760 --> 00:25:46,320
based

619
00:25:46,320 --> 00:25:49,200
attacker device

620
00:25:54,400 --> 00:25:57,520
now what you see here is a device that

621
00:25:57,520 --> 00:25:59,200
will be attacking the

622
00:25:59,200 --> 00:26:01,919
laptop and we're going to use that

623
00:26:01,919 --> 00:26:04,559
device with the dma attack tool called

624
00:26:04,559 --> 00:26:09,039
pci leach developed by o frisk

625
00:26:09,279 --> 00:26:13,760
and here i'm loading a

626
00:26:13,760 --> 00:26:17,120
kernel module into the memory of the

627
00:26:17,120 --> 00:26:17,840
laptop

628
00:26:17,840 --> 00:26:22,840
which allows me to bypass windows lock

629
00:26:22,840 --> 00:26:24,400
screen

630
00:26:24,400 --> 00:26:27,440
we're entering no password and there we

631
00:26:27,440 --> 00:26:28,400
go

632
00:26:28,400 --> 00:26:31,760
we can get into the laptop

633
00:26:31,760 --> 00:26:33,279
all right so uh let's recap the

634
00:26:33,279 --> 00:26:35,120
thunderbolt security levels

635
00:26:35,120 --> 00:26:36,960
um on the left we see the public

636
00:26:36,960 --> 00:26:38,480
definition

637
00:26:38,480 --> 00:26:40,480
now let's talk about what we actually

638
00:26:40,480 --> 00:26:42,880
found it to mean

639
00:26:42,880 --> 00:26:45,679
so so one device authorization based on

640
00:26:45,679 --> 00:26:48,320
uuid

641
00:26:48,400 --> 00:26:52,000
well this uid it's not really so unique

642
00:26:52,000 --> 00:26:54,880
because you can spoof them and no the

643
00:26:54,880 --> 00:26:58,640
uuid is not actually fused in silicon

644
00:26:58,640 --> 00:27:02,240
now so2 adds challenge response

645
00:27:02,240 --> 00:27:05,520
sure that could work but well you can

646
00:27:05,520 --> 00:27:06,159
simply

647
00:27:06,159 --> 00:27:10,080
copy the keys from the device five flash

648
00:27:10,080 --> 00:27:12,799
um there's sl3 disabling our

649
00:27:12,799 --> 00:27:13,440
thunderbolts

650
00:27:13,440 --> 00:27:16,799
connectivity granted that would work

651
00:27:16,799 --> 00:27:18,000
against

652
00:27:18,000 --> 00:27:21,120
cloning thunderbolt devices but

653
00:27:21,120 --> 00:27:22,960
when the attacker gets a hold of the

654
00:27:22,960 --> 00:27:26,240
laptop all they would have to do is

655
00:27:26,240 --> 00:27:28,640
reprogram the host control firmware to

656
00:27:28,640 --> 00:27:32,720
disable thunderbolt security entirely

657
00:27:32,880 --> 00:27:36,320
so4 was a bit bustling to us because

658
00:27:36,320 --> 00:27:39,120
uh really all you would have to do is

659
00:27:39,120 --> 00:27:40,399
well simply unplug an

660
00:27:40,399 --> 00:27:42,640
existing device or just pick another

661
00:27:42,640 --> 00:27:44,480
thunderbolt port

662
00:27:44,480 --> 00:27:47,520
and reboot protection well all security

663
00:27:47,520 --> 00:27:48,399
levels are

664
00:27:48,399 --> 00:27:51,440
broken so yeah they this production

665
00:27:51,440 --> 00:27:54,480
really has no effect

666
00:27:55,120 --> 00:27:57,279
so like you've seen in the demo i use

667
00:27:57,279 --> 00:27:58,640
the tool that i wrote

668
00:27:58,640 --> 00:28:00,640
thunderbolt controller firmware aperture

669
00:28:00,640 --> 00:28:02,480
you can actually have a look yourself

670
00:28:02,480 --> 00:28:05,520
it's up on my github repo and there's

671
00:28:05,520 --> 00:28:06,960
spy block which light

672
00:28:06,960 --> 00:28:09,440
allows you to toggle on flashlight

673
00:28:09,440 --> 00:28:10,640
protection

674
00:28:10,640 --> 00:28:16,720
and you can also get it from github

675
00:28:16,720 --> 00:28:19,840
so let's talk about uh affected systems

676
00:28:19,840 --> 00:28:22,159
um all thunderbolt liquid systems

677
00:28:22,159 --> 00:28:23,520
shipped between 2011

678
00:28:23,520 --> 00:28:26,640
and today are vulnerable um this

679
00:28:26,640 --> 00:28:28,720
definitely applies to all pcs

680
00:28:28,720 --> 00:28:31,679
for at least between 2011 and 2018 they

681
00:28:31,679 --> 00:28:34,159
are fully vulnerable

682
00:28:34,159 --> 00:28:36,480
all max running arenas and linux are as

683
00:28:36,480 --> 00:28:38,000
well

684
00:28:38,000 --> 00:28:41,200
now some systems that provide kernel dma

685
00:28:41,200 --> 00:28:43,279
protection

686
00:28:43,279 --> 00:28:46,000
they are partially vulnerable and we'll

687
00:28:46,000 --> 00:28:48,559
be talking about them uh in a bit

688
00:28:48,559 --> 00:28:51,760
um macross is partially vulnerable

689
00:28:51,760 --> 00:28:55,440
so really you should

690
00:28:56,399 --> 00:28:58,320
verify whether your system is runnable

691
00:28:58,320 --> 00:28:59,760
using ir spy check

692
00:28:59,760 --> 00:29:02,240
or by following the manual verification

693
00:29:02,240 --> 00:29:05,360
steps on our website

694
00:29:05,840 --> 00:29:08,480
right so intel's response to thunderspy

695
00:29:08,480 --> 00:29:10,080
was

696
00:29:10,080 --> 00:29:12,880
kernel dna protection so this was quite

697
00:29:12,880 --> 00:29:13,760
underwhelming

698
00:29:13,760 --> 00:29:17,200
and i'll be showing a bit why that is

699
00:29:17,200 --> 00:29:20,880
so kernel ema protection is an opt-in

700
00:29:20,880 --> 00:29:22,960
dma remapping measure for refundable

701
00:29:22,960 --> 00:29:24,080
devices

702
00:29:24,080 --> 00:29:27,200
and according to intel all you need is a

703
00:29:27,200 --> 00:29:28,640
windows 10 atm3

704
00:29:28,640 --> 00:29:33,760
or later or an up-to-date linux kernel

705
00:29:34,320 --> 00:29:36,799
so let's have a look how that works well

706
00:29:36,799 --> 00:29:38,480
normally when a

707
00:29:38,480 --> 00:29:41,600
device does tma to the host it does that

708
00:29:41,600 --> 00:29:42,960
directly to the i o

709
00:29:42,960 --> 00:29:46,399
addressable region and when

710
00:29:46,399 --> 00:29:48,799
kernel dma protection is enabled there's

711
00:29:48,799 --> 00:29:49,840
an iu mmu

712
00:29:49,840 --> 00:29:53,360
in between so devices malicious

713
00:29:53,360 --> 00:29:56,240
and legitimate alike cannot read or

714
00:29:56,240 --> 00:29:58,720
write at science outside the boundaries

715
00:29:58,720 --> 00:30:03,200
which have been said by this iowa mmu

716
00:30:03,200 --> 00:30:06,320
so all in all that sounds pretty good

717
00:30:06,320 --> 00:30:09,279
but there are a couple of caveats

718
00:30:09,279 --> 00:30:11,520
current email protection is a partial

719
00:30:11,520 --> 00:30:13,520
mitigation only

720
00:30:13,520 --> 00:30:17,039
um specifically it does not mitigate

721
00:30:17,039 --> 00:30:20,000
thunderspy vulnerabilities one two three

722
00:30:20,000 --> 00:30:20,720
um so

723
00:30:20,720 --> 00:30:23,200
this really exposes the system to a bad

724
00:30:23,200 --> 00:30:24,320
usb style of

725
00:30:24,320 --> 00:30:27,440
attacks now most importantly

726
00:30:27,440 --> 00:30:31,039
um it not only requires an iomu but also

727
00:30:31,039 --> 00:30:34,000
bias support and we found that this

728
00:30:34,000 --> 00:30:37,039
biosupport is only exclusively available

729
00:30:37,039 --> 00:30:40,080
on systems not all systems but

730
00:30:40,080 --> 00:30:43,120
some systems that ship since

731
00:30:43,120 --> 00:30:46,799
2019 so basically what intel is saying

732
00:30:46,799 --> 00:30:51,200
well you know just buy a new laptop

733
00:30:51,200 --> 00:30:54,480
well basically that means that

734
00:30:54,480 --> 00:30:57,519
about eight years worth of systems

735
00:30:57,519 --> 00:31:00,399
remain vulnerable to thunderspy forever

736
00:31:00,399 --> 00:31:02,480
and this really didn't make sense to me

737
00:31:02,480 --> 00:31:04,799
because a lot of these systems feature

738
00:31:04,799 --> 00:31:06,159
an iomu

739
00:31:06,159 --> 00:31:08,320
so technically they are capable of

740
00:31:08,320 --> 00:31:10,880
supporting dma remapping

741
00:31:10,880 --> 00:31:13,120
so what we're releasing today is

742
00:31:13,120 --> 00:31:14,399
thunderspy 2

743
00:31:14,399 --> 00:31:17,120
which is not an attack but a proof of

744
00:31:17,120 --> 00:31:18,480
concept

745
00:31:18,480 --> 00:31:21,200
uh protection that brings current email

746
00:31:21,200 --> 00:31:22,080
protection to

747
00:31:22,080 --> 00:31:24,720
roughly six years workflow systems so it

748
00:31:24,720 --> 00:31:25,200
includes

749
00:31:25,200 --> 00:31:28,640
all systems that have an iomu

750
00:31:28,640 --> 00:31:32,720
including if they provide thunderbolt2

751
00:31:32,720 --> 00:31:34,399
and the first implementation that we'll

752
00:31:34,399 --> 00:31:36,320
be re releasing is

753
00:31:36,320 --> 00:31:40,159
an experimental uefi extension

754
00:31:40,159 --> 00:31:43,279
uh just drop it in on your efi

755
00:31:43,279 --> 00:31:45,760
system petition and it will work with

756
00:31:45,760 --> 00:31:46,799
windows 10

757
00:31:46,799 --> 00:31:50,480
and recent linux kernels

758
00:31:50,480 --> 00:31:52,480
now the protection level that it

759
00:31:52,480 --> 00:31:53,600
provides is

760
00:31:53,600 --> 00:31:56,720
similar to officially supported

761
00:31:56,720 --> 00:32:01,440
systems it does not protect against

762
00:32:01,440 --> 00:32:03,760
boot time attacks but screen locking and

763
00:32:03,760 --> 00:32:07,440
sleep mode are again covered

764
00:32:08,640 --> 00:32:12,399
if you're using linux well

765
00:32:12,399 --> 00:32:14,159
we're working with the linux kernel

766
00:32:14,159 --> 00:32:16,559
hardware security team to

767
00:32:16,559 --> 00:32:18,960
bring kernel level uh mitigations to

768
00:32:18,960 --> 00:32:20,159
thunderspy

769
00:32:20,159 --> 00:32:22,799
and meanwhile english users can use the

770
00:32:22,799 --> 00:32:23,760
thunderspy 2

771
00:32:23,760 --> 00:32:26,960
uefi extension

772
00:32:27,440 --> 00:32:29,279
when you're using secure boot you can

773
00:32:29,279 --> 00:32:31,519
sign it using your own keys

774
00:32:31,519 --> 00:32:33,519
and you can buy can combine it with

775
00:32:33,519 --> 00:32:34,960
measured boot

776
00:32:34,960 --> 00:32:39,679
for example heads for additional

777
00:32:40,840 --> 00:32:42,159
security

778
00:32:42,159 --> 00:32:45,679
so um we're now going to show a demo

779
00:32:45,679 --> 00:32:49,279
of thunderspy 2 but applied onto a

780
00:32:49,279 --> 00:32:52,640
unsupported machine this is a dell xps

781
00:32:52,640 --> 00:32:53,279
15

782
00:32:53,279 --> 00:32:56,799
purchased in 2018 now there have been no

783
00:32:56,799 --> 00:32:58,880
vendor updates that enable kernel dma

784
00:32:58,880 --> 00:33:00,399
protection onto this model

785
00:33:00,399 --> 00:33:03,519
so we've applied thunderspy 2.

786
00:33:03,519 --> 00:33:06,000
now when we have a look at ms intel 32

787
00:33:06,000 --> 00:33:08,159
it indeed says kernel drain protection

788
00:33:08,159 --> 00:33:10,000
has been enabled

789
00:33:10,000 --> 00:33:12,880
so we locked the screen and now we're

790
00:33:12,880 --> 00:33:14,799
going to attach our thunderbolt attacker

791
00:33:14,799 --> 00:33:16,720
device

792
00:33:16,720 --> 00:33:18,480
and then we'll attempt to perform our

793
00:33:18,480 --> 00:33:20,240
dma attack

794
00:33:20,240 --> 00:33:23,200
against the laptop

795
00:33:23,600 --> 00:33:25,760
now windows has detected what it calls a

796
00:33:25,760 --> 00:33:27,679
driver dma violation

797
00:33:27,679 --> 00:33:29,519
which means it caught us reading outside

798
00:33:29,519 --> 00:33:31,519
the memory range assigned by the audio

799
00:33:31,519 --> 00:33:32,480
mmu

800
00:33:32,480 --> 00:33:34,880
so kernel dna protection is working as

801
00:33:34,880 --> 00:33:37,120
intended

802
00:33:37,120 --> 00:33:38,720
so what's next for the future of

803
00:33:38,720 --> 00:33:41,120
thunderbolt based interconnects

804
00:33:41,120 --> 00:33:43,440
um well a number of issues remain

805
00:33:43,440 --> 00:33:44,799
unaddressed

806
00:33:44,799 --> 00:33:46,159
starting with thunderbolt

807
00:33:46,159 --> 00:33:48,320
vulnerabilities one two three

808
00:33:48,320 --> 00:33:52,000
um there's really no means

809
00:33:52,000 --> 00:33:55,679
to distinguish between um legitimate and

810
00:33:55,679 --> 00:33:57,120
forced d-roms so

811
00:33:57,120 --> 00:33:59,120
the fighters could look physically okay

812
00:33:59,120 --> 00:34:00,240
to the user

813
00:34:00,240 --> 00:34:03,840
but they could still be tampered with um

814
00:34:03,840 --> 00:34:07,760
and well kernel dma protection is

815
00:34:07,760 --> 00:34:10,960
implemented as a replacement to security

816
00:34:10,960 --> 00:34:11,520
levels

817
00:34:11,520 --> 00:34:15,839
by intel and a side effect of kernel dma

818
00:34:15,839 --> 00:34:17,520
protection is that when you connect a

819
00:34:17,520 --> 00:34:18,480
device

820
00:34:18,480 --> 00:34:22,079
this device will be immediately

821
00:34:22,079 --> 00:34:24,719
given pcie tunneling without actually

822
00:34:24,719 --> 00:34:26,639
interacting with the user

823
00:34:26,639 --> 00:34:29,839
so um yes it does protect against dma

824
00:34:29,839 --> 00:34:32,159
attacks but it does not protect against

825
00:34:32,159 --> 00:34:33,280
for example

826
00:34:33,280 --> 00:34:36,560
a malicious device spoofing pcie ids to

827
00:34:36,560 --> 00:34:37,520
attack

828
00:34:37,520 --> 00:34:40,719
vulnerable drivers does not protect

829
00:34:40,719 --> 00:34:41,280
against

830
00:34:41,280 --> 00:34:44,480
tlp source ids spoofing

831
00:34:44,480 --> 00:34:48,239
so yeah these are important issues to

832
00:34:48,239 --> 00:34:51,679
uh have a look at and they probably

833
00:34:51,679 --> 00:34:54,800
affect both usb and thunderbolt 4. now

834
00:34:54,800 --> 00:34:57,200
for thunderbolt 4 we know that

835
00:34:57,200 --> 00:34:59,119
intel will now require kernel ema

836
00:34:59,119 --> 00:35:00,480
protection

837
00:35:00,480 --> 00:35:02,880
uh to mitigate thunderspy so the good

838
00:35:02,880 --> 00:35:05,040
news is if you buy a system with

839
00:35:05,040 --> 00:35:06,160
thunderbolt 4

840
00:35:06,160 --> 00:35:08,800
you are guaranteed to have kernel dma

841
00:35:08,800 --> 00:35:10,560
protection

842
00:35:10,560 --> 00:35:14,400
um but still backward compatibility

843
00:35:14,400 --> 00:35:17,599
likely means that

844
00:35:17,599 --> 00:35:19,760
both used before and thunderbolt 4 will

845
00:35:19,760 --> 00:35:22,240
still be affected by the issues that

846
00:35:22,240 --> 00:35:25,040
we mentioned here

847
00:35:26,320 --> 00:35:29,119
now there are some ways to potentially

848
00:35:29,119 --> 00:35:30,560
mitigate these remaining

849
00:35:30,560 --> 00:35:32,880
issues um while starting with the

850
00:35:32,880 --> 00:35:35,040
thunders5 vulnerabilities

851
00:35:35,040 --> 00:35:37,119
essentially everything is in there in

852
00:35:37,119 --> 00:35:39,200
the firmware to

853
00:35:39,200 --> 00:35:41,920
fix this issue there is a public key and

854
00:35:41,920 --> 00:35:43,040
a digest

855
00:35:43,040 --> 00:35:45,839
so all what that intel would need to do

856
00:35:45,839 --> 00:35:47,520
is

857
00:35:47,520 --> 00:35:50,320
share the scope of the digest and then

858
00:35:50,320 --> 00:35:50,800
uh

859
00:35:50,800 --> 00:35:53,440
the driver uefi could verify firmware

860
00:35:53,440 --> 00:35:55,200
authenticity

861
00:35:55,200 --> 00:36:00,319
before enabling pcie access

862
00:36:00,720 --> 00:36:05,279
now regarding kernel ema protection um

863
00:36:05,359 --> 00:36:09,119
well in the interest of practical use i

864
00:36:09,119 --> 00:36:09,760
would say

865
00:36:09,760 --> 00:36:12,640
it's okay to all allow all dma devices

866
00:36:12,640 --> 00:36:13,599
on boot

867
00:36:13,599 --> 00:36:16,720
but during hours run time i would

868
00:36:16,720 --> 00:36:19,440
initially suggest to null route all new

869
00:36:19,440 --> 00:36:20,960
dma devices

870
00:36:20,960 --> 00:36:24,800
so you actually don't assign

871
00:36:24,800 --> 00:36:27,839
any i o range just yet

872
00:36:27,839 --> 00:36:30,320
and then you require screen unlocking

873
00:36:30,320 --> 00:36:32,960
and explicit user authorization

874
00:36:32,960 --> 00:36:35,680
and only at that point you can have the

875
00:36:35,680 --> 00:36:36,800
i o mmu

876
00:36:36,800 --> 00:36:41,119
assign an io memory range

877
00:36:41,119 --> 00:36:44,000
now to counter vulnerabilities in

878
00:36:44,000 --> 00:36:46,160
drivers

879
00:36:46,160 --> 00:36:48,400
you could use virtualization based

880
00:36:48,400 --> 00:36:49,359
security

881
00:36:49,359 --> 00:36:51,119
i think microsoft is currently working

882
00:36:51,119 --> 00:36:54,240
on that with kernel data protection and

883
00:36:54,240 --> 00:36:56,000
i could see the linux kernel doing this

884
00:36:56,000 --> 00:36:57,760
in the future as well

885
00:36:57,760 --> 00:37:00,480
and finally to counter tlp source id

886
00:37:00,480 --> 00:37:01,280
spoofing

887
00:37:01,280 --> 00:37:04,240
um i would suggest that the thunderbolt

888
00:37:04,240 --> 00:37:05,280
controller

889
00:37:05,280 --> 00:37:08,400
implements a sec mechanism such as

890
00:37:08,400 --> 00:37:10,240
specie acs

891
00:37:10,240 --> 00:37:13,839
so just simply enumerating all

892
00:37:13,839 --> 00:37:15,680
downstream devices

893
00:37:15,680 --> 00:37:18,560
and then verifying that the tlp source

894
00:37:18,560 --> 00:37:20,000
id

895
00:37:20,000 --> 00:37:23,280
matches any of those devices

896
00:37:23,280 --> 00:37:25,920
now finally for use before of course it

897
00:37:25,920 --> 00:37:28,160
would be a good idea to implement a uv

898
00:37:28,160 --> 00:37:29,599
fight toggle

899
00:37:29,599 --> 00:37:32,800
that controls ceiling signaling but well

900
00:37:32,800 --> 00:37:34,320
i don't know if anyone from intel is

901
00:37:34,320 --> 00:37:35,440
watching but

902
00:37:35,440 --> 00:37:38,160
when you do please maintain the state in

903
00:37:38,160 --> 00:37:41,040
the bias only

904
00:37:42,240 --> 00:37:43,599
so the takeaway that i would like to

905
00:37:43,599 --> 00:37:45,359
give you is that

906
00:37:45,359 --> 00:37:46,960
well thunderspy is a new class of

907
00:37:46,960 --> 00:37:48,960
vulnerabilities breaking thunderbolt

908
00:37:48,960 --> 00:37:50,240
security

909
00:37:50,240 --> 00:37:53,920
um there's no fix from intel um

910
00:37:53,920 --> 00:37:55,760
so really check if your system is

911
00:37:55,760 --> 00:37:57,839
vulnerable using spy check

912
00:37:57,839 --> 00:38:01,680
or verify uh using the steps listed on

913
00:38:01,680 --> 00:38:02,960
our website

914
00:38:02,960 --> 00:38:05,280
there's the full vulnerability report as

915
00:38:05,280 --> 00:38:08,000
well if in case you're interested

916
00:38:08,000 --> 00:38:11,280
thunderspy 2 is not an attack but

917
00:38:11,280 --> 00:38:14,320
an experimental protection

918
00:38:14,320 --> 00:38:17,760
which shows that laptops that have an

919
00:38:17,760 --> 00:38:19,040
immune

920
00:38:19,040 --> 00:38:21,839
but no kernel dma protection are

921
00:38:21,839 --> 00:38:23,839
technically capable of supporting this

922
00:38:23,839 --> 00:38:25,680
protection

923
00:38:25,680 --> 00:38:28,160
and the first implementation that we're

924
00:38:28,160 --> 00:38:29,599
releasing today

925
00:38:29,599 --> 00:38:33,200
is a uefi extension

926
00:38:33,200 --> 00:38:36,240
now whether we like it or not the future

927
00:38:36,240 --> 00:38:39,520
is apparently pci express so

928
00:38:39,520 --> 00:38:41,680
that really allows some some nice use

929
00:38:41,680 --> 00:38:43,359
cases but

930
00:38:43,359 --> 00:38:47,040
for usb4 and thunderbolt 4

931
00:38:47,040 --> 00:38:49,680
well adequate protection schemes are

932
00:38:49,680 --> 00:38:50,160
remain

933
00:38:50,160 --> 00:38:53,359
absent for now so i hope that

934
00:38:53,359 --> 00:38:55,680
when these technologies end up in

935
00:38:55,680 --> 00:38:57,680
consumer products

936
00:38:57,680 --> 00:39:00,800
the issues that we've mentioned here

937
00:39:00,800 --> 00:39:03,599
will be addressed

938
00:39:04,320 --> 00:39:06,880
right so that's it for today if you have

939
00:39:06,880 --> 00:39:08,480
any questions you can reach me on

940
00:39:08,480 --> 00:39:09,119
twitter

941
00:39:09,119 --> 00:39:11,760
or just ask me here in the q a thank you

942
00:39:11,760 --> 00:39:15,760
for joining

943
00:39:15,760 --> 00:39:18,400
hi all thank you for watching um before

944
00:39:18,400 --> 00:39:21,200
moving to the q a i'd like to make an

945
00:39:21,200 --> 00:39:22,880
announcement a little update to

946
00:39:22,880 --> 00:39:24,400
thunderspy 2.

947
00:39:24,400 --> 00:39:27,119
um as part of thunderspy 2 we're

948
00:39:27,119 --> 00:39:29,440
presenting two options today

949
00:39:29,440 --> 00:39:31,680
that aim to bring kernel ema protection

950
00:39:31,680 --> 00:39:34,320
to thunderbolt equipped systems that do

951
00:39:34,320 --> 00:39:35,119
not ship

952
00:39:35,119 --> 00:39:37,599
current dma protection but do satisfy

953
00:39:37,599 --> 00:39:38,240
all

954
00:39:38,240 --> 00:39:42,320
hardware and firmware requirements so um

955
00:39:42,320 --> 00:39:46,240
this should uh well basically

956
00:39:46,240 --> 00:39:47,760
bring current email protect you to

957
00:39:47,760 --> 00:39:50,880
roughly six years worth of systems

958
00:39:50,880 --> 00:39:53,440
um if you're interested in helping out

959
00:39:53,440 --> 00:39:54,560
in testing our

960
00:39:54,560 --> 00:39:56,400
experimental patch it's available on our

961
00:39:56,400 --> 00:39:58,839
website right now

962
00:39:58,839 --> 00:40:02,400
thunderspy.io and uh well we would very

963
00:40:02,400 --> 00:40:05,359
much appreciate your feedback

964
00:40:05,359 --> 00:40:10,880
so moving on to the questions

965
00:40:10,880 --> 00:40:12,800
um so i'm reading the question if the

966
00:40:12,800 --> 00:40:14,800
system doesn't have an iomu

967
00:40:14,800 --> 00:40:17,040
is there any mitigation short of

968
00:40:17,040 --> 00:40:18,400
entirely assuming

969
00:40:18,400 --> 00:40:23,119
disabling thunderbolt um

970
00:40:23,119 --> 00:40:27,119
well um no i would say no

971
00:40:27,119 --> 00:40:30,079
um basically uh there are fundamental

972
00:40:30,079 --> 00:40:31,520
issues with thunderbolt device

973
00:40:31,520 --> 00:40:33,359
authentication

974
00:40:33,359 --> 00:40:36,400
and uh well

975
00:40:36,400 --> 00:40:38,240
that basically defeats the only

976
00:40:38,240 --> 00:40:39,599
protection scheme that

977
00:40:39,599 --> 00:40:43,359
intel provides on uh all systems

978
00:40:43,359 --> 00:40:46,800
released before 2019 uh so

979
00:40:46,800 --> 00:40:49,839
the security levels that we discussed in

980
00:40:49,839 --> 00:40:53,200
the presentation and

981
00:40:53,200 --> 00:40:56,640
thunderspy breaks these security levels

982
00:40:56,640 --> 00:40:59,920
with the root cause being thunderbolt

983
00:40:59,920 --> 00:41:02,079
device authentication not working

984
00:41:02,079 --> 00:41:04,160
so unfortunately no if the system

985
00:41:04,160 --> 00:41:06,400
doesn't have an rmmu

986
00:41:06,400 --> 00:41:10,640
there is nothing we can do except

987
00:41:10,640 --> 00:41:13,119
maybe waiting for intel to change their

988
00:41:13,119 --> 00:41:15,280
minds and

989
00:41:15,280 --> 00:41:18,640
well maybe bringing a

990
00:41:18,640 --> 00:41:21,839
software work around for this

991
00:41:22,960 --> 00:41:24,640
okay i'm hearing that we're gonna need

992
00:41:24,640 --> 00:41:26,319
to wrap it up so if you have any more

993
00:41:26,319 --> 00:41:26,960
questions

994
00:41:26,960 --> 00:41:29,920
um please ask them in the chat or just

995
00:41:29,920 --> 00:41:30,960
uh

996
00:41:30,960 --> 00:41:33,680
well you can reach me on twitter as well

997
00:41:33,680 --> 00:41:37,759
thank you

