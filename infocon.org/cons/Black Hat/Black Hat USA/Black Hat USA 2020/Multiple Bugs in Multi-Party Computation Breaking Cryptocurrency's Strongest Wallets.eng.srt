1
00:00:03,920 --> 00:00:15,599
[Music]

2
00:00:15,599 --> 00:00:16,320
welcome to

3
00:00:16,320 --> 00:00:18,480
our talk we're going to present new

4
00:00:18,480 --> 00:00:21,039
attacks on cryptocurrency wallets

5
00:00:21,039 --> 00:00:22,720
that is a joint presentation with omar

6
00:00:22,720 --> 00:00:24,480
shawmovis who discovered most of the

7
00:00:24,480 --> 00:00:25,199
attacks that

8
00:00:25,199 --> 00:00:27,359
we're going to present today so we both

9
00:00:27,359 --> 00:00:28,720
have experience with

10
00:00:28,720 --> 00:00:30,960
enterprise wallets and we're both

11
00:00:30,960 --> 00:00:31,760
interested

12
00:00:31,760 --> 00:00:34,000
by auditing the security of specialty

13
00:00:34,000 --> 00:00:34,800
crypto

14
00:00:34,800 --> 00:00:37,839
and npc product

15
00:00:38,000 --> 00:00:40,719
so let's start with the basic notions we

16
00:00:40,719 --> 00:00:42,079
only have so much time

17
00:00:42,079 --> 00:00:45,360
so first of all what is a wallet

18
00:00:45,360 --> 00:00:47,760
so a wallet is the way to protect your

19
00:00:47,760 --> 00:00:48,800
digital assets

20
00:00:48,800 --> 00:00:50,879
your cryptocurrency anything that runs

21
00:00:50,879 --> 00:00:52,000
on a blockchain

22
00:00:52,000 --> 00:00:54,239
so as you may know you do not literally

23
00:00:54,239 --> 00:00:56,960
store bitcoins as piece of data

24
00:00:56,960 --> 00:01:00,239
instead you store the private keys that

25
00:01:00,239 --> 00:01:02,719
you will use to issue a transaction

26
00:01:02,719 --> 00:01:05,040
so if you lose access to this private

27
00:01:05,040 --> 00:01:06,640
key you lose access to your money and if

28
00:01:06,640 --> 00:01:07,520
someone sees

29
00:01:07,520 --> 00:01:09,439
your private key then they can spend

30
00:01:09,439 --> 00:01:11,280
your money so you want to product this

31
00:01:11,280 --> 00:01:13,040
uh private key

32
00:01:13,040 --> 00:01:14,640
there are different types of wallets you

33
00:01:14,640 --> 00:01:16,320
might be familiar with mobile wireless

34
00:01:16,320 --> 00:01:17,600
that's run on mobile phones

35
00:01:17,600 --> 00:01:20,240
on online wallets which are essentially

36
00:01:20,240 --> 00:01:21,600
web applications

37
00:01:21,600 --> 00:01:24,000
uh on the hardware orders such as ledger

38
00:01:24,000 --> 00:01:26,000
of twitter devices which provide you

39
00:01:26,000 --> 00:01:28,960
quite higher security and with paperwork

40
00:01:28,960 --> 00:01:30,720
when you print out your key and you put

41
00:01:30,720 --> 00:01:32,720
it in the safe somewhere

42
00:01:32,720 --> 00:01:34,320
so enterprise what i've seen

43
00:01:34,320 --> 00:01:36,479
specifically was used by banks and

44
00:01:36,479 --> 00:01:38,159
financial institutions they have

45
00:01:38,159 --> 00:01:39,520
slightly different needs that we

46
00:01:39,520 --> 00:01:41,759
described on this slide maybe the the

47
00:01:41,759 --> 00:01:43,840
biggest one is the security and privacy

48
00:01:43,840 --> 00:01:45,119
requirement

49
00:01:45,119 --> 00:01:47,040
because if you're bank and you store

50
00:01:47,040 --> 00:01:49,119
hundreds of millions of data

51
00:01:49,119 --> 00:01:51,759
and you're regulated by some regulatory

52
00:01:51,759 --> 00:01:52,799
body in your country

53
00:01:52,799 --> 00:01:56,240
and are audited by auditors and you want

54
00:01:56,240 --> 00:01:57,600
to protect you have to protect the

55
00:01:57,600 --> 00:01:59,439
privacy of your customers

56
00:01:59,439 --> 00:02:00,960
this makes things slightly more

57
00:02:00,960 --> 00:02:02,079
complicated and slightly more

58
00:02:02,079 --> 00:02:03,280
interesting

59
00:02:03,280 --> 00:02:05,360
so one of the things you have to do is

60
00:02:05,360 --> 00:02:06,719
distribute trust

61
00:02:06,719 --> 00:02:09,038
so for example in switzerland there's a

62
00:02:09,038 --> 00:02:09,758
regulation

63
00:02:09,758 --> 00:02:12,879
called 4i control which means that when

64
00:02:12,879 --> 00:02:13,200
you

65
00:02:13,200 --> 00:02:15,599
do certain type of transaction you need

66
00:02:15,599 --> 00:02:16,560
at least

67
00:02:16,560 --> 00:02:18,239
two or three people to participate to

68
00:02:18,239 --> 00:02:19,599
give their approval

69
00:02:19,599 --> 00:02:21,599
so in the context of cryptocurrency it

70
00:02:21,599 --> 00:02:23,440
means that you have you need

71
00:02:23,440 --> 00:02:24,640
different parties with different

72
00:02:24,640 --> 00:02:26,879
credentials different access rights

73
00:02:26,879 --> 00:02:29,200
to authorize a transaction and more

74
00:02:29,200 --> 00:02:31,440
generally you want to distribute trust

75
00:02:31,440 --> 00:02:33,200
between different software hardware

76
00:02:33,200 --> 00:02:35,200
components in order to avoid a single

77
00:02:35,200 --> 00:02:36,080
point of

78
00:02:36,080 --> 00:02:39,680
failure so one common way to do it

79
00:02:39,680 --> 00:02:41,680
if you're familiar with bitcoin interim

80
00:02:41,680 --> 00:02:43,760
is multi-signatures

81
00:02:43,760 --> 00:02:46,160
but it's sometimes complicated because

82
00:02:46,160 --> 00:02:48,560
it will require multiple keys sometimes

83
00:02:48,560 --> 00:02:50,720
you need a single key and it works

84
00:02:50,720 --> 00:02:51,760
differently for

85
00:02:51,760 --> 00:02:55,120
different uh blockchain platforms so

86
00:02:55,120 --> 00:02:57,360
ideally you want to have something that

87
00:02:57,360 --> 00:02:58,720
will work on different for different

88
00:02:58,720 --> 00:03:00,480
blockchains bitcoin eater and

89
00:03:00,480 --> 00:03:03,440
all the others so what we're going to

90
00:03:03,440 --> 00:03:04,480
present today

91
00:03:04,480 --> 00:03:07,760
is about mpc and tss

92
00:03:07,760 --> 00:03:10,319
which are technique to distribute trust

93
00:03:10,319 --> 00:03:13,040
not using hardware not using procedures

94
00:03:13,040 --> 00:03:15,599
but using fundamentally uh cryptographic

95
00:03:15,599 --> 00:03:16,239
techniques

96
00:03:16,239 --> 00:03:19,920
which is one of uh different approaches

97
00:03:19,920 --> 00:03:22,720
so what is npc multi-party computation

98
00:03:22,720 --> 00:03:24,560
so from a very general perspective

99
00:03:24,560 --> 00:03:28,720
it's a protocol a system whereby

100
00:03:28,720 --> 00:03:31,440
you will receive the inputs but in a way

101
00:03:31,440 --> 00:03:33,280
that is kind of encrypted in such a way

102
00:03:33,280 --> 00:03:35,280
you don't really know the input values

103
00:03:35,280 --> 00:03:37,040
however you will be able to compute the

104
00:03:37,040 --> 00:03:39,120
output the result of some function so in

105
00:03:39,120 --> 00:03:40,239
this example

106
00:03:40,239 --> 00:03:42,239
we receive the encrypted version of x

107
00:03:42,239 --> 00:03:43,680
and of y and we compute

108
00:03:43,680 --> 00:03:47,280
the result x plus y for the addition

109
00:03:47,280 --> 00:03:50,239
maybe you can guess how to adapt this

110
00:03:50,239 --> 00:03:52,959
for the context of wallet applications

111
00:03:52,959 --> 00:03:55,840
so one way to use mpc for enterprise

112
00:03:55,840 --> 00:03:56,400
wireless

113
00:03:56,400 --> 00:03:58,720
is to split the key in different shares

114
00:03:58,720 --> 00:03:59,599
in different values

115
00:03:59,599 --> 00:04:01,760
so that no single share of the key will

116
00:04:01,760 --> 00:04:02,799
give you the full

117
00:04:02,799 --> 00:04:05,840
key value and the npc protocol

118
00:04:05,840 --> 00:04:08,080
will receive the encrypted key share

119
00:04:08,080 --> 00:04:09,439
with different key shares

120
00:04:09,439 --> 00:04:11,040
and will receive a kind of encrypted

121
00:04:11,040 --> 00:04:12,239
form of the transaction and it will

122
00:04:12,239 --> 00:04:13,680
compute the signature

123
00:04:13,680 --> 00:04:16,000
without uh seeing the key so it's not

124
00:04:16,000 --> 00:04:17,759
about decrypting the values and

125
00:04:17,759 --> 00:04:18,560
combining them

126
00:04:18,560 --> 00:04:20,478
and computing the result it's really

127
00:04:20,478 --> 00:04:22,000
about computing

128
00:04:22,000 --> 00:04:24,000
the result from directly from the

129
00:04:24,000 --> 00:04:26,000
encrypted values without ever decrypting

130
00:04:26,000 --> 00:04:26,320
them

131
00:04:26,320 --> 00:04:29,280
so to speak so now the question is how

132
00:04:29,280 --> 00:04:30,160
do you

133
00:04:30,160 --> 00:04:32,639
adapt npc how you do something that is

134
00:04:32,639 --> 00:04:34,720
really optimized for a system

135
00:04:34,720 --> 00:04:36,720
for the case when you want to split the

136
00:04:36,720 --> 00:04:38,160
secret between

137
00:04:38,160 --> 00:04:40,880
let's say n participants but you only

138
00:04:40,880 --> 00:04:42,800
want to authorize a subset

139
00:04:42,800 --> 00:04:45,520
of this participant to issue a signature

140
00:04:45,520 --> 00:04:47,280
so that's what threshold signatures

141
00:04:47,280 --> 00:04:50,320
or tss is about and you can see it as a

142
00:04:50,320 --> 00:04:53,440
special type of multi-party competition

143
00:04:53,440 --> 00:04:56,320
so here we usually use the notations t

144
00:04:56,320 --> 00:04:56,560
and

145
00:04:56,560 --> 00:04:59,280
n whereby n is the number of potential

146
00:04:59,280 --> 00:05:00,160
signers

147
00:05:00,160 --> 00:05:02,960
and t is the minimal number of signers

148
00:05:02,960 --> 00:05:04,960
you need to issue a transaction

149
00:05:04,960 --> 00:05:06,560
so in this example we have three

150
00:05:06,560 --> 00:05:08,400
individuals and

151
00:05:08,400 --> 00:05:11,520
one is potentially uh malicious well at

152
00:05:11,520 --> 00:05:12,320
least they look

153
00:05:12,320 --> 00:05:15,440
uh not really trustworthy so we don't

154
00:05:15,440 --> 00:05:16,400
want to authorize

155
00:05:16,400 --> 00:05:18,479
one single person to each a transaction

156
00:05:18,479 --> 00:05:20,479
so we have a system whereby

157
00:05:20,479 --> 00:05:22,320
we need two parties to cooperate

158
00:05:22,320 --> 00:05:24,720
together to issue a transaction

159
00:05:24,720 --> 00:05:26,479
and here you can see that the two

160
00:05:26,479 --> 00:05:28,160
persons with the shares shared to

161
00:05:28,160 --> 00:05:29,280
industry in blue

162
00:05:29,280 --> 00:05:32,639
can work together to sign a message

163
00:05:32,639 --> 00:05:35,520
without the approval of the pink guy on

164
00:05:35,520 --> 00:05:39,120
the left hand so from a more abstract

165
00:05:39,120 --> 00:05:40,080
perspective

166
00:05:40,080 --> 00:05:42,320
in tss you will have for example these

167
00:05:42,320 --> 00:05:43,440
two signers

168
00:05:43,440 --> 00:05:44,720
each of these three sender they will

169
00:05:44,720 --> 00:05:46,720
have a different share of the key

170
00:05:46,720 --> 00:05:48,560
which means that will not have access to

171
00:05:48,560 --> 00:05:50,160
the full key they will

172
00:05:50,160 --> 00:05:52,160
receive the message to be signed and

173
00:05:52,160 --> 00:05:54,080
they will run a protocol they will

174
00:05:54,080 --> 00:05:54,560
follow

175
00:05:54,560 --> 00:05:57,680
a list of operations to work together

176
00:05:57,680 --> 00:06:00,400
and compute a valid signature

177
00:06:00,400 --> 00:06:03,520
now you might ask okay but how do you

178
00:06:03,520 --> 00:06:04,560
generate these

179
00:06:04,560 --> 00:06:07,440
key shares how do you distribute them so

180
00:06:07,440 --> 00:06:08,479
the naive approach

181
00:06:08,479 --> 00:06:11,120
is to do a kind of ceremony whereby a

182
00:06:11,120 --> 00:06:12,880
centralized operator

183
00:06:12,880 --> 00:06:15,440
will generate the private key and we

184
00:06:15,440 --> 00:06:17,600
split this key in different chairs

185
00:06:17,600 --> 00:06:19,759
and distribute the key to the signers

186
00:06:19,759 --> 00:06:21,360
but you can actually do a more

187
00:06:21,360 --> 00:06:22,639
decentralized

188
00:06:22,639 --> 00:06:26,080
more distributed way to split

189
00:06:26,080 --> 00:06:28,160
the key it's called distributed key

190
00:06:28,160 --> 00:06:29,120
generation

191
00:06:29,120 --> 00:06:31,919
of an aggregated dkg so here the

192
00:06:31,919 --> 00:06:32,880
participants

193
00:06:32,880 --> 00:06:34,319
will work together with follow

194
00:06:34,319 --> 00:06:36,080
cryptographic protocol

195
00:06:36,080 --> 00:06:39,280
to obtain shares of a private key

196
00:06:39,280 --> 00:06:41,919
but in such a way that the private key

197
00:06:41,919 --> 00:06:43,680
the master key so to speak is never

198
00:06:43,680 --> 00:06:44,960
exposed to anyone

199
00:06:44,960 --> 00:06:47,280
so it's quite convenient because it

200
00:06:47,280 --> 00:06:50,479
really minimizes the exposure of the key

201
00:06:50,479 --> 00:06:53,199
so you don't have to to trust a single

202
00:06:53,199 --> 00:06:53,759
point

203
00:06:53,759 --> 00:06:55,039
you don't have to really erase the key

204
00:06:55,039 --> 00:06:56,960
security because the key is

205
00:06:56,960 --> 00:06:59,759
nowhere um it kind of sounds like magic

206
00:06:59,759 --> 00:07:01,919
but that's what advanced crypto is about

207
00:07:01,919 --> 00:07:03,440
most of the time

208
00:07:03,440 --> 00:07:06,639
so mpc and tss is not just something

209
00:07:06,639 --> 00:07:07,360
that people

210
00:07:07,360 --> 00:07:09,199
write research papers about it's

211
00:07:09,199 --> 00:07:11,360
something actually used in real systems

212
00:07:11,360 --> 00:07:14,080
in real cryptocurrency exchanges and a

213
00:07:14,080 --> 00:07:16,240
typical use case is called storage

214
00:07:16,240 --> 00:07:17,840
systems where you have

215
00:07:17,840 --> 00:07:20,479
sometimes a single key a single account

216
00:07:20,479 --> 00:07:21,280
that

217
00:07:21,280 --> 00:07:24,160
stores really tons of money typically

218
00:07:24,160 --> 00:07:26,160
tens or hundreds of millions

219
00:07:26,160 --> 00:07:28,160
so in this case you want to make sure

220
00:07:28,160 --> 00:07:30,319
that the access to these farms the

221
00:07:30,319 --> 00:07:31,520
access to the key

222
00:07:31,520 --> 00:07:33,919
is distributed among multiple parties

223
00:07:33,919 --> 00:07:35,520
locations infrastructure in case there's

224
00:07:35,520 --> 00:07:37,360
an earthquake a fire somewhere

225
00:07:37,360 --> 00:07:38,639
you want to make sure that you will

226
00:07:38,639 --> 00:07:40,400
always recover your funds

227
00:07:40,400 --> 00:07:43,039
and you want to avoid trusting only one

228
00:07:43,039 --> 00:07:44,319
or two people with

229
00:07:44,319 --> 00:07:47,840
your money and you can combine this with

230
00:07:47,840 --> 00:07:50,080
different technology with smart cars hsn

231
00:07:50,080 --> 00:07:52,639
cloud hsms even mobile phones

232
00:07:52,639 --> 00:07:55,759
to have different types of platforms

233
00:07:55,759 --> 00:07:57,599
now what about the the crypto use

234
00:07:57,599 --> 00:07:59,360
underhood was

235
00:07:59,360 --> 00:08:02,400
do we need to build tss so to be

236
00:08:02,400 --> 00:08:04,479
stressful signatures of course you

237
00:08:04,479 --> 00:08:06,319
must be you must have signatures

238
00:08:06,319 --> 00:08:08,639
somewhere so in the blockchain space

239
00:08:08,639 --> 00:08:09,599
there are

240
00:08:09,599 --> 00:08:11,440
two main types of signatures being used

241
00:08:11,440 --> 00:08:13,599
to ecdsticker dsa

242
00:08:13,599 --> 00:08:16,720
which is using bitcoin ethereum

243
00:08:16,720 --> 00:08:20,479
and now you you find uh

244
00:08:20,479 --> 00:08:23,919
ed dsa and ed25519

245
00:08:23,919 --> 00:08:25,840
which are signature based on the schnorr

246
00:08:25,840 --> 00:08:27,599
signing paradigm

247
00:08:27,599 --> 00:08:29,759
which is slightly different and has the

248
00:08:29,759 --> 00:08:30,960
benefit of not

249
00:08:30,960 --> 00:08:32,799
using a notch not using a unique number

250
00:08:32,799 --> 00:08:34,880
per signature which avoids some classes

251
00:08:34,880 --> 00:08:35,839
of attacks

252
00:08:35,839 --> 00:08:37,839
and it also makes aggregation of keys

253
00:08:37,839 --> 00:08:39,279
and signatures easier

254
00:08:39,279 --> 00:08:41,839
which is quite convenient when you do

255
00:08:41,839 --> 00:08:43,599
social signatures

256
00:08:43,599 --> 00:08:45,200
another type of signature that we can

257
00:08:45,200 --> 00:08:46,880
sign is the pls signature which work

258
00:08:46,880 --> 00:08:48,080
very differently which are

259
00:08:48,080 --> 00:08:49,360
quite complicated because they use

260
00:08:49,360 --> 00:08:51,760
cryptographic bearings but they make the

261
00:08:51,760 --> 00:08:52,560
aggregation

262
00:08:52,560 --> 00:08:54,560
of different keys into a master key and

263
00:08:54,560 --> 00:08:55,600
the aggregation of

264
00:08:55,600 --> 00:08:58,080
different signatures into one single

265
00:08:58,080 --> 00:08:58,880
signature

266
00:08:58,880 --> 00:09:02,800
much easier than classical signatures

267
00:09:02,800 --> 00:09:04,320
so you may have heard about fully

268
00:09:04,320 --> 00:09:06,080
homomorphic encryption

269
00:09:06,080 --> 00:09:08,240
so here we don't do fully homomorphic we

270
00:09:08,240 --> 00:09:09,519
are only interested in

271
00:09:09,519 --> 00:09:11,839
homomorphic encryption with respect to

272
00:09:11,839 --> 00:09:13,760
one single operation

273
00:09:13,760 --> 00:09:15,920
so the first line really defines what

274
00:09:15,920 --> 00:09:17,519
homomorphic encryption is about

275
00:09:17,519 --> 00:09:20,800
you combine you combine two ciphertext

276
00:09:20,800 --> 00:09:23,120
encryption of m1 and m2

277
00:09:23,120 --> 00:09:25,600
and when you decrypt the result you get

278
00:09:25,600 --> 00:09:27,360
a value that is the combination of m1

279
00:09:27,360 --> 00:09:28,560
and m2

280
00:09:28,560 --> 00:09:31,279
so you see that we use different signs

281
00:09:31,279 --> 00:09:32,959
different operands on the left hand

282
00:09:32,959 --> 00:09:34,480
right hand of the equation

283
00:09:34,480 --> 00:09:36,000
because sometimes it's not the same

284
00:09:36,000 --> 00:09:37,680
operation so if you

285
00:09:37,680 --> 00:09:40,959
consider textbook rsa which is uh quite

286
00:09:40,959 --> 00:09:42,399
insecure

287
00:09:42,399 --> 00:09:44,000
but which happens to be homomorphic with

288
00:09:44,000 --> 00:09:45,680
respect to the multiplication

289
00:09:45,680 --> 00:09:47,279
then you multiply to cipher text and

290
00:09:47,279 --> 00:09:49,120
what you obtain is a valid cipher text

291
00:09:49,120 --> 00:09:52,399
of the product of the two plaintexts but

292
00:09:52,399 --> 00:09:53,839
in pious encryption it's slightly

293
00:09:53,839 --> 00:09:55,440
different because

294
00:09:55,440 --> 00:09:57,920
you have multiplication on the one hand

295
00:09:57,920 --> 00:09:58,640
and

296
00:09:58,640 --> 00:10:01,200
addition on the other hand which is very

297
00:10:01,200 --> 00:10:04,079
interesting features in many cases so

298
00:10:04,079 --> 00:10:05,920
homomorphic encryption is also used in

299
00:10:05,920 --> 00:10:07,279
e-voting

300
00:10:07,279 --> 00:10:09,279
to combine balance of waters and it's

301
00:10:09,279 --> 00:10:10,320
also used in

302
00:10:10,320 --> 00:10:14,320
some tss constructions commitments which

303
00:10:14,320 --> 00:10:16,560
is notion that this probably familiar to

304
00:10:16,560 --> 00:10:17,600
too many of you

305
00:10:17,600 --> 00:10:19,360
so i know if you're on twitter but

306
00:10:19,360 --> 00:10:21,120
sometimes you will see people

307
00:10:21,120 --> 00:10:25,279
mysteriously posting hash values and uh

308
00:10:25,279 --> 00:10:26,640
they would suggest that it's because

309
00:10:26,640 --> 00:10:28,079
they have found some zero day but they

310
00:10:28,079 --> 00:10:29,600
don't want the ticks of the zero day so

311
00:10:29,600 --> 00:10:31,279
they possibly hash that later on they

312
00:10:31,279 --> 00:10:32,880
can show you the stuff they hash to

313
00:10:32,880 --> 00:10:33,920
demonstrate

314
00:10:33,920 --> 00:10:35,120
that they found that the order

315
00:10:35,120 --> 00:10:37,040
themselves so

316
00:10:37,040 --> 00:10:38,800
it's a kind of commitment the context of

317
00:10:38,800 --> 00:10:40,079
crypto commitment

318
00:10:40,079 --> 00:10:43,360
is a slightly more more involved

319
00:10:43,360 --> 00:10:45,120
technique with more formal definitions

320
00:10:45,120 --> 00:10:46,399
and security properties

321
00:10:46,399 --> 00:10:48,560
but ultimately it's the same so

322
00:10:48,560 --> 00:10:50,720
initially the setup is about

323
00:10:50,720 --> 00:10:52,320
the rules of the game which function

324
00:10:52,320 --> 00:10:54,640
you're going to use the commit phase

325
00:10:54,640 --> 00:10:58,320
is when you commit to some value x here

326
00:10:58,320 --> 00:10:59,920
and you also use the value r to

327
00:10:59,920 --> 00:11:01,839
randomize the process

328
00:11:01,839 --> 00:11:04,880
and the opening phase the reveal phase

329
00:11:04,880 --> 00:11:07,200
is when you reveal these two values

330
00:11:07,200 --> 00:11:09,360
thereby allowing the verifier to check

331
00:11:09,360 --> 00:11:09,920
that

332
00:11:09,920 --> 00:11:12,640
the value that you committed to c

333
00:11:12,640 --> 00:11:14,399
matches the x and r that you

334
00:11:14,399 --> 00:11:18,240
just published um so this one is not

335
00:11:18,240 --> 00:11:19,839
going to surprise you with talking about

336
00:11:19,839 --> 00:11:21,120
special signatures

337
00:11:21,120 --> 00:11:23,519
and of course we use somewhere threshold

338
00:11:23,519 --> 00:11:24,880
secret sharing

339
00:11:24,880 --> 00:11:27,519
uh and specifically xiaomi's game which

340
00:11:27,519 --> 00:11:28,959
is maybe the most common

341
00:11:28,959 --> 00:11:32,160
and the most known construction

342
00:11:32,160 --> 00:11:34,800
which relies on polynomial interpolation

343
00:11:34,800 --> 00:11:35,920
so

344
00:11:35,920 --> 00:11:37,440
here will be us a reminder you have a

345
00:11:37,440 --> 00:11:38,959
secret you have a string

346
00:11:38,959 --> 00:11:41,360
and from this secret you're going to

347
00:11:41,360 --> 00:11:42,160
generate

348
00:11:42,160 --> 00:11:44,240
a list of for example five different

349
00:11:44,240 --> 00:11:45,519
values

350
00:11:45,519 --> 00:11:47,920
and in such a way that for example you

351
00:11:47,920 --> 00:11:49,120
need three

352
00:11:49,120 --> 00:11:51,600
of these values to reconcile the secret

353
00:11:51,600 --> 00:11:53,519
but such that

354
00:11:53,519 --> 00:11:55,920
one or two values will not click any on

355
00:11:55,920 --> 00:11:56,800
information

356
00:11:56,800 --> 00:12:00,320
on on the secret value when varying that

357
00:12:00,320 --> 00:12:03,279
is often used in a tss construction is

358
00:12:03,279 --> 00:12:04,959
verifiable securing

359
00:12:04,959 --> 00:12:08,320
so it's a small brand where the owners

360
00:12:08,320 --> 00:12:10,000
of the shares can verify when they

361
00:12:10,000 --> 00:12:11,920
reconstruct the secret

362
00:12:11,920 --> 00:12:13,200
that the correct secret has been

363
00:12:13,200 --> 00:12:15,040
reconstructed and

364
00:12:15,040 --> 00:12:16,240
in particular that the other

365
00:12:16,240 --> 00:12:18,079
participants have used a valid share of

366
00:12:18,079 --> 00:12:19,120
the secret and not

367
00:12:19,120 --> 00:12:22,240
any random value so a common vss game is

368
00:12:22,240 --> 00:12:24,320
by feldman and it was designer thinking

369
00:12:24,320 --> 00:12:25,839
the less in the late

370
00:12:25,839 --> 00:12:28,079
80s and it's actually based on

371
00:12:28,079 --> 00:12:28,959
homomorphic

372
00:12:28,959 --> 00:12:32,160
encryption so last but not least

373
00:12:32,160 --> 00:12:34,720
zero knowledge proofs and modular zero

374
00:12:34,720 --> 00:12:36,160
knowledge protocols

375
00:12:36,160 --> 00:12:37,680
so you might be familiar with the

376
00:12:37,680 --> 00:12:39,760
intuition of racial knowledge profits

377
00:12:39,760 --> 00:12:40,240
approve

378
00:12:40,240 --> 00:12:42,639
that listing information on the stuff

379
00:12:42,639 --> 00:12:44,079
that you're providing it's for example

380
00:12:44,079 --> 00:12:44,480
use

381
00:12:44,480 --> 00:12:47,839
in a privacy oriented protocol such as

382
00:12:47,839 --> 00:12:50,399
z-car from monero in this case you want

383
00:12:50,399 --> 00:12:52,320
to hide the money being transferred

384
00:12:52,320 --> 00:12:54,480
the address of the sender and recipient

385
00:12:54,480 --> 00:12:56,240
yet in such a way that

386
00:12:56,240 --> 00:12:58,639
participants can verify that this money

387
00:12:58,639 --> 00:13:00,959
has been sent somewhere and that

388
00:13:00,959 --> 00:13:03,519
everything is correct and sound so

389
00:13:03,519 --> 00:13:04,639
journey as you know

390
00:13:04,639 --> 00:13:07,040
proof is about proving a mathematical

391
00:13:07,040 --> 00:13:08,639
statement such as the result of any

392
00:13:08,639 --> 00:13:09,519
question

393
00:13:09,519 --> 00:13:11,600
without leaking literally any bit of

394
00:13:11,600 --> 00:13:12,720
information

395
00:13:12,720 --> 00:13:14,160
yet in such a way that the approver

396
00:13:14,160 --> 00:13:16,079
cannot cheat

397
00:13:16,079 --> 00:13:18,959
but that they can't prove any correct

398
00:13:18,959 --> 00:13:20,240
value to be correct

399
00:13:20,240 --> 00:13:22,240
and that any inquiry value cannot

400
00:13:22,240 --> 00:13:25,120
convince a verifier that is correct

401
00:13:25,120 --> 00:13:26,720
in the context of blockchain you will

402
00:13:26,720 --> 00:13:28,160
often encounter

403
00:13:28,160 --> 00:13:30,639
nizk non-interactive zero-knowledge

404
00:13:30,639 --> 00:13:31,760
proof

405
00:13:31,760 --> 00:13:34,560
which is just a blob of data instead of

406
00:13:34,560 --> 00:13:36,160
being a protocol with multiple around

407
00:13:36,160 --> 00:13:38,240
you will just send one piece of data

408
00:13:38,240 --> 00:13:40,240
which will be your your proof so you

409
00:13:40,240 --> 00:13:42,000
don't have to run multiple round trips

410
00:13:42,000 --> 00:13:45,040
you just have to send one piece of data

411
00:13:45,040 --> 00:13:47,600
okay so now based on this uh preliminary

412
00:13:47,600 --> 00:13:49,279
i will let omer present the

413
00:13:49,279 --> 00:13:53,120
attacks on npc and tss constructions

414
00:13:53,120 --> 00:13:55,279
i would like to start with describing

415
00:13:55,279 --> 00:13:56,560
the general setup

416
00:13:56,560 --> 00:13:59,519
in which our attacks takes place

417
00:13:59,519 --> 00:14:00,959
starting from the left

418
00:14:00,959 --> 00:14:02,959
we have a user communicating with an

419
00:14:02,959 --> 00:14:04,240
exchange

420
00:14:04,240 --> 00:14:06,240
the user in the exchange run a two-party

421
00:14:06,240 --> 00:14:07,360
key generation

422
00:14:07,360 --> 00:14:09,680
resulting with the user getting a secret

423
00:14:09,680 --> 00:14:10,560
key share

424
00:14:10,560 --> 00:14:12,639
sk1 and the exchange getting a secret

425
00:14:12,639 --> 00:14:14,720
key share sk2

426
00:14:14,720 --> 00:14:16,959
the user deposits funds to his address

427
00:14:16,959 --> 00:14:18,079
and from that point

428
00:14:18,079 --> 00:14:20,959
can initiate orders each order comes

429
00:14:20,959 --> 00:14:21,920
with a signature

430
00:14:21,920 --> 00:14:24,000
generated by running a two-party signing

431
00:14:24,000 --> 00:14:26,800
between the user and the exchange

432
00:14:26,800 --> 00:14:28,880
on the other side the crypto exchange

433
00:14:28,880 --> 00:14:30,160
runs an infrastructure

434
00:14:30,160 --> 00:14:32,959
to manage access to its liquidity as

435
00:14:32,959 --> 00:14:34,000
part of this setup

436
00:14:34,000 --> 00:14:36,160
there are several sites that together

437
00:14:36,160 --> 00:14:37,760
can authorize the transfer of large

438
00:14:37,760 --> 00:14:38,320
amounts

439
00:14:38,320 --> 00:14:41,040
per the requirements of the exchange we

440
00:14:41,040 --> 00:14:43,120
are using a hot wallet and cold wallet

441
00:14:43,120 --> 00:14:45,360
to express the frequency of the use

442
00:14:45,360 --> 00:14:46,800
and mention it since this is the

443
00:14:46,800 --> 00:14:48,800
terminology used in the industry but it

444
00:14:48,800 --> 00:14:51,760
is not much relevant to our attacks

445
00:14:51,760 --> 00:14:53,519
therefore we are actually looking at two

446
00:14:53,519 --> 00:14:54,800
subsystems

447
00:14:54,800 --> 00:14:57,199
the hot subsystem on the left is usually

448
00:14:57,199 --> 00:14:59,519
based on two-party protocols where we

449
00:14:59,519 --> 00:15:01,360
need to protect from a failure

450
00:15:01,360 --> 00:15:03,600
of one of the parties the current

451
00:15:03,600 --> 00:15:05,279
subsystem on the right

452
00:15:05,279 --> 00:15:08,000
is spreading security to multiple sites

453
00:15:08,000 --> 00:15:09,440
the number of sites

454
00:15:09,440 --> 00:15:11,600
or parties can vary as well as the

455
00:15:11,600 --> 00:15:13,839
robustness

456
00:15:13,839 --> 00:15:16,160
the guaranteed security for this setup

457
00:15:16,160 --> 00:15:17,760
using tss

458
00:15:17,760 --> 00:15:19,680
is that even if a single key holder is

459
00:15:19,680 --> 00:15:21,839
compromised the attacker gains no

460
00:15:21,839 --> 00:15:23,279
advantage

461
00:15:23,279 --> 00:15:25,680
in our attacks we demonstrate how an

462
00:15:25,680 --> 00:15:27,519
attacker with full control

463
00:15:27,519 --> 00:15:29,600
over only a single party can break the

464
00:15:29,600 --> 00:15:32,480
security of the tss

465
00:15:32,480 --> 00:15:35,199
for simplicity we assume that the

466
00:15:35,199 --> 00:15:36,399
exchange

467
00:15:36,399 --> 00:15:38,720
is compromised modeling either an

468
00:15:38,720 --> 00:15:42,639
outside attacker or some insider threat

469
00:15:42,639 --> 00:15:44,320
we can describe our attacks in the

470
00:15:44,320 --> 00:15:47,040
context of the hotend called subsystems

471
00:15:47,040 --> 00:15:48,720
in this talk we'll describe three

472
00:15:48,720 --> 00:15:51,199
attacks the first one

473
00:15:51,199 --> 00:15:53,839
walks in the multi-party setting it will

474
00:15:53,839 --> 00:15:54,480
result

475
00:15:54,480 --> 00:15:56,959
in private key division which means the

476
00:15:56,959 --> 00:15:58,079
exchange funds

477
00:15:58,079 --> 00:16:00,639
will be permanently locked the second

478
00:16:00,639 --> 00:16:01,600
attack

479
00:16:01,600 --> 00:16:04,160
named lathering's repeat works best for

480
00:16:04,160 --> 00:16:05,839
the two-party setting

481
00:16:05,839 --> 00:16:07,680
it allows the exchange to extract the

482
00:16:07,680 --> 00:16:10,959
key of the user and steal its funds

483
00:16:10,959 --> 00:16:13,680
the last attack golden shoe fits well in

484
00:16:13,680 --> 00:16:14,639
both settings

485
00:16:14,639 --> 00:16:17,199
and works by sending a well-engineered

486
00:16:17,199 --> 00:16:18,079
message

487
00:16:18,079 --> 00:16:20,240
which gets all counterparties to send

488
00:16:20,240 --> 00:16:23,279
the attacker their secrets

489
00:16:23,279 --> 00:16:25,440
we conducted a responsible disclosure on

490
00:16:25,440 --> 00:16:27,360
all three attacks

491
00:16:27,360 --> 00:16:29,519
the first attack was found in an open

492
00:16:29,519 --> 00:16:30,480
source library

493
00:16:30,480 --> 00:16:32,800
of one of the biggest crypto exchanges

494
00:16:32,800 --> 00:16:35,040
however it was found around a week

495
00:16:35,040 --> 00:16:37,040
after the library became public so we

496
00:16:37,040 --> 00:16:39,600
assumed no one was using it

497
00:16:39,600 --> 00:16:41,759
the second vulnerability was found in an

498
00:16:41,759 --> 00:16:42,880
open source code

499
00:16:42,880 --> 00:16:45,839
by a big mpc company we were told that

500
00:16:45,839 --> 00:16:47,600
the code used in the product is

501
00:16:47,600 --> 00:16:48,160
different

502
00:16:48,160 --> 00:16:49,680
and therefore no one was actually

503
00:16:49,680 --> 00:16:51,279
affected

504
00:16:51,279 --> 00:16:53,440
the last attack was again found in an

505
00:16:53,440 --> 00:16:55,360
open source library of a big crypto

506
00:16:55,360 --> 00:16:56,560
exchange

507
00:16:56,560 --> 00:17:00,399
you can check out the cv for details

508
00:17:00,399 --> 00:17:02,560
before diving into the concrete attacks

509
00:17:02,560 --> 00:17:04,000
we want to give another high-level

510
00:17:04,000 --> 00:17:04,720
analysis

511
00:17:04,720 --> 00:17:07,599
of the root cause for the attacks here

512
00:17:07,599 --> 00:17:08,959
the raws describe different

513
00:17:08,959 --> 00:17:10,079
characteristics

514
00:17:10,079 --> 00:17:12,079
common to most threshold cryptography or

515
00:17:12,079 --> 00:17:15,520
tss based protocols

516
00:17:15,520 --> 00:17:19,599
at first tss protocols are interactive

517
00:17:19,599 --> 00:17:21,520
they progress in rounds of communication

518
00:17:21,520 --> 00:17:23,119
between the parties

519
00:17:23,119 --> 00:17:24,959
while in modern cryptography we usually

520
00:17:24,959 --> 00:17:26,559
get a single party

521
00:17:26,559 --> 00:17:29,360
to generate a key and sign locally here

522
00:17:29,360 --> 00:17:31,360
we must have interaction

523
00:17:31,360 --> 00:17:33,039
this is essentially all that was needed

524
00:17:33,039 --> 00:17:35,600
to mount the first attack

525
00:17:35,600 --> 00:17:38,000
tss often makes use in some

526
00:17:38,000 --> 00:17:39,440
cryptographic primitives

527
00:17:39,440 --> 00:17:41,200
which are not common and not used by

528
00:17:41,200 --> 00:17:43,600
many this makes them hard to understand

529
00:17:43,600 --> 00:17:46,960
or to nail properly how they work

530
00:17:46,960 --> 00:17:48,960
finally it is important to note that in

531
00:17:48,960 --> 00:17:51,200
the real world where an attacker can

532
00:17:51,200 --> 00:17:51,600
attack

533
00:17:51,600 --> 00:17:54,160
any one of the participating parties a

534
00:17:54,160 --> 00:17:56,000
party cannot assume anything about the

535
00:17:56,000 --> 00:17:59,039
correctness of the messages it receives

536
00:17:59,039 --> 00:18:01,679
this means that for any message sent the

537
00:18:01,679 --> 00:18:02,320
sender

538
00:18:02,320 --> 00:18:04,160
needs to attach a proof that the message

539
00:18:04,160 --> 00:18:06,559
was computed according to the protocol

540
00:18:06,559 --> 00:18:08,960
one common way of doing it is using the

541
00:18:08,960 --> 00:18:10,720
zero knowledge proofs

542
00:18:10,720 --> 00:18:12,640
some of which are tailored to prove

543
00:18:12,640 --> 00:18:14,160
statements on particular

544
00:18:14,160 --> 00:18:17,600
messages in the protocol

545
00:18:17,919 --> 00:18:20,559
the first attack as we mentioned before

546
00:18:20,559 --> 00:18:22,880
works best for the code setting

547
00:18:22,880 --> 00:18:25,039
in fact we want to focus on a protocol

548
00:18:25,039 --> 00:18:26,880
for key rotation

549
00:18:26,880 --> 00:18:29,360
this is a common industry practice if

550
00:18:29,360 --> 00:18:30,240
every safe

551
00:18:30,240 --> 00:18:33,039
holds a secret share sk we want a

552
00:18:33,039 --> 00:18:35,280
protocol for all safes to change their

553
00:18:35,280 --> 00:18:36,559
secret key shares

554
00:18:36,559 --> 00:18:39,120
but still maintain access to the funds

555
00:18:39,120 --> 00:18:41,520
locked under the joint public key

556
00:18:41,520 --> 00:18:44,000
putting it simply we want to move from

557
00:18:44,000 --> 00:18:46,000
the red set of secret keys

558
00:18:46,000 --> 00:18:49,440
at time t to the blue set of secret key

559
00:18:49,440 --> 00:18:50,240
shares

560
00:18:50,240 --> 00:18:53,200
in time t prime this is a basic

561
00:18:53,200 --> 00:18:54,960
requirement for such a system

562
00:18:54,960 --> 00:18:57,280
because otherwise a single attacker

563
00:18:57,280 --> 00:18:58,799
would be able to systematically

564
00:18:58,799 --> 00:18:59,840
compromise

565
00:18:59,840 --> 00:19:01,919
side by side until uncovering the full

566
00:19:01,919 --> 00:19:03,440
private key

567
00:19:03,440 --> 00:19:05,520
we call this attack forget and forgive

568
00:19:05,520 --> 00:19:06,720
since parties are

569
00:19:06,720 --> 00:19:10,720
forced to forget the keys

570
00:19:10,720 --> 00:19:12,799
ending up in a situation where the

571
00:19:12,799 --> 00:19:14,160
actual distributed key

572
00:19:14,160 --> 00:19:17,280
is lost now let's move on to describe

573
00:19:17,280 --> 00:19:19,039
the low level details

574
00:19:19,039 --> 00:19:22,240
a morty in our scheme is an honest party

575
00:19:22,240 --> 00:19:24,880
we use a setup with three parties a b

576
00:19:24,880 --> 00:19:26,160
and c

577
00:19:26,160 --> 00:19:29,039
instead of secret key share sk let's say

578
00:19:29,039 --> 00:19:30,320
that each moti holds

579
00:19:30,320 --> 00:19:33,360
some personal number x a x b

580
00:19:33,360 --> 00:19:36,640
and x c we have invariant which is the

581
00:19:36,640 --> 00:19:37,440
sum of x

582
00:19:37,440 --> 00:19:42,000
ax b and x c here equal to y our task

583
00:19:42,000 --> 00:19:44,799
is to replace or in other words refresh

584
00:19:44,799 --> 00:19:46,640
each of x ax bxe

585
00:19:46,640 --> 00:19:49,520
with the new x a prime x b prime x c

586
00:19:49,520 --> 00:19:50,320
prime

587
00:19:50,320 --> 00:19:52,160
while keeping the invariant of this on

588
00:19:52,160 --> 00:19:53,840
the sum of x primes

589
00:19:53,840 --> 00:19:57,200
to be equal to y for that we use a

590
00:19:57,200 --> 00:19:58,559
cryptographic primitive

591
00:19:58,559 --> 00:20:00,720
we mentioned before called vss which

592
00:20:00,720 --> 00:20:03,600
stands for verifiable secret sharing

593
00:20:03,600 --> 00:20:05,600
we let each moti distribute secret

594
00:20:05,600 --> 00:20:07,919
shares such that their additive value is

595
00:20:07,919 --> 00:20:09,440
equal to zero

596
00:20:09,440 --> 00:20:11,280
in the figure we are only demonstrating

597
00:20:11,280 --> 00:20:13,200
it for the multi holding

598
00:20:13,200 --> 00:20:17,600
x c this moti will generate rca and rcb

599
00:20:17,600 --> 00:20:21,520
sum to such that when we sum all secret

600
00:20:21,520 --> 00:20:22,320
shares

601
00:20:22,320 --> 00:20:24,240
the contribution will cancel out in the

602
00:20:24,240 --> 00:20:25,919
total sum

603
00:20:25,919 --> 00:20:27,600
each moti will collect all the secret

604
00:20:27,600 --> 00:20:29,520
shares he received and will add them to

605
00:20:29,520 --> 00:20:30,559
a secret x

606
00:20:30,559 --> 00:20:34,400
i as can be seen while x a prime and x b

607
00:20:34,400 --> 00:20:35,919
prime have changed

608
00:20:35,919 --> 00:20:39,360
summing now all x primes we get that y

609
00:20:39,360 --> 00:20:40,720
prime is equal to y

610
00:20:40,720 --> 00:20:44,320
as required so are we done yet

611
00:20:44,320 --> 00:20:47,440
not exactly we still need to delete the

612
00:20:47,440 --> 00:20:49,360
old secret shares

613
00:20:49,360 --> 00:20:51,679
now this is where it gets interesting

614
00:20:51,679 --> 00:20:52,640
deleting

615
00:20:52,640 --> 00:20:55,679
is a step that cannot be reversed we ask

616
00:20:55,679 --> 00:20:57,600
how does the mother knows that it is

617
00:20:57,600 --> 00:20:58,080
safe

618
00:20:58,080 --> 00:21:00,559
to delete the old secret share the

619
00:21:00,559 --> 00:21:02,960
answer should be that each motive needs

620
00:21:02,960 --> 00:21:03,840
to make sure

621
00:21:03,840 --> 00:21:06,159
all other motives also think it is safe

622
00:21:06,159 --> 00:21:07,440
to delete

623
00:21:07,440 --> 00:21:09,280
so in fact we have an extra round of

624
00:21:09,280 --> 00:21:11,600
communication that is hidden here

625
00:21:11,600 --> 00:21:13,600
in the system that we attacked this step

626
00:21:13,600 --> 00:21:15,120
was missing

627
00:21:15,120 --> 00:21:18,159
let's see the attack we start the same

628
00:21:18,159 --> 00:21:20,000
as before with establishing the secret

629
00:21:20,000 --> 00:21:20,480
chairs

630
00:21:20,480 --> 00:21:24,559
xxx bxc however now a malicious party

631
00:21:24,559 --> 00:21:26,000
represented here by

632
00:21:26,000 --> 00:21:28,799
convillius daniel on top taking over the

633
00:21:28,799 --> 00:21:31,039
moti that holds xc

634
00:21:31,039 --> 00:21:32,960
can and can send different messages to

635
00:21:32,960 --> 00:21:34,720
different parties

636
00:21:34,720 --> 00:21:37,360
in the figure the left side moti gets a

637
00:21:37,360 --> 00:21:38,799
correct message

638
00:21:38,799 --> 00:21:41,520
and therefore deletes his old chair

639
00:21:41,520 --> 00:21:42,480
however the moti

640
00:21:42,480 --> 00:21:44,720
on the right gets a corrupted message

641
00:21:44,720 --> 00:21:46,799
and decides to abort the protocol

642
00:21:46,799 --> 00:21:49,280
keeping his old feature while not

643
00:21:49,280 --> 00:21:51,200
visible in the figure it is important to

644
00:21:51,200 --> 00:21:53,840
say that the multi-detection

645
00:21:53,840 --> 00:21:55,919
of a corrupted message is enabled due to

646
00:21:55,919 --> 00:21:58,799
the check done as part of the vss

647
00:21:58,799 --> 00:22:02,799
primitive as a result the invariant is

648
00:22:02,799 --> 00:22:04,000
now broken

649
00:22:04,000 --> 00:22:06,799
y prime is no longer equal to y and the

650
00:22:06,799 --> 00:22:09,280
key is effectively deleted

651
00:22:09,280 --> 00:22:11,200
the outcome in practice is that by

652
00:22:11,200 --> 00:22:13,760
trying to refresh the private key shares

653
00:22:13,760 --> 00:22:16,000
we end up with a situation where it is

654
00:22:16,000 --> 00:22:18,159
impossible to recover the private key

655
00:22:18,159 --> 00:22:20,640
or to put it into any use such as to

656
00:22:20,640 --> 00:22:22,720
sign transactions spending the amount

657
00:22:22,720 --> 00:22:25,679
locked under the original private key a

658
00:22:25,679 --> 00:22:26,000
smart

659
00:22:26,000 --> 00:22:28,559
attacker can leverage this situation to

660
00:22:28,559 --> 00:22:30,400
mount a ransom attack

661
00:22:30,400 --> 00:22:32,400
attacking enough parties such that all

662
00:22:32,400 --> 00:22:34,400
honest parties cannot reach the required

663
00:22:34,400 --> 00:22:36,640
threshold to execute a signature

664
00:22:36,640 --> 00:22:39,200
without the involvement of the attacker

665
00:22:39,200 --> 00:22:41,600
for example the attacker can require

666
00:22:41,600 --> 00:22:43,840
half the locked amount to publish its

667
00:22:43,840 --> 00:22:45,919
secret key

668
00:22:45,919 --> 00:22:47,440
so we now move on to describe the next

669
00:22:47,440 --> 00:22:49,919
attack we are now focusing on the hot

670
00:22:49,919 --> 00:22:50,720
wallet scheme

671
00:22:50,720 --> 00:22:53,520
with the exchange and the user both hold

672
00:22:53,520 --> 00:22:54,640
secret shares

673
00:22:54,640 --> 00:22:56,720
of a private key used to sign

674
00:22:56,720 --> 00:22:58,880
transactions on the blockchain

675
00:22:58,880 --> 00:23:00,799
in this example the exchange released

676
00:23:00,799 --> 00:23:01,919
the signed transactions

677
00:23:01,919 --> 00:23:05,120
to the blockchain here again

678
00:23:05,120 --> 00:23:06,640
it is important for the parties to

679
00:23:06,640 --> 00:23:08,559
refresh their secret shares every once

680
00:23:08,559 --> 00:23:09,840
in a while

681
00:23:09,840 --> 00:23:12,159
it could be after every transaction for

682
00:23:12,159 --> 00:23:13,440
example

683
00:23:13,440 --> 00:23:15,200
conceptually this is the same as what we

684
00:23:15,200 --> 00:23:17,440
saw before concretely though

685
00:23:17,440 --> 00:23:19,919
we are looking at a different protocol

686
00:23:19,919 --> 00:23:22,000
earlier we assumed that the key material

687
00:23:22,000 --> 00:23:24,000
needed to be refreshed is a single

688
00:23:24,000 --> 00:23:25,360
random number

689
00:23:25,360 --> 00:23:27,200
but sometimes there are some extra

690
00:23:27,200 --> 00:23:30,240
artifacts that must be refreshed as well

691
00:23:30,240 --> 00:23:32,880
this is the case with this attack let's

692
00:23:32,880 --> 00:23:35,360
look at the concrete details

693
00:23:35,360 --> 00:23:37,760
so here multi on the right and rick on

694
00:23:37,760 --> 00:23:38,720
the left

695
00:23:38,720 --> 00:23:40,640
are two parties playing the exchange and

696
00:23:40,640 --> 00:23:43,360
the user in an honest execution

697
00:23:43,360 --> 00:23:46,240
we start with a two-party key generation

698
00:23:46,240 --> 00:23:48,159
we treat the protocol as black box

699
00:23:48,159 --> 00:23:50,240
as the specific details are not relevant

700
00:23:50,240 --> 00:23:51,520
to the attack

701
00:23:51,520 --> 00:23:53,679
what is important to note is that as

702
00:23:53,679 --> 00:23:55,520
part of the output we introduce another

703
00:23:55,520 --> 00:23:56,799
cryptosystem

704
00:23:56,799 --> 00:23:58,240
marked here in green which is

705
00:23:58,240 --> 00:24:00,480
homomorphic cryptosystem

706
00:24:00,480 --> 00:24:03,279
in particular rick generates a private

707
00:24:03,279 --> 00:24:04,159
key

708
00:24:04,159 --> 00:24:06,000
and multi learns the corresponding

709
00:24:06,000 --> 00:24:07,200
public key

710
00:24:07,200 --> 00:24:10,320
together with the ciphertext c

711
00:24:10,320 --> 00:24:12,559
this cipher text is an encryption of

712
00:24:12,559 --> 00:24:13,600
freak secret

713
00:24:13,600 --> 00:24:17,360
x1 for completeness let's imagine how a

714
00:24:17,360 --> 00:24:19,120
two-party signing protocol would look

715
00:24:19,120 --> 00:24:20,080
like

716
00:24:20,080 --> 00:24:22,080
again treating the protocol itself as a

717
00:24:22,080 --> 00:24:23,600
black box

718
00:24:23,600 --> 00:24:26,640
moti inputs a message to be signed m and

719
00:24:26,640 --> 00:24:28,480
both input to the outputs from the key

720
00:24:28,480 --> 00:24:29,760
generation

721
00:24:29,760 --> 00:24:33,039
as a result both get a signature however

722
00:24:33,039 --> 00:24:35,919
we want to focus on the refresh protocol

723
00:24:35,919 --> 00:24:38,400
this can be seen if we want to fully

724
00:24:38,400 --> 00:24:39,039
refresh

725
00:24:39,039 --> 00:24:40,799
we need to also refresh thermomorphic

726
00:24:40,799 --> 00:24:42,559
cryptosystem parts

727
00:24:42,559 --> 00:24:44,640
otherwise the signing protocol will

728
00:24:44,640 --> 00:24:46,080
simply not work

729
00:24:46,080 --> 00:24:47,679
or another option is that an attacker

730
00:24:47,679 --> 00:24:49,600
will be able to attack one party after

731
00:24:49,600 --> 00:24:50,720
the other

732
00:24:50,720 --> 00:24:52,720
breaking the cryptographic guarantees of

733
00:24:52,720 --> 00:24:55,200
the rotation

734
00:24:55,200 --> 00:24:57,200
double clicking on the refresh protocol

735
00:24:57,200 --> 00:24:59,039
we see that as part of generating the

736
00:24:59,039 --> 00:25:00,159
new state

737
00:25:00,159 --> 00:25:02,080
rick must prove to moti that the

738
00:25:02,080 --> 00:25:03,440
encryption was done

739
00:25:03,440 --> 00:25:06,960
in a proper manner that is proving

740
00:25:06,960 --> 00:25:10,159
c prime is an encryption of x1 prime

741
00:25:10,159 --> 00:25:12,400
without revealing x1 prime or the

742
00:25:12,400 --> 00:25:13,440
decryption key

743
00:25:13,440 --> 00:25:16,880
dk prime the problem is

744
00:25:16,880 --> 00:25:19,120
this zero knowledge proof is highly

745
00:25:19,120 --> 00:25:21,520
expensive

746
00:25:21,520 --> 00:25:23,360
in the code we examined a shortcut was

747
00:25:23,360 --> 00:25:24,559
suggested

748
00:25:24,559 --> 00:25:26,320
the id is really cool and is using

749
00:25:26,320 --> 00:25:28,159
demographic properties of the encryption

750
00:25:28,159 --> 00:25:29,279
scheme

751
00:25:29,279 --> 00:25:32,400
in short instead of proving c new c

752
00:25:32,400 --> 00:25:32,880
prime

753
00:25:32,880 --> 00:25:35,520
structure from scratch we can just prove

754
00:25:35,520 --> 00:25:36,240
a relation

755
00:25:36,240 --> 00:25:39,679
between c new and c old unfortunately

756
00:25:39,679 --> 00:25:42,480
they use the wrong proof what they

757
00:25:42,480 --> 00:25:43,120
achieve

758
00:25:43,120 --> 00:25:44,799
is that the attacker can now convince

759
00:25:44,799 --> 00:25:46,159
the other party

760
00:25:46,159 --> 00:25:48,400
really efficiently that the cipher text

761
00:25:48,400 --> 00:25:51,600
is an encryption of anything

762
00:25:51,600 --> 00:25:53,360
so this is how the export works at a

763
00:25:53,360 --> 00:25:54,880
high level

764
00:25:54,880 --> 00:25:56,799
we require moti to allow us to call

765
00:25:56,799 --> 00:25:58,559
two-party rotation and two-part is

766
00:25:58,559 --> 00:25:59,120
signing

767
00:25:59,120 --> 00:26:02,159
multiple times each time we will change

768
00:26:02,159 --> 00:26:03,360
the encrypted value

769
00:26:03,360 --> 00:26:06,159
and try to obtain a signature we get

770
00:26:06,159 --> 00:26:08,559
some information from each such query

771
00:26:08,559 --> 00:26:11,120
hopefully one bit until eventually we

772
00:26:11,120 --> 00:26:13,200
are able to extract large parts of the

773
00:26:13,200 --> 00:26:15,200
private key

774
00:26:15,200 --> 00:26:17,919
to summarize this attack we started with

775
00:26:17,919 --> 00:26:18,640
a system

776
00:26:18,640 --> 00:26:20,320
that distributes the signing between the

777
00:26:20,320 --> 00:26:22,080
user and the exchange

778
00:26:22,080 --> 00:26:24,400
when we allow to rotate the private keys

779
00:26:24,400 --> 00:26:26,400
the exchange hijack hijacks the user

780
00:26:26,400 --> 00:26:28,720
secret key

781
00:26:28,720 --> 00:26:31,279
which mean it now can sign transactions

782
00:26:31,279 --> 00:26:33,520
without the user involvement at all

783
00:26:33,520 --> 00:26:35,200
effectively an attacker that attacks the

784
00:26:35,200 --> 00:26:37,279
exchange will be able to extract all the

785
00:26:37,279 --> 00:26:38,640
keys of all the users

786
00:26:38,640 --> 00:26:40,720
given enough time breaking the

787
00:26:40,720 --> 00:26:42,480
distributed trust guaranteed

788
00:26:42,480 --> 00:26:44,960
from the cryptography we name this

789
00:26:44,960 --> 00:26:46,559
attack ladder rinse repeat

790
00:26:46,559 --> 00:26:48,480
since to mount it we're required to run

791
00:26:48,480 --> 00:26:49,760
two protocols

792
00:26:49,760 --> 00:26:52,000
therefore ladder and rinse and repeat

793
00:26:52,000 --> 00:26:54,640
them many times

794
00:26:54,640 --> 00:26:56,240
we now move on to describe the last

795
00:26:56,240 --> 00:26:58,880
attack if you recall this attack works

796
00:26:58,880 --> 00:27:00,559
in multiple scenarios

797
00:27:00,559 --> 00:27:02,640
however we chose to demonstrate it in

798
00:27:02,640 --> 00:27:04,720
the specific case of four parties

799
00:27:04,720 --> 00:27:07,360
running tss among themselves whenever

800
00:27:07,360 --> 00:27:08,320
one of the parties

801
00:27:08,320 --> 00:27:10,080
needs to sign a message and send it to

802
00:27:10,080 --> 00:27:12,639
the blockchain

803
00:27:12,799 --> 00:27:14,720
to explain the attack we recall that in

804
00:27:14,720 --> 00:27:16,480
our kind of real life protocols

805
00:27:16,480 --> 00:27:18,720
it is required that every participant

806
00:27:18,720 --> 00:27:20,000
must prove

807
00:27:20,000 --> 00:27:21,840
it ran each computation according to the

808
00:27:21,840 --> 00:27:23,600
protocol

809
00:27:23,600 --> 00:27:25,279
in the first attack this was part of the

810
00:27:25,279 --> 00:27:27,520
vss where each party sent a proof

811
00:27:27,520 --> 00:27:28,720
together

812
00:27:28,720 --> 00:27:31,600
with a random value in the second attack

813
00:27:31,600 --> 00:27:34,159
it was the zero knowledge proof in the

814
00:27:34,159 --> 00:27:35,919
current attack we described a step like

815
00:27:35,919 --> 00:27:37,520
this was missing

816
00:27:37,520 --> 00:27:39,440
it is not all the time that a concrete

817
00:27:39,440 --> 00:27:40,880
vulnerability can be derived

818
00:27:40,880 --> 00:27:42,720
directly from a missing zero knowledge

819
00:27:42,720 --> 00:27:47,039
proof but here we show one such example

820
00:27:47,039 --> 00:27:51,120
let's look at the details so here rick

821
00:27:51,120 --> 00:27:53,919
rix play honest parties there is first a

822
00:27:53,919 --> 00:27:54,960
setup phase

823
00:27:54,960 --> 00:27:56,640
this happens during the distributed key

824
00:27:56,640 --> 00:27:58,080
generation

825
00:27:58,080 --> 00:28:00,799
each party generates parameters nh1 and

826
00:28:00,799 --> 00:28:01,600
h2

827
00:28:01,600 --> 00:28:04,159
and share them with the other parties in

828
00:28:04,159 --> 00:28:04,880
the figure

829
00:28:04,880 --> 00:28:07,679
we show we show only we show it only for

830
00:28:07,679 --> 00:28:09,360
the rick on top

831
00:28:09,360 --> 00:28:11,279
these parameters will later be used by

832
00:28:11,279 --> 00:28:13,200
the receiver to generate some proofs in

833
00:28:13,200 --> 00:28:15,679
the distributed signing

834
00:28:15,679 --> 00:28:18,559
during signing each party takes the nh1

835
00:28:18,559 --> 00:28:19,200
and h2

836
00:28:19,200 --> 00:28:21,600
received from each counterparty probably

837
00:28:21,600 --> 00:28:23,200
now saved in memory

838
00:28:23,200 --> 00:28:25,039
and sends some proofs using these

839
00:28:25,039 --> 00:28:26,320
parameters

840
00:28:26,320 --> 00:28:30,000
in the figure we use f31 to abstract

841
00:28:30,000 --> 00:28:32,240
the exact data sent from the left trick

842
00:28:32,240 --> 00:28:33,440
to the rick on top

843
00:28:33,440 --> 00:28:35,200
what is important to our attack is that

844
00:28:35,200 --> 00:28:37,600
this is a function that depends on nh1

845
00:28:37,600 --> 00:28:39,120
and h2

846
00:28:39,120 --> 00:28:41,679
therefore data goes in two steps at

847
00:28:41,679 --> 00:28:42,559
first

848
00:28:42,559 --> 00:28:44,720
during key generation at the beginning

849
00:28:44,720 --> 00:28:45,600
of time

850
00:28:45,600 --> 00:28:47,840
the attacker sends nh1 and h2 to the

851
00:28:47,840 --> 00:28:49,200
rest of the parties

852
00:28:49,200 --> 00:28:51,039
they can be anything because there is no

853
00:28:51,039 --> 00:28:53,360
check in the implementation

854
00:28:53,360 --> 00:28:55,840
the second step is to receive proofs

855
00:28:55,840 --> 00:28:56,880
from all the parties

856
00:28:56,880 --> 00:29:00,000
during a single threshold signature from

857
00:29:00,000 --> 00:29:00,559
each

858
00:29:00,559 --> 00:29:02,960
such proof the attacker will extract the

859
00:29:02,960 --> 00:29:05,520
secret key share

860
00:29:05,520 --> 00:29:07,360
to summarize this attack we start with a

861
00:29:07,360 --> 00:29:09,120
key distributed between the different

862
00:29:09,120 --> 00:29:10,320
parties

863
00:29:10,320 --> 00:29:12,240
after the attack all key shares will be

864
00:29:12,240 --> 00:29:14,320
copied into a single location

865
00:29:14,320 --> 00:29:15,919
which means that the attacker will be

866
00:29:15,919 --> 00:29:17,600
able to sign transactions

867
00:29:17,600 --> 00:29:20,240
ignoring all other parties we derived

868
00:29:20,240 --> 00:29:22,000
enabled for this attack because a simple

869
00:29:22,000 --> 00:29:22,799
one-time message

870
00:29:22,799 --> 00:29:26,159
at game time lets one party with it all

871
00:29:26,159 --> 00:29:29,919
next up is jp with some recommendations

872
00:29:29,919 --> 00:29:31,600
so to conclude we would like to share

873
00:29:31,600 --> 00:29:33,360
some general advice to help you

874
00:29:33,360 --> 00:29:35,600
avoid the kind of security problem that

875
00:29:35,600 --> 00:29:36,480
omer just

876
00:29:36,480 --> 00:29:39,200
described so first of all minimize

877
00:29:39,200 --> 00:29:40,159
complexity

878
00:29:40,159 --> 00:29:42,080
so it's quite common place in security

879
00:29:42,080 --> 00:29:44,320
and it's of course easier said than done

880
00:29:44,320 --> 00:29:46,320
but it's still important as it's the

881
00:29:46,320 --> 00:29:48,240
source of a lot of headaches

882
00:29:48,240 --> 00:29:50,320
and wasted time artists from my

883
00:29:50,320 --> 00:29:52,000
perspective as a security

884
00:29:52,000 --> 00:29:54,640
auditor so a lot of this crypto is by

885
00:29:54,640 --> 00:29:57,360
definition quite complex as you've seen

886
00:29:57,360 --> 00:29:58,960
but you can still minimize sometimes the

887
00:29:58,960 --> 00:30:01,360
complexity by avoiding implementing

888
00:30:01,360 --> 00:30:03,360
user stuff uh for example only

889
00:30:03,360 --> 00:30:04,640
implementing what you need

890
00:30:04,640 --> 00:30:07,279
and also by avoiding useless levels of

891
00:30:07,279 --> 00:30:08,159
abstraction

892
00:30:08,159 --> 00:30:10,320
by not into introducing new terminology

893
00:30:10,320 --> 00:30:11,440
or new notation

894
00:30:11,440 --> 00:30:13,840
for example by using the same symbols as

895
00:30:13,840 --> 00:30:14,720
in the paper

896
00:30:14,720 --> 00:30:16,960
it makes things a lot easier so the

897
00:30:16,960 --> 00:30:18,240
second point here is about

898
00:30:18,240 --> 00:30:21,279
uh languages about coding so i

899
00:30:21,279 --> 00:30:23,440
completely agree with max's point where

900
00:30:23,440 --> 00:30:26,240
he he says that code should be optimized

901
00:30:26,240 --> 00:30:29,039
for readability instead of writability

902
00:30:29,039 --> 00:30:31,360
so what it means is that instead of

903
00:30:31,360 --> 00:30:33,520
aiming to have like the most elegant or

904
00:30:33,520 --> 00:30:34,960
the most conscious chord

905
00:30:34,960 --> 00:30:37,919
you want to prioritize code clarity uh

906
00:30:37,919 --> 00:30:39,520
as it will make it much easier for the

907
00:30:39,520 --> 00:30:41,440
auditors for anyone to understand what

908
00:30:41,440 --> 00:30:42,480
your code is doing

909
00:30:42,480 --> 00:30:45,200
and also to find bugs learning so be it

910
00:30:45,200 --> 00:30:47,440
purely logical bugs or bugs specific to

911
00:30:47,440 --> 00:30:50,559
the language being used

912
00:30:50,559 --> 00:30:53,760
this part is about a class of bug that

913
00:30:53,760 --> 00:30:56,880
we found and which are related to

914
00:30:56,880 --> 00:30:59,120
the understanding of the academic paper

915
00:30:59,120 --> 00:31:00,880
sometimes the academic paper

916
00:31:00,880 --> 00:31:04,640
that you implement is very correct

917
00:31:04,640 --> 00:31:07,679
in terms of academic correctness but

918
00:31:07,679 --> 00:31:09,120
nonetheless ends up in something

919
00:31:09,120 --> 00:31:11,279
completely unsafe so how can it happen

920
00:31:11,279 --> 00:31:13,120
so there are three main classes of

921
00:31:13,120 --> 00:31:15,039
problems here the first one is

922
00:31:15,039 --> 00:31:17,039
the fact that the papers they will

923
00:31:17,039 --> 00:31:18,559
usually not describe

924
00:31:18,559 --> 00:31:20,880
how you encode data how you pass the

925
00:31:20,880 --> 00:31:22,399
serialized data

926
00:31:22,399 --> 00:31:24,720
and that's also where a lot of security

927
00:31:24,720 --> 00:31:26,640
problems happen

928
00:31:26,640 --> 00:31:29,039
also some people describe a protocol in

929
00:31:29,039 --> 00:31:30,480
terms of

930
00:31:30,480 --> 00:31:32,320
generic security level but without

931
00:31:32,320 --> 00:31:34,240
giving you a concrete instance without

932
00:31:34,240 --> 00:31:36,320
giving you concrete parameters and it's

933
00:31:36,320 --> 00:31:38,080
your role to find the good parameters

934
00:31:38,080 --> 00:31:39,440
the choice of primitives for example

935
00:31:39,440 --> 00:31:40,000
which the

936
00:31:40,000 --> 00:31:42,159
curve to use which hash function to use

937
00:31:42,159 --> 00:31:44,159
uh which keysights to use

938
00:31:44,159 --> 00:31:45,519
so you want to make sure that you pick

939
00:31:45,519 --> 00:31:47,519
parameters that

940
00:31:47,519 --> 00:31:49,679
end up in a scheme that is secure enough

941
00:31:49,679 --> 00:31:51,679
for example if you aim for 128 bit

942
00:31:51,679 --> 00:31:52,799
security level

943
00:31:52,799 --> 00:31:54,080
you want to make sure that all your

944
00:31:54,080 --> 00:31:56,320
components will guarantee this security

945
00:31:56,320 --> 00:31:57,600
level

946
00:31:57,600 --> 00:31:59,440
and the third bullet here complete or

947
00:31:59,440 --> 00:32:00,880
confusing definition

948
00:32:00,880 --> 00:32:03,919
is illustrated by this example of a zero

949
00:32:03,919 --> 00:32:04,880
knowledge

950
00:32:04,880 --> 00:32:08,399
proof of factorization whereby approver

951
00:32:08,399 --> 00:32:10,159
proved to a verifier that they know the

952
00:32:10,159 --> 00:32:13,200
factorization of some rsc models

953
00:32:13,200 --> 00:32:15,279
so which means without leaking the

954
00:32:15,279 --> 00:32:16,240
factors

955
00:32:16,240 --> 00:32:18,320
the problem here is as you can see in

956
00:32:18,320 --> 00:32:19,679
the small crane cap

957
00:32:19,679 --> 00:32:22,399
there's a common input capital n the

958
00:32:22,399 --> 00:32:24,080
problem is that

959
00:32:24,080 --> 00:32:26,159
the autos of the paper had one

960
00:32:26,159 --> 00:32:28,000
understanding of common input

961
00:32:28,000 --> 00:32:29,440
but they did not describe it in the

962
00:32:29,440 --> 00:32:32,000
paper so what they understood is that

963
00:32:32,000 --> 00:32:35,279
common input was a value magically given

964
00:32:35,279 --> 00:32:37,039
to both the approver and verifier

965
00:32:37,039 --> 00:32:38,640
beforehand and not controlled by

966
00:32:38,640 --> 00:32:39,600
approver

967
00:32:39,600 --> 00:32:41,679
however the implementer they understood

968
00:32:41,679 --> 00:32:43,200
that common input was just a random

969
00:32:43,200 --> 00:32:44,320
value

970
00:32:44,320 --> 00:32:46,799
potentially chosen by the prover the

971
00:32:46,799 --> 00:32:48,080
problem is that if you do it

972
00:32:48,080 --> 00:32:49,840
with this weight it becomes completely

973
00:32:49,840 --> 00:32:51,519
insecure and completely broken

974
00:32:51,519 --> 00:32:53,760
because anyone can forge a proof so

975
00:32:53,760 --> 00:32:54,559
that's a

976
00:32:54,559 --> 00:32:56,880
very good example of something that is

977
00:32:56,880 --> 00:32:57,760
safe on paper

978
00:32:57,760 --> 00:33:00,960
and completely insecure in practice so

979
00:33:00,960 --> 00:33:03,039
to conclude this part um maybe a

980
00:33:03,039 --> 00:33:04,159
disclaimer we don't

981
00:33:04,159 --> 00:33:06,799
we don't mean to recommend against npc

982
00:33:06,799 --> 00:33:08,000
and tss

983
00:33:08,000 --> 00:33:09,519
these are really great technologies that

984
00:33:09,519 --> 00:33:11,840
can sometimes provide you with much

985
00:33:11,840 --> 00:33:13,519
higher security level

986
00:33:13,519 --> 00:33:15,519
but at the same time they are also

987
00:33:15,519 --> 00:33:17,120
relatively recent

988
00:33:17,120 --> 00:33:19,600
in terms of real-world applications and

989
00:33:19,600 --> 00:33:21,279
we're still learning a lot about

990
00:33:21,279 --> 00:33:23,919
how to improve the security in terms of

991
00:33:23,919 --> 00:33:27,679
procedures and in terms of card safety

992
00:33:27,679 --> 00:33:30,159
so if you have questions about this talk

993
00:33:30,159 --> 00:33:31,919
feel free to contact us directly

994
00:33:31,919 --> 00:33:33,360
you will also find more details in the

995
00:33:33,360 --> 00:33:34,960
paper and

996
00:33:34,960 --> 00:33:36,320
i would like to thank you for following

997
00:33:36,320 --> 00:33:38,480
this this talk in this unusual setting

998
00:33:38,480 --> 00:33:41,120
thank you very much

999
00:33:43,279 --> 00:33:46,399
hello everyone i don't know how many is

1000
00:33:46,399 --> 00:33:47,919
watching

1001
00:33:47,919 --> 00:33:49,919
we have a few minutes left to take

1002
00:33:49,919 --> 00:33:51,039
questions

1003
00:33:51,039 --> 00:33:53,519
i'm looking at the uh what's called swap

1004
00:33:53,519 --> 00:33:55,760
card thing i don't see many questions

1005
00:33:55,760 --> 00:33:59,200
um but maybe what we can

1006
00:33:59,200 --> 00:34:01,519
say after this presentation is um i mean

1007
00:34:01,519 --> 00:34:03,279
if you're using this kind of solution or

1008
00:34:03,279 --> 00:34:05,039
if using different solutions

1009
00:34:05,039 --> 00:34:06,880
uh from our experience in practice

1010
00:34:06,880 --> 00:34:08,239
what's very important

1011
00:34:08,239 --> 00:34:10,239
even if you use mpc or tss if you have

1012
00:34:10,239 --> 00:34:11,918
this kind of distributed decentralized

1013
00:34:11,918 --> 00:34:12,879
setup

1014
00:34:12,879 --> 00:34:15,599
is still very important to make backups

1015
00:34:15,599 --> 00:34:16,879
and to have bcp

1016
00:34:16,879 --> 00:34:20,079
drp plans um because

1017
00:34:20,079 --> 00:34:22,000
you already have some key to um to

1018
00:34:22,000 --> 00:34:24,719
protect and

1019
00:34:24,719 --> 00:34:26,719
it might still happen that some of these

1020
00:34:26,719 --> 00:34:27,918
devices

1021
00:34:27,918 --> 00:34:29,599
go offline or that you just accept to

1022
00:34:29,599 --> 00:34:31,839
these data devices so you always need to

1023
00:34:31,839 --> 00:34:33,599
have backups whether you use tss or not

1024
00:34:33,599 --> 00:34:34,000
it's not

1025
00:34:34,000 --> 00:34:35,679
it's not a trick to avoid making backups

1026
00:34:35,679 --> 00:34:38,399
and having a proper recovery system

1027
00:34:38,399 --> 00:34:42,079
uh i see some no not questions comments

1028
00:34:42,079 --> 00:34:44,879
um yeah and also what may be obvious but

1029
00:34:44,879 --> 00:34:45,440
that we

1030
00:34:45,440 --> 00:34:47,440
want to say if you follow the news

1031
00:34:47,440 --> 00:34:49,440
recently there's been some uh

1032
00:34:49,440 --> 00:34:52,079
51 percent attacks on uh ethereum

1033
00:34:52,079 --> 00:34:52,639
classic

1034
00:34:52,639 --> 00:34:55,599
dc so of course you you can throw crypto

1035
00:34:55,599 --> 00:34:56,399
at the

1036
00:34:56,399 --> 00:34:58,560
let's say at your wallet put some gss

1037
00:34:58,560 --> 00:35:00,079
npc you name it

1038
00:35:00,079 --> 00:35:01,440
but if you have an attack on the

1039
00:35:01,440 --> 00:35:03,040
blockchain behind if your deduction

1040
00:35:03,040 --> 00:35:03,760
sucks

1041
00:35:03,760 --> 00:35:05,920
then no amount of crypto in your wallet

1042
00:35:05,920 --> 00:35:07,359
will save you so you also want to be

1043
00:35:07,359 --> 00:35:08,160
careful

1044
00:35:08,160 --> 00:35:10,480
um you know with which uh asset with

1045
00:35:10,480 --> 00:35:12,400
which cryptocurrency you you walk

1046
00:35:12,400 --> 00:35:14,240
and also if you have some privacy if you

1047
00:35:14,240 --> 00:35:16,560
have some currency that is not

1048
00:35:16,560 --> 00:35:19,920
anonymous such as bitcoin then npc will

1049
00:35:19,920 --> 00:35:21,280
not protect you against it that's quite

1050
00:35:21,280 --> 00:35:23,040
obvious but uh

1051
00:35:23,040 --> 00:35:25,520
um where can we find a link to the paper

1052
00:35:25,520 --> 00:35:27,359
a good question uh it should appear on

1053
00:35:27,359 --> 00:35:29,119
the black hat website uh

1054
00:35:29,119 --> 00:35:31,920
in the next hours or maybe tomorrow and

1055
00:35:31,920 --> 00:35:32,960
usually they'll

1056
00:35:32,960 --> 00:35:34,880
usually put it online uh the day after

1057
00:35:34,880 --> 00:35:36,240
or two hours later

1058
00:35:36,240 --> 00:35:38,480
uh we just put the slides online there's

1059
00:35:38,480 --> 00:35:40,240
the link on my twitter

1060
00:35:40,240 --> 00:35:44,320
and uh in the swap car interface um

1061
00:35:44,320 --> 00:35:45,839
so you can look for it and then again if

1062
00:35:45,839 --> 00:35:47,280
you have questions everything feel free

1063
00:35:47,280 --> 00:35:48,880
to contact us

1064
00:35:48,880 --> 00:35:50,480
uh we'll be happy to talk about it you

1065
00:35:50,480 --> 00:35:52,000
see we like talking about crypto but

1066
00:35:52,000 --> 00:35:53,440
blockchain

1067
00:35:53,440 --> 00:35:56,480
can stop us so yeah so we have the the

1068
00:35:56,480 --> 00:35:58,079
paper online we have documentation on

1069
00:35:58,079 --> 00:35:58,960
github

1070
00:35:58,960 --> 00:36:02,000
as you can see on the chat so yeah hope

1071
00:36:02,000 --> 00:36:03,359
it was useful to

1072
00:36:03,359 --> 00:36:06,960
to you and uh hope to see online or

1073
00:36:06,960 --> 00:36:13,839
in person next year

1074
00:36:22,800 --> 00:36:26,640
looking for questions

1075
00:36:26,640 --> 00:36:30,160
oh have you seen any of these attacks

1076
00:36:30,160 --> 00:36:33,680
in the wild um

1077
00:36:33,680 --> 00:36:37,359
i have not um

1078
00:36:38,400 --> 00:36:41,040
i don't know if omer has a different

1079
00:36:41,040 --> 00:36:43,759
perspective

1080
00:36:52,839 --> 00:36:55,839
um

1081
00:37:04,640 --> 00:37:06,800
uh supposing the privacy can be avoided

1082
00:37:06,800 --> 00:37:09,440
by creating storing keys in hsn

1083
00:37:09,440 --> 00:37:13,839
um yeah if you put keys in hsn

1084
00:37:13,839 --> 00:37:16,720
um you need to use data you need to use

1085
00:37:16,720 --> 00:37:17,920
hardware some

1086
00:37:17,920 --> 00:37:21,040
hardware hsns which can get you quite a

1087
00:37:21,040 --> 00:37:22,400
high level of security

1088
00:37:22,400 --> 00:37:24,960
and you can also combine uh thresholds

1089
00:37:24,960 --> 00:37:26,800
circuit threshold signatures

1090
00:37:26,800 --> 00:37:29,599
with hsns so again it depends on your

1091
00:37:29,599 --> 00:37:31,760
use case or your on your model

1092
00:37:31,760 --> 00:37:33,520
on what you need also in terms of hot

1093
00:37:33,520 --> 00:37:36,560
wallet cold wallet

1094
00:37:37,680 --> 00:37:41,359
all the broken called open source um

1095
00:37:41,359 --> 00:37:43,359
to most of it we did not do reverse

1096
00:37:43,359 --> 00:37:45,920
engineering from binaries to um

1097
00:37:45,920 --> 00:37:50,960
to look at this code

1098
00:37:50,960 --> 00:37:53,839
uh any cryptocurrency more than they're

1099
00:37:53,839 --> 00:37:55,760
able

1100
00:37:55,760 --> 00:37:59,200
um not three so in this case these

1101
00:37:59,200 --> 00:38:00,800
attacks they are specific to the wallet

1102
00:38:00,800 --> 00:38:01,760
technology

1103
00:38:01,760 --> 00:38:04,800
they are not directly tied to um

1104
00:38:04,800 --> 00:38:08,320
to an in specific blockchain um

1105
00:38:08,320 --> 00:38:10,000
they are related to one signing screen

1106
00:38:10,000 --> 00:38:13,599
so they might apply to each dsid2519

1107
00:38:13,599 --> 00:38:15,119
uh some more terrain about

1108
00:38:15,119 --> 00:38:18,079
cryptocurrency security um

1109
00:38:18,079 --> 00:38:33,280
no specific comments are very hard

1110
00:38:33,280 --> 00:38:36,160
i want to say that about the question of

1111
00:38:36,160 --> 00:38:37,680
how many cryptographers

1112
00:38:37,680 --> 00:38:40,320
are involved in development of such

1113
00:38:40,320 --> 00:38:41,520
libraries

1114
00:38:41,520 --> 00:38:45,599
so it's really good question because uh

1115
00:38:45,599 --> 00:38:47,119
to find cryptographers applied

1116
00:38:47,119 --> 00:38:48,880
photographers it's uh

1117
00:38:48,880 --> 00:38:51,200
they are there so usually the structure

1118
00:38:51,200 --> 00:38:52,800
of such companies that you have one

1119
00:38:52,800 --> 00:38:54,560
cryptographer that actually is doing the

1120
00:38:54,560 --> 00:38:55,200
work and

1121
00:38:55,200 --> 00:38:57,839
and then like one or two that is doing

1122
00:38:57,839 --> 00:38:58,640
uh

1123
00:38:58,640 --> 00:39:01,599
formal auditing and and you probably

1124
00:39:01,599 --> 00:39:02,560
also

1125
00:39:02,560 --> 00:39:05,119
um have your code reviewed by by some

1126
00:39:05,119 --> 00:39:05,920
other

1127
00:39:05,920 --> 00:39:09,520
um like the theoretical cryptographer

1128
00:39:09,520 --> 00:39:12,960
what and um

1129
00:39:12,960 --> 00:39:15,680
so it mostly comes down to battle

1130
00:39:15,680 --> 00:39:17,200
testing your code so

1131
00:39:17,200 --> 00:39:20,720
um this is where i think most of it

1132
00:39:20,720 --> 00:39:24,240
most of this stuff gets exposed

1133
00:39:24,720 --> 00:39:27,760
so someone asked if we've looked at

1134
00:39:27,760 --> 00:39:28,720
another uh

1135
00:39:28,720 --> 00:39:31,839
custody uh cloud-based water solution

1136
00:39:31,839 --> 00:39:35,440
that i may not name uh we have not i

1137
00:39:35,440 --> 00:39:37,920
don't know if it's open source

1138
00:39:37,920 --> 00:39:43,839
you know i don't know much about yeah

1139
00:39:52,160 --> 00:39:55,280
mitigation a good secure dlc process

1140
00:39:55,280 --> 00:39:56,079
maybe do some

1141
00:39:56,079 --> 00:39:59,040
audits and hire good people and test

1142
00:39:59,040 --> 00:40:00,160
that's your goal

1143
00:40:00,160 --> 00:40:03,200
understand what your

1144
00:40:03,359 --> 00:40:07,359
and hope for the best

