1
00:00:00,060 --> 00:00:21,359
this session is breaking Samsung's arm

2
00:00:03,540 --> 00:00:27,240
trust zone with Maxine Peterman all

3
00:00:21,359 --> 00:00:28,439
right all right good afternoon everyone

4
00:00:27,240 --> 00:00:31,500
thanks for coming to this presentation

5
00:00:28,439 --> 00:00:33,690
about breaking Samsung Amazon

6
00:00:31,500 --> 00:00:35,160
my name is Maksim potala I'm working at

7
00:00:33,690 --> 00:00:37,230
quarks lab which is a French security

8
00:00:35,160 --> 00:00:39,029
company and I've been working on this

9
00:00:37,230 --> 00:00:40,949
subject for about a year with two of my

10
00:00:39,030 --> 00:00:43,379
colleagues Alex Adams key and refer get

11
00:00:40,950 --> 00:00:45,149
more so our agenda for today this is the

12
00:00:43,379 --> 00:00:46,949
following first I'll talk about the

13
00:00:45,149 --> 00:00:49,170
current state of emitted security to

14
00:00:46,950 --> 00:00:51,210
give you an idea of where Troezen is

15
00:00:49,170 --> 00:00:53,460
coming from and why do we need it

16
00:00:51,210 --> 00:00:55,590
then I'll introduce the actual arm

17
00:00:53,460 --> 00:00:57,300
chosen technology give you a year of

18
00:00:55,590 --> 00:01:00,149
hobby the entrant knows what the

19
00:00:57,300 --> 00:01:02,640
internals are then I'll focus on

20
00:01:00,149 --> 00:01:04,949
Samson's trustzone implementation and

21
00:01:02,640 --> 00:01:07,040
after that we'll talk about vanity

22
00:01:04,949 --> 00:01:10,770
research tool developments and

23
00:01:07,040 --> 00:01:12,810
exploitation so let's start with the

24
00:01:10,770 --> 00:01:14,670
current state of embedded security so a

25
00:01:12,810 --> 00:01:16,830
long time ago we used to have this

26
00:01:14,670 --> 00:01:19,320
traditional architecture with everything

27
00:01:16,830 --> 00:01:22,650
inside the kernel so we had secrets we

28
00:01:19,320 --> 00:01:23,908
add security medications etc and they

29
00:01:22,650 --> 00:01:26,030
did that because they thought about well

30
00:01:23,909 --> 00:01:28,979
the kernel is really hard to break into

31
00:01:26,030 --> 00:01:32,460
so just like let's put everything in

32
00:01:28,979 --> 00:01:34,259
there but as it has been a shown time

33
00:01:32,460 --> 00:01:36,089
and time again parallel is not

34
00:01:34,259 --> 00:01:38,159
applicable and if you're able to

35
00:01:36,090 --> 00:01:40,920
compromise it when you have access to

36
00:01:38,159 --> 00:01:42,450
your entire system so at this point we

37
00:01:40,920 --> 00:01:44,909
can ask ourself how do we protect

38
00:01:42,450 --> 00:01:46,439
ourselves if the kernel is corrected

39
00:01:44,909 --> 00:01:47,880
during the boot process while during the

40
00:01:46,439 --> 00:01:51,240
boot process what you can do is

41
00:01:47,880 --> 00:01:54,630
implement mechanisms such as secrets but

42
00:01:51,240 --> 00:01:57,630
if we try to protect our system against

43
00:01:54,630 --> 00:01:59,699
runtime confirmation well it's a little

44
00:01:57,630 --> 00:02:01,289
bit more complicated what you could do

45
00:01:59,700 --> 00:02:03,299
is to use an improvisor

46
00:02:01,290 --> 00:02:06,060
now instead of having your security

47
00:02:03,299 --> 00:02:08,520
instant in inside your operating system

48
00:02:06,060 --> 00:02:10,220
it's now in the hypervisor and now

49
00:02:08,520 --> 00:02:12,050
you're looking over you

50
00:02:10,220 --> 00:02:15,320
virtual machines to make sure that there

51
00:02:12,050 --> 00:02:17,350
is no confirmation but we issues that

52
00:02:15,320 --> 00:02:21,709
that it's still a software implemented

53
00:02:17,350 --> 00:02:24,470
if you have a VM escape or an I provides

54
00:02:21,710 --> 00:02:26,420
a compromising you it's you you you

55
00:02:24,470 --> 00:02:30,380
still have the same issue than as before

56
00:02:26,420 --> 00:02:33,079
and your entire system is compromised at

57
00:02:30,380 --> 00:02:34,490
this point vendors realize that software

58
00:02:33,080 --> 00:02:37,930
is not enough because you can make

59
00:02:34,490 --> 00:02:40,820
mistake when implementing software and I

60
00:02:37,930 --> 00:02:43,190
saw a very large they said that maybe we

61
00:02:40,820 --> 00:02:44,900
can leverage the hardware to to amend

62
00:02:43,190 --> 00:02:47,570
the system other the secretary of the

63
00:02:44,900 --> 00:02:51,200
system and act as some kind of safety

64
00:02:47,570 --> 00:02:54,019
nets and this is where trusted execution

65
00:02:51,200 --> 00:02:55,549
environments came from so we've got

66
00:02:54,020 --> 00:02:57,200
stressed at execution environments

67
00:02:55,550 --> 00:03:00,350
what's going to happen is instead of

68
00:02:57,200 --> 00:03:02,179
having a single state in which your SEP

69
00:03:00,350 --> 00:03:04,670
CPU is running you're going to have two

70
00:03:02,180 --> 00:03:07,060
one is the non secure state so this is

71
00:03:04,670 --> 00:03:10,459
like the regular state where you are

72
00:03:07,060 --> 00:03:12,200
regular non sensitive operations will be

73
00:03:10,460 --> 00:03:14,720
performed and then you're going to have

74
00:03:12,200 --> 00:03:16,970
a second state well all the sensitive

75
00:03:14,720 --> 00:03:18,530
operations will be performed and what's

76
00:03:16,970 --> 00:03:21,290
going to happen is that even if you have

77
00:03:18,530 --> 00:03:23,630
confirmation in non secure States you

78
00:03:21,290 --> 00:03:27,079
won't be able to access the secure state

79
00:03:23,630 --> 00:03:28,630
because the hardware will prevent it so

80
00:03:27,080 --> 00:03:30,739
we can have a different type of

81
00:03:28,630 --> 00:03:32,810
implementation of trusted execution

82
00:03:30,739 --> 00:03:34,550
environments so the first one I'm going

83
00:03:32,810 --> 00:03:36,950
to talk about is the virtual processor

84
00:03:34,550 --> 00:03:40,459
so this is what is going to be used by

85
00:03:36,950 --> 00:03:42,679
our ultra zone in that instrumentation

86
00:03:40,459 --> 00:03:44,090
you have a CPU and you have your system

87
00:03:42,680 --> 00:03:46,850
on ship with all the peripherals our

88
00:03:44,090 --> 00:03:49,940
auto resources and you can separate

89
00:03:46,850 --> 00:03:53,150
these resources into the two state I was

90
00:03:49,940 --> 00:03:55,700
talking about when you can also have an

91
00:03:53,150 --> 00:03:57,890
on stock processor this is pretty much

92
00:03:55,700 --> 00:03:59,839
what is used by Apple in the second

93
00:03:57,890 --> 00:04:02,359
drive at least according to the

94
00:03:59,840 --> 00:04:04,130
documentation and now instead of having

95
00:04:02,360 --> 00:04:06,739
a CPU that can run in two states you

96
00:04:04,130 --> 00:04:08,660
have two CPU and one dedicated to non

97
00:04:06,739 --> 00:04:11,239
sensitive operation so in unsecured

98
00:04:08,660 --> 00:04:13,579
state and one are running in in the

99
00:04:11,239 --> 00:04:16,970
second States and finally you can add an

100
00:04:13,580 --> 00:04:19,010
external coprocessor we have just a

101
00:04:16,970 --> 00:04:21,710
regular system and chip but is running

102
00:04:19,010 --> 00:04:23,960
in non second States

103
00:04:21,709 --> 00:04:25,219
next to that you have a secure core

104
00:04:23,960 --> 00:04:29,900
processor but is going to be dedicated

105
00:04:25,220 --> 00:04:32,090
to over sensitive operations alright so

106
00:04:29,900 --> 00:04:34,640
now let's talk about the actual arm

107
00:04:32,090 --> 00:04:36,429
chosen technology so I'm trans own is a

108
00:04:34,640 --> 00:04:40,130
system-wide Hardware isolation mechanism

109
00:04:36,430 --> 00:04:44,270
meaning that it's going to be based on

110
00:04:40,130 --> 00:04:45,920
two two layers so you have your hardware

111
00:04:44,270 --> 00:04:48,260
architecture so this is what all the

112
00:04:45,920 --> 00:04:50,330
partitioning is going to take place is

113
00:04:48,260 --> 00:04:52,550
where you going to you of your database

114
00:04:50,330 --> 00:04:54,890
your control bus but is going to be

115
00:04:52,550 --> 00:04:57,170
separated into a non circular state and

116
00:04:54,890 --> 00:05:00,140
second States and you also have your

117
00:04:57,170 --> 00:05:01,400
software architecture where you have the

118
00:05:00,140 --> 00:05:02,930
actual software implementation

119
00:05:01,400 --> 00:05:07,460
implementation that you're going to run

120
00:05:02,930 --> 00:05:10,010
in six states so this point I've only

121
00:05:07,460 --> 00:05:14,030
talked about non secure state and second

122
00:05:10,010 --> 00:05:16,370
states what you usually will encounter

123
00:05:14,030 --> 00:05:19,039
actually secure and non-secure worlds

124
00:05:16,370 --> 00:05:20,840
and again so in the second world you

125
00:05:19,040 --> 00:05:22,760
have all the trusted code you have all

126
00:05:20,840 --> 00:05:24,950
those sensitive operations that are

127
00:05:22,760 --> 00:05:28,400
being performed and in the normal world

128
00:05:24,950 --> 00:05:30,680
this is well you will app for example on

129
00:05:28,400 --> 00:05:33,349
Samsungs advices this is where Android

130
00:05:30,680 --> 00:05:35,660
is running you have your normal well

131
00:05:33,350 --> 00:05:37,190
that is considered as compromised by

132
00:05:35,660 --> 00:05:41,690
design and this is where all the non

133
00:05:37,190 --> 00:05:44,240
sensitive operation take place so to

134
00:05:41,690 --> 00:05:46,370
know so the secure or non secure state

135
00:05:44,240 --> 00:05:48,590
of the CPU is going to be determined by

136
00:05:46,370 --> 00:05:51,860
the least significant bits in the secure

137
00:05:48,590 --> 00:05:53,630
configuration register and so this this

138
00:05:51,860 --> 00:05:56,750
significant bit is called the NS bits

139
00:05:53,630 --> 00:05:59,210
and it's going to be clear when you're

140
00:05:56,750 --> 00:06:01,280
running in Sector States and it's going

141
00:05:59,210 --> 00:06:05,299
to be set ran running in non secure

142
00:06:01,280 --> 00:06:07,309
States just a quick reminder on the

143
00:06:05,300 --> 00:06:10,760
privileges separation that exists on arm

144
00:06:07,310 --> 00:06:13,010
system so in mv7 you have what is called

145
00:06:10,760 --> 00:06:15,560
privilege levels and in arm v8 you have

146
00:06:13,010 --> 00:06:17,390
what is called exception levels so this

147
00:06:15,560 --> 00:06:21,080
is just a naming convention it's pretty

148
00:06:17,390 --> 00:06:24,190
much the same thing and I from now on

149
00:06:21,080 --> 00:06:28,190
I'll only talk about exception levels so

150
00:06:24,190 --> 00:06:30,860
in ER zero so exception level 0 you have

151
00:06:28,190 --> 00:06:32,930
all the applications so in the normal

152
00:06:30,860 --> 00:06:35,450
world in the secure world so just

153
00:06:32,930 --> 00:06:37,850
privileged exception level then you have

154
00:06:35,450 --> 00:06:41,870
l1 this is where the operational system

155
00:06:37,850 --> 00:06:44,630
will be then l2 UI provider and then el

156
00:06:41,870 --> 00:06:46,820
3er free only exists in the sector well

157
00:06:44,630 --> 00:06:48,350
there's no elf in the normal world and

158
00:06:46,820 --> 00:06:50,150
this is where you will find your second

159
00:06:48,350 --> 00:06:52,790
money - I'll talk about the second

160
00:06:50,150 --> 00:06:55,880
monitor just after one thing I wanted to

161
00:06:52,790 --> 00:06:59,330
note here is that as you can see there

162
00:06:55,880 --> 00:07:02,000
is no hypervisor in the in the sector

163
00:06:59,330 --> 00:07:05,330
wall this is because at the moment there

164
00:07:02,000 --> 00:07:10,790
is no there's no way our arm does not

165
00:07:05,330 --> 00:07:13,070
provide any way to to do that in the

166
00:07:10,790 --> 00:07:15,610
secure vault currently and this is an

167
00:07:13,070 --> 00:07:18,830
upcoming feature that is coming on the

168
00:07:15,610 --> 00:07:21,620
8.4 with the 8th edition of sake of

169
00:07:18,830 --> 00:07:25,219
options but for the moment what you have

170
00:07:21,620 --> 00:07:27,260
is a privilege escalation by design

171
00:07:25,220 --> 00:07:30,620
meaning that if you have code execution

172
00:07:27,260 --> 00:07:38,150
in SEL 1 you have access to the same

173
00:07:30,620 --> 00:07:41,270
resources as l3 alright so now now we

174
00:07:38,150 --> 00:07:43,789
know how we can commit we can switch

175
00:07:41,270 --> 00:07:45,950
between the two states or how we know

176
00:07:43,790 --> 00:07:48,290
how we can be free or in normal world or

177
00:07:45,950 --> 00:07:50,060
insecure world now how do we do to

178
00:07:48,290 --> 00:07:53,150
communicate between these two these two

179
00:07:50,060 --> 00:07:54,800
words so to do that we are going to use

180
00:07:53,150 --> 00:07:56,890
the sacrimoni term and the second

181
00:07:54,800 --> 00:08:01,150
monitor is going to run at the highest

182
00:07:56,890 --> 00:08:03,890
exception level on an arm platform and

183
00:08:01,150 --> 00:08:05,270
if you want to exchange data between the

184
00:08:03,890 --> 00:08:07,909
normal world in the sector world you

185
00:08:05,270 --> 00:08:10,609
have different mechanisms to do so first

186
00:08:07,910 --> 00:08:13,850
we have explicit calls so visual secure

187
00:08:10,610 --> 00:08:16,670
of monitor call instruction then you

188
00:08:13,850 --> 00:08:19,280
have also interruptions external bots

189
00:08:16,670 --> 00:08:22,100
and if you are in the sector world and

190
00:08:19,280 --> 00:08:25,460
at least in sl1 you can directly write

191
00:08:22,100 --> 00:08:28,100
into our P state register in our v8 over

192
00:08:25,460 --> 00:08:31,969
CPS or register in our p7

193
00:08:28,100 --> 00:08:37,250
risk because it requires certain

194
00:08:31,970 --> 00:08:39,220
privilege to do so alright so now let's

195
00:08:37,250 --> 00:08:41,570
talk about the different software

196
00:08:39,220 --> 00:08:44,270
implementation that you can find in the

197
00:08:41,570 --> 00:08:46,860
second world so in the second world you

198
00:08:44,270 --> 00:08:48,900
can have a full-fledged operating system

199
00:08:46,860 --> 00:08:52,170
so we will secure OS but is going to

200
00:08:48,900 --> 00:08:53,550
load trusted applications and this is

201
00:08:52,170 --> 00:08:56,930
pretty much what you're going to find on

202
00:08:53,550 --> 00:09:00,170
sunghoon's devices on Perkins devices

203
00:08:56,930 --> 00:09:03,050
then you can have a lighter solution

204
00:09:00,170 --> 00:09:05,729
pretty much completely the opposite

205
00:09:03,050 --> 00:09:07,680
where you have a synchronous library

206
00:09:05,730 --> 00:09:10,830
which is going to be used by the normal

207
00:09:07,680 --> 00:09:15,329
world as some kind of sexual API and you

208
00:09:10,830 --> 00:09:18,150
can run cryptographic operations and you

209
00:09:15,330 --> 00:09:19,620
have all you secret keys but are stored

210
00:09:18,150 --> 00:09:21,300
in the secret world and the normal world

211
00:09:19,620 --> 00:09:22,770
cannot access them and this is a way

212
00:09:21,300 --> 00:09:25,530
that you can do a cryptography in the

213
00:09:22,770 --> 00:09:27,329
second manner and an example of such an

214
00:09:25,530 --> 00:09:30,600
implementation will be the Nintendo

215
00:09:27,330 --> 00:09:32,220
switch and finally of the arm

216
00:09:30,600 --> 00:09:35,340
documentation talks about intermediate

217
00:09:32,220 --> 00:09:39,450
options we have never seen something

218
00:09:35,340 --> 00:09:41,310
like like this in practice but in theory

219
00:09:39,450 --> 00:09:42,720
because of the trust on technology is so

220
00:09:41,310 --> 00:09:46,140
flexible you can do pretty much anything

221
00:09:42,720 --> 00:09:51,030
you want but to our knowledge it's not

222
00:09:46,140 --> 00:09:53,670
used that much all right so what is

223
00:09:51,030 --> 00:09:56,850
chosen actually useful well most of the

224
00:09:53,670 --> 00:10:00,449
time trustzone will be used to access

225
00:09:56,850 --> 00:10:02,970
Hardware backed features for example the

226
00:10:00,450 --> 00:10:07,530
cryptographic engine credential storage

227
00:10:02,970 --> 00:10:09,990
trng etc and using these other Bank

228
00:10:07,530 --> 00:10:15,300
features you can start to create more

229
00:10:09,990 --> 00:10:17,280
advanced systems such as DRM and you can

230
00:10:15,300 --> 00:10:19,410
also do things such as protecting and

231
00:10:17,280 --> 00:10:21,089
monitoring the normal world by using the

232
00:10:19,410 --> 00:10:24,270
second row and an example of that would

233
00:10:21,090 --> 00:10:28,320
be Samsung's or KP for real-time kernel

234
00:10:24,270 --> 00:10:31,829
protection and Samsung speaker a PKM for

235
00:10:28,320 --> 00:10:37,500
periodic criminal measurements all right

236
00:10:31,830 --> 00:10:39,840
so now I've talked about Amazon explain

237
00:10:37,500 --> 00:10:42,750
a little bit how it works and now let's

238
00:10:39,840 --> 00:10:44,790
see how they the implementation that has

239
00:10:42,750 --> 00:10:49,110
been done by Samsung

240
00:10:44,790 --> 00:10:51,959
so Samsung devices are a bit particular

241
00:10:49,110 --> 00:10:54,180
because they can either a system

242
00:10:51,960 --> 00:10:57,000
ownership that is made by Samsung so

243
00:10:54,180 --> 00:10:58,769
this is the Exynos sucks and then they

244
00:10:57,000 --> 00:11:01,019
can also use quite Cubs

245
00:10:58,769 --> 00:11:03,809
vagrant the the reason for that is that

246
00:11:01,019 --> 00:11:05,279
depending on the country because of

247
00:11:03,809 --> 00:11:09,118
telecommunication norms because of

248
00:11:05,279 --> 00:11:12,360
patent issues you will have either the

249
00:11:09,119 --> 00:11:14,579
NXT knows our Snapdragon the thing that

250
00:11:12,360 --> 00:11:17,459
is important is to do is to note to note

251
00:11:14,579 --> 00:11:21,449
is that some some stress zone is only

252
00:11:17,459 --> 00:11:23,748
found on Exynos socks otherwise it's

253
00:11:21,449 --> 00:11:27,029
going to be Qualcomm stress zone and

254
00:11:23,749 --> 00:11:31,619
this zone was first used on the samsung

255
00:11:27,029 --> 00:11:34,589
galaxy s3 and the trusted OS but but i

256
00:11:31,619 --> 00:11:36,839
used two different trusted OS the first

257
00:11:34,589 --> 00:11:40,170
one is QB but is developed by Tristana

258
00:11:36,839 --> 00:11:42,739
and you can find this trusted OS from

259
00:11:40,170 --> 00:11:45,628
the galaxy s3 to the galaxy s time and

260
00:11:42,739 --> 00:11:47,850
now they are starting to replace kb by

261
00:11:45,629 --> 00:11:49,860
their own implementation which is called

262
00:11:47,850 --> 00:11:53,879
tigress and you can find this one on the

263
00:11:49,860 --> 00:11:56,509
galaxy s 10 and so I'm only talking

264
00:11:53,879 --> 00:11:59,639
about galaxy models here but these two

265
00:11:56,509 --> 00:12:02,489
trusted OS are used on other phones and

266
00:11:59,639 --> 00:12:07,079
other models - and this talk will focus

267
00:12:02,489 --> 00:12:09,199
exclusively on kimby alright so this

268
00:12:07,079 --> 00:12:11,549
presentation is not the first

269
00:12:09,199 --> 00:12:15,389
publication on the subject there has

270
00:12:11,549 --> 00:12:18,959
already been research done on the

271
00:12:15,389 --> 00:12:22,110
subject before so here i've noted a free

272
00:12:18,959 --> 00:12:25,018
notable example the first one is reverse

273
00:12:22,110 --> 00:12:28,730
engineering samsung s6 s boots biphenyl

274
00:12:25,019 --> 00:12:31,319
and song in this article he explains our

275
00:12:28,730 --> 00:12:32,850
untrusted firmware of a secure monitor

276
00:12:31,319 --> 00:12:35,910
implementation that is used by samsung

277
00:12:32,850 --> 00:12:39,389
works and it also explain how you can

278
00:12:35,910 --> 00:12:40,889
extract the trusted OS from an MTA when

279
00:12:39,389 --> 00:12:43,410
you have unbox your phone by daniel

280
00:12:40,889 --> 00:12:46,410
kumara me where he reversed engineer a

281
00:12:43,410 --> 00:12:49,019
really big part of the TV and the

282
00:12:46,410 --> 00:12:53,459
different components a lot of our work

283
00:12:49,019 --> 00:12:54,929
is based on what he has done and in his

284
00:12:53,459 --> 00:12:56,878
article series he also explained how

285
00:12:54,929 --> 00:12:59,579
exploited vulnerabilities are in some

286
00:12:56,879 --> 00:13:01,589
trust sets and finally various trust

287
00:12:59,579 --> 00:13:02,219
issues exporting trust owns his bike out

288
00:13:01,589 --> 00:13:05,549
on Yamini

289
00:13:02,220 --> 00:13:07,259
and in this in this article he has an a

290
00:13:05,549 --> 00:13:09,319
security analysis of different trusted

291
00:13:07,259 --> 00:13:12,260
execution environments

292
00:13:09,320 --> 00:13:14,480
and one of the really important resolve

293
00:13:12,260 --> 00:13:17,870
that he has found is that there was no

294
00:13:14,480 --> 00:13:19,940
replication in some sixth row so and

295
00:13:17,870 --> 00:13:22,450
what that means is that if you have a

296
00:13:19,940 --> 00:13:25,880
trusted application that is vulnerable

297
00:13:22,450 --> 00:13:27,830
you are still able to load it on the

298
00:13:25,880 --> 00:13:30,140
newest versions of the of the trusted OS

299
00:13:27,830 --> 00:13:31,850
which should not happen because if

300
00:13:30,140 --> 00:13:33,290
you've in reality you patched it you

301
00:13:31,850 --> 00:13:37,250
shouldn't be able to load all the

302
00:13:33,290 --> 00:13:40,699
trusted in the neuro Trussell and now KB

303
00:13:37,250 --> 00:13:44,840
as influences a feature but manages just

304
00:13:40,700 --> 00:13:47,420
that but the issue is that at the moment

305
00:13:44,840 --> 00:13:49,250
there are some trust sets but do not use

306
00:13:47,420 --> 00:13:51,530
that feature meaning that even on the

307
00:13:49,250 --> 00:13:54,170
Galaxy S line you still have replication

308
00:13:51,530 --> 00:13:56,510
problems and if you have Finnerty in the

309
00:13:54,170 --> 00:13:58,790
trusted form I don't know six months ago

310
00:13:56,510 --> 00:14:04,430
you're still able to exploit it in

311
00:13:58,790 --> 00:14:07,130
upstream versions okay so now let's talk

312
00:14:04,430 --> 00:14:09,319
about the architecture of Samsung's

313
00:14:07,130 --> 00:14:10,790
trestle so in the normal world you will

314
00:14:09,320 --> 00:14:13,040
have different components so you have

315
00:14:10,790 --> 00:14:14,990
drivers diamonds libraries interfaces

316
00:14:13,040 --> 00:14:16,250
also going to be used by the normal

317
00:14:14,990 --> 00:14:18,770
world to communicate with the sacred

318
00:14:16,250 --> 00:14:22,100
world the communications are going to

319
00:14:18,770 --> 00:14:26,510
pass through of SMC's and since SM seeds

320
00:14:22,100 --> 00:14:28,610
are cannot they cannot pass a lot of

321
00:14:26,510 --> 00:14:29,900
info of information what's going to

322
00:14:28,610 --> 00:14:32,990
happen is what we are going to use the

323
00:14:29,900 --> 00:14:36,590
SMC s to set up a shared memory buffer

324
00:14:32,990 --> 00:14:41,420
and most of the data will be transferred

325
00:14:36,590 --> 00:14:42,860
using this shared memory buffer then you

326
00:14:41,420 --> 00:14:45,560
have the second monitor implementation

327
00:14:42,860 --> 00:14:47,240
so as I said very very using arm trusted

328
00:14:45,560 --> 00:14:51,229
firmware which is an open source

329
00:14:47,240 --> 00:14:53,390
reference provided by arm and the what

330
00:14:51,230 --> 00:14:55,100
is interesting with wisdom and assurance

331
00:14:53,390 --> 00:14:57,020
that yeah first it's open source so

332
00:14:55,100 --> 00:14:59,300
there are chances but it has been every

333
00:14:57,020 --> 00:15:01,120
deal reviewed and it's pretty safe to

334
00:14:59,300 --> 00:15:05,449
use it and also that it's really modular

335
00:15:01,120 --> 00:15:07,970
meaning that any vendor can take this

336
00:15:05,450 --> 00:15:11,300
implementation and adapt it to where to

337
00:15:07,970 --> 00:15:14,000
their own needs and finally now I'm

338
00:15:11,300 --> 00:15:16,680
going to concentrate on the SEL 0 and

339
00:15:14,000 --> 00:15:18,809
sql1 components

340
00:15:16,680 --> 00:15:21,660
and when you call that the trusted OS

341
00:15:18,809 --> 00:15:24,420
and the trusted OS is based on a

342
00:15:21,660 --> 00:15:27,240
microkernel architecture so the trust

343
00:15:24,420 --> 00:15:30,118
otherwise is key be it's so 52 bit OS

344
00:15:27,240 --> 00:15:32,670
but is the load by trust niche and the

345
00:15:30,119 --> 00:15:34,589
actual microkernel is called MDK and

346
00:15:32,670 --> 00:15:36,240
it's the only component that is going to

347
00:15:34,589 --> 00:15:39,240
run in SEL what all the other components

348
00:15:36,240 --> 00:15:41,339
are running in SEL zero which limits a

349
00:15:39,240 --> 00:15:45,660
lot being attacked so face that's you

350
00:15:41,339 --> 00:15:48,149
but you have on on key B but lesser

351
00:15:45,660 --> 00:15:52,589
privileged processes still need to

352
00:15:48,149 --> 00:15:56,429
execute some some privileged operation

353
00:15:52,589 --> 00:15:57,839
and to do that mtk provides Cisco so

354
00:15:56,429 --> 00:16:00,509
which is called you can do things such

355
00:15:57,839 --> 00:16:02,999
as memory mapping process creation SMC's

356
00:16:00,509 --> 00:16:06,689
but this as this is a lot available to

357
00:16:02,999 --> 00:16:10,350
all type of processes it depends on

358
00:16:06,689 --> 00:16:12,089
their on their privileges because we

359
00:16:10,350 --> 00:16:17,490
have Software Defined our privileges in

360
00:16:12,089 --> 00:16:19,279
SEL jewel one of the other thing can be

361
00:16:17,490 --> 00:16:24,300
is responsible for is to build other

362
00:16:19,279 --> 00:16:27,149
components and especially our TM a TM is

363
00:16:24,300 --> 00:16:29,209
the runtime manager this is also a

364
00:16:27,149 --> 00:16:32,160
component that is running as hill 0 and

365
00:16:29,209 --> 00:16:34,170
this is like a special type of trusted

366
00:16:32,160 --> 00:16:36,660
application and its equivalent review to

367
00:16:34,170 --> 00:16:39,240
the init process on Linus its main task

368
00:16:36,660 --> 00:16:41,009
is going to be to start and manage all

369
00:16:39,240 --> 00:16:44,809
the processes but also to manage the

370
00:16:41,009 --> 00:16:47,699
oops to manage the communication between

371
00:16:44,809 --> 00:16:50,279
addressed applications and the normal

372
00:16:47,699 --> 00:16:53,339
world and also to manage the

373
00:16:50,279 --> 00:16:57,240
communications between the over

374
00:16:53,339 --> 00:16:59,999
processes running in ser 0 and to do

375
00:16:57,240 --> 00:17:02,879
that so you so you have IPC's and also

376
00:16:59,999 --> 00:17:04,589
the mobile pod the mobile communication

377
00:17:02,879 --> 00:17:06,740
interface to communicate with the normal

378
00:17:04,589 --> 00:17:06,740
world

379
00:17:06,869 --> 00:17:11,579
then we have the MC leave so this is

380
00:17:09,510 --> 00:17:13,470
skinny beast and the library it's going

381
00:17:11,579 --> 00:17:15,539
to provide standard function for certain

382
00:17:13,470 --> 00:17:18,630
applications liquid drivers and also all

383
00:17:15,539 --> 00:17:20,819
TM it's separated into two sets of api's

384
00:17:18,630 --> 00:17:23,459
you have the JPS vote Russell

385
00:17:20,819 --> 00:17:25,589
application which is called adhere ad

386
00:17:23,459 --> 00:17:27,299
ice and then you have the functions for

387
00:17:25,589 --> 00:17:30,658
use by secure drivers which are called

388
00:17:27,299 --> 00:17:32,789
the Geo API X and this library is

389
00:17:30,659 --> 00:17:34,409
especially useful when we're doing

390
00:17:32,789 --> 00:17:38,340
exploitation because this is where we're

391
00:17:34,409 --> 00:17:39,960
going to find most of our gadgets all

392
00:17:38,340 --> 00:17:41,580
right so at this point ever talked a lot

393
00:17:39,960 --> 00:17:44,220
about trusted applications but I didn't

394
00:17:41,580 --> 00:17:45,720
give an actual definition of it so

395
00:17:44,220 --> 00:17:47,729
trusted applications are like the

396
00:17:45,720 --> 00:17:50,099
equivalent of regular application that

397
00:17:47,729 --> 00:17:53,159
you find in the normal world and we're

398
00:17:50,099 --> 00:17:55,049
going to run in SES Europe and since you

399
00:17:53,159 --> 00:17:56,429
have a central operating system running

400
00:17:55,049 --> 00:17:59,039
the trusted OS as limited

401
00:17:56,429 --> 00:18:00,479
functionalities what's going to happen

402
00:17:59,039 --> 00:18:02,789
is that you have your trusted

403
00:18:00,479 --> 00:18:04,739
applications that are used as an

404
00:18:02,789 --> 00:18:07,470
extension of the trusted OS so that

405
00:18:04,739 --> 00:18:09,359
you're able to implement more

406
00:18:07,470 --> 00:18:13,320
functionalities such as trust a UI

407
00:18:09,359 --> 00:18:16,379
grm secret storage and cetera and these

408
00:18:13,320 --> 00:18:18,059
binaries so we execute tools they are

409
00:18:16,379 --> 00:18:22,559
going to be loaded directly from the

410
00:18:18,059 --> 00:18:26,039
normal world and to make sure that you

411
00:18:22,559 --> 00:18:32,070
cannot just rule any executable they are

412
00:18:26,039 --> 00:18:34,169
signed by Tristana so the lifecycle of

413
00:18:32,070 --> 00:18:35,609
trusted applications when you're going

414
00:18:34,169 --> 00:18:38,639
to build a trust certification from the

415
00:18:35,609 --> 00:18:40,529
normal world you will so use the API

416
00:18:38,639 --> 00:18:43,289
proof in the normal world you send your

417
00:18:40,529 --> 00:18:46,679
application in the second well the

418
00:18:43,289 --> 00:18:48,299
trusted OS I mean RTM is going to check

419
00:18:46,679 --> 00:18:52,009
the signature to make sure that it's

420
00:18:48,299 --> 00:18:54,989
it's ok then it's going to make

421
00:18:52,009 --> 00:18:55,169
different checks in its radiation such

422
00:18:54,989 --> 00:18:58,019
as

423
00:18:55,169 --> 00:19:00,149
stachy linearization and one thing to

424
00:18:58,019 --> 00:19:02,460
note also is that the communication

425
00:19:00,149 --> 00:19:05,488
between normal world and the Trust debts

426
00:19:02,460 --> 00:19:08,460
will be musta made using a wheelchair

427
00:19:05,489 --> 00:19:11,039
memory buffer and in chemistry terminal

428
00:19:08,460 --> 00:19:12,960
and Trust onyx terminology this world

429
00:19:11,039 --> 00:19:16,289
memory buffer is called the TCI buffer

430
00:19:12,960 --> 00:19:18,899
and this is here buffer is going to to

431
00:19:16,289 --> 00:19:20,190
contain data so what's going to happen

432
00:19:18,899 --> 00:19:23,099
is that you know normal well you're

433
00:19:20,190 --> 00:19:25,080
going to put data in your DCI buffer you

434
00:19:23,099 --> 00:19:27,928
send a notification to the trust at that

435
00:19:25,080 --> 00:19:30,599
data are waiting to be processed the

436
00:19:27,929 --> 00:19:31,979
trust that is entered an infinite loop

437
00:19:30,599 --> 00:19:34,049
while it's going to wait for its

438
00:19:31,979 --> 00:19:36,559
notification when it's going to look at

439
00:19:34,049 --> 00:19:40,289
the data that is in the DCI buffer

440
00:19:36,559 --> 00:19:42,509
depending on the data that you have sent

441
00:19:40,289 --> 00:19:43,500
it's going to execute a certain type of

442
00:19:42,509 --> 00:19:46,440
command

443
00:19:43,500 --> 00:19:50,039
and also his comment as I've been I've

444
00:19:46,440 --> 00:19:52,350
been performed trusted application white

445
00:19:50,039 --> 00:19:54,210
backs the results into the TCI buffer

446
00:19:52,350 --> 00:19:56,280
and it's going to notify the normal

447
00:19:54,210 --> 00:19:58,169
world that Pokemon has been involved and

448
00:19:56,280 --> 00:20:03,030
the normal can now recruit the results

449
00:19:58,169 --> 00:20:05,130
from the TCM ever also secured drivers

450
00:20:03,030 --> 00:20:08,340
so secure drivers are a special type of

451
00:20:05,130 --> 00:20:09,929
trusted applications they also run that

452
00:20:08,340 --> 00:20:13,500
as here zero but they have more

453
00:20:09,929 --> 00:20:15,870
privileges than ventra states because

454
00:20:13,500 --> 00:20:19,200
they have access to a richer set of API

455
00:20:15,870 --> 00:20:21,830
so access to more as we seize and they

456
00:20:19,200 --> 00:20:25,470
are used they are also used by trusted

457
00:20:21,830 --> 00:20:30,928
as an interface to access physical

458
00:20:25,470 --> 00:20:33,179
memory and also sector resources so and

459
00:20:30,929 --> 00:20:35,280
to do that because we don't want trust

460
00:20:33,179 --> 00:20:36,419
that you to be able to do anything even

461
00:20:35,280 --> 00:20:42,120
though we are running in the trusted

462
00:20:36,419 --> 00:20:43,440
world they they even though we're

463
00:20:42,120 --> 00:20:46,229
running in the trust as well they are

464
00:20:43,440 --> 00:20:48,960
not completely trusted and they cannot

465
00:20:46,230 --> 00:20:51,020
do anything they want and the single

466
00:20:48,960 --> 00:20:54,809
drivers are acting as some kind of

467
00:20:51,020 --> 00:20:57,299
sexual buffer between the security of

468
00:20:54,809 --> 00:21:00,720
our resources and electro certification

469
00:20:57,299 --> 00:21:02,730
and so I know that you to communicate

470
00:21:00,720 --> 00:21:07,100
with the sacred driver the trust let

471
00:21:02,730 --> 00:21:11,640
will use I pcs and send data using that

472
00:21:07,100 --> 00:21:14,459
alright so this was the big overview of

473
00:21:11,640 --> 00:21:16,740
what Samsung's chosen is and how it

474
00:21:14,460 --> 00:21:20,520
works so now let's see how we're going

475
00:21:16,740 --> 00:21:23,280
to find rarities on this platform so

476
00:21:20,520 --> 00:21:27,600
first we needed to assess this the

477
00:21:23,280 --> 00:21:30,299
attack surface on on this target so we

478
00:21:27,600 --> 00:21:33,209
are in the normal world and we want you

479
00:21:30,299 --> 00:21:37,408
a privileged Java code execution in SEL

480
00:21:33,210 --> 00:21:40,200
1 or l3 what we can do is that we start

481
00:21:37,409 --> 00:21:42,470
by attacking a trestle application when

482
00:21:40,200 --> 00:21:44,669
we attack a driver a secure driver and

483
00:21:42,470 --> 00:21:46,770
from there we have access to enough

484
00:21:44,669 --> 00:21:49,700
Cisco to have a large attack surf

485
00:21:46,770 --> 00:21:55,040
surface on on the trusted OS on key B

486
00:21:49,700 --> 00:21:58,670
and here we could and here we could

487
00:21:55,040 --> 00:22:02,240
find reneges in the the SBC's and try to

488
00:21:58,670 --> 00:22:03,890
gain code execution in sl1 what we can

489
00:22:02,240 --> 00:22:06,170
also do because sacred drivers are able

490
00:22:03,890 --> 00:22:10,430
to do SMC's we could also attack the

491
00:22:06,170 --> 00:22:12,920
monitor from from ser zero this is also

492
00:22:10,430 --> 00:22:14,540
possible from the normal world but the

493
00:22:12,920 --> 00:22:16,490
issues that the attacks to face is

494
00:22:14,540 --> 00:22:20,600
really small compared to the one that

495
00:22:16,490 --> 00:22:22,040
you have from the secret world and also

496
00:22:20,600 --> 00:22:23,419
another issues that because eighty eight

497
00:22:22,040 --> 00:22:27,110
is open source there are chances that it

498
00:22:23,420 --> 00:22:28,850
has been heavily reviewed and so it

499
00:22:27,110 --> 00:22:33,260
seemed kind of arts you find predominate

500
00:22:28,850 --> 00:22:34,639
in that so we we prefer to concentrate

501
00:22:33,260 --> 00:22:38,420
on trusted applications because they

502
00:22:34,640 --> 00:22:40,370
look like low-hanging fruits so now I'm

503
00:22:38,420 --> 00:22:45,100
going to explain our journey in five

504
00:22:40,370 --> 00:22:47,449
steps so the first one the first one is

505
00:22:45,100 --> 00:22:49,159
so now we want to attack one five

506
00:22:47,450 --> 00:22:50,690
enemies interested application so the

507
00:22:49,160 --> 00:22:55,100
first thing we need to do is to load

508
00:22:50,690 --> 00:22:57,650
them into a disassembled so tracer

509
00:22:55,100 --> 00:22:59,060
applications are based on the MCL format

510
00:22:57,650 --> 00:23:01,850
it's the same thing for sacred drivers

511
00:22:59,060 --> 00:23:06,159
and Artyom and this is a proprietary

512
00:23:01,850 --> 00:23:09,560
file format but is quite simple and

513
00:23:06,160 --> 00:23:12,140
there was already an idle loader for VAT

514
00:23:09,560 --> 00:23:15,159
format and we have also developed one

515
00:23:12,140 --> 00:23:20,180
for gidran so obvious to a lot of

516
00:23:15,160 --> 00:23:23,060
available online if you needa next step

517
00:23:20,180 --> 00:23:26,960
was to identify functions in the in the

518
00:23:23,060 --> 00:23:28,760
trusted because in the trust sets you

519
00:23:26,960 --> 00:23:30,470
will have called to be am syllable and

520
00:23:28,760 --> 00:23:33,470
in them sleep you have different

521
00:23:30,470 --> 00:23:35,780
functions also reused in interests and

522
00:23:33,470 --> 00:23:37,190
having access to this information is

523
00:23:35,780 --> 00:23:39,050
really useful because we get a general

524
00:23:37,190 --> 00:23:43,130
idea of what the trust that's useful and

525
00:23:39,050 --> 00:23:47,930
here we have an example of our script in

526
00:23:43,130 --> 00:23:49,850
in execution in on the Left we have no

527
00:23:47,930 --> 00:23:51,110
symbol it's pretty complicated to to

528
00:23:49,850 --> 00:23:53,540
understand what's going on but

529
00:23:51,110 --> 00:23:56,030
afterwards after a script has been

530
00:23:53,540 --> 00:23:59,320
executed we are able to have the name of

531
00:23:56,030 --> 00:23:59,320
the function and also its prototype

532
00:24:00,020 --> 00:24:04,940
okay so at this point we're able to do a

533
00:24:02,060 --> 00:24:08,570
static analysis but what we wanted to

534
00:24:04,940 --> 00:24:10,370
have our dynamic capabilities but

535
00:24:08,570 --> 00:24:13,100
who have not access to the SDK of

536
00:24:10,370 --> 00:24:15,590
Tristana k-- we needed to find another

537
00:24:13,100 --> 00:24:18,620
solution so what we did but we developed

538
00:24:15,590 --> 00:24:20,209
an emulator to emulate the trust sets so

539
00:24:18,620 --> 00:24:22,250
it's a simple Liberator that is based on

540
00:24:20,210 --> 00:24:24,440
unicorn and it's going to load B instead

541
00:24:22,250 --> 00:24:27,580
binary it's going to map the shell

542
00:24:24,440 --> 00:24:30,259
memory buffer and it's going to hook the

543
00:24:27,580 --> 00:24:32,178
MCV potions and also increment some of

544
00:24:30,259 --> 00:24:35,230
them so that the executions will trust

545
00:24:32,179 --> 00:24:37,809
that execute execute almost completely

546
00:24:35,230 --> 00:24:40,850
so here's an example of the emulator

547
00:24:37,809 --> 00:24:43,549
running so the first thing I'm doing

548
00:24:40,850 --> 00:24:45,408
here is to create an input of the TCI

549
00:24:43,549 --> 00:24:48,830
buffer so I putting this one in input

550
00:24:45,409 --> 00:24:52,460
the bin and then I'm passing this into

551
00:24:48,830 --> 00:24:55,610
the bin to our emulator and now the

552
00:24:52,460 --> 00:24:57,830
emulator is going to execute and here we

553
00:24:55,610 --> 00:24:59,240
can see that binary has a little bit we

554
00:24:57,830 --> 00:25:02,269
have two different sections that have

555
00:24:59,240 --> 00:25:04,669
been mapped and oh yeah the for simple

556
00:25:02,269 --> 00:25:06,649
API love be print a function that has

557
00:25:04,669 --> 00:25:09,590
been hooked and we can see the outputs

558
00:25:06,649 --> 00:25:10,939
right here so if your emulator is really

559
00:25:09,590 --> 00:25:12,799
useful during reverse engineering but

560
00:25:10,940 --> 00:25:14,809
also during exploitation because we were

561
00:25:12,799 --> 00:25:20,509
able to test our exploits on this

562
00:25:14,809 --> 00:25:22,279
emulator so now we are able to find so

563
00:25:20,509 --> 00:25:23,809
you have over capabilities but we Mullen

564
00:25:22,279 --> 00:25:25,909
we were able to find your abilities

565
00:25:23,809 --> 00:25:30,230
statically but we also wanted to find

566
00:25:25,909 --> 00:25:32,649
them dynamically using a photo so this

567
00:25:30,230 --> 00:25:35,539
factor is based on our previous emulator

568
00:25:32,649 --> 00:25:38,059
it's it's if you're familiar with Eiffel

569
00:25:35,539 --> 00:25:40,850
unicorn we have an internal version of

570
00:25:38,059 --> 00:25:42,230
that that is equivalent but your

571
00:25:40,850 --> 00:25:44,830
performance the performances are a

572
00:25:42,230 --> 00:25:49,070
little bit better and we have used that

573
00:25:44,830 --> 00:25:52,820
too so we have played this I fell for

574
00:25:49,070 --> 00:25:55,970
the Eiffel unique unlike projects into

575
00:25:52,820 --> 00:25:59,259
our emulator and now able to further

576
00:25:55,970 --> 00:26:02,179
trusted using bands so here's an example

577
00:25:59,259 --> 00:26:04,610
here I'm running the trust let's I'm

578
00:26:02,179 --> 00:26:07,190
running the photo on rosettes and you

579
00:26:04,610 --> 00:26:09,918
can see that after only 12 seconds we

580
00:26:07,190 --> 00:26:11,539
have already free unique crashes so this

581
00:26:09,919 --> 00:26:15,289
is pretty useful we have a lot of

582
00:26:11,539 --> 00:26:16,789
vulnerabilities using that another way

583
00:26:15,289 --> 00:26:18,470
to control it is that we have

584
00:26:16,789 --> 00:26:20,779
implemented is to use a symbolic

585
00:26:18,470 --> 00:26:21,900
execution and you have used a Manticore

586
00:26:20,779 --> 00:26:25,380
by trail of bits

587
00:26:21,900 --> 00:26:27,870
so the strategy that we have used is

588
00:26:25,380 --> 00:26:29,970
pretty simple we are using so we are

589
00:26:27,870 --> 00:26:32,760
mark we are you taking the TCI buffer we

590
00:26:29,970 --> 00:26:34,470
are marking it as symbol like then we

591
00:26:32,760 --> 00:26:37,020
explore different tops of the trust at

592
00:26:34,470 --> 00:26:38,580
different come on Andrew and cetera then

593
00:26:37,020 --> 00:26:42,120
we check the reads and writes a to

594
00:26:38,580 --> 00:26:44,309
memory and we look and we try to detect

595
00:26:42,120 --> 00:26:47,370
there is an invalid address that has

596
00:26:44,309 --> 00:26:51,300
been accessed so here's an example right

597
00:26:47,370 --> 00:26:54,899
here running the manticore Elektra stats

598
00:26:51,300 --> 00:26:57,570
and here you have a crush results and

599
00:26:54,900 --> 00:26:59,760
right here you have all one that is

600
00:26:57,570 --> 00:27:01,710
going to be the referenced and if you

601
00:26:59,760 --> 00:27:04,080
look at the value of all run this is a

602
00:27:01,710 --> 00:27:06,270
user control value so this is a value

603
00:27:04,080 --> 00:27:08,309
that is directly taken from the TTA

604
00:27:06,270 --> 00:27:11,010
buffer and now this is not a

605
00:27:08,309 --> 00:27:12,990
vulnerability per se we don't because we

606
00:27:11,010 --> 00:27:14,010
still have to look at the rest of the

607
00:27:12,990 --> 00:27:15,900
code to make sure that it's actually

608
00:27:14,010 --> 00:27:20,280
exploitable but this is a good starting

609
00:27:15,900 --> 00:27:22,890
point and finally now that we have over

610
00:27:20,280 --> 00:27:25,020
vulnerabilities that we want we want to

611
00:27:22,890 --> 00:27:27,720
exploit the vulnerabilities and to do

612
00:27:25,020 --> 00:27:31,290
that well you have to use the natural

613
00:27:27,720 --> 00:27:32,700
library of native API but available in

614
00:27:31,290 --> 00:27:35,970
the normal world to communicate to the

615
00:27:32,700 --> 00:27:38,070
secure world issues that is that we need

616
00:27:35,970 --> 00:27:39,840
to write our exploit in C and we didn't

617
00:27:38,070 --> 00:27:41,939
want to do that because we prefer Python

618
00:27:39,840 --> 00:27:45,830
and so we've developed by providing for

619
00:27:41,940 --> 00:27:48,870
the API in farm in the second world and

620
00:27:45,830 --> 00:27:51,270
so we have the API but it's called MC

621
00:27:48,870 --> 00:27:54,059
clients our bindings are called pieman

622
00:27:51,270 --> 00:27:56,280
MC clients and it provides different

623
00:27:54,059 --> 00:27:59,129
utilities just x time it's a symbol as

624
00:27:56,280 --> 00:28:03,170
well go and also a common interpreter

625
00:27:59,130 --> 00:28:05,880
but the most interesting feature is

626
00:28:03,170 --> 00:28:08,700
actually video but the result is that

627
00:28:05,880 --> 00:28:11,550
the script that we are using all really

628
00:28:08,700 --> 00:28:13,800
simple so here it's a script example but

629
00:28:11,550 --> 00:28:14,580
is going to load the trust let's send a

630
00:28:13,800 --> 00:28:16,590
comment to it

631
00:28:14,580 --> 00:28:18,809
wait for the notification and display

632
00:28:16,590 --> 00:28:21,270
the results and it's not even 20 lines

633
00:28:18,809 --> 00:28:26,070
of Python and the equivalent in C would

634
00:28:21,270 --> 00:28:27,389
be about a hundred lines all right so

635
00:28:26,070 --> 00:28:30,120
with all the different tools but we have

636
00:28:27,390 --> 00:28:31,890
developed now let's see take a look at

637
00:28:30,120 --> 00:28:35,250
three vulnerabilities that we have found

638
00:28:31,890 --> 00:28:37,170
and all we have exploited them so

639
00:28:35,250 --> 00:28:39,540
here is going to be a samsung galaxy s /

640
00:28:37,170 --> 00:28:41,910
s7 that is running Android seven so this

641
00:28:39,540 --> 00:28:43,830
is pretty old but all the tools over

642
00:28:41,910 --> 00:28:46,140
methodology everything I'm explaining

643
00:28:43,830 --> 00:28:49,770
here will still work on the samsung

644
00:28:46,140 --> 00:28:51,060
galaxy s 9 on its latest version so the

645
00:28:49,770 --> 00:28:53,550
main goal here is to thing called

646
00:28:51,060 --> 00:28:55,260
execution in el3 and the paratroop

647
00:28:53,550 --> 00:28:57,450
prerequisites are to be part of the

648
00:28:55,260 --> 00:28:58,890
radio group because this is the earliest

649
00:28:57,450 --> 00:29:00,840
after age group that is able to

650
00:28:58,890 --> 00:29:03,120
communicate with the trestle and also to

651
00:29:00,840 --> 00:29:07,439
be able to write files somewhere on the

652
00:29:03,120 --> 00:29:09,419
device so our attack plan here is to go

653
00:29:07,440 --> 00:29:11,460
from the normal world try to find

654
00:29:09,420 --> 00:29:13,560
phonology electrostatics it's hosted

655
00:29:11,460 --> 00:29:15,570
application exploited find a

656
00:29:13,560 --> 00:29:18,330
vulnerability in a second driver exploit

657
00:29:15,570 --> 00:29:23,700
it again and then we're going to attack

658
00:29:18,330 --> 00:29:26,610
the trusted OS and the monitor so the

659
00:29:23,700 --> 00:29:31,530
sub cementation that you found in intro

660
00:29:26,610 --> 00:29:33,479
zone or most evil the lack of error the

661
00:29:31,530 --> 00:29:37,800
varies so varies at least beliefs and

662
00:29:33,480 --> 00:29:40,260
bits but other than that you don't find

663
00:29:37,800 --> 00:29:44,010
a lot of medications we have no you have

664
00:29:40,260 --> 00:29:46,350
no I saw you buy executables it's

665
00:29:44,010 --> 00:29:48,930
possible to have a canary canary spin

666
00:29:46,350 --> 00:29:51,209
talented but we haven't really seen them

667
00:29:48,930 --> 00:29:53,760
on the s6 s7 NS

668
00:29:51,210 --> 00:29:56,070
and it's starting to be used a lot more

669
00:29:53,760 --> 00:29:57,870
on the s9 but before well not that much

670
00:29:56,070 --> 00:30:00,120
so that means that if you have a

671
00:29:57,870 --> 00:30:03,179
vulnerability it's going to be pretty

672
00:30:00,120 --> 00:30:04,560
simple to exploit it alright so first

673
00:30:03,180 --> 00:30:07,410
thing what we're going to do is to find

674
00:30:04,560 --> 00:30:09,210
vulnerability intercept application so

675
00:30:07,410 --> 00:30:11,670
the vulnerability but we have found is

676
00:30:09,210 --> 00:30:13,350
in the trusted that is called SVM so we

677
00:30:11,670 --> 00:30:14,850
have no idea what this trust does and we

678
00:30:13,350 --> 00:30:17,610
think that we know is that it has a

679
00:30:14,850 --> 00:30:20,459
common a buffer overflow in v common

680
00:30:17,610 --> 00:30:24,600
angular and this buffer overflow is due

681
00:30:20,460 --> 00:30:26,640
to LEM copy with a user control sighs a

682
00:30:24,600 --> 00:30:28,439
user control sauce and it's going to

683
00:30:26,640 --> 00:30:31,350
copy it directly into the stack so we

684
00:30:28,440 --> 00:30:33,720
have a textbook buffer overflow

685
00:30:31,350 --> 00:30:35,280
now we're exploit this with generating

686
00:30:33,720 --> 00:30:38,070
you know we are able to execute code in

687
00:30:35,280 --> 00:30:41,100
sol 0 and now we are able to communicate

688
00:30:38,070 --> 00:30:42,030
with secure drivers we are also able to

689
00:30:41,100 --> 00:30:43,709
make some Cisco's

690
00:30:42,030 --> 00:30:45,389
but the cisco vato available to trust

691
00:30:43,710 --> 00:30:47,610
all the caches are not that useful and

692
00:30:45,390 --> 00:30:48,039
we haven't found anything interesting in

693
00:30:47,610 --> 00:30:50,139
that

694
00:30:48,039 --> 00:30:53,830
so our next target will be a secret

695
00:30:50,139 --> 00:30:57,699
drivers so the narrative that you have

696
00:30:53,830 --> 00:30:59,830
found is again a buffer overflow in the

697
00:30:57,700 --> 00:31:02,409
valley that's a very danger signal

698
00:30:59,830 --> 00:31:06,039
driver again we have no idea what this

699
00:31:02,409 --> 00:31:06,909
driver dots but has powerful flow into

700
00:31:06,039 --> 00:31:10,119
15th

701
00:31:06,909 --> 00:31:11,940
come on Donder and it's the same dynamic

702
00:31:10,119 --> 00:31:15,220
as before so we have a user control size

703
00:31:11,940 --> 00:31:19,929
user control source and copy it copies

704
00:31:15,220 --> 00:31:21,159
it directly into the stack so now we if

705
00:31:19,929 --> 00:31:23,859
we explain with everything we have

706
00:31:21,159 --> 00:31:26,649
called execution in SVSU but with higher

707
00:31:23,859 --> 00:31:27,070
privileges and now we are able to

708
00:31:26,649 --> 00:31:29,678
communicate

709
00:31:27,070 --> 00:31:31,149
we've bought young but also we have

710
00:31:29,679 --> 00:31:32,710
access to more Cisco's and this is

711
00:31:31,149 --> 00:31:35,439
really interesting because the Cisco box

712
00:31:32,710 --> 00:31:37,659
we have access to or perform very

713
00:31:35,440 --> 00:31:39,519
sensitive operations for example we are

714
00:31:37,659 --> 00:31:41,349
able to map physical memory we also

715
00:31:39,519 --> 00:31:45,159
create slides we are able to make sense

716
00:31:41,349 --> 00:31:46,928
ease so very interesting stuff right now

717
00:31:45,159 --> 00:31:49,419
our next target will be the trusted ways

718
00:31:46,929 --> 00:31:51,220
and the monitor so as I said we are

719
00:31:49,419 --> 00:31:54,849
going to use the Cisco to exploit that

720
00:31:51,220 --> 00:31:59,320
and the Cisco we are going to use is a

721
00:31:54,849 --> 00:32:02,289
map a map is can be used to map the

722
00:31:59,320 --> 00:32:06,009
physical memory in secure and non-secure

723
00:32:02,289 --> 00:32:08,139
States and the Phenom it is that there

724
00:32:06,009 --> 00:32:11,349
is no restriction on what you can map

725
00:32:08,139 --> 00:32:12,998
with a map and sober monitor is going to

726
00:32:11,349 --> 00:32:15,999
be mapped at the other as twenty twenty

727
00:32:12,999 --> 00:32:19,539
two thousand so we map it into our

728
00:32:15,999 --> 00:32:23,289
secure driver we modify it to hijack the

729
00:32:19,539 --> 00:32:27,009
SMC and then we just execute the SMC

730
00:32:23,289 --> 00:32:29,259
from the second driver and this reality

731
00:32:27,009 --> 00:32:33,609
has been patched in the newest version

732
00:32:29,259 --> 00:32:36,039
of the of Samsung's resume I mean in DB

733
00:32:33,609 --> 00:32:40,928
by using a black fist so now you cannot

734
00:32:36,039 --> 00:32:43,059
just map anything you want but the

735
00:32:40,929 --> 00:32:45,419
reality on all the devices what you can

736
00:32:43,059 --> 00:32:48,519
do is to have co-decision in a3 and

737
00:32:45,419 --> 00:32:51,399
here's a quick example I'm executing the

738
00:32:48,519 --> 00:32:53,590
exploit right here looking at the value

739
00:32:51,399 --> 00:32:55,599
insurance yeah so the current exception

740
00:32:53,590 --> 00:32:58,359
level and it's going to read to return

741
00:32:55,599 --> 00:32:59,639
the value see but since current

742
00:32:58,359 --> 00:33:02,500
L as

743
00:32:59,640 --> 00:33:04,420
as its value shifted by two bits

744
00:33:02,500 --> 00:33:05,860
what we do is but we shifted back on the

745
00:33:04,420 --> 00:33:07,780
right by two bits and you obtain three

746
00:33:05,860 --> 00:33:09,810
meaning that we have code execution in

747
00:33:07,780 --> 00:33:14,490
year free so we have a pretty much

748
00:33:09,810 --> 00:33:16,389
compromised the entire system so now

749
00:33:14,490 --> 00:33:20,770
these are prepping our bitches

750
00:33:16,390 --> 00:33:22,480
now what can we do a fun of it our first

751
00:33:20,770 --> 00:33:25,360
thing we did is to you added up a

752
00:33:22,480 --> 00:33:27,940
framework that would allow us to exploit

753
00:33:25,360 --> 00:33:31,810
the vulnerabilities easier more easily

754
00:33:27,940 --> 00:33:35,980
and also to to to to to create tools

755
00:33:31,810 --> 00:33:39,190
based on this frame a framework and I'm

756
00:33:35,980 --> 00:33:46,330
not going to go into the details you

757
00:33:39,190 --> 00:33:49,840
know but the idea is that you the arch

758
00:33:46,330 --> 00:33:51,220
I'm going to go into details view so

759
00:33:49,840 --> 00:33:52,750
right now we're going to use the Year

760
00:33:51,220 --> 00:33:55,750
friggin ability to have an apple tree

761
00:33:52,750 --> 00:33:57,370
access to it so what it means that in l3

762
00:33:55,750 --> 00:34:00,700
we are going to take the physical

763
00:33:57,370 --> 00:34:05,679
address of can you be map it into a page

764
00:34:00,700 --> 00:34:08,860
table from tree MMU and now we can

765
00:34:05,680 --> 00:34:11,800
access can be from the l3 and from there

766
00:34:08,860 --> 00:34:17,140
we are able to add our API function and

767
00:34:11,800 --> 00:34:19,630
SBC to execute code in sl1 natively and

768
00:34:17,139 --> 00:34:22,150
so I began with this framework what we

769
00:34:19,630 --> 00:34:25,660
are able to do is to read and write

770
00:34:22,150 --> 00:34:30,840
memory arbitrarily and also to execute

771
00:34:25,659 --> 00:34:33,219
code in SEL one and a free pretty easily

772
00:34:30,840 --> 00:34:35,920
all right so the first demo I'm going to

773
00:34:33,219 --> 00:34:40,209
talk about is finding the master key in

774
00:34:35,920 --> 00:34:43,420
the monitor so the master key is used in

775
00:34:40,210 --> 00:34:49,030
cryptographic operations to find it

776
00:34:43,420 --> 00:34:50,590
you have you can reduce what it is that

777
00:34:49,030 --> 00:34:52,480
I reverse engineer of the crypto driver

778
00:34:50,590 --> 00:34:54,820
that's called your crypto you can find

779
00:34:52,480 --> 00:34:59,130
this Chris sacred driver embedded

780
00:34:54,820 --> 00:35:02,020
directly in Psych a B and one is doing a

781
00:34:59,130 --> 00:35:04,180
cryptographic operation this driver will

782
00:35:02,020 --> 00:35:06,430
make a call to the or API it's Rick's

783
00:35:04,180 --> 00:35:10,899
10:30 so you don't know the exact name

784
00:35:06,430 --> 00:35:12,580
but this G our API can take four

785
00:35:10,900 --> 00:35:15,610
possible current ideas

786
00:35:12,580 --> 00:35:17,310
cerise a a a B AC and AD the one is

787
00:35:15,610 --> 00:35:19,990
interesting here and the one that can

788
00:35:17,310 --> 00:35:24,009
give us the master key is Eric's baby

789
00:35:19,990 --> 00:35:27,339
and this the API

790
00:35:24,010 --> 00:35:29,860
we'll make a call we'll make a call to a

791
00:35:27,340 --> 00:35:33,640
SBC and this as we see is actually

792
00:35:29,860 --> 00:35:37,600
wrapper around the SMC 0x b200 sulphide

793
00:35:33,640 --> 00:35:39,850
and so right now we have two ways to

794
00:35:37,600 --> 00:35:43,270
retrieve the master key so we can even

795
00:35:39,850 --> 00:35:46,440
either directly call mr. tariiji our API

796
00:35:43,270 --> 00:35:49,090
it's Rick's 10:30 with the correct power

797
00:35:46,440 --> 00:35:51,760
arguments or we can directly read the

798
00:35:49,090 --> 00:35:54,070
value in the l3 and I'm going to do both

799
00:35:51,760 --> 00:35:57,810
here but first let's take a look at the

800
00:35:54,070 --> 00:36:00,220
add virtual function so what is

801
00:35:57,810 --> 00:36:01,870
interesting here the only thing that is

802
00:36:00,220 --> 00:36:03,879
important right here is that here you

803
00:36:01,870 --> 00:36:05,799
have the comparison with the value a B

804
00:36:03,880 --> 00:36:08,320
meaning that you're going to go in this

805
00:36:05,800 --> 00:36:11,650
basic block and in this basic block you

806
00:36:08,320 --> 00:36:16,480
have a SMC call to Vassar xB to zero

807
00:36:11,650 --> 00:36:22,960
zero five SMC and if we go to the

808
00:36:16,480 --> 00:36:24,490
angular of this snc you have so you just

809
00:36:22,960 --> 00:36:26,320
have to follow along with the different

810
00:36:24,490 --> 00:36:28,589
arguments that one but the really

811
00:36:26,320 --> 00:36:32,470
important part here is that in this

812
00:36:28,590 --> 00:36:34,300
basic block you have the value you have

813
00:36:32,470 --> 00:36:37,990
zero X 10 bytes that are going to be

814
00:36:34,300 --> 00:36:41,140
extracted from the address 0 X 10 1e

815
00:36:37,990 --> 00:36:43,209
4000 and this is where the master key is

816
00:36:41,140 --> 00:36:47,890
actually stopped and so what we can do

817
00:36:43,210 --> 00:36:50,440
is to read it using our framework so our

818
00:36:47,890 --> 00:36:52,180
human just holding a novel driver to

819
00:36:50,440 --> 00:36:55,420
make the exploit work and then I exploit

820
00:36:52,180 --> 00:36:56,950
their shoulder mobility and here I'm

821
00:36:55,420 --> 00:36:58,480
going to retrieve the master key using

822
00:36:56,950 --> 00:37:00,609
the D or API so let's just to make sure

823
00:36:58,480 --> 00:37:04,480
that I'm actually retrieving the the

824
00:37:00,610 --> 00:37:07,090
correct value afterwards so it's a 1985

825
00:37:04,480 --> 00:37:08,320
F etcetera and if we read directly this

826
00:37:07,090 --> 00:37:11,590
value in el3

827
00:37:08,320 --> 00:37:14,440
so at the address Zurich's 10 1 e 4000

828
00:37:11,590 --> 00:37:16,810
we can see right here but we are rigidly

829
00:37:14,440 --> 00:37:21,330
the same value meaning that we can have

830
00:37:16,810 --> 00:37:23,950
access to anything you want in the l3

831
00:37:21,330 --> 00:37:25,690
alright so the second demonstration is

832
00:37:23,950 --> 00:37:29,109
going to be to bypass sing

833
00:37:25,690 --> 00:37:30,760
two checks one of the interesting thing

834
00:37:29,110 --> 00:37:33,040
that we wanted to do is to be able to

835
00:37:30,760 --> 00:37:35,800
load our own trusted applications our

836
00:37:33,040 --> 00:37:37,210
own secret drivers because it's really

837
00:37:35,800 --> 00:37:40,510
useful when you want to execute

838
00:37:37,210 --> 00:37:43,390
arbitrary code in the second world but

839
00:37:40,510 --> 00:37:45,630
to do that we needed to be able to to

840
00:37:43,390 --> 00:37:48,430
load this trust because we didn't have

841
00:37:45,630 --> 00:37:52,030
trust on the private keys so we were not

842
00:37:48,430 --> 00:37:54,850
able to sign them correctly but since we

843
00:37:52,030 --> 00:37:56,280
have all the capabilities we want in the

844
00:37:54,850 --> 00:37:59,460
second one we can do anything we want

845
00:37:56,280 --> 00:38:01,540
then you can just bypass these checks so

846
00:37:59,460 --> 00:38:05,590
trusted application the sacred rivals

847
00:38:01,540 --> 00:38:08,680
are going to be loaded by RTM and the

848
00:38:05,590 --> 00:38:10,780
signature is verified using TLA p.i

849
00:38:08,680 --> 00:38:13,720
signature verify and there are only two

850
00:38:10,780 --> 00:38:17,740
codes to this function in our TM rosaldo

851
00:38:13,720 --> 00:38:21,209
call it's not really important but the

852
00:38:17,740 --> 00:38:21,209
idea is that we're going to patch the

853
00:38:21,750 --> 00:38:29,470
instructions that are checking the value

854
00:38:23,980 --> 00:38:31,960
returned by by this function and here

855
00:38:29,470 --> 00:38:34,629
I'm going to try its load so again I'm

856
00:38:31,960 --> 00:38:37,570
the vunerable driver and when I'm trying

857
00:38:34,630 --> 00:38:40,660
to load a fatal sense so factors that

858
00:38:37,570 --> 00:38:43,450
I've made from scratch and if I try to

859
00:38:40,660 --> 00:38:46,569
load it it's going to set error invalid

860
00:38:43,450 --> 00:38:48,759
operation which is normal but now I'm

861
00:38:46,570 --> 00:38:54,040
going to exploit the gravity and bypass

862
00:38:48,760 --> 00:38:56,950
these checks and now if I try to reload

863
00:38:54,040 --> 00:39:00,990
this fake trusted again now it's going

864
00:38:56,950 --> 00:39:03,069
to work and we are able to go our own

865
00:39:00,990 --> 00:39:04,750
justification in the sake of all and

866
00:39:03,070 --> 00:39:07,150
here you can see that we have different

867
00:39:04,750 --> 00:39:10,660
drugs but I printed the cetera meaning

868
00:39:07,150 --> 00:39:13,600
that it works all right so the last

869
00:39:10,660 --> 00:39:16,870
demonstration I wanted to show you is an

870
00:39:13,600 --> 00:39:19,480
instrumentation of trusted waste so this

871
00:39:16,870 --> 00:39:21,730
is a really important result for us to

872
00:39:19,480 --> 00:39:24,330
be able to do that because at this point

873
00:39:21,730 --> 00:39:26,710
we are we are no debugging capabilities

874
00:39:24,330 --> 00:39:29,710
everything what we have done it was done

875
00:39:26,710 --> 00:39:33,310
statically or using the emulator but by

876
00:39:29,710 --> 00:39:35,920
using address our our framework

877
00:39:33,310 --> 00:39:37,600
we were able to develop a debugger

878
00:39:35,920 --> 00:39:39,420
what's this some kind of debugger

879
00:39:37,600 --> 00:39:42,180
because we can

880
00:39:39,420 --> 00:39:43,859
puts actual breakpoints on instructions

881
00:39:42,180 --> 00:39:45,538
otherwise it's going to trigger a

882
00:39:43,859 --> 00:39:47,308
watchdog and this end of phone will

883
00:39:45,539 --> 00:39:50,910
reboot so what we do is were three

884
00:39:47,309 --> 00:39:52,470
instruments of trusted OS by replacing

885
00:39:50,910 --> 00:39:54,899
the instruction but we want two

886
00:39:52,470 --> 00:40:01,169
instruments by an undefined instruction

887
00:39:54,900 --> 00:40:03,359
and then we hijack the exception the in

888
00:40:01,170 --> 00:40:05,250
undefined instruction exception and run

889
00:40:03,359 --> 00:40:07,619
where we're going to write our own code

890
00:40:05,250 --> 00:40:10,769
and what's going to happen is that when

891
00:40:07,619 --> 00:40:12,779
the trust said OS run execute our

892
00:40:10,769 --> 00:40:14,308
undefined instruction it's going to

893
00:40:12,779 --> 00:40:16,640
trigger the undefined instruction

894
00:40:14,309 --> 00:40:19,260
exception and then run our own code and

895
00:40:16,640 --> 00:40:22,109
for a moment this the code that we are

896
00:40:19,260 --> 00:40:25,170
running in the in this andr is to save

897
00:40:22,109 --> 00:40:30,150
the current context of the CPU and then

898
00:40:25,170 --> 00:40:32,730
we we just execute the instruction that

899
00:40:30,150 --> 00:40:39,359
we have replaced and the system just

900
00:40:32,730 --> 00:40:41,670
executes normally after that so here are

901
00:40:39,359 --> 00:40:45,808
the results I'm going to a connect to

902
00:40:41,670 --> 00:40:49,259
the phone launching my debugger and so

903
00:40:45,809 --> 00:40:54,420
the debugger is just a simple it's just

904
00:40:49,259 --> 00:40:56,069
a simple Python promise so first thing

905
00:40:54,420 --> 00:40:58,740
I'm going to do is to add breakpoints in

906
00:40:56,069 --> 00:41:01,619
a map so this is arbitrary just taken an

907
00:40:58,740 --> 00:41:07,169
SVC and I've put a breakpoint inside it

908
00:41:01,619 --> 00:41:09,420
and if I deserve all the instructions at

909
00:41:07,170 --> 00:41:13,440
this address you can see that we have

910
00:41:09,420 --> 00:41:15,720
the UDF with zero so this is our

911
00:41:13,440 --> 00:41:19,319
undefined instruction the value

912
00:41:15,720 --> 00:41:21,180
afterwards you can do pretty much

913
00:41:19,319 --> 00:41:26,069
anything you want but personally were

914
00:41:21,180 --> 00:41:29,519
you I mean I'm using it to to to improve

915
00:41:26,069 --> 00:41:32,038
the number of the breakpoints and right

916
00:41:29,519 --> 00:41:36,209
now I'm going to make a call to with SVC

917
00:41:32,039 --> 00:41:40,109
so from a debugger and I don't know if

918
00:41:36,210 --> 00:41:41,640
you can see it but the argument of the

919
00:41:40,109 --> 00:41:44,640
debugger is going to be the number of

920
00:41:41,640 --> 00:41:47,609
the cisco services 7 4 m up then you

921
00:41:44,640 --> 00:41:50,788
have the the permissions of the the page

922
00:41:47,609 --> 00:41:52,740
you want huge map when you have a

923
00:41:50,789 --> 00:41:53,280
starting address in the virtual address

924
00:41:52,740 --> 00:41:54,870
space so

925
00:41:53,280 --> 00:41:57,300
the address space of the debugger why

926
00:41:54,870 --> 00:41:59,880
you want to map your physical memory the

927
00:41:57,300 --> 00:42:01,980
end of virtual address and finally your

928
00:41:59,880 --> 00:42:03,990
physical address that you want to map

929
00:42:01,980 --> 00:42:08,220
and in that case is going to be the

930
00:42:03,990 --> 00:42:11,669
first page of the second monitor and so

931
00:42:08,220 --> 00:42:17,040
I've indicated my mine Cisco and now if

932
00:42:11,670 --> 00:42:19,620
I display the logs of the debugger so

933
00:42:17,040 --> 00:42:22,620
I've stripped a strip to the rest of the

934
00:42:19,620 --> 00:42:27,299
results of our more close to yes I see

935
00:42:22,620 --> 00:42:30,569
the SVC but I made between starting at

936
00:42:27,300 --> 00:42:34,890
the debugger and and my my own call to

937
00:42:30,570 --> 00:42:37,290
em up but here is the results of my own

938
00:42:34,890 --> 00:42:40,410
call and you can see that I have access

939
00:42:37,290 --> 00:42:42,870
to U of a state of the CPU and here you

940
00:42:40,410 --> 00:42:46,350
have all one which is your X 100,000 so

941
00:42:42,870 --> 00:42:48,990
my start virtual address in or - I am

942
00:42:46,350 --> 00:42:51,509
the response hundred one thousand my end

943
00:42:48,990 --> 00:42:53,729
it will address in all three I have my

944
00:42:51,510 --> 00:42:55,830
permissions and in awful I have the

945
00:42:53,730 --> 00:42:58,680
physical address that I wanted to map

946
00:42:55,830 --> 00:43:01,830
and so this is really interesting to us

947
00:42:58,680 --> 00:43:03,930
because now we are able to debug the

948
00:43:01,830 --> 00:43:08,000
trusted OS and it would be really useful

949
00:43:03,930 --> 00:43:09,980
to find other vulnerabilities in in a

950
00:43:08,000 --> 00:43:12,840
Samsung stressor

951
00:43:09,980 --> 00:43:14,370
all right so that's that's it for me

952
00:43:12,840 --> 00:43:19,150
thank you very much

953
00:43:14,370 --> 00:43:19,150
[Applause]

