1
00:00:00,030 --> 00:00:04,080
my name is dr. John Griffin and it is my

2
00:00:02,129 --> 00:00:05,960
great pleasure to introduce you to the

3
00:00:04,080 --> 00:00:09,120
session today on preventing

4
00:00:05,960 --> 00:00:10,920
authentication bypass a tale of two

5
00:00:09,120 --> 00:00:14,250
researchers that will be presented by

6
00:00:10,920 --> 00:00:16,470
three researchers Ravi jaiswal teri Jong

7
00:00:14,250 --> 00:00:19,759
and Bron Chan please help me in

8
00:00:16,470 --> 00:00:19,759
welcoming these gentlemen to the stage

9
00:00:34,130 --> 00:00:41,040
good afternoon everyone today we are

10
00:00:37,860 --> 00:00:42,870
here to tell you a story a story of

11
00:00:41,040 --> 00:00:46,680
collaboration between two researchers

12
00:00:42,870 --> 00:00:48,328
and Microsoft on how they found a

13
00:00:46,680 --> 00:00:52,649
critical vulnerability in Outlook Web

14
00:00:48,329 --> 00:00:54,980
App and this is also a story about close

15
00:00:52,649 --> 00:00:59,579
and collaboration which spanned

16
00:00:54,980 --> 00:01:03,629
continents to help protect the customers

17
00:00:59,579 --> 00:01:07,380
and the data so in this story we have

18
00:01:03,629 --> 00:01:09,979
following characters first we have Teddy

19
00:01:07,380 --> 00:01:13,649
Zhang who is co-founder of the fan and

20
00:01:09,979 --> 00:01:18,229
specialists in breaking identity who was

21
00:01:13,650 --> 00:01:21,409
working independently of Ron Chan an

22
00:01:18,229 --> 00:01:25,049
independent security researcher who was

23
00:01:21,409 --> 00:01:28,710
concurrently with Terry investigating an

24
00:01:25,049 --> 00:01:31,950
issue in Outlook Web App as you all know

25
00:01:28,710 --> 00:01:35,339
Outlook Web App or OVA is a mail service

26
00:01:31,950 --> 00:01:39,150
created by Microsoft and it has millions

27
00:01:35,340 --> 00:01:41,820
of users all over the world I am Ravi

28
00:01:39,150 --> 00:01:45,509
Jaiswal an engineering manager in

29
00:01:41,820 --> 00:01:50,309
Outlook Web App and with primary focus

30
00:01:45,509 --> 00:01:53,009
on authentication and security so this

31
00:01:50,310 --> 00:01:58,259
story starts with a discovery and to

32
00:01:53,009 --> 00:02:01,350
talk more about it here is study Thank

33
00:01:58,259 --> 00:02:04,020
You Ravi and good afternoon everyone I'm

34
00:02:01,350 --> 00:02:06,630
Terry and I'm so glad to be here to

35
00:02:04,020 --> 00:02:09,478
heckle one stage to share some ideas

36
00:02:06,630 --> 00:02:12,540
about how I found this critical issue on

37
00:02:09,479 --> 00:02:13,860
Microsoft specific long outlook service

38
00:02:12,540 --> 00:02:16,079
and also about how

39
00:02:13,860 --> 00:02:19,890
ask like these issues step-by-step to

40
00:02:16,080 --> 00:02:24,090
make it even more critical so okay let's

41
00:02:19,890 --> 00:02:29,209
get it so the so the first discovery was

42
00:02:24,090 --> 00:02:31,710
sometime before March 24th this year and

43
00:02:29,210 --> 00:02:34,080
one thing I found there is a new option

44
00:02:31,710 --> 00:02:36,600
a new switch on Outlook Enterprise

45
00:02:34,080 --> 00:02:40,050
Service that support like user to switch

46
00:02:36,600 --> 00:02:42,329
to the new UI so after I switched to the

47
00:02:40,050 --> 00:02:45,210
new UI I used perhaps ooh to intercept

48
00:02:42,330 --> 00:02:47,760
the request and I found there's a new

49
00:02:45,210 --> 00:02:51,110
option and it's re new API endpoint that

50
00:02:47,760 --> 00:02:53,970
I'd never seen before and it had a

51
00:02:51,110 --> 00:02:55,620
action called get access token for

52
00:02:53,970 --> 00:02:59,310
resource that sounds pretty interesting

53
00:02:55,620 --> 00:03:02,370
in my doing some kind of token exchange

54
00:02:59,310 --> 00:03:04,230
or session exchange work and it turns

55
00:03:02,370 --> 00:03:08,820
out indeed this endpoint will return a

56
00:03:04,230 --> 00:03:11,190
JSON web token that is unsigned so we

57
00:03:08,820 --> 00:03:13,859
can see in this screenshot that the

58
00:03:11,190 --> 00:03:15,660
algorithm part is none and we got a lot

59
00:03:13,860 --> 00:03:18,330
of information a lot of data in the

60
00:03:15,660 --> 00:03:21,480
payload part which we will get to it and

61
00:03:18,330 --> 00:03:24,420
a few slides later and later I found

62
00:03:21,480 --> 00:03:27,510
this token was only used by the

63
00:03:24,420 --> 00:03:32,280
application itself to assess some kind

64
00:03:27,510 --> 00:03:34,920
of internal preview api's like product

65
00:03:32,280 --> 00:03:36,930
tips like what's new like status check

66
00:03:34,920 --> 00:03:40,559
some kind of you know will return some

67
00:03:36,930 --> 00:03:42,600
kind of useless data so but I just have

68
00:03:40,560 --> 00:03:45,510
this feeling that I think this token can

69
00:03:42,600 --> 00:03:48,060
do much more than these so I I note it

70
00:03:45,510 --> 00:03:50,850
down and move forward and then I came

71
00:03:48,060 --> 00:03:54,350
across this restful official restful api

72
00:03:50,850 --> 00:03:57,480
on Outlook and normally to use these

73
00:03:54,350 --> 00:04:00,570
restful api a third party client or

74
00:03:57,480 --> 00:04:03,179
applications need to be registered on a

75
00:04:00,570 --> 00:04:05,760
third cloud and then that user go

76
00:04:03,180 --> 00:04:10,680
through an oid c flow or an ID connect

77
00:04:05,760 --> 00:04:13,290
flow to get users authorization to grant

78
00:04:10,680 --> 00:04:16,048
it for some certain permissions from on

79
00:04:13,290 --> 00:04:17,880
this application so that this

80
00:04:16,048 --> 00:04:20,579
application can retrieve a JSON web

81
00:04:17,880 --> 00:04:23,969
token and that token is definitely

82
00:04:20,579 --> 00:04:26,950
signed so those two screenshots one is

83
00:04:23,970 --> 00:04:30,580
the unsigned token from the internal API

84
00:04:26,950 --> 00:04:34,900
and one is the sign token we got from

85
00:04:30,580 --> 00:04:37,240
the OID C flow so and also those tokens

86
00:04:34,900 --> 00:04:40,719
just in totally different data structure

87
00:04:37,240 --> 00:04:43,900
so it's kind of irrelevant at the first

88
00:04:40,720 --> 00:04:48,940
time totally irrelevant but why not give

89
00:04:43,900 --> 00:04:51,130
a try so I just place these set these

90
00:04:48,940 --> 00:04:54,040
unsigned token to the authorization

91
00:04:51,130 --> 00:04:57,490
header and the standard request to one

92
00:04:54,040 --> 00:05:00,310
of the basic restful api and then

93
00:04:57,490 --> 00:05:02,590
suddenly the reach the server side just

94
00:05:00,310 --> 00:05:05,380
to return that user's profile back so

95
00:05:02,590 --> 00:05:07,840
that means that the outlook server side

96
00:05:05,380 --> 00:05:10,830
was happy to consume our unsigned token

97
00:05:07,840 --> 00:05:12,700
and return that user's profile back so

98
00:05:10,830 --> 00:05:16,150
this is awesome

99
00:05:12,700 --> 00:05:18,570
like I just have this feeling or

100
00:05:16,150 --> 00:05:23,440
confidence like I can't find something

101
00:05:18,570 --> 00:05:26,800
from it so before we move on let's take

102
00:05:23,440 --> 00:05:31,600
a take a look at some key details of the

103
00:05:26,800 --> 00:05:35,530
token and there there is a why D which

104
00:05:31,600 --> 00:05:38,470
referred to country users UID where user

105
00:05:35,530 --> 00:05:41,169
ID and there's a SMTP which refer to con

106
00:05:38,470 --> 00:05:43,750
users email address and there's a scoop

107
00:05:41,170 --> 00:05:45,520
which refer to current permissions cook

108
00:05:43,750 --> 00:05:49,000
that grant and for this token as we can

109
00:05:45,520 --> 00:05:51,280
see there's a who assess as exchange

110
00:05:49,000 --> 00:05:52,540
which means that this token got food

111
00:05:51,280 --> 00:05:56,130
permissions granted

112
00:05:52,540 --> 00:06:00,550
and there's another actor token that is

113
00:05:56,130 --> 00:06:04,210
that is another JSON web token and this

114
00:06:00,550 --> 00:06:07,270
token is sign and this token is contains

115
00:06:04,210 --> 00:06:09,430
current tenant infer continent ID so

116
00:06:07,270 --> 00:06:12,700
there's another tid which refer to the

117
00:06:09,430 --> 00:06:14,860
tenant ID either so we got some key

118
00:06:12,700 --> 00:06:18,820
details of the token so the very first

119
00:06:14,860 --> 00:06:21,670
thing I've tried is to change the OID to

120
00:06:18,820 --> 00:06:26,170
another users that under the same tenant

121
00:06:21,670 --> 00:06:29,650
so that users profile just returned

122
00:06:26,170 --> 00:06:31,800
right back so that means I found the

123
00:06:29,650 --> 00:06:34,810
authentication bypass on outlook

124
00:06:31,800 --> 00:06:38,410
enterprise service that can you know I

125
00:06:34,810 --> 00:06:40,660
can fully control any other users

126
00:06:38,410 --> 00:06:42,970
account that under the same tenant

127
00:06:40,660 --> 00:06:45,400
yeah because I can do whatever I want

128
00:06:42,970 --> 00:06:48,430
basically I can do whatever I want like

129
00:06:45,400 --> 00:06:51,489
just as far as the RESTful API supports

130
00:06:48,430 --> 00:06:56,230
which the rest of API is pretty powerful

131
00:06:51,490 --> 00:06:59,410
so but there is a limitation in in this

132
00:06:56,230 --> 00:07:02,290
case that as I mentioned before there

133
00:06:59,410 --> 00:07:05,170
was actor token which is signed and

134
00:07:02,290 --> 00:07:07,390
contained current tenant ID so we can

135
00:07:05,170 --> 00:07:10,750
change that we can modify that because

136
00:07:07,390 --> 00:07:13,240
it is signed so we can only exploit this

137
00:07:10,750 --> 00:07:18,400
issue under the same tenant for

138
00:07:13,240 --> 00:07:23,100
enterprise and then I remind consumer

139
00:07:18,400 --> 00:07:26,380
outlook so what about consumer outlook

140
00:07:23,100 --> 00:07:29,800
so basically consumer outlook service in

141
00:07:26,380 --> 00:07:31,510
the same as and price just running on

142
00:07:29,800 --> 00:07:33,460
different domain like for enterprise is

143
00:07:31,510 --> 00:07:36,880
running on outlook to office calm and

144
00:07:33,460 --> 00:07:39,489
for personnel running on Outlook to live

145
00:07:36,880 --> 00:07:43,090
talking or mail to live calm and both

146
00:07:39,490 --> 00:07:45,310
services support these special endpoint

147
00:07:43,090 --> 00:07:47,020
get assessed open for resource and also

148
00:07:45,310 --> 00:07:50,080
there is interesting thing that I've

149
00:07:47,020 --> 00:07:54,039
learned from consumer outlook service in

150
00:07:50,080 --> 00:07:56,530
that after I comparing to JSON web token

151
00:07:54,040 --> 00:07:58,510
unsigned the JSON web token that is from

152
00:07:56,530 --> 00:08:01,559
two of my test personal test accounts

153
00:07:58,510 --> 00:08:04,630
and I've learned that all personal

154
00:08:01,560 --> 00:08:07,270
Outlook account share the same tint ID

155
00:08:04,630 --> 00:08:10,390
so that means no matter you use live

156
00:08:07,270 --> 00:08:12,969
ComNet or like Outlook calm or hotmail

157
00:08:10,390 --> 00:08:15,940
calm your accounts are under the same

158
00:08:12,970 --> 00:08:18,280
tenant so that's wonderful because in

159
00:08:15,940 --> 00:08:20,950
this case we can modify the tenant ID

160
00:08:18,280 --> 00:08:23,820
and now we don't have to because all

161
00:08:20,950 --> 00:08:28,030
that personal Kansa use the same tenant

162
00:08:23,820 --> 00:08:30,460
so quickly I change the OID to another

163
00:08:28,030 --> 00:08:33,640
personal accounts and that users profile

164
00:08:30,460 --> 00:08:35,860
just returned back and then there's

165
00:08:33,640 --> 00:08:39,520
still a little issue need to be cleared

166
00:08:35,860 --> 00:08:42,039
out like like I can't find a way I can

167
00:08:39,520 --> 00:08:46,000
find an easy way to get any other users

168
00:08:42,039 --> 00:08:48,850
or ID like it is in UUID format and it

169
00:08:46,000 --> 00:08:52,810
is kind of impossible to enumerate or to

170
00:08:48,850 --> 00:08:54,310
brute force but like I need to know any

171
00:08:52,810 --> 00:08:57,878
others oh I

172
00:08:54,310 --> 00:09:01,989
so I started to play around with these

173
00:08:57,879 --> 00:09:05,259
token and again again finally I managed

174
00:09:01,990 --> 00:09:07,660
to find a way to only use any other

175
00:09:05,259 --> 00:09:10,689
users email address just email address

176
00:09:07,660 --> 00:09:12,939
no user ID and no daddy no user ID to

177
00:09:10,689 --> 00:09:15,699
exploit this issue that can affect on

178
00:09:12,939 --> 00:09:18,399
any other you know personal accounts so

179
00:09:15,699 --> 00:09:25,059
I made a demo video for this so that it

180
00:09:18,399 --> 00:09:27,339
can demonstrate the critical impact so

181
00:09:25,059 --> 00:09:29,920
we've found the same end point on

182
00:09:27,339 --> 00:09:31,870
outlook consumer outlook service get

183
00:09:29,920 --> 00:09:34,990
access token for resource and then we

184
00:09:31,870 --> 00:09:38,439
got a return JSON web token that

185
00:09:34,990 --> 00:09:40,509
unsigned and then let's take a look at

186
00:09:38,439 --> 00:09:43,269
this token we can see the algorithm

187
00:09:40,509 --> 00:09:46,870
parties none and we got a lot of

188
00:09:43,269 --> 00:09:50,079
information and the tid down here will

189
00:09:46,870 --> 00:09:52,149
always be this value between different

190
00:09:50,079 --> 00:09:57,399
personnel accounts so there we place

191
00:09:52,149 --> 00:09:59,740
these token to the authorization header

192
00:09:57,399 --> 00:10:01,870
in the send to one of the basic API

193
00:09:59,740 --> 00:10:04,029
endpoint official official API endpoint

194
00:10:01,870 --> 00:10:06,970
and that user's profile just returned

195
00:10:04,029 --> 00:10:10,899
back and then we do some modification we

196
00:10:06,970 --> 00:10:14,230
change the OID to no and we change the

197
00:10:10,899 --> 00:10:17,110
PID to empty string and the same with

198
00:10:14,230 --> 00:10:20,230
the CID or to empty string and then

199
00:10:17,110 --> 00:10:23,529
somehow magic happen now the server-side

200
00:10:20,230 --> 00:10:25,899
will only use the SMTP value that which

201
00:10:23,529 --> 00:10:28,899
is the user's identity which in the

202
00:10:25,899 --> 00:10:31,449
users email address as users identity to

203
00:10:28,899 --> 00:10:34,930
return that users data back so that's

204
00:10:31,449 --> 00:10:38,559
that is make this issue just more

205
00:10:34,930 --> 00:10:41,290
straight and you know no requirement and

206
00:10:38,559 --> 00:10:43,000
a no user interaction at all so we can

207
00:10:41,290 --> 00:10:44,980
see we are not just to only get their

208
00:10:43,000 --> 00:10:47,079
profile back we can just read their

209
00:10:44,980 --> 00:10:49,509
email content and we can do a lot more

210
00:10:47,079 --> 00:10:53,378
just you know a lot of all the things

211
00:10:49,509 --> 00:10:56,800
that the official API supports we can do

212
00:10:53,379 --> 00:10:58,420
it on behalf of that targeted user so in

213
00:10:56,800 --> 00:11:01,149
this video I'll just also demonstrate

214
00:10:58,420 --> 00:11:05,709
like how can how I can you know read or

215
00:11:01,149 --> 00:11:08,200
write on behalf of you so just use your

216
00:11:05,709 --> 00:11:13,930
email address no other requirement

217
00:11:08,200 --> 00:11:16,810
and this will show like I can send email

218
00:11:13,930 --> 00:11:22,000
on your behalf without you know I'll

219
00:11:16,810 --> 00:11:24,280
discover you okay I think so far this

220
00:11:22,000 --> 00:11:26,110
demo video has already made made a good

221
00:11:24,280 --> 00:11:31,720
point for its critical impact so I'll

222
00:11:26,110 --> 00:11:33,520
just move on okay so this is the final

223
00:11:31,720 --> 00:11:35,380
result like first I found an

224
00:11:33,520 --> 00:11:38,800
authentication bypass on outlook

225
00:11:35,380 --> 00:11:40,990
enterprise service and to make even more

226
00:11:38,800 --> 00:11:43,359
critical I finally asked late this issue

227
00:11:40,990 --> 00:11:47,170
from Enterprise within the same teen and

228
00:11:43,360 --> 00:11:49,480
- - that can affect all personnel

229
00:11:47,170 --> 00:11:53,160
Outlook accounts no matter you use live

230
00:11:49,480 --> 00:11:55,900
comm hotmail calm or outlook calm and

231
00:11:53,160 --> 00:11:58,780
finally I managed to find a way that

232
00:11:55,900 --> 00:12:00,850
only use the email address no other

233
00:11:58,780 --> 00:12:03,339
requirements and no user interaction at

234
00:12:00,850 --> 00:12:05,590
all so after that I quickly wrote a

235
00:12:03,340 --> 00:12:07,780
report and send to M SRC and then I just

236
00:12:05,590 --> 00:12:10,210
lay back and started to imagine my

237
00:12:07,780 --> 00:12:13,480
bounty ring because I'm pretty sure this

238
00:12:10,210 --> 00:12:15,370
is a critical issue so and it turns out

239
00:12:13,480 --> 00:12:17,890
that I'm not the only one who found it

240
00:12:15,370 --> 00:12:28,560
so I passed - wrong - a for his second

241
00:12:17,890 --> 00:12:32,800
discovery thank you Thank You Terry

242
00:12:28,560 --> 00:12:37,060
I'm Ron Chen I'm currently working as a

243
00:12:32,800 --> 00:12:40,630
security analyst in entity and this

244
00:12:37,060 --> 00:12:44,319
story starts a few months ago back in

245
00:12:40,630 --> 00:12:47,200
April this year I saw every tweet from

246
00:12:44,320 --> 00:12:50,740
Microsoft Security Response Twitter it

247
00:12:47,200 --> 00:12:53,170
said hey we have better bounties now we

248
00:12:50,740 --> 00:12:56,380
have quick advantage now and we now pay

249
00:12:53,170 --> 00:12:59,170
through hacker one as I'm familiar with

250
00:12:56,380 --> 00:13:00,970
Hector one platform so I thought to

251
00:12:59,170 --> 00:13:05,380
myself why not

252
00:13:00,970 --> 00:13:08,800
take a look so I did what most part

253
00:13:05,380 --> 00:13:12,040
hunters with the a used web suite to

254
00:13:08,800 --> 00:13:15,780
have a look at the Outlook Web and I

255
00:13:12,040 --> 00:13:20,829
tried many things I try to look for XSS

256
00:13:15,780 --> 00:13:21,670
sequel injection CSRF and most of them

257
00:13:20,830 --> 00:13:25,990
are gone

258
00:13:21,670 --> 00:13:30,579
thank I cannot find anything until I got

259
00:13:25,990 --> 00:13:34,960
lucky by seeing this two highlighted

260
00:13:30,580 --> 00:13:38,590
requests these two requests highlighted

261
00:13:34,960 --> 00:13:42,490
because I got I previously installed a

262
00:13:38,590 --> 00:13:46,240
plug-in called JSON web token attacker

263
00:13:42,490 --> 00:13:48,880
plug-in and what it does is it will

264
00:13:46,240 --> 00:13:53,050
automatically highlight anything that

265
00:13:48,880 --> 00:13:57,189
has a jadibooti header in the request so

266
00:13:53,050 --> 00:13:59,199
this time I got lucky by noticing them

267
00:13:57,190 --> 00:14:01,030
these two because are highlighted

268
00:13:59,200 --> 00:14:04,530
because they got jadibooti

269
00:14:01,030 --> 00:14:08,680
header in the request and the reason I

270
00:14:04,530 --> 00:14:11,560
chose to install this plug-in is that

271
00:14:08,680 --> 00:14:14,290
whenever we see a JWT

272
00:14:11,560 --> 00:14:18,310
header we have to look for its signature

273
00:14:14,290 --> 00:14:21,490
and algorithm if the algorithm is none

274
00:14:18,310 --> 00:14:25,209
then it means that we can do something

275
00:14:21,490 --> 00:14:29,170
with this JWT token and impersonate

276
00:14:25,210 --> 00:14:31,480
other user depending on the scenario so

277
00:14:29,170 --> 00:14:34,630
let's have a look at this jadibooti

278
00:14:31,480 --> 00:14:38,980
token that our look was using at that

279
00:14:34,630 --> 00:14:42,250
moment at the first sight it seems that

280
00:14:38,980 --> 00:14:46,540
this is just another jadibooti sending a

281
00:14:42,250 --> 00:14:49,630
request to an API endpoint that has no

282
00:14:46,540 --> 00:14:53,020
use to me it seems that this is just

283
00:14:49,630 --> 00:14:56,800
searching for something and I don't know

284
00:14:53,020 --> 00:15:00,160
what it does to be honest but then I use

285
00:14:56,800 --> 00:15:03,880
that plug-in to took a closer look to

286
00:15:00,160 --> 00:15:09,130
the JWT header payload and the signature

287
00:15:03,880 --> 00:15:14,200
part and this is the first screen shot

288
00:15:09,130 --> 00:15:18,460
of the JWT in this screenshot I used the

289
00:15:14,200 --> 00:15:21,840
JSON web token attacker in this for this

290
00:15:18,460 --> 00:15:23,830
attack and if you have paid attention

291
00:15:21,840 --> 00:15:26,320
for three slides

292
00:15:23,830 --> 00:15:28,750
you should notice that for this slide

293
00:15:26,320 --> 00:15:33,550
for this screenshot that I'm having now

294
00:15:28,750 --> 00:15:35,230
the algorithm is rs.25 six but in Paris

295
00:15:33,550 --> 00:15:40,329
screenshot is

296
00:15:35,230 --> 00:15:43,690
that algorithm is none it is because at

297
00:15:40,330 --> 00:15:47,700
the moment of the discovery I forgot to

298
00:15:43,690 --> 00:15:50,680
take a screenshot so I took this fuchsia

299
00:15:47,700 --> 00:15:53,410
after I know that I have to prepare for

300
00:15:50,680 --> 00:15:56,859
this talk so this is why the screenshot

301
00:15:53,410 --> 00:16:00,780
is like this and but just imagine the

302
00:15:56,860 --> 00:16:05,470
algorithm here should be none okay so

303
00:16:00,780 --> 00:16:08,980
this is the next payload the payload of

304
00:16:05,470 --> 00:16:11,650
this JWT is nothing special again but

305
00:16:08,980 --> 00:16:15,820
something special about this is that it

306
00:16:11,650 --> 00:16:16,689
got mail we write permission so this is

307
00:16:15,820 --> 00:16:21,910
very powerful

308
00:16:16,690 --> 00:16:25,000
JWT and finally we can see that in the

309
00:16:21,910 --> 00:16:29,500
basic civil signature part of this JWT

310
00:16:25,000 --> 00:16:36,460
it has nothing it means that this JWT

311
00:16:29,500 --> 00:16:39,120
is unsigned and I quickly thought to

312
00:16:36,460 --> 00:16:42,100
myself here's what I am going to do

313
00:16:39,120 --> 00:16:45,390
first I need to figure out what

314
00:16:42,100 --> 00:16:50,500
parameter that the API uses to identify

315
00:16:45,390 --> 00:16:53,260
Ron is wrong in this JWT token and then

316
00:16:50,500 --> 00:16:56,440
I will change that parameter to

317
00:16:53,260 --> 00:16:59,980
impersonate other users and finally

318
00:16:56,440 --> 00:17:03,390
after changing the parameter I will

319
00:16:59,980 --> 00:17:07,390
apply this JWT token to as many

320
00:17:03,390 --> 00:17:12,069
endpoints as possible to see what can I

321
00:17:07,390 --> 00:17:16,360
do with this JWT token and I tried many

322
00:17:12,069 --> 00:17:21,399
stuff and only one parameter works it is

323
00:17:16,359 --> 00:17:24,909
the OID parameter but how do we get a

324
00:17:21,400 --> 00:17:28,300
why D of other users since as you can

325
00:17:24,910 --> 00:17:33,280
see in this screenshot it is highlighted

326
00:17:28,300 --> 00:17:35,530
in red it is a long teacher UUID that no

327
00:17:33,280 --> 00:17:40,690
one can prove us and you cannot

328
00:17:35,530 --> 00:17:43,450
enumerate that so naturally as a hunter

329
00:17:40,690 --> 00:17:47,910
we have to read a lot of documentation

330
00:17:43,450 --> 00:17:49,150
so I consulted the API documentation

331
00:17:47,910 --> 00:17:53,860
from

332
00:17:49,150 --> 00:17:58,120
soft and see hey is that a way for me to

333
00:17:53,860 --> 00:18:02,500
retrieve all ID of other people and then

334
00:17:58,120 --> 00:18:05,649
it turns out there is a exact endpoint

335
00:18:02,500 --> 00:18:09,460
that you can cure and then it will

336
00:18:05,650 --> 00:18:13,810
return there oh ID to you without any

337
00:18:09,460 --> 00:18:17,560
user interaction so it means that now

338
00:18:13,810 --> 00:18:20,740
with this JWT I can get other people's

339
00:18:17,560 --> 00:18:24,600
body without their interaction so my

340
00:18:20,740 --> 00:18:30,640
next plan is to substitute their body

341
00:18:24,600 --> 00:18:36,330
into my JWT token and then the final

342
00:18:30,640 --> 00:18:40,570
step is using this updated JWT token to

343
00:18:36,330 --> 00:18:45,010
curate the mail reading API endpoints

344
00:18:40,570 --> 00:18:51,909
and see if I can read their email and of

345
00:18:45,010 --> 00:18:54,520
course I did I can read anyone's email

346
00:18:51,910 --> 00:18:57,340
using this technique as long as they are

347
00:18:54,520 --> 00:19:00,120
inside the same tenant it means that if

348
00:18:57,340 --> 00:19:03,699
you guys are inside the same

349
00:19:00,120 --> 00:19:06,040
organization then you can use this to

350
00:19:03,700 --> 00:19:08,250
with anyone that works for this company

351
00:19:06,040 --> 00:19:13,659
as well

352
00:19:08,250 --> 00:19:16,440
to conclude first I saw a retweet from

353
00:19:13,660 --> 00:19:20,350
Microsoft and then I took a look at

354
00:19:16,440 --> 00:19:24,610
Outlook and then I discovered that I can

355
00:19:20,350 --> 00:19:26,980
get an unsigned JWT and then I can use

356
00:19:24,610 --> 00:19:30,370
the same Jade ability to get another

357
00:19:26,980 --> 00:19:36,130
person's body and then I will replace

358
00:19:30,370 --> 00:19:39,280
that person's body in my JWT that I got

359
00:19:36,130 --> 00:19:43,630
from Microsoft's and then at this point

360
00:19:39,280 --> 00:19:46,870
I'm impersonating that person so now the

361
00:19:43,630 --> 00:19:53,800
final step is I will send it to the mail

362
00:19:46,870 --> 00:19:56,800
surface and then I can read and write on

363
00:19:53,800 --> 00:19:59,980
behalf of any user using this technique

364
00:19:56,800 --> 00:20:03,070
if they are in the same organization at

365
00:19:59,980 --> 00:20:05,740
this point I stopped every testing

366
00:20:03,070 --> 00:20:10,389
because I think this is cute enough for

367
00:20:05,740 --> 00:20:16,299
the impact so I contacted Microsoft

368
00:20:10,389 --> 00:20:18,340
security and then here's the end and now

369
00:20:16,299 --> 00:20:22,200
I would pass through Rafi to complete

370
00:20:18,340 --> 00:20:22,199
the rest of the story thank you

371
00:20:25,950 --> 00:20:31,990
Thank You Terry Adan so let's talk about

372
00:20:29,980 --> 00:20:35,769
the response from Microsoft that

373
00:20:31,990 --> 00:20:39,639
followed these reports so as Teddy

374
00:20:35,769 --> 00:20:41,679
mentioned some time on March 24th

375
00:20:39,639 --> 00:20:47,379
Microsoft Security Response Center

376
00:20:41,679 --> 00:20:50,049
received a que the case from Teddy which

377
00:20:47,379 --> 00:20:53,259
was then triaged and then case for

378
00:20:50,049 --> 00:20:55,990
remediation so Outlook Web App team at

379
00:20:53,259 --> 00:20:58,809
this time started looking for fixes and

380
00:20:55,990 --> 00:21:01,809
mitigations without impacting major

381
00:20:58,809 --> 00:21:06,668
functionality in Outlook because the it

382
00:21:01,809 --> 00:21:07,090
was a critical EP API soon a few days

383
00:21:06,669 --> 00:21:10,629
later

384
00:21:07,090 --> 00:21:12,879
ron's report followed and since this was

385
00:21:10,629 --> 00:21:15,850
a second discovery of the same volume

386
00:21:12,879 --> 00:21:19,029
ility in few days time Microsoft

387
00:21:15,850 --> 00:21:22,740
Security Response sister center declared

388
00:21:19,029 --> 00:21:26,830
sir soap is a process that Microsoft

389
00:21:22,740 --> 00:21:30,730
follows to handle elevated attacks on

390
00:21:26,830 --> 00:21:33,340
customers so as a result Microsoft

391
00:21:30,730 --> 00:21:37,480
Outlook Web App team started looking for

392
00:21:33,340 --> 00:21:41,080
fixes which accelerated fixes and

393
00:21:37,480 --> 00:21:44,350
mitigations so at at this point of time

394
00:21:41,080 --> 00:21:46,899
what we were thinking is we have to stop

395
00:21:44,350 --> 00:21:48,879
this as soon as possible even if the

396
00:21:46,899 --> 00:21:51,879
with trade-offs of loss of some

397
00:21:48,879 --> 00:21:55,480
functionality because you don't know how

398
00:21:51,879 --> 00:21:58,959
it could be exploited so in a couple of

399
00:21:55,480 --> 00:22:01,539
days time Microsoft over an over team

400
00:21:58,960 --> 00:22:03,850
rolled out a mitigation and turned off

401
00:22:01,539 --> 00:22:06,460
get access to confer resource API which

402
00:22:03,850 --> 00:22:10,740
immediately stopped the clients from

403
00:22:06,460 --> 00:22:14,470
getting a partially signed access token

404
00:22:10,740 --> 00:22:16,210
this also meant there was a trade-off

405
00:22:14,470 --> 00:22:17,120
that and we I will talk about more in

406
00:22:16,210 --> 00:22:19,190
the

407
00:22:17,120 --> 00:22:23,479
so let's go dig a bit more in the

408
00:22:19,190 --> 00:22:25,549
details of the mitigation so as you can

409
00:22:23,480 --> 00:22:27,200
see we have our client which is running

410
00:22:25,549 --> 00:22:30,830
in the browser on the user's computer

411
00:22:27,200 --> 00:22:33,559
and it's talks to a service endpoint

412
00:22:30,830 --> 00:22:37,699
which is the primary endpoint where in

413
00:22:33,559 --> 00:22:40,070
our client talks to and like all web

414
00:22:37,700 --> 00:22:43,600
apps it uses cookie based authentication

415
00:22:40,070 --> 00:22:47,029
to talk to the OA service endpoint

416
00:22:43,600 --> 00:22:49,939
however our client also talks to a

417
00:22:47,029 --> 00:22:52,879
common outlook rest endpoint for some

418
00:22:49,940 --> 00:22:55,129
common outlook spera wide

419
00:22:52,879 --> 00:22:58,459
functionalities like search and other

420
00:22:55,129 --> 00:23:01,519
miscellaneous options and this endpoint

421
00:22:58,460 --> 00:23:04,809
does not support cookie-based auth and

422
00:23:01,519 --> 00:23:08,149
it works on header based authentication

423
00:23:04,809 --> 00:23:10,129
so in order to get that token our client

424
00:23:08,149 --> 00:23:13,340
makes a get access token resource for

425
00:23:10,129 --> 00:23:16,759
API call to the server the server then

426
00:23:13,340 --> 00:23:20,119
used to mint a partially signed token

427
00:23:16,759 --> 00:23:22,129
and return it to the client which which

428
00:23:20,119 --> 00:23:24,860
is the token that Terry and Ron showed

429
00:23:22,129 --> 00:23:27,019
you earlier the client would then make

430
00:23:24,860 --> 00:23:29,360
the call using this token to the outlook

431
00:23:27,019 --> 00:23:34,159
rest endpoint and to perform user

432
00:23:29,360 --> 00:23:39,649
actions so so the first so to mitigate

433
00:23:34,159 --> 00:23:41,960
it we immediately turned off a flight or

434
00:23:39,649 --> 00:23:45,229
a switch as we call it to stop gate

435
00:23:41,960 --> 00:23:49,100
access token API from returning any kind

436
00:23:45,230 --> 00:23:50,929
of access this partially sign token to

437
00:23:49,100 --> 00:23:52,759
the client which also meant all the

438
00:23:50,929 --> 00:23:56,179
Clower calls to outlook rest endpoint

439
00:23:52,759 --> 00:23:58,519
would fail especially search and search

440
00:23:56,179 --> 00:24:02,299
since it's very very critical for any

441
00:23:58,519 --> 00:24:03,950
meaningful experience our team rerouted

442
00:24:02,299 --> 00:24:08,450
search back to the outlook input

443
00:24:03,950 --> 00:24:11,389
endpoint which was not optimal but it

444
00:24:08,450 --> 00:24:13,279
made the client work nonetheless there

445
00:24:11,389 --> 00:24:16,428
was some minor functionality losses but

446
00:24:13,279 --> 00:24:17,990
we were ok with at this stage but the

447
00:24:16,429 --> 00:24:20,480
most important thing at this point of

448
00:24:17,990 --> 00:24:25,759
time was this issue could not be

449
00:24:20,480 --> 00:24:28,820
exploited any more mu and in back-end

450
00:24:25,759 --> 00:24:30,310
and in parallel our team also was

451
00:24:28,820 --> 00:24:32,649
working on a

452
00:24:30,310 --> 00:24:35,260
we'll fix so that when we enable get

453
00:24:32,650 --> 00:24:37,390
access to confer API the client could

454
00:24:35,260 --> 00:24:40,150
not get a partial sign token and instead

455
00:24:37,390 --> 00:24:44,800
get a fully sign user permission tokens

456
00:24:40,150 --> 00:24:48,070
and it is important to note that because

457
00:24:44,800 --> 00:24:51,070
of surf and the incident response that

458
00:24:48,070 --> 00:24:53,950
we Microsoft was following our team was

459
00:24:51,070 --> 00:24:55,689
never scrambling ever for like what

460
00:24:53,950 --> 00:24:58,120
should we do and and things like that

461
00:24:55,690 --> 00:24:59,890
there was a proper communication and

462
00:24:58,120 --> 00:25:02,709
coordination between the teams which

463
00:24:59,890 --> 00:25:07,750
greatly help in mitigating the issue

464
00:25:02,710 --> 00:25:11,200
we're quickly so let's go a bit more

465
00:25:07,750 --> 00:25:15,730
into details of the fix that we made so

466
00:25:11,200 --> 00:25:18,760
as in the previous case our client would

467
00:25:15,730 --> 00:25:22,420
still talk to our service endpoint using

468
00:25:18,760 --> 00:25:24,340
cookie based authentication and it would

469
00:25:22,420 --> 00:25:27,400
still make the call to get a great

470
00:25:24,340 --> 00:25:30,429
access token API to get the token here

471
00:25:27,400 --> 00:25:33,880
instead of using a library in process to

472
00:25:30,430 --> 00:25:38,110
maintain token was service would then

473
00:25:33,880 --> 00:25:40,210
call token service to get the token so

474
00:25:38,110 --> 00:25:42,490
token service is a was an existing

475
00:25:40,210 --> 00:25:46,900
service that we have and which is

476
00:25:42,490 --> 00:25:49,120
protected by and controlled by a

477
00:25:46,900 --> 00:25:52,180
configuration for each of the app and

478
00:25:49,120 --> 00:25:54,729
the scenario so the these configurations

479
00:25:52,180 --> 00:25:58,000
are unloaded when new scenarios are

480
00:25:54,730 --> 00:26:01,540
written and these policies are applied

481
00:25:58,000 --> 00:26:04,480
at runtime whenever a token is requested

482
00:26:01,540 --> 00:26:07,300
for that scenario so once our service

483
00:26:04,480 --> 00:26:11,440
endpoint gets a token and in this case a

484
00:26:07,300 --> 00:26:14,230
user level permission token it it then

485
00:26:11,440 --> 00:26:17,650
calls the outlook rest endpoint with

486
00:26:14,230 --> 00:26:19,720
that new user permission token the

487
00:26:17,650 --> 00:26:22,000
search was rerouted back and all the

488
00:26:19,720 --> 00:26:25,140
functionalities that were disabled

489
00:26:22,000 --> 00:26:28,120
we're enabled again and the service was

490
00:26:25,140 --> 00:26:32,740
back running in the normal state as it

491
00:26:28,120 --> 00:26:34,449
was before the same day my to a

492
00:26:32,740 --> 00:26:36,400
Microsoft Security Response Center also

493
00:26:34,450 --> 00:26:38,320
confirmed with Teddy and Ron that they

494
00:26:36,400 --> 00:26:42,400
were not able to reproduce the issue

495
00:26:38,320 --> 00:26:44,610
anymore and also confirm with them that

496
00:26:42,400 --> 00:26:47,100
we would be paying but

497
00:26:44,610 --> 00:26:49,860
and Microsoft elected to increase the

498
00:26:47,100 --> 00:26:53,129
bounty amount considering the severity

499
00:26:49,860 --> 00:26:56,100
of the issue as well as the impact that

500
00:26:53,130 --> 00:26:58,980
it had and the high quality of reports

501
00:26:56,100 --> 00:27:01,500
that were submitted to us we thank both

502
00:26:58,980 --> 00:27:05,730
of you a lot for this partnership in

503
00:27:01,500 --> 00:27:07,890
keeping the customers protected so the

504
00:27:05,730 --> 00:27:11,940
outcome of this story is what you would

505
00:27:07,890 --> 00:27:15,780
hope for the researchers reported a

506
00:27:11,940 --> 00:27:18,120
issue to Microsoft and Microsoft quickly

507
00:27:15,780 --> 00:27:21,600
responded by meeting by mitigating the

508
00:27:18,120 --> 00:27:24,570
issue and turning off the affected call

509
00:27:21,600 --> 00:27:29,250
call path followed soon by a

510
00:27:24,570 --> 00:27:31,610
comprehensive fix which mitigated the

511
00:27:29,250 --> 00:27:34,940
issue which fixed the issue actually and

512
00:27:31,610 --> 00:27:38,159
returned the service to the normal state

513
00:27:34,940 --> 00:27:41,670
the researchers were paid bounty rewards

514
00:27:38,160 --> 00:27:47,190
for their partnership and customers were

515
00:27:41,670 --> 00:27:50,100
protected so in the final part of the

516
00:27:47,190 --> 00:27:53,870
story we would like to share some of the

517
00:27:50,100 --> 00:27:56,610
learnings that we derived from this

518
00:27:53,870 --> 00:27:58,169
incident and some of which can be

519
00:27:56,610 --> 00:28:04,679
applied to other developers and cloud

520
00:27:58,170 --> 00:28:07,440
service providers as well so from the

521
00:28:04,680 --> 00:28:09,900
developers perspective it is very very

522
00:28:07,440 --> 00:28:13,380
important that we follow if the

523
00:28:09,900 --> 00:28:16,590
principle of least privilege and we can

524
00:28:13,380 --> 00:28:21,510
achieve that this by promoting resource

525
00:28:16,590 --> 00:28:22,949
scope and one-time tokens this this was

526
00:28:21,510 --> 00:28:25,230
the biggest learning that we derived

527
00:28:22,950 --> 00:28:27,150
from here and it helps greatly in

528
00:28:25,230 --> 00:28:31,200
improving the security and helps

529
00:28:27,150 --> 00:28:33,870
minimizing the attack surface secondly

530
00:28:31,200 --> 00:28:36,500
while it is very very important to like

531
00:28:33,870 --> 00:28:39,300
adopt newer tools and technologies and

532
00:28:36,500 --> 00:28:42,080
like adopt newer flows in terms of

533
00:28:39,300 --> 00:28:45,360
security it is equally important to

534
00:28:42,080 --> 00:28:49,550
support and like to drive and deprecated

535
00:28:45,360 --> 00:28:52,229
end of to a deprecated and to drive and

536
00:28:49,550 --> 00:28:56,490
support for legacy token types and power

537
00:28:52,230 --> 00:28:58,169
and and systems so this not only will

538
00:28:56,490 --> 00:29:01,820
help you in ready

539
00:28:58,169 --> 00:29:04,289
using the attack surface but also in

540
00:29:01,820 --> 00:29:08,129
general as a general good software

541
00:29:04,289 --> 00:29:12,600
practice will reduce your overhead in

542
00:29:08,129 --> 00:29:14,639
terms of maintenance as well as like may

543
00:29:12,600 --> 00:29:17,580
India biggest thing is like it will

544
00:29:14,639 --> 00:29:22,379
reduce your overhead of maintenance so

545
00:29:17,580 --> 00:29:26,039
and thirdly it's very important to have

546
00:29:22,379 --> 00:29:28,408
like security policies in place for

547
00:29:26,039 --> 00:29:30,869
token issuance because with the rise of

548
00:29:28,409 --> 00:29:33,899
micro services based architecture the

549
00:29:30,869 --> 00:29:35,279
usage of service to service tokens and

550
00:29:33,899 --> 00:29:37,768
climb to service tokens have like

551
00:29:35,279 --> 00:29:39,269
increased dramatically like there are so

552
00:29:37,769 --> 00:29:42,840
many service and you need so many tokens

553
00:29:39,269 --> 00:29:45,450
to talk to a different services so so

554
00:29:42,840 --> 00:29:49,019
having policies in place and like having

555
00:29:45,450 --> 00:29:50,700
configuration and having this decided

556
00:29:49,019 --> 00:29:52,679
that the scenario onboarding time of

557
00:29:50,700 --> 00:29:54,809
what kind of sort oaken's are needed and

558
00:29:52,679 --> 00:29:57,299
what kind of tokens are issued and

559
00:29:54,809 --> 00:30:01,440
enforcing those policies at runtime it's

560
00:29:57,299 --> 00:30:03,480
very very important and it's very its it

561
00:30:01,440 --> 00:30:06,359
is it's always a good idea to have a

562
00:30:03,480 --> 00:30:09,359
common team for to which manages this

563
00:30:06,359 --> 00:30:11,249
policy because as developers we always

564
00:30:09,359 --> 00:30:14,249
try to choose the most straightforward

565
00:30:11,249 --> 00:30:18,330
path to implement the feature and like

566
00:30:14,249 --> 00:30:20,190
get it out to the users but so and this

567
00:30:18,330 --> 00:30:23,908
straight forward path might not be the

568
00:30:20,190 --> 00:30:28,169
most secure path this having a common

569
00:30:23,909 --> 00:30:32,190
team also helps us you know reducing the

570
00:30:28,169 --> 00:30:33,929
compile so that helps us and make

571
00:30:32,190 --> 00:30:35,789
feature teams not aware of the

572
00:30:33,929 --> 00:30:37,590
complexities of authentications and

573
00:30:35,789 --> 00:30:41,549
token handling and things like that like

574
00:30:37,590 --> 00:30:46,379
that which is also one more area where

575
00:30:41,549 --> 00:30:49,259
things can go wrong so from the cloud

576
00:30:46,379 --> 00:30:51,408
service providers perspective it's very

577
00:30:49,259 --> 00:30:57,779
critical to have your incident response

578
00:30:51,409 --> 00:30:59,399
process ready and in place so all the

579
00:30:57,779 --> 00:31:03,029
teams normally have a process wherein

580
00:30:59,399 --> 00:31:06,359
when they receive a we receive a report

581
00:31:03,029 --> 00:31:09,149
or a bug or issue they try to remediate

582
00:31:06,359 --> 00:31:10,810
it they work on a fix and then they

583
00:31:09,149 --> 00:31:14,709
deploy the fix

584
00:31:10,810 --> 00:31:17,320
worldwide to solve the problem however

585
00:31:14,710 --> 00:31:20,470
there are scenarios where a standard

586
00:31:17,320 --> 00:31:22,960
process is not enough you need an

587
00:31:20,470 --> 00:31:25,420
accelerated process in cases like this

588
00:31:22,960 --> 00:31:28,510
where you need to immediately do

589
00:31:25,420 --> 00:31:33,700
something to stop things from going back

590
00:31:28,510 --> 00:31:38,170
to worse and so so whenever any issue

591
00:31:33,700 --> 00:31:39,970
arises you should the team should decide

592
00:31:38,170 --> 00:31:41,710
should they follow a standard process to

593
00:31:39,970 --> 00:31:43,840
mitigate it or should they follow an

594
00:31:41,710 --> 00:31:47,340
accelerated process in an accelerated

595
00:31:43,840 --> 00:31:50,110
process you the team should look to

596
00:31:47,340 --> 00:31:52,780
mitigate the issue as soon as possible

597
00:31:50,110 --> 00:31:54,699
even if it means there might be some

598
00:31:52,780 --> 00:31:56,410
functionality lost here and there and

599
00:31:54,700 --> 00:31:59,320
that is a judgment call that need team

600
00:31:56,410 --> 00:32:01,420
needs to make make and in parallel that

601
00:31:59,320 --> 00:32:04,659
there should be dedicated engineers who

602
00:32:01,420 --> 00:32:08,140
work on long-term correct fix that needs

603
00:32:04,660 --> 00:32:10,690
to be made and then the last part is

604
00:32:08,140 --> 00:32:12,240
then deploying those fix to all the

605
00:32:10,690 --> 00:32:15,970
servers in the world to restore the

606
00:32:12,240 --> 00:32:17,950
state so if you if you have a few

607
00:32:15,970 --> 00:32:20,380
servers then it's okay but if you are

608
00:32:17,950 --> 00:32:23,110
working with servers and the order of

609
00:32:20,380 --> 00:32:25,900
hundreds of thousands that having that

610
00:32:23,110 --> 00:32:28,510
process in place helps and having a the

611
00:32:25,900 --> 00:32:30,040
incident response place response plan

612
00:32:28,510 --> 00:32:31,480
also helps in like in terms of

613
00:32:30,040 --> 00:32:34,570
communication and collaboration between

614
00:32:31,480 --> 00:32:37,660
the teams in finding other issues that

615
00:32:34,570 --> 00:32:39,960
might be affected because of or and

616
00:32:37,660 --> 00:32:42,430
finding other similary issues so

617
00:32:39,960 --> 00:32:43,860
incident response plan is very very

618
00:32:42,430 --> 00:32:49,120
important

619
00:32:43,860 --> 00:32:51,610
secondly have and have like review the

620
00:32:49,120 --> 00:32:53,919
your scenarios not only during the

621
00:32:51,610 --> 00:32:56,830
design time but also periodically as

622
00:32:53,920 --> 00:33:00,670
part of periodic scenario audits because

623
00:32:56,830 --> 00:33:02,409
you you at the design time it might pass

624
00:33:00,670 --> 00:33:04,690
the security review and everything looks

625
00:33:02,410 --> 00:33:06,760
good but over a period of time as we all

626
00:33:04,690 --> 00:33:09,040
know things change and the systems

627
00:33:06,760 --> 00:33:11,620
change and what was intended initially

628
00:33:09,040 --> 00:33:14,200
might not be how it is running right now

629
00:33:11,620 --> 00:33:20,350
so periodic audit helps a lot in that

630
00:33:14,200 --> 00:33:22,810
you know in that area third is always

631
00:33:20,350 --> 00:33:23,939
keep learning from your past reports and

632
00:33:22,810 --> 00:33:26,279
bugs

633
00:33:23,940 --> 00:33:29,610
as well as leading in this and like

634
00:33:26,279 --> 00:33:31,320
following good industry practices to

635
00:33:29,610 --> 00:33:36,750
improve the security flow of your

636
00:33:31,320 --> 00:33:38,610
systems and lastly but very important it

637
00:33:36,750 --> 00:33:41,850
is to partner with the security

638
00:33:38,610 --> 00:33:44,879
community to find flaws every every team

639
00:33:41,850 --> 00:33:46,949
or every normally a company can have

640
00:33:44,879 --> 00:33:51,059
internal security researchers and teams

641
00:33:46,950 --> 00:33:53,059
to find to find issues in their system

642
00:33:51,059 --> 00:33:57,509
but it is also equally important to

643
00:33:53,059 --> 00:33:59,820
partner with a community to to like so

644
00:33:57,509 --> 00:34:02,639
that both complement each other and find

645
00:33:59,820 --> 00:34:05,580
their problems and if someone finds a

646
00:34:02,639 --> 00:34:08,310
problem or an issue you should have a

647
00:34:05,580 --> 00:34:10,799
way or I they should know that these

648
00:34:08,310 --> 00:34:13,078
securities such as know how to report

649
00:34:10,800 --> 00:34:16,200
this issue to you and you have a plan in

650
00:34:13,079 --> 00:34:22,530
place to manage the fix and roll out the

651
00:34:16,199 --> 00:34:23,879
fix so there are a few learnings from

652
00:34:22,530 --> 00:34:26,609
the researchers perspective as well

653
00:34:23,879 --> 00:34:29,520
which Terry and Ron would share okay

654
00:34:26,609 --> 00:34:32,040
Thank You Ravi and I just got two quick

655
00:34:29,520 --> 00:34:34,889
tips for bag hunters or what has the

656
00:34:32,040 --> 00:34:36,629
first one is always use the application

657
00:34:34,889 --> 00:34:38,399
where you face a target always use it

658
00:34:36,629 --> 00:34:40,980
just like a normal user at the first

659
00:34:38,399 --> 00:34:42,839
time no hurry to test no hurry to like

660
00:34:40,980 --> 00:34:44,909
spread your payload everywhere to save

661
00:34:42,839 --> 00:34:46,589
it if it can trigger somewhere that that

662
00:34:44,909 --> 00:34:49,589
is really not helpful for your skills

663
00:34:46,589 --> 00:34:52,560
and just especially it is helpful when

664
00:34:49,589 --> 00:34:54,509
you like I will look for like

665
00:34:52,560 --> 00:34:56,279
authentication authorization issue or

666
00:34:54,510 --> 00:34:58,890
privacy issue or logic issue it is

667
00:34:56,280 --> 00:35:00,540
really helpful when you totally

668
00:34:58,890 --> 00:35:03,359
understand the application understand

669
00:35:00,540 --> 00:35:06,810
the target even more familiar than their

670
00:35:03,359 --> 00:35:09,150
own part of manager so that is first tip

671
00:35:06,810 --> 00:35:11,670
and the second is always monitor the

672
00:35:09,150 --> 00:35:14,010
update of the target like no matter you

673
00:35:11,670 --> 00:35:16,470
use some technique to monitor their like

674
00:35:14,010 --> 00:35:19,470
static files like JavaScript files or

675
00:35:16,470 --> 00:35:22,618
you can just assembly use RSS reader is

676
00:35:19,470 --> 00:35:24,779
really helpful like you can review the

677
00:35:22,619 --> 00:35:27,030
the new attack surface at the very first

678
00:35:24,780 --> 00:35:33,630
time than everyone else so that's my

679
00:35:27,030 --> 00:35:36,900
tips and for my part I would say that I

680
00:35:33,630 --> 00:35:37,700
got lucky this time because I got great

681
00:35:36,900 --> 00:35:42,109
too

682
00:35:37,700 --> 00:35:45,290
me for this bug so my suggestion is keep

683
00:35:42,109 --> 00:35:48,049
improving your tool box say in my

684
00:35:45,290 --> 00:35:50,950
example I got lucky I installed it that

685
00:35:48,050 --> 00:35:53,270
Jason web token attacker so it

686
00:35:50,950 --> 00:35:56,419
automatically highlighted the request

687
00:35:53,270 --> 00:35:58,220
that I would not have been looking at it

688
00:35:56,420 --> 00:36:01,940
at all

689
00:35:58,220 --> 00:36:04,790
so always improve your tool box that

690
00:36:01,940 --> 00:36:08,300
fits your need and the second one

691
00:36:04,790 --> 00:36:11,480
obviously is make sure to document and

692
00:36:08,300 --> 00:36:14,660
screenshot your work because I forgot to

693
00:36:11,480 --> 00:36:18,500
do that at the time of discovery that's

694
00:36:14,660 --> 00:36:23,140
why I have to use the updated version of

695
00:36:18,500 --> 00:36:25,369
JW the fixed version but the reason for

696
00:36:23,140 --> 00:36:28,339
researcher to always screenshot and

697
00:36:25,369 --> 00:36:31,579
document your finding is that in this

698
00:36:28,339 --> 00:36:35,240
way you can learn it from the past and

699
00:36:31,579 --> 00:36:38,540
also you can always keep evidence and

700
00:36:35,240 --> 00:36:40,790
keep up your work for future use like

701
00:36:38,540 --> 00:36:43,630
you don't know what when do you need

702
00:36:40,790 --> 00:36:46,250
them and yep so this is my final tip

703
00:36:43,630 --> 00:36:51,380
make sure the document I screenshot your

704
00:36:46,250 --> 00:36:53,450
work thank you thank you okay yeah so

705
00:36:51,380 --> 00:36:57,829
here are just about the resources that

706
00:36:53,450 --> 00:36:59,839
we talked about during our talk here so

707
00:36:57,829 --> 00:37:04,069
you can download Bob sweet from Portugal

708
00:36:59,839 --> 00:37:06,290
tech and read a bit more about Outlook

709
00:37:04,069 --> 00:37:09,290
REST API is from Doc stock Microsoft

710
00:37:06,290 --> 00:37:11,869
comm and you can read the wonderful

711
00:37:09,290 --> 00:37:14,480
black blog of mmm SRC if you are

712
00:37:11,869 --> 00:37:17,750
interested in developing an incident

713
00:37:14,480 --> 00:37:20,810
response plan for your own team and

714
00:37:17,750 --> 00:37:23,510
company and yeah so that's all from us

715
00:37:20,810 --> 00:37:27,899
thank you thank you

716
00:37:23,510 --> 00:37:27,899
[Applause]

