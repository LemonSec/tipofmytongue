1
00:00:00,030 --> 00:00:08,068
welcome to he-said she-said poisoned our

2
00:00:04,140 --> 00:00:12,530
DP offense and defense by Donna Burrell

3
00:00:08,069 --> 00:00:16,680
and I'll get Caen in South Seas a b e

4
00:00:12,530 --> 00:00:19,198
before we begin a few brief notes stop

5
00:00:16,680 --> 00:00:22,529
by the business hall located in mandalay

6
00:00:19,199 --> 00:00:25,170
bay Oceanside and shoreline ballrooms on

7
00:00:22,529 --> 00:00:28,170
level two during the day and for the

8
00:00:25,170 --> 00:00:29,970
Welcome Reception at 5:30 tonight the

9
00:00:28,170 --> 00:00:33,120
black hat Arsenal is in the business

10
00:00:29,970 --> 00:00:35,370
hall on level two join us for the pony

11
00:00:33,120 --> 00:00:38,790
awards in lagoon JKL

12
00:00:35,370 --> 00:00:41,250
at 18:30 thanks for putting your phones

13
00:00:38,790 --> 00:00:42,809
on vibrate it makes it easier for the

14
00:00:41,250 --> 00:00:44,370
rest of us to ignore the ringing while

15
00:00:42,809 --> 00:00:46,709
you wait for your voicemail to pick it

16
00:00:44,370 --> 00:00:48,870
up for the question and answer session

17
00:00:46,710 --> 00:00:50,969
afterwards please remember to use the

18
00:00:48,870 --> 00:00:59,608
microphones available in the ions and

19
00:00:50,969 --> 00:01:01,920
with that let us welcome our speakers hi

20
00:00:59,609 --> 00:01:04,220
thank you for joining our session about

21
00:01:01,920 --> 00:01:06,180
poisoned our DP offense and defense

22
00:01:04,220 --> 00:01:08,760
before we start we would like to

23
00:01:06,180 --> 00:01:10,920
introduce ourselves so my name is Dan

24
00:01:08,760 --> 00:01:14,760
auroral I'm a security software engineer

25
00:01:10,920 --> 00:01:17,840
working for Microsoft Defender ATP my

26
00:01:14,760 --> 00:01:24,090
job is to investigate new tracks and

27
00:01:17,840 --> 00:01:27,840
develop new detections all right thanks

28
00:01:24,090 --> 00:01:29,820
so hi I'm Ellie Kim I'm Avenue ability

29
00:01:27,840 --> 00:01:32,430
research other checkpoints this is cool

30
00:01:29,820 --> 00:01:35,369
in this joint research I was focusing on

31
00:01:32,430 --> 00:01:37,850
the offensive part and now what we'll

32
00:01:35,369 --> 00:01:40,170
finish with the introduction let's begin

33
00:01:37,850 --> 00:01:41,640
as you probably understood from the

34
00:01:40,170 --> 00:01:44,549
title of our talk we're going to talk

35
00:01:41,640 --> 00:01:47,670
about a modest of oracle or RTP which

36
00:01:44,549 --> 00:01:50,310
raises the question about okay so are

37
00:01:47,670 --> 00:01:52,530
you going to talk about blue key no

38
00:01:50,310 --> 00:01:55,140
block Eve is a different vendor ability

39
00:01:52,530 --> 00:01:56,369
in the mode d'stefano call it's an

40
00:01:55,140 --> 00:01:59,040
honest allocated remote code execution

41
00:01:56,369 --> 00:02:02,189
and vulnerability in Microsoft Store

42
00:01:59,040 --> 00:02:04,530
repeat servals this critical

43
00:02:02,189 --> 00:02:06,839
vulnerability was disclosed to Microsoft

44
00:02:04,530 --> 00:02:09,890
the UK's national cert in May this year

45
00:02:06,840 --> 00:02:12,750
it's gained a lot of media attention and

46
00:02:09,889 --> 00:02:13,779
many security researchers feel that it

47
00:02:12,750 --> 00:02:16,090
might be used

48
00:02:13,780 --> 00:02:18,510
if my doctor is to initiate a new wave

49
00:02:16,090 --> 00:02:21,250
of wanna cry like ransom

50
00:02:18,510 --> 00:02:22,870
however in this talk we're going to

51
00:02:21,250 --> 00:02:27,190
represent and focus on a different

52
00:02:22,870 --> 00:02:32,380
attack vector which focuses on clients

53
00:02:27,190 --> 00:02:34,990
not the server itself let's begin no

54
00:02:32,380 --> 00:02:37,859
motivation for our research lies in what

55
00:02:34,990 --> 00:02:41,890
we define as lazy lateral movement

56
00:02:37,860 --> 00:02:44,530
usually an attack on an organization

57
00:02:41,890 --> 00:02:48,250
starts in a way that the threat doctor

58
00:02:44,530 --> 00:02:50,800
already has one computer but was already

59
00:02:48,250 --> 00:02:52,959
compromised via a USB or phishing email

60
00:02:50,800 --> 00:02:55,120
or anything like it and once it has a

61
00:02:52,959 --> 00:02:58,600
single compromised machine in the core

62
00:02:55,120 --> 00:02:59,950
boy network it will use it to start the

63
00:02:58,600 --> 00:03:02,320
second phase of the attack which is

64
00:02:59,950 --> 00:03:03,970
called lateral movement in the lateral

65
00:03:02,320 --> 00:03:06,519
movement phase the attacker will use

66
00:03:03,970 --> 00:03:10,030
initial foothold inside the organization

67
00:03:06,520 --> 00:03:11,650
and will try to exploit multiple

68
00:03:10,030 --> 00:03:13,900
vulnerabilities to spread throughout the

69
00:03:11,650 --> 00:03:16,540
network to compromised computers and

70
00:03:13,900 --> 00:03:19,239
servers alike in order to harvest as

71
00:03:16,540 --> 00:03:22,359
many credentials as it could and

72
00:03:19,239 --> 00:03:25,060
essentially hoping to take over the

73
00:03:22,360 --> 00:03:28,299
entire an organizational network however

74
00:03:25,060 --> 00:03:29,890
we're thinking about what if our threat

75
00:03:28,299 --> 00:03:33,549
actor doesn't have such a large variety

76
00:03:29,890 --> 00:03:35,470
of vulnerabilities therefore we define a

77
00:03:33,549 --> 00:03:38,680
new attack vector called lazy lateral

78
00:03:35,470 --> 00:03:42,100
moving and this time attacker will want

79
00:03:38,680 --> 00:03:44,019
a strong users inside a network to

80
00:03:42,100 --> 00:03:46,090
somehow connect the act to the already

81
00:03:44,019 --> 00:03:50,560
compromised single machine inside a

82
00:03:46,090 --> 00:03:52,720
network if we could ambush privileged

83
00:03:50,560 --> 00:03:55,690
users and allow them to connect to our

84
00:03:52,720 --> 00:03:57,519
machine maybe we could leverage this

85
00:03:55,690 --> 00:04:00,370
connection and exploit vulnerabilities

86
00:03:57,519 --> 00:04:02,200
over the connection to take over the

87
00:04:00,370 --> 00:04:05,440
connecting client this could be

88
00:04:02,200 --> 00:04:07,149
applicable for IT staff for example we

89
00:04:05,440 --> 00:04:09,970
would want to harvest and collect a

90
00:04:07,150 --> 00:04:13,030
strong credentials such as domain admin

91
00:04:09,970 --> 00:04:14,100
password inside the network and from my

92
00:04:13,030 --> 00:04:16,988
day to day life

93
00:04:14,100 --> 00:04:19,570
it could be applicable also for my

94
00:04:16,988 --> 00:04:21,700
researchers my researchers tend to

95
00:04:19,570 --> 00:04:23,860
execute marrow samples on a daily basis

96
00:04:21,700 --> 00:04:26,409
in isolated virtual machines

97
00:04:23,860 --> 00:04:26,770
and once in a while the male researcher

98
00:04:26,410 --> 00:04:28,330
will

99
00:04:26,770 --> 00:04:30,818
back to the machine and check up on the

100
00:04:28,330 --> 00:04:32,680
status of the EMR well if the model

101
00:04:30,819 --> 00:04:36,430
could leverage this connection and

102
00:04:32,680 --> 00:04:38,319
exploit a vulnerability in a software it

103
00:04:36,430 --> 00:04:40,599
could escape the isolated virtual

104
00:04:38,319 --> 00:04:44,940
machine and infect the computer of the

105
00:04:40,599 --> 00:04:48,810
Marvel researcher so essentially our

106
00:04:44,940 --> 00:04:52,509
motivation is we want to lure people to

107
00:04:48,810 --> 00:04:54,940
specific machines and check if it would

108
00:04:52,509 --> 00:04:57,250
hijack the incoming connection once we

109
00:04:54,940 --> 00:04:59,199
define this motivation the goal and the

110
00:04:57,250 --> 00:05:01,930
subject for the research was quite clear

111
00:04:59,199 --> 00:05:04,930
which was the focus on RDP whenever

112
00:05:01,930 --> 00:05:06,819
remote desktop protocol for those of you

113
00:05:04,930 --> 00:05:08,080
who are not familiar with RDP RDP is

114
00:05:06,819 --> 00:05:10,840
used to connect to remote Windows

115
00:05:08,080 --> 00:05:13,240
machines the basic terms of the protocol

116
00:05:10,840 --> 00:05:16,359
are that a client is going to connect

117
00:05:13,240 --> 00:05:18,669
into a remote Windows Server although

118
00:05:16,360 --> 00:05:21,310
it's called silver it could be a remote

119
00:05:18,669 --> 00:05:23,560
cooperate standard computer it could be

120
00:05:21,310 --> 00:05:27,639
a physical server and it could also be a

121
00:05:23,560 --> 00:05:30,909
local or remote virtual machine if

122
00:05:27,639 --> 00:05:33,099
probably know RDP also as NSPS see after

123
00:05:30,909 --> 00:05:36,580
Microsoft's built in an RDP client

124
00:05:33,099 --> 00:05:38,409
called mstc dot xn and just as a side

125
00:05:36,580 --> 00:05:40,810
note all of the attacks were going to

126
00:05:38,409 --> 00:05:43,419
present in this talk a done require

127
00:05:40,810 --> 00:05:45,639
elevated privileges or admin privileges

128
00:05:43,419 --> 00:05:48,789
any user could perform the attack we're

129
00:05:45,639 --> 00:05:54,009
going to present now that we talked

130
00:05:48,789 --> 00:05:55,750
about RDP what is poison or even in a

131
00:05:54,009 --> 00:05:57,669
poison RDP attack scenario we already

132
00:05:55,750 --> 00:05:59,529
said that if a doctor has an initial

133
00:05:57,669 --> 00:06:02,520
foothold inside the corporate computer

134
00:05:59,529 --> 00:06:05,050
and it wants to infect the IT staff

135
00:06:02,520 --> 00:06:07,270
instead of the marvelous tank stealth as

136
00:06:05,050 --> 00:06:10,630
usually mud will do we will try to do

137
00:06:07,270 --> 00:06:12,940
exactly the opposite we will pop up

138
00:06:10,630 --> 00:06:15,009
randomly all messages slow down the

139
00:06:12,940 --> 00:06:17,409
computer and essentially do the maximum

140
00:06:15,009 --> 00:06:20,770
we can to make the life of the cooperate

141
00:06:17,409 --> 00:06:22,479
user as miserable as possible this is so

142
00:06:20,770 --> 00:06:24,430
that the corporate user will open up a

143
00:06:22,479 --> 00:06:26,050
ticket to the help desk saying please

144
00:06:24,430 --> 00:06:28,810
help me something is wrong with my

145
00:06:26,050 --> 00:06:30,610
computer hey hopefully after the waco to

146
00:06:28,810 --> 00:06:33,520
someone from help desk will actually

147
00:06:30,610 --> 00:06:36,490
handle the ticket and connect back to

148
00:06:33,520 --> 00:06:38,589
our machines we are already people this

149
00:06:36,490 --> 00:06:40,550
is where the attack starts we will hope

150
00:06:38,589 --> 00:06:43,310
to find vulnerabilities in a particle

151
00:06:40,550 --> 00:06:45,980
itself or in the RDP client exploit

152
00:06:43,310 --> 00:06:49,190
these vulnerabilities and take over the

153
00:06:45,980 --> 00:06:51,230
computer of the connecting IT staff we

154
00:06:49,190 --> 00:06:54,170
could try to collect strong credentials

155
00:06:51,230 --> 00:06:56,120
from the victim but our main goal will

156
00:06:54,170 --> 00:06:57,770
be to attack and takeover the computer

157
00:06:56,120 --> 00:07:01,490
of the IT staff because we want to

158
00:06:57,770 --> 00:07:03,680
laterally move inside the network now

159
00:07:01,490 --> 00:07:05,570
that I define what is poison RDP it's

160
00:07:03,680 --> 00:07:19,190
quite clear but we're going to focus on

161
00:07:05,570 --> 00:07:21,890
party P clients for this visit ok so we

162
00:07:19,190 --> 00:07:23,900
have several RDP clients we have first

163
00:07:21,890 --> 00:07:26,510
of all we have open source clients the

164
00:07:23,900 --> 00:07:28,580
first client is our desktop it's a quite

165
00:07:26,510 --> 00:07:30,380
basic RDP client it doesn't support a

166
00:07:28,580 --> 00:07:33,460
lot of features but it's the built-in

167
00:07:30,380 --> 00:07:35,840
RDP client in Kali Linux for example

168
00:07:33,460 --> 00:07:38,690
after that we have we are deep in

169
00:07:35,840 --> 00:07:40,460
therapy is way more mature it supports

170
00:07:38,690 --> 00:07:41,990
many more features and it's way more

171
00:07:40,460 --> 00:07:45,919
popular in Geeta as you can see over

172
00:07:41,990 --> 00:07:48,620
there and last but not least we have a

173
00:07:45,920 --> 00:07:51,550
Microsoft built-in RDP client called

174
00:07:48,620 --> 00:07:55,820
MSDS C dot X which is by far the most

175
00:07:51,550 --> 00:07:57,980
widely used RDP client out there having

176
00:07:55,820 --> 00:08:00,950
free clients we had to decide ok where

177
00:07:57,980 --> 00:08:03,080
should we start and we decided to focus

178
00:08:00,950 --> 00:08:07,099
on the easiest target to begin with and

179
00:08:03,080 --> 00:08:08,930
this is hardest on our desktop is open

180
00:08:07,100 --> 00:08:12,890
source it supports the least amount of

181
00:08:08,930 --> 00:08:15,380
features and it has least amount of code

182
00:08:12,890 --> 00:08:17,419
lines when we check it up so our desktop

183
00:08:15,380 --> 00:08:19,659
was a clear choice to begin with when we

184
00:08:17,420 --> 00:08:22,370
want to start with the easiest target

185
00:08:19,660 --> 00:08:24,740
being of it so we could audit the code

186
00:08:22,370 --> 00:08:26,870
and actually learn how RDP works because

187
00:08:24,740 --> 00:08:29,990
up until now no one described to me how

188
00:08:26,870 --> 00:08:32,690
the protocol actually works and for my

189
00:08:29,990 --> 00:08:34,760
personal experience auditing the code

190
00:08:32,690 --> 00:08:36,950
and learning the form the code about the

191
00:08:34,760 --> 00:08:39,380
protocol is much more useful when

192
00:08:36,950 --> 00:08:41,270
reading the standards because you can

193
00:08:39,380 --> 00:08:43,130
only see features with someone actually

194
00:08:41,270 --> 00:08:45,680
implemented and you hope that people

195
00:08:43,130 --> 00:08:48,050
actually use these features but if you

196
00:08:45,680 --> 00:08:50,060
read standards you can find in a future

197
00:08:48,050 --> 00:08:52,849
annex or an appendix but no one actually

198
00:08:50,060 --> 00:08:53,400
implemented by the industry so auditing

199
00:08:52,850 --> 00:08:56,730
the code

200
00:08:53,400 --> 00:08:58,020
is my preferred weapon of choice and so

201
00:08:56,730 --> 00:08:59,280
we started already in the code and

202
00:08:58,020 --> 00:09:03,120
learning how our DP works

203
00:08:59,280 --> 00:09:05,790
the goal was to focus on potentially

204
00:09:03,120 --> 00:09:07,500
vulnerable features and models so

205
00:09:05,790 --> 00:09:09,810
hopefully we will have a specific

206
00:09:07,500 --> 00:09:11,820
feature that is bound to also

207
00:09:09,810 --> 00:09:14,010
vulnerabilities and maybe it will

208
00:09:11,820 --> 00:09:17,460
include vulnerabilities in multiple RDP

209
00:09:14,010 --> 00:09:18,900
clients and not only in Odessa gradually

210
00:09:17,460 --> 00:09:21,510
when we audit the code we gain

211
00:09:18,900 --> 00:09:23,910
confidence and once we think we finished

212
00:09:21,510 --> 00:09:26,250
covering off this specific client we'll

213
00:09:23,910 --> 00:09:29,730
move on to the next client and continue

214
00:09:26,250 --> 00:09:32,520
on with our research auditing the code

215
00:09:29,730 --> 00:09:35,310
we learned a few things about RDP and

216
00:09:32,520 --> 00:09:37,740
this is the protocol consists of logical

217
00:09:35,310 --> 00:09:39,510
channels this is a modular design that

218
00:09:37,740 --> 00:09:42,360
means you have a channel for audio a

219
00:09:39,510 --> 00:09:45,390
channel for video and a channel even for

220
00:09:42,360 --> 00:09:47,160
clipboard so we have a channel for

221
00:09:45,390 --> 00:09:48,870
everything in the code audit you just

222
00:09:47,160 --> 00:09:51,930
need to know that you covered each of

223
00:09:48,870 --> 00:09:53,760
the channels just as a side note blue

224
00:09:51,930 --> 00:09:57,120
key will exploit vulnerabilities in the

225
00:09:53,760 --> 00:09:59,580
internal MST a 120 channel which was

226
00:09:57,120 --> 00:10:03,330
supposed to be private what was a public

227
00:09:59,580 --> 00:10:06,360
and accessible to clients as well in

228
00:10:03,330 --> 00:10:08,520
addition RDP have a support for multiple

229
00:10:06,360 --> 00:10:11,280
authentication methods it's not really

230
00:10:08,520 --> 00:10:13,230
an interesting from our side because in

231
00:10:11,280 --> 00:10:14,910
our case the silver will exploit

232
00:10:13,230 --> 00:10:16,410
vulnerabilities in the client and the

233
00:10:14,910 --> 00:10:18,480
client is supposed to authenticate

234
00:10:16,410 --> 00:10:20,699
itself against the server so the server

235
00:10:18,480 --> 00:10:24,270
could essentially say yeah ok please

236
00:10:20,700 --> 00:10:26,430
connect and then exploit the client in

237
00:10:24,270 --> 00:10:28,140
addition we have screen updates when you

238
00:10:26,430 --> 00:10:30,209
see a screen you have several updates

239
00:10:28,140 --> 00:10:33,360
and each updates is represented as

240
00:10:30,210 --> 00:10:37,080
bitmap not a PNG file or the JPEG image

241
00:10:33,360 --> 00:10:38,580
playing all bitmaps and that's it and as

242
00:10:37,080 --> 00:10:40,350
I mentioned earlier we also have

243
00:10:38,580 --> 00:10:41,580
basically four types that are shared

244
00:10:40,350 --> 00:10:45,660
between the client and the server

245
00:10:41,580 --> 00:10:47,850
computer now that we learned about the

246
00:10:45,660 --> 00:10:50,579
RDP protocol we audited the code of our

247
00:10:47,850 --> 00:10:52,500
desktop we actually found out that our

248
00:10:50,580 --> 00:10:54,660
desktop users really naive the C code

249
00:10:52,500 --> 00:10:57,870
with less than minimal checks most of

250
00:10:54,660 --> 00:10:59,850
the times most of the times out even now

251
00:10:57,870 --> 00:11:01,920
checks that minimal input was received

252
00:10:59,850 --> 00:11:04,730
before someone actually parses a packet

253
00:11:01,920 --> 00:11:07,170
which is quite a common mistake in

254
00:11:04,730 --> 00:11:08,790
implementations of network protocols

255
00:11:07,170 --> 00:11:10,620
and we find a few interesting

256
00:11:08,790 --> 00:11:15,170
vulnerabilities and according to this

257
00:11:10,620 --> 00:11:17,400
specific bug overall we found 11

258
00:11:15,170 --> 00:11:19,650
critical vulnerabilities in this

259
00:11:17,400 --> 00:11:23,010
specific client and 19 Vernor abilities

260
00:11:19,650 --> 00:11:26,189
overall which was quite high here you

261
00:11:23,010 --> 00:11:27,630
can see the list of the CVA DS and if

262
00:11:26,190 --> 00:11:30,000
you'll do the math fast enough you can

263
00:11:27,630 --> 00:11:31,890
see we have only 10 CV IDs in this list

264
00:11:30,000 --> 00:11:33,090
then that's mainly because we weren't

265
00:11:31,890 --> 00:11:34,830
planning on finding so many

266
00:11:33,090 --> 00:11:37,590
vulnerabilities in our desktops so we

267
00:11:34,830 --> 00:11:40,110
ran out of CVA DS we had to ask

268
00:11:37,590 --> 00:11:42,840
Mitel for additional cv IDs for this

269
00:11:40,110 --> 00:11:45,710
research we got an additional a bulk of

270
00:11:42,840 --> 00:11:49,670
cv ids and here the full list of

271
00:11:45,710 --> 00:11:53,400
vulnerabilities for this specific client

272
00:11:49,670 --> 00:11:55,829
we found much more vulnerabilities when

273
00:11:53,400 --> 00:11:57,720
we when we hope for and we hope this is

274
00:11:55,830 --> 00:12:00,420
a good start for the next clients as

275
00:11:57,720 --> 00:12:02,160
well in addition we'll also find a

276
00:12:00,420 --> 00:12:05,550
complicated feature and it turns out

277
00:12:02,160 --> 00:12:08,040
parsing bitmaps is actually complex when

278
00:12:05,550 --> 00:12:10,650
you send a bitmap bitmap update it has

279
00:12:08,040 --> 00:12:13,319
its own width height and amount of bits

280
00:12:10,650 --> 00:12:15,840
per pixel the attacker can control each

281
00:12:13,320 --> 00:12:16,550
of these fields which are 16 bits in

282
00:12:15,840 --> 00:12:19,890
length

283
00:12:16,550 --> 00:12:22,410
afterwards all these field will be

284
00:12:19,890 --> 00:12:25,380
multiplied to allocate a heap buffer

285
00:12:22,410 --> 00:12:27,439
that will contain the decompressed

286
00:12:25,380 --> 00:12:30,780
bitmap that was sent over the channel

287
00:12:27,440 --> 00:12:33,990
however since we as an attackers control

288
00:12:30,780 --> 00:12:36,150
each of these fields if you position

289
00:12:33,990 --> 00:12:40,920
these specific values in each of the

290
00:12:36,150 --> 00:12:43,860
fields upon and multiply which will

291
00:12:40,920 --> 00:12:46,110
overflow the 32 bits of the variables

292
00:12:43,860 --> 00:12:48,750
and will get truncated down to the value

293
00:12:46,110 --> 00:12:51,210
we can see over here this means that the

294
00:12:48,750 --> 00:12:54,090
logical size of the allocated buffer

295
00:12:51,210 --> 00:12:55,950
will be smaller than the actual size of

296
00:12:54,090 --> 00:12:57,480
the allocated buffer will be smaller

297
00:12:55,950 --> 00:12:59,640
than the logical size with the

298
00:12:57,480 --> 00:13:02,130
decompression will try to use so we're

299
00:12:59,640 --> 00:13:04,500
actually going to write more bytes over

300
00:13:02,130 --> 00:13:06,630
the he buffer essentially giving us a he

301
00:13:04,500 --> 00:13:07,260
base buffer overflow when decompressing

302
00:13:06,630 --> 00:13:10,140
the bitmap

303
00:13:07,260 --> 00:13:11,910
so among this thing up as a complicated

304
00:13:10,140 --> 00:13:16,100
feature and hoping we'll find it again

305
00:13:11,910 --> 00:13:18,810
in several our RDP clients afterwards

306
00:13:16,100 --> 00:13:20,640
okay we finish P bar desktop which

307
00:13:18,810 --> 00:13:21,180
weren't quite good time to check if we

308
00:13:20,640 --> 00:13:24,960
have

309
00:13:21,180 --> 00:13:27,719
with three OTP as well and faeo DP was a

310
00:13:24,960 --> 00:13:29,400
tough target the C code looks better way

311
00:13:27,720 --> 00:13:32,310
it still has a few cracks when you look

312
00:13:29,400 --> 00:13:35,850
deep enough but it has no checks it more

313
00:13:32,310 --> 00:13:38,849
documented it supports more features it

314
00:13:35,850 --> 00:13:40,650
has better code quality however it's

315
00:13:38,850 --> 00:13:43,200
still vulnerable to the exact same

316
00:13:40,650 --> 00:13:46,380
bitmap our scene with Justine so we had

317
00:13:43,200 --> 00:13:48,240
a good start we found five critical

318
00:13:46,380 --> 00:13:51,090
vulnerabilities in this client and sixth

319
00:13:48,240 --> 00:13:55,350
a vulnerability overall and here are the

320
00:13:51,090 --> 00:13:56,880
CV ideas for Theo DP so we found

321
00:13:55,350 --> 00:13:59,280
vulnerabilities in our desktop we found

322
00:13:56,880 --> 00:14:01,830
vulnerabilities in few DP time to check

323
00:13:59,280 --> 00:14:18,420
if you have more luck with Microsoft's

324
00:14:01,830 --> 00:14:20,730
client st0 text and in short no we had

325
00:14:18,420 --> 00:14:22,829
less luck with MSDS seeded excellent we

326
00:14:20,730 --> 00:14:24,870
tried out of the PhDs from the previous

327
00:14:22,830 --> 00:14:27,990
vulnerabilities simply executing the

328
00:14:24,870 --> 00:14:29,670
script and checking if they work and RDP

329
00:14:27,990 --> 00:14:32,400
client simply closed itself you've no

330
00:14:29,670 --> 00:14:36,060
crash no warning nothing so all the

331
00:14:32,400 --> 00:14:38,939
previous vulnerabilities don't work so I

332
00:14:36,060 --> 00:14:41,640
started reverse engineering MCC dodeca

333
00:14:38,940 --> 00:14:44,670
and we can even see that the code is

334
00:14:41,640 --> 00:14:46,770
more robust they actually use smart

335
00:14:44,670 --> 00:14:48,810
buffers to check for parsing the hellos

336
00:14:46,770 --> 00:14:52,230
which is quite a good protection against

337
00:14:48,810 --> 00:14:54,089
most parts and whenever it is and you

338
00:14:52,230 --> 00:14:57,180
can actually see when you order the code

339
00:14:54,090 --> 00:15:00,570
but you see see that X includes many

340
00:14:57,180 --> 00:15:02,130
more features it's way more complex and

341
00:15:00,570 --> 00:15:05,010
it's in several orders of magnitude

342
00:15:02,130 --> 00:15:07,740
better than the open source clients we

343
00:15:05,010 --> 00:15:10,410
previously audited it's gonna be a tough

344
00:15:07,740 --> 00:15:13,910
target and at this point were kinda

345
00:15:10,410 --> 00:15:16,560
stuck because all previous leads fellows

346
00:15:13,910 --> 00:15:22,350
so essentially it's back to the drawing

347
00:15:16,560 --> 00:15:24,569
board and so it was actually back to the

348
00:15:22,350 --> 00:15:26,520
clipboard because up until now the

349
00:15:24,570 --> 00:15:29,730
clipboard shared basic text types we had

350
00:15:26,520 --> 00:15:33,150
CF decks for ASCII and CF Unicode x4

351
00:15:29,730 --> 00:15:34,889
well for Unicode because Linux machines

352
00:15:33,150 --> 00:15:37,949
have to specifically support

353
00:15:34,889 --> 00:15:39,749
it's support each format when connecting

354
00:15:37,949 --> 00:15:42,029
to the remote Windows server but when

355
00:15:39,749 --> 00:15:43,350
you have a Windows machine connecting to

356
00:15:42,029 --> 00:15:45,689
a Windows machine you could essentially

357
00:15:43,350 --> 00:15:48,269
synchronize the same clipboard on both

358
00:15:45,689 --> 00:15:50,730
machines so microcell supports many more

359
00:15:48,269 --> 00:15:54,209
formats now and we have a much broader

360
00:15:50,730 --> 00:15:55,529
attack crypto in the clipboard so so

361
00:15:54,209 --> 00:15:56,508
let's dig in on how the clipboard

362
00:15:55,529 --> 00:15:58,619
actually works

363
00:15:56,509 --> 00:16:00,389
you'll probably be familiar the

364
00:15:58,619 --> 00:16:02,069
clipboard uses it on a daily basis

365
00:16:00,389 --> 00:16:05,519
it's a kernel data structure that stores

366
00:16:02,069 --> 00:16:08,790
well data you have one clipboard per

367
00:16:05,519 --> 00:16:11,879
session from our perspective it's in 1/3

368
00:16:08,790 --> 00:16:14,069
board per RDP connection and it's shared

369
00:16:11,879 --> 00:16:16,649
between processes because usually a copy

370
00:16:14,069 --> 00:16:19,189
of our new password from notepad or text

371
00:16:16,649 --> 00:16:22,169
to Chrome

372
00:16:19,189 --> 00:16:25,469
so it's shared between the processes the

373
00:16:22,169 --> 00:16:28,679
data itself is told by an ID or by name

374
00:16:25,470 --> 00:16:31,529
you have a format ID or format name for

375
00:16:28,679 --> 00:16:32,999
each format and you should really be

376
00:16:31,529 --> 00:16:34,709
cautious when using the clipboard and

377
00:16:32,999 --> 00:16:36,299
clipboard a that should not be trusted

378
00:16:34,709 --> 00:16:38,008
which really parts the data carefully

379
00:16:36,299 --> 00:16:40,769
before you use it in your own

380
00:16:38,009 --> 00:16:43,049
application and if you think with only

381
00:16:40,769 --> 00:16:46,619
me saying that that's absolutely a quote

382
00:16:43,049 --> 00:16:48,059
for - DM immediately when we saw this

383
00:16:46,619 --> 00:16:50,369
quote we knew we're going to find

384
00:16:48,059 --> 00:16:51,749
vulnerabilities because that's a good

385
00:16:50,369 --> 00:16:53,369
quote - ok

386
00:16:51,749 --> 00:16:56,790
no one will check the data we're going

387
00:16:53,369 --> 00:17:00,179
to be fine but we are interested on the

388
00:16:56,790 --> 00:17:01,860
clipboard over the RDP and protocol and

389
00:17:00,179 --> 00:17:03,689
everything in the clipboard is going to

390
00:17:01,860 --> 00:17:05,549
be synchronized automatically and the

391
00:17:03,689 --> 00:17:08,609
Clifford is defined as a shared resource

392
00:17:05,549 --> 00:17:11,309
and it's shared by default and this

393
00:17:08,609 --> 00:17:14,010
means Microsoft only uses blacklists to

394
00:17:11,309 --> 00:17:16,049
filter out specific formats but they're

395
00:17:14,010 --> 00:17:19,199
using blacklist instead of widely so

396
00:17:16,049 --> 00:17:20,760
it's not a good security perspective but

397
00:17:19,199 --> 00:17:22,169
from an attackers perspective that's

398
00:17:20,760 --> 00:17:24,720
good news

399
00:17:22,169 --> 00:17:27,510
we're probably going to handle these

400
00:17:24,720 --> 00:17:29,789
black lists so you have a black list for

401
00:17:27,510 --> 00:17:32,490
a formats but it won't be discarded by

402
00:17:29,789 --> 00:17:35,269
their ID and a blacklist for formats

403
00:17:32,490 --> 00:17:39,899
will will be discarded by the name and

404
00:17:35,269 --> 00:17:42,389
one final note on RDP you have something

405
00:17:39,899 --> 00:17:43,678
called delayed rendering this means what

406
00:17:42,389 --> 00:17:45,809
when you copy

407
00:17:43,679 --> 00:17:47,010
is something you only get the list of

408
00:17:45,809 --> 00:17:48,990
available formats but

409
00:17:47,010 --> 00:17:50,970
another content because it could be

410
00:17:48,990 --> 00:17:52,410
heavy to copy all of the data if you're

411
00:17:50,970 --> 00:17:54,390
not going to paste anything

412
00:17:52,410 --> 00:17:57,030
this means that if you copy a password

413
00:17:54,390 --> 00:17:58,440
and close the OTP connection you won't

414
00:17:57,030 --> 00:18:01,379
be able to paste the password

415
00:17:58,440 --> 00:18:03,300
you only know was something of text but

416
00:18:01,380 --> 00:18:07,290
you don't know what's the text because

417
00:18:03,300 --> 00:18:10,399
no one sent it to you and here's where

418
00:18:07,290 --> 00:18:12,690
it becomes really interesting because

419
00:18:10,400 --> 00:18:14,610
essentially you have also dragon block

420
00:18:12,690 --> 00:18:17,580
diagonal Bob is the internal name

421
00:18:14,610 --> 00:18:19,649
Microsoft uses to copy files and file

422
00:18:17,580 --> 00:18:22,350
copy operation uses multiple clipboard

423
00:18:19,650 --> 00:18:25,040
formats you have one format called cfh

424
00:18:22,350 --> 00:18:27,300
blob which lists the file names an

425
00:18:25,040 --> 00:18:29,370
additional format called file group

426
00:18:27,300 --> 00:18:31,800
descriptor with all of them a full

427
00:18:29,370 --> 00:18:34,770
metadata of all of the copying files and

428
00:18:31,800 --> 00:18:38,220
you have additional many many more and

429
00:18:34,770 --> 00:18:39,540
formats for file copy operations let us

430
00:18:38,220 --> 00:18:42,330
now see how it actually works in

431
00:18:39,540 --> 00:18:44,610
practice we have a user on the right

432
00:18:42,330 --> 00:18:47,699
going to copy a file form the RDP server

433
00:18:44,610 --> 00:18:50,280
on the Left when it and when our user is

434
00:18:47,700 --> 00:18:51,750
going to initiate the copy operation it

435
00:18:50,280 --> 00:18:53,220
will populate the clipboard on the

436
00:18:51,750 --> 00:18:56,190
server with all of the format's

437
00:18:53,220 --> 00:18:57,840
necessary to copy files the server will

438
00:18:56,190 --> 00:19:00,630
then want to notify the client about

439
00:18:57,840 --> 00:19:03,990
each of the available formats so the

440
00:19:00,630 --> 00:19:07,020
first format is cfh swap but it's going

441
00:19:03,990 --> 00:19:11,640
to be filled out by the blacklist and we

442
00:19:07,020 --> 00:19:13,560
have all social ID and essentially only

443
00:19:11,640 --> 00:19:15,900
five of the script will pass the

444
00:19:13,560 --> 00:19:17,850
blacklist invert it only this specific

445
00:19:15,900 --> 00:19:20,310
format and since we have delayed

446
00:19:17,850 --> 00:19:22,230
rendering the client only knows was an

447
00:19:20,310 --> 00:19:25,590
available file group descriptor but not

448
00:19:22,230 --> 00:19:27,420
if contact once the client was started

449
00:19:25,590 --> 00:19:30,179
pasted it will request the file

450
00:19:27,420 --> 00:19:32,880
descriptor form the silver the silver

451
00:19:30,180 --> 00:19:34,770
for some unknown reason will intercept

452
00:19:32,880 --> 00:19:37,800
this request and exchange it with the

453
00:19:34,770 --> 00:19:41,129
request for cfh table and requests if

454
00:19:37,800 --> 00:19:42,690
Israel format form its own report once

455
00:19:41,130 --> 00:19:45,090
it gets the data it will manually

456
00:19:42,690 --> 00:19:47,130
convert it back to in fact of the script

457
00:19:45,090 --> 00:19:49,620
over the client initially asked for and

458
00:19:47,130 --> 00:19:52,110
will send the data itself to the client

459
00:19:49,620 --> 00:19:53,909
now the client knows which files were

460
00:19:52,110 --> 00:19:56,100
actually being copied on the server

461
00:19:53,910 --> 00:19:58,590
itself so we could query for the file

462
00:19:56,100 --> 00:19:59,860
content of each file and get the copied

463
00:19:58,590 --> 00:20:02,110
file that

464
00:19:59,860 --> 00:20:07,149
computer and that essentially how you

465
00:20:02,110 --> 00:20:10,449
copy files over our DP the main

466
00:20:07,150 --> 00:20:12,970
structure inside this process is file

467
00:20:10,450 --> 00:20:14,470
descriptor 5 of descriptor is a

468
00:20:12,970 --> 00:20:16,480
proprietary blob structure

469
00:20:14,470 --> 00:20:19,270
it contains the list of filer codes and

470
00:20:16,480 --> 00:20:21,820
in each record we can see we have a meta

471
00:20:19,270 --> 00:20:24,549
data for example time stamps and the

472
00:20:21,820 --> 00:20:27,700
files path and in our examples it should

473
00:20:24,549 --> 00:20:31,330
always be the file name of the copied

474
00:20:27,700 --> 00:20:33,190
file the client will get the data from

475
00:20:31,330 --> 00:20:36,309
the server and happily pass it on to the

476
00:20:33,190 --> 00:20:38,080
clipboard at this point of the result

477
00:20:36,309 --> 00:20:39,639
one of the main team members or mode I

478
00:20:38,080 --> 00:20:42,720
told me to try to find out where the

479
00:20:39,640 --> 00:20:45,669
sanitized the received F so I tried I

480
00:20:42,720 --> 00:20:47,350
really really really tried but I

481
00:20:45,669 --> 00:20:49,690
couldn't find anywhere where they

482
00:20:47,350 --> 00:20:51,730
sanitized the path so I told the server

483
00:20:49,690 --> 00:20:55,120
to send a file name of dot dot slash

484
00:20:51,730 --> 00:20:57,250
file name dot txt and the client happily

485
00:20:55,120 --> 00:20:59,860
received this file stored it in the

486
00:20:57,250 --> 00:21:02,049
clipboard and even explore dot except

487
00:20:59,860 --> 00:21:04,330
happily notifies us that he is now going

488
00:21:02,049 --> 00:21:07,960
to copy a file name called dot dot slash

489
00:21:04,330 --> 00:21:10,149
file named dot txt and this essentially

490
00:21:07,960 --> 00:21:12,730
means we found a path level cell over

491
00:21:10,150 --> 00:21:14,320
the RDP protocol we notified Microsoft

492
00:21:12,730 --> 00:21:18,250
received an official CV for this

493
00:21:14,320 --> 00:21:21,250
venerable VL frequency and to break this

494
00:21:18,250 --> 00:21:23,470
down when using copy and paste over RTP

495
00:21:21,250 --> 00:21:25,809
a malicious server can block arbitrary

496
00:21:23,470 --> 00:21:29,200
files to arbitrary file occasions on the

497
00:21:25,809 --> 00:21:31,270
clients file system you can simply drop

498
00:21:29,200 --> 00:21:32,590
your marvel into the startup folder of

499
00:21:31,270 --> 00:21:34,600
the client and that's it

500
00:21:32,590 --> 00:21:38,620
upon reboot you have code execution on

501
00:21:34,600 --> 00:21:41,110
the client but we wanted more if you

502
00:21:38,620 --> 00:21:43,239
take it one step further the clipboards

503
00:21:41,110 --> 00:21:45,309
are fully synchronized this means that

504
00:21:43,240 --> 00:21:48,100
when you copy you update a clipboard

505
00:21:45,309 --> 00:21:50,500
this sends a clipboard er format list

506
00:21:48,100 --> 00:21:52,000
message to the other side and the other

507
00:21:50,500 --> 00:21:55,780
side will update its clipboard

508
00:21:52,000 --> 00:21:58,630
accordingly but what does it mean the

509
00:21:55,780 --> 00:22:01,000
first scenario is eavesdropping if you

510
00:21:58,630 --> 00:22:03,280
copy a password I get it too and that's

511
00:22:01,000 --> 00:22:04,809
not a bug that's an actual feature

512
00:22:03,280 --> 00:22:08,800
because the clip words are fully

513
00:22:04,809 --> 00:22:11,980
synchronized but it also means that if

514
00:22:08,800 --> 00:22:13,629
the client is copying a file I know

515
00:22:11,980 --> 00:22:15,760
about it too

516
00:22:13,630 --> 00:22:19,210
so this leads us to the second scenario

517
00:22:15,760 --> 00:22:21,040
being pasted on the attacks in a paste

518
00:22:19,210 --> 00:22:23,320
on e attack we once again ambushed the

519
00:22:21,040 --> 00:22:26,020
client when a client is going to copy a

520
00:22:23,320 --> 00:22:28,000
file we will start up on attack we will

521
00:22:26,020 --> 00:22:30,250
send an update message until the client

522
00:22:28,000 --> 00:22:32,140
but we also copied something and send

523
00:22:30,250 --> 00:22:34,450
him our malicious file descriptor with

524
00:22:32,140 --> 00:22:36,850
the path of L so when the client will

525
00:22:34,450 --> 00:22:38,380
unknowingly paste the data it will

526
00:22:36,850 --> 00:22:43,810
trigger the path over sir we initially

527
00:22:38,380 --> 00:22:45,550
propell did we break them all we find

528
00:22:43,810 --> 00:22:49,120
only realities in the three most popular

529
00:22:45,550 --> 00:22:52,330
or AP clients so it's probably yes but

530
00:22:49,120 --> 00:22:55,149
no we didn't like them all yet time to

531
00:22:52,330 --> 00:22:56,980
move on to hyper-v I never use type of

532
00:22:55,150 --> 00:22:59,770
it till now but Microsoft allows you to

533
00:22:56,980 --> 00:23:02,230
use virtual machines on your Windows

534
00:22:59,770 --> 00:23:05,410
operating systems using a hyper-v

535
00:23:02,230 --> 00:23:08,890
technology this means I install hyper-v

536
00:23:05,410 --> 00:23:11,380
on my Windows machine started a Windows

537
00:23:08,890 --> 00:23:14,170
virtual machine try to connect to it

538
00:23:11,380 --> 00:23:17,980
using the hyper-v GUI manager and I saw

539
00:23:14,170 --> 00:23:20,200
this suspicious-looking dialog box this

540
00:23:17,980 --> 00:23:22,870
is the exact same dialog box form RDP

541
00:23:20,200 --> 00:23:24,880
but I used hyper-v manager not Arabic

542
00:23:22,870 --> 00:23:28,360
line and you can even see that the

543
00:23:24,880 --> 00:23:30,880
clipboard is shirt behind the scenes

544
00:23:28,360 --> 00:23:33,100
Microsoft uses RDP for accessing the

545
00:23:30,880 --> 00:23:35,680
virtual machines even when you use

546
00:23:33,100 --> 00:23:37,780
hyper-v on your machine in fact mainly

547
00:23:35,680 --> 00:23:40,750
because Microsoft already implemented

548
00:23:37,780 --> 00:23:43,540
the code needed for seeing the screen

549
00:23:40,750 --> 00:23:46,750
sending keystrokes sharing the clipboard

550
00:23:43,540 --> 00:23:48,520
so there's no real need to reemployment

551
00:23:46,750 --> 00:23:50,650
and implement again all of these

552
00:23:48,520 --> 00:23:53,710
features Microsoft decided to simply use

553
00:23:50,650 --> 00:23:56,640
RDP for the GUI connection in your hype

554
00:23:53,710 --> 00:23:59,530
of a manager when you use hybl vzm

555
00:23:56,640 --> 00:24:03,340
so behind the scenes we actually have

556
00:23:59,530 --> 00:24:05,980
RDP once I saw this dialog I simply ran

557
00:24:03,340 --> 00:24:08,459
again the same plc i had earlier for RDP

558
00:24:05,980 --> 00:24:10,870
and it worked on the first attempt and

559
00:24:08,460 --> 00:24:12,730
actually this means that the same part

560
00:24:10,870 --> 00:24:15,100
of the cell over RDP

561
00:24:12,730 --> 00:24:18,130
is now a guest to host vm escape for my

562
00:24:15,100 --> 00:24:21,699
hype of the virtual machine so let's see

563
00:24:18,130 --> 00:24:26,500
a video this is a video over the hyper-v

564
00:24:21,700 --> 00:24:27,549
and test case when we start we can see

565
00:24:26,500 --> 00:24:32,889
that the clients are

566
00:24:27,549 --> 00:24:35,470
folder is empty now we'll try to connect

567
00:24:32,889 --> 00:24:43,418
to the a hyper-v machine using a hyper-v

568
00:24:35,470 --> 00:24:47,259
manager initiating the connection just a

569
00:24:43,419 --> 00:24:49,299
plain old VM that's it and as you can

570
00:24:47,259 --> 00:24:51,119
see it's a plain old VM it's a malicious

571
00:24:49,299 --> 00:24:54,100
VM but the client doesn't know it yet

572
00:24:51,119 --> 00:24:56,499
and now when the client is going to copy

573
00:24:54,100 --> 00:25:03,070
an innocent text file from his local

574
00:24:56,499 --> 00:25:05,080
computer will hijack this operation

575
00:25:03,070 --> 00:25:06,879
prepare a malicious v of the script oh

576
00:25:05,080 --> 00:25:10,359
and when the client will paste the same

577
00:25:06,879 --> 00:25:11,980
file his computer or startup the startup

578
00:25:10,359 --> 00:25:14,529
folder of the client will contain our

579
00:25:11,980 --> 00:25:16,119
malicious script inside it because we

580
00:25:14,529 --> 00:25:18,850
hijacked the copy operation we will

581
00:25:16,119 --> 00:25:21,189
paste only attack invert it after the

582
00:25:18,850 --> 00:25:24,629
reboot the client will execute all

583
00:25:21,190 --> 00:25:24,629
Marwell from his startup

584
00:25:25,109 --> 00:25:32,230
one last note w da g WD d stands for

585
00:25:29,679 --> 00:25:34,239
Windows Defender application guard this

586
00:25:32,230 --> 00:25:36,609
essentially means you have a virtualized

587
00:25:34,239 --> 00:25:42,460
edge puzzle you could use to browse

588
00:25:36,609 --> 00:25:45,220
risky websites safely you need to see

589
00:25:42,460 --> 00:25:48,519
your at Basel so once again use already

590
00:25:45,220 --> 00:25:51,549
P to connect to the remote VM this time

591
00:25:48,519 --> 00:25:54,669
we use H psi RDP client instead of MCC

592
00:25:51,549 --> 00:25:57,249
detects this change means that Microsoft

593
00:25:54,669 --> 00:25:59,919
decided to once in this case use

594
00:25:57,249 --> 00:26:03,460
whitelists instead of necklace and the

595
00:25:59,919 --> 00:26:05,230
clipboard starts off by default and when

596
00:26:03,460 --> 00:26:07,359
you use it you can only use two foreign

597
00:26:05,230 --> 00:26:11,320
types for text or images and that's it

598
00:26:07,359 --> 00:26:15,100
and this whitelist blocks our attack and

599
00:26:11,320 --> 00:26:17,678
we it means essentially it stops our

600
00:26:15,100 --> 00:26:20,320
vulnerability you can't use it on WDET

601
00:26:17,679 --> 00:26:26,379
that's good news Microsoft and time to

602
00:26:20,320 --> 00:26:28,809
move on to the defense part by Donna so

603
00:26:26,379 --> 00:26:31,330
they are reported he's finding to

604
00:26:28,809 --> 00:26:35,310
Microsoft through the bug bounty program

605
00:26:31,330 --> 00:26:38,550
and then Microsoft started to analyze

606
00:26:35,310 --> 00:26:41,879
oh it's finding and started to work on a

607
00:26:38,550 --> 00:26:46,320
patch and this is where I stepped in

608
00:26:41,880 --> 00:26:48,720
because I was thinking to myself you

609
00:26:46,320 --> 00:26:51,870
know this moment where a new path is

610
00:26:48,720 --> 00:26:54,630
released and a new owner ability is

611
00:26:51,870 --> 00:26:57,689
published and everyone are freaking out

612
00:26:54,630 --> 00:27:03,570
trying to install the patch as fast as

613
00:26:57,690 --> 00:27:05,930
they can in order to stay safe I try to

614
00:27:03,570 --> 00:27:08,340
find a solution for this scenario and

615
00:27:05,930 --> 00:27:10,800
this is where I realized that a patch is

616
00:27:08,340 --> 00:27:13,129
not enough because user remain

617
00:27:10,800 --> 00:27:16,470
vulnerable until they install the patch

618
00:27:13,130 --> 00:27:18,770
so I was looking for a way to protect

619
00:27:16,470 --> 00:27:22,700
the users without any installation

620
00:27:18,770 --> 00:27:25,800
without any need to install the patch so

621
00:27:22,700 --> 00:27:29,330
what I try to do is to develop a new

622
00:27:25,800 --> 00:27:33,180
detection based on existing telemetry

623
00:27:29,330 --> 00:27:36,570
that already exists in Windows 10

624
00:27:33,180 --> 00:27:39,300
versions so this way customer can stay

625
00:27:36,570 --> 00:27:43,830
secured without updating to the new

626
00:27:39,300 --> 00:27:45,990
patch so I have a few ground rules when

627
00:27:43,830 --> 00:27:49,889
I started to work on my decoction logic

628
00:27:45,990 --> 00:27:52,250
so my first of all was yes I should use

629
00:27:49,890 --> 00:27:56,630
only existing telemetry in Windows 10

630
00:27:52,250 --> 00:27:59,640
that are already available to the users

631
00:27:56,630 --> 00:28:03,000
my second run rule was that I should be

632
00:27:59,640 --> 00:28:06,000
able to detect this bridge from the

633
00:28:03,000 --> 00:28:08,340
victim side from the victim machine so

634
00:28:06,000 --> 00:28:10,410
as I mentioned before we have two

635
00:28:08,340 --> 00:28:12,419
machines here one machine that is

636
00:28:10,410 --> 00:28:15,210
already compromised which we mostly

637
00:28:12,420 --> 00:28:17,070
refer as the server machine and one

638
00:28:15,210 --> 00:28:19,980
machine which is the client machine and

639
00:28:17,070 --> 00:28:23,340
this is where the attack is moving

640
00:28:19,980 --> 00:28:25,740
forward to so I've tried to develop a

641
00:28:23,340 --> 00:28:32,330
detection from the client side and

642
00:28:25,740 --> 00:28:36,090
protect the client from this threat my

643
00:28:32,330 --> 00:28:39,449
initial instinct was maybe to use an RDP

644
00:28:36,090 --> 00:28:41,340
anomaly detection but unfortunately for

645
00:28:39,450 --> 00:28:42,450
this attack scenario this detection

646
00:28:41,340 --> 00:28:44,280
won't work

647
00:28:42,450 --> 00:28:47,070
the reason it won't work because we

648
00:28:44,280 --> 00:28:49,470
don't have any RDP unusual behavior in

649
00:28:47,070 --> 00:28:52,529
this scenario the user

650
00:28:49,470 --> 00:28:56,149
is initiating the connection and

651
00:28:52,529 --> 00:29:00,240
therefore we won't expect to see any

652
00:28:56,149 --> 00:29:03,629
abnormal behavior in this case so I had

653
00:29:00,240 --> 00:29:07,549
to work harder I decided to use existing

654
00:29:03,629 --> 00:29:10,799
telemetry from Windows 10 which call etw

655
00:29:07,549 --> 00:29:13,980
it stands for event tracing for Windows

656
00:29:10,799 --> 00:29:16,769
and this is a built-in tool so in

657
00:29:13,980 --> 00:29:19,490
Windows for all Windows 10 versions this

658
00:29:16,769 --> 00:29:23,159
is basically a Windows API that allows

659
00:29:19,490 --> 00:29:27,210
Windows applications developer to trace

660
00:29:23,159 --> 00:29:29,970
their application so this way they can

661
00:29:27,210 --> 00:29:31,830
track the different flows they can see

662
00:29:29,970 --> 00:29:34,350
which exceptions were thrown in this

663
00:29:31,830 --> 00:29:36,449
application they can see the performance

664
00:29:34,350 --> 00:29:40,830
so they can basically get information

665
00:29:36,450 --> 00:29:44,570
about the usage of their application so

666
00:29:40,830 --> 00:29:47,279
as you can see the ATW events are not

667
00:29:44,570 --> 00:29:50,789
originally created for security

668
00:29:47,279 --> 00:29:53,809
perspective however we can find them

669
00:29:50,789 --> 00:29:57,419
very useful for many for many scenarios

670
00:29:53,809 --> 00:30:00,629
so for this attack scenario I use two

671
00:29:57,419 --> 00:30:03,559
different if UW providers the first

672
00:30:00,629 --> 00:30:07,469
provider is the RDP connection provider

673
00:30:03,559 --> 00:30:09,450
the RDP connection provider includes

674
00:30:07,470 --> 00:30:12,419
multiple events I decided to use two

675
00:30:09,450 --> 00:30:16,320
specific events the first event is event

676
00:30:12,419 --> 00:30:19,529
131 which is triggered when a new RDP

677
00:30:16,320 --> 00:30:23,519
connection is accepted the second event

678
00:30:19,529 --> 00:30:26,220
is event 132 which is triggered when

679
00:30:23,519 --> 00:30:28,490
which is basically a keepalive event so

680
00:30:26,220 --> 00:30:30,840
it is triggered every once in a while

681
00:30:28,490 --> 00:30:35,789
notifying that the connection is still

682
00:30:30,840 --> 00:30:36,928
alive the second provider used is the

683
00:30:35,789 --> 00:30:40,440
clipboard provider

684
00:30:36,929 --> 00:30:43,529
this is a unique provider since this is

685
00:30:40,440 --> 00:30:46,620
a non manifested provider the meaning of

686
00:30:43,529 --> 00:30:48,990
non manifester provider is that we don't

687
00:30:46,620 --> 00:30:50,850
have a manifest file that includes all

688
00:30:48,990 --> 00:30:54,179
the information and all the events that

689
00:30:50,850 --> 00:30:56,850
this provider provides so in order to

690
00:30:54,179 --> 00:30:58,529
understand which events are included in

691
00:30:56,850 --> 00:31:03,090
this provider we actually have to check

692
00:30:58,529 --> 00:31:05,580
the code so then the clipboard provide

693
00:31:03,090 --> 00:31:09,000
includes multiple events I specifically

694
00:31:05,580 --> 00:31:10,020
used specific event that includes the

695
00:31:09,000 --> 00:31:12,300
API name

696
00:31:10,020 --> 00:31:14,730
so it basically triggered every time an

697
00:31:12,300 --> 00:31:17,100
API from the clipboard is called it

698
00:31:14,730 --> 00:31:18,840
includes the API that is called so it

699
00:31:17,100 --> 00:31:21,540
could be get data say that other

700
00:31:18,840 --> 00:31:23,280
clipboard api's it includes some

701
00:31:21,540 --> 00:31:25,170
information about the format that was

702
00:31:23,280 --> 00:31:28,320
copied and the medium that it was copied

703
00:31:25,170 --> 00:31:30,720
to I think clothes information about the

704
00:31:28,320 --> 00:31:31,230
weather the API call was successful or

705
00:31:30,720 --> 00:31:34,440
not

706
00:31:31,230 --> 00:31:37,260
as you can see I was surprised as well

707
00:31:34,440 --> 00:31:39,720
we don't have here the clipboard content

708
00:31:37,260 --> 00:31:42,870
information so we don't know which file

709
00:31:39,720 --> 00:31:47,400
was copied we don't know Stax was copied

710
00:31:42,870 --> 00:31:48,989
and initially I was surprised but after

711
00:31:47,400 --> 00:31:51,330
I was thinking about it for a while it

712
00:31:48,990 --> 00:31:53,130
actually makes sense there are multiple

713
00:31:51,330 --> 00:31:54,649
reason why we don't have the clipboard

714
00:31:53,130 --> 00:31:57,870
content in this event

715
00:31:54,650 --> 00:31:59,940
one reason should is focus more about

716
00:31:57,870 --> 00:32:02,370
the size I mean we don't know what's the

717
00:31:59,940 --> 00:32:03,870
size of the text

718
00:32:02,370 --> 00:32:06,719
or the file we're copying and therefore

719
00:32:03,870 --> 00:32:08,489
what we don't want to parse that but I

720
00:32:06,720 --> 00:32:10,410
think the major reason we don't have the

721
00:32:08,490 --> 00:32:13,320
clipboard content in the clipboard

722
00:32:10,410 --> 00:32:15,690
events is because we want to make sure

723
00:32:13,320 --> 00:32:18,480
the users remain the users data remain

724
00:32:15,690 --> 00:32:21,480
private so if the user for example

725
00:32:18,480 --> 00:32:23,220
copies a password we don't want this

726
00:32:21,480 --> 00:32:26,280
password to be available in clear test

727
00:32:23,220 --> 00:32:27,900
text in the logs right so it actually

728
00:32:26,280 --> 00:32:29,670
makes sense and I can understand this

729
00:32:27,900 --> 00:32:33,660
boundary why we don't have the clipboard

730
00:32:29,670 --> 00:32:35,850
content in the clipboard event so before

731
00:32:33,660 --> 00:32:41,070
we can talk about the detection logic I

732
00:32:35,850 --> 00:32:44,070
worked with we should see a demo so I

733
00:32:41,070 --> 00:32:46,860
basically run the same scenario that a

734
00:32:44,070 --> 00:32:48,389
y'all showed before the only difference

735
00:32:46,860 --> 00:32:51,149
is that we're gonna have an additional

736
00:32:48,390 --> 00:32:54,690
windows and the bottom and this window

737
00:32:51,150 --> 00:32:56,490
is a tracer so you can see all the

738
00:32:54,690 --> 00:32:58,740
different ECW events that are triggered

739
00:32:56,490 --> 00:33:02,550
during the attack scenarios from the

740
00:32:58,740 --> 00:33:05,490
victim side perspective so we initiate

741
00:33:02,550 --> 00:33:08,570
the RDP connection and then we can see

742
00:33:05,490 --> 00:33:12,750
that the new RDP event is triggered and

743
00:33:08,570 --> 00:33:15,389
then I copy a file and when I face the

744
00:33:12,750 --> 00:33:16,080
file on the client machine we can see

745
00:33:15,390 --> 00:33:18,990
that multi

746
00:33:16,080 --> 00:33:21,178
all clipboard events are triggered the

747
00:33:18,990 --> 00:33:23,789
reason we have multiple events and not

748
00:33:21,179 --> 00:33:27,179
only one event is because multiple files

749
00:33:23,789 --> 00:33:32,669
were pasted behind the sin as you could

750
00:33:27,179 --> 00:33:35,490
see before so I took this telemetry and

751
00:33:32,669 --> 00:33:40,110
try to work on a very basic detection

752
00:33:35,490 --> 00:33:42,360
logic using only those etw events so my

753
00:33:40,110 --> 00:33:45,360
initial detection logic was okay so I

754
00:33:42,360 --> 00:33:47,908
can recognize that I am using that the

755
00:33:45,360 --> 00:33:51,330
client machine is in RDP session you can

756
00:33:47,909 --> 00:33:54,029
use event 131 or even 132 to recognize

757
00:33:51,330 --> 00:33:56,610
an RDP connection and then we considered

758
00:33:54,029 --> 00:33:59,460
if during RDP connections we are placing

759
00:33:56,610 --> 00:34:02,668
multiple files to the victim machine in

760
00:33:59,460 --> 00:34:04,679
a short period of time we should suspect

761
00:34:02,669 --> 00:34:07,110
this case we should say okay so multiple

762
00:34:04,679 --> 00:34:10,020
files were pasted to the victim machine

763
00:34:07,110 --> 00:34:12,118
so maybe we are vulnerable to this

764
00:34:10,020 --> 00:34:13,379
vulnerability maybe it was exploited on

765
00:34:12,119 --> 00:34:16,349
our machine and we should basically

766
00:34:13,379 --> 00:34:17,668
define this machine and suspicious the

767
00:34:16,349 --> 00:34:19,649
reason I defined this machine as

768
00:34:17,668 --> 00:34:21,359
suspicious and not as already

769
00:34:19,649 --> 00:34:22,888
compromised is because I'm not sure if

770
00:34:21,359 --> 00:34:24,569
this is the attack scenario or not I

771
00:34:22,889 --> 00:34:26,849
mean maybe the user pasted multiple

772
00:34:24,570 --> 00:34:29,339
files maybe it's an actual user behavior

773
00:34:26,849 --> 00:34:31,169
so my recommendation in this case will

774
00:34:29,339 --> 00:34:32,790
be we should maybe trigger scans should

775
00:34:31,168 --> 00:34:35,029
scan the machines can different files

776
00:34:32,790 --> 00:34:38,520
and see if we find anything suspicious

777
00:34:35,030 --> 00:34:41,220
so as you can see this detection logic

778
00:34:38,520 --> 00:34:44,639
is very basic and I was looking for a

779
00:34:41,219 --> 00:34:49,319
way to improve it so in order to improve

780
00:34:44,639 --> 00:34:52,560
it I needed more data so I decided to

781
00:34:49,320 --> 00:34:55,409
use a file creation event file creation

782
00:34:52,560 --> 00:34:57,900
events are very popular every almost

783
00:34:55,409 --> 00:35:00,150
every security vendors are using file

784
00:34:57,900 --> 00:35:04,560
creation events and there are multiple

785
00:35:00,150 --> 00:35:06,599
way to implement them the the basic idea

786
00:35:04,560 --> 00:35:08,880
here is that we trigger an event or any

787
00:35:06,599 --> 00:35:13,200
other indication every time a new file

788
00:35:08,880 --> 00:35:15,500
is created in the machine in order to

789
00:35:13,200 --> 00:35:20,089
implement my improved detection I

790
00:35:15,500 --> 00:35:23,460
decided to rely on two very basic data

791
00:35:20,089 --> 00:35:25,799
properties from the file creation events

792
00:35:23,460 --> 00:35:27,869
and this is the file name the file that

793
00:35:25,800 --> 00:35:28,670
was basically created and the file

794
00:35:27,869 --> 00:35:32,059
creation

795
00:35:28,670 --> 00:35:35,119
when the file was created so now I have

796
00:35:32,059 --> 00:35:38,180
more data and I can create an improved

797
00:35:35,119 --> 00:35:41,150
detection logic so when you detect

798
00:35:38,180 --> 00:35:42,950
geologic starts right like the basic

799
00:35:41,150 --> 00:35:45,290
detection logic so we recognize it on an

800
00:35:42,950 --> 00:35:47,660
RDP session and we recognize that

801
00:35:45,290 --> 00:35:50,119
multiple files were copied but now with

802
00:35:47,660 --> 00:35:53,299
the new data I can correlate the file

803
00:35:50,119 --> 00:35:55,520
creation time with the pasting operation

804
00:35:53,299 --> 00:35:58,490
timestamps so this way I can actually

805
00:35:55,520 --> 00:36:01,490
extract the file name so I can recognize

806
00:35:58,490 --> 00:36:04,009
which files were pasted and I can see

807
00:36:01,490 --> 00:36:06,290
the directories and this way I can see

808
00:36:04,010 --> 00:36:08,540
if play rectory is are different so if

809
00:36:06,290 --> 00:36:11,180
basically multiple files were pasted to

810
00:36:08,540 --> 00:36:13,210
different directories it means that it

811
00:36:11,180 --> 00:36:16,009
we have where basically we were breached

812
00:36:13,210 --> 00:36:19,069
using this role ability so in this case

813
00:36:16,010 --> 00:36:22,520
we would like to alert and react

814
00:36:19,069 --> 00:36:25,490
accordingly so yes I covered the

815
00:36:22,520 --> 00:36:30,349
scenario I have a detection logic where

816
00:36:25,490 --> 00:36:32,959
- all right so no so as an experience

817
00:36:30,349 --> 00:36:35,480
defender I knew at this point that this

818
00:36:32,960 --> 00:36:38,089
detection is not enough this detection

819
00:36:35,480 --> 00:36:40,369
is custom-made for this specific attack

820
00:36:38,089 --> 00:36:41,750
scenario today I'll describe but there

821
00:36:40,369 --> 00:36:43,640
are moves there are many attacks and

822
00:36:41,750 --> 00:36:45,200
oils out there that are very similar and

823
00:36:43,640 --> 00:36:47,960
I was worried that if the attacker will

824
00:36:45,200 --> 00:36:51,950
change just a minor step I won't be able

825
00:36:47,960 --> 00:36:53,660
to detect it anymore so the way we like

826
00:36:51,950 --> 00:36:56,419
to think about detection in those

827
00:36:53,660 --> 00:36:58,339
scenarios we try to learn the different

828
00:36:56,420 --> 00:37:01,010
malicious behaviors that we can

829
00:36:58,339 --> 00:37:03,770
recognize in the attack scenario and

830
00:37:01,010 --> 00:37:06,559
cover them by detection that are

831
00:37:03,770 --> 00:37:10,099
covering the behaviors and all the

832
00:37:06,559 --> 00:37:12,319
specific steps the effect scenarios so I

833
00:37:10,099 --> 00:37:14,930
looked back on a house attack scenario I

834
00:37:12,319 --> 00:37:17,869
try to recognize behaviors I recognized

835
00:37:14,930 --> 00:37:19,790
through three malicious behaviors the

836
00:37:17,869 --> 00:37:23,210
first behavior recognized was the start

837
00:37:19,790 --> 00:37:24,829
of folder as a destination so the the

838
00:37:23,210 --> 00:37:26,599
idea in his attack was basically

839
00:37:24,829 --> 00:37:29,240
dropping file in the startup folder that

840
00:37:26,599 --> 00:37:32,089
was the goal of the attack so I tried to

841
00:37:29,240 --> 00:37:34,368
look final approach how to detect this

842
00:37:32,089 --> 00:37:37,819
malicious behavior so there are multiple

843
00:37:34,369 --> 00:37:39,470
ways to do so one way would be maybe in

844
00:37:37,819 --> 00:37:41,450
a normal detection we can basically

845
00:37:39,470 --> 00:37:43,848
record a basically tray

846
00:37:41,450 --> 00:37:46,419
new files are created in the Start

847
00:37:43,849 --> 00:37:49,130
folders recognize anomaly detection

848
00:37:46,420 --> 00:37:52,880
based on multiple features from the file

849
00:37:49,130 --> 00:37:54,530
creation events and the other way is a

850
00:37:52,880 --> 00:37:57,170
more rule-based detection which

851
00:37:54,530 --> 00:37:59,030
basically scanning and analyzing each

852
00:37:57,170 --> 00:38:01,910
new file that is created under the

853
00:37:59,030 --> 00:38:02,720
startup folder so this is the first

854
00:38:01,910 --> 00:38:04,970
behavior

855
00:38:02,720 --> 00:38:07,459
I recognize another behavior which is

856
00:38:04,970 --> 00:38:11,149
the clipboard as an attack scenario or

857
00:38:07,460 --> 00:38:13,190
it's an attack vector in this case we

858
00:38:11,150 --> 00:38:17,299
can cover it or detect this scenario

859
00:38:13,190 --> 00:38:19,309
using file pasting and normally we can

860
00:38:17,299 --> 00:38:21,829
use features like the number of files

861
00:38:19,309 --> 00:38:24,650
that are pasted or the directories of

862
00:38:21,829 --> 00:38:29,540
the files and recognize and normally

863
00:38:24,650 --> 00:38:32,059
scenarios the last behavior are

864
00:38:29,540 --> 00:38:34,819
recognize is that malicious basically

865
00:38:32,059 --> 00:38:36,829
just general malicious file dropping so

866
00:38:34,819 --> 00:38:39,470
the goal is to drop malicious files to

867
00:38:36,829 --> 00:38:41,720
the victim machine and the best way to

868
00:38:39,470 --> 00:38:44,149
write to detect those in this case this

869
00:38:41,720 --> 00:38:46,009
behavior is basically by file creation

870
00:38:44,150 --> 00:38:48,410
anomaly we can use features like the

871
00:38:46,010 --> 00:38:55,670
file name the file path the file

872
00:38:48,410 --> 00:38:57,770
creation time and so on and now when I

873
00:38:55,670 --> 00:39:02,240
feel that our customer our users are

874
00:38:57,770 --> 00:39:04,460
safe and can actually keep working

875
00:39:02,240 --> 00:39:08,569
without any update we can talk about the

876
00:39:04,460 --> 00:39:12,339
update so Microsoft released and OS

877
00:39:08,569 --> 00:39:15,980
patch to Windows 10 in last July

878
00:39:12,339 --> 00:39:17,450
Tuesday patch which includes this fix

879
00:39:15,980 --> 00:39:20,359
for this vulnerability that they are

880
00:39:17,450 --> 00:39:25,399
reported and actually the fix was very

881
00:39:20,359 --> 00:39:28,700
simple so basically a new method was

882
00:39:25,400 --> 00:39:31,400
called in the clipboard flow and you can

883
00:39:28,700 --> 00:39:33,558
see here in the in the binaries that

884
00:39:31,400 --> 00:39:37,670
this new validate file pass was called

885
00:39:33,559 --> 00:39:41,270
and this new method basically verifies

886
00:39:37,670 --> 00:39:44,920
before every pasting operation but

887
00:39:41,270 --> 00:39:47,780
extracting the file the canonical file

888
00:39:44,920 --> 00:39:50,150
extracting all the file paths comparing

889
00:39:47,780 --> 00:39:50,970
it to the file name and making sure that

890
00:39:50,150 --> 00:39:53,190
they are aligned

891
00:39:50,970 --> 00:39:56,759
so basically before every pasting

892
00:39:53,190 --> 00:39:58,890
operation we verify that the file we're

893
00:39:56,760 --> 00:40:06,030
pasting is actually the one we meant to

894
00:39:58,890 --> 00:40:07,109
paste so the size I would like to share

895
00:40:06,030 --> 00:40:10,940
with you the lessons we've learned

896
00:40:07,109 --> 00:40:15,569
during this research the first lesson is

897
00:40:10,940 --> 00:40:17,970
about connecting different models so as

898
00:40:15,569 --> 00:40:20,759
they all mentioned earlier today the

899
00:40:17,970 --> 00:40:23,189
Clippers were designed initially to be

900
00:40:20,760 --> 00:40:24,720
used locally and they were not designed

901
00:40:23,190 --> 00:40:26,819
to be trusted because multiple

902
00:40:24,720 --> 00:40:29,368
applications can access the data in the

903
00:40:26,819 --> 00:40:31,529
clipboard but the user behaved and

904
00:40:29,369 --> 00:40:35,460
interacted with the clipboard as a safe

905
00:40:31,530 --> 00:40:37,920
clipboard as a trusted clipboard when

906
00:40:35,460 --> 00:40:40,890
Microsoft introduced a new feature for

907
00:40:37,920 --> 00:40:44,069
sharing multiple machines it made sense

908
00:40:40,890 --> 00:40:46,319
to make the clipboard shared between

909
00:40:44,069 --> 00:40:48,240
those machines it basically it is very

910
00:40:46,319 --> 00:40:50,190
very basic user experience and therefore

911
00:40:48,240 --> 00:40:53,118
it was natural to have this feature

912
00:40:50,190 --> 00:40:56,040
available for RDP connections

913
00:40:53,119 --> 00:40:58,140
however this expose machine to a

914
00:40:56,040 --> 00:41:00,329
clipboard they can no longer trust and

915
00:40:58,140 --> 00:41:04,379
this is how basically this vulnerability

916
00:41:00,329 --> 00:41:06,900
was introduced the second lesson we have

917
00:41:04,380 --> 00:41:08,609
learned it about Windows Dimitri we

918
00:41:06,900 --> 00:41:10,020
realize that Windows telemetry is an

919
00:41:08,609 --> 00:41:12,869
important tool in the defender

920
00:41:10,020 --> 00:41:16,770
steelbooks it is very useful for

921
00:41:12,869 --> 00:41:20,250
defending for defending scenarios for

922
00:41:16,770 --> 00:41:22,950
defending models but we actually see

923
00:41:20,250 --> 00:41:25,020
attackers using the windows telemetry

924
00:41:22,950 --> 00:41:27,359
into considerations when they perform

925
00:41:25,020 --> 00:41:30,270
new attack techniques so for example we

926
00:41:27,359 --> 00:41:32,400
see many attackers clearing the windows

927
00:41:30,270 --> 00:41:35,670
event logs before they start after they

928
00:41:32,400 --> 00:41:39,630
finish their malicious activity in order

929
00:41:35,670 --> 00:41:41,760
to cover the traces the last lesson

930
00:41:39,630 --> 00:41:43,890
we've learned is about our how our

931
00:41:41,760 --> 00:41:47,339
industry can benefit from this cross

932
00:41:43,890 --> 00:41:50,790
community collaboration so thanks to the

933
00:41:47,339 --> 00:41:54,450
trust and the transparency between the

934
00:41:50,790 --> 00:41:57,500
security community we could find new

935
00:41:54,450 --> 00:42:00,750
vulnerabilities we could effectively

936
00:41:57,500 --> 00:42:04,590
protect users and we can fix them and

937
00:42:00,750 --> 00:42:07,150
share it with everyone here

938
00:42:04,590 --> 00:42:09,820
before we move to the questions part I

939
00:42:07,150 --> 00:42:12,310
just want to say that Al and I wrote a

940
00:42:09,820 --> 00:42:14,050
very detailed white paper that includes

941
00:42:12,310 --> 00:42:16,060
all the information about our research

942
00:42:14,050 --> 00:42:30,190
and we would like to share it with

943
00:42:16,060 --> 00:42:38,259
everyone thank you we have time for

944
00:42:30,190 --> 00:42:45,970
about two questions so you have a mic on

945
00:42:38,260 --> 00:42:47,890
the right on the left use the microphone

946
00:42:45,970 --> 00:42:56,379
use the mic so people could hear the

947
00:42:47,890 --> 00:42:58,779
question since you fix it in Windows 10

948
00:42:56,380 --> 00:43:01,240
how does that relate to Windows Server

949
00:42:58,780 --> 00:43:04,840
editions or two toward Windows 8 that's

950
00:43:01,240 --> 00:43:07,060
still supported the patch was released

951
00:43:04,840 --> 00:43:10,300
on and July's Patch Tuesday and it

952
00:43:07,060 --> 00:43:12,370
covers practically all of the OS

953
00:43:10,300 --> 00:43:15,670
versions for Windows because it was

954
00:43:12,370 --> 00:43:19,330
applicable for the RDP client in all

955
00:43:15,670 --> 00:43:21,430
versions so the pets covers Windows 10

956
00:43:19,330 --> 00:43:25,600
but it also covers Windows servers

957
00:43:21,430 --> 00:43:26,830
Windows 7 and so on also you have a Mac

958
00:43:25,600 --> 00:43:29,170
client have you shared this with your

959
00:43:26,830 --> 00:43:31,480
Mac team to work with them at all with

960
00:43:29,170 --> 00:43:33,330
your Apple team did you get closer to

961
00:43:31,480 --> 00:43:36,040
the mic I'm sorry you have an apple

962
00:43:33,330 --> 00:43:38,230
party client have you shared this with

963
00:43:36,040 --> 00:43:42,840
them so they can fix it on their end as

964
00:43:38,230 --> 00:43:45,760
well when I tested it it seems that on

965
00:43:42,840 --> 00:43:48,610
Apple products they tend to use a free

966
00:43:45,760 --> 00:43:50,470
RDP or custom version of geography and

967
00:43:48,610 --> 00:43:54,790
philippi patched all of the

968
00:43:50,470 --> 00:43:57,520
vulnerabilities roughly at January this

969
00:43:54,790 --> 00:44:00,400
year so they should be ok

970
00:43:57,520 --> 00:44:02,590
same thing for the stock which Petra

971
00:44:00,400 --> 00:44:04,510
Township worried this year all of the

972
00:44:02,590 --> 00:44:06,190
vulnerabilities we've shown in the

973
00:44:04,510 --> 00:44:09,870
presentation were touched and the

974
00:44:06,190 --> 00:44:13,180
patches were already released to clients

975
00:44:09,870 --> 00:44:16,000
in your detection scheme you saw you

976
00:44:13,180 --> 00:44:17,480
shown that pasting into the startup

977
00:44:16,000 --> 00:44:20,119
directory is

978
00:44:17,480 --> 00:44:24,859
Bish's activity but how about dropping

979
00:44:20,119 --> 00:44:27,050
files to other directories yes so as I

980
00:44:24,859 --> 00:44:29,090
said in the last malicious behavior that

981
00:44:27,050 --> 00:44:31,490
I recognized basically file dropping to

982
00:44:29,090 --> 00:44:34,369
new machines so we basically would like

983
00:44:31,490 --> 00:44:36,830
to detect different cases of file

984
00:44:34,369 --> 00:44:39,530
creation on the machine by a normal

985
00:44:36,830 --> 00:44:43,880
detection so this is how we cover this

986
00:44:39,530 --> 00:44:46,400
scenario you have another question for

987
00:44:43,880 --> 00:44:48,890
you in the Microsoft version of the MS

988
00:44:46,400 --> 00:44:50,480
TSC there is a check box for enable

989
00:44:48,890 --> 00:44:52,759
remote level or network level

990
00:44:50,480 --> 00:44:54,350
authentication did you turn that on or

991
00:44:52,760 --> 00:44:59,060
use it or that change the outcome of

992
00:44:54,350 --> 00:45:03,980
what you've been doing the vulnerability

993
00:44:59,060 --> 00:45:05,930
is when you have a sync clipboard and it

994
00:45:03,980 --> 00:45:08,050
uses the clipboard channel and the clip

995
00:45:05,930 --> 00:45:12,020
with channel is the most internal

996
00:45:08,050 --> 00:45:14,690
logical module inside the RDP connection

997
00:45:12,020 --> 00:45:17,180
this means that it has nothing to do

998
00:45:14,690 --> 00:45:19,400
with the indication or anything you use

999
00:45:17,180 --> 00:45:21,980
encryption compression anything about

1000
00:45:19,400 --> 00:45:25,930
the RDP protocol which even makes it

1001
00:45:21,980 --> 00:45:29,240
harder for a network based product to

1002
00:45:25,930 --> 00:45:32,480
filter out this attack scenario and have

1003
00:45:29,240 --> 00:45:34,850
an IPS detection for example the only

1004
00:45:32,480 --> 00:45:37,250
thing you can do for your RDP client to

1005
00:45:34,850 --> 00:45:40,160
be safe if you're not catch is you can

1006
00:45:37,250 --> 00:45:42,560
simply disable the clipboard sharing

1007
00:45:40,160 --> 00:45:44,180
synchronization and this means you won't

1008
00:45:42,560 --> 00:45:47,990
have your clipboard but you won't be

1009
00:45:44,180 --> 00:45:49,940
vulnerable to anything otherwise will

1010
00:45:47,990 --> 00:45:51,859
stay the same the vulnerability will

1011
00:45:49,940 --> 00:45:55,640
stay it will be exploited exactly the

1012
00:45:51,859 --> 00:46:00,350
same it won't change nothing you need to

1013
00:45:55,640 --> 00:46:03,080
know thank you you mentioned there was a

1014
00:46:00,350 --> 00:46:05,299
white paper where can we find that in

1015
00:46:03,080 --> 00:46:07,549
blackhat website I'm not sure exactly

1016
00:46:05,300 --> 00:46:09,640
when it's gonna be released but it will

1017
00:46:07,550 --> 00:46:15,140
be there pregnant thank you

1018
00:46:09,640 --> 00:46:17,990
hi over here and the other mic yes great

1019
00:46:15,140 --> 00:46:20,359
presentation by the way I wanted to know

1020
00:46:17,990 --> 00:46:23,779
it was unclear to me how you perform the

1021
00:46:20,359 --> 00:46:25,640
attack how did you inject the column by

1022
00:46:23,780 --> 00:46:26,190
a slash or backslash whatever Windows

1023
00:46:25,640 --> 00:46:29,940
uses

1024
00:46:26,190 --> 00:46:31,740
so was it true OS DLL modification like

1025
00:46:29,940 --> 00:46:33,450
hard coding that things in there or did

1026
00:46:31,740 --> 00:46:35,520
you use some process and men in the

1027
00:46:33,450 --> 00:46:37,439
middle or did you use like clipboard

1028
00:46:35,520 --> 00:46:38,910
like something constantly changing the

1029
00:46:37,440 --> 00:46:41,640
clipboard how did you perform the attack

1030
00:46:38,910 --> 00:46:44,009
okay it's a good question we have all of

1031
00:46:41,640 --> 00:46:47,879
the details in the white paper with it

1032
00:46:44,010 --> 00:46:51,650
it's actually not plainly obvious what

1033
00:46:47,880 --> 00:46:54,030
happens is onions the server you have an

1034
00:46:51,650 --> 00:46:55,890
but I told you but the vulnerability

1035
00:46:54,030 --> 00:46:57,960
could be exploited without elevated

1036
00:46:55,890 --> 00:46:59,970
privileges so without touching the

1037
00:46:57,960 --> 00:47:02,220
service and it seemed that the service

1038
00:46:59,970 --> 00:47:05,730
is using an additional process called

1039
00:47:02,220 --> 00:47:08,430
the RDP clip and are typically is a bowl

1040
00:47:05,730 --> 00:47:12,420
kill for the clipboard so I text our DP

1041
00:47:08,430 --> 00:47:15,799
clip to load my own DLL and when I see

1042
00:47:12,420 --> 00:47:19,170
someone copies a file or pasting a file

1043
00:47:15,800 --> 00:47:21,960
it will redirect the logic to my dear

1044
00:47:19,170 --> 00:47:26,070
and my DLL will replace the files path

1045
00:47:21,960 --> 00:47:29,250
with dot dot slash after our DP clip was

1046
00:47:26,070 --> 00:47:32,430
supposed to verify the path on its own

1047
00:47:29,250 --> 00:47:34,080
actually our DP clips verifies the

1048
00:47:32,430 --> 00:47:35,759
content of the clipboard so if you

1049
00:47:34,080 --> 00:47:38,340
manually change the clip or and that's

1050
00:47:35,760 --> 00:47:40,560
it the attack won't work you can think

1051
00:47:38,340 --> 00:47:43,920
of it on a client-side verification on

1052
00:47:40,560 --> 00:47:45,690
the server so attached are typically are

1053
00:47:43,920 --> 00:47:47,610
typically simply sends the file group

1054
00:47:45,690 --> 00:47:49,980
descriptor to the service to the service

1055
00:47:47,610 --> 00:47:52,830
it will later on be sent to the client

1056
00:47:49,980 --> 00:47:54,930
and that's it so eventually we had a

1057
00:47:52,830 --> 00:47:58,069
catch Nelson that exploits the

1058
00:47:54,930 --> 00:48:01,410
vulnerability when you copy files

1059
00:47:58,070 --> 00:48:03,630
excellent thank you hello

1060
00:48:01,410 --> 00:48:06,089
so we mentioned that this detection was

1061
00:48:03,630 --> 00:48:07,440
based on the logs and the events which

1062
00:48:06,090 --> 00:48:09,150
are being generated on the client-side

1063
00:48:07,440 --> 00:48:11,760
and they were probably being sent to

1064
00:48:09,150 --> 00:48:13,860
Microsoft the mothership so like are

1065
00:48:11,760 --> 00:48:16,290
these events sent to Microsoft even if

1066
00:48:13,860 --> 00:48:19,170
the user has turned off the Diagnostics

1067
00:48:16,290 --> 00:48:20,640
or sending out a diagnostic events so I

1068
00:48:19,170 --> 00:48:23,370
mean my question is like is this

1069
00:48:20,640 --> 00:48:24,810
detection gonna cover all the clients

1070
00:48:23,370 --> 00:48:27,810
are only those clients which have

1071
00:48:24,810 --> 00:48:30,720
enabled the diagnostic events to be sent

1072
00:48:27,810 --> 00:48:33,000
to Microsoft so yeah this is a very

1073
00:48:30,720 --> 00:48:36,720
simple detection technique by the way I

1074
00:48:33,000 --> 00:48:39,130
didn't mention but 94% of the pasting

1075
00:48:36,720 --> 00:48:41,680
operations includes only one item

1076
00:48:39,130 --> 00:48:44,440
so these operate this actually detection

1077
00:48:41,680 --> 00:48:47,288
is actually very useful you can use it

1078
00:48:44,440 --> 00:48:49,479
on your own machine without any security

1079
00:48:47,289 --> 00:48:51,099
vendor installed on your machine you can

1080
00:48:49,479 --> 00:48:55,739
just basically implement it by yourself

1081
00:48:51,099 --> 00:48:58,509
using the etw event providers I

1082
00:48:55,739 --> 00:49:01,569
specifically work on Microsoft Defender

1083
00:48:58,509 --> 00:49:06,369
ATP so if I implement everything

1084
00:49:01,569 --> 00:49:08,499
yourself in our product thank you it can

1085
00:49:06,369 --> 00:49:12,069
be used by any security vendors since it

1086
00:49:08,499 --> 00:49:19,058
is used it we used only built-in

1087
00:49:12,069 --> 00:49:19,850
telemetry cool thank you cool thanks for

1088
00:49:19,059 --> 00:49:23,630
coming

1089
00:49:19,850 --> 00:49:23,630
[Applause]

