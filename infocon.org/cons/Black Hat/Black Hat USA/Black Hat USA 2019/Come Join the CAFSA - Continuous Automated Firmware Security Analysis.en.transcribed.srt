1
00:00:00,030 --> 00:00:04,470
good afternoon and welcome our talk

2
00:00:02,520 --> 00:00:06,629
today is come join the continuous

3
00:00:04,470 --> 00:00:09,928
automated firmer security analysis in

4
00:00:06,629 --> 00:00:12,329
Mandalay Bay Rome JKL with Collin

5
00:00:09,929 --> 00:00:14,280
Mulliner before we begin I have a few

6
00:00:12,330 --> 00:00:16,560
very brief notes stop by the business

7
00:00:14,280 --> 00:00:18,900
hall located in Mandalay Bay Oceanside

8
00:00:16,560 --> 00:00:20,880
and shoreline ballrooms on level 2

9
00:00:18,900 --> 00:00:23,369
during the day and wait for the Welcome

10
00:00:20,880 --> 00:00:25,049
Reception tonight at 5:30 p.m. the

11
00:00:23,369 --> 00:00:27,448
blackhead arsenal is in the business

12
00:00:25,050 --> 00:00:30,359
hall on level 2 join us for the pony

13
00:00:27,449 --> 00:00:33,120
Awards in lagoon jko at 6:30 p.m. it's

14
00:00:30,359 --> 00:00:34,770
in this room and thank you for putting

15
00:00:33,120 --> 00:00:36,089
your phones on vibrate it makes it

16
00:00:34,770 --> 00:00:40,579
easier for the rest of us to ignore the

17
00:00:36,090 --> 00:00:41,820
ringing calling it's all yours thank you

18
00:00:40,579 --> 00:00:44,969
yeah

19
00:00:41,820 --> 00:00:47,670
hello everybody so today I'm gonna talk

20
00:00:44,969 --> 00:00:52,469
to you a little bit about continues

21
00:00:47,670 --> 00:00:54,719
memory security yeah my background is

22
00:00:52,469 --> 00:00:56,219
basic security but also I've I've spent

23
00:00:54,719 --> 00:01:01,379
a lot of years actually building and

24
00:00:56,219 --> 00:01:03,390
devices like embedded devices so yeah

25
00:01:01,379 --> 00:01:06,479
this basic combines like what I do for

26
00:01:03,390 --> 00:01:08,610
like many many many years so in building

27
00:01:06,479 --> 00:01:10,080
building devices is very hard like it if

28
00:01:08,610 --> 00:01:11,640
you ever worked in a company where you

29
00:01:10,080 --> 00:01:13,798
actually build like an embedded vice or

30
00:01:11,640 --> 00:01:15,630
consumer electronics it's a lot of work

31
00:01:13,799 --> 00:01:17,729
and building a secure device is like

32
00:01:15,630 --> 00:01:19,380
even more work and then I'm going to

33
00:01:17,729 --> 00:01:22,920
talk about devices that's really like

34
00:01:19,380 --> 00:01:25,920
industrial a little bit of IOT and say

35
00:01:22,920 --> 00:01:29,820
customized Android devices Y or general

36
00:01:25,920 --> 00:01:32,820
consumer electronics and because I work

37
00:01:29,820 --> 00:01:35,100
for a car company for me the car is lots

38
00:01:32,820 --> 00:01:38,130
of different small computers all

39
00:01:35,100 --> 00:01:40,259
connected together on their own unveils

40
00:01:38,130 --> 00:01:43,289
that's that's that's how I think about

41
00:01:40,259 --> 00:01:46,259
it and the the your product is secure if

42
00:01:43,290 --> 00:01:48,270
all the little components are secure so

43
00:01:46,259 --> 00:01:51,240
when we talk about devices and firmware

44
00:01:48,270 --> 00:01:53,070
in this talk I really focus on devices

45
00:01:51,240 --> 00:01:54,899
that have a full operating system so if

46
00:01:53,070 --> 00:01:57,000
you kernel you have a user space you

47
00:01:54,899 --> 00:01:58,500
have actual file systems and your

48
00:01:57,000 --> 00:02:00,659
firmware consists of like yeah that

49
00:01:58,500 --> 00:02:03,149
combination kernel file systems

50
00:02:00,659 --> 00:02:06,500
I don't really end this in this talk of

51
00:02:03,149 --> 00:02:09,060
work we don't really look at say like

52
00:02:06,500 --> 00:02:10,840
like those like small smaller device

53
00:02:09,060 --> 00:02:12,730
where you just basically have one blob

54
00:02:10,840 --> 00:02:14,349
it's just some starts a number of tasks

55
00:02:12,730 --> 00:02:16,840
and have a little bit data everything is

56
00:02:14,349 --> 00:02:21,540
mixed together you don't have really a

57
00:02:16,840 --> 00:02:24,280
differentiation so basically this covers

58
00:02:21,540 --> 00:02:27,190
mostly like devices that like run some

59
00:02:24,280 --> 00:02:29,500
kind of Linux Frank for example like any

60
00:02:27,190 --> 00:02:31,599
kind of Android device and like similar

61
00:02:29,500 --> 00:02:34,180
devices say like a cue cue next base

62
00:02:31,599 --> 00:02:37,780
device would basically be be handled

63
00:02:34,180 --> 00:02:39,819
exactly the same way now in these days

64
00:02:37,780 --> 00:02:41,440
you just have firmware everywhere like

65
00:02:39,819 --> 00:02:45,160
every little thing has firmware in it

66
00:02:41,440 --> 00:02:47,920
and from res really your product and if

67
00:02:45,160 --> 00:02:49,959
yeah and your product is what's a new

68
00:02:47,920 --> 00:02:53,589
firmware so if you think about firmware

69
00:02:49,959 --> 00:02:55,629
security you really look at multiple

70
00:02:53,590 --> 00:02:57,129
things that have to be there and play

71
00:02:55,629 --> 00:03:00,220
together in order to have secure

72
00:02:57,129 --> 00:03:02,340
firmware so we can start saying like

73
00:03:00,220 --> 00:03:05,680
secure boot like so you want to have

74
00:03:02,340 --> 00:03:07,599
something that validates your kernel and

75
00:03:05,680 --> 00:03:09,640
file systems before you like during boot

76
00:03:07,599 --> 00:03:12,129
you want to have the production version

77
00:03:09,640 --> 00:03:14,559
of your configuration files we won't

78
00:03:12,129 --> 00:03:17,230
have production binary so you want to

79
00:03:14,560 --> 00:03:19,630
have no debug or development or test

80
00:03:17,230 --> 00:03:22,328
binaries or your normal binaries without

81
00:03:19,630 --> 00:03:25,000
those features and then you want to have

82
00:03:22,329 --> 00:03:27,489
all of your production access controls

83
00:03:25,000 --> 00:03:28,510
or file system permissions labels you

84
00:03:27,489 --> 00:03:32,200
want to have the right cryptographic

85
00:03:28,510 --> 00:03:33,970
material so you want to have your

86
00:03:32,200 --> 00:03:37,480
production version and not something you

87
00:03:33,970 --> 00:03:38,920
developers use and of corn you of course

88
00:03:37,480 --> 00:03:40,840
you want your hardened code so you want

89
00:03:38,920 --> 00:03:43,030
production builds of every binary on

90
00:03:40,840 --> 00:03:45,310
hardened hardened options need no

91
00:03:43,030 --> 00:03:48,760
symbols and so on so if like all of

92
00:03:45,310 --> 00:03:51,280
these things play together then your

93
00:03:48,760 --> 00:03:54,220
firmware is getting is getting secure

94
00:03:51,280 --> 00:03:56,650
and yeah for this talk I just like

95
00:03:54,220 --> 00:03:59,079
googled a little bit around four CVEs

96
00:03:56,650 --> 00:04:02,319
that specifically mentioned firmware as

97
00:03:59,079 --> 00:04:04,000
like like from rare bugs and if if you

98
00:04:02,319 --> 00:04:07,060
look at this you can see like oh there

99
00:04:04,000 --> 00:04:09,549
was this device the makers of device

100
00:04:07,060 --> 00:04:11,859
forgot like their private RSA keys and

101
00:04:09,549 --> 00:04:13,660
in their file system and they when they

102
00:04:11,859 --> 00:04:17,799
ship the ephemeral or like another

103
00:04:13,660 --> 00:04:19,620
example like the et Cie shadow file was

104
00:04:17,798 --> 00:04:23,229
like world readable

105
00:04:19,620 --> 00:04:26,440
all those last example read says like Oh

106
00:04:23,230 --> 00:04:28,960
like undocumented ssh server running on

107
00:04:26,440 --> 00:04:30,490
this device we bought and then you can

108
00:04:28,960 --> 00:04:32,950
see like later or they actually removed

109
00:04:30,490 --> 00:04:35,260
it so it seemed yeah so there's like

110
00:04:32,950 --> 00:04:36,969
very very simple things very maybe don't

111
00:04:35,260 --> 00:04:39,730
think about you it's not like they

112
00:04:36,970 --> 00:04:41,740
exploit like in your web and your in the

113
00:04:39,730 --> 00:04:43,000
web browser the web server that runs on

114
00:04:41,740 --> 00:04:46,990
your device it's like all the little

115
00:04:43,000 --> 00:04:50,170
other things that can hurt your way of

116
00:04:46,990 --> 00:04:52,540
anymore so how do you get like those

117
00:04:50,170 --> 00:04:54,460
kind of bugs and general like people

118
00:04:52,540 --> 00:04:56,020
think oh and you develop develop a

119
00:04:54,460 --> 00:04:57,609
product you just live you develop as the

120
00:04:56,020 --> 00:04:59,770
f you see is you're testing everything

121
00:04:57,610 --> 00:05:02,170
like run smooth you go from prototype

122
00:04:59,770 --> 00:05:03,849
development testing you do a little bit

123
00:05:02,170 --> 00:05:05,200
of QA you have your pen tests and then

124
00:05:03,850 --> 00:05:06,910
you have your product you just sign it

125
00:05:05,200 --> 00:05:09,640
and ship it but of course it's not like

126
00:05:06,910 --> 00:05:11,980
that anybody who ever worked in software

127
00:05:09,640 --> 00:05:13,599
or like device manufacturing you know

128
00:05:11,980 --> 00:05:15,580
like you have a new feature then you

129
00:05:13,600 --> 00:05:18,160
have to disable something to dig back to

130
00:05:15,580 --> 00:05:20,169
the bug something yet another feature

131
00:05:18,160 --> 00:05:22,270
the cigar we need to open this network

132
00:05:20,170 --> 00:05:23,860
power because you have a new thing and

133
00:05:22,270 --> 00:05:25,719
it's like our some developers really

134
00:05:23,860 --> 00:05:28,690
need to like debug on device so you add

135
00:05:25,720 --> 00:05:30,370
like an SSH server and then QA Vaughn

136
00:05:28,690 --> 00:05:32,469
some feature and then you remove some

137
00:05:30,370 --> 00:05:34,390
functionality so like there's really

138
00:05:32,470 --> 00:05:36,340
constant change and a lot of it just

139
00:05:34,390 --> 00:05:40,140
like everything changes all the time

140
00:05:36,340 --> 00:05:44,289
until you have your your final thing and

141
00:05:40,140 --> 00:05:46,120
being able to see here a product while

142
00:05:44,290 --> 00:05:48,640
all of this happens it's just like a lot

143
00:05:46,120 --> 00:05:50,800
of work and basically one thing you

144
00:05:48,640 --> 00:05:52,330
really want to prevent this is like this

145
00:05:50,800 --> 00:05:53,140
ripple effect if you like ship something

146
00:05:52,330 --> 00:05:55,810
that's bad

147
00:05:53,140 --> 00:05:58,180
so maybe maybe your ship something where

148
00:05:55,810 --> 00:06:01,180
you you have like none or really like

149
00:05:58,180 --> 00:06:03,460
partial working security controls maybe

150
00:06:01,180 --> 00:06:05,470
like you should a defective product

151
00:06:03,460 --> 00:06:09,070
because maybe your security is so strong

152
00:06:05,470 --> 00:06:10,930
and like you're certain things don't

153
00:06:09,070 --> 00:06:13,390
work because you didn't test that like

154
00:06:10,930 --> 00:06:15,970
in any circumstance

155
00:06:13,390 --> 00:06:19,150
like a specific thing can like read a

156
00:06:15,970 --> 00:06:22,540
file or access like a specific network

157
00:06:19,150 --> 00:06:24,880
port or maybe you accidentally crippled

158
00:06:22,540 --> 00:06:29,260
you update because maybe you ship like

159
00:06:24,880 --> 00:06:31,240
ROM public keys so basically you really

160
00:06:29,260 --> 00:06:32,969
want to prevent this because it's yeah

161
00:06:31,240 --> 00:06:35,620
it can trade like a really long-term

162
00:06:32,970 --> 00:06:36,930
negative effect like on your product and

163
00:06:35,620 --> 00:06:40,050
company

164
00:06:36,930 --> 00:06:41,850
and yeah it's easy to like lose your

165
00:06:40,050 --> 00:06:45,090
reputation and like maybe you have to

166
00:06:41,850 --> 00:06:49,470
like recall products or maybe not recall

167
00:06:45,090 --> 00:06:51,508
maybe you just have to like yeah maybe

168
00:06:49,470 --> 00:06:53,759
you have to like completely trash them

169
00:06:51,509 --> 00:06:55,500
and it's like stuff like this like

170
00:06:53,759 --> 00:06:59,130
happens like you can read about this in

171
00:06:55,500 --> 00:07:01,020
the media so in order what what you

172
00:06:59,130 --> 00:07:02,430
really need to do is so you of course

173
00:07:01,020 --> 00:07:04,229
you have to bring in automation because

174
00:07:02,430 --> 00:07:07,050
if all of the stuff changes all the time

175
00:07:04,229 --> 00:07:09,030
so you want to have something that you

176
00:07:07,050 --> 00:07:12,900
can use to automatically look at your

177
00:07:09,030 --> 00:07:15,119
your your security what I really like to

178
00:07:12,900 --> 00:07:16,888
talk about security cray

179
00:07:15,120 --> 00:07:19,949
security is one part but you also need

180
00:07:16,889 --> 00:07:22,530
to like have the assure that the thing

181
00:07:19,949 --> 00:07:24,330
that your security is like has good

182
00:07:22,530 --> 00:07:27,210
quality like security quality could

183
00:07:24,330 --> 00:07:28,650
really go hand-in-hand so you looked at

184
00:07:27,210 --> 00:07:30,719
this and was like yeah okay so we need

185
00:07:28,650 --> 00:07:32,429
some a tool that we can use to like

186
00:07:30,720 --> 00:07:34,740
automatically perform security checks

187
00:07:32,430 --> 00:07:36,570
and then with this tool your you need to

188
00:07:34,740 --> 00:07:38,580
deploy in strategic locations on your

189
00:07:36,570 --> 00:07:41,550
development floor and I'm gonna go

190
00:07:38,580 --> 00:07:43,650
through the tool how we deploy it and

191
00:07:41,550 --> 00:07:46,289
like what are like the benefits and of

192
00:07:43,650 --> 00:07:48,090
course you need to take the results and

193
00:07:46,289 --> 00:07:49,710
do something that I'm just like knowing

194
00:07:48,090 --> 00:07:51,869
that like something is bad doesn't

195
00:07:49,710 --> 00:07:54,810
really help you that much you really

196
00:07:51,870 --> 00:07:58,650
want to feedback that information to

197
00:07:54,810 --> 00:08:01,349
whoever is like building the device so

198
00:07:58,650 --> 00:08:04,440
we built this tool that we call from err

199
00:08:01,349 --> 00:08:07,830
analyzer and it's really like a tool for

200
00:08:04,440 --> 00:08:09,479
security QA for firmware and and the

201
00:08:07,830 --> 00:08:11,039
base the Billy basic function in case

202
00:08:09,479 --> 00:08:13,949
you have some rules that you were

203
00:08:11,039 --> 00:08:17,310
experts create and those rules are

204
00:08:13,949 --> 00:08:19,440
enforced and you basic get a report

205
00:08:17,310 --> 00:08:21,840
the rules are really enforced on

206
00:08:19,440 --> 00:08:24,270
individual file system images of a firm

207
00:08:21,840 --> 00:08:27,869
ray I will get going to like Mort idea

208
00:08:24,270 --> 00:08:29,490
but like how we look at firmware and

209
00:08:27,870 --> 00:08:31,020
what the different components are and

210
00:08:29,490 --> 00:08:33,900
you really want to like enforce things

211
00:08:31,020 --> 00:08:35,848
like type ownership and files like and

212
00:08:33,900 --> 00:08:38,098
you also want to look at file contents

213
00:08:35,849 --> 00:08:40,469
or is this the right file does this file

214
00:08:38,099 --> 00:08:43,020
contain so and so that's this file not

215
00:08:40,469 --> 00:08:45,390
contain something well you want to like

216
00:08:43,020 --> 00:08:47,939
run maybe an external program to analyze

217
00:08:45,390 --> 00:08:49,860
and like specific kind of file to get

218
00:08:47,940 --> 00:08:50,710
more information and really the big use

219
00:08:49,860 --> 00:08:55,620
cases are you

220
00:08:50,710 --> 00:08:58,150
to run NCI so that on every build you

221
00:08:55,620 --> 00:08:59,830
you look at the farmer and can like flag

222
00:08:58,150 --> 00:09:02,380
problems so developers can immediately

223
00:08:59,830 --> 00:09:04,900
like they don't get their PR emerged if

224
00:09:02,380 --> 00:09:07,689
if you find things so that's really good

225
00:09:04,900 --> 00:09:08,829
and of course like I'm all modern

226
00:09:07,690 --> 00:09:11,800
devices

227
00:09:08,830 --> 00:09:14,110
you basically have signed updates secure

228
00:09:11,800 --> 00:09:16,300
boot so you really want to like prevent

229
00:09:14,110 --> 00:09:19,030
signing like bad firmware so basically

230
00:09:16,300 --> 00:09:20,680
you can put put a tool like this in

231
00:09:19,030 --> 00:09:24,310
front of your production signing system

232
00:09:20,680 --> 00:09:26,050
and you only sign firmware that like

233
00:09:24,310 --> 00:09:28,300
passes and of course things like

234
00:09:26,050 --> 00:09:30,459
acceptance testing if you buy you buy

235
00:09:28,300 --> 00:09:33,189
products from third parties you want to

236
00:09:30,460 --> 00:09:37,510
look at the firmware and you can also do

237
00:09:33,190 --> 00:09:40,330
that yeah basically yeah we open sourced

238
00:09:37,510 --> 00:09:42,850
us since today I will have another link

239
00:09:40,330 --> 00:09:44,350
at the end of those slides but yeah this

240
00:09:42,850 --> 00:09:47,140
is like not not a product it's a

241
00:09:44,350 --> 00:09:49,930
completely open source tool we take PRS

242
00:09:47,140 --> 00:09:51,790
and so on so on the main get all ready

243
00:09:49,930 --> 00:09:53,290
for this is we want to prevent high

244
00:09:51,790 --> 00:09:55,930
impact changes from going into

245
00:09:53,290 --> 00:09:58,480
production like no no debugging features

246
00:09:55,930 --> 00:10:00,339
a no big configuration and really

247
00:09:58,480 --> 00:10:01,660
prevent those ripple effect and most

248
00:10:00,340 --> 00:10:03,610
likely you spend a lot of effort

249
00:10:01,660 --> 00:10:06,310
building security features into your

250
00:10:03,610 --> 00:10:07,990
product and it would be like really sad

251
00:10:06,310 --> 00:10:10,479
if you like ship something in my code

252
00:10:07,990 --> 00:10:13,210
due to some mistake maybe like feature

253
00:10:10,480 --> 00:10:16,000
like security features get disabled or

254
00:10:13,210 --> 00:10:17,740
maybe security features disables part of

255
00:10:16,000 --> 00:10:19,690
your product and it's really to like

256
00:10:17,740 --> 00:10:22,630
create confidence in the security of

257
00:10:19,690 --> 00:10:27,660
your product cause you have a lot lot of

258
00:10:22,630 --> 00:10:30,100
things to do and that should help you

259
00:10:27,660 --> 00:10:32,199
additional goals of this is not only you

260
00:10:30,100 --> 00:10:34,390
not only want to like prevent and like

261
00:10:32,200 --> 00:10:36,250
shipping something bad but you also want

262
00:10:34,390 --> 00:10:40,360
to have visibility view you always want

263
00:10:36,250 --> 00:10:42,400
to see what's going on so and then you

264
00:10:40,360 --> 00:10:44,470
have like just a piece of firmware it's

265
00:10:42,400 --> 00:10:46,480
you know it's it's hard you want to like

266
00:10:44,470 --> 00:10:48,990
you maybe even want to know in term

267
00:10:46,480 --> 00:10:51,250
wording information security parameters

268
00:10:48,990 --> 00:10:53,320
of course the tool is built for

269
00:10:51,250 --> 00:10:55,540
automation you don't want to have like

270
00:10:53,320 --> 00:10:58,090
people sitting there and like typing

271
00:10:55,540 --> 00:11:00,430
something in like manually analyzing it

272
00:10:58,090 --> 00:11:03,790
like so you want to like really have the

273
00:11:00,430 --> 00:11:07,089
system that you can yeah integrate

274
00:11:03,790 --> 00:11:09,520
into into your development pipeline and

275
00:11:07,090 --> 00:11:11,590
for this reason for example we reproduce

276
00:11:09,520 --> 00:11:13,390
machine readable output we can just like

277
00:11:11,590 --> 00:11:15,010
use and pulse process and also

278
00:11:13,390 --> 00:11:17,290
collaboration you want to like be able

279
00:11:15,010 --> 00:11:19,300
to share like your experience and

280
00:11:17,290 --> 00:11:21,250
knowledge maybe with other product teams

281
00:11:19,300 --> 00:11:23,229
in your company but like also externally

282
00:11:21,250 --> 00:11:26,650
so it's also built for that that you can

283
00:11:23,230 --> 00:11:31,390
very easily share like checking rules

284
00:11:26,650 --> 00:11:33,819
and and so on so they want the one big

285
00:11:31,390 --> 00:11:35,620
thing like we for in the scope of this

286
00:11:33,820 --> 00:11:36,670
like tool and like the system we really

287
00:11:35,620 --> 00:11:38,650
don't care about software

288
00:11:36,670 --> 00:11:40,300
vulnerabilities like so this tool is

289
00:11:38,650 --> 00:11:42,280
really not to find like bugs and your

290
00:11:40,300 --> 00:11:43,630
binary so source code or we don't like

291
00:11:42,280 --> 00:11:46,839
scan four CVEs

292
00:11:43,630 --> 00:11:48,460
in in your in like yeah in your software

293
00:11:46,840 --> 00:11:51,100
stack there are so many different tools

294
00:11:48,460 --> 00:11:52,690
and products you can use and you

295
00:11:51,100 --> 00:11:54,640
probably like already have something to

296
00:11:52,690 --> 00:11:58,090
like do source code analysis while

297
00:11:54,640 --> 00:12:01,060
binary analysis if you really want to

298
00:11:58,090 --> 00:12:02,590
use both together the firmware analyzer

299
00:12:01,060 --> 00:12:04,180
has like a scripting engine and you can

300
00:12:02,590 --> 00:12:06,730
very easily plug something in and you

301
00:12:04,180 --> 00:12:09,449
can combine but this is not yet another

302
00:12:06,730 --> 00:12:12,190
like we find binary heavy find

303
00:12:09,450 --> 00:12:13,960
vulnerabilities or bugs and source code

304
00:12:12,190 --> 00:12:16,630
binary this has nothing nothing to do

305
00:12:13,960 --> 00:12:19,120
with that and if you just like look at

306
00:12:16,630 --> 00:12:20,470
very very simple invocation so now I'm

307
00:12:19,120 --> 00:12:22,570
gonna just like walk you through like

308
00:12:20,470 --> 00:12:24,370
what's like very standard workflow and

309
00:12:22,570 --> 00:12:27,520
show you all of the options and then

310
00:12:24,370 --> 00:12:28,960
later at the end we're gonna show how we

311
00:12:27,520 --> 00:12:31,210
actually deploy this and use this in

312
00:12:28,960 --> 00:12:33,550
wheels in the reality so basically we

313
00:12:31,210 --> 00:12:35,530
start you basically have a little you

314
00:12:33,550 --> 00:12:37,719
have a configuration file and I will

315
00:12:35,530 --> 00:12:40,750
will go into that in detail near if you

316
00:12:37,720 --> 00:12:44,350
file system image and you run it

317
00:12:40,750 --> 00:12:47,940
and then like one of your checks will

318
00:12:44,350 --> 00:12:50,080
flag something and you know okay this

319
00:12:47,940 --> 00:12:53,650
one of you rolls triggered and that's

320
00:12:50,080 --> 00:12:56,410
the basic functionality so when we talk

321
00:12:53,650 --> 00:12:58,959
about firmware I really talk about file

322
00:12:56,410 --> 00:13:00,520
system images because basically what is

323
00:12:58,960 --> 00:13:02,110
firmware we have a kernel file system

324
00:13:00,520 --> 00:13:03,939
image all of them are bundled together

325
00:13:02,110 --> 00:13:08,920
in is like something like a zip file or

326
00:13:03,940 --> 00:13:11,260
cpo archive and the from our firmware

327
00:13:08,920 --> 00:13:12,400
analyzer really targets factory or full

328
00:13:11,260 --> 00:13:14,620
firmware updates you're not really

329
00:13:12,400 --> 00:13:16,900
looking into like Delta updates or like

330
00:13:14,620 --> 00:13:17,180
during the build stage really what comes

331
00:13:16,900 --> 00:13:19,850
out

332
00:13:17,180 --> 00:13:21,739
at the end because so depending on how

333
00:13:19,850 --> 00:13:24,050
you how you build you can really only

334
00:13:21,740 --> 00:13:26,650
tell at the very end like this is like

335
00:13:24,050 --> 00:13:29,089
the final stage that you're gonna ship

336
00:13:26,650 --> 00:13:31,160
cause just on the way you like stuff

337
00:13:29,090 --> 00:13:32,660
gets bundled and created during build

338
00:13:31,160 --> 00:13:35,180
time and like all of the build systems

339
00:13:32,660 --> 00:13:36,980
are different and the nice side effect

340
00:13:35,180 --> 00:13:38,599
of this is that at the end you have

341
00:13:36,980 --> 00:13:40,160
automatic support for commercial

342
00:13:38,600 --> 00:13:42,290
off-the-shelf devices so if you just buy

343
00:13:40,160 --> 00:13:46,969
some device get a firmware update you

344
00:13:42,290 --> 00:13:48,949
could look at it yeah so why do we

345
00:13:46,970 --> 00:13:51,110
actually look at the file system images

346
00:13:48,950 --> 00:13:52,940
versus just like some files because of

347
00:13:51,110 --> 00:13:55,670
course we like not only interested in

348
00:13:52,940 --> 00:13:57,950
the content of the actual file but also

349
00:13:55,670 --> 00:13:59,990
in all the metadata files the file

350
00:13:57,950 --> 00:14:02,450
owners types permission attributes

351
00:13:59,990 --> 00:14:05,330
something like selinux labels directory

352
00:14:02,450 --> 00:14:07,040
structures and the nice thing what we

353
00:14:05,330 --> 00:14:09,050
can do we can actually compare entire

354
00:14:07,040 --> 00:14:10,310
file system images against each other so

355
00:14:09,050 --> 00:14:12,229
if you have two different versions of

356
00:14:10,310 --> 00:14:13,910
the same image you can just say hey what

357
00:14:12,230 --> 00:14:15,860
changed between them and that's like

358
00:14:13,910 --> 00:14:17,449
even a completely automatic feature you

359
00:14:15,860 --> 00:14:19,910
don't have to do anything which gives

360
00:14:17,450 --> 00:14:21,770
you which you can all not do if you just

361
00:14:19,910 --> 00:14:24,949
like look at single files that you may

362
00:14:21,770 --> 00:14:29,600
be like extracted from from like a

363
00:14:24,950 --> 00:14:32,750
binary block file system yeah and so far

364
00:14:29,600 --> 00:14:33,890
the files of firmware analyzer basically

365
00:14:32,750 --> 00:14:35,360
has you need a little bit of

366
00:14:33,890 --> 00:14:37,850
infrastructure so you have to actually

367
00:14:35,360 --> 00:14:39,470
executable and then you have something

368
00:14:37,850 --> 00:14:42,170
that we could just call like check top 5

369
00:14:39,470 --> 00:14:44,090
it's a simple wrapper which like

370
00:14:42,170 --> 00:14:47,959
implements like firmware unpacking

371
00:14:44,090 --> 00:14:50,240
because oh really depending on your

372
00:14:47,960 --> 00:14:53,150
device like all all firmware updates are

373
00:14:50,240 --> 00:14:55,520
like that they are just different if you

374
00:14:53,150 --> 00:14:58,640
look at like an Android update versus I

375
00:14:55,520 --> 00:14:59,930
now say like from a TV if I'm a smart TV

376
00:14:58,640 --> 00:15:00,740
this framework just looks completely

377
00:14:59,930 --> 00:15:03,680
different

378
00:15:00,740 --> 00:15:06,170
so the unpacking part that's that's it

379
00:15:03,680 --> 00:15:08,120
that is not something like we do but

380
00:15:06,170 --> 00:15:11,180
that's like if you build a device you

381
00:15:08,120 --> 00:15:13,100
know how you from it looks like so and

382
00:15:11,180 --> 00:15:14,630
then you have configuration files it's

383
00:15:13,100 --> 00:15:16,610
basic just like all the different checks

384
00:15:14,630 --> 00:15:18,740
and then you have like those file 3

385
00:15:16,610 --> 00:15:22,340
files especially a dump of the entire

386
00:15:18,740 --> 00:15:23,840
file system where you just have meta

387
00:15:22,340 --> 00:15:26,300
information about every file and those

388
00:15:23,840 --> 00:15:28,319
together come basically build your

389
00:15:26,300 --> 00:15:31,709
infrastructure

390
00:15:28,319 --> 00:15:33,719
and the configuration files and fight

391
00:15:31,709 --> 00:15:37,349
fields basically the variables that like

392
00:15:33,720 --> 00:15:39,180
change you want to update them and the

393
00:15:37,350 --> 00:15:41,610
actual workflow looks like this you have

394
00:15:39,180 --> 00:15:44,399
you take your firmware you unpack it and

395
00:15:41,610 --> 00:15:47,459
you have get all of the different file

396
00:15:44,399 --> 00:15:49,559
system images and then they get analyzed

397
00:15:47,459 --> 00:15:51,660
individually you get your nice report at

398
00:15:49,559 --> 00:15:53,459
the end and then you can do some

399
00:15:51,660 --> 00:15:58,529
post-processing and then maybe you

400
00:15:53,459 --> 00:16:00,388
combine them at the end so let's look a

401
00:15:58,529 --> 00:16:04,199
little bit and how how does two actually

402
00:16:00,389 --> 00:16:06,540
works so basically as I said it right

403
00:16:04,199 --> 00:16:08,550
works and file system images but we have

404
00:16:06,540 --> 00:16:10,889
the tools pay a bill to like analyze

405
00:16:08,550 --> 00:16:13,498
them without mounting them you want to

406
00:16:10,889 --> 00:16:16,850
run the tool NCI and maybe in places

407
00:16:13,499 --> 00:16:19,550
where you don't want to like like have

408
00:16:16,850 --> 00:16:21,360
amount anything or like have root access

409
00:16:19,550 --> 00:16:23,040
currently we support a bunch of

410
00:16:21,360 --> 00:16:25,800
different file system like all the X

411
00:16:23,040 --> 00:16:28,860
file system vfat squash FS and so on and

412
00:16:25,800 --> 00:16:30,300
also like a local directory so like if

413
00:16:28,860 --> 00:16:31,740
you just can unpack something and get a

414
00:16:30,300 --> 00:16:34,649
bunch of files you can also treat that

415
00:16:31,740 --> 00:16:37,110
directory as like the file system yeah

416
00:16:34,649 --> 00:16:38,790
the output is situation is like really

417
00:16:37,110 --> 00:16:40,829
easy for post-processing and automation

418
00:16:38,790 --> 00:16:43,980
a lot of a lot of tooling especially if

419
00:16:40,829 --> 00:16:45,839
you look at like closed cloud-based lock

420
00:16:43,980 --> 00:16:47,610
services they all have really nice JSON

421
00:16:45,839 --> 00:16:49,860
supports you can like do like also

422
00:16:47,610 --> 00:16:52,470
awesome stuff at the end with that once

423
00:16:49,860 --> 00:16:54,389
you reach it you really reach like your

424
00:16:52,470 --> 00:16:57,149
cloud service which Arlo's are going to

425
00:16:54,389 --> 00:16:58,920
talk about on debate the basic output is

426
00:16:57,149 --> 00:17:00,689
you have offenders that are basically

427
00:16:58,920 --> 00:17:04,740
violations of configurators or

428
00:17:00,689 --> 00:17:06,629
configurate rules basically if as soon

429
00:17:04,740 --> 00:17:08,699
as you have like one offending rule via

430
00:17:06,630 --> 00:17:11,250
an analysis like fails it's like yeah

431
00:17:08,699 --> 00:17:12,659
this is not what you want and then you

432
00:17:11,250 --> 00:17:14,280
have informational output which is

433
00:17:12,659 --> 00:17:16,439
basically non fatal check so it's

434
00:17:14,280 --> 00:17:18,500
basically for visibility and you can

435
00:17:16,439 --> 00:17:20,789
also do like row testing with that and

436
00:17:18,500 --> 00:17:22,949
one of my favorite features actually

437
00:17:20,789 --> 00:17:24,809
like this data feature basically you can

438
00:17:22,949 --> 00:17:27,419
extract data from different files of the

439
00:17:24,809 --> 00:17:29,668
filesystem and they end up in the report

440
00:17:27,419 --> 00:17:31,799
and you can like get really really

441
00:17:29,669 --> 00:17:34,409
awesome awesome visibility into your

442
00:17:31,799 --> 00:17:38,000
into your firmware and you can do like

443
00:17:34,409 --> 00:17:41,680
very interesting post-processing with it

444
00:17:38,000 --> 00:17:43,930
this is like a very simple exam

445
00:17:41,680 --> 00:17:46,030
if you go from top to bottom really

446
00:17:43,930 --> 00:17:49,030
quick see like yeah this was like a next

447
00:17:46,030 --> 00:17:51,550
file system we have the full name of the

448
00:17:49,030 --> 00:17:53,170
image we have to digest and then you see

449
00:17:51,550 --> 00:17:56,440
like data for example there's like build

450
00:17:53,170 --> 00:17:58,090
information versioning information and

451
00:17:56,440 --> 00:18:04,720
some informational structures and we

452
00:17:58,090 --> 00:18:07,629
have like a few fail checks so if we if

453
00:18:04,720 --> 00:18:11,230
you go go and like start building a

454
00:18:07,630 --> 00:18:13,240
configuration that would be like just in

455
00:18:11,230 --> 00:18:15,130
the global config space if you have like

456
00:18:13,240 --> 00:18:17,700
a file system type some options for that

457
00:18:15,130 --> 00:18:20,050
and you can select basically your driver

458
00:18:17,700 --> 00:18:21,940
and all of the file system drivers are

459
00:18:20,050 --> 00:18:25,090
just like implemented using like common

460
00:18:21,940 --> 00:18:26,290
like open source tools so you don't

461
00:18:25,090 --> 00:18:28,860
actually doubt actually have like

462
00:18:26,290 --> 00:18:31,629
implement like file system parsers

463
00:18:28,860 --> 00:18:33,100
internally every every check is run

464
00:18:31,630 --> 00:18:34,330
against like this abstract file so

465
00:18:33,100 --> 00:18:38,500
basically we have like a virtual file

466
00:18:34,330 --> 00:18:39,820
system inside those tool so checks don't

467
00:18:38,500 --> 00:18:41,860
really need to know anything about the

468
00:18:39,820 --> 00:18:44,050
file system type and it's also really

469
00:18:41,860 --> 00:18:45,820
extremely easy to add like new checks so

470
00:18:44,050 --> 00:18:50,190
this engine because you don't have to

471
00:18:45,820 --> 00:18:50,189
deal with anything but an abstract file

472
00:18:51,360 --> 00:18:57,040
yeah so we normally would start with

473
00:18:54,850 --> 00:18:59,409
like those like very global checks it's

474
00:18:57,040 --> 00:19:01,809
like very easy to understand so say flag

475
00:18:59,410 --> 00:19:05,559
any Suad file flag any world writable

476
00:19:01,809 --> 00:19:08,110
file then you can say like files on the

477
00:19:05,559 --> 00:19:10,540
sandwich only it should only be owned by

478
00:19:08,110 --> 00:19:12,399
this following um user and GID

479
00:19:10,540 --> 00:19:14,889
or I said and you suckers have like a

480
00:19:12,400 --> 00:19:16,390
list of bad files so like hey in this

481
00:19:14,890 --> 00:19:18,490
production framer you probably don't

482
00:19:16,390 --> 00:19:21,640
want to include like things like TCP

483
00:19:18,490 --> 00:19:24,309
dump or whatever like fits into like

484
00:19:21,640 --> 00:19:26,320
whatever you think doesn't need to be

485
00:19:24,309 --> 00:19:30,490
there so it's like a very easy to

486
00:19:26,320 --> 00:19:33,100
understand initial initial configuration

487
00:19:30,490 --> 00:19:35,530
and then we can model things like direct

488
00:19:33,100 --> 00:19:37,659
like the metadata off every file for

489
00:19:35,530 --> 00:19:39,040
every file that you want to check you

490
00:19:37,660 --> 00:19:41,740
don't have to do that for every file of

491
00:19:39,040 --> 00:19:44,260
course you can just like say hey this

492
00:19:41,740 --> 00:19:47,590
file should be owned by this user it

493
00:19:44,260 --> 00:19:51,250
could should not be empty it should be

494
00:19:47,590 --> 00:19:54,879
like this mod so you can model like key

495
00:19:51,250 --> 00:19:55,559
key key security relevant files and like

496
00:19:54,880 --> 00:19:57,499
the

497
00:19:55,559 --> 00:19:59,428
example which I put in because of the

498
00:19:57,499 --> 00:20:03,120
the slide that I showed you in the

499
00:19:59,429 --> 00:20:05,580
beginning we're like um etc' shadow was

500
00:20:03,120 --> 00:20:09,570
world readable and is that something

501
00:20:05,580 --> 00:20:11,399
like very easy like something like that

502
00:20:09,570 --> 00:20:13,168
can very easily slip like somebody

503
00:20:11,399 --> 00:20:16,139
changed like permissions on you et Cie

504
00:20:13,169 --> 00:20:20,999
directory and it's like something very

505
00:20:16,139 --> 00:20:24,559
easy to catch five content is basically

506
00:20:20,999 --> 00:20:26,970
the main the main option to like analyze

507
00:20:24,559 --> 00:20:28,529
actually the content of your file and we

508
00:20:26,970 --> 00:20:31,200
have build many different modes so you

509
00:20:28,529 --> 00:20:35,879
can like say apply those reg X if it

510
00:20:31,200 --> 00:20:37,590
matches or not matches then you look

511
00:20:35,879 --> 00:20:39,629
like that or you can say hey we want

512
00:20:37,590 --> 00:20:42,539
this very specific file to always be

513
00:20:39,629 --> 00:20:43,889
this this very specific have this very

514
00:20:42,539 --> 00:20:46,110
specific content we do that by just

515
00:20:43,889 --> 00:20:49,320
saying this file has to has this like

516
00:20:46,110 --> 00:20:50,879
which are 256 digests and like Jason

517
00:20:49,320 --> 00:20:53,100
becomes more popular so we can actually

518
00:20:50,879 --> 00:20:55,350
also native he understand Jason file so

519
00:20:53,100 --> 00:20:57,059
you can actually say and in this

520
00:20:55,350 --> 00:20:58,350
specific file there's a Jason of

521
00:20:57,059 --> 00:21:01,200
structure that looks like this and this

522
00:20:58,350 --> 00:21:03,240
specific value has to like correspond to

523
00:21:01,200 --> 00:21:05,220
like your configured value and you can

524
00:21:03,240 --> 00:21:07,470
just like run an external script so if

525
00:21:05,220 --> 00:21:10,249
you want to like have some very specific

526
00:21:07,470 --> 00:21:13,830
the thing you want to do you just

527
00:21:10,249 --> 00:21:18,240
configure and run this run a script and

528
00:21:13,830 --> 00:21:19,980
whatever the script outputs is what's

529
00:21:18,240 --> 00:21:22,110
happened so there's like a few examples

530
00:21:19,980 --> 00:21:23,700
so the first if you go from top to

531
00:21:22,110 --> 00:21:26,399
bottom the first this was like yeah you

532
00:21:23,700 --> 00:21:28,529
want to make sure a specific file system

533
00:21:26,399 --> 00:21:30,869
that's mounted but none executable very

534
00:21:28,529 --> 00:21:34,110
easy check so you just apply it was like

535
00:21:30,869 --> 00:21:36,269
regular expression if it met it was all

536
00:21:34,110 --> 00:21:38,969
good you go to the next one it's like

537
00:21:36,269 --> 00:21:41,460
hey you're here over-the-air updates

538
00:21:38,970 --> 00:21:43,980
you're already Aeron certificates so

539
00:21:41,460 --> 00:21:46,830
like your your your public keys for and

540
00:21:43,980 --> 00:21:48,720
and certificates for like updates this

541
00:21:46,830 --> 00:21:51,330
file should always be this with this

542
00:21:48,720 --> 00:21:54,119
specific digest like very very specific

543
00:21:51,330 --> 00:21:56,309
version of a file and then if you go to

544
00:21:54,119 --> 00:21:58,830
next one you CEO of you want we want to

545
00:21:56,309 --> 00:22:01,259
make sure we don't ship unstrap binaries

546
00:21:58,830 --> 00:22:02,730
so you can just like run JavaScript and

547
00:22:01,259 --> 00:22:04,470
as you can see like file doesn't have to

548
00:22:02,730 --> 00:22:06,360
be file you can just like hey executor

549
00:22:04,470 --> 00:22:09,570
swipe up against every file in a

550
00:22:06,360 --> 00:22:12,629
directory and you say like yeah that's

551
00:22:09,570 --> 00:22:15,780
oil is not is not stripped and then

552
00:22:12,630 --> 00:22:19,080
other things like in just like hey we

553
00:22:15,780 --> 00:22:22,710
want to make sure you have a proper like

554
00:22:19,080 --> 00:22:25,169
diem Barret iki configured it was like

555
00:22:22,710 --> 00:22:26,910
just a few examples of what you can can

556
00:22:25,170 --> 00:22:29,520
do with this and those kinds of rules

557
00:22:26,910 --> 00:22:34,560
are like extremely easy to like build

558
00:22:29,520 --> 00:22:37,170
and an experiment that yeah and then the

559
00:22:34,560 --> 00:22:38,520
X data extraction that I talked about

560
00:22:37,170 --> 00:22:40,110
basically has almost the same

561
00:22:38,520 --> 00:22:41,760
functionality you can like have a

562
00:22:40,110 --> 00:22:43,620
regular expression which capture group

563
00:22:41,760 --> 00:22:47,670
and you can select extract me this part

564
00:22:43,620 --> 00:22:49,500
from this file again natively read JSON

565
00:22:47,670 --> 00:22:51,720
I can again run a script and use the

566
00:22:49,500 --> 00:22:54,030
output and then you can really say like

567
00:22:51,720 --> 00:22:58,100
yeah get for example get the version and

568
00:22:54,030 --> 00:23:00,480
put it into our data output s version

569
00:22:58,100 --> 00:23:04,860
and then you can in the end then you can

570
00:23:00,480 --> 00:23:06,900
read the report you actually see what

571
00:23:04,860 --> 00:23:09,840
are the outputs of your checks to like

572
00:23:06,900 --> 00:23:11,790
what is actually what is like the likes

573
00:23:09,840 --> 00:23:13,560
a version number or bill type tells you

574
00:23:11,790 --> 00:23:18,060
know and that's like really really easy

575
00:23:13,560 --> 00:23:20,730
for visibility things yeah so like every

576
00:23:18,060 --> 00:23:22,470
time every time those tool runs we

577
00:23:20,730 --> 00:23:24,720
generate something that we call a file

578
00:23:22,470 --> 00:23:28,790
tree which is basic just a gigantic list

579
00:23:24,720 --> 00:23:31,260
of all files with all permissions owners

580
00:23:28,790 --> 00:23:35,639
this looks something like that so like I

581
00:23:31,260 --> 00:23:37,200
will generate a gigantic files and it

582
00:23:35,640 --> 00:23:38,970
has like every little detail about your

583
00:23:37,200 --> 00:23:40,290
file system and the nice thing is when

584
00:23:38,970 --> 00:23:43,230
you run it when you get a new firmware

585
00:23:40,290 --> 00:23:45,420
version or unlike new revision you can

586
00:23:43,230 --> 00:23:48,000
just like compare those two files and

587
00:23:45,420 --> 00:23:49,830
you say like hey there is some new files

588
00:23:48,000 --> 00:23:52,950
or some files were deleted or files

589
00:23:49,830 --> 00:23:54,899
changed permissions it sounds like a

590
00:23:52,950 --> 00:23:59,220
very easy very easy way to just like

591
00:23:54,900 --> 00:24:00,780
keep track of changes over time yeah as

592
00:23:59,220 --> 00:24:02,790
I said yeah you can also just like run

593
00:24:00,780 --> 00:24:06,330
scripts so if you want to have a little

594
00:24:02,790 --> 00:24:08,220
bit more custom checks the firmware

595
00:24:06,330 --> 00:24:11,820
analyzable just like extract that file

596
00:24:08,220 --> 00:24:13,110
from a directory and extract the file

597
00:24:11,820 --> 00:24:14,790
and dump in a temp directory in those

598
00:24:13,110 --> 00:24:16,649
reruns again set so the script also

599
00:24:14,790 --> 00:24:18,510
doesn't have to know anything about the

600
00:24:16,650 --> 00:24:22,710
underlying file system and then you can

601
00:24:18,510 --> 00:24:23,020
like build cool things like yeah detect

602
00:24:22,710 --> 00:24:24,460
like

603
00:24:23,020 --> 00:24:28,090
files were stripped or like if they're

604
00:24:24,460 --> 00:24:30,430
like Depp or ASL are enabled you can see

605
00:24:28,090 --> 00:24:31,689
like yeah it does maybe contain private

606
00:24:30,430 --> 00:24:34,270
keys or say you have an android device

607
00:24:31,690 --> 00:24:35,770
and you can basic pull out every apk and

608
00:24:34,270 --> 00:24:38,680
just like run your custom checker

609
00:24:35,770 --> 00:24:41,220
against it so there's a lot of different

610
00:24:38,680 --> 00:24:44,980
things when what you can do with this

611
00:24:41,220 --> 00:24:47,290
yeah so normally when when when the tool

612
00:24:44,980 --> 00:24:49,420
runs and you have a check that would and

613
00:24:47,290 --> 00:24:51,010
the check fails then you it produces

614
00:24:49,420 --> 00:24:52,540
like what we call an offender basically

615
00:24:51,010 --> 00:24:55,030
say this file should have this file

616
00:24:52,540 --> 00:24:58,389
permission it doesn't we say that's

617
00:24:55,030 --> 00:25:00,490
that's a bad bad thing and there's this

618
00:24:58,390 --> 00:25:02,460
thing that we call informational it's

619
00:25:00,490 --> 00:25:06,250
basically non failing non failing

620
00:25:02,460 --> 00:25:08,850
extracted information and it's just like

621
00:25:06,250 --> 00:25:11,800
to like see see what's there and

622
00:25:08,850 --> 00:25:13,959
sometimes so say your entry like in

623
00:25:11,800 --> 00:25:15,340
production and you want to like add more

624
00:25:13,960 --> 00:25:17,050
check so maybe you don't want to like

625
00:25:15,340 --> 00:25:19,120
immediately make it a failing check so

626
00:25:17,050 --> 00:25:21,070
you can set basically every test you can

627
00:25:19,120 --> 00:25:23,350
just say yeah to set it to informational

628
00:25:21,070 --> 00:25:25,980
only and then like instead of failing it

629
00:25:23,350 --> 00:25:27,969
would just like give you an

630
00:25:25,980 --> 00:25:30,570
informational entry and it's like really

631
00:25:27,970 --> 00:25:36,040
nice to like test out new new checks

632
00:25:30,570 --> 00:25:38,679
yeah yeah so now that we have like all

633
00:25:36,040 --> 00:25:41,680
of the different checks configured yeah

634
00:25:38,680 --> 00:25:43,960
the post processing is basically where

635
00:25:41,680 --> 00:25:45,880
you say like okay we run it we extract

636
00:25:43,960 --> 00:25:47,650
the firmware we run the tool we get

637
00:25:45,880 --> 00:25:51,130
reports for each different file system

638
00:25:47,650 --> 00:25:53,230
and then we can maybe do some checks on

639
00:25:51,130 --> 00:25:58,630
top of like extract the data or combine

640
00:25:53,230 --> 00:26:01,600
just like the reports and yeah you can

641
00:25:58,630 --> 00:26:03,100
do you can do stuff like compare compare

642
00:26:01,600 --> 00:26:05,709
like values across different file

643
00:26:03,100 --> 00:26:08,139
systems you can do like maybe statistic

644
00:26:05,710 --> 00:26:09,610
and analysis of like file types and so

645
00:26:08,140 --> 00:26:13,600
on like there's a lot of different

646
00:26:09,610 --> 00:26:17,169
things you can do here yeah okay

647
00:26:13,600 --> 00:26:20,260
so I'm gonna walk through like an

648
00:26:17,170 --> 00:26:22,480
example and I really just wanted to like

649
00:26:20,260 --> 00:26:25,120
find like a random user debug Android

650
00:26:22,480 --> 00:26:27,070
firmware like we don't use this device I

651
00:26:25,120 --> 00:26:28,389
actually never see salt I saw this

652
00:26:27,070 --> 00:26:30,939
device I was just like hey I want to

653
00:26:28,390 --> 00:26:33,130
have some android framework that is like

654
00:26:30,940 --> 00:26:34,660
not a production build so we can go

655
00:26:33,130 --> 00:26:36,400
through and like show a bunch of

656
00:26:34,660 --> 00:26:38,650
interesting things and as

657
00:26:36,400 --> 00:26:41,440
it's the demo for the to not really we

658
00:26:38,650 --> 00:26:44,679
didn't try to find bugs or anything so

659
00:26:41,440 --> 00:26:46,660
in the beginning your check tool

660
00:26:44,679 --> 00:26:48,280
basically has to like do the unpacking

661
00:26:46,660 --> 00:26:49,840
and there's a lots of different tools

662
00:26:48,280 --> 00:26:52,120
for Android we can just like unpack and

663
00:26:49,840 --> 00:26:53,799
reconstruct those sparse images so get

664
00:26:52,120 --> 00:26:57,789
just like standard file system images

665
00:26:53,799 --> 00:27:00,010
back so you got like all of the all of

666
00:26:57,789 --> 00:27:01,720
the different images and if you know

667
00:27:00,010 --> 00:27:04,690
Android you know like boot images like

668
00:27:01,720 --> 00:27:06,820
not an actual like file system just like

669
00:27:04,690 --> 00:27:08,620
it's a combination of the kernel and

670
00:27:06,820 --> 00:27:10,990
like a Ram Dass so you also have to

671
00:27:08,620 --> 00:27:13,989
extract that and dump it in a directory

672
00:27:10,990 --> 00:27:15,460
and then you have to go through

673
00:27:13,990 --> 00:27:18,690
basically and make it custom

674
00:27:15,460 --> 00:27:21,120
configuration for every file system

675
00:27:18,690 --> 00:27:25,120
we're gonna like quickly walk through

676
00:27:21,120 --> 00:27:26,709
two of those so basically say okay so

677
00:27:25,120 --> 00:27:28,559
this is Android so if you want to like

678
00:27:26,710 --> 00:27:31,299
definitely check for SSL in our things

679
00:27:28,559 --> 00:27:34,360
there are certain Suad binaries which

680
00:27:31,299 --> 00:27:36,039
you want to write list we know a common

681
00:27:34,360 --> 00:27:38,949
new IDs on android it's like one

682
00:27:36,039 --> 00:27:41,379
thousand one two thousand and so on we

683
00:27:38,950 --> 00:27:46,539
want to like have all those well you see

684
00:27:41,380 --> 00:27:49,090
we don't want to have su installed where

685
00:27:46,539 --> 00:27:52,710
we want to make sure the specific OTA

686
00:27:49,090 --> 00:27:55,270
certs are installed and we want an

687
00:27:52,710 --> 00:27:58,240
extract a bunch of like information say

688
00:27:55,270 --> 00:28:00,158
like Android properties and that's

689
00:27:58,240 --> 00:28:02,080
another feature I'm gonna show you a

690
00:28:00,159 --> 00:28:04,240
little bit later it's maybe basically

691
00:28:02,080 --> 00:28:05,500
you can write checks once and then it

692
00:28:04,240 --> 00:28:10,150
just include them into like other

693
00:28:05,500 --> 00:28:12,070
configuration here if the for like is a

694
00:28:10,150 --> 00:28:13,330
boot image that since there's something

695
00:28:12,070 --> 00:28:14,918
that's actually not a file system we

696
00:28:13,330 --> 00:28:17,289
just extracted a bunch of files of those

697
00:28:14,919 --> 00:28:19,390
like blob into a directory so you say

698
00:28:17,289 --> 00:28:22,120
like this is of type directory FS so

699
00:28:19,390 --> 00:28:23,890
we'll just from analyzer will just read

700
00:28:22,120 --> 00:28:28,299
the the root of that directory as like a

701
00:28:23,890 --> 00:28:30,100
filesystem root there and then there's

702
00:28:28,299 --> 00:28:37,539
you have a bunch of checks again and

703
00:28:30,100 --> 00:28:42,189
yeah and a bunch of data extracts yeah

704
00:28:37,539 --> 00:28:43,570
so I yeah and if you now look into like

705
00:28:42,190 --> 00:28:45,330
some some specific Android

706
00:28:43,570 --> 00:28:47,710
configurations

707
00:28:45,330 --> 00:28:49,850
it's basically what you want in like a

708
00:28:47,710 --> 00:28:51,590
production build on Android you base

709
00:28:49,850 --> 00:28:53,299
the a production build is called the

710
00:28:51,590 --> 00:28:55,970
user build so you want to have your our

711
00:28:53,299 --> 00:28:58,460
bill type equals user and you wanna have

712
00:28:55,970 --> 00:29:03,320
like our secure and our debuggable set

713
00:28:58,460 --> 00:29:07,039
so production values and you could very

714
00:29:03,320 --> 00:29:09,379
like write write these some smaller

715
00:29:07,039 --> 00:29:11,030
these checks and we actually like that's

716
00:29:09,380 --> 00:29:12,919
part of the open source release we just

717
00:29:11,030 --> 00:29:14,270
have like different checks for like

718
00:29:12,919 --> 00:29:15,679
different kinds of Android builds but

719
00:29:14,270 --> 00:29:18,410
you can just like include them in a

720
00:29:15,679 --> 00:29:20,510
configuration file and then we of course

721
00:29:18,410 --> 00:29:22,460
want to extra extract all all the

722
00:29:20,510 --> 00:29:25,730
different properties for example the

723
00:29:22,460 --> 00:29:29,470
build type build tags build flavor and

724
00:29:25,730 --> 00:29:33,860
something like the security patch level

725
00:29:29,470 --> 00:29:36,530
yeah and so then you just like run it

726
00:29:33,860 --> 00:29:38,000
you have like this check strip does like

727
00:29:36,530 --> 00:29:42,110
all of the legwork for you like and

728
00:29:38,000 --> 00:29:44,679
extracts the file system images

729
00:29:42,110 --> 00:29:47,658
reassembles all of the different parts

730
00:29:44,679 --> 00:29:50,780
um untaxed boots and then it just like

731
00:29:47,659 --> 00:29:53,659
runs from analyzer on all the individual

732
00:29:50,780 --> 00:29:58,340
parts and generates a final report in

733
00:29:53,659 --> 00:30:01,280
this case the check fails because this

734
00:29:58,340 --> 00:30:03,770
file azzam as a user debug build but we

735
00:30:01,280 --> 00:30:05,720
were like checking for user pods and so

736
00:30:03,770 --> 00:30:07,730
if you just go through the report you

737
00:30:05,720 --> 00:30:09,860
just like see like very easy and the top

738
00:30:07,730 --> 00:30:12,440
is just like the firmware the file name

739
00:30:09,860 --> 00:30:14,840
of the firmer and then you see just all

740
00:30:12,440 --> 00:30:16,520
the different sub sub components like

741
00:30:14,840 --> 00:30:18,559
the boot image the system image the

742
00:30:16,520 --> 00:30:20,809
vendor image and you see like every one

743
00:30:18,559 --> 00:30:22,908
of them contains offenders so if you dig

744
00:30:20,809 --> 00:30:25,270
in a little bit closer and look at like

745
00:30:22,909 --> 00:30:27,919
the offenders just like for one device

746
00:30:25,270 --> 00:30:30,039
you see like the build properties

747
00:30:27,919 --> 00:30:32,750
indicated this is not a user world and

748
00:30:30,039 --> 00:30:36,620
OTA starts as a different file than we

749
00:30:32,750 --> 00:30:39,230
actually wanted and files like expand su

750
00:30:36,620 --> 00:30:41,030
exists which we didn't do not like one

751
00:30:39,230 --> 00:30:44,720
but she said like this is not a not a

752
00:30:41,030 --> 00:30:46,760
file that you want and then the the data

753
00:30:44,720 --> 00:30:50,539
so we said like hey extract all of those

754
00:30:46,760 --> 00:30:52,580
interesting pieces of proper proper T's

755
00:30:50,539 --> 00:30:56,000
and then you see like immediately

756
00:30:52,580 --> 00:30:57,649
anybody who ever like saw like looked

757
00:30:56,000 --> 00:30:58,940
into like android firmware you see

758
00:30:57,650 --> 00:31:00,169
everything you really need to know you

759
00:30:58,940 --> 00:31:02,840
see the build finger

760
00:31:00,169 --> 00:31:05,149
the device name the security patch level

761
00:31:02,840 --> 00:31:07,330
so you can get a very easy understanding

762
00:31:05,149 --> 00:31:10,549
of what you're looking at

763
00:31:07,330 --> 00:31:16,070
yeah on like test keys and yeah it's

764
00:31:10,549 --> 00:31:19,129
like it makes makes things very easy so

765
00:31:16,070 --> 00:31:21,080
in this case the result is usually

766
00:31:19,129 --> 00:31:23,059
debugger built so it failed the test

767
00:31:21,080 --> 00:31:26,178
because you configure it to take it for

768
00:31:23,059 --> 00:31:28,639
a user world and with one really a one

769
00:31:26,179 --> 00:31:30,379
lock it's like you see everything so

770
00:31:28,639 --> 00:31:32,629
it's like really awesome visibility you

771
00:31:30,379 --> 00:31:34,549
see like the fail checks and you see all

772
00:31:32,629 --> 00:31:38,830
of the versioning build flavors and so

773
00:31:34,549 --> 00:31:43,158
on so that I think that's pretty awesome

774
00:31:38,830 --> 00:31:44,840
okay now we have the tool we have we

775
00:31:43,159 --> 00:31:46,730
know how it works we know what we need

776
00:31:44,840 --> 00:31:49,100
to build for like infrastructure around

777
00:31:46,730 --> 00:31:54,070
it but the tool itself like if you don't

778
00:31:49,100 --> 00:31:54,070
really deploy it in here and you're in

779
00:31:54,519 --> 00:31:59,989
deployed like in your company it's like

780
00:31:57,379 --> 00:32:02,209
not it's not really yeah like running it

781
00:31:59,989 --> 00:32:04,100
manually is like only it's like not even

782
00:32:02,210 --> 00:32:05,570
huh you don't even get halfway we really

783
00:32:04,100 --> 00:32:08,359
want to have it like in an automated way

784
00:32:05,570 --> 00:32:10,480
so I'm gonna talk about what can you do

785
00:32:08,359 --> 00:32:13,580
like in a development environment

786
00:32:10,480 --> 00:32:16,940
production signing and so on so in

787
00:32:13,580 --> 00:32:19,220
development really the goal is to

788
00:32:16,940 --> 00:32:20,499
prevent like development moving forward

789
00:32:19,220 --> 00:32:23,090
with like bad or incomplete information

790
00:32:20,499 --> 00:32:24,889
because that looks really want to do the

791
00:32:23,090 --> 00:32:27,320
right thing but they are not security

792
00:32:24,889 --> 00:32:29,209
experts so you want does if you run it

793
00:32:27,320 --> 00:32:31,730
at every build you can provide very easy

794
00:32:29,210 --> 00:32:33,559
feedback drain development and you just

795
00:32:31,730 --> 00:32:35,629
have that part of a part of your unit

796
00:32:33,559 --> 00:32:38,470
test so like if your CI involves like

797
00:32:35,629 --> 00:32:40,639
make tests you also run this at the end

798
00:32:38,470 --> 00:32:42,470
and then it's like you can make

799
00:32:40,639 --> 00:32:46,428
developers very easily where because

800
00:32:42,470 --> 00:32:50,859
Segarra you can't you can have XA SOE

801
00:32:46,429 --> 00:32:55,279
Suad binaries in a specific like device

802
00:32:50,859 --> 00:32:57,259
so some examples so for example like

803
00:32:55,279 --> 00:33:00,230
SELinux really blade breaks assumptions

804
00:32:57,259 --> 00:33:02,509
about file access missing on the missing

805
00:33:00,230 --> 00:33:04,730
label or the wrong labels basically yeah

806
00:33:02,509 --> 00:33:07,039
this should be like well my if my file

807
00:33:04,730 --> 00:33:09,679
is world readable but why can't I read

808
00:33:07,039 --> 00:33:12,230
it of course because you have selinux so

809
00:33:09,679 --> 00:33:13,030
it's like one very easy check that you

810
00:33:12,230 --> 00:33:15,790
can do and

811
00:33:13,030 --> 00:33:19,389
like stuff like that was like very easy

812
00:33:15,790 --> 00:33:22,510
and like to help you to like unblock

813
00:33:19,390 --> 00:33:24,970
unlock development without like breaking

814
00:33:22,510 --> 00:33:26,910
breaking security or file file

815
00:33:24,970 --> 00:33:30,010
permission and ownership it's like yeah

816
00:33:26,910 --> 00:33:32,290
okay your software just like wants to

817
00:33:30,010 --> 00:33:33,820
read a file and so the software doesn't

818
00:33:32,290 --> 00:33:37,210
care that the file is like world

819
00:33:33,820 --> 00:33:39,040
writable right but the security person

820
00:33:37,210 --> 00:33:41,710
cares about it so you can very easy like

821
00:33:39,040 --> 00:33:43,810
configure configures the script and I

822
00:33:41,710 --> 00:33:46,330
configure this check and then see I said

823
00:33:43,810 --> 00:33:47,889
again everything works fine but you

824
00:33:46,330 --> 00:33:51,100
should change like the permissions on

825
00:33:47,890 --> 00:33:54,070
this fight probably and basically yeah

826
00:33:51,100 --> 00:33:57,639
that's just like a screen shirt from

827
00:33:54,070 --> 00:33:59,830
yeah so basically you build it you put

828
00:33:57,640 --> 00:34:03,310
it into your CI and then you just like

829
00:33:59,830 --> 00:34:04,960
see output like this and you might want

830
00:34:03,310 --> 00:34:06,399
to disable like certain kind of checks

831
00:34:04,960 --> 00:34:08,679
for example you don't need to like

832
00:34:06,400 --> 00:34:10,389
calculate the digests of like every file

833
00:34:08,679 --> 00:34:11,980
system image and CI because you know P

834
00:34:10,389 --> 00:34:13,929
really want to ship it so that doesn't

835
00:34:11,980 --> 00:34:17,649
really help you but it would slow you

836
00:34:13,929 --> 00:34:20,020
down if you like have it on because you

837
00:34:17,649 --> 00:34:23,080
really just want to have like all of the

838
00:34:20,020 --> 00:34:27,100
all of the checks but yeah nothing that

839
00:34:23,080 --> 00:34:31,120
you really need to record over time yeah

840
00:34:27,100 --> 00:34:33,460
so production signing so if n what

841
00:34:31,120 --> 00:34:35,109
happens when you sign a frame rebels

842
00:34:33,460 --> 00:34:37,449
like your production he set basic means

843
00:34:35,110 --> 00:34:41,020
it will run on every device of that

844
00:34:37,449 --> 00:34:42,879
specific class he ever shipped and you

845
00:34:41,020 --> 00:34:45,250
really don't want to like sign like

846
00:34:42,880 --> 00:34:47,980
something that like that it's insecure

847
00:34:45,250 --> 00:34:50,739
it might cause huge damage and use

848
00:34:47,980 --> 00:34:52,389
problems of course like you can have

849
00:34:50,739 --> 00:34:54,969
things like roll break protection so you

850
00:34:52,389 --> 00:34:56,649
can make a fixed version and then from

851
00:34:54,969 --> 00:35:00,790
that point on you can never go back

852
00:34:56,649 --> 00:35:04,509
but everything really depends on on like

853
00:35:00,790 --> 00:35:06,190
how your products work so but you really

854
00:35:04,510 --> 00:35:09,400
want to do like production signing after

855
00:35:06,190 --> 00:35:11,550
they have completed testing development

856
00:35:09,400 --> 00:35:15,270
and everything that's basic the final

857
00:35:11,550 --> 00:35:17,860
stamp of approval before you ship and

858
00:35:15,270 --> 00:35:19,540
yeah what what are things you might want

859
00:35:17,860 --> 00:35:20,950
to do so you want to really make sure

860
00:35:19,540 --> 00:35:22,840
you have a production build you have

861
00:35:20,950 --> 00:35:25,240
want to have your write certificates you

862
00:35:22,840 --> 00:35:25,590
want to have all of your like hardening

863
00:35:25,240 --> 00:35:27,660
fee

864
00:35:25,590 --> 00:35:28,800
you don't want to have like development

865
00:35:27,660 --> 00:35:30,420
tools on it anymore

866
00:35:28,800 --> 00:35:33,870
you want to have the aqui production

867
00:35:30,420 --> 00:35:35,910
configuration files so basically what

868
00:35:33,870 --> 00:35:37,770
you can do on your production signing

869
00:35:35,910 --> 00:35:40,080
server you have a pre state it's

870
00:35:37,770 --> 00:35:44,400
basically this firmware analyzer you

871
00:35:40,080 --> 00:35:46,740
submit your firm final firmware image to

872
00:35:44,400 --> 00:35:49,890
the signing to the signing server the

873
00:35:46,740 --> 00:35:52,890
server like runs once the checks and if

874
00:35:49,890 --> 00:35:54,870
none of the checks fail and goes on and

875
00:35:52,890 --> 00:35:59,310
like signs the firmware and you get you

876
00:35:54,870 --> 00:36:02,370
get it back if checks fail then you say

877
00:35:59,310 --> 00:36:04,350
like yeah we can't sign this and you get

878
00:36:02,370 --> 00:36:06,120
like you can take the report and maybe

879
00:36:04,350 --> 00:36:09,990
send it back to the person who is who

880
00:36:06,120 --> 00:36:12,000
sign who like try to sign it it sounds

881
00:36:09,990 --> 00:36:16,259
like a very easy like pre step to like

882
00:36:12,000 --> 00:36:20,280
prevent very simple mistakes that could

883
00:36:16,260 --> 00:36:23,490
have like a really bad that impact so

884
00:36:20,280 --> 00:36:25,920
that's like a really nice thing you can

885
00:36:23,490 --> 00:36:28,770
also do acceptance testing so say you

886
00:36:25,920 --> 00:36:31,320
buy your vices from the third party and

887
00:36:28,770 --> 00:36:32,670
then probably you do like some initial

888
00:36:31,320 --> 00:36:35,670
acceptance testing where you figure out

889
00:36:32,670 --> 00:36:37,860
how everything works you find out what's

890
00:36:35,670 --> 00:36:39,770
good what's a good stage you go forwards

891
00:36:37,860 --> 00:36:42,180
and backwards you salute your supplier

892
00:36:39,770 --> 00:36:44,070
and at some point you create like this

893
00:36:42,180 --> 00:36:46,290
configuration file we can capture like a

894
00:36:44,070 --> 00:36:50,250
known good state and every time you get

895
00:36:46,290 --> 00:36:53,130
like a revision you just reanalyze that

896
00:36:50,250 --> 00:36:57,030
image to see if anything anything

897
00:36:53,130 --> 00:36:58,200
changed that you might want to know and

898
00:36:57,030 --> 00:37:02,010
of course you should like

899
00:36:58,200 --> 00:37:03,210
extract as much data as possible so you

900
00:37:02,010 --> 00:37:04,800
can like actually like have like a

901
00:37:03,210 --> 00:37:06,720
guardian record so you know also

902
00:37:04,800 --> 00:37:08,490
automatic create like a record for like

903
00:37:06,720 --> 00:37:10,770
from where every frame where you get you

904
00:37:08,490 --> 00:37:12,990
can create those like big gigantic JSON

905
00:37:10,770 --> 00:37:16,740
blob and you can just keep that for your

906
00:37:12,990 --> 00:37:21,379
record and yeah you can find find

907
00:37:16,740 --> 00:37:24,149
changes before before like the bite you

908
00:37:21,380 --> 00:37:26,970
and it's and something like that it's

909
00:37:24,150 --> 00:37:29,520
very nice say say you have the service

910
00:37:26,970 --> 00:37:31,410
your supply upload the firmware you get

911
00:37:29,520 --> 00:37:33,540
the report which goes into your database

912
00:37:31,410 --> 00:37:38,160
you get some email notification and you

913
00:37:33,540 --> 00:37:39,279
maybe see like some new files or some

914
00:37:38,160 --> 00:37:41,288
changes and you can vary

915
00:37:39,279 --> 00:37:43,239
and circle back but that's a player and

916
00:37:41,289 --> 00:37:45,219
say hey we found you did this and listen

917
00:37:43,239 --> 00:37:47,609
this was this intended please tell me

918
00:37:45,219 --> 00:37:50,499
more and without like going through like

919
00:37:47,609 --> 00:37:54,400
doing any of this like manually just

920
00:37:50,499 --> 00:37:55,569
like it is it is just runs and you get

921
00:37:54,400 --> 00:37:57,699
like all of this like really awesome

922
00:37:55,569 --> 00:38:00,579
information and it also not only like

923
00:37:57,699 --> 00:38:03,369
gives you the insight it's just like

924
00:38:00,579 --> 00:38:08,319
also so much faster than like doing this

925
00:38:03,369 --> 00:38:10,059
manually and yeah if and you don't think

926
00:38:08,319 --> 00:38:14,558
you have like only like one like one

927
00:38:10,059 --> 00:38:16,269
device say you have 10 devices 20 that

928
00:38:14,559 --> 00:38:22,929
you maybe have to take care of like this

929
00:38:16,269 --> 00:38:25,058
is like a huge huge benefit yeah so yeah

930
00:38:22,929 --> 00:38:26,890
yeah basically that's I reading I

931
00:38:25,059 --> 00:38:28,839
already cover that so you can like it's

932
00:38:26,890 --> 00:38:31,689
really easy to go like too fast the

933
00:38:28,839 --> 00:38:33,459
iterate also with external people and

934
00:38:31,689 --> 00:38:36,699
you get really good like visibility into

935
00:38:33,459 --> 00:38:37,928
like from revisions and of course you

936
00:38:36,699 --> 00:38:39,729
can also do like kind of vendor

937
00:38:37,929 --> 00:38:41,979
assessments say you buy some device of

938
00:38:39,729 --> 00:38:46,118
the shelf and you want to like do some

939
00:38:41,979 --> 00:38:47,769
some testing so this would be more like

940
00:38:46,119 --> 00:38:50,949
something that will help you like in

941
00:38:47,769 --> 00:38:52,508
some manual analysis as like one of them

942
00:38:50,949 --> 00:38:57,130
the many steps unlike something like

943
00:38:52,509 --> 00:38:59,709
vendor assessment yeah and actually so

944
00:38:57,130 --> 00:39:02,259
say so you deployed you deployed your

945
00:38:59,709 --> 00:39:06,578
tool like in front of your production

946
00:39:02,259 --> 00:39:09,459
signing and like you have firmware

947
00:39:06,579 --> 00:39:12,009
securities analysis service and they can

948
00:39:09,459 --> 00:39:13,779
and if you just like take those like

949
00:39:12,009 --> 00:39:16,419
Jason taught open was like pump it up to

950
00:39:13,779 --> 00:39:19,329
like favorite like cloud base lock

951
00:39:16,419 --> 00:39:20,828
service or maybe hosted lock service you

952
00:39:19,329 --> 00:39:22,329
can do like really really interesting

953
00:39:20,829 --> 00:39:24,519
like post-processing where you can

954
00:39:22,329 --> 00:39:27,669
automatically like trigger so I have

955
00:39:24,519 --> 00:39:29,799
triggers on different like offenders or

956
00:39:27,669 --> 00:39:32,019
informational or data points and have

957
00:39:29,799 --> 00:39:36,669
like automatic alerting reporting maybe

958
00:39:32,019 --> 00:39:38,379
create tickets and that's and that's

959
00:39:36,669 --> 00:39:39,640
like really why we have like structured

960
00:39:38,380 --> 00:39:42,729
output so you can break very easily

961
00:39:39,640 --> 00:39:45,098
integrators and to other things and it

962
00:39:42,729 --> 00:39:46,468
this like really short like a lot of a

963
00:39:45,099 --> 00:39:48,939
lot of great value

964
00:39:46,469 --> 00:39:51,159
so say you have this tool you want to

965
00:39:48,939 --> 00:39:52,450
use it basically the main the main thing

966
00:39:51,159 --> 00:39:55,420
you have to do you have to build

967
00:39:52,450 --> 00:39:57,279
and unpacking an unpacking step and

968
00:39:55,420 --> 00:39:59,319
create some config files so basically in

969
00:39:57,279 --> 00:40:01,930
your checkup I version you have to like

970
00:39:59,319 --> 00:40:05,670
build a firmware and hacker and maybe

971
00:40:01,930 --> 00:40:08,230
add some post-processing and so on

972
00:40:05,670 --> 00:40:10,109
and what you really want to do here want

973
00:40:08,230 --> 00:40:12,700
to like you're going to like create like

974
00:40:10,109 --> 00:40:14,259
config files for all the different file

975
00:40:12,700 --> 00:40:17,799
system images you have to select the

976
00:40:14,260 --> 00:40:19,299
appropriate file system type start with

977
00:40:17,799 --> 00:40:21,250
something like really either like global

978
00:40:19,299 --> 00:40:25,180
check rules and the next slowly add most

979
00:40:21,250 --> 00:40:27,670
specific rules and so on and move as

980
00:40:25,180 --> 00:40:29,919
many many checks and to like until like

981
00:40:27,670 --> 00:40:32,470
checking libraries so you can like very

982
00:40:29,920 --> 00:40:34,750
easily use the same check like for your

983
00:40:32,470 --> 00:40:39,669
production and for you like development

984
00:40:34,750 --> 00:40:41,410
like analysis step yeah so yeah in order

985
00:40:39,670 --> 00:40:43,269
to do this you just like yeah basically

986
00:40:41,410 --> 00:40:46,538
you can use this like include function

987
00:40:43,269 --> 00:40:48,279
very very simple and the really nice

988
00:40:46,539 --> 00:40:50,559
part is like you can also share like

989
00:40:48,279 --> 00:40:52,750
rules with yeah you can just like open

990
00:40:50,559 --> 00:40:55,240
source like your checks and keep maybe

991
00:40:52,750 --> 00:40:58,359
somebody products product specific rules

992
00:40:55,240 --> 00:41:03,758
to yourself so it's really meant for

993
00:40:58,359 --> 00:41:05,288
like sharing yeah yeah in the future if

994
00:41:03,759 --> 00:41:09,670
you want to like just support a little

995
00:41:05,289 --> 00:41:12,279
bit some scripts like also like analyze

996
00:41:09,670 --> 00:41:14,559
kernel config some people might know

997
00:41:12,279 --> 00:41:17,769
check sack it's like a really cool Linux

998
00:41:14,559 --> 00:41:19,569
tool to like check elf binary to see if

999
00:41:17,769 --> 00:41:21,578
they're like a supportive of a SLR

1000
00:41:19,569 --> 00:41:23,200
in-depth and maybe like if you like

1001
00:41:21,579 --> 00:41:25,119
build Android device you want something

1002
00:41:23,200 --> 00:41:27,930
like an apk checker so it's like all

1003
00:41:25,119 --> 00:41:30,869
things that would be nice to have yeah

1004
00:41:27,930 --> 00:41:34,779
yeah and in conclusion you can say like

1005
00:41:30,869 --> 00:41:37,150
we would be like really like really

1006
00:41:34,779 --> 00:41:39,640
happy with us to like we've it deployed

1007
00:41:37,150 --> 00:41:42,460
it like NCI for like a major product or

1008
00:41:39,640 --> 00:41:44,339
a major like project we get really gay

1009
00:41:42,460 --> 00:41:46,539
production signing for multiple devices

1010
00:41:44,339 --> 00:41:47,859
but you always have to like understand

1011
00:41:46,539 --> 00:41:50,849
this is just like one piece of the

1012
00:41:47,859 --> 00:41:53,440
puzzle this only having this is not not

1013
00:41:50,849 --> 00:41:54,549
not so solving your like issues you

1014
00:41:53,440 --> 00:41:56,019
still have to build your security

1015
00:41:54,549 --> 00:41:57,460
controls you still have for like audit

1016
00:41:56,019 --> 00:41:59,529
code you still have to do all the other

1017
00:41:57,460 --> 00:42:02,529
work it just is just like helping you to

1018
00:41:59,529 --> 00:42:05,619
automate certain aspects and it really

1019
00:42:02,529 --> 00:42:06,890
has has shown value we caught a bunch of

1020
00:42:05,619 --> 00:42:10,770
like things

1021
00:42:06,890 --> 00:42:12,540
would have not been so nice and yeah but

1022
00:42:10,770 --> 00:42:14,730
if you caught them they never happened

1023
00:42:12,540 --> 00:42:19,829
that's that's why you have things like

1024
00:42:14,730 --> 00:42:21,569
that so yeah it's it's really if you if

1025
00:42:19,829 --> 00:42:25,319
you go back to like this initial thing

1026
00:42:21,569 --> 00:42:27,240
like you're maybe if yeah a little bit

1027
00:42:25,319 --> 00:42:28,470
unstructured like development process so

1028
00:42:27,240 --> 00:42:31,649
it's like not on structures it looks

1029
00:42:28,470 --> 00:42:34,379
like the not how you do it like things

1030
00:42:31,650 --> 00:42:37,640
just like change over time all the time

1031
00:42:34,380 --> 00:42:39,720
every day and Sikkim users though as a

1032
00:42:37,640 --> 00:42:41,700
security team want to be on top of it

1033
00:42:39,720 --> 00:42:44,819
and like make the best the most secure

1034
00:42:41,700 --> 00:42:47,430
product possible and with that like we

1035
00:42:44,819 --> 00:42:50,210
were like really it's really much harder

1036
00:42:47,430 --> 00:42:52,200
to miss like security relevant changes

1037
00:42:50,210 --> 00:42:54,630
automation of like feedback during

1038
00:42:52,200 --> 00:42:57,118
development like seems super awesome and

1039
00:42:54,630 --> 00:42:58,530
it's like yeah and it like creates a

1040
00:42:57,119 --> 00:43:01,190
little bit of confidence on a peace of

1041
00:42:58,530 --> 00:43:04,099
mind and like every day like efforts and

1042
00:43:01,190 --> 00:43:07,200
improving the security of your products

1043
00:43:04,099 --> 00:43:09,119
you know a few of my co-workers who like

1044
00:43:07,200 --> 00:43:11,970
actually like contributed code John and

1045
00:43:09,119 --> 00:43:14,250
Graziano many thanks to them and a lot

1046
00:43:11,970 --> 00:43:16,859
of lots of support from various people

1047
00:43:14,250 --> 00:43:19,440
at throughs and I had like various

1048
00:43:16,859 --> 00:43:23,369
interesting discussions over time with

1049
00:43:19,440 --> 00:43:25,290
like various various people so we have a

1050
00:43:23,369 --> 00:43:28,740
little blog post also about this we

1051
00:43:25,290 --> 00:43:32,759
describe all of the features and why and

1052
00:43:28,740 --> 00:43:34,459
how we deploy it deploy this tool the

1053
00:43:32,760 --> 00:43:38,490
open source release includes like

1054
00:43:34,460 --> 00:43:41,880
example files also a like an end to end

1055
00:43:38,490 --> 00:43:48,209
like analysis tool for like android

1056
00:43:41,880 --> 00:43:50,730
framework based on this yeah that's it

1057
00:43:48,210 --> 00:43:52,170
thank you for your time if you have any

1058
00:43:50,730 --> 00:43:56,690
questions I think we have like five

1059
00:43:52,170 --> 00:43:56,690
minutes left happy to answer anything

