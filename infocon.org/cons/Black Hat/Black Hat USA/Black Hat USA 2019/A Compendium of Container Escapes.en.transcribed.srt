1
00:00:00,030 --> 00:00:05,310
the the next talk is a compendium of

2
00:00:02,340 --> 00:00:07,350
container escapes we're in South Seas a

3
00:00:05,310 --> 00:00:15,838
B e with Brandon Edwards and Nick

4
00:00:07,350 --> 00:00:16,770
Freeman I guess we don't have them yeah

5
00:00:15,839 --> 00:00:19,680
we have mics on all right

6
00:00:16,770 --> 00:00:21,840
yeah what's good yeah thanks everybody

7
00:00:19,680 --> 00:00:23,970
for coming along this afternoon and

8
00:00:21,840 --> 00:00:27,448
thanks a black hat for having us here as

9
00:00:23,970 --> 00:00:28,919
well it's pretty good I'm Nick Brian and

10
00:00:27,449 --> 00:00:31,920
today we're gonna be talking about

11
00:00:28,920 --> 00:00:35,790
container scapes we both work I catch

12
00:00:31,920 --> 00:00:38,280
late where we both have on linux and the

13
00:00:35,790 --> 00:00:40,500
way to protect against attacks on the

14
00:00:38,280 --> 00:00:43,590
existence I didn't know we were doing

15
00:00:40,500 --> 00:00:45,390
accidents today Nick so my name is

16
00:00:43,590 --> 00:00:51,539
Brandon Edwards work with me Etta

17
00:00:45,390 --> 00:00:54,020
Capps late hacking on Linux stuff so a

18
00:00:51,539 --> 00:00:55,800
bit about the scope for this afternoon

19
00:00:54,020 --> 00:00:58,260
what we're gonna do is talk about

20
00:00:55,800 --> 00:01:00,390
getting from a contained process outside

21
00:00:58,260 --> 00:01:01,949
onto the underlying Linux host not from

22
00:01:00,390 --> 00:01:03,989
a malicious image that you can deploy

23
00:01:01,949 --> 00:01:06,179
with crazy flags not going from

24
00:01:03,989 --> 00:01:08,250
container to container and not talking

25
00:01:06,180 --> 00:01:09,990
about orchestrators the scenario is that

26
00:01:08,250 --> 00:01:13,350
we're in a container maybe one that's

27
00:01:09,990 --> 00:01:14,699
running on an Orchestrator but focuses

28
00:01:13,350 --> 00:01:16,679
on the attack pictures available from

29
00:01:14,700 --> 00:01:18,210
within that container if you want to

30
00:01:16,680 --> 00:01:20,130
know about attacking communities we hope

31
00:01:18,210 --> 00:01:22,770
that you went to walking time travel to

32
00:01:20,130 --> 00:01:25,979
in cold waters talk yesterday at 1:30

33
00:01:22,770 --> 00:01:27,539
p.m. in lagoon jko we're also

34
00:01:25,979 --> 00:01:28,979
specifically discussing containers on

35
00:01:27,540 --> 00:01:32,369
linux so we won't be covering any other

36
00:01:28,979 --> 00:01:34,229
of the inferior operating systems for

37
00:01:32,369 --> 00:01:37,500
all Linux kernel related information

38
00:01:34,229 --> 00:01:38,610
we'll be referring to the 4x series it

39
00:01:37,500 --> 00:01:39,990
also worth noting that the container

40
00:01:38,610 --> 00:01:41,490
ecosystem like we had to scope this town

41
00:01:39,990 --> 00:01:42,439
because the ecosystem is huge and if you

42
00:01:41,490 --> 00:01:44,820
tried to cover all the different

43
00:01:42,439 --> 00:01:46,048
enumerations of deployment it would be

44
00:01:44,820 --> 00:01:47,939
massive mean there's no way we could do

45
00:01:46,049 --> 00:01:49,979
it in 15-minute talk so that means we're

46
00:01:47,939 --> 00:01:52,380
only covering their predominant widely

47
00:01:49,979 --> 00:01:53,729
deployed runtimes and environments that

48
00:01:52,380 --> 00:01:55,199
makes it means like dr. Cooper Nettie's

49
00:01:53,729 --> 00:02:00,119
out of scope for things like redheads

50
00:01:55,200 --> 00:02:01,530
pod man or firecracker so these are the

51
00:02:00,119 --> 00:02:02,100
volumes of the convenien we're

52
00:02:01,530 --> 00:02:04,049
presenting today

53
00:02:02,100 --> 00:02:05,460
first up before we get into any

54
00:02:04,049 --> 00:02:07,860
escapology we're gonna cover some

55
00:02:05,460 --> 00:02:09,090
container basics so seeing the stage of

56
00:02:07,860 --> 00:02:09,750
how we can break down the walls and get

57
00:02:09,090 --> 00:02:11,640
out of the container

58
00:02:09,750 --> 00:02:13,400
the first volume is all about

59
00:02:11,640 --> 00:02:15,768
vulnerabilities that have been found and

60
00:02:13,400 --> 00:02:17,239
sometimes patched in container engines

61
00:02:15,769 --> 00:02:19,730
we weren't spend too much time here if

62
00:02:17,239 --> 00:02:21,370
you want to tie this to give the person

63
00:02:19,730 --> 00:02:23,540
a fish versus teacher person to fish

64
00:02:21,370 --> 00:02:25,189
this is giving you the fish and the fish

65
00:02:23,540 --> 00:02:27,140
is being did for a while and probably

66
00:02:25,189 --> 00:02:28,670
smells a bit bad but it can help explain

67
00:02:27,140 --> 00:02:30,980
some of the importance of the basics

68
00:02:28,670 --> 00:02:32,149
you're gonna go through first after that

69
00:02:30,980 --> 00:02:33,738
we're gonna switch to more practical

70
00:02:32,150 --> 00:02:34,909
information on how to break out of a

71
00:02:33,739 --> 00:02:37,519
container and this is teaching you how

72
00:02:34,909 --> 00:02:38,900
to fish so the second volume covers ways

73
00:02:37,519 --> 00:02:40,400
in which containers can be in securely

74
00:02:38,900 --> 00:02:42,140
deployed or configured to increase their

75
00:02:40,400 --> 00:02:44,060
attack surface or otherwise weaken them

76
00:02:42,140 --> 00:02:44,988
and then techniques we outlined in this

77
00:02:44,060 --> 00:02:46,010
section will probably give you the most

78
00:02:44,989 --> 00:02:48,379
mileage when you're trying to break out

79
00:02:46,010 --> 00:02:50,060
of a container and finally in volume

80
00:02:48,379 --> 00:02:52,399
three we're gonna cover how the kernel

81
00:02:50,060 --> 00:02:53,930
can and it has been exploited to escape

82
00:02:52,400 --> 00:02:55,670
containers and we will cover how you can

83
00:02:53,930 --> 00:02:56,870
and shouldn't try to break out of

84
00:02:55,670 --> 00:03:00,500
container using that currently exploit

85
00:02:56,870 --> 00:03:02,359
here all right so now we're under the

86
00:03:00,500 --> 00:03:04,099
first volume in our compendium this is a

87
00:03:02,359 --> 00:03:07,579
basic you know required reading

88
00:03:04,099 --> 00:03:09,069
container basics so this is pretty dumb

89
00:03:07,579 --> 00:03:11,239
but containers in our virtual machines

90
00:03:09,069 --> 00:03:13,250
we it was necessary to put this in

91
00:03:11,239 --> 00:03:14,840
because there's still a lot of confusion

92
00:03:13,250 --> 00:03:16,939
around this containers often complain

93
00:03:14,840 --> 00:03:18,440
with the MS they don't have their own

94
00:03:16,939 --> 00:03:20,540
kernel they don't have their own drivers

95
00:03:18,440 --> 00:03:24,290
they don't have their own virtualized

96
00:03:20,540 --> 00:03:25,400
hardware they're just tasks and what

97
00:03:24,290 --> 00:03:27,560
does it tasks well the kernel calls

98
00:03:25,400 --> 00:03:29,150
processes and threads tasks and a

99
00:03:27,560 --> 00:03:31,159
container is a task or a set of tasks

100
00:03:29,150 --> 00:03:32,389
with special properties to isolate them

101
00:03:31,159 --> 00:03:34,250
and restrict their access to system

102
00:03:32,389 --> 00:03:35,959
resources you can see on the screen here

103
00:03:34,250 --> 00:03:37,400
where I've poorly depicted a process

104
00:03:35,959 --> 00:03:38,900
tree show and imaginary scenario of

105
00:03:37,400 --> 00:03:41,120
tasks where we have a container engine

106
00:03:38,900 --> 00:03:42,799
running an engine X container and like

107
00:03:41,120 --> 00:03:47,629
all the other tasks it descends from in

108
00:03:42,799 --> 00:03:49,909
it so proxy pretty special file system

109
00:03:47,629 --> 00:03:52,310
that allows accident information from

110
00:03:49,909 --> 00:03:54,530
the kernel currently uses task types to

111
00:03:52,310 --> 00:03:55,940
define tasks and you can refer to many

112
00:03:54,530 --> 00:03:58,519
of the task attributes by clearing its

113
00:03:55,940 --> 00:03:59,870
pet entry in the profile system that's

114
00:03:58,519 --> 00:04:00,949
pretty much we're gonna say about the

115
00:03:59,870 --> 00:04:02,209
task truck for now but we will

116
00:04:00,949 --> 00:04:04,099
definitely touch on it in a kernel

117
00:04:02,209 --> 00:04:06,049
section just remember that basically it

118
00:04:04,099 --> 00:04:09,379
holds most of the isolation mechanisms

119
00:04:06,049 --> 00:04:11,209
that make the container contain and this

120
00:04:09,379 --> 00:04:12,560
is a mostly accurate mapping of type

121
00:04:11,209 --> 00:04:14,030
entries of protein trees for reference

122
00:04:12,560 --> 00:04:16,789
not really gonna speak to it but you can

123
00:04:14,030 --> 00:04:17,930
beat away them so we've established what

124
00:04:16,789 --> 00:04:20,209
containers are that they're tasked with

125
00:04:17,930 --> 00:04:21,019
just special properties what are those

126
00:04:20,209 --> 00:04:23,840
properties

127
00:04:21,019 --> 00:04:25,099
those are credentials capabilities where

128
00:04:23,840 --> 00:04:27,080
the filesystem route is located

129
00:04:25,099 --> 00:04:28,849
namespaces see groups

130
00:04:27,080 --> 00:04:31,400
Linux security modules and sometimes

131
00:04:28,849 --> 00:04:32,240
comm it's largely the job of the

132
00:04:31,400 --> 00:04:33,739
container engine to apply these

133
00:04:32,240 --> 00:04:35,659
different properties and we'll cover

134
00:04:33,740 --> 00:04:37,340
more of that in later sections but for

135
00:04:35,659 --> 00:04:38,930
now know that when we mention a

136
00:04:37,340 --> 00:04:40,400
container engine we mean a thing that

137
00:04:38,930 --> 00:04:42,110
instills the environment the facilitate

138
00:04:40,400 --> 00:04:43,489
containers first we're gonna start off

139
00:04:42,110 --> 00:04:46,879
by covering what each of these different

140
00:04:43,490 --> 00:04:49,310
properties are so the first Canadian

141
00:04:46,879 --> 00:04:51,379
attribute is credentials and that's

142
00:04:49,310 --> 00:04:52,970
because all tasks have credentials but

143
00:04:51,379 --> 00:04:54,470
it becomes important so credentials are

144
00:04:52,970 --> 00:04:57,259
used to associate a user identity to a

145
00:04:54,470 --> 00:04:58,669
task these are the user and group IDs

146
00:04:57,259 --> 00:05:01,009
for permission checks like when you're

147
00:04:58,669 --> 00:05:02,750
trying to access files the diagram on

148
00:05:01,009 --> 00:05:04,550
the right is from a page in the Linux

149
00:05:02,750 --> 00:05:06,440
program interface released in 2010 by no

150
00:05:04,550 --> 00:05:08,449
starch press it shows the relationship

151
00:05:06,440 --> 00:05:09,919
between various set UID syscall

152
00:05:08,449 --> 00:05:12,880
functions and their effects on the

153
00:05:09,919 --> 00:05:17,299
effective real and stored user IDs and

154
00:05:12,880 --> 00:05:18,800
it looks a little witchy actually so on

155
00:05:17,300 --> 00:05:20,360
the Left we have a picture of the seal

156
00:05:18,800 --> 00:05:21,919
of Lilith which according to a fringe

157
00:05:20,360 --> 00:05:23,389
Geo Cities page I found on wayback

158
00:05:21,919 --> 00:05:25,370
machine is supposedly from a book called

159
00:05:23,389 --> 00:05:33,259
the Sun of great knowledge also know

160
00:05:25,370 --> 00:05:34,280
start to press circuit 1225 hmm so we'll

161
00:05:33,259 --> 00:05:35,990
be referring to them more when we talk

162
00:05:34,280 --> 00:05:37,940
about names faces username sizes later

163
00:05:35,990 --> 00:05:39,560
on the one important thing to note here

164
00:05:37,940 --> 00:05:41,719
is that credentials are not a course

165
00:05:39,560 --> 00:05:45,380
enough mechanism to restrict container

166
00:05:41,719 --> 00:05:47,060
privileges and to address the cost enter

167
00:05:45,380 --> 00:05:49,699
credentials capabilities were introduced

168
00:05:47,060 --> 00:05:50,360
in around kernel 3.0 which was released

169
00:05:49,699 --> 00:05:52,039
in the middle-ages

170
00:05:50,360 --> 00:05:53,389
root privileges were separated into

171
00:05:52,039 --> 00:05:56,120
different groups known as capabilities

172
00:05:53,389 --> 00:05:58,610
times change and being root is no longer

173
00:05:56,120 --> 00:06:01,009
necessarily quite root enough you can be

174
00:05:58,610 --> 00:06:03,169
semi-group quasi brute the majorie no

175
00:06:01,009 --> 00:06:07,639
fruits the diet poker bridge just one

176
00:06:03,169 --> 00:06:09,169
capability not written up capabilities

177
00:06:07,639 --> 00:06:11,659
are used as a key isolation mechanism by

178
00:06:09,169 --> 00:06:13,068
some container engines shown here the

179
00:06:11,659 --> 00:06:14,930
capabilities that docker assigns and you

180
00:06:13,069 --> 00:06:16,819
contain this by default so no you can

181
00:06:14,930 --> 00:06:19,009
load a kernel module you can't go to

182
00:06:16,819 --> 00:06:21,050
remount things not all container engines

183
00:06:19,009 --> 00:06:22,880
take the same approach alexei by default

184
00:06:21,050 --> 00:06:24,500
grants pretty much every capability but

185
00:06:22,880 --> 00:06:26,090
it relies on using the in spaces instead

186
00:06:24,500 --> 00:06:27,979
to reduce the scope of the capabilities

187
00:06:26,090 --> 00:06:29,599
like you can be kept this app and inside

188
00:06:27,979 --> 00:06:32,449
the container and without breaking the

189
00:06:29,599 --> 00:06:33,500
host the containers root filesystem is

190
00:06:32,449 --> 00:06:35,719
another property which sets it apart

191
00:06:33,500 --> 00:06:37,580
from other tasks the caters route is

192
00:06:35,719 --> 00:06:37,969
often placed in a special file system

193
00:06:37,580 --> 00:06:40,609
mount

194
00:06:37,969 --> 00:06:42,310
modern doctor for example uses overlay a

195
00:06:40,610 --> 00:06:44,479
the operation of which supports

196
00:06:42,310 --> 00:06:45,710
management of layers so that modified

197
00:06:44,479 --> 00:06:48,020
data does not actually affect the

198
00:06:45,710 --> 00:06:49,878
underlying container image instead any

199
00:06:48,020 --> 00:06:54,169
modifications made on this overlay FS

200
00:06:49,879 --> 00:06:55,460
are stored in a diff directory here's

201
00:06:54,169 --> 00:06:57,080
some pseudocode that you probably can't

202
00:06:55,460 --> 00:06:58,909
read or some pseudo terminal output

203
00:06:57,080 --> 00:07:00,409
that's not very readable showing the

204
00:06:58,909 --> 00:07:02,330
overlay at a festive directory that the

205
00:07:00,409 --> 00:07:04,159
TLD arc here is that the containers

206
00:07:02,330 --> 00:07:05,780
route mount is actually a path that's

207
00:07:04,159 --> 00:07:07,550
reachable for at least any modified data

208
00:07:05,780 --> 00:07:09,138
from the hosts file system and this

209
00:07:07,550 --> 00:07:10,550
becomes important we start talking about

210
00:07:09,139 --> 00:07:11,870
container escapes because it's useful to

211
00:07:10,550 --> 00:07:14,360
know the hosts path to reach files with

212
00:07:11,870 --> 00:07:15,830
attacker controlled content and it's in

213
00:07:14,360 --> 00:07:20,599
this case available through the overlay

214
00:07:15,830 --> 00:07:22,279
FS upper directory so Dix up at name

215
00:07:20,599 --> 00:07:23,688
spaces which give process is a different

216
00:07:22,279 --> 00:07:25,759
view of a hosts resource they're pretty

217
00:07:23,689 --> 00:07:26,750
importantly container land and normally

218
00:07:25,759 --> 00:07:28,639
one of the first things people think

219
00:07:26,750 --> 00:07:30,590
about when you talk about containers as

220
00:07:28,639 --> 00:07:32,020
an analogy think of them like a private

221
00:07:30,590 --> 00:07:34,638
karaoke room you're still inside

222
00:07:32,020 --> 00:07:36,409
karaoke paola but you can only hear

223
00:07:34,639 --> 00:07:38,360
yourself or you want of your friends in

224
00:07:36,409 --> 00:07:39,529
the room with you but the employees can

225
00:07:38,360 --> 00:07:41,930
definitely hear you even if they don't

226
00:07:39,529 --> 00:07:43,819
wonder there are a bunch of namespaces

227
00:07:41,930 --> 00:07:46,159
as you can see we're only going to talk

228
00:07:43,819 --> 00:07:47,930
about a couple of them the first is the

229
00:07:46,159 --> 00:07:51,199
ped namespace and this is what makes

230
00:07:47,930 --> 00:07:52,940
head start at one inside container the

231
00:07:51,199 --> 00:07:54,740
user namespace which Maps you IDs so

232
00:07:52,940 --> 00:07:56,659
that route inside the container is

233
00:07:54,740 --> 00:07:58,639
actually a garbage UID on the host and

234
00:07:56,659 --> 00:08:00,229
the mountain namespace which defines

235
00:07:58,639 --> 00:08:02,750
what the root of a containers file

236
00:08:00,229 --> 00:08:04,789
system is for this you need caps as

237
00:08:02,750 --> 00:08:08,659
admin to make new namespaces of most

238
00:08:04,789 --> 00:08:10,520
types except for user name spaces so

239
00:08:08,659 --> 00:08:13,009
seen groups or troll groups impose

240
00:08:10,520 --> 00:08:14,299
resource limit limits on tasks this is

241
00:08:13,009 --> 00:08:15,949
really mostly about hardware so this

242
00:08:14,300 --> 00:08:17,360
mostly stops containers from messing

243
00:08:15,949 --> 00:08:19,279
with hardware peripherals other devices

244
00:08:17,360 --> 00:08:20,569
they don't really impact our escape

245
00:08:19,279 --> 00:08:24,740
technique so we're not gonna spend any

246
00:08:20,569 --> 00:08:26,509
more time on them LSMs Linux security

247
00:08:24,740 --> 00:08:28,039
modules like a parmer nessie linux are

248
00:08:26,509 --> 00:08:29,180
however something we are going to spend

249
00:08:28,039 --> 00:08:30,438
time on because they're an important

250
00:08:29,180 --> 00:08:31,390
component in what makes a container

251
00:08:30,439 --> 00:08:33,500
contained

252
00:08:31,390 --> 00:08:35,029
they're used for much more in theaters

253
00:08:33,500 --> 00:08:36,649
obviously but they're they're pivotal

254
00:08:35,029 --> 00:08:40,010
here in containers and add a good extra

255
00:08:36,649 --> 00:08:41,630
layer of defense so for containers

256
00:08:40,010 --> 00:08:43,399
lynnster modules are used to reduce

257
00:08:41,630 --> 00:08:44,779
access to system calls and sensitive

258
00:08:43,399 --> 00:08:46,430
file paths and to prevent containers

259
00:08:44,779 --> 00:08:48,350
from mounting new writable proc and sis

260
00:08:46,430 --> 00:08:50,420
FS entries for example or p trace and

261
00:08:48,350 --> 00:08:52,430
other programs or any potentially other

262
00:08:50,420 --> 00:08:54,150
dangerous behaviors that a container may

263
00:08:52,430 --> 00:08:55,739
want to take even if the task has

264
00:08:54,150 --> 00:08:58,079
required capabilities and privilege to

265
00:08:55,740 --> 00:08:59,880
do those things these LSMs get in the

266
00:08:58,080 --> 00:09:01,140
way and they generally prevent those

267
00:08:59,880 --> 00:09:02,490
we're going through and they generally

268
00:09:01,140 --> 00:09:03,569
help reduce the attack surface for the

269
00:09:02,490 --> 00:09:06,210
containers even if they've been running

270
00:09:03,570 --> 00:09:07,650
with extra privilege so for dr. a Parma

271
00:09:06,210 --> 00:09:11,670
represents one of the strongest defenses

272
00:09:07,650 --> 00:09:13,050
but it's certainly not perfect say comps

273
00:09:11,670 --> 00:09:14,790
another mechanism used to isolate

274
00:09:13,050 --> 00:09:16,349
containerized processes by restricting

275
00:09:14,790 --> 00:09:18,630
access to system goals

276
00:09:16,350 --> 00:09:20,790
the default dr. second policy is pretty

277
00:09:18,630 --> 00:09:24,060
comprehensive and locks down a number of

278
00:09:20,790 --> 00:09:26,360
potential potentially not-so-good system

279
00:09:24,060 --> 00:09:29,369
calls you want in containers to do and

280
00:09:26,360 --> 00:09:32,070
it also it makes others which you would

281
00:09:29,370 --> 00:09:33,780
not be able to do like unshare require

282
00:09:32,070 --> 00:09:35,610
caps as admin so it can put some extra

283
00:09:33,780 --> 00:09:36,630
restrictions in place this is kind of

284
00:09:35,610 --> 00:09:39,480
relevant because the number of kernel

285
00:09:36,630 --> 00:09:41,490
exploits for quiet you to have unshare

286
00:09:39,480 --> 00:09:42,750
available in order to get caps as admin

287
00:09:41,490 --> 00:09:46,950
and user name space so you can create

288
00:09:42,750 --> 00:09:48,000
other namespaces as an aside Alexi

289
00:09:46,950 --> 00:09:49,860
doesn't really go freaking you listen

290
00:09:48,000 --> 00:09:53,820
say combat base Lee just limits loading

291
00:09:49,860 --> 00:09:55,440
of parental modules there's another

292
00:09:53,820 --> 00:09:56,100
aside state comps entirely new to by

293
00:09:55,440 --> 00:09:57,750
kubernetes

294
00:09:56,100 --> 00:10:01,110
which makes a lot of publicly available

295
00:09:57,750 --> 00:10:02,400
pill exploits work really good when that

296
00:10:01,110 --> 00:10:05,040
wouldn't work on that plain old docker

297
00:10:02,400 --> 00:10:06,209
installation could work pretty well on a

298
00:10:05,040 --> 00:10:10,050
container running under kubernetes

299
00:10:06,210 --> 00:10:11,790
Oh a handful of weeks ago this PR was

300
00:10:10,050 --> 00:10:13,829
opened so it's for a markdown document

301
00:10:11,790 --> 00:10:15,569
but it's a good sign that Security's is

302
00:10:13,830 --> 00:10:19,290
actually thinking of taking this a

303
00:10:15,570 --> 00:10:21,090
couple of but more seriously so this

304
00:10:19,290 --> 00:10:23,160
hideous image somewhat conveys how we

305
00:10:21,090 --> 00:10:24,870
think about the container security model

306
00:10:23,160 --> 00:10:27,360
the blue being what you think you can do

307
00:10:24,870 --> 00:10:29,100
for example I've got unlimited and

308
00:10:27,360 --> 00:10:31,920
unlimited train pass and C is like in

309
00:10:29,100 --> 00:10:33,990
travel anywhere orange being what you

310
00:10:31,920 --> 00:10:35,520
can actually do so that train pass is

311
00:10:33,990 --> 00:10:37,950
actually only valid to students or you

312
00:10:35,520 --> 00:10:39,810
can only use it during weekends and red

313
00:10:37,950 --> 00:10:41,550
being where you can do it so maybe it's

314
00:10:39,810 --> 00:10:43,469
only available on certain train lines in

315
00:10:41,550 --> 00:10:45,479
the city I can travel throughout the

316
00:10:43,470 --> 00:10:50,430
world on it even if I am a student and

317
00:10:45,480 --> 00:10:54,060
it is the weekend yeah I'm sorry it's

318
00:10:50,430 --> 00:10:55,380
not my best work after that typically

319
00:10:54,060 --> 00:10:56,849
abbreviated introduction to containers

320
00:10:55,380 --> 00:10:58,170
the section is going to briefly hop

321
00:10:56,850 --> 00:11:00,300
through some vulnerabilities in

322
00:10:58,170 --> 00:11:02,010
container engines and and their impact

323
00:11:00,300 --> 00:11:03,930
like you say this can be pretty light

324
00:11:02,010 --> 00:11:06,090
because these things are for the most

325
00:11:03,930 --> 00:11:08,069
part patched and weren't helped you too

326
00:11:06,090 --> 00:11:12,540
much in the real world

327
00:11:08,070 --> 00:11:13,680
first up talkin motor soccer balls today

328
00:11:12,540 --> 00:11:17,189
can be lumped into a handful of

329
00:11:13,680 --> 00:11:19,949
categories week prop Commission's host

330
00:11:17,190 --> 00:11:22,740
file descriptors and host parks rip the

331
00:11:19,949 --> 00:11:23,969
leakage and some links and the Athene

332
00:11:22,740 --> 00:11:25,769
leakage and siblings all can kind of go

333
00:11:23,970 --> 00:11:28,560
hand in hand but not necessarily a

334
00:11:25,769 --> 00:11:30,990
one-to-one mapping the first one I'm

335
00:11:28,560 --> 00:11:36,258
just going to touch on briefly 2018

336
00:11:30,990 --> 00:11:42,779
36:31 this led malicious measures image

337
00:11:36,259 --> 00:11:45,449
deployed to right it's airway same

338
00:11:42,779 --> 00:11:47,880
attributes so you could null out

339
00:11:45,449 --> 00:11:50,880
apparmor ec linux make em combined and

340
00:11:47,880 --> 00:11:52,139
remove all of the restrictions that the

341
00:11:50,880 --> 00:11:53,939
engine was kind of relying on being

342
00:11:52,139 --> 00:11:55,980
there

343
00:11:53,940 --> 00:11:59,190
the second is actually just from this

344
00:11:55,980 --> 00:12:01,470
year 15 6 X 4 which is a race condition

345
00:11:59,190 --> 00:12:02,940
in police and Lincoln's Corp which was

346
00:12:01,470 --> 00:12:04,649
mean to make sure that symlink was

347
00:12:02,940 --> 00:12:08,009
followed within the container and Alton

348
00:12:04,649 --> 00:12:09,060
the host and didn't really do that so if

349
00:12:08,009 --> 00:12:11,100
you want the race condition

350
00:12:09,060 --> 00:12:12,779
and with a few other prerequisites you

351
00:12:11,100 --> 00:12:16,920
could write to an average relocation on

352
00:12:12,779 --> 00:12:19,410
the on the horse which is not great we

353
00:12:16,920 --> 00:12:20,849
will spend a minute or two on the

354
00:12:19,410 --> 00:12:22,980
interesting run sieve on from earlier

355
00:12:20,850 --> 00:12:24,180
this year because it touches on some of

356
00:12:22,980 --> 00:12:27,420
the complexities of running things in a

357
00:12:24,180 --> 00:12:31,469
container so a couple of things

358
00:12:27,420 --> 00:12:33,240
use frenzy for some background regular

359
00:12:31,470 --> 00:12:33,750
container exists look something like

360
00:12:33,240 --> 00:12:35,940
this

361
00:12:33,750 --> 00:12:37,680
rinse your fork and apply isolation

362
00:12:35,940 --> 00:12:39,690
controls like namespaces as it goes and

363
00:12:37,680 --> 00:12:43,519
in sup still being a copy over NC

364
00:12:39,690 --> 00:12:46,139
sitting inside the inside the container

365
00:12:43,519 --> 00:12:48,899
in this case they say yeah entry points

366
00:12:46,139 --> 00:12:51,899
like Java desk job something a Java

367
00:12:48,899 --> 00:12:53,430
process letting container run seizing

368
00:12:51,899 --> 00:12:55,649
and execute that entry point the Java

369
00:12:53,430 --> 00:12:59,130
process and that's what PS would kind of

370
00:12:55,649 --> 00:13:01,439
look like but if that entry point was

371
00:12:59,130 --> 00:13:03,209
actually a link to proc self exe we have

372
00:13:01,439 --> 00:13:05,670
a problem because proc selfie is gonna

373
00:13:03,209 --> 00:13:08,008
reference the run see binary back on the

374
00:13:05,670 --> 00:13:10,079
host and this means out in provisioned

375
00:13:08,009 --> 00:13:14,430
and inside the container now has access

376
00:13:10,079 --> 00:13:16,138
to a sense of host resource now our

377
00:13:14,430 --> 00:13:17,489
mistress process can get ahold of the

378
00:13:16,139 --> 00:13:20,520
pod script appoint you the host Francine

379
00:13:17,490 --> 00:13:24,720
this is mostly most easily done with a

380
00:13:20,520 --> 00:13:26,310
malicious library that will be loaded by

381
00:13:24,720 --> 00:13:27,930
Renzi when it runs inside the container

382
00:13:26,310 --> 00:13:29,369
and it can hijack that part of the

383
00:13:27,930 --> 00:13:30,959
scripta and it won't be able to write to

384
00:13:29,370 --> 00:13:34,140
it at this point because run she's still

385
00:13:30,959 --> 00:13:38,160
running can get a tick busy but we were

386
00:13:34,140 --> 00:13:40,140
able to write to it later if we wait

387
00:13:38,160 --> 00:13:43,709
until that run C exec dies and opens it

388
00:13:40,140 --> 00:13:45,480
with write permissions and clobber it we

389
00:13:43,709 --> 00:13:47,459
can put our own bed or uncie in place

390
00:13:45,480 --> 00:13:49,200
just easing up then bypassing the hippie

391
00:13:47,459 --> 00:13:50,430
across to the new digs a process which

392
00:13:49,200 --> 00:13:52,890
keeps on trying to open it for right

393
00:13:50,430 --> 00:13:55,469
until run C's stopped doing its thing

394
00:13:52,890 --> 00:13:58,529
and then our evil process couldn't

395
00:13:55,470 --> 00:14:00,390
clobber away so we're gonna show a quick

396
00:13:58,529 --> 00:14:04,170
demo of this which is mostly based on

397
00:14:00,390 --> 00:14:06,089
the original POC by the bug finders who

398
00:14:04,170 --> 00:14:10,339
were nominated for a partner yep I

399
00:14:06,089 --> 00:14:13,380
believe the small changes we made were

400
00:14:10,339 --> 00:14:14,760
making the senior reverse shell into the

401
00:14:13,380 --> 00:14:17,399
container and maintaining the

402
00:14:14,760 --> 00:14:23,700
functionality of run C instead of kind

403
00:14:17,399 --> 00:14:30,630
of breaking it okay see if this will

404
00:14:23,700 --> 00:14:34,829
work so we'll set off by running a

405
00:14:30,630 --> 00:14:36,870
Python container and you see it's just

406
00:14:34,829 --> 00:14:39,089
us inside the containers nothing else in

407
00:14:36,870 --> 00:14:43,350
there I'm going to copy over our payload

408
00:14:39,089 --> 00:14:44,520
from the host just showing like doing a

409
00:14:43,350 --> 00:14:45,990
witch of Renzi you can see it's still a

410
00:14:44,520 --> 00:14:47,360
binary at this point which is a good

411
00:14:45,990 --> 00:14:49,350
thing

412
00:14:47,360 --> 00:14:51,890
expecting the payload inside the

413
00:14:49,350 --> 00:14:55,220
container and you'll run NATO s H which

414
00:14:51,890 --> 00:15:01,199
downloads a few tools that we need and

415
00:14:55,220 --> 00:15:05,160
kind of sets us up to put Salamis just

416
00:15:01,200 --> 00:15:07,380
slips a pump in place and this us when

417
00:15:05,160 --> 00:15:09,930
we exec it will overwrite it so if we

418
00:15:07,380 --> 00:15:11,810
file ONC again now we've got a batch

419
00:15:09,930 --> 00:15:15,540
script there which is probably not ideal

420
00:15:11,810 --> 00:15:17,310
we can still do run see things and it's

421
00:15:15,540 --> 00:15:19,620
gone back to being a binary which is

422
00:15:17,310 --> 00:15:21,660
good but over in afrontan we've got a

423
00:15:19,620 --> 00:15:23,279
reverse shell and you can see our file

424
00:15:21,660 --> 00:15:25,740
path is to the containers directory on

425
00:15:23,279 --> 00:15:30,380
the host and we can dock a PS to see all

426
00:15:25,740 --> 00:15:30,380
the processes out of the container good

427
00:15:30,589 --> 00:15:33,660
we're also gonna chat about rocket for a

428
00:15:33,329 --> 00:15:36,810
sec

429
00:15:33,660 --> 00:15:38,579
and so this set of rocket vulnerability

430
00:15:36,810 --> 00:15:40,199
is kind of similar to the Renzi escape

431
00:15:38,580 --> 00:15:42,380
and that involves the same kind of

432
00:15:40,200 --> 00:15:44,520
mechanism liking taking into a container

433
00:15:42,380 --> 00:15:45,200
this yeah this diagram should look kind

434
00:15:44,520 --> 00:15:47,640
of familiar

435
00:15:45,200 --> 00:15:48,960
the difference in the nature of these TV

436
00:15:47,640 --> 00:15:51,210
is that rocket doesn't actually drop

437
00:15:48,960 --> 00:15:52,620
anything and there's no stay calm all

438
00:15:51,210 --> 00:15:54,870
the capabilities are still in place and

439
00:15:52,620 --> 00:15:57,030
cgroups an applied and because rocket in

440
00:15:54,870 --> 00:16:00,660
tow requires you to run as a route not

441
00:15:57,030 --> 00:16:02,640
dropping anything as a super bad the

442
00:16:00,660 --> 00:16:04,410
good thing I guess or something is that

443
00:16:02,640 --> 00:16:05,670
it's not getting patched Rockets

444
00:16:04,410 --> 00:16:08,219
basically abandoned we're at this point

445
00:16:05,670 --> 00:16:09,660
with red head favoring pod man so happy

446
00:16:08,220 --> 00:16:13,260
hunting if you do actually find someone

447
00:16:09,660 --> 00:16:14,640
who runs rocket so that summarizes the

448
00:16:13,260 --> 00:16:16,470
section on bugs or weaknesses in

449
00:16:14,640 --> 00:16:17,400
container engines in themselves we're

450
00:16:16,470 --> 00:16:18,870
gonna move on to volume 2 of our

451
00:16:17,400 --> 00:16:20,310
compendium escape via a weakness and

452
00:16:18,870 --> 00:16:24,020
deployment where we'll be summarizing

453
00:16:20,310 --> 00:16:24,020
each of these as bad ideas

454
00:16:24,080 --> 00:16:28,890
so the first bad idea is the doctor

455
00:16:27,090 --> 00:16:30,480
socket the doctor socket our container d

456
00:16:28,890 --> 00:16:32,310
socket is a UNIX socket used to manage

457
00:16:30,480 --> 00:16:33,450
the container engine whenever you run a

458
00:16:32,310 --> 00:16:34,890
docker command you're really actually

459
00:16:33,450 --> 00:16:38,180
running a docker client that's talking

460
00:16:34,890 --> 00:16:40,680
over this socket to the docker daemon

461
00:16:38,180 --> 00:16:42,150
just beef a CDP it's really simple but

462
00:16:40,680 --> 00:16:44,069
you really should not expose this

463
00:16:42,150 --> 00:16:46,079
because any jerk can just curl against

464
00:16:44,070 --> 00:16:48,570
it or run a docker to point at it in

465
00:16:46,080 --> 00:16:50,490
order to schedule privileged containers

466
00:16:48,570 --> 00:16:53,160
on with host mounts and fully take over

467
00:16:50,490 --> 00:16:54,900
the system you would ask why would

468
00:16:53,160 --> 00:16:56,760
anyone want to expose the darker socket

469
00:16:54,900 --> 00:16:58,500
into the container but people do this so

470
00:16:56,760 --> 00:17:01,140
they can run docker inside of docker and

471
00:16:58,500 --> 00:17:03,000
go another level it taper with inception

472
00:17:01,140 --> 00:17:04,770
but because you're still talking to the

473
00:17:03,000 --> 00:17:07,290
docker that's outside of your container

474
00:17:04,770 --> 00:17:09,300
when you schedule something you pop out

475
00:17:07,290 --> 00:17:10,670
of of the container you schedule into

476
00:17:09,300 --> 00:17:13,260
instance

477
00:17:10,670 --> 00:17:14,820
speaking of privileged containers and

478
00:17:13,260 --> 00:17:17,250
bad ideas that's actually bad idea

479
00:17:14,819 --> 00:17:18,629
number two if you run a docker container

480
00:17:17,250 --> 00:17:20,099
with the - - privilege flag you're

481
00:17:18,630 --> 00:17:21,900
basically throwing away all of the

482
00:17:20,099 --> 00:17:24,329
isolation features from a security

483
00:17:21,900 --> 00:17:26,550
standpoint so no Linux security modules

484
00:17:24,329 --> 00:17:29,010
like a parmer you'll have full

485
00:17:26,550 --> 00:17:30,960
capabilities so none of the that

486
00:17:29,010 --> 00:17:34,740
capability drop stuff and it's you know

487
00:17:30,960 --> 00:17:37,050
all the dangers so one example of the

488
00:17:34,740 --> 00:17:38,550
gate is like install a module a kernel

489
00:17:37,050 --> 00:17:41,610
module from your privilege container and

490
00:17:38,550 --> 00:17:43,080
it's obviously game over privilege

491
00:17:41,610 --> 00:17:45,689
containers can also register user mode

492
00:17:43,080 --> 00:17:47,129
helper programs a couple weeks ago now

493
00:17:45,690 --> 00:17:48,960
Felix will he'll manage to fitness

494
00:17:47,130 --> 00:17:51,600
using AC group use remote helper program

495
00:17:48,960 --> 00:17:52,980
into a single tweet this is one of a

496
00:17:51,600 --> 00:17:54,360
variety of many different user mode

497
00:17:52,980 --> 00:17:55,470
helpers which can be used to escape from

498
00:17:54,360 --> 00:17:56,760
privileged container and the

499
00:17:55,470 --> 00:17:58,620
exploitation pattern of that's going to

500
00:17:56,760 --> 00:18:00,420
be something we'll be covering so

501
00:17:58,620 --> 00:18:02,550
actually we're gonna segue here to talk

502
00:18:00,420 --> 00:18:05,550
about user mode helper programs airhorn

503
00:18:02,550 --> 00:18:07,020
airhorn airhorn user mode helper

504
00:18:05,550 --> 00:18:08,909
programs or programs return VOC by the

505
00:18:07,020 --> 00:18:10,800
kernel is an event-driven callback these

506
00:18:08,910 --> 00:18:12,300
programs are often invoked in a

507
00:18:10,800 --> 00:18:13,970
privileged context in the host namespace

508
00:18:12,300 --> 00:18:15,840
and will execute the full capabilities

509
00:18:13,970 --> 00:18:17,190
consequently the ability to register

510
00:18:15,840 --> 00:18:18,929
user mode helper program from within a

511
00:18:17,190 --> 00:18:20,340
container facilitates an escape as it

512
00:18:18,930 --> 00:18:21,630
allows the controlled program for within

513
00:18:20,340 --> 00:18:23,100
the container to be executed by a

514
00:18:21,630 --> 00:18:24,750
privileged k thread outside of the

515
00:18:23,100 --> 00:18:26,280
container in this segue we're going to

516
00:18:24,750 --> 00:18:27,660
go through this generic pattern to show

517
00:18:26,280 --> 00:18:29,730
what the steps are that are repeatable

518
00:18:27,660 --> 00:18:33,540
and then we'll give you a couple of

519
00:18:29,730 --> 00:18:34,890
specific examples so imagine that we

520
00:18:33,540 --> 00:18:36,629
started out by popping a container that

521
00:18:34,890 --> 00:18:39,930
was deployed with - - privileged flag

522
00:18:36,630 --> 00:18:42,120
and we want to escape the first step is

523
00:18:39,930 --> 00:18:43,770
to figure out the the overlay FS path

524
00:18:42,120 --> 00:18:46,649
this was the path which if you recall

525
00:18:43,770 --> 00:18:48,480
from before and the root filesystem part

526
00:18:46,650 --> 00:18:50,010
is a path on the host that can reach

527
00:18:48,480 --> 00:18:51,690
files that have been modified or created

528
00:18:50,010 --> 00:18:52,830
within the container by default with

529
00:18:51,690 --> 00:18:54,090
docker you can determine this from

530
00:18:52,830 --> 00:18:57,510
within a container by reading the up

531
00:18:54,090 --> 00:18:59,699
order entry of Etsy M tab the overlay FS

532
00:18:57,510 --> 00:19:02,670
path should look similar here to what we

533
00:18:59,700 --> 00:19:04,770
had before the next thing you would do

534
00:19:02,670 --> 00:19:06,720
is prepend your payload with this path

535
00:19:04,770 --> 00:19:09,470
so that we have a path that reaches our

536
00:19:06,720 --> 00:19:15,030
payload from the host file system

537
00:19:09,470 --> 00:19:16,710
perfect so use remote helper programs

538
00:19:15,030 --> 00:19:18,660
all involve the use of some sort of

539
00:19:16,710 --> 00:19:22,050
special file system be it proc FS or C

540
00:19:18,660 --> 00:19:23,160
group FS so sometimes you'll have the

541
00:19:22,050 --> 00:19:25,080
ability to write to that file system or

542
00:19:23,160 --> 00:19:26,430
sometimes you'll have to mount it to get

543
00:19:25,080 --> 00:19:28,470
access to these remote helper callback

544
00:19:26,430 --> 00:19:30,390
file that you'll need to write to so

545
00:19:28,470 --> 00:19:32,550
this next step here is demonstrating

546
00:19:30,390 --> 00:19:35,700
that we were mounting up the special FS

547
00:19:32,550 --> 00:19:37,860
as part of the pattern with the endpoint

548
00:19:35,700 --> 00:19:39,600
mounted we then would echo a payload

549
00:19:37,860 --> 00:19:41,280
into whatever the callback file is for

550
00:19:39,600 --> 00:19:44,580
that user mode helper so in the C group

551
00:19:41,280 --> 00:19:46,590
tweet with by Felix that was the release

552
00:19:44,580 --> 00:19:49,350
agent C group release agent callback

553
00:19:46,590 --> 00:19:50,659
file but the pattern generally remains

554
00:19:49,350 --> 00:19:52,709
the same across different ones as well

555
00:19:50,660 --> 00:19:54,000
now that we've ecwid our payload into

556
00:19:52,710 --> 00:19:55,320
that callback file that specifies what

557
00:19:54,000 --> 00:19:56,700
should be called when the event takes

558
00:19:55,320 --> 00:19:57,899
place the kernel knows who to call when

559
00:19:56,700 --> 00:20:00,780
it needs help which will be our payload

560
00:19:57,900 --> 00:20:01,800
residing within the container and with

561
00:20:00,780 --> 00:20:03,210
colonel aware of what's in the event

562
00:20:01,800 --> 00:20:05,520
takes place we can either trigger the

563
00:20:03,210 --> 00:20:09,210
trigger or wait for the related event to

564
00:20:05,520 --> 00:20:10,530
occur when it does Kay thread will

565
00:20:09,210 --> 00:20:12,030
execute whatever helper program was

566
00:20:10,530 --> 00:20:13,410
mapped to that event and thus the

567
00:20:12,030 --> 00:20:14,790
containers escaped and the in container

568
00:20:13,410 --> 00:20:18,660
payload is now running as root on the

569
00:20:14,790 --> 00:20:20,340
host well we use the example of running

570
00:20:18,660 --> 00:20:22,140
with - - privilege it might seem a

571
00:20:20,340 --> 00:20:23,399
little lame and sure like that was a bad

572
00:20:22,140 --> 00:20:24,990
idea to deploy stuff it's important

573
00:20:23,400 --> 00:20:26,340
remember that this is a pattern that can

574
00:20:24,990 --> 00:20:28,290
be used in lots of scenarios where you

575
00:20:26,340 --> 00:20:30,959
have some sort of crack in the container

576
00:20:28,290 --> 00:20:32,730
security model and so will be you know

577
00:20:30,960 --> 00:20:35,070
anything from sensitive mounts to even

578
00:20:32,730 --> 00:20:36,660
use use in kernel exploitation itself so

579
00:20:35,070 --> 00:20:39,389
we'll be will be circling back to this a

580
00:20:36,660 --> 00:20:42,120
couple times so at this point we've got

581
00:20:39,390 --> 00:20:43,020
a demo I have to stand over here so I

582
00:20:42,120 --> 00:20:47,459
can actually see the screen and talk

583
00:20:43,020 --> 00:20:53,250
about what's going on I click it here oh

584
00:20:47,460 --> 00:20:54,270
man so we're running a privileged

585
00:20:53,250 --> 00:20:59,610
container as you can see it's

586
00:20:54,270 --> 00:21:01,050
highlighted here first thing we're going

587
00:20:59,610 --> 00:21:02,580
to do is get the IP for a connected back

588
00:21:01,050 --> 00:21:03,899
shell from the host out throughout this

589
00:21:02,580 --> 00:21:06,179
all of our demos involve getting

590
00:21:03,900 --> 00:21:08,850
connected back shells from the host so

591
00:21:06,180 --> 00:21:11,940
we're gonna write a boilerplate bash dev

592
00:21:08,850 --> 00:21:16,199
TCP connect back shell with the same IP

593
00:21:11,940 --> 00:21:19,830
that we've discovered make that

594
00:21:16,200 --> 00:21:21,660
executable we now are going to begin

595
00:21:19,830 --> 00:21:23,550
writing the actual escape to register

596
00:21:21,660 --> 00:21:25,140
the release the the user mode helper

597
00:21:23,550 --> 00:21:26,790
which is here in this case is the C

598
00:21:25,140 --> 00:21:28,770
group release agent so the first thing

599
00:21:26,790 --> 00:21:30,480
we do is get this overlay the overlay

600
00:21:28,770 --> 00:21:32,400
path I did not come up with this pretty

601
00:21:30,480 --> 00:21:33,600
regex that's Felix's work that's taken

602
00:21:32,400 --> 00:21:35,160
from his tweet and we use it all through

603
00:21:33,600 --> 00:21:37,020
a lot of our demos it's one of the most

604
00:21:35,160 --> 00:21:37,950
useful things I think is how to get to

605
00:21:37,020 --> 00:21:39,860
that path that can reach into the

606
00:21:37,950 --> 00:21:42,840
container

607
00:21:39,860 --> 00:21:45,810
so we prepend that path to our payload

608
00:21:42,840 --> 00:21:47,340
of shell and we put that into the

609
00:21:45,810 --> 00:21:53,580
release agent that's the callback file I

610
00:21:47,340 --> 00:21:55,470
then try to escape them and we then

611
00:21:53,580 --> 00:21:56,850
simply run the escape it waits a couple

612
00:21:55,470 --> 00:21:59,160
seconds and that cat starts listening it

613
00:21:56,850 --> 00:22:00,840
connects back in so usually when you can

614
00:21:59,160 --> 00:22:02,430
see no job control in this shell as a

615
00:22:00,840 --> 00:22:04,949
hacker your job your job is pleated

616
00:22:02,430 --> 00:22:06,300
actually but as you can see we're per PS

617
00:22:04,950 --> 00:22:07,560
on the host in the out of the container

618
00:22:06,300 --> 00:22:09,270
namespace we can even run docker

619
00:22:07,560 --> 00:22:11,510
commands or type wall on the terminals

620
00:22:09,270 --> 00:22:11,510
root

621
00:22:15,010 --> 00:22:19,760
so these are some of the user mode

622
00:22:18,110 --> 00:22:22,610
helpers that are confirmed for being

623
00:22:19,760 --> 00:22:26,540
useful in container scapes it's not just

624
00:22:22,610 --> 00:22:28,550
C group so you have you have everything

625
00:22:26,540 --> 00:22:30,200
from the release agent which we just saw

626
00:22:28,550 --> 00:22:31,909
but another example has been format misc

627
00:22:30,200 --> 00:22:34,040
which is what determines the handler for

628
00:22:31,910 --> 00:22:36,410
like shebangs when you run like a Python

629
00:22:34,040 --> 00:22:37,520
script or a shell script that when you

630
00:22:36,410 --> 00:22:39,200
explode a little bit differently we can

631
00:22:37,520 --> 00:22:40,310
use another score pattern which will be

632
00:22:39,200 --> 00:22:42,020
we'll be showing here in a little bit

633
00:22:40,310 --> 00:22:43,310
this is a helper when a program called

634
00:22:42,020 --> 00:22:44,780
when a program crashes to generate a

635
00:22:43,310 --> 00:22:45,860
core dump so this is the program

636
00:22:44,780 --> 00:22:47,450
actually goes collects the info and

637
00:22:45,860 --> 00:22:50,389
dumps in maybe reports stuff back to

638
00:22:47,450 --> 00:22:51,740
your distro we'll be we'll be demoing a

639
00:22:50,390 --> 00:22:54,880
few of these as well for a scape another

640
00:22:51,740 --> 00:22:54,880
container based on different conditions

641
00:22:55,780 --> 00:22:59,450
so while docker drops a bunch of

642
00:22:58,310 --> 00:23:01,310
capabilities by default

643
00:22:59,450 --> 00:23:03,170
sometimes people or systems add them

644
00:23:01,310 --> 00:23:05,179
back in we have a couple on this slide

645
00:23:03,170 --> 00:23:07,760
that have some security implications but

646
00:23:05,180 --> 00:23:10,880
largely speak to caps as admin which is

647
00:23:07,760 --> 00:23:12,800
largely considered true root that can

648
00:23:10,880 --> 00:23:16,040
kind of vary depending on the container

649
00:23:12,800 --> 00:23:20,180
run time and any other sims interfering

650
00:23:16,040 --> 00:23:22,750
for example epimer would restrict mount

651
00:23:20,180 --> 00:23:26,030
but it wouldn't necessarily respect BPA

652
00:23:22,750 --> 00:23:27,230
and some operating systems like CentOS 7

653
00:23:26,030 --> 00:23:29,600
is less restricted if you have two same

654
00:23:27,230 --> 00:23:31,280
and you can remount proc readwrite and

655
00:23:29,600 --> 00:23:33,020
things like this which can enable a

656
00:23:31,280 --> 00:23:35,810
bunch of the user hood helpers there

657
00:23:33,020 --> 00:23:37,700
Brandon was just talking about also

658
00:23:35,810 --> 00:23:40,100
running as Bruce is lousy

659
00:23:37,700 --> 00:23:43,490
excessive inside the container Inge not

660
00:23:40,100 --> 00:23:45,409
doing that helps the fourth and final

661
00:23:43,490 --> 00:23:47,600
bad idea we're going to discuss our

662
00:23:45,410 --> 00:23:49,130
sensitive mounts here we're gonna go

663
00:23:47,600 --> 00:23:50,750
into proc but extends beyond that and

664
00:23:49,130 --> 00:23:52,730
actually a couple weeks ago there was or

665
00:23:50,750 --> 00:23:54,980
last week maybe at times all born into

666
00:23:52,730 --> 00:23:56,570
one there was a post about how a log

667
00:23:54,980 --> 00:23:58,700
mount could be used to escape from

668
00:23:56,570 --> 00:24:00,320
kubernetes in general having host

669
00:23:58,700 --> 00:24:02,480
resources volume mounted into your

670
00:24:00,320 --> 00:24:04,010
container can present a security risk

671
00:24:02,480 --> 00:24:05,960
and should be avoided or done very

672
00:24:04,010 --> 00:24:11,060
carefully for this example that we will

673
00:24:05,960 --> 00:24:12,890
be using proc so by the way here's an

674
00:24:11,060 --> 00:24:14,240
app armour the epimer policy for proc

675
00:24:12,890 --> 00:24:15,410
this is what protects a lot of the

676
00:24:14,240 --> 00:24:17,570
things we're about to do from normally

677
00:24:15,410 --> 00:24:19,340
happening the thing is the app armour is

678
00:24:17,570 --> 00:24:21,110
path based so the volume mount that

679
00:24:19,340 --> 00:24:22,610
we've gotten in that that is to slash

680
00:24:21,110 --> 00:24:23,870
host /proc doesn't fit the pattern

681
00:24:22,610 --> 00:24:25,850
that's being matched here and that's the

682
00:24:23,870 --> 00:24:27,559
restrictions no longer apply

683
00:24:25,850 --> 00:24:29,178
so you can easily shoot yourself in the

684
00:24:27,559 --> 00:24:30,499
foot thinking like oh it'll protect from

685
00:24:29,179 --> 00:24:32,960
proc and it's like no it protects them

686
00:24:30,499 --> 00:24:34,970
the /proc so we can read and write to

687
00:24:32,960 --> 00:24:37,519
any it's anything in this new prop

688
00:24:34,970 --> 00:24:38,779
because it's not being protected the

689
00:24:37,519 --> 00:24:40,340
ability to write this proc amount

690
00:24:38,779 --> 00:24:42,049
exposes user mode helper programs such

691
00:24:40,340 --> 00:24:43,908
as the core pod pattern helper that we

692
00:24:42,049 --> 00:24:46,249
just introduced and as you notice from

693
00:24:43,909 --> 00:24:48,739
the slide we've got forces in the back

694
00:24:46,249 --> 00:24:50,419
proc mount is attached user mode

695
00:24:48,739 --> 00:24:57,979
callback that we're escaping at black

696
00:24:50,419 --> 00:25:00,169
hair right so yeah we'll actually demo

697
00:24:57,979 --> 00:25:02,029
that a little bit the core pattern one

698
00:25:00,169 --> 00:25:03,409
in the next section when we circle back

699
00:25:02,029 --> 00:25:05,299
to it to show that it can also be used

700
00:25:03,409 --> 00:25:06,859
under even more scenarios we don't want

701
00:25:05,299 --> 00:25:10,789
to have a repeat a demo all over the

702
00:25:06,859 --> 00:25:12,228
place this is just a summary of bad

703
00:25:10,789 --> 00:25:14,479
ideas we're sure you have plenty up your

704
00:25:12,229 --> 00:25:15,830
arm there other way to figure cell from

705
00:25:14,479 --> 00:25:16,970
the foot as well this is just some of

706
00:25:15,830 --> 00:25:21,529
the ways that people seem to do it most

707
00:25:16,970 --> 00:25:26,119
regularly so now on to volume 3 which is

708
00:25:21,529 --> 00:25:27,529
escaping via kernel exploitation it

709
00:25:26,119 --> 00:25:28,849
should be pretty obvious but the

710
00:25:27,529 --> 00:25:31,159
security model of containers is

711
00:25:28,849 --> 00:25:32,539
predicated on kernel integrity one thing

712
00:25:31,159 --> 00:25:34,009
that we're gonna discussions discuss in

713
00:25:32,539 --> 00:25:35,149
this section is how any kernel

714
00:25:34,009 --> 00:25:36,440
vulnerability which can be exploited to

715
00:25:35,149 --> 00:25:39,049
get arbitrary code execution and the

716
00:25:36,440 --> 00:25:40,519
kernel can also enable ask a pre but

717
00:25:39,049 --> 00:25:42,229
we're actually gonna start off with a

718
00:25:40,519 --> 00:25:43,279
vulnerability like an example

719
00:25:42,229 --> 00:25:45,200
vulnerability that doesn't grant you

720
00:25:43,279 --> 00:25:47,269
this in the kernel but does still allow

721
00:25:45,200 --> 00:25:48,710
you to escape demonstrate this we'll be

722
00:25:47,269 --> 00:25:50,179
walking through how exploiting dirty cow

723
00:25:48,710 --> 00:25:51,619
the implications of which are mostly in

724
00:25:50,179 --> 00:25:55,460
user land can be used to break out of a

725
00:25:51,619 --> 00:25:56,570
container dirty cow is a vulnerability

726
00:25:55,460 --> 00:25:58,700
affecting the kernels copy-on-write

727
00:25:56,570 --> 00:26:00,200
mechanism there's a lot of nuance in

728
00:25:58,700 --> 00:26:02,389
detail behind the mechanics of the

729
00:26:00,200 --> 00:26:03,799
copy-on-write mechanism and RD cow has

730
00:26:02,389 --> 00:26:05,178
itself exploited each topic would

731
00:26:03,799 --> 00:26:07,519
actually warrant its own presentation

732
00:26:05,179 --> 00:26:09,200
here if not even a longer slot somewhere

733
00:26:07,519 --> 00:26:10,489
so for the sake of brevity we're going

734
00:26:09,200 --> 00:26:11,989
to grossly summarize the mechanism in

735
00:26:10,489 --> 00:26:13,429
its exploitation so that we can jump

736
00:26:11,989 --> 00:26:16,879
into how you can use it for a scape

737
00:26:13,429 --> 00:26:18,499
artistry so the exploitation of dirty

738
00:26:16,879 --> 00:26:19,969
cow allowed for an unprivileged task to

739
00:26:18,499 --> 00:26:22,220
write to a read-only memory mapping

740
00:26:19,970 --> 00:26:24,259
including a shared file member memory

741
00:26:22,220 --> 00:26:25,879
mappings which resulted modified data

742
00:26:24,259 --> 00:26:28,190
being written back to the mapped file

743
00:26:25,879 --> 00:26:29,418
this could be used to overwrite library

744
00:26:28,190 --> 00:26:30,799
code on disk which will then later be

745
00:26:29,419 --> 00:26:33,049
executed by

746
00:26:30,799 --> 00:26:35,658
privileged programs and enabling a local

747
00:26:33,049 --> 00:26:36,739
privilege escalation which okay cool but

748
00:26:35,659 --> 00:26:38,029
that sounds like you have to be

749
00:26:36,739 --> 00:26:39,350
somewhere in an environment where

750
00:26:38,029 --> 00:26:41,390
something with more privileges

751
00:26:39,350 --> 00:26:42,949
files that you share and if containers

752
00:26:41,390 --> 00:26:44,240
have isolated file systems who cares of

753
00:26:42,950 --> 00:26:47,440
a container task can corrupt

754
00:26:44,240 --> 00:26:49,610
shared objects in the container

755
00:26:47,440 --> 00:26:51,500
introducing the virtual dynamic shared

756
00:26:49,610 --> 00:26:53,059
objects which is a special map being

757
00:26:51,500 --> 00:26:54,470
shared from the kernel with user land to

758
00:26:53,059 --> 00:26:55,879
provide quick access to frequently used

759
00:26:54,470 --> 00:26:59,740
functions without the pain the overhead

760
00:26:55,880 --> 00:27:01,970
of assist call for example calling time

761
00:26:59,740 --> 00:27:03,770
so on the Left we have a container

762
00:27:01,970 --> 00:27:05,240
that's running in its own namespace and

763
00:27:03,770 --> 00:27:06,918
isolated and on the right we have host

764
00:27:05,240 --> 00:27:10,640
emic tasks face which is a privilege and

765
00:27:06,919 --> 00:27:11,960
Protoss running in the host despite

766
00:27:10,640 --> 00:27:14,090
having separate virtual address spaces

767
00:27:11,960 --> 00:27:15,230
and the container having namespaces at

768
00:27:14,090 --> 00:27:19,129
the night when they look up at the sky

769
00:27:15,230 --> 00:27:20,539
they see the same video so so this means

770
00:27:19,130 --> 00:27:22,280
that the leaked container process can

771
00:27:20,539 --> 00:27:25,400
exploit dirty cow to modify the VDS so

772
00:27:22,280 --> 00:27:29,210
mapping and add some totally sweet new

773
00:27:25,400 --> 00:27:30,409
bonus features to it and everyone else

774
00:27:29,210 --> 00:27:32,000
who has the map in a video which is

775
00:27:30,409 --> 00:27:33,350
every other task including a host emic

776
00:27:32,000 --> 00:27:35,960
task face will include these sweet new

777
00:27:33,350 --> 00:27:37,580
bonus features so when hosting make

778
00:27:35,960 --> 00:27:44,179
fast-pace asks what time it is

779
00:27:37,580 --> 00:27:45,949
it's party time let's talk about I want

780
00:27:44,179 --> 00:27:47,780
to move here so that was like a one-off

781
00:27:45,950 --> 00:27:49,070
of like oh you can't get code execution

782
00:27:47,780 --> 00:27:50,240
from this in the kernel but you can in

783
00:27:49,070 --> 00:27:52,100
user land so that can help you get out

784
00:27:50,240 --> 00:27:54,740
of container I think we should talk

785
00:27:52,100 --> 00:27:55,969
about are talking about the means by

786
00:27:54,740 --> 00:27:57,350
which you can get out painter when you

787
00:27:55,970 --> 00:27:58,159
can get arbitrary code execution in the

788
00:27:57,350 --> 00:27:59,719
kernel

789
00:27:58,159 --> 00:28:00,650
we'll start by covering some common

790
00:27:59,720 --> 00:28:06,559
goals and patterns of kernel

791
00:28:00,650 --> 00:28:07,580
exploitation by doing this we're really

792
00:28:06,559 --> 00:28:09,470
going to go over the we're going to

793
00:28:07,580 --> 00:28:12,230
genera size the the kernel exploitation

794
00:28:09,470 --> 00:28:13,580
patterns and how those can apply to to

795
00:28:12,230 --> 00:28:15,200
get an escape without even talking about

796
00:28:13,580 --> 00:28:16,760
container specific structures and then

797
00:28:15,200 --> 00:28:19,190
we'll get into the container specific

798
00:28:16,760 --> 00:28:20,330
structures so let's say you're in user

799
00:28:19,190 --> 00:28:22,490
space and you've got a memory corruption

800
00:28:20,330 --> 00:28:24,039
bug or use after free in the kernel what

801
00:28:22,490 --> 00:28:26,150
are the standard exploitation patterns

802
00:28:24,039 --> 00:28:27,530
first step is usually performing the

803
00:28:26,150 --> 00:28:28,970
laborious work of setting up the bug

804
00:28:27,530 --> 00:28:30,470
this is the key demon egg nobility of

805
00:28:28,970 --> 00:28:31,760
grooming the memory layout or walking

806
00:28:30,470 --> 00:28:34,100
some object into a specific vulnerable

807
00:28:31,760 --> 00:28:35,059
state once your bug is set up you're

808
00:28:34,100 --> 00:28:36,559
ready to trigger it and inflict

809
00:28:35,059 --> 00:28:37,908
influence on whatever data structures

810
00:28:36,559 --> 00:28:39,470
they're now under your control perhaps

811
00:28:37,909 --> 00:28:41,780
corrupting a function pointer or return

812
00:28:39,470 --> 00:28:43,850
address from that point of having

813
00:28:41,780 --> 00:28:45,770
control of execution flow the next step

814
00:28:43,850 --> 00:28:47,330
in the pattern is to wrap like it's hot

815
00:28:45,770 --> 00:28:49,010
and usually you plan on a function like

816
00:28:47,330 --> 00:28:52,549
native right CR for to disable snappings

817
00:28:49,010 --> 00:28:53,450
map once you have Stefan's map disabled

818
00:28:52,549 --> 00:28:55,100
you then return to your

819
00:28:53,450 --> 00:28:57,260
and code this is one of the cooler parts

820
00:28:55,100 --> 00:28:59,360
about Colonel exploitation code now rain

821
00:28:57,260 --> 00:29:01,400
is ring zero as returned back because

822
00:28:59,360 --> 00:29:02,899
they can execute in userspace and so

823
00:29:01,400 --> 00:29:04,160
your payload that's running is ring zero

824
00:29:02,900 --> 00:29:07,700
is actually something you can write and

825
00:29:04,160 --> 00:29:09,350
see and this is one yet this is one more

826
00:29:07,700 --> 00:29:11,060
fun parts once you have your payload

827
00:29:09,350 --> 00:29:12,919
executing in user land the final step in

828
00:29:11,060 --> 00:29:15,350
textbook pattern for this exploitation

829
00:29:12,920 --> 00:29:16,670
is to call back in to prepare and commit

830
00:29:15,350 --> 00:29:17,929
new privileged credentials to the

831
00:29:16,670 --> 00:29:20,060
currently running task which gives your

832
00:29:17,930 --> 00:29:21,860
tasks privileges now you can spawn your

833
00:29:20,060 --> 00:29:23,570
route shell and do your stuff this is a

834
00:29:21,860 --> 00:29:25,159
very commonly repeated pattern across a

835
00:29:23,570 --> 00:29:28,250
lot of exploits all the way back to like

836
00:29:25,160 --> 00:29:29,840
spender stuff so here's the task struct

837
00:29:28,250 --> 00:29:30,980
and we can see that there's the task

838
00:29:29,840 --> 00:29:33,230
struct member cred is a pointer to

839
00:29:30,980 --> 00:29:34,790
provincials for this task the cred

840
00:29:33,230 --> 00:29:36,560
struct which is as we've just

841
00:29:34,790 --> 00:29:38,510
demonstrated one of the key targets of

842
00:29:36,560 --> 00:29:40,310
Linux exploitation for privilege

843
00:29:38,510 --> 00:29:41,750
escalation actually contains references

844
00:29:40,310 --> 00:29:44,389
to a vast majority of the security

845
00:29:41,750 --> 00:29:45,950
mechanisms used by containers so control

846
00:29:44,390 --> 00:29:47,090
the cred struct allows setting things

847
00:29:45,950 --> 00:29:48,980
like credentials to make the task group

848
00:29:47,090 --> 00:29:50,840
as well as possessing full capabilities

849
00:29:48,980 --> 00:29:52,640
but it goes beyond that you'll see that

850
00:29:50,840 --> 00:29:54,080
the void star security pointer there is

851
00:29:52,640 --> 00:29:55,520
kind of ambiguous but that's where app

852
00:29:54,080 --> 00:29:57,290
armor lives and so when you have the new

853
00:29:55,520 --> 00:29:58,879
credentials you also have no new no app

854
00:29:57,290 --> 00:30:01,399
armor constraints being applied to the

855
00:29:58,880 --> 00:30:03,710
task it's worth noting that we can see

856
00:30:01,400 --> 00:30:06,080
that user name space is also affected by

857
00:30:03,710 --> 00:30:07,880
this but it's not really because it's a

858
00:30:06,080 --> 00:30:09,830
different pointer than the one that's in

859
00:30:07,880 --> 00:30:11,030
the NS proxy of the task struct so it

860
00:30:09,830 --> 00:30:12,590
kind of puts the task into this weird

861
00:30:11,030 --> 00:30:15,530
state where for some operations like

862
00:30:12,590 --> 00:30:16,939
file operations you are true root

863
00:30:15,530 --> 00:30:18,260
because of the user name space control

864
00:30:16,940 --> 00:30:19,580
that comes out the credential struct but

865
00:30:18,260 --> 00:30:21,440
for doing other things like mounts that

866
00:30:19,580 --> 00:30:22,790
comes out the NS proxy struct and so

867
00:30:21,440 --> 00:30:26,620
it's like depending on what you're doing

868
00:30:22,790 --> 00:30:26,620
you may or may not have new privileges

869
00:30:29,230 --> 00:30:33,560
cool I think after so after Queen the

870
00:30:32,450 --> 00:30:35,420
new credit struct that you know with the

871
00:30:33,560 --> 00:30:37,460
vanilla is sort of textbook kernel

872
00:30:35,420 --> 00:30:39,170
equitation pattern this is more or less

873
00:30:37,460 --> 00:30:41,060
what a task security model really looks

874
00:30:39,170 --> 00:30:43,010
like most of the doors have been opened

875
00:30:41,060 --> 00:30:45,139
set comp is still there but most of its

876
00:30:43,010 --> 00:30:46,580
meaningful the directives are based on

877
00:30:45,140 --> 00:30:48,730
your capability set so it's less of a

878
00:30:46,580 --> 00:30:48,730
barrier

879
00:30:49,570 --> 00:30:56,240
sorry so before we get into faints our

880
00:30:54,710 --> 00:30:58,240
kernel struck manipulation let's just

881
00:30:56,240 --> 00:31:00,650
start from this textbook kernel pattern

882
00:30:58,240 --> 00:31:01,130
and and walk about like once you've

883
00:31:00,650 --> 00:31:02,780
called

884
00:31:01,130 --> 00:31:04,220
commit threads and gotten your new

885
00:31:02,780 --> 00:31:05,960
credential structs

886
00:31:04,220 --> 00:31:07,580
assuming that there's no user namespace

887
00:31:05,960 --> 00:31:10,010
set which again doctor and kubernetes do

888
00:31:07,580 --> 00:31:11,149
not set by default you can get you can

889
00:31:10,010 --> 00:31:12,320
start to do a lot of the same tricks as

890
00:31:11,150 --> 00:31:15,410
if you had been passed the privilege

891
00:31:12,320 --> 00:31:17,419
flag this means that the same user mode

892
00:31:15,410 --> 00:31:19,670
and helper payload start to apply so now

893
00:31:17,420 --> 00:31:22,660
finally we'll visualize the the core

894
00:31:19,670 --> 00:31:22,660
pattern one that we had mentioned before

895
00:31:24,940 --> 00:31:35,210
looking fake so we're in a container and

896
00:31:29,810 --> 00:31:36,800
I don't know how to use a mouse and so

897
00:31:35,210 --> 00:31:38,000
the first thing we're gonna do is show

898
00:31:36,800 --> 00:31:39,050
that we don't have capabilities I

899
00:31:38,000 --> 00:31:41,840
actually learned that I could have just

900
00:31:39,050 --> 00:31:43,159
run Kappa sage - print but you guys get

901
00:31:41,840 --> 00:31:45,889
to suffer through me copy and pasting

902
00:31:43,160 --> 00:31:47,210
for an extra 20 seconds but you can see

903
00:31:45,890 --> 00:31:49,040
our capabilities are pretty limited here

904
00:31:47,210 --> 00:31:50,270
there's just that reduced set that we

905
00:31:49,040 --> 00:31:52,010
have in here we have a privilege

906
00:31:50,270 --> 00:31:54,139
escalation exploit and a program to

907
00:31:52,010 --> 00:31:55,430
crash the privilege escalation it's not

908
00:31:54,140 --> 00:31:57,650
one that we wrote it's actually from

909
00:31:55,430 --> 00:31:59,540
Android Konovalov at Google we just took

910
00:31:57,650 --> 00:32:01,340
it off the shelf and as an example of

911
00:31:59,540 --> 00:32:09,379
like take a textbook kernel exploit turn

912
00:32:01,340 --> 00:32:10,429
it into a container escape so crash is a

913
00:32:09,380 --> 00:32:11,450
really dumb program we're just gonna

914
00:32:10,430 --> 00:32:13,010
show you is nothing up our sleeve we're

915
00:32:11,450 --> 00:32:16,970
a disassemble it you're gonna see it's

916
00:32:13,010 --> 00:32:18,530
got two instructions we extra route our

917
00:32:16,970 --> 00:32:20,990
ax and then we try to write something to

918
00:32:18,530 --> 00:32:24,020
that as a pointer as an address it's a

919
00:32:20,990 --> 00:32:25,130
dumb bug we run crash okay it's a sick

920
00:32:24,020 --> 00:32:26,120
fault okay so we've got our crashing

921
00:32:25,130 --> 00:32:27,620
programming this is important because

922
00:32:26,120 --> 00:32:29,659
for core pattern we're going to need to

923
00:32:27,620 --> 00:32:31,550
have a crash to trigger that event so

924
00:32:29,660 --> 00:32:34,640
let's set up our callback for our shell

925
00:32:31,550 --> 00:32:36,860
again so get our IP address gonna get

926
00:32:34,640 --> 00:32:39,800
shell a little shell script back in here

927
00:32:36,860 --> 00:32:51,320
for again our dev tcp standard connect

928
00:32:39,800 --> 00:32:54,100
back and we're gonna paste in this stuff

929
00:32:51,320 --> 00:32:58,760
and I'll pause here to talk through it

930
00:32:54,100 --> 00:33:00,830
okay so we are we're in a container

931
00:32:58,760 --> 00:33:03,140
we've escalated privileges there's an

932
00:33:00,830 --> 00:33:04,550
existing proc thing present so we're

933
00:33:03,140 --> 00:33:07,070
gonna mount a new proc mount that has

934
00:33:04,550 --> 00:33:08,210
readwrite there are other ways you can

935
00:33:07,070 --> 00:33:09,290
you can work around this we may be able

936
00:33:08,210 --> 00:33:12,050
get into if there's time for me at the

937
00:33:09,290 --> 00:33:13,490
end but in short you can see that this

938
00:33:12,050 --> 00:33:15,020
also follows a lot of the same pattern

939
00:33:13,490 --> 00:33:17,960
of the other exploits that we were

940
00:33:15,020 --> 00:33:19,879
talking about so we need to get the

941
00:33:17,960 --> 00:33:21,799
IFS which we do thanks again Felix we

942
00:33:19,880 --> 00:33:23,659
prepend that to our payload we echo that

943
00:33:21,799 --> 00:33:25,580
into core pattern what determines what

944
00:33:23,659 --> 00:33:27,770
happens when a crash happens we're going

945
00:33:25,580 --> 00:33:30,320
to make it executable and then we're

946
00:33:27,770 --> 00:33:32,120
gonna we're going to run the escape in

947
00:33:30,320 --> 00:33:34,279
the background because it's going to

948
00:33:32,120 --> 00:33:37,279
connect back to us ah so first we run a

949
00:33:34,279 --> 00:33:40,580
privilege escalation right this is we've

950
00:33:37,279 --> 00:33:41,690
now updated our cred struct and this is

951
00:33:40,580 --> 00:33:42,980
probably unnecessary but to show you

952
00:33:41,690 --> 00:33:47,570
look our caps have changed we've got

953
00:33:42,980 --> 00:33:48,740
better capabilities so we run the escape

954
00:33:47,570 --> 00:33:50,360
in the background and we actually have

955
00:33:48,740 --> 00:33:52,039
to get out of the root shell that it

956
00:33:50,360 --> 00:33:53,240
gave us because it ended up disabling a

957
00:33:52,039 --> 00:33:55,669
bunch of networking so we had to go back

958
00:33:53,240 --> 00:33:56,929
to our foe root shell and then as you

959
00:33:55,669 --> 00:33:58,640
can see a second later we get our

960
00:33:56,929 --> 00:34:03,549
connect back from the crash being called

961
00:33:58,640 --> 00:34:03,549
by the escape and now we are on the host

962
00:34:06,940 --> 00:34:11,389
so things can be a little different if

963
00:34:09,379 --> 00:34:13,250
the container is actually using user

964
00:34:11,389 --> 00:34:15,169
name spaces they help for a lot of

965
00:34:13,250 --> 00:34:16,339
different things but not so much when

966
00:34:15,168 --> 00:34:18,649
you're inside the kernel you can just

967
00:34:16,339 --> 00:34:20,299
apply a few extra steps ultimately we

968
00:34:18,649 --> 00:34:21,830
just want to apply some properties of an

969
00:34:20,300 --> 00:34:23,690
Alec container task to our in container

970
00:34:21,830 --> 00:34:24,889
task and there are a whole bunch of

971
00:34:23,690 --> 00:34:28,790
routes we can take for this so it's come

972
00:34:24,889 --> 00:34:30,409
in touch with a couple this approach is

973
00:34:28,790 --> 00:34:33,020
largely taken from a public container

974
00:34:30,409 --> 00:34:34,339
escape exploit published in March by

975
00:34:33,020 --> 00:34:36,830
cyber rack and we're gonna spend a

976
00:34:34,339 --> 00:34:38,299
minute or two going over their steps in

977
00:34:36,830 --> 00:34:40,489
short they focused on stealing some

978
00:34:38,300 --> 00:34:42,889
privileged namespaces the mount and the

979
00:34:40,489 --> 00:34:45,279
hood namespaces copying these from and

980
00:34:42,889 --> 00:34:48,169
our container process gave us the

981
00:34:45,280 --> 00:34:50,780
processes view that processes view of

982
00:34:48,168 --> 00:34:55,069
the whole system from root down prog

983
00:34:50,780 --> 00:34:57,109
answers all good things so to escape by

984
00:34:55,070 --> 00:34:59,810
stealing namespaces we first needed a

985
00:34:57,109 --> 00:35:00,770
namespace to steal an NES proxy that's

986
00:34:59,810 --> 00:35:03,710
outside of the container

987
00:35:00,770 --> 00:35:06,259
well this exploit did was copy its in

988
00:35:03,710 --> 00:35:08,359
its proxies Mountain namespace today in

989
00:35:06,260 --> 00:35:10,430
container in it or in container had one

990
00:35:08,359 --> 00:35:14,000
which gives out in container in its

991
00:35:10,430 --> 00:35:16,520
super powers note that in s proxy is not

992
00:35:14,000 --> 00:35:19,070
exactly the same as the Innis proxy of

993
00:35:16,520 --> 00:35:21,050
the init process it's a global that can

994
00:35:19,070 --> 00:35:22,520
contain all the initial that does

995
00:35:21,050 --> 00:35:24,619
contain all of the initial namespaces

996
00:35:22,520 --> 00:35:26,300
for the system and we use the switch

997
00:35:24,619 --> 00:35:27,470
attached namespaces as function here as

998
00:35:26,300 --> 00:35:31,240
it holds our hand and does a heap of

999
00:35:27,470 --> 00:35:33,520
divorce so after

1000
00:35:31,240 --> 00:35:35,560
our pet one now has the ultimate pony

1001
00:35:33,520 --> 00:35:40,150
namespace instead of the kind of lame

1002
00:35:35,560 --> 00:35:42,759
horse mount namespace down there and at

1003
00:35:40,150 --> 00:35:44,800
this point in our process the our

1004
00:35:42,760 --> 00:35:47,380
exposure still has the containers file

1005
00:35:44,800 --> 00:35:49,990
system here so if you're inspecting

1006
00:35:47,380 --> 00:35:53,440
prog-rock one is not true in it it is

1007
00:35:49,990 --> 00:35:55,240
like cheaper lame in it so we can get

1008
00:35:53,440 --> 00:35:57,700
the father scripture file descriptor of

1009
00:35:55,240 --> 00:36:04,390
that in the process and open proc one in

1010
00:35:57,700 --> 00:36:06,819
its mount and apply Cygnus on that so

1011
00:36:04,390 --> 00:36:09,100
stiffness is going to apply the

1012
00:36:06,820 --> 00:36:11,890
namespace referred to in their part

1013
00:36:09,100 --> 00:36:12,910
descriptor to the calling process and it

1014
00:36:11,890 --> 00:36:15,270
can be filtered by the second argument

1015
00:36:12,910 --> 00:36:17,980
zero means everything

1016
00:36:15,270 --> 00:36:19,570
once our exploit completes and spawns a

1017
00:36:17,980 --> 00:36:21,400
shell that shows only have the same file

1018
00:36:19,570 --> 00:36:24,940
system view as the outer container

1019
00:36:21,400 --> 00:36:26,680
process so we can see things on proc run

1020
00:36:24,940 --> 00:36:28,630
other containers that kind of thing this

1021
00:36:26,680 --> 00:36:31,390
is a cut-down version of the public

1022
00:36:28,630 --> 00:36:33,070
exploit we mentioned and it works for

1023
00:36:31,390 --> 00:36:35,529
the most part but there are few things

1024
00:36:33,070 --> 00:36:38,050
that are not like I've never seen it

1025
00:36:35,530 --> 00:36:39,640
right with this approach the first thing

1026
00:36:38,050 --> 00:36:42,609
is that the published exploit also

1027
00:36:39,640 --> 00:36:43,690
states the pig namespace on the child in

1028
00:36:42,609 --> 00:36:45,759
the same manner as if there's a mountain

1029
00:36:43,690 --> 00:36:47,440
namespace and we didn't include it in

1030
00:36:45,760 --> 00:36:50,740
the walkthrough here because even if you

1031
00:36:47,440 --> 00:36:53,980
do do this it doesn't actually work you

1032
00:36:50,740 --> 00:36:55,839
can't enter you can use it into a child

1033
00:36:53,980 --> 00:36:57,340
namespaces but you can go into a lower

1034
00:36:55,840 --> 00:37:00,850
per namespace you can't go into the hotz

1035
00:36:57,340 --> 00:37:02,410
bit namespace it honestly it's better

1036
00:37:00,850 --> 00:37:03,850
not to bother with like messing with ped

1037
00:37:02,410 --> 00:37:06,540
namespaces the mapping and tracking of

1038
00:37:03,850 --> 00:37:08,830
pins and bursts and hashmaps and

1039
00:37:06,540 --> 00:37:11,410
parent-child and skipping structures non

1040
00:37:08,830 --> 00:37:16,000
trivial and prone to making weird things

1041
00:37:11,410 --> 00:37:17,379
happen in the kernel and you really

1042
00:37:16,000 --> 00:37:19,180
don't need to worry about the pad

1043
00:37:17,380 --> 00:37:20,770
namespace the other thing that's a

1044
00:37:19,180 --> 00:37:24,359
little bit off about this approach is

1045
00:37:20,770 --> 00:37:27,100
that the containers in the process

1046
00:37:24,359 --> 00:37:29,619
sitting there to have the same namespace

1047
00:37:27,100 --> 00:37:31,690
as real in it is not the best idea

1048
00:37:29,619 --> 00:37:33,550
because their processes there's all

1049
00:37:31,690 --> 00:37:34,690
things that's good one and guess what

1050
00:37:33,550 --> 00:37:36,340
happens if you try and spawn in your

1051
00:37:34,690 --> 00:37:38,880
process when you think you'll pick one

1052
00:37:36,340 --> 00:37:40,930
but you're not paid one you get killed

1053
00:37:38,880 --> 00:37:43,000
the whole container gets killed and

1054
00:37:40,930 --> 00:37:44,049
often the whole system locks out as well

1055
00:37:43,000 --> 00:37:47,859
which is

1056
00:37:44,049 --> 00:37:49,150
optimal so we can take more of a cool

1057
00:37:47,859 --> 00:37:50,769
egg guy approach and steal a different

1058
00:37:49,150 --> 00:37:52,630
resource from a more privileged process

1059
00:37:50,769 --> 00:37:54,218
and this is what we do now contain your

1060
00:37:52,630 --> 00:37:55,809
scape exploit which we released like a

1061
00:37:54,219 --> 00:37:59,140
handful of days I think after the first

1062
00:37:55,809 --> 00:38:01,269
one and who this we're going to talk

1063
00:37:59,140 --> 00:38:03,279
about the a pest drugs which holds

1064
00:38:01,269 --> 00:38:05,738
information about the task current pulse

1065
00:38:03,279 --> 00:38:08,380
in position with Patrick's one for the

1066
00:38:05,739 --> 00:38:11,170
road file system and one for CW dating

1067
00:38:08,380 --> 00:38:12,849
and the path strength itself contains

1068
00:38:11,170 --> 00:38:13,929
india-based mount and this contains

1069
00:38:12,849 --> 00:38:16,420
reference to the mountain name space is

1070
00:38:13,929 --> 00:38:17,769
appropriate to it so copying the hippies

1071
00:38:16,420 --> 00:38:20,439
trucks of a non containerized process

1072
00:38:17,769 --> 00:38:22,109
over to your exploit process is quick

1073
00:38:20,439 --> 00:38:25,058
win and you'll get paul paestum access

1074
00:38:22,109 --> 00:38:26,319
to borrow this if a strikes of an

1075
00:38:25,059 --> 00:38:28,539
uncontained process we first need to

1076
00:38:26,319 --> 00:38:30,249
find an uncontained process to reference

1077
00:38:28,539 --> 00:38:31,569
there are few ways to do so we're gonna

1078
00:38:30,249 --> 00:38:34,209
use a little loop that checks the pin

1079
00:38:31,569 --> 00:38:37,150
value that you see in TAS trucks okay

1080
00:38:34,209 --> 00:38:39,459
this pit is the real code that the host

1081
00:38:37,150 --> 00:38:41,499
name space sees not the inner name space

1082
00:38:39,459 --> 00:38:42,868
pizza seen inside child name spaces are

1083
00:38:41,499 --> 00:38:44,618
inside a set of different structures

1084
00:38:42,869 --> 00:38:46,479
which we don't really need to worry

1085
00:38:44,619 --> 00:38:47,650
about for this exercise but if you go

1086
00:38:46,479 --> 00:38:51,519
the namespace cropping route you

1087
00:38:47,650 --> 00:38:53,380
definitely need to worry about and this

1088
00:38:51,519 --> 00:38:54,488
is a quick alert that it's basically

1089
00:38:53,380 --> 00:38:56,229
it's gonna Traverse up to the real

1090
00:38:54,489 --> 00:38:59,369
parent injury and the task tries to

1091
00:38:56,229 --> 00:39:02,049
check if the given task peds one and

1092
00:38:59,369 --> 00:39:05,259
that is not like cheapo container pit

1093
00:39:02,049 --> 00:39:08,939
one so keep on looping and when it's

1094
00:39:05,259 --> 00:39:12,009
there we can swap it out and we can copy

1095
00:39:08,939 --> 00:39:21,819
real in its airstrikes over to our

1096
00:39:12,009 --> 00:39:23,589
process it's super quick demo of this so

1097
00:39:21,819 --> 00:39:25,538
we're gonna start by running a container

1098
00:39:23,589 --> 00:39:29,229
this one does have cycle and combined

1099
00:39:25,539 --> 00:39:30,789
just like revenues and spread a few

1100
00:39:29,229 --> 00:39:33,339
commands install a couple of tools and

1101
00:39:30,789 --> 00:39:35,670
admin privileges user and switch to they

1102
00:39:33,339 --> 00:39:35,670
use them

1103
00:39:41,010 --> 00:39:45,580
so just showing our current capabilities

1104
00:39:43,660 --> 00:39:49,000
we have just a standard Bacchus hit

1105
00:39:45,580 --> 00:39:52,060
nothing too exciting nothing on home do

1106
00:39:49,000 --> 00:39:54,700
a cheer we are in a container so just

1107
00:39:52,060 --> 00:39:56,350
gonna copy over container scrapings

1108
00:39:54,700 --> 00:39:58,120
whether it's just using justice justice

1109
00:39:56,350 --> 00:40:01,080
and starting them and a different screen

1110
00:39:58,120 --> 00:40:04,839
window and we'll run our escape exploit

1111
00:40:01,080 --> 00:40:09,460
so now if we get capabilities again we

1112
00:40:04,840 --> 00:40:10,360
have all of them just great we can see

1113
00:40:09,460 --> 00:40:14,800
all the questions of the writing on the

1114
00:40:10,360 --> 00:40:16,540
system and we can also see that them and

1115
00:40:14,800 --> 00:40:17,590
since we opened up just before but we

1116
00:40:16,540 --> 00:40:19,960
can't kill it because we're not in the

1117
00:40:17,590 --> 00:40:21,790
same good namespace we can see it

1118
00:40:19,960 --> 00:40:23,890
because our proxies it but we can't

1119
00:40:21,790 --> 00:40:26,470
actually reference it but we can now

1120
00:40:23,890 --> 00:40:28,359
start a privileged container and mapping

1121
00:40:26,470 --> 00:40:30,250
the hosts use the hosted namespace and

1122
00:40:28,360 --> 00:40:31,870
map in the hosts root filesystem and

1123
00:40:30,250 --> 00:40:33,850
once you've done them and just route

1124
00:40:31,870 --> 00:40:40,870
them through the mapped in one and we

1125
00:40:33,850 --> 00:40:42,339
can kill the the process with fire so

1126
00:40:40,870 --> 00:40:43,779
missing around pet namespaces really

1127
00:40:42,340 --> 00:40:45,270
isn't necessary it's more trouble than

1128
00:40:43,780 --> 00:40:47,920
it's worth

1129
00:40:45,270 --> 00:40:49,930
alright so we're at time we're getting

1130
00:40:47,920 --> 00:40:51,580
close to it we may have a little bit of

1131
00:40:49,930 --> 00:40:53,169
extra time here so if so we may show an

1132
00:40:51,580 --> 00:40:54,670
extra video which I think right 10

1133
00:40:53,170 --> 00:40:59,680
minutes but let's let's wrap up with our

1134
00:40:54,670 --> 00:41:01,000
takeaways the differences in container

1135
00:40:59,680 --> 00:41:02,830
engines deployment tools Linux

1136
00:41:01,000 --> 00:41:04,930
distributions greatly affect how secure

1137
00:41:02,830 --> 00:41:06,160
containers are so like running docker on

1138
00:41:04,930 --> 00:41:08,109
your own to run that exploit you'd have

1139
00:41:06,160 --> 00:41:09,490
to remove seccomp but running kubernetes

1140
00:41:08,110 --> 00:41:11,500
you don't have to remove SATCOM because

1141
00:41:09,490 --> 00:41:12,729
it just doesn't apply SATCOM the same

1142
00:41:11,500 --> 00:41:14,950
container engine will operate different

1143
00:41:12,730 --> 00:41:16,600
on different linux distros some

1144
00:41:14,950 --> 00:41:19,000
container engines really don't care like

1145
00:41:16,600 --> 00:41:20,200
rocket abstractions provided by the

1146
00:41:19,000 --> 00:41:22,150
orchestration can make things worse

1147
00:41:20,200 --> 00:41:23,410
again kubernetes and abstraction upon

1148
00:41:22,150 --> 00:41:27,150
abstraction layers is a whole nother

1149
00:41:23,410 --> 00:41:29,470
tire fire hi openshift

1150
00:41:27,150 --> 00:41:31,540
user namespaces are one of the best

1151
00:41:29,470 --> 00:41:33,580
isolation mechanisms when they don't

1152
00:41:31,540 --> 00:41:35,080
enable privilege escalations themselves

1153
00:41:33,580 --> 00:41:36,910
so like well it's an effective mechanism

1154
00:41:35,080 --> 00:41:38,980
to use the CVE that we have up here from

1155
00:41:36,910 --> 00:41:40,990
2018 with a kernel bug and UID mapping

1156
00:41:38,980 --> 00:41:42,400
that actually let you break out so it's

1157
00:41:40,990 --> 00:41:44,439
a little ironic when the goal is to like

1158
00:41:42,400 --> 00:41:48,820
isolate the user and it lets you break

1159
00:41:44,440 --> 00:41:51,430
out of it namespace engine bugs are

1160
00:41:48,820 --> 00:41:53,590
awesome but probably not how you're

1161
00:41:51,430 --> 00:41:54,080
going to get popped where WC Mobile

1162
00:41:53,590 --> 00:41:55,820
container

1163
00:41:54,080 --> 00:41:57,049
bugs but they're all pretty trains it in

1164
00:41:55,820 --> 00:41:59,750
nature they're gonna get patched an

1165
00:41:57,050 --> 00:42:01,310
issue use rocket I suppose much more

1166
00:41:59,750 --> 00:42:03,140
useful for attackers are the techniques

1167
00:42:01,310 --> 00:42:04,880
exploiting poorly configured containers

1168
00:42:03,140 --> 00:42:06,799
with extra privileges because there are

1169
00:42:04,880 --> 00:42:08,840
infinite flaws and layer 8 and we're

1170
00:42:06,800 --> 00:42:10,430
who's deploying containers order the

1171
00:42:08,840 --> 00:42:12,880
term so that's probably how you can end

1172
00:42:10,430 --> 00:42:14,990
up getting out there are also of course

1173
00:42:12,880 --> 00:42:16,700
streaming supplied bugs in the kernel

1174
00:42:14,990 --> 00:42:17,810
the namespace one is one we just

1175
00:42:16,700 --> 00:42:18,980
mentioned but really for any decent

1176
00:42:17,810 --> 00:42:20,900
kernel bug you can pound include

1177
00:42:18,980 --> 00:42:24,140
container scape dot H and turn it into a

1178
00:42:20,900 --> 00:42:26,150
portal gun good thing there aren't that

1179
00:42:24,140 --> 00:42:28,160
many kernel bugs accepts so this is this

1180
00:42:26,150 --> 00:42:29,240
is a screenshot of sis bot that's just

1181
00:42:28,160 --> 00:42:30,649
running out there on the internet

1182
00:42:29,240 --> 00:42:34,069
publishing kernel bugs every day as it

1183
00:42:30,650 --> 00:42:35,780
finds them in like part of why I really

1184
00:42:34,070 --> 00:42:37,310
wanted to submit this talk was you know

1185
00:42:35,780 --> 00:42:39,500
when the run seed bug came out everyone

1186
00:42:37,310 --> 00:42:41,480
lost their minds but then when a kernel

1187
00:42:39,500 --> 00:42:45,470
bugs are being cranked out every day

1188
00:42:41,480 --> 00:42:47,390
nobody bats an eyelid so anyway I like

1189
00:42:45,470 --> 00:42:49,100
once that we saw was in 2018 the kernel

1190
00:42:47,390 --> 00:42:51,049
gained a delta on average of about 900

1191
00:42:49,100 --> 00:42:55,910
lines of code today so this will will

1192
00:42:51,050 --> 00:42:57,740
not dry up very soon yeah

1193
00:42:55,910 --> 00:42:59,660
thanks everyone for coming along I hope

1194
00:42:57,740 --> 00:43:00,919
you learned something please check out

1195
00:42:59,660 --> 00:43:02,359
vlog and the coming weeks put some blog

1196
00:43:00,920 --> 00:43:04,640
posts that will go into more detail some

1197
00:43:02,360 --> 00:43:06,870
of these sections and you know company

1198
00:43:04,640 --> 00:43:11,020
in the store yep thank you

1199
00:43:06,870 --> 00:43:11,020
[Applause]

