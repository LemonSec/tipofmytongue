1
00:00:00,030 --> 00:00:04,890
complex solutions that include some of

2
00:00:02,310 --> 00:00:06,839
those pieces and then we also do your

3
00:00:04,890 --> 00:00:08,399
more standard penetration testing and

4
00:00:06,839 --> 00:00:09,660
red teaming and other things like that a

5
00:00:08,400 --> 00:00:11,639
little bit out of scope for this talk

6
00:00:09,660 --> 00:00:13,559
though so we've been working on servers

7
00:00:11,639 --> 00:00:15,209
in particular for a couple of different

8
00:00:13,559 --> 00:00:19,140
customers that have unique and

9
00:00:15,210 --> 00:00:24,539
interesting use cases and design

10
00:00:19,140 --> 00:00:27,900
requirements and drivers that push

11
00:00:24,539 --> 00:00:31,050
security in the right direction so it's

12
00:00:27,900 --> 00:00:33,690
been it's been fun to learn sort of over

13
00:00:31,050 --> 00:00:35,040
the over time about where the

14
00:00:33,690 --> 00:00:36,360
vulnerabilities have been and where the

15
00:00:35,040 --> 00:00:39,600
problems have been and then seeing it

16
00:00:36,360 --> 00:00:41,809
evolve and seeing it the attack surface

17
00:00:39,600 --> 00:00:43,920
shrink and a bunch of other sort of more

18
00:00:41,809 --> 00:00:47,430
maturity minded things that have been

19
00:00:43,920 --> 00:00:49,469
occurring and in working through that so

20
00:00:47,430 --> 00:00:51,719
this talk then

21
00:00:49,469 --> 00:00:53,550
former cartography what does that even

22
00:00:51,719 --> 00:00:56,730
mean what are we talking about so the

23
00:00:53,550 --> 00:01:00,569
point here is we're saying in a modern

24
00:00:56,730 --> 00:01:03,989
new server attack surface has been

25
00:01:00,570 --> 00:01:06,060
reduced if configured correctly attack

26
00:01:03,989 --> 00:01:10,610
surface has been reduced to such a

27
00:01:06,060 --> 00:01:12,900
degree that we're left with much smaller

28
00:01:10,610 --> 00:01:15,780
windows through which we need to do all

29
00:01:12,900 --> 00:01:18,119
the stuff we want to do as attackers in

30
00:01:15,780 --> 00:01:19,530
doing so how do you figure that out

31
00:01:18,119 --> 00:01:22,710
right and that's the whole point of this

32
00:01:19,530 --> 00:01:25,439
talk it's saying let's pull apart the

33
00:01:22,710 --> 00:01:27,689
whole sort of server a modern server

34
00:01:25,439 --> 00:01:29,899
let's we want to talk about it in terms

35
00:01:27,689 --> 00:01:34,559
of this is how we approach the problem

36
00:01:29,900 --> 00:01:38,759
so there are a lot of talks you know

37
00:01:34,560 --> 00:01:40,530
across across blackhat this year and in

38
00:01:38,759 --> 00:01:42,270
prior years that focus in on a lot of

39
00:01:40,530 --> 00:01:43,950
the individual pieces we're gonna use a

40
00:01:42,270 --> 00:01:47,460
couple of case studies here in a bit

41
00:01:43,950 --> 00:01:49,920
that will talk through that but the idea

42
00:01:47,460 --> 00:01:51,750
here is to explain and cover the attack

43
00:01:49,920 --> 00:01:53,070
surface the reasons why you would want

44
00:01:51,750 --> 00:01:55,860
to hit up hit these different things the

45
00:01:53,070 --> 00:01:58,949
kind of problems where that exists in

46
00:01:55,860 --> 00:02:00,539
these different components and as we get

47
00:01:58,950 --> 00:02:03,030
towards the end will particularly focus

48
00:02:00,540 --> 00:02:05,939
on this is this is where it's going

49
00:02:03,030 --> 00:02:08,489
right so if you care about security then

50
00:02:05,939 --> 00:02:10,288
you're doing X Y & Z and you're you are

51
00:02:08,489 --> 00:02:13,440
configuring your newer servers in

52
00:02:10,288 --> 00:02:15,630
certain fashions even when it's for

53
00:02:13,440 --> 00:02:17,520
configured you end up with certain

54
00:02:15,630 --> 00:02:18,900
amounts of attack surface and so that's

55
00:02:17,520 --> 00:02:23,400
where we enjoy spending a lot of our

56
00:02:18,900 --> 00:02:26,070
time right Amanat server now it's full

57
00:02:23,400 --> 00:02:27,750
of many different components right

58
00:02:26,070 --> 00:02:29,489
you've got servers and side servers you

59
00:02:27,750 --> 00:02:31,620
get computers and side computers all the

60
00:02:29,490 --> 00:02:32,670
way down as I mentioned you know there's

61
00:02:31,620 --> 00:02:35,720
been a lot of talk to the last 15 years

62
00:02:32,670 --> 00:02:38,820
UEFI BMC there's constantly new pieces

63
00:02:35,720 --> 00:02:41,010
but as it becomes more hardened that

64
00:02:38,820 --> 00:02:43,620
that that attack surface is concentrated

65
00:02:41,010 --> 00:02:45,090
into fewer and fewer components you end

66
00:02:43,620 --> 00:02:46,590
up will you have gating events where you

67
00:02:45,090 --> 00:02:48,510
need to you need to compromise you know

68
00:02:46,590 --> 00:02:49,620
that thing over there first to get all

69
00:02:48,510 --> 00:02:52,380
the information that you might want to

70
00:02:49,620 --> 00:02:54,510
crowbar open that the attack surface

71
00:02:52,380 --> 00:02:58,650
again and then be able to you know pivot

72
00:02:54,510 --> 00:03:01,530
into other components so we'll talk

73
00:02:58,650 --> 00:03:03,390
through all those different areas all

74
00:03:01,530 --> 00:03:05,640
right so what's the set that matters

75
00:03:03,390 --> 00:03:07,619
here right so we're we're we're being a

76
00:03:05,640 --> 00:03:10,260
little hand wavy on purpose and we are

77
00:03:07,620 --> 00:03:12,480
summarizing multiple components into one

78
00:03:10,260 --> 00:03:13,920
group to be able to talk about it in in

79
00:03:12,480 --> 00:03:16,320
those fashions so like here's where we

80
00:03:13,920 --> 00:03:17,790
got right we've got host SM in BMC

81
00:03:16,320 --> 00:03:20,269
peripherals and chipset and we'll walk

82
00:03:17,790 --> 00:03:22,440
through those here in some detail so

83
00:03:20,270 --> 00:03:23,970
like starting in the host this is the

84
00:03:22,440 --> 00:03:25,320
thing everybody thinks of this is what

85
00:03:23,970 --> 00:03:29,459
it's exactly what it sounds like right

86
00:03:25,320 --> 00:03:32,970
this is the your software that's running

87
00:03:29,459 --> 00:03:35,250
on a CPU for a lot of the attack chains

88
00:03:32,970 --> 00:03:38,160
that we'll talk about today we kind of

89
00:03:35,250 --> 00:03:39,720
glop what happens inside the host right

90
00:03:38,160 --> 00:04:01,410
there's a ton of talks talking about all

91
00:03:39,720 --> 00:04:03,360
and you guys know all the loaner

92
00:04:01,410 --> 00:04:05,640
abilities that are related to these

93
00:04:03,360 --> 00:04:08,100
platforms in userland

94
00:04:05,640 --> 00:04:11,279
on these hosts and that's actually a

95
00:04:08,100 --> 00:04:13,320
gigantic attack surface so it it's

96
00:04:11,280 --> 00:04:14,700
relatively unhardened like i was looking

97
00:04:13,320 --> 00:04:18,418
at it and prep for this talk like last

98
00:04:14,700 --> 00:04:20,969
week and and take it found to 200 days

99
00:04:18,418 --> 00:04:24,060
like just still out on my lap I think

100
00:04:20,970 --> 00:04:26,260
it's a very unreviewed environment and

101
00:04:24,060 --> 00:04:29,650
if this stuff is MIT is meant to

102
00:04:26,260 --> 00:04:31,570
you tear down all the walls that we're

103
00:04:29,650 --> 00:04:33,280
saying are important right so like we

104
00:04:31,570 --> 00:04:36,880
really like isolation we really like

105
00:04:33,280 --> 00:04:38,140
pulling apart components and minimizing

106
00:04:36,880 --> 00:04:39,850
the amount of interactions that they can

107
00:04:38,140 --> 00:04:41,349
have so that you have a sort of a choke

108
00:04:39,850 --> 00:04:43,720
point you can look at that you can you

109
00:04:41,350 --> 00:04:45,580
can make sure while the code that's

110
00:04:43,720 --> 00:04:47,350
processing you know between these

111
00:04:45,580 --> 00:04:50,219
interfaces has been hardened it's been

112
00:04:47,350 --> 00:04:52,810
reviewed etc whereas a lot of the

113
00:04:50,220 --> 00:04:54,160
systems management types of software you

114
00:04:52,810 --> 00:04:56,440
know enterprise pieces that get layered

115
00:04:54,160 --> 00:04:59,530
on for any vendor doesn't matter

116
00:04:56,440 --> 00:05:00,700
for any video s actually - so whether

117
00:04:59,530 --> 00:05:07,450
we're talking about Windows or Linux or

118
00:05:00,700 --> 00:05:09,760
anything else it's it's designed to to

119
00:05:07,450 --> 00:05:11,979
create as many pipes as possible between

120
00:05:09,760 --> 00:05:13,090
these different components so they just

121
00:05:11,980 --> 00:05:15,010
mentioned that and there are definitely

122
00:05:13,090 --> 00:05:17,020
a security ramifications to it and what

123
00:05:15,010 --> 00:05:21,820
it also means is that some of the

124
00:05:17,020 --> 00:05:25,270
vulnerabilities that that we that we

125
00:05:21,820 --> 00:05:27,340
find that we use ourselves in testing

126
00:05:25,270 --> 00:05:29,680
you know being able to get a greater

127
00:05:27,340 --> 00:05:33,700
viewpoint on a system to be able to to

128
00:05:29,680 --> 00:05:35,830
assess it it's been a little while since

129
00:05:33,700 --> 00:05:37,960
I've heard the argument but there there

130
00:05:35,830 --> 00:05:39,520
used to be a common argument of well you

131
00:05:37,960 --> 00:05:44,320
know you have to have root to do that

132
00:05:39,520 --> 00:05:45,460
right for those kind of things and one

133
00:05:44,320 --> 00:05:48,930
getting roots actually not that hard

134
00:05:45,460 --> 00:05:51,729
that said but then even on top of that -

135
00:05:48,930 --> 00:05:53,560
there are several cases where these

136
00:05:51,730 --> 00:05:57,520
enterprise management layers are

137
00:05:53,560 --> 00:05:59,770
exposing that functionality down to user

138
00:05:57,520 --> 00:06:03,039
land and down to in down and unsafe ways

139
00:05:59,770 --> 00:06:05,530
so the like that the issues that just

140
00:06:03,040 --> 00:06:07,300
fell on my lap were related to how well

141
00:06:05,530 --> 00:06:09,880
that's secured and who can interact with

142
00:06:07,300 --> 00:06:11,890
those things so the other the other

143
00:06:09,880 --> 00:06:15,010
thing to keep in mind is that for the

144
00:06:11,890 --> 00:06:16,599
host you're not always running when

145
00:06:15,010 --> 00:06:19,000
you're in hardware so now with the cloud

146
00:06:16,600 --> 00:06:19,840
and bare metal hosting there are times

147
00:06:19,000 --> 00:06:22,450
when you're gonna be running on a

148
00:06:19,840 --> 00:06:23,530
machine that's not yours and you're

149
00:06:22,450 --> 00:06:26,050
gonna be giving your machine out to

150
00:06:23,530 --> 00:06:27,789
someone who's not you so in that case

151
00:06:26,050 --> 00:06:31,000
you're you're explicitly giving access

152
00:06:27,790 --> 00:06:34,090
to those so it's another sort of twist

153
00:06:31,000 --> 00:06:36,190
on the only old the attack model that we

154
00:06:34,090 --> 00:06:38,049
have in mind we're here we're giving up

155
00:06:36,190 --> 00:06:39,820
the host keeping in mind that we have

156
00:06:38,050 --> 00:06:42,900
these other gates

157
00:06:39,820 --> 00:06:45,099
hopefully keeping keeping the hordes out

158
00:06:42,900 --> 00:06:46,599
yeah and you know and I know that the

159
00:06:45,100 --> 00:06:48,280
you know windows in particular has been

160
00:06:46,600 --> 00:06:50,230
trying to focus on some of this level of

161
00:06:48,280 --> 00:06:52,270
hardening and trying to turn off some of

162
00:06:50,230 --> 00:06:54,880
the like the interfaces that would let

163
00:06:52,270 --> 00:06:56,710
you do these things it's certainly at

164
00:06:54,880 --> 00:06:58,600
least easily right a lot of the stuff on

165
00:06:56,710 --> 00:07:01,930
Windows it's it's configured in

166
00:06:58,600 --> 00:07:04,870
extremely hardened factions and would

167
00:07:01,930 --> 00:07:06,910
often require you to have kernel level

168
00:07:04,870 --> 00:07:08,560
execution to be able to get the access

169
00:07:06,910 --> 00:07:11,200
you needed it's a lot easier to do on

170
00:07:08,560 --> 00:07:12,580
Linux on a normal say just like a new

171
00:07:11,200 --> 00:07:20,130
install you go and download one and

172
00:07:12,580 --> 00:07:20,130
install it it's a lot easier um the the

173
00:07:20,310 --> 00:07:26,530
other thing about hosts the the other

174
00:07:25,570 --> 00:07:29,020
thing that's interesting with this too

175
00:07:26,530 --> 00:07:31,450
is that the your you end up where I

176
00:07:29,020 --> 00:07:34,299
guess the way we view this the way we

177
00:07:31,450 --> 00:07:35,469
view this problems David is that as I

178
00:07:34,300 --> 00:07:38,200
just said like in a lot of ways we

179
00:07:35,470 --> 00:07:39,190
assume compromise of the host and it

180
00:07:38,200 --> 00:07:40,659
would be our recommendation that

181
00:07:39,190 --> 00:07:42,400
everyone assume compromise of the host

182
00:07:40,660 --> 00:07:43,810
right like your security designs and the

183
00:07:42,400 --> 00:07:46,570
way that you configure these systems

184
00:07:43,810 --> 00:07:49,330
should be in such a way that you assume

185
00:07:46,570 --> 00:07:52,719
that if it's doing anything you know

186
00:07:49,330 --> 00:07:54,729
that all of our computers do today there

187
00:07:52,720 --> 00:07:56,680
are avenues to get the level of code

188
00:07:54,730 --> 00:07:58,510
execution that you need so then be able

189
00:07:56,680 --> 00:08:02,170
to trigger and reach into all the stuff

190
00:07:58,510 --> 00:08:03,940
we're going to talk about here and so I

191
00:08:02,170 --> 00:08:05,740
know of environments that will have

192
00:08:03,940 --> 00:08:07,240
multiple you know server configurations

193
00:08:05,740 --> 00:08:09,160
kind of depending on risk level that

194
00:08:07,240 --> 00:08:11,500
makes a lot of sense and I'm in support

195
00:08:09,160 --> 00:08:15,430
of that but you have to you have to do

196
00:08:11,500 --> 00:08:17,410
accurately way what the sort of

197
00:08:15,430 --> 00:08:19,330
likelihood of attack is or successful

198
00:08:17,410 --> 00:08:20,920
compromise of that server right and so

199
00:08:19,330 --> 00:08:22,900
for different servers that could be in

200
00:08:20,920 --> 00:08:25,690
different use cases like if one like

201
00:08:22,900 --> 00:08:28,299
this particular server is sitting in the

202
00:08:25,690 --> 00:08:31,210
DMZ and it's running you know something

203
00:08:28,300 --> 00:08:32,620
awful and so we think it it very well

204
00:08:31,210 --> 00:08:33,699
could get compromised so we isolate it

205
00:08:32,620 --> 00:08:37,870
differently than we do one on the

206
00:08:33,700 --> 00:08:40,240
internal network for example but it's

207
00:08:37,870 --> 00:08:42,000
worth rethinking that and looking at

208
00:08:40,240 --> 00:08:45,400
what are those what are those use cases

209
00:08:42,000 --> 00:08:48,640
that I'm under appreciating the danger

210
00:08:45,400 --> 00:08:51,280
level right because one of the s the

211
00:08:48,640 --> 00:08:53,649
starting point from this whole talk is

212
00:08:51,280 --> 00:08:58,439
under the it's from the stand

213
00:08:53,649 --> 00:09:07,959
point of when you when you're starting

214
00:08:58,439 --> 00:09:11,618
or like when you're when you consider

215
00:09:07,959 --> 00:09:14,920
what the attack surface of a host like

216
00:09:11,619 --> 00:09:17,410
this is if you care about these things

217
00:09:14,920 --> 00:09:19,748
there are is a huge amount you can do to

218
00:09:17,410 --> 00:09:23,079
reduce the threats to reduce the

219
00:09:19,749 --> 00:09:24,339
vulnerability of a given host and this

220
00:09:23,079 --> 00:09:26,679
is focusing on the pieces that are left

221
00:09:24,339 --> 00:09:28,559
over if you don't care about those

222
00:09:26,679 --> 00:09:30,910
things and you don't configure it

223
00:09:28,559 --> 00:09:34,540
attempting to reduce attack service and

224
00:09:30,910 --> 00:09:36,339
attempting to lock it down then there

225
00:09:34,540 --> 00:09:38,679
then there's like almost no barriers at

226
00:09:36,339 --> 00:09:40,029
all it's extremely easy to pivot through

227
00:09:38,679 --> 00:09:43,360
to all these different components and

228
00:09:40,029 --> 00:09:46,540
even in the newer stuff like the you

229
00:09:43,360 --> 00:09:48,220
know you know for years and years people

230
00:09:46,540 --> 00:09:49,389
beat up on Super Micro because they

231
00:09:48,220 --> 00:09:50,679
didn't do anything like firmware signing

232
00:09:49,389 --> 00:09:52,269
at all of their bmc's and things like

233
00:09:50,679 --> 00:09:54,309
that they started implementing that in

234
00:09:52,269 --> 00:09:56,139
the last few years but and so like

235
00:09:54,309 --> 00:10:00,939
that's one example of some of that

236
00:09:56,139 --> 00:10:03,029
maturing but even so allowing in band

237
00:10:00,939 --> 00:10:05,230
management with all of that that offers

238
00:10:03,029 --> 00:10:06,459
in any sort of a situation where an

239
00:10:05,230 --> 00:10:11,410
attacker can get on that host is really

240
00:10:06,459 --> 00:10:13,300
bad so okay so switching gears a little

241
00:10:11,410 --> 00:10:16,269
bit right so first thing host also this

242
00:10:13,300 --> 00:10:17,679
is where you know for most you know most

243
00:10:16,269 --> 00:10:18,879
threat models we talked about that where

244
00:10:17,679 --> 00:10:20,529
most of our attack chain is kind of

245
00:10:18,879 --> 00:10:22,149
start from compromised there what that

246
00:10:20,529 --> 00:10:23,649
also means is that for a lot of us what

247
00:10:22,149 --> 00:10:25,740
we're talking about is the TAC surface

248
00:10:23,649 --> 00:10:27,819
that's exposed to the hosts and so

249
00:10:25,740 --> 00:10:29,980
that's primarily where we focused so we

250
00:10:27,819 --> 00:10:31,300
usually start from and then as we begin

251
00:10:29,980 --> 00:10:32,949
to compromise other components then you

252
00:10:31,300 --> 00:10:34,059
get different viewpoints into the system

253
00:10:32,949 --> 00:10:36,370
and then you can begin to explore the

254
00:10:34,059 --> 00:10:37,870
vulnerability of those other sides and

255
00:10:36,370 --> 00:10:39,339
so so that's said we're starting from

256
00:10:37,870 --> 00:10:40,839
there and then we'll work through all

257
00:10:39,339 --> 00:10:43,449
these different components and sort of

258
00:10:40,839 --> 00:10:44,559
the pros and cons of them but then I

259
00:10:43,449 --> 00:10:47,370
guess wherever we're starting from a

260
00:10:44,559 --> 00:10:51,429
different place we'll call it out okay

261
00:10:47,370 --> 00:10:53,170
so system management mode really like

262
00:10:51,429 --> 00:10:54,610
there's either the entire talks just

263
00:10:53,170 --> 00:10:55,719
about well about every one of these

264
00:10:54,610 --> 00:10:58,149
components so we're obviously not going

265
00:10:55,720 --> 00:11:00,100
to that level of depth for what matters

266
00:10:58,149 --> 00:11:03,279
here all we're really saying is that

267
00:11:00,100 --> 00:11:07,509
it's another place that attacks can be

268
00:11:03,279 --> 00:11:07,689
launched from it is becoming overtime is

269
00:11:07,509 --> 00:11:10,170
we

270
00:11:07,690 --> 00:11:13,060
more and more of the centralized

271
00:11:10,170 --> 00:11:15,250
location for certain types of Secrets so

272
00:11:13,060 --> 00:11:17,800
it is not a secure Enclave like it's not

273
00:11:15,250 --> 00:11:21,070
a TPM it's not you know there's hardware

274
00:11:17,800 --> 00:11:23,199
backs secrets a safe place to keep your

275
00:11:21,070 --> 00:11:25,840
secrets and so there's implications to

276
00:11:23,200 --> 00:11:27,610
using it that way but it is it is still

277
00:11:25,840 --> 00:11:30,040
an improvement so what's happening is

278
00:11:27,610 --> 00:11:32,950
that over time we're like in years past

279
00:11:30,040 --> 00:11:34,480
maybe everything was accessible now

280
00:11:32,950 --> 00:11:36,550
we're finding different ways to turn

281
00:11:34,480 --> 00:11:38,350
those off so perhaps the attack surface

282
00:11:36,550 --> 00:11:39,849
that used to be there all the time

283
00:11:38,350 --> 00:11:41,500
now that attack surface is only there

284
00:11:39,850 --> 00:11:43,540
during boot and only when it boots into

285
00:11:41,500 --> 00:11:45,850
a certain mode so like you know if

286
00:11:43,540 --> 00:11:47,589
you're if you've updated your your UEFI

287
00:11:45,850 --> 00:11:49,780
on your laptop or anything in the last

288
00:11:47,590 --> 00:11:50,830
while like all the recent systems the

289
00:11:49,780 --> 00:11:52,510
way that works is differently than it

290
00:11:50,830 --> 00:11:55,870
used to and it's observable to you as

291
00:11:52,510 --> 00:11:58,000
the user like it it writes to it writes

292
00:11:55,870 --> 00:11:59,830
to a location and then it sets some

293
00:11:58,000 --> 00:12:01,390
flags and then it triggers a reboot and

294
00:11:59,830 --> 00:12:02,380
then when it's coming back up right it

295
00:12:01,390 --> 00:12:04,510
takes a different path and then it can

296
00:12:02,380 --> 00:12:05,710
actually unlock the flash that it needs

297
00:12:04,510 --> 00:12:08,710
to unlock and it can do these updates

298
00:12:05,710 --> 00:12:10,000
well so that's that sort of change

299
00:12:08,710 --> 00:12:11,440
that's one of the things that's changed

300
00:12:10,000 --> 00:12:13,090
we've had several others as well like

301
00:12:11,440 --> 00:12:14,920
where there were these different buses

302
00:12:13,090 --> 00:12:16,420
that were accessible that are now not

303
00:12:14,920 --> 00:12:20,020
accessible at all except for these time

304
00:12:16,420 --> 00:12:22,900
windows or in some cases and what are

305
00:12:20,020 --> 00:12:24,819
our two sort of case studies that we'll

306
00:12:22,900 --> 00:12:27,340
go to into detail here in a bit what

307
00:12:24,820 --> 00:12:28,780
they're focusing on is these areas where

308
00:12:27,340 --> 00:12:30,820
it was a tack surface that used to be

309
00:12:28,780 --> 00:12:32,680
open now we've closed it off and we've

310
00:12:30,820 --> 00:12:35,620
tried to figure out how can we make it

311
00:12:32,680 --> 00:12:37,810
so that SMM can still talk to it but

312
00:12:35,620 --> 00:12:39,370
nobody else can and so there's a few

313
00:12:37,810 --> 00:12:41,859
places where that really matters like

314
00:12:39,370 --> 00:12:46,150
Intel chipset has some attack surface

315
00:12:41,860 --> 00:12:47,980
there that is is shut down after boot

316
00:12:46,150 --> 00:12:49,120
except they still need sm them to be

317
00:12:47,980 --> 00:12:52,330
able to make certain types of queries

318
00:12:49,120 --> 00:12:54,190
against it in band management is another

319
00:12:52,330 --> 00:12:57,100
common one it's a that's our other

320
00:12:54,190 --> 00:12:59,920
example that we'll give here to where it

321
00:12:57,100 --> 00:13:01,300
was an interface that used to be on all

322
00:12:59,920 --> 00:13:03,010
the time if you want to turn it off you

323
00:13:01,300 --> 00:13:04,449
can now except maybe you can't always

324
00:13:03,010 --> 00:13:05,470
turn it off and so this is that that

325
00:13:04,450 --> 00:13:09,570
corner case and like how they

326
00:13:05,470 --> 00:13:12,040
implemented that solution and then the

327
00:13:09,570 --> 00:13:14,650
then other other other use cases right

328
00:13:12,040 --> 00:13:16,510
like um you know you you talk to anyone

329
00:13:14,650 --> 00:13:18,370
who's trying to design one of these or

330
00:13:16,510 --> 00:13:20,050
like a you know large cloud provider

331
00:13:18,370 --> 00:13:22,420
that's trying to

332
00:13:20,050 --> 00:13:23,530
trying to architect the server that

333
00:13:22,420 --> 00:13:26,199
would be resilient against these kind of

334
00:13:23,530 --> 00:13:29,199
problems you can't just shut everything

335
00:13:26,200 --> 00:13:31,870
off because there's a there are so many

336
00:13:29,200 --> 00:13:33,340
components inside a server now so many

337
00:13:31,870 --> 00:13:35,170
flashable components that may need

338
00:13:33,340 --> 00:13:37,150
update something could be broken so like

339
00:13:35,170 --> 00:13:38,920
you can't I mean you know there would be

340
00:13:37,150 --> 00:13:40,480
physical ways you could like never allow

341
00:13:38,920 --> 00:13:42,339
something to be updated again and make

342
00:13:40,480 --> 00:13:43,420
it truly read-only but you can't

343
00:13:42,340 --> 00:13:46,420
actually do that in the real world right

344
00:13:43,420 --> 00:13:48,520
so you have to have methods to use some

345
00:13:46,420 --> 00:13:51,130
of these privilege busses and privilege

346
00:13:48,520 --> 00:13:53,050
interfaces but we've got to figure out

347
00:13:51,130 --> 00:13:56,680
how to do it safely and so there have

348
00:13:53,050 --> 00:13:58,780
been some interesting way like neat ways

349
00:13:56,680 --> 00:14:00,609
that I've seen that done and so that's

350
00:13:58,780 --> 00:14:01,630
part of what we're talking through but

351
00:14:00,610 --> 00:14:02,860
it's a hard problem to solve because

352
00:14:01,630 --> 00:14:06,990
some of those things have to be enabled

353
00:14:02,860 --> 00:14:09,670
and if there if there if there is a

354
00:14:06,990 --> 00:14:11,140
pathway that can be used then a lot of

355
00:14:09,670 --> 00:14:12,490
like what our job is is trying to figure

356
00:14:11,140 --> 00:14:14,980
out how to you know crowbar that back

357
00:14:12,490 --> 00:14:16,030
open I said earlier a Simone can be

358
00:14:14,980 --> 00:14:19,090
attacked from a number of places like

359
00:14:16,030 --> 00:14:21,630
the most common ones are hosts that the

360
00:14:19,090 --> 00:14:23,970
SMI interface is still problematic it's

361
00:14:21,630 --> 00:14:26,260
there been a lot of talks about that and

362
00:14:23,970 --> 00:14:26,770
they're all better than this one at

363
00:14:26,260 --> 00:14:30,040
covering it

364
00:14:26,770 --> 00:14:32,290
go read those there's a lot of

365
00:14:30,040 --> 00:14:36,130
interaction between the BMC and SMM so

366
00:14:32,290 --> 00:14:37,630
SMM is often sending requests out to the

367
00:14:36,130 --> 00:14:40,780
BMC and then processing those responses

368
00:14:37,630 --> 00:14:42,250
it also is reading data and things out

369
00:14:40,780 --> 00:14:44,380
of you know like out of storage in

370
00:14:42,250 --> 00:14:48,400
locations either you know efi variables

371
00:14:44,380 --> 00:14:50,770
or like sort of got a stored in flash

372
00:14:48,400 --> 00:14:53,560
other things that the BMC can also

373
00:14:50,770 --> 00:14:56,110
influence so there are there are there

374
00:14:53,560 --> 00:14:58,599
are paths from once you get root inside

375
00:14:56,110 --> 00:14:59,860
the BMC being able to poison responses

376
00:14:58,600 --> 00:15:01,570
that are coming back in and in gain code

377
00:14:59,860 --> 00:15:02,830
execution at a higher level generally

378
00:15:01,570 --> 00:15:06,490
you don't need to do that here like in

379
00:15:02,830 --> 00:15:10,330
that the the SMI interface is is large

380
00:15:06,490 --> 00:15:11,770
enough usually that you can find the

381
00:15:10,330 --> 00:15:15,430
vulnerabilities that you need on that

382
00:15:11,770 --> 00:15:15,939
side but and then peripherals are really

383
00:15:15,430 --> 00:15:19,420
interesting

384
00:15:15,940 --> 00:15:22,420
so one light as Deanna and I have

385
00:15:19,420 --> 00:15:23,349
processed this whole domain and trying

386
00:15:22,420 --> 00:15:27,670
to been trying to figure out how do we

387
00:15:23,350 --> 00:15:30,940
take all of this giant amount of work

388
00:15:27,670 --> 00:15:34,089
that's been done and the that we

389
00:15:30,940 --> 00:15:36,669
understand about the sort of the modern

390
00:15:34,089 --> 00:15:37,839
you know vectors for these systems how

391
00:15:36,669 --> 00:15:41,109
do we boil that down to what really

392
00:15:37,839 --> 00:15:43,449
matters and this is one of the areas

393
00:15:41,109 --> 00:15:44,410
that I think is the most interest it's

394
00:15:43,449 --> 00:15:48,779
the most interesting to me right now

395
00:15:44,410 --> 00:15:51,519
that these other components that are

396
00:15:48,779 --> 00:15:53,619
not always present so we're not talking

397
00:15:51,519 --> 00:15:54,819
about like you know Intel chipset stuff

398
00:15:53,619 --> 00:15:57,669
or the BMC or these other components

399
00:15:54,819 --> 00:16:00,160
that are always on the motherboard these

400
00:15:57,669 --> 00:16:03,879
are components that are used in either

401
00:16:00,160 --> 00:16:05,169
specific use cases like a particular you

402
00:16:03,879 --> 00:16:07,600
know particular motherboard has this

403
00:16:05,169 --> 00:16:09,489
this feature to it or whatever and then

404
00:16:07,600 --> 00:16:11,649
that's exposed through some bus and but

405
00:16:09,489 --> 00:16:14,109
its own processor has all of its own

406
00:16:11,649 --> 00:16:15,339
resources or we're talking about you

407
00:16:14,109 --> 00:16:20,559
know components that are plugged into a

408
00:16:15,339 --> 00:16:23,290
PCIe slot right and both sides of that

409
00:16:20,559 --> 00:16:26,079
are really interesting the the attack

410
00:16:23,290 --> 00:16:27,669
vectors into those devices is pretty

411
00:16:26,079 --> 00:16:29,529
fascinating like oftentimes it's really

412
00:16:27,669 --> 00:16:31,839
simple and it's not all that that like

413
00:16:29,529 --> 00:16:33,850
fancy I mean it's you know you call the

414
00:16:31,839 --> 00:16:35,079
firmware update function and then you

415
00:16:33,850 --> 00:16:37,119
update the farmer on the on the

416
00:16:35,079 --> 00:16:39,519
peripheral but it's not always sometimes

417
00:16:37,119 --> 00:16:41,350
it can be it can be getting very complex

418
00:16:39,519 --> 00:16:42,759
on that side to of reaching into the

419
00:16:41,350 --> 00:16:44,619
device but then once you're on the

420
00:16:42,759 --> 00:16:46,239
device the attack surf is exposed to you

421
00:16:44,619 --> 00:16:47,799
as you're coming back up from the

422
00:16:46,239 --> 00:16:48,819
peripheral is also fascinating and

423
00:16:47,799 --> 00:16:51,059
there's like a lot of different examples

424
00:16:48,819 --> 00:16:53,349
or different different ways that

425
00:16:51,059 --> 00:16:57,209
compromised SMM there are common sorry

426
00:16:53,350 --> 00:17:03,669
compromised peripheral can get back into

427
00:16:57,209 --> 00:17:05,948
SMM and in the host itself all right so

428
00:17:03,669 --> 00:17:08,349
BMC right again lots of other talks on

429
00:17:05,949 --> 00:17:11,230
this so I'll try to gloss over it

430
00:17:08,349 --> 00:17:13,688
quickly if you're not familiar with what

431
00:17:11,230 --> 00:17:15,819
it is it's an entire Linux system that's

432
00:17:13,689 --> 00:17:17,829
sitting there on your motherboard it's

433
00:17:15,819 --> 00:17:19,240
asynchronous in that it's like it has

434
00:17:17,829 --> 00:17:21,158
its own state it can be turned on or off

435
00:17:19,240 --> 00:17:25,089
while the process well the host can be

436
00:17:21,159 --> 00:17:27,130
turned on and off it allows for it's

437
00:17:25,089 --> 00:17:28,510
useful for persistence right I mean it's

438
00:17:27,130 --> 00:17:29,950
they have all of its own resources it

439
00:17:28,510 --> 00:17:31,210
has all that there's been a lot of talk

440
00:17:29,950 --> 00:17:33,909
talking about that different methods for

441
00:17:31,210 --> 00:17:35,909
doing so and then useful for re

442
00:17:33,909 --> 00:17:38,019
attacking the host right getting back in

443
00:17:35,909 --> 00:17:39,429
it has a lot of attack surface to the

444
00:17:38,019 --> 00:17:41,679
host it also has a lot of attack surface

445
00:17:39,429 --> 00:17:43,899
to the management network this is one

446
00:17:41,679 --> 00:17:47,310
that has been talked about and mentioned

447
00:17:43,899 --> 00:17:52,139
several times I don't feel like the

448
00:17:47,310 --> 00:17:56,790
the public exploitation or like the red

449
00:17:52,140 --> 00:17:58,410
teaming world doesn't really use it we

450
00:17:56,790 --> 00:18:00,840
probably should we probably should use

451
00:17:58,410 --> 00:18:02,910
it more like the pivot from the host of

452
00:18:00,840 --> 00:18:06,120
the B and C is not hard and once you're

453
00:18:02,910 --> 00:18:08,580
on the beam see in in highly restrictive

454
00:18:06,120 --> 00:18:10,199
environments I mean to me that that's a

455
00:18:08,580 --> 00:18:12,000
question for you like to think about are

456
00:18:10,200 --> 00:18:14,240
you filtering requests coming out of the

457
00:18:12,000 --> 00:18:16,350
BMC and like working those requests go

458
00:18:14,240 --> 00:18:18,180
assume that if someone can compromise

459
00:18:16,350 --> 00:18:20,840
this BMC assume they can compromise all

460
00:18:18,180 --> 00:18:23,910
the BMC's if they can talk to it so like

461
00:18:20,840 --> 00:18:26,669
we can do a lot at the network layer to

462
00:18:23,910 --> 00:18:28,740
restrict the ability to you know come

463
00:18:26,670 --> 00:18:30,330
out of one BMC and then take over all

464
00:18:28,740 --> 00:18:31,260
the other ones but you should assume

465
00:18:30,330 --> 00:18:32,550
that like if you're sitting on the BMC

466
00:18:31,260 --> 00:18:34,560
you know then that means you know all

467
00:18:32,550 --> 00:18:36,149
the secrets like you know the whatever

468
00:18:34,560 --> 00:18:37,470
the passwords are for ipmi and you know

469
00:18:36,150 --> 00:18:39,480
you obviously have vulnerabilities in

470
00:18:37,470 --> 00:18:41,220
the BMC you know how to trigger them so

471
00:18:39,480 --> 00:18:43,200
like if there's not Network layer

472
00:18:41,220 --> 00:18:44,790
controls on the traffic coming out of

473
00:18:43,200 --> 00:18:46,170
that then you can you can pivot and

474
00:18:44,790 --> 00:18:48,659
laterally move across very large

475
00:18:46,170 --> 00:18:50,220
segments like I know you know in in

476
00:18:48,660 --> 00:18:53,610
places that do it like you either end up

477
00:18:50,220 --> 00:18:54,990
where nobody works to restrict it at all

478
00:18:53,610 --> 00:18:56,459
and so they're just on the network just

479
00:18:54,990 --> 00:18:58,110
like any other node and okay it's not

480
00:18:56,460 --> 00:18:59,700
really that special but in a highly

481
00:18:58,110 --> 00:19:02,010
restrictive environment you'll have

482
00:18:59,700 --> 00:19:05,700
management networks that are all plugged

483
00:19:02,010 --> 00:19:07,920
in to this and they're isolated and you

484
00:19:05,700 --> 00:19:09,180
can't get on those networks normally but

485
00:19:07,920 --> 00:19:11,670
if you do get on those networks you can

486
00:19:09,180 --> 00:19:14,360
get to everything like all of the all of

487
00:19:11,670 --> 00:19:17,490
the barriers all go away

488
00:19:14,360 --> 00:19:18,959
all right so talking about peripherals

489
00:19:17,490 --> 00:19:22,500
again a little bit more specifically

490
00:19:18,960 --> 00:19:23,760
right this is a broad category for what

491
00:19:22,500 --> 00:19:26,600
we're talking about here so this can

492
00:19:23,760 --> 00:19:30,960
this does include like anything that

493
00:19:26,600 --> 00:19:32,699
that is off you know it's off its off

494
00:19:30,960 --> 00:19:33,570
host it's not it's not any other

495
00:19:32,700 --> 00:19:34,980
components we're talking about we're

496
00:19:33,570 --> 00:19:38,090
kind of like lumping them all together

497
00:19:34,980 --> 00:19:41,760
here are what we'll talk about es IO and

498
00:19:38,090 --> 00:19:43,310
as a use case here in a minute we kind

499
00:19:41,760 --> 00:19:44,970
of categorize that as a peripheral

500
00:19:43,310 --> 00:19:46,740
obviously and then anything that plugs

501
00:19:44,970 --> 00:19:48,390
in plugs in anywhere if it has a cord

502
00:19:46,740 --> 00:19:52,860
that plugs in or it's a card that plugs

503
00:19:48,390 --> 00:19:55,830
in it counts the one unique thing about

504
00:19:52,860 --> 00:19:58,530
their attack surface is that they have

505
00:19:55,830 --> 00:20:00,330
they have varying a you know attack

506
00:19:58,530 --> 00:20:01,020
surface like different components will

507
00:20:00,330 --> 00:20:02,100
have why

508
00:20:01,020 --> 00:20:05,580
we different attack surface so you've

509
00:20:02,100 --> 00:20:09,209
got you know the I saw the right up on

510
00:20:05,580 --> 00:20:12,210
the Qualcomm chain of bugs like just

511
00:20:09,210 --> 00:20:14,010
this week where you know the it was the

512
00:20:12,210 --> 00:20:15,900
there's another talk last year it was

513
00:20:14,010 --> 00:20:17,490
the first time I'd ever seen someone do

514
00:20:15,900 --> 00:20:20,190
it I think but coming in and popping the

515
00:20:17,490 --> 00:20:22,920
you know the the Wi-Fi sock itself so

516
00:20:20,190 --> 00:20:25,080
like a little tiny ARM chip inside the

517
00:20:22,920 --> 00:20:27,300
Wi-Fi card and then being able to pivot

518
00:20:25,080 --> 00:20:28,740
from that back into the host that's the

519
00:20:27,300 --> 00:20:30,300
same attack surface it kind of work that

520
00:20:28,740 --> 00:20:31,740
we're describing here it's just a little

521
00:20:30,300 --> 00:20:32,790
bit of a different vector and so like

522
00:20:31,740 --> 00:20:34,830
there was another one someone did that

523
00:20:32,790 --> 00:20:37,800
to to chain all the way through for

524
00:20:34,830 --> 00:20:39,419
Qualcomm just this week and it's getting

525
00:20:37,800 --> 00:20:42,840
harder especially on those like those

526
00:20:39,420 --> 00:20:44,280
those types of devices where they now

527
00:20:42,840 --> 00:20:46,050
are having you know like I think it's a

528
00:20:44,280 --> 00:20:47,370
it had a SLR it has some

529
00:20:46,050 --> 00:20:50,240
containerization of some sort like it

530
00:20:47,370 --> 00:20:54,330
some some isolation so requires multiple

531
00:20:50,240 --> 00:20:55,740
chains to get back through but you want

532
00:20:54,330 --> 00:20:57,210
to get back you want to do that for all

533
00:20:55,740 --> 00:20:58,710
the same reasons that they do like in

534
00:20:57,210 --> 00:21:00,230
you would want to do that on a server

535
00:20:58,710 --> 00:21:04,440
all the same reasons that they did that

536
00:21:00,230 --> 00:21:07,680
on the Qualcomm chip oh and I guess yes

537
00:21:04,440 --> 00:21:09,450
so the other one to that to you is we

538
00:21:07,680 --> 00:21:12,540
didn't really think about what the

539
00:21:09,450 --> 00:21:14,700
attack surface is for for vm's either so

540
00:21:12,540 --> 00:21:17,580
think about like your you know your your

541
00:21:14,700 --> 00:21:18,990
VMware farms that you've got for like

542
00:21:17,580 --> 00:21:21,480
there's a bunch of different use cases

543
00:21:18,990 --> 00:21:23,790
where you would want to expose some of

544
00:21:21,480 --> 00:21:25,980
this either directly and on purpose or

545
00:21:23,790 --> 00:21:31,350
it's exposed indirectly but no one's

546
00:21:25,980 --> 00:21:32,880
really looked at it yet so the attack

547
00:21:31,350 --> 00:21:34,919
surface of peripherals I think is still

548
00:21:32,880 --> 00:21:37,650
is still not well understood or well

549
00:21:34,920 --> 00:21:40,470
well researched I'm particularly

550
00:21:37,650 --> 00:21:42,390
interested in in some of the the

551
00:21:40,470 --> 00:21:44,940
translation that occurs like the there

552
00:21:42,390 --> 00:21:46,890
are you know across all the different VN

553
00:21:44,940 --> 00:21:49,080
solutions all of them in some fashion

554
00:21:46,890 --> 00:21:50,430
are either you're either directly

555
00:21:49,080 --> 00:21:53,460
plugging one of these things in like

556
00:21:50,430 --> 00:21:55,110
you're here you're mapping it in or it's

557
00:21:53,460 --> 00:21:56,940
translating requests for you in some

558
00:21:55,110 --> 00:22:00,889
fashion and I know that like I mean I

559
00:21:56,940 --> 00:22:03,900
know of multiple scenarios where normal

560
00:22:00,890 --> 00:22:06,330
transactions are also what's used for

561
00:22:03,900 --> 00:22:08,010
administrative functionality so I think

562
00:22:06,330 --> 00:22:09,179
about a drive and how do you update the

563
00:22:08,010 --> 00:22:11,280
farmer on the drive well in some cases

564
00:22:09,180 --> 00:22:14,550
you use different scuzzy commands well

565
00:22:11,280 --> 00:22:16,590
like how tight are

566
00:22:14,550 --> 00:22:19,200
all of the proxies of those scuzzy

567
00:22:16,590 --> 00:22:20,550
commands actually in real life like our

568
00:22:19,200 --> 00:22:21,810
is it is it really terminating their

569
00:22:20,550 --> 00:22:23,970
pressing and making a new one is it

570
00:22:21,810 --> 00:22:25,800
abstracting it somehow or is it a

571
00:22:23,970 --> 00:22:27,720
straight pipe and in what situations and

572
00:22:25,800 --> 00:22:28,980
it can get really complex really fast so

573
00:22:27,720 --> 00:22:30,690
that's kind of why we don't really know

574
00:22:28,980 --> 00:22:32,880
a lot about some of that attack surface

575
00:22:30,690 --> 00:22:36,120
but it's it's a it's certainly

576
00:22:32,880 --> 00:22:39,420
worthwhile to to look at and as we move

577
00:22:36,120 --> 00:22:40,919
forward it's interesting to me because

578
00:22:39,420 --> 00:22:42,780
it's one of the things that will still

579
00:22:40,920 --> 00:22:44,130
be there right like you're gonna have

580
00:22:42,780 --> 00:22:45,960
performance reasons why you're gonna

581
00:22:44,130 --> 00:22:48,330
want to slave hardware directly into

582
00:22:45,960 --> 00:22:49,110
your guests in some cases and then even

583
00:22:48,330 --> 00:22:50,220
from that like you're going to

584
00:22:49,110 --> 00:22:52,649
constantly have other peripherals that

585
00:22:50,220 --> 00:22:56,400
you need to to allow some level of

586
00:22:52,650 --> 00:22:58,860
access to that's hardware on the outside

587
00:22:56,400 --> 00:23:00,570
so we're not finding them with you know

588
00:22:58,860 --> 00:23:01,469
our standard sort of fuzzing frameworks

589
00:23:00,570 --> 00:23:04,710
on these things we're looking at today

590
00:23:01,470 --> 00:23:08,550
where we're you know we we fuzz emulated

591
00:23:04,710 --> 00:23:11,370
devices a lot but I don't know that

592
00:23:08,550 --> 00:23:13,050
we're good at being able to predict how

593
00:23:11,370 --> 00:23:14,070
something will be d capsulated all the

594
00:23:13,050 --> 00:23:17,220
way down in the hardware on the other

595
00:23:14,070 --> 00:23:20,010
end alright

596
00:23:17,220 --> 00:23:21,600
and then lastly a category of just the

597
00:23:20,010 --> 00:23:23,640
this is the catch-all for all all things

598
00:23:21,600 --> 00:23:25,080
chipset right so everything like all the

599
00:23:23,640 --> 00:23:33,360
Intel stuff and AMD stuff we're talking

600
00:23:25,080 --> 00:23:34,770
the PCH SPS all of those pieces it's for

601
00:23:33,360 --> 00:23:38,219
the server side is a little bit

602
00:23:34,770 --> 00:23:42,330
different from the normal consumer line

603
00:23:38,220 --> 00:23:46,020
so like it I'll say it's behind so the

604
00:23:42,330 --> 00:23:48,510
the newest features will come out on the

605
00:23:46,020 --> 00:23:50,700
user side first and then at some point

606
00:23:48,510 --> 00:23:52,050
they will move over on to SPS so like

607
00:23:50,700 --> 00:23:53,280
we're talking about like c SME versus

608
00:23:52,050 --> 00:23:55,020
SPS and some of those some of those

609
00:23:53,280 --> 00:23:57,629
types of differences but the like the

610
00:23:55,020 --> 00:23:58,650
architecture for SPS one of these days

611
00:23:57,630 --> 00:24:00,780
that's gonna change I don't think it has

612
00:23:58,650 --> 00:24:02,940
yet I haven't I haven't looked at it in

613
00:24:00,780 --> 00:24:08,010
a little bit someone from Intel probably

614
00:24:02,940 --> 00:24:10,200
is in here will tell me but that attack

615
00:24:08,010 --> 00:24:14,820
surface is there there have been several

616
00:24:10,200 --> 00:24:17,790
great talks about it it's I'll say it's

617
00:24:14,820 --> 00:24:18,659
it is due to and due to the changes that

618
00:24:17,790 --> 00:24:22,620
have been happening in the last couple

619
00:24:18,660 --> 00:24:23,730
years to it is time consuming for re and

620
00:24:22,620 --> 00:24:25,350
exploitation we've done it a couple

621
00:24:23,730 --> 00:24:27,160
times we've looked at it we've we've

622
00:24:25,350 --> 00:24:28,929
written

623
00:24:27,160 --> 00:24:30,550
like we've POC vulnerabilities that we

624
00:24:28,930 --> 00:24:31,570
found that to have various primitives

625
00:24:30,550 --> 00:24:33,580
that would that are useful in these

626
00:24:31,570 --> 00:24:34,870
spaces but if it's not well understood

627
00:24:33,580 --> 00:24:36,850
although that is changing I know there

628
00:24:34,870 --> 00:24:40,209
was a there was a talk on CSN a here

629
00:24:36,850 --> 00:24:42,189
yesterday that did covered a lot of the

630
00:24:40,210 --> 00:24:43,660
the architecture that they're using now

631
00:24:42,190 --> 00:24:46,420
which is great that's wonderful like

632
00:24:43,660 --> 00:24:47,710
using modern you know compiler defenses

633
00:24:46,420 --> 00:24:50,650
and all those kind of things that's what

634
00:24:47,710 --> 00:24:52,390
we want to see and it'll be fun to see

635
00:24:50,650 --> 00:24:53,830
that sort of like standardized and you

636
00:24:52,390 --> 00:24:56,860
know get pushed into the server lines as

637
00:24:53,830 --> 00:24:57,850
well they don't have a tack surface

638
00:24:56,860 --> 00:24:59,020
right across those things we're not

639
00:24:57,850 --> 00:25:02,830
gonna really talk about chipset very

640
00:24:59,020 --> 00:25:04,389
much in here in that it it is an area of

641
00:25:02,830 --> 00:25:09,399
continued research in motion right now

642
00:25:04,390 --> 00:25:14,830
so right you want to take the rawness

643
00:25:09,400 --> 00:25:16,630
part so now we've kind given an overview

644
00:25:14,830 --> 00:25:19,179
of our whole map we understand the

645
00:25:16,630 --> 00:25:20,890
components in the system the next step

646
00:25:19,180 --> 00:25:23,110
is sort of drill down a little further

647
00:25:20,890 --> 00:25:25,720
but before we do that we should talk a

648
00:25:23,110 --> 00:25:28,659
little bit about quickly how we think

649
00:25:25,720 --> 00:25:30,880
about the trend right now and and we

650
00:25:28,660 --> 00:25:33,550
think things are going and where it will

651
00:25:30,880 --> 00:25:39,370
be useful to look for more bugs and for

652
00:25:33,550 --> 00:25:40,810
sort of twisted attack surface we've

653
00:25:39,370 --> 00:25:43,060
said it a few times maybe five or six

654
00:25:40,810 --> 00:25:44,679
modern servers are they're complex

655
00:25:43,060 --> 00:25:46,389
there's a bunch of components they're

656
00:25:44,680 --> 00:25:49,120
connected together much more like a

657
00:25:46,390 --> 00:25:51,640
network than than anything else and

658
00:25:49,120 --> 00:25:54,550
there you're only now starting to be

659
00:25:51,640 --> 00:25:59,530
treated as networks with complex routing

660
00:25:54,550 --> 00:26:01,600
and filtering and as we said we talked a

661
00:25:59,530 --> 00:26:04,540
little bit about the host cloud and

662
00:26:01,600 --> 00:26:07,060
virtualization changes these things in

663
00:26:04,540 --> 00:26:09,340
ways that we the designers of them

664
00:26:07,060 --> 00:26:11,110
probably didn't anticipate and because

665
00:26:09,340 --> 00:26:13,750
of that our attack service has changed

666
00:26:11,110 --> 00:26:16,199
and we're having the back port like I

667
00:26:13,750 --> 00:26:18,940
said these filters these ways of

668
00:26:16,200 --> 00:26:21,190
ensuring that components are correctly

669
00:26:18,940 --> 00:26:23,230
isolated these are things that we never

670
00:26:21,190 --> 00:26:25,390
anticipated or you know we still have in

671
00:26:23,230 --> 00:26:27,700
the server's a lot of these protocols

672
00:26:25,390 --> 00:26:30,640
that are date back to you know is a

673
00:26:27,700 --> 00:26:32,350
buses and things like that so clearly

674
00:26:30,640 --> 00:26:37,060
we're not we're not moving quickly here

675
00:26:32,350 --> 00:26:38,740
to to come up with the latest designs to

676
00:26:37,060 --> 00:26:40,960
ensure that we can do this filtering

677
00:26:38,740 --> 00:26:43,180
instead what we're trying to do is

678
00:26:40,960 --> 00:26:44,680
ensure that we can find fixes in the

679
00:26:43,180 --> 00:26:46,660
meantime before we can the other

680
00:26:44,680 --> 00:26:50,290
hardware can catch up to the way we

681
00:26:46,660 --> 00:26:52,000
think about threats these days the

682
00:26:50,290 --> 00:26:54,430
alternative course is to defeat your

683
00:26:52,000 --> 00:26:57,970
things and we're seeing that so we've

684
00:26:54,430 --> 00:26:59,710
seen customers remove entire physical

685
00:26:57,970 --> 00:27:02,080
connections that are usually not there

686
00:26:59,710 --> 00:27:06,580
they're usually there and we've seen

687
00:27:02,080 --> 00:27:09,550
people very aggressively D featuring

688
00:27:06,580 --> 00:27:12,610
UEFI firmware to ensure that things like

689
00:27:09,550 --> 00:27:16,720
software SM eyes are missing or no

690
00:27:12,610 --> 00:27:22,570
longer yo they are not so prevalent much

691
00:27:16,720 --> 00:27:26,980
less attack service and sort of as I

692
00:27:22,570 --> 00:27:29,139
mentioned before the what we really want

693
00:27:26,980 --> 00:27:30,760
to do is try and find a way to secure

694
00:27:29,140 --> 00:27:32,610
the components using the hardware that

695
00:27:30,760 --> 00:27:35,230
we have using the system's up you have

696
00:27:32,610 --> 00:27:37,060
to ensure that that we have some measure

697
00:27:35,230 --> 00:27:38,500
of security until we get to the point

698
00:27:37,060 --> 00:27:43,000
where we can you know design our perfect

699
00:27:38,500 --> 00:27:45,900
system and one of the things we see

700
00:27:43,000 --> 00:27:50,710
going forward is this using the SMM as a

701
00:27:45,900 --> 00:27:52,840
sort of like a strong clave as Nathan

702
00:27:50,710 --> 00:27:57,280
mentioned earlier it's not it's not a

703
00:27:52,840 --> 00:27:58,810
TPM it's not trust in it it has a lot of

704
00:27:57,280 --> 00:28:00,810
the problems that they didn't Majan and

705
00:27:58,810 --> 00:28:03,250
because it wasn't treated like that

706
00:28:00,810 --> 00:28:06,820
although there are some chipset features

707
00:28:03,250 --> 00:28:08,590
that allow you to for example ensure

708
00:28:06,820 --> 00:28:11,379
that the flash can only be written

709
00:28:08,590 --> 00:28:15,790
during SMM and certain pins can only be

710
00:28:11,380 --> 00:28:17,740
used during SMM it's it's becoming more

711
00:28:15,790 --> 00:28:19,649
useful in terms of software protections

712
00:28:17,740 --> 00:28:22,620
like I said the back porting these

713
00:28:19,650 --> 00:28:25,720
security features to the existing system

714
00:28:22,620 --> 00:28:28,090
and we're seeing a lot of that so the

715
00:28:25,720 --> 00:28:31,120
upcoming that what we'll talk about next

716
00:28:28,090 --> 00:28:33,520
after a short sort of detour will be the

717
00:28:31,120 --> 00:28:38,979
deep dive into some of these components

718
00:28:33,520 --> 00:28:42,220
that have ported a filter or control

719
00:28:38,980 --> 00:28:43,840
into into SMM into the UEFI such that it

720
00:28:42,220 --> 00:28:51,460
controls the traffic between the host

721
00:28:43,840 --> 00:28:53,409
and some of these other components as I

722
00:28:51,460 --> 00:28:54,370
said the the trust place in SMM has

723
00:28:53,410 --> 00:28:54,830
changed over time

724
00:28:54,370 --> 00:28:57,560
so Reed

725
00:28:54,830 --> 00:28:58,760
as you if you wonder update from where

726
00:28:57,560 --> 00:29:00,679
you would be able to do it without

727
00:28:58,760 --> 00:29:05,240
rebooting right you would just ask s mmm

728
00:29:00,680 --> 00:29:07,430
through a net software SMI 2 to enable

729
00:29:05,240 --> 00:29:09,670
the the rights to the flash and then

730
00:29:07,430 --> 00:29:15,230
flash you know your new you new firmware

731
00:29:09,670 --> 00:29:16,640
as SMM became less of a boundary i we

732
00:29:15,230 --> 00:29:18,650
ended up using more of these features

733
00:29:16,640 --> 00:29:20,600
that intel provides such as the the

734
00:29:18,650 --> 00:29:22,430
protection registers and things like

735
00:29:20,600 --> 00:29:24,439
that that will not allow you to these

736
00:29:22,430 --> 00:29:26,330
are you know set once during boot and

737
00:29:24,440 --> 00:29:28,430
then you have to reboot to clear them

738
00:29:26,330 --> 00:29:30,439
again so as you come up you set these

739
00:29:28,430 --> 00:29:33,380
these protection registers and now flash

740
00:29:30,440 --> 00:29:35,150
can no longer be turned back on to be

741
00:29:33,380 --> 00:29:37,600
writable so to do the firmware update

742
00:29:35,150 --> 00:29:40,130
you have to use you have to reboot and

743
00:29:37,600 --> 00:29:42,199
do this early in boo so you're not doing

744
00:29:40,130 --> 00:29:48,320
it at the time that the us actually has

745
00:29:42,200 --> 00:29:50,240
a tak surface to the SMM maybe hopefully

746
00:29:48,320 --> 00:29:51,260
we'll see a little bit of this the tide

747
00:29:50,240 --> 00:29:53,900
turning

748
00:29:51,260 --> 00:29:56,090
some of the some of the ufi defenses now

749
00:29:53,900 --> 00:29:57,110
are actually ending up in firmware so

750
00:29:56,090 --> 00:30:02,659
things that have been around for two

751
00:29:57,110 --> 00:30:04,550
years or so in as example code as a the

752
00:30:02,660 --> 00:30:06,590
provide code from vendors are making

753
00:30:04,550 --> 00:30:10,480
even the chrome are things like actual

754
00:30:06,590 --> 00:30:13,639
page tables and sfm protections provided

755
00:30:10,480 --> 00:30:15,110
to ring 0 outside of us mmm from s mmm

756
00:30:13,640 --> 00:30:18,140
so ensuring that assam m can't write two

757
00:30:15,110 --> 00:30:20,899
pages that are that you wouldn't want it

758
00:30:18,140 --> 00:30:23,150
to again it kind of all follow this

759
00:30:20,900 --> 00:30:25,070
trend of ensuring that all these

760
00:30:23,150 --> 00:30:27,590
components have well-defined boundaries

761
00:30:25,070 --> 00:30:29,270
and that it is more of a network than a

762
00:30:27,590 --> 00:30:31,610
sort of cooperating system nowadays and

763
00:30:29,270 --> 00:30:33,379
you need to ensure that these components

764
00:30:31,610 --> 00:30:42,439
have their own boundaries and their own

765
00:30:33,380 --> 00:30:45,020
security controls as we said again the

766
00:30:42,440 --> 00:30:47,900
very beginning we're trying to hit this

767
00:30:45,020 --> 00:30:49,430
from the most we want to think as an

768
00:30:47,900 --> 00:30:50,600
attacker starting at the hosts we gave

769
00:30:49,430 --> 00:30:52,400
all the reasons why we think we can get

770
00:30:50,600 --> 00:30:54,560
there and sometimes we're even provided

771
00:30:52,400 --> 00:31:00,070
that access from the the person that is

772
00:30:54,560 --> 00:31:03,169
defending against us and coming at this

773
00:31:00,070 --> 00:31:04,879
without this knowledge two years ago it

774
00:31:03,170 --> 00:31:07,310
was hard to find all of these things

775
00:31:04,880 --> 00:31:08,190
that it's a complex system there's tons

776
00:31:07,310 --> 00:31:09,929
of acronyms

777
00:31:08,190 --> 00:31:13,020
we've tried to define as many as we

778
00:31:09,930 --> 00:31:14,790
could without without getting crazy but

779
00:31:13,020 --> 00:31:16,560
I'm sure that you know anyone else

780
00:31:14,790 --> 00:31:18,210
starting here looking for service and

781
00:31:16,560 --> 00:31:20,700
looking for vulnerabilities assessing

782
00:31:18,210 --> 00:31:22,770
the security of a motherboard a modern

783
00:31:20,700 --> 00:31:24,750
server will have to go through the same

784
00:31:22,770 --> 00:31:26,670
trials that we have and I think

785
00:31:24,750 --> 00:31:27,870
hopefully I'll provide you a quick

786
00:31:26,670 --> 00:31:33,600
laundry list the things that you can go

787
00:31:27,870 --> 00:31:34,949
Google later that might help you they

788
00:31:33,600 --> 00:31:38,669
said things we wish we knew two years

789
00:31:34,950 --> 00:31:40,830
ago first you know you hear all these

790
00:31:38,670 --> 00:31:43,170
things and if you've been doing software

791
00:31:40,830 --> 00:31:47,490
development off or security long enough

792
00:31:43,170 --> 00:31:48,600
you may have touched upon them but the

793
00:31:47,490 --> 00:31:50,490
main ways in which you're going to talk

794
00:31:48,600 --> 00:31:52,409
to these devices these other components

795
00:31:50,490 --> 00:31:58,800
from the hosts are going to be memory

796
00:31:52,410 --> 00:32:00,780
mapped i/o port i/o or through through

797
00:31:58,800 --> 00:32:03,240
it controller through the ice party or

798
00:32:00,780 --> 00:32:06,149
through LPC which is also going to be

799
00:32:03,240 --> 00:32:08,700
this port i/o so these are the main

800
00:32:06,150 --> 00:32:10,830
interfaces that we need to monitor for

801
00:32:08,700 --> 00:32:12,930
if we want to reverse engineer any of

802
00:32:10,830 --> 00:32:18,659
the systems that that we're trying to

803
00:32:12,930 --> 00:32:23,430
assess so dynamic cooling chip sack is

804
00:32:18,660 --> 00:32:25,890
sort of the catch-all it has it provides

805
00:32:23,430 --> 00:32:27,750
you with the ability to it first of all

806
00:32:25,890 --> 00:32:29,550
it has a bunch of modules that will do

807
00:32:27,750 --> 00:32:31,470
these dynamic tests for you so you can

808
00:32:29,550 --> 00:32:34,139
run its suite of tests against its at

809
00:32:31,470 --> 00:32:36,930
various levels of update depending on

810
00:32:34,140 --> 00:32:38,430
how how new of a set of you know CPU or

811
00:32:36,930 --> 00:32:40,680
chipset that you're using PCH that

812
00:32:38,430 --> 00:32:42,870
you're using but it is a great base and

813
00:32:40,680 --> 00:32:46,860
it could up gets updated fairly quickly

814
00:32:42,870 --> 00:32:49,169
so that that would be my first Google as

815
00:32:46,860 --> 00:32:51,120
far as enumeration goes getting a lay of

816
00:32:49,170 --> 00:32:52,650
the land from PCI bus would be really

817
00:32:51,120 --> 00:32:53,699
useful and it'll tell you what

818
00:32:52,650 --> 00:32:56,040
components you can talk to you there

819
00:32:53,700 --> 00:32:57,440
which which buses you're going to be

820
00:32:56,040 --> 00:32:59,220
able to speak to you from the host and

821
00:32:57,440 --> 00:33:03,570
how you're gonna be able to speak to

822
00:32:59,220 --> 00:33:06,300
them DM ID code is gonna parse the SM

823
00:33:03,570 --> 00:33:08,189
BIOS that ACPI stuff that is provided

824
00:33:06,300 --> 00:33:09,540
from bias to the operating system to be

825
00:33:08,190 --> 00:33:12,210
able to configure this and to be able to

826
00:33:09,540 --> 00:33:13,800
know what peripherals are available for

827
00:33:12,210 --> 00:33:16,680
you to test you're not always going to

828
00:33:13,800 --> 00:33:19,350
have an accurate view of this and this

829
00:33:16,680 --> 00:33:21,299
is also not ground truth DM ID code is

830
00:33:19,350 --> 00:33:26,850
only what has been provided to

831
00:33:21,299 --> 00:33:29,220
you as an attacker ICRC probe is another

832
00:33:26,850 --> 00:33:32,399
tool that will allow you to sort of scan

833
00:33:29,220 --> 00:33:35,039
in I squared C bus for anything that'll

834
00:33:32,399 --> 00:33:36,768
respond again it's not perfect and it's

835
00:33:35,039 --> 00:33:39,809
it's using heuristics to try and do this

836
00:33:36,769 --> 00:33:42,690
but it may help provide you some some

837
00:33:39,809 --> 00:33:47,850
sort of ground truth there's some some

838
00:33:42,690 --> 00:33:51,600
things to follow up one the last piece

839
00:33:47,850 --> 00:33:53,699
is the one that I think we found most

840
00:33:51,600 --> 00:33:56,279
useful is creating tools that allow you

841
00:33:53,700 --> 00:34:00,090
to inspect the traffic that goes along

842
00:33:56,279 --> 00:34:03,269
these these interfaces the the first set

843
00:34:00,090 --> 00:34:06,029
of tools like straight debugging of

844
00:34:03,269 --> 00:34:08,760
things like firmware update tools and

845
00:34:06,029 --> 00:34:11,429
then dynamic binary instrumentation

846
00:34:08,760 --> 00:34:14,159
tools like Intel pin and Val grind what

847
00:34:11,429 --> 00:34:15,359
those will provide you and the types of

848
00:34:14,159 --> 00:34:19,109
tools that we've written to use those

849
00:34:15,359 --> 00:34:20,699
are tracing mapping of mm IO for these

850
00:34:19,109 --> 00:34:23,239
various PCI devices if you have one

851
00:34:20,699 --> 00:34:27,449
device that you're targeting you can

852
00:34:23,239 --> 00:34:29,729
create a tool that will chase all open

853
00:34:27,449 --> 00:34:32,339
system calls looking for an opening of

854
00:34:29,730 --> 00:34:33,719
dev mem because oftentimes these firmer

855
00:34:32,339 --> 00:34:36,418
update tools are trying to run without

856
00:34:33,719 --> 00:34:39,779
any use of the driver and so they'll map

857
00:34:36,418 --> 00:34:42,418
dev mem in they'll map the the bar

858
00:34:39,780 --> 00:34:45,210
register from PCI and then they'll do

859
00:34:42,418 --> 00:34:46,679
straight mm IO register access to do to

860
00:34:45,210 --> 00:34:49,799
poke in exactly what they need for their

861
00:34:46,679 --> 00:34:54,470
firmware update and if you can trace

862
00:34:49,799 --> 00:34:57,240
those you can get a great sort of map of

863
00:34:54,469 --> 00:35:00,480
what they're trying to do it's very

864
00:34:57,240 --> 00:35:02,339
similar to how you would reverse

865
00:35:00,480 --> 00:35:04,650
engineering and network protocol so you

866
00:35:02,339 --> 00:35:07,680
would take Wireshark you run Wireshark

867
00:35:04,650 --> 00:35:09,480
or TCP dump you'd fit a little bit and

868
00:35:07,680 --> 00:35:13,589
then you go look at the track this is

869
00:35:09,480 --> 00:35:15,299
exactly the same approach for reverse

870
00:35:13,589 --> 00:35:16,920
engineering things like drivers that are

871
00:35:15,299 --> 00:35:19,200
doing these I mentioned like the user

872
00:35:16,920 --> 00:35:21,510
space flash updated firmware update

873
00:35:19,200 --> 00:35:23,640
tools sometimes you'll want to look at

874
00:35:21,510 --> 00:35:25,740
the behavior that you're not aware of

875
00:35:23,640 --> 00:35:27,779
you don't understand in in the kernel

876
00:35:25,740 --> 00:35:31,259
and to do that we've used a tool called

877
00:35:27,780 --> 00:35:32,940
fly and they we were taught about this

878
00:35:31,260 --> 00:35:35,040
cool tool called mm IO trace which is

879
00:35:32,940 --> 00:35:36,630
does exactly what I described but for

880
00:35:35,040 --> 00:35:39,270
the colonel for colonel model versus

881
00:35:36,630 --> 00:35:42,120
userspace the last thing is this sub

882
00:35:39,270 --> 00:35:44,400
poke tool which is a it allows you to

883
00:35:42,120 --> 00:35:47,490
build a shared object that can be

884
00:35:44,400 --> 00:35:49,470
injected prior to the user space tool

885
00:35:47,490 --> 00:35:52,109
running and do exactly what I described

886
00:35:49,470 --> 00:35:54,029
for like the the DB I for Intel pan and

887
00:35:52,110 --> 00:35:56,090
Val grind but it's really quick it's

888
00:35:54,030 --> 00:35:58,680
really nice you should check it out

889
00:35:56,090 --> 00:36:01,700
static tolling blow through this pretty

890
00:35:58,680 --> 00:36:06,770
quick so we're running out of time here

891
00:36:01,700 --> 00:36:06,770
Ida of course to look at the things that

892
00:36:06,920 --> 00:36:12,420
any I mean anything that's running on

893
00:36:08,940 --> 00:36:14,310
the system we use it for EFI ufi modules

894
00:36:12,420 --> 00:36:18,360
we use it for the tools that are running

895
00:36:14,310 --> 00:36:20,490
in user space for doing firmer flash

896
00:36:18,360 --> 00:36:22,530
updates from our updates and we use it

897
00:36:20,490 --> 00:36:23,910
for reverse engineering firmware if we

898
00:36:22,530 --> 00:36:25,110
can get it so some of these components

899
00:36:23,910 --> 00:36:27,629
will have firmware running on there

900
00:36:25,110 --> 00:36:29,100
they're micro micro processors and we

901
00:36:27,630 --> 00:36:31,110
can use Ida to reverse engineer this

902
00:36:29,100 --> 00:36:34,529
there's a number of plugins that allow

903
00:36:31,110 --> 00:36:37,560
you to provide you the ability to mark

904
00:36:34,530 --> 00:36:39,480
it up with efi thinks efi information

905
00:36:37,560 --> 00:36:41,040
prior looking at it because it's if I

906
00:36:39,480 --> 00:36:43,920
requires a lot of data file I think the

907
00:36:41,040 --> 00:36:46,830
dynamic we looked up we wrote a bunch of

908
00:36:43,920 --> 00:36:49,170
tools in binary ninja that do some of

909
00:36:46,830 --> 00:36:51,029
the same things and then you fi tool is

910
00:36:49,170 --> 00:36:53,100
a great tool for extracting all of the

911
00:36:51,030 --> 00:36:56,760
if I'm you have five modules from a

912
00:36:53,100 --> 00:36:58,950
firmware blob we use khatai struts to

913
00:36:56,760 --> 00:37:02,220
parse some of these because oftentimes

914
00:36:58,950 --> 00:37:03,779
we will have firmware that that is not

915
00:37:02,220 --> 00:37:05,790
in like al for something that we can

916
00:37:03,780 --> 00:37:07,440
load so sometimes we'll need to either

917
00:37:05,790 --> 00:37:09,000
pull the firmware that gets that is

918
00:37:07,440 --> 00:37:10,560
embedded in something like a flash

919
00:37:09,000 --> 00:37:11,910
update tool from where update tool to

920
00:37:10,560 --> 00:37:15,779
pull it out to then put in these other

921
00:37:11,910 --> 00:37:19,290
tools and of course grab some general

922
00:37:15,780 --> 00:37:20,520
tools general tips as I said oftentimes

923
00:37:19,290 --> 00:37:22,890
we're looking at firmware updates and

924
00:37:20,520 --> 00:37:26,430
the reason for that is that these

925
00:37:22,890 --> 00:37:27,900
firmware update tools are often gonna do

926
00:37:26,430 --> 00:37:29,250
things beyond just farmer update they're

927
00:37:27,900 --> 00:37:32,630
going to be used in the field to do

928
00:37:29,250 --> 00:37:36,720
things like pull debug information too

929
00:37:32,630 --> 00:37:39,000
they may embed other tools that that you

930
00:37:36,720 --> 00:37:40,680
want to understand then I'll explain

931
00:37:39,000 --> 00:37:42,990
more about the the peripheral or the

932
00:37:40,680 --> 00:37:46,230
system they're using and then of course

933
00:37:42,990 --> 00:37:48,060
Intel PCH data sheets are publicly

934
00:37:46,230 --> 00:37:48,810
available unlike some other data sheets

935
00:37:48,060 --> 00:37:52,920
and

936
00:37:48,810 --> 00:37:54,630
a lot of information we talked about the

937
00:37:52,920 --> 00:37:57,450
forum update tools you a file model

938
00:37:54,630 --> 00:38:01,070
similar oftentimes there'll be things in

939
00:37:57,450 --> 00:38:02,910
SMM that are trying to talk to the

940
00:38:01,070 --> 00:38:06,150
component that you're interested in so

941
00:38:02,910 --> 00:38:10,680
they're important to look at and I think

942
00:38:06,150 --> 00:38:13,140
the last one is going to be if you're

943
00:38:10,680 --> 00:38:16,290
looking towards to pivot from the host

944
00:38:13,140 --> 00:38:19,710
to SMM we tend to look for things like

945
00:38:16,290 --> 00:38:21,270
sm ram read first or a BMC root first

946
00:38:19,710 --> 00:38:24,110
the reasoning is that both will provide

947
00:38:21,270 --> 00:38:28,350
a lot of information to us about how the

948
00:38:24,110 --> 00:38:30,840
system how the firmware in SMM is

949
00:38:28,350 --> 00:38:32,250
running if we're curious about the

950
00:38:30,840 --> 00:38:36,320
configuration and we can't we can't

951
00:38:32,250 --> 00:38:38,580
understand it from the existing image

952
00:38:36,320 --> 00:38:44,010
BMC root will ask to do things like turn

953
00:38:38,580 --> 00:38:47,970
on logging other very useful things okay

954
00:38:44,010 --> 00:38:49,080
let's get into a deep drive this is we

955
00:38:47,970 --> 00:38:50,819
talked a little bit about the components

956
00:38:49,080 --> 00:38:54,870
we talked about why we we think they're

957
00:38:50,820 --> 00:38:57,570
important give you a high mile-an-hour a

958
00:38:54,870 --> 00:38:59,880
review of all the tools that we use so

959
00:38:57,570 --> 00:39:02,870
let's look at one specific interface the

960
00:38:59,880 --> 00:39:07,380
interface between the notes in the BMC

961
00:39:02,870 --> 00:39:09,900
the hosts of the BMC interface there's

962
00:39:07,380 --> 00:39:12,960
this IPMI document a specification that

963
00:39:09,900 --> 00:39:14,310
describes these interfaces and the one

964
00:39:12,960 --> 00:39:18,060
that we're concerned with is going to be

965
00:39:14,310 --> 00:39:19,980
called the system interface IP my

966
00:39:18,060 --> 00:39:22,770
defines it and then defines a bunch of

967
00:39:19,980 --> 00:39:27,180
ways that a system can expose this

968
00:39:22,770 --> 00:39:32,610
interface there are four that they give

969
00:39:27,180 --> 00:39:34,980
in the spec kcs SMI CBT and SIF in all

970
00:39:32,610 --> 00:39:40,230
of my travels I've only seen kc s and s

971
00:39:34,980 --> 00:39:41,670
SIF used kcs is I'm not going to get

972
00:39:40,230 --> 00:39:44,490
into the detail you can read the spec if

973
00:39:41,670 --> 00:39:46,050
you really are curious but but the the

974
00:39:44,490 --> 00:39:52,919
main takeaway is that kcs is going to

975
00:39:46,050 --> 00:39:56,940
use the LPC bus or by bus to to expose a

976
00:39:52,920 --> 00:40:00,960
very simple sort of byte by byte serial

977
00:39:56,940 --> 00:40:04,820
interface to the BMC SIF is very similar

978
00:40:00,960 --> 00:40:09,240
but it uses I have I squared C buses

979
00:40:04,820 --> 00:40:12,450
so if we're on a server and we're

980
00:40:09,240 --> 00:40:13,709
curious what interface it has one of the

981
00:40:12,450 --> 00:40:18,689
things we talked about was this DM ID

982
00:40:13,710 --> 00:40:19,860
code command if you run D MIT could one

983
00:40:18,690 --> 00:40:23,430
of the things that are often advertised

984
00:40:19,860 --> 00:40:29,250
is the the IPMI device and in this

985
00:40:23,430 --> 00:40:31,620
example we have a case es an expose or

986
00:40:29,250 --> 00:40:34,610
advertise kcs device and the base

987
00:40:31,620 --> 00:40:43,370
address is going to be that CC 0 0 c c 0

988
00:40:34,610 --> 00:40:47,400
io port the linux kernel provides a

989
00:40:43,370 --> 00:40:51,810
driver so you can talk to the IPMI you

990
00:40:47,400 --> 00:40:55,050
can talk i PMI to to your vm c and once

991
00:40:51,810 --> 00:40:57,000
you modprobe that or in Samad that it's

992
00:40:55,050 --> 00:40:58,830
the the DMS is output it will help you

993
00:40:57,000 --> 00:41:01,530
understand whether or not that what you

994
00:40:58,830 --> 00:41:03,720
saw in the DM ID code is actually actor

995
00:41:01,530 --> 00:41:06,750
because like I said before sometimes DM

996
00:41:03,720 --> 00:41:09,930
ID code is not accurate when it works it

997
00:41:06,750 --> 00:41:11,310
tells you know it's going to especially

998
00:41:09,930 --> 00:41:13,620
these last two lines it's going to say

999
00:41:11,310 --> 00:41:16,920
that it found the new BMC and that the

1000
00:41:13,620 --> 00:41:19,920
kcs interface is initialized oftentimes

1001
00:41:16,920 --> 00:41:21,180
it will be disabled and if it's disabled

1002
00:41:19,920 --> 00:41:22,820
you won't get those last two lines and

1003
00:41:21,180 --> 00:41:25,980
none your ipmi tool commands will work

1004
00:41:22,820 --> 00:41:27,810
so why would you want to disable it well

1005
00:41:25,980 --> 00:41:29,810
going back to this these system

1006
00:41:27,810 --> 00:41:32,790
interfaces are not meant to be used or

1007
00:41:29,810 --> 00:41:34,110
at least this boundary between the host

1008
00:41:32,790 --> 00:41:36,210
and the BMC through these system

1009
00:41:34,110 --> 00:41:38,760
interfaces is not meant to be privileged

1010
00:41:36,210 --> 00:41:40,320
so it was it was all kinda key if you're

1011
00:41:38,760 --> 00:41:41,940
gonna talk to the BMC

1012
00:41:40,320 --> 00:41:44,700
through these interfaces you're assumed

1013
00:41:41,940 --> 00:41:46,260
to be able it's assumed that you're

1014
00:41:44,700 --> 00:41:48,210
allowed to and that the system designed

1015
00:41:46,260 --> 00:41:49,920
it that way and that was configured in

1016
00:41:48,210 --> 00:41:54,180
such a way that that they wanted you to

1017
00:41:49,920 --> 00:41:57,630
do this so what do we do about that this

1018
00:41:54,180 --> 00:41:58,950
case yes interfaces I hate it I thing we

1019
00:41:57,630 --> 00:42:00,630
haven't talked about is that this

1020
00:41:58,950 --> 00:42:02,700
interface and these IPMI commands off

1021
00:42:00,630 --> 00:42:04,710
often going to provide a huge amount of

1022
00:42:02,700 --> 00:42:06,359
surface but beyond that they're also

1023
00:42:04,710 --> 00:42:10,050
going to provide features that allow you

1024
00:42:06,360 --> 00:42:12,600
to do things like flash the BMC so if

1025
00:42:10,050 --> 00:42:14,580
you want to prevent if you don't want to

1026
00:42:12,600 --> 00:42:16,830
trough the hosts and you want to ensure

1027
00:42:14,580 --> 00:42:17,190
that the host is not allowed to just

1028
00:42:16,830 --> 00:42:19,950
last

1029
00:42:17,190 --> 00:42:24,480
BMC whenever at once what can you do

1030
00:42:19,950 --> 00:42:25,680
well you don't want it right so just get

1031
00:42:24,480 --> 00:42:31,170
rid of it we'll just throw it out we'll

1032
00:42:25,680 --> 00:42:33,720
be featuring unfortunately there isn't

1033
00:42:31,170 --> 00:42:37,589
just one so we saw that advertisement of

1034
00:42:33,720 --> 00:42:38,939
wine in the DMI decode output but often

1035
00:42:37,589 --> 00:42:42,210
there's gonna be more than one there's

1036
00:42:38,940 --> 00:42:44,670
going to be two or three why do we need

1037
00:42:42,210 --> 00:42:45,900
multiple kcs interfaces why would a BMC

1038
00:42:44,670 --> 00:42:51,210
ever support multiple it's only gonna be

1039
00:42:45,900 --> 00:42:53,760
plugged into one one bus so why does it

1040
00:42:51,210 --> 00:42:55,950
where is that more well what we found

1041
00:42:53,760 --> 00:43:00,089
out is that the SMM might needed to

1042
00:42:55,950 --> 00:43:04,529
access the BMC to to do things like send

1043
00:43:00,089 --> 00:43:09,000
a log message about a fatal hardware or

1044
00:43:04,530 --> 00:43:11,339
a significant hardware and so here we

1045
00:43:09,000 --> 00:43:12,839
have the again this is that PMI spec

1046
00:43:11,339 --> 00:43:15,569
showing that they have the all these

1047
00:43:12,839 --> 00:43:18,180
sensor reading errors that the SMM can

1048
00:43:15,569 --> 00:43:20,069
provide can send over to the BMC that an

1049
00:43:18,180 --> 00:43:22,078
administrator can then go look for

1050
00:43:20,069 --> 00:43:23,670
saying why is my you know why does it

1051
00:43:22,079 --> 00:43:28,050
turn off every 20 minutes oh it's it's

1052
00:43:23,670 --> 00:43:30,060
having a thermal problem okay fine so

1053
00:43:28,050 --> 00:43:31,680
why don't we just turn off the one

1054
00:43:30,060 --> 00:43:33,509
interface and leave the one for SMM

1055
00:43:31,680 --> 00:43:35,700
right we have these two interfaces one

1056
00:43:33,510 --> 00:43:37,290
is exposed to the OS one is meant to be

1057
00:43:35,700 --> 00:43:39,779
used by SMM but we'll just turn off the

1058
00:43:37,290 --> 00:43:41,849
Auslan unfortunately it's not that easy

1059
00:43:39,780 --> 00:43:44,670
because like I said kcs works over this

1060
00:43:41,849 --> 00:43:47,540
poor I owe and the chipset wasn't

1061
00:43:44,670 --> 00:43:50,339
designed to prevent access from port Ivo

1062
00:43:47,540 --> 00:43:52,020
across these things you'd have to know

1063
00:43:50,339 --> 00:43:56,549
one approach would be to reconfigure

1064
00:43:52,020 --> 00:43:59,250
your entire LPC controller set up every

1065
00:43:56,550 --> 00:44:05,040
time you enter an egg is smm not a great

1066
00:43:59,250 --> 00:44:08,700
approach slow and messy so it's not it's

1067
00:44:05,040 --> 00:44:12,119
not simple do we give up logging serious

1068
00:44:08,700 --> 00:44:14,669
hours well we could right and we've seen

1069
00:44:12,119 --> 00:44:16,890
people approach this in that way you can

1070
00:44:14,670 --> 00:44:21,569
turn off the you can turn it off you can

1071
00:44:16,890 --> 00:44:23,520
do it more often we've seen the approach

1072
00:44:21,569 --> 00:44:26,700
of the ostrich with his head in the sand

1073
00:44:23,520 --> 00:44:29,369
so often times we'll see people just

1074
00:44:26,700 --> 00:44:30,779
turn it just not just ignore it ignore

1075
00:44:29,369 --> 00:44:32,579
it as a problem and I see

1076
00:44:30,779 --> 00:44:37,890
that because it's not exposed via the

1077
00:44:32,579 --> 00:44:40,380
DMI decode via the SM bias metadata we

1078
00:44:37,890 --> 00:44:43,279
won't we won't deal with it it no one

1079
00:44:40,380 --> 00:44:43,279
will find it it'll be fine

1080
00:44:43,699 --> 00:44:49,589
that one I'm not a big play enough the

1081
00:44:46,439 --> 00:44:52,140
other one the second one is this amazon

1082
00:44:49,589 --> 00:44:54,989
nitrate security chip so maybe we just

1083
00:44:52,140 --> 00:44:57,179
gave a talk in 2018 at the 2018 reinvent

1084
00:44:54,989 --> 00:45:00,029
discussing their new nitra architecture

1085
00:44:57,179 --> 00:45:01,939
and one of the about a third of the

1086
00:45:00,029 --> 00:45:04,859
middle of talk was talking about this

1087
00:45:01,939 --> 00:45:08,999
nitro security chip and they mentioned

1088
00:45:04,859 --> 00:45:10,709
that they maybe they have this filter

1089
00:45:08,999 --> 00:45:13,019
that they put in this harbor filter that

1090
00:45:10,709 --> 00:45:15,719
ensures that no non-volatile memory is

1091
00:45:13,019 --> 00:45:17,218
ever written and they call out in fact

1092
00:45:15,719 --> 00:45:20,969
the BMC interface saying that you know

1093
00:45:17,219 --> 00:45:22,709
they need to lock that down so if you're

1094
00:45:20,969 --> 00:45:25,169
not Amazon and you can't create your own

1095
00:45:22,709 --> 00:45:28,908
hardware what can you do back to this

1096
00:45:25,169 --> 00:45:35,189
idea of using SMM and Lenovo took this

1097
00:45:28,909 --> 00:45:38,759
developers kcs lock feature so this code

1098
00:45:35,189 --> 00:45:42,209
is that is in BIOS and when when you fi

1099
00:45:38,759 --> 00:45:44,489
is when SMM is triggering the ready to

1100
00:45:42,209 --> 00:45:46,979
lock event no one ready to lock this

1101
00:45:44,489 --> 00:45:49,140
call is gonna this callback is gonna get

1102
00:45:46,979 --> 00:45:54,049
called and what this does is it sends

1103
00:45:49,140 --> 00:45:58,979
this it generates a random nonce this a

1104
00:45:54,049 --> 00:46:01,019
32 bit random value and it sends it

1105
00:45:58,979 --> 00:46:02,908
across to the to the BMC now this is

1106
00:46:01,019 --> 00:46:05,339
prior to any OS code any of the host

1107
00:46:02,909 --> 00:46:09,539
code running this is early early in the

1108
00:46:05,339 --> 00:46:12,799
early in BIOS once it sends that caseous

1109
00:46:09,539 --> 00:46:14,909
knots over to the to the BMC then

1110
00:46:12,799 --> 00:46:18,630
instead of reconfiguring the whole thing

1111
00:46:14,909 --> 00:46:20,880
every time any time that SMM would want

1112
00:46:18,630 --> 00:46:23,819
to send one of these admittedly rare

1113
00:46:20,880 --> 00:46:26,489
events for some hardware failure you

1114
00:46:23,819 --> 00:46:28,979
know unlock this feature wall is he an S

1115
00:46:26,489 --> 00:46:31,439
mmm by sending that KC Assange back to

1116
00:46:28,979 --> 00:46:35,308
the BMC again the BMC would would

1117
00:46:31,439 --> 00:46:36,928
acknowledge it turn the key CS or lose

1118
00:46:35,309 --> 00:46:39,119
not turn it on but you know set a flag

1119
00:46:36,929 --> 00:46:41,819
saying that yes we're now allowing any

1120
00:46:39,119 --> 00:46:44,760
traffic on this bus to this to this

1121
00:46:41,819 --> 00:46:49,170
endpoint they would send the normal

1122
00:46:44,760 --> 00:46:52,020
kcs do perform the normal kcs message

1123
00:46:49,170 --> 00:46:54,120
and then clear the KCF nots again to

1124
00:46:52,020 --> 00:46:56,280
ensure that returning from fmm back to

1125
00:46:54,120 --> 00:46:58,109
the host would leave it in a state where

1126
00:46:56,280 --> 00:47:00,150
anyone running on the host or any code

1127
00:46:58,110 --> 00:47:04,700
running was couldn't access this this

1128
00:47:00,150 --> 00:47:12,120
this feature I think we'll skip this one

1129
00:47:04,700 --> 00:47:14,490
and go to the to the end but yeah do you

1130
00:47:12,120 --> 00:47:16,890
want to jump on it yeah sure yeah and

1131
00:47:14,490 --> 00:47:18,359
the the the the case today that we

1132
00:47:16,890 --> 00:47:19,799
swayed that we that we skipped over is

1133
00:47:18,360 --> 00:47:22,650
really some of the same story right so

1134
00:47:19,800 --> 00:47:25,140
it's it's a it's a flash component

1135
00:47:22,650 --> 00:47:26,970
that's exposed over an interface that it

1136
00:47:25,140 --> 00:47:28,259
should not have been and then they

1137
00:47:26,970 --> 00:47:29,819
realized that and so they tried to put a

1138
00:47:28,260 --> 00:47:32,040
lock on it in that particular case the

1139
00:47:29,820 --> 00:47:34,950
lock didn't really work and so there

1140
00:47:32,040 --> 00:47:36,690
were some some CDs for it a little while

1141
00:47:34,950 --> 00:47:39,330
ago and now that was annotated like the

1142
00:47:36,690 --> 00:47:41,490
solution was to just remove the door

1143
00:47:39,330 --> 00:47:42,630
entirely so like now like where it used

1144
00:47:41,490 --> 00:47:43,830
to be open all the time if you knew the

1145
00:47:42,630 --> 00:47:45,150
key but then the key didn't really work

1146
00:47:43,830 --> 00:47:47,790
right and rather than re-engineer all

1147
00:47:45,150 --> 00:47:51,230
that it's all shut off until except for

1148
00:47:47,790 --> 00:47:53,990
like that small window during boot so

1149
00:47:51,230 --> 00:47:55,950
okay so wrapping up like like right what

1150
00:47:53,990 --> 00:47:58,589
what's interesting what do we care about

1151
00:47:55,950 --> 00:48:00,750
what's what's interesting to look at in

1152
00:47:58,590 --> 00:48:01,830
the future you mentioned some of this at

1153
00:48:00,750 --> 00:48:04,590
the beginning though just kind of talk

1154
00:48:01,830 --> 00:48:06,420
through it again right that the attack

1155
00:48:04,590 --> 00:48:07,650
chains in really restrictive

1156
00:48:06,420 --> 00:48:09,120
environments are the most interesting

1157
00:48:07,650 --> 00:48:10,290
they're the ones who turn on all the

1158
00:48:09,120 --> 00:48:12,660
security features right they're the ones

1159
00:48:10,290 --> 00:48:14,910
who who care about security enough to

1160
00:48:12,660 --> 00:48:16,649
have actually done those things and the

1161
00:48:14,910 --> 00:48:19,890
attack surface that's left over it's

1162
00:48:16,650 --> 00:48:23,640
still there and it's it's the it's the

1163
00:48:19,890 --> 00:48:25,620
sort of the current hardest part you've

1164
00:48:23,640 --> 00:48:27,420
got to deal with right so that that's

1165
00:48:25,620 --> 00:48:30,420
interesting the peripherals like as I

1166
00:48:27,420 --> 00:48:32,250
mentioned earlier it's really it's it's

1167
00:48:30,420 --> 00:48:33,930
not well understood yet right pivoting

1168
00:48:32,250 --> 00:48:35,220
back to the host it's something that I

1169
00:48:33,930 --> 00:48:38,460
think is probably very well understood

1170
00:48:35,220 --> 00:48:39,629
in certain quiet corners of the world

1171
00:48:38,460 --> 00:48:41,160
they don't talk about it publicly

1172
00:48:39,630 --> 00:48:42,660
there's actually not a whole lot there's

1173
00:48:41,160 --> 00:48:44,370
a very interesting attack surface from

1174
00:48:42,660 --> 00:48:46,500
VMC's in particular like there's a lot

1175
00:48:44,370 --> 00:48:48,180
of emulated devices that get exposed up

1176
00:48:46,500 --> 00:48:50,100
to the hosts that you know it's it's

1177
00:48:48,180 --> 00:48:51,210
sort of like I keep you like plug in a

1178
00:48:50,100 --> 00:48:53,490
face dancer into the host or something

1179
00:48:51,210 --> 00:48:55,500
like if they get hardware types of

1180
00:48:53,490 --> 00:48:56,370
attacks that you would normally think

1181
00:48:55,500 --> 00:48:57,600
I'd like I'm gonna walk up at this

1182
00:48:56,370 --> 00:48:58,730
machine and plug this thing in and then

1183
00:48:57,600 --> 00:48:59,810
in compromise it that way

1184
00:48:58,730 --> 00:49:03,680
but you're doing it through the BMC

1185
00:48:59,810 --> 00:49:04,849
remotely and then the user land stuff at

1186
00:49:03,680 --> 00:49:07,549
the end I think it needs a lot more

1187
00:49:04,849 --> 00:49:08,630
focus and it's it's got the same set all

1188
00:49:07,550 --> 00:49:10,099
of those same problems that I talked

1189
00:49:08,630 --> 00:49:11,510
about earlier some of them in crazy

1190
00:49:10,099 --> 00:49:15,619
cases or even exposed out on the network

1191
00:49:11,510 --> 00:49:17,599
so you end up where like perhaps I can

1192
00:49:15,619 --> 00:49:20,780
flash your firmware across the network

1193
00:49:17,599 --> 00:49:21,920
like that's not that shouldn't be that

1194
00:49:20,780 --> 00:49:23,180
should be a well-defined interface

1195
00:49:21,920 --> 00:49:24,200
that's like that it's locked out

1196
00:49:23,180 --> 00:49:25,700
appropriately right that you're doing

1197
00:49:24,200 --> 00:49:29,118
doing it on purpose and you're not

1198
00:49:25,700 --> 00:49:32,810
exposing it on accident right so so

1199
00:49:29,119 --> 00:49:37,310
laughs that's yeah so these are

1200
00:49:32,810 --> 00:49:38,450
hopefully our takeaways the despite all

1201
00:49:37,310 --> 00:49:41,000
this hardening the attack service

1202
00:49:38,450 --> 00:49:41,839
remains on modern service we talked

1203
00:49:41,000 --> 00:49:42,740
through a bunch of the hardening we

1204
00:49:41,839 --> 00:49:44,540
talked through some of the ways we're

1205
00:49:42,740 --> 00:49:46,040
trying to defend against it but it's

1206
00:49:44,540 --> 00:49:48,470
such a complex system and it's such a

1207
00:49:46,040 --> 00:49:50,420
legacy system that there's always these

1208
00:49:48,470 --> 00:49:52,098
direct corners that have been forgotten

1209
00:49:50,420 --> 00:49:53,930
about for fifteen years and I've always

1210
00:49:52,099 --> 00:49:56,839
worked that way but can no longer work

1211
00:49:53,930 --> 00:49:59,060
that way securely and reliably the

1212
00:49:56,839 --> 00:50:01,279
second takeaway is that SMM is not a

1213
00:49:59,060 --> 00:50:02,990
secure Enclave right we've seen attacks

1214
00:50:01,280 --> 00:50:05,390
my credential attacks against it we've

1215
00:50:02,990 --> 00:50:07,520
seen it has all the problems that you

1216
00:50:05,390 --> 00:50:09,440
would imagine when you're pretending

1217
00:50:07,520 --> 00:50:11,359
that it is a separate processor but it

1218
00:50:09,440 --> 00:50:15,530
isn't right it's running on the same the

1219
00:50:11,359 --> 00:50:16,700
same the same chip as a CPU additionally

1220
00:50:15,530 --> 00:50:19,550
we have a lot of hardening that go

1221
00:50:16,700 --> 00:50:23,509
against it but it's all that hardening

1222
00:50:19,550 --> 00:50:25,880
is hardening a appurtenant not as a TPM

1223
00:50:23,510 --> 00:50:27,050
not as a secure Enclave so things like a

1224
00:50:25,880 --> 00:50:29,270
Sun Ram read vulnerabilities they're

1225
00:50:27,050 --> 00:50:32,599
going to be have a huge impact that they

1226
00:50:29,270 --> 00:50:34,910
wouldn't have when another another

1227
00:50:32,599 --> 00:50:39,349
system that was looking at this as

1228
00:50:34,910 --> 00:50:43,098
holding secrets and then again we're

1229
00:50:39,349 --> 00:50:44,960
really really hot on this idea of coming

1230
00:50:43,099 --> 00:50:45,589
into a peripheral and then coming back

1231
00:50:44,960 --> 00:50:48,020
out of it

1232
00:50:45,589 --> 00:50:49,790
so persisting a little peripheral and

1233
00:50:48,020 --> 00:50:51,349
then looking at all the attack service

1234
00:50:49,790 --> 00:50:53,990
that you've gained there so the idea

1235
00:50:51,349 --> 00:50:55,550
again of this map using this idea of

1236
00:50:53,990 --> 00:50:57,709
searching for attack service and then

1237
00:50:55,550 --> 00:50:59,810
continue in iterating on that so once

1238
00:50:57,710 --> 00:51:02,780
you have a foothold on something like a

1239
00:50:59,810 --> 00:51:04,520
you know hard drive or SATA controller

1240
00:51:02,780 --> 00:51:08,089
now now what happens next

1241
00:51:04,520 --> 00:51:11,000
can you reinfect the host can you what

1242
00:51:08,089 --> 00:51:12,470
other sm bus buses do you have access to

1243
00:51:11,000 --> 00:51:17,300
all these things are really interesting

1244
00:51:12,470 --> 00:51:18,819
to us and we're out of time so thank you

1245
00:51:17,300 --> 00:51:20,780
we're gonna if you have any questions

1246
00:51:18,820 --> 00:51:22,520
gravity says we're walking out or we're

1247
00:51:20,780 --> 00:51:25,010
walking on our way over to the what's it

1248
00:51:22,520 --> 00:51:27,310
called the rapper yep it's gonna hear

1249
00:51:25,010 --> 00:51:27,310
thank you

