1
00:00:00,000 --> 00:00:12,780
good afternoon welcome to island hour ii

2
00:00:07,080 --> 00:00:14,820
i you are here to see may and orange

3
00:00:12,780 --> 00:00:18,930
speak to you about infiltrating

4
00:00:14,820 --> 00:00:21,769
corporate intranet like NSA preauth RCE

5
00:00:18,930 --> 00:00:23,820
on leading sslvpn

6
00:00:21,769 --> 00:00:25,409
before we begin i have a couple of

7
00:00:23,820 --> 00:00:27,300
housekeeping things that i had need to

8
00:00:25,410 --> 00:00:30,210
get through and then we'll get to our

9
00:00:27,300 --> 00:00:32,058
presenters please do stop by the

10
00:00:30,210 --> 00:00:34,770
business hall located at Mandalay Bay

11
00:00:32,058 --> 00:00:37,169
Oceanside and shoreline ballrooms on

12
00:00:34,770 --> 00:00:40,829
level 2 during the day and a welcome

13
00:00:37,170 --> 00:00:42,840
reception tonight at 5:30 the blackhat

14
00:00:40,829 --> 00:00:45,719
Arsenal is in the business Hall of level

15
00:00:42,840 --> 00:00:49,860
2 and then please join us for the pony

16
00:00:45,719 --> 00:00:52,350
Awards in lagoon JK and L at 6:30 this

17
00:00:49,860 --> 00:00:55,379
evening the speakers will be taking

18
00:00:52,350 --> 00:00:57,000
questions when they finish please step

19
00:00:55,379 --> 00:00:59,460
up to you there are several microphones

20
00:00:57,000 --> 00:01:01,410
throughout the room please step up to

21
00:00:59,460 --> 00:01:03,120
the microphone so that everybody can

22
00:01:01,410 --> 00:01:05,939
hear you when you do ask your question

23
00:01:03,120 --> 00:01:08,039
at the end and they will be happy to

24
00:01:05,939 --> 00:01:12,199
answer them for you so without further

25
00:01:08,040 --> 00:01:16,120
delay may and orange

26
00:01:12,200 --> 00:01:16,120
[Applause]

27
00:01:30,370 --> 00:01:45,950
what's it son as well okay

28
00:01:41,870 --> 00:01:47,840
hi it's good to be back nowadays Virtual

29
00:01:45,950 --> 00:01:51,470
Private Network becomes more and more

30
00:01:47,840 --> 00:01:53,540
prevalent for enterprise SSL VPN is the

31
00:01:51,470 --> 00:01:56,660
most convenient way for their employee

32
00:01:53,540 --> 00:02:00,260
to access the cooperation network for

33
00:01:56,660 --> 00:02:03,200
hackers it's also the shortest path to

34
00:02:00,260 --> 00:02:05,990
compromise your intranet so to pain

35
00:02:03,200 --> 00:02:10,670
let's take a look at how your SSL VPN

36
00:02:05,990 --> 00:02:15,530
could be wrong oh we thought that is

37
00:02:10,669 --> 00:02:19,700
there any NSA here okay sorry for the

38
00:02:15,530 --> 00:02:22,220
title yeah hi Orange

39
00:02:19,700 --> 00:02:25,459
we are from Def Con is searching in

40
00:02:22,220 --> 00:02:27,380
Taiwan and now another the other

41
00:02:25,459 --> 00:02:30,770
researcher and focusing on web

42
00:02:27,380 --> 00:02:34,190
application security apart from that and

43
00:02:30,770 --> 00:02:39,860
also a speaker Steve prayer and bounty

44
00:02:34,190 --> 00:02:42,859
hunter hello everyone I'm a John I'm a

45
00:02:39,860 --> 00:02:46,459
security researcher from Def core in I

46
00:02:42,860 --> 00:02:50,380
play CDF in he come in 207 CTF Ching I

47
00:02:46,459 --> 00:02:52,390
mainly focus on binary exploitation

48
00:02:50,380 --> 00:02:55,400
thank you

49
00:02:52,390 --> 00:02:57,170
here is the highlights today we will

50
00:02:55,400 --> 00:03:00,230
disclose preauth remote code execution

51
00:02:57,170 --> 00:03:03,859
and both protein net and Perl secure SSL

52
00:03:00,230 --> 00:03:06,130
VPN in the 14 Aircast we will show you

53
00:03:03,860 --> 00:03:09,410
the hacker / reliable binary

54
00:03:06,130 --> 00:03:12,890
exploitation with the magic string to

55
00:03:09,410 --> 00:03:15,350
open at all in the pro secure we will

56
00:03:12,890 --> 00:03:17,708
press enter alpha box with hacking and

57
00:03:15,350 --> 00:03:20,630
how it bypassed the to affect

58
00:03:17,709 --> 00:03:24,709
authentication and Twitter and hack into

59
00:03:20,630 --> 00:03:26,810
their most important server and last but

60
00:03:24,709 --> 00:03:29,600
not least we will introduce how we

61
00:03:26,810 --> 00:03:33,950
leverage a hidden feature to take over

62
00:03:29,600 --> 00:03:39,290
not not only your SSL VPN but also of

63
00:03:33,950 --> 00:03:42,230
your clients and this is the this is the

64
00:03:39,290 --> 00:03:44,739
agenda we first introduced the SSL VPN

65
00:03:42,230 --> 00:03:48,890
and why we focused on

66
00:03:44,739 --> 00:03:51,590
most of the SSL VPN providers show we

67
00:03:48,890 --> 00:03:54,140
will elaborate how interpret the plans

68
00:03:51,590 --> 00:03:57,739
and introduce the tech vectors to

69
00:03:54,140 --> 00:04:01,640
discover box of course we will have case

70
00:03:57,739 --> 00:04:03,879
studies and demonstration and last is

71
00:04:01,640 --> 00:04:11,078
the SSL VPN weaponization and

72
00:04:03,879 --> 00:04:14,030
recommendations so what is SSL VPN

73
00:04:11,079 --> 00:04:17,840
compared to the site to site VPN such as

74
00:04:14,030 --> 00:04:20,449
the IPSec and a PPTP SSL VPN is more

75
00:04:17,839 --> 00:04:23,539
ease of use and compatible with any

76
00:04:20,449 --> 00:04:27,110
network environments all you need is

77
00:04:23,539 --> 00:04:29,960
just a browser because of the

78
00:04:27,110 --> 00:04:34,360
convenience SSL VPN becomes the most

79
00:04:29,960 --> 00:04:34,359
popular remote SS way for enterprise

80
00:04:34,599 --> 00:04:41,030
this is a VPN are everywhere and protect

81
00:04:38,300 --> 00:04:44,349
the cooperation SS from internet

82
00:04:41,030 --> 00:04:46,580
exposure they are trust to be secure and

83
00:04:44,349 --> 00:04:50,900
considered as the only way to your

84
00:04:46,580 --> 00:04:55,659
private network but what is your trusted

85
00:04:50,900 --> 00:05:00,979
SSL VPN insecure they will become your

86
00:04:55,660 --> 00:05:05,830
virtual public network yes

87
00:05:00,979 --> 00:05:09,610
public so that's why we focus on SSL VPN

88
00:05:05,830 --> 00:05:12,889
they are important but put a blind spot

89
00:05:09,610 --> 00:05:16,639
they are widely used by operations of

90
00:05:12,889 --> 00:05:19,539
all sides but only few vendors dominate

91
00:05:16,639 --> 00:05:23,090
market according to our survey

92
00:05:19,539 --> 00:05:26,900
unfortunately hungry the top 3 SSL VPN

93
00:05:23,090 --> 00:05:30,859
vendors dominate about 75 percent market

94
00:05:26,900 --> 00:05:33,710
share so if you find a high impact but

95
00:05:30,860 --> 00:05:37,849
ability and one of the leading SSL VPN

96
00:05:33,710 --> 00:05:39,109
you can hack the planet the most

97
00:05:37,849 --> 00:05:43,340
important is

98
00:05:39,110 --> 00:05:48,949
SSL VPN must be exposed to outside so it

99
00:05:43,340 --> 00:05:52,609
must have direct internet access due to

100
00:05:48,949 --> 00:05:56,870
is importance even NSA's hunting for SSL

101
00:05:52,610 --> 00:05:58,039
VPN box SSL VPN is chaste by large

102
00:05:56,870 --> 00:06:01,400
corporations

103
00:05:58,039 --> 00:06:07,729
industry leaders and tech giants such as

104
00:06:01,400 --> 00:06:11,869
the Facebook Twitter and Marvel yeah the

105
00:06:07,729 --> 00:06:16,639
logo is cool even an essay use the

106
00:06:11,869 --> 00:06:17,629
sslvpn they are everywhere but you jur

107
00:06:16,639 --> 00:06:20,899
forgotten

108
00:06:17,629 --> 00:06:26,389
sometimes even hacker knows you SSL VPN

109
00:06:20,899 --> 00:06:28,849
model for example we discuss a preauth

110
00:06:26,389 --> 00:06:32,449
remote code execution and Palo Alto SSL

111
00:06:28,849 --> 00:06:35,990
VPN one month ago we find the plug as a

112
00:06:32,449 --> 00:06:38,379
tenderly however while reproducing on

113
00:06:35,990 --> 00:06:41,719
the latest version we failed

114
00:06:38,379 --> 00:06:45,499
so we start to doubt if this is the non

115
00:06:41,719 --> 00:06:47,719
vulnerability research all over the

116
00:06:45,499 --> 00:06:52,249
Internet but could not cite anything

117
00:06:47,719 --> 00:06:55,248
related there is no CVE advisory or any

118
00:06:52,249 --> 00:06:59,839
of fisher announcement therefore we

119
00:06:55,249 --> 00:07:01,909
believe this is a silent fix one day we

120
00:06:59,839 --> 00:07:05,149
surveyed all over the world and site

121
00:07:01,909 --> 00:07:08,509
uber suffered from this so we refer to

122
00:07:05,149 --> 00:07:13,669
their patented program this is not a

123
00:07:08,509 --> 00:07:15,889
forum uber they are also the victim we

124
00:07:13,669 --> 00:07:19,430
also report this to the palatal piece

125
00:07:15,889 --> 00:07:24,080
third but we got a following reply they

126
00:07:19,430 --> 00:07:26,749
do not see be items fight internally so

127
00:07:24,080 --> 00:07:34,609
that's the reason why there is no

128
00:07:26,749 --> 00:07:38,930
official advisory ok this is fine this

129
00:07:34,610 --> 00:07:41,050
no CVE so there is no vulnerability

130
00:07:38,930 --> 00:07:42,289
[Music]

131
00:07:41,050 --> 00:07:45,740
anyway

132
00:07:42,289 --> 00:07:51,080
hello toasty OS dynasty v4 tab just why

133
00:07:45,740 --> 00:07:54,379
after we published the story once we

134
00:07:51,080 --> 00:07:57,649
decide to research into SSL VPN the next

135
00:07:54,379 --> 00:08:00,159
question is how to choose the targets we

136
00:07:57,649 --> 00:08:03,589
did a little survey and leading SSL VPN

137
00:08:00,159 --> 00:08:06,139
as you can see even in the high level

138
00:08:03,589 --> 00:08:09,379
even in the highest ability level CVE

139
00:08:06,139 --> 00:08:12,060
the pearl secure and 14a are the most

140
00:08:09,379 --> 00:08:15,129
secure one

141
00:08:12,060 --> 00:08:18,069
we want to change the mission impossible

142
00:08:15,129 --> 00:08:22,509
so we put our priority and pearl secure

143
00:08:18,069 --> 00:08:25,719
and 14 net moral pearls q is the most

144
00:08:22,509 --> 00:08:29,770
famous VPN solution in the world and has

145
00:08:25,719 --> 00:08:32,679
the least high level CBE is trusted by

146
00:08:29,770 --> 00:08:36,130
large corporations service provider and

147
00:08:32,679 --> 00:08:38,228
government departments for Dina is more

148
00:08:36,130 --> 00:08:42,240
used by end users and medium-sized

149
00:08:38,229 --> 00:08:45,670
enterprise is coming in Asia and Europe

150
00:08:42,240 --> 00:08:48,399
most vendors have a little high label

151
00:08:45,670 --> 00:08:51,219
CVS so our mission is to find the remote

152
00:08:48,399 --> 00:08:55,540
so so our mission is to find a POS

153
00:08:51,220 --> 00:09:00,220
remote code execution and then so last

154
00:08:55,540 --> 00:09:04,000
our hacking to kickstart news research

155
00:09:00,220 --> 00:09:07,300
is always not easy SSL VPN is a breadbox

156
00:09:04,000 --> 00:09:09,310
and closing sauce appliance the user it

157
00:09:07,300 --> 00:09:11,949
built their own architecture stacks from

158
00:09:09,310 --> 00:09:14,739
scratch and don't provide a shell to

159
00:09:11,949 --> 00:09:17,410
type in to so the job rack is the

160
00:09:14,740 --> 00:09:22,329
essential step for researchers to turn

161
00:09:17,410 --> 00:09:25,390
the black box into a bread box as you

162
00:09:22,329 --> 00:09:29,050
can see most of SSL VPN only provide a

163
00:09:25,390 --> 00:09:33,880
restricted show so let's talk about how

164
00:09:29,050 --> 00:09:36,579
to jailbreak then we are not hat world

165
00:09:33,880 --> 00:09:39,670
guys so we start searching from the

166
00:09:36,579 --> 00:09:42,010
virtual appliance all the virtual

167
00:09:39,670 --> 00:09:45,390
parents can be classified into the

168
00:09:42,010 --> 00:09:48,730
typical one and they encrypt hit one

169
00:09:45,390 --> 00:09:51,519
it's trivial for typical ones so we

170
00:09:48,730 --> 00:09:54,160
don't have a lot of here you can just

171
00:09:51,519 --> 00:09:56,649
enter the single user mode or among the

172
00:09:54,160 --> 00:10:02,019
virtual disk on your box to modify the

173
00:09:56,649 --> 00:10:05,769
files instant to get a show but what if

174
00:10:02,019 --> 00:10:08,190
the disk has been encrypted we saw the

175
00:10:05,769 --> 00:10:11,980
booting process we cannot see anything

176
00:10:08,190 --> 00:10:16,269
so today we will show you a tree to

177
00:10:11,980 --> 00:10:18,880
bypass the encryption here is the

178
00:10:16,269 --> 00:10:21,519
leanest booting process the common way

179
00:10:18,880 --> 00:10:23,860
in past to break encryption is to

180
00:10:21,519 --> 00:10:24,670
analyze and reverse the villainous

181
00:10:23,860 --> 00:10:28,810
kernel

182
00:10:24,670 --> 00:10:31,990
together encryption key however we focus

183
00:10:28,810 --> 00:10:34,989
on another stage she will keep example

184
00:10:31,990 --> 00:10:39,340
to show how memory forensics take us to

185
00:10:34,990 --> 00:10:42,850
the wing as we know the booting process

186
00:10:39,340 --> 00:10:45,460
is start from the BIOS boot loader and

187
00:10:42,850 --> 00:10:49,450
the kernel to drop the first process to

188
00:10:45,460 --> 00:10:51,640
initialize the operating system improve

189
00:10:49,450 --> 00:10:55,000
secure the initial process show you a

190
00:10:51,640 --> 00:10:59,110
prompt press enter to view or update

191
00:10:55,000 --> 00:11:01,900
your appearance settings and once we

192
00:10:59,110 --> 00:11:04,540
press the enter the initial process

193
00:11:01,900 --> 00:11:08,680
spawned another process to allow you

194
00:11:04,540 --> 00:11:13,540
modify and view the settings we suspend

195
00:11:08,680 --> 00:11:15,400
a virtual machine at this time and scan

196
00:11:13,540 --> 00:11:19,420
the entire memory to do the memory

197
00:11:15,400 --> 00:11:22,180
forensics and host OS so the memory

198
00:11:19,420 --> 00:11:24,010
forensics we observed that the spawn

199
00:11:22,180 --> 00:11:28,660
process is the Perl script

200
00:11:24,010 --> 00:11:31,510
the name is PS config poppy arrow and it

201
00:11:28,660 --> 00:11:34,810
says it can be the weak point of holder

202
00:11:31,510 --> 00:11:38,950
booting process so it's time to show the

203
00:11:34,810 --> 00:11:43,449
magic we will just patch a few bytes to

204
00:11:38,950 --> 00:11:45,730
pop outer shell we patch the memory and

205
00:11:43,450 --> 00:11:49,990
replace the PS configure depierre

206
00:11:45,730 --> 00:11:52,450
to ping Sh once the modification is done

207
00:11:49,990 --> 00:11:58,000
the only thing we need is just press

208
00:11:52,450 --> 00:12:00,460
that enter and we gotta show now we have

209
00:11:58,000 --> 00:12:07,510
the flow control of the system and can

210
00:12:00,460 --> 00:12:10,060
do further debugging and analyzing so

211
00:12:07,510 --> 00:12:13,960
now we can start hacking SSO Vivien's

212
00:12:10,060 --> 00:12:15,069
but with the bug there are many demons

213
00:12:13,960 --> 00:12:17,710
running on the server

214
00:12:15,070 --> 00:12:20,350
they are usually complicated and hard to

215
00:12:17,710 --> 00:12:24,460
analyze digging at the curb test is

216
00:12:20,350 --> 00:12:28,660
important for us so we proposed our

217
00:12:24,460 --> 00:12:30,820
attack vectors specific for sslvpn we

218
00:12:28,660 --> 00:12:34,540
will talk about a special feature called

219
00:12:30,820 --> 00:12:37,780
webby pn it is powerful but also

220
00:12:34,540 --> 00:12:38,360
vulnerable on hands regardless of bounty

221
00:12:37,780 --> 00:12:42,100
from this

222
00:12:38,360 --> 00:12:44,750
feature it just like our slot machine

223
00:12:42,100 --> 00:12:46,279
the next one is the native script

224
00:12:44,750 --> 00:12:48,890
language extensions

225
00:12:46,279 --> 00:12:52,130
SSO Vivien's and how they can be

226
00:12:48,890 --> 00:12:58,040
dangerous and we also introduced some

227
00:12:52,130 --> 00:13:01,189
modular architecture problems web VPN is

228
00:12:58,040 --> 00:13:04,219
a convenient proxy feature it's protocol

229
00:13:01,190 --> 00:13:07,040
and kindness it practices all kinds of

230
00:13:04,220 --> 00:13:10,550
traffic through the web browser its

231
00:13:07,040 --> 00:13:14,000
approach various protocols like HTTP FTP

232
00:13:10,550 --> 00:13:17,269
and RDP it also handles many web

233
00:13:14,000 --> 00:13:20,360
resources searches WebSocket JavaScript

234
00:13:17,269 --> 00:13:22,790
and fetch we don't need to install any

235
00:13:20,360 --> 00:13:25,240
software only click on the browser and

236
00:13:22,790 --> 00:13:26,719
we can connect to all the services

237
00:13:25,240 --> 00:13:29,329
sounds powerful

238
00:13:26,720 --> 00:13:33,110
right apparently it's not easy to

239
00:13:29,329 --> 00:13:35,140
implement this feature some vendors

240
00:13:33,110 --> 00:13:38,000
choose to implement bandim stealth

241
00:13:35,140 --> 00:13:41,779
however protocols and web resources

242
00:13:38,000 --> 00:13:45,740
handling are prone to memory parks think

243
00:13:41,779 --> 00:13:48,800
about SSL VPN processing SMP or fast you

244
00:13:45,740 --> 00:13:51,800
know how hard it could be also this

245
00:13:48,800 --> 00:13:54,050
requests high security awareness for

246
00:13:51,800 --> 00:13:56,829
example we found some debug functions

247
00:13:54,050 --> 00:14:02,209
sensitive data without encryption and

248
00:13:56,829 --> 00:14:04,310
information exposed carelessly some

249
00:14:02,209 --> 00:14:07,010
grenda's decided not to revenge the will

250
00:14:04,310 --> 00:14:11,180
they modify from an open source project

251
00:14:07,010 --> 00:14:14,449
directly but they copy the code and also

252
00:14:11,180 --> 00:14:19,459
copy the box this kind of software are

253
00:14:14,449 --> 00:14:21,349
hard to maintain update or patch or some

254
00:14:19,459 --> 00:14:24,170
winners choose to call it's sitting

255
00:14:21,350 --> 00:14:27,949
libraries but the winners are often

256
00:14:24,170 --> 00:14:31,160
neglect to obtain these libraries we

257
00:14:27,949 --> 00:14:32,920
found if curl and lip xml from over ten

258
00:14:31,160 --> 00:14:35,269
years ago

259
00:14:32,920 --> 00:14:37,819
implementing web vision is really not

260
00:14:35,269 --> 00:14:43,339
easy this is the most serious attack

261
00:14:37,820 --> 00:14:46,610
vector we found under SSL VPN during our

262
00:14:43,339 --> 00:14:48,800
research we found that most SSL Vivian's

263
00:14:46,610 --> 00:14:51,690
have their own native script language

264
00:14:48,800 --> 00:14:55,760
extensions like PHP exchange

265
00:14:51,690 --> 00:14:59,000
see or pretension returning Cephas cast

266
00:14:55,760 --> 00:15:02,130
menace like to use this extension to do

267
00:14:59,000 --> 00:15:05,430
encoding/decoding in other operations to

268
00:15:02,130 --> 00:15:08,160
improve efficiency then which may be

269
00:15:05,430 --> 00:15:09,329
vulnerable and it's prone to type

270
00:15:08,160 --> 00:15:13,949
confusion between

271
00:15:09,330 --> 00:15:15,810
different languages as we know sting

272
00:15:13,950 --> 00:15:18,960
operation is always difficult for see

273
00:15:15,810 --> 00:15:21,140
like parasites calculation dangerous

274
00:15:18,960 --> 00:15:25,200
functions such as drink coffee or

275
00:15:21,140 --> 00:15:27,000
misunderstood functions for example do

276
00:15:25,200 --> 00:15:30,780
you really know how the return value of

277
00:15:27,000 --> 00:15:34,260
s entering F should be can exceed the

278
00:15:30,780 --> 00:15:37,110
parasite actually it's possible

279
00:15:34,260 --> 00:15:41,730
so calculation like this will cause an

280
00:15:37,110 --> 00:15:43,680
integer overflow the type of these

281
00:15:41,730 --> 00:15:46,440
extensions are also confusing

282
00:15:43,680 --> 00:15:48,859
although the things that sin but to

283
00:15:46,440 --> 00:15:52,100
really really know what type it is

284
00:15:48,860 --> 00:15:55,290
do you know if you are using in safely

285
00:15:52,100 --> 00:15:58,800
who knows and this may cause serious

286
00:15:55,290 --> 00:16:00,510
problems the last one is the

287
00:15:58,800 --> 00:16:02,670
multi-layered architectural problems

288
00:16:00,510 --> 00:16:04,890
when there are different standards for

289
00:16:02,670 --> 00:16:07,319
processing the same thing so

290
00:16:04,890 --> 00:16:11,250
inconsistency between them will lead to

291
00:16:07,320 --> 00:16:14,310
problems such as attack surface on the

292
00:16:11,250 --> 00:16:16,860
web reverse proxy in Java web back end

293
00:16:14,310 --> 00:16:22,140
the talk from orange in back had last

294
00:16:16,860 --> 00:16:25,140
year and here we give a null case this

295
00:16:22,140 --> 00:16:29,100
is also an access control bypass is on

296
00:16:25,140 --> 00:16:31,890
see web server in a restful back-end the

297
00:16:29,100 --> 00:16:34,800
rebbe expression thoughts are matches

298
00:16:31,890 --> 00:16:37,589
too much so we can leverage list to

299
00:16:34,800 --> 00:16:43,290
match the thoughts that / to assess the

300
00:16:37,589 --> 00:16:45,570
privileged pages ok so here is the

301
00:16:43,290 --> 00:16:48,839
special attack vectors we found on SSL

302
00:16:45,570 --> 00:16:52,140
Vivian's following we are going to talk

303
00:16:48,839 --> 00:16:54,510
about two case studies we will show how

304
00:16:52,140 --> 00:17:02,520
we get Rios remote code execution and

305
00:16:54,510 --> 00:17:04,920
photogate and pro secure here so

306
00:17:02,520 --> 00:17:05,790
disclaimer all the CVS mentioned below

307
00:17:04,920 --> 00:17:08,610
having

308
00:17:05,790 --> 00:17:11,129
reported and patched by 40 net to secure

309
00:17:08,609 --> 00:17:12,060
and Twitter so please go update your

310
00:17:11,130 --> 00:17:17,070
sslvpn

311
00:17:12,060 --> 00:17:20,429
as soon as possible the case one is

312
00:17:17,069 --> 00:17:23,970
fruit gate we first jailbreak the

313
00:17:20,430 --> 00:17:26,100
predicate and look into the batteries we

314
00:17:23,970 --> 00:17:28,680
try to list the boundaries in stash ping

315
00:17:26,099 --> 00:17:31,260
and file there are all symbolic links

316
00:17:28,680 --> 00:17:36,210
pointing to stash ping stashing need

317
00:17:31,260 --> 00:17:37,760
just like this snapshot this forget

318
00:17:36,210 --> 00:17:40,760
campouts all the programs and

319
00:17:37,760 --> 00:17:43,560
configurations into one single binary

320
00:17:40,760 --> 00:17:46,710
this makes the any program really huge

321
00:17:43,560 --> 00:17:50,730
and annoying the itv file of init is up

322
00:17:46,710 --> 00:17:54,480
to 500 megabytes with 85,000 functions

323
00:17:50,730 --> 00:17:56,850
and they are all stripped no single it

324
00:17:54,480 --> 00:17:59,580
contains plenty of function tables to

325
00:17:56,850 --> 00:18:03,419
manage each programs including the web

326
00:17:59,580 --> 00:18:06,570
daemon thorough investigation we found a

327
00:18:03,420 --> 00:18:11,010
web service is modified from a patch but

328
00:18:06,570 --> 00:18:14,399
it's a patch from 2002 so the web server

329
00:18:11,010 --> 00:18:20,129
running on your SSL VPN is actually as

330
00:18:14,400 --> 00:18:23,070
old as your grandmother compared to the

331
00:18:20,130 --> 00:18:25,440
admin page the user logging interface is

332
00:18:23,070 --> 00:18:28,409
the only one that's definitely exposed

333
00:18:25,440 --> 00:18:31,290
to the Internet it looks like this a

334
00:18:28,410 --> 00:18:34,350
single login page no other patterns or

335
00:18:31,290 --> 00:18:39,210
functions so we're gonna export to list

336
00:18:34,350 --> 00:18:42,060
interface without authentication we will

337
00:18:39,210 --> 00:18:44,910
talk about 30 bucks today first is the

338
00:18:42,060 --> 00:18:47,639
promo code execution chin we combined

339
00:18:44,910 --> 00:18:51,210
two bucks of prios arbitrary file

340
00:18:47,640 --> 00:18:54,630
reading to login and Apostleship or flow

341
00:18:51,210 --> 00:18:57,030
together show we also introduced an

342
00:18:54,630 --> 00:18:59,460
interesting bug the magic back door

343
00:18:57,030 --> 00:19:04,440
which can modify any user's password

344
00:18:59,460 --> 00:19:07,170
with a magic key now start with the fail

345
00:19:04,440 --> 00:19:09,740
reading part it was a function used to

346
00:19:07,170 --> 00:19:12,840
show corresponding language for users a

347
00:19:09,740 --> 00:19:16,200
concatenate strings directly without a

348
00:19:12,840 --> 00:19:18,959
dot a slash filter but adjacent

349
00:19:16,200 --> 00:19:21,960
extension appended automatically

350
00:19:18,960 --> 00:19:25,830
so it stings like we can only read JSON

351
00:19:21,960 --> 00:19:31,770
files think about it can we remove that

352
00:19:25,830 --> 00:19:34,439
Jason and read any file we want their

353
00:19:31,770 --> 00:19:37,290
insights yes we can utilize the feature

354
00:19:34,440 --> 00:19:41,070
of SM printf according to the main page

355
00:19:37,290 --> 00:19:43,020
it writes at most size minus one the

356
00:19:41,070 --> 00:19:45,230
promise size is fixed here so we only

357
00:19:43,020 --> 00:19:47,389
need to make it exceed the power size

358
00:19:45,230 --> 00:19:51,060
like this

359
00:19:47,390 --> 00:19:55,040
we fear it off with slashes solar path

360
00:19:51,060 --> 00:19:57,960
after assembling F become like this

361
00:19:55,040 --> 00:20:00,510
the appendage Jason exceeds the barber

362
00:19:57,960 --> 00:20:05,570
size and it's stripped pallet something

363
00:20:00,510 --> 00:20:05,570
F then we can read however we want

364
00:20:05,630 --> 00:20:11,040
after getting after Rafael reading we

365
00:20:08,820 --> 00:20:14,460
found something interesting we call it

366
00:20:11,040 --> 00:20:16,980
an SSL VPN mystery infusing many

367
00:20:14,460 --> 00:20:20,520
products not only fruit gates but post

368
00:20:16,980 --> 00:20:23,460
secure or other vendors the mystery is

369
00:20:20,520 --> 00:20:27,510
they hold an excessively detailed

370
00:20:23,460 --> 00:20:30,930
session file on the SSL VPN the first

371
00:20:27,510 --> 00:20:35,040
called SSL VPN web session has the

372
00:20:30,930 --> 00:20:40,080
content session token' of course I feel

373
00:20:35,040 --> 00:20:44,940
just sure user name indeed transact

374
00:20:40,080 --> 00:20:47,639
password are you kidding you should

375
00:20:44,940 --> 00:20:49,500
never store anything has password we

376
00:20:47,640 --> 00:20:52,820
really wonder how it's become popular

377
00:20:49,500 --> 00:20:59,340
let me guess maybe they learn it from

378
00:20:52,820 --> 00:21:03,659
Google or Facebook or Twitter who knows

379
00:20:59,340 --> 00:21:05,970
just kidding anyway these plaintext

380
00:21:03,660 --> 00:21:08,490
passwords are really convenient we don't

381
00:21:05,970 --> 00:21:12,210
need to crack password and we can login

382
00:21:08,490 --> 00:21:15,090
easily today we are going to utilize the

383
00:21:12,210 --> 00:21:18,680
web ppm feature as you can see it

384
00:21:15,090 --> 00:21:22,139
supports many protocols not China HTTP

385
00:21:18,680 --> 00:21:24,210
we only need to type URL and we can

386
00:21:22,140 --> 00:21:28,800
connect to the website through web

387
00:21:24,210 --> 00:21:32,310
opinion look at the URL we can see that

388
00:21:28,800 --> 00:21:32,790
we're still connecting the SSL VPN so it

389
00:21:32,310 --> 00:21:37,500
procs

390
00:21:32,790 --> 00:21:39,899
is the hallway staff for us and if we

391
00:21:37,500 --> 00:21:43,950
look into the elements we can find the

392
00:21:39,900 --> 00:21:47,790
URL of resources are also from sslvpn it

393
00:21:43,950 --> 00:21:49,830
rewrites all the URLs for us as you can

394
00:21:47,790 --> 00:21:53,899
imagine this imposing heavy string

395
00:21:49,830 --> 00:21:57,360
operation so here is the heap overflow

396
00:21:53,900 --> 00:21:59,730
it occurs in JavaScript parsing and is

397
00:21:57,360 --> 00:22:03,330
singly because lack of dense check while

398
00:21:59,730 --> 00:22:07,250
memory copy the power is only direct

399
00:22:03,330 --> 00:22:10,350
2000 but in question is unlimited

400
00:22:07,250 --> 00:22:13,020
generally we do some hip function to

401
00:22:10,350 --> 00:22:17,070
overthrow a nice target and control a

402
00:22:13,020 --> 00:22:19,560
program counter to code execution but

403
00:22:17,070 --> 00:22:24,120
the situation is difficult in FortiGate

404
00:22:19,560 --> 00:22:26,429
we faced starting destabilizing first of

405
00:22:24,120 --> 00:22:29,550
all the web daemon handles connections

406
00:22:26,430 --> 00:22:31,860
with eople so it's a single third

407
00:22:29,550 --> 00:22:35,909
process in the main process and

408
00:22:31,860 --> 00:22:38,040
libraries use the same heap it means all

409
00:22:35,910 --> 00:22:40,560
the memory allocations of all the

410
00:22:38,040 --> 00:22:43,500
operations in all the connections are

411
00:22:40,560 --> 00:22:46,080
understand heap so hip is really

412
00:22:43,500 --> 00:22:48,450
unstable moreover there are some

413
00:22:46,080 --> 00:22:50,850
operations regularly triggered the

414
00:22:48,450 --> 00:22:54,000
interfere the heap arrangement and it's

415
00:22:50,850 --> 00:22:56,879
uncontrollable therefore we cannot

416
00:22:54,000 --> 00:23:00,090
arrange the heap location carefully that

417
00:22:56,880 --> 00:23:02,580
would just make a mess and there is

418
00:23:00,090 --> 00:23:04,409
something even more ironic a patch

419
00:23:02,580 --> 00:23:07,770
implements an additional memory

420
00:23:04,410 --> 00:23:11,340
management so there is no free until a

421
00:23:07,770 --> 00:23:14,240
connection ends we cannot arrange a heap

422
00:23:11,340 --> 00:23:17,429
in a single connection

423
00:23:14,240 --> 00:23:20,400
the locator also limits our export it's

424
00:23:17,430 --> 00:23:23,880
called je may log it's centralized more

425
00:23:20,400 --> 00:23:26,160
objects it calls a block of located

426
00:23:23,880 --> 00:23:28,880
memory or region and then maintain these

427
00:23:26,160 --> 00:23:31,470
regions around with a bitmap

428
00:23:28,880 --> 00:23:33,830
this effectively reduces the

429
00:23:31,470 --> 00:23:36,870
interference between small and large

430
00:23:33,830 --> 00:23:40,320
objects it also limits our target

431
00:23:36,870 --> 00:23:45,689
options it's hard to kill small objects

432
00:23:40,320 --> 00:23:46,350
nearby our buffer so we're stuck a lot

433
00:23:45,690 --> 00:23:48,990
on

434
00:23:46,350 --> 00:23:53,129
and therefore we started too fast the

435
00:23:48,990 --> 00:23:57,059
server and it crashed and we almost

436
00:23:53,130 --> 00:24:02,519
control a program counter and yeah this

437
00:23:57,059 --> 00:24:06,259
is why we love fuzzing we crushed a

438
00:24:02,519 --> 00:24:08,880
function table pointer in SSL structure

439
00:24:06,259 --> 00:24:11,100
this structural stores information of

440
00:24:08,880 --> 00:24:13,409
each connection is used for connection

441
00:24:11,100 --> 00:24:16,189
handling and it's an ideal target for

442
00:24:13,409 --> 00:24:19,110
our hip exploit

443
00:24:16,190 --> 00:24:21,539
first every new connection allocates an

444
00:24:19,110 --> 00:24:24,990
ssl structure so we can trigger it

445
00:24:21,539 --> 00:24:27,480
easily and its size is close to our

446
00:24:24,990 --> 00:24:29,669
JavaScript buffer and therefore it can

447
00:24:27,480 --> 00:24:33,720
be placed nearby our buffer with a

448
00:24:29,669 --> 00:24:37,320
regular offset the most important is it

449
00:24:33,720 --> 00:24:40,289
has some useful structural members it

450
00:24:37,320 --> 00:24:42,960
contains a function table pointer code

451
00:24:40,289 --> 00:24:46,408
method and this is how we trigger to the

452
00:24:42,960 --> 00:24:48,870
crash but we found one even better it's

453
00:24:46,409 --> 00:24:52,169
a function pointer called handshake

454
00:24:48,870 --> 00:24:54,149
function with list the exploit can be

455
00:24:52,169 --> 00:24:56,700
much easier we don't need a whole

456
00:24:54,149 --> 00:25:01,049
function table anymore we only need a

457
00:24:56,700 --> 00:25:03,570
functional chest all the connections are

458
00:25:01,049 --> 00:25:06,120
on the stem heap so we can miss up

459
00:25:03,570 --> 00:25:08,850
connections and overflow the ssl

460
00:25:06,120 --> 00:25:11,969
structure so we send lots of normal

461
00:25:08,850 --> 00:25:16,860
requests in attack the server with an

462
00:25:11,970 --> 00:25:19,019
overflow request in the meantime if we

463
00:25:16,860 --> 00:25:22,199
look into the heap there may be several

464
00:25:19,019 --> 00:25:24,299
SSO structures on heap for example here

465
00:25:22,200 --> 00:25:28,350
are three SSL structures for three

466
00:25:24,299 --> 00:25:32,970
connections in the SSO structure is like

467
00:25:28,350 --> 00:25:35,370
this some basic information and function

468
00:25:32,970 --> 00:25:39,320
table in the function pointer is now

469
00:25:35,370 --> 00:25:41,939
pointing to an SSL function SSL stepped

470
00:25:39,320 --> 00:25:45,330
now if we trigger the chart we're

471
00:25:41,940 --> 00:25:50,480
passing and the George Gipp offer is

472
00:25:45,330 --> 00:25:53,418
allocated ahead of this SSO structures

473
00:25:50,480 --> 00:25:56,039
now we can trigger overflow and

474
00:25:53,419 --> 00:25:59,570
overwrite the excessive structural

475
00:25:56,039 --> 00:25:59,570
members like this

476
00:26:00,700 --> 00:26:06,519
so now we fill up the SSO structure with

477
00:26:04,009 --> 00:26:11,149
capital ace and make the program crash

478
00:26:06,519 --> 00:26:13,489
what we need to do next is clear we only

479
00:26:11,149 --> 00:26:17,268
need to forge a correct SSL structure

480
00:26:13,489 --> 00:26:20,299
with a fake function pointer like the

481
00:26:17,269 --> 00:26:23,330
address of season so when the victim

482
00:26:20,299 --> 00:26:27,279
connection is trying to do handshake the

483
00:26:23,330 --> 00:26:30,529
program executes whatever we want

484
00:26:27,279 --> 00:26:32,749
anyway the hip is unstable so we need to

485
00:26:30,529 --> 00:26:34,849
stand fuzzy connections to meet the

486
00:26:32,749 --> 00:26:37,369
condition the server may Christ

487
00:26:34,849 --> 00:26:38,950
sometimes but it's fine freaka has a

488
00:26:37,369 --> 00:26:42,080
reliable watchdog

489
00:26:38,950 --> 00:26:45,549
we just need several attempts taking

490
00:26:42,080 --> 00:26:48,408
about one to two minutes and get a show

491
00:26:45,549 --> 00:26:51,950
so this is the whole details of how we

492
00:26:48,409 --> 00:26:54,200
achieve remote code execution maybe some

493
00:26:51,950 --> 00:26:57,200
of you are not binary guys so you may

494
00:26:54,200 --> 00:27:00,979
wonder if is there any other way to get

495
00:26:57,200 --> 00:27:05,330
into a server so when I find another

496
00:27:00,979 --> 00:27:08,599
tour to make your life easier we found a

497
00:27:05,330 --> 00:27:10,668
magic factor in the login page this

498
00:27:08,599 --> 00:27:14,479
function was originally used to update

499
00:27:10,669 --> 00:27:17,330
out stated password however the filter

500
00:27:14,479 --> 00:27:20,690
authenticate so we can Stingley use this

501
00:27:17,330 --> 00:27:25,609
secret key which is called magic to

502
00:27:20,690 --> 00:27:27,589
reset any user's password now we're

503
00:27:25,609 --> 00:27:36,468
going to demonstrate how we pop a root

504
00:27:27,589 --> 00:27:39,678
shell from the only exposed HTTP port we

505
00:27:36,469 --> 00:27:43,909
put our PHP exploit onion HEV server

506
00:27:39,679 --> 00:27:47,239
this is our export in order to control a

507
00:27:43,909 --> 00:27:50,479
parameter of season refers to a stack

508
00:27:47,239 --> 00:27:58,700
pivot and make our buffer become the

509
00:27:50,479 --> 00:28:02,029
stack after that we do an option to call

510
00:27:58,700 --> 00:28:06,429
a system and here is the reverse yokomen

511
00:28:02,029 --> 00:28:10,009
we use Python to build a reverse show

512
00:28:06,429 --> 00:28:14,139
and we concatenate the strings to

513
00:28:10,009 --> 00:28:14,139
overflow the SSO structure

514
00:28:16,480 --> 00:28:24,049
now we can start hacking in the first

515
00:28:20,120 --> 00:28:29,479
panel we open a port to receive a

516
00:28:24,049 --> 00:28:31,549
receipt reverse jail and here we start a

517
00:28:29,480 --> 00:28:44,059
fucking third to build multiple

518
00:28:31,549 --> 00:28:46,668
connections then we attack the server we

519
00:28:44,059 --> 00:28:53,240
first tried to leak username in the

520
00:28:46,669 --> 00:29:00,700
Pentax test word from the web session as

521
00:28:53,240 --> 00:29:05,090
you can see we found in username me in

522
00:29:00,700 --> 00:29:07,519
password this is password for me we can

523
00:29:05,090 --> 00:29:10,970
use this account to log in and make the

524
00:29:07,519 --> 00:29:14,590
SSL VPN proxy or PHP export we only need

525
00:29:10,970 --> 00:29:14,590
to wait for few seconds

526
00:29:22,140 --> 00:29:39,790
okay here we got a root shell thank you

527
00:29:24,970 --> 00:29:42,400
very much the next case we talk about is

528
00:29:39,790 --> 00:29:44,980
pearl secure first Q is the market

529
00:29:42,400 --> 00:29:48,870
leader of SSL VPN and was for a

530
00:29:44,980 --> 00:29:51,760
divestiture of Juniper Networks the app

531
00:29:48,870 --> 00:29:54,550
they are parallel and built all the

532
00:29:51,760 --> 00:29:57,010
architecture stack from scratch the

533
00:29:54,550 --> 00:30:00,970
architecture is old but stable and

534
00:29:57,010 --> 00:30:03,430
secure and it's more to mention her

535
00:30:00,970 --> 00:30:06,010
secure hooks all the process by LD

536
00:30:03,430 --> 00:30:08,980
preload due to to the monitor and

537
00:30:06,010 --> 00:30:11,220
security consideration we will discuss

538
00:30:08,980 --> 00:30:11,220
this later

539
00:30:11,430 --> 00:30:16,840
here is the vulnerabilities we find

540
00:30:14,250 --> 00:30:19,630
another thing we will introduce the

541
00:30:16,840 --> 00:30:22,179
preauth option file reading and the post

542
00:30:19,630 --> 00:30:24,610
article may injection we change these

543
00:30:22,180 --> 00:30:29,620
two bucks into the preauth remote code

544
00:30:24,610 --> 00:30:32,709
execution the first bug is a previous

545
00:30:29,620 --> 00:30:36,820
file reading per secure introduced a new

546
00:30:32,710 --> 00:30:41,290
feature called html5 SS since version at

547
00:30:36,820 --> 00:30:45,460
point - it can SS the telnet SSH and

548
00:30:41,290 --> 00:30:47,920
remote desk up by browsers in order to

549
00:30:45,460 --> 00:30:50,620
adapt the new feature first clear click

550
00:30:47,920 --> 00:30:54,250
add a new if conviction to handle all

551
00:30:50,620 --> 00:30:56,860
static resources sends to the new

552
00:30:54,250 --> 00:31:01,480
feature the original strict validation

553
00:30:56,860 --> 00:31:05,229
has been bypassed so another effect by

554
00:31:01,480 --> 00:31:08,680
this o unpatched version except the end

555
00:31:05,230 --> 00:31:11,580
of lite version are affected here is the

556
00:31:08,680 --> 00:31:14,590
payload for you to check your SSL VPN

557
00:31:11,580 --> 00:31:17,470
when there is a special test in in the

558
00:31:14,590 --> 00:31:23,169
end of the URL the pest validation

559
00:31:17,470 --> 00:31:26,380
becomes loose and how can we get from

560
00:31:23,170 --> 00:31:28,660
this we can get numbers useful

561
00:31:26,380 --> 00:31:31,960
information such as the server private

562
00:31:28,660 --> 00:31:34,179
key to decrypt the SSL connection we can

563
00:31:31,960 --> 00:31:35,680
also get an important configuration such

564
00:31:34,179 --> 00:31:40,330
as the radius

565
00:31:35,680 --> 00:31:43,000
yep password and all users password hash

566
00:31:40,330 --> 00:31:46,389
and sensitive cookies which are cached

567
00:31:43,000 --> 00:31:50,470
in the web BPM like Google job apps and

568
00:31:46,390 --> 00:31:55,480
iCloud the last and the most important

569
00:31:50,470 --> 00:32:01,690
is the cache Trant ax password yes 20 X

570
00:31:55,480 --> 00:32:03,340
again so now we get a credentials so we

571
00:32:01,690 --> 00:32:07,300
are able to access the cooperation

572
00:32:03,340 --> 00:32:09,699
network easily however our goal is to

573
00:32:07,300 --> 00:32:12,820
get code execution for persistent and

574
00:32:09,700 --> 00:32:14,890
further actions so here we change a

575
00:32:12,820 --> 00:32:17,830
command injection in management in the

576
00:32:14,890 --> 00:32:21,580
face together from this code fragment

577
00:32:17,830 --> 00:32:25,000
it's very obvious and straightforward if

578
00:32:21,580 --> 00:32:28,530
we can control options we can inject

579
00:32:25,000 --> 00:32:32,560
actually comment to this perl function

580
00:32:28,530 --> 00:32:35,070
and of course we can we can control the

581
00:32:32,560 --> 00:32:37,500
options from the troubleshooting patch

582
00:32:35,070 --> 00:32:42,520
so it's that simple

583
00:32:37,500 --> 00:32:45,310
no I don't think so in order to in order

584
00:32:42,520 --> 00:32:47,650
to avoid potential other abilities first

585
00:32:45,310 --> 00:32:51,389
cura pride a lot of hardening on their

586
00:32:47,650 --> 00:32:54,250
products such such as the system

587
00:32:51,390 --> 00:32:57,640
integrated feature and the read-only

588
00:32:54,250 --> 00:33:00,720
file system to protect the to protect

589
00:32:57,640 --> 00:33:03,910
from vectors in chrome tab or web loot

590
00:33:00,720 --> 00:33:07,090
the most effective hardening is the DES

591
00:33:03,910 --> 00:33:11,220
safe module is like the safeguard to

592
00:33:07,090 --> 00:33:14,379
protect her from dangerous operations

593
00:33:11,220 --> 00:33:18,040
the PSF is a perl module which is

594
00:33:14,380 --> 00:33:20,740
written in c++ the major increment is

595
00:33:18,040 --> 00:33:22,870
uncomment parser and cook several

596
00:33:20,740 --> 00:33:27,640
dangerous functions such as the since

597
00:33:22,870 --> 00:33:29,729
turn open and back speak it also did the

598
00:33:27,640 --> 00:33:32,650
low number of bad characters and

599
00:33:29,730 --> 00:33:33,570
increment Elena's IO redirections in

600
00:33:32,650 --> 00:33:37,150
Perl

601
00:33:33,570 --> 00:33:42,760
so tilted hardening we cannot perform

602
00:33:37,150 --> 00:33:45,370
any command injection we try several

603
00:33:42,760 --> 00:33:47,320
ways to bypass the hardening of course

604
00:33:45,370 --> 00:33:49,399
the first cut out of my mind is the

605
00:33:47,320 --> 00:33:52,649
argument injection

606
00:33:49,400 --> 00:33:55,740
however the TCP dump in Paris here is

607
00:33:52,650 --> 00:33:58,290
too old so it felt because it didn't

608
00:33:55,740 --> 00:34:03,420
support several juicy features such as

609
00:33:58,290 --> 00:34:05,879
the post no Ted command / exam in this

610
00:34:03,420 --> 00:34:09,000
instance we find pearl skewers though

611
00:34:05,880 --> 00:34:12,300
the temporal cash in your directory we

612
00:34:09,000 --> 00:34:14,639
try to write into this directory but we

613
00:34:12,300 --> 00:34:18,540
can use standard out because it's

614
00:34:14,639 --> 00:34:21,299
already directed to no device or we can

615
00:34:18,540 --> 00:34:24,000
do is only abusing the set file argument

616
00:34:21,300 --> 00:34:27,180
but it says there is no way to generate

617
00:34:24,000 --> 00:34:32,489
a polyglot file in both Perl and peak ad

618
00:34:27,179 --> 00:34:35,819
format so it's time to dig deeper we

619
00:34:32,489 --> 00:34:38,909
type into the PSF implementation to see

620
00:34:35,820 --> 00:34:41,910
is there anything we can leverage we

621
00:34:38,909 --> 00:34:44,460
further flow in the comment answer when

622
00:34:41,909 --> 00:34:46,620
base and incomplete io redirection

623
00:34:44,460 --> 00:34:51,060
the rest of the IO part will be

624
00:34:46,620 --> 00:34:53,460
truncated however also we can recount

625
00:34:51,060 --> 00:34:57,890
schroeder standard out we still can't

626
00:34:53,460 --> 00:34:57,890
find anywhere to generate a valid Perl

627
00:34:58,070 --> 00:35:05,370
so last thing out of the box

628
00:35:01,070 --> 00:35:07,200
standard out is uncontrollable but to

629
00:35:05,370 --> 00:35:13,080
rewrite the script by just standard

630
00:35:07,200 --> 00:35:15,629
error when you fold the TCP dump to open

631
00:35:13,080 --> 00:35:20,670
a non-existent file it will show the

632
00:35:15,630 --> 00:35:23,100
error no such file or directory from the

633
00:35:20,670 --> 00:35:26,730
error is since we can partial control

634
00:35:23,100 --> 00:35:29,790
the message we try to pipe a standard

635
00:35:26,730 --> 00:35:32,060
error into peril but we still get

636
00:35:29,790 --> 00:35:32,060
nothing

637
00:35:33,050 --> 00:35:39,000
however when when we try to use another

638
00:35:36,480 --> 00:35:42,570
file names such as the print of one two

639
00:35:39,000 --> 00:35:45,150
three with a hashtag we try to pipe a

640
00:35:42,570 --> 00:35:46,640
standard error - perl again and the

641
00:35:45,150 --> 00:35:49,740
magic happens

642
00:35:46,640 --> 00:35:53,790
the Perl print out the one you see with

643
00:35:49,740 --> 00:35:56,759
our arrows ok

644
00:35:53,790 --> 00:36:00,090
the param 101 pearls supposed to go to

645
00:35:56,760 --> 00:36:02,010
label so the TC be done with the Colin

646
00:36:00,090 --> 00:36:05,010
because a label in peril

647
00:36:02,010 --> 00:36:08,220
and we use the hashtag to comment the

648
00:36:05,010 --> 00:36:13,260
rest of the part so the standard arrow

649
00:36:08,220 --> 00:36:16,470
becomes the valid period now this is our

650
00:36:13,260 --> 00:36:20,670
final x40 we will explain the pelo one

651
00:36:16,470 --> 00:36:24,270
by one the first is to make the tcpdump

652
00:36:20,670 --> 00:36:26,490
open a non-existent file the file name

653
00:36:24,270 --> 00:36:30,660
will be part of the error message in

654
00:36:26,490 --> 00:36:32,310
standard error and then we'll redirect

655
00:36:30,660 --> 00:36:35,940
the standard error into the cache

656
00:36:32,310 --> 00:36:41,490
directory cheering then the file is set

657
00:36:35,940 --> 00:36:44,550
cookie tepee HTML ttc the last is the

658
00:36:41,490 --> 00:36:46,709
incomplete IO symbol this symbol builds

659
00:36:44,550 --> 00:36:50,400
the common pasture to ignore the rest of

660
00:36:46,710 --> 00:36:52,410
the i/o redirection once our standard

661
00:36:50,400 --> 00:36:56,040
error has been written into the cache

662
00:36:52,410 --> 00:36:58,109
directory we can just fetch the

663
00:36:56,040 --> 00:37:01,140
corresponding patch to ask you to our

664
00:36:58,109 --> 00:37:03,869
convened by chaining these two

665
00:37:01,140 --> 00:37:09,089
vulnerabilities we can get a reliable

666
00:37:03,869 --> 00:37:12,210
pretty remote code execution we have the

667
00:37:09,090 --> 00:37:15,090
report all fighting to post cure piece

668
00:37:12,210 --> 00:37:18,119
third and this is the response from them

669
00:37:15,090 --> 00:37:20,520
they fix all the bugs we sing amongst

670
00:37:18,119 --> 00:37:23,340
the reaction is very quick and

671
00:37:20,520 --> 00:37:25,980
professional it's a great time to work

672
00:37:23,340 --> 00:37:31,380
with Perl secure they are such a really

673
00:37:25,980 --> 00:37:33,660
responsible vendor after first few

674
00:37:31,380 --> 00:37:35,820
release all the patches we kept

675
00:37:33,660 --> 00:37:39,330
monitoring the internet to see the large

676
00:37:35,820 --> 00:37:41,700
operations response time Twitter is one

677
00:37:39,330 --> 00:37:45,020
of them they are known for their bug

678
00:37:41,700 --> 00:37:48,629
bounty program and nice to hackers

679
00:37:45,020 --> 00:37:52,050
however is not good to extroyer one day

680
00:37:48,630 --> 00:37:54,510
right after the patch released so we're

681
00:37:52,050 --> 00:37:57,109
at 30 days for Twitter to upgrade their

682
00:37:54,510 --> 00:37:57,109
SSL VPN

683
00:37:57,950 --> 00:38:06,330
this is the Twitter ssl VPN is just a

684
00:38:01,619 --> 00:38:09,150
simple login page so the reconnaissance

685
00:38:06,330 --> 00:38:12,210
we know the last time Twitter upgrades

686
00:38:09,150 --> 00:38:15,109
in last December so Twitter is likely

687
00:38:12,210 --> 00:38:15,109
vulnerable

688
00:38:15,340 --> 00:38:23,020
we have verified about and got a bunch

689
00:38:18,850 --> 00:38:26,200
of user credentials in print tax however

690
00:38:23,020 --> 00:38:30,700
within Congress some problems while

691
00:38:26,200 --> 00:38:32,140
trying to pop a shell on Twitter yes the

692
00:38:30,700 --> 00:38:37,270
first part is the two factor

693
00:38:32,140 --> 00:38:39,640
authentication do you the two factor

694
00:38:37,270 --> 00:38:42,190
authentication also we can get a

695
00:38:39,640 --> 00:38:45,520
printhead password we still can do

696
00:38:42,190 --> 00:38:50,530
anything so the first thing we need is

697
00:38:45,520 --> 00:38:53,890
to find a way to bypass that we observed

698
00:38:50,530 --> 00:38:56,140
Twitter in a bottle immunization low

699
00:38:53,890 --> 00:38:59,350
means Asia is a feature to enhance the

700
00:38:56,140 --> 00:39:03,879
mobility it allows a station from

701
00:38:59,350 --> 00:39:06,400
multiple IP locations so as we know that

702
00:39:03,880 --> 00:39:08,260
we download the database and fold to the

703
00:39:06,400 --> 00:39:12,790
station to bypass the to effect

704
00:39:08,260 --> 00:39:17,140
authentication and finally we look into

705
00:39:12,790 --> 00:39:20,380
there's instant the next problem is the

706
00:39:17,140 --> 00:39:23,560
SS control in management in the fest as

707
00:39:20,380 --> 00:39:27,450
we mentioned before we have a comma

708
00:39:23,560 --> 00:39:28,630
injection here however for security

709
00:39:27,450 --> 00:39:31,089
consideration

710
00:39:28,630 --> 00:39:35,110
most of the cooperation disabled this

711
00:39:31,090 --> 00:39:40,150
interface on public so we need to cite

712
00:39:35,110 --> 00:39:42,490
another way to access the interface here

713
00:39:40,150 --> 00:39:45,370
we leverage the web a VPN feature again

714
00:39:42,490 --> 00:39:49,959
to connect to itself it just it just

715
00:39:45,370 --> 00:39:53,049
like the SS RF we use the zero to bypass

716
00:39:49,960 --> 00:39:55,440
the SSL ice protection and SS the

717
00:39:53,050 --> 00:40:01,840
management in the fest

718
00:39:55,440 --> 00:40:04,480
finally we got here however the last

719
00:40:01,840 --> 00:40:08,160
problem is that we don't find any

720
00:40:04,480 --> 00:40:11,590
managers printheads password in cache

721
00:40:08,160 --> 00:40:14,140
practically most practically most of the

722
00:40:11,590 --> 00:40:17,740
manager only log into their sinston at

723
00:40:14,140 --> 00:40:20,560
the first time the only thing we have is

724
00:40:17,740 --> 00:40:27,850
the password hash inserted and if I

725
00:40:20,560 --> 00:40:29,080
creep and shut 256 format so we launch a

726
00:40:27,850 --> 00:40:39,160
70 color aw

727
00:40:29,080 --> 00:40:41,740
to crack the hash and see hours later we

728
00:40:39,160 --> 00:40:44,470
create a hash and successfully log in to

729
00:40:41,740 --> 00:40:46,839
their management in the face we are

730
00:40:44,470 --> 00:40:50,589
lucky because the length of the password

731
00:40:46,840 --> 00:40:53,890
is only ten and the first character is

732
00:40:50,590 --> 00:40:58,720
capital capital P it's on a very early

733
00:40:53,890 --> 00:41:00,940
stage of our quake in queue we exploit

734
00:40:58,720 --> 00:41:05,140
our karma injection and try to run the

735
00:41:00,940 --> 00:41:10,270
comment I have config and yes we gotta

736
00:41:05,140 --> 00:41:13,569
show we repel all of our siding to their

737
00:41:10,270 --> 00:41:16,680
bug bounty program and got a highest

738
00:41:13,570 --> 00:41:16,680
bounty from Twitter

739
00:41:24,560 --> 00:41:29,790
also we cannot prove that it since this

740
00:41:27,870 --> 00:41:35,250
is the first remote code execution on

741
00:41:29,790 --> 00:41:38,700
Twitter okay the last is the bonus for

742
00:41:35,250 --> 00:41:41,300
you our company that color provides the

743
00:41:38,700 --> 00:41:44,790
most professional rating service in Asia

744
00:41:41,300 --> 00:41:50,010
so let's talk about how to make the

745
00:41:44,790 --> 00:41:52,710
rating more red in a rating operation

746
00:41:50,010 --> 00:41:57,120
the personal computer is more valuable

747
00:41:52,710 --> 00:41:59,520
so in order to take control of all in

748
00:41:57,120 --> 00:42:02,180
order to take control of all the clients

749
00:41:59,520 --> 00:42:05,070
we need to weaponize the sslvpn

750
00:42:02,180 --> 00:42:08,399
there are several Oscar measures before

751
00:42:05,070 --> 00:42:12,990
such as the waterhole attack and repress

752
00:42:08,400 --> 00:42:17,220
the Vivian is dollar but here we propose

753
00:42:12,990 --> 00:42:20,129
a new vessel is the local squib Logan

754
00:42:17,220 --> 00:42:23,339
scrip is a feature in almost every SSL

755
00:42:20,130 --> 00:42:25,890
VPN it can ask you to corresponding

756
00:42:23,340 --> 00:42:30,840
script to mount the network files in

757
00:42:25,890 --> 00:42:33,270
turn or change the loading table so here

758
00:42:30,840 --> 00:42:41,040
we will show you how we compromise all

759
00:42:33,270 --> 00:42:44,370
the VPN clients this is our

760
00:42:41,040 --> 00:42:47,210
demonstration as you can see thanks for

761
00:42:44,370 --> 00:42:53,420
in need one argument

762
00:42:47,210 --> 00:42:53,420
so we append our target dry after the x4

763
00:42:56,630 --> 00:43:02,940
chill regarder username and hash of

764
00:42:59,580 --> 00:43:05,790
admin also we could not find a Pentax

765
00:43:02,940 --> 00:43:09,860
password we can still change our cookie

766
00:43:05,790 --> 00:43:09,860
to the session ID of admin

767
00:43:24,640 --> 00:43:30,710
okay once once our modification is Tong

768
00:43:28,430 --> 00:43:40,720
we can assess the management in the

769
00:43:30,710 --> 00:43:40,720
first and we had be counted to Adam in

770
00:43:42,220 --> 00:43:53,149
Chile leverage the Fisher under user

771
00:43:45,410 --> 00:43:56,330
laws users and the VP and ha knowing we

772
00:43:53,150 --> 00:43:58,370
find a local script section here you can

773
00:43:56,330 --> 00:44:03,560
see the local scripts at host not only

774
00:43:58,370 --> 00:44:07,900
Windows but also Lina's and Mac OS we

775
00:44:03,560 --> 00:44:07,900
use the calculator as our backdoor

776
00:44:15,460 --> 00:44:29,290
okay once our modification is dong we

777
00:44:18,760 --> 00:44:31,450
change to the laptop of our victim the

778
00:44:29,290 --> 00:44:35,470
victim launched the first cured Asian

779
00:44:31,450 --> 00:44:45,399
and try to connect to the sslvpn with

780
00:44:35,470 --> 00:44:47,230
his username and password once the

781
00:44:45,400 --> 00:44:51,660
connection has been established the

782
00:44:47,230 --> 00:44:51,660
calculator will be pop automatically

783
00:44:58,010 --> 00:45:05,349
[Applause]

784
00:45:01,290 --> 00:45:08,740
okay here we finish all of our slice but

785
00:45:05,349 --> 00:45:12,309
how to meet get such attacks here we get

786
00:45:08,740 --> 00:45:14,740
several recommendations the first is the

787
00:45:12,309 --> 00:45:16,869
client certificate we saw the

788
00:45:14,740 --> 00:45:20,040
certificate the malicious connection

789
00:45:16,869 --> 00:45:23,200
will be chopped during SSL negotiation

790
00:45:20,040 --> 00:45:25,960
the next is to enable multi-factor

791
00:45:23,200 --> 00:45:29,470
authentication it can decrease numbers

792
00:45:25,960 --> 00:45:32,410
attack service and the last remember to

793
00:45:29,470 --> 00:45:34,930
enable the log out it and subscribe the

794
00:45:32,410 --> 00:45:38,799
vendors advisory to keep your system

795
00:45:34,930 --> 00:45:40,899
updated this is the end of our

796
00:45:38,799 --> 00:45:42,910
presentation here is our contact

797
00:45:40,900 --> 00:45:45,940
information we will post the detail

798
00:45:42,910 --> 00:45:48,339
story on Friday so please check that and

799
00:45:45,940 --> 00:45:50,770
let us know if you have any further

800
00:45:48,339 --> 00:45:53,339
questions thank you for being here

801
00:45:50,770 --> 00:45:53,339
thanks

802
00:45:53,690 --> 00:45:57,889
[Applause]

