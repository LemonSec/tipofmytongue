1
00:00:00,000 --> 00:00:06,509
good afternoon this is httpd sync attack

2
00:00:04,410 --> 00:00:11,990
smashing to the cell next door with

3
00:00:06,509 --> 00:00:17,580
james kettle this is the Islander F G

4
00:00:11,990 --> 00:00:20,369
and welcome good afternoon

5
00:00:17,580 --> 00:00:23,490
I welcome to httpd sync attacks smashing

6
00:00:20,369 --> 00:00:26,670
into the cell next door have you ever

7
00:00:23,490 --> 00:00:30,598
seen a system that was so complex it

8
00:00:26,670 --> 00:00:32,309
just had to be vulnerable these days we

9
00:00:30,599 --> 00:00:34,680
belong layer upon layer of abstraction

10
00:00:32,308 --> 00:00:36,800
to have the faintest understanding of

11
00:00:34,680 --> 00:00:40,290
what's really going on with the website

12
00:00:36,800 --> 00:00:43,290
and we tell people things like HTTP is

13
00:00:40,290 --> 00:00:47,010
stateless and you send one request

14
00:00:43,290 --> 00:00:50,219
you get one response but what if both of

15
00:00:47,010 --> 00:00:52,559
those were just kind of wrong in this

16
00:00:50,219 --> 00:00:54,690
session I'll share with you new tools

17
00:00:52,559 --> 00:00:56,760
and techniques to D synchronize complex

18
00:00:54,690 --> 00:00:59,129
systems smash through the barriers

19
00:00:56,760 --> 00:01:03,750
around HTTP requests and make websites

20
00:00:59,129 --> 00:01:05,970
rain exploits on their visitors during

21
00:01:03,750 --> 00:01:09,150
some research last year I came up with a

22
00:01:05,970 --> 00:01:11,729
theory which was if you're trying to

23
00:01:09,150 --> 00:01:13,860
select a topic to research then the best

24
00:01:11,729 --> 00:01:17,070
topic is the one that makes you the most

25
00:01:13,860 --> 00:01:19,350
nervous and this year I thought okay I'm

26
00:01:17,070 --> 00:01:21,839
gonna try this theory out so I asked

27
00:01:19,350 --> 00:01:24,658
myself what topic am i really scared of

28
00:01:21,840 --> 00:01:28,170
and the answer for me personally had to

29
00:01:24,659 --> 00:01:29,640
be HTTP requests smuggling I saw a Def

30
00:01:28,170 --> 00:01:33,360
Con presentation on this a few years

31
00:01:29,640 --> 00:01:36,030
back called hiding wiki's in HTTP and it

32
00:01:33,360 --> 00:01:37,979
was a thrilling presentation but for a

33
00:01:36,030 --> 00:01:39,990
number of reasons it left me far too

34
00:01:37,979 --> 00:01:42,600
scared to actually tackle this topic

35
00:01:39,990 --> 00:01:45,210
myself one of those reasons was that

36
00:01:42,600 --> 00:01:48,298
this technique was first documented way

37
00:01:45,210 --> 00:01:50,850
back in 2005 and yet I'd never seen

38
00:01:48,299 --> 00:01:54,540
anyone ever successfully apply this

39
00:01:50,850 --> 00:01:56,759
technique to a real website another was

40
00:01:54,540 --> 00:01:58,439
that some of the diagrams just made

41
00:01:56,759 --> 00:02:00,329
absolutely no sense to me because my

42
00:01:58,439 --> 00:02:02,850
technical understanding of the topic was

43
00:02:00,329 --> 00:02:04,619
just not there and then there were some

44
00:02:02,850 --> 00:02:07,798
concerning statements on some of the

45
00:02:04,619 --> 00:02:08,758
slides things like you will not earn any

46
00:02:07,799 --> 00:02:12,420
bounties

47
00:02:08,758 --> 00:02:14,099
using this technique and even worse you

48
00:02:12,420 --> 00:02:16,500
will certainly not be considered like a

49
00:02:14,099 --> 00:02:18,390
white hat if you try and find out if a

50
00:02:16,500 --> 00:02:22,049
single live website is actually

51
00:02:18,390 --> 00:02:24,208
vulnerable to this technique so at the

52
00:02:22,049 --> 00:02:25,590
time I thought okay I'm just gonna leave

53
00:02:24,209 --> 00:02:28,590
that research well alone and forget it

54
00:02:25,590 --> 00:02:33,239
exists but this year I decided to try it

55
00:02:28,590 --> 00:02:35,250
out and see what happened and well quite

56
00:02:33,239 --> 00:02:37,200
a few things happened so I did manage to

57
00:02:35,250 --> 00:02:40,110
get some bounties and no one's called me

58
00:02:37,200 --> 00:02:41,670
a black hat for it so far but I got

59
00:02:40,110 --> 00:02:45,720
quite a few interesting reactions from

60
00:02:41,670 --> 00:02:47,399
people one guy was so surprised by them

61
00:02:45,720 --> 00:02:49,890
by the vulnerability I submitted to him

62
00:02:47,400 --> 00:02:52,410
he thought I was actually faking the

63
00:02:49,890 --> 00:02:55,078
entire thing he thought he was some kind

64
00:02:52,410 --> 00:02:58,980
of digital sleight of hand in order to

65
00:02:55,079 --> 00:03:01,170
trick him into paying me about e and at

66
00:02:58,980 --> 00:03:03,149
the other end of the spectrum another

67
00:03:01,170 --> 00:03:05,578
guy liked the unique technique that I

68
00:03:03,150 --> 00:03:08,579
used on his website so much he thought

69
00:03:05,579 --> 00:03:10,769
he would take that technique and apply

70
00:03:08,579 --> 00:03:12,269
it to some other bug bounty sites behind

71
00:03:10,769 --> 00:03:15,419
my back to earn himself some pocket

72
00:03:12,269 --> 00:03:18,959
money now of course I had no idea he was

73
00:03:15,419 --> 00:03:21,000
doing this until he ran into a technical

74
00:03:18,959 --> 00:03:23,099
problem and decided that the way to

75
00:03:21,000 --> 00:03:25,049
resolve this was to pretend to be

76
00:03:23,099 --> 00:03:29,060
someone else and then email me asking

77
00:03:25,049 --> 00:03:32,190
for help which didn't work out very well

78
00:03:29,060 --> 00:03:34,590
but out of all of this chaos I've been

79
00:03:32,190 --> 00:03:35,639
able to bring safe detection methods so

80
00:03:34,590 --> 00:03:38,849
you can find these vulnerabilities

81
00:03:35,639 --> 00:03:40,950
without being called a black hat all new

82
00:03:38,849 --> 00:03:43,918
methods to trigger desynchronization and

83
00:03:40,950 --> 00:03:46,619
exploit the results and fresh method

84
00:03:43,919 --> 00:03:48,930
methodology and tooling to bring clarity

85
00:03:46,620 --> 00:03:54,930
to attack topic that's been overlooked

86
00:03:48,930 --> 00:03:56,489
for far too long so first I'm going to

87
00:03:54,930 --> 00:03:59,430
talk about what makes this attack

88
00:03:56,489 --> 00:04:01,769
possible how to assess if a website is

89
00:03:59,430 --> 00:04:03,870
vulnerable and what to do next then I'll

90
00:04:01,769 --> 00:04:05,819
look at how to exploit it I will

91
00:04:03,870 --> 00:04:07,349
illustrate it using case studies looking

92
00:04:05,819 --> 00:04:08,659
at real websites that I've exploited

93
00:04:07,349 --> 00:04:10,369
myself

94
00:04:08,659 --> 00:04:12,769
starting with some really simple easy

95
00:04:10,370 --> 00:04:14,959
ones and in building in complexity and

96
00:04:12,769 --> 00:04:17,540
finally ending with a knife demo on a

97
00:04:14,959 --> 00:04:19,488
replica of a real system in which I'll

98
00:04:17,540 --> 00:04:21,049
also show how to use the open-source

99
00:04:19,488 --> 00:04:23,469
burp suite extension that I'm releasing

100
00:04:21,048 --> 00:04:25,340
as part of this research

101
00:04:23,470 --> 00:04:27,770
after that I'll talk about how to

102
00:04:25,340 --> 00:04:32,060
prevent these attacks and in wrap up and

103
00:04:27,770 --> 00:04:34,639
take five minutes of questions if you

104
00:04:32,060 --> 00:04:36,740
picture website as an end user it

105
00:04:34,639 --> 00:04:39,139
probably looks something like this

106
00:04:36,740 --> 00:04:42,169
because as an end user that's all that

107
00:04:39,139 --> 00:04:45,320
we can dive a see but behind the scenes

108
00:04:42,169 --> 00:04:48,109
most modern websites routing requests

109
00:04:45,320 --> 00:04:51,199
through a chain of servers speaking to

110
00:04:48,110 --> 00:04:54,470
each other over HTTP over a stream based

111
00:04:51,199 --> 00:04:57,949
transport layer protocol like TCP or TLS

112
00:04:54,470 --> 00:05:01,070
and for the sake of performance these

113
00:04:57,949 --> 00:05:04,130
TCP and TLS streams are heavily reused

114
00:05:01,070 --> 00:05:07,099
following the HTTP 1.1 keepalive

115
00:05:04,130 --> 00:05:09,740
protocol which means the HTTP requests

116
00:05:07,100 --> 00:05:12,380
are placed back-to-back on the stream

117
00:05:09,740 --> 00:05:15,050
with no des limiters in between them and

118
00:05:12,380 --> 00:05:15,830
each server in the chain is expected to

119
00:05:15,050 --> 00:05:18,410
pause the haste

120
00:05:15,830 --> 00:05:19,700
taystee to be headers of each request to

121
00:05:18,410 --> 00:05:23,870
work out where one of the quest stops

122
00:05:19,700 --> 00:05:25,940
and the next one starts so you have

123
00:05:23,870 --> 00:05:28,070
requests from users from all over the

124
00:05:25,940 --> 00:05:30,080
world being funneled over a small pool

125
00:05:28,070 --> 00:05:32,659
of shared TCP streams to the backend

126
00:05:30,080 --> 00:05:34,490
application server which is pausing

127
00:05:32,660 --> 00:05:36,530
these in order to understand where each

128
00:05:34,490 --> 00:05:38,300
one stops and the next one starts it's

129
00:05:36,530 --> 00:05:42,289
pretty obvious what's gonna go wrong

130
00:05:38,300 --> 00:05:44,630
right what happens if someone sends an

131
00:05:42,289 --> 00:05:46,370
ambiguous message one where the front

132
00:05:44,630 --> 00:05:49,490
end thinks the message is a different

133
00:05:46,370 --> 00:05:51,530
length to the bucket so in this example

134
00:05:49,490 --> 00:05:52,789
the front end is interpreting this as

135
00:05:51,530 --> 00:05:54,530
one request

136
00:05:52,789 --> 00:05:56,570
so it's floating the whole thing onto

137
00:05:54,530 --> 00:05:58,789
the back end and the back end for some

138
00:05:56,570 --> 00:06:02,539
reason thinks that the final blue square

139
00:05:58,789 --> 00:06:04,430
is the end of the request and therefore

140
00:06:02,539 --> 00:06:07,250
it thinks that orange square is the

141
00:06:04,430 --> 00:06:08,720
start of the next request and then it's

142
00:06:07,250 --> 00:06:12,470
just going to wait for that next request

143
00:06:08,720 --> 00:06:15,139
to be completed and when the next real

144
00:06:12,470 --> 00:06:17,700
request is the backend server we end up

145
00:06:15,139 --> 00:06:20,310
with this orange data at the start of it

146
00:06:17,700 --> 00:06:22,380
so that's the essence of the quest

147
00:06:20,310 --> 00:06:25,380
smuggling we can apply an arbitrary

148
00:06:22,380 --> 00:06:29,159
prefix to the next request to hit the

149
00:06:25,380 --> 00:06:31,080
back end now because we can't directly

150
00:06:29,160 --> 00:06:33,390
see what's happening behind the front

151
00:06:31,080 --> 00:06:35,460
end system it's quite easy to get bogged

152
00:06:33,390 --> 00:06:38,280
down in the technical details I

153
00:06:35,460 --> 00:06:39,380
certainly did myself but ultimately it's

154
00:06:38,280 --> 00:06:43,200
really that simple

155
00:06:39,380 --> 00:06:44,760
so now let's zoom in and take a look at

156
00:06:43,200 --> 00:06:51,330
what the data might actually look like

157
00:06:44,760 --> 00:06:52,950
on the wire this request is ambiguous

158
00:06:51,330 --> 00:06:55,080
because we're using an absolutely

159
00:06:52,950 --> 00:06:57,030
classic desynchronisation technique

160
00:06:55,080 --> 00:07:00,330
we've just specified the content length

161
00:06:57,030 --> 00:07:01,710
had a twice in this example the front

162
00:07:00,330 --> 00:07:03,180
end is looking at the first content

163
00:07:01,710 --> 00:07:05,580
length header so it's forwarding all the

164
00:07:03,180 --> 00:07:07,890
blue data and the Owens G onto the back

165
00:07:05,580 --> 00:07:09,750
end but the back end is looking at the

166
00:07:07,890 --> 00:07:11,909
second content length so it's only

167
00:07:09,750 --> 00:07:14,370
meeting in the blue data if thinks the G

168
00:07:11,910 --> 00:07:16,170
is the start of the next request so in

169
00:07:14,370 --> 00:07:17,640
the next request which could be coming

170
00:07:16,170 --> 00:07:20,340
from the same user or a different user

171
00:07:17,640 --> 00:07:22,500
hits the back end they're going to get

172
00:07:20,340 --> 00:07:25,979
an unexpected response saying something

173
00:07:22,500 --> 00:07:28,230
like unknown method G post and that's it

174
00:07:25,980 --> 00:07:31,500
we've successfully done and the quest

175
00:07:28,230 --> 00:07:34,380
smuggiing it up the only catch is this

176
00:07:31,500 --> 00:07:36,330
technique is so classic that it doesn't

177
00:07:34,380 --> 00:07:39,690
really work on anything that's actually

178
00:07:36,330 --> 00:07:42,080
worth hacking these dates what does work

179
00:07:39,690 --> 00:07:45,360
on plenty of interesting systems is

180
00:07:42,080 --> 00:07:47,070
using chunked encoding so chunked

181
00:07:45,360 --> 00:07:48,810
encoding is an alternative way of

182
00:07:47,070 --> 00:07:50,820
specifying the length of the message

183
00:07:48,810 --> 00:07:52,620
instead of instead of specifying their

184
00:07:50,820 --> 00:07:54,990
continent you say transfer encoding

185
00:07:52,620 --> 00:07:57,180
chunked and that means that the back-end

186
00:07:54,990 --> 00:07:59,130
server or the front end whatever the

187
00:07:57,180 --> 00:08:01,230
server is will just pause the body of

188
00:07:59,130 --> 00:08:04,350
the message until it reaches a zero

189
00:08:01,230 --> 00:08:06,570
followed by an empty line so in this

190
00:08:04,350 --> 00:08:08,280
example here once again the front end is

191
00:08:06,570 --> 00:08:10,409
used the content let's header its is

192
00:08:08,280 --> 00:08:12,690
Florida - all the data up to and

193
00:08:10,410 --> 00:08:13,980
including the orange key but the back

194
00:08:12,690 --> 00:08:16,590
end is looked at the content length

195
00:08:13,980 --> 00:08:18,570
transfer encoding chunks so it stopped

196
00:08:16,590 --> 00:08:20,789
reading in this message after the zero

197
00:08:18,570 --> 00:08:22,800
and the newline and once again our

198
00:08:20,790 --> 00:08:27,030
victim is going to get an unknown method

199
00:08:22,800 --> 00:08:28,740
G post response now great that's like

200
00:08:27,030 --> 00:08:30,539
that techniques nice inner works on lots

201
00:08:28,740 --> 00:08:31,510
of systems but what if the d

202
00:08:30,540 --> 00:08:33,789
synchronization

203
00:08:31,510 --> 00:08:35,950
happens the other way round what if it's

204
00:08:33,789 --> 00:08:37,990
the front end the looks of the transfer

205
00:08:35,950 --> 00:08:41,350
encoding chunked header and the back end

206
00:08:37,990 --> 00:08:43,510
that uses the content length well we can

207
00:08:41,350 --> 00:08:45,880
still exploit that there's this minor

208
00:08:43,510 --> 00:08:47,980
limitation which is though if the

209
00:08:45,880 --> 00:08:50,770
malicious prefix shown in our winchester

210
00:08:47,980 --> 00:08:52,420
end with a 0 followed by an empty line

211
00:08:50,770 --> 00:08:56,890
but in general that's not going to cause

212
00:08:52,420 --> 00:08:58,209
us any trouble one other thing you might

213
00:08:56,890 --> 00:09:02,050
be looking at the content that's header

214
00:08:58,210 --> 00:09:04,210
and wondering why that says 3 when

215
00:09:02,050 --> 00:09:06,939
there's only one obvious blue byte of

216
00:09:04,210 --> 00:09:08,950
data that's because every line in pretty

217
00:09:06,940 --> 00:09:12,070
much every slide actually ends with

218
00:09:08,950 --> 00:09:14,140
slash our sacha in general it will be

219
00:09:12,070 --> 00:09:17,350
easier to use the highlighting to work

220
00:09:14,140 --> 00:09:18,880
out which bit is the malicious prefix

221
00:09:17,350 --> 00:09:24,850
rather than manually pausing all of the

222
00:09:18,880 --> 00:09:27,340
content length and chunk headers so why

223
00:09:24,850 --> 00:09:30,160
does that chunk technique work on so

224
00:09:27,340 --> 00:09:33,580
many systems I think we've got to give

225
00:09:30,160 --> 00:09:36,160
some credit to the specification ofc 2 6

226
00:09:33,580 --> 00:09:38,830
1 6 says if you receive a message that

227
00:09:36,160 --> 00:09:40,689
specifies a content length and uses

228
00:09:38,830 --> 00:09:43,240
chunked encoding then you should give

229
00:09:40,690 --> 00:09:46,480
the chunked encoding priority and that

230
00:09:43,240 --> 00:09:49,150
kind of implicitly says that these

231
00:09:46,480 --> 00:09:51,730
messages are located and they shouldn't

232
00:09:49,150 --> 00:09:53,319
be rejected so what that means is if

233
00:09:51,730 --> 00:09:55,810
you've got a chain of servers for a

234
00:09:53,320 --> 00:09:59,950
given website if any server in that

235
00:09:55,810 --> 00:10:01,449
chain has chunked encoding disabled then

236
00:09:59,950 --> 00:10:02,740
they will just fall back to using the

237
00:10:01,450 --> 00:10:05,830
content length and you'll be able to

238
00:10:02,740 --> 00:10:07,720
desynchronize and exploit it so this

239
00:10:05,830 --> 00:10:10,690
technique by itself works on loads of

240
00:10:07,720 --> 00:10:12,880
systems including possibly the majority

241
00:10:10,690 --> 00:10:16,420
of systems using the content delivery

242
00:10:12,880 --> 00:10:18,610
network Akamai I have told them about

243
00:10:16,420 --> 00:10:21,219
that so that might be changing in the

244
00:10:18,610 --> 00:10:24,090
near future hopefully but what if you

245
00:10:21,220 --> 00:10:27,070
want to exploit a system that isn't

246
00:10:24,090 --> 00:10:30,310
where every server in the chain supports

247
00:10:27,070 --> 00:10:32,980
chunked encoding well luckily you can

248
00:10:30,310 --> 00:10:34,750
still do that all you need to do is find

249
00:10:32,980 --> 00:10:37,090
a way to hide the transfer encoding

250
00:10:34,750 --> 00:10:39,460
chunked header from one server in the

251
00:10:37,090 --> 00:10:42,250
chain and there's lots of ways of doing

252
00:10:39,460 --> 00:10:43,560
that for example some servers normalize

253
00:10:42,250 --> 00:10:45,660
trailing whitespace

254
00:10:43,560 --> 00:10:49,079
in headin eight so some who think this

255
00:10:45,660 --> 00:10:51,810
message is chopped and some what other

256
00:10:49,080 --> 00:10:53,370
servers like to grip the transfer

257
00:10:51,810 --> 00:10:55,979
encoding header for the word chopped

258
00:10:53,370 --> 00:10:57,660
rather than tokenizing it so they will

259
00:10:55,980 --> 00:10:59,550
think that messages chunk words others

260
00:10:57,660 --> 00:11:02,010
won't and you can desynchronize them and

261
00:10:59,550 --> 00:11:04,829
there's loads of techniques that you can

262
00:11:02,010 --> 00:11:06,630
use to decent canal systems this is just

263
00:11:04,830 --> 00:11:08,820
a tiny sampling of them but every

264
00:11:06,630 --> 00:11:10,910
technique on this slide is one that I've

265
00:11:08,820 --> 00:11:13,740
successfully used on a real system

266
00:11:10,910 --> 00:11:15,360
journalists research the ones

267
00:11:13,740 --> 00:11:17,040
highlighted in orange the techniques

268
00:11:15,360 --> 00:11:18,830
that I came up with myself though I

269
00:11:17,040 --> 00:11:24,660
don't think have ever been documented

270
00:11:18,830 --> 00:11:26,460
anywhere else so at this point we

271
00:11:24,660 --> 00:11:28,920
understand the fundamentals of how to

272
00:11:26,460 --> 00:11:30,990
decent kunai service which is a really

273
00:11:28,920 --> 00:11:33,479
powerful building block but if we just

274
00:11:30,990 --> 00:11:35,130
try and work with this building blog I

275
00:11:33,480 --> 00:11:37,410
can tell you with confidence we'll run

276
00:11:35,130 --> 00:11:39,960
into hazards and complications and waste

277
00:11:37,410 --> 00:11:42,420
a lot of time so to avoid that I've

278
00:11:39,960 --> 00:11:45,089
developed this methodology to guide us

279
00:11:42,420 --> 00:11:49,199
in a controlled manner step by step

280
00:11:45,089 --> 00:11:50,850
towards a successful exploit first off

281
00:11:49,200 --> 00:11:53,490
we need to detect when the

282
00:11:50,850 --> 00:11:56,430
synchronization is possible now the

283
00:11:53,490 --> 00:11:59,070
obvious way of doing that is to send two

284
00:11:56,430 --> 00:12:01,620
requests to the server where the first

285
00:11:59,070 --> 00:12:03,810
one has a is ambiguous and has a

286
00:12:01,620 --> 00:12:05,940
malicious prefix and in the second one

287
00:12:03,810 --> 00:12:07,859
should get poisoned by the malicious

288
00:12:05,940 --> 00:12:10,710
prefix from the first request and get a

289
00:12:07,860 --> 00:12:13,470
different response however this

290
00:12:10,710 --> 00:12:16,050
technique is massively flawed because if

291
00:12:13,470 --> 00:12:19,080
anyone else's request hits the server in

292
00:12:16,050 --> 00:12:21,060
between your two requests then they'll

293
00:12:19,080 --> 00:12:22,800
get the poisoned response they will

294
00:12:21,060 --> 00:12:24,900
potentially have a bad day as a result

295
00:12:22,800 --> 00:12:28,020
and you won't find the vulnerability

296
00:12:24,900 --> 00:12:30,060
you'll sing that server is secure so we

297
00:12:28,020 --> 00:12:34,140
need a better way of doing it and after

298
00:12:30,060 --> 00:12:36,780
a lot of effort I think I've got one how

299
00:12:34,140 --> 00:12:38,180
this request gets handled depends on

300
00:12:36,780 --> 00:12:40,860
whether the front end and back end

301
00:12:38,180 --> 00:12:43,439
seeing this message is chunked or

302
00:12:40,860 --> 00:12:44,760
whether they use the content met if both

303
00:12:43,440 --> 00:12:46,560
systems use the content length

304
00:12:44,760 --> 00:12:48,480
everything's fine we just get a normal

305
00:12:46,560 --> 00:12:51,959
response from the back end straightaway

306
00:12:48,480 --> 00:12:53,580
if the front end looks at the transfer

307
00:12:51,959 --> 00:12:55,378
encoding header it's going to read in

308
00:12:53,580 --> 00:12:56,999
the chunk size of three

309
00:12:55,379 --> 00:12:59,369
reading the ABC and then it's gonna read

310
00:12:56,999 --> 00:13:00,809
in the next chunk size which is Q which

311
00:12:59,369 --> 00:13:02,849
is not a valid chunk size because that's

312
00:13:00,809 --> 00:13:04,439
going to be a hexadecimal number so it's

313
00:13:02,849 --> 00:13:06,749
just going to reject that request

314
00:13:04,439 --> 00:13:11,279
without even affording it onto the

315
00:13:06,749 --> 00:13:13,169
back-end system but if the front-end

316
00:13:11,279 --> 00:13:14,999
looks at the content length header so it

317
00:13:13,169 --> 00:13:17,220
forwards all the blue data but nor the

318
00:13:14,999 --> 00:13:19,049
Owens Q onto the back end and in the

319
00:13:17,220 --> 00:13:22,349
back end look so that transfer encoding

320
00:13:19,049 --> 00:13:24,478
chunks header then the back end will

321
00:13:22,349 --> 00:13:27,299
time out waiting for the final chunk

322
00:13:24,479 --> 00:13:29,759
size to arrive so if we send this

323
00:13:27,299 --> 00:13:31,649
request and we get a significant time

324
00:13:29,759 --> 00:13:33,989
delay in the response that's a pretty

325
00:13:31,649 --> 00:13:36,839
strong indication that that server is

326
00:13:33,989 --> 00:13:38,669
vulnerable to request smuggling and if

327
00:13:36,839 --> 00:13:40,169
the DD synchronization happens the other

328
00:13:38,669 --> 00:13:42,389
way round or the front end looking at

329
00:13:40,169 --> 00:13:45,199
the transfer encoding we can still

330
00:13:42,389 --> 00:13:47,579
detect that using a similar technique

331
00:13:45,199 --> 00:13:49,919
there is a small catch with that second

332
00:13:47,579 --> 00:13:52,409
technique which is that if the second if

333
00:13:49,919 --> 00:13:54,569
the server is vulnerable the first way

334
00:13:52,409 --> 00:13:57,539
round then we end up poisoning the back

335
00:13:54,569 --> 00:13:59,209
end socket with this X which might have

336
00:13:57,539 --> 00:14:02,579
negative side-effects for someone else

337
00:13:59,209 --> 00:14:08,459
so to avoid that simply always use the

338
00:14:02,579 --> 00:14:11,878
technique on the left side first now you

339
00:14:08,459 --> 00:14:14,368
should try this technique by using every

340
00:14:11,879 --> 00:14:16,529
every different distinct Rinna's ation

341
00:14:14,369 --> 00:14:19,470
technique on the target system and you

342
00:14:16,529 --> 00:14:20,970
should try it on every URL on the target

343
00:14:19,470 --> 00:14:22,799
server because different URLs

344
00:14:20,970 --> 00:14:25,259
maybe voted to different backends and

345
00:14:22,799 --> 00:14:29,039
you can't always tell simply by looking

346
00:14:25,259 --> 00:14:31,379
at them as of today this technique is

347
00:14:29,039 --> 00:14:32,909
used by burps sweet scanner to have to

348
00:14:31,379 --> 00:14:35,129
find this vulnerability and it's also

349
00:14:32,909 --> 00:14:37,789
used by the open source free tool that

350
00:14:35,129 --> 00:14:41,399
I'm releasing as part of this research

351
00:14:37,789 --> 00:14:43,919
now because this technique is finding

352
00:14:41,399 --> 00:14:46,649
the vulnerability based on influence it

353
00:14:43,919 --> 00:14:49,139
is gonna get some folks nuggets some

354
00:14:46,649 --> 00:14:51,389
false positives but it doesn't get very

355
00:14:49,139 --> 00:14:54,059
many and the real strength is it gets

356
00:14:51,389 --> 00:14:56,549
vastly less false negatives than the

357
00:14:54,059 --> 00:14:58,439
classic approach for example on one

358
00:14:56,549 --> 00:15:00,269
target this technique found the

359
00:14:58,439 --> 00:15:03,419
vulnerability every single time I

360
00:15:00,269 --> 00:15:06,329
scanned it and using the classic

361
00:15:03,419 --> 00:15:08,939
approach approach took 800 failed

362
00:15:06,329 --> 00:15:09,170
attempts before I successfully managed

363
00:15:08,939 --> 00:15:11,480
to

364
00:15:09,170 --> 00:15:15,819
applicator and that's potentially 800

365
00:15:11,480 --> 00:15:19,339
real users who got unexpected responses

366
00:15:15,820 --> 00:15:21,170
so in an ideal world we could stop there

367
00:15:19,339 --> 00:15:22,820
but probably quite a few clients won't

368
00:15:21,170 --> 00:15:24,349
take a report seriously without more

369
00:15:22,820 --> 00:15:26,680
evidence so that means we're going to

370
00:15:24,350 --> 00:15:29,690
have to fall back to using the good old

371
00:15:26,680 --> 00:15:32,329
unreliable classic approach we're going

372
00:15:29,690 --> 00:15:34,040
to send a pair of the quests that the

373
00:15:32,329 --> 00:15:36,410
first one will look like this and as a

374
00:15:34,040 --> 00:15:39,170
malicious prefix designed to affect the

375
00:15:36,410 --> 00:15:42,290
response that the second requests shown

376
00:15:39,170 --> 00:15:44,269
in green will get so it's the second

377
00:15:42,290 --> 00:15:46,790
request which would normally get a 200

378
00:15:44,269 --> 00:15:48,500
code guess of 44 in this case that

379
00:15:46,790 --> 00:15:52,550
proves this system is definitely

380
00:15:48,500 --> 00:15:55,070
vulnerable to requests mugging there's a

381
00:15:52,550 --> 00:15:57,050
few key points here one is that you

382
00:15:55,070 --> 00:15:59,089
should absolutely not send those two

383
00:15:57,050 --> 00:16:01,219
requests over the same connection

384
00:15:59,089 --> 00:16:04,550
yourself if you do that you'll just get

385
00:16:01,220 --> 00:16:07,130
false positives also the end point you

386
00:16:04,550 --> 00:16:09,680
send these payloads to is really

387
00:16:07,130 --> 00:16:12,350
important because if the back end

388
00:16:09,680 --> 00:16:14,660
doesn't expect to receive her post

389
00:16:12,350 --> 00:16:16,190
request or if he doesn't like your

390
00:16:14,660 --> 00:16:18,560
request for any reason then it may

391
00:16:16,190 --> 00:16:21,380
reject the request with like a 500 code

392
00:16:18,560 --> 00:16:23,119
and it may also close the connection to

393
00:16:21,380 --> 00:16:25,430
the front end and if it closes the

394
00:16:23,120 --> 00:16:27,680
connection that means the malicious

395
00:16:25,430 --> 00:16:30,229
prefix in orange gets thrown out and the

396
00:16:27,680 --> 00:16:32,029
attack will fail so you want to try and

397
00:16:30,230 --> 00:16:34,190
find an endpoint that expects to receive

398
00:16:32,029 --> 00:16:36,500
a post request and also trying to

399
00:16:34,190 --> 00:16:38,570
preserve any parameters it needs so in

400
00:16:36,500 --> 00:16:42,250
these examples here I've tried to

401
00:16:38,570 --> 00:16:44,839
preserve the coupon smuggling parameter

402
00:16:42,250 --> 00:16:46,839
finally even if you do all of that

403
00:16:44,839 --> 00:16:49,190
you've got to remember this technique is

404
00:16:46,839 --> 00:16:51,199
non-deterministic it will randomly

405
00:16:49,190 --> 00:16:53,959
affect other people browsing the website

406
00:16:51,199 --> 00:16:56,240
instead of you and even if there is no

407
00:16:53,959 --> 00:16:58,040
one else browsing the website some many

408
00:16:56,240 --> 00:17:00,110
servers use pools of connections to talk

409
00:16:58,040 --> 00:17:06,379
to the backend so you'll still probably

410
00:17:00,110 --> 00:17:08,419
have to try it a few times okay now

411
00:17:06,380 --> 00:17:10,100
we're done with a theory we can finally

412
00:17:08,419 --> 00:17:13,429
take a look at what damage we can do

413
00:17:10,099 --> 00:17:15,409
using this technique now every case

414
00:17:13,429 --> 00:17:18,199
study in this section is a real system

415
00:17:15,410 --> 00:17:20,419
that I exploited Jonas research I have

416
00:17:18,199 --> 00:17:22,510
unfortunately been forced to adapt quite

417
00:17:20,419 --> 00:17:23,890
a few company names

418
00:17:22,510 --> 00:17:27,910
partly because some of them haven't even

419
00:17:23,890 --> 00:17:29,950
managed to patch it yet but I'd like to

420
00:17:27,910 --> 00:17:32,080
give a shout out to every company that

421
00:17:29,950 --> 00:17:34,150
actually does let me name them in these

422
00:17:32,080 --> 00:17:36,129
slides please remember these are the

423
00:17:34,150 --> 00:17:37,000
companies that are now secured against

424
00:17:36,130 --> 00:17:39,280
these techniques

425
00:17:37,000 --> 00:17:43,030
it's the companies that aren't my aren't

426
00:17:39,280 --> 00:17:44,620
named that may still be vulnerable also

427
00:17:43,030 --> 00:17:46,649
during this section I'm going to keep a

428
00:17:44,620 --> 00:17:50,739
running total of the bounties earned

429
00:17:46,650 --> 00:17:52,930
using each attack technique here and as

430
00:17:50,740 --> 00:17:57,130
usual of these over 50% has been donated

431
00:17:52,930 --> 00:17:59,290
to charity probably the easiest attack

432
00:17:57,130 --> 00:18:01,540
you can do with requests smuggling is

433
00:17:59,290 --> 00:18:04,690
bypassing security rules on the front

434
00:18:01,540 --> 00:18:06,040
end on a popular software vendor I found

435
00:18:04,690 --> 00:18:09,490
their front end wouldn't let you access

436
00:18:06,040 --> 00:18:11,200
slash admin but by smuggling to request

437
00:18:09,490 --> 00:18:13,000
the front end thinks for accessing the

438
00:18:11,200 --> 00:18:15,400
route of the server so when we send the

439
00:18:13,000 --> 00:18:21,070
next request ourselves we get access to

440
00:18:15,400 --> 00:18:23,650
the admin page right so far so easy now

441
00:18:21,070 --> 00:18:26,439
lots of fun ins like to rewrite requests

442
00:18:23,650 --> 00:18:28,270
by adding headers to them and one head

443
00:18:26,440 --> 00:18:31,510
of the practically every system uses

444
00:18:28,270 --> 00:18:34,180
some variation of is exported for which

445
00:18:31,510 --> 00:18:36,040
just specifies the remote users IP now

446
00:18:34,180 --> 00:18:38,230
if we try and add this header to a

447
00:18:36,040 --> 00:18:40,360
normal request ourselves most well

448
00:18:38,230 --> 00:18:42,760
configured servers will rewrite this

449
00:18:40,360 --> 00:18:45,850
header or just remove it completely but

450
00:18:42,760 --> 00:18:47,320
when we smuggle a request we bypass

451
00:18:45,850 --> 00:18:49,600
header rewriting

452
00:18:47,320 --> 00:18:51,820
so we can use that to make our IP look

453
00:18:49,600 --> 00:18:53,500
like it's coming from anywhere and using

454
00:18:51,820 --> 00:18:56,169
that technique on a security vendor I

455
00:18:53,500 --> 00:18:59,200
got an incredible three hundred dollar

456
00:18:56,170 --> 00:19:00,340
bounty so I'm not suggesting you're

457
00:18:59,200 --> 00:19:01,530
gonna get rich quick using this

458
00:19:00,340 --> 00:19:04,000
technique

459
00:19:01,530 --> 00:19:06,760
but it works on practically every server

460
00:19:04,000 --> 00:19:10,690
so it's worth knowing and also it has a

461
00:19:06,760 --> 00:19:12,730
slightly less obvious use imagine that

462
00:19:10,690 --> 00:19:15,880
you've got a certain target website

463
00:19:12,730 --> 00:19:17,560
where the time out technique works every

464
00:19:15,880 --> 00:19:20,020
time so you're fairly sure its

465
00:19:17,560 --> 00:19:22,720
vulnerable but their traffic volume is

466
00:19:20,020 --> 00:19:25,000
so high you've effectively got zero

467
00:19:22,720 --> 00:19:28,269
chance of ever getting a poisoned

468
00:19:25,000 --> 00:19:31,059
response yourself how do you prove that

469
00:19:28,269 --> 00:19:32,679
server is really vulnerable well one way

470
00:19:31,059 --> 00:19:34,539
of doing it is to smuggle a request that

471
00:19:32,679 --> 00:19:38,799
looks something like this but put a

472
00:19:34,539 --> 00:19:41,320
unique hostname in the X 44 Yoel if you

473
00:19:38,799 --> 00:19:42,940
get a DNS lookup for that hostname that

474
00:19:41,320 --> 00:19:44,830
shows that that there the body of that

475
00:19:42,940 --> 00:19:46,989
message has been interpreted as a

476
00:19:44,830 --> 00:19:49,029
separate request by the backend server

477
00:19:46,989 --> 00:19:54,429
and thereby foods that they're

478
00:19:49,029 --> 00:19:57,399
vulnerable to requests modeling now

479
00:19:54,429 --> 00:19:59,169
might be spoofing is okay but the really

480
00:19:57,399 --> 00:20:01,320
interesting behavior is going to come

481
00:19:59,169 --> 00:20:04,119
from custom application specific headers

482
00:20:01,320 --> 00:20:07,208
but we can't exploit those unless we

483
00:20:04,119 --> 00:20:09,189
know what they are fortunately it's

484
00:20:07,209 --> 00:20:11,499
often quite easy to find out as long as

485
00:20:09,190 --> 00:20:13,179
the target website takes has has an

486
00:20:11,499 --> 00:20:15,789
endpoint that expects to receive a post

487
00:20:13,179 --> 00:20:19,329
request and reflects the value of at

488
00:20:15,789 --> 00:20:21,070
least 1 gram etre so on New Relic I

489
00:20:19,329 --> 00:20:23,619
smuggled a request to their login page

490
00:20:21,070 --> 00:20:26,918
and I made sure my email address was the

491
00:20:23,619 --> 00:20:29,769
last parameter so that made when I when

492
00:20:26,919 --> 00:20:31,929
I sent the next normal request that god

493
00:20:29,769 --> 00:20:34,179
concatenate it onto the email address

494
00:20:31,929 --> 00:20:36,429
that I was trying to log in with which

495
00:20:34,179 --> 00:20:38,129
meant there was the response reflected

496
00:20:36,429 --> 00:20:40,419
the whole of the second request

497
00:20:38,129 --> 00:20:42,639
including all of the hey all of the

498
00:20:40,419 --> 00:20:45,700
headers that the front end had depended

499
00:20:42,639 --> 00:20:47,589
on to that request and some of those

500
00:20:45,700 --> 00:20:53,109
headers are going to come in useful on

501
00:20:47,589 --> 00:20:54,908
the next site on UL ik the back end

502
00:20:53,109 --> 00:20:57,249
system wasn't really the back end it was

503
00:20:54,909 --> 00:20:58,869
actually a reverse proxy so by changing

504
00:20:57,249 --> 00:21:01,749
the host header I could access different

505
00:20:58,869 --> 00:21:03,668
internal systems but all the internal

506
00:21:01,749 --> 00:21:06,579
systems I could find responded with this

507
00:21:03,669 --> 00:21:08,139
redirect tasty PS suggesting that they

508
00:21:06,579 --> 00:21:10,989
thought my request was sent being sent

509
00:21:08,139 --> 00:21:11,439
over HTTP but by looking in the previous

510
00:21:10,989 --> 00:21:14,529
site

511
00:21:11,440 --> 00:21:16,299
I saw the exported proto header so I

512
00:21:14,529 --> 00:21:18,249
stuck that on to the smuggle to request

513
00:21:16,299 --> 00:21:22,149
myself and that meant I could actually

514
00:21:18,249 --> 00:21:24,759
access these internal systems and so I

515
00:21:22,149 --> 00:21:27,399
went exploring and I found an endpoint

516
00:21:24,759 --> 00:21:30,070
that gave me a really taunting error

517
00:21:27,399 --> 00:21:33,070
message it said not authorized with

518
00:21:30,070 --> 00:21:34,479
header but it didn't tell me what the

519
00:21:33,070 --> 00:21:38,408
name of the header that I wasn't

520
00:21:34,479 --> 00:21:40,630
authorized with was and I thought okay

521
00:21:38,409 --> 00:21:43,000
well maybe this is the

522
00:21:40,630 --> 00:21:45,130
in our external service header that we

523
00:21:43,000 --> 00:21:46,059
saw on the previous slide but that

524
00:21:45,130 --> 00:21:49,090
didn't work that actually made the

525
00:21:46,059 --> 00:21:51,970
problem worse so at this point I could

526
00:21:49,090 --> 00:21:53,620
have retried the request reflection

527
00:21:51,970 --> 00:21:55,480
technique on loads of different end

528
00:21:53,620 --> 00:21:58,658
points on the New Relic until I found

529
00:21:55,480 --> 00:22:00,370
out the name of this header but I was

530
00:21:58,659 --> 00:22:02,320
feeling kind of lazy so instead I

531
00:22:00,370 --> 00:22:04,299
decided to cheat and look at my notes

532
00:22:02,320 --> 00:22:08,259
from the last time I compromised new

533
00:22:04,299 --> 00:22:10,450
ellic and that revealed the service

534
00:22:08,259 --> 00:22:13,419
gateway account ID and service gateway

535
00:22:10,450 --> 00:22:15,850
is New Relic admin headers so by

536
00:22:13,419 --> 00:22:18,639
specifying those two headers on a

537
00:22:15,850 --> 00:22:20,889
smuggled requests suicide by paths

538
00:22:18,639 --> 00:22:24,428
they're rewriting I gained access to

539
00:22:20,889 --> 00:22:26,649
their core internal API as an admin and

540
00:22:24,429 --> 00:22:27,909
as every account on their system so I

541
00:22:26,649 --> 00:22:29,979
gain pretty much full access to

542
00:22:27,909 --> 00:22:31,450
everything and got a few thousand dollar

543
00:22:29,980 --> 00:22:34,389
bounty for that

544
00:22:31,450 --> 00:22:35,759
now you will occur hacked this really

545
00:22:34,389 --> 00:22:37,990
quite fast for the hotfix

546
00:22:35,759 --> 00:22:41,320
but they said that the root cause of

547
00:22:37,990 --> 00:22:44,259
this was associated with their f5 load

548
00:22:41,320 --> 00:22:46,480
balancer and I'm not sure the f5 have

549
00:22:44,259 --> 00:22:49,019
patched that yet so you might want to

550
00:22:46,480 --> 00:22:51,100
share that out if you're using them now

551
00:22:49,019 --> 00:22:53,049
what we've seen is with requests

552
00:22:51,100 --> 00:22:54,850
modeling if you're willing to put the

553
00:22:53,049 --> 00:22:56,970
time in you can break directly into

554
00:22:54,850 --> 00:23:00,129
internal systems and have a good time

555
00:22:56,970 --> 00:23:02,289
but there's also a lot of much easier

556
00:23:00,129 --> 00:23:04,330
techniques that are less environment

557
00:23:02,289 --> 00:23:06,429
dependent focused on attacking other

558
00:23:04,330 --> 00:23:07,289
users so that's what we're going to look

559
00:23:06,429 --> 00:23:10,779
at next

560
00:23:07,289 --> 00:23:12,570
if application has any way of

561
00:23:10,779 --> 00:23:15,730
persistently stolen text later

562
00:23:12,570 --> 00:23:18,220
exploitation is really easy so for

563
00:23:15,730 --> 00:23:21,690
example on on Trello I smuggled a

564
00:23:18,220 --> 00:23:25,149
request to update my own profile bio and

565
00:23:21,690 --> 00:23:27,820
I made sure the bio parameter was lost

566
00:23:25,149 --> 00:23:30,370
and I didn't send a photo so someone

567
00:23:27,820 --> 00:23:32,080
else's request got Concannon got

568
00:23:30,370 --> 00:23:33,969
concatenated on to that and then

569
00:23:32,080 --> 00:23:36,399
described browse into my own bio on

570
00:23:33,970 --> 00:23:39,519
Trello I could retrieve the whole of

571
00:23:36,399 --> 00:23:41,649
someone else's request including all of

572
00:23:39,519 --> 00:23:43,240
their so all of their session cookies

573
00:23:41,649 --> 00:23:46,570
even though they were HTTP only and

574
00:23:43,240 --> 00:23:48,519
secure so this is a technique that

575
00:23:46,570 --> 00:23:50,980
requires no user interaction whatsoever

576
00:23:48,519 --> 00:23:53,919
it's just every time I send that request

577
00:23:50,980 --> 00:23:54,279
I get control over the account of anyone

578
00:23:53,919 --> 00:23:58,239
that

579
00:23:54,279 --> 00:24:00,429
to be browsing Trello site and I use

580
00:23:58,239 --> 00:24:03,609
that on a different target but also that

581
00:24:00,429 --> 00:24:06,039
didn't have any direct storage of text

582
00:24:03,609 --> 00:24:09,009
but did have a support request system so

583
00:24:06,039 --> 00:24:11,408
by filing I support a support request I

584
00:24:09,009 --> 00:24:13,899
could make it so the victims request

585
00:24:11,409 --> 00:24:18,700
would eventually get emailed to my

586
00:24:13,899 --> 00:24:20,228
account the primary limitation with this

587
00:24:18,700 --> 00:24:23,049
technique is that you can only steal

588
00:24:20,229 --> 00:24:25,419
data as far as the first ampersand in

589
00:24:23,049 --> 00:24:27,668
the victim's request because everything

590
00:24:25,419 --> 00:24:30,129
after that will be interpreted as just a

591
00:24:27,669 --> 00:24:32,379
different parameter and that means in

592
00:24:30,129 --> 00:24:35,918
general this technique is not very good

593
00:24:32,379 --> 00:24:38,498
for stealing passwords directly she sat

594
00:24:35,919 --> 00:24:41,440
but there is an exception if the target

595
00:24:38,499 --> 00:24:42,879
application submits passwords using JSON

596
00:24:41,440 --> 00:24:45,369
then you probably can't steal them

597
00:24:42,879 --> 00:24:48,869
unless the victims transferred contains

598
00:24:45,369 --> 00:24:54,339
an ampersand in which case you can't

599
00:24:48,869 --> 00:24:55,689
okay so what if you can't store the

600
00:24:54,339 --> 00:24:57,820
quests well there's a whole nother

601
00:24:55,690 --> 00:25:03,399
branch of attack based on serving up

602
00:24:57,820 --> 00:25:06,039
harmful responses to use probably the

603
00:25:03,399 --> 00:25:08,918
most conceptually simple one is on one

604
00:25:06,039 --> 00:25:11,589
SAS vendor that I can't name they had

605
00:25:08,919 --> 00:25:13,149
reflected XSS which is kind of an ok

606
00:25:11,589 --> 00:25:15,729
vulnerability by itself but it's not

607
00:25:13,149 --> 00:25:18,189
very good for mass exploitation because

608
00:25:15,729 --> 00:25:21,009
it requires user interaction but by

609
00:25:18,190 --> 00:25:22,960
smuggling of a quest that triggered the

610
00:25:21,009 --> 00:25:24,549
reflected exercise and then just leaving

611
00:25:22,960 --> 00:25:26,080
that on the socket some random are the

612
00:25:24,549 --> 00:25:27,789
person browsing the website would

613
00:25:26,080 --> 00:25:31,330
receive the response that was meant for

614
00:25:27,789 --> 00:25:35,169
me and get exploited so that's more

615
00:25:31,330 --> 00:25:37,869
powerful than standard reflected XSS it

616
00:25:35,169 --> 00:25:40,539
also exposes hast to be only only

617
00:25:37,869 --> 00:25:42,699
cookies once again and it also enables

618
00:25:40,539 --> 00:25:46,389
exploitation of truth of traditionally

619
00:25:42,700 --> 00:25:49,210
unexploited or XS s such as XSS in the

620
00:25:46,389 --> 00:25:54,070
user agent header or or XSS in post

621
00:25:49,210 --> 00:25:56,499
requests that have C surf tokens one

622
00:25:54,070 --> 00:25:59,109
while testing or one target trying to

623
00:25:56,499 --> 00:26:01,989
cause a redirect response I happened to

624
00:25:59,109 --> 00:26:04,669
Lolo load up their home page when a web

625
00:26:01,989 --> 00:26:08,929
browser were they developed always open

626
00:26:04,670 --> 00:26:11,799
and this message popped up and the IP

627
00:26:08,929 --> 00:26:13,850
address looked worryingly familiar and

628
00:26:11,799 --> 00:26:15,500
what was more worrying was that

629
00:26:13,850 --> 00:26:16,969
regardless of which web browser and

630
00:26:15,500 --> 00:26:19,130
which network I connected to their

631
00:26:16,970 --> 00:26:24,890
system from I always got that error

632
00:26:19,130 --> 00:26:27,170
message and looking through my logs it

633
00:26:24,890 --> 00:26:29,120
turned out that yet this was my fault

634
00:26:27,170 --> 00:26:31,309
I'd smuggled over Quest that looked

635
00:26:29,120 --> 00:26:33,709
something like this and someone else's

636
00:26:31,309 --> 00:26:35,918
request for an image had snuck in there

637
00:26:33,710 --> 00:26:38,090
so they've got the V direct response

638
00:26:35,919 --> 00:26:40,400
which is you know that's not great but

639
00:26:38,090 --> 00:26:44,299
only affected one person right but a

640
00:26:40,400 --> 00:26:47,390
cache had seen that happening so the

641
00:26:44,299 --> 00:26:49,220
cache had saved the V of X and anyone

642
00:26:47,390 --> 00:26:51,140
who went to the homepage of the target

643
00:26:49,220 --> 00:26:53,929
website and tried to load this image

644
00:26:51,140 --> 00:26:57,410
ended up trying to load the image from

645
00:26:53,929 --> 00:26:59,450
my site now on the one hand this is a

646
00:26:57,410 --> 00:27:02,030
brilliant demonstration of how easy it

647
00:26:59,450 --> 00:27:03,470
is to do cache poisoning with request

648
00:27:02,030 --> 00:27:06,649
smuggling it's so easy I did it by

649
00:27:03,470 --> 00:27:08,390
accident but yeah and also you can see

650
00:27:06,650 --> 00:27:10,340
it's really powerful because there yeah

651
00:27:08,390 --> 00:27:12,559
I hijacked an image but if I'd hijacked

652
00:27:10,340 --> 00:27:14,840
a JavaScript file I would have complete

653
00:27:12,559 --> 00:27:16,879
control over their homepage more or less

654
00:27:14,840 --> 00:27:18,949
permanently of that stayed in their

655
00:27:16,880 --> 00:27:23,570
cache for over 24 hours even after I

656
00:27:18,950 --> 00:27:24,890
told them please believe us but on the

657
00:27:23,570 --> 00:27:27,200
other hand you probably don't want this

658
00:27:24,890 --> 00:27:29,240
happening by accident right there's an

659
00:27:27,200 --> 00:27:31,580
undesirable side effect unless you're

660
00:27:29,240 --> 00:27:33,650
doing it on purpose so what can you do

661
00:27:31,580 --> 00:27:35,449
to try and reduce the chance of this

662
00:27:33,650 --> 00:27:38,299
happening well one thing you can do is

663
00:27:35,450 --> 00:27:41,510
try and craft a prefix that has no cache

664
00:27:38,299 --> 00:27:43,250
headers on the response and otherwise

665
00:27:41,510 --> 00:27:46,280
just make sure that you send your victim

666
00:27:43,250 --> 00:27:47,960
requests as fast as possible and finally

667
00:27:46,280 --> 00:27:50,450
if you have a choice of front-end

668
00:27:47,960 --> 00:27:52,220
systems try and target one in a

669
00:27:50,450 --> 00:27:54,020
geographical region

670
00:27:52,220 --> 00:27:55,700
there's asleep or otherwise won't be

671
00:27:54,020 --> 00:27:57,700
getting as much traffic because that

672
00:27:55,700 --> 00:28:00,350
reduces the chance of someone else's

673
00:27:57,700 --> 00:28:02,900
requests sneaking in in front of loss

674
00:28:00,350 --> 00:28:05,678
but ultimately if they're using a cache

675
00:28:02,900 --> 00:28:09,860
this is always a risk of this technique

676
00:28:05,679 --> 00:28:11,179
the the timing based detection technique

677
00:28:09,860 --> 00:28:14,000
is perfectly safe

678
00:28:11,179 --> 00:28:15,470
that won't do this but if you try and

679
00:28:14,000 --> 00:28:16,640
actually demoed it act is properly

680
00:28:15,470 --> 00:28:20,390
vulnerable

681
00:28:16,640 --> 00:28:22,100
this is a risk now that wasn't ideal but

682
00:28:20,390 --> 00:28:26,210
it left me wondering what if we embrace

683
00:28:22,100 --> 00:28:28,730
this possibility so here I've sent a

684
00:28:26,210 --> 00:28:32,720
malicious prefix to try and fetch an API

685
00:28:28,730 --> 00:28:35,180
key from an account and when the users

686
00:28:32,720 --> 00:28:37,400
of the quest gets concatenated on that

687
00:28:35,180 --> 00:28:39,500
request gets completed with their

688
00:28:37,400 --> 00:28:41,810
session cooking so it fetches their API

689
00:28:39,500 --> 00:28:44,300
key now at this point all we've done is

690
00:28:41,810 --> 00:28:46,940
made them receive their own API key so

691
00:28:44,300 --> 00:28:49,580
that's not really very dangerous but if

692
00:28:46,940 --> 00:28:51,320
they were trying to load a static file

693
00:28:49,580 --> 00:28:53,810
then a cache may see that happening and

694
00:28:51,320 --> 00:28:56,389
it may save their API key over that

695
00:28:53,810 --> 00:28:58,129
static file so then we can just browsers

696
00:28:56,390 --> 00:29:01,370
say that javascript file and retrieve

697
00:28:58,130 --> 00:29:02,930
the victim's key if this attack sounds

698
00:29:01,370 --> 00:29:05,389
kind of familiar that's because this

699
00:29:02,930 --> 00:29:07,820
isn't conceptually very similar to web

700
00:29:05,390 --> 00:29:10,450
cache deception which is a technique

701
00:29:07,820 --> 00:29:12,980
that was on the old like a few years ago

702
00:29:10,450 --> 00:29:15,170
the key difference is that this

703
00:29:12,980 --> 00:29:16,670
technique doesn't require any use of

704
00:29:15,170 --> 00:29:19,970
interaction it's just exploiting a

705
00:29:16,670 --> 00:29:22,520
random person browsing the website now

706
00:29:19,970 --> 00:29:24,620
unfortunately my attack pipeline that I

707
00:29:22,520 --> 00:29:27,350
used to find examples for presentations

708
00:29:24,620 --> 00:29:30,050
doesn't log into websites so I haven't

709
00:29:27,350 --> 00:29:34,760
found any genuine examples of this

710
00:29:30,050 --> 00:29:36,379
happening but oops I'm pretty sure it

711
00:29:34,760 --> 00:29:39,620
exists out there and I think you're

712
00:29:36,380 --> 00:29:41,690
gonna find it in those locations if

713
00:29:39,620 --> 00:29:47,209
anyone does find it I'd love to see a

714
00:29:41,690 --> 00:29:49,730
light up now on you ellic their back-end

715
00:29:47,210 --> 00:29:51,860
system was an internal proxy and on some

716
00:29:49,730 --> 00:29:54,140
other systems their back-end was

717
00:29:51,860 --> 00:29:57,080
actually a CDN they like James for most

718
00:29:54,140 --> 00:29:58,790
full CD ins on to each other which I

719
00:29:57,080 --> 00:30:00,980
mean I have no idea why you do that but

720
00:29:58,790 --> 00:30:03,590
some of them do and what that means is

721
00:30:00,980 --> 00:30:05,840
if you change the host header you can

722
00:30:03,590 --> 00:30:09,649
serve up any content that's hosted on

723
00:30:05,840 --> 00:30:12,439
that CDN so on this advertising company

724
00:30:09,650 --> 00:30:14,480
that I can't me if you change the host

725
00:30:12,440 --> 00:30:17,900
header you can access you can serve

726
00:30:14,480 --> 00:30:19,940
content from any Akamai website on their

727
00:30:17,900 --> 00:30:21,830
own site and once again that would get

728
00:30:19,940 --> 00:30:23,690
cached so you could effectively over

729
00:30:21,830 --> 00:30:26,330
wipe their homepage with any page on

730
00:30:23,690 --> 00:30:28,850
anyone oh I

731
00:30:26,330 --> 00:30:31,220
and that same concept works on SAS

732
00:30:28,850 --> 00:30:33,530
providers to like you you can change the

733
00:30:31,220 --> 00:30:35,950
host editor a different client of the

734
00:30:33,530 --> 00:30:40,129
SAS provider and serve up their content

735
00:30:35,950 --> 00:30:43,670
now Viacom was itself directly

736
00:30:40,130 --> 00:30:45,350
vulnerable to request model and while

737
00:30:43,670 --> 00:30:46,520
looking for vulnerabilities to chain in

738
00:30:45,350 --> 00:30:49,129
to do some damage with it

739
00:30:46,520 --> 00:30:51,680
I found this dom-based open video it and

740
00:30:49,130 --> 00:30:54,770
that raised an interesting challenge

741
00:30:51,680 --> 00:30:57,350
because with requests modeling we

742
00:30:54,770 --> 00:31:00,020
control what the backend server thinks

743
00:30:57,350 --> 00:31:02,360
the gyro is but we don't control what

744
00:31:00,020 --> 00:31:04,460
the victims web browser thinks to your

745
00:31:02,360 --> 00:31:06,409
OS and this get query Fram function

746
00:31:04,460 --> 00:31:08,900
function is being executed in the

747
00:31:06,410 --> 00:31:12,500
victims web browser so effectively by

748
00:31:08,900 --> 00:31:15,800
itself you can't combine this issue with

749
00:31:12,500 --> 00:31:19,370
request smuggling but if the target has

750
00:31:15,800 --> 00:31:22,280
a local redirect then you can use that

751
00:31:19,370 --> 00:31:24,560
you can chain these so it you smuggle to

752
00:31:22,280 --> 00:31:27,260
request to trigger the local redirect to

753
00:31:24,560 --> 00:31:29,990
redirect the user to the page that has

754
00:31:27,260 --> 00:31:33,740
the actual exploitable Dom issue and use

755
00:31:29,990 --> 00:31:35,840
that so this technique can be used to

756
00:31:33,740 --> 00:31:38,960
combine any Dom based issue based on the

757
00:31:35,840 --> 00:31:42,820
URL with request smuggling to make it

758
00:31:38,960 --> 00:31:42,820
exploitable with no user interaction

759
00:31:43,510 --> 00:31:49,460
now local feed of X a useful but also

760
00:31:47,180 --> 00:31:51,740
with address modeling because we can

761
00:31:49,460 --> 00:31:54,100
control the host header a lot of local

762
00:31:51,740 --> 00:31:58,360
redirects a lot of your X in general

763
00:31:54,100 --> 00:32:01,370
turn into open lyrics in particular

764
00:31:58,360 --> 00:32:03,500
Apache and I think some versions of iOS

765
00:32:01,370 --> 00:32:06,020
have a default behavior where if you try

766
00:32:03,500 --> 00:32:07,580
and access a folder that's a real folder

767
00:32:06,020 --> 00:32:09,800
and you don't specify the training slash

768
00:32:07,580 --> 00:32:13,070
they'll give you a redirect to put the

769
00:32:09,800 --> 00:32:14,930
slash on there using the host header so

770
00:32:13,070 --> 00:32:16,520
using this technique you can sugar AV

771
00:32:14,930 --> 00:32:19,280
director not arbitrary system with

772
00:32:16,520 --> 00:32:23,570
requesting on pretty much any target

773
00:32:19,280 --> 00:32:25,040
website and by itself v directing users

774
00:32:23,570 --> 00:32:27,129
isn't that great but if we can redirect

775
00:32:25,040 --> 00:32:29,420
a JavaScript file that lets us fight AK

776
00:32:27,130 --> 00:32:30,230
accounts and if we can get that we drive

777
00:32:29,420 --> 00:32:31,580
it cached

778
00:32:30,230 --> 00:32:34,140
over the JavaScript file we can take

779
00:32:31,580 --> 00:32:36,360
full control over the website

780
00:32:34,140 --> 00:32:38,250
this technique is one of the easiest

781
00:32:36,360 --> 00:32:40,260
ones and it's really fast

782
00:32:38,250 --> 00:32:41,910
so this became my go-to technique for

783
00:32:40,260 --> 00:32:44,100
exploiting websites and I earned a

784
00:32:41,910 --> 00:32:47,760
decent number of different bounties

785
00:32:44,100 --> 00:32:51,178
using it there's a couple of other

786
00:32:47,760 --> 00:32:53,400
points one is if you get a 307 redirect

787
00:32:51,179 --> 00:32:58,080
that is absolute dolt

788
00:32:53,400 --> 00:33:00,150
because if someone's browser is doing a

789
00:32:58,080 --> 00:33:02,340
login request so it's posting their

790
00:33:00,150 --> 00:33:04,799
username and password to a site and it

791
00:33:02,340 --> 00:33:06,149
gets a 307 redirect as a response it

792
00:33:04,799 --> 00:33:09,629
will repost

793
00:33:06,150 --> 00:33:11,130
that data to the attackers website so

794
00:33:09,630 --> 00:33:13,830
you can make people send their password

795
00:33:11,130 --> 00:33:17,419
to your website from the target login

796
00:33:13,830 --> 00:33:20,580
page also worth mentioning is some thick

797
00:33:17,419 --> 00:33:24,000
clients like HTTP live means but there

798
00:33:20,580 --> 00:33:27,030
aren't browsers have that date of

799
00:33:24,000 --> 00:33:29,760
reposting behavior on all all redirects

800
00:33:27,030 --> 00:33:33,240
so for example on a new relic I was able

801
00:33:29,760 --> 00:33:35,100
to steal some of the API keys because

802
00:33:33,240 --> 00:33:37,169
they were v because they were reposting

803
00:33:35,100 --> 00:33:43,139
data even though the status code was

804
00:33:37,169 --> 00:33:44,880
just 301 or something like that now one

805
00:33:43,140 --> 00:33:47,070
of the targets this we direct based

806
00:33:44,880 --> 00:33:53,669
cache poisoning technique works on was

807
00:33:47,070 --> 00:33:56,309
PayPal which might be happy and so if we

808
00:33:53,669 --> 00:33:57,600
issued a request to web static without

809
00:33:56,309 --> 00:33:59,580
the training slash they would give IV

810
00:33:57,600 --> 00:34:02,820
direct and we can make that redirect go

811
00:33:59,580 --> 00:34:05,040
to our serve however there was a couple

812
00:34:02,820 --> 00:34:07,080
of complications one is that as you can

813
00:34:05,040 --> 00:34:09,090
see the two hosts headers were getting

814
00:34:07,080 --> 00:34:10,739
concatenated onto each other meaning

815
00:34:09,090 --> 00:34:13,590
that the host part of the me direct was

816
00:34:10,739 --> 00:34:16,408
just broken fortunately that was easily

817
00:34:13,590 --> 00:34:19,350
fixed by clicking a question mark at the

818
00:34:16,409 --> 00:34:22,679
end of my host header the second problem

819
00:34:19,350 --> 00:34:24,750
is that this V Direct uses the HTTP

820
00:34:22,679 --> 00:34:27,090
protocol not HTTP and I couldn't find

821
00:34:24,750 --> 00:34:28,830
any way to change that which meant that

822
00:34:27,090 --> 00:34:31,409
when we were putting the JavaScript

823
00:34:28,830 --> 00:34:35,040
files this would get blocked by mixed

824
00:34:31,409 --> 00:34:38,369
content protection accepts on Safari and

825
00:34:35,040 --> 00:34:39,899
edge and Internet Explorer the details

826
00:34:38,369 --> 00:34:41,440
of that in my presentation from last

827
00:34:39,899 --> 00:34:43,210
year

828
00:34:41,440 --> 00:34:47,770
but still that's a decent number of

829
00:34:43,210 --> 00:34:49,690
users and that javascript file that we

830
00:34:47,770 --> 00:34:53,500
can permanently convert into a redirect

831
00:34:49,690 --> 00:34:54,850
is used on PayPal's login page however

832
00:34:53,500 --> 00:34:58,060
there's a catch

833
00:34:54,850 --> 00:35:02,380
PayPal's login page I also use the CSP

834
00:34:58,060 --> 00:35:04,810
which blocks this redirect but PayPal's

835
00:35:02,380 --> 00:35:07,480
login page also loads a different page

836
00:35:04,810 --> 00:35:10,420
in an iframe a page on seed or paper

837
00:35:07,480 --> 00:35:12,670
comm and that page also imports my

838
00:35:10,420 --> 00:35:15,910
poisons javascript file and doesn't have

839
00:35:12,670 --> 00:35:20,410
CSP so that means i can hydrate the eye

840
00:35:15,910 --> 00:35:21,940
frame but i can't just read the password

841
00:35:20,410 --> 00:35:25,629
out the parent page because of the same

842
00:35:21,940 --> 00:35:28,900
origin policy the user's browser will

843
00:35:25,630 --> 00:35:31,390
just block this but my colleague

844
00:35:28,900 --> 00:35:34,750
amethyst found a page at paypal.com

845
00:35:31,390 --> 00:35:39,100
slash us slash gifts which was a static

846
00:35:34,750 --> 00:35:42,490
page and it didn't have CSP and it also

847
00:35:39,100 --> 00:35:44,650
imported my malicious javascript file so

848
00:35:42,490 --> 00:35:47,200
by hijacking the iframe and by

849
00:35:44,650 --> 00:35:49,750
redirecting it to this slash us slash

850
00:35:47,200 --> 00:35:53,109
gifts euro and then we hijacking the

851
00:35:49,750 --> 00:35:54,790
iframe for the second time that got me

852
00:35:53,110 --> 00:35:56,800
code execution on the JavaScript

853
00:35:54,790 --> 00:35:58,840
execution on the same domain so I could

854
00:35:56,800 --> 00:36:01,360
then read the user's paypal password out

855
00:35:58,840 --> 00:36:05,560
of the parent page and send it off to my

856
00:36:01,360 --> 00:36:08,260
website so the effect was if anyone

857
00:36:05,560 --> 00:36:11,440
wanted to log in try to log into PayPal

858
00:36:08,260 --> 00:36:12,760
in edge or IE or Safari I could steal

859
00:36:11,440 --> 00:36:15,340
their password with no user interaction

860
00:36:12,760 --> 00:36:20,590
and PayPal paid a decent 19 thousand

861
00:36:15,340 --> 00:36:23,680
dollar bounty for that now they fix this

862
00:36:20,590 --> 00:36:25,720
really fast and they did it by making

863
00:36:23,680 --> 00:36:29,259
the front end system which was Akamai

864
00:36:25,720 --> 00:36:31,779
unsurprisingly block any requests that

865
00:36:29,260 --> 00:36:34,720
had the word chunked and the transfer

866
00:36:31,780 --> 00:36:36,520
encoding header and at the time I looked

867
00:36:34,720 --> 00:36:38,379
at this defense and I kind of poked it a

868
00:36:36,520 --> 00:36:42,940
bit and I thought yeah that looks pretty

869
00:36:38,380 --> 00:36:45,160
sound but a few weeks later I was trying

870
00:36:42,940 --> 00:36:47,110
out a new D synchronization technique

871
00:36:45,160 --> 00:36:49,299
simply using a loin wrapped header now

872
00:36:47,110 --> 00:36:51,220
this attack is completely specification

873
00:36:49,300 --> 00:36:52,830
compliant I didn't really expect it to

874
00:36:51,220 --> 00:36:54,980
work on anything

875
00:36:52,830 --> 00:37:00,029
it pretty much didn't work on anything

876
00:36:54,980 --> 00:37:01,770
directly but what it did do was exposed

877
00:37:00,030 --> 00:37:04,230
an interesting little bug in Akamai

878
00:37:01,770 --> 00:37:06,660
where if you use line wrapping they just

879
00:37:04,230 --> 00:37:09,060
don't see any of the data after the new

880
00:37:06,660 --> 00:37:10,799
line so when they looked at that they

881
00:37:09,060 --> 00:37:12,990
thought it had a blank transfer encoding

882
00:37:10,800 --> 00:37:14,940
header and passed it on to the backend

883
00:37:12,990 --> 00:37:17,160
server so I think once again

884
00:37:14,940 --> 00:37:28,500
compromised ferrets login page and are

885
00:37:17,160 --> 00:37:29,670
another $20,000 bounty Thanks I thought

886
00:37:28,500 --> 00:37:31,350
that was really generous of them

887
00:37:29,670 --> 00:37:36,780
especially given that I said that the

888
00:37:31,350 --> 00:37:38,880
first fix was fine and it wasn't okay

889
00:37:36,780 --> 00:37:43,700
right so now we've seen a whole range of

890
00:37:38,880 --> 00:37:46,350
different attacks it's time for the demo

891
00:37:43,700 --> 00:37:49,950
so I'm going to exploit a replica of a

892
00:37:46,350 --> 00:37:52,529
real system you might even recognize it

893
00:37:49,950 --> 00:37:54,569
this is a system that where the real

894
00:37:52,530 --> 00:38:00,530
version of this holds all kinds of juicy

895
00:37:54,570 --> 00:38:03,690
zero-days within and this is bobzilla so

896
00:38:00,530 --> 00:38:04,740
firstly I'm going to take a request to

897
00:38:03,690 --> 00:38:06,930
the system and I'm going to right click

898
00:38:04,740 --> 00:38:09,359
and click Launch smuggle probe which is

899
00:38:06,930 --> 00:38:11,460
going to launch this burp suite expects

900
00:38:09,360 --> 00:38:13,980
extension that I'm releasing as part of

901
00:38:11,460 --> 00:38:15,780
this research and here we get loads of

902
00:38:13,980 --> 00:38:18,120
options you can see there's tons of D

903
00:38:15,780 --> 00:38:19,410
synchronization techniques I've just

904
00:38:18,120 --> 00:38:21,150
turned them all off except for the one

905
00:38:19,410 --> 00:38:24,089
that's actually going to work for the

906
00:38:21,150 --> 00:38:27,090
sake of speed so if I send that running

907
00:38:24,090 --> 00:38:28,440
we can see the requests it's sending and

908
00:38:27,090 --> 00:38:30,900
if we look at the requests you can see

909
00:38:28,440 --> 00:38:33,750
it's using this timeout technique but I

910
00:38:30,900 --> 00:38:36,360
showed you earlier and sure enough we're

911
00:38:33,750 --> 00:38:39,420
getting a timeout from the server now

912
00:38:36,360 --> 00:38:40,950
why is this message ambiguous you can

913
00:38:39,420 --> 00:38:42,930
see we've got a continent here and

914
00:38:40,950 --> 00:38:45,330
there's a transfer encoding chunk total

915
00:38:42,930 --> 00:38:49,080
up here but the interesting thing is

916
00:38:45,330 --> 00:38:51,299
this header that we've got before it if

917
00:38:49,080 --> 00:38:52,980
we switch to the hex view it'll probably

918
00:38:51,300 --> 00:38:54,330
too small to see but just believe me

919
00:38:52,980 --> 00:38:57,780
this character that I've just

920
00:38:54,330 --> 00:39:00,960
highlighted is oay so I've terminated

921
00:38:57,780 --> 00:39:03,450
this header with OE when you're meant to

922
00:39:00,960 --> 00:39:05,430
terminate headers with OD okay and

923
00:39:03,450 --> 00:39:08,460
that's meant that the front in

924
00:39:05,430 --> 00:39:10,680
server thinks that this is one header

925
00:39:08,460 --> 00:39:13,589
where's the back in which is nginx

926
00:39:10,680 --> 00:39:15,328
thinks that ROA by itself is terminating

927
00:39:13,589 --> 00:39:16,859
the header and does see that if they're

928
00:39:15,329 --> 00:39:20,940
chunked continents so that's how we're

929
00:39:16,859 --> 00:39:23,609
able to desynchronize it and hopefully

930
00:39:20,940 --> 00:39:25,200
we found this one ability yep so I'm

931
00:39:23,609 --> 00:39:26,848
going to right click on it and now we've

932
00:39:25,200 --> 00:39:29,160
got this extra option that says smuggle

933
00:39:26,849 --> 00:39:30,270
attack once again this is the open

934
00:39:29,160 --> 00:39:31,770
source extension that I'm releasing

935
00:39:30,270 --> 00:39:34,079
which works with the free version at

936
00:39:31,770 --> 00:39:37,319
birth and so on so this is going to pop

937
00:39:34,079 --> 00:39:38,880
open a turbo intruder window and you

938
00:39:37,319 --> 00:39:40,558
don't need to worry about changing most

939
00:39:38,880 --> 00:39:43,380
of it the only thing you want to change

940
00:39:40,559 --> 00:39:44,970
is this prefix variable this is the

941
00:39:43,380 --> 00:39:46,170
malicious prefix that's going to be

942
00:39:44,970 --> 00:39:49,439
applied to the next

943
00:39:46,170 --> 00:39:51,359
request so in this example we're going

944
00:39:49,440 --> 00:39:53,430
to send the attack once and a bunch of

945
00:39:51,359 --> 00:39:56,339
follow-up requests that are identical

946
00:39:53,430 --> 00:40:00,660
and one of the follow-ups should get a

947
00:39:56,339 --> 00:40:02,970
404 status code back and sure enough it

948
00:40:00,660 --> 00:40:04,618
hats so these requests are identical but

949
00:40:02,970 --> 00:40:10,290
the first one is getting a 4/4 and

950
00:40:04,619 --> 00:40:14,549
that's because in the first request

951
00:40:10,290 --> 00:40:16,500
we've got this attack happening here so

952
00:40:14,549 --> 00:40:18,750
that demonstrates the system is

953
00:40:16,500 --> 00:40:19,829
vulnerable to request modeling and now

954
00:40:18,750 --> 00:40:23,309
we just want to try and do some damage

955
00:40:19,829 --> 00:40:25,260
on Bugzilla anyone by design kind of

956
00:40:23,309 --> 00:40:27,809
register an account and file a bug and

957
00:40:25,260 --> 00:40:30,299
on a bug you can put an attachment and

958
00:40:27,809 --> 00:40:32,309
these attachments can contain HTML but

959
00:40:30,299 --> 00:40:34,920
this isn't a security risk because if

960
00:40:32,309 --> 00:40:38,849
you see here the application is on BMO

961
00:40:34,920 --> 00:40:43,079
web dot VM but the attachments I'll

962
00:40:38,849 --> 00:40:45,829
rendered on BMO sandbox got VM so by

963
00:40:43,079 --> 00:40:49,049
itself this is not a security risk

964
00:40:45,829 --> 00:40:51,780
thanks to the same origin policy but

965
00:40:49,049 --> 00:40:53,849
maybe we can use that behavior with our

966
00:40:51,780 --> 00:40:55,890
attacks so I'm gonna find the request

967
00:40:53,849 --> 00:40:58,440
that loads that attachment which is here

968
00:40:55,890 --> 00:41:03,558
and I'm just going to copy that and I'm

969
00:40:58,440 --> 00:41:08,309
going to put that in the free fix

970
00:41:03,559 --> 00:41:11,099
variable here so I'm applying that as a

971
00:41:08,309 --> 00:41:12,780
prefix to it to the next request it's

972
00:41:11,099 --> 00:41:14,940
important that you leave this extra

973
00:41:12,780 --> 00:41:15,309
header on the end because remember the

974
00:41:14,940 --> 00:41:18,369
Vic

975
00:41:15,309 --> 00:41:20,289
request is being stuck directly on the

976
00:41:18,369 --> 00:41:22,479
end of this so if I didn't have this the

977
00:41:20,289 --> 00:41:23,709
victims request would land on the host

978
00:41:22,479 --> 00:41:26,589
header and it would just break the whole

979
00:41:23,709 --> 00:41:30,038
thing so if I send this the second

980
00:41:26,589 --> 00:41:31,239
request here we go should get even even

981
00:41:30,039 --> 00:41:35,189
though it's being sent to be a mobile

982
00:41:31,239 --> 00:41:38,289
web dot VM it's getting our harmful

983
00:41:35,189 --> 00:41:39,368
HTML file back so that demonstrates that

984
00:41:38,289 --> 00:41:41,769
the server is almost certainly

985
00:41:39,369 --> 00:41:44,199
vulnerable all we need to do now is

986
00:41:41,769 --> 00:41:46,959
prove the attack and to do that I'm

987
00:41:44,199 --> 00:41:48,909
going to comment out the victim requests

988
00:41:46,959 --> 00:41:51,428
so I'm going to leave the back in socket

989
00:41:48,909 --> 00:41:54,699
poisoned there we go

990
00:41:51,429 --> 00:41:58,239
so now for anyone browsing the site no

991
00:41:54,699 --> 00:42:00,400
matter what they click I'll just do a my

992
00:41:58,239 --> 00:42:02,289
dashboard they will get this harmful

993
00:42:00,400 --> 00:42:04,769
response back and always still their

994
00:42:02,289 --> 00:42:04,769
possible

995
00:42:06,050 --> 00:42:20,530
[Applause]

996
00:42:14,310 --> 00:42:24,090
and that got $4,000 that bounty taking

997
00:42:20,530 --> 00:42:27,010
the total to 70k turn this research now

998
00:42:24,090 --> 00:42:30,160
to fix these vulnerabilities you have to

999
00:42:27,010 --> 00:42:32,410
be able to find them and that means you

1000
00:42:30,160 --> 00:42:34,810
need the right tolling so whatever tool

1001
00:42:32,410 --> 00:42:37,089
you're using Amy it needs to support

1002
00:42:34,810 --> 00:42:38,830
manually changing the content length if

1003
00:42:37,090 --> 00:42:40,240
you have a tool that automatically

1004
00:42:38,830 --> 00:42:41,170
updates the content anthem there's no

1005
00:42:40,240 --> 00:42:43,540
way to turn that off

1006
00:42:41,170 --> 00:42:46,330
you can't properly find requests

1007
00:42:43,540 --> 00:42:49,360
smuggling vulnerabilities and also it

1008
00:42:46,330 --> 00:42:50,799
must not normalize requests because once

1009
00:42:49,360 --> 00:42:53,020
again that will lead to you failing to

1010
00:42:50,800 --> 00:42:55,630
find these vulnerabilities so in

1011
00:42:53,020 --> 00:42:57,310
particular this means that using Co to

1012
00:42:55,630 --> 00:42:59,640
replicate this issue may cause you

1013
00:42:57,310 --> 00:43:02,920
problems you'll want to use like like

1014
00:42:59,640 --> 00:43:05,020
netcat and then pipe it enter yeah you

1015
00:43:02,920 --> 00:43:06,280
using their cat or I've been SSL or

1016
00:43:05,020 --> 00:43:08,730
something like that if you have to try

1017
00:43:06,280 --> 00:43:13,540
and replicate this on the command line

1018
00:43:08,730 --> 00:43:15,700
also some companies like to force pen

1019
00:43:13,540 --> 00:43:19,210
testers to attack the target site

1020
00:43:15,700 --> 00:43:22,410
through a dedicated proxy just for the

1021
00:43:19,210 --> 00:43:25,000
pen testers and this is really bad for

1022
00:43:22,410 --> 00:43:26,740
requests smuggling four-for-one it will

1023
00:43:25,000 --> 00:43:29,380
prevent you finding the great smuggling

1024
00:43:26,740 --> 00:43:31,569
vulnerabilities that really do exist but

1025
00:43:29,380 --> 00:43:33,670
even more amusing Lee it will also

1026
00:43:31,570 --> 00:43:36,370
introduced extra vulnerabilities that

1027
00:43:33,670 --> 00:43:39,790
can only be used to exploit other pen

1028
00:43:36,370 --> 00:43:41,650
testers so please just target the

1029
00:43:39,790 --> 00:43:44,020
director please target the system

1030
00:43:41,650 --> 00:43:47,410
exactly as a normal user would be

1031
00:43:44,020 --> 00:43:49,900
accessing it as far as preventing these

1032
00:43:47,410 --> 00:43:52,450
goes the best possible strategy is for

1033
00:43:49,900 --> 00:43:54,940
the front-end to exclusively use HTTP to

1034
00:43:52,450 --> 00:43:56,259
to talk to all all back-end systems

1035
00:43:54,940 --> 00:44:00,670
because this is basically a

1036
00:43:56,260 --> 00:44:03,220
vulnerability with HTTP 1.1 if that's

1037
00:44:00,670 --> 00:44:05,770
not plausible the next best strategy

1038
00:44:03,220 --> 00:44:08,020
which I have seen successfully done is

1039
00:44:05,770 --> 00:44:10,509
to have the front end and normalize any

1040
00:44:08,020 --> 00:44:13,690
kind of ambiguity in request any kind of

1041
00:44:10,510 --> 00:44:15,520
unexpected data before rooting it on to

1042
00:44:13,690 --> 00:44:19,660
the back-end system and that strategy is

1043
00:44:15,520 --> 00:44:22,540
backed up by army RFC 7230

1044
00:44:19,660 --> 00:44:24,700
if you're forced to try and patch this

1045
00:44:22,540 --> 00:44:26,350
on the backend system the life is a bit

1046
00:44:24,700 --> 00:44:28,870
more difficult the only option you've

1047
00:44:26,350 --> 00:44:30,630
got is their fusion receiver a request

1048
00:44:28,870 --> 00:44:33,640
that could be considered to be ambiguous

1049
00:44:30,630 --> 00:44:36,040
you need to drop that request like just

1050
00:44:33,640 --> 00:44:37,720
send a 500 back and also drop the

1051
00:44:36,040 --> 00:44:39,210
connection so any poisoned data is

1052
00:44:37,720 --> 00:44:43,120
thrown out

1053
00:44:39,210 --> 00:44:45,100
there's loads of resources online the

1054
00:44:43,120 --> 00:44:47,080
white paper is the companion to this

1055
00:44:45,100 --> 00:44:50,020
presentation also for the first time

1056
00:44:47,080 --> 00:44:52,240
we've released a bunch of free in the

1057
00:44:50,020 --> 00:44:54,910
intentionally vulnerable websites so you

1058
00:44:52,240 --> 00:44:57,189
can practice exploiting this fist

1059
00:44:54,910 --> 00:45:00,160
vulnerability on real systems without

1060
00:44:57,190 --> 00:45:02,860
risks according causing side effects for

1061
00:45:00,160 --> 00:45:04,720
other users the source code for this

1062
00:45:02,860 --> 00:45:09,300
tool is online and both of the

1063
00:45:04,720 --> 00:45:09,299
references are well worth of eat as well

1064
00:45:09,330 --> 00:45:15,160
so the three key things to take away are

1065
00:45:12,820 --> 00:45:16,780
the HTTP request smuggling is real as

1066
00:45:15,160 --> 00:45:17,339
much as we might not want to think about

1067
00:45:16,780 --> 00:45:20,770
it

1068
00:45:17,340 --> 00:45:23,250
HTTP 1.1 pausing is security critical

1069
00:45:20,770 --> 00:45:25,900
and must be audited in service and

1070
00:45:23,250 --> 00:45:28,510
detection doesn't have to be dangerous

1071
00:45:25,900 --> 00:45:30,670
I'm going to take four minister's

1072
00:45:28,510 --> 00:45:32,500
questions now and if you have any more

1073
00:45:30,670 --> 00:45:33,610
after that you can come and speak to me

1074
00:45:32,500 --> 00:45:35,650
out in the back or chat me an email

1075
00:45:33,610 --> 00:45:37,530
don't forget to follow me on Twitter

1076
00:45:35,650 --> 00:45:41,949
thank you for listening

1077
00:45:37,530 --> 00:45:41,949
[Applause]

1078
00:45:46,800 --> 00:45:52,780
Thanks any questions there was a the

1079
00:45:50,020 --> 00:45:56,490
dursa microphones around the room I have

1080
00:45:52,780 --> 00:45:58,990
a question I'm interested to know I

1081
00:45:56,490 --> 00:46:00,520
haven't quite processed all this is a

1082
00:45:58,990 --> 00:46:02,200
lot of information and thank you that's

1083
00:46:00,520 --> 00:46:03,580
really awesome one thing that I was

1084
00:46:02,200 --> 00:46:04,779
thinking about that you didn't talk

1085
00:46:03,580 --> 00:46:06,369
about I don't know if you tried we

1086
00:46:04,780 --> 00:46:10,660
looked into it this at all is it

1087
00:46:06,369 --> 00:46:12,760
possible to trigger somebody to initiate

1088
00:46:10,660 --> 00:46:14,348
a request smuggling attack themselves

1089
00:46:12,760 --> 00:46:16,540
through a request smuggling attacks so

1090
00:46:14,349 --> 00:46:18,430
could you for instance cause somebody to

1091
00:46:16,540 --> 00:46:20,590
issue a request for something that

1092
00:46:18,430 --> 00:46:23,500
reveals sense of information in the

1093
00:46:20,590 --> 00:46:25,300
response and then requests muggles to

1094
00:46:23,500 --> 00:46:26,770
somewhere else and possibly if it's a

1095
00:46:25,300 --> 00:46:29,470
low traffic site you could be the one

1096
00:46:26,770 --> 00:46:31,240
who gets affected by that and receive

1097
00:46:29,470 --> 00:46:33,520
the response with a sense of information

1098
00:46:31,240 --> 00:46:35,459
is that have you thought about that is

1099
00:46:33,520 --> 00:46:39,580
that am i thinking about this wrong I

1100
00:46:35,460 --> 00:46:42,490
think I did too right so the question is

1101
00:46:39,580 --> 00:46:44,710
can you trigger can you do a request

1102
00:46:42,490 --> 00:46:46,629
modeling that creates a knock-on effect

1103
00:46:44,710 --> 00:46:49,090
that makes someone else to request

1104
00:46:46,630 --> 00:46:51,940
smuggling on the next request I have

1105
00:46:49,090 --> 00:46:55,390
seen this happening but I've only seen

1106
00:46:51,940 --> 00:47:00,670
it happening happening very rarely I

1107
00:46:55,390 --> 00:47:02,670
think yes so if it is if it's impossible

1108
00:47:00,670 --> 00:47:08,820
but I've never been able to successfully

1109
00:47:02,670 --> 00:47:08,820
trigger it on a real system thank you

1110
00:47:09,420 --> 00:47:14,530
question over here yep

1111
00:47:12,490 --> 00:47:16,689
I was wondering if you know that you

1112
00:47:14,530 --> 00:47:18,250
were detected either in the discovery or

1113
00:47:16,690 --> 00:47:20,619
the attack phases of this kind of

1114
00:47:18,250 --> 00:47:25,119
research and if so how that happened

1115
00:47:20,619 --> 00:47:27,010
what they did I didn't receive any

1116
00:47:25,119 --> 00:47:31,089
evidence that anyone that noticed that I

1117
00:47:27,010 --> 00:47:35,290
was doing these attacks as far as I

1118
00:47:31,089 --> 00:47:38,349
could tell we I didn't get IP bans met

1119
00:47:35,290 --> 00:47:41,259
anywhere this time around yeah I think

1120
00:47:38,349 --> 00:47:44,080
that attack is probably relatively

1121
00:47:41,260 --> 00:47:46,480
tricky to detect and the current

1122
00:47:44,080 --> 00:47:48,150
knowledge of it is is just practically

1123
00:47:46,480 --> 00:47:51,940
non-existent so people wouldn't know

1124
00:47:48,150 --> 00:47:53,800
what was happening anyway like if you

1125
00:47:51,940 --> 00:47:55,330
try and debug this from server logs

1126
00:47:53,800 --> 00:47:57,609
you're gonna have a really hard time

1127
00:47:55,330 --> 00:47:58,670
figuring out what on earth is happening

1128
00:47:57,609 --> 00:48:02,480
your your

1129
00:47:58,670 --> 00:48:05,240
like TCP dump to stand the chance got

1130
00:48:02,480 --> 00:48:06,950
another question would stricter content

1131
00:48:05,240 --> 00:48:09,919
security policies as well as same origin

1132
00:48:06,950 --> 00:48:11,600
policies help reduce the viability of

1133
00:48:09,920 --> 00:48:15,260
this yes

1134
00:48:11,600 --> 00:48:17,779
CSP certainly makes exploiting this more

1135
00:48:15,260 --> 00:48:20,240
challenging as we saw with PayPal and

1136
00:48:17,780 --> 00:48:25,250
sub source integrity can also help make

1137
00:48:20,240 --> 00:48:27,379
this harder to exploit but neither of

1138
00:48:25,250 --> 00:48:34,610
neither of those will render it

1139
00:48:27,380 --> 00:48:37,640
completely unexploited all be more yeah

1140
00:48:34,610 --> 00:48:40,010
the limitation you mentioned with Amina

1141
00:48:37,640 --> 00:48:43,339
at the first ampersand a lot of servers

1142
00:48:40,010 --> 00:48:46,400
will normalize multiplayer forum

1143
00:48:43,340 --> 00:48:49,220
requests did you yeah I actually some

1144
00:48:46,400 --> 00:48:50,570
actually spent quite a full time trying

1145
00:48:49,220 --> 00:48:53,870
to steal foxfire's just because it's a

1146
00:48:50,570 --> 00:48:56,030
cool kind of concept I didn't get

1147
00:48:53,870 --> 00:48:57,830
anywhere with multi-part but if I was

1148
00:48:56,030 --> 00:49:00,800
going to suggest a topic for further

1149
00:48:57,830 --> 00:49:04,360
research I feel maybe if you combine

1150
00:49:00,800 --> 00:49:09,440
multi-part encoding with unusual work

1151
00:49:04,360 --> 00:49:11,720
with unusual encodings that kind of

1152
00:49:09,440 --> 00:49:24,530
stuff that you might be able to get to

1153
00:49:11,720 --> 00:49:34,609
get somewhere that yeah sorry could you

1154
00:49:24,530 --> 00:49:37,970
be that slightly new into the mic I have

1155
00:49:34,610 --> 00:49:41,660
I have used request pipelining with it

1156
00:49:37,970 --> 00:49:45,230
it's seen my experience with it is that

1157
00:49:41,660 --> 00:49:47,899
it decreases determinism and it's also

1158
00:49:45,230 --> 00:49:50,660
very easy to kind of end up doing the

1159
00:49:47,900 --> 00:49:51,980
doing the attack just on yourself so you

1160
00:49:50,660 --> 00:49:53,750
think it's working when it's not really

1161
00:49:51,980 --> 00:49:56,270
working and just getting really confused

1162
00:49:53,750 --> 00:49:58,760
so my advice would be to in most of the

1163
00:49:56,270 --> 00:50:00,230
time stay away from pipelining I think

1164
00:49:58,760 --> 00:50:01,640
that's it for time but if you have any

1165
00:50:00,230 --> 00:50:03,270
more questions I'll be just at the back

1166
00:50:01,640 --> 00:50:05,949
thank you

1167
00:50:03,270 --> 00:50:05,949
[Applause]

