1
00:00:00,000 --> 00:00:05,580
good morning everyone welcome to SSO

2
00:00:03,179 --> 00:00:09,170
wars the token menace in South Pacific

3
00:00:05,580 --> 00:00:11,129
with Alex and Emeril and Alvaro Munoz

4
00:00:09,170 --> 00:00:13,080
before we begin we have a few brief

5
00:00:11,130 --> 00:00:14,880
announcements please stop by the

6
00:00:13,080 --> 00:00:16,949
business all located in the Mandalay Bay

7
00:00:14,880 --> 00:00:18,600
Oceanside and shoreline ballrooms on

8
00:00:16,949 --> 00:00:21,390
level 2 during the day and for the

9
00:00:18,600 --> 00:00:22,890
Welcome Reception at 5:30 tonight the

10
00:00:21,390 --> 00:00:25,439
black hat Arsenal is in the business

11
00:00:22,890 --> 00:00:28,730
hall on level 2 please join us for the

12
00:00:25,439 --> 00:00:31,349
Pony Awards in lagoon GHI at 6:30 today

13
00:00:28,730 --> 00:00:34,230
lunch will be available in Bayside a be

14
00:00:31,349 --> 00:00:36,480
from 1205 to 1:30 and don't forget the

15
00:00:34,230 --> 00:00:38,640
merchandise store on level 2 and session

16
00:00:36,480 --> 00:00:41,578
recordings from source knowledge they

17
00:00:38,640 --> 00:00:42,750
have a desk on every level please ensure

18
00:00:41,579 --> 00:00:44,280
that your phones have been placed on

19
00:00:42,750 --> 00:00:45,989
vibrate to avoid interrupting the

20
00:00:44,280 --> 00:00:56,010
presentation and now please welcome

21
00:00:45,989 --> 00:00:58,980
Alexander and Navarro so thank you very

22
00:00:56,010 --> 00:01:01,050
much so as he said my name is Xavier

23
00:00:58,980 --> 00:01:02,578
Romanov he's Alexander meteors we are

24
00:01:01,050 --> 00:01:05,369
both security researchers with

25
00:01:02,579 --> 00:01:06,930
microfocus fortify team we have a packed

26
00:01:05,369 --> 00:01:08,760
agenda for today because we actually

27
00:01:06,930 --> 00:01:11,010
submitted this talk as a 15 minutes

28
00:01:08,760 --> 00:01:14,189
brief embolic got acceptance of 25 1 so

29
00:01:11,010 --> 00:01:15,750
we had to discard a lot of stuff but we

30
00:01:14,189 --> 00:01:18,600
put that into a white paper that is

31
00:01:15,750 --> 00:01:22,320
going to be published today and host in

32
00:01:18,600 --> 00:01:24,320
the in the black hat survey so we will

33
00:01:22,320 --> 00:01:26,490
start with a brief introduction to what

34
00:01:24,320 --> 00:01:28,199
authentication tokens are and how are

35
00:01:26,490 --> 00:01:30,030
they connected to the located in

36
00:01:28,200 --> 00:01:31,500
syndication and then we will be

37
00:01:30,030 --> 00:01:33,990
presenting two vulnerabilities that we

38
00:01:31,500 --> 00:01:35,850
found in the net framework the first one

39
00:01:33,990 --> 00:01:38,280
is an injection vulnerability leading to

40
00:01:35,850 --> 00:01:39,929
a betrayal constructor invocation and we

41
00:01:38,280 --> 00:01:42,780
will see what's the impact of an

42
00:01:39,930 --> 00:01:45,689
arbitrary constructor and the second one

43
00:01:42,780 --> 00:01:48,630
will be XML signature by path that we

44
00:01:45,689 --> 00:01:52,350
found and how we apply that to bypass

45
00:01:48,630 --> 00:01:55,020
the some signature bypass that's what we

46
00:01:52,350 --> 00:01:57,630
call duty confusion and we will be

47
00:01:55,020 --> 00:01:59,310
presenting what microsoft frameworks and

48
00:01:57,630 --> 00:02:02,908
products are affected by this wound

49
00:01:59,310 --> 00:02:05,399
repeating so the legate authentication

50
00:02:02,909 --> 00:02:08,099
is nothing else that when the user

51
00:02:05,399 --> 00:02:09,899
access our protected resource the

52
00:02:08,098 --> 00:02:12,200
service provider who is serving this

53
00:02:09,899 --> 00:02:14,010
resource is not a handling our

54
00:02:12,200 --> 00:02:16,049
authentication itself

55
00:02:14,010 --> 00:02:17,549
right so it's basically delegating the

56
00:02:16,050 --> 00:02:21,360
authentication to someone else in this

57
00:02:17,550 --> 00:02:22,590
case we call it identity provided so the

58
00:02:21,360 --> 00:02:25,530
user will go to the identity provider

59
00:02:22,590 --> 00:02:27,900
will present the credentials and upon a

60
00:02:25,530 --> 00:02:30,150
body validation or verification of the

61
00:02:27,900 --> 00:02:32,069
credentials the identity provider will

62
00:02:30,150 --> 00:02:35,610
issue an authentication token for this

63
00:02:32,069 --> 00:02:37,980
user so there are multiple formats of

64
00:02:35,610 --> 00:02:40,290
authentication tokens right we have some

65
00:02:37,980 --> 00:02:42,298
all we have JSON web token we have

66
00:02:40,290 --> 00:02:46,170
simple web tokens we have many of them

67
00:02:42,299 --> 00:02:48,750
but all of them share some attributes

68
00:02:46,170 --> 00:02:50,488
and some properties and the most

69
00:02:48,750 --> 00:02:52,109
important one in most important one is

70
00:02:50,489 --> 00:02:56,340
the signature right because if we don't

71
00:02:52,109 --> 00:02:58,260
sign the authentication token anyone can

72
00:02:56,340 --> 00:03:01,200
change the token the user or any

73
00:02:58,260 --> 00:03:03,328
attacker in in the middle can change any

74
00:03:01,200 --> 00:03:05,069
of the properties or attributes of the

75
00:03:03,329 --> 00:03:07,410
authentication token and then just

76
00:03:05,069 --> 00:03:10,108
become anyone in the target system in

77
00:03:07,410 --> 00:03:12,299
this case in the service provider so we

78
00:03:10,109 --> 00:03:14,489
will be focusing our research in step

79
00:03:12,299 --> 00:03:17,010
number six that is when the service

80
00:03:14,489 --> 00:03:18,810
provider receives the authentication

81
00:03:17,010 --> 00:03:20,638
token and the reason for that is because

82
00:03:18,810 --> 00:03:22,950
we think that there are two very

83
00:03:20,639 --> 00:03:25,349
interesting attack vectors here the

84
00:03:22,950 --> 00:03:27,988
first one is when the service provider

85
00:03:25,349 --> 00:03:29,880
needs to parse and process the

86
00:03:27,989 --> 00:03:32,489
authentication tokens some of these

87
00:03:29,880 --> 00:03:34,859
attributes needs to be parsed before the

88
00:03:32,489 --> 00:03:37,530
signature is verified so if we can find

89
00:03:34,859 --> 00:03:40,470
one attribute that can lead to an

90
00:03:37,530 --> 00:03:42,959
injection vulnerability this will be

91
00:03:40,470 --> 00:03:46,680
before the verification of the signature

92
00:03:42,959 --> 00:03:48,989
the second vector will be what if we can

93
00:03:46,680 --> 00:03:50,430
go one step further and actually try to

94
00:03:48,989 --> 00:03:53,040
bypass the whole signature verification

95
00:03:50,430 --> 00:03:55,109
altogether so if we can do that we can

96
00:03:53,040 --> 00:03:57,418
basically craft any authentication

97
00:03:55,109 --> 00:03:59,519
tokens for any arbitrary user present

98
00:03:57,419 --> 00:04:02,099
that the service provider and get that

99
00:03:59,519 --> 00:04:03,690
accepted as a valid token so we will

100
00:04:02,099 --> 00:04:07,410
start with the token parts moon ability

101
00:04:03,690 --> 00:04:09,900
that we found in the net this case can

102
00:04:07,410 --> 00:04:13,440
be good illustration for token parsing

103
00:04:09,900 --> 00:04:14,970
vulnerabilities for signature

104
00:04:13,440 --> 00:04:19,380
purification server needs a couple

105
00:04:14,970 --> 00:04:22,680
object that represents algorithms crypto

106
00:04:19,380 --> 00:04:25,349
algorithms and usually crypto config

107
00:04:22,680 --> 00:04:27,720
create for name method is used for the

108
00:04:25,349 --> 00:04:30,240
creation but we notice that it

109
00:04:27,720 --> 00:04:35,460
does not restrict type names so we are

110
00:04:30,240 --> 00:04:38,280
able to call any no argument public

111
00:04:35,460 --> 00:04:40,650
constructor but you can ask it can it be

112
00:04:38,280 --> 00:04:42,510
dangerous if we cannot control any title

113
00:04:40,650 --> 00:04:45,479
but actually we can control some data

114
00:04:42,510 --> 00:04:49,640
for first of all type name itself is

115
00:04:45,480 --> 00:04:52,620
under our control also we can control

116
00:04:49,640 --> 00:05:00,630
some part of current Pacific context and

117
00:04:52,620 --> 00:05:02,940
some constructor can use it other

118
00:05:00,630 --> 00:05:06,390
question how we can reach this matters

119
00:05:02,940 --> 00:05:08,510
for example a system in the data model

120
00:05:06,390 --> 00:05:13,890
tokens GWT library

121
00:05:08,510 --> 00:05:21,210
passes a energy field from GWT header to

122
00:05:13,890 --> 00:05:24,120
it also algorithm attribute of signature

123
00:05:21,210 --> 00:05:29,609
method element from sam'l token goes

124
00:05:24,120 --> 00:05:32,790
without any restriction to it as well so

125
00:05:29,610 --> 00:05:34,560
we took to Microsoft servers SharePoint

126
00:05:32,790 --> 00:05:37,410
and Exchange server and try to explore

127
00:05:34,560 --> 00:05:40,200
exploit this problem there and here is

128
00:05:37,410 --> 00:05:44,180
the list of our results SharePoint

129
00:05:40,200 --> 00:05:47,310
tournament asks a different results for

130
00:05:44,180 --> 00:05:49,470
successful creation object and not using

131
00:05:47,310 --> 00:05:51,240
this we were able to get information

132
00:05:49,470 --> 00:05:53,370
about installed product and their

133
00:05:51,240 --> 00:05:55,979
versions also they could rise on tablet

134
00:05:53,370 --> 00:05:59,010
exception that can relate to on Daniel

135
00:05:55,979 --> 00:06:02,070
of services for exchange server ascend

136
00:05:59,010 --> 00:06:07,260
to duplicated user we were able to

137
00:06:02,070 --> 00:06:10,650
invoke any arbiter public no argument

138
00:06:07,260 --> 00:06:14,479
constructor from any dll or example from

139
00:06:10,650 --> 00:06:17,130
arbitrary folder local folder

140
00:06:14,479 --> 00:06:19,800
unfortunately we do not have time to

141
00:06:17,130 --> 00:06:23,010
cover it today but you can find all the

142
00:06:19,800 --> 00:06:25,440
testing out our white paper let's switch

143
00:06:23,010 --> 00:06:28,080
to our colleague rail and let's look how

144
00:06:25,440 --> 00:06:33,300
the entire signature if occassion can be

145
00:06:28,080 --> 00:06:37,109
bypassed but security assertion markup

146
00:06:33,300 --> 00:06:39,630
language or just sum of tokens has

147
00:06:37,110 --> 00:06:41,470
xml-based format and uses XML signature

148
00:06:39,630 --> 00:06:43,420
for integrity protection

149
00:06:41,470 --> 00:06:46,120
we can see simplified some token on the

150
00:06:43,420 --> 00:06:47,800
screen along with the identification

151
00:06:46,120 --> 00:06:50,200
information itself

152
00:06:47,800 --> 00:06:52,750
it contains signature element it should

153
00:06:50,200 --> 00:06:55,150
protect it from tampering this element

154
00:06:52,750 --> 00:06:59,350
contains three main parts signature

155
00:06:55,150 --> 00:07:01,270
itself and signature value Senate m4 has

156
00:06:59,350 --> 00:07:03,760
information how this signature should be

157
00:07:01,270 --> 00:07:06,250
verified and the most interesting

158
00:07:03,760 --> 00:07:08,020
element for our attack its key info and

159
00:07:06,250 --> 00:07:10,830
it presents key this should be used for

160
00:07:08,020 --> 00:07:10,830
signature verification

161
00:07:11,190 --> 00:07:15,700
let's review pout net implement

162
00:07:13,840 --> 00:07:18,849
signature verification for such tokens

163
00:07:15,700 --> 00:07:21,130
first of all we need to obtain him using

164
00:07:18,850 --> 00:07:23,620
key info element we can extract this key

165
00:07:21,130 --> 00:07:26,110
from it or use key reference and fetch

166
00:07:23,620 --> 00:07:28,570
key from some storage on the second step

167
00:07:26,110 --> 00:07:30,790
we will use this key for signature

168
00:07:28,570 --> 00:07:32,950
verification my please note

169
00:07:30,790 --> 00:07:36,070
positive results after this step only

170
00:07:32,950 --> 00:07:38,500
means that this specific token was

171
00:07:36,070 --> 00:07:40,810
saddened by this specific key and was

172
00:07:38,500 --> 00:07:42,580
not changed in additional to this we

173
00:07:40,810 --> 00:07:45,310
need to be sure that it was done by

174
00:07:42,580 --> 00:07:47,950
proper signing party so we are taking

175
00:07:45,310 --> 00:07:50,980
key in for element again and try to

176
00:07:47,950 --> 00:07:53,050
identify who has signed this token and

177
00:07:50,980 --> 00:07:57,040
of course the last step we will check it

178
00:07:53,050 --> 00:07:59,980
is expected sudden party or not she we

179
00:07:57,040 --> 00:08:02,950
highlighted the key steps for our attack

180
00:07:59,980 --> 00:08:04,540
so we are taking key info lament twice

181
00:08:02,950 --> 00:08:06,969
on different steps

182
00:08:04,540 --> 00:08:10,360
also we need different types of results

183
00:08:06,970 --> 00:08:15,730
on this step security key and security

184
00:08:10,360 --> 00:08:17,950
token so we will call two different

185
00:08:15,730 --> 00:08:20,430
matters resolve security key and is all

186
00:08:17,950 --> 00:08:23,680
security token on this diagram we can

187
00:08:20,430 --> 00:08:26,320
see the general idea of attack we need

188
00:08:23,680 --> 00:08:29,230
to craft keen for element in such way

189
00:08:26,320 --> 00:08:31,510
that we will get different results from

190
00:08:29,230 --> 00:08:33,700
resolve security key and entry so

191
00:08:31,510 --> 00:08:35,830
security token one will be used for

192
00:08:33,700 --> 00:08:41,349
signature verification and another for

193
00:08:35,830 --> 00:08:44,140
certification of shannon party in this

194
00:08:41,349 --> 00:08:46,870
case we will be able to use own key for

195
00:08:44,140 --> 00:08:49,240
signature calculation but server still

196
00:08:46,870 --> 00:08:51,820
in the define us as expected sign and

197
00:08:49,240 --> 00:08:53,530
party and we can bypass the whole

198
00:08:51,820 --> 00:08:55,140
signature verification and can create

199
00:08:53,530 --> 00:08:59,459
some token is any

200
00:08:55,140 --> 00:09:01,680
cremation this problem affects all

201
00:08:59,460 --> 00:09:06,240
places where in.net

202
00:09:01,680 --> 00:09:08,900
where XML signature issues including a

203
00:09:06,240 --> 00:09:12,450
product that works with some tokens

204
00:09:08,900 --> 00:09:17,430
let's review the key frame works of

205
00:09:12,450 --> 00:09:18,690
dotnet that use some token now so we

206
00:09:17,430 --> 00:09:23,099
will start with windows communication

207
00:09:18,690 --> 00:09:25,200
foundation which is or D or w CF which

208
00:09:23,100 --> 00:09:27,120
is a Microsoft framework to build web

209
00:09:25,200 --> 00:09:28,860
services right they follow the

210
00:09:27,120 --> 00:09:32,190
service-oriented architecture but what

211
00:09:28,860 --> 00:09:34,620
is interesting for us is that WCF web

212
00:09:32,190 --> 00:09:36,720
services will accept some old tokens for

213
00:09:34,620 --> 00:09:38,670
authenticating the the client right so

214
00:09:36,720 --> 00:09:40,470
the client can go and present valid

215
00:09:38,670 --> 00:09:42,780
credentials in the form of maybe user

216
00:09:40,470 --> 00:09:44,850
and password but also a valid say and

217
00:09:42,780 --> 00:09:48,990
sam'l token issued by an identity

218
00:09:44,850 --> 00:09:51,390
provider so the class that is

219
00:09:48,990 --> 00:09:54,180
responsible for handling sam'l tokens in

220
00:09:51,390 --> 00:09:56,730
the WC f is this sam'l assertion type

221
00:09:54,180 --> 00:09:58,500
and this is this piece of code you can

222
00:09:56,730 --> 00:10:00,360
see that there are two different method

223
00:09:58,500 --> 00:10:01,920
invocation one is resource activity key

224
00:10:00,360 --> 00:10:03,900
and the other one is resource activity

225
00:10:01,920 --> 00:10:06,300
token but both of them take the same

226
00:10:03,900 --> 00:10:08,939
parameter right the key identifier

227
00:10:06,300 --> 00:10:10,920
parameter contains the whole team for

228
00:10:08,940 --> 00:10:13,230
section that is all the different keys

229
00:10:10,920 --> 00:10:15,209
in the King for section the first one

230
00:10:13,230 --> 00:10:16,620
will return the abbreviation T that is

231
00:10:15,210 --> 00:10:18,900
the key that will be used to verify the

232
00:10:16,620 --> 00:10:21,090
signature and the second one will return

233
00:10:18,900 --> 00:10:25,170
the signing token or the security token

234
00:10:21,090 --> 00:10:27,630
that is used to represent somehow the

235
00:10:25,170 --> 00:10:30,900
the signing party or the identity

236
00:10:27,630 --> 00:10:33,480
provider so we'll focus in the first one

237
00:10:30,900 --> 00:10:35,370
when resolving the key what we will be

238
00:10:33,480 --> 00:10:37,230
doing is what we call depth first who

239
00:10:35,370 --> 00:10:38,880
will be first iterating through all the

240
00:10:37,230 --> 00:10:42,030
different keys in the key flow section

241
00:10:38,880 --> 00:10:44,070
and for each of them we will be invoking

242
00:10:42,030 --> 00:10:46,470
this drive resolve security key that

243
00:10:44,070 --> 00:10:49,200
will basically try a number of resolvers

244
00:10:46,470 --> 00:10:50,760
for those kids right so first we iterate

245
00:10:49,200 --> 00:10:52,980
through all the keys then we iterate

246
00:10:50,760 --> 00:10:54,810
through all the resolvers now for the

247
00:10:52,980 --> 00:10:57,270
token resolution the approaches is

248
00:10:54,810 --> 00:11:00,119
slightly different instead of iterating

249
00:10:57,270 --> 00:11:01,800
first row the keys it will iterate first

250
00:11:00,120 --> 00:11:03,330
through all the resolvers it will try

251
00:11:01,800 --> 00:11:05,370
all the resolvers and then for it to

252
00:11:03,330 --> 00:11:08,430
resolve very good it will try all the

253
00:11:05,370 --> 00:11:09,000
keys so what we can do is actually abuse

254
00:11:08,430 --> 00:11:12,180
that

255
00:11:09,000 --> 00:11:13,980
even if this difference is very small we

256
00:11:12,180 --> 00:11:16,439
will end up visiting all the

257
00:11:13,980 --> 00:11:18,629
combinations of keys and resolvers but

258
00:11:16,439 --> 00:11:20,849
in different order right so we cannot

259
00:11:18,629 --> 00:11:22,500
use that and this is what will we we

260
00:11:20,850 --> 00:11:26,339
will be doing for attacking for example

261
00:11:22,500 --> 00:11:28,199
WCF web services like exchange so first

262
00:11:26,339 --> 00:11:30,720
of all we can modify an existing samo

263
00:11:28,199 --> 00:11:33,420
token or create one from scratch then we

264
00:11:30,720 --> 00:11:35,639
will create a pair of RSA keys with

265
00:11:33,420 --> 00:11:38,729
public/private keys and then we will use

266
00:11:35,639 --> 00:11:41,430
the private one to sign the token then

267
00:11:38,730 --> 00:11:44,819
we will send both the public key for

268
00:11:41,430 --> 00:11:46,319
this RSA paper and also the certificate

269
00:11:44,819 --> 00:11:48,930
or the identifiers from identity

270
00:11:46,319 --> 00:11:50,459
provider so we will have something like

271
00:11:48,930 --> 00:11:52,349
this in the key info section right first

272
00:11:50,459 --> 00:11:55,050
the attacker RSA key and then the

273
00:11:52,350 --> 00:11:56,699
expected key identifier so the resource

274
00:11:55,050 --> 00:11:58,680
security key will iterate through all

275
00:11:56,699 --> 00:12:00,569
the keys first then it will take the

276
00:11:58,680 --> 00:12:03,810
attacker 1 and then it will try all the

277
00:12:00,569 --> 00:12:05,639
resolvers the third one will succeed and

278
00:12:03,810 --> 00:12:08,638
then it will return the public key from

279
00:12:05,639 --> 00:12:10,079
this RSA per since really sign now we're

280
00:12:08,639 --> 00:12:11,670
talking with the private one the

281
00:12:10,079 --> 00:12:13,680
signature verification will be

282
00:12:11,670 --> 00:12:16,079
successful and we will bypass this

283
00:12:13,680 --> 00:12:18,388
authentication now when we solve in the

284
00:12:16,079 --> 00:12:19,859
security token because we are going to

285
00:12:18,389 --> 00:12:21,389
iterate first through the route solvers

286
00:12:19,860 --> 00:12:23,189
we will start with the first one and

287
00:12:21,389 --> 00:12:25,649
then try all the keys for this

288
00:12:23,189 --> 00:12:28,079
particular resolver so the first

289
00:12:25,649 --> 00:12:30,720
resolver doesn't know how to resolve an

290
00:12:28,079 --> 00:12:32,399
RSA key so it will fail and will move to

291
00:12:30,720 --> 00:12:34,230
the next one the next one is the

292
00:12:32,399 --> 00:12:37,079
identity provider certificate so it will

293
00:12:34,230 --> 00:12:38,550
succeed will return that and then the

294
00:12:37,079 --> 00:12:40,109
first one will be used for signature

295
00:12:38,550 --> 00:12:41,819
verification the second one will be used

296
00:12:40,110 --> 00:12:43,559
to authenticate the signing party and

297
00:12:41,819 --> 00:12:46,649
therefore we will be able to bypass them

298
00:12:43,559 --> 00:12:49,980
the process so this is how it looks in

299
00:12:46,649 --> 00:12:52,319
the XML sam'l assertion the first

300
00:12:49,980 --> 00:12:54,029
element in jello is the injected key in

301
00:12:52,319 --> 00:12:56,519
this case we are using an RSA key we can

302
00:12:54,029 --> 00:12:58,769
also use elliptic curve keys or

303
00:12:56,519 --> 00:13:00,449
symmetric keys and the second one in

304
00:12:58,769 --> 00:13:03,000
green is the expected

305
00:13:00,449 --> 00:13:06,389
identity provider certificate that the

306
00:13:03,000 --> 00:13:08,399
server trusts and expects so let's see

307
00:13:06,389 --> 00:13:10,860
that in action we will be actually

308
00:13:08,399 --> 00:13:14,069
taking over any account in exchange by

309
00:13:10,860 --> 00:13:16,589
abusing the exchange web services so

310
00:13:14,069 --> 00:13:19,170
instead of using a real client such as

311
00:13:16,589 --> 00:13:22,120
Outlook or link we decided to actually

312
00:13:19,170 --> 00:13:25,060
create our own client

313
00:13:22,120 --> 00:13:27,190
in order to make them demo more more

314
00:13:25,060 --> 00:13:31,569
visual and more is simple to follow so

315
00:13:27,190 --> 00:13:33,900
we will be intercepting so we have burp

316
00:13:31,570 --> 00:13:36,130
here that is a an interception proxy

317
00:13:33,900 --> 00:13:39,030
what we are going to do is we are going

318
00:13:36,130 --> 00:13:41,380
to intercept the request from the client

319
00:13:39,030 --> 00:13:44,079
so this is our simple client is

320
00:13:41,380 --> 00:13:46,360
basically going to request the mail tips

321
00:13:44,080 --> 00:13:49,300
or the mail item for example could be

322
00:13:46,360 --> 00:13:50,980
another valid request for user 1 right

323
00:13:49,300 --> 00:13:55,180
and it's going to authenticate as user 1

324
00:13:50,980 --> 00:13:57,160
and ask for their mail items so we will

325
00:13:55,180 --> 00:13:59,680
send that and we will intercept the

326
00:13:57,160 --> 00:14:02,319
request now we will be sending the

327
00:13:59,680 --> 00:14:06,400
request to repeater that is an easy way

328
00:14:02,320 --> 00:14:11,170
to modify the request and if we switch

329
00:14:06,400 --> 00:14:13,840
to the XML view we will see the sam'l

330
00:14:11,170 --> 00:14:16,000
assertion and for example the subject is

331
00:14:13,840 --> 00:14:17,950
the user 1 but we will be replacing all

332
00:14:16,000 --> 00:14:19,750
instances of user 1 with administrator

333
00:14:17,950 --> 00:14:21,340
now the attack is to become

334
00:14:19,750 --> 00:14:24,580
administrator's and with administrator

335
00:14:21,340 --> 00:14:26,650
mail tips now because we are not

336
00:14:24,580 --> 00:14:27,970
changing the signature if anyone do

337
00:14:26,650 --> 00:14:29,829
these kind of attacks is going to fail

338
00:14:27,970 --> 00:14:32,110
because the signature is no longer much

339
00:14:29,830 --> 00:14:34,270
in the content of the of the assertion

340
00:14:32,110 --> 00:14:36,730
and the body of a of the request so if

341
00:14:34,270 --> 00:14:39,189
we send that we get an error that is the

342
00:14:36,730 --> 00:14:40,600
expected result we modify we tampered

343
00:14:39,190 --> 00:14:43,150
with the request with assertion and

344
00:14:40,600 --> 00:14:46,900
that's not valid now if we use one

345
00:14:43,150 --> 00:14:49,569
better plugin that we developed but will

346
00:14:46,900 --> 00:14:52,120
allow us to resign the token so as you

347
00:14:49,570 --> 00:14:55,140
can see here in the King 4 section we

348
00:14:52,120 --> 00:14:58,120
only have the original identity provider

349
00:14:55,140 --> 00:15:01,000
certificate but now we click on resign

350
00:14:58,120 --> 00:15:03,520
with RSA key we will be basically

351
00:15:01,000 --> 00:15:06,340
resigning it with our own private RSA

352
00:15:03,520 --> 00:15:08,260
key and then appending the public one to

353
00:15:06,340 --> 00:15:10,390
the key infrastructure so we have the

354
00:15:08,260 --> 00:15:12,819
original one identity provider 1 but

355
00:15:10,390 --> 00:15:14,500
before that we have the RSA key that we

356
00:15:12,820 --> 00:15:16,780
use to resign and this one will be used

357
00:15:14,500 --> 00:15:19,600
for verifying the signature so with that

358
00:15:16,780 --> 00:15:22,780
we send the request we get 200

359
00:15:19,600 --> 00:15:25,500
successful response and we are able to

360
00:15:22,780 --> 00:15:30,750
get the mail tips from the administrator

361
00:15:25,500 --> 00:15:34,200
this is successful no error response and

362
00:15:30,750 --> 00:15:34,200
the attack was successful

363
00:15:36,910 --> 00:15:42,520
okay so bear in mind that this was a we

364
00:15:40,370 --> 00:15:45,740
were attacking an on-premise service

365
00:15:42,520 --> 00:15:48,949
on-premise exchange server but this was

366
00:15:45,740 --> 00:15:51,620
valid for the cloud person right for

367
00:15:48,950 --> 00:15:54,380
office 365 so we were able to actually

368
00:15:51,620 --> 00:16:00,050
access any mail from anybody using

369
00:15:54,380 --> 00:16:03,050
office 365 now we will be reviewing

370
00:16:00,050 --> 00:16:05,420
Windows identity foundation for those of

371
00:16:03,050 --> 00:16:08,630
you that are not familiar with wif is

372
00:16:05,420 --> 00:16:11,360
basically a framework for for developers

373
00:16:08,630 --> 00:16:13,280
to integrate with identity providers so

374
00:16:11,360 --> 00:16:15,590
it will take care of all the process of

375
00:16:13,280 --> 00:16:17,780
handling the authentication tokens

376
00:16:15,590 --> 00:16:20,330
verifying that organs are extracting the

377
00:16:17,780 --> 00:16:22,280
claims and then providing the claims to

378
00:16:20,330 --> 00:16:26,990
the application to take a claim or

379
00:16:22,280 --> 00:16:30,050
identity based decisions so wif uses a

380
00:16:26,990 --> 00:16:34,130
different set of resolvers but what

381
00:16:30,050 --> 00:16:36,349
interesting in wif is that for key

382
00:16:34,130 --> 00:16:38,480
resolution it will only try to resolve

383
00:16:36,350 --> 00:16:41,060
the first element in the key info

384
00:16:38,480 --> 00:16:43,250
section but for token resolution it will

385
00:16:41,060 --> 00:16:45,739
try to iterate through all the different

386
00:16:43,250 --> 00:16:47,870
elements in the key info section so we

387
00:16:45,740 --> 00:16:52,040
can abuse that by providing a key that

388
00:16:47,870 --> 00:16:59,030
is supported by the key resolver but not

389
00:16:52,040 --> 00:17:01,040
for the token resolver so wif uses this

390
00:16:59,030 --> 00:17:04,790
token is your token resolver which is

391
00:17:01,040 --> 00:17:07,460
secure because it handles both tokens

392
00:17:04,790 --> 00:17:09,560
and keys in a similar way consistent way

393
00:17:07,460 --> 00:17:12,380
and then we can't abuse this resolver

394
00:17:09,560 --> 00:17:14,869
however if it fails to resolve the key

395
00:17:12,380 --> 00:17:17,930
or token it will move to the next

396
00:17:14,869 --> 00:17:21,500
resolver which is this 509 certificate

397
00:17:17,930 --> 00:17:22,640
store a token resolver now this one is

398
00:17:21,500 --> 00:17:23,750
interesting because when resolving

399
00:17:22,640 --> 00:17:26,750
security keys

400
00:17:23,750 --> 00:17:28,640
it supports encrypted symmetric keys but

401
00:17:26,750 --> 00:17:32,440
when resolving security tokens it does

402
00:17:28,640 --> 00:17:36,290
not support encrypted symmetric keys so

403
00:17:32,440 --> 00:17:38,510
in order for the server or the

404
00:17:36,290 --> 00:17:41,210
application to decrypt our encrypted

405
00:17:38,510 --> 00:17:43,090
symmetric key it needs to use a private

406
00:17:41,210 --> 00:17:46,080
key that is stored in a specific

407
00:17:43,090 --> 00:17:47,970
certificate storage in the server

408
00:17:46,080 --> 00:17:50,158
for the attacker needs to get access to

409
00:17:47,970 --> 00:17:51,960
the public key from that certificate in

410
00:17:50,159 --> 00:17:54,870
order to encrypt the symmetric key

411
00:17:51,960 --> 00:17:56,610
that's a strong limitation but maybe in

412
00:17:54,870 --> 00:17:59,399
some cases for example the certificates

413
00:17:56,610 --> 00:18:01,469
are reused for the SSL traffic and then

414
00:17:59,399 --> 00:18:04,799
attacker can get the public key from the

415
00:18:01,470 --> 00:18:06,240
certificate for the SSL traffic so if

416
00:18:04,799 --> 00:18:08,668
the attacker get access to this

417
00:18:06,240 --> 00:18:11,340
certificate the attack flow is as

418
00:18:08,669 --> 00:18:13,649
follows the attacker can change or

419
00:18:11,340 --> 00:18:16,199
modify an existing claims then it will

420
00:18:13,649 --> 00:18:18,809
use a symmetric key to resign the token

421
00:18:16,200 --> 00:18:21,389
and then it will encrypt that symmetric

422
00:18:18,809 --> 00:18:24,450
key using the certificate from the

423
00:18:21,389 --> 00:18:26,370
server now it will include both the

424
00:18:24,450 --> 00:18:27,779
encrypted key but also the original

425
00:18:26,370 --> 00:18:30,209
identity provider and the process is

426
00:18:27,779 --> 00:18:32,700
very similar it will lead to this

427
00:18:30,210 --> 00:18:34,409
duplication of keys where the first one

428
00:18:32,700 --> 00:18:36,059
that is attacker control will be used

429
00:18:34,409 --> 00:18:38,690
for signature purification and the

430
00:18:36,059 --> 00:18:41,428
second one that is the identity provider

431
00:18:38,690 --> 00:18:44,700
trusted certificate will be used for

432
00:18:41,429 --> 00:18:47,010
authentication of the signing portal so

433
00:18:44,700 --> 00:18:49,320
that was the default configuration for

434
00:18:47,010 --> 00:18:51,539
wif now if you are building an

435
00:18:49,320 --> 00:18:53,129
application using WF you can customize

436
00:18:51,539 --> 00:18:55,080
you can change for example the location

437
00:18:53,130 --> 00:18:57,330
of that certificate the storage but you

438
00:18:55,080 --> 00:18:59,279
can also for example customize the

439
00:18:57,330 --> 00:19:02,129
resolvers and that's exactly what

440
00:18:59,279 --> 00:19:04,860
serpent is doing so SharePoint uses wif

441
00:19:02,130 --> 00:19:07,500
to handle the event occasion tokens but

442
00:19:04,860 --> 00:19:09,899
it uses a custom resolver and the

443
00:19:07,500 --> 00:19:12,450
serpent resolver when resolving security

444
00:19:09,899 --> 00:19:16,139
keys support things like a symmetric key

445
00:19:12,450 --> 00:19:17,940
RSA keys elliptic curve keys but when

446
00:19:16,139 --> 00:19:20,820
resolving security token it does not and

447
00:19:17,940 --> 00:19:24,120
obviously we cannot use that therefore

448
00:19:20,820 --> 00:19:26,730
we can attack cell point which is using

449
00:19:24,120 --> 00:19:28,908
waf without the limitations of value AF

450
00:19:26,730 --> 00:19:32,010
and with that we were able to attack and

451
00:19:28,909 --> 00:19:37,340
get access to any serpent again on

452
00:19:32,010 --> 00:19:40,019
premise and also office 365 so

453
00:19:37,340 --> 00:19:41,730
conclusions and takeaways first of all

454
00:19:40,019 --> 00:19:43,950
we are not saying that sam'l or

455
00:19:41,730 --> 00:19:47,070
WS Federation are insecure protocols

456
00:19:43,950 --> 00:19:48,860
these are in this case a design flaw in

457
00:19:47,070 --> 00:19:53,039
the implementation is pacifically in

458
00:19:48,860 --> 00:19:57,809
the.net implementation of the XML

459
00:19:53,039 --> 00:19:59,770
signature verifiers actually their root

460
00:19:57,809 --> 00:20:01,720
problem here was that we

461
00:19:59,770 --> 00:20:04,830
these two different methods which were

462
00:20:01,720 --> 00:20:06,970
taking user control data and there were

463
00:20:04,830 --> 00:20:08,949
inconsistent in the sense that we were

464
00:20:06,970 --> 00:20:10,840
able to force them to return different

465
00:20:08,950 --> 00:20:12,730
objects so that's very interesting from

466
00:20:10,840 --> 00:20:14,830
a security standpoint if you are

467
00:20:12,730 --> 00:20:18,070
reviewing code you want to look into

468
00:20:14,830 --> 00:20:20,020
this kind of methods but for example if

469
00:20:18,070 --> 00:20:22,300
you are writing your own application

470
00:20:20,020 --> 00:20:23,650
that integrate with wif you want to make

471
00:20:22,300 --> 00:20:25,419
sure that if you are customizing the

472
00:20:23,650 --> 00:20:28,230
resolvers they are consistent and they

473
00:20:25,420 --> 00:20:31,480
are not returning different elements

474
00:20:28,230 --> 00:20:34,179
also we focus our research in dotnet one

475
00:20:31,480 --> 00:20:36,880
of the reasons is that dotnet was secure

476
00:20:34,179 --> 00:20:40,809
for all the previous attacks and for

477
00:20:36,880 --> 00:20:42,400
sam'l tokens but we did not spend a lot

478
00:20:40,809 --> 00:20:43,990
of time or actually we didn't really

479
00:20:42,400 --> 00:20:47,260
look into other languages and frameworks

480
00:20:43,990 --> 00:20:49,000
so we don't expect the same design flow

481
00:20:47,260 --> 00:20:52,360
to exist in other languages because

482
00:20:49,000 --> 00:20:54,220
somehow dotnet a specific but similar

483
00:20:52,360 --> 00:20:56,919
thing similar pros can appear in other

484
00:20:54,220 --> 00:20:59,080
languages and frameworks even in dotnet

485
00:20:56,920 --> 00:21:00,940
remember this is a pack that is

486
00:20:59,080 --> 00:21:02,860
affecting the verification of XML

487
00:21:00,940 --> 00:21:05,140
signature not only exception as sam'l

488
00:21:02,860 --> 00:21:06,340
assertions so even in dotnet XML

489
00:21:05,140 --> 00:21:08,920
signature is used for many other

490
00:21:06,340 --> 00:21:12,010
purposes and we found a couple of cases

491
00:21:08,920 --> 00:21:13,390
where it was also insecure we reported

492
00:21:12,010 --> 00:21:15,790
that to Microsoft and they patched that

493
00:21:13,390 --> 00:21:17,320
but there may be others so the main

494
00:21:15,790 --> 00:21:18,040
takeaway is patch but as soon as

495
00:21:17,320 --> 00:21:20,110
possible

496
00:21:18,040 --> 00:21:22,300
and follow Microsoft recommendations for

497
00:21:20,110 --> 00:21:25,178
this CV because for example for sell

498
00:21:22,300 --> 00:21:26,889
point you need to update the sir point

499
00:21:25,179 --> 00:21:28,540
version but also need to update some of

500
00:21:26,890 --> 00:21:31,650
the dotnet framework libraries in the

501
00:21:28,540 --> 00:21:34,870
system so it's not straightforward

502
00:21:31,650 --> 00:21:36,700
also we are releasing the burr plugin

503
00:21:34,870 --> 00:21:38,469
that we developed for our internal

504
00:21:36,700 --> 00:21:41,230
testing and so basically will allow you

505
00:21:38,470 --> 00:21:43,960
to intercept as a sam'l tokens and

506
00:21:41,230 --> 00:21:46,510
resign them using either and a symmetric

507
00:21:43,960 --> 00:21:48,960
RSA key or the public key from a

508
00:21:46,510 --> 00:21:51,220
certificate in the case of wif

509
00:21:48,960 --> 00:21:54,730
applications if you can get access to

510
00:21:51,220 --> 00:21:56,710
that certificate and with that if you

511
00:21:54,730 --> 00:21:58,510
have any questions we still have four

512
00:21:56,710 --> 00:22:00,100
minutes otherwise we can go to the

513
00:21:58,510 --> 00:22:02,170
rubber room or you can just send out

514
00:22:00,100 --> 00:22:06,000
your questions to our Twitter account

515
00:22:02,170 --> 00:22:07,890
and we will be happy to do answer them

516
00:22:06,000 --> 00:22:09,950
thank you

517
00:22:07,890 --> 00:22:09,950
you

518
00:22:11,650 --> 00:22:13,949
[Applause]

