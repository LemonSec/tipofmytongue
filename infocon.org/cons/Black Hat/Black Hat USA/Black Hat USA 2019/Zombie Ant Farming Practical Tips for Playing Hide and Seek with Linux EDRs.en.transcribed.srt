1
00:00:00,030 --> 00:00:04,230
welcome to zombie ant farming practical

2
00:00:02,760 --> 00:00:05,730
tips for playing hide-and-seek with

3
00:00:04,230 --> 00:00:09,389
Linux EDRs

4
00:00:05,730 --> 00:00:12,719
you're in breakers GHI here to listen to

5
00:00:09,389 --> 00:00:14,790
dimitri schnitz cough before we begin

6
00:00:12,719 --> 00:00:16,320
just a few brief notes please stop by

7
00:00:14,790 --> 00:00:18,779
the business hall located in Mandalay

8
00:00:16,320 --> 00:00:21,359
Bay Oceanside and Shore learn shoreline

9
00:00:18,779 --> 00:00:22,830
ballrooms on level 2 also don't forget

10
00:00:21,359 --> 00:00:25,859
the black hat Arsenal is in the business

11
00:00:22,830 --> 00:00:26,419
hall on level 2 of course turn off your

12
00:00:25,859 --> 00:00:31,140
phones

13
00:00:26,420 --> 00:00:33,840
welcome to be true thank you everybody

14
00:00:31,140 --> 00:00:36,930
and I really appreciate you guys coming

15
00:00:33,840 --> 00:00:39,329
here you have choices appreciate that so

16
00:00:36,930 --> 00:00:43,860
my name is Demetrius Nash Cove I am the

17
00:00:39,329 --> 00:00:47,399
red team operator 4x4 shred and as part

18
00:00:43,860 --> 00:00:50,039
of my work duties I help my team with

19
00:00:47,399 --> 00:00:52,350
tooling testing and doing some research

20
00:00:50,039 --> 00:00:54,180
and I'm interested in all things

21
00:00:52,350 --> 00:00:56,340
offensive and this talk is going to be

22
00:00:54,180 --> 00:00:58,710
from the perspective of the red team

23
00:00:56,340 --> 00:01:00,899
operator we're going to look at what

24
00:00:58,710 --> 00:01:03,359
challenges red team operators have when

25
00:01:00,899 --> 00:01:04,890
they evade EDRs on Linux we're gonna

26
00:01:03,359 --> 00:01:08,939
talk about the technology we're gonna

27
00:01:04,890 --> 00:01:11,580
give you some practical tools tips and

28
00:01:08,939 --> 00:01:14,279
we're gonna release a toolkit that will

29
00:01:11,580 --> 00:01:17,640
help you to do the same but I really

30
00:01:14,280 --> 00:01:20,970
wanted to start with setting the server

31
00:01:17,640 --> 00:01:24,150
like a context of our talk we're

32
00:01:20,970 --> 00:01:25,979
focusing on Linux because it matters the

33
00:01:24,150 --> 00:01:29,930
reality of today's deployment and data

34
00:01:25,979 --> 00:01:32,880
centers the data and other things just

35
00:01:29,930 --> 00:01:35,759
point us to the fact that Linux runs

36
00:01:32,880 --> 00:01:37,048
about 90% of cloud more clothes and no

37
00:01:35,759 --> 00:01:39,420
matter what you do you're probably gonna

38
00:01:37,049 --> 00:01:41,790
touch as an attacker is the right team

39
00:01:39,420 --> 00:01:44,820
of operator you can touch Linux at some

40
00:01:41,790 --> 00:01:48,270
point the attackers and Red Team

41
00:01:44,820 --> 00:01:52,859
operators that do adversarial emulation

42
00:01:48,270 --> 00:01:55,320
they follow the path to our why

43
00:01:52,860 --> 00:01:58,500
essential they need to get data and a

44
00:01:55,320 --> 00:02:03,289
lot of times the data is on Linux and so

45
00:01:58,500 --> 00:02:07,590
we're gonna make our focus there now

46
00:02:03,290 --> 00:02:09,840
because attacker ends up on Linux

47
00:02:07,590 --> 00:02:12,690
obviously the defense also follows the

48
00:02:09,840 --> 00:02:13,740
attacker and we've seen the resurgence

49
00:02:12,690 --> 00:02:16,350
of endpoint

50
00:02:13,740 --> 00:02:18,780
action and response technology in Linux

51
00:02:16,350 --> 00:02:21,810
operating systems and that's what our

52
00:02:18,780 --> 00:02:24,960
focus is we as operators will have to

53
00:02:21,810 --> 00:02:28,110
respond to that challenge so imagine

54
00:02:24,960 --> 00:02:30,120
that you as an operator and end up being

55
00:02:28,110 --> 00:02:33,300
on Linux machine you drop there and

56
00:02:30,120 --> 00:02:35,640
let's say everything is ok you are not

57
00:02:33,300 --> 00:02:37,680
caught you sit quiet and tight and

58
00:02:35,640 --> 00:02:39,989
figure out what's going on and in 15

59
00:02:37,680 --> 00:02:43,700
minutes your payload doesn't work you're

60
00:02:39,990 --> 00:02:45,930
evacuated and you're pretty much boot

61
00:02:43,700 --> 00:02:49,380
booted you're you're booted out of the

62
00:02:45,930 --> 00:02:52,380
system your research from what happened

63
00:02:49,380 --> 00:02:54,049
starts right there was that the EDR was

64
00:02:52,380 --> 00:02:55,920
a divided listing solution that

65
00:02:54,050 --> 00:02:57,930
prevented you from doing that

66
00:02:55,920 --> 00:03:00,149
was it just a mix of deployment patch

67
00:02:57,930 --> 00:03:02,850
management automation scripts anything

68
00:03:00,150 --> 00:03:05,040
that has to do with DLP some humph

69
00:03:02,850 --> 00:03:08,519
homegrown automation was it manual

70
00:03:05,040 --> 00:03:11,519
health threat hunting we do not know and

71
00:03:08,520 --> 00:03:14,070
the state of Linux EDR state of winners

72
00:03:11,520 --> 00:03:16,590
defense is a little bit more sporadic

73
00:03:14,070 --> 00:03:19,560
right we do not know if it's a pure play

74
00:03:16,590 --> 00:03:21,090
EDR if it's something else so and

75
00:03:19,560 --> 00:03:23,580
obviously we have to contend with that

76
00:03:21,090 --> 00:03:26,880
as operators we have to address our

77
00:03:23,580 --> 00:03:29,040
initial foothold mechanisms we have to

78
00:03:26,880 --> 00:03:31,380
figure out the media detection

79
00:03:29,040 --> 00:03:34,350
capabilities of the defense and try to

80
00:03:31,380 --> 00:03:36,359
avoid them and we have to contend with

81
00:03:34,350 --> 00:03:38,700
persistent readiness right we need to

82
00:03:36,360 --> 00:03:41,550
make sure that we're staying on that box

83
00:03:38,700 --> 00:03:43,530
we're operating on that box or pivoting

84
00:03:41,550 --> 00:03:45,420
out to another machine on the same

85
00:03:43,530 --> 00:03:49,380
network while still being persistent

86
00:03:45,420 --> 00:03:51,690
there and lately we also have to contend

87
00:03:49,380 --> 00:03:55,250
with so called proactive supervision

88
00:03:51,690 --> 00:03:59,300
contacts what that means is quiet boxes

89
00:03:55,250 --> 00:04:04,260
instrumented operating systems and

90
00:03:59,300 --> 00:04:07,470
whitelisting and so before we move into

91
00:04:04,260 --> 00:04:09,359
specifics let's talk strategically about

92
00:04:07,470 --> 00:04:12,020
what we can do as red team operators to

93
00:04:09,360 --> 00:04:16,410
counter that that state of affairs

94
00:04:12,020 --> 00:04:18,299
well EDRs are sort of you know very

95
00:04:16,410 --> 00:04:20,670
sophisticated piece of software that a

96
00:04:18,298 --> 00:04:23,729
lot of that pretty much do analysis of

97
00:04:20,670 --> 00:04:26,130
behavior of system binaries that run in

98
00:04:23,729 --> 00:04:27,270
it and they build a story they build a

99
00:04:26,130 --> 00:04:29,280
story out of the intake

100
00:04:27,270 --> 00:04:31,500
Gators have compromised and the story is

101
00:04:29,280 --> 00:04:35,099
built and if the story tells that that's

102
00:04:31,500 --> 00:04:37,860
malware they shut it down how can we go

103
00:04:35,099 --> 00:04:39,389
against that technology well one thing

104
00:04:37,860 --> 00:04:41,669
that we can do is we can actually attack

105
00:04:39,389 --> 00:04:44,819
the EDR itself we can shut it down we

106
00:04:41,669 --> 00:04:48,120
can blindside it we can affect the

107
00:04:44,819 --> 00:04:51,509
operation of EDR itself we can actually

108
00:04:48,120 --> 00:04:54,479
affect the logging or event monitoring

109
00:04:51,509 --> 00:04:56,460
of the EDR right but that's not because

110
00:04:54,479 --> 00:04:58,889
that's not the the focus of our talk

111
00:04:56,460 --> 00:05:02,840
before the the other scenario is to

112
00:04:58,889 --> 00:05:05,250
target the execution behavior of the

113
00:05:02,840 --> 00:05:08,880
programs that we actually bring on the

114
00:05:05,250 --> 00:05:11,940
Box can we confuse EDRs with our own

115
00:05:08,880 --> 00:05:14,729
execution can we bypass the IDR

116
00:05:11,940 --> 00:05:18,810
detection by pretty much executing

117
00:05:14,729 --> 00:05:21,630
commands in a different way maybe we can

118
00:05:18,810 --> 00:05:23,340
even deflect the artifact discovery when

119
00:05:21,630 --> 00:05:25,740
the manual threat hunting is happening

120
00:05:23,340 --> 00:05:29,099
and we can still be persistent on that

121
00:05:25,740 --> 00:05:31,560
box let's see what we can do so

122
00:05:29,099 --> 00:05:34,979
strategically we basically need a viable

123
00:05:31,560 --> 00:05:38,550
path to build Linux malware in the face

124
00:05:34,979 --> 00:05:41,849
of those EDRs we have to contend with a

125
00:05:38,550 --> 00:05:45,029
lot of different things that we do not

126
00:05:41,849 --> 00:05:48,620
know on the Box we do not know what they

127
00:05:45,029 --> 00:05:51,569
do on the Box you have several choices

128
00:05:48,620 --> 00:05:53,520
commonly you can either drop your

129
00:05:51,569 --> 00:05:56,009
offensive tools on the target right away

130
00:05:53,520 --> 00:05:57,330
again you do not know what's what's

131
00:05:56,009 --> 00:05:59,789
going on with that target you do not

132
00:05:57,330 --> 00:06:02,758
know what you're going against you may

133
00:05:59,789 --> 00:06:05,159
be right I'll try detected the issue of

134
00:06:02,759 --> 00:06:06,659
the unknown unknown right the second

135
00:06:05,159 --> 00:06:08,490
choice is to try to develop your

136
00:06:06,659 --> 00:06:10,770
offensive tools right on the box

137
00:06:08,490 --> 00:06:12,960
well your mileage may vary because you

138
00:06:10,770 --> 00:06:15,270
can have compilers or you may not have

139
00:06:12,960 --> 00:06:17,400
compilers you may have some form of

140
00:06:15,270 --> 00:06:20,880
lockdown box that doesn't allow you to

141
00:06:17,400 --> 00:06:22,799
do that and the third choice is to use

142
00:06:20,880 --> 00:06:25,680
whatever is available on the box so

143
00:06:22,800 --> 00:06:28,199
called principle of utilization you take

144
00:06:25,680 --> 00:06:31,680
what the system gives you and you just

145
00:06:28,199 --> 00:06:34,199
work with that well in proactive context

146
00:06:31,680 --> 00:06:35,729
it's very limited right and again you're

147
00:06:34,199 --> 00:06:39,510
on the box you do not know what you're

148
00:06:35,729 --> 00:06:41,360
actually seeing there now

149
00:06:39,510 --> 00:06:44,190
what if we take a different approach

150
00:06:41,360 --> 00:06:48,390
what if we assemble the attack right on

151
00:06:44,190 --> 00:06:49,980
the box we basically have you know all

152
00:06:48,390 --> 00:06:52,289
three things that we are talking about

153
00:06:49,980 --> 00:06:54,600
we're living of the land we are dropping

154
00:06:52,290 --> 00:06:57,690
some tooling on a machine and we're

155
00:06:54,600 --> 00:07:00,300
using the facilities of that operating

156
00:06:57,690 --> 00:07:03,500
system to go against EDRs a couple of

157
00:07:00,300 --> 00:07:06,810
ideas first idea is to bring in

158
00:07:03,500 --> 00:07:09,540
instrumented small malware cradles and

159
00:07:06,810 --> 00:07:11,610
then build iterative capabilities on top

160
00:07:09,540 --> 00:07:14,480
of them so what are cradles cradles are

161
00:07:11,610 --> 00:07:17,580
just boost your code just very small

162
00:07:14,480 --> 00:07:20,070
piece of software that is not malicious

163
00:07:17,580 --> 00:07:22,830
in its intent but it has capabilities to

164
00:07:20,070 --> 00:07:24,780
either grow in its malicious intent or

165
00:07:22,830 --> 00:07:27,479
load capabilities into each other or

166
00:07:24,780 --> 00:07:30,030
other systems on the machine and so the

167
00:07:27,480 --> 00:07:31,770
second idea is to maybe take the good

168
00:07:30,030 --> 00:07:35,549
binaries on the system that has been

169
00:07:31,770 --> 00:07:37,859
whitelisted perhaps right or EDRs have

170
00:07:35,550 --> 00:07:42,180
run profile on it they they're deemed to

171
00:07:37,860 --> 00:07:44,880
be trusted and turn them to service our

172
00:07:42,180 --> 00:07:48,540
needs turn into Trojan horses into

173
00:07:44,880 --> 00:07:49,680
decoys of our malware operations those

174
00:07:48,540 --> 00:07:54,570
are the two ideas that we're gonna

175
00:07:49,680 --> 00:07:56,970
explore here so so we're going to talk

176
00:07:54,570 --> 00:07:58,740
about two stages the first stage is

177
00:07:56,970 --> 00:07:59,850
we're gonna try to build offensive

178
00:07:58,740 --> 00:08:03,030
primitives on the box

179
00:07:59,850 --> 00:08:05,880
those are recipes tips and things that

180
00:08:03,030 --> 00:08:09,989
will help you to retool directly on the

181
00:08:05,880 --> 00:08:11,880
machine so we're gonna use loader Linux

182
00:08:09,990 --> 00:08:14,430
loader and linker in order to do that

183
00:08:11,880 --> 00:08:16,850
we're gonna try to see how we can

184
00:08:14,430 --> 00:08:20,250
blindside the ided art from behavioral

185
00:08:16,850 --> 00:08:23,250
perspective and we're going to talk

186
00:08:20,250 --> 00:08:24,870
about prototyping and rapid iteration of

187
00:08:23,250 --> 00:08:27,420
your malware capabilities on the machine

188
00:08:24,870 --> 00:08:29,480
and the second stage is going to be the

189
00:08:27,420 --> 00:08:31,800
actual weaponization and

190
00:08:29,480 --> 00:08:34,140
operationalization of those infested

191
00:08:31,800 --> 00:08:36,270
offensive capability that that we build

192
00:08:34,140 --> 00:08:39,030
or bring in on a machine which means

193
00:08:36,270 --> 00:08:42,510
we're gonna try to hide from EDRs

194
00:08:39,030 --> 00:08:44,600
we're gonna use preloader as a service

195
00:08:42,510 --> 00:08:48,210
we're gonna build it right here and

196
00:08:44,600 --> 00:08:50,490
showcases capabilities and we're gonna

197
00:08:48,210 --> 00:08:52,290
try to achieve some form of mimicry on

198
00:08:50,490 --> 00:08:53,170
the machine so the EDRs are fooled a

199
00:08:52,290 --> 00:08:55,810
little bit more

200
00:08:53,170 --> 00:09:01,120
so let's begin stage one offensive

201
00:08:55,810 --> 00:09:04,300
primitives before we move into we have

202
00:09:01,120 --> 00:09:07,660
to take a little stroll down memory lane

203
00:09:04,300 --> 00:09:09,609
and talk about the elf format elf format

204
00:09:07,660 --> 00:09:13,150
is the executable format on Linux

205
00:09:09,610 --> 00:09:16,660
machines it is much like pee on windows

206
00:09:13,150 --> 00:09:19,870
it can be instrumented it runs through a

207
00:09:16,660 --> 00:09:22,660
loader and it has capabilities to load

208
00:09:19,870 --> 00:09:25,270
other things in its sections so there

209
00:09:22,660 --> 00:09:26,920
are two views there is a linking section

210
00:09:25,270 --> 00:09:29,710
for the executable and there is an

211
00:09:26,920 --> 00:09:31,300
execution view some of it is on a disk

212
00:09:29,710 --> 00:09:33,580
the other when you load it into the

213
00:09:31,300 --> 00:09:36,339
memory the linker basically patches the

214
00:09:33,580 --> 00:09:39,060
memory locations does the relocation of

215
00:09:36,340 --> 00:09:41,530
the memory and it starts the process and

216
00:09:39,060 --> 00:09:42,939
elf is very interesting format because

217
00:09:41,530 --> 00:09:45,490
there are a lot of different English

218
00:09:42,940 --> 00:09:49,260
interesting sections in it and we're

219
00:09:45,490 --> 00:09:54,100
going to use or make use of them in our

220
00:09:49,260 --> 00:09:57,420
efforts here so from common execution

221
00:09:54,100 --> 00:10:00,310
the loader essentially tries to find

222
00:09:57,420 --> 00:10:02,469
libraries that the executable depends on

223
00:10:00,310 --> 00:10:04,270
in common scenario when you launch an

224
00:10:02,470 --> 00:10:06,520
executable on linux and if it doesn't

225
00:10:04,270 --> 00:10:09,040
find its dependencies it crashes it says

226
00:10:06,520 --> 00:10:10,960
I cannot find it and when you start

227
00:10:09,040 --> 00:10:13,540
researching what it is that it's trying

228
00:10:10,960 --> 00:10:15,580
to find you have tools that should be

229
00:10:13,540 --> 00:10:18,060
able to tell you that oh it's fine it's

230
00:10:15,580 --> 00:10:20,770
trying to find this library because it's

231
00:10:18,060 --> 00:10:22,660
linking table is telling it to do so

232
00:10:20,770 --> 00:10:25,210
right that's where its functionality is

233
00:10:22,660 --> 00:10:27,910
and cannot find it and then when the

234
00:10:25,210 --> 00:10:30,400
dependency is actually resolved you can

235
00:10:27,910 --> 00:10:32,290
move on with the execution of that same

236
00:10:30,400 --> 00:10:35,319
program everything is ok and you've

237
00:10:32,290 --> 00:10:37,540
gained your functionality so keep that

238
00:10:35,320 --> 00:10:40,140
mental picture in mind as we go through

239
00:10:37,540 --> 00:10:43,920
that effort that we're trying to make

240
00:10:40,140 --> 00:10:47,439
the other thing about elves and

241
00:10:43,920 --> 00:10:49,270
execution of execution of programs on

242
00:10:47,440 --> 00:10:51,400
Linux is that in order for you to

243
00:10:49,270 --> 00:10:53,890
introduce new capability into binary

244
00:10:51,400 --> 00:10:57,220
without having the code is to do so a

245
00:10:53,890 --> 00:10:59,350
so-called hooking of the elf right it's

246
00:10:57,220 --> 00:11:01,810
a very simple thing to do essentially

247
00:10:59,350 --> 00:11:04,480
Linux allows you to seek for

248
00:11:01,810 --> 00:11:06,579
functionality for features for functions

249
00:11:04,480 --> 00:11:08,970
for variables in the

250
00:11:06,579 --> 00:11:12,269
occasions of the libraries as well as

251
00:11:08,970 --> 00:11:14,769
executables and depending on the load

252
00:11:12,269 --> 00:11:17,739
preference you should be able to find

253
00:11:14,769 --> 00:11:20,949
this function or crash and if you do

254
00:11:17,739 --> 00:11:23,259
find the the function in the in the

255
00:11:20,949 --> 00:11:25,779
application elsewhere outside of the

256
00:11:23,259 --> 00:11:28,089
executable you can hook it essentially

257
00:11:25,779 --> 00:11:29,499
you're executing a detour of the

258
00:11:28,089 --> 00:11:32,410
function that is being encoded and

259
00:11:29,499 --> 00:11:34,899
executable by using your library that's

260
00:11:32,410 --> 00:11:37,149
achieved through the LD preload it's a

261
00:11:34,899 --> 00:11:39,189
feature it's a facility of the operating

262
00:11:37,149 --> 00:11:42,399
system to be able to load dynamic

263
00:11:39,189 --> 00:11:45,069
libraries now there are issues with

264
00:11:42,399 --> 00:11:47,799
dynamic library loading right how do we

265
00:11:45,069 --> 00:11:49,238
use this for offensive tools well if you

266
00:11:47,799 --> 00:11:51,759
drop down the box and you need to

267
00:11:49,239 --> 00:11:54,730
preload the binary that you want with

268
00:11:51,759 --> 00:11:57,910
some of your malware you have to know

269
00:11:54,730 --> 00:12:00,879
the API in this case F open for example

270
00:11:57,910 --> 00:12:03,009
it's a very known API it's from the

271
00:12:00,879 --> 00:12:04,779
Lipsy you can preload it pretty easily

272
00:12:03,009 --> 00:12:07,089
but what if you dropped on the box and

273
00:12:04,779 --> 00:12:09,730
you're trying to backdoor and executable

274
00:12:07,089 --> 00:12:12,369
that you do not know anything about and

275
00:12:09,730 --> 00:12:15,869
you cannot instrument it in any way so

276
00:12:12,369 --> 00:12:18,369
that presents an issue how do we bypass

277
00:12:15,869 --> 00:12:21,519
knowing what that executable does and

278
00:12:18,369 --> 00:12:24,249
use it for decoy so let's move on and

279
00:12:21,519 --> 00:12:27,720
see what we can do here well one tip and

280
00:12:24,249 --> 00:12:30,999
one idea would be is to try to not

281
00:12:27,720 --> 00:12:33,730
understand what that executable does but

282
00:12:30,999 --> 00:12:35,589
just preload it in the generic way I do

283
00:12:33,730 --> 00:12:38,049
not care or should not care what

284
00:12:35,589 --> 00:12:40,389
executable I'm targeting to hide my

285
00:12:38,049 --> 00:12:42,419
malware I should take any system

286
00:12:40,389 --> 00:12:45,869
executable and be able to promote that

287
00:12:42,419 --> 00:12:47,980
one thing to notice it on Linux you have

288
00:12:45,869 --> 00:12:49,509
parent-child relationship and so if

289
00:12:47,980 --> 00:12:52,989
you're the parent of the process you're

290
00:12:49,509 --> 00:12:55,809
spawning or starting then you likely own

291
00:12:52,989 --> 00:12:58,889
that process you likely can introspect

292
00:12:55,809 --> 00:13:00,910
that process and that's your child or

293
00:12:58,889 --> 00:13:03,519
parent-child relationship between the

294
00:13:00,910 --> 00:13:05,949
two processes so we can use that

295
00:13:03,519 --> 00:13:08,459
relationship to you know to our

296
00:13:05,949 --> 00:13:08,459
advantage

297
00:13:08,639 --> 00:13:15,910
conceptually from what what do we gain

298
00:13:11,079 --> 00:13:17,878
for for ETR evasion we load malware into

299
00:13:15,910 --> 00:13:19,480
a library and then we basically

300
00:13:17,879 --> 00:13:21,730
instrument and such

301
00:13:19,480 --> 00:13:23,980
way that it picks up that malware as it

302
00:13:21,730 --> 00:13:26,139
loads into the memory EDRs

303
00:13:23,980 --> 00:13:28,360
should be able to lose the trace should

304
00:13:26,139 --> 00:13:30,100
not be able to introspect our binaries

305
00:13:28,360 --> 00:13:32,440
and if they do so they should not be

306
00:13:30,100 --> 00:13:34,420
able to see the entire payload so we're

307
00:13:32,440 --> 00:13:36,670
gonna use a scatter and assemble

308
00:13:34,420 --> 00:13:39,130
approach for our payload taking bits and

309
00:13:36,670 --> 00:13:42,219
pieces from from the payload and

310
00:13:39,130 --> 00:13:44,589
assemble them on the Box one curious

311
00:13:42,220 --> 00:13:46,120
thing that you may know is that the

312
00:13:44,589 --> 00:13:48,490
Linux because you have parent-child

313
00:13:46,120 --> 00:13:51,910
relationship between the processes that

314
00:13:48,490 --> 00:13:54,310
you launch is that it owns resources of

315
00:13:51,910 --> 00:13:57,699
the of the child right the parent always

316
00:13:54,310 --> 00:14:00,130
knows what the child can't do so what do

317
00:13:57,699 --> 00:14:02,859
we actually want we want to take a

318
00:14:00,130 --> 00:14:04,720
target process unknown executable on the

319
00:14:02,860 --> 00:14:07,240
box that is white listed and turn it

320
00:14:04,720 --> 00:14:10,839
into a malicious executable by various

321
00:14:07,240 --> 00:14:13,930
means one way of doing it is to use

322
00:14:10,839 --> 00:14:16,480
sections that are available in elf for

323
00:14:13,930 --> 00:14:19,469
example in it Feenie and we can build

324
00:14:16,480 --> 00:14:22,089
arrays of code if we can bring our own

325
00:14:19,470 --> 00:14:24,579
little executables and just preload them

326
00:14:22,089 --> 00:14:26,110
with memory with with malware we can

327
00:14:24,579 --> 00:14:28,800
compile it in such a way that we can

328
00:14:26,110 --> 00:14:31,810
take a little and take advantage of

329
00:14:28,800 --> 00:14:34,779
those sections in elf the curious part

330
00:14:31,810 --> 00:14:37,750
about is that those sections in it and

331
00:14:34,779 --> 00:14:40,060
if any are executed irrespective of the

332
00:14:37,750 --> 00:14:41,740
main of the of the mission of the

333
00:14:40,060 --> 00:14:44,260
program right they load the for domain

334
00:14:41,740 --> 00:14:47,529
and they execute after the main is

335
00:14:44,260 --> 00:14:50,829
accident the second tip is we can hope

336
00:14:47,529 --> 00:14:53,170
the the Lib C library itself Lib C

337
00:14:50,829 --> 00:14:56,019
library is nothing more than just a set

338
00:14:53,170 --> 00:14:58,779
of routines that sets of execution for a

339
00:14:56,019 --> 00:15:01,779
Linux process and so we can dynamically

340
00:14:58,779 --> 00:15:05,560
preload an executable by choosing and

341
00:15:01,779 --> 00:15:08,050
looking for a leap C and we can we can

342
00:15:05,560 --> 00:15:10,138
do it this way but is it optimal notice

343
00:15:08,050 --> 00:15:12,540
that we're using a dynamic loading

344
00:15:10,139 --> 00:15:15,639
capabilities we're looking for symbols

345
00:15:12,540 --> 00:15:17,920
well ers can look for symbols too they

346
00:15:15,639 --> 00:15:20,649
can disable Gale Simon we have to

347
00:15:17,920 --> 00:15:23,050
contend with that the other thing that

348
00:15:20,649 --> 00:15:25,990
contains move that the Souls at issue is

349
00:15:23,050 --> 00:15:29,890
that we can use weak references our

350
00:15:25,990 --> 00:15:32,889
compiler allows you to to create to

351
00:15:29,890 --> 00:15:35,799
expose functionality features and global

352
00:15:32,889 --> 00:15:38,769
variables out of your library in such a

353
00:15:35,799 --> 00:15:40,420
way that the dynamic loading of that

354
00:15:38,769 --> 00:15:42,369
symbol and lookup of that symbol at

355
00:15:40,420 --> 00:15:43,988
runtime is not depending on the

356
00:15:42,369 --> 00:15:45,309
functionality that you can find so

357
00:15:43,989 --> 00:15:47,529
essentially if you do not find the

358
00:15:45,309 --> 00:15:50,819
function it doesn't crash the the

359
00:15:47,529 --> 00:15:53,439
process if before we were able to load a

360
00:15:50,819 --> 00:15:55,449
executable with the library and if it's

361
00:15:53,439 --> 00:15:57,459
missing the library the process would

362
00:15:55,449 --> 00:15:59,679
crash in this case we're basically

363
00:15:57,459 --> 00:16:03,878
saying okay well can I resolve this

364
00:15:59,679 --> 00:16:05,858
debug to variable can I find this

365
00:16:03,879 --> 00:16:09,519
feature or not if I can't I'll keep

366
00:16:05,859 --> 00:16:11,529
going why is it useful well if you're in

367
00:16:09,519 --> 00:16:14,169
the sandbox as an operator you can check

368
00:16:11,529 --> 00:16:16,989
for presence of some defensive toolkit

369
00:16:14,169 --> 00:16:18,850
and not even load the functionality even

370
00:16:16,989 --> 00:16:20,199
if it's available for you so EDR does

371
00:16:18,850 --> 00:16:22,839
not know where you're loading your

372
00:16:20,199 --> 00:16:24,998
malware from the next iteration of weak

373
00:16:22,839 --> 00:16:27,459
graphs is that we can find for and weak

374
00:16:24,999 --> 00:16:29,470
reps if for example you're not bringing

375
00:16:27,459 --> 00:16:32,108
your malware cradle but you're actually

376
00:16:29,470 --> 00:16:34,899
trying to find the executable on the box

377
00:16:32,109 --> 00:16:37,029
to in fact and so you can search for

378
00:16:34,899 --> 00:16:40,239
weak references right there every

379
00:16:37,029 --> 00:16:43,089
executable on Linux pretty much has the

380
00:16:40,239 --> 00:16:45,999
two sections cxa finalized and gimon

381
00:16:43,089 --> 00:16:49,660
start and so you can use any of those to

382
00:16:45,999 --> 00:16:52,329
hook irrespective of what your malware

383
00:16:49,660 --> 00:16:55,809
trying to do and obviously the chain we

384
00:16:52,329 --> 00:16:58,118
graphs allow you to to split your

385
00:16:55,809 --> 00:16:59,679
payload into two or more libraries and

386
00:16:58,119 --> 00:17:01,540
so when you're when ETR is looking at

387
00:16:59,679 --> 00:17:02,189
the memory footprint it only sees a part

388
00:17:01,540 --> 00:17:05,980
of it

389
00:17:02,189 --> 00:17:07,779
one functionality can come from chain

390
00:17:05,980 --> 00:17:10,809
one the other functionality can come

391
00:17:07,779 --> 00:17:13,898
from chain two the other thing is that

392
00:17:10,809 --> 00:17:17,398
you can actually create pre constructors

393
00:17:13,898 --> 00:17:19,719
of your of your cradle or or executable

394
00:17:17,398 --> 00:17:21,760
essentially you're loading a constructor

395
00:17:19,720 --> 00:17:24,189
into indiscriminate program and you say

396
00:17:21,760 --> 00:17:26,019
slash bin slash LS will gain a new

397
00:17:24,189 --> 00:17:29,440
constructor which will execute my code

398
00:17:26,019 --> 00:17:31,870
as a malware writer I can be as much

399
00:17:29,440 --> 00:17:35,500
generic as I want to I can even counter

400
00:17:31,870 --> 00:17:37,059
the counter to this when EDRs know about

401
00:17:35,500 --> 00:17:39,100
that and they say okay I'm gonna create

402
00:17:37,059 --> 00:17:42,428
the generic constructor in order for you

403
00:17:39,100 --> 00:17:44,199
the malware writer not being able to to

404
00:17:42,429 --> 00:17:46,300
load it well it turns out that there are

405
00:17:44,200 --> 00:17:48,010
priorities to constructors and

406
00:17:46,300 --> 00:17:49,899
we take the high priority on the

407
00:17:48,010 --> 00:17:53,200
constructor we should be able to bypass

408
00:17:49,900 --> 00:17:55,570
Lydia now

409
00:17:53,200 --> 00:17:57,880
the other tip that you can do is you can

410
00:17:55,570 --> 00:17:59,950
actually fool EDR and blind their

411
00:17:57,880 --> 00:18:03,340
detection by switching in and out of

412
00:17:59,950 --> 00:18:05,740
band of signals you can send signals to

413
00:18:03,340 --> 00:18:08,350
yourself and you execute handlers within

414
00:18:05,740 --> 00:18:10,960
the code and so the you basically

415
00:18:08,350 --> 00:18:13,840
prevent DDR to build a consistent flow

416
00:18:10,960 --> 00:18:15,490
of logic execution because it's an

417
00:18:13,840 --> 00:18:17,530
interrupt and because it is in

418
00:18:15,490 --> 00:18:17,920
interrupts EDRs do not handle it really

419
00:18:17,530 --> 00:18:19,870
well

420
00:18:17,920 --> 00:18:22,210
so essentially you divide by zero but

421
00:18:19,870 --> 00:18:26,649
you recover from it in this case right

422
00:18:22,210 --> 00:18:28,540
and that that is very useful and so then

423
00:18:26,650 --> 00:18:30,700
you can start protecting your payloads

424
00:18:28,540 --> 00:18:31,930
that you bring in in you know throughout

425
00:18:30,700 --> 00:18:34,300
your libraries that you shine to

426
00:18:31,930 --> 00:18:36,640
instrument you can remove LD preload

427
00:18:34,300 --> 00:18:38,260
from environmental variables you can do

428
00:18:36,640 --> 00:18:39,970
encryption of the memory you can do

429
00:18:38,260 --> 00:18:42,370
situational checks you can do anything

430
00:18:39,970 --> 00:18:45,310
you want if you load it prior to

431
00:18:42,370 --> 00:18:47,530
execution in with LD load with

432
00:18:45,310 --> 00:18:49,810
constructors with elf sections and so on

433
00:18:47,530 --> 00:18:52,840
and so forth you can even change the

434
00:18:49,810 --> 00:18:54,760
loader LD dot s so is not the only

435
00:18:52,840 --> 00:18:57,280
loader they can load the executables so

436
00:18:54,760 --> 00:19:01,060
you can stuff your lawyer into the

437
00:18:57,280 --> 00:19:03,520
section interpreter on the elf right and

438
00:19:01,060 --> 00:19:07,419
so if ETRS instrumenting the loader that

439
00:19:03,520 --> 00:19:09,160
will not see your execution and so what

440
00:19:07,420 --> 00:19:11,980
can we do with this let's move a little

441
00:19:09,160 --> 00:19:17,260
further let's hide from things right

442
00:19:11,980 --> 00:19:19,900
like let's expand our foothold now you

443
00:19:17,260 --> 00:19:23,410
can use LD I mentioned the LD - data so

444
00:19:19,900 --> 00:19:25,270
as a loader you can use that in

445
00:19:23,410 --> 00:19:29,350
conjunction with other utilities on the

446
00:19:25,270 --> 00:19:31,510
Box directly right you can bounce off of

447
00:19:29,350 --> 00:19:33,370
the LD loader you can bounce off of the

448
00:19:31,510 --> 00:19:35,230
busy box executable and you can

449
00:19:33,370 --> 00:19:37,719
basically execute code directly without

450
00:19:35,230 --> 00:19:39,610
having any tools on the box let's look

451
00:19:37,720 --> 00:19:42,610
at the examples of how that's done very

452
00:19:39,610 --> 00:19:45,159
contrived example but essentially we are

453
00:19:42,610 --> 00:19:47,709
chaining execution of the loader to the

454
00:19:45,160 --> 00:19:50,620
busy box and then we're basically saying

455
00:19:47,710 --> 00:19:51,910
okay well ET our trace that you know the

456
00:19:50,620 --> 00:19:54,100
whole thing you jump from three

457
00:19:51,910 --> 00:19:56,320
executables at the same time perhaps you

458
00:19:54,100 --> 00:19:58,090
escaped into VI which switches the

459
00:19:56,320 --> 00:20:00,129
terminal mode which gives you tty

460
00:19:58,090 --> 00:20:00,580
preferences and then you switch out of a

461
00:20:00,130 --> 00:20:02,380
deck

462
00:20:00,580 --> 00:20:04,330
you think's so essentially the idea is

463
00:20:02,380 --> 00:20:06,519
that for us is to break that trust and

464
00:20:04,330 --> 00:20:11,199
break that story that EDR is trying to

465
00:20:06,519 --> 00:20:14,890
make now there are more things that we

466
00:20:11,200 --> 00:20:17,740
can do we can evade ADR in better ways

467
00:20:14,890 --> 00:20:20,649
we can evade into reflection what what

468
00:20:17,740 --> 00:20:23,230
does that mean well some stacks that

469
00:20:20,649 --> 00:20:25,360
execute on the bonnie box may have its

470
00:20:23,230 --> 00:20:27,309
own virtual machines and for example if

471
00:20:25,360 --> 00:20:29,049
you're switching technical stacks within

472
00:20:27,309 --> 00:20:31,389
the same program you're calling a goal

473
00:20:29,049 --> 00:20:34,690
language you call in python maybe call

474
00:20:31,390 --> 00:20:38,049
some other things with common were

475
00:20:34,690 --> 00:20:41,500
foreign foreign function interface then

476
00:20:38,049 --> 00:20:44,260
edr gets confused and it needs to it

477
00:20:41,500 --> 00:20:45,639
cannot follow its own chain right how do

478
00:20:44,260 --> 00:20:47,649
you switch the VM you know the

479
00:20:45,639 --> 00:20:49,899
representation of the virtual memory

480
00:20:47,649 --> 00:20:52,059
addresses is completely different and so

481
00:20:49,899 --> 00:20:56,018
that helps you as well let's look at how

482
00:20:52,059 --> 00:20:58,200
that's done well you can you know your

483
00:20:56,019 --> 00:21:00,340
your your libraries can be preload

484
00:20:58,200 --> 00:21:04,299
pre-loaded in such a way that you can

485
00:21:00,340 --> 00:21:06,668
actually create a contract with FFI for

486
00:21:04,299 --> 00:21:08,830
example in this case go you can invoke

487
00:21:06,669 --> 00:21:11,639
its library and before it gets to mean

488
00:21:08,830 --> 00:21:14,080
it has to go through the go runtime and

489
00:21:11,639 --> 00:21:16,600
digital forensics will have to contend

490
00:21:14,080 --> 00:21:18,908
with about 2,000 plus functions to

491
00:21:16,600 --> 00:21:21,178
reverse engineer until it actually gets

492
00:21:18,909 --> 00:21:23,440
to main execution so that's very useful

493
00:21:21,179 --> 00:21:25,350
the other thing is you can you can

494
00:21:23,440 --> 00:21:28,000
actually compiled statically your

495
00:21:25,350 --> 00:21:29,830
interpreter language inside of the

496
00:21:28,000 --> 00:21:31,240
library that you're promoting right it's

497
00:21:29,830 --> 00:21:33,158
very useful because again we're

498
00:21:31,240 --> 00:21:35,529
switching virtual machines were

499
00:21:33,159 --> 00:21:38,169
switching how we execute and we break in

500
00:21:35,529 --> 00:21:39,909
the story of things just an abstraction

501
00:21:38,169 --> 00:21:43,299
level that you can follow this is

502
00:21:39,909 --> 00:21:46,269
another tip for you so what we've done

503
00:21:43,299 --> 00:21:49,510
right now is we've taken a an executable

504
00:21:46,269 --> 00:21:51,820
/bin slash LS or little tiny sliver of

505
00:21:49,510 --> 00:21:53,620
our code our cradle our bootstrap and

506
00:21:51,820 --> 00:21:55,570
essentially we create this monster of

507
00:21:53,620 --> 00:21:58,239
different things that you can actually

508
00:21:55,570 --> 00:22:00,908
do with this executable right we do not

509
00:21:58,240 --> 00:22:03,309
ask what elf can do for you but you ask

510
00:22:00,909 --> 00:22:07,149
what you can do to that elf right and

511
00:22:03,309 --> 00:22:08,830
then we can just run with that now in

512
00:22:07,149 --> 00:22:11,020
the stage - let's talk about

513
00:22:08,830 --> 00:22:13,070
weaponization because this is while we

514
00:22:11,020 --> 00:22:14,899
have all these concepts and tools and

515
00:22:13,070 --> 00:22:18,379
and tips of how you're gonna create your

516
00:22:14,899 --> 00:22:21,469
malware how do you actually weaponize

517
00:22:18,380 --> 00:22:23,179
things on the box well the way you can

518
00:22:21,470 --> 00:22:26,179
do this is you can start creating your

519
00:22:23,179 --> 00:22:28,549
uber pre loaders we now know that we can

520
00:22:26,179 --> 00:22:30,919
actually use LD preload to load our

521
00:22:28,549 --> 00:22:33,139
malware but how do we actually do this

522
00:22:30,919 --> 00:22:35,740
how do we deploy that preloader to the

523
00:22:33,139 --> 00:22:39,408
defense to the target box

524
00:22:35,740 --> 00:22:41,210
well executing / bit / LS is really easy

525
00:22:39,409 --> 00:22:43,480
right we've talked about the loading

526
00:22:41,210 --> 00:22:47,659
library before it starts but how you

527
00:22:43,480 --> 00:22:50,389
account for the fact that LS takes an

528
00:22:47,659 --> 00:22:52,519
argument the argument gets eaten by LS

529
00:22:50,389 --> 00:22:55,158
itself and you should not be able to you

530
00:22:52,519 --> 00:22:58,009
know do anything useful for it well it

531
00:22:55,159 --> 00:23:02,299
turns out that we can actually solve

532
00:22:58,009 --> 00:23:04,879
that issue by moving back in the in our

533
00:23:02,299 --> 00:23:08,750
uber preloader via environmental

534
00:23:04,879 --> 00:23:11,289
variables are outside of of the realm of

535
00:23:08,750 --> 00:23:13,340
the executable arguments into

536
00:23:11,289 --> 00:23:15,500
environmental variables and taking

537
00:23:13,340 --> 00:23:18,139
things from there so essentially in this

538
00:23:15,500 --> 00:23:21,620
case we're executing slash bin slash LS

539
00:23:18,139 --> 00:23:24,320
and we're loading it with let's say

540
00:23:21,620 --> 00:23:26,840
malware right but we also load more

541
00:23:24,320 --> 00:23:30,860
things other marginal in our malware and

542
00:23:26,840 --> 00:23:32,629
we're basically saying okay LS runs but

543
00:23:30,860 --> 00:23:35,779
against all this functionality and

544
00:23:32,629 --> 00:23:40,879
features from our preloader right so we

545
00:23:35,779 --> 00:23:44,629
can solve that that issue now let's dive

546
00:23:40,879 --> 00:23:46,610
deeper into pre loaders those chains

547
00:23:44,629 --> 00:23:48,500
that we're talking about you know the

548
00:23:46,610 --> 00:23:52,580
chain that basically loads multiple

549
00:23:48,500 --> 00:23:54,350
libraries it can do anything you know

550
00:23:52,580 --> 00:23:55,939
regular executable can because you're

551
00:23:54,350 --> 00:23:57,980
promoting at the constructor level

552
00:23:55,940 --> 00:24:00,409
you're loading up at the elf level

553
00:23:57,980 --> 00:24:02,809
sometimes or are you loading it in in

554
00:24:00,409 --> 00:24:04,539
delayed fashion for example at a signal

555
00:24:02,809 --> 00:24:07,990
that you send to the target executable

556
00:24:04,539 --> 00:24:11,629
well you know you can start cleaning up

557
00:24:07,990 --> 00:24:14,120
your stack by basically toggling two FFI

558
00:24:11,629 --> 00:24:15,500
right the Google I'm sorry the the go

559
00:24:14,120 --> 00:24:18,229
link that we're talking about we can

560
00:24:15,500 --> 00:24:20,629
switch IPC mechanisms we can type things

561
00:24:18,230 --> 00:24:22,490
in and out of that executable but using

562
00:24:20,629 --> 00:24:25,639
shared memory we can use sockets we can

563
00:24:22,490 --> 00:24:28,330
basically create a very elaborate

564
00:24:25,639 --> 00:24:31,879
preloader that way

565
00:24:28,330 --> 00:24:34,789
so one small issue with that

566
00:24:31,879 --> 00:24:37,248
as you may notice we're executing from

567
00:24:34,789 --> 00:24:39,259
the disk so essentially at some point

568
00:24:37,249 --> 00:24:42,230
you still need to drop some form of an

569
00:24:39,259 --> 00:24:44,629
executable or a library into the machine

570
00:24:42,230 --> 00:24:46,429
and that's a problem because the the

571
00:24:44,629 --> 00:24:48,379
disk is being watched right EDRs are

572
00:24:46,429 --> 00:24:49,789
saying well is this a malware they just

573
00:24:48,379 --> 00:24:54,259
ended up being on the box we talked

574
00:24:49,789 --> 00:24:57,320
about proactive execution context where

575
00:24:54,259 --> 00:24:58,220
you are basically acquiescing in the box

576
00:24:57,320 --> 00:24:59,779
and saying okay

577
00:24:58,220 --> 00:25:02,389
should that executable be there should

578
00:24:59,779 --> 00:25:06,950
it not that's done on disk right so if

579
00:25:02,389 --> 00:25:08,689
you drop it it's an issue now so what's

580
00:25:06,950 --> 00:25:11,840
the solution the solution is to execute

581
00:25:08,690 --> 00:25:15,019
everything in memory right well you can

582
00:25:11,840 --> 00:25:16,699
load code in memory and and you know

583
00:25:15,019 --> 00:25:19,009
your operating system is gonna be really

584
00:25:16,700 --> 00:25:20,809
happy there are facilities to do so but

585
00:25:19,009 --> 00:25:22,580
once you start talking about executing

586
00:25:20,809 --> 00:25:24,379
things from memory this is where your

587
00:25:22,580 --> 00:25:26,600
operating system is going to fight you

588
00:25:24,379 --> 00:25:28,610
right it does not like doing that

589
00:25:26,600 --> 00:25:32,149
certainly let's make that happen right

590
00:25:28,610 --> 00:25:35,360
let's let's try to overcome that there

591
00:25:32,149 --> 00:25:37,610
are facilities and Linux to to execute

592
00:25:35,360 --> 00:25:39,918
things from memory that historical there

593
00:25:37,610 --> 00:25:43,908
have been a few of them shared memory

594
00:25:39,919 --> 00:25:46,429
through def s hm you can also M map your

595
00:25:43,909 --> 00:25:51,019
a library into memory space of the

596
00:25:46,429 --> 00:25:54,049
process but as of kernel 3.7 you get a

597
00:25:51,019 --> 00:25:56,779
specific system call Cisco a system call

598
00:25:54,049 --> 00:25:59,269
of 256 slash 319 depending whether

599
00:25:56,779 --> 00:26:01,220
you're running 32-bit or 64-bit and

600
00:25:59,269 --> 00:26:05,960
essentially what it does it basically

601
00:26:01,220 --> 00:26:08,659
says all right I'm going to map a piece

602
00:26:05,960 --> 00:26:10,220
of memory into memory process into the

603
00:26:08,659 --> 00:26:13,600
memory of the process right and I'm

604
00:26:10,220 --> 00:26:16,999
going to send you a persistent

605
00:26:13,600 --> 00:26:18,678
descriptor and you can use that

606
00:26:16,999 --> 00:26:20,509
descriptor to execute whatever is there

607
00:26:18,679 --> 00:26:23,360
how does this even work

608
00:26:20,509 --> 00:26:26,029
well first you create the descriptor

609
00:26:23,360 --> 00:26:28,820
through MFG create and then you

610
00:26:26,029 --> 00:26:30,289
basically Iran in exact on it that's not

611
00:26:28,820 --> 00:26:32,658
a new technique it's been used before

612
00:26:30,289 --> 00:26:36,830
but what's valuable here is you're

613
00:26:32,659 --> 00:26:38,419
gaining exposure to a proc self file

614
00:26:36,830 --> 00:26:40,418
descriptor right when you load the

615
00:26:38,419 --> 00:26:43,619
things in memory and you're actually

616
00:26:40,419 --> 00:26:46,720
that that description descriptor out

617
00:26:43,619 --> 00:26:50,350
let's see how we can use that feature or

618
00:26:46,720 --> 00:26:54,239
that side-effect of execution or mapping

619
00:26:50,350 --> 00:26:57,539
the the memory through a memory create

620
00:26:54,239 --> 00:27:00,279
look what happens here we're taking our

621
00:26:57,539 --> 00:27:02,739
uber preloaded pre-loaded that we've

622
00:27:00,279 --> 00:27:05,590
created before we're still executing

623
00:27:02,739 --> 00:27:07,629
/bin slash LS we're still losing the

624
00:27:05,590 --> 00:27:10,480
we're still using the modules we're

625
00:27:07,629 --> 00:27:12,609
still using all the facilities of the

626
00:27:10,480 --> 00:27:16,029
preloader but instead of loading the

627
00:27:12,609 --> 00:27:19,600
module from disk in this case is shin

628
00:27:16,029 --> 00:27:24,399
data so you're loading it from a memory

629
00:27:19,600 --> 00:27:26,408
location by a descriptor and the only

630
00:27:24,399 --> 00:27:28,779
question that you have to ask how in the

631
00:27:26,409 --> 00:27:30,850
world does this process interact with

632
00:27:28,779 --> 00:27:34,090
that descriptor how does it find it what

633
00:27:30,850 --> 00:27:35,678
is it how do I actually invoke memory

634
00:27:34,090 --> 00:27:38,769
space of a different process I have

635
00:27:35,679 --> 00:27:41,549
boundaries right I have to have some

636
00:27:38,769 --> 00:27:43,960
relationship to invoke and to find this

637
00:27:41,549 --> 00:27:45,519
descriptor in some other memory process

638
00:27:43,960 --> 00:27:50,259
here so let's talk about that a little

639
00:27:45,519 --> 00:27:52,809
bit and before we do that a little side

640
00:27:50,259 --> 00:27:55,330
note this talk is called zombie ants

641
00:27:52,809 --> 00:27:56,999
zombie and farming and the inspiration

642
00:27:55,330 --> 00:28:00,279
for this technique actually came from

643
00:27:56,999 --> 00:28:03,249
natural phenomenon where there's a

644
00:28:00,279 --> 00:28:07,149
species of carpenter carpenter ants that

645
00:28:03,249 --> 00:28:09,369
get really bad

646
00:28:07,149 --> 00:28:12,639
well they can get infected by a virus

647
00:28:09,369 --> 00:28:16,629
and that virus essentially what it does

648
00:28:12,639 --> 00:28:18,668
it uses the and it's a paradise the

649
00:28:16,629 --> 00:28:20,949
parrot parasite and its uses the ant as

650
00:28:18,669 --> 00:28:25,059
its host right and what it does it

651
00:28:20,950 --> 00:28:27,669
basically compels the ant to go up climb

652
00:28:25,059 --> 00:28:30,549
up the vegetation bite on a leaf and

653
00:28:27,669 --> 00:28:34,899
then it releases it to die right and

654
00:28:30,549 --> 00:28:37,269
then so basically the the spores fly out

655
00:28:34,899 --> 00:28:40,600
and it starts in the invading other ants

656
00:28:37,269 --> 00:28:44,109
that are under in the understory of that

657
00:28:40,600 --> 00:28:46,959
force the curious part about it about

658
00:28:44,109 --> 00:28:49,809
this whole cycle is that obviously we do

659
00:28:46,960 --> 00:28:53,049
not like killed ants but the one thing

660
00:28:49,809 --> 00:28:55,289
that we like about that is the fact that

661
00:28:53,049 --> 00:28:57,759
specific virus does not kill the ant

662
00:28:55,289 --> 00:29:00,369
directly it does not affect its nervous

663
00:28:57,759 --> 00:29:01,779
system what it does it actually takes

664
00:29:00,369 --> 00:29:04,480
control of the muscles

665
00:29:01,779 --> 00:29:07,179
so essentially you are turning our

666
00:29:04,480 --> 00:29:10,179
chorus a pastor is is turning the ant

667
00:29:07,179 --> 00:29:13,090
into a zombie and then the ant starts

668
00:29:10,179 --> 00:29:14,980
climbing just by pure muscle movement so

669
00:29:13,090 --> 00:29:17,350
this is specifically what we're gonna do

670
00:29:14,980 --> 00:29:19,659
here moving forward we're gonna use the

671
00:29:17,350 --> 00:29:21,009
system libraries of binaries as decoys

672
00:29:19,659 --> 00:29:23,909
and we're gonna compel them to execute

673
00:29:21,009 --> 00:29:27,730
what we want in a more generic fashion

674
00:29:23,909 --> 00:29:31,470
now enter zombie ant farm zombie ant

675
00:29:27,730 --> 00:29:34,539
farm is an out of target warehouse and

676
00:29:31,470 --> 00:29:36,909
broker for your payloads that runs in a

677
00:29:34,539 --> 00:29:40,779
completely different memory space and it

678
00:29:36,909 --> 00:29:44,049
exposes its memory space to processes

679
00:29:40,779 --> 00:29:47,470
for interaction we talked about the proc

680
00:29:44,049 --> 00:29:49,509
FG descriptors and this is what we're

681
00:29:47,470 --> 00:29:51,519
gonna do here and accept the commands

682
00:29:49,509 --> 00:29:53,830
and then basically use this cross

683
00:29:51,519 --> 00:29:56,470
process memory to infect other other

684
00:29:53,830 --> 00:29:59,769
other hosts on the other programs on

685
00:29:56,470 --> 00:30:02,379
that host let's see how that works well

686
00:29:59,769 --> 00:30:05,200
you know in order for you to do this you

687
00:30:02,379 --> 00:30:08,259
have to understand that go back to this

688
00:30:05,200 --> 00:30:12,909
parent and child relationship and Linux

689
00:30:08,259 --> 00:30:15,129
your parent can know the child products

690
00:30:12,909 --> 00:30:17,679
system right it can introspect the file

691
00:30:15,129 --> 00:30:19,809
descriptors and the child also can refer

692
00:30:17,679 --> 00:30:21,669
to the parent back and say hey parent

693
00:30:19,809 --> 00:30:23,859
what are you running what descriptors do

694
00:30:21,669 --> 00:30:29,169
you have available so we can use that

695
00:30:23,859 --> 00:30:32,259
specific effort in this case we what

696
00:30:29,169 --> 00:30:33,759
we're doing is we're taking our SF

697
00:30:32,259 --> 00:30:35,799
zombie ant farm

698
00:30:33,759 --> 00:30:38,499
and we're launching it into the memory

699
00:30:35,799 --> 00:30:41,679
and then somehow we get the malware into

700
00:30:38,499 --> 00:30:43,559
that process but the preloader that uber

701
00:30:41,679 --> 00:30:46,600
preloader that we're targeting is

702
00:30:43,559 --> 00:30:48,190
referencing its parent or any other

703
00:30:46,600 --> 00:30:51,039
relationship that it has with the other

704
00:30:48,190 --> 00:30:53,440
process to find the descriptors where

705
00:30:51,039 --> 00:30:55,960
that malware is located and loaded

706
00:30:53,440 --> 00:30:58,629
through mam FD create and so what

707
00:30:55,960 --> 00:31:00,639
happens is an LD module weren't what it

708
00:30:58,629 --> 00:31:03,248
tries to find the malware it instead of

709
00:31:00,639 --> 00:31:06,219
going to the disk it says his off fetch

710
00:31:03,249 --> 00:31:08,320
me a malware and by the way

711
00:31:06,220 --> 00:31:10,720
do not stream the malware to me but just

712
00:31:08,320 --> 00:31:13,120
simply expose where you're storing it

713
00:31:10,720 --> 00:31:15,429
give me a pointer to your memory space

714
00:31:13,120 --> 00:31:18,879
and I'm gonna use it this is what that

715
00:31:15,429 --> 00:31:21,850
specific PID is on Linux and that's how

716
00:31:18,880 --> 00:31:24,309
we're able to separate the broker and

717
00:31:21,850 --> 00:31:26,260
the payload from the executor from the

718
00:31:24,309 --> 00:31:27,908
EGR perspective again we're keeping in

719
00:31:26,260 --> 00:31:30,220
the back of our mind is that we have to

720
00:31:27,909 --> 00:31:32,890
break the story for the EDR now we're

721
00:31:30,220 --> 00:31:35,200
working with two processes in EGR has to

722
00:31:32,890 --> 00:31:37,210
make sense of both sides and has to make

723
00:31:35,200 --> 00:31:39,100
sense of the transfer of the payload the

724
00:31:37,210 --> 00:31:41,280
malware between the two processes it's

725
00:31:39,100 --> 00:31:45,250
very hard for them to do at the moment

726
00:31:41,280 --> 00:31:50,470
and so the big picture of Zef broker is

727
00:31:45,250 --> 00:31:54,730
that it it launches into the memory uber

728
00:31:50,470 --> 00:31:56,740
pelo / preload asks go fetch me a

729
00:31:54,730 --> 00:31:58,750
payload from elsewhere it doesn't matter

730
00:31:56,740 --> 00:32:00,700
whether it's networks target anywhere or

731
00:31:58,750 --> 00:32:02,110
maybe it's any other memory space

732
00:32:00,700 --> 00:32:04,809
because you can chain them out as well

733
00:32:02,110 --> 00:32:07,928
but using the same methods as we've

734
00:32:04,809 --> 00:32:10,389
discussed and by the way that preload

735
00:32:07,929 --> 00:32:15,010
that uber preloader is going to

736
00:32:10,390 --> 00:32:17,409
instrument a victim write executable for

737
00:32:15,010 --> 00:32:19,600
example slash bin slash LS to do is

738
00:32:17,409 --> 00:32:22,710
bidding right - to basically do whatever

739
00:32:19,600 --> 00:32:27,070
it needs to do so slash bin slash LS

740
00:32:22,710 --> 00:32:30,580
whitelisted executable gets infected it

741
00:32:27,070 --> 00:32:32,439
gets loaded with malware and by the way

742
00:32:30,580 --> 00:32:37,870
the small work comes from something that

743
00:32:32,440 --> 00:32:40,929
EDR does not see okay now we can even go

744
00:32:37,870 --> 00:32:43,299
one step further how do we get zeph on

745
00:32:40,929 --> 00:32:45,250
the box it's also an executable or it's

746
00:32:43,299 --> 00:32:47,350
a dynamic library how do we deal with

747
00:32:45,250 --> 00:32:49,360
this right we're we're we're paint catch

748
00:32:47,350 --> 00:32:52,059
and we were playing catch-22 you can't

749
00:32:49,360 --> 00:32:53,979
get one binary on the box because it

750
00:32:52,059 --> 00:32:55,870
gets detected to get other box other

751
00:32:53,980 --> 00:32:58,679
binary on the box because it gets

752
00:32:55,870 --> 00:33:01,840
detected and so on so forth well

753
00:32:58,679 --> 00:33:03,730
memorably create is also available for

754
00:33:01,840 --> 00:33:06,639
scripting through the for example in

755
00:33:03,730 --> 00:33:09,130
Python that's available through foreign

756
00:33:06,640 --> 00:33:11,230
function interface so you can easily

757
00:33:09,130 --> 00:33:14,409
just drop a interpreter script which is

758
00:33:11,230 --> 00:33:17,350
just piece of text on any Linux box that

759
00:33:14,409 --> 00:33:19,929
has Python support and you can actually

760
00:33:17,350 --> 00:33:22,090
load Zef itself into the memory by

761
00:33:19,929 --> 00:33:24,759
okay I go fetch me from fetch it from

762
00:33:22,090 --> 00:33:26,289
some URL and all I'm bringing in is just

763
00:33:24,759 --> 00:33:30,240
a piece of text which is my Python

764
00:33:26,289 --> 00:33:33,399
script which is really powerful and so I

765
00:33:30,240 --> 00:33:36,519
called PI preload essentially what it

766
00:33:33,399 --> 00:33:39,189
does it says go fetch me a shared object

767
00:33:36,519 --> 00:33:41,889
or executable from a remote location and

768
00:33:39,190 --> 00:33:43,480
by the way as you're starting in you

769
00:33:41,889 --> 00:33:46,090
know use a decoy for example call

770
00:33:43,480 --> 00:33:48,480
yourself a bash and execute slash bin

771
00:33:46,090 --> 00:33:51,220
slash LS preloaded with that payload

772
00:33:48,480 --> 00:33:54,340
okay so what defense sees is that it

773
00:33:51,220 --> 00:33:57,070
sees bash executing a little LS without

774
00:33:54,340 --> 00:33:59,139
anything external anything living on the

775
00:33:57,070 --> 00:34:01,269
disk right everything is done in memory

776
00:33:59,139 --> 00:34:03,519
so we do not use any batch functionality

777
00:34:01,269 --> 00:34:05,619
per se or just because we're just using

778
00:34:03,519 --> 00:34:10,540
it as a decoy as mimicry so it looks

779
00:34:05,619 --> 00:34:12,969
good for the threat hunters and so you

780
00:34:10,540 --> 00:34:15,159
know the mechanism of loading Zeff is

781
00:34:12,969 --> 00:34:17,439
exactly the same instead of loading a

782
00:34:15,159 --> 00:34:19,929
library from external location we can

783
00:34:17,440 --> 00:34:21,819
use PI preload is a piece of Python

784
00:34:19,929 --> 00:34:24,099
script to load Zef into the memory and

785
00:34:21,819 --> 00:34:25,869
then it itself will start unraveling the

786
00:34:24,099 --> 00:34:30,629
chain of infection for all the

787
00:34:25,869 --> 00:34:30,629
executables that you guys want to do

788
00:34:30,719 --> 00:34:37,888
visual of it is is such that for example

789
00:34:34,440 --> 00:34:42,159
PI preload goes out and says load miss F

790
00:34:37,889 --> 00:34:44,349
load it into the memory have a broker

791
00:34:42,159 --> 00:34:47,530
into the memory that we can go to and

792
00:34:44,349 --> 00:34:50,559
ask for malware the the uber preloader

793
00:34:47,530 --> 00:34:52,480
says okay go get me the malware from

794
00:34:50,559 --> 00:34:55,179
another location store it in your memory

795
00:34:52,480 --> 00:34:57,819
give me the process ID and give me the

796
00:34:55,179 --> 00:35:00,010
location the process descriptor and I'm

797
00:34:57,819 --> 00:35:02,040
going to use them to to infect other

798
00:35:00,010 --> 00:35:05,700
things so we create this elaborate

799
00:35:02,040 --> 00:35:07,750
elaborate farm where we're basically

800
00:35:05,700 --> 00:35:10,240
generating and trying to work with

801
00:35:07,750 --> 00:35:12,400
system executables that are whitelisted

802
00:35:10,240 --> 00:35:14,470
or something that is innocuous and we're

803
00:35:12,400 --> 00:35:17,380
trying to basically instrument in such a

804
00:35:14,470 --> 00:35:21,399
way that they are executing what we want

805
00:35:17,380 --> 00:35:25,740
yet EDR does not see that so let's do a

806
00:35:21,400 --> 00:35:30,369
little demo here of that functionality

807
00:35:25,740 --> 00:35:32,950
as we go through the demo keep this

808
00:35:30,369 --> 00:35:33,740
mental picture in mind where the PI

809
00:35:32,950 --> 00:35:35,689
promoter gear

810
00:35:33,740 --> 00:35:37,879
Zef and then it gets loaded into memory

811
00:35:35,690 --> 00:35:44,720
and then all the things that we've

812
00:35:37,880 --> 00:35:47,150
talked about the first order of business

813
00:35:44,720 --> 00:35:49,669
is to fetch the remote binary and

814
00:35:47,150 --> 00:35:51,740
execute it from memory the way you do

815
00:35:49,670 --> 00:35:54,080
this your essential let's watch that

816
00:35:51,740 --> 00:35:56,569
nothing gets dropped down the box then

817
00:35:54,080 --> 00:36:00,680
what we can do we can start the simple

818
00:35:56,570 --> 00:36:03,460
HTTP URL server and then we are

819
00:36:00,680 --> 00:36:06,230
basically going to it and fetching the

820
00:36:03,460 --> 00:36:09,350
malicious LS through pipe reload that

821
00:36:06,230 --> 00:36:11,840
gets LS into the memory it gets executed

822
00:36:09,350 --> 00:36:15,080
notice the proc location what gives goes

823
00:36:11,840 --> 00:36:16,490
from it execute it in memory nothing is

824
00:36:15,080 --> 00:36:18,890
dropped on the box on the other screen

825
00:36:16,490 --> 00:36:21,859
so we're running in the memory LS

826
00:36:18,890 --> 00:36:25,220
basically says I'm good now we're gonna

827
00:36:21,860 --> 00:36:27,740
load the remote library inject it and do

828
00:36:25,220 --> 00:36:31,279
exactly the same thing so LD preload in

829
00:36:27,740 --> 00:36:33,350
the regular iteration it takes a library

830
00:36:31,280 --> 00:36:35,660
and basically preloaded into LS and we

831
00:36:33,350 --> 00:36:38,720
can see that then we're watching our

832
00:36:35,660 --> 00:36:41,060
disk again and then we're starting in

833
00:36:38,720 --> 00:36:44,600
the the web server to fetch the payload

834
00:36:41,060 --> 00:36:47,060
in this case it's it's library we notify

835
00:36:44,600 --> 00:36:49,549
pipe reload that's library we are

836
00:36:47,060 --> 00:36:51,830
notifying what we're gonna decorate it

837
00:36:49,550 --> 00:36:54,290
as and what we're gonna run it and then

838
00:36:51,830 --> 00:36:56,750
maybe we can send some some some things

839
00:36:54,290 --> 00:36:59,029
to LS itself right that runs on about so

840
00:36:56,750 --> 00:37:02,510
essentially you are executing the

841
00:36:59,030 --> 00:37:05,090
preload that gets your malware executed

842
00:37:02,510 --> 00:37:07,730
on the box yet LS actually works and it

843
00:37:05,090 --> 00:37:10,670
executes as well you can kill LS but you

844
00:37:07,730 --> 00:37:12,320
don't have to and then the other thing

845
00:37:10,670 --> 00:37:15,619
is to actually do the same thing with

846
00:37:12,320 --> 00:37:17,300
zev that load that broker into the

847
00:37:15,619 --> 00:37:22,250
memory and then start unraveling that

848
00:37:17,300 --> 00:37:25,280
chain let's see how that works here same

849
00:37:22,250 --> 00:37:27,740
process starting the HTTP server we're

850
00:37:25,280 --> 00:37:30,530
loading Zeff specified as a binary we're

851
00:37:27,740 --> 00:37:33,200
going to decorate this bash now we have

852
00:37:30,530 --> 00:37:36,320
a memory footprint for Zef it runs as a

853
00:37:33,200 --> 00:37:39,109
process we can see that it has a socket

854
00:37:36,320 --> 00:37:41,090
open to to get our commands we can

855
00:37:39,109 --> 00:37:44,270
actually ask for it to load malware and

856
00:37:41,090 --> 00:37:46,340
then we have like like a little script

857
00:37:44,270 --> 00:37:47,490
that basically says hey they have go and

858
00:37:46,340 --> 00:37:50,610
get me a malicious

859
00:37:47,490 --> 00:37:54,240
last from elsewhere and then when we do

860
00:37:50,610 --> 00:37:56,780
that we can actually list the modules

861
00:37:54,240 --> 00:38:00,180
that Zev SF has in its memory space and

862
00:37:56,780 --> 00:38:02,640
we'll see that LS is loaded as a

863
00:38:00,180 --> 00:38:05,730
specific file descriptor which is f is

864
00:38:02,640 --> 00:38:08,629
exposing through its memory space that's

865
00:38:05,730 --> 00:38:13,410
mmm FG create that we're talking about

866
00:38:08,630 --> 00:38:15,810
okay and then so now instead of

867
00:38:13,410 --> 00:38:18,149
executing disk binary what we're doing

868
00:38:15,810 --> 00:38:20,970
we're executing a specific descriptor

869
00:38:18,150 --> 00:38:22,470
that is exposed to the throws F right

870
00:38:20,970 --> 00:38:24,930
essentially what we're doing we're going

871
00:38:22,470 --> 00:38:27,450
to its memory process and we're saying

872
00:38:24,930 --> 00:38:32,368
okay well eg are go try to figure that

873
00:38:27,450 --> 00:38:35,460
out and then the other thing is that we

874
00:38:32,369 --> 00:38:41,430
can we can actually start chaining

875
00:38:35,460 --> 00:38:48,920
things same same thing here started the

876
00:38:41,430 --> 00:38:51,839
server we still have our MFG with LS and

877
00:38:48,920 --> 00:38:53,820
we're asking to load a library that's

878
00:38:51,840 --> 00:38:55,800
not an executable just a dynamic library

879
00:38:53,820 --> 00:38:58,080
that we can you know do anything with

880
00:38:55,800 --> 00:39:00,210
and it opens up another descriptor

881
00:38:58,080 --> 00:39:04,049
number seven for example in zaps memory

882
00:39:00,210 --> 00:39:07,020
process and then essentially we are

883
00:39:04,050 --> 00:39:08,609
doing LD preload with a proc just like

884
00:39:07,020 --> 00:39:10,140
the executional in this case we're

885
00:39:08,609 --> 00:39:15,330
actually going one step further and

886
00:39:10,140 --> 00:39:18,839
we're executing system LS with LD

887
00:39:15,330 --> 00:39:20,970
pre-loaded library from remote location

888
00:39:18,840 --> 00:39:22,520
and you can kind of see that there are

889
00:39:20,970 --> 00:39:26,189
two modules that are loaded and self

890
00:39:22,520 --> 00:39:30,060
split of functionality the broker the

891
00:39:26,190 --> 00:39:33,440
executor the preloader the binary that

892
00:39:30,060 --> 00:39:38,740
we're trying to in fact

893
00:39:33,440 --> 00:39:48,920
[Applause]

894
00:39:38,740 --> 00:39:51,859
okay so let's go back and let's see what

895
00:39:48,920 --> 00:39:53,420
else we can do some other thing that you

896
00:39:51,860 --> 00:39:55,700
know that is being researched right now

897
00:39:53,420 --> 00:39:58,940
and we're trying to move the needle

898
00:39:55,700 --> 00:40:03,799
further in to counter the ER detection

899
00:39:58,940 --> 00:40:06,050
is that we can work with a random with a

900
00:40:03,800 --> 00:40:08,480
SLR a SLR on Linux basically it says

901
00:40:06,050 --> 00:40:11,000
okay well it's address and address

902
00:40:08,480 --> 00:40:13,520
memory space rather than randomization

903
00:40:11,000 --> 00:40:15,530
when library is loaded from remote

904
00:40:13,520 --> 00:40:17,780
location gets launched into the memory

905
00:40:15,530 --> 00:40:19,280
process they they get assigned a memory

906
00:40:17,780 --> 00:40:21,770
location and that memory location

907
00:40:19,280 --> 00:40:24,830
changes every time the binary started

908
00:40:21,770 --> 00:40:26,780
right so any time you run up in LS with

909
00:40:24,830 --> 00:40:28,190
pre-loaded library that library is going

910
00:40:26,780 --> 00:40:30,590
to be at a different memory location

911
00:40:28,190 --> 00:40:32,990
that is the feature secure security

912
00:40:30,590 --> 00:40:33,490
feature of Linux operating system of the

913
00:40:32,990 --> 00:40:37,549
loader

914
00:40:33,490 --> 00:40:39,919
now can we disable a SLR that's the

915
00:40:37,550 --> 00:40:41,390
question why would we want to do this

916
00:40:39,920 --> 00:40:42,860
well because we can predict memory

917
00:40:41,390 --> 00:40:44,720
locations why do we need to predict

918
00:40:42,860 --> 00:40:47,810
memory locations because we can even

919
00:40:44,720 --> 00:40:52,060
delay the loading of payloads and acts

920
00:40:47,810 --> 00:40:54,470
and exploits into the binaries that we

921
00:40:52,060 --> 00:40:56,210
pretty much bring in like cradles for

922
00:40:54,470 --> 00:41:00,020
example we bring in a very very clean

923
00:40:56,210 --> 00:41:01,910
cradle and defer gets against the binary

924
00:41:00,020 --> 00:41:03,770
reverse engineers there is no payload

925
00:41:01,910 --> 00:41:07,359
there is no shared object there is no

926
00:41:03,770 --> 00:41:10,310
nothing there but it has a very curious

927
00:41:07,360 --> 00:41:12,650
space of a buffer for example 400 bytes

928
00:41:10,310 --> 00:41:15,590
that gets allocated to zeros and there's

929
00:41:12,650 --> 00:41:17,300
nothing going on with it now normally we

930
00:41:15,590 --> 00:41:19,100
cannot target that memory location

931
00:41:17,300 --> 00:41:20,570
because we do not know what that memory

932
00:41:19,100 --> 00:41:23,120
location is at the runtime because it

933
00:41:20,570 --> 00:41:25,580
changes because a SLR so what we do with

934
00:41:23,120 --> 00:41:27,740
we can weaken the executable we can

935
00:41:25,580 --> 00:41:33,350
actually change its personality but

936
00:41:27,740 --> 00:41:36,109
using a flag on set personality call

937
00:41:33,350 --> 00:41:37,910
called address no randomize and because

938
00:41:36,110 --> 00:41:42,290
the child and parent relationship still

939
00:41:37,910 --> 00:41:44,990
stays what we do we fork the process we

940
00:41:42,290 --> 00:41:47,900
change the personality then we exact the

941
00:41:44,990 --> 00:41:49,430
process with the SLR disabled and we

942
00:41:47,900 --> 00:41:52,079
launch it in memory with the code cave

943
00:41:49,430 --> 00:41:54,479
that should be able to

944
00:41:52,079 --> 00:41:57,119
receive some formula a right from our

945
00:41:54,479 --> 00:42:00,118
third party process elsewhere and we do

946
00:41:57,119 --> 00:42:03,690
this with a feature called first memory

947
00:42:00,119 --> 00:42:05,789
attached right it's it's a it's an

948
00:42:03,690 --> 00:42:08,749
address it's an address to address user

949
00:42:05,789 --> 00:42:11,130
space right from one process to another

950
00:42:08,749 --> 00:42:13,799
visually that looks like this right if

951
00:42:11,130 --> 00:42:16,739
with ASL are enabled any time you launch

952
00:42:13,799 --> 00:42:19,890
a process it gets a different memory

953
00:42:16,739 --> 00:42:21,569
space location but with ASL are disabled

954
00:42:19,890 --> 00:42:22,890
together exactly the same memory

955
00:42:21,569 --> 00:42:25,410
location for the buffer that you're

956
00:42:22,890 --> 00:42:28,410
trying to - right - right then you can

957
00:42:25,410 --> 00:42:30,719
do this exactly again with parent and

958
00:42:28,410 --> 00:42:33,149
child relationship you the parent Forks

959
00:42:30,719 --> 00:42:35,459
the child changes the personality and

960
00:42:33,150 --> 00:42:38,640
then it executes it by overriding its

961
00:42:35,459 --> 00:42:41,729
memory space and then the Divya the

962
00:42:38,640 --> 00:42:43,469
process VM right is at our preloader

963
00:42:41,729 --> 00:42:45,749
or Zeb or anything else that we talked

964
00:42:43,469 --> 00:42:47,849
about before it basically starts writing

965
00:42:45,749 --> 00:42:51,718
into the memory space and then

966
00:42:47,849 --> 00:42:54,329
populating the the victim which has no

967
00:42:51,719 --> 00:42:56,969
SLR protection anymore with exploit that

968
00:42:54,329 --> 00:42:59,819
we want right the number can use perhaps

969
00:42:56,969 --> 00:43:02,690
a signal to jump to location that we

970
00:42:59,819 --> 00:43:06,229
already know to start the execution of

971
00:43:02,690 --> 00:43:10,650
the of the code that we're promoting so

972
00:43:06,229 --> 00:43:14,669
the idea here is to give the Red Team

973
00:43:10,650 --> 00:43:17,430
operators or basically tools to be able

974
00:43:14,670 --> 00:43:20,339
to evade EDR and from EDR technology and

975
00:43:17,430 --> 00:43:21,808
defenders to look at how things work so

976
00:43:20,339 --> 00:43:27,180
they can actually pick up some ideas and

977
00:43:21,809 --> 00:43:29,489
start implementing defense in it so what

978
00:43:27,180 --> 00:43:31,109
is the offensive summary here as we can

979
00:43:29,489 --> 00:43:33,989
see the pre-loading is really really

980
00:43:31,109 --> 00:43:35,190
viable evasion for system executables

981
00:43:33,989 --> 00:43:37,380
okay

982
00:43:35,190 --> 00:43:39,420
you can bring in a sliver of code and

983
00:43:37,380 --> 00:43:41,579
then you can grow to proportions that

984
00:43:39,420 --> 00:43:44,190
edr will not be able to deal with at

985
00:43:41,579 --> 00:43:46,170
least at the moment you can even in fact

986
00:43:44,190 --> 00:43:48,420
any system executable that you can start

987
00:43:46,170 --> 00:43:52,440
with all these things that we talked

988
00:43:48,420 --> 00:43:54,089
about you can bring you can execute the

989
00:43:52,440 --> 00:43:55,859
blended approach by assembling the

990
00:43:54,089 --> 00:43:58,739
attack right on the box but without

991
00:43:55,859 --> 00:44:00,890
having potentially compilers without

992
00:43:58,739 --> 00:44:03,930
having all the introspection tools for

993
00:44:00,890 --> 00:44:05,249
destination executables that you're

994
00:44:03,930 --> 00:44:05,879
trying to in fact you just take a

995
00:44:05,249 --> 00:44:08,310
vanilla

996
00:44:05,880 --> 00:44:10,800
/bin slash a last top CD whatever you

997
00:44:08,310 --> 00:44:13,529
want and do this we have split the

998
00:44:10,800 --> 00:44:15,390
functionality of payload delivery in in

999
00:44:13,530 --> 00:44:17,270
two memory processes and we can actually

1000
00:44:15,390 --> 00:44:20,400
toggle between them which is really

1001
00:44:17,270 --> 00:44:22,680
powerful because now we can do a

1002
00:44:20,400 --> 00:44:24,420
customer service to malware writers to

1003
00:44:22,680 --> 00:44:27,450
give me the payload I'm gonna execute it

1004
00:44:24,420 --> 00:44:30,780
we do want to use C foreign function

1005
00:44:27,450 --> 00:44:33,000
interface to switch between VM stack and

1006
00:44:30,780 --> 00:44:35,730
technical stack as we go along to

1007
00:44:33,000 --> 00:44:39,090
confuse EDRs even further defense please

1008
00:44:35,730 --> 00:44:40,980
take note and for the red team operators

1009
00:44:39,090 --> 00:44:44,120
even though you have all these tools do

1010
00:44:40,980 --> 00:44:47,610
not execute everything do not burn your

1011
00:44:44,120 --> 00:44:49,799
pillows do not burn your mechanisms if

1012
00:44:47,610 --> 00:44:52,680
you do not need to this is done purely

1013
00:44:49,800 --> 00:44:55,170
to enhance the security of this space

1014
00:44:52,680 --> 00:44:57,660
for EDRs to learn and for you to tell us

1015
00:44:55,170 --> 00:44:59,430
that and then from the malware writers

1016
00:44:57,660 --> 00:45:01,649
and the red team operators I guess is

1017
00:44:59,430 --> 00:45:03,359
that the takeaway is that you need to

1018
00:45:01,650 --> 00:45:05,190
protect your payloads and that's one of

1019
00:45:03,360 --> 00:45:07,290
the ways of doing that because if you

1020
00:45:05,190 --> 00:45:09,120
lose a payload that means you may lose

1021
00:45:07,290 --> 00:45:11,580
persistence you may lose a future

1022
00:45:09,120 --> 00:45:15,900
opportunity to stay in a box all this

1023
00:45:11,580 --> 00:45:18,750
code and all the examples the zombie ant

1024
00:45:15,900 --> 00:45:20,310
farm and pipe reloader and other things

1025
00:45:18,750 --> 00:45:23,160
are available at this location will

1026
00:45:20,310 --> 00:45:26,390
github it's open source you guys are

1027
00:45:23,160 --> 00:45:29,970
welcome to download and play with it

1028
00:45:26,390 --> 00:45:32,240
it's it's also gonna be on Twitter if

1029
00:45:29,970 --> 00:45:36,450
you want to I can I can do that as well

1030
00:45:32,240 --> 00:45:38,040
and so what can defense do right you

1031
00:45:36,450 --> 00:45:40,350
guys need to start implementing Linux

1032
00:45:38,040 --> 00:45:42,390
capabilities B&L ass should not be

1033
00:45:40,350 --> 00:45:45,060
launching sockets been LS should not be

1034
00:45:42,390 --> 00:45:48,200
listening to any my PC it's not what

1035
00:45:45,060 --> 00:45:50,820
it's designed to do so do lock it down

1036
00:45:48,200 --> 00:45:52,589
define clearly what EDRs do for you in

1037
00:45:50,820 --> 00:45:54,000
this environment they can do they cannot

1038
00:45:52,590 --> 00:45:57,060
do everything it's a great technology

1039
00:45:54,000 --> 00:46:00,180
but use it cautiously and augment your

1040
00:45:57,060 --> 00:46:02,610
efforts with other things defense please

1041
00:46:00,180 --> 00:46:05,549
provide a please provide objects into

1042
00:46:02,610 --> 00:46:08,820
proc please do introspection into

1043
00:46:05,550 --> 00:46:12,060
dynamic loading please watch over IPC

1044
00:46:08,820 --> 00:46:14,070
and please provide objects to process

1045
00:46:12,060 --> 00:46:15,750
library load this is very very important

1046
00:46:14,070 --> 00:46:18,060
as you can see everything is done in

1047
00:46:15,750 --> 00:46:18,760
memory right now and unless you do that

1048
00:46:18,060 --> 00:46:21,160
you're not going to be

1049
00:46:18,760 --> 00:46:23,530
to see this and then Thursday and start

1050
00:46:21,160 --> 00:46:25,930
thinking about quiescent gearboxes and

1051
00:46:23,530 --> 00:46:27,640
and and and doing prevention on you know

1052
00:46:25,930 --> 00:46:30,279
things that should not be there even a

1053
00:46:27,640 --> 00:46:33,670
single script as you've seen a Python

1054
00:46:30,280 --> 00:46:35,890
script can bring in the entire thing

1055
00:46:33,670 --> 00:46:39,580
that will unravel the security of your

1056
00:46:35,890 --> 00:46:41,560
machine so with that I want to thank you

1057
00:46:39,580 --> 00:46:44,640
for coming here and listen to my talk

1058
00:46:41,560 --> 00:46:44,640
and I can take questions

1059
00:46:46,870 --> 00:46:50,089
[Applause]

