1
00:00:00,000 --> 00:00:04,529
welcome to breaking through enough to

2
00:00:02,520 --> 00:00:06,298
another side by passing firmware

3
00:00:04,529 --> 00:00:10,110
security boundaries from embedded

4
00:00:06,299 --> 00:00:14,400
computers controllers in Lagoon thi was

5
00:00:10,110 --> 00:00:17,189
Alexandra Gaza and Alex Mastro before we

6
00:00:14,400 --> 00:00:19,609
begin a few brief notes stop by the

7
00:00:17,190 --> 00:00:22,320
business hall located in Mandalay Bay

8
00:00:19,609 --> 00:00:25,230
Oceanside and shoreline ballrooms on

9
00:00:22,320 --> 00:00:28,109
level 2 the blackhat Arsenal is in the

10
00:00:25,230 --> 00:00:31,610
business hall on level 2 join us for

11
00:00:28,109 --> 00:00:35,399
mimosas at 11:50 and ice cream social at

12
00:00:31,610 --> 00:00:38,430
15:20 both in the business hall lunch is

13
00:00:35,399 --> 00:00:40,890
in Bayside a B from 1:00 to 2:30

14
00:00:38,430 --> 00:00:43,230
don't forget the merchandise store on

15
00:00:40,890 --> 00:00:46,590
level 2 in session recordings from s ok

16
00:00:43,230 --> 00:00:48,750
they have a desk on every level thank

17
00:00:46,590 --> 00:00:50,700
you for putting your phone on vibrate it

18
00:00:48,750 --> 00:00:52,170
makes it easier for the rest of us to

19
00:00:50,700 --> 00:00:54,809
ignore the ringing while you wait for

20
00:00:52,170 --> 00:00:56,280
your voicemail to pick up please use the

21
00:00:54,809 --> 00:00:58,468
microphones in the aisle for any

22
00:00:56,280 --> 00:01:03,539
questions following the talk and with

23
00:00:58,469 --> 00:01:06,750
that let us welcome our speakers good

24
00:01:03,539 --> 00:01:09,000
morning everyone and thanks for coming

25
00:01:06,750 --> 00:01:10,799
this early morning slot especially after

26
00:01:09,000 --> 00:01:14,790
all these crazy parties blackhat

27
00:01:10,799 --> 00:01:16,680
yesterday and bypassing former security

28
00:01:14,790 --> 00:01:20,040
boundaries from embedded controller it's

29
00:01:16,680 --> 00:01:24,390
our topic for today and I'm Alex Madras

30
00:01:20,040 --> 00:01:27,420
of embedded security lead from from

31
00:01:24,390 --> 00:01:30,420
Nvidia and Alexander Gazette from Airbus

32
00:01:27,420 --> 00:01:34,590
cyber security researcher and great

33
00:01:30,420 --> 00:01:38,270
reverse engineer so first of all we want

34
00:01:34,590 --> 00:01:40,950
to make small disclaimer because

35
00:01:38,270 --> 00:01:43,229
everything which we discover in this

36
00:01:40,950 --> 00:01:45,210
presentation we did all the reverse

37
00:01:43,229 --> 00:01:48,990
engineering techniques and methodologies

38
00:01:45,210 --> 00:01:51,419
so we can be bronch in some points which

39
00:01:48,990 --> 00:01:54,240
we made in this presentation but maybe

40
00:01:51,420 --> 00:01:56,070
not so and we literally spend the five

41
00:01:54,240 --> 00:01:58,170
months of reverse engineering biased

42
00:01:56,070 --> 00:02:02,158
guard technology and it's a lot of

43
00:01:58,170 --> 00:02:04,530
information about wires guard which has

44
00:02:02,159 --> 00:02:06,450
never been in public before so we have

45
00:02:04,530 --> 00:02:08,340
some introduction part about the

46
00:02:06,450 --> 00:02:10,500
hardware security part hardware security

47
00:02:08,340 --> 00:02:12,510
boundaries problems what does it mean

48
00:02:10,500 --> 00:02:14,290
where the limitations are and how the

49
00:02:12,510 --> 00:02:16,750
attack surface looks like

50
00:02:14,290 --> 00:02:19,060
then we will make a deep dive to

51
00:02:16,750 --> 00:02:20,469
embedded controller and create some

52
00:02:19,060 --> 00:02:24,489
bridges to the buyers guard technology

53
00:02:20,469 --> 00:02:27,069
and of course it will be very a lot of

54
00:02:24,489 --> 00:02:29,859
details about the buyers guard itself so

55
00:02:27,069 --> 00:02:33,339
let's start with the security hardware

56
00:02:29,859 --> 00:02:35,500
boundaries so how many third-party

57
00:02:33,340 --> 00:02:37,450
components in your laptops nowadays you

58
00:02:35,500 --> 00:02:41,829
have its embedded controller its

59
00:02:37,450 --> 00:02:46,450
keyboard controller its fingerprint its

60
00:02:41,829 --> 00:02:49,030
touchpad even and all these farmers have

61
00:02:46,450 --> 00:02:52,298
their own boundaries so it's a lot of

62
00:02:49,030 --> 00:02:55,019
limitations actually because obvious

63
00:02:52,299 --> 00:02:58,349
furs have their own update process

64
00:02:55,019 --> 00:03:03,510
identification and sometimes this

65
00:02:58,349 --> 00:03:07,780
components can be out of trade model for

66
00:03:03,510 --> 00:03:12,849
mothers but have a path for attack some

67
00:03:07,780 --> 00:03:16,299
other hardware component so very

68
00:03:12,849 --> 00:03:17,738
interesting part many of these companies

69
00:03:16,299 --> 00:03:20,199
which we mentioned on the previous slide

70
00:03:17,739 --> 00:03:22,870
connected to the buyers and of course

71
00:03:20,199 --> 00:03:24,909
they out of the trade scope on of the

72
00:03:22,870 --> 00:03:28,560
buyers itself which is create some

73
00:03:24,909 --> 00:03:31,388
interesting room for us of thinking and

74
00:03:28,560 --> 00:03:33,430
security boundaries it's not a summary

75
00:03:31,389 --> 00:03:35,709
of all the boundaries on your system

76
00:03:33,430 --> 00:03:37,750
basically it's separated from each other

77
00:03:35,709 --> 00:03:41,319
and of course if you can break as

78
00:03:37,750 --> 00:03:43,120
example GPM and TPM communicating very

79
00:03:41,319 --> 00:03:45,759
closely with a bias for a lot of

80
00:03:43,120 --> 00:03:49,000
security features then you can basically

81
00:03:45,759 --> 00:03:52,529
break the security features from the TPM

82
00:03:49,000 --> 00:03:55,180
and for the long time TPM been out of

83
00:03:52,530 --> 00:03:58,379
trade modeling for the bus itself and

84
00:03:55,180 --> 00:04:01,599
Jeremy boon actually demonstrated

85
00:03:58,379 --> 00:04:04,388
interposer from the last year research

86
00:04:01,599 --> 00:04:06,488
and it was very interesting because he

87
00:04:04,389 --> 00:04:08,889
exactly did like that he tried to attack

88
00:04:06,489 --> 00:04:11,859
the bias from the TPM itself by

89
00:04:08,889 --> 00:04:15,159
interposing the messages from wires to

90
00:04:11,859 --> 00:04:18,359
the TPM and fro TPM to the BIOS and just

91
00:04:15,159 --> 00:04:22,029
manipulating with trauma Watson did very

92
00:04:18,358 --> 00:04:23,190
similar work but just physically so

93
00:04:22,029 --> 00:04:29,400
during

94
00:04:23,190 --> 00:04:32,640
to the CPM itself very good job and most

95
00:04:29,400 --> 00:04:35,960
reticent one it's a race condition on

96
00:04:32,640 --> 00:04:39,419
spy flash read/write which is bypassing

97
00:04:35,960 --> 00:04:43,340
good guard technology and it's also by

98
00:04:39,420 --> 00:04:45,510
trauma Hudson and Peter junks which is

99
00:04:43,340 --> 00:04:47,520
this research you've been presented on

100
00:04:45,510 --> 00:04:50,880
Hawkins blog this year in the Amsterdam

101
00:04:47,520 --> 00:04:54,320
a lot of information already on public

102
00:04:50,880 --> 00:04:56,659
but main message from this research

103
00:04:54,320 --> 00:04:59,150
authenticated once it's not means

104
00:04:56,660 --> 00:05:01,650
trusted forever

105
00:04:59,150 --> 00:05:04,260
one more good example

106
00:05:01,650 --> 00:05:09,440
alexandra gazette and geoffrey journey

107
00:05:04,260 --> 00:05:09,440
did a research on embedded controller o

108
00:05:09,470 --> 00:05:14,250
on BMC which is based management

109
00:05:11,910 --> 00:05:17,520
controller it's a different one but also

110
00:05:14,250 --> 00:05:19,500
interesting so basically but the

111
00:05:17,520 --> 00:05:23,099
controller responsible for a lot of

112
00:05:19,500 --> 00:05:25,800
different flows on servers and it's also

113
00:05:23,100 --> 00:05:27,810
responsible for updating multiple

114
00:05:25,800 --> 00:05:30,300
servers include embedded controller

115
00:05:27,810 --> 00:05:32,100
management engine and bios itself so

116
00:05:30,300 --> 00:05:34,680
it's direct path to the right to the spy

117
00:05:32,100 --> 00:05:36,570
flash so basically if embedded

118
00:05:34,680 --> 00:05:38,910
controller is broken it's break or

119
00:05:36,570 --> 00:05:41,130
identification for the bias it's break

120
00:05:38,910 --> 00:05:44,790
all identification for the embedded

121
00:05:41,130 --> 00:05:49,980
controller update process and the break

122
00:05:44,790 --> 00:05:52,020
security boundaries why we start working

123
00:05:49,980 --> 00:05:54,660
on embedded controller our point of

124
00:05:52,020 --> 00:05:57,539
research been on the beginning just go

125
00:05:54,660 --> 00:05:59,760
deeper on the bios of our technology but

126
00:05:57,540 --> 00:06:01,860
we found a lot of interesting relations

127
00:05:59,760 --> 00:06:07,230
between embedded controller bios guard

128
00:06:01,860 --> 00:06:09,090
and the bias so and especially embedded

129
00:06:07,230 --> 00:06:10,650
controller involve involved in

130
00:06:09,090 --> 00:06:13,169
authentification process between

131
00:06:10,650 --> 00:06:14,940
embedded controller and the bias before

132
00:06:13,169 --> 00:06:20,580
some flow started but we all be geeking

133
00:06:14,940 --> 00:06:22,380
this a bit later ok so when we needed to

134
00:06:20,580 --> 00:06:24,630
start distal immunity to discover a

135
00:06:22,380 --> 00:06:25,890
bitch what was actually running on the

136
00:06:24,630 --> 00:06:29,700
ability controller we needed to dig into

137
00:06:25,890 --> 00:06:31,409
it so just to give you a quick evaluate

138
00:06:29,700 --> 00:06:33,360
already in a midi controller it's a very

139
00:06:31,410 --> 00:06:35,610
small micro controller it will be

140
00:06:33,360 --> 00:06:37,439
responsible for many things for you sign

141
00:06:35,610 --> 00:06:39,269
on here we will not see it in a

142
00:06:37,439 --> 00:06:41,059
but it was responsible for power

143
00:06:39,269 --> 00:06:44,309
management ammerman thermal management

144
00:06:41,059 --> 00:06:47,459
also responsible for keyboard the

145
00:06:44,309 --> 00:06:49,379
keyboard press management in the past it

146
00:06:47,459 --> 00:06:50,969
has also been involved in many security

147
00:06:49,379 --> 00:06:53,939
feature for example it has been used for

148
00:06:50,969 --> 00:06:55,169
the implementation of BIOS supervisor

149
00:06:53,939 --> 00:06:57,869
pass throughout the reversion and

150
00:06:55,169 --> 00:07:00,989
variation some code we are inside the

151
00:06:57,869 --> 00:07:02,909
embedded controller like like Alex said

152
00:07:00,989 --> 00:07:04,679
we found that it is also responsible for

153
00:07:02,909 --> 00:07:06,179
implementing some specific part of the

154
00:07:04,679 --> 00:07:09,268
BIOS gap implementation and that's why

155
00:07:06,179 --> 00:07:10,739
we wanted to dig into it and also some

156
00:07:09,269 --> 00:07:12,599
things is very important from an ethical

157
00:07:10,739 --> 00:07:15,209
point of view is that even if your main

158
00:07:12,599 --> 00:07:17,069
processor your main CPU is is not

159
00:07:15,209 --> 00:07:19,139
running the MIDI controller is always

160
00:07:17,069 --> 00:07:20,759
running as soon as the power on the

161
00:07:19,139 --> 00:07:23,029
motherboard the elite controller will be

162
00:07:20,759 --> 00:07:23,029
ready

163
00:07:23,459 --> 00:07:29,939
we have been mostly working on Lenovo

164
00:07:25,919 --> 00:07:31,829
ThinkPad laptops for all this forces

165
00:07:29,939 --> 00:07:34,800
laptops the cheap use comes from

166
00:07:31,829 --> 00:07:38,339
microchips make 16 something family the

167
00:07:34,800 --> 00:07:41,269
ROM size is a 180 K it's and some

168
00:07:38,339 --> 00:07:43,949
unusual processor which is a compact

169
00:07:41,269 --> 00:07:47,009
quite often we find it inside a MIDI

170
00:07:43,949 --> 00:07:49,110
controller the controller can be seen as

171
00:07:47,009 --> 00:07:52,289
a collection of logical devices that is

172
00:07:49,110 --> 00:07:54,539
you can think about it as services that

173
00:07:52,289 --> 00:07:56,878
are exposed by the embedded controller

174
00:07:54,539 --> 00:07:58,740
the resource about controller services

175
00:07:56,879 --> 00:08:00,809
some communication channel with the

176
00:07:58,740 --> 00:08:03,059
operating systems for a CPI

177
00:08:00,809 --> 00:08:04,740
a service that expose the internal flash

178
00:08:03,059 --> 00:08:06,029
of the embedded controller that's very

179
00:08:04,740 --> 00:08:08,279
important because that's where it's from

180
00:08:06,029 --> 00:08:10,199
where is stored and that's something

181
00:08:08,279 --> 00:08:12,329
that could be very interesting to hide

182
00:08:10,199 --> 00:08:19,679
card or ID something again if you're an

183
00:08:12,329 --> 00:08:21,509
attacker ok now if we place this tablet

184
00:08:19,679 --> 00:08:23,369
controller on the system on chip you can

185
00:08:21,509 --> 00:08:25,709
see that it can communicate with the

186
00:08:23,369 --> 00:08:27,329
battery stress abuse sometimes it will

187
00:08:25,709 --> 00:08:30,659
authenticate the batteries as that or

188
00:08:27,329 --> 00:08:33,509
just get its status it's rather it's not

189
00:08:30,659 --> 00:08:34,919
status some this kind of information on

190
00:08:33,509 --> 00:08:36,959
the other side it is connected to the

191
00:08:34,919 --> 00:08:39,688
main processor through an LPC no pin

192
00:08:36,958 --> 00:08:41,489
code news with the main yes the main

193
00:08:39,688 --> 00:08:42,899
processor and for example if your main

194
00:08:41,490 --> 00:08:44,370
processor wants to know the charge level

195
00:08:42,899 --> 00:08:48,019
of Shaba tree it will go through the

196
00:08:44,370 --> 00:08:50,700
Seger's information and sing like that

197
00:08:48,019 --> 00:08:51,720
so

198
00:08:50,700 --> 00:08:53,940
we know there are links and

199
00:08:51,720 --> 00:08:56,940
communication between the main processor

200
00:08:53,940 --> 00:08:58,800
mostly you fi bills and Zamalek material

201
00:08:56,940 --> 00:09:01,230
and we wanted to map all this

202
00:08:58,800 --> 00:09:03,750
communication channel all the endpoints

203
00:09:01,230 --> 00:09:05,850
exposed by the embedded controller from

204
00:09:03,750 --> 00:09:08,970
the recomposition we know that logical

205
00:09:05,850 --> 00:09:11,820
devices can be exposed on the LPC views

206
00:09:08,970 --> 00:09:13,980
from the EC the PC abuse is itself a

207
00:09:11,820 --> 00:09:15,930
radically vice logical device that you

208
00:09:13,980 --> 00:09:17,850
can configure to expose other logical

209
00:09:15,930 --> 00:09:19,709
devices and if you want to do that you

210
00:09:17,850 --> 00:09:22,050
simply write into memory into special

211
00:09:19,710 --> 00:09:24,210
configuration registers and you say ok I

212
00:09:22,050 --> 00:09:27,270
want to expose these logical devices at

213
00:09:24,210 --> 00:09:28,740
this address on the NPC booth so from

214
00:09:27,270 --> 00:09:30,990
the as the methodology is quite straight

215
00:09:28,740 --> 00:09:32,270
forward on the EC from where we have

216
00:09:30,990 --> 00:09:36,240
been reversing a lot a MIDI controller

217
00:09:32,270 --> 00:09:37,079
you have small extract on the right we

218
00:09:36,240 --> 00:09:39,120
have been reversing about the

219
00:09:37,080 --> 00:09:41,310
embellishment role of yam we're trying

220
00:09:39,120 --> 00:09:43,710
to find all the location in the code

221
00:09:41,310 --> 00:09:46,530
where the MIDI controller configure this

222
00:09:43,710 --> 00:09:49,680
LPC bus to find all the endpoints it was

223
00:09:46,530 --> 00:09:52,110
exposing on the other side on the UEFI

224
00:09:49,680 --> 00:09:54,660
bios side we've been looking for all the

225
00:09:52,110 --> 00:09:57,570
communication with the EC mostly looking

226
00:09:54,660 --> 00:09:59,610
for a dedicated protocol from UDK to SDK

227
00:09:57,570 --> 00:10:03,300
and also from specific modules

228
00:09:59,610 --> 00:10:05,490
provided by Lenovo name it was ECIL exe

229
00:10:03,300 --> 00:10:07,079
and in CL OS mm which which are

230
00:10:05,490 --> 00:10:11,220
responsible for the communication with

231
00:10:07,080 --> 00:10:13,110
zc so once you do all that all that rock

232
00:10:11,220 --> 00:10:15,330
you are able to precisely map or the

233
00:10:13,110 --> 00:10:17,460
logical devices that are exposed to us

234
00:10:15,330 --> 00:10:19,170
and all you can communicate with wisdom

235
00:10:17,460 --> 00:10:21,120
for example if you want to communicate

236
00:10:19,170 --> 00:10:24,270
with logical device number two which is

237
00:10:21,120 --> 00:10:27,510
a CPI EC zero communication channel 0

238
00:10:24,270 --> 00:10:31,620
with a CPI you will simply talk on IO

239
00:10:27,510 --> 00:10:33,420
port 62 and 66 basically and we will

240
00:10:31,620 --> 00:10:35,220
speak more about this because this

241
00:10:33,420 --> 00:10:39,990
communication channel can be used to

242
00:10:35,220 --> 00:10:42,300
update the embedded controller now let's

243
00:10:39,990 --> 00:10:44,340
switch on some attacks on embedded

244
00:10:42,300 --> 00:10:49,979
controller especially on the update

245
00:10:44,340 --> 00:10:52,230
process on Lenovo ThinkPad but before we

246
00:10:49,980 --> 00:10:54,060
started digging in our own research we

247
00:10:52,230 --> 00:10:56,460
want to highlight a previous research

248
00:10:54,060 --> 00:11:00,359
Alex hundred dig in embedded controller

249
00:10:56,460 --> 00:11:02,070
in 2011 from Hitachi and made

250
00:11:00,360 --> 00:11:04,620
presentation on every cone where he

251
00:11:02,070 --> 00:11:08,070
exposing some attacks on SMI handlers

252
00:11:04,620 --> 00:11:10,410
the embedded controller and break the

253
00:11:08,070 --> 00:11:12,300
keyboard controller to sew and make you

254
00:11:10,410 --> 00:11:14,040
Chapman and Hamish coloman did very

255
00:11:12,300 --> 00:11:18,020
interesting functional research on it

256
00:11:14,040 --> 00:11:20,969
and provided us a lot of pointers so how

257
00:11:18,020 --> 00:11:22,980
you seem firmware update process in

258
00:11:20,970 --> 00:11:24,750
general most of the vendors like

259
00:11:22,980 --> 00:11:26,460
gigabyte iso stacks they don't have any

260
00:11:24,750 --> 00:11:28,260
identification for embedded controller

261
00:11:26,460 --> 00:11:31,170
farmers's means they just basically

262
00:11:28,260 --> 00:11:33,569
allow you from the cost send the

263
00:11:31,170 --> 00:11:35,849
sequence of the Commons to the embedded

264
00:11:33,570 --> 00:11:39,360
controller to start start update process

265
00:11:35,850 --> 00:11:41,670
so it's just like design issue but they

266
00:11:39,360 --> 00:11:43,680
just don't out indicate the firmware it

267
00:11:41,670 --> 00:11:46,469
was like very very surprised about that

268
00:11:43,680 --> 00:11:50,280
and they even don't lock the host to

269
00:11:46,470 --> 00:11:55,020
write to this to initiate communication

270
00:11:50,280 --> 00:11:57,510
with ECB and actually we was thinking

271
00:11:55,020 --> 00:12:00,780
okay it's open the door for some

272
00:11:57,510 --> 00:12:02,730
interesting malicious activities and the

273
00:12:00,780 --> 00:12:05,970
ways to gain persistence actually huge

274
00:12:02,730 --> 00:12:07,800
first of all multiple vendors for the

275
00:12:05,970 --> 00:12:09,660
recovery process they didn't lock the

276
00:12:07,800 --> 00:12:11,640
GTECH on the board so basically of

277
00:12:09,660 --> 00:12:14,400
course it's not soldered but the pins

278
00:12:11,640 --> 00:12:16,380
exist and easy to discover with

279
00:12:14,400 --> 00:12:18,840
jiggle-ator what kind of pin out its

280
00:12:16,380 --> 00:12:21,630
cuts and sometimes documentation also on

281
00:12:18,840 --> 00:12:25,590
public or leaked many years for similar

282
00:12:21,630 --> 00:12:30,270
controllers and you see update tool from

283
00:12:25,590 --> 00:12:33,000
OS usually all everything to communicate

284
00:12:30,270 --> 00:12:36,240
with embedded controller and recover all

285
00:12:33,000 --> 00:12:38,850
the sequences of the commands if it's

286
00:12:36,240 --> 00:12:41,880
not other bias components involved in

287
00:12:38,850 --> 00:12:44,400
this process so if the bias leaks

288
00:12:41,880 --> 00:12:47,150
drivers involved as only no finger pads

289
00:12:44,400 --> 00:12:52,470
so it's also possible to basically

290
00:12:47,150 --> 00:12:54,660
attack Dixie driver or SMM driver and

291
00:12:52,470 --> 00:12:56,550
make a second stage which is will be

292
00:12:54,660 --> 00:12:59,310
attack directly embedded controller and

293
00:12:56,550 --> 00:13:01,890
actually this specific attack

294
00:12:59,310 --> 00:13:03,930
it's out of scope for trade model of

295
00:13:01,890 --> 00:13:09,810
embedded controller update process in

296
00:13:03,930 --> 00:13:11,550
many vendors so and even if we see image

297
00:13:09,810 --> 00:13:13,560
have identification additional

298
00:13:11,550 --> 00:13:15,930
identification on the buyers side it's

299
00:13:13,560 --> 00:13:17,750
it's actually separated by design

300
00:13:15,930 --> 00:13:21,170
because you authenticate and weather

301
00:13:17,750 --> 00:13:23,330
control your image then sex and sequence

302
00:13:21,170 --> 00:13:26,360
of command for the update process let's

303
00:13:23,330 --> 00:13:27,830
raise some questions about possibilities

304
00:13:26,360 --> 00:13:30,080
for the race condition which we will

305
00:13:27,830 --> 00:13:33,500
discuss later but what kind of impact in

306
00:13:30,080 --> 00:13:36,890
update process identification bypass can

307
00:13:33,500 --> 00:13:39,560
be actually embedded controller it's

308
00:13:36,890 --> 00:13:41,600
very interesting place for be a

309
00:13:39,560 --> 00:13:44,630
persistent storage to store some

310
00:13:41,600 --> 00:13:47,180
malicious a rootkit and this rootkit can

311
00:13:44,630 --> 00:13:50,180
be signal something to the mine farmer

312
00:13:47,180 --> 00:13:52,250
known as bias and load additional

313
00:13:50,180 --> 00:13:55,040
companions to there it's very

314
00:13:52,250 --> 00:13:57,980
interesting possibility and most of the

315
00:13:55,040 --> 00:13:59,990
teams who think about firmware security

316
00:13:57,980 --> 00:14:02,270
and the biosecurity in the terms of

317
00:13:59,990 --> 00:14:04,520
forensics they you can spy that but

318
00:14:02,270 --> 00:14:09,319
don't think on a bedded controller as a

319
00:14:04,520 --> 00:14:11,630
place for the persistence our target

320
00:14:09,320 --> 00:14:12,830
system for research it's been mainly

321
00:14:11,630 --> 00:14:14,900
lenovo thinkpad

322
00:14:12,830 --> 00:14:16,730
we work on the gigabyte and also stack

323
00:14:14,900 --> 00:14:18,560
just briefly and it was not interesting

324
00:14:16,730 --> 00:14:20,330
for embedded controller specifically

325
00:14:18,560 --> 00:14:24,050
because they just don't out an offical

326
00:14:20,330 --> 00:14:27,589
it and we think like ok let's take one

327
00:14:24,050 --> 00:14:30,770
which is used in enterprise and Tapie 40

328
00:14:27,589 --> 00:14:35,650
and P 50 was our main target so for P 50

329
00:14:30,770 --> 00:14:41,329
it's newer chip from microchip 1653 and

330
00:14:35,650 --> 00:14:43,579
update tools which only initiate update

331
00:14:41,330 --> 00:14:46,640
process for AC but bias actually have

332
00:14:43,580 --> 00:14:50,000
full responsibility for flashing so when

333
00:14:46,640 --> 00:14:52,400
a Dixie driver it CC firmware update

334
00:14:50,000 --> 00:14:53,900
Dixie with this grid which is very

335
00:14:52,400 --> 00:14:56,060
interesting place to look but first of

336
00:14:53,900 --> 00:14:58,819
all we was like ok how the update

337
00:14:56,060 --> 00:15:00,979
package for EC looks like we recover the

338
00:14:58,820 --> 00:15:02,930
structure which is have obvious

339
00:15:00,980 --> 00:15:05,990
signature issue on the beginning but

340
00:15:02,930 --> 00:15:08,660
after that version file size image size

341
00:15:05,990 --> 00:15:21,530
and which kind of algorithm involved for

342
00:15:08,660 --> 00:15:23,920
identification process so and next slide

343
00:15:21,530 --> 00:15:27,220
actually we have

344
00:15:23,920 --> 00:15:29,660
Lenovo ThinkPad update process which is

345
00:15:27,220 --> 00:15:31,550
starting from a prating system with the

346
00:15:29,660 --> 00:15:34,880
decay Phoenix framework

347
00:15:31,550 --> 00:15:38,599
and continue on it's a ma'am driver

348
00:15:34,880 --> 00:15:41,540
which is basically make verification

349
00:15:38,600 --> 00:15:45,350
first and then the function responsible

350
00:15:41,540 --> 00:15:47,000
for flesh and update to the embedded

351
00:15:45,350 --> 00:15:53,420
controller itself and we'll cover

352
00:15:47,000 --> 00:15:55,760
interesting messages on on update to

353
00:15:53,420 --> 00:15:59,000
from a parroting system level and these

354
00:15:55,760 --> 00:16:02,540
two actually have some comments this

355
00:15:59,000 --> 00:16:05,089
system wise on AC firmware update is

356
00:16:02,540 --> 00:16:07,459
unsign it it's very interesting point

357
00:16:05,089 --> 00:16:12,050
which is take us in the place where we

358
00:16:07,459 --> 00:16:12,680
start looking on TP forty and for us was

359
00:16:12,050 --> 00:16:14,660
surprised

360
00:16:12,680 --> 00:16:18,229
GP forty doesn't have any identification

361
00:16:14,660 --> 00:16:20,390
its use the same almost the same dixie

362
00:16:18,230 --> 00:16:23,690
driver but don't how to describe firmer

363
00:16:20,390 --> 00:16:25,250
itself it just basically take embedded

364
00:16:23,690 --> 00:16:28,130
controller image from the operating

365
00:16:25,250 --> 00:16:31,610
system my apt own specific address and

366
00:16:28,130 --> 00:16:34,160
then after that Dixie driver read it

367
00:16:31,610 --> 00:16:37,130
from this memory and flash at with this

368
00:16:34,160 --> 00:16:41,839
sequence of comments so interesting

369
00:16:37,130 --> 00:16:44,899
right but what's the impact so we have

370
00:16:41,839 --> 00:16:47,660
many comments ok how you will be reuse

371
00:16:44,899 --> 00:16:51,050
the sequence of comments if you have a

372
00:16:47,660 --> 00:16:53,630
locked host or how basically it can be

373
00:16:51,050 --> 00:16:55,880
used with active good guard and just for

374
00:16:53,630 --> 00:16:58,550
a Monday would guard is a technology

375
00:16:55,880 --> 00:17:01,250
which is armoring boot sequence

376
00:16:58,550 --> 00:17:03,229
basically it's my additional root of

377
00:17:01,250 --> 00:17:05,270
trust and hardware for secure boot on

378
00:17:03,230 --> 00:17:07,220
your systems and if you want more

379
00:17:05,270 --> 00:17:09,410
information here is a link but when

380
00:17:07,220 --> 00:17:13,100
interesting point is a boot guard

381
00:17:09,410 --> 00:17:16,699
doesn't cover all the Dixie for firmware

382
00:17:13,099 --> 00:17:19,609
volume on the p40 and there is a driver

383
00:17:16,699 --> 00:17:23,929
which is we've been looking for and this

384
00:17:19,609 --> 00:17:26,389
driver is has actually everything to

385
00:17:23,929 --> 00:17:28,550
flash embedded controller firmware and I

386
00:17:26,390 --> 00:17:32,000
was thinking okay what if you just reuse

387
00:17:28,550 --> 00:17:34,220
this driver from you five shell and this

388
00:17:32,000 --> 00:17:35,690
particular part was open additional

389
00:17:34,220 --> 00:17:41,360
possibilities for the supply chain

390
00:17:35,690 --> 00:17:43,370
attacks so but okay but what if we use

391
00:17:41,360 --> 00:17:45,110
this driver and quite just one comment

392
00:17:43,370 --> 00:17:47,809
in before

393
00:17:45,110 --> 00:17:52,969
for basically avoid the identification

394
00:17:47,809 --> 00:17:58,519
and take only the flash part for

395
00:17:52,970 --> 00:18:01,250
embedded controller so let's try deeper

396
00:17:58,519 --> 00:18:06,980
a bit how as a signature check on p40

397
00:18:01,250 --> 00:18:11,679
hooks it's take update image weapon OS

398
00:18:06,980 --> 00:18:14,870
update to basically update image map to

399
00:18:11,679 --> 00:18:18,200
specific address from ass then it's

400
00:18:14,870 --> 00:18:22,279
validation for verifications image is

401
00:18:18,200 --> 00:18:24,529
correct and secure flash it's specific

402
00:18:22,279 --> 00:18:26,330
public key in the capsule update in

403
00:18:24,529 --> 00:18:30,019
which with full firmware and includes

404
00:18:26,330 --> 00:18:32,360
the bias and it's basically mapped by

405
00:18:30,019 --> 00:18:35,210
Dixie driver to the cop corporate

406
00:18:32,360 --> 00:18:38,178
specific runtime structure which is kind

407
00:18:35,210 --> 00:18:43,399
of a list with structures objects inside

408
00:18:38,179 --> 00:18:46,070
the bias runtime so then the Dixie Kong

409
00:18:43,399 --> 00:18:47,928
wait the res a verification is correct

410
00:18:46,070 --> 00:18:51,649
they use the signature from a modded

411
00:18:47,929 --> 00:18:54,110
controller and use this public key which

412
00:18:51,649 --> 00:18:55,459
is basically secure flash public key if

413
00:18:54,110 --> 00:19:00,559
signature is correct

414
00:18:55,460 --> 00:19:03,320
they enable true to boolean variable

415
00:19:00,559 --> 00:19:06,649
global boolean variable and if signature

416
00:19:03,320 --> 00:19:08,330
true then update process started for

417
00:19:06,649 --> 00:19:12,018
flash and the new firmware to the chip

418
00:19:08,330 --> 00:19:14,120
so here is the compiled listing and I

419
00:19:12,019 --> 00:19:16,760
will collect most interesting parts so

420
00:19:14,120 --> 00:19:20,870
basically we get to see image cache

421
00:19:16,760 --> 00:19:23,269
verify see image cache and it's two

422
00:19:20,870 --> 00:19:27,860
separated false right so and just one on

423
00:19:23,269 --> 00:19:31,990
one boolean variable interesting so but

424
00:19:27,860 --> 00:19:35,689
what if we separate verify and flash

425
00:19:31,990 --> 00:19:39,950
oops like it's kind of state machine

426
00:19:35,690 --> 00:19:46,519
which is have possible race condition

427
00:19:39,950 --> 00:19:48,440
right so for me it looks like obvious

428
00:19:46,519 --> 00:19:52,909
place for race condition but not that

429
00:19:48,440 --> 00:19:57,139
fast let's think about how we can attack

430
00:19:52,909 --> 00:19:58,980
be 50 and be 50 actually have a stronger

431
00:19:57,139 --> 00:20:01,649
security boundaries

432
00:19:58,980 --> 00:20:04,919
and especially food guard working

433
00:20:01,650 --> 00:20:07,520
correctly that means we don't we can't

434
00:20:04,919 --> 00:20:11,280
without disabling the boot guard attack

435
00:20:07,520 --> 00:20:14,370
from the five shell the didn't use we

436
00:20:11,280 --> 00:20:17,428
use the Dixie driver so let's try harder

437
00:20:14,370 --> 00:20:19,949
on P 50s oh ho slash access needs to be

438
00:20:17,429 --> 00:20:23,970
enabled just a fall Lenovo maked host

439
00:20:19,950 --> 00:20:26,340
right and read from the cost locked and

440
00:20:23,970 --> 00:20:29,429
for unlock comment it's used like just

441
00:20:26,340 --> 00:20:32,280
simple sequence so we need send this

442
00:20:29,429 --> 00:20:34,830
sequence and with a static password

443
00:20:32,280 --> 00:20:38,460
which is shared before between wires

444
00:20:34,830 --> 00:20:41,309
Dixie driver and DC and after that we

445
00:20:38,460 --> 00:20:45,360
unlock the possibility to write is right

446
00:20:41,309 --> 00:20:48,330
and what if we just replace the sequence

447
00:20:45,360 --> 00:20:49,020
so because also we have a static

448
00:20:48,330 --> 00:20:50,490
password

449
00:20:49,020 --> 00:20:51,960
you remember maybe one of the first

450
00:20:50,490 --> 00:20:54,299
whites were we talking about the

451
00:20:51,960 --> 00:20:58,020
connections between bias and embedded

452
00:20:54,299 --> 00:21:01,410
controller if America value so you know

453
00:20:58,020 --> 00:21:03,299
it's static so basically this static

454
00:21:01,410 --> 00:21:05,400
password you just hard coded in the

455
00:21:03,299 --> 00:21:10,889
Dixie driver and easy to recover and

456
00:21:05,400 --> 00:21:15,230
it's ended just to command to unlock the

457
00:21:10,890 --> 00:21:21,179
cost right so can we basically just easy

458
00:21:15,230 --> 00:21:27,570
do some replay attack unfortunately not

459
00:21:21,179 --> 00:21:31,380
because it's some additional beat set to

460
00:21:27,570 --> 00:21:35,780
walk embedded controller before update

461
00:21:31,380 --> 00:21:41,070
will be started and basically this lock

462
00:21:35,780 --> 00:21:45,770
on early stage bias then bias rebooted

463
00:21:41,070 --> 00:21:50,010
on our result vector and only start

464
00:21:45,770 --> 00:21:52,950
update after that so authentification

465
00:21:50,010 --> 00:21:56,120
normal possible on each sieve is out

466
00:21:52,950 --> 00:21:56,120
reset basically

467
00:22:02,230 --> 00:22:07,659
lanova disclosure timeline so we submit

468
00:22:05,289 --> 00:22:11,408
to lino a picture they assign a specific

469
00:22:07,659 --> 00:22:13,990
and make with us additional call where

470
00:22:11,409 --> 00:22:16,210
we describe of the issue details and

471
00:22:13,990 --> 00:22:19,120
after that we agreed about what kind of

472
00:22:16,210 --> 00:22:22,509
the directions for Pudge it can be

473
00:22:19,120 --> 00:22:24,908
thanks for collaboration with us and we

474
00:22:22,509 --> 00:22:26,379
see takeaways so we're working on the

475
00:22:24,909 --> 00:22:28,679
buyers guard if you marry well your

476
00:22:26,379 --> 00:22:35,559
identification is static so basically

477
00:22:28,679 --> 00:22:38,679
not very hard to reply this stuff can be

478
00:22:35,559 --> 00:22:40,840
abused in some scenarios when you see

479
00:22:38,679 --> 00:22:47,259
Road kit is has possibility to be

480
00:22:40,840 --> 00:22:49,120
involved and we think we see bars got

481
00:22:47,259 --> 00:22:50,830
the female whale you support for this

482
00:22:49,120 --> 00:22:55,418
wept appliance it's not fully

483
00:22:50,830 --> 00:22:57,789
implemented or it just like try to save

484
00:22:55,419 --> 00:23:01,230
some time on this update process for

485
00:22:57,789 --> 00:23:03,879
performance reasons we don't know and

486
00:23:01,230 --> 00:23:06,940
boot guard does not fully protect from

487
00:23:03,879 --> 00:23:10,000
Roush update in runtime as we seen on

488
00:23:06,940 --> 00:23:14,529
the p40 in some cases and what the bios

489
00:23:10,000 --> 00:23:16,269
guard would have a change so let's make

490
00:23:14,529 --> 00:23:19,059
a deep dive to the BIOS guard technology

491
00:23:16,269 --> 00:23:21,399
and wise guard technology actually very

492
00:23:19,059 --> 00:23:23,970
interesting because this technology been

493
00:23:21,399 --> 00:23:28,479
introduced it from the Bratva lines and

494
00:23:23,970 --> 00:23:30,700
especially it was mostly have some

495
00:23:28,480 --> 00:23:34,960
market information from window but not a

496
00:23:30,700 --> 00:23:37,269
lot of details so rationally bias guard

497
00:23:34,960 --> 00:23:39,820
it's a technology which is armor in spy

498
00:23:37,269 --> 00:23:42,970
flash and try to remove responsibility

499
00:23:39,820 --> 00:23:44,918
from a semi I'm for it right and read to

500
00:23:42,970 --> 00:23:47,470
the spy flash to something else

501
00:23:44,919 --> 00:23:49,389
and here's appears like multiple

502
00:23:47,470 --> 00:23:52,450
components of this technology will cover

503
00:23:49,389 --> 00:23:56,129
on our talk and main thing is they

504
00:23:52,450 --> 00:23:59,620
remove write and read to the ACM model

505
00:23:56,129 --> 00:24:02,889
so why is guard known as a platform

506
00:23:59,620 --> 00:24:08,100
flash armor in technology and yeah it's

507
00:24:02,889 --> 00:24:12,740
basically control access over ECM and

508
00:24:08,100 --> 00:24:18,418
PCH lock the spy flash access

509
00:24:12,740 --> 00:24:21,360
not rely on the P fat so wise vacation

510
00:24:18,419 --> 00:24:23,250
mostly embedded an ACM model and

511
00:24:21,360 --> 00:24:28,199
actually same model for BIOS guard is

512
00:24:23,250 --> 00:24:31,260
encrypted by micro code and it is a game

513
00:24:28,200 --> 00:24:33,539
over for malicious updates it's

514
00:24:31,260 --> 00:24:36,350
interesting question because the

515
00:24:33,539 --> 00:24:40,080
technology super complex and you can see

516
00:24:36,350 --> 00:24:45,209
on our next part of presentation how and

517
00:24:40,080 --> 00:24:47,490
where it can be misconfigured so also we

518
00:24:45,210 --> 00:24:49,639
have multiple components involved for

519
00:24:47,490 --> 00:24:54,120
the security and the Intel platforms and

520
00:24:49,639 --> 00:24:56,279
interesting thing all these technologies

521
00:24:54,120 --> 00:24:56,610
and features is disconnected from each

522
00:24:56,279 --> 00:24:59,580
other

523
00:24:56,610 --> 00:25:01,799
think about boot guard it doesn't

524
00:24:59,580 --> 00:25:04,110
communicate with the buyers guard or vfi

525
00:25:01,799 --> 00:25:06,179
each other at all so it's totally

526
00:25:04,110 --> 00:25:07,918
separated features and when the buyout

527
00:25:06,179 --> 00:25:10,769
guard involved in the boot full

528
00:25:07,919 --> 00:25:13,139
protection it just transfer control to

529
00:25:10,769 --> 00:25:16,500
the next stage to the secure boot but

530
00:25:13,139 --> 00:25:19,559
like it's not really well connected so

531
00:25:16,500 --> 00:25:23,130
that means security boundaries can be

532
00:25:19,559 --> 00:25:25,980
very interesting in this place but let's

533
00:25:23,130 --> 00:25:28,980
dig in Tobias guard feature overview so

534
00:25:25,980 --> 00:25:31,980
first of all remember this link on the

535
00:25:28,980 --> 00:25:35,399
bottom because this white it's basically

536
00:25:31,980 --> 00:25:37,590
been found there and very very moved us

537
00:25:35,399 --> 00:25:40,199
forward in our understanding how the

538
00:25:37,590 --> 00:25:42,840
BIOS guard works so first of all we have

539
00:25:40,200 --> 00:25:47,580
a BIOS image where the header and bias

540
00:25:42,840 --> 00:25:50,820
guard script script embedded and

541
00:25:47,580 --> 00:25:53,399
actually after that sign in server signs

542
00:25:50,820 --> 00:25:55,230
this package and creates a bias guard

543
00:25:53,399 --> 00:25:57,629
update package and we recover all the

544
00:25:55,230 --> 00:26:02,000
format how the bus guard update package

545
00:25:57,630 --> 00:26:04,200
loops like so and flash update tools

546
00:26:02,000 --> 00:26:07,470
communicate with the same I'm dry verse

547
00:26:04,200 --> 00:26:11,580
and after that actually only after that

548
00:26:07,470 --> 00:26:14,630
ACM takes control on it and we make

549
00:26:11,580 --> 00:26:14,629
active flashin part

550
00:26:17,419 --> 00:26:24,320
so Lenovo ThinkPad pivot update process

551
00:26:21,320 --> 00:26:27,229
use Lenovo GDK tools of course and

552
00:26:24,320 --> 00:26:29,149
framework have a pretty similar model

553
00:26:27,229 --> 00:26:31,659
when it's mapped on specific address the

554
00:26:29,149 --> 00:26:36,339
buyers image trigger buyers guard to

555
00:26:31,659 --> 00:26:40,070
over SMI handler which is work visa CPI

556
00:26:36,339 --> 00:26:42,999
basically a CPI have specific region

557
00:26:40,070 --> 00:26:46,989
which is trigger it's Mike and lyricists

558
00:26:42,999 --> 00:26:49,459
contain specific values so after that

559
00:26:46,989 --> 00:26:52,339
buyers guard update package basically

560
00:26:49,459 --> 00:26:54,559
was mapped to the memory address with

561
00:26:52,339 --> 00:26:56,479
the size and your trap address and your

562
00:26:54,559 --> 00:27:01,009
trap address actually trigger for the

563
00:26:56,479 --> 00:27:02,779
PCH and bios guard s my said the bus

564
00:27:01,009 --> 00:27:04,940
guard directory wise guard direct

565
00:27:02,779 --> 00:27:08,479
actually huge structure we will talk on

566
00:27:04,940 --> 00:27:12,349
the next slide and very interesting so

567
00:27:08,479 --> 00:27:15,799
and this directory contain address of

568
00:27:12,349 --> 00:27:18,708
ACM and trigger MSR and actually all

569
00:27:15,799 --> 00:27:20,749
this MSR is undocumented and we recover

570
00:27:18,709 --> 00:27:22,909
over reverse engineering of the Dixie

571
00:27:20,749 --> 00:27:26,329
drivers which kind of floats off a

572
00:27:22,909 --> 00:27:29,779
massage should be called so and ACM

573
00:27:26,329 --> 00:27:31,729
triggers microcode flow to verify and

574
00:27:29,779 --> 00:27:34,999
apply bias guard update to reboot

575
00:27:31,729 --> 00:27:37,759
machine so you can see here is the

576
00:27:34,999 --> 00:27:44,629
compiled it flow for initialization

577
00:27:37,759 --> 00:27:46,759
stage of bias guard update process here

578
00:27:44,629 --> 00:27:50,320
is resources which we used for the by

579
00:27:46,759 --> 00:27:52,399
sub base guard research it's mostly

580
00:27:50,320 --> 00:27:56,029
information which is available from

581
00:27:52,399 --> 00:27:58,508
window but not directly described all

582
00:27:56,029 --> 00:28:00,559
the features which is basically have

583
00:27:58,509 --> 00:28:04,839
implemented on the bias guard technology

584
00:28:00,559 --> 00:28:07,309
nowadays also very good introduction

585
00:28:04,839 --> 00:28:11,989
presentation from the Jason Johnson from

586
00:28:07,309 --> 00:28:14,479
Dell firmer security and I briefly look

587
00:28:11,989 --> 00:28:17,119
on this bias guard technology in my

588
00:28:14,479 --> 00:28:18,859
offensive conan 2018 so of course we did

589
00:28:17,119 --> 00:28:20,749
a lot of cross analysis between american

590
00:28:18,859 --> 00:28:23,989
megatrends phoenix and it's basically

591
00:28:20,749 --> 00:28:27,249
show us some pointers where we should

592
00:28:23,989 --> 00:28:29,569
dig in okay no will present to use a

593
00:28:27,249 --> 00:28:30,840
recovery we've made on the bios GL

594
00:28:29,569 --> 00:28:33,480
interface and

595
00:28:30,840 --> 00:28:35,669
start with the benefit are valuable as

596
00:28:33,480 --> 00:28:37,770
exposed by Intel processors for this

597
00:28:35,670 --> 00:28:39,330
first what we're going to tell here we

598
00:28:37,770 --> 00:28:41,370
have as Mysterio and it would be fifty

599
00:28:39,330 --> 00:28:43,649
BIOS implementation which is a

600
00:28:41,370 --> 00:28:47,610
phoenix-based BIOS and also processor

601
00:28:43,650 --> 00:28:49,950
was an Intel skylake family so we have

602
00:28:47,610 --> 00:28:51,360
the other NTFS exposed by the process

603
00:28:49,950 --> 00:28:53,460
off to she brought this BIOS guard

604
00:28:51,360 --> 00:28:55,949
feature of course it come it is exposed

605
00:28:53,460 --> 00:28:59,040
in the form of a set of MSR that you

606
00:28:55,950 --> 00:29:01,380
will manipulate to to activate and to

607
00:28:59,040 --> 00:29:03,750
trigger of the feature the first time si

608
00:29:01,380 --> 00:29:06,210
will want to interact with is the MSR or

609
00:29:03,750 --> 00:29:08,010
X Cee and in this one you will simply

610
00:29:06,210 --> 00:29:10,860
find a flag that tell you is a feature

611
00:29:08,010 --> 00:29:13,200
is you got it or not by the CP next the

612
00:29:10,860 --> 00:29:15,840
next very important reduce MSR register

613
00:29:13,200 --> 00:29:18,090
will be MSR 110 in this one it's like

614
00:29:15,840 --> 00:29:20,490
your status registers posted by ocr'd

615
00:29:18,090 --> 00:29:22,679
feature tube it's especially important

616
00:29:20,490 --> 00:29:24,330
the two lowest one one will tell you is

617
00:29:22,680 --> 00:29:25,980
the feature is an eval and one we tell

618
00:29:24,330 --> 00:29:27,899
you if the feature is locked or not this

619
00:29:25,980 --> 00:29:31,740
is a read/write register so you can

620
00:29:27,900 --> 00:29:34,740
modify it okay so

621
00:29:31,740 --> 00:29:36,990
oh that's BIOS guard world but it has of

622
00:29:34,740 --> 00:29:39,510
course always report both on PCH and

623
00:29:36,990 --> 00:29:43,010
embedded controller part and when it

624
00:29:39,510 --> 00:29:46,379
boots this this controller are locked so

625
00:29:43,010 --> 00:29:49,050
at the boot time by BIOS guard feature I

626
00:29:46,380 --> 00:29:50,490
will in the module I see in it we

627
00:29:49,050 --> 00:29:53,159
believe it is for silicon it will

628
00:29:50,490 --> 00:29:55,380
actually generate an ephemeral value

629
00:29:53,160 --> 00:29:57,870
using the ne1 institution from the

630
00:29:55,380 --> 00:30:00,240
processor itself and this value will be

631
00:29:57,870 --> 00:30:03,659
buried in through adware when you write

632
00:30:00,240 --> 00:30:05,370
it into MSF 117 and this ephemeral value

633
00:30:03,660 --> 00:30:07,110
will also be sent to the embedded

634
00:30:05,370 --> 00:30:09,360
controller in the code we have been

635
00:30:07,110 --> 00:30:11,669
reversing we didn't follow any use of it

636
00:30:09,360 --> 00:30:14,129
on the Edit controller and oh it rocks

637
00:30:11,670 --> 00:30:16,260
is that at a later time at runtime when

638
00:30:14,130 --> 00:30:19,200
you want to figure the BIOS CAD feature

639
00:30:16,260 --> 00:30:21,360
it will the barrios grab a dress you

640
00:30:19,200 --> 00:30:23,400
bought will use this ephemeral value to

641
00:30:21,360 --> 00:30:25,229
kind of authenticate itself to the PC

642
00:30:23,400 --> 00:30:27,570
edge controller if you want if it want

643
00:30:25,230 --> 00:30:29,430
to write inside the spy flash to write

644
00:30:27,570 --> 00:30:32,510
the BIOS for example authenticate

645
00:30:29,430 --> 00:30:36,240
yourself to the EC to prove that the

646
00:30:32,510 --> 00:30:39,480
update attempt comes from secure secure

647
00:30:36,240 --> 00:30:41,460
origin and yes and once you are

648
00:30:39,480 --> 00:30:43,540
returning to this MSR hundred seventeen

649
00:30:41,460 --> 00:30:45,690
the value is totally discarded

650
00:30:43,540 --> 00:30:48,850
that means that even if you have cut a

651
00:30:45,690 --> 00:30:50,620
calyx petition called URL to encode as

652
00:30:48,850 --> 00:30:52,000
operating system liver or venomous mm

653
00:30:50,620 --> 00:30:55,979
you will not be able to access this

654
00:30:52,000 --> 00:30:58,810
value anymore you cannot recover it okay

655
00:30:55,980 --> 00:31:00,820
then we have a very important structure

656
00:30:58,810 --> 00:31:02,679
that is a BIOS gap platform data table

657
00:31:00,820 --> 00:31:04,120
for new literacy that it contains all

658
00:31:02,680 --> 00:31:06,040
the platform dependent static

659
00:31:04,120 --> 00:31:07,570
configuration of the feature it's a

660
00:31:06,040 --> 00:31:09,730
certain pattern feature also it's

661
00:31:07,570 --> 00:31:12,790
initialized quite early in the boot

662
00:31:09,730 --> 00:31:16,270
process of the processor or the boot

663
00:31:12,790 --> 00:31:18,520
sorry and what happens is that it

664
00:31:16,270 --> 00:31:20,860
computes a digest of this table what it

665
00:31:18,520 --> 00:31:23,230
is set up and it is this digest is

666
00:31:20,860 --> 00:31:25,780
returned into a set of four MS are from

667
00:31:23,230 --> 00:31:28,480
111 to an Android protein that means

668
00:31:25,780 --> 00:31:30,610
that we believe this register ms are

669
00:31:28,480 --> 00:31:32,800
being right on e or they are locked once

670
00:31:30,610 --> 00:31:35,169
the feature is enabled and not and that

671
00:31:32,800 --> 00:31:37,300
means that as soon as you have locked

672
00:31:35,170 --> 00:31:39,190
the feature this configuration is

673
00:31:37,300 --> 00:31:40,960
immutable you cannot modify it anymore

674
00:31:39,190 --> 00:31:43,180
because our support will have the value

675
00:31:40,960 --> 00:31:45,010
of the digest and if you try to if you

676
00:31:43,180 --> 00:31:48,370
attempt to modify it then it would be

677
00:31:45,010 --> 00:31:50,980
able to detect the modification so at

678
00:31:48,370 --> 00:31:51,550
this point we are on P I face very early

679
00:31:50,980 --> 00:31:53,710
in the boot

680
00:31:51,550 --> 00:31:56,290
that means the Biot feature is entirely

681
00:31:53,710 --> 00:31:59,530
set up and locked on and then we will

682
00:31:56,290 --> 00:32:01,780
see oh we can use it at runtime there

683
00:31:59,530 --> 00:32:05,350
are two other MSF that will use at right

684
00:32:01,780 --> 00:32:07,480
time the first one is a 115 basically in

685
00:32:05,350 --> 00:32:09,760
that one you will place a pointer on all

686
00:32:07,480 --> 00:32:11,320
the parent of all the arguments of is a

687
00:32:09,760 --> 00:32:12,520
call you want to make this a feature we

688
00:32:11,320 --> 00:32:14,679
will detail later

689
00:32:12,520 --> 00:32:16,420
what are these arguments but phonology

690
00:32:14,680 --> 00:32:17,950
says that you place the pointer on the

691
00:32:16,420 --> 00:32:21,700
parameter of the pressure on you want to

692
00:32:17,950 --> 00:32:23,770
execute in when an MS are 115 and then

693
00:32:21,700 --> 00:32:26,920
you want to figure out the feature and

694
00:32:23,770 --> 00:32:29,230
we simply write into MSF 116 it's like a

695
00:32:26,920 --> 00:32:32,350
Cisco or trigger for the photo BIOS

696
00:32:29,230 --> 00:32:33,160
galaxy Emma speaking about the BIOS

697
00:32:32,350 --> 00:32:35,260
Kardashian

698
00:32:33,160 --> 00:32:37,300
of course we are quite on the boundaries

699
00:32:35,260 --> 00:32:39,250
between software Heine where you can

700
00:32:37,300 --> 00:32:42,629
seek out the same module as a kind of

701
00:32:39,250 --> 00:32:46,420
software plug-in for the AdWords support

702
00:32:42,630 --> 00:32:48,280
its it comes as a file inside the BIOS

703
00:32:46,420 --> 00:32:51,340
image its formats is quite close to the

704
00:32:48,280 --> 00:32:53,980
one that to the boot yard SEM module

705
00:32:51,340 --> 00:32:55,980
from all the module we've been able to

706
00:32:53,980 --> 00:32:59,340
recover of the sizes always

707
00:32:55,980 --> 00:33:01,290
30k of cod it is sign of cross by Intel

708
00:32:59,340 --> 00:33:02,790
and I like it I said it is a free

709
00:33:01,290 --> 00:33:06,360
encrypted so for us it's a pure black

710
00:33:02,790 --> 00:33:08,700
box still we expect this as a module to

711
00:33:06,360 --> 00:33:11,399
implement the BGP TD ash digest

712
00:33:08,700 --> 00:33:13,410
verification update package signature

713
00:33:11,400 --> 00:33:16,260
check also a fictional scenario on the

714
00:33:13,410 --> 00:33:17,910
update package we expected to implement

715
00:33:16,260 --> 00:33:20,250
the script interpreter we will tell more

716
00:33:17,910 --> 00:33:23,130
about the script later also and also to

717
00:33:20,250 --> 00:33:24,240
implement all the flash spy access and

718
00:33:23,130 --> 00:33:25,799
the communication with the embedded

719
00:33:24,240 --> 00:33:30,090
controller if this feature is used by

720
00:33:25,799 --> 00:33:32,639
the implementation and yes this decision

721
00:33:30,090 --> 00:33:37,049
modules come as a binary blob provided

722
00:33:32,640 --> 00:33:39,450
by Intel to the OEM so that was for the

723
00:33:37,049 --> 00:33:41,309
ready address report aware NTFS I know

724
00:33:39,450 --> 00:33:44,460
we will look at the software interface

725
00:33:41,309 --> 00:33:46,649
of the OEM and this case the novo uses a

726
00:33:44,460 --> 00:33:50,340
feature to to implement to secure flash

727
00:33:46,650 --> 00:33:53,610
update we have the biosphere directory

728
00:33:50,340 --> 00:33:55,770
that is the stop people structure that

729
00:33:53,610 --> 00:33:57,719
contains all the parameter that you need

730
00:33:55,770 --> 00:34:01,168
to pass to request a BIOS guard

731
00:33:57,720 --> 00:34:02,640
operation it's very simple it's an array

732
00:34:01,169 --> 00:34:04,770
of six pointer on the first one is a

733
00:34:02,640 --> 00:34:07,260
pointer of the SI modules second one a

734
00:34:04,770 --> 00:34:09,659
pointer of the BGP TT and the third one

735
00:34:07,260 --> 00:34:12,210
is a pointer on the update package all

736
00:34:09,659 --> 00:34:16,530
the elements you want to write into the

737
00:34:12,210 --> 00:34:20,250
spy flash to say simply the service or

738
00:34:16,530 --> 00:34:22,320
last a still mostly unknown to us yes

739
00:34:20,250 --> 00:34:23,730
they are just a quick quick bit you said

740
00:34:22,320 --> 00:34:26,129
if you want to say that one on three one

741
00:34:23,730 --> 00:34:29,149
pointer is in the structure is present

742
00:34:26,129 --> 00:34:31,770
on it so this is BIOS guard directory

743
00:34:29,149 --> 00:34:33,569
then we have the BIOS gap platform data

744
00:34:31,770 --> 00:34:36,030
table that we've been speaking a spoke

745
00:34:33,570 --> 00:34:37,260
already so it contains all the

746
00:34:36,030 --> 00:34:39,300
configuration of the static

747
00:34:37,260 --> 00:34:40,080
configuration of the protection of the

748
00:34:39,300 --> 00:34:42,300
BIOS card feature

749
00:34:40,080 --> 00:34:44,009
it contains for example the i/o pots

750
00:34:42,300 --> 00:34:46,470
that will be used to communicate with a

751
00:34:44,010 --> 00:34:49,050
militant roller and the commands that we

752
00:34:46,469 --> 00:34:52,080
suppose are used to perform the update

753
00:34:49,050 --> 00:34:53,429
with the embedded controller some very

754
00:34:52,080 --> 00:34:55,350
important things also it contains a

755
00:34:53,429 --> 00:34:59,010
digest of the public keys that are used

756
00:34:55,350 --> 00:35:02,520
to sign the chunk of the BIOS BIOS

757
00:34:59,010 --> 00:35:03,869
update camera so that's BIOS so that

758
00:35:02,520 --> 00:35:06,540
ability are the same can verify that

759
00:35:03,869 --> 00:35:09,880
it's signed with the prop rocky and the

760
00:35:06,540 --> 00:35:13,000
cornerstone in this table also

761
00:35:09,880 --> 00:35:15,180
filled us farm array so this stretch

762
00:35:13,000 --> 00:35:18,490
will describe actually run of protected

763
00:35:15,180 --> 00:35:21,250
spy flash ranges by flash addresses and

764
00:35:18,490 --> 00:35:23,410
yeah like we saw just before the exist

765
00:35:21,250 --> 00:35:27,520
or this configuration is still very

766
00:35:23,410 --> 00:35:29,830
early in the boot process so to describe

767
00:35:27,520 --> 00:35:31,810
most farm ranges it's just a very simple

768
00:35:29,830 --> 00:35:34,690
structure with start address and address

769
00:35:31,810 --> 00:35:37,390
and you will describe a set of ranges

770
00:35:34,690 --> 00:35:39,880
that you want to protect with the BIOS

771
00:35:37,390 --> 00:35:42,040
guard feature and as soon as you

772
00:35:39,880 --> 00:35:44,620
describe protected runs like this it

773
00:35:42,040 --> 00:35:46,660
means that you will request you can only

774
00:35:44,620 --> 00:35:49,359
write inside these countries with signed

775
00:35:46,660 --> 00:35:51,790
signed operations and so so interesting

776
00:35:49,360 --> 00:35:54,670
to make a question energies of these

777
00:35:51,790 --> 00:35:56,860
Franzese with information we can get

778
00:35:54,670 --> 00:36:00,730
from the flash map structure to do to

779
00:35:56,860 --> 00:36:02,260
analyze what kind of what parts of the

780
00:36:00,730 --> 00:36:03,940
BIOS match already protected by sea

781
00:36:02,260 --> 00:36:08,950
sponges or example many firmware

782
00:36:03,940 --> 00:36:10,270
recovery humouring cetera okay so now we

783
00:36:08,950 --> 00:36:11,740
have the static who has the

784
00:36:10,270 --> 00:36:13,210
configuration of the protection study

785
00:36:11,740 --> 00:36:14,830
configuration of the protection and we

786
00:36:13,210 --> 00:36:16,900
will want to perform some kind of

787
00:36:14,830 --> 00:36:19,930
operation for example to write some

788
00:36:16,900 --> 00:36:23,560
processes of the flash freeze or new

789
00:36:19,930 --> 00:36:25,359
firmware we will be building up update

790
00:36:23,560 --> 00:36:27,520
package which mostly contains four

791
00:36:25,360 --> 00:36:29,710
elements first is a header the new

792
00:36:27,520 --> 00:36:31,150
script then the buffer that is the data

793
00:36:29,710 --> 00:36:33,370
that you want to write into the flash

794
00:36:31,150 --> 00:36:36,250
and then at the end the cryptographic

795
00:36:33,370 --> 00:36:38,049
material basically the signature of

796
00:36:36,250 --> 00:36:41,770
course of the buffer that is coming just

797
00:36:38,050 --> 00:36:44,290
before like Alex said the feature you

798
00:36:41,770 --> 00:36:47,530
invoke the feature with some scripts

799
00:36:44,290 --> 00:36:49,750
scripts can be completed for sign our

800
00:36:47,530 --> 00:36:52,630
protected operation dynamically

801
00:36:49,750 --> 00:36:55,420
generated at runtime by dedicated module

802
00:36:52,630 --> 00:36:58,180
we can find all the templates that are

803
00:36:55,420 --> 00:37:00,310
used by the by using an implementation

804
00:36:58,180 --> 00:37:04,180
from a novel in a dedicated structure

805
00:37:00,310 --> 00:37:07,240
that is appended at the end of the UFA

806
00:37:04,180 --> 00:37:09,370
image so we have this I pack directory

807
00:37:07,240 --> 00:37:12,339
it comes from the city from the magic of

808
00:37:09,370 --> 00:37:14,920
the structure so we have this directory

809
00:37:12,340 --> 00:37:17,050
that allows you to find all the files

810
00:37:14,920 --> 00:37:18,370
that I use as a template to the fighters

811
00:37:17,050 --> 00:37:20,470
in the green products and the

812
00:37:18,370 --> 00:37:23,350
directories of the very end in a in

813
00:37:20,470 --> 00:37:23,830
purple so we have been reversing the

814
00:37:23,350 --> 00:37:26,020
structure

815
00:37:23,830 --> 00:37:28,060
and we are able to dump all the files

816
00:37:26,020 --> 00:37:31,660
that are described in sexists the first

817
00:37:28,060 --> 00:37:33,970
one is mg drug basically just main ufi

818
00:37:31,660 --> 00:37:36,730
image the main update that we want to

819
00:37:33,970 --> 00:37:39,669
write then we would have had basically a

820
00:37:36,730 --> 00:37:42,040
template for the other perp a CRP which

821
00:37:39,670 --> 00:37:43,930
is a template for the script website

822
00:37:42,040 --> 00:37:47,279
which is a certificate in so template

823
00:37:43,930 --> 00:37:49,419
you will embedding the public keys and

824
00:37:47,280 --> 00:37:51,520
under signature of the chunk we want to

825
00:37:49,420 --> 00:37:54,340
write and pop sign is a big file you

826
00:37:51,520 --> 00:37:56,140
just the collection of all the signature

827
00:37:54,340 --> 00:37:59,530
for all the chunks of the main images

828
00:37:56,140 --> 00:38:01,600
and also the me fight with file a file

829
00:37:59,530 --> 00:38:04,570
with the meaning the name seems to come

830
00:38:01,600 --> 00:38:07,000
from an artifact from the SDK and there

831
00:38:04,570 --> 00:38:10,030
are specific checks into the code that

832
00:38:07,000 --> 00:38:13,690
that verifies that this file are not

833
00:38:10,030 --> 00:38:16,450
used in production no okay

834
00:38:13,690 --> 00:38:18,610
we we found lots of templates into this

835
00:38:16,450 --> 00:38:21,730
I pack structure we will detail them

836
00:38:18,610 --> 00:38:23,140
return first we have upset that bin so

837
00:38:21,730 --> 00:38:26,260
like we said it contains also

838
00:38:23,140 --> 00:38:27,339
cryptographic material mostly the public

839
00:38:26,260 --> 00:38:29,050
cheese that has been used for the

840
00:38:27,340 --> 00:38:31,510
signature it's a signature and try to

841
00:38:29,050 --> 00:38:34,750
digest and we have the big placeholder

842
00:38:31,510 --> 00:38:36,160
for the scenario you take you so you

843
00:38:34,750 --> 00:38:37,750
have the public keys and then the

844
00:38:36,160 --> 00:38:39,790
signature I've replaced earlier it is a

845
00:38:37,750 --> 00:38:42,580
very turn at one time with signature

846
00:38:39,790 --> 00:38:46,300
that is frosted chunk you want to write

847
00:38:42,580 --> 00:38:50,860
it with a flash then you have the

848
00:38:46,300 --> 00:38:52,960
template for the header most so few

849
00:38:50,860 --> 00:38:55,330
informations the most critical one is a

850
00:38:52,960 --> 00:38:57,730
flags field inside that one you have

851
00:38:55,330 --> 00:38:59,440
specific bits that you have to set to

852
00:38:57,730 --> 00:39:00,640
indicate to the bios get the CM that

853
00:38:59,440 --> 00:39:03,550
your person you are going to perform

854
00:39:00,640 --> 00:39:05,350
either right on your race is actually a

855
00:39:03,550 --> 00:39:06,730
sign operation so it needs to check all

856
00:39:05,350 --> 00:39:08,770
the stuff check the signature of the

857
00:39:06,730 --> 00:39:10,720
buffet all you want to write etc the

858
00:39:08,770 --> 00:39:14,170
other field is a platform for us it will

859
00:39:10,720 --> 00:39:17,709
be skylake in this process laptop PCT

860
00:39:14,170 --> 00:39:19,960
skylake skylake processor but just we

861
00:39:17,710 --> 00:39:22,960
this platform have to be quite run

862
00:39:19,960 --> 00:39:25,270
between the values field we can find so

863
00:39:22,960 --> 00:39:27,010
we have almost irrelevant we need to

864
00:39:25,270 --> 00:39:29,830
build a bios gathered aid package so we

865
00:39:27,010 --> 00:39:32,200
will have four header the script that

866
00:39:29,830 --> 00:39:34,600
will be modified a little we'll see how

867
00:39:32,200 --> 00:39:36,819
then rotate buffer the main image is

868
00:39:34,600 --> 00:39:38,610
speaking to chunks of 1000 bytes

869
00:39:36,820 --> 00:39:42,190
and then at the end we have the

870
00:39:38,610 --> 00:39:45,730
signature of these chumps if you request

871
00:39:42,190 --> 00:39:47,380
a sign operation and like we said we're

872
00:39:45,730 --> 00:39:50,170
able to build certain the BIOS guard

873
00:39:47,380 --> 00:39:51,760
directory with a point to us JCM point

874
00:39:50,170 --> 00:39:54,760
on the bt PT d point out by using odd

875
00:39:51,760 --> 00:39:57,640
update package we take a pointer on this

876
00:39:54,760 --> 00:40:00,130
directory we placed it into MSR 115 and

877
00:39:57,640 --> 00:40:05,529
we trigger the execution with right

878
00:40:00,130 --> 00:40:07,600
inside MSL 116 so we children out the

879
00:40:05,530 --> 00:40:09,730
execution of the BIOS got the same what

880
00:40:07,600 --> 00:40:11,710
it will does is that BIOS calcium will

881
00:40:09,730 --> 00:40:14,490
check some stuff like for example that

882
00:40:11,710 --> 00:40:17,020
the bgp TD has not been tampered with

883
00:40:14,490 --> 00:40:20,319
check the signature of some parts and in

884
00:40:17,020 --> 00:40:24,130
we will start the execution of the

885
00:40:20,320 --> 00:40:25,630
script we pass through it as the ACM is

886
00:40:24,130 --> 00:40:27,910
free encrypted it's purely block

887
00:40:25,630 --> 00:40:30,960
Blackbaud so we only been able to

888
00:40:27,910 --> 00:40:33,759
recover some very partial information on

889
00:40:30,960 --> 00:40:35,200
about this script languages from what

890
00:40:33,760 --> 00:40:37,720
we've been able to recover it seems to

891
00:40:35,200 --> 00:40:40,000
be a fixed size instruction set a byte

892
00:40:37,720 --> 00:40:44,439
instructions it always start with 0 1

893
00:40:40,000 --> 00:40:46,600
and always end with FF and we have a few

894
00:40:44,440 --> 00:40:49,330
instructions that are that we've been

895
00:40:46,600 --> 00:40:51,100
able to understand a bit yes so as I

896
00:40:49,330 --> 00:40:53,080
want to set the flash address where you

897
00:40:51,100 --> 00:40:55,120
want to write and there are instruction

898
00:40:53,080 --> 00:40:56,950
to say ok I want to erase some chunks or

899
00:40:55,120 --> 00:41:00,819
on assumptions I say ok I want to write

900
00:40:56,950 --> 00:41:02,980
that check and like this like the

901
00:41:00,820 --> 00:41:05,830
interpreter is in the same or fully

902
00:41:02,980 --> 00:41:08,560
encrypted we have no access to it so

903
00:41:05,830 --> 00:41:10,029
it's difficult to say like we say before

904
00:41:08,560 --> 00:41:12,100
there are two kinds of scripts you

905
00:41:10,030 --> 00:41:14,680
cannot dynamically generated script for

906
00:41:12,100 --> 00:41:17,860
ensign oppression in this case scripts

907
00:41:14,680 --> 00:41:21,040
already basic only for instruction it's

908
00:41:17,860 --> 00:41:24,040
a new start set address right and so

909
00:41:21,040 --> 00:41:26,710
very basic in case you use complicated

910
00:41:24,040 --> 00:41:30,090
scripts for sign oppression then we have

911
00:41:26,710 --> 00:41:33,130
a larger program which is 26 instruction

912
00:41:30,090 --> 00:41:35,290
we said that this script is a template

913
00:41:33,130 --> 00:41:38,380
because the second and third instruction

914
00:41:35,290 --> 00:41:41,380
will be modified on the fly will with

915
00:41:38,380 --> 00:41:44,860
correct flash address that you want to

916
00:41:41,380 --> 00:41:48,460
write into and and the third one you

917
00:41:44,860 --> 00:41:49,660
will patch the the chunk size the size

918
00:41:48,460 --> 00:41:52,210
of the buffers that you want to write

919
00:41:49,660 --> 00:41:53,799
and of course like we said which is

920
00:41:52,210 --> 00:41:56,170
really the cornerstone of the prediction

921
00:41:53,800 --> 00:41:57,310
is that if you want to write inside SF

922
00:41:56,170 --> 00:41:59,620
and described region

923
00:41:57,310 --> 00:42:02,610
you need to have sign oppression

924
00:41:59,620 --> 00:42:05,319
otherwise it will raise an error

925
00:42:02,610 --> 00:42:06,970
yeah we have open questions in this

926
00:42:05,320 --> 00:42:09,550
issue edge because we really not

927
00:42:06,970 --> 00:42:12,250
understand this example why bio script

928
00:42:09,550 --> 00:42:13,900
it can be modified in runtime and from

929
00:42:12,250 --> 00:42:16,510
the previous slides you can understand

930
00:42:13,900 --> 00:42:19,030
how much possibility for the attacker

931
00:42:16,510 --> 00:42:20,710
this bio script has so it's creates

932
00:42:19,030 --> 00:42:22,930
really large attack surface in our

933
00:42:20,710 --> 00:42:25,180
understanding and also like complexity

934
00:42:22,930 --> 00:42:28,029
of technology itself it's kind of

935
00:42:25,180 --> 00:42:31,810
impressive also we was thinking ok ACM

936
00:42:28,030 --> 00:42:34,810
is encrypted and basically we can

937
00:42:31,810 --> 00:42:37,240
control when we load the ACM and also we

938
00:42:34,810 --> 00:42:39,220
control the buyer script on our side so

939
00:42:37,240 --> 00:42:42,009
it's actually open a lot of

940
00:42:39,220 --> 00:42:44,200
possibilities for the black box fastened

941
00:42:42,010 --> 00:42:46,060
for ACM itself even it's encrypted

942
00:42:44,200 --> 00:42:48,850
we can't dump it because it's actually

943
00:42:46,060 --> 00:42:51,009
execute on the lock at hash but we try

944
00:42:48,850 --> 00:42:53,710
it our best actually will be described a

945
00:42:51,010 --> 00:42:56,020
bit later on experiments right and so

946
00:42:53,710 --> 00:42:58,030
not for this research we also found a

947
00:42:56,020 --> 00:43:01,120
lot of interesting cards as you can see

948
00:42:58,030 --> 00:43:03,730
like bad BP DG and script syntax

949
00:43:01,120 --> 00:43:05,650
unexpected opcode all of these error

950
00:43:03,730 --> 00:43:08,740
codes actually can be additional

951
00:43:05,650 --> 00:43:10,540
pointers for black box fighting and you

952
00:43:08,740 --> 00:43:12,399
can basically reduce the scope by

953
00:43:10,540 --> 00:43:14,650
understanding what you exactly fast and

954
00:43:12,400 --> 00:43:15,820
where you failed so what kind of

955
00:43:14,650 --> 00:43:18,520
experiments we did

956
00:43:15,820 --> 00:43:21,700
so actually we did a lot of ACM fun

957
00:43:18,520 --> 00:43:25,060
honestly so we try it with into hardware

958
00:43:21,700 --> 00:43:26,500
debugger DCI access to ACM memory

959
00:43:25,060 --> 00:43:28,900
unfortunately you need additional

960
00:43:26,500 --> 00:43:31,390
unlocks to debug a CMS on the Intel

961
00:43:28,900 --> 00:43:34,150
platform and just normal ACM ad shy

962
00:43:31,390 --> 00:43:37,810
doesn't work properly so we can dump

963
00:43:34,150 --> 00:43:38,820
decrypted ACM from the memory but it was

964
00:43:37,810 --> 00:43:41,920
good try

965
00:43:38,820 --> 00:43:43,990
so we try to replace Vice guard ACM on

966
00:43:41,920 --> 00:43:47,530
different different versions of the

967
00:43:43,990 --> 00:43:50,049
cesium on specific platform and it's

968
00:43:47,530 --> 00:43:53,650
with older versions it's temporarily

969
00:43:50,050 --> 00:43:55,930
brings a laptop but thanks God it can be

970
00:43:53,650 --> 00:43:57,790
refreshed and recovered and because we

971
00:43:55,930 --> 00:44:00,700
just have one target platform with

972
00:43:57,790 --> 00:44:02,980
research and remove a cm from the update

973
00:44:00,700 --> 00:44:05,319
image itself is basically create

974
00:44:02,980 --> 00:44:07,780
interesting flow because it starts whoop

975
00:44:05,320 --> 00:44:11,140
of weird reboots on s3 which is sleep

976
00:44:07,780 --> 00:44:15,640
state and after few tries its recovers

977
00:44:11,140 --> 00:44:19,650
the previous state of firmware so and as

978
00:44:15,640 --> 00:44:23,410
a conclusion we basically want to make a

979
00:44:19,650 --> 00:44:25,540
not-so feature by its guard feature it's

980
00:44:23,410 --> 00:44:28,089
very complex it's a lot of different

981
00:44:25,540 --> 00:44:31,270
parts which can be something go wrong

982
00:44:28,090 --> 00:44:33,580
and strong dependency om when there's

983
00:44:31,270 --> 00:44:36,400
two in told because OMS doesn't control

984
00:44:33,580 --> 00:44:40,390
ACM and they see em version not very

985
00:44:36,400 --> 00:44:44,740
recently yet updated so it's actually we

986
00:44:40,390 --> 00:44:47,890
notice many many platforms just use the

987
00:44:44,740 --> 00:44:50,620
same ACM and even sometimes newer

988
00:44:47,890 --> 00:44:54,129
generation use older ACM version it

989
00:44:50,620 --> 00:44:57,850
might be not older adjust not bias guard

990
00:44:54,130 --> 00:44:59,620
script evolved so you know by AC support

991
00:44:57,850 --> 00:45:04,150
embedded controller support for in

992
00:44:59,620 --> 00:45:07,509
familiar value configure generation and

993
00:45:04,150 --> 00:45:11,470
also for the bias guard scheme it's not

994
00:45:07,510 --> 00:45:13,600
very it's not implement all the features

995
00:45:11,470 --> 00:45:16,870
which is intellectually propose it on

996
00:45:13,600 --> 00:45:18,640
the public and also it's probably just

997
00:45:16,870 --> 00:45:21,700
not follow the reference code or

998
00:45:18,640 --> 00:45:25,060
whatever so it's still limited its

999
00:45:21,700 --> 00:45:28,750
possibility for other farmers also can

1000
00:45:25,060 --> 00:45:30,850
be updated more securely with a bias

1001
00:45:28,750 --> 00:45:33,520
guard but we don't see a disease and

1002
00:45:30,850 --> 00:45:36,009
many implementation details in hands of

1003
00:45:33,520 --> 00:45:39,009
AM which is like of miss configuration

1004
00:45:36,010 --> 00:45:41,890
or supply chain attacks so yeah we're

1005
00:45:39,010 --> 00:45:45,250
implementation can be failed secure

1006
00:45:41,890 --> 00:45:47,350
flash access regions is Pham which we

1007
00:45:45,250 --> 00:45:50,140
show to you how it can be mapped to the

1008
00:45:47,350 --> 00:45:52,839
flash map it can be misconfigured if you

1009
00:45:50,140 --> 00:45:55,049
miss something so then it can create a

1010
00:45:52,840 --> 00:45:58,630
room for the attacker to basically use

1011
00:45:55,050 --> 00:46:02,980
this possibility to basically modify

1012
00:45:58,630 --> 00:46:06,130
some dixie models or even SMM

1013
00:46:02,980 --> 00:46:07,840
if om can be filed and also sign at vs

1014
00:46:06,130 --> 00:46:09,790
and sign a separation this bias guard

1015
00:46:07,840 --> 00:46:10,810
script create a lot of concerns on our

1016
00:46:09,790 --> 00:46:12,310
side come

1017
00:46:10,810 --> 00:46:15,250
occasion between bias and he see

1018
00:46:12,310 --> 00:46:17,920
implemented correctly but not static

1019
00:46:15,250 --> 00:46:19,630
session password right so and recovery

1020
00:46:17,920 --> 00:46:22,960
process of course involved for the bias

1021
00:46:19,630 --> 00:46:25,990
guard falls - and recovery it's very

1022
00:46:22,960 --> 00:46:28,450
very difficult to be make it secure so

1023
00:46:25,990 --> 00:46:31,990
it's also kind of interesting place to

1024
00:46:28,450 --> 00:46:33,970
look for the future research thanks a

1025
00:46:31,990 --> 00:46:35,770
lot for everybody who support us in this

1026
00:46:33,970 --> 00:46:38,109
research and especially we want to thank

1027
00:46:35,770 --> 00:46:41,170
Seeger and in fact for great support of

1028
00:46:38,110 --> 00:46:46,720
Ida Pro specially on the ark disassembly

1029
00:46:41,170 --> 00:46:47,280
part because it's just great thank you

1030
00:46:46,720 --> 00:46:56,609
everybody

1031
00:46:47,280 --> 00:46:56,610
[Applause]

1032
00:47:00,660 --> 00:47:05,890
hi I'm just curious on how you arrived

1033
00:47:04,180 --> 00:47:07,839
at Lenovo and if you did do any

1034
00:47:05,890 --> 00:47:10,600
preliminary tests excuse me can you

1035
00:47:07,840 --> 00:47:11,310
speak a bit more louder because we can't

1036
00:47:10,600 --> 00:47:14,470
hear you

1037
00:47:11,310 --> 00:47:16,600
hello there I was wondering at how you

1038
00:47:14,470 --> 00:47:19,720
arrived at Lenovo and if you did any

1039
00:47:16,600 --> 00:47:23,350
other preliminary tests with say Dell

1040
00:47:19,720 --> 00:47:27,490
and HP and if you suspect that they have

1041
00:47:23,350 --> 00:47:30,009
similar vulnerabilities so probably but

1042
00:47:27,490 --> 00:47:31,240
we don't look on HP or Dell just because

1043
00:47:30,010 --> 00:47:33,520
we have an aha

1044
00:47:31,240 --> 00:47:35,799
so we just use the laptops which we have

1045
00:47:33,520 --> 00:47:40,290
on our a table for as a target platforms

1046
00:47:35,800 --> 00:47:44,770
the Ted so it was main purpose but

1047
00:47:40,290 --> 00:47:47,490
answering on your question because most

1048
00:47:44,770 --> 00:47:50,860
of the vendors use the same practices

1049
00:47:47,490 --> 00:47:57,310
probably it can be same problems on the

1050
00:47:50,860 --> 00:48:01,750
other vendors but we don't know you

1051
00:47:57,310 --> 00:48:06,040
mentioned that T 540 doesn't have EC

1052
00:48:01,750 --> 00:48:09,730
authentication no it's just sorry it has

1053
00:48:06,040 --> 00:48:12,279
easy identification okay for indie boot

1054
00:48:09,730 --> 00:48:16,480
process unfortunately doesn't have and B

1055
00:48:12,280 --> 00:48:20,950
50 has okay but I mean in the boot

1056
00:48:16,480 --> 00:48:23,740
process or when apatite in DC is it

1057
00:48:20,950 --> 00:48:24,549
which kind of a dedication both excuse

1058
00:48:23,740 --> 00:48:27,640
me I

1059
00:48:24,550 --> 00:48:31,300
like for the boot chain does it verify

1060
00:48:27,640 --> 00:48:34,270
the EC image also or these

1061
00:48:31,300 --> 00:48:38,410
authentication is for when a PDA TDC de

1062
00:48:34,270 --> 00:48:43,630
fumer I firmly know we try very detailed

1063
00:48:38,410 --> 00:48:45,640
asking the questions where is this

1064
00:48:43,630 --> 00:48:48,580
authentication sorry you mentioned that

1065
00:48:45,640 --> 00:48:50,650
let's maybe discuss this later in the

1066
00:48:48,580 --> 00:48:52,600
room visa questions because I think it's

1067
00:48:50,650 --> 00:48:56,220
need very detailed exploitation we will

1068
00:48:52,600 --> 00:48:56,220
took like a 5 minutes to explain

1069
00:49:08,060 --> 00:49:13,219
[Applause]

