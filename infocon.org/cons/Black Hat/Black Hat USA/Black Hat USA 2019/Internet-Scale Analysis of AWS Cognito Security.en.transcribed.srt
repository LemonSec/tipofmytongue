1
00:00:00,030 --> 00:00:05,069
good afternoon welcome to internet scale

2
00:00:02,340 --> 00:00:08,389
analysis of AWS cognitive security in

3
00:00:05,069 --> 00:00:11,849
Mandalay Bay Rome Lagoon JKL with

4
00:00:08,389 --> 00:00:14,309
undress Rancho before we begin I have a

5
00:00:11,849 --> 00:00:16,500
few brief notes stop by the business

6
00:00:14,309 --> 00:00:19,619
co-located in Mandalay Bay Oceanside and

7
00:00:16,500 --> 00:00:21,630
shoreline ballrooms on level 2 during

8
00:00:19,619 --> 00:00:22,439
the day in the Welcome Reception at 5:30

9
00:00:21,630 --> 00:00:24,330
p.m. tonight

10
00:00:22,439 --> 00:00:25,619
the blackhead Arsenal is in a business

11
00:00:24,330 --> 00:00:28,348
hall on level 2

12
00:00:25,619 --> 00:00:31,170
join us for the pony Awards in lagoon

13
00:00:28,349 --> 00:00:32,610
JKL at 6:30 p.m. is in this room and

14
00:00:31,170 --> 00:00:36,780
thank you for putting your phones on

15
00:00:32,610 --> 00:00:39,840
vibrate thank you so much hi everybody

16
00:00:36,780 --> 00:00:42,540
good afternoon today I'm going to be

17
00:00:39,840 --> 00:00:47,520
talking about an internet scale analysis

18
00:00:42,540 --> 00:00:49,980
of AWS comido first we are going to

19
00:00:47,520 --> 00:00:52,770
start with patient zero

20
00:00:49,980 --> 00:00:55,038
the first vulnerability that I found and

21
00:00:52,770 --> 00:00:59,399
then we are going to extend it to

22
00:00:55,039 --> 00:01:01,890
internet scale so I was performing a

23
00:00:59,399 --> 00:01:05,549
cloud security assessment on one of my

24
00:01:01,890 --> 00:01:09,080
customers and as part of that assessment

25
00:01:05,549 --> 00:01:14,090
I got read-only credentials for their

26
00:01:09,080 --> 00:01:16,740
AWS account using those credentials I

27
00:01:14,090 --> 00:01:21,600
enumerated all of the permissions all of

28
00:01:16,740 --> 00:01:25,520
the services that were in use by that

29
00:01:21,600 --> 00:01:29,369
account in that list and as you know

30
00:01:25,520 --> 00:01:31,548
Elias has a lot of services in the list

31
00:01:29,369 --> 00:01:35,250
something caught my eye

32
00:01:31,549 --> 00:01:40,140
comedian I never seen that before and

33
00:01:35,250 --> 00:01:43,530
it's not a very common service so that's

34
00:01:40,140 --> 00:01:47,009
the logo for comedo I had no idea what

35
00:01:43,530 --> 00:01:51,450
it was so I went to the documentation

36
00:01:47,009 --> 00:01:53,759
like any good hacker and the

37
00:01:51,450 --> 00:01:58,829
documentation showed me something

38
00:01:53,759 --> 00:02:02,460
beautiful one line that made my day that

39
00:01:58,829 --> 00:02:07,439
line said identity pools which are a

40
00:02:02,460 --> 00:02:12,239
component of kognito enable you the

41
00:02:07,439 --> 00:02:13,370
developer to grant you your users access

42
00:02:12,239 --> 00:02:17,989
to a degree

43
00:02:13,370 --> 00:02:23,420
services so the developer grants and

44
00:02:17,989 --> 00:02:27,230
users access to s3 buckets DynamoDB

45
00:02:23,420 --> 00:02:35,119
tables and almost any other resource in

46
00:02:27,230 --> 00:02:38,379
the AWS account what could go wrong so

47
00:02:35,120 --> 00:02:43,510
during this assessment I was able to

48
00:02:38,379 --> 00:02:47,209
gain full access to the AWS account

49
00:02:43,510 --> 00:02:50,959
exploiting Cognito misconfigurations

50
00:02:47,209 --> 00:02:53,049
and I'm going to first explain how I did

51
00:02:50,959 --> 00:02:57,079
it and then we're going to try to

52
00:02:53,049 --> 00:03:00,340
automate that process the first thing

53
00:02:57,079 --> 00:03:06,709
that I did was to use my read-only

54
00:03:00,340 --> 00:03:09,500
credentials to extract the identity pool

55
00:03:06,709 --> 00:03:14,180
ID which is what you see there in red

56
00:03:09,500 --> 00:03:18,650
from the AWS console I extracted the ID

57
00:03:14,180 --> 00:03:22,459
and I used it in this function this

58
00:03:18,650 --> 00:03:26,380
function is going to take an identity

59
00:03:22,459 --> 00:03:30,590
poetry and return AWS credentials

60
00:03:26,380 --> 00:03:34,940
because that's how commit the works it's

61
00:03:30,590 --> 00:03:39,230
going to give end-users AWS credentials

62
00:03:34,940 --> 00:03:42,109
with some associated permissions from

63
00:03:39,230 --> 00:03:45,260
now on for you guys this is just a black

64
00:03:42,109 --> 00:03:50,120
box you enter identity polity and you

65
00:03:45,260 --> 00:03:52,599
get credentials the next step that I

66
00:03:50,120 --> 00:03:56,389
took in order to own that AWS account

67
00:03:52,599 --> 00:04:00,290
were to enumerate permissions because I

68
00:03:56,389 --> 00:04:03,889
have treated I have credentials but I

69
00:04:00,290 --> 00:04:07,638
had no idea which actions I could take

70
00:04:03,889 --> 00:04:10,160
with those functions so I enumerated

71
00:04:07,639 --> 00:04:13,910
permissions and then use different

72
00:04:10,160 --> 00:04:16,639
privilege escalation techniques to gain

73
00:04:13,910 --> 00:04:21,168
access to elevate privileges and gain

74
00:04:16,639 --> 00:04:25,280
access to the AWS account that was great

75
00:04:21,168 --> 00:04:25,669
my customer was happy I was happy and I

76
00:04:25,280 --> 00:04:30,890
learn

77
00:04:25,670 --> 00:04:34,010
and a lot in the process and I finished

78
00:04:30,890 --> 00:04:37,729
my report and I was asking myself all

79
00:04:34,010 --> 00:04:41,200
right I got one I was able to exploit

80
00:04:37,730 --> 00:04:47,690
one miss configuration in a dahlias

81
00:04:41,200 --> 00:04:51,110
commit Oh are there any other so this is

82
00:04:47,690 --> 00:04:54,740
what kick-started my research how many

83
00:04:51,110 --> 00:04:57,980
customers were at risk how common is

84
00:04:54,740 --> 00:05:03,590
this how many developers are Miss

85
00:04:57,980 --> 00:05:06,380
configuring AWS Cognito and is it

86
00:05:03,590 --> 00:05:08,510
possible to actually measure this and

87
00:05:06,380 --> 00:05:12,620
answer the questions that I'm making

88
00:05:08,510 --> 00:05:17,150
myself of course I'm here so yeah it's

89
00:05:12,620 --> 00:05:22,630
possible this is what's next I'm going

90
00:05:17,150 --> 00:05:26,710
to try to explain enough five minutes

91
00:05:22,630 --> 00:05:29,420
camellia and how it can be misconfigured

92
00:05:26,710 --> 00:05:33,020
then I'm going to show you how to grab

93
00:05:29,420 --> 00:05:35,270
the internet which is great then I'm

94
00:05:33,020 --> 00:05:38,990
going to show you results for this

95
00:05:35,270 --> 00:05:42,880
analysis and perform root cause analysis

96
00:05:38,990 --> 00:05:47,120
try to understand why this happens

97
00:05:42,880 --> 00:05:50,870
introduction to a SS Camino basically

98
00:05:47,120 --> 00:05:56,750
there are two main components user pools

99
00:05:50,870 --> 00:05:57,650
and identity poles user pools store all

100
00:05:56,750 --> 00:06:02,590
the users

101
00:05:57,650 --> 00:06:07,030
it's a directory identity pools provide

102
00:06:02,590 --> 00:06:10,159
AWS credentials for authenticating users

103
00:06:07,030 --> 00:06:13,460
in the de Graaff you can see how the

104
00:06:10,160 --> 00:06:16,600
mobile application talks first to the

105
00:06:13,460 --> 00:06:20,780
user pole and authenticates in some way

106
00:06:16,600 --> 00:06:24,710
then talks to that identity pool in

107
00:06:20,780 --> 00:06:28,520
order to get AWS credentials and finally

108
00:06:24,710 --> 00:06:32,150
the mobile application consumes AWS

109
00:06:28,520 --> 00:06:38,210
services as three dynamodb lambda

110
00:06:32,150 --> 00:06:39,169
functions water in order to understand

111
00:06:38,210 --> 00:06:43,938
this

112
00:06:39,169 --> 00:06:46,490
it's easier if we get a new skates let's

113
00:06:43,939 --> 00:06:50,330
imagine a sample application this

114
00:06:46,490 --> 00:06:53,539
application is just cool topics it

115
00:06:50,330 --> 00:06:57,650
allows users to upload pictures of their

116
00:06:53,539 --> 00:07:00,979
cats because cats are cool and this

117
00:06:57,650 --> 00:07:06,099
sample application allows users to

118
00:07:00,979 --> 00:07:10,068
directly upload to s3 all of the images

119
00:07:06,099 --> 00:07:14,810
and also the metadata like the name of

120
00:07:10,069 --> 00:07:18,830
your cat goes to DynamoDB tables so

121
00:07:14,810 --> 00:07:22,009
there is no server in between the mobile

122
00:07:18,830 --> 00:07:25,490
application is directly consuming AWS

123
00:07:22,009 --> 00:07:27,919
services writing to s3 writing to

124
00:07:25,490 --> 00:07:32,779
DynamoDB tables and all of this is

125
00:07:27,919 --> 00:07:34,810
possible because of cabeza also this

126
00:07:32,779 --> 00:07:38,719
application uses cognitive for

127
00:07:34,810 --> 00:07:40,639
authentication there's something special

128
00:07:38,719 --> 00:07:45,110
about this application that two

129
00:07:40,639 --> 00:07:48,639
different user roles authenticated users

130
00:07:45,110 --> 00:07:51,610
can upload new pictures and

131
00:07:48,639 --> 00:07:54,310
authenticated users can only read

132
00:07:51,610 --> 00:07:57,409
pictures that were previously uploaded

133
00:07:54,310 --> 00:08:00,409
so remember that i authenticated and

134
00:07:57,409 --> 00:08:04,729
unauthenticated and they have different

135
00:08:00,409 --> 00:08:10,810
permissions all of this is done using

136
00:08:04,729 --> 00:08:15,919
the AWS SDK which is available for

137
00:08:10,810 --> 00:08:19,639
Android and for iOS those SDKs are used

138
00:08:15,919 --> 00:08:24,529
to consume the ATIS and to make the life

139
00:08:19,639 --> 00:08:26,870
of the with developers easier if you

140
00:08:24,529 --> 00:08:29,800
want to have the same application in

141
00:08:26,870 --> 00:08:33,469
your browser that's totally possible and

142
00:08:29,800 --> 00:08:38,149
in order to do that you need to use the

143
00:08:33,469 --> 00:08:41,390
JavaScript SDK in that case instead of a

144
00:08:38,149 --> 00:08:44,600
mobile application consuming API from

145
00:08:41,390 --> 00:08:48,769
Amazon you have your browser running

146
00:08:44,600 --> 00:08:51,310
JavaScript consuming those aps in a

147
00:08:48,769 --> 00:08:51,310
direct way

148
00:08:51,850 --> 00:08:59,290
when a developer is creating a new

149
00:08:55,150 --> 00:09:03,150
identity pool this is what he sees he's

150
00:08:59,290 --> 00:09:07,260
going to see a form with three inputs

151
00:09:03,150 --> 00:09:10,120
the identity pool name that's easy an

152
00:09:07,260 --> 00:09:12,730
authentication provider he needs to

153
00:09:10,120 --> 00:09:16,720
choose how he is going to authenticate

154
00:09:12,730 --> 00:09:20,110
users Facebook Google whatever and then

155
00:09:16,720 --> 00:09:24,570
something that's going to be interesting

156
00:09:20,110 --> 00:09:29,100
for us and authenticated identities is

157
00:09:24,570 --> 00:09:31,710
this identity pool going to have or

158
00:09:29,100 --> 00:09:35,740
going to add support for and

159
00:09:31,710 --> 00:09:38,830
authenticated identities so users that

160
00:09:35,740 --> 00:09:44,850
never go through the authentication

161
00:09:38,830 --> 00:09:44,850
provider can still get AWS credentials

162
00:09:45,240 --> 00:09:53,050
once the developer finishes that form

163
00:09:49,620 --> 00:09:58,090
the next step is here and he needs to

164
00:09:53,050 --> 00:10:03,310
assign I am roles to kognito identities

165
00:09:58,090 --> 00:10:09,760
I am roles are like users to summarize

166
00:10:03,310 --> 00:10:13,209
are like users in AWS so a role has

167
00:10:09,760 --> 00:10:16,470
permissions and the developer needs to

168
00:10:13,210 --> 00:10:19,740
assign different permissions for the

169
00:10:16,470 --> 00:10:25,950
authenticated identity and for the

170
00:10:19,740 --> 00:10:30,280
unauthenticated identity permissions in

171
00:10:25,950 --> 00:10:34,510
AWS are defined like this with policies

172
00:10:30,280 --> 00:10:37,510
in this policy we see how we are

173
00:10:34,510 --> 00:10:42,700
allowing a stirry list bucket on a

174
00:10:37,510 --> 00:10:45,939
specific bucket name and a 3-star object

175
00:10:42,700 --> 00:10:49,300
on that same bucket so the developer

176
00:10:45,940 --> 00:10:52,930
needs to create a policy to restrict the

177
00:10:49,300 --> 00:10:55,209
permissions for each of those identities

178
00:10:52,930 --> 00:11:01,719
the authenticated one and the

179
00:10:55,210 --> 00:11:04,720
unauthenticated one once he does that we

180
00:11:01,720 --> 00:11:07,810
get the final screen

181
00:11:04,720 --> 00:11:10,930
we see as developers the identity

182
00:11:07,810 --> 00:11:18,209
polarity ID it's ready to use

183
00:11:10,930 --> 00:11:21,339
it's 100% configured all good so

184
00:11:18,210 --> 00:11:25,470
something to know this before I go to

185
00:11:21,340 --> 00:11:29,170
internet scale is that these IDs are

186
00:11:25,470 --> 00:11:31,800
randomly generated I'm talking about

187
00:11:29,170 --> 00:11:34,839
these that are in red in that screenshot

188
00:11:31,800 --> 00:11:38,439
those are these are unique IDs randomly

189
00:11:34,840 --> 00:11:41,620
generated it's impossible for me as an

190
00:11:38,440 --> 00:11:46,870
attacker to guess one of those IDs I

191
00:11:41,620 --> 00:11:51,100
need to extract them from somewhere all

192
00:11:46,870 --> 00:11:54,940
right now internet scale how I took all

193
00:11:51,100 --> 00:12:00,490
of this knowledge to analyze the

194
00:11:54,940 --> 00:12:04,570
internet so this code snippet shows what

195
00:12:00,490 --> 00:12:07,870
I did and of course I have function

196
00:12:04,570 --> 00:12:11,110
there that says get identity polls from

197
00:12:07,870 --> 00:12:14,580
the internet that doesn't sound very

198
00:12:11,110 --> 00:12:17,800
doable but bear with me for a minute

199
00:12:14,580 --> 00:12:21,940
so for each of the identity pools that

200
00:12:17,800 --> 00:12:25,479
we get from the internet I'm going to

201
00:12:21,940 --> 00:12:27,610
get the credentials using the function

202
00:12:25,480 --> 00:12:30,970
that we saw before in one of the first

203
00:12:27,610 --> 00:12:36,340
slides then enumerate the permissions

204
00:12:30,970 --> 00:12:39,400
for those credentials and in some way we

205
00:12:36,340 --> 00:12:43,180
want to score those permissions we want

206
00:12:39,400 --> 00:12:47,020
to know if they are good bad insecure or

207
00:12:43,180 --> 00:12:50,109
secure and with all of that information

208
00:12:47,020 --> 00:12:55,240
we want to do pretty graphs and go to a

209
00:12:50,110 --> 00:12:58,390
conference so first challenge identity

210
00:12:55,240 --> 00:13:04,570
pool IDs are randomly generated

211
00:12:58,390 --> 00:13:07,960
I can't simply guess them they are too

212
00:13:04,570 --> 00:13:11,110
long to run randomly generated so I need

213
00:13:07,960 --> 00:13:15,250
to extract them from somewhere and that

214
00:13:11,110 --> 00:13:18,370
somewhere was maybe the Google Play

215
00:13:15,250 --> 00:13:21,519
Store but also some other

216
00:13:18,370 --> 00:13:27,660
resources like the common crow github

217
00:13:21,519 --> 00:13:30,670
and so on my first approach was to

218
00:13:27,660 --> 00:13:36,639
download all of the applications from

219
00:13:30,670 --> 00:13:40,649
Google Play decompile them and extract

220
00:13:36,639 --> 00:13:47,499
identity pool IDs from those files using

221
00:13:40,649 --> 00:13:52,329
crap that doesn't work Google Play has

222
00:13:47,499 --> 00:13:57,959
2.6 million applications and that's a

223
00:13:52,329 --> 00:14:00,849
lot and they have protections against

224
00:13:57,959 --> 00:14:05,290
automating downloading of all of the

225
00:14:00,850 --> 00:14:08,680
applications so it's not easy at least I

226
00:14:05,290 --> 00:14:12,240
had a week for this research so it's not

227
00:14:08,680 --> 00:14:15,309
easy to automate the whole process in

228
00:14:12,240 --> 00:14:18,220
industry or download 2.6 million

229
00:14:15,309 --> 00:14:20,800
applications so I had to use something

230
00:14:18,220 --> 00:14:26,319
different what I was really interested

231
00:14:20,800 --> 00:14:32,498
in was the mobile applications that use

232
00:14:26,319 --> 00:14:35,229
the AWS SDK so I found a service

233
00:14:32,499 --> 00:14:38,559
provider that allowed me to filter by

234
00:14:35,230 --> 00:14:42,149
those applications that service provider

235
00:14:38,559 --> 00:14:44,589
allows you to search through all of the

236
00:14:42,149 --> 00:14:47,529
applications in the Google Play Store

237
00:14:44,589 --> 00:14:50,589
and gives you a result of the ones that

238
00:14:47,529 --> 00:14:55,139
use the libraries that you want with

239
00:14:50,589 --> 00:14:57,600
that I got 13,000 applications and

240
00:14:55,139 --> 00:15:01,300
downloaded the applications from

241
00:14:57,600 --> 00:15:03,779
alternative sources apk pure and apk

242
00:15:01,300 --> 00:15:08,559
mirror those don't have as many

243
00:15:03,779 --> 00:15:10,839
limitations and controls as the Google

244
00:15:08,559 --> 00:15:14,529
Play Store so I got all of those

245
00:15:10,839 --> 00:15:17,399
applications I was able to extract a lot

246
00:15:14,529 --> 00:15:20,019
of identity pools and I was ready to

247
00:15:17,399 --> 00:15:25,059
based on that information get

248
00:15:20,019 --> 00:15:28,500
credentials then I moved into the

249
00:15:25,059 --> 00:15:31,750
internet because if you remember from my

250
00:15:28,500 --> 00:15:34,030
use case the

251
00:15:31,750 --> 00:15:36,970
meter service can be consumed by mobile

252
00:15:34,030 --> 00:15:39,850
applications and by JavaScript

253
00:15:36,970 --> 00:15:42,310
applications running in browsers so I

254
00:15:39,850 --> 00:15:47,200
was wondering how many web applications

255
00:15:42,310 --> 00:15:50,650
were using kameido and in order to do

256
00:15:47,200 --> 00:15:54,070
that I started to Google and I try to

257
00:15:50,650 --> 00:15:56,980
Google for Cognito identity credentials

258
00:15:54,070 --> 00:16:01,810
the thing is that Google does an index

259
00:15:56,980 --> 00:16:05,800
the contents of script tags and it will

260
00:16:01,810 --> 00:16:07,930
not own index attributes like the ones

261
00:16:05,800 --> 00:16:10,810
that we see in the first part here that

262
00:16:07,930 --> 00:16:13,810
says Amazon commit identity domain dot

263
00:16:10,810 --> 00:16:19,540
J's so if you search for that you're not

264
00:16:13,810 --> 00:16:22,599
going to find sites that use it you're

265
00:16:19,540 --> 00:16:26,740
going to find blog posts that mention

266
00:16:22,600 --> 00:16:31,720
how to create sites with true needle so

267
00:16:26,740 --> 00:16:32,350
I really needed a way to grab the

268
00:16:31,720 --> 00:16:37,540
Internet

269
00:16:32,350 --> 00:16:41,140
I needed a way to do exactly that

270
00:16:37,540 --> 00:16:45,849
like grab some territory were the whole

271
00:16:41,140 --> 00:16:50,530
internet was and we all know that that

272
00:16:45,850 --> 00:16:58,330
was practiced but yeah actually it

273
00:16:50,530 --> 00:17:03,449
exists so common crow is an open

274
00:16:58,330 --> 00:17:09,910
repository of web crawl data comic roll

275
00:17:03,449 --> 00:17:12,849
stores 2.5 billion web pages they curl

276
00:17:09,910 --> 00:17:17,079
the internet and they store it for you

277
00:17:12,849 --> 00:17:20,698
to analyze it's free you can access this

278
00:17:17,079 --> 00:17:25,359
information this data set for free and

279
00:17:20,699 --> 00:17:28,680
that's what I used I instead of grabbing

280
00:17:25,359 --> 00:17:32,520
the internet I grabbed common crop

281
00:17:28,680 --> 00:17:35,440
common core has 2.5 billion web pages

282
00:17:32,520 --> 00:17:39,420
that's more than enough for my research

283
00:17:35,440 --> 00:17:42,420
I tried first with existing tools

284
00:17:39,420 --> 00:17:44,890
there's one called CC

285
00:17:42,420 --> 00:17:50,200
Empire job

286
00:17:44,890 --> 00:17:54,340
which uses elastic MapReduce in order to

287
00:17:50,200 --> 00:17:58,210
process the contents of common crawl but

288
00:17:54,340 --> 00:18:01,000
that had some stability issues there or

289
00:17:58,210 --> 00:18:03,820
handling was really bad so I had to

290
00:18:01,000 --> 00:18:08,230
create my own I created something called

291
00:18:03,820 --> 00:18:12,490
CC lambda Common Core lambda that uses a

292
00:18:08,230 --> 00:18:18,220
WS lambda to apply regular expressions

293
00:18:12,490 --> 00:18:22,240
to the common crop CC lamda implements

294
00:18:18,220 --> 00:18:25,690
that grip that we are seeing there it

295
00:18:22,240 --> 00:18:29,230
uses 1000 concurrent a degrees lambda

296
00:18:25,690 --> 00:18:34,560
functions running at the same time which

297
00:18:29,230 --> 00:18:38,010
are like a lot of processing power to

298
00:18:34,560 --> 00:18:42,310
download a piece of the common crow

299
00:18:38,010 --> 00:18:45,280
extract like unzip it and then apply

300
00:18:42,310 --> 00:18:50,379
regular expressions to all of the 2.5

301
00:18:45,280 --> 00:18:54,030
billion pages all of the results are

302
00:18:50,380 --> 00:18:58,030
stored on s3 for you to investigate them

303
00:18:54,030 --> 00:19:00,820
this is how CC lambda looks like it's

304
00:18:58,030 --> 00:19:04,060
simply you need to code your own

305
00:19:00,820 --> 00:19:07,659
function in order to apply your regular

306
00:19:04,060 --> 00:19:12,179
expressions and it will extract the info

307
00:19:07,660 --> 00:19:15,940
and store it on s3 for each of the

308
00:19:12,180 --> 00:19:20,710
chunks of information from comic roll it

309
00:19:15,940 --> 00:19:26,920
will take around 3 minutes it's

310
00:19:20,710 --> 00:19:31,630
expensive I invested around 300 USD to

311
00:19:26,920 --> 00:19:33,870
run common to run cc lambda on common

312
00:19:31,630 --> 00:19:33,870
crawl

313
00:19:33,900 --> 00:19:40,960
maybe if I use a little bit of

314
00:19:37,620 --> 00:19:42,580
performance enhancements I would be able

315
00:19:40,960 --> 00:19:48,070
to cut that in half

316
00:19:42,580 --> 00:19:51,610
but it would still be expensive so if

317
00:19:48,070 --> 00:19:56,110
you use it don't blame me I told you

318
00:19:51,610 --> 00:19:58,719
it's expensive other boring sources for

319
00:19:56,110 --> 00:20:02,709
identity pools kidnapped

320
00:19:58,720 --> 00:20:04,330
some others I just consumed the API and

321
00:20:02,710 --> 00:20:09,599
extracted the information so there's

322
00:20:04,330 --> 00:20:12,759
nothing new there so at this point I

323
00:20:09,599 --> 00:20:16,479
extracted an entity pool IDs from the

324
00:20:12,759 --> 00:20:19,960
Google Play Store from the internet and

325
00:20:16,479 --> 00:20:24,039
I have all of those identity pulls ready

326
00:20:19,960 --> 00:20:27,519
to be used once I got the permission

327
00:20:24,039 --> 00:20:28,419
once I got the credentials from those

328
00:20:27,519 --> 00:20:32,470
identity pools

329
00:20:28,419 --> 00:20:36,309
I had to enumerate the permissions I had

330
00:20:32,470 --> 00:20:40,389
simply like API keys and no idea what

331
00:20:36,309 --> 00:20:44,590
they were capable of and I wanted to

332
00:20:40,389 --> 00:20:47,678
enumerate permissions with some

333
00:20:44,590 --> 00:20:51,699
restrictions 32 voice alert and numeric

334
00:20:47,679 --> 00:20:54,970
permissions in I am in hello this one is

335
00:20:51,700 --> 00:20:58,690
using the I am service the other one is

336
00:20:54,970 --> 00:21:02,440
using brute force when you have a set of

337
00:20:58,690 --> 00:21:07,330
credentials in an alias you can call the

338
00:21:02,440 --> 00:21:10,899
I am a PRI I didn't will tell you which

339
00:21:07,330 --> 00:21:14,580
permissions you have but in order to do

340
00:21:10,899 --> 00:21:18,008
that you need permissions for I am and

341
00:21:14,580 --> 00:21:22,749
in this research none of the credentials

342
00:21:18,009 --> 00:21:25,659
that I got had permissions for i/o so I

343
00:21:22,749 --> 00:21:30,879
had to do brute force I had to call each

344
00:21:25,659 --> 00:21:34,119
and every Adria's API and if the

345
00:21:30,879 --> 00:21:37,539
response was forbidden I had no

346
00:21:34,119 --> 00:21:40,449
permission if the response was ok this

347
00:21:37,539 --> 00:21:44,919
is a list of resources then I have a

348
00:21:40,450 --> 00:21:50,729
permission simple brute force the

349
00:21:44,919 --> 00:21:58,169
problem here is that you just want to

350
00:21:50,729 --> 00:22:01,239
test for read-only api's if I would try

351
00:21:58,169 --> 00:22:05,590
to call an API that's going to terminate

352
00:22:01,239 --> 00:22:09,059
an ec2 instance just see if it's

353
00:22:05,590 --> 00:22:11,980
possible to do it if it works I'm

354
00:22:09,059 --> 00:22:16,149
breaking somebody's cloud

355
00:22:11,980 --> 00:22:19,620
and that's no good so I had to just

356
00:22:16,150 --> 00:22:24,179
enumerate they read only permissions and

357
00:22:19,620 --> 00:22:29,969
from that said I had to choose a subset

358
00:22:24,179 --> 00:22:32,799
for only the API calls that returned

359
00:22:29,970 --> 00:22:37,059
infrastructure metadata not the ones

360
00:22:32,799 --> 00:22:39,418
that we turned customer information let

361
00:22:37,059 --> 00:22:43,178
me give you an example their

362
00:22:39,419 --> 00:22:46,470
infrastructure metadata is lists the

363
00:22:43,179 --> 00:22:51,010
names of all the buckets in this account

364
00:22:46,470 --> 00:22:55,660
customer information is give me one file

365
00:22:51,010 --> 00:22:58,390
that is stored on s3 I didn't want to

366
00:22:55,660 --> 00:23:03,070
read customer information I wanted to

367
00:22:58,390 --> 00:23:05,140
read just the names of the buckets and

368
00:23:03,070 --> 00:23:11,168
all of this is of course to avoid going

369
00:23:05,140 --> 00:23:13,690
to jail right nobody wants that so

370
00:23:11,169 --> 00:23:19,179
performance I had to do a lot of API

371
00:23:13,690 --> 00:23:22,390
calls and the existing tools were pretty

372
00:23:19,179 --> 00:23:26,980
bad at performance and they use a single

373
00:23:22,390 --> 00:23:30,610
thread they were testing just a subset

374
00:23:26,980 --> 00:23:33,760
of the API calls that I wanted to test

375
00:23:30,610 --> 00:23:36,990
and actually wanted to test all of the

376
00:23:33,760 --> 00:23:39,700
read-only ones try different tools

377
00:23:36,990 --> 00:23:43,630
didn't like any of those

378
00:23:39,700 --> 00:23:46,090
so I created in my own you see a pattern

379
00:23:43,630 --> 00:23:50,559
here I try something I don't like it

380
00:23:46,090 --> 00:23:53,559
I create my own like every time I wrote

381
00:23:50,559 --> 00:23:58,299
the - it's open-source CC lambda it's

382
00:23:53,559 --> 00:24:01,000
also open source enumerate a.m. it uses

383
00:23:58,299 --> 00:24:05,440
threads it written Python it allows you

384
00:24:01,000 --> 00:24:08,980
to animate permissions for a set of AWS

385
00:24:05,440 --> 00:24:12,010
credentials it looks like this you

386
00:24:08,980 --> 00:24:15,160
provide the credentials and it will

387
00:24:12,010 --> 00:24:21,270
output the different API calls that you

388
00:24:15,160 --> 00:24:24,270
can actually perform all right

389
00:24:21,270 --> 00:24:24,270
statistics

390
00:24:24,789 --> 00:24:35,408
at this point I have a lot of identity

391
00:24:31,240 --> 00:24:39,789
Pilates credentials for each of those

392
00:24:35,409 --> 00:24:42,070
identity Pilates and a list of

393
00:24:39,789 --> 00:24:45,960
permissions associated with each of

394
00:24:42,070 --> 00:24:52,600
those connections and I wanted to know

395
00:24:45,960 --> 00:24:58,360
if there was a pattern somewhere before

396
00:24:52,600 --> 00:25:03,189
we go deep into the result analysis let

397
00:24:58,360 --> 00:25:07,949
me explain something here the privileges

398
00:25:03,190 --> 00:25:13,570
that I enumerated are only for the

399
00:25:07,950 --> 00:25:17,549
unauthenticated role in comedo I did not

400
00:25:13,570 --> 00:25:21,668
perform any type of analysis on the

401
00:25:17,549 --> 00:25:24,850
authenticate that brought something else

402
00:25:21,669 --> 00:25:28,470
to know this and this is kind of common

403
00:25:24,850 --> 00:25:31,509
sense the privileges for the

404
00:25:28,470 --> 00:25:34,600
unauthenticated role are going to be

405
00:25:31,509 --> 00:25:37,659
smaller than the ones associated with

406
00:25:34,600 --> 00:25:39,990
the authenticated role so all of the

407
00:25:37,659 --> 00:25:45,610
results that we are going to see now

408
00:25:39,990 --> 00:25:49,299
would be much worse if I would have done

409
00:25:45,610 --> 00:25:53,860
it with the authenticated role most

410
00:25:49,299 --> 00:25:58,539
applications that I inspected allow

411
00:25:53,860 --> 00:26:01,689
users to sign in create a user in the

412
00:25:58,539 --> 00:26:06,580
application and gain access to the

413
00:26:01,690 --> 00:26:13,269
authenticated role so it's just one more

414
00:26:06,580 --> 00:26:17,139
step I'm lazy I didn't do it so identity

415
00:26:13,269 --> 00:26:20,110
pool sources I was able to with the

416
00:26:17,139 --> 00:26:26,979
different methods get access to a list

417
00:26:20,110 --> 00:26:29,678
of 3100 identity politics those IDs are

418
00:26:26,980 --> 00:26:33,970
distributed like that the great majority

419
00:26:29,679 --> 00:26:36,549
came from the Play Store then a few came

420
00:26:33,970 --> 00:26:38,050
from github common crawl Yandex

421
00:26:36,549 --> 00:26:41,190
and so on

422
00:26:38,050 --> 00:26:47,110
but those identity pools are not all

423
00:26:41,190 --> 00:26:50,050
usable some of them didn't exist at some

424
00:26:47,110 --> 00:26:51,879
point they existed someone created a

425
00:26:50,050 --> 00:26:55,110
mobile application

426
00:26:51,880 --> 00:27:00,010
they used it then the moral application

427
00:26:55,110 --> 00:27:01,719
failed they turn down the AWS account

428
00:27:00,010 --> 00:27:05,430
associated with the moil application

429
00:27:01,720 --> 00:27:10,920
they simply don't exist anymore

430
00:27:05,430 --> 00:27:14,700
others 300 around 300 only allow our

431
00:27:10,920 --> 00:27:18,070
authenticated robes they don't allow and

432
00:27:14,700 --> 00:27:22,720
authenticate the codes and I checked for

433
00:27:18,070 --> 00:27:25,750
that and some others around 100 had an

434
00:27:22,720 --> 00:27:29,200
invalid configuration at one point they

435
00:27:25,750 --> 00:27:33,430
for example remove the I am role

436
00:27:29,200 --> 00:27:36,280
associated with they authenticated or

437
00:27:33,430 --> 00:27:39,370
the unauthenticated identity incognito

438
00:27:36,280 --> 00:27:43,450
so they broke the cognitive

439
00:27:39,370 --> 00:27:47,949
configuration so at the end this

440
00:27:43,450 --> 00:27:51,640
research is based on 2500 identity pools

441
00:27:47,950 --> 00:27:58,150
which is quite a good number to country

442
00:27:51,640 --> 00:28:03,060
conclusions something that I really

443
00:27:58,150 --> 00:28:10,140
struggled with was how do I turn a

444
00:28:03,060 --> 00:28:10,139
permission set as secure or insecure

445
00:28:10,290 --> 00:28:16,480
each application has its own set of

446
00:28:13,300 --> 00:28:22,510
requirements each application needs a

447
00:28:16,480 --> 00:28:25,150
different set of permissions so just one

448
00:28:22,510 --> 00:28:29,020
permission here being enabled doesn't

449
00:28:25,150 --> 00:28:30,670
really really need to be insecure and

450
00:28:29,020 --> 00:28:35,530
the other application and the other way

451
00:28:30,670 --> 00:28:39,100
around but I was able to identify some

452
00:28:35,530 --> 00:28:44,610
API calls that in my opinion are always

453
00:28:39,100 --> 00:28:48,850
an indicator of insecure configurations

454
00:28:44,610 --> 00:28:51,879
so let me show you which API calls those

455
00:28:48,850 --> 00:28:58,079
are first

456
00:28:51,879 --> 00:29:03,039
three list buckets in 1 out of 5

457
00:28:58,079 --> 00:29:06,668
identity pools I was able to run s3 in

458
00:29:03,039 --> 00:29:10,509
these buckets and let's analyze why

459
00:29:06,669 --> 00:29:12,699
that's bad when we are in a mobile

460
00:29:10,509 --> 00:29:18,219
application in the sample application

461
00:29:12,699 --> 00:29:21,279
that we were analyzing before the mobile

462
00:29:18,219 --> 00:29:24,009
application knows were to upload the

463
00:29:21,279 --> 00:29:27,099
picture the modern application knows the

464
00:29:24,009 --> 00:29:31,599
name of the bucket where it will upload

465
00:29:27,099 --> 00:29:36,609
the picture it doesn't need to list

466
00:29:31,599 --> 00:29:40,958
buckets it can just upload it the same

467
00:29:36,609 --> 00:29:43,779
happens with for example lambda List

468
00:29:40,959 --> 00:29:47,859
functions the mobile application knows

469
00:29:43,779 --> 00:29:51,009
the function name to call and it just

470
00:29:47,859 --> 00:29:54,339
calls it it doesn't need to list the

471
00:29:51,009 --> 00:29:59,049
existing functions and maybe it's a

472
00:29:54,339 --> 00:29:59,708
little bit clearer with dynamo dot list

473
00:29:59,049 --> 00:30:02,979
buckets

474
00:29:59,709 --> 00:30:08,309
why does a mobile application need to

475
00:30:02,979 --> 00:30:11,859
list backups for up database engine so

476
00:30:08,309 --> 00:30:15,449
this is a good and strong indicator of

477
00:30:11,859 --> 00:30:18,879
miss configuration of a developer

478
00:30:15,449 --> 00:30:21,369
granting more permissions than the ones

479
00:30:18,879 --> 00:30:25,468
needed by the web application or the

480
00:30:21,369 --> 00:30:29,069
mobile application so what are the five

481
00:30:25,469 --> 00:30:35,409
developers are miss configuring their

482
00:30:29,069 --> 00:30:40,119
cognitive identity post something else

483
00:30:35,409 --> 00:30:42,599
that I tried to do was to identify if an

484
00:30:40,119 --> 00:30:45,369
attacker exploiting this vulnerability

485
00:30:42,599 --> 00:30:50,829
would have access to sensitive

486
00:30:45,369 --> 00:30:55,049
information and just as a reminder I did

487
00:30:50,829 --> 00:30:58,749
not read the contents of s3 buckets and

488
00:30:55,049 --> 00:31:03,819
I did not read the contents of dynamodb

489
00:30:58,749 --> 00:31:05,560
tables but when you perform s3 lift

490
00:31:03,819 --> 00:31:08,590
buckets you get the bag

491
00:31:05,560 --> 00:31:13,030
names and the if the bucket name

492
00:31:08,590 --> 00:31:17,500
contains the word secret password credit

493
00:31:13,030 --> 00:31:20,980
card backup then all right you're

494
00:31:17,500 --> 00:31:23,290
screwed and that goes into the red part

495
00:31:20,980 --> 00:31:26,950
there of my graph it's sensitive

496
00:31:23,290 --> 00:31:33,970
information and I was able to gain

497
00:31:26,950 --> 00:31:36,220
access to 900 s 3 buckets with sensitive

498
00:31:33,970 --> 00:31:40,840
information using all of these

499
00:31:36,220 --> 00:31:47,200
techniques in total I was able to get

500
00:31:40,840 --> 00:31:48,669
access to around 13,000 s3 buckets which

501
00:31:47,200 --> 00:31:52,120
are not public

502
00:31:48,670 --> 00:31:55,090
they are just accessible if you have AWS

503
00:31:52,120 --> 00:31:56,020
credentials for that account they are

504
00:31:55,090 --> 00:32:01,530
not public

505
00:31:56,020 --> 00:32:03,870
they are just owned through AWS commit

506
00:32:01,530 --> 00:32:09,480
something very similar happens with

507
00:32:03,870 --> 00:32:13,300
DynamoDB if the table name contains

508
00:32:09,480 --> 00:32:15,730
password or credit card then it has

509
00:32:13,300 --> 00:32:19,000
sensitive it contains sensitive

510
00:32:15,730 --> 00:32:22,600
information and I was able to gain

511
00:32:19,000 --> 00:32:27,250
access to 37 databases with sensitive

512
00:32:22,600 --> 00:32:30,310
information and the total was 1100 so I

513
00:32:27,250 --> 00:32:32,560
was through these techniques I was able

514
00:32:30,310 --> 00:32:37,389
to gain access to a lot of information

515
00:32:32,560 --> 00:32:40,149
this information stores customer this

516
00:32:37,390 --> 00:32:44,500
these database store customer

517
00:32:40,150 --> 00:32:49,690
information something interesting is

518
00:32:44,500 --> 00:32:52,630
that when you list lambda functions you

519
00:32:49,690 --> 00:32:55,750
don't only get the function name you

520
00:32:52,630 --> 00:33:01,240
only you also get the metadata

521
00:32:55,750 --> 00:33:03,490
associated with that function included

522
00:33:01,240 --> 00:33:05,800
in that metadata you find the

523
00:33:03,490 --> 00:33:11,530
environment variables which are used to

524
00:33:05,800 --> 00:33:15,070
run that function and usually developer

525
00:33:11,530 --> 00:33:19,428
store secrets in those environment

526
00:33:15,070 --> 00:33:22,899
variables so by running lambda the

527
00:33:19,429 --> 00:33:27,169
list functions I got access to around 80

528
00:33:22,899 --> 00:33:31,189
secrets like API keys that awaits

529
00:33:27,169 --> 00:33:38,160
connection strings other obvious

530
00:33:31,190 --> 00:33:39,339
credentials and summer stuff all right

531
00:33:38,160 --> 00:33:43,309
[Music]

532
00:33:39,339 --> 00:33:46,820
root cause analysis when I started with

533
00:33:43,309 --> 00:33:47,418
this research and before going internet

534
00:33:46,820 --> 00:33:51,559
scale

535
00:33:47,419 --> 00:33:56,169
I contacted AWS security just to let

536
00:33:51,559 --> 00:33:58,580
them know that I was going to do it and

537
00:33:56,169 --> 00:34:01,749
through the whole research they were

538
00:33:58,580 --> 00:34:03,918
very supportive of the whole process and

539
00:34:01,749 --> 00:34:07,909
they helped me understand a few things

540
00:34:03,919 --> 00:34:10,129
about Camellia and also help me

541
00:34:07,909 --> 00:34:11,859
understand what they were going to do to

542
00:34:10,129 --> 00:34:16,668
fix it

543
00:34:11,859 --> 00:34:21,020
my understanding of this is that the

544
00:34:16,668 --> 00:34:23,690
root cause for this issue is twofold we

545
00:34:21,020 --> 00:34:28,009
have insecure by default

546
00:34:23,690 --> 00:34:31,490
documentation and we have some issues in

547
00:34:28,010 --> 00:34:36,710
the UI let's start with the unsecure by

548
00:34:31,489 --> 00:34:40,459
default documentation at least before I

549
00:34:36,710 --> 00:34:43,369
reported it there was an example in the

550
00:34:40,460 --> 00:34:47,049
official AWS documentation which is the

551
00:34:43,369 --> 00:34:49,339
source for every developer to used for

552
00:34:47,049 --> 00:34:52,730
writing a new application that uses

553
00:34:49,339 --> 00:34:59,230
either Ria's middle there was an example

554
00:34:52,730 --> 00:35:04,010
there which granted overly permissive

555
00:34:59,230 --> 00:35:06,020
policies to unauthenticated roles so

556
00:35:04,010 --> 00:35:09,950
developers that were just starting with

557
00:35:06,020 --> 00:35:11,029
this copy pasted from there and created

558
00:35:09,950 --> 00:35:14,720
vulnera

559
00:35:11,029 --> 00:35:18,890
kognito applications when I reported

560
00:35:14,720 --> 00:35:25,730
this they added a note and ok they

561
00:35:18,890 --> 00:35:29,680
notice now I believe will see something

562
00:35:25,730 --> 00:35:32,850
else is that and this is kind of ok

563
00:35:29,680 --> 00:35:36,629
there are some restrictions

564
00:35:32,850 --> 00:35:40,830
to the permissions that a developer can

565
00:35:36,630 --> 00:35:43,140
assign to an unauthenticated role so a

566
00:35:40,830 --> 00:35:45,420
developer can assign permissions for

567
00:35:43,140 --> 00:35:50,129
that unauthenticated role in kameido

568
00:35:45,420 --> 00:35:53,250
with only 26 services that's why I am

569
00:35:50,130 --> 00:35:57,390
doesn't work that's why I didn't find

570
00:35:53,250 --> 00:36:01,110
any credentials that had the i''m

571
00:35:57,390 --> 00:36:04,140
service enable so this is good there's

572
00:36:01,110 --> 00:36:07,740
at least some restriction for the

573
00:36:04,140 --> 00:36:09,930
unauthenticated role but still I was

574
00:36:07,740 --> 00:36:13,439
able to gain access to a lot of s3

575
00:36:09,930 --> 00:36:17,220
buckets so a lot of DynamoDB tables I

576
00:36:13,440 --> 00:36:19,140
was able to gain access to lambda

577
00:36:17,220 --> 00:36:21,950
functions the source code of lambda

578
00:36:19,140 --> 00:36:27,890
functions and a lot of information

579
00:36:21,950 --> 00:36:31,500
stored there there's no restriction for

580
00:36:27,890 --> 00:36:33,560
authenticated commit roles so if you're

581
00:36:31,500 --> 00:36:41,510
a developer you can assign any

582
00:36:33,560 --> 00:36:45,090
permission to that authenticated role so

583
00:36:41,510 --> 00:36:49,380
AWS is allowing the developer to shoot

584
00:36:45,090 --> 00:36:53,730
himself in the foot by not performing

585
00:36:49,380 --> 00:36:55,280
enough checks it's allowing developers

586
00:36:53,730 --> 00:36:59,010
to

587
00:36:55,280 --> 00:37:02,460
misconfigure ada responded oh I get it

588
00:36:59,010 --> 00:37:05,730
it's the developer's responsibility it's

589
00:37:02,460 --> 00:37:10,650
on the developer side of the shared

590
00:37:05,730 --> 00:37:14,010
responsibility model it's not 100% AWS

591
00:37:10,650 --> 00:37:21,180
issue but they are not helping enough

592
00:37:14,010 --> 00:37:24,210
that's my understand for developers you

593
00:37:21,180 --> 00:37:27,960
guys watching on YouTube and any other

594
00:37:24,210 --> 00:37:31,910
developer here use least privilege

595
00:37:27,960 --> 00:37:35,250
principle always for anything you do and

596
00:37:31,910 --> 00:37:39,480
specifically for committing this

597
00:37:35,250 --> 00:37:41,310
privilege principle means only give the

598
00:37:39,480 --> 00:37:45,200
required permissions for the

599
00:37:41,310 --> 00:37:46,560
applications work only assign those

600
00:37:45,200 --> 00:37:52,230
permissions

601
00:37:46,560 --> 00:37:56,460
nothing else if your I am policy has a

602
00:37:52,230 --> 00:38:01,460
star somewhere you are doing it wrong

603
00:37:56,460 --> 00:38:05,010
and something that we didn't talk about

604
00:38:01,460 --> 00:38:09,570
during this session is object level

605
00:38:05,010 --> 00:38:13,260
permissions if we have a dynamodb table

606
00:38:09,570 --> 00:38:18,330
that holds information for different

607
00:38:13,260 --> 00:38:22,710
users maybe user a should only be able

608
00:38:18,330 --> 00:38:25,620
to read his rows in that table and not

609
00:38:22,710 --> 00:38:27,630
the rows from user B that's something

610
00:38:25,620 --> 00:38:30,330
that I did not explore during this

611
00:38:27,630 --> 00:38:33,570
research and it's also really important

612
00:38:30,330 --> 00:38:37,410
for developers when they create their

613
00:38:33,570 --> 00:38:41,730
applications all right

614
00:38:37,410 --> 00:38:46,850
bonus when I was doing CC lambda on the

615
00:38:41,730 --> 00:38:51,810
internet I said why not search for

616
00:38:46,850 --> 00:38:56,100
hard-coded credentials people tend to do

617
00:38:51,810 --> 00:39:01,049
that so I did and I found two hundred

618
00:38:56,100 --> 00:39:04,710
eighty hundred credentials and I know

619
00:39:01,050 --> 00:39:08,640
sure why but almost 10% of those were

620
00:39:04,710 --> 00:39:12,540
route accounts with rural accounts you

621
00:39:08,640 --> 00:39:15,410
can destroy the account you can close

622
00:39:12,540 --> 00:39:20,040
the account you can do whatever you want

623
00:39:15,410 --> 00:39:24,029
and from those two hundred eighty

624
00:39:20,040 --> 00:39:26,790
thirty-eight had elevated privileges I

625
00:39:24,030 --> 00:39:29,370
could do almost everything they were not

626
00:39:26,790 --> 00:39:31,680
really hard but I could do almost

627
00:39:29,370 --> 00:39:34,759
everything those connections were

628
00:39:31,680 --> 00:39:39,240
hard-coded somewhere on the internet and

629
00:39:34,760 --> 00:39:41,700
I found from the twenty six that were

630
00:39:39,240 --> 00:39:45,060
real accounts twenty-five came from

631
00:39:41,700 --> 00:39:51,210
common crawl so if you want to do some

632
00:39:45,060 --> 00:39:56,850
evil go to common crow grab there find

633
00:39:51,210 --> 00:39:58,860
real accounts do some big money and of

634
00:39:56,850 --> 00:40:00,900
course I reported everything to the ED

635
00:39:58,860 --> 00:40:02,880
earlier security team

636
00:40:00,900 --> 00:40:11,030
I'm pretty sure some of you guys are

637
00:40:02,880 --> 00:40:14,130
here closing thoughts so there are three

638
00:40:11,030 --> 00:40:17,510
important things that I want you to take

639
00:40:14,130 --> 00:40:22,339
away from this code from this session

640
00:40:17,510 --> 00:40:27,470
first AWS kameido is commonly

641
00:40:22,339 --> 00:40:31,380
misconfigured developers are assigning

642
00:40:27,470 --> 00:40:35,430
excessive privileges for those roles if

643
00:40:31,380 --> 00:40:37,220
you are ever doing an assessment and you

644
00:40:35,430 --> 00:40:42,118
find AWS Candido

645
00:40:37,220 --> 00:40:45,598
check it out learn exploit and gain

646
00:40:42,119 --> 00:40:47,940
access to sensitive information if you

647
00:40:45,599 --> 00:40:53,369
don't do it during your assessment an

648
00:40:47,940 --> 00:40:56,940
attacker is going to do it use CC lambda

649
00:40:53,369 --> 00:41:00,920
to grab the Internet there's a lot of

650
00:40:56,940 --> 00:41:04,079
research which can be triggered by this

651
00:41:00,920 --> 00:41:07,339
just searching the internet in different

652
00:41:04,079 --> 00:41:13,770
ways can give you a lot of information

653
00:41:07,339 --> 00:41:16,980
for evil or for good and use enumerate I

654
00:41:13,770 --> 00:41:21,270
am in order to enumerate permissions

655
00:41:16,980 --> 00:41:25,200
when you get access to a set of AWS

656
00:41:21,270 --> 00:41:28,410
credentials and of course follow me on

657
00:41:25,200 --> 00:41:31,649
Twitter I'm doing a lot of cloud

658
00:41:28,410 --> 00:41:36,450
security research and I post everything

659
00:41:31,650 --> 00:41:41,430
there if you want to continue with this

660
00:41:36,450 --> 00:41:43,799
research you can extract identity polls

661
00:41:41,430 --> 00:41:47,730
from iOS applications

662
00:41:43,800 --> 00:41:52,579
I didn't explore anything related with

663
00:41:47,730 --> 00:41:56,690
iOS maybe there are similar services in

664
00:41:52,579 --> 00:42:01,460
other cloud providers I only focused on

665
00:41:56,690 --> 00:42:05,310
AWS from Needham they might be are they

666
00:42:01,460 --> 00:42:07,849
the easiest thing for you guys to do if

667
00:42:05,310 --> 00:42:09,960
you want to continue this research is

668
00:42:07,849 --> 00:42:14,010
authenticated role analysis

669
00:42:09,960 --> 00:42:15,000
I already focused on any authenticated

670
00:42:14,010 --> 00:42:18,839
Rodan

671
00:42:15,000 --> 00:42:23,640
you could extend this research and see

672
00:42:18,839 --> 00:42:28,349
where it goes with leads and finally and

673
00:42:23,640 --> 00:42:29,420
I don't recommend this but maybe you

674
00:42:28,349 --> 00:42:32,970
guys want to do it

675
00:42:29,420 --> 00:42:36,510
privilege escalation analysis is it

676
00:42:32,970 --> 00:42:39,509
possible for those credentials to be

677
00:42:36,510 --> 00:42:44,240
used to escalate privileges in the AWS

678
00:42:39,510 --> 00:42:47,839
account that's what I did during my

679
00:42:44,240 --> 00:42:52,109
child's activity assessment because my

680
00:42:47,839 --> 00:42:55,529
customer was okay with it I would

681
00:42:52,109 --> 00:42:57,779
recommend you not to do it on random AWS

682
00:42:55,530 --> 00:43:04,740
accounts on the internet it could be

683
00:42:57,780 --> 00:43:06,450
seen as an attack because it is and I'm

684
00:43:04,740 --> 00:43:11,069
not going to do anything related with

685
00:43:06,450 --> 00:43:13,618
this so it's all yours I'm here if you

686
00:43:11,070 --> 00:43:18,000
want to ask me any questions about the

687
00:43:13,619 --> 00:43:18,420
continuing with this research so that's

688
00:43:18,000 --> 00:43:22,320
it

689
00:43:18,420 --> 00:43:24,390
any questions and there are a few

690
00:43:22,320 --> 00:43:27,720
microphones there if you want to ask

691
00:43:24,390 --> 00:43:31,940
questions if not and you want to ask

692
00:43:27,720 --> 00:43:35,910
questions in private I will go to the

693
00:43:31,940 --> 00:43:38,849
room in reef a I believe there's a

694
00:43:35,910 --> 00:43:42,118
question there yeah thanks for the nice

695
00:43:38,849 --> 00:43:44,640
talk so so a question about this

696
00:43:42,119 --> 00:43:47,369
over-provisioning of privileges so

697
00:43:44,640 --> 00:43:50,839
what's your experience with Amazon's

698
00:43:47,369 --> 00:43:55,500
reaction to that so I did some work for

699
00:43:50,839 --> 00:43:58,529
iOS and Android in 2013 or so we saw

700
00:43:55,500 --> 00:44:03,480
that the fact three four years later it

701
00:43:58,530 --> 00:44:06,720
was still published privileges are over

702
00:44:03,480 --> 00:44:12,770
lenient so how's Amazon reacting to what

703
00:44:06,720 --> 00:44:15,598
you found at least in my case they were

704
00:44:12,770 --> 00:44:19,290
very good during the whole process of

705
00:44:15,599 --> 00:44:23,970
communicating and explaining that it was

706
00:44:19,290 --> 00:44:27,089
not their fault it's on the other side

707
00:44:23,970 --> 00:44:28,029
of the shared responsibility model and I

708
00:44:27,089 --> 00:44:31,390
get it

709
00:44:28,030 --> 00:44:34,270
but that shared responsibility model in

710
00:44:31,390 --> 00:44:39,580
my opinion it's not a straight line it's

711
00:44:34,270 --> 00:44:42,370
a gray line it falls in between so but

712
00:44:39,580 --> 00:44:44,740
to that end I'm not too familiar so for

713
00:44:42,370 --> 00:44:48,400
example if you would go and publish an

714
00:44:44,740 --> 00:44:51,490
app in either iOS or Android Market they

715
00:44:48,400 --> 00:44:53,710
they have some background security yes

716
00:44:51,490 --> 00:44:56,459
verification which is not too strong but

717
00:44:53,710 --> 00:44:59,650
that's for Howard public relations

718
00:44:56,460 --> 00:45:01,810
that's for hard-coded credentials

719
00:44:59,650 --> 00:45:06,040
in mobile applications that does not

720
00:45:01,810 --> 00:45:08,770
apply to kognito identity pools

721
00:45:06,040 --> 00:45:11,259
I know but is Amazon trying anything

722
00:45:08,770 --> 00:45:12,130
like that at least the best effort or no

723
00:45:11,260 --> 00:45:17,220
I don't think so

724
00:45:12,130 --> 00:45:19,500
No okay thank you any other questions

725
00:45:17,220 --> 00:45:22,879
No all right thank you

726
00:45:19,500 --> 00:45:22,880
[Applause]

