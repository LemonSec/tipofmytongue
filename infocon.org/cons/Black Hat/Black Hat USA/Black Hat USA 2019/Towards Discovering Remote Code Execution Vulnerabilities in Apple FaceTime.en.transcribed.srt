1
00:00:00,030 --> 00:00:05,609
hey everybody thank you and welcome we

2
00:00:03,780 --> 00:00:07,319
have a great talk today I just want to

3
00:00:05,609 --> 00:00:08,790
take everybody I want to ask everybody

4
00:00:07,319 --> 00:00:10,860
for one favor if you could take a moment

5
00:00:08,790 --> 00:00:12,599
and please silence your cellphone's I

6
00:00:10,860 --> 00:00:14,759
know we were all just at lunch and

7
00:00:12,599 --> 00:00:16,440
getting our messages if you could put

8
00:00:14,759 --> 00:00:17,119
those on vibrate and really appreciate

9
00:00:16,440 --> 00:00:20,460
it

10
00:00:17,119 --> 00:00:21,990
all right so today's talk is going to be

11
00:00:20,460 --> 00:00:23,880
towards discovering remote code

12
00:00:21,990 --> 00:00:25,859
execution vulnerabilities in Apple

13
00:00:23,880 --> 00:00:30,380
FaceTime so if you guys could please

14
00:00:25,859 --> 00:00:36,149
give a warm welcome to Tao and Taylor

15
00:00:30,380 --> 00:00:38,879
thank you thank you very much for coming

16
00:00:36,149 --> 00:00:43,350
to our talk and my name is Kelly Wong

17
00:00:38,879 --> 00:00:45,570
this is my colleague at all and most of

18
00:00:43,350 --> 00:00:48,090
us are from Team Pangu we have been

19
00:00:45,570 --> 00:00:50,940
working on our security research for

20
00:00:48,090 --> 00:00:55,320
very long time and today this talk is

21
00:00:50,940 --> 00:00:57,629
about fist time security and so

22
00:00:55,320 --> 00:01:00,960
motivation we knew that actually now

23
00:00:57,629 --> 00:01:03,180
messaging apps has become very hot

24
00:01:00,960 --> 00:01:05,939
research target and the no matter the

25
00:01:03,180 --> 00:01:08,760
bug bounty programs or other rumors and

26
00:01:05,939 --> 00:01:11,548
as demonstrated by other researchers

27
00:01:08,760 --> 00:01:15,330
both what happened a message could be

28
00:01:11,549 --> 00:01:17,400
remotely compromised actually a few

29
00:01:15,330 --> 00:01:20,158
months ago after we read the blog post

30
00:01:17,400 --> 00:01:24,150
by a Google product tp0

31
00:01:20,159 --> 00:01:28,080
and about how to fighting how to file a

32
00:01:24,150 --> 00:01:30,360
whatsapp and iMessage fist time we

33
00:01:28,080 --> 00:01:33,119
realized that actually the code quality

34
00:01:30,360 --> 00:01:36,360
of such messaging apps is not as good as

35
00:01:33,119 --> 00:01:40,770
we expected so we decided to take a look

36
00:01:36,360 --> 00:01:43,560
especially fist time so the scope of the

37
00:01:40,770 --> 00:01:46,640
talk and in this talk we are going to

38
00:01:43,560 --> 00:01:49,560
show you the code execution flows for

39
00:01:46,640 --> 00:01:52,170
system call initialization and the

40
00:01:49,560 --> 00:01:54,810
connection and we will analyze the

41
00:01:52,170 --> 00:01:58,320
attack surface along this exclusion

42
00:01:54,810 --> 00:02:01,229
flows and we will show you a lot of very

43
00:01:58,320 --> 00:02:05,039
interesting box on this exclusion flows

44
00:02:01,229 --> 00:02:07,530
and but the talk will know we are not go

45
00:02:05,040 --> 00:02:11,129
to the details of the protocol families

46
00:02:07,530 --> 00:02:13,760
used by this time like Sassoon our TPS

47
00:02:11,129 --> 00:02:16,730
RTP and so on also the

48
00:02:13,760 --> 00:02:19,129
we will not talk about how the audio or

49
00:02:16,730 --> 00:02:21,619
video streams encrypted or decrypted

50
00:02:19,129 --> 00:02:24,768
please refer to other related to work

51
00:02:21,620 --> 00:02:27,620
for more information and this is the

52
00:02:24,769 --> 00:02:30,260
after end of the talk and Paul will

53
00:02:27,620 --> 00:02:32,599
continue to introduce how office time

54
00:02:30,260 --> 00:02:35,420
call is initialized and connected and

55
00:02:32,599 --> 00:02:37,760
analyze the text surface after then I

56
00:02:35,420 --> 00:02:45,200
will show you some very interesting box

57
00:02:37,760 --> 00:02:48,170
under conclude the talk okay so this is

58
00:02:45,200 --> 00:02:52,310
the this time outs loop running on Mac

59
00:02:48,170 --> 00:02:55,518
OS it looks like this a single

60
00:02:52,310 --> 00:02:59,900
application but in fact first time is

61
00:02:55,519 --> 00:03:04,400
consists of multi-process 15 app

62
00:02:59,900 --> 00:03:07,690
provides the basic UI framework and the

63
00:03:04,400 --> 00:03:12,319
cross service D is responsible for

64
00:03:07,690 --> 00:03:14,780
provides a function on the left side the

65
00:03:12,319 --> 00:03:18,200
main features associated with our talk

66
00:03:14,780 --> 00:03:21,319
is these three a first car serviced

67
00:03:18,200 --> 00:03:24,950
cursors D will manage the cost leaders

68
00:03:21,319 --> 00:03:28,099
of this time second coastal council

69
00:03:24,950 --> 00:03:31,668
steel will be responsible for response

70
00:03:28,099 --> 00:03:35,660
the UI triggered in words and the last

71
00:03:31,669 --> 00:03:37,790
last cursory Steve will provide a

72
00:03:35,660 --> 00:03:42,019
communication bridge between AV

73
00:03:37,790 --> 00:03:44,810
conference T and identity the function

74
00:03:42,019 --> 00:03:48,500
on the right side is power

75
00:03:44,810 --> 00:03:52,310
powered by AV conference T on Mac OS or

76
00:03:48,500 --> 00:03:55,190
media server D on iOS they were produced

77
00:03:52,310 --> 00:03:59,049
and hindering the first time video or

78
00:03:55,190 --> 00:04:02,150
audio streams so we can consider that

79
00:03:59,049 --> 00:04:04,690
fist time consists of the three major

80
00:04:02,150 --> 00:04:08,810
major components

81
00:04:04,690 --> 00:04:10,000
this is wing when a user tries to make a

82
00:04:08,810 --> 00:04:12,949
system call

83
00:04:10,000 --> 00:04:17,029
the user will need to click the button

84
00:04:12,949 --> 00:04:19,760
on the left side then faced an app will

85
00:04:17,029 --> 00:04:22,369
generate a notification we can call it a

86
00:04:19,760 --> 00:04:26,030
notification call then a notification

87
00:04:22,370 --> 00:04:27,230
will be handled by the cursor is T cos

88
00:04:26,030 --> 00:04:29,599
OST will

89
00:04:27,230 --> 00:04:33,200
call the function perform star core

90
00:04:29,600 --> 00:04:36,320
action and the Zenko service T well he

91
00:04:33,200 --> 00:04:41,479
walks the chorus corresponding handler

92
00:04:36,320 --> 00:04:44,360
to create new invitation so cos T will

93
00:04:41,480 --> 00:04:46,580
send an explicit message to every

94
00:04:44,360 --> 00:04:49,030
conference T to get the invitation date

95
00:04:46,580 --> 00:04:54,289
I store the function prepare with

96
00:04:49,030 --> 00:04:57,080
configuration the amide state is

97
00:04:54,290 --> 00:04:59,900
consists of media blah blah as keyblob

98
00:04:57,080 --> 00:05:02,479
and as some other informations media

99
00:04:59,900 --> 00:05:05,870
biloba contains the configuration for

100
00:05:02,480 --> 00:05:08,080
audio and video streams as keep log

101
00:05:05,870 --> 00:05:12,850
contains the encryption and decryption

102
00:05:08,080 --> 00:05:12,849
parameters for audio and video streams

103
00:05:13,120 --> 00:05:21,410
after AV complicity generates the plops

104
00:05:16,730 --> 00:05:24,830
the it will send back to cáceres T cos

105
00:05:21,410 --> 00:05:29,630
OSD and we are continues to encapsulate

106
00:05:24,830 --> 00:05:32,539
more information after that conservative

107
00:05:29,630 --> 00:05:37,300
passes the imitation date to attend

108
00:05:32,540 --> 00:05:37,300
service T for further encapsulation

109
00:05:37,360 --> 00:05:43,130
identity or we can call it identity

110
00:05:40,190 --> 00:05:46,010
service demon it's a system process that

111
00:05:43,130 --> 00:05:50,390
handles credential for IT service

112
00:05:46,010 --> 00:05:53,960
including iCloud and iMessage it also

113
00:05:50,390 --> 00:05:57,800
connects to computers and iOS device on

114
00:05:53,960 --> 00:06:01,969
your local network to cordon arey phone

115
00:05:57,800 --> 00:06:04,550
calls across mode motive devices so I

116
00:06:01,970 --> 00:06:06,680
tend service T well continues to

117
00:06:04,550 --> 00:06:11,810
encapsulate more information and then

118
00:06:06,680 --> 00:06:14,540
passes it to a PSD Obst is a so we can

119
00:06:11,810 --> 00:06:17,030
also call it Apple push service daemon

120
00:06:14,540 --> 00:06:20,600
is that is responsible for sending and

121
00:06:17,030 --> 00:06:22,549
receiving post notification a PSD also

122
00:06:20,600 --> 00:06:27,400
maintains a reliable and a circular

123
00:06:22,550 --> 00:06:30,650
connection to a server so if a PhD will

124
00:06:27,400 --> 00:06:33,890
continue to serialize the whoo-ho

125
00:06:30,650 --> 00:06:37,940
invitation date into an struct called a

126
00:06:33,890 --> 00:06:40,370
PS message and then send it up a server

127
00:06:37,940 --> 00:06:44,000
wing and power

128
00:06:40,370 --> 00:06:46,490
sent a notification to Apple Apple

129
00:06:44,000 --> 00:06:49,610
that's not single simply forwarded to

130
00:06:46,490 --> 00:06:53,090
destination instead I will modify

131
00:06:49,610 --> 00:06:56,510
parallels in the notification so it's

132
00:06:53,090 --> 00:07:00,138
important for us to find out which is

133
00:06:56,510 --> 00:07:02,570
which state is controller we can control

134
00:07:00,139 --> 00:07:05,030
so we were comparing the notification

135
00:07:02,570 --> 00:07:09,229
sent out and a notification received on

136
00:07:05,030 --> 00:07:13,729
the remote sites so we find out the sum

137
00:07:09,229 --> 00:07:16,010
of data we can control observer now well

138
00:07:13,729 --> 00:07:19,130
forward notification to the Kali and

139
00:07:16,010 --> 00:07:24,320
point according to the content of of the

140
00:07:19,130 --> 00:07:28,370
ApS message the remote a PSD will desire

141
00:07:24,320 --> 00:07:33,710
lies the ApS message this is how it

142
00:07:28,370 --> 00:07:38,330
looks like in DB on the left side right

143
00:07:33,710 --> 00:07:40,669
side we send breakpoints in a PSD masse

144
00:07:38,330 --> 00:07:42,859
the desire ization function in a

145
00:07:40,669 --> 00:07:46,940
debugger and check the received a

146
00:07:42,860 --> 00:07:52,490
notification if the key AVS protocol

147
00:07:46,940 --> 00:07:55,250
command a is 10 and the value of ApS

148
00:07:52,490 --> 00:07:58,010
protocol payload and ApS protocol topic

149
00:07:55,250 --> 00:08:04,039
hash care is a binary which is a modern

150
00:07:58,010 --> 00:08:07,340
for the later work a PSD we are

151
00:08:04,039 --> 00:08:10,389
according to the ApS protocol topic hash

152
00:08:07,340 --> 00:08:13,609
and ApS protocol command received and

153
00:08:10,389 --> 00:08:17,300
delivers delivers the payload of the

154
00:08:13,610 --> 00:08:21,080
notification to attend service D we also

155
00:08:17,300 --> 00:08:25,250
set breakpoints in identity and check

156
00:08:21,080 --> 00:08:30,198
the received invitation it looks like

157
00:08:25,250 --> 00:08:32,929
like the picture on the right side the

158
00:08:30,199 --> 00:08:36,169
value of the value of key the value of

159
00:08:32,929 --> 00:08:39,559
key C is the most is the most important

160
00:08:36,169 --> 00:08:41,478
it's in the case that which function we

161
00:08:39,559 --> 00:08:48,949
are being invoked to handle this

162
00:08:41,479 --> 00:08:52,820
notification as invite a C is 200 and a

163
00:08:48,950 --> 00:08:54,260
13-2 so the notification will be handled

164
00:08:52,820 --> 00:08:58,330
by the function

165
00:08:54,260 --> 00:09:01,670
incoming invitation with payload and

166
00:08:58,330 --> 00:09:05,960
then identity will continue to forward

167
00:09:01,670 --> 00:09:08,689
the date to car service T cross OST will

168
00:09:05,960 --> 00:09:12,220
pass binary pillows through the function

169
00:09:08,690 --> 00:09:18,410
and after pass it looks like this it

170
00:09:12,220 --> 00:09:20,630
looks like an S dictionary and as n

171
00:09:18,410 --> 00:09:22,520
casuistry you will continue to forward

172
00:09:20,630 --> 00:09:25,460
the blobs to a big conference the

173
00:09:22,520 --> 00:09:29,360
Armenia bla media server D on the remote

174
00:09:25,460 --> 00:09:32,510
site and we can see here the Kohli the

175
00:09:29,360 --> 00:09:36,770
AV conference T or media server D of the

176
00:09:32,510 --> 00:09:42,860
remote side has received as the blobs

177
00:09:36,770 --> 00:09:45,860
come from the local side in a now you I

178
00:09:42,860 --> 00:09:48,920
will pop out to tell you that you have a

179
00:09:45,860 --> 00:09:53,630
new Vista in white do you want to accept

180
00:09:48,920 --> 00:09:57,079
and and we click the accept button

181
00:09:53,630 --> 00:09:58,640
it's a will generate Huai notification

182
00:09:57,080 --> 00:10:01,970
we can call it a you identification

183
00:09:58,640 --> 00:10:06,740
except so the UI notification will be

184
00:10:01,970 --> 00:10:08,900
sent across service T and as a casa SD

185
00:10:06,740 --> 00:10:12,710
will also handle the notifications

186
00:10:08,900 --> 00:10:17,689
through and so another handler function

187
00:10:12,710 --> 00:10:22,400
and to the almost the same thing just

188
00:10:17,690 --> 00:10:25,700
waited on the local sides it will get in

189
00:10:22,400 --> 00:10:29,110
my date it also called invited because

190
00:10:25,700 --> 00:10:32,200
it has Media Browser and s keyblob and

191
00:10:29,110 --> 00:10:34,820
gets it from AV conference T and

192
00:10:32,200 --> 00:10:39,110
encapsulate more information and

193
00:10:34,820 --> 00:10:42,440
ascended back to identity identity will

194
00:10:39,110 --> 00:10:44,960
pass the date to a PSD and a PSD will

195
00:10:42,440 --> 00:10:47,680
encapsulate I will serialize the APS

196
00:10:44,960 --> 00:10:51,910
message in a Senate observer

197
00:10:47,680 --> 00:10:56,870
observer will forward the forward the

198
00:10:51,910 --> 00:11:00,260
notification to our caller a PSD caller

199
00:10:56,870 --> 00:11:03,320
a PSD will desire lies the disallow the

200
00:11:00,260 --> 00:11:07,819
APS message and a passed the date to

201
00:11:03,320 --> 00:11:12,200
attend service T and now the the

202
00:11:07,820 --> 00:11:15,950
the real value of CL k c is the 233

203
00:11:12,200 --> 00:11:19,700
which means this notification is accept

204
00:11:15,950 --> 00:11:23,060
a message and a tell tell our local side

205
00:11:19,700 --> 00:11:26,960
that the Kali have has already accepts

206
00:11:23,060 --> 00:11:29,989
you in white and identity well past the

207
00:11:26,960 --> 00:11:33,200
date to cursor is D Co service T will

208
00:11:29,990 --> 00:11:35,690
pass the media blob and STPs key blob of

209
00:11:33,200 --> 00:11:39,820
remote side through Ava conference D and

210
00:11:35,690 --> 00:11:42,490
now the information we need to to make

211
00:11:39,820 --> 00:11:45,380
connection has been changed and

212
00:11:42,490 --> 00:11:48,470
meanwhile I tensors D well create

213
00:11:45,380 --> 00:11:53,060
sockets for session based connections

214
00:11:48,470 --> 00:11:55,130
and another notification called quick

215
00:11:53,060 --> 00:11:57,829
relay Apple quick release our work

216
00:11:55,130 --> 00:12:00,560
ordinary color and a colleague computer

217
00:11:57,830 --> 00:12:03,290
at direct direct connection but we don't

218
00:12:00,560 --> 00:12:06,079
give a detail introduced here because

219
00:12:03,290 --> 00:12:08,930
lot of dates in quick related

220
00:12:06,080 --> 00:12:11,600
notification is not a controllable in

221
00:12:08,930 --> 00:12:15,109
and out the color and a colleague can

222
00:12:11,600 --> 00:12:18,800
see in hair or hear each other with this

223
00:12:15,110 --> 00:12:21,380
time but in fact and now all the dates

224
00:12:18,800 --> 00:12:26,479
is trend transformed from a through the

225
00:12:21,380 --> 00:12:29,630
soccer with UDP or TCP I 10 service T is

226
00:12:26,480 --> 00:12:33,760
responsible for the first layer packet

227
00:12:29,630 --> 00:12:37,660
Henry and a packet area dispatching

228
00:12:33,760 --> 00:12:40,880
ideas the function ideas you tp-link

229
00:12:37,660 --> 00:12:44,000
process incoming packets will call the

230
00:12:40,880 --> 00:12:50,450
function regime message and pass the map

231
00:12:44,000 --> 00:12:53,090
acetate to IDs global link and then this

232
00:12:50,450 --> 00:12:55,940
function I then service and English

233
00:12:53,090 --> 00:12:58,330
function identity will identify Stan

234
00:12:55,940 --> 00:13:04,150
message according to the magic number

235
00:12:58,330 --> 00:13:06,440
which is 4 - a 4 1 - 2 1 and then

236
00:13:04,150 --> 00:13:09,439
identity passes

237
00:13:06,440 --> 00:13:13,190
term message through a handler the

238
00:13:09,440 --> 00:13:15,440
handler will well with further will

239
00:13:13,190 --> 00:13:18,080
further call different handlers

240
00:13:15,440 --> 00:13:19,660
according to different estimate each a

241
00:13:18,080 --> 00:13:21,470
type

242
00:13:19,660 --> 00:13:24,770
besides the

243
00:13:21,470 --> 00:13:28,910
sh many other type of package also

244
00:13:24,770 --> 00:13:31,100
handled by identity itself the rest of

245
00:13:28,910 --> 00:13:34,699
package will be distributed to different

246
00:13:31,100 --> 00:13:39,620
process processes such as a V conference

247
00:13:34,700 --> 00:13:46,060
T and this package like RTP packet or

248
00:13:39,620 --> 00:13:50,240
rtcp packets so RTP packets handler is

249
00:13:46,060 --> 00:13:54,589
on another in another process but at

250
00:13:50,240 --> 00:13:57,770
first at first it looks the same ideas

251
00:13:54,590 --> 00:14:00,530
ideas udb link process incoming package

252
00:13:57,770 --> 00:14:04,790
will call resume message to get it from

253
00:14:00,530 --> 00:14:08,920
UDP from socket and then the package

254
00:14:04,790 --> 00:14:12,740
will pass you ideas Global Link and

255
00:14:08,920 --> 00:14:15,229
ideas globalink will find the these

256
00:14:12,740 --> 00:14:18,620
packages is not it will not be handled

257
00:14:15,230 --> 00:14:21,260
by Denis OSD so he will pass the tape

258
00:14:18,620 --> 00:14:24,470
pass the tapes to his delegate class

259
00:14:21,260 --> 00:14:27,530
called ideas link manager and ideas link

260
00:14:24,470 --> 00:14:31,840
manager will pass the data to its I did

261
00:14:27,530 --> 00:14:34,339
a delegate class called IDs session

262
00:14:31,840 --> 00:14:36,500
analyse function idea decision at least

263
00:14:34,340 --> 00:14:38,810
this class idea decision will transfer

264
00:14:36,500 --> 00:14:42,460
Tate to a big conference teach through a

265
00:14:38,810 --> 00:14:48,859
series of undocumented system call which

266
00:14:42,460 --> 00:14:53,600
is OS channel or OS nexus families and

267
00:14:48,860 --> 00:15:00,080
this is finally implementing of

268
00:14:53,600 --> 00:15:04,220
underlying network as so this lattice of

269
00:15:00,080 --> 00:15:07,970
the reserved engineering and let's see

270
00:15:04,220 --> 00:15:10,520
the attack service the code for

271
00:15:07,970 --> 00:15:12,860
notification processing and add alluring

272
00:15:10,520 --> 00:15:15,790
forms the arrow click the arrow click

273
00:15:12,860 --> 00:15:19,400
attack service which means attacker can

274
00:15:15,790 --> 00:15:22,370
send a notification to the column goes

275
00:15:19,400 --> 00:15:24,740
through a pessoa and a PSD and i-10

276
00:15:22,370 --> 00:15:27,290
service T and then car service T as

277
00:15:24,740 --> 00:15:30,500
asked every conference T or media's

278
00:15:27,290 --> 00:15:33,469
salty that's the 0 click attack service

279
00:15:30,500 --> 00:15:34,250
and the code for stalked packet

280
00:15:33,470 --> 00:15:37,340
processing

281
00:15:34,250 --> 00:15:41,500
and a delivering forms one-click attack

282
00:15:37,340 --> 00:15:44,750
service after fist and call is connected

283
00:15:41,500 --> 00:15:48,740
attacker can direct signal sent package

284
00:15:44,750 --> 00:15:51,800
tried and service T and all a 10 SOC

285
00:15:48,740 --> 00:15:55,940
will pass the package to AV Conference D

286
00:15:51,800 --> 00:15:58,430
I density can further dispatch message

287
00:15:55,940 --> 00:16:02,170
to other service according to topic and

288
00:15:58,430 --> 00:16:05,329
a commands an open new attack service

289
00:16:02,170 --> 00:16:08,449
this is some added attack service we

290
00:16:05,330 --> 00:16:11,330
found like iMessage remotes desk fort

291
00:16:08,450 --> 00:16:14,690
from continuity and something like that

292
00:16:11,330 --> 00:16:21,170
which includes also one click or the

293
00:16:14,690 --> 00:16:23,360
arrow click attack service in next okay

294
00:16:21,170 --> 00:16:26,120
next I'm going to show you some very

295
00:16:23,360 --> 00:16:30,200
interesting one abilities and the first

296
00:16:26,120 --> 00:16:33,860
one is a potential info leak on the 0 0

297
00:16:30,200 --> 00:16:36,500
click attack surface from a PSD to an ad

298
00:16:33,860 --> 00:16:39,140
service key why we call is a potential

299
00:16:36,500 --> 00:16:44,120
if a leak I will explain it later

300
00:16:39,140 --> 00:16:47,750
and so the reason we noticed this issue

301
00:16:44,120 --> 00:16:50,270
is this so when we send a limitation oft

302
00:16:47,750 --> 00:16:53,510
we notice that actually the new

303
00:16:50,270 --> 00:16:56,449
invitation dictionary has a UUID the UID

304
00:16:53,510 --> 00:16:59,900
just just a some random numbers without

305
00:16:56,450 --> 00:17:03,830
any special meanings and but we find a

306
00:16:59,900 --> 00:17:07,490
way to trigger the receiver we can force

307
00:17:03,830 --> 00:17:11,120
it to force a receiver to reply message

308
00:17:07,490 --> 00:17:14,390
in a replied message we found the same

309
00:17:11,119 --> 00:17:17,270
UID so basically no matter the receiver

310
00:17:14,390 --> 00:17:19,610
accept or decline or notice the system

311
00:17:17,270 --> 00:17:25,129
call we can force it forces a receiver

312
00:17:19,609 --> 00:17:27,438
to generate our reply message and so far

313
00:17:25,130 --> 00:17:30,410
nothing special but if you look at how

314
00:17:27,439 --> 00:17:31,730
the receiver passed the UID you will

315
00:17:30,410 --> 00:17:35,420
find something interesting

316
00:17:31,730 --> 00:17:37,460
so after limitation is received and in

317
00:17:35,420 --> 00:17:40,490
the surface T we will try to pass the

318
00:17:37,460 --> 00:17:42,890
dictionary and the first step is it try

319
00:17:40,490 --> 00:17:46,950
to fetch the you in the dictionary you

320
00:17:42,890 --> 00:17:51,270
is the key and if the value object is

321
00:17:46,950 --> 00:17:54,240
yes data and it will pass the earth data

322
00:17:51,270 --> 00:17:56,310
to a function called a DW UUID push

323
00:17:54,240 --> 00:17:58,710
object a to string you don't have you

324
00:17:56,310 --> 00:18:01,200
don't have to read the whole code the

325
00:17:58,710 --> 00:18:04,080
function it's supposed to convert or

326
00:18:01,200 --> 00:18:07,440
dump with the data buffer into a local

327
00:18:04,080 --> 00:18:10,320
stack stack paste buffer and then

328
00:18:07,440 --> 00:18:13,980
convert the local buffer to safe string

329
00:18:10,320 --> 00:18:16,649
but the question is first there's no

330
00:18:13,980 --> 00:18:20,640
check on the length of the nets data the

331
00:18:16,650 --> 00:18:23,910
UUID so second thing is the local buffer

332
00:18:20,640 --> 00:18:28,440
is not initialized so what would happen

333
00:18:23,910 --> 00:18:30,870
if the UUID is less than 16 bits so it

334
00:18:28,440 --> 00:18:32,790
will cause a kind of uninitialized

335
00:18:30,870 --> 00:18:36,479
memory leak because we can force the

336
00:18:32,790 --> 00:18:40,440
receiver send you your ID back so what

337
00:18:36,480 --> 00:18:43,950
we hope to do is this we implemented a

338
00:18:40,440 --> 00:18:46,860
very simple POS a we hope to see this we

339
00:18:43,950 --> 00:18:50,180
sign some new ID very short like 4 bytes

340
00:18:46,860 --> 00:18:54,449
or 8 bytes and we won't get some leaked

341
00:18:50,180 --> 00:18:56,310
value on a stack but when we really do

342
00:18:54,450 --> 00:18:59,670
that we found something very interesting

343
00:18:56,310 --> 00:19:03,060
so when the UID is very short for

344
00:18:59,670 --> 00:19:05,100
example less than 16 bits bytes we don't

345
00:19:03,060 --> 00:19:08,310
know what happened on the ICO server

346
00:19:05,100 --> 00:19:11,129
it seems observer had kind of validation

347
00:19:08,310 --> 00:19:14,340
on the UID s the cost on the receiver

348
00:19:11,130 --> 00:19:18,150
side the you variety just disappeared so

349
00:19:14,340 --> 00:19:21,030
there's no your ID in the dictionary so

350
00:19:18,150 --> 00:19:24,060
apparently the Apple server filter out

351
00:19:21,030 --> 00:19:27,000
the UUID s we don't know apple juice

352
00:19:24,060 --> 00:19:30,690
does that on purpose or not anyway it

353
00:19:27,000 --> 00:19:33,420
blocks the info leak and also we don't

354
00:19:30,690 --> 00:19:37,230
know when Apple server started to filter

355
00:19:33,420 --> 00:19:39,630
out the humanity you your IDs ok so

356
00:19:37,230 --> 00:19:41,160
that's the potential info leak maybe you

357
00:19:39,630 --> 00:19:41,760
think you don't think that's very

358
00:19:41,160 --> 00:19:44,730
interesting

359
00:19:41,760 --> 00:19:48,180
now we move to some very juicy bugs

360
00:19:44,730 --> 00:19:51,630
paper overflows and as tall already

361
00:19:48,180 --> 00:19:54,330
mentioned if this time hall is connected

362
00:19:51,630 --> 00:19:56,970
that means as a tanker is able to

363
00:19:54,330 --> 00:19:59,120
directly send u TP package to the

364
00:19:56,970 --> 00:20:01,930
removed and then historicity

365
00:19:59,120 --> 00:20:04,790
and let's say what happened there so

366
00:20:01,930 --> 00:20:07,040
tall already mentioned that actually an

367
00:20:04,790 --> 00:20:10,340
Indy service team is responsible for

368
00:20:07,040 --> 00:20:14,389
handling a kind of message called same

369
00:20:10,340 --> 00:20:16,820
message and an in the surf the find or

370
00:20:14,390 --> 00:20:19,670
identify the that kind of message by

371
00:20:16,820 --> 00:20:23,090
magic number matching so if you just top

372
00:20:19,670 --> 00:20:27,620
a UDP packet and an offset for you put a

373
00:20:23,090 --> 00:20:30,070
magic number like 42 a four parabola it

374
00:20:27,620 --> 00:20:33,169
will trigger thus the message passer and

375
00:20:30,070 --> 00:20:36,860
what and then if service to do is this

376
00:20:33,170 --> 00:20:40,340
so it will first they serialize the UDP

377
00:20:36,860 --> 00:20:43,459
packet into a ideas to the message

378
00:20:40,340 --> 00:20:47,870
object this the serialization parser is

379
00:20:43,460 --> 00:20:49,610
okay with it and find bugs here and so

380
00:20:47,870 --> 00:20:52,070
that they see realized ideas is the

381
00:20:49,610 --> 00:20:54,800
message the format or the structure is

382
00:20:52,070 --> 00:20:58,340
also very simple it has a type and a

383
00:20:54,800 --> 00:21:01,580
lens and the ideas the message may have

384
00:20:58,340 --> 00:21:04,939
like at most paint a attribute the

385
00:21:01,580 --> 00:21:07,428
attributes just some buffer just copied

386
00:21:04,940 --> 00:21:09,770
from you TP payload so basically they

387
00:21:07,429 --> 00:21:13,520
are under totally under the tankers

388
00:21:09,770 --> 00:21:16,370
control so according to the type of the

389
00:21:13,520 --> 00:21:18,830
idea is the message it will at the

390
00:21:16,370 --> 00:21:22,159
identity will continue to evoke

391
00:21:18,830 --> 00:21:25,610
different handler functions and you know

392
00:21:22,160 --> 00:21:28,010
in a case the type is zero x17

393
00:21:25,610 --> 00:21:31,159
a function called processed data

394
00:21:28,010 --> 00:21:33,260
indication will be invoked inside this

395
00:21:31,160 --> 00:21:37,190
function it will first try to get

396
00:21:33,260 --> 00:21:42,830
attribute from the ideas message at the

397
00:21:37,190 --> 00:21:45,130
type of the attribute is 19 and so Aito

398
00:21:42,830 --> 00:21:48,949
t is very simple it's just kopazar law

399
00:21:45,130 --> 00:21:51,410
the the attribute from ideas message to

400
00:21:48,950 --> 00:21:54,860
a local buffer so basically you can just

401
00:21:51,410 --> 00:21:58,160
imagine that it's just a cop is a UTP

402
00:21:54,860 --> 00:22:01,129
pillow the bytes to a local buffer you

403
00:21:58,160 --> 00:22:03,260
will say a memory copy here but nothing

404
00:22:01,130 --> 00:22:05,540
wrong here so this memory copy

405
00:22:03,260 --> 00:22:07,520
okay maybe is this is only correct

406
00:22:05,540 --> 00:22:12,000
memory copy you will see in this

407
00:22:07,520 --> 00:22:14,460
presentation okay now

408
00:22:12,000 --> 00:22:17,070
local barber is totally honored but

409
00:22:14,460 --> 00:22:20,880
tankers can show what this local bar is

410
00:22:17,070 --> 00:22:23,429
used is this this local barber will be

411
00:22:20,880 --> 00:22:25,980
used to deserialize into a another

412
00:22:23,430 --> 00:22:29,370
object called ideas Global Link message

413
00:22:25,980 --> 00:22:32,100
and though this path is also very simple

414
00:22:29,370 --> 00:22:35,159
because the format is like pipelines and

415
00:22:32,100 --> 00:22:36,899
payload and the pipe is is to bias and

416
00:22:35,160 --> 00:22:40,410
the lens is to bars and the rice is the

417
00:22:36,900 --> 00:22:42,540
payload so the pass should be easy but

418
00:22:40,410 --> 00:22:44,370
if you look at in the case like I've

419
00:22:42,540 --> 00:22:49,230
ready we will go to a function called

420
00:22:44,370 --> 00:22:52,379
grid ideas G link to build a binary of

421
00:22:49,230 --> 00:22:56,960
data inside this function what would

422
00:22:52,380 --> 00:23:00,480
happen is sir there is the memory copy

423
00:22:56,960 --> 00:23:02,160
okay this memory copy is very very

424
00:23:00,480 --> 00:23:05,220
tricky if you look handle a size

425
00:23:02,160 --> 00:23:07,350
parameter it's directly read from the

426
00:23:05,220 --> 00:23:11,100
attribute buffer the local buffer it's

427
00:23:07,350 --> 00:23:13,830
totally under tankers can't you and so

428
00:23:11,100 --> 00:23:18,330
it's a very typical people of low issue

429
00:23:13,830 --> 00:23:20,760
the sauce buffer is a job packet you TP

430
00:23:18,330 --> 00:23:24,570
payload and the size is read from the

431
00:23:20,760 --> 00:23:27,360
payload so if you do a facile here like

432
00:23:24,570 --> 00:23:30,060
you wanna make generated slim message

433
00:23:27,360 --> 00:23:34,020
and you can easily trillo a cross like

434
00:23:30,060 --> 00:23:38,460
this so this is a crotch and crush lock

435
00:23:34,020 --> 00:23:44,879
on Mac OS I think and you can see the

436
00:23:38,460 --> 00:23:47,700
mem copy triggers crash so we just do

437
00:23:44,880 --> 00:23:50,660
very little bit modification to the POS

438
00:23:47,700 --> 00:23:53,280
a make some kind of a plea layout

439
00:23:50,660 --> 00:23:57,720
manipulation and we can easily organize

440
00:23:53,280 --> 00:24:00,600
the the is a pointer of adjacent objects

441
00:23:57,720 --> 00:24:03,240
and we can trigger a clock like it try

442
00:24:00,600 --> 00:24:06,990
to access 41 45 41 that means the next

443
00:24:03,240 --> 00:24:09,960
point next object that is in the objects

444
00:24:06,990 --> 00:24:12,540
pointer is already controlled so how to

445
00:24:09,960 --> 00:24:15,240
exploit it please refer to nice work

446
00:24:12,540 --> 00:24:20,060
more than objects the exploitation for

447
00:24:15,240 --> 00:24:23,460
more details in short is not an hard

448
00:24:20,060 --> 00:24:25,678
okay now let's move to another very

449
00:24:23,460 --> 00:24:26,110
interesting about Stack Overflow issue

450
00:24:25,679 --> 00:24:29,860
in

451
00:24:26,110 --> 00:24:33,129
EP passer so you may ask me okay come on

452
00:24:29,860 --> 00:24:38,199
stackoverflow it's still exploitable

453
00:24:33,130 --> 00:24:41,110
let's see so when this time core is

454
00:24:38,200 --> 00:24:43,990
connected so we do frames will be

455
00:24:41,110 --> 00:24:47,199
transferred between each each side so if

456
00:24:43,990 --> 00:24:50,620
a video frame is very large it may split

457
00:24:47,200 --> 00:24:53,140
into multiple RTP packets and send to

458
00:24:50,620 --> 00:24:56,049
the other side the receiver will

459
00:24:53,140 --> 00:24:59,799
reassemble such RTP packets into a

460
00:24:56,049 --> 00:25:02,679
videos media frame this picture shows

461
00:24:59,799 --> 00:25:04,900
how the video frame and RTP package is

462
00:25:02,679 --> 00:25:07,390
organized so there is a list for

463
00:25:04,900 --> 00:25:10,480
different frame and for each frame there

464
00:25:07,390 --> 00:25:14,770
is the list for different RTP packet I

465
00:25:10,480 --> 00:25:17,650
want to emphasize that when the when it

466
00:25:14,770 --> 00:25:20,650
serves t receive the RTP packet all

467
00:25:17,650 --> 00:25:23,470
every conference t handle the RTP packet

468
00:25:20,650 --> 00:25:25,929
there is a very restrict tech on the RTP

469
00:25:23,470 --> 00:25:29,950
packet to make sure the lens field in

470
00:25:25,929 --> 00:25:32,080
the archetype RTP RTP packet equals the

471
00:25:29,950 --> 00:25:35,350
real size of the payload so there is a

472
00:25:32,080 --> 00:25:38,590
way we restrict check but the question

473
00:25:35,350 --> 00:25:40,928
is first time use a mechanism called the

474
00:25:38,590 --> 00:25:43,980
forward error correction as a mechanism

475
00:25:40,929 --> 00:25:47,799
to minimize the influence of packet loss

476
00:25:43,980 --> 00:25:51,220
so in the case for example a active

477
00:25:47,799 --> 00:25:54,429
frame is split into eight packets and

478
00:25:51,220 --> 00:25:58,120
one packet is lost the receiver will try

479
00:25:54,429 --> 00:26:00,809
to repair the rebuild a new RTP packet

480
00:25:58,120 --> 00:26:04,178
based on the IPC information inside

481
00:26:00,809 --> 00:26:08,020
encoded in the original the rest of

482
00:26:04,179 --> 00:26:11,470
received RTP packets however the the

483
00:26:08,020 --> 00:26:14,139
error here is this for the repaired or

484
00:26:11,470 --> 00:26:17,530
the newly generated RTP packet the lens

485
00:26:14,140 --> 00:26:20,380
field is just copied from FEC header

486
00:26:17,530 --> 00:26:24,190
that is totally under tankers control

487
00:26:20,380 --> 00:26:26,860
without any validation so we don't have

488
00:26:24,190 --> 00:26:29,530
to go to the details of the code anyway

489
00:26:26,860 --> 00:26:32,290
so when the window frame is scheduled to

490
00:26:29,530 --> 00:26:34,840
be processed it will trigger such a kind

491
00:26:32,290 --> 00:26:37,480
of execution flow assembly frame and

492
00:26:34,840 --> 00:26:39,699
finally there's a memory copy it's a

493
00:26:37,480 --> 00:26:42,100
very typical stack overflow issue

494
00:26:39,700 --> 00:26:44,710
and it tries to copy hit buffer to a

495
00:26:42,100 --> 00:26:47,889
local stack buffer under the size is

496
00:26:44,710 --> 00:26:50,650
under attackers can chew so back to the

497
00:26:47,890 --> 00:26:56,110
question is that overflow exploitable on

498
00:26:50,650 --> 00:26:58,030
iOS in nineteen twenty nineteen so we

499
00:26:56,110 --> 00:27:00,669
knew that that the most people who will

500
00:26:58,030 --> 00:27:03,340
to prevent stack overflow issues is

501
00:27:00,670 --> 00:27:06,190
stack cookie or seneca canary the idea

502
00:27:03,340 --> 00:27:08,230
is this so between return address and

503
00:27:06,190 --> 00:27:11,050
the local variables the compiler will

504
00:27:08,230 --> 00:27:14,560
insert a stack canary before the factory

505
00:27:11,050 --> 00:27:17,230
returns it will compare the cookie also

506
00:27:14,560 --> 00:27:20,230
can array on the stack but case the when

507
00:27:17,230 --> 00:27:22,960
you on hip if there is a mismatch just

508
00:27:20,230 --> 00:27:26,050
crush the program that means the some

509
00:27:22,960 --> 00:27:27,880
kind of stack overflow happened so it

510
00:27:26,050 --> 00:27:30,879
worked very well it can prevent a lot of

511
00:27:27,880 --> 00:27:33,670
typical stack overflows but let's look

512
00:27:30,880 --> 00:27:36,640
at the the the function assembly

513
00:27:33,670 --> 00:27:38,350
assemble frame okay if you are not

514
00:27:36,640 --> 00:27:40,570
familiar with these pioneering

515
00:27:38,350 --> 00:27:41,439
instructions don't worry I will explain

516
00:27:40,570 --> 00:27:44,620
it for you

517
00:27:41,440 --> 00:27:47,020
so this fund this instructions is used

518
00:27:44,620 --> 00:27:49,449
to okay if the function is called the

519
00:27:47,020 --> 00:27:52,240
the return address already on the stack

520
00:27:49,450 --> 00:27:55,210
and these instructions are used to see

521
00:27:52,240 --> 00:27:57,400
if some registers and there's a this

522
00:27:55,210 --> 00:28:00,160
instructions in the red box is used to

523
00:27:57,400 --> 00:28:03,250
allocate local variables and this

524
00:28:00,160 --> 00:28:04,320
instructions is used to insert the stack

525
00:28:03,250 --> 00:28:08,380
canary

526
00:28:04,320 --> 00:28:11,580
okay you may find something on the stack

527
00:28:08,380 --> 00:28:14,260
canary is placed below local variables

528
00:28:11,580 --> 00:28:17,649
so what would happen if a stack overflow

529
00:28:14,260 --> 00:28:20,080
happens it's looks like this after the

530
00:28:17,650 --> 00:28:21,400
stack overflow happens nothing is wrong

531
00:28:20,080 --> 00:28:26,050
with the stack cannery

532
00:28:21,400 --> 00:28:28,990
so you will see like this this is crash

533
00:28:26,050 --> 00:28:30,970
lock on iOS immediate server D you can

534
00:28:28,990 --> 00:28:33,070
say after the stack overflow the PC is

535
00:28:30,970 --> 00:28:36,370
totally under control and a lot of

536
00:28:33,070 --> 00:28:39,070
registers are also under control so if

537
00:28:36,370 --> 00:28:41,439
you want ask me how to esporte this

538
00:28:39,070 --> 00:28:43,000
vulnerability I would suggest you to

539
00:28:41,440 --> 00:28:46,300
read the paper entitled

540
00:28:43,000 --> 00:28:51,400
smash sex for fun and profit published

541
00:28:46,300 --> 00:28:53,570
in 1990 nineteen six I think okay we

542
00:28:51,400 --> 00:28:59,000
reported to echo it all

543
00:28:53,570 --> 00:29:01,399
defects in the latest version and but we

544
00:28:59,000 --> 00:29:04,190
find something more interesting this

545
00:29:01,400 --> 00:29:06,380
function is not a single victim we find

546
00:29:04,190 --> 00:29:09,050
a lot of other functions in different

547
00:29:06,380 --> 00:29:11,600
modules have the same issue the stack

548
00:29:09,050 --> 00:29:15,560
cookie is placed in the wrong position

549
00:29:11,600 --> 00:29:19,040
so we suspect there is a compiler back

550
00:29:15,560 --> 00:29:21,710
behind the stack overflow so finally a

551
00:29:19,040 --> 00:29:23,899
single security team pinpoint the

552
00:29:21,710 --> 00:29:27,790
compiler issue and they reported to our

553
00:29:23,900 --> 00:29:30,800
IBM so if you were a app developers

554
00:29:27,790 --> 00:29:32,960
remember updated office time and also

555
00:29:30,800 --> 00:29:36,370
update your compiler otherwise your apps

556
00:29:32,960 --> 00:29:37,520
may also have the stack overflow issues

557
00:29:36,370 --> 00:29:41,300
okay

558
00:29:37,520 --> 00:29:46,040
now let's move to other attack surface

559
00:29:41,300 --> 00:29:48,850
and we Paul already mentioned that

560
00:29:46,040 --> 00:29:51,740
actually a little indented Serfaty is

561
00:29:48,850 --> 00:29:54,290
able to deliver notifications all

562
00:29:51,740 --> 00:29:56,960
Network packets to a lot of different

563
00:29:54,290 --> 00:29:59,780
system service like a message remote

564
00:29:56,960 --> 00:30:03,230
desktop and a phone continuty and the

565
00:29:59,780 --> 00:30:06,139
way we analyzed some of them and we

566
00:30:03,230 --> 00:30:09,500
found some very interesting bugs - for

567
00:30:06,140 --> 00:30:11,810
example let's see phone continuty from

568
00:30:09,500 --> 00:30:15,740
content a allowed to make and receive

569
00:30:11,810 --> 00:30:18,950
calls from your Mac or iPad if these

570
00:30:15,740 --> 00:30:20,420
devices are close to your iPhone and

571
00:30:18,950 --> 00:30:22,970
they are logged in with the same

572
00:30:20,420 --> 00:30:26,840
Authority so apparently you can make a

573
00:30:22,970 --> 00:30:29,780
call with your Mac if it's close to the

574
00:30:26,840 --> 00:30:31,840
iPhone that means there must be some

575
00:30:29,780 --> 00:30:36,020
bitch channel between your Mac and your

576
00:30:31,840 --> 00:30:39,189
iPhone so we reverse engineered that us

577
00:30:36,020 --> 00:30:42,110
and we find that also handled firstly a

578
00:30:39,190 --> 00:30:45,590
packet also handled by any deserves tea

579
00:30:42,110 --> 00:30:47,840
and if you look at this exclusion pass

580
00:30:45,590 --> 00:30:53,300
it will finally go to a function called

581
00:30:47,840 --> 00:30:56,060
IDs sock a DDR wiper and again you don't

582
00:30:53,300 --> 00:30:58,610
have to read the whole pursuit of code

583
00:30:56,060 --> 00:31:01,780
you just remember there is a memory copy

584
00:30:58,610 --> 00:31:07,010
it tries to copy

585
00:31:01,780 --> 00:31:07,629
socket address structure which is copied

586
00:31:07,010 --> 00:31:11,620
from

587
00:31:07,630 --> 00:31:16,990
Misha is inside a UDP payload to a hip

588
00:31:11,620 --> 00:31:19,418
object and the checks did

589
00:31:16,990 --> 00:31:22,510
the checks before the red box is since

590
00:31:19,419 --> 00:31:25,169
to check they are doing the socket

591
00:31:22,510 --> 00:31:29,080
address family checks like s UDP or TCP

592
00:31:25,169 --> 00:31:32,380
protocol but there's no checks on the

593
00:31:29,080 --> 00:31:35,980
lens or the first bytes in the socket

594
00:31:32,380 --> 00:31:38,020
address so if you have familiar with AI

595
00:31:35,980 --> 00:31:41,440
security researcher you may remember

596
00:31:38,020 --> 00:31:44,799
that last year yen beer from GP zero and

597
00:31:41,440 --> 00:31:48,039
a similar bug in the kernel so in the NP

598
00:31:44,799 --> 00:31:51,549
TCP part so it also tries to copy a

599
00:31:48,039 --> 00:31:54,340
socket address to a hip buffer the

600
00:31:51,549 --> 00:31:57,789
question is the maximum lens or the

601
00:31:54,340 --> 00:32:02,350
sides for Valley the socket address is 0

602
00:31:57,789 --> 00:32:05,230
X 8 0 but the maximum maximum lens could

603
00:32:02,350 --> 00:32:09,250
be specified in the memory copy is 0

604
00:32:05,230 --> 00:32:12,039
direct FF so it's also a typical hipper

605
00:32:09,250 --> 00:32:18,070
flow it's not easy it's not hard to

606
00:32:12,039 --> 00:32:20,530
exploit that so in this talk we only

607
00:32:18,070 --> 00:32:24,700
shared some typical box like stack

608
00:32:20,530 --> 00:32:26,740
overflows or hippo flows in such attack

609
00:32:24,700 --> 00:32:28,690
surface actually during the reverse

610
00:32:26,740 --> 00:32:31,090
engineer process we found a lot of

611
00:32:28,690 --> 00:32:34,720
trivial box like type confusions and

612
00:32:31,090 --> 00:32:37,110
some after of boundaries and they are

613
00:32:34,720 --> 00:32:39,940
not mentioned in this talk but I

614
00:32:37,110 --> 00:32:40,959
encourage you guys to take another look

615
00:32:39,940 --> 00:32:48,159
maybe you can find a more interesting

616
00:32:40,960 --> 00:32:51,270
things ok conclusion first after we do

617
00:32:48,159 --> 00:32:53,980
this so we find fist x implementation is

618
00:32:51,270 --> 00:32:57,280
significant improvements a lot of

619
00:32:53,980 --> 00:33:00,340
trivial box there and the attack surface

620
00:32:57,280 --> 00:33:03,879
exposed by messaging in interface like a

621
00:33:00,340 --> 00:33:07,059
lot of interface in an ad surface T need

622
00:33:03,880 --> 00:33:09,190
more attention no matter Apple security

623
00:33:07,059 --> 00:33:10,960
team or other security researchers you

624
00:33:09,190 --> 00:33:14,770
can find a lot of juicy bugs there may

625
00:33:10,960 --> 00:33:17,350
be and the most most surprising thing is

626
00:33:14,770 --> 00:33:20,620
all and the most interesting thing to me

627
00:33:17,350 --> 00:33:25,270
is that the most typical stack overflow

628
00:33:20,620 --> 00:33:26,580
do happen and Misty effect iOS now thank

629
00:33:25,270 --> 00:33:31,030
you

630
00:33:26,580 --> 00:33:31,030
[Applause]

