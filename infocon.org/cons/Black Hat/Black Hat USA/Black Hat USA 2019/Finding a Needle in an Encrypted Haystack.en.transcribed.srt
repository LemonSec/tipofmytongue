1
00:00:00,060 --> 00:00:05,819
the next talk is Marina Simha cough and

2
00:00:02,879 --> 00:00:07,648
urine Zener finding a needle in an

3
00:00:05,819 --> 00:00:09,719
encrypted haystack leveraging

4
00:00:07,649 --> 00:00:11,340
cryptographic abilities to detect the

5
00:00:09,719 --> 00:00:15,000
most prevalent attacks on Active

6
00:00:11,340 --> 00:00:17,400
Directory guys thank you hi everyone and

7
00:00:15,000 --> 00:00:19,470
thank you for joining our talk I were in

8
00:00:17,400 --> 00:00:21,900
a cynical and today I'm here with Iran

9
00:00:19,470 --> 00:00:24,269
Zener we're both security researchers

10
00:00:21,900 --> 00:00:25,890
from preempt and today we want to talk

11
00:00:24,269 --> 00:00:27,769
to you about some of the vulnerabilities

12
00:00:25,890 --> 00:00:30,300
that we were able to discover this year

13
00:00:27,769 --> 00:00:31,799
we have a lot of information for you

14
00:00:30,300 --> 00:00:33,480
today let's see the agenda we'll begin

15
00:00:31,800 --> 00:00:35,130
with a short introduction to Active

16
00:00:33,480 --> 00:00:38,190
Directory and some of the common attacks

17
00:00:35,130 --> 00:00:40,200
who focused a lot on the ntlm protocol

18
00:00:38,190 --> 00:00:42,360
it's a design we can assess the ntlm

19
00:00:40,200 --> 00:00:43,980
relay attack and some of the offering

20
00:00:42,360 --> 00:00:46,440
creations that we have against this

21
00:00:43,980 --> 00:00:48,660
attack technique then we'll move on to

22
00:00:46,440 --> 00:00:50,370
discuss some vulnerabilities we'll see

23
00:00:48,660 --> 00:00:52,230
some of the known ones and some of the

24
00:00:50,370 --> 00:00:54,750
new ones that we discovered this year

25
00:00:52,230 --> 00:00:58,410
allowing us to bypass all present

26
00:00:54,750 --> 00:00:59,940
litigations against ntlm relay last but

27
00:00:58,410 --> 00:01:02,069
not least we'll talk to you about

28
00:00:59,940 --> 00:01:04,199
detection and we're quite excited to

29
00:01:02,070 --> 00:01:06,270
present the first deterministic ntlm

30
00:01:04,199 --> 00:01:09,600
relay detection today and we'll finish

31
00:01:06,270 --> 00:01:11,759
with some takeaways okay so I guess most

32
00:01:09,600 --> 00:01:13,559
of you are probably familiar with Active

33
00:01:11,760 --> 00:01:15,330
Directory well I'll give just a brief

34
00:01:13,560 --> 00:01:17,369
introduction just in case so Active

35
00:01:15,330 --> 00:01:19,830
Directory is the main secret storage of

36
00:01:17,369 --> 00:01:22,229
the domain it stores the password hashes

37
00:01:19,830 --> 00:01:24,570
of all the accounts and it is in charge

38
00:01:22,229 --> 00:01:27,030
of syndicating accounts against domain

39
00:01:24,570 --> 00:01:29,339
resources this can be done using three

40
00:01:27,030 --> 00:01:31,590
different protocols LDAP and TLM or

41
00:01:29,340 --> 00:01:34,350
Kerberos and today we'll be focusing on

42
00:01:31,590 --> 00:01:38,520
the ntlm protocol and specifically on

43
00:01:34,350 --> 00:01:40,350
the ntlm relay attack technique so you

44
00:01:38,520 --> 00:01:43,229
might be scratching your heads thinking

45
00:01:40,350 --> 00:01:46,559
is ntlm even still relevant

46
00:01:43,229 --> 00:01:48,570
well actually the answer is yes even

47
00:01:46,560 --> 00:01:51,000
though it's technology from the stone

48
00:01:48,570 --> 00:01:52,798
Age's still many environments use it or

49
00:01:51,000 --> 00:01:55,320
using it so even though we've had

50
00:01:52,799 --> 00:01:57,420
Kerberos for quite a while we still

51
00:01:55,320 --> 00:02:00,059
haven't seen a single environment which

52
00:01:57,420 --> 00:02:01,979
disables ntlm completely so this is

53
00:02:00,060 --> 00:02:05,939
quite relevant to most organizations

54
00:02:01,979 --> 00:02:08,310
today let's see a short overview of how

55
00:02:05,939 --> 00:02:10,019
the ntlm protocol works let's say we

56
00:02:08,310 --> 00:02:11,670
have a client that wants to connect him

57
00:02:10,020 --> 00:02:13,110
to some domain server let's see the

58
00:02:11,670 --> 00:02:15,119
authentication flow so

59
00:02:13,110 --> 00:02:16,800
client would send an ntlm negotiate

60
00:02:15,120 --> 00:02:19,860
message to the server and the server

61
00:02:16,800 --> 00:02:21,690
would respond with an ntlm challenge now

62
00:02:19,860 --> 00:02:23,970
the client would need to encrypt that

63
00:02:21,690 --> 00:02:27,030
challenge using the password hash of the

64
00:02:23,970 --> 00:02:28,140
user's account and responding the ntlm

65
00:02:27,030 --> 00:02:30,060
authenticated message

66
00:02:28,140 --> 00:02:31,769
now since this target server is not

67
00:02:30,060 --> 00:02:33,870
aware of the password hash of the user

68
00:02:31,770 --> 00:02:35,550
it is not able to verify that the

69
00:02:33,870 --> 00:02:37,890
challenge was encrypted using the

70
00:02:35,550 --> 00:02:39,959
correct password hash so it would send a

71
00:02:37,890 --> 00:02:42,839
natural message to the domain controller

72
00:02:39,959 --> 00:02:44,670
which has the ability to verify whether

73
00:02:42,840 --> 00:02:47,400
the challenge was encrypted correctly

74
00:02:44,670 --> 00:02:50,369
and respond with an approve or reject

75
00:02:47,400 --> 00:02:51,930
message accordingly one of the problems

76
00:02:50,370 --> 00:02:54,209
with this protocol is that the

77
00:02:51,930 --> 00:02:56,700
authentication is not bound to the

78
00:02:54,209 --> 00:02:59,310
target server so if this target server

79
00:02:56,700 --> 00:03:01,380
gets compromised attackers can simply

80
00:02:59,310 --> 00:03:03,780
really the authentication and use it to

81
00:03:01,380 --> 00:03:05,760
attack another server in the domain this

82
00:03:03,780 --> 00:03:07,770
is exactly what happens in the ntlm

83
00:03:05,760 --> 00:03:10,380
really attack and let's see this flow so

84
00:03:07,770 --> 00:03:12,750
we have a client connecting using ntlm

85
00:03:10,380 --> 00:03:15,390
to a compromised server so this can be

86
00:03:12,750 --> 00:03:17,610
by attackers compromising a server that

87
00:03:15,390 --> 00:03:19,320
usually accounts connect to or by

88
00:03:17,610 --> 00:03:21,360
sending a phishing email to a lot of

89
00:03:19,320 --> 00:03:24,030
users and some user clicks on the link

90
00:03:21,360 --> 00:03:26,580
and an NT level syndication begins now

91
00:03:24,030 --> 00:03:28,560
attackers choose a target in the domain

92
00:03:26,580 --> 00:03:30,950
which they want to attack and relay that

93
00:03:28,560 --> 00:03:33,480
ntlm negotiate message to the target

94
00:03:30,950 --> 00:03:36,000
they receive the challenge and relayed

95
00:03:33,480 --> 00:03:37,738
back to the client now the client will

96
00:03:36,000 --> 00:03:40,110
encrypt the challenge using the password

97
00:03:37,739 --> 00:03:42,269
hash of the user and send it back to the

98
00:03:40,110 --> 00:03:44,310
compromised server and all the attackers

99
00:03:42,269 --> 00:03:46,620
need to do now is simply relayed back to

100
00:03:44,310 --> 00:03:48,660
the attack target so when the target

101
00:03:46,620 --> 00:03:50,880
would verify whether the challenge was

102
00:03:48,660 --> 00:03:52,530
indeed encrypted correctly since the

103
00:03:50,880 --> 00:03:54,180
client was the one that encrypted the

104
00:03:52,530 --> 00:03:56,730
challenge the domain controller would

105
00:03:54,180 --> 00:03:59,130
prove the request and the attackers now

106
00:03:56,730 --> 00:04:01,320
have an authenticated session using the

107
00:03:59,130 --> 00:04:03,329
users permissions on the attacked server

108
00:04:01,320 --> 00:04:04,709
but notice that at any stage the

109
00:04:03,330 --> 00:04:06,600
attackers did not need to know the

110
00:04:04,709 --> 00:04:08,760
password of the user all they did is

111
00:04:06,600 --> 00:04:11,340
relay messages back and forth between

112
00:04:08,760 --> 00:04:14,280
the client and the attack target so that

113
00:04:11,340 --> 00:04:16,890
user is a local admin on the target

114
00:04:14,280 --> 00:04:18,899
machine attackers can now run code on

115
00:04:16,890 --> 00:04:22,979
the target they can dump files and

116
00:04:18,899 --> 00:04:24,870
entirely compromise that computer this

117
00:04:22,979 --> 00:04:26,370
is a pretty serious attack vector this

118
00:04:24,870 --> 00:04:28,500
is why we

119
00:04:26,370 --> 00:04:31,139
few mitigations against this attack

120
00:04:28,500 --> 00:04:34,139
technique the most critical mitigations

121
00:04:31,139 --> 00:04:36,990
our session signing we have SMB and LDAP

122
00:04:34,139 --> 00:04:38,669
signing and we have EPA and channel

123
00:04:36,990 --> 00:04:40,590
binding those are the ones that we'll be

124
00:04:38,669 --> 00:04:43,849
focusing on today and we'll show you how

125
00:04:40,590 --> 00:04:46,619
we were able to bypass both of them

126
00:04:43,850 --> 00:04:49,080
let's begin with session signing what

127
00:04:46,620 --> 00:04:51,690
the session signing requirement means is

128
00:04:49,080 --> 00:04:53,880
that after the ntlm authentication is

129
00:04:51,690 --> 00:04:56,219
completed all the communication between

130
00:04:53,880 --> 00:04:58,889
the client and the server needs to be

131
00:04:56,220 --> 00:05:01,200
signed and the session signing key is

132
00:04:58,889 --> 00:05:04,290
derived from the authenticating users

133
00:05:01,200 --> 00:05:06,360
password hash so the client knows this

134
00:05:04,290 --> 00:05:09,090
password hash so it's simply computed

135
00:05:06,360 --> 00:05:10,710
independently now the target doesn't

136
00:05:09,090 --> 00:05:12,810
store the password hashes of their

137
00:05:10,710 --> 00:05:15,060
counsel it would simply get the session

138
00:05:12,810 --> 00:05:17,100
signing key from the domain controller

139
00:05:15,060 --> 00:05:19,889
as a response to the net logon request

140
00:05:17,100 --> 00:05:22,229
and if you have an attacker in the

141
00:05:19,889 --> 00:05:24,389
middle with really capabilities that

142
00:05:22,229 --> 00:05:26,159
attackers would simply they would not

143
00:05:24,389 --> 00:05:27,840
have a way to retrieve the session

144
00:05:26,160 --> 00:05:29,789
signing key they would not be able to

145
00:05:27,840 --> 00:05:31,979
sign any additional packets and the

146
00:05:29,789 --> 00:05:33,990
attack would fail I so let's see an

147
00:05:31,979 --> 00:05:36,030
illustration of this one so the client

148
00:05:33,990 --> 00:05:39,060
would send an ntlm negotiate machine

149
00:05:36,030 --> 00:05:40,888
message to the compromised server the

150
00:05:39,060 --> 00:05:43,289
server would really that to the attack

151
00:05:40,889 --> 00:05:45,270
target again we really the challenge and

152
00:05:43,289 --> 00:05:47,340
the response and now in the attack

153
00:05:45,270 --> 00:05:49,830
targets ends the Navigon message to the

154
00:05:47,340 --> 00:05:52,138
domain controller to verify whether the

155
00:05:49,830 --> 00:05:53,969
user entered the correct password the

156
00:05:52,139 --> 00:05:56,220
domain controller would also respond

157
00:05:53,970 --> 00:05:57,840
with the session signing key and the

158
00:05:56,220 --> 00:06:01,080
client would calculate the session key

159
00:05:57,840 --> 00:06:02,880
by himself now the relay at the middle

160
00:06:01,080 --> 00:06:04,889
simply has no way to retrieve the

161
00:06:02,880 --> 00:06:07,050
session key it cannot send any

162
00:06:04,889 --> 00:06:10,410
additional packets to the attack target

163
00:06:07,050 --> 00:06:13,200
and the attack would fail this is a very

164
00:06:10,410 --> 00:06:15,840
critical litigation against ntlm really

165
00:06:13,200 --> 00:06:20,550
and unfortunately not enough servers

166
00:06:15,840 --> 00:06:22,080
enforce a signing by default the second

167
00:06:20,550 --> 00:06:24,389
mitigation that we want to discuss with

168
00:06:22,080 --> 00:06:26,669
you is BPA enhanced protection for

169
00:06:24,389 --> 00:06:29,669
authentication here the goal is to

170
00:06:26,669 --> 00:06:32,460
protect ntlm authentication from being

171
00:06:29,669 --> 00:06:35,580
relayed to a TLS session and we want to

172
00:06:32,460 --> 00:06:37,380
bind the ntlm authentication to the TLS

173
00:06:35,580 --> 00:06:39,659
session over which the packets are

174
00:06:37,380 --> 00:06:41,850
transferred and the implementation

175
00:06:39,660 --> 00:06:44,460
of this is by adding an additional field

176
00:06:41,850 --> 00:06:47,790
to the final ntlm authenticated message

177
00:06:44,460 --> 00:06:50,099
called channel bindings now this field

178
00:06:47,790 --> 00:06:52,890
contains a hash of the target service

179
00:06:50,100 --> 00:06:55,230
certificate and also it is signed using

180
00:06:52,890 --> 00:06:58,289
the user's password hash so it cannot be

181
00:06:55,230 --> 00:07:00,540
modified by attackers and if you have an

182
00:06:58,290 --> 00:07:02,850
attacker with really capabilities in the

183
00:07:00,540 --> 00:07:04,920
middle it would be necessarily using a

184
00:07:02,850 --> 00:07:07,860
different certificate then the attack

185
00:07:04,920 --> 00:07:09,840
target so the value provided by the

186
00:07:07,860 --> 00:07:11,940
client in the channel binding field

187
00:07:09,840 --> 00:07:14,219
would be based on the certificate of the

188
00:07:11,940 --> 00:07:16,440
compromised server so if attackers try

189
00:07:14,220 --> 00:07:19,170
to relay this message to any other

190
00:07:16,440 --> 00:07:21,450
server which enforces EPA this field

191
00:07:19,170 --> 00:07:23,310
would simply be not valid and the attack

192
00:07:21,450 --> 00:07:24,659
would fail ok let's see an illustration

193
00:07:23,310 --> 00:07:26,940
again just to make things a bit more

194
00:07:24,660 --> 00:07:28,560
clear so we have a client initiating

195
00:07:26,940 --> 00:07:30,810
until accession against the compromised

196
00:07:28,560 --> 00:07:33,450
server and sending an mplm negotiate

197
00:07:30,810 --> 00:07:35,660
message now attackers target some server

198
00:07:33,450 --> 00:07:38,070
in the domain which enforces APA

199
00:07:35,660 --> 00:07:41,390
established and a different TLS session

200
00:07:38,070 --> 00:07:43,950
and really that ntlm negotiated message

201
00:07:41,390 --> 00:07:46,229
we really the challenge in the same way

202
00:07:43,950 --> 00:07:48,900
and now the last ntlm authentication

203
00:07:46,230 --> 00:07:51,840
message also contains this channel

204
00:07:48,900 --> 00:07:53,310
binding field which includes the hash of

205
00:07:51,840 --> 00:07:55,859
the target certificate of that

206
00:07:53,310 --> 00:07:58,140
compromised server now attackers cannot

207
00:07:55,860 --> 00:08:00,390
modify this field as we've said the user

208
00:07:58,140 --> 00:08:02,849
signs it using the password hash of the

209
00:08:00,390 --> 00:08:04,860
user and if they try to relay that

210
00:08:02,850 --> 00:08:06,750
message to the attack target it will

211
00:08:04,860 --> 00:08:09,030
look into the channel binding field and

212
00:08:06,750 --> 00:08:11,160
see that the value is not based on its

213
00:08:09,030 --> 00:08:13,469
own certificate and the attack will fail

214
00:08:11,160 --> 00:08:14,820
so will not even need to verify the

215
00:08:13,470 --> 00:08:17,760
credentials against the domain

216
00:08:14,820 --> 00:08:19,740
controller and so those were the two

217
00:08:17,760 --> 00:08:22,200
most critical mitigations that we have

218
00:08:19,740 --> 00:08:23,550
today again ntlm relay and now you are

219
00:08:22,200 --> 00:08:25,349
on speak about some of the

220
00:08:23,550 --> 00:08:28,970
vulnerabilities and show you how we're

221
00:08:25,350 --> 00:08:33,240
able to bypass both those mitigations

222
00:08:28,970 --> 00:08:36,169
thanks marina so all of these attackers

223
00:08:33,240 --> 00:08:39,960
have found many vulnerabilities allowing

224
00:08:36,169 --> 00:08:41,569
attackers to exploit ntlm alike to

225
00:08:39,960 --> 00:08:45,390
exploit the vulnerabilities and launch

226
00:08:41,570 --> 00:08:47,850
ntlm relay attacks let's review the most

227
00:08:45,390 --> 00:08:51,250
recent one so the first vulnerability i

228
00:08:47,850 --> 00:08:53,560
want to talk about is LDAP s relay the

229
00:08:51,250 --> 00:08:57,790
vulnerability was discovered by our team

230
00:08:53,560 --> 00:09:00,880
back in 2017 and we have found that LDAP

231
00:08:57,790 --> 00:09:03,939
servers was somewhat vulnerable two and

232
00:09:00,880 --> 00:09:06,640
three LM really attacks so as marina

233
00:09:03,940 --> 00:09:09,760
mentioned until M is not inherently

234
00:09:06,640 --> 00:09:12,100
protected for ntlm really if you want to

235
00:09:09,760 --> 00:09:14,319
protect an aunty LM session you'll need

236
00:09:12,100 --> 00:09:17,880
to either enable server signing auto

237
00:09:14,320 --> 00:09:20,860
enable EPA there is a special GPO

238
00:09:17,880 --> 00:09:23,770
enabling stealth observer signing on the

239
00:09:20,860 --> 00:09:26,790
domain controllers and if that GPO is

240
00:09:23,770 --> 00:09:29,260
enabled the DC would accept only

241
00:09:26,790 --> 00:09:32,620
requests the Thelda progressed that are

242
00:09:29,260 --> 00:09:35,380
signed with gssapi but it would also

243
00:09:32,620 --> 00:09:38,640
request any LDAP request over a TLS

244
00:09:35,380 --> 00:09:42,189
Channel this means that if we really

245
00:09:38,640 --> 00:09:45,520
credentials to an LDAP s session will be

246
00:09:42,190 --> 00:09:47,380
able to completely point that session so

247
00:09:45,520 --> 00:09:50,020
we've disclosed this issue to Microsoft

248
00:09:47,380 --> 00:09:53,860
back in 2017 and they've fixed it by an

249
00:09:50,020 --> 00:09:56,980
abling EPA on LDAP s it is important to

250
00:09:53,860 --> 00:09:59,890
note that LDAP is still vulnerable by

251
00:09:56,980 --> 00:10:01,900
default since the GPO for enabling LDAP

252
00:09:59,890 --> 00:10:05,880
server signing is not enabled by default

253
00:10:01,900 --> 00:10:08,500
and EPA is also not enabled by default

254
00:10:05,880 --> 00:10:12,250
the second vulnerability I want to talk

255
00:10:08,500 --> 00:10:14,950
about was disclosed in 2015 by Alberto

256
00:10:12,250 --> 00:10:18,100
Selina from call security and that was a

257
00:10:14,950 --> 00:10:21,880
generic bypass of all ntlm session

258
00:10:18,100 --> 00:10:24,400
requirements so let's review out the

259
00:10:21,880 --> 00:10:27,730
attack worked the initial part was just

260
00:10:24,400 --> 00:10:29,829
like any ntlm relay and since the attack

261
00:10:27,730 --> 00:10:33,490
target is support enforces server

262
00:10:29,830 --> 00:10:35,950
signing when it sends the ntlm message

263
00:10:33,490 --> 00:10:37,930
it receives a session key now if we

264
00:10:35,950 --> 00:10:40,240
don't have a session key we can't use

265
00:10:37,930 --> 00:10:44,439
the session and send and sign any SMB

266
00:10:40,240 --> 00:10:46,900
requests but as it turned out before v

267
00:10:44,440 --> 00:10:49,300
this was fixed any machine in the

268
00:10:46,900 --> 00:10:52,150
network if it knew the challenge and the

269
00:10:49,300 --> 00:10:55,359
challenge response could spoof its own

270
00:10:52,150 --> 00:10:58,209
network own message with with these

271
00:10:55,360 --> 00:11:00,820
fields and receive its own session key

272
00:10:58,210 --> 00:11:04,660
once the attacker has a session key it

273
00:11:00,820 --> 00:11:08,160
can send requests over the SMB Channel

274
00:11:04,660 --> 00:11:11,019
and completely pawned that machine so

275
00:11:08,160 --> 00:11:13,500
now it gets a bit trickier I want to

276
00:11:11,019 --> 00:11:16,509
discuss how Microsoft fixed that issue

277
00:11:13,500 --> 00:11:19,120
so in order to understand we need to

278
00:11:16,509 --> 00:11:22,240
dive a bit deeper into the ntlm protocol

279
00:11:19,120 --> 00:11:25,120
the second message the ntlm challenge as

280
00:11:22,240 --> 00:11:27,819
a target info field the target info

281
00:11:25,120 --> 00:11:30,550
field as special construct named AV

282
00:11:27,819 --> 00:11:32,709
pairs these fields should identify the

283
00:11:30,550 --> 00:11:35,439
target the field I'm going to focus on

284
00:11:32,709 --> 00:11:37,689
is the net balance computer name the net

285
00:11:35,439 --> 00:11:40,599
buyers computer name identifies the net

286
00:11:37,689 --> 00:11:45,519
bias of the target server machine in

287
00:11:40,600 --> 00:11:47,980
this case it's test - oh one the ntlm

288
00:11:45,519 --> 00:11:50,740
client when it receives this target in

289
00:11:47,980 --> 00:11:53,019
for AV pairs would echo all the fields

290
00:11:50,740 --> 00:11:55,360
that it received in the echo peers so we

291
00:11:53,019 --> 00:11:58,149
see that the client echoed the net bulbs

292
00:11:55,360 --> 00:12:00,579
computer name test - a one but the

293
00:11:58,149 --> 00:12:03,550
important part is that all AV players in

294
00:12:00,579 --> 00:12:06,939
the ntlm authenticate message sign with

295
00:12:03,550 --> 00:12:10,209
the panty proof STR where the secret key

296
00:12:06,939 --> 00:12:12,579
is the user's nth so an attacker with no

297
00:12:10,209 --> 00:12:17,319
knowledge of the use of smth cannot

298
00:12:12,579 --> 00:12:19,870
modify or temporarily this message so

299
00:12:17,319 --> 00:12:22,509
what Microsoft essentially did was to

300
00:12:19,870 --> 00:12:24,819
compare the NetBIOS computer name in the

301
00:12:22,509 --> 00:12:27,339
authenticate message with the machine

302
00:12:24,819 --> 00:12:30,069
that originated the net Logan so let's

303
00:12:27,339 --> 00:12:32,050
review again the tag target which is the

304
00:12:30,069 --> 00:12:34,240
legitimate target sends a net logon

305
00:12:32,050 --> 00:12:36,699
message and it receives a session key

306
00:12:34,240 --> 00:12:39,459
now the server would initiate a similar

307
00:12:36,699 --> 00:12:41,620
spoofed met Logan session the anti

308
00:12:39,459 --> 00:12:43,420
authenticate and the net Lebon would

309
00:12:41,620 --> 00:12:46,000
contain the net buyers computer name

310
00:12:43,420 --> 00:12:48,309
which identifies the attack target and

311
00:12:46,000 --> 00:12:50,860
the network originator is the

312
00:12:48,309 --> 00:12:53,130
compromised server the DISA can see the

313
00:12:50,860 --> 00:12:55,809
discrepancy and just reject the request

314
00:12:53,130 --> 00:12:58,269
since the rejected since the request is

315
00:12:55,809 --> 00:13:00,670
rejected we didn't receive any session

316
00:12:58,269 --> 00:13:04,750
key and were unable to sign the SMB

317
00:13:00,670 --> 00:13:08,410
session now I want to move on to the new

318
00:13:04,750 --> 00:13:10,329
vulnerabilities we have found so I'm

319
00:13:08,410 --> 00:13:11,860
going to so we're going to present three

320
00:13:10,329 --> 00:13:14,680
vulnerabilities for you today

321
00:13:11,860 --> 00:13:17,680
the first your session key is my session

322
00:13:14,680 --> 00:13:18,040
key is another generic bypass of ntlm

323
00:13:17,680 --> 00:13:21,430
sir

324
00:13:18,040 --> 00:13:24,370
signing the second drop the meek is a

325
00:13:21,430 --> 00:13:26,530
vulnerability by passing another ntlm

326
00:13:24,370 --> 00:13:29,410
security mechanism the message integrity

327
00:13:26,530 --> 00:13:31,209
code which we will discuss later and the

328
00:13:29,410 --> 00:13:34,990
third one of ability api bypass

329
00:13:31,210 --> 00:13:35,560
bypassing EPA and channel binding that's

330
00:13:34,990 --> 00:13:37,030
correct

331
00:13:35,560 --> 00:13:40,709
during our research we were able to

332
00:13:37,030 --> 00:13:43,480
bypass all major antenna mitigations

333
00:13:40,710 --> 00:13:47,290
let's talk about the first vulnerability

334
00:13:43,480 --> 00:13:49,390
your session key is my session key so if

335
00:13:47,290 --> 00:13:50,500
we look back at the fixed Microsoft need

336
00:13:49,390 --> 00:13:53,380
in 2015

337
00:13:50,500 --> 00:13:55,180
comparing the net logon originator to

338
00:13:53,380 --> 00:13:57,970
the NetBIOS computer name in the

339
00:13:55,180 --> 00:13:59,800
authenticate message we thought to

340
00:13:57,970 --> 00:14:01,780
ourselves what would happen if we'll

341
00:13:59,800 --> 00:14:05,290
simply remove the network's computer

342
00:14:01,780 --> 00:14:07,420
name so if we look at the ntlm challenge

343
00:14:05,290 --> 00:14:09,939
message the NetBIOS computer name is an

344
00:14:07,420 --> 00:14:11,680
AV pair and since we're double layer and

345
00:14:09,940 --> 00:14:14,260
we have control of the entire

346
00:14:11,680 --> 00:14:17,260
communication we can create a modified

347
00:14:14,260 --> 00:14:21,220
ntlm challenge message with no net miles

348
00:14:17,260 --> 00:14:23,860
computer name what happens is that the

349
00:14:21,220 --> 00:14:27,580
ntlm client receives this malformed

350
00:14:23,860 --> 00:14:29,650
request and since and apparently it's

351
00:14:27,580 --> 00:14:32,320
just accept the request with no NetBIOS

352
00:14:29,650 --> 00:14:34,209
computer name creating an entry level

353
00:14:32,320 --> 00:14:36,760
authentication message that obviously

354
00:14:34,210 --> 00:14:39,460
does not have the net computer name the

355
00:14:36,760 --> 00:14:40,990
ntlm server would also accept the ntlm

356
00:14:39,460 --> 00:14:43,150
authenticate with no net balance

357
00:14:40,990 --> 00:14:44,500
computer name and would generate a

358
00:14:43,150 --> 00:14:48,160
network own message we've known that

359
00:14:44,500 --> 00:14:50,590
both computer name the third surprising

360
00:14:48,160 --> 00:14:52,630
thing is that the DC would receive a net

361
00:14:50,590 --> 00:14:54,940
logon message with no net buyers

362
00:14:52,630 --> 00:14:57,010
computer name we've known that both

363
00:14:54,940 --> 00:14:59,680
computer name is unable to perform the

364
00:14:57,010 --> 00:15:01,540
validation that the net Logan is spoofed

365
00:14:59,680 --> 00:15:05,319
or not and would simply approve the

366
00:15:01,540 --> 00:15:06,969
request so there is one last obstacle

367
00:15:05,320 --> 00:15:09,130
will need to overcome and that's the

368
00:15:06,970 --> 00:15:10,750
message integrity code the message

369
00:15:09,130 --> 00:15:13,510
integrity code is a cryptographic

370
00:15:10,750 --> 00:15:15,490
signature signing all three until a

371
00:15:13,510 --> 00:15:18,160
message in the same session the

372
00:15:15,490 --> 00:15:21,640
antibellum negotiate ntlm challenge and

373
00:15:18,160 --> 00:15:25,180
antenna authenticate the cryptographic

374
00:15:21,640 --> 00:15:28,390
key for the make is the ntlm session

375
00:15:25,180 --> 00:15:31,000
signing key and impossibly already

376
00:15:28,390 --> 00:15:31,319
understand the solution we can spoof a

377
00:15:31,000 --> 00:15:34,020
net

378
00:15:31,320 --> 00:15:37,100
one message retrieve the ntlm session

379
00:15:34,020 --> 00:15:39,750
key and simply recalculate the mick

380
00:15:37,100 --> 00:15:41,970
let's look at that tech flow I know it

381
00:15:39,750 --> 00:15:44,460
was a bit complex so we'll run over it

382
00:15:41,970 --> 00:15:46,590
again detect out the attack the

383
00:15:44,460 --> 00:15:48,840
compromised server receives an anti lamp

384
00:15:46,590 --> 00:15:49,320
challenge message and Templars with this

385
00:15:48,840 --> 00:15:53,160
message

386
00:15:49,320 --> 00:15:55,860
removing the net bugs computer name the

387
00:15:53,160 --> 00:15:58,260
ntlm client accepts this message and

388
00:15:55,860 --> 00:16:00,240
sends an ntlm authenticate message that

389
00:15:58,260 --> 00:16:03,390
does not contain a net buyers computer

390
00:16:00,240 --> 00:16:05,730
name we are creating a spoofing we're

391
00:16:03,390 --> 00:16:08,400
creating a spoofed net logo message and

392
00:16:05,730 --> 00:16:12,240
this e cannot really date whether we are

393
00:16:08,400 --> 00:16:14,520
the correct target or not and simply

394
00:16:12,240 --> 00:16:16,680
returns a session key now that we have a

395
00:16:14,520 --> 00:16:19,410
session key we are recalculating the

396
00:16:16,680 --> 00:16:23,189
make and sending a message will the make

397
00:16:19,410 --> 00:16:25,170
that the attack target expects obviously

398
00:16:23,190 --> 00:16:27,300
the attack target would create a very

399
00:16:25,170 --> 00:16:30,510
similar net logon message and receive

400
00:16:27,300 --> 00:16:32,490
the same session key that we have now

401
00:16:30,510 --> 00:16:34,830
that we have a session key and as in an

402
00:16:32,490 --> 00:16:38,280
anti level 10 ticketed session we can

403
00:16:34,830 --> 00:16:40,200
perform any SMB command that we like now

404
00:16:38,280 --> 00:16:43,880
I want to stress the importance of this

405
00:16:40,200 --> 00:16:47,010
issue ntlm server signing is the only

406
00:16:43,880 --> 00:16:50,550
mitigation protecting domain controllers

407
00:16:47,010 --> 00:16:53,430
from the authentication so if we're able

408
00:16:50,550 --> 00:16:56,250
to capture an antelope session from a

409
00:16:53,430 --> 00:16:58,739
domain admin there is no mitigation we

410
00:16:56,250 --> 00:17:02,760
could relate this ntlm session to a

411
00:16:58,740 --> 00:17:05,160
domain controller dumping hashes running

412
00:17:02,760 --> 00:17:09,300
code on the domain controller completely

413
00:17:05,160 --> 00:17:16,110
compromising that machine so now I want

414
00:17:09,300 --> 00:17:18,089
to present a demo okay so I'm using ion

415
00:17:16,109 --> 00:17:20,698
packet which is an open source tool for

416
00:17:18,089 --> 00:17:22,409
performing ntlm relay attacks and the

417
00:17:20,699 --> 00:17:27,959
first attack is not using our

418
00:17:22,410 --> 00:17:30,470
vulnerability as you can see no session

419
00:17:27,959 --> 00:17:33,510
signing key was able to be retrieved and

420
00:17:30,470 --> 00:17:35,840
the SM the domain controller rejected

421
00:17:33,510 --> 00:17:40,290
our SMB session since it is not signed

422
00:17:35,840 --> 00:17:41,850
now let's look at the network traffic we

423
00:17:40,290 --> 00:17:43,970
can see that the anterior authenticate

424
00:17:41,850 --> 00:17:48,500
message contains a NetBIOS compute

425
00:17:43,970 --> 00:17:51,559
to name so we are unable to spoof a net

426
00:17:48,500 --> 00:17:54,950
look on request and the SM this session

427
00:17:51,559 --> 00:17:58,850
is not signed you can see that the

428
00:17:54,950 --> 00:18:02,210
signature finding zeros and that's why

429
00:17:58,850 --> 00:18:04,639
the server rejected our request now

430
00:18:02,210 --> 00:18:15,919
let's try try running the same attack

431
00:18:04,640 --> 00:18:17,659
without modified exploit okay so you see

432
00:18:15,919 --> 00:18:20,480
we are running this command with two

433
00:18:17,659 --> 00:18:22,610
additional fields one is the Machine

434
00:18:20,480 --> 00:18:25,250
compute the computer accounts edge and

435
00:18:22,610 --> 00:18:28,158
the second is the remove target removing

436
00:18:25,250 --> 00:18:33,590
the the network's name from the ntlm

437
00:18:28,159 --> 00:18:35,750
challenge now we'll go into the other

438
00:18:33,590 --> 00:18:39,379
machine where a privileged account is

439
00:18:35,750 --> 00:18:40,880
performing browsing session and you can

440
00:18:39,380 --> 00:18:44,600
see that we were able to retrieve a

441
00:18:40,880 --> 00:18:47,210
session signing key it is the session

442
00:18:44,600 --> 00:18:49,100
signing key and we were able to create

443
00:18:47,210 --> 00:18:51,890
an SMB session through the domain

444
00:18:49,100 --> 00:18:54,049
controller dumping some hashes from the

445
00:18:51,890 --> 00:18:55,850
domain controller we could have run any

446
00:18:54,049 --> 00:18:57,950
other command and compromise the domain

447
00:18:55,850 --> 00:19:00,439
now let's look again at the network

448
00:18:57,950 --> 00:19:03,350
traffic so you can see the original net

449
00:19:00,440 --> 00:19:07,190
logon until a message that contain the

450
00:19:03,350 --> 00:19:09,799
NetBIOS computer name you can see on the

451
00:19:07,190 --> 00:19:10,370
HTTP channel we've modified the ntlm

452
00:19:09,799 --> 00:19:12,620
challenge

453
00:19:10,370 --> 00:19:15,590
removing the NetBIOS computer name and

454
00:19:12,620 --> 00:19:18,559
you can see that the mouse that send us

455
00:19:15,590 --> 00:19:19,840
back an anti la message with no NetBIOS

456
00:19:18,559 --> 00:19:23,960
computer name

457
00:19:19,840 --> 00:19:26,240
so we relate that message you can't see

458
00:19:23,960 --> 00:19:28,280
the net logon sense is encrypted but

459
00:19:26,240 --> 00:19:32,440
we've retrieved the session key and now

460
00:19:28,280 --> 00:19:32,440
you can see that the SMB session is sad

461
00:19:35,530 --> 00:19:41,360
so just to summarize we have presented a

462
00:19:38,840 --> 00:19:43,370
novel attack allowing any attacker in

463
00:19:41,360 --> 00:19:46,459
the network to retrieve ntlm session

464
00:19:43,370 --> 00:19:52,820
keys and make any ntlm relay attack

465
00:19:46,460 --> 00:19:54,740
walk now I want to discuss the fix so we

466
00:19:52,820 --> 00:19:57,080
have disclosed this issue to Microsoft a

467
00:19:54,740 --> 00:19:58,010
while back and Microsoft acknowledged

468
00:19:57,080 --> 00:20:02,090
the issue

469
00:19:58,010 --> 00:20:05,270
and send a fix in the Juliet release the

470
00:20:02,090 --> 00:20:08,270
fixed microsoft did was to for ntlm

471
00:20:05,270 --> 00:20:10,460
servers target servers to authenticate

472
00:20:08,270 --> 00:20:12,799
whether the ntlm authenticate message

473
00:20:10,460 --> 00:20:16,010
contains a net buyers computer name and

474
00:20:12,799 --> 00:20:18,940
if no NetBIOS computer name is present

475
00:20:16,010 --> 00:20:21,350
then they'll simply reject that request

476
00:20:18,940 --> 00:20:24,049
there are a few caveats with the fix

477
00:20:21,350 --> 00:20:26,918
that we want to talk about the first

478
00:20:24,049 --> 00:20:30,559
probably the most interesting is that

479
00:20:26,919 --> 00:20:32,570
repairs are feature of ntlm v2 this

480
00:20:30,559 --> 00:20:35,299
means that if an attacker gets his hands

481
00:20:32,570 --> 00:20:37,760
on an ant Island v1 session there was no

482
00:20:35,299 --> 00:20:41,000
mitigation in for him to stop willing

483
00:20:37,760 --> 00:20:42,860
that session so if you really can't tell

484
00:20:41,000 --> 00:20:45,919
everyone you will probably get relayed

485
00:20:42,860 --> 00:20:48,168
the second is that the fix is applied on

486
00:20:45,919 --> 00:20:50,780
ntlm servers and not domain controllers

487
00:20:48,169 --> 00:20:52,760
this means that any order windows

488
00:20:50,780 --> 00:20:55,460
version like Windows XP is still

489
00:20:52,760 --> 00:20:57,799
vulnerable and other windows OS that

490
00:20:55,460 --> 00:21:01,640
receives ntlm of indications are also

491
00:20:57,799 --> 00:21:04,100
vulnerable to this issue this probably a

492
00:21:01,640 --> 00:21:07,010
small tidbit is that caching as always

493
00:21:04,100 --> 00:21:09,159
is not enough in order for patch to work

494
00:21:07,010 --> 00:21:12,080
you need to restart your machine and

495
00:21:09,160 --> 00:21:15,200
since the patch is not applied centrally

496
00:21:12,080 --> 00:21:18,350
on the DC disapproving hold net logon

497
00:21:15,200 --> 00:21:20,390
messages any restarted machine in your

498
00:21:18,350 --> 00:21:23,928
network is still vulnerable to this

499
00:21:20,390 --> 00:21:26,030
attack with that I'm going to pass the

500
00:21:23,929 --> 00:21:28,370
stage back to marina to present it to

501
00:21:26,030 --> 00:21:29,870
additional vulnerabilities we found okay

502
00:21:28,370 --> 00:21:32,209
thank you you're on I hope you're

503
00:21:29,870 --> 00:21:34,489
concentrated enough to see more to more

504
00:21:32,210 --> 00:21:36,770
vulnerabilities that we found the first

505
00:21:34,490 --> 00:21:40,280
is drop the make the message integrity

506
00:21:36,770 --> 00:21:43,730
code the message integrity code is an H

507
00:21:40,280 --> 00:21:46,428
Mac md5 using the session key on the

508
00:21:43,730 --> 00:21:48,530
three ntlm messages and the goal of this

509
00:21:46,429 --> 00:21:50,840
message integrity code is to verify that

510
00:21:48,530 --> 00:21:53,660
attackers did not tamper with any of the

511
00:21:50,840 --> 00:21:56,178
ntlm messages let's see an example of

512
00:21:53,660 --> 00:21:58,429
why we might make this Mik field let's

513
00:21:56,179 --> 00:22:01,970
say we have a client connecting to a car

514
00:21:58,429 --> 00:22:03,890
for my server using ntlm and let's say

515
00:22:01,970 --> 00:22:05,990
that it wants to establish sign

516
00:22:03,890 --> 00:22:08,299
communication so this is done by setting

517
00:22:05,990 --> 00:22:10,440
the negotiate sign flag that you can see

518
00:22:08,299 --> 00:22:13,470
up on the screen in the ntlm

519
00:22:10,440 --> 00:22:15,570
message now if attackers try to relay

520
00:22:13,470 --> 00:22:18,059
this message as is to another server

521
00:22:15,570 --> 00:22:20,189
that supports signing all they would get

522
00:22:18,059 --> 00:22:21,870
is a signed session now let's assume

523
00:22:20,190 --> 00:22:23,549
that all the servers are patched and

524
00:22:21,870 --> 00:22:26,189
attackers have no way to retrieve the

525
00:22:23,549 --> 00:22:28,168
signing key so they would not be able to

526
00:22:26,190 --> 00:22:30,899
sign any communication to the attack

527
00:22:28,169 --> 00:22:33,570
server and the attack would fail however

528
00:22:30,899 --> 00:22:35,668
what they might try to do is unset this

529
00:22:33,570 --> 00:22:37,590
signing flag in order to create an

530
00:22:35,669 --> 00:22:40,740
unsigned session against the target

531
00:22:37,590 --> 00:22:43,230
however even changing a single bit in

532
00:22:40,740 --> 00:22:45,269
one of those three ntlm messages would

533
00:22:43,230 --> 00:22:47,129
make the message integrity code no

534
00:22:45,269 --> 00:22:50,460
longer valid and the attack would fail

535
00:22:47,129 --> 00:22:52,500
so that would not be possible as Samba

536
00:22:50,460 --> 00:22:54,720
clients turn all the signing negotiate

537
00:22:52,500 --> 00:22:57,120
flag by default and also the user make

538
00:22:54,720 --> 00:22:59,279
this is why it was considered very hard

539
00:22:57,120 --> 00:23:01,649
or even impossible to perform and tell

540
00:22:59,279 --> 00:23:03,360
them really from SMB to any other

541
00:23:01,649 --> 00:23:05,370
protocol simply because the attackers

542
00:23:03,360 --> 00:23:06,750
would need to sign the session and they

543
00:23:05,370 --> 00:23:08,939
would not be able to retrieve the

544
00:23:06,750 --> 00:23:11,879
signing key this is in contrast to other

545
00:23:08,940 --> 00:23:14,610
protocols such as HTTP which do not set

546
00:23:11,879 --> 00:23:17,668
this flag so it's much it's much easier

547
00:23:14,610 --> 00:23:19,939
to perform until and relay from HTTP to

548
00:23:17,669 --> 00:23:22,490
SMB or LDAP to domain controllers

549
00:23:19,940 --> 00:23:25,350
however let's say our attackers are

550
00:23:22,490 --> 00:23:27,809
persistent and they want to perform an

551
00:23:25,350 --> 00:23:30,570
TL m relay to an aunty LM authentication

552
00:23:27,809 --> 00:23:33,149
over SMB how can they remove the signing

553
00:23:30,570 --> 00:23:34,799
requirement we started in order to

554
00:23:33,149 --> 00:23:36,658
modify the message integrity code

555
00:23:34,799 --> 00:23:38,519
attackers need to have knowledge of the

556
00:23:36,659 --> 00:23:41,279
signing key but we assume that they

557
00:23:38,519 --> 00:23:43,740
cannot retrieve it in any way what they

558
00:23:41,279 --> 00:23:47,129
can do is simply remove the make from

559
00:23:43,740 --> 00:23:49,529
the message so we just needed to remove

560
00:23:47,129 --> 00:23:52,019
the myth and the version and also modify

561
00:23:49,529 --> 00:23:54,330
some of the negotiation flags but it was

562
00:23:52,019 --> 00:23:56,519
simple as that we just removed the make

563
00:23:54,330 --> 00:23:59,009
from the message in order to bypass its

564
00:23:56,519 --> 00:24:00,929
protection and it's a funny story of how

565
00:23:59,009 --> 00:24:02,940
we discovered this vulnerability we were

566
00:24:00,929 --> 00:24:05,100
working on a completely unrelated

567
00:24:02,940 --> 00:24:07,110
vulnerability and this Mik was

568
00:24:05,100 --> 00:24:09,360
interfering with what we're trying to do

569
00:24:07,110 --> 00:24:11,519
so we remove the make and moved on to

570
00:24:09,360 --> 00:24:13,139
discover that vulnerability so after

571
00:24:11,519 --> 00:24:15,419
finishing we had to look back and think

572
00:24:13,139 --> 00:24:16,918
wait did we just find on something else

573
00:24:15,419 --> 00:24:20,009
do we need to disclose that one as well

574
00:24:16,919 --> 00:24:21,779
and it turns out that we did so by

575
00:24:20,009 --> 00:24:23,090
removing the make it allows attackers to

576
00:24:21,779 --> 00:24:25,190
tamper with any

577
00:24:23,090 --> 00:24:27,860
of the ntlm authentication so this is

578
00:24:25,190 --> 00:24:29,870
pretty serious as you can see an

579
00:24:27,860 --> 00:24:31,850
original aunty LM authenticate message

580
00:24:29,870 --> 00:24:34,399
that has version and message integrity

581
00:24:31,850 --> 00:24:37,459
code and our modified message simply

582
00:24:34,400 --> 00:24:40,280
missing those two fields okay so let's

583
00:24:37,460 --> 00:24:42,290
see an overview of this attack a client

584
00:24:40,280 --> 00:24:44,330
would connect to a compromised server by

585
00:24:42,290 --> 00:24:47,629
sending an ntlm negotiate message

586
00:24:44,330 --> 00:24:49,040
stating that he supports signing now

587
00:24:47,630 --> 00:24:50,690
attackers cannot relay this message

588
00:24:49,040 --> 00:24:53,000
because they would not be able to

589
00:24:50,690 --> 00:24:55,790
retrieve the signing key what they can

590
00:24:53,000 --> 00:24:57,790
do is unset the signing flag and relay

591
00:24:55,790 --> 00:25:00,770
the message to another attack target

592
00:24:57,790 --> 00:25:03,139
receive the challenge and now if the

593
00:25:00,770 --> 00:25:05,030
attack target does not enforce signing

594
00:25:03,140 --> 00:25:07,730
they would respond with the challenge

595
00:25:05,030 --> 00:25:10,730
and state that no signing was negotiated

596
00:25:07,730 --> 00:25:13,100
now attackers need to really this back

597
00:25:10,730 --> 00:25:15,200
to the client and usually clients don't

598
00:25:13,100 --> 00:25:17,209
enforce session signing so the client

599
00:25:15,200 --> 00:25:19,070
would accept this message and reply with

600
00:25:17,210 --> 00:25:21,410
an mplm authenticated message which

601
00:25:19,070 --> 00:25:24,310
includes a message integrity code now

602
00:25:21,410 --> 00:25:26,660
notice this message integrity code is

603
00:25:24,310 --> 00:25:28,790
assigning the three ntlm messages

604
00:25:26,660 --> 00:25:31,100
between the client and the compromised

605
00:25:28,790 --> 00:25:34,399
server so the first ntlm negotiate

606
00:25:31,100 --> 00:25:36,199
message state signing is supported since

607
00:25:34,400 --> 00:25:37,820
attackers did not really this message

608
00:25:36,200 --> 00:25:39,890
they cannot use this message integrity

609
00:25:37,820 --> 00:25:42,560
code so they simply remove it from the

610
00:25:39,890 --> 00:25:44,450
message all that is left is to verify

611
00:25:42,560 --> 00:25:46,970
the credentials we had the original

612
00:25:44,450 --> 00:25:49,730
client encrypt the challenge so we're

613
00:25:46,970 --> 00:25:52,670
good in that way and now attackers have

614
00:25:49,730 --> 00:25:54,380
established an unsigned session against

615
00:25:52,670 --> 00:25:56,630
the attack target of their choice which

616
00:25:54,380 --> 00:25:58,940
does not enforce signing this is why

617
00:25:56,630 --> 00:26:03,830
enforcing signing on as many machines in

618
00:25:58,940 --> 00:26:05,990
your domain is very important let's

619
00:26:03,830 --> 00:26:08,899
discuss what enabled this vulnerability

620
00:26:05,990 --> 00:26:12,110
to even happen as it turns out there is

621
00:26:08,900 --> 00:26:14,600
an AV pair called flags in the last ntlm

622
00:26:12,110 --> 00:26:17,060
authenticate message and if the second

623
00:26:14,600 --> 00:26:19,370
bit of this flag field is turned on it

624
00:26:17,060 --> 00:26:22,129
means that the client states that it is

625
00:26:19,370 --> 00:26:24,620
providing a make and the challenge sorry

626
00:26:22,130 --> 00:26:27,710
in the authenticate method so the client

627
00:26:24,620 --> 00:26:30,439
is stating I am providing a make in the

628
00:26:27,710 --> 00:26:33,710
message and also Adamek however the

629
00:26:30,440 --> 00:26:36,920
server upon receiving this request even

630
00:26:33,710 --> 00:26:39,440
if the flag states that the client

631
00:26:36,920 --> 00:26:41,150
providing a milk doesn't actually verify

632
00:26:39,440 --> 00:26:44,480
that a makers present so it doesn't

633
00:26:41,150 --> 00:26:46,910
matter what that field states okay so

634
00:26:44,480 --> 00:26:49,720
this is what enable us simply remove the

635
00:26:46,910 --> 00:26:52,730
milk from the ntlm authenticate message

636
00:26:49,720 --> 00:26:54,830
let's talk about the fix now that we

637
00:26:52,730 --> 00:26:56,810
know what the Flex does it's pretty easy

638
00:26:54,830 --> 00:26:58,820
to understand how Microsoft fix the

639
00:26:56,810 --> 00:27:01,220
issue so all they needed to do is for a

640
00:26:58,820 --> 00:27:03,379
server when receiving an ntlm

641
00:27:01,220 --> 00:27:05,540
authentication message that states in

642
00:27:03,380 --> 00:27:08,510
the flag that I make is present just

643
00:27:05,540 --> 00:27:09,980
verify that I make its present still

644
00:27:08,510 --> 00:27:11,780
some issues with this because some

645
00:27:09,980 --> 00:27:15,170
clients don't add a message integrity

646
00:27:11,780 --> 00:27:17,840
code by default such as Firefox on Linux

647
00:27:15,170 --> 00:27:19,670
or Mac OS machines so those clients

648
00:27:17,840 --> 00:27:21,889
would still be vulnerable to ntlm

649
00:27:19,670 --> 00:27:23,480
session tampering simply because they

650
00:27:21,890 --> 00:27:25,580
don't provide a make and attackers can

651
00:27:23,480 --> 00:27:28,490
still remove the negotiate signing flag

652
00:27:25,580 --> 00:27:30,860
and the more serious issue is that we

653
00:27:28,490 --> 00:27:33,110
were already able to bypass this fix as

654
00:27:30,860 --> 00:27:35,240
well and we have a vulnerability you

655
00:27:33,110 --> 00:27:37,610
like to call drop to make to however

656
00:27:35,240 --> 00:27:39,350
Microsoft hasn't patched this one yet so

657
00:27:37,610 --> 00:27:41,449
we'll not be discussing it today but

658
00:27:39,350 --> 00:27:44,030
we'll have a blob in a few days

659
00:27:41,450 --> 00:27:47,750
discussing this issue so stay tuned if

660
00:27:44,030 --> 00:27:50,120
you want to hear more about this one all

661
00:27:47,750 --> 00:27:52,940
right less variability that we have for

662
00:27:50,120 --> 00:27:54,889
you today is the EPA bypass as I've

663
00:27:52,940 --> 00:27:57,560
mentioned in the beginning the goal of

664
00:27:54,890 --> 00:28:00,410
the EPA security feature is to buy the

665
00:27:57,560 --> 00:28:02,450
ntlm authentication to the TLS session

666
00:28:00,410 --> 00:28:04,430
over which the authentication happens

667
00:28:02,450 --> 00:28:07,450
some of the servers that can be

668
00:28:04,430 --> 00:28:10,700
protected by EPA include a DFS

669
00:28:07,450 --> 00:28:13,370
LDS or other HTTP servers which support

670
00:28:10,700 --> 00:28:15,260
Windows integrated authentication so if

671
00:28:13,370 --> 00:28:17,419
attackers are able to really credentials

672
00:28:15,260 --> 00:28:19,220
to a TFS servers they might be able to

673
00:28:17,420 --> 00:28:21,650
take over your cloud resources as well

674
00:28:19,220 --> 00:28:24,680
if they're able to relate to or they can

675
00:28:21,650 --> 00:28:27,140
real users emails or send emails on his

676
00:28:24,680 --> 00:28:29,690
behalf and if they're able to relate to

677
00:28:27,140 --> 00:28:32,150
elder pass on domain controllers if that

678
00:28:29,690 --> 00:28:34,040
relayed user has enough privileges they

679
00:28:32,150 --> 00:28:37,700
can perform malicious modifications to

680
00:28:34,040 --> 00:28:41,090
Active Directory objects unfortunately

681
00:28:37,700 --> 00:28:43,580
by default EPA is not enabled on any of

682
00:28:41,090 --> 00:28:45,830
those servers so all those servers by

683
00:28:43,580 --> 00:28:47,990
default are vulnerable to the simplest

684
00:28:45,830 --> 00:28:49,760
ntlm relay attack the attackers would

685
00:28:47,990 --> 00:28:52,580
not even need to work hard

686
00:28:49,760 --> 00:28:54,350
as the EPA feature however let's the

687
00:28:52,580 --> 00:28:56,449
suit let's assume you have a very secure

688
00:28:54,350 --> 00:28:58,490
environment and you've enabled EPA and

689
00:28:56,450 --> 00:29:03,050
all of those servers let's see how we'd

690
00:28:58,490 --> 00:29:05,090
be able to bypass that as well I've

691
00:29:03,050 --> 00:29:07,970
discussed that the implementation of EPA

692
00:29:05,090 --> 00:29:10,280
is by adding a channel bindings field to

693
00:29:07,970 --> 00:29:12,950
the last ntlm authenticate method and

694
00:29:10,280 --> 00:29:15,200
this field is based on the certificate

695
00:29:12,950 --> 00:29:17,780
of the target server and also signed by

696
00:29:15,200 --> 00:29:20,600
the anti proof STR so it cannot be

697
00:29:17,780 --> 00:29:21,889
modified and again since attackers would

698
00:29:20,600 --> 00:29:23,629
be it would be using a different

699
00:29:21,890 --> 00:29:25,970
certificate they would not be able to

700
00:29:23,630 --> 00:29:28,640
relay this message to an attack target

701
00:29:25,970 --> 00:29:31,010
which enforces EPA so attackers have no

702
00:29:28,640 --> 00:29:33,290
way to modify the ntlm authenticate

703
00:29:31,010 --> 00:29:35,060
message to include the channel bindings

704
00:29:33,290 --> 00:29:39,110
field that they would like to be there

705
00:29:35,060 --> 00:29:41,419
what can they do let's look at the ntlm

706
00:29:39,110 --> 00:29:43,490
challenge message we know that when a

707
00:29:41,420 --> 00:29:45,650
client receives an mplm challenge it

708
00:29:43,490 --> 00:29:48,380
echos the fields that it receives in the

709
00:29:45,650 --> 00:29:50,690
a/v pairs into the ntlm authenticate

710
00:29:48,380 --> 00:29:53,210
message so what we try doing is

711
00:29:50,690 --> 00:29:56,510
calculating the channel binding field in

712
00:29:53,210 --> 00:29:59,030
in advance we can do this because it is

713
00:29:56,510 --> 00:30:00,740
based on public and attributes of the

714
00:29:59,030 --> 00:30:03,710
certificate so we can just calculate it

715
00:30:00,740 --> 00:30:06,620
in advance and inject it into the ntlm

716
00:30:03,710 --> 00:30:08,720
challenge so we're sending a client and

717
00:30:06,620 --> 00:30:10,939
ntlm challenge with the channel bindings

718
00:30:08,720 --> 00:30:13,610
that could contains the value that we

719
00:30:10,940 --> 00:30:15,560
want for our target to accept our

720
00:30:13,610 --> 00:30:18,649
message so let's see what the client

721
00:30:15,560 --> 00:30:21,350
will do turns out that the client would

722
00:30:18,650 --> 00:30:23,380
add or crafted field into the ntlm

723
00:30:21,350 --> 00:30:26,540
authentication method and sign it

724
00:30:23,380 --> 00:30:28,160
however it would also add an additional

725
00:30:26,540 --> 00:30:31,070
channel bindings field which would be

726
00:30:28,160 --> 00:30:32,630
set to all zeros so we haven't the field

727
00:30:31,070 --> 00:30:34,850
that we want in the message but we have

728
00:30:32,630 --> 00:30:37,160
an additional one the only question left

729
00:30:34,850 --> 00:30:39,770
is what will the target server the one

730
00:30:37,160 --> 00:30:41,810
that enforces EPA will do when receiving

731
00:30:39,770 --> 00:30:43,940
such a message so he has to channel

732
00:30:41,810 --> 00:30:45,800
bindings what will the server do turns

733
00:30:43,940 --> 00:30:48,710
out that it will take the first field

734
00:30:45,800 --> 00:30:51,379
the one we injected in advance to fit

735
00:30:48,710 --> 00:30:54,770
what it expects and simply accept our

736
00:30:51,380 --> 00:30:58,160
syndication last obstacle that we might

737
00:30:54,770 --> 00:31:01,220
have we just modify the ntlm challenge

738
00:30:58,160 --> 00:31:02,750
message the make is no longer valid well

739
00:31:01,220 --> 00:31:04,580
we know how to overcome this one

740
00:31:02,750 --> 00:31:08,330
already we simply drop the mick from the

741
00:31:04,580 --> 00:31:10,129
ntlm authenticate message okay so let's

742
00:31:08,330 --> 00:31:12,500
see a detailed flow because it contained

743
00:31:10,130 --> 00:31:14,870
many different things that we had to do

744
00:31:12,500 --> 00:31:17,750
so we have a client connecting using

745
00:31:14,870 --> 00:31:20,000
ntlm to a compromised server now

746
00:31:17,750 --> 00:31:22,220
attackers are establishing a TLS session

747
00:31:20,000 --> 00:31:25,400
against an attack target which enforces

748
00:31:22,220 --> 00:31:29,030
epa and relaying this ntlm negotiate

749
00:31:25,400 --> 00:31:31,850
message to the attack target receiving a

750
00:31:29,030 --> 00:31:34,070
challenge and also calculating the

751
00:31:31,850 --> 00:31:36,439
channel binding field we need to inject

752
00:31:34,070 --> 00:31:39,290
in order to bypass EPA on the server and

753
00:31:36,440 --> 00:31:40,940
simply inject it into the ntlm challenge

754
00:31:39,290 --> 00:31:44,180
that we relay back to the client the

755
00:31:40,940 --> 00:31:46,430
client encrypts the challenge adds a

756
00:31:44,180 --> 00:31:48,760
rogue Channel binding into the message

757
00:31:46,430 --> 00:31:51,470
and also add a message integrity code

758
00:31:48,760 --> 00:31:53,810
we've already discussed that we cannot

759
00:31:51,470 --> 00:31:55,280
relay this message integrity code back

760
00:31:53,810 --> 00:31:58,159
to the attack target because we just

761
00:31:55,280 --> 00:32:00,379
modify the challenge so we just remove

762
00:31:58,160 --> 00:32:02,330
the child which sorry remove the message

763
00:32:00,380 --> 00:32:04,610
integrity code from the message and

764
00:32:02,330 --> 00:32:06,439
since the message includes the channel

765
00:32:04,610 --> 00:32:08,479
bindings field that we calculated in

766
00:32:06,440 --> 00:32:11,210
advance to fit what the server expects

767
00:32:08,480 --> 00:32:13,220
would be able to bypass EPA and of

768
00:32:11,210 --> 00:32:15,170
course since the challenge was computed

769
00:32:13,220 --> 00:32:16,520
using the correct password hash the

770
00:32:15,170 --> 00:32:18,950
domain controller would approve our

771
00:32:16,520 --> 00:32:20,900
request and now we can do anything we

772
00:32:18,950 --> 00:32:23,870
want on their attack target which can be

773
00:32:20,900 --> 00:32:28,010
again in a DFS or or even a domain

774
00:32:23,870 --> 00:32:29,629
controller all right let's see a demo of

775
00:32:28,010 --> 00:32:32,690
this one as well so what we'll see here

776
00:32:29,630 --> 00:32:34,580
is will have an HTTP server an HTTP

777
00:32:32,690 --> 00:32:36,680
relay server which a client would

778
00:32:34,580 --> 00:32:39,770
connect to and we'll try to relate the

779
00:32:36,680 --> 00:32:41,870
ntlm authentication over Elda pass to a

780
00:32:39,770 --> 00:32:44,000
domain controller which enforces Elda

781
00:32:41,870 --> 00:32:45,979
pass channel binding so we'll see in the

782
00:32:44,000 --> 00:32:48,200
first scenario we're not using our

783
00:32:45,980 --> 00:32:51,110
vulnerability we would fail and then

784
00:32:48,200 --> 00:32:52,730
when we implement our vulnerability the

785
00:32:51,110 --> 00:32:54,590
domain controller would allow us to do

786
00:32:52,730 --> 00:32:56,900
what we want so what we're trying to do

787
00:32:54,590 --> 00:33:01,040
is to take a user called test user and

788
00:32:56,900 --> 00:33:02,810
add it to the enterprise admins group as

789
00:33:01,040 --> 00:33:05,120
you can see I hope you can see if not

790
00:33:02,810 --> 00:33:07,190
we'll upload this later the test user is

791
00:33:05,120 --> 00:33:10,760
not an administrative account we're

792
00:33:07,190 --> 00:33:13,420
running our HTTP relay server and trying

793
00:33:10,760 --> 00:33:16,490
to connect using a client to a rogue

794
00:33:13,420 --> 00:33:18,020
HTTP relay server now

795
00:33:16,490 --> 00:33:19,760
you can see that the authentication

796
00:33:18,020 --> 00:33:21,980
failed we were not able to authenticate

797
00:33:19,760 --> 00:33:24,740
to the domain controller via Elda pass

798
00:33:21,980 --> 00:33:28,400
and you can see that there is no channel

799
00:33:24,740 --> 00:33:29,929
binding in the challenge and then in the

800
00:33:28,400 --> 00:33:31,910
authenticate message we can see that we

801
00:33:29,929 --> 00:33:34,309
have a channel binding but it is set to

802
00:33:31,910 --> 00:33:36,410
all zeros so this is the one that we

803
00:33:34,309 --> 00:33:39,170
relay back to the domain controller and

804
00:33:36,410 --> 00:33:40,820
the domain controller does not accept

805
00:33:39,170 --> 00:33:45,220
our message this is not the channel

806
00:33:40,820 --> 00:33:45,220
binding field that it is expecting all

807
00:33:45,910 --> 00:33:51,400
right now we'll try to run it again but

808
00:33:48,770 --> 00:33:53,270
this time we'll add new more two and new

809
00:33:51,400 --> 00:33:55,880
parameters first of all we'll be

810
00:33:53,270 --> 00:33:57,920
removing the milk and second will be

811
00:33:55,880 --> 00:34:00,890
injecting or channel binding into the

812
00:33:57,920 --> 00:34:04,010
challenge message okay so let's run this

813
00:34:00,890 --> 00:34:06,530
one again and connect using the client

814
00:34:04,010 --> 00:34:11,719
to a rogue HTTP server and see what

815
00:34:06,530 --> 00:34:13,070
happens this time so in the in the

816
00:34:11,719 --> 00:34:15,049
console we can see that the

817
00:34:13,070 --> 00:34:18,379
authentication was successful and that

818
00:34:15,050 --> 00:34:21,740
we were able to add our test user to the

819
00:34:18,379 --> 00:34:24,500
enterprise admins group let's look at

820
00:34:21,739 --> 00:34:26,509
what happened in the trap so the

821
00:34:24,500 --> 00:34:28,460
original challenge that we got from the

822
00:34:26,510 --> 00:34:31,159
domain controller did not have a channel

823
00:34:28,460 --> 00:34:33,290
binding however the one we're sending

824
00:34:31,159 --> 00:34:35,210
back to the client does contain the

825
00:34:33,290 --> 00:34:38,810
channel binding that we computed in

826
00:34:35,210 --> 00:34:40,699
advance okay so the client signs our

827
00:34:38,810 --> 00:34:43,699
rogue channel binding you can see it

828
00:34:40,699 --> 00:34:46,819
here and adds an additional one set

829
00:34:43,699 --> 00:34:48,859
which is set to all zeros we relay this

830
00:34:46,820 --> 00:34:50,480
message back to the domain controller

831
00:34:48,859 --> 00:34:52,730
you can see again that we have our

832
00:34:50,480 --> 00:34:55,219
channel binding and an additional one

833
00:34:52,730 --> 00:34:57,290
set to all zeros and also there is no

834
00:34:55,219 --> 00:35:00,140
making the message what the original

835
00:34:57,290 --> 00:35:02,779
message did include emic so we were able

836
00:35:00,140 --> 00:35:04,580
to bypass all the best channel binding

837
00:35:02,780 --> 00:35:06,800
of that server by injecting our

838
00:35:04,580 --> 00:35:08,509
malicious channel binding into the

839
00:35:06,800 --> 00:35:11,420
challenge message you can see now that

840
00:35:08,510 --> 00:35:13,609
the test user is an enterprise admin and

841
00:35:11,420 --> 00:35:19,270
attackers can do anything they want and

842
00:35:13,609 --> 00:35:22,160
completely compromise their domain ok so

843
00:35:19,270 --> 00:35:25,619
thank you

844
00:35:22,160 --> 00:35:27,450
so that was our channel binding bypass

845
00:35:25,619 --> 00:35:29,430
and it's also the last vulnerability

846
00:35:27,450 --> 00:35:32,640
that we'll see let's discuss the fix for

847
00:35:29,430 --> 00:35:35,160
a second the fix is based on detecting a

848
00:35:32,640 --> 00:35:37,319
signature of this attack so if a server

849
00:35:35,160 --> 00:35:39,779
receives an authenticated message that

850
00:35:37,319 --> 00:35:42,359
has two Channel bindings it would simply

851
00:35:39,779 --> 00:35:44,670
deny the request still some problems

852
00:35:42,359 --> 00:35:47,670
with this fix because some clients don't

853
00:35:44,670 --> 00:35:49,319
support EPA and don't admit those are

854
00:35:47,670 --> 00:35:50,789
the same you want the same ones that

855
00:35:49,319 --> 00:35:52,740
I've discussed previously

856
00:35:50,789 --> 00:35:54,720
so attackers would still be able to

857
00:35:52,740 --> 00:35:56,910
inject the channel binding to those

858
00:35:54,720 --> 00:35:59,250
clients and since those don't support

859
00:35:56,910 --> 00:36:01,259
EPA they would not add an additional one

860
00:35:59,250 --> 00:36:04,079
and attackers would be able to target

861
00:36:01,260 --> 00:36:08,099
those two real a sent occasional to

862
00:36:04,079 --> 00:36:09,960
domain controllers for example okay so

863
00:36:08,099 --> 00:36:12,210
we've seen many vulnerabilities we've

864
00:36:09,960 --> 00:36:14,460
just seen how we're able to bypass all

865
00:36:12,210 --> 00:36:16,799
the most critical mitigations against

866
00:36:14,460 --> 00:36:18,270
ntlm really now let's see some of the

867
00:36:16,799 --> 00:36:19,650
detection let's see some of the

868
00:36:18,270 --> 00:36:21,480
detections that we have in order to

869
00:36:19,650 --> 00:36:25,920
detect the attack techniques that I've

870
00:36:21,480 --> 00:36:28,619
just presented thanks marina so by now I

871
00:36:25,920 --> 00:36:31,440
think you've all understood that ntlm is

872
00:36:28,619 --> 00:36:32,640
risky and tell'em is risky not only due

873
00:36:31,440 --> 00:36:35,400
to the vulnerabilities we have

874
00:36:32,640 --> 00:36:37,440
discovered but also due to bad

875
00:36:35,400 --> 00:36:40,619
configurations and insecure default

876
00:36:37,440 --> 00:36:42,630
values so we believe at the terminus tic

877
00:36:40,619 --> 00:36:46,109
algorithm to detect ntlm really is

878
00:36:42,630 --> 00:36:48,809
critically needed before I'll talk about

879
00:36:46,109 --> 00:36:51,089
the ntlm relay detection I want to take

880
00:36:48,809 --> 00:36:54,779
a bird's eye view and discuss Active

881
00:36:51,089 --> 00:36:56,190
Directory attack detection most research

882
00:36:54,779 --> 00:36:59,160
on detecting Active Directory

883
00:36:56,190 --> 00:37:01,680
infrastructure attacks focuses on two

884
00:36:59,160 --> 00:37:05,279
paradigms the first analyzing network

885
00:37:01,680 --> 00:37:07,770
traffic and the second analyzing logs if

886
00:37:05,279 --> 00:37:09,869
you consider analyzing network traffic

887
00:37:07,770 --> 00:37:13,470
there was not a lot of research on

888
00:37:09,869 --> 00:37:16,079
analyzing encrypted traffic if we look

889
00:37:13,470 --> 00:37:18,450
at some typical examples we can see that

890
00:37:16,079 --> 00:37:21,410
for instance golden and silver tickets

891
00:37:18,450 --> 00:37:23,520
most common detection methods include

892
00:37:21,410 --> 00:37:25,950
analyzing the encryption algorithm

893
00:37:23,520 --> 00:37:28,440
ticket lifetime and other creation

894
00:37:25,950 --> 00:37:30,328
attributes we argued that if you'll

895
00:37:28,440 --> 00:37:32,400
decrypt the Kerberos tickets and

896
00:37:30,329 --> 00:37:33,680
validate that the fields are not

897
00:37:32,400 --> 00:37:35,150
malicious

898
00:37:33,680 --> 00:37:37,129
you'll be able to create a better

899
00:37:35,150 --> 00:37:39,530
detection for golden tickets and silver

900
00:37:37,130 --> 00:37:42,920
tickets the second attempt to is

901
00:37:39,530 --> 00:37:45,460
performing reconnaissance such as Vlad

902
00:37:42,920 --> 00:37:49,280
and doing same rol derp reconnaissance

903
00:37:45,460 --> 00:37:52,150
mostly caught by analyzing the LDAP

904
00:37:49,280 --> 00:37:56,210
track or color queries that they do

905
00:37:52,150 --> 00:37:59,090
while analyzing logs such as etw can

906
00:37:56,210 --> 00:38:00,680
create detections if we want to enforce

907
00:37:59,090 --> 00:38:03,440
traffic in real-time we have to have

908
00:38:00,680 --> 00:38:05,930
network based detections while these

909
00:38:03,440 --> 00:38:08,420
tools often include are encrypted making

910
00:38:05,930 --> 00:38:10,129
network based detection harder if will

911
00:38:08,420 --> 00:38:13,940
the kill the traffic will be able to do

912
00:38:10,130 --> 00:38:17,060
to have a much better detection the

913
00:38:13,940 --> 00:38:20,890
third is ntlm relay up till this point

914
00:38:17,060 --> 00:38:24,560
no aunty LM relay detection it existed

915
00:38:20,890 --> 00:38:27,109
except from analyzing anomalous ntlm

916
00:38:24,560 --> 00:38:28,190
activity so what we want to do is to

917
00:38:27,110 --> 00:38:32,150
present the first

918
00:38:28,190 --> 00:38:34,490
ntlm relay detection in order to do that

919
00:38:32,150 --> 00:38:37,670
I'm going to do another deep dive into

920
00:38:34,490 --> 00:38:39,950
the ntlm authenticate message so as you

921
00:38:37,670 --> 00:38:43,130
recall the ntlm authenticate message has

922
00:38:39,950 --> 00:38:46,129
av pairs some of them are echoed from

923
00:38:43,130 --> 00:38:49,730
the target info others are created by

924
00:38:46,130 --> 00:38:52,700
the ntlm client identifying the server

925
00:38:49,730 --> 00:38:54,200
that it wanted to connect to the end one

926
00:38:52,700 --> 00:38:56,899
of these fields that I'm going to focus

927
00:38:54,200 --> 00:38:59,600
about is the target name the target name

928
00:38:56,900 --> 00:39:04,670
is very similar to SP n in care boss and

929
00:38:59,600 --> 00:39:07,370
in this example it's six slash 10.1.1.1

930
00:39:04,670 --> 00:39:10,130
meaning the ntlm client originally

931
00:39:07,370 --> 00:39:13,609
connected to an SMB server with that

932
00:39:10,130 --> 00:39:16,310
relevant IP as with any other AV pair

933
00:39:13,610 --> 00:39:18,860
this IV / is part of the antipasto and

934
00:39:16,310 --> 00:39:23,960
now attacker can modify all temper with

935
00:39:18,860 --> 00:39:26,420
this field so as we know once the entire

936
00:39:23,960 --> 00:39:27,020
server receives an aunt LM authenticate

937
00:39:26,420 --> 00:39:29,930
message

938
00:39:27,020 --> 00:39:32,509
it would follow this message copying it

939
00:39:29,930 --> 00:39:34,759
entirely in the net local message along

940
00:39:32,510 --> 00:39:37,850
with all the AV pills so how can we use

941
00:39:34,760 --> 00:39:40,850
this fact to detect the ntlm relay what

942
00:39:37,850 --> 00:39:43,790
we can do is simply compare the ntlm

943
00:39:40,850 --> 00:39:46,080
relay to the antenna the network and

944
00:39:43,790 --> 00:39:48,450
originator to the target

945
00:39:46,080 --> 00:39:51,480
name provided in the message in favilla

946
00:39:48,450 --> 00:39:53,490
a the code the tech target would be

947
00:39:51,480 --> 00:39:56,300
identified as the net logon originator

948
00:39:53,490 --> 00:39:58,490
and the relay which is different will be

949
00:39:56,300 --> 00:40:01,680
identified by the AVP

950
00:39:58,490 --> 00:40:04,080
identifying the target name so I was how

951
00:40:01,680 --> 00:40:06,330
such an attraction device can work the

952
00:40:04,080 --> 00:40:10,890
detection device would analyze all and

953
00:40:06,330 --> 00:40:13,950
all traffic in coming to the DC looking

954
00:40:10,890 --> 00:40:15,900
for net local messages after will

955
00:40:13,950 --> 00:40:19,319
decrypt this network on messages we can

956
00:40:15,900 --> 00:40:23,040
find out we can find ntlm authenticate

957
00:40:19,320 --> 00:40:25,650
message and competency if the ntlm

958
00:40:23,040 --> 00:40:28,230
server that originated the net logon is

959
00:40:25,650 --> 00:40:32,910
the same machine that is identified in

960
00:40:28,230 --> 00:40:35,090
the target server SPN so i know this is

961
00:40:32,910 --> 00:40:38,100
a bit complex so let's review it again

962
00:40:35,090 --> 00:40:41,790
so we begin with a regular ntlm relay

963
00:40:38,100 --> 00:40:43,799
attack the client receiving the ntlm

964
00:40:41,790 --> 00:40:45,660
challenge would create an aunty LM

965
00:40:43,800 --> 00:40:49,500
authenticate message and this message

966
00:40:45,660 --> 00:40:52,020
would contain a target server AVP we

967
00:40:49,500 --> 00:40:54,600
cannot modify this target server a VPS

968
00:40:52,020 --> 00:40:56,730
attackers so we simply relay that until

969
00:40:54,600 --> 00:40:59,279
an authenticated message with the target

970
00:40:56,730 --> 00:41:02,010
server the attack target would initiate

971
00:40:59,280 --> 00:41:06,420
a net local session and since it wants

972
00:41:02,010 --> 00:41:09,180
to enforce server signing it sorry my

973
00:41:06,420 --> 00:41:11,850
bad my mistake so the attack target

974
00:41:09,180 --> 00:41:14,430
would initiate a net logon message now

975
00:41:11,850 --> 00:41:16,290
the net local message is originated by

976
00:41:14,430 --> 00:41:18,390
the attack target and the dissing knows

977
00:41:16,290 --> 00:41:20,759
that the attack target originated the

978
00:41:18,390 --> 00:41:24,720
dead logon message but if we'll inspect

979
00:41:20,760 --> 00:41:27,720
the target server AVP we can detect that

980
00:41:24,720 --> 00:41:30,450
it was a discrepancy the target name

981
00:41:27,720 --> 00:41:32,879
identifies the compromised server and

982
00:41:30,450 --> 00:41:35,339
the network on originator is that tech

983
00:41:32,880 --> 00:41:38,310
target if we see that this discrepancy

984
00:41:35,340 --> 00:41:40,470
exists this must have been an mplm relay

985
00:41:38,310 --> 00:41:42,320
attack and we can block this message

986
00:41:40,470 --> 00:41:44,790
completely blocking the attempt

987
00:41:42,320 --> 00:41:49,650
regardless if server signing is enabled

988
00:41:44,790 --> 00:41:52,140
or disabled so what are the requirements

989
00:41:49,650 --> 00:41:54,750
to do so we need to monitor all DC

990
00:41:52,140 --> 00:41:57,210
traffic and we need to keep track of our

991
00:41:54,750 --> 00:41:59,760
computer accounts hashes since net logon

992
00:41:57,210 --> 00:42:02,369
messages are encrypted

993
00:41:59,760 --> 00:42:04,920
once we once we decrypt the net logon

994
00:42:02,369 --> 00:42:06,960
message we can simply compare the SPN

995
00:42:04,920 --> 00:42:09,990
present in the net local message to the

996
00:42:06,960 --> 00:42:13,230
net logon originator this defects all

997
00:42:09,990 --> 00:42:15,299
ntlm relay attacks done with until env2

998
00:42:13,230 --> 00:42:17,730
except one small scenario

999
00:42:15,299 --> 00:42:19,950
man-in-the-middle the reason we don't

1000
00:42:17,730 --> 00:42:21,680
detect many in the middle is since many

1001
00:42:19,950 --> 00:42:25,529
men in the middle

1002
00:42:21,680 --> 00:42:28,770
detect the compromised device directs

1003
00:42:25,530 --> 00:42:30,990
the ntlm authentication message to the

1004
00:42:28,770 --> 00:42:35,339
same server the client originally wanted

1005
00:42:30,990 --> 00:42:37,379
to connect to we believe this scenario

1006
00:42:35,339 --> 00:42:39,690
is less important from a couple of

1007
00:42:37,380 --> 00:42:42,089
reasons first many in the middle attacks

1008
00:42:39,690 --> 00:42:44,630
attacks are harder to accomplish than

1009
00:42:42,089 --> 00:42:48,808
ntlm relay attacks

1010
00:42:44,630 --> 00:42:51,059
second if session signing is not enabled

1011
00:42:48,809 --> 00:42:53,520
it can be done with care boss and third

1012
00:42:51,059 --> 00:42:55,290
you can only attack a single target

1013
00:42:53,520 --> 00:42:59,670
which the client originally wanted to

1014
00:42:55,290 --> 00:43:02,308
connect to decrypting network on traffic

1015
00:42:59,670 --> 00:43:04,980
does not only help with generic ntlm

1016
00:43:02,309 --> 00:43:07,619
relay detection we can detect the two

1017
00:43:04,980 --> 00:43:10,650
vulnerabilities we have found we can

1018
00:43:07,619 --> 00:43:12,660
detect the first vulnerability if we

1019
00:43:10,650 --> 00:43:14,400
look at the net logon message and see

1020
00:43:12,660 --> 00:43:16,859
that the a/v pairs does not contain a

1021
00:43:14,400 --> 00:43:18,990
net balance computer name this means

1022
00:43:16,859 --> 00:43:22,170
someone try to exploit your session key

1023
00:43:18,990 --> 00:43:23,819
is my session key vulnerability the

1024
00:43:22,170 --> 00:43:26,940
second one of ability can also be

1025
00:43:23,819 --> 00:43:29,130
detected we can detect EP a bypass if we

1026
00:43:26,940 --> 00:43:31,650
see an end a net logon message with an

1027
00:43:29,130 --> 00:43:33,599
anti authenticate that contains two

1028
00:43:31,650 --> 00:43:35,910
channel bindings AV pills

1029
00:43:33,599 --> 00:43:38,910
we know someone tried to exploit the EP

1030
00:43:35,910 --> 00:43:40,799
a bypass vulnerability and ferb probably

1031
00:43:38,910 --> 00:43:44,759
the most critical as I've mentioned

1032
00:43:40,799 --> 00:43:46,799
until + v1 is not protected at all but

1033
00:43:44,760 --> 00:43:50,010
if we can look at all metal burn

1034
00:43:46,799 --> 00:43:52,319
messages if we will see two net local

1035
00:43:50,010 --> 00:43:55,049
messages that contain the same challenge

1036
00:43:52,319 --> 00:43:57,390
and challenge response we know someone

1037
00:43:55,049 --> 00:43:59,549
tried to pass the challenge and do a

1038
00:43:57,390 --> 00:44:01,710
spoof networking session even with your

1039
00:43:59,549 --> 00:44:06,000
say session case my session key or the

1040
00:44:01,710 --> 00:44:08,339
previous 2015 vulnerability other than

1041
00:44:06,000 --> 00:44:09,930
just detecting vulnerabilities it will

1042
00:44:08,339 --> 00:44:10,970
decrypt net logon message there was a

1043
00:44:09,930 --> 00:44:13,669
real treasure for

1044
00:44:10,970 --> 00:44:15,950
routines we can look at the net logon

1045
00:44:13,670 --> 00:44:17,930
data the decrypted net lagoon data and

1046
00:44:15,950 --> 00:44:20,210
create reports about the security

1047
00:44:17,930 --> 00:44:22,700
configuration in the network for

1048
00:44:20,210 --> 00:44:26,900
instance if we see messages that don't

1049
00:44:22,700 --> 00:44:28,930
contain the Ava flag signaling the meek

1050
00:44:26,900 --> 00:44:32,540
presence we know that there are

1051
00:44:28,930 --> 00:44:35,240
computers in the network that same ntlm

1052
00:44:32,540 --> 00:44:38,060
authenticate messages with nomic we can

1053
00:44:35,240 --> 00:44:41,359
detect weak encryption methods like LM

1054
00:44:38,060 --> 00:44:43,700
and ntlm v1 and probably the list which

1055
00:44:41,360 --> 00:44:46,160
is the most interesting in my opinion we

1056
00:44:43,700 --> 00:44:48,379
can detect ntlm authentication inside

1057
00:44:46,160 --> 00:44:50,480
net logins that don't have a channel

1058
00:44:48,380 --> 00:44:53,030
bindings field if we can see such

1059
00:44:50,480 --> 00:44:55,760
messages this means these web servers

1060
00:44:53,030 --> 00:45:00,110
don't strictly enforce APA and hence

1061
00:44:55,760 --> 00:45:01,160
vulnerable to ntlm relay attacks so what

1062
00:45:00,110 --> 00:45:04,130
the data always we think you should

1063
00:45:01,160 --> 00:45:06,170
leave this session with the first

1064
00:45:04,130 --> 00:45:06,830
obviously you need to patch all your

1065
00:45:06,170 --> 00:45:10,460
machines

1066
00:45:06,830 --> 00:45:13,130
the second ntlm is risky you need to

1067
00:45:10,460 --> 00:45:15,800
reduce it and while you don't finally

1068
00:45:13,130 --> 00:45:18,620
eradicate that protocol you need to

1069
00:45:15,800 --> 00:45:21,500
enable server signing and EPA on all

1070
00:45:18,620 --> 00:45:23,839
machines in the network the third one I

1071
00:45:21,500 --> 00:45:27,860
take away is that you should stop using

1072
00:45:23,840 --> 00:45:31,490
ntlm v1 it was previously published that

1073
00:45:27,860 --> 00:45:32,120
all until MV one can sessions can be

1074
00:45:31,490 --> 00:45:34,939
cracked

1075
00:45:32,120 --> 00:45:37,670
we have now presented that all ntlm v1

1076
00:45:34,940 --> 00:45:43,580
sessions can be relayed seriously just

1077
00:45:37,670 --> 00:45:46,370
stop using ntlm v1 so the last part is

1078
00:45:43,580 --> 00:45:49,220
that sense I know that mitigating all

1079
00:45:46,370 --> 00:45:50,930
ntlm vulnerabilities is a process we

1080
00:45:49,220 --> 00:45:53,209
believe that the ntlm detection

1081
00:45:50,930 --> 00:45:55,220
algorithms we were just presented can go

1082
00:45:53,210 --> 00:46:00,020
a long way in making networks more

1083
00:45:55,220 --> 00:46:01,730
secure some credits are in do first

1084
00:46:00,020 --> 00:46:03,110
they all come in session felt from the

1085
00:46:01,730 --> 00:46:05,780
preempt research team have also

1086
00:46:03,110 --> 00:46:08,210
contributed to this research second

1087
00:46:05,780 --> 00:46:11,930
alberto Selina from alpena's integrate

1088
00:46:08,210 --> 00:46:13,910
our tech code into iron packet and 4i a

1089
00:46:11,930 --> 00:46:16,460
packet in general which is an awesome

1090
00:46:13,910 --> 00:46:18,440
tool that we use all the time in fact

1091
00:46:16,460 --> 00:46:23,330
all the attack all the demos you've seen

1092
00:46:18,440 --> 00:46:24,740
today were using iron packet so model

1093
00:46:23,330 --> 00:46:27,680
commendation is that you

1094
00:46:24,740 --> 00:46:28,339
using ntlm altogether but if you can't

1095
00:46:27,680 --> 00:46:29,810
resist

1096
00:46:28,339 --> 00:46:35,950
I hope the lessons you've learned today

1097
00:46:29,810 --> 00:46:40,219
would help you not get relayed thank you

1098
00:46:35,950 --> 00:46:40,218
[Applause]

