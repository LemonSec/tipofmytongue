1
00:00:00,060 --> 00:00:07,140
welcome to inside the Apple tea - this

2
00:00:04,049 --> 00:00:09,540
is the Jasmine room this speakers today

3
00:00:07,140 --> 00:00:12,509
are Michael David off and Jeremy

4
00:00:09,540 --> 00:00:15,329
Erickson a couple of notes for you

5
00:00:12,509 --> 00:00:16,980
before we begin the first one is to stop

6
00:00:15,330 --> 00:00:19,080
by the business hall located in Mandalay

7
00:00:16,980 --> 00:00:21,720
Bay Oceanside and shoreline ballrooms on

8
00:00:19,080 --> 00:00:24,119
level two also the blackout Arsenal is

9
00:00:21,720 --> 00:00:25,529
in the business hall on level two I'd

10
00:00:24,119 --> 00:00:27,269
like to thank you for putting your phone

11
00:00:25,529 --> 00:00:29,880
on vibrate it makes it easier for the

12
00:00:27,269 --> 00:00:31,740
rest of us to ignore it so with that I'd

13
00:00:29,880 --> 00:00:46,129
like you to welcome more speakers to the

14
00:00:31,740 --> 00:00:49,289
stage thank you alright

15
00:00:46,129 --> 00:00:51,239
well hello everybody I'm Michaela David

16
00:00:49,289 --> 00:00:52,920
often this is Jeremy Erickson we're both

17
00:00:51,239 --> 00:00:56,099
researchers on duas advanced research

18
00:00:52,920 --> 00:00:57,809
team dual labs do labs is a team of

19
00:00:56,100 --> 00:01:00,149
hackers researchers and engineers

20
00:00:57,809 --> 00:01:02,730
dedicated to protecting the public by

21
00:01:00,149 --> 00:01:04,920
identifying and fixing security

22
00:01:02,730 --> 00:01:07,080
vulnerabilities on a broad scale we do

23
00:01:04,920 --> 00:01:08,970
this by prototyping new products and

24
00:01:07,080 --> 00:01:11,070
conducting research into security

25
00:01:08,970 --> 00:01:13,470
systems used by the broader security

26
00:01:11,070 --> 00:01:15,149
community I've been working in the

27
00:01:13,470 --> 00:01:17,009
information security space for over a

28
00:01:15,150 --> 00:01:18,960
decade as a security researcher and

29
00:01:17,009 --> 00:01:20,729
consultant I primarily focus on

30
00:01:18,960 --> 00:01:23,580
vulnerability discovery exploit

31
00:01:20,729 --> 00:01:25,320
development and reverse engineering hi

32
00:01:23,580 --> 00:01:26,429
I'm Jeremy Erickson I've also been

33
00:01:25,320 --> 00:01:27,600
working in the information security

34
00:01:26,430 --> 00:01:30,570
space for about a decade

35
00:01:27,600 --> 00:01:32,189
I tend to work more on early prototyping

36
00:01:30,570 --> 00:01:34,408
of networks and systems but I

37
00:01:32,189 --> 00:01:40,139
occasionally like to go and see how

38
00:01:34,409 --> 00:01:42,450
things work on the inside we're here

39
00:01:40,140 --> 00:01:46,439
today to talk about the teacher chip the

40
00:01:42,450 --> 00:01:48,720
t2 is the successor to the t1 but the t1

41
00:01:46,439 --> 00:01:50,820
ship was the chip that powered the touch

42
00:01:48,720 --> 00:01:51,450
bar and touch ID on previous generations

43
00:01:50,820 --> 00:01:54,148
MacBooks

44
00:01:51,450 --> 00:01:57,060
and the t2 is the next evolution of that

45
00:01:54,149 --> 00:01:59,579
platform one of the new key aspects of

46
00:01:57,060 --> 00:02:01,799
the t2 is the greatly increased role

47
00:01:59,579 --> 00:02:03,899
that it plays in platform integrity and

48
00:02:01,799 --> 00:02:05,969
system security here today we're gonna

49
00:02:03,899 --> 00:02:08,639
discuss what the objectives the t2 are

50
00:02:05,969 --> 00:02:11,008
the t2 system architecture how to get

51
00:02:08,639 --> 00:02:12,799
started analyzing t2 firmware and the

52
00:02:11,008 --> 00:02:14,929
embedded ua Phi images

53
00:02:12,800 --> 00:02:17,060
how the secure boot flow has changed in

54
00:02:14,930 --> 00:02:19,460
t2 systems what accessible communication

55
00:02:17,060 --> 00:02:21,470
channels exist between the t2 and Mac OS

56
00:02:19,460 --> 00:02:23,720
how to directly communicate and

57
00:02:21,470 --> 00:02:25,520
interface with expose t2 services and

58
00:02:23,720 --> 00:02:30,050
share with you some tooling to make this

59
00:02:25,520 --> 00:02:31,600
process a little bit easier so based on

60
00:02:30,050 --> 00:02:34,010
our research we developed an

61
00:02:31,600 --> 00:02:36,530
understanding of what some of the t2s

62
00:02:34,010 --> 00:02:38,810
design objectives were one of the main

63
00:02:36,530 --> 00:02:40,700
ones was to enhance privacy controls by

64
00:02:38,810 --> 00:02:42,080
providing Hardware disconnects to

65
00:02:40,700 --> 00:02:44,420
certain peripherals like the built-in

66
00:02:42,080 --> 00:02:46,160
microphone and camera this allows Apple

67
00:02:44,420 --> 00:02:48,019
to prevent malware from being able to

68
00:02:46,160 --> 00:02:50,030
leverage those peripherals in scenarios

69
00:02:48,020 --> 00:02:51,490
such as when the laptop lid is closed or

70
00:02:50,030 --> 00:02:53,960
the screen is locked

71
00:02:51,490 --> 00:02:55,700
additionally they were aiming to better

72
00:02:53,960 --> 00:02:57,410
protect data at rest in a much greater

73
00:02:55,700 --> 00:02:59,690
capacity than has previously been done

74
00:02:57,410 --> 00:03:02,030
on Mac OS platforms by mixing in key

75
00:02:59,690 --> 00:03:03,680
material only available to the t2 Apple

76
00:03:02,030 --> 00:03:05,360
was preventing offline attacks in

77
00:03:03,680 --> 00:03:08,330
scenarios where the physical SSD flash

78
00:03:05,360 --> 00:03:11,180
chips are removed as the process of

79
00:03:08,330 --> 00:03:13,520
mixing in a password to ripe key with

80
00:03:11,180 --> 00:03:15,920
the t2 secret happens directly on the t2

81
00:03:13,520 --> 00:03:18,440
it allows Apple to throttle brute-force

82
00:03:15,920 --> 00:03:19,910
decryption attempts finally one of the

83
00:03:18,440 --> 00:03:22,010
most important design objectives of the

84
00:03:19,910 --> 00:03:23,359
t2 was to bring the same level of

85
00:03:22,010 --> 00:03:25,970
security and integrity protection

86
00:03:23,360 --> 00:03:31,160
available on iOS devices to the Mac OS

87
00:03:25,970 --> 00:03:33,530
ecosystem so why are we an

88
00:03:31,160 --> 00:03:36,079
authentication company looking at the t2

89
00:03:33,530 --> 00:03:37,700
in the first place well I do olabs we

90
00:03:36,080 --> 00:03:39,860
believe in the concept of democratizing

91
00:03:37,700 --> 00:03:41,690
security we strive to enable other

92
00:03:39,860 --> 00:03:43,910
researchers to leverage our work to

93
00:03:41,690 --> 00:03:46,130
further the field understanding the

94
00:03:43,910 --> 00:03:48,140
security underpinnings of a system is

95
00:03:46,130 --> 00:03:50,180
critical to being able to trust it and

96
00:03:48,140 --> 00:03:51,739
the more eyes there are on any critical

97
00:03:50,180 --> 00:03:53,570
piece of technology the more latent

98
00:03:51,740 --> 00:03:57,050
vulnerabilities will be uncovered and

99
00:03:53,570 --> 00:03:58,880
can be fixed the t2 is one of those leap

100
00:03:57,050 --> 00:04:00,560
ahead technologies that enables new

101
00:03:58,880 --> 00:04:02,180
endpoint centric enterprise security

102
00:04:00,560 --> 00:04:05,840
models and more on significant

103
00:04:02,180 --> 00:04:07,970
investigation now that we understand

104
00:04:05,840 --> 00:04:09,260
some of the objectives of the t2 and why

105
00:04:07,970 --> 00:04:14,000
we're looking at it let's look what at

106
00:04:09,260 --> 00:04:16,459
what the t2 actually is so in the Intel

107
00:04:14,000 --> 00:04:18,108
world the t2 is referred to as an

108
00:04:16,459 --> 00:04:19,608
embedded controller most of you're

109
00:04:18,108 --> 00:04:21,430
likely familiar with the concept of a

110
00:04:19,608 --> 00:04:23,450
base board management controller or BMC

111
00:04:21,430 --> 00:04:25,760
BMC is allow for remote an

112
00:04:23,450 --> 00:04:26,389
administration of a system there very

113
00:04:25,760 --> 00:04:28,370
commonly found

114
00:04:26,389 --> 00:04:30,770
in server architectures and are utilized

115
00:04:28,370 --> 00:04:33,469
heavily by the bare metal cloud industry

116
00:04:30,770 --> 00:04:35,568
to reset systems to a pristine state

117
00:04:33,469 --> 00:04:39,498
before provisioning new customers to

118
00:04:35,569 --> 00:04:41,090
them the t2 is essentially a BMC - the

119
00:04:39,499 --> 00:04:42,349
remote management stack embedded

120
00:04:41,090 --> 00:04:44,029
controllers are responsible for

121
00:04:42,349 --> 00:04:46,069
orchestrating various tasks on the

122
00:04:44,029 --> 00:04:48,409
platform such as the very initial power

123
00:04:46,069 --> 00:04:50,330
sequencing thermal management power

124
00:04:48,409 --> 00:04:54,889
state transitioning and interfacing with

125
00:04:50,330 --> 00:04:56,389
various onboard peripherals the t2 is

126
00:04:54,889 --> 00:04:59,539
comprised of several components

127
00:04:56,389 --> 00:05:02,180
primarily it's an arm 64 core based off

128
00:04:59,539 --> 00:05:04,219
of Apple's a10 design internally it has

129
00:05:02,180 --> 00:05:07,759
a flash controller that deals with AES

130
00:05:04,219 --> 00:05:09,650
and storage of data on the raw SSD flash

131
00:05:07,759 --> 00:05:12,409
chips that are present on t2 supported

132
00:05:09,650 --> 00:05:14,900
platforms one interesting note about

133
00:05:12,409 --> 00:05:17,000
this is that the SSDs that are present

134
00:05:14,900 --> 00:05:18,229
lack their own controllers and are just

135
00:05:17,000 --> 00:05:19,490
raw flash chips different

136
00:05:18,229 --> 00:05:22,520
functionalities such as wear leveling

137
00:05:19,490 --> 00:05:24,080
and block allocation to t2 you can't

138
00:05:22,520 --> 00:05:25,370
just unplug these drives stick of in

139
00:05:24,080 --> 00:05:28,310
another computer and expect to actually

140
00:05:25,370 --> 00:05:30,199
be able to read them out there is also

141
00:05:28,310 --> 00:05:32,960
some internal storage areas for storing

142
00:05:30,199 --> 00:05:34,839
things like the t2 filesystem the UEFI

143
00:05:32,960 --> 00:05:37,188
firmware and other variables

144
00:05:34,839 --> 00:05:39,469
finally there's what Apple calls a

145
00:05:37,189 --> 00:05:41,659
secure Enclave processor or SEP which

146
00:05:39,469 --> 00:05:44,060
handle things such as encryption keys

147
00:05:41,659 --> 00:05:45,469
and touch ID to get authentication the

148
00:05:44,060 --> 00:05:47,569
t2 is connected to the rest of the

149
00:05:45,469 --> 00:05:51,259
platform via several common interfaces

150
00:05:47,569 --> 00:05:53,479
such as PCIe mipi PDM and east by which

151
00:05:51,259 --> 00:05:55,419
we will get into later but this

152
00:05:53,479 --> 00:05:58,729
architecture can be simplified to

153
00:05:55,419 --> 00:06:00,560
basically this highly privileged DMA

154
00:05:58,729 --> 00:06:02,389
capable Apple watch soldered to the

155
00:06:00,560 --> 00:06:04,009
motherboard that orchestrates and

156
00:06:02,389 --> 00:06:08,330
control some of the most basic platform

157
00:06:04,009 --> 00:06:10,099
functionalities now that we understand a

158
00:06:08,330 --> 00:06:12,139
bit about what the t2 is let's talk

159
00:06:10,099 --> 00:06:13,938
about what's actually running on top of

160
00:06:12,139 --> 00:06:16,009
it the teacher kernel and operating

161
00:06:13,939 --> 00:06:18,469
system collectively called bridge OS are

162
00:06:16,009 --> 00:06:23,210
closely related to the watch OS stack

163
00:06:18,469 --> 00:06:25,099
and inherit many properties from it say

164
00:06:23,210 --> 00:06:28,669
you want to actually look at this stuff

165
00:06:25,099 --> 00:06:31,729
yourself as brick u.s. is a derivative

166
00:06:28,669 --> 00:06:33,710
watch OS and by virtue is a lot of the

167
00:06:31,729 --> 00:06:35,839
same iOS reverse engineering tools also

168
00:06:33,710 --> 00:06:38,089
apply here you can go to the apples

169
00:06:35,839 --> 00:06:39,860
hopper catalog and download bundled t2

170
00:06:38,089 --> 00:06:42,560
firmware update packages or pulled

171
00:06:39,860 --> 00:06:44,680
directly out of a local system cache you

172
00:06:42,560 --> 00:06:47,360
can extract these update packages with

173
00:06:44,680 --> 00:06:48,919
combination of freely available tools a

174
00:06:47,360 --> 00:06:51,080
walkthrough of the extraction process

175
00:06:48,919 --> 00:06:53,438
and most the tooling is provided by

176
00:06:51,080 --> 00:06:56,270
Jonathon Leben and it's linked over here

177
00:06:53,439 --> 00:06:59,030
if you extract and decompress the update

178
00:06:56,270 --> 00:07:00,710
packages you will inside will be an

179
00:06:59,030 --> 00:07:02,989
update bundle a zip file which contains

180
00:07:00,710 --> 00:07:06,138
the root filesystem a collection of

181
00:07:02,990 --> 00:07:08,150
kernel caches which are the base kernel

182
00:07:06,139 --> 00:07:11,000
and all the kernel extensions baked into

183
00:07:08,150 --> 00:07:13,638
a single large file and a similar set of

184
00:07:11,000 --> 00:07:15,770
golden UEFI images while they are

185
00:07:13,639 --> 00:07:17,330
bundled the iboot and SEP firmware

186
00:07:15,770 --> 00:07:18,859
images are encrypted like they are on

187
00:07:17,330 --> 00:07:23,330
another platform so they're not as easy

188
00:07:18,860 --> 00:07:25,039
to actually examine the slash boot /

189
00:07:23,330 --> 00:07:27,199
firmware directory inside the update

190
00:07:25,039 --> 00:07:29,330
bundle contains image for archives

191
00:07:27,199 --> 00:07:31,610
containing signed golden UEFI firmware

192
00:07:29,330 --> 00:07:33,318
images you can use image for tool to

193
00:07:31,610 --> 00:07:35,750
extract the single section out of these

194
00:07:33,319 --> 00:07:37,729
but do note that these images actually

195
00:07:35,750 --> 00:07:39,349
do end up getting hot patched by the t2

196
00:07:37,729 --> 00:07:41,438
during the loading process as we'll see

197
00:07:39,349 --> 00:07:41,438
you later

198
00:07:41,500 --> 00:07:47,810
as these t to update bundles are meant

199
00:07:45,409 --> 00:07:49,729
for multiple product lines they contain

200
00:07:47,810 --> 00:07:51,680
multiple firmer images differentiated by

201
00:07:49,729 --> 00:07:54,949
internal Apple product names for

202
00:07:51,680 --> 00:07:59,050
instance the iMac Pro is the j1 37 and

203
00:07:54,949 --> 00:08:01,759
our t2 enabled MacBook Pro is the J 680

204
00:07:59,050 --> 00:08:04,039
googling around for model information we

205
00:08:01,759 --> 00:08:07,789
got some clues as to what the J 174 and

206
00:08:04,039 --> 00:08:11,150
J 140k are that leaves us the remaining

207
00:08:07,789 --> 00:08:16,159
J 780 and J 132 as likely candidates for

208
00:08:11,150 --> 00:08:18,378
the Mac Pro and the MacBook Air model

209
00:08:16,159 --> 00:08:20,539
specific kernel caches are relatively

210
00:08:18,379 --> 00:08:22,849
easily accessible after decoding them

211
00:08:20,539 --> 00:08:24,710
with the joker tool from there you can

212
00:08:22,849 --> 00:08:27,050
throw them into Ida and start your

213
00:08:24,710 --> 00:08:30,080
traditional arm 64 darwin kernel

214
00:08:27,050 --> 00:08:32,390
analysis I also highly recommend using

215
00:08:30,080 --> 00:08:33,769
the Ida kernel cache extension as it

216
00:08:32,390 --> 00:08:38,360
makes reconstructing i/o kit types

217
00:08:33,769 --> 00:08:40,760
fairly trivial the base t2 file system

218
00:08:38,360 --> 00:08:42,260
is split up into multiple parts in the

219
00:08:40,760 --> 00:08:44,059
update bundle and they need to be

220
00:08:42,260 --> 00:08:47,089
individually decompressed and extracted

221
00:08:44,059 --> 00:08:49,219
with the OTA tool after extraction you

222
00:08:47,089 --> 00:08:51,970
will be greeted with a very familiar Mac

223
00:08:49,220 --> 00:08:51,970
file system

224
00:08:52,970 --> 00:08:57,480
so the combination of those three

225
00:08:55,470 --> 00:09:00,030
firmware parts form the basis of our

226
00:08:57,480 --> 00:09:02,070
analysis but before we show how the t2

227
00:09:00,030 --> 00:09:03,720
attempts to improve on secure boot we

228
00:09:02,070 --> 00:09:09,600
have to understand what was wrong with

229
00:09:03,720 --> 00:09:10,950
the prior state-of-the-art so here's

230
00:09:09,600 --> 00:09:13,710
everyone's favorite diagram when dealing

231
00:09:10,950 --> 00:09:15,570
with UEFI right this outlines the seven

232
00:09:13,710 --> 00:09:16,980
boot phases that a UEFI platform goes

233
00:09:15,570 --> 00:09:19,170
through the the code that implements

234
00:09:16,980 --> 00:09:21,180
this is the very UEFI firmware that

235
00:09:19,170 --> 00:09:24,439
Apple aims to protect and was

236
00:09:21,180 --> 00:09:26,609
traditionally stored in a spy flash chip

237
00:09:24,440 --> 00:09:29,040
at the very left side you have what's

238
00:09:26,610 --> 00:09:31,230
called the security phase it's pointed

239
00:09:29,040 --> 00:09:33,360
out by the system reset vector it's the

240
00:09:31,230 --> 00:09:35,760
very first bit of x86 code that gets

241
00:09:33,360 --> 00:09:37,500
executed by the CPU when transitioning

242
00:09:35,760 --> 00:09:39,900
from a low-power state such as sleep and

243
00:09:37,500 --> 00:09:42,570
hibernate or the very initial power on

244
00:09:39,900 --> 00:09:44,579
it starts off in 16-bit real mode does

245
00:09:42,570 --> 00:09:46,410
initialization and then switches over to

246
00:09:44,580 --> 00:09:48,030
protect mode before hitting up execution

247
00:09:46,410 --> 00:09:50,069
to the pre initialization environment

248
00:09:48,030 --> 00:09:54,810
and onward to locate and boot the

249
00:09:50,070 --> 00:09:57,060
operating system if you as an attacker

250
00:09:54,810 --> 00:09:58,770
are actually able to gain execution in

251
00:09:57,060 --> 00:10:00,359
this initial security phase you can

252
00:09:58,770 --> 00:10:02,760
effectively take control the entire

253
00:10:00,360 --> 00:10:05,160
system even if the security phases did

254
00:10:02,760 --> 00:10:07,260
perform all integrity checking it was

255
00:10:05,160 --> 00:10:12,420
supposed to who was there to check the

256
00:10:07,260 --> 00:10:13,710
integrity of the security phase once

257
00:10:12,420 --> 00:10:16,199
you're able to run code in this phase of

258
00:10:13,710 --> 00:10:18,390
execution you can patch everything going

259
00:10:16,200 --> 00:10:20,010
forward and in fact the final operating

260
00:10:18,390 --> 00:10:25,080
system kernel and do whatever you would

261
00:10:20,010 --> 00:10:29,189
like so how is this infection process

262
00:10:25,080 --> 00:10:31,410
typically done in practice traditionally

263
00:10:29,190 --> 00:10:33,120
on the motherboard you have your chipset

264
00:10:31,410 --> 00:10:34,949
attached to a spy flash device which

265
00:10:33,120 --> 00:10:37,260
holds the UEFI firmware and other

266
00:10:34,950 --> 00:10:38,880
configuration variables attacks are

267
00:10:37,260 --> 00:10:41,010
performed either through purely software

268
00:10:38,880 --> 00:10:43,170
means if the platform is misconfigured

269
00:10:41,010 --> 00:10:45,090
or through harbor based attacks the

270
00:10:43,170 --> 00:10:47,160
popular evil hotel maid scenario comes

271
00:10:45,090 --> 00:10:49,290
to mind where a malicious actor gains

272
00:10:47,160 --> 00:10:51,420
physical access to your computer opens

273
00:10:49,290 --> 00:10:53,520
it uses a chip clip to attach to the

274
00:10:51,420 --> 00:10:55,560
flash device and over writes the UEFI

275
00:10:53,520 --> 00:10:58,980
firmware where payload with an infected

276
00:10:55,560 --> 00:11:00,930
Berrien wanted to mitigate this and for

277
00:10:58,980 --> 00:11:05,610
them the solution was to get rid of that

278
00:11:00,930 --> 00:11:06,550
vulnerable flash chip altogether the

279
00:11:05,610 --> 00:11:08,440
enhance

280
00:11:06,550 --> 00:11:11,140
serial peripheral interface or East by

281
00:11:08,440 --> 00:11:13,060
is until spiritual successor to the lope

282
00:11:11,140 --> 00:11:14,589
in count bus and it's used to

283
00:11:13,060 --> 00:11:17,589
communicate with embedded controllers

284
00:11:14,589 --> 00:11:20,080
and BMC's it was recently extended on

285
00:11:17,589 --> 00:11:22,810
Intel Xeon platforms with a new feature

286
00:11:20,080 --> 00:11:25,480
called slave attached flash this allows

287
00:11:22,810 --> 00:11:27,939
ECS and BMC s to manage all flash at

288
00:11:25,480 --> 00:11:30,010
flash access operations again the main

289
00:11:27,940 --> 00:11:32,140
reason why this is important feature is

290
00:11:30,010 --> 00:11:34,000
if you think about a bare-metal cloud

291
00:11:32,140 --> 00:11:35,500
environment you need a wipe the machine

292
00:11:34,000 --> 00:11:38,410
before you hand it off to a new tenant

293
00:11:35,500 --> 00:11:40,959
and this functionality allows the BMC's

294
00:11:38,410 --> 00:11:44,260
to quickly reset the ufi firmware or

295
00:11:40,959 --> 00:11:46,510
perform remote upgrades the t2 utilizes

296
00:11:44,260 --> 00:11:48,640
functionality to try to enhance secure

297
00:11:46,510 --> 00:11:50,439
boot typically the slave attached

298
00:11:48,640 --> 00:11:52,810
functionality slave attach flash

299
00:11:50,440 --> 00:11:55,450
functionality is only found on xeon

300
00:11:52,810 --> 00:11:56,709
chipsets but as apple is a very special

301
00:11:55,450 --> 00:11:58,750
partner they got that functionality

302
00:11:56,709 --> 00:12:04,300
enabled for their non xeon lines like

303
00:11:58,750 --> 00:12:06,450
the MacBook Pros so the t2 utilizes

304
00:12:04,300 --> 00:12:08,319
functionality to enhance secure boot

305
00:12:06,450 --> 00:12:10,450
we're gonna go from the model on the

306
00:12:08,320 --> 00:12:12,550
left where the chipset talks to a flash

307
00:12:10,450 --> 00:12:14,589
device over spy to the model on the

308
00:12:12,550 --> 00:12:17,589
right where the chipset talks the t2

309
00:12:14,589 --> 00:12:19,630
over east by the t2 then becomes the

310
00:12:17,589 --> 00:12:22,770
arbiter of all flash access operations

311
00:12:19,630 --> 00:12:26,290
which sounds great right of course yeah

312
00:12:22,770 --> 00:12:28,630
so now that we understand a bit more

313
00:12:26,290 --> 00:12:30,490
about secure boot and how the t2 is

314
00:12:28,630 --> 00:12:32,230
wired to the rest of the platform let's

315
00:12:30,490 --> 00:12:33,880
talk about the actual boot process

316
00:12:32,230 --> 00:12:35,740
everything gets kicked off way before

317
00:12:33,880 --> 00:12:39,189
the power button is pressed in a process

318
00:12:35,740 --> 00:12:40,510
Apple refers to as early boot here I'm

319
00:12:39,190 --> 00:12:43,660
gonna describe the process as I

320
00:12:40,510 --> 00:12:46,000
understood it in bridge OS 2.0 Apple has

321
00:12:43,660 --> 00:12:48,819
since released some new revisions since

322
00:12:46,000 --> 00:12:54,279
since then but the broad-strokes should

323
00:12:48,820 --> 00:12:56,470
still remain the same the t2 utilizes

324
00:12:54,279 --> 00:12:58,839
the same integrity protection features

325
00:12:56,470 --> 00:13:01,149
that are found on the iPhone and the

326
00:12:58,839 --> 00:13:03,640
Apple watch on the chip itself there is

327
00:13:01,149 --> 00:13:04,959
an area called a masked ROM the the

328
00:13:03,640 --> 00:13:06,970
masked ROM is comprised of software

329
00:13:04,959 --> 00:13:10,029
instructions and data that has been

330
00:13:06,970 --> 00:13:11,589
physically hardwired on the die and is

331
00:13:10,029 --> 00:13:13,720
completely immutable there's no way to

332
00:13:11,589 --> 00:13:15,670
change it at all this is the basis for

333
00:13:13,720 --> 00:13:17,890
what is referred to as a hardware root

334
00:13:15,670 --> 00:13:20,540
of trust the the maps roms purpose

335
00:13:17,890 --> 00:13:22,990
itself is to locate the t2 boo

336
00:13:20,540 --> 00:13:25,730
loader which is by boot and in our case

337
00:13:22,990 --> 00:13:27,710
verified its signature against the apple

338
00:13:25,730 --> 00:13:29,630
root CA which is co located inside of

339
00:13:27,710 --> 00:13:33,350
the mass ROM itself and transfer

340
00:13:29,630 --> 00:13:34,850
execution to it the boot locate the boot

341
00:13:33,350 --> 00:13:37,310
loader locates the bridge OS kernel

342
00:13:34,850 --> 00:13:39,440
cryptographically verifies it configures

343
00:13:37,310 --> 00:13:42,500
its execution environment and transfers

344
00:13:39,440 --> 00:13:44,750
control to it finally the kernel sets up

345
00:13:42,500 --> 00:13:46,490
the using LAN environment and launches

346
00:13:44,750 --> 00:13:49,670
the root process commonly referred to as

347
00:13:46,490 --> 00:13:53,530
pit zero or launch D from this the user

348
00:13:49,670 --> 00:13:53,530
land services and processes are started

349
00:13:54,190 --> 00:13:59,300
launch D has an internal manifest which

350
00:13:56,990 --> 00:14:02,090
specifies which services are started on

351
00:13:59,300 --> 00:14:03,459
the t2 this includes remote exbc service

352
00:14:02,090 --> 00:14:06,170
demons which we'll talk about later

353
00:14:03,460 --> 00:14:11,000
filesystem checkers upgrade and recovery

354
00:14:06,170 --> 00:14:13,729
agents and many many others the one we

355
00:14:11,000 --> 00:14:16,790
are most interested in is mac efi util

356
00:14:13,730 --> 00:14:19,340
Mackay youth by util is the main t2 user

357
00:14:16,790 --> 00:14:21,860
LAN interface for managing UEFI firmware

358
00:14:19,340 --> 00:14:23,540
and non-volatile variables it also has

359
00:14:21,860 --> 00:14:25,580
some additional functionality to dump

360
00:14:23,540 --> 00:14:28,280
and restore certain Intel ami related

361
00:14:25,580 --> 00:14:29,840
regions out of loaded Burma images we'll

362
00:14:28,280 --> 00:14:35,060
be focusing on the main initialization

363
00:14:29,840 --> 00:14:37,310
process here today Maki if I utila

364
00:14:35,060 --> 00:14:39,410
starts off by examining the device tree

365
00:14:37,310 --> 00:14:41,329
to validate that the platform is

366
00:14:39,410 --> 00:14:44,120
actually slave attached flash capable

367
00:14:41,330 --> 00:14:46,460
then it grabs a signed image for binary

368
00:14:44,120 --> 00:14:48,590
off of the t2 filesystem which contains

369
00:14:46,460 --> 00:14:52,070
the ufi firmware and loads it into a

370
00:14:48,590 --> 00:14:54,440
memory buffer this memory buffer then

371
00:14:52,070 --> 00:14:56,450
gets Marshall to the t2 kernel where the

372
00:14:54,440 --> 00:14:59,030
makya fine manager kernel extension

373
00:14:56,450 --> 00:15:01,370
takes over the loading process the efi

374
00:14:59,030 --> 00:15:04,010
manager implements all the functionality

375
00:15:01,370 --> 00:15:06,380
exposed from mac efi util it manages and

376
00:15:04,010 --> 00:15:09,710
vram variables the UEFI loading process

377
00:15:06,380 --> 00:15:12,110
as well as it contains a number of state

378
00:15:09,710 --> 00:15:13,640
machines to keep track of various boot

379
00:15:12,110 --> 00:15:15,320
float so you wouldn't want to for

380
00:15:13,640 --> 00:15:18,319
instance change the ufi firmware out

381
00:15:15,320 --> 00:15:20,600
from underneath a running system the

382
00:15:18,320 --> 00:15:23,450
first thing that the efi manager does is

383
00:15:20,600 --> 00:15:25,610
it checks to see if the ufi firmware has

384
00:15:23,450 --> 00:15:28,400
already been initialized if so it bails

385
00:15:25,610 --> 00:15:30,740
out quickly now it's important to note

386
00:15:28,400 --> 00:15:33,920
that the actual loading of the UEFI

387
00:15:30,740 --> 00:15:34,800
firmware happens fairly rarely once it's

388
00:15:33,920 --> 00:15:37,709
loaded successful

389
00:15:34,800 --> 00:15:40,109
is stored in a durable storage media and

390
00:15:37,709 --> 00:15:44,209
has only changed if the firmware update

391
00:15:40,110 --> 00:15:44,209
is available or the t to itself resets

392
00:15:45,470 --> 00:15:50,040
once the decision has been made to

393
00:15:47,670 --> 00:15:51,959
actually load the firmware the efi

394
00:15:50,040 --> 00:15:53,519
manager reaches out to the apple

395
00:15:51,959 --> 00:15:55,649
firmware update kernel extension which

396
00:15:53,519 --> 00:15:57,600
verifies the cryptographic signature of

397
00:15:55,649 --> 00:16:01,559
the firmware package against the apple

398
00:15:57,600 --> 00:16:03,420
root CA key if this checks of seats then

399
00:16:01,559 --> 00:16:05,429
the UF I payload is copied over to a

400
00:16:03,420 --> 00:16:09,868
storage region inside of the t2 then

401
00:16:05,429 --> 00:16:12,089
something really peculiar happens the fi

402
00:16:09,869 --> 00:16:14,040
manager checks to see whether the t2 has

403
00:16:12,089 --> 00:16:16,199
had its production mode fuses blown and

404
00:16:14,040 --> 00:16:18,299
depending on the state of that and an

405
00:16:16,199 --> 00:16:21,359
overriding T to boot argument it writes

406
00:16:18,299 --> 00:16:23,970
one of two 64-bit indicators into the

407
00:16:21,360 --> 00:16:25,589
loaded ufi firmware image what these

408
00:16:23,970 --> 00:16:27,839
indicator values actually do is yet to

409
00:16:25,589 --> 00:16:29,670
be fully understood but at the moment

410
00:16:27,839 --> 00:16:32,279
that the firmware is being provided to

411
00:16:29,670 --> 00:16:39,420
the actual system it invalidates its own

412
00:16:32,279 --> 00:16:42,119
cryptographic signatures so once this is

413
00:16:39,420 --> 00:16:44,339
done the efi manager configures a bit of

414
00:16:42,119 --> 00:16:46,470
internal hardware we call the east by

415
00:16:44,339 --> 00:16:48,720
sleeve attached flash dma engine through

416
00:16:46,470 --> 00:16:52,249
a series of memory map configuration and

417
00:16:48,720 --> 00:16:54,629
status registers this configuration

418
00:16:52,249 --> 00:16:57,059
redirects east by slave attached flash

419
00:16:54,629 --> 00:16:59,549
read and write operations to the

420
00:16:57,059 --> 00:17:01,499
internal storage area now it's important

421
00:16:59,549 --> 00:17:03,569
to highlight that this includes write

422
00:17:01,499 --> 00:17:05,639
operations the traditional spy flash

423
00:17:03,569 --> 00:17:08,188
chip is used as a durable mutable

424
00:17:05,638 --> 00:17:10,020
storage media many low level subsystems

425
00:17:08,189 --> 00:17:12,240
such as the Intel ME utilize it for

426
00:17:10,020 --> 00:17:14,069
storing configuration and state and as

427
00:17:12,240 --> 00:17:16,409
such it must be a bi-directional

428
00:17:14,069 --> 00:17:18,089
interface y'all can probably guess where

429
00:17:16,409 --> 00:17:22,679
this is going but more on that a little

430
00:17:18,089 --> 00:17:24,539
bit after the DMA engine is configured

431
00:17:22,679 --> 00:17:27,089
control flow returns back to the user

432
00:17:24,539 --> 00:17:29,309
land mac efi util which informs the SMC

433
00:17:27,089 --> 00:17:30,928
by way of a couple other kernel

434
00:17:29,309 --> 00:17:31,799
extensions that the firmware is actually

435
00:17:30,929 --> 00:17:33,990
you're ready to boot

436
00:17:31,799 --> 00:17:36,870
then it lets the t2 go into a low-power

437
00:17:33,990 --> 00:17:39,860
sleep state which is akin to turning off

438
00:17:36,870 --> 00:17:39,860
the screen of your phone

439
00:17:41,950 --> 00:17:45,640
at this point the system is finally

440
00:17:43,990 --> 00:17:47,350
actually ready to start booting you

441
00:17:45,640 --> 00:17:48,820
press the power button that triggers a

442
00:17:47,350 --> 00:17:50,379
notification from the system state

443
00:17:48,820 --> 00:17:53,169
manager kernel extension which then

444
00:17:50,380 --> 00:17:55,690
notifies the EFI manager so we can

445
00:17:53,170 --> 00:17:58,750
update it its internal state after that

446
00:17:55,690 --> 00:18:01,390
completes it sends do s0 message to the

447
00:17:58,750 --> 00:18:03,130
SMC where as zero is the fully honest

448
00:18:01,390 --> 00:18:07,780
happy power state this effectively turns

449
00:18:03,130 --> 00:18:10,330
on the x86 side of the house this brings

450
00:18:07,780 --> 00:18:12,550
the x86 CPU out of a reset hold state

451
00:18:10,330 --> 00:18:15,040
and allows it to begin booting the

452
00:18:12,550 --> 00:18:17,169
verified ufi firmware image out of the

453
00:18:15,040 --> 00:18:20,020
t2 by way of that slave attached flash

454
00:18:17,170 --> 00:18:27,340
dma engine ostensibly closing the gap of

455
00:18:20,020 --> 00:18:29,260
an unverified pre verifier so we end up

456
00:18:27,340 --> 00:18:31,449
with a functional flow of this

457
00:18:29,260 --> 00:18:33,129
how can someone leverage the properties

458
00:18:31,450 --> 00:18:37,060
that we have learned to actually take

459
00:18:33,130 --> 00:18:38,710
control the secure boot process well as

460
00:18:37,060 --> 00:18:40,540
we discussed earlier the chipset not

461
00:18:38,710 --> 00:18:42,670
only reads data out of the storage area

462
00:18:40,540 --> 00:18:45,100
but also writes to it as it's used as a

463
00:18:42,670 --> 00:18:49,090
mutable storage area by DME and other

464
00:18:45,100 --> 00:18:51,520
systems and the firmer validation

465
00:18:49,090 --> 00:18:54,490
initialization is only done on rare

466
00:18:51,520 --> 00:18:56,200
occasions either when the system well

467
00:18:54,490 --> 00:18:59,290
either when there is a system upgrade or

468
00:18:56,200 --> 00:19:01,270
the t2 crashes and reboots housing the

469
00:18:59,290 --> 00:19:03,520
t2 actually reboots by itself is not

470
00:19:01,270 --> 00:19:05,290
known to us but I speculate that it's

471
00:19:03,520 --> 00:19:10,270
actually a fairly rare occurrence and

472
00:19:05,290 --> 00:19:12,520
betterback systems like the MacBook so

473
00:19:10,270 --> 00:19:14,710
from a hardware perspective the t2 is

474
00:19:12,520 --> 00:19:17,379
attached to the chipset by a series of

475
00:19:14,710 --> 00:19:19,420
wire traces the this means that if an

476
00:19:17,380 --> 00:19:21,610
attacker can locate those traces and get

477
00:19:19,420 --> 00:19:23,290
on that East by bus they'll be able to

478
00:19:21,610 --> 00:19:25,629
overwrite the UEFI firmware stored

479
00:19:23,290 --> 00:19:27,220
internal to the t2 in a manner similar

480
00:19:25,630 --> 00:19:29,230
to the chip clip approach that we saw

481
00:19:27,220 --> 00:19:31,180
earlier and they evil may attack in

482
00:19:29,230 --> 00:19:32,950
theory this would only give limited

483
00:19:31,180 --> 00:19:35,620
persistence until the next upgrade cycle

484
00:19:32,950 --> 00:19:37,300
but the infected mac OS kernel could

485
00:19:35,620 --> 00:19:41,340
prevent that upgrade process from ever

486
00:19:37,300 --> 00:19:45,639
running or at least until the t2 reboots

487
00:19:41,340 --> 00:19:47,709
or if we can actually compromise the t2

488
00:19:45,640 --> 00:19:49,690
kernel we could overwrite the internal

489
00:19:47,710 --> 00:19:51,520
storage from the inside without having

490
00:19:49,690 --> 00:19:53,530
to resort to physical attacks on the

491
00:19:51,520 --> 00:19:54,639
platform and have actual true

492
00:19:53,530 --> 00:19:56,290
persistence

493
00:19:54,640 --> 00:19:58,720
but for that to happen we need a way to

494
00:19:56,290 --> 00:20:01,990
actually target and interface with it

495
00:19:58,720 --> 00:20:04,090
the t2 exposes many services to the mac

496
00:20:01,990 --> 00:20:06,340
OS operating system that may provide a

497
00:20:04,090 --> 00:20:07,870
beachhead for exploitation to explore

498
00:20:06,340 --> 00:20:09,309
this area further I'm going to hand it

499
00:20:07,870 --> 00:20:10,809
up to Jeremy to talk about these

500
00:20:09,309 --> 00:20:14,879
services and actually how to communicate

501
00:20:10,809 --> 00:20:17,799
with them thanks thanks Miguel

502
00:20:14,880 --> 00:20:20,440
so the t2 chip runs a number of services

503
00:20:17,799 --> 00:20:23,950
on behalf of your Mac these are things

504
00:20:20,440 --> 00:20:25,450
like biometrics such as touch ID find my

505
00:20:23,950 --> 00:20:27,580
device feature which you may be more

506
00:20:25,450 --> 00:20:30,190
familiar with on your iPhone speech

507
00:20:27,580 --> 00:20:32,439
recording for Siri as well as system

508
00:20:30,190 --> 00:20:35,169
diagnostics I'm sure already that we'll

509
00:20:32,440 --> 00:20:36,730
talk about a little bit later and if

510
00:20:35,169 --> 00:20:39,340
it's possible to communicate with these

511
00:20:36,730 --> 00:20:40,960
services it may be possible to exploit

512
00:20:39,340 --> 00:20:43,540
these services and if we could combine

513
00:20:40,960 --> 00:20:45,940
an exploit that gives us remote code

514
00:20:43,540 --> 00:20:48,070
execution on the t2 with a bridge OS

515
00:20:45,940 --> 00:20:51,760
kernel vulnerability we may be able to

516
00:20:48,070 --> 00:20:53,649
overwrite that vulnerable flash purely

517
00:20:51,760 --> 00:20:56,290
through software which would be really

518
00:20:53,650 --> 00:20:58,690
cool so the majority of the rest of this

519
00:20:56,290 --> 00:21:01,330
talk is going to focus on what does this

520
00:20:58,690 --> 00:21:05,410
interface look like that the t2 chip

521
00:21:01,330 --> 00:21:08,049
exposes to the Mac OS host luckily for

522
00:21:05,410 --> 00:21:10,450
us as researchers Mac OS comes with this

523
00:21:08,049 --> 00:21:12,700
nifty utility called remote CTL remote

524
00:21:10,450 --> 00:21:14,820
CTL provides a variety of different

525
00:21:12,700 --> 00:21:17,140
functions for us to talk to the t2 chip

526
00:21:14,820 --> 00:21:19,899
starting off with the list command we

527
00:21:17,140 --> 00:21:23,080
can list the t1 or t2 device that's

528
00:21:19,900 --> 00:21:25,270
attached to our Mac OS host it shows up

529
00:21:23,080 --> 00:21:26,590
as local bridge and if we use the show

530
00:21:25,270 --> 00:21:28,389
command we can print out a variety of

531
00:21:26,590 --> 00:21:30,549
different properties about the t2 chip

532
00:21:28,390 --> 00:21:32,410
including a list of the services that

533
00:21:30,549 --> 00:21:35,110
are running on that t2 chip that are

534
00:21:32,410 --> 00:21:37,150
available for us to communicate with we

535
00:21:35,110 --> 00:21:39,399
can then turn to the netcat or the relay

536
00:21:37,150 --> 00:21:43,360
sub commands to actually communicate

537
00:21:39,400 --> 00:21:45,340
with these processes netcat will open or

538
00:21:43,360 --> 00:21:48,040
will allow us to use standard input and

539
00:21:45,340 --> 00:21:49,928
standard output relay will actually open

540
00:21:48,040 --> 00:21:52,149
a listening socket on the Mac OS host

541
00:21:49,929 --> 00:21:56,650
that we can then attach to with our own

542
00:21:52,150 --> 00:21:59,860
process and send traffic to the service

543
00:21:56,650 --> 00:22:01,870
that we've targeted but before we get

544
00:21:59,860 --> 00:22:04,059
into talking with the t2 chip directly

545
00:22:01,870 --> 00:22:05,439
let's step back and look at what the

546
00:22:04,059 --> 00:22:07,840
communication channel with the t2

547
00:22:05,440 --> 00:22:11,770
actually looks like

548
00:22:07,840 --> 00:22:14,679
the t2 uses apples proprietary IPC

549
00:22:11,770 --> 00:22:16,690
protocol X keys and the X PCR at the

550
00:22:14,680 --> 00:22:21,010
remote xdc library to communicate with

551
00:22:16,690 --> 00:22:24,340
the mac OS host this protocol has a

552
00:22:21,010 --> 00:22:27,910
programmer API but doesn't the actual

553
00:22:24,340 --> 00:22:29,500
message format is proprietary probably

554
00:22:27,910 --> 00:22:33,790
because Apple wants the ability to

555
00:22:29,500 --> 00:22:37,300
change it whenever that may be warranted

556
00:22:33,790 --> 00:22:40,090
without causing people to have have

557
00:22:37,300 --> 00:22:41,740
things break under them but it makes

558
00:22:40,090 --> 00:22:43,120
things a little bit trickier when we're

559
00:22:41,740 --> 00:22:44,350
going to be looking at some network

560
00:22:43,120 --> 00:22:47,979
traffic later and we don't know what

561
00:22:44,350 --> 00:22:51,189
that format looks like the t2 exposes

562
00:22:47,980 --> 00:22:53,530
itself to the Mac OS host as a USB

563
00:22:51,190 --> 00:22:57,970
Attached network interface over the PCIe

564
00:22:53,530 --> 00:22:59,920
bus called en6 and this interface is

565
00:22:57,970 --> 00:23:02,050
protected by sip system integrity

566
00:22:59,920 --> 00:23:06,870
protection so we can neither read nor

567
00:23:02,050 --> 00:23:09,970
write it it's also worth noting that the

568
00:23:06,870 --> 00:23:13,989
the t2 chip and the Mac OS host over

569
00:23:09,970 --> 00:23:16,750
this interface have static fixed ipv6

570
00:23:13,990 --> 00:23:18,760
addresses and static MAC addresses we

571
00:23:16,750 --> 00:23:22,390
found this to be common on various

572
00:23:18,760 --> 00:23:24,520
systems that we tested now at the time

573
00:23:22,390 --> 00:23:27,550
we originally did this research it was

574
00:23:24,520 --> 00:23:30,400
not required to disable sip or use route

575
00:23:27,550 --> 00:23:34,830
to use the remote CTL relay command

576
00:23:30,400 --> 00:23:37,270
however as of 10 dot 14.3 remote CTL

577
00:23:34,830 --> 00:23:38,560
needs a little bit of help to work and

578
00:23:37,270 --> 00:23:42,220
we'll will go into that a little bit

579
00:23:38,560 --> 00:23:45,310
later in the talk if we do disable sip a

580
00:23:42,220 --> 00:23:49,180
new interface becomes available for us

581
00:23:45,310 --> 00:23:51,899
to use the VHC 128 interface behaves

582
00:23:49,180 --> 00:23:54,550
like a span port for the en 6 interface

583
00:23:51,900 --> 00:23:57,360
that means that all the network traffic

584
00:23:54,550 --> 00:24:00,310
that would normally traverse the en 6

585
00:23:57,360 --> 00:24:02,979
interface becomes available it becomes

586
00:24:00,310 --> 00:24:04,500
replicated on the VHC 128 interface and

587
00:24:02,980 --> 00:24:07,510
if we turn to our favorite aquatic

588
00:24:04,500 --> 00:24:10,570
packet capture tool such as TCP dump or

589
00:24:07,510 --> 00:24:12,400
you know Wireshark we can then start

590
00:24:10,570 --> 00:24:15,700
capturing some that traffic and taking a

591
00:24:12,400 --> 00:24:17,290
look at what it looks like directly so

592
00:24:15,700 --> 00:24:19,750
you'll see here there's some low-level

593
00:24:17,290 --> 00:24:20,889
USB based traffic there's TCP protocol

594
00:24:19,750 --> 00:24:23,950
there's

595
00:24:20,890 --> 00:24:27,250
HTTP to waste traffic and if we dig into

596
00:24:23,950 --> 00:24:29,820
some of that HTTP to base traffic and we

597
00:24:27,250 --> 00:24:33,010
look at some data packets we can see

598
00:24:29,820 --> 00:24:36,100
some information here mostly a lot of

599
00:24:33,010 --> 00:24:38,290
dots because this is all binary encoded

600
00:24:36,100 --> 00:24:40,240
data we do see a small substring request

601
00:24:38,290 --> 00:24:44,350
underscore type but that doesn't really

602
00:24:40,240 --> 00:24:47,920
mean anything to us at this point so

603
00:24:44,350 --> 00:24:49,419
we're going to continue before we before

604
00:24:47,920 --> 00:24:51,550
we talk about interfacing of the t2 ship

605
00:24:49,420 --> 00:24:53,380
again we're gonna take a moment to

606
00:24:51,550 --> 00:24:55,780
figure out what it is the t2 chip is

607
00:24:53,380 --> 00:24:57,490
saying as a way to build some tooling

608
00:24:55,780 --> 00:25:01,840
that will allow us to interface with the

609
00:24:57,490 --> 00:25:04,450
t2 chip later this is these are all the

610
00:25:01,840 --> 00:25:07,360
different layers that the t2 chip

611
00:25:04,450 --> 00:25:09,730
traverses our packets these are the

612
00:25:07,360 --> 00:25:11,320
different layers that make up packets

613
00:25:09,730 --> 00:25:13,090
that the t2 chip uses to communicate

614
00:25:11,320 --> 00:25:15,610
with the Mac OS host we're gonna start

615
00:25:13,090 --> 00:25:16,810
over on the left with the mm layer now

616
00:25:15,610 --> 00:25:18,879
end them layer if you're not familiar

617
00:25:16,810 --> 00:25:22,540
with it I wasn't before we were working

618
00:25:18,880 --> 00:25:24,670
on this project is a USB based network

619
00:25:22,540 --> 00:25:27,610
layer that encapsulates multiple

620
00:25:24,670 --> 00:25:31,510
Ethernet packets for transit over USB

621
00:25:27,610 --> 00:25:33,550
based network interface it's interesting

622
00:25:31,510 --> 00:25:37,720
that in many cases for large data

623
00:25:33,550 --> 00:25:40,270
transfers the the information will be

624
00:25:37,720 --> 00:25:42,340
split up into multiple MTU size chunks

625
00:25:40,270 --> 00:25:44,650
at the TCP layer only to Berrian

626
00:25:42,340 --> 00:25:48,310
capsulated into one giant packet at the

627
00:25:44,650 --> 00:25:49,840
MM layer the Ethernet IP and TCP layers

628
00:25:48,310 --> 00:25:51,970
are nothing special so we're not going

629
00:25:49,840 --> 00:25:54,879
to go into them but at the HTTP 2 layer

630
00:25:51,970 --> 00:25:56,020
there is something worth noting now for

631
00:25:54,880 --> 00:25:57,940
those of you who are not familiar with

632
00:25:56,020 --> 00:26:01,360
HTTP 2 I'm going to give a very brief

633
00:25:57,940 --> 00:26:04,690
crash course on how it works so an HTTP

634
00:26:01,360 --> 00:26:05,800
1 well you have a client in the server

635
00:26:04,690 --> 00:26:07,900
and the client such as a web browser

636
00:26:05,800 --> 00:26:09,850
will make a request to the server to

637
00:26:07,900 --> 00:26:11,620
retrieve some page contents and in the

638
00:26:09,850 --> 00:26:13,870
process of doing this it will make a tea

639
00:26:11,620 --> 00:26:16,000
it'll perform a TCP handshake probably

640
00:26:13,870 --> 00:26:17,469
these days a TLS handshake and it will

641
00:26:16,000 --> 00:26:20,560
then make a requests to retrieve the

642
00:26:17,470 --> 00:26:22,600
data pull down that data and then it

643
00:26:20,560 --> 00:26:24,159
will discover upon retrieving the page

644
00:26:22,600 --> 00:26:25,959
data there are a bunch more resources

645
00:26:24,160 --> 00:26:28,300
that I have to make new requests to go

646
00:26:25,960 --> 00:26:29,920
up to that web server and so you having

647
00:26:28,300 --> 00:26:32,409
to go through more TCP handshake smart

648
00:26:29,920 --> 00:26:34,300
TLS handshake set Sarah this is very

649
00:26:32,410 --> 00:26:36,040
cumbersome very slow

650
00:26:34,300 --> 00:26:39,129
we want something more efficient so

651
00:26:36,040 --> 00:26:42,190
http/2 is designed to build a single

652
00:26:39,130 --> 00:26:44,800
persistent connection upon which

653
00:26:42,190 --> 00:26:48,280
multiple page requests or other kinds of

654
00:26:44,800 --> 00:26:49,690
requests can be multiplexed to avoid

655
00:26:48,280 --> 00:26:50,850
having to do all these TCP and TLS

656
00:26:49,690 --> 00:26:55,210
handshakes

657
00:26:50,850 --> 00:26:56,800
so in htv-2 we have this new concept of

658
00:26:55,210 --> 00:26:58,870
a stream and a stream is roughly

659
00:26:56,800 --> 00:27:01,690
analogous to one of the old HTTP 1

660
00:26:58,870 --> 00:27:04,120
connections a stream can be opened by

661
00:27:01,690 --> 00:27:05,770
sending a header spring and over in the

662
00:27:04,120 --> 00:27:10,270
headers frame typically you would ask

663
00:27:05,770 --> 00:27:12,760
HTTP headers once a stream is opened you

664
00:27:10,270 --> 00:27:15,250
can send data bi-directionally to either

665
00:27:12,760 --> 00:27:18,610
the client or the server through the use

666
00:27:15,250 --> 00:27:21,070
of data frames now Apple uses this in a

667
00:27:18,610 --> 00:27:23,860
non-standard way when they open new

668
00:27:21,070 --> 00:27:26,230
streams with issue via HTTP to headers

669
00:27:23,860 --> 00:27:28,840
frames they don't actually put any HTTP

670
00:27:26,230 --> 00:27:32,560
headers in them this actually breaks the

671
00:27:28,840 --> 00:27:35,379
issue to spec and was a little bit of a

672
00:27:32,560 --> 00:27:37,540
surprise for us when we were reversing

673
00:27:35,380 --> 00:27:39,610
this because it meant that the standard

674
00:27:37,540 --> 00:27:42,159
HTTP two libraries don't work so we had

675
00:27:39,610 --> 00:27:46,780
to make some changes and then we could

676
00:27:42,160 --> 00:27:50,410
move on so we'll talk a little bit more

677
00:27:46,780 --> 00:27:52,720
about that a little bit about the HTTP 2

678
00:27:50,410 --> 00:27:55,030
layer is a new layer that we haven't

679
00:27:52,720 --> 00:27:57,340
seen referenced in any of the other exbc

680
00:27:55,030 --> 00:27:58,930
third party documentation before for

681
00:27:57,340 --> 00:28:01,330
lack of a better term we're calling this

682
00:27:58,930 --> 00:28:05,470
the X PC wrapper because it tends to

683
00:28:01,330 --> 00:28:08,679
wrap exbc objects the xvc wrapper has a

684
00:28:05,470 --> 00:28:11,980
four byte editor magic bytes field a

685
00:28:08,680 --> 00:28:14,020
four byte Flags field now these were the

686
00:28:11,980 --> 00:28:16,270
flags that we observed this is a 32 bit

687
00:28:14,020 --> 00:28:20,650
field and so there are likely many many

688
00:28:16,270 --> 00:28:22,360
more flags hopefully you will discover

689
00:28:20,650 --> 00:28:25,090
some and share them with the community

690
00:28:22,360 --> 00:28:26,620
as well follow that there's an 8 byte

691
00:28:25,090 --> 00:28:29,169
length field for the payload that comes

692
00:28:26,620 --> 00:28:31,300
after followed by an 8 byte message ID

693
00:28:29,170 --> 00:28:33,310
field the message ID field is often

694
00:28:31,300 --> 00:28:35,350
incremented between requests and

695
00:28:33,310 --> 00:28:37,480
response it the use of it differs

696
00:28:35,350 --> 00:28:39,909
between the different application

697
00:28:37,480 --> 00:28:43,030
protocols so we've also seen it being

698
00:28:39,910 --> 00:28:47,160
used for signaling to identify which

699
00:28:43,030 --> 00:28:47,160
requests a particular response refers to

700
00:28:48,470 --> 00:28:53,520
moving on the last thing in this layer

701
00:28:51,870 --> 00:28:55,649
is the actual X PC objects themselves

702
00:28:53,520 --> 00:28:58,530
and this will end up being sort of the

703
00:28:55,650 --> 00:29:00,270
meat of the reversing of this protocol

704
00:28:58,530 --> 00:29:02,760
that we did now

705
00:29:00,270 --> 00:29:05,400
there's relatively little third party

706
00:29:02,760 --> 00:29:09,930
documentation on this X PC serialization

707
00:29:05,400 --> 00:29:12,150
format so when we started off we did

708
00:29:09,930 --> 00:29:14,250
what many people do and we tried to

709
00:29:12,150 --> 00:29:16,290
serialize some objects ourselves now

710
00:29:14,250 --> 00:29:18,330
Apple does publish a programming API for

711
00:29:16,290 --> 00:29:21,090
X PC and so we were able to create a

712
00:29:18,330 --> 00:29:22,800
little toy example application some of

713
00:29:21,090 --> 00:29:25,020
which we'll show here where we can

714
00:29:22,800 --> 00:29:27,060
create an X PC connection object then

715
00:29:25,020 --> 00:29:30,750
create an X PC dictionary the dictionary

716
00:29:27,060 --> 00:29:36,450
being the base class that all X PC

717
00:29:30,750 --> 00:29:37,920
messages must be made from and then we

718
00:29:36,450 --> 00:29:40,200
can send that message over the wire and

719
00:29:37,920 --> 00:29:41,730
you can see here how we can insert

720
00:29:40,200 --> 00:29:44,970
additional data into that base

721
00:29:41,730 --> 00:29:48,180
dictionary object that may be data that

722
00:29:44,970 --> 00:29:50,340
we want to send over the wire so we here

723
00:29:48,180 --> 00:29:52,500
we're in sending a pool and into a UN 64

724
00:29:50,340 --> 00:29:56,040
and if we pay special attention just for

725
00:29:52,500 --> 00:29:59,310
a moment to this this inserted value

726
00:29:56,040 --> 00:30:02,399
with a dictionary key of UN 64 and a

727
00:29:59,310 --> 00:30:04,080
value at dead beef when we step through

728
00:30:02,400 --> 00:30:06,660
in our debugger to see how this is

729
00:30:04,080 --> 00:30:10,530
actually serialized we can then find

730
00:30:06,660 --> 00:30:13,620
that flag UN 64 that that string un 64

731
00:30:10,530 --> 00:30:15,240
and we can begin to uncover how these

732
00:30:13,620 --> 00:30:17,310
messages are actually serialized out

733
00:30:15,240 --> 00:30:18,840
don't worry about this slide in

734
00:30:17,310 --> 00:30:23,669
particular there will be more examples

735
00:30:18,840 --> 00:30:25,949
in a minute now every X PC object starts

736
00:30:23,670 --> 00:30:28,680
with an X X PC header before the main

737
00:30:25,950 --> 00:30:30,300
base dictionary object this X PC header

738
00:30:28,680 --> 00:30:33,300
is made up before for magic bytes

739
00:30:30,300 --> 00:30:35,510
followed by for byte version number it's

740
00:30:33,300 --> 00:30:39,389
interesting that the version number is

741
00:30:35,510 --> 00:30:41,430
at least from what we noticed is a

742
00:30:39,390 --> 00:30:43,770
version number five which is the same as

743
00:30:41,430 --> 00:30:48,180
what's shown in Jonathan Levin's Saro s

744
00:30:43,770 --> 00:30:50,220
internals but the magic bytes appear to

745
00:30:48,180 --> 00:30:55,740
be different from any other known use of

746
00:30:50,220 --> 00:30:58,350
X PC now before we get into how these X

747
00:30:55,740 --> 00:30:59,850
PC objects are actually composed every X

748
00:30:58,350 --> 00:31:01,230
PC object

749
00:30:59,850 --> 00:31:04,439
we'll start off with a four bites type

750
00:31:01,230 --> 00:31:05,820
field and initially we were able to

751
00:31:04,440 --> 00:31:08,010
retrieve some of these and figure out

752
00:31:05,820 --> 00:31:10,918
you know a limited set of them just

753
00:31:08,010 --> 00:31:13,320
based on observing various objects but

754
00:31:10,919 --> 00:31:19,740
there were lots of holes for instance an

755
00:31:13,320 --> 00:31:24,960
X PC array is either 0 0 and in twos 0 3

756
00:31:19,740 --> 00:31:28,169
0 0 0 we didn't have all of the types in

757
00:31:24,960 --> 00:31:30,720
between them so we turned to the remote

758
00:31:28,169 --> 00:31:32,669
X PC library and a little bit of data

759
00:31:30,720 --> 00:31:37,590
mining and we ended up getting this

760
00:31:32,669 --> 00:31:40,289
entire list and the X BC types shown

761
00:31:37,590 --> 00:31:41,850
here in green were either the X PC types

762
00:31:40,289 --> 00:31:43,980
that we were able to serialize ourselves

763
00:31:41,850 --> 00:31:46,020
or X BC types that we were able to

764
00:31:43,980 --> 00:31:48,659
observe in the communication between the

765
00:31:46,020 --> 00:31:51,980
T 2 chip and Mac OS and so we were able

766
00:31:48,659 --> 00:31:54,840
to decode how these X PC types were

767
00:31:51,980 --> 00:31:56,340
constructed the type shown in red were

768
00:31:54,840 --> 00:31:59,959
either objects that we weren't able to

769
00:31:56,340 --> 00:32:03,480
observe for which no programming API was

770
00:31:59,960 --> 00:32:05,850
available or they were types that maybe

771
00:32:03,480 --> 00:32:11,010
are not serializable at all such as an X

772
00:32:05,850 --> 00:32:13,139
PC connection object now for these next

773
00:32:11,010 --> 00:32:15,450
three slides we're going to cover three

774
00:32:13,140 --> 00:32:17,580
different general categories of how

775
00:32:15,450 --> 00:32:19,530
these X PC objects are constructed the

776
00:32:17,580 --> 00:32:22,320
first of these categories is fixed size

777
00:32:19,530 --> 00:32:25,379
objects such as boolean x' integers etc

778
00:32:22,320 --> 00:32:28,470
so in this case as a fixed size object a

779
00:32:25,380 --> 00:32:31,320
u n 64 has a known length of 8 bytes and

780
00:32:28,470 --> 00:32:33,600
so this is relatively simple we have our

781
00:32:31,320 --> 00:32:38,460
4 byte type field followed by our 8 byte

782
00:32:33,600 --> 00:32:40,408
known length value field moving on to

783
00:32:38,460 --> 00:32:42,360
the next general category these are our

784
00:32:40,409 --> 00:32:45,299
variable length types such as strings

785
00:32:42,360 --> 00:32:46,500
and it will look pretty similar except

786
00:32:45,299 --> 00:32:48,720
for the inclusion of a new four byte

787
00:32:46,500 --> 00:32:51,210
length field so for our example string

788
00:32:48,720 --> 00:32:52,740
do a labs exclamation point it's

789
00:32:51,210 --> 00:32:56,159
important to note that strings have to

790
00:32:52,740 --> 00:32:57,990
be null terminated so the null character

791
00:32:56,159 --> 00:33:00,480
at the end of the string bringing it up

792
00:32:57,990 --> 00:33:03,120
to nine characters is reflected in that

793
00:33:00,480 --> 00:33:05,039
for byte length field now another

794
00:33:03,120 --> 00:33:06,750
property of exbc objects is that they

795
00:33:05,039 --> 00:33:09,210
have every field within the next PC

796
00:33:06,750 --> 00:33:11,940
object has to be four by two lined so in

797
00:33:09,210 --> 00:33:13,810
addition to it being nine bytes in the

798
00:33:11,940 --> 00:33:15,220
length field it's actually going to take

799
00:33:13,810 --> 00:33:20,379
it's gonna be padded by three bites and

800
00:33:15,220 --> 00:33:22,600
take up 12 full bites the third category

801
00:33:20,380 --> 00:33:24,190
of exbc objects are compound objects

802
00:33:22,600 --> 00:33:27,280
things like dictionaries and arrays and

803
00:33:24,190 --> 00:33:30,220
again this will be similar to the

804
00:33:27,280 --> 00:33:31,930
variable length objects but within an

805
00:33:30,220 --> 00:33:34,390
additional field here so we have our

806
00:33:31,930 --> 00:33:36,100
four byte type field our four by length

807
00:33:34,390 --> 00:33:38,020
field the length field reflecting the

808
00:33:36,100 --> 00:33:40,750
number of bytes for everything after the

809
00:33:38,020 --> 00:33:42,450
length field and then a new field number

810
00:33:40,750 --> 00:33:46,890
of entries and this is what allows us to

811
00:33:42,450 --> 00:33:49,870
parse through the compound object and

812
00:33:46,890 --> 00:33:54,700
determine what its recursive sub objects

813
00:33:49,870 --> 00:33:56,919
are after that comes a concatenated list

814
00:33:54,700 --> 00:33:59,140
of all of the other objects within this

815
00:33:56,920 --> 00:34:00,520
compound object now dictionaries are a

816
00:33:59,140 --> 00:34:02,770
little bit of a special case because in

817
00:34:00,520 --> 00:34:04,900
addition to the values of those objects

818
00:34:02,770 --> 00:34:07,150
we also need keys and keys are very

819
00:34:04,900 --> 00:34:08,889
similar to the string object that we saw

820
00:34:07,150 --> 00:34:10,450
in the last slide except they don't have

821
00:34:08,889 --> 00:34:13,690
their own type in length field so there

822
00:34:10,449 --> 00:34:15,908
are no term innate adrims padded out to

823
00:34:13,690 --> 00:34:18,639
be a multiple of four bytes so you can

824
00:34:15,909 --> 00:34:20,889
see here we have our our three type

825
00:34:18,639 --> 00:34:23,139
length and number of entries fields

826
00:34:20,889 --> 00:34:25,659
followed by our first objects key and

827
00:34:23,139 --> 00:34:27,940
then the value of that object and then

828
00:34:25,659 --> 00:34:31,570
our second objects key followed by the

829
00:34:27,940 --> 00:34:33,429
value of that object now there are other

830
00:34:31,570 --> 00:34:36,159
exbc object types that we aren't going

831
00:34:33,429 --> 00:34:37,929
to go into in this talk mostly due to

832
00:34:36,159 --> 00:34:40,810
the fact that they tend to be unique and

833
00:34:37,929 --> 00:34:45,310
so I'd be going over specifics for a

834
00:34:40,810 --> 00:34:49,989
particular object type we do have more

835
00:34:45,310 --> 00:34:52,210
details about these in our whitepaper so

836
00:34:49,989 --> 00:34:54,609
at this point we understand how all the

837
00:34:52,210 --> 00:34:57,490
different network layers work we

838
00:34:54,610 --> 00:35:00,340
understand how to decode and encode xpz

839
00:34:57,490 --> 00:35:02,410
objects so let's go back and listen in

840
00:35:00,340 --> 00:35:05,470
on that t2 communication that we saw

841
00:35:02,410 --> 00:35:07,839
before for this we're going to use the

842
00:35:05,470 --> 00:35:09,640
Cystic notes utility as a case study the

843
00:35:07,840 --> 00:35:11,770
system assists diagnose utility if

844
00:35:09,640 --> 00:35:13,120
you're not familiar with it is a tool

845
00:35:11,770 --> 00:35:15,730
that a lot that goes and collects a

846
00:35:13,120 --> 00:35:19,299
bunch of metadata about your Mac and six

847
00:35:15,730 --> 00:35:22,570
in a target GZ file for later perusing

848
00:35:19,300 --> 00:35:24,400
and if you pass this utility to - C flag

849
00:35:22,570 --> 00:35:27,340
it will also send a message to the T -

850
00:35:24,400 --> 00:35:29,800
chip which will ask the T - chip to

851
00:35:27,340 --> 00:35:36,340
metadata and send it back to be included

852
00:35:29,800 --> 00:35:38,200
in the sysadmin target GZ file so we can

853
00:35:36,340 --> 00:35:40,900
use this as an easy way to generate some

854
00:35:38,200 --> 00:35:43,509
traffic to look at over the VHD 128

855
00:35:40,900 --> 00:35:45,460
interface and so this is what we were

856
00:35:43,510 --> 00:35:47,110
looking at before and just as a reminder

857
00:35:45,460 --> 00:35:48,460
this is what we were seeing in Wireshark

858
00:35:47,110 --> 00:35:51,370
that was about as far as Wireshark could

859
00:35:48,460 --> 00:35:54,520
take us and with the tooling that we

860
00:35:51,370 --> 00:35:55,930
built based on understanding how these X

861
00:35:54,520 --> 00:35:58,120
PC objects are formed in all the

862
00:35:55,930 --> 00:36:00,669
different layers this is now what we can

863
00:35:58,120 --> 00:36:02,560
see with this simple sniffer utility we

864
00:36:00,670 --> 00:36:04,600
can see all of the fields available in

865
00:36:02,560 --> 00:36:06,190
the x pz wrapper as well as the fields

866
00:36:04,600 --> 00:36:10,660
that are actually contained within the X

867
00:36:06,190 --> 00:36:12,370
PC objects themselves so now that we

868
00:36:10,660 --> 00:36:14,440
understand this sis diagnosed looks

869
00:36:12,370 --> 00:36:16,900
pretty simple there's a simple message

870
00:36:14,440 --> 00:36:19,150
request type equals one sent from the

871
00:36:16,900 --> 00:36:21,280
client to the T to the T two sends back

872
00:36:19,150 --> 00:36:23,170
a message saying response type equals

873
00:36:21,280 --> 00:36:25,080
one and then a few seconds later sends

874
00:36:23,170 --> 00:36:31,090
back a big data transfer that is the

875
00:36:25,080 --> 00:36:33,400
diagnosed heart G Z so now what if we

876
00:36:31,090 --> 00:36:35,230
wanted to talk to the T to chip

877
00:36:33,400 --> 00:36:37,360
ourselves specifically this is diagnosed

878
00:36:35,230 --> 00:36:41,590
server running on the t2 chip could we

879
00:36:37,360 --> 00:36:43,330
write our own Mac OS client that at

880
00:36:41,590 --> 00:36:45,190
least initially just replicates the

881
00:36:43,330 --> 00:36:48,759
functionality of this of this diagnose

882
00:36:45,190 --> 00:36:51,070
chip are the cysts a ghost utility for

883
00:36:48,760 --> 00:36:55,900
that we're going to turn back to our

884
00:36:51,070 --> 00:36:59,590
friend remote CTL so oh I think it sorry

885
00:36:55,900 --> 00:37:03,340
it went too far the remote CTL real a

886
00:36:59,590 --> 00:37:05,680
utility again will open a connection to

887
00:37:03,340 --> 00:37:07,270
a service on on the t2 chip and then

888
00:37:05,680 --> 00:37:09,850
open a listening socket on the Mac OS

889
00:37:07,270 --> 00:37:12,250
host which you can see here with net

890
00:37:09,850 --> 00:37:14,680
stat that we can then connect to with

891
00:37:12,250 --> 00:37:17,380
our own application we initially tried

892
00:37:14,680 --> 00:37:19,330
to do this using scape II and that

893
00:37:17,380 --> 00:37:22,180
didn't work so well because it turns out

894
00:37:19,330 --> 00:37:25,150
scape you slow and as the t2 chip is on

895
00:37:22,180 --> 00:37:27,129
your own device it expects round-trip

896
00:37:25,150 --> 00:37:30,580
times to be on the order of you know one

897
00:37:27,130 --> 00:37:31,900
or two milliseconds so we needed

898
00:37:30,580 --> 00:37:33,819
something more performant so we turned

899
00:37:31,900 --> 00:37:36,670
to the twisted library and use the hyper

900
00:37:33,820 --> 00:37:38,260
h2 library to handle the HTTP to layer

901
00:37:36,670 --> 00:37:40,620
and then we built our system those

902
00:37:38,260 --> 00:37:41,730
client on top of that

903
00:37:40,620 --> 00:37:43,920
at the time we were originally

904
00:37:41,730 --> 00:37:45,870
performing this research it's important

905
00:37:43,920 --> 00:37:48,060
to note that root access was not

906
00:37:45,870 --> 00:37:49,890
required sip could be enabled any

907
00:37:48,060 --> 00:37:52,259
unprivileged process running on the

908
00:37:49,890 --> 00:37:53,879
device could communicate with the tea to

909
00:37:52,260 --> 00:37:57,690
chip or with the services running on the

910
00:37:53,880 --> 00:37:58,590
tea to ship directly unfortunately if

911
00:37:57,690 --> 00:38:00,750
you try this now

912
00:37:58,590 --> 00:38:02,970
even with SIP disabled even with root

913
00:38:00,750 --> 00:38:04,560
access you're more likely to run into an

914
00:38:02,970 --> 00:38:08,129
error message that looks like this no

915
00:38:04,560 --> 00:38:09,990
such process now as security researchers

916
00:38:08,130 --> 00:38:11,610
this is really unfortunate because we'd

917
00:38:09,990 --> 00:38:13,470
like to be able to continue poking

918
00:38:11,610 --> 00:38:15,750
around at the tea to ship and we'd like

919
00:38:13,470 --> 00:38:18,990
to enable you all to continue to build

920
00:38:15,750 --> 00:38:22,170
upon this this research so we're gonna

921
00:38:18,990 --> 00:38:24,479
step aside from our normally scheduled

922
00:38:22,170 --> 00:38:26,670
talk for a moment we're gonna show you

923
00:38:24,480 --> 00:38:30,930
how you can get remote CTL to work again

924
00:38:26,670 --> 00:38:33,210
if you would like the remote CTL relay

925
00:38:30,930 --> 00:38:38,310
sub-command specifically is is gated by

926
00:38:33,210 --> 00:38:40,230
a new entitlement in 10.14 3 and onward

927
00:38:38,310 --> 00:38:42,870
it's the combat Apple dot private

928
00:38:40,230 --> 00:38:45,630
network in Chico proc that restricted

929
00:38:42,870 --> 00:38:50,279
entitlement and using Jonathan Levin's

930
00:38:45,630 --> 00:38:52,440
really cool J tool utility you can take

931
00:38:50,280 --> 00:38:54,300
the remote CTL binary and add this

932
00:38:52,440 --> 00:38:57,840
entitlement to it and then Reese I knit

933
00:38:54,300 --> 00:39:00,210
with your own certificate now in doing

934
00:38:57,840 --> 00:39:02,880
this the antfee daemon is going to be

935
00:39:00,210 --> 00:39:08,070
very upset if you try to run the this

936
00:39:02,880 --> 00:39:10,800
new self-signed remote CDL binary and so

937
00:39:08,070 --> 00:39:12,750
you'll need to disable that as well but

938
00:39:10,800 --> 00:39:14,910
once you do you have a remote CTL

939
00:39:12,750 --> 00:39:18,050
functionality that you can use again so

940
00:39:14,910 --> 00:39:21,299
we have to disable sip run it as root

941
00:39:18,050 --> 00:39:23,700
disable MPD and self-signed the remote

942
00:39:21,300 --> 00:39:25,370
CTL binary but once you do that it's

943
00:39:23,700 --> 00:39:30,210
easy

944
00:39:25,370 --> 00:39:31,799
back to the sysadmin style so with our

945
00:39:30,210 --> 00:39:33,990
initial sista our with the original

946
00:39:31,800 --> 00:39:36,420
assist diagnose - see you can see that

947
00:39:33,990 --> 00:39:38,490
the messages get sent is request type

948
00:39:36,420 --> 00:39:40,410
equals 1 and the response ends up

949
00:39:38,490 --> 00:39:42,299
looking like response type equals 1 some

950
00:39:40,410 --> 00:39:43,350
metadata about the file transfer that's

951
00:39:42,300 --> 00:39:47,370
going to come back and then the file

952
00:39:43,350 --> 00:39:49,049
name if we we noticed that if you pass

953
00:39:47,370 --> 00:39:52,259
some additional parameters the cystitis

954
00:39:49,050 --> 00:39:53,710
utility it puts more things on the wire

955
00:39:52,260 --> 00:39:56,650
it sends more

956
00:39:53,710 --> 00:39:58,359
the t2 chip and so we wonder what other

957
00:39:56,650 --> 00:40:00,250
parameters can be sent to the t2 chip

958
00:39:58,359 --> 00:40:02,920
and for that we went we looked at the

959
00:40:00,250 --> 00:40:04,180
firmware images that were extracted that

960
00:40:02,920 --> 00:40:05,830
we showed you how to extract earlier in

961
00:40:04,180 --> 00:40:10,049
the talk and we went and we grabbed the

962
00:40:05,830 --> 00:40:12,819
binary for the T 2's diagnose server and

963
00:40:10,050 --> 00:40:13,869
we were able to pull out all the

964
00:40:12,820 --> 00:40:16,750
different parameters that this

965
00:40:13,869 --> 00:40:20,320
particular server would be responsive to

966
00:40:16,750 --> 00:40:22,810
and if you look at just the archive name

967
00:40:20,320 --> 00:40:25,599
probably the simplest example if we then

968
00:40:22,810 --> 00:40:28,960
use our customs to segment to pass this

969
00:40:25,599 --> 00:40:31,599
archive name parameter we can see that

970
00:40:28,960 --> 00:40:35,800
we get a new archive name just as a

971
00:40:31,599 --> 00:40:37,630
proof of concept here now this is as far

972
00:40:35,800 --> 00:40:41,200
as we've gone and we're unlikely to

973
00:40:37,630 --> 00:40:43,810
revisit this work anytime soon so there

974
00:40:41,200 --> 00:40:44,919
are a lot of really cool things that can

975
00:40:43,810 --> 00:40:46,960
still be done here

976
00:40:44,920 --> 00:40:49,180
there are lots more services to be

977
00:40:46,960 --> 00:40:52,300
explored fuzzing some of these services

978
00:40:49,180 --> 00:40:54,819
would be a great next step and as the t2

979
00:40:52,300 --> 00:40:57,130
chip is arguably the most secure boot

980
00:40:54,820 --> 00:40:59,250
process or lends itself to the most

981
00:40:57,130 --> 00:41:04,060
secure boot process currently out there

982
00:40:59,250 --> 00:41:08,250
this work is very valuable to the

983
00:41:04,060 --> 00:41:11,080
community to validate this process and

984
00:41:08,250 --> 00:41:12,430
in the effort to democratize security we

985
00:41:11,080 --> 00:41:14,560
are open sourcing all of our tooling

986
00:41:12,430 --> 00:41:16,419
both the sniffer utility and sis

987
00:41:14,560 --> 00:41:19,570
diagnose client as referenced examples

988
00:41:16,420 --> 00:41:21,640
for how to listen and speak to the t2

989
00:41:19,570 --> 00:41:23,560
chip as well as under all the underlying

990
00:41:21,640 --> 00:41:25,720
libraries that allow you to decode the

991
00:41:23,560 --> 00:41:30,970
message layers decode and encode exbc

992
00:41:25,720 --> 00:41:32,770
objects and make it all possible our our

993
00:41:30,970 --> 00:41:36,160
papers are here at the short links shown

994
00:41:32,770 --> 00:41:37,570
if you have any questions we'll take

995
00:41:36,160 --> 00:41:38,420
them out and thank you all for coming to

996
00:41:37,570 --> 00:41:42,929
our talk

997
00:41:38,420 --> 00:41:42,929
[Applause]

998
00:41:43,720 --> 00:41:51,009
oh and if everybody can use the

999
00:41:49,750 --> 00:41:51,700
microphone oh you're at the microphone

1000
00:41:51,010 --> 00:41:54,760
sorry about that

1001
00:41:51,700 --> 00:41:57,609
hey thank you for the great talk could

1002
00:41:54,760 --> 00:41:59,829
you elaborate on if and how the party

1003
00:41:57,609 --> 00:42:01,240
operating systems could interact the 32

1004
00:41:59,829 --> 00:42:03,420
chip this is just a matter of

1005
00:42:01,240 --> 00:42:07,990
implementation or is there a give

1006
00:42:03,420 --> 00:42:10,690
Technic restriction how the Mac OS

1007
00:42:07,990 --> 00:42:13,540
system of third-party operating system

1008
00:42:10,690 --> 00:42:16,839
and how they could interact with tt-to

1009
00:42:13,540 --> 00:42:18,550
chip yes so to get their party operating

1010
00:42:16,839 --> 00:42:20,589
systems like Windows to boot on T to

1011
00:42:18,550 --> 00:42:23,140
naval platforms makya Phi manager has

1012
00:42:20,589 --> 00:42:26,650
some additional flows in there to defer

1013
00:42:23,140 --> 00:42:29,589
various keys to be Microsoft's as

1014
00:42:26,650 --> 00:42:31,450
opposed to Apple's internally so their

1015
00:42:29,589 --> 00:42:35,400
their specific whitelists internally for

1016
00:42:31,450 --> 00:42:35,399
Windows there they don't exist for Linux

1017
00:42:35,760 --> 00:42:39,880
can they also interact with the do

1018
00:42:38,020 --> 00:42:43,119
should be the same way that Mac OS can

1019
00:42:39,880 --> 00:42:44,770
using these messages I mean it's I have

1020
00:42:43,119 --> 00:42:46,810
not tried directly but I can't imagine

1021
00:42:44,770 --> 00:42:49,480
be very different as it's exposed

1022
00:42:46,810 --> 00:42:51,578
through USB to the host operating system

1023
00:42:49,480 --> 00:42:53,470
but I'd imagine you might be able to get

1024
00:42:51,579 --> 00:43:00,460
something akin to the en6 interface

1025
00:42:53,470 --> 00:43:02,500
under windows hi can you explain more

1026
00:43:00,460 --> 00:43:05,200
about the exploitation integration there

1027
00:43:02,500 --> 00:43:07,270
are in dt2 like that execution provision

1028
00:43:05,200 --> 00:43:09,250
is Laura canary is there anything like

1029
00:43:07,270 --> 00:43:11,560
that there sorry could you repeat that

1030
00:43:09,250 --> 00:43:15,280
one more time what our decks rotation

1031
00:43:11,560 --> 00:43:17,290
integration in de t2 SLR that execution

1032
00:43:15,280 --> 00:43:19,569
prevention stack Canaries or anything

1033
00:43:17,290 --> 00:43:21,640
over there yeah absolutely all those

1034
00:43:19,569 --> 00:43:23,470
mitigations are in place it's it's

1035
00:43:21,640 --> 00:43:24,879
basically an apple watch on your

1036
00:43:23,470 --> 00:43:26,919
motherboard so all the typical things

1037
00:43:24,880 --> 00:43:28,660
you would find on an iPhone or watch OS

1038
00:43:26,920 --> 00:43:31,240
you're you're gonna find on the t2

1039
00:43:28,660 --> 00:43:35,020
itself so with with the a-10 you're not

1040
00:43:31,240 --> 00:43:41,259
gonna have like PAC enabled but you're

1041
00:43:35,020 --> 00:43:43,720
gonna find everything else I think this

1042
00:43:41,260 --> 00:43:45,369
side either what components have you

1043
00:43:43,720 --> 00:43:47,430
found are they're necessary to

1044
00:43:45,369 --> 00:43:50,619
communicate with the t2 directly I mean

1045
00:43:47,430 --> 00:43:54,490
on the iPhone you have the EEPROM that

1046
00:43:50,619 --> 00:43:57,280
needs to be signed with the actual CPU

1047
00:43:54,490 --> 00:44:00,279
is the t2 encapsulated all

1048
00:43:57,280 --> 00:44:01,990
the components physically but the t2 is

1049
00:44:00,280 --> 00:44:03,820
in capitalist Li encapsulating all those

1050
00:44:01,990 --> 00:44:05,379
components the the spy flash trip is no

1051
00:44:03,820 --> 00:44:07,660
longer present on the board outside of

1052
00:44:05,380 --> 00:44:10,390
the iMac pro it has a separate spy flash

1053
00:44:07,660 --> 00:44:12,759
chip for graphics card firmware but

1054
00:44:10,390 --> 00:44:15,040
there UEFI is all being provided

1055
00:44:12,760 --> 00:44:17,110
dynamically by the t2 okay

1056
00:44:15,040 --> 00:44:19,360
does the touch ID for example need to be

1057
00:44:17,110 --> 00:44:22,750
physically that same exact touch ID to

1058
00:44:19,360 --> 00:44:25,120
be able to communicate with the t2 to

1059
00:44:22,750 --> 00:44:26,740
boot up and be able to see the data so

1060
00:44:25,120 --> 00:44:28,480
we didn't specifically look at touch ID

1061
00:44:26,740 --> 00:44:30,700
but the touch ID should be handled by

1062
00:44:28,480 --> 00:44:32,860
the t2 except that is internal to that

1063
00:44:30,700 --> 00:44:36,549
okay all right thank you

1064
00:44:32,860 --> 00:44:38,110
so the spy flash replacement issue you

1065
00:44:36,550 --> 00:44:40,060
guys highlighted it shouldn't Intel's

1066
00:44:38,110 --> 00:44:42,640
Meo so address that through its secure

1067
00:44:40,060 --> 00:44:43,840
boot process if so what does the T to

1068
00:44:42,640 --> 00:44:46,120
bring on top of that for secure boot

1069
00:44:43,840 --> 00:44:47,620
since it tells them he also has on Shibu

1070
00:44:46,120 --> 00:44:51,100
ROM as well as crypto key store right

1071
00:44:47,620 --> 00:44:53,460
yeah so so we didn't see any signs of

1072
00:44:51,100 --> 00:44:56,290
boot guard being utilized anywhere and

1073
00:44:53,460 --> 00:44:58,510
Apple seems to be invalidate their own

1074
00:44:56,290 --> 00:45:00,730
firmware signatures immediately upon

1075
00:44:58,510 --> 00:45:02,830
loading so I'm not sure how much that

1076
00:45:00,730 --> 00:45:08,860
would help outside of doing individual

1077
00:45:02,830 --> 00:45:12,090
like UEFI partition checks all right

1078
00:45:08,860 --> 00:45:15,419
well thank you so much thank you

1079
00:45:12,090 --> 00:45:15,419
[Applause]

