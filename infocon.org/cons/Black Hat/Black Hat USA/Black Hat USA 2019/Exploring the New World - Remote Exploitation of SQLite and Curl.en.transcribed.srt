1
00:00:00,030 --> 00:00:04,290
welcome to exploring the new world

2
00:00:01,790 --> 00:00:06,810
remote exploitation of sequel light and

3
00:00:04,290 --> 00:00:08,700
curled I was going to try to pronounce

4
00:00:06,810 --> 00:00:11,268
this gentleman's names but instead I

5
00:00:08,700 --> 00:00:14,790
have their English names so we have Leon

6
00:00:11,269 --> 00:00:17,220
Nikki and alien that's much easier for

7
00:00:14,790 --> 00:00:19,970
me to pronounce we ask you that you

8
00:00:17,220 --> 00:00:22,859
please silence your cell phone and

9
00:00:19,970 --> 00:00:25,049
please give a warm welcome to our

10
00:00:22,859 --> 00:00:31,579
speakers from Tencent blade team thank

11
00:00:25,050 --> 00:00:34,500
you okay thank you

12
00:00:31,579 --> 00:00:36,960
hello everyone thank you for coming

13
00:00:34,500 --> 00:00:38,670
where were we studying to share our

14
00:00:36,960 --> 00:00:41,940
research at the bracket

15
00:00:38,670 --> 00:00:42,780
the title of our talk today is exploring

16
00:00:41,940 --> 00:00:46,079
the new world

17
00:00:42,780 --> 00:00:50,550
Ramola the motor is pollination of

18
00:00:46,079 --> 00:00:53,640
stockinette and curve first let me

19
00:00:50,550 --> 00:00:57,089
introduce my ecology and myself this is

20
00:00:53,640 --> 00:00:59,070
my teammates chairmanship his senior

21
00:00:57,090 --> 00:01:01,829
security researcher at the Sensibility

22
00:00:59,070 --> 00:01:05,489
now he's focusing our brothers clergy

23
00:01:01,829 --> 00:01:07,799
and the outskirt he is interested in how

24
00:01:05,489 --> 00:01:10,409
the audiology and rattle security book

25
00:01:07,799 --> 00:01:16,020
and he is also a speaker of Def Con and

26
00:01:10,409 --> 00:01:18,570
CSS and this is Newsham he's a senior

27
00:01:16,020 --> 00:01:20,820
security researcher at instability now

28
00:01:18,570 --> 00:01:24,119
he's forcing our mobile security and IOT

29
00:01:20,820 --> 00:01:26,939
scourge he has discovered the man is

30
00:01:24,119 --> 00:01:29,850
gullibility singing and joy he's also a

31
00:01:26,939 --> 00:01:34,258
speaker that have in the box CSS and has

32
00:01:29,850 --> 00:01:36,839
come and the my name is we you can come

33
00:01:34,259 --> 00:01:38,670
me Nicky I also a senior security

34
00:01:36,840 --> 00:01:41,820
researcher at instability

35
00:01:38,670 --> 00:01:44,520
I'm a bug hunter and keep our winner am

36
00:01:41,820 --> 00:01:49,979
I also speak of Def Con Hagin post and

37
00:01:44,520 --> 00:01:53,130
POC last I will introduce the temporal

38
00:01:49,979 --> 00:01:55,079
team our team was funded pattinson

39
00:01:53,130 --> 00:01:58,100
security plan phone department at the

40
00:01:55,079 --> 00:02:01,529
2011 oh sorry

41
00:01:58,100 --> 00:02:04,259
2017 and and now we are focusing on

42
00:02:01,530 --> 00:02:07,590
security research in areas such as AI

43
00:02:04,259 --> 00:02:08,929
outta to assist mobile devices cloud and

44
00:02:07,590 --> 00:02:12,780
the blockchain

45
00:02:08,929 --> 00:02:13,800
now we have report reported more than

46
00:02:12,780 --> 00:02:16,830
200

47
00:02:13,800 --> 00:02:21,630
to our abilities to many companies such

48
00:02:16,830 --> 00:02:26,790
as a Google app or Amazon no soft and so

49
00:02:21,630 --> 00:02:33,359
on and you can connect us at played tons

50
00:02:26,790 --> 00:02:36,299
and calm ok at the briefing look at the

51
00:02:33,360 --> 00:02:38,810
agenda in the first part we will

52
00:02:36,300 --> 00:02:41,700
introduce our main research without

53
00:02:38,810 --> 00:02:44,130
uncivilized and the curve in the second

54
00:02:41,700 --> 00:02:46,200
part we were shelled details on how to

55
00:02:44,130 --> 00:02:48,480
discover stability and curve all

56
00:02:46,200 --> 00:02:52,200
abilities through manual all dirty and

57
00:02:48,480 --> 00:02:54,329
fuzzy in third part we were sure how to

58
00:02:52,200 --> 00:02:57,530
exploit these vulnerabilities to

59
00:02:54,330 --> 00:03:03,120
complete the report we've mortar attacks

60
00:02:57,530 --> 00:03:08,730
felony we will summarize our research ok

61
00:03:03,120 --> 00:03:13,680
I start with the first part so what do

62
00:03:08,730 --> 00:03:15,540
we targeted those two number is first we

63
00:03:13,680 --> 00:03:17,790
think certain neighbors

64
00:03:15,540 --> 00:03:21,060
so the party libraries are always sweet

65
00:03:17,790 --> 00:03:24,900
they are how Ness code and the first on

66
00:03:21,060 --> 00:03:28,650
functions second a most elaborate to us

67
00:03:24,900 --> 00:03:31,440
had a tiny installed not the most

68
00:03:28,650 --> 00:03:34,260
important see is our koi was to break

69
00:03:31,440 --> 00:03:37,590
Google home and Google or Google Chrome

70
00:03:34,260 --> 00:03:40,140
are using them to the web circa makes

71
00:03:37,590 --> 00:03:43,830
some remote attacks we are civilized our

72
00:03:40,140 --> 00:03:49,950
available in chrome and the car was born

73
00:03:43,830 --> 00:03:52,739
to be working remotely afters research

74
00:03:49,950 --> 00:03:55,530
with felony funder the thrift security

75
00:03:52,739 --> 00:03:58,770
vulnerabilities in chocolate we named

76
00:03:55,530 --> 00:04:03,330
them machen which allows us to implement

77
00:03:58,770 --> 00:04:05,040
remote remote code execution and current

78
00:04:03,330 --> 00:04:08,400
brother in cocoa home

79
00:04:05,040 --> 00:04:11,519
we also found to one uppity sin curve we

80
00:04:08,400 --> 00:04:17,579
need engines which are not a stramonium

81
00:04:11,519 --> 00:04:20,190
attack Apache and PHP or kids okay map

82
00:04:17,579 --> 00:04:24,349
had ends here we are can't change and

83
00:04:20,190 --> 00:04:24,350
continue to share another pod

84
00:04:27,210 --> 00:04:32,500
okay thank you for the

85
00:04:30,099 --> 00:04:35,469
traduction now I will continue with

86
00:04:32,500 --> 00:04:39,729
part-2 fobbing and menu auditing the

87
00:04:35,469 --> 00:04:42,009
city lights and lab curve before

88
00:04:39,729 --> 00:04:43,810
introducing the code all these parts I

89
00:04:42,009 --> 00:04:47,349
would like to mention some previously

90
00:04:43,810 --> 00:04:49,719
researches first my coziest kiss fuzzing

91
00:04:47,349 --> 00:04:53,259
has significantly improved the quality

92
00:04:49,719 --> 00:04:57,009
of cigarettes and then there's a talk on

93
00:04:53,259 --> 00:05:00,580
black ads in 2017 which also explains

94
00:04:57,009 --> 00:05:02,770
the idea of exploiting cigarettes after

95
00:05:00,580 --> 00:05:05,438
that there doesn't seem to be a lot of

96
00:05:02,770 --> 00:05:09,159
new news about the vulnerabilities of

97
00:05:05,439 --> 00:05:11,409
cigarettes but we have found some in the

98
00:05:09,159 --> 00:05:14,020
next part we will introduce the code

99
00:05:11,409 --> 00:05:16,719
auditing and exploiting of metal and a

100
00:05:14,020 --> 00:05:19,389
set of vulnerabilities in chocolate and

101
00:05:16,719 --> 00:05:24,039
the earth which is a set of

102
00:05:19,389 --> 00:05:26,319
vulnerabilities in LabCorp the chromium

103
00:05:24,039 --> 00:05:28,690
project comes with a father foresee

104
00:05:26,319 --> 00:05:31,569
collide we made some simple changes to

105
00:05:28,690 --> 00:05:34,690
it such as adding some sin tax base to

106
00:05:31,569 --> 00:05:37,180
us and when we looked back we found that

107
00:05:34,690 --> 00:05:39,849
there was a lot of crash files generated

108
00:05:37,180 --> 00:05:42,819
however these test cases can only

109
00:05:39,849 --> 00:05:45,310
trigger empty pointer dereferencing one

110
00:05:42,819 --> 00:05:48,009
of these fracas is caused by dumpling

111
00:05:45,310 --> 00:05:50,589
caged primary keys and when I was

112
00:05:48,009 --> 00:05:52,750
jogging I typed the first three created

113
00:05:50,589 --> 00:05:55,930
table statements to see what was going

114
00:05:52,750 --> 00:05:58,210
on in memory however I was surprised to

115
00:05:55,930 --> 00:06:01,689
find that thought table command showed

116
00:05:58,210 --> 00:06:02,438
the six tables the question is was lost

117
00:06:01,689 --> 00:06:07,180
content

118
00:06:02,439 --> 00:06:09,430
signe are segments 10 for the security

119
00:06:07,180 --> 00:06:12,610
menu shows that these tables are called

120
00:06:09,430 --> 00:06:15,210
shadow tables the five tables there are

121
00:06:12,610 --> 00:06:19,419
five types of shadow tables which is

122
00:06:15,210 --> 00:06:22,870
content SEC TR segments they are for FPS

123
00:06:19,419 --> 00:06:26,169
3 or FPS for and state and top sides are

124
00:06:22,870 --> 00:06:28,029
for FPS for only however because of

125
00:06:26,169 --> 00:06:30,460
those tables are treated like standard

126
00:06:28,029 --> 00:06:32,889
tables you can create corresponding

127
00:06:30,460 --> 00:06:36,250
stage and top side table even you are

128
00:06:32,889 --> 00:06:38,360
operating on an FPS 3 table you can

129
00:06:36,250 --> 00:06:40,669
create a stage and talk size by sea

130
00:06:38,360 --> 00:06:44,629
create a table statement because the

131
00:06:40,669 --> 00:06:48,139
collage itself is doing this too and FDR

132
00:06:44,629 --> 00:06:50,539
3fg s4 is sharing some code which means

133
00:06:48,139 --> 00:06:53,689
stage and table size not changing the

134
00:06:50,539 --> 00:06:56,449
code flow in some conditions for example

135
00:06:53,689 --> 00:07:00,979
one of our exploits are simulating an

136
00:06:56,449 --> 00:07:03,439
FPS for table on a ps3 environment this

137
00:07:00,979 --> 00:07:06,289
is useful because some software like

138
00:07:03,439 --> 00:07:09,889
chromium used is only apps ps3 and

139
00:07:06,289 --> 00:07:12,110
expertly to say about FPS for this would

140
00:07:09,889 --> 00:07:13,939
extend the attack surface by entering

141
00:07:12,110 --> 00:07:17,360
some code branch that should never be

142
00:07:13,939 --> 00:07:19,340
entered the shadow table is used as a

143
00:07:17,360 --> 00:07:24,500
container to store the contents of

144
00:07:19,340 --> 00:07:26,659
vortex search metadata what's shown on

145
00:07:24,500 --> 00:07:29,150
this slide is the definition and meaning

146
00:07:26,659 --> 00:07:31,520
of each shadow table we can see that

147
00:07:29,150 --> 00:07:34,909
almost every shadow table has a field of

148
00:07:31,520 --> 00:07:38,000
type law that's because to support for

149
00:07:34,909 --> 00:07:40,520
text queries FPS maintains an inverted

150
00:07:38,000 --> 00:07:43,729
index that maps from each unique term

151
00:07:40,520 --> 00:07:45,948
Award that appears in the data set to

152
00:07:43,729 --> 00:07:49,400
the locations in which it appears within

153
00:07:45,949 --> 00:07:51,469
the table contents it is complicated but

154
00:07:49,400 --> 00:07:53,690
all we know is that compared to other

155
00:07:51,469 --> 00:07:58,969
fields those blobs may have some

156
00:07:53,690 --> 00:08:01,009
important influence our FPS queries in

157
00:07:58,969 --> 00:08:03,770
circulate the raw binary data is

158
00:08:01,009 --> 00:08:06,110
typically we present it in the form of X

159
00:08:03,770 --> 00:08:09,020
single quotation mark and have stream

160
00:08:06,110 --> 00:08:11,479
called numbers however the plots here

161
00:08:09,020 --> 00:08:14,779
are binary data to represent the entire

162
00:08:11,479 --> 00:08:17,300
Petri and since each referred in such a

163
00:08:14,779 --> 00:08:18,229
complex structure is it possible to

164
00:08:17,300 --> 00:08:20,689
create a memory corruption

165
00:08:18,229 --> 00:08:23,089
vulnerabilities by destroying the data

166
00:08:20,689 --> 00:08:25,039
of the structure as we read about the

167
00:08:23,089 --> 00:08:29,210
documents of the serialize data

168
00:08:25,039 --> 00:08:31,550
structure first you can read a circle at

169
00:08:29,210 --> 00:08:33,198
menu to easily get a definition I will

170
00:08:31,550 --> 00:08:35,390
show you a simplified version so you can

171
00:08:33,198 --> 00:08:38,120
understand what I'm modifying where I'm

172
00:08:35,390 --> 00:08:39,890
trying to exploiting them basically I

173
00:08:38,120 --> 00:08:42,078
modify the bytes with different

174
00:08:39,890 --> 00:08:44,899
functional sections to mislead the code

175
00:08:42,078 --> 00:08:47,660
flow the first segment speech relief

176
00:08:44,899 --> 00:08:50,209
notes the first term stored on each node

177
00:08:47,660 --> 00:08:51,770
which is term 1 in the figure above is

178
00:08:50,209 --> 00:08:54,439
stored web team

179
00:08:51,770 --> 00:08:57,130
each subsequent term is prefix

180
00:08:54,440 --> 00:09:00,680
compressed with respect to each reducer

181
00:08:57,130 --> 00:09:03,350
predecessor in the real notes non-leaf

182
00:09:00,680 --> 00:09:06,349
nodes has different structure then the

183
00:09:03,350 --> 00:09:09,130
top list match added list consists of an

184
00:09:06,350 --> 00:09:12,610
array of 16 4 bits sign integers

185
00:09:09,130 --> 00:09:15,500
serialized using the FQs Virant permit

186
00:09:12,610 --> 00:09:18,080
each stock list entry is made up of a

187
00:09:15,500 --> 00:09:23,029
series of two or more integers as

188
00:09:18,080 --> 00:09:26,300
follows 1 the talk ID value and to 0 or

189
00:09:23,029 --> 00:09:29,630
more term of set lists in general those

190
00:09:26,300 --> 00:09:32,089
plots are just CLS the Petri data when

191
00:09:29,630 --> 00:09:32,899
cigarette wants to perform operations on

192
00:09:32,089 --> 00:09:35,959
these tables

193
00:09:32,899 --> 00:09:40,850
it was simply T serialize parse those

194
00:09:35,959 --> 00:09:42,589
clubs and can accomplish be true now our

195
00:09:40,850 --> 00:09:45,709
goal is to find the operations

196
00:09:42,589 --> 00:09:47,750
associated with those blob notes when

197
00:09:45,709 --> 00:09:49,729
I'm auditing it I first come to find

198
00:09:47,750 --> 00:09:52,760
those related code passes which are

199
00:09:49,730 --> 00:09:55,459
risky also circulat provides a complete

200
00:09:52,760 --> 00:09:58,220
code file named circulate amalgamation

201
00:09:55,459 --> 00:10:01,939
which combines the autopsy and toe edge

202
00:09:58,220 --> 00:10:03,800
files into 1 dot C file who is about 200

203
00:10:01,940 --> 00:10:06,170
thousands lines which will help you

204
00:10:03,800 --> 00:10:07,640
locate the function easily the

205
00:10:06,170 --> 00:10:12,680
screenshot is captured from this

206
00:10:07,640 --> 00:10:15,170
commission file then I have found some

207
00:10:12,680 --> 00:10:17,719
problems the problems are mainly related

208
00:10:15,170 --> 00:10:20,120
to the merge and match because they are

209
00:10:17,720 --> 00:10:22,279
deeply related to the Petri to of the

210
00:10:20,120 --> 00:10:24,440
merges the nodes of the tree and other

211
00:10:22,279 --> 00:10:28,459
is to traverse the nodes of the tree to

212
00:10:24,440 --> 00:10:30,860
match the content also the last one is

213
00:10:28,459 --> 00:10:33,229
the crash I have mentioned before it was

214
00:10:30,860 --> 00:10:36,920
that row this series of problems into

215
00:10:33,230 --> 00:10:38,930
meditation software must enable FG s3

216
00:10:36,920 --> 00:10:43,310
support and support external circle

217
00:10:38,930 --> 00:10:47,089
query to trigger these problems ok let's

218
00:10:43,310 --> 00:10:49,459
begin with first one 2 O 3 4 6 which is

219
00:10:47,089 --> 00:10:53,060
also the main vulnerability we use later

220
00:10:49,459 --> 00:10:56,270
through home this one requires a lot of

221
00:10:53,060 --> 00:10:58,310
complex preconditions that is we have to

222
00:10:56,270 --> 00:11:01,160
carefully construct a lot of tables and

223
00:10:58,310 --> 00:11:03,500
content but once the preconditions are

224
00:11:01,160 --> 00:11:05,420
met vulnerability exploitation will be

225
00:11:03,500 --> 00:11:08,249
very simple and stable

226
00:11:05,420 --> 00:11:10,979
the vulnerability is located in the

227
00:11:08,249 --> 00:11:13,139
function FG s3 App Engine node it can be

228
00:11:10,980 --> 00:11:16,529
triggered with the spatial semantics the

229
00:11:13,139 --> 00:11:19,499
merge equals 1/2 which means the level

230
00:11:16,529 --> 00:11:20,999
to be merged as you can see this

231
00:11:19,499 --> 00:11:23,669
function will try to append a node to

232
00:11:20,999 --> 00:11:25,889
another the node is stored in the blob

233
00:11:23,669 --> 00:11:29,129
so this function and a function we are

234
00:11:25,889 --> 00:11:30,929
first passing the B tree and then gets

235
00:11:29,129 --> 00:11:33,059
the start position and the length of

236
00:11:30,929 --> 00:11:36,449
binary data of the note that will be

237
00:11:33,059 --> 00:11:38,939
processed last perform and perform the

238
00:11:36,449 --> 00:11:42,949
memory copy operation to copy them into

239
00:11:38,939 --> 00:11:45,689
a new blob that represents the new tree

240
00:11:42,949 --> 00:11:48,238
let's go back to the caller function the

241
00:11:45,689 --> 00:11:49,858
turn caged node it will get the binary

242
00:11:48,239 --> 00:11:52,049
of search and learns from the pull-up

243
00:11:49,859 --> 00:11:55,019
data that will describe the node being

244
00:11:52,049 --> 00:11:57,779
processed then the node information is a

245
00:11:55,019 --> 00:12:00,689
return in a reader objects pasta to the

246
00:11:57,779 --> 00:12:02,429
vulnerable FG s3 a pension note to

247
00:12:00,689 --> 00:12:05,488
control the memory copy in a pension

248
00:12:02,429 --> 00:12:07,889
note we need to control a top list and n

249
00:12:05,489 --> 00:12:11,009
top list returned from the node we don't

250
00:12:07,889 --> 00:12:13,889
next the a talk list is the source of

251
00:12:11,009 --> 00:12:16,589
the char Ponte of the blob data and end

252
00:12:13,889 --> 00:12:18,720
of list is a node size which are the

253
00:12:16,589 --> 00:12:21,899
second and third parameter of memory

254
00:12:18,720 --> 00:12:25,470
copy to control them is not a difficult

255
00:12:21,899 --> 00:12:27,439
thing let's read the code then you will

256
00:12:25,470 --> 00:12:30,749
know why I'm saying that is leading to

257
00:12:27,439 --> 00:12:33,118
save the space of storing an integer so

258
00:12:30,749 --> 00:12:35,910
polite use a variant integer algorithm

259
00:12:33,119 --> 00:12:38,519
you can just consider FS catch marriage

260
00:12:35,910 --> 00:12:41,129
studying to as a function to convert a

261
00:12:38,519 --> 00:12:44,759
bunch of bytes into an integer it will

262
00:12:41,129 --> 00:12:46,949
store the results in n suffix then it

263
00:12:44,759 --> 00:12:50,850
moves the current cursor at the count of

264
00:12:46,949 --> 00:12:53,459
bytes it have read to I off the data for

265
00:12:50,850 --> 00:12:55,649
node is stored as less following by

266
00:12:53,459 --> 00:12:56,539
corresponding data with a certain size

267
00:12:55,649 --> 00:12:59,360
or balance

268
00:12:56,539 --> 00:13:02,730
normally they should appear in Pierce

269
00:12:59,360 --> 00:13:04,859
sorry they should appear in pairs but we

270
00:13:02,730 --> 00:13:07,079
can modify the block to make the end of

271
00:13:04,859 --> 00:13:10,949
the block boundary has only in the last

272
00:13:07,079 --> 00:13:14,160
field but no data field then the I of

273
00:13:10,949 --> 00:13:16,139
will points to the front of less and end

274
00:13:14,160 --> 00:13:17,230
of list is obtained from the blob

275
00:13:16,139 --> 00:13:19,360
normally

276
00:13:17,230 --> 00:13:22,990
the eye of a smooth to the boundary and

277
00:13:19,360 --> 00:13:26,020
in the line one two three a top list is

278
00:13:22,990 --> 00:13:28,330
said to this position also the critical

279
00:13:26,020 --> 00:13:30,790
asserts in line one two now we are not

280
00:13:28,330 --> 00:13:34,690
stopped i off because it is the void in

281
00:13:30,790 --> 00:13:37,209
the released version the line one three

282
00:13:34,690 --> 00:13:42,220
zero which is a controlled a top list

283
00:13:37,210 --> 00:13:45,100
and top list is returned here and let's

284
00:13:42,220 --> 00:13:46,330
go back to the appengine note since we

285
00:13:45,100 --> 00:13:48,370
have a top list

286
00:13:46,330 --> 00:13:51,070
end of list controlled we can all follow

287
00:13:48,370 --> 00:13:53,920
the buffer of P not a in line three one

288
00:13:51,070 --> 00:13:56,860
zero or we can copy some raw memory data

289
00:13:53,920 --> 00:13:59,620
to it as long as it doesn't you see to

290
00:13:56,860 --> 00:14:02,410
the align value then we can carry in a

291
00:13:59,620 --> 00:14:04,600
new table to get a leak raw memory by

292
00:14:02,410 --> 00:14:06,579
setting up adjacent tables we can follow

293
00:14:04,600 --> 00:14:08,890
the function pointers of table very

294
00:14:06,580 --> 00:14:13,330
accurately to exploit a coverage code

295
00:14:08,890 --> 00:14:15,790
execution okay here's another one this

296
00:14:13,330 --> 00:14:18,220
one is in function f TS threes again

297
00:14:15,790 --> 00:14:20,319
interior node and the precondition of

298
00:14:18,220 --> 00:14:23,200
this one is rather simpler than two or

299
00:14:20,320 --> 00:14:25,270
three or four six all you need to know

300
00:14:23,200 --> 00:14:27,790
is modify the shadow table and set a

301
00:14:25,270 --> 00:14:30,430
note in Sec TR to non-root a node you

302
00:14:27,790 --> 00:14:33,160
can change the blob data to change the

303
00:14:30,430 --> 00:14:35,140
code flow query the modified table by

304
00:14:33,160 --> 00:14:37,780
keyword match and then the code will

305
00:14:35,140 --> 00:14:39,520
scan every node inside the Petri then

306
00:14:37,780 --> 00:14:45,550
the code will trigger memory corruption

307
00:14:39,520 --> 00:14:48,579
in lions 184 let's analyze the code to

308
00:14:45,550 --> 00:14:50,949
see why this one's vulnerable first get

309
00:14:48,580 --> 00:14:53,170
first setting to as we have mentioned

310
00:14:50,950 --> 00:14:56,680
before it will return an integer from at

311
00:14:53,170 --> 00:14:59,829
most half the maximum value of a 32-bit

312
00:14:56,680 --> 00:15:03,489
integer the code obtained and suffix and

313
00:14:59,830 --> 00:15:05,890
prefix from the pull-up data the end is

314
00:15:03,490 --> 00:15:09,160
simply pointing to the last item in Z

315
00:15:05,890 --> 00:15:09,819
CSR if we get a big surface and a small

316
00:15:09,160 --> 00:15:13,000
m prefix

317
00:15:09,820 --> 00:15:15,160
Z CSR is a child pointer in study to

318
00:15:13,000 --> 00:15:18,610
peach environment at address of the

319
00:15:15,160 --> 00:15:20,890
first item of zcs r+ n suffix we are all

320
00:15:18,610 --> 00:15:23,650
of the unsigned integer that represents

321
00:15:20,890 --> 00:15:26,889
the address and become a smaller address

322
00:15:23,650 --> 00:15:30,129
in this condition it will pass a check

323
00:15:26,889 --> 00:15:32,290
and also because the M prefix and suffix

324
00:15:30,129 --> 00:15:34,600
are signed integer the sum of two

325
00:15:32,290 --> 00:15:38,649
numbers is less than zero so it will

326
00:15:34,600 --> 00:15:40,779
pass a second check coincidentally each

327
00:15:38,649 --> 00:15:44,290
prevents reallocation from reporting a

328
00:15:40,779 --> 00:15:46,720
failure memory relock location and in

329
00:15:44,290 --> 00:15:49,660
the line 184 the program will try to

330
00:15:46,720 --> 00:15:52,499
copy data from the CSR with a large n

331
00:15:49,660 --> 00:15:55,569
suffix results in a heap buffer overflow

332
00:15:52,499 --> 00:15:57,879
in sixteen for bitch environment you can

333
00:15:55,569 --> 00:16:02,819
make em prefix very large to make the

334
00:15:57,879 --> 00:16:02,819
program copy to Z buffer plus n prefix

335
00:16:02,850 --> 00:16:07,480
because it has many constraint

336
00:16:05,049 --> 00:16:11,679
conditions and each was considered to be

337
00:16:07,480 --> 00:16:14,859
very hard to deploy RT devices also it

338
00:16:11,679 --> 00:16:16,959
is very not stable to exploit so we are

339
00:16:14,859 --> 00:16:19,869
not exploiting with this but this wise

340
00:16:16,959 --> 00:16:21,549
is palatable anyway please check the one

341
00:16:19,869 --> 00:16:26,739
for write out by a Korean researcher

342
00:16:21,549 --> 00:16:29,079
named antigen and last one two oh five

343
00:16:26,739 --> 00:16:31,119
oh five this one very led to a

344
00:16:29,079 --> 00:16:34,179
combination of the previous Cuban

345
00:16:31,119 --> 00:16:36,759
abilities the vulnerable function is set

346
00:16:34,179 --> 00:16:38,709
cell reader next you can modify the

347
00:16:36,759 --> 00:16:40,989
shadow table and mislead the code flow

348
00:16:38,709 --> 00:16:43,779
so here the P reader should be

349
00:16:40,989 --> 00:16:46,600
controlled first period is very like the

350
00:16:43,779 --> 00:16:49,540
reader objects in the three four six

351
00:16:46,600 --> 00:16:52,509
which is a node in block then the code

352
00:16:49,540 --> 00:16:55,389
part is like the previous one the in

353
00:16:52,509 --> 00:16:57,879
suffix and prefix is obtained to enjoy

354
00:16:55,389 --> 00:16:59,949
to this function the sum of them needs

355
00:16:57,879 --> 00:17:04,480
to be offloaded to pass the check in

356
00:16:59,949 --> 00:17:07,269
like 79 and then the data will be copied

357
00:17:04,480 --> 00:17:09,880
from connects to Z term plus M prefix

358
00:17:07,269 --> 00:17:12,299
with the size and suffix which is very

359
00:17:09,880 --> 00:17:14,649
like the condition of two oh five or six

360
00:17:12,299 --> 00:17:16,959
just like other two vulnerabilities

361
00:17:14,648 --> 00:17:19,299
because at the crest and the size of the

362
00:17:16,959 --> 00:17:21,159
memory copy or controllable we can also

363
00:17:19,299 --> 00:17:23,888
use it to read some raw memory without

364
00:17:21,159 --> 00:17:27,069
assigning such a larger value to the two

365
00:17:23,888 --> 00:17:29,229
variables Austria vulnerabilities can be

366
00:17:27,069 --> 00:17:32,260
modified to leak raw memories so we can

367
00:17:29,230 --> 00:17:34,870
also use this unique address of for

368
00:17:32,260 --> 00:17:37,658
example functions structures global

369
00:17:34,870 --> 00:17:38,860
variables constant variables to bypass a

370
00:17:37,659 --> 00:17:42,770
SAR

371
00:17:38,860 --> 00:17:45,050
and since our target is remote code

372
00:17:42,770 --> 00:17:47,030
execution but lab car has already been

373
00:17:45,050 --> 00:17:49,760
used by a lot of users and there are

374
00:17:47,030 --> 00:17:51,620
codes I traced very quickly to to find a

375
00:17:49,760 --> 00:17:53,750
vulnerable function here are two kind

376
00:17:51,620 --> 00:17:56,360
eyes for finding problems by reading the

377
00:17:53,750 --> 00:17:58,820
code quickly first find the big

378
00:17:56,360 --> 00:18:00,949
functions functions with lots of lines

379
00:17:58,820 --> 00:18:03,679
is not recommended in software

380
00:18:00,950 --> 00:18:05,960
engineering and functions that are too

381
00:18:03,680 --> 00:18:09,530
long should be reflected into a shorter

382
00:18:05,960 --> 00:18:11,720
function fragment surely such large

383
00:18:09,530 --> 00:18:15,010
function is difficult to test and there

384
00:18:11,720 --> 00:18:17,840
will be a lot of attacker service and

385
00:18:15,010 --> 00:18:20,270
then protocol that communicates with

386
00:18:17,840 --> 00:18:22,459
remote machine this is an important

387
00:18:20,270 --> 00:18:24,889
condition for remote attacks but

388
00:18:22,460 --> 00:18:27,200
fortunately most of the functions enable

389
00:18:24,890 --> 00:18:29,810
English car is related to remote

390
00:18:27,200 --> 00:18:32,360
interactions and communicates with a

391
00:18:29,810 --> 00:18:34,669
remote server more than once after

392
00:18:32,360 --> 00:18:37,610
carefully sifting through the protocols

393
00:18:34,670 --> 00:18:42,980
we confirm that and Here I am over HTTP

394
00:18:37,610 --> 00:18:45,379
was what we want to test the use of ntlm

395
00:18:42,980 --> 00:18:47,720
over HTTP protocol authentication is

396
00:18:45,380 --> 00:18:50,360
indicated by an HTTP or suncatcher

397
00:18:47,720 --> 00:18:52,580
scheme and here am the awesome

398
00:18:50,360 --> 00:18:56,990
authentication parameters that is

399
00:18:52,580 --> 00:18:59,449
changed up base64 encoding messages RFC

400
00:18:56,990 --> 00:19:01,610
to system assists has a definition so

401
00:18:59,450 --> 00:19:04,730
here's a simple chart of six-stage

402
00:19:01,610 --> 00:19:06,590
handshake or authentication the client

403
00:19:04,730 --> 00:19:08,960
and the server will communicate many

404
00:19:06,590 --> 00:19:11,689
times please note the three type message

405
00:19:08,960 --> 00:19:16,940
I marked in red are where we have found

406
00:19:11,690 --> 00:19:20,540
one ability seen here's an example the

407
00:19:16,940 --> 00:19:23,600
type 2 message is encoded by base64 and

408
00:19:20,540 --> 00:19:26,450
here's the number of a decoded type 2

409
00:19:23,600 --> 00:19:28,820
message shows the encoded has a typical

410
00:19:26,450 --> 00:19:31,400
form they are grouped into a whole

411
00:19:28,820 --> 00:19:34,129
message in a predefined order for

412
00:19:31,400 --> 00:19:36,290
example this message have a list of 19h

413
00:19:34,130 --> 00:19:38,660
bytes which is represented by the

414
00:19:36,290 --> 00:19:44,420
shorter path short integer

415
00:19:38,660 --> 00:19:46,490
16200 and here are those problems we

416
00:19:44,420 --> 00:19:49,160
have found in lab curve we named them as

417
00:19:46,490 --> 00:19:51,950
TS is the name of another famous

418
00:19:49,160 --> 00:19:55,250
navigator the first one

419
00:19:51,950 --> 00:19:59,779
6h nine zero is a vulnerability in ntlm

420
00:19:55,250 --> 00:20:02,210
type two message it can leak at most 64

421
00:19:59,779 --> 00:20:04,940
kilobytes large memory per request to

422
00:20:02,210 --> 00:20:07,510
attacker the result is very like to

423
00:20:04,940 --> 00:20:11,120
heartbleed but it's a client version and

424
00:20:07,510 --> 00:20:14,779
the second one 382 to is a vulnerability

425
00:20:11,120 --> 00:20:17,840
in NPRM type 3 message to a resulting in

426
00:20:14,779 --> 00:20:20,720
a stack buffer overflow lab course also

427
00:20:17,840 --> 00:20:25,100
wrote in his plot such this is a very

428
00:20:20,720 --> 00:20:28,700
bad security issue let me show you how

429
00:20:25,100 --> 00:20:30,949
this happened first the h9 0 the

430
00:20:28,700 --> 00:20:34,159
vulnerable function is n here M decode

431
00:20:30,950 --> 00:20:37,429
type to target its you score with 13 to

432
00:20:34,159 --> 00:20:40,130
le to read a 32-bit integer from the

433
00:20:37,429 --> 00:20:42,409
type 2 message header then we know we

434
00:20:40,130 --> 00:20:44,990
can set target info offsets with a

435
00:20:42,409 --> 00:20:47,240
larger value and target info lend to a

436
00:20:44,990 --> 00:20:48,679
value which if you add them together an

437
00:20:47,240 --> 00:20:51,169
integer overflow will happen

438
00:20:48,679 --> 00:20:53,899
the overload value is very small and it

439
00:20:51,169 --> 00:20:56,539
will pass the check in line 1 age 5 and

440
00:20:53,899 --> 00:20:59,928
then memory copy will copy data out of

441
00:20:56,539 --> 00:21:02,440
bounds for example if we use value above

442
00:20:59,929 --> 00:21:05,269
it will actually copies data from the

443
00:21:02,440 --> 00:21:08,090
front of wearable buffer in 32-bit

444
00:21:05,269 --> 00:21:09,980
environment and then the data will be

445
00:21:08,090 --> 00:21:13,070
sent to attacker in tapestry message

446
00:21:09,980 --> 00:21:17,779
leaking maximum 64 kilobytes data for

447
00:21:13,070 --> 00:21:20,539
request to attacker and let's go through

448
00:21:17,779 --> 00:21:22,850
the other one 3/8 to to this

449
00:21:20,539 --> 00:21:25,820
vulnerability is located in a big

450
00:21:22,850 --> 00:21:28,908
function named curve of create and he RM

451
00:21:25,820 --> 00:21:30,740
touch 3 message in the beginning this

452
00:21:28,909 --> 00:21:33,470
function declares a lot of variables

453
00:21:30,740 --> 00:21:36,590
instead memory the entire buffer is a

454
00:21:33,470 --> 00:21:40,070
big buffer which has around kilobytes

455
00:21:36,590 --> 00:21:42,830
memory then in life I'm 9 0 the function

456
00:21:40,070 --> 00:21:45,260
tries to read and she responds less from

457
00:21:42,830 --> 00:21:47,870
the type 2 response which is sent from

458
00:21:45,260 --> 00:21:51,139
the server attacker could return a value

459
00:21:47,870 --> 00:21:53,719
bigger than the buffer size to client in

460
00:21:51,139 --> 00:21:56,389
line 7 7 9 this check should check if

461
00:21:53,720 --> 00:21:59,570
the size of the data is bigger than NPR

462
00:21:56,389 --> 00:22:01,549
box remaining size but the in split sign

463
00:21:59,570 --> 00:22:04,879
a sign cast previous a check from

464
00:22:01,549 --> 00:22:06,980
operating correctly and then because and

465
00:22:04,879 --> 00:22:09,500
he responds less is bigger than the

466
00:22:06,980 --> 00:22:12,730
remaining size of n here and path has

467
00:22:09,500 --> 00:22:15,679
here will be a stack buffer overflow

468
00:22:12,730 --> 00:22:17,840
let's take a closer look at this which

469
00:22:15,679 --> 00:22:20,330
is the function that describes the less

470
00:22:17,840 --> 00:22:23,149
field from the tab to message you can

471
00:22:20,330 --> 00:22:25,309
see in test this is a bad habit the code

472
00:22:23,149 --> 00:22:27,799
defines a mathematical operation with

473
00:22:25,309 --> 00:22:30,769
variables in the macro but the macro

474
00:22:27,799 --> 00:22:32,809
looks like a constant I guess if you are

475
00:22:30,769 --> 00:22:35,419
software tester or a developer working

476
00:22:32,809 --> 00:22:38,539
on code review you probably think this

477
00:22:35,419 --> 00:22:41,480
is just a fixed value so ignoring the

478
00:22:38,539 --> 00:22:43,669
potential risk is here if the value is

479
00:22:41,480 --> 00:22:47,110
larger than the buffer it will be the

480
00:22:43,669 --> 00:22:49,879
mistake one and another mistake is

481
00:22:47,110 --> 00:22:52,519
respect to the girl or screed and here

482
00:22:49,879 --> 00:22:54,980
on type story message this check

483
00:22:52,519 --> 00:22:57,260
compares again to unsigned variable in

484
00:22:54,980 --> 00:23:00,139
the matter this matter or simply defines

485
00:22:57,260 --> 00:23:02,000
a number a thousand and 24 well this

486
00:23:00,139 --> 00:23:05,209
value is considered to be a signed

487
00:23:02,000 --> 00:23:07,340
integer in the view of compiler when

488
00:23:05,210 --> 00:23:09,830
unsigned and sine are compared in the

489
00:23:07,340 --> 00:23:12,949
same place some of them must be casted

490
00:23:09,830 --> 00:23:15,830
in order to compare correctly and this

491
00:23:12,950 --> 00:23:19,070
is the problem the compiler prefers the

492
00:23:15,830 --> 00:23:21,439
commerce sign to assign members so if we

493
00:23:19,070 --> 00:23:23,720
have and she responds less greater than

494
00:23:21,440 --> 00:23:26,059
the entire M both sides the result will

495
00:23:23,720 --> 00:23:27,620
be a large unsigned number and it is of

496
00:23:26,059 --> 00:23:32,720
course bigger than the remaining size

497
00:23:27,620 --> 00:23:35,418
and will pass this check here's the

498
00:23:32,720 --> 00:23:37,669
mistake 3 when the code triggers a steak

499
00:23:35,419 --> 00:23:39,440
Buffalo flow the overflowed of orange is

500
00:23:37,669 --> 00:23:42,799
in the middle of a lot of steak

501
00:23:39,440 --> 00:23:45,019
variables also there may be steak

502
00:23:42,799 --> 00:23:48,049
cookies checker could choose not to

503
00:23:45,019 --> 00:23:50,510
overflow that much paths but instead a

504
00:23:48,049 --> 00:23:52,760
rattlesnake variants and control the

505
00:23:50,510 --> 00:23:54,529
flow of the code I have marked the

506
00:23:52,760 --> 00:23:57,200
position where it reaches a buffer

507
00:23:54,529 --> 00:23:59,210
overflow you can see in this big

508
00:23:57,200 --> 00:24:01,760
function there are 18 lines after each

509
00:23:59,210 --> 00:24:04,519
and many of them are operating heap or

510
00:24:01,760 --> 00:24:06,639
stack memory and the operating is based

511
00:24:04,519 --> 00:24:09,169
on the value of those stack variables

512
00:24:06,639 --> 00:24:10,050
that's the reason why I say big function

513
00:24:09,169 --> 00:24:14,030
is never good

514
00:24:10,050 --> 00:24:17,820
coding practice the stick power follow

515
00:24:14,030 --> 00:24:20,580
my chance to a hit Buffalo in 9h three

516
00:24:17,820 --> 00:24:22,860
three based on the inflammation of Kirk

517
00:24:20,580 --> 00:24:24,210
onwards to network because this function

518
00:24:22,860 --> 00:24:27,090
pointer could be overwritten

519
00:24:24,210 --> 00:24:30,150
interpretive programs or leaked raw

520
00:24:27,090 --> 00:24:32,490
memory memory data to attacker by over

521
00:24:30,150 --> 00:24:34,860
18 different stack variables or just

522
00:24:32,490 --> 00:24:39,030
perform an acoustic buffer overflow

523
00:24:34,860 --> 00:24:41,639
together remote code execution okay my

524
00:24:39,030 --> 00:24:43,710
part is over and my partner lesion will

525
00:24:41,640 --> 00:24:47,570
now introduce how to exploit some of

526
00:24:43,710 --> 00:24:47,570
those vulnerabilities thank you

527
00:24:54,309 --> 00:24:59,499
thanks for my partner's introductions

528
00:24:56,979 --> 00:25:04,379
now I will continue with the Partridge

529
00:24:59,499 --> 00:25:08,889
remote exploitations of veterans and did

530
00:25:04,379 --> 00:25:12,519
Diaz first let us introduce how to

531
00:25:08,889 --> 00:25:16,029
remote exploit materials when abilities

532
00:25:12,519 --> 00:25:16,419
the possible effects products are list

533
00:25:16,029 --> 00:25:18,999
below

534
00:25:16,419 --> 00:25:21,340
Chrome browser develop develop a

535
00:25:18,999 --> 00:25:24,879
standard chrome use enjoy every piece

536
00:25:21,340 --> 00:25:27,459
test used a webview smashed devices

537
00:25:24,879 --> 00:25:30,039
using Chrome and ChromeOS why do we

538
00:25:27,460 --> 00:25:33,179
choose the Google home as our target

539
00:25:30,039 --> 00:25:37,359
because Google home is a smash speakers

540
00:25:33,179 --> 00:25:40,719
devices I read a lot Maki share and use

541
00:25:37,359 --> 00:25:47,739
Chrome OS next preview introduce how to

542
00:25:40,719 --> 00:25:49,450
use matrons to attack the pooka home in

543
00:25:47,739 --> 00:25:51,969
these sections we will show you how to

544
00:25:49,450 --> 00:25:54,549
extend the attack surface of cocoa home

545
00:25:51,969 --> 00:25:57,879
first let's introduce the basic

546
00:25:54,549 --> 00:26:01,629
knowledge about cast protocol koukos

547
00:25:57,879 --> 00:26:04,449
arouse developer to tavera cut AV p2m

548
00:26:01,629 --> 00:26:08,109
public it to application stop in

549
00:26:04,450 --> 00:26:11,879
generals low-cut AVP include senders and

550
00:26:08,109 --> 00:26:15,820
receivers center devices may be mobile

551
00:26:11,879 --> 00:26:19,539
devices of pc running from receiver is

552
00:26:15,820 --> 00:26:22,418
koukos IOT device such as cocoa home the

553
00:26:19,539 --> 00:26:25,389
entire architectures as is as follows

554
00:26:22,419 --> 00:26:28,869
the usual assess sender application URL

555
00:26:25,389 --> 00:26:31,508
and sender applications used the cat

556
00:26:28,869 --> 00:26:34,029
protocol to fire the receiver in the

557
00:26:31,509 --> 00:26:37,089
land when the receiver receiver is

558
00:26:34,029 --> 00:26:40,629
discarded the center's applications will

559
00:26:37,089 --> 00:26:44,349
communicate directly with the receiver

560
00:26:40,629 --> 00:26:48,309
application on the receiver was the we

561
00:26:44,349 --> 00:26:51,218
are a cat protocol in detail google

562
00:26:48,309 --> 00:26:53,440
homes will prove the rails of each

563
00:26:51,219 --> 00:26:56,529
receiver application according to the

564
00:26:53,440 --> 00:26:59,849
caste IV VI T and our scepter receiver

565
00:26:56,529 --> 00:27:03,460
application through the Chrome renders

566
00:26:59,849 --> 00:27:06,149
after our attempts we come we fight that

567
00:27:03,460 --> 00:27:11,160
cat the protocol we all have the

568
00:27:06,150 --> 00:27:14,070
security risk including one lithography

569
00:27:11,160 --> 00:27:18,150
can be any webpage if our Cuban our

570
00:27:14,070 --> 00:27:22,320
receiver ivv is a webpage with malicious

571
00:27:18,150 --> 00:27:25,380
pedals Google home we are still visit to

572
00:27:22,320 --> 00:27:28,260
the cast IPP in IPV stores maybe

573
00:27:25,380 --> 00:27:31,560
Mauritius at night Google plates Casa

574
00:27:28,260 --> 00:27:35,370
Viva stores there is no much strict

575
00:27:31,560 --> 00:27:38,070
security audios magazines send a tourist

576
00:27:35,370 --> 00:27:41,459
centers can directly triggered cutter

577
00:27:38,070 --> 00:27:43,740
protocol when we may even require no

578
00:27:41,460 --> 00:27:46,530
user interactions based on these

579
00:27:43,740 --> 00:27:51,560
security risk we can cover and attacks

580
00:27:46,530 --> 00:27:53,910
on a home into a tab on our browser

581
00:27:51,560 --> 00:27:56,730
let's take a look at our son's picture

582
00:27:53,910 --> 00:27:59,370
specific stats the attacker is

583
00:27:56,730 --> 00:28:01,500
registered as caste worker caste

584
00:27:59,370 --> 00:28:03,899
application can be development and

585
00:28:01,500 --> 00:28:06,570
distributed when you publish an

586
00:28:03,900 --> 00:28:09,330
application you need to specifically

587
00:28:06,570 --> 00:28:12,929
receive a URL however Google does not

588
00:28:09,330 --> 00:28:17,179
audio links and cut a PPS only require

589
00:28:12,930 --> 00:28:20,490
links to allege fears when we can

590
00:28:17,180 --> 00:28:24,030
specific is as the webpage with any

591
00:28:20,490 --> 00:28:27,180
context remotely trigger Google home to

592
00:28:24,030 --> 00:28:30,210
assess any webpage if the attackers and

593
00:28:27,180 --> 00:28:33,450
Google homes are in LAN the attackers

594
00:28:30,210 --> 00:28:37,080
can also send the cat protocol such as

595
00:28:33,450 --> 00:28:39,870
the lunch a VP request this request view

596
00:28:37,080 --> 00:28:43,379
directory trigger Google home set to the

597
00:28:39,870 --> 00:28:46,139
cast receiver URL to Maiden master words

598
00:28:43,380 --> 00:28:49,980
if the route launchers in the victim's

599
00:28:46,140 --> 00:28:52,260
home turn on the UPnP post fallings the

600
00:28:49,980 --> 00:28:54,950
attack can also complete a remote island

601
00:28:52,260 --> 00:28:56,220
attacks on the Internet the attacker

602
00:28:54,950 --> 00:28:58,950
modified

603
00:28:56,220 --> 00:29:03,060
cattle receiver URL web page to militia

604
00:28:58,950 --> 00:29:07,470
page length Google Mail may assist in

605
00:29:03,060 --> 00:29:10,020
random after visiting the page now let's

606
00:29:07,470 --> 00:29:11,730
review the following were abilities the

607
00:29:10,020 --> 00:29:15,120
keys to the availability

608
00:29:11,730 --> 00:29:19,060
triggers is how to use the inserted data

609
00:29:15,120 --> 00:29:21,820
to control a wearable used by our memory

610
00:29:19,060 --> 00:29:25,149
function the worry about here is

611
00:29:21,820 --> 00:29:28,200
including Pinos a Pinot an italics and

612
00:29:25,150 --> 00:29:31,900
least the inserted data is as follows

613
00:29:28,200 --> 00:29:35,260
first the entire data is stored in a

614
00:29:31,900 --> 00:29:37,930
buffers or P note a we can control the

615
00:29:35,260 --> 00:29:42,100
size of the Pino a buffer by modifying

616
00:29:37,930 --> 00:29:45,850
the lens of the inserted data in HIPAA

617
00:29:42,100 --> 00:29:49,899
from Chase we are able to allow P not ay

618
00:29:45,850 --> 00:29:53,110
to the appreciate areas to cover the

619
00:29:49,900 --> 00:29:56,250
target memory in this data's the

620
00:29:53,110 --> 00:30:01,229
Orangery colors in dedicated exercise

621
00:29:56,250 --> 00:30:04,720
Pino and Alex from left right which is

622
00:30:01,230 --> 00:30:07,570
we are in type undocking is used to

623
00:30:04,720 --> 00:30:09,880
control the length to be above row P

624
00:30:07,570 --> 00:30:13,030
note on which is the obsess of the

625
00:30:09,880 --> 00:30:16,540
overwrite ins memory areas the green

626
00:30:13,030 --> 00:30:19,330
part is a table status which can be used

627
00:30:16,540 --> 00:30:24,220
for our period or will be read I will be

628
00:30:19,330 --> 00:30:26,230
rid the next sections of video introduce

629
00:30:24,220 --> 00:30:30,070
the ideas of using these four abilities

630
00:30:26,230 --> 00:30:32,500
we expect to find some function hunters

631
00:30:30,070 --> 00:30:35,919
that can be used on the hip when

632
00:30:32,500 --> 00:30:39,520
creating FG has three tables the top

633
00:30:35,920 --> 00:30:43,630
Aziza is created by t4 and top one is 34

634
00:30:39,520 --> 00:30:47,110
is the simple token is earth as show in

635
00:30:43,630 --> 00:30:50,140
the following pictures simple to reason

636
00:30:47,110 --> 00:30:54,750
is the structures on the hip pure it is

637
00:30:50,140 --> 00:30:58,600
member spaced points to the escrow trees

638
00:30:54,750 --> 00:31:02,410
total eastern structures the members P

639
00:30:58,600 --> 00:31:04,510
models of the skewer as accurate

640
00:31:02,410 --> 00:31:07,270
priesthood is a structure points to the

641
00:31:04,510 --> 00:31:09,310
tabular models the tokenism models can

642
00:31:07,270 --> 00:31:13,720
taste an interesting Quebec function

643
00:31:09,310 --> 00:31:14,409
such as as create or ask open or

644
00:31:13,720 --> 00:31:17,830
Morgan's

645
00:31:14,410 --> 00:31:19,810
when inserted fgi three tables the X

646
00:31:17,830 --> 00:31:23,169
open Quebec functions will be triggered

647
00:31:19,810 --> 00:31:26,280
if the function chest of X open can be

648
00:31:23,170 --> 00:31:30,750
modified to an HP at least address and

649
00:31:26,280 --> 00:31:32,210
peace it can be rejected how to use this

650
00:31:30,750 --> 00:31:34,730
function

651
00:31:32,210 --> 00:31:37,700
for PC attacking here two convictions

652
00:31:34,730 --> 00:31:40,490
need to be met first after the hit of

653
00:31:37,700 --> 00:31:46,129
afro is necessary to be able to operate

654
00:31:40,490 --> 00:31:48,230
a fgh treatable in addictions the hatake

655
00:31:46,129 --> 00:31:48,830
need to be complete before the memory is

656
00:31:48,230 --> 00:31:51,740
released

657
00:31:48,830 --> 00:31:53,960
otherwise the crash will be interrupted

658
00:31:51,740 --> 00:31:56,779
by analyzing the rods coast of the

659
00:31:53,960 --> 00:31:59,179
memory copy to free we found an

660
00:31:56,779 --> 00:32:03,639
interesting function which for fun as

661
00:31:59,179 --> 00:32:06,499
seekers update operation before with

662
00:32:03,639 --> 00:32:10,070
resisting the memory I've shown in blue

663
00:32:06,499 --> 00:32:13,129
tackle co-panelist we can use the extra

664
00:32:10,070 --> 00:32:16,100
trigger to propanol fgh three typos

665
00:32:13,129 --> 00:32:19,129
insert operation before the escrow

666
00:32:16,100 --> 00:32:24,469
update operations and free memory sounds

667
00:32:19,129 --> 00:32:27,830
triggering the ex open Quebec's the next

668
00:32:24,470 --> 00:32:30,019
stage to made a memory they ask the SQL

669
00:32:27,830 --> 00:32:34,249
Lodge coast of the cache shell used

670
00:32:30,019 --> 00:32:38,409
Gmail app a funeral memory layout idea

671
00:32:34,249 --> 00:32:42,249
at Sephora first by creating multiple

672
00:32:38,409 --> 00:32:45,559
fgh three tables we will create multiple

673
00:32:42,249 --> 00:32:49,460
multiple sample tokenism structures

674
00:32:45,559 --> 00:32:52,100
short preview personally create fgs

675
00:32:49,460 --> 00:32:54,639
three tables at appreciate time the

676
00:32:52,100 --> 00:32:57,399
sample table structure will be free

677
00:32:54,639 --> 00:33:00,428
reassigning pillows of the same size as

678
00:32:57,399 --> 00:33:04,070
some protocol users it has a high

679
00:33:00,429 --> 00:33:09,369
probability that pillows will be allowed

680
00:33:04,070 --> 00:33:12,980
to the previous relationship changed or

681
00:33:09,369 --> 00:33:16,879
previous simple tokenism structures so

682
00:33:12,980 --> 00:33:20,059
our pillows has a great trench to our

683
00:33:16,879 --> 00:33:24,559
rising the sample design structure of

684
00:33:20,059 --> 00:33:26,570
the existing FGL three tables with a SQL

685
00:33:24,559 --> 00:33:29,899
triggers that perform an operation of

686
00:33:26,570 --> 00:33:32,869
the FCI tree typo before the freeze guys

687
00:33:29,899 --> 00:33:35,889
and change test talk totally the model

688
00:33:32,869 --> 00:33:39,408
to cover function will be triggered when

689
00:33:35,889 --> 00:33:43,428
we have the ability to attack the PCs

690
00:33:39,409 --> 00:33:45,550
and control the r0 we only need to be

691
00:33:43,429 --> 00:33:48,240
able to list information and by

692
00:33:45,550 --> 00:33:51,610
tear up the previous section also

693
00:33:48,240 --> 00:33:55,570
introduced we can try to adjust the end

694
00:33:51,610 --> 00:33:58,750
of leaks and P note I am distant memory

695
00:33:55,570 --> 00:34:00,850
after him we need to destroy the

696
00:33:58,750 --> 00:34:02,740
following two types of address the

697
00:34:00,850 --> 00:34:05,110
keynote address or the cottage shell by

698
00:34:02,740 --> 00:34:08,610
some researchers and upset calculator

699
00:34:05,110 --> 00:34:11,830
required our peak areas leaning the

700
00:34:08,610 --> 00:34:15,190
address of blood heap according to Optus

701
00:34:11,830 --> 00:34:18,449
chest and upset the probabilities of

702
00:34:15,190 --> 00:34:22,320
calculating the address of the his spray

703
00:34:18,449 --> 00:34:25,239
the last is the history and our peace

704
00:34:22,320 --> 00:34:28,570
after these two states we can as in the

705
00:34:25,239 --> 00:34:31,449
Chrome Google home surrenders Kasia is a

706
00:34:28,570 --> 00:34:34,360
large binary programs that contain many

707
00:34:31,449 --> 00:34:36,549
of the available our peak occurs so the

708
00:34:34,360 --> 00:34:42,070
Albuquerque is using Casa is most stable

709
00:34:36,550 --> 00:34:45,040
and convenience in the matrix on the

710
00:34:42,070 --> 00:34:48,280
right the red light

711
00:34:45,040 --> 00:34:51,699
master master his price units with face

712
00:34:48,280 --> 00:34:57,040
token eases models and our PK gives the

713
00:34:51,699 --> 00:34:59,140
acts on X creates and opens address in

714
00:34:57,040 --> 00:35:02,110
the face total is a model structure will

715
00:34:59,140 --> 00:35:05,080
be authorize the stack papers address

716
00:35:02,110 --> 00:35:08,170
the brutalize must our face simple

717
00:35:05,080 --> 00:35:10,830
chocolate structures when of fth three

718
00:35:08,170 --> 00:35:14,050
typos operation can be triggers as

719
00:35:10,830 --> 00:35:17,440
karai's will began militia

720
00:35:14,050 --> 00:35:21,150
x open through the structures of simple

721
00:35:17,440 --> 00:35:23,650
collisions and then i see above is the

722
00:35:21,150 --> 00:35:25,840
south korea of our hace in the catcher

723
00:35:23,650 --> 00:35:28,450
shell the rig's box on the last show

724
00:35:25,840 --> 00:35:29,980
that's the register we can control yeah

725
00:35:28,450 --> 00:35:32,020
0:11

726
00:35:29,980 --> 00:35:36,130
the function address is read from our

727
00:35:32,020 --> 00:35:38,980
evans and finally go to the prx

728
00:35:36,130 --> 00:35:41,800
lens as a result we can we have been

729
00:35:38,980 --> 00:35:43,510
able to hijack the pieces the pictures

730
00:35:41,800 --> 00:35:47,070
on the right show that the result of our

731
00:35:43,510 --> 00:35:50,130
shock holes we educated exactly the

732
00:35:47,070 --> 00:35:53,380
JavaScript codes for fetch urls

733
00:35:50,130 --> 00:35:58,100
navigators a revenant in the x-- e x--

734
00:35:53,380 --> 00:36:02,030
feed and a top at gmail called memory

735
00:35:58,100 --> 00:36:05,089
the the indicators every his name is

736
00:36:02,030 --> 00:36:09,890
free only and this next case but our

737
00:36:05,090 --> 00:36:12,770
shall change the IPP name to a let's

738
00:36:09,890 --> 00:36:15,680
look at an actual text sentence they are

739
00:36:12,770 --> 00:36:18,290
to two types of the attack vectors that

740
00:36:15,680 --> 00:36:21,109
attack Google home remotely one was

741
00:36:18,290 --> 00:36:24,980
damaged need to in the land first the

742
00:36:21,110 --> 00:36:27,920
attackers is low located in the land the

743
00:36:24,980 --> 00:36:30,910
attacker send the large EVP once command

744
00:36:27,920 --> 00:36:34,510
through the CAD protocol and Google home

745
00:36:30,910 --> 00:36:37,250
through the leaf of HTML on the

746
00:36:34,510 --> 00:36:40,460
applications Maquis according to the

747
00:36:37,250 --> 00:36:42,740
ibid and locate at these times the list

748
00:36:40,460 --> 00:36:46,370
stays can be obtained by the attackers

749
00:36:42,740 --> 00:36:49,609
second the attackers then large APB ID

750
00:36:46,370 --> 00:36:54,200
choose commands at this time google

751
00:36:49,610 --> 00:36:56,780
homes lost exp talk HTML so that's the

752
00:36:54,200 --> 00:36:59,270
hace happened the entire process does

753
00:36:56,780 --> 00:37:01,490
not required user interactions in the

754
00:36:59,270 --> 00:37:04,400
other two cents you don't need to be

755
00:37:01,490 --> 00:37:07,729
understand land under sentence to start

756
00:37:04,400 --> 00:37:10,790
the attacks the attacker inducts the

757
00:37:07,730 --> 00:37:14,690
victors to assess the URL of the sender

758
00:37:10,790 --> 00:37:18,410
application those Krampus will prevent

759
00:37:14,690 --> 00:37:21,140
the users to select device and users

760
00:37:18,410 --> 00:37:24,259
will start the attack process after

761
00:37:21,140 --> 00:37:26,690
complications we can scan the neck words

762
00:37:24,260 --> 00:37:30,520
on the rotors tests may have UPnP

763
00:37:26,690 --> 00:37:33,490
sportings try to launch our demo attacks

764
00:37:30,520 --> 00:37:36,920
the previous sections introduce the

765
00:37:33,490 --> 00:37:39,350
exploit order materials and lands video

766
00:37:36,920 --> 00:37:41,930
introduced free model of the developer

767
00:37:39,350 --> 00:37:44,870
stance and how to exploit the kiosk for

768
00:37:41,930 --> 00:37:47,330
abilities in these models developers may

769
00:37:44,870 --> 00:37:51,020
also be targeted order attacks the

770
00:37:47,330 --> 00:37:53,600
disease order of servers used by the

771
00:37:51,020 --> 00:37:57,700
developer may stall taste relate to the

772
00:37:53,600 --> 00:38:00,860
companies if the developer is attracted

773
00:37:57,700 --> 00:38:04,580
there are many at lab may be inspect

774
00:38:00,860 --> 00:38:07,190
case the necessary truth test developer

775
00:38:04,580 --> 00:38:11,000
use in developments may have security

776
00:38:07,190 --> 00:38:13,690
risk top proxy servers use the

777
00:38:11,000 --> 00:38:16,730
just in development may also be attacked

778
00:38:13,690 --> 00:38:19,280
networks relate to the past libraries

779
00:38:16,730 --> 00:38:22,190
will be an attack surface and so in the

780
00:38:19,280 --> 00:38:25,370
future blows if the developer is

781
00:38:22,190 --> 00:38:27,740
attacked by an attacker or ARP DNS

782
00:38:25,370 --> 00:38:29,450
spoofing asserting the militia service

783
00:38:27,740 --> 00:38:31,879
or the Internet

784
00:38:29,450 --> 00:38:35,509
land it may be attacked by the attackers

785
00:38:31,880 --> 00:38:38,810
in the internal network environment if

786
00:38:35,510 --> 00:38:41,540
the proxy servers frequency assess

787
00:38:38,810 --> 00:38:45,290
abused by the developer is convinced

788
00:38:41,540 --> 00:38:47,330
control land is also possibility to

789
00:38:45,290 --> 00:38:50,990
lunch and attacked from the proxy

790
00:38:47,330 --> 00:38:54,890
servers to the developer let's reveal

791
00:38:50,990 --> 00:38:58,700
details about the earth by constructing

792
00:38:54,890 --> 00:39:01,390
a militia MTR type to message th can

793
00:38:58,700 --> 00:39:05,509
leaks informations and stay buffer

794
00:39:01,390 --> 00:39:07,879
overall Estelle throws on left first the

795
00:39:05,510 --> 00:39:10,790
keys to triggering the entire well

796
00:39:07,880 --> 00:39:14,390
ability is the server is not important

797
00:39:10,790 --> 00:39:17,810
whether where the clients aggregations

798
00:39:14,390 --> 00:39:20,450
require is correct or not we only need

799
00:39:17,810 --> 00:39:23,840
to face a malicious servers and after

800
00:39:20,450 --> 00:39:27,470
receiving the clients entire request we

801
00:39:23,840 --> 00:39:29,900
can launch an attack in increase and

802
00:39:27,470 --> 00:39:34,129
apertures they have some requests meant

803
00:39:29,900 --> 00:39:36,560
for opening and TL applications curse

804
00:39:34,130 --> 00:39:43,760
suppose an tiem aggregation by the four

805
00:39:36,560 --> 00:39:48,170
wise lepers require a Greeson and erm or

806
00:39:43,760 --> 00:39:51,080
any to support entire equation the SIP

807
00:39:48,170 --> 00:39:53,210
is lots of specific attacks send is as

808
00:39:51,080 --> 00:39:56,420
follow provides that the entire

809
00:39:53,210 --> 00:39:59,680
aggregations request is enabled once the

810
00:39:56,420 --> 00:40:03,020
developers use key to prove the

811
00:39:59,680 --> 00:40:07,310
repositories for examples the documents

812
00:40:03,020 --> 00:40:13,340
specific malicious repositories address

813
00:40:07,310 --> 00:40:16,549
to use you use curse of relay on left or

814
00:40:13,340 --> 00:40:20,330
severe to accept project server if the

815
00:40:16,550 --> 00:40:23,750
projects of servers is malicious it can

816
00:40:20,330 --> 00:40:24,270
weaken it can be attacked trees the text

817
00:40:23,750 --> 00:40:26,910
pH

818
00:40:24,270 --> 00:40:30,150
fire is placed on the servers on the

819
00:40:26,910 --> 00:40:32,910
attacker uploaded web show the Phe file

820
00:40:30,150 --> 00:40:37,320
will not be detected by the detection

821
00:40:32,910 --> 00:40:41,129
servers but it will be can't back to us

822
00:40:37,320 --> 00:40:43,530
of the servers and so in the pictures on

823
00:40:41,130 --> 00:40:45,780
the right if the Klan's has already

824
00:40:43,530 --> 00:40:48,750
triggered the MGL request in the three

825
00:40:45,780 --> 00:40:51,540
sense lens only the malicious server

826
00:40:48,750 --> 00:40:54,630
needs to be returned a muffin

827
00:40:51,540 --> 00:40:56,550
until type two message length cleanse

828
00:40:54,630 --> 00:41:00,030
memory may be leased to the attacker

829
00:40:56,550 --> 00:41:05,310
from the MTR m-type trees message it can

830
00:41:00,030 --> 00:41:09,360
even lead to KO is extra sections this

831
00:41:05,310 --> 00:41:12,660
is the polite effect of harlots

832
00:41:09,360 --> 00:41:15,060
but there are some precondition that's

833
00:41:12,660 --> 00:41:17,549
required to control the developer to

834
00:41:15,060 --> 00:41:20,549
assert a link this slide shows the

835
00:41:17,550 --> 00:41:23,340
militia and trm type twos message

836
00:41:20,550 --> 00:41:27,860
written by the servers this is the

837
00:41:23,340 --> 00:41:31,380
militia pillows in code by base64 the

838
00:41:27,860 --> 00:41:34,530
specifics Realty is follow the entire

839
00:41:31,380 --> 00:41:37,350
pillow is the very simple is a basic

840
00:41:34,530 --> 00:41:40,620
message of an tiem type to the original

841
00:41:37,350 --> 00:41:43,529
the origin numbers correspond to the

842
00:41:40,620 --> 00:41:46,380
targets in Portland and Bruce number

843
00:41:43,530 --> 00:41:49,590
correspond to the top even for upset by

844
00:41:46,380 --> 00:41:52,230
controlling these tools were lost the

845
00:41:49,590 --> 00:41:54,750
data will be sent to the attackers when

846
00:41:52,230 --> 00:41:59,870
the clans replayed to the MTM ties

847
00:41:54,750 --> 00:42:03,510
freest message let's take a look at a

848
00:41:59,870 --> 00:42:07,410
client's hot bread let's take

849
00:42:03,510 --> 00:42:10,710
kissed and first example the local hot I

850
00:42:07,410 --> 00:42:14,879
P is the server that has been controlled

851
00:42:10,710 --> 00:42:16,190
by an attackers the attacker display a

852
00:42:14,880 --> 00:42:20,790
militia ante ow

853
00:42:16,190 --> 00:42:23,850
MGR M servers when the developers use

854
00:42:20,790 --> 00:42:27,029
kiss or curse to accept the net worth

855
00:42:23,850 --> 00:42:31,259
for example execute the following git

856
00:42:27,030 --> 00:42:33,680
command and curse commands they will

857
00:42:31,260 --> 00:42:35,400
trigger the process of mt l M

858
00:42:33,680 --> 00:42:38,190
aggregations

859
00:42:35,400 --> 00:42:42,569
it may be attacked by the attackers from

860
00:42:38,190 --> 00:42:45,240
the two screenshots you can see the kids

861
00:42:42,569 --> 00:42:48,480
and Kurtis return the data in their

862
00:42:45,240 --> 00:42:50,899
memory to the servers that takest can

863
00:42:48,480 --> 00:42:54,150
obtain a developer memory information by

864
00:42:50,900 --> 00:42:59,880
inducting the development to executed

865
00:42:54,150 --> 00:43:02,579
above to command in addiction to the hot

866
00:42:59,880 --> 00:43:06,240
place of the clients Lea is actually as

867
00:43:02,579 --> 00:43:09,299
a sense that may cause the hot plate of

868
00:43:06,240 --> 00:43:13,529
the server's we use a patch and PHP as a

869
00:43:09,299 --> 00:43:16,170
Adamo if one if on one of our servers

870
00:43:13,529 --> 00:43:18,690
the attackers apps load of app shell the

871
00:43:16,170 --> 00:43:23,220
web showed us not to malicious behaviors

872
00:43:18,690 --> 00:43:25,980
just a Java program that you just used

873
00:43:23,220 --> 00:43:27,868
level to a certain networks so it is

874
00:43:25,980 --> 00:43:31,529
possible not it said do not

875
00:43:27,869 --> 00:43:34,230
telepathically security so spared so it

876
00:43:31,529 --> 00:43:37,559
will always exist on the servers for the

877
00:43:34,230 --> 00:43:42,089
long term the screenshot below is our

878
00:43:37,559 --> 00:43:45,000
PHP code with except attacker malicious

879
00:43:42,089 --> 00:43:47,369
empty our own servers were ill cursed

880
00:43:45,000 --> 00:43:50,730
the attacker can seek release the memory

881
00:43:47,369 --> 00:43:55,559
to remote entire M servers by assessing

882
00:43:50,730 --> 00:44:01,020
the PHP in addictions is even is even

883
00:43:55,559 --> 00:44:04,140
possible to hace conclusion here is the

884
00:44:01,020 --> 00:44:06,990
tan lights or the currents we have we

885
00:44:04,140 --> 00:44:10,069
have report land in November stand is

886
00:44:06,990 --> 00:44:14,279
quicker is fixed by it collides and

887
00:44:10,069 --> 00:44:16,349
ChromeOS in the December's in December

888
00:44:14,279 --> 00:44:20,460
school decided to get a total ten

889
00:44:16,349 --> 00:44:24,450
thousands reverse for this patch or or

890
00:44:20,460 --> 00:44:27,630
abilities and I have a enhancement ties

891
00:44:24,450 --> 00:44:30,328
the defense in defrag this allowing

892
00:44:27,630 --> 00:44:34,039
modifying shadow tables from untrusted

893
00:44:30,329 --> 00:44:36,839
source for backwards compatibility is

894
00:44:34,039 --> 00:44:40,559
default of in SQLite

895
00:44:36,839 --> 00:44:43,200
so you are using SQLite with FGS

896
00:44:40,559 --> 00:44:45,240
you may want to enable this one to

897
00:44:43,200 --> 00:44:48,810
prevent an attacker from modifying your

898
00:44:45,240 --> 00:44:51,479
shadow tables but the kunio is the

899
00:44:48,810 --> 00:44:54,049
if Iran in from from committee in

900
00:44:51,480 --> 00:44:54,050
November

901
00:44:54,380 --> 00:45:02,630
here the thumbless artist is terrific

902
00:44:57,630 --> 00:45:06,540
and realized by lepers in two week also

903
00:45:02,630 --> 00:45:10,710
we have not notified us censored to urge

904
00:45:06,540 --> 00:45:13,740
wondered disabled whatever ghost FGS

905
00:45:10,710 --> 00:45:17,160
trees or web stickers before the patch

906
00:45:13,740 --> 00:45:21,509
come out and we have not secured 80

907
00:45:17,160 --> 00:45:24,600
teams of apples enters Facebook's - talk

908
00:45:21,510 --> 00:45:27,900
about how to fix the problem of how to

909
00:45:24,600 --> 00:45:32,819
mitigate the phrase in a sense of their

910
00:45:27,900 --> 00:45:35,760
products here's some security device for

911
00:45:32,820 --> 00:45:38,840
the software developers once enhanced

912
00:45:35,760 --> 00:45:42,900
your systems with the newly available

913
00:45:38,840 --> 00:45:47,310
defense-in-depth mechanisms in in time

914
00:45:42,900 --> 00:45:50,250
to keep your surpassed libraries up

915
00:45:47,310 --> 00:45:53,100
today trees improved choruses of

916
00:45:50,250 --> 00:45:57,000
security or the other things and testing

917
00:45:53,100 --> 00:45:57,870
on the server libraries' 4/4 introduced

918
00:45:57,000 --> 00:46:00,180
Security's

919
00:45:57,870 --> 00:46:04,220
specifications into developments and

920
00:46:00,180 --> 00:46:04,339
tested thank you

921
00:46:04,220 --> 00:46:08,120
[Applause]

922
00:46:04,340 --> 00:46:11,580
[Music]

923
00:46:08,120 --> 00:46:11,580
[Applause]

924
00:46:12,839 --> 00:46:47,049
so any questions yeah we can talk about

925
00:46:36,430 --> 00:46:49,230
each nature okay okay that's all thank

926
00:46:47,050 --> 00:46:49,230
you

