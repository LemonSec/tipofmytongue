1
00:00:00,030 --> 00:00:05,299
good afternoon welcome to the past last

2
00:00:03,120 --> 00:00:10,139
child abusing kubernetes default in

3
00:00:05,299 --> 00:00:14,309
Mandalay Bay Lagoon from jkl with Ian

4
00:00:10,139 --> 00:00:16,650
Coldwater and Davi coolie before we

5
00:00:14,309 --> 00:00:18,630
begin I have a few brief notes

6
00:00:16,650 --> 00:00:20,459
stop stop by the business hole located

7
00:00:18,630 --> 00:00:22,948
in Mandalay Bay Oceanside and shoreline

8
00:00:20,460 --> 00:00:24,720
ballrooms on level 2 during the day in

9
00:00:22,949 --> 00:00:27,150
for the Welcome Reception at 5:30 p.m.

10
00:00:24,720 --> 00:00:29,970
the blackhat Arsenal is in a business

11
00:00:27,150 --> 00:00:32,339
hall on level 2 and join us for the pony

12
00:00:29,970 --> 00:00:34,980
Awards in Laguna Niguel at 6:30 p.m.

13
00:00:32,340 --> 00:00:37,020
it's in this room thank you for putting

14
00:00:34,980 --> 00:00:38,430
your phones on vibrate as well it makes

15
00:00:37,020 --> 00:00:40,020
this easier for the rest of us to ignore

16
00:00:38,430 --> 00:00:43,410
the ringing in while you wait for your

17
00:00:40,020 --> 00:00:46,230
voicemail to pick it up in Rocky it's

18
00:00:43,410 --> 00:00:50,370
all yours thank you thank you everybody

19
00:00:46,230 --> 00:00:54,029
hear me okay awesome before we started I

20
00:00:50,370 --> 00:00:55,649
wanted to just thank blackhat and all of

21
00:00:54,030 --> 00:00:57,600
the organizers and all of therapy board

22
00:00:55,649 --> 00:00:59,730
the people who put in the work for all

23
00:00:57,600 --> 00:01:02,879
of us to be here today that's awesome

24
00:00:59,730 --> 00:01:03,930
and thank all of you for being here and

25
00:01:02,879 --> 00:01:08,509
taking time out of your day to be here

26
00:01:03,930 --> 00:01:10,650
with us my name is Ian Coldwater and

27
00:01:08,510 --> 00:01:12,720
this talk is called the path less

28
00:01:10,650 --> 00:01:14,939
traveled of using kubernetes defaults if

29
00:01:12,720 --> 00:01:16,320
you are here to hear about something

30
00:01:14,939 --> 00:01:17,669
other than kubernetes you're in the

31
00:01:16,320 --> 00:01:20,429
wrong room and that's all right we can

32
00:01:17,670 --> 00:01:22,710
hang out anyway I'm a lead platform

33
00:01:20,430 --> 00:01:24,180
security engineer at Heroku and I

34
00:01:22,710 --> 00:01:25,500
specialized in hacking and hardening

35
00:01:24,180 --> 00:01:27,420
kubernetes containers and cloud

36
00:01:25,500 --> 00:01:28,950
infrastructure before that I was an

37
00:01:27,420 --> 00:01:31,079
independent penetration testing

38
00:01:28,950 --> 00:01:33,240
consultant I'm focusing on the same

39
00:01:31,079 --> 00:01:35,639
my name is Duffy Cooley I'm a staff

40
00:01:33,240 --> 00:01:37,649
cloud native architect at VMware and I

41
00:01:35,640 --> 00:01:39,150
focus on helping enterprises find

42
00:01:37,650 --> 00:01:41,850
success with VMware and this kind of

43
00:01:39,150 --> 00:01:44,610
include new cloud native regime I'm a

44
00:01:41,850 --> 00:01:46,770
part of a weekly video blog

45
00:01:44,610 --> 00:01:49,530
that's called TGI K you can find it

46
00:01:46,770 --> 00:01:50,850
online at TGA TDI K dot IO and if you're

47
00:01:49,530 --> 00:01:52,649
interested in the kubernetes pace I

48
00:01:50,850 --> 00:01:55,320
highly recommend that you review what's

49
00:01:52,649 --> 00:01:57,960
there we're really excited to be here

50
00:01:55,320 --> 00:01:59,398
talking with you today so the first

51
00:01:57,960 --> 00:02:01,649
thing we want to say is check your

52
00:01:59,399 --> 00:02:04,320
assumptions if you have assumed that

53
00:02:01,649 --> 00:02:06,090
kubernetes is secure by default or that

54
00:02:04,320 --> 00:02:08,280
applications deployed on kubernetes are

55
00:02:06,090 --> 00:02:12,420
secure by default we recommend that you

56
00:02:08,280 --> 00:02:15,480
don't because they aren't and

57
00:02:12,420 --> 00:02:17,099
when kubernetes gets left on out of the

58
00:02:15,480 --> 00:02:18,000
box you can do all kinds of wild things

59
00:02:17,099 --> 00:02:21,420
with it which is what we're going to

60
00:02:18,000 --> 00:02:22,800
show you today so but before that let's

61
00:02:21,420 --> 00:02:24,420
talk about kubernetes defaults because

62
00:02:22,800 --> 00:02:27,390
it's a little bit of a misnomer like the

63
00:02:24,420 --> 00:02:30,390
cake is a lie here there is no singular

64
00:02:27,390 --> 00:02:32,690
set of kubernetes defaults it varies

65
00:02:30,390 --> 00:02:36,179
widely depending on public clouds

66
00:02:32,690 --> 00:02:38,280
distributions just out of the box and

67
00:02:36,180 --> 00:02:39,959
every single cluster is probably going

68
00:02:38,280 --> 00:02:42,330
to be a little bit different according

69
00:02:39,959 --> 00:02:44,459
to how it gets configured so that attack

70
00:02:42,330 --> 00:02:46,470
surface doesn't always look the same but

71
00:02:44,459 --> 00:02:48,569
generally speaking we can speak to

72
00:02:46,470 --> 00:02:49,920
kubernetes as a system how it works and

73
00:02:48,569 --> 00:02:51,869
how to attack that so that's what we're

74
00:02:49,920 --> 00:02:53,309
going to do so I work on a project

75
00:02:51,870 --> 00:02:54,930
called cube ATM which is actually trying

76
00:02:53,310 --> 00:02:56,489
to rationalize some of those defaults

77
00:02:54,930 --> 00:02:58,260
and provide reasonable defaults for

78
00:02:56,489 --> 00:03:00,000
bringing you to the place where you have

79
00:02:58,260 --> 00:03:01,500
infrastructure or machines and networks

80
00:03:00,000 --> 00:03:03,000
already stood up and you're trying to

81
00:03:01,500 --> 00:03:06,510
get to a fully configured kubernetes

82
00:03:03,000 --> 00:03:09,420
cluster cube EDM does actually provide a

83
00:03:06,510 --> 00:03:11,399
reasonable set of default security

84
00:03:09,420 --> 00:03:12,958
options and we're probably gonna talk

85
00:03:11,400 --> 00:03:14,459
through a little bit of that but all of

86
00:03:12,959 --> 00:03:15,930
the demonstration environments that

87
00:03:14,459 --> 00:03:17,609
we're gonna be showing off today in this

88
00:03:15,930 --> 00:03:19,530
talk are actually brought up using a

89
00:03:17,609 --> 00:03:21,690
project called kind which stands for

90
00:03:19,530 --> 00:03:24,269
kubernetes and docker and it leverages

91
00:03:21,690 --> 00:03:25,859
cube ATM to stand up the cluster so in

92
00:03:24,269 --> 00:03:27,390
our resources lens you can find a lot

93
00:03:25,859 --> 00:03:30,180
more information about what we're doing

94
00:03:27,390 --> 00:03:32,040
here it's worth noting that we're

95
00:03:30,180 --> 00:03:33,630
attacking this cluster that has been set

96
00:03:32,040 --> 00:03:35,910
up with the same reasonable and

97
00:03:33,630 --> 00:03:38,040
relatively secure set of defaults actual

98
00:03:35,910 --> 00:03:40,109
defaults that are not defined by coab

99
00:03:38,040 --> 00:03:44,130
Adium are usually worse so keep that in

100
00:03:40,109 --> 00:03:46,680
mind so what is super days so kubernetes

101
00:03:44,130 --> 00:03:48,120
is a container orchestration system it

102
00:03:46,680 --> 00:03:51,390
described a class of system that helps

103
00:03:48,120 --> 00:03:52,709
us manage the lifecycle and and in the

104
00:03:51,390 --> 00:03:56,279
complex architectures of some of these

105
00:03:52,709 --> 00:03:58,109
new cloud native applications as a cloud

106
00:03:56,280 --> 00:04:01,230
as a container Orchestrator it's

107
00:03:58,109 --> 00:04:02,519
actually pretty successful most people

108
00:04:01,230 --> 00:04:04,260
who are actually looking at kubernetes

109
00:04:02,519 --> 00:04:05,700
are looking for two things the first is

110
00:04:04,260 --> 00:04:07,350
actually a better efficiency through

111
00:04:05,700 --> 00:04:08,790
like API models so you can actually

112
00:04:07,350 --> 00:04:10,799
deploy some of these complex

113
00:04:08,790 --> 00:04:12,090
applications and and figure out how they

114
00:04:10,799 --> 00:04:13,709
will connect and secure them and that

115
00:04:12,090 --> 00:04:15,660
sort of stuff through a single API and

116
00:04:13,709 --> 00:04:18,000
the second is actually bin packing or

117
00:04:15,660 --> 00:04:19,440
better efficiency of those machines that

118
00:04:18,000 --> 00:04:20,760
they deploy in some of the more

119
00:04:19,440 --> 00:04:23,010
expensive clouds that we see out there

120
00:04:20,760 --> 00:04:24,360
when we're talking about kubernetes as

121
00:04:23,010 --> 00:04:26,879
an attack surface kerbin

122
00:04:24,360 --> 00:04:29,849
really means two things it means it's an

123
00:04:26,879 --> 00:04:32,129
application with its associated set of

124
00:04:29,849 --> 00:04:34,860
binaries that can be end the application

125
00:04:32,129 --> 00:04:37,710
can be configured and it's also an API

126
00:04:34,860 --> 00:04:39,210
based platform defined by yellow so both

127
00:04:37,710 --> 00:04:40,378
of those things can be attached in

128
00:04:39,210 --> 00:04:43,530
different ways and we're going to cover

129
00:04:40,379 --> 00:04:46,379
them both so how does kubernetes work

130
00:04:43,530 --> 00:04:50,309
let's talk about what's in there and how

131
00:04:46,379 --> 00:04:53,129
those parts move so this diagram you can

132
00:04:50,310 --> 00:04:54,870
actually see all of the the actual parts

133
00:04:53,129 --> 00:04:57,240
that make up the application that is

134
00:04:54,870 --> 00:05:00,150
coop niggas right in the left hand side

135
00:04:57,240 --> 00:05:01,919
box you see the you see Etsy D and se D

136
00:05:00,150 --> 00:05:03,599
represents a key value store where all

137
00:05:01,919 --> 00:05:05,609
of the state for the cluster is kept

138
00:05:03,599 --> 00:05:07,500
this is where we would hold things like

139
00:05:05,610 --> 00:05:09,599
config maps or configuration files that

140
00:05:07,500 --> 00:05:11,580
will be associated with pods when

141
00:05:09,599 --> 00:05:13,259
they're brought up in the middle just to

142
00:05:11,580 --> 00:05:16,050
the left of the Etsy D pod or e at the

143
00:05:13,259 --> 00:05:17,879
ED CD image we have the API server and

144
00:05:16,050 --> 00:05:20,550
you can see by the plethora of error

145
00:05:17,879 --> 00:05:22,529
arrows that everything talks to the API

146
00:05:20,550 --> 00:05:24,750
server the people on the outside the

147
00:05:22,529 --> 00:05:26,879
services on the inside everything talks

148
00:05:24,750 --> 00:05:28,650
to that API server and that the API

149
00:05:26,879 --> 00:05:31,919
server is the only thing that talks to

150
00:05:28,650 --> 00:05:33,330
the - Etsy D the API server does kind of

151
00:05:31,919 --> 00:05:34,830
what you would expect an API server to

152
00:05:33,330 --> 00:05:37,169
do it's going to handle authentication

153
00:05:34,830 --> 00:05:39,330
and authorization it's going to take

154
00:05:37,169 --> 00:05:41,219
care of invalidating all of the

155
00:05:39,330 --> 00:05:43,740
manifests or objects that get submitted

156
00:05:41,219 --> 00:05:46,919
to the API and it's gonna handle that

157
00:05:43,740 --> 00:05:48,569
sort of stuff if we look below the API

158
00:05:46,919 --> 00:05:50,849
server we see the controller manager and

159
00:05:48,569 --> 00:05:52,830
the scheduler the scheduler does kind of

160
00:05:50,849 --> 00:05:55,620
like what you would expect it to do its

161
00:05:52,830 --> 00:05:57,750
job is literally to associate a pod or a

162
00:05:55,620 --> 00:05:59,129
pod manifest somewhere to get more into

163
00:05:57,750 --> 00:06:02,189
like what that is and see some examples

164
00:05:59,129 --> 00:06:03,750
with a specific node or cubelet and the

165
00:06:02,189 --> 00:06:05,669
controller managers a bit more complex

166
00:06:03,750 --> 00:06:07,680
the controller managers responsibility

167
00:06:05,669 --> 00:06:09,508
is actually to run a number of different

168
00:06:07,680 --> 00:06:11,460
control loops that are each responsible

169
00:06:09,509 --> 00:06:13,529
for breaking down the higher level of

170
00:06:11,460 --> 00:06:15,419
abstractions inside of kubernetes down

171
00:06:13,529 --> 00:06:16,650
to the lower level ones so if you've

172
00:06:15,419 --> 00:06:18,389
played with kubernetes at all you would

173
00:06:16,650 --> 00:06:19,739
have made a deployment the controller

174
00:06:18,389 --> 00:06:22,439
manager is partly responsible for

175
00:06:19,740 --> 00:06:23,400
turning that into pods on the right we

176
00:06:22,439 --> 00:06:25,469
see two cubelets

177
00:06:23,400 --> 00:06:27,750
or two worker nodes and the worker node

178
00:06:25,469 --> 00:06:30,120
is running that agent the cubelet and

179
00:06:27,750 --> 00:06:31,919
that cubelet is responsible for keeping

180
00:06:30,120 --> 00:06:34,289
track of all of the work associated with

181
00:06:31,919 --> 00:06:35,849
that particular node and starting up and

182
00:06:34,289 --> 00:06:36,509
managing the lifecycle of containers

183
00:06:35,849 --> 00:06:38,229
directly

184
00:06:36,509 --> 00:06:39,880
so the cubelet when it posed

185
00:06:38,230 --> 00:06:41,590
Manifest it's actually going to interact

186
00:06:39,880 --> 00:06:44,140
with docker to create those containers

187
00:06:41,590 --> 00:06:46,299
that make up that workflow as an

188
00:06:44,140 --> 00:06:47,830
attacker let's take another look at this

189
00:06:46,300 --> 00:06:49,840
series of kubernetes components because

190
00:06:47,830 --> 00:06:51,310
we're gonna be talking a lot about how

191
00:06:49,840 --> 00:06:52,239
kubernetes works today because it's

192
00:06:51,310 --> 00:06:53,950
really important to be able to

193
00:06:52,240 --> 00:06:55,180
understand how it works on a deep system

194
00:06:53,950 --> 00:07:00,130
level to be able to understand how

195
00:06:55,180 --> 00:07:02,020
attack it well so at CD we have this key

196
00:07:00,130 --> 00:07:03,460
value store that contains all of the

197
00:07:02,020 --> 00:07:05,380
state and all of the information about

198
00:07:03,460 --> 00:07:07,270
what's happening in the cluster as an

199
00:07:05,380 --> 00:07:10,810
attacker at CD is a high value target

200
00:07:07,270 --> 00:07:12,340
because it contains interesting

201
00:07:10,810 --> 00:07:16,140
information that I might want to exit

202
00:07:12,340 --> 00:07:18,460
rate or steal such as cloud metadata and

203
00:07:16,140 --> 00:07:21,010
credentials things like that potentially

204
00:07:18,460 --> 00:07:22,870
it also is worth noting that Etsy D

205
00:07:21,010 --> 00:07:25,390
because Corinna DS is a loosely coupled

206
00:07:22,870 --> 00:07:27,280
distributed system at CD is writable

207
00:07:25,390 --> 00:07:27,580
it's not just read-only it works both

208
00:07:27,280 --> 00:07:30,609
ways

209
00:07:27,580 --> 00:07:32,859
and so because Etsy D is the final word

210
00:07:30,610 --> 00:07:35,350
on like what is happening the state in

211
00:07:32,860 --> 00:07:37,660
the cluster you can write to it and then

212
00:07:35,350 --> 00:07:40,210
you can modify State which can give you

213
00:07:37,660 --> 00:07:42,280
all kinds of options as an attacker the

214
00:07:40,210 --> 00:07:44,440
API server is the highest value target

215
00:07:42,280 --> 00:07:45,940
as an attacker because the API server as

216
00:07:44,440 --> 00:07:48,219
you can see either touches everything

217
00:07:45,940 --> 00:07:51,630
where everything touches it if you can

218
00:07:48,220 --> 00:07:55,240
get control over the API server which is

219
00:07:51,630 --> 00:07:58,150
you know what's going to dictate what is

220
00:07:55,240 --> 00:07:59,680
allowed to be you know what kind of

221
00:07:58,150 --> 00:08:01,750
traffic is allowed what's happening is

222
00:07:59,680 --> 00:08:03,460
going to be like making the orders for

223
00:08:01,750 --> 00:08:05,560
what's going on there then you can get

224
00:08:03,460 --> 00:08:08,830
access to pretty much all of the

225
00:08:05,560 --> 00:08:10,930
components and you're able to get a fair

226
00:08:08,830 --> 00:08:14,020
amount of control like a lot of it over

227
00:08:10,930 --> 00:08:17,620
the cluster so going over to the worker

228
00:08:14,020 --> 00:08:20,409
nodes the cubelet is incredibly valuable

229
00:08:17,620 --> 00:08:23,320
as an exploit target because the cubelet

230
00:08:20,410 --> 00:08:24,640
is what executes all of the decisions

231
00:08:23,320 --> 00:08:28,540
that are being made with your

232
00:08:24,640 --> 00:08:29,620
configuration and and is able to control

233
00:08:28,540 --> 00:08:30,670
the state of the cluster and what's in

234
00:08:29,620 --> 00:08:32,710
it

235
00:08:30,670 --> 00:08:35,380
the cubelet has its own separate API

236
00:08:32,710 --> 00:08:37,840
that interacts with the API server if

237
00:08:35,380 --> 00:08:40,179
you can get access to the cubelet you

238
00:08:37,840 --> 00:08:42,190
can do things like create users you can

239
00:08:40,179 --> 00:08:44,228
create service account roles and you can

240
00:08:42,190 --> 00:08:45,670
change around authorization stuff so

241
00:08:44,229 --> 00:08:47,980
that you can get that you could also

242
00:08:45,670 --> 00:08:49,510
affect what's in the cluster and you

243
00:08:47,980 --> 00:08:50,950
have a lot of administrative access if

244
00:08:49,510 --> 00:08:51,710
you can get access to the queue but the

245
00:08:50,950 --> 00:08:55,400
cubelet has

246
00:08:51,710 --> 00:08:57,470
Doralee is the subject of a lot of the

247
00:08:55,400 --> 00:08:58,670
more high-profile attacks that have

248
00:08:57,470 --> 00:09:01,310
happened historically with kubernetes

249
00:08:58,670 --> 00:09:06,680
like Tesla and ones that it happened

250
00:09:01,310 --> 00:09:08,839
over time so now we're going to move on

251
00:09:06,680 --> 00:09:10,370
to the kubernetes api part of it alright

252
00:09:08,840 --> 00:09:12,140
before we do that I want to just touch

253
00:09:10,370 --> 00:09:13,880
on the fact that like there is a lot of

254
00:09:12,140 --> 00:09:16,010
configuration in between all those

255
00:09:13,880 --> 00:09:17,480
pieces securing the communications with

256
00:09:16,010 --> 00:09:20,210
TLS and all about stuff we don't have

257
00:09:17,480 --> 00:09:21,860
time for that in this talk but suffice

258
00:09:20,210 --> 00:09:23,150
to say that diagram is very high level

259
00:09:21,860 --> 00:09:24,770
compared to what's actually out there

260
00:09:23,150 --> 00:09:27,020
there's also a lot of misconfigurations

261
00:09:24,770 --> 00:09:29,030
yes all of those components all of which

262
00:09:27,020 --> 00:09:30,890
can be valuable for attackers so the

263
00:09:29,030 --> 00:09:32,329
kubernetes api is generally accessed

264
00:09:30,890 --> 00:09:34,220
through a number of different means it's

265
00:09:32,330 --> 00:09:36,020
a restful api you can interact with it

266
00:09:34,220 --> 00:09:37,880
directly with curl if you want there is

267
00:09:36,020 --> 00:09:40,310
actually a cube cube kettle is a binary

268
00:09:37,880 --> 00:09:42,050
that you can download as part of a

269
00:09:40,310 --> 00:09:45,170
distribution of kubernetes and that cube

270
00:09:42,050 --> 00:09:47,569
kettle binary track acts as a local

271
00:09:45,170 --> 00:09:49,310
command-line tool that you can use to

272
00:09:47,570 --> 00:09:51,290
interact with that kubernetes api

273
00:09:49,310 --> 00:09:52,910
directly and it'll take care of your

274
00:09:51,290 --> 00:09:56,390
authorization and authentication using

275
00:09:52,910 --> 00:09:59,030
your config kettle is also known as to

276
00:09:56,390 --> 00:10:00,949
control coop CTL and crew cuddle and

277
00:09:59,030 --> 00:10:02,030
when I talk about coop CTL I'm talking

278
00:10:00,950 --> 00:10:03,620
about the same thing and that's

279
00:10:02,030 --> 00:10:05,449
important to note because otherwise it's

280
00:10:03,620 --> 00:10:06,830
confusing think about it like given gyp

281
00:10:05,450 --> 00:10:08,810
there are other so there are some other

282
00:10:06,830 --> 00:10:10,190
superpowers that cube kettle has one of

283
00:10:08,810 --> 00:10:12,439
the ones I like to tell people about as

284
00:10:10,190 --> 00:10:15,410
few Kittel explain coop it will explain

285
00:10:12,440 --> 00:10:17,000
enables you to actually explore the

286
00:10:15,410 --> 00:10:18,709
entire API so if you want to know what

287
00:10:17,000 --> 00:10:20,360
all of the fields that are defined

288
00:10:18,710 --> 00:10:23,210
within a particular pod or deployment

289
00:10:20,360 --> 00:10:24,950
manifest are or what that default so for

290
00:10:23,210 --> 00:10:26,660
those things are you can use cube kettle

291
00:10:24,950 --> 00:10:29,270
explained to interact with that API and

292
00:10:26,660 --> 00:10:30,829
look at it finally the last command here

293
00:10:29,270 --> 00:10:32,090
is basically just showing off queue

294
00:10:30,830 --> 00:10:34,790
petal apply which is how most people

295
00:10:32,090 --> 00:10:36,500
interact with it as an attacker if you

296
00:10:34,790 --> 00:10:39,500
can socially engineer somebody to coop

297
00:10:36,500 --> 00:10:40,850
CTL apply your lovely helpful yellow

298
00:10:39,500 --> 00:10:42,500
file that will show them how to use

299
00:10:40,850 --> 00:10:45,290
things or whatever it is that you can

300
00:10:42,500 --> 00:10:47,030
convince them to do they run it they

301
00:10:45,290 --> 00:10:48,380
don't look at it it's yours

302
00:10:47,030 --> 00:10:50,390
and you can do whatever you want with it

303
00:10:48,380 --> 00:10:53,360
so configuration this code can be a

304
00:10:50,390 --> 00:10:55,130
pretty powerful thing on all ends so how

305
00:10:53,360 --> 00:10:56,390
do those moving parts fit together like

306
00:10:55,130 --> 00:10:59,240
what exactly is happening there end of a

307
00:10:56,390 --> 00:11:01,069
hood so you talk about kubernetes being

308
00:10:59,240 --> 00:11:02,360
a loosely coupled system and in this

309
00:11:01,070 --> 00:11:05,100
diagram we're going to show kind of like

310
00:11:02,360 --> 00:11:06,360
the life cycle of a pod being created

311
00:11:05,100 --> 00:11:07,950
so in the beginning here we have a

312
00:11:06,360 --> 00:11:09,900
person probably making use of cube

313
00:11:07,950 --> 00:11:12,090
kettles applying a pod manifest to the

314
00:11:09,900 --> 00:11:14,220
API server the API server is going to

315
00:11:12,090 --> 00:11:16,200
introspect that and understand is this

316
00:11:14,220 --> 00:11:18,150
person who is authenticating do they

317
00:11:16,200 --> 00:11:20,460
have a reasonable credential are they do

318
00:11:18,150 --> 00:11:22,530
they have authorization to create this

319
00:11:20,460 --> 00:11:23,850
resource within the cluster according to

320
00:11:22,530 --> 00:11:24,959
the namespace that it's being put in all

321
00:11:23,850 --> 00:11:26,490
that other stuff it's also going to

322
00:11:24,960 --> 00:11:29,760
validate that you have all the fields

323
00:11:26,490 --> 00:11:31,440
necessary to define what a pod is once

324
00:11:29,760 --> 00:11:33,030
it gets through that entire process it's

325
00:11:31,440 --> 00:11:35,190
actually going to persist that object in

326
00:11:33,030 --> 00:11:36,959
the key value store in SU D and then

327
00:11:35,190 --> 00:11:38,730
it's gonna report back pod created

328
00:11:36,960 --> 00:11:41,190
you're done the API server is now

329
00:11:38,730 --> 00:11:42,840
finished with its work the next part

330
00:11:41,190 --> 00:11:45,060
that happens is that the scheduler who

331
00:11:42,840 --> 00:11:47,220
is also watching the API server gets

332
00:11:45,060 --> 00:11:48,900
informed that there is now a new pod but

333
00:11:47,220 --> 00:11:51,300
it is not associated with an underlying

334
00:11:48,900 --> 00:11:53,160
node and so it does its scheduling thing

335
00:11:51,300 --> 00:11:55,920
it just figures out which node it wants

336
00:11:53,160 --> 00:11:57,420
to schedule that pod on based on some

337
00:11:55,920 --> 00:11:59,699
hints and things inside of the pot spec

338
00:11:57,420 --> 00:12:02,939
and it will actually schedule that on a

339
00:11:59,700 --> 00:12:05,580
node and persist basically another field

340
00:12:02,940 --> 00:12:07,260
into that pod spec called node name back

341
00:12:05,580 --> 00:12:09,450
to that object and the key value stored

342
00:12:07,260 --> 00:12:12,180
at sea in in the API server and then

343
00:12:09,450 --> 00:12:13,320
back to a CD the next thing we have is

344
00:12:12,180 --> 00:12:14,520
the cubelet this is the one that's

345
00:12:13,320 --> 00:12:16,350
actually doing the heavy lifting

346
00:12:14,520 --> 00:12:18,000
I call this out because it's interesting

347
00:12:16,350 --> 00:12:20,580
we think about a pod as two different

348
00:12:18,000 --> 00:12:21,900
things one is a manifest basically just

349
00:12:20,580 --> 00:12:24,000
metadata describing what we want to

350
00:12:21,900 --> 00:12:25,890
deploy and the other is a set of running

351
00:12:24,000 --> 00:12:27,540
containers or processes sitting on a

352
00:12:25,890 --> 00:12:29,160
node somewhere so in this case we're

353
00:12:27,540 --> 00:12:30,750
talking about the cubelet pulling down

354
00:12:29,160 --> 00:12:33,180
that manifest and setting about the work

355
00:12:30,750 --> 00:12:34,770
of creating those containers it does

356
00:12:33,180 --> 00:12:36,569
that by calling out to your container

357
00:12:34,770 --> 00:12:38,100
runtime could be docker container d

358
00:12:36,570 --> 00:12:39,960
there are a bunch of them out there

359
00:12:38,100 --> 00:12:41,550
it also will connect a network and do a

360
00:12:39,960 --> 00:12:44,370
lot of the other stuff necessary for the

361
00:12:41,550 --> 00:12:45,959
lifecycle of that pod once it and it

362
00:12:44,370 --> 00:12:47,490
will report back to the api server

363
00:12:45,960 --> 00:12:49,230
status you know i'm downloading the

364
00:12:47,490 --> 00:12:51,150
image i've started the container all

365
00:12:49,230 --> 00:12:53,130
these things are happening and it will

366
00:12:51,150 --> 00:12:55,980
continue to inform you where it as where

367
00:12:53,130 --> 00:12:57,480
it is in that process so as an attacker

368
00:12:55,980 --> 00:12:59,460
let's take another look at this moving

369
00:12:57,480 --> 00:13:01,170
parts diagram and let's figure out

370
00:12:59,460 --> 00:13:04,200
what's happening there that it could be

371
00:13:01,170 --> 00:13:07,949
potentially interesting to us so the API

372
00:13:04,200 --> 00:13:09,540
server as you can see does a lot of the

373
00:13:07,950 --> 00:13:12,060
kind of moving back and forth here and

374
00:13:09,540 --> 00:13:13,319
the API server is responsible for things

375
00:13:12,060 --> 00:13:16,800
like authorization and authentication

376
00:13:13,320 --> 00:13:18,630
and routing CVE 2018 one zero zero two

377
00:13:16,800 --> 00:13:23,010
one zero five which came out last

378
00:13:18,630 --> 00:13:26,250
December was a server-side request

379
00:13:23,010 --> 00:13:28,950
forgery where no else oh my god okay

380
00:13:26,250 --> 00:13:33,120
what that was was attackers could send a

381
00:13:28,950 --> 00:13:34,590
specially crafted request and that said

382
00:13:33,120 --> 00:13:36,240
connection upgrade and because they

383
00:13:34,590 --> 00:13:37,589
weren't malla dating for error codes it

384
00:13:36,240 --> 00:13:39,690
just opened a WebSocket

385
00:13:37,589 --> 00:13:42,300
whether or not it was correct and if you

386
00:13:39,690 --> 00:13:44,190
could communicate directly with the

387
00:13:42,300 --> 00:13:45,959
people it and the backend while

388
00:13:44,190 --> 00:13:48,660
bypassing the API servers authentication

389
00:13:45,960 --> 00:13:50,190
and authorization entirely which was

390
00:13:48,660 --> 00:13:51,510
pretty nasty and pretty easily mitigated

391
00:13:50,190 --> 00:13:53,850
as it turned out because all you needed

392
00:13:51,510 --> 00:13:56,189
to do is validate for error codes so

393
00:13:53,850 --> 00:13:58,080
that's one like way historically if you

394
00:13:56,190 --> 00:14:00,450
look at that how at eckers have been

395
00:13:58,080 --> 00:14:01,770
able to attack the API server another

396
00:14:00,450 --> 00:14:03,360
thing that we can do is you may have

397
00:14:01,770 --> 00:14:05,460
noticed that in our components diagram

398
00:14:03,360 --> 00:14:07,470
as an attacker I didn't actually mention

399
00:14:05,460 --> 00:14:09,900
the controller manager or scheduler at

400
00:14:07,470 --> 00:14:12,540
all mostly because for the most part

401
00:14:09,900 --> 00:14:14,490
it's irrelevant to me except that you

402
00:14:12,540 --> 00:14:16,650
can bypass it by directly scheduling a

403
00:14:14,490 --> 00:14:18,839
pod and if you can by pets if you can

404
00:14:16,650 --> 00:14:19,949
directly schedule a pod on a node you

405
00:14:18,839 --> 00:14:22,170
might be able to do some interesting

406
00:14:19,950 --> 00:14:24,030
things with it especially if for example

407
00:14:22,170 --> 00:14:26,640
your cubelet is scheduled on the same

408
00:14:24,030 --> 00:14:30,270
pod as the underlying node which is the

409
00:14:26,640 --> 00:14:32,220
default for kubb ATM so we've had a lot

410
00:14:30,270 --> 00:14:34,530
of kubernetes words here anybody want to

411
00:14:32,220 --> 00:14:34,830
see how to attack some stuff yeah let's

412
00:14:34,530 --> 00:14:39,300
do it

413
00:14:34,830 --> 00:14:40,560
all right Felipe so in this

414
00:14:39,300 --> 00:14:42,780
demonstration we're gonna we're gonna

415
00:14:40,560 --> 00:14:45,599
deploy an sed client that's

416
00:14:42,780 --> 00:14:47,459
pre-configured to access sed running on

417
00:14:45,600 --> 00:14:49,500
a control plane note now as we said cube

418
00:14:47,460 --> 00:14:51,990
ATM puts a cubelet on that control plane

419
00:14:49,500 --> 00:14:54,630
node and so we can use this direct

420
00:14:51,990 --> 00:14:57,180
scheduling trick to actually attach to

421
00:14:54,630 --> 00:14:59,580
that so what we're gonna do here is

422
00:14:57,180 --> 00:15:01,260
we're going to direct schedule our pod

423
00:14:59,580 --> 00:15:03,240
on the underlying node we're going to

424
00:15:01,260 --> 00:15:06,510
dump at CD get secrets from it and do

425
00:15:03,240 --> 00:15:08,130
some fun stuff so this is a pod manifest

426
00:15:06,510 --> 00:15:09,990
and it's pretty verbose it's got a lot

427
00:15:08,130 --> 00:15:11,070
of information in it but basically we're

428
00:15:09,990 --> 00:15:12,450
telling that we're gonna create a kind

429
00:15:11,070 --> 00:15:15,660
pod and then all the rest of this

430
00:15:12,450 --> 00:15:17,250
represents the body of that post we're

431
00:15:15,660 --> 00:15:18,630
describing the image that we want to use

432
00:15:17,250 --> 00:15:20,070
for the sit for this we're just going to

433
00:15:18,630 --> 00:15:21,930
use the same entity image that is

434
00:15:20,070 --> 00:15:23,730
actually being used to run a CD inside

435
00:15:21,930 --> 00:15:26,579
the cluster because it actually also has

436
00:15:23,730 --> 00:15:28,260
the Etsy dica CLI command line tool

437
00:15:26,579 --> 00:15:29,459
we're providing some environment

438
00:15:28,260 --> 00:15:31,150
variables that are actually going to pre

439
00:15:29,459 --> 00:15:32,680
configure a CD for us

440
00:15:31,150 --> 00:15:34,660
so we don't actually have to pass a

441
00:15:32,680 --> 00:15:37,599
bunch of command command-line arguments

442
00:15:34,660 --> 00:15:39,699
to Etsy DK CTL and then we're also going

443
00:15:37,600 --> 00:15:41,770
to mount in the certificates that we

444
00:15:39,700 --> 00:15:43,980
need to be able to authenticate to Etsy

445
00:15:41,770 --> 00:15:48,189
D using host paths a very powerful

446
00:15:43,980 --> 00:15:49,810
capability of kubernetes and then we

447
00:15:48,190 --> 00:15:51,100
also have host network and the reason

448
00:15:49,810 --> 00:15:53,349
we're doing host network is because we

449
00:15:51,100 --> 00:15:56,140
need to basically access that local host

450
00:15:53,350 --> 00:15:59,790
address and so we need to be a 16 the

451
00:15:56,140 --> 00:15:59,790
host network to be able to achieve that

452
00:16:01,980 --> 00:16:09,010
let's go ahead and deploy that now I've

453
00:16:06,850 --> 00:16:12,070
used this tool pretty extensively to

454
00:16:09,010 --> 00:16:13,870
actually interact with to interact with

455
00:16:12,070 --> 00:16:15,610
sed in a troubleshooting fashion like

456
00:16:13,870 --> 00:16:17,610
finally to remove a member or understand

457
00:16:15,610 --> 00:16:22,620
performance or see what the status of

458
00:16:17,610 --> 00:16:22,620
public of the sed cluster is directly

459
00:16:23,910 --> 00:16:28,719
but there's other stuff we could do so

460
00:16:26,650 --> 00:16:30,340
other things we might be able to do as I

461
00:16:28,720 --> 00:16:31,480
said we could maybe try to see if

462
00:16:30,340 --> 00:16:32,800
there's any kind of interesting secrets

463
00:16:31,480 --> 00:16:36,000
or credentials in there that might do

464
00:16:32,800 --> 00:16:39,130
anything for us so let's take a look

465
00:16:36,000 --> 00:16:41,020
well okay we've got all of the secrets

466
00:16:39,130 --> 00:16:42,850
in there those are broken down by

467
00:16:41,020 --> 00:16:44,800
namespace you'll see you know ku public

468
00:16:42,850 --> 00:16:46,750
tube system coupe system as it sounds

469
00:16:44,800 --> 00:16:49,449
like is the namespace that has system

470
00:16:46,750 --> 00:16:51,400
access note that there is one

471
00:16:49,450 --> 00:16:53,050
particularly interesting one in here

472
00:16:51,400 --> 00:16:55,360
called cluster roll aggregation

473
00:16:53,050 --> 00:16:57,459
controller cluster roll aggregation

474
00:16:55,360 --> 00:17:00,640
controller in kubernetes by default to

475
00:16:57,460 --> 00:17:02,680
this day allows complete administrative

476
00:17:00,640 --> 00:17:04,660
access to the cluster to default or by

477
00:17:02,680 --> 00:17:06,669
default so if we can get access to the

478
00:17:04,660 --> 00:17:08,200
token for example for cluster roll

479
00:17:06,670 --> 00:17:09,700
aggregation controller we can

480
00:17:08,200 --> 00:17:12,100
authenticate with that token and have

481
00:17:09,700 --> 00:17:12,819
complete control over the cluster so

482
00:17:12,099 --> 00:17:16,480
let's do that

483
00:17:12,819 --> 00:17:20,470
let's grab that token there's your token

484
00:17:16,480 --> 00:17:25,209
if we use a tool called this came out in

485
00:17:20,470 --> 00:17:28,209
kubernetes 1.13 poop CTL can't I - -

486
00:17:25,209 --> 00:17:30,160
list this was the best thing as a pen

487
00:17:28,209 --> 00:17:32,470
tester because before that happened we

488
00:17:30,160 --> 00:17:34,600
would have to manually list out like do

489
00:17:32,470 --> 00:17:36,490
every single call to say if we had

490
00:17:34,600 --> 00:17:38,169
permissions to do it which was as you

491
00:17:36,490 --> 00:17:41,050
perhaps imagine really annoying it took

492
00:17:38,170 --> 00:17:42,670
forever but kubernetes made it so much

493
00:17:41,050 --> 00:17:44,139
easier for us by just automating our

494
00:17:42,670 --> 00:17:45,790
enumeration process for

495
00:17:44,140 --> 00:17:47,080
so now we can just do that and see all

496
00:17:45,790 --> 00:17:48,879
of the permissions that we have on my

497
00:17:47,080 --> 00:17:52,270
cluster just like that so let's try that

498
00:17:48,880 --> 00:17:54,610
with this Nokia fuel we got oh we have a

499
00:17:52,270 --> 00:17:58,210
wild card we have access to everything

500
00:17:54,610 --> 00:18:01,389
so we grab that token we can identikit

501
00:17:58,210 --> 00:18:02,770
with it it's ours game over you'll find

502
00:18:01,390 --> 00:18:04,330
that a lot of kubernetes clusters or

503
00:18:02,770 --> 00:18:06,610
maybe not using TLS between the

504
00:18:04,330 --> 00:18:08,559
components or that you can actually get

505
00:18:06,610 --> 00:18:10,570
a hold of if they run cubelet directly

506
00:18:08,559 --> 00:18:11,770
on a control point note that you have

507
00:18:10,570 --> 00:18:18,700
that access to be able to do this stuff

508
00:18:11,770 --> 00:18:20,440
so some time on takeaways here users can

509
00:18:18,700 --> 00:18:25,480
create pods that have wild permissions

510
00:18:20,440 --> 00:18:27,309
by default tube ADM schedules the

511
00:18:25,480 --> 00:18:29,350
couplet directly on the underlying node

512
00:18:27,309 --> 00:18:32,500
which you ought not to be runs it on

513
00:18:29,350 --> 00:18:34,899
that node which you shouldn't do and as

514
00:18:32,500 --> 00:18:37,150
an attacker if you can grab that token

515
00:18:34,900 --> 00:18:39,309
for that particular role you can take it

516
00:18:37,150 --> 00:18:40,780
over really easily and the other two

517
00:18:39,309 --> 00:18:42,639
pieces of takeaway here I think they're

518
00:18:40,780 --> 00:18:43,870
important is that people frequently

519
00:18:42,640 --> 00:18:46,020
think that when you start exploring

520
00:18:43,870 --> 00:18:48,639
kubernetes that you know being able to

521
00:18:46,020 --> 00:18:49,179
to isolate nodes with labels or that

522
00:18:48,640 --> 00:18:51,010
sort of thing

523
00:18:49,179 --> 00:18:53,169
can be thought of as a security boundary

524
00:18:51,010 --> 00:18:55,179
and that's clearly not the case right in

525
00:18:53,169 --> 00:18:56,710
this case what we're doing is directly

526
00:18:55,179 --> 00:18:58,630
scheduling a pod and that means if the

527
00:18:56,710 --> 00:18:59,860
scheduler never sees it and because of

528
00:18:58,630 --> 00:19:00,880
that you can't assume that the

529
00:18:59,860 --> 00:19:03,129
schedulers ever are going to be a

530
00:19:00,880 --> 00:19:05,530
security boundary the last one is that

531
00:19:03,130 --> 00:19:08,080
namespace isolation is not enough if I

532
00:19:05,530 --> 00:19:09,399
have access to the underlying host and

533
00:19:08,080 --> 00:19:11,500
have access to that underlying host

534
00:19:09,400 --> 00:19:15,750
regardless of what pods associated with

535
00:19:11,500 --> 00:19:18,309
what namespaces are in to mitigate them

536
00:19:15,750 --> 00:19:19,570
so we mentioned host path and we're

537
00:19:18,309 --> 00:19:22,210
gonna go into host path a little farther

538
00:19:19,570 --> 00:19:24,389
because host path is wild house path is

539
00:19:22,210 --> 00:19:26,890
so wild that we named this talk after it

540
00:19:24,390 --> 00:19:29,169
the kubernetes documentation describes

541
00:19:26,890 --> 00:19:31,510
host path as there is a screenshot that

542
00:19:29,169 --> 00:19:33,820
is from that site a powerful escape

543
00:19:31,510 --> 00:19:35,919
hatch they're not kidding it is an

544
00:19:33,820 --> 00:19:37,980
incredibly powerful escape hatch you can

545
00:19:35,919 --> 00:19:40,690
escape all kinds of things with it and

546
00:19:37,980 --> 00:19:43,480
there are so many options for what you

547
00:19:40,690 --> 00:19:45,190
can do if you pin volume mount the host

548
00:19:43,480 --> 00:19:47,590
and be able to have that kind of control

549
00:19:45,190 --> 00:19:49,299
in relation to the host so we're gonna

550
00:19:47,590 --> 00:19:50,740
keep exploring that because there's a

551
00:19:49,299 --> 00:19:52,590
lot happening here and we had more

552
00:19:50,740 --> 00:19:56,380
exploits here than we had space for so

553
00:19:52,590 --> 00:19:57,199
you know use your imagination okay so

554
00:19:56,380 --> 00:19:58,670
host pass it

555
00:19:57,200 --> 00:20:01,540
amounts of file or directory' from the

556
00:19:58,670 --> 00:20:04,070
host notes file system into your pod

557
00:20:01,540 --> 00:20:06,170
when I first heard about his path I was

558
00:20:04,070 --> 00:20:07,610
like what on earth like to me this is an

559
00:20:06,170 --> 00:20:09,020
obvious attack tool right like what

560
00:20:07,610 --> 00:20:11,270
would you even want that for does it

561
00:20:09,020 --> 00:20:14,090
have like legitimate use cases and as it

562
00:20:11,270 --> 00:20:15,980
turns out it does there are a few use

563
00:20:14,090 --> 00:20:17,600
cases I'm bootstrapping a cluster you

564
00:20:15,980 --> 00:20:19,640
know it's path to be able to get to the

565
00:20:17,600 --> 00:20:21,080
stuff necessary tip gonna bring the

566
00:20:19,640 --> 00:20:23,540
cluster back up and in the case of a

567
00:20:21,080 --> 00:20:25,280
power outage another is a docker and

568
00:20:23,540 --> 00:20:27,020
docker is a common use case people who

569
00:20:25,280 --> 00:20:29,389
want to build containers inside of

570
00:20:27,020 --> 00:20:31,370
kubernetes frequently think the cut

571
00:20:29,390 --> 00:20:34,130
docker and docker is a good solution for

572
00:20:31,370 --> 00:20:36,199
this there are other solutions for that

573
00:20:34,130 --> 00:20:37,340
out there today but that's another one

574
00:20:36,200 --> 00:20:39,940
of the use cases you're basically

575
00:20:37,340 --> 00:20:41,929
mounting in the docker socket underneath

576
00:20:39,940 --> 00:20:43,700
saccharin docker is very commonly used

577
00:20:41,930 --> 00:20:45,200
and also a very good attack target in

578
00:20:43,700 --> 00:20:50,810
and of itself which we'll talk about in

579
00:20:45,200 --> 00:20:53,240
a bit so doctor in docker doctor and

580
00:20:50,810 --> 00:20:55,190
docker I think that people think

581
00:20:53,240 --> 00:20:57,350
sometimes that certain kinds of docker

582
00:20:55,190 --> 00:20:59,450
attacks can only happen if the contain

583
00:20:57,350 --> 00:21:01,219
if the container is privileged and

584
00:20:59,450 --> 00:21:04,730
that's not actually the case it is

585
00:21:01,220 --> 00:21:07,400
actually possible to via attacks on

586
00:21:04,730 --> 00:21:09,770
docker and docker escalate privileges to

587
00:21:07,400 --> 00:21:12,620
root on the underlying host from an

588
00:21:09,770 --> 00:21:15,410
entirely unprivileged pod with all of

589
00:21:12,620 --> 00:21:17,270
the security things on it the docker

590
00:21:15,410 --> 00:21:18,560
socket lives at Marv run docker sake

591
00:21:17,270 --> 00:21:19,879
it's not unique to docker other

592
00:21:18,560 --> 00:21:21,620
container runtimes also have them

593
00:21:19,880 --> 00:21:23,870
they'll be differently named and that is

594
00:21:21,620 --> 00:21:25,760
a very valid like great target for us

595
00:21:23,870 --> 00:21:28,040
especially if we can mount it with

596
00:21:25,760 --> 00:21:35,660
something like host path so let's take a

597
00:21:28,040 --> 00:21:37,340
look at what we can do so we're gonna

598
00:21:35,660 --> 00:21:39,200
bring up a pod and we're going to show

599
00:21:37,340 --> 00:21:40,520
you the manifest necessary to bring up a

600
00:21:39,200 --> 00:21:42,050
pot it has access to the underlying

601
00:21:40,520 --> 00:21:44,510
docker socket again this is a pretty

602
00:21:42,050 --> 00:21:45,919
common use case inside of kubernetes and

603
00:21:44,510 --> 00:21:48,410
I find a lot of people doing it and I

604
00:21:45,920 --> 00:21:49,460
shake my head a lot when it happens but

605
00:21:48,410 --> 00:21:50,600
we're gonna walk through this manifest

606
00:21:49,460 --> 00:21:52,160
this is a little more complex than the

607
00:21:50,600 --> 00:21:54,230
previous one up here at the top we have

608
00:21:52,160 --> 00:21:55,880
an annotation that describes this asset

609
00:21:54,230 --> 00:21:57,410
calm profile that docker will use when

610
00:21:55,880 --> 00:22:00,500
it's starting up that this particular

611
00:21:57,410 --> 00:22:02,630
container down below in the security

612
00:22:00,500 --> 00:22:05,090
context inside of the spec of the pod

613
00:22:02,630 --> 00:22:07,490
we are also specifying a user a group

614
00:22:05,090 --> 00:22:10,730
and @fs group and this is an interesting

615
00:22:07,490 --> 00:22:11,000
detail this is dynamic I can change that

616
00:22:10,730 --> 00:22:13,370
you

617
00:22:11,000 --> 00:22:15,860
or group ID before actually deploying

618
00:22:13,370 --> 00:22:17,000
the pod if I'd made this a deployment I

619
00:22:15,860 --> 00:22:19,310
could just edit the deployment and

620
00:22:17,000 --> 00:22:20,660
change the UID and GID and all of these

621
00:22:19,310 --> 00:22:22,760
pods would be started up with that new

622
00:22:20,660 --> 00:22:25,160
UID and GID it's not defined inside the

623
00:22:22,760 --> 00:22:28,040
container it's defined at docker at

624
00:22:25,160 --> 00:22:30,340
runtime and it's being is basically

625
00:22:28,040 --> 00:22:32,629
making use of the user name space in

626
00:22:30,340 --> 00:22:34,129
containerization we described the

627
00:22:32,630 --> 00:22:35,480
container we want to use and then we

628
00:22:34,130 --> 00:22:37,190
actually use this house host path

629
00:22:35,480 --> 00:22:40,130
mechanism to mount in the VAR run docker

630
00:22:37,190 --> 00:22:41,750
socket we're also making sure that for

631
00:22:40,130 --> 00:22:43,550
this specific container we're not

632
00:22:41,750 --> 00:22:45,740
allowing privilege escalation Sonos to

633
00:22:43,550 --> 00:22:47,480
do capabilities we're also dropping all

634
00:22:45,740 --> 00:22:49,160
of the Linux capabilities we're not

635
00:22:47,480 --> 00:22:51,170
using any system calls to the Linux

636
00:22:49,160 --> 00:22:53,390
kernel that are governed by those

637
00:22:51,170 --> 00:22:56,840
capabilities now as a penetration tester

638
00:22:53,390 --> 00:22:58,400
if I see context with that like has all

639
00:22:56,840 --> 00:23:00,199
of that security stuff on it it drops

640
00:22:58,400 --> 00:23:01,940
all capabilities privilege escalation

641
00:23:00,200 --> 00:23:04,180
isn't allowed it's not running his room

642
00:23:01,940 --> 00:23:06,470
which is relatively rare in docker

643
00:23:04,180 --> 00:23:08,360
there's a lot happening there and that

644
00:23:06,470 --> 00:23:11,360
probably is going to make my day pretty

645
00:23:08,360 --> 00:23:13,189
sad and you know I'm gonna have kind of

646
00:23:11,360 --> 00:23:15,050
a hard time except that with the use of

647
00:23:13,190 --> 00:23:17,090
host path the powerful escape hatch

648
00:23:15,050 --> 00:23:18,760
maybe not maybe I'll have a little bit

649
00:23:17,090 --> 00:23:21,230
of easier time let's see what happened

650
00:23:18,760 --> 00:23:22,430
so the first thing we didn't deploy at

651
00:23:21,230 --> 00:23:24,290
manifesto then we're going to be able to

652
00:23:22,430 --> 00:23:26,810
see that the UID and GID are exactly

653
00:23:24,290 --> 00:23:28,310
what we set in our security context the

654
00:23:26,810 --> 00:23:31,190
second thing we're going to do is attach

655
00:23:28,310 --> 00:23:32,870
to that kind of container again and take

656
00:23:31,190 --> 00:23:34,730
a look at the definition of the docker

657
00:23:32,870 --> 00:23:37,399
socket so when you install docker on a

658
00:23:34,730 --> 00:23:38,420
Linux host generally and every install

659
00:23:37,400 --> 00:23:40,580
that I've ever seen a docker

660
00:23:38,420 --> 00:23:42,350
it will create a duck or group and it

661
00:23:40,580 --> 00:23:44,449
will associate permissions with that

662
00:23:42,350 --> 00:23:45,949
docker group for the doctor socket so

663
00:23:44,450 --> 00:23:47,780
everything about it as long as you have

664
00:23:45,950 --> 00:23:49,850
a post path you can actually figure out

665
00:23:47,780 --> 00:23:52,250
what group ID that is and just define

666
00:23:49,850 --> 00:23:53,300
your pod with that group ID and you have

667
00:23:52,250 --> 00:23:55,850
full access to docker

668
00:23:53,300 --> 00:23:58,820
without running as without running its

669
00:23:55,850 --> 00:24:00,080
route and to the underlying node so

670
00:23:58,820 --> 00:24:01,790
people do this because they want to be

671
00:24:00,080 --> 00:24:03,409
able to use docker tools there again

672
00:24:01,790 --> 00:24:06,710
other options out there for that stuff

673
00:24:03,410 --> 00:24:09,080
it's a very common matter so we're gonna

674
00:24:06,710 --> 00:24:10,790
go ahead and exec eunuch in and do a

675
00:24:09,080 --> 00:24:13,040
docker run command to create an end your

676
00:24:10,790 --> 00:24:16,010
next instance and then we can see that

677
00:24:13,040 --> 00:24:17,510
in the underlying hosts that are running

678
00:24:16,010 --> 00:24:19,429
into the next instance and then if we

679
00:24:17,510 --> 00:24:21,320
just wanted to drop that from the

680
00:24:19,429 --> 00:24:22,460
underlying host we could actually just

681
00:24:21,320 --> 00:24:24,889
do that from that perspective right

682
00:24:22,460 --> 00:24:26,360
there so okay

683
00:24:24,890 --> 00:24:28,430
I thought cool is an operator nginx

684
00:24:26,360 --> 00:24:32,810
alright fine so what can we do with this

685
00:24:28,430 --> 00:24:34,070
is an attacker well if you can get if

686
00:24:32,810 --> 00:24:37,280
you can mount the docker socket on the

687
00:24:34,070 --> 00:24:39,379
underlying node as it turns out a fair

688
00:24:37,280 --> 00:24:41,389
amount when I see this as a pen gesture

689
00:24:39,380 --> 00:24:42,680
it's the best thing it's like you see

690
00:24:41,390 --> 00:24:44,570
you hit the button on the k-cup maker

691
00:24:42,680 --> 00:24:46,460
you like walk out of the room you hit

692
00:24:44,570 --> 00:24:48,770
enter your route you come back the

693
00:24:46,460 --> 00:24:52,160
coffee's done your day is done if it's

694
00:24:48,770 --> 00:24:54,410
dim it's great so hostname it's ours and

695
00:24:52,160 --> 00:24:56,210
that's it game over so in this example

696
00:24:54,410 --> 00:24:57,800
the hostname that I want I want to show

697
00:24:56,210 --> 00:24:59,630
that I'm actually on the machine links

698
00:24:57,800 --> 00:25:02,690
I'm connected to that house right there

699
00:24:59,630 --> 00:25:04,670
and if I touch a file in se in the NC

700
00:25:02,690 --> 00:25:06,500
directory yeah on that host I can see it

701
00:25:04,670 --> 00:25:08,180
and now I'm gonna exec into the running

702
00:25:06,500 --> 00:25:10,400
container again scheduled directly on

703
00:25:08,180 --> 00:25:18,410
this host and from there I'm gonna just

704
00:25:10,400 --> 00:25:19,610
go ahead and well that was actually

705
00:25:18,410 --> 00:25:20,690
supposed to remove the flag right I

706
00:25:19,610 --> 00:25:23,449
guess I type with my demo

707
00:25:20,690 --> 00:25:24,890
you know Democrats what can you do but

708
00:25:23,450 --> 00:25:26,510
yeah I mean you have full access to

709
00:25:24,890 --> 00:25:28,040
underlying file system at that point

710
00:25:26,510 --> 00:25:29,900
right because I've just mounted in bar

711
00:25:28,040 --> 00:25:32,060
the SC directory from the underlying

712
00:25:29,900 --> 00:25:34,700
node into the container as host that's D

713
00:25:32,060 --> 00:25:35,780
and so I have that full access the thing

714
00:25:34,700 --> 00:25:37,550
that's important to remember about

715
00:25:35,780 --> 00:25:39,649
docker duck or your big takeaway on

716
00:25:37,550 --> 00:25:42,080
docker docker is that when you run the

717
00:25:39,650 --> 00:25:44,900
docker command contextually it's being

718
00:25:42,080 --> 00:25:46,790
run on the underlying node which means

719
00:25:44,900 --> 00:25:47,840
that if you express stocker and docker

720
00:25:46,790 --> 00:25:50,090
up to a container

721
00:25:47,840 --> 00:25:52,459
you're letting something you're letting

722
00:25:50,090 --> 00:25:55,280
that container do anything to the

723
00:25:52,460 --> 00:26:01,970
underlying node anything at all

724
00:25:55,280 --> 00:26:04,490
kernels all the way up so takeaways

725
00:26:01,970 --> 00:26:06,770
doctor and doctor very powerful for

726
00:26:04,490 --> 00:26:10,310
everybody and perhaps not the most

727
00:26:06,770 --> 00:26:11,930
secure option when used this way

728
00:26:10,310 --> 00:26:13,280
backers an authenticated API with full

729
00:26:11,930 --> 00:26:14,810
access to the kernel we all want full

730
00:26:13,280 --> 00:26:18,320
access to the kernel right I think we do

731
00:26:14,810 --> 00:26:19,909
and how can you mitigate that we can

732
00:26:18,320 --> 00:26:21,200
restrict the use of host path with

733
00:26:19,910 --> 00:26:25,220
admission control and we'll show that

734
00:26:21,200 --> 00:26:27,170
here in a minute so you may notice that

735
00:26:25,220 --> 00:26:29,300
that was all docker there besides host

736
00:26:27,170 --> 00:26:31,340
path which we were using a Nakuru

737
00:26:29,300 --> 00:26:33,409
Nettie's manifest that was a container

738
00:26:31,340 --> 00:26:35,360
attack that could work entirely

739
00:26:33,410 --> 00:26:36,950
separately from a kubernetes context

740
00:26:35,360 --> 00:26:37,949
it's important to remember that

741
00:26:36,950 --> 00:26:39,779
kubernetes

742
00:26:37,950 --> 00:26:41,070
a container Orchestrator basically

743
00:26:39,779 --> 00:26:43,320
containers are what's happening in there

744
00:26:41,070 --> 00:26:45,809
and so container attacks will still work

745
00:26:43,320 --> 00:26:47,250
and then further it's important to

746
00:26:45,809 --> 00:26:49,769
remember that containers are made of

747
00:26:47,250 --> 00:26:51,750
Linux primitives and if you understand

748
00:26:49,769 --> 00:26:53,880
Linux primitives and how to attack Linux

749
00:26:51,750 --> 00:26:55,860
you understand how to attack containers

750
00:26:53,880 --> 00:26:57,779
containers aren't magic they're just

751
00:26:55,860 --> 00:26:59,490
made of Linux and so if we understand

752
00:26:57,779 --> 00:27:00,690
how Linux works well under the hood we

753
00:26:59,490 --> 00:27:02,070
can have really interesting

754
00:27:00,690 --> 00:27:03,840
possibilities about how to attack

755
00:27:02,070 --> 00:27:06,899
container technology and by extension

756
00:27:03,840 --> 00:27:10,080
kubernetes so let's talk a little bit

757
00:27:06,899 --> 00:27:13,018
about container parts what is a

758
00:27:10,080 --> 00:27:15,029
container container is a single process

759
00:27:13,019 --> 00:27:16,380
on a shared host and and the thing

760
00:27:15,029 --> 00:27:18,299
that's interesting the way that I think

761
00:27:16,380 --> 00:27:19,440
about containers when I was really kind

762
00:27:18,299 --> 00:27:21,779
of getting into like what they actually

763
00:27:19,440 --> 00:27:24,450
do is that if you look at every Linux

764
00:27:21,779 --> 00:27:26,760
process in any process analytics kernel

765
00:27:24,450 --> 00:27:28,139
you can see that it actually has is

766
00:27:26,760 --> 00:27:30,720
associated with a set of these

767
00:27:28,139 --> 00:27:32,969
namespaces that's every process on the

768
00:27:30,720 --> 00:27:34,620
system all of them right the difference

769
00:27:32,970 --> 00:27:36,120
between every process and a

770
00:27:34,620 --> 00:27:38,100
containerized process is that those

771
00:27:36,120 --> 00:27:40,139
namespaces are mapped to a specific ones

772
00:27:38,100 --> 00:27:42,959
specific specific to that set of

773
00:27:40,139 --> 00:27:44,699
processes so containerization in a way

774
00:27:42,960 --> 00:27:46,950
is it's just a way of actually providing

775
00:27:44,700 --> 00:27:50,220
isolation to the Linux process itself

776
00:27:46,950 --> 00:27:52,380
but also that means that issues

777
00:27:50,220 --> 00:27:54,720
regarding Linux in the way that it Maps

778
00:27:52,380 --> 00:27:56,279
things like processes C groups and

779
00:27:54,720 --> 00:27:57,720
namespaces can also be applicable to

780
00:27:56,279 --> 00:28:02,090
attaining to attack in containers in

781
00:27:57,720 --> 00:28:06,000
that context if you can you know attack

782
00:28:02,090 --> 00:28:07,470
for example the way that it deals with C

783
00:28:06,000 --> 00:28:08,460
groups and namespaces you can

784
00:28:07,470 --> 00:28:11,159
potentially be able to break that

785
00:28:08,460 --> 00:28:13,820
isolation the way that Linux treats the

786
00:28:11,159 --> 00:28:15,600
filesystem is that all processes

787
00:28:13,820 --> 00:28:16,710
namespaces all of those things

788
00:28:15,600 --> 00:28:20,279
everything is a file

789
00:28:16,710 --> 00:28:22,769
so can me maybe do something interesting

790
00:28:20,279 --> 00:28:25,260
with that filesystem we'll find out in a

791
00:28:22,769 --> 00:28:27,539
sec basically these primitives like

792
00:28:25,260 --> 00:28:28,919
there aren't new it's not it's not magic

793
00:28:27,539 --> 00:28:30,389
they seem like they're simple and

794
00:28:28,919 --> 00:28:32,720
magical and automated but on the back

795
00:28:30,389 --> 00:28:35,070
end it's the same old attack surface and

796
00:28:32,720 --> 00:28:37,169
we can still do things that apply to

797
00:28:35,070 --> 00:28:39,689
that attack surface capabilities system

798
00:28:37,169 --> 00:28:41,519
calls you know ways that you can

799
00:28:39,690 --> 00:28:44,850
manipulate those totally still apply and

800
00:28:41,519 --> 00:28:48,330
the fact that container shares resources

801
00:28:44,850 --> 00:28:49,830
with the host other containers and

802
00:28:48,330 --> 00:28:52,199
everything else on there

803
00:28:49,830 --> 00:28:55,559
means that the attack surface is very

804
00:28:52,200 --> 00:28:57,480
wide because it's shared so if you can

805
00:28:55,559 --> 00:28:59,309
compromise the kernel in a container you

806
00:28:57,480 --> 00:29:02,850
then can compromise the kernel on the

807
00:28:59,309 --> 00:29:04,440
underlying node and it works like that

808
00:29:02,850 --> 00:29:06,209
and it adds an attacker that's really

809
00:29:04,440 --> 00:29:08,190
exciting to me because I have so many

810
00:29:06,210 --> 00:29:11,549
options there's so many moving parts in

811
00:29:08,190 --> 00:29:14,100
different places that I can go to and I

812
00:29:11,549 --> 00:29:16,710
don't know I think it's fun so let's

813
00:29:14,100 --> 00:29:18,840
figure out well first let's look at a

814
00:29:16,710 --> 00:29:20,549
diagram about that and looks like

815
00:29:18,840 --> 00:29:23,639
through that real quick and then one

816
00:29:20,549 --> 00:29:25,200
attack it so these containers that we

817
00:29:23,639 --> 00:29:26,639
talked about before effectively are just

818
00:29:25,200 --> 00:29:28,289
collections of all these individual

819
00:29:26,639 --> 00:29:30,059
pieces right so a container might span

820
00:29:28,289 --> 00:29:31,470
all of the different see groups or

821
00:29:30,059 --> 00:29:33,210
namespaces that are associated with a

822
00:29:31,470 --> 00:29:35,279
container and that represents sort of

823
00:29:33,210 --> 00:29:37,590
the packaging of that container at

824
00:29:35,279 --> 00:29:38,610
runtime when we think about an image of

825
00:29:37,590 --> 00:29:39,809
a container that's being shipped around

826
00:29:38,610 --> 00:29:41,399
it's really just a tarball

827
00:29:39,809 --> 00:29:43,320
it's just a tarball that represents the

828
00:29:41,399 --> 00:29:44,939
actual file system underneath but

829
00:29:43,320 --> 00:29:48,120
everything is but at runtime just looks

830
00:29:44,940 --> 00:29:49,799
exactly like this I know that as an

831
00:29:48,120 --> 00:29:53,580
attacker I really leveled up when I

832
00:29:49,799 --> 00:29:55,950
started to understand better like the

833
00:29:53,580 --> 00:29:58,049
ways that different kinds of attacks

834
00:29:55,950 --> 00:30:00,929
against the Linux kernel and userland

835
00:29:58,049 --> 00:30:02,668
can can apply in this context the ways

836
00:30:00,929 --> 00:30:04,470
that those interact with each other in a

837
00:30:02,669 --> 00:30:05,850
container context and outside of it and

838
00:30:04,470 --> 00:30:07,529
the way that those interact

839
00:30:05,850 --> 00:30:10,230
being able to have a deep understanding

840
00:30:07,529 --> 00:30:11,580
of this system really does help in being

841
00:30:10,230 --> 00:30:14,940
able to attack it as well as being able

842
00:30:11,580 --> 00:30:16,350
to operate it so here's an interesting

843
00:30:14,940 --> 00:30:17,490
thing we might be able to do he's a

844
00:30:16,350 --> 00:30:19,110
tweet from Duffy a little while ago when

845
00:30:17,490 --> 00:30:20,429
we were first working on this talk so

846
00:30:19,110 --> 00:30:22,168
this is a tweet I put up after seeing

847
00:30:20,429 --> 00:30:23,399
another example of this I thought it was

848
00:30:22,169 --> 00:30:24,779
actually pretty smart what's actually

849
00:30:23,399 --> 00:30:26,939
happening here is that we're using cue

850
00:30:24,779 --> 00:30:29,190
kettle to run a container based on the

851
00:30:26,940 --> 00:30:31,490
Alpine image and we're using NS enter

852
00:30:29,190 --> 00:30:34,230
inside of that container to enter the

853
00:30:31,490 --> 00:30:35,760
amount name space of the first process

854
00:30:34,230 --> 00:30:37,740
on the underlying node and we're doing

855
00:30:35,760 --> 00:30:39,629
that because you can see in the

856
00:30:37,740 --> 00:30:41,039
specification it says host pid' true

857
00:30:39,630 --> 00:30:43,440
that means that when I started this

858
00:30:41,039 --> 00:30:45,559
container I gave it access to the entire

859
00:30:43,440 --> 00:30:47,789
pig name space of the underlying host

860
00:30:45,559 --> 00:30:49,379
but you also notice that I'm not giving

861
00:30:47,789 --> 00:30:51,389
away a like host path or any of that

862
00:30:49,380 --> 00:30:53,159
stuff just host pig and I'm gonna get a

863
00:30:51,389 --> 00:30:57,870
privileged context which is also super

864
00:30:53,159 --> 00:31:00,169
powerful let's play with it yeah let's

865
00:30:57,870 --> 00:31:00,168
take a look

866
00:31:02,400 --> 00:31:05,320
so first I'm going to show you the

867
00:31:04,240 --> 00:31:06,940
manifest that's actually going to be

868
00:31:05,320 --> 00:31:08,770
doing this I'm gonna deploy as it

869
00:31:06,940 --> 00:31:10,210
manifested it's just described the same

870
00:31:08,770 --> 00:31:13,510
way as actually in the tweet right I

871
00:31:10,210 --> 00:31:15,520
have my NS enter command I'm what mount

872
00:31:13,510 --> 00:31:17,050
filesystem to actually mount into and

873
00:31:15,520 --> 00:31:19,300
then I'm running a command inside of

874
00:31:17,050 --> 00:31:22,690
that mounted filesystem been sleep for

875
00:31:19,300 --> 00:31:26,200
99 days I'm gonna use the standard bog

876
00:31:22,690 --> 00:31:28,450
standard Alpine 3.7 image for this and I

877
00:31:26,200 --> 00:31:32,920
have my hosts head set true and

878
00:31:28,450 --> 00:31:38,890
privilege set to true as well let's go

879
00:31:32,920 --> 00:31:41,380
ahead and apply this manifests and this

880
00:31:38,890 --> 00:31:42,760
is to help for NS enter and I kinda want

881
00:31:41,380 --> 00:31:44,170
to just point it out that the it's

882
00:31:42,760 --> 00:31:46,510
really an interesting thing this is an

883
00:31:44,170 --> 00:31:49,180
incredible tool and essentially lets us

884
00:31:46,510 --> 00:31:51,400
enter into any of the parts of a

885
00:31:49,180 --> 00:31:53,020
container right we're talking about a

886
00:31:51,400 --> 00:31:55,300
container being a sum of all of its

887
00:31:53,020 --> 00:31:56,800
parts the mountain namespace the pit

888
00:31:55,300 --> 00:31:58,240
namespace the network namespace all of

889
00:31:56,800 --> 00:31:59,860
those individual pieces of containers

890
00:31:58,240 --> 00:32:02,230
just a collection of all those bits and

891
00:31:59,860 --> 00:32:06,040
a sensor lets me in to enter into each

892
00:32:02,230 --> 00:32:07,930
any any particular part of one so I've

893
00:32:06,040 --> 00:32:09,399
used NS enter in my work to actually

894
00:32:07,930 --> 00:32:12,420
kind of solve the mystery of how a thing

895
00:32:09,400 --> 00:32:14,770
is actually configured in this example

896
00:32:12,420 --> 00:32:17,320
I'm gonna grab a pit of our running

897
00:32:14,770 --> 00:32:18,790
nginx process on a particular hose so

898
00:32:17,320 --> 00:32:20,860
I'm gonna exact into my container where

899
00:32:18,790 --> 00:32:22,690
it's been scheduled and take a look at

900
00:32:20,860 --> 00:32:25,209
for nginx pits and I can see that I have

901
00:32:22,690 --> 00:32:28,480
a few running I'm just gonna grab that

902
00:32:25,210 --> 00:32:32,320
pit ID or the process ID and I'm going

903
00:32:28,480 --> 00:32:34,450
to enter into the network names face of

904
00:32:32,320 --> 00:32:36,370
that process ID now the neat thing about

905
00:32:34,450 --> 00:32:39,280
Ana Center is that literally I just have

906
00:32:36,370 --> 00:32:41,800
to tell if the target pit - t and then

907
00:32:39,280 --> 00:32:43,060
the pit ID and then which namespace or

908
00:32:41,800 --> 00:32:44,590
which part of the container I want me to

909
00:32:43,060 --> 00:32:47,290
append you in this case it's a

910
00:32:44,590 --> 00:32:49,419
networking one and I can see in my case

911
00:32:47,290 --> 00:32:51,460
that this particular nginx instances is

912
00:32:49,420 --> 00:32:53,410
is bound on port 80 and that's what I

913
00:32:51,460 --> 00:32:55,150
was trying to figure out right I was

914
00:32:53,410 --> 00:33:00,280
expecting to be bound on 443 which is

915
00:32:55,150 --> 00:33:01,540
why it was not working for me you can

916
00:33:00,280 --> 00:33:03,220
also do things like mounted to the

917
00:33:01,540 --> 00:33:04,629
namespace the the mounting space and

918
00:33:03,220 --> 00:33:07,240
take a look at configuration files and

919
00:33:04,630 --> 00:33:09,820
that sort of stuff this all works

920
00:33:07,240 --> 00:33:12,130
because every process has a proc /p

921
00:33:09,820 --> 00:33:14,610
process ID NS directory and that

922
00:33:12,130 --> 00:33:15,809
actually describes a map for that

923
00:33:14,610 --> 00:33:17,969
their process and this is what we were

924
00:33:15,809 --> 00:33:19,408
referring to before so if I look at the

925
00:33:17,970 --> 00:33:20,880
process tree for this one I could see

926
00:33:19,409 --> 00:33:23,490
that this running inside of a container

927
00:33:20,880 --> 00:33:26,669
these are the maps for the C group IPC

928
00:33:23,490 --> 00:33:28,289
mount names Network kid and user and UTS

929
00:33:26,669 --> 00:33:31,169
namespaces these are mapped to these

930
00:33:28,289 --> 00:33:32,669
specific names faces if I SSH in I would

931
00:33:31,169 --> 00:33:34,769
see that they be mapped to a different

932
00:33:32,669 --> 00:33:36,539
set of namespaces what you're actually

933
00:33:34,769 --> 00:33:37,679
identified as a default set for that the

934
00:33:36,539 --> 00:33:40,440
Linux kernel is going to use for that

935
00:33:37,679 --> 00:33:41,820
user gland but if you're looking for a

936
00:33:40,440 --> 00:33:44,039
way to visualize what a container is

937
00:33:41,820 --> 00:33:45,870
this is it this is what makes up a

938
00:33:44,039 --> 00:33:47,940
container this this LS directory right

939
00:33:45,870 --> 00:33:49,949
here I want to emphasize how incredibly

940
00:33:47,940 --> 00:33:51,120
powerful it is to be able to interact

941
00:33:49,950 --> 00:33:52,649
with the different parts of the

942
00:33:51,120 --> 00:33:54,539
container without necessarily having the

943
00:33:52,649 --> 00:33:56,129
eggs back into a shell because let me

944
00:33:54,539 --> 00:33:58,289
tell you that as a pen tester there is

945
00:33:56,130 --> 00:34:00,480
no better way to make my day really

946
00:33:58,289 --> 00:34:03,440
annoying than to create a container that

947
00:34:00,480 --> 00:34:06,600
has no shell in it really annoying and

948
00:34:03,440 --> 00:34:09,480
if you can't interact with that this is

949
00:34:06,600 --> 00:34:10,799
that you still can and if you can

950
00:34:09,480 --> 00:34:13,199
interact with all of the different

951
00:34:10,800 --> 00:34:15,030
individual like you know namespaces and

952
00:34:13,199 --> 00:34:16,859
all of these things there's so much

953
00:34:15,030 --> 00:34:20,310
control that you can have over it it's

954
00:34:16,859 --> 00:34:22,230
pretty sweet but what else could we do

955
00:34:20,310 --> 00:34:24,149
could we do anything perhaps to the

956
00:34:22,230 --> 00:34:26,010
underlying node could we escalate

957
00:34:24,149 --> 00:34:31,049
privileges gain any kind of control I

958
00:34:26,010 --> 00:34:32,879
don't know let's find out so we're not

959
00:34:31,050 --> 00:34:34,139
even using host PAP here but we can

960
00:34:32,879 --> 00:34:36,839
still take over the underlying note of

961
00:34:34,139 --> 00:34:38,220
it so again because I have a data center

962
00:34:36,839 --> 00:34:40,799
and I have access to that host pin

963
00:34:38,219 --> 00:34:42,178
namespace I can just attach to all of

964
00:34:40,800 --> 00:34:45,570
the namespaces that make up that

965
00:34:42,179 --> 00:34:47,970
particular process and we run a bash

966
00:34:45,570 --> 00:34:49,349
shell and so I'm picking pit one because

967
00:34:47,969 --> 00:34:51,569
the init system it's always going to be

968
00:34:49,349 --> 00:34:53,879
there and I'm running bash and so at

969
00:34:51,570 --> 00:34:56,369
this point I have a root on the actual

970
00:34:53,879 --> 00:35:09,540
underlying host and the center is

971
00:34:56,369 --> 00:35:11,670
incredibly powerful sorry okay

972
00:35:09,540 --> 00:35:14,160
so some takeaways we can take from this

973
00:35:11,670 --> 00:35:16,530
edit Center is pretty amazing both for

974
00:35:14,160 --> 00:35:19,140
operators and for attackers

975
00:35:16,530 --> 00:35:20,400
host path is not the only kind of thing

976
00:35:19,140 --> 00:35:22,049
that you need to watch out for

977
00:35:20,400 --> 00:35:23,520
you should also restrict the use of host

978
00:35:22,050 --> 00:35:25,770
pit if you're trying to harden your own

979
00:35:23,520 --> 00:35:27,230
containers and you should restrict the

980
00:35:25,770 --> 00:35:30,080
use of privileged containers because

981
00:35:27,230 --> 00:35:31,220
just makes my life way too easy yeah one

982
00:35:30,080 --> 00:35:33,200
other part of that is that privilege

983
00:35:31,220 --> 00:35:35,899
containers actually have a very very

984
00:35:33,200 --> 00:35:37,310
escalated privilege you can do anything

985
00:35:35,900 --> 00:35:38,720
with any part of the container you can

986
00:35:37,310 --> 00:35:40,910
create new containers you can do all of

987
00:35:38,720 --> 00:35:42,709
that stuff with privileged access so

988
00:35:40,910 --> 00:35:44,868
when you when you do docker run - -

989
00:35:42,710 --> 00:35:46,010
privilege it's super scary there's

990
00:35:44,869 --> 00:35:48,140
another one where you can actually limit

991
00:35:46,010 --> 00:35:50,030
to Linux capabilities like sysadmin but

992
00:35:48,140 --> 00:35:51,500
that one but that one is actually still

993
00:35:50,030 --> 00:35:53,540
pretty risky although it still only

994
00:35:51,500 --> 00:35:55,280
provides like read-only read-only access

995
00:35:53,540 --> 00:35:57,560
to all of those things there are really

996
00:35:55,280 --> 00:35:59,390
fun container escapes that involve the

997
00:35:57,560 --> 00:36:05,990
Seidman capability though so that's the

998
00:35:59,390 --> 00:36:07,910
thing to keep an out for so is there any

999
00:36:05,990 --> 00:36:09,618
way that we can like MIDI mitigate

1000
00:36:07,910 --> 00:36:13,730
against attacks like this or anything

1001
00:36:09,619 --> 00:36:14,750
like that yes we can like admission

1002
00:36:13,730 --> 00:36:16,910
control is really like the only

1003
00:36:14,750 --> 00:36:19,520
defensible space within kubernetes and

1004
00:36:16,910 --> 00:36:21,830
what that does is it represents an

1005
00:36:19,520 --> 00:36:23,390
implementation at the API server just as

1006
00:36:21,830 --> 00:36:25,700
we discussed when we were talking about

1007
00:36:23,390 --> 00:36:28,310
all the components admission control

1008
00:36:25,700 --> 00:36:31,220
gives us the ability to validate or

1009
00:36:28,310 --> 00:36:32,869
mutate objects and and determine whether

1010
00:36:31,220 --> 00:36:34,480
or not we will allow them in this is

1011
00:36:32,869 --> 00:36:36,680
beyond authorization and authentication

1012
00:36:34,480 --> 00:36:38,390
this is about now that we've seen the

1013
00:36:36,680 --> 00:36:41,149
manifest we've gotten past all of those

1014
00:36:38,390 --> 00:36:42,950
things in is that manifest requesting

1015
00:36:41,150 --> 00:36:44,270
access to host pit or host path or any

1016
00:36:42,950 --> 00:36:46,129
of those things now there is a

1017
00:36:44,270 --> 00:36:47,690
first-class implementation of that

1018
00:36:46,130 --> 00:36:50,510
within kubernetes right now that's

1019
00:36:47,690 --> 00:36:52,910
called pod security policies and we can

1020
00:36:50,510 --> 00:36:53,720
show you that so as an attacker a couple

1021
00:36:52,910 --> 00:36:56,450
of things to note here

1022
00:36:53,720 --> 00:36:56,868
one this is actually fairly rare in the

1023
00:36:56,450 --> 00:36:58,339
wild

1024
00:36:56,869 --> 00:36:59,660
despite the fact that it's the most

1025
00:36:58,340 --> 00:37:01,700
powerful way that you can harden a

1026
00:36:59,660 --> 00:37:04,399
kubernetes cluster many people don't use

1027
00:37:01,700 --> 00:37:06,649
it maybe more commonly than not in a lot

1028
00:37:04,400 --> 00:37:08,150
of cases because the UX is really hard

1029
00:37:06,650 --> 00:37:10,070
people don't like it it's sort of

1030
00:37:08,150 --> 00:37:11,810
difficult and people have a hard time

1031
00:37:10,070 --> 00:37:14,810
with it that doesn't mean that they

1032
00:37:11,810 --> 00:37:15,980
shouldn't try because it makes by

1033
00:37:14,810 --> 00:37:17,750
default if you don't push it

1034
00:37:15,980 --> 00:37:20,119
put admission control on it all of these

1035
00:37:17,750 --> 00:37:21,590
attacks are just viable and great for me

1036
00:37:20,119 --> 00:37:23,330
bad for perhaps the people who are

1037
00:37:21,590 --> 00:37:25,430
trying to operate them or defend them

1038
00:37:23,330 --> 00:37:28,670
the other thing I wanted to do as an

1039
00:37:25,430 --> 00:37:31,879
attacker is mutating admission control

1040
00:37:28,670 --> 00:37:34,070
is really interesting if anyone is

1041
00:37:31,880 --> 00:37:37,430
familiar with LD preload and how that

1042
00:37:34,070 --> 00:37:40,070
can work in a linux context LD preload

1043
00:37:37,430 --> 00:37:41,960
is very useful for both sysadmin and

1044
00:37:40,070 --> 00:37:44,540
four attackers because it allows you to

1045
00:37:41,960 --> 00:37:46,910
turn things into other things and if you

1046
00:37:44,540 --> 00:37:48,890
have the ability to make any call into

1047
00:37:46,910 --> 00:37:50,420
any other call or for example just

1048
00:37:48,890 --> 00:37:52,970
dictate that this is going to be your

1049
00:37:50,420 --> 00:37:54,710
you ID or your G ID there's all kinds of

1050
00:37:52,970 --> 00:37:56,180
interesting possibilities there we don't

1051
00:37:54,710 --> 00:37:57,470
really have time to cover them all and I

1052
00:37:56,180 --> 00:37:59,299
wish we did and maybe that's a future

1053
00:37:57,470 --> 00:38:01,209
talk because it's really awesome but

1054
00:37:59,300 --> 00:38:04,460
worth looking into

1055
00:38:01,210 --> 00:38:05,060
so anyway hide security policies let's

1056
00:38:04,460 --> 00:38:06,560
take a look

1057
00:38:05,060 --> 00:38:07,970
we demonstate one of those one thing I

1058
00:38:06,560 --> 00:38:09,620
do want to say is that we're talking

1059
00:38:07,970 --> 00:38:10,700
about like mutating objects if we think

1060
00:38:09,620 --> 00:38:13,130
about it we've already shown an example

1061
00:38:10,700 --> 00:38:14,990
of that when we specified the UID and

1062
00:38:13,130 --> 00:38:17,720
GID of that particular part of the

1063
00:38:14,990 --> 00:38:18,919
security context or was being told we

1064
00:38:17,720 --> 00:38:20,419
were actually going to mutate that

1065
00:38:18,920 --> 00:38:23,450
object at runtime to make sure that

1066
00:38:20,420 --> 00:38:25,880
we're using that username and group ID

1067
00:38:23,450 --> 00:38:27,560
but admission control can do that to all

1068
00:38:25,880 --> 00:38:29,660
of the things so I could actually use

1069
00:38:27,560 --> 00:38:31,970
this tool to do something like inject

1070
00:38:29,660 --> 00:38:33,920
proxy variables if I'm in a highly

1071
00:38:31,970 --> 00:38:35,750
regulated environment and I can inject

1072
00:38:33,920 --> 00:38:37,850
those proxy variables to all of the pods

1073
00:38:35,750 --> 00:38:40,130
within a given namespace using things

1074
00:38:37,850 --> 00:38:41,540
like pod preset within cabrini this or

1075
00:38:40,130 --> 00:38:42,770
other kinds of environment variables

1076
00:38:41,540 --> 00:38:45,410
that might be interesting to me as an

1077
00:38:42,770 --> 00:38:47,480
attacker yeah pod security policies when

1078
00:38:45,410 --> 00:38:49,160
I'm like implemented well can make my

1079
00:38:47,480 --> 00:38:51,050
life as an attacker really hard like

1080
00:38:49,160 --> 00:38:53,060
I'll run all the same attacks that we

1081
00:38:51,050 --> 00:38:55,130
were running during this talk and

1082
00:38:53,060 --> 00:38:57,350
nothing will work and it will be really

1083
00:38:55,130 --> 00:39:00,050
frustrating let's maybe see that happen

1084
00:38:57,350 --> 00:39:02,060
so we're gonna run the same ones again

1085
00:39:00,050 --> 00:39:03,470
against one with a good pipe security

1086
00:39:02,060 --> 00:39:04,940
policy but we'll look at the mostly

1087
00:39:03,470 --> 00:39:06,169
first so this cluster I've actually

1088
00:39:04,940 --> 00:39:07,700
turned up a couple of different pod

1089
00:39:06,170 --> 00:39:09,140
security policies and we can look at

1090
00:39:07,700 --> 00:39:10,399
them there's one that's called

1091
00:39:09,140 --> 00:39:11,750
permissive and the one that's called

1092
00:39:10,400 --> 00:39:14,710
restrictive probably not super

1093
00:39:11,750 --> 00:39:17,390
imaginative but you get the idea

1094
00:39:14,710 --> 00:39:19,400
this permissive one really does actually

1095
00:39:17,390 --> 00:39:20,569
just give access to everything but the

1096
00:39:19,400 --> 00:39:21,920
neat thing about looking at the output

1097
00:39:20,570 --> 00:39:23,620
here is that we can see some of the

1098
00:39:21,920 --> 00:39:26,840
things that we can actually restrict or

1099
00:39:23,620 --> 00:39:28,940
constrain with odd security policies so

1100
00:39:26,840 --> 00:39:31,010
like first class citizen is like whether

1101
00:39:28,940 --> 00:39:32,810
to allow privileged at all or whether to

1102
00:39:31,010 --> 00:39:36,140
allow privilege escalation from within a

1103
00:39:32,810 --> 00:39:37,970
container all of what capabilities to

1104
00:39:36,140 --> 00:39:40,460
add what Linux capabilities to add or

1105
00:39:37,970 --> 00:39:42,709
which to drop by default are required to

1106
00:39:40,460 --> 00:39:46,760
be dropped before the container will be

1107
00:39:42,710 --> 00:39:48,350
allowed admittance into the cluster you

1108
00:39:46,760 --> 00:39:50,060
can also limit the number of the types

1109
00:39:48,350 --> 00:39:51,350
of volumes and that sort of stuff

1110
00:39:50,060 --> 00:39:52,640
let's go down here to the restrict

1111
00:39:51,350 --> 00:39:54,410
and we can see that you know some of

1112
00:39:52,640 --> 00:39:55,819
these fields actually filled out so in

1113
00:39:54,410 --> 00:39:57,230
our case we're gonna not allow

1114
00:39:55,820 --> 00:39:59,180
privileged containers again in the

1115
00:39:57,230 --> 00:40:00,620
restrictive model we're going to allow

1116
00:39:59,180 --> 00:40:03,259
any capability which we probably should

1117
00:40:00,620 --> 00:40:05,630
not do we're also going to only allow

1118
00:40:03,260 --> 00:40:07,370
specific volume types so config map

1119
00:40:05,630 --> 00:40:08,510
downward API these are all types of

1120
00:40:07,370 --> 00:40:11,210
volumes that you can use within

1121
00:40:08,510 --> 00:40:13,640
kubernetes and attach to your running

1122
00:40:11,210 --> 00:40:15,140
processes we're not going to allow host

1123
00:40:13,640 --> 00:40:17,089
network we're not going to allow host

1124
00:40:15,140 --> 00:40:19,430
pit host IPC this isn't the most

1125
00:40:17,090 --> 00:40:21,050
restrictive paas security policy but you

1126
00:40:19,430 --> 00:40:22,750
can see kind of the power of what we can

1127
00:40:21,050 --> 00:40:25,610
do here

1128
00:40:22,750 --> 00:40:30,410
so running the same attacks against this

1129
00:40:25,610 --> 00:40:32,630
policy what happens so let's go ahead

1130
00:40:30,410 --> 00:40:34,580
and rerun the attack I'll get the sed

1131
00:40:32,630 --> 00:40:35,960
client llamo that we saw we're gonna run

1132
00:40:34,580 --> 00:40:38,000
this as a different user that doesn't

1133
00:40:35,960 --> 00:40:41,990
have access to that administer to that

1134
00:40:38,000 --> 00:40:44,540
permissive policy now we get a pretty

1135
00:40:41,990 --> 00:40:46,009
useful error message back you know so if

1136
00:40:44,540 --> 00:40:48,890
you're a developer and operator using

1137
00:40:46,010 --> 00:40:51,020
kubernetes and you try to and you bounce

1138
00:40:48,890 --> 00:40:52,069
against a restrictive policy like this

1139
00:40:51,020 --> 00:40:53,960
it's gonna come back with good

1140
00:40:52,070 --> 00:40:55,610
information telling you that the pod

1141
00:40:53,960 --> 00:40:58,100
security policy does not allow host

1142
00:40:55,610 --> 00:41:00,110
network it does not allow host path and

1143
00:40:58,100 --> 00:41:01,430
so this it's not just gonna say no and

1144
00:41:00,110 --> 00:41:03,380
then walk away you're actually gonna get

1145
00:41:01,430 --> 00:41:04,520
some feedback from it as an attacker the

1146
00:41:03,380 --> 00:41:06,080
first time I ran across this error

1147
00:41:04,520 --> 00:41:07,280
message though I did not find it very

1148
00:41:06,080 --> 00:41:09,170
clear because it was like unable to

1149
00:41:07,280 --> 00:41:10,460
validate any plot security policy well

1150
00:41:09,170 --> 00:41:11,960
if it doesn't have a plot security

1151
00:41:10,460 --> 00:41:13,670
policy what's your problem and it

1152
00:41:11,960 --> 00:41:14,780
actually means that there is a flood

1153
00:41:13,670 --> 00:41:16,730
security policy and that it isn't

1154
00:41:14,780 --> 00:41:20,450
allowing you which is not to me very

1155
00:41:16,730 --> 00:41:22,040
clearly worded so this one also is

1156
00:41:20,450 --> 00:41:24,230
denied right there's a darker and darker

1157
00:41:22,040 --> 00:41:25,820
demonstration that we provided is also

1158
00:41:24,230 --> 00:41:27,530
denied but in this case is because of

1159
00:41:25,820 --> 00:41:31,640
host path and also because we didn't

1160
00:41:27,530 --> 00:41:34,400
specify a SATCOM profile now even though

1161
00:41:31,640 --> 00:41:36,259
we have a restrictive pod security

1162
00:41:34,400 --> 00:41:38,420
policy in place it doesn't mean that you

1163
00:41:36,260 --> 00:41:39,770
can't do anything sometimes it may feel

1164
00:41:38,420 --> 00:41:41,660
that way as a user and that's part of

1165
00:41:39,770 --> 00:41:43,700
the user experience kind of problem with

1166
00:41:41,660 --> 00:41:44,960
pod security policies today I'm making

1167
00:41:43,700 --> 00:41:47,000
this look really simple but it's

1168
00:41:44,960 --> 00:41:49,850
actually relatively complex and figuring

1169
00:41:47,000 --> 00:41:51,470
out how the user experience works but

1170
00:41:49,850 --> 00:41:53,720
you know get involved if you're curious

1171
00:41:51,470 --> 00:41:55,580
about it it makes illegitimate use cases

1172
00:41:53,720 --> 00:41:57,459
harder it makes would you it doesn't

1173
00:41:55,580 --> 00:41:59,330
necessarily be that too legit use cases

1174
00:41:57,460 --> 00:42:01,280
so in our case I was just going to

1175
00:41:59,330 --> 00:42:03,770
redeploy that nginx deployment again

1176
00:42:01,280 --> 00:42:04,539
using that that a that user that doesn't

1177
00:42:03,770 --> 00:42:06,429
have access

1178
00:42:04,539 --> 00:42:08,109
to the permissive and I can do things

1179
00:42:06,429 --> 00:42:10,029
like scale and create deployments and

1180
00:42:08,109 --> 00:42:15,219
all about stuff continues to work I can

1181
00:42:10,029 --> 00:42:16,390
see the sponsoring yeah so I'm not gonna

1182
00:42:15,219 --> 00:42:19,989
do an attack demo here because it

1183
00:42:16,390 --> 00:42:21,429
actually was just maybe exam so quit 5

1184
00:42:19,989 --> 00:42:23,380
security policies on your clusters it

1185
00:42:21,429 --> 00:42:25,929
can help keep people like me out

1186
00:42:23,380 --> 00:42:27,339
so takeaways there pipe security

1187
00:42:25,929 --> 00:42:29,049
policies give you a lot of control over

1188
00:42:27,339 --> 00:42:31,359
what you're allowed to do in a pod and

1189
00:42:29,049 --> 00:42:34,599
what you're not allowing others to do in

1190
00:42:31,359 --> 00:42:36,369
your pod it's hard to adopt as I said

1191
00:42:34,599 --> 00:42:37,839
it's difficult to adopt mainly because

1192
00:42:36,369 --> 00:42:39,279
of the way that you associate pod

1193
00:42:37,839 --> 00:42:41,288
security policies with users or

1194
00:42:39,279 --> 00:42:43,119
controllers there's a lot of regularly

1195
00:42:41,289 --> 00:42:44,919
great media including on the tgia i/o

1196
00:42:43,119 --> 00:42:47,890
website to talk about how that works

1197
00:42:44,919 --> 00:42:48,339
so does admission control like fix

1198
00:42:47,890 --> 00:42:50,709
everything

1199
00:42:48,339 --> 00:42:52,989
not quite there's actually static pod

1200
00:42:50,709 --> 00:42:55,299
mechanism and static pods are manifest

1201
00:42:52,989 --> 00:42:58,959
that sit on disk near the qubit agent

1202
00:42:55,299 --> 00:43:00,339
itself and the qubit is actually

1203
00:42:58,959 --> 00:43:01,419
interesting this the static pod

1204
00:43:00,339 --> 00:43:02,319
mechanism is interesting because it's

1205
00:43:01,419 --> 00:43:04,269
generally used for things like

1206
00:43:02,319 --> 00:43:06,279
bootstrapping the cluster itself but

1207
00:43:04,269 --> 00:43:08,348
that stack static pod manifest that sits

1208
00:43:06,279 --> 00:43:09,849
on disk will be entirely governed by the

1209
00:43:08,349 --> 00:43:11,650
cubelet so you would if the qubit never

1210
00:43:09,849 --> 00:43:13,809
talks to an API server it will bring up

1211
00:43:11,650 --> 00:43:15,519
the pods to find in those files and it

1212
00:43:13,809 --> 00:43:17,829
will run them and make sure that they

1213
00:43:15,519 --> 00:43:19,808
continue to stay a they continue to stay

1214
00:43:17,829 --> 00:43:21,759
running and then an opponent ever it's

1215
00:43:19,809 --> 00:43:24,249
not susceptible to admission control at

1216
00:43:21,759 --> 00:43:25,959
all it's not susceptible to admission

1217
00:43:24,249 --> 00:43:29,769
control at all because it's the highest

1218
00:43:25,959 --> 00:43:31,928
priority it it executes before admission

1219
00:43:29,769 --> 00:43:35,558
control even applies and because it's

1220
00:43:31,929 --> 00:43:38,019
designed to be you know continually

1221
00:43:35,559 --> 00:43:39,640
self-healing that also means that as an

1222
00:43:38,019 --> 00:43:42,640
attacker maybe I could do something like

1223
00:43:39,640 --> 00:43:44,949
persistence well that actually doesn't

1224
00:43:42,640 --> 00:43:46,598
actually get affected by admission

1225
00:43:44,949 --> 00:43:48,459
control I can put my evil pod up there

1226
00:43:46,599 --> 00:43:50,109
it'll work admission control will never

1227
00:43:48,459 --> 00:43:53,799
complain and it will keep coming up when

1228
00:43:50,109 --> 00:43:56,109
things get spun down and if you think

1229
00:43:53,799 --> 00:43:57,579
about it like direct scheduling that we

1230
00:43:56,109 --> 00:43:59,499
saw from the beginning can you direct

1231
00:43:57,579 --> 00:44:01,569
schedule a static pod and completely

1232
00:43:59,499 --> 00:44:03,519
bypass the scheduler in controller

1233
00:44:01,569 --> 00:44:05,859
manager you have host pass without

1234
00:44:03,519 --> 00:44:08,229
admission control you absolutely can so

1235
00:44:05,859 --> 00:44:10,479
that seems like a pretty powerful attack

1236
00:44:08,229 --> 00:44:12,959
tool if I can like put something there

1237
00:44:10,479 --> 00:44:15,269
that's going to be persistent going to

1238
00:44:12,959 --> 00:44:16,558
bypass thing

1239
00:44:15,269 --> 00:44:18,538
that are trying to prevent me from doing

1240
00:44:16,559 --> 00:44:20,369
that and are going to bypass Oh Mission

1241
00:44:18,539 --> 00:44:21,929
Control - yep and they're the highest

1242
00:44:20,369 --> 00:44:23,819
priority as you said so if you put a

1243
00:44:21,929 --> 00:44:25,829
manifest down on disk it will actually

1244
00:44:23,819 --> 00:44:27,329
make room for that manifest if there's

1245
00:44:25,829 --> 00:44:29,279
pods already on the node it'll kick them

1246
00:44:27,329 --> 00:44:31,499
out to make room for that pod manifest

1247
00:44:29,279 --> 00:44:34,019
fascinating is there any way to stop

1248
00:44:31,499 --> 00:44:35,968
that so again this is going back to the

1249
00:44:34,019 --> 00:44:38,218
term default so qubit by default doesn't

1250
00:44:35,969 --> 00:44:39,359
have that directory defined which means

1251
00:44:38,219 --> 00:44:41,189
that there's no way to actually exploit

1252
00:44:39,359 --> 00:44:44,219
this by default with the qubit however

1253
00:44:41,189 --> 00:44:47,098
in cube ATM for example the default that

1254
00:44:44,219 --> 00:44:48,899
cube ATM uses for all all nodes is

1255
00:44:47,099 --> 00:44:50,459
actually to associate a directory with

1256
00:44:48,899 --> 00:44:56,819
that so if you know what that directory

1257
00:44:50,459 --> 00:44:59,368
is you could place it there and so it

1258
00:44:56,819 --> 00:45:01,439
doesn't fix everything what helps so

1259
00:44:59,369 --> 00:45:03,569
coming full circle we're really not

1260
00:45:01,439 --> 00:45:06,089
trying to scare you here it isn't that

1261
00:45:03,569 --> 00:45:09,089
kubernetes is like large and complex and

1262
00:45:06,089 --> 00:45:11,219
impossible although it is certainly very

1263
00:45:09,089 --> 00:45:13,499
large and complex it's powerful it

1264
00:45:11,219 --> 00:45:15,569
allows you to do a lot and as well as

1265
00:45:13,499 --> 00:45:17,218
being able to allow you to do a lot at

1266
00:45:15,569 --> 00:45:20,159
scale it allows you to make a lot of

1267
00:45:17,219 --> 00:45:23,599
mistakes at scale it miss configurations

1268
00:45:20,159 --> 00:45:25,709
and not putting admission control on

1269
00:45:23,599 --> 00:45:28,259
assuming that kubernetes is secure by

1270
00:45:25,709 --> 00:45:30,029
default and developing as such just

1271
00:45:28,259 --> 00:45:33,269
means that it's easier for me as an

1272
00:45:30,029 --> 00:45:36,809
attacker to be able to exploit it so

1273
00:45:33,269 --> 00:45:38,908
it's big it's complex but it is actually

1274
00:45:36,809 --> 00:45:40,859
possible for the most part to be able to

1275
00:45:38,909 --> 00:45:42,659
secure it it's possible to secure your

1276
00:45:40,859 --> 00:45:44,339
clusters via admission control and it's

1277
00:45:42,659 --> 00:45:46,319
possible to work to make the kubernetes

1278
00:45:44,339 --> 00:45:49,049
project itself more secure that's right

1279
00:45:46,319 --> 00:45:51,029
so how can we do that you can get

1280
00:45:49,049 --> 00:45:52,319
involved career this is an open source

1281
00:45:51,029 --> 00:45:54,269
project and there are a lot of people

1282
00:45:52,319 --> 00:45:55,979
who are involved in just working in

1283
00:45:54,269 --> 00:45:58,229
different special interest groups or

1284
00:45:55,979 --> 00:46:02,538
groups but with focus on particular

1285
00:45:58,229 --> 00:46:05,908
areas I'll put a link in here in frere

1286
00:46:02,539 --> 00:46:08,489
okay so kubernetes is a really wonderful

1287
00:46:05,909 --> 00:46:10,019
friendly welcoming community that is

1288
00:46:08,489 --> 00:46:12,059
really good to its contributors and

1289
00:46:10,019 --> 00:46:13,859
tends to be very full of happy

1290
00:46:12,059 --> 00:46:15,869
developers who don't think like security

1291
00:46:13,859 --> 00:46:18,479
people I think some of its design

1292
00:46:15,869 --> 00:46:20,669
decisions could perhaps you know you

1293
00:46:18,479 --> 00:46:21,899
could think about it in that light so

1294
00:46:20,669 --> 00:46:23,368
and what that also means is that

1295
00:46:21,899 --> 00:46:24,449
kubernetes really needs to have

1296
00:46:23,369 --> 00:46:26,309
contributors who can think like

1297
00:46:24,449 --> 00:46:27,430
attackers it really helps a lot because

1298
00:46:26,309 --> 00:46:28,599
people are open to it

1299
00:46:27,430 --> 00:46:31,118
they don't necessarily know how to do

1300
00:46:28,599 --> 00:46:32,500
that so we want to encourage security

1301
00:46:31,119 --> 00:46:35,020
minded folks to come get involved in the

1302
00:46:32,500 --> 00:46:37,030
open source project if you do research

1303
00:46:35,020 --> 00:46:39,220
on kubernetes there is vulnerability

1304
00:46:37,030 --> 00:46:41,589
disclosure info leaked on the slide a

1305
00:46:39,220 --> 00:46:44,290
bug bounty program I think is coming

1306
00:46:41,589 --> 00:46:45,490
down the pike eventually and this week

1307
00:46:44,290 --> 00:46:48,609
like yesterday

1308
00:46:45,490 --> 00:46:50,439
anyway there was a third-party code

1309
00:46:48,609 --> 00:46:51,790
audit and there were a lot of

1310
00:46:50,440 --> 00:46:53,170
interesting findings coming out of there

1311
00:46:51,790 --> 00:46:54,790
that are most certainly worth reading

1312
00:46:53,170 --> 00:46:56,349
that are also linked on this slide I

1313
00:46:54,790 --> 00:46:57,579
just realized it's - on that slide

1314
00:46:56,349 --> 00:46:59,380
though if you do want to see the kids

1315
00:46:57,579 --> 00:47:02,500
audit which is that third party and the

1316
00:46:59,380 --> 00:47:07,960
result of that audit it's a cage - audit

1317
00:47:02,500 --> 00:47:10,480
okay it's - and yeah come get involved

1318
00:47:07,960 --> 00:47:12,670
and get in touch with us I'm on

1319
00:47:10,480 --> 00:47:15,420
kubernetes lacus cold water I'm miss

1320
00:47:12,670 --> 00:47:18,430
Amelia Lyon and yeah we'd love to help

1321
00:47:15,420 --> 00:47:19,900
so just send that here are the black hat

1322
00:47:18,430 --> 00:47:21,790
soundbites the takeaways that we want

1323
00:47:19,900 --> 00:47:23,950
you to have from this check your

1324
00:47:21,790 --> 00:47:28,750
assumptions kubernetes is not secured by

1325
00:47:23,950 --> 00:47:30,790
default green use is a complex system

1326
00:47:28,750 --> 00:47:32,680
with lots of moving parts and it's going

1327
00:47:30,790 --> 00:47:33,819
to take some configuration to action to

1328
00:47:32,680 --> 00:47:35,290
actually get that thing up and running

1329
00:47:33,819 --> 00:47:37,720
but go ahead

1330
00:47:35,290 --> 00:47:39,460
but understanding well how the system

1331
00:47:37,720 --> 00:47:43,089
works on a deep level can help you both

1332
00:47:39,460 --> 00:47:44,470
as an operator and as an attacker and it

1333
00:47:43,089 --> 00:47:46,029
is possible to make cooper days more

1334
00:47:44,470 --> 00:47:46,770
secure but you do have to put in that

1335
00:47:46,030 --> 00:47:48,760
work

1336
00:47:46,770 --> 00:47:50,170
so put admission control on your

1337
00:47:48,760 --> 00:47:52,240
clusters come get involved in the

1338
00:47:50,170 --> 00:47:54,849
project with us then we have our

1339
00:47:52,240 --> 00:47:56,140
resources up in the resources link so if

1340
00:47:54,849 --> 00:47:58,150
you want to see how I went about doing

1341
00:47:56,140 --> 00:47:59,770
the demos or explore any of that stuff

1342
00:47:58,150 --> 00:48:02,380
you can visit that URL for more

1343
00:47:59,770 --> 00:48:04,290
information we want to thank all of you

1344
00:48:02,380 --> 00:48:07,920
for coming this has been amazing and

1345
00:48:04,290 --> 00:48:07,920
yeah thank you very much

