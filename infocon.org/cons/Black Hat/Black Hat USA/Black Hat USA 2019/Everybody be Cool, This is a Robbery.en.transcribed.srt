1
00:00:00,030 --> 00:00:04,020
good afternoon everybody we're glad

2
00:00:01,890 --> 00:00:06,330
you're here for this session this is my

3
00:00:04,019 --> 00:00:09,000
favorite session of the day my favorite

4
00:00:06,330 --> 00:00:10,860
session of blackhat in fact one note in

5
00:00:09,000 --> 00:00:12,900
advance please silence all of your

6
00:00:10,860 --> 00:00:14,790
mobile devices if there are too many

7
00:00:12,900 --> 00:00:16,109
interruptions from calls during the talk

8
00:00:14,790 --> 00:00:17,310
we're gonna lock the doors and start

9
00:00:16,109 --> 00:00:18,449
again from scratch since we're recording

10
00:00:17,310 --> 00:00:21,419
this we're going to get a nice good

11
00:00:18,449 --> 00:00:23,279
recording if you haven't yet stopped by

12
00:00:21,420 --> 00:00:25,680
the business hall located in Mandalay

13
00:00:23,279 --> 00:00:27,359
Bay Oceanside and shoreline ballrooms on

14
00:00:25,680 --> 00:00:28,769
level two I think you're pretty much out

15
00:00:27,359 --> 00:00:30,570
of time you'll need to run over there at

16
00:00:28,769 --> 00:00:32,098
the end of the talk but I think you have

17
00:00:30,570 --> 00:00:34,950
a little bit more time to stop by the

18
00:00:32,098 --> 00:00:36,839
merchandise store on level two and on

19
00:00:34,950 --> 00:00:39,030
every level including right outside here

20
00:00:36,840 --> 00:00:43,350
you can get the session recordings from

21
00:00:39,030 --> 00:00:45,120
s okay my name is dr. John Griffin and

22
00:00:43,350 --> 00:00:47,160
it is my distinct pleasure to welcome

23
00:00:45,120 --> 00:00:48,269
you to the Islander AI ballroom

24
00:00:47,160 --> 00:00:51,839
hopefully you're in the right place for

25
00:00:48,270 --> 00:00:53,940
today's talk on everybody be cool this

26
00:00:51,840 --> 00:00:55,890
is a robbery as you know not every black

27
00:00:53,940 --> 00:00:57,269
hat talk has a title as cool as that so

28
00:00:55,890 --> 00:00:59,280
I'm expecting the talk will be just as

29
00:00:57,270 --> 00:01:01,680
good and is my great pleasure to

30
00:00:59,280 --> 00:01:05,780
introduce to you Jon batiste bedroom and

31
00:01:01,680 --> 00:01:09,859
galia Gabriel company

32
00:01:05,780 --> 00:01:09,859
[Applause]

33
00:01:27,560 --> 00:01:33,620
hi everyone I am Jon batiste this is

34
00:01:31,070 --> 00:01:38,259
Gabrielle and today we'll talk about the

35
00:01:33,620 --> 00:01:39,470
security of HSN so we must walk at the

36
00:01:38,260 --> 00:01:41,930
dojo

37
00:01:39,470 --> 00:01:43,910
which is a religious security team and

38
00:01:41,930 --> 00:01:48,320
our daily job is to assess the security

39
00:01:43,910 --> 00:01:50,420
of our products and also to evaluate the

40
00:01:48,320 --> 00:01:52,669
security of these of the products that

41
00:01:50,420 --> 00:01:55,010
are integrated in our solutions they can

42
00:01:52,670 --> 00:02:01,399
be third party products and for this

43
00:01:55,010 --> 00:02:03,680
reason we had to evaluate an HSN and we

44
00:02:01,399 --> 00:02:09,070
will present today the results of this

45
00:02:03,680 --> 00:02:13,040
evaluation so first I will explain

46
00:02:09,070 --> 00:02:15,769
briefly what what is an HSN hardware

47
00:02:13,040 --> 00:02:19,010
security module and I will detail the

48
00:02:15,770 --> 00:02:22,370
specificities of the HSM we assess then

49
00:02:19,010 --> 00:02:26,149
most of our as most of our research is

50
00:02:22,370 --> 00:02:28,310
about the pse pse 11 the Europe the HSM

51
00:02:26,150 --> 00:02:32,630
I will explain I will detail the

52
00:02:28,310 --> 00:02:35,150
standard we had to develop a few tools

53
00:02:32,630 --> 00:02:40,040
to have a better understanding of the

54
00:02:35,150 --> 00:02:41,450
internals of the device and to is the

55
00:02:40,040 --> 00:02:43,670
even our which is discovery and the

56
00:02:41,450 --> 00:02:46,609
expectation we will present them briefly

57
00:02:43,670 --> 00:02:51,140
and we'll talk about the vulnerability

58
00:02:46,610 --> 00:02:55,010
discovery and exploitation eventually we

59
00:02:51,140 --> 00:02:58,279
will show how we broke the integrity of

60
00:02:55,010 --> 00:03:02,179
the device our winners to install any

61
00:02:58,280 --> 00:03:05,650
firmware on the HSM and how to implant a

62
00:03:02,180 --> 00:03:12,440
persistent backdoor does that survive a

63
00:03:05,650 --> 00:03:16,310
firmware upgrade so let's go so what is

64
00:03:12,440 --> 00:03:20,180
an HSN the goal of an HSM is to protect

65
00:03:16,310 --> 00:03:22,579
you your keys your encryption keys so it

66
00:03:20,180 --> 00:03:26,000
is a security and cloud that is able to

67
00:03:22,579 --> 00:03:28,400
generate to stop and to use your secrets

68
00:03:26,000 --> 00:03:32,870
to perform cryptographic operations with

69
00:03:28,400 --> 00:03:35,900
them so the main idea is that the keys

70
00:03:32,870 --> 00:03:38,750
never leave the device they stay always

71
00:03:35,900 --> 00:03:42,050
most all most of the time actually in

72
00:03:38,750 --> 00:03:44,990
in the memory on the of the hsm or on

73
00:03:42,050 --> 00:03:48,440
the person storage of the device so this

74
00:03:44,990 --> 00:03:51,910
an HSM can be either an internal card

75
00:03:48,440 --> 00:03:54,470
like a PCI Express card these are

76
00:03:51,910 --> 00:03:57,049
external device such as a network

77
00:03:54,470 --> 00:04:02,030
appliance most of the time and it's

78
00:03:57,050 --> 00:04:05,960
composed of standard components plus one

79
00:04:02,030 --> 00:04:08,180
or more crypto processes to speed up

80
00:04:05,960 --> 00:04:10,910
cryptographic operations or to make them

81
00:04:08,180 --> 00:04:13,820
more secure to avoid side-channel

82
00:04:10,910 --> 00:04:16,548
attacks things like that and most of

83
00:04:13,820 --> 00:04:18,589
them also have anti tempering called

84
00:04:16,548 --> 00:04:21,260
contra measles that means that if you

85
00:04:18,589 --> 00:04:23,419
try to attack the hsm physically it will

86
00:04:21,260 --> 00:04:28,969
delete itself it will delete all of its

87
00:04:23,420 --> 00:04:33,410
secrets and you will get nothing so when

88
00:04:28,970 --> 00:04:37,310
this device are used actually when your

89
00:04:33,410 --> 00:04:41,750
keys I are highly sensitive the major

90
00:04:37,310 --> 00:04:44,150
example is the public infrastructure so

91
00:04:41,750 --> 00:04:47,270
actually all of your certificate

92
00:04:44,150 --> 00:04:50,030
authorities use HSM to deliver

93
00:04:47,270 --> 00:04:53,359
certificates so private key of the

94
00:04:50,030 --> 00:04:56,869
certificate authorities is always stored

95
00:04:53,360 --> 00:04:59,870
in HSM and that will be this device that

96
00:04:56,870 --> 00:05:02,840
will generate the certificates that will

97
00:04:59,870 --> 00:05:07,730
sign the certificates they can be also

98
00:05:02,840 --> 00:05:10,849
used in banking banking environments to

99
00:05:07,730 --> 00:05:14,270
personalize the credit your credit card

100
00:05:10,850 --> 00:05:18,520
or to verify your CVV or your PIN

101
00:05:14,270 --> 00:05:23,390
Collinson and so can can be also used in

102
00:05:18,520 --> 00:05:26,599
telecom operators for example there they

103
00:05:23,390 --> 00:05:30,020
are always used in by operators actually

104
00:05:26,600 --> 00:05:36,590
to authenticate you on the mobile

105
00:05:30,020 --> 00:05:38,450
network so so almost everywhere in

106
00:05:36,590 --> 00:05:40,869
corporate environments when you have to

107
00:05:38,450 --> 00:05:45,530
manage long term keys but they are not

108
00:05:40,870 --> 00:05:48,200
were studied in security why I'd say for

109
00:05:45,530 --> 00:05:51,440
two reasons the first one is that this

110
00:05:48,200 --> 00:05:52,190
is an expensive device so I'm a research

111
00:05:51,440 --> 00:05:56,510
lab cannot

112
00:05:52,190 --> 00:05:58,610
by a device just for testing and the

113
00:05:56,510 --> 00:06:01,789
second one is that there are most of the

114
00:05:58,610 --> 00:06:04,730
time in production and they are often

115
00:06:01,790 --> 00:06:08,720
disconnected from from the corporate

116
00:06:04,730 --> 00:06:11,450
network and they contain long time

117
00:06:08,720 --> 00:06:13,820
secrets that cannot be erased so so most

118
00:06:11,450 --> 00:06:17,060
of the time out of the scope during pen

119
00:06:13,820 --> 00:06:19,010
test because if you attack it's a bit

120
00:06:17,060 --> 00:06:21,170
too much all of its secrets will be

121
00:06:19,010 --> 00:06:25,849
deleted and that's not a good thing for

122
00:06:21,170 --> 00:06:28,940
for companies obviously so here is the

123
00:06:25,850 --> 00:06:31,640
hsm we assess this is a PCI Express card

124
00:06:28,940 --> 00:06:34,370
you can see it on the right which is

125
00:06:31,640 --> 00:06:36,140
sensor card in red on the right and what

126
00:06:34,370 --> 00:06:39,620
you can see is that you using your

127
00:06:36,140 --> 00:06:42,349
finger clearly it's fully black why

128
00:06:39,620 --> 00:06:44,060
because it is coated in epoxy resin so

129
00:06:42,350 --> 00:06:46,880
all the components are coated and you

130
00:06:44,060 --> 00:06:52,180
cannot access them directly

131
00:06:46,880 --> 00:06:57,080
this HSM is certified FIPS 140-2 level 3

132
00:06:52,180 --> 00:06:59,030
I'd say a bit later what it is and the

133
00:06:57,080 --> 00:07:02,690
same model also exists as a network

134
00:06:59,030 --> 00:07:05,630
reply appliance so the only difference

135
00:07:02,690 --> 00:07:08,000
between the two models is that the this

136
00:07:05,630 --> 00:07:11,930
model does not have internet connector

137
00:07:08,000 --> 00:07:16,850
and budget as a it's not controller so I

138
00:07:11,930 --> 00:07:19,220
think also G also applies on the network

139
00:07:16,850 --> 00:07:21,770
appliance version of the HSM but we are

140
00:07:19,220 --> 00:07:25,580
not sure this so installed the card in a

141
00:07:21,770 --> 00:07:27,320
standard linux server install the tools

142
00:07:25,580 --> 00:07:29,030
provided by the vendor confirm our

143
00:07:27,320 --> 00:07:33,620
current modules and command line

144
00:07:29,030 --> 00:07:35,270
utilities and we started our analysis so

145
00:07:33,620 --> 00:07:37,760
looking at the source code of the

146
00:07:35,270 --> 00:07:40,760
drivers to understand the communication

147
00:07:37,760 --> 00:07:44,030
between the host the linux server and

148
00:07:40,760 --> 00:07:46,039
the HSM so actually the the

149
00:07:44,030 --> 00:07:48,080
communication is done by reading and

150
00:07:46,040 --> 00:07:51,320
writing to share DRAM which is talk

151
00:07:48,080 --> 00:07:55,940
which is on the PCI card on the on the

152
00:07:51,320 --> 00:07:57,810
HSN card and by reading and writing data

153
00:07:55,940 --> 00:08:00,360
you can have a

154
00:07:57,810 --> 00:08:02,310
basic communication stuff so all the

155
00:08:00,360 --> 00:08:06,389
communication is initiated by the host

156
00:08:02,310 --> 00:08:09,870
by the server the hsm received this

157
00:08:06,389 --> 00:08:12,570
buffer process it and write its response

158
00:08:09,870 --> 00:08:14,760
to join the buffer and send it back

159
00:08:12,570 --> 00:08:18,060
which is read back by the server so it

160
00:08:14,760 --> 00:08:22,320
can be seen as cry standard crying

161
00:08:18,060 --> 00:08:26,580
server communication I will now make a

162
00:08:22,320 --> 00:08:28,889
small demo of what we did we are in the

163
00:08:26,580 --> 00:08:31,919
context when an attacker controls the

164
00:08:28,889 --> 00:08:34,680
host the Linux server and it can

165
00:08:31,919 --> 00:08:36,088
communicate with the PCI crack card but

166
00:08:34,679 --> 00:08:39,390
she has no logging information so

167
00:08:36,089 --> 00:08:46,650
actually can normally do nothing on the

168
00:08:39,390 --> 00:08:49,170
on the HSM so here it is you can see on

169
00:08:46,650 --> 00:08:52,680
the on the left the shell of the attack

170
00:08:49,170 --> 00:08:54,810
attacker and on the right a tool a

171
00:08:52,680 --> 00:08:56,849
monitoring tool we we wrote to

172
00:08:54,810 --> 00:08:59,609
understand what's going on a bit on the

173
00:08:56,850 --> 00:09:03,180
HSM so you can see on the on the right

174
00:08:59,610 --> 00:09:04,950
that the authentication that always

175
00:09:03,180 --> 00:09:07,410
failed because the attacker has no real

176
00:09:04,950 --> 00:09:12,300
information and is now running an

177
00:09:07,410 --> 00:09:17,329
exploit so you start to do a bit of

178
00:09:12,300 --> 00:09:20,359
weaknesses in event stuff and manages to

179
00:09:17,330 --> 00:09:23,520
take a bit of control of the of the HSM

180
00:09:20,360 --> 00:09:25,860
you can see now that shellcode has been

181
00:09:23,520 --> 00:09:29,010
executed on the SSM and the login

182
00:09:25,860 --> 00:09:35,760
authentication on the right succeeded

183
00:09:29,010 --> 00:09:38,250
now finally a new module is uploaded on

184
00:09:35,760 --> 00:09:41,400
the HSM we upload some code on it and

185
00:09:38,250 --> 00:09:44,910
the HSM is a reset source ah no

186
00:09:41,400 --> 00:09:47,610
communication with it now once it has

187
00:09:44,910 --> 00:09:50,699
been reset a new module has been loaded

188
00:09:47,610 --> 00:09:53,400
and the attacker has no full control of

189
00:09:50,700 --> 00:09:56,960
the device you can now for example list

190
00:09:53,400 --> 00:09:59,640
the processes on it and we can see that

191
00:09:56,960 --> 00:10:04,200
you can run these commands with root

192
00:09:59,640 --> 00:10:06,000
privileges so this is a full takeover of

193
00:10:04,200 --> 00:10:08,640
the device and we will explain later

194
00:10:06,000 --> 00:10:10,770
what can we what we can do with the

195
00:10:08,640 --> 00:10:13,800
wizard

196
00:10:10,770 --> 00:10:17,790
so as I said before our HSM is certified

197
00:10:13,800 --> 00:10:22,050
and actually the standard is doesn't

198
00:10:17,790 --> 00:10:23,520
give much information doesn't give much

199
00:10:22,050 --> 00:10:26,040
guarantee about the security of this

200
00:10:23,520 --> 00:10:28,260
software running on the device because

201
00:10:26,040 --> 00:10:32,099
it level 1 certification just means that

202
00:10:28,260 --> 00:10:35,399
your device as an approved encryption

203
00:10:32,100 --> 00:10:39,630
algorithm so if it does like AES

204
00:10:35,399 --> 00:10:43,790
correctly it can be certified the above

205
00:10:39,630 --> 00:10:47,850
levels just mean that your device is

206
00:10:43,790 --> 00:10:49,949
protected against physical attacks so if

207
00:10:47,850 --> 00:10:53,100
you try to attack physically you use a

208
00:10:49,950 --> 00:10:55,680
device usually with a certain

209
00:10:53,100 --> 00:10:58,260
probability this attack will be detected

210
00:10:55,680 --> 00:11:02,279
and all the sensitive data will be

211
00:10:58,260 --> 00:11:06,649
erased from the device so this is not a

212
00:11:02,279 --> 00:11:06,649
certification about software attacks

213
00:11:07,850 --> 00:11:14,040
so that's I will now explain

214
00:11:10,459 --> 00:11:16,859
PCCs 11 as as I said before most of our

215
00:11:14,040 --> 00:11:19,529
research is about the standard so what

216
00:11:16,860 --> 00:11:21,450
is ptcs 11 it is a generic interface to

217
00:11:19,529 --> 00:11:24,149
communicate with a cryptographic device

218
00:11:21,450 --> 00:11:27,089
this device can be either our smart card

219
00:11:24,149 --> 00:11:28,589
for example an HSM actually any device

220
00:11:27,089 --> 00:11:31,980
that is able to perform cryptographic

221
00:11:28,589 --> 00:11:34,050
operations and this standard defines a

222
00:11:31,980 --> 00:11:39,510
possible API which is called crypto key

223
00:11:34,050 --> 00:11:41,130
and this API tells us gives us is the

224
00:11:39,510 --> 00:11:43,890
ability to perform cryptographic

225
00:11:41,130 --> 00:11:46,820
operations on the device like encrypting

226
00:11:43,890 --> 00:11:50,870
data or decrypting data generating

227
00:11:46,820 --> 00:11:54,899
generating digital signatures and so on

228
00:11:50,870 --> 00:11:57,990
so the API in itself is not very rich so

229
00:11:54,899 --> 00:12:00,839
a few few dozen functions like 70

230
00:11:57,990 --> 00:12:03,720
functions but most of these functions

231
00:12:00,839 --> 00:12:05,720
can can be parameterized using

232
00:12:03,720 --> 00:12:09,089
mechanisms and there are lot of

233
00:12:05,720 --> 00:12:13,079
mechanisms more than 300 in the standard

234
00:12:09,089 --> 00:12:17,270
and vendors also add their own

235
00:12:13,079 --> 00:12:20,550
mechanisms to enrich the API so this

236
00:12:17,270 --> 00:12:23,069
actually gives us good attacks good

237
00:12:20,550 --> 00:12:26,649
attack surface for for the device

238
00:12:23,069 --> 00:12:28,000
so what are mechanisms mechanisms define

239
00:12:26,649 --> 00:12:30,579
how to perform a cryptographic

240
00:12:28,000 --> 00:12:32,740
operations so the mechanism for

241
00:12:30,579 --> 00:12:35,290
encryption decryption jutted natural

242
00:12:32,740 --> 00:12:38,790
killer key in the relation children

243
00:12:35,290 --> 00:12:42,430
generation and son and these mechanisms

244
00:12:38,790 --> 00:12:44,469
depend on the device so for example on a

245
00:12:42,430 --> 00:12:47,290
smart card you will have a few mechanism

246
00:12:44,470 --> 00:12:50,110
to one on one auto mechanism to encrypt

247
00:12:47,290 --> 00:12:52,599
data for example use AES or Frida's or

248
00:12:50,110 --> 00:12:55,899
to general one mechanism to generate an

249
00:12:52,600 --> 00:13:00,370
RSA key and one mechanism to sign with

250
00:12:55,899 --> 00:13:02,350
this recipe and that's mainly everything

251
00:13:00,370 --> 00:13:04,899
you have on a smart card on the contrary

252
00:13:02,350 --> 00:13:08,350
on the HSN you will have a lot of

253
00:13:04,899 --> 00:13:10,720
mechanisms because it's a device which

254
00:13:08,350 --> 00:13:13,379
is far more rich you will have

255
00:13:10,720 --> 00:13:16,540
mechanisms for authentication encryption

256
00:13:13,379 --> 00:13:18,579
like for extensions for typo operators

257
00:13:16,540 --> 00:13:18,849
extensions for the banking world and so

258
00:13:18,579 --> 00:13:21,609
on

259
00:13:18,850 --> 00:13:25,709
so actually the the attacks of ice is

260
00:13:21,610 --> 00:13:30,459
quite huge as well as we will see later

261
00:13:25,709 --> 00:13:33,189
these mechanisms walk on objects what

262
00:13:30,459 --> 00:13:35,138
are objects there are three kinds of

263
00:13:33,189 --> 00:13:37,269
objects defined by the standard then

264
00:13:35,139 --> 00:13:40,569
they can be either keys these are

265
00:13:37,269 --> 00:13:42,189
certificates or is a data data data is

266
00:13:40,569 --> 00:13:45,240
not that much interesting so often

267
00:13:42,189 --> 00:13:47,920
domain parameters for GSA or ECDSA

268
00:13:45,240 --> 00:13:50,819
what's interesting for us obviously are

269
00:13:47,920 --> 00:13:55,439
the keys and mainly the private keys and

270
00:13:50,819 --> 00:13:59,349
the secret keys so the objects are not

271
00:13:55,439 --> 00:14:01,509
manipulated directly by PT PT she has 11

272
00:13:59,350 --> 00:14:05,559
clients there are manipulated to say

273
00:14:01,509 --> 00:14:08,079
handle we explain now how cryptographic

274
00:14:05,559 --> 00:14:10,600
operation is done on the HSM so first on

275
00:14:08,079 --> 00:14:12,279
the left you have a client that's well

276
00:14:10,600 --> 00:14:15,339
that want to encrypt that data with a

277
00:14:12,279 --> 00:14:17,889
key first it will ask the HSM to

278
00:14:15,339 --> 00:14:22,180
generate a key the HSM with generate

279
00:14:17,889 --> 00:14:26,290
this key and store is value in his

280
00:14:22,180 --> 00:14:29,709
memory then it will return return handle

281
00:14:26,290 --> 00:14:32,740
to the client the client sir then we

282
00:14:29,709 --> 00:14:33,660
will start an encryption operation using

283
00:14:32,740 --> 00:14:36,480
this handle

284
00:14:33,660 --> 00:14:39,509
it will then send the data to be

285
00:14:36,480 --> 00:14:42,240
encrypted and the HSM will return the

286
00:14:39,509 --> 00:14:45,810
encrypted data so as you can see the key

287
00:14:42,240 --> 00:14:49,680
is never revealed to the clients it

288
00:14:45,810 --> 00:14:52,138
stays in the HSM space and we will see

289
00:14:49,680 --> 00:14:56,099
that normally there's no way to extract

290
00:14:52,139 --> 00:14:59,370
it in certain conditions the object is

291
00:14:56,100 --> 00:15:02,459
actually composed of several attributes

292
00:14:59,370 --> 00:15:06,630
each objects as a class in that case

293
00:15:02,459 --> 00:15:08,670
this is a private key and it has virus

294
00:15:06,630 --> 00:15:11,009
attributes that depends on that class

295
00:15:08,670 --> 00:15:15,000
for example the value of the keys and

296
00:15:11,009 --> 00:15:17,550
attributes it has also an attribute

297
00:15:15,000 --> 00:15:21,560
telling that this key can be used to

298
00:15:17,550 --> 00:15:24,630
sign data it has no attribute to say

299
00:15:21,560 --> 00:15:27,209
that says that that key can be used to

300
00:15:24,630 --> 00:15:31,639
encrypt data so actually this is just a

301
00:15:27,209 --> 00:15:34,589
signing key and this is more example and

302
00:15:31,639 --> 00:15:37,079
what I want to say here it does is that

303
00:15:34,589 --> 00:15:41,009
attributes are actually critical for

304
00:15:37,079 --> 00:15:43,050
security I will mention free attributes

305
00:15:41,009 --> 00:15:45,779
now the first one is the private

306
00:15:43,050 --> 00:15:49,709
attribute if an object has this

307
00:15:45,779 --> 00:15:54,380
attribute it means that it cannot be

308
00:15:49,709 --> 00:15:54,380
accessed until a user is authenticated

309
00:15:54,949 --> 00:16:00,029
now this sensitive attribute if an

310
00:15:57,480 --> 00:16:03,329
object is sensitive that means its value

311
00:16:00,029 --> 00:16:06,990
which is often the secret value for a

312
00:16:03,329 --> 00:16:09,508
key means that this value cannot be

313
00:16:06,990 --> 00:16:11,970
extracted directly it must be wrought

314
00:16:09,509 --> 00:16:14,279
that means encapsulated using another

315
00:16:11,970 --> 00:16:17,910
encryption key which is usually stored

316
00:16:14,279 --> 00:16:20,189
on the HSM so the plaintext value of the

317
00:16:17,910 --> 00:16:24,680
key is never revealed from the outside

318
00:16:20,189 --> 00:16:27,569
of the HSM then I'll talk about the

319
00:16:24,680 --> 00:16:31,199
extractable attributes if that attribute

320
00:16:27,569 --> 00:16:33,300
is set that means is not that that means

321
00:16:31,199 --> 00:16:36,449
that the value of the key cannot be

322
00:16:33,300 --> 00:16:38,639
extracted at all even Rutte so it stays

323
00:16:36,449 --> 00:16:47,079
in the memory and of the HSM and it

324
00:16:38,639 --> 00:16:50,140
cannot be sent to a client so it's every

325
00:16:47,080 --> 00:16:52,840
eggs are bound to a to a token actually

326
00:16:50,140 --> 00:16:56,110
when the client connects to the HSM or

327
00:16:52,840 --> 00:17:00,970
to a smart card it will open the slot

328
00:16:56,110 --> 00:17:04,540
and will get access to a token every

329
00:17:00,970 --> 00:17:07,390
object belong to token and when a user

330
00:17:04,540 --> 00:17:09,940
connect to a token he has only access to

331
00:17:07,390 --> 00:17:13,810
the objects that are present in the in

332
00:17:09,940 --> 00:17:18,610
that token so for example if a user

333
00:17:13,810 --> 00:17:20,169
connects to the token on the Left you

334
00:17:18,609 --> 00:17:22,869
will not be able to access to the

335
00:17:20,170 --> 00:17:25,930
objects that have stolen the deterrent a

336
00:17:22,869 --> 00:17:28,208
token of on the right so I was a logical

337
00:17:25,930 --> 00:17:32,140
separation between between objects in

338
00:17:28,209 --> 00:17:34,600
the standard that allows us to define a

339
00:17:32,140 --> 00:17:36,850
threat model for the HSM basic basic

340
00:17:34,600 --> 00:17:39,370
threat model so for example an attacker

341
00:17:36,850 --> 00:17:42,550
who does not vote indicates it to the

342
00:17:39,370 --> 00:17:44,469
HSA is not able to extract private

343
00:17:42,550 --> 00:17:46,720
objects and attica that connects to us

344
00:17:44,470 --> 00:17:49,300
given thread must not be able to connect

345
00:17:46,720 --> 00:17:52,570
to other slots and so on but we will

346
00:17:49,300 --> 00:17:55,149
consider much simpler model we will tell

347
00:17:52,570 --> 00:17:58,090
we will consider this a case where an

348
00:17:55,150 --> 00:18:00,970
attacker is not authenticated and we

349
00:17:58,090 --> 00:18:03,490
want to be able to dump out all these

350
00:18:00,970 --> 00:18:09,550
secrets for all the objects and all of

351
00:18:03,490 --> 00:18:13,380
these secrets from all the slots so the

352
00:18:09,550 --> 00:18:16,690
security of crypto key has been

353
00:18:13,380 --> 00:18:19,150
extensively extensively detailed in the

354
00:18:16,690 --> 00:18:20,670
past but our contribution is a bit

355
00:18:19,150 --> 00:18:23,880
different is it quite different actually

356
00:18:20,670 --> 00:18:27,790
we do not concentrate on the standard

357
00:18:23,880 --> 00:18:30,550
but on a specific implementation and we

358
00:18:27,790 --> 00:18:34,090
also detail the internals of an HSM

359
00:18:30,550 --> 00:18:35,580
which I think has not as never been done

360
00:18:34,090 --> 00:18:37,929
before

361
00:18:35,580 --> 00:18:42,220
so let's do with the vulnerability

362
00:18:37,930 --> 00:18:44,770
research and exploitation so we consider

363
00:18:42,220 --> 00:18:46,720
the case where an attacker is able to

364
00:18:44,770 --> 00:18:48,940
communicate with the HSM has taken

365
00:18:46,720 --> 00:18:50,860
control of zeroes for example by

366
00:18:48,940 --> 00:18:54,010
exploiting a service exposing the host

367
00:18:50,860 --> 00:18:58,110
and so something like that

368
00:18:54,010 --> 00:18:58,110
we started our analysis by

369
00:18:58,179 --> 00:19:04,669
analyzing these tools provided by rabbis

370
00:19:02,179 --> 00:19:06,770
even though there was an interesting

371
00:19:04,669 --> 00:19:08,870
documentation which was fairly complete

372
00:19:06,770 --> 00:19:12,020
one for the developers one for the

373
00:19:08,870 --> 00:19:13,729
administrators and a few examples and so

374
00:19:12,020 --> 00:19:16,129
on but what was really interesting for

375
00:19:13,730 --> 00:19:18,440
us was that there was a few more date

376
00:19:16,130 --> 00:19:21,890
provided by the vendor and that fimo

377
00:19:18,440 --> 00:19:24,710
update was just signed not encrypted and

378
00:19:21,890 --> 00:19:27,860
it was quite easy easy to extract first

379
00:19:24,710 --> 00:19:30,250
thing thing we saw is that it was

380
00:19:27,860 --> 00:19:34,039
running and not Linux scanner whirring

381
00:19:30,250 --> 00:19:35,960
released ten years ago so we were quite

382
00:19:34,039 --> 00:19:41,360
sure that not everything was up to date

383
00:19:35,960 --> 00:19:43,279
on this device the device as if my was

384
00:19:41,360 --> 00:19:46,939
composed of very few binary reason only

385
00:19:43,279 --> 00:19:49,429
one executable thing and the quite big

386
00:19:46,940 --> 00:19:50,929
crypto library cryptic a library that

387
00:19:49,429 --> 00:19:56,090
contains all the crypto key

388
00:19:50,929 --> 00:19:58,250
implementation and the code was not very

389
00:19:56,090 --> 00:20:01,970
difficult to understand but it was quite

390
00:19:58,250 --> 00:20:10,220
sure so huge so we spent quite several

391
00:20:01,970 --> 00:20:14,929
weeks to really understand it one of the

392
00:20:10,220 --> 00:20:17,210
unexpected option on this HSM we were

393
00:20:14,929 --> 00:20:21,590
quite happy with that with that is that

394
00:20:17,210 --> 00:20:24,890
this HSM can rot can run from party code

395
00:20:21,590 --> 00:20:27,889
you can upload modules on it that will

396
00:20:24,890 --> 00:20:31,480
be executed on the device so this is not

397
00:20:27,890 --> 00:20:34,610
reality at all it's really a feature and

398
00:20:31,480 --> 00:20:38,899
it requires I need privileges to to load

399
00:20:34,610 --> 00:20:41,240
code on it the standard use for this is

400
00:20:38,899 --> 00:20:43,399
to add new mechanisms for example or to

401
00:20:41,240 --> 00:20:44,929
isolate code from from the host if you

402
00:20:43,399 --> 00:20:46,820
have a super-secret I've read them and

403
00:20:44,929 --> 00:20:49,549
you don't want to be exposed on the host

404
00:20:46,820 --> 00:20:52,668
you upload it on the HSM in it will be

405
00:20:49,549 --> 00:20:56,139
directly executed on the device and

406
00:20:52,669 --> 00:20:58,880
never revealed to to the host

407
00:20:56,140 --> 00:21:02,210
modules actually libraries that are

408
00:20:58,880 --> 00:21:04,700
loaded by the main exactly executable of

409
00:21:02,210 --> 00:21:09,649
the HSM and they run on the on the

410
00:21:04,700 --> 00:21:10,550
context of the main executable as I said

411
00:21:09,649 --> 00:21:13,340
there was

412
00:21:10,550 --> 00:21:15,980
senior binary on the device are we quite

413
00:21:13,340 --> 00:21:18,110
no thing for us and we wanted to have a

414
00:21:15,980 --> 00:21:20,540
better understanding of the internals of

415
00:21:18,110 --> 00:21:23,570
the device so the first model we

416
00:21:20,540 --> 00:21:28,000
developed was a modified version of the

417
00:21:23,570 --> 00:21:31,280
box that was able to run on the device

418
00:21:28,000 --> 00:21:33,740
so we modified the input and output of

419
00:21:31,280 --> 00:21:37,810
the utilities so they pass through the

420
00:21:33,740 --> 00:21:40,820
crypto key Channel and that's what and

421
00:21:37,810 --> 00:21:45,679
we saw that the main process was running

422
00:21:40,820 --> 00:21:48,649
as root and this was quite good and we

423
00:21:45,680 --> 00:21:52,970
saw also that was only one processor

424
00:21:48,650 --> 00:21:55,430
running on on the device we were quite

425
00:21:52,970 --> 00:22:01,280
sure I think just the sheriff was would

426
00:21:55,430 --> 00:22:04,850
not be enough room for exploitation so

427
00:22:01,280 --> 00:22:08,930
we decided to also develop a debugger

428
00:22:04,850 --> 00:22:10,760
for the HSM also in module and we

429
00:22:08,930 --> 00:22:13,190
modified gdb server for it

430
00:22:10,760 --> 00:22:14,930
we lap to gdb server and it was quite

431
00:22:13,190 --> 00:22:16,640
tricky because the only communication

432
00:22:14,930 --> 00:22:19,700
channel is ensured by by the main

433
00:22:16,640 --> 00:22:21,710
process with with the host so if you

434
00:22:19,700 --> 00:22:23,840
debug the main process obviously there

435
00:22:21,710 --> 00:22:26,330
will be no communication at all with the

436
00:22:23,840 --> 00:22:28,429
outside and you will be stuck so we had

437
00:22:26,330 --> 00:22:31,460
to develop a new communication mechanism

438
00:22:28,430 --> 00:22:34,820
with the outside world using against

439
00:22:31,460 --> 00:22:40,460
Raja Ram that was quite tricky but that

440
00:22:34,820 --> 00:22:44,120
finally walked from all of this we were

441
00:22:40,460 --> 00:22:48,380
happy because we were able to debug the

442
00:22:44,120 --> 00:22:52,760
hsm run common indeed it was almost user

443
00:22:48,380 --> 00:22:55,340
friendly and we saw also that everything

444
00:22:52,760 --> 00:22:57,500
was running as root and what was super

445
00:22:55,340 --> 00:22:58,909
interesting for us is that there was no

446
00:22:57,500 --> 00:23:01,010
secure boot on the device that means

447
00:22:58,910 --> 00:23:06,410
that if we are able to modify as if you

448
00:23:01,010 --> 00:23:10,879
are stored on the HSM it will reboot as

449
00:23:06,410 --> 00:23:13,490
no secure boot so let's see if you would

450
00:23:10,880 --> 00:23:16,100
on the storage so already this purpose

451
00:23:13,490 --> 00:23:18,320
and storage is on the flash memory and

452
00:23:16,100 --> 00:23:21,100
that flash memory cannot be accessed

453
00:23:18,320 --> 00:23:25,629
directly as I said it's

454
00:23:21,100 --> 00:23:28,510
by epoxy resin and if you try to to dump

455
00:23:25,630 --> 00:23:33,039
it you have hundred percent chances that

456
00:23:28,510 --> 00:23:34,750
it will erase itself when very

457
00:23:33,039 --> 00:23:38,110
interesting partition on this fresh on

458
00:23:34,750 --> 00:23:41,289
this flash flash storage is the one that

459
00:23:38,110 --> 00:23:45,610
contains the crypto key as a pcs 11

460
00:23:41,289 --> 00:23:48,100
objects they contain all the keys if you

461
00:23:45,610 --> 00:23:51,490
would on the storage actually this

462
00:23:48,100 --> 00:23:54,939
partition uses a proprietary file system

463
00:23:51,490 --> 00:23:56,919
I think this is to ensure secure

464
00:23:54,940 --> 00:24:00,700
deletion of the of the object this as it

465
00:23:56,919 --> 00:24:04,030
is a flash device as I wanted to make

466
00:24:00,700 --> 00:24:06,429
sure that if you really if you delete an

467
00:24:04,030 --> 00:24:09,760
pixels 11 elect it is really deleted

468
00:24:06,429 --> 00:24:11,679
from from the flash so actually on the

469
00:24:09,760 --> 00:24:14,190
flat on this partition object or stop

470
00:24:11,679 --> 00:24:18,159
plaintext but sensitive attributes are

471
00:24:14,190 --> 00:24:20,860
encrypted so if you don't need a flash

472
00:24:18,159 --> 00:24:23,350
you will not get access to the to the

473
00:24:20,860 --> 00:24:26,080
objects right to the interesting value

474
00:24:23,350 --> 00:24:28,449
of the objects actually the encryption

475
00:24:26,080 --> 00:24:32,889
key is thought stored on an external

476
00:24:28,450 --> 00:24:35,980
memory and that memory that component

477
00:24:32,890 --> 00:24:38,200
only holds the encryption key and this

478
00:24:35,980 --> 00:24:41,320
is this component that is immediately

479
00:24:38,200 --> 00:24:45,820
deleted when you try to access the HSM

480
00:24:41,320 --> 00:24:49,059
physically so to be able to dump all the

481
00:24:45,820 --> 00:24:51,928
objects from an HSM from this HSM you

482
00:24:49,059 --> 00:24:55,418
have to them both the key and the

483
00:24:51,929 --> 00:24:56,919
partition of the flash what we can say

484
00:24:55,419 --> 00:25:00,549
also is that there's no logical

485
00:24:56,919 --> 00:25:03,429
separation across the HSM slots so if

486
00:25:00,549 --> 00:25:06,460
you are able to dump the flush and the

487
00:25:03,429 --> 00:25:10,000
key you have access to all the objects

488
00:25:06,460 --> 00:25:13,690
on the device as everything Rinna's root

489
00:25:10,000 --> 00:25:16,419
we can be almost sure that a single code

490
00:25:13,690 --> 00:25:20,730
execution on on the device allows to

491
00:25:16,419 --> 00:25:27,429
dump all of the secrets and that's what

492
00:25:20,730 --> 00:25:29,440
Gabrielle will present now thanks to

493
00:25:27,429 --> 00:25:32,710
properties you know everything about

494
00:25:29,440 --> 00:25:34,570
ages and internals and we know explain

495
00:25:32,710 --> 00:25:37,779
how we did

496
00:25:34,570 --> 00:25:42,668
and RD venerability research and how

497
00:25:37,779 --> 00:25:46,570
about exploit so we first started by

498
00:25:42,669 --> 00:25:50,380
looking for usual vulnerabilities such

499
00:25:46,570 --> 00:25:53,139
as Stack Overflow we did a quick manual

500
00:25:50,380 --> 00:25:58,809
analysis we thought for mem copy calls

501
00:25:53,139 --> 00:26:01,029
with viable size parameters mem copy

502
00:25:58,809 --> 00:26:04,210
calls inside crypto key functions

503
00:26:01,029 --> 00:26:07,450
because these functions I can usually be

504
00:26:04,210 --> 00:26:10,269
called from the host there is only one

505
00:26:07,450 --> 00:26:14,409
function that was on arrival which is

506
00:26:10,269 --> 00:26:17,169
miners derive which is Nathan ocation

507
00:26:14,409 --> 00:26:21,429
algorithm found in universal mobile

508
00:26:17,169 --> 00:26:25,000
telecommunication system here is a pure

509
00:26:21,429 --> 00:26:28,090
code of this function I think as you can

510
00:26:25,000 --> 00:26:33,629
see there is a call to mem copy with a

511
00:26:28,090 --> 00:26:39,580
size with no check on the with no limits

512
00:26:33,629 --> 00:26:42,759
with no check on the size the value is

513
00:26:39,580 --> 00:26:45,908
copied into the stack and the value is

514
00:26:42,759 --> 00:26:48,610
controlled by the attacker which can put

515
00:26:45,909 --> 00:26:51,490
an arbitrary data in the inside this

516
00:26:48,610 --> 00:26:55,479
value thanks to a call to create secret

517
00:26:51,490 --> 00:26:57,820
key so using a few calls to crypto key

518
00:26:55,480 --> 00:27:00,879
functions gaining code execution is

519
00:26:57,820 --> 00:27:01,480
trivial because there is no mitigations

520
00:27:00,879 --> 00:27:04,059
at all

521
00:27:01,480 --> 00:27:08,289
there is no stack cookie and no a seller

522
00:27:04,059 --> 00:27:12,100
for instance however there are a few

523
00:27:08,289 --> 00:27:18,730
drawbacks for instance or assuming

524
00:27:12,100 --> 00:27:21,789
execution is tricky because the critical

525
00:27:18,730 --> 00:27:22,799
data on the stack is overwritten during

526
00:27:21,789 --> 00:27:25,750
the stack overflow

527
00:27:22,799 --> 00:27:29,139
moreover the called who create secret

528
00:27:25,750 --> 00:27:31,840
key requires to be authenticated this

529
00:27:29,139 --> 00:27:35,529
algorithm is only present in recent

530
00:27:31,840 --> 00:27:40,750
version of the family so we started to

531
00:27:35,529 --> 00:27:41,919
look for beta buggs we try to automate

532
00:27:40,750 --> 00:27:46,149
this process

533
00:27:41,919 --> 00:27:47,879
thanks to 13 architecture

534
00:27:46,149 --> 00:27:53,129
we set up

535
00:27:47,879 --> 00:27:59,728
damn phasers we mutated messages are

536
00:27:53,129 --> 00:28:02,609
sent from the host to the hsn.we we

537
00:27:59,729 --> 00:28:05,729
created a destitute thanks to the crypto

538
00:28:02,609 --> 00:28:10,199
key user usage examples which cover

539
00:28:05,729 --> 00:28:15,330
almost every calls to crypto key as I

540
00:28:10,200 --> 00:28:18,029
said 13 strategy is already trivial we

541
00:28:15,330 --> 00:28:21,149
just mutate random byte from the

542
00:28:18,029 --> 00:28:23,190
messenger messages we face two main

543
00:28:21,149 --> 00:28:26,219
challenges the first one is that the

544
00:28:23,190 --> 00:28:29,809
host kernel module that transfers a

545
00:28:26,220 --> 00:28:34,619
messages to the HSM is not super robust

546
00:28:29,809 --> 00:28:39,239
actually a few messages make this model

547
00:28:34,619 --> 00:28:42,749
crash which isn't it convenient to have

548
00:28:39,239 --> 00:28:45,330
an automated further so we had to filter

549
00:28:42,749 --> 00:28:48,269
these messages also a my surgeries

550
00:28:45,330 --> 00:28:52,739
triggered out of memory situation on the

551
00:28:48,269 --> 00:28:55,799
HSM so once again we had to use one of

552
00:28:52,739 --> 00:28:59,820
the modules that we developed before to

553
00:28:55,799 --> 00:29:05,759
modify the configuration of the Linux OS

554
00:28:59,820 --> 00:29:08,700
which is running on the HSM finally we

555
00:29:05,759 --> 00:29:13,019
had completely automated fads in

556
00:29:08,700 --> 00:29:15,779
architecture we found about 15 lunar

557
00:29:13,019 --> 00:29:20,249
abilities all of them being a memory

558
00:29:15,779 --> 00:29:25,080
corruption bags so in the next part of

559
00:29:20,249 --> 00:29:28,109
the presentation I will explain two

560
00:29:25,080 --> 00:29:33,359
tubes that we found the first one is

561
00:29:28,109 --> 00:29:36,720
very close to hardly using crypto key

562
00:29:33,359 --> 00:29:40,199
calls we can create objects on the HSM

563
00:29:36,720 --> 00:29:45,059
we can also set attributes and retrieve

564
00:29:40,200 --> 00:29:48,029
attributes from from these objects here

565
00:29:45,059 --> 00:29:52,200
is the observer code of the function of

566
00:29:48,029 --> 00:29:55,559
a function that is variable there is a

567
00:29:52,200 --> 00:29:58,409
call to malloc in order to allocate the

568
00:29:55,559 --> 00:29:59,720
memory representing the data of an

569
00:29:58,409 --> 00:30:04,200
attribute

570
00:29:59,720 --> 00:30:08,820
if you look closely at Cisco at this

571
00:30:04,200 --> 00:30:11,610
code you will notice that the size given

572
00:30:08,820 --> 00:30:17,070
to mark and the sides given to mem copy

573
00:30:11,610 --> 00:30:20,158
are different that means that if these

574
00:30:17,070 --> 00:30:23,309
two sides are different some part of the

575
00:30:20,159 --> 00:30:25,350
data that is copied into the value of

576
00:30:23,309 --> 00:30:30,000
the attribute will not be fully

577
00:30:25,350 --> 00:30:32,879
initialized so we develop quick exploits

578
00:30:30,000 --> 00:30:36,809
and we can see the output of the

579
00:30:32,880 --> 00:30:41,970
exploits on the right an attacker is

580
00:30:36,809 --> 00:30:44,490
able to leak as a heap of the HSM we

581
00:30:41,970 --> 00:30:47,610
managed to leak for instance the

582
00:30:44,490 --> 00:30:51,000
password of the administrator we think

583
00:30:47,610 --> 00:30:53,760
that depending on the layout of the

584
00:30:51,000 --> 00:30:59,789
memory we can leak sensitive data sets

585
00:30:53,760 --> 00:31:03,658
such as cryptographic key however once

586
00:30:59,789 --> 00:31:16,710
again an authentication is required so

587
00:31:03,659 --> 00:31:23,940
we looked for other bags as FSL found a

588
00:31:16,710 --> 00:31:27,390
crash in another crypto key function the

589
00:31:23,940 --> 00:31:30,720
HS and many plates digest using crypto

590
00:31:27,390 --> 00:31:33,240
key functions there are two calls get

591
00:31:30,720 --> 00:31:36,150
operation state and set operation state

592
00:31:33,240 --> 00:31:39,450
state that can be that can be used to

593
00:31:36,150 --> 00:31:42,780
retrieve the state of a digest object

594
00:31:39,450 --> 00:31:50,900
and also to write to restore the state

595
00:31:42,780 --> 00:31:54,510
later the mutates the serialized data

596
00:31:50,900 --> 00:31:57,510
before restoring it I think that this

597
00:31:54,510 --> 00:32:00,990
mechanism is really close to what is

598
00:31:57,510 --> 00:32:07,049
called serialization on languages such

599
00:32:00,990 --> 00:32:12,210
as such as PHP or Python so we had a

600
00:32:07,049 --> 00:32:16,650
crash because of single bytes mutated by

601
00:32:12,210 --> 00:32:19,080
ow the root cause of the crash looks

602
00:32:16,650 --> 00:32:22,770
like Nelda wrath which is pretty

603
00:32:19,080 --> 00:32:25,590
meaningless but the stock price was

604
00:32:22,770 --> 00:32:28,740
unusual so we did some reverse

605
00:32:25,590 --> 00:32:31,050
engineering and some dynamic analysis

606
00:32:28,740 --> 00:32:34,410
thanks to the debugger is the bagasse

607
00:32:31,050 --> 00:32:39,389
that we developed before and we found

608
00:32:34,410 --> 00:32:43,620
out that it is actually a confirmed type

609
00:32:39,390 --> 00:32:46,530
confusion bug the bytes which is

610
00:32:43,620 --> 00:32:50,010
modified by the phasor describes as a

611
00:32:46,530 --> 00:32:52,980
type of the of the digests object so if

612
00:32:50,010 --> 00:32:57,330
we modify these bytes we can call an

613
00:32:52,980 --> 00:33:03,150
expected method of on digest object

614
00:32:57,330 --> 00:33:06,300
object we then transformed this this bug

615
00:33:03,150 --> 00:33:09,450
into useful exploits primitives the

616
00:33:06,300 --> 00:33:12,120
first one is a memory leak in order to

617
00:33:09,450 --> 00:33:15,420
retrieve interesting addresses from the

618
00:33:12,120 --> 00:33:18,750
heap and the stack the second primitives

619
00:33:15,420 --> 00:33:21,930
that we gain is a relative right

620
00:33:18,750 --> 00:33:27,060
primitive which oles to write arbitrary

621
00:33:21,930 --> 00:33:30,720
data after a given object so we spent we

622
00:33:27,060 --> 00:33:34,850
spend some time to develop an exploit it

623
00:33:30,720 --> 00:33:38,730
isn't straightforward at all because we

624
00:33:34,850 --> 00:33:42,800
we faced many challenges but at the end

625
00:33:38,730 --> 00:33:46,380
we we had a reliable reliable exploit

626
00:33:42,800 --> 00:33:50,460
which provide us arbitrary code

627
00:33:46,380 --> 00:33:53,490
execution but the game is not over

628
00:33:50,460 --> 00:33:58,560
because we still have to find a useful

629
00:33:53,490 --> 00:34:02,520
payload in contrary to usual target we

630
00:33:58,560 --> 00:34:05,970
were not allowed to execute just a shell

631
00:34:02,520 --> 00:34:08,100
or something like that simply because

632
00:34:05,970 --> 00:34:11,000
there is no interesting binary on the

633
00:34:08,100 --> 00:34:15,210
HSM for instance the original shell

634
00:34:11,000 --> 00:34:17,070
nothing like last like that even if they

635
00:34:15,210 --> 00:34:20,850
even wear a shell

636
00:34:17,070 --> 00:34:23,609
we wouldn't be able to communicate with

637
00:34:20,850 --> 00:34:28,379
the host because the reason

638
00:34:23,609 --> 00:34:32,909
no Network mechanism Frances so we step

639
00:34:28,379 --> 00:34:36,629
back did something easier we patch the

640
00:34:32,909 --> 00:34:39,269
the code that he's running on the HSN to

641
00:34:36,629 --> 00:34:42,210
disable the pin verification function

642
00:34:39,268 --> 00:34:45,319
that allows an attacker to login as

643
00:34:42,210 --> 00:34:50,039
admin without knowing any credentials

644
00:34:45,319 --> 00:34:52,799
once it is done we can install a custom

645
00:34:50,039 --> 00:34:55,649
module which for instance dump the

646
00:34:52,799 --> 00:34:59,509
entire memory of the hsm and also the

647
00:34:55,649 --> 00:35:14,190
decryption key so here is a quick

648
00:34:59,509 --> 00:35:17,640
demonstration for the sake of the demo

649
00:35:14,190 --> 00:35:22,859
let's say that the administrator on the

650
00:35:17,640 --> 00:35:26,390
HSN hosts install some secret keys then

651
00:35:22,859 --> 00:35:29,730
the attacker logs into the HSN and

652
00:35:26,390 --> 00:35:30,749
thanks to the exploit that we developed

653
00:35:29,730 --> 00:35:33,930
before

654
00:35:30,749 --> 00:35:37,379
dump the entire memory of the HSM and

655
00:35:33,930 --> 00:35:42,058
along the encryption key so that is

656
00:35:37,380 --> 00:35:47,819
toured into a file flash that beam that

657
00:35:42,059 --> 00:35:51,150
the attacker copies on his server and

658
00:35:47,819 --> 00:35:53,730
from this moment the attacker doesn't

659
00:35:51,150 --> 00:35:57,839
need access to the HSM anymore

660
00:35:53,730 --> 00:36:00,869
everything can be done of fine so using

661
00:35:57,839 --> 00:36:05,038
some tools he can extract the files from

662
00:36:00,869 --> 00:36:07,980
the dump of the flash memory for it for

663
00:36:05,039 --> 00:36:10,529
instance here he he lists every files

664
00:36:07,980 --> 00:36:18,710
that are stored on the first float on

665
00:36:10,529 --> 00:36:22,769
the ATM then given the encryption key he

666
00:36:18,710 --> 00:36:26,700
he will dump every secrets of the object

667
00:36:22,769 --> 00:36:30,118
it's worth noting that the object the

668
00:36:26,700 --> 00:36:34,049
attributes are marked as sensitive a non

669
00:36:30,119 --> 00:36:36,710
extract able but knowing this encryption

670
00:36:34,049 --> 00:36:40,700
key he can steal the freedom

671
00:36:36,710 --> 00:36:43,339
so that's it an attacker can dump and

672
00:36:40,700 --> 00:36:46,689
decrypt every every secrets that are

673
00:36:43,339 --> 00:36:46,690
told on the ATM

674
00:36:47,680 --> 00:36:57,940
[Applause]

675
00:36:54,280 --> 00:37:01,940
so we found a few memory corruption beds

676
00:36:57,940 --> 00:37:05,900
and we wondered if it was possible to

677
00:37:01,940 --> 00:37:09,680
gain persistence on the HSN so we found

678
00:37:05,900 --> 00:37:11,599
a logical burg thermal signature bypass

679
00:37:09,680 --> 00:37:15,558
that can be exploited

680
00:37:11,599 --> 00:37:22,640
after having gained gained code

681
00:37:15,559 --> 00:37:25,010
execution of the ageism first I will

682
00:37:22,640 --> 00:37:28,549
explain how custom modules are installed

683
00:37:25,010 --> 00:37:32,480
on the HSM because it is pretty similar

684
00:37:28,550 --> 00:37:36,589
to how firm ware is a dating first

685
00:37:32,480 --> 00:37:40,250
certificate is generated on the client

686
00:37:36,589 --> 00:37:43,160
machine locally then the public key of

687
00:37:40,250 --> 00:37:47,630
the certificate is sent to the 80s to

688
00:37:43,160 --> 00:37:51,710
the HSM the HSM sent back the handle of

689
00:37:47,630 --> 00:37:55,040
the certificate and the client sends the

690
00:37:51,710 --> 00:37:59,210
binary of the module along the signature

691
00:37:55,040 --> 00:38:01,308
of the module the HSM verifies the

692
00:37:59,210 --> 00:38:04,309
signature of the module and if it is

693
00:38:01,309 --> 00:38:06,890
valid then the module is written into

694
00:38:04,309 --> 00:38:12,770
the flash memory of the age of the HSM

695
00:38:06,890 --> 00:38:19,250
and the HSM reboots the thermal a date

696
00:38:12,770 --> 00:38:22,220
is really similar but Sarris the

697
00:38:19,250 --> 00:38:25,700
certificate that he's used to signed the

698
00:38:22,220 --> 00:38:27,439
update isn't known by the client there

699
00:38:25,700 --> 00:38:30,290
is only a public key that he is

700
00:38:27,440 --> 00:38:34,460
installed that is hard-coded into the

701
00:38:30,290 --> 00:38:37,069
former firmware updates are available on

702
00:38:34,460 --> 00:38:41,210
the vendor websites and can be installed

703
00:38:37,069 --> 00:38:47,119
using an admin account just using a

704
00:38:41,210 --> 00:38:50,270
single command so the difference is that

705
00:38:47,119 --> 00:38:53,300
the HSM will first search

706
00:38:50,270 --> 00:38:56,630
for the certificate thanks to a specific

707
00:38:53,300 --> 00:39:01,280
attribute this attribute cannot be set

708
00:38:56,630 --> 00:39:03,980
by your client to buy a client it's it's

709
00:39:01,280 --> 00:39:06,590
not possible so thanks to these

710
00:39:03,980 --> 00:39:09,830
attributes the hsm retrieves the

711
00:39:06,590 --> 00:39:13,880
certificate and the client using the

712
00:39:09,830 --> 00:39:17,600
handle sends the banner a date binary

713
00:39:13,880 --> 00:39:21,970
and if the signature is valid then the

714
00:39:17,600 --> 00:39:26,089
HSN install the update and reboot

715
00:39:21,970 --> 00:39:28,549
however there is a logical flow because

716
00:39:26,090 --> 00:39:31,600
an attacker can install random

717
00:39:28,550 --> 00:39:37,100
certificates without any attribute

718
00:39:31,600 --> 00:39:40,400
without any specific attribute or using

719
00:39:37,100 --> 00:39:44,660
the handle of the certificates the a

720
00:39:40,400 --> 00:39:48,080
date mechanism will work without any

721
00:39:44,660 --> 00:39:51,620
check so that's all that's actually

722
00:39:48,080 --> 00:39:55,490
pretty simple it allows us to install a

723
00:39:51,620 --> 00:39:58,690
malicious updates as I will show in the

724
00:39:55,490 --> 00:40:06,470
in the next part that will allow us to

725
00:39:58,690 --> 00:40:10,430
to gain persistence I think that gaining

726
00:40:06,470 --> 00:40:13,669
persistence a HSM is obviously

727
00:40:10,430 --> 00:40:17,600
interesting for an attacker because he

728
00:40:13,670 --> 00:40:23,120
will access the HSM after reboot or even

729
00:40:17,600 --> 00:40:26,839
after a legitimate fam'ly upgrade so how

730
00:40:23,120 --> 00:40:30,380
can we found a place to write a backdoor

731
00:40:26,840 --> 00:40:32,860
well the only assitant memory that

732
00:40:30,380 --> 00:40:36,560
exists on the HSM is a flash memory

733
00:40:32,860 --> 00:40:40,240
because it's survived the memory is not

734
00:40:36,560 --> 00:40:42,740
reset across a reboot this flash memory

735
00:40:40,240 --> 00:40:44,680
contains almost everything the

736
00:40:42,740 --> 00:40:49,520
bootloader the firmware

737
00:40:44,680 --> 00:40:52,009
obviously as a data of the HSM the HSM

738
00:40:49,520 --> 00:40:55,790
operating system has read and write

739
00:40:52,010 --> 00:40:59,300
access to this memory an attacker can

740
00:40:55,790 --> 00:41:03,340
reuse this primitive to write its

741
00:40:59,300 --> 00:41:03,340
backdoor into the into the file system

742
00:41:05,210 --> 00:41:11,280
so writing the back door is actually not

743
00:41:09,180 --> 00:41:14,399
straightforward because there are two

744
00:41:11,280 --> 00:41:16,440
constraints the first one is there is

745
00:41:14,400 --> 00:41:20,640
not much memory available

746
00:41:16,440 --> 00:41:24,720
not much ram memory available on the HSN

747
00:41:20,640 --> 00:41:26,009
so we cannot upload a lot of tools to do

748
00:41:24,720 --> 00:41:32,700
whatever we want

749
00:41:26,010 --> 00:41:36,030
we already have to to to keep a really

750
00:41:32,700 --> 00:41:39,060
small back door additionally there is no

751
00:41:36,030 --> 00:41:42,420
second chance because if we fail at

752
00:41:39,060 --> 00:41:45,390
writing a valid image into the flash

753
00:41:42,420 --> 00:41:47,760
memory the HSM will not boot any more

754
00:41:45,390 --> 00:41:50,609
and there is no way to make it work

755
00:41:47,760 --> 00:41:53,700
again so that means that we have to buy

756
00:41:50,610 --> 00:41:58,050
a new HSM if we fail at writing a crack

757
00:41:53,700 --> 00:42:01,109
backdoor that's pretty expensive so we

758
00:41:58,050 --> 00:42:06,990
must be very careful

759
00:42:01,110 --> 00:42:11,190
so we once we gain a deep understanding

760
00:42:06,990 --> 00:42:15,029
of the update mechanism we were able to

761
00:42:11,190 --> 00:42:17,310
write our backdoor it is a shared

762
00:42:15,030 --> 00:42:20,850
library that is preloaded into the main

763
00:42:17,310 --> 00:42:24,960
process of the HSM during during the

764
00:42:20,850 --> 00:42:27,870
startup this implant those two things

765
00:42:24,960 --> 00:42:30,660
the first one is to hook the update

766
00:42:27,870 --> 00:42:34,290
mechanism to survive across legitimate

767
00:42:30,660 --> 00:42:37,859
updates and also to hook some piggies at

768
00:42:34,290 --> 00:42:44,790
some critical functions for instance to

769
00:42:37,860 --> 00:42:49,740
backdoor the random generator and we

770
00:42:44,790 --> 00:42:51,330
continue on a quick demo this is the

771
00:42:49,740 --> 00:42:54,509
source code of a program that is

772
00:42:51,330 --> 00:42:59,250
executed on the host and we can see a

773
00:42:54,510 --> 00:43:02,730
call to generate random which is made on

774
00:42:59,250 --> 00:43:06,830
the host which is actually done on the

775
00:43:02,730 --> 00:43:06,830
HSM to retrieve some random data

776
00:43:12,240 --> 00:43:18,810
so here is the source code of this

777
00:43:14,400 --> 00:43:22,950
program so there is a back door that is

778
00:43:18,810 --> 00:43:25,799
installed on the ageism we ran this

779
00:43:22,950 --> 00:43:32,609
program to get one byte of random memory

780
00:43:25,800 --> 00:43:35,340
or 4 bytes 16 bytes or more data 128

781
00:43:32,610 --> 00:43:39,800
bytes and I think that you noticed a

782
00:43:35,340 --> 00:43:42,960
pattern the data is not random at all

783
00:43:39,800 --> 00:43:46,560
that's because we back doors a random

784
00:43:42,960 --> 00:43:49,800
generator we just patched the one of the

785
00:43:46,560 --> 00:43:53,750
function of the crypto key table so this

786
00:43:49,800 --> 00:43:57,810
part of the backdoor is trivial the

787
00:43:53,750 --> 00:44:00,290
difficult part is writing the backdoor

788
00:43:57,810 --> 00:44:00,290
to the filesystem

789
00:44:05,840 --> 00:44:14,520
to sum it up we did a vulnerability

790
00:44:10,200 --> 00:44:16,830
research to to find vulnerabilities that

791
00:44:14,520 --> 00:44:19,680
allows us to gain arbitrary code

792
00:44:16,830 --> 00:44:23,540
execution without any credential on the

793
00:44:19,680 --> 00:44:26,549
HSM that is a pre authentication exploit

794
00:44:23,540 --> 00:44:29,430
there is still an open question we don't

795
00:44:26,550 --> 00:44:32,880
know if our expert will work against

796
00:44:29,430 --> 00:44:36,810
Network HSM we think so but we don't

797
00:44:32,880 --> 00:44:42,150
have any network version of this HSM

798
00:44:36,810 --> 00:44:44,730
confirmed as that hypothesis once we

799
00:44:42,150 --> 00:44:47,070
gain arbitrary code execution we are

800
00:44:44,730 --> 00:44:50,100
able to dump the whole flash memory

801
00:44:47,070 --> 00:44:53,460
along the encryption key and that allows

802
00:44:50,100 --> 00:45:00,839
an attacker to decrypt every secrets of

803
00:44:53,460 --> 00:45:06,980
the ageism we also found a vulnerability

804
00:45:00,840 --> 00:45:11,130
that allows to bypass farmer signature

805
00:45:06,980 --> 00:45:14,550
which breaks entirely the hsm integrity

806
00:45:11,130 --> 00:45:17,080
and an attacker to gain persistence and

807
00:45:14,550 --> 00:45:20,720
the ageism

808
00:45:17,080 --> 00:45:24,710
we reported every vulnerability to the

809
00:45:20,720 --> 00:45:28,040
vendor who issue a new firmware update

810
00:45:24,710 --> 00:45:31,640
after a few weeks we would like to

811
00:45:28,040 --> 00:45:34,340
highlight that these updates is

812
00:45:31,640 --> 00:45:38,150
available for the latest model of the

813
00:45:34,340 --> 00:45:40,070
HSM but also for models that aren't

814
00:45:38,150 --> 00:45:42,890
supported anymore because the

815
00:45:40,070 --> 00:45:45,710
vulnerabilities are critical so

816
00:45:42,890 --> 00:45:52,270
obviously pay attention to your valid

817
00:45:45,710 --> 00:45:55,820
security advisories finally we'd like to

818
00:45:52,270 --> 00:45:59,540
remain remind that it is not an

819
00:45:55,820 --> 00:46:03,470
exhaustive study we only assess the

820
00:45:59,540 --> 00:46:07,100
security of a single model of HSM of a

821
00:46:03,470 --> 00:46:10,220
specific vendor we will be very curious

822
00:46:07,100 --> 00:46:15,259
about the security of other models and

823
00:46:10,220 --> 00:46:17,359
other vendors we hope that it gives us a

824
00:46:15,260 --> 00:46:20,750
methodology to look for vulnerabilities

825
00:46:17,360 --> 00:46:23,300
for other security researchers that we

826
00:46:20,750 --> 00:46:28,190
will see all those chilies in

827
00:46:23,300 --> 00:46:31,490
diffusional and finally HSM are

828
00:46:28,190 --> 00:46:33,710
certified against hardware attacks but

829
00:46:31,490 --> 00:46:37,819
it doesn't make much sense if the

830
00:46:33,710 --> 00:46:42,190
software running on HSN is insecure so

831
00:46:37,820 --> 00:46:45,110
we would love to see initiative about

832
00:46:42,190 --> 00:46:49,940
you to have secure software running on

833
00:46:45,110 --> 00:46:51,440
ageism obviously thank you very much for

834
00:46:49,940 --> 00:46:54,760
your attention

835
00:46:51,440 --> 00:46:54,760
[Applause]

836
00:46:58,480 --> 00:47:02,300
thank you and if you like to ask

837
00:47:00,560 --> 00:47:04,549
questions we have a few minutes for that

838
00:47:02,300 --> 00:47:20,990
just please use the microphones in the

839
00:47:04,550 --> 00:47:24,350
middle of the room hi I was curious did

840
00:47:20,990 --> 00:47:31,339
the hsm audit logs record any of your

841
00:47:24,350 --> 00:47:36,799
attempts so the question is is any logs

842
00:47:31,340 --> 00:47:46,180
of expert atoms on the axes of I would

843
00:47:36,800 --> 00:47:51,370
say no because our experts are only

844
00:47:46,180 --> 00:47:54,470
cryptokey calls it is expected so

845
00:47:51,370 --> 00:48:03,470
ex-wife doesn't leave any trace on the

846
00:47:54,470 --> 00:48:05,209
HSN logs okay thank you thank you for

847
00:48:03,470 --> 00:48:07,100
joining the session if any further

848
00:48:05,210 --> 00:48:11,320
questions you could please meet the

849
00:48:07,100 --> 00:48:11,319
presenters in the wrap-up room thank you

850
00:48:11,360 --> 00:48:14,719
[Applause]

