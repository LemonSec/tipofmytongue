1
00:00:00,000 --> 00:00:03,990
welcome to securing apps in the open by

2
00:00:02,009 --> 00:00:06,779
default cloud with Winston house and

3
00:00:03,990 --> 00:00:09,300
Michael Wozniak just a few announcements

4
00:00:06,779 --> 00:00:11,309
before we begin please stop by the

5
00:00:09,300 --> 00:00:14,130
business hall located in Mandalay Bay on

6
00:00:11,309 --> 00:00:15,838
this level and the blackhat Arsenal is

7
00:00:14,130 --> 00:00:19,140
in the business hall level to this level

8
00:00:15,839 --> 00:00:22,109
as well we we appreciate if you can

9
00:00:19,140 --> 00:00:23,609
silence your cellphone's and please give

10
00:00:22,109 --> 00:00:25,680
a warm welcome to our speakers today

11
00:00:23,609 --> 00:00:31,980
again Winston house and Michael Wozniak

12
00:00:25,680 --> 00:00:36,120
thank you cool

13
00:00:31,980 --> 00:00:36,660
take us away alright yeah thanks for

14
00:00:36,120 --> 00:00:38,399
coming

15
00:00:36,660 --> 00:00:40,290
I'm Michael Wozniak with the

16
00:00:38,399 --> 00:00:43,500
infrastructure security team at snapchat

17
00:00:40,290 --> 00:00:46,050
now I'm Winston house on the application

18
00:00:43,500 --> 00:00:49,230
security team at snapchat yeah welcome

19
00:00:46,050 --> 00:00:53,218
to the cloud here at snapchat were

20
00:00:49,230 --> 00:00:57,328
primarily are almost entirely on cloud

21
00:00:53,219 --> 00:00:59,789
services that for us this means AWS GCP

22
00:00:57,329 --> 00:01:03,270
there are others and most of what we're

23
00:00:59,789 --> 00:01:08,340
talking about is could be used on those

24
00:01:03,270 --> 00:01:12,360
other clouds as well so our services run

25
00:01:08,340 --> 00:01:17,240
on a variety of underlying compute

26
00:01:12,360 --> 00:01:23,570
infrastructure AWS has ec2 eks GSP has

27
00:01:17,240 --> 00:01:27,350
App Engine gke GC for each of these

28
00:01:23,570 --> 00:01:30,809
services that the cloud provides api's

29
00:01:27,350 --> 00:01:35,240
to control the IM level access they

30
00:01:30,810 --> 00:01:37,860
allow you to do some org level policies

31
00:01:35,240 --> 00:01:41,298
but the way we've designed our

32
00:01:37,860 --> 00:01:44,299
infrastructure is we segregate for I am

33
00:01:41,299 --> 00:01:46,680
segregation instead of networks like

34
00:01:44,299 --> 00:01:49,049
segregation so we actually end up with a

35
00:01:46,680 --> 00:01:51,180
lot of disjoint networks a lot of V pcs

36
00:01:49,049 --> 00:01:56,670
across a lot of projects a lot of

37
00:01:51,180 --> 00:01:59,280
accounts in Natal us so the we have to

38
00:01:56,670 --> 00:02:01,890
deal with transiting across the internet

39
00:01:59,280 --> 00:02:05,000
for access between these networks in

40
00:02:01,890 --> 00:02:05,000
each cloud

41
00:02:05,030 --> 00:02:10,550
so the clouds are generally opened by

42
00:02:07,700 --> 00:02:13,220
default we we have this issue where the

43
00:02:10,550 --> 00:02:14,900
the gcpd AWS they want you to get your

44
00:02:13,220 --> 00:02:17,210
app up and running as fast as possible

45
00:02:14,900 --> 00:02:19,160
if you have a POC they want you to to

46
00:02:17,210 --> 00:02:19,640
get it up and running in under 10

47
00:02:19,160 --> 00:02:25,040
minutes

48
00:02:19,640 --> 00:02:27,890
apparently we have the the primary issue

49
00:02:25,040 --> 00:02:30,650
we have is App Engine is open by default

50
00:02:27,890 --> 00:02:33,200
it's routable on the Internet

51
00:02:30,650 --> 00:02:35,709
it's that's for both ingress and egress

52
00:02:33,200 --> 00:02:39,470
goes out over the Internet

53
00:02:35,709 --> 00:02:43,280
and there is at least now there's an

54
00:02:39,470 --> 00:02:45,050
ability to firewall it but it's not

55
00:02:43,280 --> 00:02:51,820
there by default so we've had to create

56
00:02:45,050 --> 00:02:54,470
tools to add that gating after the fact

57
00:02:51,820 --> 00:02:58,250
so the constraints we're dealing with

58
00:02:54,470 --> 00:03:00,650
like I said networking we we've got a

59
00:02:58,250 --> 00:03:03,470
lot of disjoint networks we don't have

60
00:03:00,650 --> 00:03:06,470
one single connected network that

61
00:03:03,470 --> 00:03:09,350
everything is internal not exposed the

62
00:03:06,470 --> 00:03:11,420
internet we've got limited enforcement

63
00:03:09,350 --> 00:03:13,489
options provided by ade we lost GSP

64
00:03:11,420 --> 00:03:15,440
especially at the org level they allow

65
00:03:13,489 --> 00:03:17,150
us to create a shared network but they

66
00:03:15,440 --> 00:03:19,730
don't allow us to enforce everything it

67
00:03:17,150 --> 00:03:22,670
goes on that network so we have to build

68
00:03:19,730 --> 00:03:25,609
the tools to do that and then also some

69
00:03:22,670 --> 00:03:30,170
services like App Engine they don't even

70
00:03:25,610 --> 00:03:33,829
work with those internal networks that

71
00:03:30,170 --> 00:03:37,809
they're providing and then on the CIC

72
00:03:33,829 --> 00:03:41,269
deep side of it we actually put our

73
00:03:37,810 --> 00:03:43,670
gates in front of that so before the

74
00:03:41,269 --> 00:03:45,440
developers even write any code we've

75
00:03:43,670 --> 00:03:48,530
already gated their project as soon as

76
00:03:45,440 --> 00:03:50,030
they create it we're not in the

77
00:03:48,530 --> 00:03:54,380
deployment pipeline and we're much

78
00:03:50,030 --> 00:03:57,260
sooner in the process yeah so to make

79
00:03:54,380 --> 00:03:59,540
this even more complicated it makes it

80
00:03:57,260 --> 00:04:01,250
really unclear in the cloud when

81
00:03:59,540 --> 00:04:03,048
security should get involved with an app

82
00:04:01,250 --> 00:04:04,850
and if we look at the standard

83
00:04:03,049 --> 00:04:07,610
development lifecycle of an app you

84
00:04:04,850 --> 00:04:09,829
start out you put your app you create a

85
00:04:07,610 --> 00:04:11,750
new project and it's on the internet and

86
00:04:09,829 --> 00:04:14,060
you start building on the internet and

87
00:04:11,750 --> 00:04:15,530
maybe over time you'll come to security

88
00:04:14,060 --> 00:04:17,358
because you want a DNS record or a

89
00:04:15,530 --> 00:04:20,418
certificate or something like that

90
00:04:17,358 --> 00:04:22,938
and we'll do a security review and then

91
00:04:20,418 --> 00:04:24,198
more time goes on once you've done the

92
00:04:22,939 --> 00:04:25,669
security of you and fix things you're

93
00:04:24,199 --> 00:04:28,639
now getting feedback on your app and

94
00:04:25,669 --> 00:04:30,590
you're making changes and throughout

95
00:04:28,639 --> 00:04:32,569
this entire process your app has just

96
00:04:30,590 --> 00:04:33,979
been living on the Internet and so you

97
00:04:32,569 --> 00:04:35,990
have this sort of pre-launch and post

98
00:04:33,979 --> 00:04:38,419
launch world and in both cases you're

99
00:04:35,990 --> 00:04:41,629
exposed to attacks and we really only

100
00:04:38,419 --> 00:04:44,750
have guarantees from security in this

101
00:04:41,629 --> 00:04:46,310
one little slice and time and so we

102
00:04:44,750 --> 00:04:48,080
looked at this and we said this is not

103
00:04:46,310 --> 00:04:50,180
working for us this doesn't allow the

104
00:04:48,080 --> 00:04:53,779
security team to effectively provide any

105
00:04:50,180 --> 00:04:55,460
guarantees and we wanted to stretch that

106
00:04:53,779 --> 00:04:58,189
red line basically across the entire

107
00:04:55,460 --> 00:05:00,138
spectrum and so we looked at a few

108
00:04:58,189 --> 00:05:02,750
approaches for doing this one of the

109
00:05:00,139 --> 00:05:04,849
things we talked about was we worked

110
00:05:02,750 --> 00:05:07,759
with finance to control billing for apps

111
00:05:04,849 --> 00:05:09,650
and we said no one gets billing until

112
00:05:07,759 --> 00:05:11,240
they've done a security review and this

113
00:05:09,650 --> 00:05:12,859
worked for a little bit but there's a

114
00:05:11,240 --> 00:05:14,180
ton of features the cloud offers you

115
00:05:12,860 --> 00:05:16,610
that you can only have once you have

116
00:05:14,180 --> 00:05:19,400
billing set up on your app additionally

117
00:05:16,610 --> 00:05:21,199
and a lot of teams wanted to test

118
00:05:19,400 --> 00:05:22,789
different architectures at scale which

119
00:05:21,199 --> 00:05:24,020
they can't do without billing so we

120
00:05:22,789 --> 00:05:25,128
ended up creating all these exceptions

121
00:05:24,020 --> 00:05:26,270
where we were saying we'll give you a

122
00:05:25,129 --> 00:05:28,490
billing but you have to come back and do

123
00:05:26,270 --> 00:05:29,930
a security review later on and it just

124
00:05:28,490 --> 00:05:31,669
became a bit of a nightmare to handle

125
00:05:29,930 --> 00:05:34,370
and it was more exceptions than it was

126
00:05:31,669 --> 00:05:36,258
just normal approval cases and so next

127
00:05:34,370 --> 00:05:37,759
thing we did is we created some

128
00:05:36,259 --> 00:05:39,440
libraries when we asked developers hey

129
00:05:37,759 --> 00:05:42,229
please implement these auth libraries

130
00:05:39,440 --> 00:05:43,789
and your services and but we noticed

131
00:05:42,229 --> 00:05:45,169
people either Mis implemented them or

132
00:05:43,789 --> 00:05:47,539
implemented something else altogether

133
00:05:45,169 --> 00:05:49,250
and so we are constantly running around

134
00:05:47,539 --> 00:05:51,169
trying to validate have people

135
00:05:49,250 --> 00:05:52,969
implemented the correct thing and this

136
00:05:51,169 --> 00:05:55,219
did not scale for our team at all it was

137
00:05:52,969 --> 00:05:57,439
just a really heavy op sled so another

138
00:05:55,219 --> 00:05:59,180
thing which we considered for a bit was

139
00:05:57,439 --> 00:06:02,300
just using firewalls to gate things to

140
00:05:59,180 --> 00:06:04,669
the corporate network problem with that

141
00:06:02,300 --> 00:06:06,979
is it it really isn't very granular so

142
00:06:04,669 --> 00:06:08,900
any employee could now access any single

143
00:06:06,979 --> 00:06:10,128
service and for service the service

144
00:06:08,900 --> 00:06:12,849
communication this doesn't work at all

145
00:06:10,129 --> 00:06:15,770
like again going back to App Engine and

146
00:06:12,849 --> 00:06:17,839
every every App Engine project egress is

147
00:06:15,770 --> 00:06:19,400
from the same IP range so you can't make

148
00:06:17,839 --> 00:06:21,279
any guarantees about what's yours or

149
00:06:19,400 --> 00:06:23,150
what someone else based on an IP address

150
00:06:21,279 --> 00:06:25,189
so the last thing we looked at was

151
00:06:23,150 --> 00:06:26,779
Google's identity aware proxy which is

152
00:06:25,189 --> 00:06:27,780
this o auth proxy you can stand up in

153
00:06:26,779 --> 00:06:30,180
front of your apps and they've got

154
00:06:27,780 --> 00:06:31,500
API is to turn it on and off but before

155
00:06:30,180 --> 00:06:34,740
you can turn it on you have to have an

156
00:06:31,500 --> 00:06:36,960
OAuth client and an OAuth client there's

157
00:06:34,740 --> 00:06:40,110
no API for creating this you have to

158
00:06:36,960 --> 00:06:42,989
create that on manually and and because

159
00:06:40,110 --> 00:06:45,300
of that it just was not going to work

160
00:06:42,990 --> 00:06:48,419
for the vast number of services we have

161
00:06:45,300 --> 00:06:50,250
and because it wasn't automatable so we

162
00:06:48,419 --> 00:06:52,320
looked at all these problems and we said

163
00:06:50,250 --> 00:06:53,940
oK we've got four goals in mind here the

164
00:06:52,320 --> 00:06:56,370
first goal is we want whatever our

165
00:06:53,940 --> 00:06:58,290
solution is to be very flexible we've

166
00:06:56,370 --> 00:07:00,510
got a really wide array of technology

167
00:06:58,290 --> 00:07:02,730
used at snap and we wanted to rather

168
00:07:00,510 --> 00:07:05,730
than force everyone to standardize on

169
00:07:02,730 --> 00:07:08,280
technology decouple those problems and

170
00:07:05,730 --> 00:07:10,169
try to make our solution have very

171
00:07:08,280 --> 00:07:12,869
minimal opinions about how developers

172
00:07:10,169 --> 00:07:14,250
build their services for hike ups things

173
00:07:12,870 --> 00:07:16,590
we noticed as we are building the

174
00:07:14,250 --> 00:07:18,210
solution out that we did have to make a

175
00:07:16,590 --> 00:07:20,520
few more constraints but we did try to

176
00:07:18,210 --> 00:07:22,049
keep that to a minimum the next thing is

177
00:07:20,520 --> 00:07:24,780
we wanted developers to not have to

178
00:07:22,050 --> 00:07:27,030
instrument their services at all every

179
00:07:24,780 --> 00:07:29,489
time we had to go audit them it doesn't

180
00:07:27,030 --> 00:07:31,739
scale and it's a heavy opps load and we

181
00:07:29,490 --> 00:07:33,150
also wanted this to be very granular we

182
00:07:31,740 --> 00:07:35,490
want to be able to say this set of users

183
00:07:33,150 --> 00:07:37,890
can access these services and these two

184
00:07:35,490 --> 00:07:39,060
services can talk to each other and the

185
00:07:37,890 --> 00:07:40,200
entire thing should be automated we

186
00:07:39,060 --> 00:07:43,310
shouldn't have to be manually setting

187
00:07:40,200 --> 00:07:48,780
things up throughout this entire process

188
00:07:43,310 --> 00:07:51,690
yeah so the though the way we built our

189
00:07:48,780 --> 00:07:53,669
solution is we need two basic features

190
00:07:51,690 --> 00:07:55,620
we need to be able to control the

191
00:07:53,669 --> 00:07:57,930
network and we also need to have

192
00:07:55,620 --> 00:08:02,640
visibility into the inventory of our

193
00:07:57,930 --> 00:08:04,350
sort of our cloud infrastructure so our

194
00:08:02,640 --> 00:08:07,020
solution combines quite a few of the

195
00:08:04,350 --> 00:08:08,510
things we talked about before we have a

196
00:08:07,020 --> 00:08:11,280
central service that enables billing

197
00:08:08,510 --> 00:08:13,500
billing is enabled right away but it

198
00:08:11,280 --> 00:08:16,140
gives a security team Network management

199
00:08:13,500 --> 00:08:19,260
access and visibility into the

200
00:08:16,140 --> 00:08:20,760
infrastructure to ensure that the

201
00:08:19,260 --> 00:08:26,310
network stays the way we need it to stay

202
00:08:20,760 --> 00:08:28,229
to provide that gate so going back to

203
00:08:26,310 --> 00:08:31,169
the development lifecycle we were in

204
00:08:28,229 --> 00:08:34,010
this world of pre-launch and a post

205
00:08:31,169 --> 00:08:36,059
launch and with the optional or

206
00:08:34,010 --> 00:08:39,159
encouraged security review in the middle

207
00:08:36,059 --> 00:08:43,508
at some point in time to this world of

208
00:08:39,159 --> 00:08:45,699
manage and manage services where to get

209
00:08:43,509 --> 00:08:47,589
into this managed world of production

210
00:08:45,699 --> 00:08:48,790
level services you have to file a

211
00:08:47,589 --> 00:08:51,339
security review especially if you're

212
00:08:48,790 --> 00:08:53,079
opening something up to the world so

213
00:08:51,339 --> 00:08:56,379
we're gonna go over both these

214
00:08:53,079 --> 00:09:00,638
separately the unmanaged is lower scale

215
00:08:56,379 --> 00:09:02,560
the managed is much higher scale so for

216
00:09:00,639 --> 00:09:04,540
unmanaged services there's two types of

217
00:09:02,560 --> 00:09:05,079
services here new services and

218
00:09:04,540 --> 00:09:08,769
development

219
00:09:05,079 --> 00:09:10,479
pocs experiments things we don't know if

220
00:09:08,769 --> 00:09:12,040
it's worth the time to even do a

221
00:09:10,480 --> 00:09:14,680
security review if it's never gonna see

222
00:09:12,040 --> 00:09:16,689
a public endpoint and internal tools

223
00:09:14,680 --> 00:09:18,878
those are low scale employee only access

224
00:09:16,689 --> 00:09:21,069
we treat these identically from the

225
00:09:18,879 --> 00:09:23,259
security team standpoint that the scale

226
00:09:21,069 --> 00:09:25,689
is appropriate and they both need

227
00:09:23,259 --> 00:09:31,170
authentication authorization controls in

228
00:09:25,689 --> 00:09:34,569
front of them so to do this unmanaged

229
00:09:31,170 --> 00:09:36,279
services gating we have two components

230
00:09:34,569 --> 00:09:38,769
the firewall manager that's managing all

231
00:09:36,279 --> 00:09:40,779
the network components and the stateless

232
00:09:38,769 --> 00:09:42,269
authentic C that's providing the

233
00:09:40,779 --> 00:09:47,680
authentication in front of everything

234
00:09:42,269 --> 00:09:49,720
the firewall manager we basically we

235
00:09:47,680 --> 00:09:51,638
have to import everything from the

236
00:09:49,720 --> 00:09:53,740
inventory the inventories pinging the

237
00:09:51,639 --> 00:09:56,139
firewall manager letting it know when it

238
00:09:53,740 --> 00:09:57,819
needs to go get something new that it's

239
00:09:56,139 --> 00:10:01,420
all automated so it happens very very

240
00:09:57,819 --> 00:10:02,860
fast after creating a new project then

241
00:10:01,420 --> 00:10:04,979
we have a set of base level firewall

242
00:10:02,860 --> 00:10:07,600
rules that we've deemed safe that's

243
00:10:04,980 --> 00:10:10,029
allowing traffic from our stateless

244
00:10:07,600 --> 00:10:12,250
proxy especially for App Engine and then

245
00:10:10,029 --> 00:10:14,740
we have an SSH proxy that does the same

246
00:10:12,250 --> 00:10:16,329
thing on that protocol and a few other

247
00:10:14,740 --> 00:10:19,180
internal only firewall rules that we

248
00:10:16,329 --> 00:10:21,939
allow and then it constantly is

249
00:10:19,180 --> 00:10:23,979
monitoring the state of the V PCs to

250
00:10:21,939 --> 00:10:26,889
ensure that developers aren't changing

251
00:10:23,980 --> 00:10:30,519
those and we revert any non-approved

252
00:10:26,889 --> 00:10:33,939
rules so the architecture looks like

253
00:10:30,519 --> 00:10:36,189
this the service inventory pings the

254
00:10:33,939 --> 00:10:38,259
firewall managers firewall manager is

255
00:10:36,189 --> 00:10:40,509
also storing a source of truth it is

256
00:10:38,259 --> 00:10:43,870
basically the exact same data that's in

257
00:10:40,509 --> 00:10:45,309
the fleet but we have to store what we

258
00:10:43,870 --> 00:10:47,439
believe is the source of truth so that

259
00:10:45,309 --> 00:10:49,209
when we scan the fleet its synchronizing

260
00:10:47,439 --> 00:10:51,069
and making sure that the firewalls are

261
00:10:49,209 --> 00:10:53,209
correct if developer changes one of

262
00:10:51,069 --> 00:10:54,979
those accidentally opens something up

263
00:10:53,210 --> 00:10:58,460
even purposely they open something up

264
00:10:54,980 --> 00:10:59,750
we're gonna change that back and they

265
00:10:58,460 --> 00:11:02,180
have to come back to us and we'll be

266
00:10:59,750 --> 00:11:03,680
able to update the rules through our our

267
00:11:02,180 --> 00:11:07,010
firewall manager and so the cloud

268
00:11:03,680 --> 00:11:09,410
directly yes so rather than using

269
00:11:07,010 --> 00:11:11,420
firewall rules to just gate to IPS we're

270
00:11:09,410 --> 00:11:14,390
just using firewall rules to close the

271
00:11:11,420 --> 00:11:15,709
service entirely down and once we've

272
00:11:14,390 --> 00:11:18,050
done that we now need to open up

273
00:11:15,710 --> 00:11:19,730
channels again for either employees to

274
00:11:18,050 --> 00:11:21,439
start accessing services or for services

275
00:11:19,730 --> 00:11:23,450
to start accessing each other and so

276
00:11:21,440 --> 00:11:25,220
that's where this stateless authentic C

277
00:11:23,450 --> 00:11:27,200
comes in so it should handle exactly

278
00:11:25,220 --> 00:11:28,820
those two cases it should be incredibly

279
00:11:27,200 --> 00:11:30,050
easy to set up so in the case of App

280
00:11:28,820 --> 00:11:32,840
Engine this is just set up by default

281
00:11:30,050 --> 00:11:34,310
for our developers for other services

282
00:11:32,840 --> 00:11:35,810
there's a small config change they have

283
00:11:34,310 --> 00:11:39,469
to make in our proxy so that way we know

284
00:11:35,810 --> 00:11:41,180
how to route to them and it should it's

285
00:11:39,470 --> 00:11:43,010
yeah you should stay in line with our

286
00:11:41,180 --> 00:11:45,349
aqwal service so we know exactly the

287
00:11:43,010 --> 00:11:46,790
right apples and we can enforce those

288
00:11:45,350 --> 00:11:49,040
and the really critical thing is this

289
00:11:46,790 --> 00:11:50,240
has to be reliable and the reason for

290
00:11:49,040 --> 00:11:52,130
that is just because this sits in front

291
00:11:50,240 --> 00:11:54,290
of all of our internal infrastructure so

292
00:11:52,130 --> 00:11:57,410
if this goes down developer productivity

293
00:11:54,290 --> 00:11:59,089
drops close to zero so there's three

294
00:11:57,410 --> 00:12:00,920
main components to this proxy the first

295
00:11:59,090 --> 00:12:03,290
bit is managing configuration that's

296
00:12:00,920 --> 00:12:05,120
both alkyl configurations and routing

297
00:12:03,290 --> 00:12:07,400
configurations and then actually doing

298
00:12:05,120 --> 00:12:11,000
the authentic naught Z and finally

299
00:12:07,400 --> 00:12:13,459
actually proxying these requests so for

300
00:12:11,000 --> 00:12:14,990
the configuration there's two types like

301
00:12:13,460 --> 00:12:16,400
I said the first is routing and so we

302
00:12:14,990 --> 00:12:18,020
just have a config file checked into

303
00:12:16,400 --> 00:12:20,360
source code developers can go make

304
00:12:18,020 --> 00:12:22,100
changes to that and we can then go

305
00:12:20,360 --> 00:12:23,540
approve those changes to make sure it

306
00:12:22,100 --> 00:12:26,450
looks like they're not trying to route

307
00:12:23,540 --> 00:12:28,579
to something outside of our network or

308
00:12:26,450 --> 00:12:31,150
outside of our org and then as soon as

309
00:12:28,580 --> 00:12:33,050
those are approved we upload that to GCS

310
00:12:31,150 --> 00:12:34,939
similarly we've got the service which

311
00:12:33,050 --> 00:12:37,040
we've called a rotator and it pings out

312
00:12:34,940 --> 00:12:39,950
to our Apple service to fetch all the

313
00:12:37,040 --> 00:12:43,280
apples for our fleet and then it takes

314
00:12:39,950 --> 00:12:45,890
those transforms them and put pushes

315
00:12:43,280 --> 00:12:48,170
those up to GCS as well our proxy then

316
00:12:45,890 --> 00:12:50,270
actually reaches out to GCS every ten

317
00:12:48,170 --> 00:12:52,250
minutes and gathers all that data loads

318
00:12:50,270 --> 00:12:53,930
it into memory and

319
00:12:52,250 --> 00:12:56,269
yeah and then uses that to route

320
00:12:53,930 --> 00:12:58,459
requests appropriately and too often and

321
00:12:56,269 --> 00:13:00,110
aussie checks appropriately and what's

322
00:12:58,459 --> 00:13:02,839
really key about this infrastructure is

323
00:13:00,110 --> 00:13:04,610
that the if any of these services go

324
00:13:02,839 --> 00:13:06,500
down if GCS or the alkyl service goes

325
00:13:04,610 --> 00:13:08,449
down it doesn't take our proxy down we

326
00:13:06,500 --> 00:13:10,129
can keep running on stale data which

327
00:13:08,449 --> 00:13:12,258
allows things to stay available and

328
00:13:10,129 --> 00:13:14,540
because all these changes are happening

329
00:13:12,259 --> 00:13:16,970
out-of-band we don't have any inline

330
00:13:14,540 --> 00:13:22,939
dependencies so it increases reliability

331
00:13:16,970 --> 00:13:25,459
and reduces latency there we go and so

332
00:13:22,939 --> 00:13:28,699
for the actual proxying if a user is to

333
00:13:25,459 --> 00:13:30,859
proxy into the service how it works is

334
00:13:28,699 --> 00:13:32,899
they and their browser will go try to

335
00:13:30,860 --> 00:13:34,970
talk to the service behind the proxy if

336
00:13:32,899 --> 00:13:36,769
they're not authenticated the proxy will

337
00:13:34,970 --> 00:13:38,660
redirect them to Google's IP which is

338
00:13:36,769 --> 00:13:40,129
their o F proxy which sits in front of

339
00:13:38,660 --> 00:13:42,800
this other service we've called the jump

340
00:13:40,129 --> 00:13:45,920
point and they'll go through an OAuth

341
00:13:42,800 --> 00:13:47,750
dance with ia P and Google will then

342
00:13:45,920 --> 00:13:51,139
forward us their identity to the jump

343
00:13:47,750 --> 00:13:53,000
point we'll wrap that and return it and

344
00:13:51,139 --> 00:13:54,829
redirect the user back over to the proxy

345
00:13:53,000 --> 00:13:58,250
the proxy can now unwrap that identity

346
00:13:54,829 --> 00:14:00,829
set a session for that user based on

347
00:13:58,250 --> 00:14:03,319
looking at its Akal so if it chooses to

348
00:14:00,829 --> 00:14:06,769
authorize the user and then forwards the

349
00:14:03,319 --> 00:14:07,699
users request on to the actual proxy and

350
00:14:06,769 --> 00:14:09,829
now the user can just communicate

351
00:14:07,699 --> 00:14:11,540
through the proxy there's two things

352
00:14:09,829 --> 00:14:13,899
which are important to call out here one

353
00:14:11,540 --> 00:14:16,250
is for this o off dance that we're doing

354
00:14:13,899 --> 00:14:19,160
one of the original ideas we had was to

355
00:14:16,250 --> 00:14:21,589
do OAuth in the proxy itself rather than

356
00:14:19,160 --> 00:14:23,269
out at this jump point and there's two

357
00:14:21,589 --> 00:14:25,009
problems with that one is it makes the

358
00:14:23,269 --> 00:14:27,439
proxy not stateless and we want the

359
00:14:25,009 --> 00:14:30,589
proxy to remain stateless and the second

360
00:14:27,439 --> 00:14:33,980
one is that it allows the proxy to

361
00:14:30,589 --> 00:14:35,569
impersonate any user that if yet for a

362
00:14:33,980 --> 00:14:37,339
service any user that tries to talk to

363
00:14:35,569 --> 00:14:39,769
that particular service that service

364
00:14:37,339 --> 00:14:41,420
would now be able to authorize or to

365
00:14:39,769 --> 00:14:43,430
authenticate as that user to any other

366
00:14:41,420 --> 00:14:45,380
service and I'll walk through that

367
00:14:43,430 --> 00:14:47,599
attack in a minute

368
00:14:45,380 --> 00:14:50,300
the other cool generalization here is

369
00:14:47,600 --> 00:14:51,860
that this IAM point is really just a

370
00:14:50,300 --> 00:14:53,599
single sign-on provider and so you could

371
00:14:51,860 --> 00:14:55,519
have any single sign-on provider here as

372
00:14:53,600 --> 00:14:59,029
long as that returns a token that the

373
00:14:55,519 --> 00:15:01,699
proxy can unwrap that would work so to

374
00:14:59,029 --> 00:15:05,420
actually go through this attack and the

375
00:15:01,699 --> 00:15:05,990
reason why we didn't do the OAuth at the

376
00:15:05,420 --> 00:15:08,660
proxy

377
00:15:05,990 --> 00:15:10,400
so because we can't automate the

378
00:15:08,660 --> 00:15:11,870
creation of these Roth clients and we

379
00:15:10,400 --> 00:15:14,630
can't automate the creation of client

380
00:15:11,870 --> 00:15:17,480
IDs and client secrets the idea we had

381
00:15:14,630 --> 00:15:21,080
originally was to throw a fixed client

382
00:15:17,480 --> 00:15:22,760
ID at the proxy and you'll see how this

383
00:15:21,080 --> 00:15:24,230
breaks down so the user authenticates

384
00:15:22,760 --> 00:15:26,540
through the proxy to a malicious service

385
00:15:24,230 --> 00:15:28,430
the service now opens the new window it

386
00:15:26,540 --> 00:15:31,880
sends some JavaScript back opens up a

387
00:15:28,430 --> 00:15:34,550
new window kicking off an OAuth flow so

388
00:15:31,880 --> 00:15:38,650
the user goes to the OAuth provider in

389
00:15:34,550 --> 00:15:41,810
this case Google and it gets if they

390
00:15:38,650 --> 00:15:44,380
approve the OAuth grant they'll get

391
00:15:41,810 --> 00:15:46,819
redirected back to the malicious service

392
00:15:44,380 --> 00:15:49,520
or to the proxy rather with an

393
00:15:46,820 --> 00:15:50,720
authorization code but because our

394
00:15:49,520 --> 00:15:54,050
malicious service is running on the same

395
00:15:50,720 --> 00:15:55,850
domain as well as the proxy because it's

396
00:15:54,050 --> 00:15:57,740
being proxied it can now read that

397
00:15:55,850 --> 00:15:59,780
authorization code out of the request

398
00:15:57,740 --> 00:16:01,670
even though the proxy hasn't forwarded

399
00:15:59,780 --> 00:16:04,670
it along just by taking advantage of the

400
00:16:01,670 --> 00:16:06,740
same origin policy now that it has the

401
00:16:04,670 --> 00:16:08,599
authorization code what it can do is

402
00:16:06,740 --> 00:16:10,580
it's going to enter this race condition

403
00:16:08,600 --> 00:16:12,080
where it's trying to authenticate on

404
00:16:10,580 --> 00:16:13,700
behalf of the user to this benign

405
00:16:12,080 --> 00:16:16,580
service faster than the proxy can

406
00:16:13,700 --> 00:16:18,260
authenticate to the OAuth provider so

407
00:16:16,580 --> 00:16:19,640
it's actually happening here is anytime

408
00:16:18,260 --> 00:16:21,170
our services are talking to each other

409
00:16:19,640 --> 00:16:23,510
they're gonna go through this proxy so

410
00:16:21,170 --> 00:16:25,069
it's gonna hit the proxy the proxy is

411
00:16:23,510 --> 00:16:26,390
going to say you're not authenticated

412
00:16:25,070 --> 00:16:28,640
you have to go to Google it'll send them

413
00:16:26,390 --> 00:16:29,960
a redirect over to Google rather than

414
00:16:28,640 --> 00:16:31,640
going to Google because they have the

415
00:16:29,960 --> 00:16:33,500
authorization code for this user who is

416
00:16:31,640 --> 00:16:35,780
accessing their site they can now send

417
00:16:33,500 --> 00:16:38,960
this authorization code back to the

418
00:16:35,780 --> 00:16:41,630
proxy and at this point the proxy will

419
00:16:38,960 --> 00:16:43,010
take that authorization code and send it

420
00:16:41,630 --> 00:16:45,020
to Google so you now have two instances

421
00:16:43,010 --> 00:16:48,819
of this proxy competing against each

422
00:16:45,020 --> 00:16:52,280
other for who gets to Google first and

423
00:16:48,820 --> 00:16:53,630
if the second proxy wins at the proxy in

424
00:16:52,280 --> 00:16:55,579
front of the benign service wins this

425
00:16:53,630 --> 00:16:57,710
race the proxy will end up

426
00:16:55,580 --> 00:16:59,900
authenticating the malicious service to

427
00:16:57,710 --> 00:17:01,550
the benign service as this user and so

428
00:16:59,900 --> 00:17:04,970
now the malicious service is able to

429
00:17:01,550 --> 00:17:06,409
take any of its identities that come to

430
00:17:04,970 --> 00:17:08,690
it and replay those against other

431
00:17:06,410 --> 00:17:10,880
services so that's why we created this

432
00:17:08,690 --> 00:17:14,600
whole jump point to avoid this entire

433
00:17:10,880 --> 00:17:17,120
attack scenario so going back to the

434
00:17:14,599 --> 00:17:18,679
actual proxying and how this works for

435
00:17:17,119 --> 00:17:19,149
App Engine because App Engine doesn't

436
00:17:18,680 --> 00:17:20,320
have any

437
00:17:19,150 --> 00:17:22,839
sort of notion of an internal network

438
00:17:20,319 --> 00:17:25,000
what we did is we said for the static IP

439
00:17:22,839 --> 00:17:26,619
addresses of our proxy will allow

440
00:17:25,000 --> 00:17:27,940
requests from that into App Engine

441
00:17:26,619 --> 00:17:29,830
services and we'll punch a hole in the

442
00:17:27,940 --> 00:17:32,230
firewall specifically for those IP

443
00:17:29,830 --> 00:17:35,169
addresses for non App Engine things we

444
00:17:32,230 --> 00:17:37,570
have this leaf proxy where we VP c-p-r

445
00:17:35,170 --> 00:17:39,730
it to any service that our developers

446
00:17:37,570 --> 00:17:41,590
create and we can now route through that

447
00:17:39,730 --> 00:17:42,970
and so the central proxy can do the

448
00:17:41,590 --> 00:17:47,470
often and not see and then we route out

449
00:17:42,970 --> 00:17:50,050
through these leaf proxies so this works

450
00:17:47,470 --> 00:17:51,880
for low scale thing so there's basically

451
00:17:50,050 --> 00:17:53,530
two big problems here one is latency

452
00:17:51,880 --> 00:17:54,820
because we're doing we've we've added an

453
00:17:53,530 --> 00:17:57,129
additional hop particularly for App

454
00:17:54,820 --> 00:17:59,639
Engine and the second one is clouds bill

455
00:17:57,130 --> 00:18:02,800
on egress or at least Google and Amazon

456
00:17:59,640 --> 00:18:04,150
and because of that because we're

457
00:18:02,800 --> 00:18:06,760
egressing twice we're getting billed

458
00:18:04,150 --> 00:18:08,620
twice for all of our traffic and so this

459
00:18:06,760 --> 00:18:12,160
becomes incredibly expensive if we want

460
00:18:08,620 --> 00:18:13,570
to do hike ups so because of that we

461
00:18:12,160 --> 00:18:14,950
then created this world of managed

462
00:18:13,570 --> 00:18:16,990
services where users don't have

463
00:18:14,950 --> 00:18:18,430
developers don't have to move to manage

464
00:18:16,990 --> 00:18:21,400
services unless they're trying to have

465
00:18:18,430 --> 00:18:23,800
hike ups or user data and we've created

466
00:18:21,400 --> 00:18:26,830
yeah a different sort of suite of tools

467
00:18:23,800 --> 00:18:29,440
to handle this case yeah so the the

468
00:18:26,830 --> 00:18:33,189
goals here are to avoid some of those

469
00:18:29,440 --> 00:18:35,830
problems we we need very low latency we

470
00:18:33,190 --> 00:18:38,590
we need this environment to basically be

471
00:18:35,830 --> 00:18:40,510
transparent we also needed to be cheap

472
00:18:38,590 --> 00:18:44,080
we don't want to be adding any overhead

473
00:18:40,510 --> 00:18:46,210
on cost we need we still need granular

474
00:18:44,080 --> 00:18:47,860
authentication and authorization and we

475
00:18:46,210 --> 00:18:51,280
want visibility into what's going on in

476
00:18:47,860 --> 00:18:54,129
this production network so the

477
00:18:51,280 --> 00:18:56,740
components here to build this out we

478
00:18:54,130 --> 00:18:59,950
have API an API gateway that's our front

479
00:18:56,740 --> 00:19:01,270
proxy we have a service mesh that's

480
00:18:59,950 --> 00:19:03,220
where all the services live and

481
00:19:01,270 --> 00:19:05,740
communicate with each other we have a

482
00:19:03,220 --> 00:19:07,480
central configuration controller that's

483
00:19:05,740 --> 00:19:10,900
managing how everything is routed

484
00:19:07,480 --> 00:19:13,750
authenticated etc and it's the the

485
00:19:10,900 --> 00:19:16,420
commanding control center for users or

486
00:19:13,750 --> 00:19:19,090
developers to configure things and we

487
00:19:16,420 --> 00:19:20,350
have a service sidecar that allows the

488
00:19:19,090 --> 00:19:24,070
service mesh to work appropriately

489
00:19:20,350 --> 00:19:27,669
that's what most of this is working with

490
00:19:24,070 --> 00:19:29,470
the help of envoy is on voice a proxy

491
00:19:27,670 --> 00:19:30,779
first created by lyft and I was an open

492
00:19:29,470 --> 00:19:35,039
source

493
00:19:30,779 --> 00:19:38,700
proxy so the first component here API

494
00:19:35,039 --> 00:19:42,119
gateway this is on board as a front

495
00:19:38,700 --> 00:19:42,659
proxy we've got this is a central entry

496
00:19:42,119 --> 00:19:45,899
point

497
00:19:42,659 --> 00:19:47,820
it's got authentication filters these

498
00:19:45,899 --> 00:19:49,349
are managed by the security team

499
00:19:47,820 --> 00:19:53,099
some of them written by the security

500
00:19:49,349 --> 00:19:54,830
team it's very it's one point that we

501
00:19:53,099 --> 00:19:57,450
have to look at and awed it and

502
00:19:54,830 --> 00:20:00,629
understand for the ingress traffic to

503
00:19:57,450 --> 00:20:04,710
our environment and it's centrally

504
00:20:00,629 --> 00:20:08,009
managed via the Envoy XDS protocol which

505
00:20:04,710 --> 00:20:10,019
we'll get into so the service mesh this

506
00:20:08,009 --> 00:20:11,639
is what sits behind the API gateway the

507
00:20:10,019 --> 00:20:14,070
API gateway understands how to route to

508
00:20:11,639 --> 00:20:16,830
each service over the that lives on the

509
00:20:14,070 --> 00:20:19,439
service mash it's all configured via the

510
00:20:16,830 --> 00:20:22,908
configuration controller Envoy here is

511
00:20:19,440 --> 00:20:25,859
also providing authentication encryption

512
00:20:22,909 --> 00:20:28,080
metrics and none of this is routable

513
00:20:25,859 --> 00:20:30,178
from the internet so we don't have the

514
00:20:28,080 --> 00:20:32,639
problem where we have in some of the

515
00:20:30,179 --> 00:20:35,039
other environments or services that we

516
00:20:32,639 --> 00:20:36,389
deal with so the the central

517
00:20:35,039 --> 00:20:40,080
configuration controller this is like

518
00:20:36,389 --> 00:20:42,840
the the brain of the system it works by

519
00:20:40,080 --> 00:20:45,570
the the Envoy XDS protocol it's

520
00:20:42,840 --> 00:20:47,509
basically how envoy communicates to

521
00:20:45,570 --> 00:20:49,289
central service and downloads its

522
00:20:47,509 --> 00:20:53,009
configuration state routes

523
00:20:49,289 --> 00:20:56,099
authentication and filters so because

524
00:20:53,009 --> 00:20:58,739
the routes come with authentication and

525
00:20:56,099 --> 00:21:00,749
authorization built-in we have an

526
00:20:58,739 --> 00:21:03,809
approval workflow so anytime that

527
00:21:00,749 --> 00:21:06,570
service a needs talk to service be the

528
00:21:03,809 --> 00:21:08,908
owners of service B have to approve that

529
00:21:06,570 --> 00:21:11,369
service a is allowed to talk to service

530
00:21:08,909 --> 00:21:12,960
B and then that builds in the

531
00:21:11,369 --> 00:21:16,080
authentication authorization the

532
00:21:12,960 --> 00:21:19,139
services don't need to use a library or

533
00:21:16,080 --> 00:21:22,019
anything like that so the the service

534
00:21:19,139 --> 00:21:24,299
sidecar this is what enables that to

535
00:21:22,019 --> 00:21:27,359
work without building anything into the

536
00:21:24,299 --> 00:21:29,789
application so envoy is running as a

537
00:21:27,359 --> 00:21:33,269
sidecar we also have a component that

538
00:21:29,789 --> 00:21:35,269
bootstraps the identity is because we

539
00:21:33,269 --> 00:21:38,129
want this to work in multiple clouds

540
00:21:35,269 --> 00:21:39,839
each cloud has various primitives that

541
00:21:38,129 --> 00:21:42,509
allow us to establish identity of a

542
00:21:39,839 --> 00:21:45,599
either a VM host or a role or a service

543
00:21:42,509 --> 00:21:47,159
account so we basically take whatever

544
00:21:45,599 --> 00:21:49,259
that is in whichever environment we're

545
00:21:47,159 --> 00:21:52,940
in connect to our central CA to pivot

546
00:21:49,259 --> 00:21:55,009
from a cloud native identity to our

547
00:21:52,940 --> 00:21:57,269
internal mesh identity which is

548
00:21:55,009 --> 00:22:01,470
understandable across every cloud every

549
00:21:57,269 --> 00:22:03,119
service that we have so then once it

550
00:22:01,470 --> 00:22:04,289
gets that identity it's able to take

551
00:22:03,119 --> 00:22:06,918
that identity and go to the

552
00:22:04,289 --> 00:22:10,679
configuration controller that which

553
00:22:06,919 --> 00:22:15,570
knows which configuration to send to

554
00:22:10,679 --> 00:22:17,279
that service which is how that service

555
00:22:15,570 --> 00:22:20,279
then authenticates traffic it knows how

556
00:22:17,279 --> 00:22:22,559
to set up the routes it does all the

557
00:22:20,279 --> 00:22:25,679
service discovery there and then it also

558
00:22:22,559 --> 00:22:29,580
exposes a port locally for the egress

559
00:22:25,679 --> 00:22:32,009
traffic of the service to be routed

560
00:22:29,580 --> 00:22:34,080
externally so this means the services or

561
00:22:32,009 --> 00:22:38,279
the the application developers don't

562
00:22:34,080 --> 00:22:39,599
need to do any like TLS encryption they

563
00:22:38,279 --> 00:22:43,950
don't need to do authentication they're

564
00:22:39,599 --> 00:22:45,839
just sending raw traffic either HTTP RPC

565
00:22:43,950 --> 00:22:48,570
and on boys

566
00:22:45,839 --> 00:22:50,279
adding those components on top and it

567
00:22:48,570 --> 00:22:54,830
also gives us visibility with all those

568
00:22:50,279 --> 00:22:59,460
metrics so some of the challenges here

569
00:22:54,830 --> 00:23:03,199
we've got a a little bit different

570
00:22:59,460 --> 00:23:04,950
onboarding experience than the the first

571
00:23:03,200 --> 00:23:07,979
environment we talked about it's not

572
00:23:04,950 --> 00:23:10,440
quite as automatic when a service owner

573
00:23:07,979 --> 00:23:12,929
wants to go into this managed world they

574
00:23:10,440 --> 00:23:14,399
have to do basically they have to be

575
00:23:12,929 --> 00:23:19,649
able to create their application in a

576
00:23:14,399 --> 00:23:21,209
container and and go to the the

577
00:23:19,649 --> 00:23:22,918
configuration controller set up all the

578
00:23:21,210 --> 00:23:26,700
routes they need to get all their right

579
00:23:22,919 --> 00:23:29,159
approvals so there is some onboarding

580
00:23:26,700 --> 00:23:31,080
friction there and then there's this

581
00:23:29,159 --> 00:23:33,269
noisy neighbor problem where we've moved

582
00:23:31,080 --> 00:23:35,839
from everybody is in their own account

583
00:23:33,269 --> 00:23:40,440
they deal with cloud quotas for

584
00:23:35,839 --> 00:23:44,190
resources API limits individually with

585
00:23:40,440 --> 00:23:46,889
the cloud now we live in one VPC one

586
00:23:44,190 --> 00:23:48,749
account so we have to deal with that at

587
00:23:46,889 --> 00:23:50,979
an infrastructure team level within

588
00:23:48,749 --> 00:23:52,890
snapchat and

589
00:23:50,980 --> 00:23:54,940
we deal with that with the cloud

590
00:23:52,890 --> 00:23:56,740
separately so we we have to make sure

591
00:23:54,940 --> 00:24:00,660
that one team doesn't use up all the

592
00:23:56,740 --> 00:24:04,090
quota for the rest of the company and

593
00:24:00,660 --> 00:24:06,700
take out some unrelated service so that

594
00:24:04,090 --> 00:24:08,649
that's a new problem that we are

595
00:24:06,700 --> 00:24:11,230
challenged that we have we also have

596
00:24:08,650 --> 00:24:15,900
this because we've centralized on one

597
00:24:11,230 --> 00:24:18,850
ingress point we do have a potential

598
00:24:15,900 --> 00:24:22,090
centralized point of failure but because

599
00:24:18,850 --> 00:24:23,169
it's simpler it's a single place where

600
00:24:22,090 --> 00:24:25,179
we're putting all of our authentication

601
00:24:23,170 --> 00:24:27,910
filters instead of every application

602
00:24:25,180 --> 00:24:29,380
across our environment it's not a

603
00:24:27,910 --> 00:24:32,430
library that developers have to

604
00:24:29,380 --> 00:24:36,910
integrate and get right every time that

605
00:24:32,430 --> 00:24:39,990
it's in general it it's it's because of

606
00:24:36,910 --> 00:24:43,720
the simplicity it it's easier to manage

607
00:24:39,990 --> 00:24:47,170
yet so we're trying to get everyone into

608
00:24:43,720 --> 00:24:48,520
this new mesh world that we have but we

609
00:24:47,170 --> 00:24:50,290
still have this problem of we have a

610
00:24:48,520 --> 00:24:53,470
bunch of existing services that were

611
00:24:50,290 --> 00:24:55,750
created and they aren't built for the

612
00:24:53,470 --> 00:24:57,160
mesh right now and they existed before

613
00:24:55,750 --> 00:25:00,760
we had a lot of these controls in place

614
00:24:57,160 --> 00:25:02,740
so in order to handle this case we first

615
00:25:00,760 --> 00:25:04,150
did a lot of introspection to think how

616
00:25:02,740 --> 00:25:05,680
we're gonna solve this problem and we

617
00:25:04,150 --> 00:25:08,080
created something we called the

618
00:25:05,680 --> 00:25:10,120
introspection library and what this is

619
00:25:08,080 --> 00:25:11,860
is a simple library it's a line of code

620
00:25:10,120 --> 00:25:13,840
to integrate this into any service and

621
00:25:11,860 --> 00:25:15,219
it gets a lot of information about the

622
00:25:13,840 --> 00:25:16,929
service that we care about so it's

623
00:25:15,220 --> 00:25:20,110
gathering the routes the auth controls

624
00:25:16,930 --> 00:25:22,360
it gets all the package info and a few

625
00:25:20,110 --> 00:25:24,219
other pieces of metadata and we wanted

626
00:25:22,360 --> 00:25:25,240
to run just on instance startup so that

627
00:25:24,220 --> 00:25:26,890
way it's not consuming resources

628
00:25:25,240 --> 00:25:28,540
throughout the lifetime of the instance

629
00:25:26,890 --> 00:25:29,830
and it's pretty predictable the

630
00:25:28,540 --> 00:25:32,740
footprint that it will have on people

631
00:25:29,830 --> 00:25:35,710
services and because of the information

632
00:25:32,740 --> 00:25:37,870
that it's gathering we can really

633
00:25:35,710 --> 00:25:39,670
trigger some high signal alerts that we

634
00:25:37,870 --> 00:25:40,810
can operate on so that way while

635
00:25:39,670 --> 00:25:42,940
services are figuring out their

636
00:25:40,810 --> 00:25:44,379
migration strategy over to the mesh we

637
00:25:42,940 --> 00:25:47,770
can have a lot of confidence in their

638
00:25:44,380 --> 00:25:49,210
current posture so the way this all

639
00:25:47,770 --> 00:25:51,940
works is again we've got that central

640
00:25:49,210 --> 00:25:53,980
billing service which just enables

641
00:25:51,940 --> 00:25:56,440
billing for every new thing we create

642
00:25:53,980 --> 00:25:58,480
and that just pings us that some new

643
00:25:56,440 --> 00:26:00,910
service has been created so we can then

644
00:25:58,480 --> 00:26:02,590
go to GCS or s3 and we can set up

645
00:26:00,910 --> 00:26:05,030
permissions and roles for that service

646
00:26:02,590 --> 00:26:07,070
to write to our bucket

647
00:26:05,030 --> 00:26:08,870
for the service owner they'll then

648
00:26:07,070 --> 00:26:11,450
incorporate this library into their

649
00:26:08,870 --> 00:26:13,310
service and they'll as soon as an

650
00:26:11,450 --> 00:26:17,690
instance starts up there they ping are

651
00:26:13,310 --> 00:26:19,190
our buckets and we can we periodically

652
00:26:17,690 --> 00:26:20,870
go to these buckets we aggregate the

653
00:26:19,190 --> 00:26:23,360
data we analyze it and then we can

654
00:26:20,870 --> 00:26:24,709
trigger any alerts and based on

655
00:26:23,360 --> 00:26:26,030
different things that people have done

656
00:26:24,710 --> 00:26:28,250
like they might not be using our off

657
00:26:26,030 --> 00:26:30,129
libraries anymore or they might have

658
00:26:28,250 --> 00:26:32,780
opened up an endpoint with no auth

659
00:26:30,130 --> 00:26:34,130
whatsoever and the reason we have this

660
00:26:32,780 --> 00:26:35,899
architecture rather than service a

661
00:26:34,130 --> 00:26:38,630
trying to reach back out to our

662
00:26:35,900 --> 00:26:40,700
introspection back-end is kind of

663
00:26:38,630 --> 00:26:42,560
twofold one it's a little bit easier to

664
00:26:40,700 --> 00:26:44,600
use just sort of cloud native

665
00:26:42,560 --> 00:26:46,580
authentication mechanisms with roles and

666
00:26:44,600 --> 00:26:48,679
permissions and the second one is

667
00:26:46,580 --> 00:26:51,409
because we wanted to keep this library

668
00:26:48,680 --> 00:26:53,870
very simple and not have to manage State

669
00:26:51,410 --> 00:26:55,640
and understand one version might have

670
00:26:53,870 --> 00:26:57,919
one version of a service might have 50

671
00:26:55,640 --> 00:26:59,690
instances instead right on every single

672
00:26:57,920 --> 00:27:01,880
instance we have this thundering herd

673
00:26:59,690 --> 00:27:03,410
problem where if we get a spike in

674
00:27:01,880 --> 00:27:05,540
traffic we might have thousands of

675
00:27:03,410 --> 00:27:06,740
instances suddenly spin up and so we

676
00:27:05,540 --> 00:27:09,440
want them to write to something that's

677
00:27:06,740 --> 00:27:10,760
very highly available so that way we can

678
00:27:09,440 --> 00:27:17,750
guarantee we're still getting the data

679
00:27:10,760 --> 00:27:20,390
we want yeah so going back over each of

680
00:27:17,750 --> 00:27:24,230
the components that we've got we're able

681
00:27:20,390 --> 00:27:27,290
to gate our network traffic with the

682
00:27:24,230 --> 00:27:28,550
firewall manager this effectively

683
00:27:27,290 --> 00:27:31,190
creates a perimeter around our

684
00:27:28,550 --> 00:27:34,310
infrastructure even when there isn't one

685
00:27:31,190 --> 00:27:37,940
there by the cloud itself then we create

686
00:27:34,310 --> 00:27:39,440
the the proxy the proxy is what

687
00:27:37,940 --> 00:27:42,950
providing that authentication and

688
00:27:39,440 --> 00:27:45,980
allowing that trusted path into our

689
00:27:42,950 --> 00:27:49,370
infrastructure we have the API gateway

690
00:27:45,980 --> 00:27:51,290
in service mesh because that didn't

691
00:27:49,370 --> 00:27:52,760
scale to our production level traffic

692
00:27:51,290 --> 00:27:55,700
but we still wanted all those same Garan

693
00:27:52,760 --> 00:27:57,320
security guarantees and we have an

694
00:27:55,700 --> 00:27:59,960
introspection library to understand the

695
00:27:57,320 --> 00:28:01,730
internals of our applications that

696
00:27:59,960 --> 00:28:05,300
allows us to understand this the

697
00:28:01,730 --> 00:28:07,040
changing state over time and know when

698
00:28:05,300 --> 00:28:08,419
we want to go look at an app if

699
00:28:07,040 --> 00:28:10,280
something changes that's actually

700
00:28:08,420 --> 00:28:12,020
interesting to us we can actually ping

701
00:28:10,280 --> 00:28:13,668
them and trigger a security review

702
00:28:12,020 --> 00:28:17,499
instead of waiting for them to go

703
00:28:13,669 --> 00:28:20,799
talk to us so going back over the goals

704
00:28:17,499 --> 00:28:23,570
we've created a system that's flexible

705
00:28:20,799 --> 00:28:25,279
we don't require especially in the

706
00:28:23,570 --> 00:28:28,189
beginning we don't require any developer

707
00:28:25,279 --> 00:28:32,749
teams to abide by any specific language

708
00:28:28,190 --> 00:28:34,669
or libraries or rules there when we get

709
00:28:32,749 --> 00:28:37,519
into the production environment there's

710
00:28:34,669 --> 00:28:41,119
some caveats there but that's only for

711
00:28:37,519 --> 00:28:45,879
the production load the scalability we

712
00:28:41,119 --> 00:28:50,570
need to or we've created this system to

713
00:28:45,879 --> 00:28:52,609
allow for the developers to just deploy

714
00:28:50,570 --> 00:28:56,329
their app and it's immediately available

715
00:28:52,609 --> 00:28:57,708
they don't have to ping us we're not we

716
00:28:56,329 --> 00:28:58,849
don't have an ops team that's setting

717
00:28:57,709 --> 00:29:00,499
this up

718
00:28:58,849 --> 00:29:02,269
it's granular we're getting real

719
00:29:00,499 --> 00:29:07,039
identity authentication authorization

720
00:29:02,269 --> 00:29:10,369
instead of IPS or something that doesn't

721
00:29:07,039 --> 00:29:12,709
really get you that authentication you

722
00:29:10,369 --> 00:29:16,279
need and it's automatable where we're

723
00:29:12,709 --> 00:29:20,749
again we're not there with the ops team

724
00:29:16,279 --> 00:29:22,669
and setting things up for everybody so

725
00:29:20,749 --> 00:29:26,269
going back and looking at the the way to

726
00:29:22,669 --> 00:29:27,799
do this from a clean slate you're moving

727
00:29:26,269 --> 00:29:30,229
into the cloud or you're in the cloud

728
00:29:27,799 --> 00:29:31,759
you start by getting visibility into

729
00:29:30,229 --> 00:29:35,570
that infrastructure laying the

730
00:29:31,759 --> 00:29:39,049
foundation you you need to inventory and

731
00:29:35,570 --> 00:29:40,849
see what you have it without that you

732
00:29:39,049 --> 00:29:42,709
don't you don't know where to start you

733
00:29:40,849 --> 00:29:46,849
don't know what you're looking for to

734
00:29:42,709 --> 00:29:48,950
put a gate around then the first step

735
00:29:46,849 --> 00:29:51,200
create start to create a perimeter

736
00:29:48,950 --> 00:29:51,919
firewall manager and you can start with

737
00:29:51,200 --> 00:29:55,159
IPs

738
00:29:51,919 --> 00:29:58,309
that's how we started and that allows

739
00:29:55,159 --> 00:30:02,419
you to start to at least stop the

740
00:29:58,309 --> 00:30:06,158
bleeding you you know what's coming into

741
00:30:02,419 --> 00:30:10,129
your network then you can add

742
00:30:06,159 --> 00:30:11,959
granularity you can the IP based off is

743
00:30:10,129 --> 00:30:14,418
not granular enough especially for

744
00:30:11,959 --> 00:30:16,070
services that require employees to

745
00:30:14,419 --> 00:30:18,559
authenticate so you can add this

746
00:30:16,070 --> 00:30:20,950
stateless proxy this allows you to to

747
00:30:18,559 --> 00:30:23,959
really have authentication authorization

748
00:30:20,950 --> 00:30:27,810
controls that allow you to understand

749
00:30:23,959 --> 00:30:34,440
and control what's going on in your

750
00:30:27,810 --> 00:30:36,840
and I went too far ahead and then as you

751
00:30:34,440 --> 00:30:38,760
transition to the production environment

752
00:30:36,840 --> 00:30:40,199
in this world you're still doing a

753
00:30:38,760 --> 00:30:41,550
manual review but you've solved the

754
00:30:40,200 --> 00:30:44,910
first half of our development lifecycle

755
00:30:41,550 --> 00:30:46,409
problem so I and a lot of those things

756
00:30:44,910 --> 00:30:48,120
might never get to the point where they

757
00:30:46,410 --> 00:30:52,350
need to launch into the production world

758
00:30:48,120 --> 00:30:54,510
so it really reduces the ops load then

759
00:30:52,350 --> 00:30:57,570
you can start by understanding what's in

760
00:30:54,510 --> 00:31:00,420
production this introspection library or

761
00:30:57,570 --> 00:31:02,040
something that can see what artifacts

762
00:31:00,420 --> 00:31:05,850
are being used especially versions of

763
00:31:02,040 --> 00:31:07,649
artifacts are third-party artifacts that

764
00:31:05,850 --> 00:31:09,870
allows you to see what's changing over

765
00:31:07,650 --> 00:31:13,940
time if security vulnerability is

766
00:31:09,870 --> 00:31:16,229
reported you're able to target the

767
00:31:13,940 --> 00:31:21,780
applications there in production that

768
00:31:16,230 --> 00:31:25,230
need to be updated and then lastly you

769
00:31:21,780 --> 00:31:27,210
can create a API gateway service mesh

770
00:31:25,230 --> 00:31:30,600
this really allows you to provide those

771
00:31:27,210 --> 00:31:32,610
controls in production instead of seeing

772
00:31:30,600 --> 00:31:36,990
what's going on now you can actually

773
00:31:32,610 --> 00:31:38,850
control what's going on yesö along the

774
00:31:36,990 --> 00:31:42,030
way as we were going through this there

775
00:31:38,850 --> 00:31:44,100
are a few things we learned which I

776
00:31:42,030 --> 00:31:45,840
wanted to go over so one of the first

777
00:31:44,100 --> 00:31:47,219
ones is when we started this whole thing

778
00:31:45,840 --> 00:31:49,560
we were kind of doing this whack-a-mole

779
00:31:47,220 --> 00:31:51,150
game of teams coming to us asking to be

780
00:31:49,560 --> 00:31:52,830
reviewed a restaurant to find dangerous

781
00:31:51,150 --> 00:31:55,500
services and reviewing them and we

782
00:31:52,830 --> 00:31:57,210
realized that did not scale at all and

783
00:31:55,500 --> 00:32:00,180
so instead we doubled down on

784
00:31:57,210 --> 00:32:04,490
engineering and really tried to build

785
00:32:00,180 --> 00:32:06,300
reliable and scalable services and

786
00:32:04,490 --> 00:32:07,980
through that we've been able to

787
00:32:06,300 --> 00:32:10,230
accomplish much stronger security

788
00:32:07,980 --> 00:32:13,020
guarantees than just manually looking at

789
00:32:10,230 --> 00:32:15,900
things and reviewing yeah reviewing

790
00:32:13,020 --> 00:32:18,450
services the next one was gaining a

791
00:32:15,900 --> 00:32:20,670
central hook into the fleet early was

792
00:32:18,450 --> 00:32:22,440
incredibly valuable because it it began

793
00:32:20,670 --> 00:32:23,970
to stop the bleeding of inventory we

794
00:32:22,440 --> 00:32:25,680
were able to go back and we now had a

795
00:32:23,970 --> 00:32:28,110
finite number of things to go back in

796
00:32:25,680 --> 00:32:31,680
inventory and this allowed us to just

797
00:32:28,110 --> 00:32:34,740
see what it is that we have running and

798
00:32:31,680 --> 00:32:37,650
so in a similar note and we think

799
00:32:34,740 --> 00:32:38,740
visibility is it's much more important

800
00:32:37,650 --> 00:32:41,410
to get visibility

801
00:32:38,740 --> 00:32:42,610
were beginning to enforce things one

802
00:32:41,410 --> 00:32:44,140
because it allows you to figure out

803
00:32:42,610 --> 00:32:45,399
what's the right type of enforcement you

804
00:32:44,140 --> 00:32:49,150
should do you can start to understand

805
00:32:45,400 --> 00:32:50,830
what your fleet looks like and secondly

806
00:32:49,150 --> 00:32:54,970
it lets you just prioritize what should

807
00:32:50,830 --> 00:32:56,649
be gated first if we think about

808
00:32:54,970 --> 00:32:58,600
security very fundamentally like a

809
00:32:56,650 --> 00:33:01,030
security problem is just a developer

810
00:32:58,600 --> 00:33:03,760
making an assumption in code and not

811
00:33:01,030 --> 00:33:05,139
validating that assumption and so what

812
00:33:03,760 --> 00:33:07,510
we've tried to do with this entire

813
00:33:05,140 --> 00:33:09,340
architecture is keep things very simple

814
00:33:07,510 --> 00:33:11,260
because if things are simple we can

815
00:33:09,340 --> 00:33:12,490
easily understand what the assumptions

816
00:33:11,260 --> 00:33:15,820
are that we're making and then take

817
00:33:12,490 --> 00:33:17,470
these very simple just artifacts that

818
00:33:15,820 --> 00:33:19,510
we've created and deploy them really

819
00:33:17,470 --> 00:33:22,600
broadly and through that we're able to

820
00:33:19,510 --> 00:33:24,790
guarantee much stronger things about our

821
00:33:22,600 --> 00:33:26,379
security posture than putting a black

822
00:33:24,790 --> 00:33:30,340
box up in front instead of hoping it's

823
00:33:26,380 --> 00:33:32,350
defending us from attacks and finally

824
00:33:30,340 --> 00:33:33,669
we've really tried to offer engineering

825
00:33:32,350 --> 00:33:35,559
teams at carat throughout this entire

826
00:33:33,670 --> 00:33:37,300
process so we wanted to build things

827
00:33:35,559 --> 00:33:39,160
that are reliable we wanted to abstract

828
00:33:37,300 --> 00:33:40,570
away a lot of the authentication and

829
00:33:39,160 --> 00:33:42,370
authorization works they don't have to

830
00:33:40,570 --> 00:33:44,110
think about that with things like the

831
00:33:42,370 --> 00:33:45,340
introspection library because it's

832
00:33:44,110 --> 00:33:47,559
getting all the routes and the auth

833
00:33:45,340 --> 00:33:49,570
controls it's basically self documenting

834
00:33:47,559 --> 00:33:52,899
a lot of their api's for them which

835
00:33:49,570 --> 00:33:55,178
engineering teams seem to like and yeah

836
00:33:52,900 --> 00:33:57,610
by offering them a carat we really

837
00:33:55,179 --> 00:34:02,820
galvanize support for this entire thing

838
00:33:57,610 --> 00:34:06,250
and yeah got it to the scale it's a snap

839
00:34:02,820 --> 00:34:10,179
so with that we can now sleep better at

840
00:34:06,250 --> 00:34:12,489
night yeah we wanted to spend some time

841
00:34:10,179 --> 00:34:14,409
doing Q&A so if you guys have any

842
00:34:12,489 --> 00:34:17,520
questions we'd be happy to answer them

843
00:34:14,409 --> 00:34:17,520
thank you all

844
00:34:21,659 --> 00:34:27,509
there should be mics somewhere in the

845
00:34:24,940 --> 00:34:27,510
middle there

846
00:34:35,929 --> 00:34:44,429
okay so which technology is used in the

847
00:34:40,620 --> 00:34:49,159
stateless boxing sir in the stateless

848
00:34:44,429 --> 00:34:52,350
proxy yet yeah we basically wrote a

849
00:34:49,159 --> 00:34:58,980
somewhat simple Java proxy which just

850
00:34:52,350 --> 00:35:01,110
runs on kubernetes and yeah there are

851
00:34:58,980 --> 00:35:02,880
some open source versions that would do

852
00:35:01,110 --> 00:35:05,910
it on boy itself could potentially be

853
00:35:02,880 --> 00:35:08,240
used and then there's a bitly OAuth

854
00:35:05,910 --> 00:35:10,379
proxy that we we had used in the past

855
00:35:08,240 --> 00:35:17,160
but we don't we don't use that one

856
00:35:10,380 --> 00:35:22,920
anymore yeah hey I can't see so you're

857
00:35:17,160 --> 00:35:26,629
gonna have time so yeah we kind of went

858
00:35:22,920 --> 00:35:31,260
through a different scenario basically

859
00:35:26,630 --> 00:35:36,750
our infrastructure guys built services

860
00:35:31,260 --> 00:35:40,410
that that projects can plug into and so

861
00:35:36,750 --> 00:35:44,220
they restricted what networks for

862
00:35:40,410 --> 00:35:46,799
instance that the each project would be

863
00:35:44,220 --> 00:35:49,649
able to plug into and then it provided

864
00:35:46,800 --> 00:35:51,690
the underlying network services to those

865
00:35:49,650 --> 00:35:55,440
projects is that something you guys

866
00:35:51,690 --> 00:35:58,890
thought about as well yeah so looking at

867
00:35:55,440 --> 00:36:00,720
at least looking at GCP I that sounds

868
00:35:58,890 --> 00:36:04,529
much more like they're shared networking

869
00:36:00,720 --> 00:36:07,439
model and at least when we started that

870
00:36:04,530 --> 00:36:08,820
wasn't available yet and now that it is

871
00:36:07,440 --> 00:36:11,910
available it is what we were doing in

872
00:36:08,820 --> 00:36:15,090
our production world one of the problems

873
00:36:11,910 --> 00:36:16,799
we see there is that it things like that

874
00:36:15,090 --> 00:36:18,840
might be available in one cloud but not

875
00:36:16,800 --> 00:36:19,890
another so we've typically gone with the

876
00:36:18,840 --> 00:36:23,730
whatever the lowest common denominator

877
00:36:19,890 --> 00:36:25,560
across the clouds in our case AWS GSP so

878
00:36:23,730 --> 00:36:27,180
even if something's available in one of

879
00:36:25,560 --> 00:36:29,940
the clouds we might not use it just

880
00:36:27,180 --> 00:36:31,859
because we also want the same thing in

881
00:36:29,940 --> 00:36:34,650
another cloud that doesn't also provide

882
00:36:31,860 --> 00:36:38,730
that I think AWS is coming out with a

883
00:36:34,650 --> 00:36:41,040
shared V PC model or they have one that

884
00:36:38,730 --> 00:36:42,750
once that's available and tested we

885
00:36:41,040 --> 00:36:46,410
could consolidate everything and use

886
00:36:42,750 --> 00:36:48,240
that but we also have to enforce that

887
00:36:46,410 --> 00:36:49,230
like things like App Engine aren't used

888
00:36:48,240 --> 00:36:51,868
because the

889
00:36:49,230 --> 00:36:54,150
aren't part of this shared Network model

890
00:36:51,869 --> 00:36:55,800
and we have a lot of things on the App

891
00:36:54,150 --> 00:36:56,820
Engine a lot of developer experience on

892
00:36:55,800 --> 00:36:59,490
App Engine so I don't think we're ever

893
00:36:56,820 --> 00:37:01,260
getting away from that world okay and

894
00:36:59,490 --> 00:37:05,549
then I was interested in your

895
00:37:01,260 --> 00:37:08,190
enumeration project like how do you

896
00:37:05,550 --> 00:37:09,960
figure out everything that's running in

897
00:37:08,190 --> 00:37:14,330
your service is that running in a

898
00:37:09,960 --> 00:37:16,680
project by itself then yeah so the way

899
00:37:14,330 --> 00:37:18,900
again now that one actually has to be

900
00:37:16,680 --> 00:37:20,460
different per cloud just because it's

901
00:37:18,900 --> 00:37:24,119
dealing directly with the API is in the

902
00:37:20,460 --> 00:37:27,150
cloud so in AWS I believe they provide

903
00:37:24,119 --> 00:37:28,859
you like a JSON dump I forget the name

904
00:37:27,150 --> 00:37:31,380
of it but they just give you a JSON dump

905
00:37:28,859 --> 00:37:36,509
of everything it's deployed in your org

906
00:37:31,380 --> 00:37:38,119
and in GCP we've created a project or an

907
00:37:36,510 --> 00:37:42,270
application that can scan everything

908
00:37:38,119 --> 00:37:44,220
everything we care about and that has

909
00:37:42,270 --> 00:37:48,570
hooks to hang things like our firewall

910
00:37:44,220 --> 00:37:51,899
manager to provide or to get that back

911
00:37:48,570 --> 00:37:53,520
down if anything happens yeah once we

912
00:37:51,900 --> 00:37:56,250
created that billing service as well as

913
00:37:53,520 --> 00:37:58,380
just enables billing that really became

914
00:37:56,250 --> 00:37:59,940
a choke point for us to identify at

915
00:37:58,380 --> 00:38:01,950
least at a project level everything that

916
00:37:59,940 --> 00:38:03,690
exists because it just forced all the

917
00:38:01,950 --> 00:38:05,640
developers to come to us and say this is

918
00:38:03,690 --> 00:38:06,300
my service please turn billing on for me

919
00:38:05,640 --> 00:38:10,470
yeah

920
00:38:06,300 --> 00:38:12,510
in GCP also the the I am works in an

921
00:38:10,470 --> 00:38:14,430
Oracle so you can give access across

922
00:38:12,510 --> 00:38:15,600
everything where a name to AWS doesn't

923
00:38:14,430 --> 00:38:18,029
quite work that way you after that

924
00:38:15,600 --> 00:38:19,650
assume roles into all the other accounts

925
00:38:18,030 --> 00:38:21,900
so it's a little more difficult in Natal

926
00:38:19,650 --> 00:38:26,790
us to make that work you know with a

927
00:38:21,900 --> 00:38:28,740
central service okay thanks yeah I what

928
00:38:26,790 --> 00:38:30,600
do you see the next evolution of your

929
00:38:28,740 --> 00:38:32,939
security model maybe building in some

930
00:38:30,600 --> 00:38:37,770
olivine capability to make sure you're

931
00:38:32,940 --> 00:38:39,900
compliant sure so yeah we do have sorry

932
00:38:37,770 --> 00:38:43,020
this is a it this kind of thing to focus

933
00:38:39,900 --> 00:38:45,180
on you're over there maybe yeah

934
00:38:43,020 --> 00:38:46,800
yeah so what we've built is very focused

935
00:38:45,180 --> 00:38:48,029
on authentication and authorization or

936
00:38:46,800 --> 00:38:50,670
what we've presented rather is very

937
00:38:48,030 --> 00:38:52,410
focused on that there's a lot of other

938
00:38:50,670 --> 00:38:55,950
components we've built around these

939
00:38:52,410 --> 00:38:58,399
services to do things like auditing one

940
00:38:55,950 --> 00:39:00,810
potential thing we've talked about is

941
00:38:58,400 --> 00:39:01,960
more establishing a sense of user

942
00:39:00,810 --> 00:39:05,470
presence

943
00:39:01,960 --> 00:39:07,450
meaning if one service wants to talk to

944
00:39:05,470 --> 00:39:09,430
another service on behalf of a user and

945
00:39:07,450 --> 00:39:10,600
we can validate that this really is the

946
00:39:09,430 --> 00:39:12,609
user they're supposed to be talking

947
00:39:10,600 --> 00:39:16,000
about and they can't impersonate a user

948
00:39:12,610 --> 00:39:18,730
along the way those are some of the

949
00:39:16,000 --> 00:39:20,650
things we're exploring there yeah the

950
00:39:18,730 --> 00:39:23,200
other side of the auditing side of

951
00:39:20,650 --> 00:39:26,170
things like Sox compliance comes in on

952
00:39:23,200 --> 00:39:27,970
the I am and intrument side our central

953
00:39:26,170 --> 00:39:29,740
tool that does that which we really

954
00:39:27,970 --> 00:39:31,919
didn't get much into in this talk that

955
00:39:29,740 --> 00:39:34,479
that's like what's providing the ACL

956
00:39:31,920 --> 00:39:36,460
that ACL service we talked about so

957
00:39:34,480 --> 00:39:38,530
that's providing all the Ackles for

958
00:39:36,460 --> 00:39:42,010
everything that the proxy is managing

959
00:39:38,530 --> 00:39:43,900
access to but that that's kind of

960
00:39:42,010 --> 00:39:46,000
separate from what we discussed I guess

961
00:39:43,900 --> 00:39:47,890
and real quickly how long did it take

962
00:39:46,000 --> 00:39:51,550
you to build this and how many people

963
00:39:47,890 --> 00:39:54,129
yeah that's a good question we started

964
00:39:51,550 --> 00:39:59,590
out on this probably close to three

965
00:39:54,130 --> 00:40:01,660
years ago yeah yeah and it's it's it's

966
00:39:59,590 --> 00:40:04,030
come and got like some teams have come

967
00:40:01,660 --> 00:40:05,879
and gone depending to help out depending

968
00:40:04,030 --> 00:40:07,990
on what component they might need

969
00:40:05,880 --> 00:40:09,790
especially now with the service match

970
00:40:07,990 --> 00:40:12,399
that's become a much larger component

971
00:40:09,790 --> 00:40:14,440
than even just security that's our

972
00:40:12,400 --> 00:40:18,340
internal infrastructure teams working on

973
00:40:14,440 --> 00:40:20,110
that so yeah it's it's a lot of people

974
00:40:18,340 --> 00:40:24,280
and a lot of it's been a lot of time but

975
00:40:20,110 --> 00:40:26,170
I yeah we've done it gradually to kind

976
00:40:24,280 --> 00:40:27,670
of stop the bleeding and make sure we're

977
00:40:26,170 --> 00:40:30,160
not spending all our all of our time on

978
00:40:27,670 --> 00:40:32,290
that ops load and manual reviews in the

979
00:40:30,160 --> 00:40:34,060
process yeah and then in terms of the

980
00:40:32,290 --> 00:40:36,279
number of people we've allocated to this

981
00:40:34,060 --> 00:40:38,080
so the firewall manager I think that was

982
00:40:36,280 --> 00:40:41,640
just the two of us yeah I don't think

983
00:40:38,080 --> 00:40:45,160
anyone else worked on that the stateless

984
00:40:41,640 --> 00:40:49,750
authentic people for the course of a

985
00:40:45,160 --> 00:40:51,549
year or so and then granted we were

986
00:40:49,750 --> 00:40:52,960
throughout this process we didn't start

987
00:40:51,550 --> 00:40:54,430
with the designs that we have right now

988
00:40:52,960 --> 00:40:56,140
we started with very different designs

989
00:40:54,430 --> 00:40:58,120
and so that along gates this process

990
00:40:56,140 --> 00:41:00,790
quite a bit and we tried out a lot of

991
00:40:58,120 --> 00:41:02,410
other things as I kind of talked about

992
00:41:00,790 --> 00:41:07,690
at the beginning the introspection

993
00:41:02,410 --> 00:41:10,810
library is about a year or so the

994
00:41:07,690 --> 00:41:12,400
hardest part is just integrating this

995
00:41:10,810 --> 00:41:14,200
with all these services because it does

996
00:41:12,400 --> 00:41:15,950
require developers to add the sentence

997
00:41:14,200 --> 00:41:18,049
we tried to reduce the

998
00:41:15,950 --> 00:41:19,609
complexity quite a bit and also

999
00:41:18,050 --> 00:41:20,630
architect the thing appropriately we

1000
00:41:19,610 --> 00:41:23,090
again went through a bunch of different

1001
00:41:20,630 --> 00:41:24,620
architectures for that that's three to

1002
00:41:23,090 --> 00:41:26,480
four engineers working on that one and

1003
00:41:24,620 --> 00:41:29,299
then the service meshes the really big

1004
00:41:26,480 --> 00:41:32,240
piece yeah so the service mesh doing

1005
00:41:29,300 --> 00:41:35,660
things outside of the in process or in

1006
00:41:32,240 --> 00:41:37,040
app libraries really speeds up our

1007
00:41:35,660 --> 00:41:39,259
development time we only have to write

1008
00:41:37,040 --> 00:41:42,140
authentication for one code base instead

1009
00:41:39,260 --> 00:41:44,840
of providing a library to the entire org

1010
00:41:42,140 --> 00:41:49,000
that writes in four or five languages at

1011
00:41:44,840 --> 00:41:54,470
scale so that's allowed us to focus on

1012
00:41:49,000 --> 00:42:00,560
fewer things and do more yeah thank you

1013
00:41:54,470 --> 00:42:06,819
yeah Hey so you guys you built your file

1014
00:42:00,560 --> 00:42:09,350
manager by yourself yeah yeah so the

1015
00:42:06,820 --> 00:42:12,500
it's basically another it's just an app

1016
00:42:09,350 --> 00:42:15,200
engine app it's scanning our firewall

1017
00:42:12,500 --> 00:42:17,540
State across our infrastructure and it

1018
00:42:15,200 --> 00:42:19,460
has it known state internally and

1019
00:42:17,540 --> 00:42:22,550
because they're providing all these

1020
00:42:19,460 --> 00:42:25,340
api's it's relatively simple to just

1021
00:42:22,550 --> 00:42:29,380
scan those api's and then reset anything

1022
00:42:25,340 --> 00:42:29,380
that isn't in the appropriate state

1023
00:42:29,950 --> 00:42:36,290
what's up probably you have a lot of

1024
00:42:32,510 --> 00:42:38,810
projects in GCP so tell which project

1025
00:42:36,290 --> 00:42:41,240
what's open and what's not yeah so that

1026
00:42:38,810 --> 00:42:45,080
the access model we have is like owners

1027
00:42:41,240 --> 00:42:48,740
of projects and in at least in GCP this

1028
00:42:45,080 --> 00:42:50,200
is so anybody that needs to create an

1029
00:42:48,740 --> 00:42:52,910
isolated

1030
00:42:50,200 --> 00:42:55,040
set of resources would create a new

1031
00:42:52,910 --> 00:42:57,710
project they would then become the the

1032
00:42:55,040 --> 00:42:59,960
resource owner for that project and our

1033
00:42:57,710 --> 00:43:01,640
firewall management tool is able to see

1034
00:42:59,960 --> 00:43:06,490
that so yeah we have on the order of

1035
00:43:01,640 --> 00:43:06,490
hundreds of projects thanks

1036
00:43:08,849 --> 00:43:12,839
any other questions

1037
00:43:13,950 --> 00:43:19,919
oh cool if you available for yeah we're

1038
00:43:17,849 --> 00:43:22,420
happy to hang around and chat if people

1039
00:43:19,920 --> 00:43:27,229
want to thank you so much for for coming

1040
00:43:22,420 --> 00:43:27,229
[Applause]

