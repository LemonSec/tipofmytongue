1
00:00:00,030 --> 00:00:04,080
all right good morning welcome to

2
00:00:02,399 --> 00:00:06,089
attacking electric motors for fun and

3
00:00:04,080 --> 00:00:07,529
profit we're an Islander FG if that's

4
00:00:06,089 --> 00:00:09,960
where your destination was taking you

5
00:00:07,529 --> 00:00:12,929
and today we've got Matt Jablonski

6
00:00:09,960 --> 00:00:14,490
presenting a couple of brief notes stop

7
00:00:12,929 --> 00:00:16,710
by the business hall in Mandalay Bay

8
00:00:14,490 --> 00:00:19,080
Oceanside shoreline ballrooms on level 2

9
00:00:16,710 --> 00:00:21,990
during the day welcome reception tonight

10
00:00:19,080 --> 00:00:24,000
is at 5:30 Black had our smells in the

11
00:00:21,990 --> 00:00:26,580
business hall on level 2 and join us for

12
00:00:24,000 --> 00:00:28,740
the pony Awards in lagoon G H and I at

13
00:00:26,580 --> 00:00:37,079
6:30 tonight with that I give you Matt

14
00:00:28,740 --> 00:00:38,519
to Blonsky hello black hat I hope

15
00:00:37,079 --> 00:00:40,559
everybody here is the joining black hat

16
00:00:38,520 --> 00:00:42,780
so far if you want to learn about

17
00:00:40,559 --> 00:00:44,430
attacking movement and robots drones or

18
00:00:42,780 --> 00:00:46,289
other systems that use electric motors

19
00:00:44,430 --> 00:00:49,050
you're like critical infrastructure

20
00:00:46,289 --> 00:00:50,820
you're in the right place and as bill

21
00:00:49,050 --> 00:00:52,980
said I'm not Chaplinsky and this is

22
00:00:50,820 --> 00:00:54,510
attack motors for fun and profit I'm a

23
00:00:52,980 --> 00:00:57,140
PhD student at George Mason University

24
00:00:54,510 --> 00:00:59,879
and I work in the radar and radio

25
00:00:57,140 --> 00:01:03,149
engineering lab under dr. Demento

26
00:00:59,879 --> 00:01:05,220
Demento widgets care we've we've been

27
00:01:03,149 --> 00:01:07,320
studying SCADA systems specifically with

28
00:01:05,220 --> 00:01:08,908
regards to railroad systems and we

29
00:01:07,320 --> 00:01:11,580
noticed over the last few years that

30
00:01:08,909 --> 00:01:13,080
there are a lot of overlaps between the

31
00:01:11,580 --> 00:01:15,330
attack surface and these systems and

32
00:01:13,080 --> 00:01:17,100
other systems such as drones and things

33
00:01:15,330 --> 00:01:20,610
that use electric motors so that kind of

34
00:01:17,100 --> 00:01:23,220
brings us to our talk here today so in

35
00:01:20,610 --> 00:01:25,830
this work we simplify the attack

36
00:01:23,220 --> 00:01:27,658
strategies that against electric motor

37
00:01:25,830 --> 00:01:30,210
systems and show how they can be

38
00:01:27,659 --> 00:01:33,180
universally applicable to non SCADA

39
00:01:30,210 --> 00:01:34,979
moving systems such as robots drones or

40
00:01:33,180 --> 00:01:38,670
other systems that use electric motors

41
00:01:34,979 --> 00:01:41,070
we present the motor threat model which

42
00:01:38,670 --> 00:01:42,930
basically simplifies the description of

43
00:01:41,070 --> 00:01:45,408
an attacker and how they can disrupt or

44
00:01:42,930 --> 00:01:47,790
control movement in these target systems

45
00:01:45,409 --> 00:01:49,860
to learn what not to do with electric

46
00:01:47,790 --> 00:01:51,750
motors we conducted many experiments in

47
00:01:49,860 --> 00:01:53,189
our lab environment and we overheated

48
00:01:51,750 --> 00:01:56,340
and burned out and caused lots of fires

49
00:01:53,189 --> 00:01:58,919
and so despite what you might see here

50
00:01:56,340 --> 00:02:02,399
we recommend always following security

51
00:01:58,920 --> 00:02:04,710
warnings our safety warning excuse me so

52
00:02:02,399 --> 00:02:06,780
as a quick overview we will discuss the

53
00:02:04,710 --> 00:02:09,598
safety of security moving things the

54
00:02:06,780 --> 00:02:11,819
motor threat model various motor attack

55
00:02:09,598 --> 00:02:12,819
methods at each layer of the threat

56
00:02:11,819 --> 00:02:14,950
model as

57
00:02:12,819 --> 00:02:19,328
experimental validation of our model and

58
00:02:14,950 --> 00:02:21,189
conclude with some discussion in order

59
00:02:19,329 --> 00:02:23,200
to describe the motor threat model we'll

60
00:02:21,189 --> 00:02:23,828
introduce a game for you guys to play

61
00:02:23,200 --> 00:02:25,958
along with

62
00:02:23,829 --> 00:02:27,489
so imagine most attendees here a black

63
00:02:25,959 --> 00:02:29,409
cat knows something about security and

64
00:02:27,489 --> 00:02:31,900
threat modeling and I hope you can play

65
00:02:29,409 --> 00:02:33,548
along this game is basically structured

66
00:02:31,900 --> 00:02:36,549
to help understand how to threat model

67
00:02:33,549 --> 00:02:38,769
movement your company in this case was

68
00:02:36,549 --> 00:02:41,319
hired to assess the security risks of a

69
00:02:38,769 --> 00:02:43,540
proprietary drone system designed to

70
00:02:41,319 --> 00:02:46,750
deliver packages worldwide hundreds of

71
00:02:43,540 --> 00:02:48,489
operators around the globe will manage

72
00:02:46,750 --> 00:02:51,700
30 plus different drone models that are

73
00:02:48,489 --> 00:02:53,829
proprietary ranging in size to deliver

74
00:02:51,700 --> 00:02:55,959
packages to cities around the globe and

75
00:02:53,829 --> 00:02:58,930
they obviously have physical remote

76
00:02:55,959 --> 00:03:00,430
access to these drones the operating

77
00:02:58,930 --> 00:03:05,169
company decided they're not going to do

78
00:03:00,430 --> 00:03:07,780
background checks for these personnel so

79
00:03:05,169 --> 00:03:09,970
control will be wireless within the line

80
00:03:07,780 --> 00:03:12,129
of sight or over the internet and will

81
00:03:09,970 --> 00:03:13,840
be automated to every possible extent so

82
00:03:12,129 --> 00:03:16,060
what is the attack surface what are the

83
00:03:13,840 --> 00:03:17,440
threats and if you have ever worked for

84
00:03:16,060 --> 00:03:22,239
a pen testing company we would need your

85
00:03:17,440 --> 00:03:24,129
report today so in any critical

86
00:03:22,239 --> 00:03:26,829
infrastructure system safety has

87
00:03:24,129 --> 00:03:28,780
historically been the priority safety

88
00:03:26,829 --> 00:03:31,090
controls focus on avoiding accidental

89
00:03:28,780 --> 00:03:33,489
risks on the security side we focus on

90
00:03:31,090 --> 00:03:35,319
intentional misuse so intent is the key

91
00:03:33,489 --> 00:03:39,790
difference between safety and security

92
00:03:35,319 --> 00:03:41,918
really for safety operators in our drone

93
00:03:39,790 --> 00:03:45,728
system will be trained and certified to

94
00:03:41,919 --> 00:03:48,760
handle the systems as they would for the

95
00:03:45,729 --> 00:03:51,250
real world environment the systems are

96
00:03:48,760 --> 00:03:53,578
built to have failsafe so when some

97
00:03:51,250 --> 00:03:56,169
expected unexpected event occurs

98
00:03:53,579 --> 00:03:59,829
protections will be in place

99
00:03:56,169 --> 00:04:02,139
generally rules risks and a rule excuse

100
00:03:59,829 --> 00:04:03,790
me regulations and standards have been

101
00:04:02,139 --> 00:04:04,959
developed over years for these systems

102
00:04:03,790 --> 00:04:07,090
that move and different organizations

103
00:04:04,959 --> 00:04:09,459
have oversight depending on the system

104
00:04:07,090 --> 00:04:12,159
in the example of drones it'll be the

105
00:04:09,459 --> 00:04:13,780
FAA in the United States security risks

106
00:04:12,159 --> 00:04:16,719
on the other hand are traditionally

107
00:04:13,780 --> 00:04:18,639
different for every system so here's our

108
00:04:16,720 --> 00:04:20,919
first security problem as InfoSec

109
00:04:18,639 --> 00:04:23,560
professionals we think like bad guys and

110
00:04:20,918 --> 00:04:26,080
that and then we immediately consider

111
00:04:23,560 --> 00:04:28,570
all the potential methods to misuse this

112
00:04:26,080 --> 00:04:31,310
within our example scenario maybe this

113
00:04:28,570 --> 00:04:34,520
meme here is the first thing that comes

114
00:04:31,310 --> 00:04:37,100
to mind but identifying threats and

115
00:04:34,520 --> 00:04:38,690
mitigations is where the fun and profit

116
00:04:37,100 --> 00:04:40,400
part of our talk comes into play

117
00:04:38,690 --> 00:04:43,520
sometimes this approach is very

118
00:04:40,400 --> 00:04:46,310
structured and we can fall back on our

119
00:04:43,520 --> 00:04:48,109
train for example if targeting a web

120
00:04:46,310 --> 00:04:50,090
application I know I can use burp to

121
00:04:48,110 --> 00:04:52,160
find cross-site scripting or see serve

122
00:04:50,090 --> 00:04:53,840
Boehner abilities other times we're

123
00:04:52,160 --> 00:04:55,490
forced to reverse engineer the system

124
00:04:53,840 --> 00:04:59,719
and logically show where the risk could

125
00:04:55,490 --> 00:05:01,460
occur so recommendations such as this is

126
00:04:59,720 --> 00:05:03,169
a terrible horrible no good very bad

127
00:05:01,460 --> 00:05:05,090
delivery drone thing that you're

128
00:05:03,169 --> 00:05:09,349
delivering is not going to lead to fun

129
00:05:05,090 --> 00:05:12,109
and profit so let's look inside the

130
00:05:09,350 --> 00:05:14,360
system what do we see we immediately

131
00:05:12,110 --> 00:05:16,370
what comes to our eyes there are two

132
00:05:14,360 --> 00:05:19,190
communication channels one is 4G LTE

133
00:05:16,370 --> 00:05:21,320
over the Internet and second one is a

134
00:05:19,190 --> 00:05:23,419
2.4 gigahertz channel for line-of-sight

135
00:05:21,320 --> 00:05:26,840
control there's a couple of different

136
00:05:23,419 --> 00:05:28,490
possible operator interfaces then

137
00:05:26,840 --> 00:05:31,400
depending on which interface they're

138
00:05:28,490 --> 00:05:33,490
communicating with and this system has a

139
00:05:31,400 --> 00:05:35,330
number of sensors to include GPS

140
00:05:33,490 --> 00:05:38,600
accelerometers other inertial

141
00:05:35,330 --> 00:05:41,930
measurements etc and it has the central

142
00:05:38,600 --> 00:05:43,190
controller that manages or that

143
00:05:41,930 --> 00:05:45,820
maintains excuse me wireless

144
00:05:43,190 --> 00:05:48,110
communications and controls the

145
00:05:45,820 --> 00:05:51,409
electronic speed controllers or ESC s

146
00:05:48,110 --> 00:05:54,740
used to control a motor and this

147
00:05:51,410 --> 00:05:56,690
controller is running Linux so maybe

148
00:05:54,740 --> 00:05:59,210
some thoughts are coming to mind about

149
00:05:56,690 --> 00:06:01,430
what you could attack here at this point

150
00:05:59,210 --> 00:06:03,140
we'll probably take our research and

151
00:06:01,430 --> 00:06:08,090
start looking through other drones

152
00:06:03,140 --> 00:06:10,610
attack talks in recent years and we'll

153
00:06:08,090 --> 00:06:12,200
find examples in research about reverse

154
00:06:10,610 --> 00:06:15,020
engineering communication channels

155
00:06:12,200 --> 00:06:16,490
uploading flight plans via FTP because

156
00:06:15,020 --> 00:06:19,340
somebody thinks it's a good idea or

157
00:06:16,490 --> 00:06:20,780
taking over the drones Wi-Fi hotspot and

158
00:06:19,340 --> 00:06:22,669
using it a phone app to control the

159
00:06:20,780 --> 00:06:23,030
drone these are all good things to get

160
00:06:22,669 --> 00:06:25,430
start

161
00:06:23,030 --> 00:06:28,520
however the vulnerabilities are always

162
00:06:25,430 --> 00:06:31,970
system specific and remember that our

163
00:06:28,520 --> 00:06:36,490
scenario is a proprietary system so

164
00:06:31,970 --> 00:06:39,800
let's take a step back having reviewed

165
00:06:36,490 --> 00:06:42,139
related systems you may want to take

166
00:06:39,800 --> 00:06:44,389
kind of go over how to electric motors

167
00:06:42,139 --> 00:06:46,310
work in the first place so in digital

168
00:06:44,389 --> 00:06:49,190
systems every electric motor is

169
00:06:46,310 --> 00:06:51,860
connected to a drive which provides some

170
00:06:49,190 --> 00:06:53,629
electric power to the motor these drives

171
00:06:51,860 --> 00:06:55,789
can be electronic speed controllers as I

172
00:06:53,629 --> 00:06:57,740
mentioned or in SCADA systems or

173
00:06:55,789 --> 00:07:00,650
variable speed drives variable frequency

174
00:06:57,740 --> 00:07:04,129
drives they can be embedded or even a

175
00:07:00,650 --> 00:07:05,960
microchip a part of a sock some drives

176
00:07:04,129 --> 00:07:08,319
are more than one motor it just depends

177
00:07:05,960 --> 00:07:10,669
on the system pulse width modulation

178
00:07:08,319 --> 00:07:12,889
allows for bearing the speed of the

179
00:07:10,669 --> 00:07:14,960
motor and in order for pulse width

180
00:07:12,889 --> 00:07:17,060
modulation work it fluctuates the

181
00:07:14,960 --> 00:07:20,239
voltage and when voltage is greater than

182
00:07:17,060 --> 00:07:23,330
zero the motor pulls current in order to

183
00:07:20,240 --> 00:07:26,030
move the frequency of switching is

184
00:07:23,330 --> 00:07:28,669
controlled by a clock in the amount of

185
00:07:26,030 --> 00:07:30,650
time where voltage is greater than zero

186
00:07:28,669 --> 00:07:32,240
is known as the duty cycle both the

187
00:07:30,650 --> 00:07:36,080
clock and the duty cycle are controlled

188
00:07:32,240 --> 00:07:38,870
in hardware and software electrical

189
00:07:36,080 --> 00:07:41,870
current provided provided by the job is

190
00:07:38,870 --> 00:07:44,240
the input to the motor at a high level

191
00:07:41,870 --> 00:07:46,610
the current flows through windings

192
00:07:44,240 --> 00:07:47,690
internal to the motor and interacts with

193
00:07:46,610 --> 00:07:50,030
the magnets to produce an

194
00:07:47,690 --> 00:07:51,710
electromagnetic field the rotor is part

195
00:07:50,030 --> 00:07:53,840
of the motor that moves the stator is

196
00:07:51,710 --> 00:07:56,750
the part that stationary that's kind of

197
00:07:53,840 --> 00:07:58,758
self-explanatory the output of the motor

198
00:07:56,750 --> 00:08:00,610
is mechanical energy in the form of

199
00:07:58,759 --> 00:08:04,400
torque and speed and output power

200
00:08:00,610 --> 00:08:06,110
physics stuff the structure and behavior

201
00:08:04,400 --> 00:08:09,080
of the motor can vary depending on the

202
00:08:06,110 --> 00:08:12,380
type of system it can be DC versus AC or

203
00:08:09,080 --> 00:08:14,810
rotary versus linear etc and the strut

204
00:08:12,380 --> 00:08:18,889
the selection of motor is really based

205
00:08:14,810 --> 00:08:20,270
on the load so all motors basically have

206
00:08:18,889 --> 00:08:21,860
data sheets so if you reverse

207
00:08:20,270 --> 00:08:23,539
engineering or targeting a system like a

208
00:08:21,860 --> 00:08:24,770
drone look up the datasheet for the

209
00:08:23,539 --> 00:08:29,000
motor it'll tell you about the torque

210
00:08:24,770 --> 00:08:31,310
versus speed relationship and which

211
00:08:29,000 --> 00:08:33,200
tells you the operational parameters of

212
00:08:31,310 --> 00:08:37,190
the drone in this case for this simple

213
00:08:33,200 --> 00:08:39,469
graph for a brushed DC motor we if if

214
00:08:37,190 --> 00:08:42,440
you look at the far left when torque is

215
00:08:39,469 --> 00:08:44,149
high and speed is zero basically this is

216
00:08:42,440 --> 00:08:47,810
known as a stall torque and prolonged

217
00:08:44,149 --> 00:08:51,050
exposure to this kind of behavior will

218
00:08:47,810 --> 00:08:52,790
overheat and burn out the motor when

219
00:08:51,050 --> 00:08:53,089
speed is high and torque is zero this is

220
00:08:52,790 --> 00:08:55,849
a no

221
00:08:53,089 --> 00:08:58,579
load condition and basically in either

222
00:08:55,850 --> 00:09:01,399
they install torque or no load condition

223
00:08:58,579 --> 00:09:05,079
power output is is minimalized as you

224
00:09:01,399 --> 00:09:08,800
can tell the right graph so how do we

225
00:09:05,079 --> 00:09:11,899
design a control system to drive a motor

226
00:09:08,800 --> 00:09:15,319
it's basic control theory of course

227
00:09:11,899 --> 00:09:17,329
there are two types of universal design

228
00:09:15,319 --> 00:09:20,209
methodologies to build such a system an

229
00:09:17,329 --> 00:09:22,519
open loop and a closed loop design an

230
00:09:20,209 --> 00:09:24,319
open loop design some input is provided

231
00:09:22,519 --> 00:09:26,749
to a controller without changing the

232
00:09:24,319 --> 00:09:29,029
system state the controller executes the

233
00:09:26,749 --> 00:09:31,999
input passes commands to drive and

234
00:09:29,029 --> 00:09:34,579
provides current to the motor impacting

235
00:09:31,999 --> 00:09:36,800
the output load in close we had a

236
00:09:34,579 --> 00:09:39,620
feedback mechanism which sensors collect

237
00:09:36,800 --> 00:09:41,719
data on the current system state to the

238
00:09:39,620 --> 00:09:43,279
environment the controller uses this

239
00:09:41,720 --> 00:09:47,230
information to adjust the drive and

240
00:09:43,279 --> 00:09:49,670
motor parameters and that's basically it

241
00:09:47,230 --> 00:09:51,860
however this brings us to a big security

242
00:09:49,670 --> 00:09:54,769
problem understand generically how

243
00:09:51,860 --> 00:09:58,100
movement is controlled and using control

244
00:09:54,769 --> 00:10:00,290
theory tends to be bringing more excuse

245
00:09:58,100 --> 00:10:02,149
me what ifs and questions where can

246
00:10:00,290 --> 00:10:05,179
attack against movement come from

247
00:10:02,149 --> 00:10:07,610
what would the attackers goals be how

248
00:10:05,179 --> 00:10:11,749
realistic are security concerns at each

249
00:10:07,610 --> 00:10:14,059
level of the step another concern is

250
00:10:11,749 --> 00:10:15,589
that digital control commands through

251
00:10:14,059 --> 00:10:18,230
pulse width modulation are not

252
00:10:15,589 --> 00:10:19,939
authenticated controller or Drive

253
00:10:18,230 --> 00:10:22,550
controller access would allow for

254
00:10:19,939 --> 00:10:24,920
modifications to a motors duty cycle

255
00:10:22,550 --> 00:10:27,649
resulting in timing attacks with

256
00:10:24,920 --> 00:10:30,079
real-world consequences this is the

257
00:10:27,649 --> 00:10:31,550
challenge of basically managing

258
00:10:30,079 --> 00:10:35,179
continuous movement using discreet

259
00:10:31,550 --> 00:10:37,059
commands so since we took a step back

260
00:10:35,179 --> 00:10:39,290
and looked at electric motors and

261
00:10:37,059 --> 00:10:40,730
focused on digital control system

262
00:10:39,290 --> 00:10:43,579
movement we might start researching

263
00:10:40,730 --> 00:10:47,089
other systems and their threats and

264
00:10:43,579 --> 00:10:49,849
vulnerabilities looking for attacks on

265
00:10:47,089 --> 00:10:52,999
movement research and security focused

266
00:10:49,850 --> 00:10:55,459
on robotic SCADA systems printers 3d

267
00:10:52,999 --> 00:10:57,860
printers and other moving devices show a

268
00:10:55,459 --> 00:11:00,378
lot of parallels to our drone or

269
00:10:57,860 --> 00:11:02,689
proprietary drone system as they all use

270
00:11:00,379 --> 00:11:05,240
a controller to create precise movements

271
00:11:02,689 --> 00:11:06,439
using electric motors however we found

272
00:11:05,240 --> 00:11:08,029
there's not a universal

273
00:11:06,440 --> 00:11:10,220
and threat model to describe these

274
00:11:08,029 --> 00:11:12,860
relationships despite the common design

275
00:11:10,220 --> 00:11:16,129
patterns so that's that's our goal for

276
00:11:12,860 --> 00:11:17,750
this talk it's a presentment so let's

277
00:11:16,129 --> 00:11:19,459
step away from drones and look at some

278
00:11:17,750 --> 00:11:22,100
common attack strategies and

279
00:11:19,459 --> 00:11:24,709
requirements some of our requirements

280
00:11:22,100 --> 00:11:26,959
are tax use digital movement attacks

281
00:11:24,709 --> 00:11:28,849
using digital movement controls have

282
00:11:26,959 --> 00:11:31,189
real-world impacts which we want to

283
00:11:28,850 --> 00:11:34,250
identify attacks can be either cyber or

284
00:11:31,189 --> 00:11:36,980
physical in nature the model should

285
00:11:34,250 --> 00:11:38,560
should identify where attacks that

286
00:11:36,980 --> 00:11:40,970
leverage discreet commands may occur

287
00:11:38,560 --> 00:11:43,399
there's basically two different models

288
00:11:40,970 --> 00:11:47,720
that we can start uses a starting point

289
00:11:43,399 --> 00:11:51,649
to frank model movement the first one is

290
00:11:47,720 --> 00:11:53,959
the ICS cyber kill chain which defines

291
00:11:51,649 --> 00:11:56,990
skate attacks require as requiring two

292
00:11:53,959 --> 00:11:59,300
different stages stage 1 covers cyber

293
00:11:56,990 --> 00:12:02,120
espionage but it's really just relevant

294
00:11:59,300 --> 00:12:04,189
to SCADA systems stage 2 is probably

295
00:12:02,120 --> 00:12:06,829
more applicable to movement in general

296
00:12:04,189 --> 00:12:08,620
but it's kind of vague as shown in the

297
00:12:06,829 --> 00:12:11,779
picture on the right if you can see

298
00:12:08,620 --> 00:12:16,850
develop test deliver modify execute

299
00:12:11,779 --> 00:12:19,399
attack that's pretty vague and the ICS

300
00:12:16,850 --> 00:12:22,850
cyber kill chain does define goals for

301
00:12:19,399 --> 00:12:25,519
movement which we can use in our FET

302
00:12:22,850 --> 00:12:27,560
model these there are three goals

303
00:12:25,519 --> 00:12:29,720
basically an attacker will want to

304
00:12:27,560 --> 00:12:32,329
control the system disrupt the system or

305
00:12:29,720 --> 00:12:35,959
steal data regarding the system but will

306
00:12:32,329 --> 00:12:37,758
well its ban on these in a moment the

307
00:12:35,959 --> 00:12:39,829
second possible model that we can look

308
00:12:37,759 --> 00:12:41,689
at is miners ICS attack framework but

309
00:12:39,829 --> 00:12:43,729
it's still in draft and it's also fake

310
00:12:41,689 --> 00:12:46,009
to just focus on SCADA systems not

311
00:12:43,730 --> 00:12:47,540
drones or robots or anything else it

312
00:12:46,009 --> 00:12:50,329
allows for identification of attack

313
00:12:47,540 --> 00:12:51,920
stages that allow for attack attribution

314
00:12:50,329 --> 00:12:53,899
that's kind of a post-mortem analysis

315
00:12:51,920 --> 00:12:56,479
but they don't focus on physical attacks

316
00:12:53,899 --> 00:13:00,170
and the model cannot be applied to all

317
00:12:56,480 --> 00:13:02,720
systems so with these measurements in

318
00:13:00,170 --> 00:13:04,729
mind and after an extensive review our

319
00:13:02,720 --> 00:13:07,819
electric motor systems and throwing a

320
00:13:04,730 --> 00:13:10,399
dash of control theory you're welcome

321
00:13:07,819 --> 00:13:12,800
we came up with this model which we call

322
00:13:10,399 --> 00:13:15,740
the motor threat model this looks

323
00:13:12,800 --> 00:13:17,689
complex and hard to remember don't worry

324
00:13:15,740 --> 00:13:19,910
we'll simplify it in a moment so just

325
00:13:17,689 --> 00:13:20,329
like with control theory controls flow

326
00:13:19,910 --> 00:13:23,480
from

327
00:13:20,329 --> 00:13:27,888
seven operator to five control four

328
00:13:23,480 --> 00:13:29,779
drive to two motor to one load the

329
00:13:27,889 --> 00:13:32,629
digital control portions require three

330
00:13:29,779 --> 00:13:33,980
power as input which may be single or

331
00:13:32,629 --> 00:13:36,230
three-phase power even batteries

332
00:13:33,980 --> 00:13:38,629
depending on the system finally in a

333
00:13:36,230 --> 00:13:40,459
closed-loop systems six sensors collect

334
00:13:38,629 --> 00:13:42,889
data and provide that feedback

335
00:13:40,459 --> 00:13:45,498
information the various layers in order

336
00:13:42,889 --> 00:13:46,369
to make precise movements decisions

337
00:13:45,499 --> 00:13:49,309
based on the hardware and software

338
00:13:46,369 --> 00:13:52,369
design okay let's see how we can make

339
00:13:49,309 --> 00:13:54,920
this simpler so if we take the layers

340
00:13:52,369 --> 00:13:57,799
and stack them similarly to an OSI stack

341
00:13:54,920 --> 00:14:00,829
or a filesystem stack we can more easily

342
00:13:57,799 --> 00:14:02,689
categorize attacks against movement the

343
00:14:00,829 --> 00:14:05,779
stack from top to bottom is seven

344
00:14:02,689 --> 00:14:09,559
operator six sensor five control four

345
00:14:05,779 --> 00:14:10,970
try three power to motor one load if you

346
00:14:09,559 --> 00:14:12,980
notice from the drawing starting at the

347
00:14:10,970 --> 00:14:14,809
right physical attacks can really occur

348
00:14:12,980 --> 00:14:17,379
at any of the layers and are limited to

349
00:14:14,809 --> 00:14:22,339
basically stopping or stealing movement

350
00:14:17,379 --> 00:14:25,610
controls all layers similarly on the

351
00:14:22,339 --> 00:14:28,399
left cyber attacks are more effective at

352
00:14:25,610 --> 00:14:30,110
the higher layers traditionally research

353
00:14:28,399 --> 00:14:31,790
whether it's drones robots or SCADA

354
00:14:30,110 --> 00:14:33,860
systems attackers have targeted the

355
00:14:31,790 --> 00:14:35,509
operator sensor and controllers because

356
00:14:33,860 --> 00:14:37,429
this is a natural attack surface for

357
00:14:35,509 --> 00:14:39,470
network and cyber related attacks

358
00:14:37,429 --> 00:14:42,230
however depending on the system the

359
00:14:39,470 --> 00:14:44,919
drive power and motor at layers may

360
00:14:42,230 --> 00:14:49,610
require firmware or even have network

361
00:14:44,919 --> 00:14:51,199
controls we simply star these layers to

362
00:14:49,610 --> 00:14:53,629
show that most cyber attacks will target

363
00:14:51,199 --> 00:14:55,758
the higher layers with this description

364
00:14:53,629 --> 00:14:57,889
if an adversary targets the lower layers

365
00:14:55,759 --> 00:14:59,779
they basically disrupt or take control

366
00:14:57,889 --> 00:15:01,489
of movement from the higher layers this

367
00:14:59,779 --> 00:15:03,519
may be enough in many cases for an

368
00:15:01,489 --> 00:15:06,669
adversary to complete their mission

369
00:15:03,519 --> 00:15:09,230
we believe the attacked approach

370
00:15:06,669 --> 00:15:11,600
simplifies differentiating between cyber

371
00:15:09,230 --> 00:15:12,679
and physical attacks - well we'll show

372
00:15:11,600 --> 00:15:16,249
you that throughout the rest of this

373
00:15:12,679 --> 00:15:17,689
talk a friend of mine recommended coming

374
00:15:16,249 --> 00:15:19,879
up with a simple mnemonic method to

375
00:15:17,689 --> 00:15:22,040
memorize layers the best I could come up

376
00:15:19,879 --> 00:15:29,410
with was offensive security can do

377
00:15:22,040 --> 00:15:29,410
precise movement lulls yeah sorry

378
00:15:30,079 --> 00:15:34,489
as previously mentioned there's really

379
00:15:31,970 --> 00:15:36,800
three high-level attack objectives for

380
00:15:34,490 --> 00:15:39,819
movement that the stack model consists

381
00:15:36,800 --> 00:15:41,809
with identifying kill chains to prevent

382
00:15:39,819 --> 00:15:43,878
understanding the adversaries goals

383
00:15:41,809 --> 00:15:46,730
before identifying attack strategies is

384
00:15:43,879 --> 00:15:49,790
critical for defending any system so

385
00:15:46,730 --> 00:15:52,189
control as mentioned before with this

386
00:15:49,790 --> 00:15:54,559
objective this the adversary wants to

387
00:15:52,189 --> 00:15:56,449
steal control to basically achieve some

388
00:15:54,559 --> 00:15:58,370
goal which is a refined based on the

389
00:15:56,449 --> 00:15:59,870
system generally this is done the higher

390
00:15:58,370 --> 00:16:01,519
layers through cyber attacks but

391
00:15:59,870 --> 00:16:04,959
physical access may be possible to the

392
00:16:01,519 --> 00:16:08,990
operator interface at the operator layer

393
00:16:04,959 --> 00:16:12,069
this is basically easiest that the

394
00:16:08,990 --> 00:16:14,269
operators sensor control or drive layers

395
00:16:12,069 --> 00:16:16,089
disrupt with this objective the

396
00:16:14,269 --> 00:16:19,459
adversary may want to stop movement or

397
00:16:16,089 --> 00:16:21,290
inject commands to modify precisely time

398
00:16:19,459 --> 00:16:23,089
movements or prevent operational

399
00:16:21,290 --> 00:16:26,300
controls this can be achieved through

400
00:16:23,089 --> 00:16:27,860
both cyber and physical attacks and is

401
00:16:26,300 --> 00:16:30,469
achievable really at all seven layers

402
00:16:27,860 --> 00:16:32,059
and then finally a data exfiltration or

403
00:16:30,470 --> 00:16:33,709
just simply steal data with this

404
00:16:32,059 --> 00:16:38,120
objective adversary may want to violate

405
00:16:33,709 --> 00:16:41,059
IP or privacy of the systems owner to

406
00:16:38,120 --> 00:16:42,679
track the system usage this is generally

407
00:16:41,059 --> 00:16:44,329
done through cyber attacks and is

408
00:16:42,679 --> 00:16:47,779
easiest at the operator sensor at

409
00:16:44,329 --> 00:16:50,258
control layers so now that you have some

410
00:16:47,779 --> 00:16:53,360
kind of idea of the types of attacks in

411
00:16:50,259 --> 00:16:55,040
the desire attack or outcomes we provide

412
00:16:53,360 --> 00:16:57,230
this table to basically show these

413
00:16:55,040 --> 00:17:00,529
relationships at the various layers as

414
00:16:57,230 --> 00:17:02,389
shown up at the various layers in on the

415
00:17:00,529 --> 00:17:05,449
right two columns you can see how and

416
00:17:02,389 --> 00:17:07,370
where cyber and physical attacks could

417
00:17:05,449 --> 00:17:10,039
be used at each the players as well as

418
00:17:07,369 --> 00:17:11,928
you can we've identified to the attack

419
00:17:10,039 --> 00:17:14,720
objectives that could be leveraged a

420
00:17:11,929 --> 00:17:17,929
slayer whether its control disruptor

421
00:17:14,720 --> 00:17:20,390
data exfiltration the operator layer is

422
00:17:17,929 --> 00:17:22,279
basically unprivileged motor control you

423
00:17:20,390 --> 00:17:24,500
only can use the api's that were

424
00:17:22,279 --> 00:17:27,529
provided to the operator operator layer

425
00:17:24,500 --> 00:17:29,510
for moving the system and it consists of

426
00:17:27,529 --> 00:17:32,120
tax targeting either the operator

427
00:17:29,510 --> 00:17:35,629
interface itself or the operator control

428
00:17:32,120 --> 00:17:37,899
channel lateral movement to the control

429
00:17:35,630 --> 00:17:40,820
layer is possible through this channel

430
00:17:37,899 --> 00:17:42,199
the sensor layer provides feedback on

431
00:17:40,820 --> 00:17:43,490
the physical environment and attacks

432
00:17:42,200 --> 00:17:45,650
against this layer designed

433
00:17:43,490 --> 00:17:48,500
- basically falsified a data in order to

434
00:17:45,650 --> 00:17:50,750
trigger some different movement it

435
00:17:48,500 --> 00:17:52,280
consists of two different levels either

436
00:17:50,750 --> 00:17:55,010
targeting the sensors or a wireless

437
00:17:52,280 --> 00:17:58,149
sensor network if one exists or even the

438
00:17:55,010 --> 00:18:00,830
out-of-band safety system which provides

439
00:17:58,150 --> 00:18:07,640
failsafe controls back to the controller

440
00:18:00,830 --> 00:18:09,830
as input in the control layer layer five

441
00:18:07,640 --> 00:18:11,840
it's basically privileged access or

442
00:18:09,830 --> 00:18:13,309
route control to movement in the system

443
00:18:11,840 --> 00:18:16,639
you control it if you control the

444
00:18:13,309 --> 00:18:18,649
system's controller and or the control

445
00:18:16,640 --> 00:18:21,380
drive channel which is used to precisely

446
00:18:18,650 --> 00:18:23,510
control motor movements

447
00:18:21,380 --> 00:18:27,170
you basically own the SIS the own

448
00:18:23,510 --> 00:18:29,210
movement within the system below that at

449
00:18:27,170 --> 00:18:32,030
the drive layer it handles individual

450
00:18:29,210 --> 00:18:34,370
motor movements using some minimal

451
00:18:32,030 --> 00:18:36,470
configuration design for the specific

452
00:18:34,370 --> 00:18:38,870
motor that that drive was designed to

453
00:18:36,470 --> 00:18:41,179
control this layer consists of attacks

454
00:18:38,870 --> 00:18:44,389
both on the drive controller and attacks

455
00:18:41,179 --> 00:18:46,970
on the drive motor channel which is

456
00:18:44,390 --> 00:18:50,330
usually just the motor leads and where

457
00:18:46,970 --> 00:18:52,610
current flows from the drives power

458
00:18:50,330 --> 00:18:54,919
supply for the last three layers these

459
00:18:52,610 --> 00:18:57,649
are primarily physical attacks the power

460
00:18:54,920 --> 00:18:59,300
layer basically describes attacks

461
00:18:57,650 --> 00:19:00,830
targeting electrical power inputs to

462
00:18:59,300 --> 00:19:02,510
system components which can limit or

463
00:19:00,830 --> 00:19:04,879
prevent movement altogether obviously

464
00:19:02,510 --> 00:19:07,160
this layer requires access to the power

465
00:19:04,880 --> 00:19:08,900
system and generally requires physical

466
00:19:07,160 --> 00:19:11,780
access or a physical access attack is

467
00:19:08,900 --> 00:19:14,900
expected the motor layer is why we're

468
00:19:11,780 --> 00:19:16,910
all here all movement basically goes

469
00:19:14,900 --> 00:19:18,980
through the motor generally these

470
00:19:16,910 --> 00:19:22,309
attacks require physical access but some

471
00:19:18,980 --> 00:19:26,210
motors such as digital servos can be

472
00:19:22,309 --> 00:19:29,540
reprogrammed to completely change their

473
00:19:26,210 --> 00:19:30,670
movement outcomes which will provide an

474
00:19:29,540 --> 00:19:33,230
example of in a moment

475
00:19:30,670 --> 00:19:35,059
finally the load layer is the output

476
00:19:33,230 --> 00:19:37,010
layer it consists of the motor shaft

477
00:19:35,059 --> 00:19:38,510
connecting gears and any components that

478
00:19:37,010 --> 00:19:41,629
are that interact with the physical

479
00:19:38,510 --> 00:19:43,820
world an attack here requires physical

480
00:19:41,630 --> 00:19:45,920
access so now with the seven layers

481
00:19:43,820 --> 00:19:47,750
design that's our seven layer stack the

482
00:19:45,920 --> 00:19:50,090
types of attacks that each layer really

483
00:19:47,750 --> 00:19:51,350
vary per system will show how to further

484
00:19:50,090 --> 00:19:53,720
refine this model for attackers

485
00:19:51,350 --> 00:19:55,939
defenders and we'll get back to our game

486
00:19:53,720 --> 00:19:57,260
in a moment but we've got a number of

487
00:19:55,940 --> 00:20:00,860
attack experiments

488
00:19:57,260 --> 00:20:02,750
we show at each layer some examples of

489
00:20:00,860 --> 00:20:07,070
how an attacker can control or disrupt

490
00:20:02,750 --> 00:20:08,720
movement so for our first target we just

491
00:20:07,070 --> 00:20:09,980
have a simple remote-control car and

492
00:20:08,720 --> 00:20:11,680
there's this is an attack basically

493
00:20:09,980 --> 00:20:14,600
against the operator control channel

494
00:20:11,680 --> 00:20:16,160
it's modeled after really many attacks

495
00:20:14,600 --> 00:20:21,169
and research taking control of drones

496
00:20:16,160 --> 00:20:24,080
and robots using a SDR so here we see

497
00:20:21,170 --> 00:20:25,910
the remote control car and the operator

498
00:20:24,080 --> 00:20:28,010
interface and the operator interface

499
00:20:25,910 --> 00:20:30,500
basically has two controls forward and

500
00:20:28,010 --> 00:20:32,900
reverse wireless controls the vehicle

501
00:20:30,500 --> 00:20:36,320
over a standard communication channel 27

502
00:20:32,900 --> 00:20:39,050
megahertz and a review of the controller

503
00:20:36,320 --> 00:20:41,030
shows that a simple oscillating crystal

504
00:20:39,050 --> 00:20:43,399
produces the resonating frequency for

505
00:20:41,030 --> 00:20:45,830
both forward and reverse so with a hack

506
00:20:43,400 --> 00:20:47,330
RF one all we need to do is capture both

507
00:20:45,830 --> 00:20:49,330
the forward and reverse controls for

508
00:20:47,330 --> 00:20:51,860
about a second we've got complete

509
00:20:49,330 --> 00:20:53,300
control of vehicle because it's just an

510
00:20:51,860 --> 00:20:56,330
oscillating crystal we don't even have

511
00:20:53,300 --> 00:20:57,950
to decode we don't have to filter we

512
00:20:56,330 --> 00:21:00,530
don't require any complex reverse

513
00:20:57,950 --> 00:21:03,470
engineering we just are able to control

514
00:21:00,530 --> 00:21:04,940
movement so we can slice up the

515
00:21:03,470 --> 00:21:06,620
collection files from the SDR and

516
00:21:04,940 --> 00:21:09,050
basically move move the device any way

517
00:21:06,620 --> 00:21:12,169
who want a picture on the left basically

518
00:21:09,050 --> 00:21:14,000
shows the wheel turning and the operator

519
00:21:12,170 --> 00:21:18,650
controller in the background because the

520
00:21:14,000 --> 00:21:20,870
SDR is controlling the vehicle so that

521
00:21:18,650 --> 00:21:22,520
this second attack experiment was

522
00:21:20,870 --> 00:21:24,770
designed also to target the operator

523
00:21:22,520 --> 00:21:27,590
control channel and we call this attack

524
00:21:24,770 --> 00:21:29,300
a remote pin control attack we have a

525
00:21:27,590 --> 00:21:32,179
simple target system here design will

526
00:21:29,300 --> 00:21:33,980
allow us to control a motor inject

527
00:21:32,180 --> 00:21:36,530
attacks and graph the resulting output a

528
00:21:33,980 --> 00:21:40,070
torque using a mini pro dynamometer

529
00:21:36,530 --> 00:21:42,320
or a dyno in this experiment the PI is

530
00:21:40,070 --> 00:21:44,120
the controller sending commands to the

531
00:21:42,320 --> 00:21:48,230
electronic speed controller using pulse

532
00:21:44,120 --> 00:21:50,719
width modulation through GPIO 18 the

533
00:21:48,230 --> 00:21:52,670
speed controller provides current from

534
00:21:50,720 --> 00:21:54,170
the lipo battery to the brushed DC motor

535
00:21:52,670 --> 00:21:57,350
and is connected to the dyno for

536
00:21:54,170 --> 00:21:58,940
measurements this is this physical setup

537
00:21:57,350 --> 00:22:00,620
will be used in many of the examples

538
00:21:58,940 --> 00:22:03,380
kind of moving forward and I'll refer

539
00:22:00,620 --> 00:22:04,969
back to it the PI is running baseline

540
00:22:03,380 --> 00:22:07,580
script that just runs the motor at a

541
00:22:04,970 --> 00:22:10,110
particular speed using the wiring pileup

542
00:22:07,580 --> 00:22:13,320
it's also running a pig piyo daemon

543
00:22:10,110 --> 00:22:16,709
which is built in are as bian for GPIO

544
00:22:13,320 --> 00:22:18,870
control and we enabled remote GPIO which

545
00:22:16,710 --> 00:22:21,660
basically if you can interact with it

546
00:22:18,870 --> 00:22:24,840
over the network you have direct memory

547
00:22:21,660 --> 00:22:27,690
access to the Raspberry Pi whereas

548
00:22:24,840 --> 00:22:30,179
whereas Pig pile excuse me developers

549
00:22:27,690 --> 00:22:32,100
added this feature to simplify our

550
00:22:30,180 --> 00:22:34,530
movement in management for hobbyists

551
00:22:32,100 --> 00:22:36,959
we're gonna exploit this feature so

552
00:22:34,530 --> 00:22:39,300
assume we gain access to the same

553
00:22:36,960 --> 00:22:42,300
network as a PI running n map on the

554
00:22:39,300 --> 00:22:46,350
network identifies two key features

555
00:22:42,300 --> 00:22:48,149
about the PI basically TCP port 22 shows

556
00:22:46,350 --> 00:22:51,300
that it's running a raspbian version of

557
00:22:48,150 --> 00:22:54,480
OpenSSH so we've identified a PI and TCP

558
00:22:51,300 --> 00:22:57,780
port 8 8 8 8 is open with an interesting

559
00:22:54,480 --> 00:22:59,340
string we've got n CP : DM DT we checked

560
00:22:57,780 --> 00:23:01,470
several different pi versions and

561
00:22:59,340 --> 00:23:04,620
versions of raspbian and we believe this

562
00:23:01,470 --> 00:23:06,690
is an indicator for mote GPIO so the

563
00:23:04,620 --> 00:23:09,120
script on the right is just a simple

564
00:23:06,690 --> 00:23:10,830
Python control script for the attacker

565
00:23:09,120 --> 00:23:12,449
that could be leveraged through their

566
00:23:10,830 --> 00:23:15,659
tunnel into the network or by importing

567
00:23:12,450 --> 00:23:17,820
the GPIO 0 Python module onto a

568
00:23:15,660 --> 00:23:20,340
compromised host and a local network

569
00:23:17,820 --> 00:23:23,520
the attacker basically changes the clock

570
00:23:20,340 --> 00:23:25,770
value or motor dot frequency to 250 and

571
00:23:23,520 --> 00:23:29,970
then alternates the duty cycle between

572
00:23:25,770 --> 00:23:32,430
30 and 40% for this example we guess

573
00:23:29,970 --> 00:23:34,910
GPIO 18 is a pin we can do stuff with

574
00:23:32,430 --> 00:23:37,620
although with this particular example

575
00:23:34,910 --> 00:23:41,180
the attackers really blind to the GPIO

576
00:23:37,620 --> 00:23:43,520
control on the PI from the network just

577
00:23:41,180 --> 00:23:46,280
simply calling the script with peak Pio

578
00:23:43,520 --> 00:23:49,920
underscore a DDR environmental variable

579
00:23:46,280 --> 00:23:52,110
trigger targeting the targets IP address

580
00:23:49,920 --> 00:23:53,640
triggers the GPIO 0 module to send the

581
00:23:52,110 --> 00:23:56,189
commands over the network to port a a

582
00:23:53,640 --> 00:24:00,180
and basically given the attacker control

583
00:23:56,190 --> 00:24:01,980
over the pink so here's an output speed

584
00:24:00,180 --> 00:24:04,410
graph from the dyno just basically

585
00:24:01,980 --> 00:24:07,560
showing rpm versus time the top line is

586
00:24:04,410 --> 00:24:09,240
the baseline run it is suspected motor

587
00:24:07,560 --> 00:24:12,360
behavior without the entire involvement

588
00:24:09,240 --> 00:24:14,760
this script uses a single motor command

589
00:24:12,360 --> 00:24:18,270
drive the motor up to about 24,000 rpm

590
00:24:14,760 --> 00:24:19,890
as you can tell we have a circle

591
00:24:18,270 --> 00:24:20,389
highlighting on the graph to show where

592
00:24:19,890 --> 00:24:23,000
the

593
00:24:20,390 --> 00:24:26,390
attackers script basically takes control

594
00:24:23,000 --> 00:24:29,150
over the motor the alternation of 30 to

595
00:24:26,390 --> 00:24:30,880
40 percent can be seen in the variations

596
00:24:29,150 --> 00:24:34,610
of speed over time kind of with spikey

597
00:24:30,880 --> 00:24:37,490
as a baseline script does not repeatedly

598
00:24:34,610 --> 00:24:39,020
issue discrete commands and there's no

599
00:24:37,490 --> 00:24:40,820
other sensors monitoring the system

600
00:24:39,020 --> 00:24:42,500
attacker now has complete control over

601
00:24:40,820 --> 00:24:49,129
movement from the operator control to

602
00:24:42,500 --> 00:24:50,210
channel so onto the sensor layer attacks

603
00:24:49,130 --> 00:24:51,620
the sensor layer are a little more

604
00:24:50,210 --> 00:24:54,170
complex generally require additional

605
00:24:51,620 --> 00:24:56,389
reverse engineering to take control of

606
00:24:54,170 --> 00:24:58,220
the system because it's a it's critical

607
00:24:56,390 --> 00:25:02,290
to understand how this feedback data is

608
00:24:58,220 --> 00:25:05,780
used as input to affect movement

609
00:25:02,290 --> 00:25:09,889
decisions in software in this setup we

610
00:25:05,780 --> 00:25:12,860
have a 80 X L 3 4 5 accelerometer which

611
00:25:09,890 --> 00:25:15,260
in software the pods just using taking

612
00:25:12,860 --> 00:25:18,379
the x y&z axis from the accelerometer

613
00:25:15,260 --> 00:25:21,170
and then using it to control the angle

614
00:25:18,380 --> 00:25:22,940
of the output servo as you can see in

615
00:25:21,170 --> 00:25:24,920
the two drawings on the right the

616
00:25:22,940 --> 00:25:28,060
accelerometer communicates the pi using

617
00:25:24,920 --> 00:25:31,280
ITC serie bus protocol I mean i2c

618
00:25:28,060 --> 00:25:33,379
protocol is a master slave protocol with

619
00:25:31,280 --> 00:25:36,050
a master request data from the slave in

620
00:25:33,380 --> 00:25:39,080
this case the masters of PI accelerators

621
00:25:36,050 --> 00:25:41,690
to slay simplify this description in the

622
00:25:39,080 --> 00:25:43,850
middle picture board is flat on the

623
00:25:41,690 --> 00:25:45,740
table and we see that the servo is

624
00:25:43,850 --> 00:25:47,780
angled almost at like 6 o'clock because

625
00:25:45,740 --> 00:25:48,680
the x y&z axis and when we tilt the

626
00:25:47,780 --> 00:25:50,990
breadboard

627
00:25:48,680 --> 00:25:52,940
we see the servo adjusted by a PI and

628
00:25:50,990 --> 00:25:57,920
drive controller to an angle between

629
00:25:52,940 --> 00:26:00,110
about 7 8 o'clock we can use a Sayle

630
00:25:57,920 --> 00:26:02,390
logic analyzer to sniff capture and

631
00:26:00,110 --> 00:26:04,760
decode the i2c protocol so when we

632
00:26:02,390 --> 00:26:06,700
decode we observe the i2c handshake

633
00:26:04,760 --> 00:26:09,200
between the PI and the accelerometer

634
00:26:06,700 --> 00:26:10,730
takes place over 3 bytes and then

635
00:26:09,200 --> 00:26:15,320
there's an additional 6 bytes of data

636
00:26:10,730 --> 00:26:17,570
providing the x y&z coordinates we cheat

637
00:26:15,320 --> 00:26:20,300
in this example in connected intact PI

638
00:26:17,570 --> 00:26:24,830
to the i2c bus to capture the i2c

639
00:26:20,300 --> 00:26:28,100
address of the basically 0 0 by 53

640
00:26:24,830 --> 00:26:29,740
targeting the ATX L 3 4 5 so then we can

641
00:26:28,100 --> 00:26:33,360
rewire the pie as

642
00:26:29,740 --> 00:26:37,630
drawing on right there turning it into a

643
00:26:33,360 --> 00:26:40,658
ITC slave as an attempt to disrupt our

644
00:26:37,630 --> 00:26:42,850
control movement so the pictures on this

645
00:26:40,659 --> 00:26:44,820
side basically show the outcome of two

646
00:26:42,850 --> 00:26:48,129
different attacks so I'm on the left

647
00:26:44,820 --> 00:26:50,080
this is a disrupter jam scenario our

648
00:26:48,130 --> 00:26:51,429
attack pot basically responds to ITC

649
00:26:50,080 --> 00:26:53,620
requests at the same time as the

650
00:26:51,429 --> 00:26:55,799
accelerometer so the responses collide

651
00:26:53,620 --> 00:27:00,039
on the bus but the input device

652
00:26:55,799 --> 00:27:02,020
interprets the bits anyways and in our

653
00:27:00,039 --> 00:27:06,129
simple collision test the board just

654
00:27:02,020 --> 00:27:09,129
moves the sensor excuse me the servo

655
00:27:06,130 --> 00:27:10,480
angle in the manner to about seven

656
00:27:09,130 --> 00:27:12,820
o'clock as you can see in that left

657
00:27:10,480 --> 00:27:15,220
drawing in the right picture we

658
00:27:12,820 --> 00:27:18,100
basically sever or we could desolder if

659
00:27:15,220 --> 00:27:21,580
this was on a breadboard the ATX L three

660
00:27:18,100 --> 00:27:23,860
four five and because we can communicate

661
00:27:21,580 --> 00:27:25,330
and respond to our target PI we have

662
00:27:23,860 --> 00:27:27,340
complete control over those six bytes

663
00:27:25,330 --> 00:27:32,080
and can basically remove the servo to

664
00:27:27,340 --> 00:27:34,809
whatever angle we want so that's that's

665
00:27:32,080 --> 00:27:37,840
an example for this sensor layer on the

666
00:27:34,809 --> 00:27:39,789
on to the control layer basically here

667
00:27:37,840 --> 00:27:42,820
we assume the attacker has gained access

668
00:27:39,789 --> 00:27:46,179
to the controller of our PI and our

669
00:27:42,820 --> 00:27:49,149
previous setup using the ESC and brush

670
00:27:46,179 --> 00:27:51,220
motor and dinah the PI is running a

671
00:27:49,149 --> 00:27:54,129
baseline script that increases the speed

672
00:27:51,220 --> 00:27:56,950
of the motor every half a second until

673
00:27:54,130 --> 00:27:59,080
it hits about 16,000 rpm at a peak and

674
00:27:56,950 --> 00:28:00,850
then it sleeps for five seconds and then

675
00:27:59,080 --> 00:28:02,770
starts decreasing the speed every half a

676
00:28:00,850 --> 00:28:03,789
second so the graphs on the left and

677
00:28:02,770 --> 00:28:08,020
right show two different attack

678
00:28:03,789 --> 00:28:10,059
strategies against this script so in on

679
00:28:08,020 --> 00:28:11,889
the graph on the right the first circle

680
00:28:10,059 --> 00:28:14,110
on the left is basically a single

681
00:28:11,890 --> 00:28:16,990
command injection where the attacker is

682
00:28:14,110 --> 00:28:19,510
saying hey stop the motor because the

683
00:28:16,990 --> 00:28:21,460
controller is updating its frequency and

684
00:28:19,510 --> 00:28:24,700
speed every half a second this is

685
00:28:21,460 --> 00:28:27,340
minimal effect but kind of jerks the

686
00:28:24,700 --> 00:28:29,169
motor however if that same single

687
00:28:27,340 --> 00:28:30,820
command injection is applied after the

688
00:28:29,169 --> 00:28:33,549
motor sleeps for five seconds you can

689
00:28:30,820 --> 00:28:35,200
see that the motor basically starts

690
00:28:33,549 --> 00:28:39,240
grinding to a halt and so the controller

691
00:28:35,200 --> 00:28:39,240
wakes up and applies additional commands

692
00:28:39,539 --> 00:28:45,400
in the second graph we

693
00:28:43,270 --> 00:28:47,440
it just basically shows a single command

694
00:28:45,400 --> 00:28:49,780
injection oh I'm sorry

695
00:28:47,440 --> 00:28:53,950
the graph on the right the attacker

696
00:28:49,780 --> 00:28:57,370
begins that's basically issuing commands

697
00:28:53,950 --> 00:28:59,950
every 100 milliseconds from the first

698
00:28:57,370 --> 00:29:01,750
red circle through the second red circle

699
00:28:59,950 --> 00:29:07,570
at a faster rate than the motor

700
00:29:01,750 --> 00:29:09,280
controller software and you can see that

701
00:29:07,570 --> 00:29:11,290
the motor that excuse me the attacker

702
00:29:09,280 --> 00:29:15,040
has complete control over the motor

703
00:29:11,290 --> 00:29:18,340
between these two circles keeping a

704
00:29:15,040 --> 00:29:20,320
motor at about 10,000 rpm so if you have

705
00:29:18,340 --> 00:29:22,770
more granular access and you issued

706
00:29:20,320 --> 00:29:25,090
commands at a faster rate than an

707
00:29:22,770 --> 00:29:27,639
application this is just showing how you

708
00:29:25,090 --> 00:29:32,220
can take over the motor come as an

709
00:29:27,640 --> 00:29:35,440
attack for a second control attack this

710
00:29:32,220 --> 00:29:37,929
basically we target here the control

711
00:29:35,440 --> 00:29:41,860
drive channel to take over user movement

712
00:29:37,929 --> 00:29:43,600
so as a reminder basically the PI uses

713
00:29:41,860 --> 00:29:45,639
pulse width modulation as a control

714
00:29:43,600 --> 00:29:49,360
signal to and from the electronic speed

715
00:29:45,640 --> 00:29:50,890
controller to to basically drive the

716
00:29:49,360 --> 00:29:52,780
motor in this setup we show how to

717
00:29:50,890 --> 00:29:55,809
introduce a hardware implant to take

718
00:29:52,780 --> 00:29:57,399
over control of the channel and of

719
00:29:55,809 --> 00:29:59,740
system movement without the controller

720
00:29:57,400 --> 00:30:02,070
even knowing and assuming it's also

721
00:29:59,740 --> 00:30:06,910
assuming that sensors are not present

722
00:30:02,070 --> 00:30:09,790
she generally wiring and draw and drives

723
00:30:06,910 --> 00:30:13,840
like in systems like robots or small

724
00:30:09,790 --> 00:30:16,510
moving vehicles you'll see a two wire or

725
00:30:13,840 --> 00:30:18,699
a three wire connection and the pinout

726
00:30:16,510 --> 00:30:21,460
is noted here in the slot the black wire

727
00:30:18,700 --> 00:30:23,200
is a common ground wire the red wire is

728
00:30:21,460 --> 00:30:25,720
basically designed to provide current

729
00:30:23,200 --> 00:30:28,410
and it may or may not be used in the

730
00:30:25,720 --> 00:30:31,480
event a separate power rail is used a

731
00:30:28,410 --> 00:30:32,890
white or yellow wire is used for control

732
00:30:31,480 --> 00:30:36,100
and is usually just pulse width

733
00:30:32,890 --> 00:30:38,590
modulation so here we take an attack PI

734
00:30:36,100 --> 00:30:42,100
which could really be any hardware

735
00:30:38,590 --> 00:30:45,850
implant and we just connect the white

736
00:30:42,100 --> 00:30:48,070
wire there to GPIO 18 which is our pulse

737
00:30:45,850 --> 00:30:49,480
width modulation on our tach PI and the

738
00:30:48,070 --> 00:30:52,899
black wire attune to the attack PI's

739
00:30:49,480 --> 00:30:55,970
ground and then the attack PI we just we

740
00:30:52,900 --> 00:31:00,500
have a simple scripts in Python

741
00:30:55,970 --> 00:31:02,330
we set GPIO 18 pin mode to input we wait

742
00:31:00,500 --> 00:31:04,519
about 5 seconds after seeing a pulse

743
00:31:02,330 --> 00:31:08,870
width modulation signal and then we

744
00:31:04,519 --> 00:31:11,179
change the GPIO 18 pulse width

745
00:31:08,870 --> 00:31:13,758
modulation mode and it basically takes

746
00:31:11,179 --> 00:31:15,620
control over the motor this graph shows

747
00:31:13,759 --> 00:31:17,240
the results the blue line represents a

748
00:31:15,620 --> 00:31:20,779
baseline run that draws the motor up to

749
00:31:17,240 --> 00:31:23,240
about 24,000 rpm the to attack runs in

750
00:31:20,779 --> 00:31:25,850
this graph show our tax grip takes

751
00:31:23,240 --> 00:31:27,470
complete control of a motor we can slow

752
00:31:25,850 --> 00:31:29,360
down or speed up the motor at will and

753
00:31:27,470 --> 00:31:33,110
completely control the pulse width

754
00:31:29,360 --> 00:31:36,889
modulation signal the hardware implant

755
00:31:33,110 --> 00:31:39,110
attack works once the attack PI takes

756
00:31:36,889 --> 00:31:40,549
control over the pin basically smaller

757
00:31:39,110 --> 00:31:43,699
boards to be used to replicate this

758
00:31:40,549 --> 00:31:47,480
attack a good mitigation here might be

759
00:31:43,700 --> 00:31:49,580
to make wiring harder to access within

760
00:31:47,480 --> 00:31:51,830
the system may be adding tamper evidence

761
00:31:49,580 --> 00:31:56,990
or tamper resistance controls to prevent

762
00:31:51,830 --> 00:31:59,240
attacks against this channel ok so let's

763
00:31:56,990 --> 00:32:00,620
move on to the drive flare many times

764
00:31:59,240 --> 00:32:03,259
the drive layers a separate controller

765
00:32:00,620 --> 00:32:04,850
aboard in the main controller as a drive

766
00:32:03,259 --> 00:32:07,190
controller is just designed to handle

767
00:32:04,850 --> 00:32:09,678
the additional power load in order to

768
00:32:07,190 --> 00:32:13,100
drive motor we continue our example here

769
00:32:09,679 --> 00:32:16,340
targeting the PI as open source examples

770
00:32:13,100 --> 00:32:19,399
are easy to fall the Raspberry Pi 3 B+

771
00:32:16,340 --> 00:32:21,559
uses Broadcom ECM 28:37 sock and

772
00:32:19,399 --> 00:32:23,389
physical memory registers are used to

773
00:32:21,559 --> 00:32:26,658
control or change pin status within the

774
00:32:23,389 --> 00:32:30,408
sock the code here may be a bit hard to

775
00:32:26,659 --> 00:32:32,629
see but we have more details in the

776
00:32:30,409 --> 00:32:34,669
paper we're basically able to identify

777
00:32:32,629 --> 00:32:37,549
the register locations in memory through

778
00:32:34,669 --> 00:32:39,320
reading the datasheet and and reverse

779
00:32:37,549 --> 00:32:41,539
engineering the wiring PI library which

780
00:32:39,320 --> 00:32:45,668
is a common commonly used library for

781
00:32:41,539 --> 00:32:48,620
pin control in the pod and then and then

782
00:32:45,669 --> 00:32:51,289
ident once we identify these locations

783
00:32:48,620 --> 00:32:54,559
we can memory map and control pins by

784
00:32:51,289 --> 00:32:57,379
just updating their status in memory for

785
00:32:54,559 --> 00:32:59,350
a first attack we basically used the

786
00:32:57,379 --> 00:33:03,199
same Raspberry Pi setup that we did

787
00:32:59,350 --> 00:33:05,178
before this attack is essentially the

788
00:33:03,200 --> 00:33:08,090
same attack presented by a Bazzi and

789
00:33:05,179 --> 00:33:09,350
Hashemi at blackhat europe 2016 it was

790
00:33:08,090 --> 00:33:12,500
called ghost in the plc

791
00:33:09,350 --> 00:33:14,299
basically with with root or similar

792
00:33:12,500 --> 00:33:16,009
access to the running application an

793
00:33:14,299 --> 00:33:18,799
attacker can change the pin mode from

794
00:33:16,009 --> 00:33:21,049
pulse width modulation or to base to

795
00:33:18,799 --> 00:33:22,789
input which we did here and you can see

796
00:33:21,049 --> 00:33:25,250
that once the pin was changed to input

797
00:33:22,789 --> 00:33:27,070
the basically post width modulation

798
00:33:25,250 --> 00:33:29,149
stopped and the motor stopped as well

799
00:33:27,070 --> 00:33:35,658
Hashemi and Abbasi showed how to turn

800
00:33:29,149 --> 00:33:37,668
this into a rootkit so for a second

801
00:33:35,659 --> 00:33:39,230
drive layer attack we changed our

802
00:33:37,669 --> 00:33:42,980
configuration to use a brushless motor

803
00:33:39,230 --> 00:33:44,600
as pictured here brushless motors are

804
00:33:42,980 --> 00:33:46,429
more efficient than brushed motors and

805
00:33:44,600 --> 00:33:50,779
do not spark under abnormal conditions

806
00:33:46,429 --> 00:33:54,169
and we had some issues with fire and

807
00:33:50,779 --> 00:33:56,539
doing this experiment so we want to

808
00:33:54,169 --> 00:33:58,399
control abnormal conditions basically to

809
00:33:56,539 --> 00:34:01,100
modify the clock and duty cycle values

810
00:33:58,399 --> 00:34:04,100
to see the impact on the motor so the

811
00:34:01,100 --> 00:34:05,299
graph here basically shows the results

812
00:34:04,100 --> 00:34:08,118
of modifying the clock and data

813
00:34:05,299 --> 00:34:09,500
registers in software libraries to

814
00:34:08,119 --> 00:34:13,099
control the speed of the motor the

815
00:34:09,500 --> 00:34:14,929
libraries may adjust the clock and duty

816
00:34:13,099 --> 00:34:17,450
cycle values to ensure that the motor

817
00:34:14,929 --> 00:34:20,300
runs at a certain speed or in the case

818
00:34:17,449 --> 00:34:22,428
of a servo motor at a certain angle by

819
00:34:20,300 --> 00:34:24,440
keeping the range register static we

820
00:34:22,429 --> 00:34:26,960
cycled through clock and data values to

821
00:34:24,440 --> 00:34:28,819
see what the impact of motor output

822
00:34:26,960 --> 00:34:31,179
would be and as we creased the clock

823
00:34:28,819 --> 00:34:33,319
value you can see that the data value

824
00:34:31,179 --> 00:34:37,190
needed to move the motor basically

825
00:34:33,319 --> 00:34:39,168
clockwise or counter clockwise direction

826
00:34:37,190 --> 00:34:41,869
decreased as frequency in the clock

827
00:34:39,168 --> 00:34:43,449
increase and attack strategy here to

828
00:34:41,869 --> 00:34:45,619
disrupt performance against a motor

829
00:34:43,449 --> 00:34:47,629
could simply involve changing the clock

830
00:34:45,619 --> 00:34:49,579
value which would change the direction

831
00:34:47,629 --> 00:34:53,179
of the motor or even stop the motor all

832
00:34:49,579 --> 00:34:56,450
together the application used duty cycle

833
00:34:53,179 --> 00:35:00,230
values that produced no movements with

834
00:34:56,449 --> 00:35:01,520
the new clock value for our last attack

835
00:35:00,230 --> 00:35:03,650
against the drive where we take control

836
00:35:01,520 --> 00:35:05,599
of the ability to read and write those

837
00:35:03,650 --> 00:35:07,190
GPIO registers basically record and

838
00:35:05,599 --> 00:35:09,470
playback movement

839
00:35:07,190 --> 00:35:11,930
to allow us to reverse-engineer movement

840
00:35:09,470 --> 00:35:13,399
missed system if we go back to our

841
00:35:11,930 --> 00:35:15,680
earlier PI setup with the brush motor

842
00:35:13,400 --> 00:35:17,569
and run a script we can write a script

843
00:35:15,680 --> 00:35:20,270
basically that captures the clock data

844
00:35:17,569 --> 00:35:22,580
and range register values every hundred

845
00:35:20,270 --> 00:35:25,910
milliseconds or at least more granular

846
00:35:22,580 --> 00:35:28,640
than the controller application that's

847
00:35:25,910 --> 00:35:30,620
running a second script can then just be

848
00:35:28,640 --> 00:35:33,350
wrong to play back these values every

849
00:35:30,620 --> 00:35:35,960
100 milliseconds and as we can see by

850
00:35:33,350 --> 00:35:37,430
the two curves in the graph the capture

851
00:35:35,960 --> 00:35:39,470
and playback of movement by simply

852
00:35:37,430 --> 00:35:41,450
monitoring register values produce the

853
00:35:39,470 --> 00:35:43,310
exact same movement so this technique

854
00:35:41,450 --> 00:35:45,230
basically as I said before could be used

855
00:35:43,310 --> 00:35:47,900
to reverse engineer movements and

856
00:35:45,230 --> 00:35:52,070
complex applications but it will

857
00:35:47,900 --> 00:35:54,650
generally require root access so with

858
00:35:52,070 --> 00:35:57,530
the power layer and below attacks

859
00:35:54,650 --> 00:35:59,030
usually require physical access so

860
00:35:57,530 --> 00:36:01,850
techniques have been proven feasible and

861
00:35:59,030 --> 00:36:03,230
research such as firmware attacks and

862
00:36:01,850 --> 00:36:05,930
rechargeable batteries that could be

863
00:36:03,230 --> 00:36:09,710
used to modify over current or low

864
00:36:05,930 --> 00:36:12,290
voltage parameters in this experiment we

865
00:36:09,710 --> 00:36:15,050
simply show the results of introducing a

866
00:36:12,290 --> 00:36:16,880
low voltage battery to movement live

867
00:36:15,050 --> 00:36:20,060
voltage battery that basically simulates

868
00:36:16,880 --> 00:36:23,240
a brownout condition on the motors

869
00:36:20,060 --> 00:36:25,009
performance we ran our lipo battery down

870
00:36:23,240 --> 00:36:27,200
on low voltage condition which is

871
00:36:25,010 --> 00:36:29,180
usually not recommended because lipo

872
00:36:27,200 --> 00:36:32,270
batteries can catch fire or supposedly

873
00:36:29,180 --> 00:36:36,109
explode in low voltage conditions which

874
00:36:32,270 --> 00:36:38,150
we didn't actually see but the baseline

875
00:36:36,110 --> 00:36:40,160
run in this graph shows the expected

876
00:36:38,150 --> 00:36:42,440
motor performance under normal voltage

877
00:36:40,160 --> 00:36:45,980
conditions running the motor up to about

878
00:36:42,440 --> 00:36:49,010
25,000 rpm with the low voltage battery

879
00:36:45,980 --> 00:36:51,410
the motor was slow to take off and the

880
00:36:49,010 --> 00:36:54,550
battery also just popped and shut the

881
00:36:51,410 --> 00:36:57,170
workbench when we started the motor up

882
00:36:54,550 --> 00:36:59,870
this graph shows the motor was unable to

883
00:36:57,170 --> 00:37:02,300
come close to to its target rpm and just

884
00:36:59,870 --> 00:37:08,330
kind of talked out at about 18,000 rpm

885
00:37:02,300 --> 00:37:10,010
before petering off this this graph is

886
00:37:08,330 --> 00:37:13,009
those same two runs but we compare

887
00:37:10,010 --> 00:37:15,670
torque and power output which might be

888
00:37:13,010 --> 00:37:18,140
kind of hard to see so we apologize

889
00:37:15,670 --> 00:37:20,390
under the low voltage scenario basically

890
00:37:18,140 --> 00:37:26,240
a both torque and power output are

891
00:37:20,390 --> 00:37:29,150
drastically in affected negatively

892
00:37:26,240 --> 00:37:30,709
without the proper voltage just because

893
00:37:29,150 --> 00:37:32,300
the motor struggling to pull current and

894
00:37:30,710 --> 00:37:35,859
if a motor struggling the full current

895
00:37:32,300 --> 00:37:38,099
it can overheat

896
00:37:35,859 --> 00:37:40,410
and reduce a lifetime of the motor so

897
00:37:38,099 --> 00:37:42,339
next we'll go on to the motor layer

898
00:37:40,410 --> 00:37:43,960
attacks against the motor layer usually

899
00:37:42,339 --> 00:37:46,328
physical and it could be as simple as

900
00:37:43,960 --> 00:37:49,539
pulling leads or shorting the motor if

901
00:37:46,329 --> 00:37:51,190
overload protections are not in place we

902
00:37:49,539 --> 00:37:53,200
decided to be a little more creative and

903
00:37:51,190 --> 00:37:54,910
wanted to see the impact of an

904
00:37:53,200 --> 00:37:56,500
electromagnet on the performance of

905
00:37:54,910 --> 00:37:59,558
motor if introduced to a running motor

906
00:37:56,500 --> 00:38:01,089
we basically hypothesize that the

907
00:37:59,559 --> 00:38:03,130
additional electromagnetic presence

908
00:38:01,089 --> 00:38:05,558
within the motor to change the movement

909
00:38:03,130 --> 00:38:09,369
characteristics of the motor when we we

910
00:38:05,559 --> 00:38:10,720
procured the a 500 Newton electric motor

911
00:38:09,369 --> 00:38:13,240
as you see there that which runs off a

912
00:38:10,720 --> 00:38:15,640
12 volt battery we found that by placing

913
00:38:13,240 --> 00:38:17,410
the electromagnet over the holes use for

914
00:38:15,640 --> 00:38:21,160
ventilation in our brush motor actually

915
00:38:17,410 --> 00:38:23,558
did impact the magnetic flux internal

916
00:38:21,160 --> 00:38:26,950
the motor but not in a way that we we

917
00:38:23,559 --> 00:38:28,869
had anticipated so in this graph we show

918
00:38:26,950 --> 00:38:31,480
a baseline script that runs the motor up

919
00:38:28,869 --> 00:38:33,670
to about 25,000 rpm again and when the

920
00:38:31,480 --> 00:38:35,529
electromagnet is introduced to motor and

921
00:38:33,670 --> 00:38:37,119
the second attack run the same baseline

922
00:38:35,529 --> 00:38:39,010
script consistently increase the motor

923
00:38:37,119 --> 00:38:42,990
speed by about 3 to 4 percent up to

924
00:38:39,010 --> 00:38:45,520
26,000 of p.m. the circle on this graph

925
00:38:42,990 --> 00:38:47,169
is used to highlight the removal of the

926
00:38:45,520 --> 00:38:49,410
electromagnet and our second attack run

927
00:38:47,170 --> 00:38:51,690
once removed during the run the motor

928
00:38:49,410 --> 00:38:57,759
basically slowed back down at original

929
00:38:51,690 --> 00:39:01,450
intended 25,000 rpm target so moving on

930
00:38:57,760 --> 00:39:02,710
to our second motor attack experiment we

931
00:39:01,450 --> 00:39:05,200
want to show how simple it is to

932
00:39:02,710 --> 00:39:07,720
reprogram a digital servo if they're

933
00:39:05,200 --> 00:39:10,629
using a target application if you if

934
00:39:07,720 --> 00:39:12,910
your target robot or drone or any kind

935
00:39:10,630 --> 00:39:14,319
of system has a digital servo chances

936
00:39:12,910 --> 00:39:15,940
are it has some kind of marking either

937
00:39:14,319 --> 00:39:17,950
externally or internally that tells who

938
00:39:15,940 --> 00:39:20,200
that manufacturer is if you know the

939
00:39:17,950 --> 00:39:22,299
manufacturer you can generally find that

940
00:39:20,200 --> 00:39:23,618
they also like to sell programmers to

941
00:39:22,299 --> 00:39:25,960
change the characteristics of the motor

942
00:39:23,619 --> 00:39:28,960
so the left picture we basically show

943
00:39:25,960 --> 00:39:30,520
the high-tech programmer in line with

944
00:39:28,960 --> 00:39:31,900
the servo along with some of the

945
00:39:30,520 --> 00:39:34,410
characteristics that can be reprogrammed

946
00:39:31,900 --> 00:39:38,170
such as direction speed dead bandwidth

947
00:39:34,410 --> 00:39:40,029
in the right picture we show how easy it

948
00:39:38,170 --> 00:39:42,339
is to change the servos direction from

949
00:39:40,029 --> 00:39:43,900
clockwise to counterclockwise this

950
00:39:42,339 --> 00:39:45,720
change is permanent really until

951
00:39:43,900 --> 00:39:49,440
somebody fixed the motor or until

952
00:39:45,720 --> 00:39:51,149
reprogrammed again so basically these

953
00:39:49,440 --> 00:39:53,190
pictures show the results of change in

954
00:39:51,150 --> 00:39:57,599
the direction the top pictures we have a

955
00:39:53,190 --> 00:40:03,000
motor changed in software to 25 45 90

956
00:39:57,599 --> 00:40:04,440
and 125 degrees and then we flipped the

957
00:40:03,000 --> 00:40:06,030
motor from running clockwise to

958
00:40:04,440 --> 00:40:09,270
counterclockwise and we just ran the

959
00:40:06,030 --> 00:40:12,650
same script again 25 45 90 125 degrees

960
00:40:09,270 --> 00:40:14,820
you can see that basically movement

961
00:40:12,650 --> 00:40:17,070
angular movement for the digital servo

962
00:40:14,820 --> 00:40:21,270
is reflected so if this was done to

963
00:40:17,070 --> 00:40:23,760
something like a 3d printer or a robot

964
00:40:21,270 --> 00:40:26,040
basically the movements would appear

965
00:40:23,760 --> 00:40:29,430
backward - what an expected output would

966
00:40:26,040 --> 00:40:32,400
be the controller might detect the

967
00:40:29,430 --> 00:40:34,618
calibration are detected an issue during

968
00:40:32,400 --> 00:40:38,099
calibration shutdown or the system may

969
00:40:34,619 --> 00:40:40,500
fall back to failsafe state and for a

970
00:40:38,099 --> 00:40:42,000
last layer low layer these attacks are

971
00:40:40,500 --> 00:40:43,859
almost always physical when the attacker

972
00:40:42,000 --> 00:40:45,540
may want to prevent any movement or

973
00:40:43,859 --> 00:40:47,869
shift weight on the load to overheat the

974
00:40:45,540 --> 00:40:50,820
motor and reduce the motors lifetime

975
00:40:47,869 --> 00:40:53,190
here we have a simple experiment to show

976
00:40:50,820 --> 00:40:55,109
what happens when we burn out a motor we

977
00:40:53,190 --> 00:40:56,970
procured a simple desk fan as shown in

978
00:40:55,109 --> 00:40:58,529
the picture and use the temperature

979
00:40:56,970 --> 00:41:01,649
probe to monitor the motors temperature

980
00:40:58,530 --> 00:41:05,130
over time this fan uses a brushless

981
00:41:01,650 --> 00:41:06,270
motor I set the fan basically on high

982
00:41:05,130 --> 00:41:08,010
setting and use my hand

983
00:41:06,270 --> 00:41:09,630
bender from moving and every 10 minutes

984
00:41:08,010 --> 00:41:11,630
allowed it to move freely a measured

985
00:41:09,630 --> 00:41:13,920
measured speed with it's a commoner

986
00:41:11,630 --> 00:41:16,080
should see the motors performance over

987
00:41:13,920 --> 00:41:19,160
time so what ended up happening was

988
00:41:16,080 --> 00:41:21,480
after 61 minutes the fan burned out

989
00:41:19,160 --> 00:41:23,819
based on the graph on the right you can

990
00:41:21,480 --> 00:41:26,520
see that it started off run operating at

991
00:41:23,820 --> 00:41:29,640
about 7000 rpm and dropped over that

992
00:41:26,520 --> 00:41:33,000
hour to about 6,000 rpm before

993
00:41:29,640 --> 00:41:34,170
completely dying on the right graph you

994
00:41:33,000 --> 00:41:37,890
can see that the temperature of the

995
00:41:34,170 --> 00:41:40,950
motor internally it rose to 180 degrees

996
00:41:37,890 --> 00:41:42,839
and so at prolonged high temperatures

997
00:41:40,950 --> 00:41:46,109
what happens is the winding insulation

998
00:41:42,839 --> 00:41:48,299
in the motor lifetime it significantly

999
00:41:46,109 --> 00:41:50,880
decreases and so the point that the

1000
00:41:48,300 --> 00:41:53,130
insulation cannot assure proper current

1001
00:41:50,880 --> 00:41:54,900
flow and the motor just stops running

1002
00:41:53,130 --> 00:41:57,599
this is actually another way to attack

1003
00:41:54,900 --> 00:41:58,980
motors just apply high heat really to

1004
00:41:57,599 --> 00:42:03,210
the insulation you'll just

1005
00:41:58,980 --> 00:42:05,130
remoter uh visually if we compare a good

1006
00:42:03,210 --> 00:42:07,200
motor and a bad motor we don't even see

1007
00:42:05,130 --> 00:42:08,670
any difference and so forensically it

1008
00:42:07,200 --> 00:42:13,560
just looks like the motor wore out over

1009
00:42:08,670 --> 00:42:16,200
time okay and that concludes our example

1010
00:42:13,560 --> 00:42:17,850
experiments at the various motor threat

1011
00:42:16,200 --> 00:42:19,410
model layers and hopefully now it's kind

1012
00:42:17,850 --> 00:42:21,060
of easier to understand how attacks the

1013
00:42:19,410 --> 00:42:24,690
different layers can result in

1014
00:42:21,060 --> 00:42:28,350
disruption or control to an electric

1015
00:42:24,690 --> 00:42:30,390
motor systems movements so you see the

1016
00:42:28,350 --> 00:42:34,618
seven layers and remember offensive

1017
00:42:30,390 --> 00:42:35,609
security can do precise movement laws so

1018
00:42:34,619 --> 00:42:39,570
let's return back to where we started

1019
00:42:35,609 --> 00:42:41,220
and complete our game in case you forgot

1020
00:42:39,570 --> 00:42:43,710
the scenario or showed up in the middle

1021
00:42:41,220 --> 00:42:45,540
of talk here it is again your risk

1022
00:42:43,710 --> 00:42:47,490
Assessor and your company just landed a

1023
00:42:45,540 --> 00:42:49,590
job of assessing a global drone delivery

1024
00:42:47,490 --> 00:42:51,779
system the drone company uses about 30

1025
00:42:49,590 --> 00:42:54,450
different drone models hundreds of

1026
00:42:51,780 --> 00:42:56,130
operators worldwide have both physical

1027
00:42:54,450 --> 00:42:58,589
and remote access and the company won't

1028
00:42:56,130 --> 00:43:00,510
be conducting background checks and

1029
00:42:58,590 --> 00:43:04,260
control occurs over the internet so what

1030
00:43:00,510 --> 00:43:06,810
can go wrong well with any threat model

1031
00:43:04,260 --> 00:43:08,430
we wanted to find who our attackers may

1032
00:43:06,810 --> 00:43:09,930
be in this case we consider the

1033
00:43:08,430 --> 00:43:11,310
following actors may of interest in

1034
00:43:09,930 --> 00:43:14,129
disrupting movement over a drone

1035
00:43:11,310 --> 00:43:15,720
delivery system nation-state adversary

1036
00:43:14,130 --> 00:43:18,570
is good at cyber and physical attacks

1037
00:43:15,720 --> 00:43:20,100
such an attacker can target all seven

1038
00:43:18,570 --> 00:43:22,500
layers of the mode of threat model a

1039
00:43:20,100 --> 00:43:25,380
cyber criminal is good at cyber attacks

1040
00:43:22,500 --> 00:43:26,730
they usually profit off data collection

1041
00:43:25,380 --> 00:43:29,010
and could target data in the drone

1042
00:43:26,730 --> 00:43:31,020
system at the operator sensor or control

1043
00:43:29,010 --> 00:43:33,650
layers a terrorist is good at

1044
00:43:31,020 --> 00:43:36,030
cyberattacks and system in this scenario

1045
00:43:33,650 --> 00:43:37,560
they would be interested in controlling

1046
00:43:36,030 --> 00:43:39,330
or disrupting movement to cause fear

1047
00:43:37,560 --> 00:43:42,080
these attacks could occur at the

1048
00:43:39,330 --> 00:43:45,150
operator sensor or control layers

1049
00:43:42,080 --> 00:43:47,220
finally an insider could also leverage

1050
00:43:45,150 --> 00:43:48,990
cyber or physical attacks and they may

1051
00:43:47,220 --> 00:43:51,390
either be a disgruntled employee or a

1052
00:43:48,990 --> 00:43:52,649
social engineering victim in the case of

1053
00:43:51,390 --> 00:43:55,170
a disgruntled employee they could

1054
00:43:52,650 --> 00:43:57,420
sabotage movement in any layer in the

1055
00:43:55,170 --> 00:43:59,930
social engineering case these attacks

1056
00:43:57,420 --> 00:44:02,310
would just occur at the higher layers

1057
00:43:59,930 --> 00:44:04,799
next the next step we refine our three

1058
00:44:02,310 --> 00:44:06,570
goals for a target system to allow us to

1059
00:44:04,800 --> 00:44:08,609
create attack graphs and identify all

1060
00:44:06,570 --> 00:44:10,530
the kill chains which we could use to

1061
00:44:08,609 --> 00:44:10,890
build security mitigations and prevent

1062
00:44:10,530 --> 00:44:14,519
or to

1063
00:44:10,890 --> 00:44:16,440
to tax for the control attacks attacker

1064
00:44:14,519 --> 00:44:19,368
may want to steal the drones or alter

1065
00:44:16,440 --> 00:44:21,960
movement off their desired course for

1066
00:44:19,369 --> 00:44:24,900
disrupt attacks the attacker may be

1067
00:44:21,960 --> 00:44:26,700
interested in creating physical damage

1068
00:44:24,900 --> 00:44:28,769
or physical harm or just preventing

1069
00:44:26,700 --> 00:44:30,538
movement altogether for data

1070
00:44:28,769 --> 00:44:32,609
exfiltration attacks the attacker may be

1071
00:44:30,539 --> 00:44:34,680
interested in gathering data with

1072
00:44:32,609 --> 00:44:36,480
regards to systems usage or deliveries

1073
00:44:34,680 --> 00:44:39,629
which could be considered a privacy

1074
00:44:36,480 --> 00:44:41,519
invasion so with the motored threat

1075
00:44:39,630 --> 00:44:43,549
model we can now basically create attack

1076
00:44:41,519 --> 00:44:46,379
trees for all three attacks tat graphs

1077
00:44:43,549 --> 00:44:48,750
are all three attacks and goals excuse

1078
00:44:46,380 --> 00:44:51,630
me for each goal we know the layer which

1079
00:44:48,750 --> 00:44:53,700
it'll occur we can identify the

1080
00:44:51,630 --> 00:44:55,500
necessary components and channels that

1081
00:44:53,700 --> 00:44:57,779
may make up each layer review the

1082
00:44:55,500 --> 00:45:00,059
hardware software and communication

1083
00:44:57,779 --> 00:45:02,730
protocols and create detailed attack

1084
00:45:00,059 --> 00:45:04,260
graphs which would which could be

1085
00:45:02,730 --> 00:45:06,839
followed at each layer to reach the same

1086
00:45:04,260 --> 00:45:08,760
goal the result of these graphs is a

1087
00:45:06,839 --> 00:45:10,558
multi-layered kill chain essentially for

1088
00:45:08,760 --> 00:45:13,410
movement that you can be used to secure

1089
00:45:10,559 --> 00:45:14,940
the systems movements if we know where

1090
00:45:13,410 --> 00:45:17,190
the cyber physical attacks could occur

1091
00:45:14,940 --> 00:45:18,920
then we can prevent those attacks from

1092
00:45:17,190 --> 00:45:23,250
occurring as security professionals and

1093
00:45:18,920 --> 00:45:26,130
gain fun and profit so now to close out

1094
00:45:23,250 --> 00:45:27,869
our game scenario we just revisit the

1095
00:45:26,130 --> 00:45:29,579
internals of the system and we can begin

1096
00:45:27,869 --> 00:45:30,869
applying labels to the components

1097
00:45:29,579 --> 00:45:33,720
according to the motive threat model

1098
00:45:30,869 --> 00:45:35,730
layers so each component is can be

1099
00:45:33,720 --> 00:45:37,828
studied individually by a risk Assessor

1100
00:45:35,730 --> 00:45:39,450
to produce those detect trees that I

1101
00:45:37,829 --> 00:45:43,349
just showed you against control disrupt

1102
00:45:39,450 --> 00:45:45,779
and data exfiltration objectives we've

1103
00:45:43,349 --> 00:45:48,180
analyzed this approach against several

1104
00:45:45,779 --> 00:45:51,930
systems to include SCADA systems and

1105
00:45:48,180 --> 00:45:53,339
drones obviously unfound and robots and

1106
00:45:51,930 --> 00:45:55,470
found that it works for systems that

1107
00:45:53,339 --> 00:45:59,009
we've analyzed that use electric motors

1108
00:45:55,470 --> 00:46:02,480
for movement more complex systems will

1109
00:45:59,009 --> 00:46:05,220
result in obviously more complex models

1110
00:46:02,480 --> 00:46:06,869
however the threat assessment could be

1111
00:46:05,220 --> 00:46:08,490
conducted in stages may be following

1112
00:46:06,869 --> 00:46:11,490
individual layers depending on where the

1113
00:46:08,490 --> 00:46:15,538
attacker model looks like in their

1114
00:46:11,490 --> 00:46:17,879
possible goals so so before I close out

1115
00:46:15,539 --> 00:46:19,559
here's our here's my boneyard from

1116
00:46:17,880 --> 00:46:21,630
experimentation I've burned out a lot of

1117
00:46:19,559 --> 00:46:23,700
motors caught a lot of things on fire

1118
00:46:21,630 --> 00:46:24,390
and probably most of it was due because

1119
00:46:23,700 --> 00:46:29,520
I'm

1120
00:46:24,390 --> 00:46:31,920
pretty crappy solder so as for blackhat

1121
00:46:29,520 --> 00:46:34,920
soundbites there's three takeaways from

1122
00:46:31,920 --> 00:46:36,900
today's presentation you can identify

1123
00:46:34,920 --> 00:46:38,670
basically three attack goals against

1124
00:46:36,900 --> 00:46:41,850
movement in electric motor systems

1125
00:46:38,670 --> 00:46:44,240
control disrupt data exfiltration any

1126
00:46:41,850 --> 00:46:46,770
system that leverages electric motors

1127
00:46:44,240 --> 00:46:48,359
built using control theory basically a

1128
00:46:46,770 --> 00:46:50,670
seven layers that can be attacked from

1129
00:46:48,360 --> 00:46:53,730
either five physical or a cyber

1130
00:46:50,670 --> 00:46:55,650
perspective those seven layers operators

1131
00:46:53,730 --> 00:46:57,840
sensor control drive power motor and

1132
00:46:55,650 --> 00:47:00,870
load or offensive security can do

1133
00:46:57,840 --> 00:47:02,670
precise movement Louis this works is a

1134
00:47:00,870 --> 00:47:05,310
universal model against movement as best

1135
00:47:02,670 --> 00:47:06,690
we can tell and again I mentioned that

1136
00:47:05,310 --> 00:47:09,240
we've tried it against some of these

1137
00:47:06,690 --> 00:47:11,670
other systems so we hope that you find

1138
00:47:09,240 --> 00:47:13,500
the motor threat model simple and maybe

1139
00:47:11,670 --> 00:47:15,600
can even help us make it better so

1140
00:47:13,500 --> 00:47:18,000
thanks this concludes attacking electric

1141
00:47:15,600 --> 00:47:19,830
motors for fun and profit I hope the

1142
00:47:18,000 --> 00:47:21,660
motor threat model is easy to understand

1143
00:47:19,830 --> 00:47:26,370
and we're interested in feedback and

1144
00:47:21,660 --> 00:47:30,060
hopefully you'll provide reviews and I'm

1145
00:47:26,370 --> 00:47:32,190
happy to entertain questions or talk

1146
00:47:30,060 --> 00:47:34,340
answer questions outside if there are

1147
00:47:32,190 --> 00:47:34,340
any

1148
00:47:35,370 --> 00:47:41,219
[Applause]

