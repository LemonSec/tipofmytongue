1
00:00:00,000 --> 00:00:04,740
good afternoon blackhat welcome to one

2
00:00:02,399 --> 00:00:06,870
of the final sessions of the day before

3
00:00:04,740 --> 00:00:08,370
we get started just one big announcement

4
00:00:06,870 --> 00:00:10,349
if we would appreciate if you would put

5
00:00:08,370 --> 00:00:12,059
all of your mobile devices into some

6
00:00:10,349 --> 00:00:13,650
kind of silent mode we are of course

7
00:00:12,059 --> 00:00:15,088
recording this talk and so if there are

8
00:00:13,650 --> 00:00:16,680
too many interruptions we're going to

9
00:00:15,089 --> 00:00:18,210
have to lock the doors and start the

10
00:00:16,680 --> 00:00:20,660
talk from scratch I'm sure you want to

11
00:00:18,210 --> 00:00:23,220
get to dinner sometime tonight the

12
00:00:20,660 --> 00:00:25,789
there's only two things that you can't

13
00:00:23,220 --> 00:00:29,369
leave blackhat without one of them is a

14
00:00:25,789 --> 00:00:30,689
profound new knowledge of security and

15
00:00:29,369 --> 00:00:32,729
the things around it and the others

16
00:00:30,689 --> 00:00:34,980
merchandise the merchandise shop will be

17
00:00:32,729 --> 00:00:38,849
open until 6 o'clock today up there on

18
00:00:34,980 --> 00:00:40,739
level 2 you are an Islander a I my name

19
00:00:38,850 --> 00:00:43,530
is dr. John Griffin and it is my great

20
00:00:40,739 --> 00:00:46,468
pleasure to introduce Christopher Jacobi

21
00:00:43,530 --> 00:00:48,899
a consultant from Sweden who works for

22
00:00:46,469 --> 00:00:50,039
f-secure I've asked all of the speakers

23
00:00:48,899 --> 00:00:51,570
I've introduced for something

24
00:00:50,039 --> 00:00:53,670
interesting to say about them in the

25
00:00:51,570 --> 00:00:54,870
talk and his was very interesting he

26
00:00:53,670 --> 00:00:56,969
wanted everybody to know that he

27
00:00:54,870 --> 00:00:59,849
collects vinyl records and that he DJ's

28
00:00:56,969 --> 00:01:02,250
at parties using those vinyl records and

29
00:00:59,850 --> 00:01:04,860
it just so happens that tonight

30
00:01:02,250 --> 00:01:07,140
August 8th he is available if anybody

31
00:01:04,860 --> 00:01:10,530
has a party and needs a DJ with some

32
00:01:07,140 --> 00:01:12,810
vinyl records at it having said that the

33
00:01:10,530 --> 00:01:15,780
talk today is command injection I rules

34
00:01:12,810 --> 00:01:17,880
in load sorry you can probably read it

35
00:01:15,780 --> 00:01:20,460
on the slide command injection in I

36
00:01:17,880 --> 00:01:25,939
rules load balancer scripts Christopher

37
00:01:20,460 --> 00:01:30,199
Jacobi welcome to the stage thank John

38
00:01:25,939 --> 00:01:34,710
thanks dr. John wow it's bright

39
00:01:30,200 --> 00:01:37,079
ok my name is Christopher and I work for

40
00:01:34,710 --> 00:01:39,809
s secure Sweden I'm a security

41
00:01:37,079 --> 00:01:42,839
consultant and I do pen testing and I

42
00:01:39,810 --> 00:01:44,909
have a team of consultants back in

43
00:01:42,840 --> 00:01:49,259
Sweden were eagerly watching this and

44
00:01:44,909 --> 00:01:52,680
and I should mention Ola and Posse

45
00:01:49,259 --> 00:01:56,549
initially who this year was nominated to

46
00:01:52,680 --> 00:01:59,600
the pony Awards and for their research

47
00:01:56,549 --> 00:02:01,469
on cold boot attacks in BitLocker

48
00:01:59,600 --> 00:02:03,119
William said they were helped me set up

49
00:02:01,469 --> 00:02:04,710
this presentation and the demos you're

50
00:02:03,119 --> 00:02:05,909
going to see and yes press given me a

51
00:02:04,710 --> 00:02:09,478
moral support and thank you for turning

52
00:02:05,909 --> 00:02:11,620
out over to the light side I've had a

53
00:02:09,479 --> 00:02:13,810
lot of support from f5 during this

54
00:02:11,620 --> 00:02:16,959
and I've reported a lot of bugs in my

55
00:02:13,810 --> 00:02:19,569
past and f5 has given me the most or the

56
00:02:16,959 --> 00:02:20,980
best response ever so far and I'm really

57
00:02:19,569 --> 00:02:24,839
impressed by that thank you a lot for

58
00:02:20,980 --> 00:02:24,840
that and thanks for being here

59
00:02:26,010 --> 00:02:31,659
so we offer consultancy services around

60
00:02:29,140 --> 00:02:33,940
the globe and I'm really happy to have

61
00:02:31,659 --> 00:02:35,859
had the support from almost all offices

62
00:02:33,940 --> 00:02:38,319
in one way or another during this

63
00:02:35,860 --> 00:02:41,530
research and thanks you guys everyone

64
00:02:38,319 --> 00:02:45,369
who has been supporting me so load

65
00:02:41,530 --> 00:02:47,260
balancers f5 big IP devices are way more

66
00:02:45,370 --> 00:02:48,910
than load balancers and I'm not here to

67
00:02:47,260 --> 00:02:50,890
advertise for a product of another

68
00:02:48,910 --> 00:02:53,079
company but I have to say it's an

69
00:02:50,890 --> 00:02:56,140
advanced piece of equipment they can do

70
00:02:53,079 --> 00:02:58,140
a lot of things and I'd call it a

71
00:02:56,140 --> 00:03:02,500
gateway I call it the session manager

72
00:02:58,140 --> 00:03:04,720
and also a load balancer so what does

73
00:03:02,500 --> 00:03:06,609
the load balancer do imagine you have a

74
00:03:04,720 --> 00:03:10,450
lot of traffic from the internet going

75
00:03:06,609 --> 00:03:14,109
to your back-end services being an HTTP

76
00:03:10,450 --> 00:03:16,298
service for instance managing a lot of

77
00:03:14,109 --> 00:03:18,790
traffic is expensive and it's hard to do

78
00:03:16,299 --> 00:03:21,250
with one given service and especially if

79
00:03:18,790 --> 00:03:23,168
you have a complex session setup let's

80
00:03:21,250 --> 00:03:26,709
say you have an intranet or something

81
00:03:23,169 --> 00:03:28,930
then that internet will have cookies

82
00:03:26,709 --> 00:03:32,680
support for for managing who's logged in

83
00:03:28,930 --> 00:03:34,239
or not and also this divot this device

84
00:03:32,680 --> 00:03:36,400
will manage that for you it will also

85
00:03:34,239 --> 00:03:39,459
manage the TLS sessions and host your

86
00:03:36,400 --> 00:03:41,349
TLS session keys and synchronize between

87
00:03:39,459 --> 00:03:43,599
itself and I think it's a pretty awesome

88
00:03:41,349 --> 00:03:45,310
product that has handled a lot of load

89
00:03:43,599 --> 00:03:47,440
throughout the years and it's pretty

90
00:03:45,310 --> 00:03:50,799
stable and really cool so I'm not here

91
00:03:47,440 --> 00:03:53,590
to flame this product at all that said

92
00:03:50,799 --> 00:03:55,090
there are weaknesses in all products and

93
00:03:53,590 --> 00:03:57,879
it's all about how you react to them

94
00:03:55,090 --> 00:04:01,209
right these vulnerabilities are pretty

95
00:03:57,879 --> 00:04:04,149
serious and they're hard for f5 to cope

96
00:04:01,209 --> 00:04:07,150
with because these are in user supplied

97
00:04:04,150 --> 00:04:10,769
configurations and I'll show much more

98
00:04:07,150 --> 00:04:14,620
about that throughout this presentation

99
00:04:10,769 --> 00:04:16,930
so I rules I rules is something that

100
00:04:14,620 --> 00:04:20,108
belongs inside of this load balancer

101
00:04:16,930 --> 00:04:23,770
device that defines where the packet

102
00:04:20,108 --> 00:04:24,530
goes does it go to one back-end server

103
00:04:23,770 --> 00:04:26,299
or another

104
00:04:24,530 --> 00:04:27,770
and how do you define that yeah you set

105
00:04:26,300 --> 00:04:30,050
up the bathroom rule saying that this

106
00:04:27,770 --> 00:04:32,180
packet has a header way they're valid

107
00:04:30,050 --> 00:04:34,310
cookies so it goes to the login page or

108
00:04:32,180 --> 00:04:35,900
it has something invalid so it doesn't

109
00:04:34,310 --> 00:04:38,000
go anywhere or it goes to a logout page

110
00:04:35,900 --> 00:04:41,000
or something and that's a that's the

111
00:04:38,000 --> 00:04:42,950
thing you want to do inside of the load

112
00:04:41,000 --> 00:04:45,110
balancer before heading back in servers

113
00:04:42,950 --> 00:04:46,400
because sometimes you can have denial of

114
00:04:45,110 --> 00:04:48,380
service attacks you can have a lot of

115
00:04:46,400 --> 00:04:49,969
things happening that you want to filter

116
00:04:48,380 --> 00:04:51,260
out already in the load balancer and

117
00:04:49,970 --> 00:04:53,420
those scripts can become pretty

118
00:04:51,260 --> 00:04:55,039
complicated in this case we have a

119
00:04:53,420 --> 00:04:56,660
really really simple script that we're

120
00:04:55,040 --> 00:05:00,350
looking at and that's a caching I rule

121
00:04:56,660 --> 00:05:02,270
and this rule checks if a request

122
00:05:00,350 --> 00:05:05,090
contains a get line looking for the

123
00:05:02,270 --> 00:05:06,979
favicon file that's a file that's the

124
00:05:05,090 --> 00:05:08,479
icon file in there in the request if it

125
00:05:06,980 --> 00:05:10,100
contains that then we would just respond

126
00:05:08,480 --> 00:05:11,870
with a favicon file without even

127
00:05:10,100 --> 00:05:12,950
consulting the backend web server and

128
00:05:11,870 --> 00:05:16,400
this feature is pretty neat because

129
00:05:12,950 --> 00:05:18,260
that's like in a useless load for a

130
00:05:16,400 --> 00:05:21,590
back-end server and it just presents a

131
00:05:18,260 --> 00:05:21,950
unified front with the logo to the web

132
00:05:21,590 --> 00:05:28,039
browser

133
00:05:21,950 --> 00:05:30,110
okay and a more complex example is if

134
00:05:28,040 --> 00:05:32,690
you have localization for instance

135
00:05:30,110 --> 00:05:35,120
here's a get request that's asking for

136
00:05:32,690 --> 00:05:36,860
the index page and you could have a

137
00:05:35,120 --> 00:05:40,280
forwarding script that goes to different

138
00:05:36,860 --> 00:05:42,380
back-end servers depending on whether

139
00:05:40,280 --> 00:05:44,419
it's a request that comes from the

140
00:05:42,380 --> 00:05:46,610
Spanish browser or another browser and

141
00:05:44,419 --> 00:05:49,580
in those cases the backend server will

142
00:05:46,610 --> 00:05:52,370
reply with a localized linguistic server

143
00:05:49,580 --> 00:05:53,750
a response to back to the browser so

144
00:05:52,370 --> 00:05:55,910
that you can have a localized website

145
00:05:53,750 --> 00:05:58,640
and this is also very nice feature

146
00:05:55,910 --> 00:06:02,060
obviously because a localization is

147
00:05:58,640 --> 00:06:03,320
always a tricky issue and the reason why

148
00:06:02,060 --> 00:06:04,760
I mentioned this is because there's

149
00:06:03,320 --> 00:06:06,710
always an interaction between the load

150
00:06:04,760 --> 00:06:08,719
balancer step and the back-end server

151
00:06:06,710 --> 00:06:09,950
and this is the the way of the flow and

152
00:06:08,720 --> 00:06:14,900
they now you're starting to get the idea

153
00:06:09,950 --> 00:06:17,930
what the product does I guess okay so I

154
00:06:14,900 --> 00:06:21,169
want to talk about I rules the language

155
00:06:17,930 --> 00:06:23,330
I rules so back in 2001 the version of

156
00:06:21,169 --> 00:06:29,510
tickle or TCL was released called

157
00:06:23,330 --> 00:06:32,320
8.4 and this version this version was

158
00:06:29,510 --> 00:06:34,520
used to fork off and build AI rules and

159
00:06:32,320 --> 00:06:38,360
the product has been building on its

160
00:06:34,520 --> 00:06:40,128
sense and I rules introduced by simply

161
00:06:38,360 --> 00:06:43,009
vacation so the scripts don't have to be

162
00:06:40,129 --> 00:06:44,090
as complicated as these ones in this

163
00:06:43,009 --> 00:06:45,530
case what you're looking at on the

164
00:06:44,090 --> 00:06:47,419
left-hand side it's a typical tickle

165
00:06:45,530 --> 00:06:49,369
script that would not be a valid I rule

166
00:06:47,419 --> 00:06:52,878
because it does file operations this is

167
00:06:49,370 --> 00:06:55,460
a common program that tries to translate

168
00:06:52,879 --> 00:06:57,889
file endings or line endings inside of a

169
00:06:55,460 --> 00:07:00,318
file to from the UNIX type file endings

170
00:06:57,889 --> 00:07:01,669
to the dost type file ending and this is

171
00:07:00,319 --> 00:07:03,379
something that would not work inside of

172
00:07:01,669 --> 00:07:05,780
I rule because it does a local file

173
00:07:03,379 --> 00:07:07,610
stuff and the reason why this is blocked

174
00:07:05,780 --> 00:07:11,150
out is because you don't want customers

175
00:07:07,610 --> 00:07:13,039
to break out of the I rule environment

176
00:07:11,150 --> 00:07:14,179
and take over the device in the first

177
00:07:13,039 --> 00:07:15,919
place and it would just complicate

178
00:07:14,180 --> 00:07:18,259
things it will break things and it

179
00:07:15,919 --> 00:07:21,250
wouldn't yeah so to simplify the

180
00:07:18,259 --> 00:07:23,000
language they're basically excluded okay

181
00:07:21,250 --> 00:07:25,460
tickle is return-oriented programming

182
00:07:23,000 --> 00:07:26,990
but it also has exception handling which

183
00:07:25,460 --> 00:07:29,029
means if an exception or cure you can

184
00:07:26,990 --> 00:07:31,849
catch it this is something that can

185
00:07:29,029 --> 00:07:33,800
really really ease up the situation if

186
00:07:31,849 --> 00:07:37,000
you're in trouble with this kind of

187
00:07:33,800 --> 00:07:39,409
injection I'll try to discuss that later

188
00:07:37,000 --> 00:07:41,840
so here's a simple script it doesn't

189
00:07:39,409 --> 00:07:44,089
redirect the HCP redirect to a page

190
00:07:41,840 --> 00:07:46,099
called hello world and it has an event

191
00:07:44,089 --> 00:07:47,870
called when when it's actually a command

192
00:07:46,099 --> 00:07:49,969
and he should be request is an argument

193
00:07:47,870 --> 00:07:52,729
and then there is a third argument which

194
00:07:49,969 --> 00:07:55,310
is the curly brace that opens up for a

195
00:07:52,729 --> 00:07:58,878
body argument with a HTTP redirect

196
00:07:55,310 --> 00:08:00,469
function okay I'm gonna go through the

197
00:07:58,879 --> 00:08:01,729
syntax of this language a lot because

198
00:08:00,469 --> 00:08:03,349
this vulnerability and what we're

199
00:08:01,729 --> 00:08:05,180
talking about here has to do with syntax

200
00:08:03,349 --> 00:08:06,589
so we need to understand the language in

201
00:08:05,180 --> 00:08:08,089
order to write the files and I'm

202
00:08:06,589 --> 00:08:10,400
thinking the people who are watching

203
00:08:08,089 --> 00:08:12,289
this on YouTube later they will want to

204
00:08:10,400 --> 00:08:18,020
learn this specifically because you want

205
00:08:12,289 --> 00:08:20,300
to write secure code if you're a pen

206
00:08:18,020 --> 00:08:22,669
tester or if you are a bug bounty

207
00:08:20,300 --> 00:08:25,129
specialist then you will be want to

208
00:08:22,669 --> 00:08:27,349
wanting to looking at for this the

209
00:08:25,129 --> 00:08:29,330
yellow Mart server header this is a high

210
00:08:27,349 --> 00:08:31,938
GPA response header that you normally

211
00:08:29,330 --> 00:08:33,740
find in a file like the five favicon

212
00:08:31,939 --> 00:08:36,320
file it's presented every time there is

213
00:08:33,740 --> 00:08:38,180
HTTP call a color redirect so the code

214
00:08:36,320 --> 00:08:40,219
so before is redirecting to hello world

215
00:08:38,179 --> 00:08:42,649
and it looks like this in the response

216
00:08:40,219 --> 00:08:44,180
and it's a server colon big-ip because

217
00:08:42,649 --> 00:08:46,399
the big IP responded to your request

218
00:08:44,179 --> 00:08:47,930
this indicates to an attacker that this

219
00:08:46,399 --> 00:08:49,520
is in a big IP device and that's

220
00:08:47,930 --> 00:08:50,969
something that you as an attacker might

221
00:08:49,520 --> 00:08:55,510
be looking for

222
00:08:50,970 --> 00:08:57,010
essentially we do this with every HTTP

223
00:08:55,510 --> 00:09:01,060
server in the world that we could find

224
00:08:57,010 --> 00:09:05,439
and we produce this beautiful map so

225
00:09:01,060 --> 00:09:08,140
this is the planet we live on and I want

226
00:09:05,440 --> 00:09:10,209
to use this map to emphasize the gravity

227
00:09:08,140 --> 00:09:13,660
of this because this is a very popular

228
00:09:10,209 --> 00:09:15,579
product a lot of people use this and the

229
00:09:13,660 --> 00:09:17,370
colors you're seeing is responses we got

230
00:09:15,579 --> 00:09:19,959
from a request to the Save icon file

231
00:09:17,370 --> 00:09:21,970
when we try to reach that HTTP server

232
00:09:19,959 --> 00:09:24,099
well it said big IP in the answer and

233
00:09:21,970 --> 00:09:25,959
there's a lot in the US but there's a

234
00:09:24,100 --> 00:09:29,339
lot of the Europe's as well especially

235
00:09:25,959 --> 00:09:34,479
in in Germany and it's big in Japan

236
00:09:29,339 --> 00:09:37,779
these devices protect and and serve web

237
00:09:34,480 --> 00:09:39,700
requests of different kinds to to

238
00:09:37,779 --> 00:09:42,010
organizations worldwide essentially as

239
00:09:39,700 --> 00:09:44,019
you can see and there's loads of them

240
00:09:42,010 --> 00:09:45,459
which means there's loads of arrows and

241
00:09:44,019 --> 00:09:47,890
loads of configurations and loads of

242
00:09:45,459 --> 00:09:49,420
complexity and that means it's very hard

243
00:09:47,890 --> 00:09:51,490
to make an outreach even for a secure

244
00:09:49,420 --> 00:09:53,500
and f5 combined to reach all these

245
00:09:51,490 --> 00:09:55,089
people who are doing this and tell them

246
00:09:53,500 --> 00:10:01,260
this is how I write the correct rules

247
00:09:55,089 --> 00:10:05,320
for this ok so let's talk about syntax

248
00:10:01,260 --> 00:10:06,910
tickle or TCL tickle support tickle

249
00:10:05,320 --> 00:10:08,649
supports argument substitution that

250
00:10:06,910 --> 00:10:11,469
means that the arguments are being

251
00:10:08,649 --> 00:10:12,070
handled by the interpreter prior to

252
00:10:11,470 --> 00:10:14,680
execution

253
00:10:12,070 --> 00:10:15,730
that's a nonsensical censored sentence

254
00:10:14,680 --> 00:10:19,390
for a lot of people here so I'm gonna

255
00:10:15,730 --> 00:10:21,579
show some examples usually in a

256
00:10:19,390 --> 00:10:24,779
programming language when you write a

257
00:10:21,579 --> 00:10:28,949
string you surround it with quotes

258
00:10:24,779 --> 00:10:33,100
number one line here shows quotes in

259
00:10:28,949 --> 00:10:37,060
tickle or in arrows you do not do that

260
00:10:33,100 --> 00:10:39,490
because it's you surround your strings

261
00:10:37,060 --> 00:10:41,319
with quotes you also make that line

262
00:10:39,490 --> 00:10:43,540
executable I'm going to explain that in

263
00:10:41,320 --> 00:10:46,600
much detail later it's surrounded with

264
00:10:43,540 --> 00:10:48,399
brackets that's the hardpack 'its you

265
00:10:46,600 --> 00:10:50,320
make that line executable you make that

266
00:10:48,399 --> 00:10:52,990
into something that will execute if you

267
00:10:50,320 --> 00:10:55,899
surround it with braces like the one you

268
00:10:52,990 --> 00:10:57,940
got on your teeth or these guys then you

269
00:10:55,899 --> 00:10:59,829
have a string so number three is the

270
00:10:57,940 --> 00:11:01,420
correct way of handling strings and this

271
00:10:59,829 --> 00:11:03,279
is important to remember every time

272
00:11:01,420 --> 00:11:04,510
you're handing a string do it inside of

273
00:11:03,279 --> 00:11:07,839
braces

274
00:11:04,510 --> 00:11:09,639
and you can also do uncoated arguments

275
00:11:07,839 --> 00:11:12,190
which is an argument to a function like

276
00:11:09,639 --> 00:11:15,459
the command here that does not have any

277
00:11:12,190 --> 00:11:17,199
of these and that can end up in various

278
00:11:15,459 --> 00:11:19,180
states sometimes it's safe and sometimes

279
00:11:17,199 --> 00:11:22,449
it's unsafe and I'll try to give example

280
00:11:19,180 --> 00:11:24,040
so when it switch and it's kind of hard

281
00:11:22,449 --> 00:11:28,269
to keep track of so use braces when you

282
00:11:24,040 --> 00:11:30,459
can so what happens if you have coded

283
00:11:28,269 --> 00:11:33,490
evaluation there is a document called

284
00:11:30,459 --> 00:11:35,979
the Decalogue and it was written in the

285
00:11:33,490 --> 00:11:37,420
90s or from the developers article when

286
00:11:35,980 --> 00:11:39,339
they started defining the language and

287
00:11:37,420 --> 00:11:41,410
it's the rules of substitution it's the

288
00:11:39,339 --> 00:11:44,320
rules of how the language is supposed to

289
00:11:41,410 --> 00:11:45,910
be interpreted so initially a script is

290
00:11:44,320 --> 00:11:47,410
running and it's being parts and the

291
00:11:45,910 --> 00:11:49,719
first thing it looks for is the command

292
00:11:47,410 --> 00:11:52,000
which is the first word on the line

293
00:11:49,720 --> 00:11:54,279
before space and then you have the

294
00:11:52,000 --> 00:11:56,350
argument and the argument here is quoted

295
00:11:54,279 --> 00:11:59,949
in this example if there is a quote

296
00:11:56,350 --> 00:12:02,290
around the argument then the tickle

297
00:11:59,949 --> 00:12:05,139
interpreter will replace the content of

298
00:12:02,290 --> 00:12:06,939
that argument with something so if the

299
00:12:05,139 --> 00:12:08,829
content contains a variable that

300
00:12:06,940 --> 00:12:11,860
variable will be resolved if that line

301
00:12:08,829 --> 00:12:13,899
actually contains in executing thing

302
00:12:11,860 --> 00:12:15,940
like the heart bracket we assault number

303
00:12:13,899 --> 00:12:18,459
two in the list then it would execute

304
00:12:15,940 --> 00:12:21,339
that prior to running the function that

305
00:12:18,459 --> 00:12:24,189
it arguments to so inside of braces

306
00:12:21,339 --> 00:12:25,839
inside of brackets if a word contains an

307
00:12:24,190 --> 00:12:27,610
open bracket then the ticular performs

308
00:12:25,839 --> 00:12:29,589
command substitution this is exactly

309
00:12:27,610 --> 00:12:31,420
what happens when you do backticks in

310
00:12:29,589 --> 00:12:35,170
bash I think that makes more sense to

311
00:12:31,420 --> 00:12:37,269
think of in that way so as an attacker

312
00:12:35,170 --> 00:12:41,130
we want to use brackets and we want to

313
00:12:37,269 --> 00:12:42,699
look for cases where quotes are used so

314
00:12:41,130 --> 00:12:44,980
ticular injections

315
00:12:42,699 --> 00:12:47,560
essentially is just like when Bart

316
00:12:44,980 --> 00:12:49,810
Simpson calls up MO and asked if L is

317
00:12:47,560 --> 00:12:51,910
there and he says L hoo yeah you know

318
00:12:49,810 --> 00:12:53,680
the owl named coholic in the last name

319
00:12:51,910 --> 00:12:54,969
and he's hold on who's alcoholic is

320
00:12:53,680 --> 00:12:56,349
there any alcoholics here and everyone

321
00:12:54,970 --> 00:12:59,699
laughs because obviously everyone's an

322
00:12:56,350 --> 00:13:02,920
alcoholic in his bar and and that means

323
00:12:59,699 --> 00:13:04,449
contextualizing something that he

324
00:13:02,920 --> 00:13:06,849
doesn't really understand the concept of

325
00:13:04,449 --> 00:13:09,010
it yet but once it comes together he

326
00:13:06,850 --> 00:13:14,649
realizes that is is made a fool of and

327
00:13:09,010 --> 00:13:16,869
everyone laughs at him so what happens

328
00:13:14,649 --> 00:13:19,309
if you have own uncoded

329
00:13:16,869 --> 00:13:21,559
arguments this is an interesting case

330
00:13:19,309 --> 00:13:22,399
because uncoated arguments can be

331
00:13:21,559 --> 00:13:24,199
treated differently by different

332
00:13:22,399 --> 00:13:26,029
functions functions here are Kamal

333
00:13:24,199 --> 00:13:29,059
commands because this is one of the

334
00:13:26,029 --> 00:13:31,539
first script languages if you have a

335
00:13:29,059 --> 00:13:34,669
number one line here there is after

336
00:13:31,539 --> 00:13:36,350
that's like sleep in any other language

337
00:13:34,669 --> 00:13:38,419
it says waits one second and then it

338
00:13:36,350 --> 00:13:40,309
runs whatever is in body

339
00:13:38,419 --> 00:13:42,279
so if body contains something executable

340
00:13:40,309 --> 00:13:45,049
it will run it or provide a syntax error

341
00:13:42,279 --> 00:13:46,759
while it's the same thing it has a body

342
00:13:45,049 --> 00:13:48,889
argument so every time you do a while

343
00:13:46,759 --> 00:13:51,249
loop it goes on forever in this case

344
00:13:48,889 --> 00:13:53,749
wild one then it executes body forever

345
00:13:51,249 --> 00:13:56,600
its statements can be trick too into

346
00:13:53,749 --> 00:13:58,819
executing something as well and switch

347
00:13:56,600 --> 00:14:03,259
statements and so on I'll show a full

348
00:13:58,819 --> 00:14:05,089
list of those later but now you know

349
00:14:03,259 --> 00:14:08,869
that there could be body arguments to

350
00:14:05,089 --> 00:14:10,100
something okay there could also in in

351
00:14:08,869 --> 00:14:12,799
the body argument you could also have

352
00:14:10,100 --> 00:14:15,289
quotes so in this case this is it a

353
00:14:12,799 --> 00:14:17,089
prior art collected from the analytical

354
00:14:15,289 --> 00:14:18,470
wiki this has been around for a long

355
00:14:17,089 --> 00:14:19,819
time but very few people have read it

356
00:14:18,470 --> 00:14:25,339
and this is why I'm here to inform you

357
00:14:19,819 --> 00:14:27,139
okay if the argument to catch which has

358
00:14:25,339 --> 00:14:28,999
a body argument catches catching

359
00:14:27,139 --> 00:14:31,309
exceptions if the body argument the

360
00:14:28,999 --> 00:14:33,049
catch is starting with quotes then those

361
00:14:31,309 --> 00:14:34,789
codes will be or the inside of those

362
00:14:33,049 --> 00:14:36,829
codes will be command substituted and

363
00:14:34,789 --> 00:14:40,519
then catch will execute whatever it's

364
00:14:36,829 --> 00:14:42,199
inside there so the order of things

365
00:14:40,519 --> 00:14:44,569
what's gonna happen when this is running

366
00:14:42,199 --> 00:14:46,909
is I set variable to error which is a

367
00:14:44,569 --> 00:14:52,579
function or a command and it has the

368
00:14:46,909 --> 00:14:55,249
argument hold this will happen so the

369
00:14:52,579 --> 00:14:56,839
interpreter will instead of running

370
00:14:55,249 --> 00:14:58,629
catch will first replace whatever's

371
00:14:56,839 --> 00:15:02,359
inside of the quote so it will replace

372
00:14:58,629 --> 00:15:05,359
variable with heart bracket error pod

373
00:15:02,359 --> 00:15:07,669
okay and then it will actually execute

374
00:15:05,359 --> 00:15:09,559
pwned or error-prone and typo'd on the

375
00:15:07,669 --> 00:15:12,319
screen prior to running puts and

376
00:15:09,559 --> 00:15:14,149
catching the herb which is a bit

377
00:15:12,319 --> 00:15:16,909
confusing to some and I've seen exactly

378
00:15:14,149 --> 00:15:18,679
this line catch and then quote in a lot

379
00:15:16,909 --> 00:15:21,799
of scripts out there because if I rules

380
00:15:18,679 --> 00:15:23,569
there is a there's a community then you

381
00:15:21,799 --> 00:15:25,999
go to a site called dev central the ref

382
00:15:23,569 --> 00:15:27,498
fiver or comm sorry that's pretty

383
00:15:25,999 --> 00:15:29,539
brilliant it's an open community

384
00:15:27,499 --> 00:15:30,740
everyone helps out but sometimes people

385
00:15:29,539 --> 00:15:32,810
provide examples

386
00:15:30,740 --> 00:15:34,760
dangerous and this can always happen you

387
00:15:32,810 --> 00:15:36,920
know that happens on stackoverflow as

388
00:15:34,760 --> 00:15:38,360
well but we need to talk about this nose

389
00:15:36,920 --> 00:15:39,649
so that people who actually start

390
00:15:38,360 --> 00:15:41,120
informing each other or they're the

391
00:15:39,649 --> 00:15:44,089
problems you can run into if you do this

392
00:15:41,120 --> 00:15:45,560
on dev central you can download a lot of

393
00:15:44,089 --> 00:15:46,940
code snippet examples that people are

394
00:15:45,560 --> 00:15:48,589
using when they get started with this

395
00:15:46,940 --> 00:15:50,899
and a lot of those examples contains

396
00:15:48,589 --> 00:15:52,520
exactly that catch quote something which

397
00:15:50,899 --> 00:15:54,589
is very very dangerous because anything

398
00:15:52,520 --> 00:15:59,980
inside a variable if that's user control

399
00:15:54,589 --> 00:16:03,620
can lead to execution here's a list of

400
00:15:59,980 --> 00:16:05,779
functions or commands this is the list

401
00:16:03,620 --> 00:16:08,540
of commands that has body arguments and

402
00:16:05,779 --> 00:16:11,240
all of these do some kind of evaluation

403
00:16:08,540 --> 00:16:13,099
or what's running and essentially this

404
00:16:11,240 --> 00:16:15,830
is the majority of the language in the

405
00:16:13,100 --> 00:16:18,050
end I might be missing some I might be

406
00:16:15,830 --> 00:16:19,790
in having added some that are wrong but

407
00:16:18,050 --> 00:16:22,250
essentially these are the ones that has

408
00:16:19,790 --> 00:16:24,290
body functions that I could find and all

409
00:16:22,250 --> 00:16:26,870
of these you have to take care to look

410
00:16:24,290 --> 00:16:28,640
at arguments and not use quotes in the

411
00:16:26,870 --> 00:16:32,450
arguments of any of these because that

412
00:16:28,640 --> 00:16:33,830
means execution okay sometimes it can

413
00:16:32,450 --> 00:16:35,390
also be dangerous to not use any

414
00:16:33,830 --> 00:16:37,370
quotation at all because if you have

415
00:16:35,390 --> 00:16:39,829
like you saw before an argument without

416
00:16:37,370 --> 00:16:40,190
quotes then it will lead to execution as

417
00:16:39,829 --> 00:16:45,260
well

418
00:16:40,190 --> 00:16:47,600
in the body then there's these three

419
00:16:45,260 --> 00:16:49,730
guys everyone who says a hacker

420
00:16:47,600 --> 00:16:52,160
conference usually knows that eval or

421
00:16:49,730 --> 00:16:53,810
evaluation is dangerous evil is a

422
00:16:52,160 --> 00:16:55,279
function that actually just evaluates

423
00:16:53,810 --> 00:16:57,829
whatever is going on and executes it

424
00:16:55,279 --> 00:17:01,579
it's it's dangerous but people still do

425
00:16:57,829 --> 00:17:02,689
it so let's talk about that eval could

426
00:17:01,579 --> 00:17:04,459
be said to be evil

427
00:17:02,690 --> 00:17:07,130
you can probably avoid using eval and

428
00:17:04,459 --> 00:17:09,050
you can probably be good without it subs

429
00:17:07,130 --> 00:17:10,370
does substitution it's actually safer

430
00:17:09,050 --> 00:17:12,379
way of doing the same thing because it

431
00:17:10,369 --> 00:17:14,178
subs do you have an option that says

432
00:17:12,380 --> 00:17:16,490
there's no commands and that means that

433
00:17:14,179 --> 00:17:17,959
whatever is in the arguments it will not

434
00:17:16,490 --> 00:17:23,720
look for hard brackets and it will not

435
00:17:17,959 --> 00:17:27,140
execute the the code in there if you do

436
00:17:23,720 --> 00:17:28,850
the argument - no comments okay expert

437
00:17:27,140 --> 00:17:31,580
is a function you cannot live without

438
00:17:28,850 --> 00:17:34,610
because expert is math expert is where

439
00:17:31,580 --> 00:17:36,860
you perform addition between two things

440
00:17:34,610 --> 00:17:40,399
so if I want to add one plus one I do it

441
00:17:36,860 --> 00:17:41,919
with expert expert means to do any type

442
00:17:40,400 --> 00:17:44,680
of aromatics

443
00:17:41,920 --> 00:17:46,090
and expert also does command evaluation

444
00:17:44,680 --> 00:17:47,830
because in maths you need to figure out

445
00:17:46,090 --> 00:17:49,240
what's going on before you can add

446
00:17:47,830 --> 00:17:51,220
something so you need to actually run

447
00:17:49,240 --> 00:17:56,440
the method run the functions in the

448
00:17:51,220 --> 00:17:59,050
argument list prior to prior to making

449
00:17:56,440 --> 00:18:01,960
the math essentially and that's an

450
00:17:59,050 --> 00:18:03,639
important in from piece of information

451
00:18:01,960 --> 00:18:08,590
there so expert can be very very

452
00:18:03,640 --> 00:18:10,690
dangerous too here's the script I want

453
00:18:08,590 --> 00:18:13,149
to show you some coding examples of how

454
00:18:10,690 --> 00:18:18,130
it can go wrong without us knowing it so

455
00:18:13,150 --> 00:18:21,070
I'm using an open source snippet called

456
00:18:18,130 --> 00:18:24,340
the HS SR it's a guy called mark did a

457
00:18:21,070 --> 00:18:26,379
hyper super sideband requester that tool

458
00:18:24,340 --> 00:18:28,389
is used to do client requests to

459
00:18:26,380 --> 00:18:29,860
back-end servers it's pretty awesome and

460
00:18:28,390 --> 00:18:31,630
it's the most downloaded piece of code

461
00:18:29,860 --> 00:18:33,639
that I've seen I think it's the most

462
00:18:31,630 --> 00:18:35,440
people downloaded piece of code on death

463
00:18:33,640 --> 00:18:37,900
central which means it's the most

464
00:18:35,440 --> 00:18:40,660
popular open source snippet there is in

465
00:18:37,900 --> 00:18:43,270
this community and it's slightly

466
00:18:40,660 --> 00:18:46,180
vulnerable and I'm using it as an

467
00:18:43,270 --> 00:18:48,100
example because they have some kind of

468
00:18:46,180 --> 00:18:50,140
defense mechanism that I'm going to soon

469
00:18:48,100 --> 00:18:52,449
so what's happening here is that you're

470
00:18:50,140 --> 00:18:54,670
running set status and you're calling

471
00:18:52,450 --> 00:18:56,800
this function essentially and you're

472
00:18:54,670 --> 00:18:58,810
putting the URI in there URI is derived

473
00:18:56,800 --> 00:19:00,909
of except language which is a header

474
00:18:58,810 --> 00:19:02,980
that the user can set so the user can

475
00:19:00,910 --> 00:19:04,810
say instead of E and that GB or

476
00:19:02,980 --> 00:19:07,000
something that's your linguistic

477
00:19:04,810 --> 00:19:08,710
preferences they could set it to

478
00:19:07,000 --> 00:19:11,980
something malicious that would go into

479
00:19:08,710 --> 00:19:15,870
the you or I hate users are layer does

480
00:19:11,980 --> 00:19:20,890
this there is a highlighted line here

481
00:19:15,870 --> 00:19:23,229
where it's trying trying to do a MMS

482
00:19:20,890 --> 00:19:27,460
lookup or a DNS lookup of the hostname

483
00:19:23,230 --> 00:19:32,650
part of that the hostname part of that

484
00:19:27,460 --> 00:19:35,770
URL if you do that like this here's an

485
00:19:32,650 --> 00:19:37,420
eval that then quotes that means that

486
00:19:35,770 --> 00:19:39,160
the content will be resolved inside of

487
00:19:37,420 --> 00:19:43,380
the host name that the user now controls

488
00:19:39,160 --> 00:19:46,000
because it's in the accept header then

489
00:19:43,380 --> 00:19:48,520
execution will occur when the eval runs

490
00:19:46,000 --> 00:19:50,500
and the user does not even have to write

491
00:19:48,520 --> 00:19:51,850
a hard bracket to to perform execution

492
00:19:50,500 --> 00:19:53,560
because they're already in the line of

493
00:19:51,850 --> 00:19:55,850
execution which means that all you have

494
00:19:53,560 --> 00:19:57,830
to do is type semicolon and then you

495
00:19:55,850 --> 00:20:01,280
tinu right tickle code as they want and

496
00:19:57,830 --> 00:20:02,389
they're inside of the device the reason

497
00:20:01,280 --> 00:20:04,610
why I'm showing this piece of code is

498
00:20:02,390 --> 00:20:06,770
it's actually not vulnerable prior to

499
00:20:04,610 --> 00:20:08,418
this there is a rig X that filters out

500
00:20:06,770 --> 00:20:11,299
unwanted characters which means that

501
00:20:08,419 --> 00:20:13,970
essentially it's sanitized in a way you

502
00:20:11,299 --> 00:20:16,280
can make this line break you can make

503
00:20:13,970 --> 00:20:17,570
the script fault but you cannot make it

504
00:20:16,280 --> 00:20:19,250
execute and that's why I want to show

505
00:20:17,570 --> 00:20:23,260
this particular example I tried to be

506
00:20:19,250 --> 00:20:26,990
responsible about this okay so

507
00:20:23,260 --> 00:20:28,850
exploitation what you have to do as an

508
00:20:26,990 --> 00:20:30,620
attacker to do this and also as a

509
00:20:28,850 --> 00:20:32,120
defender I guess is identified the

510
00:20:30,620 --> 00:20:34,610
fields there it's going to be used and

511
00:20:32,120 --> 00:20:35,989
substance is substituted by I rule so

512
00:20:34,610 --> 00:20:37,549
imagine that you're an organization

513
00:20:35,990 --> 00:20:39,380
that's actually using AI rules maybe you

514
00:20:37,549 --> 00:20:41,179
actually want to make a list of all the

515
00:20:39,380 --> 00:20:43,490
valid user inputs and see where do they

516
00:20:41,179 --> 00:20:45,950
go if you make that list and you have a

517
00:20:43,490 --> 00:20:52,309
better chance of defending yourself that

518
00:20:45,950 --> 00:20:54,620
is against these type of attacks okay so

519
00:20:52,309 --> 00:20:57,500
as an attacker you want to inject ticka

520
00:20:54,620 --> 00:20:59,780
code or irulu code in to a request in

521
00:20:57,500 --> 00:21:01,909
any type of field that you can think of

522
00:20:59,780 --> 00:21:05,178
and see if that code is actually running

523
00:21:01,909 --> 00:21:07,159
coming back to you and after you're done

524
00:21:05,179 --> 00:21:08,840
this you try to identify any other type

525
00:21:07,159 --> 00:21:10,820
of external resource that I can pivot to

526
00:21:08,840 --> 00:21:14,449
get terminal ax permanent access into

527
00:21:10,820 --> 00:21:17,450
this okay here's the video see if this

528
00:21:14,450 --> 00:21:18,799
works it does so here's the HTTP request

529
00:21:17,450 --> 00:21:20,659
on top you see a regular web browser

530
00:21:18,799 --> 00:21:23,570
this is Internet Explorer and below you

531
00:21:20,659 --> 00:21:25,429
see burp burp is a tool that's

532
00:21:23,570 --> 00:21:27,530
essentially acting as a proxy and now we

533
00:21:25,429 --> 00:21:30,320
can make changes to the request before

534
00:21:27,530 --> 00:21:31,970
we send it to the server so here's a few

535
00:21:30,320 --> 00:21:34,158
headers that's interesting for us to

536
00:21:31,970 --> 00:21:36,409
look at there is a jet line the HTTP

537
00:21:34,159 --> 00:21:38,059
version number there is the user agent

538
00:21:36,409 --> 00:21:39,380
we just passed there is the accept

539
00:21:38,059 --> 00:21:43,309
language that we exploded in the past

540
00:21:39,380 --> 00:21:45,350
and there's accept line which looks at

541
00:21:43,309 --> 00:21:50,120
what type of requests or whatever

542
00:21:45,350 --> 00:21:52,520
responses we accept etc and and there is

543
00:21:50,120 --> 00:21:54,530
plenty of injection possibilities we

544
00:21:52,520 --> 00:21:56,960
don't know now as an attacker what is

545
00:21:54,530 --> 00:22:01,370
vulnerable or not but we can get a hint

546
00:21:56,960 --> 00:22:02,840
so there is two cookies being set in in

547
00:22:01,370 --> 00:22:04,129
my client my client has two cookies if

548
00:22:02,840 --> 00:22:08,178
we look at the response it's actually is

549
00:22:04,130 --> 00:22:09,700
trying to set the word logged out into

550
00:22:08,179 --> 00:22:11,750
the a session ID and

551
00:22:09,700 --> 00:22:14,090
suspicious thing so that's an attacker

552
00:22:11,750 --> 00:22:17,270
what I want to do now is to send this

553
00:22:14,090 --> 00:22:18,830
request into the repeater Imbert and I

554
00:22:17,270 --> 00:22:21,860
can't tell you enough how much I love

555
00:22:18,830 --> 00:22:22,600
this tool but that's what not why I'm

556
00:22:21,860 --> 00:22:24,918
here

557
00:22:22,600 --> 00:22:27,678
so if you select this line with the a

558
00:22:24,919 --> 00:22:33,220
session ID and you actually replace that

559
00:22:27,679 --> 00:22:35,510
cookie value with a valid I rule line

560
00:22:33,220 --> 00:22:38,029
here I'm using hard brackets because

561
00:22:35,510 --> 00:22:40,658
that means execution I type TCP colon

562
00:22:38,029 --> 00:22:44,480
colon respond that will make a response

563
00:22:40,659 --> 00:22:49,190
prior to the HTTP header being sent and

564
00:22:44,480 --> 00:22:50,659
I use braces this is correct away then

565
00:22:49,190 --> 00:22:52,460
all of a sudden tada

566
00:22:50,659 --> 00:22:54,919
you see hello being executed there see

567
00:22:52,460 --> 00:22:56,840
hello it's actually coming prior to the

568
00:22:54,919 --> 00:23:00,380
HP request this means that I am in

569
00:22:56,840 --> 00:23:03,520
control of what's going on on the big IP

570
00:23:00,380 --> 00:23:05,929
device right now for my request okay I

571
00:23:03,520 --> 00:23:08,090
can also run a function called HTTP

572
00:23:05,929 --> 00:23:09,980
respond right now I'm getting the syntax

573
00:23:08,090 --> 00:23:12,139
wrong but usually that's not as

574
00:23:09,980 --> 00:23:13,669
effective as TCP respond because HTTP

575
00:23:12,140 --> 00:23:15,260
respond can only be done once per

576
00:23:13,669 --> 00:23:17,120
request and if someone else is already

577
00:23:15,260 --> 00:23:18,770
doing it I can't do it twice it will

578
00:23:17,120 --> 00:23:20,330
produce an error message in the log and

579
00:23:18,770 --> 00:23:23,059
someone we can actually detect that I'm

580
00:23:20,330 --> 00:23:24,860
trying to hack them as an attacker I

581
00:23:23,059 --> 00:23:28,399
don't want to do that so I'm using TCP

582
00:23:24,860 --> 00:23:31,870
respond which always works and this

583
00:23:28,399 --> 00:23:34,070
gives me a safe way of defining or

584
00:23:31,870 --> 00:23:35,899
determining if an input field is

585
00:23:34,070 --> 00:23:38,270
validated or not there is a command

586
00:23:35,899 --> 00:23:40,309
called info level zero as an attacker

587
00:23:38,270 --> 00:23:42,620
it's a brilliant command because it

588
00:23:40,309 --> 00:23:45,950
gives me the source code of the current

589
00:23:42,620 --> 00:23:47,360
context I'm in and like I don't even

590
00:23:45,950 --> 00:23:49,820
know what to compare that to that's a

591
00:23:47,360 --> 00:23:51,469
leftover from tickle I think that f5

592
00:23:49,820 --> 00:23:54,379
could actually remove that command

593
00:23:51,470 --> 00:23:55,760
without harming anyone here you can see

594
00:23:54,380 --> 00:23:57,980
the line that's dangerous I highlighted

595
00:23:55,760 --> 00:23:59,840
it now it's a substance cookie might be

596
00:23:57,980 --> 00:24:01,399
vulnerable and it does the substitution

597
00:23:59,840 --> 00:24:06,949
on that that's the dangerous line there

598
00:24:01,399 --> 00:24:08,799
I think like if you just review code

599
00:24:06,950 --> 00:24:12,080
like that it's pretty hard to determine

600
00:24:08,799 --> 00:24:13,399
what line is vulnerable unless you know

601
00:24:12,080 --> 00:24:15,949
something about this you need this

602
00:24:13,399 --> 00:24:17,959
information that I'm giving you right

603
00:24:15,950 --> 00:24:19,880
now in order to protect yourself because

604
00:24:17,960 --> 00:24:22,630
I see flaws everywhere now that I'm

605
00:24:19,880 --> 00:24:22,630
sorry look at it

606
00:24:22,970 --> 00:24:27,890
so how do we take it further as an

607
00:24:26,750 --> 00:24:29,660
attacker you usually want to elevate

608
00:24:27,890 --> 00:24:31,160
your access maybe or maybe not like how

609
00:24:29,660 --> 00:24:33,710
do we actually get persistent access in

610
00:24:31,160 --> 00:24:35,480
this right now we're in memory so we're

611
00:24:33,710 --> 00:24:37,250
inside of the interpreter which means

612
00:24:35,480 --> 00:24:39,380
it's pretty hard to detect us there is

613
00:24:37,250 --> 00:24:43,070
logging optional logging that the user

614
00:24:39,380 --> 00:24:45,260
can use or not it's a function itself an

615
00:24:43,070 --> 00:24:50,750
attacker wants to not be in the logs I

616
00:24:45,260 --> 00:24:51,890
guess to become persistent in memory for

617
00:24:50,750 --> 00:24:54,080
a longer time there's something called

618
00:24:51,890 --> 00:24:56,000
table and table is used for

619
00:24:54,080 --> 00:24:57,409
synchronizing a key value store so

620
00:24:56,000 --> 00:24:59,720
imagine you have a bunch of cookies and

621
00:24:57,410 --> 00:25:01,460
you want to store them in memory and

622
00:24:59,720 --> 00:25:03,590
synchronize those between devices this

623
00:25:01,460 --> 00:25:06,140
is one of the most profound and also

624
00:25:03,590 --> 00:25:07,610
features with big IP products because

625
00:25:06,140 --> 00:25:09,950
they are always synchronized and it's

626
00:25:07,610 --> 00:25:12,050
somehow magically always works and once

627
00:25:09,950 --> 00:25:13,250
this is synchronized as an attacker it's

628
00:25:12,050 --> 00:25:16,310
also interesting because that means

629
00:25:13,250 --> 00:25:18,560
means I get access to all instances if I

630
00:25:16,310 --> 00:25:21,230
can use the session table or inject into

631
00:25:18,560 --> 00:25:22,639
the session table the tation table

632
00:25:21,230 --> 00:25:25,250
syntax looks like this you can set

633
00:25:22,640 --> 00:25:28,040
lookup add replace that's the things you

634
00:25:25,250 --> 00:25:30,230
would probably want to do and that means

635
00:25:28,040 --> 00:25:33,490
if I'm as an attacker have an injection

636
00:25:30,230 --> 00:25:37,010
in a code that actually uses table

637
00:25:33,490 --> 00:25:38,750
anywhere then I can inject into that

638
00:25:37,010 --> 00:25:42,440
table and actually put code there that

639
00:25:38,750 --> 00:25:43,910
will execute once that user logs in or

640
00:25:42,440 --> 00:25:46,310
does something so let's say I have a

641
00:25:43,910 --> 00:25:48,500
user called admin and I want to get that

642
00:25:46,310 --> 00:25:50,659
users account literally you steal the

643
00:25:48,500 --> 00:25:52,310
cookie by doing a table lookup admin and

644
00:25:50,660 --> 00:25:55,760
get that cookie I could probably do that

645
00:25:52,310 --> 00:25:57,379
or I'll replace the admin cookie with

646
00:25:55,760 --> 00:25:59,270
more information that I want to use as

647
00:25:57,380 --> 00:26:03,650
an attacker this example I'm going to

648
00:25:59,270 --> 00:26:05,570
show now is a little bit complicated but

649
00:26:03,650 --> 00:26:08,300
I'll try to walk you through it as we go

650
00:26:05,570 --> 00:26:11,060
this is a service that does DNS lookups

651
00:26:08,300 --> 00:26:12,649
for you and once you do DNS lookups

652
00:26:11,060 --> 00:26:14,240
twice it's actually caching them so you

653
00:26:12,650 --> 00:26:16,100
don't have to do DNS lookups many times

654
00:26:14,240 --> 00:26:19,250
and I've stolen the line from hate Jesus

655
00:26:16,100 --> 00:26:20,840
or the does the DNS lookup you see you

656
00:26:19,250 --> 00:26:22,550
have an example that actually works so

657
00:26:20,840 --> 00:26:24,909
as an attacker I already know now that

658
00:26:22,550 --> 00:26:27,889
this is the field I'm looking for and

659
00:26:24,910 --> 00:26:30,410
I'm doing URL encoding that's important

660
00:26:27,890 --> 00:26:32,570
URL encoding means that it's replacing

661
00:26:30,410 --> 00:26:34,160
the values with hex here and now it's

662
00:26:32,570 --> 00:26:36,620
try to make now it's trying to make a

663
00:26:34,160 --> 00:26:38,240
DNS lookup on

664
00:26:36,620 --> 00:26:39,860
an empty string because that's what's

665
00:26:38,240 --> 00:26:41,870
returning from a TCP colon color

666
00:26:39,860 --> 00:26:50,149
response test and that takes some time

667
00:26:41,870 --> 00:26:52,100
so bear with me and yeah so different

668
00:26:50,150 --> 00:26:54,289
values need to be encoded differently

669
00:26:52,100 --> 00:26:56,959
this is a URL encoded value because it's

670
00:26:54,289 --> 00:26:58,220
on the on the request line so test is

671
00:26:56,960 --> 00:26:59,929
coming back from the server that means

672
00:26:58,220 --> 00:27:02,600
that we have an injection point the next

673
00:26:59,929 --> 00:27:04,159
thing we do is to check the syntax or

674
00:27:02,600 --> 00:27:06,199
check what kind of script we're running

675
00:27:04,159 --> 00:27:08,779
here so we're doing an info level zero

676
00:27:06,200 --> 00:27:11,299
now you're learning how to start

677
00:27:08,779 --> 00:27:12,740
building an attack I think in four

678
00:27:11,299 --> 00:27:19,970
levels zero gives us the context to

679
00:27:12,740 --> 00:27:22,159
where we are and as always the response

680
00:27:19,970 --> 00:27:23,779
takes time because now it's doing a DNS

681
00:27:22,159 --> 00:27:27,470
request of something empty in the

682
00:27:23,779 --> 00:27:29,929
background which is not a quick thing to

683
00:27:27,470 --> 00:27:34,010
do it takes exactly 120 seconds actually

684
00:27:29,929 --> 00:27:36,230
I forgot to press go there I think the

685
00:27:34,010 --> 00:27:37,730
timeout request is something controlled

686
00:27:36,230 --> 00:27:41,830
by a back-end feature that we will look

687
00:27:37,730 --> 00:27:45,230
into more later as well ah there we go

688
00:27:41,830 --> 00:27:46,520
so info level zero should give us a full

689
00:27:45,230 --> 00:27:48,380
list of the source code running on this

690
00:27:46,520 --> 00:27:50,149
device as an attacker we want to know

691
00:27:48,380 --> 00:27:53,049
what the code looks like because we want

692
00:27:50,149 --> 00:27:57,080
to exploit it further in this case oh

693
00:27:53,049 --> 00:27:59,059
sorry I'm scanning through the code for

694
00:27:57,080 --> 00:28:01,070
eval because I happen to know that eval

695
00:27:59,059 --> 00:28:02,928
is the the keyword for the bad thing but

696
00:28:01,070 --> 00:28:04,129
as an attacker you also do code

697
00:28:02,929 --> 00:28:06,409
reviewing here so you're reviewing

698
00:28:04,130 --> 00:28:09,200
what's going on and you see that there

699
00:28:06,409 --> 00:28:11,029
is two evals one is on the response from

700
00:28:09,200 --> 00:28:13,460
the table lookup and there's one is from

701
00:28:11,029 --> 00:28:15,320
the result line that's the one the one

702
00:28:13,460 --> 00:28:20,210
in the below there is the one I stole

703
00:28:15,320 --> 00:28:22,100
from HSS or and the one on top is the

704
00:28:20,210 --> 00:28:23,600
one that's looking for the cache it's

705
00:28:22,100 --> 00:28:26,059
looking for the cache is picking up the

706
00:28:23,600 --> 00:28:27,980
value and this means you don't have to

707
00:28:26,059 --> 00:28:30,139
have to understand all of this right now

708
00:28:27,980 --> 00:28:32,149
but this means essentially that I can

709
00:28:30,140 --> 00:28:34,100
inject something in both eval cases so

710
00:28:32,149 --> 00:28:36,049
once it's doing eval on the content of

711
00:28:34,100 --> 00:28:38,809
something on a table so I can inject

712
00:28:36,049 --> 00:28:41,840
something that will execute when someone

713
00:28:38,809 --> 00:28:43,549
else looks in the cache that's the same

714
00:28:41,840 --> 00:28:47,720
as overriding someone else's cookie for

715
00:28:43,549 --> 00:28:50,470
instance and since the injection point

716
00:28:47,720 --> 00:28:56,179
is inside of quotes

717
00:28:50,470 --> 00:28:57,679
then I can simply write semicolon in the

718
00:28:56,179 --> 00:28:59,990
beginning and this is why it's so hard

719
00:28:57,679 --> 00:29:01,760
to do input sanitization like usually

720
00:28:59,990 --> 00:29:03,950
you do input sanitization by saying oh

721
00:29:01,760 --> 00:29:06,140
let's remove all bad characters there is

722
00:29:03,950 --> 00:29:08,929
a lot of bad characters here or the

723
00:29:06,140 --> 00:29:12,050
first one would be spaced semicolon or a

724
00:29:08,929 --> 00:29:14,120
hard bracket that's the easiest so we're

725
00:29:12,050 --> 00:29:15,919
looking for localhost semicolon and then

726
00:29:14,120 --> 00:29:18,889
obvious writing in the line as if I was

727
00:29:15,920 --> 00:29:20,840
in the ticket file okay and right now

728
00:29:18,890 --> 00:29:22,880
I'm writing a line saying table sets

729
00:29:20,840 --> 00:29:24,290
that sub table cash so I'm overwrite any

730
00:29:22,880 --> 00:29:27,679
cash I know what it's name because I

731
00:29:24,290 --> 00:29:30,139
know the source I'm using the value

732
00:29:27,679 --> 00:29:31,850
local host and for the low value local

733
00:29:30,140 --> 00:29:35,000
host I'm doing it TCB colon colon

734
00:29:31,850 --> 00:29:37,250
respond owned so that's something I

735
00:29:35,000 --> 00:29:41,300
guess it could be doing XSS or whatever

736
00:29:37,250 --> 00:29:45,679
or something else and then I select that

737
00:29:41,300 --> 00:29:47,178
line and URL encoded eventually so that

738
00:29:45,679 --> 00:29:57,020
is V response will be running in that

739
00:29:47,179 --> 00:29:58,700
eval that I'm selecting there okay so

740
00:29:57,020 --> 00:30:01,280
now I'm running it without URL encoding

741
00:29:58,700 --> 00:30:03,920
and that's not good this will produce a

742
00:30:01,280 --> 00:30:05,960
syntax error in the device as a defender

743
00:30:03,920 --> 00:30:08,809
right now if you're looking into your

744
00:30:05,960 --> 00:30:10,490
log files your cm system somewhere it

745
00:30:08,809 --> 00:30:13,309
will say syntax error this is an

746
00:30:10,490 --> 00:30:16,580
indicator of an attack if you make CMM

747
00:30:13,309 --> 00:30:18,649
trees and look for syntax errors then

748
00:30:16,580 --> 00:30:20,720
you will actually know when people are

749
00:30:18,650 --> 00:30:22,910
successfully or about to successfully

750
00:30:20,720 --> 00:30:24,050
inject code in your into your device and

751
00:30:22,910 --> 00:30:27,440
that's something that's very good to do

752
00:30:24,050 --> 00:30:30,110
so right now I'm poisoning the cache by

753
00:30:27,440 --> 00:30:34,040
adding executable code into the value of

754
00:30:30,110 --> 00:30:35,389
localhost and right now just sets the

755
00:30:34,040 --> 00:30:37,100
string that is going to run later and

756
00:30:35,390 --> 00:30:40,340
the next time I make a request to

757
00:30:37,100 --> 00:30:42,709
localhost from the cache it says owned

758
00:30:40,340 --> 00:30:44,449
and this will occur to anyone who tries

759
00:30:42,710 --> 00:30:45,890
to make a request on localhost and this

760
00:30:44,450 --> 00:30:47,690
is how you become a stored

761
00:30:45,890 --> 00:30:49,070
man-in-the-middle this is a Mendel

762
00:30:47,690 --> 00:30:50,870
middle essentially because I'm stored in

763
00:30:49,070 --> 00:30:54,649
memory and a mental middle on other

764
00:30:50,870 --> 00:30:59,979
people's requests so that's one attack

765
00:30:54,650 --> 00:31:01,970
vector for for forgetting persistence

766
00:30:59,980 --> 00:31:03,230
there's something interesting about this

767
00:31:01,970 --> 00:31:04,190
piece of code because if I take this

768
00:31:03,230 --> 00:31:09,500
piece of code and I

769
00:31:04,190 --> 00:31:12,289
put it inside of the code viewer in in

770
00:31:09,500 --> 00:31:17,179
my big IP web interface there is

771
00:31:12,289 --> 00:31:19,220
something going on on line 17 then you

772
00:31:17,179 --> 00:31:21,919
see it's very colourful I don't like

773
00:31:19,220 --> 00:31:23,720
reading text I like colors but line 17

774
00:31:21,919 --> 00:31:25,879
is very colorful it says eval table

775
00:31:23,720 --> 00:31:28,850
lookup - sub table all this is written

776
00:31:25,879 --> 00:31:31,279
with colors if you look at line 21 it

777
00:31:28,850 --> 00:31:33,379
says evil and then quote and everything

778
00:31:31,279 --> 00:31:34,789
is blue and this indicates to me that

779
00:31:33,379 --> 00:31:36,620
the person who wrote this syntax

780
00:31:34,789 --> 00:31:37,940
highlighter does not completely

781
00:31:36,620 --> 00:31:40,399
understand the language because the

782
00:31:37,940 --> 00:31:43,009
moment you're using a quote it's exactly

783
00:31:40,399 --> 00:31:45,199
equivalent to using hard brackets they

784
00:31:43,009 --> 00:31:46,669
should be colored the same way so that

785
00:31:45,200 --> 00:31:48,470
you actually understand that this line

786
00:31:46,669 --> 00:31:52,850
is not safe this is executing something

787
00:31:48,470 --> 00:31:57,019
it's dangerous this is my fifth descent

788
00:31:52,850 --> 00:31:59,658
on on the colors there but yeah so other

789
00:31:57,019 --> 00:32:01,250
post exploitation possibilities where do

790
00:31:59,659 --> 00:32:03,049
you want to go from here scanning the

791
00:32:01,250 --> 00:32:05,179
internal network yes you want to do that

792
00:32:03,049 --> 00:32:06,559
because now you're having some kind of a

793
00:32:05,179 --> 00:32:08,419
man-in-the-middle situation you want to

794
00:32:06,559 --> 00:32:09,710
scan localhost yes you want to do that

795
00:32:08,419 --> 00:32:12,409
because your service is running locally

796
00:32:09,710 --> 00:32:15,860
and you want to attack internal

797
00:32:12,409 --> 00:32:20,990
resources using the f5 big IP device as

798
00:32:15,860 --> 00:32:22,758
a pivot and here's the print screen of a

799
00:32:20,990 --> 00:32:27,169
command called active node list - list

800
00:32:22,759 --> 00:32:28,429
lb : : server pool this line URL encoded

801
00:32:27,169 --> 00:32:30,559
when you run this it actually gives you

802
00:32:28,429 --> 00:32:33,320
a list of the internal servers that you

803
00:32:30,559 --> 00:32:35,178
are serving or that f5 is serving and

804
00:32:33,320 --> 00:32:36,860
this gives you an indication of one of

805
00:32:35,179 --> 00:32:39,470
the servers or the server network that

806
00:32:36,860 --> 00:32:41,418
you want to actually break into as an

807
00:32:39,470 --> 00:32:44,629
attacker maybe you're curious about this

808
00:32:41,419 --> 00:32:47,059
how do you connect to this guy well here

809
00:32:44,629 --> 00:32:49,969
is a snippet that actually does a port

810
00:32:47,059 --> 00:32:52,519
scan on that line so that's something

811
00:32:49,970 --> 00:32:55,009
you might want to copy later from this

812
00:32:52,519 --> 00:32:57,980
slides if you do this for each it's

813
00:32:55,009 --> 00:33:00,259
trying to go through FTP the web port

814
00:32:57,980 --> 00:33:02,330
and some other ports and it's trying to

815
00:33:00,259 --> 00:33:03,830
connect to this back-end courts and it's

816
00:33:02,330 --> 00:33:07,189
listing if it's open or close so this is

817
00:33:03,830 --> 00:33:10,908
essentially a one line or two maybe one

818
00:33:07,190 --> 00:33:11,899
line port scanner that it turns into so

819
00:33:10,909 --> 00:33:15,080
now we know something about the

820
00:33:11,899 --> 00:33:17,840
background device here imagine like it

821
00:33:15,080 --> 00:33:20,600
says 421 it's FTP that's usually not

822
00:33:17,840 --> 00:33:22,970
very safe so as an attacker I'm

823
00:33:20,600 --> 00:33:25,850
implementing my own FTP client obviously

824
00:33:22,970 --> 00:33:29,090
and this FTP client now does in a non

825
00:33:25,850 --> 00:33:30,830
anonymous login and that means receive

826
00:33:29,090 --> 00:33:33,080
two lines which is the banner lines and

827
00:33:30,830 --> 00:33:35,449
the login prompt you type in user

828
00:33:33,080 --> 00:33:37,158
nonnamous the password a @a and then

829
00:33:35,450 --> 00:33:40,370
once you're logged in it's actually says

830
00:33:37,159 --> 00:33:43,070
on the right hand side 2:30 user logged

831
00:33:40,370 --> 00:33:45,739
in and if you are a bank and you're

832
00:33:43,070 --> 00:33:47,720
running this device make sure to

833
00:33:45,740 --> 00:33:49,340
firewall it so it doesn't so it's not

834
00:33:47,720 --> 00:33:51,770
possible to do this type of connection

835
00:33:49,340 --> 00:33:53,928
because specifically for banks to use

836
00:33:51,770 --> 00:33:55,760
mainframe machines mainframe machines

837
00:33:53,929 --> 00:33:57,350
are usually control or sometimes

838
00:33:55,760 --> 00:33:58,908
controlled or FTP and that's something

839
00:33:57,350 --> 00:34:01,760
that could be very dangerous if that

840
00:33:58,909 --> 00:34:05,899
mainframe computer is exposed I hope

841
00:34:01,760 --> 00:34:07,158
that makes sense so here's the attack

842
00:34:05,899 --> 00:34:09,109
saying what it looks like I make a get

843
00:34:07,159 --> 00:34:11,780
request but inside of that get request

844
00:34:09,109 --> 00:34:13,549
I'm also adding something extra that's

845
00:34:11,780 --> 00:34:15,290
turns it into an FTP request in the

846
00:34:13,550 --> 00:34:16,940
backend there's an FTP response and

847
00:34:15,290 --> 00:34:18,529
results are being produced back to the

848
00:34:16,940 --> 00:34:20,750
browser and the attacker now knows that

849
00:34:18,530 --> 00:34:22,510
I can log into this FTP or download

850
00:34:20,750 --> 00:34:24,918
files

851
00:34:22,510 --> 00:34:27,320
here's another port scan I did

852
00:34:24,918 --> 00:34:28,190
unfortunately a bit smaller on localhost

853
00:34:27,320 --> 00:34:30,200
and this is interesting because

854
00:34:28,190 --> 00:34:33,139
localhost has some services that are

855
00:34:30,199 --> 00:34:35,118
unusual to me one is 666 I think that's

856
00:34:33,139 --> 00:34:38,720
the port for doom the game it's probably

857
00:34:35,119 --> 00:34:40,760
not do but and there's also one 8100

858
00:34:38,719 --> 00:34:42,230
which is some kind of a and nodejs

859
00:34:40,760 --> 00:34:44,060
service that I haven't investigated much

860
00:34:42,230 --> 00:34:47,149
66 was interesting to me because that

861
00:34:44,060 --> 00:34:52,369
service was running as root and the

862
00:34:47,149 --> 00:34:55,759
service is called MC PD and this looks

863
00:34:52,369 --> 00:34:57,950
weird I guess this is a very common

864
00:34:55,760 --> 00:35:00,290
command that runs internally once every

865
00:34:57,950 --> 00:35:02,990
minute or so and what the command does

866
00:35:00,290 --> 00:35:04,910
is that it makes it query all it queries

867
00:35:02,990 --> 00:35:08,209
everything from the NCPD system module

868
00:35:04,910 --> 00:35:10,368
system module is a very central module

869
00:35:08,210 --> 00:35:12,589
it's looks like a bit of a memory dump

870
00:35:10,369 --> 00:35:14,030
but it contains a list of of demons

871
00:35:12,589 --> 00:35:15,770
running on the device right now it

872
00:35:14,030 --> 00:35:17,450
doesn't do any you anything useful but

873
00:35:15,770 --> 00:35:21,170
this is the packet that you will pick up

874
00:35:17,450 --> 00:35:22,640
if you do a TCP dump on your f5 device

875
00:35:21,170 --> 00:35:23,570
on that port you will see this packet

876
00:35:22,640 --> 00:35:25,640
coming in over and over again so

877
00:35:23,570 --> 00:35:27,589
replaying that packet is something

878
00:35:25,640 --> 00:35:28,129
interesting it doesn't give us too many

879
00:35:27,589 --> 00:35:30,859
secrets

880
00:35:28,130 --> 00:35:31,100
so someone reverse-engineered a bit of

881
00:35:30,859 --> 00:35:33,020
this

882
00:35:31,100 --> 00:35:35,240
protocol and the results were

883
00:35:33,020 --> 00:35:39,890
interesting because MC PD is pretty

884
00:35:35,240 --> 00:35:42,080
powerful running his route and all this

885
00:35:39,890 --> 00:35:43,910
is the result of the reversing so there

886
00:35:42,080 --> 00:35:45,380
is a size indicator a sequence that it

887
00:35:43,910 --> 00:35:47,600
doesn't seem to care about much I don't

888
00:35:45,380 --> 00:35:49,340
know exactly why but you can put any

889
00:35:47,600 --> 00:35:53,390
value there every course ID always set

890
00:35:49,340 --> 00:35:55,910
to zero flag can't exactly remember the

891
00:35:53,390 --> 00:35:57,560
key is what type of request you're

892
00:35:55,910 --> 00:35:59,450
making if you're making a query all or

893
00:35:57,560 --> 00:36:01,840
query something specific or execute

894
00:35:59,450 --> 00:36:05,839
something you can execute things here

895
00:36:01,840 --> 00:36:07,310
actually I think that the web interface

896
00:36:05,840 --> 00:36:08,900
that you manage this device over

897
00:36:07,310 --> 00:36:11,540
communicates with the back-end service

898
00:36:08,900 --> 00:36:12,560
using this language and the query is

899
00:36:11,540 --> 00:36:13,970
that it's making when I'm clicking

900
00:36:12,560 --> 00:36:16,160
around the web interface I see all these

901
00:36:13,970 --> 00:36:17,660
packets coming and they are doing

902
00:36:16,160 --> 00:36:20,600
different types of queries and sometimes

903
00:36:17,660 --> 00:36:23,240
they execute commands there is a type

904
00:36:20,600 --> 00:36:27,020
field an attribute size and that's the

905
00:36:23,240 --> 00:36:28,939
size 12 the coming bytes the attribute

906
00:36:27,020 --> 00:36:31,160
name which is interesting because

907
00:36:28,940 --> 00:36:33,530
there's a bunch of modules I think there

908
00:36:31,160 --> 00:36:35,359
is more than a thousand modules maybe

909
00:36:33,530 --> 00:36:37,880
not so much but it's like hundreds of

910
00:36:35,360 --> 00:36:39,620
modules that you can query and get

911
00:36:37,880 --> 00:36:40,790
different information out of and I'm

912
00:36:39,620 --> 00:36:42,319
gonna give you a few examples for that

913
00:36:40,790 --> 00:36:44,630
and then there is attribute data if

914
00:36:42,320 --> 00:36:46,640
you're making a execution then yeah then

915
00:36:44,630 --> 00:36:49,220
you're doing this and essentially and

916
00:36:46,640 --> 00:36:50,990
the message this to me looks a bit like

917
00:36:49,220 --> 00:36:54,520
the SSH protocol I'm not gonna say

918
00:36:50,990 --> 00:36:54,520
anything more but it's very similar

919
00:36:55,600 --> 00:37:00,830
here's a request to the module that

920
00:36:59,360 --> 00:37:03,980
handles all the users I don't know if

921
00:37:00,830 --> 00:37:06,590
you can see this but on the third line

922
00:37:03,980 --> 00:37:08,930
of the heck stamp it says admin a few

923
00:37:06,590 --> 00:37:10,940
lines more down this is user which is

924
00:37:08,930 --> 00:37:12,620
user and then it says Willy which is

925
00:37:10,940 --> 00:37:16,850
William sir the value set up this

926
00:37:12,620 --> 00:37:18,770
machine for me and that command that I'm

927
00:37:16,850 --> 00:37:21,200
now running as an execution I'm

928
00:37:18,770 --> 00:37:23,120
injecting code into the server so that

929
00:37:21,200 --> 00:37:24,799
it runs something the sense a packet to

930
00:37:23,120 --> 00:37:25,220
localhost and gives the result back to

931
00:37:24,800 --> 00:37:27,640
me

932
00:37:25,220 --> 00:37:33,560
now gave me a full list of the users

933
00:37:27,640 --> 00:37:35,600
locally stored in the web admin UI

934
00:37:33,560 --> 00:37:38,890
there's no passwords as far as I can see

935
00:37:35,600 --> 00:37:38,890
but there's that

936
00:37:41,330 --> 00:37:49,870
here's an interesting one so here's a

937
00:37:45,530 --> 00:37:54,500
command that lists the source code of

938
00:37:49,870 --> 00:37:56,480
tickle some critical environment so TMS

939
00:37:54,500 --> 00:37:58,820
H this particular environment where you

940
00:37:56,480 --> 00:38:01,100
can do back in configuration remember I

941
00:37:58,820 --> 00:38:02,750
said something about the DNS lookup

942
00:38:01,100 --> 00:38:05,420
timeout that's something that you could

943
00:38:02,750 --> 00:38:07,430
figure in the TNS H as far as I know so

944
00:38:05,420 --> 00:38:10,310
it's a system running as root with

945
00:38:07,430 --> 00:38:12,080
tickle as an interpreter another

946
00:38:10,310 --> 00:38:13,190
interpreter than the iris this is not

947
00:38:12,080 --> 00:38:16,400
the same thing as an eye-roll

948
00:38:13,190 --> 00:38:18,440
i cannot run i rules from here but from

949
00:38:16,400 --> 00:38:20,900
MC pd i can run i rules i can actually

950
00:38:18,440 --> 00:38:25,130
change the bait versus query all to

951
00:38:20,900 --> 00:38:27,140
execute instead i run TMS age commands

952
00:38:25,130 --> 00:38:29,570
from here i think i have not done it but

953
00:38:27,140 --> 00:38:31,220
i think i can and if you look at the

954
00:38:29,570 --> 00:38:34,340
highlighted line on the right hand side

955
00:38:31,220 --> 00:38:39,189
it's a function called yet item local

956
00:38:34,340 --> 00:38:41,150
only that returns an eval evaluation of

957
00:38:39,190 --> 00:38:43,430
something long that i cannot pronounce

958
00:38:41,150 --> 00:38:45,320
and arguments that was supplied by the

959
00:38:43,430 --> 00:38:47,690
user is being evaluated this is a

960
00:38:45,320 --> 00:38:50,330
dangerous function and i'm pretty sure

961
00:38:47,690 --> 00:38:52,880
that this can be used to elevate to more

962
00:38:50,330 --> 00:38:55,400
privileges perhaps routes at some point

963
00:38:52,880 --> 00:38:56,960
I know it's vague at this point and I

964
00:38:55,400 --> 00:38:59,150
haven't had time to do the complete

965
00:38:56,960 --> 00:39:00,740
research on this but I think elevation

966
00:38:59,150 --> 00:39:02,120
would probably go through some of these

967
00:39:00,740 --> 00:39:04,819
scripts and this is something that I'm

968
00:39:02,120 --> 00:39:07,730
trying to work with f5 on 26 he has to

969
00:39:04,820 --> 00:39:09,890
make this code safe and I think there

970
00:39:07,730 --> 00:39:11,960
can be a lot done to separate the

971
00:39:09,890 --> 00:39:13,879
context so that for instance a socket

972
00:39:11,960 --> 00:39:17,440
cannot even be open to localhost that

973
00:39:13,880 --> 00:39:22,150
would be a pretty good start to avoid

974
00:39:17,440 --> 00:39:24,380
this kind of local privilege escalations

975
00:39:22,150 --> 00:39:26,840
so what we're dealing with here is an

976
00:39:24,380 --> 00:39:29,630
attack chain where I have first I rule

977
00:39:26,840 --> 00:39:32,240
access I query the mCP D I get a

978
00:39:29,630 --> 00:39:36,770
response like it executes some kind of

979
00:39:32,240 --> 00:39:37,850
MC PD command over 40m SH and do a TCL

980
00:39:36,770 --> 00:39:40,730
injection in them

981
00:39:37,850 --> 00:39:42,740
TM SH environment something something

982
00:39:40,730 --> 00:39:45,590
and then get local privileges I'm

983
00:39:42,740 --> 00:39:47,029
assuming I think this is the an attack

984
00:39:45,590 --> 00:39:49,220
pass to actually take permanent control

985
00:39:47,030 --> 00:39:52,010
of the device at this point I'm hoping

986
00:39:49,220 --> 00:39:54,919
that this will be fixed soon and that

987
00:39:52,010 --> 00:39:57,890
there will be a separation and

988
00:39:54,920 --> 00:40:00,350
keen on people not being harmed by this

989
00:39:57,890 --> 00:40:03,259
and I'm really really keen on trying to

990
00:40:00,350 --> 00:40:05,509
make sure that people understand how

991
00:40:03,260 --> 00:40:07,490
dangerous I rule access can be if

992
00:40:05,510 --> 00:40:09,800
someone else gets access and control of

993
00:40:07,490 --> 00:40:11,839
your I rules they can do really really

994
00:40:09,800 --> 00:40:13,520
bad things to your organization's they

995
00:40:11,840 --> 00:40:16,730
can listen to your traffic they can

996
00:40:13,520 --> 00:40:19,700
inject things and reroute traffic in

997
00:40:16,730 --> 00:40:23,869
ways that you would want to avoid I

998
00:40:19,700 --> 00:40:25,750
think okay so let's go as through a

999
00:40:23,869 --> 00:40:28,040
summary we have eleven minutes left

1000
00:40:25,750 --> 00:40:29,980
where we talk about detection because

1001
00:40:28,040 --> 00:40:32,960
defense is very important

1002
00:40:29,980 --> 00:40:36,170
TCL scan is a tool intended initially

1003
00:40:32,960 --> 00:40:38,390
for scanning for TCL injections in TCL

1004
00:40:36,170 --> 00:40:40,340
tools I did not write this tool but I

1005
00:40:38,390 --> 00:40:41,930
fixed it because it would utterly broken

1006
00:40:40,340 --> 00:40:43,940
it's written in rust and it takes a bit

1007
00:40:41,930 --> 00:40:46,609
of working to get running but once you

1008
00:40:43,940 --> 00:40:47,960
do you can run it on your trail if you

1009
00:40:46,609 --> 00:40:49,310
translate your eye rolls into pure

1010
00:40:47,960 --> 00:40:52,580
tickle which you can get a script I

1011
00:40:49,310 --> 00:40:55,759
provided in my github if you run this

1012
00:40:52,580 --> 00:40:57,109
tool you get highlights of all the lines

1013
00:40:55,760 --> 00:40:59,180
in the script that's dangerous or

1014
00:40:57,109 --> 00:41:00,710
perhaps dangerous warnings and danger

1015
00:40:59,180 --> 00:41:02,480
and that's something you want to

1016
00:41:00,710 --> 00:41:05,119
integrate into your kit if you're using

1017
00:41:02,480 --> 00:41:08,180
it for version control of Eros you want

1018
00:41:05,119 --> 00:41:09,950
to make sure that this tool is running

1019
00:41:08,180 --> 00:41:13,180
and shaking your lines because it will

1020
00:41:09,950 --> 00:41:15,379
detect most of the problems you have and

1021
00:41:13,180 --> 00:41:20,118
then you can get a bit of a spanking for

1022
00:41:15,380 --> 00:41:21,890
doing it wrong hopefully I have made a

1023
00:41:20,119 --> 00:41:24,350
tool that's being released today at

1024
00:41:21,890 --> 00:41:26,089
blackhat right now it's available in

1025
00:41:24,350 --> 00:41:28,670
burp suite if you have burp suite you go

1026
00:41:26,090 --> 00:41:31,700
to the BAP store the burp app store and

1027
00:41:28,670 --> 00:41:35,540
you search for I rule detection this

1028
00:41:31,700 --> 00:41:37,730
tool or I roll detector this tool will

1029
00:41:35,540 --> 00:41:39,590
try to replace every single field in a

1030
00:41:37,730 --> 00:41:42,290
request if you mark if you request and

1031
00:41:39,590 --> 00:41:44,330
you click right click and press Center

1032
00:41:42,290 --> 00:41:46,430
active scanner you'll get a report of

1033
00:41:44,330 --> 00:41:49,369
every type of field that actually can be

1034
00:41:46,430 --> 00:41:51,980
run for injection that causes the same

1035
00:41:49,369 --> 00:41:53,420
code to be running back to you and it's

1036
00:41:51,980 --> 00:41:54,770
essentially doing what I showed in the

1037
00:41:53,420 --> 00:41:57,470
slides previously but much more

1038
00:41:54,770 --> 00:41:59,060
automated and so far I found lots and

1039
00:41:57,470 --> 00:42:01,339
lots of floss doing this I just download

1040
00:41:59,060 --> 00:42:03,529
open source code don't review it at all

1041
00:42:01,340 --> 00:42:05,660
you just run it there and then I run

1042
00:42:03,530 --> 00:42:07,190
this at all and it just finds the bugs

1043
00:42:05,660 --> 00:42:09,649
for you if you're in bug bounty

1044
00:42:07,190 --> 00:42:11,750
this is a tool you're looking for if you

1045
00:42:09,650 --> 00:42:15,830
are on the defense side this is a tool

1046
00:42:11,750 --> 00:42:19,820
you're looking for okay so that's

1047
00:42:15,830 --> 00:42:21,560
available for free for you now unit

1048
00:42:19,820 --> 00:42:24,710
testing this is a tool I did not write

1049
00:42:21,560 --> 00:42:29,870
either a nice and Weejun guy did and

1050
00:42:24,710 --> 00:42:34,340
it's called testicle unfortunately I did

1051
00:42:29,870 --> 00:42:37,130
not choose that name so testicle if you

1052
00:42:34,340 --> 00:42:39,170
seen it out it's it's at all the where

1053
00:42:37,130 --> 00:42:40,880
you can do unit testing for your eye

1054
00:42:39,170 --> 00:42:42,770
roll see essentially you put up your eye

1055
00:42:40,880 --> 00:42:45,230
rolls hopefully they're short and easy

1056
00:42:42,770 --> 00:42:47,150
to read and you can use unit testing and

1057
00:42:45,230 --> 00:42:48,560
this can test your logic in the program

1058
00:42:47,150 --> 00:42:49,850
because there's so many bugs that are

1059
00:42:48,560 --> 00:42:51,770
not related to what I'm talking about

1060
00:42:49,850 --> 00:42:53,839
that you still want to catch like are

1061
00:42:51,770 --> 00:42:55,220
there infinite loops are there cases

1062
00:42:53,840 --> 00:42:57,740
where you get a connection timeout are

1063
00:42:55,220 --> 00:42:59,810
their errors bugs this tool fixes or

1064
00:42:57,740 --> 00:43:01,069
finds that for you pretty easily and

1065
00:42:59,810 --> 00:43:03,170
that's also something you can integrate

1066
00:43:01,070 --> 00:43:05,930
into a get hook when you're doing

1067
00:43:03,170 --> 00:43:07,700
version control of your scripts I was

1068
00:43:05,930 --> 00:43:09,350
contributing a bit to this added adding

1069
00:43:07,700 --> 00:43:12,439
cookie support and played around with

1070
00:43:09,350 --> 00:43:14,529
HTTP when I did I had a bit of a problem

1071
00:43:12,440 --> 00:43:19,670
because I was trying out this thing with

1072
00:43:14,530 --> 00:43:20,990
injections and this tool does not it

1073
00:43:19,670 --> 00:43:23,090
actually has a lot of injections in it

1074
00:43:20,990 --> 00:43:25,759
it does evil all the time and because

1075
00:43:23,090 --> 00:43:32,540
everyone does and so it also crashes if

1076
00:43:25,760 --> 00:43:36,350
you try to do that sorry so a summary

1077
00:43:32,540 --> 00:43:38,600
slide finally tickle is old and tried

1078
00:43:36,350 --> 00:43:40,339
language but it's loosely defined which

1079
00:43:38,600 --> 00:43:41,690
means the position is very important for

1080
00:43:40,340 --> 00:43:44,570
what you're doing the coding is even

1081
00:43:41,690 --> 00:43:47,300
more important it's easy to fool for an

1082
00:43:44,570 --> 00:43:49,100
attacker it's hard to get a variable

1083
00:43:47,300 --> 00:43:50,870
assignment the substitutions right it's

1084
00:43:49,100 --> 00:43:52,759
very hard to do it right read the

1085
00:43:50,870 --> 00:43:54,799
document called at the Decalogue read my

1086
00:43:52,760 --> 00:43:56,180
right paper released with this it will

1087
00:43:54,800 --> 00:43:58,040
help a lot and i'm also giving a

1088
00:43:56,180 --> 00:44:00,200
description on how to do code review

1089
00:43:58,040 --> 00:44:01,880
because the art of code review is not so

1090
00:44:00,200 --> 00:44:03,710
easy but there is ways you can search

1091
00:44:01,880 --> 00:44:05,690
for certain things so you search for

1092
00:44:03,710 --> 00:44:07,310
eval your search for subs and search for

1093
00:44:05,690 --> 00:44:10,910
expert that's the first thing you do

1094
00:44:07,310 --> 00:44:12,890
then you start looking at how our while

1095
00:44:10,910 --> 00:44:17,839
loops handle body arguments how are they

1096
00:44:12,890 --> 00:44:19,490
handled that sort of stuff take care to

1097
00:44:17,840 --> 00:44:21,050
use bracing on the body arguments or

1098
00:44:19,490 --> 00:44:24,049
things so if something has to

1099
00:44:21,050 --> 00:44:26,630
body argument use bracing used aural

1100
00:44:24,050 --> 00:44:29,510
detector to detect if there is any

1101
00:44:26,630 --> 00:44:31,310
injection possibilities it's a pretty

1102
00:44:29,510 --> 00:44:33,200
competent at this point I think there

1103
00:44:31,310 --> 00:44:34,520
can be more features added to it if you

1104
00:44:33,200 --> 00:44:37,730
want to contribute it's open source just

1105
00:44:34,520 --> 00:44:40,160
go ahead you can use tickle scan to

1106
00:44:37,730 --> 00:44:42,170
review the code automatically review the

1107
00:44:40,160 --> 00:44:43,970
code it's in cache everything so do

1108
00:44:42,170 --> 00:44:51,500
manual code review and know your shit

1109
00:44:43,970 --> 00:44:53,839
and use testicle to try the logic and if

1110
00:44:51,500 --> 00:44:55,910
you cannot do a code review admit it and

1111
00:44:53,840 --> 00:44:58,220
ask someone else like me to do it or you

1112
00:44:55,910 --> 00:44:59,960
know whatever company because you need

1113
00:44:58,220 --> 00:45:01,580
to look at what you're doing you're

1114
00:44:59,960 --> 00:45:03,500
responsible this is an advanced product

1115
00:45:01,580 --> 00:45:06,350
you can do it wrong don't do it wrong

1116
00:45:03,500 --> 00:45:09,550
and if you think you might be doing it

1117
00:45:06,350 --> 00:45:12,890
wrong ask someone else to do it for you

1118
00:45:09,550 --> 00:45:15,200
that's about my final slide I'm so happy

1119
00:45:12,890 --> 00:45:16,940
for your focus and for you being here

1120
00:45:15,200 --> 00:45:20,299
listening to this and I hope this

1121
00:45:16,940 --> 00:45:22,090
provided a new type of tool for your for

1122
00:45:20,300 --> 00:45:25,439
your future engagements thank you

1123
00:45:22,090 --> 00:45:25,439
[Applause]

1124
00:45:28,420 --> 00:45:33,200
to ask questions there's microphones in

1125
00:45:31,490 --> 00:45:39,049
the middle of the room please use those

1126
00:45:33,200 --> 00:45:41,299
microphones hey thank you for your

1127
00:45:39,050 --> 00:45:43,970
presentation I was wondering though if

1128
00:45:41,300 --> 00:45:45,710
you've looked at being able to steal a

1129
00:45:43,970 --> 00:45:47,618
cell certificates through the eye roll

1130
00:45:45,710 --> 00:45:52,070
injection are they exposed in that space

1131
00:45:47,619 --> 00:45:54,470
okay I did that yeah I think I ran an

1132
00:45:52,070 --> 00:45:56,090
MCP deep command once I hadn't

1133
00:45:54,470 --> 00:45:58,580
documented well but I did an MCB D

1134
00:45:56,090 --> 00:46:00,830
command once that gave me the private

1135
00:45:58,580 --> 00:46:03,410
keys I think and there might even be an

1136
00:46:00,830 --> 00:46:05,150
arrow command to that but I'm not

1137
00:46:03,410 --> 00:46:06,470
entirely sure but I'm but yeah you're

1138
00:46:05,150 --> 00:46:08,410
saying it's pretty sure you can do it

1139
00:46:06,470 --> 00:46:14,839
yeah thank you

1140
00:46:08,410 --> 00:46:16,069
yeah I got a nod from F fights my

1141
00:46:14,840 --> 00:46:17,840
question centers it around

1142
00:46:16,070 --> 00:46:19,790
sanitization it sounds like if you

1143
00:46:17,840 --> 00:46:21,170
sanitize all your input you know you

1144
00:46:19,790 --> 00:46:22,850
shouldn't trust anything from an

1145
00:46:21,170 --> 00:46:25,130
external user anyway if you sanitize

1146
00:46:22,850 --> 00:46:29,180
everybody not that you can't apply these

1147
00:46:25,130 --> 00:46:30,980
also you should be okay yeah I think

1148
00:46:29,180 --> 00:46:33,410
that's a really good way to go

1149
00:46:30,980 --> 00:46:36,050
sanitization goes a long way imagine

1150
00:46:33,410 --> 00:46:37,970
you're sanitizing the user agent the

1151
00:46:36,050 --> 00:46:41,600
user agent contains hard brackets it

1152
00:46:37,970 --> 00:46:42,980
contains semicolons like you can take

1153
00:46:41,600 --> 00:46:44,359
them away because then you're lying

1154
00:46:42,980 --> 00:46:48,350
about the user agent so that's it's

1155
00:46:44,359 --> 00:46:50,480
tricky you know it's like you can't do

1156
00:46:48,350 --> 00:46:52,850
it sometimes and please do so

1157
00:46:50,480 --> 00:46:57,830
sometimes you just need to avoid putting

1158
00:46:52,850 --> 00:46:59,960
things in dangerous positions - my

1159
00:46:57,830 --> 00:47:03,170
question is uh can you just use net can

1160
00:46:59,960 --> 00:47:04,420
as a poor net can't as a poor-man's burp

1161
00:47:03,170 --> 00:47:06,920
suite

1162
00:47:04,420 --> 00:47:08,300
yeah for sure I mean all this you can do

1163
00:47:06,920 --> 00:47:10,040
netiquette and sometimes actually do

1164
00:47:08,300 --> 00:47:13,100
these requests directly in that cat

1165
00:47:10,040 --> 00:47:14,810
definitely I guess you could probably

1166
00:47:13,100 --> 00:47:16,790
port these tools that I put out there to

1167
00:47:14,810 --> 00:47:20,859
just run directly without having burp in

1168
00:47:16,790 --> 00:47:24,080
the first place if that's what you want

1169
00:47:20,859 --> 00:47:26,060
hey thank you for this presentation did

1170
00:47:24,080 --> 00:47:28,430
you get to look at maybe the competing

1171
00:47:26,060 --> 00:47:31,100
product so a ten and then a flex

1172
00:47:28,430 --> 00:47:32,509
language I realized I was supposed to

1173
00:47:31,100 --> 00:47:33,830
repeat the questions did I look at

1174
00:47:32,510 --> 00:47:35,869
competing product like eight and an

1175
00:47:33,830 --> 00:47:37,700
eight flex language I did not I'm sorry

1176
00:47:35,869 --> 00:47:39,950
about that but I tried to focus on this

1177
00:47:37,700 --> 00:47:43,040
ts get this much out of it as possible

1178
00:47:39,950 --> 00:47:44,930
I am looking now and I'm about to look

1179
00:47:43,040 --> 00:47:46,970
and I've started to realize that this is

1180
00:47:44,930 --> 00:47:49,310
a thing complexity always creates

1181
00:47:46,970 --> 00:47:52,279
problems and yes there might be other

1182
00:47:49,310 --> 00:47:54,500
things there I have a few research

1183
00:47:52,280 --> 00:47:57,770
projects awaiting related to similar

1184
00:47:54,500 --> 00:48:04,430
products products that I cannot disclose

1185
00:47:57,770 --> 00:48:07,940
yet sorry but there will be more if you

1186
00:48:04,430 --> 00:48:09,799
have a wofe will it protect your bad eye

1187
00:48:07,940 --> 00:48:12,200
rules which one takes priority the eye

1188
00:48:09,800 --> 00:48:14,570
roll or the walls yeah it's a good

1189
00:48:12,200 --> 00:48:18,109
question I tried this with a wolf I I'm

1190
00:48:14,570 --> 00:48:21,470
not 100% certain but I think the I will

1191
00:48:18,109 --> 00:48:24,290
came first and then the wolf in in my

1192
00:48:21,470 --> 00:48:26,598
case and also the wolf at this point

1193
00:48:24,290 --> 00:48:28,400
does not have rules for these type of

1194
00:48:26,599 --> 00:48:32,599
injections it's very hard to do in the

1195
00:48:28,400 --> 00:48:34,099
first place honestly but I think the I

1196
00:48:32,599 --> 00:48:35,780
rule comes first which means that it

1197
00:48:34,099 --> 00:48:37,730
does circumvent the wealth because the

1198
00:48:35,780 --> 00:48:44,839
wealth is not intended for defending

1199
00:48:37,730 --> 00:48:45,710
death big-ip device since I can see you

1200
00:48:44,839 --> 00:48:48,259
I don't know if there's any more

1201
00:48:45,710 --> 00:48:49,849
questions but welcome to thank you so

1202
00:48:48,260 --> 00:48:51,800
much for joining the session if you have

1203
00:48:49,849 --> 00:48:53,930
further questions for our presenter

1204
00:48:51,800 --> 00:48:57,040
please meet him in the hallway area

1205
00:48:53,930 --> 00:48:57,040
thank you

