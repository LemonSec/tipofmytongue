1
00:00:00,000 --> 00:00:07,500
hello everyone you are an Islander FG

2
00:00:03,360 --> 00:00:09,420
and welcome to API induced SSR F how

3
00:00:07,500 --> 00:00:12,360
applepay scattered vulnerabilities

4
00:00:09,420 --> 00:00:13,650
across the web by Joshua Maddux if

5
00:00:12,360 --> 00:00:15,570
you'll give me just a moment I have some

6
00:00:13,650 --> 00:00:17,580
announcements that you should visit the

7
00:00:15,570 --> 00:00:19,890
blackhat Arsenal and which is in the

8
00:00:17,580 --> 00:00:22,439
business hall inside of Oceanside and

9
00:00:19,890 --> 00:00:24,990
the shoreline ballrooms in this hotel if

10
00:00:22,439 --> 00:00:26,640
you would please silence your phones I

11
00:00:24,990 --> 00:00:29,759
would appreciate that as well and also

12
00:00:26,640 --> 00:00:32,610
lunch is in Bayside ad from 1:00 to 2:30

13
00:00:29,760 --> 00:00:35,240
and with that give us a round of

14
00:00:32,610 --> 00:00:39,240
applause for Josh romantics please

15
00:00:35,240 --> 00:00:39,240
[Applause]

16
00:00:39,469 --> 00:00:44,010
alright so I'm going to lay something on

17
00:00:42,180 --> 00:00:45,750
the table right now this talk is about

18
00:00:44,010 --> 00:00:47,610
software architecture that I'm not

19
00:00:45,750 --> 00:00:49,020
apologizing for it now you may be

20
00:00:47,610 --> 00:00:49,710
wondering how in the world does this guy

21
00:00:49,020 --> 00:00:52,140
get in here

22
00:00:49,710 --> 00:00:53,670
software talks of boring and I would

23
00:00:52,140 --> 00:00:55,190
kind of agree with you I used to be a

24
00:00:53,670 --> 00:00:57,539
software engineer and sort of still AM

25
00:00:55,190 --> 00:00:59,670
architecture talks are especially boring

26
00:00:57,539 --> 00:01:02,129
but most of those are on the positive

27
00:00:59,670 --> 00:01:04,619
side you build something it scales it

28
00:01:02,129 --> 00:01:06,600
makes money and so now you're an expert

29
00:01:04,619 --> 00:01:08,070
but I'm going to look at the negative

30
00:01:06,600 --> 00:01:10,530
side weird is Sark written software

31
00:01:08,070 --> 00:01:12,000
architecture go horribly wrong obviously

32
00:01:10,530 --> 00:01:16,590
when it scatters vulnerabilities across

33
00:01:12,000 --> 00:01:18,960
the web so first a bit about me I'm

34
00:01:16,590 --> 00:01:20,210
Joshua Maddux I have a math degree but

35
00:01:18,960 --> 00:01:22,559
I've been a web developer for a while

36
00:01:20,210 --> 00:01:25,020
then I got started with bug bounties and

37
00:01:22,560 --> 00:01:26,820
that shifted me towards security now at

38
00:01:25,020 --> 00:01:28,589
pkc I've been doing a lot of security

39
00:01:26,820 --> 00:01:30,240
work for clients we're located in

40
00:01:28,590 --> 00:01:38,549
Huntington Beach about a four-hour drive

41
00:01:30,240 --> 00:01:40,079
from here you can visit us at PK CEO all

42
00:01:38,549 --> 00:01:42,509
right so now for an overview be able to

43
00:01:40,079 --> 00:01:44,520
talk first I'll go over a couple of

44
00:01:42,509 --> 00:01:48,060
terms combines two for my criticism of

45
00:01:44,520 --> 00:01:49,770
Apple pay then I'll do some demos the

46
00:01:48,060 --> 00:01:51,869
focus is on finding a large number of

47
00:01:49,770 --> 00:01:54,420
easy to exploit bugs so the demos will

48
00:01:51,869 --> 00:01:55,950
be quick and pre-recorded these demos

49
00:01:54,420 --> 00:01:57,390
are all against my own redeployments of

50
00:01:55,950 --> 00:01:59,280
open source stuff that has already been

51
00:01:57,390 --> 00:02:01,110
fixed I won't be attacking any live

52
00:01:59,280 --> 00:02:02,659
ecommerce systems since most of my

53
00:02:01,110 --> 00:02:04,649
disclosures to those are still private

54
00:02:02,659 --> 00:02:07,409
lastly I'll have some general principles

55
00:02:04,649 --> 00:02:08,878
for designing better api's like you may

56
00:02:07,409 --> 00:02:10,440
have picked up I'm going to go pretty

57
00:02:08,878 --> 00:02:11,690
hard on an architectural decision made

58
00:02:10,440 --> 00:02:13,340
by Apple here

59
00:02:11,690 --> 00:02:14,690
in discussing the security of software

60
00:02:13,340 --> 00:02:16,580
architecture people tend to bring up

61
00:02:14,690 --> 00:02:18,350
vague principles and notions of who's

62
00:02:16,580 --> 00:02:20,030
responsible for what but I'm going to

63
00:02:18,350 --> 00:02:21,859
back myself up with concrete examples

64
00:02:20,030 --> 00:02:25,640
better yet these examples should be

65
00:02:21,860 --> 00:02:29,990
educational sing if you want to start

66
00:02:25,640 --> 00:02:32,000
testing SSR F yourself so on two

67
00:02:29,990 --> 00:02:34,460
definitions so there's this existing

68
00:02:32,000 --> 00:02:36,170
concept of a class break it's the idea

69
00:02:34,460 --> 00:02:38,720
that software tends to be vulnerable in

70
00:02:36,170 --> 00:02:40,070
multiple places at once past research

71
00:02:38,720 --> 00:02:41,960
has focused on cases where you might

72
00:02:40,070 --> 00:02:43,820
have a single weak piece of code say

73
00:02:41,960 --> 00:02:46,340
sequel injection in the CMS plugin or

74
00:02:43,820 --> 00:02:48,109
heartbleed it gets built and deployed to

75
00:02:46,340 --> 00:02:49,190
a lot of places and when it's discovered

76
00:02:48,110 --> 00:02:51,110
there's this huge rush to get your

77
00:02:49,190 --> 00:02:52,430
instance patched you could frame a lot

78
00:02:51,110 --> 00:02:55,280
of the talks at this conference as hard

79
00:02:52,430 --> 00:02:56,720
as class breaks and currently there's a

80
00:02:55,280 --> 00:03:00,650
lot of tooling to help companies stay on

81
00:02:56,720 --> 00:03:02,450
top of this but there's another level

82
00:03:00,650 --> 00:03:04,550
I've that I've seen a lot of this year

83
00:03:02,450 --> 00:03:07,489
it's not new but is becoming more common

84
00:03:04,550 --> 00:03:09,290
a company will create an API or spec at

85
00:03:07,490 --> 00:03:11,690
this top level that isn't itself

86
00:03:09,290 --> 00:03:13,269
vulnerable but in some way induces

87
00:03:11,690 --> 00:03:16,280
several people to write vulnerable code

88
00:03:13,270 --> 00:03:18,320
some familiar examples maybe the JWT

89
00:03:16,280 --> 00:03:19,280
none algorithm or the problems that have

90
00:03:18,320 --> 00:03:21,380
popped up in recent sam'l

91
00:03:19,280 --> 00:03:23,270
implementations so if you're looking for

92
00:03:21,380 --> 00:03:24,530
sheer volume of vulnerabilities thinking

93
00:03:23,270 --> 00:03:27,709
at this top level can be a lucrative

94
00:03:24,530 --> 00:03:29,630
place to start I couldn't find an

95
00:03:27,709 --> 00:03:30,709
existing general term for this upper

96
00:03:29,630 --> 00:03:33,320
level so I'm going to call it an

97
00:03:30,709 --> 00:03:35,120
inductive weakness and here's the

98
00:03:33,320 --> 00:03:37,130
definition it's a design flaw that

99
00:03:35,120 --> 00:03:39,050
encourages multiple parties to write

100
00:03:37,130 --> 00:03:40,670
vulnerable code with a similar exploit

101
00:03:39,050 --> 00:03:43,880
pattern across differing software sets

102
00:03:40,670 --> 00:03:46,880
for example we may say an API induces SS

103
00:03:43,880 --> 00:03:50,209
rfv vulnerabilities or that an API has

104
00:03:46,880 --> 00:03:51,769
an inductive S or surahs' weakness this

105
00:03:50,209 --> 00:03:53,300
is wordy it might not seem entirely

106
00:03:51,769 --> 00:03:57,380
justified right now that should make

107
00:03:53,300 --> 00:03:59,480
sense once we get to them demos and now

108
00:03:57,380 --> 00:04:01,310
for a refresher of the other term SS or

109
00:03:59,480 --> 00:04:03,109
F it's been the run for a while and

110
00:04:01,310 --> 00:04:04,880
stands for server-side request forgery a

111
00:04:03,110 --> 00:04:08,260
lot of people confuse this term with

112
00:04:04,880 --> 00:04:11,359
CSRF client-side request forgery in

113
00:04:08,260 --> 00:04:14,870
practice very different bugs aiming

114
00:04:11,360 --> 00:04:16,190
similarity is kind of unfortunate SS RF

115
00:04:14,870 --> 00:04:18,290
is a bit of a hot topic right now

116
00:04:16,190 --> 00:04:20,329
because it's a lot easier to exploit

117
00:04:18,290 --> 00:04:24,919
than it used to be we'll see why towards

118
00:04:20,329 --> 00:04:25,520
the end of this section so start off

119
00:04:24,919 --> 00:04:27,770
with

120
00:04:25,520 --> 00:04:29,210
say this attacker on the top left wants

121
00:04:27,770 --> 00:04:31,609
to interact with an internal facing

122
00:04:29,210 --> 00:04:33,590
server on the bottom right but the

123
00:04:31,610 --> 00:04:34,879
attacker doesn't have direct access they

124
00:04:33,590 --> 00:04:38,090
can only go through the public facing

125
00:04:34,879 --> 00:04:39,470
server displayed in the middle the

126
00:04:38,090 --> 00:04:41,810
attacker then tries to find some

127
00:04:39,470 --> 00:04:43,849
weakness in that public facing server in

128
00:04:41,810 --> 00:04:45,830
the past people have taken the URL and

129
00:04:43,849 --> 00:04:48,169
put it somewhere like the host header or

130
00:04:45,830 --> 00:04:50,060
the body of some XML in order to get the

131
00:04:48,169 --> 00:04:51,169
server to hit the desired location there

132
00:04:50,060 --> 00:04:53,720
are a lot of different ways that you can

133
00:04:51,169 --> 00:04:55,490
go about trying to get that URL and try

134
00:04:53,720 --> 00:04:56,990
to get the server to edit but the goal

135
00:04:55,490 --> 00:04:59,560
is to relay a request through the server

136
00:04:56,990 --> 00:05:01,880
in the middle as if it were a proxy

137
00:04:59,560 --> 00:05:03,289
typically we only call it s s or F if

138
00:05:01,880 --> 00:05:05,389
the attacker can use the proxy like

139
00:05:03,289 --> 00:05:11,810
behavior to access or harm something

140
00:05:05,389 --> 00:05:13,490
internal if you can get stuff back it's

141
00:05:11,810 --> 00:05:16,490
easier to exploit and called transparent

142
00:05:13,490 --> 00:05:18,620
s SRF otherwise it's called blind SSRS

143
00:05:16,490 --> 00:05:20,449
the exploit ability is tied to how

144
00:05:18,620 --> 00:05:21,830
permissive the target server is and how

145
00:05:20,449 --> 00:05:24,050
much sensitive stuff is available

146
00:05:21,830 --> 00:05:27,080
internally there at the bottom right so

147
00:05:24,050 --> 00:05:28,370
what can you do with this pattern turns

148
00:05:27,080 --> 00:05:30,530
out it's quite powerful right now

149
00:05:28,370 --> 00:05:32,690
because of the defaults in popular cloud

150
00:05:30,530 --> 00:05:35,479
environments this has been the pro most

151
00:05:32,690 --> 00:05:37,389
fruitful approach for me so far Google

152
00:05:35,479 --> 00:05:40,490
Cloud and a TBS of both exposed

153
00:05:37,389 --> 00:05:43,759
credentials by default on 169.254 dot

154
00:05:40,490 --> 00:05:45,380
169.254 depending on the permission is

155
00:05:43,759 --> 00:05:47,389
assigned to the instance this token can

156
00:05:45,380 --> 00:05:49,490
often access private storage buckets or

157
00:05:47,389 --> 00:05:51,080
other stuff it's basically allows you to

158
00:05:49,490 --> 00:05:53,590
if you can hit this and get the token

159
00:05:51,080 --> 00:05:55,550
you can act as if you are that instance

160
00:05:53,590 --> 00:05:57,830
there's even been some pretty credible

161
00:05:55,550 --> 00:05:59,509
speculation that the AWS equivalent of

162
00:05:57,830 --> 00:06:01,758
this endpoint was the first step that

163
00:05:59,509 --> 00:06:03,860
enabled the recent capital 1 breach but

164
00:06:01,759 --> 00:06:06,650
I never go that far I just stop here and

165
00:06:03,860 --> 00:06:07,969
report it the other thing to note is

166
00:06:06,650 --> 00:06:09,830
that on screen you see a curl command

167
00:06:07,969 --> 00:06:12,050
that in itself isn't demonstrative

168
00:06:09,830 --> 00:06:13,969
vulnerability because I'm already inside

169
00:06:12,050 --> 00:06:15,860
the box in this case it's when you can

170
00:06:13,969 --> 00:06:18,560
externally tell the server to hit a URL

171
00:06:15,860 --> 00:06:20,870
and give you back the token that or

172
00:06:18,560 --> 00:06:24,199
something else sensitive or cause some

173
00:06:20,870 --> 00:06:26,210
harm that it becomes SSRS also to the

174
00:06:24,199 --> 00:06:28,669
name of them straight this slide is also

175
00:06:26,210 --> 00:06:30,469
not an inductive weakness AWS and GCP

176
00:06:28,669 --> 00:06:32,000
aren't causing people to write weak code

177
00:06:30,469 --> 00:06:34,759
they're just widening the consequences

178
00:06:32,000 --> 00:06:36,380
that people do but what this slide does

179
00:06:34,759 --> 00:06:38,839
demonstrate is that if you want to do s

180
00:06:36,380 --> 00:06:39,440
srf on someone using AWS or GCE right

181
00:06:38,839 --> 00:06:41,090
now

182
00:06:39,440 --> 00:06:44,090
you have a very easy payload to start

183
00:06:41,090 --> 00:06:46,010
with so what are some other easy things

184
00:06:44,090 --> 00:06:48,020
to try with SSRS people have already

185
00:06:46,010 --> 00:06:49,789
criticized abs and google cloud a lot

186
00:06:48,020 --> 00:06:51,770
for providing Yui Center you saw in the

187
00:06:49,790 --> 00:06:53,420
previous slide there have even been some

188
00:06:51,770 --> 00:06:54,650
rumors AWS is in the process of

189
00:06:53,420 --> 00:06:56,510
improving things in response to the

190
00:06:54,650 --> 00:06:59,150
capital one breach so I won't dwell on

191
00:06:56,510 --> 00:07:00,230
that criticism too much follow URLs or

192
00:06:59,150 --> 00:07:01,630
another interesting thing to try

193
00:07:00,230 --> 00:07:03,590
especially on older sacks

194
00:07:01,630 --> 00:07:05,000
the other interesting thing is that if

195
00:07:03,590 --> 00:07:07,159
you can proxy through get requests you

196
00:07:05,000 --> 00:07:10,730
can do reflected XSS you just have to

197
00:07:07,160 --> 00:07:11,900
point to a URL with some malicious HTML

198
00:07:10,730 --> 00:07:13,490
and JavaScript though then it's

199
00:07:11,900 --> 00:07:15,650
technically not necessary because the

200
00:07:13,490 --> 00:07:17,090
attacks are an area is different it is a

201
00:07:15,650 --> 00:07:19,849
fun thing to keep in mind though because

202
00:07:17,090 --> 00:07:21,169
if you're trying to get true SS or F and

203
00:07:19,850 --> 00:07:23,060
you're just like not getting through on

204
00:07:21,170 --> 00:07:24,290
anything but it's on a get request you

205
00:07:23,060 --> 00:07:26,390
still have this other option if you want

206
00:07:24,290 --> 00:07:28,670
to then you know try to submit for a bug

207
00:07:26,390 --> 00:07:30,530
bounty or something but aside from these

208
00:07:28,670 --> 00:07:32,090
the general first step is just to try a

209
00:07:30,530 --> 00:07:33,140
bunch of ports and different payloads

210
00:07:32,090 --> 00:07:35,450
and see if you could try something that

211
00:07:33,140 --> 00:07:37,729
couch DB or memcached running internally

212
00:07:35,450 --> 00:07:39,890
there's even I believe I didn't link to

213
00:07:37,730 --> 00:07:40,520
it in the slides but there is a there's

214
00:07:39,890 --> 00:07:42,200
an F

215
00:07:40,520 --> 00:07:45,440
they're a bunch of s cheat sheets out

216
00:07:42,200 --> 00:07:47,000
there that you can run through but what

217
00:07:45,440 --> 00:07:48,440
if you want to dig deeper there's been a

218
00:07:47,000 --> 00:07:50,840
lot of past work on cross protocol

219
00:07:48,440 --> 00:07:52,310
attacks via SSRS gopher URLs are

220
00:07:50,840 --> 00:07:53,989
interesting because you can inject a

221
00:07:52,310 --> 00:07:55,910
wide range of characters that will

222
00:07:53,990 --> 00:07:57,020
eventually go into the CCP stream so you

223
00:07:55,910 --> 00:07:59,810
have a lot of room for interacting with

224
00:07:57,020 --> 00:08:00,830
other protocols like TCP or SMTP there

225
00:07:59,810 --> 00:08:02,900
are a lot of different ways to get there

226
00:08:00,830 --> 00:08:04,609
though sometimes it might be necessary

227
00:08:02,900 --> 00:08:06,560
to set up a server that redirects the

228
00:08:04,610 --> 00:08:08,480
protocol you want other times you might

229
00:08:06,560 --> 00:08:10,790
just go with an HTTP URL and exploit a

230
00:08:08,480 --> 00:08:12,350
bug and the URL parser probably the

231
00:08:10,790 --> 00:08:15,290
coolest work on this is the orange site

232
00:08:12,350 --> 00:08:16,340
awk a new era of SSRS however libraries

233
00:08:15,290 --> 00:08:17,960
are getting stricter and a lot of the

234
00:08:16,340 --> 00:08:19,489
easy stuff has been fixed this is a

235
00:08:17,960 --> 00:08:20,599
really fun area of research flow and I

236
00:08:19,490 --> 00:08:23,750
expect there will be additional changes

237
00:08:20,600 --> 00:08:25,010
discovered in the future but for now in

238
00:08:23,750 --> 00:08:26,510
case there were any gaps in my

239
00:08:25,010 --> 00:08:29,390
explanations does anyone have any

240
00:08:26,510 --> 00:08:36,020
questions on s Seraph there are

241
00:08:29,390 --> 00:08:37,819
microphones ok so now we'll get on to

242
00:08:36,020 --> 00:08:38,718
the meat of the talk we'll combine our

243
00:08:37,820 --> 00:08:43,370
tube term suits

244
00:08:38,719 --> 00:08:45,710
describe the applepay web before diving

245
00:08:43,370 --> 00:08:46,640
in it's important to note that Apple pay

246
00:08:45,710 --> 00:08:49,010
is composed of three different

247
00:08:46,640 --> 00:08:50,390
technologies under one brand you may be

248
00:08:49,010 --> 00:08:52,400
familiar with a bio with Apple pay

249
00:08:50,390 --> 00:08:53,420
button which appears on both in app and

250
00:08:52,400 --> 00:08:55,130
Apple pay web

251
00:08:53,420 --> 00:08:56,839
there's also the upcoming Apple pay card

252
00:08:55,130 --> 00:09:03,530
but I have no idea whether that's into

253
00:08:56,840 --> 00:09:05,420
all of this but I'm only criticizing

254
00:09:03,530 --> 00:09:07,990
Apple pay web since it has some

255
00:09:05,420 --> 00:09:11,120
problematic requirements for merchants

256
00:09:07,990 --> 00:09:12,530
so say you have an online store within

257
00:09:11,120 --> 00:09:14,930
nomenclature we would call you a

258
00:09:12,530 --> 00:09:17,270
merchant what does your website need to

259
00:09:14,930 --> 00:09:18,650
do to support Apple pay web when the

260
00:09:17,270 --> 00:09:21,439
user clicks to buy with Apple pay button

261
00:09:18,650 --> 00:09:23,060
Safari spits out a validation URL which

262
00:09:21,440 --> 00:09:27,320
is on one of about 30 apple.com

263
00:09:23,060 --> 00:09:28,430
subdomains then in your client-side

264
00:09:27,320 --> 00:09:31,160
JavaScript you have to send the

265
00:09:28,430 --> 00:09:32,349
validation URL to your back-end you

266
00:09:31,160 --> 00:09:34,730
might be able to see where this is going

267
00:09:32,350 --> 00:09:36,530
then your server needs to grab an

268
00:09:34,730 --> 00:09:38,900
exception from that validation URL and

269
00:09:36,530 --> 00:09:40,310
return it to the client this is all a

270
00:09:38,900 --> 00:09:44,209
bit wordy though and it's much better is

271
00:09:40,310 --> 00:09:45,099
a diagram luckily I already have one so

272
00:09:44,210 --> 00:09:47,420
this should look familiar

273
00:09:45,100 --> 00:09:49,820
following the typical flow as a merchant

274
00:09:47,420 --> 00:09:51,770
your server in the middle would take in

275
00:09:49,820 --> 00:09:54,130
that URL to know which apple server to

276
00:09:51,770 --> 00:09:56,720
connect to to grab a merchant session

277
00:09:54,130 --> 00:09:57,740
but depending on your infrastructure if

278
00:09:56,720 --> 00:09:59,960
you implement in the way apple

279
00:09:57,740 --> 00:10:02,180
originally documented or deployed there

280
00:09:59,960 --> 00:10:05,510
are example code by default this is a

281
00:10:02,180 --> 00:10:06,890
really dangerous functionalities bad the

282
00:10:05,510 --> 00:10:09,560
employee isn't ideal for an attacker who

283
00:10:06,890 --> 00:10:11,810
wants to SS or since the validation URL

284
00:10:09,560 --> 00:10:13,069
is user-supplied they're basically doing

285
00:10:11,810 --> 00:10:13,459
their load balancing in the user's

286
00:10:13,070 --> 00:10:15,710
browser

287
00:10:13,460 --> 00:10:17,750
I've asked Apple for some justification

288
00:10:15,710 --> 00:10:19,370
of this requirement and after several

289
00:10:17,750 --> 00:10:22,610
months I have no idea why it is still

290
00:10:19,370 --> 00:10:25,010
there in the original WWDC talk there's

291
00:10:22,610 --> 00:10:26,990
a vague explanation of handling the case

292
00:10:25,010 --> 00:10:28,100
where merchant is compromised but that

293
00:10:26,990 --> 00:10:30,080
doesn't explain why they allow the

294
00:10:28,100 --> 00:10:32,350
client-side to choose between validation

295
00:10:30,080 --> 00:10:34,760
URLs instead of having just one and

296
00:10:32,350 --> 00:10:36,410
ultimately they're providing a whole new

297
00:10:34,760 --> 00:10:38,330
way for a merchant for attackers to

298
00:10:36,410 --> 00:10:40,730
compromise merchants instead of

299
00:10:38,330 --> 00:10:43,580
protecting them Google pays certainly

300
00:10:40,730 --> 00:10:45,440
doesn't do this some merchants were

301
00:10:43,580 --> 00:10:47,420
safer one reason or another that we'll

302
00:10:45,440 --> 00:10:55,490
get some allegations later right now

303
00:10:47,420 --> 00:10:58,040
it's time for a demo so these demos are

304
00:10:55,490 --> 00:10:59,750
not particularly deep attack pains but

305
00:10:58,040 --> 00:11:01,790
besides demonstrating breadth of attack

306
00:10:59,750 --> 00:11:03,140
surface they should be illuminating if

307
00:11:01,790 --> 00:11:05,510
you're interested in testing us or after

308
00:11:03,140 --> 00:11:07,189
yourself just please if you try this at

309
00:11:05,510 --> 00:11:08,689
home only try it against sites

310
00:11:07,190 --> 00:11:10,580
you have permission and report what you

311
00:11:08,690 --> 00:11:14,210
find don't go snooping against the

312
00:11:10,580 --> 00:11:15,620
private storage buckets so this first

313
00:11:14,210 --> 00:11:17,300
demo is against the Google Chrome labs

314
00:11:15,620 --> 00:11:19,040
project that was deployed publicly via

315
00:11:17,300 --> 00:11:19,699
App Engine but not in the production

316
00:11:19,040 --> 00:11:21,980
environment

317
00:11:19,700 --> 00:11:24,590
I don't point this out to shame Google

318
00:11:21,980 --> 00:11:26,690
or the developer instead I want to

319
00:11:24,590 --> 00:11:28,880
demonstrate that even talented qualified

320
00:11:26,690 --> 00:11:36,980
people on modern South force acts were

321
00:11:28,880 --> 00:11:38,990
affected by the Apple pay design flaw so

322
00:11:36,980 --> 00:11:40,520
here's my own redeployment of this

323
00:11:38,990 --> 00:11:44,450
project so we can see what I did against

324
00:11:40,520 --> 00:11:45,829
Google's appointment as you can see has

325
00:11:44,450 --> 00:11:48,160
a bye with Apple pay

326
00:11:45,830 --> 00:11:48,160
oops

327
00:12:03,750 --> 00:12:08,970
okay so as you can see it has a bi with

328
00:12:06,149 --> 00:12:12,329
Apple pay button so it's getting an

329
00:12:08,970 --> 00:12:14,310
error because my deployment isn't Floy

330
00:12:12,329 --> 00:12:19,170
configured but our attack will still

331
00:12:14,310 --> 00:12:21,689
work so if we go to the network tab this

332
00:12:19,170 --> 00:12:24,149
is a fairly basic way of attacking this

333
00:12:21,689 --> 00:12:25,800
but if we go to the network tab click it

334
00:12:24,149 --> 00:12:27,329
again we can see the requests going out

335
00:12:25,800 --> 00:12:28,949
to this endpoint gulp validate it's

336
00:12:27,329 --> 00:12:30,329
pretty small there but it's in red it's

337
00:12:28,949 --> 00:12:34,170
getting an error but we can still use it

338
00:12:30,329 --> 00:12:35,189
to attack this site so normally you

339
00:12:34,170 --> 00:12:37,079
attack might attack this with something

340
00:12:35,189 --> 00:12:39,209
like burp or MIT and proxy but I'm going

341
00:12:37,079 --> 00:12:42,269
to go old school with curl first we

342
00:12:39,209 --> 00:12:44,250
clean up some headers then we modify the

343
00:12:42,269 --> 00:12:48,389
valide from URL just so we can see

344
00:12:44,250 --> 00:12:50,009
conveniently replay different values so

345
00:12:48,389 --> 00:12:52,110
first I'll try something basic I'll just

346
00:12:50,009 --> 00:12:53,629
try to hit example comm to see if we can

347
00:12:52,110 --> 00:13:02,910
proxy through the endpoint I'm hitting

348
00:12:53,629 --> 00:13:04,860
it'll take a couple tries here so just

349
00:13:02,910 --> 00:13:06,420
practicing out to example comm like this

350
00:13:04,860 --> 00:13:08,430
isn't necessary

351
00:13:06,420 --> 00:13:13,139
but it is a useful first step in testing

352
00:13:08,430 --> 00:13:15,149
this stuff and now for the actual SSRS

353
00:13:13,139 --> 00:13:17,370
let's try to hit the instance metadata

354
00:13:15,149 --> 00:13:21,120
server and remember this is deployed as

355
00:13:17,370 --> 00:13:22,019
is very similarly to how it was so it

356
00:13:21,120 --> 00:13:24,899
looks like we're getting through on a

357
00:13:22,019 --> 00:13:28,620
Google Cloud box and then by feeding and

358
00:13:24,899 --> 00:13:31,230
metadata at Google about internal we can

359
00:13:28,620 --> 00:13:32,220
confirm that that's the case so from

360
00:13:31,230 --> 00:13:34,649
here it's just a matter of browsing

361
00:13:32,220 --> 00:13:37,259
directories and seeing what works who

362
00:13:34,649 --> 00:13:39,660
are whatever reason /v 1 beta 1 is less

363
00:13:37,259 --> 00:13:42,720
strict about headers and /v 1 I have no

364
00:13:39,660 --> 00:13:46,050
idea why that is but we can keep

365
00:13:42,720 --> 00:13:48,240
browsing and now we're in the directory

366
00:13:46,050 --> 00:13:55,170
at the gooey Center we can see what

367
00:13:48,240 --> 00:13:57,389
permissions sbox has access to and even

368
00:13:55,170 --> 00:13:59,490
retrieve a working token for whatever

369
00:13:57,389 --> 00:14:01,259
reason I put a black box on part of it

370
00:13:59,490 --> 00:14:05,490
but it is expired by now and that

371
00:14:01,259 --> 00:14:06,899
instance is offline so for the next demo

372
00:14:05,490 --> 00:14:09,389
we'll be attacking my own deployment of

373
00:14:06,899 --> 00:14:11,160
a page that was on WebKit org the issue

374
00:14:09,389 --> 00:14:13,319
was fixed but I deployed the vulnerable

375
00:14:11,160 --> 00:14:15,389
version form a few months ago on wkj

376
00:14:13,319 --> 00:14:17,110
maddox calm for the purposes of the sim

377
00:14:15,389 --> 00:14:19,990
oh don't worry though might have

378
00:14:17,110 --> 00:14:21,490
is offline right now importantly just

379
00:14:19,990 --> 00:14:23,500
like the previous demo the code on web

380
00:14:21,490 --> 00:14:25,870
katorga was written by a well qualified

381
00:14:23,500 --> 00:14:27,579
developer at a large tech company this

382
00:14:25,870 --> 00:14:29,589
may even be more convincing because it

383
00:14:27,579 --> 00:14:31,689
demonstrates that even developers Apple

384
00:14:29,589 --> 00:14:33,519
were not immune and the original POC I

385
00:14:31,690 --> 00:14:35,440
sent to Apple I just grabbed an ABS so

386
00:14:33,519 --> 00:14:36,790
can I have this employed on Google cloud

387
00:14:35,440 --> 00:14:38,620
though so it'll be a chance to try

388
00:14:36,790 --> 00:14:42,790
something a little bit different instead

389
00:14:38,620 --> 00:14:44,350
of just instance metadata all right so

390
00:14:42,790 --> 00:14:46,390
here you can see my own deployment of

391
00:14:44,350 --> 00:14:48,940
the page that was on the code that used

392
00:14:46,390 --> 00:14:51,630
to be on would be a org I love this art

393
00:14:48,940 --> 00:14:55,240
that this button here looks promising to

394
00:14:51,630 --> 00:14:57,010
so it turns out we can see I also see a

395
00:14:55,240 --> 00:14:59,070
merchant validation requests happening

396
00:14:57,010 --> 00:15:00,939
here once we open up the network tab

397
00:14:59,070 --> 00:15:03,100
it's different code from the previous

398
00:15:00,940 --> 00:15:05,019
example you can see merchant validation

399
00:15:03,100 --> 00:15:07,540
dot PHP instead of the note input from

400
00:15:05,019 --> 00:15:09,700
the other one but the attack will be

401
00:15:07,540 --> 00:15:11,980
similar because of the requirements

402
00:15:09,700 --> 00:15:14,589
imposed by Apple for this Apple pay in

403
00:15:11,980 --> 00:15:17,459
point so we'll proceed much like we did

404
00:15:14,589 --> 00:15:17,459
with previous one

405
00:15:23,990 --> 00:15:31,390
okay so we can try to hit and system at

406
00:15:27,470 --> 00:15:31,390
it but we're not gonna have any luck

407
00:15:31,540 --> 00:15:35,270
because the request methods aren't

408
00:15:33,470 --> 00:15:36,290
lining it with might in our favor this

409
00:15:35,270 --> 00:15:38,150
is something you'll probably encounter

410
00:15:36,290 --> 00:15:40,430
if you try to if you test us for

411
00:15:38,150 --> 00:15:42,709
yourself but we can see that we do get

412
00:15:40,430 --> 00:15:44,540
proxying out to example comm so this is

413
00:15:42,710 --> 00:15:45,380
still promising and point to try it so

414
00:15:44,540 --> 00:15:50,569
at this point it's just a matter of

415
00:15:45,380 --> 00:15:51,890
trying different payloads it turns out

416
00:15:50,570 --> 00:15:54,080
that because of this is just a classic

417
00:15:51,890 --> 00:15:58,850
an old-school PHP F just a classic file

418
00:15:54,080 --> 00:16:00,680
URL will work so this is a pretty deeply

419
00:15:58,850 --> 00:16:02,330
seeded architectural problem and I

420
00:16:00,680 --> 00:16:04,339
reported it to Apple back in February

421
00:16:02,330 --> 00:16:06,670
but what has Apple done to mitigate this

422
00:16:04,340 --> 00:16:08,960
so far just documentation changes

423
00:16:06,670 --> 00:16:10,339
importantly the documentation used to

424
00:16:08,960 --> 00:16:11,870
pretty much walk you through the process

425
00:16:10,340 --> 00:16:14,960
of adding a vulnerability to your

426
00:16:11,870 --> 00:16:16,820
website now the documentation has this

427
00:16:14,960 --> 00:16:18,080
little warning box they seem really

428
00:16:16,820 --> 00:16:25,250
optimistic about how many developers

429
00:16:18,080 --> 00:16:26,660
actually read those however if you do it

430
00:16:25,250 --> 00:16:28,640
happen across these warning boxes and

431
00:16:26,660 --> 00:16:31,189
read them carefully the instructions are

432
00:16:28,640 --> 00:16:32,720
now valid but for the existing clients I

433
00:16:31,190 --> 00:16:34,670
can't imagine too many developers or

434
00:16:32,720 --> 00:16:37,460
constantly visiting the documentation to

435
00:16:34,670 --> 00:16:39,920
check what warnings were added so and

436
00:16:37,460 --> 00:16:41,210
here's the disclosure timeline there's

437
00:16:39,920 --> 00:16:42,829
not much here the main thing is that I

438
00:16:41,210 --> 00:16:44,120
reported this back in February and

439
00:16:42,830 --> 00:16:46,370
haven't seen any meaningful

440
00:16:44,120 --> 00:16:48,050
architectural changes my original

441
00:16:46,370 --> 00:16:49,820
proposal I asked for Apple to deprecated

442
00:16:48,050 --> 00:16:51,199
the current API and face in a new

443
00:16:49,820 --> 00:16:52,970
version that didn't have these problems

444
00:16:51,200 --> 00:16:54,890
but they haven't engaged with me on any

445
00:16:52,970 --> 00:16:56,330
discussion on that they've just updated

446
00:16:54,890 --> 00:16:58,880
documentation and removed their bad

447
00:16:56,330 --> 00:17:00,710
example code a couple of weeks ago I

448
00:16:58,880 --> 00:17:02,420
even gave them a heads up to say hey I'm

449
00:17:00,710 --> 00:17:04,610
speaking at black hat and DEF CON can

450
00:17:02,420 --> 00:17:07,430
you give merchants a heads up but again

451
00:17:04,609 --> 00:17:10,359
ghosted so we'll get back to this later

452
00:17:07,430 --> 00:17:12,560
but for now how would you mitigate this

453
00:17:10,359 --> 00:17:14,030
my favorite mitigation so far has been

454
00:17:12,560 --> 00:17:15,980
to just remove Apple pay support

455
00:17:14,030 --> 00:17:19,670
entirely this probably won't work for

456
00:17:15,980 --> 00:17:21,560
everyone though but for everyone else

457
00:17:19,670 --> 00:17:23,060
it's important to manually parse the

458
00:17:21,560 --> 00:17:25,700
validation you're all and check the host

459
00:17:23,060 --> 00:17:27,440
against apples list it's kind of ugly to

460
00:17:25,700 --> 00:17:29,240
copy and paste 30 domains into some

461
00:17:27,440 --> 00:17:31,280
config file but that's pretty much what

462
00:17:29,240 --> 00:17:33,290
you have to do a couple of payment

463
00:17:31,280 --> 00:17:35,030
providers have to do this out of the box

464
00:17:33,290 --> 00:17:35,659
though so far I'm just aware of stripe

465
00:17:35,030 --> 00:17:36,950
and Braintree

466
00:17:35,660 --> 00:17:37,730
so if you're using one of those two

467
00:17:36,950 --> 00:17:39,110
you're safe

468
00:17:37,730 --> 00:17:40,370
that's been a fairly big hurdle and

469
00:17:39,110 --> 00:17:42,019
trying to claim boundaries on this stuff

470
00:17:40,370 --> 00:17:43,820
is that a lot of sites use rep and

471
00:17:42,019 --> 00:17:46,039
Braintree and then it's stripe and

472
00:17:43,820 --> 00:17:47,389
Braintree handling the validation but it

473
00:17:46,039 --> 00:17:50,120
really depends on the payment process or

474
00:17:47,389 --> 00:17:52,340
some payment processors leave this up to

475
00:17:50,120 --> 00:17:56,149
individual ecommerce sites to decide how

476
00:17:52,340 --> 00:17:57,949
to do but what if you want to defend

477
00:17:56,149 --> 00:17:59,209
more broadly against s asura for my

478
00:17:57,950 --> 00:18:01,130
experience very few people are

479
00:17:59,210 --> 00:18:02,450
protecting egress traffic but when they

480
00:18:01,130 --> 00:18:04,370
do it provides a pretty big speed bump

481
00:18:02,450 --> 00:18:05,659
that may make more or less sense

482
00:18:04,370 --> 00:18:07,820
depending on the size of your

483
00:18:05,659 --> 00:18:10,340
organization and just how your network

484
00:18:07,820 --> 00:18:12,320
is laid out Netflix has also done some

485
00:18:10,340 --> 00:18:14,600
great work and proactively defended

486
00:18:12,320 --> 00:18:16,668
against the gooey Center in AWS there's

487
00:18:14,600 --> 00:18:20,178
I believe a blog post they talked at

488
00:18:16,669 --> 00:18:21,710
blackhat recently and there's a lot of

489
00:18:20,179 --> 00:18:23,029
good things to look into there but in

490
00:18:21,710 --> 00:18:24,139
general though it's just good to look

491
00:18:23,029 --> 00:18:25,820
take a look at what ports are open

492
00:18:24,139 --> 00:18:28,370
locally on your servers and add

493
00:18:25,820 --> 00:18:31,610
passwords even though the network layer

494
00:18:28,370 --> 00:18:32,840
is theoretically protecting them but on

495
00:18:31,610 --> 00:18:34,820
the other hand here's some stuff I've

496
00:18:32,840 --> 00:18:36,590
seen that has some holes in it reg exes

497
00:18:34,820 --> 00:18:42,799
are tricky and I wouldn't recommend them

498
00:18:36,590 --> 00:18:44,809
as a mitigation for this issue that

499
00:18:42,799 --> 00:18:46,039
besides the point in the slide I would

500
00:18:44,809 --> 00:18:48,230
also discourage against relying on a

501
00:18:46,039 --> 00:18:50,330
check to start at Apple comm because

502
00:18:48,230 --> 00:18:52,460
then if there is an open redirect

503
00:18:50,330 --> 00:18:54,199
anywhere on any Apple comm sub-domain an

504
00:18:52,460 --> 00:18:56,360
attacker can use the open redirects to

505
00:18:54,200 --> 00:18:58,100
circumvent your check narrowing the

506
00:18:56,360 --> 00:19:01,610
check to specifically allow the 30 Apple

507
00:18:58,100 --> 00:19:02,809
pay related subdomains is better there's

508
00:19:01,610 --> 00:19:04,158
no way of getting around it really if

509
00:19:02,809 --> 00:19:05,840
you have to support Apple way pay web

510
00:19:04,159 --> 00:19:07,610
you really should go to apples up the

511
00:19:05,840 --> 00:19:09,620
data documentation and read through the

512
00:19:07,610 --> 00:19:10,789
warnings they've added the architecture

513
00:19:09,620 --> 00:19:12,289
is still bad but at least the

514
00:19:10,789 --> 00:19:13,970
documentation doesn't walk you through

515
00:19:12,289 --> 00:19:17,480
the process of adding of vulnerability

516
00:19:13,970 --> 00:19:19,610
to your website so that wraps up the

517
00:19:17,480 --> 00:19:21,740
specific specifics on Apple pay web in

518
00:19:19,610 --> 00:19:23,029
our first inductive weakness I'll have

519
00:19:21,740 --> 00:19:24,799
more to say on Apple towards the end of

520
00:19:23,029 --> 00:19:25,909
this talk but in the next section I'll

521
00:19:24,799 --> 00:19:28,158
move on to another pattern that can

522
00:19:25,909 --> 00:19:34,909
induce vulnerabilities but for now does

523
00:19:28,159 --> 00:19:37,549
anyone have any questions nope okay so

524
00:19:34,909 --> 00:19:39,409
move on to web hooks so a lot of people

525
00:19:37,549 --> 00:19:41,059
are creating web hooks right now

526
00:19:39,409 --> 00:19:42,529
weapons are they're becoming a fairly

527
00:19:41,059 --> 00:19:44,149
comment in the useful way to tie the web

528
00:19:42,529 --> 00:19:45,440
together there are a lot of them out

529
00:19:44,149 --> 00:19:47,110
there right now and nobody seems to

530
00:19:45,440 --> 00:19:50,690
agree on how they should be implemented

531
00:19:47,110 --> 00:19:51,560
so what's a web book here's an example

532
00:19:50,690 --> 00:19:54,500
from Twilio

533
00:19:51,560 --> 00:19:56,899
it's a way of telling us your service a

534
00:19:54,500 --> 00:19:59,540
service to call your URL as soon as an

535
00:19:56,900 --> 00:20:02,660
event happens here you can see I have

536
00:19:59,540 --> 00:20:04,850
Jay Maddux comm / SMS registry so Twilio

537
00:20:02,660 --> 00:20:09,050
will send me an HTTP request every time

538
00:20:04,850 --> 00:20:10,550
it has a new SMS message so how have

539
00:20:09,050 --> 00:20:12,500
people been exploiting web hooks so far

540
00:20:10,550 --> 00:20:15,950
they've gone after the sender of the web

541
00:20:12,500 --> 00:20:17,420
hook in this case Twilio it's pretty

542
00:20:15,950 --> 00:20:19,280
similar to how I would test Apple pay

543
00:20:17,420 --> 00:20:21,230
instead of entering your own server as

544
00:20:19,280 --> 00:20:23,720
the URL you put the instance method you

545
00:20:21,230 --> 00:20:25,070
put the AWS instance metadata IP or try

546
00:20:23,720 --> 00:20:27,110
to preview some cross protocol stuff

547
00:20:25,070 --> 00:20:29,179
this is just a general challenge of

548
00:20:27,110 --> 00:20:30,590
implementing web hooks and it's not an

549
00:20:29,180 --> 00:20:32,870
inductive weakness because there's no

550
00:20:30,590 --> 00:20:34,189
central party inducing this pattern web

551
00:20:32,870 --> 00:20:36,500
hooks are just really useful for a lot

552
00:20:34,190 --> 00:20:38,030
of businesses luckily lots of people

553
00:20:36,500 --> 00:20:39,920
have already exploited web hooks in this

554
00:20:38,030 --> 00:20:40,940
way and you can find a lot of bug bounty

555
00:20:39,920 --> 00:20:43,580
write-ups where people who did exactly

556
00:20:40,940 --> 00:20:44,750
this I haven't done much of this though

557
00:20:43,580 --> 00:20:48,050
I've done something a little bit

558
00:20:44,750 --> 00:20:49,400
different what have I been doing I

559
00:20:48,050 --> 00:20:51,260
applied the same inductive weakness

560
00:20:49,400 --> 00:20:52,910
model that worked with Apple pay instead

561
00:20:51,260 --> 00:20:54,320
of going after the sender I look for an

562
00:20:52,910 --> 00:21:01,610
attack surface the sender might be

563
00:20:54,320 --> 00:21:04,070
inducing in the listeners and it turns

564
00:21:01,610 --> 00:21:05,840
out for Twilio this approach works it

565
00:21:04,070 --> 00:21:07,399
works well how do you how do the

566
00:21:05,840 --> 00:21:09,290
receivers of the web hooks know that the

567
00:21:07,400 --> 00:21:11,270
message is coming from phileo coolio

568
00:21:09,290 --> 00:21:13,399
provides an H Mac similarly to how most

569
00:21:11,270 --> 00:21:14,870
web hooks are done they call it a

570
00:21:13,400 --> 00:21:16,430
signature and that probably will make

571
00:21:14,870 --> 00:21:18,350
the cryptographers in the room cringe

572
00:21:16,430 --> 00:21:21,380
but conceptually it does kind of help to

573
00:21:18,350 --> 00:21:23,240
think of it as a signature assuming that

574
00:21:21,380 --> 00:21:26,060
the receivers actually check it it's not

575
00:21:23,240 --> 00:21:27,800
too bad but when I took a look most

576
00:21:26,060 --> 00:21:29,300
related open source projects failed to

577
00:21:27,800 --> 00:21:31,389
look at the H Mac so add these

578
00:21:29,300 --> 00:21:33,740
unauthenticated endpoints lying around

579
00:21:31,390 --> 00:21:35,450
once I started poking around it became

580
00:21:33,740 --> 00:21:38,720
apparent why two of those examples

581
00:21:35,450 --> 00:21:40,610
didn't check the HTML either and setting

582
00:21:38,720 --> 00:21:42,140
it aside the bad example code this seems

583
00:21:40,610 --> 00:21:43,969
to indicate an architectural problem I

584
00:21:42,140 --> 00:21:45,890
argued that since the easiest way to

585
00:21:43,970 --> 00:21:47,990
receive an HM ACK authenticated web hook

586
00:21:45,890 --> 00:21:51,260
is to disregard the H Mac that is this

587
00:21:47,990 --> 00:21:54,010
is a design flaw and specific kind would

588
00:21:51,260 --> 00:21:57,140
would obviously be inductive weakness

589
00:21:54,010 --> 00:21:58,940
and now for a demo so this demo is

590
00:21:57,140 --> 00:22:00,440
slightly different in that the example

591
00:21:58,940 --> 00:22:02,030
code was not on a public facing server

592
00:22:00,440 --> 00:22:04,450
so I didn't get any credentials from

593
00:22:02,030 --> 00:22:05,830
tolya themselves or any bounties

594
00:22:04,450 --> 00:22:09,100
but it is still worth showing because it

595
00:22:05,830 --> 00:22:11,139
was copied and pasted elsewhere so

596
00:22:09,100 --> 00:22:13,389
here's where I started just looking at

597
00:22:11,139 --> 00:22:14,830
the repo for Twilio example code on the

598
00:22:13,389 --> 00:22:15,399
readme there's no a warning to protect

599
00:22:14,830 --> 00:22:17,379
your webhooks

600
00:22:15,399 --> 00:22:24,939
but it turns out the example code still

601
00:22:17,379 --> 00:22:27,809
doesn't do that even further yeah we can

602
00:22:24,940 --> 00:22:30,399
see dem go down there and check that

603
00:22:27,809 --> 00:22:31,720
there's no authentication but going even

604
00:22:30,399 --> 00:22:33,668
further it takes in this media URL

605
00:22:31,720 --> 00:22:36,730
parameter and that looks promising no

606
00:22:33,669 --> 00:22:38,679
way knowing what we know the example web

607
00:22:36,730 --> 00:22:40,299
book is even quite generous because it

608
00:22:38,679 --> 00:22:42,369
fetches the contents of that URL and

609
00:22:40,299 --> 00:22:44,259
puts them in a public facing directory

610
00:22:42,369 --> 00:22:47,709
so you might be able to guess where this

611
00:22:44,259 --> 00:22:49,600
is going alright so in this next tab

612
00:22:47,710 --> 00:22:52,330
we'll have the code deployed as is on

613
00:22:49,600 --> 00:22:54,279
the Google cloud instance it tells us to

614
00:22:52,330 --> 00:22:57,009
send a text message but we don't need to

615
00:22:54,279 --> 00:22:58,359
do that this one book is unaffiliated so

616
00:22:57,009 --> 00:23:00,399
we use the snippet I have on the right

617
00:22:58,359 --> 00:23:04,629
and pretend we're Twilio sending over to

618
00:23:00,399 --> 00:23:06,100
CSV attachment but because of the URL we

619
00:23:04,629 --> 00:23:10,149
sent the server dumps an access token

620
00:23:06,100 --> 00:23:11,980
into that public directory and by the

621
00:23:10,149 --> 00:23:16,389
way this access token also expired long

622
00:23:11,980 --> 00:23:21,639
ago so here's the disclosure timeline

623
00:23:16,389 --> 00:23:23,350
fairly similar to the Apple pay one but

624
00:23:21,639 --> 00:23:25,498
you might be wondering our toilet those

625
00:23:23,350 --> 00:23:28,359
competitors doing any better or worse

626
00:23:25,499 --> 00:23:32,109
because it in general when you look at

627
00:23:28,359 --> 00:23:34,210
when you try to say oh this has a design

628
00:23:32,109 --> 00:23:37,330
flaw here it's good to look at what else

629
00:23:34,210 --> 00:23:40,029
what else is out there but turns out

630
00:23:37,330 --> 00:23:41,949
with no it's much worse not only is the

631
00:23:40,029 --> 00:23:43,179
architecture similar we have to contact

632
00:23:41,950 --> 00:23:45,909
support to even get them to send you an

633
00:23:43,179 --> 00:23:47,820
H Mac and even if you do contact support

634
00:23:45,909 --> 00:23:50,830
some of the roads don't have that option

635
00:23:47,820 --> 00:23:52,809
I don't have much to say about this it's

636
00:23:50,830 --> 00:23:56,559
pretty much beyond hope so let's move on

637
00:23:52,809 --> 00:23:58,539
to another web hook so get lab does

638
00:23:56,559 --> 00:24:01,239
something similar to Twilio but with the

639
00:23:58,539 --> 00:24:02,529
static token instead of an H Mac so the

640
00:24:01,239 --> 00:24:04,690
implementation is a bit different but

641
00:24:02,529 --> 00:24:06,609
the same level of optimism is there I

642
00:24:04,690 --> 00:24:08,559
don't have the static token pasted here

643
00:24:06,609 --> 00:24:09,820
because it's just simply a value that

644
00:24:08,559 --> 00:24:12,879
could be used to configure with good lab

645
00:24:09,820 --> 00:24:15,059
and listen to you but here I have the

646
00:24:12,879 --> 00:24:17,678
body of the advances that they send over

647
00:24:15,059 --> 00:24:18,279
and here's the here's just the body of

648
00:24:17,679 --> 00:24:24,279
it

649
00:24:18,279 --> 00:24:26,649
neighborhood so you might be able to

650
00:24:24,279 --> 00:24:28,179
imagine what I did I simply found a

651
00:24:26,649 --> 00:24:31,178
server that was receiving this wop book

652
00:24:28,179 --> 00:24:33,129
as usual they were not validating that

653
00:24:31,179 --> 00:24:34,869
it was coming from gitlab I won't name

654
00:24:33,129 --> 00:24:36,309
names but it's a web book I can't

655
00:24:34,869 --> 00:24:39,129
imagine that what I found was the only

656
00:24:36,309 --> 00:24:41,999
unauthenticated one and this in this

657
00:24:39,129 --> 00:24:45,218
case I'm trying to make the case for

658
00:24:41,999 --> 00:24:48,009
that this is actually a design flaw in

659
00:24:45,219 --> 00:24:49,570
the way get live is sending Web books or

660
00:24:48,009 --> 00:24:51,639
in just the general architecture that

661
00:24:49,570 --> 00:24:55,149
web hooks are being sent by a lot of

662
00:24:51,639 --> 00:24:56,678
parties right now but in any case I

663
00:24:55,149 --> 00:24:59,498
decided to tweak the sample push event

664
00:24:56,679 --> 00:25:01,389
and send it over right off the bat I was

665
00:24:59,499 --> 00:25:03,549
able to modify the repository URL and

666
00:25:01,389 --> 00:25:05,559
trigger extra builds for arbitrary repos

667
00:25:03,549 --> 00:25:07,719
I didn't have any success to playing

668
00:25:05,559 --> 00:25:10,239
arbitrary code but I did find one nasty

669
00:25:07,719 --> 00:25:12,609
consequence it turned out I could store

670
00:25:10,239 --> 00:25:14,109
XSS payloads the script would execute

671
00:25:12,609 --> 00:25:16,359
whenever someone clicked a particular

672
00:25:14,109 --> 00:25:17,619
button on their build bottom page and

673
00:25:16,359 --> 00:25:19,718
you don't need to login to anything to

674
00:25:17,619 --> 00:25:21,580
do this attack so this really epitomizes

675
00:25:19,719 --> 00:25:22,960
the point that I want to make so far

676
00:25:21,580 --> 00:25:24,639
we've been asking what vulnerabilities

677
00:25:22,960 --> 00:25:25,629
are in the software but an equally

678
00:25:24,639 --> 00:25:27,248
important question is what

679
00:25:25,629 --> 00:25:29,379
vulnerabilities is a software create

680
00:25:27,249 --> 00:25:36,989
once you start asking this question you

681
00:25:29,379 --> 00:25:39,189
can find lots of stuff and this is yeah

682
00:25:36,989 --> 00:25:41,409
all right so these next few slides are

683
00:25:39,190 --> 00:25:42,639
gonna be a bit text-heavy but I am

684
00:25:41,409 --> 00:25:44,169
making an aggressive claim here that

685
00:25:42,639 --> 00:25:45,279
nearly everyone is doing web hooks wrong

686
00:25:44,169 --> 00:25:47,859
so it's necessary to lay out some

687
00:25:45,279 --> 00:25:49,299
alternatives this is probably the

688
00:25:47,859 --> 00:25:51,158
coolest of the least practical one

689
00:25:49,299 --> 00:25:52,570
you can encrypt your Web books your

690
00:25:51,159 --> 00:25:55,389
outgoing web hooks with an authenticated

691
00:25:52,570 --> 00:25:56,769
cipher the upside is that in the act of

692
00:25:55,389 --> 00:25:58,330
trying to use the information you send

693
00:25:56,769 --> 00:26:00,339
them people will inevitably be

694
00:25:58,330 --> 00:26:01,899
authenticating it but the downside is

695
00:26:00,339 --> 00:26:03,879
there aren't a lot of good libraries for

696
00:26:01,899 --> 00:26:05,649
authenticating this especially when you

697
00:26:03,879 --> 00:26:07,570
look at what's available across

698
00:26:05,649 --> 00:26:09,820
different programming languages so this

699
00:26:07,570 --> 00:26:16,029
isn't very practical right now but we

700
00:26:09,820 --> 00:26:17,889
can always dream so going a little more

701
00:26:16,029 --> 00:26:20,169
practical you can do it platen Square do

702
00:26:17,889 --> 00:26:21,998
if you limit your web bug payload to an

703
00:26:20,169 --> 00:26:22,479
event ID and expect the receiver to

704
00:26:21,999 --> 00:26:24,039
fetch it

705
00:26:22,479 --> 00:26:26,139
you're really not inducing much attack

706
00:26:24,039 --> 00:26:27,789
surface the downside is that this does

707
00:26:26,139 --> 00:26:29,859
require an extra request for the

708
00:26:27,789 --> 00:26:31,299
listener to you you do also have to

709
00:26:29,859 --> 00:26:32,199
worry about path traversal if that idea

710
00:26:31,299 --> 00:26:34,090
Ximena you are

711
00:26:32,200 --> 00:26:36,570
segment this a lot of people will forget

712
00:26:34,090 --> 00:26:38,879
the encode data they inject into URLs

713
00:26:36,570 --> 00:26:41,649
but it is probably a good middle ground

714
00:26:38,880 --> 00:26:43,029
especially if you're just if your API

715
00:26:41,649 --> 00:26:47,908
just doesn't have a whole lot of attack

716
00:26:43,029 --> 00:26:50,200
surface in general yeah

717
00:26:47,909 --> 00:26:52,419
but the least aggressive approach this

718
00:26:50,200 --> 00:26:53,740
is probably the most practical it works

719
00:26:52,419 --> 00:26:55,240
for all four existing web books it's

720
00:26:53,740 --> 00:26:57,730
just to be more proactive about making

721
00:26:55,240 --> 00:26:59,980
sure people use the H Mac most web books

722
00:26:57,730 --> 00:27:01,659
already do one testing request to ensure

723
00:26:59,980 --> 00:27:04,389
the URL being registered is publicly

724
00:27:01,659 --> 00:27:07,330
reachable so it's not a huge change to

725
00:27:04,389 --> 00:27:08,830
do two requests instead it's then a

726
00:27:07,330 --> 00:27:11,320
matter of policy to decide what you do

727
00:27:08,830 --> 00:27:12,970
if the URL appears on authenticated even

728
00:27:11,320 --> 00:27:14,889
if you just warn your customer that

729
00:27:12,970 --> 00:27:17,139
still miles ahead of what other books

730
00:27:14,889 --> 00:27:18,760
are currently doing I'd really like to

731
00:27:17,139 --> 00:27:20,408
see what web hooks start doing this

732
00:27:18,760 --> 00:27:28,210
since it's low risk and backwards

733
00:27:20,409 --> 00:27:30,340
compatible in a lot of cases all right

734
00:27:28,210 --> 00:27:33,340
so a lot of this so far has been

735
00:27:30,340 --> 00:27:35,260
negative and then intentionally so but

736
00:27:33,340 --> 00:27:36,699
there is an upside by designing an API

737
00:27:35,260 --> 00:27:38,200
to be defensive from the ground up you

738
00:27:36,700 --> 00:27:40,450
have a lot of ability to prevent

739
00:27:38,200 --> 00:27:43,059
vulnerable code from being written so

740
00:27:40,450 --> 00:27:46,360
let's look at an API one API that didn't

741
00:27:43,059 --> 00:27:49,480
and one that did so Salesforce and

742
00:27:46,360 --> 00:27:50,620
DynamoDB are very different products but

743
00:27:49,480 --> 00:27:52,539
there is an interesting area where they

744
00:27:50,620 --> 00:27:54,219
overlap they both have had to act as a

745
00:27:52,539 --> 00:27:55,779
source of truth with some complicated

746
00:27:54,220 --> 00:27:57,460
business requirements piled on to the

747
00:27:55,779 --> 00:27:59,559
point that each had to influent a custom

748
00:27:57,460 --> 00:28:01,409
sequel like dialect but they went about

749
00:27:59,559 --> 00:28:03,639
that in very different ways

750
00:28:01,409 --> 00:28:05,320
if you've ever contested a web app that

751
00:28:03,639 --> 00:28:07,000
uses Salesforce somewhere on the back

752
00:28:05,320 --> 00:28:08,830
end hopefully this has been on your

753
00:28:07,000 --> 00:28:11,350
radar it's I've definitely gotten a lot

754
00:28:08,830 --> 00:28:12,879
of mileage out of it sometimes user

755
00:28:11,350 --> 00:28:14,860
input propagates out to a place where

756
00:28:12,880 --> 00:28:17,320
you can inject into this API call much

757
00:28:14,860 --> 00:28:19,750
like you would do a sequel so how a

758
00:28:17,320 --> 00:28:23,730
Salesforce try to mitigate this more

759
00:28:19,750 --> 00:28:23,730
documentation this is becoming a theme

760
00:28:24,179 --> 00:28:28,059
at first this might seem to be

761
00:28:26,169 --> 00:28:30,309
inevitable given what Salesforce is

762
00:28:28,059 --> 00:28:32,010
required to do but when Amazon tackled

763
00:28:30,309 --> 00:28:34,330
this they did something interesting

764
00:28:32,010 --> 00:28:35,620
demoed DynamoDB forces you to

765
00:28:34,330 --> 00:28:37,779
parameterize your precondition

766
00:28:35,620 --> 00:28:39,309
expressions if you try to concatenate or

767
00:28:37,779 --> 00:28:41,500
I'll type in there it's treated as

768
00:28:39,309 --> 00:28:43,210
invalid syntax you have to put it into

769
00:28:41,500 --> 00:28:44,860
the expression attribute values object

770
00:28:43,210 --> 00:28:46,180
there are other ways you can go about

771
00:28:44,860 --> 00:28:47,679
attacking these calls

772
00:28:46,180 --> 00:28:49,360
but they're a lot more limited than if

773
00:28:47,680 --> 00:28:51,580
you could inject into the syntax itself

774
00:28:49,360 --> 00:28:53,050
this call is kind of cumbersome but I

775
00:28:51,580 --> 00:28:56,189
think it's a worthy trade-off given the

776
00:28:53,050 --> 00:28:56,190
strength and protection this provides

777
00:28:57,060 --> 00:29:06,399
alright so now we'll get back to Apple

778
00:29:04,770 --> 00:29:08,290
since they're probably the worst

779
00:29:06,400 --> 00:29:09,700
offender in this talk after two months

780
00:29:08,290 --> 00:29:11,220
of silence they came back with this as

781
00:29:09,700 --> 00:29:13,240
justification for their architecture

782
00:29:11,220 --> 00:29:14,710
developers are responsible for

783
00:29:13,240 --> 00:29:16,690
implementing whatever security and

784
00:29:14,710 --> 00:29:18,670
networking best practices makes the most

785
00:29:16,690 --> 00:29:20,560
sense for this environment and when you

786
00:29:18,670 --> 00:29:22,930
see this you think oh that's that is a

787
00:29:20,560 --> 00:29:25,690
perfectly reasonable statement and this

788
00:29:22,930 --> 00:29:27,420
this is all true but the implication is

789
00:29:25,690 --> 00:29:31,900
that Apple has no culpability in this

790
00:29:27,420 --> 00:29:34,060
and that the responsibility is should

791
00:29:31,900 --> 00:29:36,460
all be sifted on the developers but

792
00:29:34,060 --> 00:29:38,080
luckily I've got another great book if

793
00:29:36,460 --> 00:29:41,140
you've built a chaos Factory you can't

794
00:29:38,080 --> 00:29:42,270
dodge responsibility for the chaos and

795
00:29:41,140 --> 00:29:45,000
you might be able to see the name there

796
00:29:42,270 --> 00:29:46,510
but both of these statements are right

797
00:29:45,000 --> 00:29:49,060
developers should not introduce

798
00:29:46,510 --> 00:29:51,010
vulnerabilities but when you expect

799
00:29:49,060 --> 00:29:52,750
people to add an endpoint somewhere you

800
00:29:51,010 --> 00:29:56,800
have some level of responsibility for

801
00:29:52,750 --> 00:29:58,230
the attack surface you create so but

802
00:29:56,800 --> 00:30:00,780
that's a purely ethical argument and

803
00:29:58,230 --> 00:30:02,980
might not do a appeal to a lot of people

804
00:30:00,780 --> 00:30:05,500
so let's look at some of the financial

805
00:30:02,980 --> 00:30:07,030
aspects of inductive weaknesses once

806
00:30:05,500 --> 00:30:08,290
research researchers start hunting for

807
00:30:07,030 --> 00:30:09,970
this stuff I imagine there will be a

808
00:30:08,290 --> 00:30:11,590
large financial incentive for API

809
00:30:09,970 --> 00:30:13,870
designers to start thinking about it I

810
00:30:11,590 --> 00:30:15,790
got some nice bounties out of the Apple

811
00:30:13,870 --> 00:30:18,250
pay issue and none of my work needed

812
00:30:15,790 --> 00:30:19,810
very different payloads and also none of

813
00:30:18,250 --> 00:30:21,550
those bounties were from Apple so I

814
00:30:19,810 --> 00:30:23,620
think it's fair to assume that once the

815
00:30:21,550 --> 00:30:26,200
stock is over some people are going to

816
00:30:23,620 --> 00:30:27,790
start applying my approach also think of

817
00:30:26,200 --> 00:30:31,450
where the new bounty hunters are going

818
00:30:27,790 --> 00:30:33,280
to report stuff you're seeing the most

819
00:30:31,450 --> 00:30:34,600
embarrassing consequence here but what

820
00:30:33,280 --> 00:30:36,370
if my talk hadn't been accepted in any

821
00:30:34,600 --> 00:30:39,610
conferences there was a lot of private

822
00:30:36,370 --> 00:30:41,199
embarrassment as well Apple thing didn't

823
00:30:39,610 --> 00:30:43,510
seem to think that SS Ark was much of an

824
00:30:41,200 --> 00:30:45,970
issue but the most websites are reported

825
00:30:43,510 --> 00:30:50,080
to did I wouldn't be surprised if the if

826
00:30:45,970 --> 00:30:51,520
they held that against Apple for another

827
00:30:50,080 --> 00:30:52,810
angle in software I'll do them if

828
00:30:51,520 --> 00:30:54,879
there's this concept of technical debt

829
00:30:52,810 --> 00:30:56,500
it's the idea that cutting corners early

830
00:30:54,880 --> 00:30:59,500
on has costs that accumulate as a

831
00:30:56,500 --> 00:31:00,340
project grows with regular tech debt the

832
00:30:59,500 --> 00:31:02,289
fix is residing

833
00:31:00,340 --> 00:31:04,260
own code base so the interest rate is

834
00:31:02,289 --> 00:31:06,850
tied to the growth of your own code base

835
00:31:04,260 --> 00:31:08,650
both inductive weaknesses the fixes are

836
00:31:06,850 --> 00:31:11,199
in your clients code and it's deployed

837
00:31:08,650 --> 00:31:12,669
all all sorts of different places so the

838
00:31:11,200 --> 00:31:15,039
interest rate is tied to how much

839
00:31:12,669 --> 00:31:16,510
adoption your API sees at a certain

840
00:31:15,039 --> 00:31:18,429
point if you want to pay down the debt

841
00:31:16,510 --> 00:31:20,559
you can't just put push out an update to

842
00:31:18,429 --> 00:31:23,140
your own code you have to contact your

843
00:31:20,559 --> 00:31:25,750
customers probably push out a braking

844
00:31:23,140 --> 00:31:26,919
braking change to your own API and then

845
00:31:25,750 --> 00:31:29,080
tell your customers they have an API

846
00:31:26,919 --> 00:31:32,289
that they have a vulnerability because

847
00:31:29,080 --> 00:31:34,570
they chose you but here's really what

848
00:31:32,289 --> 00:31:35,710
I'm asking for and it should be pretty

849
00:31:34,570 --> 00:31:38,889
cheap if you think about this stuff

850
00:31:35,710 --> 00:31:40,419
early I'd really like to like people to

851
00:31:38,890 --> 00:31:42,159
start scrutinizing their example code

852
00:31:40,419 --> 00:31:45,309
because it gets deployed a lot more

853
00:31:42,159 --> 00:31:47,200
often than you'd think I mentioned in

854
00:31:45,309 --> 00:31:48,760
response to the Apple pay issue one of

855
00:31:47,200 --> 00:31:51,000
the steps Apple took was just simply

856
00:31:48,760 --> 00:31:53,350
remove example code from their website

857
00:31:51,000 --> 00:31:56,279
but I did see that example code deployed

858
00:31:53,350 --> 00:31:58,899
in various forms across different places

859
00:31:56,279 --> 00:32:00,220
but in the process of scrutinizing your

860
00:31:58,899 --> 00:32:02,709
example code you may even discover

861
00:32:00,220 --> 00:32:04,440
inductive weaknesses if Apple had done

862
00:32:02,710 --> 00:32:06,820
so I wouldn't had much to talk about

863
00:32:04,440 --> 00:32:08,230
also keep in mind that a lot of

864
00:32:06,820 --> 00:32:09,908
developers don't realize quite how

865
00:32:08,230 --> 00:32:12,309
dangerous it is to hit an externally

866
00:32:09,909 --> 00:32:13,480
provided URL but if there's one thing I

867
00:32:12,309 --> 00:32:15,639
want people to take away from this talk

868
00:32:13,480 --> 00:32:19,149
it's that documentation is no excuse for

869
00:32:15,640 --> 00:32:21,010
bad architecture and here are the long

870
00:32:19,149 --> 00:32:23,408
form takeaways you can find a lot of

871
00:32:21,010 --> 00:32:25,510
vulnerabilities and owned by looking at

872
00:32:23,409 --> 00:32:27,880
an API finding a flaw and seeing who

873
00:32:25,510 --> 00:32:29,649
integrates with it we need to place more

874
00:32:27,880 --> 00:32:31,510
security more scrutiny on security

875
00:32:29,649 --> 00:32:33,428
weaknesses that induce others to write

876
00:32:31,510 --> 00:32:35,770
vulnerable code and while there's been a

877
00:32:33,429 --> 00:32:37,450
lot of recent work in unnecessary the

878
00:32:35,770 --> 00:32:41,679
software developer has a long way to go

879
00:32:37,450 --> 00:32:42,850
and defensively coating around URLs all

880
00:32:41,679 --> 00:32:44,799
right here the adnan fence I'd like to

881
00:32:42,850 --> 00:32:47,408
thank Jonathan pkc for asking some the

882
00:32:44,799 --> 00:32:49,510
initial questions here Arte at pkc for

883
00:32:47,409 --> 00:32:51,010
pointing me to the mexico stuff canopy

884
00:32:49,510 --> 00:32:52,779
casey for helping with the presentation

885
00:32:51,010 --> 00:32:55,480
and Andrew at the FF for legal

886
00:32:52,779 --> 00:32:58,080
assistance all right and thank you does

887
00:32:55,480 --> 00:32:58,080
anyone have any questions

888
00:32:59,399 --> 00:33:01,459
you

