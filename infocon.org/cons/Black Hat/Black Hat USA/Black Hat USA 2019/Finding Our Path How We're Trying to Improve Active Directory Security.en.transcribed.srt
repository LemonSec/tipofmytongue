1
00:00:00,030 --> 00:00:05,790
good morning welcome to finding our path

2
00:00:03,720 --> 00:00:09,440
how we're trying to improve Active

3
00:00:05,790 --> 00:00:13,139
Directory security in South Seas a b e

4
00:00:09,440 --> 00:00:15,959
with an d Robins will Schrader and Rohan

5
00:00:13,139 --> 00:00:18,359
Berserker before we begin a few brief

6
00:00:15,960 --> 00:00:20,820
notes stop by the business hall located

7
00:00:18,359 --> 00:00:23,609
in Mandalay ocean buff side and

8
00:00:20,820 --> 00:00:25,289
shoreline ballrooms on level 2 the

9
00:00:23,609 --> 00:00:29,310
blackhat Arsenal is in the business hall

10
00:00:25,289 --> 00:00:32,040
on level 2 lunch will be in Bayside a B

11
00:00:29,310 --> 00:00:34,290
from 1:00 to 2:30 and don't forget the

12
00:00:32,040 --> 00:00:35,610
merchandise store on level 2 and the

13
00:00:34,290 --> 00:00:37,290
session recordings from source of

14
00:00:35,610 --> 00:00:41,579
knowledge they I have a desk on every

15
00:00:37,290 --> 00:00:43,440
level before we begin please put your

16
00:00:41,579 --> 00:00:44,730
phone on vibrate it makes it easier for

17
00:00:43,440 --> 00:00:46,230
the rest of us to ignore the ringing

18
00:00:44,730 --> 00:00:48,750
while you wait for your voicemail to

19
00:00:46,230 --> 00:01:01,739
pick it up alright let's give a hand

20
00:00:48,750 --> 00:01:04,710
round of applause to our speakers hello

21
00:01:01,739 --> 00:01:07,380
everyone dude doing awesome today we're

22
00:01:04,709 --> 00:01:10,500
gonna be talking about the greatest tool

23
00:01:07,380 --> 00:01:14,640
of all time bloodhounds power review

24
00:01:10,500 --> 00:01:16,259
data power view actually all right so

25
00:01:14,640 --> 00:01:17,490
our talk is called finding your path how

26
00:01:16,259 --> 00:01:20,250
we're trying to improve Active Directory

27
00:01:17,490 --> 00:01:24,179
security this is us

28
00:01:20,250 --> 00:01:26,850
I'm Rohan I'm will I'm Andy alright

29
00:01:24,180 --> 00:01:27,720
introductions done alright so first of

30
00:01:26,850 --> 00:01:30,899
all we're gonna talk about a little bit

31
00:01:27,720 --> 00:01:32,579
of background here we released the

32
00:01:30,900 --> 00:01:36,299
Bloodhound project about three years ago

33
00:01:32,579 --> 00:01:39,809
now and we had some very significant

34
00:01:36,299 --> 00:01:41,659
problems to solve when we did so I do

35
00:01:39,810 --> 00:01:43,860
want to acknowledge some prior work

36
00:01:41,659 --> 00:01:46,640
these are really really cool stings

37
00:01:43,860 --> 00:01:49,380
especially like Metcalf's blog here and

38
00:01:46,640 --> 00:01:50,670
check all these out here is where we

39
00:01:49,380 --> 00:01:52,408
kind of started when we were trying to

40
00:01:50,670 --> 00:01:54,840
build bloodhound so we're standing on

41
00:01:52,409 --> 00:01:57,210
the shoulder of giants here whatever

42
00:01:54,840 --> 00:02:01,170
been possible without that all right

43
00:01:57,210 --> 00:02:03,119
what is bloodhound bloodhound is the

44
00:02:01,170 --> 00:02:05,820
tool we wrote and our goal was to apply

45
00:02:03,119 --> 00:02:08,459
graph theory to Active Directory we

46
00:02:05,820 --> 00:02:09,989
wanted to simplify privileged analysis

47
00:02:08,459 --> 00:02:11,430
in Active Directory which if anyone has

48
00:02:09,989 --> 00:02:12,120
tried to use built-in tools and Windows

49
00:02:11,430 --> 00:02:15,989
knows

50
00:02:12,120 --> 00:02:19,170
that is not easy it's very very arcane

51
00:02:15,989 --> 00:02:21,090
and not very easy to navigate so we

52
00:02:19,170 --> 00:02:22,950
wanted to visualize relationships in

53
00:02:21,090 --> 00:02:24,959
Active Directory and essentially build

54
00:02:22,950 --> 00:02:30,660
what we call Google Maps for Active

55
00:02:24,959 --> 00:02:32,700
Directory so we had a bunch of problems

56
00:02:30,660 --> 00:02:34,019
we had to solve one of them was how do

57
00:02:32,700 --> 00:02:36,869
you go from one place in Active

58
00:02:34,019 --> 00:02:39,239
Directory to another our background is

59
00:02:36,870 --> 00:02:41,879
pentesters and red teamers and often we

60
00:02:39,239 --> 00:02:42,390
drop it in a network and we were given

61
00:02:41,879 --> 00:02:45,179
an objective

62
00:02:42,390 --> 00:02:49,349
go get healthcare data go get da

63
00:02:45,180 --> 00:02:51,299
whatever happened to be and our original

64
00:02:49,349 --> 00:02:52,679
process would take a really long time so

65
00:02:51,299 --> 00:02:55,380
this was kind of our solution to the

66
00:02:52,680 --> 00:02:56,819
problem other problem we wanted to solve

67
00:02:55,380 --> 00:02:58,620
is how do you escalate your privileges

68
00:02:56,819 --> 00:03:00,359
without the scanning in the network many

69
00:02:58,620 --> 00:03:02,010
many many times I'm gonna demonstrate

70
00:03:00,360 --> 00:03:05,190
what I'm talking about in like the next

71
00:03:02,010 --> 00:03:08,459
slide here but we hit the network a lot

72
00:03:05,190 --> 00:03:09,989
when we used to operate and also how do

73
00:03:08,459 --> 00:03:13,049
you analyze permissions more efficiently

74
00:03:09,989 --> 00:03:15,629
than built-in tools so we're gonna tell

75
00:03:13,049 --> 00:03:17,220
the tale of two api's the two API is

76
00:03:15,629 --> 00:03:20,000
that Microsoft's have graciously

77
00:03:17,220 --> 00:03:22,350
provided to make our lives much easier

78
00:03:20,000 --> 00:03:24,750
but also was the basis for everything

79
00:03:22,350 --> 00:03:27,989
we're talking about here the first one

80
00:03:24,750 --> 00:03:30,389
is net session enum now the built in

81
00:03:27,989 --> 00:03:31,829
Windows net command has lots of juicy

82
00:03:30,389 --> 00:03:35,459
stuff in it and one of them is net

83
00:03:31,829 --> 00:03:37,530
sessions and underneath net sessions

84
00:03:35,459 --> 00:03:40,230
just uses the net session enum API call

85
00:03:37,530 --> 00:03:44,099
what's fun is that the actual API call

86
00:03:40,230 --> 00:03:47,040
has a nice little field for the server

87
00:03:44,099 --> 00:03:48,149
name so because it the API call is a

88
00:03:47,040 --> 00:03:49,739
little bit more complex than whether

89
00:03:48,150 --> 00:03:51,540
than that session binary does by

90
00:03:49,739 --> 00:03:54,389
implementing it directly we could

91
00:03:51,540 --> 00:03:56,819
enumerate remote server sessions so now

92
00:03:54,389 --> 00:03:59,849
we have a way to tell who's logged in

93
00:03:56,819 --> 00:04:02,910
where the second one is net local group

94
00:03:59,849 --> 00:04:05,099
yet members lets you retrieve a list of

95
00:04:02,910 --> 00:04:06,690
members of a local group the one which

96
00:04:05,099 --> 00:04:08,238
we were almost always most interested in

97
00:04:06,690 --> 00:04:11,819
being the administrators group

98
00:04:08,239 --> 00:04:13,560
administrators are awesome good lets you

99
00:04:11,819 --> 00:04:16,649
do whatever you want on a system get rid

100
00:04:13,560 --> 00:04:18,810
of all those pesky DDR solutions so

101
00:04:16,649 --> 00:04:21,149
again this one has a server name

102
00:04:18,810 --> 00:04:23,400
parameter so this allows us to renew

103
00:04:21,149 --> 00:04:26,698
marae remotely and check who's a local

104
00:04:23,400 --> 00:04:28,979
men on remote computers so let's let's

105
00:04:26,699 --> 00:04:32,280
tell a little story here we have a pen

106
00:04:28,979 --> 00:04:35,969
tester named Matt Nelson and he is pen

107
00:04:32,280 --> 00:04:37,739
testing the corn hub bio domain this is

108
00:04:35,970 --> 00:04:39,690
a nice little tiny office in Indiana

109
00:04:37,740 --> 00:04:42,919
gotta make sure that they're really

110
00:04:39,690 --> 00:04:45,870
secure so they have about nine computers

111
00:04:42,919 --> 00:04:47,190
that Nelson fishes and gets initial

112
00:04:45,870 --> 00:04:49,919
access on the computer in the middle

113
00:04:47,190 --> 00:04:52,410
right there so this is our old

114
00:04:49,919 --> 00:04:54,389
methodology here first thing you do you

115
00:04:52,410 --> 00:04:57,000
run find local admin access and Power

116
00:04:54,389 --> 00:04:59,310
View and now you've hit every single

117
00:04:57,000 --> 00:05:00,900
machine once we're gonna put a little

118
00:04:59,310 --> 00:05:02,389
number under each underneath each

119
00:05:00,900 --> 00:05:04,979
machine here so you guys can keep track

120
00:05:02,389 --> 00:05:08,210
we've found out we have admin on the two

121
00:05:04,979 --> 00:05:12,090
machines that have flags on them now so

122
00:05:08,210 --> 00:05:14,400
next thing we do is we run net session

123
00:05:12,090 --> 00:05:16,169
enum on those we try to see who's logged

124
00:05:14,400 --> 00:05:17,729
into those machines so we can get some

125
00:05:16,169 --> 00:05:20,549
kind of idea of what kind of creds we

126
00:05:17,729 --> 00:05:22,440
might get so we look at the user names

127
00:05:20,550 --> 00:05:24,479
that come back and we find absolutely

128
00:05:22,440 --> 00:05:26,759
nothing of value they're not domain

129
00:05:24,479 --> 00:05:28,620
admins they're not an any like super

130
00:05:26,759 --> 00:05:30,990
privileged group so let's just like

131
00:05:28,620 --> 00:05:33,990
blindly pick one computer here we're

132
00:05:30,990 --> 00:05:36,120
gonna go to the computer number four all

133
00:05:33,990 --> 00:05:38,610
right so now we're over here what's the

134
00:05:36,120 --> 00:05:40,650
next thing we do hey we hit the whole

135
00:05:38,610 --> 00:05:42,240
network all over again we're going to do

136
00:05:40,650 --> 00:05:44,340
find local admin access one more time

137
00:05:42,240 --> 00:05:45,810
because now we have a new credential

138
00:05:44,340 --> 00:05:48,388
that we've taken from this computer and

139
00:05:45,810 --> 00:05:50,280
we want to know where we have admin so

140
00:05:48,389 --> 00:05:53,550
now we've found admin a few more places

141
00:05:50,280 --> 00:05:55,409
and again the number increments we now

142
00:05:53,550 --> 00:05:57,389
we have to get net sessions on those

143
00:05:55,409 --> 00:06:00,300
computers so now we're up to three on

144
00:05:57,389 --> 00:06:02,150
those and we decide all right let's go

145
00:06:00,300 --> 00:06:04,710
to the bottom computer over there and

146
00:06:02,150 --> 00:06:07,109
this one looks juicy I think it's a da

147
00:06:04,710 --> 00:06:09,930
and we go over there sure enough we're

148
00:06:07,110 --> 00:06:11,669
domain admin yay we won but at this

149
00:06:09,930 --> 00:06:14,550
point we've hit every computer at least

150
00:06:11,669 --> 00:06:16,260
twice some three and this is a very very

151
00:06:14,550 --> 00:06:18,930
very small network this is just nine

152
00:06:16,260 --> 00:06:20,849
computers as the network scales up this

153
00:06:18,930 --> 00:06:22,680
number just keeps increasing as each

154
00:06:20,849 --> 00:06:24,949
step increases there's more and more

155
00:06:22,680 --> 00:06:30,150
network in numeration that's being done

156
00:06:24,949 --> 00:06:32,099
that's not good it's very very very slow

157
00:06:30,150 --> 00:06:33,929
to do this process when we used to run

158
00:06:32,099 --> 00:06:37,099
this process in larger environments this

159
00:06:33,930 --> 00:06:39,770
would take us weeks or months to execute

160
00:06:37,100 --> 00:06:42,260
weeks spent doing approvals escalation

161
00:06:39,770 --> 00:06:44,840
is a lot of time that removes post

162
00:06:42,260 --> 00:06:47,090
exploitation from your assessments as

163
00:06:44,840 --> 00:06:48,739
you get more and more Network hits your

164
00:06:47,090 --> 00:06:50,270
chance of getting caught also increases

165
00:06:48,740 --> 00:06:51,850
and if you're on a red team getting

166
00:06:50,270 --> 00:06:54,469
caught is no bueno

167
00:06:51,850 --> 00:06:56,330
and as you get bigger and bigger

168
00:06:54,470 --> 00:06:59,450
networks keeping track of what your

169
00:06:56,330 --> 00:07:01,010
enumerated gets harder and harder we

170
00:06:59,450 --> 00:07:03,200
used to try and solve this by using like

171
00:07:01,010 --> 00:07:06,650
Excel pivot tables which is like the

172
00:07:03,200 --> 00:07:09,349
worst thing you can possibly touch so we

173
00:07:06,650 --> 00:07:12,500
want to do it better and as it just so

174
00:07:09,350 --> 00:07:14,330
happens an entire branch of math that we

175
00:07:12,500 --> 00:07:17,420
all fell asleep during math class for

176
00:07:14,330 --> 00:07:20,780
exists to solve this problem so why are

177
00:07:17,420 --> 00:07:23,510
we doing this ourselves so let's let's

178
00:07:20,780 --> 00:07:25,489
do the new way so we drop in on the

179
00:07:23,510 --> 00:07:28,730
network right in the middle here and we

180
00:07:25,490 --> 00:07:30,380
run data collection for bloodhound we

181
00:07:28,730 --> 00:07:32,780
hit every computer in the domain twice

182
00:07:30,380 --> 00:07:35,300
once for that session once for local

183
00:07:32,780 --> 00:07:37,400
admin but instead of just blindly

184
00:07:35,300 --> 00:07:39,590
latently picking something we feed all

185
00:07:37,400 --> 00:07:41,599
this data into our tool and then we say

186
00:07:39,590 --> 00:07:43,940
let's make educated decisions where we

187
00:07:41,600 --> 00:07:45,830
need to go so instead of having to go to

188
00:07:43,940 --> 00:07:47,960
one computer and do an enumeration again

189
00:07:45,830 --> 00:07:49,400
we know exactly where we need to go and

190
00:07:47,960 --> 00:07:51,500
what we need to hit in order to get to

191
00:07:49,400 --> 00:07:53,810
where we need to be so there you go you

192
00:07:51,500 --> 00:07:55,580
do two steps you get the DA no more

193
00:07:53,810 --> 00:08:04,430
networking numeration no more extra

194
00:07:55,580 --> 00:08:06,620
steps you're just happy now sure all

195
00:08:04,430 --> 00:08:11,480
right we're gonna swap out our table

196
00:08:06,620 --> 00:08:14,090
here but wait there's more when you run

197
00:08:11,480 --> 00:08:16,970
sharp out you're not just getting basic

198
00:08:14,090 --> 00:08:18,710
local admins or sessions you're also

199
00:08:16,970 --> 00:08:20,570
getting lots of other things like are

200
00:08:18,710 --> 00:08:22,640
there any Kerberos misconfigurations who

201
00:08:20,570 --> 00:08:23,840
belongs to what group and how is that

202
00:08:22,640 --> 00:08:26,539
unrolled

203
00:08:23,840 --> 00:08:27,979
are there any abusable East ACLs in the

204
00:08:26,540 --> 00:08:29,600
environment that you could use which

205
00:08:27,980 --> 00:08:31,610
might even prevent you from needing to

206
00:08:29,600 --> 00:08:33,440
move laterally to another computer is

207
00:08:31,610 --> 00:08:35,330
there MS sequel servers that you might

208
00:08:33,440 --> 00:08:37,370
have admin to because of service

209
00:08:35,330 --> 00:08:44,450
principles and if you do can you use

210
00:08:37,370 --> 00:08:46,820
those to get where you need to go so in

211
00:08:44,450 --> 00:08:49,810
the real world we actually created

212
00:08:46,820 --> 00:08:51,670
bloodhound because we were in a massive

213
00:08:49,810 --> 00:08:53,890
massive organization with thousands of

214
00:08:51,670 --> 00:08:56,500
endpoints hundreds of thousands of

215
00:08:53,890 --> 00:08:58,689
endpoints as it were getting domain

216
00:08:56,500 --> 00:09:02,020
admin in a single domain in this network

217
00:08:58,690 --> 00:09:04,240
two weeks now the organization have

218
00:09:02,020 --> 00:09:06,699
literally hundreds of domains

219
00:09:04,240 --> 00:09:09,100
this was definitely did not spark joy

220
00:09:06,700 --> 00:09:12,540
knowing that getting to the top of the

221
00:09:09,100 --> 00:09:14,620
root was gonna take months potentially

222
00:09:12,540 --> 00:09:16,870
we built bloodhound as a proof of

223
00:09:14,620 --> 00:09:20,529
concept and we ran it data collection

224
00:09:16,870 --> 00:09:22,120
took no 48 hours about 48 hours and it

225
00:09:20,529 --> 00:09:24,250
showed us a path that went through seven

226
00:09:22,120 --> 00:09:27,420
different domains to compromise the

227
00:09:24,250 --> 00:09:31,270
forest route so 48 hours to go from

228
00:09:27,420 --> 00:09:38,140
beginning to end versus one week to get

229
00:09:31,270 --> 00:09:40,329
just da in one single domain so it's

230
00:09:38,140 --> 00:09:42,069
kind of the history of bloodhound the

231
00:09:40,330 --> 00:09:44,350
genesis how it came about we've been

232
00:09:42,070 --> 00:09:46,089
doing some new work in the past year so

233
00:09:44,350 --> 00:09:48,130
that means some new attack edges adding

234
00:09:46,089 --> 00:09:49,810
some cool new features so we wanted to

235
00:09:48,130 --> 00:09:52,779
go through an example attack path and

236
00:09:49,810 --> 00:09:54,699
show some of the more kind of niche cool

237
00:09:52,779 --> 00:09:56,470
like new Kerberos abuses that we've been

238
00:09:54,700 --> 00:09:57,820
able to implement it so as we're going

239
00:09:56,470 --> 00:09:59,230
through this attack path think to

240
00:09:57,820 --> 00:10:00,760
yourself okay

241
00:09:59,230 --> 00:10:02,290
these misconfigurations have been in the

242
00:10:00,760 --> 00:10:04,480
network or might be in your network for

243
00:10:02,290 --> 00:10:06,280
years would you have had any way to

244
00:10:04,480 --> 00:10:08,080
actually analyze and execute these

245
00:10:06,280 --> 00:10:10,120
things or actually realize the

246
00:10:08,080 --> 00:10:13,060
implication of the risk that some of

247
00:10:10,120 --> 00:10:15,720
these components would have but first

248
00:10:13,060 --> 00:10:18,310
we're going to talk about Kerberos

249
00:10:15,720 --> 00:10:19,690
there's an element in Kerberos called

250
00:10:18,310 --> 00:10:22,030
resource based constrained delegation

251
00:10:19,690 --> 00:10:23,740
where the the general motivation for

252
00:10:22,030 --> 00:10:26,470
delegation in general an active

253
00:10:23,740 --> 00:10:28,300
directory is a way to impersonate users

254
00:10:26,470 --> 00:10:31,180
just do user impersonation from the

255
00:10:28,300 --> 00:10:32,740
Active Directory context resource based

256
00:10:31,180 --> 00:10:35,920
constrained delegation as opposed to

257
00:10:32,740 --> 00:10:41,110
unconstrained or classic constrain is a

258
00:10:35,920 --> 00:10:44,020
modern so Server 2012 plus way to safely

259
00:10:41,110 --> 00:10:48,010
allow this type of user impersonation in

260
00:10:44,020 --> 00:10:50,920
the active directory context why is this

261
00:10:48,010 --> 00:10:52,810
needed for delegation in general so the

262
00:10:50,920 --> 00:10:55,089
classic example is if a user is

263
00:10:52,810 --> 00:10:57,640
authenticated into a front-end service

264
00:10:55,089 --> 00:10:59,740
say a web server that web server may

265
00:10:57,640 --> 00:11:01,060
need to impersonate that user when

266
00:10:59,740 --> 00:11:03,530
they're authenticating to a different

267
00:11:01,060 --> 00:11:05,060
back-end service say a sequel database

268
00:11:03,530 --> 00:11:06,949
so we've had some people say like why

269
00:11:05,060 --> 00:11:09,020
does Microsoft allow impersonation or

270
00:11:06,950 --> 00:11:12,680
delegation at all there are legitimate

271
00:11:09,020 --> 00:11:14,390
use cases for it the first take edit the

272
00:11:12,680 --> 00:11:15,829
Microsoft did with unconstrained is very

273
00:11:14,390 --> 00:11:17,330
dangerous for different reasons

274
00:11:15,830 --> 00:11:19,100
the second take they took it it would

275
00:11:17,330 --> 00:11:20,960
constrain had its own kind of elements

276
00:11:19,100 --> 00:11:23,330
potentially domain takeover depending on

277
00:11:20,960 --> 00:11:25,130
things so this is a their third take at

278
00:11:23,330 --> 00:11:26,720
delegation and overall it's a good

279
00:11:25,130 --> 00:11:30,520
system but it has unintended

280
00:11:26,720 --> 00:11:32,630
consequences that we love is pen testers

281
00:11:30,520 --> 00:11:34,699
but diving a little bit deeper for

282
00:11:32,630 --> 00:11:36,170
resource base how it actually works I'm

283
00:11:34,700 --> 00:11:37,910
not going to spend you know 10 minutes

284
00:11:36,170 --> 00:11:39,740
going over all the Kerberos internals

285
00:11:37,910 --> 00:11:41,540
and all that but resource based

286
00:11:39,740 --> 00:11:43,520
constrained delegation is implemented as

287
00:11:41,540 --> 00:11:45,740
a security descriptor a discretionary

288
00:11:43,520 --> 00:11:49,460
access control list on a target resource

289
00:11:45,740 --> 00:11:51,590
or computer object so this tackle this

290
00:11:49,460 --> 00:11:54,320
store is a serie of binary bytes and the

291
00:11:51,590 --> 00:11:56,270
msds allowed to allow to act on behalf

292
00:11:54,320 --> 00:11:59,960
of other identity it's a bit of a

293
00:11:56,270 --> 00:12:02,030
mouthful property this is just a simple

294
00:11:59,960 --> 00:12:04,760
ACL that defines who is allowed to

295
00:12:02,030 --> 00:12:07,550
impersonate any user to that target

296
00:12:04,760 --> 00:12:09,140
system the impersonation itself is

297
00:12:07,550 --> 00:12:11,510
executed through a series of two

298
00:12:09,140 --> 00:12:16,910
Kerberos extensions called s3 to self s

299
00:12:11,510 --> 00:12:18,800
or youtube proxy why does this matter so

300
00:12:16,910 --> 00:12:20,569
we had known about this for a while and

301
00:12:18,800 --> 00:12:22,339
one of the things we really cared about

302
00:12:20,570 --> 00:12:24,320
when we started bloodhound and doing the

303
00:12:22,339 --> 00:12:27,320
ACL based injection components is we

304
00:12:24,320 --> 00:12:29,210
wanted a computer ACL based takeover

305
00:12:27,320 --> 00:12:31,820
attack operative what what do we mean by

306
00:12:29,210 --> 00:12:34,430
that so for a user ACL based primitive

307
00:12:31,820 --> 00:12:36,110
we could if we had generic all or kind

308
00:12:34,430 --> 00:12:37,939
of edit rights admin rights over a user

309
00:12:36,110 --> 00:12:39,620
object itself we could reset their

310
00:12:37,940 --> 00:12:40,580
password that doesn't work with

311
00:12:39,620 --> 00:12:42,830
computers because they'll become

312
00:12:40,580 --> 00:12:45,200
disjoint from the domain so we've been

313
00:12:42,830 --> 00:12:47,630
waiting for an ACL based primitive for

314
00:12:45,200 --> 00:12:49,700
this and in spring of this year Evod

315
00:12:47,630 --> 00:12:51,980
Shamir or at least his really really

316
00:12:49,700 --> 00:12:54,470
awesome wagging the dog post on resource

317
00:12:51,980 --> 00:12:57,230
base constrained delegation abuse and

318
00:12:54,470 --> 00:13:00,110
his big finding is that non-portable s3

319
00:12:57,230 --> 00:13:03,140
to self tickets will still work for s4

320
00:13:00,110 --> 00:13:05,050
youtube proxy specifically in the case

321
00:13:03,140 --> 00:13:07,460
of resource based constrained delegation

322
00:13:05,050 --> 00:13:10,250
so what does that mean if you're not

323
00:13:07,460 --> 00:13:13,160
person Kerberos is this grants us a

324
00:13:10,250 --> 00:13:14,230
generalized ACL based computer takeover

325
00:13:13,160 --> 00:13:15,790
per image

326
00:13:14,230 --> 00:13:18,550
what does that mean in English in

327
00:13:15,790 --> 00:13:20,500
English if we can modify this one

328
00:13:18,550 --> 00:13:23,560
particular property on a target computer

329
00:13:20,500 --> 00:13:26,080
object we can completely compromise that

330
00:13:23,560 --> 00:13:32,949
computer and take it over we're going to

331
00:13:26,080 --> 00:13:35,110
show this an attack that so first any is

332
00:13:32,950 --> 00:13:38,410
in the show what this attack path would

333
00:13:35,110 --> 00:13:41,830
look like and bloodhound so here's the

334
00:13:38,410 --> 00:13:43,060
bloodhound interface whoa here's the

335
00:13:41,830 --> 00:13:46,180
bloodhound interface and we're saying

336
00:13:43,060 --> 00:13:47,130
the domain object in the contoso dot

337
00:13:46,180 --> 00:13:49,930
local domain

338
00:13:47,130 --> 00:13:53,110
give me the shortest attack paths to

339
00:13:49,930 --> 00:13:55,150
there and the graph will find all the

340
00:13:53,110 --> 00:13:56,800
shortest paths that exist from any node

341
00:13:55,150 --> 00:13:59,199
in the domain to that object

342
00:13:56,800 --> 00:14:00,130
this attack path starts at this desktop

343
00:13:59,200 --> 00:14:02,710
0:01

344
00:14:00,130 --> 00:14:04,990
computer as a session for Bob accounting

345
00:14:02,710 --> 00:14:07,390
that user belonged to this group called

346
00:14:04,990 --> 00:14:10,000
accounting support accounting support

347
00:14:07,390 --> 00:14:12,430
belongs to accounting admins so through

348
00:14:10,000 --> 00:14:15,100
security group delegation accounting

349
00:14:12,430 --> 00:14:17,739
admins has epidemic accounting 0 0 1 and

350
00:14:15,100 --> 00:14:19,840
so does Bob this computer in accounting

351
00:14:17,740 --> 00:14:22,030
has generic write over an exchange

352
00:14:19,840 --> 00:14:24,310
system which belongs to the exchange

353
00:14:22,030 --> 00:14:27,130
trusted sub system group and AD our

354
00:14:24,310 --> 00:14:29,140
favorite ad group favorite ad group that

355
00:14:27,130 --> 00:14:31,060
group has tons and tons of privileges

356
00:14:29,140 --> 00:14:33,580
including right tackle on the domain

357
00:14:31,060 --> 00:14:42,550
head so we're gonna execute this attack

358
00:14:33,580 --> 00:14:44,200
path in these video demos we're gonna

359
00:14:42,550 --> 00:14:47,469
skip part one just because it's a very

360
00:14:44,200 --> 00:14:50,950
basic thing it's local admin on a

361
00:14:47,470 --> 00:14:58,060
computer so PS exec WMI whatever you

362
00:14:50,950 --> 00:14:59,530
want okay so we're assuming that we're

363
00:14:58,060 --> 00:15:02,439
going to be on this accounting box we

364
00:14:59,530 --> 00:15:05,740
compromised that first hop we're gonna

365
00:15:02,440 --> 00:15:07,480
show the verification of the ACLs that

366
00:15:05,740 --> 00:15:09,280
bloodhound was able to find but first

367
00:15:07,480 --> 00:15:12,220
we're on the system or on accounting

368
00:15:09,280 --> 00:15:16,150
we're gonna escalate to the system user

369
00:15:12,220 --> 00:15:20,850
context but showing like ok even

370
00:15:16,150 --> 00:15:20,850
whatever context were in we do not have

371
00:15:21,300 --> 00:15:25,410
we do not have rights over that target

372
00:15:24,280 --> 00:15:29,459
box

373
00:15:25,410 --> 00:15:31,829
so we will escalate up the system

374
00:15:29,459 --> 00:15:33,329
because the system user context will use

375
00:15:31,829 --> 00:15:36,959
the Machine account from whatever box

376
00:15:33,329 --> 00:15:38,699
you're on see access denied

377
00:15:36,959 --> 00:15:40,018
because we haven't actually executed

378
00:15:38,699 --> 00:15:42,959
this resource-based constrained

379
00:15:40,019 --> 00:15:45,059
delegation attack better yet so we're

380
00:15:42,959 --> 00:15:47,638
gonna load up Power View to do our

381
00:15:45,059 --> 00:15:48,899
active directory analysis we're also

382
00:15:47,639 --> 00:15:50,459
gonna load up Kevin Robertson's

383
00:15:48,899 --> 00:15:51,839
power-mad which abuses the machine

384
00:15:50,459 --> 00:15:54,089
account quota component of active

385
00:15:51,839 --> 00:15:56,029
directory to provision new machine

386
00:15:54,089 --> 00:15:58,859
accounts in a way that we can control

387
00:15:56,029 --> 00:16:00,989
so our target computer in this example

388
00:15:58,859 --> 00:16:02,669
is going to be the exchange server this

389
00:16:00,989 --> 00:16:05,729
is the machine that our current machine

390
00:16:02,669 --> 00:16:08,339
has edit rights over we're going to pull

391
00:16:05,729 --> 00:16:09,689
our actual attacker Sid so this is the

392
00:16:08,339 --> 00:16:11,759
SID of the computer we're currently on

393
00:16:09,689 --> 00:16:14,069
this is who has edit rights over that

394
00:16:11,759 --> 00:16:15,959
target system then we're going to show

395
00:16:14,069 --> 00:16:18,089
the ACL base we're just gonna pull the

396
00:16:15,959 --> 00:16:21,598
the dackel the ACLs for that target

397
00:16:18,089 --> 00:16:24,569
computer on the exchange box if we

398
00:16:21,599 --> 00:16:28,079
examine the ace we see ok there's a

399
00:16:24,569 --> 00:16:30,299
generic all right over the exchange

400
00:16:28,079 --> 00:16:32,039
system by the security identifier what

401
00:16:30,299 --> 00:16:33,899
happens which happens to match what our

402
00:16:32,039 --> 00:16:36,239
current computer security identifier is

403
00:16:33,899 --> 00:16:38,249
so this is just simple verification of

404
00:16:36,239 --> 00:16:42,509
the actual ACL information the

405
00:16:38,249 --> 00:16:44,999
bloodhound was able to enumerate the

406
00:16:42,509 --> 00:16:47,819
next steps we want to actually execute

407
00:16:44,999 --> 00:16:51,149
this this attack that we are going to

408
00:16:47,819 --> 00:16:54,089
first use Powermat from Kevin Robertson

409
00:16:51,149 --> 00:16:56,819
to provision a new machine account with

410
00:16:54,089 --> 00:16:58,259
a password that we control this is

411
00:16:56,819 --> 00:16:59,699
because we need an account we need

412
00:16:58,259 --> 00:17:01,589
complete control of an account that has

413
00:16:59,699 --> 00:17:03,478
a service principle name set to actually

414
00:17:01,589 --> 00:17:06,779
execute the resource based constrained

415
00:17:03,479 --> 00:17:09,839
delegation path we're gonna grab the

416
00:17:06,779 --> 00:17:11,128
computer set these this is the this

417
00:17:09,839 --> 00:17:13,230
computer says is going to become the

418
00:17:11,128 --> 00:17:15,719
principal in the ACL that we actually

419
00:17:13,230 --> 00:17:17,699
construct the general approach is we

420
00:17:15,720 --> 00:17:19,289
need to create this ACL set it to a

421
00:17:17,699 --> 00:17:21,299
particular property on the target and

422
00:17:19,289 --> 00:17:23,490
then we're going to execute the s for

423
00:17:21,299 --> 00:17:25,970
you to self and proxy component for

424
00:17:23,490 --> 00:17:29,490
resource based constrained delegation so

425
00:17:25,970 --> 00:17:29,940
create the ACL very easy to do in

426
00:17:29,490 --> 00:17:31,860
PowerShell

427
00:17:29,940 --> 00:17:34,350
we're gonna get the binary bytes that

428
00:17:31,860 --> 00:17:36,929
ACL and we're going to use that and set

429
00:17:34,350 --> 00:17:39,360
against the MSDS a lot to act on

430
00:17:36,930 --> 00:17:40,800
Oh what can never burn off the whole

431
00:17:39,360 --> 00:17:42,439
thing it's a little too long so part of

432
00:17:40,800 --> 00:17:46,560
the axe

433
00:17:42,440 --> 00:17:48,810
grab the binary form we're going to just

434
00:17:46,560 --> 00:17:51,870
use a simple l dot property set against

435
00:17:48,810 --> 00:17:54,240
the target and after that we're going to

436
00:17:51,870 --> 00:17:56,820
pull the ACL to just verify that we

437
00:17:54,240 --> 00:18:00,830
actually did the correct LDAP set on

438
00:17:56,820 --> 00:18:03,149
this component the puller all raw bytes

439
00:18:00,830 --> 00:18:05,100
we're going to transform that back into

440
00:18:03,150 --> 00:18:07,350
a security descriptor and pull out the

441
00:18:05,100 --> 00:18:10,889
discretionary component of the ACL for

442
00:18:07,350 --> 00:18:12,199
verification but still you can actually

443
00:18:10,890 --> 00:18:14,730
do this we're not gonna have

444
00:18:12,200 --> 00:18:16,320
administrative rights against the target

445
00:18:14,730 --> 00:18:18,750
system because we have to go through a

446
00:18:16,320 --> 00:18:21,600
fairly complex Kerberos ticket exchange

447
00:18:18,750 --> 00:18:23,580
process to actually get the final

448
00:18:21,600 --> 00:18:27,750
service ticket that we want against the

449
00:18:23,580 --> 00:18:30,689
target verification everything matches

450
00:18:27,750 --> 00:18:34,530
up everything's great still don't have

451
00:18:30,690 --> 00:18:37,560
admin rights ok the next bit we're going

452
00:18:34,530 --> 00:18:39,840
to do is use a tool that we wrote called

453
00:18:37,560 --> 00:18:42,149
Rubeus which is a Kerberos abuse toolkit

454
00:18:39,840 --> 00:18:44,850
that heavily heavily pulls from benjamin

455
00:18:42,150 --> 00:18:47,340
deltas kikyo project we're in a hash of

456
00:18:44,850 --> 00:18:51,270
our password then we're going to use the

457
00:18:47,340 --> 00:18:52,709
s4 you module our command and Rubeus to

458
00:18:51,270 --> 00:18:55,500
actually execute this whole process

459
00:18:52,710 --> 00:18:58,110
which will first get a TGT for this

460
00:18:55,500 --> 00:18:59,700
dummy system account we created it'll do

461
00:18:58,110 --> 00:19:01,350
that for you to self to itself to

462
00:18:59,700 --> 00:19:03,660
impersonate an administrators or

463
00:19:01,350 --> 00:19:05,909
pretending to be the domain admin then

464
00:19:03,660 --> 00:19:09,360
it'll do this for you to proxy protocol

465
00:19:05,910 --> 00:19:12,120
transition ending with a full ticket for

466
00:19:09,360 --> 00:19:13,500
CIFS or the file system we're then going

467
00:19:12,120 --> 00:19:17,100
to apply that ticket to our current

468
00:19:13,500 --> 00:19:22,320
logon session and after this we're able

469
00:19:17,100 --> 00:19:25,500
to compromise the exchange box awesome

470
00:19:22,320 --> 00:19:28,500
there we go alright let's step one of

471
00:19:25,500 --> 00:19:35,010
that whole path that Andy outline in the

472
00:19:28,500 --> 00:19:36,600
bloodhound analysis component step two

473
00:19:35,010 --> 00:19:41,400
we're moving to the exchange server

474
00:19:36,600 --> 00:19:44,189
itself so now we're on the exchange box

475
00:19:41,400 --> 00:19:46,740
see exchange o1 and this is the computer

476
00:19:44,190 --> 00:19:49,410
account that because of the Nestene in

477
00:19:46,740 --> 00:19:51,809
exchange trusted subsystem is gonna have

478
00:19:49,410 --> 00:19:54,510
right deco rights over the domain root

479
00:19:51,809 --> 00:19:57,899
this means that we can grant ourselves

480
00:19:54,510 --> 00:19:59,670
DC sync privileges DC sync is a the

481
00:19:57,900 --> 00:20:03,050
reimplementation of the DC replication

482
00:19:59,670 --> 00:20:06,240
protocol by Vincent Lee - and Benjamin

483
00:20:03,050 --> 00:20:08,100
so we're gonna run this and because we

484
00:20:06,240 --> 00:20:11,670
have these edit rights we can't just DC

485
00:20:08,100 --> 00:20:13,559
sync immediately we have control rights

486
00:20:11,670 --> 00:20:18,870
over the target we don't have the DC

487
00:20:13,559 --> 00:20:20,550
sync rights itself yet and you can do

488
00:20:18,870 --> 00:20:21,899
any of these like a CL bias

489
00:20:20,550 --> 00:20:23,909
modifications you don't have to use

490
00:20:21,900 --> 00:20:26,130
Power View anything that has just LDAP

491
00:20:23,910 --> 00:20:28,860
property modification can be used to

492
00:20:26,130 --> 00:20:35,220
execute this PAP so we're going to use

493
00:20:28,860 --> 00:20:37,919
the C import power view we're gonna get

494
00:20:35,220 --> 00:20:39,780
the we need to get the identity the CID

495
00:20:37,920 --> 00:20:46,890
of the chain trusted subsystem we're

496
00:20:39,780 --> 00:20:48,540
verifying this okay that's one 603 then

497
00:20:46,890 --> 00:20:50,670
we're gonna verify some of the ACL

498
00:20:48,540 --> 00:20:52,770
information for the attack that but

499
00:20:50,670 --> 00:20:56,970
because this we know okay exchange

500
00:20:52,770 --> 00:20:58,950
trusted we can add and modify an ACL on

501
00:20:56,970 --> 00:21:02,580
the root domain object where the

502
00:20:58,950 --> 00:21:05,790
principal is the extreme trusted

503
00:21:02,580 --> 00:21:09,840
subsystem itself we're gonna grant

504
00:21:05,790 --> 00:21:14,070
ourselves DC sync rights everything's

505
00:21:09,840 --> 00:21:16,530
gonna execute through and now we're

506
00:21:14,070 --> 00:21:18,059
gonna have now we can synchronize and

507
00:21:16,530 --> 00:21:19,740
retrieve the password credential

508
00:21:18,059 --> 00:21:23,970
material for any use in the domain so

509
00:21:19,740 --> 00:21:27,990
say krbtgt we get our hash we can create

510
00:21:23,970 --> 00:21:29,820
all of our awesome golden tickets so

511
00:21:27,990 --> 00:21:32,309
that's a fairly complex path with a lot

512
00:21:29,820 --> 00:21:33,870
of moving pieces that even as of like a

513
00:21:32,309 --> 00:21:35,730
year or so ago we would not have been

514
00:21:33,870 --> 00:21:37,949
able to enumerate and find but these are

515
00:21:35,730 --> 00:21:39,780
miss configurations that have existed in

516
00:21:37,950 --> 00:21:41,490
domains and existing domains and have

517
00:21:39,780 --> 00:21:43,200
been around for years we just don't

518
00:21:41,490 --> 00:21:48,480
realize the full risk and implication of

519
00:21:43,200 --> 00:21:51,390
it okay so

520
00:21:48,480 --> 00:21:53,870
what are we trying to do about this do

521
00:21:51,390 --> 00:21:56,190
you hear a lot of feedback from my voice

522
00:21:53,870 --> 00:22:00,570
okay

523
00:21:56,190 --> 00:22:04,080
I'll just keep on so our answer to this

524
00:22:00,570 --> 00:22:07,730
as far as what can we do to efficiently

525
00:22:04,080 --> 00:22:10,530
and empirically understand enumerate and

526
00:22:07,730 --> 00:22:13,080
remediate these attack paths in Active

527
00:22:10,530 --> 00:22:17,160
Directory is this it's our adversary

528
00:22:13,080 --> 00:22:19,500
resilience methodology a lot of this is

529
00:22:17,160 --> 00:22:22,100
based on this quote from John Lambert in

530
00:22:19,500 --> 00:22:25,020
his blog post with this tile right here

531
00:22:22,100 --> 00:22:27,240
attackers think in graphs defenders

532
00:22:25,020 --> 00:22:30,090
think in lists as long as this is true

533
00:22:27,240 --> 00:22:31,650
attackers when you would think that

534
00:22:30,090 --> 00:22:33,290
we're contractually obligated to have

535
00:22:31,650 --> 00:22:35,640
this quote in every talk that we have

536
00:22:33,290 --> 00:22:39,379
but really this is a timeless and

537
00:22:35,640 --> 00:22:41,490
extremely insightful quote from John

538
00:22:39,380 --> 00:22:43,920
this is what our methodology it looks

539
00:22:41,490 --> 00:22:45,750
like so starting at the top left we

540
00:22:43,920 --> 00:22:47,940
enumerate attack paths that's using

541
00:22:45,750 --> 00:22:50,490
bloodhound we analyze the attack paths

542
00:22:47,940 --> 00:22:54,090
to understand what patterns we can

543
00:22:50,490 --> 00:22:55,890
ferret out from that data and then the

544
00:22:54,090 --> 00:22:58,350
most difficult part of this methodology

545
00:22:55,890 --> 00:23:01,890
is in generating and validating those

546
00:22:58,350 --> 00:23:03,480
remediation hypotheses and then finally

547
00:23:01,890 --> 00:23:07,380
we deploy our prior talk to prioritize

548
00:23:03,480 --> 00:23:10,590
fixes and start all over again we're

549
00:23:07,380 --> 00:23:12,360
gonna focus here initially on analyzing

550
00:23:10,590 --> 00:23:15,990
these attack paths that bloodhound shows

551
00:23:12,360 --> 00:23:18,870
us so our objective here we want to find

552
00:23:15,990 --> 00:23:21,570
critical low-hanging fruit we want to

553
00:23:18,870 --> 00:23:24,629
generate basic descriptive statistics

554
00:23:21,570 --> 00:23:26,870
and measure our overall security posture

555
00:23:24,630 --> 00:23:32,150
in Active Directory based on these

556
00:23:26,870 --> 00:23:35,189
misconfigurations and user behaviors so

557
00:23:32,150 --> 00:23:38,190
before bloodhound was created it was

558
00:23:35,190 --> 00:23:39,570
very very difficult to take any given

559
00:23:38,190 --> 00:23:41,640
principal and Active Directory and

560
00:23:39,570 --> 00:23:44,220
determine what privileges are held by

561
00:23:41,640 --> 00:23:45,660
this principal because of the nature of

562
00:23:44,220 --> 00:23:47,490
Active Directory permissions they are

563
00:23:45,660 --> 00:23:50,640
discretionary so they are inbound on

564
00:23:47,490 --> 00:23:52,470
objects and outbound privileges there is

565
00:23:50,640 --> 00:23:56,370
no native way in Windows or Active

566
00:23:52,470 --> 00:23:59,280
Directory to enumerate that with the

567
00:23:56,370 --> 00:24:00,389
bloodhound data we can so this is a very

568
00:23:59,280 --> 00:24:03,269
basic

569
00:24:00,390 --> 00:24:05,789
descriptive statistic that we do for our

570
00:24:03,269 --> 00:24:08,010
customers by the way everything we're

571
00:24:05,789 --> 00:24:09,419
talking about this in this talk is free

572
00:24:08,010 --> 00:24:11,850
and open source so there's nothing in

573
00:24:09,419 --> 00:24:14,159
here that is like private or secret or

574
00:24:11,850 --> 00:24:15,539
anything what we're looking at here is

575
00:24:14,159 --> 00:24:17,159
just in descending order what are the

576
00:24:15,539 --> 00:24:19,890
most privileged groups in Active

577
00:24:17,159 --> 00:24:22,529
Directory and from this chart you can

578
00:24:19,890 --> 00:24:25,970
see some very immediate insights that

579
00:24:22,529 --> 00:24:27,990
would launch you into a little more of

580
00:24:25,970 --> 00:24:31,320
investigative process to figure out why

581
00:24:27,990 --> 00:24:33,240
these why this is the way this is an one

582
00:24:31,320 --> 00:24:34,260
example is the domain admins group you

583
00:24:33,240 --> 00:24:37,230
would expect that to be the most

584
00:24:34,260 --> 00:24:40,080
privileged group an ad in this data set

585
00:24:37,230 --> 00:24:41,250
which is based on real data the names

586
00:24:40,080 --> 00:24:43,529
have been changed to protect the

587
00:24:41,250 --> 00:24:45,480
innocent the domain admins group is

588
00:24:43,529 --> 00:24:47,580
barely even in the top five of the most

589
00:24:45,480 --> 00:24:50,700
privileged ad groups sometimes it's not

590
00:24:47,580 --> 00:24:52,740
even in top ten so Shawn Metcalf has a

591
00:24:50,700 --> 00:24:54,419
fantastic blog post about how domain

592
00:24:52,740 --> 00:24:56,279
admin is you know just the tip of the

593
00:24:54,419 --> 00:25:00,059
iceberg we should be going far beyond

594
00:24:56,279 --> 00:25:02,490
domain admin but still da is like the

595
00:25:00,059 --> 00:25:04,620
most obvious target something else you

596
00:25:02,490 --> 00:25:07,320
can look at is there are these helpdesk

597
00:25:04,620 --> 00:25:08,549
tier 1 2 & 3 groups that you would think

598
00:25:07,320 --> 00:25:10,289
they would have a different level of

599
00:25:08,549 --> 00:25:12,629
privilege in AD but for some reason they

600
00:25:10,289 --> 00:25:14,549
have all the exact same privilege which

601
00:25:12,630 --> 00:25:18,570
kind of defies our at least privilege

602
00:25:14,549 --> 00:25:19,918
goals so in this chart we can we can

603
00:25:18,570 --> 00:25:21,480
understand what the privileges are

604
00:25:19,919 --> 00:25:23,130
they're held by the most sensitive

605
00:25:21,480 --> 00:25:26,340
groups what those miss the most

606
00:25:23,130 --> 00:25:28,110
sensitive verbs actually are and start

607
00:25:26,340 --> 00:25:30,149
digging into how we can protect the

608
00:25:28,110 --> 00:25:33,389
users and other identities that belong

609
00:25:30,149 --> 00:25:34,110
to these groups so what about the other

610
00:25:33,389 --> 00:25:38,549
way around

611
00:25:34,110 --> 00:25:40,740
what about computers in my domain sorted

612
00:25:38,549 --> 00:25:43,200
in descending order of the most admins

613
00:25:40,740 --> 00:25:45,059
that exist on each of those so this is

614
00:25:43,200 --> 00:25:47,820
based on fake data that we created with

615
00:25:45,059 --> 00:25:49,590
our blood on DB creator script and you

616
00:25:47,820 --> 00:25:51,330
can see like very obviously at the very

617
00:25:49,590 --> 00:25:53,309
top there are these four computers that

618
00:25:51,330 --> 00:25:56,220
have way more admins than any other

619
00:25:53,309 --> 00:25:58,590
system and the network does in reality

620
00:25:56,220 --> 00:26:01,279
this chart looks exactly like this in

621
00:25:58,590 --> 00:26:03,899
real environments but the numbers are

622
00:26:01,279 --> 00:26:05,820
astronomically large and sometimes

623
00:26:03,899 --> 00:26:08,370
that's because the domain users group

624
00:26:05,820 --> 00:26:10,189
gets added to the local admins group but

625
00:26:08,370 --> 00:26:12,629
sometimes it's also because a different

626
00:26:10,190 --> 00:26:15,210
all-inclusive non default

627
00:26:12,630 --> 00:26:17,400
built-in ad group has been added either

628
00:26:15,210 --> 00:26:19,200
to a privileged group or has been

629
00:26:17,400 --> 00:26:23,400
directly edited local admins group on a

630
00:26:19,200 --> 00:26:24,840
system with traditional auditing tools

631
00:26:23,400 --> 00:26:27,090
you really can't determine this

632
00:26:24,840 --> 00:26:30,689
information easily what that makes it

633
00:26:27,090 --> 00:26:35,520
super easy so we're going to look at

634
00:26:30,690 --> 00:26:37,050
another video this this slide right here

635
00:26:35,520 --> 00:26:40,020
at the very top we can see that this

636
00:26:37,050 --> 00:26:42,330
comp 0 0 0 3 computer has way more

637
00:26:40,020 --> 00:26:44,550
admins than any other computer does it's

638
00:26:42,330 --> 00:26:47,909
a part of a group of 4 other computers

639
00:26:44,550 --> 00:26:49,050
that have that many admins so in the

640
00:26:47,910 --> 00:26:50,340
bloodhound UI we can look up that

641
00:26:49,050 --> 00:26:54,629
computer and we can figure out what's

642
00:26:50,340 --> 00:26:56,580
going on any asset that's tracking

643
00:26:54,630 --> 00:26:59,100
bloodhound you can just like just like

644
00:26:56,580 --> 00:27:00,840
Google Maps you search for it we'll

645
00:26:59,100 --> 00:27:02,459
click on the computer and then under

646
00:27:00,840 --> 00:27:04,169
this local admin section we can see that

647
00:27:02,460 --> 00:27:06,510
there are six principles that are

648
00:27:04,170 --> 00:27:08,790
actually added to the domain evidence

649
00:27:06,510 --> 00:27:10,890
group but then if we unroll that out

650
00:27:08,790 --> 00:27:12,780
there's actually 500 different users

651
00:27:10,890 --> 00:27:13,980
that have evan rights on that system and

652
00:27:12,780 --> 00:27:15,510
it's all because of that right there

653
00:27:13,980 --> 00:27:17,280
that domain users group has been added

654
00:27:15,510 --> 00:27:19,710
to the local admins group on that

655
00:27:17,280 --> 00:27:23,280
computer so as far as finding

656
00:27:19,710 --> 00:27:24,870
low-hanging fruit an ad on the

657
00:27:23,280 --> 00:27:29,310
assessments that we do we find this on

658
00:27:24,870 --> 00:27:31,709
day one and usually eyes are kind of

659
00:27:29,310 --> 00:27:41,399
like big and like people are terrified

660
00:27:31,710 --> 00:27:45,560
to see this kind of stuff all right what

661
00:27:41,400 --> 00:27:48,270
about Kerberos Kerberos sting

662
00:27:45,560 --> 00:27:50,429
fundamentally changed how we operated as

663
00:27:48,270 --> 00:27:54,120
red teamers because it gave us a

664
00:27:50,430 --> 00:27:57,330
capability to do password cracking

665
00:27:54,120 --> 00:27:59,729
attempts on usually very high privileged

666
00:27:57,330 --> 00:28:01,710
users in AD from any domain

667
00:27:59,730 --> 00:28:03,930
authenticated context and do this kind

668
00:28:01,710 --> 00:28:08,250
of offline brute-force attack against a

669
00:28:03,930 --> 00:28:11,070
curb 5 TGS ticket but how do you

670
00:28:08,250 --> 00:28:13,500
prioritize as a red teamer what users

671
00:28:11,070 --> 00:28:16,080
are actually interesting to go after so

672
00:28:13,500 --> 00:28:17,610
in the Bloodhound data we can again look

673
00:28:16,080 --> 00:28:20,730
at any principle and determine what

674
00:28:17,610 --> 00:28:22,110
privileges they have and on red teams

675
00:28:20,730 --> 00:28:24,269
this is exactly what we do

676
00:28:22,110 --> 00:28:26,399
we'll find ok here are the ten you

677
00:28:24,269 --> 00:28:28,349
kerberos table and one of them is a

678
00:28:26,399 --> 00:28:31,039
domain admin or one of them has admin

679
00:28:28,349 --> 00:28:33,029
rights on 50% of the boxes or whatever

680
00:28:31,039 --> 00:28:34,589
so they can be kind of interesting and

681
00:28:33,029 --> 00:28:36,539
that can be very helpful to chart out in

682
00:28:34,589 --> 00:28:38,820
a way like this so we can kind of have a

683
00:28:36,539 --> 00:28:41,609
hit list of okay you should be

684
00:28:38,820 --> 00:28:43,859
remediating these users first because of

685
00:28:41,609 --> 00:28:44,999
the level of privilege so that's one

686
00:28:43,859 --> 00:28:46,678
thing that's kind of interesting but

687
00:28:44,999 --> 00:28:49,109
what if we also add another element to

688
00:28:46,679 --> 00:28:51,479
this what if we say alright these are my

689
00:28:49,109 --> 00:28:54,449
Kerberos table users but the Kerberos

690
00:28:51,479 --> 00:28:56,129
attack being successful depends on that

691
00:28:54,450 --> 00:28:58,289
user having a weak password that can

692
00:28:56,129 --> 00:29:00,509
actually be broken okay well let's try

693
00:28:58,289 --> 00:29:02,399
to break all of them so here's all of

694
00:29:00,509 --> 00:29:03,959
our users that our Kerberos LaBolt that

695
00:29:02,399 --> 00:29:06,268
also have a weak password that we were

696
00:29:03,959 --> 00:29:08,940
able to crack a password within some

697
00:29:06,269 --> 00:29:11,729
reasonable time frame 24 hours 48 hours

698
00:29:08,940 --> 00:29:13,619
whatever so when you're looking for

699
00:29:11,729 --> 00:29:15,179
remediation strategy you're looking for

700
00:29:13,619 --> 00:29:17,639
low-hanging fruit which is exactly what

701
00:29:15,179 --> 00:29:20,190
we're talking about here this is like

702
00:29:17,639 --> 00:29:22,258
zooming in and saying here is your

703
00:29:20,190 --> 00:29:24,629
extreme risk you need to fix this

704
00:29:22,259 --> 00:29:26,579
immediately there was a customer that we

705
00:29:24,629 --> 00:29:29,158
did this for recently and there was a

706
00:29:26,579 --> 00:29:32,249
user that had admin rights on 97% of

707
00:29:29,159 --> 00:29:35,039
their systems password has changed let's

708
00:29:32,249 --> 00:29:37,589
just say a long time ago we showed them

709
00:29:35,039 --> 00:29:40,619
this chart and they deleted the user

710
00:29:37,589 --> 00:29:43,049
within the hour a huge amount of attack

711
00:29:40,619 --> 00:29:47,968
surface was removed basically

712
00:29:43,049 --> 00:29:51,299
instantaneously so pretty big win what

713
00:29:47,969 --> 00:29:53,909
about this so when we're looking at

714
00:29:51,299 --> 00:29:57,599
strategies to figure out how can we

715
00:29:53,909 --> 00:30:01,529
reduce attack surface and AD it's useful

716
00:29:57,599 --> 00:30:04,708
to have very basic statistics that will

717
00:30:01,529 --> 00:30:07,379
apply to any domain and so we hone in on

718
00:30:04,709 --> 00:30:10,349
this we hone in on what percentage of

719
00:30:07,379 --> 00:30:12,269
users in Active Directory can compromise

720
00:30:10,349 --> 00:30:14,939
a domain admin this is a very simple

721
00:30:12,269 --> 00:30:20,879
concept that we can actually empirically

722
00:30:14,940 --> 00:30:23,669
measure thanks to this tool what do I

723
00:30:20,879 --> 00:30:25,859
want to say I want to say that is very

724
00:30:23,669 --> 00:30:30,749
common that this number is a hundred

725
00:30:25,859 --> 00:30:33,119
percent in Active Directory so let's go

726
00:30:30,749 --> 00:30:35,249
back to our overall resilience

727
00:30:33,119 --> 00:30:37,830
methodology and now we want to look at

728
00:30:35,249 --> 00:30:40,799
how we can generate and validate these

729
00:30:37,830 --> 00:30:42,240
so to save your mediation hypotheses and

730
00:30:40,799 --> 00:30:44,490
our objective here is to eliminate or

731
00:30:42,240 --> 00:30:48,120
mitigate as many attack paths as

732
00:30:44,490 --> 00:30:50,370
possible using practical and measurably

733
00:30:48,120 --> 00:30:53,850
effective strategies before we actually

734
00:30:50,370 --> 00:30:56,518
attempt to deploy them in production so

735
00:30:53,850 --> 00:30:58,350
when we say practical we mean we don't

736
00:30:56,519 --> 00:31:00,570
want to go in someplace or you don't

737
00:30:58,350 --> 00:31:03,240
want to do this yourself and then come

738
00:31:00,570 --> 00:31:05,129
back and say well you just have to re

739
00:31:03,240 --> 00:31:07,350
are protecting entire forests it's easy

740
00:31:05,130 --> 00:31:09,240
and everything will be fixed everything

741
00:31:07,350 --> 00:31:11,039
will be solved don't more tourists

742
00:31:09,240 --> 00:31:14,370
tomorrow yeah I will do it we'll go

743
00:31:11,039 --> 00:31:16,080
tomorrow it's not practical for most

744
00:31:14,370 --> 00:31:18,689
organizations to go through that process

745
00:31:16,080 --> 00:31:21,330
that process can also be extremely

746
00:31:18,690 --> 00:31:23,940
expensive as a lot of people know so

747
00:31:21,330 --> 00:31:26,699
what we're looking for are the so to say

748
00:31:23,940 --> 00:31:29,580
surgical and precise changes that we can

749
00:31:26,700 --> 00:31:34,559
deploy within days or weeks and not

750
00:31:29,580 --> 00:31:36,029
years so here's an example of what you

751
00:31:34,559 --> 00:31:40,649
might see in bloodhound this is a user

752
00:31:36,029 --> 00:31:43,289
over here on the Left called er more 0 0

753
00:31:40,649 --> 00:31:47,129
1 1 and what we're looking at here are

754
00:31:43,289 --> 00:31:49,460
all of the shortest attack paths to

755
00:31:47,130 --> 00:31:51,440
domain heaven and that word shortest is

756
00:31:49,460 --> 00:31:55,500
absolutely vital

757
00:31:51,440 --> 00:31:57,179
so in graph theory it is very easy to

758
00:31:55,500 --> 00:32:00,779
find a shortest attack path or a

759
00:31:57,179 --> 00:32:02,850
shortest path from any vertex to any

760
00:32:00,779 --> 00:32:06,620
other vertex there are several different

761
00:32:02,850 --> 00:32:06,620
outcomes that can solve that problem

762
00:32:06,649 --> 00:32:09,840
instantaneously effectively like think

763
00:32:08,580 --> 00:32:11,610
about Google Maps how long does it take

764
00:32:09,840 --> 00:32:14,250
to calculate a route from Los Angeles to

765
00:32:11,610 --> 00:32:16,139
New York less than a second it's very

766
00:32:14,250 --> 00:32:19,700
very fast Google message that because

767
00:32:16,139 --> 00:32:23,100
they use a graph to track all that data

768
00:32:19,700 --> 00:32:25,679
so something without we want to help you

769
00:32:23,100 --> 00:32:28,439
with is avoid a very common pitfall that

770
00:32:25,679 --> 00:32:30,000
we fell into ourselves and then we also

771
00:32:28,440 --> 00:32:32,669
see a lot of other people falling into

772
00:32:30,000 --> 00:32:35,909
when they start trying to apply this

773
00:32:32,669 --> 00:32:39,179
data in a defensive way and that pitfall

774
00:32:35,909 --> 00:32:42,029
is looking at this information right

775
00:32:39,179 --> 00:32:44,460
here and believing or thinking that this

776
00:32:42,029 --> 00:32:46,429
is the entire attack path possibility

777
00:32:44,460 --> 00:32:49,289
from one user to the domain admins group

778
00:32:46,429 --> 00:32:51,549
it is not we are looking at the shortest

779
00:32:49,289 --> 00:32:53,019
attack paths so

780
00:32:51,549 --> 00:32:55,119
here's a longer attack path that goes

781
00:32:53,019 --> 00:32:57,309
through one other group membership step

782
00:32:55,119 --> 00:32:59,100
that we couldn't enumerate because it

783
00:32:57,309 --> 00:33:01,299
was not part of the shortest attack pads

784
00:32:59,100 --> 00:33:03,759
here's another here's another attack

785
00:33:01,299 --> 00:33:05,440
path that was not enumerated at first

786
00:33:03,759 --> 00:33:09,340
because it is also not among the

787
00:33:05,440 --> 00:33:12,220
shortest attack paths let's go just a

788
00:33:09,340 --> 00:33:16,289
different way very common question we

789
00:33:12,220 --> 00:33:20,110
get is how can I see all attack paths

790
00:33:16,289 --> 00:33:22,360
okay this is a good question and it is a

791
00:33:20,110 --> 00:33:24,779
question that we asked ourselves when we

792
00:33:22,360 --> 00:33:27,689
started trying to accomplish more

793
00:33:24,779 --> 00:33:30,549
defensive centric things using this data

794
00:33:27,690 --> 00:33:32,619
so we're going to look at all the tech

795
00:33:30,549 --> 00:33:36,070
paths that are possible from this user

796
00:33:32,619 --> 00:33:39,009
this is one user and this one we're

797
00:33:36,070 --> 00:33:43,869
looking at this is length zero so link

798
00:33:39,009 --> 00:33:52,109
zero of an attack path here's one here's

799
00:33:43,869 --> 00:34:03,488
two here's three here's four here's five

800
00:33:52,109 --> 00:34:04,749
here's six seven eight nine didn't need

801
00:34:03,489 --> 00:34:11,290
to be derive any kind of insight from

802
00:34:04,749 --> 00:34:12,819
that I can but for one user outbound

803
00:34:11,290 --> 00:34:17,168
attack has that are possible of length

804
00:34:12,819 --> 00:34:20,558
nine this also took approximately three

805
00:34:17,168 --> 00:34:27,190
minutes for the database to return the

806
00:34:20,559 --> 00:34:30,369
result of this query why is this this is

807
00:34:27,190 --> 00:34:33,849
because finding all paths means you have

808
00:34:30,369 --> 00:34:36,579
to include the longest path finding the

809
00:34:33,849 --> 00:34:39,549
longest path in a graph is a very well

810
00:34:36,579 --> 00:34:42,190
studied problem in graph theory and it

811
00:34:39,549 --> 00:34:44,739
is understood and known to be non

812
00:34:42,190 --> 00:34:48,159
polynomial hard visit is an np-hard

813
00:34:44,739 --> 00:34:50,529
problem this is true for directed

814
00:34:48,159 --> 00:34:53,169
acyclic graphs which is what the

815
00:34:50,530 --> 00:34:56,500
Bloodhound attack graph is if it were an

816
00:34:53,168 --> 00:34:59,230
a cyclic graph then you could solve this

817
00:34:56,500 --> 00:35:05,310
problem in linear time which also will

818
00:34:59,230 --> 00:35:09,030
be a very very very long time so

819
00:35:05,310 --> 00:35:12,029
shortest attack paths we look at in

820
00:35:09,030 --> 00:35:14,130
customer environments and this is how

821
00:35:12,030 --> 00:35:18,630
many attack paths we found in one of

822
00:35:14,130 --> 00:35:21,690
those networks this network had 8,000

823
00:35:18,630 --> 00:35:23,940
computers all of the possible shortest

824
00:35:21,690 --> 00:35:25,230
attack paths from any user to domain

825
00:35:23,940 --> 00:35:28,020
admins the domain route the domain

826
00:35:25,230 --> 00:35:29,520
controller whatever twenty million three

827
00:35:28,020 --> 00:35:32,220
hundred forty six thousand three hundred

828
00:35:29,520 --> 00:35:33,300
and eighty five I don't know about you

829
00:35:32,220 --> 00:35:34,649
but I don't want to go I don't want to

830
00:35:33,300 --> 00:35:38,430
go to reach one of those it's like an

831
00:35:34,650 --> 00:35:39,690
average Tuesday I'm in we have 15

832
00:35:38,430 --> 00:35:40,950
minutes left though so we running we're

833
00:35:39,690 --> 00:35:46,200
gonna start with number one okay sure

834
00:35:40,950 --> 00:35:47,339
this attack number one stupid joke so

835
00:35:46,200 --> 00:35:49,980
the bottom line that I want to try to

836
00:35:47,340 --> 00:35:52,470
drive into your mind is that Active

837
00:35:49,980 --> 00:35:54,900
Directory is not a maze was a red teamer

838
00:35:52,470 --> 00:35:56,879
as a pen tester you start off with

839
00:35:54,900 --> 00:35:59,280
access under one system some kind of

840
00:35:56,880 --> 00:36:01,650
like beachhead system and you find your

841
00:35:59,280 --> 00:36:03,119
way through Active Directory until you

842
00:36:01,650 --> 00:36:06,119
finally get to your objective domain

843
00:36:03,119 --> 00:36:09,450
admin or whatever don't think of Active

844
00:36:06,119 --> 00:36:15,510
Directory as a maze Active Directory is

845
00:36:09,450 --> 00:36:17,430
a map it is a extremely complicated it

846
00:36:15,510 --> 00:36:18,839
extremely complicated map that doesn't

847
00:36:17,430 --> 00:36:22,410
follow the rules of two-dimensional

848
00:36:18,839 --> 00:36:24,029
geography so consider this if we're

849
00:36:22,410 --> 00:36:25,520
going from Washington DC to New York

850
00:36:24,030 --> 00:36:28,710
this is the shortest path

851
00:36:25,520 --> 00:36:30,859
here's another path here's another path

852
00:36:28,710 --> 00:36:35,520
here's another path here's another path

853
00:36:30,859 --> 00:36:37,680
another path another one so don't think

854
00:36:35,520 --> 00:36:43,500
about trying to look at all the attack

855
00:36:37,680 --> 00:36:45,509
paths you can't I'm sorry to say so what

856
00:36:43,500 --> 00:36:46,880
if instead of looking at all the attack

857
00:36:45,510 --> 00:36:49,890
paths what if we change our thinking

858
00:36:46,880 --> 00:36:53,630
from you know trying to find like a

859
00:36:49,890 --> 00:36:56,310
sparse cut edge into a strategy of

860
00:36:53,630 --> 00:36:58,650
isolation well they were trying to

861
00:36:56,310 --> 00:37:00,900
isolate New York and Washington DC from

862
00:36:58,650 --> 00:37:02,790
the rest of the country well we would

863
00:37:00,900 --> 00:37:04,890
start with zoom in on that city and we

864
00:37:02,790 --> 00:37:06,599
would understand what are the first and

865
00:37:04,890 --> 00:37:07,160
second-degree connections that get us

866
00:37:06,599 --> 00:37:09,960
there

867
00:37:07,160 --> 00:37:15,210
all right let's replace that with domain

868
00:37:09,960 --> 00:37:16,740
admins and domain users so forget about

869
00:37:15,210 --> 00:37:18,780
analyzing all paths

870
00:37:16,740 --> 00:37:21,779
focus on isolating sensitive principles

871
00:37:18,780 --> 00:37:23,310
and focus on understanding what the

872
00:37:21,780 --> 00:37:26,060
outbound privileges are they're held by

873
00:37:23,310 --> 00:37:29,029
the built-in security groups also

874
00:37:26,060 --> 00:37:30,810
privileges are held by more or less

875
00:37:29,030 --> 00:37:32,790
all-inclusive security groups in Active

876
00:37:30,810 --> 00:37:37,109
Directory as well that are not default

877
00:37:32,790 --> 00:37:39,240
and built-in so how can I do this for

878
00:37:37,109 --> 00:37:41,970
domain admins well let's look at how

879
00:37:39,240 --> 00:37:43,529
domain admins are exposed there are

880
00:37:41,970 --> 00:37:45,810
several different ways that we can

881
00:37:43,530 --> 00:37:48,570
understand a domain admin exposure or

882
00:37:45,810 --> 00:37:50,790
exposure for the group itself so we have

883
00:37:48,570 --> 00:37:54,420
credentials in memory we have abusable

884
00:37:50,790 --> 00:37:56,609
aces we have GPO abuse harborough's AS

885
00:37:54,420 --> 00:37:59,880
prep roasting there's a thousand ways to

886
00:37:56,609 --> 00:38:01,759
skin that cat let's focus on GPO abuse

887
00:37:59,880 --> 00:38:03,530
first

888
00:38:01,760 --> 00:38:07,830
so with GPOs

889
00:38:03,530 --> 00:38:11,580
if I control a GPO that is linked to an

890
00:38:07,830 --> 00:38:14,400
object that descends down and affected

891
00:38:11,580 --> 00:38:16,319
domain admin if I control that GPO I

892
00:38:14,400 --> 00:38:19,170
control that domain admin I can do

893
00:38:16,320 --> 00:38:21,930
anything I want with GPO possibilities

894
00:38:19,170 --> 00:38:24,570
are absolutely endless so with our data

895
00:38:21,930 --> 00:38:26,549
we can look at any user who belong to

896
00:38:24,570 --> 00:38:28,589
the domain Evans group what are the GPO

897
00:38:26,550 --> 00:38:30,420
that apply to any of those users

898
00:38:28,589 --> 00:38:32,849
regardless of where they exist in the OU

899
00:38:30,420 --> 00:38:35,160
you tree also

900
00:38:32,849 --> 00:38:36,839
nine times out of ten we see that domain

901
00:38:35,160 --> 00:38:37,879
admins don't actually belong to the same

902
00:38:36,839 --> 00:38:40,140
oh you

903
00:38:37,880 --> 00:38:44,640
so whatever GPO is applied to a domain

904
00:38:40,140 --> 00:38:46,830
admin is basically anybody's guess so

905
00:38:44,640 --> 00:38:49,618
what we want to look at is show me who

906
00:38:46,830 --> 00:38:52,109
has control of any GPO that applies to a

907
00:38:49,619 --> 00:38:54,330
domain admin where that user is not a

908
00:38:52,109 --> 00:38:56,970
domain admin and I don't really care if

909
00:38:54,330 --> 00:39:00,150
a DA can pop another da I can trust them

910
00:38:56,970 --> 00:39:02,689
to you know protect themselves sloop and

911
00:39:00,150 --> 00:39:05,099
run that query and it looks like this so

912
00:39:02,690 --> 00:39:07,589
there's a domain object there and teal

913
00:39:05,099 --> 00:39:11,550
and then the GPO that are linked to the

914
00:39:07,589 --> 00:39:13,920
domain head then we have four different

915
00:39:11,550 --> 00:39:16,460
security groups that have control of

916
00:39:13,920 --> 00:39:20,760
different GPOs that apply to those das

917
00:39:16,460 --> 00:39:23,280
those users are not domain admins so

918
00:39:20,760 --> 00:39:24,839
what if we remove those permissions or

919
00:39:23,280 --> 00:39:26,930
what if we change the owners of those

920
00:39:24,839 --> 00:39:29,680
GPIOs from some random

921
00:39:26,930 --> 00:39:32,828
group back to the domain admins group

922
00:39:29,680 --> 00:39:35,000
you would think that this would cause

923
00:39:32,829 --> 00:39:36,859
some remediation like maybe this will

924
00:39:35,000 --> 00:39:38,059
reduce the percentage of users that have

925
00:39:36,859 --> 00:39:40,730
an attack path and maybe it'll reduce

926
00:39:38,059 --> 00:39:42,140
the overall number of attack paths or

927
00:39:40,730 --> 00:39:43,849
what if we're not talking about GPO

928
00:39:42,140 --> 00:39:45,618
whatever talking about deploying pause

929
00:39:43,849 --> 00:39:48,020
and making domain admins log into paws

930
00:39:45,619 --> 00:39:50,450
or we're talking about ACLs can be

931
00:39:48,020 --> 00:39:53,599
abused when we started doing this we

932
00:39:50,450 --> 00:39:55,129
thought I am so brilliant you are not

933
00:39:53,599 --> 00:39:57,170
gonna believe this I'm gonna I'm gonna

934
00:39:55,130 --> 00:39:59,300
make it so that domain admins only log

935
00:39:57,170 --> 00:40:01,790
on the domain controllers and we're

936
00:39:59,300 --> 00:40:04,819
gonna see a huge reduction in the attack

937
00:40:01,790 --> 00:40:07,430
paths of Av so we stipulate that change

938
00:40:04,819 --> 00:40:08,930
in our graph I'll say we remove those

939
00:40:07,430 --> 00:40:09,680
permissions and change the object owners

940
00:40:08,930 --> 00:40:12,410
and the GPOs

941
00:40:09,680 --> 00:40:15,319
so before it was 100 percent of the

942
00:40:12,410 --> 00:40:16,940
users that have passed the DA we changed

943
00:40:15,319 --> 00:40:18,430
the data set we simulate that change

944
00:40:16,940 --> 00:40:20,960
before we have to put it into production

945
00:40:18,430 --> 00:40:23,629
and after anybody won take a guess what

946
00:40:20,960 --> 00:40:27,230
the stat is after just how effective my

947
00:40:23,630 --> 00:40:31,609
brilliant strategy is gonna be I never

948
00:40:27,230 --> 00:40:33,770
sent made absolutely no difference why

949
00:40:31,609 --> 00:40:35,328
is this because the graph is extremely

950
00:40:33,770 --> 00:40:37,400
highly connected and there are other

951
00:40:35,329 --> 00:40:38,869
attack paths that we weren't seeing

952
00:40:37,400 --> 00:40:41,770
because we were looking at all paths

953
00:40:38,869 --> 00:40:41,770
because you can't

954
00:40:42,109 --> 00:40:48,529
what about abusable aces what if we also

955
00:40:44,450 --> 00:40:50,689
say okay well I'm still gonna trim those

956
00:40:48,530 --> 00:40:52,099
permissions in the GPOs because I want

957
00:40:50,690 --> 00:40:54,200
to have this strategy of isolation from

958
00:40:52,099 --> 00:40:55,849
my domain admins when they still have

959
00:40:54,200 --> 00:40:59,750
all these other attack paths now that

960
00:40:55,849 --> 00:41:02,920
rely on abusing aces on the domain admin

961
00:40:59,750 --> 00:41:06,020
users of the domain admins group itself

962
00:41:02,920 --> 00:41:07,430
so here's an example we have our domain

963
00:41:06,020 --> 00:41:11,630
admins group we have those users that

964
00:41:07,430 --> 00:41:12,919
belong to the group inbound object

965
00:41:11,630 --> 00:41:14,780
control if you look at the very bottom

966
00:41:12,920 --> 00:41:17,020
there you can see that there are three

967
00:41:14,780 --> 00:41:20,809
principles that have explicit control of

968
00:41:17,020 --> 00:41:22,790
the domain admins group but if you

969
00:41:20,809 --> 00:41:24,349
unroll that out there are actually 47

970
00:41:22,790 --> 00:41:28,759
different identities that have control

971
00:41:24,349 --> 00:41:29,960
of the group or a user in the group and

972
00:41:28,760 --> 00:41:32,770
here they are

973
00:41:29,960 --> 00:41:35,750
so we can unroll this out and visualize

974
00:41:32,770 --> 00:41:39,589
what groups can control a domain admin

975
00:41:35,750 --> 00:41:39,850
or control the group itself so let's get

976
00:41:39,589 --> 00:41:42,250
rid

977
00:41:39,850 --> 00:41:43,049
that let's focus on that strategy of

978
00:41:42,250 --> 00:41:46,870
isolation

979
00:41:43,050 --> 00:41:48,910
okay so we've simulated changing gpo

980
00:41:46,870 --> 00:41:50,980
control for GPIOs that apply to domain

981
00:41:48,910 --> 00:41:53,410
admins or computers that are used by

982
00:41:50,980 --> 00:41:56,320
domain admins and we've trimmed

983
00:41:53,410 --> 00:41:59,799
permissions inbound on the domain admin

984
00:41:56,320 --> 00:42:01,780
users and on the domain admins group so

985
00:41:59,800 --> 00:42:06,610
before we had 100% of the users when

986
00:42:01,780 --> 00:42:08,950
attack path domain admin after it's 82%

987
00:42:06,610 --> 00:42:11,620
we're actually making some forward

988
00:42:08,950 --> 00:42:13,899
progress these numbers by the way are

989
00:42:11,620 --> 00:42:19,319
real these are real numbers from a real

990
00:42:13,900 --> 00:42:23,290
environment this is what's possible is

991
00:42:19,320 --> 00:42:26,380
once you once you understand this this

992
00:42:23,290 --> 00:42:28,930
strategy of isolation both on the end

993
00:42:26,380 --> 00:42:30,970
point of the attack path and on the

994
00:42:28,930 --> 00:42:34,270
possibilities for where the attack path

995
00:42:30,970 --> 00:42:36,609
can begin these are the local admin

996
00:42:34,270 --> 00:42:39,460
rights on domain users or Kerberos table

997
00:42:36,610 --> 00:42:42,580
users or domain users that have RDP

998
00:42:39,460 --> 00:42:44,790
access on systems that are escalated all

999
00:42:42,580 --> 00:42:47,410
or there's a local previs combo systems

1000
00:42:44,790 --> 00:42:48,970
you can whittle this down so that your

1001
00:42:47,410 --> 00:42:52,600
attack surface is reduced all the way

1002
00:42:48,970 --> 00:42:54,580
down to 1% or less than 1% of the users

1003
00:42:52,600 --> 00:42:57,549
in the directory being able to take

1004
00:42:54,580 --> 00:42:59,380
control of a domain admin sometimes we

1005
00:42:57,550 --> 00:43:01,180
can't get this number this low I think

1006
00:42:59,380 --> 00:43:03,760
the worst that we've done so far is

1007
00:43:01,180 --> 00:43:07,569
being able to take it down to about 6

1008
00:43:03,760 --> 00:43:09,340
percent which is still pretty good once

1009
00:43:07,570 --> 00:43:12,400
you have that once you have those attack

1010
00:43:09,340 --> 00:43:14,350
pass whittled down and you say well we

1011
00:43:12,400 --> 00:43:17,080
can't get it any lower because there are

1012
00:43:14,350 --> 00:43:20,470
some business need for a domain trust or

1013
00:43:17,080 --> 00:43:23,290
for some kind of configuration instead

1014
00:43:20,470 --> 00:43:25,689
of having to deploy some kind of non

1015
00:43:23,290 --> 00:43:27,700
scalable security control so that you're

1016
00:43:25,690 --> 00:43:29,680
you know kind of like surveying every

1017
00:43:27,700 --> 00:43:31,720
single computer in the environment no

1018
00:43:29,680 --> 00:43:33,730
good because you have no idea where the

1019
00:43:31,720 --> 00:43:35,200
attacker is gonna go you're kind of

1020
00:43:33,730 --> 00:43:37,090
funneling of the attacker so that they

1021
00:43:35,200 --> 00:43:38,939
have to go through this one system they

1022
00:43:37,090 --> 00:43:42,730
have to go through this one user and

1023
00:43:38,940 --> 00:43:44,350
those controls that cannot scale if it's

1024
00:43:42,730 --> 00:43:46,000
5 computers that I have to deploy the

1025
00:43:44,350 --> 00:43:48,370
Windows Firewall on and configure

1026
00:43:46,000 --> 00:43:50,470
inbound whitelisting rules I could do

1027
00:43:48,370 --> 00:43:52,660
that in an afternoon if I could do that

1028
00:43:50,470 --> 00:43:53,410
for a hundred thousand computers join to

1029
00:43:52,660 --> 00:43:58,390
AD

1030
00:43:53,410 --> 00:44:00,160
it's not gonna happen everything in this

1031
00:43:58,390 --> 00:44:03,430
talk is free and opensource

1032
00:44:00,160 --> 00:44:05,319
the tools we talked about bloodhound the

1033
00:44:03,430 --> 00:44:07,600
book on analytics tool pie review

1034
00:44:05,320 --> 00:44:09,970
power-mad in vogue DC sync and the

1035
00:44:07,600 --> 00:44:12,069
methodology itself is also free and open

1036
00:44:09,970 --> 00:44:13,899
source if you look at the bloodhound

1037
00:44:12,070 --> 00:44:16,720
analytics URL there you will be able to

1038
00:44:13,900 --> 00:44:18,100
create these charts yourself and then if

1039
00:44:16,720 --> 00:44:20,759
you look at this blog post in the top

1040
00:44:18,100 --> 00:44:23,259
right you'll see even more detail about

1041
00:44:20,760 --> 00:44:25,810
understanding the difference between all

1042
00:44:23,260 --> 00:44:29,260
paths shortest paths and all that kind

1043
00:44:25,810 --> 00:44:31,299
of good stuff thank you very much for

1044
00:44:29,260 --> 00:44:32,740
your time I think we have about six

1045
00:44:31,300 --> 00:44:35,050
minutes left if we want to take

1046
00:44:32,740 --> 00:44:38,259
questions here and then otherwise we're

1047
00:44:35,050 --> 00:44:39,360
gonna be out in the breakout room to the

1048
00:44:38,260 --> 00:44:42,960
right over here

1049
00:44:39,360 --> 00:44:42,960
thank you guys thank you

