1
00:00:00,030 --> 00:00:05,190
welcome to security system a deep dive

2
00:00:03,120 --> 00:00:08,550
into reverse in android preinstalled

3
00:00:05,190 --> 00:00:10,500
applications with matt is done just a

4
00:00:08,550 --> 00:00:12,599
couple announcements before we begin

5
00:00:10,500 --> 00:00:15,599
please stop by the business hall located

6
00:00:12,599 --> 00:00:17,369
on this floor Mandalay Bay you can also

7
00:00:15,599 --> 00:00:18,900
stop at the blackhat Arsenal today it's

8
00:00:17,369 --> 00:00:21,330
in the business hall as well on this

9
00:00:18,900 --> 00:00:24,359
level we ask you to please put your

10
00:00:21,330 --> 00:00:26,369
phone in silence and please welcome our

11
00:00:24,359 --> 00:00:32,880
speaker today again Matt is done thank

12
00:00:26,369 --> 00:00:34,860
you so this is securing the system I'm

13
00:00:32,880 --> 00:00:36,960
hope that's what you're here for

14
00:00:34,860 --> 00:00:39,660
my name is Matty stone my pronouns are

15
00:00:36,960 --> 00:00:41,850
she and her and I am as of two weeks ago

16
00:00:39,660 --> 00:00:45,209
a security researcher on project zero

17
00:00:41,850 --> 00:00:47,070
but before that I was a reverse engineer

18
00:00:45,210 --> 00:00:49,440
and led our efforts and reverse

19
00:00:47,070 --> 00:00:51,960
engineering and finding malware in the

20
00:00:49,440 --> 00:00:54,239
preinstalled and the off Google Play

21
00:00:51,960 --> 00:00:56,460
ecosystems so all of the work in this

22
00:00:54,239 --> 00:00:59,160
presentation is coming from my work on

23
00:00:56,460 --> 00:01:02,489
the Google Android security team not

24
00:00:59,160 --> 00:01:04,170
project zero so what are we going to

25
00:01:02,489 --> 00:01:07,140
talk about we're gonna quickly go

26
00:01:04,170 --> 00:01:09,960
through first an overview of the Android

27
00:01:07,140 --> 00:01:11,760
OS ecosystem and sort of what that space

28
00:01:09,960 --> 00:01:14,009
looks like then we're gonna talk about

29
00:01:11,760 --> 00:01:16,590
my lessons learned from beginning to

30
00:01:14,010 --> 00:01:18,390
reverse engineer pre-installed Android

31
00:01:16,590 --> 00:01:20,159
apps when you're coming from a

32
00:01:18,390 --> 00:01:23,460
background of reverse engineering user

33
00:01:20,159 --> 00:01:25,350
space applications then we get into some

34
00:01:23,460 --> 00:01:28,169
of the fun stuff of what type of

35
00:01:25,350 --> 00:01:32,699
security issues can you find and have we

36
00:01:28,170 --> 00:01:33,900
found in the Android OAM build images so

37
00:01:32,700 --> 00:01:37,680
we'll talk about four different case

38
00:01:33,900 --> 00:01:41,729
studies there so what's my goal for this

39
00:01:37,680 --> 00:01:43,710
talk overall last year our team reviewed

40
00:01:41,729 --> 00:01:46,530
build images from more than a thousand

41
00:01:43,710 --> 00:01:48,210
different OEMs and that is a lot of

42
00:01:46,530 --> 00:01:50,369
different build images in the Android

43
00:01:48,210 --> 00:01:53,369
ecosystem to be able to vet to be able

44
00:01:50,369 --> 00:01:55,500
to help to secure so my hope is that

45
00:01:53,369 --> 00:01:57,270
through this talk I sort of lower the

46
00:01:55,500 --> 00:02:00,149
bar of entry to reverse engineering and

47
00:01:57,270 --> 00:02:01,890
analyzing pre-installed Android apps so

48
00:02:00,149 --> 00:02:04,290
that we can have more and more security

49
00:02:01,890 --> 00:02:06,960
researchers making sure these spaces are

50
00:02:04,290 --> 00:02:08,369
safe for all of our users and hopefully

51
00:02:06,960 --> 00:02:10,619
a part of that is I make it interesting

52
00:02:08,369 --> 00:02:12,180
show you the complex and fun problems

53
00:02:10,619 --> 00:02:14,819
that we look at

54
00:02:12,180 --> 00:02:17,430
and just sort of show that while we

55
00:02:14,819 --> 00:02:21,328
often talk about Android as a model sort

56
00:02:17,430 --> 00:02:23,099
of monolithic thing it's it ranges

57
00:02:21,329 --> 00:02:24,480
greatly from the diversity of all of

58
00:02:23,099 --> 00:02:26,640
those different OEMs and their

59
00:02:24,480 --> 00:02:27,929
capabilities in what sort of mindset

60
00:02:26,640 --> 00:02:33,510
they're bringing when they're building

61
00:02:27,930 --> 00:02:35,700
devices so why do we care why do we need

62
00:02:33,510 --> 00:02:38,879
more people reverse engineering Android

63
00:02:35,700 --> 00:02:41,369
pre-installed apps so by and large each

64
00:02:38,879 --> 00:02:44,700
device comes with about hundred to four

65
00:02:41,370 --> 00:02:47,670
hundred different apps pre-installed so

66
00:02:44,700 --> 00:02:50,220
that is a lot of surface area that we

67
00:02:47,670 --> 00:02:53,220
need to be ensuring our secure out of

68
00:02:50,220 --> 00:02:54,900
the box and it's harder to remediate

69
00:02:53,220 --> 00:02:57,689
these issues once they've launched to

70
00:02:54,900 --> 00:02:59,609
users because they build the firmware

71
00:02:57,689 --> 00:03:01,828
image things that are pre-installed are

72
00:02:59,609 --> 00:03:03,659
on a read-only file system so in order

73
00:03:01,829 --> 00:03:06,030
to remove anything that might have

74
00:03:03,659 --> 00:03:10,319
security issues it generally requires a

75
00:03:06,030 --> 00:03:12,450
security update to the device versus in

76
00:03:10,319 --> 00:03:15,689
a user space app the user or an

77
00:03:12,450 --> 00:03:18,030
antivirus solution can delete it lastly

78
00:03:15,689 --> 00:03:20,190
malicious actors are moving to

79
00:03:18,030 --> 00:03:21,540
infiltrate the supply chain because if

80
00:03:20,190 --> 00:03:22,560
you think about it from logic and

81
00:03:21,540 --> 00:03:25,260
return-on-investment

82
00:03:22,560 --> 00:03:27,449
there's a lot of reasons why it makes

83
00:03:25,260 --> 00:03:29,519
sense for them to instead of trying to

84
00:03:27,449 --> 00:03:31,889
convince thousands of users to install

85
00:03:29,519 --> 00:03:35,400
your bad or malicious app you only need

86
00:03:31,889 --> 00:03:38,280
to convince one om1 company to pre

87
00:03:35,400 --> 00:03:40,290
install their your application and then

88
00:03:38,280 --> 00:03:43,260
you've infected at least a couple

89
00:03:40,290 --> 00:03:43,828
thousand users and over the last couple

90
00:03:43,260 --> 00:03:47,010
of years

91
00:03:43,829 --> 00:03:48,840
exploiting android has gotten harder so

92
00:03:47,010 --> 00:03:50,459
if those malicious actors want those

93
00:03:48,840 --> 00:03:52,620
privileges that they would have

94
00:03:50,459 --> 00:03:55,169
previously gained in years past through

95
00:03:52,620 --> 00:03:57,359
rooting or exploiting that is much more

96
00:03:55,169 --> 00:03:59,549
difficult so if they can trick and

97
00:03:57,359 --> 00:04:01,099
infiltrate the supply chain that's a way

98
00:03:59,549 --> 00:04:04,290
for them to get those privileges and

99
00:04:01,099 --> 00:04:06,030
lastly as myself and my team we're

100
00:04:04,290 --> 00:04:08,548
moving into this space there's quite a

101
00:04:06,030 --> 00:04:11,040
few resources out there of reversing and

102
00:04:08,549 --> 00:04:12,389
analyzing user space apps but we really

103
00:04:11,040 --> 00:04:15,510
didn't find the resources for

104
00:04:12,389 --> 00:04:19,199
pre-installed so I hope we can all start

105
00:04:15,510 --> 00:04:21,238
adding that to what's out there I do use

106
00:04:19,199 --> 00:04:23,130
some acronyms still want to try and set

107
00:04:21,238 --> 00:04:24,500
the stage to bring everyone up to the

108
00:04:23,130 --> 00:04:26,719
same level um

109
00:04:24,500 --> 00:04:28,700
a OS P is the Android open source

110
00:04:26,720 --> 00:04:30,380
project so that is the code that is

111
00:04:28,700 --> 00:04:32,900
completely open source for the Android

112
00:04:30,380 --> 00:04:35,810
operating system so when I say that oh

113
00:04:32,900 --> 00:04:38,120
this is in AOSP that's that baseline

114
00:04:35,810 --> 00:04:40,520
open source project when a device is

115
00:04:38,120 --> 00:04:42,050
built then Google Samsung all the

116
00:04:40,520 --> 00:04:44,900
different OEMs then generally add

117
00:04:42,050 --> 00:04:46,820
customizations on top of that OE M is

118
00:04:44,900 --> 00:04:49,849
the company that is delivering the

119
00:04:46,820 --> 00:04:52,460
device so again like Samsung Huawei BB

120
00:04:49,850 --> 00:04:54,350
mobile all the different OEMs o diems

121
00:04:52,460 --> 00:04:56,719
are the people who build white label

122
00:04:54,350 --> 00:04:58,820
devices if for example the long tail Oh

123
00:04:56,720 --> 00:05:00,740
Ian's who are selling inexpensive

124
00:04:58,820 --> 00:05:03,250
devices they'll often just put their

125
00:05:00,740 --> 00:05:05,870
branding on top of a white label device

126
00:05:03,250 --> 00:05:08,840
Google Play protect is the built-in

127
00:05:05,870 --> 00:05:11,240
antivirus solution so my team has the

128
00:05:08,840 --> 00:05:13,310
ability that when we find bad apps we

129
00:05:11,240 --> 00:05:15,520
flag those through Google Play protect

130
00:05:13,310 --> 00:05:17,930
and that propagates to all Android

131
00:05:15,520 --> 00:05:20,539
certified devices if the user has it

132
00:05:17,930 --> 00:05:22,940
enabled and from the Google Play protect

133
00:05:20,540 --> 00:05:26,570
perspective PHA is sort of what we call

134
00:05:22,940 --> 00:05:29,540
malware potentially harmful apps yeah

135
00:05:26,570 --> 00:05:31,820
so let's get into it so what is the

136
00:05:29,540 --> 00:05:33,860
Android om the pre-installed space look

137
00:05:31,820 --> 00:05:36,440
like we can really separate it out into

138
00:05:33,860 --> 00:05:38,870
two different categories you have the

139
00:05:36,440 --> 00:05:40,969
certified devices those are devices

140
00:05:38,870 --> 00:05:43,070
where the OEM works with Google and

141
00:05:40,970 --> 00:05:45,800
licenses all of the Google Apps so the

142
00:05:43,070 --> 00:05:48,110
device comes with Google Play Gmail GMs

143
00:05:45,800 --> 00:05:49,820
cor things like that in order to get

144
00:05:48,110 --> 00:05:51,650
that certification they have to go

145
00:05:49,820 --> 00:05:53,479
through an approval process which

146
00:05:51,650 --> 00:05:55,489
includes a bunch of test Suites

147
00:05:53,479 --> 00:05:57,740
however there's the other category of

148
00:05:55,490 --> 00:06:00,410
devices that since AOSP is an

149
00:05:57,740 --> 00:06:02,960
open-source operating system those

150
00:06:00,410 --> 00:06:05,360
device manufacturers developers builders

151
00:06:02,960 --> 00:06:07,940
they don't need or want the Google Apps

152
00:06:05,360 --> 00:06:09,710
and thus are just using the open-source

153
00:06:07,940 --> 00:06:11,990
operating system for what it is so an

154
00:06:09,710 --> 00:06:14,539
example of that is like the Amazon fire

155
00:06:11,990 --> 00:06:16,070
tablet where you won't see Google apps

156
00:06:14,540 --> 00:06:17,960
on it and they have put all of their

157
00:06:16,070 --> 00:06:20,570
customizations into a new operating

158
00:06:17,960 --> 00:06:23,960
system so those devices are just Android

159
00:06:20,570 --> 00:06:25,969
compatible so this is all the different

160
00:06:23,960 --> 00:06:29,979
test Suites that are currently included

161
00:06:25,970 --> 00:06:33,320
in the test approval process for Android

162
00:06:29,979 --> 00:06:35,900
Android certified devices so the Android

163
00:06:33,320 --> 00:06:37,260
sort of tablets or alright not habits

164
00:06:35,900 --> 00:06:39,150
like the Amazon fire

165
00:06:37,260 --> 00:06:41,370
tablets or devices that just want to be

166
00:06:39,150 --> 00:06:43,289
built on top of it a OSP they only

167
00:06:41,370 --> 00:06:45,990
really need to go through the CTS test

168
00:06:43,290 --> 00:06:48,960
compatibility test suite and things like

169
00:06:45,990 --> 00:06:51,240
that but are updated yearly with each

170
00:06:48,960 --> 00:06:55,200
Android release and the main security

171
00:06:51,240 --> 00:06:58,230
tests that are within CTS is SELinux

172
00:06:55,200 --> 00:07:00,210
policy test but if it device wants to be

173
00:06:58,230 --> 00:07:02,520
an android certified device so those are

174
00:07:00,210 --> 00:07:05,729
the most of the big name brand Android

175
00:07:02,520 --> 00:07:07,950
devices you hear up like Samsung Google

176
00:07:05,730 --> 00:07:10,470
pixel you know all those devices they

177
00:07:07,950 --> 00:07:14,070
have to go through the whole the whole

178
00:07:10,470 --> 00:07:16,200
test whole set of test Suites and the

179
00:07:14,070 --> 00:07:17,849
main one we're gonna focus on is build

180
00:07:16,200 --> 00:07:19,830
test suite because that's where the

181
00:07:17,850 --> 00:07:24,210
security review in my team and myself

182
00:07:19,830 --> 00:07:26,039
came into play of trying to find PHA or

183
00:07:24,210 --> 00:07:29,489
security issues within these builds

184
00:07:26,040 --> 00:07:32,430
prior to them launching so the goal of

185
00:07:29,490 --> 00:07:34,260
built BTS and why it launched is to find

186
00:07:32,430 --> 00:07:36,510
security issues before they launch to

187
00:07:34,260 --> 00:07:38,580
users and the main goal was to find

188
00:07:36,510 --> 00:07:40,320
anything known as PHA and our

189
00:07:38,580 --> 00:07:42,800
definitions are listed at this website

190
00:07:40,320 --> 00:07:45,630
but they are those user harming

191
00:07:42,800 --> 00:07:48,450
behaviors such as mobile billing fraud

192
00:07:45,630 --> 00:07:52,620
spyware Trojans backdoors things like

193
00:07:48,450 --> 00:07:54,120
that and that continued to expand to a

194
00:07:52,620 --> 00:07:56,000
couple different things and has a

195
00:07:54,120 --> 00:07:58,830
roadmap but that's been the main focus

196
00:07:56,000 --> 00:07:59,880
and where the a lot of these findings

197
00:07:58,830 --> 00:08:02,190
that I'm talking about in the case

198
00:07:59,880 --> 00:08:04,170
studies came from and we're why we were

199
00:08:02,190 --> 00:08:06,150
trying to build up our reversing and

200
00:08:04,170 --> 00:08:08,850
analytical capabilities and

201
00:08:06,150 --> 00:08:10,049
pre-installed apps while the goal is

202
00:08:08,850 --> 00:08:12,420
always to find things before they

203
00:08:10,050 --> 00:08:14,640
launched it users BTS happens right

204
00:08:12,420 --> 00:08:16,920
before it launches to the user so it's

205
00:08:14,640 --> 00:08:19,380
the last step because the firmware image

206
00:08:16,920 --> 00:08:22,500
we receive has to be the same one that

207
00:08:19,380 --> 00:08:24,240
goes out of the box and therefore the

208
00:08:22,500 --> 00:08:26,610
reality is is when you're operating us

209
00:08:24,240 --> 00:08:29,190
at a scale of seeing that many different

210
00:08:26,610 --> 00:08:30,630
firmware images sometimes I think you

211
00:08:29,190 --> 00:08:32,940
find things after they're already in the

212
00:08:30,630 --> 00:08:35,309
wild especially when you consider how

213
00:08:32,940 --> 00:08:37,710
many years of Android there's been and

214
00:08:35,309 --> 00:08:39,989
so some things were already existing and

215
00:08:37,710 --> 00:08:43,650
in those cases we will immediately

216
00:08:39,990 --> 00:08:45,330
implement detections in BTS so that no

217
00:08:43,650 --> 00:08:46,980
new builds will go out and then work

218
00:08:45,330 --> 00:08:50,280
with the OEM to issue security patches

219
00:08:46,980 --> 00:08:51,150
as well as use Google Play protect to

220
00:08:50,280 --> 00:08:54,420
immediate

221
00:08:51,150 --> 00:08:55,790
warning users but let's get into some of

222
00:08:54,420 --> 00:08:58,620
the fun stuff in the reverse engineering

223
00:08:55,790 --> 00:09:01,380
so this section has really come from

224
00:08:58,620 --> 00:09:03,150
what when my team tried to transfer our

225
00:09:01,380 --> 00:09:06,060
tooling our process our knowledge base

226
00:09:03,150 --> 00:09:08,220
some of our assumptions about how things

227
00:09:06,060 --> 00:09:10,319
work and how it would transfer ready to

228
00:09:08,220 --> 00:09:12,750
preinstalled were wrong so the goal here

229
00:09:10,320 --> 00:09:15,089
is to highlight some of the categories

230
00:09:12,750 --> 00:09:17,130
of wrong in some shion's we had that

231
00:09:15,089 --> 00:09:20,190
hopefully will give you the most of

232
00:09:17,130 --> 00:09:22,740
return on investment to start your pre

233
00:09:20,190 --> 00:09:26,190
installed analysis so the first one is

234
00:09:22,740 --> 00:09:28,050
dynamic analysis as researchers a these

235
00:09:26,190 --> 00:09:30,900
different things like that dynamic

236
00:09:28,050 --> 00:09:33,719
analysis plays a big role in our ability

237
00:09:30,900 --> 00:09:36,089
to find bad behaviors but when you're

238
00:09:33,720 --> 00:09:37,680
reviewing pre-installed apps if you

239
00:09:36,089 --> 00:09:39,750
assume that the output of dynamic

240
00:09:37,680 --> 00:09:43,079
analysis is going to alert you if

241
00:09:39,750 --> 00:09:45,240
something bad is going on it's often not

242
00:09:43,080 --> 00:09:47,940
the case and there's a lot of different

243
00:09:45,240 --> 00:09:50,490
reasons why dynamic analysis doesn't

244
00:09:47,940 --> 00:09:52,470
quite work as you'd expect in pre

245
00:09:50,490 --> 00:09:55,260
installed applications so the first

246
00:09:52,470 --> 00:09:57,270
example of this is that there is in the

247
00:09:55,260 --> 00:09:58,980
permission model for Android there are

248
00:09:57,270 --> 00:10:01,890
something called signature permissions

249
00:09:58,980 --> 00:10:06,390
and privilege permissions so a signature

250
00:10:01,890 --> 00:10:09,029
permission is only able to be used by an

251
00:10:06,390 --> 00:10:11,850
app that is signed with the same key as

252
00:10:09,029 --> 00:10:14,339
the operating system so if you think

253
00:10:11,850 --> 00:10:16,860
about the OEM is going to be the one

254
00:10:14,339 --> 00:10:19,740
that signs the operating system on that

255
00:10:16,860 --> 00:10:21,420
device with their private key then only

256
00:10:19,740 --> 00:10:24,180
apps that are also signed with that

257
00:10:21,420 --> 00:10:25,949
private key aka should be the OEMs code

258
00:10:24,180 --> 00:10:27,540
can then gain those signature

259
00:10:25,950 --> 00:10:29,839
permissions because they are pretty

260
00:10:27,540 --> 00:10:32,880
privileged and allow access to sensitive

261
00:10:29,839 --> 00:10:34,410
functionality and devices the other type

262
00:10:32,880 --> 00:10:37,200
of sensitive permissions that we'll talk

263
00:10:34,410 --> 00:10:39,779
about is privileged those are maybe not

264
00:10:37,200 --> 00:10:42,330
the OEMs up but a trusted party like a

265
00:10:39,779 --> 00:10:45,300
carrier or something like that their

266
00:10:42,330 --> 00:10:47,279
apps can be written to the system image

267
00:10:45,300 --> 00:10:49,229
on the device or system partition which

268
00:10:47,279 --> 00:10:51,570
is the read-only partition in the

269
00:10:49,230 --> 00:10:54,209
private structure II then those apps are

270
00:10:51,570 --> 00:10:55,800
able to access privileged permissions so

271
00:10:54,209 --> 00:10:58,020
example of some of the signature and

272
00:10:55,800 --> 00:11:00,420
privileged permissions are here so

273
00:10:58,020 --> 00:11:02,390
pretty sensitive stuff things that would

274
00:11:00,420 --> 00:11:05,780
not make sense for any user

275
00:11:02,390 --> 00:11:07,939
apps to be able to have access to so

276
00:11:05,780 --> 00:11:10,910
when you consider how dynamic analysis

277
00:11:07,940 --> 00:11:12,830
pipelines often work especially the

278
00:11:10,910 --> 00:11:14,390
automated wants to review app set scale

279
00:11:12,830 --> 00:11:17,170
is that they will side load the

280
00:11:14,390 --> 00:11:19,730
application into the dynamic analysis um

281
00:11:17,170 --> 00:11:21,680
environment and then try and run it but

282
00:11:19,730 --> 00:11:23,900
in that case if you try to side load one

283
00:11:21,680 --> 00:11:25,880
of these pre-loaded apps into that type

284
00:11:23,900 --> 00:11:28,280
of environment then it's not going to be

285
00:11:25,880 --> 00:11:29,570
able to access these permissions and

286
00:11:28,280 --> 00:11:32,569
thus you're not going to see the

287
00:11:29,570 --> 00:11:34,490
behavior that is protected usually by

288
00:11:32,570 --> 00:11:36,170
those permissions and because that's

289
00:11:34,490 --> 00:11:38,060
pretty sensitive stuff you probably want

290
00:11:36,170 --> 00:11:39,589
to see what it is and understand why

291
00:11:38,060 --> 00:11:43,790
they need those permissions in the first

292
00:11:39,590 --> 00:11:46,040
place the next type of issue that can

293
00:11:43,790 --> 00:11:48,170
cause your pre-installed app to not run

294
00:11:46,040 --> 00:11:49,910
correctly in dynamic analysis is that

295
00:11:48,170 --> 00:11:53,000
the app is running under a shared user

296
00:11:49,910 --> 00:11:55,280
ID so they can declare this in the

297
00:11:53,000 --> 00:11:56,960
manifest and it means that as long as

298
00:11:55,280 --> 00:11:59,390
all the apps declaring the same shared

299
00:11:56,960 --> 00:12:02,060
user ID are signed with the same key

300
00:11:59,390 --> 00:12:04,010
then it basically looks to the process

301
00:12:02,060 --> 00:12:06,050
like a superset of all the code in all

302
00:12:04,010 --> 00:12:08,660
the permissions so if you're trying to

303
00:12:06,050 --> 00:12:12,050
analyze that app as a one-off then it's

304
00:12:08,660 --> 00:12:14,930
likely not going to run everything or at

305
00:12:12,050 --> 00:12:16,880
all another reason they don't run into

306
00:12:14,930 --> 00:12:19,459
dynamic analysis is that a lot of

307
00:12:16,880 --> 00:12:20,600
pre-installed apps are headless so some

308
00:12:19,460 --> 00:12:22,430
of y'all might have been surprised when

309
00:12:20,600 --> 00:12:23,900
I said that Android devices often come

310
00:12:22,430 --> 00:12:26,089
to with a hundred to four hundred

311
00:12:23,900 --> 00:12:27,500
pre-installed apps because when you take

312
00:12:26,090 --> 00:12:29,090
it out of the box and you look at it you

313
00:12:27,500 --> 00:12:31,100
don't see all those apps and that's

314
00:12:29,090 --> 00:12:33,830
because they're headless aka don't have

315
00:12:31,100 --> 00:12:35,390
a user interface but the problem is is

316
00:12:33,830 --> 00:12:37,850
that the way a lot of the automated

317
00:12:35,390 --> 00:12:39,380
dynamic analysis pipelines work is that

318
00:12:37,850 --> 00:12:42,230
they will automatically launch the

319
00:12:39,380 --> 00:12:44,600
launcher activity that is within the app

320
00:12:42,230 --> 00:12:46,460
the launcher activity is designated in

321
00:12:44,600 --> 00:12:49,010
an ox manifest because it is the

322
00:12:46,460 --> 00:12:51,020
activity that is run when a user clicks

323
00:12:49,010 --> 00:12:53,569
on the icon and that's what starts the

324
00:12:51,020 --> 00:12:56,210
app but if the app doesn't have a UI it

325
00:12:53,570 --> 00:12:58,910
doesn't have a Lunger activity and so in

326
00:12:56,210 --> 00:13:01,280
order to start or execute code for one

327
00:12:58,910 --> 00:13:03,620
of these headless apps you usually have

328
00:13:01,280 --> 00:13:05,930
to do static analysis in order to find

329
00:13:03,620 --> 00:13:08,090
what activities and services or

330
00:13:05,930 --> 00:13:08,870
receivers have intent filters and that's

331
00:13:08,090 --> 00:13:11,870
how it started

332
00:13:08,870 --> 00:13:14,360
so anyways to be able to have it run in

333
00:13:11,870 --> 00:13:15,829
dynamic analysis you're going to need to

334
00:13:14,360 --> 00:13:19,730
do static

335
00:13:15,829 --> 00:13:21,319
to get it to that point class are not

336
00:13:19,730 --> 00:13:23,029
lastly but this one's pretty obvious

337
00:13:21,320 --> 00:13:24,500
when you think about it but when you

338
00:13:23,029 --> 00:13:26,089
have a pre-installed app it can be

339
00:13:24,500 --> 00:13:28,130
confident and so on a very specific

340
00:13:26,089 --> 00:13:30,680
device and sometimes they're dependent

341
00:13:28,130 --> 00:13:32,689
on custom hardware and while the

342
00:13:30,680 --> 00:13:35,630
hardware abstraction layer or hell of

343
00:13:32,690 --> 00:13:37,610
Android tries to extract the abstract a

344
00:13:35,630 --> 00:13:39,829
lot of this out if you're dynamic

345
00:13:37,610 --> 00:13:42,050
analysis environment doesn't have some

346
00:13:39,829 --> 00:13:44,569
of that hardware or they're dependent on

347
00:13:42,050 --> 00:13:47,479
other customizations it's just not gonna

348
00:13:44,570 --> 00:13:50,060
run the final one which is an

349
00:13:47,480 --> 00:13:52,040
interesting problem is that if you're

350
00:13:50,060 --> 00:13:54,380
still dependent for dynamic analysis on

351
00:13:52,040 --> 00:13:59,149
side loading versus you know buying that

352
00:13:54,380 --> 00:14:02,329
exact device then you for example can't

353
00:13:59,149 --> 00:14:05,449
really side load a Settings app or the

354
00:14:02,329 --> 00:14:07,300
dialer app or the system UI app into a

355
00:14:05,449 --> 00:14:09,740
new device and have it run effectively

356
00:14:07,300 --> 00:14:13,130
so that's an interesting problem because

357
00:14:09,740 --> 00:14:15,500
yes we have seen security issues in

358
00:14:13,130 --> 00:14:19,070
badness in some of those critical apps

359
00:14:15,500 --> 00:14:21,410
that have been modified so how do you

360
00:14:19,070 --> 00:14:24,110
address this and it's the favorite

361
00:14:21,410 --> 00:14:27,170
answer of it depends because it's going

362
00:14:24,110 --> 00:14:29,620
to depend so much on what your cases for

363
00:14:27,170 --> 00:14:32,300
example our team of trying to review

364
00:14:29,620 --> 00:14:32,899
tons of pre-installed apps from every

365
00:14:32,300 --> 00:14:35,120
different

366
00:14:32,899 --> 00:14:36,740
Oh am all the different devices is very

367
00:14:35,120 --> 00:14:39,260
different from a researcher who's liked

368
00:14:36,740 --> 00:14:41,089
for six months I'm going to do a deep

369
00:14:39,260 --> 00:14:43,310
dive into every pre-installed app on

370
00:14:41,089 --> 00:14:46,699
this one device so that's where it is a

371
00:14:43,310 --> 00:14:48,380
different cases so if you're that

372
00:14:46,699 --> 00:14:49,640
researcher that just wants to do deep

373
00:14:48,380 --> 00:14:51,649
dive then you can probably just

374
00:14:49,640 --> 00:14:55,399
instrument that one device find that one

375
00:14:51,649 --> 00:14:57,800
phone and then work whereas for example

376
00:14:55,399 --> 00:15:00,140
for us we considered what might be the

377
00:14:57,800 --> 00:15:02,750
biggest bang bang for the buck in order

378
00:15:00,140 --> 00:15:05,930
to get the majority of apps running with

379
00:15:02,750 --> 00:15:08,180
litter smaller changes to the dynamic

380
00:15:05,930 --> 00:15:11,300
analysis environment so for example for

381
00:15:08,180 --> 00:15:13,939
the first one that might be signing the

382
00:15:11,300 --> 00:15:17,000
dynamic analysis environment with our

383
00:15:13,940 --> 00:15:21,949
key and then re signing each app we want

384
00:15:17,000 --> 00:15:25,040
to run another issue is app collusion

385
00:15:21,949 --> 00:15:26,660
so we talked about this a little bit

386
00:15:25,040 --> 00:15:27,810
with shared user ID but the main

387
00:15:26,660 --> 00:15:29,879
difference is that

388
00:15:27,810 --> 00:15:32,459
while this may happen sometimes in

389
00:15:29,879 --> 00:15:33,959
userspace apps it happens quite a bit in

390
00:15:32,459 --> 00:15:36,149
pre-installed apps because they know

391
00:15:33,959 --> 00:15:38,638
their environment they can be confident

392
00:15:36,149 --> 00:15:41,209
this other app will exist on the device

393
00:15:38,639 --> 00:15:43,620
or these binaries or this OS OS

394
00:15:41,209 --> 00:15:45,180
modifications so if you're going to try

395
00:15:43,620 --> 00:15:47,999
and analyze that app as a

396
00:15:45,180 --> 00:15:49,979
self-sufficient entity it may have

397
00:15:47,999 --> 00:15:51,779
spread its bad behaviors across a

398
00:15:49,980 --> 00:15:54,509
different a couple of different

399
00:15:51,779 --> 00:15:58,379
components and instead while we might

400
00:15:54,509 --> 00:16:00,209
still choose to analyze one at a time we

401
00:15:58,379 --> 00:16:02,249
need to keep our minds open to look for

402
00:16:00,209 --> 00:16:06,930
signals that tell us I need to look out

403
00:16:02,249 --> 00:16:08,399
and I need to understand the rest of the

404
00:16:06,930 --> 00:16:11,008
components in the environment this app

405
00:16:08,399 --> 00:16:12,660
runs it so an example of this and this

406
00:16:11,009 --> 00:16:15,509
is what it looks like in practice for

407
00:16:12,660 --> 00:16:17,759
the shared user ID of two apps is we

408
00:16:15,509 --> 00:16:20,129
believe one or both of these apps are

409
00:16:17,759 --> 00:16:22,410
doing what we call SMS fraud meaning

410
00:16:20,129 --> 00:16:24,569
that it sends a premium SMS text message

411
00:16:22,410 --> 00:16:26,939
without the users consent

412
00:16:24,569 --> 00:16:29,399
thus charging their mobile bill not good

413
00:16:26,939 --> 00:16:33,000
but what we see is app number one when

414
00:16:29,399 --> 00:16:35,160
we begin to analyze it it declares that

415
00:16:33,000 --> 00:16:37,350
send SMS permission but it doesn't have

416
00:16:35,160 --> 00:16:39,930
any code or API calls to actually send a

417
00:16:37,350 --> 00:16:43,290
text message app number two on the other

418
00:16:39,930 --> 00:16:46,589
hand doesn't have to send SMS permission

419
00:16:43,290 --> 00:16:48,959
but it does have API calls to send text

420
00:16:46,589 --> 00:16:51,000
message which those API calls require

421
00:16:48,959 --> 00:16:52,589
and then you take a look at their

422
00:16:51,000 --> 00:16:54,899
manifest and realize that both of them

423
00:16:52,589 --> 00:16:57,000
declare the same shared user ID and are

424
00:16:54,899 --> 00:16:58,529
signed with the same key so to the

425
00:16:57,000 --> 00:17:02,160
device it looks like they're running as

426
00:16:58,529 --> 00:17:03,930
a single process with code that has call

427
00:17:02,160 --> 00:17:07,648
send text message and they have the

428
00:17:03,930 --> 00:17:10,889
permission to send SMS and so together

429
00:17:07,648 --> 00:17:13,549
is how they're malicious and each

430
00:17:10,890 --> 00:17:16,049
individually though appear to be benign

431
00:17:13,549 --> 00:17:18,780
another example of multi app collusion

432
00:17:16,049 --> 00:17:21,148
is the use of custom permissions so

433
00:17:18,780 --> 00:17:24,119
there's been some research calling out

434
00:17:21,148 --> 00:17:26,039
all custom permissions as bad but I

435
00:17:24,119 --> 00:17:29,309
disagree because I think they are a way

436
00:17:26,039 --> 00:17:32,580
to really allow device manufacturers

437
00:17:29,309 --> 00:17:34,889
apps to smaller segment protections to

438
00:17:32,580 --> 00:17:37,080
information or functionality however

439
00:17:34,890 --> 00:17:38,970
when you see them you need to be aware

440
00:17:37,080 --> 00:17:41,668
of whether or not they may be proxying

441
00:17:38,970 --> 00:17:44,190
permissions so what I mean by that is we

442
00:17:41,669 --> 00:17:47,640
have this app and in the app manifest

443
00:17:44,190 --> 00:17:50,159
it's secure it defines a new permission

444
00:17:47,640 --> 00:17:51,870
a custom permission and it says that

445
00:17:50,159 --> 00:17:53,760
that custom permission is going to be

446
00:17:51,870 --> 00:17:55,559
dangerous by the way the way you know

447
00:17:53,760 --> 00:17:57,419
it's defining a new permission versus

448
00:17:55,559 --> 00:17:59,158
using one is that that tag at the Bert

449
00:17:57,419 --> 00:18:02,100
the beginning says permission rather

450
00:17:59,159 --> 00:18:04,260
than uses - permission so this is

451
00:18:02,100 --> 00:18:06,090
defining one it says the protection

452
00:18:04,260 --> 00:18:08,340
levels dangerous which means any other

453
00:18:06,090 --> 00:18:10,230
app on the device may request it it's

454
00:18:08,340 --> 00:18:10,799
not protected by this or anything like

455
00:18:10,230 --> 00:18:13,649
that

456
00:18:10,799 --> 00:18:16,230
then we see that the service that this

457
00:18:13,649 --> 00:18:19,289
app has is protected by that permission

458
00:18:16,230 --> 00:18:21,270
meaning that any application that wants

459
00:18:19,289 --> 00:18:24,740
to interact with that from that service

460
00:18:21,270 --> 00:18:27,809
will need to request this permission and

461
00:18:24,740 --> 00:18:30,330
that's fine that's good the problem

462
00:18:27,809 --> 00:18:33,178
comes in is if my service right here is

463
00:18:30,330 --> 00:18:35,879
doing a behavior that is protected by an

464
00:18:33,179 --> 00:18:38,190
even more sensitive permission then we

465
00:18:35,880 --> 00:18:39,690
get into this proxy situation so what

466
00:18:38,190 --> 00:18:42,049
this could look like for example is

467
00:18:39,690 --> 00:18:44,669
let's say my service was silently

468
00:18:42,049 --> 00:18:46,918
downloading and installing apps that

469
00:18:44,669 --> 00:18:48,450
behavior is a signature of privileged

470
00:18:46,919 --> 00:18:50,250
permission and it's called install

471
00:18:48,450 --> 00:18:53,149
packages and it goes through a specific

472
00:18:50,250 --> 00:18:56,909
waiver process to be granted that and

473
00:18:53,149 --> 00:18:59,250
now instead though they're letting other

474
00:18:56,909 --> 00:19:02,220
people access that behavior and they

475
00:18:59,250 --> 00:19:04,799
only have to request this permission so

476
00:19:02,220 --> 00:19:06,870
they're other apps or components on the

477
00:19:04,799 --> 00:19:09,658
device could now get access to that very

478
00:19:06,870 --> 00:19:12,090
sensitive behavior usually protected by

479
00:19:09,659 --> 00:19:15,320
a signature or privileged permission by

480
00:19:12,090 --> 00:19:18,418
just getting this userspace permission

481
00:19:15,320 --> 00:19:20,370
apps though don't only collude with

482
00:19:18,419 --> 00:19:23,280
other apps sometimes they will also

483
00:19:20,370 --> 00:19:25,590
expect and depend on behavior that comes

484
00:19:23,280 --> 00:19:29,309
from binary Damons on the device or even

485
00:19:25,590 --> 00:19:31,020
operating system modifications so we'll

486
00:19:29,309 --> 00:19:34,440
talk about this in case study number one

487
00:19:31,020 --> 00:19:37,408
but apps can start Damons better living

488
00:19:34,440 --> 00:19:39,149
in system /bin or sometimes they just

489
00:19:37,409 --> 00:19:41,399
know they're running on a timer in the

490
00:19:39,149 --> 00:19:44,250
background and will interact with them

491
00:19:41,399 --> 00:19:45,239
at that point and when on the second

492
00:19:44,250 --> 00:19:47,850
bullet when we're talking about the

493
00:19:45,240 --> 00:19:52,649
operating system or framework just

494
00:19:47,850 --> 00:19:55,080
framework is the Android AP is so part

495
00:19:52,649 --> 00:19:57,539
of the operating system and that respect

496
00:19:55,080 --> 00:20:00,689
of here are the Android API is in this

497
00:19:57,539 --> 00:20:02,279
example here triada which I won't talk

498
00:20:00,690 --> 00:20:04,919
about in depth today but there's a lot

499
00:20:02,279 --> 00:20:07,289
of information out there and about it is

500
00:20:04,919 --> 00:20:11,249
what they did for that backdoor is they

501
00:20:07,289 --> 00:20:13,769
modified the Android log API to be

502
00:20:11,249 --> 00:20:16,350
overloaded and allowed two arguments so

503
00:20:13,769 --> 00:20:17,129
if any app wanted to interact with the

504
00:20:16,350 --> 00:20:20,369
backdoor

505
00:20:17,129 --> 00:20:22,080
they sent a second argument in log and

506
00:20:20,369 --> 00:20:26,220
that's the type of modification we're

507
00:20:22,080 --> 00:20:28,070
talking about another thing that we ran

508
00:20:26,220 --> 00:20:30,479
into when beginning to reverse engineer

509
00:20:28,070 --> 00:20:33,090
pre-installed apps rather than user

510
00:20:30,479 --> 00:20:34,889
space apps is that pre-installed apps

511
00:20:33,090 --> 00:20:37,949
are supposed to operate in a more

512
00:20:34,889 --> 00:20:40,590
privileged context and so we had for

513
00:20:37,950 --> 00:20:42,720
years and years and years fine-tuned our

514
00:20:40,590 --> 00:20:48,059
detection czar processed our scores

515
00:20:42,720 --> 00:20:51,119
email models to identify badness or PHA

516
00:20:48,059 --> 00:20:54,720
and user space apps so something like

517
00:20:51,119 --> 00:20:58,830
this might be let's say we have our SMS

518
00:20:54,720 --> 00:21:01,049
fraud email model and it's looking for

519
00:20:58,830 --> 00:21:03,899
things that are sending SMS messages

520
00:21:01,049 --> 00:21:05,700
when we began trying to apply all of

521
00:21:03,899 --> 00:21:07,408
these scores and detection x' to

522
00:21:05,700 --> 00:21:09,929
pre-installed apps we had a huge amount

523
00:21:07,409 --> 00:21:11,359
of false positives so many some times

524
00:21:09,929 --> 00:21:14,399
that it was really hard to wade through

525
00:21:11,359 --> 00:21:16,289
because a lot of these scores and

526
00:21:14,399 --> 00:21:18,090
detections were on the lookout for

527
00:21:16,289 --> 00:21:20,279
anything that looked too privileged or

528
00:21:18,090 --> 00:21:22,470
looking out for apps that pretended to

529
00:21:20,279 --> 00:21:25,529
be system applications as a lot of

530
00:21:22,470 --> 00:21:27,690
trojans do so my suggestion to you is if

531
00:21:25,529 --> 00:21:30,509
you want to begin applying your tools

532
00:21:27,690 --> 00:21:33,269
and things like that to pre-installed

533
00:21:30,509 --> 00:21:35,820
apps do it in small chunks at a time so

534
00:21:33,269 --> 00:21:38,849
you're not overloaded overloaded with

535
00:21:35,820 --> 00:21:41,939
false positives and probably begin to

536
00:21:38,849 --> 00:21:44,220
think about what does SMS fraud look

537
00:21:41,940 --> 00:21:45,989
like in a pre-installed context so that

538
00:21:44,220 --> 00:21:50,940
you're not for example flagging the

539
00:21:45,989 --> 00:21:52,139
messages apps on devices so I know this

540
00:21:50,940 --> 00:21:54,149
is what a lot of people are interested

541
00:21:52,139 --> 00:21:56,340
in let's talk about what this really

542
00:21:54,149 --> 00:21:59,169
looks like in practice and sort of the

543
00:21:56,340 --> 00:22:01,929
variety and range of

544
00:21:59,170 --> 00:22:05,050
how different security issues can

545
00:22:01,930 --> 00:22:08,230
manifest on the wide variety of devices

546
00:22:05,050 --> 00:22:09,610
that make up the Android ecosystem so

547
00:22:08,230 --> 00:22:12,000
the first case study we're going to talk

548
00:22:09,610 --> 00:22:13,620
about is two different examples of

549
00:22:12,000 --> 00:22:17,500
arbitrary remote code execution

550
00:22:13,620 --> 00:22:19,899
backdoors so when I say arbitrary remote

551
00:22:17,500 --> 00:22:22,300
code execution first what I mean by

552
00:22:19,900 --> 00:22:25,870
remote is a little different than in

553
00:22:22,300 --> 00:22:28,510
some context is we consider remote if it

554
00:22:25,870 --> 00:22:30,570
can be commanded or controlled by any

555
00:22:28,510 --> 00:22:35,560
other application on the device and

556
00:22:30,570 --> 00:22:38,290
while that might not go with some of the

557
00:22:35,560 --> 00:22:41,260
other paradigms the reason why is

558
00:22:38,290 --> 00:22:43,030
because it's to be more cautious and

559
00:22:41,260 --> 00:22:44,860
user protection because it's not that

560
00:22:43,030 --> 00:22:47,170
hard to get someone to install a user

561
00:22:44,860 --> 00:22:49,479
space application and if a user space

562
00:22:47,170 --> 00:22:51,970
application is on a device and able to

563
00:22:49,480 --> 00:22:55,300
command and control or any component

564
00:22:51,970 --> 00:22:57,640
that's concerning arbitrary means that

565
00:22:55,300 --> 00:23:01,360
it will literally run any command that

566
00:22:57,640 --> 00:23:03,970
the commanding entity wants to and just

567
00:23:01,360 --> 00:23:05,709
for information some of the common API

568
00:23:03,970 --> 00:23:07,810
is to look out for when looking for

569
00:23:05,710 --> 00:23:10,450
command execution is if you're in the

570
00:23:07,810 --> 00:23:13,570
Java Kotlin realm within apps its

571
00:23:10,450 --> 00:23:15,670
runtime exec and process builder are the

572
00:23:13,570 --> 00:23:17,649
most common api's while if you're in

573
00:23:15,670 --> 00:23:19,360
native code you know you have all the

574
00:23:17,650 --> 00:23:23,620
Linux ones but some of the most common

575
00:23:19,360 --> 00:23:26,919
we see for pre-installed is system so

576
00:23:23,620 --> 00:23:29,320
example number one what was it complex

577
00:23:26,920 --> 00:23:33,130
diagnostic software that was left on

578
00:23:29,320 --> 00:23:34,450
production builds joy so it had four

579
00:23:33,130 --> 00:23:36,480
different components and that's why I

580
00:23:34,450 --> 00:23:39,190
say it's complex it had a pre-installed

581
00:23:36,480 --> 00:23:40,450
application to different types of native

582
00:23:39,190 --> 00:23:44,140
Damons running on the device

583
00:23:40,450 --> 00:23:46,030
a modified selinux policy to allow the

584
00:23:44,140 --> 00:23:48,250
command execution to be more privileged

585
00:23:46,030 --> 00:23:51,580
than is usually possible as well as a

586
00:23:48,250 --> 00:23:54,640
custom kernel of character device to

587
00:23:51,580 --> 00:23:56,560
enable it so this is what the flow chart

588
00:23:54,640 --> 00:23:59,260
looked like we had our pre-installed

589
00:23:56,560 --> 00:24:01,960
application the app is the one that

590
00:23:59,260 --> 00:24:04,330
communicated with whatever remote entity

591
00:24:01,960 --> 00:24:06,880
through a socket it would also send

592
00:24:04,330 --> 00:24:09,010
information off the device based on some

593
00:24:06,880 --> 00:24:12,210
of the commands it executed what was

594
00:24:09,010 --> 00:24:14,429
returned via a hard-coded email address

595
00:24:12,210 --> 00:24:16,980
so the this is the code from the

596
00:24:14,429 --> 00:24:20,279
pre-installed application at the top we

597
00:24:16,980 --> 00:24:22,080
see it connecting to a socket then it's

598
00:24:20,279 --> 00:24:23,879
basically sort of a handshake saying the

599
00:24:22,080 --> 00:24:26,100
remote client needs to know I believe it

600
00:24:23,879 --> 00:24:28,649
seven times to hit enter as the app

601
00:24:26,100 --> 00:24:31,320
sends different device information and

602
00:24:28,649 --> 00:24:33,840
then at the bottom and finally after

603
00:24:31,320 --> 00:24:36,029
seven hitting enter seven times the

604
00:24:33,840 --> 00:24:38,279
remote entity can send a string it's

605
00:24:36,029 --> 00:24:42,360
base64 decoded and then sent to this

606
00:24:38,279 --> 00:24:44,820
proc DM string method props iam string

607
00:24:42,360 --> 00:24:47,639
then just directly writes that string

608
00:24:44,820 --> 00:24:49,289
with no sort of processing into a text

609
00:24:47,639 --> 00:24:52,830
file that lives in the apps cache

610
00:24:49,289 --> 00:24:54,658
directory then we have the our first

611
00:24:52,830 --> 00:24:57,840
daemon and this is where the modified

612
00:24:54,659 --> 00:25:00,210
selinux policy came into play then this

613
00:24:57,840 --> 00:25:03,749
daemon goes into the apps directory and

614
00:25:00,210 --> 00:25:06,480
reads that txt file so what we see is at

615
00:25:03,749 --> 00:25:08,460
the top is the actual code in the native

616
00:25:06,480 --> 00:25:11,340
daemon and at the bottom is the bash

617
00:25:08,460 --> 00:25:13,230
command that it actually generated so

618
00:25:11,340 --> 00:25:16,049
what they're saying is once this text

619
00:25:13,230 --> 00:25:17,940
file exists then cat its contents

620
00:25:16,049 --> 00:25:20,879
directly into this kernel character

621
00:25:17,940 --> 00:25:22,169
device then remove the file so that's

622
00:25:20,879 --> 00:25:24,869
what I meant when I said there can be

623
00:25:22,169 --> 00:25:26,249
collusion of that the app note knew that

624
00:25:24,869 --> 00:25:28,408
this daemon would be running in the

625
00:25:26,249 --> 00:25:30,990
background to gather the contents that

626
00:25:28,409 --> 00:25:33,179
were received from the socket then we

627
00:25:30,990 --> 00:25:35,700
have daemon number two daemon number

628
00:25:33,179 --> 00:25:37,529
two's job is to process the commands

629
00:25:35,700 --> 00:25:40,080
receive from the socket so it's

630
00:25:37,529 --> 00:25:41,549
constantly monitoring the kernel

631
00:25:40,080 --> 00:25:42,840
character device to see when new

632
00:25:41,549 --> 00:25:44,549
information is written there and

633
00:25:42,840 --> 00:25:46,158
whenever information has been written

634
00:25:44,549 --> 00:25:49,259
there it processed the information

635
00:25:46,159 --> 00:25:51,720
what's most interesting to us was that

636
00:25:49,259 --> 00:25:57,419
if the string received from the socket

637
00:25:51,720 --> 00:25:59,820
was encapsulated by two tags exx SH in

638
00:25:57,419 --> 00:26:02,610
the closing exs site it immediately

639
00:25:59,820 --> 00:26:07,799
passed what it was ever in between two

640
00:26:02,610 --> 00:26:11,008
system so that's really not good this is

641
00:26:07,799 --> 00:26:12,869
what it looks like in Ida at the top we

642
00:26:11,009 --> 00:26:15,659
see it looking for substring between

643
00:26:12,869 --> 00:26:20,459
those two tags and then it just passes

644
00:26:15,659 --> 00:26:22,109
directly to the system assist call so

645
00:26:20,460 --> 00:26:24,990
what do you do when you find something

646
00:26:22,109 --> 00:26:25,720
like this we found this the very first

647
00:26:24,990 --> 00:26:29,320
day the

648
00:26:25,720 --> 00:26:33,040
Matt om began submitting to BTS but

649
00:26:29,320 --> 00:26:34,720
because BTS was a newer thing it had

650
00:26:33,040 --> 00:26:38,290
already gone out in some devices in the

651
00:26:34,720 --> 00:26:40,150
wild so it did end up affecting 223

652
00:26:38,290 --> 00:26:42,970
different builds fingerprints the bills

653
00:26:40,150 --> 00:26:46,090
fingerprint is basically the ID for an

654
00:26:42,970 --> 00:26:48,730
exact firmware image across 16 different

655
00:26:46,090 --> 00:26:51,129
SKUs with about 6 million affected users

656
00:26:48,730 --> 00:26:54,550
but what sort of did give us hope is

657
00:26:51,130 --> 00:26:56,980
that 70% of those affected users did

658
00:26:54,550 --> 00:26:59,409
have an OTA update available within two

659
00:26:56,980 --> 00:27:02,980
weeks and a hundred percent had one

660
00:26:59,410 --> 00:27:04,960
available within one month and if a user

661
00:27:02,980 --> 00:27:09,370
had Google Play protect enabled on their

662
00:27:04,960 --> 00:27:11,740
device while GPP can't remove the app

663
00:27:09,370 --> 00:27:14,139
due to it existing on a read-only file

664
00:27:11,740 --> 00:27:18,160
system it was able to disable the

665
00:27:14,140 --> 00:27:20,740
application now we have another example

666
00:27:18,160 --> 00:27:22,870
of arbitrary remote code execution and

667
00:27:20,740 --> 00:27:25,120
this one looks very very different than

668
00:27:22,870 --> 00:27:27,060
the first one because it was

669
00:27:25,120 --> 00:27:29,739
self-contained wholly within a single

670
00:27:27,060 --> 00:27:32,379
pre-installed application and the

671
00:27:29,740 --> 00:27:34,390
purpose of it was to be a diagnostic

672
00:27:32,380 --> 00:27:36,640
software used for remotely managing a

673
00:27:34,390 --> 00:27:38,890
large fleet of devices so this was not

674
00:27:36,640 --> 00:27:42,130
actually the user the normal user

675
00:27:38,890 --> 00:27:44,680
Android handheld like a mobile phone for

676
00:27:42,130 --> 00:27:48,160
users it was used in sort of enterprise

677
00:27:44,680 --> 00:27:50,560
factory industrial control system

678
00:27:48,160 --> 00:27:53,650
environments and that's why as soon as

679
00:27:50,560 --> 00:27:56,020
we reported it to the OEM they filed for

680
00:27:53,650 --> 00:27:59,890
a CBE as well as then there was an ICS

681
00:27:56,020 --> 00:28:01,810
advisory from u.s. cert that went out so

682
00:27:59,890 --> 00:28:03,100
how did this manifest and it was

683
00:28:01,810 --> 00:28:05,320
actually I didn't mean to do that but it

684
00:28:03,100 --> 00:28:07,419
was actually a lot of bug was in the

685
00:28:05,320 --> 00:28:10,240
manifest so the first thing we see here

686
00:28:07,420 --> 00:28:14,250
is that it is running a shared user ID

687
00:28:10,240 --> 00:28:16,900
system shared user ID system is the most

688
00:28:14,250 --> 00:28:19,270
privileged process on an Android device

689
00:28:16,900 --> 00:28:22,930
besides root so if you see something

690
00:28:19,270 --> 00:28:25,240
running a system nominally it has access

691
00:28:22,930 --> 00:28:28,420
to every single permission on the device

692
00:28:25,240 --> 00:28:30,940
since remember shared user IDs mean it

693
00:28:28,420 --> 00:28:34,120
is the superset of all the permissions

694
00:28:30,940 --> 00:28:37,180
of all the code that are all superset of

695
00:28:34,120 --> 00:28:38,090
the permissions the next issue came is

696
00:28:37,180 --> 00:28:40,700
that they have

697
00:28:38,090 --> 00:28:42,830
service and in the manifest they set

698
00:28:40,700 --> 00:28:45,500
this service to being exported equals

699
00:28:42,830 --> 00:28:48,529
true and what that means is when a

700
00:28:45,500 --> 00:28:50,960
service is exported any other component

701
00:28:48,529 --> 00:28:53,570
on the device is able to start it bind

702
00:28:50,960 --> 00:28:56,539
to it stop it etc any sort of those

703
00:28:53,570 --> 00:28:59,570
interactions so if we take a look at

704
00:28:56,539 --> 00:29:03,860
what that service looks like the key is

705
00:28:59,570 --> 00:29:06,770
that they have set a binder in Android a

706
00:29:03,860 --> 00:29:08,389
binder is one of the IPC mechanisms

707
00:29:06,770 --> 00:29:10,220
inter-process communications and it's

708
00:29:08,390 --> 00:29:14,510
kind of like a server client paradigm

709
00:29:10,220 --> 00:29:16,520
type of thing so this means that any

710
00:29:14,510 --> 00:29:19,158
component on the device and it can call

711
00:29:16,520 --> 00:29:23,480
on the bind and receive back this binder

712
00:29:19,159 --> 00:29:25,690
object the binder was this system

713
00:29:23,480 --> 00:29:29,419
operation service dollar sign three

714
00:29:25,690 --> 00:29:31,520
class which it define defines a whole

715
00:29:29,419 --> 00:29:33,980
bunch of methods that now the client

716
00:29:31,520 --> 00:29:37,370
process which has requested that binder

717
00:29:33,980 --> 00:29:39,559
object they can directly call and it had

718
00:29:37,370 --> 00:29:42,289
a lot of methods that were defined to be

719
00:29:39,559 --> 00:29:45,139
able to be directly called but of course

720
00:29:42,289 --> 00:29:47,299
Exe commands was very concerning because

721
00:29:45,140 --> 00:29:50,899
it's running as this privileged

722
00:29:47,299 --> 00:29:53,090
processes system and now client aka any

723
00:29:50,899 --> 00:29:56,809
other component on the device is able to

724
00:29:53,090 --> 00:29:58,760
call exe command whatever command I want

725
00:29:56,809 --> 00:30:04,158
it to run and it is directly passed to

726
00:29:58,760 --> 00:30:06,379
runtime exec but this proposed sort of

727
00:30:04,159 --> 00:30:08,570
an interesting detection problem to me

728
00:30:06,380 --> 00:30:12,559
that I just thought was interesting and

729
00:30:08,570 --> 00:30:15,260
fun the fix for the OEM to this is to

730
00:30:12,559 --> 00:30:18,799
add a permission protecting the service

731
00:30:15,260 --> 00:30:22,879
so that only other of their code is able

732
00:30:18,799 --> 00:30:25,190
to call this and that means this fix in

733
00:30:22,880 --> 00:30:27,799
the fixed version and in the backdoored

734
00:30:25,190 --> 00:30:31,789
version all of the executable code is

735
00:30:27,799 --> 00:30:35,360
exactly the same which we were always

736
00:30:31,789 --> 00:30:37,820
trying to create detection to detect the

737
00:30:35,360 --> 00:30:40,219
bad behaviors the actual bad execution

738
00:30:37,820 --> 00:30:43,189
what's the harm that's being done rather

739
00:30:40,220 --> 00:30:45,409
than static signals so this kind of just

740
00:30:43,190 --> 00:30:47,340
threw all of us for a loop of you can

741
00:30:45,409 --> 00:30:50,650
have

742
00:30:47,340 --> 00:30:52,810
with security issues in an app that is

743
00:30:50,650 --> 00:30:55,390
benign and they have the exact same

744
00:30:52,810 --> 00:30:58,810
executable code so just an interesting

745
00:30:55,390 --> 00:31:01,150
Seidler so that's two examples of remote

746
00:30:58,810 --> 00:31:03,970
code execution then we get into a

747
00:31:01,150 --> 00:31:07,630
different type of issue the in this

748
00:31:03,970 --> 00:31:10,300
issue the OEM modified the framework the

749
00:31:07,630 --> 00:31:13,480
OS that includes the Android API so in

750
00:31:10,300 --> 00:31:15,610
order to do you are out logging so this

751
00:31:13,480 --> 00:31:18,070
was actually discovered by Lucas shivir

752
00:31:15,610 --> 00:31:21,729
ski aka mal joyed on twitter and he's

753
00:31:18,070 --> 00:31:24,760
around here somewhere and what they did

754
00:31:21,730 --> 00:31:27,790
is they modified OS an application in

755
00:31:24,760 --> 00:31:30,490
order to get access to every URL that

756
00:31:27,790 --> 00:31:34,840
was visited through webview and thus

757
00:31:30,490 --> 00:31:37,300
that's spyware so what this looked like

758
00:31:34,840 --> 00:31:39,580
didn't practice is they modified the

759
00:31:37,300 --> 00:31:42,040
framework classes in order for each of

760
00:31:39,580 --> 00:31:44,590
those to send an intent every single

761
00:31:42,040 --> 00:31:48,220
single time those framework api's were

762
00:31:44,590 --> 00:31:50,260
called with custom data and then they

763
00:31:48,220 --> 00:31:52,360
had their own logging app that

764
00:31:50,260 --> 00:31:53,920
registered a receiver for that intent so

765
00:31:52,360 --> 00:31:56,169
that they would receive it and be able

766
00:31:53,920 --> 00:31:58,240
to read all that sensitive data that

767
00:31:56,170 --> 00:32:03,700
they wanted to log and then they

768
00:31:58,240 --> 00:32:06,040
uploaded it sometimes so the other

769
00:32:03,700 --> 00:32:07,630
problem if this wasn't enough is that

770
00:32:06,040 --> 00:32:09,730
they were sending these an intense and

771
00:32:07,630 --> 00:32:12,490
an unprotected way which meant that

772
00:32:09,730 --> 00:32:15,100
while they only intended for their one

773
00:32:12,490 --> 00:32:17,290
app logging apps to be able to grab the

774
00:32:15,100 --> 00:32:19,719
sensitive data in reality any

775
00:32:17,290 --> 00:32:21,940
application on the device included user

776
00:32:19,720 --> 00:32:24,130
side loaded apps malware anything like

777
00:32:21,940 --> 00:32:26,040
that could get grabbed this if they knew

778
00:32:24,130 --> 00:32:28,390
what to look for

779
00:32:26,040 --> 00:32:32,200
so what did those framework

780
00:32:28,390 --> 00:32:35,260
modifications look like one example is

781
00:32:32,200 --> 00:32:38,080
that they modified webview as I said so

782
00:32:35,260 --> 00:32:40,690
every single time webview went to loaded

783
00:32:38,080 --> 00:32:43,600
URL they then sent an intent that

784
00:32:40,690 --> 00:32:45,760
contained two extras one was the URL

785
00:32:43,600 --> 00:32:47,649
they were intending to load and the

786
00:32:45,760 --> 00:32:52,150
other was the applications package name

787
00:32:47,650 --> 00:32:54,370
that was intending to load it they also

788
00:32:52,150 --> 00:32:57,250
did this for the activity subclass which

789
00:32:54,370 --> 00:32:59,350
is run just about all the time so again

790
00:32:57,250 --> 00:33:01,419
they were trying to track

791
00:32:59,350 --> 00:33:03,959
applications were switching who was in

792
00:33:01,419 --> 00:33:07,299
the foreground who was in the background

793
00:33:03,960 --> 00:33:09,520
and so the issues and why they had to go

794
00:33:07,299 --> 00:33:11,379
down to the framework level was that a

795
00:33:09,520 --> 00:33:13,539
single up logging app based on the

796
00:33:11,380 --> 00:33:18,160
Android sandbox should not have that

797
00:33:13,539 --> 00:33:19,570
type of app sensitive data so here's a

798
00:33:18,160 --> 00:33:21,669
sidebar if you have been reverse

799
00:33:19,570 --> 00:33:24,879
engineering Android working in userspace

800
00:33:21,669 --> 00:33:27,309
apps then you often haven't gotten into

801
00:33:24,880 --> 00:33:29,140
framework code and so framework code can

802
00:33:27,309 --> 00:33:30,850
be a little bit intimidating to begin

803
00:33:29,140 --> 00:33:33,610
reverse engineering

804
00:33:30,850 --> 00:33:35,500
so hopefully this can help share sofirst

805
00:33:33,610 --> 00:33:37,360
framework code is generally living in

806
00:33:35,500 --> 00:33:40,360
the system slash framework directory on

807
00:33:37,360 --> 00:33:42,520
the device and it is probably one of the

808
00:33:40,360 --> 00:33:44,799
directories that changes the most with

809
00:33:42,520 --> 00:33:47,830
each new release of Android so between

810
00:33:44,799 --> 00:33:50,710
you know in what letter comes after in o

811
00:33:47,830 --> 00:33:52,360
P cute things like that and the file

812
00:33:50,710 --> 00:33:53,799
formats change a lot too

813
00:33:52,360 --> 00:33:55,840
so these are all the different types of

814
00:33:53,799 --> 00:33:57,879
file formats you might find thankfully

815
00:33:55,840 --> 00:34:02,080
there are a lot of open source tools out

816
00:33:57,880 --> 00:34:04,539
there for recreating o Dex V Dex things

817
00:34:02,080 --> 00:34:06,580
like that back into Dex files Dex

818
00:34:04,539 --> 00:34:09,129
bytecode files that then you can begin

819
00:34:06,580 --> 00:34:11,619
to reverse engineer so one of my big

820
00:34:09,129 --> 00:34:14,319
suggestions for framework while for

821
00:34:11,619 --> 00:34:16,119
everything else that generally is run as

822
00:34:14,320 --> 00:34:18,669
Dex bytecode on the device like apps

823
00:34:16,119 --> 00:34:20,800
were able to decompile back up to Java I

824
00:34:18,668 --> 00:34:22,929
have found that it's often much easier

825
00:34:20,800 --> 00:34:25,330
to reverse engineer and analyze

826
00:34:22,929 --> 00:34:27,490
framework code within small e so if

827
00:34:25,330 --> 00:34:29,830
you're new to reversing Android small E

828
00:34:27,489 --> 00:34:32,830
is sort of the equivalent to assembly in

829
00:34:29,830 --> 00:34:35,679
the Dex bytecode world so if you have

830
00:34:32,830 --> 00:34:37,810
Dex bytecode and machine code then small

831
00:34:35,679 --> 00:34:40,980
E is the human readable version of Dex

832
00:34:37,810 --> 00:34:43,090
bytecode without being decompile Java

833
00:34:40,980 --> 00:34:45,730
people don't like it also when I usually

834
00:34:43,090 --> 00:34:47,679
say this but the best way I have always

835
00:34:45,730 --> 00:34:49,449
found to figure out which of the

836
00:34:47,679 --> 00:34:51,668
hundreds of framework files to begin

837
00:34:49,449 --> 00:34:54,569
reverse engineering is for a pin string

838
00:34:51,668 --> 00:34:57,460
search people usually want a more fancy

839
00:34:54,570 --> 00:34:59,830
answer but in reality that's what I

840
00:34:57,460 --> 00:35:02,320
found and if you're looking to find ways

841
00:34:59,830 --> 00:35:03,490
to contribute to the community a tool

842
00:35:02,320 --> 00:35:05,980
that I think would be really really

843
00:35:03,490 --> 00:35:07,990
valuable for all of us to audit these

844
00:35:05,980 --> 00:35:12,589
many different devices and frameworks is

845
00:35:07,990 --> 00:35:15,200
if we built a full tool to be able to do

846
00:35:12,589 --> 00:35:19,578
framework files on a device with the

847
00:35:15,200 --> 00:35:21,979
vanilla or clean AOSP just to know what

848
00:35:19,579 --> 00:35:23,950
type of customizations have been built

849
00:35:21,979 --> 00:35:26,930
on top of this have they added

850
00:35:23,950 --> 00:35:28,640
advertising SDKs into the operating

851
00:35:26,930 --> 00:35:30,890
system or made these types of changes

852
00:35:28,640 --> 00:35:36,109
that enable really scary you know

853
00:35:30,890 --> 00:35:38,629
spyware is stuff yeah so the next case

854
00:35:36,109 --> 00:35:44,180
study we have is security settings miss

855
00:35:38,630 --> 00:35:46,969
configuration so what happened is there

856
00:35:44,180 --> 00:35:49,910
were a lot of devices disabling Google

857
00:35:46,969 --> 00:35:51,650
Play protect which Google Play protects

858
00:35:49,910 --> 00:35:53,690
has also considered that behavior

859
00:35:51,650 --> 00:35:56,390
whenever it happens without user consent

860
00:35:53,690 --> 00:36:00,469
as privileged escalate escalation for

861
00:35:56,390 --> 00:36:02,900
many years and so in order to disable or

862
00:36:00,469 --> 00:36:05,420
enable Google Play protect this happens

863
00:36:02,900 --> 00:36:11,950
through two settings that were hidden

864
00:36:05,420 --> 00:36:15,109
but still accessible to om code and so

865
00:36:11,950 --> 00:36:17,299
for many years there have also been put

866
00:36:15,109 --> 00:36:20,299
into place what we thought were a lot of

867
00:36:17,299 --> 00:36:22,339
detections to find this behavior and it

868
00:36:20,299 --> 00:36:25,069
was for looking for apps that were

869
00:36:22,339 --> 00:36:28,519
modifying GPP through this type of

870
00:36:25,069 --> 00:36:31,400
command line command settings put pack

871
00:36:28,519 --> 00:36:34,189
of the verifier enable 0 but that's how

872
00:36:31,400 --> 00:36:38,390
user space applications try to change

873
00:36:34,190 --> 00:36:41,569
that setting privileged apps are able to

874
00:36:38,390 --> 00:36:43,729
access the privileged settings api's and

875
00:36:41,569 --> 00:36:45,829
thus they don't have to do it through

876
00:36:43,729 --> 00:36:49,058
the command line method they're able to

877
00:36:45,829 --> 00:36:52,039
request the write secure settings

878
00:36:49,059 --> 00:36:55,880
permission and then use the official API

879
00:36:52,039 --> 00:36:58,670
in order to change that setting and that

880
00:36:55,880 --> 00:37:00,890
makes sense to have access because users

881
00:36:58,670 --> 00:37:03,289
need the ability to flip a switch and

882
00:37:00,890 --> 00:37:05,839
turn things off err on so of course the

883
00:37:03,289 --> 00:37:07,839
pre-installed apps would access it but

884
00:37:05,839 --> 00:37:10,910
while we didn't realize that was that

885
00:37:07,839 --> 00:37:15,950
just about everyone was doing this and

886
00:37:10,910 --> 00:37:20,328
disabling it silently and why were they

887
00:37:15,950 --> 00:37:21,710
doing this and it was because back many

888
00:37:20,329 --> 00:37:24,260
many years ago I believe it was either

889
00:37:21,710 --> 00:37:26,119
2013 or 2014 when

890
00:37:24,260 --> 00:37:28,490
at the time it was called verify apps

891
00:37:26,119 --> 00:37:31,970
but beginning to launched there was a

892
00:37:28,490 --> 00:37:34,879
consent pop-up if you did not go through

893
00:37:31,970 --> 00:37:37,669
the full setup wizard process in order

894
00:37:34,880 --> 00:37:39,740
to ask you on your first absent install

895
00:37:37,670 --> 00:37:42,760
do you want to enable the package

896
00:37:39,740 --> 00:37:44,810
verifier in this prevented people from

897
00:37:42,760 --> 00:37:46,460
automatically provisioning a fleet of

898
00:37:44,810 --> 00:37:47,900
devices because you needed a human to go

899
00:37:46,460 --> 00:37:53,000
through and click through each of them

900
00:37:47,900 --> 00:37:55,580
so some OEMs as well as within AOSP

901
00:37:53,000 --> 00:37:58,880
and GMS korg google had done it as well

902
00:37:55,580 --> 00:38:01,279
it would temporarily disable it and then

903
00:37:58,880 --> 00:38:03,170
attempt to disable it and then attempt

904
00:38:01,280 --> 00:38:07,400
to re-enable it after they got through

905
00:38:03,170 --> 00:38:11,619
the setup wizard process but what this

906
00:38:07,400 --> 00:38:15,950
led to is what made since back in the

907
00:38:11,619 --> 00:38:18,740
early days many years ago became a at

908
00:38:15,950 --> 00:38:21,020
scale privilege escalation issue because

909
00:38:18,740 --> 00:38:23,689
while most were trying to re-enable the

910
00:38:21,020 --> 00:38:25,670
setting it wasn't all the time and

911
00:38:23,690 --> 00:38:27,530
they're awesome turned out to be a race

912
00:38:25,670 --> 00:38:31,190
condition that sometimes it couldn't be

913
00:38:27,530 --> 00:38:34,280
Rhian abled so this was a huge

914
00:38:31,190 --> 00:38:36,560
undertaking in operation to get fixed

915
00:38:34,280 --> 00:38:41,230
and so the first thing was this was done

916
00:38:36,560 --> 00:38:43,549
in AOSP and so this CBE addresses

917
00:38:41,230 --> 00:38:45,410
addressed it to get it fixed and that

918
00:38:43,550 --> 00:38:49,130
went out in the Android Security

919
00:38:45,410 --> 00:38:52,490
Bulletin in January 2019 we also fixed

920
00:38:49,130 --> 00:38:54,710
the code in GMS core to fix this and

921
00:38:52,490 --> 00:38:58,609
then did a lot of communications with

922
00:38:54,710 --> 00:39:01,130
every single om to make sure that

923
00:38:58,609 --> 00:39:03,200
behavior was removed from new builds and

924
00:39:01,130 --> 00:39:05,710
i think it's just important to remember

925
00:39:03,200 --> 00:39:08,569
for all of us as security researchers of

926
00:39:05,710 --> 00:39:10,910
we're often adopting legacy code and

927
00:39:08,570 --> 00:39:13,040
it's funny to say legacy when Android is

928
00:39:10,910 --> 00:39:14,720
only 10 years old but things change fast

929
00:39:13,040 --> 00:39:16,820
in our industry and what we know about

930
00:39:14,720 --> 00:39:19,490
security so I think it's important that

931
00:39:16,820 --> 00:39:21,710
we all remember with our new tools with

932
00:39:19,490 --> 00:39:24,830
our new knowledge to go back in time and

933
00:39:21,710 --> 00:39:28,880
look at what might have changed in the

934
00:39:24,830 --> 00:39:30,200
years since so the last case study is

935
00:39:28,880 --> 00:39:34,880
very different than the other three

936
00:39:30,200 --> 00:39:37,910
because this is pure malware third party

937
00:39:34,880 --> 00:39:41,089
botnet aka Shinhwa that was included

938
00:39:37,910 --> 00:39:44,270
and quite a few different devices at its

939
00:39:41,089 --> 00:39:45,589
peak Shinhwa had hit 20 million infected

940
00:39:44,270 --> 00:39:47,839
devices and that was through both

941
00:39:45,589 --> 00:39:48,920
pre-installed and user space

942
00:39:47,839 --> 00:39:51,529
applications

943
00:39:48,920 --> 00:39:53,859
so what Shinhwa Shinhwa is a botnet

944
00:39:51,530 --> 00:39:57,140
whose payloads include premium SMS fraud

945
00:39:53,859 --> 00:39:59,750
click fraud other types of the ad fraud

946
00:39:57,140 --> 00:40:02,150
app installation fraud and arbitrary

947
00:39:59,750 --> 00:40:03,799
modulo loading in that so that they can

948
00:40:02,150 --> 00:40:06,309
you know evolve and develop new

949
00:40:03,799 --> 00:40:10,220
capabilities of their payloads and thus

950
00:40:06,309 --> 00:40:12,490
GPP flies it as a backdoor earlier this

951
00:40:10,220 --> 00:40:15,078
year I did a detailed talk on Shinhwa

952
00:40:12,490 --> 00:40:17,450
because we did consider it the most

953
00:40:15,079 --> 00:40:20,059
impactful botnet of all of 2018 and

954
00:40:17,450 --> 00:40:22,160
largely one of the reasons why it was so

955
00:40:20,059 --> 00:40:23,869
impactful is the way it infiltrated the

956
00:40:22,160 --> 00:40:26,720
supply chain and thus became

957
00:40:23,869 --> 00:40:29,089
pre-installed so this is Shinhwa you

958
00:40:26,720 --> 00:40:30,950
know super simple botnet right this

959
00:40:29,089 --> 00:40:33,740
beautiful chart was created by Remi a

960
00:40:30,950 --> 00:40:37,970
deburr and helper on Twitter and so it's

961
00:40:33,740 --> 00:40:39,618
a super complex capability but what

962
00:40:37,970 --> 00:40:42,078
we're going to focus on in this talk is

963
00:40:39,619 --> 00:40:44,140
its supply chain distribution methods so

964
00:40:42,079 --> 00:40:47,690
OMS and OU diems were tricked into

965
00:40:44,140 --> 00:40:53,288
including Shinhwa Apps or in some cases

966
00:40:47,690 --> 00:40:58,390
just a SDK of stage one so is that going

967
00:40:53,289 --> 00:41:01,010
ok I can't go by but I'm just an SDK of

968
00:40:58,390 --> 00:41:03,558
stage one and they were generally told

969
00:41:01,010 --> 00:41:06,230
it's a mobile payment solution it's an

970
00:41:03,559 --> 00:41:07,940
advertising SDK and I think this is one

971
00:41:06,230 --> 00:41:10,339
of the important factors of remembering

972
00:41:07,940 --> 00:41:12,890
the diversity of OMS that are in the

973
00:41:10,339 --> 00:41:16,308
Android space so there are some longtail

974
00:41:12,890 --> 00:41:17,930
om set cell you know $30 devices $40

975
00:41:16,309 --> 00:41:22,670
devices and have almost a negative

976
00:41:17,930 --> 00:41:25,930
margin so a a free solution or an

977
00:41:22,670 --> 00:41:29,660
advertising SDK is how they do make up

978
00:41:25,930 --> 00:41:32,118
some of their money but then the threat

979
00:41:29,660 --> 00:41:37,190
actors know that too and try to pray on

980
00:41:32,119 --> 00:41:39,710
that need and so yeah so they generally

981
00:41:37,190 --> 00:41:43,220
had pre-installed two different methods

982
00:41:39,710 --> 00:41:45,680
of distribution one was the stage one

983
00:41:43,220 --> 00:41:48,319
Shinhwa apk was statically pre-installed

984
00:41:45,680 --> 00:41:50,339
on the device it was awesome often named

985
00:41:48,319 --> 00:41:53,910
like sales tracker or something like

986
00:41:50,340 --> 00:41:56,430
that otherwise they pre-installed an

987
00:41:53,910 --> 00:41:59,490
application that would then dynamically

988
00:41:56,430 --> 00:42:01,440
download and execute the Shema SDK so

989
00:41:59,490 --> 00:42:03,390
there was sort of two distribution

990
00:42:01,440 --> 00:42:09,480
methods in the preinstalled supply chain

991
00:42:03,390 --> 00:42:12,270
ecosystem they're so eager fonts eager

992
00:42:09,480 --> 00:42:16,020
fonts is a fonts application that was

993
00:42:12,270 --> 00:42:19,530
included by a sock vendor in their

994
00:42:16,020 --> 00:42:21,030
platform from a third-party developer so

995
00:42:19,530 --> 00:42:23,580
the reason why they chose to include it

996
00:42:21,030 --> 00:42:26,160
was this one set application was wanted

997
00:42:23,580 --> 00:42:28,920
to buy a lot of people it allowed all

998
00:42:26,160 --> 00:42:31,020
the OEMs who used that sock platform to

999
00:42:28,920 --> 00:42:32,910
have much better internationalization

1000
00:42:31,020 --> 00:42:34,259
with a lot of different fonts for you

1001
00:42:32,910 --> 00:42:38,940
know all the different languages they

1002
00:42:34,260 --> 00:42:41,220
were trying to support and so turns out

1003
00:42:38,940 --> 00:42:44,810
this fonts application then included an

1004
00:42:41,220 --> 00:42:49,080
advertising SDK and that advertising SDK

1005
00:42:44,810 --> 00:42:51,960
didn't actually show ads it it did DC

1006
00:42:49,080 --> 00:42:55,620
Lak dynamic code loading to download

1007
00:42:51,960 --> 00:42:58,440
from a third-party server plugins that

1008
00:42:55,620 --> 00:43:01,049
then executed in the app context and the

1009
00:42:58,440 --> 00:43:03,810
plugins from eager fonts where I've

1010
00:43:01,050 --> 00:43:07,170
known malicious known malicious Trojans

1011
00:43:03,810 --> 00:43:09,750
the most common one was Shinhwa and the

1012
00:43:07,170 --> 00:43:12,840
next suit was snow fox which is a Trojan

1013
00:43:09,750 --> 00:43:15,870
in click-fraud and others but because

1014
00:43:12,840 --> 00:43:18,750
these actors had gone so far up the

1015
00:43:15,870 --> 00:43:21,330
supply chain to infiltrate a sock not

1016
00:43:18,750 --> 00:43:23,820
even a single OAM it ended up affecting

1017
00:43:21,330 --> 00:43:25,440
all of the different OEMs who used the

1018
00:43:23,820 --> 00:43:28,250
prelude loads from that sock

1019
00:43:25,440 --> 00:43:32,600
aka two hundred and fifty different OEMs

1020
00:43:28,250 --> 00:43:35,700
across 1,000 different SKUs of devices

1021
00:43:32,600 --> 00:43:38,970
so thankfully as soon as we identified

1022
00:43:35,700 --> 00:43:41,819
it contacted them the sock platform

1023
00:43:38,970 --> 00:43:43,910
immediately also began contacting all of

1024
00:43:41,820 --> 00:43:47,400
their customers they pulled the app and

1025
00:43:43,910 --> 00:43:50,100
they agreed to no longer include any

1026
00:43:47,400 --> 00:43:53,430
third-party preloads into the their

1027
00:43:50,100 --> 00:43:55,440
platform due to their risks so trying to

1028
00:43:53,430 --> 00:43:58,290
learn and grow from each of the

1029
00:43:55,440 --> 00:43:59,640
different issues so this is what it

1030
00:43:58,290 --> 00:44:03,040
looked like

1031
00:43:59,640 --> 00:44:07,120
Iger fonts sent an HTTP request

1032
00:44:03,040 --> 00:44:10,830
trying to mana see it's an upgrade map

1033
00:44:07,120 --> 00:44:14,440
and they received this type of response

1034
00:44:10,830 --> 00:44:16,390
the response included the URLs names and

1035
00:44:14,440 --> 00:44:18,730
the actions to complete for each of the

1036
00:44:16,390 --> 00:44:20,529
different types of plugins that they

1037
00:44:18,730 --> 00:44:23,530
were supposed to download and then the

1038
00:44:20,530 --> 00:44:26,500
SDK used Dex class loader to dynamically

1039
00:44:23,530 --> 00:44:30,700
load the downloaded plug-in within that

1040
00:44:26,500 --> 00:44:33,880
pre-installed apps process so what's

1041
00:44:30,700 --> 00:44:37,629
have a remediation do you do when 250

1042
00:44:33,880 --> 00:44:39,850
different OEMs are affected so we did

1043
00:44:37,630 --> 00:44:42,970
have a OEM remediation process which

1044
00:44:39,850 --> 00:44:44,980
first is alert the OEM require an app

1045
00:44:42,970 --> 00:44:48,459
acknowledge that yes this was on my

1046
00:44:44,980 --> 00:44:50,770
device to immediately require OTS to be

1047
00:44:48,460 --> 00:44:53,650
developed and distributed to users and

1048
00:44:50,770 --> 00:44:56,680
next which I think has been one of the

1049
00:44:53,650 --> 00:44:58,990
most powerful is required post-mortem to

1050
00:44:56,680 --> 00:45:00,730
determine how did this issue even end up

1051
00:44:58,990 --> 00:45:02,020
on your device and I think that's

1052
00:45:00,730 --> 00:45:04,360
valuable because that's how we know how

1053
00:45:02,020 --> 00:45:06,400
these aliens were being tricked what

1054
00:45:04,360 --> 00:45:07,720
they were being advertised as what they

1055
00:45:06,400 --> 00:45:10,050
were including and just better

1056
00:45:07,720 --> 00:45:12,910
understand standing the threat landscape

1057
00:45:10,050 --> 00:45:14,860
and then they also then have to create a

1058
00:45:12,910 --> 00:45:16,839
plan for how do you actually prevent

1059
00:45:14,860 --> 00:45:18,430
this from happening in the future so for

1060
00:45:16,840 --> 00:45:20,560
a lot of them it's for example don't

1061
00:45:18,430 --> 00:45:22,960
include third-party preloads different

1062
00:45:20,560 --> 00:45:30,310
types of additional auditing things like

1063
00:45:22,960 --> 00:45:32,110
that so by the numbers the these numbers

1064
00:45:30,310 --> 00:45:35,190
differ slightly from what I presented at

1065
00:45:32,110 --> 00:45:38,070
Kaspersky cuz Kaspersky was all devices

1066
00:45:35,190 --> 00:45:42,160
infected where this is the pre-installed

1067
00:45:38,070 --> 00:45:44,500
effected devices so in March 2018 it was

1068
00:45:42,160 --> 00:45:46,240
20 million devices as a whole were

1069
00:45:44,500 --> 00:45:49,540
infected with an active version of

1070
00:45:46,240 --> 00:45:53,169
chinois and of those 27.4 were

1071
00:45:49,540 --> 00:45:56,320
pre-installed as of July at least it is

1072
00:45:53,170 --> 00:45:59,670
now continuing to decline and block and

1073
00:45:56,320 --> 00:46:02,980
it's continuing to decline and below

1074
00:45:59,670 --> 00:46:06,330
700k and we will keep working and

1075
00:46:02,980 --> 00:46:09,040
tracking it until it is hopefully zero

1076
00:46:06,330 --> 00:46:11,710
but part of the problem and things we

1077
00:46:09,040 --> 00:46:15,300
learned is that around the world taking

1078
00:46:11,710 --> 00:46:17,550
updates in OTAs is not as common as it

1079
00:46:15,300 --> 00:46:20,280
necessarily is in the US or Western

1080
00:46:17,550 --> 00:46:22,950
Europe so how and that's what sort of

1081
00:46:20,280 --> 00:46:24,840
lights the fire of how can you find all

1082
00:46:22,950 --> 00:46:28,410
these issues before they ever go out and

1083
00:46:24,840 --> 00:46:29,750
also really understanding the diversity

1084
00:46:28,410 --> 00:46:34,350
of the space

1085
00:46:29,750 --> 00:46:36,300
so in conclusion first I hope I've

1086
00:46:34,350 --> 00:46:39,150
picked your interest a little bit and

1087
00:46:36,300 --> 00:46:41,970
trying to help reverse secure analyze

1088
00:46:39,150 --> 00:46:43,710
the Android pre-installed space and

1089
00:46:41,970 --> 00:46:44,939
these apps it's a lot of fun there's a

1090
00:46:43,710 --> 00:46:48,420
lot of different problems and

1091
00:46:44,940 --> 00:46:50,580
complexities to find and solve and I

1092
00:46:48,420 --> 00:46:52,650
hope that I've also lowered the bar and

1093
00:46:50,580 --> 00:46:54,540
understanding that there's a few key

1094
00:46:52,650 --> 00:46:57,230
things to think about and to challenge

1095
00:46:54,540 --> 00:47:00,360
your own assumptions of what does

1096
00:46:57,230 --> 00:47:02,520
security badness look like pre-installed

1097
00:47:00,360 --> 00:47:05,280
versus user space so hopefully you can

1098
00:47:02,520 --> 00:47:08,759
get involved more efficiently and not

1099
00:47:05,280 --> 00:47:10,920
make the same mistakes I made and lastly

1100
00:47:08,760 --> 00:47:15,990
the Android ecosystem is pretty vast

1101
00:47:10,920 --> 00:47:18,750
with a diversity different OEMs and sort

1102
00:47:15,990 --> 00:47:21,810
of capabilities so you have some OEMs

1103
00:47:18,750 --> 00:47:23,520
who have you know secure development

1104
00:47:21,810 --> 00:47:25,230
life cycles beginning just that design

1105
00:47:23,520 --> 00:47:28,410
with lots of security engineers on

1106
00:47:25,230 --> 00:47:29,580
process and then you have some OEMs on

1107
00:47:28,410 --> 00:47:32,310
the longtail that might not have a

1108
00:47:29,580 --> 00:47:35,069
single security engineer and so the

1109
00:47:32,310 --> 00:47:37,080
threats for each of those are very

1110
00:47:35,070 --> 00:47:38,430
different and what are you looking for

1111
00:47:37,080 --> 00:47:40,170
and how are you using your time

1112
00:47:38,430 --> 00:47:43,710
effectively to try and reverse and

1113
00:47:40,170 --> 00:47:45,500
secure these devices and with that thank

1114
00:47:43,710 --> 00:47:50,619
you and are there any questions

1115
00:47:45,500 --> 00:47:50,619
[Applause]

