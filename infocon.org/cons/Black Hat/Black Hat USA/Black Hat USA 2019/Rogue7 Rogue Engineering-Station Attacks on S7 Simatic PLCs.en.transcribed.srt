1
00:00:00,000 --> 00:00:05,460
good morning everyone welcome to rogue

2
00:00:02,610 --> 00:00:09,480
seven rogue engineering station attacks

3
00:00:05,460 --> 00:00:13,678
on s7 somatic PLC's we're in breakers

4
00:00:09,480 --> 00:00:17,460
GHI we're here to listen to Ariel Malin

5
00:00:13,679 --> 00:00:20,010
and Sarah Bataan couple announcements

6
00:00:17,460 --> 00:00:21,960
before we begin stop by the business

7
00:00:20,010 --> 00:00:24,090
hall located in Mandalay Bay ocean sides

8
00:00:21,960 --> 00:00:27,420
and shoreline ballrooms on level 2

9
00:00:24,090 --> 00:00:30,750
please also join the blackhat Arsenal in

10
00:00:27,420 --> 00:00:32,340
the business hall on level 2 last but

11
00:00:30,750 --> 00:00:35,610
not least of course turn off your phones

12
00:00:32,340 --> 00:00:37,350
and he asked me to announce that they

13
00:00:35,610 --> 00:00:39,329
will be having a white paper up on the

14
00:00:37,350 --> 00:00:41,940
blackhat website at some point in the

15
00:00:39,329 --> 00:00:44,059
near future with that turn it over to

16
00:00:41,940 --> 00:00:44,059
them

17
00:00:50,600 --> 00:00:57,270
good morning goal the title of our talk

18
00:00:53,820 --> 00:01:01,020
is rug 7 rogue engineering station

19
00:00:57,270 --> 00:01:03,570
attacks and somatic s7 PLC's this is

20
00:01:01,020 --> 00:01:06,540
joint work with Professor Ellie behan

21
00:01:03,570 --> 00:01:09,479
aviod Carmel and a long dunk nerf from

22
00:01:06,540 --> 00:01:12,869
the Technion a professor of vishay wolf

23
00:01:09,479 --> 00:01:16,408
from the tel aviv university Oriel and

24
00:01:12,869 --> 00:01:19,200
me will be presenting my name is Sarah

25
00:01:16,409 --> 00:01:21,660
I'm a senior researcher at the Technion

26
00:01:19,200 --> 00:01:24,390
who she Fujian cybersecurity research

27
00:01:21,660 --> 00:01:27,990
center and I'm the founder and CEO of

28
00:01:24,390 --> 00:01:30,539
Cyclops secure system design an audit my

29
00:01:27,990 --> 00:01:32,910
name is Wilma lean and I am a master

30
00:01:30,539 --> 00:01:35,100
student at tel aviv university advisor i

31
00:01:32,910 --> 00:01:37,440
professor of a cheval I am also a

32
00:01:35,100 --> 00:01:41,520
security researcher at mitigate health

33
00:01:37,440 --> 00:01:45,240
care IOT security so we are going to

34
00:01:41,520 --> 00:01:48,060
present to you in this talk several

35
00:01:45,240 --> 00:01:52,048
design vulnerabilities we've exposed in

36
00:01:48,060 --> 00:01:53,939
the Siemens proprietary s7 protocol and

37
00:01:52,049 --> 00:01:56,909
we are going to describe and Dennis

38
00:01:53,939 --> 00:02:01,548
demonstrate an exploit the performs

39
00:01:56,909 --> 00:02:04,619
remote cells programming on an s7 15 PLC

40
00:02:01,549 --> 00:02:07,380
those of you are familiar with game of

41
00:02:04,619 --> 00:02:11,400
strong will in particularly enjoy this

42
00:02:07,380 --> 00:02:13,410
talk others don't worry I'm going to

43
00:02:11,400 --> 00:02:15,769
introduce you to the three characters

44
00:02:13,410 --> 00:02:19,620
that going to appear in this session

45
00:02:15,769 --> 00:02:22,680
gray warm the man of action the man in

46
00:02:19,620 --> 00:02:26,400
the field is going to represent the ICS

47
00:02:22,680 --> 00:02:28,019
operator look he even wears a Hamlet so

48
00:02:26,400 --> 00:02:31,860
it's safe for him to walk on the

49
00:02:28,019 --> 00:02:34,950
production floor Tyrion Lannister the

50
00:02:31,860 --> 00:02:39,090
main of brain design and vision will

51
00:02:34,950 --> 00:02:42,450
represent the ICS engineer an Arya Stark

52
00:02:39,090 --> 00:02:46,549
the assassin the faceless girl will

53
00:02:42,450 --> 00:02:52,410
represent the impersonator the attacker

54
00:02:46,549 --> 00:02:54,720
so critical infrastructure system we

55
00:02:52,410 --> 00:02:57,920
become more and more dependent of them

56
00:02:54,720 --> 00:03:00,980
in our daily life most of this

57
00:02:57,920 --> 00:03:04,069
things such as electrical grids water

58
00:03:00,980 --> 00:03:06,738
facilities and transportation system are

59
00:03:04,069 --> 00:03:09,410
controlled by industrial control systems

60
00:03:06,739 --> 00:03:13,400
these are distributed computerized

61
00:03:09,410 --> 00:03:16,730
system that many times span across dozen

62
00:03:13,400 --> 00:03:21,459
of even hundreds of mile they operate

63
00:03:16,730 --> 00:03:26,660
and monitor physical devices the PLC is

64
00:03:21,459 --> 00:03:30,470
the core of the ICS it is a robust and

65
00:03:26,660 --> 00:03:32,959
reliable device designed to work under

66
00:03:30,470 --> 00:03:37,400
extreme environment conditions since

67
00:03:32,959 --> 00:03:40,160
many times it is installed outdoors the

68
00:03:37,400 --> 00:03:42,200
PLC is connected to physical devices

69
00:03:40,160 --> 00:03:46,100
such as sensory fog

70
00:03:42,200 --> 00:03:50,540
wind turbines and generators and it runs

71
00:03:46,100 --> 00:03:53,600
the control program bit samples sensors

72
00:03:50,540 --> 00:03:58,400
and triggers active device according to

73
00:03:53,600 --> 00:04:00,769
the results the PLC constitutes a bridge

74
00:03:58,400 --> 00:04:04,780
between the virtual and the physical

75
00:04:00,769 --> 00:04:08,810
words this makes it in particular

76
00:04:04,780 --> 00:04:12,880
interesting for attackers and it is

77
00:04:08,810 --> 00:04:16,488
indeed the target of our attacks I've

78
00:04:12,880 --> 00:04:20,079
described the PLC physical interfaces

79
00:04:16,488 --> 00:04:24,440
it also has multiple virtual interfaces

80
00:04:20,079 --> 00:04:26,930
the control program running it in it can

81
00:04:24,440 --> 00:04:31,130
expose its variable to an age of my

82
00:04:26,930 --> 00:04:34,640
software that the operator can use to

83
00:04:31,130 --> 00:04:38,810
monitor and modify value of control

84
00:04:34,640 --> 00:04:41,090
variables in the PLC the engineer

85
00:04:38,810 --> 00:04:43,880
returned lanister can use the

86
00:04:41,090 --> 00:04:47,979
engineering workstation to write its

87
00:04:43,880 --> 00:04:51,860
control program and he downloads the

88
00:04:47,979 --> 00:04:54,289
control program to the PLC through an

89
00:04:51,860 --> 00:04:58,280
interface with a software layer that we

90
00:04:54,289 --> 00:05:00,680
call the PLC operating system the

91
00:04:58,280 --> 00:05:03,380
interfaces with the HMI in the

92
00:05:00,680 --> 00:05:08,240
engineering workstation are most of the

93
00:05:03,380 --> 00:05:11,040
time vendors proprietary however the PSC

94
00:05:08,240 --> 00:05:14,400
also has standard interfaces where

95
00:05:11,040 --> 00:05:18,420
server and SNMP server in the Siemens

96
00:05:14,400 --> 00:05:22,620
word the PLC that we're discussing is

97
00:05:18,420 --> 00:05:25,410
the s7 1,500 simisage in my software is

98
00:05:22,620 --> 00:05:28,200
called wincc the engineering workstation

99
00:05:25,410 --> 00:05:30,510
software is called step 7 and the

100
00:05:28,200 --> 00:05:32,490
proprietary protocol that Siemens used

101
00:05:30,510 --> 00:05:34,650
for communication between the age of my

102
00:05:32,490 --> 00:05:39,870
engineering workstation and PLC is

103
00:05:34,650 --> 00:05:42,000
called the s7 protocol both packages are

104
00:05:39,870 --> 00:05:44,220
packaged into a software that's called

105
00:05:42,000 --> 00:05:48,390
here and this is the package that we're

106
00:05:44,220 --> 00:05:51,900
trying to impersonate the focus of this

107
00:05:48,390 --> 00:05:54,090
talk is on the offset 7 protocol this is

108
00:05:51,900 --> 00:05:59,909
the protocol that we are trying to

109
00:05:54,090 --> 00:06:03,299
exploit most of the ICS product most of

110
00:05:59,910 --> 00:06:06,120
ICS systems are separated to physical

111
00:06:03,300 --> 00:06:08,880
several physical production floor the

112
00:06:06,120 --> 00:06:11,870
typical structure of a production fir is

113
00:06:08,880 --> 00:06:15,930
a layered structure you see in that

114
00:06:11,870 --> 00:06:18,690
lower layer their active devices the

115
00:06:15,930 --> 00:06:20,880
middle layer consists of this PLC's the

116
00:06:18,690 --> 00:06:22,890
control layer and the upper lake on

117
00:06:20,880 --> 00:06:25,380
triste most of the time of local aging

118
00:06:22,890 --> 00:06:28,409
mind several production floors are

119
00:06:25,380 --> 00:06:30,780
connected to a main manufacturing zone

120
00:06:28,410 --> 00:06:32,520
where the control the Queen and the

121
00:06:30,780 --> 00:06:35,000
command center is located

122
00:06:32,520 --> 00:06:38,370
they're also located their server

123
00:06:35,000 --> 00:06:41,250
central application a servers and an

124
00:06:38,370 --> 00:06:43,830
historian in their main manufacturing

125
00:06:41,250 --> 00:06:46,980
zone we also see the engineering

126
00:06:43,830 --> 00:06:50,430
workstation in a minute it will become

127
00:06:46,980 --> 00:06:53,370
clear why we've emphasized it but not

128
00:06:50,430 --> 00:06:56,310
for now that it is somewhat isolated

129
00:06:53,370 --> 00:06:58,710
from the rest of the servers in the main

130
00:06:56,310 --> 00:07:00,960
manufacturing zone the main

131
00:06:58,710 --> 00:07:03,900
manufacturing zone is usually connected

132
00:07:00,960 --> 00:07:07,650
to the corporate network that many times

133
00:07:03,900 --> 00:07:10,469
has an ARP server in it and this network

134
00:07:07,650 --> 00:07:13,289
many time connected to other external

135
00:07:10,470 --> 00:07:16,350
network sometimes even to the internet

136
00:07:13,290 --> 00:07:19,260
this connection to the rest of the world

137
00:07:16,350 --> 00:07:21,620
is the source of troubles and the source

138
00:07:19,260 --> 00:07:27,130
of attacks

139
00:07:21,620 --> 00:07:32,720
the most famous attack on ICS is Stuxnet

140
00:07:27,130 --> 00:07:36,530
anybody heard about it no so it was

141
00:07:32,720 --> 00:07:38,630
discovered on September 2012 and it

142
00:07:36,530 --> 00:07:44,299
targeted the previous version of the

143
00:07:38,630 --> 00:07:48,350
Siemens PLC the s7 300 it infected a dll

144
00:07:44,300 --> 00:07:51,550
that was common both today HMI and the

145
00:07:48,350 --> 00:07:55,640
injury engineering workstation packages

146
00:07:51,550 --> 00:07:59,420
what stuck said that this DLL is the one

147
00:07:55,640 --> 00:08:02,659
responsible to communication with the PC

148
00:07:59,420 --> 00:08:06,320
what Stuxnet did it replaced the dealer

149
00:08:02,660 --> 00:08:10,250
with its own malicious version /

150
00:08:06,320 --> 00:08:13,280
practically taken control over the full

151
00:08:10,250 --> 00:08:15,830
communication with the PLC which enable

152
00:08:13,280 --> 00:08:20,929
it to inject control program and do

153
00:08:15,830 --> 00:08:23,120
whatever in it once the protocol the

154
00:08:20,930 --> 00:08:25,640
protocol that was used by this please

155
00:08:23,120 --> 00:08:29,240
see is a previous version of the s

156
00:08:25,640 --> 00:08:32,480
seventh protocol now the engineering

157
00:08:29,240 --> 00:08:35,990
workstation on the one hand if one takes

158
00:08:32,480 --> 00:08:38,600
control over it then it is in complete

159
00:08:35,990 --> 00:08:41,510
control of all the peers is in the ICS

160
00:08:38,600 --> 00:08:44,540
on the other hand it's a highly

161
00:08:41,510 --> 00:08:46,730
sophisticated software package with many

162
00:08:44,540 --> 00:08:49,550
features running on general purpose

163
00:08:46,730 --> 00:08:53,900
operating system this makes it

164
00:08:49,550 --> 00:08:57,380
error-prone and vulnerable and typical

165
00:08:53,900 --> 00:09:00,410
ICS effects exploit vulnerabilities in

166
00:08:57,380 --> 00:09:03,410
the engineering workstation such as the

167
00:09:00,410 --> 00:09:05,750
first vulnerability that enabled Stuxnet

168
00:09:03,410 --> 00:09:08,839
to replace the DLL with its own

169
00:09:05,750 --> 00:09:11,600
malicious DLL or a vulnerability that

170
00:09:08,840 --> 00:09:15,230
was discovered less than a months ago

171
00:09:11,600 --> 00:09:18,710
that enables an unauthenticated user to

172
00:09:15,230 --> 00:09:24,200
take control over the Tia through its

173
00:09:18,710 --> 00:09:26,510
web servers by now users realized that

174
00:09:24,200 --> 00:09:30,460
the engineering workstation is the

175
00:09:26,510 --> 00:09:34,069
soft-bellied of the ICS has in most

176
00:09:30,460 --> 00:09:34,880
production deployment users disconnected

177
00:09:34,070 --> 00:09:37,820
from the product

178
00:09:34,880 --> 00:09:40,010
network keep it somewhere safe and take

179
00:09:37,820 --> 00:09:44,330
it out only when needed for

180
00:09:40,010 --> 00:09:48,590
troubleshooting or maintenance our tech

181
00:09:44,330 --> 00:09:52,060
unlike typical ICS attack exploit

182
00:09:48,590 --> 00:09:55,640
vulnerabilities directly in the plc

183
00:09:52,060 --> 00:09:59,500
specifically in the plc operating system

184
00:09:55,640 --> 00:10:04,300
in its implementation of the s7 protocol

185
00:09:59,500 --> 00:10:08,660
the implication is that we can use any

186
00:10:04,300 --> 00:10:12,229
vulnerable machine or device on the

187
00:10:08,660 --> 00:10:15,770
network as an attack machine anyone

188
00:10:12,230 --> 00:10:20,330
cares to speculate how many ICS

189
00:10:15,770 --> 00:10:25,480
deployments contain vulnerable outdated

190
00:10:20,330 --> 00:10:30,290
operating system all of them right

191
00:10:25,480 --> 00:10:33,860
anyone said Windows XP in most of the

192
00:10:30,290 --> 00:10:36,260
ISIS deployment I have been to this you

193
00:10:33,860 --> 00:10:38,900
know when you asked yes there's some

194
00:10:36,260 --> 00:10:41,569
windows it's been some deserted darkroom

195
00:10:38,900 --> 00:10:44,590
the transom application that is not

196
00:10:41,570 --> 00:10:47,810
supported on any other operating system

197
00:10:44,590 --> 00:10:52,510
connected to the deployment network and

198
00:10:47,810 --> 00:10:55,880
we can use it as an attack machine so

199
00:10:52,510 --> 00:10:59,990
the victim of our attack is the L is the

200
00:10:55,880 --> 00:11:05,180
s7 1500 PLC it is one of two new members

201
00:10:59,990 --> 00:11:08,120
in the cymatics PLC product line s7 1500

202
00:11:05,180 --> 00:11:13,719
is the high-end PLC the other member is

203
00:11:08,120 --> 00:11:17,710
the s7 1200 since toxnet was discovered

204
00:11:13,720 --> 00:11:20,210
Simmons makes significant investment in

205
00:11:17,710 --> 00:11:23,180
security enhancement of the somatic

206
00:11:20,210 --> 00:11:26,210
Pearce's they came up with a new version

207
00:11:23,180 --> 00:11:28,729
of the s7 protocol which applies

208
00:11:26,210 --> 00:11:30,710
cryptographic integrity protection to

209
00:11:28,730 --> 00:11:33,830
the messages this is the protocol that

210
00:11:30,710 --> 00:11:36,020
we discuss they provided know-how in

211
00:11:33,830 --> 00:11:39,230
copy protection to the control program

212
00:11:36,020 --> 00:11:42,199
and they also added the PLC access

213
00:11:39,230 --> 00:11:46,730
control mechanism this is based on

214
00:11:42,200 --> 00:11:47,190
password this mechanism can be used to

215
00:11:46,730 --> 00:11:50,100
meet

216
00:11:47,190 --> 00:11:54,210
it's the download' attacks that we are

217
00:11:50,100 --> 00:11:57,140
going to demonstrate however it is not

218
00:11:54,210 --> 00:12:00,390
used by most customer and we consider it

219
00:11:57,140 --> 00:12:04,140
infeasible it might be feasible for

220
00:12:00,390 --> 00:12:07,560
small ICS deployment that has dozen two

221
00:12:04,140 --> 00:12:10,500
dozen species but it's impractical to

222
00:12:07,560 --> 00:12:16,500
protect a deployment with hundreds of

223
00:12:10,500 --> 00:12:21,060
thousands of pieces with passwords the

224
00:12:16,500 --> 00:12:24,540
s7 protocol it was originally running in

225
00:12:21,060 --> 00:12:28,949
the OSI communication model has since

226
00:12:24,540 --> 00:12:32,130
runs on tcp/ip port 182 which is is a

227
00:12:28,950 --> 00:12:35,880
transport over TCP it is a session

228
00:12:32,130 --> 00:12:37,860
oriented protocol the session begins

229
00:12:35,880 --> 00:12:41,910
with a four-way handshake

230
00:12:37,860 --> 00:12:44,100
during which the parties agree on the

231
00:12:41,910 --> 00:12:47,880
integrity protection key that they are

232
00:12:44,100 --> 00:12:49,920
going to use the version of the protocol

233
00:12:47,880 --> 00:12:52,920
that they are going to use we've

234
00:12:49,920 --> 00:12:55,319
detected several worship version all our

235
00:12:52,920 --> 00:13:00,719
discussion is focused on a version that

236
00:12:55,320 --> 00:13:04,530
we call p3 in the second message the PLC

237
00:13:00,720 --> 00:13:06,180
sends a session ID to the client which

238
00:13:04,530 --> 00:13:10,290
is most of the time the engineering

239
00:13:06,180 --> 00:13:14,099
workstation the client must return it in

240
00:13:10,290 --> 00:13:20,120
all subsequent messages hence the

241
00:13:14,100 --> 00:13:24,980
session ID server the cookie the

242
00:13:20,120 --> 00:13:30,150
protocol and ables the client to create

243
00:13:24,980 --> 00:13:33,870
modify and delete objects in the plc

244
00:13:30,150 --> 00:13:36,660
internal memory here for example we see

245
00:13:33,870 --> 00:13:39,360
creation of an object that is called

246
00:13:36,660 --> 00:13:42,420
server session in the plc internal

247
00:13:39,360 --> 00:13:44,520
memory it will be used to hold all the

248
00:13:42,420 --> 00:13:46,560
attributes of the session including the

249
00:13:44,520 --> 00:13:52,890
cookie the integrity protection key and

250
00:13:46,560 --> 00:13:55,949
so forth the key of the vulnerabilities

251
00:13:52,890 --> 00:13:59,819
that we are going to describe is the in

252
00:13:55,950 --> 00:14:01,340
the s7 p3 handshake protocol this

253
00:13:59,820 --> 00:14:05,120
protocol is

254
00:14:01,340 --> 00:14:09,050
based on public key cryptography the PSC

255
00:14:05,120 --> 00:14:12,860
has a private key the client must have

256
00:14:09,050 --> 00:14:15,770
the respective public key the session is

257
00:14:12,860 --> 00:14:17,900
initialized by the client that sends an

258
00:14:15,770 --> 00:14:21,949
alone message we've shot with some

259
00:14:17,900 --> 00:14:25,459
random ad the PSC generates a challenge

260
00:14:21,950 --> 00:14:28,820
random challenge and it sends it to the

261
00:14:25,460 --> 00:14:31,640
client together with a session ID that I

262
00:14:28,820 --> 00:14:33,680
already say serves as a cookie and the

263
00:14:31,640 --> 00:14:36,410
model and the ephemeral version of the

264
00:14:33,680 --> 00:14:41,150
plc these will be used to determine

265
00:14:36,410 --> 00:14:45,319
which protocol version to run the client

266
00:14:41,150 --> 00:14:49,280
then generates random key derivation key

267
00:14:45,320 --> 00:14:53,830
and sends it together with additional

268
00:14:49,280 --> 00:14:56,420
keys encrypted with the PSC public key

269
00:14:53,830 --> 00:14:58,640
orielle and the second part of the top

270
00:14:56,420 --> 00:15:02,569
will dive into the details of the

271
00:14:58,640 --> 00:15:06,230
handshake protocol for now in the third

272
00:15:02,570 --> 00:15:09,560
message the client sends the session ID

273
00:15:06,230 --> 00:15:12,320
the king material encrypted with the PSC

274
00:15:09,560 --> 00:15:15,079
public key and a response that should

275
00:15:12,320 --> 00:15:18,500
match to the challenge that the POC sent

276
00:15:15,080 --> 00:15:20,510
the POC verifies the response if every

277
00:15:18,500 --> 00:15:23,920
scene confirms it sends an

278
00:15:20,510 --> 00:15:26,569
acknowledgement and both sides derive a

279
00:15:23,920 --> 00:15:29,240
symmetric session key which is a

280
00:15:26,570 --> 00:15:31,910
function of the challenge that appeals C

281
00:15:29,240 --> 00:15:36,470
generated and the key derivation key

282
00:15:31,910 --> 00:15:40,339
that's the client generated now in order

283
00:15:36,470 --> 00:15:42,680
to analyze the properties of the protis

284
00:15:40,340 --> 00:15:45,500
protocol I'm going to compare it to this

285
00:15:42,680 --> 00:15:49,370
to the protocol you all know which is

286
00:15:45,500 --> 00:15:53,270
the SSL protocol so in both protocol

287
00:15:49,370 --> 00:15:55,880
there's only one way authentication the

288
00:15:53,270 --> 00:15:59,060
PLC is authenticated and the client is

289
00:15:55,880 --> 00:16:03,230
not authenticated here the plc server is

290
00:15:59,060 --> 00:16:05,719
a server in both protocol the client

291
00:16:03,230 --> 00:16:09,140
generates some random keying material

292
00:16:05,720 --> 00:16:13,770
and sends it to the server encrypted

293
00:16:09,140 --> 00:16:16,410
with the server's public key however

294
00:16:13,770 --> 00:16:20,100
there's a huge difference between the

295
00:16:16,410 --> 00:16:23,459
SSL protocol and the s7 p3 handshake and

296
00:16:20,100 --> 00:16:27,480
the difference is that in SSL each

297
00:16:23,460 --> 00:16:31,550
server has its unique private public

298
00:16:27,480 --> 00:16:34,710
keeper whereas in the s7 p3 handshake

299
00:16:31,550 --> 00:16:37,410
opions is from the same model and the

300
00:16:34,710 --> 00:16:43,590
same framework version share a single

301
00:16:37,410 --> 00:16:47,040
private public key per the implication

302
00:16:43,590 --> 00:16:49,950
is if we know which public key to use

303
00:16:47,040 --> 00:16:54,180
and if we understand the details of the

304
00:16:49,950 --> 00:16:57,570
protocol then what we have is one ring

305
00:16:54,180 --> 00:17:02,040
to rule all the s7 1,500 pieces in the

306
00:16:57,570 --> 00:17:04,920
word but unlike Gollum's precious ring

307
00:17:02,040 --> 00:17:09,270
that was unique in the word this ring

308
00:17:04,920 --> 00:17:14,070
can have multiple forged copies and all

309
00:17:09,270 --> 00:17:17,069
of them work perfectly well and this is

310
00:17:14,069 --> 00:17:20,579
the key to our text so now we are ready

311
00:17:17,069 --> 00:17:24,389
to describe our attacks on the p3

312
00:17:20,579 --> 00:17:28,889
problem download exchange first let me

313
00:17:24,390 --> 00:17:31,490
describe to you how does the object that

314
00:17:28,890 --> 00:17:34,800
represents the control program look like

315
00:17:31,490 --> 00:17:39,600
so it's name which is not that important

316
00:17:34,800 --> 00:17:42,000
is the program cycle object block and it

317
00:17:39,600 --> 00:17:44,699
has three attributes that I want to

318
00:17:42,000 --> 00:17:47,580
point to you the first attribute is the

319
00:17:44,700 --> 00:17:50,760
object code this is the code actually

320
00:17:47,580 --> 00:17:54,240
running in the PLC the second attribute

321
00:17:50,760 --> 00:17:57,540
is the source code that represents the

322
00:17:54,240 --> 00:18:00,780
source matching the object code and the

323
00:17:57,540 --> 00:18:03,240
third attribute is an object Mak taking

324
00:18:00,780 --> 00:18:06,990
over other attributes of the control

325
00:18:03,240 --> 00:18:09,860
program now the whole message that

326
00:18:06,990 --> 00:18:15,750
creates the control problem object is

327
00:18:09,860 --> 00:18:17,580
protected using age Moksha 256 with the

328
00:18:15,750 --> 00:18:21,200
integrity protection key that was

329
00:18:17,580 --> 00:18:21,199
established by the handshake

330
00:18:21,730 --> 00:18:31,130
in our examples we are going to use two

331
00:18:25,850 --> 00:18:34,340
simple programs the yellow program is an

332
00:18:31,130 --> 00:18:37,130
innocent program written by tear on the

333
00:18:34,340 --> 00:18:40,939
engineer which does what is supposed to

334
00:18:37,130 --> 00:18:44,480
do in the ICS the blue program is a

335
00:18:40,940 --> 00:18:45,320
malicious program written by area the

336
00:18:44,480 --> 00:18:49,100
attacker

337
00:18:45,320 --> 00:18:52,460
note that they structure them is

338
00:18:49,100 --> 00:18:58,580
identical we have the object code the

339
00:18:52,460 --> 00:19:04,010
source code and the object marker now

340
00:18:58,580 --> 00:19:06,049
our goal is to run the malicious program

341
00:19:04,010 --> 00:19:10,690
the blue malicious program in the plc

342
00:19:06,049 --> 00:19:13,429
while concealing it from the operator

343
00:19:10,690 --> 00:19:16,429
clearly there is difference between

344
00:19:13,429 --> 00:19:18,830
these two program KDAY the yellow

345
00:19:16,429 --> 00:19:21,650
problem sets LEDs number zero and one

346
00:19:18,830 --> 00:19:29,299
well the blue program sets LEDs number

347
00:19:21,650 --> 00:19:32,270
two and two and three in real life time

348
00:19:29,299 --> 00:19:35,480
attacks of course the difference will

349
00:19:32,270 --> 00:19:38,780
not be that apparent for example you

350
00:19:35,480 --> 00:19:41,059
could have the blue program increase the

351
00:19:38,780 --> 00:19:46,190
rotation speed of centrifugal

352
00:19:41,059 --> 00:19:51,428
while manipulated HMI variables clearly

353
00:19:46,190 --> 00:19:55,460
it will not be as noticeable as here

354
00:19:51,429 --> 00:19:59,570
before going into death Tech flows let's

355
00:19:55,460 --> 00:20:02,030
look at legal flow of a program download

356
00:19:59,570 --> 00:20:04,189
so Tyrian sits at the engineering

357
00:20:02,030 --> 00:20:06,590
workstation and programs the yellow

358
00:20:04,190 --> 00:20:09,200
innocent program it then hits the

359
00:20:06,590 --> 00:20:12,289
download button and the four way

360
00:20:09,200 --> 00:20:15,049
handshakes takes place in Tegrity

361
00:20:12,289 --> 00:20:17,059
session key is established and shared

362
00:20:15,049 --> 00:20:21,440
between the engineering workstation and

363
00:20:17,059 --> 00:20:25,158
the plc at this time the control program

364
00:20:21,440 --> 00:20:27,919
creation message is constructed it is

365
00:20:25,159 --> 00:20:30,370
integrity protected as indicated by the

366
00:20:27,919 --> 00:20:34,480
yellow by the little

367
00:20:30,370 --> 00:20:37,179
Red Seal and it is sent to the PLC when

368
00:20:34,480 --> 00:20:40,780
the PSC receives and verifies the runs

369
00:20:37,180 --> 00:20:45,760
it runs the program the LEDs are set and

370
00:20:40,780 --> 00:20:48,250
if and the problem is running Simmons

371
00:20:45,760 --> 00:20:51,820
also provide the engineers with a

372
00:20:48,250 --> 00:20:53,950
program out on a upload feature we

373
00:20:51,820 --> 00:20:56,290
already say that the TIA is disconnected

374
00:20:53,950 --> 00:20:58,900
from the network so if you have to do

375
00:20:56,290 --> 00:21:01,420
maintenance or troubleshooting you can't

376
00:20:58,900 --> 00:21:04,320
with Atia that you took out from the

377
00:21:01,420 --> 00:21:07,120
cupboard kinetic to the deployment

378
00:21:04,320 --> 00:21:09,340
network and then press the upload button

379
00:21:07,120 --> 00:21:13,360
to retrieve the program running in the

380
00:21:09,340 --> 00:21:16,409
PLC Turan presses upload again handshake

381
00:21:13,360 --> 00:21:19,840
takes place integrity session key and

382
00:21:16,410 --> 00:21:23,140
the source object is retrieved from the

383
00:21:19,840 --> 00:21:26,139
PSC internal memory it is integrity

384
00:21:23,140 --> 00:21:29,590
protected and sent over of course this

385
00:21:26,140 --> 00:21:36,429
is the right source program and it is

386
00:21:29,590 --> 00:21:38,350
sent to the engineering workstation now

387
00:21:36,429 --> 00:21:40,990
let's start with the description of the

388
00:21:38,350 --> 00:21:43,629
attack finally so we already said that

389
00:21:40,990 --> 00:21:48,820
there's no engineering workstation in

390
00:21:43,630 --> 00:21:50,230
the in the production network so let's

391
00:21:48,820 --> 00:21:53,620
bring it with us

392
00:21:50,230 --> 00:21:57,040
so the attack system that we constructed

393
00:21:53,620 --> 00:21:58,750
we call it rocked here in consists of a

394
00:21:57,040 --> 00:22:05,649
legitimate TIA

395
00:21:58,750 --> 00:22:10,000
version 15 and an attack proxy that that

396
00:22:05,650 --> 00:22:14,140
consists of two phases a setup phase and

397
00:22:10,000 --> 00:22:17,530
an attack phase let's describe first v

398
00:22:14,140 --> 00:22:19,900
the setup phase so are you can run the

399
00:22:17,530 --> 00:22:24,370
setup phase anywhere in the world

400
00:22:19,900 --> 00:22:26,170
provided that she has an s7 1500 PLC so

401
00:22:24,370 --> 00:22:29,919
here she does it in my lab in the

402
00:22:26,170 --> 00:22:33,640
Technion in Haifa she programmed the

403
00:22:29,920 --> 00:22:37,600
blue malicious program and in this set

404
00:22:33,640 --> 00:22:40,610
of phase their malicious proxy is in tap

405
00:22:37,600 --> 00:22:42,820
mode it only it only lists

406
00:22:40,610 --> 00:22:45,740
she presses the download button

407
00:22:42,820 --> 00:22:50,029
handshake takes place integrity session

408
00:22:45,740 --> 00:22:52,330
key is created the control messages

409
00:22:50,029 --> 00:22:56,980
integral is integrity protected and

410
00:22:52,330 --> 00:23:00,049
delivered to the PLC the only thing the

411
00:22:56,980 --> 00:23:03,110
malicious property does is it records

412
00:23:00,049 --> 00:23:07,120
the whole flow of the messages into a

413
00:23:03,110 --> 00:23:11,709
pickup file and save it for future use

414
00:23:07,120 --> 00:23:15,408
now of course if you attempt to upload

415
00:23:11,710 --> 00:23:18,250
then you will have the blue program in

416
00:23:15,409 --> 00:23:21,950
memory which is what is supposed to do

417
00:23:18,250 --> 00:23:24,380
now the attack phase the attack phase

418
00:23:21,950 --> 00:23:26,659
happens in the victim premises

419
00:23:24,380 --> 00:23:29,750
here you see Aria located in King's

420
00:23:26,659 --> 00:23:32,510
Landing this time she brings in the

421
00:23:29,750 --> 00:23:35,899
needs workstation and programs the

422
00:23:32,510 --> 00:23:39,940
yellow innocent program she presses

423
00:23:35,899 --> 00:23:43,340
download again handshake take place in

424
00:23:39,940 --> 00:23:47,059
integrity session key establish but

425
00:23:43,340 --> 00:23:50,209
since we have the Tia under our control

426
00:23:47,059 --> 00:23:52,549
this is a rogue Tia so what we do we

427
00:23:50,210 --> 00:23:55,940
share the integrity protection key with

428
00:23:52,549 --> 00:23:58,940
the malicious proxy the many ways to do

429
00:23:55,940 --> 00:24:01,610
is we chose to do it by extracting their

430
00:23:58,940 --> 00:24:04,340
integrity session key from the tears

431
00:24:01,610 --> 00:24:08,658
memory and sending it over to mail it to

432
00:24:04,340 --> 00:24:11,330
the malicious proxy now the control

433
00:24:08,659 --> 00:24:13,399
program messages created is it is

434
00:24:11,330 --> 00:24:19,639
integrity protected with the session key

435
00:24:13,399 --> 00:24:24,110
and the malicious proxy intercepted our

436
00:24:19,639 --> 00:24:28,059
first attempt was to replace the yellow

437
00:24:24,110 --> 00:24:32,260
object toad with the blue malicious code

438
00:24:28,059 --> 00:24:34,730
when we try to send it to the PLC it

439
00:24:32,260 --> 00:24:36,799
detected something in wrong and

440
00:24:34,730 --> 00:24:39,710
entreated rejected it

441
00:24:36,799 --> 00:24:44,090
we highly appreciated it since it means

442
00:24:39,710 --> 00:24:47,380
that Simmons are making some precaution

443
00:24:44,090 --> 00:24:50,899
measures our second attempt we

444
00:24:47,380 --> 00:24:53,160
substitute also the mac object to the

445
00:24:50,899 --> 00:24:56,070
blue mask mac object

446
00:24:53,160 --> 00:24:58,799
we applied integrity protection since we

447
00:24:56,070 --> 00:25:02,879
have the integrity protections key and

448
00:24:58,799 --> 00:25:06,030
we sent it to the PLC what do you think

449
00:25:02,880 --> 00:25:08,309
happened well you should know by now

450
00:25:06,030 --> 00:25:11,160
otherwise I wouldn't we wouldn't be

451
00:25:08,309 --> 00:25:16,230
standing here talking to you from this

452
00:25:11,160 --> 00:25:17,669
stage so we send it to the PLC he

453
00:25:16,230 --> 00:25:21,870
accepted it

454
00:25:17,669 --> 00:25:24,390
which problem was running the malicious

455
00:25:21,870 --> 00:25:30,149
bill problem that set let's number two

456
00:25:24,390 --> 00:25:32,250
and three so Simmons did very well when

457
00:25:30,150 --> 00:25:34,159
they added MOC protection to the

458
00:25:32,250 --> 00:25:37,740
attributes of the control program

459
00:25:34,159 --> 00:25:40,140
however for some reason which I cannot

460
00:25:37,740 --> 00:25:42,690
understand they choose to apply it only

461
00:25:40,140 --> 00:25:47,280
to the object code and not to the source

462
00:25:42,690 --> 00:25:49,980
code so we have the situation with the

463
00:25:47,280 --> 00:25:53,820
blue malicious problem is running in the

464
00:25:49,980 --> 00:25:55,770
PLC and when you hate upload you get the

465
00:25:53,820 --> 00:25:59,189
yellow innocent program since this is

466
00:25:55,770 --> 00:26:05,549
the source code and clearly they are

467
00:25:59,190 --> 00:26:08,159
different are we done yet almost Tia is

468
00:26:05,549 --> 00:26:12,090
the use of a package it weighs over five

469
00:26:08,159 --> 00:26:14,580
gigabytes so it's impractical to use it

470
00:26:12,090 --> 00:26:17,580
as an attack payload and carry it to a

471
00:26:14,580 --> 00:26:20,668
production ICS this is the reason we

472
00:26:17,580 --> 00:26:23,549
came up with our rogue engineering

473
00:26:20,669 --> 00:26:25,919
station attack so the raw engineering

474
00:26:23,549 --> 00:26:27,809
station is simply a Python scripts that

475
00:26:25,919 --> 00:26:31,080
impersonate a TIA

476
00:26:27,809 --> 00:26:34,710
it gets as an input repeat the victim

477
00:26:31,080 --> 00:26:37,830
PLC IP address and Topeka files yellow

478
00:26:34,710 --> 00:26:41,880
and blue that were prepared during the

479
00:26:37,830 --> 00:26:45,000
setup phase what is does aria is again

480
00:26:41,880 --> 00:26:48,090
at the victim premises she chooses the

481
00:26:45,000 --> 00:26:51,780
innocent and a malicious program she

482
00:26:48,090 --> 00:26:54,658
wants to to inject then she creates this

483
00:26:51,780 --> 00:26:57,830
hybrid program with the malicious object

484
00:26:54,659 --> 00:27:00,510
in the yellow source and Shira and

485
00:26:57,830 --> 00:27:03,240
presses download at this stage the

486
00:27:00,510 --> 00:27:04,700
handshake take place and integrity

487
00:27:03,240 --> 00:27:10,400
session case

488
00:27:04,700 --> 00:27:13,160
directed now unlike the previous attack

489
00:27:10,400 --> 00:27:15,650
where we were men in the middle sort of

490
00:27:13,160 --> 00:27:19,790
here we have to fix all the cookies that

491
00:27:15,650 --> 00:27:21,770
the PLC sends to the client so we fix

492
00:27:19,790 --> 00:27:24,379
the session ID we fix all the other

493
00:27:21,770 --> 00:27:27,650
cookies that are planned there we create

494
00:27:24,380 --> 00:27:30,080
integrity protection sent to the plc

495
00:27:27,650 --> 00:27:33,410
malicious program running innocent

496
00:27:30,080 --> 00:27:36,740
problem uploading again we did first

497
00:27:33,410 --> 00:27:40,640
injection of a control program so to

498
00:27:36,740 --> 00:27:43,730
wrap up this part if arya can control

499
00:27:40,640 --> 00:27:47,660
the plc in my lab in the Technion she

500
00:27:43,730 --> 00:27:49,880
can also control the plc in the gate of

501
00:27:47,660 --> 00:27:53,600
the wall to open it even though she's

502
00:27:49,880 --> 00:27:56,930
not John Snow and she can also control

503
00:27:53,600 --> 00:27:59,139
the PLC in Qinglin dean's gate although

504
00:27:56,930 --> 00:28:02,840
she's not Cersei Lannister

505
00:27:59,140 --> 00:28:04,910
now I'll live I'll give you a wheel for

506
00:28:02,840 --> 00:28:08,209
the fun and juicy stuff of the reverse

507
00:28:04,910 --> 00:28:11,960
engineering Thank You Sara

508
00:28:08,210 --> 00:28:14,960
so I am a real moline and I will show

509
00:28:11,960 --> 00:28:17,660
the p3 handshake details then I will

510
00:28:14,960 --> 00:28:20,390
give some tips for a better reverse

511
00:28:17,660 --> 00:28:22,250
engineering process and then we will

512
00:28:20,390 --> 00:28:26,060
show a very cool demonstration of our

513
00:28:22,250 --> 00:28:29,770
attacks the technical part won't be so

514
00:28:26,060 --> 00:28:32,870
long so brace yourselves

515
00:28:29,770 --> 00:28:35,980
ok so recall that the session key is

516
00:28:32,870 --> 00:28:40,510
derived by the challenge and by the KDK

517
00:28:35,980 --> 00:28:45,530
so the challenge is sent from the PLC

518
00:28:40,510 --> 00:28:48,440
from the PLC to the client and the KDK

519
00:28:45,530 --> 00:28:52,460
is sent through this encrypted keying

520
00:28:48,440 --> 00:28:56,450
material thing to the PLC but what is

521
00:28:52,460 --> 00:28:58,100
this encrypted key material so first of

522
00:28:56,450 --> 00:29:01,460
all let's list the cryptographic

523
00:28:58,100 --> 00:29:03,469
primitive which in use so there is

524
00:29:01,460 --> 00:29:06,110
public private key based a symmetric

525
00:29:03,470 --> 00:29:08,960
encryption which is done with elliptic

526
00:29:06,110 --> 00:29:11,870
curve L gamma there is also symmetric

527
00:29:08,960 --> 00:29:15,590
key encryption which is done with AES in

528
00:29:11,870 --> 00:29:17,780
two mode ECB mode and counter mode there

529
00:29:15,590 --> 00:29:18,980
is a key derivation function

530
00:29:17,780 --> 00:29:20,629
KDF

531
00:29:18,980 --> 00:29:25,190
and there is also a non cryptographic

532
00:29:20,630 --> 00:29:29,980
checksum tabulation hash so how did Thea

533
00:29:25,190 --> 00:29:32,540
share the KDK generate 20 bytes free key

534
00:29:29,980 --> 00:29:35,540
encrypt it using elliptic curve el-gamal

535
00:29:32,540 --> 00:29:39,830
encryption with the plc public key and

536
00:29:35,540 --> 00:29:42,159
edit to the king material calculate KDF

537
00:29:39,830 --> 00:29:44,809
on pre key and gets three buffers the

538
00:29:42,160 --> 00:29:47,870
checksum encryption key the checksum

539
00:29:44,809 --> 00:29:50,899
seed and the key encryption key then

540
00:29:47,870 --> 00:29:53,750
concatenate the KDK to the challenge

541
00:29:50,900 --> 00:29:56,870
that was received from the POC encrypt

542
00:29:53,750 --> 00:29:59,540
them using AES encounter mode with the

543
00:29:56,870 --> 00:30:03,139
key encryption key and add to the King

544
00:29:59,540 --> 00:30:05,780
material initiate the tabulation hash

545
00:30:03,140 --> 00:30:09,890
with checksum seed and calculate

546
00:30:05,780 --> 00:30:13,490
checksum over the AES output encrypt it

547
00:30:09,890 --> 00:30:16,100
using AES ECB mode with the checks and

548
00:30:13,490 --> 00:30:20,540
encryption key and add to the King

549
00:30:16,100 --> 00:30:23,570
material now the Tia can send the king

550
00:30:20,540 --> 00:30:26,809
material to the PLC when the bills he

551
00:30:23,570 --> 00:30:30,110
receives the king material the PLC and

552
00:30:26,809 --> 00:30:36,500
only the PLC can use its private key to

553
00:30:30,110 --> 00:30:39,379
decrypt tricky and extract the KDK so

554
00:30:36,500 --> 00:30:43,280
now the plc is able to derive the

555
00:30:39,380 --> 00:30:45,500
session key to the public keys are

556
00:30:43,280 --> 00:30:48,200
stored in compressed key files at a TI

557
00:30:45,500 --> 00:30:52,040
installation folder each key file

558
00:30:48,200 --> 00:30:56,240
contains some metadata like version key

559
00:30:52,040 --> 00:30:59,960
type key + key family and also key data

560
00:30:56,240 --> 00:31:03,280
which is the PLC public key for the

561
00:30:59,960 --> 00:31:07,190
elliptic curve El Gamal like encryption

562
00:31:03,280 --> 00:31:10,639
for example this is a real censored key

563
00:31:07,190 --> 00:31:15,190
file it's version is 1 it's order number

564
00:31:10,640 --> 00:31:21,169
is s7 1500 connection its family type is

565
00:31:15,190 --> 00:31:25,400
s7 1500 and the kita is the PLC public

566
00:31:21,169 --> 00:31:28,309
key but if we take a better look we will

567
00:31:25,400 --> 00:31:32,150
see that the film version is empty why

568
00:31:28,309 --> 00:31:37,460
the reason is that this plc public key

569
00:31:32,150 --> 00:31:43,070
is good to connect to any s7 1500 PLC

570
00:31:37,460 --> 00:31:45,559
and this is our ring this is the ring to

571
00:31:43,070 --> 00:31:52,010
rule them all with this public key we

572
00:31:45,559 --> 00:31:54,830
can connect to any s7 1500 PLC so now

573
00:31:52,010 --> 00:31:57,799
that we have found our ring we could use

574
00:31:54,830 --> 00:32:00,139
it with our with our rogue engineering

575
00:31:57,799 --> 00:32:03,740
station in order to establish the

576
00:32:00,140 --> 00:32:06,530
session key so first of all pre

577
00:32:03,740 --> 00:32:08,450
calculate 3 key encryption and check

578
00:32:06,530 --> 00:32:11,120
some encryption key check some seed and

579
00:32:08,450 --> 00:32:14,620
key encryption key this step could be

580
00:32:11,120 --> 00:32:18,500
offline in our setup phase in our lab

581
00:32:14,620 --> 00:32:22,340
then when the attacker is on the product

582
00:32:18,500 --> 00:32:24,409
environment and start the handshake let

583
00:32:22,340 --> 00:32:27,020
Python do the symmetric encryption and

584
00:32:24,409 --> 00:32:31,010
the checksum calculation to build King

585
00:32:27,020 --> 00:32:33,668
material 2 & 3 based on the challenge

586
00:32:31,010 --> 00:32:37,220
that was sent from the PLC

587
00:32:33,669 --> 00:32:39,650
now our rogue engineered station can

588
00:32:37,220 --> 00:32:42,049
send the king material to the plc and

589
00:32:39,650 --> 00:32:44,840
the POC will extract the KD k and

590
00:32:42,049 --> 00:32:46,299
derived the session key but we need to

591
00:32:44,840 --> 00:32:49,490
derive the session key too

592
00:32:46,299 --> 00:32:51,379
so the Python script rocks the session

593
00:32:49,490 --> 00:32:53,900
key derivation function from the

594
00:32:51,380 --> 00:32:56,510
relevant DLL we didn't reverse the

595
00:32:53,900 --> 00:32:59,090
session key derivation function f due to

596
00:32:56,510 --> 00:33:01,610
lack of time but we know that this

597
00:32:59,090 --> 00:33:04,399
function is a static function and it

598
00:33:01,610 --> 00:33:11,540
doesn't and it doesn't depend on any

599
00:33:04,400 --> 00:33:13,850
external information ok now I'll give

600
00:33:11,540 --> 00:33:18,620
some tips about reverse engineering the

601
00:33:13,850 --> 00:33:22,340
Thea handshake so here is yuge first of

602
00:33:18,620 --> 00:33:25,699
all find your target files in our case

603
00:33:22,340 --> 00:33:27,649
the target file was a MSP core managed

604
00:33:25,700 --> 00:33:30,799
dll this is the main

605
00:33:27,650 --> 00:33:34,040
7 communication DLL this is a mixed

606
00:33:30,799 --> 00:33:36,379
model which means the part of the DLL is

607
00:33:34,040 --> 00:33:39,139
written in C sharp and co and is

608
00:33:36,380 --> 00:33:40,130
compiled to manage CIL bytecode and the

609
00:33:39,140 --> 00:33:43,789
other part of the

610
00:33:40,130 --> 00:33:48,049
is written in C++ and compiled to native

611
00:33:43,789 --> 00:33:50,870
and managed x86 awkward's then choose

612
00:33:48,049 --> 00:33:53,720
your tools when we want to analyze the

613
00:33:50,870 --> 00:33:56,830
managed code we can ignore the native

614
00:33:53,720 --> 00:33:59,360
part of the DLL and load the DLL in

615
00:33:56,830 --> 00:34:02,659
reflector or the inspire and read its

616
00:33:59,360 --> 00:34:05,389
code when we want to analyze the native

617
00:34:02,660 --> 00:34:09,139
C++ code we can ignore the manage part

618
00:34:05,390 --> 00:34:14,570
of the DLL load it in either pro or in

619
00:34:09,139 --> 00:34:16,700
Hydra and analyze the native code then I

620
00:34:14,570 --> 00:34:19,850
recommend to improve your reverse

621
00:34:16,699 --> 00:34:28,509
engineering starting point so how can we

622
00:34:19,850 --> 00:34:32,060
do it ok ok so tip number one identify

623
00:34:28,510 --> 00:34:35,179
native code entry points so this is a

624
00:34:32,060 --> 00:34:38,560
snapshot from om speak or manage the ll

625
00:34:35,179 --> 00:34:41,510
managed part open in this Indian Spy if

626
00:34:38,560 --> 00:34:45,440
if you look at the bottom of the

627
00:34:41,510 --> 00:34:48,350
snapshot there is a call to a OMS client

628
00:34:45,440 --> 00:34:50,720
session set server key public key set

629
00:34:48,350 --> 00:34:56,690
several public key function okay so

630
00:34:50,719 --> 00:34:59,689
let's click on this function okay so we

631
00:34:56,690 --> 00:35:03,109
barely can see the prototype of s

632
00:34:59,690 --> 00:35:08,030
several public key but where is the

633
00:35:03,109 --> 00:35:11,960
function body so the inspire us and

634
00:35:08,030 --> 00:35:14,150
parsing the P header file and it can

635
00:35:11,960 --> 00:35:18,910
tell us that this function is an

636
00:35:14,150 --> 00:35:22,550
unmanaged function we open it during the

637
00:35:18,910 --> 00:35:24,440
analyzing of the manage part so it's so

638
00:35:22,550 --> 00:35:27,440
clearly we won't see the source code of

639
00:35:24,440 --> 00:35:31,550
this function but how can we found it

640
00:35:27,440 --> 00:35:33,950
its implementation so if we take even a

641
00:35:31,550 --> 00:35:38,170
closer look a closer look we will see

642
00:35:33,950 --> 00:35:41,810
that there is also an AR AR v a year so

643
00:35:38,170 --> 00:35:44,600
what is this our VA this R b/a is the

644
00:35:41,810 --> 00:35:47,509
relative virtual address of this

645
00:35:44,600 --> 00:35:51,080
function in the native part of the DLL

646
00:35:47,510 --> 00:35:52,510
we can load it in either take the image

647
00:35:51,080 --> 00:35:55,328
base

648
00:35:52,510 --> 00:36:00,549
this OVA and we will reach this function

649
00:35:55,329 --> 00:36:03,760
now we know that this function is s set

650
00:36:00,549 --> 00:36:06,130
several public key and we also know it's

651
00:36:03,760 --> 00:36:08,190
prototype because we see it in the

652
00:36:06,130 --> 00:36:13,660
manage part

653
00:36:08,190 --> 00:36:17,109
tip number two C++ and RT TI are TTI is

654
00:36:13,660 --> 00:36:19,779
runtime type information this is a very

655
00:36:17,109 --> 00:36:22,960
cool feature an optional feature that

656
00:36:19,779 --> 00:36:26,020
allows C++ programmers to examine object

657
00:36:22,960 --> 00:36:28,960
types dynamically the article

658
00:36:26,020 --> 00:36:31,770
information must be inside the binary

659
00:36:28,960 --> 00:36:36,039
and we could use it

660
00:36:31,770 --> 00:36:38,920
so find our TTI object this could be

661
00:36:36,039 --> 00:36:42,000
done by looking for the string our TTI

662
00:36:38,920 --> 00:36:45,309
complete object locator with Ida and

663
00:36:42,000 --> 00:36:51,099
then after we find an object we can see

664
00:36:45,309 --> 00:36:56,319
the name of the class here there is the

665
00:36:51,099 --> 00:37:00,309
OMS parser the reason that this of this

666
00:36:56,319 --> 00:37:03,759
object is interesting because every

667
00:37:00,309 --> 00:37:08,559
virtual table of the classes has a

668
00:37:03,760 --> 00:37:10,869
reference to this object so locate the

669
00:37:08,559 --> 00:37:15,640
relevant virtual table by using the

670
00:37:10,869 --> 00:37:18,730
cross references of this object after we

671
00:37:15,640 --> 00:37:21,490
found the virtual table we could rebuild

672
00:37:18,730 --> 00:37:24,099
the structure which represent the

673
00:37:21,490 --> 00:37:32,439
virtual tables and also changing the

674
00:37:24,099 --> 00:37:34,869
name of the address like this then

675
00:37:32,440 --> 00:37:37,180
combine the wall scan the dotnet

676
00:37:34,869 --> 00:37:41,109
metadata and grab the native entry

677
00:37:37,180 --> 00:37:44,680
points also scan your ID be and grab the

678
00:37:41,109 --> 00:37:47,109
relevant our PTI data use either Python

679
00:37:44,680 --> 00:37:52,390
to add this information to your ID be

680
00:37:47,109 --> 00:37:54,038
and then this ugly function which I

681
00:37:52,390 --> 00:37:55,779
guess that most of you can't understand

682
00:37:54,039 --> 00:37:59,440
what it does because of all these

683
00:37:55,779 --> 00:38:03,609
dereference with a very few efforts

684
00:37:59,440 --> 00:38:06,339
could transform to such a nicely and

685
00:38:03,609 --> 00:38:10,089
readable function

686
00:38:06,339 --> 00:38:10,089
much better isn't it

687
00:38:10,150 --> 00:38:27,760
okay so now let's see them on the

688
00:38:13,369 --> 00:38:27,760
demonstration volume

689
00:38:35,710 --> 00:38:45,560
this is our attack setup here you have

690
00:38:40,580 --> 00:38:48,020
our victim PLC the s7 1500 below you

691
00:38:45,560 --> 00:38:51,799
have a screen connected to a Windows

692
00:38:48,020 --> 00:38:54,620
workstation on the left hand side of the

693
00:38:51,800 --> 00:38:58,340
screen you see three windows realize

694
00:38:54,620 --> 00:39:01,759
that I'm going to use to run our attack

695
00:38:58,340 --> 00:39:04,610
screens on the right-hand side of the

696
00:39:01,760 --> 00:39:07,820
screen you see it Tia in a read-only

697
00:39:04,610 --> 00:39:13,010
mode that I'm going to use to query the

698
00:39:07,820 --> 00:39:16,700
PLC as to the program loaded in it first

699
00:39:13,010 --> 00:39:21,200
I'm going to run an detects creep that

700
00:39:16,700 --> 00:39:23,930
stops and starts the PLC the PLC is

701
00:39:21,200 --> 00:39:26,600
currently in run mode is indicated by

702
00:39:23,930 --> 00:39:30,290
the green background and we have a

703
00:39:26,600 --> 00:39:33,440
single LED that is sets I'm going to use

704
00:39:30,290 --> 00:39:37,430
the script to send a stop instruction to

705
00:39:33,440 --> 00:39:40,580
the PLC the piece is switched to stop

706
00:39:37,430 --> 00:39:44,839
hold the background color has changed

707
00:39:40,580 --> 00:39:48,370
and the LED is cleared now I'm going to

708
00:39:44,840 --> 00:39:52,400
send the start instruction to the PLC

709
00:39:48,370 --> 00:39:55,339
the PLC is switched to run mode the

710
00:39:52,400 --> 00:39:59,720
background color is green again and the

711
00:39:55,340 --> 00:40:03,770
lab is set next I'm going to run an

712
00:39:59,720 --> 00:40:07,970
attack script the download downloads a

713
00:40:03,770 --> 00:40:10,160
program to the PLC the problem that we

714
00:40:07,970 --> 00:40:15,950
are going to use is the yellow program

715
00:40:10,160 --> 00:40:20,029
from the examples the yellow program

716
00:40:15,950 --> 00:40:23,509
sets let's number 0 in one so indeed it

717
00:40:20,030 --> 00:40:26,930
is running in the plc now I'm going to

718
00:40:23,510 --> 00:40:31,130
use the Tia to query the PLC as to the

719
00:40:26,930 --> 00:40:35,000
program loaded the Tia gives a

720
00:40:31,130 --> 00:40:38,360
notification that the source of the

721
00:40:35,000 --> 00:40:40,970
program loaded in the PLC has changed

722
00:40:38,360 --> 00:40:44,750
which is indeed true because before we

723
00:40:40,970 --> 00:40:47,450
had a program with like one LED set and

724
00:40:44,750 --> 00:40:52,400
now we have a program with LEDs number

725
00:40:47,450 --> 00:40:56,290
zero and one set the yellow program now

726
00:40:52,400 --> 00:40:59,810
we are finally ready to show you our

727
00:40:56,290 --> 00:41:03,590
Stealth's program injection attack I'm

728
00:40:59,810 --> 00:41:09,200
going to run an attack that downloads

729
00:41:03,590 --> 00:41:12,140
the blue binary and the yellow source so

730
00:41:09,200 --> 00:41:16,399
the blue binary let's number two and

731
00:41:12,140 --> 00:41:19,190
three are set we added another LED for

732
00:41:16,400 --> 00:41:21,140
your convenience so it will be easier to

733
00:41:19,190 --> 00:41:24,170
distinguish between the yellow program

734
00:41:21,140 --> 00:41:27,920
and the blue program now I'm going to

735
00:41:24,170 --> 00:41:32,720
use the Tia to query the PLC as to the

736
00:41:27,920 --> 00:41:36,680
program loaded in it the yellow source

737
00:41:32,720 --> 00:41:39,529
was previously loaded to the PLC and now

738
00:41:36,680 --> 00:41:44,600
I loaded it again so the source program

739
00:41:39,530 --> 00:41:48,860
hasn't changed so the Tia doesn't send a

740
00:41:44,600 --> 00:41:52,490
notification so we have the blue binary

741
00:41:48,860 --> 00:41:58,790
running in the PLC we have the yellow

742
00:41:52,490 --> 00:42:02,209
source loaded to the PLC so indeed our

743
00:41:58,790 --> 00:42:05,890
stealth program injection attack is

744
00:42:02,210 --> 00:42:08,470
successful and even if they're easily

745
00:42:05,890 --> 00:42:12,140
connected to the production environment

746
00:42:08,470 --> 00:42:16,509
it will not be able to detect our

747
00:42:12,140 --> 00:42:16,509
stealth program injection attack

748
00:42:19,550 --> 00:42:30,330
[Applause]

749
00:42:26,930 --> 00:42:33,000
so to summarize we introduced phone

750
00:42:30,330 --> 00:42:35,940
number vulnerabilities in the s7 p3

751
00:42:33,000 --> 00:42:39,090
protocol here is not authenticated

752
00:42:35,940 --> 00:42:43,170
towards the PLC and there is a one ring

753
00:42:39,090 --> 00:42:45,240
to rule them all a one PLC publicy we

754
00:42:43,170 --> 00:42:48,510
also introduced a Python a tackle that

755
00:42:45,240 --> 00:42:52,379
impersonates Tia download a recorded

756
00:42:48,510 --> 00:42:56,480
program to any a7 1500 PLC we also

757
00:42:52,380 --> 00:43:04,980
introduced a stills mod injection attack

758
00:42:56,480 --> 00:43:15,600
thank you very much for listening any

759
00:43:04,980 --> 00:43:18,720
questions yes we did contact Siemens we

760
00:43:15,600 --> 00:43:21,630
found some other vulnerabilities that we

761
00:43:18,720 --> 00:43:23,430
didn't describe on this presentation but

762
00:43:21,630 --> 00:43:27,180
there are described in the white paper

763
00:43:23,430 --> 00:43:30,120
so Simmons società CV in number but

764
00:43:27,180 --> 00:43:33,299
apart from this the main reaction was

765
00:43:30,120 --> 00:43:40,049
use password protection access control

766
00:43:33,300 --> 00:43:43,550
to mitigate this attack any other

767
00:43:40,050 --> 00:43:47,789
questions thank you very much

768
00:43:43,550 --> 00:43:47,789
[Applause]

