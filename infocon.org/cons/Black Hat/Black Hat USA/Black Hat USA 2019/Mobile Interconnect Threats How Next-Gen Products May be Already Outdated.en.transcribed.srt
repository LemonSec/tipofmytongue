1
00:00:00,030 --> 00:00:04,259
welcome to mobile interconnect threads

2
00:00:02,220 --> 00:00:07,410
how next-gen products may be already

3
00:00:04,259 --> 00:00:09,900
outdated in lagoon JKL with Guillen

4
00:00:07,410 --> 00:00:12,420
Tessier before we begin a few brief

5
00:00:09,900 --> 00:00:14,670
notes please stop by the business hall

6
00:00:12,420 --> 00:00:17,580
located in the Mandalay Bay Oceanside

7
00:00:14,670 --> 00:00:19,740
and shoreline ballrooms on level 2 there

8
00:00:17,580 --> 00:00:22,830
will be mimosas there at 11:50 and an

9
00:00:19,740 --> 00:00:24,538
ice cream social at 3:20 the blackhat

10
00:00:22,830 --> 00:00:27,089
Arsenal is in the business hall on level

11
00:00:24,539 --> 00:00:29,490
2 lunch will be available in Bayside a/b

12
00:00:27,090 --> 00:00:31,800
from 1:00 to 2:30 and don't forget the

13
00:00:29,490 --> 00:00:33,719
merchandise store on level 2 and session

14
00:00:31,800 --> 00:00:36,090
recordings from source of knowledge they

15
00:00:33,719 --> 00:00:37,559
have a desk on every level questions

16
00:00:36,090 --> 00:00:40,140
after this talk will be taken in the

17
00:00:37,559 --> 00:00:41,879
rapper brief a and please remember to

18
00:00:40,140 --> 00:00:43,680
put your phone on vibrate or turn it off

19
00:00:41,879 --> 00:00:48,180
to avoid interrupting the presentation

20
00:00:43,680 --> 00:00:50,960
and now please welcome guillaume Tessier

21
00:00:48,180 --> 00:00:54,090
[Applause]

22
00:00:50,960 --> 00:00:55,710
hello hello everyone I'm very pleased to

23
00:00:54,090 --> 00:00:57,570
be with you today and it's an honor to

24
00:00:55,710 --> 00:01:00,270
be a speaker at blackhat so let me tell

25
00:00:57,570 --> 00:01:02,010
you thank you for this today we'll be

26
00:01:00,270 --> 00:01:06,180
talking about mobile interconnect

27
00:01:02,010 --> 00:01:08,130
threats so I would like first to make a

28
00:01:06,180 --> 00:01:09,689
quick overview of the presentation I

29
00:01:08,130 --> 00:01:12,089
would like to start with a brief

30
00:01:09,689 --> 00:01:14,339
introduction to mobile interconnect what

31
00:01:12,090 --> 00:01:16,259
it is what are the threats and what are

32
00:01:14,340 --> 00:01:19,320
the potential solutions that we

33
00:01:16,259 --> 00:01:21,330
operators bring to this we'll dig

34
00:01:19,320 --> 00:01:23,360
through the sequence stack and winding

35
00:01:21,330 --> 00:01:25,950
the different layers and trying to find

36
00:01:23,360 --> 00:01:29,549
things that could be implemented wrongly

37
00:01:25,950 --> 00:01:31,439
by ss7 firewall vendors and at the end

38
00:01:29,549 --> 00:01:34,200
there will be a slide of key takeaways

39
00:01:31,439 --> 00:01:38,729
to highlight the most significant things

40
00:01:34,200 --> 00:01:40,680
that you have to take away with you I

41
00:01:38,729 --> 00:01:44,070
don't know if I mentioned it but my

42
00:01:40,680 --> 00:01:46,110
employer is orange which is a European

43
00:01:44,070 --> 00:01:52,079
operator with many affiliates

44
00:01:46,110 --> 00:01:54,299
all over the world and this work I work

45
00:01:52,079 --> 00:01:56,729
as a security researcher and while I

46
00:01:54,299 --> 00:01:58,880
work on s7 firewalls these are not my

47
00:01:56,729 --> 00:02:02,729
only activities I have other activities

48
00:01:58,880 --> 00:02:06,089
as a vulnerability researcher so

49
00:02:02,729 --> 00:02:08,818
interconnect 101 let me tell you a short

50
00:02:06,090 --> 00:02:11,130
story when I arrived in the u.s. a few

51
00:02:08,818 --> 00:02:13,530
days ago my mobile ad

52
00:02:11,130 --> 00:02:15,570
SIM card from Orange my operator in

53
00:02:13,530 --> 00:02:18,210
France and it happens that in a sim card

54
00:02:15,570 --> 00:02:20,579
there is a secret which is essential

55
00:02:18,210 --> 00:02:22,770
because it allows you to authenticate to

56
00:02:20,580 --> 00:02:24,660
the mobile network in France it works

57
00:02:22,770 --> 00:02:27,660
because the radio network is the same as

58
00:02:24,660 --> 00:02:30,150
the network that has the secret on my

59
00:02:27,660 --> 00:02:33,359
SIM card right here in the US the

60
00:02:30,150 --> 00:02:35,850
problem is that the u.s. operator on

61
00:02:33,360 --> 00:02:37,680
which I attach to does not have the

62
00:02:35,850 --> 00:02:40,890
secret that is necessary to authenticate

63
00:02:37,680 --> 00:02:43,590
me so what it means as my mobile works

64
00:02:40,890 --> 00:02:46,079
in the u.s. is that there must be a link

65
00:02:43,590 --> 00:02:48,720
between the u.s. operator and my home

66
00:02:46,080 --> 00:02:51,150
operator in France for the secret to be

67
00:02:48,720 --> 00:02:54,060
correctly processed and messages to be

68
00:02:51,150 --> 00:02:57,030
flowing correctly between the radio side

69
00:02:54,060 --> 00:02:59,940
here in the US and my home operator in

70
00:02:57,030 --> 00:03:02,160
France what it means also is that there

71
00:02:59,940 --> 00:03:03,810
is a link between operator which we will

72
00:03:02,160 --> 00:03:08,730
call interconnect here there are

73
00:03:03,810 --> 00:03:10,620
functions that can be exposed via this

74
00:03:08,730 --> 00:03:12,570
interconnect like for example roaming

75
00:03:10,620 --> 00:03:15,570
international calls international short

76
00:03:12,570 --> 00:03:18,840
messages and all these functions are

77
00:03:15,570 --> 00:03:23,670
implemented in ss7 right so now we know

78
00:03:18,840 --> 00:03:27,300
interconnect and ss7 the interconnect

79
00:03:23,670 --> 00:03:30,390
initially has been set up and designed

80
00:03:27,300 --> 00:03:33,950
between a few operators that were

81
00:03:30,390 --> 00:03:37,320
nationwide operators in the 80s between

82
00:03:33,950 --> 00:03:39,510
not that many people so what happens at

83
00:03:37,320 --> 00:03:41,910
that time is that there were no security

84
00:03:39,510 --> 00:03:44,730
in the design protocols in the design of

85
00:03:41,910 --> 00:03:47,100
ss7 which means that all the functions

86
00:03:44,730 --> 00:03:52,019
roaming international calls and SMSes

87
00:03:47,100 --> 00:03:53,459
can be triggered and leveraged once you

88
00:03:52,020 --> 00:03:55,709
have an access to this interconnect

89
00:03:53,459 --> 00:03:59,420
Network for those know the interconnect

90
00:03:55,709 --> 00:04:01,470
network is something called G X or IP X

91
00:03:59,420 --> 00:04:06,899
so there was no security at the

92
00:04:01,470 --> 00:04:09,209
beginning and then in the later on 20

93
00:04:06,900 --> 00:04:12,360
years later on mobile came and mobile

94
00:04:09,209 --> 00:04:14,250
came by yury using this as a seven

95
00:04:12,360 --> 00:04:16,950
interconnect that was made for fixed

96
00:04:14,250 --> 00:04:18,298
network as we know mobile networks have

97
00:04:16,950 --> 00:04:20,430
exploded all over the world there are

98
00:04:18,298 --> 00:04:22,409
multiple generation multiple

99
00:04:20,430 --> 00:04:24,870
vandals principal whatever you want and

100
00:04:22,410 --> 00:04:27,510
of course there are also mobile virtual

101
00:04:24,870 --> 00:04:31,650
network operators that act on top of

102
00:04:27,510 --> 00:04:34,080
mobile network to resell their services

103
00:04:31,650 --> 00:04:36,270
so it happens that jus chill explosion

104
00:04:34,080 --> 00:04:38,039
of the mobile there are many many many

105
00:04:36,270 --> 00:04:40,680
new network operators that will have

106
00:04:38,040 --> 00:04:42,690
access to this protected network at the

107
00:04:40,680 --> 00:04:46,760
beginning that is not protected anymore

108
00:04:42,690 --> 00:04:50,880
and of course what we see now is that

109
00:04:46,760 --> 00:04:52,830
ss7 has been used as a vector to start

110
00:04:50,880 --> 00:04:56,280
to steal some sensitive information like

111
00:04:52,830 --> 00:04:58,919
for example banks and second factor

112
00:04:56,280 --> 00:05:02,429
authentication to the clients using SMS

113
00:04:58,919 --> 00:05:04,979
ease and if of course you can steal this

114
00:05:02,430 --> 00:05:08,430
SMS using sa-7 then you can access to a

115
00:05:04,979 --> 00:05:12,900
sensitive information and maybe most of

116
00:05:08,430 --> 00:05:15,090
you know because this is a seven let's

117
00:05:12,900 --> 00:05:16,919
say attacks has made their way to the

118
00:05:15,090 --> 00:05:19,020
meteor attack framework and there are

119
00:05:16,919 --> 00:05:21,690
two items related to as a seven one is

120
00:05:19,020 --> 00:05:25,469
to track a device location using as a

121
00:05:21,690 --> 00:05:28,710
seven and the other one is to redirect

122
00:05:25,470 --> 00:05:32,340
phone calls or short messages from a

123
00:05:28,710 --> 00:05:37,380
target so this is something that we have

124
00:05:32,340 --> 00:05:39,570
to defend against and GSMA pushes a way

125
00:05:37,380 --> 00:05:41,669
to defend against those attacks the

126
00:05:39,570 --> 00:05:44,159
proposed way is to deploy a signaling

127
00:05:41,669 --> 00:05:46,500
firewall or equivalent so now we know

128
00:05:44,160 --> 00:05:49,380
the term signaling firewall in order to

129
00:05:46,500 --> 00:05:52,830
protect against those threats it has to

130
00:05:49,380 --> 00:05:56,070
function it can monitor it can block the

131
00:05:52,830 --> 00:06:00,000
signaling malicious traffic it is

132
00:05:56,070 --> 00:06:02,099
important because there are we know that

133
00:06:00,000 --> 00:06:03,810
the ss7 firewall the sync the ss7

134
00:06:02,099 --> 00:06:05,490
firewall will talk later in this

135
00:06:03,810 --> 00:06:07,020
presentation

136
00:06:05,490 --> 00:06:08,580
will have to function it can either

137
00:06:07,020 --> 00:06:11,130
monitor or block the traffic which means

138
00:06:08,580 --> 00:06:13,320
that it can be passive or active you can

139
00:06:11,130 --> 00:06:15,180
take the interconnect tap the

140
00:06:13,320 --> 00:06:16,860
interconnect and bring the packet flow

141
00:06:15,180 --> 00:06:19,800
to the equipment so that you can detect

142
00:06:16,860 --> 00:06:22,410
malicious attacks in this flow but not

143
00:06:19,800 --> 00:06:25,470
block them or you can put the signaling

144
00:06:22,410 --> 00:06:27,750
firewall online and then send messages

145
00:06:25,470 --> 00:06:31,860
that will stop the attack once it is

146
00:06:27,750 --> 00:06:33,400
detected okay so now that we know about

147
00:06:31,860 --> 00:06:35,860
s signaling firewall will

148
00:06:33,400 --> 00:06:38,409
deeper into the threat model our main

149
00:06:35,860 --> 00:06:40,540
activity was about assessing the

150
00:06:38,410 --> 00:06:43,990
security of a signalling firewall as a

151
00:06:40,540 --> 00:06:45,550
seven firewall and to incorporate it

152
00:06:43,990 --> 00:06:48,729
into a new service to protect our

153
00:06:45,550 --> 00:06:50,860
customers and our networks so the target

154
00:06:48,729 --> 00:06:53,229
for evaluation is a security product

155
00:06:50,860 --> 00:06:56,080
called as a seven firewall we do try to

156
00:06:53,229 --> 00:07:00,219
protect our networks here on the right

157
00:06:56,080 --> 00:07:01,990
made of HL our MSE all mobile network

158
00:07:00,220 --> 00:07:05,020
nodes that are very important to network

159
00:07:01,990 --> 00:07:07,000
operator and we have traffic that is

160
00:07:05,020 --> 00:07:08,889
flowing through as a seven firewall

161
00:07:07,000 --> 00:07:12,250
there can be some legitimate traffic

162
00:07:08,889 --> 00:07:14,889
which means that this s7 firewall has to

163
00:07:12,250 --> 00:07:16,570
be resilient it has to be protected

164
00:07:14,889 --> 00:07:18,669
against denial of service attack because

165
00:07:16,570 --> 00:07:20,199
we do want legitimate traffic to be

166
00:07:18,669 --> 00:07:22,539
correctly flowing through the ss7

167
00:07:20,199 --> 00:07:24,400
firewall and there are of course some

168
00:07:22,539 --> 00:07:26,260
other people that might try to attack

169
00:07:24,400 --> 00:07:26,969
the signaling firewall via the sigtran

170
00:07:26,260 --> 00:07:29,889
link

171
00:07:26,970 --> 00:07:32,740
sigtran is let's say for the moment an

172
00:07:29,889 --> 00:07:35,020
equivalent of ss7 that we saw before and

173
00:07:32,740 --> 00:07:37,810
i will dig deeper into the differences

174
00:07:35,020 --> 00:07:40,240
between the two just after but in our

175
00:07:37,810 --> 00:07:42,310
threat model attackers can use sigtran

176
00:07:40,240 --> 00:07:44,590
and send arbitrary messages to the

177
00:07:42,310 --> 00:07:49,210
component and will assess the security

178
00:07:44,590 --> 00:07:51,250
of this component of course this

179
00:07:49,210 --> 00:07:53,049
component has a 6-1 interface but is

180
00:07:51,250 --> 00:07:56,169
that it has also many other interfaces

181
00:07:53,050 --> 00:07:58,120
like SNMP ESS age whatever GUI you want

182
00:07:56,169 --> 00:08:00,430
and will not be talking about this one

183
00:07:58,120 --> 00:08:02,050
because this one are more dependent on

184
00:08:00,430 --> 00:08:03,520
the product or the implementation but

185
00:08:02,050 --> 00:08:04,690
we'll be talking about cig tron

186
00:08:03,520 --> 00:08:09,299
interface and sigtran

187
00:08:04,690 --> 00:08:12,430
bugs weaknesses and potentially exploit

188
00:08:09,300 --> 00:08:14,229
so we have our product using our central

189
00:08:12,430 --> 00:08:16,120
interface and the question now is what

190
00:08:14,229 --> 00:08:19,510
do we do to find to assess the security

191
00:08:16,120 --> 00:08:21,430
of such a component so basically we have

192
00:08:19,510 --> 00:08:22,539
access to the component we do not have

193
00:08:21,430 --> 00:08:25,870
access to the source code of the

194
00:08:22,539 --> 00:08:27,760
component and we have the first task is

195
00:08:25,870 --> 00:08:30,820
to be able to identify the value spots

196
00:08:27,760 --> 00:08:33,039
of the product libraries binaries

197
00:08:30,820 --> 00:08:35,010
configuration files whatever and what

198
00:08:33,039 --> 00:08:37,650
they do because we want to

199
00:08:35,010 --> 00:08:39,720
get a focus on the signaling traffic so

200
00:08:37,650 --> 00:08:43,260
we have to know we're in the product is

201
00:08:39,720 --> 00:08:45,600
located the code that perform decoding

202
00:08:43,260 --> 00:08:47,660
analysis and verification of those

203
00:08:45,600 --> 00:08:51,590
messages so we had to reverse engineer

204
00:08:47,660 --> 00:08:53,610
system wise and binary wise get to the

205
00:08:51,590 --> 00:08:55,740
machine code that was running on the

206
00:08:53,610 --> 00:08:59,070
machine and try to find vulnerabilities

207
00:08:55,740 --> 00:09:01,410
in this we have also performed some

208
00:08:59,070 --> 00:09:04,530
passing and thus equipment either using

209
00:09:01,410 --> 00:09:06,750
own made further or using some

210
00:09:04,530 --> 00:09:11,040
commercial phaser that we also have in

211
00:09:06,750 --> 00:09:13,770
our lab and in our society and at the

212
00:09:11,040 --> 00:09:16,949
end because we want our bugs findings

213
00:09:13,770 --> 00:09:18,900
and witnesses finding to be much

214
00:09:16,950 --> 00:09:21,330
powerful which you exploit development

215
00:09:18,900 --> 00:09:22,650
which means that we have POCs to

216
00:09:21,330 --> 00:09:24,900
highlight the fact that what we have

217
00:09:22,650 --> 00:09:27,600
found is really something important and

218
00:09:24,900 --> 00:09:28,980
cannot be neglected by vandals they have

219
00:09:27,600 --> 00:09:30,630
to fix it and they have to fix it

220
00:09:28,980 --> 00:09:32,550
correctly because it's something that

221
00:09:30,630 --> 00:09:35,790
can be used by attackers to gain remote

222
00:09:32,550 --> 00:09:38,099
code execution and equipment at the end

223
00:09:35,790 --> 00:09:40,170
the cool thing is that we end up

224
00:09:38,100 --> 00:09:42,630
developing a tool that is not yet

225
00:09:40,170 --> 00:09:45,120
released but will be in a few days I

226
00:09:42,630 --> 00:09:47,580
cross my fingers which is called porn

227
00:09:45,120 --> 00:09:50,990
ss7 which allows you to modify and to

228
00:09:47,580 --> 00:09:53,130
generate packets use that will be

229
00:09:50,990 --> 00:09:55,020
processed by the sequence stack of the

230
00:09:53,130 --> 00:09:56,820
rs7 firewall and we were able to

231
00:09:55,020 --> 00:09:59,130
successfully write several

232
00:09:56,820 --> 00:10:01,500
proof-of-concept and exploit to make it

233
00:09:59,130 --> 00:10:06,570
crash or to run arbitrary code on the

234
00:10:01,500 --> 00:10:09,750
ss7 firewall as I told you before a

235
00:10:06,570 --> 00:10:13,080
slight there's a slight distinction

236
00:10:09,750 --> 00:10:15,960
between Sigma and s7 sigtran is for

237
00:10:13,080 --> 00:10:18,690
packet networks whereas ss7 was more for

238
00:10:15,960 --> 00:10:21,480
TDM networks the difference here is

239
00:10:18,690 --> 00:10:24,630
between the fee layers at the very

240
00:10:21,480 --> 00:10:27,540
bottom of the slide six one is just the

241
00:10:24,630 --> 00:10:29,850
transport of applicative as a seven

242
00:10:27,540 --> 00:10:30,719
legacy protocols like map like T cap

243
00:10:29,850 --> 00:10:33,840
like sccp

244
00:10:30,720 --> 00:10:36,750
just as with the ss7 on top of IP

245
00:10:33,840 --> 00:10:38,880
networks and in between there were three

246
00:10:36,750 --> 00:10:40,740
layers that were added of course IP

247
00:10:38,880 --> 00:10:43,439
because we are talking about packet IP

248
00:10:40,740 --> 00:10:46,630
networks SCTP because it's a specialized

249
00:10:43,440 --> 00:10:50,620
transport that is made for

250
00:10:46,630 --> 00:10:52,570
telco needs like multi Austin or several

251
00:10:50,620 --> 00:10:55,690
things like this and there is an

252
00:10:52,570 --> 00:10:59,020
adaptation layer that roughly takes the

253
00:10:55,690 --> 00:11:00,610
MT PE all the MTP parameters that you

254
00:10:59,020 --> 00:11:03,310
can have and that put them that a

255
00:11:00,610 --> 00:11:06,160
patient layer so the sigtran stack is

256
00:11:03,310 --> 00:11:08,199
the one on the right of the slide and

257
00:11:06,160 --> 00:11:11,740
will now be digging into the different

258
00:11:08,200 --> 00:11:14,290
layers of this tag so first from the

259
00:11:11,740 --> 00:11:17,680
bottom we have IP and SCTP these are

260
00:11:14,290 --> 00:11:20,219
IETF standardized protocols and has this

261
00:11:17,680 --> 00:11:23,529
a low levels protocol the thing is that

262
00:11:20,220 --> 00:11:26,710
let's say hardwire somehow the format

263
00:11:23,529 --> 00:11:28,990
the length and the different fields that

264
00:11:26,710 --> 00:11:31,750
you can find in such protocols are very

265
00:11:28,990 --> 00:11:35,130
strict and we have dig into this but we

266
00:11:31,750 --> 00:11:39,040
have not found a lot of things yet of

267
00:11:35,130 --> 00:11:42,189
course if the ss7 firewall is to be used

268
00:11:39,040 --> 00:11:43,660
in a passive way then you know that we

269
00:11:42,190 --> 00:11:45,430
might find some things because then the

270
00:11:43,660 --> 00:11:47,650
IP and the HTTP is to be done by the

271
00:11:45,430 --> 00:11:51,790
component itself and not by the linux

272
00:11:47,650 --> 00:11:53,740
tag so we expect the ss7 firewall to be

273
00:11:51,790 --> 00:11:56,860
able to at least do this verification

274
00:11:53,740 --> 00:11:58,450
and processing first it has to check

275
00:11:56,860 --> 00:11:59,890
source and destination addresses and

276
00:11:58,450 --> 00:12:02,050
there's nothing to say there because it

277
00:11:59,890 --> 00:12:06,150
was correctly done and you can block IP

278
00:12:02,050 --> 00:12:08,680
that you don't want to interact with you

279
00:12:06,150 --> 00:12:10,060
nothing we have found there but you have

280
00:12:08,680 --> 00:12:12,069
two things that are interesting

281
00:12:10,060 --> 00:12:16,599
you have to reassemble IP fragment

282
00:12:12,070 --> 00:12:19,060
because IP allows to use fragmentation

283
00:12:16,600 --> 00:12:22,000
and also HTTP does the same using

284
00:12:19,060 --> 00:12:23,949
segmentation right and so this one

285
00:12:22,000 --> 00:12:26,320
function that we are testing and while

286
00:12:23,950 --> 00:12:29,230
we have not found very interesting bugs

287
00:12:26,320 --> 00:12:31,270
in there like memory corruption or so on

288
00:12:29,230 --> 00:12:33,520
we have found that is a very convenient

289
00:12:31,270 --> 00:12:37,630
way to bypass detection from the ss7

290
00:12:33,520 --> 00:12:40,360
firewall at the IP level there is pseudo

291
00:12:37,630 --> 00:12:43,089
code here that I wrote that shows that

292
00:12:40,360 --> 00:12:45,400
when the ss7 firewall process is an IP

293
00:12:43,089 --> 00:12:48,310
packet just test if it is a fragment or

294
00:12:45,400 --> 00:12:50,680
not if it's a fragment as reassembly has

295
00:12:48,310 --> 00:12:52,750
not been implemented correctly or at all

296
00:12:50,680 --> 00:12:55,780
in the component it just discard the

297
00:12:52,750 --> 00:12:58,360
packet and it is not able to detect it

298
00:12:55,780 --> 00:12:59,199
as a NAT as an attack because just does

299
00:12:58,360 --> 00:13:01,690
not perform the

300
00:12:59,200 --> 00:13:04,450
so using IP fragment is a good way to

301
00:13:01,690 --> 00:13:06,780
vary detection by the ss7 firewall or at

302
00:13:04,450 --> 00:13:10,030
least it was because now it's fixed and

303
00:13:06,780 --> 00:13:13,630
there's also HTTP so this one is a

304
00:13:10,030 --> 00:13:15,610
little bit less obvious but using SCTP

305
00:13:13,630 --> 00:13:17,439
can also perform segmentation and of

306
00:13:15,610 --> 00:13:19,090
course if you have to if you receive

307
00:13:17,440 --> 00:13:21,700
segmented packets then you have to

308
00:13:19,090 --> 00:13:24,670
assemble them before going deeper

309
00:13:21,700 --> 00:13:29,440
analyzing at the upper layers of the

310
00:13:24,670 --> 00:13:32,589
protocols and this shows that if there

311
00:13:29,440 --> 00:13:35,140
is a chunk type of type data check it

312
00:13:32,590 --> 00:13:37,480
won't do anything particularly it won't

313
00:13:35,140 --> 00:13:40,240
verify any of the fields that are used

314
00:13:37,480 --> 00:13:44,200
in the reassembly process which means

315
00:13:40,240 --> 00:13:46,300
that if you send a segment using HTTP

316
00:13:44,200 --> 00:13:48,310
the result is that the cheek a player

317
00:13:46,300 --> 00:13:50,380
will try to analyze it and it will fail

318
00:13:48,310 --> 00:13:53,260
because it's just a portion of the

319
00:13:50,380 --> 00:13:54,880
regular packet and it will drop the

320
00:13:53,260 --> 00:13:56,319
packet and when dropping the packet

321
00:13:54,880 --> 00:14:00,189
you'll do say okay let it go because I

322
00:13:56,320 --> 00:14:02,650
can't analyze this so let it go and of

323
00:14:00,190 --> 00:14:06,940
course at the very end of the very far

324
00:14:02,650 --> 00:14:08,590
end of the communication channel the

325
00:14:06,940 --> 00:14:10,780
equipment that will receive these

326
00:14:08,590 --> 00:14:12,700
fragments or these segments will be able

327
00:14:10,780 --> 00:14:15,010
to reassemble them and they will have

328
00:14:12,700 --> 00:14:18,730
their malicious effect so it's a good

329
00:14:15,010 --> 00:14:21,460
way to evade detection next that now

330
00:14:18,730 --> 00:14:23,980
that we have seen HTTP on IP we will not

331
00:14:21,460 --> 00:14:25,750
go over and three-way because there was

332
00:14:23,980 --> 00:14:29,980
nothing very interesting to say there

333
00:14:25,750 --> 00:14:31,900
and we'll move on to SCP SCP as you know

334
00:14:29,980 --> 00:14:34,600
and as I've seen you at the beginning is

335
00:14:31,900 --> 00:14:36,250
a legacy as a seven protocol so from now

336
00:14:34,600 --> 00:14:41,740
what I will be talking about may be

337
00:14:36,250 --> 00:14:45,850
applicable to some ss7 products or world

338
00:14:41,740 --> 00:14:48,700
also as CCP was built on top of MTP to

339
00:14:45,850 --> 00:14:50,170
to extend MTP routine because MTP is a

340
00:14:48,700 --> 00:14:52,660
routing system that is only based on

341
00:14:50,170 --> 00:14:55,270
point code and using sccp you had more

342
00:14:52,660 --> 00:14:58,209
information like subsystem number and

343
00:14:55,270 --> 00:15:01,900
global title that can be used to route

344
00:14:58,210 --> 00:15:03,580
messages smartly a global title for

345
00:15:01,900 --> 00:15:07,270
those who don't know is simply a phone

346
00:15:03,580 --> 00:15:09,400
number and this is how nodes in a mobile

347
00:15:07,270 --> 00:15:11,530
network addressed using their mobile

348
00:15:09,400 --> 00:15:12,439
phone number like every other mobile

349
00:15:11,530 --> 00:15:17,910
phone number

350
00:15:12,440 --> 00:15:20,100
and of course as we talk about IP SCTP

351
00:15:17,910 --> 00:15:23,130
fragmentation and segmentation issues

352
00:15:20,100 --> 00:15:25,230
there is the same at HTTP level why you

353
00:15:23,130 --> 00:15:28,170
could ask because in the legacy as a

354
00:15:25,230 --> 00:15:30,690
seven stack the way to send big message

355
00:15:28,170 --> 00:15:32,790
was to fragment them and this

356
00:15:30,690 --> 00:15:36,480
fragmentation process was implemented at

357
00:15:32,790 --> 00:15:38,849
the sccp level so now back to 6:1 we

358
00:15:36,480 --> 00:15:44,300
have three layers where we could perform

359
00:15:38,850 --> 00:15:44,300
segmentation is IP HTTP and sccp two

360
00:15:44,450 --> 00:15:49,500
tasks that we expect from an sa-7

361
00:15:47,250 --> 00:15:51,540
firewall is to retrieve the code and

362
00:15:49,500 --> 00:15:54,150
color addresses to be able to verify

363
00:15:51,540 --> 00:15:56,189
that the global titles have the right to

364
00:15:54,150 --> 00:15:59,400
communicate at the HTTP level and

365
00:15:56,190 --> 00:16:02,820
potentially block global titles that are

366
00:15:59,400 --> 00:16:04,650
known to produce bad traffic and next we

367
00:16:02,820 --> 00:16:07,080
also want to assess the fragmentation

368
00:16:04,650 --> 00:16:07,770
and the reassembly that is perform at

369
00:16:07,080 --> 00:16:11,040
sccp

370
00:16:07,770 --> 00:16:13,920
using x udg fragments so let's go on

371
00:16:11,040 --> 00:16:16,800
before being able to retrieve the color

372
00:16:13,920 --> 00:16:19,260
and the Kali addresses you have to first

373
00:16:16,800 --> 00:16:21,990
pass the message and here is an example

374
00:16:19,260 --> 00:16:24,210
of a sccp message there is a very

375
00:16:21,990 --> 00:16:26,220
strange thing here that are called

376
00:16:24,210 --> 00:16:28,770
follower pointer in the message you have

377
00:16:26,220 --> 00:16:31,350
bytes that will be used to offset also

378
00:16:28,770 --> 00:16:34,800
part of the message right the arrows on

379
00:16:31,350 --> 00:16:36,960
the left of the block and this is

380
00:16:34,800 --> 00:16:38,640
something that is kind of weird and is

381
00:16:36,960 --> 00:16:42,180
something that people can get

382
00:16:38,640 --> 00:16:44,160
implemented roam and perhaps you get it

383
00:16:42,180 --> 00:16:47,219
but of course people implemented wrong

384
00:16:44,160 --> 00:16:49,650
in some cases this is kind of you GT

385
00:16:47,220 --> 00:16:51,180
message and the code is retrieved using

386
00:16:49,650 --> 00:16:55,050
the offset sccp

387
00:16:51,180 --> 00:16:56,489
square bracket - and this way you can

388
00:16:55,050 --> 00:16:58,949
see that there are absolutely no

389
00:16:56,490 --> 00:17:01,860
verification at a platform so we can

390
00:16:58,950 --> 00:17:04,050
basically make the cold pointer point

391
00:17:01,860 --> 00:17:07,680
outside of the sccp received message

392
00:17:04,050 --> 00:17:09,510
here the sccp square bracket - is only

393
00:17:07,680 --> 00:17:14,210
an octet which means that we have at

394
00:17:09,510 --> 00:17:16,560
most from 0 to 256 byte of displacement

395
00:17:14,210 --> 00:17:19,620
so we cannot make anything of this but

396
00:17:16,560 --> 00:17:20,849
using another type of HTTP message which

397
00:17:19,619 --> 00:17:23,678
is called Lu

398
00:17:20,849 --> 00:17:24,099
t-then the length is not on a single

399
00:17:23,679 --> 00:17:26,559
bite

400
00:17:24,099 --> 00:17:30,189
but now the length is on two bites which

401
00:17:26,559 --> 00:17:33,700
means that from zero to two five six we

402
00:17:30,190 --> 00:17:36,330
have moved to zero to something like six

403
00:17:33,700 --> 00:17:39,309
five five three six bites of

404
00:17:36,330 --> 00:17:42,370
displacement which means that now we can

405
00:17:39,309 --> 00:17:44,559
access to some memory area that we are

406
00:17:42,370 --> 00:17:46,418
not allowed to access and cause a denial

407
00:17:44,559 --> 00:17:50,889
of service by crashing the process this

408
00:17:46,419 --> 00:17:53,100
time okay so now let's move on we'll be

409
00:17:50,890 --> 00:17:56,380
talking about the color and called

410
00:17:53,100 --> 00:17:58,570
addresses you remember that we talked

411
00:17:56,380 --> 00:18:00,549
about point cut subsystem numbers and

412
00:17:58,570 --> 00:18:02,740
global titles these are all the

413
00:18:00,549 --> 00:18:04,559
different extension that were brought by

414
00:18:02,740 --> 00:18:07,720
sccp

415
00:18:04,559 --> 00:18:09,668
there is a way there is a bit field in

416
00:18:07,720 --> 00:18:11,740
order to know what kind of information

417
00:18:09,669 --> 00:18:16,299
is contained into the addresses at the

418
00:18:11,740 --> 00:18:18,039
sccp level and of course treating this

419
00:18:16,299 --> 00:18:20,350
beet field is a little bit difficult and

420
00:18:18,039 --> 00:18:23,529
some implementations got it wrong which

421
00:18:20,350 --> 00:18:26,110
means that in this case the process UDT

422
00:18:23,529 --> 00:18:28,779
message will try to guess correctly

423
00:18:26,110 --> 00:18:32,949
calculate but the calculation was not

424
00:18:28,779 --> 00:18:34,899
correct and the computed GT size is

425
00:18:32,950 --> 00:18:36,760
negative why because of the bit fields

426
00:18:34,899 --> 00:18:40,229
that we have seen before and there was a

427
00:18:36,760 --> 00:18:43,629
bug in the implementation so now that

428
00:18:40,230 --> 00:18:45,820
belief GT size is negative the next

429
00:18:43,630 --> 00:18:47,500
point is to watch that when processing

430
00:18:45,820 --> 00:18:52,450
the calling and retrieving the digits of

431
00:18:47,500 --> 00:18:55,450
the number this size is given as lengths

432
00:18:52,450 --> 00:18:57,429
of variable length array we'll dig in

433
00:18:55,450 --> 00:18:59,890
the next slide to see what happens and

434
00:18:57,429 --> 00:19:03,610
next this array is filled with the

435
00:18:59,890 --> 00:19:06,130
digits from the message right there what

436
00:19:03,610 --> 00:19:08,049
happens that digit is allocated on the

437
00:19:06,130 --> 00:19:10,179
stack why because it is a stack variable

438
00:19:08,049 --> 00:19:13,690
and the size is dynamic so you can't

439
00:19:10,179 --> 00:19:15,010
know in advance from the the quantity

440
00:19:13,690 --> 00:19:16,840
from which you have to subtract the

441
00:19:15,010 --> 00:19:19,480
stack pointer to be able to know the

442
00:19:16,840 --> 00:19:21,428
digits pointer and of course when

443
00:19:19,480 --> 00:19:23,260
everything works fine size is positive

444
00:19:21,429 --> 00:19:25,690
which means that you subtract a positive

445
00:19:23,260 --> 00:19:28,270
number from the stack which means that

446
00:19:25,690 --> 00:19:29,280
digit is effectively above the rest of

447
00:19:28,270 --> 00:19:31,830
the stack

448
00:19:29,280 --> 00:19:34,560
if you give a negative number what

449
00:19:31,830 --> 00:19:36,750
happens that digits is not when you

450
00:19:34,560 --> 00:19:38,820
subtract a negative number in fact you

451
00:19:36,750 --> 00:19:41,730
add something to the stack and then

452
00:19:38,820 --> 00:19:44,280
digits will point not above the stack

453
00:19:41,730 --> 00:19:46,050
but below the stack and below the stack

454
00:19:44,280 --> 00:19:48,930
we know that the sensitive information

455
00:19:46,050 --> 00:19:52,320
like the safe friend pointer or the safe

456
00:19:48,930 --> 00:19:55,020
program counter which will allow then an

457
00:19:52,320 --> 00:19:57,450
attacker to interfere with the site

458
00:19:55,020 --> 00:19:59,580
values and we direct the execution flow

459
00:19:57,450 --> 00:20:04,650
and two interesting function that you

460
00:19:59,580 --> 00:20:06,510
might be able to know we have retrieved

461
00:20:04,650 --> 00:20:08,370
caller and callee were able to filter

462
00:20:06,510 --> 00:20:10,560
out messages based on these values and

463
00:20:08,370 --> 00:20:14,580
now we'll dig into the sccp

464
00:20:10,560 --> 00:20:16,560
segmenting and reassembly this is an

465
00:20:14,580 --> 00:20:19,169
extract from the itu-t document which is

466
00:20:16,560 --> 00:20:22,139
a very big and maybe a little bit boring

467
00:20:19,170 --> 00:20:24,480
document but in this case implementation

468
00:20:22,140 --> 00:20:28,380
a strictly follow what is highlighted

469
00:20:24,480 --> 00:20:31,620
here in green and they take here every

470
00:20:28,380 --> 00:20:33,720
acute message they verify that when they

471
00:20:31,620 --> 00:20:36,570
concatenate the different fragments they

472
00:20:33,720 --> 00:20:40,320
don't overflow the big buffer on the top

473
00:20:36,570 --> 00:20:43,409
and this is fine and once they see a

474
00:20:40,320 --> 00:20:45,750
message with the N bit set to zero then

475
00:20:43,410 --> 00:20:48,240
after adding concatenated it to the

476
00:20:45,750 --> 00:20:49,920
buffer they will write it into another

477
00:20:48,240 --> 00:20:51,780
buffer which is a thicker buffer to

478
00:20:49,920 --> 00:20:55,530
perform TCAP decoding the upper layer

479
00:20:51,780 --> 00:20:57,690
above sccp and there is something wrong

480
00:20:55,530 --> 00:21:00,240
here because the buffer initially was

481
00:20:57,690 --> 00:21:02,160
okay but the destination buffer is much

482
00:21:00,240 --> 00:21:04,410
smaller that the big buffer that we have

483
00:21:02,160 --> 00:21:07,440
concatenated and we assemble the

484
00:21:04,410 --> 00:21:10,350
fragments into which means that in

485
00:21:07,440 --> 00:21:13,830
ballad 3 we have another flow and we

486
00:21:10,350 --> 00:21:15,330
will overflow the smaller buffer so with

487
00:21:13,830 --> 00:21:17,520
this we can perform a denial of service

488
00:21:15,330 --> 00:21:20,820
but there's more because the part that

489
00:21:17,520 --> 00:21:22,830
was either in fact is the head of a

490
00:21:20,820 --> 00:21:24,899
linkedlist which means that by

491
00:21:22,830 --> 00:21:27,510
overflowing smaller buffer we could

492
00:21:24,900 --> 00:21:29,430
overflow those two pointers here and we

493
00:21:27,510 --> 00:21:32,730
could set them to arbitrary values and

494
00:21:29,430 --> 00:21:36,090
when you unlink a cell from this list

495
00:21:32,730 --> 00:21:37,860
and you have mangled pointers attacker

496
00:21:36,090 --> 00:21:40,409
control pointers then you can perform

497
00:21:37,860 --> 00:21:42,750
arbitrary right into the memory of the

498
00:21:40,410 --> 00:21:45,030
process this one was

499
00:21:42,750 --> 00:21:48,270
in the kernel module in Linux kernel

500
00:21:45,030 --> 00:21:50,580
there was no K SLR which means that you

501
00:21:48,270 --> 00:21:53,070
able to predict the addresses in the BSS

502
00:21:50,580 --> 00:21:55,439
section so you able to know exactly you

503
00:21:53,070 --> 00:21:56,580
able to first to put arbitrary content

504
00:21:55,440 --> 00:21:58,200
into the memory and to know the

505
00:21:56,580 --> 00:22:01,168
addresses that will be used and you are

506
00:21:58,200 --> 00:22:03,240
also able to write with wherever in the

507
00:22:01,169 --> 00:22:04,770
memory you want to write so basically

508
00:22:03,240 --> 00:22:07,890
you can turn this into remote code

509
00:22:04,770 --> 00:22:12,750
execution by via arbitrary right into

510
00:22:07,890 --> 00:22:14,580
the kernel memory and next we'll have a

511
00:22:12,750 --> 00:22:17,940
look at T cap and map I'm sorry because

512
00:22:14,580 --> 00:22:20,428
I'm literally clicked checkup and Napa

513
00:22:17,940 --> 00:22:23,220
is very similar because they shall one

514
00:22:20,429 --> 00:22:27,750
thing they are specified in s and one

515
00:22:23,220 --> 00:22:29,520
and they are anchored in bear usually

516
00:22:27,750 --> 00:22:31,440
what you expect from s and one is to

517
00:22:29,520 --> 00:22:34,110
shield you from programming ly because

518
00:22:31,440 --> 00:22:35,610
usually you take the specification you

519
00:22:34,110 --> 00:22:37,139
generate C code based on the

520
00:22:35,610 --> 00:22:39,000
specification using a nice on one

521
00:22:37,140 --> 00:22:41,190
compiler and then you generate the

522
00:22:39,000 --> 00:22:43,049
machine code so if the specification is

523
00:22:41,190 --> 00:22:44,880
okay and of course it is then it will

524
00:22:43,049 --> 00:22:50,059
generate correct see and correct machine

525
00:22:44,880 --> 00:22:53,090
code but now the problem is that how you

526
00:22:50,059 --> 00:22:55,649
use s and one that are correct correct

527
00:22:53,090 --> 00:22:57,658
functions generated for passing decoding

528
00:22:55,650 --> 00:22:59,370
and coding and of course there will be

529
00:22:57,659 --> 00:23:02,130
some problem in the way that you

530
00:22:59,370 --> 00:23:03,870
interact with those safe functions at

531
00:23:02,130 --> 00:23:05,909
the ticket level we have to retrieve the

532
00:23:03,870 --> 00:23:08,039
application context name why because it

533
00:23:05,909 --> 00:23:10,470
allows you to correctly decode and

534
00:23:08,039 --> 00:23:13,230
verify the map message that is above T

535
00:23:10,470 --> 00:23:15,600
cap so the ss7 firewall has to retrieve

536
00:23:13,230 --> 00:23:17,190
this information and at the map litter

537
00:23:15,600 --> 00:23:20,219
there are two things that are important

538
00:23:17,190 --> 00:23:21,990
it's the opcode to know the precise

539
00:23:20,220 --> 00:23:24,450
operation that will be done using this

540
00:23:21,990 --> 00:23:26,039
message and of course the parameters of

541
00:23:24,450 --> 00:23:28,140
this message because you want to verify

542
00:23:26,039 --> 00:23:31,260
some parameters are correct and career

543
00:23:28,140 --> 00:23:34,320
ins with the other layers of the message

544
00:23:31,260 --> 00:23:37,110
and the first vulnerability that we have

545
00:23:34,320 --> 00:23:39,178
found is that retrieving the application

546
00:23:37,110 --> 00:23:41,610
context name is fine but then it will be

547
00:23:39,179 --> 00:23:43,700
stored in a smaller variable here we

548
00:23:41,610 --> 00:23:46,830
have only eight bytes whereas the length

549
00:23:43,700 --> 00:23:48,750
ACN in the message is attacker control

550
00:23:46,830 --> 00:23:50,490
and can be arbitrarily long almost

551
00:23:48,750 --> 00:23:52,679
because there are some limits due to the

552
00:23:50,490 --> 00:23:56,039
way that SN 1 encodes lengths into bear

553
00:23:52,679 --> 00:23:58,859
but anyway so using this one we can

554
00:23:56,039 --> 00:24:02,340
yet eruption and successfully again code

555
00:23:58,859 --> 00:24:04,710
execution and the equipment the next one

556
00:24:02,340 --> 00:24:06,149
is very interesting too because it's a

557
00:24:04,710 --> 00:24:09,119
failure to understand how a San Juan

558
00:24:06,149 --> 00:24:10,949
works you remember about the up code

559
00:24:09,119 --> 00:24:13,320
that we talked about is an integral

560
00:24:10,950 --> 00:24:15,779
value and to be able to process messages

561
00:24:13,320 --> 00:24:18,629
correctly the implementation take the

562
00:24:15,779 --> 00:24:20,460
opcode and then perform a look up in the

563
00:24:18,629 --> 00:24:23,369
table of in an array of function

564
00:24:20,460 --> 00:24:25,470
pointers did you verify that the OP code

565
00:24:23,369 --> 00:24:27,988
is not bigger than the array size and

566
00:24:25,470 --> 00:24:29,159
the verify you saw that there is

567
00:24:27,989 --> 00:24:30,929
something to do meaning that the

568
00:24:29,159 --> 00:24:34,159
function pointer at this offset is not

569
00:24:30,929 --> 00:24:36,299
no but what they failed to do is that

570
00:24:34,159 --> 00:24:40,499
they failed to think about the fact that

571
00:24:36,299 --> 00:24:43,049
s and one can have a sign integral which

572
00:24:40,499 --> 00:24:46,799
means that of course the OP code will

573
00:24:43,049 --> 00:24:48,690
not have a flow the maximum size of the

574
00:24:46,799 --> 00:24:50,609
array but it can be negative and it can

575
00:24:48,690 --> 00:24:52,349
be as negative as the attacker want

576
00:24:50,609 --> 00:24:56,460
which means that in this case you will

577
00:24:52,349 --> 00:24:58,769
be peeking into memory several several

578
00:24:56,460 --> 00:25:00,840
several thousand of bytes before the map

579
00:24:58,769 --> 00:25:03,389
up code and you might be able to get a

580
00:25:00,840 --> 00:25:05,369
way to put some function that you want

581
00:25:03,389 --> 00:25:07,559
to execute and then execute the function

582
00:25:05,369 --> 00:25:09,988
pointer so this way you can make an

583
00:25:07,559 --> 00:25:15,479
arbitrary function call into the ss7

584
00:25:09,989 --> 00:25:19,379
firewall key takeaways all these

585
00:25:15,479 --> 00:25:21,539
vulnerabilities are either IPS CTP or s7

586
00:25:19,379 --> 00:25:24,119
based the Knights apply to other as a

587
00:25:21,539 --> 00:25:27,539
seven products we might think about 5g

588
00:25:24,119 --> 00:25:30,149
making disappear those weaknesses which

589
00:25:27,539 --> 00:25:31,889
is probably true but we also have to

590
00:25:30,149 --> 00:25:34,559
live with legacy network because we can

591
00:25:31,889 --> 00:25:37,199
just disconnect them up or off there are

592
00:25:34,559 --> 00:25:42,989
many many many services that rely on 2g

593
00:25:37,200 --> 00:25:44,909
or other generations what is very bad

594
00:25:42,989 --> 00:25:47,279
for those products that they have inner

595
00:25:44,909 --> 00:25:50,340
abilities and hardening measures were

596
00:25:47,279 --> 00:25:52,139
not implemented let's say at all which

597
00:25:50,340 --> 00:25:55,199
means that if you find something then

598
00:25:52,139 --> 00:25:59,998
you can exploit it and run code and do

599
00:25:55,200 --> 00:26:03,470
sensitive equipment I believe that I'm

600
00:25:59,999 --> 00:26:03,470
nearly finished with my talk

601
00:26:06,600 --> 00:26:09,149
[Applause]

