1
00:00:00,030 --> 00:00:05,190
oh good afternoon welcome to two years

2
00:00:03,120 --> 00:00:07,109
lessons from two years of crypto audits

3
00:00:05,190 --> 00:00:10,260
we're in the Jasmine room

4
00:00:07,109 --> 00:00:13,049
this is jean-philippe on his own a

5
00:00:10,260 --> 00:00:14,730
couple of brief notes for you stop by

6
00:00:13,049 --> 00:00:17,640
the business hall located in Mandalay

7
00:00:14,730 --> 00:00:19,529
Bay Oceanside and shoreline ballrooms on

8
00:00:17,640 --> 00:00:22,830
level two during the day and for the

9
00:00:19,529 --> 00:00:24,930
Welcome Reception tonight at 5:30 the

10
00:00:22,830 --> 00:00:27,240
blackhat Arsenal is in the business hall

11
00:00:24,930 --> 00:00:29,160
in level two as well and also this

12
00:00:27,240 --> 00:00:34,320
evening please join us for the pony

13
00:00:29,160 --> 00:00:36,300
awards and Lagoon j KL at 6:30 this

14
00:00:34,320 --> 00:00:38,430
evening a couple of things just out of

15
00:00:36,300 --> 00:00:40,110
respect for your fellow attendees please

16
00:00:38,430 --> 00:00:42,930
make sure that your cell phones are on

17
00:00:40,110 --> 00:00:44,879
vibrate if you need to take a call

18
00:00:42,930 --> 00:00:47,789
please step out into the into the

19
00:00:44,879 --> 00:00:49,890
hallway before you do that and with that

20
00:00:47,789 --> 00:00:54,270
and I think that I'd like to go ahead

21
00:00:49,890 --> 00:00:58,910
and introduce jean-philippe please thank

22
00:00:54,270 --> 00:00:58,910
you Chris hi everyone thank you for

23
00:01:04,409 --> 00:01:06,469
you

24
00:01:26,130 --> 00:01:31,289
is there any crypto people in the room

25
00:01:28,640 --> 00:01:35,330
great for people it's only blockchain

26
00:01:31,290 --> 00:01:37,799
people not exactly the same okay

27
00:01:35,330 --> 00:01:39,450
who in Durham is doing security audit

28
00:01:37,799 --> 00:01:43,800
Qatar is not necessary crypto but modern

29
00:01:39,450 --> 00:01:46,530
God audits okay quite a few all right

30
00:01:43,800 --> 00:01:48,479
so quick introduction about me first it

31
00:01:46,530 --> 00:01:50,580
doesn't work like this so I've been

32
00:01:48,479 --> 00:01:53,700
doing crypto for wine maybe you know

33
00:01:50,580 --> 00:01:56,789
before it was cool since maybe 2005-2006

34
00:01:53,700 --> 00:01:58,860
so back then you said crypto to a girl

35
00:01:56,790 --> 00:02:01,830
she was looking at you yeah but now you

36
00:01:58,860 --> 00:02:03,479
do crypto you're cool guy and nice so I

37
00:02:01,830 --> 00:02:07,200
live in a small country called

38
00:02:03,479 --> 00:02:08,699
Switzerland and when I've talked about

39
00:02:07,200 --> 00:02:11,700
crypto several times at blackhat and

40
00:02:08,699 --> 00:02:13,500
always exciting to be here I'm working

41
00:02:11,700 --> 00:02:15,750
for Kooskia security so a big company

42
00:02:13,500 --> 00:02:17,880
with nature in Switzerland and an HQ in

43
00:02:15,750 --> 00:02:19,560
Phoenix Arizona and I'm also running a

44
00:02:17,880 --> 00:02:22,590
small company doing IT security and

45
00:02:19,560 --> 00:02:25,530
doing I'm doing security at Taurus which

46
00:02:22,590 --> 00:02:27,360
does digital asset blockchain custodial

47
00:02:25,530 --> 00:02:28,890
technology and I've wrote this small

48
00:02:27,360 --> 00:02:31,019
book but you cannot buy it I black out

49
00:02:28,890 --> 00:02:32,790
because it's already sold out but you

50
00:02:31,019 --> 00:02:35,820
may buy it the DEF CON if you go to Def

51
00:02:32,790 --> 00:02:38,609
Con okay so we talked about security

52
00:02:35,820 --> 00:02:41,910
audit so what what does it mean in our

53
00:02:38,610 --> 00:02:43,980
context so it's from internet some must

54
00:02:41,910 --> 00:02:46,200
be right definition it says the

55
00:02:43,980 --> 00:02:48,899
inspection or examination of something

56
00:02:46,200 --> 00:02:51,869
as a building to deter - safety

57
00:02:48,900 --> 00:02:53,549
efficiency all alike so we're not

58
00:02:51,870 --> 00:02:55,170
talking of audit in the sense you know

59
00:02:53,549 --> 00:02:56,760
of compliance audit where we you have a

60
00:02:55,170 --> 00:02:58,649
checklist and you check point by point

61
00:02:56,760 --> 00:03:01,440
and then either you're compliant or not

62
00:02:58,650 --> 00:03:04,829
so the secretary - no contest it's more

63
00:03:01,440 --> 00:03:08,910
an assessment security assessment of the

64
00:03:04,829 --> 00:03:11,010
code so what do we do concretely so we

65
00:03:08,910 --> 00:03:13,380
most of the time have to say we look at

66
00:03:11,010 --> 00:03:15,358
the code sometimes we look at

67
00:03:13,380 --> 00:03:16,320
specifications documents at architecture

68
00:03:15,359 --> 00:03:18,329
documentation

69
00:03:16,320 --> 00:03:20,760
sometimes you would try will have to

70
00:03:18,329 --> 00:03:22,680
match one specification against the code

71
00:03:20,760 --> 00:03:25,078
so the customer would give us one specs

72
00:03:22,680 --> 00:03:26,850
document maybe an academic paper or

73
00:03:25,079 --> 00:03:28,560
something that there were themselves and

74
00:03:26,850 --> 00:03:30,600
it would also give us the code and we

75
00:03:28,560 --> 00:03:33,120
would have to try to match the tooten

76
00:03:30,600 --> 00:03:36,560
find any discrepancy between between the

77
00:03:33,120 --> 00:03:38,970
two but yeah most of the time it's

78
00:03:36,560 --> 00:03:40,440
finding bugs in code

79
00:03:38,970 --> 00:03:41,910
in code that is doing some crypto

80
00:03:40,440 --> 00:03:42,990
functionality it might be for example in

81
00:03:41,910 --> 00:03:44,880
decay in the context of blocks and

82
00:03:42,990 --> 00:03:48,180
platform it might be a wallet

83
00:03:44,880 --> 00:03:51,299
application it might be very different

84
00:03:48,180 --> 00:03:53,250
stuff but common denominator is that

85
00:03:51,300 --> 00:03:56,640
it's using some let's say cryptographic

86
00:03:53,250 --> 00:03:58,890
components however the the bugs we find

87
00:03:56,640 --> 00:04:02,010
a few of these bugs are cryptographic

88
00:03:58,890 --> 00:04:04,079
bugs but have to say if you look at the

89
00:04:02,010 --> 00:04:05,370
reports we publish most of the bugs are

90
00:04:04,080 --> 00:04:07,740
not purely crypto bugs there are

91
00:04:05,370 --> 00:04:10,760
software bugs in crypto implementation

92
00:04:07,740 --> 00:04:13,550
but not necessarily purely crypto bugs

93
00:04:10,760 --> 00:04:15,810
so of course we don't do this for free

94
00:04:13,550 --> 00:04:18,000
this most of the time so we get paid for

95
00:04:15,810 --> 00:04:19,500
it so customer would talk to a sirki

96
00:04:18,000 --> 00:04:21,200
would you like to review our code and

97
00:04:19,500 --> 00:04:24,840
most of the time we say yes of course

98
00:04:21,200 --> 00:04:27,690
here's the coded price and and that's it

99
00:04:24,840 --> 00:04:29,640
we publish the report of course with the

100
00:04:27,690 --> 00:04:31,230
agreement of the customer so generally

101
00:04:29,640 --> 00:04:33,900
the customer will ask us for the

102
00:04:31,230 --> 00:04:35,010
permission to publish the report so from

103
00:04:33,900 --> 00:04:38,340
the perspective of the author the

104
00:04:35,010 --> 00:04:40,620
customer is let's say a sign of

105
00:04:38,340 --> 00:04:43,530
transparency that they want to show that

106
00:04:40,620 --> 00:04:45,720
have been audited so in very very few

107
00:04:43,530 --> 00:04:47,400
cases we have the feeling that you know

108
00:04:45,720 --> 00:04:49,169
they're just interested in having in

109
00:04:47,400 --> 00:04:51,539
order publicity and say we've been

110
00:04:49,169 --> 00:04:53,849
audited by these guys in cholesky but

111
00:04:51,540 --> 00:04:55,919
maybe 90 95 percent of the time just

112
00:04:53,850 --> 00:04:58,290
from our perspective people genuinely

113
00:04:55,919 --> 00:05:00,539
want to improve the security posture to

114
00:04:58,290 --> 00:05:03,870
fix the bugs and already you know

115
00:05:00,540 --> 00:05:06,870
harness about it so yeah in many times

116
00:05:03,870 --> 00:05:08,850
we publish the reports and I have to say

117
00:05:06,870 --> 00:05:10,230
for blushin companies its more common

118
00:05:08,850 --> 00:05:11,820
for blockchain people than on blockchain

119
00:05:10,230 --> 00:05:13,680
people because they tend to be more

120
00:05:11,820 --> 00:05:15,960
transparent than other types of company

121
00:05:13,680 --> 00:05:17,310
so let me just quickly show you how this

122
00:05:15,960 --> 00:05:19,320
looks if you never seen this kind of

123
00:05:17,310 --> 00:05:23,669
reports are typically we would describe

124
00:05:19,320 --> 00:05:26,730
the thing we found the bug or issue we

125
00:05:23,669 --> 00:05:30,150
would have a small severity score so

126
00:05:26,730 --> 00:05:32,490
here is its medium we're not using CDSs

127
00:05:30,150 --> 00:05:34,620
most of the time so CVS is a standard

128
00:05:32,490 --> 00:05:37,200
specified way of defining severity

129
00:05:34,620 --> 00:05:39,510
ratings but it does not always apply to

130
00:05:37,200 --> 00:05:42,360
the thing we we do it doesn't always

131
00:05:39,510 --> 00:05:45,630
apply to crypto so that's why we usually

132
00:05:42,360 --> 00:05:46,620
have low medium high or informational

133
00:05:45,630 --> 00:05:49,169
severities

134
00:05:46,620 --> 00:05:51,300
so not only we describe the issue we

135
00:05:49,169 --> 00:05:52,248
found the alleged issue found but also

136
00:05:51,300 --> 00:05:54,409
the reckon

137
00:05:52,249 --> 00:05:56,569
edition what would suggest to do how to

138
00:05:54,409 --> 00:05:58,399
fix it if they want to fix it and then

139
00:05:56,569 --> 00:06:00,469
we bubble you send a report we share the

140
00:05:58,399 --> 00:06:01,579
report with a customer they look at it

141
00:06:00,469 --> 00:06:03,229
they tell us ok

142
00:06:01,579 --> 00:06:04,879
we acknowledge of Narva t we're going to

143
00:06:03,229 --> 00:06:06,349
fix it this way or sometimes they would

144
00:06:04,879 --> 00:06:08,329
just tell us okay guys you're wrong you

145
00:06:06,349 --> 00:06:11,569
misunderstood something and then we may

146
00:06:08,329 --> 00:06:14,059
or may not revise the severity and after

147
00:06:11,569 --> 00:06:16,939
the customer has passed our code we

148
00:06:14,059 --> 00:06:19,219
review the the patch and we write the

149
00:06:16,939 --> 00:06:22,299
status okay he does been fixed this way

150
00:06:19,219 --> 00:06:26,629
by doing this this kind of fun thing

151
00:06:22,299 --> 00:06:29,209
okay so the agenda for today is three

152
00:06:26,629 --> 00:06:32,119
three main parts the first one I will

153
00:06:29,209 --> 00:06:34,369
goes for a list of common bugs so just

154
00:06:32,119 --> 00:06:36,439
show you a piece of God and just to give

155
00:06:34,369 --> 00:06:39,079
you an idea of the kind of bugs we find

156
00:06:36,439 --> 00:06:40,819
and I try to pick some bugs that maybe

157
00:06:39,079 --> 00:06:43,009
one of the most common so the most

158
00:06:40,819 --> 00:06:46,039
common classes of bugs that we find in

159
00:06:43,009 --> 00:06:48,319
relatives so the names of the customers

160
00:06:46,039 --> 00:06:50,079
will be redacted but these come from

161
00:06:48,319 --> 00:06:53,029
real audits it's not made-up

162
00:06:50,079 --> 00:06:54,469
and the second part I will focus on rust

163
00:06:53,029 --> 00:06:58,159
on the rows programming language how

164
00:06:54,469 --> 00:07:00,649
many of you are writing rust code only

165
00:06:58,159 --> 00:07:02,688
I'm disappointed okay

166
00:07:00,649 --> 00:07:04,969
so you learn about rust that's a very

167
00:07:02,689 --> 00:07:07,299
nice language and the last part is maybe

168
00:07:04,969 --> 00:07:10,339
it's less technical is about reflecting

169
00:07:07,299 --> 00:07:12,349
after these two or three years what

170
00:07:10,339 --> 00:07:15,829
we've learned what we would recommend

171
00:07:12,349 --> 00:07:17,748
for federal deters maybe the Aerosmith

172
00:07:15,829 --> 00:07:20,239
made what we've learned what we also

173
00:07:17,749 --> 00:07:22,039
recommend for the customers so what you

174
00:07:20,239 --> 00:07:24,169
know you should ask an auditor when you

175
00:07:22,039 --> 00:07:26,659
want to your car to be edited and you

176
00:07:24,169 --> 00:07:30,229
several several ideas a Tejada when

177
00:07:26,659 --> 00:07:31,998
preparing this talk okay a small caveat

178
00:07:30,229 --> 00:07:34,068
so we're not here to make fun of

179
00:07:31,999 --> 00:07:37,489
developers a hard the hardest stupid bug

180
00:07:34,069 --> 00:07:38,959
bunch of idiots it's important to

181
00:07:37,489 --> 00:07:41,179
remember it's relatively easy to find

182
00:07:38,959 --> 00:07:44,479
bugs to look at someone else's code and

183
00:07:41,179 --> 00:07:46,188
find bugs but if you've been on the

184
00:07:44,479 --> 00:07:48,139
different door side you know how hard it

185
00:07:46,189 --> 00:07:50,779
is to build secure systems you know how

186
00:07:48,139 --> 00:07:53,389
hard it is to write secure code right

187
00:07:50,779 --> 00:07:56,179
bug-free code and if if you've used the

188
00:07:53,389 --> 00:07:59,629
crypto libraries or if you've written

189
00:07:56,179 --> 00:08:01,128
cryptographic primitive yourself you

190
00:07:59,629 --> 00:08:03,819
know how hard it is to get everything

191
00:08:01,129 --> 00:08:05,689
right you know I myself committed

192
00:08:03,819 --> 00:08:08,479
embarrassing bugs even

193
00:08:05,689 --> 00:08:10,309
Krypto so I know very well how it feels

194
00:08:08,479 --> 00:08:13,279
to you know when someone points out your

195
00:08:10,309 --> 00:08:14,869
your mistakes so the first one and

196
00:08:13,279 --> 00:08:17,119
please don't leave the room this is a

197
00:08:14,869 --> 00:08:19,099
skel but it's the only haskell example

198
00:08:17,119 --> 00:08:22,699
it's maybe not the more readable code

199
00:08:19,099 --> 00:08:24,829
but yeah so I don't know if you can can

200
00:08:22,699 --> 00:08:29,899
give you maybe ten seconds to look at at

201
00:08:24,829 --> 00:08:32,240
this code you you see a passphrase

202
00:08:29,899 --> 00:08:36,789
somewhere and I don't know if you can

203
00:08:32,240 --> 00:08:39,318
find the problem in this in this code

204
00:08:36,789 --> 00:08:48,350
let me find this the laser pointer it's

205
00:08:39,318 --> 00:08:51,319
here bigger one okay so if you look at

206
00:08:48,350 --> 00:08:55,610
this code youth read encrypt Church

207
00:08:51,319 --> 00:08:57,110
happily here so church happily it's a

208
00:08:55,610 --> 00:09:00,560
shorthand for ChaCha

209
00:08:57,110 --> 00:09:02,120
twenty poly starting off five it's an

210
00:09:00,560 --> 00:09:04,310
authenticated cypher it's a way to

211
00:09:02,120 --> 00:09:06,170
encrypt data and authenticating data at

212
00:09:04,310 --> 00:09:07,459
the same time so it's a combination of

213
00:09:06,170 --> 00:09:09,699
the church at twenty stream cipher in

214
00:09:07,459 --> 00:09:13,160
the police 1405 one-time Authenticator

215
00:09:09,699 --> 00:09:16,699
so it's calling this function with as

216
00:09:13,160 --> 00:09:19,639
first argument this other at nonce value

217
00:09:16,699 --> 00:09:22,579
and a passphrase and something else the

218
00:09:19,639 --> 00:09:25,129
data that's going to be encrypted so if

219
00:09:22,579 --> 00:09:27,979
you know how happily walks and or if you

220
00:09:25,129 --> 00:09:30,170
know how any such authenticated cipher

221
00:09:27,980 --> 00:09:32,449
works you know that most of the time it

222
00:09:30,170 --> 00:09:35,209
needs as additional input a value called

223
00:09:32,449 --> 00:09:36,740
unknowns or naívi and to be secure this

224
00:09:35,209 --> 00:09:38,809
value needs to be unique for each for

225
00:09:36,740 --> 00:09:41,180
every new message you encrypt now if you

226
00:09:38,809 --> 00:09:43,759
look up this value you see define here

227
00:09:41,180 --> 00:09:45,699
and it's hard-coded in the code to this

228
00:09:43,759 --> 00:09:48,709
circle for I don't know what comes from

229
00:09:45,699 --> 00:09:50,389
but anyway what will happen is at any

230
00:09:48,709 --> 00:09:52,430
time they encrypt a message they will

231
00:09:50,389 --> 00:09:54,110
use the same nonce and it's very bad

232
00:09:52,430 --> 00:09:56,388
because if you do this

233
00:09:54,110 --> 00:09:58,309
an attacker will be able to decrypt your

234
00:09:56,389 --> 00:10:01,910
message even though the cipher itself is

235
00:09:58,309 --> 00:10:03,829
very safe but the fact you know if you

236
00:10:01,910 --> 00:10:07,100
reuse the same notes then all your

237
00:10:03,829 --> 00:10:09,500
cipher texts become easy to decrypt to

238
00:10:07,100 --> 00:10:11,300
simplify so that's something that we

239
00:10:09,500 --> 00:10:15,079
found in major cryptocurrency well

240
00:10:11,300 --> 00:10:17,630
that's very very famous organization and

241
00:10:15,079 --> 00:10:20,000
it completely defeats the encryption and

242
00:10:17,630 --> 00:10:23,180
of course the fixed date but yeah

243
00:10:20,000 --> 00:10:26,690
relatively common type of bug the the

244
00:10:23,180 --> 00:10:29,779
second one so you probably know about

245
00:10:26,690 --> 00:10:31,490
the password hashing problem and also

246
00:10:29,779 --> 00:10:34,040
the password key derivation problem so

247
00:10:31,490 --> 00:10:37,070
password key derivation is when the

248
00:10:34,040 --> 00:10:39,230
secret is a password and when you derive

249
00:10:37,070 --> 00:10:41,149
a key from this password so you want to

250
00:10:39,230 --> 00:10:43,550
encrypt a message using a cryptographic

251
00:10:41,149 --> 00:10:44,930
key and you get this key from the

252
00:10:43,550 --> 00:10:46,579
password because you cannot use the

253
00:10:44,930 --> 00:10:49,279
password directly it's a variable size

254
00:10:46,579 --> 00:10:51,079
input so typically you would use a hash

255
00:10:49,279 --> 00:10:52,490
function a special type of hash function

256
00:10:51,079 --> 00:10:53,779
so do you can you guess what's the

257
00:10:52,490 --> 00:10:56,450
problem if you do this if you use the

258
00:10:53,779 --> 00:11:08,060
sha-256 hash function to get a key from

259
00:10:56,450 --> 00:11:09,560
a bus water yeah well the problem of

260
00:11:08,060 --> 00:11:11,630
course is the password has relatively

261
00:11:09,560 --> 00:11:13,819
low entropy is much easier to guess than

262
00:11:11,630 --> 00:11:16,250
an encryption key so a keys for example

263
00:11:13,820 --> 00:11:18,829
128-bit so you have 2 to the power 128

264
00:11:16,250 --> 00:11:20,240
possibilities in the case of passwords

265
00:11:18,829 --> 00:11:22,579
you have much fewer possibilities is

266
00:11:20,240 --> 00:11:24,890
much easier to crack a password if you

267
00:11:22,579 --> 00:11:26,540
have like a dictionary like professional

268
00:11:24,890 --> 00:11:27,769
password crackers have there's a very

269
00:11:26,540 --> 00:11:30,769
high chance that your password will be

270
00:11:27,769 --> 00:11:32,300
in the dictionary so and the hash

271
00:11:30,769 --> 00:11:34,130
function shot classic is very efficient

272
00:11:32,300 --> 00:11:35,779
which is good most of the time but if

273
00:11:34,130 --> 00:11:37,820
you hash paths quarter you don't want to

274
00:11:35,779 --> 00:11:39,610
use a fast hash function you want to use

275
00:11:37,820 --> 00:11:42,199
the hash function is as slow as possible

276
00:11:39,610 --> 00:11:44,720
to make the password cracking as hard as

277
00:11:42,199 --> 00:11:48,439
possible and as very common problem that

278
00:11:44,720 --> 00:11:50,690
we've seen in many many many many same

279
00:11:48,440 --> 00:11:53,029
applications so the right way to do it

280
00:11:50,690 --> 00:11:55,220
is not to use chat five six but it's to

281
00:11:53,029 --> 00:11:57,079
use something like pbkdf2 script on to

282
00:11:55,220 --> 00:11:58,880
be crypt where you have not only

283
00:11:57,079 --> 00:12:01,279
password but also an additional input

284
00:11:58,880 --> 00:12:03,410
called the salt and the point of a salt

285
00:12:01,279 --> 00:12:04,820
is to try to simulate a different hash

286
00:12:03,410 --> 00:12:06,769
function for every new password you're

287
00:12:04,820 --> 00:12:07,820
going to ash so use different hash

288
00:12:06,769 --> 00:12:09,620
function for every new password and

289
00:12:07,820 --> 00:12:11,420
means that you have to repeat the

290
00:12:09,620 --> 00:12:14,660
cracking effort for every new password

291
00:12:11,420 --> 00:12:18,560
that you're trying to to break okay

292
00:12:14,660 --> 00:12:21,980
I did this one again an obvious one so

293
00:12:18,560 --> 00:12:24,680
in many blocks and blocks and projects

294
00:12:21,980 --> 00:12:26,540
you so you know how it works you when

295
00:12:24,680 --> 00:12:28,040
you issue a transaction it's you know

296
00:12:26,540 --> 00:12:30,349
like signing a check so you have you

297
00:12:28,040 --> 00:12:31,910
issue digital signature so you sign the

298
00:12:30,350 --> 00:12:33,350
check you send a transaction saying I

299
00:12:31,910 --> 00:12:35,530
want to send decent

300
00:12:33,350 --> 00:12:38,300
of money to that address to that guy I

301
00:12:35,530 --> 00:12:39,530
knew yourself you have an address and

302
00:12:38,300 --> 00:12:42,589
typically this address is derived from

303
00:12:39,530 --> 00:12:44,030
your key from your public key you have a

304
00:12:42,590 --> 00:12:45,230
private key if you go from the private

305
00:12:44,030 --> 00:12:47,600
key to the public key and you go from

306
00:12:45,230 --> 00:12:49,940
the public key to the other s so what

307
00:12:47,600 --> 00:12:52,430
can go wrong so you can see it as just

308
00:12:49,940 --> 00:12:56,060
hashing the public key if we abstract

309
00:12:52,430 --> 00:12:57,800
this out now if your address is let's

310
00:12:56,060 --> 00:13:02,229
say 64-bit

311
00:12:57,800 --> 00:13:04,310
can you imagine what what can happen

312
00:13:02,230 --> 00:13:06,050
let's give you 10 seconds to think about

313
00:13:04,310 --> 00:13:11,869
it and then I will give you the audience

314
00:13:06,050 --> 00:13:13,459
were so you heard what the the notion of

315
00:13:11,870 --> 00:13:16,760
collision collision is when you have

316
00:13:13,460 --> 00:13:19,130
different values different inputs that

317
00:13:16,760 --> 00:13:20,810
give the same value when hashed with

318
00:13:19,130 --> 00:13:22,910
some hash function so we've had

319
00:13:20,810 --> 00:13:24,680
collisions for md5 that's why md5 is not

320
00:13:22,910 --> 00:13:27,620
a safe function to use we've had

321
00:13:24,680 --> 00:13:28,760
collisions for Shaw and that's why I say

322
00:13:27,620 --> 00:13:31,220
one is not really nice either

323
00:13:28,760 --> 00:13:33,760
so in this case there was a very

324
00:13:31,220 --> 00:13:36,560
actively big cryptocurrency in the top

325
00:13:33,760 --> 00:13:39,890
in the top 20 at the time the top 20 in

326
00:13:36,560 --> 00:13:42,349
terms of market capitalization and they

327
00:13:39,890 --> 00:13:43,580
were using 60 64-bit addresses so it

328
00:13:42,350 --> 00:13:47,120
means that you could easily define

329
00:13:43,580 --> 00:13:50,000
different keys different accounts that

330
00:13:47,120 --> 00:13:51,740
wouldn't map to the same address so have

331
00:13:50,000 --> 00:13:53,030
one account another account but you

332
00:13:51,740 --> 00:13:54,200
can't have your trade the same other

333
00:13:53,030 --> 00:13:57,560
eyes are the same they're the same

334
00:13:54,200 --> 00:13:58,760
account what you can also do if you find

335
00:13:57,560 --> 00:14:01,069
someone if you know someone else's

336
00:13:58,760 --> 00:14:02,689
address then you can compute what we

337
00:14:01,070 --> 00:14:04,610
call a pre-image you can try to find a

338
00:14:02,690 --> 00:14:07,820
private key a public key that give the

339
00:14:04,610 --> 00:14:10,250
same address by using this

340
00:14:07,820 --> 00:14:12,920
cryptocurrencies hash function and this

341
00:14:10,250 --> 00:14:17,630
will cost on average around 2 to the

342
00:14:12,920 --> 00:14:19,729
power 6 t3 if operations to the power 63

343
00:14:17,630 --> 00:14:21,230
invocations of the hash function so in

344
00:14:19,730 --> 00:14:23,750
the cryptographic when we when we talk

345
00:14:21,230 --> 00:14:25,420
you know when we quantify security we

346
00:14:23,750 --> 00:14:29,150
usually consider that you need at least

347
00:14:25,420 --> 00:14:31,729
120 128-bit security to be safe today so

348
00:14:29,150 --> 00:14:34,610
128-bit security means that to break the

349
00:14:31,730 --> 00:14:37,220
system unit of of the order of 2 to the

350
00:14:34,610 --> 00:14:39,680
power 128 operations a novel 2 to the

351
00:14:37,220 --> 00:14:42,470
power 60s for or 2 to the power 63 it's

352
00:14:39,680 --> 00:14:44,000
the square root of this number it's much

353
00:14:42,470 --> 00:14:46,520
easier to break so to give you just an

354
00:14:44,000 --> 00:14:47,160
example analogy the death cipher that

355
00:14:46,520 --> 00:14:50,699
was this

356
00:14:47,160 --> 00:14:53,279
in the 70s which you we don't use today

357
00:14:50,699 --> 00:14:55,769
is a security of 64 bits while actually

358
00:14:53,279 --> 00:14:58,189
56 bit and that's why we don't we don't

359
00:14:55,769 --> 00:15:00,509
use it otherwise relatively safe and

360
00:14:58,190 --> 00:15:03,060
what happened is that if you could find

361
00:15:00,509 --> 00:15:04,589
the same another key that map's the same

362
00:15:03,060 --> 00:15:07,768
address as a victim then you could steal

363
00:15:04,589 --> 00:15:09,120
all the victims money you could

364
00:15:07,769 --> 00:15:12,569
completely hijacked their account so

365
00:15:09,120 --> 00:15:14,250
issue checks on their behalf and you can

366
00:15:12,569 --> 00:15:15,290
even yet prevent them from having access

367
00:15:14,250 --> 00:15:17,579
to their accounts or

368
00:15:15,290 --> 00:15:20,040
spoiler the good cryptocurrency was

369
00:15:17,579 --> 00:15:25,290
liske lis k and I don't think that fixed

370
00:15:20,040 --> 00:15:26,730
it okay the first one that's very very

371
00:15:25,290 --> 00:15:27,930
classical one so you see the penguin if

372
00:15:26,730 --> 00:15:31,649
you know if you know this penguin you

373
00:15:27,930 --> 00:15:34,229
know what this bug is about so when you

374
00:15:31,649 --> 00:15:35,699
encrypt it's a yes a yes is the the

375
00:15:34,230 --> 00:15:38,370
block cipher standard Bob cipher which

376
00:15:35,699 --> 00:15:39,990
is you know very safe in itself but are

377
00:15:38,370 --> 00:15:43,560
different ways to use it so when you use

378
00:15:39,990 --> 00:15:46,170
a block cipher to process a message of

379
00:15:43,560 --> 00:15:47,729
arbitrary size you need to use what we

380
00:15:46,170 --> 00:15:49,050
call an apportioned model so the

381
00:15:47,730 --> 00:15:51,449
approach on mode is the way you're going

382
00:15:49,050 --> 00:15:54,508
to combine your block cipher to encrypt

383
00:15:51,449 --> 00:15:56,939
different blocks and the simplest way is

384
00:15:54,509 --> 00:15:59,339
to please to split the message into

385
00:15:56,939 --> 00:16:03,120
number of blocks and to encrypt each

386
00:15:59,339 --> 00:16:04,620
block individually now the problem we if

387
00:16:03,120 --> 00:16:07,019
you do it is that if you have two

388
00:16:04,620 --> 00:16:08,550
identical blocks then the ciphertext

389
00:16:07,019 --> 00:16:10,410
block the encrypted block will be the

390
00:16:08,550 --> 00:16:12,630
same and there's a few other problem but

391
00:16:10,410 --> 00:16:13,709
the absolute is that it's bad and that's

392
00:16:12,630 --> 00:16:16,079
where you can see the penguin if you

393
00:16:13,709 --> 00:16:17,729
encrypt a penguin and we've seen this in

394
00:16:16,079 --> 00:16:19,469
a again anonymous anonymous

395
00:16:17,730 --> 00:16:22,230
cryptocurrency wallet that I'm not going

396
00:16:19,470 --> 00:16:25,199
to name but you may you may guess it and

397
00:16:22,230 --> 00:16:26,939
it's like really big in a mistake I mean

398
00:16:25,199 --> 00:16:28,560
is if you learn about crypto you're on

399
00:16:26,939 --> 00:16:31,110
design in the first 20 minutes of your

400
00:16:28,560 --> 00:16:33,420
class and you still we still find this

401
00:16:31,110 --> 00:16:39,269
kind of bug so what is the solution

402
00:16:33,420 --> 00:16:41,579
instead of doing ECB mode CBC or GCM or

403
00:16:39,269 --> 00:16:44,220
something else and then again if you CBC

404
00:16:41,579 --> 00:16:45,628
you are going to use an IV as an

405
00:16:44,220 --> 00:16:48,089
additional input and is IV must be

406
00:16:45,629 --> 00:16:49,800
random and if use GCM AES in the same

407
00:16:48,089 --> 00:16:51,660
mode you need to use a unique IV

408
00:16:49,800 --> 00:16:56,399
otherwise it's even worse than the ECB

409
00:16:51,660 --> 00:16:58,589
yes the crypto is harder a lot of both

410
00:16:56,399 --> 00:17:00,149
blocks are this this one was in Hardware

411
00:16:58,589 --> 00:17:00,899
in Hardware wallet so the firm factor

412
00:17:00,149 --> 00:17:02,249
was

413
00:17:00,899 --> 00:17:04,919
got form factor and they were using NFC

414
00:17:02,249 --> 00:17:07,110
for communications and we found a bunch

415
00:17:04,919 --> 00:17:09,510
of let's say shortcomings in this

416
00:17:07,109 --> 00:17:11,520
protocol they were sending the symmetric

417
00:17:09,510 --> 00:17:12,779
in and clear so symmetric is supposed to

418
00:17:11,520 --> 00:17:15,629
be a secret you don't want to send it in

419
00:17:12,779 --> 00:17:18,270
clear most of the time the beam it

420
00:17:15,630 --> 00:17:20,669
however was not sent in clear but they

421
00:17:18,270 --> 00:17:22,589
were just sending a hash of the pin so

422
00:17:20,669 --> 00:17:24,480
the pin was only four or five digits

423
00:17:22,589 --> 00:17:25,619
between zero and nine so it was

424
00:17:24,480 --> 00:17:27,419
straightforward to brute force it and

425
00:17:25,619 --> 00:17:29,789
gets the pin even though you only knew

426
00:17:27,419 --> 00:17:31,559
the hash and by the way the default pin

427
00:17:29,789 --> 00:17:33,179
size was only three digits it's

428
00:17:31,559 --> 00:17:36,840
relatively fast to brute force you don't

429
00:17:33,179 --> 00:17:39,179
need a GPU for this and another problem

430
00:17:36,840 --> 00:17:41,340
was that the comments were sent without

431
00:17:39,179 --> 00:17:44,039
any authentication so the card was

432
00:17:41,340 --> 00:17:46,020
receiving comments from the from the

433
00:17:44,039 --> 00:17:47,610
host but there was no signature no

434
00:17:46,020 --> 00:17:52,379
evidence that these comments were coming

435
00:17:47,610 --> 00:17:53,699
from a trusted machine so we reported

436
00:17:52,380 --> 00:17:55,679
all these issues and the guys they fixed

437
00:17:53,700 --> 00:17:58,799
everything but when we seen this it was

438
00:17:55,679 --> 00:18:03,090
pretty pretty scary and maybe the last

439
00:17:58,799 --> 00:18:06,270
one for this part is I think it we found

440
00:18:03,090 --> 00:18:07,889
this one by a by accident but I don't

441
00:18:06,270 --> 00:18:10,168
know how much if you know the beep sorry

442
00:18:07,890 --> 00:18:13,080
to stand out in in blocks and blocks and

443
00:18:10,169 --> 00:18:16,289
wallets so just a way to derive keys

444
00:18:13,080 --> 00:18:18,090
from a seed so usually you have a seed

445
00:18:16,289 --> 00:18:19,799
which is like the master secret and from

446
00:18:18,090 --> 00:18:22,949
this master secret email arrived many

447
00:18:19,799 --> 00:18:24,779
different public/private key pairs so

448
00:18:22,950 --> 00:18:27,600
there's a tool called beep 32 gen that

449
00:18:24,779 --> 00:18:31,020
some people were using and it's would

450
00:18:27,600 --> 00:18:33,539
take as an input the the seed so here I

451
00:18:31,020 --> 00:18:35,610
give the seed was it I give the citizen

452
00:18:33,539 --> 00:18:39,419
input and I want to have the address

453
00:18:35,610 --> 00:18:42,090
that corresponds to B seed with M as a

454
00:18:39,419 --> 00:18:47,000
state let's say the label or the address

455
00:18:42,090 --> 00:18:51,449
and I get this value 1jz EU or and so on

456
00:18:47,000 --> 00:18:53,700
now if I do the same but the seed

457
00:18:51,450 --> 00:18:55,470
instead of taking a seed of 64 bytes I

458
00:18:53,700 --> 00:18:57,659
take a set of 32 bytes only which is

459
00:18:55,470 --> 00:19:02,429
truncated just truncating the first one

460
00:18:57,659 --> 00:19:03,990
and I observe that I get exactly same

461
00:19:02,429 --> 00:19:06,570
address I was like oh shit what's going

462
00:19:03,990 --> 00:19:10,620
on here so actually what the system was

463
00:19:06,570 --> 00:19:12,990
using is accepting any size of input but

464
00:19:10,620 --> 00:19:13,428
silently truncating it to the first 32

465
00:19:12,990 --> 00:19:15,059
bytes

466
00:19:13,429 --> 00:19:16,950
without giving you any

467
00:19:15,059 --> 00:19:20,129
warning that it really no the rest of

468
00:19:16,950 --> 00:19:21,570
the input and I noticed this at the

469
00:19:20,129 --> 00:19:24,719
right time if if I hadn't noticed this

470
00:19:21,570 --> 00:19:28,230
bug some people could have lost tons of

471
00:19:24,720 --> 00:19:29,730
money so that's really bad API design

472
00:19:28,230 --> 00:19:31,230
that's really you know the worst thing

473
00:19:29,730 --> 00:19:33,749
you can do so I submitted a peer and

474
00:19:31,230 --> 00:19:35,669
fixed it but that's really scary if you

475
00:19:33,749 --> 00:19:37,830
see that people are you know using

476
00:19:35,669 --> 00:19:40,889
cryptocurrency to stop millions of

477
00:19:37,830 --> 00:19:45,449
dollars worth of money and it's realized

478
00:19:40,889 --> 00:19:47,008
I'm very very fragile tools and if you

479
00:19:45,450 --> 00:19:49,470
look just even a very popular a Bitcoin

480
00:19:47,009 --> 00:19:51,960
or ATM code bases you find many

481
00:19:49,470 --> 00:19:53,369
duplicates in many unsafe dependencies

482
00:19:51,960 --> 00:19:57,749
which is very scary

483
00:19:53,369 --> 00:20:01,769
ok rust so Russ it's a memory safe

484
00:19:57,749 --> 00:20:03,809
system language so unlike other memory

485
00:20:01,769 --> 00:20:05,789
safe languages like for example goo or

486
00:20:03,809 --> 00:20:07,440
Java it doesn't use garbage collector

487
00:20:05,789 --> 00:20:11,309
it's using reference counting which

488
00:20:07,440 --> 00:20:14,779
tends to be more efficient to to get rid

489
00:20:11,309 --> 00:20:17,460
of memory corruption issues so we sit

490
00:20:14,779 --> 00:20:19,559
more and more use for crypto for

491
00:20:17,460 --> 00:20:22,110
cryptocurrency applications I recently

492
00:20:19,559 --> 00:20:23,639
learned that one very big very big

493
00:20:22,110 --> 00:20:27,600
cryptocurrencies going to use the rest

494
00:20:23,639 --> 00:20:30,990
for their server-side code which is not

495
00:20:27,600 --> 00:20:33,899
unusual but we saw some more commonly in

496
00:20:30,990 --> 00:20:37,169
China code and in server code so one

497
00:20:33,899 --> 00:20:40,830
example of cryptocurrency using rest

498
00:20:37,169 --> 00:20:41,970
easy cache where the large part of the

499
00:20:40,830 --> 00:20:46,110
crypto of the elliptic curve

500
00:20:41,970 --> 00:20:49,529
cryptography and it's actually very very

501
00:20:46,110 --> 00:20:51,360
very good code ok so the first thing I

502
00:20:49,529 --> 00:20:53,789
do like you know in the first 20 minutes

503
00:20:51,360 --> 00:20:58,949
first half hour when I have to do a rest

504
00:20:53,789 --> 00:21:01,919
of it is just use the comments from the

505
00:20:58,950 --> 00:21:04,289
the cargo the suits I just try to build

506
00:21:01,919 --> 00:21:06,389
the code see if it we can I can build it

507
00:21:04,289 --> 00:21:09,210
run the unit test so this can be done

508
00:21:06,389 --> 00:21:11,998
using the cargo test command then the

509
00:21:09,210 --> 00:21:14,580
cargo creepy creepy is the linter of the

510
00:21:11,999 --> 00:21:17,009
rest language so you will not find any

511
00:21:14,580 --> 00:21:19,320
bugs with Clippy but the output of

512
00:21:17,009 --> 00:21:21,330
creepy let's say gives you an idea of

513
00:21:19,320 --> 00:21:23,250
the called hygiene and you know how

514
00:21:21,330 --> 00:21:25,049
careful the developers are you can also

515
00:21:23,250 --> 00:21:28,620
see if they've already run Clippy them

516
00:21:25,049 --> 00:21:30,389
survey me if they've fixed anything so

517
00:21:28,620 --> 00:21:33,270
yes Jenny if you weren't clipping

518
00:21:30,390 --> 00:21:34,350
there's like a ton of issues maybe it

519
00:21:33,270 --> 00:21:37,049
means that the developers have not been

520
00:21:34,350 --> 00:21:37,770
very very careful calculus is very

521
00:21:37,049 --> 00:21:40,379
convenient

522
00:21:37,770 --> 00:21:43,470
so it's checking for non vulnerabilities

523
00:21:40,380 --> 00:21:46,260
in the dependencies yours by your by

524
00:21:43,470 --> 00:21:49,470
your project so you can very easily see

525
00:21:46,260 --> 00:21:51,629
if there's an deprecated dependency or

526
00:21:49,470 --> 00:21:54,360
if there's some non problem in one of

527
00:21:51,630 --> 00:21:56,640
the dependencies and maybe the last one

528
00:21:54,360 --> 00:21:59,610
is to do a grep for unsafe blocks so

529
00:21:56,640 --> 00:22:02,130
unsafe in the case of rust service is

530
00:21:59,610 --> 00:22:03,809
generally memory safe but you can use

531
00:22:02,130 --> 00:22:06,179
directly you can work directly with your

532
00:22:03,809 --> 00:22:09,510
pointer pointers in which case the code

533
00:22:06,179 --> 00:22:12,090
is not safe and these this has to be

534
00:22:09,510 --> 00:22:14,789
declared inside and unsafe blocks you

535
00:22:12,090 --> 00:22:16,039
write unsafe and you write your code let

536
00:22:14,789 --> 00:22:18,809
me give you an example

537
00:22:16,039 --> 00:22:20,730
so of course unsafe miss enemy's unsafe

538
00:22:18,809 --> 00:22:22,440
it means that you can have you know

539
00:22:20,730 --> 00:22:25,140
classical memory corruption bugs out of

540
00:22:22,440 --> 00:22:26,820
out of boundaries or rights in Rus code

541
00:22:25,140 --> 00:22:30,570
and you may be able to exploit these

542
00:22:26,820 --> 00:22:32,879
bugs as you would in in C or C++ okay

543
00:22:30,570 --> 00:22:36,210
and you typically want to do it when you

544
00:22:32,880 --> 00:22:39,480
want to use for example C API using FFI

545
00:22:36,210 --> 00:22:41,070
calls so that may be one of the first

546
00:22:39,480 --> 00:22:42,539
easy thing we do when we review Ross

547
00:22:41,070 --> 00:22:45,178
code and if you write Ross code you want

548
00:22:42,539 --> 00:22:47,549
to avoid having having to use unsafe

549
00:22:45,179 --> 00:22:49,559
blocks there's actually a project by the

550
00:22:47,549 --> 00:22:51,510
rough security community there a

551
00:22:49,559 --> 00:22:53,610
security working group whereby the

552
00:22:51,510 --> 00:22:55,950
Detroit you look at many different

553
00:22:53,610 --> 00:22:58,049
projects they look at their own safe

554
00:22:55,950 --> 00:22:59,549
blocks and they try to find ways to

555
00:22:58,049 --> 00:23:02,789
remove the unsafe blocks by writing pure

556
00:22:59,549 --> 00:23:05,250
pure Ross Scott ok so here's just an

557
00:23:02,789 --> 00:23:07,559
example in one wet application where

558
00:23:05,250 --> 00:23:10,440
they would read the seed from one

559
00:23:07,559 --> 00:23:13,080
pointer here's the seed pointer and you

560
00:23:10,440 --> 00:23:15,690
see that this is called in in the read

561
00:23:13,080 --> 00:23:18,449
seed function and this reads it function

562
00:23:15,690 --> 00:23:23,700
is called itself in an unsafe block by

563
00:23:18,450 --> 00:23:25,169
this wallet from cedar function you see

564
00:23:23,700 --> 00:23:27,000
for example if this pointer is null

565
00:23:25,169 --> 00:23:30,260
pointer then you will get a sick fault

566
00:23:27,000 --> 00:23:33,539
or something like this okay

567
00:23:30,260 --> 00:23:35,399
another common bug 3 in this case we're

568
00:23:33,539 --> 00:23:38,370
not talking at memory corruption but of

569
00:23:35,399 --> 00:23:40,620
potential panic so the card will will

570
00:23:38,370 --> 00:23:42,629
fail without

571
00:23:40,620 --> 00:23:44,129
just it will just panic but we are

572
00:23:42,630 --> 00:23:46,800
giving you any error message and

573
00:23:44,130 --> 00:23:48,480
typically you want to avoid this so in

574
00:23:46,800 --> 00:23:51,120
the context of for us you can have a

575
00:23:48,480 --> 00:23:53,280
panic if you use the unwrapped comment

576
00:23:51,120 --> 00:23:56,280
you get an object that is an option or

577
00:23:53,280 --> 00:23:59,040
result but that happens to be non or

578
00:23:56,280 --> 00:24:00,960
error instead of an actual object so

579
00:23:59,040 --> 00:24:03,090
typically you want to avoid using unwrap

580
00:24:00,960 --> 00:24:05,760
and use insert pattern matching feature

581
00:24:03,090 --> 00:24:10,290
and do something if you have known or

582
00:24:05,760 --> 00:24:12,420
error instead of just crashing so it's

583
00:24:10,290 --> 00:24:14,460
not something that you will exploit to

584
00:24:12,420 --> 00:24:16,260
get our see on the program but that's

585
00:24:14,460 --> 00:24:19,110
something that we would report a

586
00:24:16,260 --> 00:24:20,550
security issue if we find a panic

587
00:24:19,110 --> 00:24:22,979
trigger built by an attacker in some

588
00:24:20,550 --> 00:24:24,928
rest project ok so that's just one

589
00:24:22,980 --> 00:24:29,309
example that we found in an audit in

590
00:24:24,929 --> 00:24:32,610
some dissertation function so if you get

591
00:24:29,309 --> 00:24:37,950
an error from the from deserialize which

592
00:24:32,610 --> 00:24:41,850
is here then where is it ok when you do

593
00:24:37,950 --> 00:24:42,450
this unwrap you would panic if this are

594
00:24:41,850 --> 00:24:45,178
lies failed

595
00:24:42,450 --> 00:24:47,130
ok so the solution here is for developer

596
00:24:45,179 --> 00:24:48,540
to let's say to check if there's an

597
00:24:47,130 --> 00:24:50,760
error and if there's an arrow do

598
00:24:48,540 --> 00:24:53,879
something right an error message but not

599
00:24:50,760 --> 00:24:56,100
not panic so it's in this case is not

600
00:24:53,880 --> 00:25:00,300
really exploitable in the sense of you

601
00:24:56,100 --> 00:25:01,980
know our C memory leak it's more you

602
00:25:00,300 --> 00:25:03,330
know what we call DRS but it's just

603
00:25:01,980 --> 00:25:05,370
something that we would report and we

604
00:25:03,330 --> 00:25:07,678
would typically tag it as low low low

605
00:25:05,370 --> 00:25:09,928
severity depending on on the context it

606
00:25:07,679 --> 00:25:12,660
it might be medium severity if it's

607
00:25:09,929 --> 00:25:14,210
really you know really bad but it's

608
00:25:12,660 --> 00:25:16,610
typically not something that we would

609
00:25:14,210 --> 00:25:20,250
write as high severity

610
00:25:16,610 --> 00:25:22,020
now if you've done crypto crypto DS or

611
00:25:20,250 --> 00:25:24,360
written crypto code you know that a good

612
00:25:22,020 --> 00:25:26,879
good practice with hydrogen is to let's

613
00:25:24,360 --> 00:25:28,620
say remove the sensitive values from the

614
00:25:26,880 --> 00:25:31,650
memory from the stack or the heap memory

615
00:25:28,620 --> 00:25:33,209
after using them so insist relatively

616
00:25:31,650 --> 00:25:35,370
easy because you get full control on the

617
00:25:33,210 --> 00:25:38,100
memory you see where each object is

618
00:25:35,370 --> 00:25:40,620
stored and you can overwrite the memory

619
00:25:38,100 --> 00:25:42,899
for example with zeros or random values

620
00:25:40,620 --> 00:25:46,020
and the goal of the of this is that if

621
00:25:42,900 --> 00:25:48,150
another process is reusing this memory

622
00:25:46,020 --> 00:25:49,500
then you don't want them to read your

623
00:25:48,150 --> 00:25:51,780
sensitive values it might be the keys

624
00:25:49,500 --> 00:25:54,390
internal state or sub keys of a cipher

625
00:25:51,780 --> 00:25:54,639
it may be the plaintext so in C and C

626
00:25:54,390 --> 00:25:57,190
plus

627
00:25:54,640 --> 00:26:00,640
plus it's relatively easy to do we know

628
00:25:57,190 --> 00:26:02,560
how to do it safely but you can't just

629
00:26:00,640 --> 00:26:04,510
virtually no way to do it reliably in

630
00:26:02,560 --> 00:26:07,240
garbage collecting languages because the

631
00:26:04,510 --> 00:26:08,860
the the values tend to be you know

632
00:26:07,240 --> 00:26:10,510
copied ever in different places the

633
00:26:08,860 --> 00:26:13,120
memory in you have no control on where

634
00:26:10,510 --> 00:26:16,060
these values are copied by the bio GC so

635
00:26:13,120 --> 00:26:17,979
in Gore Java or JavaScript as far as I

636
00:26:16,060 --> 00:26:19,659
can tell there's no way to you know

637
00:26:17,980 --> 00:26:23,680
remove sensitive values from memory

638
00:26:19,660 --> 00:26:28,690
reliably so rust is maybe somewhere in

639
00:26:23,680 --> 00:26:31,410
the middle so you can you can do it so

640
00:26:28,690 --> 00:26:34,240
my understanding I'm not arrest expert

641
00:26:31,410 --> 00:26:36,430
you know I know a little bit but I'm not

642
00:26:34,240 --> 00:26:38,470
writing a restful time so what I've

643
00:26:36,430 --> 00:26:41,020
learned is that from my experience that

644
00:26:38,470 --> 00:26:42,220
it's easier to do it where RB for heap

645
00:26:41,020 --> 00:26:44,170
allocated memory and stack allocated

646
00:26:42,220 --> 00:26:45,850
memory because you got you don't have

647
00:26:44,170 --> 00:26:46,750
you know you don't have control on the

648
00:26:45,850 --> 00:26:48,340
stack allocate or so you don't

649
00:26:46,750 --> 00:26:52,000
necessarily know where your data is

650
00:26:48,340 --> 00:26:53,230
stored and again internally you had a

651
00:26:52,000 --> 00:26:56,320
time maybe copied in different places

652
00:26:53,230 --> 00:26:59,770
and you don't you can't always no zero

653
00:26:56,320 --> 00:27:01,899
eyes all the copies of all this data so

654
00:26:59,770 --> 00:27:04,540
I've discovered has a crate so a package

655
00:27:01,900 --> 00:27:07,270
called zero eyes that apparently claims

656
00:27:04,540 --> 00:27:08,620
to do this availably but again I don't

657
00:27:07,270 --> 00:27:10,090
watch for it I don't know how how

658
00:27:08,620 --> 00:27:11,350
goodies may be eases rust people in the

659
00:27:10,090 --> 00:27:15,040
room who know better than me they can

660
00:27:11,350 --> 00:27:17,679
give me their opinion on it it's

661
00:27:15,040 --> 00:27:20,590
actually a good yeah I can show the link

662
00:27:17,680 --> 00:27:23,310
later there's a good blog post about

663
00:27:20,590 --> 00:27:28,389
rasterization that have found somewhere

664
00:27:23,310 --> 00:27:31,540
okay know about Russ and encrypt oh so

665
00:27:28,390 --> 00:27:33,640
what I lack in Ross most of the time you

666
00:27:31,540 --> 00:27:37,810
see you know code written in rust and

667
00:27:33,640 --> 00:27:40,540
you realize that on average you tend to

668
00:27:37,810 --> 00:27:42,129
deal with better programmers universe

669
00:27:40,540 --> 00:27:44,290
than for example in JavaScript I mean no

670
00:27:42,130 --> 00:27:45,850
offense to JavaScript people but you

671
00:27:44,290 --> 00:27:48,490
know the code rust you need to have

672
00:27:45,850 --> 00:27:50,020
certain discipline understanding of how

673
00:27:48,490 --> 00:27:51,580
we know memory works

674
00:27:50,020 --> 00:27:53,050
so the code is usually relatively

675
00:27:51,580 --> 00:27:54,790
whether were written else or the

676
00:27:53,050 --> 00:27:57,520
compiler the compiler is tend to be very

677
00:27:54,790 --> 00:28:00,370
very picky so it forces you to to get a

678
00:27:57,520 --> 00:28:02,230
clean code to get a one inglis code so

679
00:28:00,370 --> 00:28:05,620
that's ready it's usually pretty good in

680
00:28:02,230 --> 00:28:07,480
terms of security however there are much

681
00:28:05,620 --> 00:28:08,399
fewer tools like static analyzers

682
00:28:07,480 --> 00:28:11,880
available

683
00:28:08,400 --> 00:28:14,370
for for residency so easy you have yell

684
00:28:11,880 --> 00:28:16,620
all these no analyzers they're not

685
00:28:14,370 --> 00:28:18,209
really useful but then again is you know

686
00:28:16,620 --> 00:28:20,780
it's nice to run them to give an ID to

687
00:28:18,210 --> 00:28:23,910
get an ID off of the card and hydrogen

688
00:28:20,780 --> 00:28:25,200
but yeah most of the time most of the

689
00:28:23,910 --> 00:28:28,290
time these tools are not really useful

690
00:28:25,200 --> 00:28:30,960
when you look for in on trail bugs but

691
00:28:28,290 --> 00:28:34,290
there's still the risk of timing leaks

692
00:28:30,960 --> 00:28:36,780
so in crypto often times you want to

693
00:28:34,290 --> 00:28:39,000
have what we call time constant code you

694
00:28:36,780 --> 00:28:42,000
want that description time of the

695
00:28:39,000 --> 00:28:44,910
program does not depend on any secret

696
00:28:42,000 --> 00:28:46,740
values because otherwise by simple

697
00:28:44,910 --> 00:28:48,270
signal processing you can measure the

698
00:28:46,740 --> 00:28:50,640
execution time and did you some

699
00:28:48,270 --> 00:28:52,230
information on the secret so the secrets

700
00:28:50,640 --> 00:28:53,640
might be the keys and turn on state the

701
00:28:52,230 --> 00:28:57,870
plaintext or anything that you don't

702
00:28:53,640 --> 00:28:59,520
want to be public as and when we do an

703
00:28:57,870 --> 00:29:01,379
audit one of the first things we ask to

704
00:28:59,520 --> 00:29:03,590
the customers do you what is your sweat

705
00:29:01,380 --> 00:29:06,630
model do you care about timing makes

706
00:29:03,590 --> 00:29:07,740
some demise say yes the might say no if

707
00:29:06,630 --> 00:29:10,190
they say we don't care about timing

708
00:29:07,740 --> 00:29:13,530
lists then we try to challenge their

709
00:29:10,190 --> 00:29:16,530
entrance e try to think if they want to

710
00:29:13,530 --> 00:29:18,330
care by timings or not and well to be

711
00:29:16,530 --> 00:29:20,340
honest many times they don't have to

712
00:29:18,330 --> 00:29:24,120
worry because of you know the way the

713
00:29:20,340 --> 00:29:25,500
program is used in in order some other

714
00:29:24,120 --> 00:29:27,030
times you really want to have you know

715
00:29:25,500 --> 00:29:29,940
timing a protection for example in

716
00:29:27,030 --> 00:29:31,350
emitted applications so it's also up to

717
00:29:29,940 --> 00:29:33,780
the customer maybe they would tell you

718
00:29:31,350 --> 00:29:35,399
upfront that we don't care about timing

719
00:29:33,780 --> 00:29:38,100
time constant nests we just care about

720
00:29:35,400 --> 00:29:39,600
performance and that may be fine so

721
00:29:38,100 --> 00:29:43,159
here's that's an example we find in some

722
00:29:39,600 --> 00:29:46,110
rest application in some model

723
00:29:43,160 --> 00:29:48,570
subtraction operation and the problem

724
00:29:46,110 --> 00:29:50,610
was here so you had this branching if

725
00:29:48,570 --> 00:29:52,790
and typically when you do this kind of

726
00:29:50,610 --> 00:29:55,350
branching you get a different let's say

727
00:29:52,790 --> 00:29:56,520
different execution time in terms of in

728
00:29:55,350 --> 00:29:57,929
terms of clock cycles because you don't

729
00:29:56,520 --> 00:29:59,790
execute the same code and you have a

730
00:29:57,930 --> 00:30:00,900
little difference that may not may or

731
00:29:59,790 --> 00:30:02,700
may not be measurable

732
00:30:00,900 --> 00:30:04,560
that may or may not be exploitable and

733
00:30:02,700 --> 00:30:06,930
that may or may not be exploitable

734
00:30:04,560 --> 00:30:08,820
remotely but still you want to report it

735
00:30:06,930 --> 00:30:11,640
because it's not constant time so that's

736
00:30:08,820 --> 00:30:13,830
another example that's not example in

737
00:30:11,640 --> 00:30:16,850
some summer us code in a slightly

738
00:30:13,830 --> 00:30:21,090
different project in the 8025 519

739
00:30:16,850 --> 00:30:22,199
signature scheme so in this case we

740
00:30:21,090 --> 00:30:24,870
recommend it to the cursor

741
00:30:22,200 --> 00:30:26,760
Simar to use constant time so we what we

742
00:30:24,870 --> 00:30:28,830
try to do is no we taught you bro

743
00:30:26,760 --> 00:30:29,850
certainly customer shoes and most of the

744
00:30:28,830 --> 00:30:33,449
time they're not cryptographers

745
00:30:29,850 --> 00:30:35,219
sometimes sometimes they are but if we

746
00:30:33,450 --> 00:30:38,850
can write the code that would be

747
00:30:35,220 --> 00:30:40,890
constant time we try to do it if it's

748
00:30:38,850 --> 00:30:42,840
not let's say it's not too complex

749
00:30:40,890 --> 00:30:44,940
fitted well instead of having them

750
00:30:42,840 --> 00:30:47,070
writing themselves and sending to us and

751
00:30:44,940 --> 00:30:48,210
us reviewing the code so sometimes it's

752
00:30:47,070 --> 00:30:50,220
just more efficient for everyone that we

753
00:30:48,210 --> 00:30:54,210
we write the patch and then they review

754
00:30:50,220 --> 00:30:56,580
it ok so again I only do so much about

755
00:30:54,210 --> 00:30:58,590
Russ I love this language but I'm very

756
00:30:56,580 --> 00:31:00,300
poor Russ programmer many people know

757
00:30:58,590 --> 00:31:02,100
Russ much much better than me so these

758
00:31:00,300 --> 00:31:04,950
are this is very good passed by Tony

759
00:31:02,100 --> 00:31:06,270
actually who knows Russ really well and

760
00:31:04,950 --> 00:31:08,640
it talks about Russ security in many

761
00:31:06,270 --> 00:31:11,129
other aspects of first you may want to

762
00:31:08,640 --> 00:31:13,440
check this github organization a real

763
00:31:11,130 --> 00:31:19,140
secure code they have a repo called a

764
00:31:13,440 --> 00:31:20,580
single WG working group will try to you

765
00:31:19,140 --> 00:31:22,230
will find this kind of issues when I try

766
00:31:20,580 --> 00:31:24,330
to improve the general sexuality of a

767
00:31:22,230 --> 00:31:28,860
first and nothing's very good very good

768
00:31:24,330 --> 00:31:31,530
resource okay okay now for the last non

769
00:31:28,860 --> 00:31:33,540
ticket non-technical part what we've

770
00:31:31,530 --> 00:31:36,120
learned from this or I won't show any

771
00:31:33,540 --> 00:31:37,860
any code here so the first maybe the

772
00:31:36,120 --> 00:31:40,110
first observation is that I don't know

773
00:31:37,860 --> 00:31:42,870
if you were around 10 or 15 years ago if

774
00:31:40,110 --> 00:31:44,610
you are doing crypto back then but it's

775
00:31:42,870 --> 00:31:47,129
much much better now for a variety of

776
00:31:44,610 --> 00:31:49,860
reasons people know crypto much better

777
00:31:47,130 --> 00:31:52,460
than 10 years ago there are many more

778
00:31:49,860 --> 00:31:56,340
resources many more books many more say

779
00:31:52,460 --> 00:31:59,070
Aqsa books one of the key driving forces

780
00:31:56,340 --> 00:32:00,899
was maybe the revelations of Snowden of

781
00:31:59,070 --> 00:32:03,210
course because Snowden kind of made

782
00:32:00,900 --> 00:32:04,740
crypto cool everybody got excited about

783
00:32:03,210 --> 00:32:05,670
into an encryption after the Snowden

784
00:32:04,740 --> 00:32:08,490
revelations

785
00:32:05,670 --> 00:32:10,410
another driver is the blockchain all the

786
00:32:08,490 --> 00:32:12,210
blocks and stuff where you have tons of

787
00:32:10,410 --> 00:32:14,850
people we plenty on time of their hands

788
00:32:12,210 --> 00:32:17,310
and plenty of money to spend on you know

789
00:32:14,850 --> 00:32:18,780
doing crypto projects so from my

790
00:32:17,310 --> 00:32:21,120
perspective I asked the crypto person is

791
00:32:18,780 --> 00:32:22,710
really cool to see that you know people

792
00:32:21,120 --> 00:32:26,520
who don't have the surf formal education

793
00:32:22,710 --> 00:32:28,470
in crypto are security let's say very

794
00:32:26,520 --> 00:32:30,780
good at you know writing crypto and I

795
00:32:28,470 --> 00:32:32,990
often find developers and often find

796
00:32:30,780 --> 00:32:35,940
code where I'm really impressed by

797
00:32:32,990 --> 00:32:39,480
people you know never is studied crypto

798
00:32:35,940 --> 00:32:41,220
let alone had a PhD but are very good in

799
00:32:39,480 --> 00:32:43,800
terms of both theory and practice

800
00:32:41,220 --> 00:32:46,530
like for example again - team - team has

801
00:32:43,800 --> 00:32:48,840
no people who are that's amazing

802
00:32:46,530 --> 00:32:50,580
who know you know cryptographic pairings

803
00:32:48,840 --> 00:32:54,000
and who do very complex your knowledge

804
00:32:50,580 --> 00:32:55,620
stuff and you you will never found this

805
00:32:54,000 --> 00:32:57,630
like 10 years ago

806
00:32:55,620 --> 00:33:03,110
everybody would write you know you see

807
00:32:57,630 --> 00:33:03,110
be md5 and so that's that's really cool

808
00:33:03,140 --> 00:33:08,550
yeah like I was saying before it's we we

809
00:33:06,780 --> 00:33:10,050
talk about crypto audits but most of the

810
00:33:08,550 --> 00:33:11,399
time we just review code with we try to

811
00:33:10,050 --> 00:33:12,899
find bugs like if you look at the code

812
00:33:11,400 --> 00:33:13,500
and you find like a big mirror

813
00:33:12,900 --> 00:33:15,270
corruption

814
00:33:13,500 --> 00:33:16,620
you're not going to discard it by single

815
00:33:15,270 --> 00:33:19,080
it's not crypto so let's just ignore

816
00:33:16,620 --> 00:33:21,000
this bug so we brought any issue that we

817
00:33:19,080 --> 00:33:24,060
can find and most of the time the issues

818
00:33:21,000 --> 00:33:25,470
we find are not purely crypto bugs they

819
00:33:24,060 --> 00:33:27,720
may happen to be in the crypto but not

820
00:33:25,470 --> 00:33:29,520
pure crypto so for this you need to know

821
00:33:27,720 --> 00:33:31,770
you need to get some to have some

822
00:33:29,520 --> 00:33:33,300
knowledge of the language and it's not

823
00:33:31,770 --> 00:33:34,680
always easy because you cannot be an

824
00:33:33,300 --> 00:33:37,200
expert in every single normal language

825
00:33:34,680 --> 00:33:40,310
on earth so we have been reviewing code

826
00:33:37,200 --> 00:33:46,380
in Java JavaScript C C++ Python Rose ago

827
00:33:40,310 --> 00:33:47,580
even Haskell you can be an expert in all

828
00:33:46,380 --> 00:33:49,170
of these languages but you need to be

829
00:33:47,580 --> 00:33:51,000
comfortable enough you know today for a

830
00:33:49,170 --> 00:33:52,110
good quality for our customers or you

831
00:33:51,000 --> 00:33:54,090
need to find one person in your

832
00:33:52,110 --> 00:33:59,159
organization who can help with the

833
00:33:54,090 --> 00:34:00,689
language knowledge okay so we started to

834
00:33:59,160 --> 00:34:03,630
get the best value from the work both

835
00:34:00,690 --> 00:34:05,220
sides must be must be prepared so as an

836
00:34:03,630 --> 00:34:06,840
auditor when you will do the work so of

837
00:34:05,220 --> 00:34:08,220
course you must have some degree of

838
00:34:06,840 --> 00:34:10,168
familiarity with the thing you're going

839
00:34:08,219 --> 00:34:11,629
to audit for somebody if they ask you to

840
00:34:10,168 --> 00:34:14,520
review an awesome zero knowledge proof

841
00:34:11,630 --> 00:34:16,290
then you should know what it's another

842
00:34:14,520 --> 00:34:17,520
scope is about you should know this kind

843
00:34:16,290 --> 00:34:19,469
of zero and zero knowledge proof and

844
00:34:17,520 --> 00:34:22,530
you're not going to charge the customer

845
00:34:19,469 --> 00:34:24,959
for learning about this type of your

846
00:34:22,530 --> 00:34:27,510
knowledge proof you would charge the

847
00:34:24,960 --> 00:34:29,699
time for you know learning their own

848
00:34:27,510 --> 00:34:30,990
specific version but not for general

849
00:34:29,699 --> 00:34:33,509
knowledge

850
00:34:30,989 --> 00:34:36,540
likewise if they ask you to review I

851
00:34:33,510 --> 00:34:38,100
don't know Haskell coded then you're not

852
00:34:36,540 --> 00:34:39,509
going to charge time for learning

853
00:34:38,100 --> 00:34:41,159
Haskell in one weekend you need people

854
00:34:39,510 --> 00:34:43,950
who have already been working with this

855
00:34:41,159 --> 00:34:45,389
language for a reasonable amount of time

856
00:34:43,949 --> 00:34:48,418
and you already confortable doing audits

857
00:34:45,389 --> 00:34:49,710
for this this type of language now in

858
00:34:48,418 --> 00:34:51,690
the customer side

859
00:34:49,710 --> 00:34:53,520
so oftentimes people would come to us

860
00:34:51,690 --> 00:34:55,320
and say oh please review record I say

861
00:34:53,520 --> 00:34:57,420
okay well what do you need exactly what

862
00:34:55,320 --> 00:34:59,700
he want or just find any security issues

863
00:34:57,420 --> 00:35:01,530
but then we ask themselves we have

864
00:34:59,700 --> 00:35:03,390
demarcate what what is your threat model

865
00:35:01,530 --> 00:35:05,100
what are the critical components in your

866
00:35:03,390 --> 00:35:06,779
system what are your critical access

867
00:35:05,100 --> 00:35:08,640
have you already

868
00:35:06,780 --> 00:35:10,920
hire people to do security audits have

869
00:35:08,640 --> 00:35:13,290
you used some automated tools do you

870
00:35:10,920 --> 00:35:15,870
have an internal you know security as

871
00:35:13,290 --> 00:35:18,240
the entity process so it's very helpful

872
00:35:15,870 --> 00:35:20,160
from a little perspective when the

873
00:35:18,240 --> 00:35:24,930
customer comes with a list a precise

874
00:35:20,160 --> 00:35:28,259
list of let's say the what are the main

875
00:35:24,930 --> 00:35:29,640
threats what are the main assets what

876
00:35:28,260 --> 00:35:32,100
are the parts of the code that made them

877
00:35:29,640 --> 00:35:36,120
that make them nervous so why do they

878
00:35:32,100 --> 00:35:39,180
expect us to spend most of our time so

879
00:35:36,120 --> 00:35:40,830
it may it may take time to do it but you

880
00:35:39,180 --> 00:35:42,960
will get a much better value from the

881
00:35:40,830 --> 00:35:45,900
audit if you take maybe a few hours a

882
00:35:42,960 --> 00:35:49,020
few days to do it properly and of course

883
00:35:45,900 --> 00:35:50,250
documentation school in some cases

884
00:35:49,020 --> 00:35:51,630
there's no documentation people will

885
00:35:50,250 --> 00:35:53,730
just give you some source code sometimes

886
00:35:51,630 --> 00:35:55,320
without any comment and then you have to

887
00:35:53,730 --> 00:35:57,870
kind of reverse engineer the logic of

888
00:35:55,320 --> 00:36:01,500
the code and it's not the ideal

889
00:35:57,870 --> 00:36:03,170
situation of course so when you start on

890
00:36:01,500 --> 00:36:06,000
a little swath to estimate you know how

891
00:36:03,170 --> 00:36:07,860
much time it will take how much it will

892
00:36:06,000 --> 00:36:09,720
cost for the customer and it's not

893
00:36:07,860 --> 00:36:11,670
always easy so in simple way to do it is

894
00:36:09,720 --> 00:36:14,549
just to count the lines we can use a the

895
00:36:11,670 --> 00:36:16,290
clock tool and you can get a ballpark

896
00:36:14,550 --> 00:36:18,480
estimate by just counting the lines of

897
00:36:16,290 --> 00:36:21,690
code and saying okay you know experience

898
00:36:18,480 --> 00:36:24,900
we don't know it's it takes maybe three

899
00:36:21,690 --> 00:36:26,520
hours per I know 200 lines of code or

900
00:36:24,900 --> 00:36:30,120
something like this I don't have the

901
00:36:26,520 --> 00:36:33,450
figures in mind so it can give you let's

902
00:36:30,120 --> 00:36:35,040
say a a rough ballpark estimate but it

903
00:36:33,450 --> 00:36:36,899
also depends a lot on the complexity of

904
00:36:35,040 --> 00:36:39,210
the code on language on the context of

905
00:36:36,900 --> 00:36:41,820
the project on the amount of the say

906
00:36:39,210 --> 00:36:44,460
previous knowledge and also hard that's

907
00:36:41,820 --> 00:36:45,960
it - sometimes to put a price tag so one

908
00:36:44,460 --> 00:36:48,840
way to do it of course is to charge

909
00:36:45,960 --> 00:36:50,250
daily rate a flexible tell you read in

910
00:36:48,840 --> 00:36:52,140
some other cases it might be better to

911
00:36:50,250 --> 00:36:54,330
charge a flat fee say that you will pay

912
00:36:52,140 --> 00:36:57,390
this amount regardless of the time we

913
00:36:54,330 --> 00:36:59,430
spend and so if you've been in in this

914
00:36:57,390 --> 00:37:00,629
situation you know that's not easy to do

915
00:36:59,430 --> 00:37:01,740
but you want to do something that is

916
00:37:00,630 --> 00:37:02,850
fair for everyone and it's flexible

917
00:37:01,740 --> 00:37:05,459
enough

918
00:37:02,850 --> 00:37:07,020
because you might you know it might take

919
00:37:05,460 --> 00:37:08,910
you more time than expected us well

920
00:37:07,020 --> 00:37:09,870
that's might take you less time so you

921
00:37:08,910 --> 00:37:11,819
want to be able to deliver this

922
00:37:09,870 --> 00:37:16,170
situation in a you know where it is fair

923
00:37:11,820 --> 00:37:18,060
for everyone so so when do you find the

924
00:37:16,170 --> 00:37:20,180
bug so I think there are two extreme

925
00:37:18,060 --> 00:37:22,500
cases if you've been auditing God maybe

926
00:37:20,180 --> 00:37:25,529
this will sound familiar to you

927
00:37:22,500 --> 00:37:27,030
so in some context when the code is

928
00:37:25,530 --> 00:37:28,530
relatively simple when you're very

929
00:37:27,030 --> 00:37:31,650
familiar with the type of project for

930
00:37:28,530 --> 00:37:34,770
example what in all cases you would find

931
00:37:31,650 --> 00:37:36,360
maybe 80% of the bugs in the first

932
00:37:34,770 --> 00:37:38,100
twenty percent of the time or even less

933
00:37:36,360 --> 00:37:40,740
so you would find all the low-hanging

934
00:37:38,100 --> 00:37:43,650
fruits and then you're getting

935
00:37:40,740 --> 00:37:46,109
diminishing returns so you may spend a

936
00:37:43,650 --> 00:37:49,110
lot more time and maybe find nothing or

937
00:37:46,110 --> 00:37:50,460
find non-trivial bugs so you will you

938
00:37:49,110 --> 00:37:52,190
always want you know to spend more time

939
00:37:50,460 --> 00:37:54,600
and you know look for non-trivial bugs

940
00:37:52,190 --> 00:37:56,910
but sometimes you just found nothing

941
00:37:54,600 --> 00:37:59,279
it's frustrating but yeah sometimes

942
00:37:56,910 --> 00:38:01,589
they're just nothing to be found in all

943
00:37:59,280 --> 00:38:03,950
types of project the most complex one

944
00:38:01,590 --> 00:38:06,780
for example and when we audited Z cache

945
00:38:03,950 --> 00:38:08,430
you have you may have very that's a

946
00:38:06,780 --> 00:38:10,980
steep learning curve it might take you

947
00:38:08,430 --> 00:38:12,480
several days to you know get familiar

948
00:38:10,980 --> 00:38:13,740
with the codebase and understand what

949
00:38:12,480 --> 00:38:16,680
the code is doing understand the whole

950
00:38:13,740 --> 00:38:18,330
logic and you want finally an issue or

951
00:38:16,680 --> 00:38:21,509
maybe some small problems in the code

952
00:38:18,330 --> 00:38:24,779
but in this case you will start finding

953
00:38:21,510 --> 00:38:27,480
bugs or logic bugs or design bugs after

954
00:38:24,780 --> 00:38:31,710
maybe several days or maybe even after

955
00:38:27,480 --> 00:38:33,900
one week of review should also depends

956
00:38:31,710 --> 00:38:35,880
on the complexity of the card on say the

957
00:38:33,900 --> 00:38:38,870
proofs knowledge or the auditors and the

958
00:38:35,880 --> 00:38:41,730
documentation from the from the customer

959
00:38:38,870 --> 00:38:44,069
so Cerreta ratings so that's an

960
00:38:41,730 --> 00:38:46,560
important topic I was disgusted in

961
00:38:44,070 --> 00:38:49,410
discussing it yesterday with another

962
00:38:46,560 --> 00:38:50,640
audit a company so you may like I

963
00:38:49,410 --> 00:38:52,980
mentioned before you may want to use CVS

964
00:38:50,640 --> 00:38:55,830
s but then again it's CVS is not always

965
00:38:52,980 --> 00:38:57,120
the best tool for Crypt audits so what's

966
00:38:55,830 --> 00:38:58,560
important from my perspective is to

967
00:38:57,120 --> 00:39:00,420
consider the exploitability and

968
00:38:58,560 --> 00:39:03,240
impactors for you know well known stuff

969
00:39:00,420 --> 00:39:04,710
in security so you don't let's say you

970
00:39:03,240 --> 00:39:06,750
don't put high severity rating just

971
00:39:04,710 --> 00:39:08,790
because it looks bad because you think

972
00:39:06,750 --> 00:39:11,760
it's stupid you really have to consider

973
00:39:08,790 --> 00:39:14,670
how exploitable it is how and what's the

974
00:39:11,760 --> 00:39:16,600
impact and I think maybe you know it's

975
00:39:14,670 --> 00:39:18,940
also like psychotic psychological bias

976
00:39:16,600 --> 00:39:23,380
we're by auditors maybe tend to

977
00:39:18,940 --> 00:39:26,170
overestimate the severity with also

978
00:39:23,380 --> 00:39:28,210
sometimes underestimated disability but

979
00:39:26,170 --> 00:39:30,610
in any any return or this problem that

980
00:39:28,210 --> 00:39:32,320
you know you were you always want to

981
00:39:30,610 --> 00:39:33,850
have like you always want to have a high

982
00:39:32,320 --> 00:39:36,040
server to even honorably in your report

983
00:39:33,850 --> 00:39:39,040
but you have you know to think very

984
00:39:36,040 --> 00:39:40,900
carefully about the the actual risk and

985
00:39:39,040 --> 00:39:42,340
do something that is fair for everyone

986
00:39:40,900 --> 00:39:45,040
and what's really important is to be

987
00:39:42,340 --> 00:39:46,600
consistent across the report and

988
00:39:45,040 --> 00:39:49,420
consistent across different engagements

989
00:39:46,600 --> 00:39:50,950
so if you write one cannot burg high

990
00:39:49,420 --> 00:39:52,390
severity for one customer and the same

991
00:39:50,950 --> 00:39:54,310
burg medium charity for the other one

992
00:39:52,390 --> 00:39:55,660
then it makes no sense and people will

993
00:39:54,310 --> 00:39:58,990
tell you that it's unfair because it

994
00:39:55,660 --> 00:40:00,670
would be unfair so in the context of

995
00:39:58,990 --> 00:40:03,100
crypto you know if you see people using

996
00:40:00,670 --> 00:40:04,540
ECB you might scream and so that the

997
00:40:03,100 --> 00:40:06,700
glasses complete stupid at high severity

998
00:40:04,540 --> 00:40:08,500
you should never do it but then you have

999
00:40:06,700 --> 00:40:10,509
to think about you know how what's the

1000
00:40:08,500 --> 00:40:12,130
actual risk for a customer how

1001
00:40:10,510 --> 00:40:14,560
exploitable it is and it might end up

1002
00:40:12,130 --> 00:40:17,470
being a very low severity or even know

1003
00:40:14,560 --> 00:40:20,049
sorority bug in some cases yet it should

1004
00:40:17,470 --> 00:40:23,560
be fixed but it's not because it's look

1005
00:40:20,050 --> 00:40:28,720
stupid that is bad and again considered

1006
00:40:23,560 --> 00:40:30,070
security model so for example we've we

1007
00:40:28,720 --> 00:40:31,870
have added to the proof of war so proof

1008
00:40:30,070 --> 00:40:33,640
of work is a kind of big slow hash

1009
00:40:31,870 --> 00:40:34,960
function and here this trend model is

1010
00:40:33,640 --> 00:40:37,270
pretty unique the goal of the attacker

1011
00:40:34,960 --> 00:40:40,000
is to compute the output faster than

1012
00:40:37,270 --> 00:40:41,650
expected so it's not about per images or

1013
00:40:40,000 --> 00:40:43,870
collisions of course you want the hash

1014
00:40:41,650 --> 00:40:46,570
function to be collision free but the

1015
00:40:43,870 --> 00:40:48,609
main goal here is to make the function

1016
00:40:46,570 --> 00:40:51,220
you know impossible to replicate or

1017
00:40:48,610 --> 00:40:53,440
impossible to compute in a way that is

1018
00:40:51,220 --> 00:40:56,350
significantly faster than expected by

1019
00:40:53,440 --> 00:40:58,210
there by the designers so yes that's

1020
00:40:56,350 --> 00:41:01,210
when one example among many others but

1021
00:40:58,210 --> 00:41:03,610
you also have to think you know what is

1022
00:41:01,210 --> 00:41:07,240
the program doing what occurs what is

1023
00:41:03,610 --> 00:41:08,320
the texture of face and yeah what was

1024
00:41:07,240 --> 00:41:11,439
the respond way from the customers

1025
00:41:08,320 --> 00:41:12,910
perspective and you you always biased

1026
00:41:11,440 --> 00:41:15,250
because you know we all have our own

1027
00:41:12,910 --> 00:41:19,270
experience we tend to see things from

1028
00:41:15,250 --> 00:41:20,830
your own perspective and I've been in

1029
00:41:19,270 --> 00:41:22,900
several situations where you know I was

1030
00:41:20,830 --> 00:41:25,810
tempted to put a forgiving sorority and

1031
00:41:22,900 --> 00:41:27,880
then I try to really you know to think

1032
00:41:25,810 --> 00:41:29,080
about what's the what sexual risk for

1033
00:41:27,880 --> 00:41:30,640
the customer

1034
00:41:29,080 --> 00:41:33,130
and then sometimes it made me changed

1035
00:41:30,640 --> 00:41:34,270
and revised the sorority level so

1036
00:41:33,130 --> 00:41:37,150
generally like I said at the beginning

1037
00:41:34,270 --> 00:41:40,380
of this talk you really have to be a

1038
00:41:37,150 --> 00:41:43,270
savory understanding with the developers

1039
00:41:40,380 --> 00:41:45,870
don't make them feel like they're idiots

1040
00:41:43,270 --> 00:41:49,060
or did something stupid we know we all

1041
00:41:45,870 --> 00:41:50,470
write embarrassing code and when you

1042
00:41:49,060 --> 00:41:52,960
write the reports really important you

1043
00:41:50,470 --> 00:41:55,540
know to turn it to write in a way that

1044
00:41:52,960 --> 00:41:56,770
is positive say okay it's not a best

1045
00:41:55,540 --> 00:41:58,180
practice you should read this way and

1046
00:41:56,770 --> 00:41:59,950
not say something really offensive that

1047
00:41:58,180 --> 00:42:02,980
oh that's really bad or stupid

1048
00:41:59,950 --> 00:42:04,569
it seems really important I mean if you

1049
00:42:02,980 --> 00:42:07,240
have been audited you know how it can

1050
00:42:04,570 --> 00:42:11,020
feel if something writes a report in the

1051
00:42:07,240 --> 00:42:12,160
internet is not very adequate and you

1052
00:42:11,020 --> 00:42:13,660
should read the description in a way

1053
00:42:12,160 --> 00:42:14,890
that can be you know understood by your

1054
00:42:13,660 --> 00:42:17,020
target audience so typically the

1055
00:42:14,890 --> 00:42:19,120
audience will be developers so you want

1056
00:42:17,020 --> 00:42:20,850
to use a language that is understanding

1057
00:42:19,120 --> 00:42:23,200
understandable by the developers

1058
00:42:20,850 --> 00:42:24,640
sometimes you have to write a report

1059
00:42:23,200 --> 00:42:27,100
also for the management so you would

1060
00:42:24,640 --> 00:42:28,480
write high-level executive summary but

1061
00:42:27,100 --> 00:42:31,000
when you do report when you write

1062
00:42:28,480 --> 00:42:32,980
reports we must think about the guys who

1063
00:42:31,000 --> 00:42:37,090
are writing the code and we will have to

1064
00:42:32,980 --> 00:42:39,040
fix their code and try to help them as

1065
00:42:37,090 --> 00:42:40,630
much as you can so for example if you

1066
00:42:39,040 --> 00:42:42,850
give recommendations maybe try to give

1067
00:42:40,630 --> 00:42:45,100
links to actual standards or actual

1068
00:42:42,850 --> 00:42:46,810
documents or website that you know help

1069
00:42:45,100 --> 00:42:48,610
them how to you know find a mitigation

1070
00:42:46,810 --> 00:42:49,810
maybe you don't know the best mitigation

1071
00:42:48,610 --> 00:42:52,090
maybe they know better the code than you

1072
00:42:49,810 --> 00:42:53,740
do most of the time but you want to give

1073
00:42:52,090 --> 00:42:55,960
them as much help as you as you can and

1074
00:42:53,740 --> 00:42:58,509
after they've patch it you review the

1075
00:42:55,960 --> 00:43:01,870
patch and you tell them if it's if you

1076
00:42:58,510 --> 00:43:05,800
think it's good or not so I think it's

1077
00:43:01,870 --> 00:43:07,779
important to keep communication ongoing

1078
00:43:05,800 --> 00:43:09,850
with customers as you as you walk

1079
00:43:07,780 --> 00:43:11,770
through the audit I mean one way to do

1080
00:43:09,850 --> 00:43:14,410
it is just to get the code walk in a

1081
00:43:11,770 --> 00:43:16,509
broker for two weeks and then share the

1082
00:43:14,410 --> 00:43:18,430
results but we found it way more

1083
00:43:16,510 --> 00:43:21,550
efficient for example to have a slack

1084
00:43:18,430 --> 00:43:22,960
channel with a developers and ask as

1085
00:43:21,550 --> 00:43:24,520
many questions as we can for example if

1086
00:43:22,960 --> 00:43:25,900
you're not sure about something if we

1087
00:43:24,520 --> 00:43:27,700
don't understand some piece of the code

1088
00:43:25,900 --> 00:43:29,770
it just might be more efficient to ask

1089
00:43:27,700 --> 00:43:30,819
the developer rather than spending

1090
00:43:29,770 --> 00:43:33,250
Halford they're trying to figure out

1091
00:43:30,820 --> 00:43:34,930
what's going on and sometimes we would

1092
00:43:33,250 --> 00:43:37,510
misunderstand with overestimate or

1093
00:43:34,930 --> 00:43:39,399
underestimate a problem so we would just

1094
00:43:37,510 --> 00:43:41,650
you know ask the guys directly okay what

1095
00:43:39,400 --> 00:43:43,779
do you think about this bug we found

1096
00:43:41,650 --> 00:43:45,430
and they will they were territorially oh

1097
00:43:43,779 --> 00:43:47,650
right that's that's problem we should

1098
00:43:45,430 --> 00:43:50,140
fix it and these girls to save you time

1099
00:43:47,650 --> 00:43:52,839
because if you if you misunderstood some

1100
00:43:50,140 --> 00:43:55,348
part if it's not a bug and they tell you

1101
00:43:52,839 --> 00:43:59,680
it upfront then you won't have to right

1102
00:43:55,349 --> 00:44:01,480
right under the report okay and what's

1103
00:43:59,680 --> 00:44:03,339
also important is if you deal with a

1104
00:44:01,480 --> 00:44:04,930
system that's already in production it's

1105
00:44:03,339 --> 00:44:07,150
much better you know to report critical

1106
00:44:04,930 --> 00:44:08,950
bugs as you find them instead of waiting

1107
00:44:07,150 --> 00:44:13,720
for the final release of the auto report

1108
00:44:08,950 --> 00:44:16,118
and so last but not least of course you

1109
00:44:13,720 --> 00:44:18,339
won't repost publish it sometimes it's

1110
00:44:16,119 --> 00:44:20,799
embarrassing to see people commenting on

1111
00:44:18,339 --> 00:44:24,578
ready to other places and saying oh but

1112
00:44:20,799 --> 00:44:25,990
look it's been edited so it's safe so we

1113
00:44:24,579 --> 00:44:27,490
always try to say you know we're gonna

1114
00:44:25,990 --> 00:44:29,618
have so much time only and I have some

1115
00:44:27,490 --> 00:44:33,250
so much capabilities we will not find

1116
00:44:29,619 --> 00:44:35,079
all the bugs when you hire different

1117
00:44:33,250 --> 00:44:36,490
companies to do the same piece of code

1118
00:44:35,079 --> 00:44:37,809
different companies they will find

1119
00:44:36,490 --> 00:44:41,078
different bugs muscle that must all the

1120
00:44:37,809 --> 00:44:42,880
time so security is like I said they

1121
00:44:41,079 --> 00:44:45,549
tend to be a broaden and then they are

1122
00:44:42,880 --> 00:44:48,849
deep you are limited in time he limited

1123
00:44:45,549 --> 00:44:50,200
in in budget and limited in scope

1124
00:44:48,849 --> 00:44:53,920
sometimes they would just tell you to

1125
00:44:50,200 --> 00:44:55,660
review this part of the code and only

1126
00:44:53,920 --> 00:44:58,270
the code that they wrote and not the

1127
00:44:55,660 --> 00:45:01,690
dependencies so what we do sometimes is

1128
00:44:58,270 --> 00:45:03,730
not just check for any non varieties in

1129
00:45:01,690 --> 00:45:05,980
the dependencies and if there's any

1130
00:45:03,730 --> 00:45:07,720
critical dependency then we might ask

1131
00:45:05,980 --> 00:45:09,210
the customer if they wanna spend time

1132
00:45:07,720 --> 00:45:11,529
reviewing this specific dependency

1133
00:45:09,210 --> 00:45:13,599
because we think it makes sense from a

1134
00:45:11,529 --> 00:45:14,529
risk perspective but we've never argue

1135
00:45:13,599 --> 00:45:16,349
all the dependencies of course

1136
00:45:14,529 --> 00:45:19,390
especially if we look at javascript code

1137
00:45:16,349 --> 00:45:22,480
so in the deeper the bugs can also be of

1138
00:45:19,390 --> 00:45:24,190
course in the runtime of the outer of

1139
00:45:22,480 --> 00:45:25,990
the other language or in the OS in the

1140
00:45:24,190 --> 00:45:28,390
platform so it's not only there is not

1141
00:45:25,990 --> 00:45:29,279
only in the code written by um by the by

1142
00:45:28,390 --> 00:45:31,569
the customer

1143
00:45:29,279 --> 00:45:33,010
okay so I'll have five minutes left for

1144
00:45:31,569 --> 00:45:35,740
questions I will be happy to take

1145
00:45:33,010 --> 00:45:37,480
questions here or after my talk thank

1146
00:45:35,740 --> 00:45:39,819
you for listening I hope it was useful

1147
00:45:37,480 --> 00:45:42,279
to you and feel free to reach me by

1148
00:45:39,819 --> 00:45:44,549
Twitter or email any channel thank you

1149
00:45:42,279 --> 00:45:44,549
very much

