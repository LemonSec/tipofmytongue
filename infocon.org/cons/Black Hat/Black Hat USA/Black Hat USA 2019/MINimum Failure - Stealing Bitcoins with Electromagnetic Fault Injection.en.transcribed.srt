1
00:00:00,030 --> 00:00:03,599
good afternoon welcome to minimum

2
00:00:01,740 --> 00:00:05,609
failures stealing bitcoins with

3
00:00:03,600 --> 00:00:06,210
electromagnetic fault injection in

4
00:00:05,609 --> 00:00:09,269
Lagoon

5
00:00:06,210 --> 00:00:11,370
JKL with Colin of Flynn before we begin

6
00:00:09,269 --> 00:00:12,870
a few brief notes please stop by the

7
00:00:11,370 --> 00:00:15,209
business co-located in Mandalay Bay

8
00:00:12,870 --> 00:00:16,710
Oceanside and shoreline ballrooms on the

9
00:00:15,210 --> 00:00:17,640
level two during the day and for the

10
00:00:16,710 --> 00:00:20,100
Welcome Reception

11
00:00:17,640 --> 00:00:22,320
at 5:30 p.m. tonight right after this

12
00:00:20,100 --> 00:00:24,869
talk the black head Arsenal is in the

13
00:00:22,320 --> 00:00:26,519
business hole on level 2 also please

14
00:00:24,869 --> 00:00:30,240
join us for the pony awards in lagoon

15
00:00:26,519 --> 00:00:32,009
jkl at 6:30 p.m. in this room thank you

16
00:00:30,240 --> 00:00:33,750
for putting your phone on vibrate as

17
00:00:32,009 --> 00:00:36,300
well it makes it easier for the rest of

18
00:00:33,750 --> 00:00:38,219
us to ignore the ringing calling it's

19
00:00:36,300 --> 00:00:40,739
all yours thank you very much for that

20
00:00:38,219 --> 00:00:42,210
introduction my name is Colin Flynn and

21
00:00:40,739 --> 00:00:44,010
I'm gonna be talking to you about

22
00:00:42,210 --> 00:00:47,250
stealing bitcoins with electromagnetic

23
00:00:44,010 --> 00:00:50,160
fault injection so I sort of do two

24
00:00:47,250 --> 00:00:51,510
different things part of my life is with

25
00:00:50,160 --> 00:00:53,910
the startup I have called new AE

26
00:00:51,510 --> 00:00:55,469
technology inc and this is spun out of

27
00:00:53,910 --> 00:00:57,599
an open-source project I started called

28
00:00:55,469 --> 00:00:59,820
chip Whisperer which does side-channel

29
00:00:57,600 --> 00:01:01,050
an owl site channel power analysis and

30
00:00:59,820 --> 00:01:02,520
fault injections so there's a lot of

31
00:01:01,050 --> 00:01:05,429
open source software and hardware

32
00:01:02,520 --> 00:01:07,560
involved in that project I have some

33
00:01:05,430 --> 00:01:09,659
here with me I also work at Dalhousie

34
00:01:07,560 --> 00:01:11,909
University in the East Coast in Canada

35
00:01:09,659 --> 00:01:13,619
Halifax where I also live as an

36
00:01:11,909 --> 00:01:15,840
assistant professor working on research

37
00:01:13,619 --> 00:01:18,570
in the area as well as with local

38
00:01:15,840 --> 00:01:19,350
embedded startups all right so why are

39
00:01:18,570 --> 00:01:21,929
you here

40
00:01:19,350 --> 00:01:23,130
the last talk of the day you really want

41
00:01:21,930 --> 00:01:25,409
to be at the Welcome Reception but

42
00:01:23,130 --> 00:01:27,810
you've sat here so I'm gonna give you

43
00:01:25,409 --> 00:01:30,869
four as a reward a true history of

44
00:01:27,810 --> 00:01:33,329
blockchain me gambling with 1/3 of a

45
00:01:30,869 --> 00:01:34,909
Bitcoin physical giveaways attacking

46
00:01:33,329 --> 00:01:37,259
Bitcoin wallets and stealing things

47
00:01:34,909 --> 00:01:40,229
bonus content which isn't in the

48
00:01:37,259 --> 00:01:43,170
abstract at all crafts commercialization

49
00:01:40,229 --> 00:01:45,000
an open source tool release and fixing

50
00:01:43,170 --> 00:01:47,490
your crappy code in twenty five ish

51
00:01:45,000 --> 00:01:49,560
minutes all right that's our blockchain

52
00:01:47,490 --> 00:01:52,020
so this talk doesn't really focus on

53
00:01:49,560 --> 00:01:53,729
blockchain but a brief background made

54
00:01:52,020 --> 00:01:55,829
me help to understand why it's useful

55
00:01:53,729 --> 00:01:57,179
and what's the the interest here so

56
00:01:55,829 --> 00:01:59,939
blockchain you can sort of split into

57
00:01:57,180 --> 00:02:02,430
two things you really have number one

58
00:01:59,939 --> 00:02:04,829
the first half of it would be your block

59
00:02:02,430 --> 00:02:06,570
so this is like the concrete masonry

60
00:02:04,829 --> 00:02:09,750
unit CMU this is a North American

61
00:02:06,570 --> 00:02:10,788
standard block and you also have a chain

62
00:02:09,750 --> 00:02:13,069
so it depending on

63
00:02:10,788 --> 00:02:14,839
security you need you could change the

64
00:02:13,069 --> 00:02:17,390
change strength this is a number four

65
00:02:14,840 --> 00:02:18,590
straight link chain and so blockchain is

66
00:02:17,390 --> 00:02:20,000
really powerful because you have an

67
00:02:18,590 --> 00:02:21,620
issue like you know voting booth

68
00:02:20,000 --> 00:02:23,870
electronic voting booth needs to be

69
00:02:21,620 --> 00:02:27,739
secure so what you would do is you would

70
00:02:23,870 --> 00:02:30,530
have a block here for example and then

71
00:02:27,739 --> 00:02:32,090
you would have a chain and that's pretty

72
00:02:30,530 --> 00:02:33,409
good but the real power of blockchain

73
00:02:32,090 --> 00:02:34,579
comes in the fact that you can combine

74
00:02:33,409 --> 00:02:38,060
multiple right so now we could have

75
00:02:34,579 --> 00:02:39,439
another block chain together and then

76
00:02:38,060 --> 00:02:41,120
chained into this machine and so on so

77
00:02:39,439 --> 00:02:43,400
so blockchain actually has a lot of

78
00:02:41,120 --> 00:02:45,950
real-world uses to it

79
00:02:43,400 --> 00:02:48,439
and the initial design of blockchain you

80
00:02:45,950 --> 00:02:51,290
can actually see was for self-defense

81
00:02:48,439 --> 00:02:52,760
and security type purposes and these

82
00:02:51,290 --> 00:02:53,870
dates are accurate you can check this if

83
00:02:52,760 --> 00:02:56,120
you don't believe my history because

84
00:02:53,870 --> 00:02:59,150
this is the true history of blockchain

85
00:02:56,120 --> 00:03:02,480
in May 2008 H Simpson presented a

86
00:02:59,150 --> 00:03:03,919
concrete demonstration of blockchain for

87
00:03:02,480 --> 00:03:05,298
security purposes there's later a

88
00:03:03,919 --> 00:03:07,489
computer version that you know became

89
00:03:05,299 --> 00:03:09,079
more popular but this is the real first

90
00:03:07,489 --> 00:03:11,750
implementation of blockchain I've ever

91
00:03:09,079 --> 00:03:14,180
been able to find all right so that's

92
00:03:11,750 --> 00:03:16,040
the true history of blockchain this

93
00:03:14,180 --> 00:03:17,840
isn't in order what I'm giving you by

94
00:03:16,040 --> 00:03:19,728
the way so if you take those block

95
00:03:17,840 --> 00:03:22,040
chains and you embed it you end up with

96
00:03:19,729 --> 00:03:23,359
these hardware wallets and the idea of

97
00:03:22,040 --> 00:03:25,728
that is that if you actually are

98
00:03:23,359 --> 00:03:27,019
actually trying to use Bitcoin you have

99
00:03:25,729 --> 00:03:29,239
this issue that you know you have a

100
00:03:27,019 --> 00:03:31,340
computer and you want to send a Bitcoin

101
00:03:29,239 --> 00:03:34,010
from you on computer one to someone on

102
00:03:31,340 --> 00:03:35,299
computer two and rather than send it

103
00:03:34,010 --> 00:03:37,548
over the internet or stored on the

104
00:03:35,299 --> 00:03:40,010
computer directly we use a hardware

105
00:03:37,549 --> 00:03:41,780
wallet so the idea is that there's some

106
00:03:40,010 --> 00:03:45,739
secret that's required to send that that

107
00:03:41,780 --> 00:03:47,510
Bitcoin and that secret is only stored

108
00:03:45,739 --> 00:03:49,489
in this hardware wallet out here and

109
00:03:47,510 --> 00:03:51,649
this Hardware wallet in this case does

110
00:03:49,489 --> 00:03:55,519
the signing operation so I'm gonna send

111
00:03:51,650 --> 00:03:56,870
a Bitcoin to Josh a and it displays on

112
00:03:55,519 --> 00:04:00,409
my wallet like do you really want to

113
00:03:56,870 --> 00:04:02,359
send Josh to Bitcoin for services and it

114
00:04:00,409 --> 00:04:04,459
says on the wallet yes you want to do

115
00:04:02,359 --> 00:04:06,829
this and you hit it and the wallet signs

116
00:04:04,459 --> 00:04:08,720
the request so now I don't necessarily

117
00:04:06,829 --> 00:04:11,720
have to trust my computer isn't

118
00:04:08,720 --> 00:04:13,370
compromised because the this external

119
00:04:11,720 --> 00:04:16,009
device is doing the signing and sending

120
00:04:13,370 --> 00:04:17,418
it off to computer - alright so that's

121
00:04:16,009 --> 00:04:18,859
pretty good it's pretty important right

122
00:04:17,418 --> 00:04:20,870
and the important thing is that we have

123
00:04:18,858 --> 00:04:22,489
some private key so the private key is

124
00:04:20,870 --> 00:04:22,790
used in signing that we should never be

125
00:04:22,490 --> 00:04:25,430
able to

126
00:04:22,790 --> 00:04:27,020
recover there's a bunch of different

127
00:04:25,430 --> 00:04:28,970
wallets if you look at the market for

128
00:04:27,020 --> 00:04:31,370
this you'll be amazed like how how many

129
00:04:28,970 --> 00:04:34,070
there are so I'm looking at particular

130
00:04:31,370 --> 00:04:35,780
at treasure treasure is open source this

131
00:04:34,070 --> 00:04:37,219
is nice because you can validate the

132
00:04:35,780 --> 00:04:39,380
code you can modify it you can see what

133
00:04:37,220 --> 00:04:40,880
the true effect is and a lot of what I'm

134
00:04:39,380 --> 00:04:42,650
talking about applies to other things

135
00:04:40,880 --> 00:04:45,980
like embedded systems you know outside

136
00:04:42,650 --> 00:04:47,539
of just pure Bitcoin wallets treasure

137
00:04:45,980 --> 00:04:48,830
did fix this problem so I'm going to be

138
00:04:47,540 --> 00:04:50,480
talking about things and if you have the

139
00:04:48,830 --> 00:04:53,930
latest firmware patch it's already been

140
00:04:50,480 --> 00:04:57,080
fixed so this has been previously dealt

141
00:04:53,930 --> 00:04:59,240
with so in particular on the treasure

142
00:04:57,080 --> 00:05:00,620
devices they have this recovery seed so

143
00:04:59,240 --> 00:05:02,480
when you set up the wallet it displays a

144
00:05:00,620 --> 00:05:04,370
bunch of words to you this is called the

145
00:05:02,480 --> 00:05:08,090
recovery seed and they really

146
00:05:04,370 --> 00:05:09,890
specifically say you know if the device

147
00:05:08,090 --> 00:05:11,810
has lost damaged or stolen you can use a

148
00:05:09,890 --> 00:05:14,570
recovery city to restore access to the

149
00:05:11,810 --> 00:05:16,640
entire wallet so all you need to do is

150
00:05:14,570 --> 00:05:18,740
you put the recovery seed into a new

151
00:05:16,640 --> 00:05:20,300
device I should know you can optionally

152
00:05:18,740 --> 00:05:21,920
use a password protection for the

153
00:05:20,300 --> 00:05:24,260
recovery seed which isn't on by default

154
00:05:21,920 --> 00:05:25,990
but if you do that that also eliminates

155
00:05:24,260 --> 00:05:28,670
the attack and presenting because what I

156
00:05:25,990 --> 00:05:32,450
recovering is just that sort of recovery

157
00:05:28,670 --> 00:05:34,760
seed there so the treasure itself that

158
00:05:32,450 --> 00:05:38,300
looks like this if you open it up it has

159
00:05:34,760 --> 00:05:39,530
the stm32 f2 inside it's already heard a

160
00:05:38,300 --> 00:05:41,390
little bit about that if you're at the

161
00:05:39,530 --> 00:05:42,650
chip table fail talk and so you can see

162
00:05:41,390 --> 00:05:45,289
there's not much to this there's just a

163
00:05:42,650 --> 00:05:49,280
microcontroller USB some buttons and a

164
00:05:45,290 --> 00:05:52,130
display basically in a clock and getting

165
00:05:49,280 --> 00:05:54,530
the recovery seed so this was presented

166
00:05:52,130 --> 00:05:57,530
at CCC by two people there and one

167
00:05:54,530 --> 00:05:59,000
person not here Dmitry Josh and Thomas

168
00:05:57,530 --> 00:06:02,090
so they basically were the first people

169
00:05:59,000 --> 00:06:03,620
to show a glitch attack on this device

170
00:06:02,090 --> 00:06:06,590
to actually get the recovery seed out

171
00:06:03,620 --> 00:06:08,300
and this attack attacked the key one it

172
00:06:06,590 --> 00:06:11,270
was an SRAM so when you do an update

173
00:06:08,300 --> 00:06:13,010
process basically the the key gets

174
00:06:11,270 --> 00:06:15,260
copied to SRAM you could read the key

175
00:06:13,010 --> 00:06:17,750
out of SRAM by changing the code

176
00:06:15,260 --> 00:06:20,599
protection level and then you had the

177
00:06:17,750 --> 00:06:22,520
private key it requires physical access

178
00:06:20,600 --> 00:06:24,200
but I mean it's a pretty reliable glitch

179
00:06:22,520 --> 00:06:26,359
so it's not like physical access was a

180
00:06:24,200 --> 00:06:28,010
serious problem the only downside of

181
00:06:26,360 --> 00:06:29,900
this is maybe if you had physical access

182
00:06:28,010 --> 00:06:31,490
it could leave some sort of obvious

183
00:06:29,900 --> 00:06:33,080
tampering you know you'd have to either

184
00:06:31,490 --> 00:06:35,090
clone it or something like that to get

185
00:06:33,080 --> 00:06:36,109
rid of that so what I was kind of

186
00:06:35,090 --> 00:06:39,859
curious

187
00:06:36,110 --> 00:06:41,720
is how else could this be done and I got

188
00:06:39,860 --> 00:06:43,460
really curious about it because to meet

189
00:06:41,720 --> 00:06:46,940
you is tell them you know these 24 seeds

190
00:06:43,460 --> 00:06:49,039
there it's a string in RAM so it's not

191
00:06:46,940 --> 00:06:50,930
like a encrypted binary and you'd get

192
00:06:49,039 --> 00:06:51,409
the dump and you say what am I looking

193
00:06:50,930 --> 00:06:53,180
at

194
00:06:51,409 --> 00:06:56,539
you literally are looking like a string

195
00:06:53,180 --> 00:06:58,639
in RAM so it was sort of them doing this

196
00:06:56,539 --> 00:07:00,169
and him explaining how this work to me

197
00:06:58,639 --> 00:07:00,590
that got me interested in what else I

198
00:07:00,169 --> 00:07:02,030
could do

199
00:07:00,590 --> 00:07:03,349
so you started thinking about how else

200
00:07:02,030 --> 00:07:05,330
could you get that stuff out right so

201
00:07:03,349 --> 00:07:07,210
the SRAM is one thing but they're

202
00:07:05,330 --> 00:07:11,719
actually stored in flash so the real

203
00:07:07,210 --> 00:07:14,030
secure data is stored in flash and it's

204
00:07:11,719 --> 00:07:15,469
copied SRAM temporarily so I was curious

205
00:07:14,030 --> 00:07:19,489
about getting it directly out of flash

206
00:07:15,469 --> 00:07:21,650
memory so what we have here is this is

207
00:07:19,490 --> 00:07:23,719
the memory layout of the treasured

208
00:07:21,650 --> 00:07:26,060
device and this is not because I'm a

209
00:07:23,719 --> 00:07:28,460
great reverse engineer not a reversing

210
00:07:26,060 --> 00:07:30,080
trainer at all not even great this is

211
00:07:28,460 --> 00:07:32,180
because it's open source so you can just

212
00:07:30,080 --> 00:07:34,099
get the map when you compile it or in

213
00:07:32,180 --> 00:07:36,710
their documentation so that's part of

214
00:07:34,099 --> 00:07:38,719
what makes this so so handy the fact

215
00:07:36,710 --> 00:07:40,370
that it's open source and in particular

216
00:07:38,719 --> 00:07:42,680
what you can see is that the recovery

217
00:07:40,370 --> 00:07:45,740
seed and the device pin are saved that

218
00:07:42,680 --> 00:07:48,259
there's one block of memory up here so

219
00:07:45,740 --> 00:07:52,759
you can see addresses and they go from

220
00:07:48,259 --> 00:07:55,460
low to high by the lower address here is

221
00:07:52,759 --> 00:07:57,259
the bootloader and in this bootloader is

222
00:07:55,460 --> 00:07:59,479
there something that we could exploit to

223
00:07:57,259 --> 00:08:01,550
read out the recovery seat and

224
00:07:59,479 --> 00:08:04,180
particularly what I wanted to look at is

225
00:08:01,550 --> 00:08:06,889
some sort of buffer in the bootloader

226
00:08:04,180 --> 00:08:08,930
that's supposed to be read but we could

227
00:08:06,889 --> 00:08:12,259
instead keep reading to read this

228
00:08:08,930 --> 00:08:14,870
sensitive data out really easily and a

229
00:08:12,259 --> 00:08:16,099
prime target for this is USB so USB when

230
00:08:14,870 --> 00:08:18,770
you plug it in it has something called

231
00:08:16,099 --> 00:08:21,800
USB descriptors what these descriptors

232
00:08:18,770 --> 00:08:23,628
do is they send to the computer a

233
00:08:21,800 --> 00:08:25,849
description of you know I am whatever

234
00:08:23,629 --> 00:08:27,590
Bitcoin wallet I am a keyboard something

235
00:08:25,849 --> 00:08:30,440
like that they're just big strikes

236
00:08:27,590 --> 00:08:33,169
effectively and when the computer

237
00:08:30,440 --> 00:08:35,208
requests to read them we have something

238
00:08:33,169 --> 00:08:37,429
called this W length field so the

239
00:08:35,208 --> 00:08:39,708
computer says please send me up to a 64

240
00:08:37,429 --> 00:08:42,078
K of descriptor or up to 128 bytes of

241
00:08:39,708 --> 00:08:44,510
descriptor whatever it is the device

242
00:08:42,078 --> 00:08:46,520
will then send back you know okay the

243
00:08:44,510 --> 00:08:49,470
thing you're requesting is only 500

244
00:08:46,520 --> 00:08:51,509
bytes or is only 16 bytes or whatever

245
00:08:49,470 --> 00:08:53,160
so it only sends back the the actual

246
00:08:51,509 --> 00:08:55,350
size of the descriptor right because

247
00:08:53,160 --> 00:08:56,879
it's just some chunk of memory and the

248
00:08:55,350 --> 00:09:00,449
reason we have this field is that the

249
00:08:56,879 --> 00:09:03,029
computer could ask for less so the

250
00:09:00,449 --> 00:09:04,769
design of USB by specs as you know the

251
00:09:03,029 --> 00:09:06,149
computer could say please give me eight

252
00:09:04,769 --> 00:09:08,370
bytes only I want eight bytes of memory

253
00:09:06,149 --> 00:09:10,199
and that's it and the device just sends

254
00:09:08,370 --> 00:09:12,569
back eight bytes so the device has to

255
00:09:10,199 --> 00:09:13,889
check this value to see if it should be

256
00:09:12,569 --> 00:09:17,219
you know sending back even less data

257
00:09:13,889 --> 00:09:19,410
than it wants to send back so how do we

258
00:09:17,220 --> 00:09:21,990
do this in C so if you take a look at

259
00:09:19,410 --> 00:09:24,360
the source code in the USB source and

260
00:09:21,990 --> 00:09:26,430
most USB stacks have something like this

261
00:09:24,360 --> 00:09:30,389
you have this like men so it says send

262
00:09:26,430 --> 00:09:33,689
the minimum of the length the user the

263
00:09:30,389 --> 00:09:36,209
the USB host stack sent in or how big

264
00:09:33,689 --> 00:09:38,040
the actual structure is in memory right

265
00:09:36,209 --> 00:09:41,310
so it's whichever is smaller that's how

266
00:09:38,040 --> 00:09:43,709
much data we're gonna send back and if

267
00:09:41,310 --> 00:09:47,459
we take a look at the assembly version

268
00:09:43,709 --> 00:09:52,079
of that what you see is that the length

269
00:09:47,459 --> 00:09:54,719
of data is actually loaded first from

270
00:09:52,079 --> 00:09:56,670
the computer so that the host value the

271
00:09:54,720 --> 00:10:02,279
W length value is loaded into register

272
00:09:56,670 --> 00:10:03,899
r1 it compares air one with the value

273
00:10:02,279 --> 00:10:05,730
that it's the maximum size that it

274
00:10:03,899 --> 00:10:08,009
should be sending back and if the

275
00:10:05,730 --> 00:10:10,290
computer rested too much it then over

276
00:10:08,009 --> 00:10:11,930
writes that so if you're at tripped out

277
00:10:10,290 --> 00:10:14,370
fail you would have seen immediately

278
00:10:11,930 --> 00:10:15,899
like okay glitching is great for this

279
00:10:14,370 --> 00:10:17,759
because we just saw how easy glitching

280
00:10:15,899 --> 00:10:19,410
could be done and that's what we're

281
00:10:17,759 --> 00:10:21,029
gonna look at right so if we could skip

282
00:10:19,410 --> 00:10:22,889
some of these checks or cause them to be

283
00:10:21,029 --> 00:10:24,630
formed incorrectly all of a sudden this

284
00:10:22,889 --> 00:10:27,060
length value here is going to be used

285
00:10:24,630 --> 00:10:29,610
and it's gonna be used and I can set

286
00:10:27,060 --> 00:10:32,819
that to ffff I can set it to like 65 K

287
00:10:29,610 --> 00:10:34,829
of memory rather than do the glitch

288
00:10:32,819 --> 00:10:37,680
first so it's like a lazy first test

289
00:10:34,829 --> 00:10:40,349
what I did is the firmware was compiled

290
00:10:37,680 --> 00:10:42,888
so I took a treasure wallet I poorly as

291
00:10:40,350 --> 00:10:45,029
you can see by the overheated LCD

292
00:10:42,889 --> 00:10:46,769
disordered the chip on it because it

293
00:10:45,029 --> 00:10:49,259
doesn't have JPEG enabled you can't

294
00:10:46,769 --> 00:10:52,559
reload it as easily and soldered a new

295
00:10:49,259 --> 00:10:54,509
chip on that and then connected debugger

296
00:10:52,559 --> 00:10:56,730
so that I could run the code I could run

297
00:10:54,509 --> 00:10:58,559
the exact same code except I could skip

298
00:10:56,730 --> 00:11:00,089
that check without actually doing any

299
00:10:58,559 --> 00:11:02,569
work at all so I could skip the check

300
00:11:00,089 --> 00:11:05,900
and I could confirm that normally it's

301
00:11:02,570 --> 00:11:09,470
back 146 bytes and when I do this skip

302
00:11:05,900 --> 00:11:11,810
it sends back 65 K so I know this is in

303
00:11:09,470 --> 00:11:15,050
theory going to work if I can do that

304
00:11:11,810 --> 00:11:17,300
skip and get it to work and inside that

305
00:11:15,050 --> 00:11:21,469
65 K the other thing I could validate is

306
00:11:17,300 --> 00:11:23,990
that you know that memory has originally

307
00:11:21,470 --> 00:11:25,310
the descriptors and it just keeps going

308
00:11:23,990 --> 00:11:27,800
and keeps going and eventually it has

309
00:11:25,310 --> 00:11:29,660
this sensitive information which here

310
00:11:27,800 --> 00:11:31,640
it's one of these recovery seeds so it's

311
00:11:29,660 --> 00:11:33,910
just a bunch of English strings

312
00:11:31,640 --> 00:11:36,170
effectively that store the private key

313
00:11:33,910 --> 00:11:37,400
and there would be a pin and stuff in

314
00:11:36,170 --> 00:11:41,300
here but I didn't set a pen on this

315
00:11:37,400 --> 00:11:43,520
example one so how I'm going to induce a

316
00:11:41,300 --> 00:11:45,170
fault is using something called magnetic

317
00:11:43,520 --> 00:11:47,329
fault injection electromagnetic fault

318
00:11:45,170 --> 00:11:48,890
injection basically what we have is like

319
00:11:47,330 --> 00:11:51,110
in the transformer or anything like that

320
00:11:48,890 --> 00:11:53,830
you have a coil of wire I have another

321
00:11:51,110 --> 00:11:56,810
coil of wire somewhere else and if we

322
00:11:53,830 --> 00:12:01,550
pass currents through that that first

323
00:11:56,810 --> 00:12:03,680
loop its inducing current its inducing a

324
00:12:01,550 --> 00:12:05,240
voltage in this second loop the changing

325
00:12:03,680 --> 00:12:07,189
magnetic field so it's actually that how

326
00:12:05,240 --> 00:12:09,740
fast that field changes induces a

327
00:12:07,190 --> 00:12:11,780
voltage in another loop of wire well if

328
00:12:09,740 --> 00:12:13,700
we put a chip here right like chips have

329
00:12:11,780 --> 00:12:16,459
things inside them that probably look

330
00:12:13,700 --> 00:12:18,200
kind of like wires so if you induce it

331
00:12:16,460 --> 00:12:20,540
in a chip there's going to be structures

332
00:12:18,200 --> 00:12:23,330
that will also generate voltages on the

333
00:12:20,540 --> 00:12:25,160
die so we're basically just causing

334
00:12:23,330 --> 00:12:26,720
voltages to be induced on the die

335
00:12:25,160 --> 00:12:27,490
without actually needing physical

336
00:12:26,720 --> 00:12:29,690
contact

337
00:12:27,490 --> 00:12:31,700
so coils you know look something like

338
00:12:29,690 --> 00:12:33,860
this in real life this additional thing

339
00:12:31,700 --> 00:12:36,350
in the middle here is a ferrite so it's

340
00:12:33,860 --> 00:12:39,800
a material that's very conductive to

341
00:12:36,350 --> 00:12:41,180
magnetic fields effectively and this is

342
00:12:39,800 --> 00:12:43,849
what the set up looks like so I have a

343
00:12:41,180 --> 00:12:45,380
device called chip chartres this is tool

344
00:12:43,850 --> 00:12:47,510
I make that does electromagnetic fault

345
00:12:45,380 --> 00:12:50,810
injection we have a little tip so this

346
00:12:47,510 --> 00:12:53,330
tip is a smaller coil right here and we

347
00:12:50,810 --> 00:12:57,109
have a treasure wallet here and there's

348
00:12:53,330 --> 00:12:58,670
two screws that push on the buttons to

349
00:12:57,110 --> 00:13:01,430
force it to go into bootloader mode when

350
00:12:58,670 --> 00:13:03,020
it turns on and you'll notice so there's

351
00:13:01,430 --> 00:13:05,120
no hole or anything here like these

352
00:13:03,020 --> 00:13:06,890
screws are just holding it down this is

353
00:13:05,120 --> 00:13:08,360
going directly through the case of the

354
00:13:06,890 --> 00:13:10,910
device so we don't actually need to

355
00:13:08,360 --> 00:13:13,790
modify the device in any meaningful way

356
00:13:10,910 --> 00:13:15,709
to get this to work the other thing we

357
00:13:13,790 --> 00:13:16,849
need to know is when is that comparison

358
00:13:15,710 --> 00:13:20,060
happening

359
00:13:16,850 --> 00:13:22,130
so I use the USB packets going into the

360
00:13:20,060 --> 00:13:24,650
device as a trigger and in this case we

361
00:13:22,130 --> 00:13:26,420
have a total beagle a total phase beagle

362
00:13:24,650 --> 00:13:28,160
I'm using which is a very nice USB

363
00:13:26,420 --> 00:13:30,260
analyzer that has some trigger

364
00:13:28,160 --> 00:13:34,189
capability so I can set a trigger to say

365
00:13:30,260 --> 00:13:36,680
you know hex c02 one is going to trigger

366
00:13:34,190 --> 00:13:38,990
this device the only downside to it is

367
00:13:36,680 --> 00:13:40,939
it's relatively expensive so that's a

368
00:13:38,990 --> 00:13:45,140
problem I'm also saw solving in this

369
00:13:40,940 --> 00:13:46,700
presentation but basically I know okay

370
00:13:45,140 --> 00:13:48,740
when I send that request to the device

371
00:13:46,700 --> 00:13:50,000
at some point very shortly after that

372
00:13:48,740 --> 00:13:52,220
request it's going to process at

373
00:13:50,000 --> 00:13:54,020
including doing this that length track

374
00:13:52,220 --> 00:13:56,779
so we can kind of sweep through and try

375
00:13:54,020 --> 00:13:58,279
to find where that length track is so to

376
00:13:56,779 --> 00:14:02,089
do the full trigger with my original

377
00:13:58,279 --> 00:14:04,790
setup I basically have a beagle 480 this

378
00:14:02,089 --> 00:14:06,529
generates a single logic level trigger I

379
00:14:04,790 --> 00:14:07,969
need to be able to sweep that trigger so

380
00:14:06,529 --> 00:14:11,360
in my case I use this chip whisperer

381
00:14:07,970 --> 00:14:13,670
FPGA to adjust where the glitch is being

382
00:14:11,360 --> 00:14:15,560
inserted so to sweep the glitch it then

383
00:14:13,670 --> 00:14:18,709
generates a logic level signal to this

384
00:14:15,560 --> 00:14:22,579
EMF iDevice chip shelter and which then

385
00:14:18,710 --> 00:14:24,050
can trigger on the treasure itself we

386
00:14:22,580 --> 00:14:27,560
have a USB switch so we need to hard

387
00:14:24,050 --> 00:14:29,990
cycle the device because it's it's often

388
00:14:27,560 --> 00:14:31,520
gonna crash as we'll see so to replace

389
00:14:29,990 --> 00:14:34,100
these three devices

390
00:14:31,520 --> 00:14:37,240
I made an open-source tool called 5

391
00:14:34,100 --> 00:14:39,800
whisper USB so basically to replace the

392
00:14:37,240 --> 00:14:41,660
USB triggering to replace the needing to

393
00:14:39,800 --> 00:14:43,729
sweep the glitch and to replace the

394
00:14:41,660 --> 00:14:46,010
power cycling there's basically this

395
00:14:43,730 --> 00:14:48,500
board that has a USB front end so low

396
00:14:46,010 --> 00:14:50,510
speed full speed high speed an FPGA and

397
00:14:48,500 --> 00:14:52,640
a microcontroller for doing the download

398
00:14:50,510 --> 00:14:53,990
it works a bit as a sniffer there's no

399
00:14:52,640 --> 00:14:56,060
onboard memory so the significant

400
00:14:53,990 --> 00:14:59,330
capability is a little more limited and

401
00:14:56,060 --> 00:15:01,880
you can drive various fault injection

402
00:14:59,330 --> 00:15:03,200
board so here I am using EMF I if you

403
00:15:01,880 --> 00:15:05,959
use some chip top fail tools you could

404
00:15:03,200 --> 00:15:08,959
sort of connect that in to actually

405
00:15:05,959 --> 00:15:11,150
insert the glitch itself and you can see

406
00:15:08,959 --> 00:15:12,680
so this is up now on github the they're

407
00:15:11,150 --> 00:15:16,100
designed for that it's a bit of an

408
00:15:12,680 --> 00:15:17,630
ongoing design so you can take a look at

409
00:15:16,100 --> 00:15:20,570
it if you want I have some PCBs here

410
00:15:17,630 --> 00:15:23,060
I'll talk about after yeah

411
00:15:20,570 --> 00:15:25,670
so open source tool release crash

412
00:15:23,060 --> 00:15:28,040
commercialization so there's now if you

413
00:15:25,670 --> 00:15:30,319
would like to just buy one instead of

414
00:15:28,040 --> 00:15:31,610
building it I'm working on a crowd

415
00:15:30,320 --> 00:15:33,350
supply so this is trying to make it

416
00:15:31,610 --> 00:15:35,480
available to everyone by getting enough

417
00:15:33,350 --> 00:15:38,020
people interested in it and that might

418
00:15:35,480 --> 00:15:40,040
actually would like one of these devices

419
00:15:38,020 --> 00:15:44,660
okay done

420
00:15:40,040 --> 00:15:49,699
EMF I demo all right so I'll show you

421
00:15:44,660 --> 00:15:52,370
what EMF I kind of looks like and okay

422
00:15:49,700 --> 00:15:58,640
so this is a treasure attached to the

423
00:15:52,370 --> 00:16:00,140
computer here and you can see right this

424
00:15:58,640 --> 00:16:02,510
is how much I trust I'm not gonna blow

425
00:16:00,140 --> 00:16:04,010
it up there used to be one Bitcoin cuz

426
00:16:02,510 --> 00:16:06,200
this was when I did the disclosure they

427
00:16:04,010 --> 00:16:09,860
gave me a Bitcoin but then I spent a bit

428
00:16:06,200 --> 00:16:12,800
on beer-making equipment so so Bitcoin

429
00:16:09,860 --> 00:16:14,120
has a use I discovered okay so you see I

430
00:16:12,800 --> 00:16:14,839
disconnected it and it's it's

431
00:16:14,120 --> 00:16:22,820
disappeared

432
00:16:14,840 --> 00:16:25,010
anyway let's take a look at that okay so

433
00:16:22,820 --> 00:16:26,480
here's the treasure so it's right now

434
00:16:25,010 --> 00:16:28,760
it's it's connected to the computer so

435
00:16:26,480 --> 00:16:34,340
it's asking for a pin and I'm going to

436
00:16:28,760 --> 00:16:36,590
turn on a fault injection tool and

437
00:16:34,340 --> 00:16:39,590
basically this just discharges high

438
00:16:36,590 --> 00:16:41,210
voltage into this tip here and then when

439
00:16:39,590 --> 00:16:46,270
I hold this button down it's going to

440
00:16:41,210 --> 00:16:50,090
discharge so let's get better view

441
00:16:46,270 --> 00:16:51,500
hopefully that's not bad what I want you

442
00:16:50,090 --> 00:16:53,480
to see is right I'm gonna slowly come

443
00:16:51,500 --> 00:16:55,700
near it and you'll see even without sort

444
00:16:53,480 --> 00:16:57,080
of okay there you go great like without

445
00:16:55,700 --> 00:16:58,730
touching it I'm sort of a few

446
00:16:57,080 --> 00:17:00,560
millimeters away you're able to cause

447
00:16:58,730 --> 00:17:02,630
weird stuff to happen so this device has

448
00:17:00,560 --> 00:17:04,490
already this is before the fix was done

449
00:17:02,630 --> 00:17:07,069
right they're trying to detect weird

450
00:17:04,490 --> 00:17:09,829
things like clock instability and other

451
00:17:07,069 --> 00:17:11,208
tricky business people are doing so now

452
00:17:09,829 --> 00:17:14,389
you'd have to power cycle it or you just

453
00:17:11,209 --> 00:17:17,240
reset it with this and so you see like

454
00:17:14,390 --> 00:17:18,709
unofficial firmware detected right so

455
00:17:17,240 --> 00:17:21,770
it's it's somehow corrupted the firmware

456
00:17:18,709 --> 00:17:23,660
check and just reset it again heard

457
00:17:21,770 --> 00:17:27,109
fault so you will get very you'll

458
00:17:23,660 --> 00:17:28,520
trigger various errors on the device so

459
00:17:27,109 --> 00:17:30,050
obviously this needs a trigger so that's

460
00:17:28,520 --> 00:17:32,960
where the us but if I whisper bug comes

461
00:17:30,050 --> 00:17:35,629
in you saw stack smashing detected there

462
00:17:32,960 --> 00:17:37,280
you go for one second so they have this

463
00:17:35,630 --> 00:17:39,860
they have various detection things put

464
00:17:37,280 --> 00:17:41,050
in but it's pretty cool rate that it's

465
00:17:39,860 --> 00:17:45,149
just done through the include

466
00:17:41,050 --> 00:17:48,340
like if I let me reset it first okay so

467
00:17:45,150 --> 00:17:53,200
if I kind of slowly come in and you can

468
00:17:48,340 --> 00:17:54,939
just see the display okay oops there's a

469
00:17:53,200 --> 00:17:56,800
few different ones but you can see right

470
00:17:54,940 --> 00:17:58,720
it's it's it's completely through the

471
00:17:56,800 --> 00:18:00,960
enclosure of the device so that's the

472
00:17:58,720 --> 00:18:03,690
pretty cool thing about that is that

473
00:18:00,960 --> 00:18:06,130
we're now talking about faults that

474
00:18:03,690 --> 00:18:08,260
don't need even like that level of

475
00:18:06,130 --> 00:18:10,750
physical access to be inserted right and

476
00:18:08,260 --> 00:18:13,810
with Bitcoin okay so this is bonus

477
00:18:10,750 --> 00:18:16,390
content since submitting I'm giving a

478
00:18:13,810 --> 00:18:18,250
longer paper presented at whoo so I

479
00:18:16,390 --> 00:18:19,630
present you bonus content as well that's

480
00:18:18,250 --> 00:18:22,540
something that I discovered you could do

481
00:18:19,630 --> 00:18:25,510
as well this is an open source fight or

482
00:18:22,540 --> 00:18:27,190
two authentication key so how these Keys

483
00:18:25,510 --> 00:18:28,540
work very briefly you know if you plug

484
00:18:27,190 --> 00:18:31,360
into your computer for two fact or a

485
00:18:28,540 --> 00:18:34,030
something like that the token generates

486
00:18:31,360 --> 00:18:35,649
a public and private ECC key pair that's

487
00:18:34,030 --> 00:18:37,750
specific to every service that's

488
00:18:35,650 --> 00:18:40,420
registered with so it's going to send

489
00:18:37,750 --> 00:18:43,090
the public key to you know whatever

490
00:18:40,420 --> 00:18:45,220
Microsoft comm or something

491
00:18:43,090 --> 00:18:47,050
it says the public key to whatever

492
00:18:45,220 --> 00:18:49,120
service it's registered with that

493
00:18:47,050 --> 00:18:50,680
service then stores that public key and

494
00:18:49,120 --> 00:18:54,820
the private key is inside the device

495
00:18:50,680 --> 00:18:57,400
later the website or app sends a

496
00:18:54,820 --> 00:18:59,350
challenge to the token the token signs

497
00:18:57,400 --> 00:19:01,990
it with the private key it previously

498
00:18:59,350 --> 00:19:05,909
generated and it now can send the

499
00:19:01,990 --> 00:19:08,410
response and the this app can verify and

500
00:19:05,910 --> 00:19:10,300
these tokens are getting more and more

501
00:19:08,410 --> 00:19:12,280
popular so there's like this password

502
00:19:10,300 --> 00:19:13,720
protection stuff going on now where you

503
00:19:12,280 --> 00:19:16,840
don't even have a password you just have

504
00:19:13,720 --> 00:19:20,590
a token and if you take a look at the

505
00:19:16,840 --> 00:19:23,320
token so the solo key has in it a

506
00:19:20,590 --> 00:19:25,179
signing key and if you kind of look a

507
00:19:23,320 --> 00:19:27,159
little bit up in memory you'll see a hid

508
00:19:25,180 --> 00:19:30,610
descriptor so in this case this is an

509
00:19:27,160 --> 00:19:33,550
SRAM and you know it's it's pretty

510
00:19:30,610 --> 00:19:35,979
nearby and you also see the same men

511
00:19:33,550 --> 00:19:37,899
deal going on and once again you can

512
00:19:35,980 --> 00:19:41,170
verify first really easily that if you

513
00:19:37,900 --> 00:19:43,750
skip this check it's gonna jump up to 65

514
00:19:41,170 --> 00:19:44,920
km memory one thing I'll note is you

515
00:19:43,750 --> 00:19:46,600
might say that okay Collin but you're

516
00:19:44,920 --> 00:19:47,890
cheating because this is open source and

517
00:19:46,600 --> 00:19:50,439
you could see the memory layer and know

518
00:19:47,890 --> 00:19:52,810
where the ECC key is it's not actually

519
00:19:50,440 --> 00:19:54,130
that bad so normally if you're attacking

520
00:19:52,810 --> 00:19:56,350
say like a

521
00:19:54,130 --> 00:19:58,570
black box device you could do this

522
00:19:56,350 --> 00:19:59,860
registration step with it it would be

523
00:19:58,570 --> 00:20:02,139
like a new web app and I hit the button

524
00:19:59,860 --> 00:20:05,169
and pretend to register I get the public

525
00:20:02,140 --> 00:20:07,930
key for a private key that I don't care

526
00:20:05,170 --> 00:20:09,490
about but I do this attack I get the

527
00:20:07,930 --> 00:20:11,530
memory layout and then it's very easy to

528
00:20:09,490 --> 00:20:14,620
check if a private key in a standard

529
00:20:11,530 --> 00:20:15,879
format is stored in memory that matches

530
00:20:14,620 --> 00:20:17,590
the public key and then I know the

531
00:20:15,880 --> 00:20:19,270
location where it's storing the key and

532
00:20:17,590 --> 00:20:22,959
the format and stuff and then I could

533
00:20:19,270 --> 00:20:25,210
attack a key I really care about as a

534
00:20:22,960 --> 00:20:27,280
note to there's you know this is one

535
00:20:25,210 --> 00:20:27,910
Fido two key or Fido key there's a bunch

536
00:20:27,280 --> 00:20:30,639
of different ones

537
00:20:27,910 --> 00:20:32,200
there's a recent authentication level

538
00:20:30,640 --> 00:20:34,480
that's actually looking at protection

539
00:20:32,200 --> 00:20:35,860
against this I think like Yubikey five

540
00:20:34,480 --> 00:20:37,390
for example should be reaching these

541
00:20:35,860 --> 00:20:40,360
higher level so don't expect this to

542
00:20:37,390 --> 00:20:41,980
work on every device things aren't yet

543
00:20:40,360 --> 00:20:44,260
certified this is fairly new so if you

544
00:20:41,980 --> 00:20:45,580
go look for the tokens what you might

545
00:20:44,260 --> 00:20:47,830
notice these you might say that go why

546
00:20:45,580 --> 00:20:49,510
do they all say level one because it's

547
00:20:47,830 --> 00:20:52,060
fairly new it's not because everything

548
00:20:49,510 --> 00:20:54,040
is super vulnerable to this it's the

549
00:20:52,060 --> 00:20:56,639
particular token I look at had this

550
00:20:54,040 --> 00:21:00,639
issue and they actually solved it in in

551
00:20:56,640 --> 00:21:03,040
firmware release already all right yeah

552
00:21:00,640 --> 00:21:04,330
how concerned should you be so as part

553
00:21:03,040 --> 00:21:06,550
of fixing your code you might question

554
00:21:04,330 --> 00:21:08,439
how concerned should you be so is your

555
00:21:06,550 --> 00:21:09,850
device using usb obviously and I'm

556
00:21:08,440 --> 00:21:13,600
talking about this specific attack you

557
00:21:09,850 --> 00:21:16,449
can relax don't worry about it is the

558
00:21:13,600 --> 00:21:18,010
sensitive data it's using USB but do you

559
00:21:16,450 --> 00:21:21,820
have sensitive data in the same memory

560
00:21:18,010 --> 00:21:23,200
space as USB so for example some

561
00:21:21,820 --> 00:21:24,879
authentication tokens have a separate

562
00:21:23,200 --> 00:21:26,890
USB memory controller in a separate

563
00:21:24,880 --> 00:21:28,450
secure element so it's a little

564
00:21:26,890 --> 00:21:30,760
questionable if you could actually even

565
00:21:28,450 --> 00:21:34,600
read out of memory so if not again this

566
00:21:30,760 --> 00:21:36,250
is this specific attack is irrelevant is

567
00:21:34,600 --> 00:21:39,639
it in the same memory space but it's

568
00:21:36,250 --> 00:21:41,110
within 64k of any USB data if not you

569
00:21:39,640 --> 00:21:42,280
should be a little suspicious there

570
00:21:41,110 --> 00:21:46,000
could be something going on right there

571
00:21:42,280 --> 00:21:47,649
could be a way to get this to work but

572
00:21:46,000 --> 00:21:49,420
if it is then you should be really like

573
00:21:47,650 --> 00:21:50,860
concerned about this type of attack and

574
00:21:49,420 --> 00:21:53,050
you should be looking at your USB stacks

575
00:21:50,860 --> 00:21:55,120
and there's a whole bunch like this min

576
00:21:53,050 --> 00:21:59,680
stuff is in basically all the USB stacks

577
00:21:55,120 --> 00:22:01,959
i looked at okay so how to fix it why

578
00:21:59,680 --> 00:22:03,700
you send back 64k of memory no

579
00:22:01,960 --> 00:22:06,940
descriptors are that big

580
00:22:03,700 --> 00:22:07,900
you can armor memory sections so you can

581
00:22:06,940 --> 00:22:11,980
have like a sensitive member

582
00:22:07,900 --> 00:22:13,660
resection and IO memory section and you

583
00:22:11,980 --> 00:22:17,320
can also move some memory mayor layouts

584
00:22:13,660 --> 00:22:18,430
around so if you move the memory layered

585
00:22:17,320 --> 00:22:20,290
around you could try to make it so you

586
00:22:18,430 --> 00:22:21,850
can't read into sensitive data this

587
00:22:20,290 --> 00:22:23,379
isn't as good if you have proper memory

588
00:22:21,850 --> 00:22:24,790
protection and stuff because you might

589
00:22:23,380 --> 00:22:27,130
be able to still corrupt your way into

590
00:22:24,790 --> 00:22:29,050
it the other thing is for most of these

591
00:22:27,130 --> 00:22:31,120
attacks right like I'm relying on a dumb

592
00:22:29,050 --> 00:22:33,850
dump to tell me something so it's either

593
00:22:31,120 --> 00:22:35,979
unencrypted or I can do this ECC private

594
00:22:33,850 --> 00:22:38,709
to public key trick so the other thing

595
00:22:35,980 --> 00:22:42,940
is encrypting in place yeah tries are

596
00:22:38,710 --> 00:22:44,650
fixed it so Loki fixed at physical

597
00:22:42,940 --> 00:22:46,720
giveaways but takeaways first

598
00:22:44,650 --> 00:22:48,370
okay so sample tamper resistant

599
00:22:46,720 --> 00:22:50,890
enclosures aren't enough when discussing

600
00:22:48,370 --> 00:22:54,070
near physical attacks these commercial

601
00:22:50,890 --> 00:22:56,800
EFI tools exist and can be kind of

602
00:22:54,070 --> 00:22:59,230
purchased if you're implementing the USB

603
00:22:56,800 --> 00:23:02,470
device you should validate your response

604
00:22:59,230 --> 00:23:04,630
sizes right as a very very basic fix why

605
00:23:02,470 --> 00:23:06,430
some back 65k of data to a descriptor

606
00:23:04,630 --> 00:23:10,060
when no descriptor is ever bigger than

607
00:23:06,430 --> 00:23:11,860
like two or three hundred bytes and it's

608
00:23:10,060 --> 00:23:14,050
also useful for testing against email if

609
00:23:11,860 --> 00:23:15,070
I or glitching in general and the cool

610
00:23:14,050 --> 00:23:17,800
thing is that you can do a lot of

611
00:23:15,070 --> 00:23:19,840
testing with simulation emulation and

612
00:23:17,800 --> 00:23:22,120
through code review right so it's not

613
00:23:19,840 --> 00:23:23,709
always the case that you actually have

614
00:23:22,120 --> 00:23:26,110
to go and do the super advanced attack

615
00:23:23,710 --> 00:23:27,430
you could see with the disassembly I

616
00:23:26,110 --> 00:23:30,490
could basically look at the code and

617
00:23:27,430 --> 00:23:35,560
with a debugger I could do the same

618
00:23:30,490 --> 00:23:36,940
effects as that USB thing yes a physical

619
00:23:35,560 --> 00:23:38,470
giveaway the last thing I promised I

620
00:23:36,940 --> 00:23:39,700
brought some chip whispers - who wants

621
00:23:38,470 --> 00:23:42,100
chip whispers I'm just gonna throw them

622
00:23:39,700 --> 00:23:44,020
into the crowd okay so there's two nanos

623
00:23:42,100 --> 00:23:48,340
which are the new cheaper ones and one

624
00:23:44,020 --> 00:23:50,770
good one okay with what are we gonna do

625
00:23:48,340 --> 00:23:52,600
we just go this way one I'm gonna go

626
00:23:50,770 --> 00:23:57,760
this way - watch out they're like kind

627
00:23:52,600 --> 00:24:00,129
of heavy and this way 300k yes now

628
00:23:57,760 --> 00:24:02,050
people are happy and I have five

629
00:24:00,130 --> 00:24:04,480
Whisperer PCBs so you can come find me I

630
00:24:02,050 --> 00:24:07,840
brought 300 as opposed to josh is 200

631
00:24:04,480 --> 00:24:08,890
because I'm not as cheap as Josh and if

632
00:24:07,840 --> 00:24:10,030
you have any questions I think we're

633
00:24:08,890 --> 00:24:12,250
kind of gonna be out of time here so

634
00:24:10,030 --> 00:24:14,200
there's only a minute left there's a

635
00:24:12,250 --> 00:24:15,940
paper with little more details coming

636
00:24:14,200 --> 00:24:19,450
out as well and I should have a blog

637
00:24:15,940 --> 00:24:21,250
post I also do have as I mentioned the

638
00:24:19,450 --> 00:24:23,590
five ways for USB stuff is up now so

639
00:24:21,250 --> 00:24:25,510
if you want to grab that feel free to

640
00:24:23,590 --> 00:24:27,959
take a look at it and if you want to

641
00:24:25,510 --> 00:24:31,270
build them the PCB is a BGA so like I'm

642
00:24:27,960 --> 00:24:32,390
giving it to you but good luck thanks a

643
00:24:31,270 --> 00:24:36,418
lot

644
00:24:32,390 --> 00:24:36,419
[Applause]

